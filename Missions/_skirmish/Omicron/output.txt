// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 98 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 24
// Difficulty := 2 else
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 2
  21: ST_TO_ADDR
  22: GO 37
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_OWVAR 67
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// PrepareNature ( 3 , 3 , 4 , 2 , 1 , 0 , 0 , natureArea , 0 ) ;
  37: LD_INT 3
  39: PPUSH
  40: LD_INT 3
  42: PPUSH
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 2
  48: PPUSH
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 0
  54: PPUSH
  55: LD_INT 0
  57: PPUSH
  58: LD_INT 8
  60: PPUSH
  61: LD_INT 0
  63: PPUSH
  64: CALL 64756 0 9
// PrepareRussian ;
  68: CALL 896 0 0
// PrepareAmerican ;
  72: CALL 202 0 0
// PrepareSikorski ;
  76: CALL 694 0 0
// Action ;
  80: CALL 7093 0 0
// if debug then
  84: LD_EXP 1
  88: IFFALSE 97
// FogOff ( 1 ) ;
  90: LD_INT 1
  92: PPUSH
  93: CALL_OW 344
// end ;
  97: END
// export debug , activeGrishkoAI , allowToPatrol , spottedByPatrol , russianAlert , startAttackOnOmicron , omicronFall , retreatFromOmicron , sikorskiInOmicron , usLoseCounter , ruLoseCounter , tanksCounter ; function Init ; begin
  98: LD_INT 0
 100: PPUSH
// debug := 0 ;
 101: LD_ADDR_EXP 1
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// activeGrishkoAI := true ;
 109: LD_ADDR_EXP 2
 113: PUSH
 114: LD_INT 1
 116: ST_TO_ADDR
// allowToPatrol := true ;
 117: LD_ADDR_EXP 3
 121: PUSH
 122: LD_INT 1
 124: ST_TO_ADDR
// spottedByPatrol := false ;
 125: LD_ADDR_EXP 4
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// russianAlert := false ;
 133: LD_ADDR_EXP 5
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// startAttackOnOmicron := false ;
 141: LD_ADDR_EXP 6
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// omicronFall := false ;
 149: LD_ADDR_EXP 7
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// retreatFromOmicron := false ;
 157: LD_ADDR_EXP 8
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// sikorskiInOmicron := false ;
 165: LD_ADDR_EXP 9
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// usLoseCounter := 0 ;
 173: LD_ADDR_EXP 10
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// ruLoseCounter := 0 ;
 181: LD_ADDR_EXP 11
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// tanksCounter := 0 ;
 189: LD_ADDR_EXP 12
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// end ; end_of_file
 197: LD_VAR 0 1
 201: RET
// export omicronSquad , Sikorski , Harrison ; export function PrepareAmerican ; var i , un , veh ; begin
 202: LD_INT 0
 204: PPUSH
 205: PPUSH
 206: PPUSH
 207: PPUSH
// SetBName ( omikron , omikron ) ;
 208: LD_INT 64
 210: PPUSH
 211: LD_STRING omikron
 213: PPUSH
 214: CALL_OW 500
// uc_side := 4 ;
 218: LD_ADDR_OWVAR 20
 222: PUSH
 223: LD_INT 4
 225: ST_TO_ADDR
// uc_nation := 1 ;
 226: LD_ADDR_OWVAR 21
 230: PUSH
 231: LD_INT 1
 233: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_STRING Harisson
 241: PPUSH
 242: LD_INT 0
 244: PPUSH
 245: LD_STRING 
 247: PPUSH
 248: CALL 30673 0 3
 252: ST_TO_ADDR
// omicronSquad := [ ] ;
 253: LD_ADDR_EXP 13
 257: PUSH
 258: EMPTY
 259: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
 260: LD_ADDR_VAR 0 2
 264: PUSH
 265: LD_INT 22
 267: PUSH
 268: LD_INT 4
 270: PUSH
 271: EMPTY
 272: LIST
 273: LIST
 274: PUSH
 275: LD_INT 2
 277: PUSH
 278: LD_INT 30
 280: PUSH
 281: LD_INT 32
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: PUSH
 288: LD_INT 30
 290: PUSH
 291: LD_INT 31
 293: PUSH
 294: EMPTY
 295: LIST
 296: LIST
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: LIST
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PPUSH
 307: CALL_OW 69
 311: PUSH
 312: FOR_IN
 313: IFFALSE 393
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
 315: LD_INT 1
 317: PPUSH
 318: LD_INT 1
 320: PPUSH
 321: LD_INT 1
 323: PPUSH
 324: CALL_OW 380
// un := CreateHuman ;
 328: LD_ADDR_VAR 0 3
 332: PUSH
 333: CALL_OW 44
 337: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 338: LD_ADDR_EXP 13
 342: PUSH
 343: LD_EXP 13
 347: PUSH
 348: LD_VAR 0 3
 352: UNION
 353: ST_TO_ADDR
// SetDir ( un , GetDir ( i ) - 3 ) ;
 354: LD_VAR 0 3
 358: PPUSH
 359: LD_VAR 0 2
 363: PPUSH
 364: CALL_OW 254
 368: PUSH
 369: LD_INT 3
 371: MINUS
 372: PPUSH
 373: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
 377: LD_VAR 0 3
 381: PPUSH
 382: LD_VAR 0 2
 386: PPUSH
 387: CALL_OW 52
// end ;
 391: GO 312
 393: POP
 394: POP
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
 395: LD_ADDR_VAR 0 2
 399: PUSH
 400: DOUBLE
 401: LD_INT 1
 403: DEC
 404: ST_TO_ADDR
 405: LD_INT 3
 407: PUSH
 408: LD_INT 2
 410: PUSH
 411: LD_INT 2
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: LIST
 418: PUSH
 419: LD_OWVAR 67
 423: ARRAY
 424: PUSH
 425: FOR_TO
 426: IFFALSE 505
// begin PrepareHuman ( false , 2 , 2 ) ;
 428: LD_INT 0
 430: PPUSH
 431: LD_INT 2
 433: PPUSH
 434: LD_INT 2
 436: PPUSH
 437: CALL_OW 380
// un := CreateHuman ;
 441: LD_ADDR_VAR 0 3
 445: PUSH
 446: CALL_OW 44
 450: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 451: LD_ADDR_EXP 13
 455: PUSH
 456: LD_EXP 13
 460: PUSH
 461: LD_VAR 0 3
 465: UNION
 466: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
 467: LD_VAR 0 3
 471: PPUSH
 472: LD_INT 64
 474: PPUSH
 475: CALL_OW 52
// ComExitBuilding ( un ) ;
 479: LD_VAR 0 3
 483: PPUSH
 484: CALL_OW 122
// AddComMoveXY ( un , 19 , 23 ) ;
 488: LD_VAR 0 3
 492: PPUSH
 493: LD_INT 19
 495: PPUSH
 496: LD_INT 23
 498: PPUSH
 499: CALL_OW 171
// end ;
 503: GO 425
 505: POP
 506: POP
// for i := 1 to 2 do
 507: LD_ADDR_VAR 0 2
 511: PUSH
 512: DOUBLE
 513: LD_INT 1
 515: DEC
 516: ST_TO_ADDR
 517: LD_INT 2
 519: PUSH
 520: FOR_TO
 521: IFFALSE 687
// begin PrepareVehicle ( [ us_medium_wheeled , us_medium_tracked ] [ i ] , engine_solar , control_manual , [ us_light_gun , us_gatling_gun ] [ i ] , 100 ) ;
 523: LD_INT 2
 525: PUSH
 526: LD_INT 3
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_VAR 0 2
 537: ARRAY
 538: PPUSH
 539: LD_INT 2
 541: PPUSH
 542: LD_INT 1
 544: PPUSH
 545: LD_INT 3
 547: PUSH
 548: LD_INT 4
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: PUSH
 555: LD_VAR 0 2
 559: ARRAY
 560: PPUSH
 561: LD_INT 100
 563: PPUSH
 564: CALL 35690 0 5
// veh := CreateVehicle ;
 568: LD_ADDR_VAR 0 4
 572: PUSH
 573: CALL_OW 45
 577: ST_TO_ADDR
// PlaceUnitXYR ( veh , 28 , 37 , 6 , false ) ;
 578: LD_VAR 0 4
 582: PPUSH
 583: LD_INT 28
 585: PPUSH
 586: LD_INT 37
 588: PPUSH
 589: LD_INT 6
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
 599: LD_INT 0
 601: PPUSH
 602: LD_INT 3
 604: PPUSH
 605: LD_INT 2
 607: PPUSH
 608: CALL_OW 380
// un := CreateHuman ;
 612: LD_ADDR_VAR 0 3
 616: PUSH
 617: CALL_OW 44
 621: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 622: LD_ADDR_EXP 13
 626: PUSH
 627: LD_EXP 13
 631: PUSH
 632: LD_VAR 0 3
 636: UNION
 637: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
 638: LD_VAR 0 3
 642: PPUSH
 643: LD_VAR 0 4
 647: PPUSH
 648: CALL_OW 52
// ComMoveXY ( un , GetX ( un ) + 3 , GetY ( un ) ) ;
 652: LD_VAR 0 3
 656: PPUSH
 657: LD_VAR 0 3
 661: PPUSH
 662: CALL_OW 250
 666: PUSH
 667: LD_INT 3
 669: PLUS
 670: PPUSH
 671: LD_VAR 0 3
 675: PPUSH
 676: CALL_OW 251
 680: PPUSH
 681: CALL_OW 111
// end ;
 685: GO 520
 687: POP
 688: POP
// end ;
 689: LD_VAR 0 1
 693: RET
// export function PrepareSikorski ; var veh ; begin
 694: LD_INT 0
 696: PPUSH
 697: PPUSH
// uc_side := 1 ;
 698: LD_ADDR_OWVAR 20
 702: PUSH
 703: LD_INT 1
 705: ST_TO_ADDR
// uc_nation := 1 ;
 706: LD_ADDR_OWVAR 21
 710: PUSH
 711: LD_INT 1
 713: ST_TO_ADDR
// hc_importance := 100 ;
 714: LD_ADDR_OWVAR 32
 718: PUSH
 719: LD_INT 100
 721: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
 722: LD_ADDR_OWVAR 26
 726: PUSH
 727: LD_STRING Jeremy Sikorski
 729: ST_TO_ADDR
// hc_gallery := us ;
 730: LD_ADDR_OWVAR 33
 734: PUSH
 735: LD_STRING us
 737: ST_TO_ADDR
// hc_face_number := 19 ;
 738: LD_ADDR_OWVAR 34
 742: PUSH
 743: LD_INT 19
 745: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , [ 4 , 4 , 3 ] [ Difficulty ] ) ;
 746: LD_INT 1
 748: PPUSH
 749: LD_INT 1
 751: PPUSH
 752: LD_INT 4
 754: PUSH
 755: LD_INT 4
 757: PUSH
 758: LD_INT 3
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: LIST
 765: PUSH
 766: LD_OWVAR 67
 770: ARRAY
 771: PPUSH
 772: CALL_OW 380
// hc_attr := [ 10 , 12 ] ;
 776: LD_ADDR_OWVAR 29
 780: PUSH
 781: LD_INT 10
 783: PUSH
 784: LD_INT 12
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: ST_TO_ADDR
// Sikorski := CreateHuman ;
 791: LD_ADDR_EXP 14
 795: PUSH
 796: CALL_OW 44
 800: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_light_gun , 88 ) ;
 801: LD_INT 3
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: LD_INT 1
 809: PPUSH
 810: LD_INT 3
 812: PPUSH
 813: LD_INT 88
 815: PPUSH
 816: CALL 35690 0 5
// veh := CreateVehicle ;
 820: LD_ADDR_VAR 0 2
 824: PUSH
 825: CALL_OW 45
 829: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
 830: LD_VAR 0 2
 834: PPUSH
 835: LD_INT 3
 837: PPUSH
 838: CALL_OW 233
// PlaceUnitXY ( veh , 106 , 2 , false ) ;
 842: LD_VAR 0 2
 846: PPUSH
 847: LD_INT 106
 849: PPUSH
 850: LD_INT 2
 852: PPUSH
 853: LD_INT 0
 855: PPUSH
 856: CALL_OW 48
// PlaceHumanInUnit ( Sikorski , veh ) ;
 860: LD_EXP 14
 864: PPUSH
 865: LD_VAR 0 2
 869: PPUSH
 870: CALL_OW 52
// SetMark ( veh , - 1 ) ;
 874: LD_VAR 0 2
 878: PPUSH
 879: LD_INT 1
 881: NEG
 882: PPUSH
 883: CALL_OW 242
// InitHc ;
 887: CALL_OW 19
// end ; end_of_file
 891: LD_VAR 0 1
 895: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo ; export function PrepareRussian ; var i , un , arm , bar , bun , tmp ; begin
 896: LD_INT 0
 898: PPUSH
 899: PPUSH
 900: PPUSH
 901: PPUSH
 902: PPUSH
 903: PPUSH
 904: PPUSH
// ResetHc ;
 905: CALL 68599 0 0
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
 909: LD_ADDR_VAR 0 2
 913: PUSH
 914: LD_INT 21
 916: PUSH
 917: LD_INT 3
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 23
 926: PUSH
 927: LD_INT 3
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: PPUSH
 938: CALL_OW 69
 942: PUSH
 943: FOR_IN
 944: IFFALSE 960
// SetBLevel ( i , 5 ) ;
 946: LD_VAR 0 2
 950: PPUSH
 951: LD_INT 5
 953: PPUSH
 954: CALL_OW 241
 958: GO 943
 960: POP
 961: POP
// SetBName ( kirov , kirov ) ;
 962: LD_INT 71
 964: PPUSH
 965: LD_STRING kirov
 967: PPUSH
 968: CALL_OW 500
// SetBName ( beria , beria ) ;
 972: LD_INT 106
 974: PPUSH
 975: LD_STRING beria
 977: PPUSH
 978: CALL_OW 500
// SetBName ( kagan , kagan ) ;
 982: LD_INT 112
 984: PPUSH
 985: LD_STRING kagan
 987: PPUSH
 988: CALL_OW 500
// uc_side := 6 ;
 992: LD_ADDR_OWVAR 20
 996: PUSH
 997: LD_INT 6
 999: ST_TO_ADDR
// uc_nation := 3 ;
1000: LD_ADDR_OWVAR 21
1004: PUSH
1005: LD_INT 3
1007: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
1008: LD_ADDR_VAR 0 5
1012: PUSH
1013: LD_INT 22
1015: PUSH
1016: LD_INT 6
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: PUSH
1023: LD_INT 30
1025: PUSH
1026: LD_INT 5
1028: PUSH
1029: EMPTY
1030: LIST
1031: LIST
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: PPUSH
1037: CALL_OW 69
1041: PUSH
1042: LD_INT 1
1044: ARRAY
1045: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
1046: LD_ADDR_VAR 0 4
1050: PUSH
1051: LD_INT 22
1053: PUSH
1054: LD_INT 6
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PUSH
1061: LD_INT 30
1063: PUSH
1064: LD_INT 4
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PPUSH
1075: CALL_OW 69
1079: PUSH
1080: LD_INT 1
1082: ARRAY
1083: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
1084: LD_ADDR_EXP 20
1088: PUSH
1089: EMPTY
1090: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
1091: LD_ADDR_EXP 21
1095: PUSH
1096: EMPTY
1097: ST_TO_ADDR
// russianPatrol := [ ] ;
1098: LD_ADDR_EXP 23
1102: PUSH
1103: EMPTY
1104: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
1105: LD_ADDR_EXP 16
1109: PUSH
1110: LD_STRING Kurin
1112: PPUSH
1113: LD_INT 0
1115: PPUSH
1116: LD_STRING 
1118: PPUSH
1119: CALL 30673 0 3
1123: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
1124: LD_EXP 16
1128: PPUSH
1129: LD_INT 71
1131: PPUSH
1132: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
1136: LD_ADDR_EXP 18
1140: PUSH
1141: LD_STRING Popov
1143: PPUSH
1144: LD_INT 0
1146: PPUSH
1147: LD_STRING 
1149: PPUSH
1150: CALL 30673 0 3
1154: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
1155: LD_EXP 18
1159: PPUSH
1160: LD_INT 71
1162: PPUSH
1163: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
1167: LD_ADDR_EXP 17
1171: PUSH
1172: LD_STRING Grishko
1174: PPUSH
1175: LD_INT 0
1177: PPUSH
1178: LD_STRING 
1180: PPUSH
1181: CALL 30673 0 3
1185: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
1186: LD_EXP 17
1190: PPUSH
1191: LD_INT 207
1193: PPUSH
1194: LD_INT 106
1196: PPUSH
1197: LD_INT 0
1199: PPUSH
1200: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
1204: LD_EXP 17
1208: PPUSH
1209: LD_INT 209
1211: PPUSH
1212: LD_INT 106
1214: PPUSH
1215: CALL_OW 118
// hc_importance := 0 ;
1219: LD_ADDR_OWVAR 32
1223: PUSH
1224: LD_INT 0
1226: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
1227: LD_ADDR_VAR 0 7
1231: PUSH
1232: LD_INT 22
1234: PUSH
1235: LD_INT 6
1237: PUSH
1238: EMPTY
1239: LIST
1240: LIST
1241: PUSH
1242: LD_INT 30
1244: PUSH
1245: LD_INT 32
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PPUSH
1256: CALL_OW 69
1260: ST_TO_ADDR
// for i in tmp do
1261: LD_ADDR_VAR 0 2
1265: PUSH
1266: LD_VAR 0 7
1270: PUSH
1271: FOR_IN
1272: IFFALSE 1309
// PlaceWeaponTurret ( i , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] ) ;
1274: LD_VAR 0 2
1278: PPUSH
1279: LD_INT 44
1281: PUSH
1282: LD_INT 43
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PUSH
1289: LD_VAR 0 2
1293: PUSH
1294: LD_INT 2
1296: MOD
1297: PUSH
1298: LD_INT 1
1300: PLUS
1301: ARRAY
1302: PPUSH
1303: CALL_OW 431
1307: GO 1271
1309: POP
1310: POP
// for i := 1 to Difficulty do
1311: LD_ADDR_VAR 0 2
1315: PUSH
1316: DOUBLE
1317: LD_INT 1
1319: DEC
1320: ST_TO_ADDR
1321: LD_OWVAR 67
1325: PUSH
1326: FOR_TO
1327: IFFALSE 1382
// begin PrepareHuman ( false , 2 , 2 ) ;
1329: LD_INT 0
1331: PPUSH
1332: LD_INT 2
1334: PPUSH
1335: LD_INT 2
1337: PPUSH
1338: CALL_OW 380
// un := CreateHuman ;
1342: LD_ADDR_VAR 0 3
1346: PUSH
1347: CALL_OW 44
1351: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
1352: LD_VAR 0 3
1356: PPUSH
1357: LD_INT 71
1359: PPUSH
1360: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1364: LD_ADDR_EXP 20
1368: PUSH
1369: LD_EXP 20
1373: PUSH
1374: LD_VAR 0 3
1378: UNION
1379: ST_TO_ADDR
// end ;
1380: GO 1326
1382: POP
1383: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1384: LD_ADDR_VAR 0 2
1388: PUSH
1389: DOUBLE
1390: LD_INT 1
1392: DEC
1393: ST_TO_ADDR
1394: LD_INT 5
1396: PUSH
1397: LD_INT 6
1399: PUSH
1400: LD_INT 6
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_OWVAR 67
1412: ARRAY
1413: PUSH
1414: FOR_TO
1415: IFFALSE 1489
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
1417: LD_INT 0
1419: PPUSH
1420: LD_INT 1
1422: PPUSH
1423: LD_INT 2
1425: PUSH
1426: LD_INT 3
1428: PUSH
1429: LD_INT 4
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: LIST
1436: PUSH
1437: LD_OWVAR 67
1441: ARRAY
1442: PPUSH
1443: CALL_OW 380
// un := CreateHuman ;
1447: LD_ADDR_VAR 0 3
1451: PUSH
1452: CALL_OW 44
1456: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
1457: LD_VAR 0 3
1461: PPUSH
1462: LD_VAR 0 5
1466: PPUSH
1467: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1471: LD_ADDR_EXP 20
1475: PUSH
1476: LD_EXP 20
1480: PUSH
1481: LD_VAR 0 3
1485: UNION
1486: ST_TO_ADDR
// end ;
1487: GO 1414
1489: POP
1490: POP
// for i := 1 to 3 do
1491: LD_ADDR_VAR 0 2
1495: PUSH
1496: DOUBLE
1497: LD_INT 1
1499: DEC
1500: ST_TO_ADDR
1501: LD_INT 3
1503: PUSH
1504: FOR_TO
1505: IFFALSE 1560
// begin PrepareHuman ( false , 3 , 3 ) ;
1507: LD_INT 0
1509: PPUSH
1510: LD_INT 3
1512: PPUSH
1513: LD_INT 3
1515: PPUSH
1516: CALL_OW 380
// un := CreateHuman ;
1520: LD_ADDR_VAR 0 3
1524: PUSH
1525: CALL_OW 44
1529: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
1530: LD_VAR 0 3
1534: PPUSH
1535: LD_INT 92
1537: PPUSH
1538: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1542: LD_ADDR_EXP 20
1546: PUSH
1547: LD_EXP 20
1551: PUSH
1552: LD_VAR 0 3
1556: UNION
1557: ST_TO_ADDR
// end ;
1558: GO 1504
1560: POP
1561: POP
// for i := 1 to 2 do
1562: LD_ADDR_VAR 0 2
1566: PUSH
1567: DOUBLE
1568: LD_INT 1
1570: DEC
1571: ST_TO_ADDR
1572: LD_INT 2
1574: PUSH
1575: FOR_TO
1576: IFFALSE 1631
// begin PrepareHuman ( false , 4 , 3 ) ;
1578: LD_INT 0
1580: PPUSH
1581: LD_INT 4
1583: PPUSH
1584: LD_INT 3
1586: PPUSH
1587: CALL_OW 380
// un := CreateHuman ;
1591: LD_ADDR_VAR 0 3
1595: PUSH
1596: CALL_OW 44
1600: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
1601: LD_VAR 0 3
1605: PPUSH
1606: LD_INT 83
1608: PPUSH
1609: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1613: LD_ADDR_EXP 20
1617: PUSH
1618: LD_EXP 20
1622: PUSH
1623: LD_VAR 0 3
1627: UNION
1628: ST_TO_ADDR
// end ;
1629: GO 1575
1631: POP
1632: POP
// for i := 1 to 5 do
1633: LD_ADDR_VAR 0 2
1637: PUSH
1638: DOUBLE
1639: LD_INT 1
1641: DEC
1642: ST_TO_ADDR
1643: LD_INT 5
1645: PUSH
1646: FOR_TO
1647: IFFALSE 1704
// begin PrepareHuman ( false , 1 , 3 ) ;
1649: LD_INT 0
1651: PPUSH
1652: LD_INT 1
1654: PPUSH
1655: LD_INT 3
1657: PPUSH
1658: CALL_OW 380
// un := CreateHuman ;
1662: LD_ADDR_VAR 0 3
1666: PUSH
1667: CALL_OW 44
1671: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
1672: LD_VAR 0 3
1676: PPUSH
1677: LD_VAR 0 4
1681: PPUSH
1682: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
1686: LD_ADDR_EXP 22
1690: PUSH
1691: LD_EXP 22
1695: PUSH
1696: LD_VAR 0 3
1700: UNION
1701: ST_TO_ADDR
// end ;
1702: GO 1646
1704: POP
1705: POP
// russianCargo := [ ] ;
1706: LD_ADDR_EXP 25
1710: PUSH
1711: EMPTY
1712: ST_TO_ADDR
// for i := 1 to 2 do
1713: LD_ADDR_VAR 0 2
1717: PUSH
1718: DOUBLE
1719: LD_INT 1
1721: DEC
1722: ST_TO_ADDR
1723: LD_INT 2
1725: PUSH
1726: FOR_TO
1727: IFFALSE 1853
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
1729: LD_INT 21
1731: PPUSH
1732: LD_INT 1
1734: PPUSH
1735: LD_INT 1
1737: PPUSH
1738: LD_INT 51
1740: PPUSH
1741: LD_INT 100
1743: PPUSH
1744: CALL 35690 0 5
// un := CreateVehicle ;
1748: LD_ADDR_VAR 0 3
1752: PUSH
1753: CALL_OW 45
1757: ST_TO_ADDR
// russianCargo := russianCargo union un ;
1758: LD_ADDR_EXP 25
1762: PUSH
1763: LD_EXP 25
1767: PUSH
1768: LD_VAR 0 3
1772: UNION
1773: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
1774: LD_VAR 0 3
1778: PPUSH
1779: LD_INT 2
1781: PPUSH
1782: LD_INT 100
1784: PPUSH
1785: CALL_OW 290
// SetDir ( un , 4 ) ;
1789: LD_VAR 0 3
1793: PPUSH
1794: LD_INT 4
1796: PPUSH
1797: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
1801: LD_VAR 0 3
1805: PPUSH
1806: LD_INT 147
1808: PPUSH
1809: LD_INT 103
1811: PPUSH
1812: LD_INT 4
1814: PPUSH
1815: LD_INT 0
1817: PPUSH
1818: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
1822: LD_INT 0
1824: PPUSH
1825: LD_INT 1
1827: PPUSH
1828: LD_OWVAR 67
1832: PPUSH
1833: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1837: CALL_OW 44
1841: PPUSH
1842: LD_VAR 0 3
1846: PPUSH
1847: CALL_OW 52
// end ;
1851: GO 1726
1853: POP
1854: POP
// uc_side := 3 ;
1855: LD_ADDR_OWVAR 20
1859: PUSH
1860: LD_INT 3
1862: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
1863: LD_ADDR_EXP 19
1867: PUSH
1868: LD_STRING Burlak
1870: PPUSH
1871: LD_INT 0
1873: PPUSH
1874: LD_STRING 
1876: PPUSH
1877: CALL 30673 0 3
1881: ST_TO_ADDR
// ResetHc ;
1882: CALL 68599 0 0
// PrepareHuman ( false , 3 , 2 ) ;
1886: LD_INT 0
1888: PPUSH
1889: LD_INT 3
1891: PPUSH
1892: LD_INT 2
1894: PPUSH
1895: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ruBeriaCargo ) ;
1899: CALL_OW 44
1903: PPUSH
1904: LD_INT 180
1906: PPUSH
1907: CALL_OW 52
// if Difficulty > 1 then
1911: LD_OWVAR 67
1915: PUSH
1916: LD_INT 1
1918: GREATER
1919: IFFALSE 1977
// begin for i := 1 to 3 do
1921: LD_ADDR_VAR 0 2
1925: PUSH
1926: DOUBLE
1927: LD_INT 1
1929: DEC
1930: ST_TO_ADDR
1931: LD_INT 3
1933: PUSH
1934: FOR_TO
1935: IFFALSE 1975
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1937: LD_INT 0
1939: PPUSH
1940: LD_INT 1
1942: PPUSH
1943: LD_OWVAR 67
1947: PPUSH
1948: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 86 , 17 , 3 , false ) ;
1952: CALL_OW 44
1956: PPUSH
1957: LD_INT 86
1959: PPUSH
1960: LD_INT 17
1962: PPUSH
1963: LD_INT 3
1965: PPUSH
1966: LD_INT 0
1968: PPUSH
1969: CALL_OW 50
// end ;
1973: GO 1934
1975: POP
1976: POP
// end ; for i := 1 to 2 do
1977: LD_ADDR_VAR 0 2
1981: PUSH
1982: DOUBLE
1983: LD_INT 1
1985: DEC
1986: ST_TO_ADDR
1987: LD_INT 2
1989: PUSH
1990: FOR_TO
1991: IFFALSE 2031
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1993: LD_INT 0
1995: PPUSH
1996: LD_INT 1
1998: PPUSH
1999: LD_OWVAR 67
2003: PPUSH
2004: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 108 , 153 , 3 , false ) ;
2008: CALL_OW 44
2012: PPUSH
2013: LD_INT 108
2015: PPUSH
2016: LD_INT 153
2018: PPUSH
2019: LD_INT 3
2021: PPUSH
2022: LD_INT 0
2024: PPUSH
2025: CALL_OW 50
// end ;
2029: GO 1990
2031: POP
2032: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
2033: LD_ADDR_VAR 0 7
2037: PUSH
2038: LD_INT 22
2040: PUSH
2041: LD_INT 3
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PUSH
2048: LD_INT 30
2050: PUSH
2051: LD_INT 32
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PPUSH
2062: CALL_OW 69
2066: ST_TO_ADDR
// for i := 1 to tmp do
2067: LD_ADDR_VAR 0 2
2071: PUSH
2072: DOUBLE
2073: LD_INT 1
2075: DEC
2076: ST_TO_ADDR
2077: LD_VAR 0 7
2081: PUSH
2082: FOR_TO
2083: IFFALSE 2191
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
2085: LD_INT 0
2087: PPUSH
2088: LD_INT 1
2090: PPUSH
2091: LD_OWVAR 67
2095: PUSH
2096: LD_INT 1
2098: PLUS
2099: PPUSH
2100: CALL_OW 380
// un := CreateHuman ;
2104: LD_ADDR_VAR 0 3
2108: PUSH
2109: CALL_OW 44
2113: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
2114: LD_VAR 0 3
2118: PPUSH
2119: LD_VAR 0 7
2123: PUSH
2124: LD_VAR 0 2
2128: ARRAY
2129: PPUSH
2130: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2134: LD_ADDR_EXP 21
2138: PUSH
2139: LD_EXP 21
2143: PUSH
2144: LD_VAR 0 3
2148: UNION
2149: ST_TO_ADDR
// PlaceWeaponTurret ( tmp [ i ] , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] ) ;
2150: LD_VAR 0 7
2154: PUSH
2155: LD_VAR 0 2
2159: ARRAY
2160: PPUSH
2161: LD_INT 44
2163: PUSH
2164: LD_INT 43
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PUSH
2171: LD_VAR 0 2
2175: PUSH
2176: LD_INT 2
2178: MOD
2179: PUSH
2180: LD_INT 1
2182: PLUS
2183: ARRAY
2184: PPUSH
2185: CALL_OW 431
// end ;
2189: GO 2082
2191: POP
2192: POP
// for i := 1 to Difficulty + 1 do
2193: LD_ADDR_VAR 0 2
2197: PUSH
2198: DOUBLE
2199: LD_INT 1
2201: DEC
2202: ST_TO_ADDR
2203: LD_OWVAR 67
2207: PUSH
2208: LD_INT 1
2210: PLUS
2211: PUSH
2212: FOR_TO
2213: IFFALSE 2304
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
2215: LD_INT 0
2217: PPUSH
2218: LD_INT 1
2220: PPUSH
2221: LD_OWVAR 67
2225: PUSH
2226: LD_INT 1
2228: PLUS
2229: PPUSH
2230: CALL_OW 380
// un := CreateHuman ;
2234: LD_ADDR_VAR 0 3
2238: PUSH
2239: CALL_OW 44
2243: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2244: LD_VAR 0 3
2248: PPUSH
2249: LD_INT 22
2251: PUSH
2252: LD_INT 3
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 30
2261: PUSH
2262: LD_INT 5
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PPUSH
2273: CALL_OW 69
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: PPUSH
2282: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2286: LD_ADDR_EXP 21
2290: PUSH
2291: LD_EXP 21
2295: PUSH
2296: LD_VAR 0 3
2300: UNION
2301: ST_TO_ADDR
// end ;
2302: GO 2212
2304: POP
2305: POP
// for i := 1 to 2 do
2306: LD_ADDR_VAR 0 2
2310: PUSH
2311: DOUBLE
2312: LD_INT 1
2314: DEC
2315: ST_TO_ADDR
2316: LD_INT 2
2318: PUSH
2319: FOR_TO
2320: IFFALSE 2407
// begin PrepareHuman ( false , 4 , Difficulty ) ;
2322: LD_INT 0
2324: PPUSH
2325: LD_INT 4
2327: PPUSH
2328: LD_OWVAR 67
2332: PPUSH
2333: CALL_OW 380
// un := CreateHuman ;
2337: LD_ADDR_VAR 0 3
2341: PUSH
2342: CALL_OW 44
2346: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
2347: LD_VAR 0 3
2351: PPUSH
2352: LD_INT 22
2354: PUSH
2355: LD_INT 3
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PUSH
2362: LD_INT 30
2364: PUSH
2365: LD_INT 7
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PPUSH
2376: CALL_OW 69
2380: PUSH
2381: LD_INT 1
2383: ARRAY
2384: PPUSH
2385: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2389: LD_ADDR_EXP 21
2393: PUSH
2394: LD_EXP 21
2398: PUSH
2399: LD_VAR 0 3
2403: UNION
2404: ST_TO_ADDR
// end ;
2405: GO 2319
2407: POP
2408: POP
// for i := 1 to Difficulty do
2409: LD_ADDR_VAR 0 2
2413: PUSH
2414: DOUBLE
2415: LD_INT 1
2417: DEC
2418: ST_TO_ADDR
2419: LD_OWVAR 67
2423: PUSH
2424: FOR_TO
2425: IFFALSE 2482
// begin PrepareHuman ( false , 2 , Difficulty ) ;
2427: LD_INT 0
2429: PPUSH
2430: LD_INT 2
2432: PPUSH
2433: LD_OWVAR 67
2437: PPUSH
2438: CALL_OW 380
// un := CreateHuman ;
2442: LD_ADDR_VAR 0 3
2446: PUSH
2447: CALL_OW 44
2451: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
2452: LD_VAR 0 3
2456: PPUSH
2457: LD_INT 106
2459: PPUSH
2460: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2464: LD_ADDR_EXP 21
2468: PUSH
2469: LD_EXP 21
2473: PUSH
2474: LD_VAR 0 3
2478: UNION
2479: ST_TO_ADDR
// end ;
2480: GO 2424
2482: POP
2483: POP
// for i := 1 to 3 do
2484: LD_ADDR_VAR 0 2
2488: PUSH
2489: DOUBLE
2490: LD_INT 1
2492: DEC
2493: ST_TO_ADDR
2494: LD_INT 3
2496: PUSH
2497: FOR_TO
2498: IFFALSE 2620
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
2500: LD_ADDR_VAR 0 6
2504: PUSH
2505: LD_INT 22
2507: PUSH
2508: LD_INT 3
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: PUSH
2515: LD_INT 30
2517: PUSH
2518: LD_INT 31
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PPUSH
2529: CALL_OW 69
2533: PUSH
2534: LD_VAR 0 2
2538: ARRAY
2539: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
2540: LD_INT 0
2542: PPUSH
2543: LD_INT 1
2545: PPUSH
2546: LD_OWVAR 67
2550: PPUSH
2551: CALL_OW 380
// un := CreateHuman ;
2555: LD_ADDR_VAR 0 3
2559: PUSH
2560: CALL_OW 44
2564: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
2565: LD_VAR 0 3
2569: PPUSH
2570: LD_VAR 0 6
2574: PPUSH
2575: CALL_OW 254
2579: PUSH
2580: LD_INT 3
2582: PLUS
2583: PPUSH
2584: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
2588: LD_VAR 0 3
2592: PPUSH
2593: LD_VAR 0 6
2597: PPUSH
2598: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2602: LD_ADDR_EXP 21
2606: PUSH
2607: LD_EXP 21
2611: PUSH
2612: LD_VAR 0 3
2616: UNION
2617: ST_TO_ADDR
// end ;
2618: GO 2497
2620: POP
2621: POP
// russianOmicronAttackers := [ ] ;
2622: LD_ADDR_EXP 24
2626: PUSH
2627: EMPTY
2628: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2629: LD_ADDR_VAR 0 2
2633: PUSH
2634: DOUBLE
2635: LD_INT 1
2637: DEC
2638: ST_TO_ADDR
2639: LD_INT 4
2641: PUSH
2642: LD_INT 5
2644: PUSH
2645: LD_INT 6
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: LIST
2652: PUSH
2653: LD_OWVAR 67
2657: ARRAY
2658: PUSH
2659: FOR_TO
2660: IFFALSE 2878
// begin PrepareVehicle ( [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
2662: LD_INT 21
2664: PUSH
2665: LD_INT 23
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: PUSH
2672: LD_VAR 0 2
2676: PUSH
2677: LD_INT 2
2679: MOD
2680: PUSH
2681: LD_INT 1
2683: PLUS
2684: ARRAY
2685: PPUSH
2686: LD_INT 1
2688: PPUSH
2689: LD_INT 1
2691: PPUSH
2692: LD_INT 43
2694: PUSH
2695: LD_INT 44
2697: PUSH
2698: LD_INT 42
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: LIST
2705: PUSH
2706: LD_VAR 0 2
2710: PUSH
2711: LD_INT 3
2713: MOD
2714: PUSH
2715: LD_INT 1
2717: PLUS
2718: ARRAY
2719: PPUSH
2720: LD_INT 100
2722: PPUSH
2723: CALL 35690 0 5
// un := CreateVehicle ;
2727: LD_ADDR_VAR 0 3
2731: PUSH
2732: CALL_OW 45
2736: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
2737: LD_VAR 0 3
2741: PPUSH
2742: LD_INT 0
2744: PUSH
2745: LD_INT 5
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: PUSH
2752: LD_INT 1
2754: PPUSH
2755: LD_INT 2
2757: PPUSH
2758: CALL_OW 12
2762: ARRAY
2763: PPUSH
2764: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
2768: LD_ADDR_EXP 24
2772: PUSH
2773: LD_EXP 24
2777: PUSH
2778: LD_VAR 0 3
2782: UNION
2783: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
2784: LD_VAR 0 3
2788: PPUSH
2789: LD_INT 127
2791: PPUSH
2792: LD_INT 89
2794: PPUSH
2795: LD_INT 7
2797: PPUSH
2798: LD_INT 0
2800: PPUSH
2801: CALL_OW 50
// uc_side := 3 ;
2805: LD_ADDR_OWVAR 20
2809: PUSH
2810: LD_INT 3
2812: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
2813: LD_INT 0
2815: PPUSH
2816: LD_INT 3
2818: PPUSH
2819: LD_INT 3
2821: PPUSH
2822: CALL_OW 380
// un := CreateHuman ;
2826: LD_ADDR_VAR 0 3
2830: PUSH
2831: CALL_OW 44
2835: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
2836: LD_ADDR_EXP 24
2840: PUSH
2841: LD_EXP 24
2845: PUSH
2846: LD_VAR 0 3
2850: UNION
2851: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
2852: LD_VAR 0 3
2856: PPUSH
2857: LD_EXP 24
2861: PUSH
2862: LD_EXP 24
2866: PUSH
2867: LD_INT 1
2869: MINUS
2870: ARRAY
2871: PPUSH
2872: CALL_OW 52
// end ;
2876: GO 2659
2878: POP
2879: POP
// for i := 1 to 3 do
2880: LD_ADDR_VAR 0 2
2884: PUSH
2885: DOUBLE
2886: LD_INT 1
2888: DEC
2889: ST_TO_ADDR
2890: LD_INT 3
2892: PUSH
2893: FOR_TO
2894: IFFALSE 2960
// begin PrepareHuman ( false , 1 , Difficulty ) ;
2896: LD_INT 0
2898: PPUSH
2899: LD_INT 1
2901: PPUSH
2902: LD_OWVAR 67
2906: PPUSH
2907: CALL_OW 380
// un := CreateHuman ;
2911: LD_ADDR_VAR 0 3
2915: PUSH
2916: CALL_OW 44
2920: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
2921: LD_ADDR_EXP 24
2925: PUSH
2926: LD_EXP 24
2930: PUSH
2931: LD_VAR 0 3
2935: UNION
2936: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
2937: LD_VAR 0 3
2941: PPUSH
2942: LD_INT 91
2944: PPUSH
2945: LD_INT 60
2947: PPUSH
2948: LD_INT 3
2950: PPUSH
2951: LD_INT 0
2953: PPUSH
2954: CALL_OW 50
// end ;
2958: GO 2893
2960: POP
2961: POP
// end ;
2962: LD_VAR 0 1
2966: RET
// every 0 0$3 do var i ;
2967: GO 2969
2969: DISABLE
2970: LD_INT 0
2972: PPUSH
// begin for i := 1 to 4 do
2973: LD_ADDR_VAR 0 1
2977: PUSH
2978: DOUBLE
2979: LD_INT 1
2981: DEC
2982: ST_TO_ADDR
2983: LD_INT 4
2985: PUSH
2986: FOR_TO
2987: IFFALSE 3006
// ComExitBuilding ( grishkoSquad [ i ] ) ;
2989: LD_EXP 22
2993: PUSH
2994: LD_VAR 0 1
2998: ARRAY
2999: PPUSH
3000: CALL_OW 122
3004: GO 2986
3006: POP
3007: POP
// wait ( 3 ) ;
3008: LD_INT 3
3010: PPUSH
3011: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
3015: LD_EXP 22
3019: PUSH
3020: LD_INT 1
3022: ARRAY
3023: PPUSH
3024: LD_INT 22
3026: PUSH
3027: LD_INT 6
3029: PUSH
3030: EMPTY
3031: LIST
3032: LIST
3033: PUSH
3034: LD_INT 30
3036: PUSH
3037: LD_INT 31
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PPUSH
3048: CALL_OW 69
3052: PPUSH
3053: LD_EXP 22
3057: PUSH
3058: LD_INT 1
3060: ARRAY
3061: PPUSH
3062: CALL_OW 74
3066: PPUSH
3067: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
3071: LD_EXP 22
3075: PUSH
3076: LD_INT 2
3078: ARRAY
3079: PPUSH
3080: LD_INT 211
3082: PPUSH
3083: LD_INT 107
3085: PPUSH
3086: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
3090: LD_EXP 22
3094: PUSH
3095: LD_INT 2
3097: ARRAY
3098: PPUSH
3099: LD_INT 209
3101: PPUSH
3102: LD_INT 106
3104: PPUSH
3105: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
3109: LD_EXP 22
3113: PUSH
3114: LD_INT 3
3116: ARRAY
3117: PPUSH
3118: LD_INT 209
3120: PPUSH
3121: LD_INT 103
3123: PPUSH
3124: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
3128: LD_EXP 22
3132: PUSH
3133: LD_INT 3
3135: ARRAY
3136: PPUSH
3137: LD_INT 209
3139: PPUSH
3140: LD_INT 106
3142: PPUSH
3143: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
3147: LD_EXP 22
3151: PUSH
3152: LD_INT 4
3154: ARRAY
3155: PPUSH
3156: LD_INT 227
3158: PPUSH
3159: LD_INT 117
3161: PPUSH
3162: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
3166: LD_EXP 22
3170: PUSH
3171: LD_INT 4
3173: ARRAY
3174: PPUSH
3175: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
3179: LD_INT 700
3181: PPUSH
3182: CALL_OW 67
// for i := 3 downto 2 do
3186: LD_ADDR_VAR 0 1
3190: PUSH
3191: DOUBLE
3192: LD_INT 3
3194: INC
3195: ST_TO_ADDR
3196: LD_INT 2
3198: PUSH
3199: FOR_DOWNTO
3200: IFFALSE 3367
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
3202: LD_EXP 22
3206: PUSH
3207: LD_VAR 0 1
3211: ARRAY
3212: PPUSH
3213: LD_INT 200
3215: PPUSH
3216: LD_INT 91
3218: PPUSH
3219: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3223: LD_EXP 22
3227: PUSH
3228: LD_VAR 0 1
3232: ARRAY
3233: PPUSH
3234: LD_INT 210
3236: PPUSH
3237: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
3241: LD_EXP 22
3245: PUSH
3246: LD_VAR 0 1
3250: ARRAY
3251: PPUSH
3252: LD_INT 224
3254: PPUSH
3255: LD_INT 93
3257: PPUSH
3258: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3262: LD_EXP 22
3266: PUSH
3267: LD_VAR 0 1
3271: ARRAY
3272: PPUSH
3273: LD_INT 210
3275: PPUSH
3276: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
3280: LD_EXP 22
3284: PUSH
3285: LD_VAR 0 1
3289: ARRAY
3290: PPUSH
3291: LD_INT 239
3293: PPUSH
3294: LD_INT 123
3296: PPUSH
3297: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3301: LD_EXP 22
3305: PUSH
3306: LD_VAR 0 1
3310: ARRAY
3311: PPUSH
3312: LD_INT 210
3314: PPUSH
3315: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
3319: LD_EXP 22
3323: PUSH
3324: LD_VAR 0 1
3328: ARRAY
3329: PPUSH
3330: LD_INT 212
3332: PPUSH
3333: LD_INT 105
3335: PPUSH
3336: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
3340: LD_EXP 22
3344: PUSH
3345: LD_VAR 0 1
3349: ARRAY
3350: PPUSH
3351: LD_INT 700
3353: PPUSH
3354: CALL_OW 202
// wait ( 0 0$30 ) ;
3358: LD_INT 1050
3360: PPUSH
3361: CALL_OW 67
// end ;
3365: GO 3199
3367: POP
3368: POP
// until not activeGrishkoAI ;
3369: LD_EXP 2
3373: NOT
3374: IFFALSE 3179
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
3376: LD_EXP 22
3380: PPUSH
3381: LD_INT 221
3383: PPUSH
3384: LD_INT 110
3386: PPUSH
3387: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
3391: LD_EXP 22
3395: PPUSH
3396: LD_INT 228
3398: PPUSH
3399: LD_INT 115
3401: PPUSH
3402: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
3406: LD_EXP 22
3410: PPUSH
3411: CALL_OW 200
// end ;
3415: PPOPN 1
3417: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
3418: LD_EXP 3
3422: IFFALSE 4056
3424: GO 3426
3426: DISABLE
3427: LD_INT 0
3429: PPUSH
3430: PPUSH
3431: PPUSH
3432: PPUSH
// begin uc_side := 6 ;
3433: LD_ADDR_OWVAR 20
3437: PUSH
3438: LD_INT 6
3440: ST_TO_ADDR
// uc_nation := 3 ;
3441: LD_ADDR_OWVAR 21
3445: PUSH
3446: LD_INT 3
3448: ST_TO_ADDR
// ResetHc ;
3449: CALL 68599 0 0
// for i := 1 to 3 do
3453: LD_ADDR_VAR 0 2
3457: PUSH
3458: DOUBLE
3459: LD_INT 1
3461: DEC
3462: ST_TO_ADDR
3463: LD_INT 3
3465: PUSH
3466: FOR_TO
3467: IFFALSE 3576
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
3469: LD_INT 0
3471: PPUSH
3472: LD_INT 1
3474: PPUSH
3475: LD_INT 2
3477: PUSH
3478: LD_INT 3
3480: PUSH
3481: LD_INT 4
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: LIST
3488: PUSH
3489: LD_OWVAR 67
3493: ARRAY
3494: PPUSH
3495: CALL_OW 380
// un := CreateHuman ;
3499: LD_ADDR_VAR 0 1
3503: PUSH
3504: CALL_OW 44
3508: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
3509: LD_ADDR_EXP 23
3513: PUSH
3514: LD_EXP 23
3518: PUSH
3519: LD_VAR 0 1
3523: UNION
3524: ST_TO_ADDR
// SetTag ( un , 1 ) ;
3525: LD_VAR 0 1
3529: PPUSH
3530: LD_INT 1
3532: PPUSH
3533: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
3537: LD_VAR 0 1
3541: PPUSH
3542: LD_INT 3
3544: PPUSH
3545: LD_INT 0
3547: PPUSH
3548: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
3552: LD_VAR 0 1
3556: PPUSH
3557: LD_INT 210
3559: PPUSH
3560: LD_INT 159
3562: PPUSH
3563: CALL_OW 111
// wait ( 0 0$2 ) ;
3567: LD_INT 70
3569: PPUSH
3570: CALL_OW 67
// end ;
3574: GO 3466
3576: POP
3577: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 208 , 42 ] ] ] ;
3578: LD_ADDR_VAR 0 4
3582: PUSH
3583: LD_INT 172
3585: PUSH
3586: LD_INT 76
3588: PUSH
3589: EMPTY
3590: LIST
3591: LIST
3592: PUSH
3593: LD_INT 150
3595: PUSH
3596: LD_INT 38
3598: PUSH
3599: EMPTY
3600: LIST
3601: LIST
3602: PUSH
3603: LD_INT 148
3605: PUSH
3606: LD_INT 9
3608: PUSH
3609: EMPTY
3610: LIST
3611: LIST
3612: PUSH
3613: LD_INT 165
3615: PUSH
3616: LD_INT 38
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: PUSH
3629: LD_INT 191
3631: PUSH
3632: LD_INT 77
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: LD_INT 168
3641: PUSH
3642: LD_INT 42
3644: PUSH
3645: EMPTY
3646: LIST
3647: LIST
3648: PUSH
3649: LD_INT 166
3651: PUSH
3652: LD_INT 11
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: PUSH
3659: LD_INT 151
3661: PUSH
3662: LD_INT 12
3664: PUSH
3665: EMPTY
3666: LIST
3667: LIST
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: PUSH
3675: LD_INT 221
3677: PUSH
3678: LD_INT 88
3680: PUSH
3681: EMPTY
3682: LIST
3683: LIST
3684: PUSH
3685: LD_INT 217
3687: PUSH
3688: LD_INT 64
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: PUSH
3695: LD_INT 208
3697: PUSH
3698: LD_INT 42
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: LIST
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: LIST
3714: ST_TO_ADDR
// repeat wait ( 0 0$5 ) ;
3715: LD_INT 175
3717: PPUSH
3718: CALL_OW 67
// for i := 1 to patrol do
3722: LD_ADDR_VAR 0 2
3726: PUSH
3727: DOUBLE
3728: LD_INT 1
3730: DEC
3731: ST_TO_ADDR
3732: LD_VAR 0 4
3736: PUSH
3737: FOR_TO
3738: IFFALSE 4020
// begin if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
3740: LD_EXP 23
3744: PUSH
3745: LD_VAR 0 2
3749: ARRAY
3750: PPUSH
3751: CALL_OW 256
3755: PUSH
3756: LD_INT 990
3758: LESS
3759: PUSH
3760: LD_EXP 23
3764: PUSH
3765: LD_VAR 0 2
3769: ARRAY
3770: PPUSH
3771: CALL_OW 110
3775: PUSH
3776: LD_INT 1
3778: EQUAL
3779: AND
3780: IFFALSE 3808
// begin spottedByPatrol := true ;
3782: LD_ADDR_EXP 4
3786: PUSH
3787: LD_INT 1
3789: ST_TO_ADDR
// SetTag ( russianPatrol [ i ] , 2 ) ;
3790: LD_EXP 23
3794: PUSH
3795: LD_VAR 0 2
3799: ARRAY
3800: PPUSH
3801: LD_INT 2
3803: PPUSH
3804: CALL_OW 109
// end ; if GetTag ( russianPatrol [ i ] ) = 2 then
3808: LD_EXP 23
3812: PUSH
3813: LD_VAR 0 2
3817: ARRAY
3818: PPUSH
3819: CALL_OW 110
3823: PUSH
3824: LD_INT 2
3826: EQUAL
3827: IFFALSE 3918
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
3829: LD_EXP 23
3833: PUSH
3834: LD_VAR 0 2
3838: ARRAY
3839: PPUSH
3840: LD_INT 166
3842: PPUSH
3843: LD_INT 101
3845: PPUSH
3846: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
3850: LD_EXP 23
3854: PUSH
3855: LD_VAR 0 2
3859: ARRAY
3860: PPUSH
3861: LD_INT 71
3863: PPUSH
3864: CALL_OW 296
3868: PUSH
3869: LD_INT 10
3871: LESS
3872: IFFALSE 3916
// begin kirovBaseSquad := kirovBaseSquad union russianPatrol [ i ] ;
3874: LD_ADDR_EXP 20
3878: PUSH
3879: LD_EXP 20
3883: PUSH
3884: LD_EXP 23
3888: PUSH
3889: LD_VAR 0 2
3893: ARRAY
3894: UNION
3895: ST_TO_ADDR
// russianPatrol := Delete ( russianPatrol , i ) ;
3896: LD_ADDR_EXP 23
3900: PUSH
3901: LD_EXP 23
3905: PPUSH
3906: LD_VAR 0 2
3910: PPUSH
3911: CALL_OW 3
3915: ST_TO_ADDR
// end ; continue ;
3916: GO 3737
// end ; if not HasTask ( russianPatrol [ i ] ) then
3918: LD_EXP 23
3922: PUSH
3923: LD_VAR 0 2
3927: ARRAY
3928: PPUSH
3929: CALL_OW 314
3933: NOT
3934: IFFALSE 4018
// for j in patrol [ i ] do
3936: LD_ADDR_VAR 0 3
3940: PUSH
3941: LD_VAR 0 4
3945: PUSH
3946: LD_VAR 0 2
3950: ARRAY
3951: PUSH
3952: FOR_IN
3953: IFFALSE 4016
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
3955: LD_EXP 23
3959: PUSH
3960: LD_VAR 0 2
3964: ARRAY
3965: PPUSH
3966: LD_INT 35
3968: PPUSH
3969: LD_INT 175
3971: PPUSH
3972: CALL_OW 12
3976: PPUSH
3977: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
3981: LD_EXP 23
3985: PUSH
3986: LD_VAR 0 2
3990: ARRAY
3991: PPUSH
3992: LD_VAR 0 3
3996: PUSH
3997: LD_INT 1
3999: ARRAY
4000: PPUSH
4001: LD_VAR 0 3
4005: PUSH
4006: LD_INT 2
4008: ARRAY
4009: PPUSH
4010: CALL_OW 174
// end ;
4014: GO 3952
4016: POP
4017: POP
// end ;
4018: GO 3737
4020: POP
4021: POP
// until not russianPatrol or russianAlert ;
4022: LD_EXP 23
4026: NOT
4027: PUSH
4028: LD_EXP 5
4032: OR
4033: IFFALSE 3715
// if russianPatrol then
4035: LD_EXP 23
4039: IFFALSE 4056
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
4041: LD_EXP 23
4045: PPUSH
4046: LD_INT 161
4048: PPUSH
4049: LD_INT 107
4051: PPUSH
4052: CALL_OW 114
// end ;
4056: PPOPN 4
4058: END
// every 0 0$1 trigger startAttackOnOmicron and not retreatFromOmicron do var i , filter , tmp , enemy , x , points , point ;
4059: LD_EXP 6
4063: PUSH
4064: LD_EXP 8
4068: NOT
4069: AND
4070: IFFALSE 4640
4072: GO 4074
4074: DISABLE
4075: LD_INT 0
4077: PPUSH
4078: PPUSH
4079: PPUSH
4080: PPUSH
4081: PPUSH
4082: PPUSH
4083: PPUSH
// begin enable ;
4084: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
4085: LD_ADDR_VAR 0 2
4089: PUSH
4090: LD_EXP 24
4094: PPUSH
4095: LD_INT 21
4097: PUSH
4098: LD_INT 2
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: PPUSH
4105: CALL_OW 72
4109: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 1 ] ) ;
4110: LD_ADDR_VAR 0 4
4114: PUSH
4115: LD_INT 22
4117: PUSH
4118: LD_INT 1
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: PPUSH
4125: CALL_OW 69
4129: ST_TO_ADDR
// points := [ [ 44 , 15 ] , [ 54 , 39 ] ] ;
4130: LD_ADDR_VAR 0 6
4134: PUSH
4135: LD_INT 44
4137: PUSH
4138: LD_INT 15
4140: PUSH
4141: EMPTY
4142: LIST
4143: LIST
4144: PUSH
4145: LD_INT 54
4147: PUSH
4148: LD_INT 39
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: ST_TO_ADDR
// for i in filter do
4159: LD_ADDR_VAR 0 1
4163: PUSH
4164: LD_VAR 0 2
4168: PUSH
4169: FOR_IN
4170: IFFALSE 4638
// begin tmp := IsDrivenBy ( i ) ;
4172: LD_ADDR_VAR 0 3
4176: PUSH
4177: LD_VAR 0 1
4181: PPUSH
4182: CALL_OW 311
4186: ST_TO_ADDR
// if not tmp then
4187: LD_VAR 0 3
4191: NOT
4192: IFFALSE 4196
// continue ;
4194: GO 4169
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
4196: LD_VAR 0 1
4200: PPUSH
4201: CALL_OW 261
4205: PUSH
4206: LD_INT 90
4208: GREATER
4209: PUSH
4210: LD_VAR 0 1
4214: PPUSH
4215: CALL_OW 110
4219: PUSH
4220: LD_INT 2
4222: EQUAL
4223: AND
4224: IFFALSE 4240
// SetTag ( i , 0 ) else
4226: LD_VAR 0 1
4230: PPUSH
4231: LD_INT 0
4233: PPUSH
4234: CALL_OW 109
4238: GO 4336
// if GetTag ( i ) = 2 then
4240: LD_VAR 0 1
4244: PPUSH
4245: CALL_OW 110
4249: PUSH
4250: LD_INT 2
4252: EQUAL
4253: IFFALSE 4336
// begin x := rand ( 1 , 2 ) ;
4255: LD_ADDR_VAR 0 5
4259: PUSH
4260: LD_INT 1
4262: PPUSH
4263: LD_INT 2
4265: PPUSH
4266: CALL_OW 12
4270: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
4271: LD_VAR 0 1
4275: PPUSH
4276: LD_EXP 25
4280: PUSH
4281: LD_VAR 0 5
4285: ARRAY
4286: PPUSH
4287: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
4291: LD_EXP 25
4295: PUSH
4296: LD_VAR 0 5
4300: ARRAY
4301: PPUSH
4302: LD_INT 2
4304: PPUSH
4305: CALL_OW 289
4309: PUSH
4310: LD_INT 20
4312: LESS
4313: IFFALSE 4336
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
4315: LD_EXP 25
4319: PUSH
4320: LD_VAR 0 5
4324: ARRAY
4325: PPUSH
4326: LD_INT 2
4328: PPUSH
4329: LD_INT 100
4331: PPUSH
4332: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
4336: LD_VAR 0 1
4340: PPUSH
4341: CALL_OW 256
4345: PUSH
4346: LD_INT 600
4348: GREATEREQUAL
4349: PUSH
4350: LD_VAR 0 1
4354: PPUSH
4355: CALL_OW 110
4359: NOT
4360: AND
4361: IFFALSE 4387
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4363: LD_VAR 0 1
4367: PPUSH
4368: LD_VAR 0 4
4372: PPUSH
4373: LD_VAR 0 1
4377: PPUSH
4378: CALL_OW 74
4382: PPUSH
4383: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
4387: LD_VAR 0 1
4391: PPUSH
4392: CALL_OW 256
4396: PUSH
4397: LD_INT 600
4399: LESS
4400: PUSH
4401: LD_VAR 0 1
4405: PPUSH
4406: CALL_OW 110
4410: NOT
4411: AND
4412: IFFALSE 4488
// begin SetTag ( i , 1 ) ;
4414: LD_VAR 0 1
4418: PPUSH
4419: LD_INT 1
4421: PPUSH
4422: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
4426: LD_ADDR_VAR 0 7
4430: PUSH
4431: LD_VAR 0 1
4435: PPUSH
4436: LD_VAR 0 6
4440: PPUSH
4441: CALL 71422 0 2
4445: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
4446: LD_VAR 0 1
4450: PPUSH
4451: LD_VAR 0 7
4455: PUSH
4456: LD_INT 1
4458: ARRAY
4459: PPUSH
4460: LD_VAR 0 7
4464: PUSH
4465: LD_INT 2
4467: ARRAY
4468: PPUSH
4469: CALL_OW 111
// AddComMoveXY ( i , 71 , 29 ) ;
4473: LD_VAR 0 1
4477: PPUSH
4478: LD_INT 71
4480: PPUSH
4481: LD_INT 29
4483: PPUSH
4484: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 71 , 29 ) < 9 and tmp then
4488: LD_VAR 0 1
4492: PPUSH
4493: CALL_OW 110
4497: PUSH
4498: LD_INT 1
4500: EQUAL
4501: PUSH
4502: LD_VAR 0 1
4506: PPUSH
4507: LD_INT 71
4509: PPUSH
4510: LD_INT 29
4512: PPUSH
4513: CALL_OW 297
4517: PUSH
4518: LD_INT 9
4520: LESS
4521: AND
4522: PUSH
4523: LD_VAR 0 3
4527: AND
4528: IFFALSE 4636
// begin ComExitVehicle ( tmp ) ;
4530: LD_VAR 0 3
4534: PPUSH
4535: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4539: LD_VAR 0 3
4543: PPUSH
4544: LD_VAR 0 1
4548: PPUSH
4549: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4553: LD_INT 35
4555: PPUSH
4556: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4560: LD_VAR 0 1
4564: PPUSH
4565: CALL_OW 256
4569: PUSH
4570: LD_INT 1000
4572: EQUAL
4573: IFFALSE 4553
// ComEnterUnit ( tmp , i ) ;
4575: LD_VAR 0 3
4579: PPUSH
4580: LD_VAR 0 1
4584: PPUSH
4585: CALL_OW 120
// if GetFuel ( i ) <= 90 and russianCargo then
4589: LD_VAR 0 1
4593: PPUSH
4594: CALL_OW 261
4598: PUSH
4599: LD_INT 90
4601: LESSEQUAL
4602: PUSH
4603: LD_EXP 25
4607: AND
4608: IFFALSE 4624
// SetTag ( i , 2 ) else
4610: LD_VAR 0 1
4614: PPUSH
4615: LD_INT 2
4617: PPUSH
4618: CALL_OW 109
4622: GO 4636
// SetTag ( i , 0 ) ;
4624: LD_VAR 0 1
4628: PPUSH
4629: LD_INT 0
4631: PPUSH
4632: CALL_OW 109
// end ; end ;
4636: GO 4169
4638: POP
4639: POP
// end ;
4640: PPOPN 7
4642: END
// every 0 0$30 trigger startAttackOnOmicron and not retreatFromOmicron and russianOmicronAttackers < [ 12 , 14 , 16 ] [ Difficulty ] do
4643: LD_EXP 6
4647: PUSH
4648: LD_EXP 8
4652: NOT
4653: AND
4654: PUSH
4655: LD_EXP 24
4659: PUSH
4660: LD_INT 12
4662: PUSH
4663: LD_INT 14
4665: PUSH
4666: LD_INT 16
4668: PUSH
4669: EMPTY
4670: LIST
4671: LIST
4672: LIST
4673: PUSH
4674: LD_OWVAR 67
4678: ARRAY
4679: LESS
4680: AND
4681: IFFALSE 4694
4683: GO 4685
4685: DISABLE
// begin enable ;
4686: ENABLE
// ProduceNew ( 0 ) ;
4687: LD_INT 0
4689: PPUSH
4690: CALL 4695 0 1
// end ;
4694: END
// export function ProduceNew ( type ) ; var un ; begin
4695: LD_INT 0
4697: PPUSH
4698: PPUSH
// if tanksCounter < [ 7 , 12 , 15 ] [ Difficulty ] then
4699: LD_EXP 12
4703: PUSH
4704: LD_INT 7
4706: PUSH
4707: LD_INT 12
4709: PUSH
4710: LD_INT 15
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: LIST
4717: PUSH
4718: LD_OWVAR 67
4722: ARRAY
4723: LESS
4724: IFFALSE 4798
// begin uc_side := 3 ;
4726: LD_ADDR_OWVAR 20
4730: PUSH
4731: LD_INT 3
4733: ST_TO_ADDR
// uc_nation := 3 ;
4734: LD_ADDR_OWVAR 21
4738: PUSH
4739: LD_INT 3
4741: ST_TO_ADDR
// ResetHc ;
4742: CALL 68599 0 0
// PrepareHuman ( false , 3 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4746: LD_INT 0
4748: PPUSH
4749: LD_INT 3
4751: PPUSH
4752: LD_INT 3
4754: PUSH
4755: LD_INT 4
4757: PUSH
4758: LD_INT 5
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: LIST
4765: PUSH
4766: LD_OWVAR 67
4770: ARRAY
4771: PPUSH
4772: CALL_OW 380
// un := CreateHuman ;
4776: LD_ADDR_VAR 0 3
4780: PUSH
4781: CALL_OW 44
4785: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruBeriaFac ) ;
4786: LD_VAR 0 3
4790: PPUSH
4791: LD_INT 143
4793: PPUSH
4794: CALL_OW 52
// end ; if type = 1 then
4798: LD_VAR 0 1
4802: PUSH
4803: LD_INT 1
4805: EQUAL
4806: IFFALSE 4829
// AddComConstruct ( ruBeriaFac , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) else
4808: LD_INT 143
4810: PPUSH
4811: LD_INT 21
4813: PPUSH
4814: LD_INT 1
4816: PPUSH
4817: LD_INT 1
4819: PPUSH
4820: LD_INT 51
4822: PPUSH
4823: CALL_OW 185
4827: GO 4908
// AddComConstruct ( ruBeriaFac , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , Difficulty + 1 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 4 ) ] ) ;
4829: LD_INT 143
4831: PPUSH
4832: LD_INT 21
4834: PUSH
4835: LD_INT 22
4837: PUSH
4838: LD_INT 23
4840: PUSH
4841: LD_INT 24
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: PUSH
4850: LD_INT 1
4852: PPUSH
4853: LD_OWVAR 67
4857: PUSH
4858: LD_INT 1
4860: PLUS
4861: PPUSH
4862: CALL_OW 12
4866: ARRAY
4867: PPUSH
4868: LD_INT 1
4870: PPUSH
4871: LD_INT 1
4873: PPUSH
4874: LD_INT 44
4876: PUSH
4877: LD_INT 44
4879: PUSH
4880: LD_INT 43
4882: PUSH
4883: LD_INT 42
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: PUSH
4892: LD_INT 1
4894: PPUSH
4895: LD_INT 4
4897: PPUSH
4898: CALL_OW 12
4902: ARRAY
4903: PPUSH
4904: CALL_OW 185
// end ;
4908: LD_VAR 0 2
4912: RET
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
4913: LD_EXP 8
4917: IFFALSE 5119
4919: GO 4921
4921: DISABLE
4922: LD_INT 0
4924: PPUSH
4925: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
4926: LD_EXP 25
4930: PPUSH
4931: LD_INT 79
4933: PPUSH
4934: LD_INT 155
4936: PPUSH
4937: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
4941: LD_EXP 25
4945: PPUSH
4946: LD_INT 4
4948: PPUSH
4949: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
4953: LD_ADDR_VAR 0 2
4957: PUSH
4958: LD_EXP 24
4962: PPUSH
4963: LD_INT 50
4965: PUSH
4966: EMPTY
4967: LIST
4968: PPUSH
4969: CALL_OW 72
4973: ST_TO_ADDR
// for i in tmp do
4974: LD_ADDR_VAR 0 1
4978: PUSH
4979: LD_VAR 0 2
4983: PUSH
4984: FOR_IN
4985: IFFALSE 5019
// begin ComAgressiveMove ( i , 123 , 60 ) ;
4987: LD_VAR 0 1
4991: PPUSH
4992: LD_INT 123
4994: PPUSH
4995: LD_INT 60
4997: PPUSH
4998: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
5002: LD_VAR 0 1
5006: PPUSH
5007: LD_INT 153
5009: PPUSH
5010: LD_INT 103
5012: PPUSH
5013: CALL_OW 174
// end ;
5017: GO 4984
5019: POP
5020: POP
// repeat wait ( 0 0$1 ) ;
5021: LD_INT 35
5023: PPUSH
5024: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5028: LD_ADDR_VAR 0 2
5032: PUSH
5033: LD_EXP 24
5037: PPUSH
5038: LD_INT 50
5040: PUSH
5041: EMPTY
5042: LIST
5043: PPUSH
5044: CALL_OW 72
5048: ST_TO_ADDR
// for i in tmp do
5049: LD_ADDR_VAR 0 1
5053: PUSH
5054: LD_VAR 0 2
5058: PUSH
5059: FOR_IN
5060: IFFALSE 5110
// if not HasTask ( i ) then
5062: LD_VAR 0 1
5066: PPUSH
5067: CALL_OW 314
5071: NOT
5072: IFFALSE 5108
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) until not tmp ;
5074: LD_VAR 0 1
5078: PPUSH
5079: LD_INT 81
5081: PUSH
5082: LD_INT 3
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: PPUSH
5089: CALL_OW 69
5093: PPUSH
5094: LD_VAR 0 1
5098: PPUSH
5099: CALL_OW 74
5103: PPUSH
5104: CALL_OW 115
5108: GO 5059
5110: POP
5111: POP
5112: LD_VAR 0 2
5116: NOT
5117: IFFALSE 5021
// end ;
5119: PPOPN 2
5121: END
// every 0 0$2 trigger FilterUnitsInArea ( eastKirovArea , [ f_enemy , 6 ] ) do
5122: LD_INT 5
5124: PPUSH
5125: LD_INT 81
5127: PUSH
5128: LD_INT 6
5130: PUSH
5131: EMPTY
5132: LIST
5133: LIST
5134: PPUSH
5135: CALL_OW 70
5139: IFFALSE 5152
5141: GO 5143
5143: DISABLE
// russianAlert := true ;
5144: LD_ADDR_EXP 5
5148: PUSH
5149: LD_INT 1
5151: ST_TO_ADDR
5152: END
// every 0 0$1 trigger IsOk ( Beria ) and GetSide ( Beria ) = 3 and GetResourceType ( GetBase ( Beria ) , mat_cans ) < 100 do
5153: LD_INT 106
5155: PPUSH
5156: CALL_OW 302
5160: PUSH
5161: LD_INT 106
5163: PPUSH
5164: CALL_OW 255
5168: PUSH
5169: LD_INT 3
5171: EQUAL
5172: AND
5173: PUSH
5174: LD_INT 106
5176: PPUSH
5177: CALL_OW 274
5181: PPUSH
5182: LD_INT 1
5184: PPUSH
5185: CALL_OW 275
5189: PUSH
5190: LD_INT 100
5192: LESS
5193: AND
5194: IFFALSE 5218
5196: GO 5198
5198: DISABLE
// begin enable ;
5199: ENABLE
// AddResourceType ( GetBase ( beria ) , mat_cans , 200 ) ;
5200: LD_INT 106
5202: PPUSH
5203: CALL_OW 274
5207: PPUSH
5208: LD_INT 1
5210: PPUSH
5211: LD_INT 200
5213: PPUSH
5214: CALL_OW 276
// end ;
5218: END
// every 0 0$1 do var i , un , tmp ;
5219: GO 5221
5221: DISABLE
5222: LD_INT 0
5224: PPUSH
5225: PPUSH
5226: PPUSH
// begin uc_side := 3 ;
5227: LD_ADDR_OWVAR 20
5231: PUSH
5232: LD_INT 3
5234: ST_TO_ADDR
// uc_nation := 3 ;
5235: LD_ADDR_OWVAR 21
5239: PUSH
5240: LD_INT 3
5242: ST_TO_ADDR
// tmp := [ ] ;
5243: LD_ADDR_VAR 0 3
5247: PUSH
5248: EMPTY
5249: ST_TO_ADDR
// for i := 1 to 2 do
5250: LD_ADDR_VAR 0 1
5254: PUSH
5255: DOUBLE
5256: LD_INT 1
5258: DEC
5259: ST_TO_ADDR
5260: LD_INT 2
5262: PUSH
5263: FOR_TO
5264: IFFALSE 5341
// begin PrepareHuman ( false , 2 , 2 ) ;
5266: LD_INT 0
5268: PPUSH
5269: LD_INT 2
5271: PPUSH
5272: LD_INT 2
5274: PPUSH
5275: CALL_OW 380
// un := CreateHuman ;
5279: LD_ADDR_VAR 0 2
5283: PUSH
5284: CALL_OW 44
5288: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
5289: LD_ADDR_VAR 0 3
5293: PUSH
5294: LD_VAR 0 3
5298: PPUSH
5299: LD_VAR 0 3
5303: PUSH
5304: LD_INT 1
5306: PLUS
5307: PPUSH
5308: LD_VAR 0 2
5312: PPUSH
5313: CALL_OW 1
5317: ST_TO_ADDR
// PlaceUnitXYR ( un , 74 , 112 , 3 , false ) ;
5318: LD_VAR 0 2
5322: PPUSH
5323: LD_INT 74
5325: PPUSH
5326: LD_INT 112
5328: PPUSH
5329: LD_INT 3
5331: PPUSH
5332: LD_INT 0
5334: PPUSH
5335: CALL_OW 50
// end ;
5339: GO 5263
5341: POP
5342: POP
// AddResourceType ( GetBase ( kagan ) , mat_oil , 100 ) ;
5343: LD_INT 112
5345: PPUSH
5346: CALL_OW 274
5350: PPUSH
5351: LD_INT 2
5353: PPUSH
5354: LD_INT 100
5356: PPUSH
5357: CALL_OW 276
// repeat wait ( 0 0$1 ) ;
5361: LD_INT 35
5363: PPUSH
5364: CALL_OW 67
// for i in tmp do
5368: LD_ADDR_VAR 0 1
5372: PUSH
5373: LD_VAR 0 3
5377: PUSH
5378: FOR_IN
5379: IFFALSE 5461
// begin if IsDead ( i ) then
5381: LD_VAR 0 1
5385: PPUSH
5386: CALL_OW 301
5390: IFFALSE 5408
// tmp := tmp diff i ;
5392: LD_ADDR_VAR 0 3
5396: PUSH
5397: LD_VAR 0 3
5401: PUSH
5402: LD_VAR 0 1
5406: DIFF
5407: ST_TO_ADDR
// if not HasTask ( i ) and not Carry ( i ) then
5408: LD_VAR 0 1
5412: PPUSH
5413: CALL_OW 314
5417: NOT
5418: PUSH
5419: LD_VAR 0 1
5423: PPUSH
5424: CALL_OW 281
5428: NOT
5429: AND
5430: IFFALSE 5459
// begin ComTransport ( i , kagan , mat_oil ) ;
5432: LD_VAR 0 1
5436: PPUSH
5437: LD_INT 112
5439: PPUSH
5440: LD_INT 2
5442: PPUSH
5443: CALL_OW 151
// AddComGive ( i , beria ) ;
5447: LD_VAR 0 1
5451: PPUSH
5452: LD_INT 106
5454: PPUSH
5455: CALL_OW 221
// end ; end ;
5459: GO 5378
5461: POP
5462: POP
// until not tmp or IsDead ( kagan ) or IsDead ( beria ) ;
5463: LD_VAR 0 3
5467: NOT
5468: PUSH
5469: LD_INT 112
5471: PPUSH
5472: CALL_OW 301
5476: OR
5477: PUSH
5478: LD_INT 106
5480: PPUSH
5481: CALL_OW 301
5485: OR
5486: IFFALSE 5361
// end ;
5488: PPOPN 3
5490: END
// every 0 0$01 do var i , j , skr , cargo , dep ;
5491: GO 5493
5493: DISABLE
5494: LD_INT 0
5496: PPUSH
5497: PPUSH
5498: PPUSH
5499: PPUSH
5500: PPUSH
// begin enable ;
5501: ENABLE
// cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] , [ f_lives , 600 ] ] ) ;
5502: LD_ADDR_VAR 0 4
5506: PUSH
5507: LD_INT 22
5509: PUSH
5510: LD_INT 3
5512: PUSH
5513: EMPTY
5514: LIST
5515: LIST
5516: PUSH
5517: LD_INT 34
5519: PUSH
5520: LD_INT 51
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: PUSH
5527: LD_INT 24
5529: PUSH
5530: LD_INT 600
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PUSH
5537: EMPTY
5538: LIST
5539: LIST
5540: LIST
5541: PPUSH
5542: CALL_OW 69
5546: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5547: LD_ADDR_VAR 0 5
5551: PUSH
5552: LD_INT 22
5554: PUSH
5555: LD_INT 3
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: PUSH
5562: LD_INT 2
5564: PUSH
5565: LD_INT 30
5567: PUSH
5568: LD_INT 0
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: LD_INT 30
5577: PUSH
5578: LD_INT 1
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: LIST
5589: PUSH
5590: EMPTY
5591: LIST
5592: LIST
5593: PPUSH
5594: CALL_OW 69
5598: ST_TO_ADDR
// skr = GetListOfCratesInArea ( ruCratesCollectArea ) ;
5599: LD_ADDR_VAR 0 3
5603: PUSH
5604: LD_INT 9
5606: PPUSH
5607: CALL_OW 435
5611: ST_TO_ADDR
// if not cargo or not skr or not dep then
5612: LD_VAR 0 4
5616: NOT
5617: PUSH
5618: LD_VAR 0 3
5622: NOT
5623: OR
5624: PUSH
5625: LD_VAR 0 5
5629: NOT
5630: OR
5631: IFFALSE 5635
// exit ;
5633: GO 5799
// for i in cargo do
5635: LD_ADDR_VAR 0 1
5639: PUSH
5640: LD_VAR 0 4
5644: PUSH
5645: FOR_IN
5646: IFFALSE 5797
// begin if not skr then
5648: LD_VAR 0 3
5652: NOT
5653: IFFALSE 5659
// exit ;
5655: POP
5656: POP
5657: GO 5799
// if not HasTask ( i ) then
5659: LD_VAR 0 1
5663: PPUSH
5664: CALL_OW 314
5668: NOT
5669: IFFALSE 5738
// begin ComCollect ( i , skr [ 1 ] , skr [ 2 ] ) ;
5671: LD_VAR 0 1
5675: PPUSH
5676: LD_VAR 0 3
5680: PUSH
5681: LD_INT 1
5683: ARRAY
5684: PPUSH
5685: LD_VAR 0 3
5689: PUSH
5690: LD_INT 2
5692: ARRAY
5693: PPUSH
5694: CALL_OW 117
// for j := 1 to 2 do
5698: LD_ADDR_VAR 0 2
5702: PUSH
5703: DOUBLE
5704: LD_INT 1
5706: DEC
5707: ST_TO_ADDR
5708: LD_INT 2
5710: PUSH
5711: FOR_TO
5712: IFFALSE 5734
// skr := Delete ( skr , 1 ) ;
5714: LD_ADDR_VAR 0 3
5718: PUSH
5719: LD_VAR 0 3
5723: PPUSH
5724: LD_INT 1
5726: PPUSH
5727: CALL_OW 3
5731: ST_TO_ADDR
5732: GO 5711
5734: POP
5735: POP
// end else
5736: GO 5795
// if GetFuel ( i ) < 3 and GetDistUnits ( i , NearestUnitToUnit ( dep , i ) ) < 6 then
5738: LD_VAR 0 1
5742: PPUSH
5743: CALL_OW 261
5747: PUSH
5748: LD_INT 3
5750: LESS
5751: PUSH
5752: LD_VAR 0 1
5756: PPUSH
5757: LD_VAR 0 5
5761: PPUSH
5762: LD_VAR 0 1
5766: PPUSH
5767: CALL_OW 74
5771: PPUSH
5772: CALL_OW 296
5776: PUSH
5777: LD_INT 6
5779: LESS
5780: AND
5781: IFFALSE 5795
// SetFuel ( i , 100 ) ;
5783: LD_VAR 0 1
5787: PPUSH
5788: LD_INT 100
5790: PPUSH
5791: CALL_OW 240
// end ;
5795: GO 5645
5797: POP
5798: POP
// end ;
5799: PPOPN 5
5801: END
// export function SendSupport ; var i , un ; begin
5802: LD_INT 0
5804: PPUSH
5805: PPUSH
5806: PPUSH
// uc_nation := 3 ;
5807: LD_ADDR_OWVAR 21
5811: PUSH
5812: LD_INT 3
5814: ST_TO_ADDR
// uc_side := 3 ;
5815: LD_ADDR_OWVAR 20
5819: PUSH
5820: LD_INT 3
5822: ST_TO_ADDR
// ResetHc ;
5823: CALL 68599 0 0
// for i := 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
5827: LD_ADDR_VAR 0 2
5831: PUSH
5832: DOUBLE
5833: LD_INT 1
5835: DEC
5836: ST_TO_ADDR
5837: LD_INT 3
5839: PUSH
5840: LD_INT 3
5842: PUSH
5843: LD_INT 4
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: LIST
5850: PUSH
5851: LD_OWVAR 67
5855: ARRAY
5856: PUSH
5857: FOR_TO
5858: IFFALSE 5932
// begin PrepareHuman ( false , 1 , Difficulty ) ;
5860: LD_INT 0
5862: PPUSH
5863: LD_INT 1
5865: PPUSH
5866: LD_OWVAR 67
5870: PPUSH
5871: CALL_OW 380
// un := CreateHuman ;
5875: LD_ADDR_VAR 0 3
5879: PUSH
5880: CALL_OW 44
5884: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
5885: LD_VAR 0 3
5889: PPUSH
5890: LD_INT 107
5892: PPUSH
5893: LD_INT 95
5895: PPUSH
5896: LD_INT 4
5898: PPUSH
5899: LD_INT 0
5901: PPUSH
5902: CALL_OW 50
// ComAgressiveMove ( un , 56 , 27 ) ;
5906: LD_VAR 0 3
5910: PPUSH
5911: LD_INT 56
5913: PPUSH
5914: LD_INT 27
5916: PPUSH
5917: CALL_OW 114
// AddComHold ( un ) ;
5921: LD_VAR 0 3
5925: PPUSH
5926: CALL_OW 200
// end ;
5930: GO 5857
5932: POP
5933: POP
// PrepareHuman ( false , 4 , Difficulty ) ;
5934: LD_INT 0
5936: PPUSH
5937: LD_INT 4
5939: PPUSH
5940: LD_OWVAR 67
5944: PPUSH
5945: CALL_OW 380
// un := CreateHuman ;
5949: LD_ADDR_VAR 0 3
5953: PUSH
5954: CALL_OW 44
5958: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
5959: LD_VAR 0 3
5963: PPUSH
5964: LD_INT 107
5966: PPUSH
5967: LD_INT 95
5969: PPUSH
5970: LD_INT 4
5972: PPUSH
5973: LD_INT 0
5975: PPUSH
5976: CALL_OW 50
// ComMoveXY ( un , 59 , 25 ) ;
5980: LD_VAR 0 3
5984: PPUSH
5985: LD_INT 59
5987: PPUSH
5988: LD_INT 25
5990: PPUSH
5991: CALL_OW 111
// if Difficulty > 1 then
5995: LD_OWVAR 67
5999: PUSH
6000: LD_INT 1
6002: GREATER
6003: IFFALSE 6112
// begin for i := 1 to [ 2 , 2 , 3 ] [ Difficulty ] do
6005: LD_ADDR_VAR 0 2
6009: PUSH
6010: DOUBLE
6011: LD_INT 1
6013: DEC
6014: ST_TO_ADDR
6015: LD_INT 2
6017: PUSH
6018: LD_INT 2
6020: PUSH
6021: LD_INT 3
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: LIST
6028: PUSH
6029: LD_OWVAR 67
6033: ARRAY
6034: PUSH
6035: FOR_TO
6036: IFFALSE 6110
// begin PrepareHuman ( false , 1 , Difficulty ) ;
6038: LD_INT 0
6040: PPUSH
6041: LD_INT 1
6043: PPUSH
6044: LD_OWVAR 67
6048: PPUSH
6049: CALL_OW 380
// un := CreateHuman ;
6053: LD_ADDR_VAR 0 3
6057: PUSH
6058: CALL_OW 44
6062: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
6063: LD_VAR 0 3
6067: PPUSH
6068: LD_INT 107
6070: PPUSH
6071: LD_INT 95
6073: PPUSH
6074: LD_INT 4
6076: PPUSH
6077: LD_INT 0
6079: PPUSH
6080: CALL_OW 50
// ComAgressiveMove ( un , 45 , 76 ) ;
6084: LD_VAR 0 3
6088: PPUSH
6089: LD_INT 45
6091: PPUSH
6092: LD_INT 76
6094: PPUSH
6095: CALL_OW 114
// AddComHold ( un ) ;
6099: LD_VAR 0 3
6103: PPUSH
6104: CALL_OW 200
// end ;
6108: GO 6035
6110: POP
6111: POP
// end ; end ;
6112: LD_VAR 0 1
6116: RET
// every 6 6$00 trigger tick >= 20 20$00 and Difficulty > 1 and russianOmicronAttackers > 4 and not retreatFromOmicron do var i , un , tmp , path ;
6117: LD_OWVAR 1
6121: PUSH
6122: LD_INT 42000
6124: GREATEREQUAL
6125: PUSH
6126: LD_OWVAR 67
6130: PUSH
6131: LD_INT 1
6133: GREATER
6134: AND
6135: PUSH
6136: LD_EXP 24
6140: PUSH
6141: LD_INT 4
6143: GREATER
6144: AND
6145: PUSH
6146: LD_EXP 8
6150: NOT
6151: AND
6152: IFFALSE 6445
6154: GO 6156
6156: DISABLE
6157: LD_INT 0
6159: PPUSH
6160: PPUSH
6161: PPUSH
6162: PPUSH
// begin enable ;
6163: ENABLE
// tmp := [ ] ;
6164: LD_ADDR_VAR 0 3
6168: PUSH
6169: EMPTY
6170: ST_TO_ADDR
// path := [ [ 55 , 91 ] , [ 47 , 80 ] , [ 39 , 67 ] , [ 36 , 60 ] , [ 33 , 52 ] ] ;
6171: LD_ADDR_VAR 0 4
6175: PUSH
6176: LD_INT 55
6178: PUSH
6179: LD_INT 91
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: LD_INT 47
6188: PUSH
6189: LD_INT 80
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: LD_INT 39
6198: PUSH
6199: LD_INT 67
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: PUSH
6206: LD_INT 36
6208: PUSH
6209: LD_INT 60
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: PUSH
6216: LD_INT 33
6218: PUSH
6219: LD_INT 52
6221: PUSH
6222: EMPTY
6223: LIST
6224: LIST
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty - 1 ] do
6233: LD_ADDR_VAR 0 1
6237: PUSH
6238: DOUBLE
6239: LD_INT 1
6241: DEC
6242: ST_TO_ADDR
6243: LD_INT 2
6245: PUSH
6246: LD_INT 3
6248: PUSH
6249: LD_INT 3
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: LIST
6256: PUSH
6257: LD_OWVAR 67
6261: PUSH
6262: LD_INT 1
6264: MINUS
6265: ARRAY
6266: PUSH
6267: FOR_TO
6268: IFFALSE 6419
// begin uc_side := 3 ;
6270: LD_ADDR_OWVAR 20
6274: PUSH
6275: LD_INT 3
6277: ST_TO_ADDR
// uc_nation := 3 ;
6278: LD_ADDR_OWVAR 21
6282: PUSH
6283: LD_INT 3
6285: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gun ] [ i mod 3 + 1 ] , 100 ) ;
6286: LD_INT 22
6288: PPUSH
6289: LD_INT 1
6291: PPUSH
6292: LD_INT 1
6294: PPUSH
6295: LD_INT 42
6297: PUSH
6298: LD_INT 42
6300: PUSH
6301: LD_INT 44
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: LIST
6308: PUSH
6309: LD_VAR 0 1
6313: PUSH
6314: LD_INT 3
6316: MOD
6317: PUSH
6318: LD_INT 1
6320: PLUS
6321: ARRAY
6322: PPUSH
6323: LD_INT 100
6325: PPUSH
6326: CALL 35690 0 5
// un := CreateVehicle ;
6330: LD_ADDR_VAR 0 2
6334: PUSH
6335: CALL_OW 45
6339: ST_TO_ADDR
// PlaceUnitXYR ( un , 57 , 103 , 4 , false ) ;
6340: LD_VAR 0 2
6344: PPUSH
6345: LD_INT 57
6347: PPUSH
6348: LD_INT 103
6350: PPUSH
6351: LD_INT 4
6353: PPUSH
6354: LD_INT 0
6356: PPUSH
6357: CALL_OW 50
// tmp := Replace ( tmp , tmp + 1 , un ) ;
6361: LD_ADDR_VAR 0 3
6365: PUSH
6366: LD_VAR 0 3
6370: PPUSH
6371: LD_VAR 0 3
6375: PUSH
6376: LD_INT 1
6378: PLUS
6379: PPUSH
6380: LD_VAR 0 2
6384: PPUSH
6385: CALL_OW 1
6389: ST_TO_ADDR
// PrepareHuman ( false , 3 , 5 ) ;
6390: LD_INT 0
6392: PPUSH
6393: LD_INT 3
6395: PPUSH
6396: LD_INT 5
6398: PPUSH
6399: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
6403: CALL_OW 44
6407: PPUSH
6408: LD_VAR 0 2
6412: PPUSH
6413: CALL_OW 52
// end ;
6417: GO 6267
6419: POP
6420: POP
// repeat wait ( 0 0$1 ) ;
6421: LD_INT 35
6423: PPUSH
6424: CALL_OW 67
// until not AgressiveMove ( tmp , path ) ;
6428: LD_VAR 0 3
6432: PPUSH
6433: LD_VAR 0 4
6437: PPUSH
6438: CALL 70680 0 2
6442: NOT
6443: IFFALSE 6421
// end ;
6445: PPOPN 4
6447: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
6448: LD_INT 3
6450: PUSH
6451: LD_INT 22
6453: PUSH
6454: LD_INT 1
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: PUSH
6465: LD_INT 32
6467: PUSH
6468: LD_INT 1
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: PPUSH
6479: CALL_OW 69
6483: IFFALSE 6567
6485: GO 6487
6487: DISABLE
6488: LD_INT 0
6490: PPUSH
// begin enable ;
6491: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
6492: LD_ADDR_VAR 0 1
6496: PUSH
6497: LD_INT 3
6499: PUSH
6500: LD_INT 22
6502: PUSH
6503: LD_INT 1
6505: PUSH
6506: EMPTY
6507: LIST
6508: LIST
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: PUSH
6514: LD_INT 32
6516: PUSH
6517: LD_INT 1
6519: PUSH
6520: EMPTY
6521: LIST
6522: LIST
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: PPUSH
6528: CALL_OW 69
6532: PUSH
6533: FOR_IN
6534: IFFALSE 6565
// if GetFuel ( i ) < 3 then
6536: LD_VAR 0 1
6540: PPUSH
6541: CALL_OW 261
6545: PUSH
6546: LD_INT 3
6548: LESS
6549: IFFALSE 6563
// SetFuel ( i , 3 ) ;
6551: LD_VAR 0 1
6555: PPUSH
6556: LD_INT 3
6558: PPUSH
6559: CALL_OW 240
6563: GO 6533
6565: POP
6566: POP
// end ; end_of_file
6567: PPOPN 1
6569: END
// export function PrepareArabian ; var i , j , un , veh , xy ; begin
6570: LD_INT 0
6572: PPUSH
6573: PPUSH
6574: PPUSH
6575: PPUSH
6576: PPUSH
6577: PPUSH
// uc_side := 2 ;
6578: LD_ADDR_OWVAR 20
6582: PUSH
6583: LD_INT 2
6585: ST_TO_ADDR
// uc_nation := 2 ;
6586: LD_ADDR_OWVAR 21
6590: PUSH
6591: LD_INT 2
6593: ST_TO_ADDR
// InitVc ;
6594: CALL_OW 20
// ResetHc ;
6598: CALL 68599 0 0
// for j := 1 to 2 do
6602: LD_ADDR_VAR 0 3
6606: PUSH
6607: DOUBLE
6608: LD_INT 1
6610: DEC
6611: ST_TO_ADDR
6612: LD_INT 2
6614: PUSH
6615: FOR_TO
6616: IFFALSE 6840
// begin xy := [ [ 178 , 3 ] , [ 268 , 121 ] ] [ j ] ;
6618: LD_ADDR_VAR 0 6
6622: PUSH
6623: LD_INT 178
6625: PUSH
6626: LD_INT 3
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: PUSH
6633: LD_INT 268
6635: PUSH
6636: LD_INT 121
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: PUSH
6647: LD_VAR 0 3
6651: ARRAY
6652: ST_TO_ADDR
// for i := 1 to 8 do
6653: LD_ADDR_VAR 0 2
6657: PUSH
6658: DOUBLE
6659: LD_INT 1
6661: DEC
6662: ST_TO_ADDR
6663: LD_INT 8
6665: PUSH
6666: FOR_TO
6667: IFFALSE 6836
// begin uc_side := 2 ;
6669: LD_ADDR_OWVAR 20
6673: PUSH
6674: LD_INT 2
6676: ST_TO_ADDR
// uc_nation := 2 ;
6677: LD_ADDR_OWVAR 21
6681: PUSH
6682: LD_INT 2
6684: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_flame_thrower , ar_gun ] [ rand ( 1 , 2 ) ] , 99 ) ;
6685: LD_INT 14
6687: PPUSH
6688: LD_INT 1
6690: PPUSH
6691: LD_INT 1
6693: PPUSH
6694: LD_INT 26
6696: PUSH
6697: LD_INT 27
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: PUSH
6704: LD_INT 1
6706: PPUSH
6707: LD_INT 2
6709: PPUSH
6710: CALL_OW 12
6714: ARRAY
6715: PPUSH
6716: LD_INT 99
6718: PPUSH
6719: CALL 35690 0 5
// veh := CreateVehicle ;
6723: LD_ADDR_VAR 0 5
6727: PUSH
6728: CALL_OW 45
6732: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6733: LD_VAR 0 5
6737: PPUSH
6738: LD_INT 3
6740: PPUSH
6741: CALL_OW 233
// PlaceUnitXY ( veh , xy [ 1 ] , xy [ 2 ] , false ) ;
6745: LD_VAR 0 5
6749: PPUSH
6750: LD_VAR 0 6
6754: PUSH
6755: LD_INT 1
6757: ARRAY
6758: PPUSH
6759: LD_VAR 0 6
6763: PUSH
6764: LD_INT 2
6766: ARRAY
6767: PPUSH
6768: LD_INT 0
6770: PPUSH
6771: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
6775: LD_INT 0
6777: PPUSH
6778: LD_INT 3
6780: PPUSH
6781: LD_INT 6
6783: PPUSH
6784: CALL_OW 380
// un := CreateHuman ;
6788: LD_ADDR_VAR 0 4
6792: PUSH
6793: CALL_OW 44
6797: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6798: LD_VAR 0 4
6802: PPUSH
6803: LD_VAR 0 5
6807: PPUSH
6808: CALL_OW 52
// ComMoveXY ( un , 186 , 17 ) ;
6812: LD_VAR 0 4
6816: PPUSH
6817: LD_INT 186
6819: PPUSH
6820: LD_INT 17
6822: PPUSH
6823: CALL_OW 111
// wait ( 0 0$2 ) ;
6827: LD_INT 70
6829: PPUSH
6830: CALL_OW 67
// end ;
6834: GO 6666
6836: POP
6837: POP
// end ;
6838: GO 6615
6840: POP
6841: POP
// for i := 1 to 10 do
6842: LD_ADDR_VAR 0 2
6846: PUSH
6847: DOUBLE
6848: LD_INT 1
6850: DEC
6851: ST_TO_ADDR
6852: LD_INT 10
6854: PUSH
6855: FOR_TO
6856: IFFALSE 6923
// begin PrepareHuman ( false , 1 , 5 ) ;
6858: LD_INT 0
6860: PPUSH
6861: LD_INT 1
6863: PPUSH
6864: LD_INT 5
6866: PPUSH
6867: CALL_OW 380
// un := CreateHuman ;
6871: LD_ADDR_VAR 0 4
6875: PUSH
6876: CALL_OW 44
6880: ST_TO_ADDR
// PlaceUnitXY ( un , 178 , 3 , false ) ;
6881: LD_VAR 0 4
6885: PPUSH
6886: LD_INT 178
6888: PPUSH
6889: LD_INT 3
6891: PPUSH
6892: LD_INT 0
6894: PPUSH
6895: CALL_OW 48
// ComMoveXY ( un , 186 , 17 ) ;
6899: LD_VAR 0 4
6903: PPUSH
6904: LD_INT 186
6906: PPUSH
6907: LD_INT 17
6909: PPUSH
6910: CALL_OW 111
// wait ( 0 0$2 ) ;
6914: LD_INT 70
6916: PPUSH
6917: CALL_OW 67
// end ;
6921: GO 6855
6923: POP
6924: POP
// end ;
6925: LD_VAR 0 1
6929: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] ] ) do var i , enemy ;
6930: LD_INT 22
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: LD_INT 50
6942: PUSH
6943: EMPTY
6944: LIST
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PPUSH
6950: CALL_OW 69
6954: IFFALSE 7090
6956: GO 6958
6958: DISABLE
6959: LD_INT 0
6961: PPUSH
6962: PPUSH
// begin enable ;
6963: ENABLE
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6964: LD_ADDR_VAR 0 2
6968: PUSH
6969: LD_INT 2
6971: PUSH
6972: LD_INT 22
6974: PUSH
6975: LD_INT 3
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: LD_INT 22
6984: PUSH
6985: LD_INT 6
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: LIST
6996: PPUSH
6997: CALL_OW 69
7001: ST_TO_ADDR
// if not enemy then
7002: LD_VAR 0 2
7006: NOT
7007: IFFALSE 7029
// enemy := FilterAllUnits ( [ f_side , 1 ] ) ;
7009: LD_ADDR_VAR 0 2
7013: PUSH
7014: LD_INT 22
7016: PUSH
7017: LD_INT 1
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PPUSH
7024: CALL_OW 69
7028: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] ] ) do
7029: LD_ADDR_VAR 0 1
7033: PUSH
7034: LD_INT 22
7036: PUSH
7037: LD_INT 2
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: LD_INT 50
7046: PUSH
7047: EMPTY
7048: LIST
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PPUSH
7054: CALL_OW 69
7058: PUSH
7059: FOR_IN
7060: IFFALSE 7088
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7062: LD_VAR 0 1
7066: PPUSH
7067: LD_VAR 0 2
7071: PPUSH
7072: LD_VAR 0 1
7076: PPUSH
7077: CALL_OW 74
7081: PPUSH
7082: CALL_OW 115
7086: GO 7059
7088: POP
7089: POP
// end ; end_of_file
7090: PPOPN 2
7092: END
// export function Action ; begin
7093: LD_INT 0
7095: PPUSH
// InGameOn ;
7096: CALL_OW 8
// CenterNowOnXY ( 106 , 3 ) ;
7100: LD_INT 106
7102: PPUSH
7103: LD_INT 3
7105: PPUSH
7106: CALL_OW 86
// wait ( 0 0$2 ) ;
7110: LD_INT 70
7112: PPUSH
7113: CALL_OW 67
// ChangeMissionObjectives ( target1 ) ;
7117: LD_STRING target1
7119: PPUSH
7120: CALL_OW 337
// InGameOff ;
7124: CALL_OW 9
// SaveForQuickRestart ;
7128: CALL_OW 22
// end ;
7132: LD_VAR 0 1
7136: RET
// every 0 0$1 trigger IsDead ( omikron ) and not retreatFromOmicron do
7137: LD_INT 64
7139: PPUSH
7140: CALL_OW 301
7144: PUSH
7145: LD_EXP 8
7149: NOT
7150: AND
7151: IFFALSE 7171
7153: GO 7155
7155: DISABLE
// begin omicronFall := true ;
7156: LD_ADDR_EXP 7
7160: PUSH
7161: LD_INT 1
7163: ST_TO_ADDR
// YouLost ( omi ) ;
7164: LD_STRING omi
7166: PPUSH
7167: CALL_OW 104
// end ;
7171: END
// every 0 0$1 trigger ( See ( 4 , Sikorski ) or See ( 4 , IsInUnit ( Sikorski ) ) ) and IsOk ( omikron ) do var i , tmp , speaker , whereHeWas ;
7172: LD_INT 4
7174: PPUSH
7175: LD_EXP 14
7179: PPUSH
7180: CALL_OW 292
7184: PUSH
7185: LD_INT 4
7187: PPUSH
7188: LD_EXP 14
7192: PPUSH
7193: CALL_OW 310
7197: PPUSH
7198: CALL_OW 292
7202: OR
7203: PUSH
7204: LD_INT 64
7206: PPUSH
7207: CALL_OW 302
7211: AND
7212: IFFALSE 7765
7214: GO 7216
7216: DISABLE
7217: LD_INT 0
7219: PPUSH
7220: PPUSH
7221: PPUSH
7222: PPUSH
// begin InGameOn ;
7223: CALL_OW 8
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
7227: LD_ADDR_VAR 0 2
7231: PUSH
7232: LD_INT 22
7234: PUSH
7235: LD_INT 4
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PPUSH
7242: CALL_OW 69
7246: ST_TO_ADDR
// speaker := UnitFilter ( tmp , [ f_sex , sex_male ] ) [ 1 ] ;
7247: LD_ADDR_VAR 0 3
7251: PUSH
7252: LD_VAR 0 2
7256: PPUSH
7257: LD_INT 26
7259: PUSH
7260: LD_INT 1
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PPUSH
7267: CALL_OW 72
7271: PUSH
7272: LD_INT 1
7274: ARRAY
7275: ST_TO_ADDR
// for i in tmp do
7276: LD_ADDR_VAR 0 1
7280: PUSH
7281: LD_VAR 0 2
7285: PUSH
7286: FOR_IN
7287: IFFALSE 7303
// SetSide ( i , 1 ) ;
7289: LD_VAR 0 1
7293: PPUSH
7294: LD_INT 1
7296: PPUSH
7297: CALL_OW 235
7301: GO 7286
7303: POP
7304: POP
// ComMoveXY ( Sikorski , 37 , 40 ) ;
7305: LD_EXP 14
7309: PPUSH
7310: LD_INT 37
7312: PPUSH
7313: LD_INT 40
7315: PPUSH
7316: CALL_OW 111
// wait ( 0 0$5 ) ;
7320: LD_INT 175
7322: PPUSH
7323: CALL_OW 67
// ComExit ( Sikorski ) ;
7327: LD_EXP 14
7331: PPUSH
7332: CALL 68472 0 1
// AddComMoveXY ( Sikorski , 37 , 40 ) ;
7336: LD_EXP 14
7340: PPUSH
7341: LD_INT 37
7343: PPUSH
7344: LD_INT 40
7346: PPUSH
7347: CALL_OW 171
// CenterOnUnits ( Sikorski ) ;
7351: LD_EXP 14
7355: PPUSH
7356: CALL_OW 85
// wait ( 0 0$2 ) ;
7360: LD_INT 70
7362: PPUSH
7363: CALL_OW 67
// whereHeWas := ComExit ( speaker ) ;
7367: LD_ADDR_VAR 0 4
7371: PUSH
7372: LD_VAR 0 3
7376: PPUSH
7377: CALL 68472 0 1
7381: ST_TO_ADDR
// AddComMoveUnit ( speaker , Sikorski ) ;
7382: LD_VAR 0 3
7386: PPUSH
7387: LD_EXP 14
7391: PPUSH
7392: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
7396: LD_INT 35
7398: PPUSH
7399: CALL_OW 67
// until GetDistUnits ( speaker , Sikorski ) < 5 and not IsInUnit ( Sikorski ) ;
7403: LD_VAR 0 3
7407: PPUSH
7408: LD_EXP 14
7412: PPUSH
7413: CALL_OW 296
7417: PUSH
7418: LD_INT 5
7420: LESS
7421: PUSH
7422: LD_EXP 14
7426: PPUSH
7427: CALL_OW 310
7431: NOT
7432: AND
7433: IFFALSE 7396
// ComTurnUnit ( Sikorski , speaker ) ;
7435: LD_EXP 14
7439: PPUSH
7440: LD_VAR 0 3
7444: PPUSH
7445: CALL_OW 119
// ComTurnUnit ( speaker , Sikorski ) ;
7449: LD_VAR 0 3
7453: PPUSH
7454: LD_EXP 14
7458: PPUSH
7459: CALL_OW 119
// CenterNowOnUnits ( Sikorski ) ;
7463: LD_EXP 14
7467: PPUSH
7468: CALL_OW 87
// Say ( Sikorski , DS-1 ) ;
7472: LD_EXP 14
7476: PPUSH
7477: LD_STRING DS-1
7479: PPUSH
7480: CALL_OW 88
// Say ( speaker , DP-1 ) ;
7484: LD_VAR 0 3
7488: PPUSH
7489: LD_STRING DP-1
7491: PPUSH
7492: CALL_OW 88
// Say ( Sikorski , DS-2 ) ;
7496: LD_EXP 14
7500: PPUSH
7501: LD_STRING DS-2
7503: PPUSH
7504: CALL_OW 88
// Say ( speaker , DP-2 ) ;
7508: LD_VAR 0 3
7512: PPUSH
7513: LD_STRING DP-2
7515: PPUSH
7516: CALL_OW 88
// Say ( Sikorski , DS-3 ) ;
7520: LD_EXP 14
7524: PPUSH
7525: LD_STRING DS-3
7527: PPUSH
7528: CALL_OW 88
// Say ( speaker , DP-3 ) ;
7532: LD_VAR 0 3
7536: PPUSH
7537: LD_STRING DP-3
7539: PPUSH
7540: CALL_OW 88
// Say ( Sikorski , DS-4 ) ;
7544: LD_EXP 14
7548: PPUSH
7549: LD_STRING DS-4
7551: PPUSH
7552: CALL_OW 88
// wait ( 0 0$1 ) ;
7556: LD_INT 35
7558: PPUSH
7559: CALL_OW 67
// if whereHeWas then
7563: LD_VAR 0 4
7567: IFFALSE 7583
// ComEnterUnit ( speaker , whereHeWas ) ;
7569: LD_VAR 0 3
7573: PPUSH
7574: LD_VAR 0 4
7578: PPUSH
7579: CALL_OW 120
// ComHold ( Sikorski ) ;
7583: LD_EXP 14
7587: PPUSH
7588: CALL_OW 140
// wait ( 0 0$1 ) ;
7592: LD_INT 35
7594: PPUSH
7595: CALL_OW 67
// SayRadio ( Harrison , DR-1 ) ;
7599: LD_EXP 15
7603: PPUSH
7604: LD_STRING DR-1
7606: PPUSH
7607: CALL_OW 94
// Say ( Sikorski , DS-5 ) ;
7611: LD_EXP 14
7615: PPUSH
7616: LD_STRING DS-5
7618: PPUSH
7619: CALL_OW 88
// SayRadio ( Harrison , DR-2 ) ;
7623: LD_EXP 15
7627: PPUSH
7628: LD_STRING DR-2
7630: PPUSH
7631: CALL_OW 94
// Say ( Sikorski , DS-6 ) ;
7635: LD_EXP 14
7639: PPUSH
7640: LD_STRING DS-6
7642: PPUSH
7643: CALL_OW 88
// SayRadio ( Harrison , DR-3 ) ;
7647: LD_EXP 15
7651: PPUSH
7652: LD_STRING DR-3
7654: PPUSH
7655: CALL_OW 94
// InGameOff ;
7659: CALL_OW 9
// ChangeMissionObjectives ( target2 ) ;
7663: LD_STRING target2
7665: PPUSH
7666: CALL_OW 337
// sikorskiInOmicron := true ;
7670: LD_ADDR_EXP 9
7674: PUSH
7675: LD_INT 1
7677: ST_TO_ADDR
// wait ( 0 0$2 ) ;
7678: LD_INT 70
7680: PPUSH
7681: CALL_OW 67
// Say ( Sikorski , DS-7 ) ;
7685: LD_EXP 14
7689: PPUSH
7690: LD_STRING DS-7
7692: PPUSH
7693: CALL_OW 88
// wait ( 3 3$00 ) ;
7697: LD_INT 6300
7699: PPUSH
7700: CALL_OW 67
// SayRadio ( Harrison , DRforce-5 ) ;
7704: LD_EXP 15
7708: PPUSH
7709: LD_STRING DRforce-5
7711: PPUSH
7712: CALL_OW 94
// wait ( 4 4$50 ) ;
7716: LD_INT 10150
7718: PPUSH
7719: CALL_OW 67
// FirstReinforcements ;
7723: CALL 7942 0 0
// wait ( rand ( 12 12$00 , 15 15$00 ) ) ;
7727: LD_INT 25200
7729: PPUSH
7730: LD_INT 31500
7732: PPUSH
7733: CALL_OW 12
7737: PPUSH
7738: CALL_OW 67
// SayRadio ( Harrison , DRforce-10 ) ;
7742: LD_EXP 15
7746: PPUSH
7747: LD_STRING DRforce-10
7749: PPUSH
7750: CALL_OW 94
// wait ( 9 9$50 ) ;
7754: LD_INT 20650
7756: PPUSH
7757: CALL_OW 67
// SecondReinforcements ;
7761: CALL 8785 0 0
// end ;
7765: PPOPN 4
7767: END
// every 0 0$1 trigger GetLives ( Sikorski ) < 1000 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
7768: LD_EXP 14
7772: PPUSH
7773: CALL_OW 256
7777: PUSH
7778: LD_INT 1000
7780: LESS
7781: PUSH
7782: LD_INT 22
7784: PUSH
7785: LD_INT 1
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: PUSH
7792: LD_INT 2
7794: PUSH
7795: LD_INT 101
7797: PUSH
7798: LD_INT 3
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PUSH
7805: LD_INT 101
7807: PUSH
7808: LD_INT 6
7810: PUSH
7811: EMPTY
7812: LIST
7813: LIST
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: LIST
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: PPUSH
7824: CALL_OW 69
7828: AND
7829: IFFALSE 7846
7831: GO 7833
7833: DISABLE
// Say ( Sikorski , DRus ) ;
7834: LD_EXP 14
7838: PPUSH
7839: LD_STRING DRus
7841: PPUSH
7842: CALL_OW 88
7846: END
// every 0 0$1 trigger tick >= [ 11 11$00 , 10 10$30 , 9 9$40 ] [ Difficulty ] do
7847: LD_OWVAR 1
7851: PUSH
7852: LD_INT 23100
7854: PUSH
7855: LD_INT 22050
7857: PUSH
7858: LD_INT 20300
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: LIST
7865: PUSH
7866: LD_OWVAR 67
7870: ARRAY
7871: GREATEREQUAL
7872: IFFALSE 7941
7874: GO 7876
7876: DISABLE
// begin SendSupport ;
7877: CALL 5802 0 0
// ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
7881: LD_EXP 24
7885: PPUSH
7886: LD_INT 21
7888: PUSH
7889: LD_INT 2
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: PPUSH
7896: CALL_OW 72
7900: PPUSH
7901: LD_INT 62
7903: PPUSH
7904: LD_INT 22
7906: PPUSH
7907: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
7911: LD_EXP 25
7915: PPUSH
7916: LD_INT 69
7918: PPUSH
7919: LD_INT 27
7921: PPUSH
7922: CALL_OW 111
// wait ( 1 1$00 ) ;
7926: LD_INT 2100
7928: PPUSH
7929: CALL_OW 67
// startAttackOnOmicron := true ;
7933: LD_ADDR_EXP 6
7937: PUSH
7938: LD_INT 1
7940: ST_TO_ADDR
// end ;
7941: END
// export function FirstReinforcements ; var i , un , tmp , spotted , xy ; begin
7942: LD_INT 0
7944: PPUSH
7945: PPUSH
7946: PPUSH
7947: PPUSH
7948: PPUSH
7949: PPUSH
// uc_side := 4 ;
7950: LD_ADDR_OWVAR 20
7954: PUSH
7955: LD_INT 4
7957: ST_TO_ADDR
// uc_nation := 1 ;
7958: LD_ADDR_OWVAR 21
7962: PUSH
7963: LD_INT 1
7965: ST_TO_ADDR
// tmp := [ ] ;
7966: LD_ADDR_VAR 0 4
7970: PUSH
7971: EMPTY
7972: ST_TO_ADDR
// ResetHc ;
7973: CALL 68599 0 0
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7977: LD_INT 2
7979: PPUSH
7980: LD_INT 1
7982: PPUSH
7983: LD_INT 1
7985: PPUSH
7986: LD_INT 4
7988: PPUSH
7989: LD_INT 77
7991: PPUSH
7992: CALL 35690 0 5
// un := CreateVehicle ;
7996: LD_ADDR_VAR 0 3
8000: PUSH
8001: CALL_OW 45
8005: ST_TO_ADDR
// tmp := tmp union un ;
8006: LD_ADDR_VAR 0 4
8010: PUSH
8011: LD_VAR 0 4
8015: PUSH
8016: LD_VAR 0 3
8020: UNION
8021: ST_TO_ADDR
// SetDir ( un , 2 ) ;
8022: LD_VAR 0 3
8026: PPUSH
8027: LD_INT 2
8029: PPUSH
8030: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
8034: LD_VAR 0 3
8038: PPUSH
8039: LD_INT 106
8041: PPUSH
8042: LD_INT 3
8044: PPUSH
8045: LD_INT 0
8047: PPUSH
8048: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
8052: LD_INT 0
8054: PPUSH
8055: LD_INT 3
8057: PPUSH
8058: LD_INT 2
8060: PPUSH
8061: CALL_OW 380
// un := CreateHuman ;
8065: LD_ADDR_VAR 0 3
8069: PUSH
8070: CALL_OW 44
8074: ST_TO_ADDR
// tmp := tmp union un ;
8075: LD_ADDR_VAR 0 4
8079: PUSH
8080: LD_VAR 0 4
8084: PUSH
8085: LD_VAR 0 3
8089: UNION
8090: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
8091: LD_VAR 0 3
8095: PPUSH
8096: LD_VAR 0 4
8100: PUSH
8101: LD_VAR 0 4
8105: PUSH
8106: LD_INT 1
8108: MINUS
8109: ARRAY
8110: PPUSH
8111: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
8115: LD_VAR 0 3
8119: PPUSH
8120: LD_INT 109
8122: PPUSH
8123: LD_INT 9
8125: PPUSH
8126: CALL_OW 111
// wait ( 0 0$1 ) ;
8130: LD_INT 35
8132: PPUSH
8133: CALL_OW 67
// for i := 1 to [ 2 , 2 , 1 ] [ Difficulty ] do
8137: LD_ADDR_VAR 0 2
8141: PUSH
8142: DOUBLE
8143: LD_INT 1
8145: DEC
8146: ST_TO_ADDR
8147: LD_INT 2
8149: PUSH
8150: LD_INT 2
8152: PUSH
8153: LD_INT 1
8155: PUSH
8156: EMPTY
8157: LIST
8158: LIST
8159: LIST
8160: PUSH
8161: LD_OWVAR 67
8165: ARRAY
8166: PUSH
8167: FOR_TO
8168: IFFALSE 8232
// begin PrepareHuman ( false , 1 , 2 ) ;
8170: LD_INT 0
8172: PPUSH
8173: LD_INT 1
8175: PPUSH
8176: LD_INT 2
8178: PPUSH
8179: CALL_OW 380
// un := CreateHuman ;
8183: LD_ADDR_VAR 0 3
8187: PUSH
8188: CALL_OW 44
8192: ST_TO_ADDR
// tmp := tmp union un ;
8193: LD_ADDR_VAR 0 4
8197: PUSH
8198: LD_VAR 0 4
8202: PUSH
8203: LD_VAR 0 3
8207: UNION
8208: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
8209: LD_VAR 0 3
8213: PPUSH
8214: LD_INT 105
8216: PPUSH
8217: LD_INT 2
8219: PPUSH
8220: LD_INT 2
8222: PPUSH
8223: LD_INT 0
8225: PPUSH
8226: CALL_OW 50
// end ;
8230: GO 8167
8232: POP
8233: POP
// PrepareHuman ( false , 4 , 2 ) ;
8234: LD_INT 0
8236: PPUSH
8237: LD_INT 4
8239: PPUSH
8240: LD_INT 2
8242: PPUSH
8243: CALL_OW 380
// un := CreateHuman ;
8247: LD_ADDR_VAR 0 3
8251: PUSH
8252: CALL_OW 44
8256: ST_TO_ADDR
// tmp := tmp union un ;
8257: LD_ADDR_VAR 0 4
8261: PUSH
8262: LD_VAR 0 4
8266: PUSH
8267: LD_VAR 0 3
8271: UNION
8272: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
8273: LD_VAR 0 3
8277: PPUSH
8278: LD_INT 105
8280: PPUSH
8281: LD_INT 2
8283: PPUSH
8284: LD_INT 2
8286: PPUSH
8287: LD_INT 0
8289: PPUSH
8290: CALL_OW 50
// ComAgressiveMove ( tmp , 26 , 35 ) ;
8294: LD_VAR 0 4
8298: PPUSH
8299: LD_INT 26
8301: PPUSH
8302: LD_INT 35
8304: PPUSH
8305: CALL_OW 114
// spotted := false ;
8309: LD_ADDR_VAR 0 5
8313: PUSH
8314: LD_INT 0
8316: ST_TO_ADDR
// xy := [ 0 , 0 ] ;
8317: LD_ADDR_VAR 0 6
8321: PUSH
8322: LD_INT 0
8324: PUSH
8325: LD_INT 0
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8332: LD_INT 35
8334: PPUSH
8335: CALL_OW 67
// if UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) and not spotted then
8339: LD_VAR 0 4
8343: PPUSH
8344: LD_INT 3
8346: PUSH
8347: LD_INT 24
8349: PUSH
8350: LD_INT 1000
8352: PUSH
8353: EMPTY
8354: LIST
8355: LIST
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: PPUSH
8361: CALL_OW 72
8365: PUSH
8366: LD_VAR 0 5
8370: NOT
8371: AND
8372: IFFALSE 8498
// begin spotted := true ;
8374: LD_ADDR_VAR 0 5
8378: PUSH
8379: LD_INT 1
8381: ST_TO_ADDR
// un := UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ;
8382: LD_ADDR_VAR 0 3
8386: PUSH
8387: LD_VAR 0 4
8391: PPUSH
8392: LD_INT 3
8394: PUSH
8395: LD_INT 24
8397: PUSH
8398: LD_INT 1000
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: PPUSH
8409: CALL_OW 72
8413: PUSH
8414: LD_INT 1
8416: ARRAY
8417: ST_TO_ADDR
// xy := [ GetX ( un ) , GetY ( un ) ] ;
8418: LD_ADDR_VAR 0 6
8422: PUSH
8423: LD_VAR 0 3
8427: PPUSH
8428: CALL_OW 250
8432: PUSH
8433: LD_VAR 0 3
8437: PPUSH
8438: CALL_OW 251
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: ST_TO_ADDR
// PlaceSeeing ( xy [ 1 ] , xy [ 2 ] , 1 , - 12 ) ;
8447: LD_VAR 0 6
8451: PUSH
8452: LD_INT 1
8454: ARRAY
8455: PPUSH
8456: LD_VAR 0 6
8460: PUSH
8461: LD_INT 2
8463: ARRAY
8464: PPUSH
8465: LD_INT 1
8467: PPUSH
8468: LD_INT 12
8470: NEG
8471: PPUSH
8472: CALL_OW 330
// CenterOnXY ( xy [ 1 ] , xy [ 2 ] ) ;
8476: LD_VAR 0 6
8480: PUSH
8481: LD_INT 1
8483: ARRAY
8484: PPUSH
8485: LD_VAR 0 6
8489: PUSH
8490: LD_INT 2
8492: ARRAY
8493: PPUSH
8494: CALL_OW 84
// end ; for i in tmp do
8498: LD_ADDR_VAR 0 2
8502: PUSH
8503: LD_VAR 0 4
8507: PUSH
8508: FOR_IN
8509: IFFALSE 8540
// if not HasTask ( i ) then
8511: LD_VAR 0 2
8515: PPUSH
8516: CALL_OW 314
8520: NOT
8521: IFFALSE 8538
// ComAgressiveMove ( i , 26 , 35 ) ;
8523: LD_VAR 0 2
8527: PPUSH
8528: LD_INT 26
8530: PPUSH
8531: LD_INT 35
8533: PPUSH
8534: CALL_OW 114
8538: GO 8508
8540: POP
8541: POP
// if not UnitFilter ( tmp , [ f_ok ] ) then
8542: LD_VAR 0 4
8546: PPUSH
8547: LD_INT 50
8549: PUSH
8550: EMPTY
8551: LIST
8552: PPUSH
8553: CALL_OW 72
8557: NOT
8558: IFFALSE 8593
// begin if spotted then
8560: LD_VAR 0 5
8564: IFFALSE 8591
// RemoveSeeing ( xy [ 1 ] , xy [ 2 ] , 1 ) ;
8566: LD_VAR 0 6
8570: PUSH
8571: LD_INT 1
8573: ARRAY
8574: PPUSH
8575: LD_VAR 0 6
8579: PUSH
8580: LD_INT 2
8582: ARRAY
8583: PPUSH
8584: LD_INT 1
8586: PPUSH
8587: CALL_OW 331
// exit ;
8591: GO 8780
// end ; until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) or See ( 4 , Sikorski ) ;
8593: LD_VAR 0 4
8597: PPUSH
8598: LD_INT 91
8600: PUSH
8601: LD_INT 64
8603: PUSH
8604: LD_INT 12
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: LIST
8611: PPUSH
8612: CALL_OW 72
8616: PUSH
8617: LD_INT 4
8619: PPUSH
8620: LD_EXP 14
8624: PPUSH
8625: CALL_OW 292
8629: OR
8630: IFFALSE 8332
// omicronSquad := omicronSquad union tmp ;
8632: LD_ADDR_EXP 13
8636: PUSH
8637: LD_EXP 13
8641: PUSH
8642: LD_VAR 0 4
8646: UNION
8647: ST_TO_ADDR
// if spotted then
8648: LD_VAR 0 5
8652: IFFALSE 8679
// RemoveSeeing ( xy [ 1 ] , xy [ 2 ] , 1 ) ;
8654: LD_VAR 0 6
8658: PUSH
8659: LD_INT 1
8661: ARRAY
8662: PPUSH
8663: LD_VAR 0 6
8667: PUSH
8668: LD_INT 2
8670: ARRAY
8671: PPUSH
8672: LD_INT 1
8674: PPUSH
8675: CALL_OW 331
// for i in tmp do
8679: LD_ADDR_VAR 0 2
8683: PUSH
8684: LD_VAR 0 4
8688: PUSH
8689: FOR_IN
8690: IFFALSE 8706
// SetSide ( i , 1 ) ;
8692: LD_VAR 0 2
8696: PPUSH
8697: LD_INT 1
8699: PPUSH
8700: CALL_OW 235
8704: GO 8689
8706: POP
8707: POP
// if UnitFilter ( tmp , [ [ f_sex , sex_male ] , [ f_ok ] ] ) then
8708: LD_VAR 0 4
8712: PPUSH
8713: LD_INT 26
8715: PUSH
8716: LD_INT 1
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: PUSH
8723: LD_INT 50
8725: PUSH
8726: EMPTY
8727: LIST
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: PPUSH
8733: CALL_OW 72
8737: IFFALSE 8780
// Say ( UnitFilter ( tmp , [ [ f_sex , sex_male ] , [ f_ok ] ] ) [ 1 ] , Dcargo ) ;
8739: LD_VAR 0 4
8743: PPUSH
8744: LD_INT 26
8746: PUSH
8747: LD_INT 1
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: PUSH
8754: LD_INT 50
8756: PUSH
8757: EMPTY
8758: LIST
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: PPUSH
8764: CALL_OW 72
8768: PUSH
8769: LD_INT 1
8771: ARRAY
8772: PPUSH
8773: LD_STRING Dcargo
8775: PPUSH
8776: CALL_OW 88
// end ;
8780: LD_VAR 0 1
8784: RET
// export function SecondReinforcements ; var un , veh , i ; begin
8785: LD_INT 0
8787: PPUSH
8788: PPUSH
8789: PPUSH
8790: PPUSH
// uc_side := 1 ;
8791: LD_ADDR_OWVAR 20
8795: PUSH
8796: LD_INT 1
8798: ST_TO_ADDR
// uc_nation := 1 ;
8799: LD_ADDR_OWVAR 21
8803: PUSH
8804: LD_INT 1
8806: ST_TO_ADDR
// ResetHc ;
8807: CALL 68599 0 0
// PrepareHuman ( false , 3 , 3 ) ;
8811: LD_INT 0
8813: PPUSH
8814: LD_INT 3
8816: PPUSH
8817: LD_INT 3
8819: PPUSH
8820: CALL_OW 380
// un := CreateHuman ;
8824: LD_ADDR_VAR 0 2
8828: PUSH
8829: CALL_OW 44
8833: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_double_gun , 90 ) ;
8834: LD_INT 3
8836: PPUSH
8837: LD_INT 1
8839: PPUSH
8840: LD_INT 1
8842: PPUSH
8843: LD_INT 5
8845: PPUSH
8846: LD_INT 90
8848: PPUSH
8849: CALL 35690 0 5
// veh := CreateVehicle ;
8853: LD_ADDR_VAR 0 3
8857: PUSH
8858: CALL_OW 45
8862: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8863: LD_VAR 0 3
8867: PPUSH
8868: LD_INT 2
8870: PPUSH
8871: CALL_OW 233
// PlaceUnitXYR ( veh , 83 , 154 , 10 , false ) ;
8875: LD_VAR 0 3
8879: PPUSH
8880: LD_INT 83
8882: PPUSH
8883: LD_INT 154
8885: PPUSH
8886: LD_INT 10
8888: PPUSH
8889: LD_INT 0
8891: PPUSH
8892: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
8896: LD_VAR 0 2
8900: PPUSH
8901: LD_VAR 0 3
8905: PPUSH
8906: CALL_OW 52
// for i := 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
8910: LD_ADDR_VAR 0 4
8914: PUSH
8915: DOUBLE
8916: LD_INT 1
8918: DEC
8919: ST_TO_ADDR
8920: LD_INT 4
8922: PUSH
8923: LD_INT 3
8925: PUSH
8926: LD_INT 3
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: LIST
8933: PUSH
8934: LD_OWVAR 67
8938: ARRAY
8939: PUSH
8940: FOR_TO
8941: IFFALSE 8989
// begin PrepareHuman ( false , 1 , 3 ) ;
8943: LD_INT 0
8945: PPUSH
8946: LD_INT 1
8948: PPUSH
8949: LD_INT 3
8951: PPUSH
8952: CALL_OW 380
// un := CreateHuman ;
8956: LD_ADDR_VAR 0 2
8960: PUSH
8961: CALL_OW 44
8965: ST_TO_ADDR
// PlaceUnitXYR ( un , 83 , 154 , 10 , false ) ;
8966: LD_VAR 0 2
8970: PPUSH
8971: LD_INT 83
8973: PPUSH
8974: LD_INT 154
8976: PPUSH
8977: LD_INT 10
8979: PPUSH
8980: LD_INT 0
8982: PPUSH
8983: CALL_OW 50
// end ;
8987: GO 8940
8989: POP
8990: POP
// PrepareHuman ( sex_male , 1 , 3 ) ;
8991: LD_INT 1
8993: PPUSH
8994: LD_INT 1
8996: PPUSH
8997: LD_INT 3
8999: PPUSH
9000: CALL_OW 380
// un := CreateHuman ;
9004: LD_ADDR_VAR 0 2
9008: PUSH
9009: CALL_OW 44
9013: ST_TO_ADDR
// PlaceUnitXYR ( un , 83 , 154 , 10 , false ) ;
9014: LD_VAR 0 2
9018: PPUSH
9019: LD_INT 83
9021: PPUSH
9022: LD_INT 154
9024: PPUSH
9025: LD_INT 10
9027: PPUSH
9028: LD_INT 0
9030: PPUSH
9031: CALL_OW 50
// SayRadio ( un , Dhelp ) ;
9035: LD_VAR 0 2
9039: PPUSH
9040: LD_STRING Dhelp
9042: PPUSH
9043: CALL_OW 94
// ResetHc ;
9047: CALL 68599 0 0
// end ;
9051: LD_VAR 0 1
9055: RET
// every 0 0$1 trigger russianAlert do var i , tmp , towers ;
9056: LD_EXP 5
9060: IFFALSE 9202
9062: GO 9064
9064: DISABLE
9065: LD_INT 0
9067: PPUSH
9068: PPUSH
9069: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_inside ] ] ) ;
9070: LD_ADDR_VAR 0 2
9074: PUSH
9075: LD_EXP 20
9079: PPUSH
9080: LD_INT 25
9082: PUSH
9083: LD_INT 1
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: PUSH
9090: LD_INT 54
9092: PUSH
9093: EMPTY
9094: LIST
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PPUSH
9100: CALL_OW 72
9104: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
9105: LD_ADDR_VAR 0 3
9109: PUSH
9110: LD_INT 22
9112: PUSH
9113: LD_INT 6
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PUSH
9120: LD_INT 30
9122: PUSH
9123: LD_INT 32
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: PPUSH
9134: CALL_OW 69
9138: ST_TO_ADDR
// for i := 1 to tmp do
9139: LD_ADDR_VAR 0 1
9143: PUSH
9144: DOUBLE
9145: LD_INT 1
9147: DEC
9148: ST_TO_ADDR
9149: LD_VAR 0 2
9153: PUSH
9154: FOR_TO
9155: IFFALSE 9200
// begin ComExitBuilding ( tmp [ i ] ) ;
9157: LD_VAR 0 2
9161: PUSH
9162: LD_VAR 0 1
9166: ARRAY
9167: PPUSH
9168: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , towers [ i ] ) ;
9172: LD_VAR 0 2
9176: PUSH
9177: LD_VAR 0 1
9181: ARRAY
9182: PPUSH
9183: LD_VAR 0 3
9187: PUSH
9188: LD_VAR 0 1
9192: ARRAY
9193: PPUSH
9194: CALL_OW 180
// end ;
9198: GO 9154
9200: POP
9201: POP
// end ;
9202: PPOPN 3
9204: END
// every 0 0$1 trigger russianAlert and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) do var i , noncombat ;
9205: LD_EXP 5
9209: PUSH
9210: LD_INT 22
9212: PUSH
9213: LD_INT 2
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: PUSH
9220: LD_INT 101
9222: PUSH
9223: LD_INT 6
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: PPUSH
9234: CALL_OW 69
9238: AND
9239: IFFALSE 9385
9241: GO 9243
9243: DISABLE
9244: LD_INT 0
9246: PPUSH
9247: PPUSH
// begin SayRadio ( Kurin , D9a-Kur-1 ) ;
9248: LD_EXP 16
9252: PPUSH
9253: LD_STRING D9a-Kur-1
9255: PPUSH
9256: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
9260: LD_EXP 19
9264: PPUSH
9265: LD_STRING D9a-Bur-1
9267: PPUSH
9268: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
9272: LD_EXP 16
9276: PPUSH
9277: LD_STRING D9a-Kur-2
9279: PPUSH
9280: CALL_OW 94
// retreatFromOmicron := true ;
9284: LD_ADDR_EXP 8
9288: PUSH
9289: LD_INT 1
9291: ST_TO_ADDR
// noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
9292: LD_ADDR_VAR 0 2
9296: PUSH
9297: LD_EXP 18
9301: PUSH
9302: LD_EXP 20
9306: PUSH
9307: LD_EXP 21
9311: UNION
9312: PPUSH
9313: LD_INT 3
9315: PUSH
9316: LD_INT 25
9318: PUSH
9319: LD_INT 1
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: PPUSH
9330: CALL_OW 72
9334: UNION
9335: ST_TO_ADDR
// for i in noncombat do
9336: LD_ADDR_VAR 0 1
9340: PUSH
9341: LD_VAR 0 2
9345: PUSH
9346: FOR_IN
9347: IFFALSE 9383
// begin if IsInUnit ( i ) then
9349: LD_VAR 0 1
9353: PPUSH
9354: CALL_OW 310
9358: IFFALSE 9369
// ComExitBuilding ( i ) ;
9360: LD_VAR 0 1
9364: PPUSH
9365: CALL_OW 122
// AddComMoveToArea ( i , westEscapeArea ) ;
9369: LD_VAR 0 1
9373: PPUSH
9374: LD_INT 4
9376: PPUSH
9377: CALL_OW 173
// end ;
9381: GO 9346
9383: POP
9384: POP
// end ;
9385: PPOPN 2
9387: END
// every 0 0$1 trigger tick > rand ( 20 20$00 , 30 30$00 ) do var un ;
9388: LD_OWVAR 1
9392: PUSH
9393: LD_INT 42000
9395: PPUSH
9396: LD_INT 63000
9398: PPUSH
9399: CALL_OW 12
9403: GREATER
9404: IFFALSE 9549
9406: GO 9408
9408: DISABLE
9409: LD_INT 0
9411: PPUSH
// begin uc_side := 4 ;
9412: LD_ADDR_OWVAR 20
9416: PUSH
9417: LD_INT 4
9419: ST_TO_ADDR
// uc_nation := 4 ;
9420: LD_ADDR_OWVAR 21
9424: PUSH
9425: LD_INT 4
9427: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 3 ) ;
9428: LD_INT 1
9430: PPUSH
9431: LD_INT 4
9433: PPUSH
9434: LD_INT 3
9436: PPUSH
9437: CALL_OW 380
// hc_name :=  ;
9441: LD_ADDR_OWVAR 26
9445: PUSH
9446: LD_STRING 
9448: ST_TO_ADDR
// un := CreateHuman ;
9449: LD_ADDR_VAR 0 1
9453: PUSH
9454: CALL_OW 44
9458: ST_TO_ADDR
// PlaceUnitXYR ( un , 161 , 162 , 3 , true ) ;
9459: LD_VAR 0 1
9463: PPUSH
9464: LD_INT 161
9466: PPUSH
9467: LD_INT 162
9469: PPUSH
9470: LD_INT 3
9472: PPUSH
9473: LD_INT 1
9475: PPUSH
9476: CALL_OW 50
// ResetHc ;
9480: CALL 68599 0 0
// wait ( 0 0$3 ) ;
9484: LD_INT 105
9486: PPUSH
9487: CALL_OW 67
// SayRadio ( un , Dun1 ) ;
9491: LD_VAR 0 1
9495: PPUSH
9496: LD_STRING Dun1
9498: PPUSH
9499: CALL_OW 94
// repeat wait ( 0 0$1 ) ;
9503: LD_INT 35
9505: PPUSH
9506: CALL_OW 67
// if IsDead ( un ) then
9510: LD_VAR 0 1
9514: PPUSH
9515: CALL_OW 301
9519: IFFALSE 9523
// exit ;
9521: GO 9549
// until See ( 1 , un ) ;
9523: LD_INT 1
9525: PPUSH
9526: LD_VAR 0 1
9530: PPUSH
9531: CALL_OW 292
9535: IFFALSE 9503
// SetSide ( un , 1 ) ;
9537: LD_VAR 0 1
9541: PPUSH
9542: LD_INT 1
9544: PPUSH
9545: CALL_OW 235
// end ;
9549: PPOPN 1
9551: END
// every 0 0$1 trigger tanksCounter >= 20 do
9552: LD_EXP 12
9556: PUSH
9557: LD_INT 20
9559: GREATEREQUAL
9560: IFFALSE 9572
9562: GO 9564
9564: DISABLE
// SetAchievement ( ACH_PANZERKNACKER ) ;
9565: LD_STRING ACH_PANZERKNACKER
9567: PPUSH
9568: CALL_OW 543
9572: END
// every 0 0$1 trigger tick > rand ( 45 45$00 , 52 52$00 ) do var un ;
9573: LD_OWVAR 1
9577: PUSH
9578: LD_INT 94500
9580: PPUSH
9581: LD_INT 109200
9583: PPUSH
9584: CALL_OW 12
9588: GREATER
9589: IFFALSE 9852
9591: GO 9593
9593: DISABLE
9594: LD_INT 0
9596: PPUSH
// begin PrepareArabian ;
9597: CALL 6570 0 0
// uc_side := 4 ;
9601: LD_ADDR_OWVAR 20
9605: PUSH
9606: LD_INT 4
9608: ST_TO_ADDR
// uc_nation := 1 ;
9609: LD_ADDR_OWVAR 21
9613: PUSH
9614: LD_INT 1
9616: ST_TO_ADDR
// ResetHc ;
9617: CALL 68599 0 0
// un := CreateHuman ;
9621: LD_ADDR_VAR 0 1
9625: PUSH
9626: CALL_OW 44
9630: ST_TO_ADDR
// SayRadio ( un , ar_come ) ;
9631: LD_VAR 0 1
9635: PPUSH
9636: LD_STRING ar_come
9638: PPUSH
9639: CALL_OW 94
// wait ( 0 0$20 ) ;
9643: LD_INT 700
9645: PPUSH
9646: CALL_OW 67
// SayRadio ( Harrison , DR-Back ) ;
9650: LD_EXP 15
9654: PPUSH
9655: LD_STRING DR-Back
9657: PPUSH
9658: CALL_OW 94
// ChangeMissionObjectives ( target3 ) ;
9662: LD_STRING target3
9664: PPUSH
9665: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
9669: LD_INT 10
9671: PPUSH
9672: LD_INT 1
9674: PPUSH
9675: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
9679: LD_INT 35
9681: PPUSH
9682: CALL_OW 67
// until IsInArea ( Sikorski , escapeArea ) or FilterUnitsInArea ( escapeArea , [ f_side , 1 ] ) ;
9686: LD_EXP 14
9690: PPUSH
9691: LD_INT 10
9693: PPUSH
9694: CALL_OW 308
9698: PUSH
9699: LD_INT 10
9701: PPUSH
9702: LD_INT 22
9704: PUSH
9705: LD_INT 1
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PPUSH
9712: CALL_OW 70
9716: OR
9717: IFFALSE 9679
// SayRadio ( Harrison , you_win ) ;
9719: LD_EXP 15
9723: PPUSH
9724: LD_STRING you_win
9726: PPUSH
9727: CALL_OW 94
// AddMedal ( med , 1 ) ;
9731: LD_STRING med
9733: PPUSH
9734: LD_INT 1
9736: PPUSH
9737: CALL_OW 101
// if ruLoseCounter > [ 27 , 32 , 36 ] [ Difficulty ] then
9741: LD_EXP 11
9745: PUSH
9746: LD_INT 27
9748: PUSH
9749: LD_INT 32
9751: PUSH
9752: LD_INT 36
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: LIST
9759: PUSH
9760: LD_OWVAR 67
9764: ARRAY
9765: GREATER
9766: IFFALSE 9780
// AddMedal ( ru , 1 ) else
9768: LD_STRING ru
9770: PPUSH
9771: LD_INT 1
9773: PPUSH
9774: CALL_OW 101
9778: GO 9791
// AddMedal ( ru , - 1 ) ;
9780: LD_STRING ru
9782: PPUSH
9783: LD_INT 1
9785: NEG
9786: PPUSH
9787: CALL_OW 101
// if usLoseCounter < [ 4 , 3 , 2 ] [ Difficulty ] then
9791: LD_EXP 10
9795: PUSH
9796: LD_INT 4
9798: PUSH
9799: LD_INT 3
9801: PUSH
9802: LD_INT 2
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: LIST
9809: PUSH
9810: LD_OWVAR 67
9814: ARRAY
9815: LESS
9816: IFFALSE 9830
// AddMedal ( pep , 1 ) else
9818: LD_STRING pep
9820: PPUSH
9821: LD_INT 1
9823: PPUSH
9824: CALL_OW 101
9828: GO 9841
// AddMedal ( pep , - 1 ) ;
9830: LD_STRING pep
9832: PPUSH
9833: LD_INT 1
9835: NEG
9836: PPUSH
9837: CALL_OW 101
// GiveMedals ( MAIN ) ;
9841: LD_STRING MAIN
9843: PPUSH
9844: CALL_OW 102
// YouWin ;
9848: CALL_OW 103
// end ; end_of_file
9852: PPOPN 1
9854: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
9855: LD_VAR 0 1
9859: PPUSH
9860: CALL 10711 0 1
// if un = Sikorski then
9864: LD_VAR 0 1
9868: PUSH
9869: LD_EXP 14
9873: EQUAL
9874: IFFALSE 9883
// YouLost ( sik ) ;
9876: LD_STRING sik
9878: PPUSH
9879: CALL_OW 104
// if un in russianOmicronAttackers then
9883: LD_VAR 0 1
9887: PUSH
9888: LD_EXP 24
9892: IN
9893: IFFALSE 9911
// russianOmicronAttackers := russianOmicronAttackers diff un ;
9895: LD_ADDR_EXP 24
9899: PUSH
9900: LD_EXP 24
9904: PUSH
9905: LD_VAR 0 1
9909: DIFF
9910: ST_TO_ADDR
// if un in russianCargo then
9911: LD_VAR 0 1
9915: PUSH
9916: LD_EXP 25
9920: IN
9921: IFFALSE 9939
// russianCargo := russianCargo diff un ;
9923: LD_ADDR_EXP 25
9927: PUSH
9928: LD_EXP 25
9932: PUSH
9933: LD_VAR 0 1
9937: DIFF
9938: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) then
9939: LD_VAR 0 1
9943: PUSH
9944: LD_INT 22
9946: PUSH
9947: LD_INT 3
9949: PUSH
9950: EMPTY
9951: LIST
9952: LIST
9953: PUSH
9954: LD_INT 34
9956: PUSH
9957: LD_INT 51
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: PPUSH
9968: CALL_OW 69
9972: IN
9973: IFFALSE 9982
// ProduceNew ( 1 ) ;
9975: LD_INT 1
9977: PPUSH
9978: CALL 4695 0 1
// if GetSide ( un ) in [ 1 , 4 ] and GetType ( un ) = unit_human and GetNation ( un ) = nation_american then
9982: LD_VAR 0 1
9986: PPUSH
9987: CALL_OW 255
9991: PUSH
9992: LD_INT 1
9994: PUSH
9995: LD_INT 4
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: IN
10002: PUSH
10003: LD_VAR 0 1
10007: PPUSH
10008: CALL_OW 247
10012: PUSH
10013: LD_INT 1
10015: EQUAL
10016: AND
10017: PUSH
10018: LD_VAR 0 1
10022: PPUSH
10023: CALL_OW 248
10027: PUSH
10028: LD_INT 1
10030: EQUAL
10031: AND
10032: IFFALSE 10048
// usLoseCounter := usLoseCounter + 1 ;
10034: LD_ADDR_EXP 10
10038: PUSH
10039: LD_EXP 10
10043: PUSH
10044: LD_INT 1
10046: PLUS
10047: ST_TO_ADDR
// end ;
10048: PPOPN 1
10050: END
// on VehicleConstructed ( veh , factory ) do begin SOS_VehicleConstructed ( veh , factory ) ;
10051: LD_VAR 0 1
10055: PPUSH
10056: LD_VAR 0 2
10060: PPUSH
10061: CALL 10833 0 2
// if GetSide ( factory ) <> 3 then
10065: LD_VAR 0 2
10069: PPUSH
10070: CALL_OW 255
10074: PUSH
10075: LD_INT 3
10077: NONEQUAL
10078: IFFALSE 10082
// exit ;
10080: GO 10144
// if GetWeapon ( veh ) = ru_cargo_bay then
10082: LD_VAR 0 1
10086: PPUSH
10087: CALL_OW 264
10091: PUSH
10092: LD_INT 51
10094: EQUAL
10095: IFFALSE 10099
// exit ;
10097: GO 10144
// russianOmicronAttackers := russianOmicronAttackers union [ veh , IsInUnit ( veh ) ] ;
10099: LD_ADDR_EXP 24
10103: PUSH
10104: LD_EXP 24
10108: PUSH
10109: LD_VAR 0 1
10113: PUSH
10114: LD_VAR 0 1
10118: PPUSH
10119: CALL_OW 310
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: UNION
10128: ST_TO_ADDR
// AddComAgressiveMove ( veh , 71 , 37 ) ;
10129: LD_VAR 0 1
10133: PPUSH
10134: LD_INT 71
10136: PPUSH
10137: LD_INT 37
10139: PPUSH
10140: CALL_OW 174
// end ;
10144: PPOPN 2
10146: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId in russianOmicronAttackers then
10147: LD_VAR 0 2
10151: PUSH
10152: LD_EXP 24
10156: IN
10157: IFFALSE 10175
// russianOmicronAttackers := russianOmicronAttackers diff oldId ;
10159: LD_ADDR_EXP 24
10163: PUSH
10164: LD_EXP 24
10168: PUSH
10169: LD_VAR 0 2
10173: DIFF
10174: ST_TO_ADDR
// if oldId in russianCargo then
10175: LD_VAR 0 2
10179: PUSH
10180: LD_EXP 25
10184: IN
10185: IFFALSE 10203
// russianCargo := russianCargo diff oldId ;
10187: LD_ADDR_EXP 25
10191: PUSH
10192: LD_EXP 25
10196: PUSH
10197: LD_VAR 0 2
10201: DIFF
10202: ST_TO_ADDR
// if newId in russianOmicronAttackers then
10203: LD_VAR 0 1
10207: PUSH
10208: LD_EXP 24
10212: IN
10213: IFFALSE 10231
// russianOmicronAttackers := russianOmicronAttackers diff newId ;
10215: LD_ADDR_EXP 24
10219: PUSH
10220: LD_EXP 24
10224: PUSH
10225: LD_VAR 0 1
10229: DIFF
10230: ST_TO_ADDR
// if newId in russianCargo then
10231: LD_VAR 0 1
10235: PUSH
10236: LD_EXP 25
10240: IN
10241: IFFALSE 10259
// russianCargo := russianCargo diff newId ;
10243: LD_ADDR_EXP 25
10247: PUSH
10248: LD_EXP 25
10252: PUSH
10253: LD_VAR 0 1
10257: DIFF
10258: ST_TO_ADDR
// end ;
10259: PPOPN 4
10261: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
10262: LD_VAR 0 1
10266: PPUSH
10267: LD_VAR 0 2
10271: PPUSH
10272: LD_VAR 0 3
10276: PPUSH
10277: CALL 10809 0 3
// if killerSide in [ 1 , 4 ] and GetSide ( un ) in [ 3 , 6 ] then
10281: LD_VAR 0 2
10285: PUSH
10286: LD_INT 1
10288: PUSH
10289: LD_INT 4
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: IN
10296: PUSH
10297: LD_VAR 0 1
10301: PPUSH
10302: CALL_OW 255
10306: PUSH
10307: LD_INT 3
10309: PUSH
10310: LD_INT 6
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: IN
10317: AND
10318: IFFALSE 10334
// ruLoseCounter := ruLoseCounter + 1 ;
10320: LD_ADDR_EXP 11
10324: PUSH
10325: LD_EXP 11
10329: PUSH
10330: LD_INT 1
10332: PLUS
10333: ST_TO_ADDR
// if killerSide in [ 1 , 4 ] and GetType ( un ) = unit_vehicle and GetSide ( un ) in [ 3 , 6 ] then
10334: LD_VAR 0 2
10338: PUSH
10339: LD_INT 1
10341: PUSH
10342: LD_INT 4
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: IN
10349: PUSH
10350: LD_VAR 0 1
10354: PPUSH
10355: CALL_OW 247
10359: PUSH
10360: LD_INT 2
10362: EQUAL
10363: AND
10364: PUSH
10365: LD_VAR 0 1
10369: PPUSH
10370: CALL_OW 255
10374: PUSH
10375: LD_INT 3
10377: PUSH
10378: LD_INT 6
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: IN
10385: AND
10386: IFFALSE 10402
// tanksCounter := tanksCounter + 1 ;
10388: LD_ADDR_EXP 12
10392: PUSH
10393: LD_EXP 12
10397: PUSH
10398: LD_INT 1
10400: PLUS
10401: ST_TO_ADDR
// end ;
10402: PPOPN 3
10404: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) in [ 3 , 6 ] then
10405: LD_VAR 0 1
10409: PPUSH
10410: CALL_OW 255
10414: PUSH
10415: LD_INT 3
10417: PUSH
10418: LD_INT 6
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: IN
10425: IFFALSE 10574
// begin ComRepairVehicle ( driver , veh ) ;
10427: LD_VAR 0 1
10431: PPUSH
10432: LD_VAR 0 2
10436: PPUSH
10437: CALL_OW 129
// repeat wait ( 0 0$1 ) ;
10441: LD_INT 35
10443: PPUSH
10444: CALL_OW 67
// until IsDead ( veh ) or IsDead ( driver ) or GetLives ( veh ) > 250 ;
10448: LD_VAR 0 2
10452: PPUSH
10453: CALL_OW 301
10457: PUSH
10458: LD_VAR 0 1
10462: PPUSH
10463: CALL_OW 301
10467: OR
10468: PUSH
10469: LD_VAR 0 2
10473: PPUSH
10474: CALL_OW 256
10478: PUSH
10479: LD_INT 250
10481: GREATER
10482: OR
10483: IFFALSE 10441
// if GetLives ( veh ) > 250 then
10485: LD_VAR 0 2
10489: PPUSH
10490: CALL_OW 256
10494: PUSH
10495: LD_INT 250
10497: GREATER
10498: IFFALSE 10574
// begin ComEnterUnit ( driver , veh ) ;
10500: LD_VAR 0 1
10504: PPUSH
10505: LD_VAR 0 2
10509: PPUSH
10510: CALL_OW 120
// AddComMoveXY ( driver , 71 , 29 ) ;
10514: LD_VAR 0 1
10518: PPUSH
10519: LD_INT 71
10521: PPUSH
10522: LD_INT 29
10524: PPUSH
10525: CALL_OW 171
// SetTag ( veh , 1 ) ;
10529: LD_VAR 0 2
10533: PPUSH
10534: LD_INT 1
10536: PPUSH
10537: CALL_OW 109
// if not veh in russianOmicronAttackers then
10541: LD_VAR 0 2
10545: PUSH
10546: LD_EXP 24
10550: IN
10551: NOT
10552: IFFALSE 10574
// russianOmicronAttackers := Join ( russianOmicronAttackers , veh ) ;
10554: LD_ADDR_EXP 24
10558: PUSH
10559: LD_EXP 24
10563: PPUSH
10564: LD_VAR 0 2
10568: PPUSH
10569: CALL 68074 0 2
10573: ST_TO_ADDR
// end ; end ; end ;
10574: PPOPN 4
10576: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10577: LD_VAR 0 1
10581: PPUSH
10582: CALL 10817 0 1
// end ; end_of_file
10586: PPOPN 1
10588: END
// every 1 1$35 trigger sikorskiInOmicron and GetResourceArea ( cratesSpawnArea , mat_cans ) < [ 18 , 15 , 12 ] [ Difficulty ] do
10589: LD_EXP 9
10593: PUSH
10594: LD_INT 6
10596: PPUSH
10597: LD_INT 1
10599: PPUSH
10600: CALL_OW 287
10604: PUSH
10605: LD_INT 18
10607: PUSH
10608: LD_INT 15
10610: PUSH
10611: LD_INT 12
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: LIST
10618: PUSH
10619: LD_OWVAR 67
10623: ARRAY
10624: LESS
10625: AND
10626: IFFALSE 10668
10628: GO 10630
10630: DISABLE
// begin enable ;
10631: ENABLE
// wait ( rand ( 0 0$10 , 0 0$30 ) ) ;
10632: LD_INT 350
10634: PPUSH
10635: LD_INT 1050
10637: PPUSH
10638: CALL_OW 12
10642: PPUSH
10643: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , cratesSpawnArea , true ) ;
10647: LD_INT 2
10649: PPUSH
10650: LD_INT 5
10652: PPUSH
10653: CALL_OW 12
10657: PPUSH
10658: LD_INT 6
10660: PPUSH
10661: LD_INT 1
10663: PPUSH
10664: CALL_OW 55
// end ;
10668: END
// every 1 1$25 trigger GetResourceArea ( ruCratesSpawnArea , mat_cans ) < 5 do
10669: LD_INT 7
10671: PPUSH
10672: LD_INT 1
10674: PPUSH
10675: CALL_OW 287
10679: PUSH
10680: LD_INT 5
10682: LESS
10683: IFFALSE 10710
10685: GO 10687
10687: DISABLE
// begin enable ;
10688: ENABLE
// CreateCratesArea ( rand ( 2 , 5 ) , ruCratesSpawnArea , true ) ;
10689: LD_INT 2
10691: PPUSH
10692: LD_INT 5
10694: PPUSH
10695: CALL_OW 12
10699: PPUSH
10700: LD_INT 7
10702: PPUSH
10703: LD_INT 1
10705: PPUSH
10706: CALL_OW 55
// end ; end_of_file end_of_file
10710: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
10711: LD_INT 0
10713: PPUSH
10714: PPUSH
10715: PPUSH
10716: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
10717: LD_VAR 0 1
10721: PPUSH
10722: CALL_OW 264
10726: PUSH
10727: LD_EXP 101
10731: EQUAL
10732: IFFALSE 10804
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10734: LD_INT 68
10736: PPUSH
10737: LD_VAR 0 1
10741: PPUSH
10742: CALL_OW 255
10746: PPUSH
10747: CALL_OW 321
10751: PUSH
10752: LD_INT 2
10754: EQUAL
10755: IFFALSE 10767
// eff := 70 else
10757: LD_ADDR_VAR 0 4
10761: PUSH
10762: LD_INT 70
10764: ST_TO_ADDR
10765: GO 10775
// eff := 30 ;
10767: LD_ADDR_VAR 0 4
10771: PUSH
10772: LD_INT 30
10774: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
10775: LD_VAR 0 1
10779: PPUSH
10780: CALL_OW 250
10784: PPUSH
10785: LD_VAR 0 1
10789: PPUSH
10790: CALL_OW 251
10794: PPUSH
10795: LD_VAR 0 4
10799: PPUSH
10800: CALL_OW 495
// end ; end ;
10804: LD_VAR 0 2
10808: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
10809: LD_INT 0
10811: PPUSH
// end ;
10812: LD_VAR 0 4
10816: RET
// export function SOS_Command ( cmd ) ; begin
10817: LD_INT 0
10819: PPUSH
// end ;
10820: LD_VAR 0 2
10824: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
10825: LD_INT 0
10827: PPUSH
// end ;
10828: LD_VAR 0 6
10832: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
10833: LD_INT 0
10835: PPUSH
10836: PPUSH
// if not vehicle or not factory then
10837: LD_VAR 0 1
10841: NOT
10842: PUSH
10843: LD_VAR 0 2
10847: NOT
10848: OR
10849: IFFALSE 10853
// exit ;
10851: GO 11084
// if factoryWaypoints >= factory then
10853: LD_EXP 94
10857: PUSH
10858: LD_VAR 0 2
10862: GREATEREQUAL
10863: IFFALSE 11084
// if factoryWaypoints [ factory ] then
10865: LD_EXP 94
10869: PUSH
10870: LD_VAR 0 2
10874: ARRAY
10875: IFFALSE 11084
// begin if GetControl ( vehicle ) = control_manual then
10877: LD_VAR 0 1
10881: PPUSH
10882: CALL_OW 263
10886: PUSH
10887: LD_INT 1
10889: EQUAL
10890: IFFALSE 10971
// begin driver := IsDrivenBy ( vehicle ) ;
10892: LD_ADDR_VAR 0 4
10896: PUSH
10897: LD_VAR 0 1
10901: PPUSH
10902: CALL_OW 311
10906: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
10907: LD_VAR 0 4
10911: PPUSH
10912: LD_EXP 94
10916: PUSH
10917: LD_VAR 0 2
10921: ARRAY
10922: PUSH
10923: LD_INT 3
10925: ARRAY
10926: PPUSH
10927: LD_EXP 94
10931: PUSH
10932: LD_VAR 0 2
10936: ARRAY
10937: PUSH
10938: LD_INT 4
10940: ARRAY
10941: PPUSH
10942: CALL_OW 171
// AddComExitVehicle ( driver ) ;
10946: LD_VAR 0 4
10950: PPUSH
10951: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
10955: LD_VAR 0 4
10959: PPUSH
10960: LD_VAR 0 2
10964: PPUSH
10965: CALL_OW 180
// end else
10969: GO 11084
// if GetControl ( vehicle ) = control_remote then
10971: LD_VAR 0 1
10975: PPUSH
10976: CALL_OW 263
10980: PUSH
10981: LD_INT 2
10983: EQUAL
10984: IFFALSE 11045
// begin wait ( 0 0$2 ) ;
10986: LD_INT 70
10988: PPUSH
10989: CALL_OW 67
// if Connect ( vehicle ) then
10993: LD_VAR 0 1
10997: PPUSH
10998: CALL 38783 0 1
11002: IFFALSE 11043
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
11004: LD_VAR 0 1
11008: PPUSH
11009: LD_EXP 94
11013: PUSH
11014: LD_VAR 0 2
11018: ARRAY
11019: PUSH
11020: LD_INT 3
11022: ARRAY
11023: PPUSH
11024: LD_EXP 94
11028: PUSH
11029: LD_VAR 0 2
11033: ARRAY
11034: PUSH
11035: LD_INT 4
11037: ARRAY
11038: PPUSH
11039: CALL_OW 171
// end else
11043: GO 11084
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
11045: LD_VAR 0 1
11049: PPUSH
11050: LD_EXP 94
11054: PUSH
11055: LD_VAR 0 2
11059: ARRAY
11060: PUSH
11061: LD_INT 3
11063: ARRAY
11064: PPUSH
11065: LD_EXP 94
11069: PUSH
11070: LD_VAR 0 2
11074: ARRAY
11075: PUSH
11076: LD_INT 4
11078: ARRAY
11079: PPUSH
11080: CALL_OW 171
// end ; end ;
11084: LD_VAR 0 3
11088: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
11089: LD_INT 0
11091: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
11092: LD_VAR 0 1
11096: PUSH
11097: LD_INT 250
11099: EQUAL
11100: PUSH
11101: LD_VAR 0 2
11105: PPUSH
11106: CALL_OW 264
11110: PUSH
11111: LD_EXP 104
11115: EQUAL
11116: AND
11117: IFFALSE 11138
// MinerPlaceMine ( unit , x , y ) ;
11119: LD_VAR 0 2
11123: PPUSH
11124: LD_VAR 0 4
11128: PPUSH
11129: LD_VAR 0 5
11133: PPUSH
11134: CALL 13537 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
11138: LD_VAR 0 1
11142: PUSH
11143: LD_INT 251
11145: EQUAL
11146: PUSH
11147: LD_VAR 0 2
11151: PPUSH
11152: CALL_OW 264
11156: PUSH
11157: LD_EXP 104
11161: EQUAL
11162: AND
11163: IFFALSE 11184
// MinerDetonateMine ( unit , x , y ) ;
11165: LD_VAR 0 2
11169: PPUSH
11170: LD_VAR 0 4
11174: PPUSH
11175: LD_VAR 0 5
11179: PPUSH
11180: CALL 13814 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
11184: LD_VAR 0 1
11188: PUSH
11189: LD_INT 252
11191: EQUAL
11192: PUSH
11193: LD_VAR 0 2
11197: PPUSH
11198: CALL_OW 264
11202: PUSH
11203: LD_EXP 104
11207: EQUAL
11208: AND
11209: IFFALSE 11230
// MinerCreateMinefield ( unit , x , y ) ;
11211: LD_VAR 0 2
11215: PPUSH
11216: LD_VAR 0 4
11220: PPUSH
11221: LD_VAR 0 5
11225: PPUSH
11226: CALL 14231 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
11230: LD_VAR 0 1
11234: PUSH
11235: LD_INT 253
11237: EQUAL
11238: PUSH
11239: LD_VAR 0 2
11243: PPUSH
11244: CALL_OW 257
11248: PUSH
11249: LD_INT 5
11251: EQUAL
11252: AND
11253: IFFALSE 11274
// ComBinocular ( unit , x , y ) ;
11255: LD_VAR 0 2
11259: PPUSH
11260: LD_VAR 0 4
11264: PPUSH
11265: LD_VAR 0 5
11269: PPUSH
11270: CALL 14602 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
11274: LD_VAR 0 1
11278: PUSH
11279: LD_INT 254
11281: EQUAL
11282: PUSH
11283: LD_VAR 0 2
11287: PPUSH
11288: CALL_OW 264
11292: PUSH
11293: LD_EXP 99
11297: EQUAL
11298: AND
11299: PUSH
11300: LD_VAR 0 3
11304: PPUSH
11305: CALL_OW 263
11309: PUSH
11310: LD_INT 3
11312: EQUAL
11313: AND
11314: IFFALSE 11330
// HackDestroyVehicle ( unit , selectedUnit ) ;
11316: LD_VAR 0 2
11320: PPUSH
11321: LD_VAR 0 3
11325: PPUSH
11326: CALL 12897 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
11330: LD_VAR 0 1
11334: PUSH
11335: LD_INT 255
11337: EQUAL
11338: PUSH
11339: LD_VAR 0 2
11343: PPUSH
11344: CALL_OW 264
11348: PUSH
11349: LD_INT 14
11351: PUSH
11352: LD_INT 53
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: IN
11359: AND
11360: PUSH
11361: LD_VAR 0 4
11365: PPUSH
11366: LD_VAR 0 5
11370: PPUSH
11371: CALL_OW 488
11375: AND
11376: IFFALSE 11400
// CutTreeXYR ( unit , x , y , 12 ) ;
11378: LD_VAR 0 2
11382: PPUSH
11383: LD_VAR 0 4
11387: PPUSH
11388: LD_VAR 0 5
11392: PPUSH
11393: LD_INT 12
11395: PPUSH
11396: CALL 11463 0 4
// if cmd = 256 then
11400: LD_VAR 0 1
11404: PUSH
11405: LD_INT 256
11407: EQUAL
11408: IFFALSE 11429
// SetFactoryWaypoint ( unit , x , y ) ;
11410: LD_VAR 0 2
11414: PPUSH
11415: LD_VAR 0 4
11419: PPUSH
11420: LD_VAR 0 5
11424: PPUSH
11425: CALL 29360 0 3
// if cmd = 257 then
11429: LD_VAR 0 1
11433: PUSH
11434: LD_INT 257
11436: EQUAL
11437: IFFALSE 11458
// SetWarehouseGatheringPoint ( unit , x , y ) ;
11439: LD_VAR 0 2
11443: PPUSH
11444: LD_VAR 0 4
11448: PPUSH
11449: LD_VAR 0 5
11453: PPUSH
11454: CALL 29722 0 3
// end ;
11458: LD_VAR 0 6
11462: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
11463: LD_INT 0
11465: PPUSH
11466: PPUSH
11467: PPUSH
11468: PPUSH
11469: PPUSH
11470: PPUSH
11471: PPUSH
11472: PPUSH
11473: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
11474: LD_VAR 0 1
11478: NOT
11479: PUSH
11480: LD_VAR 0 2
11484: PPUSH
11485: LD_VAR 0 3
11489: PPUSH
11490: CALL_OW 488
11494: NOT
11495: OR
11496: PUSH
11497: LD_VAR 0 4
11501: NOT
11502: OR
11503: IFFALSE 11507
// exit ;
11505: GO 11847
// list := [ ] ;
11507: LD_ADDR_VAR 0 13
11511: PUSH
11512: EMPTY
11513: ST_TO_ADDR
// if x - r < 0 then
11514: LD_VAR 0 2
11518: PUSH
11519: LD_VAR 0 4
11523: MINUS
11524: PUSH
11525: LD_INT 0
11527: LESS
11528: IFFALSE 11540
// min_x := 0 else
11530: LD_ADDR_VAR 0 7
11534: PUSH
11535: LD_INT 0
11537: ST_TO_ADDR
11538: GO 11556
// min_x := x - r ;
11540: LD_ADDR_VAR 0 7
11544: PUSH
11545: LD_VAR 0 2
11549: PUSH
11550: LD_VAR 0 4
11554: MINUS
11555: ST_TO_ADDR
// if y - r < 0 then
11556: LD_VAR 0 3
11560: PUSH
11561: LD_VAR 0 4
11565: MINUS
11566: PUSH
11567: LD_INT 0
11569: LESS
11570: IFFALSE 11582
// min_y := 0 else
11572: LD_ADDR_VAR 0 8
11576: PUSH
11577: LD_INT 0
11579: ST_TO_ADDR
11580: GO 11598
// min_y := y - r ;
11582: LD_ADDR_VAR 0 8
11586: PUSH
11587: LD_VAR 0 3
11591: PUSH
11592: LD_VAR 0 4
11596: MINUS
11597: ST_TO_ADDR
// max_x := x + r ;
11598: LD_ADDR_VAR 0 9
11602: PUSH
11603: LD_VAR 0 2
11607: PUSH
11608: LD_VAR 0 4
11612: PLUS
11613: ST_TO_ADDR
// max_y := y + r ;
11614: LD_ADDR_VAR 0 10
11618: PUSH
11619: LD_VAR 0 3
11623: PUSH
11624: LD_VAR 0 4
11628: PLUS
11629: ST_TO_ADDR
// for _x = min_x to max_x do
11630: LD_ADDR_VAR 0 11
11634: PUSH
11635: DOUBLE
11636: LD_VAR 0 7
11640: DEC
11641: ST_TO_ADDR
11642: LD_VAR 0 9
11646: PUSH
11647: FOR_TO
11648: IFFALSE 11765
// for _y = min_y to max_y do
11650: LD_ADDR_VAR 0 12
11654: PUSH
11655: DOUBLE
11656: LD_VAR 0 8
11660: DEC
11661: ST_TO_ADDR
11662: LD_VAR 0 10
11666: PUSH
11667: FOR_TO
11668: IFFALSE 11761
// begin if not ValidHex ( _x , _y ) then
11670: LD_VAR 0 11
11674: PPUSH
11675: LD_VAR 0 12
11679: PPUSH
11680: CALL_OW 488
11684: NOT
11685: IFFALSE 11689
// continue ;
11687: GO 11667
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
11689: LD_VAR 0 11
11693: PPUSH
11694: LD_VAR 0 12
11698: PPUSH
11699: CALL_OW 351
11703: PUSH
11704: LD_VAR 0 11
11708: PPUSH
11709: LD_VAR 0 12
11713: PPUSH
11714: CALL_OW 554
11718: AND
11719: IFFALSE 11759
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
11721: LD_ADDR_VAR 0 13
11725: PUSH
11726: LD_VAR 0 13
11730: PPUSH
11731: LD_VAR 0 13
11735: PUSH
11736: LD_INT 1
11738: PLUS
11739: PPUSH
11740: LD_VAR 0 11
11744: PUSH
11745: LD_VAR 0 12
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PPUSH
11754: CALL_OW 2
11758: ST_TO_ADDR
// end ;
11759: GO 11667
11761: POP
11762: POP
11763: GO 11647
11765: POP
11766: POP
// if not list then
11767: LD_VAR 0 13
11771: NOT
11772: IFFALSE 11776
// exit ;
11774: GO 11847
// for i in list do
11776: LD_ADDR_VAR 0 6
11780: PUSH
11781: LD_VAR 0 13
11785: PUSH
11786: FOR_IN
11787: IFFALSE 11845
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
11789: LD_VAR 0 1
11793: PPUSH
11794: LD_STRING M
11796: PUSH
11797: LD_VAR 0 6
11801: PUSH
11802: LD_INT 1
11804: ARRAY
11805: PUSH
11806: LD_VAR 0 6
11810: PUSH
11811: LD_INT 2
11813: ARRAY
11814: PUSH
11815: LD_INT 0
11817: PUSH
11818: LD_INT 0
11820: PUSH
11821: LD_INT 0
11823: PUSH
11824: LD_INT 0
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: PUSH
11836: EMPTY
11837: LIST
11838: PPUSH
11839: CALL_OW 447
11843: GO 11786
11845: POP
11846: POP
// end ;
11847: LD_VAR 0 5
11851: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
11852: LD_EXP 26
11856: NOT
11857: IFFALSE 11907
11859: GO 11861
11861: DISABLE
// begin initHack := true ;
11862: LD_ADDR_EXP 26
11866: PUSH
11867: LD_INT 1
11869: ST_TO_ADDR
// hackTanks := [ ] ;
11870: LD_ADDR_EXP 27
11874: PUSH
11875: EMPTY
11876: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
11877: LD_ADDR_EXP 28
11881: PUSH
11882: EMPTY
11883: ST_TO_ADDR
// hackLimit := 3 ;
11884: LD_ADDR_EXP 29
11888: PUSH
11889: LD_INT 3
11891: ST_TO_ADDR
// hackDist := 12 ;
11892: LD_ADDR_EXP 30
11896: PUSH
11897: LD_INT 12
11899: ST_TO_ADDR
// hackCounter := [ ] ;
11900: LD_ADDR_EXP 31
11904: PUSH
11905: EMPTY
11906: ST_TO_ADDR
// end ;
11907: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
11908: LD_EXP 26
11912: PUSH
11913: LD_INT 34
11915: PUSH
11916: LD_EXP 99
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: PPUSH
11925: CALL_OW 69
11929: AND
11930: IFFALSE 12185
11932: GO 11934
11934: DISABLE
11935: LD_INT 0
11937: PPUSH
11938: PPUSH
// begin enable ;
11939: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
11940: LD_ADDR_VAR 0 1
11944: PUSH
11945: LD_INT 34
11947: PUSH
11948: LD_EXP 99
11952: PUSH
11953: EMPTY
11954: LIST
11955: LIST
11956: PPUSH
11957: CALL_OW 69
11961: PUSH
11962: FOR_IN
11963: IFFALSE 12183
// begin if not i in hackTanks then
11965: LD_VAR 0 1
11969: PUSH
11970: LD_EXP 27
11974: IN
11975: NOT
11976: IFFALSE 12059
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
11978: LD_ADDR_EXP 27
11982: PUSH
11983: LD_EXP 27
11987: PPUSH
11988: LD_EXP 27
11992: PUSH
11993: LD_INT 1
11995: PLUS
11996: PPUSH
11997: LD_VAR 0 1
12001: PPUSH
12002: CALL_OW 1
12006: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
12007: LD_ADDR_EXP 28
12011: PUSH
12012: LD_EXP 28
12016: PPUSH
12017: LD_EXP 28
12021: PUSH
12022: LD_INT 1
12024: PLUS
12025: PPUSH
12026: EMPTY
12027: PPUSH
12028: CALL_OW 1
12032: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
12033: LD_ADDR_EXP 31
12037: PUSH
12038: LD_EXP 31
12042: PPUSH
12043: LD_EXP 31
12047: PUSH
12048: LD_INT 1
12050: PLUS
12051: PPUSH
12052: EMPTY
12053: PPUSH
12054: CALL_OW 1
12058: ST_TO_ADDR
// end ; if not IsOk ( i ) then
12059: LD_VAR 0 1
12063: PPUSH
12064: CALL_OW 302
12068: NOT
12069: IFFALSE 12082
// begin HackUnlinkAll ( i ) ;
12071: LD_VAR 0 1
12075: PPUSH
12076: CALL 12188 0 1
// continue ;
12080: GO 11962
// end ; HackCheckCapturedStatus ( i ) ;
12082: LD_VAR 0 1
12086: PPUSH
12087: CALL 12631 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
12091: LD_ADDR_VAR 0 2
12095: PUSH
12096: LD_INT 81
12098: PUSH
12099: LD_VAR 0 1
12103: PPUSH
12104: CALL_OW 255
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: PUSH
12113: LD_INT 33
12115: PUSH
12116: LD_INT 3
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: PUSH
12123: LD_INT 91
12125: PUSH
12126: LD_VAR 0 1
12130: PUSH
12131: LD_EXP 30
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: LIST
12140: PUSH
12141: LD_INT 50
12143: PUSH
12144: EMPTY
12145: LIST
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: PPUSH
12153: CALL_OW 69
12157: ST_TO_ADDR
// if not tmp then
12158: LD_VAR 0 2
12162: NOT
12163: IFFALSE 12167
// continue ;
12165: GO 11962
// HackLink ( i , tmp ) ;
12167: LD_VAR 0 1
12171: PPUSH
12172: LD_VAR 0 2
12176: PPUSH
12177: CALL 12324 0 2
// end ;
12181: GO 11962
12183: POP
12184: POP
// end ;
12185: PPOPN 2
12187: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
12188: LD_INT 0
12190: PPUSH
12191: PPUSH
12192: PPUSH
// if not hack in hackTanks then
12193: LD_VAR 0 1
12197: PUSH
12198: LD_EXP 27
12202: IN
12203: NOT
12204: IFFALSE 12208
// exit ;
12206: GO 12319
// index := GetElementIndex ( hackTanks , hack ) ;
12208: LD_ADDR_VAR 0 4
12212: PUSH
12213: LD_EXP 27
12217: PPUSH
12218: LD_VAR 0 1
12222: PPUSH
12223: CALL 35597 0 2
12227: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
12228: LD_EXP 28
12232: PUSH
12233: LD_VAR 0 4
12237: ARRAY
12238: IFFALSE 12319
// begin for i in hackTanksCaptured [ index ] do
12240: LD_ADDR_VAR 0 3
12244: PUSH
12245: LD_EXP 28
12249: PUSH
12250: LD_VAR 0 4
12254: ARRAY
12255: PUSH
12256: FOR_IN
12257: IFFALSE 12283
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
12259: LD_VAR 0 3
12263: PUSH
12264: LD_INT 1
12266: ARRAY
12267: PPUSH
12268: LD_VAR 0 3
12272: PUSH
12273: LD_INT 2
12275: ARRAY
12276: PPUSH
12277: CALL_OW 235
12281: GO 12256
12283: POP
12284: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
12285: LD_ADDR_EXP 28
12289: PUSH
12290: LD_EXP 28
12294: PPUSH
12295: LD_VAR 0 4
12299: PPUSH
12300: EMPTY
12301: PPUSH
12302: CALL_OW 1
12306: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
12307: LD_VAR 0 1
12311: PPUSH
12312: LD_INT 0
12314: PPUSH
12315: CALL_OW 505
// end ; end ;
12319: LD_VAR 0 2
12323: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
12324: LD_INT 0
12326: PPUSH
12327: PPUSH
12328: PPUSH
// if not hack in hackTanks or not vehicles then
12329: LD_VAR 0 1
12333: PUSH
12334: LD_EXP 27
12338: IN
12339: NOT
12340: PUSH
12341: LD_VAR 0 2
12345: NOT
12346: OR
12347: IFFALSE 12351
// exit ;
12349: GO 12626
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
12351: LD_ADDR_VAR 0 2
12355: PUSH
12356: LD_VAR 0 1
12360: PPUSH
12361: LD_VAR 0 2
12365: PPUSH
12366: LD_INT 1
12368: PPUSH
12369: LD_INT 1
12371: PPUSH
12372: CALL 36247 0 4
12376: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
12377: LD_ADDR_VAR 0 5
12381: PUSH
12382: LD_EXP 27
12386: PPUSH
12387: LD_VAR 0 1
12391: PPUSH
12392: CALL 35597 0 2
12396: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
12397: LD_EXP 28
12401: PUSH
12402: LD_VAR 0 5
12406: ARRAY
12407: PUSH
12408: LD_EXP 29
12412: LESS
12413: IFFALSE 12602
// begin for i := 1 to vehicles do
12415: LD_ADDR_VAR 0 4
12419: PUSH
12420: DOUBLE
12421: LD_INT 1
12423: DEC
12424: ST_TO_ADDR
12425: LD_VAR 0 2
12429: PUSH
12430: FOR_TO
12431: IFFALSE 12600
// begin if hackTanksCaptured [ index ] = hackLimit then
12433: LD_EXP 28
12437: PUSH
12438: LD_VAR 0 5
12442: ARRAY
12443: PUSH
12444: LD_EXP 29
12448: EQUAL
12449: IFFALSE 12453
// break ;
12451: GO 12600
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
12453: LD_ADDR_EXP 31
12457: PUSH
12458: LD_EXP 31
12462: PPUSH
12463: LD_VAR 0 5
12467: PPUSH
12468: LD_EXP 31
12472: PUSH
12473: LD_VAR 0 5
12477: ARRAY
12478: PUSH
12479: LD_INT 1
12481: PLUS
12482: PPUSH
12483: CALL_OW 1
12487: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
12488: LD_ADDR_EXP 28
12492: PUSH
12493: LD_EXP 28
12497: PPUSH
12498: LD_VAR 0 5
12502: PUSH
12503: LD_EXP 28
12507: PUSH
12508: LD_VAR 0 5
12512: ARRAY
12513: PUSH
12514: LD_INT 1
12516: PLUS
12517: PUSH
12518: EMPTY
12519: LIST
12520: LIST
12521: PPUSH
12522: LD_VAR 0 2
12526: PUSH
12527: LD_VAR 0 4
12531: ARRAY
12532: PUSH
12533: LD_VAR 0 2
12537: PUSH
12538: LD_VAR 0 4
12542: ARRAY
12543: PPUSH
12544: CALL_OW 255
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: PPUSH
12553: CALL 35812 0 3
12557: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
12558: LD_VAR 0 2
12562: PUSH
12563: LD_VAR 0 4
12567: ARRAY
12568: PPUSH
12569: LD_VAR 0 1
12573: PPUSH
12574: CALL_OW 255
12578: PPUSH
12579: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
12583: LD_VAR 0 2
12587: PUSH
12588: LD_VAR 0 4
12592: ARRAY
12593: PPUSH
12594: CALL_OW 141
// end ;
12598: GO 12430
12600: POP
12601: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12602: LD_VAR 0 1
12606: PPUSH
12607: LD_EXP 28
12611: PUSH
12612: LD_VAR 0 5
12616: ARRAY
12617: PUSH
12618: LD_INT 0
12620: PLUS
12621: PPUSH
12622: CALL_OW 505
// end ;
12626: LD_VAR 0 3
12630: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
12631: LD_INT 0
12633: PPUSH
12634: PPUSH
12635: PPUSH
12636: PPUSH
// if not hack in hackTanks then
12637: LD_VAR 0 1
12641: PUSH
12642: LD_EXP 27
12646: IN
12647: NOT
12648: IFFALSE 12652
// exit ;
12650: GO 12892
// index := GetElementIndex ( hackTanks , hack ) ;
12652: LD_ADDR_VAR 0 4
12656: PUSH
12657: LD_EXP 27
12661: PPUSH
12662: LD_VAR 0 1
12666: PPUSH
12667: CALL 35597 0 2
12671: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
12672: LD_ADDR_VAR 0 3
12676: PUSH
12677: DOUBLE
12678: LD_EXP 28
12682: PUSH
12683: LD_VAR 0 4
12687: ARRAY
12688: INC
12689: ST_TO_ADDR
12690: LD_INT 1
12692: PUSH
12693: FOR_DOWNTO
12694: IFFALSE 12866
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
12696: LD_ADDR_VAR 0 5
12700: PUSH
12701: LD_EXP 28
12705: PUSH
12706: LD_VAR 0 4
12710: ARRAY
12711: PUSH
12712: LD_VAR 0 3
12716: ARRAY
12717: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
12718: LD_VAR 0 5
12722: PUSH
12723: LD_INT 1
12725: ARRAY
12726: PPUSH
12727: CALL_OW 302
12731: NOT
12732: PUSH
12733: LD_VAR 0 5
12737: PUSH
12738: LD_INT 1
12740: ARRAY
12741: PPUSH
12742: CALL_OW 255
12746: PUSH
12747: LD_VAR 0 1
12751: PPUSH
12752: CALL_OW 255
12756: NONEQUAL
12757: OR
12758: IFFALSE 12864
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
12760: LD_VAR 0 5
12764: PUSH
12765: LD_INT 1
12767: ARRAY
12768: PPUSH
12769: CALL_OW 305
12773: PUSH
12774: LD_VAR 0 5
12778: PUSH
12779: LD_INT 1
12781: ARRAY
12782: PPUSH
12783: CALL_OW 255
12787: PUSH
12788: LD_VAR 0 1
12792: PPUSH
12793: CALL_OW 255
12797: EQUAL
12798: AND
12799: IFFALSE 12823
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
12801: LD_VAR 0 5
12805: PUSH
12806: LD_INT 1
12808: ARRAY
12809: PPUSH
12810: LD_VAR 0 5
12814: PUSH
12815: LD_INT 2
12817: ARRAY
12818: PPUSH
12819: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
12823: LD_ADDR_EXP 28
12827: PUSH
12828: LD_EXP 28
12832: PPUSH
12833: LD_VAR 0 4
12837: PPUSH
12838: LD_EXP 28
12842: PUSH
12843: LD_VAR 0 4
12847: ARRAY
12848: PPUSH
12849: LD_VAR 0 3
12853: PPUSH
12854: CALL_OW 3
12858: PPUSH
12859: CALL_OW 1
12863: ST_TO_ADDR
// end ; end ;
12864: GO 12693
12866: POP
12867: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12868: LD_VAR 0 1
12872: PPUSH
12873: LD_EXP 28
12877: PUSH
12878: LD_VAR 0 4
12882: ARRAY
12883: PUSH
12884: LD_INT 0
12886: PLUS
12887: PPUSH
12888: CALL_OW 505
// end ;
12892: LD_VAR 0 2
12896: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
12897: LD_INT 0
12899: PPUSH
12900: PPUSH
12901: PPUSH
12902: PPUSH
// if not hack in hackTanks then
12903: LD_VAR 0 1
12907: PUSH
12908: LD_EXP 27
12912: IN
12913: NOT
12914: IFFALSE 12918
// exit ;
12916: GO 13003
// index := GetElementIndex ( hackTanks , hack ) ;
12918: LD_ADDR_VAR 0 5
12922: PUSH
12923: LD_EXP 27
12927: PPUSH
12928: LD_VAR 0 1
12932: PPUSH
12933: CALL 35597 0 2
12937: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
12938: LD_ADDR_VAR 0 4
12942: PUSH
12943: DOUBLE
12944: LD_INT 1
12946: DEC
12947: ST_TO_ADDR
12948: LD_EXP 28
12952: PUSH
12953: LD_VAR 0 5
12957: ARRAY
12958: PUSH
12959: FOR_TO
12960: IFFALSE 13001
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
12962: LD_EXP 28
12966: PUSH
12967: LD_VAR 0 5
12971: ARRAY
12972: PUSH
12973: LD_VAR 0 4
12977: ARRAY
12978: PUSH
12979: LD_INT 1
12981: ARRAY
12982: PUSH
12983: LD_VAR 0 2
12987: EQUAL
12988: IFFALSE 12999
// KillUnit ( vehicle ) ;
12990: LD_VAR 0 2
12994: PPUSH
12995: CALL_OW 66
12999: GO 12959
13001: POP
13002: POP
// end ;
13003: LD_VAR 0 3
13007: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
13008: LD_EXP 32
13012: NOT
13013: IFFALSE 13048
13015: GO 13017
13017: DISABLE
// begin initMiner := true ;
13018: LD_ADDR_EXP 32
13022: PUSH
13023: LD_INT 1
13025: ST_TO_ADDR
// minersList := [ ] ;
13026: LD_ADDR_EXP 33
13030: PUSH
13031: EMPTY
13032: ST_TO_ADDR
// minerMinesList := [ ] ;
13033: LD_ADDR_EXP 34
13037: PUSH
13038: EMPTY
13039: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
13040: LD_ADDR_EXP 35
13044: PUSH
13045: LD_INT 5
13047: ST_TO_ADDR
// end ;
13048: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
13049: LD_EXP 32
13053: PUSH
13054: LD_INT 34
13056: PUSH
13057: LD_EXP 104
13061: PUSH
13062: EMPTY
13063: LIST
13064: LIST
13065: PPUSH
13066: CALL_OW 69
13070: AND
13071: IFFALSE 13534
13073: GO 13075
13075: DISABLE
13076: LD_INT 0
13078: PPUSH
13079: PPUSH
13080: PPUSH
13081: PPUSH
// begin enable ;
13082: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
13083: LD_ADDR_VAR 0 1
13087: PUSH
13088: LD_INT 34
13090: PUSH
13091: LD_EXP 104
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: PPUSH
13100: CALL_OW 69
13104: PUSH
13105: FOR_IN
13106: IFFALSE 13178
// begin if not i in minersList then
13108: LD_VAR 0 1
13112: PUSH
13113: LD_EXP 33
13117: IN
13118: NOT
13119: IFFALSE 13176
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
13121: LD_ADDR_EXP 33
13125: PUSH
13126: LD_EXP 33
13130: PPUSH
13131: LD_EXP 33
13135: PUSH
13136: LD_INT 1
13138: PLUS
13139: PPUSH
13140: LD_VAR 0 1
13144: PPUSH
13145: CALL_OW 1
13149: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
13150: LD_ADDR_EXP 34
13154: PUSH
13155: LD_EXP 34
13159: PPUSH
13160: LD_EXP 34
13164: PUSH
13165: LD_INT 1
13167: PLUS
13168: PPUSH
13169: EMPTY
13170: PPUSH
13171: CALL_OW 1
13175: ST_TO_ADDR
// end end ;
13176: GO 13105
13178: POP
13179: POP
// for i := minerMinesList downto 1 do
13180: LD_ADDR_VAR 0 1
13184: PUSH
13185: DOUBLE
13186: LD_EXP 34
13190: INC
13191: ST_TO_ADDR
13192: LD_INT 1
13194: PUSH
13195: FOR_DOWNTO
13196: IFFALSE 13532
// begin if IsLive ( minersList [ i ] ) then
13198: LD_EXP 33
13202: PUSH
13203: LD_VAR 0 1
13207: ARRAY
13208: PPUSH
13209: CALL_OW 300
13213: IFFALSE 13241
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
13215: LD_EXP 33
13219: PUSH
13220: LD_VAR 0 1
13224: ARRAY
13225: PPUSH
13226: LD_EXP 34
13230: PUSH
13231: LD_VAR 0 1
13235: ARRAY
13236: PPUSH
13237: CALL_OW 505
// if not minerMinesList [ i ] then
13241: LD_EXP 34
13245: PUSH
13246: LD_VAR 0 1
13250: ARRAY
13251: NOT
13252: IFFALSE 13256
// continue ;
13254: GO 13195
// for j := minerMinesList [ i ] downto 1 do
13256: LD_ADDR_VAR 0 2
13260: PUSH
13261: DOUBLE
13262: LD_EXP 34
13266: PUSH
13267: LD_VAR 0 1
13271: ARRAY
13272: INC
13273: ST_TO_ADDR
13274: LD_INT 1
13276: PUSH
13277: FOR_DOWNTO
13278: IFFALSE 13528
// begin side := GetSide ( minersList [ i ] ) ;
13280: LD_ADDR_VAR 0 3
13284: PUSH
13285: LD_EXP 33
13289: PUSH
13290: LD_VAR 0 1
13294: ARRAY
13295: PPUSH
13296: CALL_OW 255
13300: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
13301: LD_ADDR_VAR 0 4
13305: PUSH
13306: LD_EXP 34
13310: PUSH
13311: LD_VAR 0 1
13315: ARRAY
13316: PUSH
13317: LD_VAR 0 2
13321: ARRAY
13322: PUSH
13323: LD_INT 1
13325: ARRAY
13326: PPUSH
13327: LD_EXP 34
13331: PUSH
13332: LD_VAR 0 1
13336: ARRAY
13337: PUSH
13338: LD_VAR 0 2
13342: ARRAY
13343: PUSH
13344: LD_INT 2
13346: ARRAY
13347: PPUSH
13348: CALL_OW 428
13352: ST_TO_ADDR
// if not tmp then
13353: LD_VAR 0 4
13357: NOT
13358: IFFALSE 13362
// continue ;
13360: GO 13277
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
13362: LD_VAR 0 4
13366: PUSH
13367: LD_INT 81
13369: PUSH
13370: LD_VAR 0 3
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PPUSH
13379: CALL_OW 69
13383: IN
13384: PUSH
13385: LD_EXP 34
13389: PUSH
13390: LD_VAR 0 1
13394: ARRAY
13395: PUSH
13396: LD_VAR 0 2
13400: ARRAY
13401: PUSH
13402: LD_INT 1
13404: ARRAY
13405: PPUSH
13406: LD_EXP 34
13410: PUSH
13411: LD_VAR 0 1
13415: ARRAY
13416: PUSH
13417: LD_VAR 0 2
13421: ARRAY
13422: PUSH
13423: LD_INT 2
13425: ARRAY
13426: PPUSH
13427: CALL_OW 458
13431: AND
13432: IFFALSE 13526
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
13434: LD_EXP 34
13438: PUSH
13439: LD_VAR 0 1
13443: ARRAY
13444: PUSH
13445: LD_VAR 0 2
13449: ARRAY
13450: PUSH
13451: LD_INT 1
13453: ARRAY
13454: PPUSH
13455: LD_EXP 34
13459: PUSH
13460: LD_VAR 0 1
13464: ARRAY
13465: PUSH
13466: LD_VAR 0 2
13470: ARRAY
13471: PUSH
13472: LD_INT 2
13474: ARRAY
13475: PPUSH
13476: LD_VAR 0 3
13480: PPUSH
13481: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
13485: LD_ADDR_EXP 34
13489: PUSH
13490: LD_EXP 34
13494: PPUSH
13495: LD_VAR 0 1
13499: PPUSH
13500: LD_EXP 34
13504: PUSH
13505: LD_VAR 0 1
13509: ARRAY
13510: PPUSH
13511: LD_VAR 0 2
13515: PPUSH
13516: CALL_OW 3
13520: PPUSH
13521: CALL_OW 1
13525: ST_TO_ADDR
// end ; end ;
13526: GO 13277
13528: POP
13529: POP
// end ;
13530: GO 13195
13532: POP
13533: POP
// end ;
13534: PPOPN 4
13536: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
13537: LD_INT 0
13539: PPUSH
13540: PPUSH
// result := false ;
13541: LD_ADDR_VAR 0 4
13545: PUSH
13546: LD_INT 0
13548: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
13549: LD_VAR 0 1
13553: PPUSH
13554: CALL_OW 264
13558: PUSH
13559: LD_EXP 104
13563: EQUAL
13564: NOT
13565: IFFALSE 13569
// exit ;
13567: GO 13809
// index := GetElementIndex ( minersList , unit ) ;
13569: LD_ADDR_VAR 0 5
13573: PUSH
13574: LD_EXP 33
13578: PPUSH
13579: LD_VAR 0 1
13583: PPUSH
13584: CALL 35597 0 2
13588: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
13589: LD_EXP 34
13593: PUSH
13594: LD_VAR 0 5
13598: ARRAY
13599: PUSH
13600: LD_EXP 35
13604: GREATEREQUAL
13605: IFFALSE 13609
// exit ;
13607: GO 13809
// ComMoveXY ( unit , x , y ) ;
13609: LD_VAR 0 1
13613: PPUSH
13614: LD_VAR 0 2
13618: PPUSH
13619: LD_VAR 0 3
13623: PPUSH
13624: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13628: LD_INT 35
13630: PPUSH
13631: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
13635: LD_VAR 0 1
13639: PPUSH
13640: LD_VAR 0 2
13644: PPUSH
13645: LD_VAR 0 3
13649: PPUSH
13650: CALL 66883 0 3
13654: NOT
13655: PUSH
13656: LD_VAR 0 1
13660: PPUSH
13661: CALL_OW 314
13665: AND
13666: IFFALSE 13670
// exit ;
13668: GO 13809
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
13670: LD_VAR 0 2
13674: PPUSH
13675: LD_VAR 0 3
13679: PPUSH
13680: CALL_OW 428
13684: PUSH
13685: LD_VAR 0 1
13689: EQUAL
13690: PUSH
13691: LD_VAR 0 1
13695: PPUSH
13696: CALL_OW 314
13700: NOT
13701: AND
13702: IFFALSE 13628
// PlaySoundXY ( x , y , PlantMine ) ;
13704: LD_VAR 0 2
13708: PPUSH
13709: LD_VAR 0 3
13713: PPUSH
13714: LD_STRING PlantMine
13716: PPUSH
13717: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
13721: LD_VAR 0 2
13725: PPUSH
13726: LD_VAR 0 3
13730: PPUSH
13731: LD_VAR 0 1
13735: PPUSH
13736: CALL_OW 255
13740: PPUSH
13741: LD_INT 0
13743: PPUSH
13744: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
13748: LD_ADDR_EXP 34
13752: PUSH
13753: LD_EXP 34
13757: PPUSH
13758: LD_VAR 0 5
13762: PUSH
13763: LD_EXP 34
13767: PUSH
13768: LD_VAR 0 5
13772: ARRAY
13773: PUSH
13774: LD_INT 1
13776: PLUS
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: PPUSH
13782: LD_VAR 0 2
13786: PUSH
13787: LD_VAR 0 3
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: PPUSH
13796: CALL 35812 0 3
13800: ST_TO_ADDR
// result := true ;
13801: LD_ADDR_VAR 0 4
13805: PUSH
13806: LD_INT 1
13808: ST_TO_ADDR
// end ;
13809: LD_VAR 0 4
13813: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
13814: LD_INT 0
13816: PPUSH
13817: PPUSH
13818: PPUSH
// if not unit in minersList then
13819: LD_VAR 0 1
13823: PUSH
13824: LD_EXP 33
13828: IN
13829: NOT
13830: IFFALSE 13834
// exit ;
13832: GO 14226
// index := GetElementIndex ( minersList , unit ) ;
13834: LD_ADDR_VAR 0 6
13838: PUSH
13839: LD_EXP 33
13843: PPUSH
13844: LD_VAR 0 1
13848: PPUSH
13849: CALL 35597 0 2
13853: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
13854: LD_ADDR_VAR 0 5
13858: PUSH
13859: DOUBLE
13860: LD_EXP 34
13864: PUSH
13865: LD_VAR 0 6
13869: ARRAY
13870: INC
13871: ST_TO_ADDR
13872: LD_INT 1
13874: PUSH
13875: FOR_DOWNTO
13876: IFFALSE 14037
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
13878: LD_EXP 34
13882: PUSH
13883: LD_VAR 0 6
13887: ARRAY
13888: PUSH
13889: LD_VAR 0 5
13893: ARRAY
13894: PUSH
13895: LD_INT 1
13897: ARRAY
13898: PUSH
13899: LD_VAR 0 2
13903: EQUAL
13904: PUSH
13905: LD_EXP 34
13909: PUSH
13910: LD_VAR 0 6
13914: ARRAY
13915: PUSH
13916: LD_VAR 0 5
13920: ARRAY
13921: PUSH
13922: LD_INT 2
13924: ARRAY
13925: PUSH
13926: LD_VAR 0 3
13930: EQUAL
13931: AND
13932: IFFALSE 14035
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
13934: LD_EXP 34
13938: PUSH
13939: LD_VAR 0 6
13943: ARRAY
13944: PUSH
13945: LD_VAR 0 5
13949: ARRAY
13950: PUSH
13951: LD_INT 1
13953: ARRAY
13954: PPUSH
13955: LD_EXP 34
13959: PUSH
13960: LD_VAR 0 6
13964: ARRAY
13965: PUSH
13966: LD_VAR 0 5
13970: ARRAY
13971: PUSH
13972: LD_INT 2
13974: ARRAY
13975: PPUSH
13976: LD_VAR 0 1
13980: PPUSH
13981: CALL_OW 255
13985: PPUSH
13986: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
13990: LD_ADDR_EXP 34
13994: PUSH
13995: LD_EXP 34
13999: PPUSH
14000: LD_VAR 0 6
14004: PPUSH
14005: LD_EXP 34
14009: PUSH
14010: LD_VAR 0 6
14014: ARRAY
14015: PPUSH
14016: LD_VAR 0 5
14020: PPUSH
14021: CALL_OW 3
14025: PPUSH
14026: CALL_OW 1
14030: ST_TO_ADDR
// exit ;
14031: POP
14032: POP
14033: GO 14226
// end ; end ;
14035: GO 13875
14037: POP
14038: POP
// for i := minerMinesList [ index ] downto 1 do
14039: LD_ADDR_VAR 0 5
14043: PUSH
14044: DOUBLE
14045: LD_EXP 34
14049: PUSH
14050: LD_VAR 0 6
14054: ARRAY
14055: INC
14056: ST_TO_ADDR
14057: LD_INT 1
14059: PUSH
14060: FOR_DOWNTO
14061: IFFALSE 14224
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
14063: LD_EXP 34
14067: PUSH
14068: LD_VAR 0 6
14072: ARRAY
14073: PUSH
14074: LD_VAR 0 5
14078: ARRAY
14079: PUSH
14080: LD_INT 1
14082: ARRAY
14083: PPUSH
14084: LD_EXP 34
14088: PUSH
14089: LD_VAR 0 6
14093: ARRAY
14094: PUSH
14095: LD_VAR 0 5
14099: ARRAY
14100: PUSH
14101: LD_INT 2
14103: ARRAY
14104: PPUSH
14105: LD_VAR 0 2
14109: PPUSH
14110: LD_VAR 0 3
14114: PPUSH
14115: CALL_OW 298
14119: PUSH
14120: LD_INT 6
14122: LESS
14123: IFFALSE 14222
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
14125: LD_EXP 34
14129: PUSH
14130: LD_VAR 0 6
14134: ARRAY
14135: PUSH
14136: LD_VAR 0 5
14140: ARRAY
14141: PUSH
14142: LD_INT 1
14144: ARRAY
14145: PPUSH
14146: LD_EXP 34
14150: PUSH
14151: LD_VAR 0 6
14155: ARRAY
14156: PUSH
14157: LD_VAR 0 5
14161: ARRAY
14162: PUSH
14163: LD_INT 2
14165: ARRAY
14166: PPUSH
14167: LD_VAR 0 1
14171: PPUSH
14172: CALL_OW 255
14176: PPUSH
14177: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
14181: LD_ADDR_EXP 34
14185: PUSH
14186: LD_EXP 34
14190: PPUSH
14191: LD_VAR 0 6
14195: PPUSH
14196: LD_EXP 34
14200: PUSH
14201: LD_VAR 0 6
14205: ARRAY
14206: PPUSH
14207: LD_VAR 0 5
14211: PPUSH
14212: CALL_OW 3
14216: PPUSH
14217: CALL_OW 1
14221: ST_TO_ADDR
// end ; end ;
14222: GO 14060
14224: POP
14225: POP
// end ;
14226: LD_VAR 0 4
14230: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
14231: LD_INT 0
14233: PPUSH
14234: PPUSH
14235: PPUSH
14236: PPUSH
14237: PPUSH
14238: PPUSH
14239: PPUSH
14240: PPUSH
14241: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
14242: LD_VAR 0 1
14246: PPUSH
14247: CALL_OW 264
14251: PUSH
14252: LD_EXP 104
14256: EQUAL
14257: NOT
14258: PUSH
14259: LD_VAR 0 1
14263: PUSH
14264: LD_EXP 33
14268: IN
14269: NOT
14270: OR
14271: IFFALSE 14275
// exit ;
14273: GO 14597
// index := GetElementIndex ( minersList , unit ) ;
14275: LD_ADDR_VAR 0 6
14279: PUSH
14280: LD_EXP 33
14284: PPUSH
14285: LD_VAR 0 1
14289: PPUSH
14290: CALL 35597 0 2
14294: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
14295: LD_ADDR_VAR 0 8
14299: PUSH
14300: LD_EXP 35
14304: PUSH
14305: LD_EXP 34
14309: PUSH
14310: LD_VAR 0 6
14314: ARRAY
14315: MINUS
14316: ST_TO_ADDR
// if not minesFreeAmount then
14317: LD_VAR 0 8
14321: NOT
14322: IFFALSE 14326
// exit ;
14324: GO 14597
// tmp := [ ] ;
14326: LD_ADDR_VAR 0 7
14330: PUSH
14331: EMPTY
14332: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
14333: LD_ADDR_VAR 0 5
14337: PUSH
14338: DOUBLE
14339: LD_INT 1
14341: DEC
14342: ST_TO_ADDR
14343: LD_VAR 0 8
14347: PUSH
14348: FOR_TO
14349: IFFALSE 14544
// begin _d := rand ( 0 , 5 ) ;
14351: LD_ADDR_VAR 0 11
14355: PUSH
14356: LD_INT 0
14358: PPUSH
14359: LD_INT 5
14361: PPUSH
14362: CALL_OW 12
14366: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
14367: LD_ADDR_VAR 0 12
14371: PUSH
14372: LD_INT 2
14374: PPUSH
14375: LD_INT 6
14377: PPUSH
14378: CALL_OW 12
14382: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
14383: LD_ADDR_VAR 0 9
14387: PUSH
14388: LD_VAR 0 2
14392: PPUSH
14393: LD_VAR 0 11
14397: PPUSH
14398: LD_VAR 0 12
14402: PPUSH
14403: CALL_OW 272
14407: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
14408: LD_ADDR_VAR 0 10
14412: PUSH
14413: LD_VAR 0 3
14417: PPUSH
14418: LD_VAR 0 11
14422: PPUSH
14423: LD_VAR 0 12
14427: PPUSH
14428: CALL_OW 273
14432: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
14433: LD_VAR 0 9
14437: PPUSH
14438: LD_VAR 0 10
14442: PPUSH
14443: CALL_OW 488
14447: PUSH
14448: LD_VAR 0 9
14452: PUSH
14453: LD_VAR 0 10
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: PUSH
14462: LD_VAR 0 7
14466: IN
14467: NOT
14468: AND
14469: PUSH
14470: LD_VAR 0 9
14474: PPUSH
14475: LD_VAR 0 10
14479: PPUSH
14480: CALL_OW 458
14484: NOT
14485: AND
14486: IFFALSE 14528
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
14488: LD_ADDR_VAR 0 7
14492: PUSH
14493: LD_VAR 0 7
14497: PPUSH
14498: LD_VAR 0 7
14502: PUSH
14503: LD_INT 1
14505: PLUS
14506: PPUSH
14507: LD_VAR 0 9
14511: PUSH
14512: LD_VAR 0 10
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: PPUSH
14521: CALL_OW 1
14525: ST_TO_ADDR
14526: GO 14542
// i := i - 1 ;
14528: LD_ADDR_VAR 0 5
14532: PUSH
14533: LD_VAR 0 5
14537: PUSH
14538: LD_INT 1
14540: MINUS
14541: ST_TO_ADDR
// end ;
14542: GO 14348
14544: POP
14545: POP
// for i in tmp do
14546: LD_ADDR_VAR 0 5
14550: PUSH
14551: LD_VAR 0 7
14555: PUSH
14556: FOR_IN
14557: IFFALSE 14595
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
14559: LD_VAR 0 1
14563: PPUSH
14564: LD_VAR 0 5
14568: PUSH
14569: LD_INT 1
14571: ARRAY
14572: PPUSH
14573: LD_VAR 0 5
14577: PUSH
14578: LD_INT 2
14580: ARRAY
14581: PPUSH
14582: CALL 13537 0 3
14586: NOT
14587: IFFALSE 14593
// exit ;
14589: POP
14590: POP
14591: GO 14597
14593: GO 14556
14595: POP
14596: POP
// end ;
14597: LD_VAR 0 4
14601: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
14602: LD_INT 0
14604: PPUSH
14605: PPUSH
14606: PPUSH
14607: PPUSH
14608: PPUSH
14609: PPUSH
14610: PPUSH
// if not GetClass ( unit ) = class_sniper then
14611: LD_VAR 0 1
14615: PPUSH
14616: CALL_OW 257
14620: PUSH
14621: LD_INT 5
14623: EQUAL
14624: NOT
14625: IFFALSE 14629
// exit ;
14627: GO 15017
// dist := 8 ;
14629: LD_ADDR_VAR 0 5
14633: PUSH
14634: LD_INT 8
14636: ST_TO_ADDR
// viewRange := 12 ;
14637: LD_ADDR_VAR 0 7
14641: PUSH
14642: LD_INT 12
14644: ST_TO_ADDR
// side := GetSide ( unit ) ;
14645: LD_ADDR_VAR 0 6
14649: PUSH
14650: LD_VAR 0 1
14654: PPUSH
14655: CALL_OW 255
14659: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
14660: LD_INT 61
14662: PPUSH
14663: LD_VAR 0 6
14667: PPUSH
14668: CALL_OW 321
14672: PUSH
14673: LD_INT 2
14675: EQUAL
14676: IFFALSE 14686
// viewRange := 16 ;
14678: LD_ADDR_VAR 0 7
14682: PUSH
14683: LD_INT 16
14685: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
14686: LD_VAR 0 1
14690: PPUSH
14691: LD_VAR 0 2
14695: PPUSH
14696: LD_VAR 0 3
14700: PPUSH
14701: CALL_OW 297
14705: PUSH
14706: LD_VAR 0 5
14710: GREATER
14711: IFFALSE 14790
// begin ComMoveXY ( unit , x , y ) ;
14713: LD_VAR 0 1
14717: PPUSH
14718: LD_VAR 0 2
14722: PPUSH
14723: LD_VAR 0 3
14727: PPUSH
14728: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14732: LD_INT 35
14734: PPUSH
14735: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
14739: LD_VAR 0 1
14743: PPUSH
14744: LD_VAR 0 2
14748: PPUSH
14749: LD_VAR 0 3
14753: PPUSH
14754: CALL 66883 0 3
14758: NOT
14759: IFFALSE 14763
// exit ;
14761: GO 15017
// until GetDistUnitXY ( unit , x , y ) < dist ;
14763: LD_VAR 0 1
14767: PPUSH
14768: LD_VAR 0 2
14772: PPUSH
14773: LD_VAR 0 3
14777: PPUSH
14778: CALL_OW 297
14782: PUSH
14783: LD_VAR 0 5
14787: LESS
14788: IFFALSE 14732
// end ; ComTurnXY ( unit , x , y ) ;
14790: LD_VAR 0 1
14794: PPUSH
14795: LD_VAR 0 2
14799: PPUSH
14800: LD_VAR 0 3
14804: PPUSH
14805: CALL_OW 118
// wait ( 5 ) ;
14809: LD_INT 5
14811: PPUSH
14812: CALL_OW 67
// _d := GetDir ( unit ) ;
14816: LD_ADDR_VAR 0 10
14820: PUSH
14821: LD_VAR 0 1
14825: PPUSH
14826: CALL_OW 254
14830: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
14831: LD_ADDR_VAR 0 8
14835: PUSH
14836: LD_VAR 0 1
14840: PPUSH
14841: CALL_OW 250
14845: PPUSH
14846: LD_VAR 0 10
14850: PPUSH
14851: LD_VAR 0 5
14855: PPUSH
14856: CALL_OW 272
14860: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
14861: LD_ADDR_VAR 0 9
14865: PUSH
14866: LD_VAR 0 1
14870: PPUSH
14871: CALL_OW 251
14875: PPUSH
14876: LD_VAR 0 10
14880: PPUSH
14881: LD_VAR 0 5
14885: PPUSH
14886: CALL_OW 273
14890: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14891: LD_VAR 0 8
14895: PPUSH
14896: LD_VAR 0 9
14900: PPUSH
14901: CALL_OW 488
14905: NOT
14906: IFFALSE 14910
// exit ;
14908: GO 15017
// ComAnimCustom ( unit , 1 ) ;
14910: LD_VAR 0 1
14914: PPUSH
14915: LD_INT 1
14917: PPUSH
14918: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
14922: LD_VAR 0 8
14926: PPUSH
14927: LD_VAR 0 9
14931: PPUSH
14932: LD_VAR 0 6
14936: PPUSH
14937: LD_VAR 0 7
14941: PPUSH
14942: CALL_OW 330
// repeat wait ( 1 ) ;
14946: LD_INT 1
14948: PPUSH
14949: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
14953: LD_VAR 0 1
14957: PPUSH
14958: CALL_OW 316
14962: PUSH
14963: LD_VAR 0 1
14967: PPUSH
14968: CALL_OW 314
14972: OR
14973: PUSH
14974: LD_VAR 0 1
14978: PPUSH
14979: CALL_OW 302
14983: NOT
14984: OR
14985: PUSH
14986: LD_VAR 0 1
14990: PPUSH
14991: CALL_OW 301
14995: OR
14996: IFFALSE 14946
// RemoveSeeing ( _x , _y , side ) ;
14998: LD_VAR 0 8
15002: PPUSH
15003: LD_VAR 0 9
15007: PPUSH
15008: LD_VAR 0 6
15012: PPUSH
15013: CALL_OW 331
// end ; end_of_file
15017: LD_VAR 0 4
15021: RET
// every 0 0$1 do
15022: GO 15024
15024: DISABLE
// begin enable ;
15025: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15026: LD_STRING updateTimer(
15028: PUSH
15029: LD_OWVAR 1
15033: STR
15034: PUSH
15035: LD_STRING );
15037: STR
15038: PPUSH
15039: CALL_OW 559
// end ;
15043: END
// export function SOS_MapStart ( ) ; begin
15044: LD_INT 0
15046: PPUSH
// if streamModeActive then
15047: LD_EXP 36
15051: IFFALSE 15060
// DefineStreamItems ( true ) ;
15053: LD_INT 1
15055: PPUSH
15056: CALL 16714 0 1
// UpdateFactoryWaypoints ( ) ;
15060: CALL 29575 0 0
// UpdateWarehouseGatheringPoints ( ) ;
15064: CALL 29832 0 0
// end ;
15068: LD_VAR 0 1
15072: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15073: LD_INT 0
15075: PPUSH
// if p2 = 100 then
15076: LD_VAR 0 2
15080: PUSH
15081: LD_INT 100
15083: EQUAL
15084: IFFALSE 16087
// begin if not StreamModeActive then
15086: LD_EXP 36
15090: NOT
15091: IFFALSE 15101
// StreamModeActive := true ;
15093: LD_ADDR_EXP 36
15097: PUSH
15098: LD_INT 1
15100: ST_TO_ADDR
// if p3 = 0 then
15101: LD_VAR 0 3
15105: PUSH
15106: LD_INT 0
15108: EQUAL
15109: IFFALSE 15115
// InitStreamMode ;
15111: CALL 16250 0 0
// if p3 = 1 then
15115: LD_VAR 0 3
15119: PUSH
15120: LD_INT 1
15122: EQUAL
15123: IFFALSE 15133
// sRocket := true ;
15125: LD_ADDR_EXP 41
15129: PUSH
15130: LD_INT 1
15132: ST_TO_ADDR
// if p3 = 2 then
15133: LD_VAR 0 3
15137: PUSH
15138: LD_INT 2
15140: EQUAL
15141: IFFALSE 15151
// sSpeed := true ;
15143: LD_ADDR_EXP 40
15147: PUSH
15148: LD_INT 1
15150: ST_TO_ADDR
// if p3 = 3 then
15151: LD_VAR 0 3
15155: PUSH
15156: LD_INT 3
15158: EQUAL
15159: IFFALSE 15169
// sEngine := true ;
15161: LD_ADDR_EXP 42
15165: PUSH
15166: LD_INT 1
15168: ST_TO_ADDR
// if p3 = 4 then
15169: LD_VAR 0 3
15173: PUSH
15174: LD_INT 4
15176: EQUAL
15177: IFFALSE 15187
// sSpec := true ;
15179: LD_ADDR_EXP 39
15183: PUSH
15184: LD_INT 1
15186: ST_TO_ADDR
// if p3 = 5 then
15187: LD_VAR 0 3
15191: PUSH
15192: LD_INT 5
15194: EQUAL
15195: IFFALSE 15205
// sLevel := true ;
15197: LD_ADDR_EXP 43
15201: PUSH
15202: LD_INT 1
15204: ST_TO_ADDR
// if p3 = 6 then
15205: LD_VAR 0 3
15209: PUSH
15210: LD_INT 6
15212: EQUAL
15213: IFFALSE 15223
// sArmoury := true ;
15215: LD_ADDR_EXP 44
15219: PUSH
15220: LD_INT 1
15222: ST_TO_ADDR
// if p3 = 7 then
15223: LD_VAR 0 3
15227: PUSH
15228: LD_INT 7
15230: EQUAL
15231: IFFALSE 15241
// sRadar := true ;
15233: LD_ADDR_EXP 45
15237: PUSH
15238: LD_INT 1
15240: ST_TO_ADDR
// if p3 = 8 then
15241: LD_VAR 0 3
15245: PUSH
15246: LD_INT 8
15248: EQUAL
15249: IFFALSE 15259
// sBunker := true ;
15251: LD_ADDR_EXP 46
15255: PUSH
15256: LD_INT 1
15258: ST_TO_ADDR
// if p3 = 9 then
15259: LD_VAR 0 3
15263: PUSH
15264: LD_INT 9
15266: EQUAL
15267: IFFALSE 15277
// sHack := true ;
15269: LD_ADDR_EXP 47
15273: PUSH
15274: LD_INT 1
15276: ST_TO_ADDR
// if p3 = 10 then
15277: LD_VAR 0 3
15281: PUSH
15282: LD_INT 10
15284: EQUAL
15285: IFFALSE 15295
// sFire := true ;
15287: LD_ADDR_EXP 48
15291: PUSH
15292: LD_INT 1
15294: ST_TO_ADDR
// if p3 = 11 then
15295: LD_VAR 0 3
15299: PUSH
15300: LD_INT 11
15302: EQUAL
15303: IFFALSE 15313
// sRefresh := true ;
15305: LD_ADDR_EXP 49
15309: PUSH
15310: LD_INT 1
15312: ST_TO_ADDR
// if p3 = 12 then
15313: LD_VAR 0 3
15317: PUSH
15318: LD_INT 12
15320: EQUAL
15321: IFFALSE 15331
// sExp := true ;
15323: LD_ADDR_EXP 50
15327: PUSH
15328: LD_INT 1
15330: ST_TO_ADDR
// if p3 = 13 then
15331: LD_VAR 0 3
15335: PUSH
15336: LD_INT 13
15338: EQUAL
15339: IFFALSE 15349
// sDepot := true ;
15341: LD_ADDR_EXP 51
15345: PUSH
15346: LD_INT 1
15348: ST_TO_ADDR
// if p3 = 14 then
15349: LD_VAR 0 3
15353: PUSH
15354: LD_INT 14
15356: EQUAL
15357: IFFALSE 15367
// sFlag := true ;
15359: LD_ADDR_EXP 52
15363: PUSH
15364: LD_INT 1
15366: ST_TO_ADDR
// if p3 = 15 then
15367: LD_VAR 0 3
15371: PUSH
15372: LD_INT 15
15374: EQUAL
15375: IFFALSE 15385
// sKamikadze := true ;
15377: LD_ADDR_EXP 60
15381: PUSH
15382: LD_INT 1
15384: ST_TO_ADDR
// if p3 = 16 then
15385: LD_VAR 0 3
15389: PUSH
15390: LD_INT 16
15392: EQUAL
15393: IFFALSE 15403
// sTroll := true ;
15395: LD_ADDR_EXP 61
15399: PUSH
15400: LD_INT 1
15402: ST_TO_ADDR
// if p3 = 17 then
15403: LD_VAR 0 3
15407: PUSH
15408: LD_INT 17
15410: EQUAL
15411: IFFALSE 15421
// sSlow := true ;
15413: LD_ADDR_EXP 62
15417: PUSH
15418: LD_INT 1
15420: ST_TO_ADDR
// if p3 = 18 then
15421: LD_VAR 0 3
15425: PUSH
15426: LD_INT 18
15428: EQUAL
15429: IFFALSE 15439
// sLack := true ;
15431: LD_ADDR_EXP 63
15435: PUSH
15436: LD_INT 1
15438: ST_TO_ADDR
// if p3 = 19 then
15439: LD_VAR 0 3
15443: PUSH
15444: LD_INT 19
15446: EQUAL
15447: IFFALSE 15457
// sTank := true ;
15449: LD_ADDR_EXP 65
15453: PUSH
15454: LD_INT 1
15456: ST_TO_ADDR
// if p3 = 20 then
15457: LD_VAR 0 3
15461: PUSH
15462: LD_INT 20
15464: EQUAL
15465: IFFALSE 15475
// sRemote := true ;
15467: LD_ADDR_EXP 66
15471: PUSH
15472: LD_INT 1
15474: ST_TO_ADDR
// if p3 = 21 then
15475: LD_VAR 0 3
15479: PUSH
15480: LD_INT 21
15482: EQUAL
15483: IFFALSE 15493
// sPowell := true ;
15485: LD_ADDR_EXP 67
15489: PUSH
15490: LD_INT 1
15492: ST_TO_ADDR
// if p3 = 22 then
15493: LD_VAR 0 3
15497: PUSH
15498: LD_INT 22
15500: EQUAL
15501: IFFALSE 15511
// sTeleport := true ;
15503: LD_ADDR_EXP 70
15507: PUSH
15508: LD_INT 1
15510: ST_TO_ADDR
// if p3 = 23 then
15511: LD_VAR 0 3
15515: PUSH
15516: LD_INT 23
15518: EQUAL
15519: IFFALSE 15529
// sOilTower := true ;
15521: LD_ADDR_EXP 72
15525: PUSH
15526: LD_INT 1
15528: ST_TO_ADDR
// if p3 = 24 then
15529: LD_VAR 0 3
15533: PUSH
15534: LD_INT 24
15536: EQUAL
15537: IFFALSE 15547
// sShovel := true ;
15539: LD_ADDR_EXP 73
15543: PUSH
15544: LD_INT 1
15546: ST_TO_ADDR
// if p3 = 25 then
15547: LD_VAR 0 3
15551: PUSH
15552: LD_INT 25
15554: EQUAL
15555: IFFALSE 15565
// sSheik := true ;
15557: LD_ADDR_EXP 74
15561: PUSH
15562: LD_INT 1
15564: ST_TO_ADDR
// if p3 = 26 then
15565: LD_VAR 0 3
15569: PUSH
15570: LD_INT 26
15572: EQUAL
15573: IFFALSE 15583
// sEarthquake := true ;
15575: LD_ADDR_EXP 76
15579: PUSH
15580: LD_INT 1
15582: ST_TO_ADDR
// if p3 = 27 then
15583: LD_VAR 0 3
15587: PUSH
15588: LD_INT 27
15590: EQUAL
15591: IFFALSE 15601
// sAI := true ;
15593: LD_ADDR_EXP 77
15597: PUSH
15598: LD_INT 1
15600: ST_TO_ADDR
// if p3 = 28 then
15601: LD_VAR 0 3
15605: PUSH
15606: LD_INT 28
15608: EQUAL
15609: IFFALSE 15619
// sCargo := true ;
15611: LD_ADDR_EXP 80
15615: PUSH
15616: LD_INT 1
15618: ST_TO_ADDR
// if p3 = 29 then
15619: LD_VAR 0 3
15623: PUSH
15624: LD_INT 29
15626: EQUAL
15627: IFFALSE 15637
// sDLaser := true ;
15629: LD_ADDR_EXP 81
15633: PUSH
15634: LD_INT 1
15636: ST_TO_ADDR
// if p3 = 30 then
15637: LD_VAR 0 3
15641: PUSH
15642: LD_INT 30
15644: EQUAL
15645: IFFALSE 15655
// sExchange := true ;
15647: LD_ADDR_EXP 82
15651: PUSH
15652: LD_INT 1
15654: ST_TO_ADDR
// if p3 = 31 then
15655: LD_VAR 0 3
15659: PUSH
15660: LD_INT 31
15662: EQUAL
15663: IFFALSE 15673
// sFac := true ;
15665: LD_ADDR_EXP 83
15669: PUSH
15670: LD_INT 1
15672: ST_TO_ADDR
// if p3 = 32 then
15673: LD_VAR 0 3
15677: PUSH
15678: LD_INT 32
15680: EQUAL
15681: IFFALSE 15691
// sPower := true ;
15683: LD_ADDR_EXP 84
15687: PUSH
15688: LD_INT 1
15690: ST_TO_ADDR
// if p3 = 33 then
15691: LD_VAR 0 3
15695: PUSH
15696: LD_INT 33
15698: EQUAL
15699: IFFALSE 15709
// sRandom := true ;
15701: LD_ADDR_EXP 85
15705: PUSH
15706: LD_INT 1
15708: ST_TO_ADDR
// if p3 = 34 then
15709: LD_VAR 0 3
15713: PUSH
15714: LD_INT 34
15716: EQUAL
15717: IFFALSE 15727
// sShield := true ;
15719: LD_ADDR_EXP 86
15723: PUSH
15724: LD_INT 1
15726: ST_TO_ADDR
// if p3 = 35 then
15727: LD_VAR 0 3
15731: PUSH
15732: LD_INT 35
15734: EQUAL
15735: IFFALSE 15745
// sTime := true ;
15737: LD_ADDR_EXP 87
15741: PUSH
15742: LD_INT 1
15744: ST_TO_ADDR
// if p3 = 36 then
15745: LD_VAR 0 3
15749: PUSH
15750: LD_INT 36
15752: EQUAL
15753: IFFALSE 15763
// sTools := true ;
15755: LD_ADDR_EXP 88
15759: PUSH
15760: LD_INT 1
15762: ST_TO_ADDR
// if p3 = 101 then
15763: LD_VAR 0 3
15767: PUSH
15768: LD_INT 101
15770: EQUAL
15771: IFFALSE 15781
// sSold := true ;
15773: LD_ADDR_EXP 53
15777: PUSH
15778: LD_INT 1
15780: ST_TO_ADDR
// if p3 = 102 then
15781: LD_VAR 0 3
15785: PUSH
15786: LD_INT 102
15788: EQUAL
15789: IFFALSE 15799
// sDiff := true ;
15791: LD_ADDR_EXP 54
15795: PUSH
15796: LD_INT 1
15798: ST_TO_ADDR
// if p3 = 103 then
15799: LD_VAR 0 3
15803: PUSH
15804: LD_INT 103
15806: EQUAL
15807: IFFALSE 15817
// sFog := true ;
15809: LD_ADDR_EXP 57
15813: PUSH
15814: LD_INT 1
15816: ST_TO_ADDR
// if p3 = 104 then
15817: LD_VAR 0 3
15821: PUSH
15822: LD_INT 104
15824: EQUAL
15825: IFFALSE 15835
// sReset := true ;
15827: LD_ADDR_EXP 58
15831: PUSH
15832: LD_INT 1
15834: ST_TO_ADDR
// if p3 = 105 then
15835: LD_VAR 0 3
15839: PUSH
15840: LD_INT 105
15842: EQUAL
15843: IFFALSE 15853
// sSun := true ;
15845: LD_ADDR_EXP 59
15849: PUSH
15850: LD_INT 1
15852: ST_TO_ADDR
// if p3 = 106 then
15853: LD_VAR 0 3
15857: PUSH
15858: LD_INT 106
15860: EQUAL
15861: IFFALSE 15871
// sTiger := true ;
15863: LD_ADDR_EXP 55
15867: PUSH
15868: LD_INT 1
15870: ST_TO_ADDR
// if p3 = 107 then
15871: LD_VAR 0 3
15875: PUSH
15876: LD_INT 107
15878: EQUAL
15879: IFFALSE 15889
// sBomb := true ;
15881: LD_ADDR_EXP 56
15885: PUSH
15886: LD_INT 1
15888: ST_TO_ADDR
// if p3 = 108 then
15889: LD_VAR 0 3
15893: PUSH
15894: LD_INT 108
15896: EQUAL
15897: IFFALSE 15907
// sWound := true ;
15899: LD_ADDR_EXP 64
15903: PUSH
15904: LD_INT 1
15906: ST_TO_ADDR
// if p3 = 109 then
15907: LD_VAR 0 3
15911: PUSH
15912: LD_INT 109
15914: EQUAL
15915: IFFALSE 15925
// sBetray := true ;
15917: LD_ADDR_EXP 68
15921: PUSH
15922: LD_INT 1
15924: ST_TO_ADDR
// if p3 = 110 then
15925: LD_VAR 0 3
15929: PUSH
15930: LD_INT 110
15932: EQUAL
15933: IFFALSE 15943
// sContamin := true ;
15935: LD_ADDR_EXP 69
15939: PUSH
15940: LD_INT 1
15942: ST_TO_ADDR
// if p3 = 111 then
15943: LD_VAR 0 3
15947: PUSH
15948: LD_INT 111
15950: EQUAL
15951: IFFALSE 15961
// sOil := true ;
15953: LD_ADDR_EXP 71
15957: PUSH
15958: LD_INT 1
15960: ST_TO_ADDR
// if p3 = 112 then
15961: LD_VAR 0 3
15965: PUSH
15966: LD_INT 112
15968: EQUAL
15969: IFFALSE 15979
// sStu := true ;
15971: LD_ADDR_EXP 75
15975: PUSH
15976: LD_INT 1
15978: ST_TO_ADDR
// if p3 = 113 then
15979: LD_VAR 0 3
15983: PUSH
15984: LD_INT 113
15986: EQUAL
15987: IFFALSE 15997
// sBazooka := true ;
15989: LD_ADDR_EXP 78
15993: PUSH
15994: LD_INT 1
15996: ST_TO_ADDR
// if p3 = 114 then
15997: LD_VAR 0 3
16001: PUSH
16002: LD_INT 114
16004: EQUAL
16005: IFFALSE 16015
// sMortar := true ;
16007: LD_ADDR_EXP 79
16011: PUSH
16012: LD_INT 1
16014: ST_TO_ADDR
// if p3 = 115 then
16015: LD_VAR 0 3
16019: PUSH
16020: LD_INT 115
16022: EQUAL
16023: IFFALSE 16033
// sRanger := true ;
16025: LD_ADDR_EXP 89
16029: PUSH
16030: LD_INT 1
16032: ST_TO_ADDR
// if p3 = 116 then
16033: LD_VAR 0 3
16037: PUSH
16038: LD_INT 116
16040: EQUAL
16041: IFFALSE 16051
// sComputer := true ;
16043: LD_ADDR_EXP 90
16047: PUSH
16048: LD_INT 1
16050: ST_TO_ADDR
// if p3 = 117 then
16051: LD_VAR 0 3
16055: PUSH
16056: LD_INT 117
16058: EQUAL
16059: IFFALSE 16069
// s30 := true ;
16061: LD_ADDR_EXP 91
16065: PUSH
16066: LD_INT 1
16068: ST_TO_ADDR
// if p3 = 118 then
16069: LD_VAR 0 3
16073: PUSH
16074: LD_INT 118
16076: EQUAL
16077: IFFALSE 16087
// s60 := true ;
16079: LD_ADDR_EXP 92
16083: PUSH
16084: LD_INT 1
16086: ST_TO_ADDR
// end ; if p2 = 101 then
16087: LD_VAR 0 2
16091: PUSH
16092: LD_INT 101
16094: EQUAL
16095: IFFALSE 16223
// begin case p3 of 1 :
16097: LD_VAR 0 3
16101: PUSH
16102: LD_INT 1
16104: DOUBLE
16105: EQUAL
16106: IFTRUE 16110
16108: GO 16117
16110: POP
// hHackUnlimitedResources ; 2 :
16111: CALL 28321 0 0
16115: GO 16223
16117: LD_INT 2
16119: DOUBLE
16120: EQUAL
16121: IFTRUE 16125
16123: GO 16132
16125: POP
// hHackSetLevel10 ; 3 :
16126: CALL 28454 0 0
16130: GO 16223
16132: LD_INT 3
16134: DOUBLE
16135: EQUAL
16136: IFTRUE 16140
16138: GO 16147
16140: POP
// hHackSetLevel10YourUnits ; 4 :
16141: CALL 28539 0 0
16145: GO 16223
16147: LD_INT 4
16149: DOUBLE
16150: EQUAL
16151: IFTRUE 16155
16153: GO 16162
16155: POP
// hHackInvincible ; 5 :
16156: CALL 28987 0 0
16160: GO 16223
16162: LD_INT 5
16164: DOUBLE
16165: EQUAL
16166: IFTRUE 16170
16168: GO 16177
16170: POP
// hHackInvisible ; 6 :
16171: CALL 29098 0 0
16175: GO 16223
16177: LD_INT 6
16179: DOUBLE
16180: EQUAL
16181: IFTRUE 16185
16183: GO 16192
16185: POP
// hHackChangeYourSide ; 7 :
16186: CALL 29155 0 0
16190: GO 16223
16192: LD_INT 7
16194: DOUBLE
16195: EQUAL
16196: IFTRUE 16200
16198: GO 16207
16200: POP
// hHackChangeUnitSide ; 8 :
16201: CALL 29197 0 0
16205: GO 16223
16207: LD_INT 8
16209: DOUBLE
16210: EQUAL
16211: IFTRUE 16215
16213: GO 16222
16215: POP
// hHackFog ; end ;
16216: CALL 29298 0 0
16220: GO 16223
16222: POP
// end ; end ;
16223: LD_VAR 0 7
16227: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
16228: GO 16230
16230: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16231: LD_STRING initStreamRollete();
16233: PPUSH
16234: CALL_OW 559
// InitStreamMode ;
16238: CALL 16250 0 0
// DefineStreamItems ( false ) ;
16242: LD_INT 0
16244: PPUSH
16245: CALL 16714 0 1
// end ;
16249: END
// function InitStreamMode ; begin
16250: LD_INT 0
16252: PPUSH
// streamModeActive := false ;
16253: LD_ADDR_EXP 36
16257: PUSH
16258: LD_INT 0
16260: ST_TO_ADDR
// normalCounter := 36 ;
16261: LD_ADDR_EXP 37
16265: PUSH
16266: LD_INT 36
16268: ST_TO_ADDR
// hardcoreCounter := 18 ;
16269: LD_ADDR_EXP 38
16273: PUSH
16274: LD_INT 18
16276: ST_TO_ADDR
// sRocket := false ;
16277: LD_ADDR_EXP 41
16281: PUSH
16282: LD_INT 0
16284: ST_TO_ADDR
// sSpeed := false ;
16285: LD_ADDR_EXP 40
16289: PUSH
16290: LD_INT 0
16292: ST_TO_ADDR
// sEngine := false ;
16293: LD_ADDR_EXP 42
16297: PUSH
16298: LD_INT 0
16300: ST_TO_ADDR
// sSpec := false ;
16301: LD_ADDR_EXP 39
16305: PUSH
16306: LD_INT 0
16308: ST_TO_ADDR
// sLevel := false ;
16309: LD_ADDR_EXP 43
16313: PUSH
16314: LD_INT 0
16316: ST_TO_ADDR
// sArmoury := false ;
16317: LD_ADDR_EXP 44
16321: PUSH
16322: LD_INT 0
16324: ST_TO_ADDR
// sRadar := false ;
16325: LD_ADDR_EXP 45
16329: PUSH
16330: LD_INT 0
16332: ST_TO_ADDR
// sBunker := false ;
16333: LD_ADDR_EXP 46
16337: PUSH
16338: LD_INT 0
16340: ST_TO_ADDR
// sHack := false ;
16341: LD_ADDR_EXP 47
16345: PUSH
16346: LD_INT 0
16348: ST_TO_ADDR
// sFire := false ;
16349: LD_ADDR_EXP 48
16353: PUSH
16354: LD_INT 0
16356: ST_TO_ADDR
// sRefresh := false ;
16357: LD_ADDR_EXP 49
16361: PUSH
16362: LD_INT 0
16364: ST_TO_ADDR
// sExp := false ;
16365: LD_ADDR_EXP 50
16369: PUSH
16370: LD_INT 0
16372: ST_TO_ADDR
// sDepot := false ;
16373: LD_ADDR_EXP 51
16377: PUSH
16378: LD_INT 0
16380: ST_TO_ADDR
// sFlag := false ;
16381: LD_ADDR_EXP 52
16385: PUSH
16386: LD_INT 0
16388: ST_TO_ADDR
// sKamikadze := false ;
16389: LD_ADDR_EXP 60
16393: PUSH
16394: LD_INT 0
16396: ST_TO_ADDR
// sTroll := false ;
16397: LD_ADDR_EXP 61
16401: PUSH
16402: LD_INT 0
16404: ST_TO_ADDR
// sSlow := false ;
16405: LD_ADDR_EXP 62
16409: PUSH
16410: LD_INT 0
16412: ST_TO_ADDR
// sLack := false ;
16413: LD_ADDR_EXP 63
16417: PUSH
16418: LD_INT 0
16420: ST_TO_ADDR
// sTank := false ;
16421: LD_ADDR_EXP 65
16425: PUSH
16426: LD_INT 0
16428: ST_TO_ADDR
// sRemote := false ;
16429: LD_ADDR_EXP 66
16433: PUSH
16434: LD_INT 0
16436: ST_TO_ADDR
// sPowell := false ;
16437: LD_ADDR_EXP 67
16441: PUSH
16442: LD_INT 0
16444: ST_TO_ADDR
// sTeleport := false ;
16445: LD_ADDR_EXP 70
16449: PUSH
16450: LD_INT 0
16452: ST_TO_ADDR
// sOilTower := false ;
16453: LD_ADDR_EXP 72
16457: PUSH
16458: LD_INT 0
16460: ST_TO_ADDR
// sShovel := false ;
16461: LD_ADDR_EXP 73
16465: PUSH
16466: LD_INT 0
16468: ST_TO_ADDR
// sSheik := false ;
16469: LD_ADDR_EXP 74
16473: PUSH
16474: LD_INT 0
16476: ST_TO_ADDR
// sEarthquake := false ;
16477: LD_ADDR_EXP 76
16481: PUSH
16482: LD_INT 0
16484: ST_TO_ADDR
// sAI := false ;
16485: LD_ADDR_EXP 77
16489: PUSH
16490: LD_INT 0
16492: ST_TO_ADDR
// sCargo := false ;
16493: LD_ADDR_EXP 80
16497: PUSH
16498: LD_INT 0
16500: ST_TO_ADDR
// sDLaser := false ;
16501: LD_ADDR_EXP 81
16505: PUSH
16506: LD_INT 0
16508: ST_TO_ADDR
// sExchange := false ;
16509: LD_ADDR_EXP 82
16513: PUSH
16514: LD_INT 0
16516: ST_TO_ADDR
// sFac := false ;
16517: LD_ADDR_EXP 83
16521: PUSH
16522: LD_INT 0
16524: ST_TO_ADDR
// sPower := false ;
16525: LD_ADDR_EXP 84
16529: PUSH
16530: LD_INT 0
16532: ST_TO_ADDR
// sRandom := false ;
16533: LD_ADDR_EXP 85
16537: PUSH
16538: LD_INT 0
16540: ST_TO_ADDR
// sShield := false ;
16541: LD_ADDR_EXP 86
16545: PUSH
16546: LD_INT 0
16548: ST_TO_ADDR
// sTime := false ;
16549: LD_ADDR_EXP 87
16553: PUSH
16554: LD_INT 0
16556: ST_TO_ADDR
// sTools := false ;
16557: LD_ADDR_EXP 88
16561: PUSH
16562: LD_INT 0
16564: ST_TO_ADDR
// sSold := false ;
16565: LD_ADDR_EXP 53
16569: PUSH
16570: LD_INT 0
16572: ST_TO_ADDR
// sDiff := false ;
16573: LD_ADDR_EXP 54
16577: PUSH
16578: LD_INT 0
16580: ST_TO_ADDR
// sFog := false ;
16581: LD_ADDR_EXP 57
16585: PUSH
16586: LD_INT 0
16588: ST_TO_ADDR
// sReset := false ;
16589: LD_ADDR_EXP 58
16593: PUSH
16594: LD_INT 0
16596: ST_TO_ADDR
// sSun := false ;
16597: LD_ADDR_EXP 59
16601: PUSH
16602: LD_INT 0
16604: ST_TO_ADDR
// sTiger := false ;
16605: LD_ADDR_EXP 55
16609: PUSH
16610: LD_INT 0
16612: ST_TO_ADDR
// sBomb := false ;
16613: LD_ADDR_EXP 56
16617: PUSH
16618: LD_INT 0
16620: ST_TO_ADDR
// sWound := false ;
16621: LD_ADDR_EXP 64
16625: PUSH
16626: LD_INT 0
16628: ST_TO_ADDR
// sBetray := false ;
16629: LD_ADDR_EXP 68
16633: PUSH
16634: LD_INT 0
16636: ST_TO_ADDR
// sContamin := false ;
16637: LD_ADDR_EXP 69
16641: PUSH
16642: LD_INT 0
16644: ST_TO_ADDR
// sOil := false ;
16645: LD_ADDR_EXP 71
16649: PUSH
16650: LD_INT 0
16652: ST_TO_ADDR
// sStu := false ;
16653: LD_ADDR_EXP 75
16657: PUSH
16658: LD_INT 0
16660: ST_TO_ADDR
// sBazooka := false ;
16661: LD_ADDR_EXP 78
16665: PUSH
16666: LD_INT 0
16668: ST_TO_ADDR
// sMortar := false ;
16669: LD_ADDR_EXP 79
16673: PUSH
16674: LD_INT 0
16676: ST_TO_ADDR
// sRanger := false ;
16677: LD_ADDR_EXP 89
16681: PUSH
16682: LD_INT 0
16684: ST_TO_ADDR
// sComputer := false ;
16685: LD_ADDR_EXP 90
16689: PUSH
16690: LD_INT 0
16692: ST_TO_ADDR
// s30 := false ;
16693: LD_ADDR_EXP 91
16697: PUSH
16698: LD_INT 0
16700: ST_TO_ADDR
// s60 := false ;
16701: LD_ADDR_EXP 92
16705: PUSH
16706: LD_INT 0
16708: ST_TO_ADDR
// end ;
16709: LD_VAR 0 1
16713: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
16714: LD_INT 0
16716: PPUSH
16717: PPUSH
16718: PPUSH
16719: PPUSH
16720: PPUSH
16721: PPUSH
16722: PPUSH
// result := [ ] ;
16723: LD_ADDR_VAR 0 2
16727: PUSH
16728: EMPTY
16729: ST_TO_ADDR
// if campaign_id = 1 then
16730: LD_OWVAR 69
16734: PUSH
16735: LD_INT 1
16737: EQUAL
16738: IFFALSE 19904
// begin case mission_number of 1 :
16740: LD_OWVAR 70
16744: PUSH
16745: LD_INT 1
16747: DOUBLE
16748: EQUAL
16749: IFTRUE 16753
16751: GO 16829
16753: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
16754: LD_ADDR_VAR 0 2
16758: PUSH
16759: LD_INT 2
16761: PUSH
16762: LD_INT 4
16764: PUSH
16765: LD_INT 11
16767: PUSH
16768: LD_INT 12
16770: PUSH
16771: LD_INT 15
16773: PUSH
16774: LD_INT 16
16776: PUSH
16777: LD_INT 22
16779: PUSH
16780: LD_INT 23
16782: PUSH
16783: LD_INT 26
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: PUSH
16797: LD_INT 101
16799: PUSH
16800: LD_INT 102
16802: PUSH
16803: LD_INT 106
16805: PUSH
16806: LD_INT 116
16808: PUSH
16809: LD_INT 117
16811: PUSH
16812: LD_INT 118
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: ST_TO_ADDR
16827: GO 19902
16829: LD_INT 2
16831: DOUBLE
16832: EQUAL
16833: IFTRUE 16837
16835: GO 16921
16837: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
16838: LD_ADDR_VAR 0 2
16842: PUSH
16843: LD_INT 2
16845: PUSH
16846: LD_INT 4
16848: PUSH
16849: LD_INT 11
16851: PUSH
16852: LD_INT 12
16854: PUSH
16855: LD_INT 15
16857: PUSH
16858: LD_INT 16
16860: PUSH
16861: LD_INT 22
16863: PUSH
16864: LD_INT 23
16866: PUSH
16867: LD_INT 26
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: PUSH
16881: LD_INT 101
16883: PUSH
16884: LD_INT 102
16886: PUSH
16887: LD_INT 105
16889: PUSH
16890: LD_INT 106
16892: PUSH
16893: LD_INT 108
16895: PUSH
16896: LD_INT 116
16898: PUSH
16899: LD_INT 117
16901: PUSH
16902: LD_INT 118
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: ST_TO_ADDR
16919: GO 19902
16921: LD_INT 3
16923: DOUBLE
16924: EQUAL
16925: IFTRUE 16929
16927: GO 17017
16929: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
16930: LD_ADDR_VAR 0 2
16934: PUSH
16935: LD_INT 2
16937: PUSH
16938: LD_INT 4
16940: PUSH
16941: LD_INT 5
16943: PUSH
16944: LD_INT 11
16946: PUSH
16947: LD_INT 12
16949: PUSH
16950: LD_INT 15
16952: PUSH
16953: LD_INT 16
16955: PUSH
16956: LD_INT 22
16958: PUSH
16959: LD_INT 26
16961: PUSH
16962: LD_INT 36
16964: PUSH
16965: EMPTY
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: PUSH
16977: LD_INT 101
16979: PUSH
16980: LD_INT 102
16982: PUSH
16983: LD_INT 105
16985: PUSH
16986: LD_INT 106
16988: PUSH
16989: LD_INT 108
16991: PUSH
16992: LD_INT 116
16994: PUSH
16995: LD_INT 117
16997: PUSH
16998: LD_INT 118
17000: PUSH
17001: EMPTY
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: ST_TO_ADDR
17015: GO 19902
17017: LD_INT 4
17019: DOUBLE
17020: EQUAL
17021: IFTRUE 17025
17023: GO 17121
17025: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17026: LD_ADDR_VAR 0 2
17030: PUSH
17031: LD_INT 2
17033: PUSH
17034: LD_INT 4
17036: PUSH
17037: LD_INT 5
17039: PUSH
17040: LD_INT 8
17042: PUSH
17043: LD_INT 11
17045: PUSH
17046: LD_INT 12
17048: PUSH
17049: LD_INT 15
17051: PUSH
17052: LD_INT 16
17054: PUSH
17055: LD_INT 22
17057: PUSH
17058: LD_INT 23
17060: PUSH
17061: LD_INT 26
17063: PUSH
17064: LD_INT 36
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: PUSH
17081: LD_INT 101
17083: PUSH
17084: LD_INT 102
17086: PUSH
17087: LD_INT 105
17089: PUSH
17090: LD_INT 106
17092: PUSH
17093: LD_INT 108
17095: PUSH
17096: LD_INT 116
17098: PUSH
17099: LD_INT 117
17101: PUSH
17102: LD_INT 118
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: ST_TO_ADDR
17119: GO 19902
17121: LD_INT 5
17123: DOUBLE
17124: EQUAL
17125: IFTRUE 17129
17127: GO 17241
17129: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
17130: LD_ADDR_VAR 0 2
17134: PUSH
17135: LD_INT 2
17137: PUSH
17138: LD_INT 4
17140: PUSH
17141: LD_INT 5
17143: PUSH
17144: LD_INT 6
17146: PUSH
17147: LD_INT 8
17149: PUSH
17150: LD_INT 11
17152: PUSH
17153: LD_INT 12
17155: PUSH
17156: LD_INT 15
17158: PUSH
17159: LD_INT 16
17161: PUSH
17162: LD_INT 22
17164: PUSH
17165: LD_INT 23
17167: PUSH
17168: LD_INT 25
17170: PUSH
17171: LD_INT 26
17173: PUSH
17174: LD_INT 36
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: PUSH
17193: LD_INT 101
17195: PUSH
17196: LD_INT 102
17198: PUSH
17199: LD_INT 105
17201: PUSH
17202: LD_INT 106
17204: PUSH
17205: LD_INT 108
17207: PUSH
17208: LD_INT 109
17210: PUSH
17211: LD_INT 112
17213: PUSH
17214: LD_INT 116
17216: PUSH
17217: LD_INT 117
17219: PUSH
17220: LD_INT 118
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: ST_TO_ADDR
17239: GO 19902
17241: LD_INT 6
17243: DOUBLE
17244: EQUAL
17245: IFTRUE 17249
17247: GO 17381
17249: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
17250: LD_ADDR_VAR 0 2
17254: PUSH
17255: LD_INT 2
17257: PUSH
17258: LD_INT 4
17260: PUSH
17261: LD_INT 5
17263: PUSH
17264: LD_INT 6
17266: PUSH
17267: LD_INT 8
17269: PUSH
17270: LD_INT 11
17272: PUSH
17273: LD_INT 12
17275: PUSH
17276: LD_INT 15
17278: PUSH
17279: LD_INT 16
17281: PUSH
17282: LD_INT 20
17284: PUSH
17285: LD_INT 21
17287: PUSH
17288: LD_INT 22
17290: PUSH
17291: LD_INT 23
17293: PUSH
17294: LD_INT 25
17296: PUSH
17297: LD_INT 26
17299: PUSH
17300: LD_INT 30
17302: PUSH
17303: LD_INT 31
17305: PUSH
17306: LD_INT 32
17308: PUSH
17309: LD_INT 36
17311: PUSH
17312: EMPTY
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: PUSH
17333: LD_INT 101
17335: PUSH
17336: LD_INT 102
17338: PUSH
17339: LD_INT 105
17341: PUSH
17342: LD_INT 106
17344: PUSH
17345: LD_INT 108
17347: PUSH
17348: LD_INT 109
17350: PUSH
17351: LD_INT 112
17353: PUSH
17354: LD_INT 116
17356: PUSH
17357: LD_INT 117
17359: PUSH
17360: LD_INT 118
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: LIST
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: ST_TO_ADDR
17379: GO 19902
17381: LD_INT 7
17383: DOUBLE
17384: EQUAL
17385: IFTRUE 17389
17387: GO 17501
17389: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
17390: LD_ADDR_VAR 0 2
17394: PUSH
17395: LD_INT 2
17397: PUSH
17398: LD_INT 4
17400: PUSH
17401: LD_INT 5
17403: PUSH
17404: LD_INT 7
17406: PUSH
17407: LD_INT 11
17409: PUSH
17410: LD_INT 12
17412: PUSH
17413: LD_INT 15
17415: PUSH
17416: LD_INT 16
17418: PUSH
17419: LD_INT 20
17421: PUSH
17422: LD_INT 21
17424: PUSH
17425: LD_INT 22
17427: PUSH
17428: LD_INT 23
17430: PUSH
17431: LD_INT 25
17433: PUSH
17434: LD_INT 26
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: PUSH
17453: LD_INT 101
17455: PUSH
17456: LD_INT 102
17458: PUSH
17459: LD_INT 103
17461: PUSH
17462: LD_INT 105
17464: PUSH
17465: LD_INT 106
17467: PUSH
17468: LD_INT 108
17470: PUSH
17471: LD_INT 112
17473: PUSH
17474: LD_INT 116
17476: PUSH
17477: LD_INT 117
17479: PUSH
17480: LD_INT 118
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: ST_TO_ADDR
17499: GO 19902
17501: LD_INT 8
17503: DOUBLE
17504: EQUAL
17505: IFTRUE 17509
17507: GO 17649
17509: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
17510: LD_ADDR_VAR 0 2
17514: PUSH
17515: LD_INT 2
17517: PUSH
17518: LD_INT 4
17520: PUSH
17521: LD_INT 5
17523: PUSH
17524: LD_INT 6
17526: PUSH
17527: LD_INT 7
17529: PUSH
17530: LD_INT 8
17532: PUSH
17533: LD_INT 11
17535: PUSH
17536: LD_INT 12
17538: PUSH
17539: LD_INT 15
17541: PUSH
17542: LD_INT 16
17544: PUSH
17545: LD_INT 20
17547: PUSH
17548: LD_INT 21
17550: PUSH
17551: LD_INT 22
17553: PUSH
17554: LD_INT 23
17556: PUSH
17557: LD_INT 25
17559: PUSH
17560: LD_INT 26
17562: PUSH
17563: LD_INT 30
17565: PUSH
17566: LD_INT 31
17568: PUSH
17569: LD_INT 32
17571: PUSH
17572: LD_INT 36
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: PUSH
17597: LD_INT 101
17599: PUSH
17600: LD_INT 102
17602: PUSH
17603: LD_INT 103
17605: PUSH
17606: LD_INT 105
17608: PUSH
17609: LD_INT 106
17611: PUSH
17612: LD_INT 108
17614: PUSH
17615: LD_INT 109
17617: PUSH
17618: LD_INT 112
17620: PUSH
17621: LD_INT 116
17623: PUSH
17624: LD_INT 117
17626: PUSH
17627: LD_INT 118
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: PUSH
17643: EMPTY
17644: LIST
17645: LIST
17646: ST_TO_ADDR
17647: GO 19902
17649: LD_INT 9
17651: DOUBLE
17652: EQUAL
17653: IFTRUE 17657
17655: GO 17805
17657: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17658: LD_ADDR_VAR 0 2
17662: PUSH
17663: LD_INT 2
17665: PUSH
17666: LD_INT 4
17668: PUSH
17669: LD_INT 5
17671: PUSH
17672: LD_INT 6
17674: PUSH
17675: LD_INT 7
17677: PUSH
17678: LD_INT 8
17680: PUSH
17681: LD_INT 11
17683: PUSH
17684: LD_INT 12
17686: PUSH
17687: LD_INT 15
17689: PUSH
17690: LD_INT 16
17692: PUSH
17693: LD_INT 20
17695: PUSH
17696: LD_INT 21
17698: PUSH
17699: LD_INT 22
17701: PUSH
17702: LD_INT 23
17704: PUSH
17705: LD_INT 25
17707: PUSH
17708: LD_INT 26
17710: PUSH
17711: LD_INT 28
17713: PUSH
17714: LD_INT 30
17716: PUSH
17717: LD_INT 31
17719: PUSH
17720: LD_INT 32
17722: PUSH
17723: LD_INT 36
17725: PUSH
17726: EMPTY
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: PUSH
17749: LD_INT 101
17751: PUSH
17752: LD_INT 102
17754: PUSH
17755: LD_INT 103
17757: PUSH
17758: LD_INT 105
17760: PUSH
17761: LD_INT 106
17763: PUSH
17764: LD_INT 108
17766: PUSH
17767: LD_INT 109
17769: PUSH
17770: LD_INT 112
17772: PUSH
17773: LD_INT 114
17775: PUSH
17776: LD_INT 116
17778: PUSH
17779: LD_INT 117
17781: PUSH
17782: LD_INT 118
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: ST_TO_ADDR
17803: GO 19902
17805: LD_INT 10
17807: DOUBLE
17808: EQUAL
17809: IFTRUE 17813
17811: GO 18009
17813: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
17814: LD_ADDR_VAR 0 2
17818: PUSH
17819: LD_INT 2
17821: PUSH
17822: LD_INT 4
17824: PUSH
17825: LD_INT 5
17827: PUSH
17828: LD_INT 6
17830: PUSH
17831: LD_INT 7
17833: PUSH
17834: LD_INT 8
17836: PUSH
17837: LD_INT 9
17839: PUSH
17840: LD_INT 10
17842: PUSH
17843: LD_INT 11
17845: PUSH
17846: LD_INT 12
17848: PUSH
17849: LD_INT 13
17851: PUSH
17852: LD_INT 14
17854: PUSH
17855: LD_INT 15
17857: PUSH
17858: LD_INT 16
17860: PUSH
17861: LD_INT 17
17863: PUSH
17864: LD_INT 18
17866: PUSH
17867: LD_INT 19
17869: PUSH
17870: LD_INT 20
17872: PUSH
17873: LD_INT 21
17875: PUSH
17876: LD_INT 22
17878: PUSH
17879: LD_INT 23
17881: PUSH
17882: LD_INT 24
17884: PUSH
17885: LD_INT 25
17887: PUSH
17888: LD_INT 26
17890: PUSH
17891: LD_INT 28
17893: PUSH
17894: LD_INT 30
17896: PUSH
17897: LD_INT 31
17899: PUSH
17900: LD_INT 32
17902: PUSH
17903: LD_INT 36
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: PUSH
17937: LD_INT 101
17939: PUSH
17940: LD_INT 102
17942: PUSH
17943: LD_INT 103
17945: PUSH
17946: LD_INT 104
17948: PUSH
17949: LD_INT 105
17951: PUSH
17952: LD_INT 106
17954: PUSH
17955: LD_INT 107
17957: PUSH
17958: LD_INT 108
17960: PUSH
17961: LD_INT 109
17963: PUSH
17964: LD_INT 110
17966: PUSH
17967: LD_INT 111
17969: PUSH
17970: LD_INT 112
17972: PUSH
17973: LD_INT 114
17975: PUSH
17976: LD_INT 116
17978: PUSH
17979: LD_INT 117
17981: PUSH
17982: LD_INT 118
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: ST_TO_ADDR
18007: GO 19902
18009: LD_INT 11
18011: DOUBLE
18012: EQUAL
18013: IFTRUE 18017
18015: GO 18221
18017: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18018: LD_ADDR_VAR 0 2
18022: PUSH
18023: LD_INT 2
18025: PUSH
18026: LD_INT 3
18028: PUSH
18029: LD_INT 4
18031: PUSH
18032: LD_INT 5
18034: PUSH
18035: LD_INT 6
18037: PUSH
18038: LD_INT 7
18040: PUSH
18041: LD_INT 8
18043: PUSH
18044: LD_INT 9
18046: PUSH
18047: LD_INT 10
18049: PUSH
18050: LD_INT 11
18052: PUSH
18053: LD_INT 12
18055: PUSH
18056: LD_INT 13
18058: PUSH
18059: LD_INT 14
18061: PUSH
18062: LD_INT 15
18064: PUSH
18065: LD_INT 16
18067: PUSH
18068: LD_INT 17
18070: PUSH
18071: LD_INT 18
18073: PUSH
18074: LD_INT 19
18076: PUSH
18077: LD_INT 20
18079: PUSH
18080: LD_INT 21
18082: PUSH
18083: LD_INT 22
18085: PUSH
18086: LD_INT 23
18088: PUSH
18089: LD_INT 24
18091: PUSH
18092: LD_INT 25
18094: PUSH
18095: LD_INT 26
18097: PUSH
18098: LD_INT 28
18100: PUSH
18101: LD_INT 30
18103: PUSH
18104: LD_INT 31
18106: PUSH
18107: LD_INT 32
18109: PUSH
18110: LD_INT 34
18112: PUSH
18113: LD_INT 36
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 101
18151: PUSH
18152: LD_INT 102
18154: PUSH
18155: LD_INT 103
18157: PUSH
18158: LD_INT 104
18160: PUSH
18161: LD_INT 105
18163: PUSH
18164: LD_INT 106
18166: PUSH
18167: LD_INT 107
18169: PUSH
18170: LD_INT 108
18172: PUSH
18173: LD_INT 109
18175: PUSH
18176: LD_INT 110
18178: PUSH
18179: LD_INT 111
18181: PUSH
18182: LD_INT 112
18184: PUSH
18185: LD_INT 114
18187: PUSH
18188: LD_INT 116
18190: PUSH
18191: LD_INT 117
18193: PUSH
18194: LD_INT 118
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: ST_TO_ADDR
18219: GO 19902
18221: LD_INT 12
18223: DOUBLE
18224: EQUAL
18225: IFTRUE 18229
18227: GO 18449
18229: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18230: LD_ADDR_VAR 0 2
18234: PUSH
18235: LD_INT 1
18237: PUSH
18238: LD_INT 2
18240: PUSH
18241: LD_INT 3
18243: PUSH
18244: LD_INT 4
18246: PUSH
18247: LD_INT 5
18249: PUSH
18250: LD_INT 6
18252: PUSH
18253: LD_INT 7
18255: PUSH
18256: LD_INT 8
18258: PUSH
18259: LD_INT 9
18261: PUSH
18262: LD_INT 10
18264: PUSH
18265: LD_INT 11
18267: PUSH
18268: LD_INT 12
18270: PUSH
18271: LD_INT 13
18273: PUSH
18274: LD_INT 14
18276: PUSH
18277: LD_INT 15
18279: PUSH
18280: LD_INT 16
18282: PUSH
18283: LD_INT 17
18285: PUSH
18286: LD_INT 18
18288: PUSH
18289: LD_INT 19
18291: PUSH
18292: LD_INT 20
18294: PUSH
18295: LD_INT 21
18297: PUSH
18298: LD_INT 22
18300: PUSH
18301: LD_INT 23
18303: PUSH
18304: LD_INT 24
18306: PUSH
18307: LD_INT 25
18309: PUSH
18310: LD_INT 26
18312: PUSH
18313: LD_INT 27
18315: PUSH
18316: LD_INT 28
18318: PUSH
18319: LD_INT 30
18321: PUSH
18322: LD_INT 31
18324: PUSH
18325: LD_INT 32
18327: PUSH
18328: LD_INT 33
18330: PUSH
18331: LD_INT 34
18333: PUSH
18334: LD_INT 36
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: PUSH
18373: LD_INT 101
18375: PUSH
18376: LD_INT 102
18378: PUSH
18379: LD_INT 103
18381: PUSH
18382: LD_INT 104
18384: PUSH
18385: LD_INT 105
18387: PUSH
18388: LD_INT 106
18390: PUSH
18391: LD_INT 107
18393: PUSH
18394: LD_INT 108
18396: PUSH
18397: LD_INT 109
18399: PUSH
18400: LD_INT 110
18402: PUSH
18403: LD_INT 111
18405: PUSH
18406: LD_INT 112
18408: PUSH
18409: LD_INT 113
18411: PUSH
18412: LD_INT 114
18414: PUSH
18415: LD_INT 116
18417: PUSH
18418: LD_INT 117
18420: PUSH
18421: LD_INT 118
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: ST_TO_ADDR
18447: GO 19902
18449: LD_INT 13
18451: DOUBLE
18452: EQUAL
18453: IFTRUE 18457
18455: GO 18665
18457: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
18458: LD_ADDR_VAR 0 2
18462: PUSH
18463: LD_INT 1
18465: PUSH
18466: LD_INT 2
18468: PUSH
18469: LD_INT 3
18471: PUSH
18472: LD_INT 4
18474: PUSH
18475: LD_INT 5
18477: PUSH
18478: LD_INT 8
18480: PUSH
18481: LD_INT 9
18483: PUSH
18484: LD_INT 10
18486: PUSH
18487: LD_INT 11
18489: PUSH
18490: LD_INT 12
18492: PUSH
18493: LD_INT 14
18495: PUSH
18496: LD_INT 15
18498: PUSH
18499: LD_INT 16
18501: PUSH
18502: LD_INT 17
18504: PUSH
18505: LD_INT 18
18507: PUSH
18508: LD_INT 19
18510: PUSH
18511: LD_INT 20
18513: PUSH
18514: LD_INT 21
18516: PUSH
18517: LD_INT 22
18519: PUSH
18520: LD_INT 23
18522: PUSH
18523: LD_INT 24
18525: PUSH
18526: LD_INT 25
18528: PUSH
18529: LD_INT 26
18531: PUSH
18532: LD_INT 27
18534: PUSH
18535: LD_INT 28
18537: PUSH
18538: LD_INT 30
18540: PUSH
18541: LD_INT 31
18543: PUSH
18544: LD_INT 32
18546: PUSH
18547: LD_INT 33
18549: PUSH
18550: LD_INT 34
18552: PUSH
18553: LD_INT 36
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: PUSH
18589: LD_INT 101
18591: PUSH
18592: LD_INT 102
18594: PUSH
18595: LD_INT 103
18597: PUSH
18598: LD_INT 104
18600: PUSH
18601: LD_INT 105
18603: PUSH
18604: LD_INT 106
18606: PUSH
18607: LD_INT 107
18609: PUSH
18610: LD_INT 108
18612: PUSH
18613: LD_INT 109
18615: PUSH
18616: LD_INT 110
18618: PUSH
18619: LD_INT 111
18621: PUSH
18622: LD_INT 112
18624: PUSH
18625: LD_INT 113
18627: PUSH
18628: LD_INT 114
18630: PUSH
18631: LD_INT 116
18633: PUSH
18634: LD_INT 117
18636: PUSH
18637: LD_INT 118
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: ST_TO_ADDR
18663: GO 19902
18665: LD_INT 14
18667: DOUBLE
18668: EQUAL
18669: IFTRUE 18673
18671: GO 18897
18673: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18674: LD_ADDR_VAR 0 2
18678: PUSH
18679: LD_INT 1
18681: PUSH
18682: LD_INT 2
18684: PUSH
18685: LD_INT 3
18687: PUSH
18688: LD_INT 4
18690: PUSH
18691: LD_INT 5
18693: PUSH
18694: LD_INT 6
18696: PUSH
18697: LD_INT 7
18699: PUSH
18700: LD_INT 8
18702: PUSH
18703: LD_INT 9
18705: PUSH
18706: LD_INT 10
18708: PUSH
18709: LD_INT 11
18711: PUSH
18712: LD_INT 12
18714: PUSH
18715: LD_INT 13
18717: PUSH
18718: LD_INT 14
18720: PUSH
18721: LD_INT 15
18723: PUSH
18724: LD_INT 16
18726: PUSH
18727: LD_INT 17
18729: PUSH
18730: LD_INT 18
18732: PUSH
18733: LD_INT 19
18735: PUSH
18736: LD_INT 20
18738: PUSH
18739: LD_INT 21
18741: PUSH
18742: LD_INT 22
18744: PUSH
18745: LD_INT 23
18747: PUSH
18748: LD_INT 24
18750: PUSH
18751: LD_INT 25
18753: PUSH
18754: LD_INT 26
18756: PUSH
18757: LD_INT 27
18759: PUSH
18760: LD_INT 28
18762: PUSH
18763: LD_INT 29
18765: PUSH
18766: LD_INT 30
18768: PUSH
18769: LD_INT 31
18771: PUSH
18772: LD_INT 32
18774: PUSH
18775: LD_INT 33
18777: PUSH
18778: LD_INT 34
18780: PUSH
18781: LD_INT 36
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: LIST
18820: PUSH
18821: LD_INT 101
18823: PUSH
18824: LD_INT 102
18826: PUSH
18827: LD_INT 103
18829: PUSH
18830: LD_INT 104
18832: PUSH
18833: LD_INT 105
18835: PUSH
18836: LD_INT 106
18838: PUSH
18839: LD_INT 107
18841: PUSH
18842: LD_INT 108
18844: PUSH
18845: LD_INT 109
18847: PUSH
18848: LD_INT 110
18850: PUSH
18851: LD_INT 111
18853: PUSH
18854: LD_INT 112
18856: PUSH
18857: LD_INT 113
18859: PUSH
18860: LD_INT 114
18862: PUSH
18863: LD_INT 116
18865: PUSH
18866: LD_INT 117
18868: PUSH
18869: LD_INT 118
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: ST_TO_ADDR
18895: GO 19902
18897: LD_INT 15
18899: DOUBLE
18900: EQUAL
18901: IFTRUE 18905
18903: GO 19129
18905: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
18906: LD_ADDR_VAR 0 2
18910: PUSH
18911: LD_INT 1
18913: PUSH
18914: LD_INT 2
18916: PUSH
18917: LD_INT 3
18919: PUSH
18920: LD_INT 4
18922: PUSH
18923: LD_INT 5
18925: PUSH
18926: LD_INT 6
18928: PUSH
18929: LD_INT 7
18931: PUSH
18932: LD_INT 8
18934: PUSH
18935: LD_INT 9
18937: PUSH
18938: LD_INT 10
18940: PUSH
18941: LD_INT 11
18943: PUSH
18944: LD_INT 12
18946: PUSH
18947: LD_INT 13
18949: PUSH
18950: LD_INT 14
18952: PUSH
18953: LD_INT 15
18955: PUSH
18956: LD_INT 16
18958: PUSH
18959: LD_INT 17
18961: PUSH
18962: LD_INT 18
18964: PUSH
18965: LD_INT 19
18967: PUSH
18968: LD_INT 20
18970: PUSH
18971: LD_INT 21
18973: PUSH
18974: LD_INT 22
18976: PUSH
18977: LD_INT 23
18979: PUSH
18980: LD_INT 24
18982: PUSH
18983: LD_INT 25
18985: PUSH
18986: LD_INT 26
18988: PUSH
18989: LD_INT 27
18991: PUSH
18992: LD_INT 28
18994: PUSH
18995: LD_INT 29
18997: PUSH
18998: LD_INT 30
19000: PUSH
19001: LD_INT 31
19003: PUSH
19004: LD_INT 32
19006: PUSH
19007: LD_INT 33
19009: PUSH
19010: LD_INT 34
19012: PUSH
19013: LD_INT 36
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: PUSH
19053: LD_INT 101
19055: PUSH
19056: LD_INT 102
19058: PUSH
19059: LD_INT 103
19061: PUSH
19062: LD_INT 104
19064: PUSH
19065: LD_INT 105
19067: PUSH
19068: LD_INT 106
19070: PUSH
19071: LD_INT 107
19073: PUSH
19074: LD_INT 108
19076: PUSH
19077: LD_INT 109
19079: PUSH
19080: LD_INT 110
19082: PUSH
19083: LD_INT 111
19085: PUSH
19086: LD_INT 112
19088: PUSH
19089: LD_INT 113
19091: PUSH
19092: LD_INT 114
19094: PUSH
19095: LD_INT 116
19097: PUSH
19098: LD_INT 117
19100: PUSH
19101: LD_INT 118
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: ST_TO_ADDR
19127: GO 19902
19129: LD_INT 16
19131: DOUBLE
19132: EQUAL
19133: IFTRUE 19137
19135: GO 19273
19137: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19138: LD_ADDR_VAR 0 2
19142: PUSH
19143: LD_INT 2
19145: PUSH
19146: LD_INT 4
19148: PUSH
19149: LD_INT 5
19151: PUSH
19152: LD_INT 7
19154: PUSH
19155: LD_INT 11
19157: PUSH
19158: LD_INT 12
19160: PUSH
19161: LD_INT 15
19163: PUSH
19164: LD_INT 16
19166: PUSH
19167: LD_INT 20
19169: PUSH
19170: LD_INT 21
19172: PUSH
19173: LD_INT 22
19175: PUSH
19176: LD_INT 23
19178: PUSH
19179: LD_INT 25
19181: PUSH
19182: LD_INT 26
19184: PUSH
19185: LD_INT 30
19187: PUSH
19188: LD_INT 31
19190: PUSH
19191: LD_INT 32
19193: PUSH
19194: LD_INT 33
19196: PUSH
19197: LD_INT 34
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: PUSH
19221: LD_INT 101
19223: PUSH
19224: LD_INT 102
19226: PUSH
19227: LD_INT 103
19229: PUSH
19230: LD_INT 106
19232: PUSH
19233: LD_INT 108
19235: PUSH
19236: LD_INT 112
19238: PUSH
19239: LD_INT 113
19241: PUSH
19242: LD_INT 114
19244: PUSH
19245: LD_INT 116
19247: PUSH
19248: LD_INT 117
19250: PUSH
19251: LD_INT 118
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: ST_TO_ADDR
19271: GO 19902
19273: LD_INT 17
19275: DOUBLE
19276: EQUAL
19277: IFTRUE 19281
19279: GO 19505
19281: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
19282: LD_ADDR_VAR 0 2
19286: PUSH
19287: LD_INT 1
19289: PUSH
19290: LD_INT 2
19292: PUSH
19293: LD_INT 3
19295: PUSH
19296: LD_INT 4
19298: PUSH
19299: LD_INT 5
19301: PUSH
19302: LD_INT 6
19304: PUSH
19305: LD_INT 7
19307: PUSH
19308: LD_INT 8
19310: PUSH
19311: LD_INT 9
19313: PUSH
19314: LD_INT 10
19316: PUSH
19317: LD_INT 11
19319: PUSH
19320: LD_INT 12
19322: PUSH
19323: LD_INT 13
19325: PUSH
19326: LD_INT 14
19328: PUSH
19329: LD_INT 15
19331: PUSH
19332: LD_INT 16
19334: PUSH
19335: LD_INT 17
19337: PUSH
19338: LD_INT 18
19340: PUSH
19341: LD_INT 19
19343: PUSH
19344: LD_INT 20
19346: PUSH
19347: LD_INT 21
19349: PUSH
19350: LD_INT 22
19352: PUSH
19353: LD_INT 23
19355: PUSH
19356: LD_INT 24
19358: PUSH
19359: LD_INT 25
19361: PUSH
19362: LD_INT 26
19364: PUSH
19365: LD_INT 27
19367: PUSH
19368: LD_INT 28
19370: PUSH
19371: LD_INT 29
19373: PUSH
19374: LD_INT 30
19376: PUSH
19377: LD_INT 31
19379: PUSH
19380: LD_INT 32
19382: PUSH
19383: LD_INT 33
19385: PUSH
19386: LD_INT 34
19388: PUSH
19389: LD_INT 36
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 101
19431: PUSH
19432: LD_INT 102
19434: PUSH
19435: LD_INT 103
19437: PUSH
19438: LD_INT 104
19440: PUSH
19441: LD_INT 105
19443: PUSH
19444: LD_INT 106
19446: PUSH
19447: LD_INT 107
19449: PUSH
19450: LD_INT 108
19452: PUSH
19453: LD_INT 109
19455: PUSH
19456: LD_INT 110
19458: PUSH
19459: LD_INT 111
19461: PUSH
19462: LD_INT 112
19464: PUSH
19465: LD_INT 113
19467: PUSH
19468: LD_INT 114
19470: PUSH
19471: LD_INT 116
19473: PUSH
19474: LD_INT 117
19476: PUSH
19477: LD_INT 118
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: LIST
19495: LIST
19496: LIST
19497: LIST
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: ST_TO_ADDR
19503: GO 19902
19505: LD_INT 18
19507: DOUBLE
19508: EQUAL
19509: IFTRUE 19513
19511: GO 19661
19513: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
19514: LD_ADDR_VAR 0 2
19518: PUSH
19519: LD_INT 2
19521: PUSH
19522: LD_INT 4
19524: PUSH
19525: LD_INT 5
19527: PUSH
19528: LD_INT 7
19530: PUSH
19531: LD_INT 11
19533: PUSH
19534: LD_INT 12
19536: PUSH
19537: LD_INT 15
19539: PUSH
19540: LD_INT 16
19542: PUSH
19543: LD_INT 20
19545: PUSH
19546: LD_INT 21
19548: PUSH
19549: LD_INT 22
19551: PUSH
19552: LD_INT 23
19554: PUSH
19555: LD_INT 25
19557: PUSH
19558: LD_INT 26
19560: PUSH
19561: LD_INT 30
19563: PUSH
19564: LD_INT 31
19566: PUSH
19567: LD_INT 32
19569: PUSH
19570: LD_INT 33
19572: PUSH
19573: LD_INT 34
19575: PUSH
19576: LD_INT 35
19578: PUSH
19579: LD_INT 36
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: PUSH
19605: LD_INT 101
19607: PUSH
19608: LD_INT 102
19610: PUSH
19611: LD_INT 103
19613: PUSH
19614: LD_INT 106
19616: PUSH
19617: LD_INT 108
19619: PUSH
19620: LD_INT 112
19622: PUSH
19623: LD_INT 113
19625: PUSH
19626: LD_INT 114
19628: PUSH
19629: LD_INT 115
19631: PUSH
19632: LD_INT 116
19634: PUSH
19635: LD_INT 117
19637: PUSH
19638: LD_INT 118
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: ST_TO_ADDR
19659: GO 19902
19661: LD_INT 19
19663: DOUBLE
19664: EQUAL
19665: IFTRUE 19669
19667: GO 19901
19669: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19670: LD_ADDR_VAR 0 2
19674: PUSH
19675: LD_INT 1
19677: PUSH
19678: LD_INT 2
19680: PUSH
19681: LD_INT 3
19683: PUSH
19684: LD_INT 4
19686: PUSH
19687: LD_INT 5
19689: PUSH
19690: LD_INT 6
19692: PUSH
19693: LD_INT 7
19695: PUSH
19696: LD_INT 8
19698: PUSH
19699: LD_INT 9
19701: PUSH
19702: LD_INT 10
19704: PUSH
19705: LD_INT 11
19707: PUSH
19708: LD_INT 12
19710: PUSH
19711: LD_INT 13
19713: PUSH
19714: LD_INT 14
19716: PUSH
19717: LD_INT 15
19719: PUSH
19720: LD_INT 16
19722: PUSH
19723: LD_INT 17
19725: PUSH
19726: LD_INT 18
19728: PUSH
19729: LD_INT 19
19731: PUSH
19732: LD_INT 20
19734: PUSH
19735: LD_INT 21
19737: PUSH
19738: LD_INT 22
19740: PUSH
19741: LD_INT 23
19743: PUSH
19744: LD_INT 24
19746: PUSH
19747: LD_INT 25
19749: PUSH
19750: LD_INT 26
19752: PUSH
19753: LD_INT 27
19755: PUSH
19756: LD_INT 28
19758: PUSH
19759: LD_INT 29
19761: PUSH
19762: LD_INT 30
19764: PUSH
19765: LD_INT 31
19767: PUSH
19768: LD_INT 32
19770: PUSH
19771: LD_INT 33
19773: PUSH
19774: LD_INT 34
19776: PUSH
19777: LD_INT 35
19779: PUSH
19780: LD_INT 36
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: PUSH
19821: LD_INT 101
19823: PUSH
19824: LD_INT 102
19826: PUSH
19827: LD_INT 103
19829: PUSH
19830: LD_INT 104
19832: PUSH
19833: LD_INT 105
19835: PUSH
19836: LD_INT 106
19838: PUSH
19839: LD_INT 107
19841: PUSH
19842: LD_INT 108
19844: PUSH
19845: LD_INT 109
19847: PUSH
19848: LD_INT 110
19850: PUSH
19851: LD_INT 111
19853: PUSH
19854: LD_INT 112
19856: PUSH
19857: LD_INT 113
19859: PUSH
19860: LD_INT 114
19862: PUSH
19863: LD_INT 115
19865: PUSH
19866: LD_INT 116
19868: PUSH
19869: LD_INT 117
19871: PUSH
19872: LD_INT 118
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: ST_TO_ADDR
19899: GO 19902
19901: POP
// end else
19902: GO 20133
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
19904: LD_ADDR_VAR 0 2
19908: PUSH
19909: LD_INT 1
19911: PUSH
19912: LD_INT 2
19914: PUSH
19915: LD_INT 3
19917: PUSH
19918: LD_INT 4
19920: PUSH
19921: LD_INT 5
19923: PUSH
19924: LD_INT 6
19926: PUSH
19927: LD_INT 7
19929: PUSH
19930: LD_INT 8
19932: PUSH
19933: LD_INT 9
19935: PUSH
19936: LD_INT 10
19938: PUSH
19939: LD_INT 11
19941: PUSH
19942: LD_INT 12
19944: PUSH
19945: LD_INT 13
19947: PUSH
19948: LD_INT 14
19950: PUSH
19951: LD_INT 15
19953: PUSH
19954: LD_INT 16
19956: PUSH
19957: LD_INT 17
19959: PUSH
19960: LD_INT 18
19962: PUSH
19963: LD_INT 19
19965: PUSH
19966: LD_INT 20
19968: PUSH
19969: LD_INT 21
19971: PUSH
19972: LD_INT 22
19974: PUSH
19975: LD_INT 23
19977: PUSH
19978: LD_INT 24
19980: PUSH
19981: LD_INT 25
19983: PUSH
19984: LD_INT 26
19986: PUSH
19987: LD_INT 27
19989: PUSH
19990: LD_INT 28
19992: PUSH
19993: LD_INT 29
19995: PUSH
19996: LD_INT 30
19998: PUSH
19999: LD_INT 31
20001: PUSH
20002: LD_INT 32
20004: PUSH
20005: LD_INT 33
20007: PUSH
20008: LD_INT 34
20010: PUSH
20011: LD_INT 35
20013: PUSH
20014: LD_INT 36
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: PUSH
20055: LD_INT 101
20057: PUSH
20058: LD_INT 102
20060: PUSH
20061: LD_INT 103
20063: PUSH
20064: LD_INT 104
20066: PUSH
20067: LD_INT 105
20069: PUSH
20070: LD_INT 106
20072: PUSH
20073: LD_INT 107
20075: PUSH
20076: LD_INT 108
20078: PUSH
20079: LD_INT 109
20081: PUSH
20082: LD_INT 110
20084: PUSH
20085: LD_INT 111
20087: PUSH
20088: LD_INT 112
20090: PUSH
20091: LD_INT 113
20093: PUSH
20094: LD_INT 114
20096: PUSH
20097: LD_INT 115
20099: PUSH
20100: LD_INT 116
20102: PUSH
20103: LD_INT 117
20105: PUSH
20106: LD_INT 118
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: ST_TO_ADDR
// if result then
20133: LD_VAR 0 2
20137: IFFALSE 20923
// begin normal :=  ;
20139: LD_ADDR_VAR 0 5
20143: PUSH
20144: LD_STRING 
20146: ST_TO_ADDR
// hardcore :=  ;
20147: LD_ADDR_VAR 0 6
20151: PUSH
20152: LD_STRING 
20154: ST_TO_ADDR
// active :=  ;
20155: LD_ADDR_VAR 0 7
20159: PUSH
20160: LD_STRING 
20162: ST_TO_ADDR
// for i = 1 to normalCounter do
20163: LD_ADDR_VAR 0 8
20167: PUSH
20168: DOUBLE
20169: LD_INT 1
20171: DEC
20172: ST_TO_ADDR
20173: LD_EXP 37
20177: PUSH
20178: FOR_TO
20179: IFFALSE 20280
// begin tmp := 0 ;
20181: LD_ADDR_VAR 0 3
20185: PUSH
20186: LD_STRING 0
20188: ST_TO_ADDR
// if result [ 1 ] then
20189: LD_VAR 0 2
20193: PUSH
20194: LD_INT 1
20196: ARRAY
20197: IFFALSE 20262
// if result [ 1 ] [ 1 ] = i then
20199: LD_VAR 0 2
20203: PUSH
20204: LD_INT 1
20206: ARRAY
20207: PUSH
20208: LD_INT 1
20210: ARRAY
20211: PUSH
20212: LD_VAR 0 8
20216: EQUAL
20217: IFFALSE 20262
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20219: LD_ADDR_VAR 0 2
20223: PUSH
20224: LD_VAR 0 2
20228: PPUSH
20229: LD_INT 1
20231: PPUSH
20232: LD_VAR 0 2
20236: PUSH
20237: LD_INT 1
20239: ARRAY
20240: PPUSH
20241: LD_INT 1
20243: PPUSH
20244: CALL_OW 3
20248: PPUSH
20249: CALL_OW 1
20253: ST_TO_ADDR
// tmp := 1 ;
20254: LD_ADDR_VAR 0 3
20258: PUSH
20259: LD_STRING 1
20261: ST_TO_ADDR
// end ; normal := normal & tmp ;
20262: LD_ADDR_VAR 0 5
20266: PUSH
20267: LD_VAR 0 5
20271: PUSH
20272: LD_VAR 0 3
20276: STR
20277: ST_TO_ADDR
// end ;
20278: GO 20178
20280: POP
20281: POP
// for i = 1 to hardcoreCounter do
20282: LD_ADDR_VAR 0 8
20286: PUSH
20287: DOUBLE
20288: LD_INT 1
20290: DEC
20291: ST_TO_ADDR
20292: LD_EXP 38
20296: PUSH
20297: FOR_TO
20298: IFFALSE 20403
// begin tmp := 0 ;
20300: LD_ADDR_VAR 0 3
20304: PUSH
20305: LD_STRING 0
20307: ST_TO_ADDR
// if result [ 2 ] then
20308: LD_VAR 0 2
20312: PUSH
20313: LD_INT 2
20315: ARRAY
20316: IFFALSE 20385
// if result [ 2 ] [ 1 ] = 100 + i then
20318: LD_VAR 0 2
20322: PUSH
20323: LD_INT 2
20325: ARRAY
20326: PUSH
20327: LD_INT 1
20329: ARRAY
20330: PUSH
20331: LD_INT 100
20333: PUSH
20334: LD_VAR 0 8
20338: PLUS
20339: EQUAL
20340: IFFALSE 20385
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20342: LD_ADDR_VAR 0 2
20346: PUSH
20347: LD_VAR 0 2
20351: PPUSH
20352: LD_INT 2
20354: PPUSH
20355: LD_VAR 0 2
20359: PUSH
20360: LD_INT 2
20362: ARRAY
20363: PPUSH
20364: LD_INT 1
20366: PPUSH
20367: CALL_OW 3
20371: PPUSH
20372: CALL_OW 1
20376: ST_TO_ADDR
// tmp := 1 ;
20377: LD_ADDR_VAR 0 3
20381: PUSH
20382: LD_STRING 1
20384: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20385: LD_ADDR_VAR 0 6
20389: PUSH
20390: LD_VAR 0 6
20394: PUSH
20395: LD_VAR 0 3
20399: STR
20400: ST_TO_ADDR
// end ;
20401: GO 20297
20403: POP
20404: POP
// if isGameLoad then
20405: LD_VAR 0 1
20409: IFFALSE 20884
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
20411: LD_ADDR_VAR 0 4
20415: PUSH
20416: LD_EXP 41
20420: PUSH
20421: LD_EXP 40
20425: PUSH
20426: LD_EXP 42
20430: PUSH
20431: LD_EXP 39
20435: PUSH
20436: LD_EXP 43
20440: PUSH
20441: LD_EXP 44
20445: PUSH
20446: LD_EXP 45
20450: PUSH
20451: LD_EXP 46
20455: PUSH
20456: LD_EXP 47
20460: PUSH
20461: LD_EXP 48
20465: PUSH
20466: LD_EXP 49
20470: PUSH
20471: LD_EXP 50
20475: PUSH
20476: LD_EXP 51
20480: PUSH
20481: LD_EXP 52
20485: PUSH
20486: LD_EXP 60
20490: PUSH
20491: LD_EXP 61
20495: PUSH
20496: LD_EXP 62
20500: PUSH
20501: LD_EXP 63
20505: PUSH
20506: LD_EXP 65
20510: PUSH
20511: LD_EXP 66
20515: PUSH
20516: LD_EXP 67
20520: PUSH
20521: LD_EXP 70
20525: PUSH
20526: LD_EXP 72
20530: PUSH
20531: LD_EXP 73
20535: PUSH
20536: LD_EXP 74
20540: PUSH
20541: LD_EXP 76
20545: PUSH
20546: LD_EXP 77
20550: PUSH
20551: LD_EXP 80
20555: PUSH
20556: LD_EXP 81
20560: PUSH
20561: LD_EXP 82
20565: PUSH
20566: LD_EXP 83
20570: PUSH
20571: LD_EXP 84
20575: PUSH
20576: LD_EXP 85
20580: PUSH
20581: LD_EXP 86
20585: PUSH
20586: LD_EXP 87
20590: PUSH
20591: LD_EXP 88
20595: PUSH
20596: LD_EXP 53
20600: PUSH
20601: LD_EXP 54
20605: PUSH
20606: LD_EXP 57
20610: PUSH
20611: LD_EXP 58
20615: PUSH
20616: LD_EXP 59
20620: PUSH
20621: LD_EXP 55
20625: PUSH
20626: LD_EXP 56
20630: PUSH
20631: LD_EXP 64
20635: PUSH
20636: LD_EXP 68
20640: PUSH
20641: LD_EXP 69
20645: PUSH
20646: LD_EXP 71
20650: PUSH
20651: LD_EXP 75
20655: PUSH
20656: LD_EXP 78
20660: PUSH
20661: LD_EXP 79
20665: PUSH
20666: LD_EXP 89
20670: PUSH
20671: LD_EXP 90
20675: PUSH
20676: LD_EXP 91
20680: PUSH
20681: LD_EXP 92
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: ST_TO_ADDR
// tmp :=  ;
20742: LD_ADDR_VAR 0 3
20746: PUSH
20747: LD_STRING 
20749: ST_TO_ADDR
// for i = 1 to normalCounter do
20750: LD_ADDR_VAR 0 8
20754: PUSH
20755: DOUBLE
20756: LD_INT 1
20758: DEC
20759: ST_TO_ADDR
20760: LD_EXP 37
20764: PUSH
20765: FOR_TO
20766: IFFALSE 20802
// begin if flags [ i ] then
20768: LD_VAR 0 4
20772: PUSH
20773: LD_VAR 0 8
20777: ARRAY
20778: IFFALSE 20800
// tmp := tmp & i & ; ;
20780: LD_ADDR_VAR 0 3
20784: PUSH
20785: LD_VAR 0 3
20789: PUSH
20790: LD_VAR 0 8
20794: STR
20795: PUSH
20796: LD_STRING ;
20798: STR
20799: ST_TO_ADDR
// end ;
20800: GO 20765
20802: POP
20803: POP
// for i = 1 to hardcoreCounter do
20804: LD_ADDR_VAR 0 8
20808: PUSH
20809: DOUBLE
20810: LD_INT 1
20812: DEC
20813: ST_TO_ADDR
20814: LD_EXP 38
20818: PUSH
20819: FOR_TO
20820: IFFALSE 20866
// begin if flags [ normalCounter + i ] then
20822: LD_VAR 0 4
20826: PUSH
20827: LD_EXP 37
20831: PUSH
20832: LD_VAR 0 8
20836: PLUS
20837: ARRAY
20838: IFFALSE 20864
// tmp := tmp & ( 100 + i ) & ; ;
20840: LD_ADDR_VAR 0 3
20844: PUSH
20845: LD_VAR 0 3
20849: PUSH
20850: LD_INT 100
20852: PUSH
20853: LD_VAR 0 8
20857: PLUS
20858: STR
20859: PUSH
20860: LD_STRING ;
20862: STR
20863: ST_TO_ADDR
// end ;
20864: GO 20819
20866: POP
20867: POP
// if tmp then
20868: LD_VAR 0 3
20872: IFFALSE 20884
// active := tmp ;
20874: LD_ADDR_VAR 0 7
20878: PUSH
20879: LD_VAR 0 3
20883: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
20884: LD_STRING getStreamItemsFromMission("
20886: PUSH
20887: LD_VAR 0 5
20891: STR
20892: PUSH
20893: LD_STRING ","
20895: STR
20896: PUSH
20897: LD_VAR 0 6
20901: STR
20902: PUSH
20903: LD_STRING ","
20905: STR
20906: PUSH
20907: LD_VAR 0 7
20911: STR
20912: PUSH
20913: LD_STRING ")
20915: STR
20916: PPUSH
20917: CALL_OW 559
// end else
20921: GO 20930
// ToLua ( getStreamItemsFromMission("","","") ) ;
20923: LD_STRING getStreamItemsFromMission("","","")
20925: PPUSH
20926: CALL_OW 559
// end ;
20930: LD_VAR 0 2
20934: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20935: LD_EXP 36
20939: PUSH
20940: LD_EXP 41
20944: AND
20945: IFFALSE 21069
20947: GO 20949
20949: DISABLE
20950: LD_INT 0
20952: PPUSH
20953: PPUSH
// begin enable ;
20954: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20955: LD_ADDR_VAR 0 2
20959: PUSH
20960: LD_INT 22
20962: PUSH
20963: LD_OWVAR 2
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 2
20974: PUSH
20975: LD_INT 34
20977: PUSH
20978: LD_INT 7
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 34
20987: PUSH
20988: LD_INT 45
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: PUSH
20995: LD_INT 34
20997: PUSH
20998: LD_INT 28
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: LD_INT 34
21007: PUSH
21008: LD_INT 47
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PPUSH
21026: CALL_OW 69
21030: ST_TO_ADDR
// if not tmp then
21031: LD_VAR 0 2
21035: NOT
21036: IFFALSE 21040
// exit ;
21038: GO 21069
// for i in tmp do
21040: LD_ADDR_VAR 0 1
21044: PUSH
21045: LD_VAR 0 2
21049: PUSH
21050: FOR_IN
21051: IFFALSE 21067
// begin SetLives ( i , 0 ) ;
21053: LD_VAR 0 1
21057: PPUSH
21058: LD_INT 0
21060: PPUSH
21061: CALL_OW 234
// end ;
21065: GO 21050
21067: POP
21068: POP
// end ;
21069: PPOPN 2
21071: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21072: LD_EXP 36
21076: PUSH
21077: LD_EXP 42
21081: AND
21082: IFFALSE 21166
21084: GO 21086
21086: DISABLE
21087: LD_INT 0
21089: PPUSH
21090: PPUSH
// begin enable ;
21091: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21092: LD_ADDR_VAR 0 2
21096: PUSH
21097: LD_INT 22
21099: PUSH
21100: LD_OWVAR 2
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 32
21111: PUSH
21112: LD_INT 3
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PPUSH
21123: CALL_OW 69
21127: ST_TO_ADDR
// if not tmp then
21128: LD_VAR 0 2
21132: NOT
21133: IFFALSE 21137
// exit ;
21135: GO 21166
// for i in tmp do
21137: LD_ADDR_VAR 0 1
21141: PUSH
21142: LD_VAR 0 2
21146: PUSH
21147: FOR_IN
21148: IFFALSE 21164
// begin SetLives ( i , 0 ) ;
21150: LD_VAR 0 1
21154: PPUSH
21155: LD_INT 0
21157: PPUSH
21158: CALL_OW 234
// end ;
21162: GO 21147
21164: POP
21165: POP
// end ;
21166: PPOPN 2
21168: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21169: LD_EXP 36
21173: PUSH
21174: LD_EXP 39
21178: AND
21179: IFFALSE 21272
21181: GO 21183
21183: DISABLE
21184: LD_INT 0
21186: PPUSH
// begin enable ;
21187: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21188: LD_ADDR_VAR 0 1
21192: PUSH
21193: LD_INT 22
21195: PUSH
21196: LD_OWVAR 2
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 2
21207: PUSH
21208: LD_INT 25
21210: PUSH
21211: LD_INT 5
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: PUSH
21218: LD_INT 25
21220: PUSH
21221: LD_INT 9
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: PUSH
21228: LD_INT 25
21230: PUSH
21231: LD_INT 8
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PPUSH
21248: CALL_OW 69
21252: PUSH
21253: FOR_IN
21254: IFFALSE 21270
// begin SetClass ( i , 1 ) ;
21256: LD_VAR 0 1
21260: PPUSH
21261: LD_INT 1
21263: PPUSH
21264: CALL_OW 336
// end ;
21268: GO 21253
21270: POP
21271: POP
// end ;
21272: PPOPN 1
21274: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21275: LD_EXP 36
21279: PUSH
21280: LD_EXP 40
21284: AND
21285: PUSH
21286: LD_OWVAR 65
21290: PUSH
21291: LD_INT 7
21293: LESS
21294: AND
21295: IFFALSE 21309
21297: GO 21299
21299: DISABLE
// begin enable ;
21300: ENABLE
// game_speed := 7 ;
21301: LD_ADDR_OWVAR 65
21305: PUSH
21306: LD_INT 7
21308: ST_TO_ADDR
// end ;
21309: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21310: LD_EXP 36
21314: PUSH
21315: LD_EXP 43
21319: AND
21320: IFFALSE 21522
21322: GO 21324
21324: DISABLE
21325: LD_INT 0
21327: PPUSH
21328: PPUSH
21329: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21330: LD_ADDR_VAR 0 3
21334: PUSH
21335: LD_INT 81
21337: PUSH
21338: LD_OWVAR 2
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PUSH
21347: LD_INT 21
21349: PUSH
21350: LD_INT 1
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PPUSH
21361: CALL_OW 69
21365: ST_TO_ADDR
// if not tmp then
21366: LD_VAR 0 3
21370: NOT
21371: IFFALSE 21375
// exit ;
21373: GO 21522
// if tmp > 5 then
21375: LD_VAR 0 3
21379: PUSH
21380: LD_INT 5
21382: GREATER
21383: IFFALSE 21395
// k := 5 else
21385: LD_ADDR_VAR 0 2
21389: PUSH
21390: LD_INT 5
21392: ST_TO_ADDR
21393: GO 21405
// k := tmp ;
21395: LD_ADDR_VAR 0 2
21399: PUSH
21400: LD_VAR 0 3
21404: ST_TO_ADDR
// for i := 1 to k do
21405: LD_ADDR_VAR 0 1
21409: PUSH
21410: DOUBLE
21411: LD_INT 1
21413: DEC
21414: ST_TO_ADDR
21415: LD_VAR 0 2
21419: PUSH
21420: FOR_TO
21421: IFFALSE 21520
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21423: LD_VAR 0 3
21427: PUSH
21428: LD_VAR 0 1
21432: ARRAY
21433: PPUSH
21434: LD_VAR 0 1
21438: PUSH
21439: LD_INT 4
21441: MOD
21442: PUSH
21443: LD_INT 1
21445: PLUS
21446: PPUSH
21447: CALL_OW 259
21451: PUSH
21452: LD_INT 10
21454: LESS
21455: IFFALSE 21518
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21457: LD_VAR 0 3
21461: PUSH
21462: LD_VAR 0 1
21466: ARRAY
21467: PPUSH
21468: LD_VAR 0 1
21472: PUSH
21473: LD_INT 4
21475: MOD
21476: PUSH
21477: LD_INT 1
21479: PLUS
21480: PPUSH
21481: LD_VAR 0 3
21485: PUSH
21486: LD_VAR 0 1
21490: ARRAY
21491: PPUSH
21492: LD_VAR 0 1
21496: PUSH
21497: LD_INT 4
21499: MOD
21500: PUSH
21501: LD_INT 1
21503: PLUS
21504: PPUSH
21505: CALL_OW 259
21509: PUSH
21510: LD_INT 1
21512: PLUS
21513: PPUSH
21514: CALL_OW 237
21518: GO 21420
21520: POP
21521: POP
// end ;
21522: PPOPN 3
21524: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21525: LD_EXP 36
21529: PUSH
21530: LD_EXP 44
21534: AND
21535: IFFALSE 21555
21537: GO 21539
21539: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21540: LD_INT 4
21542: PPUSH
21543: LD_OWVAR 2
21547: PPUSH
21548: LD_INT 0
21550: PPUSH
21551: CALL_OW 324
21555: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21556: LD_EXP 36
21560: PUSH
21561: LD_EXP 73
21565: AND
21566: IFFALSE 21586
21568: GO 21570
21570: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21571: LD_INT 19
21573: PPUSH
21574: LD_OWVAR 2
21578: PPUSH
21579: LD_INT 0
21581: PPUSH
21582: CALL_OW 324
21586: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21587: LD_EXP 36
21591: PUSH
21592: LD_EXP 45
21596: AND
21597: IFFALSE 21699
21599: GO 21601
21601: DISABLE
21602: LD_INT 0
21604: PPUSH
21605: PPUSH
// begin enable ;
21606: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21607: LD_ADDR_VAR 0 2
21611: PUSH
21612: LD_INT 22
21614: PUSH
21615: LD_OWVAR 2
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 2
21626: PUSH
21627: LD_INT 34
21629: PUSH
21630: LD_INT 11
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: PUSH
21637: LD_INT 34
21639: PUSH
21640: LD_INT 30
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: LIST
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: PPUSH
21656: CALL_OW 69
21660: ST_TO_ADDR
// if not tmp then
21661: LD_VAR 0 2
21665: NOT
21666: IFFALSE 21670
// exit ;
21668: GO 21699
// for i in tmp do
21670: LD_ADDR_VAR 0 1
21674: PUSH
21675: LD_VAR 0 2
21679: PUSH
21680: FOR_IN
21681: IFFALSE 21697
// begin SetLives ( i , 0 ) ;
21683: LD_VAR 0 1
21687: PPUSH
21688: LD_INT 0
21690: PPUSH
21691: CALL_OW 234
// end ;
21695: GO 21680
21697: POP
21698: POP
// end ;
21699: PPOPN 2
21701: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21702: LD_EXP 36
21706: PUSH
21707: LD_EXP 46
21711: AND
21712: IFFALSE 21732
21714: GO 21716
21716: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21717: LD_INT 32
21719: PPUSH
21720: LD_OWVAR 2
21724: PPUSH
21725: LD_INT 0
21727: PPUSH
21728: CALL_OW 324
21732: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21733: LD_EXP 36
21737: PUSH
21738: LD_EXP 47
21742: AND
21743: IFFALSE 21924
21745: GO 21747
21747: DISABLE
21748: LD_INT 0
21750: PPUSH
21751: PPUSH
21752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21753: LD_ADDR_VAR 0 2
21757: PUSH
21758: LD_INT 22
21760: PUSH
21761: LD_OWVAR 2
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: LD_INT 33
21772: PUSH
21773: LD_INT 3
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PPUSH
21784: CALL_OW 69
21788: ST_TO_ADDR
// if not tmp then
21789: LD_VAR 0 2
21793: NOT
21794: IFFALSE 21798
// exit ;
21796: GO 21924
// side := 0 ;
21798: LD_ADDR_VAR 0 3
21802: PUSH
21803: LD_INT 0
21805: ST_TO_ADDR
// for i := 1 to 8 do
21806: LD_ADDR_VAR 0 1
21810: PUSH
21811: DOUBLE
21812: LD_INT 1
21814: DEC
21815: ST_TO_ADDR
21816: LD_INT 8
21818: PUSH
21819: FOR_TO
21820: IFFALSE 21868
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21822: LD_OWVAR 2
21826: PUSH
21827: LD_VAR 0 1
21831: NONEQUAL
21832: PUSH
21833: LD_OWVAR 2
21837: PPUSH
21838: LD_VAR 0 1
21842: PPUSH
21843: CALL_OW 81
21847: PUSH
21848: LD_INT 2
21850: EQUAL
21851: AND
21852: IFFALSE 21866
// begin side := i ;
21854: LD_ADDR_VAR 0 3
21858: PUSH
21859: LD_VAR 0 1
21863: ST_TO_ADDR
// break ;
21864: GO 21868
// end ;
21866: GO 21819
21868: POP
21869: POP
// if not side then
21870: LD_VAR 0 3
21874: NOT
21875: IFFALSE 21879
// exit ;
21877: GO 21924
// for i := 1 to tmp do
21879: LD_ADDR_VAR 0 1
21883: PUSH
21884: DOUBLE
21885: LD_INT 1
21887: DEC
21888: ST_TO_ADDR
21889: LD_VAR 0 2
21893: PUSH
21894: FOR_TO
21895: IFFALSE 21922
// if Prob ( 60 ) then
21897: LD_INT 60
21899: PPUSH
21900: CALL_OW 13
21904: IFFALSE 21920
// SetSide ( i , side ) ;
21906: LD_VAR 0 1
21910: PPUSH
21911: LD_VAR 0 3
21915: PPUSH
21916: CALL_OW 235
21920: GO 21894
21922: POP
21923: POP
// end ;
21924: PPOPN 3
21926: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21927: LD_EXP 36
21931: PUSH
21932: LD_EXP 49
21936: AND
21937: IFFALSE 22056
21939: GO 21941
21941: DISABLE
21942: LD_INT 0
21944: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21945: LD_ADDR_VAR 0 1
21949: PUSH
21950: LD_INT 22
21952: PUSH
21953: LD_OWVAR 2
21957: PUSH
21958: EMPTY
21959: LIST
21960: LIST
21961: PUSH
21962: LD_INT 21
21964: PUSH
21965: LD_INT 1
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PUSH
21972: LD_INT 3
21974: PUSH
21975: LD_INT 23
21977: PUSH
21978: LD_INT 0
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: LIST
21993: PPUSH
21994: CALL_OW 69
21998: PUSH
21999: FOR_IN
22000: IFFALSE 22054
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22002: LD_VAR 0 1
22006: PPUSH
22007: CALL_OW 257
22011: PUSH
22012: LD_INT 1
22014: PUSH
22015: LD_INT 2
22017: PUSH
22018: LD_INT 3
22020: PUSH
22021: LD_INT 4
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: IN
22030: IFFALSE 22052
// SetClass ( un , rand ( 1 , 4 ) ) ;
22032: LD_VAR 0 1
22036: PPUSH
22037: LD_INT 1
22039: PPUSH
22040: LD_INT 4
22042: PPUSH
22043: CALL_OW 12
22047: PPUSH
22048: CALL_OW 336
22052: GO 21999
22054: POP
22055: POP
// end ;
22056: PPOPN 1
22058: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22059: LD_EXP 36
22063: PUSH
22064: LD_EXP 48
22068: AND
22069: IFFALSE 22148
22071: GO 22073
22073: DISABLE
22074: LD_INT 0
22076: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22077: LD_ADDR_VAR 0 1
22081: PUSH
22082: LD_INT 22
22084: PUSH
22085: LD_OWVAR 2
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: PUSH
22094: LD_INT 21
22096: PUSH
22097: LD_INT 3
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PPUSH
22108: CALL_OW 69
22112: ST_TO_ADDR
// if not tmp then
22113: LD_VAR 0 1
22117: NOT
22118: IFFALSE 22122
// exit ;
22120: GO 22148
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22122: LD_VAR 0 1
22126: PUSH
22127: LD_INT 1
22129: PPUSH
22130: LD_VAR 0 1
22134: PPUSH
22135: CALL_OW 12
22139: ARRAY
22140: PPUSH
22141: LD_INT 100
22143: PPUSH
22144: CALL_OW 234
// end ;
22148: PPOPN 1
22150: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22151: LD_EXP 36
22155: PUSH
22156: LD_EXP 50
22160: AND
22161: IFFALSE 22259
22163: GO 22165
22165: DISABLE
22166: LD_INT 0
22168: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22169: LD_ADDR_VAR 0 1
22173: PUSH
22174: LD_INT 22
22176: PUSH
22177: LD_OWVAR 2
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 21
22188: PUSH
22189: LD_INT 1
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: PPUSH
22200: CALL_OW 69
22204: ST_TO_ADDR
// if not tmp then
22205: LD_VAR 0 1
22209: NOT
22210: IFFALSE 22214
// exit ;
22212: GO 22259
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22214: LD_VAR 0 1
22218: PUSH
22219: LD_INT 1
22221: PPUSH
22222: LD_VAR 0 1
22226: PPUSH
22227: CALL_OW 12
22231: ARRAY
22232: PPUSH
22233: LD_INT 1
22235: PPUSH
22236: LD_INT 4
22238: PPUSH
22239: CALL_OW 12
22243: PPUSH
22244: LD_INT 3000
22246: PPUSH
22247: LD_INT 9000
22249: PPUSH
22250: CALL_OW 12
22254: PPUSH
22255: CALL_OW 492
// end ;
22259: PPOPN 1
22261: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22262: LD_EXP 36
22266: PUSH
22267: LD_EXP 51
22271: AND
22272: IFFALSE 22292
22274: GO 22276
22276: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22277: LD_INT 1
22279: PPUSH
22280: LD_OWVAR 2
22284: PPUSH
22285: LD_INT 0
22287: PPUSH
22288: CALL_OW 324
22292: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22293: LD_EXP 36
22297: PUSH
22298: LD_EXP 52
22302: AND
22303: IFFALSE 22386
22305: GO 22307
22307: DISABLE
22308: LD_INT 0
22310: PPUSH
22311: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22312: LD_ADDR_VAR 0 2
22316: PUSH
22317: LD_INT 22
22319: PUSH
22320: LD_OWVAR 2
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: LD_INT 21
22331: PUSH
22332: LD_INT 3
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PPUSH
22343: CALL_OW 69
22347: ST_TO_ADDR
// if not tmp then
22348: LD_VAR 0 2
22352: NOT
22353: IFFALSE 22357
// exit ;
22355: GO 22386
// for i in tmp do
22357: LD_ADDR_VAR 0 1
22361: PUSH
22362: LD_VAR 0 2
22366: PUSH
22367: FOR_IN
22368: IFFALSE 22384
// SetBLevel ( i , 10 ) ;
22370: LD_VAR 0 1
22374: PPUSH
22375: LD_INT 10
22377: PPUSH
22378: CALL_OW 241
22382: GO 22367
22384: POP
22385: POP
// end ;
22386: PPOPN 2
22388: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22389: LD_EXP 36
22393: PUSH
22394: LD_EXP 53
22398: AND
22399: IFFALSE 22510
22401: GO 22403
22403: DISABLE
22404: LD_INT 0
22406: PPUSH
22407: PPUSH
22408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22409: LD_ADDR_VAR 0 3
22413: PUSH
22414: LD_INT 22
22416: PUSH
22417: LD_OWVAR 2
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PUSH
22426: LD_INT 25
22428: PUSH
22429: LD_INT 1
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PPUSH
22440: CALL_OW 69
22444: ST_TO_ADDR
// if not tmp then
22445: LD_VAR 0 3
22449: NOT
22450: IFFALSE 22454
// exit ;
22452: GO 22510
// un := tmp [ rand ( 1 , tmp ) ] ;
22454: LD_ADDR_VAR 0 2
22458: PUSH
22459: LD_VAR 0 3
22463: PUSH
22464: LD_INT 1
22466: PPUSH
22467: LD_VAR 0 3
22471: PPUSH
22472: CALL_OW 12
22476: ARRAY
22477: ST_TO_ADDR
// if Crawls ( un ) then
22478: LD_VAR 0 2
22482: PPUSH
22483: CALL_OW 318
22487: IFFALSE 22498
// ComWalk ( un ) ;
22489: LD_VAR 0 2
22493: PPUSH
22494: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22498: LD_VAR 0 2
22502: PPUSH
22503: LD_INT 5
22505: PPUSH
22506: CALL_OW 336
// end ;
22510: PPOPN 3
22512: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
22513: LD_EXP 36
22517: PUSH
22518: LD_EXP 54
22522: AND
22523: PUSH
22524: LD_OWVAR 67
22528: PUSH
22529: LD_INT 4
22531: LESS
22532: AND
22533: IFFALSE 22552
22535: GO 22537
22537: DISABLE
// begin Difficulty := Difficulty + 1 ;
22538: LD_ADDR_OWVAR 67
22542: PUSH
22543: LD_OWVAR 67
22547: PUSH
22548: LD_INT 1
22550: PLUS
22551: ST_TO_ADDR
// end ;
22552: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22553: LD_EXP 36
22557: PUSH
22558: LD_EXP 55
22562: AND
22563: IFFALSE 22666
22565: GO 22567
22567: DISABLE
22568: LD_INT 0
22570: PPUSH
// begin for i := 1 to 5 do
22571: LD_ADDR_VAR 0 1
22575: PUSH
22576: DOUBLE
22577: LD_INT 1
22579: DEC
22580: ST_TO_ADDR
22581: LD_INT 5
22583: PUSH
22584: FOR_TO
22585: IFFALSE 22664
// begin uc_nation := nation_nature ;
22587: LD_ADDR_OWVAR 21
22591: PUSH
22592: LD_INT 0
22594: ST_TO_ADDR
// uc_side := 0 ;
22595: LD_ADDR_OWVAR 20
22599: PUSH
22600: LD_INT 0
22602: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22603: LD_ADDR_OWVAR 29
22607: PUSH
22608: LD_INT 12
22610: PUSH
22611: LD_INT 12
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: ST_TO_ADDR
// hc_agressivity := 20 ;
22618: LD_ADDR_OWVAR 35
22622: PUSH
22623: LD_INT 20
22625: ST_TO_ADDR
// hc_class := class_tiger ;
22626: LD_ADDR_OWVAR 28
22630: PUSH
22631: LD_INT 14
22633: ST_TO_ADDR
// hc_gallery :=  ;
22634: LD_ADDR_OWVAR 33
22638: PUSH
22639: LD_STRING 
22641: ST_TO_ADDR
// hc_name :=  ;
22642: LD_ADDR_OWVAR 26
22646: PUSH
22647: LD_STRING 
22649: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22650: CALL_OW 44
22654: PPUSH
22655: LD_INT 0
22657: PPUSH
22658: CALL_OW 51
// end ;
22662: GO 22584
22664: POP
22665: POP
// end ;
22666: PPOPN 1
22668: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22669: LD_EXP 36
22673: PUSH
22674: LD_EXP 56
22678: AND
22679: IFFALSE 22688
22681: GO 22683
22683: DISABLE
// StreamSibBomb ;
22684: CALL 22689 0 0
22688: END
// export function StreamSibBomb ; var i , x , y ; begin
22689: LD_INT 0
22691: PPUSH
22692: PPUSH
22693: PPUSH
22694: PPUSH
// result := false ;
22695: LD_ADDR_VAR 0 1
22699: PUSH
22700: LD_INT 0
22702: ST_TO_ADDR
// for i := 1 to 16 do
22703: LD_ADDR_VAR 0 2
22707: PUSH
22708: DOUBLE
22709: LD_INT 1
22711: DEC
22712: ST_TO_ADDR
22713: LD_INT 16
22715: PUSH
22716: FOR_TO
22717: IFFALSE 22916
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22719: LD_ADDR_VAR 0 3
22723: PUSH
22724: LD_INT 10
22726: PUSH
22727: LD_INT 20
22729: PUSH
22730: LD_INT 30
22732: PUSH
22733: LD_INT 40
22735: PUSH
22736: LD_INT 50
22738: PUSH
22739: LD_INT 60
22741: PUSH
22742: LD_INT 70
22744: PUSH
22745: LD_INT 80
22747: PUSH
22748: LD_INT 90
22750: PUSH
22751: LD_INT 100
22753: PUSH
22754: LD_INT 110
22756: PUSH
22757: LD_INT 120
22759: PUSH
22760: LD_INT 130
22762: PUSH
22763: LD_INT 140
22765: PUSH
22766: LD_INT 150
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: PUSH
22786: LD_INT 1
22788: PPUSH
22789: LD_INT 15
22791: PPUSH
22792: CALL_OW 12
22796: ARRAY
22797: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22798: LD_ADDR_VAR 0 4
22802: PUSH
22803: LD_INT 10
22805: PUSH
22806: LD_INT 20
22808: PUSH
22809: LD_INT 30
22811: PUSH
22812: LD_INT 40
22814: PUSH
22815: LD_INT 50
22817: PUSH
22818: LD_INT 60
22820: PUSH
22821: LD_INT 70
22823: PUSH
22824: LD_INT 80
22826: PUSH
22827: LD_INT 90
22829: PUSH
22830: LD_INT 100
22832: PUSH
22833: LD_INT 110
22835: PUSH
22836: LD_INT 120
22838: PUSH
22839: LD_INT 130
22841: PUSH
22842: LD_INT 140
22844: PUSH
22845: LD_INT 150
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: PUSH
22865: LD_INT 1
22867: PPUSH
22868: LD_INT 15
22870: PPUSH
22871: CALL_OW 12
22875: ARRAY
22876: ST_TO_ADDR
// if ValidHex ( x , y ) then
22877: LD_VAR 0 3
22881: PPUSH
22882: LD_VAR 0 4
22886: PPUSH
22887: CALL_OW 488
22891: IFFALSE 22914
// begin result := [ x , y ] ;
22893: LD_ADDR_VAR 0 1
22897: PUSH
22898: LD_VAR 0 3
22902: PUSH
22903: LD_VAR 0 4
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: ST_TO_ADDR
// break ;
22912: GO 22916
// end ; end ;
22914: GO 22716
22916: POP
22917: POP
// if result then
22918: LD_VAR 0 1
22922: IFFALSE 22982
// begin ToLua ( playSibBomb() ) ;
22924: LD_STRING playSibBomb()
22926: PPUSH
22927: CALL_OW 559
// wait ( 0 0$14 ) ;
22931: LD_INT 490
22933: PPUSH
22934: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22938: LD_VAR 0 1
22942: PUSH
22943: LD_INT 1
22945: ARRAY
22946: PPUSH
22947: LD_VAR 0 1
22951: PUSH
22952: LD_INT 2
22954: ARRAY
22955: PPUSH
22956: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22960: LD_VAR 0 1
22964: PUSH
22965: LD_INT 1
22967: ARRAY
22968: PPUSH
22969: LD_VAR 0 1
22973: PUSH
22974: LD_INT 2
22976: ARRAY
22977: PPUSH
22978: CALL_OW 429
// end ; end ;
22982: LD_VAR 0 1
22986: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22987: LD_EXP 36
22991: PUSH
22992: LD_EXP 58
22996: AND
22997: IFFALSE 23009
22999: GO 23001
23001: DISABLE
// YouLost (  ) ;
23002: LD_STRING 
23004: PPUSH
23005: CALL_OW 104
23009: END
// every 0 0$1 trigger StreamModeActive and sFog do
23010: LD_EXP 36
23014: PUSH
23015: LD_EXP 57
23019: AND
23020: IFFALSE 23034
23022: GO 23024
23024: DISABLE
// FogOff ( your_side ) ;
23025: LD_OWVAR 2
23029: PPUSH
23030: CALL_OW 344
23034: END
// every 0 0$1 trigger StreamModeActive and sSun do
23035: LD_EXP 36
23039: PUSH
23040: LD_EXP 59
23044: AND
23045: IFFALSE 23073
23047: GO 23049
23049: DISABLE
// begin solar_recharge_percent := 0 ;
23050: LD_ADDR_OWVAR 79
23054: PUSH
23055: LD_INT 0
23057: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23058: LD_INT 10500
23060: PPUSH
23061: CALL_OW 67
// solar_recharge_percent := 100 ;
23065: LD_ADDR_OWVAR 79
23069: PUSH
23070: LD_INT 100
23072: ST_TO_ADDR
// end ;
23073: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23074: LD_EXP 36
23078: PUSH
23079: LD_EXP 60
23083: AND
23084: IFFALSE 23323
23086: GO 23088
23088: DISABLE
23089: LD_INT 0
23091: PPUSH
23092: PPUSH
23093: PPUSH
// begin tmp := [ ] ;
23094: LD_ADDR_VAR 0 3
23098: PUSH
23099: EMPTY
23100: ST_TO_ADDR
// for i := 1 to 6 do
23101: LD_ADDR_VAR 0 1
23105: PUSH
23106: DOUBLE
23107: LD_INT 1
23109: DEC
23110: ST_TO_ADDR
23111: LD_INT 6
23113: PUSH
23114: FOR_TO
23115: IFFALSE 23220
// begin uc_nation := nation_nature ;
23117: LD_ADDR_OWVAR 21
23121: PUSH
23122: LD_INT 0
23124: ST_TO_ADDR
// uc_side := 0 ;
23125: LD_ADDR_OWVAR 20
23129: PUSH
23130: LD_INT 0
23132: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23133: LD_ADDR_OWVAR 29
23137: PUSH
23138: LD_INT 12
23140: PUSH
23141: LD_INT 12
23143: PUSH
23144: EMPTY
23145: LIST
23146: LIST
23147: ST_TO_ADDR
// hc_agressivity := 20 ;
23148: LD_ADDR_OWVAR 35
23152: PUSH
23153: LD_INT 20
23155: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23156: LD_ADDR_OWVAR 28
23160: PUSH
23161: LD_INT 17
23163: ST_TO_ADDR
// hc_gallery :=  ;
23164: LD_ADDR_OWVAR 33
23168: PUSH
23169: LD_STRING 
23171: ST_TO_ADDR
// hc_name :=  ;
23172: LD_ADDR_OWVAR 26
23176: PUSH
23177: LD_STRING 
23179: ST_TO_ADDR
// un := CreateHuman ;
23180: LD_ADDR_VAR 0 2
23184: PUSH
23185: CALL_OW 44
23189: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23190: LD_VAR 0 2
23194: PPUSH
23195: LD_INT 1
23197: PPUSH
23198: CALL_OW 51
// tmp := tmp ^ un ;
23202: LD_ADDR_VAR 0 3
23206: PUSH
23207: LD_VAR 0 3
23211: PUSH
23212: LD_VAR 0 2
23216: ADD
23217: ST_TO_ADDR
// end ;
23218: GO 23114
23220: POP
23221: POP
// repeat wait ( 0 0$1 ) ;
23222: LD_INT 35
23224: PPUSH
23225: CALL_OW 67
// for un in tmp do
23229: LD_ADDR_VAR 0 2
23233: PUSH
23234: LD_VAR 0 3
23238: PUSH
23239: FOR_IN
23240: IFFALSE 23314
// begin if IsDead ( un ) then
23242: LD_VAR 0 2
23246: PPUSH
23247: CALL_OW 301
23251: IFFALSE 23271
// begin tmp := tmp diff un ;
23253: LD_ADDR_VAR 0 3
23257: PUSH
23258: LD_VAR 0 3
23262: PUSH
23263: LD_VAR 0 2
23267: DIFF
23268: ST_TO_ADDR
// continue ;
23269: GO 23239
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23271: LD_VAR 0 2
23275: PPUSH
23276: LD_INT 3
23278: PUSH
23279: LD_INT 22
23281: PUSH
23282: LD_INT 0
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: PPUSH
23293: CALL_OW 69
23297: PPUSH
23298: LD_VAR 0 2
23302: PPUSH
23303: CALL_OW 74
23307: PPUSH
23308: CALL_OW 115
// end ;
23312: GO 23239
23314: POP
23315: POP
// until not tmp ;
23316: LD_VAR 0 3
23320: NOT
23321: IFFALSE 23222
// end ;
23323: PPOPN 3
23325: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23326: LD_EXP 36
23330: PUSH
23331: LD_EXP 61
23335: AND
23336: IFFALSE 23390
23338: GO 23340
23340: DISABLE
// begin ToLua ( displayTroll(); ) ;
23341: LD_STRING displayTroll();
23343: PPUSH
23344: CALL_OW 559
// wait ( 3 3$00 ) ;
23348: LD_INT 6300
23350: PPUSH
23351: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23355: LD_STRING hideTroll();
23357: PPUSH
23358: CALL_OW 559
// wait ( 1 1$00 ) ;
23362: LD_INT 2100
23364: PPUSH
23365: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23369: LD_STRING displayTroll();
23371: PPUSH
23372: CALL_OW 559
// wait ( 1 1$00 ) ;
23376: LD_INT 2100
23378: PPUSH
23379: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23383: LD_STRING hideTroll();
23385: PPUSH
23386: CALL_OW 559
// end ;
23390: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23391: LD_EXP 36
23395: PUSH
23396: LD_EXP 62
23400: AND
23401: IFFALSE 23464
23403: GO 23405
23405: DISABLE
23406: LD_INT 0
23408: PPUSH
// begin p := 0 ;
23409: LD_ADDR_VAR 0 1
23413: PUSH
23414: LD_INT 0
23416: ST_TO_ADDR
// repeat game_speed := 1 ;
23417: LD_ADDR_OWVAR 65
23421: PUSH
23422: LD_INT 1
23424: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23425: LD_INT 35
23427: PPUSH
23428: CALL_OW 67
// p := p + 1 ;
23432: LD_ADDR_VAR 0 1
23436: PUSH
23437: LD_VAR 0 1
23441: PUSH
23442: LD_INT 1
23444: PLUS
23445: ST_TO_ADDR
// until p >= 60 ;
23446: LD_VAR 0 1
23450: PUSH
23451: LD_INT 60
23453: GREATEREQUAL
23454: IFFALSE 23417
// game_speed := 4 ;
23456: LD_ADDR_OWVAR 65
23460: PUSH
23461: LD_INT 4
23463: ST_TO_ADDR
// end ;
23464: PPOPN 1
23466: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23467: LD_EXP 36
23471: PUSH
23472: LD_EXP 63
23476: AND
23477: IFFALSE 23623
23479: GO 23481
23481: DISABLE
23482: LD_INT 0
23484: PPUSH
23485: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23486: LD_ADDR_VAR 0 1
23490: PUSH
23491: LD_INT 22
23493: PUSH
23494: LD_OWVAR 2
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: PUSH
23503: LD_INT 2
23505: PUSH
23506: LD_INT 30
23508: PUSH
23509: LD_INT 0
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: PUSH
23516: LD_INT 30
23518: PUSH
23519: LD_INT 1
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: LIST
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PPUSH
23535: CALL_OW 69
23539: ST_TO_ADDR
// if not depot then
23540: LD_VAR 0 1
23544: NOT
23545: IFFALSE 23549
// exit ;
23547: GO 23623
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23549: LD_ADDR_VAR 0 2
23553: PUSH
23554: LD_VAR 0 1
23558: PUSH
23559: LD_INT 1
23561: PPUSH
23562: LD_VAR 0 1
23566: PPUSH
23567: CALL_OW 12
23571: ARRAY
23572: PPUSH
23573: CALL_OW 274
23577: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23578: LD_VAR 0 2
23582: PPUSH
23583: LD_INT 1
23585: PPUSH
23586: LD_INT 0
23588: PPUSH
23589: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23593: LD_VAR 0 2
23597: PPUSH
23598: LD_INT 2
23600: PPUSH
23601: LD_INT 0
23603: PPUSH
23604: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23608: LD_VAR 0 2
23612: PPUSH
23613: LD_INT 3
23615: PPUSH
23616: LD_INT 0
23618: PPUSH
23619: CALL_OW 277
// end ;
23623: PPOPN 2
23625: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23626: LD_EXP 36
23630: PUSH
23631: LD_EXP 64
23635: AND
23636: IFFALSE 23733
23638: GO 23640
23640: DISABLE
23641: LD_INT 0
23643: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23644: LD_ADDR_VAR 0 1
23648: PUSH
23649: LD_INT 22
23651: PUSH
23652: LD_OWVAR 2
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: PUSH
23661: LD_INT 21
23663: PUSH
23664: LD_INT 1
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: PUSH
23671: LD_INT 3
23673: PUSH
23674: LD_INT 23
23676: PUSH
23677: LD_INT 0
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: LIST
23692: PPUSH
23693: CALL_OW 69
23697: ST_TO_ADDR
// if not tmp then
23698: LD_VAR 0 1
23702: NOT
23703: IFFALSE 23707
// exit ;
23705: GO 23733
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23707: LD_VAR 0 1
23711: PUSH
23712: LD_INT 1
23714: PPUSH
23715: LD_VAR 0 1
23719: PPUSH
23720: CALL_OW 12
23724: ARRAY
23725: PPUSH
23726: LD_INT 200
23728: PPUSH
23729: CALL_OW 234
// end ;
23733: PPOPN 1
23735: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23736: LD_EXP 36
23740: PUSH
23741: LD_EXP 65
23745: AND
23746: IFFALSE 23825
23748: GO 23750
23750: DISABLE
23751: LD_INT 0
23753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23754: LD_ADDR_VAR 0 1
23758: PUSH
23759: LD_INT 22
23761: PUSH
23762: LD_OWVAR 2
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: LD_INT 21
23773: PUSH
23774: LD_INT 2
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: PPUSH
23785: CALL_OW 69
23789: ST_TO_ADDR
// if not tmp then
23790: LD_VAR 0 1
23794: NOT
23795: IFFALSE 23799
// exit ;
23797: GO 23825
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23799: LD_VAR 0 1
23803: PUSH
23804: LD_INT 1
23806: PPUSH
23807: LD_VAR 0 1
23811: PPUSH
23812: CALL_OW 12
23816: ARRAY
23817: PPUSH
23818: LD_INT 60
23820: PPUSH
23821: CALL_OW 234
// end ;
23825: PPOPN 1
23827: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23828: LD_EXP 36
23832: PUSH
23833: LD_EXP 66
23837: AND
23838: IFFALSE 23937
23840: GO 23842
23842: DISABLE
23843: LD_INT 0
23845: PPUSH
23846: PPUSH
// begin enable ;
23847: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23848: LD_ADDR_VAR 0 1
23852: PUSH
23853: LD_INT 22
23855: PUSH
23856: LD_OWVAR 2
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 61
23867: PUSH
23868: EMPTY
23869: LIST
23870: PUSH
23871: LD_INT 33
23873: PUSH
23874: LD_INT 2
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: LIST
23885: PPUSH
23886: CALL_OW 69
23890: ST_TO_ADDR
// if not tmp then
23891: LD_VAR 0 1
23895: NOT
23896: IFFALSE 23900
// exit ;
23898: GO 23937
// for i in tmp do
23900: LD_ADDR_VAR 0 2
23904: PUSH
23905: LD_VAR 0 1
23909: PUSH
23910: FOR_IN
23911: IFFALSE 23935
// if IsControledBy ( i ) then
23913: LD_VAR 0 2
23917: PPUSH
23918: CALL_OW 312
23922: IFFALSE 23933
// ComUnlink ( i ) ;
23924: LD_VAR 0 2
23928: PPUSH
23929: CALL_OW 136
23933: GO 23910
23935: POP
23936: POP
// end ;
23937: PPOPN 2
23939: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23940: LD_EXP 36
23944: PUSH
23945: LD_EXP 67
23949: AND
23950: IFFALSE 24090
23952: GO 23954
23954: DISABLE
23955: LD_INT 0
23957: PPUSH
23958: PPUSH
// begin ToLua ( displayPowell(); ) ;
23959: LD_STRING displayPowell();
23961: PPUSH
23962: CALL_OW 559
// uc_side := 0 ;
23966: LD_ADDR_OWVAR 20
23970: PUSH
23971: LD_INT 0
23973: ST_TO_ADDR
// uc_nation := 2 ;
23974: LD_ADDR_OWVAR 21
23978: PUSH
23979: LD_INT 2
23981: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23982: LD_ADDR_OWVAR 37
23986: PUSH
23987: LD_INT 14
23989: ST_TO_ADDR
// vc_engine := engine_siberite ;
23990: LD_ADDR_OWVAR 39
23994: PUSH
23995: LD_INT 3
23997: ST_TO_ADDR
// vc_control := control_apeman ;
23998: LD_ADDR_OWVAR 38
24002: PUSH
24003: LD_INT 5
24005: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24006: LD_ADDR_OWVAR 40
24010: PUSH
24011: LD_INT 29
24013: ST_TO_ADDR
// un := CreateVehicle ;
24014: LD_ADDR_VAR 0 2
24018: PUSH
24019: CALL_OW 45
24023: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24024: LD_VAR 0 2
24028: PPUSH
24029: LD_INT 1
24031: PPUSH
24032: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24036: LD_INT 35
24038: PPUSH
24039: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24043: LD_VAR 0 2
24047: PPUSH
24048: LD_INT 22
24050: PUSH
24051: LD_OWVAR 2
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PPUSH
24060: CALL_OW 69
24064: PPUSH
24065: LD_VAR 0 2
24069: PPUSH
24070: CALL_OW 74
24074: PPUSH
24075: CALL_OW 115
// until IsDead ( un ) ;
24079: LD_VAR 0 2
24083: PPUSH
24084: CALL_OW 301
24088: IFFALSE 24036
// end ;
24090: PPOPN 2
24092: END
// every 0 0$1 trigger StreamModeActive and sStu do
24093: LD_EXP 36
24097: PUSH
24098: LD_EXP 75
24102: AND
24103: IFFALSE 24119
24105: GO 24107
24107: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24108: LD_STRING displayStucuk();
24110: PPUSH
24111: CALL_OW 559
// ResetFog ;
24115: CALL_OW 335
// end ;
24119: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24120: LD_EXP 36
24124: PUSH
24125: LD_EXP 68
24129: AND
24130: IFFALSE 24271
24132: GO 24134
24134: DISABLE
24135: LD_INT 0
24137: PPUSH
24138: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24139: LD_ADDR_VAR 0 2
24143: PUSH
24144: LD_INT 22
24146: PUSH
24147: LD_OWVAR 2
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: PUSH
24156: LD_INT 21
24158: PUSH
24159: LD_INT 1
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: PPUSH
24170: CALL_OW 69
24174: ST_TO_ADDR
// if not tmp then
24175: LD_VAR 0 2
24179: NOT
24180: IFFALSE 24184
// exit ;
24182: GO 24271
// un := tmp [ rand ( 1 , tmp ) ] ;
24184: LD_ADDR_VAR 0 1
24188: PUSH
24189: LD_VAR 0 2
24193: PUSH
24194: LD_INT 1
24196: PPUSH
24197: LD_VAR 0 2
24201: PPUSH
24202: CALL_OW 12
24206: ARRAY
24207: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24208: LD_VAR 0 1
24212: PPUSH
24213: LD_INT 0
24215: PPUSH
24216: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24220: LD_VAR 0 1
24224: PPUSH
24225: LD_OWVAR 3
24229: PUSH
24230: LD_VAR 0 1
24234: DIFF
24235: PPUSH
24236: LD_VAR 0 1
24240: PPUSH
24241: CALL_OW 74
24245: PPUSH
24246: CALL_OW 115
// wait ( 0 0$20 ) ;
24250: LD_INT 700
24252: PPUSH
24253: CALL_OW 67
// SetSide ( un , your_side ) ;
24257: LD_VAR 0 1
24261: PPUSH
24262: LD_OWVAR 2
24266: PPUSH
24267: CALL_OW 235
// end ;
24271: PPOPN 2
24273: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24274: LD_EXP 36
24278: PUSH
24279: LD_EXP 69
24283: AND
24284: IFFALSE 24390
24286: GO 24288
24288: DISABLE
24289: LD_INT 0
24291: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24292: LD_ADDR_VAR 0 1
24296: PUSH
24297: LD_INT 22
24299: PUSH
24300: LD_OWVAR 2
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 2
24311: PUSH
24312: LD_INT 30
24314: PUSH
24315: LD_INT 0
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: LD_INT 30
24324: PUSH
24325: LD_INT 1
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: LIST
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PPUSH
24341: CALL_OW 69
24345: ST_TO_ADDR
// if not depot then
24346: LD_VAR 0 1
24350: NOT
24351: IFFALSE 24355
// exit ;
24353: GO 24390
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24355: LD_VAR 0 1
24359: PUSH
24360: LD_INT 1
24362: ARRAY
24363: PPUSH
24364: CALL_OW 250
24368: PPUSH
24369: LD_VAR 0 1
24373: PUSH
24374: LD_INT 1
24376: ARRAY
24377: PPUSH
24378: CALL_OW 251
24382: PPUSH
24383: LD_INT 70
24385: PPUSH
24386: CALL_OW 495
// end ;
24390: PPOPN 1
24392: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24393: LD_EXP 36
24397: PUSH
24398: LD_EXP 70
24402: AND
24403: IFFALSE 24614
24405: GO 24407
24407: DISABLE
24408: LD_INT 0
24410: PPUSH
24411: PPUSH
24412: PPUSH
24413: PPUSH
24414: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24415: LD_ADDR_VAR 0 5
24419: PUSH
24420: LD_INT 22
24422: PUSH
24423: LD_OWVAR 2
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: PUSH
24432: LD_INT 21
24434: PUSH
24435: LD_INT 1
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PPUSH
24446: CALL_OW 69
24450: ST_TO_ADDR
// if not tmp then
24451: LD_VAR 0 5
24455: NOT
24456: IFFALSE 24460
// exit ;
24458: GO 24614
// for i in tmp do
24460: LD_ADDR_VAR 0 1
24464: PUSH
24465: LD_VAR 0 5
24469: PUSH
24470: FOR_IN
24471: IFFALSE 24612
// begin d := rand ( 0 , 5 ) ;
24473: LD_ADDR_VAR 0 4
24477: PUSH
24478: LD_INT 0
24480: PPUSH
24481: LD_INT 5
24483: PPUSH
24484: CALL_OW 12
24488: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24489: LD_ADDR_VAR 0 2
24493: PUSH
24494: LD_VAR 0 1
24498: PPUSH
24499: CALL_OW 250
24503: PPUSH
24504: LD_VAR 0 4
24508: PPUSH
24509: LD_INT 3
24511: PPUSH
24512: LD_INT 12
24514: PPUSH
24515: CALL_OW 12
24519: PPUSH
24520: CALL_OW 272
24524: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24525: LD_ADDR_VAR 0 3
24529: PUSH
24530: LD_VAR 0 1
24534: PPUSH
24535: CALL_OW 251
24539: PPUSH
24540: LD_VAR 0 4
24544: PPUSH
24545: LD_INT 3
24547: PPUSH
24548: LD_INT 12
24550: PPUSH
24551: CALL_OW 12
24555: PPUSH
24556: CALL_OW 273
24560: ST_TO_ADDR
// if ValidHex ( x , y ) then
24561: LD_VAR 0 2
24565: PPUSH
24566: LD_VAR 0 3
24570: PPUSH
24571: CALL_OW 488
24575: IFFALSE 24610
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24577: LD_VAR 0 1
24581: PPUSH
24582: LD_VAR 0 2
24586: PPUSH
24587: LD_VAR 0 3
24591: PPUSH
24592: LD_INT 3
24594: PPUSH
24595: LD_INT 6
24597: PPUSH
24598: CALL_OW 12
24602: PPUSH
24603: LD_INT 1
24605: PPUSH
24606: CALL_OW 483
// end ;
24610: GO 24470
24612: POP
24613: POP
// end ;
24614: PPOPN 5
24616: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24617: LD_EXP 36
24621: PUSH
24622: LD_EXP 71
24626: AND
24627: IFFALSE 24721
24629: GO 24631
24631: DISABLE
24632: LD_INT 0
24634: PPUSH
24635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24636: LD_ADDR_VAR 0 2
24640: PUSH
24641: LD_INT 22
24643: PUSH
24644: LD_OWVAR 2
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: PUSH
24653: LD_INT 32
24655: PUSH
24656: LD_INT 1
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PUSH
24663: LD_INT 21
24665: PUSH
24666: LD_INT 2
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: LIST
24677: PPUSH
24678: CALL_OW 69
24682: ST_TO_ADDR
// if not tmp then
24683: LD_VAR 0 2
24687: NOT
24688: IFFALSE 24692
// exit ;
24690: GO 24721
// for i in tmp do
24692: LD_ADDR_VAR 0 1
24696: PUSH
24697: LD_VAR 0 2
24701: PUSH
24702: FOR_IN
24703: IFFALSE 24719
// SetFuel ( i , 0 ) ;
24705: LD_VAR 0 1
24709: PPUSH
24710: LD_INT 0
24712: PPUSH
24713: CALL_OW 240
24717: GO 24702
24719: POP
24720: POP
// end ;
24721: PPOPN 2
24723: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24724: LD_EXP 36
24728: PUSH
24729: LD_EXP 72
24733: AND
24734: IFFALSE 24800
24736: GO 24738
24738: DISABLE
24739: LD_INT 0
24741: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24742: LD_ADDR_VAR 0 1
24746: PUSH
24747: LD_INT 22
24749: PUSH
24750: LD_OWVAR 2
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: LD_INT 30
24761: PUSH
24762: LD_INT 29
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PPUSH
24773: CALL_OW 69
24777: ST_TO_ADDR
// if not tmp then
24778: LD_VAR 0 1
24782: NOT
24783: IFFALSE 24787
// exit ;
24785: GO 24800
// DestroyUnit ( tmp [ 1 ] ) ;
24787: LD_VAR 0 1
24791: PUSH
24792: LD_INT 1
24794: ARRAY
24795: PPUSH
24796: CALL_OW 65
// end ;
24800: PPOPN 1
24802: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24803: LD_EXP 36
24807: PUSH
24808: LD_EXP 74
24812: AND
24813: IFFALSE 24942
24815: GO 24817
24817: DISABLE
24818: LD_INT 0
24820: PPUSH
// begin uc_side := 0 ;
24821: LD_ADDR_OWVAR 20
24825: PUSH
24826: LD_INT 0
24828: ST_TO_ADDR
// uc_nation := nation_arabian ;
24829: LD_ADDR_OWVAR 21
24833: PUSH
24834: LD_INT 2
24836: ST_TO_ADDR
// hc_gallery :=  ;
24837: LD_ADDR_OWVAR 33
24841: PUSH
24842: LD_STRING 
24844: ST_TO_ADDR
// hc_name :=  ;
24845: LD_ADDR_OWVAR 26
24849: PUSH
24850: LD_STRING 
24852: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24853: LD_INT 1
24855: PPUSH
24856: LD_INT 11
24858: PPUSH
24859: LD_INT 10
24861: PPUSH
24862: CALL_OW 380
// un := CreateHuman ;
24866: LD_ADDR_VAR 0 1
24870: PUSH
24871: CALL_OW 44
24875: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24876: LD_VAR 0 1
24880: PPUSH
24881: LD_INT 1
24883: PPUSH
24884: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24888: LD_INT 35
24890: PPUSH
24891: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24895: LD_VAR 0 1
24899: PPUSH
24900: LD_INT 22
24902: PUSH
24903: LD_OWVAR 2
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PPUSH
24912: CALL_OW 69
24916: PPUSH
24917: LD_VAR 0 1
24921: PPUSH
24922: CALL_OW 74
24926: PPUSH
24927: CALL_OW 115
// until IsDead ( un ) ;
24931: LD_VAR 0 1
24935: PPUSH
24936: CALL_OW 301
24940: IFFALSE 24888
// end ;
24942: PPOPN 1
24944: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24945: LD_EXP 36
24949: PUSH
24950: LD_EXP 76
24954: AND
24955: IFFALSE 24967
24957: GO 24959
24959: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24960: LD_STRING earthquake(getX(game), 0, 32)
24962: PPUSH
24963: CALL_OW 559
24967: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24968: LD_EXP 36
24972: PUSH
24973: LD_EXP 77
24977: AND
24978: IFFALSE 25069
24980: GO 24982
24982: DISABLE
24983: LD_INT 0
24985: PPUSH
// begin enable ;
24986: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24987: LD_ADDR_VAR 0 1
24991: PUSH
24992: LD_INT 22
24994: PUSH
24995: LD_OWVAR 2
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 21
25006: PUSH
25007: LD_INT 2
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: LD_INT 33
25016: PUSH
25017: LD_INT 3
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: LIST
25028: PPUSH
25029: CALL_OW 69
25033: ST_TO_ADDR
// if not tmp then
25034: LD_VAR 0 1
25038: NOT
25039: IFFALSE 25043
// exit ;
25041: GO 25069
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25043: LD_VAR 0 1
25047: PUSH
25048: LD_INT 1
25050: PPUSH
25051: LD_VAR 0 1
25055: PPUSH
25056: CALL_OW 12
25060: ARRAY
25061: PPUSH
25062: LD_INT 1
25064: PPUSH
25065: CALL_OW 234
// end ;
25069: PPOPN 1
25071: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25072: LD_EXP 36
25076: PUSH
25077: LD_EXP 78
25081: AND
25082: IFFALSE 25223
25084: GO 25086
25086: DISABLE
25087: LD_INT 0
25089: PPUSH
25090: PPUSH
25091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25092: LD_ADDR_VAR 0 3
25096: PUSH
25097: LD_INT 22
25099: PUSH
25100: LD_OWVAR 2
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 25
25111: PUSH
25112: LD_INT 1
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PPUSH
25123: CALL_OW 69
25127: ST_TO_ADDR
// if not tmp then
25128: LD_VAR 0 3
25132: NOT
25133: IFFALSE 25137
// exit ;
25135: GO 25223
// un := tmp [ rand ( 1 , tmp ) ] ;
25137: LD_ADDR_VAR 0 2
25141: PUSH
25142: LD_VAR 0 3
25146: PUSH
25147: LD_INT 1
25149: PPUSH
25150: LD_VAR 0 3
25154: PPUSH
25155: CALL_OW 12
25159: ARRAY
25160: ST_TO_ADDR
// if Crawls ( un ) then
25161: LD_VAR 0 2
25165: PPUSH
25166: CALL_OW 318
25170: IFFALSE 25181
// ComWalk ( un ) ;
25172: LD_VAR 0 2
25176: PPUSH
25177: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25181: LD_VAR 0 2
25185: PPUSH
25186: LD_INT 9
25188: PPUSH
25189: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25193: LD_INT 28
25195: PPUSH
25196: LD_OWVAR 2
25200: PPUSH
25201: LD_INT 2
25203: PPUSH
25204: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25208: LD_INT 29
25210: PPUSH
25211: LD_OWVAR 2
25215: PPUSH
25216: LD_INT 2
25218: PPUSH
25219: CALL_OW 322
// end ;
25223: PPOPN 3
25225: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25226: LD_EXP 36
25230: PUSH
25231: LD_EXP 79
25235: AND
25236: IFFALSE 25347
25238: GO 25240
25240: DISABLE
25241: LD_INT 0
25243: PPUSH
25244: PPUSH
25245: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25246: LD_ADDR_VAR 0 3
25250: PUSH
25251: LD_INT 22
25253: PUSH
25254: LD_OWVAR 2
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 25
25265: PUSH
25266: LD_INT 1
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PPUSH
25277: CALL_OW 69
25281: ST_TO_ADDR
// if not tmp then
25282: LD_VAR 0 3
25286: NOT
25287: IFFALSE 25291
// exit ;
25289: GO 25347
// un := tmp [ rand ( 1 , tmp ) ] ;
25291: LD_ADDR_VAR 0 2
25295: PUSH
25296: LD_VAR 0 3
25300: PUSH
25301: LD_INT 1
25303: PPUSH
25304: LD_VAR 0 3
25308: PPUSH
25309: CALL_OW 12
25313: ARRAY
25314: ST_TO_ADDR
// if Crawls ( un ) then
25315: LD_VAR 0 2
25319: PPUSH
25320: CALL_OW 318
25324: IFFALSE 25335
// ComWalk ( un ) ;
25326: LD_VAR 0 2
25330: PPUSH
25331: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25335: LD_VAR 0 2
25339: PPUSH
25340: LD_INT 8
25342: PPUSH
25343: CALL_OW 336
// end ;
25347: PPOPN 3
25349: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25350: LD_EXP 36
25354: PUSH
25355: LD_EXP 80
25359: AND
25360: IFFALSE 25504
25362: GO 25364
25364: DISABLE
25365: LD_INT 0
25367: PPUSH
25368: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25369: LD_ADDR_VAR 0 2
25373: PUSH
25374: LD_INT 22
25376: PUSH
25377: LD_OWVAR 2
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 21
25388: PUSH
25389: LD_INT 2
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: PUSH
25396: LD_INT 2
25398: PUSH
25399: LD_INT 34
25401: PUSH
25402: LD_INT 12
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: LD_INT 34
25411: PUSH
25412: LD_INT 51
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 34
25421: PUSH
25422: LD_INT 32
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: LIST
25439: PPUSH
25440: CALL_OW 69
25444: ST_TO_ADDR
// if not tmp then
25445: LD_VAR 0 2
25449: NOT
25450: IFFALSE 25454
// exit ;
25452: GO 25504
// for i in tmp do
25454: LD_ADDR_VAR 0 1
25458: PUSH
25459: LD_VAR 0 2
25463: PUSH
25464: FOR_IN
25465: IFFALSE 25502
// if GetCargo ( i , mat_artifact ) = 0 then
25467: LD_VAR 0 1
25471: PPUSH
25472: LD_INT 4
25474: PPUSH
25475: CALL_OW 289
25479: PUSH
25480: LD_INT 0
25482: EQUAL
25483: IFFALSE 25500
// SetCargo ( i , mat_siberit , 100 ) ;
25485: LD_VAR 0 1
25489: PPUSH
25490: LD_INT 3
25492: PPUSH
25493: LD_INT 100
25495: PPUSH
25496: CALL_OW 290
25500: GO 25464
25502: POP
25503: POP
// end ;
25504: PPOPN 2
25506: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25507: LD_EXP 36
25511: PUSH
25512: LD_EXP 81
25516: AND
25517: IFFALSE 25700
25519: GO 25521
25521: DISABLE
25522: LD_INT 0
25524: PPUSH
25525: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25526: LD_ADDR_VAR 0 2
25530: PUSH
25531: LD_INT 22
25533: PUSH
25534: LD_OWVAR 2
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PPUSH
25543: CALL_OW 69
25547: ST_TO_ADDR
// if not tmp then
25548: LD_VAR 0 2
25552: NOT
25553: IFFALSE 25557
// exit ;
25555: GO 25700
// for i := 1 to 2 do
25557: LD_ADDR_VAR 0 1
25561: PUSH
25562: DOUBLE
25563: LD_INT 1
25565: DEC
25566: ST_TO_ADDR
25567: LD_INT 2
25569: PUSH
25570: FOR_TO
25571: IFFALSE 25698
// begin uc_side := your_side ;
25573: LD_ADDR_OWVAR 20
25577: PUSH
25578: LD_OWVAR 2
25582: ST_TO_ADDR
// uc_nation := nation_american ;
25583: LD_ADDR_OWVAR 21
25587: PUSH
25588: LD_INT 1
25590: ST_TO_ADDR
// vc_chassis := us_morphling ;
25591: LD_ADDR_OWVAR 37
25595: PUSH
25596: LD_INT 5
25598: ST_TO_ADDR
// vc_engine := engine_siberite ;
25599: LD_ADDR_OWVAR 39
25603: PUSH
25604: LD_INT 3
25606: ST_TO_ADDR
// vc_control := control_computer ;
25607: LD_ADDR_OWVAR 38
25611: PUSH
25612: LD_INT 3
25614: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25615: LD_ADDR_OWVAR 40
25619: PUSH
25620: LD_INT 10
25622: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25623: LD_VAR 0 2
25627: PUSH
25628: LD_INT 1
25630: ARRAY
25631: PPUSH
25632: CALL_OW 310
25636: NOT
25637: IFFALSE 25684
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25639: CALL_OW 45
25643: PPUSH
25644: LD_VAR 0 2
25648: PUSH
25649: LD_INT 1
25651: ARRAY
25652: PPUSH
25653: CALL_OW 250
25657: PPUSH
25658: LD_VAR 0 2
25662: PUSH
25663: LD_INT 1
25665: ARRAY
25666: PPUSH
25667: CALL_OW 251
25671: PPUSH
25672: LD_INT 12
25674: PPUSH
25675: LD_INT 1
25677: PPUSH
25678: CALL_OW 50
25682: GO 25696
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25684: CALL_OW 45
25688: PPUSH
25689: LD_INT 1
25691: PPUSH
25692: CALL_OW 51
// end ;
25696: GO 25570
25698: POP
25699: POP
// end ;
25700: PPOPN 2
25702: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25703: LD_EXP 36
25707: PUSH
25708: LD_EXP 82
25712: AND
25713: IFFALSE 25935
25715: GO 25717
25717: DISABLE
25718: LD_INT 0
25720: PPUSH
25721: PPUSH
25722: PPUSH
25723: PPUSH
25724: PPUSH
25725: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25726: LD_ADDR_VAR 0 6
25730: PUSH
25731: LD_INT 22
25733: PUSH
25734: LD_OWVAR 2
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 21
25745: PUSH
25746: LD_INT 1
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 3
25755: PUSH
25756: LD_INT 23
25758: PUSH
25759: LD_INT 0
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: LIST
25774: PPUSH
25775: CALL_OW 69
25779: ST_TO_ADDR
// if not tmp then
25780: LD_VAR 0 6
25784: NOT
25785: IFFALSE 25789
// exit ;
25787: GO 25935
// s1 := rand ( 1 , 4 ) ;
25789: LD_ADDR_VAR 0 2
25793: PUSH
25794: LD_INT 1
25796: PPUSH
25797: LD_INT 4
25799: PPUSH
25800: CALL_OW 12
25804: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25805: LD_ADDR_VAR 0 4
25809: PUSH
25810: LD_VAR 0 6
25814: PUSH
25815: LD_INT 1
25817: ARRAY
25818: PPUSH
25819: LD_VAR 0 2
25823: PPUSH
25824: CALL_OW 259
25828: ST_TO_ADDR
// if s1 = 1 then
25829: LD_VAR 0 2
25833: PUSH
25834: LD_INT 1
25836: EQUAL
25837: IFFALSE 25857
// s2 := rand ( 2 , 4 ) else
25839: LD_ADDR_VAR 0 3
25843: PUSH
25844: LD_INT 2
25846: PPUSH
25847: LD_INT 4
25849: PPUSH
25850: CALL_OW 12
25854: ST_TO_ADDR
25855: GO 25865
// s2 := 1 ;
25857: LD_ADDR_VAR 0 3
25861: PUSH
25862: LD_INT 1
25864: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25865: LD_ADDR_VAR 0 5
25869: PUSH
25870: LD_VAR 0 6
25874: PUSH
25875: LD_INT 1
25877: ARRAY
25878: PPUSH
25879: LD_VAR 0 3
25883: PPUSH
25884: CALL_OW 259
25888: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25889: LD_VAR 0 6
25893: PUSH
25894: LD_INT 1
25896: ARRAY
25897: PPUSH
25898: LD_VAR 0 2
25902: PPUSH
25903: LD_VAR 0 5
25907: PPUSH
25908: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25912: LD_VAR 0 6
25916: PUSH
25917: LD_INT 1
25919: ARRAY
25920: PPUSH
25921: LD_VAR 0 3
25925: PPUSH
25926: LD_VAR 0 4
25930: PPUSH
25931: CALL_OW 237
// end ;
25935: PPOPN 6
25937: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25938: LD_EXP 36
25942: PUSH
25943: LD_EXP 83
25947: AND
25948: IFFALSE 26027
25950: GO 25952
25952: DISABLE
25953: LD_INT 0
25955: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25956: LD_ADDR_VAR 0 1
25960: PUSH
25961: LD_INT 22
25963: PUSH
25964: LD_OWVAR 2
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 30
25975: PUSH
25976: LD_INT 3
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PPUSH
25987: CALL_OW 69
25991: ST_TO_ADDR
// if not tmp then
25992: LD_VAR 0 1
25996: NOT
25997: IFFALSE 26001
// exit ;
25999: GO 26027
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26001: LD_VAR 0 1
26005: PUSH
26006: LD_INT 1
26008: PPUSH
26009: LD_VAR 0 1
26013: PPUSH
26014: CALL_OW 12
26018: ARRAY
26019: PPUSH
26020: LD_INT 1
26022: PPUSH
26023: CALL_OW 234
// end ;
26027: PPOPN 1
26029: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26030: LD_EXP 36
26034: PUSH
26035: LD_EXP 84
26039: AND
26040: IFFALSE 26152
26042: GO 26044
26044: DISABLE
26045: LD_INT 0
26047: PPUSH
26048: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26049: LD_ADDR_VAR 0 2
26053: PUSH
26054: LD_INT 22
26056: PUSH
26057: LD_OWVAR 2
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: LD_INT 2
26068: PUSH
26069: LD_INT 30
26071: PUSH
26072: LD_INT 27
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 30
26081: PUSH
26082: LD_INT 26
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 30
26091: PUSH
26092: LD_INT 28
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PPUSH
26109: CALL_OW 69
26113: ST_TO_ADDR
// if not tmp then
26114: LD_VAR 0 2
26118: NOT
26119: IFFALSE 26123
// exit ;
26121: GO 26152
// for i in tmp do
26123: LD_ADDR_VAR 0 1
26127: PUSH
26128: LD_VAR 0 2
26132: PUSH
26133: FOR_IN
26134: IFFALSE 26150
// SetLives ( i , 1 ) ;
26136: LD_VAR 0 1
26140: PPUSH
26141: LD_INT 1
26143: PPUSH
26144: CALL_OW 234
26148: GO 26133
26150: POP
26151: POP
// end ;
26152: PPOPN 2
26154: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26155: LD_EXP 36
26159: PUSH
26160: LD_EXP 85
26164: AND
26165: IFFALSE 26452
26167: GO 26169
26169: DISABLE
26170: LD_INT 0
26172: PPUSH
26173: PPUSH
26174: PPUSH
// begin i := rand ( 1 , 7 ) ;
26175: LD_ADDR_VAR 0 1
26179: PUSH
26180: LD_INT 1
26182: PPUSH
26183: LD_INT 7
26185: PPUSH
26186: CALL_OW 12
26190: ST_TO_ADDR
// case i of 1 :
26191: LD_VAR 0 1
26195: PUSH
26196: LD_INT 1
26198: DOUBLE
26199: EQUAL
26200: IFTRUE 26204
26202: GO 26214
26204: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26205: LD_STRING earthquake(getX(game), 0, 32)
26207: PPUSH
26208: CALL_OW 559
26212: GO 26452
26214: LD_INT 2
26216: DOUBLE
26217: EQUAL
26218: IFTRUE 26222
26220: GO 26236
26222: POP
// begin ToLua ( displayStucuk(); ) ;
26223: LD_STRING displayStucuk();
26225: PPUSH
26226: CALL_OW 559
// ResetFog ;
26230: CALL_OW 335
// end ; 3 :
26234: GO 26452
26236: LD_INT 3
26238: DOUBLE
26239: EQUAL
26240: IFTRUE 26244
26242: GO 26348
26244: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26245: LD_ADDR_VAR 0 2
26249: PUSH
26250: LD_INT 22
26252: PUSH
26253: LD_OWVAR 2
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: LD_INT 25
26264: PUSH
26265: LD_INT 1
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PPUSH
26276: CALL_OW 69
26280: ST_TO_ADDR
// if not tmp then
26281: LD_VAR 0 2
26285: NOT
26286: IFFALSE 26290
// exit ;
26288: GO 26452
// un := tmp [ rand ( 1 , tmp ) ] ;
26290: LD_ADDR_VAR 0 3
26294: PUSH
26295: LD_VAR 0 2
26299: PUSH
26300: LD_INT 1
26302: PPUSH
26303: LD_VAR 0 2
26307: PPUSH
26308: CALL_OW 12
26312: ARRAY
26313: ST_TO_ADDR
// if Crawls ( un ) then
26314: LD_VAR 0 3
26318: PPUSH
26319: CALL_OW 318
26323: IFFALSE 26334
// ComWalk ( un ) ;
26325: LD_VAR 0 3
26329: PPUSH
26330: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26334: LD_VAR 0 3
26338: PPUSH
26339: LD_INT 8
26341: PPUSH
26342: CALL_OW 336
// end ; 4 :
26346: GO 26452
26348: LD_INT 4
26350: DOUBLE
26351: EQUAL
26352: IFTRUE 26356
26354: GO 26430
26356: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26357: LD_ADDR_VAR 0 2
26361: PUSH
26362: LD_INT 22
26364: PUSH
26365: LD_OWVAR 2
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 30
26376: PUSH
26377: LD_INT 29
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PPUSH
26388: CALL_OW 69
26392: ST_TO_ADDR
// if not tmp then
26393: LD_VAR 0 2
26397: NOT
26398: IFFALSE 26402
// exit ;
26400: GO 26452
// CenterNowOnUnits ( tmp [ 1 ] ) ;
26402: LD_VAR 0 2
26406: PUSH
26407: LD_INT 1
26409: ARRAY
26410: PPUSH
26411: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
26415: LD_VAR 0 2
26419: PUSH
26420: LD_INT 1
26422: ARRAY
26423: PPUSH
26424: CALL_OW 65
// end ; 5 .. 7 :
26428: GO 26452
26430: LD_INT 5
26432: DOUBLE
26433: GREATEREQUAL
26434: IFFALSE 26442
26436: LD_INT 7
26438: DOUBLE
26439: LESSEQUAL
26440: IFTRUE 26444
26442: GO 26451
26444: POP
// StreamSibBomb ; end ;
26445: CALL 22689 0 0
26449: GO 26452
26451: POP
// end ;
26452: PPOPN 3
26454: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26455: LD_EXP 36
26459: PUSH
26460: LD_EXP 86
26464: AND
26465: IFFALSE 26621
26467: GO 26469
26469: DISABLE
26470: LD_INT 0
26472: PPUSH
26473: PPUSH
26474: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26475: LD_ADDR_VAR 0 2
26479: PUSH
26480: LD_INT 81
26482: PUSH
26483: LD_OWVAR 2
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 2
26494: PUSH
26495: LD_INT 21
26497: PUSH
26498: LD_INT 1
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: LD_INT 21
26507: PUSH
26508: LD_INT 2
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: LIST
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PPUSH
26524: CALL_OW 69
26528: ST_TO_ADDR
// if not tmp then
26529: LD_VAR 0 2
26533: NOT
26534: IFFALSE 26538
// exit ;
26536: GO 26621
// p := 0 ;
26538: LD_ADDR_VAR 0 3
26542: PUSH
26543: LD_INT 0
26545: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26546: LD_INT 35
26548: PPUSH
26549: CALL_OW 67
// p := p + 1 ;
26553: LD_ADDR_VAR 0 3
26557: PUSH
26558: LD_VAR 0 3
26562: PUSH
26563: LD_INT 1
26565: PLUS
26566: ST_TO_ADDR
// for i in tmp do
26567: LD_ADDR_VAR 0 1
26571: PUSH
26572: LD_VAR 0 2
26576: PUSH
26577: FOR_IN
26578: IFFALSE 26609
// if GetLives ( i ) < 1000 then
26580: LD_VAR 0 1
26584: PPUSH
26585: CALL_OW 256
26589: PUSH
26590: LD_INT 1000
26592: LESS
26593: IFFALSE 26607
// SetLives ( i , 1000 ) ;
26595: LD_VAR 0 1
26599: PPUSH
26600: LD_INT 1000
26602: PPUSH
26603: CALL_OW 234
26607: GO 26577
26609: POP
26610: POP
// until p > 20 ;
26611: LD_VAR 0 3
26615: PUSH
26616: LD_INT 20
26618: GREATER
26619: IFFALSE 26546
// end ;
26621: PPOPN 3
26623: END
// every 0 0$1 trigger StreamModeActive and sTime do
26624: LD_EXP 36
26628: PUSH
26629: LD_EXP 87
26633: AND
26634: IFFALSE 26669
26636: GO 26638
26638: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26639: LD_INT 28
26641: PPUSH
26642: LD_OWVAR 2
26646: PPUSH
26647: LD_INT 2
26649: PPUSH
26650: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26654: LD_INT 30
26656: PPUSH
26657: LD_OWVAR 2
26661: PPUSH
26662: LD_INT 2
26664: PPUSH
26665: CALL_OW 322
// end ;
26669: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26670: LD_EXP 36
26674: PUSH
26675: LD_EXP 88
26679: AND
26680: IFFALSE 26801
26682: GO 26684
26684: DISABLE
26685: LD_INT 0
26687: PPUSH
26688: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26689: LD_ADDR_VAR 0 2
26693: PUSH
26694: LD_INT 22
26696: PUSH
26697: LD_OWVAR 2
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 21
26708: PUSH
26709: LD_INT 1
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 3
26718: PUSH
26719: LD_INT 23
26721: PUSH
26722: LD_INT 0
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: LIST
26737: PPUSH
26738: CALL_OW 69
26742: ST_TO_ADDR
// if not tmp then
26743: LD_VAR 0 2
26747: NOT
26748: IFFALSE 26752
// exit ;
26750: GO 26801
// for i in tmp do
26752: LD_ADDR_VAR 0 1
26756: PUSH
26757: LD_VAR 0 2
26761: PUSH
26762: FOR_IN
26763: IFFALSE 26799
// begin if Crawls ( i ) then
26765: LD_VAR 0 1
26769: PPUSH
26770: CALL_OW 318
26774: IFFALSE 26785
// ComWalk ( i ) ;
26776: LD_VAR 0 1
26780: PPUSH
26781: CALL_OW 138
// SetClass ( i , 2 ) ;
26785: LD_VAR 0 1
26789: PPUSH
26790: LD_INT 2
26792: PPUSH
26793: CALL_OW 336
// end ;
26797: GO 26762
26799: POP
26800: POP
// end ;
26801: PPOPN 2
26803: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26804: LD_EXP 36
26808: PUSH
26809: LD_EXP 89
26813: AND
26814: IFFALSE 27102
26816: GO 26818
26818: DISABLE
26819: LD_INT 0
26821: PPUSH
26822: PPUSH
26823: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26824: LD_OWVAR 2
26828: PPUSH
26829: LD_INT 9
26831: PPUSH
26832: LD_INT 1
26834: PPUSH
26835: LD_INT 1
26837: PPUSH
26838: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26842: LD_INT 9
26844: PPUSH
26845: LD_OWVAR 2
26849: PPUSH
26850: CALL_OW 343
// uc_side := 9 ;
26854: LD_ADDR_OWVAR 20
26858: PUSH
26859: LD_INT 9
26861: ST_TO_ADDR
// uc_nation := 2 ;
26862: LD_ADDR_OWVAR 21
26866: PUSH
26867: LD_INT 2
26869: ST_TO_ADDR
// hc_name := Dark Warrior ;
26870: LD_ADDR_OWVAR 26
26874: PUSH
26875: LD_STRING Dark Warrior
26877: ST_TO_ADDR
// hc_gallery :=  ;
26878: LD_ADDR_OWVAR 33
26882: PUSH
26883: LD_STRING 
26885: ST_TO_ADDR
// hc_noskilllimit := true ;
26886: LD_ADDR_OWVAR 76
26890: PUSH
26891: LD_INT 1
26893: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26894: LD_ADDR_OWVAR 31
26898: PUSH
26899: LD_INT 30
26901: PUSH
26902: LD_INT 30
26904: PUSH
26905: LD_INT 30
26907: PUSH
26908: LD_INT 30
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: ST_TO_ADDR
// un := CreateHuman ;
26917: LD_ADDR_VAR 0 3
26921: PUSH
26922: CALL_OW 44
26926: ST_TO_ADDR
// hc_noskilllimit := false ;
26927: LD_ADDR_OWVAR 76
26931: PUSH
26932: LD_INT 0
26934: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26935: LD_VAR 0 3
26939: PPUSH
26940: LD_INT 1
26942: PPUSH
26943: CALL_OW 51
// ToLua ( playRanger() ) ;
26947: LD_STRING playRanger()
26949: PPUSH
26950: CALL_OW 559
// p := 0 ;
26954: LD_ADDR_VAR 0 2
26958: PUSH
26959: LD_INT 0
26961: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26962: LD_INT 35
26964: PPUSH
26965: CALL_OW 67
// p := p + 1 ;
26969: LD_ADDR_VAR 0 2
26973: PUSH
26974: LD_VAR 0 2
26978: PUSH
26979: LD_INT 1
26981: PLUS
26982: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26983: LD_VAR 0 3
26987: PPUSH
26988: CALL_OW 256
26992: PUSH
26993: LD_INT 1000
26995: LESS
26996: IFFALSE 27010
// SetLives ( un , 1000 ) ;
26998: LD_VAR 0 3
27002: PPUSH
27003: LD_INT 1000
27005: PPUSH
27006: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27010: LD_VAR 0 3
27014: PPUSH
27015: LD_INT 81
27017: PUSH
27018: LD_OWVAR 2
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 91
27029: PUSH
27030: LD_VAR 0 3
27034: PUSH
27035: LD_INT 30
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: LIST
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: PPUSH
27047: CALL_OW 69
27051: PPUSH
27052: LD_VAR 0 3
27056: PPUSH
27057: CALL_OW 74
27061: PPUSH
27062: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
27066: LD_VAR 0 2
27070: PUSH
27071: LD_INT 80
27073: GREATER
27074: PUSH
27075: LD_VAR 0 3
27079: PPUSH
27080: CALL_OW 301
27084: OR
27085: IFFALSE 26962
// if un then
27087: LD_VAR 0 3
27091: IFFALSE 27102
// RemoveUnit ( un ) ;
27093: LD_VAR 0 3
27097: PPUSH
27098: CALL_OW 64
// end ;
27102: PPOPN 3
27104: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
27105: LD_EXP 90
27109: IFFALSE 27225
27111: GO 27113
27113: DISABLE
27114: LD_INT 0
27116: PPUSH
27117: PPUSH
27118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27119: LD_ADDR_VAR 0 2
27123: PUSH
27124: LD_INT 81
27126: PUSH
27127: LD_OWVAR 2
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: LD_INT 21
27138: PUSH
27139: LD_INT 1
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: PPUSH
27150: CALL_OW 69
27154: ST_TO_ADDR
// ToLua ( playComputer() ) ;
27155: LD_STRING playComputer()
27157: PPUSH
27158: CALL_OW 559
// if not tmp then
27162: LD_VAR 0 2
27166: NOT
27167: IFFALSE 27171
// exit ;
27169: GO 27225
// for i in tmp do
27171: LD_ADDR_VAR 0 1
27175: PUSH
27176: LD_VAR 0 2
27180: PUSH
27181: FOR_IN
27182: IFFALSE 27223
// for j := 1 to 4 do
27184: LD_ADDR_VAR 0 3
27188: PUSH
27189: DOUBLE
27190: LD_INT 1
27192: DEC
27193: ST_TO_ADDR
27194: LD_INT 4
27196: PUSH
27197: FOR_TO
27198: IFFALSE 27219
// SetSkill ( i , j , 10 ) ;
27200: LD_VAR 0 1
27204: PPUSH
27205: LD_VAR 0 3
27209: PPUSH
27210: LD_INT 10
27212: PPUSH
27213: CALL_OW 237
27217: GO 27197
27219: POP
27220: POP
27221: GO 27181
27223: POP
27224: POP
// end ;
27225: PPOPN 3
27227: END
// every 0 0$1 trigger s30 do var i , tmp ;
27228: LD_EXP 91
27232: IFFALSE 27301
27234: GO 27236
27236: DISABLE
27237: LD_INT 0
27239: PPUSH
27240: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27241: LD_ADDR_VAR 0 2
27245: PUSH
27246: LD_INT 22
27248: PUSH
27249: LD_OWVAR 2
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PPUSH
27258: CALL_OW 69
27262: ST_TO_ADDR
// if not tmp then
27263: LD_VAR 0 2
27267: NOT
27268: IFFALSE 27272
// exit ;
27270: GO 27301
// for i in tmp do
27272: LD_ADDR_VAR 0 1
27276: PUSH
27277: LD_VAR 0 2
27281: PUSH
27282: FOR_IN
27283: IFFALSE 27299
// SetLives ( i , 300 ) ;
27285: LD_VAR 0 1
27289: PPUSH
27290: LD_INT 300
27292: PPUSH
27293: CALL_OW 234
27297: GO 27282
27299: POP
27300: POP
// end ;
27301: PPOPN 2
27303: END
// every 0 0$1 trigger s60 do var i , tmp ;
27304: LD_EXP 92
27308: IFFALSE 27377
27310: GO 27312
27312: DISABLE
27313: LD_INT 0
27315: PPUSH
27316: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27317: LD_ADDR_VAR 0 2
27321: PUSH
27322: LD_INT 22
27324: PUSH
27325: LD_OWVAR 2
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PPUSH
27334: CALL_OW 69
27338: ST_TO_ADDR
// if not tmp then
27339: LD_VAR 0 2
27343: NOT
27344: IFFALSE 27348
// exit ;
27346: GO 27377
// for i in tmp do
27348: LD_ADDR_VAR 0 1
27352: PUSH
27353: LD_VAR 0 2
27357: PUSH
27358: FOR_IN
27359: IFFALSE 27375
// SetLives ( i , 600 ) ;
27361: LD_VAR 0 1
27365: PPUSH
27366: LD_INT 600
27368: PPUSH
27369: CALL_OW 234
27373: GO 27358
27375: POP
27376: POP
// end ;
27377: PPOPN 2
27379: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27380: LD_INT 0
27382: PPUSH
// case cmd of 301 :
27383: LD_VAR 0 1
27387: PUSH
27388: LD_INT 301
27390: DOUBLE
27391: EQUAL
27392: IFTRUE 27396
27394: GO 27428
27396: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
27397: LD_VAR 0 6
27401: PPUSH
27402: LD_VAR 0 7
27406: PPUSH
27407: LD_VAR 0 8
27411: PPUSH
27412: LD_VAR 0 4
27416: PPUSH
27417: LD_VAR 0 5
27421: PPUSH
27422: CALL 28629 0 5
27426: GO 27549
27428: LD_INT 302
27430: DOUBLE
27431: EQUAL
27432: IFTRUE 27436
27434: GO 27473
27436: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
27437: LD_VAR 0 6
27441: PPUSH
27442: LD_VAR 0 7
27446: PPUSH
27447: LD_VAR 0 8
27451: PPUSH
27452: LD_VAR 0 9
27456: PPUSH
27457: LD_VAR 0 4
27461: PPUSH
27462: LD_VAR 0 5
27466: PPUSH
27467: CALL 28720 0 6
27471: GO 27549
27473: LD_INT 303
27475: DOUBLE
27476: EQUAL
27477: IFTRUE 27481
27479: GO 27518
27481: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
27482: LD_VAR 0 6
27486: PPUSH
27487: LD_VAR 0 7
27491: PPUSH
27492: LD_VAR 0 8
27496: PPUSH
27497: LD_VAR 0 9
27501: PPUSH
27502: LD_VAR 0 4
27506: PPUSH
27507: LD_VAR 0 5
27511: PPUSH
27512: CALL 27554 0 6
27516: GO 27549
27518: LD_INT 304
27520: DOUBLE
27521: EQUAL
27522: IFTRUE 27526
27524: GO 27548
27526: POP
// hHackTeleport ( unit , x , y ) ; end ;
27527: LD_VAR 0 2
27531: PPUSH
27532: LD_VAR 0 4
27536: PPUSH
27537: LD_VAR 0 5
27541: PPUSH
27542: CALL 29313 0 3
27546: GO 27549
27548: POP
// end ;
27549: LD_VAR 0 12
27553: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27554: LD_INT 0
27556: PPUSH
27557: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27558: LD_VAR 0 1
27562: PUSH
27563: LD_INT 1
27565: LESS
27566: PUSH
27567: LD_VAR 0 1
27571: PUSH
27572: LD_INT 3
27574: GREATER
27575: OR
27576: PUSH
27577: LD_VAR 0 5
27581: PPUSH
27582: LD_VAR 0 6
27586: PPUSH
27587: CALL_OW 428
27591: OR
27592: IFFALSE 27596
// exit ;
27594: GO 28316
// uc_side := your_side ;
27596: LD_ADDR_OWVAR 20
27600: PUSH
27601: LD_OWVAR 2
27605: ST_TO_ADDR
// uc_nation := nation ;
27606: LD_ADDR_OWVAR 21
27610: PUSH
27611: LD_VAR 0 1
27615: ST_TO_ADDR
// bc_level = 1 ;
27616: LD_ADDR_OWVAR 43
27620: PUSH
27621: LD_INT 1
27623: ST_TO_ADDR
// case btype of 1 :
27624: LD_VAR 0 2
27628: PUSH
27629: LD_INT 1
27631: DOUBLE
27632: EQUAL
27633: IFTRUE 27637
27635: GO 27648
27637: POP
// bc_type := b_depot ; 2 :
27638: LD_ADDR_OWVAR 42
27642: PUSH
27643: LD_INT 0
27645: ST_TO_ADDR
27646: GO 28260
27648: LD_INT 2
27650: DOUBLE
27651: EQUAL
27652: IFTRUE 27656
27654: GO 27667
27656: POP
// bc_type := b_warehouse ; 3 :
27657: LD_ADDR_OWVAR 42
27661: PUSH
27662: LD_INT 1
27664: ST_TO_ADDR
27665: GO 28260
27667: LD_INT 3
27669: DOUBLE
27670: EQUAL
27671: IFTRUE 27675
27673: GO 27686
27675: POP
// bc_type := b_lab ; 4 .. 9 :
27676: LD_ADDR_OWVAR 42
27680: PUSH
27681: LD_INT 6
27683: ST_TO_ADDR
27684: GO 28260
27686: LD_INT 4
27688: DOUBLE
27689: GREATEREQUAL
27690: IFFALSE 27698
27692: LD_INT 9
27694: DOUBLE
27695: LESSEQUAL
27696: IFTRUE 27700
27698: GO 27752
27700: POP
// begin bc_type := b_lab_half ;
27701: LD_ADDR_OWVAR 42
27705: PUSH
27706: LD_INT 7
27708: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
27709: LD_ADDR_OWVAR 44
27713: PUSH
27714: LD_INT 10
27716: PUSH
27717: LD_INT 11
27719: PUSH
27720: LD_INT 12
27722: PUSH
27723: LD_INT 15
27725: PUSH
27726: LD_INT 14
27728: PUSH
27729: LD_INT 13
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: PUSH
27740: LD_VAR 0 2
27744: PUSH
27745: LD_INT 3
27747: MINUS
27748: ARRAY
27749: ST_TO_ADDR
// end ; 10 .. 13 :
27750: GO 28260
27752: LD_INT 10
27754: DOUBLE
27755: GREATEREQUAL
27756: IFFALSE 27764
27758: LD_INT 13
27760: DOUBLE
27761: LESSEQUAL
27762: IFTRUE 27766
27764: GO 27843
27766: POP
// begin bc_type := b_lab_full ;
27767: LD_ADDR_OWVAR 42
27771: PUSH
27772: LD_INT 8
27774: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27775: LD_ADDR_OWVAR 44
27779: PUSH
27780: LD_INT 10
27782: PUSH
27783: LD_INT 12
27785: PUSH
27786: LD_INT 14
27788: PUSH
27789: LD_INT 13
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: PUSH
27798: LD_VAR 0 2
27802: PUSH
27803: LD_INT 9
27805: MINUS
27806: ARRAY
27807: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
27808: LD_ADDR_OWVAR 45
27812: PUSH
27813: LD_INT 11
27815: PUSH
27816: LD_INT 15
27818: PUSH
27819: LD_INT 12
27821: PUSH
27822: LD_INT 15
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: PUSH
27831: LD_VAR 0 2
27835: PUSH
27836: LD_INT 9
27838: MINUS
27839: ARRAY
27840: ST_TO_ADDR
// end ; 14 :
27841: GO 28260
27843: LD_INT 14
27845: DOUBLE
27846: EQUAL
27847: IFTRUE 27851
27849: GO 27862
27851: POP
// bc_type := b_workshop ; 15 :
27852: LD_ADDR_OWVAR 42
27856: PUSH
27857: LD_INT 2
27859: ST_TO_ADDR
27860: GO 28260
27862: LD_INT 15
27864: DOUBLE
27865: EQUAL
27866: IFTRUE 27870
27868: GO 27881
27870: POP
// bc_type := b_factory ; 16 :
27871: LD_ADDR_OWVAR 42
27875: PUSH
27876: LD_INT 3
27878: ST_TO_ADDR
27879: GO 28260
27881: LD_INT 16
27883: DOUBLE
27884: EQUAL
27885: IFTRUE 27889
27887: GO 27900
27889: POP
// bc_type := b_ext_gun ; 17 :
27890: LD_ADDR_OWVAR 42
27894: PUSH
27895: LD_INT 17
27897: ST_TO_ADDR
27898: GO 28260
27900: LD_INT 17
27902: DOUBLE
27903: EQUAL
27904: IFTRUE 27908
27906: GO 27936
27908: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
27909: LD_ADDR_OWVAR 42
27913: PUSH
27914: LD_INT 19
27916: PUSH
27917: LD_INT 23
27919: PUSH
27920: LD_INT 19
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: LIST
27927: PUSH
27928: LD_VAR 0 1
27932: ARRAY
27933: ST_TO_ADDR
27934: GO 28260
27936: LD_INT 18
27938: DOUBLE
27939: EQUAL
27940: IFTRUE 27944
27942: GO 27955
27944: POP
// bc_type := b_ext_radar ; 19 :
27945: LD_ADDR_OWVAR 42
27949: PUSH
27950: LD_INT 20
27952: ST_TO_ADDR
27953: GO 28260
27955: LD_INT 19
27957: DOUBLE
27958: EQUAL
27959: IFTRUE 27963
27961: GO 27974
27963: POP
// bc_type := b_ext_radio ; 20 :
27964: LD_ADDR_OWVAR 42
27968: PUSH
27969: LD_INT 22
27971: ST_TO_ADDR
27972: GO 28260
27974: LD_INT 20
27976: DOUBLE
27977: EQUAL
27978: IFTRUE 27982
27980: GO 27993
27982: POP
// bc_type := b_ext_siberium ; 21 :
27983: LD_ADDR_OWVAR 42
27987: PUSH
27988: LD_INT 21
27990: ST_TO_ADDR
27991: GO 28260
27993: LD_INT 21
27995: DOUBLE
27996: EQUAL
27997: IFTRUE 28001
27999: GO 28012
28001: POP
// bc_type := b_ext_computer ; 22 :
28002: LD_ADDR_OWVAR 42
28006: PUSH
28007: LD_INT 24
28009: ST_TO_ADDR
28010: GO 28260
28012: LD_INT 22
28014: DOUBLE
28015: EQUAL
28016: IFTRUE 28020
28018: GO 28031
28020: POP
// bc_type := b_ext_track ; 23 :
28021: LD_ADDR_OWVAR 42
28025: PUSH
28026: LD_INT 16
28028: ST_TO_ADDR
28029: GO 28260
28031: LD_INT 23
28033: DOUBLE
28034: EQUAL
28035: IFTRUE 28039
28037: GO 28050
28039: POP
// bc_type := b_ext_laser ; 24 :
28040: LD_ADDR_OWVAR 42
28044: PUSH
28045: LD_INT 25
28047: ST_TO_ADDR
28048: GO 28260
28050: LD_INT 24
28052: DOUBLE
28053: EQUAL
28054: IFTRUE 28058
28056: GO 28069
28058: POP
// bc_type := b_control_tower ; 25 :
28059: LD_ADDR_OWVAR 42
28063: PUSH
28064: LD_INT 36
28066: ST_TO_ADDR
28067: GO 28260
28069: LD_INT 25
28071: DOUBLE
28072: EQUAL
28073: IFTRUE 28077
28075: GO 28088
28077: POP
// bc_type := b_breastwork ; 26 :
28078: LD_ADDR_OWVAR 42
28082: PUSH
28083: LD_INT 31
28085: ST_TO_ADDR
28086: GO 28260
28088: LD_INT 26
28090: DOUBLE
28091: EQUAL
28092: IFTRUE 28096
28094: GO 28107
28096: POP
// bc_type := b_bunker ; 27 :
28097: LD_ADDR_OWVAR 42
28101: PUSH
28102: LD_INT 32
28104: ST_TO_ADDR
28105: GO 28260
28107: LD_INT 27
28109: DOUBLE
28110: EQUAL
28111: IFTRUE 28115
28113: GO 28126
28115: POP
// bc_type := b_turret ; 28 :
28116: LD_ADDR_OWVAR 42
28120: PUSH
28121: LD_INT 33
28123: ST_TO_ADDR
28124: GO 28260
28126: LD_INT 28
28128: DOUBLE
28129: EQUAL
28130: IFTRUE 28134
28132: GO 28145
28134: POP
// bc_type := b_armoury ; 29 :
28135: LD_ADDR_OWVAR 42
28139: PUSH
28140: LD_INT 4
28142: ST_TO_ADDR
28143: GO 28260
28145: LD_INT 29
28147: DOUBLE
28148: EQUAL
28149: IFTRUE 28153
28151: GO 28164
28153: POP
// bc_type := b_barracks ; 30 :
28154: LD_ADDR_OWVAR 42
28158: PUSH
28159: LD_INT 5
28161: ST_TO_ADDR
28162: GO 28260
28164: LD_INT 30
28166: DOUBLE
28167: EQUAL
28168: IFTRUE 28172
28170: GO 28183
28172: POP
// bc_type := b_solar_power ; 31 :
28173: LD_ADDR_OWVAR 42
28177: PUSH
28178: LD_INT 27
28180: ST_TO_ADDR
28181: GO 28260
28183: LD_INT 31
28185: DOUBLE
28186: EQUAL
28187: IFTRUE 28191
28189: GO 28202
28191: POP
// bc_type := b_oil_power ; 32 :
28192: LD_ADDR_OWVAR 42
28196: PUSH
28197: LD_INT 26
28199: ST_TO_ADDR
28200: GO 28260
28202: LD_INT 32
28204: DOUBLE
28205: EQUAL
28206: IFTRUE 28210
28208: GO 28221
28210: POP
// bc_type := b_siberite_power ; 33 :
28211: LD_ADDR_OWVAR 42
28215: PUSH
28216: LD_INT 28
28218: ST_TO_ADDR
28219: GO 28260
28221: LD_INT 33
28223: DOUBLE
28224: EQUAL
28225: IFTRUE 28229
28227: GO 28240
28229: POP
// bc_type := b_oil_mine ; 34 :
28230: LD_ADDR_OWVAR 42
28234: PUSH
28235: LD_INT 29
28237: ST_TO_ADDR
28238: GO 28260
28240: LD_INT 34
28242: DOUBLE
28243: EQUAL
28244: IFTRUE 28248
28246: GO 28259
28248: POP
// bc_type := b_siberite_mine ; end ;
28249: LD_ADDR_OWVAR 42
28253: PUSH
28254: LD_INT 30
28256: ST_TO_ADDR
28257: GO 28260
28259: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28260: LD_ADDR_VAR 0 8
28264: PUSH
28265: LD_VAR 0 5
28269: PPUSH
28270: LD_VAR 0 6
28274: PPUSH
28275: LD_VAR 0 3
28279: PPUSH
28280: CALL_OW 47
28284: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28285: LD_OWVAR 42
28289: PUSH
28290: LD_INT 32
28292: PUSH
28293: LD_INT 33
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: IN
28300: IFFALSE 28316
// PlaceWeaponTurret ( b , weapon ) ;
28302: LD_VAR 0 8
28306: PPUSH
28307: LD_VAR 0 4
28311: PPUSH
28312: CALL_OW 431
// end ;
28316: LD_VAR 0 7
28320: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
28321: LD_INT 0
28323: PPUSH
28324: PPUSH
28325: PPUSH
28326: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28327: LD_ADDR_VAR 0 4
28331: PUSH
28332: LD_INT 22
28334: PUSH
28335: LD_OWVAR 2
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 2
28346: PUSH
28347: LD_INT 30
28349: PUSH
28350: LD_INT 0
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 30
28359: PUSH
28360: LD_INT 1
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: LIST
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PPUSH
28376: CALL_OW 69
28380: ST_TO_ADDR
// if not tmp then
28381: LD_VAR 0 4
28385: NOT
28386: IFFALSE 28390
// exit ;
28388: GO 28449
// for i in tmp do
28390: LD_ADDR_VAR 0 2
28394: PUSH
28395: LD_VAR 0 4
28399: PUSH
28400: FOR_IN
28401: IFFALSE 28447
// for j = 1 to 3 do
28403: LD_ADDR_VAR 0 3
28407: PUSH
28408: DOUBLE
28409: LD_INT 1
28411: DEC
28412: ST_TO_ADDR
28413: LD_INT 3
28415: PUSH
28416: FOR_TO
28417: IFFALSE 28443
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
28419: LD_VAR 0 2
28423: PPUSH
28424: CALL_OW 274
28428: PPUSH
28429: LD_VAR 0 3
28433: PPUSH
28434: LD_INT 99999
28436: PPUSH
28437: CALL_OW 277
28441: GO 28416
28443: POP
28444: POP
28445: GO 28400
28447: POP
28448: POP
// end ;
28449: LD_VAR 0 1
28453: RET
// export function hHackSetLevel10 ; var i , j ; begin
28454: LD_INT 0
28456: PPUSH
28457: PPUSH
28458: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28459: LD_ADDR_VAR 0 2
28463: PUSH
28464: LD_INT 21
28466: PUSH
28467: LD_INT 1
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PPUSH
28474: CALL_OW 69
28478: PUSH
28479: FOR_IN
28480: IFFALSE 28532
// if IsSelected ( i ) then
28482: LD_VAR 0 2
28486: PPUSH
28487: CALL_OW 306
28491: IFFALSE 28530
// begin for j := 1 to 4 do
28493: LD_ADDR_VAR 0 3
28497: PUSH
28498: DOUBLE
28499: LD_INT 1
28501: DEC
28502: ST_TO_ADDR
28503: LD_INT 4
28505: PUSH
28506: FOR_TO
28507: IFFALSE 28528
// SetSkill ( i , j , 10 ) ;
28509: LD_VAR 0 2
28513: PPUSH
28514: LD_VAR 0 3
28518: PPUSH
28519: LD_INT 10
28521: PPUSH
28522: CALL_OW 237
28526: GO 28506
28528: POP
28529: POP
// end ;
28530: GO 28479
28532: POP
28533: POP
// end ;
28534: LD_VAR 0 1
28538: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
28539: LD_INT 0
28541: PPUSH
28542: PPUSH
28543: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
28544: LD_ADDR_VAR 0 2
28548: PUSH
28549: LD_INT 22
28551: PUSH
28552: LD_OWVAR 2
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 21
28563: PUSH
28564: LD_INT 1
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PPUSH
28575: CALL_OW 69
28579: PUSH
28580: FOR_IN
28581: IFFALSE 28622
// begin for j := 1 to 4 do
28583: LD_ADDR_VAR 0 3
28587: PUSH
28588: DOUBLE
28589: LD_INT 1
28591: DEC
28592: ST_TO_ADDR
28593: LD_INT 4
28595: PUSH
28596: FOR_TO
28597: IFFALSE 28618
// SetSkill ( i , j , 10 ) ;
28599: LD_VAR 0 2
28603: PPUSH
28604: LD_VAR 0 3
28608: PPUSH
28609: LD_INT 10
28611: PPUSH
28612: CALL_OW 237
28616: GO 28596
28618: POP
28619: POP
// end ;
28620: GO 28580
28622: POP
28623: POP
// end ;
28624: LD_VAR 0 1
28628: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
28629: LD_INT 0
28631: PPUSH
// uc_side := your_side ;
28632: LD_ADDR_OWVAR 20
28636: PUSH
28637: LD_OWVAR 2
28641: ST_TO_ADDR
// uc_nation := nation ;
28642: LD_ADDR_OWVAR 21
28646: PUSH
28647: LD_VAR 0 1
28651: ST_TO_ADDR
// InitHc ;
28652: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28656: LD_INT 0
28658: PPUSH
28659: LD_VAR 0 2
28663: PPUSH
28664: LD_VAR 0 3
28668: PPUSH
28669: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28673: LD_VAR 0 4
28677: PPUSH
28678: LD_VAR 0 5
28682: PPUSH
28683: CALL_OW 428
28687: PUSH
28688: LD_INT 0
28690: EQUAL
28691: IFFALSE 28715
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
28693: CALL_OW 44
28697: PPUSH
28698: LD_VAR 0 4
28702: PPUSH
28703: LD_VAR 0 5
28707: PPUSH
28708: LD_INT 1
28710: PPUSH
28711: CALL_OW 48
// end ;
28715: LD_VAR 0 6
28719: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28720: LD_INT 0
28722: PPUSH
28723: PPUSH
// uc_side := your_side ;
28724: LD_ADDR_OWVAR 20
28728: PUSH
28729: LD_OWVAR 2
28733: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28734: LD_VAR 0 1
28738: PUSH
28739: LD_INT 1
28741: PUSH
28742: LD_INT 2
28744: PUSH
28745: LD_INT 3
28747: PUSH
28748: LD_INT 4
28750: PUSH
28751: LD_INT 5
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: IN
28761: IFFALSE 28773
// uc_nation := nation_american else
28763: LD_ADDR_OWVAR 21
28767: PUSH
28768: LD_INT 1
28770: ST_TO_ADDR
28771: GO 28816
// if chassis in [ 11 , 12 , 13 , 14 ] then
28773: LD_VAR 0 1
28777: PUSH
28778: LD_INT 11
28780: PUSH
28781: LD_INT 12
28783: PUSH
28784: LD_INT 13
28786: PUSH
28787: LD_INT 14
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: LIST
28794: LIST
28795: IN
28796: IFFALSE 28808
// uc_nation := nation_arabian else
28798: LD_ADDR_OWVAR 21
28802: PUSH
28803: LD_INT 2
28805: ST_TO_ADDR
28806: GO 28816
// uc_nation := nation_russian ;
28808: LD_ADDR_OWVAR 21
28812: PUSH
28813: LD_INT 3
28815: ST_TO_ADDR
// vc_chassis := chassis ;
28816: LD_ADDR_OWVAR 37
28820: PUSH
28821: LD_VAR 0 1
28825: ST_TO_ADDR
// vc_engine := engine ;
28826: LD_ADDR_OWVAR 39
28830: PUSH
28831: LD_VAR 0 2
28835: ST_TO_ADDR
// vc_control := control ;
28836: LD_ADDR_OWVAR 38
28840: PUSH
28841: LD_VAR 0 3
28845: ST_TO_ADDR
// vc_weapon := weapon ;
28846: LD_ADDR_OWVAR 40
28850: PUSH
28851: LD_VAR 0 4
28855: ST_TO_ADDR
// un := CreateVehicle ;
28856: LD_ADDR_VAR 0 8
28860: PUSH
28861: CALL_OW 45
28865: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
28866: LD_VAR 0 8
28870: PPUSH
28871: LD_INT 0
28873: PPUSH
28874: LD_INT 5
28876: PPUSH
28877: CALL_OW 12
28881: PPUSH
28882: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
28886: LD_VAR 0 8
28890: PPUSH
28891: LD_VAR 0 5
28895: PPUSH
28896: LD_VAR 0 6
28900: PPUSH
28901: LD_INT 1
28903: PPUSH
28904: CALL_OW 48
// end ;
28908: LD_VAR 0 7
28912: RET
// export hInvincible ; every 1 do
28913: GO 28915
28915: DISABLE
// hInvincible := [ ] ;
28916: LD_ADDR_EXP 93
28920: PUSH
28921: EMPTY
28922: ST_TO_ADDR
28923: END
// every 10 do var i ;
28924: GO 28926
28926: DISABLE
28927: LD_INT 0
28929: PPUSH
// begin enable ;
28930: ENABLE
// if not hInvincible then
28931: LD_EXP 93
28935: NOT
28936: IFFALSE 28940
// exit ;
28938: GO 28984
// for i in hInvincible do
28940: LD_ADDR_VAR 0 1
28944: PUSH
28945: LD_EXP 93
28949: PUSH
28950: FOR_IN
28951: IFFALSE 28982
// if GetLives ( i ) < 1000 then
28953: LD_VAR 0 1
28957: PPUSH
28958: CALL_OW 256
28962: PUSH
28963: LD_INT 1000
28965: LESS
28966: IFFALSE 28980
// SetLives ( i , 1000 ) ;
28968: LD_VAR 0 1
28972: PPUSH
28973: LD_INT 1000
28975: PPUSH
28976: CALL_OW 234
28980: GO 28950
28982: POP
28983: POP
// end ;
28984: PPOPN 1
28986: END
// export function hHackInvincible ; var i ; begin
28987: LD_INT 0
28989: PPUSH
28990: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
28991: LD_ADDR_VAR 0 2
28995: PUSH
28996: LD_INT 2
28998: PUSH
28999: LD_INT 21
29001: PUSH
29002: LD_INT 1
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: LD_INT 21
29011: PUSH
29012: LD_INT 2
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: LIST
29023: PPUSH
29024: CALL_OW 69
29028: PUSH
29029: FOR_IN
29030: IFFALSE 29091
// if IsSelected ( i ) then
29032: LD_VAR 0 2
29036: PPUSH
29037: CALL_OW 306
29041: IFFALSE 29089
// begin if i in hInvincible then
29043: LD_VAR 0 2
29047: PUSH
29048: LD_EXP 93
29052: IN
29053: IFFALSE 29073
// hInvincible := hInvincible diff i else
29055: LD_ADDR_EXP 93
29059: PUSH
29060: LD_EXP 93
29064: PUSH
29065: LD_VAR 0 2
29069: DIFF
29070: ST_TO_ADDR
29071: GO 29089
// hInvincible := hInvincible union i ;
29073: LD_ADDR_EXP 93
29077: PUSH
29078: LD_EXP 93
29082: PUSH
29083: LD_VAR 0 2
29087: UNION
29088: ST_TO_ADDR
// end ;
29089: GO 29029
29091: POP
29092: POP
// end ;
29093: LD_VAR 0 1
29097: RET
// export function hHackInvisible ; var i , j ; begin
29098: LD_INT 0
29100: PPUSH
29101: PPUSH
29102: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29103: LD_ADDR_VAR 0 2
29107: PUSH
29108: LD_INT 21
29110: PUSH
29111: LD_INT 1
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PPUSH
29118: CALL_OW 69
29122: PUSH
29123: FOR_IN
29124: IFFALSE 29148
// if IsSelected ( i ) then
29126: LD_VAR 0 2
29130: PPUSH
29131: CALL_OW 306
29135: IFFALSE 29146
// ComForceInvisible ( i ) ;
29137: LD_VAR 0 2
29141: PPUSH
29142: CALL_OW 496
29146: GO 29123
29148: POP
29149: POP
// end ;
29150: LD_VAR 0 1
29154: RET
// export function hHackChangeYourSide ; begin
29155: LD_INT 0
29157: PPUSH
// if your_side = 8 then
29158: LD_OWVAR 2
29162: PUSH
29163: LD_INT 8
29165: EQUAL
29166: IFFALSE 29178
// your_side := 0 else
29168: LD_ADDR_OWVAR 2
29172: PUSH
29173: LD_INT 0
29175: ST_TO_ADDR
29176: GO 29192
// your_side := your_side + 1 ;
29178: LD_ADDR_OWVAR 2
29182: PUSH
29183: LD_OWVAR 2
29187: PUSH
29188: LD_INT 1
29190: PLUS
29191: ST_TO_ADDR
// end ;
29192: LD_VAR 0 1
29196: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29197: LD_INT 0
29199: PPUSH
29200: PPUSH
29201: PPUSH
// for i in all_units do
29202: LD_ADDR_VAR 0 2
29206: PUSH
29207: LD_OWVAR 3
29211: PUSH
29212: FOR_IN
29213: IFFALSE 29291
// if IsSelected ( i ) then
29215: LD_VAR 0 2
29219: PPUSH
29220: CALL_OW 306
29224: IFFALSE 29289
// begin j := GetSide ( i ) ;
29226: LD_ADDR_VAR 0 3
29230: PUSH
29231: LD_VAR 0 2
29235: PPUSH
29236: CALL_OW 255
29240: ST_TO_ADDR
// if j = 8 then
29241: LD_VAR 0 3
29245: PUSH
29246: LD_INT 8
29248: EQUAL
29249: IFFALSE 29261
// j := 0 else
29251: LD_ADDR_VAR 0 3
29255: PUSH
29256: LD_INT 0
29258: ST_TO_ADDR
29259: GO 29275
// j := j + 1 ;
29261: LD_ADDR_VAR 0 3
29265: PUSH
29266: LD_VAR 0 3
29270: PUSH
29271: LD_INT 1
29273: PLUS
29274: ST_TO_ADDR
// SetSide ( i , j ) ;
29275: LD_VAR 0 2
29279: PPUSH
29280: LD_VAR 0 3
29284: PPUSH
29285: CALL_OW 235
// end ;
29289: GO 29212
29291: POP
29292: POP
// end ;
29293: LD_VAR 0 1
29297: RET
// export function hHackFog ; begin
29298: LD_INT 0
29300: PPUSH
// FogOff ( true ) ;
29301: LD_INT 1
29303: PPUSH
29304: CALL_OW 344
// end ;
29308: LD_VAR 0 1
29312: RET
// export function hHackTeleport ( unit , x , y ) ; begin
29313: LD_INT 0
29315: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
29316: LD_VAR 0 1
29320: PPUSH
29321: LD_VAR 0 2
29325: PPUSH
29326: LD_VAR 0 3
29330: PPUSH
29331: LD_INT 1
29333: PPUSH
29334: LD_INT 1
29336: PPUSH
29337: CALL_OW 483
// CenterOnXY ( x , y ) ;
29341: LD_VAR 0 2
29345: PPUSH
29346: LD_VAR 0 3
29350: PPUSH
29351: CALL_OW 84
// end ;
29355: LD_VAR 0 4
29359: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
29360: LD_INT 0
29362: PPUSH
29363: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
29364: LD_VAR 0 1
29368: NOT
29369: PUSH
29370: LD_VAR 0 2
29374: PPUSH
29375: LD_VAR 0 3
29379: PPUSH
29380: CALL_OW 488
29384: NOT
29385: OR
29386: PUSH
29387: LD_VAR 0 1
29391: PPUSH
29392: CALL_OW 266
29396: PUSH
29397: LD_INT 3
29399: NONEQUAL
29400: PUSH
29401: LD_VAR 0 1
29405: PPUSH
29406: CALL_OW 247
29410: PUSH
29411: LD_INT 1
29413: EQUAL
29414: NOT
29415: AND
29416: OR
29417: IFFALSE 29421
// exit ;
29419: GO 29570
// if GetType ( factory ) = unit_human then
29421: LD_VAR 0 1
29425: PPUSH
29426: CALL_OW 247
29430: PUSH
29431: LD_INT 1
29433: EQUAL
29434: IFFALSE 29451
// factory := IsInUnit ( factory ) ;
29436: LD_ADDR_VAR 0 1
29440: PUSH
29441: LD_VAR 0 1
29445: PPUSH
29446: CALL_OW 310
29450: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
29451: LD_VAR 0 1
29455: PPUSH
29456: CALL_OW 266
29460: PUSH
29461: LD_INT 3
29463: NONEQUAL
29464: IFFALSE 29468
// exit ;
29466: GO 29570
// if HexInfo ( x , y ) = factory then
29468: LD_VAR 0 2
29472: PPUSH
29473: LD_VAR 0 3
29477: PPUSH
29478: CALL_OW 428
29482: PUSH
29483: LD_VAR 0 1
29487: EQUAL
29488: IFFALSE 29515
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
29490: LD_ADDR_EXP 94
29494: PUSH
29495: LD_EXP 94
29499: PPUSH
29500: LD_VAR 0 1
29504: PPUSH
29505: LD_INT 0
29507: PPUSH
29508: CALL_OW 1
29512: ST_TO_ADDR
29513: GO 29566
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
29515: LD_ADDR_EXP 94
29519: PUSH
29520: LD_EXP 94
29524: PPUSH
29525: LD_VAR 0 1
29529: PPUSH
29530: LD_VAR 0 1
29534: PPUSH
29535: CALL_OW 255
29539: PUSH
29540: LD_VAR 0 1
29544: PUSH
29545: LD_VAR 0 2
29549: PUSH
29550: LD_VAR 0 3
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: PPUSH
29561: CALL_OW 1
29565: ST_TO_ADDR
// UpdateFactoryWaypoints ;
29566: CALL 29575 0 0
// end ;
29570: LD_VAR 0 4
29574: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
29575: LD_INT 0
29577: PPUSH
29578: PPUSH
29579: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
29580: LD_STRING resetFactoryWaypoint();
29582: PPUSH
29583: CALL_OW 559
// if factoryWaypoints then
29587: LD_EXP 94
29591: IFFALSE 29717
// begin list := PrepareArray ( factoryWaypoints ) ;
29593: LD_ADDR_VAR 0 3
29597: PUSH
29598: LD_EXP 94
29602: PPUSH
29603: CALL 71838 0 1
29607: ST_TO_ADDR
// for i := 1 to list do
29608: LD_ADDR_VAR 0 2
29612: PUSH
29613: DOUBLE
29614: LD_INT 1
29616: DEC
29617: ST_TO_ADDR
29618: LD_VAR 0 3
29622: PUSH
29623: FOR_TO
29624: IFFALSE 29715
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
29626: LD_STRING setFactoryWaypointXY(
29628: PUSH
29629: LD_VAR 0 3
29633: PUSH
29634: LD_VAR 0 2
29638: ARRAY
29639: PUSH
29640: LD_INT 1
29642: ARRAY
29643: STR
29644: PUSH
29645: LD_STRING ,
29647: STR
29648: PUSH
29649: LD_VAR 0 3
29653: PUSH
29654: LD_VAR 0 2
29658: ARRAY
29659: PUSH
29660: LD_INT 2
29662: ARRAY
29663: STR
29664: PUSH
29665: LD_STRING ,
29667: STR
29668: PUSH
29669: LD_VAR 0 3
29673: PUSH
29674: LD_VAR 0 2
29678: ARRAY
29679: PUSH
29680: LD_INT 3
29682: ARRAY
29683: STR
29684: PUSH
29685: LD_STRING ,
29687: STR
29688: PUSH
29689: LD_VAR 0 3
29693: PUSH
29694: LD_VAR 0 2
29698: ARRAY
29699: PUSH
29700: LD_INT 4
29702: ARRAY
29703: STR
29704: PUSH
29705: LD_STRING )
29707: STR
29708: PPUSH
29709: CALL_OW 559
29713: GO 29623
29715: POP
29716: POP
// end ; end ;
29717: LD_VAR 0 1
29721: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
29722: LD_INT 0
29724: PPUSH
// if HexInfo ( x , y ) = warehouse then
29725: LD_VAR 0 2
29729: PPUSH
29730: LD_VAR 0 3
29734: PPUSH
29735: CALL_OW 428
29739: PUSH
29740: LD_VAR 0 1
29744: EQUAL
29745: IFFALSE 29772
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
29747: LD_ADDR_EXP 95
29751: PUSH
29752: LD_EXP 95
29756: PPUSH
29757: LD_VAR 0 1
29761: PPUSH
29762: LD_INT 0
29764: PPUSH
29765: CALL_OW 1
29769: ST_TO_ADDR
29770: GO 29823
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
29772: LD_ADDR_EXP 95
29776: PUSH
29777: LD_EXP 95
29781: PPUSH
29782: LD_VAR 0 1
29786: PPUSH
29787: LD_VAR 0 1
29791: PPUSH
29792: CALL_OW 255
29796: PUSH
29797: LD_VAR 0 1
29801: PUSH
29802: LD_VAR 0 2
29806: PUSH
29807: LD_VAR 0 3
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: PPUSH
29818: CALL_OW 1
29822: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
29823: CALL 29832 0 0
// end ;
29827: LD_VAR 0 4
29831: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
29832: LD_INT 0
29834: PPUSH
29835: PPUSH
29836: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
29837: LD_STRING resetWarehouseGatheringPoints();
29839: PPUSH
29840: CALL_OW 559
// if warehouseGatheringPoints then
29844: LD_EXP 95
29848: IFFALSE 29974
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
29850: LD_ADDR_VAR 0 3
29854: PUSH
29855: LD_EXP 95
29859: PPUSH
29860: CALL 71838 0 1
29864: ST_TO_ADDR
// for i := 1 to list do
29865: LD_ADDR_VAR 0 2
29869: PUSH
29870: DOUBLE
29871: LD_INT 1
29873: DEC
29874: ST_TO_ADDR
29875: LD_VAR 0 3
29879: PUSH
29880: FOR_TO
29881: IFFALSE 29972
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
29883: LD_STRING setWarehouseGatheringPointXY(
29885: PUSH
29886: LD_VAR 0 3
29890: PUSH
29891: LD_VAR 0 2
29895: ARRAY
29896: PUSH
29897: LD_INT 1
29899: ARRAY
29900: STR
29901: PUSH
29902: LD_STRING ,
29904: STR
29905: PUSH
29906: LD_VAR 0 3
29910: PUSH
29911: LD_VAR 0 2
29915: ARRAY
29916: PUSH
29917: LD_INT 2
29919: ARRAY
29920: STR
29921: PUSH
29922: LD_STRING ,
29924: STR
29925: PUSH
29926: LD_VAR 0 3
29930: PUSH
29931: LD_VAR 0 2
29935: ARRAY
29936: PUSH
29937: LD_INT 3
29939: ARRAY
29940: STR
29941: PUSH
29942: LD_STRING ,
29944: STR
29945: PUSH
29946: LD_VAR 0 3
29950: PUSH
29951: LD_VAR 0 2
29955: ARRAY
29956: PUSH
29957: LD_INT 4
29959: ARRAY
29960: STR
29961: PUSH
29962: LD_STRING )
29964: STR
29965: PPUSH
29966: CALL_OW 559
29970: GO 29880
29972: POP
29973: POP
// end ; end ;
29974: LD_VAR 0 1
29978: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
29979: LD_EXP 95
29983: IFFALSE 30670
29985: GO 29987
29987: DISABLE
29988: LD_INT 0
29990: PPUSH
29991: PPUSH
29992: PPUSH
29993: PPUSH
29994: PPUSH
29995: PPUSH
29996: PPUSH
29997: PPUSH
29998: PPUSH
// begin enable ;
29999: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
30000: LD_ADDR_VAR 0 3
30004: PUSH
30005: LD_EXP 95
30009: PPUSH
30010: CALL 71838 0 1
30014: ST_TO_ADDR
// if not list then
30015: LD_VAR 0 3
30019: NOT
30020: IFFALSE 30024
// exit ;
30022: GO 30670
// for i := 1 to list do
30024: LD_ADDR_VAR 0 1
30028: PUSH
30029: DOUBLE
30030: LD_INT 1
30032: DEC
30033: ST_TO_ADDR
30034: LD_VAR 0 3
30038: PUSH
30039: FOR_TO
30040: IFFALSE 30668
// begin depot := list [ i ] [ 2 ] ;
30042: LD_ADDR_VAR 0 8
30046: PUSH
30047: LD_VAR 0 3
30051: PUSH
30052: LD_VAR 0 1
30056: ARRAY
30057: PUSH
30058: LD_INT 2
30060: ARRAY
30061: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
30062: LD_ADDR_VAR 0 5
30066: PUSH
30067: LD_VAR 0 3
30071: PUSH
30072: LD_VAR 0 1
30076: ARRAY
30077: PUSH
30078: LD_INT 1
30080: ARRAY
30081: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
30082: LD_VAR 0 8
30086: PPUSH
30087: CALL_OW 301
30091: PUSH
30092: LD_VAR 0 5
30096: PUSH
30097: LD_VAR 0 8
30101: PPUSH
30102: CALL_OW 255
30106: NONEQUAL
30107: OR
30108: IFFALSE 30137
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
30110: LD_ADDR_EXP 95
30114: PUSH
30115: LD_EXP 95
30119: PPUSH
30120: LD_VAR 0 8
30124: PPUSH
30125: LD_INT 0
30127: PPUSH
30128: CALL_OW 1
30132: ST_TO_ADDR
// exit ;
30133: POP
30134: POP
30135: GO 30670
// end ; x := list [ i ] [ 3 ] ;
30137: LD_ADDR_VAR 0 6
30141: PUSH
30142: LD_VAR 0 3
30146: PUSH
30147: LD_VAR 0 1
30151: ARRAY
30152: PUSH
30153: LD_INT 3
30155: ARRAY
30156: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
30157: LD_ADDR_VAR 0 7
30161: PUSH
30162: LD_VAR 0 3
30166: PUSH
30167: LD_VAR 0 1
30171: ARRAY
30172: PUSH
30173: LD_INT 4
30175: ARRAY
30176: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
30177: LD_ADDR_VAR 0 9
30181: PUSH
30182: LD_VAR 0 6
30186: PPUSH
30187: LD_VAR 0 7
30191: PPUSH
30192: LD_INT 16
30194: PPUSH
30195: CALL 70422 0 3
30199: ST_TO_ADDR
// if not cratesNearbyPoint then
30200: LD_VAR 0 9
30204: NOT
30205: IFFALSE 30211
// exit ;
30207: POP
30208: POP
30209: GO 30670
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
30211: LD_ADDR_VAR 0 4
30215: PUSH
30216: LD_INT 22
30218: PUSH
30219: LD_VAR 0 5
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: LD_INT 3
30230: PUSH
30231: LD_INT 60
30233: PUSH
30234: EMPTY
30235: LIST
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 91
30243: PUSH
30244: LD_VAR 0 8
30248: PUSH
30249: LD_INT 6
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 2
30259: PUSH
30260: LD_INT 25
30262: PUSH
30263: LD_INT 2
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 25
30272: PUSH
30273: LD_INT 16
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: LIST
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: PPUSH
30291: CALL_OW 69
30295: PUSH
30296: LD_VAR 0 8
30300: PPUSH
30301: CALL_OW 313
30305: PPUSH
30306: LD_INT 3
30308: PUSH
30309: LD_INT 60
30311: PUSH
30312: EMPTY
30313: LIST
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 2
30321: PUSH
30322: LD_INT 25
30324: PUSH
30325: LD_INT 2
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 25
30334: PUSH
30335: LD_INT 16
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: LIST
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PPUSH
30351: CALL_OW 72
30355: UNION
30356: ST_TO_ADDR
// if tmp then
30357: LD_VAR 0 4
30361: IFFALSE 30441
// begin tmp := ShrinkArray ( tmp , 3 ) ;
30363: LD_ADDR_VAR 0 4
30367: PUSH
30368: LD_VAR 0 4
30372: PPUSH
30373: LD_INT 3
30375: PPUSH
30376: CALL 68389 0 2
30380: ST_TO_ADDR
// for j in tmp do
30381: LD_ADDR_VAR 0 2
30385: PUSH
30386: LD_VAR 0 4
30390: PUSH
30391: FOR_IN
30392: IFFALSE 30435
// begin if IsInUnit ( j ) then
30394: LD_VAR 0 2
30398: PPUSH
30399: CALL_OW 310
30403: IFFALSE 30414
// ComExit ( j ) ;
30405: LD_VAR 0 2
30409: PPUSH
30410: CALL 68472 0 1
// AddComCollect ( j , x , y ) ;
30414: LD_VAR 0 2
30418: PPUSH
30419: LD_VAR 0 6
30423: PPUSH
30424: LD_VAR 0 7
30428: PPUSH
30429: CALL_OW 177
// end ;
30433: GO 30391
30435: POP
30436: POP
// exit ;
30437: POP
30438: POP
30439: GO 30670
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
30441: LD_ADDR_VAR 0 4
30445: PUSH
30446: LD_INT 22
30448: PUSH
30449: LD_VAR 0 5
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 91
30460: PUSH
30461: LD_VAR 0 8
30465: PUSH
30466: LD_INT 8
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 2
30476: PUSH
30477: LD_INT 34
30479: PUSH
30480: LD_INT 12
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: LD_INT 34
30489: PUSH
30490: LD_INT 51
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: LD_INT 34
30499: PUSH
30500: LD_INT 32
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: LD_INT 34
30509: PUSH
30510: LD_EXP 98
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: LIST
30530: PPUSH
30531: CALL_OW 69
30535: ST_TO_ADDR
// if tmp then
30536: LD_VAR 0 4
30540: IFFALSE 30666
// begin for j in tmp do
30542: LD_ADDR_VAR 0 2
30546: PUSH
30547: LD_VAR 0 4
30551: PUSH
30552: FOR_IN
30553: IFFALSE 30664
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
30555: LD_VAR 0 2
30559: PPUSH
30560: CALL_OW 262
30564: PUSH
30565: LD_INT 3
30567: EQUAL
30568: PUSH
30569: LD_VAR 0 2
30573: PPUSH
30574: CALL_OW 261
30578: PUSH
30579: LD_INT 20
30581: GREATER
30582: OR
30583: PUSH
30584: LD_VAR 0 2
30588: PPUSH
30589: CALL_OW 314
30593: NOT
30594: AND
30595: PUSH
30596: LD_VAR 0 2
30600: PPUSH
30601: CALL_OW 263
30605: PUSH
30606: LD_INT 1
30608: NONEQUAL
30609: PUSH
30610: LD_VAR 0 2
30614: PPUSH
30615: CALL_OW 311
30619: OR
30620: AND
30621: IFFALSE 30662
// begin ComCollect ( j , x , y ) ;
30623: LD_VAR 0 2
30627: PPUSH
30628: LD_VAR 0 6
30632: PPUSH
30633: LD_VAR 0 7
30637: PPUSH
30638: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
30642: LD_VAR 0 2
30646: PPUSH
30647: LD_VAR 0 8
30651: PPUSH
30652: CALL_OW 172
// exit ;
30656: POP
30657: POP
30658: POP
30659: POP
30660: GO 30670
// end ;
30662: GO 30552
30664: POP
30665: POP
// end ; end ;
30666: GO 30039
30668: POP
30669: POP
// end ; end_of_file end_of_file
30670: PPOPN 9
30672: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30673: LD_INT 0
30675: PPUSH
30676: PPUSH
// if exist_mode then
30677: LD_VAR 0 2
30681: IFFALSE 30706
// unit := CreateCharacter ( prefix & ident ) else
30683: LD_ADDR_VAR 0 5
30687: PUSH
30688: LD_VAR 0 3
30692: PUSH
30693: LD_VAR 0 1
30697: STR
30698: PPUSH
30699: CALL_OW 34
30703: ST_TO_ADDR
30704: GO 30721
// unit := NewCharacter ( ident ) ;
30706: LD_ADDR_VAR 0 5
30710: PUSH
30711: LD_VAR 0 1
30715: PPUSH
30716: CALL_OW 25
30720: ST_TO_ADDR
// result := unit ;
30721: LD_ADDR_VAR 0 4
30725: PUSH
30726: LD_VAR 0 5
30730: ST_TO_ADDR
// end ;
30731: LD_VAR 0 4
30735: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30736: LD_INT 0
30738: PPUSH
30739: PPUSH
// if not side or not nation then
30740: LD_VAR 0 1
30744: NOT
30745: PUSH
30746: LD_VAR 0 2
30750: NOT
30751: OR
30752: IFFALSE 30756
// exit ;
30754: GO 31524
// case nation of nation_american :
30756: LD_VAR 0 2
30760: PUSH
30761: LD_INT 1
30763: DOUBLE
30764: EQUAL
30765: IFTRUE 30769
30767: GO 30983
30769: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30770: LD_ADDR_VAR 0 4
30774: PUSH
30775: LD_INT 35
30777: PUSH
30778: LD_INT 45
30780: PUSH
30781: LD_INT 46
30783: PUSH
30784: LD_INT 47
30786: PUSH
30787: LD_INT 82
30789: PUSH
30790: LD_INT 83
30792: PUSH
30793: LD_INT 84
30795: PUSH
30796: LD_INT 85
30798: PUSH
30799: LD_INT 86
30801: PUSH
30802: LD_INT 1
30804: PUSH
30805: LD_INT 2
30807: PUSH
30808: LD_INT 6
30810: PUSH
30811: LD_INT 15
30813: PUSH
30814: LD_INT 16
30816: PUSH
30817: LD_INT 7
30819: PUSH
30820: LD_INT 12
30822: PUSH
30823: LD_INT 13
30825: PUSH
30826: LD_INT 10
30828: PUSH
30829: LD_INT 14
30831: PUSH
30832: LD_INT 20
30834: PUSH
30835: LD_INT 21
30837: PUSH
30838: LD_INT 22
30840: PUSH
30841: LD_INT 25
30843: PUSH
30844: LD_INT 32
30846: PUSH
30847: LD_INT 27
30849: PUSH
30850: LD_INT 36
30852: PUSH
30853: LD_INT 69
30855: PUSH
30856: LD_INT 39
30858: PUSH
30859: LD_INT 34
30861: PUSH
30862: LD_INT 40
30864: PUSH
30865: LD_INT 48
30867: PUSH
30868: LD_INT 49
30870: PUSH
30871: LD_INT 50
30873: PUSH
30874: LD_INT 51
30876: PUSH
30877: LD_INT 52
30879: PUSH
30880: LD_INT 53
30882: PUSH
30883: LD_INT 54
30885: PUSH
30886: LD_INT 55
30888: PUSH
30889: LD_INT 56
30891: PUSH
30892: LD_INT 57
30894: PUSH
30895: LD_INT 58
30897: PUSH
30898: LD_INT 59
30900: PUSH
30901: LD_INT 60
30903: PUSH
30904: LD_INT 61
30906: PUSH
30907: LD_INT 62
30909: PUSH
30910: LD_INT 80
30912: PUSH
30913: LD_INT 82
30915: PUSH
30916: LD_INT 83
30918: PUSH
30919: LD_INT 84
30921: PUSH
30922: LD_INT 85
30924: PUSH
30925: LD_INT 86
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: ST_TO_ADDR
30981: GO 31448
30983: LD_INT 2
30985: DOUBLE
30986: EQUAL
30987: IFTRUE 30991
30989: GO 31217
30991: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30992: LD_ADDR_VAR 0 4
30996: PUSH
30997: LD_INT 35
30999: PUSH
31000: LD_INT 45
31002: PUSH
31003: LD_INT 46
31005: PUSH
31006: LD_INT 47
31008: PUSH
31009: LD_INT 82
31011: PUSH
31012: LD_INT 83
31014: PUSH
31015: LD_INT 84
31017: PUSH
31018: LD_INT 85
31020: PUSH
31021: LD_INT 87
31023: PUSH
31024: LD_INT 70
31026: PUSH
31027: LD_INT 1
31029: PUSH
31030: LD_INT 11
31032: PUSH
31033: LD_INT 3
31035: PUSH
31036: LD_INT 4
31038: PUSH
31039: LD_INT 5
31041: PUSH
31042: LD_INT 6
31044: PUSH
31045: LD_INT 15
31047: PUSH
31048: LD_INT 18
31050: PUSH
31051: LD_INT 7
31053: PUSH
31054: LD_INT 17
31056: PUSH
31057: LD_INT 8
31059: PUSH
31060: LD_INT 20
31062: PUSH
31063: LD_INT 21
31065: PUSH
31066: LD_INT 22
31068: PUSH
31069: LD_INT 72
31071: PUSH
31072: LD_INT 26
31074: PUSH
31075: LD_INT 69
31077: PUSH
31078: LD_INT 39
31080: PUSH
31081: LD_INT 40
31083: PUSH
31084: LD_INT 41
31086: PUSH
31087: LD_INT 42
31089: PUSH
31090: LD_INT 43
31092: PUSH
31093: LD_INT 48
31095: PUSH
31096: LD_INT 49
31098: PUSH
31099: LD_INT 50
31101: PUSH
31102: LD_INT 51
31104: PUSH
31105: LD_INT 52
31107: PUSH
31108: LD_INT 53
31110: PUSH
31111: LD_INT 54
31113: PUSH
31114: LD_INT 55
31116: PUSH
31117: LD_INT 56
31119: PUSH
31120: LD_INT 60
31122: PUSH
31123: LD_INT 61
31125: PUSH
31126: LD_INT 62
31128: PUSH
31129: LD_INT 66
31131: PUSH
31132: LD_INT 67
31134: PUSH
31135: LD_INT 68
31137: PUSH
31138: LD_INT 81
31140: PUSH
31141: LD_INT 82
31143: PUSH
31144: LD_INT 83
31146: PUSH
31147: LD_INT 84
31149: PUSH
31150: LD_INT 85
31152: PUSH
31153: LD_INT 87
31155: PUSH
31156: LD_INT 88
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: ST_TO_ADDR
31215: GO 31448
31217: LD_INT 3
31219: DOUBLE
31220: EQUAL
31221: IFTRUE 31225
31223: GO 31447
31225: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31226: LD_ADDR_VAR 0 4
31230: PUSH
31231: LD_INT 46
31233: PUSH
31234: LD_INT 47
31236: PUSH
31237: LD_INT 1
31239: PUSH
31240: LD_INT 2
31242: PUSH
31243: LD_INT 82
31245: PUSH
31246: LD_INT 83
31248: PUSH
31249: LD_INT 84
31251: PUSH
31252: LD_INT 85
31254: PUSH
31255: LD_INT 86
31257: PUSH
31258: LD_INT 11
31260: PUSH
31261: LD_INT 9
31263: PUSH
31264: LD_INT 20
31266: PUSH
31267: LD_INT 19
31269: PUSH
31270: LD_INT 21
31272: PUSH
31273: LD_INT 24
31275: PUSH
31276: LD_INT 22
31278: PUSH
31279: LD_INT 25
31281: PUSH
31282: LD_INT 28
31284: PUSH
31285: LD_INT 29
31287: PUSH
31288: LD_INT 30
31290: PUSH
31291: LD_INT 31
31293: PUSH
31294: LD_INT 37
31296: PUSH
31297: LD_INT 38
31299: PUSH
31300: LD_INT 32
31302: PUSH
31303: LD_INT 27
31305: PUSH
31306: LD_INT 33
31308: PUSH
31309: LD_INT 69
31311: PUSH
31312: LD_INT 39
31314: PUSH
31315: LD_INT 34
31317: PUSH
31318: LD_INT 40
31320: PUSH
31321: LD_INT 71
31323: PUSH
31324: LD_INT 23
31326: PUSH
31327: LD_INT 44
31329: PUSH
31330: LD_INT 48
31332: PUSH
31333: LD_INT 49
31335: PUSH
31336: LD_INT 50
31338: PUSH
31339: LD_INT 51
31341: PUSH
31342: LD_INT 52
31344: PUSH
31345: LD_INT 53
31347: PUSH
31348: LD_INT 54
31350: PUSH
31351: LD_INT 55
31353: PUSH
31354: LD_INT 56
31356: PUSH
31357: LD_INT 57
31359: PUSH
31360: LD_INT 58
31362: PUSH
31363: LD_INT 59
31365: PUSH
31366: LD_INT 63
31368: PUSH
31369: LD_INT 64
31371: PUSH
31372: LD_INT 65
31374: PUSH
31375: LD_INT 82
31377: PUSH
31378: LD_INT 83
31380: PUSH
31381: LD_INT 84
31383: PUSH
31384: LD_INT 85
31386: PUSH
31387: LD_INT 86
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: ST_TO_ADDR
31445: GO 31448
31447: POP
// if state > - 1 and state < 3 then
31448: LD_VAR 0 3
31452: PUSH
31453: LD_INT 1
31455: NEG
31456: GREATER
31457: PUSH
31458: LD_VAR 0 3
31462: PUSH
31463: LD_INT 3
31465: LESS
31466: AND
31467: IFFALSE 31524
// for i in result do
31469: LD_ADDR_VAR 0 5
31473: PUSH
31474: LD_VAR 0 4
31478: PUSH
31479: FOR_IN
31480: IFFALSE 31522
// if GetTech ( i , side ) <> state then
31482: LD_VAR 0 5
31486: PPUSH
31487: LD_VAR 0 1
31491: PPUSH
31492: CALL_OW 321
31496: PUSH
31497: LD_VAR 0 3
31501: NONEQUAL
31502: IFFALSE 31520
// result := result diff i ;
31504: LD_ADDR_VAR 0 4
31508: PUSH
31509: LD_VAR 0 4
31513: PUSH
31514: LD_VAR 0 5
31518: DIFF
31519: ST_TO_ADDR
31520: GO 31479
31522: POP
31523: POP
// end ;
31524: LD_VAR 0 4
31528: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31529: LD_INT 0
31531: PPUSH
31532: PPUSH
31533: PPUSH
// result := true ;
31534: LD_ADDR_VAR 0 3
31538: PUSH
31539: LD_INT 1
31541: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31542: LD_ADDR_VAR 0 5
31546: PUSH
31547: LD_VAR 0 2
31551: PPUSH
31552: CALL_OW 480
31556: ST_TO_ADDR
// if not tmp then
31557: LD_VAR 0 5
31561: NOT
31562: IFFALSE 31566
// exit ;
31564: GO 31615
// for i in tmp do
31566: LD_ADDR_VAR 0 4
31570: PUSH
31571: LD_VAR 0 5
31575: PUSH
31576: FOR_IN
31577: IFFALSE 31613
// if GetTech ( i , side ) <> state_researched then
31579: LD_VAR 0 4
31583: PPUSH
31584: LD_VAR 0 1
31588: PPUSH
31589: CALL_OW 321
31593: PUSH
31594: LD_INT 2
31596: NONEQUAL
31597: IFFALSE 31611
// begin result := false ;
31599: LD_ADDR_VAR 0 3
31603: PUSH
31604: LD_INT 0
31606: ST_TO_ADDR
// exit ;
31607: POP
31608: POP
31609: GO 31615
// end ;
31611: GO 31576
31613: POP
31614: POP
// end ;
31615: LD_VAR 0 3
31619: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31620: LD_INT 0
31622: PPUSH
31623: PPUSH
31624: PPUSH
31625: PPUSH
31626: PPUSH
31627: PPUSH
31628: PPUSH
31629: PPUSH
31630: PPUSH
31631: PPUSH
31632: PPUSH
31633: PPUSH
31634: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31635: LD_VAR 0 1
31639: NOT
31640: PUSH
31641: LD_VAR 0 1
31645: PPUSH
31646: CALL_OW 257
31650: PUSH
31651: LD_INT 9
31653: NONEQUAL
31654: OR
31655: IFFALSE 31659
// exit ;
31657: GO 32232
// side := GetSide ( unit ) ;
31659: LD_ADDR_VAR 0 9
31663: PUSH
31664: LD_VAR 0 1
31668: PPUSH
31669: CALL_OW 255
31673: ST_TO_ADDR
// tech_space := tech_spacanom ;
31674: LD_ADDR_VAR 0 12
31678: PUSH
31679: LD_INT 29
31681: ST_TO_ADDR
// tech_time := tech_taurad ;
31682: LD_ADDR_VAR 0 13
31686: PUSH
31687: LD_INT 28
31689: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31690: LD_ADDR_VAR 0 11
31694: PUSH
31695: LD_VAR 0 1
31699: PPUSH
31700: CALL_OW 310
31704: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31705: LD_VAR 0 11
31709: PPUSH
31710: CALL_OW 247
31714: PUSH
31715: LD_INT 2
31717: EQUAL
31718: IFFALSE 31722
// exit ;
31720: GO 32232
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31722: LD_ADDR_VAR 0 8
31726: PUSH
31727: LD_INT 81
31729: PUSH
31730: LD_VAR 0 9
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: LD_INT 3
31741: PUSH
31742: LD_INT 21
31744: PUSH
31745: LD_INT 3
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PPUSH
31760: CALL_OW 69
31764: ST_TO_ADDR
// if not tmp then
31765: LD_VAR 0 8
31769: NOT
31770: IFFALSE 31774
// exit ;
31772: GO 32232
// if in_unit then
31774: LD_VAR 0 11
31778: IFFALSE 31802
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31780: LD_ADDR_VAR 0 10
31784: PUSH
31785: LD_VAR 0 8
31789: PPUSH
31790: LD_VAR 0 11
31794: PPUSH
31795: CALL_OW 74
31799: ST_TO_ADDR
31800: GO 31822
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31802: LD_ADDR_VAR 0 10
31806: PUSH
31807: LD_VAR 0 8
31811: PPUSH
31812: LD_VAR 0 1
31816: PPUSH
31817: CALL_OW 74
31821: ST_TO_ADDR
// if not enemy then
31822: LD_VAR 0 10
31826: NOT
31827: IFFALSE 31831
// exit ;
31829: GO 32232
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31831: LD_VAR 0 11
31835: PUSH
31836: LD_VAR 0 11
31840: PPUSH
31841: LD_VAR 0 10
31845: PPUSH
31846: CALL_OW 296
31850: PUSH
31851: LD_INT 13
31853: GREATER
31854: AND
31855: PUSH
31856: LD_VAR 0 1
31860: PPUSH
31861: LD_VAR 0 10
31865: PPUSH
31866: CALL_OW 296
31870: PUSH
31871: LD_INT 12
31873: GREATER
31874: OR
31875: IFFALSE 31879
// exit ;
31877: GO 32232
// missile := [ 1 ] ;
31879: LD_ADDR_VAR 0 14
31883: PUSH
31884: LD_INT 1
31886: PUSH
31887: EMPTY
31888: LIST
31889: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31890: LD_VAR 0 9
31894: PPUSH
31895: LD_VAR 0 12
31899: PPUSH
31900: CALL_OW 325
31904: IFFALSE 31933
// missile := Replace ( missile , missile + 1 , 2 ) ;
31906: LD_ADDR_VAR 0 14
31910: PUSH
31911: LD_VAR 0 14
31915: PPUSH
31916: LD_VAR 0 14
31920: PUSH
31921: LD_INT 1
31923: PLUS
31924: PPUSH
31925: LD_INT 2
31927: PPUSH
31928: CALL_OW 1
31932: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31933: LD_VAR 0 9
31937: PPUSH
31938: LD_VAR 0 13
31942: PPUSH
31943: CALL_OW 325
31947: PUSH
31948: LD_VAR 0 10
31952: PPUSH
31953: CALL_OW 255
31957: PPUSH
31958: LD_VAR 0 13
31962: PPUSH
31963: CALL_OW 325
31967: NOT
31968: AND
31969: IFFALSE 31998
// missile := Replace ( missile , missile + 1 , 3 ) ;
31971: LD_ADDR_VAR 0 14
31975: PUSH
31976: LD_VAR 0 14
31980: PPUSH
31981: LD_VAR 0 14
31985: PUSH
31986: LD_INT 1
31988: PLUS
31989: PPUSH
31990: LD_INT 3
31992: PPUSH
31993: CALL_OW 1
31997: ST_TO_ADDR
// if missile < 2 then
31998: LD_VAR 0 14
32002: PUSH
32003: LD_INT 2
32005: LESS
32006: IFFALSE 32010
// exit ;
32008: GO 32232
// x := GetX ( enemy ) ;
32010: LD_ADDR_VAR 0 4
32014: PUSH
32015: LD_VAR 0 10
32019: PPUSH
32020: CALL_OW 250
32024: ST_TO_ADDR
// y := GetY ( enemy ) ;
32025: LD_ADDR_VAR 0 5
32029: PUSH
32030: LD_VAR 0 10
32034: PPUSH
32035: CALL_OW 251
32039: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32040: LD_ADDR_VAR 0 6
32044: PUSH
32045: LD_VAR 0 4
32049: PUSH
32050: LD_INT 1
32052: NEG
32053: PPUSH
32054: LD_INT 1
32056: PPUSH
32057: CALL_OW 12
32061: PLUS
32062: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32063: LD_ADDR_VAR 0 7
32067: PUSH
32068: LD_VAR 0 5
32072: PUSH
32073: LD_INT 1
32075: NEG
32076: PPUSH
32077: LD_INT 1
32079: PPUSH
32080: CALL_OW 12
32084: PLUS
32085: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32086: LD_VAR 0 6
32090: PPUSH
32091: LD_VAR 0 7
32095: PPUSH
32096: CALL_OW 488
32100: NOT
32101: IFFALSE 32123
// begin _x := x ;
32103: LD_ADDR_VAR 0 6
32107: PUSH
32108: LD_VAR 0 4
32112: ST_TO_ADDR
// _y := y ;
32113: LD_ADDR_VAR 0 7
32117: PUSH
32118: LD_VAR 0 5
32122: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32123: LD_ADDR_VAR 0 3
32127: PUSH
32128: LD_INT 1
32130: PPUSH
32131: LD_VAR 0 14
32135: PPUSH
32136: CALL_OW 12
32140: ST_TO_ADDR
// case i of 1 :
32141: LD_VAR 0 3
32145: PUSH
32146: LD_INT 1
32148: DOUBLE
32149: EQUAL
32150: IFTRUE 32154
32152: GO 32171
32154: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32155: LD_VAR 0 1
32159: PPUSH
32160: LD_VAR 0 10
32164: PPUSH
32165: CALL_OW 115
32169: GO 32232
32171: LD_INT 2
32173: DOUBLE
32174: EQUAL
32175: IFTRUE 32179
32177: GO 32201
32179: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32180: LD_VAR 0 1
32184: PPUSH
32185: LD_VAR 0 6
32189: PPUSH
32190: LD_VAR 0 7
32194: PPUSH
32195: CALL_OW 153
32199: GO 32232
32201: LD_INT 3
32203: DOUBLE
32204: EQUAL
32205: IFTRUE 32209
32207: GO 32231
32209: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32210: LD_VAR 0 1
32214: PPUSH
32215: LD_VAR 0 6
32219: PPUSH
32220: LD_VAR 0 7
32224: PPUSH
32225: CALL_OW 154
32229: GO 32232
32231: POP
// end ;
32232: LD_VAR 0 2
32236: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32237: LD_INT 0
32239: PPUSH
32240: PPUSH
32241: PPUSH
32242: PPUSH
32243: PPUSH
32244: PPUSH
// if not unit or not building then
32245: LD_VAR 0 1
32249: NOT
32250: PUSH
32251: LD_VAR 0 2
32255: NOT
32256: OR
32257: IFFALSE 32261
// exit ;
32259: GO 32419
// x := GetX ( building ) ;
32261: LD_ADDR_VAR 0 5
32265: PUSH
32266: LD_VAR 0 2
32270: PPUSH
32271: CALL_OW 250
32275: ST_TO_ADDR
// y := GetY ( building ) ;
32276: LD_ADDR_VAR 0 6
32280: PUSH
32281: LD_VAR 0 2
32285: PPUSH
32286: CALL_OW 251
32290: ST_TO_ADDR
// for i = 0 to 5 do
32291: LD_ADDR_VAR 0 4
32295: PUSH
32296: DOUBLE
32297: LD_INT 0
32299: DEC
32300: ST_TO_ADDR
32301: LD_INT 5
32303: PUSH
32304: FOR_TO
32305: IFFALSE 32417
// begin _x := ShiftX ( x , i , 3 ) ;
32307: LD_ADDR_VAR 0 7
32311: PUSH
32312: LD_VAR 0 5
32316: PPUSH
32317: LD_VAR 0 4
32321: PPUSH
32322: LD_INT 3
32324: PPUSH
32325: CALL_OW 272
32329: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32330: LD_ADDR_VAR 0 8
32334: PUSH
32335: LD_VAR 0 6
32339: PPUSH
32340: LD_VAR 0 4
32344: PPUSH
32345: LD_INT 3
32347: PPUSH
32348: CALL_OW 273
32352: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32353: LD_VAR 0 7
32357: PPUSH
32358: LD_VAR 0 8
32362: PPUSH
32363: CALL_OW 488
32367: NOT
32368: IFFALSE 32372
// continue ;
32370: GO 32304
// if HexInfo ( _x , _y ) = 0 then
32372: LD_VAR 0 7
32376: PPUSH
32377: LD_VAR 0 8
32381: PPUSH
32382: CALL_OW 428
32386: PUSH
32387: LD_INT 0
32389: EQUAL
32390: IFFALSE 32415
// begin ComMoveXY ( unit , _x , _y ) ;
32392: LD_VAR 0 1
32396: PPUSH
32397: LD_VAR 0 7
32401: PPUSH
32402: LD_VAR 0 8
32406: PPUSH
32407: CALL_OW 111
// exit ;
32411: POP
32412: POP
32413: GO 32419
// end ; end ;
32415: GO 32304
32417: POP
32418: POP
// end ;
32419: LD_VAR 0 3
32423: RET
// export function ScanBase ( side , base_area ) ; begin
32424: LD_INT 0
32426: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32427: LD_ADDR_VAR 0 3
32431: PUSH
32432: LD_VAR 0 2
32436: PPUSH
32437: LD_INT 81
32439: PUSH
32440: LD_VAR 0 1
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PPUSH
32449: CALL_OW 70
32453: ST_TO_ADDR
// end ;
32454: LD_VAR 0 3
32458: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32459: LD_INT 0
32461: PPUSH
32462: PPUSH
32463: PPUSH
32464: PPUSH
// result := false ;
32465: LD_ADDR_VAR 0 2
32469: PUSH
32470: LD_INT 0
32472: ST_TO_ADDR
// side := GetSide ( unit ) ;
32473: LD_ADDR_VAR 0 3
32477: PUSH
32478: LD_VAR 0 1
32482: PPUSH
32483: CALL_OW 255
32487: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32488: LD_ADDR_VAR 0 4
32492: PUSH
32493: LD_VAR 0 1
32497: PPUSH
32498: CALL_OW 248
32502: ST_TO_ADDR
// case nat of 1 :
32503: LD_VAR 0 4
32507: PUSH
32508: LD_INT 1
32510: DOUBLE
32511: EQUAL
32512: IFTRUE 32516
32514: GO 32527
32516: POP
// tech := tech_lassight ; 2 :
32517: LD_ADDR_VAR 0 5
32521: PUSH
32522: LD_INT 12
32524: ST_TO_ADDR
32525: GO 32566
32527: LD_INT 2
32529: DOUBLE
32530: EQUAL
32531: IFTRUE 32535
32533: GO 32546
32535: POP
// tech := tech_mortar ; 3 :
32536: LD_ADDR_VAR 0 5
32540: PUSH
32541: LD_INT 41
32543: ST_TO_ADDR
32544: GO 32566
32546: LD_INT 3
32548: DOUBLE
32549: EQUAL
32550: IFTRUE 32554
32552: GO 32565
32554: POP
// tech := tech_bazooka ; end ;
32555: LD_ADDR_VAR 0 5
32559: PUSH
32560: LD_INT 44
32562: ST_TO_ADDR
32563: GO 32566
32565: POP
// if Researched ( side , tech ) then
32566: LD_VAR 0 3
32570: PPUSH
32571: LD_VAR 0 5
32575: PPUSH
32576: CALL_OW 325
32580: IFFALSE 32607
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32582: LD_ADDR_VAR 0 2
32586: PUSH
32587: LD_INT 5
32589: PUSH
32590: LD_INT 8
32592: PUSH
32593: LD_INT 9
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: LIST
32600: PUSH
32601: LD_VAR 0 4
32605: ARRAY
32606: ST_TO_ADDR
// end ;
32607: LD_VAR 0 2
32611: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32612: LD_INT 0
32614: PPUSH
32615: PPUSH
32616: PPUSH
// if not mines then
32617: LD_VAR 0 2
32621: NOT
32622: IFFALSE 32626
// exit ;
32624: GO 32770
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32626: LD_ADDR_VAR 0 5
32630: PUSH
32631: LD_INT 81
32633: PUSH
32634: LD_VAR 0 1
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 3
32645: PUSH
32646: LD_INT 21
32648: PUSH
32649: LD_INT 3
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PPUSH
32664: CALL_OW 69
32668: ST_TO_ADDR
// for i in mines do
32669: LD_ADDR_VAR 0 4
32673: PUSH
32674: LD_VAR 0 2
32678: PUSH
32679: FOR_IN
32680: IFFALSE 32768
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32682: LD_VAR 0 4
32686: PUSH
32687: LD_INT 1
32689: ARRAY
32690: PPUSH
32691: LD_VAR 0 4
32695: PUSH
32696: LD_INT 2
32698: ARRAY
32699: PPUSH
32700: CALL_OW 458
32704: NOT
32705: IFFALSE 32709
// continue ;
32707: GO 32679
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32709: LD_VAR 0 4
32713: PUSH
32714: LD_INT 1
32716: ARRAY
32717: PPUSH
32718: LD_VAR 0 4
32722: PUSH
32723: LD_INT 2
32725: ARRAY
32726: PPUSH
32727: CALL_OW 428
32731: PUSH
32732: LD_VAR 0 5
32736: IN
32737: IFFALSE 32766
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32739: LD_VAR 0 4
32743: PUSH
32744: LD_INT 1
32746: ARRAY
32747: PPUSH
32748: LD_VAR 0 4
32752: PUSH
32753: LD_INT 2
32755: ARRAY
32756: PPUSH
32757: LD_VAR 0 1
32761: PPUSH
32762: CALL_OW 456
// end ;
32766: GO 32679
32768: POP
32769: POP
// end ;
32770: LD_VAR 0 3
32774: RET
// export function Count ( array ) ; var i ; begin
32775: LD_INT 0
32777: PPUSH
32778: PPUSH
// result := 0 ;
32779: LD_ADDR_VAR 0 2
32783: PUSH
32784: LD_INT 0
32786: ST_TO_ADDR
// for i in array do
32787: LD_ADDR_VAR 0 3
32791: PUSH
32792: LD_VAR 0 1
32796: PUSH
32797: FOR_IN
32798: IFFALSE 32822
// if i then
32800: LD_VAR 0 3
32804: IFFALSE 32820
// result := result + 1 ;
32806: LD_ADDR_VAR 0 2
32810: PUSH
32811: LD_VAR 0 2
32815: PUSH
32816: LD_INT 1
32818: PLUS
32819: ST_TO_ADDR
32820: GO 32797
32822: POP
32823: POP
// end ;
32824: LD_VAR 0 2
32828: RET
// export function IsEmpty ( building ) ; begin
32829: LD_INT 0
32831: PPUSH
// if not building then
32832: LD_VAR 0 1
32836: NOT
32837: IFFALSE 32841
// exit ;
32839: GO 32884
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32841: LD_ADDR_VAR 0 2
32845: PUSH
32846: LD_VAR 0 1
32850: PUSH
32851: LD_INT 22
32853: PUSH
32854: LD_VAR 0 1
32858: PPUSH
32859: CALL_OW 255
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 58
32870: PUSH
32871: EMPTY
32872: LIST
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PPUSH
32878: CALL_OW 69
32882: IN
32883: ST_TO_ADDR
// end ;
32884: LD_VAR 0 2
32888: RET
// export function IsNotFull ( building ) ; var places ; begin
32889: LD_INT 0
32891: PPUSH
32892: PPUSH
// if not building then
32893: LD_VAR 0 1
32897: NOT
32898: IFFALSE 32902
// exit ;
32900: GO 33073
// result := false ;
32902: LD_ADDR_VAR 0 2
32906: PUSH
32907: LD_INT 0
32909: ST_TO_ADDR
// places := 0 ;
32910: LD_ADDR_VAR 0 3
32914: PUSH
32915: LD_INT 0
32917: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
32918: LD_VAR 0 1
32922: PPUSH
32923: CALL_OW 266
32927: PUSH
32928: LD_INT 0
32930: DOUBLE
32931: EQUAL
32932: IFTRUE 32990
32934: LD_INT 1
32936: DOUBLE
32937: EQUAL
32938: IFTRUE 32990
32940: LD_INT 6
32942: DOUBLE
32943: EQUAL
32944: IFTRUE 32990
32946: LD_INT 7
32948: DOUBLE
32949: EQUAL
32950: IFTRUE 32990
32952: LD_INT 8
32954: DOUBLE
32955: EQUAL
32956: IFTRUE 32990
32958: LD_INT 4
32960: DOUBLE
32961: EQUAL
32962: IFTRUE 32990
32964: LD_INT 5
32966: DOUBLE
32967: EQUAL
32968: IFTRUE 32990
32970: LD_INT 2
32972: DOUBLE
32973: EQUAL
32974: IFTRUE 32990
32976: LD_INT 3
32978: DOUBLE
32979: EQUAL
32980: IFTRUE 32990
32982: LD_INT 35
32984: DOUBLE
32985: EQUAL
32986: IFTRUE 32990
32988: GO 33001
32990: POP
// places := 6 ; b_bunker , b_breastwork :
32991: LD_ADDR_VAR 0 3
32995: PUSH
32996: LD_INT 6
32998: ST_TO_ADDR
32999: GO 33046
33001: LD_INT 32
33003: DOUBLE
33004: EQUAL
33005: IFTRUE 33015
33007: LD_INT 31
33009: DOUBLE
33010: EQUAL
33011: IFTRUE 33015
33013: GO 33026
33015: POP
// places := 1 ; b_control_tower :
33016: LD_ADDR_VAR 0 3
33020: PUSH
33021: LD_INT 1
33023: ST_TO_ADDR
33024: GO 33046
33026: LD_INT 36
33028: DOUBLE
33029: EQUAL
33030: IFTRUE 33034
33032: GO 33045
33034: POP
// places := 3 ; end ;
33035: LD_ADDR_VAR 0 3
33039: PUSH
33040: LD_INT 3
33042: ST_TO_ADDR
33043: GO 33046
33045: POP
// if places then
33046: LD_VAR 0 3
33050: IFFALSE 33073
// result := UnitsInside ( building ) < places ;
33052: LD_ADDR_VAR 0 2
33056: PUSH
33057: LD_VAR 0 1
33061: PPUSH
33062: CALL_OW 313
33066: PUSH
33067: LD_VAR 0 3
33071: LESS
33072: ST_TO_ADDR
// end ;
33073: LD_VAR 0 2
33077: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33078: LD_INT 0
33080: PPUSH
33081: PPUSH
33082: PPUSH
33083: PPUSH
// tmp := [ ] ;
33084: LD_ADDR_VAR 0 3
33088: PUSH
33089: EMPTY
33090: ST_TO_ADDR
// list := [ ] ;
33091: LD_ADDR_VAR 0 5
33095: PUSH
33096: EMPTY
33097: ST_TO_ADDR
// for i = 16 to 25 do
33098: LD_ADDR_VAR 0 4
33102: PUSH
33103: DOUBLE
33104: LD_INT 16
33106: DEC
33107: ST_TO_ADDR
33108: LD_INT 25
33110: PUSH
33111: FOR_TO
33112: IFFALSE 33185
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33114: LD_ADDR_VAR 0 3
33118: PUSH
33119: LD_VAR 0 3
33123: PUSH
33124: LD_INT 22
33126: PUSH
33127: LD_VAR 0 1
33131: PPUSH
33132: CALL_OW 255
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 91
33143: PUSH
33144: LD_VAR 0 1
33148: PUSH
33149: LD_INT 6
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 30
33159: PUSH
33160: LD_VAR 0 4
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: LIST
33173: PUSH
33174: EMPTY
33175: LIST
33176: PPUSH
33177: CALL_OW 69
33181: ADD
33182: ST_TO_ADDR
33183: GO 33111
33185: POP
33186: POP
// for i = 1 to tmp do
33187: LD_ADDR_VAR 0 4
33191: PUSH
33192: DOUBLE
33193: LD_INT 1
33195: DEC
33196: ST_TO_ADDR
33197: LD_VAR 0 3
33201: PUSH
33202: FOR_TO
33203: IFFALSE 33291
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33205: LD_ADDR_VAR 0 5
33209: PUSH
33210: LD_VAR 0 5
33214: PUSH
33215: LD_VAR 0 3
33219: PUSH
33220: LD_VAR 0 4
33224: ARRAY
33225: PPUSH
33226: CALL_OW 266
33230: PUSH
33231: LD_VAR 0 3
33235: PUSH
33236: LD_VAR 0 4
33240: ARRAY
33241: PPUSH
33242: CALL_OW 250
33246: PUSH
33247: LD_VAR 0 3
33251: PUSH
33252: LD_VAR 0 4
33256: ARRAY
33257: PPUSH
33258: CALL_OW 251
33262: PUSH
33263: LD_VAR 0 3
33267: PUSH
33268: LD_VAR 0 4
33272: ARRAY
33273: PPUSH
33274: CALL_OW 254
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: PUSH
33285: EMPTY
33286: LIST
33287: ADD
33288: ST_TO_ADDR
33289: GO 33202
33291: POP
33292: POP
// result := list ;
33293: LD_ADDR_VAR 0 2
33297: PUSH
33298: LD_VAR 0 5
33302: ST_TO_ADDR
// end ;
33303: LD_VAR 0 2
33307: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33308: LD_INT 0
33310: PPUSH
33311: PPUSH
33312: PPUSH
33313: PPUSH
33314: PPUSH
33315: PPUSH
33316: PPUSH
// if not factory then
33317: LD_VAR 0 1
33321: NOT
33322: IFFALSE 33326
// exit ;
33324: GO 33919
// if control = control_apeman then
33326: LD_VAR 0 4
33330: PUSH
33331: LD_INT 5
33333: EQUAL
33334: IFFALSE 33443
// begin tmp := UnitsInside ( factory ) ;
33336: LD_ADDR_VAR 0 8
33340: PUSH
33341: LD_VAR 0 1
33345: PPUSH
33346: CALL_OW 313
33350: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33351: LD_VAR 0 8
33355: PPUSH
33356: LD_INT 25
33358: PUSH
33359: LD_INT 12
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PPUSH
33366: CALL_OW 72
33370: NOT
33371: IFFALSE 33381
// control := control_manual ;
33373: LD_ADDR_VAR 0 4
33377: PUSH
33378: LD_INT 1
33380: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33381: LD_ADDR_VAR 0 8
33385: PUSH
33386: LD_VAR 0 1
33390: PPUSH
33391: CALL 33078 0 1
33395: ST_TO_ADDR
// if tmp then
33396: LD_VAR 0 8
33400: IFFALSE 33443
// begin for i in tmp do
33402: LD_ADDR_VAR 0 7
33406: PUSH
33407: LD_VAR 0 8
33411: PUSH
33412: FOR_IN
33413: IFFALSE 33441
// if i [ 1 ] = b_ext_radio then
33415: LD_VAR 0 7
33419: PUSH
33420: LD_INT 1
33422: ARRAY
33423: PUSH
33424: LD_INT 22
33426: EQUAL
33427: IFFALSE 33439
// begin control := control_remote ;
33429: LD_ADDR_VAR 0 4
33433: PUSH
33434: LD_INT 2
33436: ST_TO_ADDR
// break ;
33437: GO 33441
// end ;
33439: GO 33412
33441: POP
33442: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33443: LD_VAR 0 1
33447: PPUSH
33448: LD_VAR 0 2
33452: PPUSH
33453: LD_VAR 0 3
33457: PPUSH
33458: LD_VAR 0 4
33462: PPUSH
33463: LD_VAR 0 5
33467: PPUSH
33468: CALL_OW 448
33472: IFFALSE 33507
// begin result := [ chassis , engine , control , weapon ] ;
33474: LD_ADDR_VAR 0 6
33478: PUSH
33479: LD_VAR 0 2
33483: PUSH
33484: LD_VAR 0 3
33488: PUSH
33489: LD_VAR 0 4
33493: PUSH
33494: LD_VAR 0 5
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: ST_TO_ADDR
// exit ;
33505: GO 33919
// end ; _chassis := AvailableChassisList ( factory ) ;
33507: LD_ADDR_VAR 0 9
33511: PUSH
33512: LD_VAR 0 1
33516: PPUSH
33517: CALL_OW 475
33521: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33522: LD_ADDR_VAR 0 11
33526: PUSH
33527: LD_VAR 0 1
33531: PPUSH
33532: CALL_OW 476
33536: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33537: LD_ADDR_VAR 0 12
33541: PUSH
33542: LD_VAR 0 1
33546: PPUSH
33547: CALL_OW 477
33551: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33552: LD_ADDR_VAR 0 10
33556: PUSH
33557: LD_VAR 0 1
33561: PPUSH
33562: CALL_OW 478
33566: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33567: LD_VAR 0 9
33571: NOT
33572: PUSH
33573: LD_VAR 0 11
33577: NOT
33578: OR
33579: PUSH
33580: LD_VAR 0 12
33584: NOT
33585: OR
33586: PUSH
33587: LD_VAR 0 10
33591: NOT
33592: OR
33593: IFFALSE 33628
// begin result := [ chassis , engine , control , weapon ] ;
33595: LD_ADDR_VAR 0 6
33599: PUSH
33600: LD_VAR 0 2
33604: PUSH
33605: LD_VAR 0 3
33609: PUSH
33610: LD_VAR 0 4
33614: PUSH
33615: LD_VAR 0 5
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: ST_TO_ADDR
// exit ;
33626: GO 33919
// end ; if not chassis in _chassis then
33628: LD_VAR 0 2
33632: PUSH
33633: LD_VAR 0 9
33637: IN
33638: NOT
33639: IFFALSE 33665
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33641: LD_ADDR_VAR 0 2
33645: PUSH
33646: LD_VAR 0 9
33650: PUSH
33651: LD_INT 1
33653: PPUSH
33654: LD_VAR 0 9
33658: PPUSH
33659: CALL_OW 12
33663: ARRAY
33664: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33665: LD_VAR 0 2
33669: PPUSH
33670: LD_VAR 0 3
33674: PPUSH
33675: CALL 33924 0 2
33679: NOT
33680: IFFALSE 33739
// repeat engine := _engine [ 1 ] ;
33682: LD_ADDR_VAR 0 3
33686: PUSH
33687: LD_VAR 0 11
33691: PUSH
33692: LD_INT 1
33694: ARRAY
33695: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33696: LD_ADDR_VAR 0 11
33700: PUSH
33701: LD_VAR 0 11
33705: PPUSH
33706: LD_INT 1
33708: PPUSH
33709: CALL_OW 3
33713: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33714: LD_VAR 0 2
33718: PPUSH
33719: LD_VAR 0 3
33723: PPUSH
33724: CALL 33924 0 2
33728: PUSH
33729: LD_VAR 0 11
33733: PUSH
33734: EMPTY
33735: EQUAL
33736: OR
33737: IFFALSE 33682
// if not control in _control then
33739: LD_VAR 0 4
33743: PUSH
33744: LD_VAR 0 12
33748: IN
33749: NOT
33750: IFFALSE 33776
// control := _control [ rand ( 1 , _control ) ] ;
33752: LD_ADDR_VAR 0 4
33756: PUSH
33757: LD_VAR 0 12
33761: PUSH
33762: LD_INT 1
33764: PPUSH
33765: LD_VAR 0 12
33769: PPUSH
33770: CALL_OW 12
33774: ARRAY
33775: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33776: LD_VAR 0 2
33780: PPUSH
33781: LD_VAR 0 5
33785: PPUSH
33786: CALL 34144 0 2
33790: NOT
33791: IFFALSE 33850
// repeat weapon := _weapon [ 1 ] ;
33793: LD_ADDR_VAR 0 5
33797: PUSH
33798: LD_VAR 0 10
33802: PUSH
33803: LD_INT 1
33805: ARRAY
33806: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33807: LD_ADDR_VAR 0 10
33811: PUSH
33812: LD_VAR 0 10
33816: PPUSH
33817: LD_INT 1
33819: PPUSH
33820: CALL_OW 3
33824: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33825: LD_VAR 0 2
33829: PPUSH
33830: LD_VAR 0 5
33834: PPUSH
33835: CALL 34144 0 2
33839: PUSH
33840: LD_VAR 0 10
33844: PUSH
33845: EMPTY
33846: EQUAL
33847: OR
33848: IFFALSE 33793
// result := [ ] ;
33850: LD_ADDR_VAR 0 6
33854: PUSH
33855: EMPTY
33856: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33857: LD_VAR 0 1
33861: PPUSH
33862: LD_VAR 0 2
33866: PPUSH
33867: LD_VAR 0 3
33871: PPUSH
33872: LD_VAR 0 4
33876: PPUSH
33877: LD_VAR 0 5
33881: PPUSH
33882: CALL_OW 448
33886: IFFALSE 33919
// result := [ chassis , engine , control , weapon ] ;
33888: LD_ADDR_VAR 0 6
33892: PUSH
33893: LD_VAR 0 2
33897: PUSH
33898: LD_VAR 0 3
33902: PUSH
33903: LD_VAR 0 4
33907: PUSH
33908: LD_VAR 0 5
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: ST_TO_ADDR
// end ;
33919: LD_VAR 0 6
33923: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33924: LD_INT 0
33926: PPUSH
// if not chassis or not engine then
33927: LD_VAR 0 1
33931: NOT
33932: PUSH
33933: LD_VAR 0 2
33937: NOT
33938: OR
33939: IFFALSE 33943
// exit ;
33941: GO 34139
// case engine of engine_solar :
33943: LD_VAR 0 2
33947: PUSH
33948: LD_INT 2
33950: DOUBLE
33951: EQUAL
33952: IFTRUE 33956
33954: GO 33994
33956: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33957: LD_ADDR_VAR 0 3
33961: PUSH
33962: LD_INT 11
33964: PUSH
33965: LD_INT 12
33967: PUSH
33968: LD_INT 13
33970: PUSH
33971: LD_INT 14
33973: PUSH
33974: LD_INT 1
33976: PUSH
33977: LD_INT 2
33979: PUSH
33980: LD_INT 3
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: ST_TO_ADDR
33992: GO 34123
33994: LD_INT 1
33996: DOUBLE
33997: EQUAL
33998: IFTRUE 34002
34000: GO 34064
34002: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34003: LD_ADDR_VAR 0 3
34007: PUSH
34008: LD_INT 11
34010: PUSH
34011: LD_INT 12
34013: PUSH
34014: LD_INT 13
34016: PUSH
34017: LD_INT 14
34019: PUSH
34020: LD_INT 1
34022: PUSH
34023: LD_INT 2
34025: PUSH
34026: LD_INT 3
34028: PUSH
34029: LD_INT 4
34031: PUSH
34032: LD_INT 5
34034: PUSH
34035: LD_INT 21
34037: PUSH
34038: LD_INT 23
34040: PUSH
34041: LD_INT 22
34043: PUSH
34044: LD_INT 24
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: ST_TO_ADDR
34062: GO 34123
34064: LD_INT 3
34066: DOUBLE
34067: EQUAL
34068: IFTRUE 34072
34070: GO 34122
34072: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34073: LD_ADDR_VAR 0 3
34077: PUSH
34078: LD_INT 13
34080: PUSH
34081: LD_INT 14
34083: PUSH
34084: LD_INT 2
34086: PUSH
34087: LD_INT 3
34089: PUSH
34090: LD_INT 4
34092: PUSH
34093: LD_INT 5
34095: PUSH
34096: LD_INT 21
34098: PUSH
34099: LD_INT 22
34101: PUSH
34102: LD_INT 23
34104: PUSH
34105: LD_INT 24
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: ST_TO_ADDR
34120: GO 34123
34122: POP
// result := ( chassis in result ) ;
34123: LD_ADDR_VAR 0 3
34127: PUSH
34128: LD_VAR 0 1
34132: PUSH
34133: LD_VAR 0 3
34137: IN
34138: ST_TO_ADDR
// end ;
34139: LD_VAR 0 3
34143: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34144: LD_INT 0
34146: PPUSH
// if not chassis or not weapon then
34147: LD_VAR 0 1
34151: NOT
34152: PUSH
34153: LD_VAR 0 2
34157: NOT
34158: OR
34159: IFFALSE 34163
// exit ;
34161: GO 35225
// case weapon of us_machine_gun :
34163: LD_VAR 0 2
34167: PUSH
34168: LD_INT 2
34170: DOUBLE
34171: EQUAL
34172: IFTRUE 34176
34174: GO 34206
34176: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34177: LD_ADDR_VAR 0 3
34181: PUSH
34182: LD_INT 1
34184: PUSH
34185: LD_INT 2
34187: PUSH
34188: LD_INT 3
34190: PUSH
34191: LD_INT 4
34193: PUSH
34194: LD_INT 5
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: ST_TO_ADDR
34204: GO 35209
34206: LD_INT 3
34208: DOUBLE
34209: EQUAL
34210: IFTRUE 34214
34212: GO 34244
34214: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34215: LD_ADDR_VAR 0 3
34219: PUSH
34220: LD_INT 1
34222: PUSH
34223: LD_INT 2
34225: PUSH
34226: LD_INT 3
34228: PUSH
34229: LD_INT 4
34231: PUSH
34232: LD_INT 5
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: ST_TO_ADDR
34242: GO 35209
34244: LD_INT 11
34246: DOUBLE
34247: EQUAL
34248: IFTRUE 34252
34250: GO 34282
34252: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34253: LD_ADDR_VAR 0 3
34257: PUSH
34258: LD_INT 1
34260: PUSH
34261: LD_INT 2
34263: PUSH
34264: LD_INT 3
34266: PUSH
34267: LD_INT 4
34269: PUSH
34270: LD_INT 5
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: ST_TO_ADDR
34280: GO 35209
34282: LD_INT 4
34284: DOUBLE
34285: EQUAL
34286: IFTRUE 34290
34288: GO 34316
34290: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34291: LD_ADDR_VAR 0 3
34295: PUSH
34296: LD_INT 2
34298: PUSH
34299: LD_INT 3
34301: PUSH
34302: LD_INT 4
34304: PUSH
34305: LD_INT 5
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: ST_TO_ADDR
34314: GO 35209
34316: LD_INT 5
34318: DOUBLE
34319: EQUAL
34320: IFTRUE 34324
34322: GO 34350
34324: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34325: LD_ADDR_VAR 0 3
34329: PUSH
34330: LD_INT 2
34332: PUSH
34333: LD_INT 3
34335: PUSH
34336: LD_INT 4
34338: PUSH
34339: LD_INT 5
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: ST_TO_ADDR
34348: GO 35209
34350: LD_INT 9
34352: DOUBLE
34353: EQUAL
34354: IFTRUE 34358
34356: GO 34384
34358: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34359: LD_ADDR_VAR 0 3
34363: PUSH
34364: LD_INT 2
34366: PUSH
34367: LD_INT 3
34369: PUSH
34370: LD_INT 4
34372: PUSH
34373: LD_INT 5
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: ST_TO_ADDR
34382: GO 35209
34384: LD_INT 7
34386: DOUBLE
34387: EQUAL
34388: IFTRUE 34392
34390: GO 34418
34392: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34393: LD_ADDR_VAR 0 3
34397: PUSH
34398: LD_INT 2
34400: PUSH
34401: LD_INT 3
34403: PUSH
34404: LD_INT 4
34406: PUSH
34407: LD_INT 5
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: ST_TO_ADDR
34416: GO 35209
34418: LD_INT 12
34420: DOUBLE
34421: EQUAL
34422: IFTRUE 34426
34424: GO 34452
34426: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34427: LD_ADDR_VAR 0 3
34431: PUSH
34432: LD_INT 2
34434: PUSH
34435: LD_INT 3
34437: PUSH
34438: LD_INT 4
34440: PUSH
34441: LD_INT 5
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: ST_TO_ADDR
34450: GO 35209
34452: LD_INT 13
34454: DOUBLE
34455: EQUAL
34456: IFTRUE 34460
34458: GO 34486
34460: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34461: LD_ADDR_VAR 0 3
34465: PUSH
34466: LD_INT 2
34468: PUSH
34469: LD_INT 3
34471: PUSH
34472: LD_INT 4
34474: PUSH
34475: LD_INT 5
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: ST_TO_ADDR
34484: GO 35209
34486: LD_INT 14
34488: DOUBLE
34489: EQUAL
34490: IFTRUE 34494
34492: GO 34512
34494: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34495: LD_ADDR_VAR 0 3
34499: PUSH
34500: LD_INT 4
34502: PUSH
34503: LD_INT 5
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: ST_TO_ADDR
34510: GO 35209
34512: LD_INT 6
34514: DOUBLE
34515: EQUAL
34516: IFTRUE 34520
34518: GO 34538
34520: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34521: LD_ADDR_VAR 0 3
34525: PUSH
34526: LD_INT 4
34528: PUSH
34529: LD_INT 5
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: ST_TO_ADDR
34536: GO 35209
34538: LD_INT 10
34540: DOUBLE
34541: EQUAL
34542: IFTRUE 34546
34544: GO 34564
34546: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34547: LD_ADDR_VAR 0 3
34551: PUSH
34552: LD_INT 4
34554: PUSH
34555: LD_INT 5
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: ST_TO_ADDR
34562: GO 35209
34564: LD_INT 22
34566: DOUBLE
34567: EQUAL
34568: IFTRUE 34572
34570: GO 34598
34572: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34573: LD_ADDR_VAR 0 3
34577: PUSH
34578: LD_INT 11
34580: PUSH
34581: LD_INT 12
34583: PUSH
34584: LD_INT 13
34586: PUSH
34587: LD_INT 14
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: ST_TO_ADDR
34596: GO 35209
34598: LD_INT 23
34600: DOUBLE
34601: EQUAL
34602: IFTRUE 34606
34604: GO 34632
34606: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34607: LD_ADDR_VAR 0 3
34611: PUSH
34612: LD_INT 11
34614: PUSH
34615: LD_INT 12
34617: PUSH
34618: LD_INT 13
34620: PUSH
34621: LD_INT 14
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: ST_TO_ADDR
34630: GO 35209
34632: LD_INT 24
34634: DOUBLE
34635: EQUAL
34636: IFTRUE 34640
34638: GO 34666
34640: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34641: LD_ADDR_VAR 0 3
34645: PUSH
34646: LD_INT 11
34648: PUSH
34649: LD_INT 12
34651: PUSH
34652: LD_INT 13
34654: PUSH
34655: LD_INT 14
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: ST_TO_ADDR
34664: GO 35209
34666: LD_INT 30
34668: DOUBLE
34669: EQUAL
34670: IFTRUE 34674
34672: GO 34700
34674: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34675: LD_ADDR_VAR 0 3
34679: PUSH
34680: LD_INT 11
34682: PUSH
34683: LD_INT 12
34685: PUSH
34686: LD_INT 13
34688: PUSH
34689: LD_INT 14
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: ST_TO_ADDR
34698: GO 35209
34700: LD_INT 25
34702: DOUBLE
34703: EQUAL
34704: IFTRUE 34708
34706: GO 34726
34708: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34709: LD_ADDR_VAR 0 3
34713: PUSH
34714: LD_INT 13
34716: PUSH
34717: LD_INT 14
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: ST_TO_ADDR
34724: GO 35209
34726: LD_INT 27
34728: DOUBLE
34729: EQUAL
34730: IFTRUE 34734
34732: GO 34752
34734: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34735: LD_ADDR_VAR 0 3
34739: PUSH
34740: LD_INT 13
34742: PUSH
34743: LD_INT 14
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: ST_TO_ADDR
34750: GO 35209
34752: LD_EXP 102
34756: DOUBLE
34757: EQUAL
34758: IFTRUE 34762
34760: GO 34788
34762: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34763: LD_ADDR_VAR 0 3
34767: PUSH
34768: LD_INT 11
34770: PUSH
34771: LD_INT 12
34773: PUSH
34774: LD_INT 13
34776: PUSH
34777: LD_INT 14
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: ST_TO_ADDR
34786: GO 35209
34788: LD_INT 28
34790: DOUBLE
34791: EQUAL
34792: IFTRUE 34796
34794: GO 34814
34796: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34797: LD_ADDR_VAR 0 3
34801: PUSH
34802: LD_INT 13
34804: PUSH
34805: LD_INT 14
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: ST_TO_ADDR
34812: GO 35209
34814: LD_INT 29
34816: DOUBLE
34817: EQUAL
34818: IFTRUE 34822
34820: GO 34840
34822: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34823: LD_ADDR_VAR 0 3
34827: PUSH
34828: LD_INT 13
34830: PUSH
34831: LD_INT 14
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: ST_TO_ADDR
34838: GO 35209
34840: LD_INT 31
34842: DOUBLE
34843: EQUAL
34844: IFTRUE 34848
34846: GO 34866
34848: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34849: LD_ADDR_VAR 0 3
34853: PUSH
34854: LD_INT 13
34856: PUSH
34857: LD_INT 14
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: ST_TO_ADDR
34864: GO 35209
34866: LD_INT 26
34868: DOUBLE
34869: EQUAL
34870: IFTRUE 34874
34872: GO 34892
34874: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34875: LD_ADDR_VAR 0 3
34879: PUSH
34880: LD_INT 13
34882: PUSH
34883: LD_INT 14
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: ST_TO_ADDR
34890: GO 35209
34892: LD_INT 42
34894: DOUBLE
34895: EQUAL
34896: IFTRUE 34900
34898: GO 34926
34900: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34901: LD_ADDR_VAR 0 3
34905: PUSH
34906: LD_INT 21
34908: PUSH
34909: LD_INT 22
34911: PUSH
34912: LD_INT 23
34914: PUSH
34915: LD_INT 24
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: ST_TO_ADDR
34924: GO 35209
34926: LD_INT 43
34928: DOUBLE
34929: EQUAL
34930: IFTRUE 34934
34932: GO 34960
34934: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34935: LD_ADDR_VAR 0 3
34939: PUSH
34940: LD_INT 21
34942: PUSH
34943: LD_INT 22
34945: PUSH
34946: LD_INT 23
34948: PUSH
34949: LD_INT 24
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: ST_TO_ADDR
34958: GO 35209
34960: LD_INT 44
34962: DOUBLE
34963: EQUAL
34964: IFTRUE 34968
34966: GO 34994
34968: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34969: LD_ADDR_VAR 0 3
34973: PUSH
34974: LD_INT 21
34976: PUSH
34977: LD_INT 22
34979: PUSH
34980: LD_INT 23
34982: PUSH
34983: LD_INT 24
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: ST_TO_ADDR
34992: GO 35209
34994: LD_INT 45
34996: DOUBLE
34997: EQUAL
34998: IFTRUE 35002
35000: GO 35028
35002: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35003: LD_ADDR_VAR 0 3
35007: PUSH
35008: LD_INT 21
35010: PUSH
35011: LD_INT 22
35013: PUSH
35014: LD_INT 23
35016: PUSH
35017: LD_INT 24
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: ST_TO_ADDR
35026: GO 35209
35028: LD_INT 49
35030: DOUBLE
35031: EQUAL
35032: IFTRUE 35036
35034: GO 35062
35036: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35037: LD_ADDR_VAR 0 3
35041: PUSH
35042: LD_INT 21
35044: PUSH
35045: LD_INT 22
35047: PUSH
35048: LD_INT 23
35050: PUSH
35051: LD_INT 24
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: ST_TO_ADDR
35060: GO 35209
35062: LD_INT 51
35064: DOUBLE
35065: EQUAL
35066: IFTRUE 35070
35068: GO 35096
35070: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35071: LD_ADDR_VAR 0 3
35075: PUSH
35076: LD_INT 21
35078: PUSH
35079: LD_INT 22
35081: PUSH
35082: LD_INT 23
35084: PUSH
35085: LD_INT 24
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: ST_TO_ADDR
35094: GO 35209
35096: LD_INT 52
35098: DOUBLE
35099: EQUAL
35100: IFTRUE 35104
35102: GO 35130
35104: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35105: LD_ADDR_VAR 0 3
35109: PUSH
35110: LD_INT 21
35112: PUSH
35113: LD_INT 22
35115: PUSH
35116: LD_INT 23
35118: PUSH
35119: LD_INT 24
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: ST_TO_ADDR
35128: GO 35209
35130: LD_INT 53
35132: DOUBLE
35133: EQUAL
35134: IFTRUE 35138
35136: GO 35156
35138: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35139: LD_ADDR_VAR 0 3
35143: PUSH
35144: LD_INT 23
35146: PUSH
35147: LD_INT 24
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: ST_TO_ADDR
35154: GO 35209
35156: LD_INT 46
35158: DOUBLE
35159: EQUAL
35160: IFTRUE 35164
35162: GO 35182
35164: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35165: LD_ADDR_VAR 0 3
35169: PUSH
35170: LD_INT 23
35172: PUSH
35173: LD_INT 24
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: ST_TO_ADDR
35180: GO 35209
35182: LD_INT 47
35184: DOUBLE
35185: EQUAL
35186: IFTRUE 35190
35188: GO 35208
35190: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35191: LD_ADDR_VAR 0 3
35195: PUSH
35196: LD_INT 23
35198: PUSH
35199: LD_INT 24
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: ST_TO_ADDR
35206: GO 35209
35208: POP
// result := ( chassis in result ) ;
35209: LD_ADDR_VAR 0 3
35213: PUSH
35214: LD_VAR 0 1
35218: PUSH
35219: LD_VAR 0 3
35223: IN
35224: ST_TO_ADDR
// end ;
35225: LD_VAR 0 3
35229: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35230: LD_INT 0
35232: PPUSH
35233: PPUSH
35234: PPUSH
35235: PPUSH
35236: PPUSH
35237: PPUSH
35238: PPUSH
// result := array ;
35239: LD_ADDR_VAR 0 5
35243: PUSH
35244: LD_VAR 0 1
35248: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35249: LD_VAR 0 1
35253: NOT
35254: PUSH
35255: LD_VAR 0 2
35259: NOT
35260: OR
35261: PUSH
35262: LD_VAR 0 3
35266: NOT
35267: OR
35268: PUSH
35269: LD_VAR 0 2
35273: PUSH
35274: LD_VAR 0 1
35278: GREATER
35279: OR
35280: PUSH
35281: LD_VAR 0 3
35285: PUSH
35286: LD_VAR 0 1
35290: GREATER
35291: OR
35292: IFFALSE 35296
// exit ;
35294: GO 35592
// if direction then
35296: LD_VAR 0 4
35300: IFFALSE 35364
// begin d := 1 ;
35302: LD_ADDR_VAR 0 9
35306: PUSH
35307: LD_INT 1
35309: ST_TO_ADDR
// if i_from > i_to then
35310: LD_VAR 0 2
35314: PUSH
35315: LD_VAR 0 3
35319: GREATER
35320: IFFALSE 35346
// length := ( array - i_from ) + i_to else
35322: LD_ADDR_VAR 0 11
35326: PUSH
35327: LD_VAR 0 1
35331: PUSH
35332: LD_VAR 0 2
35336: MINUS
35337: PUSH
35338: LD_VAR 0 3
35342: PLUS
35343: ST_TO_ADDR
35344: GO 35362
// length := i_to - i_from ;
35346: LD_ADDR_VAR 0 11
35350: PUSH
35351: LD_VAR 0 3
35355: PUSH
35356: LD_VAR 0 2
35360: MINUS
35361: ST_TO_ADDR
// end else
35362: GO 35425
// begin d := - 1 ;
35364: LD_ADDR_VAR 0 9
35368: PUSH
35369: LD_INT 1
35371: NEG
35372: ST_TO_ADDR
// if i_from > i_to then
35373: LD_VAR 0 2
35377: PUSH
35378: LD_VAR 0 3
35382: GREATER
35383: IFFALSE 35403
// length := i_from - i_to else
35385: LD_ADDR_VAR 0 11
35389: PUSH
35390: LD_VAR 0 2
35394: PUSH
35395: LD_VAR 0 3
35399: MINUS
35400: ST_TO_ADDR
35401: GO 35425
// length := ( array - i_to ) + i_from ;
35403: LD_ADDR_VAR 0 11
35407: PUSH
35408: LD_VAR 0 1
35412: PUSH
35413: LD_VAR 0 3
35417: MINUS
35418: PUSH
35419: LD_VAR 0 2
35423: PLUS
35424: ST_TO_ADDR
// end ; if not length then
35425: LD_VAR 0 11
35429: NOT
35430: IFFALSE 35434
// exit ;
35432: GO 35592
// tmp := array ;
35434: LD_ADDR_VAR 0 10
35438: PUSH
35439: LD_VAR 0 1
35443: ST_TO_ADDR
// for i = 1 to length do
35444: LD_ADDR_VAR 0 6
35448: PUSH
35449: DOUBLE
35450: LD_INT 1
35452: DEC
35453: ST_TO_ADDR
35454: LD_VAR 0 11
35458: PUSH
35459: FOR_TO
35460: IFFALSE 35580
// begin for j = 1 to array do
35462: LD_ADDR_VAR 0 7
35466: PUSH
35467: DOUBLE
35468: LD_INT 1
35470: DEC
35471: ST_TO_ADDR
35472: LD_VAR 0 1
35476: PUSH
35477: FOR_TO
35478: IFFALSE 35566
// begin k := j + d ;
35480: LD_ADDR_VAR 0 8
35484: PUSH
35485: LD_VAR 0 7
35489: PUSH
35490: LD_VAR 0 9
35494: PLUS
35495: ST_TO_ADDR
// if k > array then
35496: LD_VAR 0 8
35500: PUSH
35501: LD_VAR 0 1
35505: GREATER
35506: IFFALSE 35516
// k := 1 ;
35508: LD_ADDR_VAR 0 8
35512: PUSH
35513: LD_INT 1
35515: ST_TO_ADDR
// if not k then
35516: LD_VAR 0 8
35520: NOT
35521: IFFALSE 35533
// k := array ;
35523: LD_ADDR_VAR 0 8
35527: PUSH
35528: LD_VAR 0 1
35532: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35533: LD_ADDR_VAR 0 10
35537: PUSH
35538: LD_VAR 0 10
35542: PPUSH
35543: LD_VAR 0 8
35547: PPUSH
35548: LD_VAR 0 1
35552: PUSH
35553: LD_VAR 0 7
35557: ARRAY
35558: PPUSH
35559: CALL_OW 1
35563: ST_TO_ADDR
// end ;
35564: GO 35477
35566: POP
35567: POP
// array := tmp ;
35568: LD_ADDR_VAR 0 1
35572: PUSH
35573: LD_VAR 0 10
35577: ST_TO_ADDR
// end ;
35578: GO 35459
35580: POP
35581: POP
// result := array ;
35582: LD_ADDR_VAR 0 5
35586: PUSH
35587: LD_VAR 0 1
35591: ST_TO_ADDR
// end ;
35592: LD_VAR 0 5
35596: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35597: LD_INT 0
35599: PPUSH
35600: PPUSH
// result := 0 ;
35601: LD_ADDR_VAR 0 3
35605: PUSH
35606: LD_INT 0
35608: ST_TO_ADDR
// if not array or not value in array then
35609: LD_VAR 0 1
35613: NOT
35614: PUSH
35615: LD_VAR 0 2
35619: PUSH
35620: LD_VAR 0 1
35624: IN
35625: NOT
35626: OR
35627: IFFALSE 35631
// exit ;
35629: GO 35685
// for i = 1 to array do
35631: LD_ADDR_VAR 0 4
35635: PUSH
35636: DOUBLE
35637: LD_INT 1
35639: DEC
35640: ST_TO_ADDR
35641: LD_VAR 0 1
35645: PUSH
35646: FOR_TO
35647: IFFALSE 35683
// if value = array [ i ] then
35649: LD_VAR 0 2
35653: PUSH
35654: LD_VAR 0 1
35658: PUSH
35659: LD_VAR 0 4
35663: ARRAY
35664: EQUAL
35665: IFFALSE 35681
// begin result := i ;
35667: LD_ADDR_VAR 0 3
35671: PUSH
35672: LD_VAR 0 4
35676: ST_TO_ADDR
// exit ;
35677: POP
35678: POP
35679: GO 35685
// end ;
35681: GO 35646
35683: POP
35684: POP
// end ;
35685: LD_VAR 0 3
35689: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35690: LD_INT 0
35692: PPUSH
// vc_chassis := chassis ;
35693: LD_ADDR_OWVAR 37
35697: PUSH
35698: LD_VAR 0 1
35702: ST_TO_ADDR
// vc_engine := engine ;
35703: LD_ADDR_OWVAR 39
35707: PUSH
35708: LD_VAR 0 2
35712: ST_TO_ADDR
// vc_control := control ;
35713: LD_ADDR_OWVAR 38
35717: PUSH
35718: LD_VAR 0 3
35722: ST_TO_ADDR
// vc_weapon := weapon ;
35723: LD_ADDR_OWVAR 40
35727: PUSH
35728: LD_VAR 0 4
35732: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35733: LD_ADDR_OWVAR 41
35737: PUSH
35738: LD_VAR 0 5
35742: ST_TO_ADDR
// end ;
35743: LD_VAR 0 6
35747: RET
// export function WantPlant ( unit ) ; var task ; begin
35748: LD_INT 0
35750: PPUSH
35751: PPUSH
// result := false ;
35752: LD_ADDR_VAR 0 2
35756: PUSH
35757: LD_INT 0
35759: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35760: LD_ADDR_VAR 0 3
35764: PUSH
35765: LD_VAR 0 1
35769: PPUSH
35770: CALL_OW 437
35774: ST_TO_ADDR
// if task then
35775: LD_VAR 0 3
35779: IFFALSE 35807
// if task [ 1 ] [ 1 ] = p then
35781: LD_VAR 0 3
35785: PUSH
35786: LD_INT 1
35788: ARRAY
35789: PUSH
35790: LD_INT 1
35792: ARRAY
35793: PUSH
35794: LD_STRING p
35796: EQUAL
35797: IFFALSE 35807
// result := true ;
35799: LD_ADDR_VAR 0 2
35803: PUSH
35804: LD_INT 1
35806: ST_TO_ADDR
// end ;
35807: LD_VAR 0 2
35811: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35812: LD_INT 0
35814: PPUSH
35815: PPUSH
35816: PPUSH
35817: PPUSH
// if pos < 1 then
35818: LD_VAR 0 2
35822: PUSH
35823: LD_INT 1
35825: LESS
35826: IFFALSE 35830
// exit ;
35828: GO 36133
// if pos = 1 then
35830: LD_VAR 0 2
35834: PUSH
35835: LD_INT 1
35837: EQUAL
35838: IFFALSE 35871
// result := Replace ( arr , pos [ 1 ] , value ) else
35840: LD_ADDR_VAR 0 4
35844: PUSH
35845: LD_VAR 0 1
35849: PPUSH
35850: LD_VAR 0 2
35854: PUSH
35855: LD_INT 1
35857: ARRAY
35858: PPUSH
35859: LD_VAR 0 3
35863: PPUSH
35864: CALL_OW 1
35868: ST_TO_ADDR
35869: GO 36133
// begin tmp := arr ;
35871: LD_ADDR_VAR 0 6
35875: PUSH
35876: LD_VAR 0 1
35880: ST_TO_ADDR
// s_arr := [ tmp ] ;
35881: LD_ADDR_VAR 0 7
35885: PUSH
35886: LD_VAR 0 6
35890: PUSH
35891: EMPTY
35892: LIST
35893: ST_TO_ADDR
// for i = 1 to pos - 1 do
35894: LD_ADDR_VAR 0 5
35898: PUSH
35899: DOUBLE
35900: LD_INT 1
35902: DEC
35903: ST_TO_ADDR
35904: LD_VAR 0 2
35908: PUSH
35909: LD_INT 1
35911: MINUS
35912: PUSH
35913: FOR_TO
35914: IFFALSE 35959
// begin tmp := tmp [ pos [ i ] ] ;
35916: LD_ADDR_VAR 0 6
35920: PUSH
35921: LD_VAR 0 6
35925: PUSH
35926: LD_VAR 0 2
35930: PUSH
35931: LD_VAR 0 5
35935: ARRAY
35936: ARRAY
35937: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35938: LD_ADDR_VAR 0 7
35942: PUSH
35943: LD_VAR 0 7
35947: PUSH
35948: LD_VAR 0 6
35952: PUSH
35953: EMPTY
35954: LIST
35955: ADD
35956: ST_TO_ADDR
// end ;
35957: GO 35913
35959: POP
35960: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35961: LD_ADDR_VAR 0 6
35965: PUSH
35966: LD_VAR 0 6
35970: PPUSH
35971: LD_VAR 0 2
35975: PUSH
35976: LD_VAR 0 2
35980: ARRAY
35981: PPUSH
35982: LD_VAR 0 3
35986: PPUSH
35987: CALL_OW 1
35991: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35992: LD_ADDR_VAR 0 7
35996: PUSH
35997: LD_VAR 0 7
36001: PPUSH
36002: LD_VAR 0 7
36006: PPUSH
36007: LD_VAR 0 6
36011: PPUSH
36012: CALL_OW 1
36016: ST_TO_ADDR
// for i = s_arr downto 2 do
36017: LD_ADDR_VAR 0 5
36021: PUSH
36022: DOUBLE
36023: LD_VAR 0 7
36027: INC
36028: ST_TO_ADDR
36029: LD_INT 2
36031: PUSH
36032: FOR_DOWNTO
36033: IFFALSE 36117
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36035: LD_ADDR_VAR 0 6
36039: PUSH
36040: LD_VAR 0 7
36044: PUSH
36045: LD_VAR 0 5
36049: PUSH
36050: LD_INT 1
36052: MINUS
36053: ARRAY
36054: PPUSH
36055: LD_VAR 0 2
36059: PUSH
36060: LD_VAR 0 5
36064: PUSH
36065: LD_INT 1
36067: MINUS
36068: ARRAY
36069: PPUSH
36070: LD_VAR 0 7
36074: PUSH
36075: LD_VAR 0 5
36079: ARRAY
36080: PPUSH
36081: CALL_OW 1
36085: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36086: LD_ADDR_VAR 0 7
36090: PUSH
36091: LD_VAR 0 7
36095: PPUSH
36096: LD_VAR 0 5
36100: PUSH
36101: LD_INT 1
36103: MINUS
36104: PPUSH
36105: LD_VAR 0 6
36109: PPUSH
36110: CALL_OW 1
36114: ST_TO_ADDR
// end ;
36115: GO 36032
36117: POP
36118: POP
// result := s_arr [ 1 ] ;
36119: LD_ADDR_VAR 0 4
36123: PUSH
36124: LD_VAR 0 7
36128: PUSH
36129: LD_INT 1
36131: ARRAY
36132: ST_TO_ADDR
// end ; end ;
36133: LD_VAR 0 4
36137: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36138: LD_INT 0
36140: PPUSH
36141: PPUSH
// if not list then
36142: LD_VAR 0 1
36146: NOT
36147: IFFALSE 36151
// exit ;
36149: GO 36242
// i := list [ pos1 ] ;
36151: LD_ADDR_VAR 0 5
36155: PUSH
36156: LD_VAR 0 1
36160: PUSH
36161: LD_VAR 0 2
36165: ARRAY
36166: ST_TO_ADDR
// if not i then
36167: LD_VAR 0 5
36171: NOT
36172: IFFALSE 36176
// exit ;
36174: GO 36242
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36176: LD_ADDR_VAR 0 1
36180: PUSH
36181: LD_VAR 0 1
36185: PPUSH
36186: LD_VAR 0 2
36190: PPUSH
36191: LD_VAR 0 1
36195: PUSH
36196: LD_VAR 0 3
36200: ARRAY
36201: PPUSH
36202: CALL_OW 1
36206: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36207: LD_ADDR_VAR 0 1
36211: PUSH
36212: LD_VAR 0 1
36216: PPUSH
36217: LD_VAR 0 3
36221: PPUSH
36222: LD_VAR 0 5
36226: PPUSH
36227: CALL_OW 1
36231: ST_TO_ADDR
// result := list ;
36232: LD_ADDR_VAR 0 4
36236: PUSH
36237: LD_VAR 0 1
36241: ST_TO_ADDR
// end ;
36242: LD_VAR 0 4
36246: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36247: LD_INT 0
36249: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36250: LD_ADDR_VAR 0 5
36254: PUSH
36255: LD_VAR 0 1
36259: PPUSH
36260: CALL_OW 250
36264: PPUSH
36265: LD_VAR 0 1
36269: PPUSH
36270: CALL_OW 251
36274: PPUSH
36275: LD_VAR 0 2
36279: PPUSH
36280: LD_VAR 0 3
36284: PPUSH
36285: LD_VAR 0 4
36289: PPUSH
36290: CALL 36300 0 5
36294: ST_TO_ADDR
// end ;
36295: LD_VAR 0 5
36299: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36300: LD_INT 0
36302: PPUSH
36303: PPUSH
36304: PPUSH
36305: PPUSH
// if not list then
36306: LD_VAR 0 3
36310: NOT
36311: IFFALSE 36315
// exit ;
36313: GO 36703
// result := [ ] ;
36315: LD_ADDR_VAR 0 6
36319: PUSH
36320: EMPTY
36321: ST_TO_ADDR
// for i in list do
36322: LD_ADDR_VAR 0 7
36326: PUSH
36327: LD_VAR 0 3
36331: PUSH
36332: FOR_IN
36333: IFFALSE 36535
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36335: LD_ADDR_VAR 0 9
36339: PUSH
36340: LD_VAR 0 7
36344: PPUSH
36345: LD_VAR 0 1
36349: PPUSH
36350: LD_VAR 0 2
36354: PPUSH
36355: CALL_OW 297
36359: ST_TO_ADDR
// if not result then
36360: LD_VAR 0 6
36364: NOT
36365: IFFALSE 36391
// result := [ [ i , tmp ] ] else
36367: LD_ADDR_VAR 0 6
36371: PUSH
36372: LD_VAR 0 7
36376: PUSH
36377: LD_VAR 0 9
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: EMPTY
36387: LIST
36388: ST_TO_ADDR
36389: GO 36533
// begin if result [ result ] [ 2 ] < tmp then
36391: LD_VAR 0 6
36395: PUSH
36396: LD_VAR 0 6
36400: ARRAY
36401: PUSH
36402: LD_INT 2
36404: ARRAY
36405: PUSH
36406: LD_VAR 0 9
36410: LESS
36411: IFFALSE 36453
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36413: LD_ADDR_VAR 0 6
36417: PUSH
36418: LD_VAR 0 6
36422: PPUSH
36423: LD_VAR 0 6
36427: PUSH
36428: LD_INT 1
36430: PLUS
36431: PPUSH
36432: LD_VAR 0 7
36436: PUSH
36437: LD_VAR 0 9
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PPUSH
36446: CALL_OW 2
36450: ST_TO_ADDR
36451: GO 36533
// for j = 1 to result do
36453: LD_ADDR_VAR 0 8
36457: PUSH
36458: DOUBLE
36459: LD_INT 1
36461: DEC
36462: ST_TO_ADDR
36463: LD_VAR 0 6
36467: PUSH
36468: FOR_TO
36469: IFFALSE 36531
// begin if tmp < result [ j ] [ 2 ] then
36471: LD_VAR 0 9
36475: PUSH
36476: LD_VAR 0 6
36480: PUSH
36481: LD_VAR 0 8
36485: ARRAY
36486: PUSH
36487: LD_INT 2
36489: ARRAY
36490: LESS
36491: IFFALSE 36529
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36493: LD_ADDR_VAR 0 6
36497: PUSH
36498: LD_VAR 0 6
36502: PPUSH
36503: LD_VAR 0 8
36507: PPUSH
36508: LD_VAR 0 7
36512: PUSH
36513: LD_VAR 0 9
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: PPUSH
36522: CALL_OW 2
36526: ST_TO_ADDR
// break ;
36527: GO 36531
// end ; end ;
36529: GO 36468
36531: POP
36532: POP
// end ; end ;
36533: GO 36332
36535: POP
36536: POP
// if result and not asc then
36537: LD_VAR 0 6
36541: PUSH
36542: LD_VAR 0 4
36546: NOT
36547: AND
36548: IFFALSE 36623
// begin tmp := result ;
36550: LD_ADDR_VAR 0 9
36554: PUSH
36555: LD_VAR 0 6
36559: ST_TO_ADDR
// for i = tmp downto 1 do
36560: LD_ADDR_VAR 0 7
36564: PUSH
36565: DOUBLE
36566: LD_VAR 0 9
36570: INC
36571: ST_TO_ADDR
36572: LD_INT 1
36574: PUSH
36575: FOR_DOWNTO
36576: IFFALSE 36621
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36578: LD_ADDR_VAR 0 6
36582: PUSH
36583: LD_VAR 0 6
36587: PPUSH
36588: LD_VAR 0 9
36592: PUSH
36593: LD_VAR 0 7
36597: MINUS
36598: PUSH
36599: LD_INT 1
36601: PLUS
36602: PPUSH
36603: LD_VAR 0 9
36607: PUSH
36608: LD_VAR 0 7
36612: ARRAY
36613: PPUSH
36614: CALL_OW 1
36618: ST_TO_ADDR
36619: GO 36575
36621: POP
36622: POP
// end ; tmp := [ ] ;
36623: LD_ADDR_VAR 0 9
36627: PUSH
36628: EMPTY
36629: ST_TO_ADDR
// if mode then
36630: LD_VAR 0 5
36634: IFFALSE 36703
// begin for i = 1 to result do
36636: LD_ADDR_VAR 0 7
36640: PUSH
36641: DOUBLE
36642: LD_INT 1
36644: DEC
36645: ST_TO_ADDR
36646: LD_VAR 0 6
36650: PUSH
36651: FOR_TO
36652: IFFALSE 36691
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36654: LD_ADDR_VAR 0 9
36658: PUSH
36659: LD_VAR 0 9
36663: PPUSH
36664: LD_VAR 0 7
36668: PPUSH
36669: LD_VAR 0 6
36673: PUSH
36674: LD_VAR 0 7
36678: ARRAY
36679: PUSH
36680: LD_INT 1
36682: ARRAY
36683: PPUSH
36684: CALL_OW 1
36688: ST_TO_ADDR
36689: GO 36651
36691: POP
36692: POP
// result := tmp ;
36693: LD_ADDR_VAR 0 6
36697: PUSH
36698: LD_VAR 0 9
36702: ST_TO_ADDR
// end ; end ;
36703: LD_VAR 0 6
36707: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36708: LD_INT 0
36710: PPUSH
36711: PPUSH
36712: PPUSH
36713: PPUSH
36714: PPUSH
36715: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36716: LD_ADDR_VAR 0 5
36720: PUSH
36721: LD_INT 0
36723: PUSH
36724: LD_INT 0
36726: PUSH
36727: LD_INT 0
36729: PUSH
36730: EMPTY
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: LIST
36736: LIST
36737: ST_TO_ADDR
// if not x or not y then
36738: LD_VAR 0 2
36742: NOT
36743: PUSH
36744: LD_VAR 0 3
36748: NOT
36749: OR
36750: IFFALSE 36754
// exit ;
36752: GO 38406
// if not range then
36754: LD_VAR 0 4
36758: NOT
36759: IFFALSE 36769
// range := 10 ;
36761: LD_ADDR_VAR 0 4
36765: PUSH
36766: LD_INT 10
36768: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36769: LD_ADDR_VAR 0 8
36773: PUSH
36774: LD_INT 81
36776: PUSH
36777: LD_VAR 0 1
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: LD_INT 92
36788: PUSH
36789: LD_VAR 0 2
36793: PUSH
36794: LD_VAR 0 3
36798: PUSH
36799: LD_VAR 0 4
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: PUSH
36810: LD_INT 3
36812: PUSH
36813: LD_INT 21
36815: PUSH
36816: LD_INT 3
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: LIST
36831: PPUSH
36832: CALL_OW 69
36836: ST_TO_ADDR
// if not tmp then
36837: LD_VAR 0 8
36841: NOT
36842: IFFALSE 36846
// exit ;
36844: GO 38406
// for i in tmp do
36846: LD_ADDR_VAR 0 6
36850: PUSH
36851: LD_VAR 0 8
36855: PUSH
36856: FOR_IN
36857: IFFALSE 38381
// begin points := [ 0 , 0 , 0 ] ;
36859: LD_ADDR_VAR 0 9
36863: PUSH
36864: LD_INT 0
36866: PUSH
36867: LD_INT 0
36869: PUSH
36870: LD_INT 0
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: LIST
36877: ST_TO_ADDR
// bpoints := 1 ;
36878: LD_ADDR_VAR 0 10
36882: PUSH
36883: LD_INT 1
36885: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36886: LD_VAR 0 6
36890: PPUSH
36891: CALL_OW 247
36895: PUSH
36896: LD_INT 1
36898: DOUBLE
36899: EQUAL
36900: IFTRUE 36904
36902: GO 37482
36904: POP
// begin if GetClass ( i ) = 1 then
36905: LD_VAR 0 6
36909: PPUSH
36910: CALL_OW 257
36914: PUSH
36915: LD_INT 1
36917: EQUAL
36918: IFFALSE 36939
// points := [ 10 , 5 , 3 ] ;
36920: LD_ADDR_VAR 0 9
36924: PUSH
36925: LD_INT 10
36927: PUSH
36928: LD_INT 5
36930: PUSH
36931: LD_INT 3
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: LIST
36938: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36939: LD_VAR 0 6
36943: PPUSH
36944: CALL_OW 257
36948: PUSH
36949: LD_INT 2
36951: PUSH
36952: LD_INT 3
36954: PUSH
36955: LD_INT 4
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: LIST
36962: IN
36963: IFFALSE 36984
// points := [ 3 , 2 , 1 ] ;
36965: LD_ADDR_VAR 0 9
36969: PUSH
36970: LD_INT 3
36972: PUSH
36973: LD_INT 2
36975: PUSH
36976: LD_INT 1
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: LIST
36983: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36984: LD_VAR 0 6
36988: PPUSH
36989: CALL_OW 257
36993: PUSH
36994: LD_INT 5
36996: EQUAL
36997: IFFALSE 37018
// points := [ 130 , 5 , 2 ] ;
36999: LD_ADDR_VAR 0 9
37003: PUSH
37004: LD_INT 130
37006: PUSH
37007: LD_INT 5
37009: PUSH
37010: LD_INT 2
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: LIST
37017: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37018: LD_VAR 0 6
37022: PPUSH
37023: CALL_OW 257
37027: PUSH
37028: LD_INT 8
37030: EQUAL
37031: IFFALSE 37052
// points := [ 35 , 35 , 30 ] ;
37033: LD_ADDR_VAR 0 9
37037: PUSH
37038: LD_INT 35
37040: PUSH
37041: LD_INT 35
37043: PUSH
37044: LD_INT 30
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: LIST
37051: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37052: LD_VAR 0 6
37056: PPUSH
37057: CALL_OW 257
37061: PUSH
37062: LD_INT 9
37064: EQUAL
37065: IFFALSE 37086
// points := [ 20 , 55 , 40 ] ;
37067: LD_ADDR_VAR 0 9
37071: PUSH
37072: LD_INT 20
37074: PUSH
37075: LD_INT 55
37077: PUSH
37078: LD_INT 40
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: LIST
37085: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37086: LD_VAR 0 6
37090: PPUSH
37091: CALL_OW 257
37095: PUSH
37096: LD_INT 12
37098: PUSH
37099: LD_INT 16
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: IN
37106: IFFALSE 37127
// points := [ 5 , 3 , 2 ] ;
37108: LD_ADDR_VAR 0 9
37112: PUSH
37113: LD_INT 5
37115: PUSH
37116: LD_INT 3
37118: PUSH
37119: LD_INT 2
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: LIST
37126: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37127: LD_VAR 0 6
37131: PPUSH
37132: CALL_OW 257
37136: PUSH
37137: LD_INT 17
37139: EQUAL
37140: IFFALSE 37161
// points := [ 100 , 50 , 75 ] ;
37142: LD_ADDR_VAR 0 9
37146: PUSH
37147: LD_INT 100
37149: PUSH
37150: LD_INT 50
37152: PUSH
37153: LD_INT 75
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: LIST
37160: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37161: LD_VAR 0 6
37165: PPUSH
37166: CALL_OW 257
37170: PUSH
37171: LD_INT 15
37173: EQUAL
37174: IFFALSE 37195
// points := [ 10 , 5 , 3 ] ;
37176: LD_ADDR_VAR 0 9
37180: PUSH
37181: LD_INT 10
37183: PUSH
37184: LD_INT 5
37186: PUSH
37187: LD_INT 3
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: LIST
37194: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37195: LD_VAR 0 6
37199: PPUSH
37200: CALL_OW 257
37204: PUSH
37205: LD_INT 14
37207: EQUAL
37208: IFFALSE 37229
// points := [ 10 , 0 , 0 ] ;
37210: LD_ADDR_VAR 0 9
37214: PUSH
37215: LD_INT 10
37217: PUSH
37218: LD_INT 0
37220: PUSH
37221: LD_INT 0
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: LIST
37228: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37229: LD_VAR 0 6
37233: PPUSH
37234: CALL_OW 257
37238: PUSH
37239: LD_INT 11
37241: EQUAL
37242: IFFALSE 37263
// points := [ 30 , 10 , 5 ] ;
37244: LD_ADDR_VAR 0 9
37248: PUSH
37249: LD_INT 30
37251: PUSH
37252: LD_INT 10
37254: PUSH
37255: LD_INT 5
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: LIST
37262: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37263: LD_VAR 0 1
37267: PPUSH
37268: LD_INT 5
37270: PPUSH
37271: CALL_OW 321
37275: PUSH
37276: LD_INT 2
37278: EQUAL
37279: IFFALSE 37296
// bpoints := bpoints * 1.8 ;
37281: LD_ADDR_VAR 0 10
37285: PUSH
37286: LD_VAR 0 10
37290: PUSH
37291: LD_REAL  1.80000000000000E+0000
37294: MUL
37295: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37296: LD_VAR 0 6
37300: PPUSH
37301: CALL_OW 257
37305: PUSH
37306: LD_INT 1
37308: PUSH
37309: LD_INT 2
37311: PUSH
37312: LD_INT 3
37314: PUSH
37315: LD_INT 4
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: IN
37324: PUSH
37325: LD_VAR 0 1
37329: PPUSH
37330: LD_INT 51
37332: PPUSH
37333: CALL_OW 321
37337: PUSH
37338: LD_INT 2
37340: EQUAL
37341: AND
37342: IFFALSE 37359
// bpoints := bpoints * 1.2 ;
37344: LD_ADDR_VAR 0 10
37348: PUSH
37349: LD_VAR 0 10
37353: PUSH
37354: LD_REAL  1.20000000000000E+0000
37357: MUL
37358: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37359: LD_VAR 0 6
37363: PPUSH
37364: CALL_OW 257
37368: PUSH
37369: LD_INT 5
37371: PUSH
37372: LD_INT 7
37374: PUSH
37375: LD_INT 9
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: LIST
37382: IN
37383: PUSH
37384: LD_VAR 0 1
37388: PPUSH
37389: LD_INT 52
37391: PPUSH
37392: CALL_OW 321
37396: PUSH
37397: LD_INT 2
37399: EQUAL
37400: AND
37401: IFFALSE 37418
// bpoints := bpoints * 1.5 ;
37403: LD_ADDR_VAR 0 10
37407: PUSH
37408: LD_VAR 0 10
37412: PUSH
37413: LD_REAL  1.50000000000000E+0000
37416: MUL
37417: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37418: LD_VAR 0 1
37422: PPUSH
37423: LD_INT 66
37425: PPUSH
37426: CALL_OW 321
37430: PUSH
37431: LD_INT 2
37433: EQUAL
37434: IFFALSE 37451
// bpoints := bpoints * 1.1 ;
37436: LD_ADDR_VAR 0 10
37440: PUSH
37441: LD_VAR 0 10
37445: PUSH
37446: LD_REAL  1.10000000000000E+0000
37449: MUL
37450: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37451: LD_ADDR_VAR 0 10
37455: PUSH
37456: LD_VAR 0 10
37460: PUSH
37461: LD_VAR 0 6
37465: PPUSH
37466: LD_INT 1
37468: PPUSH
37469: CALL_OW 259
37473: PUSH
37474: LD_REAL  1.15000000000000E+0000
37477: MUL
37478: MUL
37479: ST_TO_ADDR
// end ; unit_vehicle :
37480: GO 38310
37482: LD_INT 2
37484: DOUBLE
37485: EQUAL
37486: IFTRUE 37490
37488: GO 38298
37490: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37491: LD_VAR 0 6
37495: PPUSH
37496: CALL_OW 264
37500: PUSH
37501: LD_INT 2
37503: PUSH
37504: LD_INT 42
37506: PUSH
37507: LD_INT 24
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: LIST
37514: IN
37515: IFFALSE 37536
// points := [ 25 , 5 , 3 ] ;
37517: LD_ADDR_VAR 0 9
37521: PUSH
37522: LD_INT 25
37524: PUSH
37525: LD_INT 5
37527: PUSH
37528: LD_INT 3
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: LIST
37535: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37536: LD_VAR 0 6
37540: PPUSH
37541: CALL_OW 264
37545: PUSH
37546: LD_INT 4
37548: PUSH
37549: LD_INT 43
37551: PUSH
37552: LD_INT 25
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: LIST
37559: IN
37560: IFFALSE 37581
// points := [ 40 , 15 , 5 ] ;
37562: LD_ADDR_VAR 0 9
37566: PUSH
37567: LD_INT 40
37569: PUSH
37570: LD_INT 15
37572: PUSH
37573: LD_INT 5
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: LIST
37580: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37581: LD_VAR 0 6
37585: PPUSH
37586: CALL_OW 264
37590: PUSH
37591: LD_INT 3
37593: PUSH
37594: LD_INT 23
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: IN
37601: IFFALSE 37622
// points := [ 7 , 25 , 8 ] ;
37603: LD_ADDR_VAR 0 9
37607: PUSH
37608: LD_INT 7
37610: PUSH
37611: LD_INT 25
37613: PUSH
37614: LD_INT 8
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: LIST
37621: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37622: LD_VAR 0 6
37626: PPUSH
37627: CALL_OW 264
37631: PUSH
37632: LD_INT 5
37634: PUSH
37635: LD_INT 27
37637: PUSH
37638: LD_INT 44
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: LIST
37645: IN
37646: IFFALSE 37667
// points := [ 14 , 50 , 16 ] ;
37648: LD_ADDR_VAR 0 9
37652: PUSH
37653: LD_INT 14
37655: PUSH
37656: LD_INT 50
37658: PUSH
37659: LD_INT 16
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: LIST
37666: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37667: LD_VAR 0 6
37671: PPUSH
37672: CALL_OW 264
37676: PUSH
37677: LD_INT 6
37679: PUSH
37680: LD_INT 46
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: IN
37687: IFFALSE 37708
// points := [ 32 , 120 , 70 ] ;
37689: LD_ADDR_VAR 0 9
37693: PUSH
37694: LD_INT 32
37696: PUSH
37697: LD_INT 120
37699: PUSH
37700: LD_INT 70
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: LIST
37707: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37708: LD_VAR 0 6
37712: PPUSH
37713: CALL_OW 264
37717: PUSH
37718: LD_INT 7
37720: PUSH
37721: LD_INT 28
37723: PUSH
37724: LD_INT 45
37726: PUSH
37727: LD_EXP 102
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: IN
37738: IFFALSE 37759
// points := [ 35 , 20 , 45 ] ;
37740: LD_ADDR_VAR 0 9
37744: PUSH
37745: LD_INT 35
37747: PUSH
37748: LD_INT 20
37750: PUSH
37751: LD_INT 45
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: LIST
37758: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37759: LD_VAR 0 6
37763: PPUSH
37764: CALL_OW 264
37768: PUSH
37769: LD_INT 47
37771: PUSH
37772: EMPTY
37773: LIST
37774: IN
37775: IFFALSE 37796
// points := [ 67 , 45 , 75 ] ;
37777: LD_ADDR_VAR 0 9
37781: PUSH
37782: LD_INT 67
37784: PUSH
37785: LD_INT 45
37787: PUSH
37788: LD_INT 75
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: LIST
37795: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37796: LD_VAR 0 6
37800: PPUSH
37801: CALL_OW 264
37805: PUSH
37806: LD_INT 26
37808: PUSH
37809: EMPTY
37810: LIST
37811: IN
37812: IFFALSE 37833
// points := [ 120 , 30 , 80 ] ;
37814: LD_ADDR_VAR 0 9
37818: PUSH
37819: LD_INT 120
37821: PUSH
37822: LD_INT 30
37824: PUSH
37825: LD_INT 80
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: LIST
37832: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37833: LD_VAR 0 6
37837: PPUSH
37838: CALL_OW 264
37842: PUSH
37843: LD_INT 22
37845: PUSH
37846: EMPTY
37847: LIST
37848: IN
37849: IFFALSE 37870
// points := [ 40 , 1 , 1 ] ;
37851: LD_ADDR_VAR 0 9
37855: PUSH
37856: LD_INT 40
37858: PUSH
37859: LD_INT 1
37861: PUSH
37862: LD_INT 1
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: LIST
37869: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37870: LD_VAR 0 6
37874: PPUSH
37875: CALL_OW 264
37879: PUSH
37880: LD_INT 29
37882: PUSH
37883: EMPTY
37884: LIST
37885: IN
37886: IFFALSE 37907
// points := [ 70 , 200 , 400 ] ;
37888: LD_ADDR_VAR 0 9
37892: PUSH
37893: LD_INT 70
37895: PUSH
37896: LD_INT 200
37898: PUSH
37899: LD_INT 400
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: LIST
37906: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37907: LD_VAR 0 6
37911: PPUSH
37912: CALL_OW 264
37916: PUSH
37917: LD_INT 14
37919: PUSH
37920: LD_INT 53
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: IN
37927: IFFALSE 37948
// points := [ 40 , 10 , 20 ] ;
37929: LD_ADDR_VAR 0 9
37933: PUSH
37934: LD_INT 40
37936: PUSH
37937: LD_INT 10
37939: PUSH
37940: LD_INT 20
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: LIST
37947: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37948: LD_VAR 0 6
37952: PPUSH
37953: CALL_OW 264
37957: PUSH
37958: LD_INT 9
37960: PUSH
37961: EMPTY
37962: LIST
37963: IN
37964: IFFALSE 37985
// points := [ 5 , 70 , 20 ] ;
37966: LD_ADDR_VAR 0 9
37970: PUSH
37971: LD_INT 5
37973: PUSH
37974: LD_INT 70
37976: PUSH
37977: LD_INT 20
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: LIST
37984: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37985: LD_VAR 0 6
37989: PPUSH
37990: CALL_OW 264
37994: PUSH
37995: LD_INT 10
37997: PUSH
37998: EMPTY
37999: LIST
38000: IN
38001: IFFALSE 38022
// points := [ 35 , 110 , 70 ] ;
38003: LD_ADDR_VAR 0 9
38007: PUSH
38008: LD_INT 35
38010: PUSH
38011: LD_INT 110
38013: PUSH
38014: LD_INT 70
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: LIST
38021: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38022: LD_VAR 0 6
38026: PPUSH
38027: CALL_OW 265
38031: PUSH
38032: LD_INT 25
38034: EQUAL
38035: IFFALSE 38056
// points := [ 80 , 65 , 100 ] ;
38037: LD_ADDR_VAR 0 9
38041: PUSH
38042: LD_INT 80
38044: PUSH
38045: LD_INT 65
38047: PUSH
38048: LD_INT 100
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: LIST
38055: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38056: LD_VAR 0 6
38060: PPUSH
38061: CALL_OW 263
38065: PUSH
38066: LD_INT 1
38068: EQUAL
38069: IFFALSE 38104
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38071: LD_ADDR_VAR 0 10
38075: PUSH
38076: LD_VAR 0 10
38080: PUSH
38081: LD_VAR 0 6
38085: PPUSH
38086: CALL_OW 311
38090: PPUSH
38091: LD_INT 3
38093: PPUSH
38094: CALL_OW 259
38098: PUSH
38099: LD_INT 4
38101: MUL
38102: MUL
38103: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38104: LD_VAR 0 6
38108: PPUSH
38109: CALL_OW 263
38113: PUSH
38114: LD_INT 2
38116: EQUAL
38117: IFFALSE 38168
// begin j := IsControledBy ( i ) ;
38119: LD_ADDR_VAR 0 7
38123: PUSH
38124: LD_VAR 0 6
38128: PPUSH
38129: CALL_OW 312
38133: ST_TO_ADDR
// if j then
38134: LD_VAR 0 7
38138: IFFALSE 38168
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38140: LD_ADDR_VAR 0 10
38144: PUSH
38145: LD_VAR 0 10
38149: PUSH
38150: LD_VAR 0 7
38154: PPUSH
38155: LD_INT 3
38157: PPUSH
38158: CALL_OW 259
38162: PUSH
38163: LD_INT 3
38165: MUL
38166: MUL
38167: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38168: LD_VAR 0 6
38172: PPUSH
38173: CALL_OW 264
38177: PUSH
38178: LD_INT 5
38180: PUSH
38181: LD_INT 6
38183: PUSH
38184: LD_INT 46
38186: PUSH
38187: LD_INT 44
38189: PUSH
38190: LD_INT 47
38192: PUSH
38193: LD_INT 45
38195: PUSH
38196: LD_INT 28
38198: PUSH
38199: LD_INT 7
38201: PUSH
38202: LD_INT 27
38204: PUSH
38205: LD_INT 29
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: IN
38220: PUSH
38221: LD_VAR 0 1
38225: PPUSH
38226: LD_INT 52
38228: PPUSH
38229: CALL_OW 321
38233: PUSH
38234: LD_INT 2
38236: EQUAL
38237: AND
38238: IFFALSE 38255
// bpoints := bpoints * 1.2 ;
38240: LD_ADDR_VAR 0 10
38244: PUSH
38245: LD_VAR 0 10
38249: PUSH
38250: LD_REAL  1.20000000000000E+0000
38253: MUL
38254: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38255: LD_VAR 0 6
38259: PPUSH
38260: CALL_OW 264
38264: PUSH
38265: LD_INT 6
38267: PUSH
38268: LD_INT 46
38270: PUSH
38271: LD_INT 47
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: LIST
38278: IN
38279: IFFALSE 38296
// bpoints := bpoints * 1.2 ;
38281: LD_ADDR_VAR 0 10
38285: PUSH
38286: LD_VAR 0 10
38290: PUSH
38291: LD_REAL  1.20000000000000E+0000
38294: MUL
38295: ST_TO_ADDR
// end ; unit_building :
38296: GO 38310
38298: LD_INT 3
38300: DOUBLE
38301: EQUAL
38302: IFTRUE 38306
38304: GO 38309
38306: POP
// ; end ;
38307: GO 38310
38309: POP
// for j = 1 to 3 do
38310: LD_ADDR_VAR 0 7
38314: PUSH
38315: DOUBLE
38316: LD_INT 1
38318: DEC
38319: ST_TO_ADDR
38320: LD_INT 3
38322: PUSH
38323: FOR_TO
38324: IFFALSE 38377
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38326: LD_ADDR_VAR 0 5
38330: PUSH
38331: LD_VAR 0 5
38335: PPUSH
38336: LD_VAR 0 7
38340: PPUSH
38341: LD_VAR 0 5
38345: PUSH
38346: LD_VAR 0 7
38350: ARRAY
38351: PUSH
38352: LD_VAR 0 9
38356: PUSH
38357: LD_VAR 0 7
38361: ARRAY
38362: PUSH
38363: LD_VAR 0 10
38367: MUL
38368: PLUS
38369: PPUSH
38370: CALL_OW 1
38374: ST_TO_ADDR
38375: GO 38323
38377: POP
38378: POP
// end ;
38379: GO 36856
38381: POP
38382: POP
// result := Replace ( result , 4 , tmp ) ;
38383: LD_ADDR_VAR 0 5
38387: PUSH
38388: LD_VAR 0 5
38392: PPUSH
38393: LD_INT 4
38395: PPUSH
38396: LD_VAR 0 8
38400: PPUSH
38401: CALL_OW 1
38405: ST_TO_ADDR
// end ;
38406: LD_VAR 0 5
38410: RET
// export function DangerAtRange ( unit , range ) ; begin
38411: LD_INT 0
38413: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38414: LD_ADDR_VAR 0 3
38418: PUSH
38419: LD_VAR 0 1
38423: PPUSH
38424: CALL_OW 255
38428: PPUSH
38429: LD_VAR 0 1
38433: PPUSH
38434: CALL_OW 250
38438: PPUSH
38439: LD_VAR 0 1
38443: PPUSH
38444: CALL_OW 251
38448: PPUSH
38449: LD_VAR 0 2
38453: PPUSH
38454: CALL 36708 0 4
38458: ST_TO_ADDR
// end ;
38459: LD_VAR 0 3
38463: RET
// export function DangerInArea ( side , area ) ; begin
38464: LD_INT 0
38466: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38467: LD_ADDR_VAR 0 3
38471: PUSH
38472: LD_VAR 0 2
38476: PPUSH
38477: LD_INT 81
38479: PUSH
38480: LD_VAR 0 1
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PPUSH
38489: CALL_OW 70
38493: ST_TO_ADDR
// end ;
38494: LD_VAR 0 3
38498: RET
// export function IsExtension ( b ) ; begin
38499: LD_INT 0
38501: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38502: LD_ADDR_VAR 0 2
38506: PUSH
38507: LD_VAR 0 1
38511: PUSH
38512: LD_INT 23
38514: PUSH
38515: LD_INT 20
38517: PUSH
38518: LD_INT 22
38520: PUSH
38521: LD_INT 17
38523: PUSH
38524: LD_INT 24
38526: PUSH
38527: LD_INT 21
38529: PUSH
38530: LD_INT 19
38532: PUSH
38533: LD_INT 16
38535: PUSH
38536: LD_INT 25
38538: PUSH
38539: LD_INT 18
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: IN
38554: ST_TO_ADDR
// end ;
38555: LD_VAR 0 2
38559: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38560: LD_INT 0
38562: PPUSH
38563: PPUSH
38564: PPUSH
// result := [ ] ;
38565: LD_ADDR_VAR 0 4
38569: PUSH
38570: EMPTY
38571: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38572: LD_ADDR_VAR 0 5
38576: PUSH
38577: LD_VAR 0 2
38581: PPUSH
38582: LD_INT 21
38584: PUSH
38585: LD_INT 3
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PPUSH
38592: CALL_OW 70
38596: ST_TO_ADDR
// if not tmp then
38597: LD_VAR 0 5
38601: NOT
38602: IFFALSE 38606
// exit ;
38604: GO 38670
// if checkLink then
38606: LD_VAR 0 3
38610: IFFALSE 38660
// begin for i in tmp do
38612: LD_ADDR_VAR 0 6
38616: PUSH
38617: LD_VAR 0 5
38621: PUSH
38622: FOR_IN
38623: IFFALSE 38658
// if GetBase ( i ) <> base then
38625: LD_VAR 0 6
38629: PPUSH
38630: CALL_OW 274
38634: PUSH
38635: LD_VAR 0 1
38639: NONEQUAL
38640: IFFALSE 38656
// ComLinkToBase ( base , i ) ;
38642: LD_VAR 0 1
38646: PPUSH
38647: LD_VAR 0 6
38651: PPUSH
38652: CALL_OW 169
38656: GO 38622
38658: POP
38659: POP
// end ; result := tmp ;
38660: LD_ADDR_VAR 0 4
38664: PUSH
38665: LD_VAR 0 5
38669: ST_TO_ADDR
// end ;
38670: LD_VAR 0 4
38674: RET
// export function ComComplete ( units , b ) ; var i ; begin
38675: LD_INT 0
38677: PPUSH
38678: PPUSH
// if not units then
38679: LD_VAR 0 1
38683: NOT
38684: IFFALSE 38688
// exit ;
38686: GO 38778
// for i in units do
38688: LD_ADDR_VAR 0 4
38692: PUSH
38693: LD_VAR 0 1
38697: PUSH
38698: FOR_IN
38699: IFFALSE 38776
// if BuildingStatus ( b ) = bs_build then
38701: LD_VAR 0 2
38705: PPUSH
38706: CALL_OW 461
38710: PUSH
38711: LD_INT 1
38713: EQUAL
38714: IFFALSE 38774
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38716: LD_VAR 0 4
38720: PPUSH
38721: LD_STRING h
38723: PUSH
38724: LD_VAR 0 2
38728: PPUSH
38729: CALL_OW 250
38733: PUSH
38734: LD_VAR 0 2
38738: PPUSH
38739: CALL_OW 251
38743: PUSH
38744: LD_VAR 0 2
38748: PUSH
38749: LD_INT 0
38751: PUSH
38752: LD_INT 0
38754: PUSH
38755: LD_INT 0
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: PUSH
38767: EMPTY
38768: LIST
38769: PPUSH
38770: CALL_OW 446
38774: GO 38698
38776: POP
38777: POP
// end ;
38778: LD_VAR 0 3
38782: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38783: LD_INT 0
38785: PPUSH
38786: PPUSH
38787: PPUSH
38788: PPUSH
38789: PPUSH
38790: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38791: LD_VAR 0 1
38795: NOT
38796: PUSH
38797: LD_VAR 0 1
38801: PPUSH
38802: CALL_OW 263
38806: PUSH
38807: LD_INT 2
38809: NONEQUAL
38810: OR
38811: IFFALSE 38815
// exit ;
38813: GO 39131
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38815: LD_ADDR_VAR 0 6
38819: PUSH
38820: LD_INT 22
38822: PUSH
38823: LD_VAR 0 1
38827: PPUSH
38828: CALL_OW 255
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 2
38839: PUSH
38840: LD_INT 30
38842: PUSH
38843: LD_INT 36
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 34
38852: PUSH
38853: LD_INT 31
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: LIST
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PPUSH
38869: CALL_OW 69
38873: ST_TO_ADDR
// if not tmp then
38874: LD_VAR 0 6
38878: NOT
38879: IFFALSE 38883
// exit ;
38881: GO 39131
// result := [ ] ;
38883: LD_ADDR_VAR 0 2
38887: PUSH
38888: EMPTY
38889: ST_TO_ADDR
// for i in tmp do
38890: LD_ADDR_VAR 0 3
38894: PUSH
38895: LD_VAR 0 6
38899: PUSH
38900: FOR_IN
38901: IFFALSE 38972
// begin t := UnitsInside ( i ) ;
38903: LD_ADDR_VAR 0 4
38907: PUSH
38908: LD_VAR 0 3
38912: PPUSH
38913: CALL_OW 313
38917: ST_TO_ADDR
// if t then
38918: LD_VAR 0 4
38922: IFFALSE 38970
// for j in t do
38924: LD_ADDR_VAR 0 7
38928: PUSH
38929: LD_VAR 0 4
38933: PUSH
38934: FOR_IN
38935: IFFALSE 38968
// result := Replace ( result , result + 1 , j ) ;
38937: LD_ADDR_VAR 0 2
38941: PUSH
38942: LD_VAR 0 2
38946: PPUSH
38947: LD_VAR 0 2
38951: PUSH
38952: LD_INT 1
38954: PLUS
38955: PPUSH
38956: LD_VAR 0 7
38960: PPUSH
38961: CALL_OW 1
38965: ST_TO_ADDR
38966: GO 38934
38968: POP
38969: POP
// end ;
38970: GO 38900
38972: POP
38973: POP
// if not result then
38974: LD_VAR 0 2
38978: NOT
38979: IFFALSE 38983
// exit ;
38981: GO 39131
// mech := result [ 1 ] ;
38983: LD_ADDR_VAR 0 5
38987: PUSH
38988: LD_VAR 0 2
38992: PUSH
38993: LD_INT 1
38995: ARRAY
38996: ST_TO_ADDR
// if result > 1 then
38997: LD_VAR 0 2
39001: PUSH
39002: LD_INT 1
39004: GREATER
39005: IFFALSE 39117
// begin for i = 2 to result do
39007: LD_ADDR_VAR 0 3
39011: PUSH
39012: DOUBLE
39013: LD_INT 2
39015: DEC
39016: ST_TO_ADDR
39017: LD_VAR 0 2
39021: PUSH
39022: FOR_TO
39023: IFFALSE 39115
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39025: LD_ADDR_VAR 0 4
39029: PUSH
39030: LD_VAR 0 2
39034: PUSH
39035: LD_VAR 0 3
39039: ARRAY
39040: PPUSH
39041: LD_INT 3
39043: PPUSH
39044: CALL_OW 259
39048: PUSH
39049: LD_VAR 0 2
39053: PUSH
39054: LD_VAR 0 3
39058: ARRAY
39059: PPUSH
39060: CALL_OW 432
39064: MINUS
39065: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39066: LD_VAR 0 4
39070: PUSH
39071: LD_VAR 0 5
39075: PPUSH
39076: LD_INT 3
39078: PPUSH
39079: CALL_OW 259
39083: PUSH
39084: LD_VAR 0 5
39088: PPUSH
39089: CALL_OW 432
39093: MINUS
39094: GREATEREQUAL
39095: IFFALSE 39113
// mech := result [ i ] ;
39097: LD_ADDR_VAR 0 5
39101: PUSH
39102: LD_VAR 0 2
39106: PUSH
39107: LD_VAR 0 3
39111: ARRAY
39112: ST_TO_ADDR
// end ;
39113: GO 39022
39115: POP
39116: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39117: LD_VAR 0 1
39121: PPUSH
39122: LD_VAR 0 5
39126: PPUSH
39127: CALL_OW 135
// end ;
39131: LD_VAR 0 2
39135: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39136: LD_INT 0
39138: PPUSH
39139: PPUSH
39140: PPUSH
39141: PPUSH
39142: PPUSH
39143: PPUSH
39144: PPUSH
39145: PPUSH
39146: PPUSH
39147: PPUSH
39148: PPUSH
39149: PPUSH
39150: PPUSH
// result := [ ] ;
39151: LD_ADDR_VAR 0 7
39155: PUSH
39156: EMPTY
39157: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39158: LD_VAR 0 1
39162: PPUSH
39163: CALL_OW 266
39167: PUSH
39168: LD_INT 0
39170: PUSH
39171: LD_INT 1
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: IN
39178: NOT
39179: IFFALSE 39183
// exit ;
39181: GO 40817
// if name then
39183: LD_VAR 0 3
39187: IFFALSE 39203
// SetBName ( base_dep , name ) ;
39189: LD_VAR 0 1
39193: PPUSH
39194: LD_VAR 0 3
39198: PPUSH
39199: CALL_OW 500
// base := GetBase ( base_dep ) ;
39203: LD_ADDR_VAR 0 15
39207: PUSH
39208: LD_VAR 0 1
39212: PPUSH
39213: CALL_OW 274
39217: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39218: LD_ADDR_VAR 0 16
39222: PUSH
39223: LD_VAR 0 1
39227: PPUSH
39228: CALL_OW 255
39232: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39233: LD_ADDR_VAR 0 17
39237: PUSH
39238: LD_VAR 0 1
39242: PPUSH
39243: CALL_OW 248
39247: ST_TO_ADDR
// if sources then
39248: LD_VAR 0 5
39252: IFFALSE 39299
// for i = 1 to 3 do
39254: LD_ADDR_VAR 0 8
39258: PUSH
39259: DOUBLE
39260: LD_INT 1
39262: DEC
39263: ST_TO_ADDR
39264: LD_INT 3
39266: PUSH
39267: FOR_TO
39268: IFFALSE 39297
// AddResourceType ( base , i , sources [ i ] ) ;
39270: LD_VAR 0 15
39274: PPUSH
39275: LD_VAR 0 8
39279: PPUSH
39280: LD_VAR 0 5
39284: PUSH
39285: LD_VAR 0 8
39289: ARRAY
39290: PPUSH
39291: CALL_OW 276
39295: GO 39267
39297: POP
39298: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39299: LD_ADDR_VAR 0 18
39303: PUSH
39304: LD_VAR 0 15
39308: PPUSH
39309: LD_VAR 0 2
39313: PPUSH
39314: LD_INT 1
39316: PPUSH
39317: CALL 38560 0 3
39321: ST_TO_ADDR
// InitHc ;
39322: CALL_OW 19
// InitUc ;
39326: CALL_OW 18
// uc_side := side ;
39330: LD_ADDR_OWVAR 20
39334: PUSH
39335: LD_VAR 0 16
39339: ST_TO_ADDR
// uc_nation := nation ;
39340: LD_ADDR_OWVAR 21
39344: PUSH
39345: LD_VAR 0 17
39349: ST_TO_ADDR
// if buildings then
39350: LD_VAR 0 18
39354: IFFALSE 40676
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39356: LD_ADDR_VAR 0 19
39360: PUSH
39361: LD_VAR 0 18
39365: PPUSH
39366: LD_INT 2
39368: PUSH
39369: LD_INT 30
39371: PUSH
39372: LD_INT 29
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 30
39381: PUSH
39382: LD_INT 30
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: LIST
39393: PPUSH
39394: CALL_OW 72
39398: ST_TO_ADDR
// if tmp then
39399: LD_VAR 0 19
39403: IFFALSE 39451
// for i in tmp do
39405: LD_ADDR_VAR 0 8
39409: PUSH
39410: LD_VAR 0 19
39414: PUSH
39415: FOR_IN
39416: IFFALSE 39449
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39418: LD_VAR 0 8
39422: PPUSH
39423: CALL_OW 250
39427: PPUSH
39428: LD_VAR 0 8
39432: PPUSH
39433: CALL_OW 251
39437: PPUSH
39438: LD_VAR 0 16
39442: PPUSH
39443: CALL_OW 441
39447: GO 39415
39449: POP
39450: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39451: LD_VAR 0 18
39455: PPUSH
39456: LD_INT 2
39458: PUSH
39459: LD_INT 30
39461: PUSH
39462: LD_INT 32
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 30
39471: PUSH
39472: LD_INT 33
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: LIST
39483: PPUSH
39484: CALL_OW 72
39488: IFFALSE 39576
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39490: LD_ADDR_VAR 0 8
39494: PUSH
39495: LD_VAR 0 18
39499: PPUSH
39500: LD_INT 2
39502: PUSH
39503: LD_INT 30
39505: PUSH
39506: LD_INT 32
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 30
39515: PUSH
39516: LD_INT 33
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: LIST
39527: PPUSH
39528: CALL_OW 72
39532: PUSH
39533: FOR_IN
39534: IFFALSE 39574
// begin if not GetBWeapon ( i ) then
39536: LD_VAR 0 8
39540: PPUSH
39541: CALL_OW 269
39545: NOT
39546: IFFALSE 39572
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39548: LD_VAR 0 8
39552: PPUSH
39553: LD_VAR 0 8
39557: PPUSH
39558: LD_VAR 0 2
39562: PPUSH
39563: CALL 40822 0 2
39567: PPUSH
39568: CALL_OW 431
// end ;
39572: GO 39533
39574: POP
39575: POP
// end ; for i = 1 to personel do
39576: LD_ADDR_VAR 0 8
39580: PUSH
39581: DOUBLE
39582: LD_INT 1
39584: DEC
39585: ST_TO_ADDR
39586: LD_VAR 0 6
39590: PUSH
39591: FOR_TO
39592: IFFALSE 40656
// begin if i > 4 then
39594: LD_VAR 0 8
39598: PUSH
39599: LD_INT 4
39601: GREATER
39602: IFFALSE 39606
// break ;
39604: GO 40656
// case i of 1 :
39606: LD_VAR 0 8
39610: PUSH
39611: LD_INT 1
39613: DOUBLE
39614: EQUAL
39615: IFTRUE 39619
39617: GO 39699
39619: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39620: LD_ADDR_VAR 0 12
39624: PUSH
39625: LD_VAR 0 18
39629: PPUSH
39630: LD_INT 22
39632: PUSH
39633: LD_VAR 0 16
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 58
39644: PUSH
39645: EMPTY
39646: LIST
39647: PUSH
39648: LD_INT 2
39650: PUSH
39651: LD_INT 30
39653: PUSH
39654: LD_INT 32
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 30
39663: PUSH
39664: LD_INT 4
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 30
39673: PUSH
39674: LD_INT 5
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: LIST
39691: PPUSH
39692: CALL_OW 72
39696: ST_TO_ADDR
39697: GO 39921
39699: LD_INT 2
39701: DOUBLE
39702: EQUAL
39703: IFTRUE 39707
39705: GO 39769
39707: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39708: LD_ADDR_VAR 0 12
39712: PUSH
39713: LD_VAR 0 18
39717: PPUSH
39718: LD_INT 22
39720: PUSH
39721: LD_VAR 0 16
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 2
39732: PUSH
39733: LD_INT 30
39735: PUSH
39736: LD_INT 0
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 30
39745: PUSH
39746: LD_INT 1
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: LIST
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PPUSH
39762: CALL_OW 72
39766: ST_TO_ADDR
39767: GO 39921
39769: LD_INT 3
39771: DOUBLE
39772: EQUAL
39773: IFTRUE 39777
39775: GO 39839
39777: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39778: LD_ADDR_VAR 0 12
39782: PUSH
39783: LD_VAR 0 18
39787: PPUSH
39788: LD_INT 22
39790: PUSH
39791: LD_VAR 0 16
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 2
39802: PUSH
39803: LD_INT 30
39805: PUSH
39806: LD_INT 2
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 30
39815: PUSH
39816: LD_INT 3
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: LIST
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PPUSH
39832: CALL_OW 72
39836: ST_TO_ADDR
39837: GO 39921
39839: LD_INT 4
39841: DOUBLE
39842: EQUAL
39843: IFTRUE 39847
39845: GO 39920
39847: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39848: LD_ADDR_VAR 0 12
39852: PUSH
39853: LD_VAR 0 18
39857: PPUSH
39858: LD_INT 22
39860: PUSH
39861: LD_VAR 0 16
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 2
39872: PUSH
39873: LD_INT 30
39875: PUSH
39876: LD_INT 6
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 30
39885: PUSH
39886: LD_INT 7
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 30
39895: PUSH
39896: LD_INT 8
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PPUSH
39913: CALL_OW 72
39917: ST_TO_ADDR
39918: GO 39921
39920: POP
// if i = 1 then
39921: LD_VAR 0 8
39925: PUSH
39926: LD_INT 1
39928: EQUAL
39929: IFFALSE 40040
// begin tmp := [ ] ;
39931: LD_ADDR_VAR 0 19
39935: PUSH
39936: EMPTY
39937: ST_TO_ADDR
// for j in f do
39938: LD_ADDR_VAR 0 9
39942: PUSH
39943: LD_VAR 0 12
39947: PUSH
39948: FOR_IN
39949: IFFALSE 40022
// if GetBType ( j ) = b_bunker then
39951: LD_VAR 0 9
39955: PPUSH
39956: CALL_OW 266
39960: PUSH
39961: LD_INT 32
39963: EQUAL
39964: IFFALSE 39991
// tmp := Insert ( tmp , 1 , j ) else
39966: LD_ADDR_VAR 0 19
39970: PUSH
39971: LD_VAR 0 19
39975: PPUSH
39976: LD_INT 1
39978: PPUSH
39979: LD_VAR 0 9
39983: PPUSH
39984: CALL_OW 2
39988: ST_TO_ADDR
39989: GO 40020
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39991: LD_ADDR_VAR 0 19
39995: PUSH
39996: LD_VAR 0 19
40000: PPUSH
40001: LD_VAR 0 19
40005: PUSH
40006: LD_INT 1
40008: PLUS
40009: PPUSH
40010: LD_VAR 0 9
40014: PPUSH
40015: CALL_OW 2
40019: ST_TO_ADDR
40020: GO 39948
40022: POP
40023: POP
// if tmp then
40024: LD_VAR 0 19
40028: IFFALSE 40040
// f := tmp ;
40030: LD_ADDR_VAR 0 12
40034: PUSH
40035: LD_VAR 0 19
40039: ST_TO_ADDR
// end ; x := personel [ i ] ;
40040: LD_ADDR_VAR 0 13
40044: PUSH
40045: LD_VAR 0 6
40049: PUSH
40050: LD_VAR 0 8
40054: ARRAY
40055: ST_TO_ADDR
// if x = - 1 then
40056: LD_VAR 0 13
40060: PUSH
40061: LD_INT 1
40063: NEG
40064: EQUAL
40065: IFFALSE 40274
// begin for j in f do
40067: LD_ADDR_VAR 0 9
40071: PUSH
40072: LD_VAR 0 12
40076: PUSH
40077: FOR_IN
40078: IFFALSE 40270
// repeat InitHc ;
40080: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40084: LD_VAR 0 9
40088: PPUSH
40089: CALL_OW 266
40093: PUSH
40094: LD_INT 5
40096: EQUAL
40097: IFFALSE 40167
// begin if UnitsInside ( j ) < 3 then
40099: LD_VAR 0 9
40103: PPUSH
40104: CALL_OW 313
40108: PUSH
40109: LD_INT 3
40111: LESS
40112: IFFALSE 40148
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40114: LD_INT 0
40116: PPUSH
40117: LD_INT 5
40119: PUSH
40120: LD_INT 8
40122: PUSH
40123: LD_INT 9
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: LIST
40130: PUSH
40131: LD_VAR 0 17
40135: ARRAY
40136: PPUSH
40137: LD_VAR 0 4
40141: PPUSH
40142: CALL_OW 380
40146: GO 40165
// PrepareHuman ( false , i , skill ) ;
40148: LD_INT 0
40150: PPUSH
40151: LD_VAR 0 8
40155: PPUSH
40156: LD_VAR 0 4
40160: PPUSH
40161: CALL_OW 380
// end else
40165: GO 40184
// PrepareHuman ( false , i , skill ) ;
40167: LD_INT 0
40169: PPUSH
40170: LD_VAR 0 8
40174: PPUSH
40175: LD_VAR 0 4
40179: PPUSH
40180: CALL_OW 380
// un := CreateHuman ;
40184: LD_ADDR_VAR 0 14
40188: PUSH
40189: CALL_OW 44
40193: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40194: LD_ADDR_VAR 0 7
40198: PUSH
40199: LD_VAR 0 7
40203: PPUSH
40204: LD_INT 1
40206: PPUSH
40207: LD_VAR 0 14
40211: PPUSH
40212: CALL_OW 2
40216: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40217: LD_VAR 0 14
40221: PPUSH
40222: LD_VAR 0 9
40226: PPUSH
40227: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40231: LD_VAR 0 9
40235: PPUSH
40236: CALL_OW 313
40240: PUSH
40241: LD_INT 6
40243: EQUAL
40244: PUSH
40245: LD_VAR 0 9
40249: PPUSH
40250: CALL_OW 266
40254: PUSH
40255: LD_INT 32
40257: PUSH
40258: LD_INT 31
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: IN
40265: OR
40266: IFFALSE 40080
40268: GO 40077
40270: POP
40271: POP
// end else
40272: GO 40654
// for j = 1 to x do
40274: LD_ADDR_VAR 0 9
40278: PUSH
40279: DOUBLE
40280: LD_INT 1
40282: DEC
40283: ST_TO_ADDR
40284: LD_VAR 0 13
40288: PUSH
40289: FOR_TO
40290: IFFALSE 40652
// begin InitHc ;
40292: CALL_OW 19
// if not f then
40296: LD_VAR 0 12
40300: NOT
40301: IFFALSE 40390
// begin PrepareHuman ( false , i , skill ) ;
40303: LD_INT 0
40305: PPUSH
40306: LD_VAR 0 8
40310: PPUSH
40311: LD_VAR 0 4
40315: PPUSH
40316: CALL_OW 380
// un := CreateHuman ;
40320: LD_ADDR_VAR 0 14
40324: PUSH
40325: CALL_OW 44
40329: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40330: LD_ADDR_VAR 0 7
40334: PUSH
40335: LD_VAR 0 7
40339: PPUSH
40340: LD_INT 1
40342: PPUSH
40343: LD_VAR 0 14
40347: PPUSH
40348: CALL_OW 2
40352: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40353: LD_VAR 0 14
40357: PPUSH
40358: LD_VAR 0 1
40362: PPUSH
40363: CALL_OW 250
40367: PPUSH
40368: LD_VAR 0 1
40372: PPUSH
40373: CALL_OW 251
40377: PPUSH
40378: LD_INT 10
40380: PPUSH
40381: LD_INT 0
40383: PPUSH
40384: CALL_OW 50
// continue ;
40388: GO 40289
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40390: LD_VAR 0 12
40394: PUSH
40395: LD_INT 1
40397: ARRAY
40398: PPUSH
40399: CALL_OW 313
40403: PUSH
40404: LD_VAR 0 12
40408: PUSH
40409: LD_INT 1
40411: ARRAY
40412: PPUSH
40413: CALL_OW 266
40417: PUSH
40418: LD_INT 32
40420: PUSH
40421: LD_INT 31
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: IN
40428: AND
40429: PUSH
40430: LD_VAR 0 12
40434: PUSH
40435: LD_INT 1
40437: ARRAY
40438: PPUSH
40439: CALL_OW 313
40443: PUSH
40444: LD_INT 6
40446: EQUAL
40447: OR
40448: IFFALSE 40468
// f := Delete ( f , 1 ) ;
40450: LD_ADDR_VAR 0 12
40454: PUSH
40455: LD_VAR 0 12
40459: PPUSH
40460: LD_INT 1
40462: PPUSH
40463: CALL_OW 3
40467: ST_TO_ADDR
// if not f then
40468: LD_VAR 0 12
40472: NOT
40473: IFFALSE 40491
// begin x := x + 2 ;
40475: LD_ADDR_VAR 0 13
40479: PUSH
40480: LD_VAR 0 13
40484: PUSH
40485: LD_INT 2
40487: PLUS
40488: ST_TO_ADDR
// continue ;
40489: GO 40289
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40491: LD_VAR 0 12
40495: PUSH
40496: LD_INT 1
40498: ARRAY
40499: PPUSH
40500: CALL_OW 266
40504: PUSH
40505: LD_INT 5
40507: EQUAL
40508: IFFALSE 40582
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40510: LD_VAR 0 12
40514: PUSH
40515: LD_INT 1
40517: ARRAY
40518: PPUSH
40519: CALL_OW 313
40523: PUSH
40524: LD_INT 3
40526: LESS
40527: IFFALSE 40563
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40529: LD_INT 0
40531: PPUSH
40532: LD_INT 5
40534: PUSH
40535: LD_INT 8
40537: PUSH
40538: LD_INT 9
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: LIST
40545: PUSH
40546: LD_VAR 0 17
40550: ARRAY
40551: PPUSH
40552: LD_VAR 0 4
40556: PPUSH
40557: CALL_OW 380
40561: GO 40580
// PrepareHuman ( false , i , skill ) ;
40563: LD_INT 0
40565: PPUSH
40566: LD_VAR 0 8
40570: PPUSH
40571: LD_VAR 0 4
40575: PPUSH
40576: CALL_OW 380
// end else
40580: GO 40599
// PrepareHuman ( false , i , skill ) ;
40582: LD_INT 0
40584: PPUSH
40585: LD_VAR 0 8
40589: PPUSH
40590: LD_VAR 0 4
40594: PPUSH
40595: CALL_OW 380
// un := CreateHuman ;
40599: LD_ADDR_VAR 0 14
40603: PUSH
40604: CALL_OW 44
40608: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40609: LD_ADDR_VAR 0 7
40613: PUSH
40614: LD_VAR 0 7
40618: PPUSH
40619: LD_INT 1
40621: PPUSH
40622: LD_VAR 0 14
40626: PPUSH
40627: CALL_OW 2
40631: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40632: LD_VAR 0 14
40636: PPUSH
40637: LD_VAR 0 12
40641: PUSH
40642: LD_INT 1
40644: ARRAY
40645: PPUSH
40646: CALL_OW 52
// end ;
40650: GO 40289
40652: POP
40653: POP
// end ;
40654: GO 39591
40656: POP
40657: POP
// result := result ^ buildings ;
40658: LD_ADDR_VAR 0 7
40662: PUSH
40663: LD_VAR 0 7
40667: PUSH
40668: LD_VAR 0 18
40672: ADD
40673: ST_TO_ADDR
// end else
40674: GO 40817
// begin for i = 1 to personel do
40676: LD_ADDR_VAR 0 8
40680: PUSH
40681: DOUBLE
40682: LD_INT 1
40684: DEC
40685: ST_TO_ADDR
40686: LD_VAR 0 6
40690: PUSH
40691: FOR_TO
40692: IFFALSE 40815
// begin if i > 4 then
40694: LD_VAR 0 8
40698: PUSH
40699: LD_INT 4
40701: GREATER
40702: IFFALSE 40706
// break ;
40704: GO 40815
// x := personel [ i ] ;
40706: LD_ADDR_VAR 0 13
40710: PUSH
40711: LD_VAR 0 6
40715: PUSH
40716: LD_VAR 0 8
40720: ARRAY
40721: ST_TO_ADDR
// if x = - 1 then
40722: LD_VAR 0 13
40726: PUSH
40727: LD_INT 1
40729: NEG
40730: EQUAL
40731: IFFALSE 40735
// continue ;
40733: GO 40691
// PrepareHuman ( false , i , skill ) ;
40735: LD_INT 0
40737: PPUSH
40738: LD_VAR 0 8
40742: PPUSH
40743: LD_VAR 0 4
40747: PPUSH
40748: CALL_OW 380
// un := CreateHuman ;
40752: LD_ADDR_VAR 0 14
40756: PUSH
40757: CALL_OW 44
40761: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40762: LD_VAR 0 14
40766: PPUSH
40767: LD_VAR 0 1
40771: PPUSH
40772: CALL_OW 250
40776: PPUSH
40777: LD_VAR 0 1
40781: PPUSH
40782: CALL_OW 251
40786: PPUSH
40787: LD_INT 10
40789: PPUSH
40790: LD_INT 0
40792: PPUSH
40793: CALL_OW 50
// result := result ^ un ;
40797: LD_ADDR_VAR 0 7
40801: PUSH
40802: LD_VAR 0 7
40806: PUSH
40807: LD_VAR 0 14
40811: ADD
40812: ST_TO_ADDR
// end ;
40813: GO 40691
40815: POP
40816: POP
// end ; end ;
40817: LD_VAR 0 7
40821: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40822: LD_INT 0
40824: PPUSH
40825: PPUSH
40826: PPUSH
40827: PPUSH
40828: PPUSH
40829: PPUSH
40830: PPUSH
40831: PPUSH
40832: PPUSH
40833: PPUSH
40834: PPUSH
40835: PPUSH
40836: PPUSH
40837: PPUSH
40838: PPUSH
40839: PPUSH
// result := false ;
40840: LD_ADDR_VAR 0 3
40844: PUSH
40845: LD_INT 0
40847: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40848: LD_VAR 0 1
40852: NOT
40853: PUSH
40854: LD_VAR 0 1
40858: PPUSH
40859: CALL_OW 266
40863: PUSH
40864: LD_INT 32
40866: PUSH
40867: LD_INT 33
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: IN
40874: NOT
40875: OR
40876: IFFALSE 40880
// exit ;
40878: GO 41989
// nat := GetNation ( tower ) ;
40880: LD_ADDR_VAR 0 12
40884: PUSH
40885: LD_VAR 0 1
40889: PPUSH
40890: CALL_OW 248
40894: ST_TO_ADDR
// side := GetSide ( tower ) ;
40895: LD_ADDR_VAR 0 16
40899: PUSH
40900: LD_VAR 0 1
40904: PPUSH
40905: CALL_OW 255
40909: ST_TO_ADDR
// x := GetX ( tower ) ;
40910: LD_ADDR_VAR 0 10
40914: PUSH
40915: LD_VAR 0 1
40919: PPUSH
40920: CALL_OW 250
40924: ST_TO_ADDR
// y := GetY ( tower ) ;
40925: LD_ADDR_VAR 0 11
40929: PUSH
40930: LD_VAR 0 1
40934: PPUSH
40935: CALL_OW 251
40939: ST_TO_ADDR
// if not x or not y then
40940: LD_VAR 0 10
40944: NOT
40945: PUSH
40946: LD_VAR 0 11
40950: NOT
40951: OR
40952: IFFALSE 40956
// exit ;
40954: GO 41989
// weapon := 0 ;
40956: LD_ADDR_VAR 0 18
40960: PUSH
40961: LD_INT 0
40963: ST_TO_ADDR
// fac_list := [ ] ;
40964: LD_ADDR_VAR 0 17
40968: PUSH
40969: EMPTY
40970: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40971: LD_ADDR_VAR 0 6
40975: PUSH
40976: LD_VAR 0 1
40980: PPUSH
40981: CALL_OW 274
40985: PPUSH
40986: LD_VAR 0 2
40990: PPUSH
40991: LD_INT 0
40993: PPUSH
40994: CALL 38560 0 3
40998: PPUSH
40999: LD_INT 30
41001: PUSH
41002: LD_INT 3
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PPUSH
41009: CALL_OW 72
41013: ST_TO_ADDR
// if not factories then
41014: LD_VAR 0 6
41018: NOT
41019: IFFALSE 41023
// exit ;
41021: GO 41989
// for i in factories do
41023: LD_ADDR_VAR 0 8
41027: PUSH
41028: LD_VAR 0 6
41032: PUSH
41033: FOR_IN
41034: IFFALSE 41059
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41036: LD_ADDR_VAR 0 17
41040: PUSH
41041: LD_VAR 0 17
41045: PUSH
41046: LD_VAR 0 8
41050: PPUSH
41051: CALL_OW 478
41055: UNION
41056: ST_TO_ADDR
41057: GO 41033
41059: POP
41060: POP
// if not fac_list then
41061: LD_VAR 0 17
41065: NOT
41066: IFFALSE 41070
// exit ;
41068: GO 41989
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41070: LD_ADDR_VAR 0 5
41074: PUSH
41075: LD_INT 4
41077: PUSH
41078: LD_INT 5
41080: PUSH
41081: LD_INT 9
41083: PUSH
41084: LD_INT 10
41086: PUSH
41087: LD_INT 6
41089: PUSH
41090: LD_INT 7
41092: PUSH
41093: LD_INT 11
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 27
41107: PUSH
41108: LD_INT 28
41110: PUSH
41111: LD_INT 26
41113: PUSH
41114: LD_INT 30
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 43
41125: PUSH
41126: LD_INT 44
41128: PUSH
41129: LD_INT 46
41131: PUSH
41132: LD_INT 45
41134: PUSH
41135: LD_INT 47
41137: PUSH
41138: LD_INT 49
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: LIST
41153: PUSH
41154: LD_VAR 0 12
41158: ARRAY
41159: ST_TO_ADDR
// list := list isect fac_list ;
41160: LD_ADDR_VAR 0 5
41164: PUSH
41165: LD_VAR 0 5
41169: PUSH
41170: LD_VAR 0 17
41174: ISECT
41175: ST_TO_ADDR
// if not list then
41176: LD_VAR 0 5
41180: NOT
41181: IFFALSE 41185
// exit ;
41183: GO 41989
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41185: LD_VAR 0 12
41189: PUSH
41190: LD_INT 3
41192: EQUAL
41193: PUSH
41194: LD_INT 49
41196: PUSH
41197: LD_VAR 0 5
41201: IN
41202: AND
41203: PUSH
41204: LD_INT 31
41206: PPUSH
41207: LD_VAR 0 16
41211: PPUSH
41212: CALL_OW 321
41216: PUSH
41217: LD_INT 2
41219: EQUAL
41220: AND
41221: IFFALSE 41281
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41223: LD_INT 22
41225: PUSH
41226: LD_VAR 0 16
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 35
41237: PUSH
41238: LD_INT 49
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 91
41247: PUSH
41248: LD_VAR 0 1
41252: PUSH
41253: LD_INT 10
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: LIST
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: LIST
41265: PPUSH
41266: CALL_OW 69
41270: NOT
41271: IFFALSE 41281
// weapon := ru_time_lapser ;
41273: LD_ADDR_VAR 0 18
41277: PUSH
41278: LD_INT 49
41280: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41281: LD_VAR 0 12
41285: PUSH
41286: LD_INT 1
41288: PUSH
41289: LD_INT 2
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: IN
41296: PUSH
41297: LD_INT 11
41299: PUSH
41300: LD_VAR 0 5
41304: IN
41305: PUSH
41306: LD_INT 30
41308: PUSH
41309: LD_VAR 0 5
41313: IN
41314: OR
41315: AND
41316: PUSH
41317: LD_INT 6
41319: PPUSH
41320: LD_VAR 0 16
41324: PPUSH
41325: CALL_OW 321
41329: PUSH
41330: LD_INT 2
41332: EQUAL
41333: AND
41334: IFFALSE 41499
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41336: LD_INT 22
41338: PUSH
41339: LD_VAR 0 16
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 2
41350: PUSH
41351: LD_INT 35
41353: PUSH
41354: LD_INT 11
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 35
41363: PUSH
41364: LD_INT 30
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 91
41378: PUSH
41379: LD_VAR 0 1
41383: PUSH
41384: LD_INT 18
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: LIST
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: LIST
41396: PPUSH
41397: CALL_OW 69
41401: NOT
41402: PUSH
41403: LD_INT 22
41405: PUSH
41406: LD_VAR 0 16
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 2
41417: PUSH
41418: LD_INT 30
41420: PUSH
41421: LD_INT 32
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 30
41430: PUSH
41431: LD_INT 33
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 91
41445: PUSH
41446: LD_VAR 0 1
41450: PUSH
41451: LD_INT 12
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: LIST
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: LIST
41463: PUSH
41464: EMPTY
41465: LIST
41466: PPUSH
41467: CALL_OW 69
41471: PUSH
41472: LD_INT 2
41474: GREATER
41475: AND
41476: IFFALSE 41499
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41478: LD_ADDR_VAR 0 18
41482: PUSH
41483: LD_INT 11
41485: PUSH
41486: LD_INT 30
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_VAR 0 12
41497: ARRAY
41498: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41499: LD_VAR 0 18
41503: NOT
41504: PUSH
41505: LD_INT 40
41507: PPUSH
41508: LD_VAR 0 16
41512: PPUSH
41513: CALL_OW 321
41517: PUSH
41518: LD_INT 2
41520: EQUAL
41521: AND
41522: PUSH
41523: LD_INT 7
41525: PUSH
41526: LD_VAR 0 5
41530: IN
41531: PUSH
41532: LD_INT 28
41534: PUSH
41535: LD_VAR 0 5
41539: IN
41540: OR
41541: PUSH
41542: LD_INT 45
41544: PUSH
41545: LD_VAR 0 5
41549: IN
41550: OR
41551: AND
41552: IFFALSE 41806
// begin hex := GetHexInfo ( x , y ) ;
41554: LD_ADDR_VAR 0 4
41558: PUSH
41559: LD_VAR 0 10
41563: PPUSH
41564: LD_VAR 0 11
41568: PPUSH
41569: CALL_OW 546
41573: ST_TO_ADDR
// if hex [ 1 ] then
41574: LD_VAR 0 4
41578: PUSH
41579: LD_INT 1
41581: ARRAY
41582: IFFALSE 41586
// exit ;
41584: GO 41989
// height := hex [ 2 ] ;
41586: LD_ADDR_VAR 0 15
41590: PUSH
41591: LD_VAR 0 4
41595: PUSH
41596: LD_INT 2
41598: ARRAY
41599: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41600: LD_ADDR_VAR 0 14
41604: PUSH
41605: LD_INT 0
41607: PUSH
41608: LD_INT 2
41610: PUSH
41611: LD_INT 3
41613: PUSH
41614: LD_INT 5
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: ST_TO_ADDR
// for i in tmp do
41623: LD_ADDR_VAR 0 8
41627: PUSH
41628: LD_VAR 0 14
41632: PUSH
41633: FOR_IN
41634: IFFALSE 41804
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41636: LD_ADDR_VAR 0 9
41640: PUSH
41641: LD_VAR 0 10
41645: PPUSH
41646: LD_VAR 0 8
41650: PPUSH
41651: LD_INT 5
41653: PPUSH
41654: CALL_OW 272
41658: PUSH
41659: LD_VAR 0 11
41663: PPUSH
41664: LD_VAR 0 8
41668: PPUSH
41669: LD_INT 5
41671: PPUSH
41672: CALL_OW 273
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41681: LD_VAR 0 9
41685: PUSH
41686: LD_INT 1
41688: ARRAY
41689: PPUSH
41690: LD_VAR 0 9
41694: PUSH
41695: LD_INT 2
41697: ARRAY
41698: PPUSH
41699: CALL_OW 488
41703: IFFALSE 41802
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41705: LD_ADDR_VAR 0 4
41709: PUSH
41710: LD_VAR 0 9
41714: PUSH
41715: LD_INT 1
41717: ARRAY
41718: PPUSH
41719: LD_VAR 0 9
41723: PUSH
41724: LD_INT 2
41726: ARRAY
41727: PPUSH
41728: CALL_OW 546
41732: ST_TO_ADDR
// if hex [ 1 ] then
41733: LD_VAR 0 4
41737: PUSH
41738: LD_INT 1
41740: ARRAY
41741: IFFALSE 41745
// continue ;
41743: GO 41633
// h := hex [ 2 ] ;
41745: LD_ADDR_VAR 0 13
41749: PUSH
41750: LD_VAR 0 4
41754: PUSH
41755: LD_INT 2
41757: ARRAY
41758: ST_TO_ADDR
// if h + 7 < height then
41759: LD_VAR 0 13
41763: PUSH
41764: LD_INT 7
41766: PLUS
41767: PUSH
41768: LD_VAR 0 15
41772: LESS
41773: IFFALSE 41802
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41775: LD_ADDR_VAR 0 18
41779: PUSH
41780: LD_INT 7
41782: PUSH
41783: LD_INT 28
41785: PUSH
41786: LD_INT 45
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: LIST
41793: PUSH
41794: LD_VAR 0 12
41798: ARRAY
41799: ST_TO_ADDR
// break ;
41800: GO 41804
// end ; end ; end ;
41802: GO 41633
41804: POP
41805: POP
// end ; if not weapon then
41806: LD_VAR 0 18
41810: NOT
41811: IFFALSE 41871
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41813: LD_ADDR_VAR 0 5
41817: PUSH
41818: LD_VAR 0 5
41822: PUSH
41823: LD_INT 11
41825: PUSH
41826: LD_INT 30
41828: PUSH
41829: LD_INT 49
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: LIST
41836: DIFF
41837: ST_TO_ADDR
// if not list then
41838: LD_VAR 0 5
41842: NOT
41843: IFFALSE 41847
// exit ;
41845: GO 41989
// weapon := list [ rand ( 1 , list ) ] ;
41847: LD_ADDR_VAR 0 18
41851: PUSH
41852: LD_VAR 0 5
41856: PUSH
41857: LD_INT 1
41859: PPUSH
41860: LD_VAR 0 5
41864: PPUSH
41865: CALL_OW 12
41869: ARRAY
41870: ST_TO_ADDR
// end ; if weapon then
41871: LD_VAR 0 18
41875: IFFALSE 41989
// begin tmp := CostOfWeapon ( weapon ) ;
41877: LD_ADDR_VAR 0 14
41881: PUSH
41882: LD_VAR 0 18
41886: PPUSH
41887: CALL_OW 451
41891: ST_TO_ADDR
// j := GetBase ( tower ) ;
41892: LD_ADDR_VAR 0 9
41896: PUSH
41897: LD_VAR 0 1
41901: PPUSH
41902: CALL_OW 274
41906: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41907: LD_VAR 0 9
41911: PPUSH
41912: LD_INT 1
41914: PPUSH
41915: CALL_OW 275
41919: PUSH
41920: LD_VAR 0 14
41924: PUSH
41925: LD_INT 1
41927: ARRAY
41928: GREATEREQUAL
41929: PUSH
41930: LD_VAR 0 9
41934: PPUSH
41935: LD_INT 2
41937: PPUSH
41938: CALL_OW 275
41942: PUSH
41943: LD_VAR 0 14
41947: PUSH
41948: LD_INT 2
41950: ARRAY
41951: GREATEREQUAL
41952: AND
41953: PUSH
41954: LD_VAR 0 9
41958: PPUSH
41959: LD_INT 3
41961: PPUSH
41962: CALL_OW 275
41966: PUSH
41967: LD_VAR 0 14
41971: PUSH
41972: LD_INT 3
41974: ARRAY
41975: GREATEREQUAL
41976: AND
41977: IFFALSE 41989
// result := weapon ;
41979: LD_ADDR_VAR 0 3
41983: PUSH
41984: LD_VAR 0 18
41988: ST_TO_ADDR
// end ; end ;
41989: LD_VAR 0 3
41993: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41994: LD_INT 0
41996: PPUSH
41997: PPUSH
// result := true ;
41998: LD_ADDR_VAR 0 3
42002: PUSH
42003: LD_INT 1
42005: ST_TO_ADDR
// if array1 = array2 then
42006: LD_VAR 0 1
42010: PUSH
42011: LD_VAR 0 2
42015: EQUAL
42016: IFFALSE 42076
// begin for i = 1 to array1 do
42018: LD_ADDR_VAR 0 4
42022: PUSH
42023: DOUBLE
42024: LD_INT 1
42026: DEC
42027: ST_TO_ADDR
42028: LD_VAR 0 1
42032: PUSH
42033: FOR_TO
42034: IFFALSE 42072
// if array1 [ i ] <> array2 [ i ] then
42036: LD_VAR 0 1
42040: PUSH
42041: LD_VAR 0 4
42045: ARRAY
42046: PUSH
42047: LD_VAR 0 2
42051: PUSH
42052: LD_VAR 0 4
42056: ARRAY
42057: NONEQUAL
42058: IFFALSE 42070
// begin result := false ;
42060: LD_ADDR_VAR 0 3
42064: PUSH
42065: LD_INT 0
42067: ST_TO_ADDR
// break ;
42068: GO 42072
// end ;
42070: GO 42033
42072: POP
42073: POP
// end else
42074: GO 42084
// result := false ;
42076: LD_ADDR_VAR 0 3
42080: PUSH
42081: LD_INT 0
42083: ST_TO_ADDR
// end ;
42084: LD_VAR 0 3
42088: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42089: LD_INT 0
42091: PPUSH
42092: PPUSH
// if not array1 or not array2 then
42093: LD_VAR 0 1
42097: NOT
42098: PUSH
42099: LD_VAR 0 2
42103: NOT
42104: OR
42105: IFFALSE 42109
// exit ;
42107: GO 42173
// result := true ;
42109: LD_ADDR_VAR 0 3
42113: PUSH
42114: LD_INT 1
42116: ST_TO_ADDR
// for i = 1 to array1 do
42117: LD_ADDR_VAR 0 4
42121: PUSH
42122: DOUBLE
42123: LD_INT 1
42125: DEC
42126: ST_TO_ADDR
42127: LD_VAR 0 1
42131: PUSH
42132: FOR_TO
42133: IFFALSE 42171
// if array1 [ i ] <> array2 [ i ] then
42135: LD_VAR 0 1
42139: PUSH
42140: LD_VAR 0 4
42144: ARRAY
42145: PUSH
42146: LD_VAR 0 2
42150: PUSH
42151: LD_VAR 0 4
42155: ARRAY
42156: NONEQUAL
42157: IFFALSE 42169
// begin result := false ;
42159: LD_ADDR_VAR 0 3
42163: PUSH
42164: LD_INT 0
42166: ST_TO_ADDR
// break ;
42167: GO 42171
// end ;
42169: GO 42132
42171: POP
42172: POP
// end ;
42173: LD_VAR 0 3
42177: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42178: LD_INT 0
42180: PPUSH
42181: PPUSH
42182: PPUSH
// pom := GetBase ( fac ) ;
42183: LD_ADDR_VAR 0 5
42187: PUSH
42188: LD_VAR 0 1
42192: PPUSH
42193: CALL_OW 274
42197: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42198: LD_ADDR_VAR 0 4
42202: PUSH
42203: LD_VAR 0 2
42207: PUSH
42208: LD_INT 1
42210: ARRAY
42211: PPUSH
42212: LD_VAR 0 2
42216: PUSH
42217: LD_INT 2
42219: ARRAY
42220: PPUSH
42221: LD_VAR 0 2
42225: PUSH
42226: LD_INT 3
42228: ARRAY
42229: PPUSH
42230: LD_VAR 0 2
42234: PUSH
42235: LD_INT 4
42237: ARRAY
42238: PPUSH
42239: CALL_OW 449
42243: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42244: LD_ADDR_VAR 0 3
42248: PUSH
42249: LD_VAR 0 5
42253: PPUSH
42254: LD_INT 1
42256: PPUSH
42257: CALL_OW 275
42261: PUSH
42262: LD_VAR 0 4
42266: PUSH
42267: LD_INT 1
42269: ARRAY
42270: GREATEREQUAL
42271: PUSH
42272: LD_VAR 0 5
42276: PPUSH
42277: LD_INT 2
42279: PPUSH
42280: CALL_OW 275
42284: PUSH
42285: LD_VAR 0 4
42289: PUSH
42290: LD_INT 2
42292: ARRAY
42293: GREATEREQUAL
42294: AND
42295: PUSH
42296: LD_VAR 0 5
42300: PPUSH
42301: LD_INT 3
42303: PPUSH
42304: CALL_OW 275
42308: PUSH
42309: LD_VAR 0 4
42313: PUSH
42314: LD_INT 3
42316: ARRAY
42317: GREATEREQUAL
42318: AND
42319: ST_TO_ADDR
// end ;
42320: LD_VAR 0 3
42324: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42325: LD_INT 0
42327: PPUSH
42328: PPUSH
42329: PPUSH
42330: PPUSH
// pom := GetBase ( building ) ;
42331: LD_ADDR_VAR 0 3
42335: PUSH
42336: LD_VAR 0 1
42340: PPUSH
42341: CALL_OW 274
42345: ST_TO_ADDR
// if not pom then
42346: LD_VAR 0 3
42350: NOT
42351: IFFALSE 42355
// exit ;
42353: GO 42525
// btype := GetBType ( building ) ;
42355: LD_ADDR_VAR 0 5
42359: PUSH
42360: LD_VAR 0 1
42364: PPUSH
42365: CALL_OW 266
42369: ST_TO_ADDR
// if btype = b_armoury then
42370: LD_VAR 0 5
42374: PUSH
42375: LD_INT 4
42377: EQUAL
42378: IFFALSE 42388
// btype := b_barracks ;
42380: LD_ADDR_VAR 0 5
42384: PUSH
42385: LD_INT 5
42387: ST_TO_ADDR
// if btype = b_depot then
42388: LD_VAR 0 5
42392: PUSH
42393: LD_INT 0
42395: EQUAL
42396: IFFALSE 42406
// btype := b_warehouse ;
42398: LD_ADDR_VAR 0 5
42402: PUSH
42403: LD_INT 1
42405: ST_TO_ADDR
// if btype = b_workshop then
42406: LD_VAR 0 5
42410: PUSH
42411: LD_INT 2
42413: EQUAL
42414: IFFALSE 42424
// btype := b_factory ;
42416: LD_ADDR_VAR 0 5
42420: PUSH
42421: LD_INT 3
42423: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42424: LD_ADDR_VAR 0 4
42428: PUSH
42429: LD_VAR 0 5
42433: PPUSH
42434: LD_VAR 0 1
42438: PPUSH
42439: CALL_OW 248
42443: PPUSH
42444: CALL_OW 450
42448: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42449: LD_ADDR_VAR 0 2
42453: PUSH
42454: LD_VAR 0 3
42458: PPUSH
42459: LD_INT 1
42461: PPUSH
42462: CALL_OW 275
42466: PUSH
42467: LD_VAR 0 4
42471: PUSH
42472: LD_INT 1
42474: ARRAY
42475: GREATEREQUAL
42476: PUSH
42477: LD_VAR 0 3
42481: PPUSH
42482: LD_INT 2
42484: PPUSH
42485: CALL_OW 275
42489: PUSH
42490: LD_VAR 0 4
42494: PUSH
42495: LD_INT 2
42497: ARRAY
42498: GREATEREQUAL
42499: AND
42500: PUSH
42501: LD_VAR 0 3
42505: PPUSH
42506: LD_INT 3
42508: PPUSH
42509: CALL_OW 275
42513: PUSH
42514: LD_VAR 0 4
42518: PUSH
42519: LD_INT 3
42521: ARRAY
42522: GREATEREQUAL
42523: AND
42524: ST_TO_ADDR
// end ;
42525: LD_VAR 0 2
42529: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42530: LD_INT 0
42532: PPUSH
42533: PPUSH
42534: PPUSH
// pom := GetBase ( building ) ;
42535: LD_ADDR_VAR 0 4
42539: PUSH
42540: LD_VAR 0 1
42544: PPUSH
42545: CALL_OW 274
42549: ST_TO_ADDR
// if not pom then
42550: LD_VAR 0 4
42554: NOT
42555: IFFALSE 42559
// exit ;
42557: GO 42660
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42559: LD_ADDR_VAR 0 5
42563: PUSH
42564: LD_VAR 0 2
42568: PPUSH
42569: LD_VAR 0 1
42573: PPUSH
42574: CALL_OW 248
42578: PPUSH
42579: CALL_OW 450
42583: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42584: LD_ADDR_VAR 0 3
42588: PUSH
42589: LD_VAR 0 4
42593: PPUSH
42594: LD_INT 1
42596: PPUSH
42597: CALL_OW 275
42601: PUSH
42602: LD_VAR 0 5
42606: PUSH
42607: LD_INT 1
42609: ARRAY
42610: GREATEREQUAL
42611: PUSH
42612: LD_VAR 0 4
42616: PPUSH
42617: LD_INT 2
42619: PPUSH
42620: CALL_OW 275
42624: PUSH
42625: LD_VAR 0 5
42629: PUSH
42630: LD_INT 2
42632: ARRAY
42633: GREATEREQUAL
42634: AND
42635: PUSH
42636: LD_VAR 0 4
42640: PPUSH
42641: LD_INT 3
42643: PPUSH
42644: CALL_OW 275
42648: PUSH
42649: LD_VAR 0 5
42653: PUSH
42654: LD_INT 3
42656: ARRAY
42657: GREATEREQUAL
42658: AND
42659: ST_TO_ADDR
// end ;
42660: LD_VAR 0 3
42664: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42665: LD_INT 0
42667: PPUSH
42668: PPUSH
42669: PPUSH
42670: PPUSH
42671: PPUSH
42672: PPUSH
42673: PPUSH
42674: PPUSH
42675: PPUSH
42676: PPUSH
42677: PPUSH
// result := false ;
42678: LD_ADDR_VAR 0 8
42682: PUSH
42683: LD_INT 0
42685: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42686: LD_VAR 0 5
42690: NOT
42691: PUSH
42692: LD_VAR 0 1
42696: NOT
42697: OR
42698: PUSH
42699: LD_VAR 0 2
42703: NOT
42704: OR
42705: PUSH
42706: LD_VAR 0 3
42710: NOT
42711: OR
42712: IFFALSE 42716
// exit ;
42714: GO 43530
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42716: LD_ADDR_VAR 0 14
42720: PUSH
42721: LD_VAR 0 1
42725: PPUSH
42726: LD_VAR 0 2
42730: PPUSH
42731: LD_VAR 0 3
42735: PPUSH
42736: LD_VAR 0 4
42740: PPUSH
42741: LD_VAR 0 5
42745: PUSH
42746: LD_INT 1
42748: ARRAY
42749: PPUSH
42750: CALL_OW 248
42754: PPUSH
42755: LD_INT 0
42757: PPUSH
42758: CALL 44767 0 6
42762: ST_TO_ADDR
// if not hexes then
42763: LD_VAR 0 14
42767: NOT
42768: IFFALSE 42772
// exit ;
42770: GO 43530
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42772: LD_ADDR_VAR 0 17
42776: PUSH
42777: LD_VAR 0 5
42781: PPUSH
42782: LD_INT 22
42784: PUSH
42785: LD_VAR 0 13
42789: PPUSH
42790: CALL_OW 255
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 2
42801: PUSH
42802: LD_INT 30
42804: PUSH
42805: LD_INT 0
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 30
42814: PUSH
42815: LD_INT 1
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: LIST
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PPUSH
42831: CALL_OW 72
42835: ST_TO_ADDR
// for i = 1 to hexes do
42836: LD_ADDR_VAR 0 9
42840: PUSH
42841: DOUBLE
42842: LD_INT 1
42844: DEC
42845: ST_TO_ADDR
42846: LD_VAR 0 14
42850: PUSH
42851: FOR_TO
42852: IFFALSE 43528
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42854: LD_ADDR_VAR 0 13
42858: PUSH
42859: LD_VAR 0 14
42863: PUSH
42864: LD_VAR 0 9
42868: ARRAY
42869: PUSH
42870: LD_INT 1
42872: ARRAY
42873: PPUSH
42874: LD_VAR 0 14
42878: PUSH
42879: LD_VAR 0 9
42883: ARRAY
42884: PUSH
42885: LD_INT 2
42887: ARRAY
42888: PPUSH
42889: CALL_OW 428
42893: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42894: LD_VAR 0 14
42898: PUSH
42899: LD_VAR 0 9
42903: ARRAY
42904: PUSH
42905: LD_INT 1
42907: ARRAY
42908: PPUSH
42909: LD_VAR 0 14
42913: PUSH
42914: LD_VAR 0 9
42918: ARRAY
42919: PUSH
42920: LD_INT 2
42922: ARRAY
42923: PPUSH
42924: CALL_OW 351
42928: PUSH
42929: LD_VAR 0 14
42933: PUSH
42934: LD_VAR 0 9
42938: ARRAY
42939: PUSH
42940: LD_INT 1
42942: ARRAY
42943: PPUSH
42944: LD_VAR 0 14
42948: PUSH
42949: LD_VAR 0 9
42953: ARRAY
42954: PUSH
42955: LD_INT 2
42957: ARRAY
42958: PPUSH
42959: CALL_OW 488
42963: NOT
42964: OR
42965: PUSH
42966: LD_VAR 0 13
42970: PPUSH
42971: CALL_OW 247
42975: PUSH
42976: LD_INT 3
42978: EQUAL
42979: OR
42980: IFFALSE 42986
// exit ;
42982: POP
42983: POP
42984: GO 43530
// if not tmp then
42986: LD_VAR 0 13
42990: NOT
42991: IFFALSE 42995
// continue ;
42993: GO 42851
// result := true ;
42995: LD_ADDR_VAR 0 8
42999: PUSH
43000: LD_INT 1
43002: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43003: LD_VAR 0 6
43007: PUSH
43008: LD_VAR 0 13
43012: PPUSH
43013: CALL_OW 247
43017: PUSH
43018: LD_INT 2
43020: EQUAL
43021: AND
43022: PUSH
43023: LD_VAR 0 13
43027: PPUSH
43028: CALL_OW 263
43032: PUSH
43033: LD_INT 1
43035: EQUAL
43036: AND
43037: IFFALSE 43201
// begin if IsDrivenBy ( tmp ) then
43039: LD_VAR 0 13
43043: PPUSH
43044: CALL_OW 311
43048: IFFALSE 43052
// continue ;
43050: GO 42851
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43052: LD_VAR 0 6
43056: PPUSH
43057: LD_INT 3
43059: PUSH
43060: LD_INT 60
43062: PUSH
43063: EMPTY
43064: LIST
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 3
43072: PUSH
43073: LD_INT 55
43075: PUSH
43076: EMPTY
43077: LIST
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PPUSH
43087: CALL_OW 72
43091: IFFALSE 43199
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43093: LD_ADDR_VAR 0 18
43097: PUSH
43098: LD_VAR 0 6
43102: PPUSH
43103: LD_INT 3
43105: PUSH
43106: LD_INT 60
43108: PUSH
43109: EMPTY
43110: LIST
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 3
43118: PUSH
43119: LD_INT 55
43121: PUSH
43122: EMPTY
43123: LIST
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PPUSH
43133: CALL_OW 72
43137: PUSH
43138: LD_INT 1
43140: ARRAY
43141: ST_TO_ADDR
// if IsInUnit ( driver ) then
43142: LD_VAR 0 18
43146: PPUSH
43147: CALL_OW 310
43151: IFFALSE 43162
// ComExit ( driver ) ;
43153: LD_VAR 0 18
43157: PPUSH
43158: CALL 68472 0 1
// AddComEnterUnit ( driver , tmp ) ;
43162: LD_VAR 0 18
43166: PPUSH
43167: LD_VAR 0 13
43171: PPUSH
43172: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43176: LD_VAR 0 18
43180: PPUSH
43181: LD_VAR 0 7
43185: PPUSH
43186: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43190: LD_VAR 0 18
43194: PPUSH
43195: CALL_OW 181
// end ; continue ;
43199: GO 42851
// end ; if not cleaners or not tmp in cleaners then
43201: LD_VAR 0 6
43205: NOT
43206: PUSH
43207: LD_VAR 0 13
43211: PUSH
43212: LD_VAR 0 6
43216: IN
43217: NOT
43218: OR
43219: IFFALSE 43526
// begin if dep then
43221: LD_VAR 0 17
43225: IFFALSE 43361
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43227: LD_ADDR_VAR 0 16
43231: PUSH
43232: LD_VAR 0 17
43236: PUSH
43237: LD_INT 1
43239: ARRAY
43240: PPUSH
43241: CALL_OW 250
43245: PPUSH
43246: LD_VAR 0 17
43250: PUSH
43251: LD_INT 1
43253: ARRAY
43254: PPUSH
43255: CALL_OW 254
43259: PPUSH
43260: LD_INT 5
43262: PPUSH
43263: CALL_OW 272
43267: PUSH
43268: LD_VAR 0 17
43272: PUSH
43273: LD_INT 1
43275: ARRAY
43276: PPUSH
43277: CALL_OW 251
43281: PPUSH
43282: LD_VAR 0 17
43286: PUSH
43287: LD_INT 1
43289: ARRAY
43290: PPUSH
43291: CALL_OW 254
43295: PPUSH
43296: LD_INT 5
43298: PPUSH
43299: CALL_OW 273
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43308: LD_VAR 0 16
43312: PUSH
43313: LD_INT 1
43315: ARRAY
43316: PPUSH
43317: LD_VAR 0 16
43321: PUSH
43322: LD_INT 2
43324: ARRAY
43325: PPUSH
43326: CALL_OW 488
43330: IFFALSE 43361
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43332: LD_VAR 0 13
43336: PPUSH
43337: LD_VAR 0 16
43341: PUSH
43342: LD_INT 1
43344: ARRAY
43345: PPUSH
43346: LD_VAR 0 16
43350: PUSH
43351: LD_INT 2
43353: ARRAY
43354: PPUSH
43355: CALL_OW 111
// continue ;
43359: GO 42851
// end ; end ; r := GetDir ( tmp ) ;
43361: LD_ADDR_VAR 0 15
43365: PUSH
43366: LD_VAR 0 13
43370: PPUSH
43371: CALL_OW 254
43375: ST_TO_ADDR
// if r = 5 then
43376: LD_VAR 0 15
43380: PUSH
43381: LD_INT 5
43383: EQUAL
43384: IFFALSE 43394
// r := 0 ;
43386: LD_ADDR_VAR 0 15
43390: PUSH
43391: LD_INT 0
43393: ST_TO_ADDR
// for j = r to 5 do
43394: LD_ADDR_VAR 0 10
43398: PUSH
43399: DOUBLE
43400: LD_VAR 0 15
43404: DEC
43405: ST_TO_ADDR
43406: LD_INT 5
43408: PUSH
43409: FOR_TO
43410: IFFALSE 43524
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43412: LD_ADDR_VAR 0 11
43416: PUSH
43417: LD_VAR 0 13
43421: PPUSH
43422: CALL_OW 250
43426: PPUSH
43427: LD_VAR 0 10
43431: PPUSH
43432: LD_INT 2
43434: PPUSH
43435: CALL_OW 272
43439: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43440: LD_ADDR_VAR 0 12
43444: PUSH
43445: LD_VAR 0 13
43449: PPUSH
43450: CALL_OW 251
43454: PPUSH
43455: LD_VAR 0 10
43459: PPUSH
43460: LD_INT 2
43462: PPUSH
43463: CALL_OW 273
43467: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43468: LD_VAR 0 11
43472: PPUSH
43473: LD_VAR 0 12
43477: PPUSH
43478: CALL_OW 488
43482: PUSH
43483: LD_VAR 0 11
43487: PPUSH
43488: LD_VAR 0 12
43492: PPUSH
43493: CALL_OW 428
43497: NOT
43498: AND
43499: IFFALSE 43522
// begin ComMoveXY ( tmp , _x , _y ) ;
43501: LD_VAR 0 13
43505: PPUSH
43506: LD_VAR 0 11
43510: PPUSH
43511: LD_VAR 0 12
43515: PPUSH
43516: CALL_OW 111
// break ;
43520: GO 43524
// end ; end ;
43522: GO 43409
43524: POP
43525: POP
// end ; end ;
43526: GO 42851
43528: POP
43529: POP
// end ;
43530: LD_VAR 0 8
43534: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43535: LD_INT 0
43537: PPUSH
// result := true ;
43538: LD_ADDR_VAR 0 3
43542: PUSH
43543: LD_INT 1
43545: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43546: LD_VAR 0 2
43550: PUSH
43551: LD_INT 24
43553: DOUBLE
43554: EQUAL
43555: IFTRUE 43565
43557: LD_INT 33
43559: DOUBLE
43560: EQUAL
43561: IFTRUE 43565
43563: GO 43590
43565: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43566: LD_ADDR_VAR 0 3
43570: PUSH
43571: LD_INT 32
43573: PPUSH
43574: LD_VAR 0 1
43578: PPUSH
43579: CALL_OW 321
43583: PUSH
43584: LD_INT 2
43586: EQUAL
43587: ST_TO_ADDR
43588: GO 43910
43590: LD_INT 20
43592: DOUBLE
43593: EQUAL
43594: IFTRUE 43598
43596: GO 43623
43598: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43599: LD_ADDR_VAR 0 3
43603: PUSH
43604: LD_INT 6
43606: PPUSH
43607: LD_VAR 0 1
43611: PPUSH
43612: CALL_OW 321
43616: PUSH
43617: LD_INT 2
43619: EQUAL
43620: ST_TO_ADDR
43621: GO 43910
43623: LD_INT 22
43625: DOUBLE
43626: EQUAL
43627: IFTRUE 43637
43629: LD_INT 36
43631: DOUBLE
43632: EQUAL
43633: IFTRUE 43637
43635: GO 43662
43637: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43638: LD_ADDR_VAR 0 3
43642: PUSH
43643: LD_INT 15
43645: PPUSH
43646: LD_VAR 0 1
43650: PPUSH
43651: CALL_OW 321
43655: PUSH
43656: LD_INT 2
43658: EQUAL
43659: ST_TO_ADDR
43660: GO 43910
43662: LD_INT 30
43664: DOUBLE
43665: EQUAL
43666: IFTRUE 43670
43668: GO 43695
43670: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43671: LD_ADDR_VAR 0 3
43675: PUSH
43676: LD_INT 20
43678: PPUSH
43679: LD_VAR 0 1
43683: PPUSH
43684: CALL_OW 321
43688: PUSH
43689: LD_INT 2
43691: EQUAL
43692: ST_TO_ADDR
43693: GO 43910
43695: LD_INT 28
43697: DOUBLE
43698: EQUAL
43699: IFTRUE 43709
43701: LD_INT 21
43703: DOUBLE
43704: EQUAL
43705: IFTRUE 43709
43707: GO 43734
43709: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43710: LD_ADDR_VAR 0 3
43714: PUSH
43715: LD_INT 21
43717: PPUSH
43718: LD_VAR 0 1
43722: PPUSH
43723: CALL_OW 321
43727: PUSH
43728: LD_INT 2
43730: EQUAL
43731: ST_TO_ADDR
43732: GO 43910
43734: LD_INT 16
43736: DOUBLE
43737: EQUAL
43738: IFTRUE 43742
43740: GO 43769
43742: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43743: LD_ADDR_VAR 0 3
43747: PUSH
43748: LD_EXP 110
43752: PPUSH
43753: LD_VAR 0 1
43757: PPUSH
43758: CALL_OW 321
43762: PUSH
43763: LD_INT 2
43765: EQUAL
43766: ST_TO_ADDR
43767: GO 43910
43769: LD_INT 19
43771: DOUBLE
43772: EQUAL
43773: IFTRUE 43783
43775: LD_INT 23
43777: DOUBLE
43778: EQUAL
43779: IFTRUE 43783
43781: GO 43810
43783: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43784: LD_ADDR_VAR 0 3
43788: PUSH
43789: LD_EXP 109
43793: PPUSH
43794: LD_VAR 0 1
43798: PPUSH
43799: CALL_OW 321
43803: PUSH
43804: LD_INT 2
43806: EQUAL
43807: ST_TO_ADDR
43808: GO 43910
43810: LD_INT 17
43812: DOUBLE
43813: EQUAL
43814: IFTRUE 43818
43816: GO 43843
43818: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43819: LD_ADDR_VAR 0 3
43823: PUSH
43824: LD_INT 39
43826: PPUSH
43827: LD_VAR 0 1
43831: PPUSH
43832: CALL_OW 321
43836: PUSH
43837: LD_INT 2
43839: EQUAL
43840: ST_TO_ADDR
43841: GO 43910
43843: LD_INT 18
43845: DOUBLE
43846: EQUAL
43847: IFTRUE 43851
43849: GO 43876
43851: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43852: LD_ADDR_VAR 0 3
43856: PUSH
43857: LD_INT 40
43859: PPUSH
43860: LD_VAR 0 1
43864: PPUSH
43865: CALL_OW 321
43869: PUSH
43870: LD_INT 2
43872: EQUAL
43873: ST_TO_ADDR
43874: GO 43910
43876: LD_INT 27
43878: DOUBLE
43879: EQUAL
43880: IFTRUE 43884
43882: GO 43909
43884: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43885: LD_ADDR_VAR 0 3
43889: PUSH
43890: LD_INT 35
43892: PPUSH
43893: LD_VAR 0 1
43897: PPUSH
43898: CALL_OW 321
43902: PUSH
43903: LD_INT 2
43905: EQUAL
43906: ST_TO_ADDR
43907: GO 43910
43909: POP
// end ;
43910: LD_VAR 0 3
43914: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43915: LD_INT 0
43917: PPUSH
43918: PPUSH
43919: PPUSH
43920: PPUSH
43921: PPUSH
43922: PPUSH
43923: PPUSH
43924: PPUSH
43925: PPUSH
43926: PPUSH
43927: PPUSH
// result := false ;
43928: LD_ADDR_VAR 0 6
43932: PUSH
43933: LD_INT 0
43935: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43936: LD_VAR 0 1
43940: NOT
43941: PUSH
43942: LD_VAR 0 1
43946: PPUSH
43947: CALL_OW 266
43951: PUSH
43952: LD_INT 0
43954: PUSH
43955: LD_INT 1
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: IN
43962: NOT
43963: OR
43964: PUSH
43965: LD_VAR 0 2
43969: NOT
43970: OR
43971: PUSH
43972: LD_VAR 0 5
43976: PUSH
43977: LD_INT 0
43979: PUSH
43980: LD_INT 1
43982: PUSH
43983: LD_INT 2
43985: PUSH
43986: LD_INT 3
43988: PUSH
43989: LD_INT 4
43991: PUSH
43992: LD_INT 5
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: IN
44003: NOT
44004: OR
44005: PUSH
44006: LD_VAR 0 3
44010: PPUSH
44011: LD_VAR 0 4
44015: PPUSH
44016: CALL_OW 488
44020: NOT
44021: OR
44022: IFFALSE 44026
// exit ;
44024: GO 44762
// side := GetSide ( depot ) ;
44026: LD_ADDR_VAR 0 9
44030: PUSH
44031: LD_VAR 0 1
44035: PPUSH
44036: CALL_OW 255
44040: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44041: LD_VAR 0 9
44045: PPUSH
44046: LD_VAR 0 2
44050: PPUSH
44051: CALL 43535 0 2
44055: NOT
44056: IFFALSE 44060
// exit ;
44058: GO 44762
// pom := GetBase ( depot ) ;
44060: LD_ADDR_VAR 0 10
44064: PUSH
44065: LD_VAR 0 1
44069: PPUSH
44070: CALL_OW 274
44074: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44075: LD_ADDR_VAR 0 11
44079: PUSH
44080: LD_VAR 0 2
44084: PPUSH
44085: LD_VAR 0 1
44089: PPUSH
44090: CALL_OW 248
44094: PPUSH
44095: CALL_OW 450
44099: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44100: LD_VAR 0 10
44104: PPUSH
44105: LD_INT 1
44107: PPUSH
44108: CALL_OW 275
44112: PUSH
44113: LD_VAR 0 11
44117: PUSH
44118: LD_INT 1
44120: ARRAY
44121: GREATEREQUAL
44122: PUSH
44123: LD_VAR 0 10
44127: PPUSH
44128: LD_INT 2
44130: PPUSH
44131: CALL_OW 275
44135: PUSH
44136: LD_VAR 0 11
44140: PUSH
44141: LD_INT 2
44143: ARRAY
44144: GREATEREQUAL
44145: AND
44146: PUSH
44147: LD_VAR 0 10
44151: PPUSH
44152: LD_INT 3
44154: PPUSH
44155: CALL_OW 275
44159: PUSH
44160: LD_VAR 0 11
44164: PUSH
44165: LD_INT 3
44167: ARRAY
44168: GREATEREQUAL
44169: AND
44170: NOT
44171: IFFALSE 44175
// exit ;
44173: GO 44762
// if GetBType ( depot ) = b_depot then
44175: LD_VAR 0 1
44179: PPUSH
44180: CALL_OW 266
44184: PUSH
44185: LD_INT 0
44187: EQUAL
44188: IFFALSE 44200
// dist := 28 else
44190: LD_ADDR_VAR 0 14
44194: PUSH
44195: LD_INT 28
44197: ST_TO_ADDR
44198: GO 44208
// dist := 36 ;
44200: LD_ADDR_VAR 0 14
44204: PUSH
44205: LD_INT 36
44207: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44208: LD_VAR 0 1
44212: PPUSH
44213: LD_VAR 0 3
44217: PPUSH
44218: LD_VAR 0 4
44222: PPUSH
44223: CALL_OW 297
44227: PUSH
44228: LD_VAR 0 14
44232: GREATER
44233: IFFALSE 44237
// exit ;
44235: GO 44762
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44237: LD_ADDR_VAR 0 12
44241: PUSH
44242: LD_VAR 0 2
44246: PPUSH
44247: LD_VAR 0 3
44251: PPUSH
44252: LD_VAR 0 4
44256: PPUSH
44257: LD_VAR 0 5
44261: PPUSH
44262: LD_VAR 0 1
44266: PPUSH
44267: CALL_OW 248
44271: PPUSH
44272: LD_INT 0
44274: PPUSH
44275: CALL 44767 0 6
44279: ST_TO_ADDR
// if not hexes then
44280: LD_VAR 0 12
44284: NOT
44285: IFFALSE 44289
// exit ;
44287: GO 44762
// hex := GetHexInfo ( x , y ) ;
44289: LD_ADDR_VAR 0 15
44293: PUSH
44294: LD_VAR 0 3
44298: PPUSH
44299: LD_VAR 0 4
44303: PPUSH
44304: CALL_OW 546
44308: ST_TO_ADDR
// if hex [ 1 ] then
44309: LD_VAR 0 15
44313: PUSH
44314: LD_INT 1
44316: ARRAY
44317: IFFALSE 44321
// exit ;
44319: GO 44762
// height := hex [ 2 ] ;
44321: LD_ADDR_VAR 0 13
44325: PUSH
44326: LD_VAR 0 15
44330: PUSH
44331: LD_INT 2
44333: ARRAY
44334: ST_TO_ADDR
// for i = 1 to hexes do
44335: LD_ADDR_VAR 0 7
44339: PUSH
44340: DOUBLE
44341: LD_INT 1
44343: DEC
44344: ST_TO_ADDR
44345: LD_VAR 0 12
44349: PUSH
44350: FOR_TO
44351: IFFALSE 44681
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44353: LD_VAR 0 12
44357: PUSH
44358: LD_VAR 0 7
44362: ARRAY
44363: PUSH
44364: LD_INT 1
44366: ARRAY
44367: PPUSH
44368: LD_VAR 0 12
44372: PUSH
44373: LD_VAR 0 7
44377: ARRAY
44378: PUSH
44379: LD_INT 2
44381: ARRAY
44382: PPUSH
44383: CALL_OW 488
44387: NOT
44388: PUSH
44389: LD_VAR 0 12
44393: PUSH
44394: LD_VAR 0 7
44398: ARRAY
44399: PUSH
44400: LD_INT 1
44402: ARRAY
44403: PPUSH
44404: LD_VAR 0 12
44408: PUSH
44409: LD_VAR 0 7
44413: ARRAY
44414: PUSH
44415: LD_INT 2
44417: ARRAY
44418: PPUSH
44419: CALL_OW 428
44423: PUSH
44424: LD_INT 0
44426: GREATER
44427: OR
44428: PUSH
44429: LD_VAR 0 12
44433: PUSH
44434: LD_VAR 0 7
44438: ARRAY
44439: PUSH
44440: LD_INT 1
44442: ARRAY
44443: PPUSH
44444: LD_VAR 0 12
44448: PUSH
44449: LD_VAR 0 7
44453: ARRAY
44454: PUSH
44455: LD_INT 2
44457: ARRAY
44458: PPUSH
44459: CALL_OW 351
44463: OR
44464: IFFALSE 44470
// exit ;
44466: POP
44467: POP
44468: GO 44762
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44470: LD_ADDR_VAR 0 8
44474: PUSH
44475: LD_VAR 0 12
44479: PUSH
44480: LD_VAR 0 7
44484: ARRAY
44485: PUSH
44486: LD_INT 1
44488: ARRAY
44489: PPUSH
44490: LD_VAR 0 12
44494: PUSH
44495: LD_VAR 0 7
44499: ARRAY
44500: PUSH
44501: LD_INT 2
44503: ARRAY
44504: PPUSH
44505: CALL_OW 546
44509: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44510: LD_VAR 0 8
44514: PUSH
44515: LD_INT 1
44517: ARRAY
44518: PUSH
44519: LD_VAR 0 8
44523: PUSH
44524: LD_INT 2
44526: ARRAY
44527: PUSH
44528: LD_VAR 0 13
44532: PUSH
44533: LD_INT 2
44535: PLUS
44536: GREATER
44537: OR
44538: PUSH
44539: LD_VAR 0 8
44543: PUSH
44544: LD_INT 2
44546: ARRAY
44547: PUSH
44548: LD_VAR 0 13
44552: PUSH
44553: LD_INT 2
44555: MINUS
44556: LESS
44557: OR
44558: PUSH
44559: LD_VAR 0 8
44563: PUSH
44564: LD_INT 3
44566: ARRAY
44567: PUSH
44568: LD_INT 0
44570: PUSH
44571: LD_INT 8
44573: PUSH
44574: LD_INT 9
44576: PUSH
44577: LD_INT 10
44579: PUSH
44580: LD_INT 11
44582: PUSH
44583: LD_INT 12
44585: PUSH
44586: LD_INT 13
44588: PUSH
44589: LD_INT 16
44591: PUSH
44592: LD_INT 17
44594: PUSH
44595: LD_INT 18
44597: PUSH
44598: LD_INT 19
44600: PUSH
44601: LD_INT 20
44603: PUSH
44604: LD_INT 21
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: IN
44622: NOT
44623: OR
44624: PUSH
44625: LD_VAR 0 8
44629: PUSH
44630: LD_INT 5
44632: ARRAY
44633: NOT
44634: OR
44635: PUSH
44636: LD_VAR 0 8
44640: PUSH
44641: LD_INT 6
44643: ARRAY
44644: PUSH
44645: LD_INT 1
44647: PUSH
44648: LD_INT 2
44650: PUSH
44651: LD_INT 7
44653: PUSH
44654: LD_INT 9
44656: PUSH
44657: LD_INT 10
44659: PUSH
44660: LD_INT 11
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: IN
44671: NOT
44672: OR
44673: IFFALSE 44679
// exit ;
44675: POP
44676: POP
44677: GO 44762
// end ;
44679: GO 44350
44681: POP
44682: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44683: LD_VAR 0 9
44687: PPUSH
44688: LD_VAR 0 3
44692: PPUSH
44693: LD_VAR 0 4
44697: PPUSH
44698: LD_INT 20
44700: PPUSH
44701: CALL 36708 0 4
44705: PUSH
44706: LD_INT 4
44708: ARRAY
44709: IFFALSE 44713
// exit ;
44711: GO 44762
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44713: LD_VAR 0 2
44717: PUSH
44718: LD_INT 29
44720: PUSH
44721: LD_INT 30
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: IN
44728: PUSH
44729: LD_VAR 0 3
44733: PPUSH
44734: LD_VAR 0 4
44738: PPUSH
44739: LD_VAR 0 9
44743: PPUSH
44744: CALL_OW 440
44748: NOT
44749: AND
44750: IFFALSE 44754
// exit ;
44752: GO 44762
// result := true ;
44754: LD_ADDR_VAR 0 6
44758: PUSH
44759: LD_INT 1
44761: ST_TO_ADDR
// end ;
44762: LD_VAR 0 6
44766: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44767: LD_INT 0
44769: PPUSH
44770: PPUSH
44771: PPUSH
44772: PPUSH
44773: PPUSH
44774: PPUSH
44775: PPUSH
44776: PPUSH
44777: PPUSH
44778: PPUSH
44779: PPUSH
44780: PPUSH
44781: PPUSH
44782: PPUSH
44783: PPUSH
44784: PPUSH
44785: PPUSH
44786: PPUSH
44787: PPUSH
44788: PPUSH
44789: PPUSH
44790: PPUSH
44791: PPUSH
44792: PPUSH
44793: PPUSH
44794: PPUSH
44795: PPUSH
44796: PPUSH
44797: PPUSH
44798: PPUSH
44799: PPUSH
44800: PPUSH
44801: PPUSH
44802: PPUSH
44803: PPUSH
44804: PPUSH
44805: PPUSH
44806: PPUSH
44807: PPUSH
44808: PPUSH
44809: PPUSH
44810: PPUSH
44811: PPUSH
44812: PPUSH
44813: PPUSH
44814: PPUSH
44815: PPUSH
44816: PPUSH
44817: PPUSH
44818: PPUSH
44819: PPUSH
44820: PPUSH
44821: PPUSH
44822: PPUSH
44823: PPUSH
44824: PPUSH
44825: PPUSH
44826: PPUSH
// result = [ ] ;
44827: LD_ADDR_VAR 0 7
44831: PUSH
44832: EMPTY
44833: ST_TO_ADDR
// temp_list = [ ] ;
44834: LD_ADDR_VAR 0 9
44838: PUSH
44839: EMPTY
44840: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44841: LD_VAR 0 4
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: LD_INT 2
44854: PUSH
44855: LD_INT 3
44857: PUSH
44858: LD_INT 4
44860: PUSH
44861: LD_INT 5
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: IN
44872: NOT
44873: PUSH
44874: LD_VAR 0 1
44878: PUSH
44879: LD_INT 0
44881: PUSH
44882: LD_INT 1
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: IN
44889: PUSH
44890: LD_VAR 0 5
44894: PUSH
44895: LD_INT 1
44897: PUSH
44898: LD_INT 2
44900: PUSH
44901: LD_INT 3
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: LIST
44908: IN
44909: NOT
44910: AND
44911: OR
44912: IFFALSE 44916
// exit ;
44914: GO 63307
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44916: LD_VAR 0 1
44920: PUSH
44921: LD_INT 6
44923: PUSH
44924: LD_INT 7
44926: PUSH
44927: LD_INT 8
44929: PUSH
44930: LD_INT 13
44932: PUSH
44933: LD_INT 12
44935: PUSH
44936: LD_INT 15
44938: PUSH
44939: LD_INT 11
44941: PUSH
44942: LD_INT 14
44944: PUSH
44945: LD_INT 10
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: IN
44959: IFFALSE 44969
// btype = b_lab ;
44961: LD_ADDR_VAR 0 1
44965: PUSH
44966: LD_INT 6
44968: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44969: LD_VAR 0 6
44973: PUSH
44974: LD_INT 0
44976: PUSH
44977: LD_INT 1
44979: PUSH
44980: LD_INT 2
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: LIST
44987: IN
44988: NOT
44989: PUSH
44990: LD_VAR 0 1
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: LD_INT 1
45000: PUSH
45001: LD_INT 2
45003: PUSH
45004: LD_INT 3
45006: PUSH
45007: LD_INT 6
45009: PUSH
45010: LD_INT 36
45012: PUSH
45013: LD_INT 4
45015: PUSH
45016: LD_INT 5
45018: PUSH
45019: LD_INT 31
45021: PUSH
45022: LD_INT 32
45024: PUSH
45025: LD_INT 33
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: IN
45041: NOT
45042: PUSH
45043: LD_VAR 0 6
45047: PUSH
45048: LD_INT 1
45050: EQUAL
45051: AND
45052: OR
45053: PUSH
45054: LD_VAR 0 1
45058: PUSH
45059: LD_INT 2
45061: PUSH
45062: LD_INT 3
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: IN
45069: NOT
45070: PUSH
45071: LD_VAR 0 6
45075: PUSH
45076: LD_INT 2
45078: EQUAL
45079: AND
45080: OR
45081: IFFALSE 45091
// mode = 0 ;
45083: LD_ADDR_VAR 0 6
45087: PUSH
45088: LD_INT 0
45090: ST_TO_ADDR
// case mode of 0 :
45091: LD_VAR 0 6
45095: PUSH
45096: LD_INT 0
45098: DOUBLE
45099: EQUAL
45100: IFTRUE 45104
45102: GO 56557
45104: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45105: LD_ADDR_VAR 0 11
45109: PUSH
45110: LD_INT 0
45112: PUSH
45113: LD_INT 0
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 0
45122: PUSH
45123: LD_INT 1
45125: NEG
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 1
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 1
45143: PUSH
45144: LD_INT 1
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 0
45153: PUSH
45154: LD_INT 1
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 1
45163: NEG
45164: PUSH
45165: LD_INT 0
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 1
45174: NEG
45175: PUSH
45176: LD_INT 1
45178: NEG
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 1
45186: NEG
45187: PUSH
45188: LD_INT 2
45190: NEG
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 0
45198: PUSH
45199: LD_INT 2
45201: NEG
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 1
45209: PUSH
45210: LD_INT 1
45212: NEG
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: LD_INT 2
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 0
45230: PUSH
45231: LD_INT 2
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 1
45240: NEG
45241: PUSH
45242: LD_INT 1
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 1
45251: PUSH
45252: LD_INT 3
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 0
45261: PUSH
45262: LD_INT 3
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 1
45271: NEG
45272: PUSH
45273: LD_INT 2
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45298: LD_ADDR_VAR 0 12
45302: PUSH
45303: LD_INT 0
45305: PUSH
45306: LD_INT 0
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 0
45315: PUSH
45316: LD_INT 1
45318: NEG
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 1
45326: PUSH
45327: LD_INT 0
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 1
45336: PUSH
45337: LD_INT 1
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 1
45356: NEG
45357: PUSH
45358: LD_INT 0
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 1
45367: NEG
45368: PUSH
45369: LD_INT 1
45371: NEG
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 1
45379: PUSH
45380: LD_INT 1
45382: NEG
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 2
45390: PUSH
45391: LD_INT 0
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 2
45400: PUSH
45401: LD_INT 1
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 1
45410: NEG
45411: PUSH
45412: LD_INT 1
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 2
45421: NEG
45422: PUSH
45423: LD_INT 0
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 2
45432: NEG
45433: PUSH
45434: LD_INT 1
45436: NEG
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 2
45444: NEG
45445: PUSH
45446: LD_INT 1
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 3
45455: NEG
45456: PUSH
45457: LD_INT 0
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 3
45466: NEG
45467: PUSH
45468: LD_INT 1
45470: NEG
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45494: LD_ADDR_VAR 0 13
45498: PUSH
45499: LD_INT 0
45501: PUSH
45502: LD_INT 0
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 0
45511: PUSH
45512: LD_INT 1
45514: NEG
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 1
45522: PUSH
45523: LD_INT 0
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 1
45532: PUSH
45533: LD_INT 1
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 0
45542: PUSH
45543: LD_INT 1
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 1
45552: NEG
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 1
45563: NEG
45564: PUSH
45565: LD_INT 1
45567: NEG
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 1
45575: NEG
45576: PUSH
45577: LD_INT 2
45579: NEG
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 2
45587: PUSH
45588: LD_INT 1
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 2
45597: PUSH
45598: LD_INT 2
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 1
45607: PUSH
45608: LD_INT 2
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 2
45617: NEG
45618: PUSH
45619: LD_INT 1
45621: NEG
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 2
45629: NEG
45630: PUSH
45631: LD_INT 2
45633: NEG
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 2
45641: NEG
45642: PUSH
45643: LD_INT 3
45645: NEG
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 3
45653: NEG
45654: PUSH
45655: LD_INT 2
45657: NEG
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 3
45665: NEG
45666: PUSH
45667: LD_INT 3
45669: NEG
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45693: LD_ADDR_VAR 0 14
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: LD_INT 0
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 0
45710: PUSH
45711: LD_INT 1
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 1
45721: PUSH
45722: LD_INT 0
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 1
45731: PUSH
45732: LD_INT 1
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 0
45741: PUSH
45742: LD_INT 1
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 1
45751: NEG
45752: PUSH
45753: LD_INT 0
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: LD_INT 1
45762: NEG
45763: PUSH
45764: LD_INT 1
45766: NEG
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 1
45774: NEG
45775: PUSH
45776: LD_INT 2
45778: NEG
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: LD_INT 2
45789: NEG
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: LD_INT 1
45800: NEG
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 1
45808: PUSH
45809: LD_INT 2
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 0
45818: PUSH
45819: LD_INT 2
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 1
45828: NEG
45829: PUSH
45830: LD_INT 1
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 1
45839: NEG
45840: PUSH
45841: LD_INT 3
45843: NEG
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 0
45851: PUSH
45852: LD_INT 3
45854: NEG
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 1
45862: PUSH
45863: LD_INT 2
45865: NEG
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45889: LD_ADDR_VAR 0 15
45893: PUSH
45894: LD_INT 0
45896: PUSH
45897: LD_INT 0
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 0
45906: PUSH
45907: LD_INT 1
45909: NEG
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 1
45917: PUSH
45918: LD_INT 0
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 1
45927: PUSH
45928: LD_INT 1
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 0
45937: PUSH
45938: LD_INT 1
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: NEG
45948: PUSH
45949: LD_INT 0
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 1
45958: NEG
45959: PUSH
45960: LD_INT 1
45962: NEG
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 1
45970: PUSH
45971: LD_INT 1
45973: NEG
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 2
45981: PUSH
45982: LD_INT 0
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 2
45991: PUSH
45992: LD_INT 1
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 1
46001: NEG
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 2
46012: NEG
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 2
46023: NEG
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 2
46035: PUSH
46036: LD_INT 1
46038: NEG
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 3
46046: PUSH
46047: LD_INT 0
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 3
46056: PUSH
46057: LD_INT 1
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46082: LD_ADDR_VAR 0 16
46086: PUSH
46087: LD_INT 0
46089: PUSH
46090: LD_INT 0
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 0
46099: PUSH
46100: LD_INT 1
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 1
46110: PUSH
46111: LD_INT 0
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 1
46120: PUSH
46121: LD_INT 1
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 0
46130: PUSH
46131: LD_INT 1
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 1
46140: NEG
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 1
46151: NEG
46152: PUSH
46153: LD_INT 1
46155: NEG
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 1
46163: NEG
46164: PUSH
46165: LD_INT 2
46167: NEG
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 2
46175: PUSH
46176: LD_INT 1
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 2
46185: PUSH
46186: LD_INT 2
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: LD_INT 2
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 2
46205: NEG
46206: PUSH
46207: LD_INT 1
46209: NEG
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 2
46217: NEG
46218: PUSH
46219: LD_INT 2
46221: NEG
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 3
46229: PUSH
46230: LD_INT 2
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 3
46239: PUSH
46240: LD_INT 3
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 2
46249: PUSH
46250: LD_INT 3
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46275: LD_ADDR_VAR 0 17
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: LD_INT 0
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 0
46292: PUSH
46293: LD_INT 1
46295: NEG
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 1
46303: PUSH
46304: LD_INT 0
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 1
46313: PUSH
46314: LD_INT 1
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 0
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 1
46333: NEG
46334: PUSH
46335: LD_INT 0
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 1
46344: NEG
46345: PUSH
46346: LD_INT 1
46348: NEG
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 1
46356: NEG
46357: PUSH
46358: LD_INT 2
46360: NEG
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 0
46368: PUSH
46369: LD_INT 2
46371: NEG
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 1
46379: PUSH
46380: LD_INT 1
46382: NEG
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 2
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 2
46400: PUSH
46401: LD_INT 1
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 2
46410: PUSH
46411: LD_INT 2
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 1
46420: PUSH
46421: LD_INT 2
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: LD_INT 2
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 1
46440: NEG
46441: PUSH
46442: LD_INT 1
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 2
46451: NEG
46452: PUSH
46453: LD_INT 0
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 2
46462: NEG
46463: PUSH
46464: LD_INT 1
46466: NEG
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 2
46474: NEG
46475: PUSH
46476: LD_INT 2
46478: NEG
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46505: LD_ADDR_VAR 0 18
46509: PUSH
46510: LD_INT 0
46512: PUSH
46513: LD_INT 0
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 0
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 1
46533: PUSH
46534: LD_INT 0
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 1
46543: PUSH
46544: LD_INT 1
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 0
46553: PUSH
46554: LD_INT 1
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 1
46563: NEG
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 1
46574: NEG
46575: PUSH
46576: LD_INT 1
46578: NEG
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 1
46586: NEG
46587: PUSH
46588: LD_INT 2
46590: NEG
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 0
46598: PUSH
46599: LD_INT 2
46601: NEG
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 1
46609: PUSH
46610: LD_INT 1
46612: NEG
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 2
46620: PUSH
46621: LD_INT 0
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 2
46630: PUSH
46631: LD_INT 1
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 2
46640: PUSH
46641: LD_INT 2
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 1
46650: PUSH
46651: LD_INT 2
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: LD_INT 2
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 1
46670: NEG
46671: PUSH
46672: LD_INT 1
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 2
46681: NEG
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 2
46692: NEG
46693: PUSH
46694: LD_INT 1
46696: NEG
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 2
46704: NEG
46705: PUSH
46706: LD_INT 2
46708: NEG
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46735: LD_ADDR_VAR 0 19
46739: PUSH
46740: LD_INT 0
46742: PUSH
46743: LD_INT 0
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 0
46752: PUSH
46753: LD_INT 1
46755: NEG
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 1
46763: PUSH
46764: LD_INT 0
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 1
46773: PUSH
46774: LD_INT 1
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 0
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 1
46793: NEG
46794: PUSH
46795: LD_INT 0
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 1
46804: NEG
46805: PUSH
46806: LD_INT 1
46808: NEG
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 1
46816: NEG
46817: PUSH
46818: LD_INT 2
46820: NEG
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 0
46828: PUSH
46829: LD_INT 2
46831: NEG
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 1
46839: PUSH
46840: LD_INT 1
46842: NEG
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 2
46850: PUSH
46851: LD_INT 0
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 2
46860: PUSH
46861: LD_INT 1
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 2
46870: PUSH
46871: LD_INT 2
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 1
46880: PUSH
46881: LD_INT 2
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: LD_INT 2
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 1
46900: NEG
46901: PUSH
46902: LD_INT 1
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 2
46911: NEG
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 2
46922: NEG
46923: PUSH
46924: LD_INT 1
46926: NEG
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 2
46934: NEG
46935: PUSH
46936: LD_INT 2
46938: NEG
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46965: LD_ADDR_VAR 0 20
46969: PUSH
46970: LD_INT 0
46972: PUSH
46973: LD_INT 0
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 0
46982: PUSH
46983: LD_INT 1
46985: NEG
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 1
46993: PUSH
46994: LD_INT 0
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 1
47003: PUSH
47004: LD_INT 1
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 0
47013: PUSH
47014: LD_INT 1
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 1
47023: NEG
47024: PUSH
47025: LD_INT 0
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 1
47034: NEG
47035: PUSH
47036: LD_INT 1
47038: NEG
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 1
47046: NEG
47047: PUSH
47048: LD_INT 2
47050: NEG
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 0
47058: PUSH
47059: LD_INT 2
47061: NEG
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 1
47069: PUSH
47070: LD_INT 1
47072: NEG
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 2
47080: PUSH
47081: LD_INT 0
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 2
47090: PUSH
47091: LD_INT 1
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 2
47100: PUSH
47101: LD_INT 2
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 1
47110: PUSH
47111: LD_INT 2
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 0
47120: PUSH
47121: LD_INT 2
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 1
47130: NEG
47131: PUSH
47132: LD_INT 1
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 2
47141: NEG
47142: PUSH
47143: LD_INT 0
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 2
47152: NEG
47153: PUSH
47154: LD_INT 1
47156: NEG
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 2
47164: NEG
47165: PUSH
47166: LD_INT 2
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47195: LD_ADDR_VAR 0 21
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 0
47212: PUSH
47213: LD_INT 1
47215: NEG
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: PUSH
47234: LD_INT 1
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 0
47243: PUSH
47244: LD_INT 1
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 1
47253: NEG
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 1
47264: NEG
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 1
47276: NEG
47277: PUSH
47278: LD_INT 2
47280: NEG
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: LD_INT 2
47291: NEG
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 1
47299: PUSH
47300: LD_INT 1
47302: NEG
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 2
47310: PUSH
47311: LD_INT 0
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 2
47320: PUSH
47321: LD_INT 1
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 2
47330: PUSH
47331: LD_INT 2
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 1
47340: PUSH
47341: LD_INT 2
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: LD_INT 2
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 1
47360: NEG
47361: PUSH
47362: LD_INT 1
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 2
47371: NEG
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 2
47382: NEG
47383: PUSH
47384: LD_INT 1
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 2
47394: NEG
47395: PUSH
47396: LD_INT 2
47398: NEG
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47425: LD_ADDR_VAR 0 22
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: LD_INT 0
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 0
47442: PUSH
47443: LD_INT 1
47445: NEG
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 1
47453: PUSH
47454: LD_INT 0
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 1
47463: PUSH
47464: LD_INT 1
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 0
47473: PUSH
47474: LD_INT 1
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 1
47483: NEG
47484: PUSH
47485: LD_INT 0
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 1
47494: NEG
47495: PUSH
47496: LD_INT 1
47498: NEG
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 1
47506: NEG
47507: PUSH
47508: LD_INT 2
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: LD_INT 2
47521: NEG
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 1
47529: PUSH
47530: LD_INT 1
47532: NEG
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 2
47540: PUSH
47541: LD_INT 0
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 2
47550: PUSH
47551: LD_INT 1
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 2
47560: PUSH
47561: LD_INT 2
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 1
47570: PUSH
47571: LD_INT 2
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 0
47580: PUSH
47581: LD_INT 2
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 1
47590: NEG
47591: PUSH
47592: LD_INT 1
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 2
47601: NEG
47602: PUSH
47603: LD_INT 0
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 2
47612: NEG
47613: PUSH
47614: LD_INT 1
47616: NEG
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 2
47624: NEG
47625: PUSH
47626: LD_INT 2
47628: NEG
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47655: LD_ADDR_VAR 0 23
47659: PUSH
47660: LD_INT 0
47662: PUSH
47663: LD_INT 0
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 0
47672: PUSH
47673: LD_INT 1
47675: NEG
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 1
47683: PUSH
47684: LD_INT 0
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 1
47693: PUSH
47694: LD_INT 1
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 0
47703: PUSH
47704: LD_INT 1
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 1
47713: NEG
47714: PUSH
47715: LD_INT 0
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 1
47724: NEG
47725: PUSH
47726: LD_INT 1
47728: NEG
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 1
47736: NEG
47737: PUSH
47738: LD_INT 2
47740: NEG
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: LD_INT 2
47751: NEG
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 1
47759: PUSH
47760: LD_INT 1
47762: NEG
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 2
47770: PUSH
47771: LD_INT 0
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 2
47780: PUSH
47781: LD_INT 1
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 2
47790: PUSH
47791: LD_INT 2
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: PUSH
47801: LD_INT 2
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 0
47810: PUSH
47811: LD_INT 2
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 1
47820: NEG
47821: PUSH
47822: LD_INT 1
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 2
47831: NEG
47832: PUSH
47833: LD_INT 0
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 2
47842: NEG
47843: PUSH
47844: LD_INT 1
47846: NEG
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 2
47854: NEG
47855: PUSH
47856: LD_INT 2
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 2
47866: NEG
47867: PUSH
47868: LD_INT 3
47870: NEG
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 1
47878: NEG
47879: PUSH
47880: LD_INT 3
47882: NEG
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: LD_INT 2
47893: NEG
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 2
47901: PUSH
47902: LD_INT 1
47904: NEG
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47935: LD_ADDR_VAR 0 24
47939: PUSH
47940: LD_INT 0
47942: PUSH
47943: LD_INT 0
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 0
47952: PUSH
47953: LD_INT 1
47955: NEG
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 1
47963: PUSH
47964: LD_INT 0
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 1
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 0
47983: PUSH
47984: LD_INT 1
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 1
47993: NEG
47994: PUSH
47995: LD_INT 0
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 1
48004: NEG
48005: PUSH
48006: LD_INT 1
48008: NEG
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 1
48016: NEG
48017: PUSH
48018: LD_INT 2
48020: NEG
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 0
48028: PUSH
48029: LD_INT 2
48031: NEG
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 1
48039: PUSH
48040: LD_INT 1
48042: NEG
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 2
48050: PUSH
48051: LD_INT 0
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 2
48060: PUSH
48061: LD_INT 1
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 2
48070: PUSH
48071: LD_INT 2
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 1
48080: PUSH
48081: LD_INT 2
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 0
48090: PUSH
48091: LD_INT 2
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 1
48100: NEG
48101: PUSH
48102: LD_INT 1
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 2
48111: NEG
48112: PUSH
48113: LD_INT 0
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 2
48122: NEG
48123: PUSH
48124: LD_INT 1
48126: NEG
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 2
48134: NEG
48135: PUSH
48136: LD_INT 2
48138: NEG
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: LD_INT 2
48149: NEG
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 2
48157: PUSH
48158: LD_INT 1
48160: NEG
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 3
48168: PUSH
48169: LD_INT 1
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 3
48178: PUSH
48179: LD_INT 2
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48211: LD_ADDR_VAR 0 25
48215: PUSH
48216: LD_INT 0
48218: PUSH
48219: LD_INT 0
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 0
48228: PUSH
48229: LD_INT 1
48231: NEG
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 1
48239: PUSH
48240: LD_INT 0
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 1
48249: PUSH
48250: LD_INT 1
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 0
48259: PUSH
48260: LD_INT 1
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 1
48269: NEG
48270: PUSH
48271: LD_INT 0
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 1
48280: NEG
48281: PUSH
48282: LD_INT 1
48284: NEG
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 1
48292: NEG
48293: PUSH
48294: LD_INT 2
48296: NEG
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 0
48304: PUSH
48305: LD_INT 2
48307: NEG
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 1
48315: PUSH
48316: LD_INT 1
48318: NEG
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 2
48326: PUSH
48327: LD_INT 0
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 2
48336: PUSH
48337: LD_INT 1
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 2
48346: PUSH
48347: LD_INT 2
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 1
48356: PUSH
48357: LD_INT 2
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 0
48366: PUSH
48367: LD_INT 2
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 1
48376: NEG
48377: PUSH
48378: LD_INT 1
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 2
48387: NEG
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 2
48398: NEG
48399: PUSH
48400: LD_INT 1
48402: NEG
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 2
48410: NEG
48411: PUSH
48412: LD_INT 2
48414: NEG
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 3
48422: PUSH
48423: LD_INT 1
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 3
48432: PUSH
48433: LD_INT 2
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 2
48442: PUSH
48443: LD_INT 3
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 1
48452: PUSH
48453: LD_INT 3
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48485: LD_ADDR_VAR 0 26
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: LD_INT 0
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 0
48502: PUSH
48503: LD_INT 1
48505: NEG
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 1
48513: PUSH
48514: LD_INT 0
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 1
48523: PUSH
48524: LD_INT 1
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: LD_INT 1
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 1
48543: NEG
48544: PUSH
48545: LD_INT 0
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 1
48554: NEG
48555: PUSH
48556: LD_INT 1
48558: NEG
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 1
48566: NEG
48567: PUSH
48568: LD_INT 2
48570: NEG
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 0
48578: PUSH
48579: LD_INT 2
48581: NEG
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 1
48589: PUSH
48590: LD_INT 1
48592: NEG
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 2
48600: PUSH
48601: LD_INT 0
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 2
48610: PUSH
48611: LD_INT 1
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 2
48620: PUSH
48621: LD_INT 2
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 1
48630: PUSH
48631: LD_INT 2
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: LD_INT 2
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 1
48650: NEG
48651: PUSH
48652: LD_INT 1
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 2
48661: NEG
48662: PUSH
48663: LD_INT 0
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 2
48672: NEG
48673: PUSH
48674: LD_INT 1
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 2
48684: NEG
48685: PUSH
48686: LD_INT 2
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 2
48696: PUSH
48697: LD_INT 3
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 1
48706: PUSH
48707: LD_INT 3
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 1
48716: NEG
48717: PUSH
48718: LD_INT 2
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 2
48727: NEG
48728: PUSH
48729: LD_INT 1
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48761: LD_ADDR_VAR 0 27
48765: PUSH
48766: LD_INT 0
48768: PUSH
48769: LD_INT 0
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 0
48778: PUSH
48779: LD_INT 1
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 1
48789: PUSH
48790: LD_INT 0
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 1
48799: PUSH
48800: LD_INT 1
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 0
48809: PUSH
48810: LD_INT 1
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 1
48819: NEG
48820: PUSH
48821: LD_INT 0
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 1
48830: NEG
48831: PUSH
48832: LD_INT 1
48834: NEG
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 1
48842: NEG
48843: PUSH
48844: LD_INT 2
48846: NEG
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 0
48854: PUSH
48855: LD_INT 2
48857: NEG
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 1
48865: PUSH
48866: LD_INT 1
48868: NEG
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 2
48876: PUSH
48877: LD_INT 0
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 2
48886: PUSH
48887: LD_INT 1
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 2
48896: PUSH
48897: LD_INT 2
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 1
48906: PUSH
48907: LD_INT 2
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: LD_INT 2
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 1
48926: NEG
48927: PUSH
48928: LD_INT 1
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 2
48937: NEG
48938: PUSH
48939: LD_INT 0
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 2
48948: NEG
48949: PUSH
48950: LD_INT 1
48952: NEG
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 2
48960: NEG
48961: PUSH
48962: LD_INT 2
48964: NEG
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 1
48972: NEG
48973: PUSH
48974: LD_INT 2
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 2
48983: NEG
48984: PUSH
48985: LD_INT 1
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 3
48994: NEG
48995: PUSH
48996: LD_INT 1
48998: NEG
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 3
49006: NEG
49007: PUSH
49008: LD_INT 2
49010: NEG
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: LIST
49023: LIST
49024: LIST
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49041: LD_ADDR_VAR 0 28
49045: PUSH
49046: LD_INT 0
49048: PUSH
49049: LD_INT 0
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 0
49058: PUSH
49059: LD_INT 1
49061: NEG
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 1
49069: PUSH
49070: LD_INT 0
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 1
49079: PUSH
49080: LD_INT 1
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 0
49089: PUSH
49090: LD_INT 1
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 1
49099: NEG
49100: PUSH
49101: LD_INT 0
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: NEG
49111: PUSH
49112: LD_INT 1
49114: NEG
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 1
49122: NEG
49123: PUSH
49124: LD_INT 2
49126: NEG
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: LD_INT 2
49137: NEG
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 1
49145: PUSH
49146: LD_INT 1
49148: NEG
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 2
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 2
49166: PUSH
49167: LD_INT 1
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 2
49176: PUSH
49177: LD_INT 2
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 1
49186: PUSH
49187: LD_INT 2
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 0
49196: PUSH
49197: LD_INT 2
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 1
49206: NEG
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 2
49217: NEG
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 2
49228: NEG
49229: PUSH
49230: LD_INT 1
49232: NEG
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 2
49240: NEG
49241: PUSH
49242: LD_INT 2
49244: NEG
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 2
49252: NEG
49253: PUSH
49254: LD_INT 3
49256: NEG
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 1
49264: NEG
49265: PUSH
49266: LD_INT 3
49268: NEG
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 3
49276: NEG
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 3
49288: NEG
49289: PUSH
49290: LD_INT 2
49292: NEG
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49323: LD_ADDR_VAR 0 29
49327: PUSH
49328: LD_INT 0
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 0
49340: PUSH
49341: LD_INT 1
49343: NEG
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 1
49351: PUSH
49352: LD_INT 0
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 1
49361: PUSH
49362: LD_INT 1
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 0
49371: PUSH
49372: LD_INT 1
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 1
49381: NEG
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 1
49404: NEG
49405: PUSH
49406: LD_INT 2
49408: NEG
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 0
49416: PUSH
49417: LD_INT 2
49419: NEG
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 1
49427: PUSH
49428: LD_INT 1
49430: NEG
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 2
49438: PUSH
49439: LD_INT 0
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 2
49448: PUSH
49449: LD_INT 1
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 1
49458: PUSH
49459: LD_INT 2
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 0
49468: PUSH
49469: LD_INT 2
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 1
49478: NEG
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 2
49489: NEG
49490: PUSH
49491: LD_INT 1
49493: NEG
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 2
49501: NEG
49502: PUSH
49503: LD_INT 2
49505: NEG
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 2
49513: NEG
49514: PUSH
49515: LD_INT 3
49517: NEG
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 2
49525: PUSH
49526: LD_INT 1
49528: NEG
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 3
49536: PUSH
49537: LD_INT 1
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: LD_INT 3
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 1
49556: NEG
49557: PUSH
49558: LD_INT 2
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 3
49567: NEG
49568: PUSH
49569: LD_INT 2
49571: NEG
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49602: LD_ADDR_VAR 0 30
49606: PUSH
49607: LD_INT 0
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 0
49619: PUSH
49620: LD_INT 1
49622: NEG
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 1
49630: PUSH
49631: LD_INT 0
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 1
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 1
49660: NEG
49661: PUSH
49662: LD_INT 0
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 1
49671: NEG
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 1
49683: NEG
49684: PUSH
49685: LD_INT 2
49687: NEG
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 0
49695: PUSH
49696: LD_INT 2
49698: NEG
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 1
49706: PUSH
49707: LD_INT 1
49709: NEG
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 2
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 2
49727: PUSH
49728: LD_INT 1
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 2
49737: PUSH
49738: LD_INT 2
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: LD_INT 2
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 1
49757: NEG
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 2
49768: NEG
49769: PUSH
49770: LD_INT 0
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 2
49779: NEG
49780: PUSH
49781: LD_INT 1
49783: NEG
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 1
49791: NEG
49792: PUSH
49793: LD_INT 3
49795: NEG
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 1
49803: PUSH
49804: LD_INT 2
49806: NEG
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 3
49814: PUSH
49815: LD_INT 2
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 2
49824: PUSH
49825: LD_INT 3
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 2
49834: NEG
49835: PUSH
49836: LD_INT 1
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 3
49845: NEG
49846: PUSH
49847: LD_INT 1
49849: NEG
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49880: LD_ADDR_VAR 0 31
49884: PUSH
49885: LD_INT 0
49887: PUSH
49888: LD_INT 0
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 0
49897: PUSH
49898: LD_INT 1
49900: NEG
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 1
49908: PUSH
49909: LD_INT 0
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: LD_INT 1
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: LD_INT 1
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 1
49938: NEG
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 1
49949: NEG
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 1
49961: NEG
49962: PUSH
49963: LD_INT 2
49965: NEG
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 1
49973: PUSH
49974: LD_INT 1
49976: NEG
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 2
49984: PUSH
49985: LD_INT 0
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 2
49994: PUSH
49995: LD_INT 1
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 2
50004: PUSH
50005: LD_INT 2
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: LD_INT 2
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: LD_INT 2
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: LD_INT 1
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 2
50045: NEG
50046: PUSH
50047: LD_INT 1
50049: NEG
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 2
50057: NEG
50058: PUSH
50059: LD_INT 2
50061: NEG
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 2
50069: NEG
50070: PUSH
50071: LD_INT 3
50073: NEG
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 2
50081: PUSH
50082: LD_INT 1
50084: NEG
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 3
50092: PUSH
50093: LD_INT 1
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 1
50102: PUSH
50103: LD_INT 3
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 1
50112: NEG
50113: PUSH
50114: LD_INT 2
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 3
50123: NEG
50124: PUSH
50125: LD_INT 2
50127: NEG
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50158: LD_ADDR_VAR 0 32
50162: PUSH
50163: LD_INT 0
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 0
50175: PUSH
50176: LD_INT 1
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 1
50186: PUSH
50187: LD_INT 0
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 1
50196: PUSH
50197: LD_INT 1
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 0
50206: PUSH
50207: LD_INT 1
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: LD_INT 0
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 1
50227: NEG
50228: PUSH
50229: LD_INT 1
50231: NEG
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: LD_INT 2
50243: NEG
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 0
50251: PUSH
50252: LD_INT 2
50254: NEG
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 1
50262: PUSH
50263: LD_INT 1
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 2
50273: PUSH
50274: LD_INT 1
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 2
50283: PUSH
50284: LD_INT 2
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: LD_INT 2
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: LD_INT 2
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: NEG
50314: PUSH
50315: LD_INT 1
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 2
50324: NEG
50325: PUSH
50326: LD_INT 0
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 2
50335: NEG
50336: PUSH
50337: LD_INT 1
50339: NEG
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 1
50347: NEG
50348: PUSH
50349: LD_INT 3
50351: NEG
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 1
50359: PUSH
50360: LD_INT 2
50362: NEG
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 3
50370: PUSH
50371: LD_INT 2
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 2
50380: PUSH
50381: LD_INT 3
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 2
50390: NEG
50391: PUSH
50392: LD_INT 1
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 3
50401: NEG
50402: PUSH
50403: LD_INT 1
50405: NEG
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50436: LD_ADDR_VAR 0 33
50440: PUSH
50441: LD_INT 0
50443: PUSH
50444: LD_INT 0
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 0
50453: PUSH
50454: LD_INT 1
50456: NEG
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 1
50464: PUSH
50465: LD_INT 0
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 1
50474: PUSH
50475: LD_INT 1
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 0
50484: PUSH
50485: LD_INT 1
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 1
50494: NEG
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 1
50505: NEG
50506: PUSH
50507: LD_INT 1
50509: NEG
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 1
50517: NEG
50518: PUSH
50519: LD_INT 2
50521: NEG
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 1
50529: PUSH
50530: LD_INT 1
50532: NEG
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 2
50540: PUSH
50541: LD_INT 0
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 2
50550: PUSH
50551: LD_INT 1
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 1
50560: PUSH
50561: LD_INT 2
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: LD_INT 2
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 1
50580: NEG
50581: PUSH
50582: LD_INT 1
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 2
50591: NEG
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 2
50602: NEG
50603: PUSH
50604: LD_INT 1
50606: NEG
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 2
50614: NEG
50615: PUSH
50616: LD_INT 2
50618: NEG
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 2
50626: NEG
50627: PUSH
50628: LD_INT 3
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 2
50638: PUSH
50639: LD_INT 1
50641: NEG
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 3
50649: PUSH
50650: LD_INT 1
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 1
50659: PUSH
50660: LD_INT 3
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 1
50669: NEG
50670: PUSH
50671: LD_INT 2
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 3
50680: NEG
50681: PUSH
50682: LD_INT 2
50684: NEG
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50715: LD_ADDR_VAR 0 34
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: LD_INT 0
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 0
50732: PUSH
50733: LD_INT 1
50735: NEG
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 1
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 1
50753: PUSH
50754: LD_INT 1
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 0
50763: PUSH
50764: LD_INT 1
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 1
50773: NEG
50774: PUSH
50775: LD_INT 0
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 1
50784: NEG
50785: PUSH
50786: LD_INT 1
50788: NEG
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 1
50796: NEG
50797: PUSH
50798: LD_INT 2
50800: NEG
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: LD_INT 2
50811: NEG
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 1
50819: PUSH
50820: LD_INT 1
50822: NEG
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 2
50830: PUSH
50831: LD_INT 1
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 2
50840: PUSH
50841: LD_INT 2
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 1
50850: PUSH
50851: LD_INT 2
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 1
50860: NEG
50861: PUSH
50862: LD_INT 1
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 2
50871: NEG
50872: PUSH
50873: LD_INT 0
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 2
50882: NEG
50883: PUSH
50884: LD_INT 1
50886: NEG
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 2
50894: NEG
50895: PUSH
50896: LD_INT 2
50898: NEG
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 1
50906: NEG
50907: PUSH
50908: LD_INT 3
50910: NEG
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 1
50918: PUSH
50919: LD_INT 2
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 3
50929: PUSH
50930: LD_INT 2
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 2
50939: PUSH
50940: LD_INT 3
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 2
50949: NEG
50950: PUSH
50951: LD_INT 1
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 3
50960: NEG
50961: PUSH
50962: LD_INT 1
50964: NEG
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50995: LD_ADDR_VAR 0 35
50999: PUSH
51000: LD_INT 0
51002: PUSH
51003: LD_INT 0
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 0
51012: PUSH
51013: LD_INT 1
51015: NEG
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 1
51023: PUSH
51024: LD_INT 0
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 1
51033: PUSH
51034: LD_INT 1
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: LD_INT 1
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 1
51053: NEG
51054: PUSH
51055: LD_INT 0
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 1
51064: NEG
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 2
51076: PUSH
51077: LD_INT 1
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 2
51086: NEG
51087: PUSH
51088: LD_INT 1
51090: NEG
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51107: LD_ADDR_VAR 0 36
51111: PUSH
51112: LD_INT 0
51114: PUSH
51115: LD_INT 0
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: LD_INT 1
51127: NEG
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 1
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 1
51145: PUSH
51146: LD_INT 1
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 0
51155: PUSH
51156: LD_INT 1
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: LD_INT 0
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 1
51176: NEG
51177: PUSH
51178: LD_INT 1
51180: NEG
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 1
51188: NEG
51189: PUSH
51190: LD_INT 2
51192: NEG
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 1
51200: PUSH
51201: LD_INT 2
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51219: LD_ADDR_VAR 0 37
51223: PUSH
51224: LD_INT 0
51226: PUSH
51227: LD_INT 0
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 0
51236: PUSH
51237: LD_INT 1
51239: NEG
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 1
51247: PUSH
51248: LD_INT 0
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 1
51257: PUSH
51258: LD_INT 1
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 0
51267: PUSH
51268: LD_INT 1
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 1
51277: NEG
51278: PUSH
51279: LD_INT 0
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 1
51288: NEG
51289: PUSH
51290: LD_INT 1
51292: NEG
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 1
51300: PUSH
51301: LD_INT 1
51303: NEG
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 1
51311: NEG
51312: PUSH
51313: LD_INT 1
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51331: LD_ADDR_VAR 0 38
51335: PUSH
51336: LD_INT 0
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 0
51348: PUSH
51349: LD_INT 1
51351: NEG
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 1
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 1
51369: PUSH
51370: LD_INT 1
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 0
51379: PUSH
51380: LD_INT 1
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 1
51389: NEG
51390: PUSH
51391: LD_INT 0
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 1
51400: NEG
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 2
51412: PUSH
51413: LD_INT 1
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 2
51422: NEG
51423: PUSH
51424: LD_INT 1
51426: NEG
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51443: LD_ADDR_VAR 0 39
51447: PUSH
51448: LD_INT 0
51450: PUSH
51451: LD_INT 0
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 0
51460: PUSH
51461: LD_INT 1
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 1
51471: PUSH
51472: LD_INT 0
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 1
51481: PUSH
51482: LD_INT 1
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 0
51491: PUSH
51492: LD_INT 1
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 1
51501: NEG
51502: PUSH
51503: LD_INT 0
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 1
51512: NEG
51513: PUSH
51514: LD_INT 1
51516: NEG
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 1
51524: NEG
51525: PUSH
51526: LD_INT 2
51528: NEG
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 1
51536: PUSH
51537: LD_INT 2
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51555: LD_ADDR_VAR 0 40
51559: PUSH
51560: LD_INT 0
51562: PUSH
51563: LD_INT 0
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 0
51572: PUSH
51573: LD_INT 1
51575: NEG
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 1
51583: PUSH
51584: LD_INT 0
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 1
51593: PUSH
51594: LD_INT 1
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 0
51603: PUSH
51604: LD_INT 1
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 1
51613: NEG
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 1
51624: NEG
51625: PUSH
51626: LD_INT 1
51628: NEG
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 1
51636: PUSH
51637: LD_INT 1
51639: NEG
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 1
51647: NEG
51648: PUSH
51649: LD_INT 1
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51667: LD_ADDR_VAR 0 41
51671: PUSH
51672: LD_INT 0
51674: PUSH
51675: LD_INT 0
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 0
51684: PUSH
51685: LD_INT 1
51687: NEG
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 1
51695: PUSH
51696: LD_INT 0
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 1
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 0
51715: PUSH
51716: LD_INT 1
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 1
51725: NEG
51726: PUSH
51727: LD_INT 0
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 1
51736: NEG
51737: PUSH
51738: LD_INT 1
51740: NEG
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 1
51748: NEG
51749: PUSH
51750: LD_INT 2
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: LD_INT 1
51763: NEG
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 2
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 2
51781: PUSH
51782: LD_INT 1
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 2
51791: PUSH
51792: LD_INT 2
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 1
51801: PUSH
51802: LD_INT 2
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 1
51811: NEG
51812: PUSH
51813: LD_INT 1
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 2
51822: NEG
51823: PUSH
51824: LD_INT 0
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 2
51833: NEG
51834: PUSH
51835: LD_INT 1
51837: NEG
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 2
51845: NEG
51846: PUSH
51847: LD_INT 2
51849: NEG
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 2
51857: NEG
51858: PUSH
51859: LD_INT 3
51861: NEG
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 2
51869: PUSH
51870: LD_INT 1
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 3
51880: PUSH
51881: LD_INT 0
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 3
51890: PUSH
51891: LD_INT 1
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 3
51900: PUSH
51901: LD_INT 2
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 3
51910: PUSH
51911: LD_INT 3
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 2
51920: PUSH
51921: LD_INT 3
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 2
51930: NEG
51931: PUSH
51932: LD_INT 1
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 3
51941: NEG
51942: PUSH
51943: LD_INT 0
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 3
51952: NEG
51953: PUSH
51954: LD_INT 1
51956: NEG
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 3
51964: NEG
51965: PUSH
51966: LD_INT 2
51968: NEG
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 3
51976: NEG
51977: PUSH
51978: LD_INT 3
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52017: LD_ADDR_VAR 0 42
52021: PUSH
52022: LD_INT 0
52024: PUSH
52025: LD_INT 0
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 0
52034: PUSH
52035: LD_INT 1
52037: NEG
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 1
52045: PUSH
52046: LD_INT 0
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 1
52055: PUSH
52056: LD_INT 1
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: LD_INT 1
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 1
52075: NEG
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 1
52086: NEG
52087: PUSH
52088: LD_INT 1
52090: NEG
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: LD_INT 2
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 0
52110: PUSH
52111: LD_INT 2
52113: NEG
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 1
52121: PUSH
52122: LD_INT 1
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 2
52132: PUSH
52133: LD_INT 1
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 2
52142: PUSH
52143: LD_INT 2
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 1
52152: PUSH
52153: LD_INT 2
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 0
52162: PUSH
52163: LD_INT 2
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 1
52172: NEG
52173: PUSH
52174: LD_INT 1
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 2
52183: NEG
52184: PUSH
52185: LD_INT 1
52187: NEG
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 2
52195: NEG
52196: PUSH
52197: LD_INT 2
52199: NEG
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 2
52207: NEG
52208: PUSH
52209: LD_INT 3
52211: NEG
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 1
52219: NEG
52220: PUSH
52221: LD_INT 3
52223: NEG
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: LD_INT 3
52234: NEG
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 1
52242: PUSH
52243: LD_INT 2
52245: NEG
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 3
52253: PUSH
52254: LD_INT 2
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 3
52263: PUSH
52264: LD_INT 3
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 2
52273: PUSH
52274: LD_INT 3
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 1
52283: PUSH
52284: LD_INT 3
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 0
52293: PUSH
52294: LD_INT 3
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 1
52303: NEG
52304: PUSH
52305: LD_INT 2
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 3
52314: NEG
52315: PUSH
52316: LD_INT 2
52318: NEG
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 3
52326: NEG
52327: PUSH
52328: LD_INT 3
52330: NEG
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52367: LD_ADDR_VAR 0 43
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: LD_INT 0
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 0
52384: PUSH
52385: LD_INT 1
52387: NEG
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: LD_INT 0
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 1
52405: PUSH
52406: LD_INT 1
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: LD_INT 1
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 1
52425: NEG
52426: PUSH
52427: LD_INT 0
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 1
52436: NEG
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 1
52448: NEG
52449: PUSH
52450: LD_INT 2
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 0
52460: PUSH
52461: LD_INT 2
52463: NEG
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 1
52471: PUSH
52472: LD_INT 1
52474: NEG
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 2
52482: PUSH
52483: LD_INT 0
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 2
52492: PUSH
52493: LD_INT 1
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: LD_INT 2
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 0
52512: PUSH
52513: LD_INT 2
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: NEG
52523: PUSH
52524: LD_INT 1
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 2
52533: NEG
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 2
52544: NEG
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 1
52556: NEG
52557: PUSH
52558: LD_INT 3
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 0
52568: PUSH
52569: LD_INT 3
52571: NEG
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 1
52579: PUSH
52580: LD_INT 2
52582: NEG
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 2
52590: PUSH
52591: LD_INT 1
52593: NEG
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 3
52601: PUSH
52602: LD_INT 0
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 3
52611: PUSH
52612: LD_INT 1
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 1
52621: PUSH
52622: LD_INT 3
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 0
52631: PUSH
52632: LD_INT 3
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 1
52641: NEG
52642: PUSH
52643: LD_INT 2
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 2
52652: NEG
52653: PUSH
52654: LD_INT 1
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 3
52663: NEG
52664: PUSH
52665: LD_INT 0
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 3
52674: NEG
52675: PUSH
52676: LD_INT 1
52678: NEG
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52715: LD_ADDR_VAR 0 44
52719: PUSH
52720: LD_INT 0
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 0
52732: PUSH
52733: LD_INT 1
52735: NEG
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: LD_INT 0
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 1
52753: PUSH
52754: LD_INT 1
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 0
52763: PUSH
52764: LD_INT 1
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 1
52773: NEG
52774: PUSH
52775: LD_INT 0
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: LD_INT 1
52788: NEG
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: NEG
52797: PUSH
52798: LD_INT 2
52800: NEG
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 1
52808: PUSH
52809: LD_INT 1
52811: NEG
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 2
52819: PUSH
52820: LD_INT 0
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 2
52829: PUSH
52830: LD_INT 1
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 2
52839: PUSH
52840: LD_INT 2
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 1
52849: PUSH
52850: LD_INT 2
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 1
52859: NEG
52860: PUSH
52861: LD_INT 1
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 2
52870: NEG
52871: PUSH
52872: LD_INT 0
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 2
52881: NEG
52882: PUSH
52883: LD_INT 1
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 2
52893: NEG
52894: PUSH
52895: LD_INT 2
52897: NEG
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 2
52905: NEG
52906: PUSH
52907: LD_INT 3
52909: NEG
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 2
52917: PUSH
52918: LD_INT 1
52920: NEG
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 3
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 3
52938: PUSH
52939: LD_INT 1
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 3
52948: PUSH
52949: LD_INT 2
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 3
52958: PUSH
52959: LD_INT 3
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 2
52968: PUSH
52969: LD_INT 3
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 2
52978: NEG
52979: PUSH
52980: LD_INT 1
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 3
52989: NEG
52990: PUSH
52991: LD_INT 0
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 3
53000: NEG
53001: PUSH
53002: LD_INT 1
53004: NEG
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 3
53012: NEG
53013: PUSH
53014: LD_INT 2
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 3
53024: NEG
53025: PUSH
53026: LD_INT 3
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53065: LD_ADDR_VAR 0 45
53069: PUSH
53070: LD_INT 0
53072: PUSH
53073: LD_INT 0
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 0
53082: PUSH
53083: LD_INT 1
53085: NEG
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 1
53093: PUSH
53094: LD_INT 0
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 1
53103: PUSH
53104: LD_INT 1
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 0
53113: PUSH
53114: LD_INT 1
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 1
53123: NEG
53124: PUSH
53125: LD_INT 0
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: NEG
53135: PUSH
53136: LD_INT 1
53138: NEG
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 1
53146: NEG
53147: PUSH
53148: LD_INT 2
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: LD_INT 2
53161: NEG
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 1
53169: PUSH
53170: LD_INT 1
53172: NEG
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 2
53180: PUSH
53181: LD_INT 1
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 2
53190: PUSH
53191: LD_INT 2
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 1
53200: PUSH
53201: LD_INT 2
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: LD_INT 2
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 1
53220: NEG
53221: PUSH
53222: LD_INT 1
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 2
53231: NEG
53232: PUSH
53233: LD_INT 1
53235: NEG
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 2
53243: NEG
53244: PUSH
53245: LD_INT 2
53247: NEG
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 2
53255: NEG
53256: PUSH
53257: LD_INT 3
53259: NEG
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 1
53267: NEG
53268: PUSH
53269: LD_INT 3
53271: NEG
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: LD_INT 3
53282: NEG
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 1
53290: PUSH
53291: LD_INT 2
53293: NEG
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 3
53301: PUSH
53302: LD_INT 2
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 3
53311: PUSH
53312: LD_INT 3
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 2
53321: PUSH
53322: LD_INT 3
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 1
53331: PUSH
53332: LD_INT 3
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 0
53341: PUSH
53342: LD_INT 3
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 1
53351: NEG
53352: PUSH
53353: LD_INT 2
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 3
53362: NEG
53363: PUSH
53364: LD_INT 2
53366: NEG
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 3
53374: NEG
53375: PUSH
53376: LD_INT 3
53378: NEG
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53415: LD_ADDR_VAR 0 46
53419: PUSH
53420: LD_INT 0
53422: PUSH
53423: LD_INT 0
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 0
53432: PUSH
53433: LD_INT 1
53435: NEG
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 1
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 1
53453: PUSH
53454: LD_INT 1
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 1
53473: NEG
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 1
53484: NEG
53485: PUSH
53486: LD_INT 1
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 1
53496: NEG
53497: PUSH
53498: LD_INT 2
53500: NEG
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: LD_INT 2
53511: NEG
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 1
53519: PUSH
53520: LD_INT 1
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 2
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 2
53540: PUSH
53541: LD_INT 1
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 1
53550: PUSH
53551: LD_INT 2
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 0
53560: PUSH
53561: LD_INT 2
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: NEG
53571: PUSH
53572: LD_INT 1
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 2
53581: NEG
53582: PUSH
53583: LD_INT 0
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 2
53592: NEG
53593: PUSH
53594: LD_INT 1
53596: NEG
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: NEG
53605: PUSH
53606: LD_INT 3
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: LD_INT 3
53619: NEG
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: LD_INT 2
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 2
53638: PUSH
53639: LD_INT 1
53641: NEG
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 3
53649: PUSH
53650: LD_INT 0
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 3
53659: PUSH
53660: LD_INT 1
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 1
53669: PUSH
53670: LD_INT 3
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: LD_INT 3
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 1
53689: NEG
53690: PUSH
53691: LD_INT 2
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 2
53700: NEG
53701: PUSH
53702: LD_INT 1
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 3
53711: NEG
53712: PUSH
53713: LD_INT 0
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 3
53722: NEG
53723: PUSH
53724: LD_INT 1
53726: NEG
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53763: LD_ADDR_VAR 0 47
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: LD_INT 0
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 0
53780: PUSH
53781: LD_INT 1
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 1
53791: PUSH
53792: LD_INT 0
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 1
53801: PUSH
53802: LD_INT 1
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 0
53811: PUSH
53812: LD_INT 1
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 1
53821: NEG
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 1
53832: NEG
53833: PUSH
53834: LD_INT 1
53836: NEG
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 1
53844: NEG
53845: PUSH
53846: LD_INT 2
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 0
53856: PUSH
53857: LD_INT 2
53859: NEG
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 1
53867: PUSH
53868: LD_INT 1
53870: NEG
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 2
53878: NEG
53879: PUSH
53880: LD_INT 1
53882: NEG
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 2
53890: NEG
53891: PUSH
53892: LD_INT 2
53894: NEG
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53914: LD_ADDR_VAR 0 48
53918: PUSH
53919: LD_INT 0
53921: PUSH
53922: LD_INT 0
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 0
53931: PUSH
53932: LD_INT 1
53934: NEG
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 1
53942: PUSH
53943: LD_INT 0
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 1
53952: PUSH
53953: LD_INT 1
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: LD_INT 1
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 1
53972: NEG
53973: PUSH
53974: LD_INT 0
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 1
53983: NEG
53984: PUSH
53985: LD_INT 1
53987: NEG
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 1
53995: NEG
53996: PUSH
53997: LD_INT 2
53999: NEG
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 0
54007: PUSH
54008: LD_INT 2
54010: NEG
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 1
54018: PUSH
54019: LD_INT 1
54021: NEG
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 2
54029: PUSH
54030: LD_INT 0
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 2
54039: PUSH
54040: LD_INT 1
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54061: LD_ADDR_VAR 0 49
54065: PUSH
54066: LD_INT 0
54068: PUSH
54069: LD_INT 0
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 0
54078: PUSH
54079: LD_INT 1
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 1
54089: PUSH
54090: LD_INT 0
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 1
54099: PUSH
54100: LD_INT 1
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 0
54109: PUSH
54110: LD_INT 1
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 1
54119: NEG
54120: PUSH
54121: LD_INT 0
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 1
54130: NEG
54131: PUSH
54132: LD_INT 1
54134: NEG
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 1
54142: PUSH
54143: LD_INT 1
54145: NEG
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 2
54153: PUSH
54154: LD_INT 0
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 2
54163: PUSH
54164: LD_INT 1
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 2
54173: PUSH
54174: LD_INT 2
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 1
54183: PUSH
54184: LD_INT 2
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54205: LD_ADDR_VAR 0 50
54209: PUSH
54210: LD_INT 0
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 0
54222: PUSH
54223: LD_INT 1
54225: NEG
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 1
54233: PUSH
54234: LD_INT 0
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 1
54243: PUSH
54244: LD_INT 1
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 0
54253: PUSH
54254: LD_INT 1
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 1
54263: NEG
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 1
54274: NEG
54275: PUSH
54276: LD_INT 1
54278: NEG
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 2
54286: PUSH
54287: LD_INT 1
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 2
54296: PUSH
54297: LD_INT 2
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 1
54306: PUSH
54307: LD_INT 2
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 0
54316: PUSH
54317: LD_INT 2
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 1
54326: NEG
54327: PUSH
54328: LD_INT 1
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54349: LD_ADDR_VAR 0 51
54353: PUSH
54354: LD_INT 0
54356: PUSH
54357: LD_INT 0
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 0
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 1
54387: PUSH
54388: LD_INT 1
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: LD_INT 1
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: NEG
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 1
54418: NEG
54419: PUSH
54420: LD_INT 1
54422: NEG
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 1
54430: PUSH
54431: LD_INT 2
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: LD_INT 2
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 1
54450: NEG
54451: PUSH
54452: LD_INT 1
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 2
54461: NEG
54462: PUSH
54463: LD_INT 0
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 2
54472: NEG
54473: PUSH
54474: LD_INT 1
54476: NEG
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54496: LD_ADDR_VAR 0 52
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: LD_INT 0
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 0
54513: PUSH
54514: LD_INT 1
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 1
54524: PUSH
54525: LD_INT 0
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 1
54534: PUSH
54535: LD_INT 1
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 0
54544: PUSH
54545: LD_INT 1
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 1
54554: NEG
54555: PUSH
54556: LD_INT 0
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 1
54565: NEG
54566: PUSH
54567: LD_INT 1
54569: NEG
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 1
54577: NEG
54578: PUSH
54579: LD_INT 2
54581: NEG
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 1
54589: NEG
54590: PUSH
54591: LD_INT 1
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 2
54600: NEG
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 2
54611: NEG
54612: PUSH
54613: LD_INT 1
54615: NEG
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 2
54623: NEG
54624: PUSH
54625: LD_INT 2
54627: NEG
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54647: LD_ADDR_VAR 0 53
54651: PUSH
54652: LD_INT 0
54654: PUSH
54655: LD_INT 0
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 0
54664: PUSH
54665: LD_INT 1
54667: NEG
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 1
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 1
54685: PUSH
54686: LD_INT 1
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 0
54695: PUSH
54696: LD_INT 1
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 1
54705: NEG
54706: PUSH
54707: LD_INT 0
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 1
54716: NEG
54717: PUSH
54718: LD_INT 1
54720: NEG
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 1
54728: NEG
54729: PUSH
54730: LD_INT 2
54732: NEG
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: LD_INT 2
54743: NEG
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 1
54751: PUSH
54752: LD_INT 1
54754: NEG
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 2
54762: PUSH
54763: LD_INT 0
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 2
54772: PUSH
54773: LD_INT 1
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 2
54782: PUSH
54783: LD_INT 2
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 1
54792: PUSH
54793: LD_INT 2
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 0
54802: PUSH
54803: LD_INT 2
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 1
54812: NEG
54813: PUSH
54814: LD_INT 1
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 2
54823: NEG
54824: PUSH
54825: LD_INT 0
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 2
54834: NEG
54835: PUSH
54836: LD_INT 1
54838: NEG
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 2
54846: NEG
54847: PUSH
54848: LD_INT 2
54850: NEG
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54877: LD_ADDR_VAR 0 54
54881: PUSH
54882: LD_INT 0
54884: PUSH
54885: LD_INT 0
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 0
54894: PUSH
54895: LD_INT 1
54897: NEG
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 1
54905: PUSH
54906: LD_INT 0
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 1
54915: PUSH
54916: LD_INT 1
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 0
54925: PUSH
54926: LD_INT 1
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 1
54935: NEG
54936: PUSH
54937: LD_INT 0
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 1
54946: NEG
54947: PUSH
54948: LD_INT 1
54950: NEG
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 1
54958: NEG
54959: PUSH
54960: LD_INT 2
54962: NEG
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: LD_INT 2
54973: NEG
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 1
54981: PUSH
54982: LD_INT 1
54984: NEG
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 2
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 2
55002: PUSH
55003: LD_INT 1
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 2
55012: PUSH
55013: LD_INT 2
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 1
55022: PUSH
55023: LD_INT 2
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 0
55032: PUSH
55033: LD_INT 2
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 1
55042: NEG
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 2
55053: NEG
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 2
55064: NEG
55065: PUSH
55066: LD_INT 1
55068: NEG
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 2
55076: NEG
55077: PUSH
55078: LD_INT 2
55080: NEG
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55107: LD_ADDR_VAR 0 55
55111: PUSH
55112: LD_INT 0
55114: PUSH
55115: LD_INT 0
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 0
55124: PUSH
55125: LD_INT 1
55127: NEG
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 1
55135: PUSH
55136: LD_INT 0
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 1
55145: PUSH
55146: LD_INT 1
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 0
55155: PUSH
55156: LD_INT 1
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 1
55165: NEG
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 1
55176: NEG
55177: PUSH
55178: LD_INT 1
55180: NEG
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 1
55188: NEG
55189: PUSH
55190: LD_INT 2
55192: NEG
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: LD_INT 2
55203: NEG
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 1
55211: PUSH
55212: LD_INT 1
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 2
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 2
55232: PUSH
55233: LD_INT 1
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 2
55242: PUSH
55243: LD_INT 2
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 1
55252: PUSH
55253: LD_INT 2
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 0
55262: PUSH
55263: LD_INT 2
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 1
55272: NEG
55273: PUSH
55274: LD_INT 1
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 2
55283: NEG
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 2
55294: NEG
55295: PUSH
55296: LD_INT 1
55298: NEG
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 2
55306: NEG
55307: PUSH
55308: LD_INT 2
55310: NEG
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55337: LD_ADDR_VAR 0 56
55341: PUSH
55342: LD_INT 0
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 0
55354: PUSH
55355: LD_INT 1
55357: NEG
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 1
55365: PUSH
55366: LD_INT 0
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: LD_INT 1
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 0
55385: PUSH
55386: LD_INT 1
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 1
55395: NEG
55396: PUSH
55397: LD_INT 0
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 1
55406: NEG
55407: PUSH
55408: LD_INT 1
55410: NEG
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 1
55418: NEG
55419: PUSH
55420: LD_INT 2
55422: NEG
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 0
55430: PUSH
55431: LD_INT 2
55433: NEG
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: LD_INT 1
55441: PUSH
55442: LD_INT 1
55444: NEG
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 2
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 2
55462: PUSH
55463: LD_INT 1
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 2
55472: PUSH
55473: LD_INT 2
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 1
55482: PUSH
55483: LD_INT 2
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 0
55492: PUSH
55493: LD_INT 2
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 1
55502: NEG
55503: PUSH
55504: LD_INT 1
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 2
55513: NEG
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 2
55524: NEG
55525: PUSH
55526: LD_INT 1
55528: NEG
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 2
55536: NEG
55537: PUSH
55538: LD_INT 2
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55567: LD_ADDR_VAR 0 57
55571: PUSH
55572: LD_INT 0
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 0
55584: PUSH
55585: LD_INT 1
55587: NEG
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 1
55595: PUSH
55596: LD_INT 0
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 1
55605: PUSH
55606: LD_INT 1
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 0
55615: PUSH
55616: LD_INT 1
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 1
55625: NEG
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 1
55636: NEG
55637: PUSH
55638: LD_INT 1
55640: NEG
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 1
55648: NEG
55649: PUSH
55650: LD_INT 2
55652: NEG
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 0
55660: PUSH
55661: LD_INT 2
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 1
55671: PUSH
55672: LD_INT 1
55674: NEG
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 2
55682: PUSH
55683: LD_INT 0
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 2
55692: PUSH
55693: LD_INT 1
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 2
55702: PUSH
55703: LD_INT 2
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 1
55712: PUSH
55713: LD_INT 2
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 0
55722: PUSH
55723: LD_INT 2
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 1
55732: NEG
55733: PUSH
55734: LD_INT 1
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 2
55743: NEG
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 2
55754: NEG
55755: PUSH
55756: LD_INT 1
55758: NEG
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 2
55766: NEG
55767: PUSH
55768: LD_INT 2
55770: NEG
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55797: LD_ADDR_VAR 0 58
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: LD_INT 0
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 0
55814: PUSH
55815: LD_INT 1
55817: NEG
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 1
55825: PUSH
55826: LD_INT 0
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 1
55835: PUSH
55836: LD_INT 1
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 0
55845: PUSH
55846: LD_INT 1
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 1
55855: NEG
55856: PUSH
55857: LD_INT 0
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 1
55866: NEG
55867: PUSH
55868: LD_INT 1
55870: NEG
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 1
55878: NEG
55879: PUSH
55880: LD_INT 2
55882: NEG
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 0
55890: PUSH
55891: LD_INT 2
55893: NEG
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 1
55901: PUSH
55902: LD_INT 1
55904: NEG
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 2
55912: PUSH
55913: LD_INT 0
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 2
55922: PUSH
55923: LD_INT 1
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 2
55932: PUSH
55933: LD_INT 2
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 1
55942: PUSH
55943: LD_INT 2
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 0
55952: PUSH
55953: LD_INT 2
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 1
55962: NEG
55963: PUSH
55964: LD_INT 1
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 2
55973: NEG
55974: PUSH
55975: LD_INT 0
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 2
55984: NEG
55985: PUSH
55986: LD_INT 1
55988: NEG
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 2
55996: NEG
55997: PUSH
55998: LD_INT 2
56000: NEG
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56027: LD_ADDR_VAR 0 59
56031: PUSH
56032: LD_INT 0
56034: PUSH
56035: LD_INT 0
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 0
56044: PUSH
56045: LD_INT 1
56047: NEG
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 1
56055: PUSH
56056: LD_INT 0
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 1
56065: PUSH
56066: LD_INT 1
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 0
56075: PUSH
56076: LD_INT 1
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 1
56085: NEG
56086: PUSH
56087: LD_INT 0
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 1
56096: NEG
56097: PUSH
56098: LD_INT 1
56100: NEG
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56115: LD_ADDR_VAR 0 60
56119: PUSH
56120: LD_INT 0
56122: PUSH
56123: LD_INT 0
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 0
56132: PUSH
56133: LD_INT 1
56135: NEG
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 1
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 1
56153: PUSH
56154: LD_INT 1
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 0
56163: PUSH
56164: LD_INT 1
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 1
56173: NEG
56174: PUSH
56175: LD_INT 0
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 1
56184: NEG
56185: PUSH
56186: LD_INT 1
56188: NEG
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56203: LD_ADDR_VAR 0 61
56207: PUSH
56208: LD_INT 0
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 0
56220: PUSH
56221: LD_INT 1
56223: NEG
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 1
56231: PUSH
56232: LD_INT 0
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 1
56241: PUSH
56242: LD_INT 1
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 0
56251: PUSH
56252: LD_INT 1
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 1
56261: NEG
56262: PUSH
56263: LD_INT 0
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 1
56272: NEG
56273: PUSH
56274: LD_INT 1
56276: NEG
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56291: LD_ADDR_VAR 0 62
56295: PUSH
56296: LD_INT 0
56298: PUSH
56299: LD_INT 0
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 0
56308: PUSH
56309: LD_INT 1
56311: NEG
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 1
56319: PUSH
56320: LD_INT 0
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 1
56329: PUSH
56330: LD_INT 1
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 0
56339: PUSH
56340: LD_INT 1
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 1
56349: NEG
56350: PUSH
56351: LD_INT 0
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 1
56360: NEG
56361: PUSH
56362: LD_INT 1
56364: NEG
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56379: LD_ADDR_VAR 0 63
56383: PUSH
56384: LD_INT 0
56386: PUSH
56387: LD_INT 0
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 0
56396: PUSH
56397: LD_INT 1
56399: NEG
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 1
56407: PUSH
56408: LD_INT 0
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 1
56417: PUSH
56418: LD_INT 1
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 0
56427: PUSH
56428: LD_INT 1
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 1
56437: NEG
56438: PUSH
56439: LD_INT 0
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 1
56448: NEG
56449: PUSH
56450: LD_INT 1
56452: NEG
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56467: LD_ADDR_VAR 0 64
56471: PUSH
56472: LD_INT 0
56474: PUSH
56475: LD_INT 0
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 0
56484: PUSH
56485: LD_INT 1
56487: NEG
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 1
56495: PUSH
56496: LD_INT 0
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 1
56505: PUSH
56506: LD_INT 1
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 0
56515: PUSH
56516: LD_INT 1
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 1
56525: NEG
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 1
56536: NEG
56537: PUSH
56538: LD_INT 1
56540: NEG
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: ST_TO_ADDR
// end ; 1 :
56555: GO 62452
56557: LD_INT 1
56559: DOUBLE
56560: EQUAL
56561: IFTRUE 56565
56563: GO 59188
56565: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56566: LD_ADDR_VAR 0 11
56570: PUSH
56571: LD_INT 1
56573: NEG
56574: PUSH
56575: LD_INT 3
56577: NEG
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 0
56585: PUSH
56586: LD_INT 3
56588: NEG
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 1
56596: PUSH
56597: LD_INT 2
56599: NEG
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: LIST
56609: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56610: LD_ADDR_VAR 0 12
56614: PUSH
56615: LD_INT 2
56617: PUSH
56618: LD_INT 1
56620: NEG
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 3
56628: PUSH
56629: LD_INT 0
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 3
56638: PUSH
56639: LD_INT 1
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: LIST
56650: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56651: LD_ADDR_VAR 0 13
56655: PUSH
56656: LD_INT 3
56658: PUSH
56659: LD_INT 2
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 3
56668: PUSH
56669: LD_INT 3
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 2
56678: PUSH
56679: LD_INT 3
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: LIST
56690: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56691: LD_ADDR_VAR 0 14
56695: PUSH
56696: LD_INT 1
56698: PUSH
56699: LD_INT 3
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 0
56708: PUSH
56709: LD_INT 3
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 1
56718: NEG
56719: PUSH
56720: LD_INT 2
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: LIST
56731: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56732: LD_ADDR_VAR 0 15
56736: PUSH
56737: LD_INT 2
56739: NEG
56740: PUSH
56741: LD_INT 1
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 3
56750: NEG
56751: PUSH
56752: LD_INT 0
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 3
56761: NEG
56762: PUSH
56763: LD_INT 1
56765: NEG
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: LIST
56775: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56776: LD_ADDR_VAR 0 16
56780: PUSH
56781: LD_INT 2
56783: NEG
56784: PUSH
56785: LD_INT 3
56787: NEG
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 3
56795: NEG
56796: PUSH
56797: LD_INT 2
56799: NEG
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 3
56807: NEG
56808: PUSH
56809: LD_INT 3
56811: NEG
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: LIST
56821: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56822: LD_ADDR_VAR 0 17
56826: PUSH
56827: LD_INT 1
56829: NEG
56830: PUSH
56831: LD_INT 3
56833: NEG
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 0
56841: PUSH
56842: LD_INT 3
56844: NEG
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 1
56852: PUSH
56853: LD_INT 2
56855: NEG
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: LIST
56865: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56866: LD_ADDR_VAR 0 18
56870: PUSH
56871: LD_INT 2
56873: PUSH
56874: LD_INT 1
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 3
56884: PUSH
56885: LD_INT 0
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 3
56894: PUSH
56895: LD_INT 1
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: LIST
56906: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56907: LD_ADDR_VAR 0 19
56911: PUSH
56912: LD_INT 3
56914: PUSH
56915: LD_INT 2
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 3
56924: PUSH
56925: LD_INT 3
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 2
56934: PUSH
56935: LD_INT 3
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: LIST
56946: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56947: LD_ADDR_VAR 0 20
56951: PUSH
56952: LD_INT 1
56954: PUSH
56955: LD_INT 3
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 0
56964: PUSH
56965: LD_INT 3
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 1
56974: NEG
56975: PUSH
56976: LD_INT 2
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: LIST
56987: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56988: LD_ADDR_VAR 0 21
56992: PUSH
56993: LD_INT 2
56995: NEG
56996: PUSH
56997: LD_INT 1
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 3
57006: NEG
57007: PUSH
57008: LD_INT 0
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 3
57017: NEG
57018: PUSH
57019: LD_INT 1
57021: NEG
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: LIST
57031: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57032: LD_ADDR_VAR 0 22
57036: PUSH
57037: LD_INT 2
57039: NEG
57040: PUSH
57041: LD_INT 3
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 3
57051: NEG
57052: PUSH
57053: LD_INT 2
57055: NEG
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 3
57063: NEG
57064: PUSH
57065: LD_INT 3
57067: NEG
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: LIST
57077: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57078: LD_ADDR_VAR 0 23
57082: PUSH
57083: LD_INT 0
57085: PUSH
57086: LD_INT 3
57088: NEG
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 1
57096: NEG
57097: PUSH
57098: LD_INT 4
57100: NEG
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 1
57108: PUSH
57109: LD_INT 3
57111: NEG
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: LIST
57121: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57122: LD_ADDR_VAR 0 24
57126: PUSH
57127: LD_INT 3
57129: PUSH
57130: LD_INT 0
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 3
57139: PUSH
57140: LD_INT 1
57142: NEG
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 4
57150: PUSH
57151: LD_INT 1
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: LIST
57162: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57163: LD_ADDR_VAR 0 25
57167: PUSH
57168: LD_INT 3
57170: PUSH
57171: LD_INT 3
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 4
57180: PUSH
57181: LD_INT 3
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 3
57190: PUSH
57191: LD_INT 4
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: LIST
57202: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57203: LD_ADDR_VAR 0 26
57207: PUSH
57208: LD_INT 0
57210: PUSH
57211: LD_INT 3
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 1
57220: PUSH
57221: LD_INT 4
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 1
57230: NEG
57231: PUSH
57232: LD_INT 3
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: LIST
57243: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57244: LD_ADDR_VAR 0 27
57248: PUSH
57249: LD_INT 3
57251: NEG
57252: PUSH
57253: LD_INT 0
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 3
57262: NEG
57263: PUSH
57264: LD_INT 1
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 4
57273: NEG
57274: PUSH
57275: LD_INT 1
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: LIST
57287: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57288: LD_ADDR_VAR 0 28
57292: PUSH
57293: LD_INT 3
57295: NEG
57296: PUSH
57297: LD_INT 3
57299: NEG
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 3
57307: NEG
57308: PUSH
57309: LD_INT 4
57311: NEG
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 4
57319: NEG
57320: PUSH
57321: LD_INT 3
57323: NEG
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: LIST
57333: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57334: LD_ADDR_VAR 0 29
57338: PUSH
57339: LD_INT 1
57341: NEG
57342: PUSH
57343: LD_INT 3
57345: NEG
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 0
57353: PUSH
57354: LD_INT 3
57356: NEG
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 1
57364: PUSH
57365: LD_INT 2
57367: NEG
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 1
57375: NEG
57376: PUSH
57377: LD_INT 4
57379: NEG
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 0
57387: PUSH
57388: LD_INT 4
57390: NEG
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 1
57398: PUSH
57399: LD_INT 3
57401: NEG
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 1
57409: NEG
57410: PUSH
57411: LD_INT 5
57413: NEG
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 0
57421: PUSH
57422: LD_INT 5
57424: NEG
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 1
57432: PUSH
57433: LD_INT 4
57435: NEG
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 1
57443: NEG
57444: PUSH
57445: LD_INT 6
57447: NEG
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 0
57455: PUSH
57456: LD_INT 6
57458: NEG
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 1
57466: PUSH
57467: LD_INT 5
57469: NEG
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57489: LD_ADDR_VAR 0 30
57493: PUSH
57494: LD_INT 2
57496: PUSH
57497: LD_INT 1
57499: NEG
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 3
57507: PUSH
57508: LD_INT 0
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 3
57517: PUSH
57518: LD_INT 1
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 3
57527: PUSH
57528: LD_INT 1
57530: NEG
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 4
57538: PUSH
57539: LD_INT 0
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 4
57548: PUSH
57549: LD_INT 1
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 4
57558: PUSH
57559: LD_INT 1
57561: NEG
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 5
57569: PUSH
57570: LD_INT 0
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 5
57579: PUSH
57580: LD_INT 1
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 5
57589: PUSH
57590: LD_INT 1
57592: NEG
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 6
57600: PUSH
57601: LD_INT 0
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 6
57610: PUSH
57611: LD_INT 1
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57632: LD_ADDR_VAR 0 31
57636: PUSH
57637: LD_INT 3
57639: PUSH
57640: LD_INT 2
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 3
57649: PUSH
57650: LD_INT 3
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 2
57659: PUSH
57660: LD_INT 3
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 4
57669: PUSH
57670: LD_INT 3
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 4
57679: PUSH
57680: LD_INT 4
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 3
57689: PUSH
57690: LD_INT 4
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 5
57699: PUSH
57700: LD_INT 4
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 5
57709: PUSH
57710: LD_INT 5
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 4
57719: PUSH
57720: LD_INT 5
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 6
57729: PUSH
57730: LD_INT 5
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 6
57739: PUSH
57740: LD_INT 6
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 5
57749: PUSH
57750: LD_INT 6
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57771: LD_ADDR_VAR 0 32
57775: PUSH
57776: LD_INT 1
57778: PUSH
57779: LD_INT 3
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 0
57788: PUSH
57789: LD_INT 3
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 1
57798: NEG
57799: PUSH
57800: LD_INT 2
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 1
57809: PUSH
57810: LD_INT 4
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: LD_INT 4
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 1
57829: NEG
57830: PUSH
57831: LD_INT 3
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 1
57840: PUSH
57841: LD_INT 5
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: LD_INT 5
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 1
57860: NEG
57861: PUSH
57862: LD_INT 4
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 1
57871: PUSH
57872: LD_INT 6
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 0
57881: PUSH
57882: LD_INT 6
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 1
57891: NEG
57892: PUSH
57893: LD_INT 5
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57914: LD_ADDR_VAR 0 33
57918: PUSH
57919: LD_INT 2
57921: NEG
57922: PUSH
57923: LD_INT 1
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 3
57932: NEG
57933: PUSH
57934: LD_INT 0
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 3
57943: NEG
57944: PUSH
57945: LD_INT 1
57947: NEG
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 3
57955: NEG
57956: PUSH
57957: LD_INT 1
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 4
57966: NEG
57967: PUSH
57968: LD_INT 0
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 4
57977: NEG
57978: PUSH
57979: LD_INT 1
57981: NEG
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 4
57989: NEG
57990: PUSH
57991: LD_INT 1
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 5
58000: NEG
58001: PUSH
58002: LD_INT 0
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 5
58011: NEG
58012: PUSH
58013: LD_INT 1
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 5
58023: NEG
58024: PUSH
58025: LD_INT 1
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 6
58034: NEG
58035: PUSH
58036: LD_INT 0
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 6
58045: NEG
58046: PUSH
58047: LD_INT 1
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58069: LD_ADDR_VAR 0 34
58073: PUSH
58074: LD_INT 2
58076: NEG
58077: PUSH
58078: LD_INT 3
58080: NEG
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 3
58088: NEG
58089: PUSH
58090: LD_INT 2
58092: NEG
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 3
58100: NEG
58101: PUSH
58102: LD_INT 3
58104: NEG
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 3
58112: NEG
58113: PUSH
58114: LD_INT 4
58116: NEG
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 4
58124: NEG
58125: PUSH
58126: LD_INT 3
58128: NEG
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 4
58136: NEG
58137: PUSH
58138: LD_INT 4
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 4
58148: NEG
58149: PUSH
58150: LD_INT 5
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 5
58160: NEG
58161: PUSH
58162: LD_INT 4
58164: NEG
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 5
58172: NEG
58173: PUSH
58174: LD_INT 5
58176: NEG
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 5
58184: NEG
58185: PUSH
58186: LD_INT 6
58188: NEG
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 6
58196: NEG
58197: PUSH
58198: LD_INT 5
58200: NEG
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 6
58208: NEG
58209: PUSH
58210: LD_INT 6
58212: NEG
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58232: LD_ADDR_VAR 0 41
58236: PUSH
58237: LD_INT 0
58239: PUSH
58240: LD_INT 2
58242: NEG
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 1
58250: NEG
58251: PUSH
58252: LD_INT 3
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 1
58262: PUSH
58263: LD_INT 2
58265: NEG
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: LIST
58275: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58276: LD_ADDR_VAR 0 42
58280: PUSH
58281: LD_INT 2
58283: PUSH
58284: LD_INT 0
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 2
58293: PUSH
58294: LD_INT 1
58296: NEG
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 3
58304: PUSH
58305: LD_INT 1
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: LIST
58316: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58317: LD_ADDR_VAR 0 43
58321: PUSH
58322: LD_INT 2
58324: PUSH
58325: LD_INT 2
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 3
58334: PUSH
58335: LD_INT 2
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 2
58344: PUSH
58345: LD_INT 3
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: LIST
58356: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58357: LD_ADDR_VAR 0 44
58361: PUSH
58362: LD_INT 0
58364: PUSH
58365: LD_INT 2
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 1
58374: PUSH
58375: LD_INT 3
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 1
58384: NEG
58385: PUSH
58386: LD_INT 2
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: LIST
58397: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58398: LD_ADDR_VAR 0 45
58402: PUSH
58403: LD_INT 2
58405: NEG
58406: PUSH
58407: LD_INT 0
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 2
58416: NEG
58417: PUSH
58418: LD_INT 1
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 3
58427: NEG
58428: PUSH
58429: LD_INT 1
58431: NEG
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: LIST
58441: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58442: LD_ADDR_VAR 0 46
58446: PUSH
58447: LD_INT 2
58449: NEG
58450: PUSH
58451: LD_INT 2
58453: NEG
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 2
58461: NEG
58462: PUSH
58463: LD_INT 3
58465: NEG
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 3
58473: NEG
58474: PUSH
58475: LD_INT 2
58477: NEG
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: LIST
58487: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58488: LD_ADDR_VAR 0 47
58492: PUSH
58493: LD_INT 2
58495: NEG
58496: PUSH
58497: LD_INT 3
58499: NEG
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 1
58507: NEG
58508: PUSH
58509: LD_INT 3
58511: NEG
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58521: LD_ADDR_VAR 0 48
58525: PUSH
58526: LD_INT 1
58528: PUSH
58529: LD_INT 2
58531: NEG
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 2
58539: PUSH
58540: LD_INT 1
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58552: LD_ADDR_VAR 0 49
58556: PUSH
58557: LD_INT 3
58559: PUSH
58560: LD_INT 1
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 3
58569: PUSH
58570: LD_INT 2
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58581: LD_ADDR_VAR 0 50
58585: PUSH
58586: LD_INT 2
58588: PUSH
58589: LD_INT 3
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 1
58598: PUSH
58599: LD_INT 3
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58610: LD_ADDR_VAR 0 51
58614: PUSH
58615: LD_INT 1
58617: NEG
58618: PUSH
58619: LD_INT 2
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 2
58628: NEG
58629: PUSH
58630: LD_INT 1
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58641: LD_ADDR_VAR 0 52
58645: PUSH
58646: LD_INT 3
58648: NEG
58649: PUSH
58650: LD_INT 1
58652: NEG
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 3
58660: NEG
58661: PUSH
58662: LD_INT 2
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58674: LD_ADDR_VAR 0 53
58678: PUSH
58679: LD_INT 1
58681: NEG
58682: PUSH
58683: LD_INT 3
58685: NEG
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 0
58693: PUSH
58694: LD_INT 3
58696: NEG
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 1
58704: PUSH
58705: LD_INT 2
58707: NEG
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: LIST
58717: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58718: LD_ADDR_VAR 0 54
58722: PUSH
58723: LD_INT 2
58725: PUSH
58726: LD_INT 1
58728: NEG
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 3
58736: PUSH
58737: LD_INT 0
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 3
58746: PUSH
58747: LD_INT 1
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: LIST
58758: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58759: LD_ADDR_VAR 0 55
58763: PUSH
58764: LD_INT 3
58766: PUSH
58767: LD_INT 2
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 3
58776: PUSH
58777: LD_INT 3
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 2
58786: PUSH
58787: LD_INT 3
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: LIST
58798: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58799: LD_ADDR_VAR 0 56
58803: PUSH
58804: LD_INT 1
58806: PUSH
58807: LD_INT 3
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 0
58816: PUSH
58817: LD_INT 3
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 1
58826: NEG
58827: PUSH
58828: LD_INT 2
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: LIST
58839: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58840: LD_ADDR_VAR 0 57
58844: PUSH
58845: LD_INT 2
58847: NEG
58848: PUSH
58849: LD_INT 1
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 3
58858: NEG
58859: PUSH
58860: LD_INT 0
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 3
58869: NEG
58870: PUSH
58871: LD_INT 1
58873: NEG
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: LIST
58883: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58884: LD_ADDR_VAR 0 58
58888: PUSH
58889: LD_INT 2
58891: NEG
58892: PUSH
58893: LD_INT 3
58895: NEG
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 3
58903: NEG
58904: PUSH
58905: LD_INT 2
58907: NEG
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 3
58915: NEG
58916: PUSH
58917: LD_INT 3
58919: NEG
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: LIST
58929: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58930: LD_ADDR_VAR 0 59
58934: PUSH
58935: LD_INT 1
58937: NEG
58938: PUSH
58939: LD_INT 2
58941: NEG
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 0
58949: PUSH
58950: LD_INT 2
58952: NEG
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 1
58960: PUSH
58961: LD_INT 1
58963: NEG
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: LIST
58973: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58974: LD_ADDR_VAR 0 60
58978: PUSH
58979: LD_INT 1
58981: PUSH
58982: LD_INT 1
58984: NEG
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 2
58992: PUSH
58993: LD_INT 0
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 2
59002: PUSH
59003: LD_INT 1
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: LIST
59014: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59015: LD_ADDR_VAR 0 61
59019: PUSH
59020: LD_INT 2
59022: PUSH
59023: LD_INT 1
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 2
59032: PUSH
59033: LD_INT 2
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 1
59042: PUSH
59043: LD_INT 2
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: LIST
59054: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59055: LD_ADDR_VAR 0 62
59059: PUSH
59060: LD_INT 1
59062: PUSH
59063: LD_INT 2
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 0
59072: PUSH
59073: LD_INT 2
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 1
59082: NEG
59083: PUSH
59084: LD_INT 1
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: LIST
59095: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59096: LD_ADDR_VAR 0 63
59100: PUSH
59101: LD_INT 1
59103: NEG
59104: PUSH
59105: LD_INT 1
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 2
59114: NEG
59115: PUSH
59116: LD_INT 0
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 2
59125: NEG
59126: PUSH
59127: LD_INT 1
59129: NEG
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: LIST
59139: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59140: LD_ADDR_VAR 0 64
59144: PUSH
59145: LD_INT 1
59147: NEG
59148: PUSH
59149: LD_INT 2
59151: NEG
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 2
59159: NEG
59160: PUSH
59161: LD_INT 1
59163: NEG
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 2
59171: NEG
59172: PUSH
59173: LD_INT 2
59175: NEG
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: LIST
59185: ST_TO_ADDR
// end ; 2 :
59186: GO 62452
59188: LD_INT 2
59190: DOUBLE
59191: EQUAL
59192: IFTRUE 59196
59194: GO 62451
59196: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59197: LD_ADDR_VAR 0 29
59201: PUSH
59202: LD_INT 4
59204: PUSH
59205: LD_INT 0
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 4
59214: PUSH
59215: LD_INT 1
59217: NEG
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 5
59225: PUSH
59226: LD_INT 0
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 5
59235: PUSH
59236: LD_INT 1
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 4
59245: PUSH
59246: LD_INT 1
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 3
59255: PUSH
59256: LD_INT 0
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 3
59265: PUSH
59266: LD_INT 1
59268: NEG
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 3
59276: PUSH
59277: LD_INT 2
59279: NEG
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 5
59287: PUSH
59288: LD_INT 2
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 3
59297: PUSH
59298: LD_INT 3
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 3
59307: PUSH
59308: LD_INT 2
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 4
59317: PUSH
59318: LD_INT 3
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 4
59327: PUSH
59328: LD_INT 4
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 3
59337: PUSH
59338: LD_INT 4
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 2
59347: PUSH
59348: LD_INT 3
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 2
59357: PUSH
59358: LD_INT 2
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 4
59367: PUSH
59368: LD_INT 2
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 2
59377: PUSH
59378: LD_INT 4
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 0
59387: PUSH
59388: LD_INT 4
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 0
59397: PUSH
59398: LD_INT 3
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 1
59407: PUSH
59408: LD_INT 4
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 1
59417: PUSH
59418: LD_INT 5
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 0
59427: PUSH
59428: LD_INT 5
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 1
59437: NEG
59438: PUSH
59439: LD_INT 4
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 1
59448: NEG
59449: PUSH
59450: LD_INT 3
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 2
59459: PUSH
59460: LD_INT 5
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: PUSH
59467: LD_INT 2
59469: NEG
59470: PUSH
59471: LD_INT 3
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 3
59480: NEG
59481: PUSH
59482: LD_INT 0
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 3
59491: NEG
59492: PUSH
59493: LD_INT 1
59495: NEG
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 2
59503: NEG
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 2
59514: NEG
59515: PUSH
59516: LD_INT 1
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 3
59525: NEG
59526: PUSH
59527: LD_INT 1
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 4
59536: NEG
59537: PUSH
59538: LD_INT 0
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 4
59547: NEG
59548: PUSH
59549: LD_INT 1
59551: NEG
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 4
59559: NEG
59560: PUSH
59561: LD_INT 2
59563: NEG
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 2
59571: NEG
59572: PUSH
59573: LD_INT 2
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 4
59582: NEG
59583: PUSH
59584: LD_INT 4
59586: NEG
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 4
59594: NEG
59595: PUSH
59596: LD_INT 5
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 3
59606: NEG
59607: PUSH
59608: LD_INT 4
59610: NEG
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 3
59618: NEG
59619: PUSH
59620: LD_INT 3
59622: NEG
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 4
59630: NEG
59631: PUSH
59632: LD_INT 3
59634: NEG
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 5
59642: NEG
59643: PUSH
59644: LD_INT 4
59646: NEG
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 5
59654: NEG
59655: PUSH
59656: LD_INT 5
59658: NEG
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 3
59666: NEG
59667: PUSH
59668: LD_INT 5
59670: NEG
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 5
59678: NEG
59679: PUSH
59680: LD_INT 3
59682: NEG
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59735: LD_ADDR_VAR 0 30
59739: PUSH
59740: LD_INT 4
59742: PUSH
59743: LD_INT 4
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 4
59752: PUSH
59753: LD_INT 3
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 5
59762: PUSH
59763: LD_INT 4
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 5
59772: PUSH
59773: LD_INT 5
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 4
59782: PUSH
59783: LD_INT 5
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 3
59792: PUSH
59793: LD_INT 4
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 3
59802: PUSH
59803: LD_INT 3
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 5
59812: PUSH
59813: LD_INT 3
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 3
59822: PUSH
59823: LD_INT 5
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 0
59832: PUSH
59833: LD_INT 3
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 0
59842: PUSH
59843: LD_INT 2
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 1
59852: PUSH
59853: LD_INT 3
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 1
59862: PUSH
59863: LD_INT 4
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 0
59872: PUSH
59873: LD_INT 4
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 1
59882: NEG
59883: PUSH
59884: LD_INT 3
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 1
59893: NEG
59894: PUSH
59895: LD_INT 2
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 2
59904: PUSH
59905: LD_INT 4
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 2
59914: NEG
59915: PUSH
59916: LD_INT 2
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 4
59925: NEG
59926: PUSH
59927: LD_INT 0
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 4
59936: NEG
59937: PUSH
59938: LD_INT 1
59940: NEG
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 3
59948: NEG
59949: PUSH
59950: LD_INT 0
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 3
59959: NEG
59960: PUSH
59961: LD_INT 1
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 4
59970: NEG
59971: PUSH
59972: LD_INT 1
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 5
59981: NEG
59982: PUSH
59983: LD_INT 0
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 5
59992: NEG
59993: PUSH
59994: LD_INT 1
59996: NEG
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 5
60004: NEG
60005: PUSH
60006: LD_INT 2
60008: NEG
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 3
60016: NEG
60017: PUSH
60018: LD_INT 2
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 3
60027: NEG
60028: PUSH
60029: LD_INT 3
60031: NEG
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 3
60039: NEG
60040: PUSH
60041: LD_INT 4
60043: NEG
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 2
60051: NEG
60052: PUSH
60053: LD_INT 3
60055: NEG
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 2
60063: NEG
60064: PUSH
60065: LD_INT 2
60067: NEG
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 3
60075: NEG
60076: PUSH
60077: LD_INT 2
60079: NEG
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 4
60087: NEG
60088: PUSH
60089: LD_INT 3
60091: NEG
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 4
60099: NEG
60100: PUSH
60101: LD_INT 4
60103: NEG
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 2
60111: NEG
60112: PUSH
60113: LD_INT 4
60115: NEG
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 4
60123: NEG
60124: PUSH
60125: LD_INT 2
60127: NEG
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 0
60135: PUSH
60136: LD_INT 4
60138: NEG
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 0
60146: PUSH
60147: LD_INT 5
60149: NEG
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 1
60157: PUSH
60158: LD_INT 4
60160: NEG
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 1
60168: PUSH
60169: LD_INT 3
60171: NEG
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 0
60179: PUSH
60180: LD_INT 3
60182: NEG
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 1
60190: NEG
60191: PUSH
60192: LD_INT 4
60194: NEG
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 1
60202: NEG
60203: PUSH
60204: LD_INT 5
60206: NEG
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 2
60214: PUSH
60215: LD_INT 3
60217: NEG
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 2
60225: NEG
60226: PUSH
60227: LD_INT 5
60229: NEG
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60282: LD_ADDR_VAR 0 31
60286: PUSH
60287: LD_INT 0
60289: PUSH
60290: LD_INT 4
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 0
60299: PUSH
60300: LD_INT 3
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 1
60309: PUSH
60310: LD_INT 4
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 1
60319: PUSH
60320: LD_INT 5
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 0
60329: PUSH
60330: LD_INT 5
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 1
60339: NEG
60340: PUSH
60341: LD_INT 4
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 1
60350: NEG
60351: PUSH
60352: LD_INT 3
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 2
60361: PUSH
60362: LD_INT 5
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 2
60371: NEG
60372: PUSH
60373: LD_INT 3
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 3
60382: NEG
60383: PUSH
60384: LD_INT 0
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 3
60393: NEG
60394: PUSH
60395: LD_INT 1
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 2
60405: NEG
60406: PUSH
60407: LD_INT 0
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 2
60416: NEG
60417: PUSH
60418: LD_INT 1
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 3
60427: NEG
60428: PUSH
60429: LD_INT 1
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 4
60438: NEG
60439: PUSH
60440: LD_INT 0
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 4
60449: NEG
60450: PUSH
60451: LD_INT 1
60453: NEG
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 4
60461: NEG
60462: PUSH
60463: LD_INT 2
60465: NEG
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 2
60473: NEG
60474: PUSH
60475: LD_INT 2
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 4
60484: NEG
60485: PUSH
60486: LD_INT 4
60488: NEG
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 4
60496: NEG
60497: PUSH
60498: LD_INT 5
60500: NEG
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 3
60508: NEG
60509: PUSH
60510: LD_INT 4
60512: NEG
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 3
60520: NEG
60521: PUSH
60522: LD_INT 3
60524: NEG
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 4
60532: NEG
60533: PUSH
60534: LD_INT 3
60536: NEG
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 5
60544: NEG
60545: PUSH
60546: LD_INT 4
60548: NEG
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 5
60556: NEG
60557: PUSH
60558: LD_INT 5
60560: NEG
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 3
60568: NEG
60569: PUSH
60570: LD_INT 5
60572: NEG
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 5
60580: NEG
60581: PUSH
60582: LD_INT 3
60584: NEG
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 0
60592: PUSH
60593: LD_INT 3
60595: NEG
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 0
60603: PUSH
60604: LD_INT 4
60606: NEG
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 1
60614: PUSH
60615: LD_INT 3
60617: NEG
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 1
60625: PUSH
60626: LD_INT 2
60628: NEG
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 0
60636: PUSH
60637: LD_INT 2
60639: NEG
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 1
60647: NEG
60648: PUSH
60649: LD_INT 3
60651: NEG
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 1
60659: NEG
60660: PUSH
60661: LD_INT 4
60663: NEG
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 2
60671: PUSH
60672: LD_INT 2
60674: NEG
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 2
60682: NEG
60683: PUSH
60684: LD_INT 4
60686: NEG
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 4
60694: PUSH
60695: LD_INT 0
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 4
60704: PUSH
60705: LD_INT 1
60707: NEG
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 5
60715: PUSH
60716: LD_INT 0
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 5
60725: PUSH
60726: LD_INT 1
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 4
60735: PUSH
60736: LD_INT 1
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 3
60745: PUSH
60746: LD_INT 0
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 3
60755: PUSH
60756: LD_INT 1
60758: NEG
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 3
60766: PUSH
60767: LD_INT 2
60769: NEG
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 5
60777: PUSH
60778: LD_INT 2
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60832: LD_ADDR_VAR 0 32
60836: PUSH
60837: LD_INT 4
60839: NEG
60840: PUSH
60841: LD_INT 0
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 4
60850: NEG
60851: PUSH
60852: LD_INT 1
60854: NEG
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 3
60862: NEG
60863: PUSH
60864: LD_INT 0
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 3
60873: NEG
60874: PUSH
60875: LD_INT 1
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 4
60884: NEG
60885: PUSH
60886: LD_INT 1
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 5
60895: NEG
60896: PUSH
60897: LD_INT 0
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 5
60906: NEG
60907: PUSH
60908: LD_INT 1
60910: NEG
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 5
60918: NEG
60919: PUSH
60920: LD_INT 2
60922: NEG
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 3
60930: NEG
60931: PUSH
60932: LD_INT 2
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 3
60941: NEG
60942: PUSH
60943: LD_INT 3
60945: NEG
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 3
60953: NEG
60954: PUSH
60955: LD_INT 4
60957: NEG
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 2
60965: NEG
60966: PUSH
60967: LD_INT 3
60969: NEG
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 2
60977: NEG
60978: PUSH
60979: LD_INT 2
60981: NEG
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 3
60989: NEG
60990: PUSH
60991: LD_INT 2
60993: NEG
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 4
61001: NEG
61002: PUSH
61003: LD_INT 3
61005: NEG
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 4
61013: NEG
61014: PUSH
61015: LD_INT 4
61017: NEG
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 2
61025: NEG
61026: PUSH
61027: LD_INT 4
61029: NEG
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 4
61037: NEG
61038: PUSH
61039: LD_INT 2
61041: NEG
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 0
61049: PUSH
61050: LD_INT 4
61052: NEG
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 0
61060: PUSH
61061: LD_INT 5
61063: NEG
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 1
61071: PUSH
61072: LD_INT 4
61074: NEG
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 1
61082: PUSH
61083: LD_INT 3
61085: NEG
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 0
61093: PUSH
61094: LD_INT 3
61096: NEG
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 1
61104: NEG
61105: PUSH
61106: LD_INT 4
61108: NEG
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 1
61116: NEG
61117: PUSH
61118: LD_INT 5
61120: NEG
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 2
61128: PUSH
61129: LD_INT 3
61131: NEG
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 2
61139: NEG
61140: PUSH
61141: LD_INT 5
61143: NEG
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 3
61151: PUSH
61152: LD_INT 0
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 3
61161: PUSH
61162: LD_INT 1
61164: NEG
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 4
61172: PUSH
61173: LD_INT 0
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 4
61182: PUSH
61183: LD_INT 1
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 3
61192: PUSH
61193: LD_INT 1
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 2
61202: PUSH
61203: LD_INT 0
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 2
61212: PUSH
61213: LD_INT 1
61215: NEG
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 2
61223: PUSH
61224: LD_INT 2
61226: NEG
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 4
61234: PUSH
61235: LD_INT 2
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 4
61244: PUSH
61245: LD_INT 4
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 4
61254: PUSH
61255: LD_INT 3
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 5
61264: PUSH
61265: LD_INT 4
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 5
61274: PUSH
61275: LD_INT 5
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 4
61284: PUSH
61285: LD_INT 5
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 3
61294: PUSH
61295: LD_INT 4
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 3
61304: PUSH
61305: LD_INT 3
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 5
61314: PUSH
61315: LD_INT 3
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 3
61324: PUSH
61325: LD_INT 5
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61379: LD_ADDR_VAR 0 33
61383: PUSH
61384: LD_INT 4
61386: NEG
61387: PUSH
61388: LD_INT 4
61390: NEG
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 4
61398: NEG
61399: PUSH
61400: LD_INT 5
61402: NEG
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 3
61410: NEG
61411: PUSH
61412: LD_INT 4
61414: NEG
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 3
61422: NEG
61423: PUSH
61424: LD_INT 3
61426: NEG
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 4
61434: NEG
61435: PUSH
61436: LD_INT 3
61438: NEG
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 5
61446: NEG
61447: PUSH
61448: LD_INT 4
61450: NEG
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 5
61458: NEG
61459: PUSH
61460: LD_INT 5
61462: NEG
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 3
61470: NEG
61471: PUSH
61472: LD_INT 5
61474: NEG
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 5
61482: NEG
61483: PUSH
61484: LD_INT 3
61486: NEG
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 0
61494: PUSH
61495: LD_INT 3
61497: NEG
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 0
61505: PUSH
61506: LD_INT 4
61508: NEG
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 1
61516: PUSH
61517: LD_INT 3
61519: NEG
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 1
61527: PUSH
61528: LD_INT 2
61530: NEG
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 0
61538: PUSH
61539: LD_INT 2
61541: NEG
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 1
61549: NEG
61550: PUSH
61551: LD_INT 3
61553: NEG
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 1
61561: NEG
61562: PUSH
61563: LD_INT 4
61565: NEG
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 2
61573: PUSH
61574: LD_INT 2
61576: NEG
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 2
61584: NEG
61585: PUSH
61586: LD_INT 4
61588: NEG
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 4
61596: PUSH
61597: LD_INT 0
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 4
61606: PUSH
61607: LD_INT 1
61609: NEG
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 5
61617: PUSH
61618: LD_INT 0
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 5
61627: PUSH
61628: LD_INT 1
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 4
61637: PUSH
61638: LD_INT 1
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 3
61647: PUSH
61648: LD_INT 0
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 3
61657: PUSH
61658: LD_INT 1
61660: NEG
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 3
61668: PUSH
61669: LD_INT 2
61671: NEG
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 5
61679: PUSH
61680: LD_INT 2
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 3
61689: PUSH
61690: LD_INT 3
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 3
61699: PUSH
61700: LD_INT 2
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 4
61709: PUSH
61710: LD_INT 3
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 4
61719: PUSH
61720: LD_INT 4
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 3
61729: PUSH
61730: LD_INT 4
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 2
61739: PUSH
61740: LD_INT 3
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 2
61749: PUSH
61750: LD_INT 2
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 4
61759: PUSH
61760: LD_INT 2
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 2
61769: PUSH
61770: LD_INT 4
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 0
61779: PUSH
61780: LD_INT 4
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: PUSH
61787: LD_INT 0
61789: PUSH
61790: LD_INT 3
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 1
61799: PUSH
61800: LD_INT 4
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 1
61809: PUSH
61810: LD_INT 5
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 0
61819: PUSH
61820: LD_INT 5
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 1
61829: NEG
61830: PUSH
61831: LD_INT 4
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 1
61840: NEG
61841: PUSH
61842: LD_INT 3
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 2
61851: PUSH
61852: LD_INT 5
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 2
61861: NEG
61862: PUSH
61863: LD_INT 3
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61917: LD_ADDR_VAR 0 34
61921: PUSH
61922: LD_INT 0
61924: PUSH
61925: LD_INT 4
61927: NEG
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 0
61935: PUSH
61936: LD_INT 5
61938: NEG
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 1
61946: PUSH
61947: LD_INT 4
61949: NEG
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 1
61957: PUSH
61958: LD_INT 3
61960: NEG
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 0
61968: PUSH
61969: LD_INT 3
61971: NEG
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 1
61979: NEG
61980: PUSH
61981: LD_INT 4
61983: NEG
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 1
61991: NEG
61992: PUSH
61993: LD_INT 5
61995: NEG
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 2
62003: PUSH
62004: LD_INT 3
62006: NEG
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 2
62014: NEG
62015: PUSH
62016: LD_INT 5
62018: NEG
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 3
62026: PUSH
62027: LD_INT 0
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 3
62036: PUSH
62037: LD_INT 1
62039: NEG
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 4
62047: PUSH
62048: LD_INT 0
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 4
62057: PUSH
62058: LD_INT 1
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 3
62067: PUSH
62068: LD_INT 1
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 2
62077: PUSH
62078: LD_INT 0
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 2
62087: PUSH
62088: LD_INT 1
62090: NEG
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 2
62098: PUSH
62099: LD_INT 2
62101: NEG
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 4
62109: PUSH
62110: LD_INT 2
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 4
62119: PUSH
62120: LD_INT 4
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 4
62129: PUSH
62130: LD_INT 3
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 5
62139: PUSH
62140: LD_INT 4
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 5
62149: PUSH
62150: LD_INT 5
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 4
62159: PUSH
62160: LD_INT 5
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 3
62169: PUSH
62170: LD_INT 4
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 3
62179: PUSH
62180: LD_INT 3
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 5
62189: PUSH
62190: LD_INT 3
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 3
62199: PUSH
62200: LD_INT 5
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 0
62209: PUSH
62210: LD_INT 3
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 0
62219: PUSH
62220: LD_INT 2
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 1
62229: PUSH
62230: LD_INT 3
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 1
62239: PUSH
62240: LD_INT 4
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 0
62249: PUSH
62250: LD_INT 4
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 1
62259: NEG
62260: PUSH
62261: LD_INT 3
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 1
62270: NEG
62271: PUSH
62272: LD_INT 2
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 2
62281: PUSH
62282: LD_INT 4
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 2
62291: NEG
62292: PUSH
62293: LD_INT 2
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 4
62302: NEG
62303: PUSH
62304: LD_INT 0
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 4
62313: NEG
62314: PUSH
62315: LD_INT 1
62317: NEG
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 3
62325: NEG
62326: PUSH
62327: LD_INT 0
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 3
62336: NEG
62337: PUSH
62338: LD_INT 1
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 4
62347: NEG
62348: PUSH
62349: LD_INT 1
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 5
62358: NEG
62359: PUSH
62360: LD_INT 0
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 5
62369: NEG
62370: PUSH
62371: LD_INT 1
62373: NEG
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 5
62381: NEG
62382: PUSH
62383: LD_INT 2
62385: NEG
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 3
62393: NEG
62394: PUSH
62395: LD_INT 2
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: ST_TO_ADDR
// end ; end ;
62449: GO 62452
62451: POP
// case btype of b_depot , b_warehouse :
62452: LD_VAR 0 1
62456: PUSH
62457: LD_INT 0
62459: DOUBLE
62460: EQUAL
62461: IFTRUE 62471
62463: LD_INT 1
62465: DOUBLE
62466: EQUAL
62467: IFTRUE 62471
62469: GO 62672
62471: POP
// case nation of nation_american :
62472: LD_VAR 0 5
62476: PUSH
62477: LD_INT 1
62479: DOUBLE
62480: EQUAL
62481: IFTRUE 62485
62483: GO 62541
62485: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62486: LD_ADDR_VAR 0 9
62490: PUSH
62491: LD_VAR 0 11
62495: PUSH
62496: LD_VAR 0 12
62500: PUSH
62501: LD_VAR 0 13
62505: PUSH
62506: LD_VAR 0 14
62510: PUSH
62511: LD_VAR 0 15
62515: PUSH
62516: LD_VAR 0 16
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: PUSH
62529: LD_VAR 0 4
62533: PUSH
62534: LD_INT 1
62536: PLUS
62537: ARRAY
62538: ST_TO_ADDR
62539: GO 62670
62541: LD_INT 2
62543: DOUBLE
62544: EQUAL
62545: IFTRUE 62549
62547: GO 62605
62549: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62550: LD_ADDR_VAR 0 9
62554: PUSH
62555: LD_VAR 0 17
62559: PUSH
62560: LD_VAR 0 18
62564: PUSH
62565: LD_VAR 0 19
62569: PUSH
62570: LD_VAR 0 20
62574: PUSH
62575: LD_VAR 0 21
62579: PUSH
62580: LD_VAR 0 22
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: PUSH
62593: LD_VAR 0 4
62597: PUSH
62598: LD_INT 1
62600: PLUS
62601: ARRAY
62602: ST_TO_ADDR
62603: GO 62670
62605: LD_INT 3
62607: DOUBLE
62608: EQUAL
62609: IFTRUE 62613
62611: GO 62669
62613: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62614: LD_ADDR_VAR 0 9
62618: PUSH
62619: LD_VAR 0 23
62623: PUSH
62624: LD_VAR 0 24
62628: PUSH
62629: LD_VAR 0 25
62633: PUSH
62634: LD_VAR 0 26
62638: PUSH
62639: LD_VAR 0 27
62643: PUSH
62644: LD_VAR 0 28
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: PUSH
62657: LD_VAR 0 4
62661: PUSH
62662: LD_INT 1
62664: PLUS
62665: ARRAY
62666: ST_TO_ADDR
62667: GO 62670
62669: POP
62670: GO 63225
62672: LD_INT 2
62674: DOUBLE
62675: EQUAL
62676: IFTRUE 62686
62678: LD_INT 3
62680: DOUBLE
62681: EQUAL
62682: IFTRUE 62686
62684: GO 62742
62686: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62687: LD_ADDR_VAR 0 9
62691: PUSH
62692: LD_VAR 0 29
62696: PUSH
62697: LD_VAR 0 30
62701: PUSH
62702: LD_VAR 0 31
62706: PUSH
62707: LD_VAR 0 32
62711: PUSH
62712: LD_VAR 0 33
62716: PUSH
62717: LD_VAR 0 34
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: PUSH
62730: LD_VAR 0 4
62734: PUSH
62735: LD_INT 1
62737: PLUS
62738: ARRAY
62739: ST_TO_ADDR
62740: GO 63225
62742: LD_INT 16
62744: DOUBLE
62745: EQUAL
62746: IFTRUE 62804
62748: LD_INT 17
62750: DOUBLE
62751: EQUAL
62752: IFTRUE 62804
62754: LD_INT 18
62756: DOUBLE
62757: EQUAL
62758: IFTRUE 62804
62760: LD_INT 19
62762: DOUBLE
62763: EQUAL
62764: IFTRUE 62804
62766: LD_INT 22
62768: DOUBLE
62769: EQUAL
62770: IFTRUE 62804
62772: LD_INT 20
62774: DOUBLE
62775: EQUAL
62776: IFTRUE 62804
62778: LD_INT 21
62780: DOUBLE
62781: EQUAL
62782: IFTRUE 62804
62784: LD_INT 23
62786: DOUBLE
62787: EQUAL
62788: IFTRUE 62804
62790: LD_INT 24
62792: DOUBLE
62793: EQUAL
62794: IFTRUE 62804
62796: LD_INT 25
62798: DOUBLE
62799: EQUAL
62800: IFTRUE 62804
62802: GO 62860
62804: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62805: LD_ADDR_VAR 0 9
62809: PUSH
62810: LD_VAR 0 35
62814: PUSH
62815: LD_VAR 0 36
62819: PUSH
62820: LD_VAR 0 37
62824: PUSH
62825: LD_VAR 0 38
62829: PUSH
62830: LD_VAR 0 39
62834: PUSH
62835: LD_VAR 0 40
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: PUSH
62848: LD_VAR 0 4
62852: PUSH
62853: LD_INT 1
62855: PLUS
62856: ARRAY
62857: ST_TO_ADDR
62858: GO 63225
62860: LD_INT 6
62862: DOUBLE
62863: EQUAL
62864: IFTRUE 62916
62866: LD_INT 7
62868: DOUBLE
62869: EQUAL
62870: IFTRUE 62916
62872: LD_INT 8
62874: DOUBLE
62875: EQUAL
62876: IFTRUE 62916
62878: LD_INT 13
62880: DOUBLE
62881: EQUAL
62882: IFTRUE 62916
62884: LD_INT 12
62886: DOUBLE
62887: EQUAL
62888: IFTRUE 62916
62890: LD_INT 15
62892: DOUBLE
62893: EQUAL
62894: IFTRUE 62916
62896: LD_INT 11
62898: DOUBLE
62899: EQUAL
62900: IFTRUE 62916
62902: LD_INT 14
62904: DOUBLE
62905: EQUAL
62906: IFTRUE 62916
62908: LD_INT 10
62910: DOUBLE
62911: EQUAL
62912: IFTRUE 62916
62914: GO 62972
62916: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62917: LD_ADDR_VAR 0 9
62921: PUSH
62922: LD_VAR 0 41
62926: PUSH
62927: LD_VAR 0 42
62931: PUSH
62932: LD_VAR 0 43
62936: PUSH
62937: LD_VAR 0 44
62941: PUSH
62942: LD_VAR 0 45
62946: PUSH
62947: LD_VAR 0 46
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: PUSH
62960: LD_VAR 0 4
62964: PUSH
62965: LD_INT 1
62967: PLUS
62968: ARRAY
62969: ST_TO_ADDR
62970: GO 63225
62972: LD_INT 36
62974: DOUBLE
62975: EQUAL
62976: IFTRUE 62980
62978: GO 63036
62980: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62981: LD_ADDR_VAR 0 9
62985: PUSH
62986: LD_VAR 0 47
62990: PUSH
62991: LD_VAR 0 48
62995: PUSH
62996: LD_VAR 0 49
63000: PUSH
63001: LD_VAR 0 50
63005: PUSH
63006: LD_VAR 0 51
63010: PUSH
63011: LD_VAR 0 52
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: PUSH
63024: LD_VAR 0 4
63028: PUSH
63029: LD_INT 1
63031: PLUS
63032: ARRAY
63033: ST_TO_ADDR
63034: GO 63225
63036: LD_INT 4
63038: DOUBLE
63039: EQUAL
63040: IFTRUE 63062
63042: LD_INT 5
63044: DOUBLE
63045: EQUAL
63046: IFTRUE 63062
63048: LD_INT 34
63050: DOUBLE
63051: EQUAL
63052: IFTRUE 63062
63054: LD_INT 37
63056: DOUBLE
63057: EQUAL
63058: IFTRUE 63062
63060: GO 63118
63062: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63063: LD_ADDR_VAR 0 9
63067: PUSH
63068: LD_VAR 0 53
63072: PUSH
63073: LD_VAR 0 54
63077: PUSH
63078: LD_VAR 0 55
63082: PUSH
63083: LD_VAR 0 56
63087: PUSH
63088: LD_VAR 0 57
63092: PUSH
63093: LD_VAR 0 58
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: PUSH
63106: LD_VAR 0 4
63110: PUSH
63111: LD_INT 1
63113: PLUS
63114: ARRAY
63115: ST_TO_ADDR
63116: GO 63225
63118: LD_INT 31
63120: DOUBLE
63121: EQUAL
63122: IFTRUE 63168
63124: LD_INT 32
63126: DOUBLE
63127: EQUAL
63128: IFTRUE 63168
63130: LD_INT 33
63132: DOUBLE
63133: EQUAL
63134: IFTRUE 63168
63136: LD_INT 27
63138: DOUBLE
63139: EQUAL
63140: IFTRUE 63168
63142: LD_INT 26
63144: DOUBLE
63145: EQUAL
63146: IFTRUE 63168
63148: LD_INT 28
63150: DOUBLE
63151: EQUAL
63152: IFTRUE 63168
63154: LD_INT 29
63156: DOUBLE
63157: EQUAL
63158: IFTRUE 63168
63160: LD_INT 30
63162: DOUBLE
63163: EQUAL
63164: IFTRUE 63168
63166: GO 63224
63168: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63169: LD_ADDR_VAR 0 9
63173: PUSH
63174: LD_VAR 0 59
63178: PUSH
63179: LD_VAR 0 60
63183: PUSH
63184: LD_VAR 0 61
63188: PUSH
63189: LD_VAR 0 62
63193: PUSH
63194: LD_VAR 0 63
63198: PUSH
63199: LD_VAR 0 64
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: LIST
63211: PUSH
63212: LD_VAR 0 4
63216: PUSH
63217: LD_INT 1
63219: PLUS
63220: ARRAY
63221: ST_TO_ADDR
63222: GO 63225
63224: POP
// temp_list2 = [ ] ;
63225: LD_ADDR_VAR 0 10
63229: PUSH
63230: EMPTY
63231: ST_TO_ADDR
// for i in temp_list do
63232: LD_ADDR_VAR 0 8
63236: PUSH
63237: LD_VAR 0 9
63241: PUSH
63242: FOR_IN
63243: IFFALSE 63295
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63245: LD_ADDR_VAR 0 10
63249: PUSH
63250: LD_VAR 0 10
63254: PUSH
63255: LD_VAR 0 8
63259: PUSH
63260: LD_INT 1
63262: ARRAY
63263: PUSH
63264: LD_VAR 0 2
63268: PLUS
63269: PUSH
63270: LD_VAR 0 8
63274: PUSH
63275: LD_INT 2
63277: ARRAY
63278: PUSH
63279: LD_VAR 0 3
63283: PLUS
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: EMPTY
63290: LIST
63291: ADD
63292: ST_TO_ADDR
63293: GO 63242
63295: POP
63296: POP
// result = temp_list2 ;
63297: LD_ADDR_VAR 0 7
63301: PUSH
63302: LD_VAR 0 10
63306: ST_TO_ADDR
// end ;
63307: LD_VAR 0 7
63311: RET
// export function EnemyInRange ( unit , dist ) ; begin
63312: LD_INT 0
63314: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63315: LD_ADDR_VAR 0 3
63319: PUSH
63320: LD_VAR 0 1
63324: PPUSH
63325: CALL_OW 255
63329: PPUSH
63330: LD_VAR 0 1
63334: PPUSH
63335: CALL_OW 250
63339: PPUSH
63340: LD_VAR 0 1
63344: PPUSH
63345: CALL_OW 251
63349: PPUSH
63350: LD_VAR 0 2
63354: PPUSH
63355: CALL 36708 0 4
63359: PUSH
63360: LD_INT 4
63362: ARRAY
63363: ST_TO_ADDR
// end ;
63364: LD_VAR 0 3
63368: RET
// export function PlayerSeeMe ( unit ) ; begin
63369: LD_INT 0
63371: PPUSH
// result := See ( your_side , unit ) ;
63372: LD_ADDR_VAR 0 2
63376: PUSH
63377: LD_OWVAR 2
63381: PPUSH
63382: LD_VAR 0 1
63386: PPUSH
63387: CALL_OW 292
63391: ST_TO_ADDR
// end ;
63392: LD_VAR 0 2
63396: RET
// export function ReverseDir ( unit ) ; begin
63397: LD_INT 0
63399: PPUSH
// if not unit then
63400: LD_VAR 0 1
63404: NOT
63405: IFFALSE 63409
// exit ;
63407: GO 63432
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63409: LD_ADDR_VAR 0 2
63413: PUSH
63414: LD_VAR 0 1
63418: PPUSH
63419: CALL_OW 254
63423: PUSH
63424: LD_INT 3
63426: PLUS
63427: PUSH
63428: LD_INT 6
63430: MOD
63431: ST_TO_ADDR
// end ;
63432: LD_VAR 0 2
63436: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
63437: LD_INT 0
63439: PPUSH
63440: PPUSH
63441: PPUSH
63442: PPUSH
63443: PPUSH
// if not hexes then
63444: LD_VAR 0 2
63448: NOT
63449: IFFALSE 63453
// exit ;
63451: GO 63601
// dist := 9999 ;
63453: LD_ADDR_VAR 0 5
63457: PUSH
63458: LD_INT 9999
63460: ST_TO_ADDR
// for i = 1 to hexes do
63461: LD_ADDR_VAR 0 4
63465: PUSH
63466: DOUBLE
63467: LD_INT 1
63469: DEC
63470: ST_TO_ADDR
63471: LD_VAR 0 2
63475: PUSH
63476: FOR_TO
63477: IFFALSE 63589
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
63479: LD_VAR 0 1
63483: PPUSH
63484: LD_VAR 0 2
63488: PUSH
63489: LD_VAR 0 4
63493: ARRAY
63494: PUSH
63495: LD_INT 1
63497: ARRAY
63498: PPUSH
63499: LD_VAR 0 2
63503: PUSH
63504: LD_VAR 0 4
63508: ARRAY
63509: PUSH
63510: LD_INT 2
63512: ARRAY
63513: PPUSH
63514: CALL_OW 297
63518: PUSH
63519: LD_VAR 0 5
63523: LESS
63524: IFFALSE 63587
// begin hex := hexes [ i ] ;
63526: LD_ADDR_VAR 0 7
63530: PUSH
63531: LD_VAR 0 2
63535: PUSH
63536: LD_VAR 0 4
63540: ARRAY
63541: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63542: LD_ADDR_VAR 0 5
63546: PUSH
63547: LD_VAR 0 1
63551: PPUSH
63552: LD_VAR 0 2
63556: PUSH
63557: LD_VAR 0 4
63561: ARRAY
63562: PUSH
63563: LD_INT 1
63565: ARRAY
63566: PPUSH
63567: LD_VAR 0 2
63571: PUSH
63572: LD_VAR 0 4
63576: ARRAY
63577: PUSH
63578: LD_INT 2
63580: ARRAY
63581: PPUSH
63582: CALL_OW 297
63586: ST_TO_ADDR
// end ; end ;
63587: GO 63476
63589: POP
63590: POP
// result := hex ;
63591: LD_ADDR_VAR 0 3
63595: PUSH
63596: LD_VAR 0 7
63600: ST_TO_ADDR
// end ;
63601: LD_VAR 0 3
63605: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63606: LD_INT 0
63608: PPUSH
63609: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63610: LD_VAR 0 1
63614: NOT
63615: PUSH
63616: LD_VAR 0 1
63620: PUSH
63621: LD_INT 21
63623: PUSH
63624: LD_INT 2
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 23
63633: PUSH
63634: LD_INT 2
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PPUSH
63645: CALL_OW 69
63649: IN
63650: NOT
63651: OR
63652: IFFALSE 63656
// exit ;
63654: GO 63703
// for i = 1 to 3 do
63656: LD_ADDR_VAR 0 3
63660: PUSH
63661: DOUBLE
63662: LD_INT 1
63664: DEC
63665: ST_TO_ADDR
63666: LD_INT 3
63668: PUSH
63669: FOR_TO
63670: IFFALSE 63701
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63672: LD_VAR 0 1
63676: PPUSH
63677: CALL_OW 250
63681: PPUSH
63682: LD_VAR 0 1
63686: PPUSH
63687: CALL_OW 251
63691: PPUSH
63692: LD_INT 1
63694: PPUSH
63695: CALL_OW 453
63699: GO 63669
63701: POP
63702: POP
// end ;
63703: LD_VAR 0 2
63707: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63708: LD_INT 0
63710: PPUSH
63711: PPUSH
63712: PPUSH
63713: PPUSH
63714: PPUSH
63715: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63716: LD_VAR 0 1
63720: NOT
63721: PUSH
63722: LD_VAR 0 2
63726: NOT
63727: OR
63728: PUSH
63729: LD_VAR 0 1
63733: PPUSH
63734: CALL_OW 314
63738: OR
63739: IFFALSE 63743
// exit ;
63741: GO 64184
// x := GetX ( enemy_unit ) ;
63743: LD_ADDR_VAR 0 7
63747: PUSH
63748: LD_VAR 0 2
63752: PPUSH
63753: CALL_OW 250
63757: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63758: LD_ADDR_VAR 0 8
63762: PUSH
63763: LD_VAR 0 2
63767: PPUSH
63768: CALL_OW 251
63772: ST_TO_ADDR
// if not x or not y then
63773: LD_VAR 0 7
63777: NOT
63778: PUSH
63779: LD_VAR 0 8
63783: NOT
63784: OR
63785: IFFALSE 63789
// exit ;
63787: GO 64184
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63789: LD_ADDR_VAR 0 6
63793: PUSH
63794: LD_VAR 0 7
63798: PPUSH
63799: LD_INT 0
63801: PPUSH
63802: LD_INT 4
63804: PPUSH
63805: CALL_OW 272
63809: PUSH
63810: LD_VAR 0 8
63814: PPUSH
63815: LD_INT 0
63817: PPUSH
63818: LD_INT 4
63820: PPUSH
63821: CALL_OW 273
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_VAR 0 7
63834: PPUSH
63835: LD_INT 1
63837: PPUSH
63838: LD_INT 4
63840: PPUSH
63841: CALL_OW 272
63845: PUSH
63846: LD_VAR 0 8
63850: PPUSH
63851: LD_INT 1
63853: PPUSH
63854: LD_INT 4
63856: PPUSH
63857: CALL_OW 273
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_VAR 0 7
63870: PPUSH
63871: LD_INT 2
63873: PPUSH
63874: LD_INT 4
63876: PPUSH
63877: CALL_OW 272
63881: PUSH
63882: LD_VAR 0 8
63886: PPUSH
63887: LD_INT 2
63889: PPUSH
63890: LD_INT 4
63892: PPUSH
63893: CALL_OW 273
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: LD_VAR 0 7
63906: PPUSH
63907: LD_INT 3
63909: PPUSH
63910: LD_INT 4
63912: PPUSH
63913: CALL_OW 272
63917: PUSH
63918: LD_VAR 0 8
63922: PPUSH
63923: LD_INT 3
63925: PPUSH
63926: LD_INT 4
63928: PPUSH
63929: CALL_OW 273
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_VAR 0 7
63942: PPUSH
63943: LD_INT 4
63945: PPUSH
63946: LD_INT 4
63948: PPUSH
63949: CALL_OW 272
63953: PUSH
63954: LD_VAR 0 8
63958: PPUSH
63959: LD_INT 4
63961: PPUSH
63962: LD_INT 4
63964: PPUSH
63965: CALL_OW 273
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_VAR 0 7
63978: PPUSH
63979: LD_INT 5
63981: PPUSH
63982: LD_INT 4
63984: PPUSH
63985: CALL_OW 272
63989: PUSH
63990: LD_VAR 0 8
63994: PPUSH
63995: LD_INT 5
63997: PPUSH
63998: LD_INT 4
64000: PPUSH
64001: CALL_OW 273
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: ST_TO_ADDR
// for i = tmp downto 1 do
64018: LD_ADDR_VAR 0 4
64022: PUSH
64023: DOUBLE
64024: LD_VAR 0 6
64028: INC
64029: ST_TO_ADDR
64030: LD_INT 1
64032: PUSH
64033: FOR_DOWNTO
64034: IFFALSE 64135
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64036: LD_VAR 0 6
64040: PUSH
64041: LD_VAR 0 4
64045: ARRAY
64046: PUSH
64047: LD_INT 1
64049: ARRAY
64050: PPUSH
64051: LD_VAR 0 6
64055: PUSH
64056: LD_VAR 0 4
64060: ARRAY
64061: PUSH
64062: LD_INT 2
64064: ARRAY
64065: PPUSH
64066: CALL_OW 488
64070: NOT
64071: PUSH
64072: LD_VAR 0 6
64076: PUSH
64077: LD_VAR 0 4
64081: ARRAY
64082: PUSH
64083: LD_INT 1
64085: ARRAY
64086: PPUSH
64087: LD_VAR 0 6
64091: PUSH
64092: LD_VAR 0 4
64096: ARRAY
64097: PUSH
64098: LD_INT 2
64100: ARRAY
64101: PPUSH
64102: CALL_OW 428
64106: PUSH
64107: LD_INT 0
64109: NONEQUAL
64110: OR
64111: IFFALSE 64133
// tmp := Delete ( tmp , i ) ;
64113: LD_ADDR_VAR 0 6
64117: PUSH
64118: LD_VAR 0 6
64122: PPUSH
64123: LD_VAR 0 4
64127: PPUSH
64128: CALL_OW 3
64132: ST_TO_ADDR
64133: GO 64033
64135: POP
64136: POP
// j := GetClosestHex ( unit , tmp ) ;
64137: LD_ADDR_VAR 0 5
64141: PUSH
64142: LD_VAR 0 1
64146: PPUSH
64147: LD_VAR 0 6
64151: PPUSH
64152: CALL 63437 0 2
64156: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64157: LD_VAR 0 1
64161: PPUSH
64162: LD_VAR 0 5
64166: PUSH
64167: LD_INT 1
64169: ARRAY
64170: PPUSH
64171: LD_VAR 0 5
64175: PUSH
64176: LD_INT 2
64178: ARRAY
64179: PPUSH
64180: CALL_OW 111
// end ;
64184: LD_VAR 0 3
64188: RET
// export function PrepareApemanSoldier ( ) ; begin
64189: LD_INT 0
64191: PPUSH
// uc_nation := 0 ;
64192: LD_ADDR_OWVAR 21
64196: PUSH
64197: LD_INT 0
64199: ST_TO_ADDR
// hc_sex := sex_male ;
64200: LD_ADDR_OWVAR 27
64204: PUSH
64205: LD_INT 1
64207: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64208: LD_ADDR_OWVAR 28
64212: PUSH
64213: LD_INT 15
64215: ST_TO_ADDR
// hc_gallery :=  ;
64216: LD_ADDR_OWVAR 33
64220: PUSH
64221: LD_STRING 
64223: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64224: LD_ADDR_OWVAR 31
64228: PUSH
64229: LD_INT 0
64231: PPUSH
64232: LD_INT 3
64234: PPUSH
64235: CALL_OW 12
64239: PUSH
64240: LD_INT 0
64242: PPUSH
64243: LD_INT 3
64245: PPUSH
64246: CALL_OW 12
64250: PUSH
64251: LD_INT 0
64253: PUSH
64254: LD_INT 0
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: LIST
64261: LIST
64262: ST_TO_ADDR
// end ;
64263: LD_VAR 0 1
64267: RET
// export function PrepareApemanEngineer ( ) ; begin
64268: LD_INT 0
64270: PPUSH
// uc_nation := 0 ;
64271: LD_ADDR_OWVAR 21
64275: PUSH
64276: LD_INT 0
64278: ST_TO_ADDR
// hc_sex := sex_male ;
64279: LD_ADDR_OWVAR 27
64283: PUSH
64284: LD_INT 1
64286: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64287: LD_ADDR_OWVAR 28
64291: PUSH
64292: LD_INT 16
64294: ST_TO_ADDR
// hc_gallery :=  ;
64295: LD_ADDR_OWVAR 33
64299: PUSH
64300: LD_STRING 
64302: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64303: LD_ADDR_OWVAR 31
64307: PUSH
64308: LD_INT 0
64310: PPUSH
64311: LD_INT 3
64313: PPUSH
64314: CALL_OW 12
64318: PUSH
64319: LD_INT 0
64321: PPUSH
64322: LD_INT 3
64324: PPUSH
64325: CALL_OW 12
64329: PUSH
64330: LD_INT 0
64332: PUSH
64333: LD_INT 0
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: LIST
64340: LIST
64341: ST_TO_ADDR
// end ;
64342: LD_VAR 0 1
64346: RET
// export function PrepareApeman ( agressivity ) ; begin
64347: LD_INT 0
64349: PPUSH
// uc_side := 0 ;
64350: LD_ADDR_OWVAR 20
64354: PUSH
64355: LD_INT 0
64357: ST_TO_ADDR
// uc_nation := 0 ;
64358: LD_ADDR_OWVAR 21
64362: PUSH
64363: LD_INT 0
64365: ST_TO_ADDR
// hc_sex := sex_male ;
64366: LD_ADDR_OWVAR 27
64370: PUSH
64371: LD_INT 1
64373: ST_TO_ADDR
// hc_class := class_apeman ;
64374: LD_ADDR_OWVAR 28
64378: PUSH
64379: LD_INT 12
64381: ST_TO_ADDR
// hc_gallery :=  ;
64382: LD_ADDR_OWVAR 33
64386: PUSH
64387: LD_STRING 
64389: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64390: LD_ADDR_OWVAR 35
64394: PUSH
64395: LD_VAR 0 1
64399: NEG
64400: PPUSH
64401: LD_VAR 0 1
64405: PPUSH
64406: CALL_OW 12
64410: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64411: LD_ADDR_OWVAR 31
64415: PUSH
64416: LD_INT 0
64418: PPUSH
64419: LD_INT 3
64421: PPUSH
64422: CALL_OW 12
64426: PUSH
64427: LD_INT 0
64429: PPUSH
64430: LD_INT 3
64432: PPUSH
64433: CALL_OW 12
64437: PUSH
64438: LD_INT 0
64440: PUSH
64441: LD_INT 0
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: ST_TO_ADDR
// end ;
64450: LD_VAR 0 2
64454: RET
// export function PrepareTiger ( agressivity ) ; begin
64455: LD_INT 0
64457: PPUSH
// uc_side := 0 ;
64458: LD_ADDR_OWVAR 20
64462: PUSH
64463: LD_INT 0
64465: ST_TO_ADDR
// uc_nation := 0 ;
64466: LD_ADDR_OWVAR 21
64470: PUSH
64471: LD_INT 0
64473: ST_TO_ADDR
// hc_class := class_tiger ;
64474: LD_ADDR_OWVAR 28
64478: PUSH
64479: LD_INT 14
64481: ST_TO_ADDR
// hc_gallery :=  ;
64482: LD_ADDR_OWVAR 33
64486: PUSH
64487: LD_STRING 
64489: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64490: LD_ADDR_OWVAR 35
64494: PUSH
64495: LD_VAR 0 1
64499: NEG
64500: PPUSH
64501: LD_VAR 0 1
64505: PPUSH
64506: CALL_OW 12
64510: ST_TO_ADDR
// end ;
64511: LD_VAR 0 2
64515: RET
// export function PrepareEnchidna ( ) ; begin
64516: LD_INT 0
64518: PPUSH
// uc_side := 0 ;
64519: LD_ADDR_OWVAR 20
64523: PUSH
64524: LD_INT 0
64526: ST_TO_ADDR
// uc_nation := 0 ;
64527: LD_ADDR_OWVAR 21
64531: PUSH
64532: LD_INT 0
64534: ST_TO_ADDR
// hc_class := class_baggie ;
64535: LD_ADDR_OWVAR 28
64539: PUSH
64540: LD_INT 13
64542: ST_TO_ADDR
// hc_gallery :=  ;
64543: LD_ADDR_OWVAR 33
64547: PUSH
64548: LD_STRING 
64550: ST_TO_ADDR
// end ;
64551: LD_VAR 0 1
64555: RET
// export function PrepareFrog ( ) ; begin
64556: LD_INT 0
64558: PPUSH
// uc_side := 0 ;
64559: LD_ADDR_OWVAR 20
64563: PUSH
64564: LD_INT 0
64566: ST_TO_ADDR
// uc_nation := 0 ;
64567: LD_ADDR_OWVAR 21
64571: PUSH
64572: LD_INT 0
64574: ST_TO_ADDR
// hc_class := class_frog ;
64575: LD_ADDR_OWVAR 28
64579: PUSH
64580: LD_INT 19
64582: ST_TO_ADDR
// hc_gallery :=  ;
64583: LD_ADDR_OWVAR 33
64587: PUSH
64588: LD_STRING 
64590: ST_TO_ADDR
// end ;
64591: LD_VAR 0 1
64595: RET
// export function PrepareFish ( ) ; begin
64596: LD_INT 0
64598: PPUSH
// uc_side := 0 ;
64599: LD_ADDR_OWVAR 20
64603: PUSH
64604: LD_INT 0
64606: ST_TO_ADDR
// uc_nation := 0 ;
64607: LD_ADDR_OWVAR 21
64611: PUSH
64612: LD_INT 0
64614: ST_TO_ADDR
// hc_class := class_fish ;
64615: LD_ADDR_OWVAR 28
64619: PUSH
64620: LD_INT 20
64622: ST_TO_ADDR
// hc_gallery :=  ;
64623: LD_ADDR_OWVAR 33
64627: PUSH
64628: LD_STRING 
64630: ST_TO_ADDR
// end ;
64631: LD_VAR 0 1
64635: RET
// export function PrepareBird ( ) ; begin
64636: LD_INT 0
64638: PPUSH
// uc_side := 0 ;
64639: LD_ADDR_OWVAR 20
64643: PUSH
64644: LD_INT 0
64646: ST_TO_ADDR
// uc_nation := 0 ;
64647: LD_ADDR_OWVAR 21
64651: PUSH
64652: LD_INT 0
64654: ST_TO_ADDR
// hc_class := class_phororhacos ;
64655: LD_ADDR_OWVAR 28
64659: PUSH
64660: LD_INT 18
64662: ST_TO_ADDR
// hc_gallery :=  ;
64663: LD_ADDR_OWVAR 33
64667: PUSH
64668: LD_STRING 
64670: ST_TO_ADDR
// end ;
64671: LD_VAR 0 1
64675: RET
// export function PrepareHorse ( ) ; begin
64676: LD_INT 0
64678: PPUSH
// uc_side := 0 ;
64679: LD_ADDR_OWVAR 20
64683: PUSH
64684: LD_INT 0
64686: ST_TO_ADDR
// uc_nation := 0 ;
64687: LD_ADDR_OWVAR 21
64691: PUSH
64692: LD_INT 0
64694: ST_TO_ADDR
// hc_class := class_horse ;
64695: LD_ADDR_OWVAR 28
64699: PUSH
64700: LD_INT 21
64702: ST_TO_ADDR
// hc_gallery :=  ;
64703: LD_ADDR_OWVAR 33
64707: PUSH
64708: LD_STRING 
64710: ST_TO_ADDR
// end ;
64711: LD_VAR 0 1
64715: RET
// export function PrepareMastodont ( ) ; begin
64716: LD_INT 0
64718: PPUSH
// uc_side := 0 ;
64719: LD_ADDR_OWVAR 20
64723: PUSH
64724: LD_INT 0
64726: ST_TO_ADDR
// uc_nation := 0 ;
64727: LD_ADDR_OWVAR 21
64731: PUSH
64732: LD_INT 0
64734: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64735: LD_ADDR_OWVAR 37
64739: PUSH
64740: LD_INT 31
64742: ST_TO_ADDR
// vc_control := control_rider ;
64743: LD_ADDR_OWVAR 38
64747: PUSH
64748: LD_INT 4
64750: ST_TO_ADDR
// end ;
64751: LD_VAR 0 1
64755: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64756: LD_INT 0
64758: PPUSH
64759: PPUSH
64760: PPUSH
// uc_side = 0 ;
64761: LD_ADDR_OWVAR 20
64765: PUSH
64766: LD_INT 0
64768: ST_TO_ADDR
// uc_nation = 0 ;
64769: LD_ADDR_OWVAR 21
64773: PUSH
64774: LD_INT 0
64776: ST_TO_ADDR
// InitHc_All ( ) ;
64777: CALL_OW 584
// InitVc ;
64781: CALL_OW 20
// if mastodonts then
64785: LD_VAR 0 6
64789: IFFALSE 64856
// for i = 1 to mastodonts do
64791: LD_ADDR_VAR 0 11
64795: PUSH
64796: DOUBLE
64797: LD_INT 1
64799: DEC
64800: ST_TO_ADDR
64801: LD_VAR 0 6
64805: PUSH
64806: FOR_TO
64807: IFFALSE 64854
// begin vc_chassis := 31 ;
64809: LD_ADDR_OWVAR 37
64813: PUSH
64814: LD_INT 31
64816: ST_TO_ADDR
// vc_control := control_rider ;
64817: LD_ADDR_OWVAR 38
64821: PUSH
64822: LD_INT 4
64824: ST_TO_ADDR
// animal := CreateVehicle ;
64825: LD_ADDR_VAR 0 12
64829: PUSH
64830: CALL_OW 45
64834: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64835: LD_VAR 0 12
64839: PPUSH
64840: LD_VAR 0 8
64844: PPUSH
64845: LD_INT 0
64847: PPUSH
64848: CALL 66991 0 3
// end ;
64852: GO 64806
64854: POP
64855: POP
// if horses then
64856: LD_VAR 0 5
64860: IFFALSE 64927
// for i = 1 to horses do
64862: LD_ADDR_VAR 0 11
64866: PUSH
64867: DOUBLE
64868: LD_INT 1
64870: DEC
64871: ST_TO_ADDR
64872: LD_VAR 0 5
64876: PUSH
64877: FOR_TO
64878: IFFALSE 64925
// begin hc_class := 21 ;
64880: LD_ADDR_OWVAR 28
64884: PUSH
64885: LD_INT 21
64887: ST_TO_ADDR
// hc_gallery :=  ;
64888: LD_ADDR_OWVAR 33
64892: PUSH
64893: LD_STRING 
64895: ST_TO_ADDR
// animal := CreateHuman ;
64896: LD_ADDR_VAR 0 12
64900: PUSH
64901: CALL_OW 44
64905: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64906: LD_VAR 0 12
64910: PPUSH
64911: LD_VAR 0 8
64915: PPUSH
64916: LD_INT 0
64918: PPUSH
64919: CALL 66991 0 3
// end ;
64923: GO 64877
64925: POP
64926: POP
// if birds then
64927: LD_VAR 0 1
64931: IFFALSE 64998
// for i = 1 to birds do
64933: LD_ADDR_VAR 0 11
64937: PUSH
64938: DOUBLE
64939: LD_INT 1
64941: DEC
64942: ST_TO_ADDR
64943: LD_VAR 0 1
64947: PUSH
64948: FOR_TO
64949: IFFALSE 64996
// begin hc_class = 18 ;
64951: LD_ADDR_OWVAR 28
64955: PUSH
64956: LD_INT 18
64958: ST_TO_ADDR
// hc_gallery =  ;
64959: LD_ADDR_OWVAR 33
64963: PUSH
64964: LD_STRING 
64966: ST_TO_ADDR
// animal := CreateHuman ;
64967: LD_ADDR_VAR 0 12
64971: PUSH
64972: CALL_OW 44
64976: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64977: LD_VAR 0 12
64981: PPUSH
64982: LD_VAR 0 8
64986: PPUSH
64987: LD_INT 0
64989: PPUSH
64990: CALL 66991 0 3
// end ;
64994: GO 64948
64996: POP
64997: POP
// if tigers then
64998: LD_VAR 0 2
65002: IFFALSE 65086
// for i = 1 to tigers do
65004: LD_ADDR_VAR 0 11
65008: PUSH
65009: DOUBLE
65010: LD_INT 1
65012: DEC
65013: ST_TO_ADDR
65014: LD_VAR 0 2
65018: PUSH
65019: FOR_TO
65020: IFFALSE 65084
// begin hc_class = class_tiger ;
65022: LD_ADDR_OWVAR 28
65026: PUSH
65027: LD_INT 14
65029: ST_TO_ADDR
// hc_gallery =  ;
65030: LD_ADDR_OWVAR 33
65034: PUSH
65035: LD_STRING 
65037: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65038: LD_ADDR_OWVAR 35
65042: PUSH
65043: LD_INT 7
65045: NEG
65046: PPUSH
65047: LD_INT 7
65049: PPUSH
65050: CALL_OW 12
65054: ST_TO_ADDR
// animal := CreateHuman ;
65055: LD_ADDR_VAR 0 12
65059: PUSH
65060: CALL_OW 44
65064: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65065: LD_VAR 0 12
65069: PPUSH
65070: LD_VAR 0 8
65074: PPUSH
65075: LD_INT 0
65077: PPUSH
65078: CALL 66991 0 3
// end ;
65082: GO 65019
65084: POP
65085: POP
// if apemans then
65086: LD_VAR 0 3
65090: IFFALSE 65213
// for i = 1 to apemans do
65092: LD_ADDR_VAR 0 11
65096: PUSH
65097: DOUBLE
65098: LD_INT 1
65100: DEC
65101: ST_TO_ADDR
65102: LD_VAR 0 3
65106: PUSH
65107: FOR_TO
65108: IFFALSE 65211
// begin hc_class = class_apeman ;
65110: LD_ADDR_OWVAR 28
65114: PUSH
65115: LD_INT 12
65117: ST_TO_ADDR
// hc_gallery =  ;
65118: LD_ADDR_OWVAR 33
65122: PUSH
65123: LD_STRING 
65125: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65126: LD_ADDR_OWVAR 35
65130: PUSH
65131: LD_INT 2
65133: NEG
65134: PPUSH
65135: LD_INT 2
65137: PPUSH
65138: CALL_OW 12
65142: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65143: LD_ADDR_OWVAR 31
65147: PUSH
65148: LD_INT 1
65150: PPUSH
65151: LD_INT 3
65153: PPUSH
65154: CALL_OW 12
65158: PUSH
65159: LD_INT 1
65161: PPUSH
65162: LD_INT 3
65164: PPUSH
65165: CALL_OW 12
65169: PUSH
65170: LD_INT 0
65172: PUSH
65173: LD_INT 0
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: ST_TO_ADDR
// animal := CreateHuman ;
65182: LD_ADDR_VAR 0 12
65186: PUSH
65187: CALL_OW 44
65191: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65192: LD_VAR 0 12
65196: PPUSH
65197: LD_VAR 0 8
65201: PPUSH
65202: LD_INT 0
65204: PPUSH
65205: CALL 66991 0 3
// end ;
65209: GO 65107
65211: POP
65212: POP
// if enchidnas then
65213: LD_VAR 0 4
65217: IFFALSE 65284
// for i = 1 to enchidnas do
65219: LD_ADDR_VAR 0 11
65223: PUSH
65224: DOUBLE
65225: LD_INT 1
65227: DEC
65228: ST_TO_ADDR
65229: LD_VAR 0 4
65233: PUSH
65234: FOR_TO
65235: IFFALSE 65282
// begin hc_class = 13 ;
65237: LD_ADDR_OWVAR 28
65241: PUSH
65242: LD_INT 13
65244: ST_TO_ADDR
// hc_gallery =  ;
65245: LD_ADDR_OWVAR 33
65249: PUSH
65250: LD_STRING 
65252: ST_TO_ADDR
// animal := CreateHuman ;
65253: LD_ADDR_VAR 0 12
65257: PUSH
65258: CALL_OW 44
65262: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65263: LD_VAR 0 12
65267: PPUSH
65268: LD_VAR 0 8
65272: PPUSH
65273: LD_INT 0
65275: PPUSH
65276: CALL 66991 0 3
// end ;
65280: GO 65234
65282: POP
65283: POP
// if fishes then
65284: LD_VAR 0 7
65288: IFFALSE 65355
// for i = 1 to fishes do
65290: LD_ADDR_VAR 0 11
65294: PUSH
65295: DOUBLE
65296: LD_INT 1
65298: DEC
65299: ST_TO_ADDR
65300: LD_VAR 0 7
65304: PUSH
65305: FOR_TO
65306: IFFALSE 65353
// begin hc_class = 20 ;
65308: LD_ADDR_OWVAR 28
65312: PUSH
65313: LD_INT 20
65315: ST_TO_ADDR
// hc_gallery =  ;
65316: LD_ADDR_OWVAR 33
65320: PUSH
65321: LD_STRING 
65323: ST_TO_ADDR
// animal := CreateHuman ;
65324: LD_ADDR_VAR 0 12
65328: PUSH
65329: CALL_OW 44
65333: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65334: LD_VAR 0 12
65338: PPUSH
65339: LD_VAR 0 9
65343: PPUSH
65344: LD_INT 0
65346: PPUSH
65347: CALL 66991 0 3
// end ;
65351: GO 65305
65353: POP
65354: POP
// end ;
65355: LD_VAR 0 10
65359: RET
// export function WantHeal ( sci , unit ) ; begin
65360: LD_INT 0
65362: PPUSH
// if GetTaskList ( sci ) > 0 then
65363: LD_VAR 0 1
65367: PPUSH
65368: CALL_OW 437
65372: PUSH
65373: LD_INT 0
65375: GREATER
65376: IFFALSE 65446
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65378: LD_VAR 0 1
65382: PPUSH
65383: CALL_OW 437
65387: PUSH
65388: LD_INT 1
65390: ARRAY
65391: PUSH
65392: LD_INT 1
65394: ARRAY
65395: PUSH
65396: LD_STRING l
65398: EQUAL
65399: PUSH
65400: LD_VAR 0 1
65404: PPUSH
65405: CALL_OW 437
65409: PUSH
65410: LD_INT 1
65412: ARRAY
65413: PUSH
65414: LD_INT 4
65416: ARRAY
65417: PUSH
65418: LD_VAR 0 2
65422: EQUAL
65423: AND
65424: IFFALSE 65436
// result := true else
65426: LD_ADDR_VAR 0 3
65430: PUSH
65431: LD_INT 1
65433: ST_TO_ADDR
65434: GO 65444
// result := false ;
65436: LD_ADDR_VAR 0 3
65440: PUSH
65441: LD_INT 0
65443: ST_TO_ADDR
// end else
65444: GO 65454
// result := false ;
65446: LD_ADDR_VAR 0 3
65450: PUSH
65451: LD_INT 0
65453: ST_TO_ADDR
// end ;
65454: LD_VAR 0 3
65458: RET
// export function HealTarget ( sci ) ; begin
65459: LD_INT 0
65461: PPUSH
// if not sci then
65462: LD_VAR 0 1
65466: NOT
65467: IFFALSE 65471
// exit ;
65469: GO 65536
// result := 0 ;
65471: LD_ADDR_VAR 0 2
65475: PUSH
65476: LD_INT 0
65478: ST_TO_ADDR
// if GetTaskList ( sci ) then
65479: LD_VAR 0 1
65483: PPUSH
65484: CALL_OW 437
65488: IFFALSE 65536
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65490: LD_VAR 0 1
65494: PPUSH
65495: CALL_OW 437
65499: PUSH
65500: LD_INT 1
65502: ARRAY
65503: PUSH
65504: LD_INT 1
65506: ARRAY
65507: PUSH
65508: LD_STRING l
65510: EQUAL
65511: IFFALSE 65536
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65513: LD_ADDR_VAR 0 2
65517: PUSH
65518: LD_VAR 0 1
65522: PPUSH
65523: CALL_OW 437
65527: PUSH
65528: LD_INT 1
65530: ARRAY
65531: PUSH
65532: LD_INT 4
65534: ARRAY
65535: ST_TO_ADDR
// end ;
65536: LD_VAR 0 2
65540: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65541: LD_INT 0
65543: PPUSH
65544: PPUSH
65545: PPUSH
65546: PPUSH
// if not base_units then
65547: LD_VAR 0 1
65551: NOT
65552: IFFALSE 65556
// exit ;
65554: GO 65643
// result := false ;
65556: LD_ADDR_VAR 0 2
65560: PUSH
65561: LD_INT 0
65563: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65564: LD_ADDR_VAR 0 5
65568: PUSH
65569: LD_VAR 0 1
65573: PPUSH
65574: LD_INT 21
65576: PUSH
65577: LD_INT 3
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PPUSH
65584: CALL_OW 72
65588: ST_TO_ADDR
// if not tmp then
65589: LD_VAR 0 5
65593: NOT
65594: IFFALSE 65598
// exit ;
65596: GO 65643
// for i in tmp do
65598: LD_ADDR_VAR 0 3
65602: PUSH
65603: LD_VAR 0 5
65607: PUSH
65608: FOR_IN
65609: IFFALSE 65641
// begin result := EnemyInRange ( i , 22 ) ;
65611: LD_ADDR_VAR 0 2
65615: PUSH
65616: LD_VAR 0 3
65620: PPUSH
65621: LD_INT 22
65623: PPUSH
65624: CALL 63312 0 2
65628: ST_TO_ADDR
// if result then
65629: LD_VAR 0 2
65633: IFFALSE 65639
// exit ;
65635: POP
65636: POP
65637: GO 65643
// end ;
65639: GO 65608
65641: POP
65642: POP
// end ;
65643: LD_VAR 0 2
65647: RET
// export function FilterByTag ( units , tag ) ; begin
65648: LD_INT 0
65650: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65651: LD_ADDR_VAR 0 3
65655: PUSH
65656: LD_VAR 0 1
65660: PPUSH
65661: LD_INT 120
65663: PUSH
65664: LD_VAR 0 2
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PPUSH
65673: CALL_OW 72
65677: ST_TO_ADDR
// end ;
65678: LD_VAR 0 3
65682: RET
// export function IsDriver ( un ) ; begin
65683: LD_INT 0
65685: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65686: LD_ADDR_VAR 0 2
65690: PUSH
65691: LD_VAR 0 1
65695: PUSH
65696: LD_INT 55
65698: PUSH
65699: EMPTY
65700: LIST
65701: PPUSH
65702: CALL_OW 69
65706: IN
65707: ST_TO_ADDR
// end ;
65708: LD_VAR 0 2
65712: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65713: LD_INT 0
65715: PPUSH
65716: PPUSH
// list := [ ] ;
65717: LD_ADDR_VAR 0 5
65721: PUSH
65722: EMPTY
65723: ST_TO_ADDR
// case d of 0 :
65724: LD_VAR 0 3
65728: PUSH
65729: LD_INT 0
65731: DOUBLE
65732: EQUAL
65733: IFTRUE 65737
65735: GO 65870
65737: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65738: LD_ADDR_VAR 0 5
65742: PUSH
65743: LD_VAR 0 1
65747: PUSH
65748: LD_INT 4
65750: MINUS
65751: PUSH
65752: LD_VAR 0 2
65756: PUSH
65757: LD_INT 4
65759: MINUS
65760: PUSH
65761: LD_INT 2
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: LIST
65768: PUSH
65769: LD_VAR 0 1
65773: PUSH
65774: LD_INT 3
65776: MINUS
65777: PUSH
65778: LD_VAR 0 2
65782: PUSH
65783: LD_INT 1
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: LIST
65790: PUSH
65791: LD_VAR 0 1
65795: PUSH
65796: LD_INT 4
65798: PLUS
65799: PUSH
65800: LD_VAR 0 2
65804: PUSH
65805: LD_INT 4
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: LIST
65812: PUSH
65813: LD_VAR 0 1
65817: PUSH
65818: LD_INT 3
65820: PLUS
65821: PUSH
65822: LD_VAR 0 2
65826: PUSH
65827: LD_INT 3
65829: PLUS
65830: PUSH
65831: LD_INT 5
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: LIST
65838: PUSH
65839: LD_VAR 0 1
65843: PUSH
65844: LD_VAR 0 2
65848: PUSH
65849: LD_INT 4
65851: PLUS
65852: PUSH
65853: LD_INT 0
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: LIST
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: LIST
65865: LIST
65866: LIST
65867: ST_TO_ADDR
// end ; 1 :
65868: GO 66568
65870: LD_INT 1
65872: DOUBLE
65873: EQUAL
65874: IFTRUE 65878
65876: GO 66011
65878: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65879: LD_ADDR_VAR 0 5
65883: PUSH
65884: LD_VAR 0 1
65888: PUSH
65889: LD_VAR 0 2
65893: PUSH
65894: LD_INT 4
65896: MINUS
65897: PUSH
65898: LD_INT 3
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: LIST
65905: PUSH
65906: LD_VAR 0 1
65910: PUSH
65911: LD_INT 3
65913: MINUS
65914: PUSH
65915: LD_VAR 0 2
65919: PUSH
65920: LD_INT 3
65922: MINUS
65923: PUSH
65924: LD_INT 2
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: LIST
65931: PUSH
65932: LD_VAR 0 1
65936: PUSH
65937: LD_INT 4
65939: MINUS
65940: PUSH
65941: LD_VAR 0 2
65945: PUSH
65946: LD_INT 1
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: LIST
65953: PUSH
65954: LD_VAR 0 1
65958: PUSH
65959: LD_VAR 0 2
65963: PUSH
65964: LD_INT 3
65966: PLUS
65967: PUSH
65968: LD_INT 0
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: LIST
65975: PUSH
65976: LD_VAR 0 1
65980: PUSH
65981: LD_INT 4
65983: PLUS
65984: PUSH
65985: LD_VAR 0 2
65989: PUSH
65990: LD_INT 4
65992: PLUS
65993: PUSH
65994: LD_INT 5
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: LIST
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: ST_TO_ADDR
// end ; 2 :
66009: GO 66568
66011: LD_INT 2
66013: DOUBLE
66014: EQUAL
66015: IFTRUE 66019
66017: GO 66148
66019: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66020: LD_ADDR_VAR 0 5
66024: PUSH
66025: LD_VAR 0 1
66029: PUSH
66030: LD_VAR 0 2
66034: PUSH
66035: LD_INT 3
66037: MINUS
66038: PUSH
66039: LD_INT 3
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: LIST
66046: PUSH
66047: LD_VAR 0 1
66051: PUSH
66052: LD_INT 4
66054: PLUS
66055: PUSH
66056: LD_VAR 0 2
66060: PUSH
66061: LD_INT 4
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: LIST
66068: PUSH
66069: LD_VAR 0 1
66073: PUSH
66074: LD_VAR 0 2
66078: PUSH
66079: LD_INT 4
66081: PLUS
66082: PUSH
66083: LD_INT 0
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: LIST
66090: PUSH
66091: LD_VAR 0 1
66095: PUSH
66096: LD_INT 3
66098: MINUS
66099: PUSH
66100: LD_VAR 0 2
66104: PUSH
66105: LD_INT 1
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: LIST
66112: PUSH
66113: LD_VAR 0 1
66117: PUSH
66118: LD_INT 4
66120: MINUS
66121: PUSH
66122: LD_VAR 0 2
66126: PUSH
66127: LD_INT 4
66129: MINUS
66130: PUSH
66131: LD_INT 2
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: LIST
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: ST_TO_ADDR
// end ; 3 :
66146: GO 66568
66148: LD_INT 3
66150: DOUBLE
66151: EQUAL
66152: IFTRUE 66156
66154: GO 66289
66156: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66157: LD_ADDR_VAR 0 5
66161: PUSH
66162: LD_VAR 0 1
66166: PUSH
66167: LD_INT 3
66169: PLUS
66170: PUSH
66171: LD_VAR 0 2
66175: PUSH
66176: LD_INT 4
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: LIST
66183: PUSH
66184: LD_VAR 0 1
66188: PUSH
66189: LD_INT 4
66191: PLUS
66192: PUSH
66193: LD_VAR 0 2
66197: PUSH
66198: LD_INT 4
66200: PLUS
66201: PUSH
66202: LD_INT 5
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: LIST
66209: PUSH
66210: LD_VAR 0 1
66214: PUSH
66215: LD_INT 4
66217: MINUS
66218: PUSH
66219: LD_VAR 0 2
66223: PUSH
66224: LD_INT 1
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: LIST
66231: PUSH
66232: LD_VAR 0 1
66236: PUSH
66237: LD_VAR 0 2
66241: PUSH
66242: LD_INT 4
66244: MINUS
66245: PUSH
66246: LD_INT 3
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: LIST
66253: PUSH
66254: LD_VAR 0 1
66258: PUSH
66259: LD_INT 3
66261: MINUS
66262: PUSH
66263: LD_VAR 0 2
66267: PUSH
66268: LD_INT 3
66270: MINUS
66271: PUSH
66272: LD_INT 2
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: LIST
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: LIST
66284: LIST
66285: LIST
66286: ST_TO_ADDR
// end ; 4 :
66287: GO 66568
66289: LD_INT 4
66291: DOUBLE
66292: EQUAL
66293: IFTRUE 66297
66295: GO 66430
66297: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66298: LD_ADDR_VAR 0 5
66302: PUSH
66303: LD_VAR 0 1
66307: PUSH
66308: LD_VAR 0 2
66312: PUSH
66313: LD_INT 4
66315: PLUS
66316: PUSH
66317: LD_INT 0
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: LIST
66324: PUSH
66325: LD_VAR 0 1
66329: PUSH
66330: LD_INT 3
66332: PLUS
66333: PUSH
66334: LD_VAR 0 2
66338: PUSH
66339: LD_INT 3
66341: PLUS
66342: PUSH
66343: LD_INT 5
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: LIST
66350: PUSH
66351: LD_VAR 0 1
66355: PUSH
66356: LD_INT 4
66358: PLUS
66359: PUSH
66360: LD_VAR 0 2
66364: PUSH
66365: LD_INT 4
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: LIST
66372: PUSH
66373: LD_VAR 0 1
66377: PUSH
66378: LD_VAR 0 2
66382: PUSH
66383: LD_INT 3
66385: MINUS
66386: PUSH
66387: LD_INT 3
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: LIST
66394: PUSH
66395: LD_VAR 0 1
66399: PUSH
66400: LD_INT 4
66402: MINUS
66403: PUSH
66404: LD_VAR 0 2
66408: PUSH
66409: LD_INT 4
66411: MINUS
66412: PUSH
66413: LD_INT 2
66415: PUSH
66416: EMPTY
66417: LIST
66418: LIST
66419: LIST
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: LIST
66425: LIST
66426: LIST
66427: ST_TO_ADDR
// end ; 5 :
66428: GO 66568
66430: LD_INT 5
66432: DOUBLE
66433: EQUAL
66434: IFTRUE 66438
66436: GO 66567
66438: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66439: LD_ADDR_VAR 0 5
66443: PUSH
66444: LD_VAR 0 1
66448: PUSH
66449: LD_INT 4
66451: MINUS
66452: PUSH
66453: LD_VAR 0 2
66457: PUSH
66458: LD_INT 1
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: LIST
66465: PUSH
66466: LD_VAR 0 1
66470: PUSH
66471: LD_VAR 0 2
66475: PUSH
66476: LD_INT 4
66478: MINUS
66479: PUSH
66480: LD_INT 3
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: LIST
66487: PUSH
66488: LD_VAR 0 1
66492: PUSH
66493: LD_INT 4
66495: PLUS
66496: PUSH
66497: LD_VAR 0 2
66501: PUSH
66502: LD_INT 4
66504: PLUS
66505: PUSH
66506: LD_INT 5
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: LIST
66513: PUSH
66514: LD_VAR 0 1
66518: PUSH
66519: LD_INT 3
66521: PLUS
66522: PUSH
66523: LD_VAR 0 2
66527: PUSH
66528: LD_INT 4
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: LIST
66535: PUSH
66536: LD_VAR 0 1
66540: PUSH
66541: LD_VAR 0 2
66545: PUSH
66546: LD_INT 3
66548: PLUS
66549: PUSH
66550: LD_INT 0
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: LIST
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: LIST
66562: LIST
66563: LIST
66564: ST_TO_ADDR
// end ; end ;
66565: GO 66568
66567: POP
// result := list ;
66568: LD_ADDR_VAR 0 4
66572: PUSH
66573: LD_VAR 0 5
66577: ST_TO_ADDR
// end ;
66578: LD_VAR 0 4
66582: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66583: LD_INT 0
66585: PPUSH
66586: PPUSH
66587: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66588: LD_VAR 0 1
66592: NOT
66593: PUSH
66594: LD_VAR 0 2
66598: PUSH
66599: LD_INT 1
66601: PUSH
66602: LD_INT 2
66604: PUSH
66605: LD_INT 3
66607: PUSH
66608: LD_INT 4
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: IN
66617: NOT
66618: OR
66619: IFFALSE 66623
// exit ;
66621: GO 66715
// tmp := [ ] ;
66623: LD_ADDR_VAR 0 5
66627: PUSH
66628: EMPTY
66629: ST_TO_ADDR
// for i in units do
66630: LD_ADDR_VAR 0 4
66634: PUSH
66635: LD_VAR 0 1
66639: PUSH
66640: FOR_IN
66641: IFFALSE 66684
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
66643: LD_ADDR_VAR 0 5
66647: PUSH
66648: LD_VAR 0 5
66652: PPUSH
66653: LD_VAR 0 5
66657: PUSH
66658: LD_INT 1
66660: PLUS
66661: PPUSH
66662: LD_VAR 0 4
66666: PPUSH
66667: LD_VAR 0 2
66671: PPUSH
66672: CALL_OW 259
66676: PPUSH
66677: CALL_OW 2
66681: ST_TO_ADDR
66682: GO 66640
66684: POP
66685: POP
// if not tmp then
66686: LD_VAR 0 5
66690: NOT
66691: IFFALSE 66695
// exit ;
66693: GO 66715
// result := SortListByListDesc ( units , tmp ) ;
66695: LD_ADDR_VAR 0 3
66699: PUSH
66700: LD_VAR 0 1
66704: PPUSH
66705: LD_VAR 0 5
66709: PPUSH
66710: CALL_OW 77
66714: ST_TO_ADDR
// end ;
66715: LD_VAR 0 3
66719: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66720: LD_INT 0
66722: PPUSH
66723: PPUSH
66724: PPUSH
// result := false ;
66725: LD_ADDR_VAR 0 3
66729: PUSH
66730: LD_INT 0
66732: ST_TO_ADDR
// x := GetX ( building ) ;
66733: LD_ADDR_VAR 0 4
66737: PUSH
66738: LD_VAR 0 2
66742: PPUSH
66743: CALL_OW 250
66747: ST_TO_ADDR
// y := GetY ( building ) ;
66748: LD_ADDR_VAR 0 5
66752: PUSH
66753: LD_VAR 0 2
66757: PPUSH
66758: CALL_OW 251
66762: ST_TO_ADDR
// if not building or not x or not y then
66763: LD_VAR 0 2
66767: NOT
66768: PUSH
66769: LD_VAR 0 4
66773: NOT
66774: OR
66775: PUSH
66776: LD_VAR 0 5
66780: NOT
66781: OR
66782: IFFALSE 66786
// exit ;
66784: GO 66878
// if GetTaskList ( unit ) then
66786: LD_VAR 0 1
66790: PPUSH
66791: CALL_OW 437
66795: IFFALSE 66878
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66797: LD_STRING e
66799: PUSH
66800: LD_VAR 0 1
66804: PPUSH
66805: CALL_OW 437
66809: PUSH
66810: LD_INT 1
66812: ARRAY
66813: PUSH
66814: LD_INT 1
66816: ARRAY
66817: EQUAL
66818: PUSH
66819: LD_VAR 0 4
66823: PUSH
66824: LD_VAR 0 1
66828: PPUSH
66829: CALL_OW 437
66833: PUSH
66834: LD_INT 1
66836: ARRAY
66837: PUSH
66838: LD_INT 2
66840: ARRAY
66841: EQUAL
66842: AND
66843: PUSH
66844: LD_VAR 0 5
66848: PUSH
66849: LD_VAR 0 1
66853: PPUSH
66854: CALL_OW 437
66858: PUSH
66859: LD_INT 1
66861: ARRAY
66862: PUSH
66863: LD_INT 3
66865: ARRAY
66866: EQUAL
66867: AND
66868: IFFALSE 66878
// result := true end ;
66870: LD_ADDR_VAR 0 3
66874: PUSH
66875: LD_INT 1
66877: ST_TO_ADDR
// end ;
66878: LD_VAR 0 3
66882: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66883: LD_INT 0
66885: PPUSH
// result := false ;
66886: LD_ADDR_VAR 0 4
66890: PUSH
66891: LD_INT 0
66893: ST_TO_ADDR
// if GetTaskList ( unit ) then
66894: LD_VAR 0 1
66898: PPUSH
66899: CALL_OW 437
66903: IFFALSE 66986
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66905: LD_STRING M
66907: PUSH
66908: LD_VAR 0 1
66912: PPUSH
66913: CALL_OW 437
66917: PUSH
66918: LD_INT 1
66920: ARRAY
66921: PUSH
66922: LD_INT 1
66924: ARRAY
66925: EQUAL
66926: PUSH
66927: LD_VAR 0 2
66931: PUSH
66932: LD_VAR 0 1
66936: PPUSH
66937: CALL_OW 437
66941: PUSH
66942: LD_INT 1
66944: ARRAY
66945: PUSH
66946: LD_INT 2
66948: ARRAY
66949: EQUAL
66950: AND
66951: PUSH
66952: LD_VAR 0 3
66956: PUSH
66957: LD_VAR 0 1
66961: PPUSH
66962: CALL_OW 437
66966: PUSH
66967: LD_INT 1
66969: ARRAY
66970: PUSH
66971: LD_INT 3
66973: ARRAY
66974: EQUAL
66975: AND
66976: IFFALSE 66986
// result := true ;
66978: LD_ADDR_VAR 0 4
66982: PUSH
66983: LD_INT 1
66985: ST_TO_ADDR
// end ; end ;
66986: LD_VAR 0 4
66990: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66991: LD_INT 0
66993: PPUSH
66994: PPUSH
66995: PPUSH
66996: PPUSH
// if not unit or not area then
66997: LD_VAR 0 1
67001: NOT
67002: PUSH
67003: LD_VAR 0 2
67007: NOT
67008: OR
67009: IFFALSE 67013
// exit ;
67011: GO 67177
// tmp := AreaToList ( area , i ) ;
67013: LD_ADDR_VAR 0 6
67017: PUSH
67018: LD_VAR 0 2
67022: PPUSH
67023: LD_VAR 0 5
67027: PPUSH
67028: CALL_OW 517
67032: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67033: LD_ADDR_VAR 0 5
67037: PUSH
67038: DOUBLE
67039: LD_INT 1
67041: DEC
67042: ST_TO_ADDR
67043: LD_VAR 0 6
67047: PUSH
67048: LD_INT 1
67050: ARRAY
67051: PUSH
67052: FOR_TO
67053: IFFALSE 67175
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67055: LD_ADDR_VAR 0 7
67059: PUSH
67060: LD_VAR 0 6
67064: PUSH
67065: LD_INT 1
67067: ARRAY
67068: PUSH
67069: LD_VAR 0 5
67073: ARRAY
67074: PUSH
67075: LD_VAR 0 6
67079: PUSH
67080: LD_INT 2
67082: ARRAY
67083: PUSH
67084: LD_VAR 0 5
67088: ARRAY
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67094: LD_VAR 0 7
67098: PUSH
67099: LD_INT 1
67101: ARRAY
67102: PPUSH
67103: LD_VAR 0 7
67107: PUSH
67108: LD_INT 2
67110: ARRAY
67111: PPUSH
67112: CALL_OW 428
67116: PUSH
67117: LD_INT 0
67119: EQUAL
67120: IFFALSE 67173
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67122: LD_VAR 0 1
67126: PPUSH
67127: LD_VAR 0 7
67131: PUSH
67132: LD_INT 1
67134: ARRAY
67135: PPUSH
67136: LD_VAR 0 7
67140: PUSH
67141: LD_INT 2
67143: ARRAY
67144: PPUSH
67145: LD_VAR 0 3
67149: PPUSH
67150: CALL_OW 48
// result := IsPlaced ( unit ) ;
67154: LD_ADDR_VAR 0 4
67158: PUSH
67159: LD_VAR 0 1
67163: PPUSH
67164: CALL_OW 305
67168: ST_TO_ADDR
// exit ;
67169: POP
67170: POP
67171: GO 67177
// end ; end ;
67173: GO 67052
67175: POP
67176: POP
// end ;
67177: LD_VAR 0 4
67181: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67182: LD_INT 0
67184: PPUSH
67185: PPUSH
67186: PPUSH
// if not side or side > 8 then
67187: LD_VAR 0 1
67191: NOT
67192: PUSH
67193: LD_VAR 0 1
67197: PUSH
67198: LD_INT 8
67200: GREATER
67201: OR
67202: IFFALSE 67206
// exit ;
67204: GO 67393
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67206: LD_ADDR_VAR 0 4
67210: PUSH
67211: LD_INT 22
67213: PUSH
67214: LD_VAR 0 1
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: LD_INT 21
67225: PUSH
67226: LD_INT 3
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PPUSH
67237: CALL_OW 69
67241: ST_TO_ADDR
// if not tmp then
67242: LD_VAR 0 4
67246: NOT
67247: IFFALSE 67251
// exit ;
67249: GO 67393
// enable_addtolog := true ;
67251: LD_ADDR_OWVAR 81
67255: PUSH
67256: LD_INT 1
67258: ST_TO_ADDR
// AddToLog ( [ ) ;
67259: LD_STRING [
67261: PPUSH
67262: CALL_OW 561
// for i in tmp do
67266: LD_ADDR_VAR 0 3
67270: PUSH
67271: LD_VAR 0 4
67275: PUSH
67276: FOR_IN
67277: IFFALSE 67384
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67279: LD_STRING [
67281: PUSH
67282: LD_VAR 0 3
67286: PPUSH
67287: CALL_OW 266
67291: STR
67292: PUSH
67293: LD_STRING , 
67295: STR
67296: PUSH
67297: LD_VAR 0 3
67301: PPUSH
67302: CALL_OW 250
67306: STR
67307: PUSH
67308: LD_STRING , 
67310: STR
67311: PUSH
67312: LD_VAR 0 3
67316: PPUSH
67317: CALL_OW 251
67321: STR
67322: PUSH
67323: LD_STRING , 
67325: STR
67326: PUSH
67327: LD_VAR 0 3
67331: PPUSH
67332: CALL_OW 254
67336: STR
67337: PUSH
67338: LD_STRING , 
67340: STR
67341: PUSH
67342: LD_VAR 0 3
67346: PPUSH
67347: LD_INT 1
67349: PPUSH
67350: CALL_OW 268
67354: STR
67355: PUSH
67356: LD_STRING , 
67358: STR
67359: PUSH
67360: LD_VAR 0 3
67364: PPUSH
67365: LD_INT 2
67367: PPUSH
67368: CALL_OW 268
67372: STR
67373: PUSH
67374: LD_STRING ],
67376: STR
67377: PPUSH
67378: CALL_OW 561
// end ;
67382: GO 67276
67384: POP
67385: POP
// AddToLog ( ]; ) ;
67386: LD_STRING ];
67388: PPUSH
67389: CALL_OW 561
// end ;
67393: LD_VAR 0 2
67397: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67398: LD_INT 0
67400: PPUSH
67401: PPUSH
67402: PPUSH
67403: PPUSH
67404: PPUSH
// if not area or not rate or not max then
67405: LD_VAR 0 1
67409: NOT
67410: PUSH
67411: LD_VAR 0 2
67415: NOT
67416: OR
67417: PUSH
67418: LD_VAR 0 4
67422: NOT
67423: OR
67424: IFFALSE 67428
// exit ;
67426: GO 67617
// while 1 do
67428: LD_INT 1
67430: IFFALSE 67617
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67432: LD_ADDR_VAR 0 9
67436: PUSH
67437: LD_VAR 0 1
67441: PPUSH
67442: LD_INT 1
67444: PPUSH
67445: CALL_OW 287
67449: PUSH
67450: LD_INT 10
67452: MUL
67453: ST_TO_ADDR
// r := rate / 10 ;
67454: LD_ADDR_VAR 0 7
67458: PUSH
67459: LD_VAR 0 2
67463: PUSH
67464: LD_INT 10
67466: DIVREAL
67467: ST_TO_ADDR
// time := 1 1$00 ;
67468: LD_ADDR_VAR 0 8
67472: PUSH
67473: LD_INT 2100
67475: ST_TO_ADDR
// if amount < min then
67476: LD_VAR 0 9
67480: PUSH
67481: LD_VAR 0 3
67485: LESS
67486: IFFALSE 67504
// r := r * 2 else
67488: LD_ADDR_VAR 0 7
67492: PUSH
67493: LD_VAR 0 7
67497: PUSH
67498: LD_INT 2
67500: MUL
67501: ST_TO_ADDR
67502: GO 67530
// if amount > max then
67504: LD_VAR 0 9
67508: PUSH
67509: LD_VAR 0 4
67513: GREATER
67514: IFFALSE 67530
// r := r / 2 ;
67516: LD_ADDR_VAR 0 7
67520: PUSH
67521: LD_VAR 0 7
67525: PUSH
67526: LD_INT 2
67528: DIVREAL
67529: ST_TO_ADDR
// time := time / r ;
67530: LD_ADDR_VAR 0 8
67534: PUSH
67535: LD_VAR 0 8
67539: PUSH
67540: LD_VAR 0 7
67544: DIVREAL
67545: ST_TO_ADDR
// if time < 0 then
67546: LD_VAR 0 8
67550: PUSH
67551: LD_INT 0
67553: LESS
67554: IFFALSE 67571
// time := time * - 1 ;
67556: LD_ADDR_VAR 0 8
67560: PUSH
67561: LD_VAR 0 8
67565: PUSH
67566: LD_INT 1
67568: NEG
67569: MUL
67570: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67571: LD_VAR 0 8
67575: PUSH
67576: LD_INT 35
67578: PPUSH
67579: LD_INT 875
67581: PPUSH
67582: CALL_OW 12
67586: PLUS
67587: PPUSH
67588: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67592: LD_INT 1
67594: PPUSH
67595: LD_INT 5
67597: PPUSH
67598: CALL_OW 12
67602: PPUSH
67603: LD_VAR 0 1
67607: PPUSH
67608: LD_INT 1
67610: PPUSH
67611: CALL_OW 55
// end ;
67615: GO 67428
// end ;
67617: LD_VAR 0 5
67621: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67622: LD_INT 0
67624: PPUSH
67625: PPUSH
67626: PPUSH
67627: PPUSH
67628: PPUSH
67629: PPUSH
67630: PPUSH
67631: PPUSH
// if not turrets or not factories then
67632: LD_VAR 0 1
67636: NOT
67637: PUSH
67638: LD_VAR 0 2
67642: NOT
67643: OR
67644: IFFALSE 67648
// exit ;
67646: GO 67955
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67648: LD_ADDR_VAR 0 10
67652: PUSH
67653: LD_INT 5
67655: PUSH
67656: LD_INT 6
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: PUSH
67663: LD_INT 2
67665: PUSH
67666: LD_INT 4
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: PUSH
67673: LD_INT 3
67675: PUSH
67676: LD_INT 5
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: LIST
67687: PUSH
67688: LD_INT 24
67690: PUSH
67691: LD_INT 25
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: PUSH
67698: LD_INT 23
67700: PUSH
67701: LD_INT 27
67703: PUSH
67704: EMPTY
67705: LIST
67706: LIST
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: LD_INT 42
67714: PUSH
67715: LD_INT 43
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: LD_INT 44
67724: PUSH
67725: LD_INT 46
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: PUSH
67732: LD_INT 45
67734: PUSH
67735: LD_INT 47
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: LIST
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: LIST
67751: ST_TO_ADDR
// result := [ ] ;
67752: LD_ADDR_VAR 0 3
67756: PUSH
67757: EMPTY
67758: ST_TO_ADDR
// for i in turrets do
67759: LD_ADDR_VAR 0 4
67763: PUSH
67764: LD_VAR 0 1
67768: PUSH
67769: FOR_IN
67770: IFFALSE 67953
// begin nat := GetNation ( i ) ;
67772: LD_ADDR_VAR 0 7
67776: PUSH
67777: LD_VAR 0 4
67781: PPUSH
67782: CALL_OW 248
67786: ST_TO_ADDR
// weapon := 0 ;
67787: LD_ADDR_VAR 0 8
67791: PUSH
67792: LD_INT 0
67794: ST_TO_ADDR
// if not nat then
67795: LD_VAR 0 7
67799: NOT
67800: IFFALSE 67804
// continue ;
67802: GO 67769
// for j in list [ nat ] do
67804: LD_ADDR_VAR 0 5
67808: PUSH
67809: LD_VAR 0 10
67813: PUSH
67814: LD_VAR 0 7
67818: ARRAY
67819: PUSH
67820: FOR_IN
67821: IFFALSE 67862
// if GetBWeapon ( i ) = j [ 1 ] then
67823: LD_VAR 0 4
67827: PPUSH
67828: CALL_OW 269
67832: PUSH
67833: LD_VAR 0 5
67837: PUSH
67838: LD_INT 1
67840: ARRAY
67841: EQUAL
67842: IFFALSE 67860
// begin weapon := j [ 2 ] ;
67844: LD_ADDR_VAR 0 8
67848: PUSH
67849: LD_VAR 0 5
67853: PUSH
67854: LD_INT 2
67856: ARRAY
67857: ST_TO_ADDR
// break ;
67858: GO 67862
// end ;
67860: GO 67820
67862: POP
67863: POP
// if not weapon then
67864: LD_VAR 0 8
67868: NOT
67869: IFFALSE 67873
// continue ;
67871: GO 67769
// for k in factories do
67873: LD_ADDR_VAR 0 6
67877: PUSH
67878: LD_VAR 0 2
67882: PUSH
67883: FOR_IN
67884: IFFALSE 67949
// begin weapons := AvailableWeaponList ( k ) ;
67886: LD_ADDR_VAR 0 9
67890: PUSH
67891: LD_VAR 0 6
67895: PPUSH
67896: CALL_OW 478
67900: ST_TO_ADDR
// if not weapons then
67901: LD_VAR 0 9
67905: NOT
67906: IFFALSE 67910
// continue ;
67908: GO 67883
// if weapon in weapons then
67910: LD_VAR 0 8
67914: PUSH
67915: LD_VAR 0 9
67919: IN
67920: IFFALSE 67947
// begin result := [ i , weapon ] ;
67922: LD_ADDR_VAR 0 3
67926: PUSH
67927: LD_VAR 0 4
67931: PUSH
67932: LD_VAR 0 8
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: ST_TO_ADDR
// exit ;
67941: POP
67942: POP
67943: POP
67944: POP
67945: GO 67955
// end ; end ;
67947: GO 67883
67949: POP
67950: POP
// end ;
67951: GO 67769
67953: POP
67954: POP
// end ;
67955: LD_VAR 0 3
67959: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67960: LD_INT 0
67962: PPUSH
// if not side or side > 8 then
67963: LD_VAR 0 3
67967: NOT
67968: PUSH
67969: LD_VAR 0 3
67973: PUSH
67974: LD_INT 8
67976: GREATER
67977: OR
67978: IFFALSE 67982
// exit ;
67980: GO 68041
// if not range then
67982: LD_VAR 0 4
67986: NOT
67987: IFFALSE 67998
// range := - 12 ;
67989: LD_ADDR_VAR 0 4
67993: PUSH
67994: LD_INT 12
67996: NEG
67997: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67998: LD_VAR 0 1
68002: PPUSH
68003: LD_VAR 0 2
68007: PPUSH
68008: LD_VAR 0 3
68012: PPUSH
68013: LD_VAR 0 4
68017: PPUSH
68018: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68022: LD_VAR 0 1
68026: PPUSH
68027: LD_VAR 0 2
68031: PPUSH
68032: LD_VAR 0 3
68036: PPUSH
68037: CALL_OW 331
// end ;
68041: LD_VAR 0 5
68045: RET
// export function Video ( mode ) ; begin
68046: LD_INT 0
68048: PPUSH
// ingame_video = mode ;
68049: LD_ADDR_OWVAR 52
68053: PUSH
68054: LD_VAR 0 1
68058: ST_TO_ADDR
// interface_hidden = mode ;
68059: LD_ADDR_OWVAR 54
68063: PUSH
68064: LD_VAR 0 1
68068: ST_TO_ADDR
// end ;
68069: LD_VAR 0 2
68073: RET
// export function Join ( array , element ) ; begin
68074: LD_INT 0
68076: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68077: LD_ADDR_VAR 0 3
68081: PUSH
68082: LD_VAR 0 1
68086: PPUSH
68087: LD_VAR 0 1
68091: PUSH
68092: LD_INT 1
68094: PLUS
68095: PPUSH
68096: LD_VAR 0 2
68100: PPUSH
68101: CALL_OW 1
68105: ST_TO_ADDR
// end ;
68106: LD_VAR 0 3
68110: RET
// export function JoinUnion ( array , element ) ; begin
68111: LD_INT 0
68113: PPUSH
// result := array union element ;
68114: LD_ADDR_VAR 0 3
68118: PUSH
68119: LD_VAR 0 1
68123: PUSH
68124: LD_VAR 0 2
68128: UNION
68129: ST_TO_ADDR
// end ;
68130: LD_VAR 0 3
68134: RET
// export function GetBehemoths ( side ) ; begin
68135: LD_INT 0
68137: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68138: LD_ADDR_VAR 0 2
68142: PUSH
68143: LD_INT 22
68145: PUSH
68146: LD_VAR 0 1
68150: PUSH
68151: EMPTY
68152: LIST
68153: LIST
68154: PUSH
68155: LD_INT 31
68157: PUSH
68158: LD_INT 25
68160: PUSH
68161: EMPTY
68162: LIST
68163: LIST
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: PPUSH
68169: CALL_OW 69
68173: ST_TO_ADDR
// end ;
68174: LD_VAR 0 2
68178: RET
// export function Shuffle ( array ) ; var i , index ; begin
68179: LD_INT 0
68181: PPUSH
68182: PPUSH
68183: PPUSH
// result := [ ] ;
68184: LD_ADDR_VAR 0 2
68188: PUSH
68189: EMPTY
68190: ST_TO_ADDR
// if not array then
68191: LD_VAR 0 1
68195: NOT
68196: IFFALSE 68200
// exit ;
68198: GO 68299
// Randomize ;
68200: CALL_OW 10
// for i = array downto 1 do
68204: LD_ADDR_VAR 0 3
68208: PUSH
68209: DOUBLE
68210: LD_VAR 0 1
68214: INC
68215: ST_TO_ADDR
68216: LD_INT 1
68218: PUSH
68219: FOR_DOWNTO
68220: IFFALSE 68297
// begin index := rand ( 1 , array ) ;
68222: LD_ADDR_VAR 0 4
68226: PUSH
68227: LD_INT 1
68229: PPUSH
68230: LD_VAR 0 1
68234: PPUSH
68235: CALL_OW 12
68239: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68240: LD_ADDR_VAR 0 2
68244: PUSH
68245: LD_VAR 0 2
68249: PPUSH
68250: LD_VAR 0 2
68254: PUSH
68255: LD_INT 1
68257: PLUS
68258: PPUSH
68259: LD_VAR 0 1
68263: PUSH
68264: LD_VAR 0 4
68268: ARRAY
68269: PPUSH
68270: CALL_OW 2
68274: ST_TO_ADDR
// array := Delete ( array , index ) ;
68275: LD_ADDR_VAR 0 1
68279: PUSH
68280: LD_VAR 0 1
68284: PPUSH
68285: LD_VAR 0 4
68289: PPUSH
68290: CALL_OW 3
68294: ST_TO_ADDR
// end ;
68295: GO 68219
68297: POP
68298: POP
// end ;
68299: LD_VAR 0 2
68303: RET
// export function GetBaseMaterials ( base ) ; begin
68304: LD_INT 0
68306: PPUSH
// result := [ 0 , 0 , 0 ] ;
68307: LD_ADDR_VAR 0 2
68311: PUSH
68312: LD_INT 0
68314: PUSH
68315: LD_INT 0
68317: PUSH
68318: LD_INT 0
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: LIST
68325: ST_TO_ADDR
// if not base then
68326: LD_VAR 0 1
68330: NOT
68331: IFFALSE 68335
// exit ;
68333: GO 68384
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68335: LD_ADDR_VAR 0 2
68339: PUSH
68340: LD_VAR 0 1
68344: PPUSH
68345: LD_INT 1
68347: PPUSH
68348: CALL_OW 275
68352: PUSH
68353: LD_VAR 0 1
68357: PPUSH
68358: LD_INT 2
68360: PPUSH
68361: CALL_OW 275
68365: PUSH
68366: LD_VAR 0 1
68370: PPUSH
68371: LD_INT 3
68373: PPUSH
68374: CALL_OW 275
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: LIST
68383: ST_TO_ADDR
// end ;
68384: LD_VAR 0 2
68388: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68389: LD_INT 0
68391: PPUSH
68392: PPUSH
// result := array ;
68393: LD_ADDR_VAR 0 3
68397: PUSH
68398: LD_VAR 0 1
68402: ST_TO_ADDR
// if size >= result then
68403: LD_VAR 0 2
68407: PUSH
68408: LD_VAR 0 3
68412: GREATEREQUAL
68413: IFFALSE 68417
// exit ;
68415: GO 68467
// if size then
68417: LD_VAR 0 2
68421: IFFALSE 68467
// for i := array downto size do
68423: LD_ADDR_VAR 0 4
68427: PUSH
68428: DOUBLE
68429: LD_VAR 0 1
68433: INC
68434: ST_TO_ADDR
68435: LD_VAR 0 2
68439: PUSH
68440: FOR_DOWNTO
68441: IFFALSE 68465
// result := Delete ( result , result ) ;
68443: LD_ADDR_VAR 0 3
68447: PUSH
68448: LD_VAR 0 3
68452: PPUSH
68453: LD_VAR 0 3
68457: PPUSH
68458: CALL_OW 3
68462: ST_TO_ADDR
68463: GO 68440
68465: POP
68466: POP
// end ;
68467: LD_VAR 0 3
68471: RET
// export function ComExit ( unit ) ; var tmp ; begin
68472: LD_INT 0
68474: PPUSH
68475: PPUSH
// if not IsInUnit ( unit ) then
68476: LD_VAR 0 1
68480: PPUSH
68481: CALL_OW 310
68485: NOT
68486: IFFALSE 68490
// exit ;
68488: GO 68550
// tmp := IsInUnit ( unit ) ;
68490: LD_ADDR_VAR 0 3
68494: PUSH
68495: LD_VAR 0 1
68499: PPUSH
68500: CALL_OW 310
68504: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68505: LD_VAR 0 3
68509: PPUSH
68510: CALL_OW 247
68514: PUSH
68515: LD_INT 2
68517: EQUAL
68518: IFFALSE 68531
// ComExitVehicle ( unit ) else
68520: LD_VAR 0 1
68524: PPUSH
68525: CALL_OW 121
68529: GO 68540
// ComExitBuilding ( unit ) ;
68531: LD_VAR 0 1
68535: PPUSH
68536: CALL_OW 122
// result := tmp ;
68540: LD_ADDR_VAR 0 2
68544: PUSH
68545: LD_VAR 0 3
68549: ST_TO_ADDR
// end ;
68550: LD_VAR 0 2
68554: RET
// export function ComExitAll ( units ) ; var i ; begin
68555: LD_INT 0
68557: PPUSH
68558: PPUSH
// if not units then
68559: LD_VAR 0 1
68563: NOT
68564: IFFALSE 68568
// exit ;
68566: GO 68594
// for i in units do
68568: LD_ADDR_VAR 0 3
68572: PUSH
68573: LD_VAR 0 1
68577: PUSH
68578: FOR_IN
68579: IFFALSE 68592
// ComExit ( i ) ;
68581: LD_VAR 0 3
68585: PPUSH
68586: CALL 68472 0 1
68590: GO 68578
68592: POP
68593: POP
// end ;
68594: LD_VAR 0 2
68598: RET
// export function ResetHc ; begin
68599: LD_INT 0
68601: PPUSH
// InitHc ;
68602: CALL_OW 19
// hc_importance := 0 ;
68606: LD_ADDR_OWVAR 32
68610: PUSH
68611: LD_INT 0
68613: ST_TO_ADDR
// end ;
68614: LD_VAR 0 1
68618: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68619: LD_INT 0
68621: PPUSH
68622: PPUSH
68623: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68624: LD_ADDR_VAR 0 6
68628: PUSH
68629: LD_VAR 0 1
68633: PUSH
68634: LD_VAR 0 3
68638: PLUS
68639: PUSH
68640: LD_INT 2
68642: DIV
68643: ST_TO_ADDR
// if _x < 0 then
68644: LD_VAR 0 6
68648: PUSH
68649: LD_INT 0
68651: LESS
68652: IFFALSE 68669
// _x := _x * - 1 ;
68654: LD_ADDR_VAR 0 6
68658: PUSH
68659: LD_VAR 0 6
68663: PUSH
68664: LD_INT 1
68666: NEG
68667: MUL
68668: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68669: LD_ADDR_VAR 0 7
68673: PUSH
68674: LD_VAR 0 2
68678: PUSH
68679: LD_VAR 0 4
68683: PLUS
68684: PUSH
68685: LD_INT 2
68687: DIV
68688: ST_TO_ADDR
// if _y < 0 then
68689: LD_VAR 0 7
68693: PUSH
68694: LD_INT 0
68696: LESS
68697: IFFALSE 68714
// _y := _y * - 1 ;
68699: LD_ADDR_VAR 0 7
68703: PUSH
68704: LD_VAR 0 7
68708: PUSH
68709: LD_INT 1
68711: NEG
68712: MUL
68713: ST_TO_ADDR
// result := [ _x , _y ] ;
68714: LD_ADDR_VAR 0 5
68718: PUSH
68719: LD_VAR 0 6
68723: PUSH
68724: LD_VAR 0 7
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: ST_TO_ADDR
// end ;
68733: LD_VAR 0 5
68737: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68738: LD_INT 0
68740: PPUSH
68741: PPUSH
68742: PPUSH
68743: PPUSH
// task := GetTaskList ( unit ) ;
68744: LD_ADDR_VAR 0 7
68748: PUSH
68749: LD_VAR 0 1
68753: PPUSH
68754: CALL_OW 437
68758: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68759: LD_VAR 0 7
68763: NOT
68764: PUSH
68765: LD_VAR 0 1
68769: PPUSH
68770: LD_VAR 0 2
68774: PPUSH
68775: CALL_OW 308
68779: NOT
68780: AND
68781: IFFALSE 68785
// exit ;
68783: GO 68903
// if IsInArea ( unit , area ) then
68785: LD_VAR 0 1
68789: PPUSH
68790: LD_VAR 0 2
68794: PPUSH
68795: CALL_OW 308
68799: IFFALSE 68817
// begin ComMoveToArea ( unit , goAway ) ;
68801: LD_VAR 0 1
68805: PPUSH
68806: LD_VAR 0 3
68810: PPUSH
68811: CALL_OW 113
// exit ;
68815: GO 68903
// end ; if task [ 1 ] [ 1 ] <> M then
68817: LD_VAR 0 7
68821: PUSH
68822: LD_INT 1
68824: ARRAY
68825: PUSH
68826: LD_INT 1
68828: ARRAY
68829: PUSH
68830: LD_STRING M
68832: NONEQUAL
68833: IFFALSE 68837
// exit ;
68835: GO 68903
// x := task [ 1 ] [ 2 ] ;
68837: LD_ADDR_VAR 0 5
68841: PUSH
68842: LD_VAR 0 7
68846: PUSH
68847: LD_INT 1
68849: ARRAY
68850: PUSH
68851: LD_INT 2
68853: ARRAY
68854: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68855: LD_ADDR_VAR 0 6
68859: PUSH
68860: LD_VAR 0 7
68864: PUSH
68865: LD_INT 1
68867: ARRAY
68868: PUSH
68869: LD_INT 3
68871: ARRAY
68872: ST_TO_ADDR
// if InArea ( x , y , area ) then
68873: LD_VAR 0 5
68877: PPUSH
68878: LD_VAR 0 6
68882: PPUSH
68883: LD_VAR 0 2
68887: PPUSH
68888: CALL_OW 309
68892: IFFALSE 68903
// ComStop ( unit ) ;
68894: LD_VAR 0 1
68898: PPUSH
68899: CALL_OW 141
// end ;
68903: LD_VAR 0 4
68907: RET
// export function Abs ( value ) ; begin
68908: LD_INT 0
68910: PPUSH
// result := value ;
68911: LD_ADDR_VAR 0 2
68915: PUSH
68916: LD_VAR 0 1
68920: ST_TO_ADDR
// if value < 0 then
68921: LD_VAR 0 1
68925: PUSH
68926: LD_INT 0
68928: LESS
68929: IFFALSE 68946
// result := value * - 1 ;
68931: LD_ADDR_VAR 0 2
68935: PUSH
68936: LD_VAR 0 1
68940: PUSH
68941: LD_INT 1
68943: NEG
68944: MUL
68945: ST_TO_ADDR
// end ;
68946: LD_VAR 0 2
68950: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68951: LD_INT 0
68953: PPUSH
68954: PPUSH
68955: PPUSH
68956: PPUSH
68957: PPUSH
68958: PPUSH
68959: PPUSH
68960: PPUSH
// if not unit or not building then
68961: LD_VAR 0 1
68965: NOT
68966: PUSH
68967: LD_VAR 0 2
68971: NOT
68972: OR
68973: IFFALSE 68977
// exit ;
68975: GO 69203
// x := GetX ( building ) ;
68977: LD_ADDR_VAR 0 4
68981: PUSH
68982: LD_VAR 0 2
68986: PPUSH
68987: CALL_OW 250
68991: ST_TO_ADDR
// y := GetY ( building ) ;
68992: LD_ADDR_VAR 0 6
68996: PUSH
68997: LD_VAR 0 2
69001: PPUSH
69002: CALL_OW 251
69006: ST_TO_ADDR
// d := GetDir ( building ) ;
69007: LD_ADDR_VAR 0 8
69011: PUSH
69012: LD_VAR 0 2
69016: PPUSH
69017: CALL_OW 254
69021: ST_TO_ADDR
// r := 4 ;
69022: LD_ADDR_VAR 0 9
69026: PUSH
69027: LD_INT 4
69029: ST_TO_ADDR
// for i := 1 to 5 do
69030: LD_ADDR_VAR 0 10
69034: PUSH
69035: DOUBLE
69036: LD_INT 1
69038: DEC
69039: ST_TO_ADDR
69040: LD_INT 5
69042: PUSH
69043: FOR_TO
69044: IFFALSE 69201
// begin _x := ShiftX ( x , d , r + i ) ;
69046: LD_ADDR_VAR 0 5
69050: PUSH
69051: LD_VAR 0 4
69055: PPUSH
69056: LD_VAR 0 8
69060: PPUSH
69061: LD_VAR 0 9
69065: PUSH
69066: LD_VAR 0 10
69070: PLUS
69071: PPUSH
69072: CALL_OW 272
69076: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69077: LD_ADDR_VAR 0 7
69081: PUSH
69082: LD_VAR 0 6
69086: PPUSH
69087: LD_VAR 0 8
69091: PPUSH
69092: LD_VAR 0 9
69096: PUSH
69097: LD_VAR 0 10
69101: PLUS
69102: PPUSH
69103: CALL_OW 273
69107: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69108: LD_VAR 0 5
69112: PPUSH
69113: LD_VAR 0 7
69117: PPUSH
69118: CALL_OW 488
69122: PUSH
69123: LD_VAR 0 5
69127: PPUSH
69128: LD_VAR 0 7
69132: PPUSH
69133: CALL_OW 428
69137: PPUSH
69138: CALL_OW 247
69142: PUSH
69143: LD_INT 3
69145: PUSH
69146: LD_INT 2
69148: PUSH
69149: EMPTY
69150: LIST
69151: LIST
69152: IN
69153: NOT
69154: AND
69155: IFFALSE 69199
// begin ComMoveXY ( unit , _x , _y ) ;
69157: LD_VAR 0 1
69161: PPUSH
69162: LD_VAR 0 5
69166: PPUSH
69167: LD_VAR 0 7
69171: PPUSH
69172: CALL_OW 111
// result := [ _x , _y ] ;
69176: LD_ADDR_VAR 0 3
69180: PUSH
69181: LD_VAR 0 5
69185: PUSH
69186: LD_VAR 0 7
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: ST_TO_ADDR
// exit ;
69195: POP
69196: POP
69197: GO 69203
// end ; end ;
69199: GO 69043
69201: POP
69202: POP
// end ;
69203: LD_VAR 0 3
69207: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69208: LD_INT 0
69210: PPUSH
69211: PPUSH
69212: PPUSH
// result := 0 ;
69213: LD_ADDR_VAR 0 3
69217: PUSH
69218: LD_INT 0
69220: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69221: LD_VAR 0 1
69225: PUSH
69226: LD_INT 0
69228: LESS
69229: PUSH
69230: LD_VAR 0 1
69234: PUSH
69235: LD_INT 8
69237: GREATER
69238: OR
69239: PUSH
69240: LD_VAR 0 2
69244: PUSH
69245: LD_INT 0
69247: LESS
69248: OR
69249: PUSH
69250: LD_VAR 0 2
69254: PUSH
69255: LD_INT 8
69257: GREATER
69258: OR
69259: IFFALSE 69263
// exit ;
69261: GO 69338
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69263: LD_ADDR_VAR 0 4
69267: PUSH
69268: LD_INT 22
69270: PUSH
69271: LD_VAR 0 2
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: PPUSH
69280: CALL_OW 69
69284: PUSH
69285: FOR_IN
69286: IFFALSE 69336
// begin un := UnitShoot ( i ) ;
69288: LD_ADDR_VAR 0 5
69292: PUSH
69293: LD_VAR 0 4
69297: PPUSH
69298: CALL_OW 504
69302: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69303: LD_VAR 0 5
69307: PPUSH
69308: CALL_OW 255
69312: PUSH
69313: LD_VAR 0 1
69317: EQUAL
69318: IFFALSE 69334
// begin result := un ;
69320: LD_ADDR_VAR 0 3
69324: PUSH
69325: LD_VAR 0 5
69329: ST_TO_ADDR
// exit ;
69330: POP
69331: POP
69332: GO 69338
// end ; end ;
69334: GO 69285
69336: POP
69337: POP
// end ;
69338: LD_VAR 0 3
69342: RET
// export function GetCargoBay ( units ) ; begin
69343: LD_INT 0
69345: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69346: LD_ADDR_VAR 0 2
69350: PUSH
69351: LD_VAR 0 1
69355: PPUSH
69356: LD_INT 2
69358: PUSH
69359: LD_INT 34
69361: PUSH
69362: LD_INT 12
69364: PUSH
69365: EMPTY
69366: LIST
69367: LIST
69368: PUSH
69369: LD_INT 34
69371: PUSH
69372: LD_INT 51
69374: PUSH
69375: EMPTY
69376: LIST
69377: LIST
69378: PUSH
69379: LD_INT 34
69381: PUSH
69382: LD_INT 32
69384: PUSH
69385: EMPTY
69386: LIST
69387: LIST
69388: PUSH
69389: LD_INT 34
69391: PUSH
69392: LD_EXP 98
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: EMPTY
69402: LIST
69403: LIST
69404: LIST
69405: LIST
69406: LIST
69407: PPUSH
69408: CALL_OW 72
69412: ST_TO_ADDR
// end ;
69413: LD_VAR 0 2
69417: RET
// export function Negate ( value ) ; begin
69418: LD_INT 0
69420: PPUSH
// result := not value ;
69421: LD_ADDR_VAR 0 2
69425: PUSH
69426: LD_VAR 0 1
69430: NOT
69431: ST_TO_ADDR
// end ;
69432: LD_VAR 0 2
69436: RET
// export function Inc ( value ) ; begin
69437: LD_INT 0
69439: PPUSH
// result := value + 1 ;
69440: LD_ADDR_VAR 0 2
69444: PUSH
69445: LD_VAR 0 1
69449: PUSH
69450: LD_INT 1
69452: PLUS
69453: ST_TO_ADDR
// end ;
69454: LD_VAR 0 2
69458: RET
// export function Dec ( value ) ; begin
69459: LD_INT 0
69461: PPUSH
// result := value - 1 ;
69462: LD_ADDR_VAR 0 2
69466: PUSH
69467: LD_VAR 0 1
69471: PUSH
69472: LD_INT 1
69474: MINUS
69475: ST_TO_ADDR
// end ;
69476: LD_VAR 0 2
69480: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69481: LD_INT 0
69483: PPUSH
69484: PPUSH
69485: PPUSH
69486: PPUSH
69487: PPUSH
69488: PPUSH
69489: PPUSH
69490: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69491: LD_VAR 0 1
69495: PPUSH
69496: LD_VAR 0 2
69500: PPUSH
69501: CALL_OW 488
69505: NOT
69506: PUSH
69507: LD_VAR 0 3
69511: PPUSH
69512: LD_VAR 0 4
69516: PPUSH
69517: CALL_OW 488
69521: NOT
69522: OR
69523: IFFALSE 69536
// begin result := - 1 ;
69525: LD_ADDR_VAR 0 5
69529: PUSH
69530: LD_INT 1
69532: NEG
69533: ST_TO_ADDR
// exit ;
69534: GO 69771
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69536: LD_ADDR_VAR 0 12
69540: PUSH
69541: LD_VAR 0 1
69545: PPUSH
69546: LD_VAR 0 2
69550: PPUSH
69551: LD_VAR 0 3
69555: PPUSH
69556: LD_VAR 0 4
69560: PPUSH
69561: CALL 68619 0 4
69565: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69566: LD_ADDR_VAR 0 11
69570: PUSH
69571: LD_VAR 0 1
69575: PPUSH
69576: LD_VAR 0 2
69580: PPUSH
69581: LD_VAR 0 12
69585: PUSH
69586: LD_INT 1
69588: ARRAY
69589: PPUSH
69590: LD_VAR 0 12
69594: PUSH
69595: LD_INT 2
69597: ARRAY
69598: PPUSH
69599: CALL_OW 298
69603: ST_TO_ADDR
// distance := 9999 ;
69604: LD_ADDR_VAR 0 10
69608: PUSH
69609: LD_INT 9999
69611: ST_TO_ADDR
// for i := 0 to 5 do
69612: LD_ADDR_VAR 0 6
69616: PUSH
69617: DOUBLE
69618: LD_INT 0
69620: DEC
69621: ST_TO_ADDR
69622: LD_INT 5
69624: PUSH
69625: FOR_TO
69626: IFFALSE 69769
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69628: LD_ADDR_VAR 0 7
69632: PUSH
69633: LD_VAR 0 1
69637: PPUSH
69638: LD_VAR 0 6
69642: PPUSH
69643: LD_VAR 0 11
69647: PPUSH
69648: CALL_OW 272
69652: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69653: LD_ADDR_VAR 0 8
69657: PUSH
69658: LD_VAR 0 2
69662: PPUSH
69663: LD_VAR 0 6
69667: PPUSH
69668: LD_VAR 0 11
69672: PPUSH
69673: CALL_OW 273
69677: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69678: LD_VAR 0 7
69682: PPUSH
69683: LD_VAR 0 8
69687: PPUSH
69688: CALL_OW 488
69692: NOT
69693: IFFALSE 69697
// continue ;
69695: GO 69625
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69697: LD_ADDR_VAR 0 9
69701: PUSH
69702: LD_VAR 0 12
69706: PUSH
69707: LD_INT 1
69709: ARRAY
69710: PPUSH
69711: LD_VAR 0 12
69715: PUSH
69716: LD_INT 2
69718: ARRAY
69719: PPUSH
69720: LD_VAR 0 7
69724: PPUSH
69725: LD_VAR 0 8
69729: PPUSH
69730: CALL_OW 298
69734: ST_TO_ADDR
// if tmp < distance then
69735: LD_VAR 0 9
69739: PUSH
69740: LD_VAR 0 10
69744: LESS
69745: IFFALSE 69767
// begin result := i ;
69747: LD_ADDR_VAR 0 5
69751: PUSH
69752: LD_VAR 0 6
69756: ST_TO_ADDR
// distance := tmp ;
69757: LD_ADDR_VAR 0 10
69761: PUSH
69762: LD_VAR 0 9
69766: ST_TO_ADDR
// end ; end ;
69767: GO 69625
69769: POP
69770: POP
// end ;
69771: LD_VAR 0 5
69775: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69776: LD_INT 0
69778: PPUSH
69779: PPUSH
// if not driver or not IsInUnit ( driver ) then
69780: LD_VAR 0 1
69784: NOT
69785: PUSH
69786: LD_VAR 0 1
69790: PPUSH
69791: CALL_OW 310
69795: NOT
69796: OR
69797: IFFALSE 69801
// exit ;
69799: GO 69891
// vehicle := IsInUnit ( driver ) ;
69801: LD_ADDR_VAR 0 3
69805: PUSH
69806: LD_VAR 0 1
69810: PPUSH
69811: CALL_OW 310
69815: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69816: LD_VAR 0 1
69820: PPUSH
69821: LD_STRING \
69823: PUSH
69824: LD_INT 0
69826: PUSH
69827: LD_INT 0
69829: PUSH
69830: LD_INT 0
69832: PUSH
69833: LD_INT 0
69835: PUSH
69836: LD_INT 0
69838: PUSH
69839: LD_INT 0
69841: PUSH
69842: EMPTY
69843: LIST
69844: LIST
69845: LIST
69846: LIST
69847: LIST
69848: LIST
69849: LIST
69850: PUSH
69851: LD_STRING E
69853: PUSH
69854: LD_INT 0
69856: PUSH
69857: LD_INT 0
69859: PUSH
69860: LD_VAR 0 3
69864: PUSH
69865: LD_INT 0
69867: PUSH
69868: LD_INT 0
69870: PUSH
69871: LD_INT 0
69873: PUSH
69874: EMPTY
69875: LIST
69876: LIST
69877: LIST
69878: LIST
69879: LIST
69880: LIST
69881: LIST
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: PPUSH
69887: CALL_OW 446
// end ;
69891: LD_VAR 0 2
69895: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69896: LD_INT 0
69898: PPUSH
69899: PPUSH
// if not driver or not IsInUnit ( driver ) then
69900: LD_VAR 0 1
69904: NOT
69905: PUSH
69906: LD_VAR 0 1
69910: PPUSH
69911: CALL_OW 310
69915: NOT
69916: OR
69917: IFFALSE 69921
// exit ;
69919: GO 70011
// vehicle := IsInUnit ( driver ) ;
69921: LD_ADDR_VAR 0 3
69925: PUSH
69926: LD_VAR 0 1
69930: PPUSH
69931: CALL_OW 310
69935: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69936: LD_VAR 0 1
69940: PPUSH
69941: LD_STRING \
69943: PUSH
69944: LD_INT 0
69946: PUSH
69947: LD_INT 0
69949: PUSH
69950: LD_INT 0
69952: PUSH
69953: LD_INT 0
69955: PUSH
69956: LD_INT 0
69958: PUSH
69959: LD_INT 0
69961: PUSH
69962: EMPTY
69963: LIST
69964: LIST
69965: LIST
69966: LIST
69967: LIST
69968: LIST
69969: LIST
69970: PUSH
69971: LD_STRING E
69973: PUSH
69974: LD_INT 0
69976: PUSH
69977: LD_INT 0
69979: PUSH
69980: LD_VAR 0 3
69984: PUSH
69985: LD_INT 0
69987: PUSH
69988: LD_INT 0
69990: PUSH
69991: LD_INT 0
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: LIST
69998: LIST
69999: LIST
70000: LIST
70001: LIST
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: PPUSH
70007: CALL_OW 447
// end ;
70011: LD_VAR 0 2
70015: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70016: LD_INT 0
70018: PPUSH
70019: PPUSH
70020: PPUSH
// tmp := [ ] ;
70021: LD_ADDR_VAR 0 5
70025: PUSH
70026: EMPTY
70027: ST_TO_ADDR
// for i in units do
70028: LD_ADDR_VAR 0 4
70032: PUSH
70033: LD_VAR 0 1
70037: PUSH
70038: FOR_IN
70039: IFFALSE 70077
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70041: LD_ADDR_VAR 0 5
70045: PUSH
70046: LD_VAR 0 5
70050: PPUSH
70051: LD_VAR 0 5
70055: PUSH
70056: LD_INT 1
70058: PLUS
70059: PPUSH
70060: LD_VAR 0 4
70064: PPUSH
70065: CALL_OW 256
70069: PPUSH
70070: CALL_OW 2
70074: ST_TO_ADDR
70075: GO 70038
70077: POP
70078: POP
// if not tmp then
70079: LD_VAR 0 5
70083: NOT
70084: IFFALSE 70088
// exit ;
70086: GO 70136
// if asc then
70088: LD_VAR 0 2
70092: IFFALSE 70116
// result := SortListByListAsc ( units , tmp ) else
70094: LD_ADDR_VAR 0 3
70098: PUSH
70099: LD_VAR 0 1
70103: PPUSH
70104: LD_VAR 0 5
70108: PPUSH
70109: CALL_OW 76
70113: ST_TO_ADDR
70114: GO 70136
// result := SortListByListDesc ( units , tmp ) ;
70116: LD_ADDR_VAR 0 3
70120: PUSH
70121: LD_VAR 0 1
70125: PPUSH
70126: LD_VAR 0 5
70130: PPUSH
70131: CALL_OW 77
70135: ST_TO_ADDR
// end ;
70136: LD_VAR 0 3
70140: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70141: LD_INT 0
70143: PPUSH
70144: PPUSH
// task := GetTaskList ( mech ) ;
70145: LD_ADDR_VAR 0 4
70149: PUSH
70150: LD_VAR 0 1
70154: PPUSH
70155: CALL_OW 437
70159: ST_TO_ADDR
// if not task then
70160: LD_VAR 0 4
70164: NOT
70165: IFFALSE 70169
// exit ;
70167: GO 70211
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70169: LD_ADDR_VAR 0 3
70173: PUSH
70174: LD_VAR 0 4
70178: PUSH
70179: LD_INT 1
70181: ARRAY
70182: PUSH
70183: LD_INT 1
70185: ARRAY
70186: PUSH
70187: LD_STRING r
70189: EQUAL
70190: PUSH
70191: LD_VAR 0 4
70195: PUSH
70196: LD_INT 1
70198: ARRAY
70199: PUSH
70200: LD_INT 4
70202: ARRAY
70203: PUSH
70204: LD_VAR 0 2
70208: EQUAL
70209: AND
70210: ST_TO_ADDR
// end ;
70211: LD_VAR 0 3
70215: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70216: LD_INT 0
70218: PPUSH
// SetDir ( unit , d ) ;
70219: LD_VAR 0 1
70223: PPUSH
70224: LD_VAR 0 4
70228: PPUSH
70229: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70233: LD_VAR 0 1
70237: PPUSH
70238: LD_VAR 0 2
70242: PPUSH
70243: LD_VAR 0 3
70247: PPUSH
70248: LD_VAR 0 5
70252: PPUSH
70253: CALL_OW 48
// end ;
70257: LD_VAR 0 6
70261: RET
// export function ToNaturalNumber ( number ) ; begin
70262: LD_INT 0
70264: PPUSH
// result := number div 1 ;
70265: LD_ADDR_VAR 0 2
70269: PUSH
70270: LD_VAR 0 1
70274: PUSH
70275: LD_INT 1
70277: DIV
70278: ST_TO_ADDR
// if number < 0 then
70279: LD_VAR 0 1
70283: PUSH
70284: LD_INT 0
70286: LESS
70287: IFFALSE 70297
// result := 0 ;
70289: LD_ADDR_VAR 0 2
70293: PUSH
70294: LD_INT 0
70296: ST_TO_ADDR
// end ;
70297: LD_VAR 0 2
70301: RET
// export function SortByClass ( units , class ) ; var un ; begin
70302: LD_INT 0
70304: PPUSH
70305: PPUSH
// if not units or not class then
70306: LD_VAR 0 1
70310: NOT
70311: PUSH
70312: LD_VAR 0 2
70316: NOT
70317: OR
70318: IFFALSE 70322
// exit ;
70320: GO 70417
// result := [ ] ;
70322: LD_ADDR_VAR 0 3
70326: PUSH
70327: EMPTY
70328: ST_TO_ADDR
// for un in units do
70329: LD_ADDR_VAR 0 4
70333: PUSH
70334: LD_VAR 0 1
70338: PUSH
70339: FOR_IN
70340: IFFALSE 70415
// if GetClass ( un ) = class then
70342: LD_VAR 0 4
70346: PPUSH
70347: CALL_OW 257
70351: PUSH
70352: LD_VAR 0 2
70356: EQUAL
70357: IFFALSE 70384
// result := Insert ( result , 1 , un ) else
70359: LD_ADDR_VAR 0 3
70363: PUSH
70364: LD_VAR 0 3
70368: PPUSH
70369: LD_INT 1
70371: PPUSH
70372: LD_VAR 0 4
70376: PPUSH
70377: CALL_OW 2
70381: ST_TO_ADDR
70382: GO 70413
// result := Replace ( result , result + 1 , un ) ;
70384: LD_ADDR_VAR 0 3
70388: PUSH
70389: LD_VAR 0 3
70393: PPUSH
70394: LD_VAR 0 3
70398: PUSH
70399: LD_INT 1
70401: PLUS
70402: PPUSH
70403: LD_VAR 0 4
70407: PPUSH
70408: CALL_OW 1
70412: ST_TO_ADDR
70413: GO 70339
70415: POP
70416: POP
// end ;
70417: LD_VAR 0 3
70421: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70422: LD_INT 0
70424: PPUSH
70425: PPUSH
70426: PPUSH
70427: PPUSH
70428: PPUSH
70429: PPUSH
70430: PPUSH
// result := [ ] ;
70431: LD_ADDR_VAR 0 4
70435: PUSH
70436: EMPTY
70437: ST_TO_ADDR
// if x - r < 0 then
70438: LD_VAR 0 1
70442: PUSH
70443: LD_VAR 0 3
70447: MINUS
70448: PUSH
70449: LD_INT 0
70451: LESS
70452: IFFALSE 70464
// min_x := 0 else
70454: LD_ADDR_VAR 0 8
70458: PUSH
70459: LD_INT 0
70461: ST_TO_ADDR
70462: GO 70480
// min_x := x - r ;
70464: LD_ADDR_VAR 0 8
70468: PUSH
70469: LD_VAR 0 1
70473: PUSH
70474: LD_VAR 0 3
70478: MINUS
70479: ST_TO_ADDR
// if y - r < 0 then
70480: LD_VAR 0 2
70484: PUSH
70485: LD_VAR 0 3
70489: MINUS
70490: PUSH
70491: LD_INT 0
70493: LESS
70494: IFFALSE 70506
// min_y := 0 else
70496: LD_ADDR_VAR 0 7
70500: PUSH
70501: LD_INT 0
70503: ST_TO_ADDR
70504: GO 70522
// min_y := y - r ;
70506: LD_ADDR_VAR 0 7
70510: PUSH
70511: LD_VAR 0 2
70515: PUSH
70516: LD_VAR 0 3
70520: MINUS
70521: ST_TO_ADDR
// max_x := x + r ;
70522: LD_ADDR_VAR 0 9
70526: PUSH
70527: LD_VAR 0 1
70531: PUSH
70532: LD_VAR 0 3
70536: PLUS
70537: ST_TO_ADDR
// max_y := y + r ;
70538: LD_ADDR_VAR 0 10
70542: PUSH
70543: LD_VAR 0 2
70547: PUSH
70548: LD_VAR 0 3
70552: PLUS
70553: ST_TO_ADDR
// for _x = min_x to max_x do
70554: LD_ADDR_VAR 0 5
70558: PUSH
70559: DOUBLE
70560: LD_VAR 0 8
70564: DEC
70565: ST_TO_ADDR
70566: LD_VAR 0 9
70570: PUSH
70571: FOR_TO
70572: IFFALSE 70673
// for _y = min_y to max_y do
70574: LD_ADDR_VAR 0 6
70578: PUSH
70579: DOUBLE
70580: LD_VAR 0 7
70584: DEC
70585: ST_TO_ADDR
70586: LD_VAR 0 10
70590: PUSH
70591: FOR_TO
70592: IFFALSE 70669
// begin if not ValidHex ( _x , _y ) then
70594: LD_VAR 0 5
70598: PPUSH
70599: LD_VAR 0 6
70603: PPUSH
70604: CALL_OW 488
70608: NOT
70609: IFFALSE 70613
// continue ;
70611: GO 70591
// if GetResourceTypeXY ( _x , _y ) then
70613: LD_VAR 0 5
70617: PPUSH
70618: LD_VAR 0 6
70622: PPUSH
70623: CALL_OW 283
70627: IFFALSE 70667
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70629: LD_ADDR_VAR 0 4
70633: PUSH
70634: LD_VAR 0 4
70638: PPUSH
70639: LD_VAR 0 4
70643: PUSH
70644: LD_INT 1
70646: PLUS
70647: PPUSH
70648: LD_VAR 0 5
70652: PUSH
70653: LD_VAR 0 6
70657: PUSH
70658: EMPTY
70659: LIST
70660: LIST
70661: PPUSH
70662: CALL_OW 1
70666: ST_TO_ADDR
// end ;
70667: GO 70591
70669: POP
70670: POP
70671: GO 70571
70673: POP
70674: POP
// end ;
70675: LD_VAR 0 4
70679: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70680: LD_INT 0
70682: PPUSH
70683: PPUSH
70684: PPUSH
70685: PPUSH
70686: PPUSH
70687: PPUSH
70688: PPUSH
70689: PPUSH
// if not units then
70690: LD_VAR 0 1
70694: NOT
70695: IFFALSE 70699
// exit ;
70697: GO 71225
// result := UnitFilter ( units , [ f_ok ] ) ;
70699: LD_ADDR_VAR 0 3
70703: PUSH
70704: LD_VAR 0 1
70708: PPUSH
70709: LD_INT 50
70711: PUSH
70712: EMPTY
70713: LIST
70714: PPUSH
70715: CALL_OW 72
70719: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70720: LD_ADDR_VAR 0 8
70724: PUSH
70725: LD_VAR 0 1
70729: PUSH
70730: LD_INT 1
70732: ARRAY
70733: PPUSH
70734: CALL_OW 255
70738: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70739: LD_ADDR_VAR 0 10
70743: PUSH
70744: LD_INT 29
70746: PUSH
70747: LD_EXP 101
70751: PUSH
70752: LD_INT 49
70754: PUSH
70755: EMPTY
70756: LIST
70757: LIST
70758: LIST
70759: ST_TO_ADDR
// if not result then
70760: LD_VAR 0 3
70764: NOT
70765: IFFALSE 70769
// exit ;
70767: GO 71225
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70769: LD_ADDR_VAR 0 5
70773: PUSH
70774: LD_INT 81
70776: PUSH
70777: LD_VAR 0 8
70781: PUSH
70782: EMPTY
70783: LIST
70784: LIST
70785: PPUSH
70786: CALL_OW 69
70790: ST_TO_ADDR
// for i in result do
70791: LD_ADDR_VAR 0 4
70795: PUSH
70796: LD_VAR 0 3
70800: PUSH
70801: FOR_IN
70802: IFFALSE 71223
// begin tag := GetTag ( i ) + 1 ;
70804: LD_ADDR_VAR 0 9
70808: PUSH
70809: LD_VAR 0 4
70813: PPUSH
70814: CALL_OW 110
70818: PUSH
70819: LD_INT 1
70821: PLUS
70822: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70823: LD_ADDR_VAR 0 7
70827: PUSH
70828: LD_VAR 0 4
70832: PPUSH
70833: CALL_OW 250
70837: PPUSH
70838: LD_VAR 0 4
70842: PPUSH
70843: CALL_OW 251
70847: PPUSH
70848: LD_INT 6
70850: PPUSH
70851: CALL 70422 0 3
70855: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70856: LD_VAR 0 4
70860: PPUSH
70861: CALL_OW 247
70865: PUSH
70866: LD_INT 2
70868: EQUAL
70869: PUSH
70870: LD_VAR 0 7
70874: AND
70875: PUSH
70876: LD_VAR 0 4
70880: PPUSH
70881: CALL_OW 264
70885: PUSH
70886: LD_VAR 0 10
70890: IN
70891: NOT
70892: AND
70893: IFFALSE 70932
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70895: LD_VAR 0 4
70899: PPUSH
70900: LD_VAR 0 7
70904: PUSH
70905: LD_INT 1
70907: ARRAY
70908: PUSH
70909: LD_INT 1
70911: ARRAY
70912: PPUSH
70913: LD_VAR 0 7
70917: PUSH
70918: LD_INT 1
70920: ARRAY
70921: PUSH
70922: LD_INT 2
70924: ARRAY
70925: PPUSH
70926: CALL_OW 116
70930: GO 71221
// if path > tag then
70932: LD_VAR 0 2
70936: PUSH
70937: LD_VAR 0 9
70941: GREATER
70942: IFFALSE 71150
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70944: LD_ADDR_VAR 0 6
70948: PUSH
70949: LD_VAR 0 5
70953: PPUSH
70954: LD_INT 91
70956: PUSH
70957: LD_VAR 0 4
70961: PUSH
70962: LD_INT 8
70964: PUSH
70965: EMPTY
70966: LIST
70967: LIST
70968: LIST
70969: PPUSH
70970: CALL_OW 72
70974: ST_TO_ADDR
// if nearEnemy then
70975: LD_VAR 0 6
70979: IFFALSE 71048
// begin if GetWeapon ( i ) = ru_time_lapser then
70981: LD_VAR 0 4
70985: PPUSH
70986: CALL_OW 264
70990: PUSH
70991: LD_INT 49
70993: EQUAL
70994: IFFALSE 71022
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70996: LD_VAR 0 4
71000: PPUSH
71001: LD_VAR 0 6
71005: PPUSH
71006: LD_VAR 0 4
71010: PPUSH
71011: CALL_OW 74
71015: PPUSH
71016: CALL_OW 112
71020: GO 71046
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71022: LD_VAR 0 4
71026: PPUSH
71027: LD_VAR 0 6
71031: PPUSH
71032: LD_VAR 0 4
71036: PPUSH
71037: CALL_OW 74
71041: PPUSH
71042: CALL_OW 115
// end else
71046: GO 71148
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71048: LD_VAR 0 4
71052: PPUSH
71053: LD_VAR 0 2
71057: PUSH
71058: LD_VAR 0 9
71062: ARRAY
71063: PUSH
71064: LD_INT 1
71066: ARRAY
71067: PPUSH
71068: LD_VAR 0 2
71072: PUSH
71073: LD_VAR 0 9
71077: ARRAY
71078: PUSH
71079: LD_INT 2
71081: ARRAY
71082: PPUSH
71083: CALL_OW 297
71087: PUSH
71088: LD_INT 6
71090: GREATER
71091: IFFALSE 71134
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71093: LD_VAR 0 4
71097: PPUSH
71098: LD_VAR 0 2
71102: PUSH
71103: LD_VAR 0 9
71107: ARRAY
71108: PUSH
71109: LD_INT 1
71111: ARRAY
71112: PPUSH
71113: LD_VAR 0 2
71117: PUSH
71118: LD_VAR 0 9
71122: ARRAY
71123: PUSH
71124: LD_INT 2
71126: ARRAY
71127: PPUSH
71128: CALL_OW 114
71132: GO 71148
// SetTag ( i , tag ) ;
71134: LD_VAR 0 4
71138: PPUSH
71139: LD_VAR 0 9
71143: PPUSH
71144: CALL_OW 109
// end else
71148: GO 71221
// if enemy then
71150: LD_VAR 0 5
71154: IFFALSE 71221
// begin if GetWeapon ( i ) = ru_time_lapser then
71156: LD_VAR 0 4
71160: PPUSH
71161: CALL_OW 264
71165: PUSH
71166: LD_INT 49
71168: EQUAL
71169: IFFALSE 71197
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71171: LD_VAR 0 4
71175: PPUSH
71176: LD_VAR 0 5
71180: PPUSH
71181: LD_VAR 0 4
71185: PPUSH
71186: CALL_OW 74
71190: PPUSH
71191: CALL_OW 112
71195: GO 71221
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71197: LD_VAR 0 4
71201: PPUSH
71202: LD_VAR 0 5
71206: PPUSH
71207: LD_VAR 0 4
71211: PPUSH
71212: CALL_OW 74
71216: PPUSH
71217: CALL_OW 115
// end ; end ;
71221: GO 70801
71223: POP
71224: POP
// end ;
71225: LD_VAR 0 3
71229: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71230: LD_INT 0
71232: PPUSH
71233: PPUSH
71234: PPUSH
// if not unit or IsInUnit ( unit ) then
71235: LD_VAR 0 1
71239: NOT
71240: PUSH
71241: LD_VAR 0 1
71245: PPUSH
71246: CALL_OW 310
71250: OR
71251: IFFALSE 71255
// exit ;
71253: GO 71346
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71255: LD_ADDR_VAR 0 4
71259: PUSH
71260: LD_VAR 0 1
71264: PPUSH
71265: CALL_OW 250
71269: PPUSH
71270: LD_VAR 0 2
71274: PPUSH
71275: LD_INT 1
71277: PPUSH
71278: CALL_OW 272
71282: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71283: LD_ADDR_VAR 0 5
71287: PUSH
71288: LD_VAR 0 1
71292: PPUSH
71293: CALL_OW 251
71297: PPUSH
71298: LD_VAR 0 2
71302: PPUSH
71303: LD_INT 1
71305: PPUSH
71306: CALL_OW 273
71310: ST_TO_ADDR
// if ValidHex ( x , y ) then
71311: LD_VAR 0 4
71315: PPUSH
71316: LD_VAR 0 5
71320: PPUSH
71321: CALL_OW 488
71325: IFFALSE 71346
// ComTurnXY ( unit , x , y ) ;
71327: LD_VAR 0 1
71331: PPUSH
71332: LD_VAR 0 4
71336: PPUSH
71337: LD_VAR 0 5
71341: PPUSH
71342: CALL_OW 118
// end ;
71346: LD_VAR 0 3
71350: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71351: LD_INT 0
71353: PPUSH
71354: PPUSH
// result := false ;
71355: LD_ADDR_VAR 0 3
71359: PUSH
71360: LD_INT 0
71362: ST_TO_ADDR
// if not units then
71363: LD_VAR 0 2
71367: NOT
71368: IFFALSE 71372
// exit ;
71370: GO 71417
// for i in units do
71372: LD_ADDR_VAR 0 4
71376: PUSH
71377: LD_VAR 0 2
71381: PUSH
71382: FOR_IN
71383: IFFALSE 71415
// if See ( side , i ) then
71385: LD_VAR 0 1
71389: PPUSH
71390: LD_VAR 0 4
71394: PPUSH
71395: CALL_OW 292
71399: IFFALSE 71413
// begin result := true ;
71401: LD_ADDR_VAR 0 3
71405: PUSH
71406: LD_INT 1
71408: ST_TO_ADDR
// exit ;
71409: POP
71410: POP
71411: GO 71417
// end ;
71413: GO 71382
71415: POP
71416: POP
// end ;
71417: LD_VAR 0 3
71421: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71422: LD_INT 0
71424: PPUSH
71425: PPUSH
71426: PPUSH
71427: PPUSH
// if not unit or not points then
71428: LD_VAR 0 1
71432: NOT
71433: PUSH
71434: LD_VAR 0 2
71438: NOT
71439: OR
71440: IFFALSE 71444
// exit ;
71442: GO 71534
// dist := 99999 ;
71444: LD_ADDR_VAR 0 5
71448: PUSH
71449: LD_INT 99999
71451: ST_TO_ADDR
// for i in points do
71452: LD_ADDR_VAR 0 4
71456: PUSH
71457: LD_VAR 0 2
71461: PUSH
71462: FOR_IN
71463: IFFALSE 71532
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71465: LD_ADDR_VAR 0 6
71469: PUSH
71470: LD_VAR 0 1
71474: PPUSH
71475: LD_VAR 0 4
71479: PUSH
71480: LD_INT 1
71482: ARRAY
71483: PPUSH
71484: LD_VAR 0 4
71488: PUSH
71489: LD_INT 2
71491: ARRAY
71492: PPUSH
71493: CALL_OW 297
71497: ST_TO_ADDR
// if tmpDist < dist then
71498: LD_VAR 0 6
71502: PUSH
71503: LD_VAR 0 5
71507: LESS
71508: IFFALSE 71530
// begin result := i ;
71510: LD_ADDR_VAR 0 3
71514: PUSH
71515: LD_VAR 0 4
71519: ST_TO_ADDR
// dist := tmpDist ;
71520: LD_ADDR_VAR 0 5
71524: PUSH
71525: LD_VAR 0 6
71529: ST_TO_ADDR
// end ; end ;
71530: GO 71462
71532: POP
71533: POP
// end ;
71534: LD_VAR 0 3
71538: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71539: LD_INT 0
71541: PPUSH
// uc_side := side ;
71542: LD_ADDR_OWVAR 20
71546: PUSH
71547: LD_VAR 0 1
71551: ST_TO_ADDR
// uc_nation := 3 ;
71552: LD_ADDR_OWVAR 21
71556: PUSH
71557: LD_INT 3
71559: ST_TO_ADDR
// vc_chassis := 25 ;
71560: LD_ADDR_OWVAR 37
71564: PUSH
71565: LD_INT 25
71567: ST_TO_ADDR
// vc_engine := engine_siberite ;
71568: LD_ADDR_OWVAR 39
71572: PUSH
71573: LD_INT 3
71575: ST_TO_ADDR
// vc_control := control_computer ;
71576: LD_ADDR_OWVAR 38
71580: PUSH
71581: LD_INT 3
71583: ST_TO_ADDR
// vc_weapon := 59 ;
71584: LD_ADDR_OWVAR 40
71588: PUSH
71589: LD_INT 59
71591: ST_TO_ADDR
// result := CreateVehicle ;
71592: LD_ADDR_VAR 0 5
71596: PUSH
71597: CALL_OW 45
71601: ST_TO_ADDR
// SetDir ( result , d ) ;
71602: LD_VAR 0 5
71606: PPUSH
71607: LD_VAR 0 4
71611: PPUSH
71612: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71616: LD_VAR 0 5
71620: PPUSH
71621: LD_VAR 0 2
71625: PPUSH
71626: LD_VAR 0 3
71630: PPUSH
71631: LD_INT 0
71633: PPUSH
71634: CALL_OW 48
// end ;
71638: LD_VAR 0 5
71642: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71643: LD_INT 0
71645: PPUSH
71646: PPUSH
71647: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71648: LD_ADDR_VAR 0 2
71652: PUSH
71653: LD_INT 0
71655: PUSH
71656: LD_INT 0
71658: PUSH
71659: LD_INT 0
71661: PUSH
71662: LD_INT 0
71664: PUSH
71665: EMPTY
71666: LIST
71667: LIST
71668: LIST
71669: LIST
71670: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71671: LD_VAR 0 1
71675: NOT
71676: PUSH
71677: LD_VAR 0 1
71681: PPUSH
71682: CALL_OW 264
71686: PUSH
71687: LD_INT 12
71689: PUSH
71690: LD_INT 51
71692: PUSH
71693: LD_INT 32
71695: PUSH
71696: LD_EXP 98
71700: PUSH
71701: EMPTY
71702: LIST
71703: LIST
71704: LIST
71705: LIST
71706: IN
71707: NOT
71708: OR
71709: IFFALSE 71713
// exit ;
71711: GO 71811
// for i := 1 to 3 do
71713: LD_ADDR_VAR 0 3
71717: PUSH
71718: DOUBLE
71719: LD_INT 1
71721: DEC
71722: ST_TO_ADDR
71723: LD_INT 3
71725: PUSH
71726: FOR_TO
71727: IFFALSE 71809
// begin tmp := GetCargo ( cargo , i ) ;
71729: LD_ADDR_VAR 0 4
71733: PUSH
71734: LD_VAR 0 1
71738: PPUSH
71739: LD_VAR 0 3
71743: PPUSH
71744: CALL_OW 289
71748: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71749: LD_ADDR_VAR 0 2
71753: PUSH
71754: LD_VAR 0 2
71758: PPUSH
71759: LD_VAR 0 3
71763: PPUSH
71764: LD_VAR 0 4
71768: PPUSH
71769: CALL_OW 1
71773: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71774: LD_ADDR_VAR 0 2
71778: PUSH
71779: LD_VAR 0 2
71783: PPUSH
71784: LD_INT 4
71786: PPUSH
71787: LD_VAR 0 2
71791: PUSH
71792: LD_INT 4
71794: ARRAY
71795: PUSH
71796: LD_VAR 0 4
71800: PLUS
71801: PPUSH
71802: CALL_OW 1
71806: ST_TO_ADDR
// end ;
71807: GO 71726
71809: POP
71810: POP
// end ;
71811: LD_VAR 0 2
71815: RET
// export function Length ( array ) ; begin
71816: LD_INT 0
71818: PPUSH
// result := array + 0 ;
71819: LD_ADDR_VAR 0 2
71823: PUSH
71824: LD_VAR 0 1
71828: PUSH
71829: LD_INT 0
71831: PLUS
71832: ST_TO_ADDR
// end ;
71833: LD_VAR 0 2
71837: RET
// export function PrepareArray ( array ) ; begin
71838: LD_INT 0
71840: PPUSH
// result := array diff 0 ;
71841: LD_ADDR_VAR 0 2
71845: PUSH
71846: LD_VAR 0 1
71850: PUSH
71851: LD_INT 0
71853: DIFF
71854: ST_TO_ADDR
// if not result [ 1 ] then
71855: LD_VAR 0 2
71859: PUSH
71860: LD_INT 1
71862: ARRAY
71863: NOT
71864: IFFALSE 71884
// result := Delete ( result , 1 ) ;
71866: LD_ADDR_VAR 0 2
71870: PUSH
71871: LD_VAR 0 2
71875: PPUSH
71876: LD_INT 1
71878: PPUSH
71879: CALL_OW 3
71883: ST_TO_ADDR
// end ; end_of_file
71884: LD_VAR 0 2
71888: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
71889: LD_INT 0
71891: PPUSH
// ar_miner := 81 ;
71892: LD_ADDR_EXP 104
71896: PUSH
71897: LD_INT 81
71899: ST_TO_ADDR
// ar_crane := 88 ;
71900: LD_ADDR_EXP 103
71904: PUSH
71905: LD_INT 88
71907: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
71908: LD_ADDR_EXP 98
71912: PUSH
71913: LD_INT 89
71915: ST_TO_ADDR
// us_hack := 99 ;
71916: LD_ADDR_EXP 99
71920: PUSH
71921: LD_INT 99
71923: ST_TO_ADDR
// us_artillery := 97 ;
71924: LD_ADDR_EXP 100
71928: PUSH
71929: LD_INT 97
71931: ST_TO_ADDR
// ar_bio_bomb := 91 ;
71932: LD_ADDR_EXP 101
71936: PUSH
71937: LD_INT 91
71939: ST_TO_ADDR
// ar_mortar := 92 ;
71940: LD_ADDR_EXP 102
71944: PUSH
71945: LD_INT 92
71947: ST_TO_ADDR
// ru_flamethrower := 93 ;
71948: LD_ADDR_EXP 105
71952: PUSH
71953: LD_INT 93
71955: ST_TO_ADDR
// ru_radar := 98 ;
71956: LD_ADDR_EXP 97
71960: PUSH
71961: LD_INT 98
71963: ST_TO_ADDR
// tech_Artillery := 80 ;
71964: LD_ADDR_EXP 106
71968: PUSH
71969: LD_INT 80
71971: ST_TO_ADDR
// tech_RadMat := 81 ;
71972: LD_ADDR_EXP 107
71976: PUSH
71977: LD_INT 81
71979: ST_TO_ADDR
// tech_BasicTools := 82 ;
71980: LD_ADDR_EXP 108
71984: PUSH
71985: LD_INT 82
71987: ST_TO_ADDR
// tech_Cargo := 83 ;
71988: LD_ADDR_EXP 109
71992: PUSH
71993: LD_INT 83
71995: ST_TO_ADDR
// tech_Track := 84 ;
71996: LD_ADDR_EXP 110
72000: PUSH
72001: LD_INT 84
72003: ST_TO_ADDR
// tech_Crane := 85 ;
72004: LD_ADDR_EXP 111
72008: PUSH
72009: LD_INT 85
72011: ST_TO_ADDR
// tech_Bulldozer := 86 ;
72012: LD_ADDR_EXP 112
72016: PUSH
72017: LD_INT 86
72019: ST_TO_ADDR
// tech_Hovercraft := 87 ;
72020: LD_ADDR_EXP 113
72024: PUSH
72025: LD_INT 87
72027: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
72028: LD_ADDR_EXP 114
72032: PUSH
72033: LD_INT 88
72035: ST_TO_ADDR
// end ;
72036: LD_VAR 0 1
72040: RET
// every 1 do
72041: GO 72043
72043: DISABLE
// InitGlobalVariables ; end_of_file
72044: CALL 71889 0 0
72048: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72049: LD_VAR 0 1
72053: PUSH
72054: LD_INT 200
72056: DOUBLE
72057: GREATEREQUAL
72058: IFFALSE 72066
72060: LD_INT 299
72062: DOUBLE
72063: LESSEQUAL
72064: IFTRUE 72068
72066: GO 72100
72068: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72069: LD_VAR 0 1
72073: PPUSH
72074: LD_VAR 0 2
72078: PPUSH
72079: LD_VAR 0 3
72083: PPUSH
72084: LD_VAR 0 4
72088: PPUSH
72089: LD_VAR 0 5
72093: PPUSH
72094: CALL 11089 0 5
72098: GO 72177
72100: LD_INT 300
72102: DOUBLE
72103: GREATEREQUAL
72104: IFFALSE 72112
72106: LD_INT 399
72108: DOUBLE
72109: LESSEQUAL
72110: IFTRUE 72114
72112: GO 72176
72114: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72115: LD_VAR 0 1
72119: PPUSH
72120: LD_VAR 0 2
72124: PPUSH
72125: LD_VAR 0 3
72129: PPUSH
72130: LD_VAR 0 4
72134: PPUSH
72135: LD_VAR 0 5
72139: PPUSH
72140: LD_VAR 0 6
72144: PPUSH
72145: LD_VAR 0 7
72149: PPUSH
72150: LD_VAR 0 8
72154: PPUSH
72155: LD_VAR 0 9
72159: PPUSH
72160: LD_VAR 0 10
72164: PPUSH
72165: LD_VAR 0 11
72169: PPUSH
72170: CALL 27380 0 11
72174: GO 72177
72176: POP
// end ;
72177: PPOPN 11
72179: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72180: LD_VAR 0 1
72184: PPUSH
72185: LD_VAR 0 2
72189: PPUSH
72190: LD_VAR 0 3
72194: PPUSH
72195: LD_VAR 0 4
72199: PPUSH
72200: LD_VAR 0 5
72204: PPUSH
72205: CALL 10825 0 5
// end ; end_of_file
72209: PPOPN 5
72211: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72212: LD_VAR 0 1
72216: PPUSH
72217: LD_VAR 0 2
72221: PPUSH
72222: LD_VAR 0 3
72226: PPUSH
72227: LD_VAR 0 4
72231: PPUSH
72232: LD_VAR 0 5
72236: PPUSH
72237: LD_VAR 0 6
72241: PPUSH
72242: CALL 15073 0 6
// end ;
72246: PPOPN 6
72248: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72249: LD_INT 0
72251: PPUSH
// begin if not units then
72252: LD_VAR 0 1
72256: NOT
72257: IFFALSE 72261
// exit ;
72259: GO 72261
// end ;
72261: PPOPN 7
72263: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72264: CALL 15044 0 0
// end ;
72268: PPOPN 1
72270: END
