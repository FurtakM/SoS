// starting begin InitMap ;
   0: CALL 1440 0 0
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitTriggers ;
  11: CALL 1825 0 0
// Start_Game ;
  15: CALL 13204 0 0
// InitPlayer ;
  19: CALL 2062 0 0
// InitRussian ;
  23: CALL 2952 0 0
// end ; end_of_file
  27: END
// export function PrepareAnimals ( num1 , num2 , num3 , area ) ; var l , apeman , tiger , bird ; begin
  28: LD_INT 0
  30: PPUSH
  31: PPUSH
  32: PPUSH
  33: PPUSH
  34: PPUSH
// uc_nation = nation_nature ;
  35: LD_ADDR_OWVAR 21
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// uc_side = 0 ;
  43: LD_ADDR_OWVAR 20
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// l = 0 ;
  51: LD_ADDR_VAR 0 6
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// repeat begin uc_direction = Rand ( 0 , 5 ) ;
  59: LD_ADDR_OWVAR 24
  63: PUSH
  64: LD_INT 0
  66: PPUSH
  67: LD_INT 5
  69: PPUSH
  70: CALL_OW 12
  74: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
  75: LD_ADDR_OWVAR 35
  79: PUSH
  80: LD_INT 5
  82: NEG
  83: PPUSH
  84: LD_INT 5
  86: PPUSH
  87: CALL_OW 12
  91: ST_TO_ADDR
// hc_gallery =  ;
  92: LD_ADDR_OWVAR 33
  96: PUSH
  97: LD_STRING 
  99: ST_TO_ADDR
// hc_class = class_apeman ;
 100: LD_ADDR_OWVAR 28
 104: PUSH
 105: LD_INT 12
 107: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
 108: LD_ADDR_OWVAR 29
 112: PUSH
 113: LD_INT 11
 115: PPUSH
 116: LD_INT 13
 118: PPUSH
 119: CALL_OW 12
 123: PUSH
 124: LD_INT 10
 126: PPUSH
 127: LD_INT 11
 129: PPUSH
 130: CALL_OW 12
 134: PUSH
 135: EMPTY
 136: LIST
 137: LIST
 138: ST_TO_ADDR
// hc_sex = sex_male ;
 139: LD_ADDR_OWVAR 27
 143: PUSH
 144: LD_INT 1
 146: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
 147: LD_ADDR_OWVAR 31
 151: PUSH
 152: LD_INT 0
 154: PPUSH
 155: LD_INT 2
 157: PPUSH
 158: CALL_OW 12
 162: PUSH
 163: LD_INT 0
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: EMPTY
 173: LIST
 174: LIST
 175: LIST
 176: LIST
 177: ST_TO_ADDR
// apeman = CreateHuman ;
 178: LD_ADDR_VAR 0 7
 182: PUSH
 183: CALL_OW 44
 187: ST_TO_ADDR
// PlaceUnitArea ( apeman , area , false ) ;
 188: LD_VAR 0 7
 192: PPUSH
 193: LD_VAR 0 4
 197: PPUSH
 198: LD_INT 0
 200: PPUSH
 201: CALL_OW 49
// l = l + 1 ;
 205: LD_ADDR_VAR 0 6
 209: PUSH
 210: LD_VAR 0 6
 214: PUSH
 215: LD_INT 1
 217: PLUS
 218: ST_TO_ADDR
// end until l = num1 ;
 219: LD_VAR 0 6
 223: PUSH
 224: LD_VAR 0 1
 228: EQUAL
 229: IFFALSE 59
// l = 0 ;
 231: LD_ADDR_VAR 0 6
 235: PUSH
 236: LD_INT 0
 238: ST_TO_ADDR
// repeat begin hc_agressivity = Rand ( 0 , 25 ) ;
 239: LD_ADDR_OWVAR 35
 243: PUSH
 244: LD_INT 0
 246: PPUSH
 247: LD_INT 25
 249: PPUSH
 250: CALL_OW 12
 254: ST_TO_ADDR
// hc_class = class_tiger ;
 255: LD_ADDR_OWVAR 28
 259: PUSH
 260: LD_INT 14
 262: ST_TO_ADDR
// hc_sex = sex_male ;
 263: LD_ADDR_OWVAR 27
 267: PUSH
 268: LD_INT 1
 270: ST_TO_ADDR
// hc_gallery = sandnature ;
 271: LD_ADDR_OWVAR 33
 275: PUSH
 276: LD_STRING sandnature
 278: ST_TO_ADDR
// hc_face_number = 3 ;
 279: LD_ADDR_OWVAR 34
 283: PUSH
 284: LD_INT 3
 286: ST_TO_ADDR
// tiger = CreateHuman ;
 287: LD_ADDR_VAR 0 8
 291: PUSH
 292: CALL_OW 44
 296: ST_TO_ADDR
// PlaceUnitArea ( tiger , area , false ) ;
 297: LD_VAR 0 8
 301: PPUSH
 302: LD_VAR 0 4
 306: PPUSH
 307: LD_INT 0
 309: PPUSH
 310: CALL_OW 49
// l = l + 1 ;
 314: LD_ADDR_VAR 0 6
 318: PUSH
 319: LD_VAR 0 6
 323: PUSH
 324: LD_INT 1
 326: PLUS
 327: ST_TO_ADDR
// end until l = num2 ;
 328: LD_VAR 0 6
 332: PUSH
 333: LD_VAR 0 2
 337: EQUAL
 338: IFFALSE 239
// l = 0 ;
 340: LD_ADDR_VAR 0 6
 344: PUSH
 345: LD_INT 0
 347: ST_TO_ADDR
// repeat begin hc_class = class_phororhacos ;
 348: LD_ADDR_OWVAR 28
 352: PUSH
 353: LD_INT 18
 355: ST_TO_ADDR
// hc_gallery = sandnature ;
 356: LD_ADDR_OWVAR 33
 360: PUSH
 361: LD_STRING sandnature
 363: ST_TO_ADDR
// hc_face_number = 1 ;
 364: LD_ADDR_OWVAR 34
 368: PUSH
 369: LD_INT 1
 371: ST_TO_ADDR
// bird = CreateHuman ;
 372: LD_ADDR_VAR 0 9
 376: PUSH
 377: CALL_OW 44
 381: ST_TO_ADDR
// PlaceUnitAnywhere ( bird , false ) ;
 382: LD_VAR 0 9
 386: PPUSH
 387: LD_INT 0
 389: PPUSH
 390: CALL_OW 51
// l = l + 1 ;
 394: LD_ADDR_VAR 0 6
 398: PUSH
 399: LD_VAR 0 6
 403: PUSH
 404: LD_INT 1
 406: PLUS
 407: ST_TO_ADDR
// end until l = num3 ;
 408: LD_VAR 0 6
 412: PUSH
 413: LD_VAR 0 3
 417: EQUAL
 418: IFFALSE 348
// end ;
 420: LD_VAR 0 5
 424: RET
// export function CreateHumanWithClass ( clas , lvl ) ; var skill_com , skill_eng , skill_mech , skill_sci , bonus ; begin
 425: LD_INT 0
 427: PPUSH
 428: PPUSH
 429: PPUSH
 430: PPUSH
 431: PPUSH
 432: PPUSH
// hc_class := clas ;
 433: LD_ADDR_OWVAR 28
 437: PUSH
 438: LD_VAR 0 1
 442: ST_TO_ADDR
// skill_com := ( lvl + Rand ( - 1 , 1 ) ) ;
 443: LD_ADDR_VAR 0 4
 447: PUSH
 448: LD_VAR 0 2
 452: PUSH
 453: LD_INT 1
 455: NEG
 456: PPUSH
 457: LD_INT 1
 459: PPUSH
 460: CALL_OW 12
 464: PLUS
 465: ST_TO_ADDR
// skill_eng := ( lvl + Rand ( - 1 , 1 ) ) ;
 466: LD_ADDR_VAR 0 5
 470: PUSH
 471: LD_VAR 0 2
 475: PUSH
 476: LD_INT 1
 478: NEG
 479: PPUSH
 480: LD_INT 1
 482: PPUSH
 483: CALL_OW 12
 487: PLUS
 488: ST_TO_ADDR
// skill_mech := ( lvl + Rand ( - 1 , 1 ) ) ;
 489: LD_ADDR_VAR 0 6
 493: PUSH
 494: LD_VAR 0 2
 498: PUSH
 499: LD_INT 1
 501: NEG
 502: PPUSH
 503: LD_INT 1
 505: PPUSH
 506: CALL_OW 12
 510: PLUS
 511: ST_TO_ADDR
// skill_sci := ( lvl + Rand ( - 1 , 1 ) ) ;
 512: LD_ADDR_VAR 0 7
 516: PUSH
 517: LD_VAR 0 2
 521: PUSH
 522: LD_INT 1
 524: NEG
 525: PPUSH
 526: LD_INT 1
 528: PPUSH
 529: CALL_OW 12
 533: PLUS
 534: ST_TO_ADDR
// if clas = 1 or clas = 9 then
 535: LD_VAR 0 1
 539: PUSH
 540: LD_INT 1
 542: EQUAL
 543: PUSH
 544: LD_VAR 0 1
 548: PUSH
 549: LD_INT 9
 551: EQUAL
 552: OR
 553: IFFALSE 578
// bonus := [ 2 , 0 , 0 , 0 ] ;
 555: LD_ADDR_VAR 0 8
 559: PUSH
 560: LD_INT 2
 562: PUSH
 563: LD_INT 0
 565: PUSH
 566: LD_INT 0
 568: PUSH
 569: LD_INT 0
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: ST_TO_ADDR
// if clas = 2 then
 578: LD_VAR 0 1
 582: PUSH
 583: LD_INT 2
 585: EQUAL
 586: IFFALSE 611
// bonus := [ 0 , 2 , 0 , 0 ] ;
 588: LD_ADDR_VAR 0 8
 592: PUSH
 593: LD_INT 0
 595: PUSH
 596: LD_INT 2
 598: PUSH
 599: LD_INT 0
 601: PUSH
 602: LD_INT 0
 604: PUSH
 605: EMPTY
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: ST_TO_ADDR
// if clas = 3 then
 611: LD_VAR 0 1
 615: PUSH
 616: LD_INT 3
 618: EQUAL
 619: IFFALSE 644
// bonus := [ 0 , 0 , 2 , 0 ] ;
 621: LD_ADDR_VAR 0 8
 625: PUSH
 626: LD_INT 0
 628: PUSH
 629: LD_INT 0
 631: PUSH
 632: LD_INT 2
 634: PUSH
 635: LD_INT 0
 637: PUSH
 638: EMPTY
 639: LIST
 640: LIST
 641: LIST
 642: LIST
 643: ST_TO_ADDR
// if clas = 4 then
 644: LD_VAR 0 1
 648: PUSH
 649: LD_INT 4
 651: EQUAL
 652: IFFALSE 677
// bonus := [ 0 , 0 , 0 , 2 ] ;
 654: LD_ADDR_VAR 0 8
 658: PUSH
 659: LD_INT 0
 661: PUSH
 662: LD_INT 0
 664: PUSH
 665: LD_INT 0
 667: PUSH
 668: LD_INT 2
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: ST_TO_ADDR
// if clas > 4 and not clas = 9 then
 677: LD_VAR 0 1
 681: PUSH
 682: LD_INT 4
 684: GREATER
 685: PUSH
 686: LD_VAR 0 1
 690: PUSH
 691: LD_INT 9
 693: EQUAL
 694: NOT
 695: AND
 696: IFFALSE 721
// bonus := [ 0 , 0 , 0 , 0 ] ;
 698: LD_ADDR_VAR 0 8
 702: PUSH
 703: LD_INT 0
 705: PUSH
 706: LD_INT 0
 708: PUSH
 709: LD_INT 0
 711: PUSH
 712: LD_INT 0
 714: PUSH
 715: EMPTY
 716: LIST
 717: LIST
 718: LIST
 719: LIST
 720: ST_TO_ADDR
// hc_skills := [ skill_com + bonus [ 1 ] , skill_eng + bonus [ 2 ] , skill_mech + bonus [ 3 ] , skill_sci + bonus [ 4 ] ] ;
 721: LD_ADDR_OWVAR 31
 725: PUSH
 726: LD_VAR 0 4
 730: PUSH
 731: LD_VAR 0 8
 735: PUSH
 736: LD_INT 1
 738: ARRAY
 739: PLUS
 740: PUSH
 741: LD_VAR 0 5
 745: PUSH
 746: LD_VAR 0 8
 750: PUSH
 751: LD_INT 2
 753: ARRAY
 754: PLUS
 755: PUSH
 756: LD_VAR 0 6
 760: PUSH
 761: LD_VAR 0 8
 765: PUSH
 766: LD_INT 3
 768: ARRAY
 769: PLUS
 770: PUSH
 771: LD_VAR 0 7
 775: PUSH
 776: LD_VAR 0 8
 780: PUSH
 781: LD_INT 4
 783: ARRAY
 784: PLUS
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: LIST
 790: LIST
 791: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
 792: LD_ADDR_OWVAR 27
 796: PUSH
 797: LD_INT 1
 799: PPUSH
 800: LD_INT 2
 802: PPUSH
 803: CALL_OW 12
 807: ST_TO_ADDR
// hc_gallery :=  ;
 808: LD_ADDR_OWVAR 33
 812: PUSH
 813: LD_STRING 
 815: ST_TO_ADDR
// hc_attr := [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
 816: LD_ADDR_OWVAR 29
 820: PUSH
 821: LD_INT 8
 823: PPUSH
 824: LD_INT 12
 826: PPUSH
 827: CALL_OW 12
 831: PUSH
 832: LD_INT 9
 834: PPUSH
 835: LD_INT 11
 837: PPUSH
 838: CALL_OW 12
 842: PUSH
 843: EMPTY
 844: LIST
 845: LIST
 846: ST_TO_ADDR
// hc_name :=  ;
 847: LD_ADDR_OWVAR 26
 851: PUSH
 852: LD_STRING 
 854: ST_TO_ADDR
// result := CreateHuman ;
 855: LD_ADDR_VAR 0 3
 859: PUSH
 860: CALL_OW 44
 864: ST_TO_ADDR
// end ;
 865: LD_VAR 0 3
 869: RET
// export function SeeSide ( unit , side ) ; var i ; begin
 870: LD_INT 0
 872: PPUSH
 873: PPUSH
// result := false ;
 874: LD_ADDR_VAR 0 3
 878: PUSH
 879: LD_INT 0
 881: ST_TO_ADDR
// i := NearestUnitToUnit ( FilterAllUnits ( [ f_side , side ] ) , unit ) ;
 882: LD_ADDR_VAR 0 4
 886: PUSH
 887: LD_INT 22
 889: PUSH
 890: LD_VAR 0 2
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: PPUSH
 899: CALL_OW 69
 903: PPUSH
 904: LD_VAR 0 1
 908: PPUSH
 909: CALL_OW 74
 913: ST_TO_ADDR
// if GetDistUnits ( unit , i ) < 9 then
 914: LD_VAR 0 1
 918: PPUSH
 919: LD_VAR 0 4
 923: PPUSH
 924: CALL_OW 296
 928: PUSH
 929: LD_INT 9
 931: LESS
 932: IFFALSE 942
// result := true ;
 934: LD_ADDR_VAR 0 3
 938: PUSH
 939: LD_INT 1
 941: ST_TO_ADDR
// end ;
 942: LD_VAR 0 3
 946: RET
// export unreachableList ; on DestinationUnreachable ( unit ) do begin if not unit in unreachableList then
 947: LD_VAR 0 1
 951: PUSH
 952: LD_EXP 1
 956: IN
 957: NOT
 958: IFFALSE 989
// unreachableList := Insert ( unreachableList , unreachableList + 1 , unit ) ;
 960: LD_ADDR_EXP 1
 964: PUSH
 965: LD_EXP 1
 969: PPUSH
 970: LD_EXP 1
 974: PUSH
 975: LD_INT 1
 977: PLUS
 978: PPUSH
 979: LD_VAR 0 1
 983: PPUSH
 984: CALL_OW 2
 988: ST_TO_ADDR
// end ;
 989: PPOPN 1
 991: END
// export function ComAttack ( unit , ignore_list ) ; var i , j , target , enemy_list , _list , types_list ; begin
 992: LD_INT 0
 994: PPUSH
 995: PPUSH
 996: PPUSH
 997: PPUSH
 998: PPUSH
 999: PPUSH
1000: PPUSH
// if not IsPlaced ( unit ) then
1001: LD_VAR 0 1
1005: PPUSH
1006: CALL_OW 305
1010: NOT
1011: IFFALSE 1015
// exit ;
1013: GO 1322
// enemy_list := FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) ;
1015: LD_ADDR_VAR 0 7
1019: PUSH
1020: LD_INT 81
1022: PUSH
1023: LD_VAR 0 1
1027: PPUSH
1028: CALL_OW 255
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: PPUSH
1037: CALL_OW 69
1041: ST_TO_ADDR
// if not enemy_list then
1042: LD_VAR 0 7
1046: NOT
1047: IFFALSE 1051
// exit ;
1049: GO 1322
// if ignore_list then
1051: LD_VAR 0 2
1055: IFFALSE 1197
// begin _list := [ ] ;
1057: LD_ADDR_VAR 0 8
1061: PUSH
1062: EMPTY
1063: ST_TO_ADDR
// types_list := [ f_btype , f_weapon , f_class ] ;
1064: LD_ADDR_VAR 0 9
1068: PUSH
1069: LD_INT 30
1071: PUSH
1072: LD_INT 34
1074: PUSH
1075: LD_INT 25
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: LIST
1082: ST_TO_ADDR
// for i = 1 to 3 do
1083: LD_ADDR_VAR 0 4
1087: PUSH
1088: DOUBLE
1089: LD_INT 1
1091: DEC
1092: ST_TO_ADDR
1093: LD_INT 3
1095: PUSH
1096: FOR_TO
1097: IFFALSE 1195
// begin if not ignore_list [ i ] then
1099: LD_VAR 0 2
1103: PUSH
1104: LD_VAR 0 4
1108: ARRAY
1109: NOT
1110: IFFALSE 1116
// continue else
1112: GO 1096
1114: GO 1193
// for j in ignore_list [ i ] do
1116: LD_ADDR_VAR 0 5
1120: PUSH
1121: LD_VAR 0 2
1125: PUSH
1126: LD_VAR 0 4
1130: ARRAY
1131: PUSH
1132: FOR_IN
1133: IFFALSE 1191
// begin _list := Insert ( _list , _list + 1 , UnitFilter ( enemy_list , [ types_list [ i ] , j ] ) ) ;
1135: LD_ADDR_VAR 0 8
1139: PUSH
1140: LD_VAR 0 8
1144: PPUSH
1145: LD_VAR 0 8
1149: PUSH
1150: LD_INT 1
1152: PLUS
1153: PPUSH
1154: LD_VAR 0 7
1158: PPUSH
1159: LD_VAR 0 9
1163: PUSH
1164: LD_VAR 0 4
1168: ARRAY
1169: PUSH
1170: LD_VAR 0 5
1174: PUSH
1175: EMPTY
1176: LIST
1177: LIST
1178: PPUSH
1179: CALL_OW 72
1183: PPUSH
1184: CALL_OW 2
1188: ST_TO_ADDR
// end ;
1189: GO 1132
1191: POP
1192: POP
// end ;
1193: GO 1096
1195: POP
1196: POP
// end ; if enemy_list diff _list > 0 then
1197: LD_VAR 0 7
1201: PUSH
1202: LD_VAR 0 8
1206: PUSH
1207: LD_INT 0
1209: GREATER
1210: DIFF
1211: IFFALSE 1229
// enemy_list := enemy_list diff _list ;
1213: LD_ADDR_VAR 0 7
1217: PUSH
1218: LD_VAR 0 7
1222: PUSH
1223: LD_VAR 0 8
1227: DIFF
1228: ST_TO_ADDR
// target := NearestUnitToUnit ( enemy_list , unit ) ;
1229: LD_ADDR_VAR 0 6
1233: PUSH
1234: LD_VAR 0 7
1238: PPUSH
1239: LD_VAR 0 1
1243: PPUSH
1244: CALL_OW 74
1248: ST_TO_ADDR
// if not DestinationReachable ( unit , GetX ( target ) , GetY ( target ) ) then
1249: LD_VAR 0 1
1253: PPUSH
1254: LD_VAR 0 6
1258: PPUSH
1259: CALL_OW 250
1263: PPUSH
1264: LD_VAR 0 6
1268: PPUSH
1269: CALL_OW 251
1273: PPUSH
1274: CALL 1327 0 3
1278: NOT
1279: IFFALSE 1322
// ComAttackUnit ( unit , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ) ;
1281: LD_VAR 0 1
1285: PPUSH
1286: LD_INT 81
1288: PUSH
1289: LD_VAR 0 1
1293: PPUSH
1294: CALL_OW 255
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: PPUSH
1303: CALL_OW 69
1307: PPUSH
1308: LD_VAR 0 1
1312: PPUSH
1313: CALL_OW 74
1317: PPUSH
1318: CALL_OW 115
// end ;
1322: LD_VAR 0 3
1326: RET
// export function DestinationReachable ( unit , x , y ) ; begin
1327: LD_INT 0
1329: PPUSH
// if unit in unreachableList then
1330: LD_VAR 0 1
1334: PUSH
1335: LD_EXP 1
1339: IN
1340: IFFALSE 1358
// unreachableList := unreachableList diff unit ;
1342: LD_ADDR_EXP 1
1346: PUSH
1347: LD_EXP 1
1351: PUSH
1352: LD_VAR 0 1
1356: DIFF
1357: ST_TO_ADDR
// if ValidHex ( x , y ) then
1358: LD_VAR 0 2
1362: PPUSH
1363: LD_VAR 0 3
1367: PPUSH
1368: CALL_OW 488
1372: IFFALSE 1398
// ComAttackUnit ( unit , HexInfo ( x , y ) ) ;
1374: LD_VAR 0 1
1378: PPUSH
1379: LD_VAR 0 2
1383: PPUSH
1384: LD_VAR 0 3
1388: PPUSH
1389: CALL_OW 428
1393: PPUSH
1394: CALL_OW 115
// Wait ( 1 ) ;
1398: LD_INT 1
1400: PPUSH
1401: CALL_OW 67
// if unit in unreachableList then
1405: LD_VAR 0 1
1409: PUSH
1410: LD_EXP 1
1414: IN
1415: IFFALSE 1427
// result := false else
1417: LD_ADDR_VAR 0 4
1421: PUSH
1422: LD_INT 0
1424: ST_TO_ADDR
1425: GO 1435
// result := true ;
1427: LD_ADDR_VAR 0 4
1431: PUSH
1432: LD_INT 1
1434: ST_TO_ADDR
// end ; end_of_file
1435: LD_VAR 0 4
1439: RET
// export function InitMap ; begin
1440: LD_INT 0
1442: PPUSH
// ResetFog ;
1443: CALL_OW 335
// PrepareAnimals ( 2 , 3 , 3 , nature_area ) ;
1447: LD_INT 2
1449: PPUSH
1450: LD_INT 3
1452: PPUSH
1453: LD_INT 3
1455: PPUSH
1456: LD_INT 1
1458: PPUSH
1459: CALL 28 0 4
// end ;
1463: LD_VAR 0 1
1467: RET
// export function SpawnCrates ; var i ; begin
1468: LD_INT 0
1470: PPUSH
1471: PPUSH
// while ( crates_allow ) do
1472: LD_EXP 13
1476: IFFALSE 1629
// begin Wait ( crates_time + Rand ( - 0 0$10 , 0 0$20 ) ) ;
1478: LD_EXP 11
1482: PUSH
1483: LD_INT 350
1485: NEG
1486: PPUSH
1487: LD_INT 700
1489: PPUSH
1490: CALL_OW 12
1494: PLUS
1495: PPUSH
1496: CALL_OW 67
// for i = 1 to crates_num do
1500: LD_ADDR_VAR 0 2
1504: PUSH
1505: DOUBLE
1506: LD_INT 1
1508: DEC
1509: ST_TO_ADDR
1510: LD_EXP 12
1514: PUSH
1515: FOR_TO
1516: IFFALSE 1625
// begin CreateCratesArea ( Rand ( 1 , 5 ) , crates_main_area , true ) ;
1518: LD_INT 1
1520: PPUSH
1521: LD_INT 5
1523: PPUSH
1524: CALL_OW 12
1528: PPUSH
1529: LD_INT 2
1531: PPUSH
1532: LD_INT 1
1534: PPUSH
1535: CALL_OW 55
// Wait ( Rand ( 0 0$03 , 0 0$12 ) ) ;
1539: LD_INT 105
1541: PPUSH
1542: LD_INT 420
1544: PPUSH
1545: CALL_OW 12
1549: PPUSH
1550: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 5 ) , crates_main_area , true ) ;
1554: LD_INT 1
1556: PPUSH
1557: LD_INT 5
1559: PPUSH
1560: CALL_OW 12
1564: PPUSH
1565: LD_INT 2
1567: PPUSH
1568: LD_INT 1
1570: PPUSH
1571: CALL_OW 55
// Wait ( Rand ( 0 0$04 , 0 0$15 ) ) ;
1575: LD_INT 140
1577: PPUSH
1578: LD_INT 525
1580: PPUSH
1581: CALL_OW 12
1585: PPUSH
1586: CALL_OW 67
// CreateCratesAnyWhere ( Rand ( 1 , 5 ) , true ) ;
1590: LD_INT 1
1592: PPUSH
1593: LD_INT 5
1595: PPUSH
1596: CALL_OW 12
1600: PPUSH
1601: LD_INT 1
1603: PPUSH
1604: CALL_OW 57
// Wait ( Rand ( 0 0$05 , 0 0$10 ) ) ;
1608: LD_INT 175
1610: PPUSH
1611: LD_INT 350
1613: PPUSH
1614: CALL_OW 12
1618: PPUSH
1619: CALL_OW 67
// end ;
1623: GO 1515
1625: POP
1626: POP
// end ;
1627: GO 1472
// end ;
1629: LD_VAR 0 1
1633: RET
// every 1 1$25 trigger game_started do
1634: LD_EXP 10
1638: IFFALSE 1692
1640: GO 1642
1642: DISABLE
// begin enable ;
1643: ENABLE
// if timer <= [ 23 23$00 , 21 21$00 , 19 19$00 ] [ global_diff ] then
1644: LD_EXP 2
1648: PUSH
1649: LD_INT 48300
1651: PUSH
1652: LD_INT 44100
1654: PUSH
1655: LD_INT 39900
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: LIST
1662: PUSH
1663: LD_EXP 3
1667: ARRAY
1668: LESSEQUAL
1669: IFFALSE 1692
// CreateCratesArea ( Rand ( 2 , 5 ) , us_crates , true ) ;
1671: LD_INT 2
1673: PPUSH
1674: LD_INT 5
1676: PPUSH
1677: CALL_OW 12
1681: PPUSH
1682: LD_INT 12
1684: PPUSH
1685: LD_INT 1
1687: PPUSH
1688: CALL_OW 55
// end ;
1692: END
// every 0 0$01 trigger game_started do
1693: LD_EXP 10
1697: IFFALSE 1706
1699: GO 1701
1701: DISABLE
// SpawnCrates ;
1702: CALL 1468 0 0
1706: END
// export timer ; every 1 do
1707: GO 1709
1709: DISABLE
// timer := 0 0$00 ;
1710: LD_ADDR_EXP 2
1714: PUSH
1715: LD_INT 0
1717: ST_TO_ADDR
1718: END
// every 0 0$01 trigger game_started do
1719: LD_EXP 10
1723: IFFALSE 1760
1725: GO 1727
1727: DISABLE
// begin enable ;
1728: ENABLE
// timer := timer + 0 0$01 ;
1729: LD_ADDR_EXP 2
1733: PUSH
1734: LD_EXP 2
1738: PUSH
1739: LD_INT 35
1741: PLUS
1742: ST_TO_ADDR
// Display_Strings := [ #tick , timer ] ;
1743: LD_ADDR_OWVAR 47
1747: PUSH
1748: LD_STRING #tick
1750: PUSH
1751: LD_EXP 2
1755: PUSH
1756: EMPTY
1757: LIST
1758: LIST
1759: ST_TO_ADDR
// end ;
1760: END
// every 0 0$01 trigger timer <= 13 13$00 do
1761: LD_EXP 2
1765: PUSH
1766: LD_INT 27300
1768: LESSEQUAL
1769: IFFALSE 1782
1771: GO 1773
1773: DISABLE
// music_nat := 1 ;
1774: LD_ADDR_OWVAR 71
1778: PUSH
1779: LD_INT 1
1781: ST_TO_ADDR
1782: END
// every 5 5$00 trigger timer > 13 13$00 do
1783: LD_EXP 2
1787: PUSH
1788: LD_INT 27300
1790: GREATER
1791: IFFALSE 1824
1793: GO 1795
1795: DISABLE
// begin enable ;
1796: ENABLE
// music_nat := [ 1 , 3 ] [ Rand ( 1 , 2 ) ] ;
1797: LD_ADDR_OWVAR 71
1801: PUSH
1802: LD_INT 1
1804: PUSH
1805: LD_INT 3
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: PUSH
1812: LD_INT 1
1814: PPUSH
1815: LD_INT 2
1817: PPUSH
1818: CALL_OW 12
1822: ARRAY
1823: ST_TO_ADDR
// end ; end_of_file
1824: END
// export global_diff , ru_force , ru_def , am_def , am_force , ar_def , ar_force ; export game_started ; export crates_time , crates_num , crates_allow ; export sikorski , kurin , heike , ron , jack ; export sikorski_come , russian_produce , beria_action , sikorski_veh ; export function InitTriggers ; begin
1825: LD_INT 0
1827: PPUSH
// game_started := false ;
1828: LD_ADDR_EXP 10
1832: PUSH
1833: LD_INT 0
1835: ST_TO_ADDR
// global_diff := [ 1 , 2 , 3 ] ;
1836: LD_ADDR_EXP 3
1840: PUSH
1841: LD_INT 1
1843: PUSH
1844: LD_INT 2
1846: PUSH
1847: LD_INT 3
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: LIST
1854: ST_TO_ADDR
// crates_time := [ 0 0$55 , 1 1$15 , 1 1$35 ] [ global_diff ] ;
1855: LD_ADDR_EXP 11
1859: PUSH
1860: LD_INT 1925
1862: PUSH
1863: LD_INT 2625
1865: PUSH
1866: LD_INT 3325
1868: PUSH
1869: EMPTY
1870: LIST
1871: LIST
1872: LIST
1873: PUSH
1874: LD_EXP 3
1878: ARRAY
1879: ST_TO_ADDR
// crates_num := [ 3 , 2 , 1 ] [ global_diff ] ;
1880: LD_ADDR_EXP 12
1884: PUSH
1885: LD_INT 3
1887: PUSH
1888: LD_INT 2
1890: PUSH
1891: LD_INT 1
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: LIST
1898: PUSH
1899: LD_EXP 3
1903: ARRAY
1904: ST_TO_ADDR
// crates_allow := false ;
1905: LD_ADDR_EXP 13
1909: PUSH
1910: LD_INT 0
1912: ST_TO_ADDR
// am_def := [ 4 , 3 , 2 ] [ global_diff ] ;
1913: LD_ADDR_EXP 6
1917: PUSH
1918: LD_INT 4
1920: PUSH
1921: LD_INT 3
1923: PUSH
1924: LD_INT 2
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: LIST
1931: PUSH
1932: LD_EXP 3
1936: ARRAY
1937: ST_TO_ADDR
// ru_def := [ 2 , 3 , 4 ] [ global_diff ] ;
1938: LD_ADDR_EXP 5
1942: PUSH
1943: LD_INT 2
1945: PUSH
1946: LD_INT 3
1948: PUSH
1949: LD_INT 4
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: LIST
1956: PUSH
1957: LD_EXP 3
1961: ARRAY
1962: ST_TO_ADDR
// ru_force := [ 16 , 18 , 20 ] [ global_diff ] ;
1963: LD_ADDR_EXP 4
1967: PUSH
1968: LD_INT 16
1970: PUSH
1971: LD_INT 18
1973: PUSH
1974: LD_INT 20
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: LIST
1981: PUSH
1982: LD_EXP 3
1986: ARRAY
1987: ST_TO_ADDR
// ar_def := [ 3 , 4 , 5 ] [ global_diff ] ;
1988: LD_ADDR_EXP 8
1992: PUSH
1993: LD_INT 3
1995: PUSH
1996: LD_INT 4
1998: PUSH
1999: LD_INT 5
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: LIST
2006: PUSH
2007: LD_EXP 3
2011: ARRAY
2012: ST_TO_ADDR
// ar_force := [ 4 , 5 , 6 ] [ global_diff ] ;
2013: LD_ADDR_EXP 9
2017: PUSH
2018: LD_INT 4
2020: PUSH
2021: LD_INT 5
2023: PUSH
2024: LD_INT 6
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: LIST
2031: PUSH
2032: LD_EXP 3
2036: ARRAY
2037: ST_TO_ADDR
// sikorski_come := false ;
2038: LD_ADDR_EXP 19
2042: PUSH
2043: LD_INT 0
2045: ST_TO_ADDR
// russian_produce := false ;
2046: LD_ADDR_EXP 20
2050: PUSH
2051: LD_INT 0
2053: ST_TO_ADDR
// disable ( 99 ) ;
2054: LD_INT 99
2056: DISABLE_MARKED
// end ; end_of_file
2057: LD_VAR 0 1
2061: RET
// export function InitPlayer ; var i , p , un , am , am2 , filter ; begin
2062: LD_INT 0
2064: PPUSH
2065: PPUSH
2066: PPUSH
2067: PPUSH
2068: PPUSH
2069: PPUSH
2070: PPUSH
// uc_nation := nation_american ;
2071: LD_ADDR_OWVAR 21
2075: PUSH
2076: LD_INT 1
2078: ST_TO_ADDR
// am := 1 ;
2079: LD_ADDR_VAR 0 5
2083: PUSH
2084: LD_INT 1
2086: ST_TO_ADDR
// am2 := 4 ;
2087: LD_ADDR_VAR 0 6
2091: PUSH
2092: LD_INT 4
2094: ST_TO_ADDR
// filter := [ ] ;
2095: LD_ADDR_VAR 0 7
2099: PUSH
2100: EMPTY
2101: ST_TO_ADDR
// SetSide ( omikron , am2 ) ;
2102: LD_INT 64
2104: PPUSH
2105: LD_VAR 0 6
2109: PPUSH
2110: CALL_OW 235
// SetBName ( omikron , omikron ) ;
2114: LD_INT 64
2116: PPUSH
2117: LD_STRING omikron
2119: PPUSH
2120: CALL_OW 500
// ResetFog ;
2124: CALL_OW 335
// uc_side := am2 ;
2128: LD_ADDR_OWVAR 20
2132: PUSH
2133: LD_VAR 0 6
2137: ST_TO_ADDR
// for i = 1 to 4 do
2138: LD_ADDR_VAR 0 2
2142: PUSH
2143: DOUBLE
2144: LD_INT 1
2146: DEC
2147: ST_TO_ADDR
2148: LD_INT 4
2150: PUSH
2151: FOR_TO
2152: IFFALSE 2274
// for p = 1 to 2 do
2154: LD_ADDR_VAR 0 3
2158: PUSH
2159: DOUBLE
2160: LD_INT 1
2162: DEC
2163: ST_TO_ADDR
2164: LD_INT 2
2166: PUSH
2167: FOR_TO
2168: IFFALSE 2270
// begin un := CreateHumanWithClass ( i , am_def ) ;
2170: LD_ADDR_VAR 0 4
2174: PUSH
2175: LD_VAR 0 2
2179: PPUSH
2180: LD_EXP 6
2184: PPUSH
2185: CALL 425 0 2
2189: ST_TO_ADDR
// PlaceUnitArea ( un , am_area , false ) ;
2190: LD_VAR 0 4
2194: PPUSH
2195: LD_INT 3
2197: PPUSH
2198: LD_INT 0
2200: PPUSH
2201: CALL_OW 49
// if GetClass ( un ) = 1 then
2205: LD_VAR 0 4
2209: PPUSH
2210: CALL_OW 257
2214: PUSH
2215: LD_INT 1
2217: EQUAL
2218: IFFALSE 2268
// ComEnterUnit ( un , ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] ] ) diff us_spec_b ) [ p ] ) ;
2220: LD_VAR 0 4
2224: PPUSH
2225: LD_INT 22
2227: PUSH
2228: LD_INT 4
2230: PUSH
2231: EMPTY
2232: LIST
2233: LIST
2234: PUSH
2235: LD_INT 30
2237: PUSH
2238: LD_INT 31
2240: PUSH
2241: EMPTY
2242: LIST
2243: LIST
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: PPUSH
2249: CALL_OW 69
2253: PUSH
2254: LD_INT 140
2256: DIFF
2257: PUSH
2258: LD_VAR 0 3
2262: ARRAY
2263: PPUSH
2264: CALL_OW 120
// end ;
2268: GO 2167
2270: POP
2271: POP
2272: GO 2151
2274: POP
2275: POP
// if IsPlaced ( us_spec_b ) then
2276: LD_INT 140
2278: PPUSH
2279: CALL_OW 305
2283: IFFALSE 2347
// begin un := FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 3 ] ] ) [ 1 ] ;
2285: LD_ADDR_VAR 0 4
2289: PUSH
2290: LD_INT 22
2292: PUSH
2293: LD_INT 4
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: LD_INT 25
2302: PUSH
2303: LD_INT 3
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PPUSH
2314: CALL_OW 69
2318: PUSH
2319: LD_INT 1
2321: ARRAY
2322: ST_TO_ADDR
// SetClass ( un , 1 ) ;
2323: LD_VAR 0 4
2327: PPUSH
2328: LD_INT 1
2330: PPUSH
2331: CALL_OW 336
// ComEnterUnit ( un , us_spec_b ) ;
2335: LD_VAR 0 4
2339: PPUSH
2340: LD_INT 140
2342: PPUSH
2343: CALL_OW 120
// end ; vc_chassis := us_medium_wheeled ;
2347: LD_ADDR_OWVAR 37
2351: PUSH
2352: LD_INT 2
2354: ST_TO_ADDR
// vc_engine := engine_solar ;
2355: LD_ADDR_OWVAR 39
2359: PUSH
2360: LD_INT 2
2362: ST_TO_ADDR
// vc_control := control_manual ;
2363: LD_ADDR_OWVAR 38
2367: PUSH
2368: LD_INT 1
2370: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_double_gun , us_gatling_gun ] [ global_diff ] ;
2371: LD_ADDR_OWVAR 40
2375: PUSH
2376: LD_INT 5
2378: PUSH
2379: LD_INT 5
2381: PUSH
2382: LD_INT 4
2384: PUSH
2385: EMPTY
2386: LIST
2387: LIST
2388: LIST
2389: PUSH
2390: LD_EXP 3
2394: ARRAY
2395: ST_TO_ADDR
// un := CreateVehicle ;
2396: LD_ADDR_VAR 0 4
2400: PUSH
2401: CALL_OW 45
2405: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2406: LD_VAR 0 4
2410: PPUSH
2411: LD_INT 4
2413: PPUSH
2414: CALL_OW 233
// PlaceUnitXY ( un , 12 , 17 , false ) ;
2418: LD_VAR 0 4
2422: PPUSH
2423: LD_INT 12
2425: PPUSH
2426: LD_INT 17
2428: PPUSH
2429: LD_INT 0
2431: PPUSH
2432: CALL_OW 48
// vc_chassis := us_light_wheeled ;
2436: LD_ADDR_OWVAR 37
2440: PUSH
2441: LD_INT 1
2443: ST_TO_ADDR
// vc_engine := engine_combustion ;
2444: LD_ADDR_OWVAR 39
2448: PUSH
2449: LD_INT 1
2451: ST_TO_ADDR
// vc_control := control_manual ;
2452: LD_ADDR_OWVAR 38
2456: PUSH
2457: LD_INT 1
2459: ST_TO_ADDR
// vc_weapon := us_light_gun ;
2460: LD_ADDR_OWVAR 40
2464: PUSH
2465: LD_INT 3
2467: ST_TO_ADDR
// un := CreateVehicle ;
2468: LD_ADDR_VAR 0 4
2472: PUSH
2473: CALL_OW 45
2477: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2478: LD_VAR 0 4
2482: PPUSH
2483: LD_INT 4
2485: PPUSH
2486: CALL_OW 233
// PlaceUnitXY ( un , 19 , 19 , false ) ;
2490: LD_VAR 0 4
2494: PPUSH
2495: LD_INT 19
2497: PPUSH
2498: LD_INT 19
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: CALL_OW 48
// uc_side := am ;
2508: LD_ADDR_OWVAR 20
2512: PUSH
2513: LD_VAR 0 5
2517: ST_TO_ADDR
// hc_importance := 100 ;
2518: LD_ADDR_OWVAR 32
2522: PUSH
2523: LD_INT 100
2525: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
2526: LD_ADDR_OWVAR 26
2530: PUSH
2531: LD_STRING Jeremy Sikorski
2533: ST_TO_ADDR
// hc_gallery := us ;
2534: LD_ADDR_OWVAR 33
2538: PUSH
2539: LD_STRING us
2541: ST_TO_ADDR
// hc_face_number := 19 ;
2542: LD_ADDR_OWVAR 34
2546: PUSH
2547: LD_INT 19
2549: ST_TO_ADDR
// hc_skills := [ Rand ( am_def + 2 , am_def + 4 ) , Rand ( am_def - 1 , am_def + 1 ) , Rand ( am_def - 1 , am_def + 1 ) , Rand ( am_def - 1 , am_def + 1 ) ] ;
2550: LD_ADDR_OWVAR 31
2554: PUSH
2555: LD_EXP 6
2559: PUSH
2560: LD_INT 2
2562: PLUS
2563: PPUSH
2564: LD_EXP 6
2568: PUSH
2569: LD_INT 4
2571: PLUS
2572: PPUSH
2573: CALL_OW 12
2577: PUSH
2578: LD_EXP 6
2582: PUSH
2583: LD_INT 1
2585: MINUS
2586: PPUSH
2587: LD_EXP 6
2591: PUSH
2592: LD_INT 1
2594: PLUS
2595: PPUSH
2596: CALL_OW 12
2600: PUSH
2601: LD_EXP 6
2605: PUSH
2606: LD_INT 1
2608: MINUS
2609: PPUSH
2610: LD_EXP 6
2614: PUSH
2615: LD_INT 1
2617: PLUS
2618: PPUSH
2619: CALL_OW 12
2623: PUSH
2624: LD_EXP 6
2628: PUSH
2629: LD_INT 1
2631: MINUS
2632: PPUSH
2633: LD_EXP 6
2637: PUSH
2638: LD_INT 1
2640: PLUS
2641: PPUSH
2642: CALL_OW 12
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: LIST
2651: LIST
2652: ST_TO_ADDR
// hc_sex := sex_male ;
2653: LD_ADDR_OWVAR 27
2657: PUSH
2658: LD_INT 1
2660: ST_TO_ADDR
// hc_class := 1 ;
2661: LD_ADDR_OWVAR 28
2665: PUSH
2666: LD_INT 1
2668: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2669: LD_ADDR_OWVAR 29
2673: PUSH
2674: LD_INT 10
2676: PUSH
2677: LD_INT 12
2679: PUSH
2680: EMPTY
2681: LIST
2682: LIST
2683: ST_TO_ADDR
// sikorski := CreateHuman ;
2684: LD_ADDR_EXP 14
2688: PUSH
2689: CALL_OW 44
2693: ST_TO_ADDR
// if global_diff > 1 then
2694: LD_EXP 3
2698: PUSH
2699: LD_INT 1
2701: GREATER
2702: IFFALSE 2721
// PlaceUnitArea ( sikorski , sikorski_area , false ) else
2704: LD_EXP 14
2708: PPUSH
2709: LD_INT 8
2711: PPUSH
2712: LD_INT 0
2714: PPUSH
2715: CALL_OW 49
2719: GO 2812
// begin vc_chassis := us_light_wheeled ;
2721: LD_ADDR_OWVAR 37
2725: PUSH
2726: LD_INT 1
2728: ST_TO_ADDR
// vc_engine := engine_combustion ;
2729: LD_ADDR_OWVAR 39
2733: PUSH
2734: LD_INT 1
2736: ST_TO_ADDR
// vc_control := control_manual ;
2737: LD_ADDR_OWVAR 38
2741: PUSH
2742: LD_INT 1
2744: ST_TO_ADDR
// vc_weapon := us_machine_gun ;
2745: LD_ADDR_OWVAR 40
2749: PUSH
2750: LD_INT 2
2752: ST_TO_ADDR
// vc_fuel_battery := 21 ;
2753: LD_ADDR_OWVAR 41
2757: PUSH
2758: LD_INT 21
2760: ST_TO_ADDR
// sikorski_veh := CreateVehicle ;
2761: LD_ADDR_EXP 22
2765: PUSH
2766: CALL_OW 45
2770: ST_TO_ADDR
// SetDir ( sikorski_veh , 0 ) ;
2771: LD_EXP 22
2775: PPUSH
2776: LD_INT 0
2778: PPUSH
2779: CALL_OW 233
// PlaceUnitArea ( sikorski_veh , sikorski_area , false ) ;
2783: LD_EXP 22
2787: PPUSH
2788: LD_INT 8
2790: PPUSH
2791: LD_INT 0
2793: PPUSH
2794: CALL_OW 49
// PlaceHumanInUnit ( sikorski , sikorski_veh ) ;
2798: LD_EXP 14
2802: PPUSH
2803: LD_EXP 22
2807: PPUSH
2808: CALL_OW 52
// end ; hc_importance := 0 ;
2812: LD_ADDR_OWVAR 32
2816: PUSH
2817: LD_INT 0
2819: ST_TO_ADDR
// hc_name := Ronn Harisson ;
2820: LD_ADDR_OWVAR 26
2824: PUSH
2825: LD_STRING Ronn Harisson
2827: ST_TO_ADDR
// hc_gallery := us ;
2828: LD_ADDR_OWVAR 33
2832: PUSH
2833: LD_STRING us
2835: ST_TO_ADDR
// hc_face_number := 6 ;
2836: LD_ADDR_OWVAR 34
2840: PUSH
2841: LD_INT 6
2843: ST_TO_ADDR
// ron := CreateHuman ;
2844: LD_ADDR_EXP 17
2848: PUSH
2849: CALL_OW 44
2853: ST_TO_ADDR
// hc_name := Jack Dickens ;
2854: LD_ADDR_OWVAR 26
2858: PUSH
2859: LD_STRING Jack Dickens
2861: ST_TO_ADDR
// hc_gallery :=  ;
2862: LD_ADDR_OWVAR 33
2866: PUSH
2867: LD_STRING 
2869: ST_TO_ADDR
// jack := CreateHuman ;
2870: LD_ADDR_EXP 18
2874: PUSH
2875: CALL_OW 44
2879: ST_TO_ADDR
// end ;
2880: LD_VAR 0 1
2884: RET
// every 0 0$01 trigger GetDistUnits ( sikorski , omikron ) <= 45 do
2885: LD_EXP 14
2889: PPUSH
2890: LD_INT 64
2892: PPUSH
2893: CALL_OW 296
2897: PUSH
2898: LD_INT 45
2900: LESSEQUAL
2901: IFFALSE 2951
2903: GO 2905
2905: DISABLE
// ComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_workshop , 16 , 5 , 3 ) ; end_of_file
2906: LD_INT 22
2908: PUSH
2909: LD_INT 4
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: PUSH
2916: LD_INT 25
2918: PUSH
2919: LD_INT 2
2921: PUSH
2922: EMPTY
2923: LIST
2924: LIST
2925: PUSH
2926: EMPTY
2927: LIST
2928: LIST
2929: PPUSH
2930: CALL_OW 69
2934: PPUSH
2935: LD_INT 2
2937: PPUSH
2938: LD_INT 16
2940: PPUSH
2941: LD_INT 5
2943: PPUSH
2944: LD_INT 3
2946: PPUSH
2947: CALL_OW 145
2951: END
// export ru_sold , ru_stw , ru_tw , ru_tech , ru_veh , ru_eng , ru_mech , ru_sci , ru_bul , ru_b ; export ru2_sold , ru2_stw , ru2_tw , ru2_tech , ru2_veh , ru2_eng , ru2_mech , ru2_sci , ru2_bul , ru2_b ; export ru_list_attackers ; export function InitRussian ; var ru , ru2 , i , un , filter ; begin
2952: LD_INT 0
2954: PPUSH
2955: PPUSH
2956: PPUSH
2957: PPUSH
2958: PPUSH
2959: PPUSH
// ru := 6 ;
2960: LD_ADDR_VAR 0 2
2964: PUSH
2965: LD_INT 6
2967: ST_TO_ADDR
// ru2 := 3 ;
2968: LD_ADDR_VAR 0 3
2972: PUSH
2973: LD_INT 3
2975: ST_TO_ADDR
// uc_nation := nation_russian ;
2976: LD_ADDR_OWVAR 21
2980: PUSH
2981: LD_INT 3
2983: ST_TO_ADDR
// ru_radar := 98 ;
2984: LD_ADDR_EXP 46
2988: PUSH
2989: LD_INT 98
2991: ST_TO_ADDR
// ru_list_attackers := [ ] ;
2992: LD_ADDR_EXP 43
2996: PUSH
2997: EMPTY
2998: ST_TO_ADDR
// uc_side := ru ;
2999: LD_ADDR_OWVAR 20
3003: PUSH
3004: LD_VAR 0 2
3008: ST_TO_ADDR
// ru_sold := [ ] ;
3009: LD_ADDR_EXP 23
3013: PUSH
3014: EMPTY
3015: ST_TO_ADDR
// ru_stw := [ ] ;
3016: LD_ADDR_EXP 24
3020: PUSH
3021: EMPTY
3022: ST_TO_ADDR
// ru_tw := [ ] ;
3023: LD_ADDR_EXP 25
3027: PUSH
3028: EMPTY
3029: ST_TO_ADDR
// ru_b := [ ] ;
3030: LD_ADDR_EXP 32
3034: PUSH
3035: EMPTY
3036: ST_TO_ADDR
// ru_eng := [ ] ;
3037: LD_ADDR_EXP 28
3041: PUSH
3042: EMPTY
3043: ST_TO_ADDR
// ru_mech := [ ] ;
3044: LD_ADDR_EXP 29
3048: PUSH
3049: EMPTY
3050: ST_TO_ADDR
// ru_sci := [ ] ;
3051: LD_ADDR_EXP 30
3055: PUSH
3056: EMPTY
3057: ST_TO_ADDR
// ru_bul := [ b_bunker , 162 , 101 , 0 , b_ext_rocket , 149 , 86 , 4 ] ;
3058: LD_ADDR_EXP 31
3062: PUSH
3063: LD_INT 32
3065: PUSH
3066: LD_INT 162
3068: PUSH
3069: LD_INT 101
3071: PUSH
3072: LD_INT 0
3074: PUSH
3075: LD_INT 18
3077: PUSH
3078: LD_INT 149
3080: PUSH
3081: LD_INT 86
3083: PUSH
3084: LD_INT 4
3086: PUSH
3087: EMPTY
3088: LIST
3089: LIST
3090: LIST
3091: LIST
3092: LIST
3093: LIST
3094: LIST
3095: LIST
3096: ST_TO_ADDR
// ru_tech := [ tech_tech1 , tech_tech2 , tech_tech3 , tech_oilpow , tech_oileng , tech_weap1 , tech_weap2 , tech_gatling , tech_advmet , tech_weap3 ] ;
3097: LD_ADDR_EXP 26
3101: PUSH
3102: LD_INT 48
3104: PUSH
3105: LD_INT 49
3107: PUSH
3108: LD_INT 50
3110: PUSH
3111: LD_INT 46
3113: PUSH
3114: LD_INT 47
3116: PUSH
3117: LD_INT 51
3119: PUSH
3120: LD_INT 52
3122: PUSH
3123: LD_INT 69
3125: PUSH
3126: LD_INT 34
3128: PUSH
3129: LD_INT 53
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: LIST
3136: LIST
3137: LIST
3138: LIST
3139: LIST
3140: LIST
3141: LIST
3142: LIST
3143: ST_TO_ADDR
// ru_veh := [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , ru_medium_tracked , engine_combustion , control_manual , ru_crane , ru_medium_tracked , engine_combustion , control_manual , ru_crane ] ;
3144: LD_ADDR_EXP 27
3148: PUSH
3149: LD_INT 21
3151: PUSH
3152: LD_INT 1
3154: PUSH
3155: LD_INT 1
3157: PUSH
3158: LD_INT 51
3160: PUSH
3161: LD_INT 22
3163: PUSH
3164: LD_INT 1
3166: PUSH
3167: LD_INT 1
3169: PUSH
3170: LD_INT 52
3172: PUSH
3173: LD_INT 22
3175: PUSH
3176: LD_INT 1
3178: PUSH
3179: LD_INT 1
3181: PUSH
3182: LD_INT 52
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: ST_TO_ADDR
// SetBName ( kirov , kirov ) ;
3199: LD_INT 71
3201: PPUSH
3202: LD_STRING kirov
3204: PPUSH
3205: CALL_OW 500
// hc_gallery := ru ;
3209: LD_ADDR_OWVAR 33
3213: PUSH
3214: LD_STRING ru
3216: ST_TO_ADDR
// hc_face_number := 8 ;
3217: LD_ADDR_OWVAR 34
3221: PUSH
3222: LD_INT 8
3224: ST_TO_ADDR
// hc_skills := [ 7 , 4 , 3 , 2 ] ;
3225: LD_ADDR_OWVAR 31
3229: PUSH
3230: LD_INT 7
3232: PUSH
3233: LD_INT 4
3235: PUSH
3236: LD_INT 3
3238: PUSH
3239: LD_INT 2
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: ST_TO_ADDR
// hc_sex := sex_male ;
3248: LD_ADDR_OWVAR 27
3252: PUSH
3253: LD_INT 1
3255: ST_TO_ADDR
// hc_name := Ivan Kurin ;
3256: LD_ADDR_OWVAR 26
3260: PUSH
3261: LD_STRING Ivan Kurin
3263: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
3264: LD_ADDR_OWVAR 29
3268: PUSH
3269: LD_INT 10
3271: PUSH
3272: LD_INT 10
3274: PUSH
3275: EMPTY
3276: LIST
3277: LIST
3278: ST_TO_ADDR
// kurin := CreateHuman ;
3279: LD_ADDR_EXP 15
3283: PUSH
3284: CALL_OW 44
3288: ST_TO_ADDR
// PlaceHumanInUnit ( kurin , kirov ) ;
3289: LD_EXP 15
3293: PPUSH
3294: LD_INT 71
3296: PPUSH
3297: CALL_OW 52
// filter := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
3301: LD_ADDR_VAR 0 6
3305: PUSH
3306: LD_INT 22
3308: PUSH
3309: LD_INT 6
3311: PUSH
3312: EMPTY
3313: LIST
3314: LIST
3315: PUSH
3316: LD_INT 30
3318: PUSH
3319: LD_INT 32
3321: PUSH
3322: EMPTY
3323: LIST
3324: LIST
3325: PUSH
3326: EMPTY
3327: LIST
3328: LIST
3329: PPUSH
3330: CALL_OW 69
3334: ST_TO_ADDR
// for i = 1 to ru_force do
3335: LD_ADDR_VAR 0 4
3339: PUSH
3340: DOUBLE
3341: LD_INT 1
3343: DEC
3344: ST_TO_ADDR
3345: LD_EXP 4
3349: PUSH
3350: FOR_TO
3351: IFFALSE 3422
// begin un := CreateHumanWithClass ( 1 , ru_def ) ;
3353: LD_ADDR_VAR 0 5
3357: PUSH
3358: LD_INT 1
3360: PPUSH
3361: LD_EXP 5
3365: PPUSH
3366: CALL 425 0 2
3370: ST_TO_ADDR
// if i <= filter then
3371: LD_VAR 0 4
3375: PUSH
3376: LD_VAR 0 6
3380: LESSEQUAL
3381: IFFALSE 3405
// PlaceHumanInUnit ( un , filter [ i ] ) else
3383: LD_VAR 0 5
3387: PPUSH
3388: LD_VAR 0 6
3392: PUSH
3393: LD_VAR 0 4
3397: ARRAY
3398: PPUSH
3399: CALL_OW 52
3403: GO 3420
// PlaceUnitArea ( un , ru_area , false ) ;
3405: LD_VAR 0 5
3409: PPUSH
3410: LD_INT 4
3412: PPUSH
3413: LD_INT 0
3415: PPUSH
3416: CALL_OW 49
// end ;
3420: GO 3350
3422: POP
3423: POP
// for i = 1 to 6 do
3424: LD_ADDR_VAR 0 4
3428: PUSH
3429: DOUBLE
3430: LD_INT 1
3432: DEC
3433: ST_TO_ADDR
3434: LD_INT 6
3436: PUSH
3437: FOR_TO
3438: IFFALSE 3475
// begin un := CreateHumanWithClass ( 3 , ru_def ) ;
3440: LD_ADDR_VAR 0 5
3444: PUSH
3445: LD_INT 3
3447: PPUSH
3448: LD_EXP 5
3452: PPUSH
3453: CALL 425 0 2
3457: ST_TO_ADDR
// PlaceUnitArea ( un , ru_area , false ) ;
3458: LD_VAR 0 5
3462: PPUSH
3463: LD_INT 4
3465: PPUSH
3466: LD_INT 0
3468: PPUSH
3469: CALL_OW 49
// end ;
3473: GO 3437
3475: POP
3476: POP
// for i = 1 to 3 do
3477: LD_ADDR_VAR 0 4
3481: PUSH
3482: DOUBLE
3483: LD_INT 1
3485: DEC
3486: ST_TO_ADDR
3487: LD_INT 3
3489: PUSH
3490: FOR_TO
3491: IFFALSE 3528
// begin un := CreateHumanWithClass ( 4 , ru_def ) ;
3493: LD_ADDR_VAR 0 5
3497: PUSH
3498: LD_INT 4
3500: PPUSH
3501: LD_EXP 5
3505: PPUSH
3506: CALL 425 0 2
3510: ST_TO_ADDR
// PlaceUnitArea ( un , ru_area , false ) ;
3511: LD_VAR 0 5
3515: PPUSH
3516: LD_INT 4
3518: PPUSH
3519: LD_INT 0
3521: PPUSH
3522: CALL_OW 49
// end ;
3526: GO 3490
3528: POP
3529: POP
// for i = 1 to 4 do
3530: LD_ADDR_VAR 0 4
3534: PUSH
3535: DOUBLE
3536: LD_INT 1
3538: DEC
3539: ST_TO_ADDR
3540: LD_INT 4
3542: PUSH
3543: FOR_TO
3544: IFFALSE 3581
// begin un := CreateHumanWithClass ( 2 , ru_def ) ;
3546: LD_ADDR_VAR 0 5
3550: PUSH
3551: LD_INT 2
3553: PPUSH
3554: LD_EXP 5
3558: PPUSH
3559: CALL 425 0 2
3563: ST_TO_ADDR
// PlaceUnitArea ( un , ru_area , false ) ;
3564: LD_VAR 0 5
3568: PPUSH
3569: LD_INT 4
3571: PPUSH
3572: LD_INT 0
3574: PPUSH
3575: CALL_OW 49
// end ;
3579: GO 3543
3581: POP
3582: POP
// uc_side := ru2 ;
3583: LD_ADDR_OWVAR 20
3587: PUSH
3588: LD_VAR 0 3
3592: ST_TO_ADDR
// ru2_sold := [ ] ;
3593: LD_ADDR_EXP 33
3597: PUSH
3598: EMPTY
3599: ST_TO_ADDR
// ru2_stw := [ ] ;
3600: LD_ADDR_EXP 34
3604: PUSH
3605: EMPTY
3606: ST_TO_ADDR
// ru2_tw := [ ] ;
3607: LD_ADDR_EXP 35
3611: PUSH
3612: EMPTY
3613: ST_TO_ADDR
// ru2_b := [ ] ;
3614: LD_ADDR_EXP 42
3618: PUSH
3619: EMPTY
3620: ST_TO_ADDR
// ru2_eng := [ ] ;
3621: LD_ADDR_EXP 38
3625: PUSH
3626: EMPTY
3627: ST_TO_ADDR
// ru2_mech := [ ] ;
3628: LD_ADDR_EXP 39
3632: PUSH
3633: EMPTY
3634: ST_TO_ADDR
// ru2_sci := [ ] ;
3635: LD_ADDR_EXP 40
3639: PUSH
3640: EMPTY
3641: ST_TO_ADDR
// ru2_bul := [ b_lab , 90 , 71 , 1 , b_armoury , 88 , 58 , 2 , b_workshop , 103 , 66 , 4 , b_oil_power , 106 , 77 , 3 , b_oil_power , 110 , 77 , 3 , b_bunker , 109 , 65 , 4 , b_bunker , 92 , 85 , 0 , b_bunker , 74 , 72 , 0 , b_bunker , 71 , 66 , 2 , b_bunker , 115 , 79 , 4 , b_bunker , 112 , 69 , 4 , b_bunker , 111 , 84 , 5 ] ;
3642: LD_ADDR_EXP 41
3646: PUSH
3647: LD_INT 6
3649: PUSH
3650: LD_INT 90
3652: PUSH
3653: LD_INT 71
3655: PUSH
3656: LD_INT 1
3658: PUSH
3659: LD_INT 4
3661: PUSH
3662: LD_INT 88
3664: PUSH
3665: LD_INT 58
3667: PUSH
3668: LD_INT 2
3670: PUSH
3671: LD_INT 2
3673: PUSH
3674: LD_INT 103
3676: PUSH
3677: LD_INT 66
3679: PUSH
3680: LD_INT 4
3682: PUSH
3683: LD_INT 26
3685: PUSH
3686: LD_INT 106
3688: PUSH
3689: LD_INT 77
3691: PUSH
3692: LD_INT 3
3694: PUSH
3695: LD_INT 26
3697: PUSH
3698: LD_INT 110
3700: PUSH
3701: LD_INT 77
3703: PUSH
3704: LD_INT 3
3706: PUSH
3707: LD_INT 32
3709: PUSH
3710: LD_INT 109
3712: PUSH
3713: LD_INT 65
3715: PUSH
3716: LD_INT 4
3718: PUSH
3719: LD_INT 32
3721: PUSH
3722: LD_INT 92
3724: PUSH
3725: LD_INT 85
3727: PUSH
3728: LD_INT 0
3730: PUSH
3731: LD_INT 32
3733: PUSH
3734: LD_INT 74
3736: PUSH
3737: LD_INT 72
3739: PUSH
3740: LD_INT 0
3742: PUSH
3743: LD_INT 32
3745: PUSH
3746: LD_INT 71
3748: PUSH
3749: LD_INT 66
3751: PUSH
3752: LD_INT 2
3754: PUSH
3755: LD_INT 32
3757: PUSH
3758: LD_INT 115
3760: PUSH
3761: LD_INT 79
3763: PUSH
3764: LD_INT 4
3766: PUSH
3767: LD_INT 32
3769: PUSH
3770: LD_INT 112
3772: PUSH
3773: LD_INT 69
3775: PUSH
3776: LD_INT 4
3778: PUSH
3779: LD_INT 32
3781: PUSH
3782: LD_INT 111
3784: PUSH
3785: LD_INT 84
3787: PUSH
3788: LD_INT 5
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: LIST
3810: LIST
3811: LIST
3812: LIST
3813: LIST
3814: LIST
3815: LIST
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: ST_TO_ADDR
// ru2_tech := [ tech_tech1 , tech_tech2 , tech_weap1 , tech_weap2 , tech_gatling , tech_gun , tech_advmet , tech_weap3 , tech_tech3 ] ;
3841: LD_ADDR_EXP 36
3845: PUSH
3846: LD_INT 48
3848: PUSH
3849: LD_INT 49
3851: PUSH
3852: LD_INT 51
3854: PUSH
3855: LD_INT 52
3857: PUSH
3858: LD_INT 69
3860: PUSH
3861: LD_INT 39
3863: PUSH
3864: LD_INT 34
3866: PUSH
3867: LD_INT 53
3869: PUSH
3870: LD_INT 50
3872: PUSH
3873: EMPTY
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: LIST
3882: LIST
3883: ST_TO_ADDR
// ru2_veh := [ ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , ru_medium_tracked , engine_combustion , control_manual , ru_crane , ru_medium_tracked , engine_combustion , control_manual , ru_crane ] ;
3884: LD_ADDR_EXP 37
3888: PUSH
3889: LD_INT 21
3891: PUSH
3892: LD_INT 1
3894: PUSH
3895: LD_INT 1
3897: PUSH
3898: LD_INT 51
3900: PUSH
3901: LD_INT 22
3903: PUSH
3904: LD_INT 1
3906: PUSH
3907: LD_INT 1
3909: PUSH
3910: LD_INT 52
3912: PUSH
3913: LD_INT 22
3915: PUSH
3916: LD_INT 1
3918: PUSH
3919: LD_INT 1
3921: PUSH
3922: LD_INT 52
3924: PUSH
3925: EMPTY
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: ST_TO_ADDR
// SetBName ( beria , beria ) ;
3939: LD_INT 106
3941: PPUSH
3942: LD_STRING beria
3944: PPUSH
3945: CALL_OW 500
// SetBName ( kagan , kagan ) ;
3949: LD_INT 112
3951: PPUSH
3952: LD_STRING kagan
3954: PPUSH
3955: CALL_OW 500
// for i = 1 to 12 do
3959: LD_ADDR_VAR 0 4
3963: PUSH
3964: DOUBLE
3965: LD_INT 1
3967: DEC
3968: ST_TO_ADDR
3969: LD_INT 12
3971: PUSH
3972: FOR_TO
3973: IFFALSE 4010
// begin un := CreateHumanWithClass ( 1 , ru_def ) ;
3975: LD_ADDR_VAR 0 5
3979: PUSH
3980: LD_INT 1
3982: PPUSH
3983: LD_EXP 5
3987: PPUSH
3988: CALL 425 0 2
3992: ST_TO_ADDR
// PlaceUnitArea ( un , ru2_area , false ) ;
3993: LD_VAR 0 5
3997: PPUSH
3998: LD_INT 9
4000: PPUSH
4001: LD_INT 0
4003: PPUSH
4004: CALL_OW 49
// end ;
4008: GO 3972
4010: POP
4011: POP
// for i = 1 to 6 do
4012: LD_ADDR_VAR 0 4
4016: PUSH
4017: DOUBLE
4018: LD_INT 1
4020: DEC
4021: ST_TO_ADDR
4022: LD_INT 6
4024: PUSH
4025: FOR_TO
4026: IFFALSE 4063
// begin un := CreateHumanWithClass ( 3 , ru_def ) ;
4028: LD_ADDR_VAR 0 5
4032: PUSH
4033: LD_INT 3
4035: PPUSH
4036: LD_EXP 5
4040: PPUSH
4041: CALL 425 0 2
4045: ST_TO_ADDR
// PlaceUnitArea ( un , ru2_area , false ) ;
4046: LD_VAR 0 5
4050: PPUSH
4051: LD_INT 9
4053: PPUSH
4054: LD_INT 0
4056: PPUSH
4057: CALL_OW 49
// end ;
4061: GO 4025
4063: POP
4064: POP
// for i = 1 to 4 do
4065: LD_ADDR_VAR 0 4
4069: PUSH
4070: DOUBLE
4071: LD_INT 1
4073: DEC
4074: ST_TO_ADDR
4075: LD_INT 4
4077: PUSH
4078: FOR_TO
4079: IFFALSE 4116
// begin un := CreateHumanWithClass ( 4 , ru_def ) ;
4081: LD_ADDR_VAR 0 5
4085: PUSH
4086: LD_INT 4
4088: PPUSH
4089: LD_EXP 5
4093: PPUSH
4094: CALL 425 0 2
4098: ST_TO_ADDR
// PlaceUnitArea ( un , ru2_area , false ) ;
4099: LD_VAR 0 5
4103: PPUSH
4104: LD_INT 9
4106: PPUSH
4107: LD_INT 0
4109: PPUSH
4110: CALL_OW 49
// end ;
4114: GO 4078
4116: POP
4117: POP
// for i = 1 to 4 do
4118: LD_ADDR_VAR 0 4
4122: PUSH
4123: DOUBLE
4124: LD_INT 1
4126: DEC
4127: ST_TO_ADDR
4128: LD_INT 4
4130: PUSH
4131: FOR_TO
4132: IFFALSE 4169
// begin un := CreateHumanWithClass ( 2 , ru_def ) ;
4134: LD_ADDR_VAR 0 5
4138: PUSH
4139: LD_INT 2
4141: PPUSH
4142: LD_EXP 5
4146: PPUSH
4147: CALL 425 0 2
4151: ST_TO_ADDR
// PlaceUnitArea ( un , ru2_area , false ) ;
4152: LD_VAR 0 5
4156: PPUSH
4157: LD_INT 9
4159: PPUSH
4160: LD_INT 0
4162: PPUSH
4163: CALL_OW 49
// end ;
4167: GO 4131
4169: POP
4170: POP
// end ;
4171: LD_VAR 0 1
4175: RET
// every 0 0$01 do var i , p , un , filter , h_dmgunit , b_dmgunit , b_unit , b_weap , b_upgrade , enemy_detected ;
4176: GO 4178
4178: DISABLE
4179: LD_INT 0
4181: PPUSH
4182: PPUSH
4183: PPUSH
4184: PPUSH
4185: PPUSH
4186: PPUSH
4187: PPUSH
4188: PPUSH
4189: PPUSH
4190: PPUSH
// begin enable ;
4191: ENABLE
// ru_sold := FilterAllUnits ( [ [ [ f_side , 6 ] , [ f_class , 1 ] , [ f_lives , 600 ] ] ] ) diff Kurin ;
4192: LD_ADDR_EXP 23
4196: PUSH
4197: LD_INT 22
4199: PUSH
4200: LD_INT 6
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PUSH
4207: LD_INT 25
4209: PUSH
4210: LD_INT 1
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PUSH
4217: LD_INT 24
4219: PUSH
4220: LD_INT 600
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: LIST
4231: PUSH
4232: EMPTY
4233: LIST
4234: PPUSH
4235: CALL_OW 69
4239: PUSH
4240: LD_EXP 15
4244: DIFF
4245: ST_TO_ADDR
// ru_eng := FilterAllUnits ( [ [ [ f_side , 6 ] , [ f_class , 2 ] , [ f_lives , 600 ] ] ] ) ;
4246: LD_ADDR_EXP 28
4250: PUSH
4251: LD_INT 22
4253: PUSH
4254: LD_INT 6
4256: PUSH
4257: EMPTY
4258: LIST
4259: LIST
4260: PUSH
4261: LD_INT 25
4263: PUSH
4264: LD_INT 2
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: PUSH
4271: LD_INT 24
4273: PUSH
4274: LD_INT 600
4276: PUSH
4277: EMPTY
4278: LIST
4279: LIST
4280: PUSH
4281: EMPTY
4282: LIST
4283: LIST
4284: LIST
4285: PUSH
4286: EMPTY
4287: LIST
4288: PPUSH
4289: CALL_OW 69
4293: ST_TO_ADDR
// ru_mech := FilterAllUnits ( [ [ [ f_side , 6 ] , [ f_class , 3 ] , [ f_lives , 600 ] ] ] ) ;
4294: LD_ADDR_EXP 29
4298: PUSH
4299: LD_INT 22
4301: PUSH
4302: LD_INT 6
4304: PUSH
4305: EMPTY
4306: LIST
4307: LIST
4308: PUSH
4309: LD_INT 25
4311: PUSH
4312: LD_INT 3
4314: PUSH
4315: EMPTY
4316: LIST
4317: LIST
4318: PUSH
4319: LD_INT 24
4321: PUSH
4322: LD_INT 600
4324: PUSH
4325: EMPTY
4326: LIST
4327: LIST
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: LIST
4333: PUSH
4334: EMPTY
4335: LIST
4336: PPUSH
4337: CALL_OW 69
4341: ST_TO_ADDR
// ru_sci := FilterAllUnits ( [ [ [ f_side , 6 ] , [ f_class , 4 ] , [ f_lives , 600 ] ] ] ) ;
4342: LD_ADDR_EXP 30
4346: PUSH
4347: LD_INT 22
4349: PUSH
4350: LD_INT 6
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: PUSH
4357: LD_INT 25
4359: PUSH
4360: LD_INT 4
4362: PUSH
4363: EMPTY
4364: LIST
4365: LIST
4366: PUSH
4367: LD_INT 24
4369: PUSH
4370: LD_INT 600
4372: PUSH
4373: EMPTY
4374: LIST
4375: LIST
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: LIST
4381: PUSH
4382: EMPTY
4383: LIST
4384: PPUSH
4385: CALL_OW 69
4389: ST_TO_ADDR
// ru_tw := FilterAllUnits ( [ [ [ f_side , 6 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] , [ f_lives , 250 ] ] ] ) ;
4390: LD_ADDR_EXP 25
4394: PUSH
4395: LD_INT 22
4397: PUSH
4398: LD_INT 6
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: PUSH
4405: LD_INT 2
4407: PUSH
4408: LD_INT 30
4410: PUSH
4411: LD_INT 31
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: PUSH
4418: LD_INT 30
4420: PUSH
4421: LD_INT 32
4423: PUSH
4424: EMPTY
4425: LIST
4426: LIST
4427: PUSH
4428: EMPTY
4429: LIST
4430: LIST
4431: LIST
4432: PUSH
4433: LD_INT 24
4435: PUSH
4436: LD_INT 250
4438: PUSH
4439: EMPTY
4440: LIST
4441: LIST
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: LIST
4447: PUSH
4448: EMPTY
4449: LIST
4450: PPUSH
4451: CALL_OW 69
4455: ST_TO_ADDR
// ru_b := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) ;
4456: LD_ADDR_EXP 32
4460: PUSH
4461: LD_INT 22
4463: PUSH
4464: LD_INT 6
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PUSH
4471: LD_INT 21
4473: PUSH
4474: LD_INT 3
4476: PUSH
4477: EMPTY
4478: LIST
4479: LIST
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: PPUSH
4485: CALL_OW 69
4489: ST_TO_ADDR
// b_dmgunit := FilterAllUnits ( [ [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
4490: LD_ADDR_VAR 0 6
4494: PUSH
4495: LD_INT 22
4497: PUSH
4498: LD_INT 6
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PUSH
4505: LD_INT 21
4507: PUSH
4508: LD_INT 3
4510: PUSH
4511: EMPTY
4512: LIST
4513: LIST
4514: PUSH
4515: LD_INT 3
4517: PUSH
4518: LD_INT 24
4520: PUSH
4521: LD_INT 1000
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: LIST
4536: PUSH
4537: EMPTY
4538: LIST
4539: PPUSH
4540: CALL_OW 69
4544: ST_TO_ADDR
// h_dmgunit := FilterAllUnits ( [ [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ] ) ;
4545: LD_ADDR_VAR 0 5
4549: PUSH
4550: LD_INT 22
4552: PUSH
4553: LD_INT 6
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: PUSH
4560: LD_INT 21
4562: PUSH
4563: LD_INT 1
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: PUSH
4570: LD_INT 3
4572: PUSH
4573: LD_INT 24
4575: PUSH
4576: LD_INT 600
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PUSH
4583: EMPTY
4584: LIST
4585: LIST
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: LIST
4591: PUSH
4592: EMPTY
4593: LIST
4594: PPUSH
4595: CALL_OW 69
4599: ST_TO_ADDR
// b_weap := AvailableWeaponList ( ru_fac ) diff [ ru_crane , ru_cargo_bay , ru_bulldozer , ru_radar , 89 ] ;
4600: LD_ADDR_VAR 0 8
4604: PUSH
4605: LD_INT 92
4607: PPUSH
4608: CALL_OW 478
4612: PUSH
4613: LD_INT 52
4615: PUSH
4616: LD_INT 51
4618: PUSH
4619: LD_INT 53
4621: PUSH
4622: LD_EXP 46
4626: PUSH
4627: LD_INT 89
4629: PUSH
4630: EMPTY
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: DIFF
4637: ST_TO_ADDR
// b_upgrade := [ b_depot , b_armoury , b_breastwork , b_workshop ] ;
4638: LD_ADDR_VAR 0 9
4642: PUSH
4643: LD_INT 0
4645: PUSH
4646: LD_INT 4
4648: PUSH
4649: LD_INT 31
4651: PUSH
4652: LD_INT 2
4654: PUSH
4655: EMPTY
4656: LIST
4657: LIST
4658: LIST
4659: LIST
4660: ST_TO_ADDR
// if FilterUnitsInArea ( kirov_strict , [ f_or , [ f_side , 1 ] , [ f_side , 2 ] ] ) > 0 then
4661: LD_INT 10
4663: PPUSH
4664: LD_INT 2
4666: PUSH
4667: LD_INT 22
4669: PUSH
4670: LD_INT 1
4672: PUSH
4673: EMPTY
4674: LIST
4675: LIST
4676: PUSH
4677: LD_INT 22
4679: PUSH
4680: LD_INT 2
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: LIST
4691: PPUSH
4692: CALL_OW 70
4696: PUSH
4697: LD_INT 0
4699: GREATER
4700: IFFALSE 4712
// enemy_detected := true else
4702: LD_ADDR_VAR 0 10
4706: PUSH
4707: LD_INT 1
4709: ST_TO_ADDR
4710: GO 4720
// enemy_detected := false ;
4712: LD_ADDR_VAR 0 10
4716: PUSH
4717: LD_INT 0
4719: ST_TO_ADDR
// if enemy_detected = false then
4720: LD_VAR 0 10
4724: PUSH
4725: LD_INT 0
4727: EQUAL
4728: IFFALSE 4790
// for i = 1 to ru_b do
4730: LD_ADDR_VAR 0 1
4734: PUSH
4735: DOUBLE
4736: LD_INT 1
4738: DEC
4739: ST_TO_ADDR
4740: LD_EXP 32
4744: PUSH
4745: FOR_TO
4746: IFFALSE 4788
// if GetBType ( ru_b [ i ] ) in b_upgrade then
4748: LD_EXP 32
4752: PUSH
4753: LD_VAR 0 1
4757: ARRAY
4758: PPUSH
4759: CALL_OW 266
4763: PUSH
4764: LD_VAR 0 9
4768: IN
4769: IFFALSE 4786
// ComUpgrade ( ru_b [ i ] ) ;
4771: LD_EXP 32
4775: PUSH
4776: LD_VAR 0 1
4780: ARRAY
4781: PPUSH
4782: CALL_OW 146
4786: GO 4745
4788: POP
4789: POP
// if ru_sold > 0 then
4790: LD_EXP 23
4794: PUSH
4795: LD_INT 0
4797: GREATER
4798: IFFALSE 5246
// begin filter := UnitFilter ( ru_sold , [ f_not , [ f_inside ] ] ) ;
4800: LD_ADDR_VAR 0 4
4804: PUSH
4805: LD_EXP 23
4809: PPUSH
4810: LD_INT 3
4812: PUSH
4813: LD_INT 54
4815: PUSH
4816: EMPTY
4817: LIST
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: PPUSH
4823: CALL_OW 72
4827: ST_TO_ADDR
// if UnitFilter ( ru_tw , [ f_empty ] ) > 0 then
4828: LD_EXP 25
4832: PPUSH
4833: LD_INT 58
4835: PUSH
4836: EMPTY
4837: LIST
4838: PPUSH
4839: CALL_OW 72
4843: PUSH
4844: LD_INT 0
4846: GREATER
4847: IFFALSE 4949
// begin if filter = 0 then
4849: LD_VAR 0 4
4853: PUSH
4854: LD_INT 0
4856: EQUAL
4857: IFFALSE 4882
// ComExitBuilding ( ru_sold [ Rand ( 1 , ru_sold ) ] ) ;
4859: LD_EXP 23
4863: PUSH
4864: LD_INT 1
4866: PPUSH
4867: LD_EXP 23
4871: PPUSH
4872: CALL_OW 12
4876: ARRAY
4877: PPUSH
4878: CALL_OW 122
// filter := UnitFilter ( ru_sold , [ f_not , [ f_inside ] ] ) ;
4882: LD_ADDR_VAR 0 4
4886: PUSH
4887: LD_EXP 23
4891: PPUSH
4892: LD_INT 3
4894: PUSH
4895: LD_INT 54
4897: PUSH
4898: EMPTY
4899: LIST
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: PPUSH
4905: CALL_OW 72
4909: ST_TO_ADDR
// if filter then
4910: LD_VAR 0 4
4914: IFFALSE 4949
// ComEnterUnit ( filter [ 1 ] , UnitFilter ( ru_tw , [ f_empty ] ) [ 1 ] ) ;
4916: LD_VAR 0 4
4920: PUSH
4921: LD_INT 1
4923: ARRAY
4924: PPUSH
4925: LD_EXP 25
4929: PPUSH
4930: LD_INT 58
4932: PUSH
4933: EMPTY
4934: LIST
4935: PPUSH
4936: CALL_OW 72
4940: PUSH
4941: LD_INT 1
4943: ARRAY
4944: PPUSH
4945: CALL_OW 120
// end ; if UnitFilter ( ru_tw , [ f_empty ] ) = 0 then
4949: LD_EXP 25
4953: PPUSH
4954: LD_INT 58
4956: PUSH
4957: EMPTY
4958: LIST
4959: PPUSH
4960: CALL_OW 72
4964: PUSH
4965: LD_INT 0
4967: EQUAL
4968: IFFALSE 5123
// begin b_unit := FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
4970: LD_ADDR_VAR 0 7
4974: PUSH
4975: LD_INT 22
4977: PUSH
4978: LD_INT 6
4980: PUSH
4981: EMPTY
4982: LIST
4983: LIST
4984: PUSH
4985: LD_INT 2
4987: PUSH
4988: LD_INT 30
4990: PUSH
4991: LD_INT 4
4993: PUSH
4994: EMPTY
4995: LIST
4996: LIST
4997: PUSH
4998: LD_INT 30
5000: PUSH
5001: LD_INT 5
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: LIST
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: PPUSH
5017: CALL_OW 69
5021: ST_TO_ADDR
// if b_unit > 0 then
5022: LD_VAR 0 7
5026: PUSH
5027: LD_INT 0
5029: GREATER
5030: IFFALSE 5123
// for p = 1 to b_unit do
5032: LD_ADDR_VAR 0 2
5036: PUSH
5037: DOUBLE
5038: LD_INT 1
5040: DEC
5041: ST_TO_ADDR
5042: LD_VAR 0 7
5046: PUSH
5047: FOR_TO
5048: IFFALSE 5121
// if UnitsInSide ( b_unit [ p ] ) < 6 then
5050: LD_VAR 0 7
5054: PUSH
5055: LD_VAR 0 2
5059: ARRAY
5060: PPUSH
5061: CALL_OW 313
5065: PUSH
5066: LD_INT 6
5068: LESS
5069: IFFALSE 5119
// for i = 1 to filter do
5071: LD_ADDR_VAR 0 1
5075: PUSH
5076: DOUBLE
5077: LD_INT 1
5079: DEC
5080: ST_TO_ADDR
5081: LD_VAR 0 4
5085: PUSH
5086: FOR_TO
5087: IFFALSE 5117
// ComEnterUnit ( filter [ i ] , b_unit [ p ] ) ;
5089: LD_VAR 0 4
5093: PUSH
5094: LD_VAR 0 1
5098: ARRAY
5099: PPUSH
5100: LD_VAR 0 7
5104: PUSH
5105: LD_VAR 0 2
5109: ARRAY
5110: PPUSH
5111: CALL_OW 120
5115: GO 5086
5117: POP
5118: POP
5119: GO 5047
5121: POP
5122: POP
// end ; if UnitFilter ( ru_tw , [ [ f_btype , b_bunker ] , [ f_bweapon , 0 ] ] ) > 0 then
5123: LD_EXP 25
5127: PPUSH
5128: LD_INT 30
5130: PUSH
5131: LD_INT 32
5133: PUSH
5134: EMPTY
5135: LIST
5136: LIST
5137: PUSH
5138: LD_INT 35
5140: PUSH
5141: LD_INT 0
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: PPUSH
5152: CALL_OW 72
5156: PUSH
5157: LD_INT 0
5159: GREATER
5160: IFFALSE 5246
// begin filter := UnitFilter ( ru_tw , [ [ f_btype , b_bunker ] , [ f_bweapon , 0 ] ] ) ;
5162: LD_ADDR_VAR 0 4
5166: PUSH
5167: LD_EXP 25
5171: PPUSH
5172: LD_INT 30
5174: PUSH
5175: LD_INT 32
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: PUSH
5182: LD_INT 35
5184: PUSH
5185: LD_INT 0
5187: PUSH
5188: EMPTY
5189: LIST
5190: LIST
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: PPUSH
5196: CALL_OW 72
5200: ST_TO_ADDR
// if BuildingStatus ( ru_fac ) = bs_idle then
5201: LD_INT 92
5203: PPUSH
5204: CALL_OW 461
5208: PUSH
5209: LD_INT 2
5211: EQUAL
5212: IFFALSE 5246
// ComPlaceWeapon ( filter [ 1 ] , b_weap [ Rand ( 1 , b_weap ) ] ) ;
5214: LD_VAR 0 4
5218: PUSH
5219: LD_INT 1
5221: ARRAY
5222: PPUSH
5223: LD_VAR 0 8
5227: PUSH
5228: LD_INT 1
5230: PPUSH
5231: LD_VAR 0 8
5235: PPUSH
5236: CALL_OW 12
5240: ARRAY
5241: PPUSH
5242: CALL_OW 148
// end ; end ; if ru_mech > 0 then
5246: LD_EXP 29
5250: PUSH
5251: LD_INT 0
5253: GREATER
5254: IFFALSE 5314
// for i = 1 to ru_mech do
5256: LD_ADDR_VAR 0 1
5260: PUSH
5261: DOUBLE
5262: LD_INT 1
5264: DEC
5265: ST_TO_ADDR
5266: LD_EXP 29
5270: PUSH
5271: FOR_TO
5272: IFFALSE 5312
// if not IsInUnit ( ru_mech [ i ] ) then
5274: LD_EXP 29
5278: PUSH
5279: LD_VAR 0 1
5283: ARRAY
5284: PPUSH
5285: CALL_OW 310
5289: NOT
5290: IFFALSE 5310
// ComEnterUnit ( ru_mech [ i ] , ru_fac ) ;
5292: LD_EXP 29
5296: PUSH
5297: LD_VAR 0 1
5301: ARRAY
5302: PPUSH
5303: LD_INT 92
5305: PPUSH
5306: CALL_OW 120
5310: GO 5271
5312: POP
5313: POP
// if ru_fac then
5314: LD_INT 92
5316: IFFALSE 5422
// if ru_veh > 0 then
5318: LD_EXP 27
5322: PUSH
5323: LD_INT 0
5325: GREATER
5326: IFFALSE 5422
// if BuildingStatus ( ru_fac ) = bs_idle then
5328: LD_INT 92
5330: PPUSH
5331: CALL_OW 461
5335: PUSH
5336: LD_INT 2
5338: EQUAL
5339: IFFALSE 5422
// begin ComConstruct ( ru_fac , ru_veh [ 1 ] , ru_veh [ 2 ] , ru_veh [ 3 ] , ru_veh [ 4 ] ) ;
5341: LD_INT 92
5343: PPUSH
5344: LD_EXP 27
5348: PUSH
5349: LD_INT 1
5351: ARRAY
5352: PPUSH
5353: LD_EXP 27
5357: PUSH
5358: LD_INT 2
5360: ARRAY
5361: PPUSH
5362: LD_EXP 27
5366: PUSH
5367: LD_INT 3
5369: ARRAY
5370: PPUSH
5371: LD_EXP 27
5375: PUSH
5376: LD_INT 4
5378: ARRAY
5379: PPUSH
5380: CALL_OW 125
// for i = 1 to 4 do
5384: LD_ADDR_VAR 0 1
5388: PUSH
5389: DOUBLE
5390: LD_INT 1
5392: DEC
5393: ST_TO_ADDR
5394: LD_INT 4
5396: PUSH
5397: FOR_TO
5398: IFFALSE 5420
// ru_veh := Delete ( ru_veh , 1 ) ;
5400: LD_ADDR_EXP 27
5404: PUSH
5405: LD_EXP 27
5409: PPUSH
5410: LD_INT 1
5412: PPUSH
5413: CALL_OW 3
5417: ST_TO_ADDR
5418: GO 5397
5420: POP
5421: POP
// end ; if ru_bul > 0 and enemy_detected = false then
5422: LD_EXP 31
5426: PUSH
5427: LD_INT 0
5429: GREATER
5430: PUSH
5431: LD_VAR 0 10
5435: PUSH
5436: LD_INT 0
5438: EQUAL
5439: AND
5440: IFFALSE 5543
// if ru_eng > 0 then
5442: LD_EXP 28
5446: PUSH
5447: LD_INT 0
5449: GREATER
5450: IFFALSE 5543
// for i = 1 to ru_eng do
5452: LD_ADDR_VAR 0 1
5456: PUSH
5457: DOUBLE
5458: LD_INT 1
5460: DEC
5461: ST_TO_ADDR
5462: LD_EXP 28
5466: PUSH
5467: FOR_TO
5468: IFFALSE 5541
// if not HasTask ( ru_eng [ i ] ) then
5470: LD_EXP 28
5474: PUSH
5475: LD_VAR 0 1
5479: ARRAY
5480: PPUSH
5481: CALL_OW 314
5485: NOT
5486: IFFALSE 5539
// begin ComBuild ( ru_eng [ i ] , ru_bul [ 1 ] , ru_bul [ 2 ] , ru_bul [ 3 ] , ru_bul [ 4 ] ) ;
5488: LD_EXP 28
5492: PUSH
5493: LD_VAR 0 1
5497: ARRAY
5498: PPUSH
5499: LD_EXP 31
5503: PUSH
5504: LD_INT 1
5506: ARRAY
5507: PPUSH
5508: LD_EXP 31
5512: PUSH
5513: LD_INT 2
5515: ARRAY
5516: PPUSH
5517: LD_EXP 31
5521: PUSH
5522: LD_INT 3
5524: ARRAY
5525: PPUSH
5526: LD_EXP 31
5530: PUSH
5531: LD_INT 4
5533: ARRAY
5534: PPUSH
5535: CALL_OW 145
// end ;
5539: GO 5467
5541: POP
5542: POP
// if b_dmgunit > 0 then
5543: LD_VAR 0 6
5547: PUSH
5548: LD_INT 0
5550: GREATER
5551: IFFALSE 5736
// begin if ru_eng > 0 then
5553: LD_EXP 28
5557: PUSH
5558: LD_INT 0
5560: GREATER
5561: IFFALSE 5641
// for i = 1 to ru_eng do
5563: LD_ADDR_VAR 0 1
5567: PUSH
5568: DOUBLE
5569: LD_INT 1
5571: DEC
5572: ST_TO_ADDR
5573: LD_EXP 28
5577: PUSH
5578: FOR_TO
5579: IFFALSE 5639
// begin if IsInUnit ( ru_eng [ i ] ) then
5581: LD_EXP 28
5585: PUSH
5586: LD_VAR 0 1
5590: ARRAY
5591: PPUSH
5592: CALL_OW 310
5596: IFFALSE 5613
// ComExitBuilding ( ru_eng [ i ] ) ;
5598: LD_EXP 28
5602: PUSH
5603: LD_VAR 0 1
5607: ARRAY
5608: PPUSH
5609: CALL_OW 122
// ComRepairBuilding ( ru_eng [ i ] , b_dmgunit [ 1 ] ) ;
5613: LD_EXP 28
5617: PUSH
5618: LD_VAR 0 1
5622: ARRAY
5623: PPUSH
5624: LD_VAR 0 6
5628: PUSH
5629: LD_INT 1
5631: ARRAY
5632: PPUSH
5633: CALL_OW 130
// end ;
5637: GO 5578
5639: POP
5640: POP
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_crane ] ] ) > 0 then
5641: LD_INT 22
5643: PUSH
5644: LD_INT 6
5646: PUSH
5647: EMPTY
5648: LIST
5649: LIST
5650: PUSH
5651: LD_INT 34
5653: PUSH
5654: LD_INT 52
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: PUSH
5661: EMPTY
5662: LIST
5663: LIST
5664: PPUSH
5665: CALL_OW 69
5669: PUSH
5670: LD_INT 0
5672: GREATER
5673: IFFALSE 5734
// for p in FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_crane ] ] ) do
5675: LD_ADDR_VAR 0 2
5679: PUSH
5680: LD_INT 22
5682: PUSH
5683: LD_INT 6
5685: PUSH
5686: EMPTY
5687: LIST
5688: LIST
5689: PUSH
5690: LD_INT 34
5692: PUSH
5693: LD_INT 52
5695: PUSH
5696: EMPTY
5697: LIST
5698: LIST
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: PPUSH
5704: CALL_OW 69
5708: PUSH
5709: FOR_IN
5710: IFFALSE 5732
// ComRepairBuilding ( p , b_dmgunit [ 1 ] ) ;
5712: LD_VAR 0 2
5716: PPUSH
5717: LD_VAR 0 6
5721: PUSH
5722: LD_INT 1
5724: ARRAY
5725: PPUSH
5726: CALL_OW 130
5730: GO 5709
5732: POP
5733: POP
// end else
5734: GO 5864
// if ru_bul = 0 then
5736: LD_EXP 31
5740: PUSH
5741: LD_INT 0
5743: EQUAL
5744: IFFALSE 5864
// for i = 1 to ru_eng do
5746: LD_ADDR_VAR 0 1
5750: PUSH
5751: DOUBLE
5752: LD_INT 1
5754: DEC
5755: ST_TO_ADDR
5756: LD_EXP 28
5760: PUSH
5761: FOR_TO
5762: IFFALSE 5862
// if not HasTask ( ru_eng [ i ] ) then
5764: LD_EXP 28
5768: PUSH
5769: LD_VAR 0 1
5773: ARRAY
5774: PPUSH
5775: CALL_OW 314
5779: NOT
5780: IFFALSE 5860
// ComEnterUnit ( ru_eng [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) , ru_eng [ i ] ) ) ;
5782: LD_EXP 28
5786: PUSH
5787: LD_VAR 0 1
5791: ARRAY
5792: PPUSH
5793: LD_INT 22
5795: PUSH
5796: LD_INT 6
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: PUSH
5803: LD_INT 2
5805: PUSH
5806: LD_INT 30
5808: PUSH
5809: LD_INT 0
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: PUSH
5816: LD_INT 30
5818: PUSH
5819: LD_INT 1
5821: PUSH
5822: EMPTY
5823: LIST
5824: LIST
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: LIST
5830: PUSH
5831: EMPTY
5832: LIST
5833: LIST
5834: PPUSH
5835: CALL_OW 69
5839: PPUSH
5840: LD_EXP 28
5844: PUSH
5845: LD_VAR 0 1
5849: ARRAY
5850: PPUSH
5851: CALL_OW 74
5855: PPUSH
5856: CALL_OW 120
5860: GO 5761
5862: POP
5863: POP
// if h_dmgunit > 0 then
5864: LD_VAR 0 5
5868: PUSH
5869: LD_INT 0
5871: GREATER
5872: IFFALSE 6079
// begin for p = 1 to h_dmgunit do
5874: LD_ADDR_VAR 0 2
5878: PUSH
5879: DOUBLE
5880: LD_INT 1
5882: DEC
5883: ST_TO_ADDR
5884: LD_VAR 0 5
5888: PUSH
5889: FOR_TO
5890: IFFALSE 5939
// if GetDistUnits ( h_dmgunit [ p ] , ru_lab ) > 6 then
5892: LD_VAR 0 5
5896: PUSH
5897: LD_VAR 0 2
5901: ARRAY
5902: PPUSH
5903: LD_INT 83
5905: PPUSH
5906: CALL_OW 296
5910: PUSH
5911: LD_INT 6
5913: GREATER
5914: IFFALSE 5937
// ComMoveXY ( h_dmgunit [ p ] , 140 , 76 ) ;
5916: LD_VAR 0 5
5920: PUSH
5921: LD_VAR 0 2
5925: ARRAY
5926: PPUSH
5927: LD_INT 140
5929: PPUSH
5930: LD_INT 76
5932: PPUSH
5933: CALL_OW 111
5937: GO 5889
5939: POP
5940: POP
// if ru_sci > 0 then
5941: LD_EXP 30
5945: PUSH
5946: LD_INT 0
5948: GREATER
5949: IFFALSE 6079
// for i = 1 to ru_sci do
5951: LD_ADDR_VAR 0 1
5955: PUSH
5956: DOUBLE
5957: LD_INT 1
5959: DEC
5960: ST_TO_ADDR
5961: LD_EXP 30
5965: PUSH
5966: FOR_TO
5967: IFFALSE 6077
// if IsInUnit ( ru_sci [ i ] ) then
5969: LD_EXP 30
5973: PUSH
5974: LD_VAR 0 1
5978: ARRAY
5979: PPUSH
5980: CALL_OW 310
5984: IFFALSE 6003
// ComExitBuilding ( ru_sci [ i ] ) else
5986: LD_EXP 30
5990: PUSH
5991: LD_VAR 0 1
5995: ARRAY
5996: PPUSH
5997: CALL_OW 122
6001: GO 6075
// if not HasTask ( ru_sci [ i ] ) then
6003: LD_EXP 30
6007: PUSH
6008: LD_VAR 0 1
6012: ARRAY
6013: PPUSH
6014: CALL_OW 314
6018: NOT
6019: IFFALSE 6075
// if GetDistUnits ( ru_sci [ i ] , h_dmgunit [ 1 ] ) <= 15 then
6021: LD_EXP 30
6025: PUSH
6026: LD_VAR 0 1
6030: ARRAY
6031: PPUSH
6032: LD_VAR 0 5
6036: PUSH
6037: LD_INT 1
6039: ARRAY
6040: PPUSH
6041: CALL_OW 296
6045: PUSH
6046: LD_INT 15
6048: LESSEQUAL
6049: IFFALSE 6075
// ComHeal ( ru_sci [ i ] , h_dmgunit [ 1 ] ) ;
6051: LD_EXP 30
6055: PUSH
6056: LD_VAR 0 1
6060: ARRAY
6061: PPUSH
6062: LD_VAR 0 5
6066: PUSH
6067: LD_INT 1
6069: ARRAY
6070: PPUSH
6071: CALL_OW 128
6075: GO 5966
6077: POP
6078: POP
// end ; if h_dmgunit = 0 then
6079: LD_VAR 0 5
6083: PUSH
6084: LD_INT 0
6086: EQUAL
6087: IFFALSE 6204
// begin for i = 1 to ru_sci do
6089: LD_ADDR_VAR 0 1
6093: PUSH
6094: DOUBLE
6095: LD_INT 1
6097: DEC
6098: ST_TO_ADDR
6099: LD_EXP 30
6103: PUSH
6104: FOR_TO
6105: IFFALSE 6145
// if not IsInUnit ( ru_sci [ i ] ) then
6107: LD_EXP 30
6111: PUSH
6112: LD_VAR 0 1
6116: ARRAY
6117: PPUSH
6118: CALL_OW 310
6122: NOT
6123: IFFALSE 6143
// ComEnterUnit ( ru_sci [ i ] , ru_lab ) ;
6125: LD_EXP 30
6129: PUSH
6130: LD_VAR 0 1
6134: ARRAY
6135: PPUSH
6136: LD_INT 83
6138: PPUSH
6139: CALL_OW 120
6143: GO 6104
6145: POP
6146: POP
// if ru_tech > 0 then
6147: LD_EXP 26
6151: PUSH
6152: LD_INT 0
6154: GREATER
6155: IFFALSE 6204
// if BuildingStatus ( ru_lab ) = bs_idle then
6157: LD_INT 83
6159: PPUSH
6160: CALL_OW 461
6164: PUSH
6165: LD_INT 2
6167: EQUAL
6168: IFFALSE 6204
// begin ComResearch ( ru_lab , ru_tech [ 1 ] ) ;
6170: LD_INT 83
6172: PPUSH
6173: LD_EXP 26
6177: PUSH
6178: LD_INT 1
6180: ARRAY
6181: PPUSH
6182: CALL_OW 124
// ru_tech := Delete ( ru_tech , 1 ) ;
6186: LD_ADDR_EXP 26
6190: PUSH
6191: LD_EXP 26
6195: PPUSH
6196: LD_INT 1
6198: PPUSH
6199: CALL_OW 3
6203: ST_TO_ADDR
// end ; end ; end ;
6204: PPOPN 10
6206: END
// every 20 20$00 trigger ru_fac do var weap ;
6207: LD_INT 92
6209: IFFALSE 6436
6211: GO 6213
6213: DISABLE
6214: LD_INT 0
6216: PPUSH
// begin enable ;
6217: ENABLE
// weap := AvailableWeaponList ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) diff [ ru_crane , ru_cargo_bay , ru_bulldozer , ru_radar ] ;
6218: LD_ADDR_VAR 0 1
6222: PUSH
6223: LD_INT 22
6225: PUSH
6226: LD_INT 6
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: PUSH
6233: LD_INT 30
6235: PUSH
6236: LD_INT 3
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: PPUSH
6247: CALL_OW 69
6251: PUSH
6252: LD_INT 1
6254: ARRAY
6255: PPUSH
6256: CALL_OW 478
6260: PUSH
6261: LD_INT 52
6263: PUSH
6264: LD_INT 51
6266: PUSH
6267: LD_INT 53
6269: PUSH
6270: LD_EXP 46
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: DIFF
6281: ST_TO_ADDR
// ru_veh := ru_veh ^ [ ru_heavy_wheeled , engine_combustion , control_manual , weap [ Rand ( 1 , weap ) ] ] ;
6282: LD_ADDR_EXP 27
6286: PUSH
6287: LD_EXP 27
6291: PUSH
6292: LD_INT 23
6294: PUSH
6295: LD_INT 1
6297: PUSH
6298: LD_INT 1
6300: PUSH
6301: LD_VAR 0 1
6305: PUSH
6306: LD_INT 1
6308: PPUSH
6309: LD_VAR 0 1
6313: PPUSH
6314: CALL_OW 12
6318: ARRAY
6319: PUSH
6320: EMPTY
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: ADD
6326: ST_TO_ADDR
// weap := AvailableWeaponList ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) diff [ ru_crane , ru_cargo_bay , ru_bulldozer , ru_radar ] ;
6327: LD_ADDR_VAR 0 1
6331: PUSH
6332: LD_INT 22
6334: PUSH
6335: LD_INT 3
6337: PUSH
6338: EMPTY
6339: LIST
6340: LIST
6341: PUSH
6342: LD_INT 30
6344: PUSH
6345: LD_INT 3
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PPUSH
6356: CALL_OW 69
6360: PUSH
6361: LD_INT 1
6363: ARRAY
6364: PPUSH
6365: CALL_OW 478
6369: PUSH
6370: LD_INT 52
6372: PUSH
6373: LD_INT 51
6375: PUSH
6376: LD_INT 53
6378: PUSH
6379: LD_EXP 46
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: DIFF
6390: ST_TO_ADDR
// ru2_veh := ru2_veh ^ [ ru_heavy_wheeled , engine_combustion , control_manual , weap [ Rand ( 1 , weap ) ] ] ;
6391: LD_ADDR_EXP 37
6395: PUSH
6396: LD_EXP 37
6400: PUSH
6401: LD_INT 23
6403: PUSH
6404: LD_INT 1
6406: PUSH
6407: LD_INT 1
6409: PUSH
6410: LD_VAR 0 1
6414: PUSH
6415: LD_INT 1
6417: PPUSH
6418: LD_VAR 0 1
6422: PPUSH
6423: CALL_OW 12
6427: ARRAY
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: ADD
6435: ST_TO_ADDR
// end ;
6436: PPOPN 1
6438: END
// every 0 0$03 do var i , c , p , skr , filter , cargo , dep ;
6439: GO 6441
6441: DISABLE
6442: LD_INT 0
6444: PPUSH
6445: PPUSH
6446: PPUSH
6447: PPUSH
6448: PPUSH
6449: PPUSH
6450: PPUSH
// begin enable ;
6451: ENABLE
// filter := FilterAllUnits ( [ [ f_ok ] , [ f_side , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
6452: LD_ADDR_VAR 0 5
6456: PUSH
6457: LD_INT 50
6459: PUSH
6460: EMPTY
6461: LIST
6462: PUSH
6463: LD_INT 22
6465: PUSH
6466: LD_INT 6
6468: PUSH
6469: EMPTY
6470: LIST
6471: LIST
6472: PUSH
6473: LD_INT 2
6475: PUSH
6476: LD_INT 25
6478: PUSH
6479: LD_INT 2
6481: PUSH
6482: EMPTY
6483: LIST
6484: LIST
6485: PUSH
6486: LD_INT 25
6488: PUSH
6489: LD_INT 16
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: PUSH
6496: EMPTY
6497: LIST
6498: LIST
6499: LIST
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: LIST
6505: PPUSH
6506: CALL_OW 69
6510: ST_TO_ADDR
// cargo := FilterAllUnits ( [ [ f_or , [ f_side , 6 ] , [ f_side , 3 ] ] , [ f_weapon , ru_cargo_bay ] , [ f_lives , 600 ] ] ) ;
6511: LD_ADDR_VAR 0 6
6515: PUSH
6516: LD_INT 2
6518: PUSH
6519: LD_INT 22
6521: PUSH
6522: LD_INT 6
6524: PUSH
6525: EMPTY
6526: LIST
6527: LIST
6528: PUSH
6529: LD_INT 22
6531: PUSH
6532: LD_INT 3
6534: PUSH
6535: EMPTY
6536: LIST
6537: LIST
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: LIST
6543: PUSH
6544: LD_INT 34
6546: PUSH
6547: LD_INT 51
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: PUSH
6554: LD_INT 24
6556: PUSH
6557: LD_INT 600
6559: PUSH
6560: EMPTY
6561: LIST
6562: LIST
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: LIST
6568: PPUSH
6569: CALL_OW 69
6573: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_or , [ f_side , 6 ] , [ f_side , 3 ] ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6574: LD_ADDR_VAR 0 7
6578: PUSH
6579: LD_INT 2
6581: PUSH
6582: LD_INT 22
6584: PUSH
6585: LD_INT 6
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: PUSH
6592: LD_INT 22
6594: PUSH
6595: LD_INT 3
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: LIST
6606: PUSH
6607: LD_INT 2
6609: PUSH
6610: LD_INT 30
6612: PUSH
6613: LD_INT 0
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: PUSH
6620: LD_INT 30
6622: PUSH
6623: LD_INT 1
6625: PUSH
6626: EMPTY
6627: LIST
6628: LIST
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: LIST
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PPUSH
6639: CALL_OW 69
6643: ST_TO_ADDR
// skr = GetListOfCratesInArea ( crates_main_area ) ;
6644: LD_ADDR_VAR 0 4
6648: PUSH
6649: LD_INT 2
6651: PPUSH
6652: CALL_OW 435
6656: ST_TO_ADDR
// c = 1 ;
6657: LD_ADDR_VAR 0 2
6661: PUSH
6662: LD_INT 1
6664: ST_TO_ADDR
// if cargo > 0 then
6665: LD_VAR 0 6
6669: PUSH
6670: LD_INT 0
6672: GREATER
6673: IFFALSE 6965
// while c < skr do
6675: LD_VAR 0 2
6679: PUSH
6680: LD_VAR 0 4
6684: LESS
6685: IFFALSE 6965
// begin if cargo then
6687: LD_VAR 0 6
6691: IFFALSE 6963
// for i in cargo do
6693: LD_ADDR_VAR 0 1
6697: PUSH
6698: LD_VAR 0 6
6702: PUSH
6703: FOR_IN
6704: IFFALSE 6961
// begin if not IsOk ( i ) or not skr then
6706: LD_VAR 0 1
6710: PPUSH
6711: CALL_OW 302
6715: NOT
6716: PUSH
6717: LD_VAR 0 4
6721: NOT
6722: OR
6723: IFFALSE 6727
// continue ;
6725: GO 6703
// if c > skr then
6727: LD_VAR 0 2
6731: PUSH
6732: LD_VAR 0 4
6736: GREATER
6737: IFFALSE 6741
// continue ;
6739: GO 6703
// if GetFuel ( i ) > 40 and GetDistUnitXY ( i , skr [ c ] , skr [ c + 1 ] ) < 51 then
6741: LD_VAR 0 1
6745: PPUSH
6746: CALL_OW 261
6750: PUSH
6751: LD_INT 40
6753: GREATER
6754: PUSH
6755: LD_VAR 0 1
6759: PPUSH
6760: LD_VAR 0 4
6764: PUSH
6765: LD_VAR 0 2
6769: ARRAY
6770: PPUSH
6771: LD_VAR 0 4
6775: PUSH
6776: LD_VAR 0 2
6780: PUSH
6781: LD_INT 1
6783: PLUS
6784: ARRAY
6785: PPUSH
6786: CALL_OW 297
6790: PUSH
6791: LD_INT 51
6793: LESS
6794: AND
6795: IFFALSE 6832
// ComCollect ( i , skr [ c ] , skr [ c + 1 ] ) ;
6797: LD_VAR 0 1
6801: PPUSH
6802: LD_VAR 0 4
6806: PUSH
6807: LD_VAR 0 2
6811: ARRAY
6812: PPUSH
6813: LD_VAR 0 4
6817: PUSH
6818: LD_VAR 0 2
6822: PUSH
6823: LD_INT 1
6825: PLUS
6826: ARRAY
6827: PPUSH
6828: CALL_OW 117
// if GetFuel ( i ) <= 40 then
6832: LD_VAR 0 1
6836: PPUSH
6837: CALL_OW 261
6841: PUSH
6842: LD_INT 40
6844: LESSEQUAL
6845: IFFALSE 6945
// begin repeat begin ComMoveXY ( i , GetX ( NearestUnitToUnit ( dep , i ) ) , GetY ( NearestUnitToUnit ( dep , i ) ) ) ;
6847: LD_VAR 0 1
6851: PPUSH
6852: LD_VAR 0 7
6856: PPUSH
6857: LD_VAR 0 1
6861: PPUSH
6862: CALL_OW 74
6866: PPUSH
6867: CALL_OW 250
6871: PPUSH
6872: LD_VAR 0 7
6876: PPUSH
6877: LD_VAR 0 1
6881: PPUSH
6882: CALL_OW 74
6886: PPUSH
6887: CALL_OW 251
6891: PPUSH
6892: CALL_OW 111
// Wait ( 0 0$01 ) ;
6896: LD_INT 35
6898: PPUSH
6899: CALL_OW 67
// end until GetDistUnits ( i , NearestUnitToUnit ( dep , i ) ) < 5 ;
6903: LD_VAR 0 1
6907: PPUSH
6908: LD_VAR 0 7
6912: PPUSH
6913: LD_VAR 0 1
6917: PPUSH
6918: CALL_OW 74
6922: PPUSH
6923: CALL_OW 296
6927: PUSH
6928: LD_INT 5
6930: LESS
6931: IFFALSE 6847
// SetFuel ( i , 100 ) ;
6933: LD_VAR 0 1
6937: PPUSH
6938: LD_INT 100
6940: PPUSH
6941: CALL_OW 240
// end ; c = c + 2 ;
6945: LD_ADDR_VAR 0 2
6949: PUSH
6950: LD_VAR 0 2
6954: PUSH
6955: LD_INT 2
6957: PLUS
6958: ST_TO_ADDR
// end ;
6959: GO 6703
6961: POP
6962: POP
// end ;
6963: GO 6675
// end ;
6965: PPOPN 7
6967: END
// every 0 0$01 do var i , p , un , filter , h_dmgunit , b_dmgunit , b_unit , b_weap , b_upgrade , b_fac , b_labb , b_ext , enemy_detected ;
6968: GO 6970
6970: DISABLE
6971: LD_INT 0
6973: PPUSH
6974: PPUSH
6975: PPUSH
6976: PPUSH
6977: PPUSH
6978: PPUSH
6979: PPUSH
6980: PPUSH
6981: PPUSH
6982: PPUSH
6983: PPUSH
6984: PPUSH
6985: PPUSH
// begin enable ;
6986: ENABLE
// ru2_sold := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_lives , 600 ] ] ] ) ;
6987: LD_ADDR_EXP 33
6991: PUSH
6992: LD_INT 22
6994: PUSH
6995: LD_INT 3
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: PUSH
7002: LD_INT 25
7004: PUSH
7005: LD_INT 1
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PUSH
7012: LD_INT 24
7014: PUSH
7015: LD_INT 600
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: LIST
7026: PUSH
7027: EMPTY
7028: LIST
7029: PPUSH
7030: CALL_OW 69
7034: ST_TO_ADDR
// ru2_eng := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 2 ] , [ f_lives , 600 ] ] ] ) ;
7035: LD_ADDR_EXP 38
7039: PUSH
7040: LD_INT 22
7042: PUSH
7043: LD_INT 3
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: LD_INT 25
7052: PUSH
7053: LD_INT 2
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PUSH
7060: LD_INT 24
7062: PUSH
7063: LD_INT 600
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: LIST
7074: PUSH
7075: EMPTY
7076: LIST
7077: PPUSH
7078: CALL_OW 69
7082: ST_TO_ADDR
// ru2_mech := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 3 ] , [ f_lives , 600 ] ] ] ) ;
7083: LD_ADDR_EXP 39
7087: PUSH
7088: LD_INT 22
7090: PUSH
7091: LD_INT 3
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: PUSH
7098: LD_INT 25
7100: PUSH
7101: LD_INT 3
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: PUSH
7108: LD_INT 24
7110: PUSH
7111: LD_INT 600
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: LIST
7122: PUSH
7123: EMPTY
7124: LIST
7125: PPUSH
7126: CALL_OW 69
7130: ST_TO_ADDR
// ru2_sci := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 4 ] , [ f_lives , 600 ] ] ] ) ;
7131: LD_ADDR_EXP 40
7135: PUSH
7136: LD_INT 22
7138: PUSH
7139: LD_INT 3
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: PUSH
7146: LD_INT 25
7148: PUSH
7149: LD_INT 4
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: PUSH
7156: LD_INT 24
7158: PUSH
7159: LD_INT 600
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: LIST
7170: PUSH
7171: EMPTY
7172: LIST
7173: PPUSH
7174: CALL_OW 69
7178: ST_TO_ADDR
// ru2_tw := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] , [ f_lives , 250 ] ] ] ) ;
7179: LD_ADDR_EXP 35
7183: PUSH
7184: LD_INT 22
7186: PUSH
7187: LD_INT 3
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: LD_INT 2
7196: PUSH
7197: LD_INT 30
7199: PUSH
7200: LD_INT 31
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PUSH
7207: LD_INT 30
7209: PUSH
7210: LD_INT 32
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: LIST
7221: PUSH
7222: LD_INT 24
7224: PUSH
7225: LD_INT 250
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: PUSH
7232: EMPTY
7233: LIST
7234: LIST
7235: LIST
7236: PUSH
7237: EMPTY
7238: LIST
7239: PPUSH
7240: CALL_OW 69
7244: ST_TO_ADDR
// ru2_b := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
7245: LD_ADDR_EXP 42
7249: PUSH
7250: LD_INT 22
7252: PUSH
7253: LD_INT 3
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: PUSH
7260: LD_INT 21
7262: PUSH
7263: LD_INT 3
7265: PUSH
7266: EMPTY
7267: LIST
7268: LIST
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: PPUSH
7274: CALL_OW 69
7278: ST_TO_ADDR
// b_dmgunit := FilterUnitsInArea ( beria_defa , [ [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7279: LD_ADDR_VAR 0 6
7283: PUSH
7284: LD_INT 17
7286: PPUSH
7287: LD_INT 22
7289: PUSH
7290: LD_INT 3
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: PUSH
7297: LD_INT 21
7299: PUSH
7300: LD_INT 3
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: PUSH
7307: LD_INT 3
7309: PUSH
7310: LD_INT 24
7312: PUSH
7313: LD_INT 1000
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: LIST
7328: PUSH
7329: EMPTY
7330: LIST
7331: PPUSH
7332: CALL_OW 70
7336: ST_TO_ADDR
// h_dmgunit := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ] ) ;
7337: LD_ADDR_VAR 0 5
7341: PUSH
7342: LD_INT 22
7344: PUSH
7345: LD_INT 3
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: PUSH
7352: LD_INT 21
7354: PUSH
7355: LD_INT 1
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PUSH
7362: LD_INT 3
7364: PUSH
7365: LD_INT 24
7367: PUSH
7368: LD_INT 600
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PUSH
7375: EMPTY
7376: LIST
7377: LIST
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: LIST
7383: PUSH
7384: EMPTY
7385: LIST
7386: PPUSH
7387: CALL_OW 69
7391: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
7392: LD_INT 22
7394: PUSH
7395: LD_INT 3
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PUSH
7402: LD_INT 30
7404: PUSH
7405: LD_INT 3
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: PPUSH
7416: CALL_OW 69
7420: IFFALSE 7460
// b_fac := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ;
7422: LD_ADDR_VAR 0 10
7426: PUSH
7427: LD_INT 22
7429: PUSH
7430: LD_INT 3
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: PUSH
7437: LD_INT 30
7439: PUSH
7440: LD_INT 3
7442: PUSH
7443: EMPTY
7444: LIST
7445: LIST
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: PPUSH
7451: CALL_OW 69
7455: PUSH
7456: LD_INT 1
7458: ARRAY
7459: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) then
7460: LD_INT 22
7462: PUSH
7463: LD_INT 3
7465: PUSH
7466: EMPTY
7467: LIST
7468: LIST
7469: PUSH
7470: LD_INT 2
7472: PUSH
7473: LD_INT 30
7475: PUSH
7476: LD_INT 6
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: PUSH
7483: LD_INT 30
7485: PUSH
7486: LD_INT 7
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: PUSH
7493: LD_INT 30
7495: PUSH
7496: LD_INT 8
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: PUSH
7503: EMPTY
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: PPUSH
7513: CALL_OW 69
7517: IFFALSE 7586
// b_labb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
7519: LD_ADDR_VAR 0 11
7523: PUSH
7524: LD_INT 22
7526: PUSH
7527: LD_INT 3
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: PUSH
7534: LD_INT 2
7536: PUSH
7537: LD_INT 30
7539: PUSH
7540: LD_INT 6
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PUSH
7547: LD_INT 30
7549: PUSH
7550: LD_INT 7
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: PUSH
7557: LD_INT 30
7559: PUSH
7560: LD_INT 8
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PPUSH
7577: CALL_OW 69
7581: PUSH
7582: LD_INT 1
7584: ARRAY
7585: ST_TO_ADDR
// b_weap := AvailableWeaponList ( b_fac ) diff [ ru_crane , ru_cargo_bay , ru_bulldozer , ru_radar , 89 ] ;
7586: LD_ADDR_VAR 0 8
7590: PUSH
7591: LD_VAR 0 10
7595: PPUSH
7596: CALL_OW 478
7600: PUSH
7601: LD_INT 52
7603: PUSH
7604: LD_INT 51
7606: PUSH
7607: LD_INT 53
7609: PUSH
7610: LD_EXP 46
7614: PUSH
7615: LD_INT 89
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: DIFF
7625: ST_TO_ADDR
// b_upgrade := [ b_depot , b_armoury , b_workshop ] ;
7626: LD_ADDR_VAR 0 9
7630: PUSH
7631: LD_INT 0
7633: PUSH
7634: LD_INT 4
7636: PUSH
7637: LD_INT 2
7639: PUSH
7640: EMPTY
7641: LIST
7642: LIST
7643: LIST
7644: ST_TO_ADDR
// b_ext := [ ] ;
7645: LD_ADDR_VAR 0 12
7649: PUSH
7650: EMPTY
7651: ST_TO_ADDR
// if FilterUnitsInArea ( beria_strict , [ f_or , [ f_side , 1 ] , [ f_side , 2 ] ] ) diff FilterAllUnits ( [ f_weapon , us_radar ] ) > 0 then
7652: LD_INT 11
7654: PPUSH
7655: LD_INT 2
7657: PUSH
7658: LD_INT 22
7660: PUSH
7661: LD_INT 1
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: PUSH
7668: LD_INT 22
7670: PUSH
7671: LD_INT 2
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: LIST
7682: PPUSH
7683: CALL_OW 70
7687: PUSH
7688: LD_INT 34
7690: PUSH
7691: LD_INT 11
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: PPUSH
7698: CALL_OW 69
7702: PUSH
7703: LD_INT 0
7705: GREATER
7706: DIFF
7707: IFFALSE 7719
// enemy_detected := true else
7709: LD_ADDR_VAR 0 13
7713: PUSH
7714: LD_INT 1
7716: ST_TO_ADDR
7717: GO 7727
// enemy_detected := false ;
7719: LD_ADDR_VAR 0 13
7723: PUSH
7724: LD_INT 0
7726: ST_TO_ADDR
// if enemy_detected = false then
7727: LD_VAR 0 13
7731: PUSH
7732: LD_INT 0
7734: EQUAL
7735: IFFALSE 7836
// for i = 1 to ru2_b do
7737: LD_ADDR_VAR 0 1
7741: PUSH
7742: DOUBLE
7743: LD_INT 1
7745: DEC
7746: ST_TO_ADDR
7747: LD_EXP 42
7751: PUSH
7752: FOR_TO
7753: IFFALSE 7834
// begin if GetBType ( ru2_b [ i ] ) in b_upgrade then
7755: LD_EXP 42
7759: PUSH
7760: LD_VAR 0 1
7764: ARRAY
7765: PPUSH
7766: CALL_OW 266
7770: PUSH
7771: LD_VAR 0 9
7775: IN
7776: IFFALSE 7793
// ComUpgrade ( ru2_b [ i ] ) ;
7778: LD_EXP 42
7782: PUSH
7783: LD_VAR 0 1
7787: ARRAY
7788: PPUSH
7789: CALL_OW 146
// if GetBType ( ru2_b [ i ] ) in b_lab then
7793: LD_EXP 42
7797: PUSH
7798: LD_VAR 0 1
7802: ARRAY
7803: PPUSH
7804: CALL_OW 266
7808: PUSH
7809: LD_INT 6
7811: IN
7812: IFFALSE 7832
// ComUpgradeLab ( ru2_b [ i ] , b_lab_weapon ) ;
7814: LD_EXP 42
7818: PUSH
7819: LD_VAR 0 1
7823: ARRAY
7824: PPUSH
7825: LD_INT 10
7827: PPUSH
7828: CALL_OW 147
// end ;
7832: GO 7752
7834: POP
7835: POP
// if ru2_sold > 0 then
7836: LD_EXP 33
7840: PUSH
7841: LD_INT 0
7843: GREATER
7844: IFFALSE 8342
// begin filter := UnitFilter ( ru2_sold , [ f_not , [ f_inside ] ] ) ;
7846: LD_ADDR_VAR 0 4
7850: PUSH
7851: LD_EXP 33
7855: PPUSH
7856: LD_INT 3
7858: PUSH
7859: LD_INT 54
7861: PUSH
7862: EMPTY
7863: LIST
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: PPUSH
7869: CALL_OW 72
7873: ST_TO_ADDR
// if UnitFilter ( ru2_tw , [ f_empty ] ) > 0 then
7874: LD_EXP 35
7878: PPUSH
7879: LD_INT 58
7881: PUSH
7882: EMPTY
7883: LIST
7884: PPUSH
7885: CALL_OW 72
7889: PUSH
7890: LD_INT 0
7892: GREATER
7893: IFFALSE 8043
// begin if filter = 0 then
7895: LD_VAR 0 4
7899: PUSH
7900: LD_INT 0
7902: EQUAL
7903: IFFALSE 7928
// ComExitBuilding ( ru2_sold [ Rand ( 1 , ru2_sold ) ] ) ;
7905: LD_EXP 33
7909: PUSH
7910: LD_INT 1
7912: PPUSH
7913: LD_EXP 33
7917: PPUSH
7918: CALL_OW 12
7922: ARRAY
7923: PPUSH
7924: CALL_OW 122
// if UnitFilter ( filter , [ f_not , [ f_hastask ] ] ) then
7928: LD_VAR 0 4
7932: PPUSH
7933: LD_INT 3
7935: PUSH
7936: LD_INT 60
7938: PUSH
7939: EMPTY
7940: LIST
7941: PUSH
7942: EMPTY
7943: LIST
7944: LIST
7945: PPUSH
7946: CALL_OW 72
7950: IFFALSE 8043
// for i in UnitFilter ( ru2_tw , [ f_empty ] ) do
7952: LD_ADDR_VAR 0 1
7956: PUSH
7957: LD_EXP 35
7961: PPUSH
7962: LD_INT 58
7964: PUSH
7965: EMPTY
7966: LIST
7967: PPUSH
7968: CALL_OW 72
7972: PUSH
7973: FOR_IN
7974: IFFALSE 8041
// begin ComEnterUnit ( UnitFilter ( filter , [ f_not , [ f_hastask ] ] ) [ 1 ] , i ) ;
7976: LD_VAR 0 4
7980: PPUSH
7981: LD_INT 3
7983: PUSH
7984: LD_INT 60
7986: PUSH
7987: EMPTY
7988: LIST
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: PPUSH
7994: CALL_OW 72
7998: PUSH
7999: LD_INT 1
8001: ARRAY
8002: PPUSH
8003: LD_VAR 0 1
8007: PPUSH
8008: CALL_OW 120
// if not UnitFilter ( filter , [ f_not , [ f_hastask ] ] ) then
8012: LD_VAR 0 4
8016: PPUSH
8017: LD_INT 3
8019: PUSH
8020: LD_INT 60
8022: PUSH
8023: EMPTY
8024: LIST
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: PPUSH
8030: CALL_OW 72
8034: NOT
8035: IFFALSE 8039
// break ;
8037: GO 8041
// end ;
8039: GO 7973
8041: POP
8042: POP
// end ; if UnitFilter ( ru2_tw , [ f_empty ] ) = 0 then
8043: LD_EXP 35
8047: PPUSH
8048: LD_INT 58
8050: PUSH
8051: EMPTY
8052: LIST
8053: PPUSH
8054: CALL_OW 72
8058: PUSH
8059: LD_INT 0
8061: EQUAL
8062: IFFALSE 8217
// begin b_unit := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
8064: LD_ADDR_VAR 0 7
8068: PUSH
8069: LD_INT 22
8071: PUSH
8072: LD_INT 3
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: PUSH
8079: LD_INT 2
8081: PUSH
8082: LD_INT 30
8084: PUSH
8085: LD_INT 4
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: PUSH
8092: LD_INT 30
8094: PUSH
8095: LD_INT 5
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: LIST
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: PPUSH
8111: CALL_OW 69
8115: ST_TO_ADDR
// if b_unit > 0 then
8116: LD_VAR 0 7
8120: PUSH
8121: LD_INT 0
8123: GREATER
8124: IFFALSE 8217
// for p = 1 to b_unit do
8126: LD_ADDR_VAR 0 2
8130: PUSH
8131: DOUBLE
8132: LD_INT 1
8134: DEC
8135: ST_TO_ADDR
8136: LD_VAR 0 7
8140: PUSH
8141: FOR_TO
8142: IFFALSE 8215
// if UnitsInSide ( b_unit [ p ] ) < 6 then
8144: LD_VAR 0 7
8148: PUSH
8149: LD_VAR 0 2
8153: ARRAY
8154: PPUSH
8155: CALL_OW 313
8159: PUSH
8160: LD_INT 6
8162: LESS
8163: IFFALSE 8213
// for i = 1 to filter do
8165: LD_ADDR_VAR 0 1
8169: PUSH
8170: DOUBLE
8171: LD_INT 1
8173: DEC
8174: ST_TO_ADDR
8175: LD_VAR 0 4
8179: PUSH
8180: FOR_TO
8181: IFFALSE 8211
// ComEnterUnit ( filter [ i ] , b_unit [ p ] ) ;
8183: LD_VAR 0 4
8187: PUSH
8188: LD_VAR 0 1
8192: ARRAY
8193: PPUSH
8194: LD_VAR 0 7
8198: PUSH
8199: LD_VAR 0 2
8203: ARRAY
8204: PPUSH
8205: CALL_OW 120
8209: GO 8180
8211: POP
8212: POP
8213: GO 8141
8215: POP
8216: POP
// end ; if UnitFilter ( ru2_tw , [ [ f_btype , b_bunker ] , [ f_bweapon , 0 ] ] ) > 0 then
8217: LD_EXP 35
8221: PPUSH
8222: LD_INT 30
8224: PUSH
8225: LD_INT 32
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: PUSH
8232: LD_INT 35
8234: PUSH
8235: LD_INT 0
8237: PUSH
8238: EMPTY
8239: LIST
8240: LIST
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: PPUSH
8246: CALL_OW 72
8250: PUSH
8251: LD_INT 0
8253: GREATER
8254: IFFALSE 8342
// begin filter := UnitFilter ( ru2_tw , [ [ f_btype , b_bunker ] , [ f_bweapon , 0 ] ] ) ;
8256: LD_ADDR_VAR 0 4
8260: PUSH
8261: LD_EXP 35
8265: PPUSH
8266: LD_INT 30
8268: PUSH
8269: LD_INT 32
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: PUSH
8276: LD_INT 35
8278: PUSH
8279: LD_INT 0
8281: PUSH
8282: EMPTY
8283: LIST
8284: LIST
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PPUSH
8290: CALL_OW 72
8294: ST_TO_ADDR
// if BuildingStatus ( b_fac ) = bs_idle then
8295: LD_VAR 0 10
8299: PPUSH
8300: CALL_OW 461
8304: PUSH
8305: LD_INT 2
8307: EQUAL
8308: IFFALSE 8342
// ComPlaceWeapon ( filter [ 1 ] , b_weap [ Rand ( 1 , b_weap ) ] ) ;
8310: LD_VAR 0 4
8314: PUSH
8315: LD_INT 1
8317: ARRAY
8318: PPUSH
8319: LD_VAR 0 8
8323: PUSH
8324: LD_INT 1
8326: PPUSH
8327: LD_VAR 0 8
8331: PPUSH
8332: CALL_OW 12
8336: ARRAY
8337: PPUSH
8338: CALL_OW 148
// end ; end ; if b_fac > 0 and ru2_mech > 0 then
8342: LD_VAR 0 10
8346: PUSH
8347: LD_INT 0
8349: GREATER
8350: PUSH
8351: LD_EXP 39
8355: PUSH
8356: LD_INT 0
8358: GREATER
8359: AND
8360: IFFALSE 8422
// for i = 1 to ru2_mech do
8362: LD_ADDR_VAR 0 1
8366: PUSH
8367: DOUBLE
8368: LD_INT 1
8370: DEC
8371: ST_TO_ADDR
8372: LD_EXP 39
8376: PUSH
8377: FOR_TO
8378: IFFALSE 8420
// if not IsInUnit ( ru2_mech [ i ] ) then
8380: LD_EXP 39
8384: PUSH
8385: LD_VAR 0 1
8389: ARRAY
8390: PPUSH
8391: CALL_OW 310
8395: NOT
8396: IFFALSE 8418
// ComEnterUnit ( ru2_mech [ i ] , b_fac ) ;
8398: LD_EXP 39
8402: PUSH
8403: LD_VAR 0 1
8407: ARRAY
8408: PPUSH
8409: LD_VAR 0 10
8413: PPUSH
8414: CALL_OW 120
8418: GO 8377
8420: POP
8421: POP
// if b_fac > 0 and ru2_veh > 0 then
8422: LD_VAR 0 10
8426: PUSH
8427: LD_INT 0
8429: GREATER
8430: PUSH
8431: LD_EXP 37
8435: PUSH
8436: LD_INT 0
8438: GREATER
8439: AND
8440: IFFALSE 8540
// if BuildingStatus ( b_fac ) = bs_idle then
8442: LD_VAR 0 10
8446: PPUSH
8447: CALL_OW 461
8451: PUSH
8452: LD_INT 2
8454: EQUAL
8455: IFFALSE 8540
// begin ComConstruct ( b_fac , ru2_veh [ 1 ] , ru2_veh [ 2 ] , ru2_veh [ 3 ] , ru2_veh [ 4 ] ) ;
8457: LD_VAR 0 10
8461: PPUSH
8462: LD_EXP 37
8466: PUSH
8467: LD_INT 1
8469: ARRAY
8470: PPUSH
8471: LD_EXP 37
8475: PUSH
8476: LD_INT 2
8478: ARRAY
8479: PPUSH
8480: LD_EXP 37
8484: PUSH
8485: LD_INT 3
8487: ARRAY
8488: PPUSH
8489: LD_EXP 37
8493: PUSH
8494: LD_INT 4
8496: ARRAY
8497: PPUSH
8498: CALL_OW 125
// for i = 1 to 4 do
8502: LD_ADDR_VAR 0 1
8506: PUSH
8507: DOUBLE
8508: LD_INT 1
8510: DEC
8511: ST_TO_ADDR
8512: LD_INT 4
8514: PUSH
8515: FOR_TO
8516: IFFALSE 8538
// ru2_veh := Delete ( ru2_veh , 1 ) ;
8518: LD_ADDR_EXP 37
8522: PUSH
8523: LD_EXP 37
8527: PPUSH
8528: LD_INT 1
8530: PPUSH
8531: CALL_OW 3
8535: ST_TO_ADDR
8536: GO 8515
8538: POP
8539: POP
// end ; if ru2_bul > 0 and enemy_detected = false then
8540: LD_EXP 41
8544: PUSH
8545: LD_INT 0
8547: GREATER
8548: PUSH
8549: LD_VAR 0 13
8553: PUSH
8554: LD_INT 0
8556: EQUAL
8557: AND
8558: IFFALSE 8661
// if ru2_eng > 0 then
8560: LD_EXP 38
8564: PUSH
8565: LD_INT 0
8567: GREATER
8568: IFFALSE 8661
// for i = 1 to ru2_eng do
8570: LD_ADDR_VAR 0 1
8574: PUSH
8575: DOUBLE
8576: LD_INT 1
8578: DEC
8579: ST_TO_ADDR
8580: LD_EXP 38
8584: PUSH
8585: FOR_TO
8586: IFFALSE 8659
// if not HasTask ( ru2_eng [ i ] ) then
8588: LD_EXP 38
8592: PUSH
8593: LD_VAR 0 1
8597: ARRAY
8598: PPUSH
8599: CALL_OW 314
8603: NOT
8604: IFFALSE 8657
// begin ComBuild ( ru2_eng [ i ] , ru2_bul [ 1 ] , ru2_bul [ 2 ] , ru2_bul [ 3 ] , ru2_bul [ 4 ] ) ;
8606: LD_EXP 38
8610: PUSH
8611: LD_VAR 0 1
8615: ARRAY
8616: PPUSH
8617: LD_EXP 41
8621: PUSH
8622: LD_INT 1
8624: ARRAY
8625: PPUSH
8626: LD_EXP 41
8630: PUSH
8631: LD_INT 2
8633: ARRAY
8634: PPUSH
8635: LD_EXP 41
8639: PUSH
8640: LD_INT 3
8642: ARRAY
8643: PPUSH
8644: LD_EXP 41
8648: PUSH
8649: LD_INT 4
8651: ARRAY
8652: PPUSH
8653: CALL_OW 145
// end ;
8657: GO 8585
8659: POP
8660: POP
// for i = 1 to ru2_b do
8661: LD_ADDR_VAR 0 1
8665: PUSH
8666: DOUBLE
8667: LD_INT 1
8669: DEC
8670: ST_TO_ADDR
8671: LD_EXP 42
8675: PUSH
8676: FOR_TO
8677: IFFALSE 8865
// if BuildingStatus ( ru2_b [ i ] ) = bs_need_extension then
8679: LD_EXP 42
8683: PUSH
8684: LD_VAR 0 1
8688: ARRAY
8689: PPUSH
8690: CALL_OW 461
8694: PUSH
8695: LD_INT 8
8697: EQUAL
8698: IFFALSE 8863
// begin b_ext := GetExtPositions ( ru2_b [ i ] ) ;
8700: LD_ADDR_VAR 0 12
8704: PUSH
8705: LD_EXP 42
8709: PUSH
8710: LD_VAR 0 1
8714: ARRAY
8715: PPUSH
8716: CALL_OW 270
8720: ST_TO_ADDR
// if b_ext > 0 and not b_ext_gun in ru2_bul then
8721: LD_VAR 0 12
8725: PUSH
8726: LD_INT 0
8728: GREATER
8729: PUSH
8730: LD_INT 17
8732: PUSH
8733: LD_EXP 41
8737: IN
8738: NOT
8739: AND
8740: IFFALSE 8863
// ru2_bul := ru2_bul ^ [ b_ext_noncombat , b_ext [ 1 ] [ 1 ] , b_ext [ 1 ] [ 2 ] , 3 , b_ext_track , b_ext [ 2 ] [ 1 ] , b_ext [ 2 ] [ 2 ] , 5 , b_ext_gun , b_ext [ 3 ] [ 1 ] , b_ext [ 3 ] [ 2 ] , 2 ] ;
8742: LD_ADDR_EXP 41
8746: PUSH
8747: LD_EXP 41
8751: PUSH
8752: LD_INT 19
8754: PUSH
8755: LD_VAR 0 12
8759: PUSH
8760: LD_INT 1
8762: ARRAY
8763: PUSH
8764: LD_INT 1
8766: ARRAY
8767: PUSH
8768: LD_VAR 0 12
8772: PUSH
8773: LD_INT 1
8775: ARRAY
8776: PUSH
8777: LD_INT 2
8779: ARRAY
8780: PUSH
8781: LD_INT 3
8783: PUSH
8784: LD_INT 16
8786: PUSH
8787: LD_VAR 0 12
8791: PUSH
8792: LD_INT 2
8794: ARRAY
8795: PUSH
8796: LD_INT 1
8798: ARRAY
8799: PUSH
8800: LD_VAR 0 12
8804: PUSH
8805: LD_INT 2
8807: ARRAY
8808: PUSH
8809: LD_INT 2
8811: ARRAY
8812: PUSH
8813: LD_INT 5
8815: PUSH
8816: LD_INT 17
8818: PUSH
8819: LD_VAR 0 12
8823: PUSH
8824: LD_INT 3
8826: ARRAY
8827: PUSH
8828: LD_INT 1
8830: ARRAY
8831: PUSH
8832: LD_VAR 0 12
8836: PUSH
8837: LD_INT 3
8839: ARRAY
8840: PUSH
8841: LD_INT 2
8843: ARRAY
8844: PUSH
8845: LD_INT 2
8847: PUSH
8848: EMPTY
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: ADD
8862: ST_TO_ADDR
// end ;
8863: GO 8676
8865: POP
8866: POP
// if b_dmgunit > 0 then
8867: LD_VAR 0 6
8871: PUSH
8872: LD_INT 0
8874: GREATER
8875: IFFALSE 9060
// begin if ru2_eng > 0 then
8877: LD_EXP 38
8881: PUSH
8882: LD_INT 0
8884: GREATER
8885: IFFALSE 8965
// for i = 1 to ru2_eng do
8887: LD_ADDR_VAR 0 1
8891: PUSH
8892: DOUBLE
8893: LD_INT 1
8895: DEC
8896: ST_TO_ADDR
8897: LD_EXP 38
8901: PUSH
8902: FOR_TO
8903: IFFALSE 8963
// begin if IsInUnit ( ru2_eng [ i ] ) then
8905: LD_EXP 38
8909: PUSH
8910: LD_VAR 0 1
8914: ARRAY
8915: PPUSH
8916: CALL_OW 310
8920: IFFALSE 8937
// ComExitBuilding ( ru2_eng [ i ] ) ;
8922: LD_EXP 38
8926: PUSH
8927: LD_VAR 0 1
8931: ARRAY
8932: PPUSH
8933: CALL_OW 122
// ComRepairBuilding ( ru2_eng [ i ] , b_dmgunit [ 1 ] ) ;
8937: LD_EXP 38
8941: PUSH
8942: LD_VAR 0 1
8946: ARRAY
8947: PPUSH
8948: LD_VAR 0 6
8952: PUSH
8953: LD_INT 1
8955: ARRAY
8956: PPUSH
8957: CALL_OW 130
// end ;
8961: GO 8902
8963: POP
8964: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) > 0 then
8965: LD_INT 22
8967: PUSH
8968: LD_INT 3
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: PUSH
8975: LD_INT 34
8977: PUSH
8978: LD_INT 52
8980: PUSH
8981: EMPTY
8982: LIST
8983: LIST
8984: PUSH
8985: EMPTY
8986: LIST
8987: LIST
8988: PPUSH
8989: CALL_OW 69
8993: PUSH
8994: LD_INT 0
8996: GREATER
8997: IFFALSE 9058
// for p in FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) do
8999: LD_ADDR_VAR 0 2
9003: PUSH
9004: LD_INT 22
9006: PUSH
9007: LD_INT 3
9009: PUSH
9010: EMPTY
9011: LIST
9012: LIST
9013: PUSH
9014: LD_INT 34
9016: PUSH
9017: LD_INT 52
9019: PUSH
9020: EMPTY
9021: LIST
9022: LIST
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: PPUSH
9028: CALL_OW 69
9032: PUSH
9033: FOR_IN
9034: IFFALSE 9056
// ComRepairBuilding ( p , b_dmgunit [ 1 ] ) ;
9036: LD_VAR 0 2
9040: PPUSH
9041: LD_VAR 0 6
9045: PUSH
9046: LD_INT 1
9048: ARRAY
9049: PPUSH
9050: CALL_OW 130
9054: GO 9033
9056: POP
9057: POP
// end else
9058: GO 9188
// if ru2_bul = 0 then
9060: LD_EXP 41
9064: PUSH
9065: LD_INT 0
9067: EQUAL
9068: IFFALSE 9188
// for i = 1 to ru2_eng do
9070: LD_ADDR_VAR 0 1
9074: PUSH
9075: DOUBLE
9076: LD_INT 1
9078: DEC
9079: ST_TO_ADDR
9080: LD_EXP 38
9084: PUSH
9085: FOR_TO
9086: IFFALSE 9186
// if not HasTask ( ru2_eng [ i ] ) then
9088: LD_EXP 38
9092: PUSH
9093: LD_VAR 0 1
9097: ARRAY
9098: PPUSH
9099: CALL_OW 314
9103: NOT
9104: IFFALSE 9184
// ComEnterUnit ( ru2_eng [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) , ru2_eng [ i ] ) ) ;
9106: LD_EXP 38
9110: PUSH
9111: LD_VAR 0 1
9115: ARRAY
9116: PPUSH
9117: LD_INT 22
9119: PUSH
9120: LD_INT 3
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: PUSH
9127: LD_INT 2
9129: PUSH
9130: LD_INT 30
9132: PUSH
9133: LD_INT 0
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: PUSH
9140: LD_INT 30
9142: PUSH
9143: LD_INT 1
9145: PUSH
9146: EMPTY
9147: LIST
9148: LIST
9149: PUSH
9150: EMPTY
9151: LIST
9152: LIST
9153: LIST
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: PPUSH
9159: CALL_OW 69
9163: PPUSH
9164: LD_EXP 38
9168: PUSH
9169: LD_VAR 0 1
9173: ARRAY
9174: PPUSH
9175: CALL_OW 74
9179: PPUSH
9180: CALL_OW 120
9184: GO 9085
9186: POP
9187: POP
// if b_labb > 0 then
9188: LD_VAR 0 11
9192: PUSH
9193: LD_INT 0
9195: GREATER
9196: IFFALSE 9546
// begin if h_dmgunit > 0 then
9198: LD_VAR 0 5
9202: PUSH
9203: LD_INT 0
9205: GREATER
9206: IFFALSE 9415
// begin for p = 1 to h_dmgunit do
9208: LD_ADDR_VAR 0 2
9212: PUSH
9213: DOUBLE
9214: LD_INT 1
9216: DEC
9217: ST_TO_ADDR
9218: LD_VAR 0 5
9222: PUSH
9223: FOR_TO
9224: IFFALSE 9275
// if GetDistUnits ( h_dmgunit [ p ] , b_labb ) > 6 then
9226: LD_VAR 0 5
9230: PUSH
9231: LD_VAR 0 2
9235: ARRAY
9236: PPUSH
9237: LD_VAR 0 11
9241: PPUSH
9242: CALL_OW 296
9246: PUSH
9247: LD_INT 6
9249: GREATER
9250: IFFALSE 9273
// ComMoveXY ( h_dmgunit [ p ] , 95 , 72 ) ;
9252: LD_VAR 0 5
9256: PUSH
9257: LD_VAR 0 2
9261: ARRAY
9262: PPUSH
9263: LD_INT 95
9265: PPUSH
9266: LD_INT 72
9268: PPUSH
9269: CALL_OW 111
9273: GO 9223
9275: POP
9276: POP
// if ru2_sci > 0 then
9277: LD_EXP 40
9281: PUSH
9282: LD_INT 0
9284: GREATER
9285: IFFALSE 9415
// for i = 1 to ru2_sci do
9287: LD_ADDR_VAR 0 1
9291: PUSH
9292: DOUBLE
9293: LD_INT 1
9295: DEC
9296: ST_TO_ADDR
9297: LD_EXP 40
9301: PUSH
9302: FOR_TO
9303: IFFALSE 9413
// if IsInUnit ( ru2_sci [ i ] ) then
9305: LD_EXP 40
9309: PUSH
9310: LD_VAR 0 1
9314: ARRAY
9315: PPUSH
9316: CALL_OW 310
9320: IFFALSE 9339
// ComExitBuilding ( ru2_sci [ i ] ) else
9322: LD_EXP 40
9326: PUSH
9327: LD_VAR 0 1
9331: ARRAY
9332: PPUSH
9333: CALL_OW 122
9337: GO 9411
// if not HasTask ( ru2_sci [ i ] ) then
9339: LD_EXP 40
9343: PUSH
9344: LD_VAR 0 1
9348: ARRAY
9349: PPUSH
9350: CALL_OW 314
9354: NOT
9355: IFFALSE 9411
// if GetDistUnits ( ru2_sci [ i ] , h_dmgunit [ 1 ] ) <= 15 then
9357: LD_EXP 40
9361: PUSH
9362: LD_VAR 0 1
9366: ARRAY
9367: PPUSH
9368: LD_VAR 0 5
9372: PUSH
9373: LD_INT 1
9375: ARRAY
9376: PPUSH
9377: CALL_OW 296
9381: PUSH
9382: LD_INT 15
9384: LESSEQUAL
9385: IFFALSE 9411
// ComHeal ( ru2_sci [ i ] , h_dmgunit [ 1 ] ) ;
9387: LD_EXP 40
9391: PUSH
9392: LD_VAR 0 1
9396: ARRAY
9397: PPUSH
9398: LD_VAR 0 5
9402: PUSH
9403: LD_INT 1
9405: ARRAY
9406: PPUSH
9407: CALL_OW 128
9411: GO 9302
9413: POP
9414: POP
// end ; if h_dmgunit = 0 then
9415: LD_VAR 0 5
9419: PUSH
9420: LD_INT 0
9422: EQUAL
9423: IFFALSE 9546
// begin for i = 1 to ru2_sci do
9425: LD_ADDR_VAR 0 1
9429: PUSH
9430: DOUBLE
9431: LD_INT 1
9433: DEC
9434: ST_TO_ADDR
9435: LD_EXP 40
9439: PUSH
9440: FOR_TO
9441: IFFALSE 9483
// if not IsInUnit ( ru2_sci [ i ] ) then
9443: LD_EXP 40
9447: PUSH
9448: LD_VAR 0 1
9452: ARRAY
9453: PPUSH
9454: CALL_OW 310
9458: NOT
9459: IFFALSE 9481
// ComEnterUnit ( ru2_sci [ i ] , b_labb ) ;
9461: LD_EXP 40
9465: PUSH
9466: LD_VAR 0 1
9470: ARRAY
9471: PPUSH
9472: LD_VAR 0 11
9476: PPUSH
9477: CALL_OW 120
9481: GO 9440
9483: POP
9484: POP
// if ru2_tech > 0 then
9485: LD_EXP 36
9489: PUSH
9490: LD_INT 0
9492: GREATER
9493: IFFALSE 9546
// if BuildingStatus ( b_labb ) = bs_idle then
9495: LD_VAR 0 11
9499: PPUSH
9500: CALL_OW 461
9504: PUSH
9505: LD_INT 2
9507: EQUAL
9508: IFFALSE 9546
// begin ComResearch ( b_labb , ru2_tech [ 1 ] ) ;
9510: LD_VAR 0 11
9514: PPUSH
9515: LD_EXP 36
9519: PUSH
9520: LD_INT 1
9522: ARRAY
9523: PPUSH
9524: CALL_OW 124
// ru2_tech := Delete ( ru2_tech , 1 ) ;
9528: LD_ADDR_EXP 36
9532: PUSH
9533: LD_EXP 36
9537: PPUSH
9538: LD_INT 1
9540: PPUSH
9541: CALL_OW 3
9545: ST_TO_ADDR
// end ; end ; end ; end ;
9546: PPOPN 13
9548: END
// every 0 0$01 trigger russian_produce do
9549: LD_EXP 20
9553: IFFALSE 10002
9555: GO 9557
9557: DISABLE
// begin case global_diff of 1 :
9558: LD_EXP 3
9562: PUSH
9563: LD_INT 1
9565: DOUBLE
9566: EQUAL
9567: IFTRUE 9571
9569: GO 9635
9571: POP
// ru_veh := ru_veh ^ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun ] ; 2 :
9572: LD_ADDR_EXP 27
9576: PUSH
9577: LD_EXP 27
9581: PUSH
9582: LD_INT 21
9584: PUSH
9585: LD_INT 1
9587: PUSH
9588: LD_INT 1
9590: PUSH
9591: LD_INT 42
9593: PUSH
9594: LD_INT 21
9596: PUSH
9597: LD_INT 1
9599: PUSH
9600: LD_INT 1
9602: PUSH
9603: LD_INT 42
9605: PUSH
9606: LD_INT 21
9608: PUSH
9609: LD_INT 1
9611: PUSH
9612: LD_INT 1
9614: PUSH
9615: LD_INT 43
9617: PUSH
9618: EMPTY
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: ADD
9632: ST_TO_ADDR
9633: GO 9780
9635: LD_INT 2
9637: DOUBLE
9638: EQUAL
9639: IFTRUE 9643
9641: GO 9707
9643: POP
// ru_veh := ru_veh ^ [ ru_medium_wheeled , engine_combustion , control_manual , ru_gun , ru_medium_tracked , engine_combustion , control_manual , ru_heavy_machine_gun , ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ; 3 :
9644: LD_ADDR_EXP 27
9648: PUSH
9649: LD_EXP 27
9653: PUSH
9654: LD_INT 21
9656: PUSH
9657: LD_INT 1
9659: PUSH
9660: LD_INT 1
9662: PUSH
9663: LD_INT 44
9665: PUSH
9666: LD_INT 22
9668: PUSH
9669: LD_INT 1
9671: PUSH
9672: LD_INT 1
9674: PUSH
9675: LD_INT 42
9677: PUSH
9678: LD_INT 22
9680: PUSH
9681: LD_INT 1
9683: PUSH
9684: LD_INT 1
9686: PUSH
9687: LD_INT 43
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: ADD
9704: ST_TO_ADDR
9705: GO 9780
9707: LD_INT 3
9709: DOUBLE
9710: EQUAL
9711: IFTRUE 9715
9713: GO 9779
9715: POP
// ru_veh := ru_veh ^ [ ru_heavy_wheeled , engine_combustion , control_manual , ru_gatling_gun , ru_medium_tracked , engine_combustion , control_manual , ru_gun , ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher ] ; end ;
9716: LD_ADDR_EXP 27
9720: PUSH
9721: LD_EXP 27
9725: PUSH
9726: LD_INT 23
9728: PUSH
9729: LD_INT 1
9731: PUSH
9732: LD_INT 1
9734: PUSH
9735: LD_INT 43
9737: PUSH
9738: LD_INT 22
9740: PUSH
9741: LD_INT 1
9743: PUSH
9744: LD_INT 1
9746: PUSH
9747: LD_INT 44
9749: PUSH
9750: LD_INT 22
9752: PUSH
9753: LD_INT 1
9755: PUSH
9756: LD_INT 1
9758: PUSH
9759: LD_INT 45
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: ADD
9776: ST_TO_ADDR
9777: GO 9780
9779: POP
// case global_diff of 1 :
9780: LD_EXP 3
9784: PUSH
9785: LD_INT 1
9787: DOUBLE
9788: EQUAL
9789: IFTRUE 9793
9791: GO 9857
9793: POP
// ru2_veh := ru2_veh ^ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , ru_medium_wheeled , engine_combustion , control_manual , ru_gatling_gun ] ; 2 :
9794: LD_ADDR_EXP 37
9798: PUSH
9799: LD_EXP 37
9803: PUSH
9804: LD_INT 21
9806: PUSH
9807: LD_INT 1
9809: PUSH
9810: LD_INT 1
9812: PUSH
9813: LD_INT 42
9815: PUSH
9816: LD_INT 21
9818: PUSH
9819: LD_INT 1
9821: PUSH
9822: LD_INT 1
9824: PUSH
9825: LD_INT 42
9827: PUSH
9828: LD_INT 21
9830: PUSH
9831: LD_INT 1
9833: PUSH
9834: LD_INT 1
9836: PUSH
9837: LD_INT 43
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: ADD
9854: ST_TO_ADDR
9855: GO 10002
9857: LD_INT 2
9859: DOUBLE
9860: EQUAL
9861: IFTRUE 9865
9863: GO 9929
9865: POP
// ru2_veh := ru2_veh ^ [ ru_medium_wheeled , engine_combustion , control_manual , ru_gun , ru_medium_tracked , engine_combustion , control_manual , ru_gun , ru_medium_tracked , engine_combustion , control_manual , ru_gatling_gun ] ; 3 :
9866: LD_ADDR_EXP 37
9870: PUSH
9871: LD_EXP 37
9875: PUSH
9876: LD_INT 21
9878: PUSH
9879: LD_INT 1
9881: PUSH
9882: LD_INT 1
9884: PUSH
9885: LD_INT 44
9887: PUSH
9888: LD_INT 22
9890: PUSH
9891: LD_INT 1
9893: PUSH
9894: LD_INT 1
9896: PUSH
9897: LD_INT 44
9899: PUSH
9900: LD_INT 22
9902: PUSH
9903: LD_INT 1
9905: PUSH
9906: LD_INT 1
9908: PUSH
9909: LD_INT 43
9911: PUSH
9912: EMPTY
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: ADD
9926: ST_TO_ADDR
9927: GO 10002
9929: LD_INT 3
9931: DOUBLE
9932: EQUAL
9933: IFTRUE 9937
9935: GO 10001
9937: POP
// ru2_veh := ru2_veh ^ [ ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , ru_medium_tracked , engine_combustion , control_manual , ru_gun , ru_medium_tracked , engine_combustion , control_manual , ru_gun ] ; end ;
9938: LD_ADDR_EXP 37
9942: PUSH
9943: LD_EXP 37
9947: PUSH
9948: LD_INT 23
9950: PUSH
9951: LD_INT 1
9953: PUSH
9954: LD_INT 1
9956: PUSH
9957: LD_INT 42
9959: PUSH
9960: LD_INT 22
9962: PUSH
9963: LD_INT 1
9965: PUSH
9966: LD_INT 1
9968: PUSH
9969: LD_INT 44
9971: PUSH
9972: LD_INT 22
9974: PUSH
9975: LD_INT 1
9977: PUSH
9978: LD_INT 1
9980: PUSH
9981: LD_INT 44
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: ADD
9998: ST_TO_ADDR
9999: GO 10002
10001: POP
// end ;
10002: END
// every 12 12$00 trigger timer >= [ 26 26$00 , 21 21$00 , 16 16$00 ] [ global_diff ] and FilterAllUnits ( [ f_side , 3 ] ) > 0 do var veh , i , p , area ;
10003: LD_EXP 2
10007: PUSH
10008: LD_INT 54600
10010: PUSH
10011: LD_INT 44100
10013: PUSH
10014: LD_INT 33600
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: LIST
10021: PUSH
10022: LD_EXP 3
10026: ARRAY
10027: GREATEREQUAL
10028: PUSH
10029: LD_INT 22
10031: PUSH
10032: LD_INT 3
10034: PUSH
10035: EMPTY
10036: LIST
10037: LIST
10038: PPUSH
10039: CALL_OW 69
10043: PUSH
10044: LD_INT 0
10046: GREATER
10047: AND
10048: IFFALSE 10264
10050: GO 10052
10052: DISABLE
10053: LD_INT 0
10055: PPUSH
10056: PPUSH
10057: PPUSH
10058: PPUSH
// begin enable ;
10059: ENABLE
// uc_side := [ 3 , 6 ] [ Rand ( 1 , 2 ) ] ;
10060: LD_ADDR_OWVAR 20
10064: PUSH
10065: LD_INT 3
10067: PUSH
10068: LD_INT 6
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PUSH
10075: LD_INT 1
10077: PPUSH
10078: LD_INT 2
10080: PPUSH
10081: CALL_OW 12
10085: ARRAY
10086: ST_TO_ADDR
// uc_nation := 3 ;
10087: LD_ADDR_OWVAR 21
10091: PUSH
10092: LD_INT 3
10094: ST_TO_ADDR
// area := [ ru_west , south_spawn ] ;
10095: LD_ADDR_VAR 0 4
10099: PUSH
10100: LD_INT 18
10102: PUSH
10103: LD_INT 7
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: ST_TO_ADDR
// p := Rand ( 1 , 2 ) ;
10110: LD_ADDR_VAR 0 3
10114: PUSH
10115: LD_INT 1
10117: PPUSH
10118: LD_INT 2
10120: PPUSH
10121: CALL_OW 12
10125: ST_TO_ADDR
// for i = 1 to Rand ( 1 , 2 ) do
10126: LD_ADDR_VAR 0 2
10130: PUSH
10131: DOUBLE
10132: LD_INT 1
10134: DEC
10135: ST_TO_ADDR
10136: LD_INT 1
10138: PPUSH
10139: LD_INT 2
10141: PPUSH
10142: CALL_OW 12
10146: PUSH
10147: FOR_TO
10148: IFFALSE 10262
// begin vc_chassis := ru_medium_tracked ;
10150: LD_ADDR_OWVAR 37
10154: PUSH
10155: LD_INT 22
10157: ST_TO_ADDR
// vc_engine := engine_combustion ;
10158: LD_ADDR_OWVAR 39
10162: PUSH
10163: LD_INT 1
10165: ST_TO_ADDR
// vc_control := control_manual ;
10166: LD_ADDR_OWVAR 38
10170: PUSH
10171: LD_INT 1
10173: ST_TO_ADDR
// vc_weapon := [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ Rand ( 1 , 3 ) ] ;
10174: LD_ADDR_OWVAR 40
10178: PUSH
10179: LD_INT 43
10181: PUSH
10182: LD_INT 44
10184: PUSH
10185: LD_INT 45
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: LIST
10192: PUSH
10193: LD_INT 1
10195: PPUSH
10196: LD_INT 3
10198: PPUSH
10199: CALL_OW 12
10203: ARRAY
10204: ST_TO_ADDR
// veh := CreateVehicle ;
10205: LD_ADDR_VAR 0 1
10209: PUSH
10210: CALL_OW 45
10214: ST_TO_ADDR
// PlaceUnitArea ( veh , area [ p ] , false ) ;
10215: LD_VAR 0 1
10219: PPUSH
10220: LD_VAR 0 4
10224: PUSH
10225: LD_VAR 0 3
10229: ARRAY
10230: PPUSH
10231: LD_INT 0
10233: PPUSH
10234: CALL_OW 49
// PlaceHumanInUnit ( CreateHumanWithClass ( 3 , ru_def ) , veh ) ;
10238: LD_INT 3
10240: PPUSH
10241: LD_EXP 5
10245: PPUSH
10246: CALL 425 0 2
10250: PPUSH
10251: LD_VAR 0 1
10255: PPUSH
10256: CALL_OW 52
// end ;
10260: GO 10147
10262: POP
10263: POP
// end ;
10264: PPOPN 4
10266: END
// every 4 4$35 trigger FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ru_crane ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] ] ] ] ) >= 6 do var filter , enemy , i , _list ;
10267: LD_INT 2
10269: PUSH
10270: LD_INT 22
10272: PUSH
10273: LD_INT 3
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: LD_INT 22
10282: PUSH
10283: LD_INT 6
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: LIST
10294: PUSH
10295: LD_INT 21
10297: PUSH
10298: LD_INT 2
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: PUSH
10305: LD_INT 3
10307: PUSH
10308: LD_INT 2
10310: PUSH
10311: LD_INT 34
10313: PUSH
10314: LD_INT 52
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PUSH
10321: LD_INT 34
10323: PUSH
10324: LD_INT 51
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: PUSH
10331: LD_INT 34
10333: PUSH
10334: LD_INT 53
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: LIST
10355: PPUSH
10356: CALL_OW 69
10360: PUSH
10361: LD_INT 6
10363: GREATEREQUAL
10364: IFFALSE 10604
10366: GO 10368
10368: DISABLE
10369: LD_INT 0
10371: PPUSH
10372: PPUSH
10373: PPUSH
10374: PPUSH
// begin enable ;
10375: ENABLE
// _list := [ [ b_oil_mine , b_solar_power , b_oil_power ] , [ us_cargo_bay ] , [ ] ] ;
10376: LD_ADDR_VAR 0 4
10380: PUSH
10381: LD_INT 29
10383: PUSH
10384: LD_INT 27
10386: PUSH
10387: LD_INT 26
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: LIST
10394: PUSH
10395: LD_INT 12
10397: PUSH
10398: EMPTY
10399: LIST
10400: PUSH
10401: EMPTY
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: LIST
10407: ST_TO_ADDR
// filter := ru_list_attackers ;
10408: LD_ADDR_VAR 0 1
10412: PUSH
10413: LD_EXP 43
10417: ST_TO_ADDR
// while ( filter ) do
10418: LD_VAR 0 1
10422: IFFALSE 10604
// begin Wait ( 0 0$01 ) ;
10424: LD_INT 35
10426: PPUSH
10427: CALL_OW 67
// if FilterAllUnits ( [ f_side , 2 ] ) = 0 then
10431: LD_INT 22
10433: PUSH
10434: LD_INT 2
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PPUSH
10441: CALL_OW 69
10445: PUSH
10446: LD_INT 0
10448: EQUAL
10449: IFFALSE 10491
// enemy := FilterAllUnits ( [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ) else
10451: LD_ADDR_VAR 0 2
10455: PUSH
10456: LD_INT 2
10458: PUSH
10459: LD_INT 22
10461: PUSH
10462: LD_INT 1
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: PUSH
10469: LD_INT 22
10471: PUSH
10472: LD_INT 4
10474: PUSH
10475: EMPTY
10476: LIST
10477: LIST
10478: PUSH
10479: EMPTY
10480: LIST
10481: LIST
10482: LIST
10483: PPUSH
10484: CALL_OW 69
10488: ST_TO_ADDR
10489: GO 10511
// enemy := FilterAllUnits ( [ f_side , 2 ] ) ;
10491: LD_ADDR_VAR 0 2
10495: PUSH
10496: LD_INT 22
10498: PUSH
10499: LD_INT 2
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PPUSH
10506: CALL_OW 69
10510: ST_TO_ADDR
// for i = filter downto 1 do
10511: LD_ADDR_VAR 0 3
10515: PUSH
10516: DOUBLE
10517: LD_VAR 0 1
10521: INC
10522: ST_TO_ADDR
10523: LD_INT 1
10525: PUSH
10526: FOR_DOWNTO
10527: IFFALSE 10591
// if not IsPlaced ( filter [ i ] ) then
10529: LD_VAR 0 1
10533: PUSH
10534: LD_VAR 0 3
10538: ARRAY
10539: PPUSH
10540: CALL_OW 305
10544: NOT
10545: IFFALSE 10569
// filter := Delete ( filter , i ) else
10547: LD_ADDR_VAR 0 1
10551: PUSH
10552: LD_VAR 0 1
10556: PPUSH
10557: LD_VAR 0 3
10561: PPUSH
10562: CALL_OW 3
10566: ST_TO_ADDR
10567: GO 10589
// ComAttack ( filter [ i ] , _list ) ;
10569: LD_VAR 0 1
10573: PUSH
10574: LD_VAR 0 3
10578: ARRAY
10579: PPUSH
10580: LD_VAR 0 4
10584: PPUSH
10585: CALL 992 0 2
10589: GO 10526
10591: POP
10592: POP
// if not filter then
10593: LD_VAR 0 1
10597: NOT
10598: IFFALSE 10602
// break ;
10600: GO 10604
// end ;
10602: GO 10418
// end ;
10604: PPOPN 4
10606: END
// export ru_spec_group ; every 0 0$10 trigger FilterUnitsInArea ( buffor , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) > 0 do var i , un , veh ;
10607: LD_INT 22
10609: PPUSH
10610: LD_INT 22
10612: PUSH
10613: LD_INT 1
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: PUSH
10620: LD_INT 21
10622: PUSH
10623: LD_INT 3
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: PPUSH
10634: CALL_OW 70
10638: PUSH
10639: LD_INT 0
10641: GREATER
10642: IFFALSE 10787
10644: GO 10646
10646: DISABLE
10647: LD_INT 0
10649: PPUSH
10650: PPUSH
10651: PPUSH
// begin uc_side := 6 ;
10652: LD_ADDR_OWVAR 20
10656: PUSH
10657: LD_INT 6
10659: ST_TO_ADDR
// uc_nation := 3 ;
10660: LD_ADDR_OWVAR 21
10664: PUSH
10665: LD_INT 3
10667: ST_TO_ADDR
// for i = 1 to Difficulty + 1 do
10668: LD_ADDR_VAR 0 1
10672: PUSH
10673: DOUBLE
10674: LD_INT 1
10676: DEC
10677: ST_TO_ADDR
10678: LD_OWVAR 67
10682: PUSH
10683: LD_INT 1
10685: PLUS
10686: PUSH
10687: FOR_TO
10688: IFFALSE 10782
// begin vc_chassis := ru_medium_tracked ;
10690: LD_ADDR_OWVAR 37
10694: PUSH
10695: LD_INT 22
10697: ST_TO_ADDR
// vc_engine := engine_combustion ;
10698: LD_ADDR_OWVAR 39
10702: PUSH
10703: LD_INT 1
10705: ST_TO_ADDR
// vc_control := control_manual ;
10706: LD_ADDR_OWVAR 38
10710: PUSH
10711: LD_INT 1
10713: ST_TO_ADDR
// vc_weapon := ru_rocket_launcher ;
10714: LD_ADDR_OWVAR 40
10718: PUSH
10719: LD_INT 45
10721: ST_TO_ADDR
// veh := CreateVehicle ;
10722: LD_ADDR_VAR 0 3
10726: PUSH
10727: CALL_OW 45
10731: ST_TO_ADDR
// un := CreateHumanWithClass ( 3 , ru_def ) ;
10732: LD_ADDR_VAR 0 2
10736: PUSH
10737: LD_INT 3
10739: PPUSH
10740: LD_EXP 5
10744: PPUSH
10745: CALL 425 0 2
10749: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10750: LD_VAR 0 2
10754: PPUSH
10755: LD_VAR 0 3
10759: PPUSH
10760: CALL_OW 52
// ru_spec_group := ru_spec_group ^ veh ;
10764: LD_ADDR_EXP 44
10768: PUSH
10769: LD_EXP 44
10773: PUSH
10774: LD_VAR 0 3
10778: ADD
10779: ST_TO_ADDR
// end ;
10780: GO 10687
10782: POP
10783: POP
// enable ( 99 ) ;
10784: LD_INT 99
10786: ENABLE_MARKED
// end ;
10787: PPOPN 3
10789: END
// every 0 0$01 trigger ru_spec_group marked 99 do var i , enemy , filter ;
10790: LD_EXP 44
10794: IFFALSE 10963
10796: GO 10798
10798: DISABLE
10799: LD_INT 0
10801: PPUSH
10802: PPUSH
10803: PPUSH
// begin enable ;
10804: ENABLE
// filter := ru_spec_group ;
10805: LD_ADDR_VAR 0 3
10809: PUSH
10810: LD_EXP 44
10814: ST_TO_ADDR
// if FilterAllUnits ( [ f_side , 2 ] ) = 0 then
10815: LD_INT 22
10817: PUSH
10818: LD_INT 2
10820: PUSH
10821: EMPTY
10822: LIST
10823: LIST
10824: PPUSH
10825: CALL_OW 69
10829: PUSH
10830: LD_INT 0
10832: EQUAL
10833: IFFALSE 10875
// enemy := FilterAllUnits ( [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ) else
10835: LD_ADDR_VAR 0 2
10839: PUSH
10840: LD_INT 2
10842: PUSH
10843: LD_INT 22
10845: PUSH
10846: LD_INT 1
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PUSH
10853: LD_INT 22
10855: PUSH
10856: LD_INT 4
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: LIST
10867: PPUSH
10868: CALL_OW 69
10872: ST_TO_ADDR
10873: GO 10895
// enemy := FilterAllUnits ( [ f_side , 2 ] ) ;
10875: LD_ADDR_VAR 0 2
10879: PUSH
10880: LD_INT 22
10882: PUSH
10883: LD_INT 2
10885: PUSH
10886: EMPTY
10887: LIST
10888: LIST
10889: PPUSH
10890: CALL_OW 69
10894: ST_TO_ADDR
// if filter > 0 then
10895: LD_VAR 0 3
10899: PUSH
10900: LD_INT 0
10902: GREATER
10903: IFFALSE 10963
// for i = 1 to filter do
10905: LD_ADDR_VAR 0 1
10909: PUSH
10910: DOUBLE
10911: LD_INT 1
10913: DEC
10914: ST_TO_ADDR
10915: LD_VAR 0 3
10919: PUSH
10920: FOR_TO
10921: IFFALSE 10961
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
10923: LD_VAR 0 3
10927: PUSH
10928: LD_VAR 0 1
10932: ARRAY
10933: PPUSH
10934: LD_VAR 0 2
10938: PPUSH
10939: LD_VAR 0 3
10943: PUSH
10944: LD_VAR 0 1
10948: ARRAY
10949: PPUSH
10950: CALL_OW 74
10954: PPUSH
10955: CALL_OW 115
10959: GO 10920
10961: POP
10962: POP
// end ; end_of_file
10963: PPOPN 3
10965: END
// export function ArabianAttack ( side , num , typ , area ) ; var i , un , filter , veh , chassis , weapon ; begin
10966: LD_INT 0
10968: PPUSH
10969: PPUSH
10970: PPUSH
10971: PPUSH
10972: PPUSH
10973: PPUSH
10974: PPUSH
// uc_side := side ;
10975: LD_ADDR_OWVAR 20
10979: PUSH
10980: LD_VAR 0 1
10984: ST_TO_ADDR
// uc_nation := nation_arabian ;
10985: LD_ADDR_OWVAR 21
10989: PUSH
10990: LD_INT 2
10992: ST_TO_ADDR
// chassis := [ ar_light_trike , ar_medium_trike , ar_half_tracked ] ;
10993: LD_ADDR_VAR 0 10
10997: PUSH
10998: LD_INT 12
11000: PUSH
11001: LD_INT 13
11003: PUSH
11004: LD_INT 14
11006: PUSH
11007: EMPTY
11008: LIST
11009: LIST
11010: LIST
11011: ST_TO_ADDR
// weapon := [ ar_multimissile_ballista , ar_double_machine_gun , ar_gatling_gun , ar_gun , ar_rocket_launcher ] ;
11012: LD_ADDR_VAR 0 11
11016: PUSH
11017: LD_INT 22
11019: PUSH
11020: LD_INT 24
11022: PUSH
11023: LD_INT 25
11025: PUSH
11026: LD_INT 27
11028: PUSH
11029: LD_INT 28
11031: PUSH
11032: EMPTY
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: ST_TO_ADDR
// case typ of 1 :
11039: LD_VAR 0 3
11043: PUSH
11044: LD_INT 1
11046: DOUBLE
11047: EQUAL
11048: IFTRUE 11052
11050: GO 11277
11052: POP
// begin for i = 1 to num do
11053: LD_ADDR_VAR 0 6
11057: PUSH
11058: DOUBLE
11059: LD_INT 1
11061: DEC
11062: ST_TO_ADDR
11063: LD_VAR 0 2
11067: PUSH
11068: FOR_TO
11069: IFFALSE 11228
// begin vc_chassis := chassis [ Rand ( 1 , 2 ) ] ;
11071: LD_ADDR_OWVAR 37
11075: PUSH
11076: LD_VAR 0 10
11080: PUSH
11081: LD_INT 1
11083: PPUSH
11084: LD_INT 2
11086: PPUSH
11087: CALL_OW 12
11091: ARRAY
11092: ST_TO_ADDR
// vc_engine := engine_combustion ;
11093: LD_ADDR_OWVAR 39
11097: PUSH
11098: LD_INT 1
11100: ST_TO_ADDR
// vc_control := control_manual ;
11101: LD_ADDR_OWVAR 38
11105: PUSH
11106: LD_INT 1
11108: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 1 , 2 ) ] ;
11109: LD_ADDR_OWVAR 40
11113: PUSH
11114: LD_VAR 0 11
11118: PUSH
11119: LD_INT 1
11121: PPUSH
11122: LD_INT 2
11124: PPUSH
11125: CALL_OW 12
11129: ARRAY
11130: ST_TO_ADDR
// veh := CreateVehicle ;
11131: LD_ADDR_VAR 0 9
11135: PUSH
11136: CALL_OW 45
11140: ST_TO_ADDR
// if area = ar_area1 then
11141: LD_VAR 0 4
11145: PUSH
11146: LD_INT 6
11148: EQUAL
11149: IFFALSE 11165
// SetDir ( veh , 3 ) else
11151: LD_VAR 0 9
11155: PPUSH
11156: LD_INT 3
11158: PPUSH
11159: CALL_OW 233
11163: GO 11177
// SetDir ( veh , 0 ) ;
11165: LD_VAR 0 9
11169: PPUSH
11170: LD_INT 0
11172: PPUSH
11173: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
11177: LD_VAR 0 9
11181: PPUSH
11182: LD_VAR 0 4
11186: PPUSH
11187: LD_INT 0
11189: PPUSH
11190: CALL_OW 49
// un := CreateHumanWithClass ( 1 , ar_def ) ;
11194: LD_ADDR_VAR 0 7
11198: PUSH
11199: LD_INT 1
11201: PPUSH
11202: LD_EXP 8
11206: PPUSH
11207: CALL 425 0 2
11211: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
11212: LD_VAR 0 7
11216: PPUSH
11217: LD_VAR 0 9
11221: PPUSH
11222: CALL_OW 52
// end ;
11226: GO 11068
11228: POP
11229: POP
// for i = 1 to 3 do
11230: LD_ADDR_VAR 0 6
11234: PUSH
11235: DOUBLE
11236: LD_INT 1
11238: DEC
11239: ST_TO_ADDR
11240: LD_INT 3
11242: PUSH
11243: FOR_TO
11244: IFFALSE 11273
// PlaceUnitArea ( CreateHumanWithClass ( class_mortar , ar_def ) , area , false ) ;
11246: LD_INT 8
11248: PPUSH
11249: LD_EXP 8
11253: PPUSH
11254: CALL 425 0 2
11258: PPUSH
11259: LD_VAR 0 4
11263: PPUSH
11264: LD_INT 0
11266: PPUSH
11267: CALL_OW 49
11271: GO 11243
11273: POP
11274: POP
// end ; 2 :
11275: GO 11544
11277: LD_INT 2
11279: DOUBLE
11280: EQUAL
11281: IFTRUE 11285
11283: GO 11543
11285: POP
// begin for i = 1 to num do
11286: LD_ADDR_VAR 0 6
11290: PUSH
11291: DOUBLE
11292: LD_INT 1
11294: DEC
11295: ST_TO_ADDR
11296: LD_VAR 0 2
11300: PUSH
11301: FOR_TO
11302: IFFALSE 11461
// begin vc_chassis := chassis [ Rand ( 2 , 3 ) ] ;
11304: LD_ADDR_OWVAR 37
11308: PUSH
11309: LD_VAR 0 10
11313: PUSH
11314: LD_INT 2
11316: PPUSH
11317: LD_INT 3
11319: PPUSH
11320: CALL_OW 12
11324: ARRAY
11325: ST_TO_ADDR
// vc_engine := engine_combustion ;
11326: LD_ADDR_OWVAR 39
11330: PUSH
11331: LD_INT 1
11333: ST_TO_ADDR
// vc_control := control_manual ;
11334: LD_ADDR_OWVAR 38
11338: PUSH
11339: LD_INT 1
11341: ST_TO_ADDR
// vc_weapon := weapon [ Rand ( 3 , 5 ) ] ;
11342: LD_ADDR_OWVAR 40
11346: PUSH
11347: LD_VAR 0 11
11351: PUSH
11352: LD_INT 3
11354: PPUSH
11355: LD_INT 5
11357: PPUSH
11358: CALL_OW 12
11362: ARRAY
11363: ST_TO_ADDR
// veh := CreateVehicle ;
11364: LD_ADDR_VAR 0 9
11368: PUSH
11369: CALL_OW 45
11373: ST_TO_ADDR
// if area = ar_area1 then
11374: LD_VAR 0 4
11378: PUSH
11379: LD_INT 6
11381: EQUAL
11382: IFFALSE 11398
// SetDir ( veh , 3 ) else
11384: LD_VAR 0 9
11388: PPUSH
11389: LD_INT 3
11391: PPUSH
11392: CALL_OW 233
11396: GO 11410
// SetDir ( veh , 0 ) ;
11398: LD_VAR 0 9
11402: PPUSH
11403: LD_INT 0
11405: PPUSH
11406: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
11410: LD_VAR 0 9
11414: PPUSH
11415: LD_VAR 0 4
11419: PPUSH
11420: LD_INT 0
11422: PPUSH
11423: CALL_OW 49
// un := CreateHumanWithClass ( 1 , ar_def ) ;
11427: LD_ADDR_VAR 0 7
11431: PUSH
11432: LD_INT 1
11434: PPUSH
11435: LD_EXP 8
11439: PPUSH
11440: CALL 425 0 2
11444: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
11445: LD_VAR 0 7
11449: PPUSH
11450: LD_VAR 0 9
11454: PPUSH
11455: CALL_OW 52
// end ;
11459: GO 11301
11461: POP
11462: POP
// for i = 1 to 2 do
11463: LD_ADDR_VAR 0 6
11467: PUSH
11468: DOUBLE
11469: LD_INT 1
11471: DEC
11472: ST_TO_ADDR
11473: LD_INT 2
11475: PUSH
11476: FOR_TO
11477: IFFALSE 11539
// begin uc_nation := 0 ;
11479: LD_ADDR_OWVAR 21
11483: PUSH
11484: LD_INT 0
11486: ST_TO_ADDR
// hc_class := 17 ;
11487: LD_ADDR_OWVAR 28
11491: PUSH
11492: LD_INT 17
11494: ST_TO_ADDR
// hc_attr := [ 11 , 13 ] ;
11495: LD_ADDR_OWVAR 29
11499: PUSH
11500: LD_INT 11
11502: PUSH
11503: LD_INT 13
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: ST_TO_ADDR
// un := CreateHuman ;
11510: LD_ADDR_VAR 0 7
11514: PUSH
11515: CALL_OW 44
11519: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
11520: LD_VAR 0 7
11524: PPUSH
11525: LD_VAR 0 4
11529: PPUSH
11530: LD_INT 0
11532: PPUSH
11533: CALL_OW 49
// end ;
11537: GO 11476
11539: POP
11540: POP
// end ; end ;
11541: GO 11544
11543: POP
// end ;
11544: LD_VAR 0 5
11548: RET
// export function FHeike ; begin
11549: LD_INT 0
11551: PPUSH
// uc_side := 2 ;
11552: LD_ADDR_OWVAR 20
11556: PUSH
11557: LD_INT 2
11559: ST_TO_ADDR
// uc_nation := 2 ;
11560: LD_ADDR_OWVAR 21
11564: PUSH
11565: LD_INT 2
11567: ST_TO_ADDR
// hc_gallery := sandar ;
11568: LD_ADDR_OWVAR 33
11572: PUSH
11573: LD_STRING sandar
11575: ST_TO_ADDR
// hc_face_number := 14 ;
11576: LD_ADDR_OWVAR 34
11580: PUSH
11581: LD_INT 14
11583: ST_TO_ADDR
// hc_name := Heike Steyer ;
11584: LD_ADDR_OWVAR 26
11588: PUSH
11589: LD_STRING Heike Steyer
11591: ST_TO_ADDR
// hc_sex := sex_female ;
11592: LD_ADDR_OWVAR 27
11596: PUSH
11597: LD_INT 2
11599: ST_TO_ADDR
// hc_class := 1 ;
11600: LD_ADDR_OWVAR 28
11604: PUSH
11605: LD_INT 1
11607: ST_TO_ADDR
// heike := CreateHuman ;
11608: LD_ADDR_EXP 16
11612: PUSH
11613: CALL_OW 44
11617: ST_TO_ADDR
// end ;
11618: LD_VAR 0 1
11622: RET
// every 0 0$01 do var filter , enemy , i ;
11623: GO 11625
11625: DISABLE
11626: LD_INT 0
11628: PPUSH
11629: PPUSH
11630: PPUSH
// begin enable ;
11631: ENABLE
// filter := FilterAllUnits ( [ f_side , 2 ] ) ;
11632: LD_ADDR_VAR 0 1
11636: PUSH
11637: LD_INT 22
11639: PUSH
11640: LD_INT 2
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: PPUSH
11647: CALL_OW 69
11651: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_or , [ f_side , 1 ] , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
11652: LD_ADDR_VAR 0 2
11656: PUSH
11657: LD_INT 2
11659: PUSH
11660: LD_INT 22
11662: PUSH
11663: LD_INT 1
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: PUSH
11670: LD_INT 22
11672: PUSH
11673: LD_INT 3
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: PUSH
11680: LD_INT 22
11682: PUSH
11683: LD_INT 6
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: PPUSH
11696: CALL_OW 69
11700: ST_TO_ADDR
// if filter > 0 then
11701: LD_VAR 0 1
11705: PUSH
11706: LD_INT 0
11708: GREATER
11709: IFFALSE 11769
// for i = 1 to filter do
11711: LD_ADDR_VAR 0 3
11715: PUSH
11716: DOUBLE
11717: LD_INT 1
11719: DEC
11720: ST_TO_ADDR
11721: LD_VAR 0 1
11725: PUSH
11726: FOR_TO
11727: IFFALSE 11767
// ComAttackUnit ( filter [ i ] , NearestUnitToUnit ( enemy , filter [ i ] ) ) ;
11729: LD_VAR 0 1
11733: PUSH
11734: LD_VAR 0 3
11738: ARRAY
11739: PPUSH
11740: LD_VAR 0 2
11744: PPUSH
11745: LD_VAR 0 1
11749: PUSH
11750: LD_VAR 0 3
11754: ARRAY
11755: PPUSH
11756: CALL_OW 74
11760: PPUSH
11761: CALL_OW 115
11765: GO 11726
11767: POP
11768: POP
// end ; end_of_file
11769: PPOPN 3
11771: END
// on UnitDestroyed ( un ) do begin if un = sikorski then
11772: LD_VAR 0 1
11776: PUSH
11777: LD_EXP 14
11781: EQUAL
11782: IFFALSE 11791
// YouLost ( sik ) ;
11784: LD_STRING sik
11786: PPUSH
11787: CALL_OW 104
// if un = omikron then
11791: LD_VAR 0 1
11795: PUSH
11796: LD_INT 64
11798: EQUAL
11799: IFFALSE 11808
// YouLost ( omi ) ;
11801: LD_STRING omi
11803: PPUSH
11804: CALL_OW 104
// if un in ru_list_attackers then
11808: LD_VAR 0 1
11812: PUSH
11813: LD_EXP 43
11817: IN
11818: IFFALSE 11836
// ru_list_attackers := ru_list_attackers diff un ;
11820: LD_ADDR_EXP 43
11824: PUSH
11825: LD_EXP 43
11829: PUSH
11830: LD_VAR 0 1
11834: DIFF
11835: ST_TO_ADDR
// if GetSide ( un ) = 6 and un in FilterAllUnits ( [ f_type , unit_building ] ) then
11836: LD_VAR 0 1
11840: PPUSH
11841: CALL_OW 255
11845: PUSH
11846: LD_INT 6
11848: EQUAL
11849: PUSH
11850: LD_VAR 0 1
11854: PUSH
11855: LD_INT 21
11857: PUSH
11858: LD_INT 3
11860: PUSH
11861: EMPTY
11862: LIST
11863: LIST
11864: PPUSH
11865: CALL_OW 69
11869: IN
11870: AND
11871: IFFALSE 12090
// begin if GetBType ( un ) = b_factory then
11873: LD_VAR 0 1
11877: PPUSH
11878: CALL_OW 266
11882: PUSH
11883: LD_INT 3
11885: EQUAL
11886: IFFALSE 11902
// ru_bul := ru_bul ^ b_workshop ;
11888: LD_ADDR_EXP 31
11892: PUSH
11893: LD_EXP 31
11897: PUSH
11898: LD_INT 2
11900: ADD
11901: ST_TO_ADDR
// if GetBType ( un ) = b_lab_full or GetBType ( un ) = b_lab_half then
11902: LD_VAR 0 1
11906: PPUSH
11907: CALL_OW 266
11911: PUSH
11912: LD_INT 8
11914: EQUAL
11915: PUSH
11916: LD_VAR 0 1
11920: PPUSH
11921: CALL_OW 266
11925: PUSH
11926: LD_INT 7
11928: EQUAL
11929: OR
11930: IFFALSE 11946
// ru_bul := ru_bul ^ b_lab ;
11932: LD_ADDR_EXP 31
11936: PUSH
11937: LD_EXP 31
11941: PUSH
11942: LD_INT 6
11944: ADD
11945: ST_TO_ADDR
// if GetBType ( un ) = b_barracks then
11946: LD_VAR 0 1
11950: PPUSH
11951: CALL_OW 266
11955: PUSH
11956: LD_INT 5
11958: EQUAL
11959: IFFALSE 11975
// ru_bul := ru_bul ^ b_armoury ;
11961: LD_ADDR_EXP 31
11965: PUSH
11966: LD_EXP 31
11970: PUSH
11971: LD_INT 4
11973: ADD
11974: ST_TO_ADDR
// if not GetBType ( un ) in [ b_factory , b_lab_full , b_lab_half , b_barracks ] then
11975: LD_VAR 0 1
11979: PPUSH
11980: CALL_OW 266
11984: PUSH
11985: LD_INT 3
11987: PUSH
11988: LD_INT 8
11990: PUSH
11991: LD_INT 7
11993: PUSH
11994: LD_INT 5
11996: PUSH
11997: EMPTY
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: IN
12003: NOT
12004: IFFALSE 12027
// ru_bul := ru_bul ^ GetBType ( un ) ;
12006: LD_ADDR_EXP 31
12010: PUSH
12011: LD_EXP 31
12015: PUSH
12016: LD_VAR 0 1
12020: PPUSH
12021: CALL_OW 266
12025: ADD
12026: ST_TO_ADDR
// ru_bul := ru_bul ^ GetX ( un ) ;
12027: LD_ADDR_EXP 31
12031: PUSH
12032: LD_EXP 31
12036: PUSH
12037: LD_VAR 0 1
12041: PPUSH
12042: CALL_OW 250
12046: ADD
12047: ST_TO_ADDR
// ru_bul := ru_bul ^ GetY ( un ) ;
12048: LD_ADDR_EXP 31
12052: PUSH
12053: LD_EXP 31
12057: PUSH
12058: LD_VAR 0 1
12062: PPUSH
12063: CALL_OW 251
12067: ADD
12068: ST_TO_ADDR
// ru_bul := ru_bul ^ GetDir ( un ) ;
12069: LD_ADDR_EXP 31
12073: PUSH
12074: LD_EXP 31
12078: PUSH
12079: LD_VAR 0 1
12083: PPUSH
12084: CALL_OW 254
12088: ADD
12089: ST_TO_ADDR
// end ; if GetSide ( un ) = 6 and un in FilterAllUnits ( [ f_type , unit_vehicle ] ) diff FilterAllUnits ( [ f_weapon , ru_rocket_launcher ] ) then
12090: LD_VAR 0 1
12094: PPUSH
12095: CALL_OW 255
12099: PUSH
12100: LD_INT 6
12102: EQUAL
12103: PUSH
12104: LD_VAR 0 1
12108: PUSH
12109: LD_INT 21
12111: PUSH
12112: LD_INT 2
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: PPUSH
12119: CALL_OW 69
12123: PUSH
12124: LD_INT 34
12126: PUSH
12127: LD_INT 45
12129: PUSH
12130: EMPTY
12131: LIST
12132: LIST
12133: PPUSH
12134: CALL_OW 69
12138: DIFF
12139: IN
12140: AND
12141: IFFALSE 12227
// begin ru_veh := ru_veh ^ GetChassis ( un ) ;
12143: LD_ADDR_EXP 27
12147: PUSH
12148: LD_EXP 27
12152: PUSH
12153: LD_VAR 0 1
12157: PPUSH
12158: CALL_OW 265
12162: ADD
12163: ST_TO_ADDR
// ru_veh := ru_veh ^ GetEngine ( un ) ;
12164: LD_ADDR_EXP 27
12168: PUSH
12169: LD_EXP 27
12173: PUSH
12174: LD_VAR 0 1
12178: PPUSH
12179: CALL_OW 262
12183: ADD
12184: ST_TO_ADDR
// ru_veh := ru_veh ^ GetControl ( un ) ;
12185: LD_ADDR_EXP 27
12189: PUSH
12190: LD_EXP 27
12194: PUSH
12195: LD_VAR 0 1
12199: PPUSH
12200: CALL_OW 263
12204: ADD
12205: ST_TO_ADDR
// ru_veh := ru_veh ^ GetWeapon ( un ) ;
12206: LD_ADDR_EXP 27
12210: PUSH
12211: LD_EXP 27
12215: PUSH
12216: LD_VAR 0 1
12220: PPUSH
12221: CALL_OW 264
12225: ADD
12226: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_factory ] , [ f_lives , 251 ] ] ) > 0 then
12227: LD_VAR 0 1
12231: PUSH
12232: LD_INT 22
12234: PUSH
12235: LD_INT 6
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: PUSH
12242: LD_INT 25
12244: PUSH
12245: LD_INT 3
12247: PUSH
12248: EMPTY
12249: LIST
12250: LIST
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: PPUSH
12256: CALL_OW 69
12260: IN
12261: PUSH
12262: LD_INT 22
12264: PUSH
12265: LD_INT 6
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: PUSH
12272: LD_INT 30
12274: PUSH
12275: LD_INT 3
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PUSH
12282: LD_INT 24
12284: PUSH
12285: LD_INT 251
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: LIST
12296: PPUSH
12297: CALL_OW 69
12301: PUSH
12302: LD_INT 0
12304: GREATER
12305: AND
12306: IFFALSE 12354
// begin uc_side := 6 ;
12308: LD_ADDR_OWVAR 20
12312: PUSH
12313: LD_INT 6
12315: ST_TO_ADDR
// uc_nation := 3 ;
12316: LD_ADDR_OWVAR 21
12320: PUSH
12321: LD_INT 3
12323: ST_TO_ADDR
// un := CreateHumanWithClass ( 3 , ru_def ) ;
12324: LD_ADDR_VAR 0 1
12328: PUSH
12329: LD_INT 3
12331: PPUSH
12332: LD_EXP 5
12336: PPUSH
12337: CALL 425 0 2
12341: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
12342: LD_VAR 0 1
12346: PPUSH
12347: LD_INT 92
12349: PPUSH
12350: CALL_OW 52
// end ; if GetSide ( un ) = 3 and un in FilterAllUnits ( [ f_type , unit_building ] ) then
12354: LD_VAR 0 1
12358: PPUSH
12359: CALL_OW 255
12363: PUSH
12364: LD_INT 3
12366: EQUAL
12367: PUSH
12368: LD_VAR 0 1
12372: PUSH
12373: LD_INT 21
12375: PUSH
12376: LD_INT 3
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: PPUSH
12383: CALL_OW 69
12387: IN
12388: AND
12389: IFFALSE 12620
// begin if GetBType ( un ) = b_factory then
12391: LD_VAR 0 1
12395: PPUSH
12396: CALL_OW 266
12400: PUSH
12401: LD_INT 3
12403: EQUAL
12404: IFFALSE 12420
// ru2_bul := ru2_bul ^ b_workshop ;
12406: LD_ADDR_EXP 41
12410: PUSH
12411: LD_EXP 41
12415: PUSH
12416: LD_INT 2
12418: ADD
12419: ST_TO_ADDR
// if GetBType ( un ) = b_lab_full or GetBType ( un ) = b_lab_half then
12420: LD_VAR 0 1
12424: PPUSH
12425: CALL_OW 266
12429: PUSH
12430: LD_INT 8
12432: EQUAL
12433: PUSH
12434: LD_VAR 0 1
12438: PPUSH
12439: CALL_OW 266
12443: PUSH
12444: LD_INT 7
12446: EQUAL
12447: OR
12448: IFFALSE 12464
// ru2_bul := ru2_bul ^ b_lab ;
12450: LD_ADDR_EXP 41
12454: PUSH
12455: LD_EXP 41
12459: PUSH
12460: LD_INT 6
12462: ADD
12463: ST_TO_ADDR
// if GetBType ( un ) = b_barracks then
12464: LD_VAR 0 1
12468: PPUSH
12469: CALL_OW 266
12473: PUSH
12474: LD_INT 5
12476: EQUAL
12477: IFFALSE 12493
// ru2_bul := ru2_bul ^ b_armoury ;
12479: LD_ADDR_EXP 41
12483: PUSH
12484: LD_EXP 41
12488: PUSH
12489: LD_INT 4
12491: ADD
12492: ST_TO_ADDR
// if not GetBType ( un ) in [ b_factory , b_lab_full , b_lab_half , b_barracks , b_ext_gun , b_ext_noncombat , b_ext_track ] then
12493: LD_VAR 0 1
12497: PPUSH
12498: CALL_OW 266
12502: PUSH
12503: LD_INT 3
12505: PUSH
12506: LD_INT 8
12508: PUSH
12509: LD_INT 7
12511: PUSH
12512: LD_INT 5
12514: PUSH
12515: LD_INT 17
12517: PUSH
12518: LD_INT 19
12520: PUSH
12521: LD_INT 16
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: IN
12533: NOT
12534: IFFALSE 12557
// ru2_bul := ru2_bul ^ GetBType ( un ) ;
12536: LD_ADDR_EXP 41
12540: PUSH
12541: LD_EXP 41
12545: PUSH
12546: LD_VAR 0 1
12550: PPUSH
12551: CALL_OW 266
12555: ADD
12556: ST_TO_ADDR
// ru2_bul := ru2_bul ^ GetX ( un ) ;
12557: LD_ADDR_EXP 41
12561: PUSH
12562: LD_EXP 41
12566: PUSH
12567: LD_VAR 0 1
12571: PPUSH
12572: CALL_OW 250
12576: ADD
12577: ST_TO_ADDR
// ru2_bul := ru2_bul ^ GetY ( un ) ;
12578: LD_ADDR_EXP 41
12582: PUSH
12583: LD_EXP 41
12587: PUSH
12588: LD_VAR 0 1
12592: PPUSH
12593: CALL_OW 251
12597: ADD
12598: ST_TO_ADDR
// ru2_bul := ru2_bul ^ GetDir ( un ) ;
12599: LD_ADDR_EXP 41
12603: PUSH
12604: LD_EXP 41
12608: PUSH
12609: LD_VAR 0 1
12613: PPUSH
12614: CALL_OW 254
12618: ADD
12619: ST_TO_ADDR
// end ; if GetSide ( un ) = 3 and un in FilterAllUnits ( [ f_type , unit_vehicle ] ) diff FilterAllUnits ( [ f_weapon , ru_rocket_launcher ] ) then
12620: LD_VAR 0 1
12624: PPUSH
12625: CALL_OW 255
12629: PUSH
12630: LD_INT 3
12632: EQUAL
12633: PUSH
12634: LD_VAR 0 1
12638: PUSH
12639: LD_INT 21
12641: PUSH
12642: LD_INT 2
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: PPUSH
12649: CALL_OW 69
12653: PUSH
12654: LD_INT 34
12656: PUSH
12657: LD_INT 45
12659: PUSH
12660: EMPTY
12661: LIST
12662: LIST
12663: PPUSH
12664: CALL_OW 69
12668: DIFF
12669: IN
12670: AND
12671: IFFALSE 12757
// begin ru2_veh := ru2_veh ^ GetChassis ( un ) ;
12673: LD_ADDR_EXP 37
12677: PUSH
12678: LD_EXP 37
12682: PUSH
12683: LD_VAR 0 1
12687: PPUSH
12688: CALL_OW 265
12692: ADD
12693: ST_TO_ADDR
// ru2_veh := ru2_veh ^ GetEngine ( un ) ;
12694: LD_ADDR_EXP 37
12698: PUSH
12699: LD_EXP 37
12703: PUSH
12704: LD_VAR 0 1
12708: PPUSH
12709: CALL_OW 262
12713: ADD
12714: ST_TO_ADDR
// ru2_veh := ru2_veh ^ GetControl ( un ) ;
12715: LD_ADDR_EXP 37
12719: PUSH
12720: LD_EXP 37
12724: PUSH
12725: LD_VAR 0 1
12729: PPUSH
12730: CALL_OW 263
12734: ADD
12735: ST_TO_ADDR
// ru2_veh := ru2_veh ^ GetWeapon ( un ) ;
12736: LD_ADDR_EXP 37
12740: PUSH
12741: LD_EXP 37
12745: PUSH
12746: LD_VAR 0 1
12750: PPUSH
12751: CALL_OW 264
12755: ADD
12756: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_lives , 251 ] ] ) > 0 then
12757: LD_VAR 0 1
12761: PUSH
12762: LD_INT 22
12764: PUSH
12765: LD_INT 3
12767: PUSH
12768: EMPTY
12769: LIST
12770: LIST
12771: PUSH
12772: LD_INT 25
12774: PUSH
12775: LD_INT 3
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: PUSH
12782: EMPTY
12783: LIST
12784: LIST
12785: PPUSH
12786: CALL_OW 69
12790: IN
12791: PUSH
12792: LD_INT 22
12794: PUSH
12795: LD_INT 3
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: PUSH
12802: LD_INT 30
12804: PUSH
12805: LD_INT 3
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: PUSH
12812: LD_INT 24
12814: PUSH
12815: LD_INT 251
12817: PUSH
12818: EMPTY
12819: LIST
12820: LIST
12821: PUSH
12822: EMPTY
12823: LIST
12824: LIST
12825: LIST
12826: PPUSH
12827: CALL_OW 69
12831: PUSH
12832: LD_INT 0
12834: GREATER
12835: AND
12836: IFFALSE 12914
// begin uc_side := 3 ;
12838: LD_ADDR_OWVAR 20
12842: PUSH
12843: LD_INT 3
12845: ST_TO_ADDR
// uc_nation := 3 ;
12846: LD_ADDR_OWVAR 21
12850: PUSH
12851: LD_INT 3
12853: ST_TO_ADDR
// un := CreateHumanWithClass ( 3 , ru_def ) ;
12854: LD_ADDR_VAR 0 1
12858: PUSH
12859: LD_INT 3
12861: PPUSH
12862: LD_EXP 5
12866: PPUSH
12867: CALL 425 0 2
12871: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) [ 1 ] ) ;
12872: LD_VAR 0 1
12876: PPUSH
12877: LD_INT 22
12879: PUSH
12880: LD_INT 3
12882: PUSH
12883: EMPTY
12884: LIST
12885: LIST
12886: PUSH
12887: LD_INT 30
12889: PUSH
12890: LD_INT 3
12892: PUSH
12893: EMPTY
12894: LIST
12895: LIST
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: PPUSH
12901: CALL_OW 69
12905: PUSH
12906: LD_INT 1
12908: ARRAY
12909: PPUSH
12910: CALL_OW 52
// end ; end ;
12914: PPOPN 1
12916: END
// on VehicleConstructed ( veh , fac ) do begin if veh in FilterAllUnits ( [ [ f_or , [ f_side , 6 ] , [ f_side , 3 ] ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ru_crane ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_bulldozer ] ] ] ] ) then
12917: LD_VAR 0 1
12921: PUSH
12922: LD_INT 2
12924: PUSH
12925: LD_INT 22
12927: PUSH
12928: LD_INT 6
12930: PUSH
12931: EMPTY
12932: LIST
12933: LIST
12934: PUSH
12935: LD_INT 22
12937: PUSH
12938: LD_INT 3
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: LIST
12949: PUSH
12950: LD_INT 21
12952: PUSH
12953: LD_INT 2
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: PUSH
12960: LD_INT 3
12962: PUSH
12963: LD_INT 2
12965: PUSH
12966: LD_INT 34
12968: PUSH
12969: LD_INT 52
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: PUSH
12976: LD_INT 34
12978: PUSH
12979: LD_INT 51
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: PUSH
12986: LD_INT 34
12988: PUSH
12989: LD_INT 53
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: PUSH
13002: EMPTY
13003: LIST
13004: LIST
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: LIST
13010: PPUSH
13011: CALL_OW 69
13015: IN
13016: IFFALSE 13041
// ru_list_attackers := Insert ( ru_list_attackers , 1 , veh ) ;
13018: LD_ADDR_EXP 43
13022: PUSH
13023: LD_EXP 43
13027: PPUSH
13028: LD_INT 1
13030: PPUSH
13031: LD_VAR 0 1
13035: PPUSH
13036: CALL_OW 2
13040: ST_TO_ADDR
// end ;
13041: PPOPN 2
13043: END
// on BuildingComplete ( b ) do var i ;
13044: LD_INT 0
13046: PPUSH
// begin if b in FilterAllUnits ( [ f_side , 6 ] ) then
13047: LD_VAR 0 1
13051: PUSH
13052: LD_INT 22
13054: PUSH
13055: LD_INT 6
13057: PUSH
13058: EMPTY
13059: LIST
13060: LIST
13061: PPUSH
13062: CALL_OW 69
13066: IN
13067: IFFALSE 13107
// for i = 1 to 4 do
13069: LD_ADDR_VAR 0 2
13073: PUSH
13074: DOUBLE
13075: LD_INT 1
13077: DEC
13078: ST_TO_ADDR
13079: LD_INT 4
13081: PUSH
13082: FOR_TO
13083: IFFALSE 13105
// ru_bul := Delete ( ru_bul , 1 ) ;
13085: LD_ADDR_EXP 31
13089: PUSH
13090: LD_EXP 31
13094: PPUSH
13095: LD_INT 1
13097: PPUSH
13098: CALL_OW 3
13102: ST_TO_ADDR
13103: GO 13082
13105: POP
13106: POP
// if b in FilterAllUnits ( [ f_side , 3 ] ) then
13107: LD_VAR 0 1
13111: PUSH
13112: LD_INT 22
13114: PUSH
13115: LD_INT 3
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: PPUSH
13122: CALL_OW 69
13126: IN
13127: IFFALSE 13167
// for i = 1 to 4 do
13129: LD_ADDR_VAR 0 2
13133: PUSH
13134: DOUBLE
13135: LD_INT 1
13137: DEC
13138: ST_TO_ADDR
13139: LD_INT 4
13141: PUSH
13142: FOR_TO
13143: IFFALSE 13165
// ru2_bul := Delete ( ru2_bul , 1 ) ;
13145: LD_ADDR_EXP 41
13149: PUSH
13150: LD_EXP 41
13154: PPUSH
13155: LD_INT 1
13157: PPUSH
13158: CALL_OW 3
13162: ST_TO_ADDR
13163: GO 13142
13165: POP
13166: POP
// end ;
13167: PPOPN 2
13169: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
13170: LD_VAR 0 1
13174: PPUSH
13175: LD_VAR 0 2
13179: PPUSH
13180: LD_VAR 0 3
13184: PPUSH
13185: CALL 20127 0 3
// end ;
13189: PPOPN 3
13191: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
13192: LD_VAR 0 1
13196: PPUSH
13197: CALL 20225 0 1
// end ; end_of_file
13201: PPOPN 1
13203: END
// export function Start_Game ; begin
13204: LD_INT 0
13206: PPUSH
// global_diff := GetMultiplayerSetting ( 0 ) ;
13207: LD_ADDR_EXP 3
13211: PUSH
13212: LD_INT 0
13214: PPUSH
13215: CALL_OW 426
13219: ST_TO_ADDR
// if not global_diff then
13220: LD_EXP 3
13224: NOT
13225: IFFALSE 13235
// global_diff := 1 ;
13227: LD_ADDR_EXP 3
13231: PUSH
13232: LD_INT 1
13234: ST_TO_ADDR
// CenterOnXY ( 70 , 130 ) ;
13235: LD_INT 70
13237: PPUSH
13238: LD_INT 130
13240: PPUSH
13241: CALL_OW 84
// case Query ( text1 ) of 1 :
13245: LD_STRING text1
13247: PPUSH
13248: CALL_OW 97
13252: PUSH
13253: LD_INT 1
13255: DOUBLE
13256: EQUAL
13257: IFTRUE 13261
13259: GO 13264
13261: POP
// ; end ;
13262: GO 13265
13264: POP
// ChangeMissionObjectives ( target1 ) ;
13265: LD_STRING target1
13267: PPUSH
13268: CALL_OW 337
// game_started := true ;
13272: LD_ADDR_EXP 10
13276: PUSH
13277: LD_INT 1
13279: ST_TO_ADDR
// crates_allow := true ;
13280: LD_ADDR_EXP 13
13284: PUSH
13285: LD_INT 1
13287: ST_TO_ADDR
// if global_diff > 2 then
13288: LD_EXP 3
13292: PUSH
13293: LD_INT 2
13295: GREATER
13296: IFFALSE 13305
// RemoveUnit ( us_spec_b ) ;
13298: LD_INT 140
13300: PPUSH
13301: CALL_OW 64
// end ;
13305: LD_VAR 0 1
13309: RET
// every 0 0$0.3 trigger SeeSide ( sikorski_veh , 6 ) or SeeSide ( sikorski_veh , 3 ) or SeeSide ( sikorski , 3 ) or SeeSide ( sikorski , 6 ) do
13310: LD_EXP 22
13314: PPUSH
13315: LD_INT 6
13317: PPUSH
13318: CALL 870 0 2
13322: PUSH
13323: LD_EXP 22
13327: PPUSH
13328: LD_INT 3
13330: PPUSH
13331: CALL 870 0 2
13335: OR
13336: PUSH
13337: LD_EXP 14
13341: PPUSH
13342: LD_INT 3
13344: PPUSH
13345: CALL 870 0 2
13349: OR
13350: PUSH
13351: LD_EXP 14
13355: PPUSH
13356: LD_INT 6
13358: PPUSH
13359: CALL 870 0 2
13363: OR
13364: IFFALSE 13381
13366: GO 13368
13368: DISABLE
// Say ( sikorski , DRus ) ;
13369: LD_EXP 14
13373: PPUSH
13374: LD_STRING DRus
13376: PPUSH
13377: CALL_OW 88
13381: END
// every 0 0$03 trigger See ( 4 , sikorski ) or See ( 4 , sikorski_veh ) do var i , per ;
13382: LD_INT 4
13384: PPUSH
13385: LD_EXP 14
13389: PPUSH
13390: CALL_OW 292
13394: PUSH
13395: LD_INT 4
13397: PPUSH
13398: LD_EXP 22
13402: PPUSH
13403: CALL_OW 292
13407: OR
13408: IFFALSE 13830
13410: GO 13412
13412: DISABLE
13413: LD_INT 0
13415: PPUSH
13416: PPUSH
// begin Wait ( 0 0$05 ) ;
13417: LD_INT 175
13419: PPUSH
13420: CALL_OW 67
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
13424: LD_ADDR_VAR 0 1
13428: PUSH
13429: LD_INT 22
13431: PUSH
13432: LD_INT 4
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: PPUSH
13439: CALL_OW 69
13443: PUSH
13444: FOR_IN
13445: IFFALSE 13461
// SetSide ( i , 1 ) ;
13447: LD_VAR 0 1
13451: PPUSH
13452: LD_INT 1
13454: PPUSH
13455: CALL_OW 235
13459: GO 13444
13461: POP
13462: POP
// per := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] ] ) diff sikorski ;
13463: LD_ADDR_VAR 0 2
13467: PUSH
13468: LD_INT 22
13470: PUSH
13471: LD_INT 1
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: PUSH
13478: LD_INT 21
13480: PUSH
13481: LD_INT 1
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: PUSH
13488: LD_INT 26
13490: PUSH
13491: LD_INT 1
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: LIST
13502: PPUSH
13503: CALL_OW 69
13507: PUSH
13508: LD_EXP 14
13512: DIFF
13513: ST_TO_ADDR
// InGameOn ;
13514: CALL_OW 8
// CenterNowOnXY ( 19 , 13 ) ;
13518: LD_INT 19
13520: PPUSH
13521: LD_INT 13
13523: PPUSH
13524: CALL_OW 86
// if IsInUnit ( sikorski ) then
13528: LD_EXP 14
13532: PPUSH
13533: CALL_OW 310
13537: IFFALSE 13555
// begin ComExitVehicle ( sikorski ) ;
13539: LD_EXP 14
13543: PPUSH
13544: CALL_OW 121
// Wait ( 0 0$0.3 ) ;
13548: LD_INT 10
13550: PPUSH
13551: CALL_OW 67
// end ; ComTurnUnit ( sikorski , per [ 1 ] ) ;
13555: LD_EXP 14
13559: PPUSH
13560: LD_VAR 0 2
13564: PUSH
13565: LD_INT 1
13567: ARRAY
13568: PPUSH
13569: CALL_OW 119
// ComTurnUnit ( per [ 1 ] , sikorski ) ;
13573: LD_VAR 0 2
13577: PUSH
13578: LD_INT 1
13580: ARRAY
13581: PPUSH
13582: LD_EXP 14
13586: PPUSH
13587: CALL_OW 119
// Wait ( 0 0$0.3 ) ;
13591: LD_INT 10
13593: PPUSH
13594: CALL_OW 67
// Say ( sikorski , DS-1 ) ;
13598: LD_EXP 14
13602: PPUSH
13603: LD_STRING DS-1
13605: PPUSH
13606: CALL_OW 88
// Say ( per [ 1 ] , DP-1 ) ;
13610: LD_VAR 0 2
13614: PUSH
13615: LD_INT 1
13617: ARRAY
13618: PPUSH
13619: LD_STRING DP-1
13621: PPUSH
13622: CALL_OW 88
// Say ( sikorski , DS-2 ) ;
13626: LD_EXP 14
13630: PPUSH
13631: LD_STRING DS-2
13633: PPUSH
13634: CALL_OW 88
// Say ( per [ 1 ] , DP-2 ) ;
13638: LD_VAR 0 2
13642: PUSH
13643: LD_INT 1
13645: ARRAY
13646: PPUSH
13647: LD_STRING DP-2
13649: PPUSH
13650: CALL_OW 88
// Say ( sikorski , DS-3 ) ;
13654: LD_EXP 14
13658: PPUSH
13659: LD_STRING DS-3
13661: PPUSH
13662: CALL_OW 88
// Say ( per [ 1 ] , DP-3 ) ;
13666: LD_VAR 0 2
13670: PUSH
13671: LD_INT 1
13673: ARRAY
13674: PPUSH
13675: LD_STRING DP-3
13677: PPUSH
13678: CALL_OW 88
// Say ( sikorski , DS-4 ) ;
13682: LD_EXP 14
13686: PPUSH
13687: LD_STRING DS-4
13689: PPUSH
13690: CALL_OW 88
// Wait ( 0 0$0.6 ) ;
13694: LD_INT 21
13696: PPUSH
13697: CALL_OW 67
// SayRadio ( ron , DR-1 ) ;
13701: LD_EXP 17
13705: PPUSH
13706: LD_STRING DR-1
13708: PPUSH
13709: CALL_OW 94
// Say ( sikorski , DS-5 ) ;
13713: LD_EXP 14
13717: PPUSH
13718: LD_STRING DS-5
13720: PPUSH
13721: CALL_OW 88
// SayRadio ( ron , DR-2 ) ;
13725: LD_EXP 17
13729: PPUSH
13730: LD_STRING DR-2
13732: PPUSH
13733: CALL_OW 94
// Say ( sikorski , DS-6 ) ;
13737: LD_EXP 14
13741: PPUSH
13742: LD_STRING DS-6
13744: PPUSH
13745: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
13749: LD_INT 10
13751: PPUSH
13752: CALL_OW 67
// SayRadio ( ron , DR-3 ) ;
13756: LD_EXP 17
13760: PPUSH
13761: LD_STRING DR-3
13763: PPUSH
13764: CALL_OW 94
// InGameOff ;
13768: CALL_OW 9
// ChangeMissionObjectives ( target2 ) ;
13772: LD_STRING target2
13774: PPUSH
13775: CALL_OW 337
// Wait ( 0 0$03 ) ;
13779: LD_INT 105
13781: PPUSH
13782: CALL_OW 67
// Say ( sikorski , DS-7 ) ;
13786: LD_EXP 14
13790: PPUSH
13791: LD_STRING DS-7
13793: PPUSH
13794: CALL_OW 88
// Wait ( [ 6 6$00 , 5 5$00 , 4 4$00 ] [ global_diff ] ) ;
13798: LD_INT 12600
13800: PUSH
13801: LD_INT 10500
13803: PUSH
13804: LD_INT 8400
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: LIST
13811: PUSH
13812: LD_EXP 3
13816: ARRAY
13817: PPUSH
13818: CALL_OW 67
// russian_produce := true ;
13822: LD_ADDR_EXP 20
13826: PUSH
13827: LD_INT 1
13829: ST_TO_ADDR
// end ;
13830: PPOPN 2
13832: END
// export us_unit ; every 0 0$11 trigger timer >= [ 25 25$00 , 27 27$30 , 29 29$20 ] [ global_diff ] do
13833: LD_EXP 2
13837: PUSH
13838: LD_INT 52500
13840: PUSH
13841: LD_INT 57750
13843: PUSH
13844: LD_INT 61600
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: LIST
13851: PUSH
13852: LD_EXP 3
13856: ARRAY
13857: GREATEREQUAL
13858: IFFALSE 14026
13860: GO 13862
13862: DISABLE
// begin uc_side := 8 ;
13863: LD_ADDR_OWVAR 20
13867: PUSH
13868: LD_INT 8
13870: ST_TO_ADDR
// uc_nation := 1 ;
13871: LD_ADDR_OWVAR 21
13875: PUSH
13876: LD_INT 1
13878: ST_TO_ADDR
// hc_sex := sex_male ;
13879: LD_ADDR_OWVAR 27
13883: PUSH
13884: LD_INT 1
13886: ST_TO_ADDR
// hc_gallery :=  ;
13887: LD_ADDR_OWVAR 33
13891: PUSH
13892: LD_STRING 
13894: ST_TO_ADDR
// hc_name :=  ;
13895: LD_ADDR_OWVAR 26
13899: PUSH
13900: LD_STRING 
13902: ST_TO_ADDR
// hc_class := Rand ( 1 , 4 ) ;
13903: LD_ADDR_OWVAR 28
13907: PUSH
13908: LD_INT 1
13910: PPUSH
13911: LD_INT 4
13913: PPUSH
13914: CALL_OW 12
13918: ST_TO_ADDR
// hc_skills := [ Rand ( 2 , am_def ) , Rand ( 2 , am_def ) , Rand ( 2 , am_def ) , Rand ( 2 , am_def ) ] ;
13919: LD_ADDR_OWVAR 31
13923: PUSH
13924: LD_INT 2
13926: PPUSH
13927: LD_EXP 6
13931: PPUSH
13932: CALL_OW 12
13936: PUSH
13937: LD_INT 2
13939: PPUSH
13940: LD_EXP 6
13944: PPUSH
13945: CALL_OW 12
13949: PUSH
13950: LD_INT 2
13952: PPUSH
13953: LD_EXP 6
13957: PPUSH
13958: CALL_OW 12
13962: PUSH
13963: LD_INT 2
13965: PPUSH
13966: LD_EXP 6
13970: PPUSH
13971: CALL_OW 12
13975: PUSH
13976: EMPTY
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: ST_TO_ADDR
// us_unit := CreateHuman ;
13982: LD_ADDR_EXP 45
13986: PUSH
13987: CALL_OW 44
13991: ST_TO_ADDR
// PlaceUnitArea ( us_unit , swamp_spawn , true ) ;
13992: LD_EXP 45
13996: PPUSH
13997: LD_INT 13
13999: PPUSH
14000: LD_INT 1
14002: PPUSH
14003: CALL_OW 49
// Wait ( 0 0$0.3 ) ;
14007: LD_INT 10
14009: PPUSH
14010: CALL_OW 67
// SayRadio ( us_unit , Dun1 ) ;
14014: LD_EXP 45
14018: PPUSH
14019: LD_STRING Dun1
14021: PPUSH
14022: CALL_OW 94
// end ;
14026: END
// every 0 0$01 trigger See ( 1 , us_unit ) do
14027: LD_INT 1
14029: PPUSH
14030: LD_EXP 45
14034: PPUSH
14035: CALL_OW 292
14039: IFFALSE 14056
14041: GO 14043
14043: DISABLE
// SetSide ( us_unit , 1 ) ;
14044: LD_EXP 45
14048: PPUSH
14049: LD_INT 1
14051: PPUSH
14052: CALL_OW 235
14056: END
// every 1 1$35 trigger timer >= [ 8 8$00 , 9 9$00 , 10 10$00 ] [ global_diff ] do var un , veh , i ;
14057: LD_EXP 2
14061: PUSH
14062: LD_INT 16800
14064: PUSH
14065: LD_INT 18900
14067: PUSH
14068: LD_INT 21000
14070: PUSH
14071: EMPTY
14072: LIST
14073: LIST
14074: LIST
14075: PUSH
14076: LD_EXP 3
14080: ARRAY
14081: GREATEREQUAL
14082: IFFALSE 14461
14084: GO 14086
14086: DISABLE
14087: LD_INT 0
14089: PPUSH
14090: PPUSH
14091: PPUSH
// begin uc_side := 4 ;
14092: LD_ADDR_OWVAR 20
14096: PUSH
14097: LD_INT 4
14099: ST_TO_ADDR
// uc_nation := 1 ;
14100: LD_ADDR_OWVAR 21
14104: PUSH
14105: LD_INT 1
14107: ST_TO_ADDR
// vc_chassis := [ us_medium_tracked , us_medium_wheeled , us_medium_wheeled ] [ global_diff ] ;
14108: LD_ADDR_OWVAR 37
14112: PUSH
14113: LD_INT 3
14115: PUSH
14116: LD_INT 2
14118: PUSH
14119: LD_INT 2
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: LIST
14126: PUSH
14127: LD_EXP 3
14131: ARRAY
14132: ST_TO_ADDR
// vc_engine := engine_solar ;
14133: LD_ADDR_OWVAR 39
14137: PUSH
14138: LD_INT 2
14140: ST_TO_ADDR
// vc_control := control_manual ;
14141: LD_ADDR_OWVAR 38
14145: PUSH
14146: LD_INT 1
14148: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
14149: LD_ADDR_OWVAR 40
14153: PUSH
14154: LD_INT 12
14156: ST_TO_ADDR
// veh := CreateVehicle ;
14157: LD_ADDR_VAR 0 2
14161: PUSH
14162: CALL_OW 45
14166: ST_TO_ADDR
// PlaceUnitArea ( veh , am_car , false ) ;
14167: LD_VAR 0 2
14171: PPUSH
14172: LD_INT 20
14174: PPUSH
14175: LD_INT 0
14177: PPUSH
14178: CALL_OW 49
// hc_sex := sex_male ;
14182: LD_ADDR_OWVAR 27
14186: PUSH
14187: LD_INT 1
14189: ST_TO_ADDR
// hc_gallery :=  ;
14190: LD_ADDR_OWVAR 33
14194: PUSH
14195: LD_STRING 
14197: ST_TO_ADDR
// hc_name :=  ;
14198: LD_ADDR_OWVAR 26
14202: PUSH
14203: LD_STRING 
14205: ST_TO_ADDR
// hc_class := 3 ;
14206: LD_ADDR_OWVAR 28
14210: PUSH
14211: LD_INT 3
14213: ST_TO_ADDR
// hc_skills := [ Rand ( 2 , am_def ) , Rand ( 2 , am_def ) , Rand ( 2 , am_def ) , Rand ( 2 , am_def ) ] ;
14214: LD_ADDR_OWVAR 31
14218: PUSH
14219: LD_INT 2
14221: PPUSH
14222: LD_EXP 6
14226: PPUSH
14227: CALL_OW 12
14231: PUSH
14232: LD_INT 2
14234: PPUSH
14235: LD_EXP 6
14239: PPUSH
14240: CALL_OW 12
14244: PUSH
14245: LD_INT 2
14247: PPUSH
14248: LD_EXP 6
14252: PPUSH
14253: CALL_OW 12
14257: PUSH
14258: LD_INT 2
14260: PPUSH
14261: LD_EXP 6
14265: PPUSH
14266: CALL_OW 12
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: ST_TO_ADDR
// un := CreateHuman ;
14277: LD_ADDR_VAR 0 1
14281: PUSH
14282: CALL_OW 44
14286: ST_TO_ADDR
// PlaceUnitArea ( veh , am_car , true ) ;
14287: LD_VAR 0 2
14291: PPUSH
14292: LD_INT 20
14294: PPUSH
14295: LD_INT 1
14297: PPUSH
14298: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
14302: LD_VAR 0 1
14306: PPUSH
14307: LD_VAR 0 2
14311: PPUSH
14312: CALL_OW 52
// SetCargo ( veh , mat_cans , 60 ) ;
14316: LD_VAR 0 2
14320: PPUSH
14321: LD_INT 1
14323: PPUSH
14324: LD_INT 60
14326: PPUSH
14327: CALL_OW 290
// SetFuel ( veh , 98 ) ;
14331: LD_VAR 0 2
14335: PPUSH
14336: LD_INT 98
14338: PPUSH
14339: CALL_OW 240
// SetLives ( un , 500 ) ;
14343: LD_VAR 0 1
14347: PPUSH
14348: LD_INT 500
14350: PPUSH
14351: CALL_OW 234
// SetLives ( veh , Rand ( 900 , 999 ) ) ;
14355: LD_VAR 0 2
14359: PPUSH
14360: LD_INT 900
14362: PPUSH
14363: LD_INT 999
14365: PPUSH
14366: CALL_OW 12
14370: PPUSH
14371: CALL_OW 234
// ComMoveXY ( un , 14 , 9 ) ;
14375: LD_VAR 0 1
14379: PPUSH
14380: LD_INT 14
14382: PPUSH
14383: LD_INT 9
14385: PPUSH
14386: CALL_OW 111
// repeat Wait ( 0 0$01 ) ;
14390: LD_INT 35
14392: PPUSH
14393: CALL_OW 67
// until See ( 1 , veh ) or See ( 1 , un ) ;
14397: LD_INT 1
14399: PPUSH
14400: LD_VAR 0 2
14404: PPUSH
14405: CALL_OW 292
14409: PUSH
14410: LD_INT 1
14412: PPUSH
14413: LD_VAR 0 1
14417: PPUSH
14418: CALL_OW 292
14422: OR
14423: IFFALSE 14390
// Say ( un , Dcargo ) ;
14425: LD_VAR 0 1
14429: PPUSH
14430: LD_STRING Dcargo
14432: PPUSH
14433: CALL_OW 88
// SetSide ( un , 1 ) ;
14437: LD_VAR 0 1
14441: PPUSH
14442: LD_INT 1
14444: PPUSH
14445: CALL_OW 235
// SetSide ( veh , 1 ) ;
14449: LD_VAR 0 2
14453: PPUSH
14454: LD_INT 1
14456: PPUSH
14457: CALL_OW 235
// end ;
14461: PPOPN 3
14463: END
// every 0 0$01 trigger timer >= [ 18 18$00 , 19 19$00 , 21 21$00 ] [ global_diff ] and FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) < 5 do var un , speaker , veh , i , area ;
14464: LD_EXP 2
14468: PUSH
14469: LD_INT 37800
14471: PUSH
14472: LD_INT 39900
14474: PUSH
14475: LD_INT 44100
14477: PUSH
14478: EMPTY
14479: LIST
14480: LIST
14481: LIST
14482: PUSH
14483: LD_EXP 3
14487: ARRAY
14488: GREATEREQUAL
14489: PUSH
14490: LD_INT 22
14492: PUSH
14493: LD_INT 6
14495: PUSH
14496: EMPTY
14497: LIST
14498: LIST
14499: PUSH
14500: LD_INT 21
14502: PUSH
14503: LD_INT 2
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: PPUSH
14514: CALL_OW 69
14518: PUSH
14519: LD_INT 5
14521: LESS
14522: AND
14523: IFFALSE 14858
14525: GO 14527
14527: DISABLE
14528: LD_INT 0
14530: PPUSH
14531: PPUSH
14532: PPUSH
14533: PPUSH
14534: PPUSH
// begin area := [ us_north , us_south , us_north ] [ global_diff ] ;
14535: LD_ADDR_VAR 0 5
14539: PUSH
14540: LD_INT 21
14542: PUSH
14543: LD_INT 14
14545: PUSH
14546: LD_INT 21
14548: PUSH
14549: EMPTY
14550: LIST
14551: LIST
14552: LIST
14553: PUSH
14554: LD_EXP 3
14558: ARRAY
14559: ST_TO_ADDR
// speaker := [ ] ;
14560: LD_ADDR_VAR 0 2
14564: PUSH
14565: EMPTY
14566: ST_TO_ADDR
// uc_side := 1 ;
14567: LD_ADDR_OWVAR 20
14571: PUSH
14572: LD_INT 1
14574: ST_TO_ADDR
// uc_nation := 1 ;
14575: LD_ADDR_OWVAR 21
14579: PUSH
14580: LD_INT 1
14582: ST_TO_ADDR
// for i = 1 to 7 - [ global_diff ] do
14583: LD_ADDR_VAR 0 4
14587: PUSH
14588: DOUBLE
14589: LD_INT 1
14591: DEC
14592: ST_TO_ADDR
14593: LD_INT 7
14595: PUSH
14596: LD_EXP 3
14600: PUSH
14601: EMPTY
14602: LIST
14603: MINUS
14604: PUSH
14605: FOR_TO
14606: IFFALSE 14669
// begin un := CreateHumanWithClass ( Rand ( 1 , 4 ) , am_def ) ;
14608: LD_ADDR_VAR 0 1
14612: PUSH
14613: LD_INT 1
14615: PPUSH
14616: LD_INT 4
14618: PPUSH
14619: CALL_OW 12
14623: PPUSH
14624: LD_EXP 6
14628: PPUSH
14629: CALL 425 0 2
14633: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
14634: LD_VAR 0 1
14638: PPUSH
14639: LD_VAR 0 5
14643: PPUSH
14644: LD_INT 0
14646: PPUSH
14647: CALL_OW 49
// speaker := speaker ^ un ;
14651: LD_ADDR_VAR 0 2
14655: PUSH
14656: LD_VAR 0 2
14660: PUSH
14661: LD_VAR 0 1
14665: ADD
14666: ST_TO_ADDR
// end ;
14667: GO 14605
14669: POP
14670: POP
// vc_chassis := [ us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ global_diff ] ;
14671: LD_ADDR_OWVAR 37
14675: PUSH
14676: LD_INT 3
14678: PUSH
14679: LD_INT 2
14681: PUSH
14682: LD_INT 1
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: LIST
14689: PUSH
14690: LD_EXP 3
14694: ARRAY
14695: ST_TO_ADDR
// vc_engine := engine_solar ;
14696: LD_ADDR_OWVAR 39
14700: PUSH
14701: LD_INT 2
14703: ST_TO_ADDR
// vc_control := control_manual ;
14704: LD_ADDR_OWVAR 38
14708: PUSH
14709: LD_INT 1
14711: ST_TO_ADDR
// vc_weapon := [ us_double_gun , us_gatling_gun , us_machine_gun ] [ global_diff ] ;
14712: LD_ADDR_OWVAR 40
14716: PUSH
14717: LD_INT 5
14719: PUSH
14720: LD_INT 4
14722: PUSH
14723: LD_INT 2
14725: PUSH
14726: EMPTY
14727: LIST
14728: LIST
14729: LIST
14730: PUSH
14731: LD_EXP 3
14735: ARRAY
14736: ST_TO_ADDR
// veh := CreateVehicle ;
14737: LD_ADDR_VAR 0 3
14741: PUSH
14742: CALL_OW 45
14746: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14747: LD_VAR 0 3
14751: PPUSH
14752: LD_VAR 0 5
14756: PPUSH
14757: LD_INT 0
14759: PPUSH
14760: CALL_OW 49
// un := CreateHumanWithClass ( 3 , am_def ) ;
14764: LD_ADDR_VAR 0 1
14768: PUSH
14769: LD_INT 3
14771: PPUSH
14772: LD_EXP 6
14776: PPUSH
14777: CALL 425 0 2
14781: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14782: LD_VAR 0 1
14786: PPUSH
14787: LD_VAR 0 3
14791: PPUSH
14792: CALL_OW 52
// Wait ( 0 0$0.3 ) ;
14796: LD_INT 10
14798: PPUSH
14799: CALL_OW 67
// SayRadio ( UnitFilter ( speaker , [ f_sex , sex_male ] ) [ 1 ] , Dhelp ) ;
14803: LD_VAR 0 2
14807: PPUSH
14808: LD_INT 26
14810: PUSH
14811: LD_INT 1
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: PPUSH
14818: CALL_OW 72
14822: PUSH
14823: LD_INT 1
14825: ARRAY
14826: PPUSH
14827: LD_STRING Dhelp
14829: PPUSH
14830: CALL_OW 94
// CenterNowOnXY ( GetX ( un ) , GetY ( un ) ) ;
14834: LD_VAR 0 1
14838: PPUSH
14839: CALL_OW 250
14843: PPUSH
14844: LD_VAR 0 1
14848: PPUSH
14849: CALL_OW 251
14853: PPUSH
14854: CALL_OW 86
// end ;
14858: PPOPN 5
14860: END
// every 0 0$01 trigger FilterUnitsInArea ( kurin_a , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) and IsOk ( Kurin ) do
14861: LD_INT 19
14863: PPUSH
14864: LD_INT 2
14866: PUSH
14867: LD_INT 22
14869: PUSH
14870: LD_INT 3
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: PUSH
14877: LD_INT 22
14879: PUSH
14880: LD_INT 6
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: LIST
14891: PPUSH
14892: CALL_OW 70
14896: PUSH
14897: LD_EXP 15
14901: PPUSH
14902: CALL_OW 302
14906: AND
14907: IFFALSE 14924
14909: GO 14911
14911: DISABLE
// SayRadio ( Kurin , Dkurin ) ;
14912: LD_EXP 15
14916: PPUSH
14917: LD_STRING Dkurin
14919: PPUSH
14920: CALL_OW 94
14924: END
// every 0 0$01 trigger timer > 27 27$00 do
14925: LD_EXP 2
14929: PUSH
14930: LD_INT 56700
14932: GREATER
14933: IFFALSE 14950
14935: GO 14937
14937: DISABLE
// SayRadio ( jack , ar_come ) ;
14938: LD_EXP 18
14942: PPUSH
14943: LD_STRING ar_come
14945: PPUSH
14946: CALL_OW 94
14950: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 2 ] ) > 0 do
14951: LD_INT 22
14953: PUSH
14954: LD_INT 2
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: PPUSH
14961: CALL_OW 69
14965: PUSH
14966: LD_INT 0
14968: GREATER
14969: IFFALSE 14997
14971: GO 14973
14973: DISABLE
// begin FHeike ;
14974: CALL 11549 0 0
// Wait ( 0 0$01 ) ;
14978: LD_INT 35
14980: PPUSH
14981: CALL_OW 67
// SayRadio ( heike , heike1 ) ;
14985: LD_EXP 16
14989: PPUSH
14990: LD_STRING heike1
14992: PPUSH
14993: CALL_OW 94
// end ;
14997: END
// every 15 15$00 trigger timer > 22 22$00 do
14998: LD_EXP 2
15002: PUSH
15003: LD_INT 46200
15005: GREATER
15006: IFFALSE 15057
15008: GO 15010
15010: DISABLE
// begin enable ;
15011: ENABLE
// ArabianAttack ( 2 , ar_force , Rand ( 1 , 2 ) , [ ar_area1 , ar_area2 ] [ Rand ( 1 , 2 ) ] ) ;
15012: LD_INT 2
15014: PPUSH
15015: LD_EXP 9
15019: PPUSH
15020: LD_INT 1
15022: PPUSH
15023: LD_INT 2
15025: PPUSH
15026: CALL_OW 12
15030: PPUSH
15031: LD_INT 6
15033: PUSH
15034: LD_INT 16
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: PUSH
15041: LD_INT 1
15043: PPUSH
15044: LD_INT 2
15046: PPUSH
15047: CALL_OW 12
15051: ARRAY
15052: PPUSH
15053: CALL 10966 0 4
// end ;
15057: END
// every 0 0$01 trigger timer >= Rand ( 65 65$00 , 67 67$30 ) or ( FilterAllUnits ( [ f_side , 3 ] ) + FilterAllUnits ( [ f_side , 6 ] ) < 3 ) do var i ;
15058: LD_EXP 2
15062: PUSH
15063: LD_INT 136500
15065: PPUSH
15066: LD_INT 141750
15068: PPUSH
15069: CALL_OW 12
15073: GREATEREQUAL
15074: PUSH
15075: LD_INT 22
15077: PUSH
15078: LD_INT 3
15080: PUSH
15081: EMPTY
15082: LIST
15083: LIST
15084: PPUSH
15085: CALL_OW 69
15089: PUSH
15090: LD_INT 22
15092: PUSH
15093: LD_INT 6
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PPUSH
15100: CALL_OW 69
15104: PLUS
15105: PUSH
15106: LD_INT 3
15108: LESS
15109: OR
15110: IFFALSE 15184
15112: GO 15114
15114: DISABLE
15115: LD_INT 0
15117: PPUSH
// begin InGameOn ;
15118: CALL_OW 8
// DialogueOn ;
15122: CALL_OW 6
// SayRadio ( ron , you_win ) ;
15126: LD_EXP 17
15130: PPUSH
15131: LD_STRING you_win
15133: PPUSH
15134: CALL_OW 94
// DialogueOff ;
15138: CALL_OW 7
// InGameOff ;
15142: CALL_OW 9
// AddMedal ( med , 1 ) ;
15146: LD_STRING med
15148: PPUSH
15149: LD_INT 1
15151: PPUSH
15152: CALL_OW 101
// End_The_Mission_Allowed := true ;
15156: LD_ADDR_OWVAR 57
15160: PUSH
15161: LD_INT 1
15163: ST_TO_ADDR
// case Query ( MEnd ) of 1 :
15164: LD_STRING MEnd
15166: PPUSH
15167: CALL_OW 97
15171: PUSH
15172: LD_INT 1
15174: DOUBLE
15175: EQUAL
15176: IFTRUE 15180
15178: GO 15183
15180: POP
// ; end ;
15181: GO 15184
15183: POP
// end ;
15184: PPOPN 1
15186: END
// on EndTheMissionRaised ( exitt ) do begin End_The_Mission_Allowed := false ;
15187: LD_ADDR_OWVAR 57
15191: PUSH
15192: LD_INT 0
15194: ST_TO_ADDR
// if FilterAllUnits ( [ f_side , 3 ] ) + FilterAllUnits ( [ f_side , 6 ] ) < 3 then
15195: LD_INT 22
15197: PUSH
15198: LD_INT 3
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: PPUSH
15205: CALL_OW 69
15209: PUSH
15210: LD_INT 22
15212: PUSH
15213: LD_INT 6
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: PPUSH
15220: CALL_OW 69
15224: PLUS
15225: PUSH
15226: LD_INT 3
15228: LESS
15229: IFFALSE 15243
// AddMedal ( ru , 1 ) else
15231: LD_STRING ru
15233: PPUSH
15234: LD_INT 1
15236: PPUSH
15237: CALL_OW 101
15241: GO 15254
// AddMedal ( ru , - 1 ) ;
15243: LD_STRING ru
15245: PPUSH
15246: LD_INT 1
15248: NEG
15249: PPUSH
15250: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) > 6 then
15254: LD_INT 22
15256: PUSH
15257: LD_INT 1
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: PUSH
15264: LD_INT 21
15266: PUSH
15267: LD_INT 1
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: PPUSH
15278: CALL_OW 69
15282: PUSH
15283: LD_INT 6
15285: GREATER
15286: IFFALSE 15300
// AddMedal ( pep , 1 ) else
15288: LD_STRING pep
15290: PPUSH
15291: LD_INT 1
15293: PPUSH
15294: CALL_OW 101
15298: GO 15311
// AddMedal ( pep , - 1 ) ;
15300: LD_STRING pep
15302: PPUSH
15303: LD_INT 1
15305: NEG
15306: PPUSH
15307: CALL_OW 101
// GiveMedals ( MAIN ) ;
15311: LD_STRING MAIN
15313: PPUSH
15314: CALL_OW 102
// YouWin ;
15318: CALL_OW 103
// end ; end_of_file
15322: PPOPN 1
15324: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
15325: GO 15327
15327: DISABLE
// begin ru_radar := 98 ;
15328: LD_ADDR_EXP 46
15332: PUSH
15333: LD_INT 98
15335: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
15336: LD_ADDR_EXP 47
15340: PUSH
15341: LD_INT 89
15343: ST_TO_ADDR
// us_hack := 99 ;
15344: LD_ADDR_EXP 48
15348: PUSH
15349: LD_INT 99
15351: ST_TO_ADDR
// us_artillery := 97 ;
15352: LD_ADDR_EXP 49
15356: PUSH
15357: LD_INT 97
15359: ST_TO_ADDR
// ar_bio_bomb := 91 ;
15360: LD_ADDR_EXP 50
15364: PUSH
15365: LD_INT 91
15367: ST_TO_ADDR
// end ; end_of_file end_of_file
15368: END
// export StreamModeActive , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu ; every 0 0$1 do
15369: GO 15371
15371: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
15372: LD_STRING initStreamRollete();
15374: PPUSH
15375: CALL_OW 559
// InitStreamMode ;
15379: CALL 15384 0 0
// end ;
15383: END
// function InitStreamMode ; begin
15384: LD_INT 0
15386: PPUSH
// streamModeActive := false ;
15387: LD_ADDR_EXP 51
15391: PUSH
15392: LD_INT 0
15394: ST_TO_ADDR
// sRocket := false ;
15395: LD_ADDR_EXP 54
15399: PUSH
15400: LD_INT 0
15402: ST_TO_ADDR
// sSpeed := false ;
15403: LD_ADDR_EXP 53
15407: PUSH
15408: LD_INT 0
15410: ST_TO_ADDR
// sEngine := false ;
15411: LD_ADDR_EXP 55
15415: PUSH
15416: LD_INT 0
15418: ST_TO_ADDR
// sSpec := false ;
15419: LD_ADDR_EXP 52
15423: PUSH
15424: LD_INT 0
15426: ST_TO_ADDR
// sLevel := false ;
15427: LD_ADDR_EXP 56
15431: PUSH
15432: LD_INT 0
15434: ST_TO_ADDR
// sArmoury := false ;
15435: LD_ADDR_EXP 57
15439: PUSH
15440: LD_INT 0
15442: ST_TO_ADDR
// sRadar := false ;
15443: LD_ADDR_EXP 58
15447: PUSH
15448: LD_INT 0
15450: ST_TO_ADDR
// sBunker := false ;
15451: LD_ADDR_EXP 59
15455: PUSH
15456: LD_INT 0
15458: ST_TO_ADDR
// sHack := false ;
15459: LD_ADDR_EXP 60
15463: PUSH
15464: LD_INT 0
15466: ST_TO_ADDR
// sFire := false ;
15467: LD_ADDR_EXP 61
15471: PUSH
15472: LD_INT 0
15474: ST_TO_ADDR
// sRefresh := false ;
15475: LD_ADDR_EXP 62
15479: PUSH
15480: LD_INT 0
15482: ST_TO_ADDR
// sExp := false ;
15483: LD_ADDR_EXP 63
15487: PUSH
15488: LD_INT 0
15490: ST_TO_ADDR
// sDepot := false ;
15491: LD_ADDR_EXP 64
15495: PUSH
15496: LD_INT 0
15498: ST_TO_ADDR
// sFlag := false ;
15499: LD_ADDR_EXP 65
15503: PUSH
15504: LD_INT 0
15506: ST_TO_ADDR
// sKamikadze := false ;
15507: LD_ADDR_EXP 73
15511: PUSH
15512: LD_INT 0
15514: ST_TO_ADDR
// sTroll := false ;
15515: LD_ADDR_EXP 74
15519: PUSH
15520: LD_INT 0
15522: ST_TO_ADDR
// sSlow := false ;
15523: LD_ADDR_EXP 75
15527: PUSH
15528: LD_INT 0
15530: ST_TO_ADDR
// sLack := false ;
15531: LD_ADDR_EXP 76
15535: PUSH
15536: LD_INT 0
15538: ST_TO_ADDR
// sTank := false ;
15539: LD_ADDR_EXP 78
15543: PUSH
15544: LD_INT 0
15546: ST_TO_ADDR
// sRemote := false ;
15547: LD_ADDR_EXP 79
15551: PUSH
15552: LD_INT 0
15554: ST_TO_ADDR
// sPowell := false ;
15555: LD_ADDR_EXP 80
15559: PUSH
15560: LD_INT 0
15562: ST_TO_ADDR
// sTeleport := false ;
15563: LD_ADDR_EXP 83
15567: PUSH
15568: LD_INT 0
15570: ST_TO_ADDR
// sOilTower := false ;
15571: LD_ADDR_EXP 85
15575: PUSH
15576: LD_INT 0
15578: ST_TO_ADDR
// sShovel := false ;
15579: LD_ADDR_EXP 86
15583: PUSH
15584: LD_INT 0
15586: ST_TO_ADDR
// sSheik := false ;
15587: LD_ADDR_EXP 87
15591: PUSH
15592: LD_INT 0
15594: ST_TO_ADDR
// sSold := false ;
15595: LD_ADDR_EXP 66
15599: PUSH
15600: LD_INT 0
15602: ST_TO_ADDR
// sDiff := false ;
15603: LD_ADDR_EXP 67
15607: PUSH
15608: LD_INT 0
15610: ST_TO_ADDR
// sFog := false ;
15611: LD_ADDR_EXP 70
15615: PUSH
15616: LD_INT 0
15618: ST_TO_ADDR
// sReset := false ;
15619: LD_ADDR_EXP 71
15623: PUSH
15624: LD_INT 0
15626: ST_TO_ADDR
// sSun := false ;
15627: LD_ADDR_EXP 72
15631: PUSH
15632: LD_INT 0
15634: ST_TO_ADDR
// sTiger := false ;
15635: LD_ADDR_EXP 68
15639: PUSH
15640: LD_INT 0
15642: ST_TO_ADDR
// sBomb := false ;
15643: LD_ADDR_EXP 69
15647: PUSH
15648: LD_INT 0
15650: ST_TO_ADDR
// sWound := false ;
15651: LD_ADDR_EXP 77
15655: PUSH
15656: LD_INT 0
15658: ST_TO_ADDR
// sBetray := false ;
15659: LD_ADDR_EXP 81
15663: PUSH
15664: LD_INT 0
15666: ST_TO_ADDR
// sContamin := false ;
15667: LD_ADDR_EXP 82
15671: PUSH
15672: LD_INT 0
15674: ST_TO_ADDR
// sOil := false ;
15675: LD_ADDR_EXP 84
15679: PUSH
15680: LD_INT 0
15682: ST_TO_ADDR
// sStu := false ;
15683: LD_ADDR_EXP 88
15687: PUSH
15688: LD_INT 0
15690: ST_TO_ADDR
// end ;
15691: LD_VAR 0 1
15695: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
15696: LD_VAR 0 2
15700: PUSH
15701: LD_INT 100
15703: EQUAL
15704: IFFALSE 16401
// begin if not StreamModeActive then
15706: LD_EXP 51
15710: NOT
15711: IFFALSE 15721
// StreamModeActive := true ;
15713: LD_ADDR_EXP 51
15717: PUSH
15718: LD_INT 1
15720: ST_TO_ADDR
// if p3 = 0 then
15721: LD_VAR 0 3
15725: PUSH
15726: LD_INT 0
15728: EQUAL
15729: IFFALSE 15735
// InitStreamMode ;
15731: CALL 15384 0 0
// if p3 = 1 then
15735: LD_VAR 0 3
15739: PUSH
15740: LD_INT 1
15742: EQUAL
15743: IFFALSE 15753
// sRocket := true ;
15745: LD_ADDR_EXP 54
15749: PUSH
15750: LD_INT 1
15752: ST_TO_ADDR
// if p3 = 2 then
15753: LD_VAR 0 3
15757: PUSH
15758: LD_INT 2
15760: EQUAL
15761: IFFALSE 15771
// sSpeed := true ;
15763: LD_ADDR_EXP 53
15767: PUSH
15768: LD_INT 1
15770: ST_TO_ADDR
// if p3 = 3 then
15771: LD_VAR 0 3
15775: PUSH
15776: LD_INT 3
15778: EQUAL
15779: IFFALSE 15789
// sEngine := true ;
15781: LD_ADDR_EXP 55
15785: PUSH
15786: LD_INT 1
15788: ST_TO_ADDR
// if p3 = 4 then
15789: LD_VAR 0 3
15793: PUSH
15794: LD_INT 4
15796: EQUAL
15797: IFFALSE 15807
// sSpec := true ;
15799: LD_ADDR_EXP 52
15803: PUSH
15804: LD_INT 1
15806: ST_TO_ADDR
// if p3 = 5 then
15807: LD_VAR 0 3
15811: PUSH
15812: LD_INT 5
15814: EQUAL
15815: IFFALSE 15825
// sLevel := true ;
15817: LD_ADDR_EXP 56
15821: PUSH
15822: LD_INT 1
15824: ST_TO_ADDR
// if p3 = 6 then
15825: LD_VAR 0 3
15829: PUSH
15830: LD_INT 6
15832: EQUAL
15833: IFFALSE 15843
// sArmoury := true ;
15835: LD_ADDR_EXP 57
15839: PUSH
15840: LD_INT 1
15842: ST_TO_ADDR
// if p3 = 7 then
15843: LD_VAR 0 3
15847: PUSH
15848: LD_INT 7
15850: EQUAL
15851: IFFALSE 15861
// sRadar := true ;
15853: LD_ADDR_EXP 58
15857: PUSH
15858: LD_INT 1
15860: ST_TO_ADDR
// if p3 = 8 then
15861: LD_VAR 0 3
15865: PUSH
15866: LD_INT 8
15868: EQUAL
15869: IFFALSE 15879
// sBunker := true ;
15871: LD_ADDR_EXP 59
15875: PUSH
15876: LD_INT 1
15878: ST_TO_ADDR
// if p3 = 9 then
15879: LD_VAR 0 3
15883: PUSH
15884: LD_INT 9
15886: EQUAL
15887: IFFALSE 15897
// sHack := true ;
15889: LD_ADDR_EXP 60
15893: PUSH
15894: LD_INT 1
15896: ST_TO_ADDR
// if p3 = 10 then
15897: LD_VAR 0 3
15901: PUSH
15902: LD_INT 10
15904: EQUAL
15905: IFFALSE 15915
// sFire := true ;
15907: LD_ADDR_EXP 61
15911: PUSH
15912: LD_INT 1
15914: ST_TO_ADDR
// if p3 = 11 then
15915: LD_VAR 0 3
15919: PUSH
15920: LD_INT 11
15922: EQUAL
15923: IFFALSE 15933
// sRefresh := true ;
15925: LD_ADDR_EXP 62
15929: PUSH
15930: LD_INT 1
15932: ST_TO_ADDR
// if p3 = 12 then
15933: LD_VAR 0 3
15937: PUSH
15938: LD_INT 12
15940: EQUAL
15941: IFFALSE 15951
// sExp := true ;
15943: LD_ADDR_EXP 63
15947: PUSH
15948: LD_INT 1
15950: ST_TO_ADDR
// if p3 = 13 then
15951: LD_VAR 0 3
15955: PUSH
15956: LD_INT 13
15958: EQUAL
15959: IFFALSE 15969
// sDepot := true ;
15961: LD_ADDR_EXP 64
15965: PUSH
15966: LD_INT 1
15968: ST_TO_ADDR
// if p3 = 14 then
15969: LD_VAR 0 3
15973: PUSH
15974: LD_INT 14
15976: EQUAL
15977: IFFALSE 15987
// sFlag := true ;
15979: LD_ADDR_EXP 65
15983: PUSH
15984: LD_INT 1
15986: ST_TO_ADDR
// if p3 = 15 then
15987: LD_VAR 0 3
15991: PUSH
15992: LD_INT 15
15994: EQUAL
15995: IFFALSE 16005
// sKamikadze := true ;
15997: LD_ADDR_EXP 73
16001: PUSH
16002: LD_INT 1
16004: ST_TO_ADDR
// if p3 = 16 then
16005: LD_VAR 0 3
16009: PUSH
16010: LD_INT 16
16012: EQUAL
16013: IFFALSE 16023
// sTroll := true ;
16015: LD_ADDR_EXP 74
16019: PUSH
16020: LD_INT 1
16022: ST_TO_ADDR
// if p3 = 17 then
16023: LD_VAR 0 3
16027: PUSH
16028: LD_INT 17
16030: EQUAL
16031: IFFALSE 16041
// sSlow := true ;
16033: LD_ADDR_EXP 75
16037: PUSH
16038: LD_INT 1
16040: ST_TO_ADDR
// if p3 = 18 then
16041: LD_VAR 0 3
16045: PUSH
16046: LD_INT 18
16048: EQUAL
16049: IFFALSE 16059
// sLack := true ;
16051: LD_ADDR_EXP 76
16055: PUSH
16056: LD_INT 1
16058: ST_TO_ADDR
// if p3 = 19 then
16059: LD_VAR 0 3
16063: PUSH
16064: LD_INT 19
16066: EQUAL
16067: IFFALSE 16077
// sTank := true ;
16069: LD_ADDR_EXP 78
16073: PUSH
16074: LD_INT 1
16076: ST_TO_ADDR
// if p3 = 20 then
16077: LD_VAR 0 3
16081: PUSH
16082: LD_INT 20
16084: EQUAL
16085: IFFALSE 16095
// sRemote := true ;
16087: LD_ADDR_EXP 79
16091: PUSH
16092: LD_INT 1
16094: ST_TO_ADDR
// if p3 = 21 then
16095: LD_VAR 0 3
16099: PUSH
16100: LD_INT 21
16102: EQUAL
16103: IFFALSE 16113
// sPowell := true ;
16105: LD_ADDR_EXP 80
16109: PUSH
16110: LD_INT 1
16112: ST_TO_ADDR
// if p3 = 22 then
16113: LD_VAR 0 3
16117: PUSH
16118: LD_INT 22
16120: EQUAL
16121: IFFALSE 16131
// sTeleport := true ;
16123: LD_ADDR_EXP 83
16127: PUSH
16128: LD_INT 1
16130: ST_TO_ADDR
// if p3 = 23 then
16131: LD_VAR 0 3
16135: PUSH
16136: LD_INT 23
16138: EQUAL
16139: IFFALSE 16149
// sOilTower := true ;
16141: LD_ADDR_EXP 85
16145: PUSH
16146: LD_INT 1
16148: ST_TO_ADDR
// if p3 = 24 then
16149: LD_VAR 0 3
16153: PUSH
16154: LD_INT 24
16156: EQUAL
16157: IFFALSE 16167
// sShovel := true ;
16159: LD_ADDR_EXP 86
16163: PUSH
16164: LD_INT 1
16166: ST_TO_ADDR
// if p3 = 25 then
16167: LD_VAR 0 3
16171: PUSH
16172: LD_INT 25
16174: EQUAL
16175: IFFALSE 16185
// sSheik := true ;
16177: LD_ADDR_EXP 87
16181: PUSH
16182: LD_INT 1
16184: ST_TO_ADDR
// if p3 = 101 then
16185: LD_VAR 0 3
16189: PUSH
16190: LD_INT 101
16192: EQUAL
16193: IFFALSE 16203
// sSold := true ;
16195: LD_ADDR_EXP 66
16199: PUSH
16200: LD_INT 1
16202: ST_TO_ADDR
// if p3 = 102 then
16203: LD_VAR 0 3
16207: PUSH
16208: LD_INT 102
16210: EQUAL
16211: IFFALSE 16221
// sDiff := true ;
16213: LD_ADDR_EXP 67
16217: PUSH
16218: LD_INT 1
16220: ST_TO_ADDR
// if p3 = 103 then
16221: LD_VAR 0 3
16225: PUSH
16226: LD_INT 103
16228: EQUAL
16229: IFFALSE 16239
// sFog := true ;
16231: LD_ADDR_EXP 70
16235: PUSH
16236: LD_INT 1
16238: ST_TO_ADDR
// if p3 = 104 then
16239: LD_VAR 0 3
16243: PUSH
16244: LD_INT 104
16246: EQUAL
16247: IFFALSE 16257
// sReset := true ;
16249: LD_ADDR_EXP 71
16253: PUSH
16254: LD_INT 1
16256: ST_TO_ADDR
// if p3 = 105 then
16257: LD_VAR 0 3
16261: PUSH
16262: LD_INT 105
16264: EQUAL
16265: IFFALSE 16275
// sSun := true ;
16267: LD_ADDR_EXP 72
16271: PUSH
16272: LD_INT 1
16274: ST_TO_ADDR
// if p3 = 106 then
16275: LD_VAR 0 3
16279: PUSH
16280: LD_INT 106
16282: EQUAL
16283: IFFALSE 16293
// sTiger := true ;
16285: LD_ADDR_EXP 68
16289: PUSH
16290: LD_INT 1
16292: ST_TO_ADDR
// if p3 = 107 then
16293: LD_VAR 0 3
16297: PUSH
16298: LD_INT 107
16300: EQUAL
16301: IFFALSE 16311
// sBomb := true ;
16303: LD_ADDR_EXP 69
16307: PUSH
16308: LD_INT 1
16310: ST_TO_ADDR
// if p3 = 108 then
16311: LD_VAR 0 3
16315: PUSH
16316: LD_INT 108
16318: EQUAL
16319: IFFALSE 16329
// sWound := true ;
16321: LD_ADDR_EXP 77
16325: PUSH
16326: LD_INT 1
16328: ST_TO_ADDR
// if p3 = 109 then
16329: LD_VAR 0 3
16333: PUSH
16334: LD_INT 109
16336: EQUAL
16337: IFFALSE 16347
// sBetray := true ;
16339: LD_ADDR_EXP 81
16343: PUSH
16344: LD_INT 1
16346: ST_TO_ADDR
// if p3 = 110 then
16347: LD_VAR 0 3
16351: PUSH
16352: LD_INT 110
16354: EQUAL
16355: IFFALSE 16365
// sContamin := true ;
16357: LD_ADDR_EXP 82
16361: PUSH
16362: LD_INT 1
16364: ST_TO_ADDR
// if p3 = 111 then
16365: LD_VAR 0 3
16369: PUSH
16370: LD_INT 111
16372: EQUAL
16373: IFFALSE 16383
// sOil := true ;
16375: LD_ADDR_EXP 84
16379: PUSH
16380: LD_INT 1
16382: ST_TO_ADDR
// if p3 = 112 then
16383: LD_VAR 0 3
16387: PUSH
16388: LD_INT 112
16390: EQUAL
16391: IFFALSE 16401
// sStu := true ;
16393: LD_ADDR_EXP 88
16397: PUSH
16398: LD_INT 1
16400: ST_TO_ADDR
// end ; end ;
16401: PPOPN 6
16403: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16404: LD_EXP 51
16408: PUSH
16409: LD_EXP 54
16413: AND
16414: IFFALSE 16538
16416: GO 16418
16418: DISABLE
16419: LD_INT 0
16421: PPUSH
16422: PPUSH
// begin enable ;
16423: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16424: LD_ADDR_VAR 0 2
16428: PUSH
16429: LD_INT 22
16431: PUSH
16432: LD_OWVAR 2
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: PUSH
16441: LD_INT 2
16443: PUSH
16444: LD_INT 34
16446: PUSH
16447: LD_INT 7
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: PUSH
16454: LD_INT 34
16456: PUSH
16457: LD_INT 45
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: PUSH
16464: LD_INT 34
16466: PUSH
16467: LD_INT 28
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: PUSH
16474: LD_INT 34
16476: PUSH
16477: LD_INT 47
16479: PUSH
16480: EMPTY
16481: LIST
16482: LIST
16483: PUSH
16484: EMPTY
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PPUSH
16495: CALL_OW 69
16499: ST_TO_ADDR
// if not tmp then
16500: LD_VAR 0 2
16504: NOT
16505: IFFALSE 16509
// exit ;
16507: GO 16538
// for i in tmp do
16509: LD_ADDR_VAR 0 1
16513: PUSH
16514: LD_VAR 0 2
16518: PUSH
16519: FOR_IN
16520: IFFALSE 16536
// begin SetLives ( i , 0 ) ;
16522: LD_VAR 0 1
16526: PPUSH
16527: LD_INT 0
16529: PPUSH
16530: CALL_OW 234
// end ;
16534: GO 16519
16536: POP
16537: POP
// end ;
16538: PPOPN 2
16540: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16541: LD_EXP 51
16545: PUSH
16546: LD_EXP 55
16550: AND
16551: IFFALSE 16632
16553: GO 16555
16555: DISABLE
16556: LD_INT 0
16558: PPUSH
16559: PPUSH
// begin enable ;
16560: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16561: LD_ADDR_VAR 0 2
16565: PUSH
16566: LD_INT 22
16568: PUSH
16569: LD_OWVAR 2
16573: PUSH
16574: EMPTY
16575: LIST
16576: LIST
16577: PUSH
16578: LD_INT 32
16580: PUSH
16581: LD_INT 3
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: PUSH
16588: EMPTY
16589: LIST
16590: LIST
16591: PPUSH
16592: CALL_OW 69
16596: ST_TO_ADDR
// if not tmp then
16597: LD_VAR 0 2
16601: NOT
16602: IFFALSE 16606
// exit ;
16604: GO 16632
// for i in tmp do
16606: LD_ADDR_VAR 0 1
16610: PUSH
16611: LD_VAR 0 2
16615: PUSH
16616: FOR_IN
16617: IFFALSE 16630
// begin DestroyUnit ( i ) ;
16619: LD_VAR 0 1
16623: PPUSH
16624: CALL_OW 65
// end ;
16628: GO 16616
16630: POP
16631: POP
// end ;
16632: PPOPN 2
16634: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16635: LD_EXP 51
16639: PUSH
16640: LD_EXP 52
16644: AND
16645: IFFALSE 16738
16647: GO 16649
16649: DISABLE
16650: LD_INT 0
16652: PPUSH
// begin enable ;
16653: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16654: LD_ADDR_VAR 0 1
16658: PUSH
16659: LD_INT 22
16661: PUSH
16662: LD_OWVAR 2
16666: PUSH
16667: EMPTY
16668: LIST
16669: LIST
16670: PUSH
16671: LD_INT 2
16673: PUSH
16674: LD_INT 25
16676: PUSH
16677: LD_INT 5
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: PUSH
16684: LD_INT 25
16686: PUSH
16687: LD_INT 9
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: PUSH
16694: LD_INT 25
16696: PUSH
16697: LD_INT 8
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PPUSH
16714: CALL_OW 69
16718: PUSH
16719: FOR_IN
16720: IFFALSE 16736
// begin SetClass ( i , 1 ) ;
16722: LD_VAR 0 1
16726: PPUSH
16727: LD_INT 1
16729: PPUSH
16730: CALL_OW 336
// end ;
16734: GO 16719
16736: POP
16737: POP
// end ;
16738: PPOPN 1
16740: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16741: LD_EXP 51
16745: PUSH
16746: LD_EXP 53
16750: AND
16751: PUSH
16752: LD_OWVAR 65
16756: PUSH
16757: LD_INT 7
16759: LESS
16760: AND
16761: IFFALSE 16775
16763: GO 16765
16765: DISABLE
// begin enable ;
16766: ENABLE
// game_speed := 7 ;
16767: LD_ADDR_OWVAR 65
16771: PUSH
16772: LD_INT 7
16774: ST_TO_ADDR
// end ;
16775: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16776: LD_EXP 51
16780: PUSH
16781: LD_EXP 56
16785: AND
16786: IFFALSE 16988
16788: GO 16790
16790: DISABLE
16791: LD_INT 0
16793: PPUSH
16794: PPUSH
16795: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16796: LD_ADDR_VAR 0 3
16800: PUSH
16801: LD_INT 81
16803: PUSH
16804: LD_OWVAR 2
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: PUSH
16813: LD_INT 21
16815: PUSH
16816: LD_INT 1
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: PPUSH
16827: CALL_OW 69
16831: ST_TO_ADDR
// if not tmp then
16832: LD_VAR 0 3
16836: NOT
16837: IFFALSE 16841
// exit ;
16839: GO 16988
// if tmp > 5 then
16841: LD_VAR 0 3
16845: PUSH
16846: LD_INT 5
16848: GREATER
16849: IFFALSE 16861
// k := 5 else
16851: LD_ADDR_VAR 0 2
16855: PUSH
16856: LD_INT 5
16858: ST_TO_ADDR
16859: GO 16871
// k := tmp ;
16861: LD_ADDR_VAR 0 2
16865: PUSH
16866: LD_VAR 0 3
16870: ST_TO_ADDR
// for i := 1 to k do
16871: LD_ADDR_VAR 0 1
16875: PUSH
16876: DOUBLE
16877: LD_INT 1
16879: DEC
16880: ST_TO_ADDR
16881: LD_VAR 0 2
16885: PUSH
16886: FOR_TO
16887: IFFALSE 16986
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
16889: LD_VAR 0 3
16893: PUSH
16894: LD_VAR 0 1
16898: ARRAY
16899: PPUSH
16900: LD_VAR 0 1
16904: PUSH
16905: LD_INT 4
16907: MOD
16908: PUSH
16909: LD_INT 1
16911: PLUS
16912: PPUSH
16913: CALL_OW 259
16917: PUSH
16918: LD_INT 10
16920: LESS
16921: IFFALSE 16984
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
16923: LD_VAR 0 3
16927: PUSH
16928: LD_VAR 0 1
16932: ARRAY
16933: PPUSH
16934: LD_VAR 0 1
16938: PUSH
16939: LD_INT 4
16941: MOD
16942: PUSH
16943: LD_INT 1
16945: PLUS
16946: PPUSH
16947: LD_VAR 0 3
16951: PUSH
16952: LD_VAR 0 1
16956: ARRAY
16957: PPUSH
16958: LD_VAR 0 1
16962: PUSH
16963: LD_INT 4
16965: MOD
16966: PUSH
16967: LD_INT 1
16969: PLUS
16970: PPUSH
16971: CALL_OW 259
16975: PUSH
16976: LD_INT 1
16978: PLUS
16979: PPUSH
16980: CALL_OW 237
16984: GO 16886
16986: POP
16987: POP
// end ;
16988: PPOPN 3
16990: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
16991: LD_EXP 51
16995: PUSH
16996: LD_EXP 57
17000: AND
17001: IFFALSE 17021
17003: GO 17005
17005: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17006: LD_INT 4
17008: PPUSH
17009: LD_OWVAR 2
17013: PPUSH
17014: LD_INT 0
17016: PPUSH
17017: CALL_OW 324
17021: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17022: LD_EXP 51
17026: PUSH
17027: LD_EXP 86
17031: AND
17032: IFFALSE 17052
17034: GO 17036
17036: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17037: LD_INT 19
17039: PPUSH
17040: LD_OWVAR 2
17044: PPUSH
17045: LD_INT 0
17047: PPUSH
17048: CALL_OW 324
17052: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17053: LD_EXP 51
17057: PUSH
17058: LD_EXP 58
17062: AND
17063: IFFALSE 17162
17065: GO 17067
17067: DISABLE
17068: LD_INT 0
17070: PPUSH
17071: PPUSH
// begin enable ;
17072: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17073: LD_ADDR_VAR 0 2
17077: PUSH
17078: LD_INT 22
17080: PUSH
17081: LD_OWVAR 2
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: PUSH
17090: LD_INT 2
17092: PUSH
17093: LD_INT 34
17095: PUSH
17096: LD_INT 11
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: PUSH
17103: LD_INT 34
17105: PUSH
17106: LD_INT 30
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: LIST
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: PPUSH
17122: CALL_OW 69
17126: ST_TO_ADDR
// if not tmp then
17127: LD_VAR 0 2
17131: NOT
17132: IFFALSE 17136
// exit ;
17134: GO 17162
// for i in tmp do
17136: LD_ADDR_VAR 0 1
17140: PUSH
17141: LD_VAR 0 2
17145: PUSH
17146: FOR_IN
17147: IFFALSE 17160
// begin DestroyUnit ( i ) ;
17149: LD_VAR 0 1
17153: PPUSH
17154: CALL_OW 65
// end ;
17158: GO 17146
17160: POP
17161: POP
// end ;
17162: PPOPN 2
17164: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17165: LD_EXP 51
17169: PUSH
17170: LD_EXP 59
17174: AND
17175: IFFALSE 17195
17177: GO 17179
17179: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17180: LD_INT 32
17182: PPUSH
17183: LD_OWVAR 2
17187: PPUSH
17188: LD_INT 0
17190: PPUSH
17191: CALL_OW 324
17195: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17196: LD_EXP 51
17200: PUSH
17201: LD_EXP 60
17205: AND
17206: IFFALSE 17387
17208: GO 17210
17210: DISABLE
17211: LD_INT 0
17213: PPUSH
17214: PPUSH
17215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17216: LD_ADDR_VAR 0 2
17220: PUSH
17221: LD_INT 22
17223: PUSH
17224: LD_OWVAR 2
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PUSH
17233: LD_INT 33
17235: PUSH
17236: LD_INT 3
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PPUSH
17247: CALL_OW 69
17251: ST_TO_ADDR
// if not tmp then
17252: LD_VAR 0 2
17256: NOT
17257: IFFALSE 17261
// exit ;
17259: GO 17387
// side := 0 ;
17261: LD_ADDR_VAR 0 3
17265: PUSH
17266: LD_INT 0
17268: ST_TO_ADDR
// for i := 1 to 8 do
17269: LD_ADDR_VAR 0 1
17273: PUSH
17274: DOUBLE
17275: LD_INT 1
17277: DEC
17278: ST_TO_ADDR
17279: LD_INT 8
17281: PUSH
17282: FOR_TO
17283: IFFALSE 17331
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17285: LD_OWVAR 2
17289: PUSH
17290: LD_VAR 0 1
17294: NONEQUAL
17295: PUSH
17296: LD_OWVAR 2
17300: PPUSH
17301: LD_VAR 0 1
17305: PPUSH
17306: CALL_OW 81
17310: PUSH
17311: LD_INT 2
17313: EQUAL
17314: AND
17315: IFFALSE 17329
// begin side := i ;
17317: LD_ADDR_VAR 0 3
17321: PUSH
17322: LD_VAR 0 1
17326: ST_TO_ADDR
// break ;
17327: GO 17331
// end ;
17329: GO 17282
17331: POP
17332: POP
// if not side then
17333: LD_VAR 0 3
17337: NOT
17338: IFFALSE 17342
// exit ;
17340: GO 17387
// for i := 1 to tmp do
17342: LD_ADDR_VAR 0 1
17346: PUSH
17347: DOUBLE
17348: LD_INT 1
17350: DEC
17351: ST_TO_ADDR
17352: LD_VAR 0 2
17356: PUSH
17357: FOR_TO
17358: IFFALSE 17385
// if Prob ( 30 ) then
17360: LD_INT 30
17362: PPUSH
17363: CALL_OW 13
17367: IFFALSE 17383
// SetSide ( i , side ) ;
17369: LD_VAR 0 1
17373: PPUSH
17374: LD_VAR 0 3
17378: PPUSH
17379: CALL_OW 235
17383: GO 17357
17385: POP
17386: POP
// end ;
17387: PPOPN 3
17389: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17390: LD_EXP 51
17394: PUSH
17395: LD_EXP 62
17399: AND
17400: IFFALSE 17519
17402: GO 17404
17404: DISABLE
17405: LD_INT 0
17407: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17408: LD_ADDR_VAR 0 1
17412: PUSH
17413: LD_INT 22
17415: PUSH
17416: LD_OWVAR 2
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: PUSH
17425: LD_INT 21
17427: PUSH
17428: LD_INT 1
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: PUSH
17435: LD_INT 3
17437: PUSH
17438: LD_INT 23
17440: PUSH
17441: LD_INT 0
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: LIST
17456: PPUSH
17457: CALL_OW 69
17461: PUSH
17462: FOR_IN
17463: IFFALSE 17517
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17465: LD_VAR 0 1
17469: PPUSH
17470: CALL_OW 257
17474: PUSH
17475: LD_INT 1
17477: PUSH
17478: LD_INT 2
17480: PUSH
17481: LD_INT 3
17483: PUSH
17484: LD_INT 4
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: IN
17493: IFFALSE 17515
// SetClass ( un , rand ( 1 , 4 ) ) ;
17495: LD_VAR 0 1
17499: PPUSH
17500: LD_INT 1
17502: PPUSH
17503: LD_INT 4
17505: PPUSH
17506: CALL_OW 12
17510: PPUSH
17511: CALL_OW 336
17515: GO 17462
17517: POP
17518: POP
// end ;
17519: PPOPN 1
17521: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17522: LD_EXP 51
17526: PUSH
17527: LD_EXP 61
17531: AND
17532: IFFALSE 17611
17534: GO 17536
17536: DISABLE
17537: LD_INT 0
17539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17540: LD_ADDR_VAR 0 1
17544: PUSH
17545: LD_INT 22
17547: PUSH
17548: LD_OWVAR 2
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PUSH
17557: LD_INT 21
17559: PUSH
17560: LD_INT 3
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: PPUSH
17571: CALL_OW 69
17575: ST_TO_ADDR
// if not tmp then
17576: LD_VAR 0 1
17580: NOT
17581: IFFALSE 17585
// exit ;
17583: GO 17611
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17585: LD_VAR 0 1
17589: PUSH
17590: LD_INT 1
17592: PPUSH
17593: LD_VAR 0 1
17597: PPUSH
17598: CALL_OW 12
17602: ARRAY
17603: PPUSH
17604: LD_INT 100
17606: PPUSH
17607: CALL_OW 234
// end ;
17611: PPOPN 1
17613: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17614: LD_EXP 51
17618: PUSH
17619: LD_EXP 63
17623: AND
17624: IFFALSE 17722
17626: GO 17628
17628: DISABLE
17629: LD_INT 0
17631: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17632: LD_ADDR_VAR 0 1
17636: PUSH
17637: LD_INT 22
17639: PUSH
17640: LD_OWVAR 2
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PUSH
17649: LD_INT 21
17651: PUSH
17652: LD_INT 1
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: PPUSH
17663: CALL_OW 69
17667: ST_TO_ADDR
// if not tmp then
17668: LD_VAR 0 1
17672: NOT
17673: IFFALSE 17677
// exit ;
17675: GO 17722
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17677: LD_VAR 0 1
17681: PUSH
17682: LD_INT 1
17684: PPUSH
17685: LD_VAR 0 1
17689: PPUSH
17690: CALL_OW 12
17694: ARRAY
17695: PPUSH
17696: LD_INT 1
17698: PPUSH
17699: LD_INT 4
17701: PPUSH
17702: CALL_OW 12
17706: PPUSH
17707: LD_INT 3000
17709: PPUSH
17710: LD_INT 9000
17712: PPUSH
17713: CALL_OW 12
17717: PPUSH
17718: CALL_OW 492
// end ;
17722: PPOPN 1
17724: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17725: LD_EXP 51
17729: PUSH
17730: LD_EXP 64
17734: AND
17735: IFFALSE 17755
17737: GO 17739
17739: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17740: LD_INT 1
17742: PPUSH
17743: LD_OWVAR 2
17747: PPUSH
17748: LD_INT 0
17750: PPUSH
17751: CALL_OW 324
17755: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17756: LD_EXP 51
17760: PUSH
17761: LD_EXP 65
17765: AND
17766: IFFALSE 17849
17768: GO 17770
17770: DISABLE
17771: LD_INT 0
17773: PPUSH
17774: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17775: LD_ADDR_VAR 0 2
17779: PUSH
17780: LD_INT 22
17782: PUSH
17783: LD_OWVAR 2
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: PUSH
17792: LD_INT 21
17794: PUSH
17795: LD_INT 3
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: PPUSH
17806: CALL_OW 69
17810: ST_TO_ADDR
// if not tmp then
17811: LD_VAR 0 2
17815: NOT
17816: IFFALSE 17820
// exit ;
17818: GO 17849
// for i in tmp do
17820: LD_ADDR_VAR 0 1
17824: PUSH
17825: LD_VAR 0 2
17829: PUSH
17830: FOR_IN
17831: IFFALSE 17847
// SetBLevel ( i , 10 ) ;
17833: LD_VAR 0 1
17837: PPUSH
17838: LD_INT 10
17840: PPUSH
17841: CALL_OW 241
17845: GO 17830
17847: POP
17848: POP
// end ;
17849: PPOPN 2
17851: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17852: LD_EXP 51
17856: PUSH
17857: LD_EXP 66
17861: AND
17862: IFFALSE 17973
17864: GO 17866
17866: DISABLE
17867: LD_INT 0
17869: PPUSH
17870: PPUSH
17871: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17872: LD_ADDR_VAR 0 3
17876: PUSH
17877: LD_INT 22
17879: PUSH
17880: LD_OWVAR 2
17884: PUSH
17885: EMPTY
17886: LIST
17887: LIST
17888: PUSH
17889: LD_INT 25
17891: PUSH
17892: LD_INT 1
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: PPUSH
17903: CALL_OW 69
17907: ST_TO_ADDR
// if not tmp then
17908: LD_VAR 0 3
17912: NOT
17913: IFFALSE 17917
// exit ;
17915: GO 17973
// un := tmp [ rand ( 1 , tmp ) ] ;
17917: LD_ADDR_VAR 0 2
17921: PUSH
17922: LD_VAR 0 3
17926: PUSH
17927: LD_INT 1
17929: PPUSH
17930: LD_VAR 0 3
17934: PPUSH
17935: CALL_OW 12
17939: ARRAY
17940: ST_TO_ADDR
// if Crawls ( un ) then
17941: LD_VAR 0 2
17945: PPUSH
17946: CALL_OW 318
17950: IFFALSE 17961
// ComWalk ( un ) ;
17952: LD_VAR 0 2
17956: PPUSH
17957: CALL_OW 138
// SetClass ( un , class_sniper ) ;
17961: LD_VAR 0 2
17965: PPUSH
17966: LD_INT 5
17968: PPUSH
17969: CALL_OW 336
// end ;
17973: PPOPN 3
17975: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
17976: LD_EXP 51
17980: PUSH
17981: LD_EXP 67
17985: AND
17986: PUSH
17987: LD_OWVAR 67
17991: PUSH
17992: LD_INT 3
17994: LESS
17995: AND
17996: IFFALSE 18015
17998: GO 18000
18000: DISABLE
// Difficulty := Difficulty + 1 ;
18001: LD_ADDR_OWVAR 67
18005: PUSH
18006: LD_OWVAR 67
18010: PUSH
18011: LD_INT 1
18013: PLUS
18014: ST_TO_ADDR
18015: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18016: LD_EXP 51
18020: PUSH
18021: LD_EXP 68
18025: AND
18026: IFFALSE 18129
18028: GO 18030
18030: DISABLE
18031: LD_INT 0
18033: PPUSH
// begin for i := 1 to 5 do
18034: LD_ADDR_VAR 0 1
18038: PUSH
18039: DOUBLE
18040: LD_INT 1
18042: DEC
18043: ST_TO_ADDR
18044: LD_INT 5
18046: PUSH
18047: FOR_TO
18048: IFFALSE 18127
// begin uc_nation := nation_nature ;
18050: LD_ADDR_OWVAR 21
18054: PUSH
18055: LD_INT 0
18057: ST_TO_ADDR
// uc_side := 0 ;
18058: LD_ADDR_OWVAR 20
18062: PUSH
18063: LD_INT 0
18065: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18066: LD_ADDR_OWVAR 29
18070: PUSH
18071: LD_INT 12
18073: PUSH
18074: LD_INT 12
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: ST_TO_ADDR
// hc_agressivity := 20 ;
18081: LD_ADDR_OWVAR 35
18085: PUSH
18086: LD_INT 20
18088: ST_TO_ADDR
// hc_class := class_tiger ;
18089: LD_ADDR_OWVAR 28
18093: PUSH
18094: LD_INT 14
18096: ST_TO_ADDR
// hc_gallery :=  ;
18097: LD_ADDR_OWVAR 33
18101: PUSH
18102: LD_STRING 
18104: ST_TO_ADDR
// hc_name :=  ;
18105: LD_ADDR_OWVAR 26
18109: PUSH
18110: LD_STRING 
18112: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18113: CALL_OW 44
18117: PPUSH
18118: LD_INT 0
18120: PPUSH
18121: CALL_OW 51
// end ;
18125: GO 18047
18127: POP
18128: POP
// end ;
18129: PPOPN 1
18131: END
// every 0 0$1 trigger StreamModeActive and sBomb do var i , x , y , result ;
18132: LD_EXP 51
18136: PUSH
18137: LD_EXP 69
18141: AND
18142: IFFALSE 18316
18144: GO 18146
18146: DISABLE
18147: LD_INT 0
18149: PPUSH
18150: PPUSH
18151: PPUSH
18152: PPUSH
// begin result := false ;
18153: LD_ADDR_VAR 0 4
18157: PUSH
18158: LD_INT 0
18160: ST_TO_ADDR
// for i := 1 to 8 do
18161: LD_ADDR_VAR 0 1
18165: PUSH
18166: DOUBLE
18167: LD_INT 1
18169: DEC
18170: ST_TO_ADDR
18171: LD_INT 8
18173: PUSH
18174: FOR_TO
18175: IFFALSE 18286
// begin x := [ 10 , 50 , 90 , 140 ] [ rand ( 1 , 4 ) ] ;
18177: LD_ADDR_VAR 0 2
18181: PUSH
18182: LD_INT 10
18184: PUSH
18185: LD_INT 50
18187: PUSH
18188: LD_INT 90
18190: PUSH
18191: LD_INT 140
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: PUSH
18200: LD_INT 1
18202: PPUSH
18203: LD_INT 4
18205: PPUSH
18206: CALL_OW 12
18210: ARRAY
18211: ST_TO_ADDR
// y := [ 10 , 50 , 90 , 140 ] [ rand ( 1 , 4 ) ] ;
18212: LD_ADDR_VAR 0 3
18216: PUSH
18217: LD_INT 10
18219: PUSH
18220: LD_INT 50
18222: PUSH
18223: LD_INT 90
18225: PUSH
18226: LD_INT 140
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: PUSH
18235: LD_INT 1
18237: PPUSH
18238: LD_INT 4
18240: PPUSH
18241: CALL_OW 12
18245: ARRAY
18246: ST_TO_ADDR
// if ValidHex ( x , y ) then
18247: LD_VAR 0 2
18251: PPUSH
18252: LD_VAR 0 3
18256: PPUSH
18257: CALL_OW 488
18261: IFFALSE 18284
// begin result := [ x , y ] ;
18263: LD_ADDR_VAR 0 4
18267: PUSH
18268: LD_VAR 0 2
18272: PUSH
18273: LD_VAR 0 3
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: ST_TO_ADDR
// break ;
18282: GO 18286
// end ; end ;
18284: GO 18174
18286: POP
18287: POP
// if result then
18288: LD_VAR 0 4
18292: IFFALSE 18316
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18294: LD_VAR 0 4
18298: PUSH
18299: LD_INT 1
18301: ARRAY
18302: PPUSH
18303: LD_VAR 0 4
18307: PUSH
18308: LD_INT 2
18310: ARRAY
18311: PPUSH
18312: CALL_OW 429
// end ;
18316: PPOPN 4
18318: END
// every 0 0$1 trigger StreamModeActive and sReset do
18319: LD_EXP 51
18323: PUSH
18324: LD_EXP 71
18328: AND
18329: IFFALSE 18341
18331: GO 18333
18333: DISABLE
// YouLost (  ) ;
18334: LD_STRING 
18336: PPUSH
18337: CALL_OW 104
18341: END
// every 0 0$1 trigger StreamModeActive and sFog do
18342: LD_EXP 51
18346: PUSH
18347: LD_EXP 70
18351: AND
18352: IFFALSE 18366
18354: GO 18356
18356: DISABLE
// FogOff ( your_side ) ;
18357: LD_OWVAR 2
18361: PPUSH
18362: CALL_OW 344
18366: END
// every 0 0$1 trigger StreamModeActive and sSun do
18367: LD_EXP 51
18371: PUSH
18372: LD_EXP 72
18376: AND
18377: IFFALSE 18405
18379: GO 18381
18381: DISABLE
// begin solar_recharge_percent := 0 ;
18382: LD_ADDR_OWVAR 79
18386: PUSH
18387: LD_INT 0
18389: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18390: LD_INT 10500
18392: PPUSH
18393: CALL_OW 67
// solar_recharge_percent := 100 ;
18397: LD_ADDR_OWVAR 79
18401: PUSH
18402: LD_INT 100
18404: ST_TO_ADDR
// end ;
18405: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18406: LD_EXP 51
18410: PUSH
18411: LD_EXP 73
18415: AND
18416: IFFALSE 18655
18418: GO 18420
18420: DISABLE
18421: LD_INT 0
18423: PPUSH
18424: PPUSH
18425: PPUSH
// begin tmp := [ ] ;
18426: LD_ADDR_VAR 0 3
18430: PUSH
18431: EMPTY
18432: ST_TO_ADDR
// for i := 1 to 6 do
18433: LD_ADDR_VAR 0 1
18437: PUSH
18438: DOUBLE
18439: LD_INT 1
18441: DEC
18442: ST_TO_ADDR
18443: LD_INT 6
18445: PUSH
18446: FOR_TO
18447: IFFALSE 18552
// begin uc_nation := nation_nature ;
18449: LD_ADDR_OWVAR 21
18453: PUSH
18454: LD_INT 0
18456: ST_TO_ADDR
// uc_side := 0 ;
18457: LD_ADDR_OWVAR 20
18461: PUSH
18462: LD_INT 0
18464: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18465: LD_ADDR_OWVAR 29
18469: PUSH
18470: LD_INT 12
18472: PUSH
18473: LD_INT 12
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: ST_TO_ADDR
// hc_agressivity := 20 ;
18480: LD_ADDR_OWVAR 35
18484: PUSH
18485: LD_INT 20
18487: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18488: LD_ADDR_OWVAR 28
18492: PUSH
18493: LD_INT 17
18495: ST_TO_ADDR
// hc_gallery :=  ;
18496: LD_ADDR_OWVAR 33
18500: PUSH
18501: LD_STRING 
18503: ST_TO_ADDR
// hc_name :=  ;
18504: LD_ADDR_OWVAR 26
18508: PUSH
18509: LD_STRING 
18511: ST_TO_ADDR
// un := CreateHuman ;
18512: LD_ADDR_VAR 0 2
18516: PUSH
18517: CALL_OW 44
18521: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18522: LD_VAR 0 2
18526: PPUSH
18527: LD_INT 1
18529: PPUSH
18530: CALL_OW 51
// tmp := tmp * un ;
18534: LD_ADDR_VAR 0 3
18538: PUSH
18539: LD_VAR 0 3
18543: PUSH
18544: LD_VAR 0 2
18548: MUL
18549: ST_TO_ADDR
// end ;
18550: GO 18446
18552: POP
18553: POP
// repeat wait ( 0 0$1 ) ;
18554: LD_INT 35
18556: PPUSH
18557: CALL_OW 67
// for un in tmp do
18561: LD_ADDR_VAR 0 2
18565: PUSH
18566: LD_VAR 0 3
18570: PUSH
18571: FOR_IN
18572: IFFALSE 18646
// begin if IsDead ( un ) then
18574: LD_VAR 0 2
18578: PPUSH
18579: CALL_OW 301
18583: IFFALSE 18603
// begin tmp := tmp diff un ;
18585: LD_ADDR_VAR 0 3
18589: PUSH
18590: LD_VAR 0 3
18594: PUSH
18595: LD_VAR 0 2
18599: DIFF
18600: ST_TO_ADDR
// continue ;
18601: GO 18571
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18603: LD_VAR 0 2
18607: PPUSH
18608: LD_INT 3
18610: PUSH
18611: LD_INT 22
18613: PUSH
18614: LD_INT 0
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PPUSH
18625: CALL_OW 69
18629: PPUSH
18630: LD_VAR 0 2
18634: PPUSH
18635: CALL_OW 74
18639: PPUSH
18640: CALL_OW 115
// end ;
18644: GO 18571
18646: POP
18647: POP
// until not tmp ;
18648: LD_VAR 0 3
18652: NOT
18653: IFFALSE 18554
// end ;
18655: PPOPN 3
18657: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18658: LD_EXP 51
18662: PUSH
18663: LD_EXP 74
18667: AND
18668: IFFALSE 18694
18670: GO 18672
18672: DISABLE
// begin ToLua ( displayTroll(); ) ;
18673: LD_STRING displayTroll();
18675: PPUSH
18676: CALL_OW 559
// wait ( 3 3$00 ) ;
18680: LD_INT 6300
18682: PPUSH
18683: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18687: LD_STRING hideTroll();
18689: PPUSH
18690: CALL_OW 559
// end ;
18694: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18695: LD_EXP 51
18699: PUSH
18700: LD_EXP 75
18704: AND
18705: IFFALSE 18768
18707: GO 18709
18709: DISABLE
18710: LD_INT 0
18712: PPUSH
// begin p := 0 ;
18713: LD_ADDR_VAR 0 1
18717: PUSH
18718: LD_INT 0
18720: ST_TO_ADDR
// repeat game_speed := 1 ;
18721: LD_ADDR_OWVAR 65
18725: PUSH
18726: LD_INT 1
18728: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18729: LD_INT 35
18731: PPUSH
18732: CALL_OW 67
// p := p + 1 ;
18736: LD_ADDR_VAR 0 1
18740: PUSH
18741: LD_VAR 0 1
18745: PUSH
18746: LD_INT 1
18748: PLUS
18749: ST_TO_ADDR
// until p >= 60 ;
18750: LD_VAR 0 1
18754: PUSH
18755: LD_INT 60
18757: GREATEREQUAL
18758: IFFALSE 18721
// game_speed := 4 ;
18760: LD_ADDR_OWVAR 65
18764: PUSH
18765: LD_INT 4
18767: ST_TO_ADDR
// end ;
18768: PPOPN 1
18770: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
18771: LD_EXP 51
18775: PUSH
18776: LD_EXP 76
18780: AND
18781: IFFALSE 18927
18783: GO 18785
18785: DISABLE
18786: LD_INT 0
18788: PPUSH
18789: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18790: LD_ADDR_VAR 0 1
18794: PUSH
18795: LD_INT 22
18797: PUSH
18798: LD_OWVAR 2
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 2
18809: PUSH
18810: LD_INT 30
18812: PUSH
18813: LD_INT 0
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: LD_INT 30
18822: PUSH
18823: LD_INT 1
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: LIST
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PPUSH
18839: CALL_OW 69
18843: ST_TO_ADDR
// if not depot then
18844: LD_VAR 0 1
18848: NOT
18849: IFFALSE 18853
// exit ;
18851: GO 18927
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
18853: LD_ADDR_VAR 0 2
18857: PUSH
18858: LD_VAR 0 1
18862: PUSH
18863: LD_INT 1
18865: PPUSH
18866: LD_VAR 0 1
18870: PPUSH
18871: CALL_OW 12
18875: ARRAY
18876: PPUSH
18877: CALL_OW 274
18881: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
18882: LD_VAR 0 2
18886: PPUSH
18887: LD_INT 1
18889: PPUSH
18890: LD_INT 0
18892: PPUSH
18893: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
18897: LD_VAR 0 2
18901: PPUSH
18902: LD_INT 2
18904: PPUSH
18905: LD_INT 0
18907: PPUSH
18908: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
18912: LD_VAR 0 2
18916: PPUSH
18917: LD_INT 3
18919: PPUSH
18920: LD_INT 0
18922: PPUSH
18923: CALL_OW 277
// end ;
18927: PPOPN 2
18929: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
18930: LD_EXP 51
18934: PUSH
18935: LD_EXP 77
18939: AND
18940: IFFALSE 19037
18942: GO 18944
18944: DISABLE
18945: LD_INT 0
18947: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18948: LD_ADDR_VAR 0 1
18952: PUSH
18953: LD_INT 22
18955: PUSH
18956: LD_OWVAR 2
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: PUSH
18965: LD_INT 21
18967: PUSH
18968: LD_INT 1
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: PUSH
18975: LD_INT 3
18977: PUSH
18978: LD_INT 23
18980: PUSH
18981: LD_INT 0
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: LIST
18996: PPUSH
18997: CALL_OW 69
19001: ST_TO_ADDR
// if not tmp then
19002: LD_VAR 0 1
19006: NOT
19007: IFFALSE 19011
// exit ;
19009: GO 19037
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19011: LD_VAR 0 1
19015: PUSH
19016: LD_INT 1
19018: PPUSH
19019: LD_VAR 0 1
19023: PPUSH
19024: CALL_OW 12
19028: ARRAY
19029: PPUSH
19030: LD_INT 200
19032: PPUSH
19033: CALL_OW 234
// end ;
19037: PPOPN 1
19039: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19040: LD_EXP 51
19044: PUSH
19045: LD_EXP 78
19049: AND
19050: IFFALSE 19129
19052: GO 19054
19054: DISABLE
19055: LD_INT 0
19057: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19058: LD_ADDR_VAR 0 1
19062: PUSH
19063: LD_INT 22
19065: PUSH
19066: LD_OWVAR 2
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: LD_INT 21
19077: PUSH
19078: LD_INT 2
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PPUSH
19089: CALL_OW 69
19093: ST_TO_ADDR
// if not tmp then
19094: LD_VAR 0 1
19098: NOT
19099: IFFALSE 19103
// exit ;
19101: GO 19129
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19103: LD_VAR 0 1
19107: PUSH
19108: LD_INT 1
19110: PPUSH
19111: LD_VAR 0 1
19115: PPUSH
19116: CALL_OW 12
19120: ARRAY
19121: PPUSH
19122: LD_INT 60
19124: PPUSH
19125: CALL_OW 234
// end ;
19129: PPOPN 1
19131: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19132: LD_EXP 51
19136: PUSH
19137: LD_EXP 79
19141: AND
19142: IFFALSE 19241
19144: GO 19146
19146: DISABLE
19147: LD_INT 0
19149: PPUSH
19150: PPUSH
// begin enable ;
19151: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19152: LD_ADDR_VAR 0 1
19156: PUSH
19157: LD_INT 22
19159: PUSH
19160: LD_OWVAR 2
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: LD_INT 61
19171: PUSH
19172: EMPTY
19173: LIST
19174: PUSH
19175: LD_INT 33
19177: PUSH
19178: LD_INT 2
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: LIST
19189: PPUSH
19190: CALL_OW 69
19194: ST_TO_ADDR
// if not tmp then
19195: LD_VAR 0 1
19199: NOT
19200: IFFALSE 19204
// exit ;
19202: GO 19241
// for i in tmp do
19204: LD_ADDR_VAR 0 2
19208: PUSH
19209: LD_VAR 0 1
19213: PUSH
19214: FOR_IN
19215: IFFALSE 19239
// if IsControledBy ( i ) then
19217: LD_VAR 0 2
19221: PPUSH
19222: CALL_OW 312
19226: IFFALSE 19237
// ComUnlink ( i ) ;
19228: LD_VAR 0 2
19232: PPUSH
19233: CALL_OW 136
19237: GO 19214
19239: POP
19240: POP
// end ;
19241: PPOPN 2
19243: END
// every 0 0$1 trigger StreamModeActive and sPowell do
19244: LD_EXP 51
19248: PUSH
19249: LD_EXP 80
19253: AND
19254: IFFALSE 19294
19256: GO 19258
19258: DISABLE
// begin ToLua ( displayPowell(); ) ;
19259: LD_STRING displayPowell();
19261: PPUSH
19262: CALL_OW 559
// wait ( 0 0$20 ) ;
19266: LD_INT 700
19268: PPUSH
19269: CALL_OW 67
// ToLua ( displayPowell(); ) ;
19273: LD_STRING displayPowell();
19275: PPUSH
19276: CALL_OW 559
// wait ( 0 0$40 ) ;
19280: LD_INT 1400
19282: PPUSH
19283: CALL_OW 67
// ToLua ( displayPowell(); ) ;
19287: LD_STRING displayPowell();
19289: PPUSH
19290: CALL_OW 559
// end ;
19294: END
// every 0 0$1 trigger StreamModeActive and sStu do
19295: LD_EXP 51
19299: PUSH
19300: LD_EXP 88
19304: AND
19305: IFFALSE 19317
19307: GO 19309
19309: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19310: LD_STRING displayStucuk();
19312: PPUSH
19313: CALL_OW 559
// end ;
19317: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19318: LD_EXP 51
19322: PUSH
19323: LD_EXP 81
19327: AND
19328: IFFALSE 19469
19330: GO 19332
19332: DISABLE
19333: LD_INT 0
19335: PPUSH
19336: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19337: LD_ADDR_VAR 0 2
19341: PUSH
19342: LD_INT 22
19344: PUSH
19345: LD_OWVAR 2
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: PUSH
19354: LD_INT 21
19356: PUSH
19357: LD_INT 1
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PPUSH
19368: CALL_OW 69
19372: ST_TO_ADDR
// if not tmp then
19373: LD_VAR 0 2
19377: NOT
19378: IFFALSE 19382
// exit ;
19380: GO 19469
// un := tmp [ rand ( 1 , tmp ) ] ;
19382: LD_ADDR_VAR 0 1
19386: PUSH
19387: LD_VAR 0 2
19391: PUSH
19392: LD_INT 1
19394: PPUSH
19395: LD_VAR 0 2
19399: PPUSH
19400: CALL_OW 12
19404: ARRAY
19405: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19406: LD_VAR 0 1
19410: PPUSH
19411: LD_INT 0
19413: PPUSH
19414: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19418: LD_VAR 0 1
19422: PPUSH
19423: LD_OWVAR 3
19427: PUSH
19428: LD_VAR 0 1
19432: DIFF
19433: PPUSH
19434: LD_VAR 0 1
19438: PPUSH
19439: CALL_OW 74
19443: PPUSH
19444: CALL_OW 115
// wait ( 0 0$20 ) ;
19448: LD_INT 700
19450: PPUSH
19451: CALL_OW 67
// SetSide ( un , your_side ) ;
19455: LD_VAR 0 1
19459: PPUSH
19460: LD_OWVAR 2
19464: PPUSH
19465: CALL_OW 235
// end ;
19469: PPOPN 2
19471: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19472: LD_EXP 51
19476: PUSH
19477: LD_EXP 82
19481: AND
19482: IFFALSE 19588
19484: GO 19486
19486: DISABLE
19487: LD_INT 0
19489: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19490: LD_ADDR_VAR 0 1
19494: PUSH
19495: LD_INT 22
19497: PUSH
19498: LD_OWVAR 2
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: LD_INT 2
19509: PUSH
19510: LD_INT 30
19512: PUSH
19513: LD_INT 0
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: PUSH
19520: LD_INT 30
19522: PUSH
19523: LD_INT 1
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: LIST
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PPUSH
19539: CALL_OW 69
19543: ST_TO_ADDR
// if not depot then
19544: LD_VAR 0 1
19548: NOT
19549: IFFALSE 19553
// exit ;
19551: GO 19588
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19553: LD_VAR 0 1
19557: PUSH
19558: LD_INT 1
19560: ARRAY
19561: PPUSH
19562: CALL_OW 250
19566: PPUSH
19567: LD_VAR 0 1
19571: PUSH
19572: LD_INT 1
19574: ARRAY
19575: PPUSH
19576: CALL_OW 251
19580: PPUSH
19581: LD_INT 70
19583: PPUSH
19584: CALL_OW 495
// end ;
19588: PPOPN 1
19590: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19591: LD_EXP 51
19595: PUSH
19596: LD_EXP 83
19600: AND
19601: IFFALSE 19812
19603: GO 19605
19605: DISABLE
19606: LD_INT 0
19608: PPUSH
19609: PPUSH
19610: PPUSH
19611: PPUSH
19612: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19613: LD_ADDR_VAR 0 5
19617: PUSH
19618: LD_INT 22
19620: PUSH
19621: LD_OWVAR 2
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: LD_INT 21
19632: PUSH
19633: LD_INT 1
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PPUSH
19644: CALL_OW 69
19648: ST_TO_ADDR
// if not tmp then
19649: LD_VAR 0 5
19653: NOT
19654: IFFALSE 19658
// exit ;
19656: GO 19812
// for i in tmp do
19658: LD_ADDR_VAR 0 1
19662: PUSH
19663: LD_VAR 0 5
19667: PUSH
19668: FOR_IN
19669: IFFALSE 19810
// begin d := rand ( 0 , 5 ) ;
19671: LD_ADDR_VAR 0 4
19675: PUSH
19676: LD_INT 0
19678: PPUSH
19679: LD_INT 5
19681: PPUSH
19682: CALL_OW 12
19686: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
19687: LD_ADDR_VAR 0 2
19691: PUSH
19692: LD_VAR 0 1
19696: PPUSH
19697: CALL_OW 250
19701: PPUSH
19702: LD_VAR 0 4
19706: PPUSH
19707: LD_INT 3
19709: PPUSH
19710: LD_INT 12
19712: PPUSH
19713: CALL_OW 12
19717: PPUSH
19718: CALL_OW 272
19722: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
19723: LD_ADDR_VAR 0 3
19727: PUSH
19728: LD_VAR 0 1
19732: PPUSH
19733: CALL_OW 251
19737: PPUSH
19738: LD_VAR 0 4
19742: PPUSH
19743: LD_INT 3
19745: PPUSH
19746: LD_INT 12
19748: PPUSH
19749: CALL_OW 12
19753: PPUSH
19754: CALL_OW 273
19758: ST_TO_ADDR
// if ValidHex ( x , y ) then
19759: LD_VAR 0 2
19763: PPUSH
19764: LD_VAR 0 3
19768: PPUSH
19769: CALL_OW 488
19773: IFFALSE 19808
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
19775: LD_VAR 0 1
19779: PPUSH
19780: LD_VAR 0 2
19784: PPUSH
19785: LD_VAR 0 3
19789: PPUSH
19790: LD_INT 3
19792: PPUSH
19793: LD_INT 6
19795: PPUSH
19796: CALL_OW 12
19800: PPUSH
19801: LD_INT 1
19803: PPUSH
19804: CALL_OW 483
// end ;
19808: GO 19668
19810: POP
19811: POP
// end ;
19812: PPOPN 5
19814: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
19815: LD_EXP 51
19819: PUSH
19820: LD_EXP 84
19824: AND
19825: IFFALSE 19919
19827: GO 19829
19829: DISABLE
19830: LD_INT 0
19832: PPUSH
19833: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
19834: LD_ADDR_VAR 0 2
19838: PUSH
19839: LD_INT 22
19841: PUSH
19842: LD_OWVAR 2
19846: PUSH
19847: EMPTY
19848: LIST
19849: LIST
19850: PUSH
19851: LD_INT 32
19853: PUSH
19854: LD_INT 1
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: PUSH
19861: LD_INT 21
19863: PUSH
19864: LD_INT 2
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: LIST
19875: PPUSH
19876: CALL_OW 69
19880: ST_TO_ADDR
// if not tmp then
19881: LD_VAR 0 2
19885: NOT
19886: IFFALSE 19890
// exit ;
19888: GO 19919
// for i in tmp do
19890: LD_ADDR_VAR 0 1
19894: PUSH
19895: LD_VAR 0 2
19899: PUSH
19900: FOR_IN
19901: IFFALSE 19917
// SetFuel ( i , 0 ) ;
19903: LD_VAR 0 1
19907: PPUSH
19908: LD_INT 0
19910: PPUSH
19911: CALL_OW 240
19915: GO 19900
19917: POP
19918: POP
// end ;
19919: PPOPN 2
19921: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
19922: LD_EXP 51
19926: PUSH
19927: LD_EXP 85
19931: AND
19932: IFFALSE 19998
19934: GO 19936
19936: DISABLE
19937: LD_INT 0
19939: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19940: LD_ADDR_VAR 0 1
19944: PUSH
19945: LD_INT 22
19947: PUSH
19948: LD_OWVAR 2
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: PUSH
19957: LD_INT 30
19959: PUSH
19960: LD_INT 29
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PPUSH
19971: CALL_OW 69
19975: ST_TO_ADDR
// if not tmp then
19976: LD_VAR 0 1
19980: NOT
19981: IFFALSE 19985
// exit ;
19983: GO 19998
// DestroyUnit ( tmp [ 1 ] ) ;
19985: LD_VAR 0 1
19989: PUSH
19990: LD_INT 1
19992: ARRAY
19993: PPUSH
19994: CALL_OW 65
// end ;
19998: PPOPN 1
20000: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20001: LD_EXP 51
20005: PUSH
20006: LD_EXP 87
20010: AND
20011: IFFALSE 20124
20013: GO 20015
20015: DISABLE
20016: LD_INT 0
20018: PPUSH
// begin uc_side := 0 ;
20019: LD_ADDR_OWVAR 20
20023: PUSH
20024: LD_INT 0
20026: ST_TO_ADDR
// uc_nation := nation_arabian ;
20027: LD_ADDR_OWVAR 21
20031: PUSH
20032: LD_INT 2
20034: ST_TO_ADDR
// PrepareHuman ( sex_male , 10 , class_desert_warior ) ;
20035: LD_INT 1
20037: PPUSH
20038: LD_INT 10
20040: PPUSH
20041: LD_INT 11
20043: PPUSH
20044: CALL_OW 380
// un := CreateHuman ;
20048: LD_ADDR_VAR 0 1
20052: PUSH
20053: CALL_OW 44
20057: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20058: LD_VAR 0 1
20062: PPUSH
20063: LD_INT 1
20065: PPUSH
20066: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20070: LD_INT 35
20072: PPUSH
20073: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20077: LD_VAR 0 1
20081: PPUSH
20082: LD_INT 22
20084: PUSH
20085: LD_OWVAR 2
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: PPUSH
20094: CALL_OW 69
20098: PPUSH
20099: LD_VAR 0 1
20103: PPUSH
20104: CALL_OW 74
20108: PPUSH
20109: CALL_OW 115
// until IsDead ( un ) ;
20113: LD_VAR 0 1
20117: PPUSH
20118: CALL_OW 301
20122: IFFALSE 20070
// end ; end_of_file
20124: PPOPN 1
20126: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
20127: LD_INT 0
20129: PPUSH
20130: PPUSH
20131: PPUSH
20132: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20133: LD_VAR 0 1
20137: PPUSH
20138: CALL_OW 264
20142: PUSH
20143: LD_EXP 50
20147: EQUAL
20148: IFFALSE 20220
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20150: LD_INT 68
20152: PPUSH
20153: LD_VAR 0 1
20157: PPUSH
20158: CALL_OW 255
20162: PPUSH
20163: CALL_OW 321
20167: PUSH
20168: LD_INT 2
20170: EQUAL
20171: IFFALSE 20183
// eff := 70 else
20173: LD_ADDR_VAR 0 6
20177: PUSH
20178: LD_INT 70
20180: ST_TO_ADDR
20181: GO 20191
// eff := 30 ;
20183: LD_ADDR_VAR 0 6
20187: PUSH
20188: LD_INT 30
20190: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20191: LD_VAR 0 1
20195: PPUSH
20196: CALL_OW 250
20200: PPUSH
20201: LD_VAR 0 1
20205: PPUSH
20206: CALL_OW 251
20210: PPUSH
20211: LD_VAR 0 6
20215: PPUSH
20216: CALL_OW 495
// end ; end ;
20220: LD_VAR 0 4
20224: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
20225: LD_INT 0
20227: PPUSH
20228: PPUSH
20229: PPUSH
20230: PPUSH
20231: PPUSH
20232: PPUSH
// if cmd = 124 then
20233: LD_VAR 0 1
20237: PUSH
20238: LD_INT 124
20240: EQUAL
20241: IFFALSE 20447
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
20243: LD_ADDR_VAR 0 5
20247: PUSH
20248: LD_INT 2
20250: PUSH
20251: LD_INT 34
20253: PUSH
20254: LD_INT 53
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PUSH
20261: LD_INT 34
20263: PUSH
20264: LD_INT 14
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: LIST
20275: PPUSH
20276: CALL_OW 69
20280: ST_TO_ADDR
// if not tmp then
20281: LD_VAR 0 5
20285: NOT
20286: IFFALSE 20290
// exit ;
20288: GO 20447
// for i in tmp do
20290: LD_ADDR_VAR 0 3
20294: PUSH
20295: LD_VAR 0 5
20299: PUSH
20300: FOR_IN
20301: IFFALSE 20445
// begin taskList := GetTaskList ( i ) ;
20303: LD_ADDR_VAR 0 6
20307: PUSH
20308: LD_VAR 0 3
20312: PPUSH
20313: CALL_OW 437
20317: ST_TO_ADDR
// if not taskList then
20318: LD_VAR 0 6
20322: NOT
20323: IFFALSE 20327
// continue ;
20325: GO 20300
// for j = 1 to taskList do
20327: LD_ADDR_VAR 0 4
20331: PUSH
20332: DOUBLE
20333: LD_INT 1
20335: DEC
20336: ST_TO_ADDR
20337: LD_VAR 0 6
20341: PUSH
20342: FOR_TO
20343: IFFALSE 20441
// if taskList [ j ] [ 1 ] = | then
20345: LD_VAR 0 6
20349: PUSH
20350: LD_VAR 0 4
20354: ARRAY
20355: PUSH
20356: LD_INT 1
20358: ARRAY
20359: PUSH
20360: LD_STRING |
20362: EQUAL
20363: IFFALSE 20439
// begin _taskList := Delete ( taskList , 1 ) ;
20365: LD_ADDR_VAR 0 7
20369: PUSH
20370: LD_VAR 0 6
20374: PPUSH
20375: LD_INT 1
20377: PPUSH
20378: CALL_OW 3
20382: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
20383: LD_VAR 0 3
20387: PPUSH
20388: LD_VAR 0 7
20392: PPUSH
20393: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
20397: LD_VAR 0 3
20401: PPUSH
20402: LD_VAR 0 6
20406: PUSH
20407: LD_VAR 0 4
20411: ARRAY
20412: PUSH
20413: LD_INT 2
20415: ARRAY
20416: PPUSH
20417: LD_VAR 0 6
20421: PUSH
20422: LD_VAR 0 4
20426: ARRAY
20427: PUSH
20428: LD_INT 3
20430: ARRAY
20431: PPUSH
20432: LD_INT 8
20434: PPUSH
20435: CALL 20452 0 4
// end ;
20439: GO 20342
20441: POP
20442: POP
// end ;
20443: GO 20300
20445: POP
20446: POP
// end ; end ;
20447: LD_VAR 0 2
20451: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20452: LD_INT 0
20454: PPUSH
20455: PPUSH
20456: PPUSH
20457: PPUSH
20458: PPUSH
20459: PPUSH
20460: PPUSH
20461: PPUSH
20462: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20463: LD_VAR 0 1
20467: NOT
20468: PUSH
20469: LD_VAR 0 2
20473: PPUSH
20474: LD_VAR 0 3
20478: PPUSH
20479: CALL_OW 488
20483: NOT
20484: OR
20485: PUSH
20486: LD_VAR 0 4
20490: NOT
20491: OR
20492: IFFALSE 20496
// exit ;
20494: GO 20836
// list := [ ] ;
20496: LD_ADDR_VAR 0 13
20500: PUSH
20501: EMPTY
20502: ST_TO_ADDR
// if x - r < 0 then
20503: LD_VAR 0 2
20507: PUSH
20508: LD_VAR 0 4
20512: MINUS
20513: PUSH
20514: LD_INT 0
20516: LESS
20517: IFFALSE 20529
// min_x := 0 else
20519: LD_ADDR_VAR 0 7
20523: PUSH
20524: LD_INT 0
20526: ST_TO_ADDR
20527: GO 20545
// min_x := x - r ;
20529: LD_ADDR_VAR 0 7
20533: PUSH
20534: LD_VAR 0 2
20538: PUSH
20539: LD_VAR 0 4
20543: MINUS
20544: ST_TO_ADDR
// if y - r < 0 then
20545: LD_VAR 0 3
20549: PUSH
20550: LD_VAR 0 4
20554: MINUS
20555: PUSH
20556: LD_INT 0
20558: LESS
20559: IFFALSE 20571
// min_y := 0 else
20561: LD_ADDR_VAR 0 8
20565: PUSH
20566: LD_INT 0
20568: ST_TO_ADDR
20569: GO 20587
// min_y := y - r ;
20571: LD_ADDR_VAR 0 8
20575: PUSH
20576: LD_VAR 0 3
20580: PUSH
20581: LD_VAR 0 4
20585: MINUS
20586: ST_TO_ADDR
// max_x := x + r ;
20587: LD_ADDR_VAR 0 9
20591: PUSH
20592: LD_VAR 0 2
20596: PUSH
20597: LD_VAR 0 4
20601: PLUS
20602: ST_TO_ADDR
// max_y := y + r ;
20603: LD_ADDR_VAR 0 10
20607: PUSH
20608: LD_VAR 0 3
20612: PUSH
20613: LD_VAR 0 4
20617: PLUS
20618: ST_TO_ADDR
// for _x = min_x to max_x do
20619: LD_ADDR_VAR 0 11
20623: PUSH
20624: DOUBLE
20625: LD_VAR 0 7
20629: DEC
20630: ST_TO_ADDR
20631: LD_VAR 0 9
20635: PUSH
20636: FOR_TO
20637: IFFALSE 20754
// for _y = min_y to max_y do
20639: LD_ADDR_VAR 0 12
20643: PUSH
20644: DOUBLE
20645: LD_VAR 0 8
20649: DEC
20650: ST_TO_ADDR
20651: LD_VAR 0 10
20655: PUSH
20656: FOR_TO
20657: IFFALSE 20750
// begin if not ValidHex ( _x , _y ) then
20659: LD_VAR 0 11
20663: PPUSH
20664: LD_VAR 0 12
20668: PPUSH
20669: CALL_OW 488
20673: NOT
20674: IFFALSE 20678
// continue ;
20676: GO 20656
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20678: LD_VAR 0 11
20682: PPUSH
20683: LD_VAR 0 12
20687: PPUSH
20688: CALL_OW 351
20692: PUSH
20693: LD_VAR 0 11
20697: PPUSH
20698: LD_VAR 0 12
20702: PPUSH
20703: CALL_OW 554
20707: AND
20708: IFFALSE 20748
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20710: LD_ADDR_VAR 0 13
20714: PUSH
20715: LD_VAR 0 13
20719: PPUSH
20720: LD_VAR 0 13
20724: PUSH
20725: LD_INT 1
20727: PLUS
20728: PPUSH
20729: LD_VAR 0 11
20733: PUSH
20734: LD_VAR 0 12
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PPUSH
20743: CALL_OW 2
20747: ST_TO_ADDR
// end ;
20748: GO 20656
20750: POP
20751: POP
20752: GO 20636
20754: POP
20755: POP
// if not list then
20756: LD_VAR 0 13
20760: NOT
20761: IFFALSE 20765
// exit ;
20763: GO 20836
// for i in list do
20765: LD_ADDR_VAR 0 6
20769: PUSH
20770: LD_VAR 0 13
20774: PUSH
20775: FOR_IN
20776: IFFALSE 20834
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20778: LD_VAR 0 1
20782: PPUSH
20783: LD_STRING M
20785: PUSH
20786: LD_VAR 0 6
20790: PUSH
20791: LD_INT 1
20793: ARRAY
20794: PUSH
20795: LD_VAR 0 6
20799: PUSH
20800: LD_INT 2
20802: ARRAY
20803: PUSH
20804: LD_INT 0
20806: PUSH
20807: LD_INT 0
20809: PUSH
20810: LD_INT 0
20812: PUSH
20813: LD_INT 0
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: PUSH
20825: EMPTY
20826: LIST
20827: PPUSH
20828: CALL_OW 447
20832: GO 20775
20834: POP
20835: POP
// end ;
20836: LD_VAR 0 5
20840: RET
