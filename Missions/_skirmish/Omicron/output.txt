// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 98 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 24
// Difficulty := 2 else
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 2
  21: ST_TO_ADDR
  22: GO 37
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_OWVAR 67
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// PrepareNature ( 3 , 3 , 4 , 2 , 1 , 0 , 0 , natureArea , 0 ) ;
  37: LD_INT 3
  39: PPUSH
  40: LD_INT 3
  42: PPUSH
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 2
  48: PPUSH
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 0
  54: PPUSH
  55: LD_INT 0
  57: PPUSH
  58: LD_INT 8
  60: PPUSH
  61: LD_INT 0
  63: PPUSH
  64: CALL 64707 0 9
// PrepareRussian ;
  68: CALL 896 0 0
// PrepareAmerican ;
  72: CALL 202 0 0
// PrepareSikorski ;
  76: CALL 694 0 0
// Action ;
  80: CALL 7093 0 0
// if debug then
  84: LD_EXP 1
  88: IFFALSE 97
// FogOff ( 1 ) ;
  90: LD_INT 1
  92: PPUSH
  93: CALL_OW 344
// end ;
  97: END
// export debug , activeGrishkoAI , allowToPatrol , spottedByPatrol , russianAlert , startAttackOnOmicron , omicronFall , retreatFromOmicron , sikorskiInOmicron , usLoseCounter , ruLoseCounter , tanksCounter ; function Init ; begin
  98: LD_INT 0
 100: PPUSH
// debug := 0 ;
 101: LD_ADDR_EXP 1
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// activeGrishkoAI := true ;
 109: LD_ADDR_EXP 2
 113: PUSH
 114: LD_INT 1
 116: ST_TO_ADDR
// allowToPatrol := true ;
 117: LD_ADDR_EXP 3
 121: PUSH
 122: LD_INT 1
 124: ST_TO_ADDR
// spottedByPatrol := false ;
 125: LD_ADDR_EXP 4
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// russianAlert := false ;
 133: LD_ADDR_EXP 5
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// startAttackOnOmicron := false ;
 141: LD_ADDR_EXP 6
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// omicronFall := false ;
 149: LD_ADDR_EXP 7
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// retreatFromOmicron := false ;
 157: LD_ADDR_EXP 8
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// sikorskiInOmicron := false ;
 165: LD_ADDR_EXP 9
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// usLoseCounter := 0 ;
 173: LD_ADDR_EXP 10
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// ruLoseCounter := 0 ;
 181: LD_ADDR_EXP 11
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// tanksCounter := 0 ;
 189: LD_ADDR_EXP 12
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// end ; end_of_file
 197: LD_VAR 0 1
 201: RET
// export omicronSquad , Sikorski , Harrison ; export function PrepareAmerican ; var i , un , veh ; begin
 202: LD_INT 0
 204: PPUSH
 205: PPUSH
 206: PPUSH
 207: PPUSH
// SetBName ( omikron , omikron ) ;
 208: LD_INT 64
 210: PPUSH
 211: LD_STRING omikron
 213: PPUSH
 214: CALL_OW 500
// uc_side := 4 ;
 218: LD_ADDR_OWVAR 20
 222: PUSH
 223: LD_INT 4
 225: ST_TO_ADDR
// uc_nation := 1 ;
 226: LD_ADDR_OWVAR 21
 230: PUSH
 231: LD_INT 1
 233: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_STRING Harisson
 241: PPUSH
 242: LD_INT 0
 244: PPUSH
 245: LD_STRING 
 247: PPUSH
 248: CALL 30649 0 3
 252: ST_TO_ADDR
// omicronSquad := [ ] ;
 253: LD_ADDR_EXP 13
 257: PUSH
 258: EMPTY
 259: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
 260: LD_ADDR_VAR 0 2
 264: PUSH
 265: LD_INT 22
 267: PUSH
 268: LD_INT 4
 270: PUSH
 271: EMPTY
 272: LIST
 273: LIST
 274: PUSH
 275: LD_INT 2
 277: PUSH
 278: LD_INT 30
 280: PUSH
 281: LD_INT 32
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: PUSH
 288: LD_INT 30
 290: PUSH
 291: LD_INT 31
 293: PUSH
 294: EMPTY
 295: LIST
 296: LIST
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: LIST
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PPUSH
 307: CALL_OW 69
 311: PUSH
 312: FOR_IN
 313: IFFALSE 393
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
 315: LD_INT 1
 317: PPUSH
 318: LD_INT 1
 320: PPUSH
 321: LD_INT 1
 323: PPUSH
 324: CALL_OW 380
// un := CreateHuman ;
 328: LD_ADDR_VAR 0 3
 332: PUSH
 333: CALL_OW 44
 337: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 338: LD_ADDR_EXP 13
 342: PUSH
 343: LD_EXP 13
 347: PUSH
 348: LD_VAR 0 3
 352: UNION
 353: ST_TO_ADDR
// SetDir ( un , GetDir ( i ) - 3 ) ;
 354: LD_VAR 0 3
 358: PPUSH
 359: LD_VAR 0 2
 363: PPUSH
 364: CALL_OW 254
 368: PUSH
 369: LD_INT 3
 371: MINUS
 372: PPUSH
 373: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
 377: LD_VAR 0 3
 381: PPUSH
 382: LD_VAR 0 2
 386: PPUSH
 387: CALL_OW 52
// end ;
 391: GO 312
 393: POP
 394: POP
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
 395: LD_ADDR_VAR 0 2
 399: PUSH
 400: DOUBLE
 401: LD_INT 1
 403: DEC
 404: ST_TO_ADDR
 405: LD_INT 3
 407: PUSH
 408: LD_INT 2
 410: PUSH
 411: LD_INT 2
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: LIST
 418: PUSH
 419: LD_OWVAR 67
 423: ARRAY
 424: PUSH
 425: FOR_TO
 426: IFFALSE 505
// begin PrepareHuman ( false , 2 , 2 ) ;
 428: LD_INT 0
 430: PPUSH
 431: LD_INT 2
 433: PPUSH
 434: LD_INT 2
 436: PPUSH
 437: CALL_OW 380
// un := CreateHuman ;
 441: LD_ADDR_VAR 0 3
 445: PUSH
 446: CALL_OW 44
 450: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 451: LD_ADDR_EXP 13
 455: PUSH
 456: LD_EXP 13
 460: PUSH
 461: LD_VAR 0 3
 465: UNION
 466: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
 467: LD_VAR 0 3
 471: PPUSH
 472: LD_INT 64
 474: PPUSH
 475: CALL_OW 52
// ComExitBuilding ( un ) ;
 479: LD_VAR 0 3
 483: PPUSH
 484: CALL_OW 122
// AddComMoveXY ( un , 19 , 23 ) ;
 488: LD_VAR 0 3
 492: PPUSH
 493: LD_INT 19
 495: PPUSH
 496: LD_INT 23
 498: PPUSH
 499: CALL_OW 171
// end ;
 503: GO 425
 505: POP
 506: POP
// for i := 1 to 2 do
 507: LD_ADDR_VAR 0 2
 511: PUSH
 512: DOUBLE
 513: LD_INT 1
 515: DEC
 516: ST_TO_ADDR
 517: LD_INT 2
 519: PUSH
 520: FOR_TO
 521: IFFALSE 687
// begin PrepareVehicle ( [ us_medium_wheeled , us_medium_tracked ] [ i ] , engine_solar , control_manual , [ us_light_gun , us_gatling_gun ] [ i ] , 100 ) ;
 523: LD_INT 2
 525: PUSH
 526: LD_INT 3
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_VAR 0 2
 537: ARRAY
 538: PPUSH
 539: LD_INT 2
 541: PPUSH
 542: LD_INT 1
 544: PPUSH
 545: LD_INT 3
 547: PUSH
 548: LD_INT 4
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: PUSH
 555: LD_VAR 0 2
 559: ARRAY
 560: PPUSH
 561: LD_INT 100
 563: PPUSH
 564: CALL 35664 0 5
// veh := CreateVehicle ;
 568: LD_ADDR_VAR 0 4
 572: PUSH
 573: CALL_OW 45
 577: ST_TO_ADDR
// PlaceUnitXYR ( veh , 28 , 37 , 6 , false ) ;
 578: LD_VAR 0 4
 582: PPUSH
 583: LD_INT 28
 585: PPUSH
 586: LD_INT 37
 588: PPUSH
 589: LD_INT 6
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
 599: LD_INT 0
 601: PPUSH
 602: LD_INT 3
 604: PPUSH
 605: LD_INT 2
 607: PPUSH
 608: CALL_OW 380
// un := CreateHuman ;
 612: LD_ADDR_VAR 0 3
 616: PUSH
 617: CALL_OW 44
 621: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 622: LD_ADDR_EXP 13
 626: PUSH
 627: LD_EXP 13
 631: PUSH
 632: LD_VAR 0 3
 636: UNION
 637: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
 638: LD_VAR 0 3
 642: PPUSH
 643: LD_VAR 0 4
 647: PPUSH
 648: CALL_OW 52
// ComMoveXY ( un , GetX ( un ) + 3 , GetY ( un ) ) ;
 652: LD_VAR 0 3
 656: PPUSH
 657: LD_VAR 0 3
 661: PPUSH
 662: CALL_OW 250
 666: PUSH
 667: LD_INT 3
 669: PLUS
 670: PPUSH
 671: LD_VAR 0 3
 675: PPUSH
 676: CALL_OW 251
 680: PPUSH
 681: CALL_OW 111
// end ;
 685: GO 520
 687: POP
 688: POP
// end ;
 689: LD_VAR 0 1
 693: RET
// export function PrepareSikorski ; var veh ; begin
 694: LD_INT 0
 696: PPUSH
 697: PPUSH
// uc_side := 1 ;
 698: LD_ADDR_OWVAR 20
 702: PUSH
 703: LD_INT 1
 705: ST_TO_ADDR
// uc_nation := 1 ;
 706: LD_ADDR_OWVAR 21
 710: PUSH
 711: LD_INT 1
 713: ST_TO_ADDR
// hc_importance := 100 ;
 714: LD_ADDR_OWVAR 32
 718: PUSH
 719: LD_INT 100
 721: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
 722: LD_ADDR_OWVAR 26
 726: PUSH
 727: LD_STRING Jeremy Sikorski
 729: ST_TO_ADDR
// hc_gallery := us ;
 730: LD_ADDR_OWVAR 33
 734: PUSH
 735: LD_STRING us
 737: ST_TO_ADDR
// hc_face_number := 19 ;
 738: LD_ADDR_OWVAR 34
 742: PUSH
 743: LD_INT 19
 745: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , [ 4 , 4 , 3 ] [ Difficulty ] ) ;
 746: LD_INT 1
 748: PPUSH
 749: LD_INT 1
 751: PPUSH
 752: LD_INT 4
 754: PUSH
 755: LD_INT 4
 757: PUSH
 758: LD_INT 3
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: LIST
 765: PUSH
 766: LD_OWVAR 67
 770: ARRAY
 771: PPUSH
 772: CALL_OW 380
// hc_attr := [ 10 , 12 ] ;
 776: LD_ADDR_OWVAR 29
 780: PUSH
 781: LD_INT 10
 783: PUSH
 784: LD_INT 12
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: ST_TO_ADDR
// Sikorski := CreateHuman ;
 791: LD_ADDR_EXP 14
 795: PUSH
 796: CALL_OW 44
 800: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_light_gun , 88 ) ;
 801: LD_INT 3
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: LD_INT 1
 809: PPUSH
 810: LD_INT 3
 812: PPUSH
 813: LD_INT 88
 815: PPUSH
 816: CALL 35664 0 5
// veh := CreateVehicle ;
 820: LD_ADDR_VAR 0 2
 824: PUSH
 825: CALL_OW 45
 829: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
 830: LD_VAR 0 2
 834: PPUSH
 835: LD_INT 3
 837: PPUSH
 838: CALL_OW 233
// PlaceUnitXY ( veh , 106 , 2 , false ) ;
 842: LD_VAR 0 2
 846: PPUSH
 847: LD_INT 106
 849: PPUSH
 850: LD_INT 2
 852: PPUSH
 853: LD_INT 0
 855: PPUSH
 856: CALL_OW 48
// PlaceHumanInUnit ( Sikorski , veh ) ;
 860: LD_EXP 14
 864: PPUSH
 865: LD_VAR 0 2
 869: PPUSH
 870: CALL_OW 52
// SetMark ( veh , - 1 ) ;
 874: LD_VAR 0 2
 878: PPUSH
 879: LD_INT 1
 881: NEG
 882: PPUSH
 883: CALL_OW 242
// InitHc ;
 887: CALL_OW 19
// end ; end_of_file
 891: LD_VAR 0 1
 895: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo ; export function PrepareRussian ; var i , un , arm , bar , bun , tmp ; begin
 896: LD_INT 0
 898: PPUSH
 899: PPUSH
 900: PPUSH
 901: PPUSH
 902: PPUSH
 903: PPUSH
 904: PPUSH
// ResetHc ;
 905: CALL 68550 0 0
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
 909: LD_ADDR_VAR 0 2
 913: PUSH
 914: LD_INT 21
 916: PUSH
 917: LD_INT 3
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 23
 926: PUSH
 927: LD_INT 3
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: PPUSH
 938: CALL_OW 69
 942: PUSH
 943: FOR_IN
 944: IFFALSE 960
// SetBLevel ( i , 5 ) ;
 946: LD_VAR 0 2
 950: PPUSH
 951: LD_INT 5
 953: PPUSH
 954: CALL_OW 241
 958: GO 943
 960: POP
 961: POP
// SetBName ( kirov , kirov ) ;
 962: LD_INT 71
 964: PPUSH
 965: LD_STRING kirov
 967: PPUSH
 968: CALL_OW 500
// SetBName ( beria , beria ) ;
 972: LD_INT 106
 974: PPUSH
 975: LD_STRING beria
 977: PPUSH
 978: CALL_OW 500
// SetBName ( kagan , kagan ) ;
 982: LD_INT 112
 984: PPUSH
 985: LD_STRING kagan
 987: PPUSH
 988: CALL_OW 500
// uc_side := 6 ;
 992: LD_ADDR_OWVAR 20
 996: PUSH
 997: LD_INT 6
 999: ST_TO_ADDR
// uc_nation := 3 ;
1000: LD_ADDR_OWVAR 21
1004: PUSH
1005: LD_INT 3
1007: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
1008: LD_ADDR_VAR 0 5
1012: PUSH
1013: LD_INT 22
1015: PUSH
1016: LD_INT 6
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: PUSH
1023: LD_INT 30
1025: PUSH
1026: LD_INT 5
1028: PUSH
1029: EMPTY
1030: LIST
1031: LIST
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: PPUSH
1037: CALL_OW 69
1041: PUSH
1042: LD_INT 1
1044: ARRAY
1045: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
1046: LD_ADDR_VAR 0 4
1050: PUSH
1051: LD_INT 22
1053: PUSH
1054: LD_INT 6
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PUSH
1061: LD_INT 30
1063: PUSH
1064: LD_INT 4
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PPUSH
1075: CALL_OW 69
1079: PUSH
1080: LD_INT 1
1082: ARRAY
1083: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
1084: LD_ADDR_EXP 20
1088: PUSH
1089: EMPTY
1090: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
1091: LD_ADDR_EXP 21
1095: PUSH
1096: EMPTY
1097: ST_TO_ADDR
// russianPatrol := [ ] ;
1098: LD_ADDR_EXP 23
1102: PUSH
1103: EMPTY
1104: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
1105: LD_ADDR_EXP 16
1109: PUSH
1110: LD_STRING Kurin
1112: PPUSH
1113: LD_INT 0
1115: PPUSH
1116: LD_STRING 
1118: PPUSH
1119: CALL 30649 0 3
1123: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
1124: LD_EXP 16
1128: PPUSH
1129: LD_INT 71
1131: PPUSH
1132: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
1136: LD_ADDR_EXP 18
1140: PUSH
1141: LD_STRING Popov
1143: PPUSH
1144: LD_INT 0
1146: PPUSH
1147: LD_STRING 
1149: PPUSH
1150: CALL 30649 0 3
1154: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
1155: LD_EXP 18
1159: PPUSH
1160: LD_INT 71
1162: PPUSH
1163: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
1167: LD_ADDR_EXP 17
1171: PUSH
1172: LD_STRING Grishko
1174: PPUSH
1175: LD_INT 0
1177: PPUSH
1178: LD_STRING 
1180: PPUSH
1181: CALL 30649 0 3
1185: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
1186: LD_EXP 17
1190: PPUSH
1191: LD_INT 207
1193: PPUSH
1194: LD_INT 106
1196: PPUSH
1197: LD_INT 0
1199: PPUSH
1200: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
1204: LD_EXP 17
1208: PPUSH
1209: LD_INT 209
1211: PPUSH
1212: LD_INT 106
1214: PPUSH
1215: CALL_OW 118
// hc_importance := 0 ;
1219: LD_ADDR_OWVAR 32
1223: PUSH
1224: LD_INT 0
1226: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
1227: LD_ADDR_VAR 0 7
1231: PUSH
1232: LD_INT 22
1234: PUSH
1235: LD_INT 6
1237: PUSH
1238: EMPTY
1239: LIST
1240: LIST
1241: PUSH
1242: LD_INT 30
1244: PUSH
1245: LD_INT 32
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PPUSH
1256: CALL_OW 69
1260: ST_TO_ADDR
// for i in tmp do
1261: LD_ADDR_VAR 0 2
1265: PUSH
1266: LD_VAR 0 7
1270: PUSH
1271: FOR_IN
1272: IFFALSE 1309
// PlaceWeaponTurret ( i , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] ) ;
1274: LD_VAR 0 2
1278: PPUSH
1279: LD_INT 44
1281: PUSH
1282: LD_INT 43
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PUSH
1289: LD_VAR 0 2
1293: PUSH
1294: LD_INT 2
1296: MOD
1297: PUSH
1298: LD_INT 1
1300: PLUS
1301: ARRAY
1302: PPUSH
1303: CALL_OW 431
1307: GO 1271
1309: POP
1310: POP
// for i := 1 to Difficulty do
1311: LD_ADDR_VAR 0 2
1315: PUSH
1316: DOUBLE
1317: LD_INT 1
1319: DEC
1320: ST_TO_ADDR
1321: LD_OWVAR 67
1325: PUSH
1326: FOR_TO
1327: IFFALSE 1382
// begin PrepareHuman ( false , 2 , 2 ) ;
1329: LD_INT 0
1331: PPUSH
1332: LD_INT 2
1334: PPUSH
1335: LD_INT 2
1337: PPUSH
1338: CALL_OW 380
// un := CreateHuman ;
1342: LD_ADDR_VAR 0 3
1346: PUSH
1347: CALL_OW 44
1351: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
1352: LD_VAR 0 3
1356: PPUSH
1357: LD_INT 71
1359: PPUSH
1360: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1364: LD_ADDR_EXP 20
1368: PUSH
1369: LD_EXP 20
1373: PUSH
1374: LD_VAR 0 3
1378: UNION
1379: ST_TO_ADDR
// end ;
1380: GO 1326
1382: POP
1383: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1384: LD_ADDR_VAR 0 2
1388: PUSH
1389: DOUBLE
1390: LD_INT 1
1392: DEC
1393: ST_TO_ADDR
1394: LD_INT 5
1396: PUSH
1397: LD_INT 6
1399: PUSH
1400: LD_INT 6
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_OWVAR 67
1412: ARRAY
1413: PUSH
1414: FOR_TO
1415: IFFALSE 1489
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
1417: LD_INT 0
1419: PPUSH
1420: LD_INT 1
1422: PPUSH
1423: LD_INT 2
1425: PUSH
1426: LD_INT 3
1428: PUSH
1429: LD_INT 4
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: LIST
1436: PUSH
1437: LD_OWVAR 67
1441: ARRAY
1442: PPUSH
1443: CALL_OW 380
// un := CreateHuman ;
1447: LD_ADDR_VAR 0 3
1451: PUSH
1452: CALL_OW 44
1456: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
1457: LD_VAR 0 3
1461: PPUSH
1462: LD_VAR 0 5
1466: PPUSH
1467: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1471: LD_ADDR_EXP 20
1475: PUSH
1476: LD_EXP 20
1480: PUSH
1481: LD_VAR 0 3
1485: UNION
1486: ST_TO_ADDR
// end ;
1487: GO 1414
1489: POP
1490: POP
// for i := 1 to 3 do
1491: LD_ADDR_VAR 0 2
1495: PUSH
1496: DOUBLE
1497: LD_INT 1
1499: DEC
1500: ST_TO_ADDR
1501: LD_INT 3
1503: PUSH
1504: FOR_TO
1505: IFFALSE 1560
// begin PrepareHuman ( false , 3 , 3 ) ;
1507: LD_INT 0
1509: PPUSH
1510: LD_INT 3
1512: PPUSH
1513: LD_INT 3
1515: PPUSH
1516: CALL_OW 380
// un := CreateHuman ;
1520: LD_ADDR_VAR 0 3
1524: PUSH
1525: CALL_OW 44
1529: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
1530: LD_VAR 0 3
1534: PPUSH
1535: LD_INT 92
1537: PPUSH
1538: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1542: LD_ADDR_EXP 20
1546: PUSH
1547: LD_EXP 20
1551: PUSH
1552: LD_VAR 0 3
1556: UNION
1557: ST_TO_ADDR
// end ;
1558: GO 1504
1560: POP
1561: POP
// for i := 1 to 2 do
1562: LD_ADDR_VAR 0 2
1566: PUSH
1567: DOUBLE
1568: LD_INT 1
1570: DEC
1571: ST_TO_ADDR
1572: LD_INT 2
1574: PUSH
1575: FOR_TO
1576: IFFALSE 1631
// begin PrepareHuman ( false , 4 , 3 ) ;
1578: LD_INT 0
1580: PPUSH
1581: LD_INT 4
1583: PPUSH
1584: LD_INT 3
1586: PPUSH
1587: CALL_OW 380
// un := CreateHuman ;
1591: LD_ADDR_VAR 0 3
1595: PUSH
1596: CALL_OW 44
1600: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
1601: LD_VAR 0 3
1605: PPUSH
1606: LD_INT 83
1608: PPUSH
1609: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1613: LD_ADDR_EXP 20
1617: PUSH
1618: LD_EXP 20
1622: PUSH
1623: LD_VAR 0 3
1627: UNION
1628: ST_TO_ADDR
// end ;
1629: GO 1575
1631: POP
1632: POP
// for i := 1 to 5 do
1633: LD_ADDR_VAR 0 2
1637: PUSH
1638: DOUBLE
1639: LD_INT 1
1641: DEC
1642: ST_TO_ADDR
1643: LD_INT 5
1645: PUSH
1646: FOR_TO
1647: IFFALSE 1704
// begin PrepareHuman ( false , 1 , 3 ) ;
1649: LD_INT 0
1651: PPUSH
1652: LD_INT 1
1654: PPUSH
1655: LD_INT 3
1657: PPUSH
1658: CALL_OW 380
// un := CreateHuman ;
1662: LD_ADDR_VAR 0 3
1666: PUSH
1667: CALL_OW 44
1671: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
1672: LD_VAR 0 3
1676: PPUSH
1677: LD_VAR 0 4
1681: PPUSH
1682: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
1686: LD_ADDR_EXP 22
1690: PUSH
1691: LD_EXP 22
1695: PUSH
1696: LD_VAR 0 3
1700: UNION
1701: ST_TO_ADDR
// end ;
1702: GO 1646
1704: POP
1705: POP
// russianCargo := [ ] ;
1706: LD_ADDR_EXP 25
1710: PUSH
1711: EMPTY
1712: ST_TO_ADDR
// for i := 1 to 2 do
1713: LD_ADDR_VAR 0 2
1717: PUSH
1718: DOUBLE
1719: LD_INT 1
1721: DEC
1722: ST_TO_ADDR
1723: LD_INT 2
1725: PUSH
1726: FOR_TO
1727: IFFALSE 1853
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
1729: LD_INT 21
1731: PPUSH
1732: LD_INT 1
1734: PPUSH
1735: LD_INT 1
1737: PPUSH
1738: LD_INT 51
1740: PPUSH
1741: LD_INT 100
1743: PPUSH
1744: CALL 35664 0 5
// un := CreateVehicle ;
1748: LD_ADDR_VAR 0 3
1752: PUSH
1753: CALL_OW 45
1757: ST_TO_ADDR
// russianCargo := russianCargo union un ;
1758: LD_ADDR_EXP 25
1762: PUSH
1763: LD_EXP 25
1767: PUSH
1768: LD_VAR 0 3
1772: UNION
1773: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
1774: LD_VAR 0 3
1778: PPUSH
1779: LD_INT 2
1781: PPUSH
1782: LD_INT 100
1784: PPUSH
1785: CALL_OW 290
// SetDir ( un , 4 ) ;
1789: LD_VAR 0 3
1793: PPUSH
1794: LD_INT 4
1796: PPUSH
1797: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
1801: LD_VAR 0 3
1805: PPUSH
1806: LD_INT 147
1808: PPUSH
1809: LD_INT 103
1811: PPUSH
1812: LD_INT 4
1814: PPUSH
1815: LD_INT 0
1817: PPUSH
1818: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
1822: LD_INT 0
1824: PPUSH
1825: LD_INT 1
1827: PPUSH
1828: LD_OWVAR 67
1832: PPUSH
1833: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1837: CALL_OW 44
1841: PPUSH
1842: LD_VAR 0 3
1846: PPUSH
1847: CALL_OW 52
// end ;
1851: GO 1726
1853: POP
1854: POP
// uc_side := 3 ;
1855: LD_ADDR_OWVAR 20
1859: PUSH
1860: LD_INT 3
1862: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
1863: LD_ADDR_EXP 19
1867: PUSH
1868: LD_STRING Burlak
1870: PPUSH
1871: LD_INT 0
1873: PPUSH
1874: LD_STRING 
1876: PPUSH
1877: CALL 30649 0 3
1881: ST_TO_ADDR
// ResetHc ;
1882: CALL 68550 0 0
// PrepareHuman ( false , 3 , 2 ) ;
1886: LD_INT 0
1888: PPUSH
1889: LD_INT 3
1891: PPUSH
1892: LD_INT 2
1894: PPUSH
1895: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ruBeriaCargo ) ;
1899: CALL_OW 44
1903: PPUSH
1904: LD_INT 180
1906: PPUSH
1907: CALL_OW 52
// if Difficulty > 1 then
1911: LD_OWVAR 67
1915: PUSH
1916: LD_INT 1
1918: GREATER
1919: IFFALSE 1977
// begin for i := 1 to 3 do
1921: LD_ADDR_VAR 0 2
1925: PUSH
1926: DOUBLE
1927: LD_INT 1
1929: DEC
1930: ST_TO_ADDR
1931: LD_INT 3
1933: PUSH
1934: FOR_TO
1935: IFFALSE 1975
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1937: LD_INT 0
1939: PPUSH
1940: LD_INT 1
1942: PPUSH
1943: LD_OWVAR 67
1947: PPUSH
1948: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 86 , 17 , 3 , false ) ;
1952: CALL_OW 44
1956: PPUSH
1957: LD_INT 86
1959: PPUSH
1960: LD_INT 17
1962: PPUSH
1963: LD_INT 3
1965: PPUSH
1966: LD_INT 0
1968: PPUSH
1969: CALL_OW 50
// end ;
1973: GO 1934
1975: POP
1976: POP
// end ; for i := 1 to 2 do
1977: LD_ADDR_VAR 0 2
1981: PUSH
1982: DOUBLE
1983: LD_INT 1
1985: DEC
1986: ST_TO_ADDR
1987: LD_INT 2
1989: PUSH
1990: FOR_TO
1991: IFFALSE 2031
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1993: LD_INT 0
1995: PPUSH
1996: LD_INT 1
1998: PPUSH
1999: LD_OWVAR 67
2003: PPUSH
2004: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 108 , 153 , 3 , false ) ;
2008: CALL_OW 44
2012: PPUSH
2013: LD_INT 108
2015: PPUSH
2016: LD_INT 153
2018: PPUSH
2019: LD_INT 3
2021: PPUSH
2022: LD_INT 0
2024: PPUSH
2025: CALL_OW 50
// end ;
2029: GO 1990
2031: POP
2032: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
2033: LD_ADDR_VAR 0 7
2037: PUSH
2038: LD_INT 22
2040: PUSH
2041: LD_INT 3
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PUSH
2048: LD_INT 30
2050: PUSH
2051: LD_INT 32
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PPUSH
2062: CALL_OW 69
2066: ST_TO_ADDR
// for i := 1 to tmp do
2067: LD_ADDR_VAR 0 2
2071: PUSH
2072: DOUBLE
2073: LD_INT 1
2075: DEC
2076: ST_TO_ADDR
2077: LD_VAR 0 7
2081: PUSH
2082: FOR_TO
2083: IFFALSE 2191
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
2085: LD_INT 0
2087: PPUSH
2088: LD_INT 1
2090: PPUSH
2091: LD_OWVAR 67
2095: PUSH
2096: LD_INT 1
2098: PLUS
2099: PPUSH
2100: CALL_OW 380
// un := CreateHuman ;
2104: LD_ADDR_VAR 0 3
2108: PUSH
2109: CALL_OW 44
2113: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
2114: LD_VAR 0 3
2118: PPUSH
2119: LD_VAR 0 7
2123: PUSH
2124: LD_VAR 0 2
2128: ARRAY
2129: PPUSH
2130: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2134: LD_ADDR_EXP 21
2138: PUSH
2139: LD_EXP 21
2143: PUSH
2144: LD_VAR 0 3
2148: UNION
2149: ST_TO_ADDR
// PlaceWeaponTurret ( tmp [ i ] , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] ) ;
2150: LD_VAR 0 7
2154: PUSH
2155: LD_VAR 0 2
2159: ARRAY
2160: PPUSH
2161: LD_INT 44
2163: PUSH
2164: LD_INT 43
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PUSH
2171: LD_VAR 0 2
2175: PUSH
2176: LD_INT 2
2178: MOD
2179: PUSH
2180: LD_INT 1
2182: PLUS
2183: ARRAY
2184: PPUSH
2185: CALL_OW 431
// end ;
2189: GO 2082
2191: POP
2192: POP
// for i := 1 to Difficulty + 1 do
2193: LD_ADDR_VAR 0 2
2197: PUSH
2198: DOUBLE
2199: LD_INT 1
2201: DEC
2202: ST_TO_ADDR
2203: LD_OWVAR 67
2207: PUSH
2208: LD_INT 1
2210: PLUS
2211: PUSH
2212: FOR_TO
2213: IFFALSE 2304
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
2215: LD_INT 0
2217: PPUSH
2218: LD_INT 1
2220: PPUSH
2221: LD_OWVAR 67
2225: PUSH
2226: LD_INT 1
2228: PLUS
2229: PPUSH
2230: CALL_OW 380
// un := CreateHuman ;
2234: LD_ADDR_VAR 0 3
2238: PUSH
2239: CALL_OW 44
2243: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2244: LD_VAR 0 3
2248: PPUSH
2249: LD_INT 22
2251: PUSH
2252: LD_INT 3
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 30
2261: PUSH
2262: LD_INT 5
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PPUSH
2273: CALL_OW 69
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: PPUSH
2282: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2286: LD_ADDR_EXP 21
2290: PUSH
2291: LD_EXP 21
2295: PUSH
2296: LD_VAR 0 3
2300: UNION
2301: ST_TO_ADDR
// end ;
2302: GO 2212
2304: POP
2305: POP
// for i := 1 to 2 do
2306: LD_ADDR_VAR 0 2
2310: PUSH
2311: DOUBLE
2312: LD_INT 1
2314: DEC
2315: ST_TO_ADDR
2316: LD_INT 2
2318: PUSH
2319: FOR_TO
2320: IFFALSE 2407
// begin PrepareHuman ( false , 4 , Difficulty ) ;
2322: LD_INT 0
2324: PPUSH
2325: LD_INT 4
2327: PPUSH
2328: LD_OWVAR 67
2332: PPUSH
2333: CALL_OW 380
// un := CreateHuman ;
2337: LD_ADDR_VAR 0 3
2341: PUSH
2342: CALL_OW 44
2346: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
2347: LD_VAR 0 3
2351: PPUSH
2352: LD_INT 22
2354: PUSH
2355: LD_INT 3
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PUSH
2362: LD_INT 30
2364: PUSH
2365: LD_INT 7
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PPUSH
2376: CALL_OW 69
2380: PUSH
2381: LD_INT 1
2383: ARRAY
2384: PPUSH
2385: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2389: LD_ADDR_EXP 21
2393: PUSH
2394: LD_EXP 21
2398: PUSH
2399: LD_VAR 0 3
2403: UNION
2404: ST_TO_ADDR
// end ;
2405: GO 2319
2407: POP
2408: POP
// for i := 1 to Difficulty do
2409: LD_ADDR_VAR 0 2
2413: PUSH
2414: DOUBLE
2415: LD_INT 1
2417: DEC
2418: ST_TO_ADDR
2419: LD_OWVAR 67
2423: PUSH
2424: FOR_TO
2425: IFFALSE 2482
// begin PrepareHuman ( false , 2 , Difficulty ) ;
2427: LD_INT 0
2429: PPUSH
2430: LD_INT 2
2432: PPUSH
2433: LD_OWVAR 67
2437: PPUSH
2438: CALL_OW 380
// un := CreateHuman ;
2442: LD_ADDR_VAR 0 3
2446: PUSH
2447: CALL_OW 44
2451: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
2452: LD_VAR 0 3
2456: PPUSH
2457: LD_INT 106
2459: PPUSH
2460: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2464: LD_ADDR_EXP 21
2468: PUSH
2469: LD_EXP 21
2473: PUSH
2474: LD_VAR 0 3
2478: UNION
2479: ST_TO_ADDR
// end ;
2480: GO 2424
2482: POP
2483: POP
// for i := 1 to 3 do
2484: LD_ADDR_VAR 0 2
2488: PUSH
2489: DOUBLE
2490: LD_INT 1
2492: DEC
2493: ST_TO_ADDR
2494: LD_INT 3
2496: PUSH
2497: FOR_TO
2498: IFFALSE 2620
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
2500: LD_ADDR_VAR 0 6
2504: PUSH
2505: LD_INT 22
2507: PUSH
2508: LD_INT 3
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: PUSH
2515: LD_INT 30
2517: PUSH
2518: LD_INT 31
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PPUSH
2529: CALL_OW 69
2533: PUSH
2534: LD_VAR 0 2
2538: ARRAY
2539: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
2540: LD_INT 0
2542: PPUSH
2543: LD_INT 1
2545: PPUSH
2546: LD_OWVAR 67
2550: PPUSH
2551: CALL_OW 380
// un := CreateHuman ;
2555: LD_ADDR_VAR 0 3
2559: PUSH
2560: CALL_OW 44
2564: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
2565: LD_VAR 0 3
2569: PPUSH
2570: LD_VAR 0 6
2574: PPUSH
2575: CALL_OW 254
2579: PUSH
2580: LD_INT 3
2582: PLUS
2583: PPUSH
2584: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
2588: LD_VAR 0 3
2592: PPUSH
2593: LD_VAR 0 6
2597: PPUSH
2598: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2602: LD_ADDR_EXP 21
2606: PUSH
2607: LD_EXP 21
2611: PUSH
2612: LD_VAR 0 3
2616: UNION
2617: ST_TO_ADDR
// end ;
2618: GO 2497
2620: POP
2621: POP
// russianOmicronAttackers := [ ] ;
2622: LD_ADDR_EXP 24
2626: PUSH
2627: EMPTY
2628: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2629: LD_ADDR_VAR 0 2
2633: PUSH
2634: DOUBLE
2635: LD_INT 1
2637: DEC
2638: ST_TO_ADDR
2639: LD_INT 4
2641: PUSH
2642: LD_INT 5
2644: PUSH
2645: LD_INT 6
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: LIST
2652: PUSH
2653: LD_OWVAR 67
2657: ARRAY
2658: PUSH
2659: FOR_TO
2660: IFFALSE 2878
// begin PrepareVehicle ( [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
2662: LD_INT 21
2664: PUSH
2665: LD_INT 23
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: PUSH
2672: LD_VAR 0 2
2676: PUSH
2677: LD_INT 2
2679: MOD
2680: PUSH
2681: LD_INT 1
2683: PLUS
2684: ARRAY
2685: PPUSH
2686: LD_INT 1
2688: PPUSH
2689: LD_INT 1
2691: PPUSH
2692: LD_INT 43
2694: PUSH
2695: LD_INT 44
2697: PUSH
2698: LD_INT 42
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: LIST
2705: PUSH
2706: LD_VAR 0 2
2710: PUSH
2711: LD_INT 3
2713: MOD
2714: PUSH
2715: LD_INT 1
2717: PLUS
2718: ARRAY
2719: PPUSH
2720: LD_INT 100
2722: PPUSH
2723: CALL 35664 0 5
// un := CreateVehicle ;
2727: LD_ADDR_VAR 0 3
2731: PUSH
2732: CALL_OW 45
2736: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
2737: LD_VAR 0 3
2741: PPUSH
2742: LD_INT 0
2744: PUSH
2745: LD_INT 5
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: PUSH
2752: LD_INT 1
2754: PPUSH
2755: LD_INT 2
2757: PPUSH
2758: CALL_OW 12
2762: ARRAY
2763: PPUSH
2764: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
2768: LD_ADDR_EXP 24
2772: PUSH
2773: LD_EXP 24
2777: PUSH
2778: LD_VAR 0 3
2782: UNION
2783: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
2784: LD_VAR 0 3
2788: PPUSH
2789: LD_INT 127
2791: PPUSH
2792: LD_INT 89
2794: PPUSH
2795: LD_INT 7
2797: PPUSH
2798: LD_INT 0
2800: PPUSH
2801: CALL_OW 50
// uc_side := 3 ;
2805: LD_ADDR_OWVAR 20
2809: PUSH
2810: LD_INT 3
2812: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
2813: LD_INT 0
2815: PPUSH
2816: LD_INT 3
2818: PPUSH
2819: LD_INT 3
2821: PPUSH
2822: CALL_OW 380
// un := CreateHuman ;
2826: LD_ADDR_VAR 0 3
2830: PUSH
2831: CALL_OW 44
2835: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
2836: LD_ADDR_EXP 24
2840: PUSH
2841: LD_EXP 24
2845: PUSH
2846: LD_VAR 0 3
2850: UNION
2851: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
2852: LD_VAR 0 3
2856: PPUSH
2857: LD_EXP 24
2861: PUSH
2862: LD_EXP 24
2866: PUSH
2867: LD_INT 1
2869: MINUS
2870: ARRAY
2871: PPUSH
2872: CALL_OW 52
// end ;
2876: GO 2659
2878: POP
2879: POP
// for i := 1 to 3 do
2880: LD_ADDR_VAR 0 2
2884: PUSH
2885: DOUBLE
2886: LD_INT 1
2888: DEC
2889: ST_TO_ADDR
2890: LD_INT 3
2892: PUSH
2893: FOR_TO
2894: IFFALSE 2960
// begin PrepareHuman ( false , 1 , Difficulty ) ;
2896: LD_INT 0
2898: PPUSH
2899: LD_INT 1
2901: PPUSH
2902: LD_OWVAR 67
2906: PPUSH
2907: CALL_OW 380
// un := CreateHuman ;
2911: LD_ADDR_VAR 0 3
2915: PUSH
2916: CALL_OW 44
2920: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
2921: LD_ADDR_EXP 24
2925: PUSH
2926: LD_EXP 24
2930: PUSH
2931: LD_VAR 0 3
2935: UNION
2936: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
2937: LD_VAR 0 3
2941: PPUSH
2942: LD_INT 91
2944: PPUSH
2945: LD_INT 60
2947: PPUSH
2948: LD_INT 3
2950: PPUSH
2951: LD_INT 0
2953: PPUSH
2954: CALL_OW 50
// end ;
2958: GO 2893
2960: POP
2961: POP
// end ;
2962: LD_VAR 0 1
2966: RET
// every 0 0$3 do var i ;
2967: GO 2969
2969: DISABLE
2970: LD_INT 0
2972: PPUSH
// begin for i := 1 to 4 do
2973: LD_ADDR_VAR 0 1
2977: PUSH
2978: DOUBLE
2979: LD_INT 1
2981: DEC
2982: ST_TO_ADDR
2983: LD_INT 4
2985: PUSH
2986: FOR_TO
2987: IFFALSE 3006
// ComExitBuilding ( grishkoSquad [ i ] ) ;
2989: LD_EXP 22
2993: PUSH
2994: LD_VAR 0 1
2998: ARRAY
2999: PPUSH
3000: CALL_OW 122
3004: GO 2986
3006: POP
3007: POP
// wait ( 3 ) ;
3008: LD_INT 3
3010: PPUSH
3011: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
3015: LD_EXP 22
3019: PUSH
3020: LD_INT 1
3022: ARRAY
3023: PPUSH
3024: LD_INT 22
3026: PUSH
3027: LD_INT 6
3029: PUSH
3030: EMPTY
3031: LIST
3032: LIST
3033: PUSH
3034: LD_INT 30
3036: PUSH
3037: LD_INT 31
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PPUSH
3048: CALL_OW 69
3052: PPUSH
3053: LD_EXP 22
3057: PUSH
3058: LD_INT 1
3060: ARRAY
3061: PPUSH
3062: CALL_OW 74
3066: PPUSH
3067: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
3071: LD_EXP 22
3075: PUSH
3076: LD_INT 2
3078: ARRAY
3079: PPUSH
3080: LD_INT 211
3082: PPUSH
3083: LD_INT 107
3085: PPUSH
3086: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
3090: LD_EXP 22
3094: PUSH
3095: LD_INT 2
3097: ARRAY
3098: PPUSH
3099: LD_INT 209
3101: PPUSH
3102: LD_INT 106
3104: PPUSH
3105: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
3109: LD_EXP 22
3113: PUSH
3114: LD_INT 3
3116: ARRAY
3117: PPUSH
3118: LD_INT 209
3120: PPUSH
3121: LD_INT 103
3123: PPUSH
3124: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
3128: LD_EXP 22
3132: PUSH
3133: LD_INT 3
3135: ARRAY
3136: PPUSH
3137: LD_INT 209
3139: PPUSH
3140: LD_INT 106
3142: PPUSH
3143: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
3147: LD_EXP 22
3151: PUSH
3152: LD_INT 4
3154: ARRAY
3155: PPUSH
3156: LD_INT 227
3158: PPUSH
3159: LD_INT 117
3161: PPUSH
3162: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
3166: LD_EXP 22
3170: PUSH
3171: LD_INT 4
3173: ARRAY
3174: PPUSH
3175: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
3179: LD_INT 700
3181: PPUSH
3182: CALL_OW 67
// for i := 3 downto 2 do
3186: LD_ADDR_VAR 0 1
3190: PUSH
3191: DOUBLE
3192: LD_INT 3
3194: INC
3195: ST_TO_ADDR
3196: LD_INT 2
3198: PUSH
3199: FOR_DOWNTO
3200: IFFALSE 3367
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
3202: LD_EXP 22
3206: PUSH
3207: LD_VAR 0 1
3211: ARRAY
3212: PPUSH
3213: LD_INT 200
3215: PPUSH
3216: LD_INT 91
3218: PPUSH
3219: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3223: LD_EXP 22
3227: PUSH
3228: LD_VAR 0 1
3232: ARRAY
3233: PPUSH
3234: LD_INT 210
3236: PPUSH
3237: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
3241: LD_EXP 22
3245: PUSH
3246: LD_VAR 0 1
3250: ARRAY
3251: PPUSH
3252: LD_INT 224
3254: PPUSH
3255: LD_INT 93
3257: PPUSH
3258: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3262: LD_EXP 22
3266: PUSH
3267: LD_VAR 0 1
3271: ARRAY
3272: PPUSH
3273: LD_INT 210
3275: PPUSH
3276: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
3280: LD_EXP 22
3284: PUSH
3285: LD_VAR 0 1
3289: ARRAY
3290: PPUSH
3291: LD_INT 239
3293: PPUSH
3294: LD_INT 123
3296: PPUSH
3297: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3301: LD_EXP 22
3305: PUSH
3306: LD_VAR 0 1
3310: ARRAY
3311: PPUSH
3312: LD_INT 210
3314: PPUSH
3315: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
3319: LD_EXP 22
3323: PUSH
3324: LD_VAR 0 1
3328: ARRAY
3329: PPUSH
3330: LD_INT 212
3332: PPUSH
3333: LD_INT 105
3335: PPUSH
3336: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
3340: LD_EXP 22
3344: PUSH
3345: LD_VAR 0 1
3349: ARRAY
3350: PPUSH
3351: LD_INT 700
3353: PPUSH
3354: CALL_OW 202
// wait ( 0 0$30 ) ;
3358: LD_INT 1050
3360: PPUSH
3361: CALL_OW 67
// end ;
3365: GO 3199
3367: POP
3368: POP
// until not activeGrishkoAI ;
3369: LD_EXP 2
3373: NOT
3374: IFFALSE 3179
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
3376: LD_EXP 22
3380: PPUSH
3381: LD_INT 221
3383: PPUSH
3384: LD_INT 110
3386: PPUSH
3387: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
3391: LD_EXP 22
3395: PPUSH
3396: LD_INT 228
3398: PPUSH
3399: LD_INT 115
3401: PPUSH
3402: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
3406: LD_EXP 22
3410: PPUSH
3411: CALL_OW 200
// end ;
3415: PPOPN 1
3417: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
3418: LD_EXP 3
3422: IFFALSE 4056
3424: GO 3426
3426: DISABLE
3427: LD_INT 0
3429: PPUSH
3430: PPUSH
3431: PPUSH
3432: PPUSH
// begin uc_side := 6 ;
3433: LD_ADDR_OWVAR 20
3437: PUSH
3438: LD_INT 6
3440: ST_TO_ADDR
// uc_nation := 3 ;
3441: LD_ADDR_OWVAR 21
3445: PUSH
3446: LD_INT 3
3448: ST_TO_ADDR
// ResetHc ;
3449: CALL 68550 0 0
// for i := 1 to 3 do
3453: LD_ADDR_VAR 0 2
3457: PUSH
3458: DOUBLE
3459: LD_INT 1
3461: DEC
3462: ST_TO_ADDR
3463: LD_INT 3
3465: PUSH
3466: FOR_TO
3467: IFFALSE 3576
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
3469: LD_INT 0
3471: PPUSH
3472: LD_INT 1
3474: PPUSH
3475: LD_INT 2
3477: PUSH
3478: LD_INT 3
3480: PUSH
3481: LD_INT 4
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: LIST
3488: PUSH
3489: LD_OWVAR 67
3493: ARRAY
3494: PPUSH
3495: CALL_OW 380
// un := CreateHuman ;
3499: LD_ADDR_VAR 0 1
3503: PUSH
3504: CALL_OW 44
3508: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
3509: LD_ADDR_EXP 23
3513: PUSH
3514: LD_EXP 23
3518: PUSH
3519: LD_VAR 0 1
3523: UNION
3524: ST_TO_ADDR
// SetTag ( un , 1 ) ;
3525: LD_VAR 0 1
3529: PPUSH
3530: LD_INT 1
3532: PPUSH
3533: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
3537: LD_VAR 0 1
3541: PPUSH
3542: LD_INT 3
3544: PPUSH
3545: LD_INT 0
3547: PPUSH
3548: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
3552: LD_VAR 0 1
3556: PPUSH
3557: LD_INT 210
3559: PPUSH
3560: LD_INT 159
3562: PPUSH
3563: CALL_OW 111
// wait ( 0 0$2 ) ;
3567: LD_INT 70
3569: PPUSH
3570: CALL_OW 67
// end ;
3574: GO 3466
3576: POP
3577: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 208 , 42 ] ] ] ;
3578: LD_ADDR_VAR 0 4
3582: PUSH
3583: LD_INT 172
3585: PUSH
3586: LD_INT 76
3588: PUSH
3589: EMPTY
3590: LIST
3591: LIST
3592: PUSH
3593: LD_INT 150
3595: PUSH
3596: LD_INT 38
3598: PUSH
3599: EMPTY
3600: LIST
3601: LIST
3602: PUSH
3603: LD_INT 148
3605: PUSH
3606: LD_INT 9
3608: PUSH
3609: EMPTY
3610: LIST
3611: LIST
3612: PUSH
3613: LD_INT 165
3615: PUSH
3616: LD_INT 38
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: PUSH
3629: LD_INT 191
3631: PUSH
3632: LD_INT 77
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: LD_INT 168
3641: PUSH
3642: LD_INT 42
3644: PUSH
3645: EMPTY
3646: LIST
3647: LIST
3648: PUSH
3649: LD_INT 166
3651: PUSH
3652: LD_INT 11
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: PUSH
3659: LD_INT 151
3661: PUSH
3662: LD_INT 12
3664: PUSH
3665: EMPTY
3666: LIST
3667: LIST
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: PUSH
3675: LD_INT 221
3677: PUSH
3678: LD_INT 88
3680: PUSH
3681: EMPTY
3682: LIST
3683: LIST
3684: PUSH
3685: LD_INT 217
3687: PUSH
3688: LD_INT 64
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: PUSH
3695: LD_INT 208
3697: PUSH
3698: LD_INT 42
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: LIST
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: LIST
3714: ST_TO_ADDR
// repeat wait ( 0 0$5 ) ;
3715: LD_INT 175
3717: PPUSH
3718: CALL_OW 67
// for i := 1 to patrol do
3722: LD_ADDR_VAR 0 2
3726: PUSH
3727: DOUBLE
3728: LD_INT 1
3730: DEC
3731: ST_TO_ADDR
3732: LD_VAR 0 4
3736: PUSH
3737: FOR_TO
3738: IFFALSE 4020
// begin if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
3740: LD_EXP 23
3744: PUSH
3745: LD_VAR 0 2
3749: ARRAY
3750: PPUSH
3751: CALL_OW 256
3755: PUSH
3756: LD_INT 990
3758: LESS
3759: PUSH
3760: LD_EXP 23
3764: PUSH
3765: LD_VAR 0 2
3769: ARRAY
3770: PPUSH
3771: CALL_OW 110
3775: PUSH
3776: LD_INT 1
3778: EQUAL
3779: AND
3780: IFFALSE 3808
// begin spottedByPatrol := true ;
3782: LD_ADDR_EXP 4
3786: PUSH
3787: LD_INT 1
3789: ST_TO_ADDR
// SetTag ( russianPatrol [ i ] , 2 ) ;
3790: LD_EXP 23
3794: PUSH
3795: LD_VAR 0 2
3799: ARRAY
3800: PPUSH
3801: LD_INT 2
3803: PPUSH
3804: CALL_OW 109
// end ; if GetTag ( russianPatrol [ i ] ) = 2 then
3808: LD_EXP 23
3812: PUSH
3813: LD_VAR 0 2
3817: ARRAY
3818: PPUSH
3819: CALL_OW 110
3823: PUSH
3824: LD_INT 2
3826: EQUAL
3827: IFFALSE 3918
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
3829: LD_EXP 23
3833: PUSH
3834: LD_VAR 0 2
3838: ARRAY
3839: PPUSH
3840: LD_INT 166
3842: PPUSH
3843: LD_INT 101
3845: PPUSH
3846: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
3850: LD_EXP 23
3854: PUSH
3855: LD_VAR 0 2
3859: ARRAY
3860: PPUSH
3861: LD_INT 71
3863: PPUSH
3864: CALL_OW 296
3868: PUSH
3869: LD_INT 10
3871: LESS
3872: IFFALSE 3916
// begin kirovBaseSquad := kirovBaseSquad union russianPatrol [ i ] ;
3874: LD_ADDR_EXP 20
3878: PUSH
3879: LD_EXP 20
3883: PUSH
3884: LD_EXP 23
3888: PUSH
3889: LD_VAR 0 2
3893: ARRAY
3894: UNION
3895: ST_TO_ADDR
// russianPatrol := Delete ( russianPatrol , i ) ;
3896: LD_ADDR_EXP 23
3900: PUSH
3901: LD_EXP 23
3905: PPUSH
3906: LD_VAR 0 2
3910: PPUSH
3911: CALL_OW 3
3915: ST_TO_ADDR
// end ; continue ;
3916: GO 3737
// end ; if not HasTask ( russianPatrol [ i ] ) then
3918: LD_EXP 23
3922: PUSH
3923: LD_VAR 0 2
3927: ARRAY
3928: PPUSH
3929: CALL_OW 314
3933: NOT
3934: IFFALSE 4018
// for j in patrol [ i ] do
3936: LD_ADDR_VAR 0 3
3940: PUSH
3941: LD_VAR 0 4
3945: PUSH
3946: LD_VAR 0 2
3950: ARRAY
3951: PUSH
3952: FOR_IN
3953: IFFALSE 4016
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
3955: LD_EXP 23
3959: PUSH
3960: LD_VAR 0 2
3964: ARRAY
3965: PPUSH
3966: LD_INT 35
3968: PPUSH
3969: LD_INT 175
3971: PPUSH
3972: CALL_OW 12
3976: PPUSH
3977: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
3981: LD_EXP 23
3985: PUSH
3986: LD_VAR 0 2
3990: ARRAY
3991: PPUSH
3992: LD_VAR 0 3
3996: PUSH
3997: LD_INT 1
3999: ARRAY
4000: PPUSH
4001: LD_VAR 0 3
4005: PUSH
4006: LD_INT 2
4008: ARRAY
4009: PPUSH
4010: CALL_OW 174
// end ;
4014: GO 3952
4016: POP
4017: POP
// end ;
4018: GO 3737
4020: POP
4021: POP
// until not russianPatrol or russianAlert ;
4022: LD_EXP 23
4026: NOT
4027: PUSH
4028: LD_EXP 5
4032: OR
4033: IFFALSE 3715
// if russianPatrol then
4035: LD_EXP 23
4039: IFFALSE 4056
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
4041: LD_EXP 23
4045: PPUSH
4046: LD_INT 161
4048: PPUSH
4049: LD_INT 107
4051: PPUSH
4052: CALL_OW 114
// end ;
4056: PPOPN 4
4058: END
// every 0 0$1 trigger startAttackOnOmicron and not retreatFromOmicron do var i , filter , tmp , enemy , x , points , point ;
4059: LD_EXP 6
4063: PUSH
4064: LD_EXP 8
4068: NOT
4069: AND
4070: IFFALSE 4640
4072: GO 4074
4074: DISABLE
4075: LD_INT 0
4077: PPUSH
4078: PPUSH
4079: PPUSH
4080: PPUSH
4081: PPUSH
4082: PPUSH
4083: PPUSH
// begin enable ;
4084: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
4085: LD_ADDR_VAR 0 2
4089: PUSH
4090: LD_EXP 24
4094: PPUSH
4095: LD_INT 21
4097: PUSH
4098: LD_INT 2
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: PPUSH
4105: CALL_OW 72
4109: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 1 ] ) ;
4110: LD_ADDR_VAR 0 4
4114: PUSH
4115: LD_INT 22
4117: PUSH
4118: LD_INT 1
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: PPUSH
4125: CALL_OW 69
4129: ST_TO_ADDR
// points := [ [ 44 , 15 ] , [ 54 , 39 ] ] ;
4130: LD_ADDR_VAR 0 6
4134: PUSH
4135: LD_INT 44
4137: PUSH
4138: LD_INT 15
4140: PUSH
4141: EMPTY
4142: LIST
4143: LIST
4144: PUSH
4145: LD_INT 54
4147: PUSH
4148: LD_INT 39
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: ST_TO_ADDR
// for i in filter do
4159: LD_ADDR_VAR 0 1
4163: PUSH
4164: LD_VAR 0 2
4168: PUSH
4169: FOR_IN
4170: IFFALSE 4638
// begin tmp := IsDrivenBy ( i ) ;
4172: LD_ADDR_VAR 0 3
4176: PUSH
4177: LD_VAR 0 1
4181: PPUSH
4182: CALL_OW 311
4186: ST_TO_ADDR
// if not tmp then
4187: LD_VAR 0 3
4191: NOT
4192: IFFALSE 4196
// continue ;
4194: GO 4169
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
4196: LD_VAR 0 1
4200: PPUSH
4201: CALL_OW 261
4205: PUSH
4206: LD_INT 90
4208: GREATER
4209: PUSH
4210: LD_VAR 0 1
4214: PPUSH
4215: CALL_OW 110
4219: PUSH
4220: LD_INT 2
4222: EQUAL
4223: AND
4224: IFFALSE 4240
// SetTag ( i , 0 ) else
4226: LD_VAR 0 1
4230: PPUSH
4231: LD_INT 0
4233: PPUSH
4234: CALL_OW 109
4238: GO 4336
// if GetTag ( i ) = 2 then
4240: LD_VAR 0 1
4244: PPUSH
4245: CALL_OW 110
4249: PUSH
4250: LD_INT 2
4252: EQUAL
4253: IFFALSE 4336
// begin x := rand ( 1 , 2 ) ;
4255: LD_ADDR_VAR 0 5
4259: PUSH
4260: LD_INT 1
4262: PPUSH
4263: LD_INT 2
4265: PPUSH
4266: CALL_OW 12
4270: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
4271: LD_VAR 0 1
4275: PPUSH
4276: LD_EXP 25
4280: PUSH
4281: LD_VAR 0 5
4285: ARRAY
4286: PPUSH
4287: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
4291: LD_EXP 25
4295: PUSH
4296: LD_VAR 0 5
4300: ARRAY
4301: PPUSH
4302: LD_INT 2
4304: PPUSH
4305: CALL_OW 289
4309: PUSH
4310: LD_INT 20
4312: LESS
4313: IFFALSE 4336
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
4315: LD_EXP 25
4319: PUSH
4320: LD_VAR 0 5
4324: ARRAY
4325: PPUSH
4326: LD_INT 2
4328: PPUSH
4329: LD_INT 100
4331: PPUSH
4332: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
4336: LD_VAR 0 1
4340: PPUSH
4341: CALL_OW 256
4345: PUSH
4346: LD_INT 600
4348: GREATEREQUAL
4349: PUSH
4350: LD_VAR 0 1
4354: PPUSH
4355: CALL_OW 110
4359: NOT
4360: AND
4361: IFFALSE 4387
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4363: LD_VAR 0 1
4367: PPUSH
4368: LD_VAR 0 4
4372: PPUSH
4373: LD_VAR 0 1
4377: PPUSH
4378: CALL_OW 74
4382: PPUSH
4383: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
4387: LD_VAR 0 1
4391: PPUSH
4392: CALL_OW 256
4396: PUSH
4397: LD_INT 600
4399: LESS
4400: PUSH
4401: LD_VAR 0 1
4405: PPUSH
4406: CALL_OW 110
4410: NOT
4411: AND
4412: IFFALSE 4488
// begin SetTag ( i , 1 ) ;
4414: LD_VAR 0 1
4418: PPUSH
4419: LD_INT 1
4421: PPUSH
4422: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
4426: LD_ADDR_VAR 0 7
4430: PUSH
4431: LD_VAR 0 1
4435: PPUSH
4436: LD_VAR 0 6
4440: PPUSH
4441: CALL 71369 0 2
4445: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
4446: LD_VAR 0 1
4450: PPUSH
4451: LD_VAR 0 7
4455: PUSH
4456: LD_INT 1
4458: ARRAY
4459: PPUSH
4460: LD_VAR 0 7
4464: PUSH
4465: LD_INT 2
4467: ARRAY
4468: PPUSH
4469: CALL_OW 111
// AddComMoveXY ( i , 71 , 29 ) ;
4473: LD_VAR 0 1
4477: PPUSH
4478: LD_INT 71
4480: PPUSH
4481: LD_INT 29
4483: PPUSH
4484: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 71 , 29 ) < 9 and tmp then
4488: LD_VAR 0 1
4492: PPUSH
4493: CALL_OW 110
4497: PUSH
4498: LD_INT 1
4500: EQUAL
4501: PUSH
4502: LD_VAR 0 1
4506: PPUSH
4507: LD_INT 71
4509: PPUSH
4510: LD_INT 29
4512: PPUSH
4513: CALL_OW 297
4517: PUSH
4518: LD_INT 9
4520: LESS
4521: AND
4522: PUSH
4523: LD_VAR 0 3
4527: AND
4528: IFFALSE 4636
// begin ComExitVehicle ( tmp ) ;
4530: LD_VAR 0 3
4534: PPUSH
4535: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4539: LD_VAR 0 3
4543: PPUSH
4544: LD_VAR 0 1
4548: PPUSH
4549: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4553: LD_INT 35
4555: PPUSH
4556: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4560: LD_VAR 0 1
4564: PPUSH
4565: CALL_OW 256
4569: PUSH
4570: LD_INT 1000
4572: EQUAL
4573: IFFALSE 4553
// ComEnterUnit ( tmp , i ) ;
4575: LD_VAR 0 3
4579: PPUSH
4580: LD_VAR 0 1
4584: PPUSH
4585: CALL_OW 120
// if GetFuel ( i ) <= 90 and russianCargo then
4589: LD_VAR 0 1
4593: PPUSH
4594: CALL_OW 261
4598: PUSH
4599: LD_INT 90
4601: LESSEQUAL
4602: PUSH
4603: LD_EXP 25
4607: AND
4608: IFFALSE 4624
// SetTag ( i , 2 ) else
4610: LD_VAR 0 1
4614: PPUSH
4615: LD_INT 2
4617: PPUSH
4618: CALL_OW 109
4622: GO 4636
// SetTag ( i , 0 ) ;
4624: LD_VAR 0 1
4628: PPUSH
4629: LD_INT 0
4631: PPUSH
4632: CALL_OW 109
// end ; end ;
4636: GO 4169
4638: POP
4639: POP
// end ;
4640: PPOPN 7
4642: END
// every 0 0$30 trigger startAttackOnOmicron and not retreatFromOmicron and russianOmicronAttackers < [ 12 , 14 , 16 ] [ Difficulty ] do
4643: LD_EXP 6
4647: PUSH
4648: LD_EXP 8
4652: NOT
4653: AND
4654: PUSH
4655: LD_EXP 24
4659: PUSH
4660: LD_INT 12
4662: PUSH
4663: LD_INT 14
4665: PUSH
4666: LD_INT 16
4668: PUSH
4669: EMPTY
4670: LIST
4671: LIST
4672: LIST
4673: PUSH
4674: LD_OWVAR 67
4678: ARRAY
4679: LESS
4680: AND
4681: IFFALSE 4694
4683: GO 4685
4685: DISABLE
// begin enable ;
4686: ENABLE
// ProduceNew ( 0 ) ;
4687: LD_INT 0
4689: PPUSH
4690: CALL 4695 0 1
// end ;
4694: END
// export function ProduceNew ( type ) ; var un ; begin
4695: LD_INT 0
4697: PPUSH
4698: PPUSH
// if tanksCounter < [ 7 , 12 , 15 ] [ Difficulty ] then
4699: LD_EXP 12
4703: PUSH
4704: LD_INT 7
4706: PUSH
4707: LD_INT 12
4709: PUSH
4710: LD_INT 15
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: LIST
4717: PUSH
4718: LD_OWVAR 67
4722: ARRAY
4723: LESS
4724: IFFALSE 4798
// begin uc_side := 3 ;
4726: LD_ADDR_OWVAR 20
4730: PUSH
4731: LD_INT 3
4733: ST_TO_ADDR
// uc_nation := 3 ;
4734: LD_ADDR_OWVAR 21
4738: PUSH
4739: LD_INT 3
4741: ST_TO_ADDR
// ResetHc ;
4742: CALL 68550 0 0
// PrepareHuman ( false , 3 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4746: LD_INT 0
4748: PPUSH
4749: LD_INT 3
4751: PPUSH
4752: LD_INT 3
4754: PUSH
4755: LD_INT 4
4757: PUSH
4758: LD_INT 5
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: LIST
4765: PUSH
4766: LD_OWVAR 67
4770: ARRAY
4771: PPUSH
4772: CALL_OW 380
// un := CreateHuman ;
4776: LD_ADDR_VAR 0 3
4780: PUSH
4781: CALL_OW 44
4785: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruBeriaFac ) ;
4786: LD_VAR 0 3
4790: PPUSH
4791: LD_INT 143
4793: PPUSH
4794: CALL_OW 52
// end ; if type = 1 then
4798: LD_VAR 0 1
4802: PUSH
4803: LD_INT 1
4805: EQUAL
4806: IFFALSE 4829
// AddComConstruct ( ruBeriaFac , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) else
4808: LD_INT 143
4810: PPUSH
4811: LD_INT 21
4813: PPUSH
4814: LD_INT 1
4816: PPUSH
4817: LD_INT 1
4819: PPUSH
4820: LD_INT 51
4822: PPUSH
4823: CALL_OW 185
4827: GO 4908
// AddComConstruct ( ruBeriaFac , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , Difficulty + 1 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 4 ) ] ) ;
4829: LD_INT 143
4831: PPUSH
4832: LD_INT 21
4834: PUSH
4835: LD_INT 22
4837: PUSH
4838: LD_INT 23
4840: PUSH
4841: LD_INT 24
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: PUSH
4850: LD_INT 1
4852: PPUSH
4853: LD_OWVAR 67
4857: PUSH
4858: LD_INT 1
4860: PLUS
4861: PPUSH
4862: CALL_OW 12
4866: ARRAY
4867: PPUSH
4868: LD_INT 1
4870: PPUSH
4871: LD_INT 1
4873: PPUSH
4874: LD_INT 44
4876: PUSH
4877: LD_INT 44
4879: PUSH
4880: LD_INT 43
4882: PUSH
4883: LD_INT 42
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: PUSH
4892: LD_INT 1
4894: PPUSH
4895: LD_INT 4
4897: PPUSH
4898: CALL_OW 12
4902: ARRAY
4903: PPUSH
4904: CALL_OW 185
// end ;
4908: LD_VAR 0 2
4912: RET
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
4913: LD_EXP 8
4917: IFFALSE 5119
4919: GO 4921
4921: DISABLE
4922: LD_INT 0
4924: PPUSH
4925: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
4926: LD_EXP 25
4930: PPUSH
4931: LD_INT 79
4933: PPUSH
4934: LD_INT 155
4936: PPUSH
4937: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
4941: LD_EXP 25
4945: PPUSH
4946: LD_INT 4
4948: PPUSH
4949: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
4953: LD_ADDR_VAR 0 2
4957: PUSH
4958: LD_EXP 24
4962: PPUSH
4963: LD_INT 50
4965: PUSH
4966: EMPTY
4967: LIST
4968: PPUSH
4969: CALL_OW 72
4973: ST_TO_ADDR
// for i in tmp do
4974: LD_ADDR_VAR 0 1
4978: PUSH
4979: LD_VAR 0 2
4983: PUSH
4984: FOR_IN
4985: IFFALSE 5019
// begin ComAgressiveMove ( i , 123 , 60 ) ;
4987: LD_VAR 0 1
4991: PPUSH
4992: LD_INT 123
4994: PPUSH
4995: LD_INT 60
4997: PPUSH
4998: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
5002: LD_VAR 0 1
5006: PPUSH
5007: LD_INT 153
5009: PPUSH
5010: LD_INT 103
5012: PPUSH
5013: CALL_OW 174
// end ;
5017: GO 4984
5019: POP
5020: POP
// repeat wait ( 0 0$1 ) ;
5021: LD_INT 35
5023: PPUSH
5024: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5028: LD_ADDR_VAR 0 2
5032: PUSH
5033: LD_EXP 24
5037: PPUSH
5038: LD_INT 50
5040: PUSH
5041: EMPTY
5042: LIST
5043: PPUSH
5044: CALL_OW 72
5048: ST_TO_ADDR
// for i in tmp do
5049: LD_ADDR_VAR 0 1
5053: PUSH
5054: LD_VAR 0 2
5058: PUSH
5059: FOR_IN
5060: IFFALSE 5110
// if not HasTask ( i ) then
5062: LD_VAR 0 1
5066: PPUSH
5067: CALL_OW 314
5071: NOT
5072: IFFALSE 5108
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) until not tmp ;
5074: LD_VAR 0 1
5078: PPUSH
5079: LD_INT 81
5081: PUSH
5082: LD_INT 3
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: PPUSH
5089: CALL_OW 69
5093: PPUSH
5094: LD_VAR 0 1
5098: PPUSH
5099: CALL_OW 74
5103: PPUSH
5104: CALL_OW 115
5108: GO 5059
5110: POP
5111: POP
5112: LD_VAR 0 2
5116: NOT
5117: IFFALSE 5021
// end ;
5119: PPOPN 2
5121: END
// every 0 0$2 trigger FilterUnitsInArea ( eastKirovArea , [ f_enemy , 6 ] ) do
5122: LD_INT 5
5124: PPUSH
5125: LD_INT 81
5127: PUSH
5128: LD_INT 6
5130: PUSH
5131: EMPTY
5132: LIST
5133: LIST
5134: PPUSH
5135: CALL_OW 70
5139: IFFALSE 5152
5141: GO 5143
5143: DISABLE
// russianAlert := true ;
5144: LD_ADDR_EXP 5
5148: PUSH
5149: LD_INT 1
5151: ST_TO_ADDR
5152: END
// every 0 0$1 trigger IsOk ( Beria ) and GetSide ( Beria ) = 3 and GetResourceType ( GetBase ( Beria ) , mat_cans ) < 100 do
5153: LD_INT 106
5155: PPUSH
5156: CALL_OW 302
5160: PUSH
5161: LD_INT 106
5163: PPUSH
5164: CALL_OW 255
5168: PUSH
5169: LD_INT 3
5171: EQUAL
5172: AND
5173: PUSH
5174: LD_INT 106
5176: PPUSH
5177: CALL_OW 274
5181: PPUSH
5182: LD_INT 1
5184: PPUSH
5185: CALL_OW 275
5189: PUSH
5190: LD_INT 100
5192: LESS
5193: AND
5194: IFFALSE 5218
5196: GO 5198
5198: DISABLE
// begin enable ;
5199: ENABLE
// AddResourceType ( GetBase ( beria ) , mat_cans , 200 ) ;
5200: LD_INT 106
5202: PPUSH
5203: CALL_OW 274
5207: PPUSH
5208: LD_INT 1
5210: PPUSH
5211: LD_INT 200
5213: PPUSH
5214: CALL_OW 276
// end ;
5218: END
// every 0 0$1 do var i , un , tmp ;
5219: GO 5221
5221: DISABLE
5222: LD_INT 0
5224: PPUSH
5225: PPUSH
5226: PPUSH
// begin uc_side := 3 ;
5227: LD_ADDR_OWVAR 20
5231: PUSH
5232: LD_INT 3
5234: ST_TO_ADDR
// uc_nation := 3 ;
5235: LD_ADDR_OWVAR 21
5239: PUSH
5240: LD_INT 3
5242: ST_TO_ADDR
// tmp := [ ] ;
5243: LD_ADDR_VAR 0 3
5247: PUSH
5248: EMPTY
5249: ST_TO_ADDR
// for i := 1 to 2 do
5250: LD_ADDR_VAR 0 1
5254: PUSH
5255: DOUBLE
5256: LD_INT 1
5258: DEC
5259: ST_TO_ADDR
5260: LD_INT 2
5262: PUSH
5263: FOR_TO
5264: IFFALSE 5341
// begin PrepareHuman ( false , 2 , 2 ) ;
5266: LD_INT 0
5268: PPUSH
5269: LD_INT 2
5271: PPUSH
5272: LD_INT 2
5274: PPUSH
5275: CALL_OW 380
// un := CreateHuman ;
5279: LD_ADDR_VAR 0 2
5283: PUSH
5284: CALL_OW 44
5288: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
5289: LD_ADDR_VAR 0 3
5293: PUSH
5294: LD_VAR 0 3
5298: PPUSH
5299: LD_VAR 0 3
5303: PUSH
5304: LD_INT 1
5306: PLUS
5307: PPUSH
5308: LD_VAR 0 2
5312: PPUSH
5313: CALL_OW 1
5317: ST_TO_ADDR
// PlaceUnitXYR ( un , 74 , 112 , 3 , false ) ;
5318: LD_VAR 0 2
5322: PPUSH
5323: LD_INT 74
5325: PPUSH
5326: LD_INT 112
5328: PPUSH
5329: LD_INT 3
5331: PPUSH
5332: LD_INT 0
5334: PPUSH
5335: CALL_OW 50
// end ;
5339: GO 5263
5341: POP
5342: POP
// AddResourceType ( GetBase ( kagan ) , mat_oil , 100 ) ;
5343: LD_INT 112
5345: PPUSH
5346: CALL_OW 274
5350: PPUSH
5351: LD_INT 2
5353: PPUSH
5354: LD_INT 100
5356: PPUSH
5357: CALL_OW 276
// repeat wait ( 0 0$1 ) ;
5361: LD_INT 35
5363: PPUSH
5364: CALL_OW 67
// for i in tmp do
5368: LD_ADDR_VAR 0 1
5372: PUSH
5373: LD_VAR 0 3
5377: PUSH
5378: FOR_IN
5379: IFFALSE 5461
// begin if IsDead ( i ) then
5381: LD_VAR 0 1
5385: PPUSH
5386: CALL_OW 301
5390: IFFALSE 5408
// tmp := tmp diff i ;
5392: LD_ADDR_VAR 0 3
5396: PUSH
5397: LD_VAR 0 3
5401: PUSH
5402: LD_VAR 0 1
5406: DIFF
5407: ST_TO_ADDR
// if not HasTask ( i ) and not Carry ( i ) then
5408: LD_VAR 0 1
5412: PPUSH
5413: CALL_OW 314
5417: NOT
5418: PUSH
5419: LD_VAR 0 1
5423: PPUSH
5424: CALL_OW 281
5428: NOT
5429: AND
5430: IFFALSE 5459
// begin ComTransport ( i , kagan , mat_oil ) ;
5432: LD_VAR 0 1
5436: PPUSH
5437: LD_INT 112
5439: PPUSH
5440: LD_INT 2
5442: PPUSH
5443: CALL_OW 151
// AddComGive ( i , beria ) ;
5447: LD_VAR 0 1
5451: PPUSH
5452: LD_INT 106
5454: PPUSH
5455: CALL_OW 221
// end ; end ;
5459: GO 5378
5461: POP
5462: POP
// until not tmp or IsDead ( kagan ) or IsDead ( beria ) ;
5463: LD_VAR 0 3
5467: NOT
5468: PUSH
5469: LD_INT 112
5471: PPUSH
5472: CALL_OW 301
5476: OR
5477: PUSH
5478: LD_INT 106
5480: PPUSH
5481: CALL_OW 301
5485: OR
5486: IFFALSE 5361
// end ;
5488: PPOPN 3
5490: END
// every 0 0$01 do var i , j , skr , cargo , dep ;
5491: GO 5493
5493: DISABLE
5494: LD_INT 0
5496: PPUSH
5497: PPUSH
5498: PPUSH
5499: PPUSH
5500: PPUSH
// begin enable ;
5501: ENABLE
// cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] , [ f_lives , 600 ] ] ) ;
5502: LD_ADDR_VAR 0 4
5506: PUSH
5507: LD_INT 22
5509: PUSH
5510: LD_INT 3
5512: PUSH
5513: EMPTY
5514: LIST
5515: LIST
5516: PUSH
5517: LD_INT 34
5519: PUSH
5520: LD_INT 51
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: PUSH
5527: LD_INT 24
5529: PUSH
5530: LD_INT 600
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PUSH
5537: EMPTY
5538: LIST
5539: LIST
5540: LIST
5541: PPUSH
5542: CALL_OW 69
5546: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5547: LD_ADDR_VAR 0 5
5551: PUSH
5552: LD_INT 22
5554: PUSH
5555: LD_INT 3
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: PUSH
5562: LD_INT 2
5564: PUSH
5565: LD_INT 30
5567: PUSH
5568: LD_INT 0
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: LD_INT 30
5577: PUSH
5578: LD_INT 1
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: LIST
5589: PUSH
5590: EMPTY
5591: LIST
5592: LIST
5593: PPUSH
5594: CALL_OW 69
5598: ST_TO_ADDR
// skr = GetListOfCratesInArea ( ruCratesCollectArea ) ;
5599: LD_ADDR_VAR 0 3
5603: PUSH
5604: LD_INT 9
5606: PPUSH
5607: CALL_OW 435
5611: ST_TO_ADDR
// if not cargo or not skr or not dep then
5612: LD_VAR 0 4
5616: NOT
5617: PUSH
5618: LD_VAR 0 3
5622: NOT
5623: OR
5624: PUSH
5625: LD_VAR 0 5
5629: NOT
5630: OR
5631: IFFALSE 5635
// exit ;
5633: GO 5799
// for i in cargo do
5635: LD_ADDR_VAR 0 1
5639: PUSH
5640: LD_VAR 0 4
5644: PUSH
5645: FOR_IN
5646: IFFALSE 5797
// begin if not skr then
5648: LD_VAR 0 3
5652: NOT
5653: IFFALSE 5659
// exit ;
5655: POP
5656: POP
5657: GO 5799
// if not HasTask ( i ) then
5659: LD_VAR 0 1
5663: PPUSH
5664: CALL_OW 314
5668: NOT
5669: IFFALSE 5738
// begin ComCollect ( i , skr [ 1 ] , skr [ 2 ] ) ;
5671: LD_VAR 0 1
5675: PPUSH
5676: LD_VAR 0 3
5680: PUSH
5681: LD_INT 1
5683: ARRAY
5684: PPUSH
5685: LD_VAR 0 3
5689: PUSH
5690: LD_INT 2
5692: ARRAY
5693: PPUSH
5694: CALL_OW 117
// for j := 1 to 2 do
5698: LD_ADDR_VAR 0 2
5702: PUSH
5703: DOUBLE
5704: LD_INT 1
5706: DEC
5707: ST_TO_ADDR
5708: LD_INT 2
5710: PUSH
5711: FOR_TO
5712: IFFALSE 5734
// skr := Delete ( skr , 1 ) ;
5714: LD_ADDR_VAR 0 3
5718: PUSH
5719: LD_VAR 0 3
5723: PPUSH
5724: LD_INT 1
5726: PPUSH
5727: CALL_OW 3
5731: ST_TO_ADDR
5732: GO 5711
5734: POP
5735: POP
// end else
5736: GO 5795
// if GetFuel ( i ) < 3 and GetDistUnits ( i , NearestUnitToUnit ( dep , i ) ) < 6 then
5738: LD_VAR 0 1
5742: PPUSH
5743: CALL_OW 261
5747: PUSH
5748: LD_INT 3
5750: LESS
5751: PUSH
5752: LD_VAR 0 1
5756: PPUSH
5757: LD_VAR 0 5
5761: PPUSH
5762: LD_VAR 0 1
5766: PPUSH
5767: CALL_OW 74
5771: PPUSH
5772: CALL_OW 296
5776: PUSH
5777: LD_INT 6
5779: LESS
5780: AND
5781: IFFALSE 5795
// SetFuel ( i , 100 ) ;
5783: LD_VAR 0 1
5787: PPUSH
5788: LD_INT 100
5790: PPUSH
5791: CALL_OW 240
// end ;
5795: GO 5645
5797: POP
5798: POP
// end ;
5799: PPOPN 5
5801: END
// export function SendSupport ; var i , un ; begin
5802: LD_INT 0
5804: PPUSH
5805: PPUSH
5806: PPUSH
// uc_nation := 3 ;
5807: LD_ADDR_OWVAR 21
5811: PUSH
5812: LD_INT 3
5814: ST_TO_ADDR
// uc_side := 3 ;
5815: LD_ADDR_OWVAR 20
5819: PUSH
5820: LD_INT 3
5822: ST_TO_ADDR
// ResetHc ;
5823: CALL 68550 0 0
// for i := 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
5827: LD_ADDR_VAR 0 2
5831: PUSH
5832: DOUBLE
5833: LD_INT 1
5835: DEC
5836: ST_TO_ADDR
5837: LD_INT 3
5839: PUSH
5840: LD_INT 3
5842: PUSH
5843: LD_INT 4
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: LIST
5850: PUSH
5851: LD_OWVAR 67
5855: ARRAY
5856: PUSH
5857: FOR_TO
5858: IFFALSE 5932
// begin PrepareHuman ( false , 1 , Difficulty ) ;
5860: LD_INT 0
5862: PPUSH
5863: LD_INT 1
5865: PPUSH
5866: LD_OWVAR 67
5870: PPUSH
5871: CALL_OW 380
// un := CreateHuman ;
5875: LD_ADDR_VAR 0 3
5879: PUSH
5880: CALL_OW 44
5884: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
5885: LD_VAR 0 3
5889: PPUSH
5890: LD_INT 107
5892: PPUSH
5893: LD_INT 95
5895: PPUSH
5896: LD_INT 4
5898: PPUSH
5899: LD_INT 0
5901: PPUSH
5902: CALL_OW 50
// ComAgressiveMove ( un , 56 , 27 ) ;
5906: LD_VAR 0 3
5910: PPUSH
5911: LD_INT 56
5913: PPUSH
5914: LD_INT 27
5916: PPUSH
5917: CALL_OW 114
// AddComHold ( un ) ;
5921: LD_VAR 0 3
5925: PPUSH
5926: CALL_OW 200
// end ;
5930: GO 5857
5932: POP
5933: POP
// PrepareHuman ( false , 4 , Difficulty ) ;
5934: LD_INT 0
5936: PPUSH
5937: LD_INT 4
5939: PPUSH
5940: LD_OWVAR 67
5944: PPUSH
5945: CALL_OW 380
// un := CreateHuman ;
5949: LD_ADDR_VAR 0 3
5953: PUSH
5954: CALL_OW 44
5958: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
5959: LD_VAR 0 3
5963: PPUSH
5964: LD_INT 107
5966: PPUSH
5967: LD_INT 95
5969: PPUSH
5970: LD_INT 4
5972: PPUSH
5973: LD_INT 0
5975: PPUSH
5976: CALL_OW 50
// ComMoveXY ( un , 59 , 25 ) ;
5980: LD_VAR 0 3
5984: PPUSH
5985: LD_INT 59
5987: PPUSH
5988: LD_INT 25
5990: PPUSH
5991: CALL_OW 111
// if Difficulty > 1 then
5995: LD_OWVAR 67
5999: PUSH
6000: LD_INT 1
6002: GREATER
6003: IFFALSE 6112
// begin for i := 1 to [ 2 , 2 , 3 ] [ Difficulty ] do
6005: LD_ADDR_VAR 0 2
6009: PUSH
6010: DOUBLE
6011: LD_INT 1
6013: DEC
6014: ST_TO_ADDR
6015: LD_INT 2
6017: PUSH
6018: LD_INT 2
6020: PUSH
6021: LD_INT 3
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: LIST
6028: PUSH
6029: LD_OWVAR 67
6033: ARRAY
6034: PUSH
6035: FOR_TO
6036: IFFALSE 6110
// begin PrepareHuman ( false , 1 , Difficulty ) ;
6038: LD_INT 0
6040: PPUSH
6041: LD_INT 1
6043: PPUSH
6044: LD_OWVAR 67
6048: PPUSH
6049: CALL_OW 380
// un := CreateHuman ;
6053: LD_ADDR_VAR 0 3
6057: PUSH
6058: CALL_OW 44
6062: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
6063: LD_VAR 0 3
6067: PPUSH
6068: LD_INT 107
6070: PPUSH
6071: LD_INT 95
6073: PPUSH
6074: LD_INT 4
6076: PPUSH
6077: LD_INT 0
6079: PPUSH
6080: CALL_OW 50
// ComAgressiveMove ( un , 45 , 76 ) ;
6084: LD_VAR 0 3
6088: PPUSH
6089: LD_INT 45
6091: PPUSH
6092: LD_INT 76
6094: PPUSH
6095: CALL_OW 114
// AddComHold ( un ) ;
6099: LD_VAR 0 3
6103: PPUSH
6104: CALL_OW 200
// end ;
6108: GO 6035
6110: POP
6111: POP
// end ; end ;
6112: LD_VAR 0 1
6116: RET
// every 6 6$00 trigger tick >= 20 20$00 and Difficulty > 1 and russianOmicronAttackers > 4 and not retreatFromOmicron do var i , un , tmp , path ;
6117: LD_OWVAR 1
6121: PUSH
6122: LD_INT 42000
6124: GREATEREQUAL
6125: PUSH
6126: LD_OWVAR 67
6130: PUSH
6131: LD_INT 1
6133: GREATER
6134: AND
6135: PUSH
6136: LD_EXP 24
6140: PUSH
6141: LD_INT 4
6143: GREATER
6144: AND
6145: PUSH
6146: LD_EXP 8
6150: NOT
6151: AND
6152: IFFALSE 6445
6154: GO 6156
6156: DISABLE
6157: LD_INT 0
6159: PPUSH
6160: PPUSH
6161: PPUSH
6162: PPUSH
// begin enable ;
6163: ENABLE
// tmp := [ ] ;
6164: LD_ADDR_VAR 0 3
6168: PUSH
6169: EMPTY
6170: ST_TO_ADDR
// path := [ [ 55 , 91 ] , [ 47 , 80 ] , [ 39 , 67 ] , [ 36 , 60 ] , [ 33 , 52 ] ] ;
6171: LD_ADDR_VAR 0 4
6175: PUSH
6176: LD_INT 55
6178: PUSH
6179: LD_INT 91
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: LD_INT 47
6188: PUSH
6189: LD_INT 80
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: LD_INT 39
6198: PUSH
6199: LD_INT 67
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: PUSH
6206: LD_INT 36
6208: PUSH
6209: LD_INT 60
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: PUSH
6216: LD_INT 33
6218: PUSH
6219: LD_INT 52
6221: PUSH
6222: EMPTY
6223: LIST
6224: LIST
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty - 1 ] do
6233: LD_ADDR_VAR 0 1
6237: PUSH
6238: DOUBLE
6239: LD_INT 1
6241: DEC
6242: ST_TO_ADDR
6243: LD_INT 2
6245: PUSH
6246: LD_INT 3
6248: PUSH
6249: LD_INT 3
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: LIST
6256: PUSH
6257: LD_OWVAR 67
6261: PUSH
6262: LD_INT 1
6264: MINUS
6265: ARRAY
6266: PUSH
6267: FOR_TO
6268: IFFALSE 6419
// begin uc_side := 3 ;
6270: LD_ADDR_OWVAR 20
6274: PUSH
6275: LD_INT 3
6277: ST_TO_ADDR
// uc_nation := 3 ;
6278: LD_ADDR_OWVAR 21
6282: PUSH
6283: LD_INT 3
6285: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gun ] [ i mod 3 + 1 ] , 100 ) ;
6286: LD_INT 22
6288: PPUSH
6289: LD_INT 1
6291: PPUSH
6292: LD_INT 1
6294: PPUSH
6295: LD_INT 42
6297: PUSH
6298: LD_INT 42
6300: PUSH
6301: LD_INT 44
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: LIST
6308: PUSH
6309: LD_VAR 0 1
6313: PUSH
6314: LD_INT 3
6316: MOD
6317: PUSH
6318: LD_INT 1
6320: PLUS
6321: ARRAY
6322: PPUSH
6323: LD_INT 100
6325: PPUSH
6326: CALL 35664 0 5
// un := CreateVehicle ;
6330: LD_ADDR_VAR 0 2
6334: PUSH
6335: CALL_OW 45
6339: ST_TO_ADDR
// PlaceUnitXYR ( un , 57 , 103 , 4 , false ) ;
6340: LD_VAR 0 2
6344: PPUSH
6345: LD_INT 57
6347: PPUSH
6348: LD_INT 103
6350: PPUSH
6351: LD_INT 4
6353: PPUSH
6354: LD_INT 0
6356: PPUSH
6357: CALL_OW 50
// tmp := Replace ( tmp , tmp + 1 , un ) ;
6361: LD_ADDR_VAR 0 3
6365: PUSH
6366: LD_VAR 0 3
6370: PPUSH
6371: LD_VAR 0 3
6375: PUSH
6376: LD_INT 1
6378: PLUS
6379: PPUSH
6380: LD_VAR 0 2
6384: PPUSH
6385: CALL_OW 1
6389: ST_TO_ADDR
// PrepareHuman ( false , 3 , 5 ) ;
6390: LD_INT 0
6392: PPUSH
6393: LD_INT 3
6395: PPUSH
6396: LD_INT 5
6398: PPUSH
6399: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
6403: CALL_OW 44
6407: PPUSH
6408: LD_VAR 0 2
6412: PPUSH
6413: CALL_OW 52
// end ;
6417: GO 6267
6419: POP
6420: POP
// repeat wait ( 0 0$1 ) ;
6421: LD_INT 35
6423: PPUSH
6424: CALL_OW 67
// until not AgressiveMove ( tmp , path ) ;
6428: LD_VAR 0 3
6432: PPUSH
6433: LD_VAR 0 4
6437: PPUSH
6438: CALL 70629 0 2
6442: NOT
6443: IFFALSE 6421
// end ;
6445: PPOPN 4
6447: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
6448: LD_INT 3
6450: PUSH
6451: LD_INT 22
6453: PUSH
6454: LD_INT 1
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: PUSH
6465: LD_INT 32
6467: PUSH
6468: LD_INT 1
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: PPUSH
6479: CALL_OW 69
6483: IFFALSE 6567
6485: GO 6487
6487: DISABLE
6488: LD_INT 0
6490: PPUSH
// begin enable ;
6491: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
6492: LD_ADDR_VAR 0 1
6496: PUSH
6497: LD_INT 3
6499: PUSH
6500: LD_INT 22
6502: PUSH
6503: LD_INT 1
6505: PUSH
6506: EMPTY
6507: LIST
6508: LIST
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: PUSH
6514: LD_INT 32
6516: PUSH
6517: LD_INT 1
6519: PUSH
6520: EMPTY
6521: LIST
6522: LIST
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: PPUSH
6528: CALL_OW 69
6532: PUSH
6533: FOR_IN
6534: IFFALSE 6565
// if GetFuel ( i ) < 3 then
6536: LD_VAR 0 1
6540: PPUSH
6541: CALL_OW 261
6545: PUSH
6546: LD_INT 3
6548: LESS
6549: IFFALSE 6563
// SetFuel ( i , 3 ) ;
6551: LD_VAR 0 1
6555: PPUSH
6556: LD_INT 3
6558: PPUSH
6559: CALL_OW 240
6563: GO 6533
6565: POP
6566: POP
// end ; end_of_file
6567: PPOPN 1
6569: END
// export function PrepareArabian ; var i , j , un , veh , xy ; begin
6570: LD_INT 0
6572: PPUSH
6573: PPUSH
6574: PPUSH
6575: PPUSH
6576: PPUSH
6577: PPUSH
// uc_side := 2 ;
6578: LD_ADDR_OWVAR 20
6582: PUSH
6583: LD_INT 2
6585: ST_TO_ADDR
// uc_nation := 2 ;
6586: LD_ADDR_OWVAR 21
6590: PUSH
6591: LD_INT 2
6593: ST_TO_ADDR
// InitVc ;
6594: CALL_OW 20
// ResetHc ;
6598: CALL 68550 0 0
// for j := 1 to 2 do
6602: LD_ADDR_VAR 0 3
6606: PUSH
6607: DOUBLE
6608: LD_INT 1
6610: DEC
6611: ST_TO_ADDR
6612: LD_INT 2
6614: PUSH
6615: FOR_TO
6616: IFFALSE 6840
// begin xy := [ [ 178 , 3 ] , [ 268 , 121 ] ] [ j ] ;
6618: LD_ADDR_VAR 0 6
6622: PUSH
6623: LD_INT 178
6625: PUSH
6626: LD_INT 3
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: PUSH
6633: LD_INT 268
6635: PUSH
6636: LD_INT 121
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: PUSH
6647: LD_VAR 0 3
6651: ARRAY
6652: ST_TO_ADDR
// for i := 1 to 8 do
6653: LD_ADDR_VAR 0 2
6657: PUSH
6658: DOUBLE
6659: LD_INT 1
6661: DEC
6662: ST_TO_ADDR
6663: LD_INT 8
6665: PUSH
6666: FOR_TO
6667: IFFALSE 6836
// begin uc_side := 2 ;
6669: LD_ADDR_OWVAR 20
6673: PUSH
6674: LD_INT 2
6676: ST_TO_ADDR
// uc_nation := 2 ;
6677: LD_ADDR_OWVAR 21
6681: PUSH
6682: LD_INT 2
6684: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_flame_thrower , ar_gun ] [ rand ( 1 , 2 ) ] , 99 ) ;
6685: LD_INT 14
6687: PPUSH
6688: LD_INT 1
6690: PPUSH
6691: LD_INT 1
6693: PPUSH
6694: LD_INT 26
6696: PUSH
6697: LD_INT 27
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: PUSH
6704: LD_INT 1
6706: PPUSH
6707: LD_INT 2
6709: PPUSH
6710: CALL_OW 12
6714: ARRAY
6715: PPUSH
6716: LD_INT 99
6718: PPUSH
6719: CALL 35664 0 5
// veh := CreateVehicle ;
6723: LD_ADDR_VAR 0 5
6727: PUSH
6728: CALL_OW 45
6732: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6733: LD_VAR 0 5
6737: PPUSH
6738: LD_INT 3
6740: PPUSH
6741: CALL_OW 233
// PlaceUnitXY ( veh , xy [ 1 ] , xy [ 2 ] , false ) ;
6745: LD_VAR 0 5
6749: PPUSH
6750: LD_VAR 0 6
6754: PUSH
6755: LD_INT 1
6757: ARRAY
6758: PPUSH
6759: LD_VAR 0 6
6763: PUSH
6764: LD_INT 2
6766: ARRAY
6767: PPUSH
6768: LD_INT 0
6770: PPUSH
6771: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
6775: LD_INT 0
6777: PPUSH
6778: LD_INT 3
6780: PPUSH
6781: LD_INT 6
6783: PPUSH
6784: CALL_OW 380
// un := CreateHuman ;
6788: LD_ADDR_VAR 0 4
6792: PUSH
6793: CALL_OW 44
6797: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6798: LD_VAR 0 4
6802: PPUSH
6803: LD_VAR 0 5
6807: PPUSH
6808: CALL_OW 52
// ComMoveXY ( un , 186 , 17 ) ;
6812: LD_VAR 0 4
6816: PPUSH
6817: LD_INT 186
6819: PPUSH
6820: LD_INT 17
6822: PPUSH
6823: CALL_OW 111
// wait ( 0 0$2 ) ;
6827: LD_INT 70
6829: PPUSH
6830: CALL_OW 67
// end ;
6834: GO 6666
6836: POP
6837: POP
// end ;
6838: GO 6615
6840: POP
6841: POP
// for i := 1 to 10 do
6842: LD_ADDR_VAR 0 2
6846: PUSH
6847: DOUBLE
6848: LD_INT 1
6850: DEC
6851: ST_TO_ADDR
6852: LD_INT 10
6854: PUSH
6855: FOR_TO
6856: IFFALSE 6923
// begin PrepareHuman ( false , 1 , 5 ) ;
6858: LD_INT 0
6860: PPUSH
6861: LD_INT 1
6863: PPUSH
6864: LD_INT 5
6866: PPUSH
6867: CALL_OW 380
// un := CreateHuman ;
6871: LD_ADDR_VAR 0 4
6875: PUSH
6876: CALL_OW 44
6880: ST_TO_ADDR
// PlaceUnitXY ( un , 178 , 3 , false ) ;
6881: LD_VAR 0 4
6885: PPUSH
6886: LD_INT 178
6888: PPUSH
6889: LD_INT 3
6891: PPUSH
6892: LD_INT 0
6894: PPUSH
6895: CALL_OW 48
// ComMoveXY ( un , 186 , 17 ) ;
6899: LD_VAR 0 4
6903: PPUSH
6904: LD_INT 186
6906: PPUSH
6907: LD_INT 17
6909: PPUSH
6910: CALL_OW 111
// wait ( 0 0$2 ) ;
6914: LD_INT 70
6916: PPUSH
6917: CALL_OW 67
// end ;
6921: GO 6855
6923: POP
6924: POP
// end ;
6925: LD_VAR 0 1
6929: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] ] ) do var i , enemy ;
6930: LD_INT 22
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: LD_INT 50
6942: PUSH
6943: EMPTY
6944: LIST
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PPUSH
6950: CALL_OW 69
6954: IFFALSE 7090
6956: GO 6958
6958: DISABLE
6959: LD_INT 0
6961: PPUSH
6962: PPUSH
// begin enable ;
6963: ENABLE
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6964: LD_ADDR_VAR 0 2
6968: PUSH
6969: LD_INT 2
6971: PUSH
6972: LD_INT 22
6974: PUSH
6975: LD_INT 3
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: LD_INT 22
6984: PUSH
6985: LD_INT 6
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: LIST
6996: PPUSH
6997: CALL_OW 69
7001: ST_TO_ADDR
// if not enemy then
7002: LD_VAR 0 2
7006: NOT
7007: IFFALSE 7029
// enemy := FilterAllUnits ( [ f_side , 1 ] ) ;
7009: LD_ADDR_VAR 0 2
7013: PUSH
7014: LD_INT 22
7016: PUSH
7017: LD_INT 1
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PPUSH
7024: CALL_OW 69
7028: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] ] ) do
7029: LD_ADDR_VAR 0 1
7033: PUSH
7034: LD_INT 22
7036: PUSH
7037: LD_INT 2
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: LD_INT 50
7046: PUSH
7047: EMPTY
7048: LIST
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PPUSH
7054: CALL_OW 69
7058: PUSH
7059: FOR_IN
7060: IFFALSE 7088
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7062: LD_VAR 0 1
7066: PPUSH
7067: LD_VAR 0 2
7071: PPUSH
7072: LD_VAR 0 1
7076: PPUSH
7077: CALL_OW 74
7081: PPUSH
7082: CALL_OW 115
7086: GO 7059
7088: POP
7089: POP
// end ; end_of_file
7090: PPOPN 2
7092: END
// export function Action ; begin
7093: LD_INT 0
7095: PPUSH
// InGameOn ;
7096: CALL_OW 8
// CenterNowOnXY ( 106 , 3 ) ;
7100: LD_INT 106
7102: PPUSH
7103: LD_INT 3
7105: PPUSH
7106: CALL_OW 86
// wait ( 0 0$2 ) ;
7110: LD_INT 70
7112: PPUSH
7113: CALL_OW 67
// ChangeMissionObjectives ( target1 ) ;
7117: LD_STRING target1
7119: PPUSH
7120: CALL_OW 337
// InGameOff ;
7124: CALL_OW 9
// SaveForQuickRestart ;
7128: CALL_OW 22
// end ;
7132: LD_VAR 0 1
7136: RET
// every 0 0$1 trigger IsDead ( omikron ) and not retreatFromOmicron do
7137: LD_INT 64
7139: PPUSH
7140: CALL_OW 301
7144: PUSH
7145: LD_EXP 8
7149: NOT
7150: AND
7151: IFFALSE 7171
7153: GO 7155
7155: DISABLE
// begin omicronFall := true ;
7156: LD_ADDR_EXP 7
7160: PUSH
7161: LD_INT 1
7163: ST_TO_ADDR
// YouLost ( omi ) ;
7164: LD_STRING omi
7166: PPUSH
7167: CALL_OW 104
// end ;
7171: END
// every 0 0$1 trigger ( See ( 4 , Sikorski ) or See ( 4 , IsInUnit ( Sikorski ) ) ) and IsOk ( omikron ) do var i , tmp , speaker , whereHeWas ;
7172: LD_INT 4
7174: PPUSH
7175: LD_EXP 14
7179: PPUSH
7180: CALL_OW 292
7184: PUSH
7185: LD_INT 4
7187: PPUSH
7188: LD_EXP 14
7192: PPUSH
7193: CALL_OW 310
7197: PPUSH
7198: CALL_OW 292
7202: OR
7203: PUSH
7204: LD_INT 64
7206: PPUSH
7207: CALL_OW 302
7211: AND
7212: IFFALSE 7765
7214: GO 7216
7216: DISABLE
7217: LD_INT 0
7219: PPUSH
7220: PPUSH
7221: PPUSH
7222: PPUSH
// begin InGameOn ;
7223: CALL_OW 8
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
7227: LD_ADDR_VAR 0 2
7231: PUSH
7232: LD_INT 22
7234: PUSH
7235: LD_INT 4
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PPUSH
7242: CALL_OW 69
7246: ST_TO_ADDR
// speaker := UnitFilter ( tmp , [ f_sex , sex_male ] ) [ 1 ] ;
7247: LD_ADDR_VAR 0 3
7251: PUSH
7252: LD_VAR 0 2
7256: PPUSH
7257: LD_INT 26
7259: PUSH
7260: LD_INT 1
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PPUSH
7267: CALL_OW 72
7271: PUSH
7272: LD_INT 1
7274: ARRAY
7275: ST_TO_ADDR
// for i in tmp do
7276: LD_ADDR_VAR 0 1
7280: PUSH
7281: LD_VAR 0 2
7285: PUSH
7286: FOR_IN
7287: IFFALSE 7303
// SetSide ( i , 1 ) ;
7289: LD_VAR 0 1
7293: PPUSH
7294: LD_INT 1
7296: PPUSH
7297: CALL_OW 235
7301: GO 7286
7303: POP
7304: POP
// ComMoveXY ( Sikorski , 37 , 40 ) ;
7305: LD_EXP 14
7309: PPUSH
7310: LD_INT 37
7312: PPUSH
7313: LD_INT 40
7315: PPUSH
7316: CALL_OW 111
// wait ( 0 0$5 ) ;
7320: LD_INT 175
7322: PPUSH
7323: CALL_OW 67
// ComExit ( Sikorski ) ;
7327: LD_EXP 14
7331: PPUSH
7332: CALL 68423 0 1
// AddComMoveXY ( Sikorski , 37 , 40 ) ;
7336: LD_EXP 14
7340: PPUSH
7341: LD_INT 37
7343: PPUSH
7344: LD_INT 40
7346: PPUSH
7347: CALL_OW 171
// CenterOnUnits ( Sikorski ) ;
7351: LD_EXP 14
7355: PPUSH
7356: CALL_OW 85
// wait ( 0 0$2 ) ;
7360: LD_INT 70
7362: PPUSH
7363: CALL_OW 67
// whereHeWas := ComExit ( speaker ) ;
7367: LD_ADDR_VAR 0 4
7371: PUSH
7372: LD_VAR 0 3
7376: PPUSH
7377: CALL 68423 0 1
7381: ST_TO_ADDR
// AddComMoveUnit ( speaker , Sikorski ) ;
7382: LD_VAR 0 3
7386: PPUSH
7387: LD_EXP 14
7391: PPUSH
7392: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
7396: LD_INT 35
7398: PPUSH
7399: CALL_OW 67
// until GetDistUnits ( speaker , Sikorski ) < 5 and not IsInUnit ( Sikorski ) ;
7403: LD_VAR 0 3
7407: PPUSH
7408: LD_EXP 14
7412: PPUSH
7413: CALL_OW 296
7417: PUSH
7418: LD_INT 5
7420: LESS
7421: PUSH
7422: LD_EXP 14
7426: PPUSH
7427: CALL_OW 310
7431: NOT
7432: AND
7433: IFFALSE 7396
// ComTurnUnit ( Sikorski , speaker ) ;
7435: LD_EXP 14
7439: PPUSH
7440: LD_VAR 0 3
7444: PPUSH
7445: CALL_OW 119
// ComTurnUnit ( speaker , Sikorski ) ;
7449: LD_VAR 0 3
7453: PPUSH
7454: LD_EXP 14
7458: PPUSH
7459: CALL_OW 119
// CenterNowOnUnits ( Sikorski ) ;
7463: LD_EXP 14
7467: PPUSH
7468: CALL_OW 87
// Say ( Sikorski , DS-1 ) ;
7472: LD_EXP 14
7476: PPUSH
7477: LD_STRING DS-1
7479: PPUSH
7480: CALL_OW 88
// Say ( speaker , DP-1 ) ;
7484: LD_VAR 0 3
7488: PPUSH
7489: LD_STRING DP-1
7491: PPUSH
7492: CALL_OW 88
// Say ( Sikorski , DS-2 ) ;
7496: LD_EXP 14
7500: PPUSH
7501: LD_STRING DS-2
7503: PPUSH
7504: CALL_OW 88
// Say ( speaker , DP-2 ) ;
7508: LD_VAR 0 3
7512: PPUSH
7513: LD_STRING DP-2
7515: PPUSH
7516: CALL_OW 88
// Say ( Sikorski , DS-3 ) ;
7520: LD_EXP 14
7524: PPUSH
7525: LD_STRING DS-3
7527: PPUSH
7528: CALL_OW 88
// Say ( speaker , DP-3 ) ;
7532: LD_VAR 0 3
7536: PPUSH
7537: LD_STRING DP-3
7539: PPUSH
7540: CALL_OW 88
// Say ( Sikorski , DS-4 ) ;
7544: LD_EXP 14
7548: PPUSH
7549: LD_STRING DS-4
7551: PPUSH
7552: CALL_OW 88
// wait ( 0 0$1 ) ;
7556: LD_INT 35
7558: PPUSH
7559: CALL_OW 67
// if whereHeWas then
7563: LD_VAR 0 4
7567: IFFALSE 7583
// ComEnterUnit ( speaker , whereHeWas ) ;
7569: LD_VAR 0 3
7573: PPUSH
7574: LD_VAR 0 4
7578: PPUSH
7579: CALL_OW 120
// ComHold ( Sikorski ) ;
7583: LD_EXP 14
7587: PPUSH
7588: CALL_OW 140
// wait ( 0 0$1 ) ;
7592: LD_INT 35
7594: PPUSH
7595: CALL_OW 67
// SayRadio ( Harrison , DR-1 ) ;
7599: LD_EXP 15
7603: PPUSH
7604: LD_STRING DR-1
7606: PPUSH
7607: CALL_OW 94
// Say ( Sikorski , DS-5 ) ;
7611: LD_EXP 14
7615: PPUSH
7616: LD_STRING DS-5
7618: PPUSH
7619: CALL_OW 88
// SayRadio ( Harrison , DR-2 ) ;
7623: LD_EXP 15
7627: PPUSH
7628: LD_STRING DR-2
7630: PPUSH
7631: CALL_OW 94
// Say ( Sikorski , DS-6 ) ;
7635: LD_EXP 14
7639: PPUSH
7640: LD_STRING DS-6
7642: PPUSH
7643: CALL_OW 88
// SayRadio ( Harrison , DR-3 ) ;
7647: LD_EXP 15
7651: PPUSH
7652: LD_STRING DR-3
7654: PPUSH
7655: CALL_OW 94
// InGameOff ;
7659: CALL_OW 9
// ChangeMissionObjectives ( target2 ) ;
7663: LD_STRING target2
7665: PPUSH
7666: CALL_OW 337
// sikorskiInOmicron := true ;
7670: LD_ADDR_EXP 9
7674: PUSH
7675: LD_INT 1
7677: ST_TO_ADDR
// wait ( 0 0$2 ) ;
7678: LD_INT 70
7680: PPUSH
7681: CALL_OW 67
// Say ( Sikorski , DS-7 ) ;
7685: LD_EXP 14
7689: PPUSH
7690: LD_STRING DS-7
7692: PPUSH
7693: CALL_OW 88
// wait ( 3 3$00 ) ;
7697: LD_INT 6300
7699: PPUSH
7700: CALL_OW 67
// SayRadio ( Harrison , DRforce-5 ) ;
7704: LD_EXP 15
7708: PPUSH
7709: LD_STRING DRforce-5
7711: PPUSH
7712: CALL_OW 94
// wait ( 4 4$50 ) ;
7716: LD_INT 10150
7718: PPUSH
7719: CALL_OW 67
// FirstReinforcements ;
7723: CALL 7942 0 0
// wait ( rand ( 12 12$00 , 15 15$00 ) ) ;
7727: LD_INT 25200
7729: PPUSH
7730: LD_INT 31500
7732: PPUSH
7733: CALL_OW 12
7737: PPUSH
7738: CALL_OW 67
// SayRadio ( Harrison , DRforce-10 ) ;
7742: LD_EXP 15
7746: PPUSH
7747: LD_STRING DRforce-10
7749: PPUSH
7750: CALL_OW 94
// wait ( 9 9$50 ) ;
7754: LD_INT 20650
7756: PPUSH
7757: CALL_OW 67
// SecondReinforcements ;
7761: CALL 8785 0 0
// end ;
7765: PPOPN 4
7767: END
// every 0 0$1 trigger GetLives ( Sikorski ) < 1000 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
7768: LD_EXP 14
7772: PPUSH
7773: CALL_OW 256
7777: PUSH
7778: LD_INT 1000
7780: LESS
7781: PUSH
7782: LD_INT 22
7784: PUSH
7785: LD_INT 1
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: PUSH
7792: LD_INT 2
7794: PUSH
7795: LD_INT 101
7797: PUSH
7798: LD_INT 3
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PUSH
7805: LD_INT 101
7807: PUSH
7808: LD_INT 6
7810: PUSH
7811: EMPTY
7812: LIST
7813: LIST
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: LIST
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: PPUSH
7824: CALL_OW 69
7828: AND
7829: IFFALSE 7846
7831: GO 7833
7833: DISABLE
// Say ( Sikorski , DRus ) ;
7834: LD_EXP 14
7838: PPUSH
7839: LD_STRING DRus
7841: PPUSH
7842: CALL_OW 88
7846: END
// every 0 0$1 trigger tick >= [ 11 11$00 , 10 10$30 , 9 9$40 ] [ Difficulty ] do
7847: LD_OWVAR 1
7851: PUSH
7852: LD_INT 23100
7854: PUSH
7855: LD_INT 22050
7857: PUSH
7858: LD_INT 20300
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: LIST
7865: PUSH
7866: LD_OWVAR 67
7870: ARRAY
7871: GREATEREQUAL
7872: IFFALSE 7941
7874: GO 7876
7876: DISABLE
// begin SendSupport ;
7877: CALL 5802 0 0
// ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
7881: LD_EXP 24
7885: PPUSH
7886: LD_INT 21
7888: PUSH
7889: LD_INT 2
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: PPUSH
7896: CALL_OW 72
7900: PPUSH
7901: LD_INT 62
7903: PPUSH
7904: LD_INT 22
7906: PPUSH
7907: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
7911: LD_EXP 25
7915: PPUSH
7916: LD_INT 69
7918: PPUSH
7919: LD_INT 27
7921: PPUSH
7922: CALL_OW 111
// wait ( 1 1$00 ) ;
7926: LD_INT 2100
7928: PPUSH
7929: CALL_OW 67
// startAttackOnOmicron := true ;
7933: LD_ADDR_EXP 6
7937: PUSH
7938: LD_INT 1
7940: ST_TO_ADDR
// end ;
7941: END
// export function FirstReinforcements ; var i , un , tmp , spotted , xy ; begin
7942: LD_INT 0
7944: PPUSH
7945: PPUSH
7946: PPUSH
7947: PPUSH
7948: PPUSH
7949: PPUSH
// uc_side := 4 ;
7950: LD_ADDR_OWVAR 20
7954: PUSH
7955: LD_INT 4
7957: ST_TO_ADDR
// uc_nation := 1 ;
7958: LD_ADDR_OWVAR 21
7962: PUSH
7963: LD_INT 1
7965: ST_TO_ADDR
// tmp := [ ] ;
7966: LD_ADDR_VAR 0 4
7970: PUSH
7971: EMPTY
7972: ST_TO_ADDR
// ResetHc ;
7973: CALL 68550 0 0
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7977: LD_INT 2
7979: PPUSH
7980: LD_INT 1
7982: PPUSH
7983: LD_INT 1
7985: PPUSH
7986: LD_INT 4
7988: PPUSH
7989: LD_INT 77
7991: PPUSH
7992: CALL 35664 0 5
// un := CreateVehicle ;
7996: LD_ADDR_VAR 0 3
8000: PUSH
8001: CALL_OW 45
8005: ST_TO_ADDR
// tmp := tmp union un ;
8006: LD_ADDR_VAR 0 4
8010: PUSH
8011: LD_VAR 0 4
8015: PUSH
8016: LD_VAR 0 3
8020: UNION
8021: ST_TO_ADDR
// SetDir ( un , 2 ) ;
8022: LD_VAR 0 3
8026: PPUSH
8027: LD_INT 2
8029: PPUSH
8030: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
8034: LD_VAR 0 3
8038: PPUSH
8039: LD_INT 106
8041: PPUSH
8042: LD_INT 3
8044: PPUSH
8045: LD_INT 0
8047: PPUSH
8048: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
8052: LD_INT 0
8054: PPUSH
8055: LD_INT 3
8057: PPUSH
8058: LD_INT 2
8060: PPUSH
8061: CALL_OW 380
// un := CreateHuman ;
8065: LD_ADDR_VAR 0 3
8069: PUSH
8070: CALL_OW 44
8074: ST_TO_ADDR
// tmp := tmp union un ;
8075: LD_ADDR_VAR 0 4
8079: PUSH
8080: LD_VAR 0 4
8084: PUSH
8085: LD_VAR 0 3
8089: UNION
8090: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
8091: LD_VAR 0 3
8095: PPUSH
8096: LD_VAR 0 4
8100: PUSH
8101: LD_VAR 0 4
8105: PUSH
8106: LD_INT 1
8108: MINUS
8109: ARRAY
8110: PPUSH
8111: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
8115: LD_VAR 0 3
8119: PPUSH
8120: LD_INT 109
8122: PPUSH
8123: LD_INT 9
8125: PPUSH
8126: CALL_OW 111
// wait ( 0 0$1 ) ;
8130: LD_INT 35
8132: PPUSH
8133: CALL_OW 67
// for i := 1 to [ 2 , 2 , 1 ] [ Difficulty ] do
8137: LD_ADDR_VAR 0 2
8141: PUSH
8142: DOUBLE
8143: LD_INT 1
8145: DEC
8146: ST_TO_ADDR
8147: LD_INT 2
8149: PUSH
8150: LD_INT 2
8152: PUSH
8153: LD_INT 1
8155: PUSH
8156: EMPTY
8157: LIST
8158: LIST
8159: LIST
8160: PUSH
8161: LD_OWVAR 67
8165: ARRAY
8166: PUSH
8167: FOR_TO
8168: IFFALSE 8232
// begin PrepareHuman ( false , 1 , 2 ) ;
8170: LD_INT 0
8172: PPUSH
8173: LD_INT 1
8175: PPUSH
8176: LD_INT 2
8178: PPUSH
8179: CALL_OW 380
// un := CreateHuman ;
8183: LD_ADDR_VAR 0 3
8187: PUSH
8188: CALL_OW 44
8192: ST_TO_ADDR
// tmp := tmp union un ;
8193: LD_ADDR_VAR 0 4
8197: PUSH
8198: LD_VAR 0 4
8202: PUSH
8203: LD_VAR 0 3
8207: UNION
8208: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
8209: LD_VAR 0 3
8213: PPUSH
8214: LD_INT 105
8216: PPUSH
8217: LD_INT 2
8219: PPUSH
8220: LD_INT 2
8222: PPUSH
8223: LD_INT 0
8225: PPUSH
8226: CALL_OW 50
// end ;
8230: GO 8167
8232: POP
8233: POP
// PrepareHuman ( false , 4 , 2 ) ;
8234: LD_INT 0
8236: PPUSH
8237: LD_INT 4
8239: PPUSH
8240: LD_INT 2
8242: PPUSH
8243: CALL_OW 380
// un := CreateHuman ;
8247: LD_ADDR_VAR 0 3
8251: PUSH
8252: CALL_OW 44
8256: ST_TO_ADDR
// tmp := tmp union un ;
8257: LD_ADDR_VAR 0 4
8261: PUSH
8262: LD_VAR 0 4
8266: PUSH
8267: LD_VAR 0 3
8271: UNION
8272: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
8273: LD_VAR 0 3
8277: PPUSH
8278: LD_INT 105
8280: PPUSH
8281: LD_INT 2
8283: PPUSH
8284: LD_INT 2
8286: PPUSH
8287: LD_INT 0
8289: PPUSH
8290: CALL_OW 50
// ComAgressiveMove ( tmp , 26 , 35 ) ;
8294: LD_VAR 0 4
8298: PPUSH
8299: LD_INT 26
8301: PPUSH
8302: LD_INT 35
8304: PPUSH
8305: CALL_OW 114
// spotted := false ;
8309: LD_ADDR_VAR 0 5
8313: PUSH
8314: LD_INT 0
8316: ST_TO_ADDR
// xy := [ 0 , 0 ] ;
8317: LD_ADDR_VAR 0 6
8321: PUSH
8322: LD_INT 0
8324: PUSH
8325: LD_INT 0
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8332: LD_INT 35
8334: PPUSH
8335: CALL_OW 67
// if UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) and not spotted then
8339: LD_VAR 0 4
8343: PPUSH
8344: LD_INT 3
8346: PUSH
8347: LD_INT 24
8349: PUSH
8350: LD_INT 1000
8352: PUSH
8353: EMPTY
8354: LIST
8355: LIST
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: PPUSH
8361: CALL_OW 72
8365: PUSH
8366: LD_VAR 0 5
8370: NOT
8371: AND
8372: IFFALSE 8498
// begin spotted := true ;
8374: LD_ADDR_VAR 0 5
8378: PUSH
8379: LD_INT 1
8381: ST_TO_ADDR
// un := UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ;
8382: LD_ADDR_VAR 0 3
8386: PUSH
8387: LD_VAR 0 4
8391: PPUSH
8392: LD_INT 3
8394: PUSH
8395: LD_INT 24
8397: PUSH
8398: LD_INT 1000
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: PPUSH
8409: CALL_OW 72
8413: PUSH
8414: LD_INT 1
8416: ARRAY
8417: ST_TO_ADDR
// xy := [ GetX ( un ) , GetY ( un ) ] ;
8418: LD_ADDR_VAR 0 6
8422: PUSH
8423: LD_VAR 0 3
8427: PPUSH
8428: CALL_OW 250
8432: PUSH
8433: LD_VAR 0 3
8437: PPUSH
8438: CALL_OW 251
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: ST_TO_ADDR
// PlaceSeeing ( xy [ 1 ] , xy [ 2 ] , 1 , - 12 ) ;
8447: LD_VAR 0 6
8451: PUSH
8452: LD_INT 1
8454: ARRAY
8455: PPUSH
8456: LD_VAR 0 6
8460: PUSH
8461: LD_INT 2
8463: ARRAY
8464: PPUSH
8465: LD_INT 1
8467: PPUSH
8468: LD_INT 12
8470: NEG
8471: PPUSH
8472: CALL_OW 330
// CenterOnXY ( xy [ 1 ] , xy [ 2 ] ) ;
8476: LD_VAR 0 6
8480: PUSH
8481: LD_INT 1
8483: ARRAY
8484: PPUSH
8485: LD_VAR 0 6
8489: PUSH
8490: LD_INT 2
8492: ARRAY
8493: PPUSH
8494: CALL_OW 84
// end ; for i in tmp do
8498: LD_ADDR_VAR 0 2
8502: PUSH
8503: LD_VAR 0 4
8507: PUSH
8508: FOR_IN
8509: IFFALSE 8540
// if not HasTask ( i ) then
8511: LD_VAR 0 2
8515: PPUSH
8516: CALL_OW 314
8520: NOT
8521: IFFALSE 8538
// ComAgressiveMove ( i , 26 , 35 ) ;
8523: LD_VAR 0 2
8527: PPUSH
8528: LD_INT 26
8530: PPUSH
8531: LD_INT 35
8533: PPUSH
8534: CALL_OW 114
8538: GO 8508
8540: POP
8541: POP
// if not UnitFilter ( tmp , [ f_ok ] ) then
8542: LD_VAR 0 4
8546: PPUSH
8547: LD_INT 50
8549: PUSH
8550: EMPTY
8551: LIST
8552: PPUSH
8553: CALL_OW 72
8557: NOT
8558: IFFALSE 8593
// begin if spotted then
8560: LD_VAR 0 5
8564: IFFALSE 8591
// RemoveSeeing ( xy [ 1 ] , xy [ 2 ] , 1 ) ;
8566: LD_VAR 0 6
8570: PUSH
8571: LD_INT 1
8573: ARRAY
8574: PPUSH
8575: LD_VAR 0 6
8579: PUSH
8580: LD_INT 2
8582: ARRAY
8583: PPUSH
8584: LD_INT 1
8586: PPUSH
8587: CALL_OW 331
// exit ;
8591: GO 8780
// end ; until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) or See ( 4 , Sikorski ) ;
8593: LD_VAR 0 4
8597: PPUSH
8598: LD_INT 91
8600: PUSH
8601: LD_INT 64
8603: PUSH
8604: LD_INT 12
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: LIST
8611: PPUSH
8612: CALL_OW 72
8616: PUSH
8617: LD_INT 4
8619: PPUSH
8620: LD_EXP 14
8624: PPUSH
8625: CALL_OW 292
8629: OR
8630: IFFALSE 8332
// omicronSquad := omicronSquad union tmp ;
8632: LD_ADDR_EXP 13
8636: PUSH
8637: LD_EXP 13
8641: PUSH
8642: LD_VAR 0 4
8646: UNION
8647: ST_TO_ADDR
// if spotted then
8648: LD_VAR 0 5
8652: IFFALSE 8679
// RemoveSeeing ( xy [ 1 ] , xy [ 2 ] , 1 ) ;
8654: LD_VAR 0 6
8658: PUSH
8659: LD_INT 1
8661: ARRAY
8662: PPUSH
8663: LD_VAR 0 6
8667: PUSH
8668: LD_INT 2
8670: ARRAY
8671: PPUSH
8672: LD_INT 1
8674: PPUSH
8675: CALL_OW 331
// for i in tmp do
8679: LD_ADDR_VAR 0 2
8683: PUSH
8684: LD_VAR 0 4
8688: PUSH
8689: FOR_IN
8690: IFFALSE 8706
// SetSide ( i , 1 ) ;
8692: LD_VAR 0 2
8696: PPUSH
8697: LD_INT 1
8699: PPUSH
8700: CALL_OW 235
8704: GO 8689
8706: POP
8707: POP
// if UnitFilter ( tmp , [ [ f_sex , sex_male ] , [ f_ok ] ] ) then
8708: LD_VAR 0 4
8712: PPUSH
8713: LD_INT 26
8715: PUSH
8716: LD_INT 1
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: PUSH
8723: LD_INT 50
8725: PUSH
8726: EMPTY
8727: LIST
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: PPUSH
8733: CALL_OW 72
8737: IFFALSE 8780
// Say ( UnitFilter ( tmp , [ [ f_sex , sex_male ] , [ f_ok ] ] ) [ 1 ] , Dcargo ) ;
8739: LD_VAR 0 4
8743: PPUSH
8744: LD_INT 26
8746: PUSH
8747: LD_INT 1
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: PUSH
8754: LD_INT 50
8756: PUSH
8757: EMPTY
8758: LIST
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: PPUSH
8764: CALL_OW 72
8768: PUSH
8769: LD_INT 1
8771: ARRAY
8772: PPUSH
8773: LD_STRING Dcargo
8775: PPUSH
8776: CALL_OW 88
// end ;
8780: LD_VAR 0 1
8784: RET
// export function SecondReinforcements ; var un , veh , i ; begin
8785: LD_INT 0
8787: PPUSH
8788: PPUSH
8789: PPUSH
8790: PPUSH
// uc_side := 1 ;
8791: LD_ADDR_OWVAR 20
8795: PUSH
8796: LD_INT 1
8798: ST_TO_ADDR
// uc_nation := 1 ;
8799: LD_ADDR_OWVAR 21
8803: PUSH
8804: LD_INT 1
8806: ST_TO_ADDR
// ResetHc ;
8807: CALL 68550 0 0
// PrepareHuman ( false , 3 , 3 ) ;
8811: LD_INT 0
8813: PPUSH
8814: LD_INT 3
8816: PPUSH
8817: LD_INT 3
8819: PPUSH
8820: CALL_OW 380
// un := CreateHuman ;
8824: LD_ADDR_VAR 0 2
8828: PUSH
8829: CALL_OW 44
8833: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_double_gun , 90 ) ;
8834: LD_INT 3
8836: PPUSH
8837: LD_INT 1
8839: PPUSH
8840: LD_INT 1
8842: PPUSH
8843: LD_INT 5
8845: PPUSH
8846: LD_INT 90
8848: PPUSH
8849: CALL 35664 0 5
// veh := CreateVehicle ;
8853: LD_ADDR_VAR 0 3
8857: PUSH
8858: CALL_OW 45
8862: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8863: LD_VAR 0 3
8867: PPUSH
8868: LD_INT 2
8870: PPUSH
8871: CALL_OW 233
// PlaceUnitXYR ( veh , 83 , 154 , 10 , false ) ;
8875: LD_VAR 0 3
8879: PPUSH
8880: LD_INT 83
8882: PPUSH
8883: LD_INT 154
8885: PPUSH
8886: LD_INT 10
8888: PPUSH
8889: LD_INT 0
8891: PPUSH
8892: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
8896: LD_VAR 0 2
8900: PPUSH
8901: LD_VAR 0 3
8905: PPUSH
8906: CALL_OW 52
// for i := 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
8910: LD_ADDR_VAR 0 4
8914: PUSH
8915: DOUBLE
8916: LD_INT 1
8918: DEC
8919: ST_TO_ADDR
8920: LD_INT 4
8922: PUSH
8923: LD_INT 3
8925: PUSH
8926: LD_INT 3
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: LIST
8933: PUSH
8934: LD_OWVAR 67
8938: ARRAY
8939: PUSH
8940: FOR_TO
8941: IFFALSE 8989
// begin PrepareHuman ( false , 1 , 3 ) ;
8943: LD_INT 0
8945: PPUSH
8946: LD_INT 1
8948: PPUSH
8949: LD_INT 3
8951: PPUSH
8952: CALL_OW 380
// un := CreateHuman ;
8956: LD_ADDR_VAR 0 2
8960: PUSH
8961: CALL_OW 44
8965: ST_TO_ADDR
// PlaceUnitXYR ( un , 83 , 154 , 10 , false ) ;
8966: LD_VAR 0 2
8970: PPUSH
8971: LD_INT 83
8973: PPUSH
8974: LD_INT 154
8976: PPUSH
8977: LD_INT 10
8979: PPUSH
8980: LD_INT 0
8982: PPUSH
8983: CALL_OW 50
// end ;
8987: GO 8940
8989: POP
8990: POP
// PrepareHuman ( sex_male , 1 , 3 ) ;
8991: LD_INT 1
8993: PPUSH
8994: LD_INT 1
8996: PPUSH
8997: LD_INT 3
8999: PPUSH
9000: CALL_OW 380
// un := CreateHuman ;
9004: LD_ADDR_VAR 0 2
9008: PUSH
9009: CALL_OW 44
9013: ST_TO_ADDR
// PlaceUnitXYR ( un , 83 , 154 , 10 , false ) ;
9014: LD_VAR 0 2
9018: PPUSH
9019: LD_INT 83
9021: PPUSH
9022: LD_INT 154
9024: PPUSH
9025: LD_INT 10
9027: PPUSH
9028: LD_INT 0
9030: PPUSH
9031: CALL_OW 50
// SayRadio ( un , Dhelp ) ;
9035: LD_VAR 0 2
9039: PPUSH
9040: LD_STRING Dhelp
9042: PPUSH
9043: CALL_OW 94
// ResetHc ;
9047: CALL 68550 0 0
// end ;
9051: LD_VAR 0 1
9055: RET
// every 0 0$1 trigger russianAlert do var i , tmp , towers ;
9056: LD_EXP 5
9060: IFFALSE 9202
9062: GO 9064
9064: DISABLE
9065: LD_INT 0
9067: PPUSH
9068: PPUSH
9069: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_inside ] ] ) ;
9070: LD_ADDR_VAR 0 2
9074: PUSH
9075: LD_EXP 20
9079: PPUSH
9080: LD_INT 25
9082: PUSH
9083: LD_INT 1
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: PUSH
9090: LD_INT 54
9092: PUSH
9093: EMPTY
9094: LIST
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PPUSH
9100: CALL_OW 72
9104: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
9105: LD_ADDR_VAR 0 3
9109: PUSH
9110: LD_INT 22
9112: PUSH
9113: LD_INT 6
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PUSH
9120: LD_INT 30
9122: PUSH
9123: LD_INT 32
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: PPUSH
9134: CALL_OW 69
9138: ST_TO_ADDR
// for i := 1 to tmp do
9139: LD_ADDR_VAR 0 1
9143: PUSH
9144: DOUBLE
9145: LD_INT 1
9147: DEC
9148: ST_TO_ADDR
9149: LD_VAR 0 2
9153: PUSH
9154: FOR_TO
9155: IFFALSE 9200
// begin ComExitBuilding ( tmp [ i ] ) ;
9157: LD_VAR 0 2
9161: PUSH
9162: LD_VAR 0 1
9166: ARRAY
9167: PPUSH
9168: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , towers [ i ] ) ;
9172: LD_VAR 0 2
9176: PUSH
9177: LD_VAR 0 1
9181: ARRAY
9182: PPUSH
9183: LD_VAR 0 3
9187: PUSH
9188: LD_VAR 0 1
9192: ARRAY
9193: PPUSH
9194: CALL_OW 180
// end ;
9198: GO 9154
9200: POP
9201: POP
// end ;
9202: PPOPN 3
9204: END
// every 0 0$1 trigger russianAlert and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) do var i , noncombat ;
9205: LD_EXP 5
9209: PUSH
9210: LD_INT 22
9212: PUSH
9213: LD_INT 2
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: PUSH
9220: LD_INT 101
9222: PUSH
9223: LD_INT 6
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: PPUSH
9234: CALL_OW 69
9238: AND
9239: IFFALSE 9385
9241: GO 9243
9243: DISABLE
9244: LD_INT 0
9246: PPUSH
9247: PPUSH
// begin SayRadio ( Kurin , D9a-Kur-1 ) ;
9248: LD_EXP 16
9252: PPUSH
9253: LD_STRING D9a-Kur-1
9255: PPUSH
9256: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
9260: LD_EXP 19
9264: PPUSH
9265: LD_STRING D9a-Bur-1
9267: PPUSH
9268: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
9272: LD_EXP 16
9276: PPUSH
9277: LD_STRING D9a-Kur-2
9279: PPUSH
9280: CALL_OW 94
// retreatFromOmicron := true ;
9284: LD_ADDR_EXP 8
9288: PUSH
9289: LD_INT 1
9291: ST_TO_ADDR
// noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
9292: LD_ADDR_VAR 0 2
9296: PUSH
9297: LD_EXP 18
9301: PUSH
9302: LD_EXP 20
9306: PUSH
9307: LD_EXP 21
9311: UNION
9312: PPUSH
9313: LD_INT 3
9315: PUSH
9316: LD_INT 25
9318: PUSH
9319: LD_INT 1
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: PPUSH
9330: CALL_OW 72
9334: UNION
9335: ST_TO_ADDR
// for i in noncombat do
9336: LD_ADDR_VAR 0 1
9340: PUSH
9341: LD_VAR 0 2
9345: PUSH
9346: FOR_IN
9347: IFFALSE 9383
// begin if IsInUnit ( i ) then
9349: LD_VAR 0 1
9353: PPUSH
9354: CALL_OW 310
9358: IFFALSE 9369
// ComExitBuilding ( i ) ;
9360: LD_VAR 0 1
9364: PPUSH
9365: CALL_OW 122
// AddComMoveToArea ( i , westEscapeArea ) ;
9369: LD_VAR 0 1
9373: PPUSH
9374: LD_INT 4
9376: PPUSH
9377: CALL_OW 173
// end ;
9381: GO 9346
9383: POP
9384: POP
// end ;
9385: PPOPN 2
9387: END
// every 0 0$1 trigger tick > rand ( 20 20$00 , 30 30$00 ) do var un ;
9388: LD_OWVAR 1
9392: PUSH
9393: LD_INT 42000
9395: PPUSH
9396: LD_INT 63000
9398: PPUSH
9399: CALL_OW 12
9403: GREATER
9404: IFFALSE 9549
9406: GO 9408
9408: DISABLE
9409: LD_INT 0
9411: PPUSH
// begin uc_side := 4 ;
9412: LD_ADDR_OWVAR 20
9416: PUSH
9417: LD_INT 4
9419: ST_TO_ADDR
// uc_nation := 4 ;
9420: LD_ADDR_OWVAR 21
9424: PUSH
9425: LD_INT 4
9427: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 3 ) ;
9428: LD_INT 1
9430: PPUSH
9431: LD_INT 4
9433: PPUSH
9434: LD_INT 3
9436: PPUSH
9437: CALL_OW 380
// hc_name :=  ;
9441: LD_ADDR_OWVAR 26
9445: PUSH
9446: LD_STRING 
9448: ST_TO_ADDR
// un := CreateHuman ;
9449: LD_ADDR_VAR 0 1
9453: PUSH
9454: CALL_OW 44
9458: ST_TO_ADDR
// PlaceUnitXYR ( un , 161 , 162 , 3 , true ) ;
9459: LD_VAR 0 1
9463: PPUSH
9464: LD_INT 161
9466: PPUSH
9467: LD_INT 162
9469: PPUSH
9470: LD_INT 3
9472: PPUSH
9473: LD_INT 1
9475: PPUSH
9476: CALL_OW 50
// ResetHc ;
9480: CALL 68550 0 0
// wait ( 0 0$3 ) ;
9484: LD_INT 105
9486: PPUSH
9487: CALL_OW 67
// SayRadio ( un , Dun1 ) ;
9491: LD_VAR 0 1
9495: PPUSH
9496: LD_STRING Dun1
9498: PPUSH
9499: CALL_OW 94
// repeat wait ( 0 0$1 ) ;
9503: LD_INT 35
9505: PPUSH
9506: CALL_OW 67
// if IsDead ( un ) then
9510: LD_VAR 0 1
9514: PPUSH
9515: CALL_OW 301
9519: IFFALSE 9523
// exit ;
9521: GO 9549
// until See ( 1 , un ) ;
9523: LD_INT 1
9525: PPUSH
9526: LD_VAR 0 1
9530: PPUSH
9531: CALL_OW 292
9535: IFFALSE 9503
// SetSide ( un , 1 ) ;
9537: LD_VAR 0 1
9541: PPUSH
9542: LD_INT 1
9544: PPUSH
9545: CALL_OW 235
// end ;
9549: PPOPN 1
9551: END
// every 0 0$1 trigger tanksCounter >= 20 do
9552: LD_EXP 12
9556: PUSH
9557: LD_INT 20
9559: GREATEREQUAL
9560: IFFALSE 9572
9562: GO 9564
9564: DISABLE
// SetAchievement ( ACH_PANZERKNACKER ) ;
9565: LD_STRING ACH_PANZERKNACKER
9567: PPUSH
9568: CALL_OW 543
9572: END
// every 0 0$1 trigger tick > rand ( 45 45$00 , 52 52$00 ) do var un ;
9573: LD_OWVAR 1
9577: PUSH
9578: LD_INT 94500
9580: PPUSH
9581: LD_INT 109200
9583: PPUSH
9584: CALL_OW 12
9588: GREATER
9589: IFFALSE 9852
9591: GO 9593
9593: DISABLE
9594: LD_INT 0
9596: PPUSH
// begin PrepareArabian ;
9597: CALL 6570 0 0
// uc_side := 4 ;
9601: LD_ADDR_OWVAR 20
9605: PUSH
9606: LD_INT 4
9608: ST_TO_ADDR
// uc_nation := 1 ;
9609: LD_ADDR_OWVAR 21
9613: PUSH
9614: LD_INT 1
9616: ST_TO_ADDR
// ResetHc ;
9617: CALL 68550 0 0
// un := CreateHuman ;
9621: LD_ADDR_VAR 0 1
9625: PUSH
9626: CALL_OW 44
9630: ST_TO_ADDR
// SayRadio ( un , ar_come ) ;
9631: LD_VAR 0 1
9635: PPUSH
9636: LD_STRING ar_come
9638: PPUSH
9639: CALL_OW 94
// wait ( 0 0$20 ) ;
9643: LD_INT 700
9645: PPUSH
9646: CALL_OW 67
// SayRadio ( Harrison , DR-Back ) ;
9650: LD_EXP 15
9654: PPUSH
9655: LD_STRING DR-Back
9657: PPUSH
9658: CALL_OW 94
// ChangeMissionObjectives ( target3 ) ;
9662: LD_STRING target3
9664: PPUSH
9665: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
9669: LD_INT 10
9671: PPUSH
9672: LD_INT 1
9674: PPUSH
9675: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
9679: LD_INT 35
9681: PPUSH
9682: CALL_OW 67
// until IsInArea ( Sikorski , escapeArea ) or FilterUnitsInArea ( escapeArea , [ f_side , 1 ] ) ;
9686: LD_EXP 14
9690: PPUSH
9691: LD_INT 10
9693: PPUSH
9694: CALL_OW 308
9698: PUSH
9699: LD_INT 10
9701: PPUSH
9702: LD_INT 22
9704: PUSH
9705: LD_INT 1
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PPUSH
9712: CALL_OW 70
9716: OR
9717: IFFALSE 9679
// SayRadio ( Harrison , you_win ) ;
9719: LD_EXP 15
9723: PPUSH
9724: LD_STRING you_win
9726: PPUSH
9727: CALL_OW 94
// AddMedal ( med , 1 ) ;
9731: LD_STRING med
9733: PPUSH
9734: LD_INT 1
9736: PPUSH
9737: CALL_OW 101
// if ruLoseCounter > [ 27 , 32 , 36 ] [ Difficulty ] then
9741: LD_EXP 11
9745: PUSH
9746: LD_INT 27
9748: PUSH
9749: LD_INT 32
9751: PUSH
9752: LD_INT 36
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: LIST
9759: PUSH
9760: LD_OWVAR 67
9764: ARRAY
9765: GREATER
9766: IFFALSE 9780
// AddMedal ( ru , 1 ) else
9768: LD_STRING ru
9770: PPUSH
9771: LD_INT 1
9773: PPUSH
9774: CALL_OW 101
9778: GO 9791
// AddMedal ( ru , - 1 ) ;
9780: LD_STRING ru
9782: PPUSH
9783: LD_INT 1
9785: NEG
9786: PPUSH
9787: CALL_OW 101
// if usLoseCounter < [ 4 , 3 , 2 ] [ Difficulty ] then
9791: LD_EXP 10
9795: PUSH
9796: LD_INT 4
9798: PUSH
9799: LD_INT 3
9801: PUSH
9802: LD_INT 2
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: LIST
9809: PUSH
9810: LD_OWVAR 67
9814: ARRAY
9815: LESS
9816: IFFALSE 9830
// AddMedal ( pep , 1 ) else
9818: LD_STRING pep
9820: PPUSH
9821: LD_INT 1
9823: PPUSH
9824: CALL_OW 101
9828: GO 9841
// AddMedal ( pep , - 1 ) ;
9830: LD_STRING pep
9832: PPUSH
9833: LD_INT 1
9835: NEG
9836: PPUSH
9837: CALL_OW 101
// GiveMedals ( MAIN ) ;
9841: LD_STRING MAIN
9843: PPUSH
9844: CALL_OW 102
// YouWin ;
9848: CALL_OW 103
// end ; end_of_file
9852: PPOPN 1
9854: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
9855: LD_VAR 0 1
9859: PPUSH
9860: CALL 10711 0 1
// if un = Sikorski then
9864: LD_VAR 0 1
9868: PUSH
9869: LD_EXP 14
9873: EQUAL
9874: IFFALSE 9883
// YouLost ( sik ) ;
9876: LD_STRING sik
9878: PPUSH
9879: CALL_OW 104
// if un in russianOmicronAttackers then
9883: LD_VAR 0 1
9887: PUSH
9888: LD_EXP 24
9892: IN
9893: IFFALSE 9911
// russianOmicronAttackers := russianOmicronAttackers diff un ;
9895: LD_ADDR_EXP 24
9899: PUSH
9900: LD_EXP 24
9904: PUSH
9905: LD_VAR 0 1
9909: DIFF
9910: ST_TO_ADDR
// if un in russianCargo then
9911: LD_VAR 0 1
9915: PUSH
9916: LD_EXP 25
9920: IN
9921: IFFALSE 9939
// russianCargo := russianCargo diff un ;
9923: LD_ADDR_EXP 25
9927: PUSH
9928: LD_EXP 25
9932: PUSH
9933: LD_VAR 0 1
9937: DIFF
9938: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) then
9939: LD_VAR 0 1
9943: PUSH
9944: LD_INT 22
9946: PUSH
9947: LD_INT 3
9949: PUSH
9950: EMPTY
9951: LIST
9952: LIST
9953: PUSH
9954: LD_INT 34
9956: PUSH
9957: LD_INT 51
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: PPUSH
9968: CALL_OW 69
9972: IN
9973: IFFALSE 9982
// ProduceNew ( 1 ) ;
9975: LD_INT 1
9977: PPUSH
9978: CALL 4695 0 1
// if GetSide ( un ) in [ 1 , 4 ] and GetType ( un ) = unit_human and GetNation ( un ) = nation_american then
9982: LD_VAR 0 1
9986: PPUSH
9987: CALL_OW 255
9991: PUSH
9992: LD_INT 1
9994: PUSH
9995: LD_INT 4
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: IN
10002: PUSH
10003: LD_VAR 0 1
10007: PPUSH
10008: CALL_OW 247
10012: PUSH
10013: LD_INT 1
10015: EQUAL
10016: AND
10017: PUSH
10018: LD_VAR 0 1
10022: PPUSH
10023: CALL_OW 248
10027: PUSH
10028: LD_INT 1
10030: EQUAL
10031: AND
10032: IFFALSE 10048
// usLoseCounter := usLoseCounter + 1 ;
10034: LD_ADDR_EXP 10
10038: PUSH
10039: LD_EXP 10
10043: PUSH
10044: LD_INT 1
10046: PLUS
10047: ST_TO_ADDR
// end ;
10048: PPOPN 1
10050: END
// on VehicleConstructed ( veh , factory ) do begin SOS_VehicleConstructed ( veh , factory ) ;
10051: LD_VAR 0 1
10055: PPUSH
10056: LD_VAR 0 2
10060: PPUSH
10061: CALL 10831 0 2
// if GetSide ( factory ) <> 3 then
10065: LD_VAR 0 2
10069: PPUSH
10070: CALL_OW 255
10074: PUSH
10075: LD_INT 3
10077: NONEQUAL
10078: IFFALSE 10082
// exit ;
10080: GO 10144
// if GetWeapon ( veh ) = ru_cargo_bay then
10082: LD_VAR 0 1
10086: PPUSH
10087: CALL_OW 264
10091: PUSH
10092: LD_INT 51
10094: EQUAL
10095: IFFALSE 10099
// exit ;
10097: GO 10144
// russianOmicronAttackers := russianOmicronAttackers union [ veh , IsInUnit ( veh ) ] ;
10099: LD_ADDR_EXP 24
10103: PUSH
10104: LD_EXP 24
10108: PUSH
10109: LD_VAR 0 1
10113: PUSH
10114: LD_VAR 0 1
10118: PPUSH
10119: CALL_OW 310
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: UNION
10128: ST_TO_ADDR
// AddComAgressiveMove ( veh , 71 , 37 ) ;
10129: LD_VAR 0 1
10133: PPUSH
10134: LD_INT 71
10136: PPUSH
10137: LD_INT 37
10139: PPUSH
10140: CALL_OW 174
// end ;
10144: PPOPN 2
10146: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId in russianOmicronAttackers then
10147: LD_VAR 0 2
10151: PUSH
10152: LD_EXP 24
10156: IN
10157: IFFALSE 10175
// russianOmicronAttackers := russianOmicronAttackers diff oldId ;
10159: LD_ADDR_EXP 24
10163: PUSH
10164: LD_EXP 24
10168: PUSH
10169: LD_VAR 0 2
10173: DIFF
10174: ST_TO_ADDR
// if oldId in russianCargo then
10175: LD_VAR 0 2
10179: PUSH
10180: LD_EXP 25
10184: IN
10185: IFFALSE 10203
// russianCargo := russianCargo diff oldId ;
10187: LD_ADDR_EXP 25
10191: PUSH
10192: LD_EXP 25
10196: PUSH
10197: LD_VAR 0 2
10201: DIFF
10202: ST_TO_ADDR
// if newId in russianOmicronAttackers then
10203: LD_VAR 0 1
10207: PUSH
10208: LD_EXP 24
10212: IN
10213: IFFALSE 10231
// russianOmicronAttackers := russianOmicronAttackers diff newId ;
10215: LD_ADDR_EXP 24
10219: PUSH
10220: LD_EXP 24
10224: PUSH
10225: LD_VAR 0 1
10229: DIFF
10230: ST_TO_ADDR
// if newId in russianCargo then
10231: LD_VAR 0 1
10235: PUSH
10236: LD_EXP 25
10240: IN
10241: IFFALSE 10259
// russianCargo := russianCargo diff newId ;
10243: LD_ADDR_EXP 25
10247: PUSH
10248: LD_EXP 25
10252: PUSH
10253: LD_VAR 0 1
10257: DIFF
10258: ST_TO_ADDR
// end ;
10259: PPOPN 4
10261: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
10262: LD_VAR 0 1
10266: PPUSH
10267: LD_VAR 0 2
10271: PPUSH
10272: LD_VAR 0 3
10276: PPUSH
10277: CALL 10807 0 3
// if killerSide in [ 1 , 4 ] and GetSide ( un ) in [ 3 , 6 ] then
10281: LD_VAR 0 2
10285: PUSH
10286: LD_INT 1
10288: PUSH
10289: LD_INT 4
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: IN
10296: PUSH
10297: LD_VAR 0 1
10301: PPUSH
10302: CALL_OW 255
10306: PUSH
10307: LD_INT 3
10309: PUSH
10310: LD_INT 6
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: IN
10317: AND
10318: IFFALSE 10334
// ruLoseCounter := ruLoseCounter + 1 ;
10320: LD_ADDR_EXP 11
10324: PUSH
10325: LD_EXP 11
10329: PUSH
10330: LD_INT 1
10332: PLUS
10333: ST_TO_ADDR
// if killerSide in [ 1 , 4 ] and GetType ( un ) = unit_vehicle and GetSide ( un ) in [ 3 , 6 ] then
10334: LD_VAR 0 2
10338: PUSH
10339: LD_INT 1
10341: PUSH
10342: LD_INT 4
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: IN
10349: PUSH
10350: LD_VAR 0 1
10354: PPUSH
10355: CALL_OW 247
10359: PUSH
10360: LD_INT 2
10362: EQUAL
10363: AND
10364: PUSH
10365: LD_VAR 0 1
10369: PPUSH
10370: CALL_OW 255
10374: PUSH
10375: LD_INT 3
10377: PUSH
10378: LD_INT 6
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: IN
10385: AND
10386: IFFALSE 10402
// tanksCounter := tanksCounter + 1 ;
10388: LD_ADDR_EXP 12
10392: PUSH
10393: LD_EXP 12
10397: PUSH
10398: LD_INT 1
10400: PLUS
10401: ST_TO_ADDR
// end ;
10402: PPOPN 3
10404: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) in [ 3 , 6 ] then
10405: LD_VAR 0 1
10409: PPUSH
10410: CALL_OW 255
10414: PUSH
10415: LD_INT 3
10417: PUSH
10418: LD_INT 6
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: IN
10425: IFFALSE 10574
// begin ComRepairVehicle ( driver , veh ) ;
10427: LD_VAR 0 1
10431: PPUSH
10432: LD_VAR 0 2
10436: PPUSH
10437: CALL_OW 129
// repeat wait ( 0 0$1 ) ;
10441: LD_INT 35
10443: PPUSH
10444: CALL_OW 67
// until IsDead ( veh ) or IsDead ( driver ) or GetLives ( veh ) > 250 ;
10448: LD_VAR 0 2
10452: PPUSH
10453: CALL_OW 301
10457: PUSH
10458: LD_VAR 0 1
10462: PPUSH
10463: CALL_OW 301
10467: OR
10468: PUSH
10469: LD_VAR 0 2
10473: PPUSH
10474: CALL_OW 256
10478: PUSH
10479: LD_INT 250
10481: GREATER
10482: OR
10483: IFFALSE 10441
// if GetLives ( veh ) > 250 then
10485: LD_VAR 0 2
10489: PPUSH
10490: CALL_OW 256
10494: PUSH
10495: LD_INT 250
10497: GREATER
10498: IFFALSE 10574
// begin ComEnterUnit ( driver , veh ) ;
10500: LD_VAR 0 1
10504: PPUSH
10505: LD_VAR 0 2
10509: PPUSH
10510: CALL_OW 120
// AddComMoveXY ( driver , 71 , 29 ) ;
10514: LD_VAR 0 1
10518: PPUSH
10519: LD_INT 71
10521: PPUSH
10522: LD_INT 29
10524: PPUSH
10525: CALL_OW 171
// SetTag ( veh , 1 ) ;
10529: LD_VAR 0 2
10533: PPUSH
10534: LD_INT 1
10536: PPUSH
10537: CALL_OW 109
// if not veh in russianOmicronAttackers then
10541: LD_VAR 0 2
10545: PUSH
10546: LD_EXP 24
10550: IN
10551: NOT
10552: IFFALSE 10574
// russianOmicronAttackers := Join ( russianOmicronAttackers , veh ) ;
10554: LD_ADDR_EXP 24
10558: PUSH
10559: LD_EXP 24
10563: PPUSH
10564: LD_VAR 0 2
10568: PPUSH
10569: CALL 68025 0 2
10573: ST_TO_ADDR
// end ; end ; end ;
10574: PPOPN 4
10576: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10577: LD_VAR 0 1
10581: PPUSH
10582: CALL 10815 0 1
// end ; end_of_file
10586: PPOPN 1
10588: END
// every 1 1$35 trigger sikorskiInOmicron and GetResourceArea ( cratesSpawnArea , mat_cans ) < [ 18 , 15 , 12 ] [ Difficulty ] do
10589: LD_EXP 9
10593: PUSH
10594: LD_INT 6
10596: PPUSH
10597: LD_INT 1
10599: PPUSH
10600: CALL_OW 287
10604: PUSH
10605: LD_INT 18
10607: PUSH
10608: LD_INT 15
10610: PUSH
10611: LD_INT 12
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: LIST
10618: PUSH
10619: LD_OWVAR 67
10623: ARRAY
10624: LESS
10625: AND
10626: IFFALSE 10668
10628: GO 10630
10630: DISABLE
// begin enable ;
10631: ENABLE
// wait ( rand ( 0 0$10 , 0 0$30 ) ) ;
10632: LD_INT 350
10634: PPUSH
10635: LD_INT 1050
10637: PPUSH
10638: CALL_OW 12
10642: PPUSH
10643: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , cratesSpawnArea , true ) ;
10647: LD_INT 2
10649: PPUSH
10650: LD_INT 5
10652: PPUSH
10653: CALL_OW 12
10657: PPUSH
10658: LD_INT 6
10660: PPUSH
10661: LD_INT 1
10663: PPUSH
10664: CALL_OW 55
// end ;
10668: END
// every 1 1$25 trigger GetResourceArea ( ruCratesSpawnArea , mat_cans ) < 5 do
10669: LD_INT 7
10671: PPUSH
10672: LD_INT 1
10674: PPUSH
10675: CALL_OW 287
10679: PUSH
10680: LD_INT 5
10682: LESS
10683: IFFALSE 10710
10685: GO 10687
10687: DISABLE
// begin enable ;
10688: ENABLE
// CreateCratesArea ( rand ( 2 , 5 ) , ruCratesSpawnArea , true ) ;
10689: LD_INT 2
10691: PPUSH
10692: LD_INT 5
10694: PPUSH
10695: CALL_OW 12
10699: PPUSH
10700: LD_INT 7
10702: PPUSH
10703: LD_INT 1
10705: PPUSH
10706: CALL_OW 55
// end ; end_of_file end_of_file
10710: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
10711: LD_INT 0
10713: PPUSH
10714: PPUSH
10715: PPUSH
10716: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
10717: LD_VAR 0 1
10721: PPUSH
10722: CALL_OW 264
10726: PUSH
10727: LD_INT 91
10729: EQUAL
10730: IFFALSE 10802
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10732: LD_INT 68
10734: PPUSH
10735: LD_VAR 0 1
10739: PPUSH
10740: CALL_OW 255
10744: PPUSH
10745: CALL_OW 321
10749: PUSH
10750: LD_INT 2
10752: EQUAL
10753: IFFALSE 10765
// eff := 70 else
10755: LD_ADDR_VAR 0 4
10759: PUSH
10760: LD_INT 70
10762: ST_TO_ADDR
10763: GO 10773
// eff := 30 ;
10765: LD_ADDR_VAR 0 4
10769: PUSH
10770: LD_INT 30
10772: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
10773: LD_VAR 0 1
10777: PPUSH
10778: CALL_OW 250
10782: PPUSH
10783: LD_VAR 0 1
10787: PPUSH
10788: CALL_OW 251
10792: PPUSH
10793: LD_VAR 0 4
10797: PPUSH
10798: CALL_OW 495
// end ; end ;
10802: LD_VAR 0 2
10806: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
10807: LD_INT 0
10809: PPUSH
// end ;
10810: LD_VAR 0 4
10814: RET
// export function SOS_Command ( cmd ) ; begin
10815: LD_INT 0
10817: PPUSH
// end ;
10818: LD_VAR 0 2
10822: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
10823: LD_INT 0
10825: PPUSH
// end ;
10826: LD_VAR 0 6
10830: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
10831: LD_INT 0
10833: PPUSH
10834: PPUSH
// if not vehicle or not factory then
10835: LD_VAR 0 1
10839: NOT
10840: PUSH
10841: LD_VAR 0 2
10845: NOT
10846: OR
10847: IFFALSE 10851
// exit ;
10849: GO 11082
// if factoryWaypoints >= factory then
10851: LD_EXP 94
10855: PUSH
10856: LD_VAR 0 2
10860: GREATEREQUAL
10861: IFFALSE 11082
// if factoryWaypoints [ factory ] then
10863: LD_EXP 94
10867: PUSH
10868: LD_VAR 0 2
10872: ARRAY
10873: IFFALSE 11082
// begin if GetControl ( vehicle ) = control_manual then
10875: LD_VAR 0 1
10879: PPUSH
10880: CALL_OW 263
10884: PUSH
10885: LD_INT 1
10887: EQUAL
10888: IFFALSE 10969
// begin driver := IsDrivenBy ( vehicle ) ;
10890: LD_ADDR_VAR 0 4
10894: PUSH
10895: LD_VAR 0 1
10899: PPUSH
10900: CALL_OW 311
10904: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
10905: LD_VAR 0 4
10909: PPUSH
10910: LD_EXP 94
10914: PUSH
10915: LD_VAR 0 2
10919: ARRAY
10920: PUSH
10921: LD_INT 3
10923: ARRAY
10924: PPUSH
10925: LD_EXP 94
10929: PUSH
10930: LD_VAR 0 2
10934: ARRAY
10935: PUSH
10936: LD_INT 4
10938: ARRAY
10939: PPUSH
10940: CALL_OW 171
// AddComExitVehicle ( driver ) ;
10944: LD_VAR 0 4
10948: PPUSH
10949: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
10953: LD_VAR 0 4
10957: PPUSH
10958: LD_VAR 0 2
10962: PPUSH
10963: CALL_OW 180
// end else
10967: GO 11082
// if GetControl ( vehicle ) = control_remote then
10969: LD_VAR 0 1
10973: PPUSH
10974: CALL_OW 263
10978: PUSH
10979: LD_INT 2
10981: EQUAL
10982: IFFALSE 11043
// begin wait ( 0 0$2 ) ;
10984: LD_INT 70
10986: PPUSH
10987: CALL_OW 67
// if Connect ( vehicle ) then
10991: LD_VAR 0 1
10995: PPUSH
10996: CALL 38755 0 1
11000: IFFALSE 11041
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
11002: LD_VAR 0 1
11006: PPUSH
11007: LD_EXP 94
11011: PUSH
11012: LD_VAR 0 2
11016: ARRAY
11017: PUSH
11018: LD_INT 3
11020: ARRAY
11021: PPUSH
11022: LD_EXP 94
11026: PUSH
11027: LD_VAR 0 2
11031: ARRAY
11032: PUSH
11033: LD_INT 4
11035: ARRAY
11036: PPUSH
11037: CALL_OW 171
// end else
11041: GO 11082
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
11043: LD_VAR 0 1
11047: PPUSH
11048: LD_EXP 94
11052: PUSH
11053: LD_VAR 0 2
11057: ARRAY
11058: PUSH
11059: LD_INT 3
11061: ARRAY
11062: PPUSH
11063: LD_EXP 94
11067: PUSH
11068: LD_VAR 0 2
11072: ARRAY
11073: PUSH
11074: LD_INT 4
11076: ARRAY
11077: PPUSH
11078: CALL_OW 171
// end ; end ;
11082: LD_VAR 0 3
11086: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
11087: LD_INT 0
11089: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
11090: LD_VAR 0 1
11094: PUSH
11095: LD_INT 250
11097: EQUAL
11098: PUSH
11099: LD_VAR 0 2
11103: PPUSH
11104: CALL_OW 264
11108: PUSH
11109: LD_INT 81
11111: EQUAL
11112: AND
11113: IFFALSE 11134
// MinerPlaceMine ( unit , x , y ) ;
11115: LD_VAR 0 2
11119: PPUSH
11120: LD_VAR 0 4
11124: PPUSH
11125: LD_VAR 0 5
11129: PPUSH
11130: CALL 13519 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
11134: LD_VAR 0 1
11138: PUSH
11139: LD_INT 251
11141: EQUAL
11142: PUSH
11143: LD_VAR 0 2
11147: PPUSH
11148: CALL_OW 264
11152: PUSH
11153: LD_INT 81
11155: EQUAL
11156: AND
11157: IFFALSE 11178
// MinerDetonateMine ( unit , x , y ) ;
11159: LD_VAR 0 2
11163: PPUSH
11164: LD_VAR 0 4
11168: PPUSH
11169: LD_VAR 0 5
11173: PPUSH
11174: CALL 13794 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
11178: LD_VAR 0 1
11182: PUSH
11183: LD_INT 252
11185: EQUAL
11186: PUSH
11187: LD_VAR 0 2
11191: PPUSH
11192: CALL_OW 264
11196: PUSH
11197: LD_INT 81
11199: EQUAL
11200: AND
11201: IFFALSE 11222
// MinerCreateMinefield ( unit , x , y ) ;
11203: LD_VAR 0 2
11207: PPUSH
11208: LD_VAR 0 4
11212: PPUSH
11213: LD_VAR 0 5
11217: PPUSH
11218: CALL 14211 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
11222: LD_VAR 0 1
11226: PUSH
11227: LD_INT 253
11229: EQUAL
11230: PUSH
11231: LD_VAR 0 2
11235: PPUSH
11236: CALL_OW 257
11240: PUSH
11241: LD_INT 5
11243: EQUAL
11244: AND
11245: IFFALSE 11266
// ComBinocular ( unit , x , y ) ;
11247: LD_VAR 0 2
11251: PPUSH
11252: LD_VAR 0 4
11256: PPUSH
11257: LD_VAR 0 5
11261: PPUSH
11262: CALL 14580 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
11266: LD_VAR 0 1
11270: PUSH
11271: LD_INT 254
11273: EQUAL
11274: PUSH
11275: LD_VAR 0 2
11279: PPUSH
11280: CALL_OW 264
11284: PUSH
11285: LD_INT 99
11287: EQUAL
11288: AND
11289: PUSH
11290: LD_VAR 0 3
11294: PPUSH
11295: CALL_OW 263
11299: PUSH
11300: LD_INT 3
11302: EQUAL
11303: AND
11304: IFFALSE 11320
// HackDestroyVehicle ( unit , selectedUnit ) ;
11306: LD_VAR 0 2
11310: PPUSH
11311: LD_VAR 0 3
11315: PPUSH
11316: CALL 12883 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
11320: LD_VAR 0 1
11324: PUSH
11325: LD_INT 255
11327: EQUAL
11328: PUSH
11329: LD_VAR 0 2
11333: PPUSH
11334: CALL_OW 264
11338: PUSH
11339: LD_INT 14
11341: PUSH
11342: LD_INT 53
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: IN
11349: AND
11350: PUSH
11351: LD_VAR 0 4
11355: PPUSH
11356: LD_VAR 0 5
11360: PPUSH
11361: CALL_OW 488
11365: AND
11366: IFFALSE 11390
// CutTreeXYR ( unit , x , y , 12 ) ;
11368: LD_VAR 0 2
11372: PPUSH
11373: LD_VAR 0 4
11377: PPUSH
11378: LD_VAR 0 5
11382: PPUSH
11383: LD_INT 12
11385: PPUSH
11386: CALL 11453 0 4
// if cmd = 256 then
11390: LD_VAR 0 1
11394: PUSH
11395: LD_INT 256
11397: EQUAL
11398: IFFALSE 11419
// SetFactoryWaypoint ( unit , x , y ) ;
11400: LD_VAR 0 2
11404: PPUSH
11405: LD_VAR 0 4
11409: PPUSH
11410: LD_VAR 0 5
11414: PPUSH
11415: CALL 29338 0 3
// if cmd = 257 then
11419: LD_VAR 0 1
11423: PUSH
11424: LD_INT 257
11426: EQUAL
11427: IFFALSE 11448
// SetWarehouseGatheringPoint ( unit , x , y ) ;
11429: LD_VAR 0 2
11433: PPUSH
11434: LD_VAR 0 4
11438: PPUSH
11439: LD_VAR 0 5
11443: PPUSH
11444: CALL 29700 0 3
// end ;
11448: LD_VAR 0 6
11452: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
11453: LD_INT 0
11455: PPUSH
11456: PPUSH
11457: PPUSH
11458: PPUSH
11459: PPUSH
11460: PPUSH
11461: PPUSH
11462: PPUSH
11463: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
11464: LD_VAR 0 1
11468: NOT
11469: PUSH
11470: LD_VAR 0 2
11474: PPUSH
11475: LD_VAR 0 3
11479: PPUSH
11480: CALL_OW 488
11484: NOT
11485: OR
11486: PUSH
11487: LD_VAR 0 4
11491: NOT
11492: OR
11493: IFFALSE 11497
// exit ;
11495: GO 11837
// list := [ ] ;
11497: LD_ADDR_VAR 0 13
11501: PUSH
11502: EMPTY
11503: ST_TO_ADDR
// if x - r < 0 then
11504: LD_VAR 0 2
11508: PUSH
11509: LD_VAR 0 4
11513: MINUS
11514: PUSH
11515: LD_INT 0
11517: LESS
11518: IFFALSE 11530
// min_x := 0 else
11520: LD_ADDR_VAR 0 7
11524: PUSH
11525: LD_INT 0
11527: ST_TO_ADDR
11528: GO 11546
// min_x := x - r ;
11530: LD_ADDR_VAR 0 7
11534: PUSH
11535: LD_VAR 0 2
11539: PUSH
11540: LD_VAR 0 4
11544: MINUS
11545: ST_TO_ADDR
// if y - r < 0 then
11546: LD_VAR 0 3
11550: PUSH
11551: LD_VAR 0 4
11555: MINUS
11556: PUSH
11557: LD_INT 0
11559: LESS
11560: IFFALSE 11572
// min_y := 0 else
11562: LD_ADDR_VAR 0 8
11566: PUSH
11567: LD_INT 0
11569: ST_TO_ADDR
11570: GO 11588
// min_y := y - r ;
11572: LD_ADDR_VAR 0 8
11576: PUSH
11577: LD_VAR 0 3
11581: PUSH
11582: LD_VAR 0 4
11586: MINUS
11587: ST_TO_ADDR
// max_x := x + r ;
11588: LD_ADDR_VAR 0 9
11592: PUSH
11593: LD_VAR 0 2
11597: PUSH
11598: LD_VAR 0 4
11602: PLUS
11603: ST_TO_ADDR
// max_y := y + r ;
11604: LD_ADDR_VAR 0 10
11608: PUSH
11609: LD_VAR 0 3
11613: PUSH
11614: LD_VAR 0 4
11618: PLUS
11619: ST_TO_ADDR
// for _x = min_x to max_x do
11620: LD_ADDR_VAR 0 11
11624: PUSH
11625: DOUBLE
11626: LD_VAR 0 7
11630: DEC
11631: ST_TO_ADDR
11632: LD_VAR 0 9
11636: PUSH
11637: FOR_TO
11638: IFFALSE 11755
// for _y = min_y to max_y do
11640: LD_ADDR_VAR 0 12
11644: PUSH
11645: DOUBLE
11646: LD_VAR 0 8
11650: DEC
11651: ST_TO_ADDR
11652: LD_VAR 0 10
11656: PUSH
11657: FOR_TO
11658: IFFALSE 11751
// begin if not ValidHex ( _x , _y ) then
11660: LD_VAR 0 11
11664: PPUSH
11665: LD_VAR 0 12
11669: PPUSH
11670: CALL_OW 488
11674: NOT
11675: IFFALSE 11679
// continue ;
11677: GO 11657
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
11679: LD_VAR 0 11
11683: PPUSH
11684: LD_VAR 0 12
11688: PPUSH
11689: CALL_OW 351
11693: PUSH
11694: LD_VAR 0 11
11698: PPUSH
11699: LD_VAR 0 12
11703: PPUSH
11704: CALL_OW 554
11708: AND
11709: IFFALSE 11749
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
11711: LD_ADDR_VAR 0 13
11715: PUSH
11716: LD_VAR 0 13
11720: PPUSH
11721: LD_VAR 0 13
11725: PUSH
11726: LD_INT 1
11728: PLUS
11729: PPUSH
11730: LD_VAR 0 11
11734: PUSH
11735: LD_VAR 0 12
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: PPUSH
11744: CALL_OW 2
11748: ST_TO_ADDR
// end ;
11749: GO 11657
11751: POP
11752: POP
11753: GO 11637
11755: POP
11756: POP
// if not list then
11757: LD_VAR 0 13
11761: NOT
11762: IFFALSE 11766
// exit ;
11764: GO 11837
// for i in list do
11766: LD_ADDR_VAR 0 6
11770: PUSH
11771: LD_VAR 0 13
11775: PUSH
11776: FOR_IN
11777: IFFALSE 11835
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
11779: LD_VAR 0 1
11783: PPUSH
11784: LD_STRING M
11786: PUSH
11787: LD_VAR 0 6
11791: PUSH
11792: LD_INT 1
11794: ARRAY
11795: PUSH
11796: LD_VAR 0 6
11800: PUSH
11801: LD_INT 2
11803: ARRAY
11804: PUSH
11805: LD_INT 0
11807: PUSH
11808: LD_INT 0
11810: PUSH
11811: LD_INT 0
11813: PUSH
11814: LD_INT 0
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: PUSH
11826: EMPTY
11827: LIST
11828: PPUSH
11829: CALL_OW 447
11833: GO 11776
11835: POP
11836: POP
// end ;
11837: LD_VAR 0 5
11841: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
11842: LD_EXP 26
11846: NOT
11847: IFFALSE 11897
11849: GO 11851
11851: DISABLE
// begin initHack := true ;
11852: LD_ADDR_EXP 26
11856: PUSH
11857: LD_INT 1
11859: ST_TO_ADDR
// hackTanks := [ ] ;
11860: LD_ADDR_EXP 27
11864: PUSH
11865: EMPTY
11866: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
11867: LD_ADDR_EXP 28
11871: PUSH
11872: EMPTY
11873: ST_TO_ADDR
// hackLimit := 3 ;
11874: LD_ADDR_EXP 29
11878: PUSH
11879: LD_INT 3
11881: ST_TO_ADDR
// hackDist := 12 ;
11882: LD_ADDR_EXP 30
11886: PUSH
11887: LD_INT 12
11889: ST_TO_ADDR
// hackCounter := [ ] ;
11890: LD_ADDR_EXP 31
11894: PUSH
11895: EMPTY
11896: ST_TO_ADDR
// end ;
11897: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
11898: LD_EXP 26
11902: PUSH
11903: LD_INT 34
11905: PUSH
11906: LD_INT 99
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: PPUSH
11913: CALL_OW 69
11917: AND
11918: IFFALSE 12171
11920: GO 11922
11922: DISABLE
11923: LD_INT 0
11925: PPUSH
11926: PPUSH
// begin enable ;
11927: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
11928: LD_ADDR_VAR 0 1
11932: PUSH
11933: LD_INT 34
11935: PUSH
11936: LD_INT 99
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: PPUSH
11943: CALL_OW 69
11947: PUSH
11948: FOR_IN
11949: IFFALSE 12169
// begin if not i in hackTanks then
11951: LD_VAR 0 1
11955: PUSH
11956: LD_EXP 27
11960: IN
11961: NOT
11962: IFFALSE 12045
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
11964: LD_ADDR_EXP 27
11968: PUSH
11969: LD_EXP 27
11973: PPUSH
11974: LD_EXP 27
11978: PUSH
11979: LD_INT 1
11981: PLUS
11982: PPUSH
11983: LD_VAR 0 1
11987: PPUSH
11988: CALL_OW 1
11992: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
11993: LD_ADDR_EXP 28
11997: PUSH
11998: LD_EXP 28
12002: PPUSH
12003: LD_EXP 28
12007: PUSH
12008: LD_INT 1
12010: PLUS
12011: PPUSH
12012: EMPTY
12013: PPUSH
12014: CALL_OW 1
12018: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
12019: LD_ADDR_EXP 31
12023: PUSH
12024: LD_EXP 31
12028: PPUSH
12029: LD_EXP 31
12033: PUSH
12034: LD_INT 1
12036: PLUS
12037: PPUSH
12038: EMPTY
12039: PPUSH
12040: CALL_OW 1
12044: ST_TO_ADDR
// end ; if not IsOk ( i ) then
12045: LD_VAR 0 1
12049: PPUSH
12050: CALL_OW 302
12054: NOT
12055: IFFALSE 12068
// begin HackUnlinkAll ( i ) ;
12057: LD_VAR 0 1
12061: PPUSH
12062: CALL 12174 0 1
// continue ;
12066: GO 11948
// end ; HackCheckCapturedStatus ( i ) ;
12068: LD_VAR 0 1
12072: PPUSH
12073: CALL 12617 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
12077: LD_ADDR_VAR 0 2
12081: PUSH
12082: LD_INT 81
12084: PUSH
12085: LD_VAR 0 1
12089: PPUSH
12090: CALL_OW 255
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: PUSH
12099: LD_INT 33
12101: PUSH
12102: LD_INT 3
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PUSH
12109: LD_INT 91
12111: PUSH
12112: LD_VAR 0 1
12116: PUSH
12117: LD_EXP 30
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: LIST
12126: PUSH
12127: LD_INT 50
12129: PUSH
12130: EMPTY
12131: LIST
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: PPUSH
12139: CALL_OW 69
12143: ST_TO_ADDR
// if not tmp then
12144: LD_VAR 0 2
12148: NOT
12149: IFFALSE 12153
// continue ;
12151: GO 11948
// HackLink ( i , tmp ) ;
12153: LD_VAR 0 1
12157: PPUSH
12158: LD_VAR 0 2
12162: PPUSH
12163: CALL 12310 0 2
// end ;
12167: GO 11948
12169: POP
12170: POP
// end ;
12171: PPOPN 2
12173: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
12174: LD_INT 0
12176: PPUSH
12177: PPUSH
12178: PPUSH
// if not hack in hackTanks then
12179: LD_VAR 0 1
12183: PUSH
12184: LD_EXP 27
12188: IN
12189: NOT
12190: IFFALSE 12194
// exit ;
12192: GO 12305
// index := GetElementIndex ( hackTanks , hack ) ;
12194: LD_ADDR_VAR 0 4
12198: PUSH
12199: LD_EXP 27
12203: PPUSH
12204: LD_VAR 0 1
12208: PPUSH
12209: CALL 35571 0 2
12213: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
12214: LD_EXP 28
12218: PUSH
12219: LD_VAR 0 4
12223: ARRAY
12224: IFFALSE 12305
// begin for i in hackTanksCaptured [ index ] do
12226: LD_ADDR_VAR 0 3
12230: PUSH
12231: LD_EXP 28
12235: PUSH
12236: LD_VAR 0 4
12240: ARRAY
12241: PUSH
12242: FOR_IN
12243: IFFALSE 12269
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
12245: LD_VAR 0 3
12249: PUSH
12250: LD_INT 1
12252: ARRAY
12253: PPUSH
12254: LD_VAR 0 3
12258: PUSH
12259: LD_INT 2
12261: ARRAY
12262: PPUSH
12263: CALL_OW 235
12267: GO 12242
12269: POP
12270: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
12271: LD_ADDR_EXP 28
12275: PUSH
12276: LD_EXP 28
12280: PPUSH
12281: LD_VAR 0 4
12285: PPUSH
12286: EMPTY
12287: PPUSH
12288: CALL_OW 1
12292: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
12293: LD_VAR 0 1
12297: PPUSH
12298: LD_INT 0
12300: PPUSH
12301: CALL_OW 505
// end ; end ;
12305: LD_VAR 0 2
12309: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
12310: LD_INT 0
12312: PPUSH
12313: PPUSH
12314: PPUSH
// if not hack in hackTanks or not vehicles then
12315: LD_VAR 0 1
12319: PUSH
12320: LD_EXP 27
12324: IN
12325: NOT
12326: PUSH
12327: LD_VAR 0 2
12331: NOT
12332: OR
12333: IFFALSE 12337
// exit ;
12335: GO 12612
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
12337: LD_ADDR_VAR 0 2
12341: PUSH
12342: LD_VAR 0 1
12346: PPUSH
12347: LD_VAR 0 2
12351: PPUSH
12352: LD_INT 1
12354: PPUSH
12355: LD_INT 1
12357: PPUSH
12358: CALL 36221 0 4
12362: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
12363: LD_ADDR_VAR 0 5
12367: PUSH
12368: LD_EXP 27
12372: PPUSH
12373: LD_VAR 0 1
12377: PPUSH
12378: CALL 35571 0 2
12382: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
12383: LD_EXP 28
12387: PUSH
12388: LD_VAR 0 5
12392: ARRAY
12393: PUSH
12394: LD_EXP 29
12398: LESS
12399: IFFALSE 12588
// begin for i := 1 to vehicles do
12401: LD_ADDR_VAR 0 4
12405: PUSH
12406: DOUBLE
12407: LD_INT 1
12409: DEC
12410: ST_TO_ADDR
12411: LD_VAR 0 2
12415: PUSH
12416: FOR_TO
12417: IFFALSE 12586
// begin if hackTanksCaptured [ index ] = hackLimit then
12419: LD_EXP 28
12423: PUSH
12424: LD_VAR 0 5
12428: ARRAY
12429: PUSH
12430: LD_EXP 29
12434: EQUAL
12435: IFFALSE 12439
// break ;
12437: GO 12586
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
12439: LD_ADDR_EXP 31
12443: PUSH
12444: LD_EXP 31
12448: PPUSH
12449: LD_VAR 0 5
12453: PPUSH
12454: LD_EXP 31
12458: PUSH
12459: LD_VAR 0 5
12463: ARRAY
12464: PUSH
12465: LD_INT 1
12467: PLUS
12468: PPUSH
12469: CALL_OW 1
12473: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
12474: LD_ADDR_EXP 28
12478: PUSH
12479: LD_EXP 28
12483: PPUSH
12484: LD_VAR 0 5
12488: PUSH
12489: LD_EXP 28
12493: PUSH
12494: LD_VAR 0 5
12498: ARRAY
12499: PUSH
12500: LD_INT 1
12502: PLUS
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: PPUSH
12508: LD_VAR 0 2
12512: PUSH
12513: LD_VAR 0 4
12517: ARRAY
12518: PUSH
12519: LD_VAR 0 2
12523: PUSH
12524: LD_VAR 0 4
12528: ARRAY
12529: PPUSH
12530: CALL_OW 255
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: PPUSH
12539: CALL 35786 0 3
12543: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
12544: LD_VAR 0 2
12548: PUSH
12549: LD_VAR 0 4
12553: ARRAY
12554: PPUSH
12555: LD_VAR 0 1
12559: PPUSH
12560: CALL_OW 255
12564: PPUSH
12565: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
12569: LD_VAR 0 2
12573: PUSH
12574: LD_VAR 0 4
12578: ARRAY
12579: PPUSH
12580: CALL_OW 141
// end ;
12584: GO 12416
12586: POP
12587: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12588: LD_VAR 0 1
12592: PPUSH
12593: LD_EXP 28
12597: PUSH
12598: LD_VAR 0 5
12602: ARRAY
12603: PUSH
12604: LD_INT 0
12606: PLUS
12607: PPUSH
12608: CALL_OW 505
// end ;
12612: LD_VAR 0 3
12616: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
12617: LD_INT 0
12619: PPUSH
12620: PPUSH
12621: PPUSH
12622: PPUSH
// if not hack in hackTanks then
12623: LD_VAR 0 1
12627: PUSH
12628: LD_EXP 27
12632: IN
12633: NOT
12634: IFFALSE 12638
// exit ;
12636: GO 12878
// index := GetElementIndex ( hackTanks , hack ) ;
12638: LD_ADDR_VAR 0 4
12642: PUSH
12643: LD_EXP 27
12647: PPUSH
12648: LD_VAR 0 1
12652: PPUSH
12653: CALL 35571 0 2
12657: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
12658: LD_ADDR_VAR 0 3
12662: PUSH
12663: DOUBLE
12664: LD_EXP 28
12668: PUSH
12669: LD_VAR 0 4
12673: ARRAY
12674: INC
12675: ST_TO_ADDR
12676: LD_INT 1
12678: PUSH
12679: FOR_DOWNTO
12680: IFFALSE 12852
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
12682: LD_ADDR_VAR 0 5
12686: PUSH
12687: LD_EXP 28
12691: PUSH
12692: LD_VAR 0 4
12696: ARRAY
12697: PUSH
12698: LD_VAR 0 3
12702: ARRAY
12703: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
12704: LD_VAR 0 5
12708: PUSH
12709: LD_INT 1
12711: ARRAY
12712: PPUSH
12713: CALL_OW 302
12717: NOT
12718: PUSH
12719: LD_VAR 0 5
12723: PUSH
12724: LD_INT 1
12726: ARRAY
12727: PPUSH
12728: CALL_OW 255
12732: PUSH
12733: LD_VAR 0 1
12737: PPUSH
12738: CALL_OW 255
12742: NONEQUAL
12743: OR
12744: IFFALSE 12850
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
12746: LD_VAR 0 5
12750: PUSH
12751: LD_INT 1
12753: ARRAY
12754: PPUSH
12755: CALL_OW 305
12759: PUSH
12760: LD_VAR 0 5
12764: PUSH
12765: LD_INT 1
12767: ARRAY
12768: PPUSH
12769: CALL_OW 255
12773: PUSH
12774: LD_VAR 0 1
12778: PPUSH
12779: CALL_OW 255
12783: EQUAL
12784: AND
12785: IFFALSE 12809
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
12787: LD_VAR 0 5
12791: PUSH
12792: LD_INT 1
12794: ARRAY
12795: PPUSH
12796: LD_VAR 0 5
12800: PUSH
12801: LD_INT 2
12803: ARRAY
12804: PPUSH
12805: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
12809: LD_ADDR_EXP 28
12813: PUSH
12814: LD_EXP 28
12818: PPUSH
12819: LD_VAR 0 4
12823: PPUSH
12824: LD_EXP 28
12828: PUSH
12829: LD_VAR 0 4
12833: ARRAY
12834: PPUSH
12835: LD_VAR 0 3
12839: PPUSH
12840: CALL_OW 3
12844: PPUSH
12845: CALL_OW 1
12849: ST_TO_ADDR
// end ; end ;
12850: GO 12679
12852: POP
12853: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12854: LD_VAR 0 1
12858: PPUSH
12859: LD_EXP 28
12863: PUSH
12864: LD_VAR 0 4
12868: ARRAY
12869: PUSH
12870: LD_INT 0
12872: PLUS
12873: PPUSH
12874: CALL_OW 505
// end ;
12878: LD_VAR 0 2
12882: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
12883: LD_INT 0
12885: PPUSH
12886: PPUSH
12887: PPUSH
12888: PPUSH
// if not hack in hackTanks then
12889: LD_VAR 0 1
12893: PUSH
12894: LD_EXP 27
12898: IN
12899: NOT
12900: IFFALSE 12904
// exit ;
12902: GO 12989
// index := GetElementIndex ( hackTanks , hack ) ;
12904: LD_ADDR_VAR 0 5
12908: PUSH
12909: LD_EXP 27
12913: PPUSH
12914: LD_VAR 0 1
12918: PPUSH
12919: CALL 35571 0 2
12923: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
12924: LD_ADDR_VAR 0 4
12928: PUSH
12929: DOUBLE
12930: LD_INT 1
12932: DEC
12933: ST_TO_ADDR
12934: LD_EXP 28
12938: PUSH
12939: LD_VAR 0 5
12943: ARRAY
12944: PUSH
12945: FOR_TO
12946: IFFALSE 12987
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
12948: LD_EXP 28
12952: PUSH
12953: LD_VAR 0 5
12957: ARRAY
12958: PUSH
12959: LD_VAR 0 4
12963: ARRAY
12964: PUSH
12965: LD_INT 1
12967: ARRAY
12968: PUSH
12969: LD_VAR 0 2
12973: EQUAL
12974: IFFALSE 12985
// KillUnit ( vehicle ) ;
12976: LD_VAR 0 2
12980: PPUSH
12981: CALL_OW 66
12985: GO 12945
12987: POP
12988: POP
// end ;
12989: LD_VAR 0 3
12993: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
12994: LD_EXP 32
12998: NOT
12999: IFFALSE 13034
13001: GO 13003
13003: DISABLE
// begin initMiner := true ;
13004: LD_ADDR_EXP 32
13008: PUSH
13009: LD_INT 1
13011: ST_TO_ADDR
// minersList := [ ] ;
13012: LD_ADDR_EXP 33
13016: PUSH
13017: EMPTY
13018: ST_TO_ADDR
// minerMinesList := [ ] ;
13019: LD_ADDR_EXP 34
13023: PUSH
13024: EMPTY
13025: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
13026: LD_ADDR_EXP 35
13030: PUSH
13031: LD_INT 5
13033: ST_TO_ADDR
// end ;
13034: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
13035: LD_EXP 32
13039: PUSH
13040: LD_INT 34
13042: PUSH
13043: LD_INT 81
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: PPUSH
13050: CALL_OW 69
13054: AND
13055: IFFALSE 13516
13057: GO 13059
13059: DISABLE
13060: LD_INT 0
13062: PPUSH
13063: PPUSH
13064: PPUSH
13065: PPUSH
// begin enable ;
13066: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
13067: LD_ADDR_VAR 0 1
13071: PUSH
13072: LD_INT 34
13074: PUSH
13075: LD_INT 81
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: PPUSH
13082: CALL_OW 69
13086: PUSH
13087: FOR_IN
13088: IFFALSE 13160
// begin if not i in minersList then
13090: LD_VAR 0 1
13094: PUSH
13095: LD_EXP 33
13099: IN
13100: NOT
13101: IFFALSE 13158
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
13103: LD_ADDR_EXP 33
13107: PUSH
13108: LD_EXP 33
13112: PPUSH
13113: LD_EXP 33
13117: PUSH
13118: LD_INT 1
13120: PLUS
13121: PPUSH
13122: LD_VAR 0 1
13126: PPUSH
13127: CALL_OW 1
13131: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
13132: LD_ADDR_EXP 34
13136: PUSH
13137: LD_EXP 34
13141: PPUSH
13142: LD_EXP 34
13146: PUSH
13147: LD_INT 1
13149: PLUS
13150: PPUSH
13151: EMPTY
13152: PPUSH
13153: CALL_OW 1
13157: ST_TO_ADDR
// end end ;
13158: GO 13087
13160: POP
13161: POP
// for i := minerMinesList downto 1 do
13162: LD_ADDR_VAR 0 1
13166: PUSH
13167: DOUBLE
13168: LD_EXP 34
13172: INC
13173: ST_TO_ADDR
13174: LD_INT 1
13176: PUSH
13177: FOR_DOWNTO
13178: IFFALSE 13514
// begin if IsLive ( minersList [ i ] ) then
13180: LD_EXP 33
13184: PUSH
13185: LD_VAR 0 1
13189: ARRAY
13190: PPUSH
13191: CALL_OW 300
13195: IFFALSE 13223
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
13197: LD_EXP 33
13201: PUSH
13202: LD_VAR 0 1
13206: ARRAY
13207: PPUSH
13208: LD_EXP 34
13212: PUSH
13213: LD_VAR 0 1
13217: ARRAY
13218: PPUSH
13219: CALL_OW 505
// if not minerMinesList [ i ] then
13223: LD_EXP 34
13227: PUSH
13228: LD_VAR 0 1
13232: ARRAY
13233: NOT
13234: IFFALSE 13238
// continue ;
13236: GO 13177
// for j := minerMinesList [ i ] downto 1 do
13238: LD_ADDR_VAR 0 2
13242: PUSH
13243: DOUBLE
13244: LD_EXP 34
13248: PUSH
13249: LD_VAR 0 1
13253: ARRAY
13254: INC
13255: ST_TO_ADDR
13256: LD_INT 1
13258: PUSH
13259: FOR_DOWNTO
13260: IFFALSE 13510
// begin side := GetSide ( minersList [ i ] ) ;
13262: LD_ADDR_VAR 0 3
13266: PUSH
13267: LD_EXP 33
13271: PUSH
13272: LD_VAR 0 1
13276: ARRAY
13277: PPUSH
13278: CALL_OW 255
13282: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
13283: LD_ADDR_VAR 0 4
13287: PUSH
13288: LD_EXP 34
13292: PUSH
13293: LD_VAR 0 1
13297: ARRAY
13298: PUSH
13299: LD_VAR 0 2
13303: ARRAY
13304: PUSH
13305: LD_INT 1
13307: ARRAY
13308: PPUSH
13309: LD_EXP 34
13313: PUSH
13314: LD_VAR 0 1
13318: ARRAY
13319: PUSH
13320: LD_VAR 0 2
13324: ARRAY
13325: PUSH
13326: LD_INT 2
13328: ARRAY
13329: PPUSH
13330: CALL_OW 428
13334: ST_TO_ADDR
// if not tmp then
13335: LD_VAR 0 4
13339: NOT
13340: IFFALSE 13344
// continue ;
13342: GO 13259
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
13344: LD_VAR 0 4
13348: PUSH
13349: LD_INT 81
13351: PUSH
13352: LD_VAR 0 3
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PPUSH
13361: CALL_OW 69
13365: IN
13366: PUSH
13367: LD_EXP 34
13371: PUSH
13372: LD_VAR 0 1
13376: ARRAY
13377: PUSH
13378: LD_VAR 0 2
13382: ARRAY
13383: PUSH
13384: LD_INT 1
13386: ARRAY
13387: PPUSH
13388: LD_EXP 34
13392: PUSH
13393: LD_VAR 0 1
13397: ARRAY
13398: PUSH
13399: LD_VAR 0 2
13403: ARRAY
13404: PUSH
13405: LD_INT 2
13407: ARRAY
13408: PPUSH
13409: CALL_OW 458
13413: AND
13414: IFFALSE 13508
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
13416: LD_EXP 34
13420: PUSH
13421: LD_VAR 0 1
13425: ARRAY
13426: PUSH
13427: LD_VAR 0 2
13431: ARRAY
13432: PUSH
13433: LD_INT 1
13435: ARRAY
13436: PPUSH
13437: LD_EXP 34
13441: PUSH
13442: LD_VAR 0 1
13446: ARRAY
13447: PUSH
13448: LD_VAR 0 2
13452: ARRAY
13453: PUSH
13454: LD_INT 2
13456: ARRAY
13457: PPUSH
13458: LD_VAR 0 3
13462: PPUSH
13463: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
13467: LD_ADDR_EXP 34
13471: PUSH
13472: LD_EXP 34
13476: PPUSH
13477: LD_VAR 0 1
13481: PPUSH
13482: LD_EXP 34
13486: PUSH
13487: LD_VAR 0 1
13491: ARRAY
13492: PPUSH
13493: LD_VAR 0 2
13497: PPUSH
13498: CALL_OW 3
13502: PPUSH
13503: CALL_OW 1
13507: ST_TO_ADDR
// end ; end ;
13508: GO 13259
13510: POP
13511: POP
// end ;
13512: GO 13177
13514: POP
13515: POP
// end ;
13516: PPOPN 4
13518: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
13519: LD_INT 0
13521: PPUSH
13522: PPUSH
// result := false ;
13523: LD_ADDR_VAR 0 4
13527: PUSH
13528: LD_INT 0
13530: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
13531: LD_VAR 0 1
13535: PPUSH
13536: CALL_OW 264
13540: PUSH
13541: LD_INT 81
13543: EQUAL
13544: NOT
13545: IFFALSE 13549
// exit ;
13547: GO 13789
// index := GetElementIndex ( minersList , unit ) ;
13549: LD_ADDR_VAR 0 5
13553: PUSH
13554: LD_EXP 33
13558: PPUSH
13559: LD_VAR 0 1
13563: PPUSH
13564: CALL 35571 0 2
13568: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
13569: LD_EXP 34
13573: PUSH
13574: LD_VAR 0 5
13578: ARRAY
13579: PUSH
13580: LD_EXP 35
13584: GREATEREQUAL
13585: IFFALSE 13589
// exit ;
13587: GO 13789
// ComMoveXY ( unit , x , y ) ;
13589: LD_VAR 0 1
13593: PPUSH
13594: LD_VAR 0 2
13598: PPUSH
13599: LD_VAR 0 3
13603: PPUSH
13604: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13608: LD_INT 35
13610: PPUSH
13611: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
13615: LD_VAR 0 1
13619: PPUSH
13620: LD_VAR 0 2
13624: PPUSH
13625: LD_VAR 0 3
13629: PPUSH
13630: CALL 66834 0 3
13634: NOT
13635: PUSH
13636: LD_VAR 0 1
13640: PPUSH
13641: CALL_OW 314
13645: AND
13646: IFFALSE 13650
// exit ;
13648: GO 13789
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
13650: LD_VAR 0 2
13654: PPUSH
13655: LD_VAR 0 3
13659: PPUSH
13660: CALL_OW 428
13664: PUSH
13665: LD_VAR 0 1
13669: EQUAL
13670: PUSH
13671: LD_VAR 0 1
13675: PPUSH
13676: CALL_OW 314
13680: NOT
13681: AND
13682: IFFALSE 13608
// PlaySoundXY ( x , y , PlantMine ) ;
13684: LD_VAR 0 2
13688: PPUSH
13689: LD_VAR 0 3
13693: PPUSH
13694: LD_STRING PlantMine
13696: PPUSH
13697: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
13701: LD_VAR 0 2
13705: PPUSH
13706: LD_VAR 0 3
13710: PPUSH
13711: LD_VAR 0 1
13715: PPUSH
13716: CALL_OW 255
13720: PPUSH
13721: LD_INT 0
13723: PPUSH
13724: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
13728: LD_ADDR_EXP 34
13732: PUSH
13733: LD_EXP 34
13737: PPUSH
13738: LD_VAR 0 5
13742: PUSH
13743: LD_EXP 34
13747: PUSH
13748: LD_VAR 0 5
13752: ARRAY
13753: PUSH
13754: LD_INT 1
13756: PLUS
13757: PUSH
13758: EMPTY
13759: LIST
13760: LIST
13761: PPUSH
13762: LD_VAR 0 2
13766: PUSH
13767: LD_VAR 0 3
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: PPUSH
13776: CALL 35786 0 3
13780: ST_TO_ADDR
// result := true ;
13781: LD_ADDR_VAR 0 4
13785: PUSH
13786: LD_INT 1
13788: ST_TO_ADDR
// end ;
13789: LD_VAR 0 4
13793: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
13794: LD_INT 0
13796: PPUSH
13797: PPUSH
13798: PPUSH
// if not unit in minersList then
13799: LD_VAR 0 1
13803: PUSH
13804: LD_EXP 33
13808: IN
13809: NOT
13810: IFFALSE 13814
// exit ;
13812: GO 14206
// index := GetElementIndex ( minersList , unit ) ;
13814: LD_ADDR_VAR 0 6
13818: PUSH
13819: LD_EXP 33
13823: PPUSH
13824: LD_VAR 0 1
13828: PPUSH
13829: CALL 35571 0 2
13833: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
13834: LD_ADDR_VAR 0 5
13838: PUSH
13839: DOUBLE
13840: LD_EXP 34
13844: PUSH
13845: LD_VAR 0 6
13849: ARRAY
13850: INC
13851: ST_TO_ADDR
13852: LD_INT 1
13854: PUSH
13855: FOR_DOWNTO
13856: IFFALSE 14017
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
13858: LD_EXP 34
13862: PUSH
13863: LD_VAR 0 6
13867: ARRAY
13868: PUSH
13869: LD_VAR 0 5
13873: ARRAY
13874: PUSH
13875: LD_INT 1
13877: ARRAY
13878: PUSH
13879: LD_VAR 0 2
13883: EQUAL
13884: PUSH
13885: LD_EXP 34
13889: PUSH
13890: LD_VAR 0 6
13894: ARRAY
13895: PUSH
13896: LD_VAR 0 5
13900: ARRAY
13901: PUSH
13902: LD_INT 2
13904: ARRAY
13905: PUSH
13906: LD_VAR 0 3
13910: EQUAL
13911: AND
13912: IFFALSE 14015
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
13914: LD_EXP 34
13918: PUSH
13919: LD_VAR 0 6
13923: ARRAY
13924: PUSH
13925: LD_VAR 0 5
13929: ARRAY
13930: PUSH
13931: LD_INT 1
13933: ARRAY
13934: PPUSH
13935: LD_EXP 34
13939: PUSH
13940: LD_VAR 0 6
13944: ARRAY
13945: PUSH
13946: LD_VAR 0 5
13950: ARRAY
13951: PUSH
13952: LD_INT 2
13954: ARRAY
13955: PPUSH
13956: LD_VAR 0 1
13960: PPUSH
13961: CALL_OW 255
13965: PPUSH
13966: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
13970: LD_ADDR_EXP 34
13974: PUSH
13975: LD_EXP 34
13979: PPUSH
13980: LD_VAR 0 6
13984: PPUSH
13985: LD_EXP 34
13989: PUSH
13990: LD_VAR 0 6
13994: ARRAY
13995: PPUSH
13996: LD_VAR 0 5
14000: PPUSH
14001: CALL_OW 3
14005: PPUSH
14006: CALL_OW 1
14010: ST_TO_ADDR
// exit ;
14011: POP
14012: POP
14013: GO 14206
// end ; end ;
14015: GO 13855
14017: POP
14018: POP
// for i := minerMinesList [ index ] downto 1 do
14019: LD_ADDR_VAR 0 5
14023: PUSH
14024: DOUBLE
14025: LD_EXP 34
14029: PUSH
14030: LD_VAR 0 6
14034: ARRAY
14035: INC
14036: ST_TO_ADDR
14037: LD_INT 1
14039: PUSH
14040: FOR_DOWNTO
14041: IFFALSE 14204
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
14043: LD_EXP 34
14047: PUSH
14048: LD_VAR 0 6
14052: ARRAY
14053: PUSH
14054: LD_VAR 0 5
14058: ARRAY
14059: PUSH
14060: LD_INT 1
14062: ARRAY
14063: PPUSH
14064: LD_EXP 34
14068: PUSH
14069: LD_VAR 0 6
14073: ARRAY
14074: PUSH
14075: LD_VAR 0 5
14079: ARRAY
14080: PUSH
14081: LD_INT 2
14083: ARRAY
14084: PPUSH
14085: LD_VAR 0 2
14089: PPUSH
14090: LD_VAR 0 3
14094: PPUSH
14095: CALL_OW 298
14099: PUSH
14100: LD_INT 6
14102: LESS
14103: IFFALSE 14202
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
14105: LD_EXP 34
14109: PUSH
14110: LD_VAR 0 6
14114: ARRAY
14115: PUSH
14116: LD_VAR 0 5
14120: ARRAY
14121: PUSH
14122: LD_INT 1
14124: ARRAY
14125: PPUSH
14126: LD_EXP 34
14130: PUSH
14131: LD_VAR 0 6
14135: ARRAY
14136: PUSH
14137: LD_VAR 0 5
14141: ARRAY
14142: PUSH
14143: LD_INT 2
14145: ARRAY
14146: PPUSH
14147: LD_VAR 0 1
14151: PPUSH
14152: CALL_OW 255
14156: PPUSH
14157: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
14161: LD_ADDR_EXP 34
14165: PUSH
14166: LD_EXP 34
14170: PPUSH
14171: LD_VAR 0 6
14175: PPUSH
14176: LD_EXP 34
14180: PUSH
14181: LD_VAR 0 6
14185: ARRAY
14186: PPUSH
14187: LD_VAR 0 5
14191: PPUSH
14192: CALL_OW 3
14196: PPUSH
14197: CALL_OW 1
14201: ST_TO_ADDR
// end ; end ;
14202: GO 14040
14204: POP
14205: POP
// end ;
14206: LD_VAR 0 4
14210: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
14211: LD_INT 0
14213: PPUSH
14214: PPUSH
14215: PPUSH
14216: PPUSH
14217: PPUSH
14218: PPUSH
14219: PPUSH
14220: PPUSH
14221: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
14222: LD_VAR 0 1
14226: PPUSH
14227: CALL_OW 264
14231: PUSH
14232: LD_INT 81
14234: EQUAL
14235: NOT
14236: PUSH
14237: LD_VAR 0 1
14241: PUSH
14242: LD_EXP 33
14246: IN
14247: NOT
14248: OR
14249: IFFALSE 14253
// exit ;
14251: GO 14575
// index := GetElementIndex ( minersList , unit ) ;
14253: LD_ADDR_VAR 0 6
14257: PUSH
14258: LD_EXP 33
14262: PPUSH
14263: LD_VAR 0 1
14267: PPUSH
14268: CALL 35571 0 2
14272: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
14273: LD_ADDR_VAR 0 8
14277: PUSH
14278: LD_EXP 35
14282: PUSH
14283: LD_EXP 34
14287: PUSH
14288: LD_VAR 0 6
14292: ARRAY
14293: MINUS
14294: ST_TO_ADDR
// if not minesFreeAmount then
14295: LD_VAR 0 8
14299: NOT
14300: IFFALSE 14304
// exit ;
14302: GO 14575
// tmp := [ ] ;
14304: LD_ADDR_VAR 0 7
14308: PUSH
14309: EMPTY
14310: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
14311: LD_ADDR_VAR 0 5
14315: PUSH
14316: DOUBLE
14317: LD_INT 1
14319: DEC
14320: ST_TO_ADDR
14321: LD_VAR 0 8
14325: PUSH
14326: FOR_TO
14327: IFFALSE 14522
// begin _d := rand ( 0 , 5 ) ;
14329: LD_ADDR_VAR 0 11
14333: PUSH
14334: LD_INT 0
14336: PPUSH
14337: LD_INT 5
14339: PPUSH
14340: CALL_OW 12
14344: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
14345: LD_ADDR_VAR 0 12
14349: PUSH
14350: LD_INT 2
14352: PPUSH
14353: LD_INT 6
14355: PPUSH
14356: CALL_OW 12
14360: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
14361: LD_ADDR_VAR 0 9
14365: PUSH
14366: LD_VAR 0 2
14370: PPUSH
14371: LD_VAR 0 11
14375: PPUSH
14376: LD_VAR 0 12
14380: PPUSH
14381: CALL_OW 272
14385: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
14386: LD_ADDR_VAR 0 10
14390: PUSH
14391: LD_VAR 0 3
14395: PPUSH
14396: LD_VAR 0 11
14400: PPUSH
14401: LD_VAR 0 12
14405: PPUSH
14406: CALL_OW 273
14410: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
14411: LD_VAR 0 9
14415: PPUSH
14416: LD_VAR 0 10
14420: PPUSH
14421: CALL_OW 488
14425: PUSH
14426: LD_VAR 0 9
14430: PUSH
14431: LD_VAR 0 10
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: PUSH
14440: LD_VAR 0 7
14444: IN
14445: NOT
14446: AND
14447: PUSH
14448: LD_VAR 0 9
14452: PPUSH
14453: LD_VAR 0 10
14457: PPUSH
14458: CALL_OW 458
14462: NOT
14463: AND
14464: IFFALSE 14506
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
14466: LD_ADDR_VAR 0 7
14470: PUSH
14471: LD_VAR 0 7
14475: PPUSH
14476: LD_VAR 0 7
14480: PUSH
14481: LD_INT 1
14483: PLUS
14484: PPUSH
14485: LD_VAR 0 9
14489: PUSH
14490: LD_VAR 0 10
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: PPUSH
14499: CALL_OW 1
14503: ST_TO_ADDR
14504: GO 14520
// i := i - 1 ;
14506: LD_ADDR_VAR 0 5
14510: PUSH
14511: LD_VAR 0 5
14515: PUSH
14516: LD_INT 1
14518: MINUS
14519: ST_TO_ADDR
// end ;
14520: GO 14326
14522: POP
14523: POP
// for i in tmp do
14524: LD_ADDR_VAR 0 5
14528: PUSH
14529: LD_VAR 0 7
14533: PUSH
14534: FOR_IN
14535: IFFALSE 14573
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
14537: LD_VAR 0 1
14541: PPUSH
14542: LD_VAR 0 5
14546: PUSH
14547: LD_INT 1
14549: ARRAY
14550: PPUSH
14551: LD_VAR 0 5
14555: PUSH
14556: LD_INT 2
14558: ARRAY
14559: PPUSH
14560: CALL 13519 0 3
14564: NOT
14565: IFFALSE 14571
// exit ;
14567: POP
14568: POP
14569: GO 14575
14571: GO 14534
14573: POP
14574: POP
// end ;
14575: LD_VAR 0 4
14579: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
14580: LD_INT 0
14582: PPUSH
14583: PPUSH
14584: PPUSH
14585: PPUSH
14586: PPUSH
14587: PPUSH
14588: PPUSH
// if not GetClass ( unit ) = class_sniper then
14589: LD_VAR 0 1
14593: PPUSH
14594: CALL_OW 257
14598: PUSH
14599: LD_INT 5
14601: EQUAL
14602: NOT
14603: IFFALSE 14607
// exit ;
14605: GO 14995
// dist := 8 ;
14607: LD_ADDR_VAR 0 5
14611: PUSH
14612: LD_INT 8
14614: ST_TO_ADDR
// viewRange := 12 ;
14615: LD_ADDR_VAR 0 7
14619: PUSH
14620: LD_INT 12
14622: ST_TO_ADDR
// side := GetSide ( unit ) ;
14623: LD_ADDR_VAR 0 6
14627: PUSH
14628: LD_VAR 0 1
14632: PPUSH
14633: CALL_OW 255
14637: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
14638: LD_INT 61
14640: PPUSH
14641: LD_VAR 0 6
14645: PPUSH
14646: CALL_OW 321
14650: PUSH
14651: LD_INT 2
14653: EQUAL
14654: IFFALSE 14664
// viewRange := 16 ;
14656: LD_ADDR_VAR 0 7
14660: PUSH
14661: LD_INT 16
14663: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
14664: LD_VAR 0 1
14668: PPUSH
14669: LD_VAR 0 2
14673: PPUSH
14674: LD_VAR 0 3
14678: PPUSH
14679: CALL_OW 297
14683: PUSH
14684: LD_VAR 0 5
14688: GREATER
14689: IFFALSE 14768
// begin ComMoveXY ( unit , x , y ) ;
14691: LD_VAR 0 1
14695: PPUSH
14696: LD_VAR 0 2
14700: PPUSH
14701: LD_VAR 0 3
14705: PPUSH
14706: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14710: LD_INT 35
14712: PPUSH
14713: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
14717: LD_VAR 0 1
14721: PPUSH
14722: LD_VAR 0 2
14726: PPUSH
14727: LD_VAR 0 3
14731: PPUSH
14732: CALL 66834 0 3
14736: NOT
14737: IFFALSE 14741
// exit ;
14739: GO 14995
// until GetDistUnitXY ( unit , x , y ) < dist ;
14741: LD_VAR 0 1
14745: PPUSH
14746: LD_VAR 0 2
14750: PPUSH
14751: LD_VAR 0 3
14755: PPUSH
14756: CALL_OW 297
14760: PUSH
14761: LD_VAR 0 5
14765: LESS
14766: IFFALSE 14710
// end ; ComTurnXY ( unit , x , y ) ;
14768: LD_VAR 0 1
14772: PPUSH
14773: LD_VAR 0 2
14777: PPUSH
14778: LD_VAR 0 3
14782: PPUSH
14783: CALL_OW 118
// wait ( 5 ) ;
14787: LD_INT 5
14789: PPUSH
14790: CALL_OW 67
// _d := GetDir ( unit ) ;
14794: LD_ADDR_VAR 0 10
14798: PUSH
14799: LD_VAR 0 1
14803: PPUSH
14804: CALL_OW 254
14808: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
14809: LD_ADDR_VAR 0 8
14813: PUSH
14814: LD_VAR 0 1
14818: PPUSH
14819: CALL_OW 250
14823: PPUSH
14824: LD_VAR 0 10
14828: PPUSH
14829: LD_VAR 0 5
14833: PPUSH
14834: CALL_OW 272
14838: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
14839: LD_ADDR_VAR 0 9
14843: PUSH
14844: LD_VAR 0 1
14848: PPUSH
14849: CALL_OW 251
14853: PPUSH
14854: LD_VAR 0 10
14858: PPUSH
14859: LD_VAR 0 5
14863: PPUSH
14864: CALL_OW 273
14868: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14869: LD_VAR 0 8
14873: PPUSH
14874: LD_VAR 0 9
14878: PPUSH
14879: CALL_OW 488
14883: NOT
14884: IFFALSE 14888
// exit ;
14886: GO 14995
// ComAnimCustom ( unit , 1 ) ;
14888: LD_VAR 0 1
14892: PPUSH
14893: LD_INT 1
14895: PPUSH
14896: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
14900: LD_VAR 0 8
14904: PPUSH
14905: LD_VAR 0 9
14909: PPUSH
14910: LD_VAR 0 6
14914: PPUSH
14915: LD_VAR 0 7
14919: PPUSH
14920: CALL_OW 330
// repeat wait ( 1 ) ;
14924: LD_INT 1
14926: PPUSH
14927: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
14931: LD_VAR 0 1
14935: PPUSH
14936: CALL_OW 316
14940: PUSH
14941: LD_VAR 0 1
14945: PPUSH
14946: CALL_OW 314
14950: OR
14951: PUSH
14952: LD_VAR 0 1
14956: PPUSH
14957: CALL_OW 302
14961: NOT
14962: OR
14963: PUSH
14964: LD_VAR 0 1
14968: PPUSH
14969: CALL_OW 301
14973: OR
14974: IFFALSE 14924
// RemoveSeeing ( _x , _y , side ) ;
14976: LD_VAR 0 8
14980: PPUSH
14981: LD_VAR 0 9
14985: PPUSH
14986: LD_VAR 0 6
14990: PPUSH
14991: CALL_OW 331
// end ; end_of_file
14995: LD_VAR 0 4
14999: RET
// every 0 0$1 do
15000: GO 15002
15002: DISABLE
// begin enable ;
15003: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15004: LD_STRING updateTimer(
15006: PUSH
15007: LD_OWVAR 1
15011: STR
15012: PUSH
15013: LD_STRING );
15015: STR
15016: PPUSH
15017: CALL_OW 559
// end ;
15021: END
// export function SOS_MapStart ( ) ; begin
15022: LD_INT 0
15024: PPUSH
// if streamModeActive then
15025: LD_EXP 36
15029: IFFALSE 15038
// DefineStreamItems ( true ) ;
15031: LD_INT 1
15033: PPUSH
15034: CALL 16692 0 1
// UpdateFactoryWaypoints ( ) ;
15038: CALL 29553 0 0
// UpdateWarehouseGatheringPoints ( ) ;
15042: CALL 29810 0 0
// end ;
15046: LD_VAR 0 1
15050: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15051: LD_INT 0
15053: PPUSH
// if p2 = 100 then
15054: LD_VAR 0 2
15058: PUSH
15059: LD_INT 100
15061: EQUAL
15062: IFFALSE 16065
// begin if not StreamModeActive then
15064: LD_EXP 36
15068: NOT
15069: IFFALSE 15079
// StreamModeActive := true ;
15071: LD_ADDR_EXP 36
15075: PUSH
15076: LD_INT 1
15078: ST_TO_ADDR
// if p3 = 0 then
15079: LD_VAR 0 3
15083: PUSH
15084: LD_INT 0
15086: EQUAL
15087: IFFALSE 15093
// InitStreamMode ;
15089: CALL 16228 0 0
// if p3 = 1 then
15093: LD_VAR 0 3
15097: PUSH
15098: LD_INT 1
15100: EQUAL
15101: IFFALSE 15111
// sRocket := true ;
15103: LD_ADDR_EXP 41
15107: PUSH
15108: LD_INT 1
15110: ST_TO_ADDR
// if p3 = 2 then
15111: LD_VAR 0 3
15115: PUSH
15116: LD_INT 2
15118: EQUAL
15119: IFFALSE 15129
// sSpeed := true ;
15121: LD_ADDR_EXP 40
15125: PUSH
15126: LD_INT 1
15128: ST_TO_ADDR
// if p3 = 3 then
15129: LD_VAR 0 3
15133: PUSH
15134: LD_INT 3
15136: EQUAL
15137: IFFALSE 15147
// sEngine := true ;
15139: LD_ADDR_EXP 42
15143: PUSH
15144: LD_INT 1
15146: ST_TO_ADDR
// if p3 = 4 then
15147: LD_VAR 0 3
15151: PUSH
15152: LD_INT 4
15154: EQUAL
15155: IFFALSE 15165
// sSpec := true ;
15157: LD_ADDR_EXP 39
15161: PUSH
15162: LD_INT 1
15164: ST_TO_ADDR
// if p3 = 5 then
15165: LD_VAR 0 3
15169: PUSH
15170: LD_INT 5
15172: EQUAL
15173: IFFALSE 15183
// sLevel := true ;
15175: LD_ADDR_EXP 43
15179: PUSH
15180: LD_INT 1
15182: ST_TO_ADDR
// if p3 = 6 then
15183: LD_VAR 0 3
15187: PUSH
15188: LD_INT 6
15190: EQUAL
15191: IFFALSE 15201
// sArmoury := true ;
15193: LD_ADDR_EXP 44
15197: PUSH
15198: LD_INT 1
15200: ST_TO_ADDR
// if p3 = 7 then
15201: LD_VAR 0 3
15205: PUSH
15206: LD_INT 7
15208: EQUAL
15209: IFFALSE 15219
// sRadar := true ;
15211: LD_ADDR_EXP 45
15215: PUSH
15216: LD_INT 1
15218: ST_TO_ADDR
// if p3 = 8 then
15219: LD_VAR 0 3
15223: PUSH
15224: LD_INT 8
15226: EQUAL
15227: IFFALSE 15237
// sBunker := true ;
15229: LD_ADDR_EXP 46
15233: PUSH
15234: LD_INT 1
15236: ST_TO_ADDR
// if p3 = 9 then
15237: LD_VAR 0 3
15241: PUSH
15242: LD_INT 9
15244: EQUAL
15245: IFFALSE 15255
// sHack := true ;
15247: LD_ADDR_EXP 47
15251: PUSH
15252: LD_INT 1
15254: ST_TO_ADDR
// if p3 = 10 then
15255: LD_VAR 0 3
15259: PUSH
15260: LD_INT 10
15262: EQUAL
15263: IFFALSE 15273
// sFire := true ;
15265: LD_ADDR_EXP 48
15269: PUSH
15270: LD_INT 1
15272: ST_TO_ADDR
// if p3 = 11 then
15273: LD_VAR 0 3
15277: PUSH
15278: LD_INT 11
15280: EQUAL
15281: IFFALSE 15291
// sRefresh := true ;
15283: LD_ADDR_EXP 49
15287: PUSH
15288: LD_INT 1
15290: ST_TO_ADDR
// if p3 = 12 then
15291: LD_VAR 0 3
15295: PUSH
15296: LD_INT 12
15298: EQUAL
15299: IFFALSE 15309
// sExp := true ;
15301: LD_ADDR_EXP 50
15305: PUSH
15306: LD_INT 1
15308: ST_TO_ADDR
// if p3 = 13 then
15309: LD_VAR 0 3
15313: PUSH
15314: LD_INT 13
15316: EQUAL
15317: IFFALSE 15327
// sDepot := true ;
15319: LD_ADDR_EXP 51
15323: PUSH
15324: LD_INT 1
15326: ST_TO_ADDR
// if p3 = 14 then
15327: LD_VAR 0 3
15331: PUSH
15332: LD_INT 14
15334: EQUAL
15335: IFFALSE 15345
// sFlag := true ;
15337: LD_ADDR_EXP 52
15341: PUSH
15342: LD_INT 1
15344: ST_TO_ADDR
// if p3 = 15 then
15345: LD_VAR 0 3
15349: PUSH
15350: LD_INT 15
15352: EQUAL
15353: IFFALSE 15363
// sKamikadze := true ;
15355: LD_ADDR_EXP 60
15359: PUSH
15360: LD_INT 1
15362: ST_TO_ADDR
// if p3 = 16 then
15363: LD_VAR 0 3
15367: PUSH
15368: LD_INT 16
15370: EQUAL
15371: IFFALSE 15381
// sTroll := true ;
15373: LD_ADDR_EXP 61
15377: PUSH
15378: LD_INT 1
15380: ST_TO_ADDR
// if p3 = 17 then
15381: LD_VAR 0 3
15385: PUSH
15386: LD_INT 17
15388: EQUAL
15389: IFFALSE 15399
// sSlow := true ;
15391: LD_ADDR_EXP 62
15395: PUSH
15396: LD_INT 1
15398: ST_TO_ADDR
// if p3 = 18 then
15399: LD_VAR 0 3
15403: PUSH
15404: LD_INT 18
15406: EQUAL
15407: IFFALSE 15417
// sLack := true ;
15409: LD_ADDR_EXP 63
15413: PUSH
15414: LD_INT 1
15416: ST_TO_ADDR
// if p3 = 19 then
15417: LD_VAR 0 3
15421: PUSH
15422: LD_INT 19
15424: EQUAL
15425: IFFALSE 15435
// sTank := true ;
15427: LD_ADDR_EXP 65
15431: PUSH
15432: LD_INT 1
15434: ST_TO_ADDR
// if p3 = 20 then
15435: LD_VAR 0 3
15439: PUSH
15440: LD_INT 20
15442: EQUAL
15443: IFFALSE 15453
// sRemote := true ;
15445: LD_ADDR_EXP 66
15449: PUSH
15450: LD_INT 1
15452: ST_TO_ADDR
// if p3 = 21 then
15453: LD_VAR 0 3
15457: PUSH
15458: LD_INT 21
15460: EQUAL
15461: IFFALSE 15471
// sPowell := true ;
15463: LD_ADDR_EXP 67
15467: PUSH
15468: LD_INT 1
15470: ST_TO_ADDR
// if p3 = 22 then
15471: LD_VAR 0 3
15475: PUSH
15476: LD_INT 22
15478: EQUAL
15479: IFFALSE 15489
// sTeleport := true ;
15481: LD_ADDR_EXP 70
15485: PUSH
15486: LD_INT 1
15488: ST_TO_ADDR
// if p3 = 23 then
15489: LD_VAR 0 3
15493: PUSH
15494: LD_INT 23
15496: EQUAL
15497: IFFALSE 15507
// sOilTower := true ;
15499: LD_ADDR_EXP 72
15503: PUSH
15504: LD_INT 1
15506: ST_TO_ADDR
// if p3 = 24 then
15507: LD_VAR 0 3
15511: PUSH
15512: LD_INT 24
15514: EQUAL
15515: IFFALSE 15525
// sShovel := true ;
15517: LD_ADDR_EXP 73
15521: PUSH
15522: LD_INT 1
15524: ST_TO_ADDR
// if p3 = 25 then
15525: LD_VAR 0 3
15529: PUSH
15530: LD_INT 25
15532: EQUAL
15533: IFFALSE 15543
// sSheik := true ;
15535: LD_ADDR_EXP 74
15539: PUSH
15540: LD_INT 1
15542: ST_TO_ADDR
// if p3 = 26 then
15543: LD_VAR 0 3
15547: PUSH
15548: LD_INT 26
15550: EQUAL
15551: IFFALSE 15561
// sEarthquake := true ;
15553: LD_ADDR_EXP 76
15557: PUSH
15558: LD_INT 1
15560: ST_TO_ADDR
// if p3 = 27 then
15561: LD_VAR 0 3
15565: PUSH
15566: LD_INT 27
15568: EQUAL
15569: IFFALSE 15579
// sAI := true ;
15571: LD_ADDR_EXP 77
15575: PUSH
15576: LD_INT 1
15578: ST_TO_ADDR
// if p3 = 28 then
15579: LD_VAR 0 3
15583: PUSH
15584: LD_INT 28
15586: EQUAL
15587: IFFALSE 15597
// sCargo := true ;
15589: LD_ADDR_EXP 80
15593: PUSH
15594: LD_INT 1
15596: ST_TO_ADDR
// if p3 = 29 then
15597: LD_VAR 0 3
15601: PUSH
15602: LD_INT 29
15604: EQUAL
15605: IFFALSE 15615
// sDLaser := true ;
15607: LD_ADDR_EXP 81
15611: PUSH
15612: LD_INT 1
15614: ST_TO_ADDR
// if p3 = 30 then
15615: LD_VAR 0 3
15619: PUSH
15620: LD_INT 30
15622: EQUAL
15623: IFFALSE 15633
// sExchange := true ;
15625: LD_ADDR_EXP 82
15629: PUSH
15630: LD_INT 1
15632: ST_TO_ADDR
// if p3 = 31 then
15633: LD_VAR 0 3
15637: PUSH
15638: LD_INT 31
15640: EQUAL
15641: IFFALSE 15651
// sFac := true ;
15643: LD_ADDR_EXP 83
15647: PUSH
15648: LD_INT 1
15650: ST_TO_ADDR
// if p3 = 32 then
15651: LD_VAR 0 3
15655: PUSH
15656: LD_INT 32
15658: EQUAL
15659: IFFALSE 15669
// sPower := true ;
15661: LD_ADDR_EXP 84
15665: PUSH
15666: LD_INT 1
15668: ST_TO_ADDR
// if p3 = 33 then
15669: LD_VAR 0 3
15673: PUSH
15674: LD_INT 33
15676: EQUAL
15677: IFFALSE 15687
// sRandom := true ;
15679: LD_ADDR_EXP 85
15683: PUSH
15684: LD_INT 1
15686: ST_TO_ADDR
// if p3 = 34 then
15687: LD_VAR 0 3
15691: PUSH
15692: LD_INT 34
15694: EQUAL
15695: IFFALSE 15705
// sShield := true ;
15697: LD_ADDR_EXP 86
15701: PUSH
15702: LD_INT 1
15704: ST_TO_ADDR
// if p3 = 35 then
15705: LD_VAR 0 3
15709: PUSH
15710: LD_INT 35
15712: EQUAL
15713: IFFALSE 15723
// sTime := true ;
15715: LD_ADDR_EXP 87
15719: PUSH
15720: LD_INT 1
15722: ST_TO_ADDR
// if p3 = 36 then
15723: LD_VAR 0 3
15727: PUSH
15728: LD_INT 36
15730: EQUAL
15731: IFFALSE 15741
// sTools := true ;
15733: LD_ADDR_EXP 88
15737: PUSH
15738: LD_INT 1
15740: ST_TO_ADDR
// if p3 = 101 then
15741: LD_VAR 0 3
15745: PUSH
15746: LD_INT 101
15748: EQUAL
15749: IFFALSE 15759
// sSold := true ;
15751: LD_ADDR_EXP 53
15755: PUSH
15756: LD_INT 1
15758: ST_TO_ADDR
// if p3 = 102 then
15759: LD_VAR 0 3
15763: PUSH
15764: LD_INT 102
15766: EQUAL
15767: IFFALSE 15777
// sDiff := true ;
15769: LD_ADDR_EXP 54
15773: PUSH
15774: LD_INT 1
15776: ST_TO_ADDR
// if p3 = 103 then
15777: LD_VAR 0 3
15781: PUSH
15782: LD_INT 103
15784: EQUAL
15785: IFFALSE 15795
// sFog := true ;
15787: LD_ADDR_EXP 57
15791: PUSH
15792: LD_INT 1
15794: ST_TO_ADDR
// if p3 = 104 then
15795: LD_VAR 0 3
15799: PUSH
15800: LD_INT 104
15802: EQUAL
15803: IFFALSE 15813
// sReset := true ;
15805: LD_ADDR_EXP 58
15809: PUSH
15810: LD_INT 1
15812: ST_TO_ADDR
// if p3 = 105 then
15813: LD_VAR 0 3
15817: PUSH
15818: LD_INT 105
15820: EQUAL
15821: IFFALSE 15831
// sSun := true ;
15823: LD_ADDR_EXP 59
15827: PUSH
15828: LD_INT 1
15830: ST_TO_ADDR
// if p3 = 106 then
15831: LD_VAR 0 3
15835: PUSH
15836: LD_INT 106
15838: EQUAL
15839: IFFALSE 15849
// sTiger := true ;
15841: LD_ADDR_EXP 55
15845: PUSH
15846: LD_INT 1
15848: ST_TO_ADDR
// if p3 = 107 then
15849: LD_VAR 0 3
15853: PUSH
15854: LD_INT 107
15856: EQUAL
15857: IFFALSE 15867
// sBomb := true ;
15859: LD_ADDR_EXP 56
15863: PUSH
15864: LD_INT 1
15866: ST_TO_ADDR
// if p3 = 108 then
15867: LD_VAR 0 3
15871: PUSH
15872: LD_INT 108
15874: EQUAL
15875: IFFALSE 15885
// sWound := true ;
15877: LD_ADDR_EXP 64
15881: PUSH
15882: LD_INT 1
15884: ST_TO_ADDR
// if p3 = 109 then
15885: LD_VAR 0 3
15889: PUSH
15890: LD_INT 109
15892: EQUAL
15893: IFFALSE 15903
// sBetray := true ;
15895: LD_ADDR_EXP 68
15899: PUSH
15900: LD_INT 1
15902: ST_TO_ADDR
// if p3 = 110 then
15903: LD_VAR 0 3
15907: PUSH
15908: LD_INT 110
15910: EQUAL
15911: IFFALSE 15921
// sContamin := true ;
15913: LD_ADDR_EXP 69
15917: PUSH
15918: LD_INT 1
15920: ST_TO_ADDR
// if p3 = 111 then
15921: LD_VAR 0 3
15925: PUSH
15926: LD_INT 111
15928: EQUAL
15929: IFFALSE 15939
// sOil := true ;
15931: LD_ADDR_EXP 71
15935: PUSH
15936: LD_INT 1
15938: ST_TO_ADDR
// if p3 = 112 then
15939: LD_VAR 0 3
15943: PUSH
15944: LD_INT 112
15946: EQUAL
15947: IFFALSE 15957
// sStu := true ;
15949: LD_ADDR_EXP 75
15953: PUSH
15954: LD_INT 1
15956: ST_TO_ADDR
// if p3 = 113 then
15957: LD_VAR 0 3
15961: PUSH
15962: LD_INT 113
15964: EQUAL
15965: IFFALSE 15975
// sBazooka := true ;
15967: LD_ADDR_EXP 78
15971: PUSH
15972: LD_INT 1
15974: ST_TO_ADDR
// if p3 = 114 then
15975: LD_VAR 0 3
15979: PUSH
15980: LD_INT 114
15982: EQUAL
15983: IFFALSE 15993
// sMortar := true ;
15985: LD_ADDR_EXP 79
15989: PUSH
15990: LD_INT 1
15992: ST_TO_ADDR
// if p3 = 115 then
15993: LD_VAR 0 3
15997: PUSH
15998: LD_INT 115
16000: EQUAL
16001: IFFALSE 16011
// sRanger := true ;
16003: LD_ADDR_EXP 89
16007: PUSH
16008: LD_INT 1
16010: ST_TO_ADDR
// if p3 = 116 then
16011: LD_VAR 0 3
16015: PUSH
16016: LD_INT 116
16018: EQUAL
16019: IFFALSE 16029
// sComputer := true ;
16021: LD_ADDR_EXP 90
16025: PUSH
16026: LD_INT 1
16028: ST_TO_ADDR
// if p3 = 117 then
16029: LD_VAR 0 3
16033: PUSH
16034: LD_INT 117
16036: EQUAL
16037: IFFALSE 16047
// s30 := true ;
16039: LD_ADDR_EXP 91
16043: PUSH
16044: LD_INT 1
16046: ST_TO_ADDR
// if p3 = 118 then
16047: LD_VAR 0 3
16051: PUSH
16052: LD_INT 118
16054: EQUAL
16055: IFFALSE 16065
// s60 := true ;
16057: LD_ADDR_EXP 92
16061: PUSH
16062: LD_INT 1
16064: ST_TO_ADDR
// end ; if p2 = 101 then
16065: LD_VAR 0 2
16069: PUSH
16070: LD_INT 101
16072: EQUAL
16073: IFFALSE 16201
// begin case p3 of 1 :
16075: LD_VAR 0 3
16079: PUSH
16080: LD_INT 1
16082: DOUBLE
16083: EQUAL
16084: IFTRUE 16088
16086: GO 16095
16088: POP
// hHackUnlimitedResources ; 2 :
16089: CALL 28299 0 0
16093: GO 16201
16095: LD_INT 2
16097: DOUBLE
16098: EQUAL
16099: IFTRUE 16103
16101: GO 16110
16103: POP
// hHackSetLevel10 ; 3 :
16104: CALL 28432 0 0
16108: GO 16201
16110: LD_INT 3
16112: DOUBLE
16113: EQUAL
16114: IFTRUE 16118
16116: GO 16125
16118: POP
// hHackSetLevel10YourUnits ; 4 :
16119: CALL 28517 0 0
16123: GO 16201
16125: LD_INT 4
16127: DOUBLE
16128: EQUAL
16129: IFTRUE 16133
16131: GO 16140
16133: POP
// hHackInvincible ; 5 :
16134: CALL 28965 0 0
16138: GO 16201
16140: LD_INT 5
16142: DOUBLE
16143: EQUAL
16144: IFTRUE 16148
16146: GO 16155
16148: POP
// hHackInvisible ; 6 :
16149: CALL 29076 0 0
16153: GO 16201
16155: LD_INT 6
16157: DOUBLE
16158: EQUAL
16159: IFTRUE 16163
16161: GO 16170
16163: POP
// hHackChangeYourSide ; 7 :
16164: CALL 29133 0 0
16168: GO 16201
16170: LD_INT 7
16172: DOUBLE
16173: EQUAL
16174: IFTRUE 16178
16176: GO 16185
16178: POP
// hHackChangeUnitSide ; 8 :
16179: CALL 29175 0 0
16183: GO 16201
16185: LD_INT 8
16187: DOUBLE
16188: EQUAL
16189: IFTRUE 16193
16191: GO 16200
16193: POP
// hHackFog ; end ;
16194: CALL 29276 0 0
16198: GO 16201
16200: POP
// end ; end ;
16201: LD_VAR 0 7
16205: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
16206: GO 16208
16208: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16209: LD_STRING initStreamRollete();
16211: PPUSH
16212: CALL_OW 559
// InitStreamMode ;
16216: CALL 16228 0 0
// DefineStreamItems ( false ) ;
16220: LD_INT 0
16222: PPUSH
16223: CALL 16692 0 1
// end ;
16227: END
// function InitStreamMode ; begin
16228: LD_INT 0
16230: PPUSH
// streamModeActive := false ;
16231: LD_ADDR_EXP 36
16235: PUSH
16236: LD_INT 0
16238: ST_TO_ADDR
// normalCounter := 36 ;
16239: LD_ADDR_EXP 37
16243: PUSH
16244: LD_INT 36
16246: ST_TO_ADDR
// hardcoreCounter := 18 ;
16247: LD_ADDR_EXP 38
16251: PUSH
16252: LD_INT 18
16254: ST_TO_ADDR
// sRocket := false ;
16255: LD_ADDR_EXP 41
16259: PUSH
16260: LD_INT 0
16262: ST_TO_ADDR
// sSpeed := false ;
16263: LD_ADDR_EXP 40
16267: PUSH
16268: LD_INT 0
16270: ST_TO_ADDR
// sEngine := false ;
16271: LD_ADDR_EXP 42
16275: PUSH
16276: LD_INT 0
16278: ST_TO_ADDR
// sSpec := false ;
16279: LD_ADDR_EXP 39
16283: PUSH
16284: LD_INT 0
16286: ST_TO_ADDR
// sLevel := false ;
16287: LD_ADDR_EXP 43
16291: PUSH
16292: LD_INT 0
16294: ST_TO_ADDR
// sArmoury := false ;
16295: LD_ADDR_EXP 44
16299: PUSH
16300: LD_INT 0
16302: ST_TO_ADDR
// sRadar := false ;
16303: LD_ADDR_EXP 45
16307: PUSH
16308: LD_INT 0
16310: ST_TO_ADDR
// sBunker := false ;
16311: LD_ADDR_EXP 46
16315: PUSH
16316: LD_INT 0
16318: ST_TO_ADDR
// sHack := false ;
16319: LD_ADDR_EXP 47
16323: PUSH
16324: LD_INT 0
16326: ST_TO_ADDR
// sFire := false ;
16327: LD_ADDR_EXP 48
16331: PUSH
16332: LD_INT 0
16334: ST_TO_ADDR
// sRefresh := false ;
16335: LD_ADDR_EXP 49
16339: PUSH
16340: LD_INT 0
16342: ST_TO_ADDR
// sExp := false ;
16343: LD_ADDR_EXP 50
16347: PUSH
16348: LD_INT 0
16350: ST_TO_ADDR
// sDepot := false ;
16351: LD_ADDR_EXP 51
16355: PUSH
16356: LD_INT 0
16358: ST_TO_ADDR
// sFlag := false ;
16359: LD_ADDR_EXP 52
16363: PUSH
16364: LD_INT 0
16366: ST_TO_ADDR
// sKamikadze := false ;
16367: LD_ADDR_EXP 60
16371: PUSH
16372: LD_INT 0
16374: ST_TO_ADDR
// sTroll := false ;
16375: LD_ADDR_EXP 61
16379: PUSH
16380: LD_INT 0
16382: ST_TO_ADDR
// sSlow := false ;
16383: LD_ADDR_EXP 62
16387: PUSH
16388: LD_INT 0
16390: ST_TO_ADDR
// sLack := false ;
16391: LD_ADDR_EXP 63
16395: PUSH
16396: LD_INT 0
16398: ST_TO_ADDR
// sTank := false ;
16399: LD_ADDR_EXP 65
16403: PUSH
16404: LD_INT 0
16406: ST_TO_ADDR
// sRemote := false ;
16407: LD_ADDR_EXP 66
16411: PUSH
16412: LD_INT 0
16414: ST_TO_ADDR
// sPowell := false ;
16415: LD_ADDR_EXP 67
16419: PUSH
16420: LD_INT 0
16422: ST_TO_ADDR
// sTeleport := false ;
16423: LD_ADDR_EXP 70
16427: PUSH
16428: LD_INT 0
16430: ST_TO_ADDR
// sOilTower := false ;
16431: LD_ADDR_EXP 72
16435: PUSH
16436: LD_INT 0
16438: ST_TO_ADDR
// sShovel := false ;
16439: LD_ADDR_EXP 73
16443: PUSH
16444: LD_INT 0
16446: ST_TO_ADDR
// sSheik := false ;
16447: LD_ADDR_EXP 74
16451: PUSH
16452: LD_INT 0
16454: ST_TO_ADDR
// sEarthquake := false ;
16455: LD_ADDR_EXP 76
16459: PUSH
16460: LD_INT 0
16462: ST_TO_ADDR
// sAI := false ;
16463: LD_ADDR_EXP 77
16467: PUSH
16468: LD_INT 0
16470: ST_TO_ADDR
// sCargo := false ;
16471: LD_ADDR_EXP 80
16475: PUSH
16476: LD_INT 0
16478: ST_TO_ADDR
// sDLaser := false ;
16479: LD_ADDR_EXP 81
16483: PUSH
16484: LD_INT 0
16486: ST_TO_ADDR
// sExchange := false ;
16487: LD_ADDR_EXP 82
16491: PUSH
16492: LD_INT 0
16494: ST_TO_ADDR
// sFac := false ;
16495: LD_ADDR_EXP 83
16499: PUSH
16500: LD_INT 0
16502: ST_TO_ADDR
// sPower := false ;
16503: LD_ADDR_EXP 84
16507: PUSH
16508: LD_INT 0
16510: ST_TO_ADDR
// sRandom := false ;
16511: LD_ADDR_EXP 85
16515: PUSH
16516: LD_INT 0
16518: ST_TO_ADDR
// sShield := false ;
16519: LD_ADDR_EXP 86
16523: PUSH
16524: LD_INT 0
16526: ST_TO_ADDR
// sTime := false ;
16527: LD_ADDR_EXP 87
16531: PUSH
16532: LD_INT 0
16534: ST_TO_ADDR
// sTools := false ;
16535: LD_ADDR_EXP 88
16539: PUSH
16540: LD_INT 0
16542: ST_TO_ADDR
// sSold := false ;
16543: LD_ADDR_EXP 53
16547: PUSH
16548: LD_INT 0
16550: ST_TO_ADDR
// sDiff := false ;
16551: LD_ADDR_EXP 54
16555: PUSH
16556: LD_INT 0
16558: ST_TO_ADDR
// sFog := false ;
16559: LD_ADDR_EXP 57
16563: PUSH
16564: LD_INT 0
16566: ST_TO_ADDR
// sReset := false ;
16567: LD_ADDR_EXP 58
16571: PUSH
16572: LD_INT 0
16574: ST_TO_ADDR
// sSun := false ;
16575: LD_ADDR_EXP 59
16579: PUSH
16580: LD_INT 0
16582: ST_TO_ADDR
// sTiger := false ;
16583: LD_ADDR_EXP 55
16587: PUSH
16588: LD_INT 0
16590: ST_TO_ADDR
// sBomb := false ;
16591: LD_ADDR_EXP 56
16595: PUSH
16596: LD_INT 0
16598: ST_TO_ADDR
// sWound := false ;
16599: LD_ADDR_EXP 64
16603: PUSH
16604: LD_INT 0
16606: ST_TO_ADDR
// sBetray := false ;
16607: LD_ADDR_EXP 68
16611: PUSH
16612: LD_INT 0
16614: ST_TO_ADDR
// sContamin := false ;
16615: LD_ADDR_EXP 69
16619: PUSH
16620: LD_INT 0
16622: ST_TO_ADDR
// sOil := false ;
16623: LD_ADDR_EXP 71
16627: PUSH
16628: LD_INT 0
16630: ST_TO_ADDR
// sStu := false ;
16631: LD_ADDR_EXP 75
16635: PUSH
16636: LD_INT 0
16638: ST_TO_ADDR
// sBazooka := false ;
16639: LD_ADDR_EXP 78
16643: PUSH
16644: LD_INT 0
16646: ST_TO_ADDR
// sMortar := false ;
16647: LD_ADDR_EXP 79
16651: PUSH
16652: LD_INT 0
16654: ST_TO_ADDR
// sRanger := false ;
16655: LD_ADDR_EXP 89
16659: PUSH
16660: LD_INT 0
16662: ST_TO_ADDR
// sComputer := false ;
16663: LD_ADDR_EXP 90
16667: PUSH
16668: LD_INT 0
16670: ST_TO_ADDR
// s30 := false ;
16671: LD_ADDR_EXP 91
16675: PUSH
16676: LD_INT 0
16678: ST_TO_ADDR
// s60 := false ;
16679: LD_ADDR_EXP 92
16683: PUSH
16684: LD_INT 0
16686: ST_TO_ADDR
// end ;
16687: LD_VAR 0 1
16691: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
16692: LD_INT 0
16694: PPUSH
16695: PPUSH
16696: PPUSH
16697: PPUSH
16698: PPUSH
16699: PPUSH
16700: PPUSH
// result := [ ] ;
16701: LD_ADDR_VAR 0 2
16705: PUSH
16706: EMPTY
16707: ST_TO_ADDR
// if campaign_id = 1 then
16708: LD_OWVAR 69
16712: PUSH
16713: LD_INT 1
16715: EQUAL
16716: IFFALSE 19882
// begin case mission_number of 1 :
16718: LD_OWVAR 70
16722: PUSH
16723: LD_INT 1
16725: DOUBLE
16726: EQUAL
16727: IFTRUE 16731
16729: GO 16807
16731: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
16732: LD_ADDR_VAR 0 2
16736: PUSH
16737: LD_INT 2
16739: PUSH
16740: LD_INT 4
16742: PUSH
16743: LD_INT 11
16745: PUSH
16746: LD_INT 12
16748: PUSH
16749: LD_INT 15
16751: PUSH
16752: LD_INT 16
16754: PUSH
16755: LD_INT 22
16757: PUSH
16758: LD_INT 23
16760: PUSH
16761: LD_INT 26
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: PUSH
16775: LD_INT 101
16777: PUSH
16778: LD_INT 102
16780: PUSH
16781: LD_INT 106
16783: PUSH
16784: LD_INT 116
16786: PUSH
16787: LD_INT 117
16789: PUSH
16790: LD_INT 118
16792: PUSH
16793: EMPTY
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: PUSH
16801: EMPTY
16802: LIST
16803: LIST
16804: ST_TO_ADDR
16805: GO 19880
16807: LD_INT 2
16809: DOUBLE
16810: EQUAL
16811: IFTRUE 16815
16813: GO 16899
16815: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
16816: LD_ADDR_VAR 0 2
16820: PUSH
16821: LD_INT 2
16823: PUSH
16824: LD_INT 4
16826: PUSH
16827: LD_INT 11
16829: PUSH
16830: LD_INT 12
16832: PUSH
16833: LD_INT 15
16835: PUSH
16836: LD_INT 16
16838: PUSH
16839: LD_INT 22
16841: PUSH
16842: LD_INT 23
16844: PUSH
16845: LD_INT 26
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: PUSH
16859: LD_INT 101
16861: PUSH
16862: LD_INT 102
16864: PUSH
16865: LD_INT 105
16867: PUSH
16868: LD_INT 106
16870: PUSH
16871: LD_INT 108
16873: PUSH
16874: LD_INT 116
16876: PUSH
16877: LD_INT 117
16879: PUSH
16880: LD_INT 118
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: LIST
16892: PUSH
16893: EMPTY
16894: LIST
16895: LIST
16896: ST_TO_ADDR
16897: GO 19880
16899: LD_INT 3
16901: DOUBLE
16902: EQUAL
16903: IFTRUE 16907
16905: GO 16995
16907: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
16908: LD_ADDR_VAR 0 2
16912: PUSH
16913: LD_INT 2
16915: PUSH
16916: LD_INT 4
16918: PUSH
16919: LD_INT 5
16921: PUSH
16922: LD_INT 11
16924: PUSH
16925: LD_INT 12
16927: PUSH
16928: LD_INT 15
16930: PUSH
16931: LD_INT 16
16933: PUSH
16934: LD_INT 22
16936: PUSH
16937: LD_INT 26
16939: PUSH
16940: LD_INT 36
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: PUSH
16955: LD_INT 101
16957: PUSH
16958: LD_INT 102
16960: PUSH
16961: LD_INT 105
16963: PUSH
16964: LD_INT 106
16966: PUSH
16967: LD_INT 108
16969: PUSH
16970: LD_INT 116
16972: PUSH
16973: LD_INT 117
16975: PUSH
16976: LD_INT 118
16978: PUSH
16979: EMPTY
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: ST_TO_ADDR
16993: GO 19880
16995: LD_INT 4
16997: DOUBLE
16998: EQUAL
16999: IFTRUE 17003
17001: GO 17099
17003: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17004: LD_ADDR_VAR 0 2
17008: PUSH
17009: LD_INT 2
17011: PUSH
17012: LD_INT 4
17014: PUSH
17015: LD_INT 5
17017: PUSH
17018: LD_INT 8
17020: PUSH
17021: LD_INT 11
17023: PUSH
17024: LD_INT 12
17026: PUSH
17027: LD_INT 15
17029: PUSH
17030: LD_INT 16
17032: PUSH
17033: LD_INT 22
17035: PUSH
17036: LD_INT 23
17038: PUSH
17039: LD_INT 26
17041: PUSH
17042: LD_INT 36
17044: PUSH
17045: EMPTY
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: PUSH
17059: LD_INT 101
17061: PUSH
17062: LD_INT 102
17064: PUSH
17065: LD_INT 105
17067: PUSH
17068: LD_INT 106
17070: PUSH
17071: LD_INT 108
17073: PUSH
17074: LD_INT 116
17076: PUSH
17077: LD_INT 117
17079: PUSH
17080: LD_INT 118
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: ST_TO_ADDR
17097: GO 19880
17099: LD_INT 5
17101: DOUBLE
17102: EQUAL
17103: IFTRUE 17107
17105: GO 17219
17107: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
17108: LD_ADDR_VAR 0 2
17112: PUSH
17113: LD_INT 2
17115: PUSH
17116: LD_INT 4
17118: PUSH
17119: LD_INT 5
17121: PUSH
17122: LD_INT 6
17124: PUSH
17125: LD_INT 8
17127: PUSH
17128: LD_INT 11
17130: PUSH
17131: LD_INT 12
17133: PUSH
17134: LD_INT 15
17136: PUSH
17137: LD_INT 16
17139: PUSH
17140: LD_INT 22
17142: PUSH
17143: LD_INT 23
17145: PUSH
17146: LD_INT 25
17148: PUSH
17149: LD_INT 26
17151: PUSH
17152: LD_INT 36
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: PUSH
17171: LD_INT 101
17173: PUSH
17174: LD_INT 102
17176: PUSH
17177: LD_INT 105
17179: PUSH
17180: LD_INT 106
17182: PUSH
17183: LD_INT 108
17185: PUSH
17186: LD_INT 109
17188: PUSH
17189: LD_INT 112
17191: PUSH
17192: LD_INT 116
17194: PUSH
17195: LD_INT 117
17197: PUSH
17198: LD_INT 118
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: ST_TO_ADDR
17217: GO 19880
17219: LD_INT 6
17221: DOUBLE
17222: EQUAL
17223: IFTRUE 17227
17225: GO 17359
17227: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
17228: LD_ADDR_VAR 0 2
17232: PUSH
17233: LD_INT 2
17235: PUSH
17236: LD_INT 4
17238: PUSH
17239: LD_INT 5
17241: PUSH
17242: LD_INT 6
17244: PUSH
17245: LD_INT 8
17247: PUSH
17248: LD_INT 11
17250: PUSH
17251: LD_INT 12
17253: PUSH
17254: LD_INT 15
17256: PUSH
17257: LD_INT 16
17259: PUSH
17260: LD_INT 20
17262: PUSH
17263: LD_INT 21
17265: PUSH
17266: LD_INT 22
17268: PUSH
17269: LD_INT 23
17271: PUSH
17272: LD_INT 25
17274: PUSH
17275: LD_INT 26
17277: PUSH
17278: LD_INT 30
17280: PUSH
17281: LD_INT 31
17283: PUSH
17284: LD_INT 32
17286: PUSH
17287: LD_INT 36
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: PUSH
17311: LD_INT 101
17313: PUSH
17314: LD_INT 102
17316: PUSH
17317: LD_INT 105
17319: PUSH
17320: LD_INT 106
17322: PUSH
17323: LD_INT 108
17325: PUSH
17326: LD_INT 109
17328: PUSH
17329: LD_INT 112
17331: PUSH
17332: LD_INT 116
17334: PUSH
17335: LD_INT 117
17337: PUSH
17338: LD_INT 118
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: LIST
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: ST_TO_ADDR
17357: GO 19880
17359: LD_INT 7
17361: DOUBLE
17362: EQUAL
17363: IFTRUE 17367
17365: GO 17479
17367: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
17368: LD_ADDR_VAR 0 2
17372: PUSH
17373: LD_INT 2
17375: PUSH
17376: LD_INT 4
17378: PUSH
17379: LD_INT 5
17381: PUSH
17382: LD_INT 7
17384: PUSH
17385: LD_INT 11
17387: PUSH
17388: LD_INT 12
17390: PUSH
17391: LD_INT 15
17393: PUSH
17394: LD_INT 16
17396: PUSH
17397: LD_INT 20
17399: PUSH
17400: LD_INT 21
17402: PUSH
17403: LD_INT 22
17405: PUSH
17406: LD_INT 23
17408: PUSH
17409: LD_INT 25
17411: PUSH
17412: LD_INT 26
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: PUSH
17431: LD_INT 101
17433: PUSH
17434: LD_INT 102
17436: PUSH
17437: LD_INT 103
17439: PUSH
17440: LD_INT 105
17442: PUSH
17443: LD_INT 106
17445: PUSH
17446: LD_INT 108
17448: PUSH
17449: LD_INT 112
17451: PUSH
17452: LD_INT 116
17454: PUSH
17455: LD_INT 117
17457: PUSH
17458: LD_INT 118
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: ST_TO_ADDR
17477: GO 19880
17479: LD_INT 8
17481: DOUBLE
17482: EQUAL
17483: IFTRUE 17487
17485: GO 17627
17487: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
17488: LD_ADDR_VAR 0 2
17492: PUSH
17493: LD_INT 2
17495: PUSH
17496: LD_INT 4
17498: PUSH
17499: LD_INT 5
17501: PUSH
17502: LD_INT 6
17504: PUSH
17505: LD_INT 7
17507: PUSH
17508: LD_INT 8
17510: PUSH
17511: LD_INT 11
17513: PUSH
17514: LD_INT 12
17516: PUSH
17517: LD_INT 15
17519: PUSH
17520: LD_INT 16
17522: PUSH
17523: LD_INT 20
17525: PUSH
17526: LD_INT 21
17528: PUSH
17529: LD_INT 22
17531: PUSH
17532: LD_INT 23
17534: PUSH
17535: LD_INT 25
17537: PUSH
17538: LD_INT 26
17540: PUSH
17541: LD_INT 30
17543: PUSH
17544: LD_INT 31
17546: PUSH
17547: LD_INT 32
17549: PUSH
17550: LD_INT 36
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: PUSH
17575: LD_INT 101
17577: PUSH
17578: LD_INT 102
17580: PUSH
17581: LD_INT 103
17583: PUSH
17584: LD_INT 105
17586: PUSH
17587: LD_INT 106
17589: PUSH
17590: LD_INT 108
17592: PUSH
17593: LD_INT 109
17595: PUSH
17596: LD_INT 112
17598: PUSH
17599: LD_INT 116
17601: PUSH
17602: LD_INT 117
17604: PUSH
17605: LD_INT 118
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: ST_TO_ADDR
17625: GO 19880
17627: LD_INT 9
17629: DOUBLE
17630: EQUAL
17631: IFTRUE 17635
17633: GO 17783
17635: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17636: LD_ADDR_VAR 0 2
17640: PUSH
17641: LD_INT 2
17643: PUSH
17644: LD_INT 4
17646: PUSH
17647: LD_INT 5
17649: PUSH
17650: LD_INT 6
17652: PUSH
17653: LD_INT 7
17655: PUSH
17656: LD_INT 8
17658: PUSH
17659: LD_INT 11
17661: PUSH
17662: LD_INT 12
17664: PUSH
17665: LD_INT 15
17667: PUSH
17668: LD_INT 16
17670: PUSH
17671: LD_INT 20
17673: PUSH
17674: LD_INT 21
17676: PUSH
17677: LD_INT 22
17679: PUSH
17680: LD_INT 23
17682: PUSH
17683: LD_INT 25
17685: PUSH
17686: LD_INT 26
17688: PUSH
17689: LD_INT 28
17691: PUSH
17692: LD_INT 30
17694: PUSH
17695: LD_INT 31
17697: PUSH
17698: LD_INT 32
17700: PUSH
17701: LD_INT 36
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: PUSH
17727: LD_INT 101
17729: PUSH
17730: LD_INT 102
17732: PUSH
17733: LD_INT 103
17735: PUSH
17736: LD_INT 105
17738: PUSH
17739: LD_INT 106
17741: PUSH
17742: LD_INT 108
17744: PUSH
17745: LD_INT 109
17747: PUSH
17748: LD_INT 112
17750: PUSH
17751: LD_INT 114
17753: PUSH
17754: LD_INT 116
17756: PUSH
17757: LD_INT 117
17759: PUSH
17760: LD_INT 118
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: ST_TO_ADDR
17781: GO 19880
17783: LD_INT 10
17785: DOUBLE
17786: EQUAL
17787: IFTRUE 17791
17789: GO 17987
17791: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
17792: LD_ADDR_VAR 0 2
17796: PUSH
17797: LD_INT 2
17799: PUSH
17800: LD_INT 4
17802: PUSH
17803: LD_INT 5
17805: PUSH
17806: LD_INT 6
17808: PUSH
17809: LD_INT 7
17811: PUSH
17812: LD_INT 8
17814: PUSH
17815: LD_INT 9
17817: PUSH
17818: LD_INT 10
17820: PUSH
17821: LD_INT 11
17823: PUSH
17824: LD_INT 12
17826: PUSH
17827: LD_INT 13
17829: PUSH
17830: LD_INT 14
17832: PUSH
17833: LD_INT 15
17835: PUSH
17836: LD_INT 16
17838: PUSH
17839: LD_INT 17
17841: PUSH
17842: LD_INT 18
17844: PUSH
17845: LD_INT 19
17847: PUSH
17848: LD_INT 20
17850: PUSH
17851: LD_INT 21
17853: PUSH
17854: LD_INT 22
17856: PUSH
17857: LD_INT 23
17859: PUSH
17860: LD_INT 24
17862: PUSH
17863: LD_INT 25
17865: PUSH
17866: LD_INT 26
17868: PUSH
17869: LD_INT 28
17871: PUSH
17872: LD_INT 30
17874: PUSH
17875: LD_INT 31
17877: PUSH
17878: LD_INT 32
17880: PUSH
17881: LD_INT 36
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: PUSH
17915: LD_INT 101
17917: PUSH
17918: LD_INT 102
17920: PUSH
17921: LD_INT 103
17923: PUSH
17924: LD_INT 104
17926: PUSH
17927: LD_INT 105
17929: PUSH
17930: LD_INT 106
17932: PUSH
17933: LD_INT 107
17935: PUSH
17936: LD_INT 108
17938: PUSH
17939: LD_INT 109
17941: PUSH
17942: LD_INT 110
17944: PUSH
17945: LD_INT 111
17947: PUSH
17948: LD_INT 112
17950: PUSH
17951: LD_INT 114
17953: PUSH
17954: LD_INT 116
17956: PUSH
17957: LD_INT 117
17959: PUSH
17960: LD_INT 118
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: ST_TO_ADDR
17985: GO 19880
17987: LD_INT 11
17989: DOUBLE
17990: EQUAL
17991: IFTRUE 17995
17993: GO 18199
17995: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
17996: LD_ADDR_VAR 0 2
18000: PUSH
18001: LD_INT 2
18003: PUSH
18004: LD_INT 3
18006: PUSH
18007: LD_INT 4
18009: PUSH
18010: LD_INT 5
18012: PUSH
18013: LD_INT 6
18015: PUSH
18016: LD_INT 7
18018: PUSH
18019: LD_INT 8
18021: PUSH
18022: LD_INT 9
18024: PUSH
18025: LD_INT 10
18027: PUSH
18028: LD_INT 11
18030: PUSH
18031: LD_INT 12
18033: PUSH
18034: LD_INT 13
18036: PUSH
18037: LD_INT 14
18039: PUSH
18040: LD_INT 15
18042: PUSH
18043: LD_INT 16
18045: PUSH
18046: LD_INT 17
18048: PUSH
18049: LD_INT 18
18051: PUSH
18052: LD_INT 19
18054: PUSH
18055: LD_INT 20
18057: PUSH
18058: LD_INT 21
18060: PUSH
18061: LD_INT 22
18063: PUSH
18064: LD_INT 23
18066: PUSH
18067: LD_INT 24
18069: PUSH
18070: LD_INT 25
18072: PUSH
18073: LD_INT 26
18075: PUSH
18076: LD_INT 28
18078: PUSH
18079: LD_INT 30
18081: PUSH
18082: LD_INT 31
18084: PUSH
18085: LD_INT 32
18087: PUSH
18088: LD_INT 34
18090: PUSH
18091: LD_INT 36
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 101
18129: PUSH
18130: LD_INT 102
18132: PUSH
18133: LD_INT 103
18135: PUSH
18136: LD_INT 104
18138: PUSH
18139: LD_INT 105
18141: PUSH
18142: LD_INT 106
18144: PUSH
18145: LD_INT 107
18147: PUSH
18148: LD_INT 108
18150: PUSH
18151: LD_INT 109
18153: PUSH
18154: LD_INT 110
18156: PUSH
18157: LD_INT 111
18159: PUSH
18160: LD_INT 112
18162: PUSH
18163: LD_INT 114
18165: PUSH
18166: LD_INT 116
18168: PUSH
18169: LD_INT 117
18171: PUSH
18172: LD_INT 118
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: ST_TO_ADDR
18197: GO 19880
18199: LD_INT 12
18201: DOUBLE
18202: EQUAL
18203: IFTRUE 18207
18205: GO 18427
18207: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18208: LD_ADDR_VAR 0 2
18212: PUSH
18213: LD_INT 1
18215: PUSH
18216: LD_INT 2
18218: PUSH
18219: LD_INT 3
18221: PUSH
18222: LD_INT 4
18224: PUSH
18225: LD_INT 5
18227: PUSH
18228: LD_INT 6
18230: PUSH
18231: LD_INT 7
18233: PUSH
18234: LD_INT 8
18236: PUSH
18237: LD_INT 9
18239: PUSH
18240: LD_INT 10
18242: PUSH
18243: LD_INT 11
18245: PUSH
18246: LD_INT 12
18248: PUSH
18249: LD_INT 13
18251: PUSH
18252: LD_INT 14
18254: PUSH
18255: LD_INT 15
18257: PUSH
18258: LD_INT 16
18260: PUSH
18261: LD_INT 17
18263: PUSH
18264: LD_INT 18
18266: PUSH
18267: LD_INT 19
18269: PUSH
18270: LD_INT 20
18272: PUSH
18273: LD_INT 21
18275: PUSH
18276: LD_INT 22
18278: PUSH
18279: LD_INT 23
18281: PUSH
18282: LD_INT 24
18284: PUSH
18285: LD_INT 25
18287: PUSH
18288: LD_INT 26
18290: PUSH
18291: LD_INT 27
18293: PUSH
18294: LD_INT 28
18296: PUSH
18297: LD_INT 30
18299: PUSH
18300: LD_INT 31
18302: PUSH
18303: LD_INT 32
18305: PUSH
18306: LD_INT 33
18308: PUSH
18309: LD_INT 34
18311: PUSH
18312: LD_INT 36
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: PUSH
18351: LD_INT 101
18353: PUSH
18354: LD_INT 102
18356: PUSH
18357: LD_INT 103
18359: PUSH
18360: LD_INT 104
18362: PUSH
18363: LD_INT 105
18365: PUSH
18366: LD_INT 106
18368: PUSH
18369: LD_INT 107
18371: PUSH
18372: LD_INT 108
18374: PUSH
18375: LD_INT 109
18377: PUSH
18378: LD_INT 110
18380: PUSH
18381: LD_INT 111
18383: PUSH
18384: LD_INT 112
18386: PUSH
18387: LD_INT 113
18389: PUSH
18390: LD_INT 114
18392: PUSH
18393: LD_INT 116
18395: PUSH
18396: LD_INT 117
18398: PUSH
18399: LD_INT 118
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: ST_TO_ADDR
18425: GO 19880
18427: LD_INT 13
18429: DOUBLE
18430: EQUAL
18431: IFTRUE 18435
18433: GO 18643
18435: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
18436: LD_ADDR_VAR 0 2
18440: PUSH
18441: LD_INT 1
18443: PUSH
18444: LD_INT 2
18446: PUSH
18447: LD_INT 3
18449: PUSH
18450: LD_INT 4
18452: PUSH
18453: LD_INT 5
18455: PUSH
18456: LD_INT 8
18458: PUSH
18459: LD_INT 9
18461: PUSH
18462: LD_INT 10
18464: PUSH
18465: LD_INT 11
18467: PUSH
18468: LD_INT 12
18470: PUSH
18471: LD_INT 14
18473: PUSH
18474: LD_INT 15
18476: PUSH
18477: LD_INT 16
18479: PUSH
18480: LD_INT 17
18482: PUSH
18483: LD_INT 18
18485: PUSH
18486: LD_INT 19
18488: PUSH
18489: LD_INT 20
18491: PUSH
18492: LD_INT 21
18494: PUSH
18495: LD_INT 22
18497: PUSH
18498: LD_INT 23
18500: PUSH
18501: LD_INT 24
18503: PUSH
18504: LD_INT 25
18506: PUSH
18507: LD_INT 26
18509: PUSH
18510: LD_INT 27
18512: PUSH
18513: LD_INT 28
18515: PUSH
18516: LD_INT 30
18518: PUSH
18519: LD_INT 31
18521: PUSH
18522: LD_INT 32
18524: PUSH
18525: LD_INT 33
18527: PUSH
18528: LD_INT 34
18530: PUSH
18531: LD_INT 36
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: LIST
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: PUSH
18567: LD_INT 101
18569: PUSH
18570: LD_INT 102
18572: PUSH
18573: LD_INT 103
18575: PUSH
18576: LD_INT 104
18578: PUSH
18579: LD_INT 105
18581: PUSH
18582: LD_INT 106
18584: PUSH
18585: LD_INT 107
18587: PUSH
18588: LD_INT 108
18590: PUSH
18591: LD_INT 109
18593: PUSH
18594: LD_INT 110
18596: PUSH
18597: LD_INT 111
18599: PUSH
18600: LD_INT 112
18602: PUSH
18603: LD_INT 113
18605: PUSH
18606: LD_INT 114
18608: PUSH
18609: LD_INT 116
18611: PUSH
18612: LD_INT 117
18614: PUSH
18615: LD_INT 118
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: ST_TO_ADDR
18641: GO 19880
18643: LD_INT 14
18645: DOUBLE
18646: EQUAL
18647: IFTRUE 18651
18649: GO 18875
18651: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18652: LD_ADDR_VAR 0 2
18656: PUSH
18657: LD_INT 1
18659: PUSH
18660: LD_INT 2
18662: PUSH
18663: LD_INT 3
18665: PUSH
18666: LD_INT 4
18668: PUSH
18669: LD_INT 5
18671: PUSH
18672: LD_INT 6
18674: PUSH
18675: LD_INT 7
18677: PUSH
18678: LD_INT 8
18680: PUSH
18681: LD_INT 9
18683: PUSH
18684: LD_INT 10
18686: PUSH
18687: LD_INT 11
18689: PUSH
18690: LD_INT 12
18692: PUSH
18693: LD_INT 13
18695: PUSH
18696: LD_INT 14
18698: PUSH
18699: LD_INT 15
18701: PUSH
18702: LD_INT 16
18704: PUSH
18705: LD_INT 17
18707: PUSH
18708: LD_INT 18
18710: PUSH
18711: LD_INT 19
18713: PUSH
18714: LD_INT 20
18716: PUSH
18717: LD_INT 21
18719: PUSH
18720: LD_INT 22
18722: PUSH
18723: LD_INT 23
18725: PUSH
18726: LD_INT 24
18728: PUSH
18729: LD_INT 25
18731: PUSH
18732: LD_INT 26
18734: PUSH
18735: LD_INT 27
18737: PUSH
18738: LD_INT 28
18740: PUSH
18741: LD_INT 29
18743: PUSH
18744: LD_INT 30
18746: PUSH
18747: LD_INT 31
18749: PUSH
18750: LD_INT 32
18752: PUSH
18753: LD_INT 33
18755: PUSH
18756: LD_INT 34
18758: PUSH
18759: LD_INT 36
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: LIST
18766: LIST
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: PUSH
18799: LD_INT 101
18801: PUSH
18802: LD_INT 102
18804: PUSH
18805: LD_INT 103
18807: PUSH
18808: LD_INT 104
18810: PUSH
18811: LD_INT 105
18813: PUSH
18814: LD_INT 106
18816: PUSH
18817: LD_INT 107
18819: PUSH
18820: LD_INT 108
18822: PUSH
18823: LD_INT 109
18825: PUSH
18826: LD_INT 110
18828: PUSH
18829: LD_INT 111
18831: PUSH
18832: LD_INT 112
18834: PUSH
18835: LD_INT 113
18837: PUSH
18838: LD_INT 114
18840: PUSH
18841: LD_INT 116
18843: PUSH
18844: LD_INT 117
18846: PUSH
18847: LD_INT 118
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: ST_TO_ADDR
18873: GO 19880
18875: LD_INT 15
18877: DOUBLE
18878: EQUAL
18879: IFTRUE 18883
18881: GO 19107
18883: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
18884: LD_ADDR_VAR 0 2
18888: PUSH
18889: LD_INT 1
18891: PUSH
18892: LD_INT 2
18894: PUSH
18895: LD_INT 3
18897: PUSH
18898: LD_INT 4
18900: PUSH
18901: LD_INT 5
18903: PUSH
18904: LD_INT 6
18906: PUSH
18907: LD_INT 7
18909: PUSH
18910: LD_INT 8
18912: PUSH
18913: LD_INT 9
18915: PUSH
18916: LD_INT 10
18918: PUSH
18919: LD_INT 11
18921: PUSH
18922: LD_INT 12
18924: PUSH
18925: LD_INT 13
18927: PUSH
18928: LD_INT 14
18930: PUSH
18931: LD_INT 15
18933: PUSH
18934: LD_INT 16
18936: PUSH
18937: LD_INT 17
18939: PUSH
18940: LD_INT 18
18942: PUSH
18943: LD_INT 19
18945: PUSH
18946: LD_INT 20
18948: PUSH
18949: LD_INT 21
18951: PUSH
18952: LD_INT 22
18954: PUSH
18955: LD_INT 23
18957: PUSH
18958: LD_INT 24
18960: PUSH
18961: LD_INT 25
18963: PUSH
18964: LD_INT 26
18966: PUSH
18967: LD_INT 27
18969: PUSH
18970: LD_INT 28
18972: PUSH
18973: LD_INT 29
18975: PUSH
18976: LD_INT 30
18978: PUSH
18979: LD_INT 31
18981: PUSH
18982: LD_INT 32
18984: PUSH
18985: LD_INT 33
18987: PUSH
18988: LD_INT 34
18990: PUSH
18991: LD_INT 36
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: PUSH
19031: LD_INT 101
19033: PUSH
19034: LD_INT 102
19036: PUSH
19037: LD_INT 103
19039: PUSH
19040: LD_INT 104
19042: PUSH
19043: LD_INT 105
19045: PUSH
19046: LD_INT 106
19048: PUSH
19049: LD_INT 107
19051: PUSH
19052: LD_INT 108
19054: PUSH
19055: LD_INT 109
19057: PUSH
19058: LD_INT 110
19060: PUSH
19061: LD_INT 111
19063: PUSH
19064: LD_INT 112
19066: PUSH
19067: LD_INT 113
19069: PUSH
19070: LD_INT 114
19072: PUSH
19073: LD_INT 116
19075: PUSH
19076: LD_INT 117
19078: PUSH
19079: LD_INT 118
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: ST_TO_ADDR
19105: GO 19880
19107: LD_INT 16
19109: DOUBLE
19110: EQUAL
19111: IFTRUE 19115
19113: GO 19251
19115: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19116: LD_ADDR_VAR 0 2
19120: PUSH
19121: LD_INT 2
19123: PUSH
19124: LD_INT 4
19126: PUSH
19127: LD_INT 5
19129: PUSH
19130: LD_INT 7
19132: PUSH
19133: LD_INT 11
19135: PUSH
19136: LD_INT 12
19138: PUSH
19139: LD_INT 15
19141: PUSH
19142: LD_INT 16
19144: PUSH
19145: LD_INT 20
19147: PUSH
19148: LD_INT 21
19150: PUSH
19151: LD_INT 22
19153: PUSH
19154: LD_INT 23
19156: PUSH
19157: LD_INT 25
19159: PUSH
19160: LD_INT 26
19162: PUSH
19163: LD_INT 30
19165: PUSH
19166: LD_INT 31
19168: PUSH
19169: LD_INT 32
19171: PUSH
19172: LD_INT 33
19174: PUSH
19175: LD_INT 34
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 101
19201: PUSH
19202: LD_INT 102
19204: PUSH
19205: LD_INT 103
19207: PUSH
19208: LD_INT 106
19210: PUSH
19211: LD_INT 108
19213: PUSH
19214: LD_INT 112
19216: PUSH
19217: LD_INT 113
19219: PUSH
19220: LD_INT 114
19222: PUSH
19223: LD_INT 116
19225: PUSH
19226: LD_INT 117
19228: PUSH
19229: LD_INT 118
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: ST_TO_ADDR
19249: GO 19880
19251: LD_INT 17
19253: DOUBLE
19254: EQUAL
19255: IFTRUE 19259
19257: GO 19483
19259: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
19260: LD_ADDR_VAR 0 2
19264: PUSH
19265: LD_INT 1
19267: PUSH
19268: LD_INT 2
19270: PUSH
19271: LD_INT 3
19273: PUSH
19274: LD_INT 4
19276: PUSH
19277: LD_INT 5
19279: PUSH
19280: LD_INT 6
19282: PUSH
19283: LD_INT 7
19285: PUSH
19286: LD_INT 8
19288: PUSH
19289: LD_INT 9
19291: PUSH
19292: LD_INT 10
19294: PUSH
19295: LD_INT 11
19297: PUSH
19298: LD_INT 12
19300: PUSH
19301: LD_INT 13
19303: PUSH
19304: LD_INT 14
19306: PUSH
19307: LD_INT 15
19309: PUSH
19310: LD_INT 16
19312: PUSH
19313: LD_INT 17
19315: PUSH
19316: LD_INT 18
19318: PUSH
19319: LD_INT 19
19321: PUSH
19322: LD_INT 20
19324: PUSH
19325: LD_INT 21
19327: PUSH
19328: LD_INT 22
19330: PUSH
19331: LD_INT 23
19333: PUSH
19334: LD_INT 24
19336: PUSH
19337: LD_INT 25
19339: PUSH
19340: LD_INT 26
19342: PUSH
19343: LD_INT 27
19345: PUSH
19346: LD_INT 28
19348: PUSH
19349: LD_INT 29
19351: PUSH
19352: LD_INT 30
19354: PUSH
19355: LD_INT 31
19357: PUSH
19358: LD_INT 32
19360: PUSH
19361: LD_INT 33
19363: PUSH
19364: LD_INT 34
19366: PUSH
19367: LD_INT 36
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: PUSH
19407: LD_INT 101
19409: PUSH
19410: LD_INT 102
19412: PUSH
19413: LD_INT 103
19415: PUSH
19416: LD_INT 104
19418: PUSH
19419: LD_INT 105
19421: PUSH
19422: LD_INT 106
19424: PUSH
19425: LD_INT 107
19427: PUSH
19428: LD_INT 108
19430: PUSH
19431: LD_INT 109
19433: PUSH
19434: LD_INT 110
19436: PUSH
19437: LD_INT 111
19439: PUSH
19440: LD_INT 112
19442: PUSH
19443: LD_INT 113
19445: PUSH
19446: LD_INT 114
19448: PUSH
19449: LD_INT 116
19451: PUSH
19452: LD_INT 117
19454: PUSH
19455: LD_INT 118
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: ST_TO_ADDR
19481: GO 19880
19483: LD_INT 18
19485: DOUBLE
19486: EQUAL
19487: IFTRUE 19491
19489: GO 19639
19491: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
19492: LD_ADDR_VAR 0 2
19496: PUSH
19497: LD_INT 2
19499: PUSH
19500: LD_INT 4
19502: PUSH
19503: LD_INT 5
19505: PUSH
19506: LD_INT 7
19508: PUSH
19509: LD_INT 11
19511: PUSH
19512: LD_INT 12
19514: PUSH
19515: LD_INT 15
19517: PUSH
19518: LD_INT 16
19520: PUSH
19521: LD_INT 20
19523: PUSH
19524: LD_INT 21
19526: PUSH
19527: LD_INT 22
19529: PUSH
19530: LD_INT 23
19532: PUSH
19533: LD_INT 25
19535: PUSH
19536: LD_INT 26
19538: PUSH
19539: LD_INT 30
19541: PUSH
19542: LD_INT 31
19544: PUSH
19545: LD_INT 32
19547: PUSH
19548: LD_INT 33
19550: PUSH
19551: LD_INT 34
19553: PUSH
19554: LD_INT 35
19556: PUSH
19557: LD_INT 36
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: PUSH
19583: LD_INT 101
19585: PUSH
19586: LD_INT 102
19588: PUSH
19589: LD_INT 103
19591: PUSH
19592: LD_INT 106
19594: PUSH
19595: LD_INT 108
19597: PUSH
19598: LD_INT 112
19600: PUSH
19601: LD_INT 113
19603: PUSH
19604: LD_INT 114
19606: PUSH
19607: LD_INT 115
19609: PUSH
19610: LD_INT 116
19612: PUSH
19613: LD_INT 117
19615: PUSH
19616: LD_INT 118
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: ST_TO_ADDR
19637: GO 19880
19639: LD_INT 19
19641: DOUBLE
19642: EQUAL
19643: IFTRUE 19647
19645: GO 19879
19647: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19648: LD_ADDR_VAR 0 2
19652: PUSH
19653: LD_INT 1
19655: PUSH
19656: LD_INT 2
19658: PUSH
19659: LD_INT 3
19661: PUSH
19662: LD_INT 4
19664: PUSH
19665: LD_INT 5
19667: PUSH
19668: LD_INT 6
19670: PUSH
19671: LD_INT 7
19673: PUSH
19674: LD_INT 8
19676: PUSH
19677: LD_INT 9
19679: PUSH
19680: LD_INT 10
19682: PUSH
19683: LD_INT 11
19685: PUSH
19686: LD_INT 12
19688: PUSH
19689: LD_INT 13
19691: PUSH
19692: LD_INT 14
19694: PUSH
19695: LD_INT 15
19697: PUSH
19698: LD_INT 16
19700: PUSH
19701: LD_INT 17
19703: PUSH
19704: LD_INT 18
19706: PUSH
19707: LD_INT 19
19709: PUSH
19710: LD_INT 20
19712: PUSH
19713: LD_INT 21
19715: PUSH
19716: LD_INT 22
19718: PUSH
19719: LD_INT 23
19721: PUSH
19722: LD_INT 24
19724: PUSH
19725: LD_INT 25
19727: PUSH
19728: LD_INT 26
19730: PUSH
19731: LD_INT 27
19733: PUSH
19734: LD_INT 28
19736: PUSH
19737: LD_INT 29
19739: PUSH
19740: LD_INT 30
19742: PUSH
19743: LD_INT 31
19745: PUSH
19746: LD_INT 32
19748: PUSH
19749: LD_INT 33
19751: PUSH
19752: LD_INT 34
19754: PUSH
19755: LD_INT 35
19757: PUSH
19758: LD_INT 36
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: PUSH
19799: LD_INT 101
19801: PUSH
19802: LD_INT 102
19804: PUSH
19805: LD_INT 103
19807: PUSH
19808: LD_INT 104
19810: PUSH
19811: LD_INT 105
19813: PUSH
19814: LD_INT 106
19816: PUSH
19817: LD_INT 107
19819: PUSH
19820: LD_INT 108
19822: PUSH
19823: LD_INT 109
19825: PUSH
19826: LD_INT 110
19828: PUSH
19829: LD_INT 111
19831: PUSH
19832: LD_INT 112
19834: PUSH
19835: LD_INT 113
19837: PUSH
19838: LD_INT 114
19840: PUSH
19841: LD_INT 115
19843: PUSH
19844: LD_INT 116
19846: PUSH
19847: LD_INT 117
19849: PUSH
19850: LD_INT 118
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: ST_TO_ADDR
19877: GO 19880
19879: POP
// end else
19880: GO 20111
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
19882: LD_ADDR_VAR 0 2
19886: PUSH
19887: LD_INT 1
19889: PUSH
19890: LD_INT 2
19892: PUSH
19893: LD_INT 3
19895: PUSH
19896: LD_INT 4
19898: PUSH
19899: LD_INT 5
19901: PUSH
19902: LD_INT 6
19904: PUSH
19905: LD_INT 7
19907: PUSH
19908: LD_INT 8
19910: PUSH
19911: LD_INT 9
19913: PUSH
19914: LD_INT 10
19916: PUSH
19917: LD_INT 11
19919: PUSH
19920: LD_INT 12
19922: PUSH
19923: LD_INT 13
19925: PUSH
19926: LD_INT 14
19928: PUSH
19929: LD_INT 15
19931: PUSH
19932: LD_INT 16
19934: PUSH
19935: LD_INT 17
19937: PUSH
19938: LD_INT 18
19940: PUSH
19941: LD_INT 19
19943: PUSH
19944: LD_INT 20
19946: PUSH
19947: LD_INT 21
19949: PUSH
19950: LD_INT 22
19952: PUSH
19953: LD_INT 23
19955: PUSH
19956: LD_INT 24
19958: PUSH
19959: LD_INT 25
19961: PUSH
19962: LD_INT 26
19964: PUSH
19965: LD_INT 27
19967: PUSH
19968: LD_INT 28
19970: PUSH
19971: LD_INT 29
19973: PUSH
19974: LD_INT 30
19976: PUSH
19977: LD_INT 31
19979: PUSH
19980: LD_INT 32
19982: PUSH
19983: LD_INT 33
19985: PUSH
19986: LD_INT 34
19988: PUSH
19989: LD_INT 35
19991: PUSH
19992: LD_INT 36
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: PUSH
20033: LD_INT 101
20035: PUSH
20036: LD_INT 102
20038: PUSH
20039: LD_INT 103
20041: PUSH
20042: LD_INT 104
20044: PUSH
20045: LD_INT 105
20047: PUSH
20048: LD_INT 106
20050: PUSH
20051: LD_INT 107
20053: PUSH
20054: LD_INT 108
20056: PUSH
20057: LD_INT 109
20059: PUSH
20060: LD_INT 110
20062: PUSH
20063: LD_INT 111
20065: PUSH
20066: LD_INT 112
20068: PUSH
20069: LD_INT 113
20071: PUSH
20072: LD_INT 114
20074: PUSH
20075: LD_INT 115
20077: PUSH
20078: LD_INT 116
20080: PUSH
20081: LD_INT 117
20083: PUSH
20084: LD_INT 118
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: ST_TO_ADDR
// if result then
20111: LD_VAR 0 2
20115: IFFALSE 20901
// begin normal :=  ;
20117: LD_ADDR_VAR 0 5
20121: PUSH
20122: LD_STRING 
20124: ST_TO_ADDR
// hardcore :=  ;
20125: LD_ADDR_VAR 0 6
20129: PUSH
20130: LD_STRING 
20132: ST_TO_ADDR
// active :=  ;
20133: LD_ADDR_VAR 0 7
20137: PUSH
20138: LD_STRING 
20140: ST_TO_ADDR
// for i = 1 to normalCounter do
20141: LD_ADDR_VAR 0 8
20145: PUSH
20146: DOUBLE
20147: LD_INT 1
20149: DEC
20150: ST_TO_ADDR
20151: LD_EXP 37
20155: PUSH
20156: FOR_TO
20157: IFFALSE 20258
// begin tmp := 0 ;
20159: LD_ADDR_VAR 0 3
20163: PUSH
20164: LD_STRING 0
20166: ST_TO_ADDR
// if result [ 1 ] then
20167: LD_VAR 0 2
20171: PUSH
20172: LD_INT 1
20174: ARRAY
20175: IFFALSE 20240
// if result [ 1 ] [ 1 ] = i then
20177: LD_VAR 0 2
20181: PUSH
20182: LD_INT 1
20184: ARRAY
20185: PUSH
20186: LD_INT 1
20188: ARRAY
20189: PUSH
20190: LD_VAR 0 8
20194: EQUAL
20195: IFFALSE 20240
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20197: LD_ADDR_VAR 0 2
20201: PUSH
20202: LD_VAR 0 2
20206: PPUSH
20207: LD_INT 1
20209: PPUSH
20210: LD_VAR 0 2
20214: PUSH
20215: LD_INT 1
20217: ARRAY
20218: PPUSH
20219: LD_INT 1
20221: PPUSH
20222: CALL_OW 3
20226: PPUSH
20227: CALL_OW 1
20231: ST_TO_ADDR
// tmp := 1 ;
20232: LD_ADDR_VAR 0 3
20236: PUSH
20237: LD_STRING 1
20239: ST_TO_ADDR
// end ; normal := normal & tmp ;
20240: LD_ADDR_VAR 0 5
20244: PUSH
20245: LD_VAR 0 5
20249: PUSH
20250: LD_VAR 0 3
20254: STR
20255: ST_TO_ADDR
// end ;
20256: GO 20156
20258: POP
20259: POP
// for i = 1 to hardcoreCounter do
20260: LD_ADDR_VAR 0 8
20264: PUSH
20265: DOUBLE
20266: LD_INT 1
20268: DEC
20269: ST_TO_ADDR
20270: LD_EXP 38
20274: PUSH
20275: FOR_TO
20276: IFFALSE 20381
// begin tmp := 0 ;
20278: LD_ADDR_VAR 0 3
20282: PUSH
20283: LD_STRING 0
20285: ST_TO_ADDR
// if result [ 2 ] then
20286: LD_VAR 0 2
20290: PUSH
20291: LD_INT 2
20293: ARRAY
20294: IFFALSE 20363
// if result [ 2 ] [ 1 ] = 100 + i then
20296: LD_VAR 0 2
20300: PUSH
20301: LD_INT 2
20303: ARRAY
20304: PUSH
20305: LD_INT 1
20307: ARRAY
20308: PUSH
20309: LD_INT 100
20311: PUSH
20312: LD_VAR 0 8
20316: PLUS
20317: EQUAL
20318: IFFALSE 20363
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20320: LD_ADDR_VAR 0 2
20324: PUSH
20325: LD_VAR 0 2
20329: PPUSH
20330: LD_INT 2
20332: PPUSH
20333: LD_VAR 0 2
20337: PUSH
20338: LD_INT 2
20340: ARRAY
20341: PPUSH
20342: LD_INT 1
20344: PPUSH
20345: CALL_OW 3
20349: PPUSH
20350: CALL_OW 1
20354: ST_TO_ADDR
// tmp := 1 ;
20355: LD_ADDR_VAR 0 3
20359: PUSH
20360: LD_STRING 1
20362: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20363: LD_ADDR_VAR 0 6
20367: PUSH
20368: LD_VAR 0 6
20372: PUSH
20373: LD_VAR 0 3
20377: STR
20378: ST_TO_ADDR
// end ;
20379: GO 20275
20381: POP
20382: POP
// if isGameLoad then
20383: LD_VAR 0 1
20387: IFFALSE 20862
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
20389: LD_ADDR_VAR 0 4
20393: PUSH
20394: LD_EXP 41
20398: PUSH
20399: LD_EXP 40
20403: PUSH
20404: LD_EXP 42
20408: PUSH
20409: LD_EXP 39
20413: PUSH
20414: LD_EXP 43
20418: PUSH
20419: LD_EXP 44
20423: PUSH
20424: LD_EXP 45
20428: PUSH
20429: LD_EXP 46
20433: PUSH
20434: LD_EXP 47
20438: PUSH
20439: LD_EXP 48
20443: PUSH
20444: LD_EXP 49
20448: PUSH
20449: LD_EXP 50
20453: PUSH
20454: LD_EXP 51
20458: PUSH
20459: LD_EXP 52
20463: PUSH
20464: LD_EXP 60
20468: PUSH
20469: LD_EXP 61
20473: PUSH
20474: LD_EXP 62
20478: PUSH
20479: LD_EXP 63
20483: PUSH
20484: LD_EXP 65
20488: PUSH
20489: LD_EXP 66
20493: PUSH
20494: LD_EXP 67
20498: PUSH
20499: LD_EXP 70
20503: PUSH
20504: LD_EXP 72
20508: PUSH
20509: LD_EXP 73
20513: PUSH
20514: LD_EXP 74
20518: PUSH
20519: LD_EXP 76
20523: PUSH
20524: LD_EXP 77
20528: PUSH
20529: LD_EXP 80
20533: PUSH
20534: LD_EXP 81
20538: PUSH
20539: LD_EXP 82
20543: PUSH
20544: LD_EXP 83
20548: PUSH
20549: LD_EXP 84
20553: PUSH
20554: LD_EXP 85
20558: PUSH
20559: LD_EXP 86
20563: PUSH
20564: LD_EXP 87
20568: PUSH
20569: LD_EXP 88
20573: PUSH
20574: LD_EXP 53
20578: PUSH
20579: LD_EXP 54
20583: PUSH
20584: LD_EXP 57
20588: PUSH
20589: LD_EXP 58
20593: PUSH
20594: LD_EXP 59
20598: PUSH
20599: LD_EXP 55
20603: PUSH
20604: LD_EXP 56
20608: PUSH
20609: LD_EXP 64
20613: PUSH
20614: LD_EXP 68
20618: PUSH
20619: LD_EXP 69
20623: PUSH
20624: LD_EXP 71
20628: PUSH
20629: LD_EXP 75
20633: PUSH
20634: LD_EXP 78
20638: PUSH
20639: LD_EXP 79
20643: PUSH
20644: LD_EXP 89
20648: PUSH
20649: LD_EXP 90
20653: PUSH
20654: LD_EXP 91
20658: PUSH
20659: LD_EXP 92
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: ST_TO_ADDR
// tmp :=  ;
20720: LD_ADDR_VAR 0 3
20724: PUSH
20725: LD_STRING 
20727: ST_TO_ADDR
// for i = 1 to normalCounter do
20728: LD_ADDR_VAR 0 8
20732: PUSH
20733: DOUBLE
20734: LD_INT 1
20736: DEC
20737: ST_TO_ADDR
20738: LD_EXP 37
20742: PUSH
20743: FOR_TO
20744: IFFALSE 20780
// begin if flags [ i ] then
20746: LD_VAR 0 4
20750: PUSH
20751: LD_VAR 0 8
20755: ARRAY
20756: IFFALSE 20778
// tmp := tmp & i & ; ;
20758: LD_ADDR_VAR 0 3
20762: PUSH
20763: LD_VAR 0 3
20767: PUSH
20768: LD_VAR 0 8
20772: STR
20773: PUSH
20774: LD_STRING ;
20776: STR
20777: ST_TO_ADDR
// end ;
20778: GO 20743
20780: POP
20781: POP
// for i = 1 to hardcoreCounter do
20782: LD_ADDR_VAR 0 8
20786: PUSH
20787: DOUBLE
20788: LD_INT 1
20790: DEC
20791: ST_TO_ADDR
20792: LD_EXP 38
20796: PUSH
20797: FOR_TO
20798: IFFALSE 20844
// begin if flags [ normalCounter + i ] then
20800: LD_VAR 0 4
20804: PUSH
20805: LD_EXP 37
20809: PUSH
20810: LD_VAR 0 8
20814: PLUS
20815: ARRAY
20816: IFFALSE 20842
// tmp := tmp & ( 100 + i ) & ; ;
20818: LD_ADDR_VAR 0 3
20822: PUSH
20823: LD_VAR 0 3
20827: PUSH
20828: LD_INT 100
20830: PUSH
20831: LD_VAR 0 8
20835: PLUS
20836: STR
20837: PUSH
20838: LD_STRING ;
20840: STR
20841: ST_TO_ADDR
// end ;
20842: GO 20797
20844: POP
20845: POP
// if tmp then
20846: LD_VAR 0 3
20850: IFFALSE 20862
// active := tmp ;
20852: LD_ADDR_VAR 0 7
20856: PUSH
20857: LD_VAR 0 3
20861: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
20862: LD_STRING getStreamItemsFromMission("
20864: PUSH
20865: LD_VAR 0 5
20869: STR
20870: PUSH
20871: LD_STRING ","
20873: STR
20874: PUSH
20875: LD_VAR 0 6
20879: STR
20880: PUSH
20881: LD_STRING ","
20883: STR
20884: PUSH
20885: LD_VAR 0 7
20889: STR
20890: PUSH
20891: LD_STRING ")
20893: STR
20894: PPUSH
20895: CALL_OW 559
// end else
20899: GO 20908
// ToLua ( getStreamItemsFromMission("","","") ) ;
20901: LD_STRING getStreamItemsFromMission("","","")
20903: PPUSH
20904: CALL_OW 559
// end ;
20908: LD_VAR 0 2
20912: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20913: LD_EXP 36
20917: PUSH
20918: LD_EXP 41
20922: AND
20923: IFFALSE 21047
20925: GO 20927
20927: DISABLE
20928: LD_INT 0
20930: PPUSH
20931: PPUSH
// begin enable ;
20932: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20933: LD_ADDR_VAR 0 2
20937: PUSH
20938: LD_INT 22
20940: PUSH
20941: LD_OWVAR 2
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PUSH
20950: LD_INT 2
20952: PUSH
20953: LD_INT 34
20955: PUSH
20956: LD_INT 7
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PUSH
20963: LD_INT 34
20965: PUSH
20966: LD_INT 45
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: LD_INT 34
20975: PUSH
20976: LD_INT 28
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PUSH
20983: LD_INT 34
20985: PUSH
20986: LD_INT 47
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PPUSH
21004: CALL_OW 69
21008: ST_TO_ADDR
// if not tmp then
21009: LD_VAR 0 2
21013: NOT
21014: IFFALSE 21018
// exit ;
21016: GO 21047
// for i in tmp do
21018: LD_ADDR_VAR 0 1
21022: PUSH
21023: LD_VAR 0 2
21027: PUSH
21028: FOR_IN
21029: IFFALSE 21045
// begin SetLives ( i , 0 ) ;
21031: LD_VAR 0 1
21035: PPUSH
21036: LD_INT 0
21038: PPUSH
21039: CALL_OW 234
// end ;
21043: GO 21028
21045: POP
21046: POP
// end ;
21047: PPOPN 2
21049: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21050: LD_EXP 36
21054: PUSH
21055: LD_EXP 42
21059: AND
21060: IFFALSE 21144
21062: GO 21064
21064: DISABLE
21065: LD_INT 0
21067: PPUSH
21068: PPUSH
// begin enable ;
21069: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21070: LD_ADDR_VAR 0 2
21074: PUSH
21075: LD_INT 22
21077: PUSH
21078: LD_OWVAR 2
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: LD_INT 32
21089: PUSH
21090: LD_INT 3
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: PPUSH
21101: CALL_OW 69
21105: ST_TO_ADDR
// if not tmp then
21106: LD_VAR 0 2
21110: NOT
21111: IFFALSE 21115
// exit ;
21113: GO 21144
// for i in tmp do
21115: LD_ADDR_VAR 0 1
21119: PUSH
21120: LD_VAR 0 2
21124: PUSH
21125: FOR_IN
21126: IFFALSE 21142
// begin SetLives ( i , 0 ) ;
21128: LD_VAR 0 1
21132: PPUSH
21133: LD_INT 0
21135: PPUSH
21136: CALL_OW 234
// end ;
21140: GO 21125
21142: POP
21143: POP
// end ;
21144: PPOPN 2
21146: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21147: LD_EXP 36
21151: PUSH
21152: LD_EXP 39
21156: AND
21157: IFFALSE 21250
21159: GO 21161
21161: DISABLE
21162: LD_INT 0
21164: PPUSH
// begin enable ;
21165: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21166: LD_ADDR_VAR 0 1
21170: PUSH
21171: LD_INT 22
21173: PUSH
21174: LD_OWVAR 2
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PUSH
21183: LD_INT 2
21185: PUSH
21186: LD_INT 25
21188: PUSH
21189: LD_INT 5
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: PUSH
21196: LD_INT 25
21198: PUSH
21199: LD_INT 9
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: PUSH
21206: LD_INT 25
21208: PUSH
21209: LD_INT 8
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PPUSH
21226: CALL_OW 69
21230: PUSH
21231: FOR_IN
21232: IFFALSE 21248
// begin SetClass ( i , 1 ) ;
21234: LD_VAR 0 1
21238: PPUSH
21239: LD_INT 1
21241: PPUSH
21242: CALL_OW 336
// end ;
21246: GO 21231
21248: POP
21249: POP
// end ;
21250: PPOPN 1
21252: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21253: LD_EXP 36
21257: PUSH
21258: LD_EXP 40
21262: AND
21263: PUSH
21264: LD_OWVAR 65
21268: PUSH
21269: LD_INT 7
21271: LESS
21272: AND
21273: IFFALSE 21287
21275: GO 21277
21277: DISABLE
// begin enable ;
21278: ENABLE
// game_speed := 7 ;
21279: LD_ADDR_OWVAR 65
21283: PUSH
21284: LD_INT 7
21286: ST_TO_ADDR
// end ;
21287: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21288: LD_EXP 36
21292: PUSH
21293: LD_EXP 43
21297: AND
21298: IFFALSE 21500
21300: GO 21302
21302: DISABLE
21303: LD_INT 0
21305: PPUSH
21306: PPUSH
21307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21308: LD_ADDR_VAR 0 3
21312: PUSH
21313: LD_INT 81
21315: PUSH
21316: LD_OWVAR 2
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PUSH
21325: LD_INT 21
21327: PUSH
21328: LD_INT 1
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PPUSH
21339: CALL_OW 69
21343: ST_TO_ADDR
// if not tmp then
21344: LD_VAR 0 3
21348: NOT
21349: IFFALSE 21353
// exit ;
21351: GO 21500
// if tmp > 5 then
21353: LD_VAR 0 3
21357: PUSH
21358: LD_INT 5
21360: GREATER
21361: IFFALSE 21373
// k := 5 else
21363: LD_ADDR_VAR 0 2
21367: PUSH
21368: LD_INT 5
21370: ST_TO_ADDR
21371: GO 21383
// k := tmp ;
21373: LD_ADDR_VAR 0 2
21377: PUSH
21378: LD_VAR 0 3
21382: ST_TO_ADDR
// for i := 1 to k do
21383: LD_ADDR_VAR 0 1
21387: PUSH
21388: DOUBLE
21389: LD_INT 1
21391: DEC
21392: ST_TO_ADDR
21393: LD_VAR 0 2
21397: PUSH
21398: FOR_TO
21399: IFFALSE 21498
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21401: LD_VAR 0 3
21405: PUSH
21406: LD_VAR 0 1
21410: ARRAY
21411: PPUSH
21412: LD_VAR 0 1
21416: PUSH
21417: LD_INT 4
21419: MOD
21420: PUSH
21421: LD_INT 1
21423: PLUS
21424: PPUSH
21425: CALL_OW 259
21429: PUSH
21430: LD_INT 10
21432: LESS
21433: IFFALSE 21496
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21435: LD_VAR 0 3
21439: PUSH
21440: LD_VAR 0 1
21444: ARRAY
21445: PPUSH
21446: LD_VAR 0 1
21450: PUSH
21451: LD_INT 4
21453: MOD
21454: PUSH
21455: LD_INT 1
21457: PLUS
21458: PPUSH
21459: LD_VAR 0 3
21463: PUSH
21464: LD_VAR 0 1
21468: ARRAY
21469: PPUSH
21470: LD_VAR 0 1
21474: PUSH
21475: LD_INT 4
21477: MOD
21478: PUSH
21479: LD_INT 1
21481: PLUS
21482: PPUSH
21483: CALL_OW 259
21487: PUSH
21488: LD_INT 1
21490: PLUS
21491: PPUSH
21492: CALL_OW 237
21496: GO 21398
21498: POP
21499: POP
// end ;
21500: PPOPN 3
21502: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21503: LD_EXP 36
21507: PUSH
21508: LD_EXP 44
21512: AND
21513: IFFALSE 21533
21515: GO 21517
21517: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21518: LD_INT 4
21520: PPUSH
21521: LD_OWVAR 2
21525: PPUSH
21526: LD_INT 0
21528: PPUSH
21529: CALL_OW 324
21533: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21534: LD_EXP 36
21538: PUSH
21539: LD_EXP 73
21543: AND
21544: IFFALSE 21564
21546: GO 21548
21548: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21549: LD_INT 19
21551: PPUSH
21552: LD_OWVAR 2
21556: PPUSH
21557: LD_INT 0
21559: PPUSH
21560: CALL_OW 324
21564: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21565: LD_EXP 36
21569: PUSH
21570: LD_EXP 45
21574: AND
21575: IFFALSE 21677
21577: GO 21579
21579: DISABLE
21580: LD_INT 0
21582: PPUSH
21583: PPUSH
// begin enable ;
21584: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21585: LD_ADDR_VAR 0 2
21589: PUSH
21590: LD_INT 22
21592: PUSH
21593: LD_OWVAR 2
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PUSH
21602: LD_INT 2
21604: PUSH
21605: LD_INT 34
21607: PUSH
21608: LD_INT 11
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: PUSH
21615: LD_INT 34
21617: PUSH
21618: LD_INT 30
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: LIST
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: PPUSH
21634: CALL_OW 69
21638: ST_TO_ADDR
// if not tmp then
21639: LD_VAR 0 2
21643: NOT
21644: IFFALSE 21648
// exit ;
21646: GO 21677
// for i in tmp do
21648: LD_ADDR_VAR 0 1
21652: PUSH
21653: LD_VAR 0 2
21657: PUSH
21658: FOR_IN
21659: IFFALSE 21675
// begin SetLives ( i , 0 ) ;
21661: LD_VAR 0 1
21665: PPUSH
21666: LD_INT 0
21668: PPUSH
21669: CALL_OW 234
// end ;
21673: GO 21658
21675: POP
21676: POP
// end ;
21677: PPOPN 2
21679: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21680: LD_EXP 36
21684: PUSH
21685: LD_EXP 46
21689: AND
21690: IFFALSE 21710
21692: GO 21694
21694: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21695: LD_INT 32
21697: PPUSH
21698: LD_OWVAR 2
21702: PPUSH
21703: LD_INT 0
21705: PPUSH
21706: CALL_OW 324
21710: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21711: LD_EXP 36
21715: PUSH
21716: LD_EXP 47
21720: AND
21721: IFFALSE 21902
21723: GO 21725
21725: DISABLE
21726: LD_INT 0
21728: PPUSH
21729: PPUSH
21730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21731: LD_ADDR_VAR 0 2
21735: PUSH
21736: LD_INT 22
21738: PUSH
21739: LD_OWVAR 2
21743: PUSH
21744: EMPTY
21745: LIST
21746: LIST
21747: PUSH
21748: LD_INT 33
21750: PUSH
21751: LD_INT 3
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PPUSH
21762: CALL_OW 69
21766: ST_TO_ADDR
// if not tmp then
21767: LD_VAR 0 2
21771: NOT
21772: IFFALSE 21776
// exit ;
21774: GO 21902
// side := 0 ;
21776: LD_ADDR_VAR 0 3
21780: PUSH
21781: LD_INT 0
21783: ST_TO_ADDR
// for i := 1 to 8 do
21784: LD_ADDR_VAR 0 1
21788: PUSH
21789: DOUBLE
21790: LD_INT 1
21792: DEC
21793: ST_TO_ADDR
21794: LD_INT 8
21796: PUSH
21797: FOR_TO
21798: IFFALSE 21846
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21800: LD_OWVAR 2
21804: PUSH
21805: LD_VAR 0 1
21809: NONEQUAL
21810: PUSH
21811: LD_OWVAR 2
21815: PPUSH
21816: LD_VAR 0 1
21820: PPUSH
21821: CALL_OW 81
21825: PUSH
21826: LD_INT 2
21828: EQUAL
21829: AND
21830: IFFALSE 21844
// begin side := i ;
21832: LD_ADDR_VAR 0 3
21836: PUSH
21837: LD_VAR 0 1
21841: ST_TO_ADDR
// break ;
21842: GO 21846
// end ;
21844: GO 21797
21846: POP
21847: POP
// if not side then
21848: LD_VAR 0 3
21852: NOT
21853: IFFALSE 21857
// exit ;
21855: GO 21902
// for i := 1 to tmp do
21857: LD_ADDR_VAR 0 1
21861: PUSH
21862: DOUBLE
21863: LD_INT 1
21865: DEC
21866: ST_TO_ADDR
21867: LD_VAR 0 2
21871: PUSH
21872: FOR_TO
21873: IFFALSE 21900
// if Prob ( 60 ) then
21875: LD_INT 60
21877: PPUSH
21878: CALL_OW 13
21882: IFFALSE 21898
// SetSide ( i , side ) ;
21884: LD_VAR 0 1
21888: PPUSH
21889: LD_VAR 0 3
21893: PPUSH
21894: CALL_OW 235
21898: GO 21872
21900: POP
21901: POP
// end ;
21902: PPOPN 3
21904: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21905: LD_EXP 36
21909: PUSH
21910: LD_EXP 49
21914: AND
21915: IFFALSE 22034
21917: GO 21919
21919: DISABLE
21920: LD_INT 0
21922: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21923: LD_ADDR_VAR 0 1
21927: PUSH
21928: LD_INT 22
21930: PUSH
21931: LD_OWVAR 2
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: PUSH
21940: LD_INT 21
21942: PUSH
21943: LD_INT 1
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PUSH
21950: LD_INT 3
21952: PUSH
21953: LD_INT 23
21955: PUSH
21956: LD_INT 0
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: LIST
21971: PPUSH
21972: CALL_OW 69
21976: PUSH
21977: FOR_IN
21978: IFFALSE 22032
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21980: LD_VAR 0 1
21984: PPUSH
21985: CALL_OW 257
21989: PUSH
21990: LD_INT 1
21992: PUSH
21993: LD_INT 2
21995: PUSH
21996: LD_INT 3
21998: PUSH
21999: LD_INT 4
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: IN
22008: IFFALSE 22030
// SetClass ( un , rand ( 1 , 4 ) ) ;
22010: LD_VAR 0 1
22014: PPUSH
22015: LD_INT 1
22017: PPUSH
22018: LD_INT 4
22020: PPUSH
22021: CALL_OW 12
22025: PPUSH
22026: CALL_OW 336
22030: GO 21977
22032: POP
22033: POP
// end ;
22034: PPOPN 1
22036: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22037: LD_EXP 36
22041: PUSH
22042: LD_EXP 48
22046: AND
22047: IFFALSE 22126
22049: GO 22051
22051: DISABLE
22052: LD_INT 0
22054: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22055: LD_ADDR_VAR 0 1
22059: PUSH
22060: LD_INT 22
22062: PUSH
22063: LD_OWVAR 2
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: PUSH
22072: LD_INT 21
22074: PUSH
22075: LD_INT 3
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: PPUSH
22086: CALL_OW 69
22090: ST_TO_ADDR
// if not tmp then
22091: LD_VAR 0 1
22095: NOT
22096: IFFALSE 22100
// exit ;
22098: GO 22126
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22100: LD_VAR 0 1
22104: PUSH
22105: LD_INT 1
22107: PPUSH
22108: LD_VAR 0 1
22112: PPUSH
22113: CALL_OW 12
22117: ARRAY
22118: PPUSH
22119: LD_INT 100
22121: PPUSH
22122: CALL_OW 234
// end ;
22126: PPOPN 1
22128: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22129: LD_EXP 36
22133: PUSH
22134: LD_EXP 50
22138: AND
22139: IFFALSE 22237
22141: GO 22143
22143: DISABLE
22144: LD_INT 0
22146: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22147: LD_ADDR_VAR 0 1
22151: PUSH
22152: LD_INT 22
22154: PUSH
22155: LD_OWVAR 2
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: PUSH
22164: LD_INT 21
22166: PUSH
22167: LD_INT 1
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: PPUSH
22178: CALL_OW 69
22182: ST_TO_ADDR
// if not tmp then
22183: LD_VAR 0 1
22187: NOT
22188: IFFALSE 22192
// exit ;
22190: GO 22237
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22192: LD_VAR 0 1
22196: PUSH
22197: LD_INT 1
22199: PPUSH
22200: LD_VAR 0 1
22204: PPUSH
22205: CALL_OW 12
22209: ARRAY
22210: PPUSH
22211: LD_INT 1
22213: PPUSH
22214: LD_INT 4
22216: PPUSH
22217: CALL_OW 12
22221: PPUSH
22222: LD_INT 3000
22224: PPUSH
22225: LD_INT 9000
22227: PPUSH
22228: CALL_OW 12
22232: PPUSH
22233: CALL_OW 492
// end ;
22237: PPOPN 1
22239: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22240: LD_EXP 36
22244: PUSH
22245: LD_EXP 51
22249: AND
22250: IFFALSE 22270
22252: GO 22254
22254: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22255: LD_INT 1
22257: PPUSH
22258: LD_OWVAR 2
22262: PPUSH
22263: LD_INT 0
22265: PPUSH
22266: CALL_OW 324
22270: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22271: LD_EXP 36
22275: PUSH
22276: LD_EXP 52
22280: AND
22281: IFFALSE 22364
22283: GO 22285
22285: DISABLE
22286: LD_INT 0
22288: PPUSH
22289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22290: LD_ADDR_VAR 0 2
22294: PUSH
22295: LD_INT 22
22297: PUSH
22298: LD_OWVAR 2
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PUSH
22307: LD_INT 21
22309: PUSH
22310: LD_INT 3
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PPUSH
22321: CALL_OW 69
22325: ST_TO_ADDR
// if not tmp then
22326: LD_VAR 0 2
22330: NOT
22331: IFFALSE 22335
// exit ;
22333: GO 22364
// for i in tmp do
22335: LD_ADDR_VAR 0 1
22339: PUSH
22340: LD_VAR 0 2
22344: PUSH
22345: FOR_IN
22346: IFFALSE 22362
// SetBLevel ( i , 10 ) ;
22348: LD_VAR 0 1
22352: PPUSH
22353: LD_INT 10
22355: PPUSH
22356: CALL_OW 241
22360: GO 22345
22362: POP
22363: POP
// end ;
22364: PPOPN 2
22366: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22367: LD_EXP 36
22371: PUSH
22372: LD_EXP 53
22376: AND
22377: IFFALSE 22488
22379: GO 22381
22381: DISABLE
22382: LD_INT 0
22384: PPUSH
22385: PPUSH
22386: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22387: LD_ADDR_VAR 0 3
22391: PUSH
22392: LD_INT 22
22394: PUSH
22395: LD_OWVAR 2
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PUSH
22404: LD_INT 25
22406: PUSH
22407: LD_INT 1
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: PPUSH
22418: CALL_OW 69
22422: ST_TO_ADDR
// if not tmp then
22423: LD_VAR 0 3
22427: NOT
22428: IFFALSE 22432
// exit ;
22430: GO 22488
// un := tmp [ rand ( 1 , tmp ) ] ;
22432: LD_ADDR_VAR 0 2
22436: PUSH
22437: LD_VAR 0 3
22441: PUSH
22442: LD_INT 1
22444: PPUSH
22445: LD_VAR 0 3
22449: PPUSH
22450: CALL_OW 12
22454: ARRAY
22455: ST_TO_ADDR
// if Crawls ( un ) then
22456: LD_VAR 0 2
22460: PPUSH
22461: CALL_OW 318
22465: IFFALSE 22476
// ComWalk ( un ) ;
22467: LD_VAR 0 2
22471: PPUSH
22472: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22476: LD_VAR 0 2
22480: PPUSH
22481: LD_INT 5
22483: PPUSH
22484: CALL_OW 336
// end ;
22488: PPOPN 3
22490: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
22491: LD_EXP 36
22495: PUSH
22496: LD_EXP 54
22500: AND
22501: PUSH
22502: LD_OWVAR 67
22506: PUSH
22507: LD_INT 4
22509: LESS
22510: AND
22511: IFFALSE 22530
22513: GO 22515
22515: DISABLE
// begin Difficulty := Difficulty + 1 ;
22516: LD_ADDR_OWVAR 67
22520: PUSH
22521: LD_OWVAR 67
22525: PUSH
22526: LD_INT 1
22528: PLUS
22529: ST_TO_ADDR
// end ;
22530: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22531: LD_EXP 36
22535: PUSH
22536: LD_EXP 55
22540: AND
22541: IFFALSE 22644
22543: GO 22545
22545: DISABLE
22546: LD_INT 0
22548: PPUSH
// begin for i := 1 to 5 do
22549: LD_ADDR_VAR 0 1
22553: PUSH
22554: DOUBLE
22555: LD_INT 1
22557: DEC
22558: ST_TO_ADDR
22559: LD_INT 5
22561: PUSH
22562: FOR_TO
22563: IFFALSE 22642
// begin uc_nation := nation_nature ;
22565: LD_ADDR_OWVAR 21
22569: PUSH
22570: LD_INT 0
22572: ST_TO_ADDR
// uc_side := 0 ;
22573: LD_ADDR_OWVAR 20
22577: PUSH
22578: LD_INT 0
22580: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22581: LD_ADDR_OWVAR 29
22585: PUSH
22586: LD_INT 12
22588: PUSH
22589: LD_INT 12
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: ST_TO_ADDR
// hc_agressivity := 20 ;
22596: LD_ADDR_OWVAR 35
22600: PUSH
22601: LD_INT 20
22603: ST_TO_ADDR
// hc_class := class_tiger ;
22604: LD_ADDR_OWVAR 28
22608: PUSH
22609: LD_INT 14
22611: ST_TO_ADDR
// hc_gallery :=  ;
22612: LD_ADDR_OWVAR 33
22616: PUSH
22617: LD_STRING 
22619: ST_TO_ADDR
// hc_name :=  ;
22620: LD_ADDR_OWVAR 26
22624: PUSH
22625: LD_STRING 
22627: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22628: CALL_OW 44
22632: PPUSH
22633: LD_INT 0
22635: PPUSH
22636: CALL_OW 51
// end ;
22640: GO 22562
22642: POP
22643: POP
// end ;
22644: PPOPN 1
22646: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22647: LD_EXP 36
22651: PUSH
22652: LD_EXP 56
22656: AND
22657: IFFALSE 22666
22659: GO 22661
22661: DISABLE
// StreamSibBomb ;
22662: CALL 22667 0 0
22666: END
// export function StreamSibBomb ; var i , x , y ; begin
22667: LD_INT 0
22669: PPUSH
22670: PPUSH
22671: PPUSH
22672: PPUSH
// result := false ;
22673: LD_ADDR_VAR 0 1
22677: PUSH
22678: LD_INT 0
22680: ST_TO_ADDR
// for i := 1 to 16 do
22681: LD_ADDR_VAR 0 2
22685: PUSH
22686: DOUBLE
22687: LD_INT 1
22689: DEC
22690: ST_TO_ADDR
22691: LD_INT 16
22693: PUSH
22694: FOR_TO
22695: IFFALSE 22894
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22697: LD_ADDR_VAR 0 3
22701: PUSH
22702: LD_INT 10
22704: PUSH
22705: LD_INT 20
22707: PUSH
22708: LD_INT 30
22710: PUSH
22711: LD_INT 40
22713: PUSH
22714: LD_INT 50
22716: PUSH
22717: LD_INT 60
22719: PUSH
22720: LD_INT 70
22722: PUSH
22723: LD_INT 80
22725: PUSH
22726: LD_INT 90
22728: PUSH
22729: LD_INT 100
22731: PUSH
22732: LD_INT 110
22734: PUSH
22735: LD_INT 120
22737: PUSH
22738: LD_INT 130
22740: PUSH
22741: LD_INT 140
22743: PUSH
22744: LD_INT 150
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: PUSH
22764: LD_INT 1
22766: PPUSH
22767: LD_INT 15
22769: PPUSH
22770: CALL_OW 12
22774: ARRAY
22775: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22776: LD_ADDR_VAR 0 4
22780: PUSH
22781: LD_INT 10
22783: PUSH
22784: LD_INT 20
22786: PUSH
22787: LD_INT 30
22789: PUSH
22790: LD_INT 40
22792: PUSH
22793: LD_INT 50
22795: PUSH
22796: LD_INT 60
22798: PUSH
22799: LD_INT 70
22801: PUSH
22802: LD_INT 80
22804: PUSH
22805: LD_INT 90
22807: PUSH
22808: LD_INT 100
22810: PUSH
22811: LD_INT 110
22813: PUSH
22814: LD_INT 120
22816: PUSH
22817: LD_INT 130
22819: PUSH
22820: LD_INT 140
22822: PUSH
22823: LD_INT 150
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: PUSH
22843: LD_INT 1
22845: PPUSH
22846: LD_INT 15
22848: PPUSH
22849: CALL_OW 12
22853: ARRAY
22854: ST_TO_ADDR
// if ValidHex ( x , y ) then
22855: LD_VAR 0 3
22859: PPUSH
22860: LD_VAR 0 4
22864: PPUSH
22865: CALL_OW 488
22869: IFFALSE 22892
// begin result := [ x , y ] ;
22871: LD_ADDR_VAR 0 1
22875: PUSH
22876: LD_VAR 0 3
22880: PUSH
22881: LD_VAR 0 4
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: ST_TO_ADDR
// break ;
22890: GO 22894
// end ; end ;
22892: GO 22694
22894: POP
22895: POP
// if result then
22896: LD_VAR 0 1
22900: IFFALSE 22960
// begin ToLua ( playSibBomb() ) ;
22902: LD_STRING playSibBomb()
22904: PPUSH
22905: CALL_OW 559
// wait ( 0 0$14 ) ;
22909: LD_INT 490
22911: PPUSH
22912: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22916: LD_VAR 0 1
22920: PUSH
22921: LD_INT 1
22923: ARRAY
22924: PPUSH
22925: LD_VAR 0 1
22929: PUSH
22930: LD_INT 2
22932: ARRAY
22933: PPUSH
22934: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22938: LD_VAR 0 1
22942: PUSH
22943: LD_INT 1
22945: ARRAY
22946: PPUSH
22947: LD_VAR 0 1
22951: PUSH
22952: LD_INT 2
22954: ARRAY
22955: PPUSH
22956: CALL_OW 429
// end ; end ;
22960: LD_VAR 0 1
22964: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22965: LD_EXP 36
22969: PUSH
22970: LD_EXP 58
22974: AND
22975: IFFALSE 22987
22977: GO 22979
22979: DISABLE
// YouLost (  ) ;
22980: LD_STRING 
22982: PPUSH
22983: CALL_OW 104
22987: END
// every 0 0$1 trigger StreamModeActive and sFog do
22988: LD_EXP 36
22992: PUSH
22993: LD_EXP 57
22997: AND
22998: IFFALSE 23012
23000: GO 23002
23002: DISABLE
// FogOff ( your_side ) ;
23003: LD_OWVAR 2
23007: PPUSH
23008: CALL_OW 344
23012: END
// every 0 0$1 trigger StreamModeActive and sSun do
23013: LD_EXP 36
23017: PUSH
23018: LD_EXP 59
23022: AND
23023: IFFALSE 23051
23025: GO 23027
23027: DISABLE
// begin solar_recharge_percent := 0 ;
23028: LD_ADDR_OWVAR 79
23032: PUSH
23033: LD_INT 0
23035: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23036: LD_INT 10500
23038: PPUSH
23039: CALL_OW 67
// solar_recharge_percent := 100 ;
23043: LD_ADDR_OWVAR 79
23047: PUSH
23048: LD_INT 100
23050: ST_TO_ADDR
// end ;
23051: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23052: LD_EXP 36
23056: PUSH
23057: LD_EXP 60
23061: AND
23062: IFFALSE 23301
23064: GO 23066
23066: DISABLE
23067: LD_INT 0
23069: PPUSH
23070: PPUSH
23071: PPUSH
// begin tmp := [ ] ;
23072: LD_ADDR_VAR 0 3
23076: PUSH
23077: EMPTY
23078: ST_TO_ADDR
// for i := 1 to 6 do
23079: LD_ADDR_VAR 0 1
23083: PUSH
23084: DOUBLE
23085: LD_INT 1
23087: DEC
23088: ST_TO_ADDR
23089: LD_INT 6
23091: PUSH
23092: FOR_TO
23093: IFFALSE 23198
// begin uc_nation := nation_nature ;
23095: LD_ADDR_OWVAR 21
23099: PUSH
23100: LD_INT 0
23102: ST_TO_ADDR
// uc_side := 0 ;
23103: LD_ADDR_OWVAR 20
23107: PUSH
23108: LD_INT 0
23110: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23111: LD_ADDR_OWVAR 29
23115: PUSH
23116: LD_INT 12
23118: PUSH
23119: LD_INT 12
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: ST_TO_ADDR
// hc_agressivity := 20 ;
23126: LD_ADDR_OWVAR 35
23130: PUSH
23131: LD_INT 20
23133: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23134: LD_ADDR_OWVAR 28
23138: PUSH
23139: LD_INT 17
23141: ST_TO_ADDR
// hc_gallery :=  ;
23142: LD_ADDR_OWVAR 33
23146: PUSH
23147: LD_STRING 
23149: ST_TO_ADDR
// hc_name :=  ;
23150: LD_ADDR_OWVAR 26
23154: PUSH
23155: LD_STRING 
23157: ST_TO_ADDR
// un := CreateHuman ;
23158: LD_ADDR_VAR 0 2
23162: PUSH
23163: CALL_OW 44
23167: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23168: LD_VAR 0 2
23172: PPUSH
23173: LD_INT 1
23175: PPUSH
23176: CALL_OW 51
// tmp := tmp ^ un ;
23180: LD_ADDR_VAR 0 3
23184: PUSH
23185: LD_VAR 0 3
23189: PUSH
23190: LD_VAR 0 2
23194: ADD
23195: ST_TO_ADDR
// end ;
23196: GO 23092
23198: POP
23199: POP
// repeat wait ( 0 0$1 ) ;
23200: LD_INT 35
23202: PPUSH
23203: CALL_OW 67
// for un in tmp do
23207: LD_ADDR_VAR 0 2
23211: PUSH
23212: LD_VAR 0 3
23216: PUSH
23217: FOR_IN
23218: IFFALSE 23292
// begin if IsDead ( un ) then
23220: LD_VAR 0 2
23224: PPUSH
23225: CALL_OW 301
23229: IFFALSE 23249
// begin tmp := tmp diff un ;
23231: LD_ADDR_VAR 0 3
23235: PUSH
23236: LD_VAR 0 3
23240: PUSH
23241: LD_VAR 0 2
23245: DIFF
23246: ST_TO_ADDR
// continue ;
23247: GO 23217
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23249: LD_VAR 0 2
23253: PPUSH
23254: LD_INT 3
23256: PUSH
23257: LD_INT 22
23259: PUSH
23260: LD_INT 0
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PPUSH
23271: CALL_OW 69
23275: PPUSH
23276: LD_VAR 0 2
23280: PPUSH
23281: CALL_OW 74
23285: PPUSH
23286: CALL_OW 115
// end ;
23290: GO 23217
23292: POP
23293: POP
// until not tmp ;
23294: LD_VAR 0 3
23298: NOT
23299: IFFALSE 23200
// end ;
23301: PPOPN 3
23303: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23304: LD_EXP 36
23308: PUSH
23309: LD_EXP 61
23313: AND
23314: IFFALSE 23368
23316: GO 23318
23318: DISABLE
// begin ToLua ( displayTroll(); ) ;
23319: LD_STRING displayTroll();
23321: PPUSH
23322: CALL_OW 559
// wait ( 3 3$00 ) ;
23326: LD_INT 6300
23328: PPUSH
23329: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23333: LD_STRING hideTroll();
23335: PPUSH
23336: CALL_OW 559
// wait ( 1 1$00 ) ;
23340: LD_INT 2100
23342: PPUSH
23343: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23347: LD_STRING displayTroll();
23349: PPUSH
23350: CALL_OW 559
// wait ( 1 1$00 ) ;
23354: LD_INT 2100
23356: PPUSH
23357: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23361: LD_STRING hideTroll();
23363: PPUSH
23364: CALL_OW 559
// end ;
23368: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23369: LD_EXP 36
23373: PUSH
23374: LD_EXP 62
23378: AND
23379: IFFALSE 23442
23381: GO 23383
23383: DISABLE
23384: LD_INT 0
23386: PPUSH
// begin p := 0 ;
23387: LD_ADDR_VAR 0 1
23391: PUSH
23392: LD_INT 0
23394: ST_TO_ADDR
// repeat game_speed := 1 ;
23395: LD_ADDR_OWVAR 65
23399: PUSH
23400: LD_INT 1
23402: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23403: LD_INT 35
23405: PPUSH
23406: CALL_OW 67
// p := p + 1 ;
23410: LD_ADDR_VAR 0 1
23414: PUSH
23415: LD_VAR 0 1
23419: PUSH
23420: LD_INT 1
23422: PLUS
23423: ST_TO_ADDR
// until p >= 60 ;
23424: LD_VAR 0 1
23428: PUSH
23429: LD_INT 60
23431: GREATEREQUAL
23432: IFFALSE 23395
// game_speed := 4 ;
23434: LD_ADDR_OWVAR 65
23438: PUSH
23439: LD_INT 4
23441: ST_TO_ADDR
// end ;
23442: PPOPN 1
23444: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23445: LD_EXP 36
23449: PUSH
23450: LD_EXP 63
23454: AND
23455: IFFALSE 23601
23457: GO 23459
23459: DISABLE
23460: LD_INT 0
23462: PPUSH
23463: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23464: LD_ADDR_VAR 0 1
23468: PUSH
23469: LD_INT 22
23471: PUSH
23472: LD_OWVAR 2
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 2
23483: PUSH
23484: LD_INT 30
23486: PUSH
23487: LD_INT 0
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: PUSH
23494: LD_INT 30
23496: PUSH
23497: LD_INT 1
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: LIST
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PPUSH
23513: CALL_OW 69
23517: ST_TO_ADDR
// if not depot then
23518: LD_VAR 0 1
23522: NOT
23523: IFFALSE 23527
// exit ;
23525: GO 23601
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23527: LD_ADDR_VAR 0 2
23531: PUSH
23532: LD_VAR 0 1
23536: PUSH
23537: LD_INT 1
23539: PPUSH
23540: LD_VAR 0 1
23544: PPUSH
23545: CALL_OW 12
23549: ARRAY
23550: PPUSH
23551: CALL_OW 274
23555: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23556: LD_VAR 0 2
23560: PPUSH
23561: LD_INT 1
23563: PPUSH
23564: LD_INT 0
23566: PPUSH
23567: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23571: LD_VAR 0 2
23575: PPUSH
23576: LD_INT 2
23578: PPUSH
23579: LD_INT 0
23581: PPUSH
23582: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23586: LD_VAR 0 2
23590: PPUSH
23591: LD_INT 3
23593: PPUSH
23594: LD_INT 0
23596: PPUSH
23597: CALL_OW 277
// end ;
23601: PPOPN 2
23603: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23604: LD_EXP 36
23608: PUSH
23609: LD_EXP 64
23613: AND
23614: IFFALSE 23711
23616: GO 23618
23618: DISABLE
23619: LD_INT 0
23621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23622: LD_ADDR_VAR 0 1
23626: PUSH
23627: LD_INT 22
23629: PUSH
23630: LD_OWVAR 2
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PUSH
23639: LD_INT 21
23641: PUSH
23642: LD_INT 1
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: PUSH
23649: LD_INT 3
23651: PUSH
23652: LD_INT 23
23654: PUSH
23655: LD_INT 0
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: PUSH
23662: EMPTY
23663: LIST
23664: LIST
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: LIST
23670: PPUSH
23671: CALL_OW 69
23675: ST_TO_ADDR
// if not tmp then
23676: LD_VAR 0 1
23680: NOT
23681: IFFALSE 23685
// exit ;
23683: GO 23711
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23685: LD_VAR 0 1
23689: PUSH
23690: LD_INT 1
23692: PPUSH
23693: LD_VAR 0 1
23697: PPUSH
23698: CALL_OW 12
23702: ARRAY
23703: PPUSH
23704: LD_INT 200
23706: PPUSH
23707: CALL_OW 234
// end ;
23711: PPOPN 1
23713: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23714: LD_EXP 36
23718: PUSH
23719: LD_EXP 65
23723: AND
23724: IFFALSE 23803
23726: GO 23728
23728: DISABLE
23729: LD_INT 0
23731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23732: LD_ADDR_VAR 0 1
23736: PUSH
23737: LD_INT 22
23739: PUSH
23740: LD_OWVAR 2
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: PUSH
23749: LD_INT 21
23751: PUSH
23752: LD_INT 2
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: PPUSH
23763: CALL_OW 69
23767: ST_TO_ADDR
// if not tmp then
23768: LD_VAR 0 1
23772: NOT
23773: IFFALSE 23777
// exit ;
23775: GO 23803
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23777: LD_VAR 0 1
23781: PUSH
23782: LD_INT 1
23784: PPUSH
23785: LD_VAR 0 1
23789: PPUSH
23790: CALL_OW 12
23794: ARRAY
23795: PPUSH
23796: LD_INT 60
23798: PPUSH
23799: CALL_OW 234
// end ;
23803: PPOPN 1
23805: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23806: LD_EXP 36
23810: PUSH
23811: LD_EXP 66
23815: AND
23816: IFFALSE 23915
23818: GO 23820
23820: DISABLE
23821: LD_INT 0
23823: PPUSH
23824: PPUSH
// begin enable ;
23825: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23826: LD_ADDR_VAR 0 1
23830: PUSH
23831: LD_INT 22
23833: PUSH
23834: LD_OWVAR 2
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: LD_INT 61
23845: PUSH
23846: EMPTY
23847: LIST
23848: PUSH
23849: LD_INT 33
23851: PUSH
23852: LD_INT 2
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: LIST
23863: PPUSH
23864: CALL_OW 69
23868: ST_TO_ADDR
// if not tmp then
23869: LD_VAR 0 1
23873: NOT
23874: IFFALSE 23878
// exit ;
23876: GO 23915
// for i in tmp do
23878: LD_ADDR_VAR 0 2
23882: PUSH
23883: LD_VAR 0 1
23887: PUSH
23888: FOR_IN
23889: IFFALSE 23913
// if IsControledBy ( i ) then
23891: LD_VAR 0 2
23895: PPUSH
23896: CALL_OW 312
23900: IFFALSE 23911
// ComUnlink ( i ) ;
23902: LD_VAR 0 2
23906: PPUSH
23907: CALL_OW 136
23911: GO 23888
23913: POP
23914: POP
// end ;
23915: PPOPN 2
23917: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23918: LD_EXP 36
23922: PUSH
23923: LD_EXP 67
23927: AND
23928: IFFALSE 24068
23930: GO 23932
23932: DISABLE
23933: LD_INT 0
23935: PPUSH
23936: PPUSH
// begin ToLua ( displayPowell(); ) ;
23937: LD_STRING displayPowell();
23939: PPUSH
23940: CALL_OW 559
// uc_side := 0 ;
23944: LD_ADDR_OWVAR 20
23948: PUSH
23949: LD_INT 0
23951: ST_TO_ADDR
// uc_nation := 2 ;
23952: LD_ADDR_OWVAR 21
23956: PUSH
23957: LD_INT 2
23959: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23960: LD_ADDR_OWVAR 37
23964: PUSH
23965: LD_INT 14
23967: ST_TO_ADDR
// vc_engine := engine_siberite ;
23968: LD_ADDR_OWVAR 39
23972: PUSH
23973: LD_INT 3
23975: ST_TO_ADDR
// vc_control := control_apeman ;
23976: LD_ADDR_OWVAR 38
23980: PUSH
23981: LD_INT 5
23983: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23984: LD_ADDR_OWVAR 40
23988: PUSH
23989: LD_INT 29
23991: ST_TO_ADDR
// un := CreateVehicle ;
23992: LD_ADDR_VAR 0 2
23996: PUSH
23997: CALL_OW 45
24001: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24002: LD_VAR 0 2
24006: PPUSH
24007: LD_INT 1
24009: PPUSH
24010: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24014: LD_INT 35
24016: PPUSH
24017: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24021: LD_VAR 0 2
24025: PPUSH
24026: LD_INT 22
24028: PUSH
24029: LD_OWVAR 2
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PPUSH
24038: CALL_OW 69
24042: PPUSH
24043: LD_VAR 0 2
24047: PPUSH
24048: CALL_OW 74
24052: PPUSH
24053: CALL_OW 115
// until IsDead ( un ) ;
24057: LD_VAR 0 2
24061: PPUSH
24062: CALL_OW 301
24066: IFFALSE 24014
// end ;
24068: PPOPN 2
24070: END
// every 0 0$1 trigger StreamModeActive and sStu do
24071: LD_EXP 36
24075: PUSH
24076: LD_EXP 75
24080: AND
24081: IFFALSE 24097
24083: GO 24085
24085: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24086: LD_STRING displayStucuk();
24088: PPUSH
24089: CALL_OW 559
// ResetFog ;
24093: CALL_OW 335
// end ;
24097: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24098: LD_EXP 36
24102: PUSH
24103: LD_EXP 68
24107: AND
24108: IFFALSE 24249
24110: GO 24112
24112: DISABLE
24113: LD_INT 0
24115: PPUSH
24116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24117: LD_ADDR_VAR 0 2
24121: PUSH
24122: LD_INT 22
24124: PUSH
24125: LD_OWVAR 2
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: LD_INT 21
24136: PUSH
24137: LD_INT 1
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PPUSH
24148: CALL_OW 69
24152: ST_TO_ADDR
// if not tmp then
24153: LD_VAR 0 2
24157: NOT
24158: IFFALSE 24162
// exit ;
24160: GO 24249
// un := tmp [ rand ( 1 , tmp ) ] ;
24162: LD_ADDR_VAR 0 1
24166: PUSH
24167: LD_VAR 0 2
24171: PUSH
24172: LD_INT 1
24174: PPUSH
24175: LD_VAR 0 2
24179: PPUSH
24180: CALL_OW 12
24184: ARRAY
24185: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24186: LD_VAR 0 1
24190: PPUSH
24191: LD_INT 0
24193: PPUSH
24194: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24198: LD_VAR 0 1
24202: PPUSH
24203: LD_OWVAR 3
24207: PUSH
24208: LD_VAR 0 1
24212: DIFF
24213: PPUSH
24214: LD_VAR 0 1
24218: PPUSH
24219: CALL_OW 74
24223: PPUSH
24224: CALL_OW 115
// wait ( 0 0$20 ) ;
24228: LD_INT 700
24230: PPUSH
24231: CALL_OW 67
// SetSide ( un , your_side ) ;
24235: LD_VAR 0 1
24239: PPUSH
24240: LD_OWVAR 2
24244: PPUSH
24245: CALL_OW 235
// end ;
24249: PPOPN 2
24251: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24252: LD_EXP 36
24256: PUSH
24257: LD_EXP 69
24261: AND
24262: IFFALSE 24368
24264: GO 24266
24266: DISABLE
24267: LD_INT 0
24269: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24270: LD_ADDR_VAR 0 1
24274: PUSH
24275: LD_INT 22
24277: PUSH
24278: LD_OWVAR 2
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: PUSH
24287: LD_INT 2
24289: PUSH
24290: LD_INT 30
24292: PUSH
24293: LD_INT 0
24295: PUSH
24296: EMPTY
24297: LIST
24298: LIST
24299: PUSH
24300: LD_INT 30
24302: PUSH
24303: LD_INT 1
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: LIST
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PPUSH
24319: CALL_OW 69
24323: ST_TO_ADDR
// if not depot then
24324: LD_VAR 0 1
24328: NOT
24329: IFFALSE 24333
// exit ;
24331: GO 24368
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24333: LD_VAR 0 1
24337: PUSH
24338: LD_INT 1
24340: ARRAY
24341: PPUSH
24342: CALL_OW 250
24346: PPUSH
24347: LD_VAR 0 1
24351: PUSH
24352: LD_INT 1
24354: ARRAY
24355: PPUSH
24356: CALL_OW 251
24360: PPUSH
24361: LD_INT 70
24363: PPUSH
24364: CALL_OW 495
// end ;
24368: PPOPN 1
24370: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24371: LD_EXP 36
24375: PUSH
24376: LD_EXP 70
24380: AND
24381: IFFALSE 24592
24383: GO 24385
24385: DISABLE
24386: LD_INT 0
24388: PPUSH
24389: PPUSH
24390: PPUSH
24391: PPUSH
24392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24393: LD_ADDR_VAR 0 5
24397: PUSH
24398: LD_INT 22
24400: PUSH
24401: LD_OWVAR 2
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: PUSH
24410: LD_INT 21
24412: PUSH
24413: LD_INT 1
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PPUSH
24424: CALL_OW 69
24428: ST_TO_ADDR
// if not tmp then
24429: LD_VAR 0 5
24433: NOT
24434: IFFALSE 24438
// exit ;
24436: GO 24592
// for i in tmp do
24438: LD_ADDR_VAR 0 1
24442: PUSH
24443: LD_VAR 0 5
24447: PUSH
24448: FOR_IN
24449: IFFALSE 24590
// begin d := rand ( 0 , 5 ) ;
24451: LD_ADDR_VAR 0 4
24455: PUSH
24456: LD_INT 0
24458: PPUSH
24459: LD_INT 5
24461: PPUSH
24462: CALL_OW 12
24466: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24467: LD_ADDR_VAR 0 2
24471: PUSH
24472: LD_VAR 0 1
24476: PPUSH
24477: CALL_OW 250
24481: PPUSH
24482: LD_VAR 0 4
24486: PPUSH
24487: LD_INT 3
24489: PPUSH
24490: LD_INT 12
24492: PPUSH
24493: CALL_OW 12
24497: PPUSH
24498: CALL_OW 272
24502: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24503: LD_ADDR_VAR 0 3
24507: PUSH
24508: LD_VAR 0 1
24512: PPUSH
24513: CALL_OW 251
24517: PPUSH
24518: LD_VAR 0 4
24522: PPUSH
24523: LD_INT 3
24525: PPUSH
24526: LD_INT 12
24528: PPUSH
24529: CALL_OW 12
24533: PPUSH
24534: CALL_OW 273
24538: ST_TO_ADDR
// if ValidHex ( x , y ) then
24539: LD_VAR 0 2
24543: PPUSH
24544: LD_VAR 0 3
24548: PPUSH
24549: CALL_OW 488
24553: IFFALSE 24588
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24555: LD_VAR 0 1
24559: PPUSH
24560: LD_VAR 0 2
24564: PPUSH
24565: LD_VAR 0 3
24569: PPUSH
24570: LD_INT 3
24572: PPUSH
24573: LD_INT 6
24575: PPUSH
24576: CALL_OW 12
24580: PPUSH
24581: LD_INT 1
24583: PPUSH
24584: CALL_OW 483
// end ;
24588: GO 24448
24590: POP
24591: POP
// end ;
24592: PPOPN 5
24594: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24595: LD_EXP 36
24599: PUSH
24600: LD_EXP 71
24604: AND
24605: IFFALSE 24699
24607: GO 24609
24609: DISABLE
24610: LD_INT 0
24612: PPUSH
24613: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24614: LD_ADDR_VAR 0 2
24618: PUSH
24619: LD_INT 22
24621: PUSH
24622: LD_OWVAR 2
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 32
24633: PUSH
24634: LD_INT 1
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 21
24643: PUSH
24644: LD_INT 2
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: LIST
24655: PPUSH
24656: CALL_OW 69
24660: ST_TO_ADDR
// if not tmp then
24661: LD_VAR 0 2
24665: NOT
24666: IFFALSE 24670
// exit ;
24668: GO 24699
// for i in tmp do
24670: LD_ADDR_VAR 0 1
24674: PUSH
24675: LD_VAR 0 2
24679: PUSH
24680: FOR_IN
24681: IFFALSE 24697
// SetFuel ( i , 0 ) ;
24683: LD_VAR 0 1
24687: PPUSH
24688: LD_INT 0
24690: PPUSH
24691: CALL_OW 240
24695: GO 24680
24697: POP
24698: POP
// end ;
24699: PPOPN 2
24701: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24702: LD_EXP 36
24706: PUSH
24707: LD_EXP 72
24711: AND
24712: IFFALSE 24778
24714: GO 24716
24716: DISABLE
24717: LD_INT 0
24719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24720: LD_ADDR_VAR 0 1
24724: PUSH
24725: LD_INT 22
24727: PUSH
24728: LD_OWVAR 2
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PUSH
24737: LD_INT 30
24739: PUSH
24740: LD_INT 29
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PPUSH
24751: CALL_OW 69
24755: ST_TO_ADDR
// if not tmp then
24756: LD_VAR 0 1
24760: NOT
24761: IFFALSE 24765
// exit ;
24763: GO 24778
// DestroyUnit ( tmp [ 1 ] ) ;
24765: LD_VAR 0 1
24769: PUSH
24770: LD_INT 1
24772: ARRAY
24773: PPUSH
24774: CALL_OW 65
// end ;
24778: PPOPN 1
24780: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24781: LD_EXP 36
24785: PUSH
24786: LD_EXP 74
24790: AND
24791: IFFALSE 24920
24793: GO 24795
24795: DISABLE
24796: LD_INT 0
24798: PPUSH
// begin uc_side := 0 ;
24799: LD_ADDR_OWVAR 20
24803: PUSH
24804: LD_INT 0
24806: ST_TO_ADDR
// uc_nation := nation_arabian ;
24807: LD_ADDR_OWVAR 21
24811: PUSH
24812: LD_INT 2
24814: ST_TO_ADDR
// hc_gallery :=  ;
24815: LD_ADDR_OWVAR 33
24819: PUSH
24820: LD_STRING 
24822: ST_TO_ADDR
// hc_name :=  ;
24823: LD_ADDR_OWVAR 26
24827: PUSH
24828: LD_STRING 
24830: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24831: LD_INT 1
24833: PPUSH
24834: LD_INT 11
24836: PPUSH
24837: LD_INT 10
24839: PPUSH
24840: CALL_OW 380
// un := CreateHuman ;
24844: LD_ADDR_VAR 0 1
24848: PUSH
24849: CALL_OW 44
24853: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24854: LD_VAR 0 1
24858: PPUSH
24859: LD_INT 1
24861: PPUSH
24862: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24866: LD_INT 35
24868: PPUSH
24869: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24873: LD_VAR 0 1
24877: PPUSH
24878: LD_INT 22
24880: PUSH
24881: LD_OWVAR 2
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PPUSH
24890: CALL_OW 69
24894: PPUSH
24895: LD_VAR 0 1
24899: PPUSH
24900: CALL_OW 74
24904: PPUSH
24905: CALL_OW 115
// until IsDead ( un ) ;
24909: LD_VAR 0 1
24913: PPUSH
24914: CALL_OW 301
24918: IFFALSE 24866
// end ;
24920: PPOPN 1
24922: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24923: LD_EXP 36
24927: PUSH
24928: LD_EXP 76
24932: AND
24933: IFFALSE 24945
24935: GO 24937
24937: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24938: LD_STRING earthquake(getX(game), 0, 32)
24940: PPUSH
24941: CALL_OW 559
24945: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24946: LD_EXP 36
24950: PUSH
24951: LD_EXP 77
24955: AND
24956: IFFALSE 25047
24958: GO 24960
24960: DISABLE
24961: LD_INT 0
24963: PPUSH
// begin enable ;
24964: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24965: LD_ADDR_VAR 0 1
24969: PUSH
24970: LD_INT 22
24972: PUSH
24973: LD_OWVAR 2
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 21
24984: PUSH
24985: LD_INT 2
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: LD_INT 33
24994: PUSH
24995: LD_INT 3
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: LIST
25006: PPUSH
25007: CALL_OW 69
25011: ST_TO_ADDR
// if not tmp then
25012: LD_VAR 0 1
25016: NOT
25017: IFFALSE 25021
// exit ;
25019: GO 25047
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25021: LD_VAR 0 1
25025: PUSH
25026: LD_INT 1
25028: PPUSH
25029: LD_VAR 0 1
25033: PPUSH
25034: CALL_OW 12
25038: ARRAY
25039: PPUSH
25040: LD_INT 1
25042: PPUSH
25043: CALL_OW 234
// end ;
25047: PPOPN 1
25049: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25050: LD_EXP 36
25054: PUSH
25055: LD_EXP 78
25059: AND
25060: IFFALSE 25201
25062: GO 25064
25064: DISABLE
25065: LD_INT 0
25067: PPUSH
25068: PPUSH
25069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25070: LD_ADDR_VAR 0 3
25074: PUSH
25075: LD_INT 22
25077: PUSH
25078: LD_OWVAR 2
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 25
25089: PUSH
25090: LD_INT 1
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: PPUSH
25101: CALL_OW 69
25105: ST_TO_ADDR
// if not tmp then
25106: LD_VAR 0 3
25110: NOT
25111: IFFALSE 25115
// exit ;
25113: GO 25201
// un := tmp [ rand ( 1 , tmp ) ] ;
25115: LD_ADDR_VAR 0 2
25119: PUSH
25120: LD_VAR 0 3
25124: PUSH
25125: LD_INT 1
25127: PPUSH
25128: LD_VAR 0 3
25132: PPUSH
25133: CALL_OW 12
25137: ARRAY
25138: ST_TO_ADDR
// if Crawls ( un ) then
25139: LD_VAR 0 2
25143: PPUSH
25144: CALL_OW 318
25148: IFFALSE 25159
// ComWalk ( un ) ;
25150: LD_VAR 0 2
25154: PPUSH
25155: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25159: LD_VAR 0 2
25163: PPUSH
25164: LD_INT 9
25166: PPUSH
25167: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25171: LD_INT 28
25173: PPUSH
25174: LD_OWVAR 2
25178: PPUSH
25179: LD_INT 2
25181: PPUSH
25182: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25186: LD_INT 29
25188: PPUSH
25189: LD_OWVAR 2
25193: PPUSH
25194: LD_INT 2
25196: PPUSH
25197: CALL_OW 322
// end ;
25201: PPOPN 3
25203: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25204: LD_EXP 36
25208: PUSH
25209: LD_EXP 79
25213: AND
25214: IFFALSE 25325
25216: GO 25218
25218: DISABLE
25219: LD_INT 0
25221: PPUSH
25222: PPUSH
25223: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25224: LD_ADDR_VAR 0 3
25228: PUSH
25229: LD_INT 22
25231: PUSH
25232: LD_OWVAR 2
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: PUSH
25241: LD_INT 25
25243: PUSH
25244: LD_INT 1
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PPUSH
25255: CALL_OW 69
25259: ST_TO_ADDR
// if not tmp then
25260: LD_VAR 0 3
25264: NOT
25265: IFFALSE 25269
// exit ;
25267: GO 25325
// un := tmp [ rand ( 1 , tmp ) ] ;
25269: LD_ADDR_VAR 0 2
25273: PUSH
25274: LD_VAR 0 3
25278: PUSH
25279: LD_INT 1
25281: PPUSH
25282: LD_VAR 0 3
25286: PPUSH
25287: CALL_OW 12
25291: ARRAY
25292: ST_TO_ADDR
// if Crawls ( un ) then
25293: LD_VAR 0 2
25297: PPUSH
25298: CALL_OW 318
25302: IFFALSE 25313
// ComWalk ( un ) ;
25304: LD_VAR 0 2
25308: PPUSH
25309: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25313: LD_VAR 0 2
25317: PPUSH
25318: LD_INT 8
25320: PPUSH
25321: CALL_OW 336
// end ;
25325: PPOPN 3
25327: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25328: LD_EXP 36
25332: PUSH
25333: LD_EXP 80
25337: AND
25338: IFFALSE 25482
25340: GO 25342
25342: DISABLE
25343: LD_INT 0
25345: PPUSH
25346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25347: LD_ADDR_VAR 0 2
25351: PUSH
25352: LD_INT 22
25354: PUSH
25355: LD_OWVAR 2
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 21
25366: PUSH
25367: LD_INT 2
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: LD_INT 2
25376: PUSH
25377: LD_INT 34
25379: PUSH
25380: LD_INT 12
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: LD_INT 34
25389: PUSH
25390: LD_INT 51
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: LD_INT 34
25399: PUSH
25400: LD_INT 32
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: LIST
25417: PPUSH
25418: CALL_OW 69
25422: ST_TO_ADDR
// if not tmp then
25423: LD_VAR 0 2
25427: NOT
25428: IFFALSE 25432
// exit ;
25430: GO 25482
// for i in tmp do
25432: LD_ADDR_VAR 0 1
25436: PUSH
25437: LD_VAR 0 2
25441: PUSH
25442: FOR_IN
25443: IFFALSE 25480
// if GetCargo ( i , mat_artifact ) = 0 then
25445: LD_VAR 0 1
25449: PPUSH
25450: LD_INT 4
25452: PPUSH
25453: CALL_OW 289
25457: PUSH
25458: LD_INT 0
25460: EQUAL
25461: IFFALSE 25478
// SetCargo ( i , mat_siberit , 100 ) ;
25463: LD_VAR 0 1
25467: PPUSH
25468: LD_INT 3
25470: PPUSH
25471: LD_INT 100
25473: PPUSH
25474: CALL_OW 290
25478: GO 25442
25480: POP
25481: POP
// end ;
25482: PPOPN 2
25484: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25485: LD_EXP 36
25489: PUSH
25490: LD_EXP 81
25494: AND
25495: IFFALSE 25678
25497: GO 25499
25499: DISABLE
25500: LD_INT 0
25502: PPUSH
25503: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25504: LD_ADDR_VAR 0 2
25508: PUSH
25509: LD_INT 22
25511: PUSH
25512: LD_OWVAR 2
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PPUSH
25521: CALL_OW 69
25525: ST_TO_ADDR
// if not tmp then
25526: LD_VAR 0 2
25530: NOT
25531: IFFALSE 25535
// exit ;
25533: GO 25678
// for i := 1 to 2 do
25535: LD_ADDR_VAR 0 1
25539: PUSH
25540: DOUBLE
25541: LD_INT 1
25543: DEC
25544: ST_TO_ADDR
25545: LD_INT 2
25547: PUSH
25548: FOR_TO
25549: IFFALSE 25676
// begin uc_side := your_side ;
25551: LD_ADDR_OWVAR 20
25555: PUSH
25556: LD_OWVAR 2
25560: ST_TO_ADDR
// uc_nation := nation_american ;
25561: LD_ADDR_OWVAR 21
25565: PUSH
25566: LD_INT 1
25568: ST_TO_ADDR
// vc_chassis := us_morphling ;
25569: LD_ADDR_OWVAR 37
25573: PUSH
25574: LD_INT 5
25576: ST_TO_ADDR
// vc_engine := engine_siberite ;
25577: LD_ADDR_OWVAR 39
25581: PUSH
25582: LD_INT 3
25584: ST_TO_ADDR
// vc_control := control_computer ;
25585: LD_ADDR_OWVAR 38
25589: PUSH
25590: LD_INT 3
25592: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25593: LD_ADDR_OWVAR 40
25597: PUSH
25598: LD_INT 10
25600: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25601: LD_VAR 0 2
25605: PUSH
25606: LD_INT 1
25608: ARRAY
25609: PPUSH
25610: CALL_OW 310
25614: NOT
25615: IFFALSE 25662
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25617: CALL_OW 45
25621: PPUSH
25622: LD_VAR 0 2
25626: PUSH
25627: LD_INT 1
25629: ARRAY
25630: PPUSH
25631: CALL_OW 250
25635: PPUSH
25636: LD_VAR 0 2
25640: PUSH
25641: LD_INT 1
25643: ARRAY
25644: PPUSH
25645: CALL_OW 251
25649: PPUSH
25650: LD_INT 12
25652: PPUSH
25653: LD_INT 1
25655: PPUSH
25656: CALL_OW 50
25660: GO 25674
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25662: CALL_OW 45
25666: PPUSH
25667: LD_INT 1
25669: PPUSH
25670: CALL_OW 51
// end ;
25674: GO 25548
25676: POP
25677: POP
// end ;
25678: PPOPN 2
25680: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25681: LD_EXP 36
25685: PUSH
25686: LD_EXP 82
25690: AND
25691: IFFALSE 25913
25693: GO 25695
25695: DISABLE
25696: LD_INT 0
25698: PPUSH
25699: PPUSH
25700: PPUSH
25701: PPUSH
25702: PPUSH
25703: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25704: LD_ADDR_VAR 0 6
25708: PUSH
25709: LD_INT 22
25711: PUSH
25712: LD_OWVAR 2
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 21
25723: PUSH
25724: LD_INT 1
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 3
25733: PUSH
25734: LD_INT 23
25736: PUSH
25737: LD_INT 0
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: LIST
25752: PPUSH
25753: CALL_OW 69
25757: ST_TO_ADDR
// if not tmp then
25758: LD_VAR 0 6
25762: NOT
25763: IFFALSE 25767
// exit ;
25765: GO 25913
// s1 := rand ( 1 , 4 ) ;
25767: LD_ADDR_VAR 0 2
25771: PUSH
25772: LD_INT 1
25774: PPUSH
25775: LD_INT 4
25777: PPUSH
25778: CALL_OW 12
25782: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25783: LD_ADDR_VAR 0 4
25787: PUSH
25788: LD_VAR 0 6
25792: PUSH
25793: LD_INT 1
25795: ARRAY
25796: PPUSH
25797: LD_VAR 0 2
25801: PPUSH
25802: CALL_OW 259
25806: ST_TO_ADDR
// if s1 = 1 then
25807: LD_VAR 0 2
25811: PUSH
25812: LD_INT 1
25814: EQUAL
25815: IFFALSE 25835
// s2 := rand ( 2 , 4 ) else
25817: LD_ADDR_VAR 0 3
25821: PUSH
25822: LD_INT 2
25824: PPUSH
25825: LD_INT 4
25827: PPUSH
25828: CALL_OW 12
25832: ST_TO_ADDR
25833: GO 25843
// s2 := 1 ;
25835: LD_ADDR_VAR 0 3
25839: PUSH
25840: LD_INT 1
25842: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25843: LD_ADDR_VAR 0 5
25847: PUSH
25848: LD_VAR 0 6
25852: PUSH
25853: LD_INT 1
25855: ARRAY
25856: PPUSH
25857: LD_VAR 0 3
25861: PPUSH
25862: CALL_OW 259
25866: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25867: LD_VAR 0 6
25871: PUSH
25872: LD_INT 1
25874: ARRAY
25875: PPUSH
25876: LD_VAR 0 2
25880: PPUSH
25881: LD_VAR 0 5
25885: PPUSH
25886: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25890: LD_VAR 0 6
25894: PUSH
25895: LD_INT 1
25897: ARRAY
25898: PPUSH
25899: LD_VAR 0 3
25903: PPUSH
25904: LD_VAR 0 4
25908: PPUSH
25909: CALL_OW 237
// end ;
25913: PPOPN 6
25915: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25916: LD_EXP 36
25920: PUSH
25921: LD_EXP 83
25925: AND
25926: IFFALSE 26005
25928: GO 25930
25930: DISABLE
25931: LD_INT 0
25933: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25934: LD_ADDR_VAR 0 1
25938: PUSH
25939: LD_INT 22
25941: PUSH
25942: LD_OWVAR 2
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: LD_INT 30
25953: PUSH
25954: LD_INT 3
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PPUSH
25965: CALL_OW 69
25969: ST_TO_ADDR
// if not tmp then
25970: LD_VAR 0 1
25974: NOT
25975: IFFALSE 25979
// exit ;
25977: GO 26005
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25979: LD_VAR 0 1
25983: PUSH
25984: LD_INT 1
25986: PPUSH
25987: LD_VAR 0 1
25991: PPUSH
25992: CALL_OW 12
25996: ARRAY
25997: PPUSH
25998: LD_INT 1
26000: PPUSH
26001: CALL_OW 234
// end ;
26005: PPOPN 1
26007: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26008: LD_EXP 36
26012: PUSH
26013: LD_EXP 84
26017: AND
26018: IFFALSE 26130
26020: GO 26022
26022: DISABLE
26023: LD_INT 0
26025: PPUSH
26026: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26027: LD_ADDR_VAR 0 2
26031: PUSH
26032: LD_INT 22
26034: PUSH
26035: LD_OWVAR 2
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 2
26046: PUSH
26047: LD_INT 30
26049: PUSH
26050: LD_INT 27
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 30
26059: PUSH
26060: LD_INT 26
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: PUSH
26067: LD_INT 30
26069: PUSH
26070: LD_INT 28
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PPUSH
26087: CALL_OW 69
26091: ST_TO_ADDR
// if not tmp then
26092: LD_VAR 0 2
26096: NOT
26097: IFFALSE 26101
// exit ;
26099: GO 26130
// for i in tmp do
26101: LD_ADDR_VAR 0 1
26105: PUSH
26106: LD_VAR 0 2
26110: PUSH
26111: FOR_IN
26112: IFFALSE 26128
// SetLives ( i , 1 ) ;
26114: LD_VAR 0 1
26118: PPUSH
26119: LD_INT 1
26121: PPUSH
26122: CALL_OW 234
26126: GO 26111
26128: POP
26129: POP
// end ;
26130: PPOPN 2
26132: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26133: LD_EXP 36
26137: PUSH
26138: LD_EXP 85
26142: AND
26143: IFFALSE 26430
26145: GO 26147
26147: DISABLE
26148: LD_INT 0
26150: PPUSH
26151: PPUSH
26152: PPUSH
// begin i := rand ( 1 , 7 ) ;
26153: LD_ADDR_VAR 0 1
26157: PUSH
26158: LD_INT 1
26160: PPUSH
26161: LD_INT 7
26163: PPUSH
26164: CALL_OW 12
26168: ST_TO_ADDR
// case i of 1 :
26169: LD_VAR 0 1
26173: PUSH
26174: LD_INT 1
26176: DOUBLE
26177: EQUAL
26178: IFTRUE 26182
26180: GO 26192
26182: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26183: LD_STRING earthquake(getX(game), 0, 32)
26185: PPUSH
26186: CALL_OW 559
26190: GO 26430
26192: LD_INT 2
26194: DOUBLE
26195: EQUAL
26196: IFTRUE 26200
26198: GO 26214
26200: POP
// begin ToLua ( displayStucuk(); ) ;
26201: LD_STRING displayStucuk();
26203: PPUSH
26204: CALL_OW 559
// ResetFog ;
26208: CALL_OW 335
// end ; 3 :
26212: GO 26430
26214: LD_INT 3
26216: DOUBLE
26217: EQUAL
26218: IFTRUE 26222
26220: GO 26326
26222: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26223: LD_ADDR_VAR 0 2
26227: PUSH
26228: LD_INT 22
26230: PUSH
26231: LD_OWVAR 2
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: PUSH
26240: LD_INT 25
26242: PUSH
26243: LD_INT 1
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PPUSH
26254: CALL_OW 69
26258: ST_TO_ADDR
// if not tmp then
26259: LD_VAR 0 2
26263: NOT
26264: IFFALSE 26268
// exit ;
26266: GO 26430
// un := tmp [ rand ( 1 , tmp ) ] ;
26268: LD_ADDR_VAR 0 3
26272: PUSH
26273: LD_VAR 0 2
26277: PUSH
26278: LD_INT 1
26280: PPUSH
26281: LD_VAR 0 2
26285: PPUSH
26286: CALL_OW 12
26290: ARRAY
26291: ST_TO_ADDR
// if Crawls ( un ) then
26292: LD_VAR 0 3
26296: PPUSH
26297: CALL_OW 318
26301: IFFALSE 26312
// ComWalk ( un ) ;
26303: LD_VAR 0 3
26307: PPUSH
26308: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26312: LD_VAR 0 3
26316: PPUSH
26317: LD_INT 8
26319: PPUSH
26320: CALL_OW 336
// end ; 4 :
26324: GO 26430
26326: LD_INT 4
26328: DOUBLE
26329: EQUAL
26330: IFTRUE 26334
26332: GO 26408
26334: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26335: LD_ADDR_VAR 0 2
26339: PUSH
26340: LD_INT 22
26342: PUSH
26343: LD_OWVAR 2
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 30
26354: PUSH
26355: LD_INT 29
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PPUSH
26366: CALL_OW 69
26370: ST_TO_ADDR
// if not tmp then
26371: LD_VAR 0 2
26375: NOT
26376: IFFALSE 26380
// exit ;
26378: GO 26430
// CenterNowOnUnits ( tmp [ 1 ] ) ;
26380: LD_VAR 0 2
26384: PUSH
26385: LD_INT 1
26387: ARRAY
26388: PPUSH
26389: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
26393: LD_VAR 0 2
26397: PUSH
26398: LD_INT 1
26400: ARRAY
26401: PPUSH
26402: CALL_OW 65
// end ; 5 .. 7 :
26406: GO 26430
26408: LD_INT 5
26410: DOUBLE
26411: GREATEREQUAL
26412: IFFALSE 26420
26414: LD_INT 7
26416: DOUBLE
26417: LESSEQUAL
26418: IFTRUE 26422
26420: GO 26429
26422: POP
// StreamSibBomb ; end ;
26423: CALL 22667 0 0
26427: GO 26430
26429: POP
// end ;
26430: PPOPN 3
26432: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26433: LD_EXP 36
26437: PUSH
26438: LD_EXP 86
26442: AND
26443: IFFALSE 26599
26445: GO 26447
26447: DISABLE
26448: LD_INT 0
26450: PPUSH
26451: PPUSH
26452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26453: LD_ADDR_VAR 0 2
26457: PUSH
26458: LD_INT 81
26460: PUSH
26461: LD_OWVAR 2
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 2
26472: PUSH
26473: LD_INT 21
26475: PUSH
26476: LD_INT 1
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 21
26485: PUSH
26486: LD_INT 2
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: LIST
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PPUSH
26502: CALL_OW 69
26506: ST_TO_ADDR
// if not tmp then
26507: LD_VAR 0 2
26511: NOT
26512: IFFALSE 26516
// exit ;
26514: GO 26599
// p := 0 ;
26516: LD_ADDR_VAR 0 3
26520: PUSH
26521: LD_INT 0
26523: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26524: LD_INT 35
26526: PPUSH
26527: CALL_OW 67
// p := p + 1 ;
26531: LD_ADDR_VAR 0 3
26535: PUSH
26536: LD_VAR 0 3
26540: PUSH
26541: LD_INT 1
26543: PLUS
26544: ST_TO_ADDR
// for i in tmp do
26545: LD_ADDR_VAR 0 1
26549: PUSH
26550: LD_VAR 0 2
26554: PUSH
26555: FOR_IN
26556: IFFALSE 26587
// if GetLives ( i ) < 1000 then
26558: LD_VAR 0 1
26562: PPUSH
26563: CALL_OW 256
26567: PUSH
26568: LD_INT 1000
26570: LESS
26571: IFFALSE 26585
// SetLives ( i , 1000 ) ;
26573: LD_VAR 0 1
26577: PPUSH
26578: LD_INT 1000
26580: PPUSH
26581: CALL_OW 234
26585: GO 26555
26587: POP
26588: POP
// until p > 20 ;
26589: LD_VAR 0 3
26593: PUSH
26594: LD_INT 20
26596: GREATER
26597: IFFALSE 26524
// end ;
26599: PPOPN 3
26601: END
// every 0 0$1 trigger StreamModeActive and sTime do
26602: LD_EXP 36
26606: PUSH
26607: LD_EXP 87
26611: AND
26612: IFFALSE 26647
26614: GO 26616
26616: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26617: LD_INT 28
26619: PPUSH
26620: LD_OWVAR 2
26624: PPUSH
26625: LD_INT 2
26627: PPUSH
26628: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26632: LD_INT 30
26634: PPUSH
26635: LD_OWVAR 2
26639: PPUSH
26640: LD_INT 2
26642: PPUSH
26643: CALL_OW 322
// end ;
26647: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26648: LD_EXP 36
26652: PUSH
26653: LD_EXP 88
26657: AND
26658: IFFALSE 26779
26660: GO 26662
26662: DISABLE
26663: LD_INT 0
26665: PPUSH
26666: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26667: LD_ADDR_VAR 0 2
26671: PUSH
26672: LD_INT 22
26674: PUSH
26675: LD_OWVAR 2
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: LD_INT 21
26686: PUSH
26687: LD_INT 1
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: LD_INT 3
26696: PUSH
26697: LD_INT 23
26699: PUSH
26700: LD_INT 0
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: LIST
26715: PPUSH
26716: CALL_OW 69
26720: ST_TO_ADDR
// if not tmp then
26721: LD_VAR 0 2
26725: NOT
26726: IFFALSE 26730
// exit ;
26728: GO 26779
// for i in tmp do
26730: LD_ADDR_VAR 0 1
26734: PUSH
26735: LD_VAR 0 2
26739: PUSH
26740: FOR_IN
26741: IFFALSE 26777
// begin if Crawls ( i ) then
26743: LD_VAR 0 1
26747: PPUSH
26748: CALL_OW 318
26752: IFFALSE 26763
// ComWalk ( i ) ;
26754: LD_VAR 0 1
26758: PPUSH
26759: CALL_OW 138
// SetClass ( i , 2 ) ;
26763: LD_VAR 0 1
26767: PPUSH
26768: LD_INT 2
26770: PPUSH
26771: CALL_OW 336
// end ;
26775: GO 26740
26777: POP
26778: POP
// end ;
26779: PPOPN 2
26781: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26782: LD_EXP 36
26786: PUSH
26787: LD_EXP 89
26791: AND
26792: IFFALSE 27080
26794: GO 26796
26796: DISABLE
26797: LD_INT 0
26799: PPUSH
26800: PPUSH
26801: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26802: LD_OWVAR 2
26806: PPUSH
26807: LD_INT 9
26809: PPUSH
26810: LD_INT 1
26812: PPUSH
26813: LD_INT 1
26815: PPUSH
26816: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26820: LD_INT 9
26822: PPUSH
26823: LD_OWVAR 2
26827: PPUSH
26828: CALL_OW 343
// uc_side := 9 ;
26832: LD_ADDR_OWVAR 20
26836: PUSH
26837: LD_INT 9
26839: ST_TO_ADDR
// uc_nation := 2 ;
26840: LD_ADDR_OWVAR 21
26844: PUSH
26845: LD_INT 2
26847: ST_TO_ADDR
// hc_name := Dark Warrior ;
26848: LD_ADDR_OWVAR 26
26852: PUSH
26853: LD_STRING Dark Warrior
26855: ST_TO_ADDR
// hc_gallery :=  ;
26856: LD_ADDR_OWVAR 33
26860: PUSH
26861: LD_STRING 
26863: ST_TO_ADDR
// hc_noskilllimit := true ;
26864: LD_ADDR_OWVAR 76
26868: PUSH
26869: LD_INT 1
26871: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26872: LD_ADDR_OWVAR 31
26876: PUSH
26877: LD_INT 30
26879: PUSH
26880: LD_INT 30
26882: PUSH
26883: LD_INT 30
26885: PUSH
26886: LD_INT 30
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: ST_TO_ADDR
// un := CreateHuman ;
26895: LD_ADDR_VAR 0 3
26899: PUSH
26900: CALL_OW 44
26904: ST_TO_ADDR
// hc_noskilllimit := false ;
26905: LD_ADDR_OWVAR 76
26909: PUSH
26910: LD_INT 0
26912: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26913: LD_VAR 0 3
26917: PPUSH
26918: LD_INT 1
26920: PPUSH
26921: CALL_OW 51
// ToLua ( playRanger() ) ;
26925: LD_STRING playRanger()
26927: PPUSH
26928: CALL_OW 559
// p := 0 ;
26932: LD_ADDR_VAR 0 2
26936: PUSH
26937: LD_INT 0
26939: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26940: LD_INT 35
26942: PPUSH
26943: CALL_OW 67
// p := p + 1 ;
26947: LD_ADDR_VAR 0 2
26951: PUSH
26952: LD_VAR 0 2
26956: PUSH
26957: LD_INT 1
26959: PLUS
26960: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26961: LD_VAR 0 3
26965: PPUSH
26966: CALL_OW 256
26970: PUSH
26971: LD_INT 1000
26973: LESS
26974: IFFALSE 26988
// SetLives ( un , 1000 ) ;
26976: LD_VAR 0 3
26980: PPUSH
26981: LD_INT 1000
26983: PPUSH
26984: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26988: LD_VAR 0 3
26992: PPUSH
26993: LD_INT 81
26995: PUSH
26996: LD_OWVAR 2
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 91
27007: PUSH
27008: LD_VAR 0 3
27012: PUSH
27013: LD_INT 30
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: LIST
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PPUSH
27025: CALL_OW 69
27029: PPUSH
27030: LD_VAR 0 3
27034: PPUSH
27035: CALL_OW 74
27039: PPUSH
27040: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
27044: LD_VAR 0 2
27048: PUSH
27049: LD_INT 80
27051: GREATER
27052: PUSH
27053: LD_VAR 0 3
27057: PPUSH
27058: CALL_OW 301
27062: OR
27063: IFFALSE 26940
// if un then
27065: LD_VAR 0 3
27069: IFFALSE 27080
// RemoveUnit ( un ) ;
27071: LD_VAR 0 3
27075: PPUSH
27076: CALL_OW 64
// end ;
27080: PPOPN 3
27082: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
27083: LD_EXP 90
27087: IFFALSE 27203
27089: GO 27091
27091: DISABLE
27092: LD_INT 0
27094: PPUSH
27095: PPUSH
27096: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27097: LD_ADDR_VAR 0 2
27101: PUSH
27102: LD_INT 81
27104: PUSH
27105: LD_OWVAR 2
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PUSH
27114: LD_INT 21
27116: PUSH
27117: LD_INT 1
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PPUSH
27128: CALL_OW 69
27132: ST_TO_ADDR
// ToLua ( playComputer() ) ;
27133: LD_STRING playComputer()
27135: PPUSH
27136: CALL_OW 559
// if not tmp then
27140: LD_VAR 0 2
27144: NOT
27145: IFFALSE 27149
// exit ;
27147: GO 27203
// for i in tmp do
27149: LD_ADDR_VAR 0 1
27153: PUSH
27154: LD_VAR 0 2
27158: PUSH
27159: FOR_IN
27160: IFFALSE 27201
// for j := 1 to 4 do
27162: LD_ADDR_VAR 0 3
27166: PUSH
27167: DOUBLE
27168: LD_INT 1
27170: DEC
27171: ST_TO_ADDR
27172: LD_INT 4
27174: PUSH
27175: FOR_TO
27176: IFFALSE 27197
// SetSkill ( i , j , 10 ) ;
27178: LD_VAR 0 1
27182: PPUSH
27183: LD_VAR 0 3
27187: PPUSH
27188: LD_INT 10
27190: PPUSH
27191: CALL_OW 237
27195: GO 27175
27197: POP
27198: POP
27199: GO 27159
27201: POP
27202: POP
// end ;
27203: PPOPN 3
27205: END
// every 0 0$1 trigger s30 do var i , tmp ;
27206: LD_EXP 91
27210: IFFALSE 27279
27212: GO 27214
27214: DISABLE
27215: LD_INT 0
27217: PPUSH
27218: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27219: LD_ADDR_VAR 0 2
27223: PUSH
27224: LD_INT 22
27226: PUSH
27227: LD_OWVAR 2
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PPUSH
27236: CALL_OW 69
27240: ST_TO_ADDR
// if not tmp then
27241: LD_VAR 0 2
27245: NOT
27246: IFFALSE 27250
// exit ;
27248: GO 27279
// for i in tmp do
27250: LD_ADDR_VAR 0 1
27254: PUSH
27255: LD_VAR 0 2
27259: PUSH
27260: FOR_IN
27261: IFFALSE 27277
// SetLives ( i , 300 ) ;
27263: LD_VAR 0 1
27267: PPUSH
27268: LD_INT 300
27270: PPUSH
27271: CALL_OW 234
27275: GO 27260
27277: POP
27278: POP
// end ;
27279: PPOPN 2
27281: END
// every 0 0$1 trigger s60 do var i , tmp ;
27282: LD_EXP 92
27286: IFFALSE 27355
27288: GO 27290
27290: DISABLE
27291: LD_INT 0
27293: PPUSH
27294: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27295: LD_ADDR_VAR 0 2
27299: PUSH
27300: LD_INT 22
27302: PUSH
27303: LD_OWVAR 2
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PPUSH
27312: CALL_OW 69
27316: ST_TO_ADDR
// if not tmp then
27317: LD_VAR 0 2
27321: NOT
27322: IFFALSE 27326
// exit ;
27324: GO 27355
// for i in tmp do
27326: LD_ADDR_VAR 0 1
27330: PUSH
27331: LD_VAR 0 2
27335: PUSH
27336: FOR_IN
27337: IFFALSE 27353
// SetLives ( i , 600 ) ;
27339: LD_VAR 0 1
27343: PPUSH
27344: LD_INT 600
27346: PPUSH
27347: CALL_OW 234
27351: GO 27336
27353: POP
27354: POP
// end ;
27355: PPOPN 2
27357: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27358: LD_INT 0
27360: PPUSH
// case cmd of 301 :
27361: LD_VAR 0 1
27365: PUSH
27366: LD_INT 301
27368: DOUBLE
27369: EQUAL
27370: IFTRUE 27374
27372: GO 27406
27374: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
27375: LD_VAR 0 6
27379: PPUSH
27380: LD_VAR 0 7
27384: PPUSH
27385: LD_VAR 0 8
27389: PPUSH
27390: LD_VAR 0 4
27394: PPUSH
27395: LD_VAR 0 5
27399: PPUSH
27400: CALL 28607 0 5
27404: GO 27527
27406: LD_INT 302
27408: DOUBLE
27409: EQUAL
27410: IFTRUE 27414
27412: GO 27451
27414: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
27415: LD_VAR 0 6
27419: PPUSH
27420: LD_VAR 0 7
27424: PPUSH
27425: LD_VAR 0 8
27429: PPUSH
27430: LD_VAR 0 9
27434: PPUSH
27435: LD_VAR 0 4
27439: PPUSH
27440: LD_VAR 0 5
27444: PPUSH
27445: CALL 28698 0 6
27449: GO 27527
27451: LD_INT 303
27453: DOUBLE
27454: EQUAL
27455: IFTRUE 27459
27457: GO 27496
27459: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
27460: LD_VAR 0 6
27464: PPUSH
27465: LD_VAR 0 7
27469: PPUSH
27470: LD_VAR 0 8
27474: PPUSH
27475: LD_VAR 0 9
27479: PPUSH
27480: LD_VAR 0 4
27484: PPUSH
27485: LD_VAR 0 5
27489: PPUSH
27490: CALL 27532 0 6
27494: GO 27527
27496: LD_INT 304
27498: DOUBLE
27499: EQUAL
27500: IFTRUE 27504
27502: GO 27526
27504: POP
// hHackTeleport ( unit , x , y ) ; end ;
27505: LD_VAR 0 2
27509: PPUSH
27510: LD_VAR 0 4
27514: PPUSH
27515: LD_VAR 0 5
27519: PPUSH
27520: CALL 29291 0 3
27524: GO 27527
27526: POP
// end ;
27527: LD_VAR 0 12
27531: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27532: LD_INT 0
27534: PPUSH
27535: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27536: LD_VAR 0 1
27540: PUSH
27541: LD_INT 1
27543: LESS
27544: PUSH
27545: LD_VAR 0 1
27549: PUSH
27550: LD_INT 3
27552: GREATER
27553: OR
27554: PUSH
27555: LD_VAR 0 5
27559: PPUSH
27560: LD_VAR 0 6
27564: PPUSH
27565: CALL_OW 428
27569: OR
27570: IFFALSE 27574
// exit ;
27572: GO 28294
// uc_side := your_side ;
27574: LD_ADDR_OWVAR 20
27578: PUSH
27579: LD_OWVAR 2
27583: ST_TO_ADDR
// uc_nation := nation ;
27584: LD_ADDR_OWVAR 21
27588: PUSH
27589: LD_VAR 0 1
27593: ST_TO_ADDR
// bc_level = 1 ;
27594: LD_ADDR_OWVAR 43
27598: PUSH
27599: LD_INT 1
27601: ST_TO_ADDR
// case btype of 1 :
27602: LD_VAR 0 2
27606: PUSH
27607: LD_INT 1
27609: DOUBLE
27610: EQUAL
27611: IFTRUE 27615
27613: GO 27626
27615: POP
// bc_type := b_depot ; 2 :
27616: LD_ADDR_OWVAR 42
27620: PUSH
27621: LD_INT 0
27623: ST_TO_ADDR
27624: GO 28238
27626: LD_INT 2
27628: DOUBLE
27629: EQUAL
27630: IFTRUE 27634
27632: GO 27645
27634: POP
// bc_type := b_warehouse ; 3 :
27635: LD_ADDR_OWVAR 42
27639: PUSH
27640: LD_INT 1
27642: ST_TO_ADDR
27643: GO 28238
27645: LD_INT 3
27647: DOUBLE
27648: EQUAL
27649: IFTRUE 27653
27651: GO 27664
27653: POP
// bc_type := b_lab ; 4 .. 9 :
27654: LD_ADDR_OWVAR 42
27658: PUSH
27659: LD_INT 6
27661: ST_TO_ADDR
27662: GO 28238
27664: LD_INT 4
27666: DOUBLE
27667: GREATEREQUAL
27668: IFFALSE 27676
27670: LD_INT 9
27672: DOUBLE
27673: LESSEQUAL
27674: IFTRUE 27678
27676: GO 27730
27678: POP
// begin bc_type := b_lab_half ;
27679: LD_ADDR_OWVAR 42
27683: PUSH
27684: LD_INT 7
27686: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
27687: LD_ADDR_OWVAR 44
27691: PUSH
27692: LD_INT 10
27694: PUSH
27695: LD_INT 11
27697: PUSH
27698: LD_INT 12
27700: PUSH
27701: LD_INT 15
27703: PUSH
27704: LD_INT 14
27706: PUSH
27707: LD_INT 13
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: PUSH
27718: LD_VAR 0 2
27722: PUSH
27723: LD_INT 3
27725: MINUS
27726: ARRAY
27727: ST_TO_ADDR
// end ; 10 .. 13 :
27728: GO 28238
27730: LD_INT 10
27732: DOUBLE
27733: GREATEREQUAL
27734: IFFALSE 27742
27736: LD_INT 13
27738: DOUBLE
27739: LESSEQUAL
27740: IFTRUE 27744
27742: GO 27821
27744: POP
// begin bc_type := b_lab_full ;
27745: LD_ADDR_OWVAR 42
27749: PUSH
27750: LD_INT 8
27752: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27753: LD_ADDR_OWVAR 44
27757: PUSH
27758: LD_INT 10
27760: PUSH
27761: LD_INT 12
27763: PUSH
27764: LD_INT 14
27766: PUSH
27767: LD_INT 13
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: PUSH
27776: LD_VAR 0 2
27780: PUSH
27781: LD_INT 9
27783: MINUS
27784: ARRAY
27785: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
27786: LD_ADDR_OWVAR 45
27790: PUSH
27791: LD_INT 11
27793: PUSH
27794: LD_INT 15
27796: PUSH
27797: LD_INT 12
27799: PUSH
27800: LD_INT 15
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: PUSH
27809: LD_VAR 0 2
27813: PUSH
27814: LD_INT 9
27816: MINUS
27817: ARRAY
27818: ST_TO_ADDR
// end ; 14 :
27819: GO 28238
27821: LD_INT 14
27823: DOUBLE
27824: EQUAL
27825: IFTRUE 27829
27827: GO 27840
27829: POP
// bc_type := b_workshop ; 15 :
27830: LD_ADDR_OWVAR 42
27834: PUSH
27835: LD_INT 2
27837: ST_TO_ADDR
27838: GO 28238
27840: LD_INT 15
27842: DOUBLE
27843: EQUAL
27844: IFTRUE 27848
27846: GO 27859
27848: POP
// bc_type := b_factory ; 16 :
27849: LD_ADDR_OWVAR 42
27853: PUSH
27854: LD_INT 3
27856: ST_TO_ADDR
27857: GO 28238
27859: LD_INT 16
27861: DOUBLE
27862: EQUAL
27863: IFTRUE 27867
27865: GO 27878
27867: POP
// bc_type := b_ext_gun ; 17 :
27868: LD_ADDR_OWVAR 42
27872: PUSH
27873: LD_INT 17
27875: ST_TO_ADDR
27876: GO 28238
27878: LD_INT 17
27880: DOUBLE
27881: EQUAL
27882: IFTRUE 27886
27884: GO 27914
27886: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
27887: LD_ADDR_OWVAR 42
27891: PUSH
27892: LD_INT 19
27894: PUSH
27895: LD_INT 23
27897: PUSH
27898: LD_INT 19
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: LIST
27905: PUSH
27906: LD_VAR 0 1
27910: ARRAY
27911: ST_TO_ADDR
27912: GO 28238
27914: LD_INT 18
27916: DOUBLE
27917: EQUAL
27918: IFTRUE 27922
27920: GO 27933
27922: POP
// bc_type := b_ext_radar ; 19 :
27923: LD_ADDR_OWVAR 42
27927: PUSH
27928: LD_INT 20
27930: ST_TO_ADDR
27931: GO 28238
27933: LD_INT 19
27935: DOUBLE
27936: EQUAL
27937: IFTRUE 27941
27939: GO 27952
27941: POP
// bc_type := b_ext_radio ; 20 :
27942: LD_ADDR_OWVAR 42
27946: PUSH
27947: LD_INT 22
27949: ST_TO_ADDR
27950: GO 28238
27952: LD_INT 20
27954: DOUBLE
27955: EQUAL
27956: IFTRUE 27960
27958: GO 27971
27960: POP
// bc_type := b_ext_siberium ; 21 :
27961: LD_ADDR_OWVAR 42
27965: PUSH
27966: LD_INT 21
27968: ST_TO_ADDR
27969: GO 28238
27971: LD_INT 21
27973: DOUBLE
27974: EQUAL
27975: IFTRUE 27979
27977: GO 27990
27979: POP
// bc_type := b_ext_computer ; 22 :
27980: LD_ADDR_OWVAR 42
27984: PUSH
27985: LD_INT 24
27987: ST_TO_ADDR
27988: GO 28238
27990: LD_INT 22
27992: DOUBLE
27993: EQUAL
27994: IFTRUE 27998
27996: GO 28009
27998: POP
// bc_type := b_ext_track ; 23 :
27999: LD_ADDR_OWVAR 42
28003: PUSH
28004: LD_INT 16
28006: ST_TO_ADDR
28007: GO 28238
28009: LD_INT 23
28011: DOUBLE
28012: EQUAL
28013: IFTRUE 28017
28015: GO 28028
28017: POP
// bc_type := b_ext_laser ; 24 :
28018: LD_ADDR_OWVAR 42
28022: PUSH
28023: LD_INT 25
28025: ST_TO_ADDR
28026: GO 28238
28028: LD_INT 24
28030: DOUBLE
28031: EQUAL
28032: IFTRUE 28036
28034: GO 28047
28036: POP
// bc_type := b_control_tower ; 25 :
28037: LD_ADDR_OWVAR 42
28041: PUSH
28042: LD_INT 36
28044: ST_TO_ADDR
28045: GO 28238
28047: LD_INT 25
28049: DOUBLE
28050: EQUAL
28051: IFTRUE 28055
28053: GO 28066
28055: POP
// bc_type := b_breastwork ; 26 :
28056: LD_ADDR_OWVAR 42
28060: PUSH
28061: LD_INT 31
28063: ST_TO_ADDR
28064: GO 28238
28066: LD_INT 26
28068: DOUBLE
28069: EQUAL
28070: IFTRUE 28074
28072: GO 28085
28074: POP
// bc_type := b_bunker ; 27 :
28075: LD_ADDR_OWVAR 42
28079: PUSH
28080: LD_INT 32
28082: ST_TO_ADDR
28083: GO 28238
28085: LD_INT 27
28087: DOUBLE
28088: EQUAL
28089: IFTRUE 28093
28091: GO 28104
28093: POP
// bc_type := b_turret ; 28 :
28094: LD_ADDR_OWVAR 42
28098: PUSH
28099: LD_INT 33
28101: ST_TO_ADDR
28102: GO 28238
28104: LD_INT 28
28106: DOUBLE
28107: EQUAL
28108: IFTRUE 28112
28110: GO 28123
28112: POP
// bc_type := b_armoury ; 29 :
28113: LD_ADDR_OWVAR 42
28117: PUSH
28118: LD_INT 4
28120: ST_TO_ADDR
28121: GO 28238
28123: LD_INT 29
28125: DOUBLE
28126: EQUAL
28127: IFTRUE 28131
28129: GO 28142
28131: POP
// bc_type := b_barracks ; 30 :
28132: LD_ADDR_OWVAR 42
28136: PUSH
28137: LD_INT 5
28139: ST_TO_ADDR
28140: GO 28238
28142: LD_INT 30
28144: DOUBLE
28145: EQUAL
28146: IFTRUE 28150
28148: GO 28161
28150: POP
// bc_type := b_solar_power ; 31 :
28151: LD_ADDR_OWVAR 42
28155: PUSH
28156: LD_INT 27
28158: ST_TO_ADDR
28159: GO 28238
28161: LD_INT 31
28163: DOUBLE
28164: EQUAL
28165: IFTRUE 28169
28167: GO 28180
28169: POP
// bc_type := b_oil_power ; 32 :
28170: LD_ADDR_OWVAR 42
28174: PUSH
28175: LD_INT 26
28177: ST_TO_ADDR
28178: GO 28238
28180: LD_INT 32
28182: DOUBLE
28183: EQUAL
28184: IFTRUE 28188
28186: GO 28199
28188: POP
// bc_type := b_siberite_power ; 33 :
28189: LD_ADDR_OWVAR 42
28193: PUSH
28194: LD_INT 28
28196: ST_TO_ADDR
28197: GO 28238
28199: LD_INT 33
28201: DOUBLE
28202: EQUAL
28203: IFTRUE 28207
28205: GO 28218
28207: POP
// bc_type := b_oil_mine ; 34 :
28208: LD_ADDR_OWVAR 42
28212: PUSH
28213: LD_INT 29
28215: ST_TO_ADDR
28216: GO 28238
28218: LD_INT 34
28220: DOUBLE
28221: EQUAL
28222: IFTRUE 28226
28224: GO 28237
28226: POP
// bc_type := b_siberite_mine ; end ;
28227: LD_ADDR_OWVAR 42
28231: PUSH
28232: LD_INT 30
28234: ST_TO_ADDR
28235: GO 28238
28237: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28238: LD_ADDR_VAR 0 8
28242: PUSH
28243: LD_VAR 0 5
28247: PPUSH
28248: LD_VAR 0 6
28252: PPUSH
28253: LD_VAR 0 3
28257: PPUSH
28258: CALL_OW 47
28262: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28263: LD_OWVAR 42
28267: PUSH
28268: LD_INT 32
28270: PUSH
28271: LD_INT 33
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: IN
28278: IFFALSE 28294
// PlaceWeaponTurret ( b , weapon ) ;
28280: LD_VAR 0 8
28284: PPUSH
28285: LD_VAR 0 4
28289: PPUSH
28290: CALL_OW 431
// end ;
28294: LD_VAR 0 7
28298: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
28299: LD_INT 0
28301: PPUSH
28302: PPUSH
28303: PPUSH
28304: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28305: LD_ADDR_VAR 0 4
28309: PUSH
28310: LD_INT 22
28312: PUSH
28313: LD_OWVAR 2
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: LD_INT 2
28324: PUSH
28325: LD_INT 30
28327: PUSH
28328: LD_INT 0
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 30
28337: PUSH
28338: LD_INT 1
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: LIST
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PPUSH
28354: CALL_OW 69
28358: ST_TO_ADDR
// if not tmp then
28359: LD_VAR 0 4
28363: NOT
28364: IFFALSE 28368
// exit ;
28366: GO 28427
// for i in tmp do
28368: LD_ADDR_VAR 0 2
28372: PUSH
28373: LD_VAR 0 4
28377: PUSH
28378: FOR_IN
28379: IFFALSE 28425
// for j = 1 to 3 do
28381: LD_ADDR_VAR 0 3
28385: PUSH
28386: DOUBLE
28387: LD_INT 1
28389: DEC
28390: ST_TO_ADDR
28391: LD_INT 3
28393: PUSH
28394: FOR_TO
28395: IFFALSE 28421
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
28397: LD_VAR 0 2
28401: PPUSH
28402: CALL_OW 274
28406: PPUSH
28407: LD_VAR 0 3
28411: PPUSH
28412: LD_INT 99999
28414: PPUSH
28415: CALL_OW 277
28419: GO 28394
28421: POP
28422: POP
28423: GO 28378
28425: POP
28426: POP
// end ;
28427: LD_VAR 0 1
28431: RET
// export function hHackSetLevel10 ; var i , j ; begin
28432: LD_INT 0
28434: PPUSH
28435: PPUSH
28436: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28437: LD_ADDR_VAR 0 2
28441: PUSH
28442: LD_INT 21
28444: PUSH
28445: LD_INT 1
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PPUSH
28452: CALL_OW 69
28456: PUSH
28457: FOR_IN
28458: IFFALSE 28510
// if IsSelected ( i ) then
28460: LD_VAR 0 2
28464: PPUSH
28465: CALL_OW 306
28469: IFFALSE 28508
// begin for j := 1 to 4 do
28471: LD_ADDR_VAR 0 3
28475: PUSH
28476: DOUBLE
28477: LD_INT 1
28479: DEC
28480: ST_TO_ADDR
28481: LD_INT 4
28483: PUSH
28484: FOR_TO
28485: IFFALSE 28506
// SetSkill ( i , j , 10 ) ;
28487: LD_VAR 0 2
28491: PPUSH
28492: LD_VAR 0 3
28496: PPUSH
28497: LD_INT 10
28499: PPUSH
28500: CALL_OW 237
28504: GO 28484
28506: POP
28507: POP
// end ;
28508: GO 28457
28510: POP
28511: POP
// end ;
28512: LD_VAR 0 1
28516: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
28517: LD_INT 0
28519: PPUSH
28520: PPUSH
28521: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
28522: LD_ADDR_VAR 0 2
28526: PUSH
28527: LD_INT 22
28529: PUSH
28530: LD_OWVAR 2
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 21
28541: PUSH
28542: LD_INT 1
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PPUSH
28553: CALL_OW 69
28557: PUSH
28558: FOR_IN
28559: IFFALSE 28600
// begin for j := 1 to 4 do
28561: LD_ADDR_VAR 0 3
28565: PUSH
28566: DOUBLE
28567: LD_INT 1
28569: DEC
28570: ST_TO_ADDR
28571: LD_INT 4
28573: PUSH
28574: FOR_TO
28575: IFFALSE 28596
// SetSkill ( i , j , 10 ) ;
28577: LD_VAR 0 2
28581: PPUSH
28582: LD_VAR 0 3
28586: PPUSH
28587: LD_INT 10
28589: PPUSH
28590: CALL_OW 237
28594: GO 28574
28596: POP
28597: POP
// end ;
28598: GO 28558
28600: POP
28601: POP
// end ;
28602: LD_VAR 0 1
28606: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
28607: LD_INT 0
28609: PPUSH
// uc_side := your_side ;
28610: LD_ADDR_OWVAR 20
28614: PUSH
28615: LD_OWVAR 2
28619: ST_TO_ADDR
// uc_nation := nation ;
28620: LD_ADDR_OWVAR 21
28624: PUSH
28625: LD_VAR 0 1
28629: ST_TO_ADDR
// InitHc ;
28630: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28634: LD_INT 0
28636: PPUSH
28637: LD_VAR 0 2
28641: PPUSH
28642: LD_VAR 0 3
28646: PPUSH
28647: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28651: LD_VAR 0 4
28655: PPUSH
28656: LD_VAR 0 5
28660: PPUSH
28661: CALL_OW 428
28665: PUSH
28666: LD_INT 0
28668: EQUAL
28669: IFFALSE 28693
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
28671: CALL_OW 44
28675: PPUSH
28676: LD_VAR 0 4
28680: PPUSH
28681: LD_VAR 0 5
28685: PPUSH
28686: LD_INT 1
28688: PPUSH
28689: CALL_OW 48
// end ;
28693: LD_VAR 0 6
28697: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28698: LD_INT 0
28700: PPUSH
28701: PPUSH
// uc_side := your_side ;
28702: LD_ADDR_OWVAR 20
28706: PUSH
28707: LD_OWVAR 2
28711: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28712: LD_VAR 0 1
28716: PUSH
28717: LD_INT 1
28719: PUSH
28720: LD_INT 2
28722: PUSH
28723: LD_INT 3
28725: PUSH
28726: LD_INT 4
28728: PUSH
28729: LD_INT 5
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: IN
28739: IFFALSE 28751
// uc_nation := nation_american else
28741: LD_ADDR_OWVAR 21
28745: PUSH
28746: LD_INT 1
28748: ST_TO_ADDR
28749: GO 28794
// if chassis in [ 11 , 12 , 13 , 14 ] then
28751: LD_VAR 0 1
28755: PUSH
28756: LD_INT 11
28758: PUSH
28759: LD_INT 12
28761: PUSH
28762: LD_INT 13
28764: PUSH
28765: LD_INT 14
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: IN
28774: IFFALSE 28786
// uc_nation := nation_arabian else
28776: LD_ADDR_OWVAR 21
28780: PUSH
28781: LD_INT 2
28783: ST_TO_ADDR
28784: GO 28794
// uc_nation := nation_russian ;
28786: LD_ADDR_OWVAR 21
28790: PUSH
28791: LD_INT 3
28793: ST_TO_ADDR
// vc_chassis := chassis ;
28794: LD_ADDR_OWVAR 37
28798: PUSH
28799: LD_VAR 0 1
28803: ST_TO_ADDR
// vc_engine := engine ;
28804: LD_ADDR_OWVAR 39
28808: PUSH
28809: LD_VAR 0 2
28813: ST_TO_ADDR
// vc_control := control ;
28814: LD_ADDR_OWVAR 38
28818: PUSH
28819: LD_VAR 0 3
28823: ST_TO_ADDR
// vc_weapon := weapon ;
28824: LD_ADDR_OWVAR 40
28828: PUSH
28829: LD_VAR 0 4
28833: ST_TO_ADDR
// un := CreateVehicle ;
28834: LD_ADDR_VAR 0 8
28838: PUSH
28839: CALL_OW 45
28843: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
28844: LD_VAR 0 8
28848: PPUSH
28849: LD_INT 0
28851: PPUSH
28852: LD_INT 5
28854: PPUSH
28855: CALL_OW 12
28859: PPUSH
28860: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
28864: LD_VAR 0 8
28868: PPUSH
28869: LD_VAR 0 5
28873: PPUSH
28874: LD_VAR 0 6
28878: PPUSH
28879: LD_INT 1
28881: PPUSH
28882: CALL_OW 48
// end ;
28886: LD_VAR 0 7
28890: RET
// export hInvincible ; every 1 do
28891: GO 28893
28893: DISABLE
// hInvincible := [ ] ;
28894: LD_ADDR_EXP 93
28898: PUSH
28899: EMPTY
28900: ST_TO_ADDR
28901: END
// every 10 do var i ;
28902: GO 28904
28904: DISABLE
28905: LD_INT 0
28907: PPUSH
// begin enable ;
28908: ENABLE
// if not hInvincible then
28909: LD_EXP 93
28913: NOT
28914: IFFALSE 28918
// exit ;
28916: GO 28962
// for i in hInvincible do
28918: LD_ADDR_VAR 0 1
28922: PUSH
28923: LD_EXP 93
28927: PUSH
28928: FOR_IN
28929: IFFALSE 28960
// if GetLives ( i ) < 1000 then
28931: LD_VAR 0 1
28935: PPUSH
28936: CALL_OW 256
28940: PUSH
28941: LD_INT 1000
28943: LESS
28944: IFFALSE 28958
// SetLives ( i , 1000 ) ;
28946: LD_VAR 0 1
28950: PPUSH
28951: LD_INT 1000
28953: PPUSH
28954: CALL_OW 234
28958: GO 28928
28960: POP
28961: POP
// end ;
28962: PPOPN 1
28964: END
// export function hHackInvincible ; var i ; begin
28965: LD_INT 0
28967: PPUSH
28968: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
28969: LD_ADDR_VAR 0 2
28973: PUSH
28974: LD_INT 2
28976: PUSH
28977: LD_INT 21
28979: PUSH
28980: LD_INT 1
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 21
28989: PUSH
28990: LD_INT 2
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: LIST
29001: PPUSH
29002: CALL_OW 69
29006: PUSH
29007: FOR_IN
29008: IFFALSE 29069
// if IsSelected ( i ) then
29010: LD_VAR 0 2
29014: PPUSH
29015: CALL_OW 306
29019: IFFALSE 29067
// begin if i in hInvincible then
29021: LD_VAR 0 2
29025: PUSH
29026: LD_EXP 93
29030: IN
29031: IFFALSE 29051
// hInvincible := hInvincible diff i else
29033: LD_ADDR_EXP 93
29037: PUSH
29038: LD_EXP 93
29042: PUSH
29043: LD_VAR 0 2
29047: DIFF
29048: ST_TO_ADDR
29049: GO 29067
// hInvincible := hInvincible union i ;
29051: LD_ADDR_EXP 93
29055: PUSH
29056: LD_EXP 93
29060: PUSH
29061: LD_VAR 0 2
29065: UNION
29066: ST_TO_ADDR
// end ;
29067: GO 29007
29069: POP
29070: POP
// end ;
29071: LD_VAR 0 1
29075: RET
// export function hHackInvisible ; var i , j ; begin
29076: LD_INT 0
29078: PPUSH
29079: PPUSH
29080: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29081: LD_ADDR_VAR 0 2
29085: PUSH
29086: LD_INT 21
29088: PUSH
29089: LD_INT 1
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PPUSH
29096: CALL_OW 69
29100: PUSH
29101: FOR_IN
29102: IFFALSE 29126
// if IsSelected ( i ) then
29104: LD_VAR 0 2
29108: PPUSH
29109: CALL_OW 306
29113: IFFALSE 29124
// ComForceInvisible ( i ) ;
29115: LD_VAR 0 2
29119: PPUSH
29120: CALL_OW 496
29124: GO 29101
29126: POP
29127: POP
// end ;
29128: LD_VAR 0 1
29132: RET
// export function hHackChangeYourSide ; begin
29133: LD_INT 0
29135: PPUSH
// if your_side = 8 then
29136: LD_OWVAR 2
29140: PUSH
29141: LD_INT 8
29143: EQUAL
29144: IFFALSE 29156
// your_side := 0 else
29146: LD_ADDR_OWVAR 2
29150: PUSH
29151: LD_INT 0
29153: ST_TO_ADDR
29154: GO 29170
// your_side := your_side + 1 ;
29156: LD_ADDR_OWVAR 2
29160: PUSH
29161: LD_OWVAR 2
29165: PUSH
29166: LD_INT 1
29168: PLUS
29169: ST_TO_ADDR
// end ;
29170: LD_VAR 0 1
29174: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29175: LD_INT 0
29177: PPUSH
29178: PPUSH
29179: PPUSH
// for i in all_units do
29180: LD_ADDR_VAR 0 2
29184: PUSH
29185: LD_OWVAR 3
29189: PUSH
29190: FOR_IN
29191: IFFALSE 29269
// if IsSelected ( i ) then
29193: LD_VAR 0 2
29197: PPUSH
29198: CALL_OW 306
29202: IFFALSE 29267
// begin j := GetSide ( i ) ;
29204: LD_ADDR_VAR 0 3
29208: PUSH
29209: LD_VAR 0 2
29213: PPUSH
29214: CALL_OW 255
29218: ST_TO_ADDR
// if j = 8 then
29219: LD_VAR 0 3
29223: PUSH
29224: LD_INT 8
29226: EQUAL
29227: IFFALSE 29239
// j := 0 else
29229: LD_ADDR_VAR 0 3
29233: PUSH
29234: LD_INT 0
29236: ST_TO_ADDR
29237: GO 29253
// j := j + 1 ;
29239: LD_ADDR_VAR 0 3
29243: PUSH
29244: LD_VAR 0 3
29248: PUSH
29249: LD_INT 1
29251: PLUS
29252: ST_TO_ADDR
// SetSide ( i , j ) ;
29253: LD_VAR 0 2
29257: PPUSH
29258: LD_VAR 0 3
29262: PPUSH
29263: CALL_OW 235
// end ;
29267: GO 29190
29269: POP
29270: POP
// end ;
29271: LD_VAR 0 1
29275: RET
// export function hHackFog ; begin
29276: LD_INT 0
29278: PPUSH
// FogOff ( true ) ;
29279: LD_INT 1
29281: PPUSH
29282: CALL_OW 344
// end ;
29286: LD_VAR 0 1
29290: RET
// export function hHackTeleport ( unit , x , y ) ; begin
29291: LD_INT 0
29293: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
29294: LD_VAR 0 1
29298: PPUSH
29299: LD_VAR 0 2
29303: PPUSH
29304: LD_VAR 0 3
29308: PPUSH
29309: LD_INT 1
29311: PPUSH
29312: LD_INT 1
29314: PPUSH
29315: CALL_OW 483
// CenterOnXY ( x , y ) ;
29319: LD_VAR 0 2
29323: PPUSH
29324: LD_VAR 0 3
29328: PPUSH
29329: CALL_OW 84
// end ;
29333: LD_VAR 0 4
29337: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
29338: LD_INT 0
29340: PPUSH
29341: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
29342: LD_VAR 0 1
29346: NOT
29347: PUSH
29348: LD_VAR 0 2
29352: PPUSH
29353: LD_VAR 0 3
29357: PPUSH
29358: CALL_OW 488
29362: NOT
29363: OR
29364: PUSH
29365: LD_VAR 0 1
29369: PPUSH
29370: CALL_OW 266
29374: PUSH
29375: LD_INT 3
29377: NONEQUAL
29378: PUSH
29379: LD_VAR 0 1
29383: PPUSH
29384: CALL_OW 247
29388: PUSH
29389: LD_INT 1
29391: EQUAL
29392: NOT
29393: AND
29394: OR
29395: IFFALSE 29399
// exit ;
29397: GO 29548
// if GetType ( factory ) = unit_human then
29399: LD_VAR 0 1
29403: PPUSH
29404: CALL_OW 247
29408: PUSH
29409: LD_INT 1
29411: EQUAL
29412: IFFALSE 29429
// factory := IsInUnit ( factory ) ;
29414: LD_ADDR_VAR 0 1
29418: PUSH
29419: LD_VAR 0 1
29423: PPUSH
29424: CALL_OW 310
29428: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
29429: LD_VAR 0 1
29433: PPUSH
29434: CALL_OW 266
29438: PUSH
29439: LD_INT 3
29441: NONEQUAL
29442: IFFALSE 29446
// exit ;
29444: GO 29548
// if HexInfo ( x , y ) = factory then
29446: LD_VAR 0 2
29450: PPUSH
29451: LD_VAR 0 3
29455: PPUSH
29456: CALL_OW 428
29460: PUSH
29461: LD_VAR 0 1
29465: EQUAL
29466: IFFALSE 29493
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
29468: LD_ADDR_EXP 94
29472: PUSH
29473: LD_EXP 94
29477: PPUSH
29478: LD_VAR 0 1
29482: PPUSH
29483: LD_INT 0
29485: PPUSH
29486: CALL_OW 1
29490: ST_TO_ADDR
29491: GO 29544
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
29493: LD_ADDR_EXP 94
29497: PUSH
29498: LD_EXP 94
29502: PPUSH
29503: LD_VAR 0 1
29507: PPUSH
29508: LD_VAR 0 1
29512: PPUSH
29513: CALL_OW 255
29517: PUSH
29518: LD_VAR 0 1
29522: PUSH
29523: LD_VAR 0 2
29527: PUSH
29528: LD_VAR 0 3
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: PPUSH
29539: CALL_OW 1
29543: ST_TO_ADDR
// UpdateFactoryWaypoints ;
29544: CALL 29553 0 0
// end ;
29548: LD_VAR 0 4
29552: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
29553: LD_INT 0
29555: PPUSH
29556: PPUSH
29557: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
29558: LD_STRING resetFactoryWaypoint();
29560: PPUSH
29561: CALL_OW 559
// if factoryWaypoints then
29565: LD_EXP 94
29569: IFFALSE 29695
// begin list := PrepareArray ( factoryWaypoints ) ;
29571: LD_ADDR_VAR 0 3
29575: PUSH
29576: LD_EXP 94
29580: PPUSH
29581: CALL 71783 0 1
29585: ST_TO_ADDR
// for i := 1 to list do
29586: LD_ADDR_VAR 0 2
29590: PUSH
29591: DOUBLE
29592: LD_INT 1
29594: DEC
29595: ST_TO_ADDR
29596: LD_VAR 0 3
29600: PUSH
29601: FOR_TO
29602: IFFALSE 29693
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
29604: LD_STRING setFactoryWaypointXY(
29606: PUSH
29607: LD_VAR 0 3
29611: PUSH
29612: LD_VAR 0 2
29616: ARRAY
29617: PUSH
29618: LD_INT 1
29620: ARRAY
29621: STR
29622: PUSH
29623: LD_STRING ,
29625: STR
29626: PUSH
29627: LD_VAR 0 3
29631: PUSH
29632: LD_VAR 0 2
29636: ARRAY
29637: PUSH
29638: LD_INT 2
29640: ARRAY
29641: STR
29642: PUSH
29643: LD_STRING ,
29645: STR
29646: PUSH
29647: LD_VAR 0 3
29651: PUSH
29652: LD_VAR 0 2
29656: ARRAY
29657: PUSH
29658: LD_INT 3
29660: ARRAY
29661: STR
29662: PUSH
29663: LD_STRING ,
29665: STR
29666: PUSH
29667: LD_VAR 0 3
29671: PUSH
29672: LD_VAR 0 2
29676: ARRAY
29677: PUSH
29678: LD_INT 4
29680: ARRAY
29681: STR
29682: PUSH
29683: LD_STRING )
29685: STR
29686: PPUSH
29687: CALL_OW 559
29691: GO 29601
29693: POP
29694: POP
// end ; end ;
29695: LD_VAR 0 1
29699: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
29700: LD_INT 0
29702: PPUSH
// if HexInfo ( x , y ) = warehouse then
29703: LD_VAR 0 2
29707: PPUSH
29708: LD_VAR 0 3
29712: PPUSH
29713: CALL_OW 428
29717: PUSH
29718: LD_VAR 0 1
29722: EQUAL
29723: IFFALSE 29750
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
29725: LD_ADDR_EXP 95
29729: PUSH
29730: LD_EXP 95
29734: PPUSH
29735: LD_VAR 0 1
29739: PPUSH
29740: LD_INT 0
29742: PPUSH
29743: CALL_OW 1
29747: ST_TO_ADDR
29748: GO 29801
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
29750: LD_ADDR_EXP 95
29754: PUSH
29755: LD_EXP 95
29759: PPUSH
29760: LD_VAR 0 1
29764: PPUSH
29765: LD_VAR 0 1
29769: PPUSH
29770: CALL_OW 255
29774: PUSH
29775: LD_VAR 0 1
29779: PUSH
29780: LD_VAR 0 2
29784: PUSH
29785: LD_VAR 0 3
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: PPUSH
29796: CALL_OW 1
29800: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
29801: CALL 29810 0 0
// end ;
29805: LD_VAR 0 4
29809: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
29810: LD_INT 0
29812: PPUSH
29813: PPUSH
29814: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
29815: LD_STRING resetWarehouseGatheringPoints();
29817: PPUSH
29818: CALL_OW 559
// if warehouseGatheringPoints then
29822: LD_EXP 95
29826: IFFALSE 29952
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
29828: LD_ADDR_VAR 0 3
29832: PUSH
29833: LD_EXP 95
29837: PPUSH
29838: CALL 71783 0 1
29842: ST_TO_ADDR
// for i := 1 to list do
29843: LD_ADDR_VAR 0 2
29847: PUSH
29848: DOUBLE
29849: LD_INT 1
29851: DEC
29852: ST_TO_ADDR
29853: LD_VAR 0 3
29857: PUSH
29858: FOR_TO
29859: IFFALSE 29950
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
29861: LD_STRING setWarehouseGatheringPointXY(
29863: PUSH
29864: LD_VAR 0 3
29868: PUSH
29869: LD_VAR 0 2
29873: ARRAY
29874: PUSH
29875: LD_INT 1
29877: ARRAY
29878: STR
29879: PUSH
29880: LD_STRING ,
29882: STR
29883: PUSH
29884: LD_VAR 0 3
29888: PUSH
29889: LD_VAR 0 2
29893: ARRAY
29894: PUSH
29895: LD_INT 2
29897: ARRAY
29898: STR
29899: PUSH
29900: LD_STRING ,
29902: STR
29903: PUSH
29904: LD_VAR 0 3
29908: PUSH
29909: LD_VAR 0 2
29913: ARRAY
29914: PUSH
29915: LD_INT 3
29917: ARRAY
29918: STR
29919: PUSH
29920: LD_STRING ,
29922: STR
29923: PUSH
29924: LD_VAR 0 3
29928: PUSH
29929: LD_VAR 0 2
29933: ARRAY
29934: PUSH
29935: LD_INT 4
29937: ARRAY
29938: STR
29939: PUSH
29940: LD_STRING )
29942: STR
29943: PPUSH
29944: CALL_OW 559
29948: GO 29858
29950: POP
29951: POP
// end ; end ;
29952: LD_VAR 0 1
29956: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
29957: LD_EXP 95
29961: IFFALSE 30646
29963: GO 29965
29965: DISABLE
29966: LD_INT 0
29968: PPUSH
29969: PPUSH
29970: PPUSH
29971: PPUSH
29972: PPUSH
29973: PPUSH
29974: PPUSH
29975: PPUSH
29976: PPUSH
// begin enable ;
29977: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
29978: LD_ADDR_VAR 0 3
29982: PUSH
29983: LD_EXP 95
29987: PPUSH
29988: CALL 71783 0 1
29992: ST_TO_ADDR
// if not list then
29993: LD_VAR 0 3
29997: NOT
29998: IFFALSE 30002
// exit ;
30000: GO 30646
// for i := 1 to list do
30002: LD_ADDR_VAR 0 1
30006: PUSH
30007: DOUBLE
30008: LD_INT 1
30010: DEC
30011: ST_TO_ADDR
30012: LD_VAR 0 3
30016: PUSH
30017: FOR_TO
30018: IFFALSE 30644
// begin depot := list [ i ] [ 2 ] ;
30020: LD_ADDR_VAR 0 8
30024: PUSH
30025: LD_VAR 0 3
30029: PUSH
30030: LD_VAR 0 1
30034: ARRAY
30035: PUSH
30036: LD_INT 2
30038: ARRAY
30039: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
30040: LD_ADDR_VAR 0 5
30044: PUSH
30045: LD_VAR 0 3
30049: PUSH
30050: LD_VAR 0 1
30054: ARRAY
30055: PUSH
30056: LD_INT 1
30058: ARRAY
30059: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
30060: LD_VAR 0 8
30064: PPUSH
30065: CALL_OW 301
30069: PUSH
30070: LD_VAR 0 5
30074: PUSH
30075: LD_VAR 0 8
30079: PPUSH
30080: CALL_OW 255
30084: NONEQUAL
30085: OR
30086: IFFALSE 30115
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
30088: LD_ADDR_EXP 95
30092: PUSH
30093: LD_EXP 95
30097: PPUSH
30098: LD_VAR 0 8
30102: PPUSH
30103: LD_INT 0
30105: PPUSH
30106: CALL_OW 1
30110: ST_TO_ADDR
// exit ;
30111: POP
30112: POP
30113: GO 30646
// end ; x := list [ i ] [ 3 ] ;
30115: LD_ADDR_VAR 0 6
30119: PUSH
30120: LD_VAR 0 3
30124: PUSH
30125: LD_VAR 0 1
30129: ARRAY
30130: PUSH
30131: LD_INT 3
30133: ARRAY
30134: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
30135: LD_ADDR_VAR 0 7
30139: PUSH
30140: LD_VAR 0 3
30144: PUSH
30145: LD_VAR 0 1
30149: ARRAY
30150: PUSH
30151: LD_INT 4
30153: ARRAY
30154: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
30155: LD_ADDR_VAR 0 9
30159: PUSH
30160: LD_VAR 0 6
30164: PPUSH
30165: LD_VAR 0 7
30169: PPUSH
30170: LD_INT 16
30172: PPUSH
30173: CALL 70371 0 3
30177: ST_TO_ADDR
// if not cratesNearbyPoint then
30178: LD_VAR 0 9
30182: NOT
30183: IFFALSE 30189
// exit ;
30185: POP
30186: POP
30187: GO 30646
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
30189: LD_ADDR_VAR 0 4
30193: PUSH
30194: LD_INT 22
30196: PUSH
30197: LD_VAR 0 5
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 3
30208: PUSH
30209: LD_INT 60
30211: PUSH
30212: EMPTY
30213: LIST
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 91
30221: PUSH
30222: LD_VAR 0 8
30226: PUSH
30227: LD_INT 6
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 2
30237: PUSH
30238: LD_INT 25
30240: PUSH
30241: LD_INT 2
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: LD_INT 25
30250: PUSH
30251: LD_INT 16
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: LIST
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: PPUSH
30269: CALL_OW 69
30273: PUSH
30274: LD_VAR 0 8
30278: PPUSH
30279: CALL_OW 313
30283: PPUSH
30284: LD_INT 3
30286: PUSH
30287: LD_INT 60
30289: PUSH
30290: EMPTY
30291: LIST
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 2
30299: PUSH
30300: LD_INT 25
30302: PUSH
30303: LD_INT 2
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 25
30312: PUSH
30313: LD_INT 16
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: LIST
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PPUSH
30329: CALL_OW 72
30333: UNION
30334: ST_TO_ADDR
// if tmp then
30335: LD_VAR 0 4
30339: IFFALSE 30419
// begin tmp := ShrinkArray ( tmp , 3 ) ;
30341: LD_ADDR_VAR 0 4
30345: PUSH
30346: LD_VAR 0 4
30350: PPUSH
30351: LD_INT 3
30353: PPUSH
30354: CALL 68340 0 2
30358: ST_TO_ADDR
// for j in tmp do
30359: LD_ADDR_VAR 0 2
30363: PUSH
30364: LD_VAR 0 4
30368: PUSH
30369: FOR_IN
30370: IFFALSE 30413
// begin if IsInUnit ( j ) then
30372: LD_VAR 0 2
30376: PPUSH
30377: CALL_OW 310
30381: IFFALSE 30392
// ComExit ( j ) ;
30383: LD_VAR 0 2
30387: PPUSH
30388: CALL 68423 0 1
// AddComCollect ( j , x , y ) ;
30392: LD_VAR 0 2
30396: PPUSH
30397: LD_VAR 0 6
30401: PPUSH
30402: LD_VAR 0 7
30406: PPUSH
30407: CALL_OW 177
// end ;
30411: GO 30369
30413: POP
30414: POP
// exit ;
30415: POP
30416: POP
30417: GO 30646
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
30419: LD_ADDR_VAR 0 4
30423: PUSH
30424: LD_INT 22
30426: PUSH
30427: LD_VAR 0 5
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 91
30438: PUSH
30439: LD_VAR 0 8
30443: PUSH
30444: LD_INT 8
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 2
30454: PUSH
30455: LD_INT 34
30457: PUSH
30458: LD_INT 12
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 34
30467: PUSH
30468: LD_INT 51
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: LD_INT 34
30477: PUSH
30478: LD_INT 32
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: PUSH
30485: LD_INT 34
30487: PUSH
30488: LD_INT 89
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: PUSH
30502: EMPTY
30503: LIST
30504: LIST
30505: LIST
30506: PPUSH
30507: CALL_OW 69
30511: ST_TO_ADDR
// if tmp then
30512: LD_VAR 0 4
30516: IFFALSE 30642
// begin for j in tmp do
30518: LD_ADDR_VAR 0 2
30522: PUSH
30523: LD_VAR 0 4
30527: PUSH
30528: FOR_IN
30529: IFFALSE 30640
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
30531: LD_VAR 0 2
30535: PPUSH
30536: CALL_OW 262
30540: PUSH
30541: LD_INT 3
30543: EQUAL
30544: PUSH
30545: LD_VAR 0 2
30549: PPUSH
30550: CALL_OW 261
30554: PUSH
30555: LD_INT 20
30557: GREATER
30558: OR
30559: PUSH
30560: LD_VAR 0 2
30564: PPUSH
30565: CALL_OW 314
30569: NOT
30570: AND
30571: PUSH
30572: LD_VAR 0 2
30576: PPUSH
30577: CALL_OW 263
30581: PUSH
30582: LD_INT 1
30584: NONEQUAL
30585: PUSH
30586: LD_VAR 0 2
30590: PPUSH
30591: CALL_OW 311
30595: OR
30596: AND
30597: IFFALSE 30638
// begin ComCollect ( j , x , y ) ;
30599: LD_VAR 0 2
30603: PPUSH
30604: LD_VAR 0 6
30608: PPUSH
30609: LD_VAR 0 7
30613: PPUSH
30614: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
30618: LD_VAR 0 2
30622: PPUSH
30623: LD_VAR 0 8
30627: PPUSH
30628: CALL_OW 172
// exit ;
30632: POP
30633: POP
30634: POP
30635: POP
30636: GO 30646
// end ;
30638: GO 30528
30640: POP
30641: POP
// end ; end ;
30642: GO 30017
30644: POP
30645: POP
// end ; end_of_file end_of_file
30646: PPOPN 9
30648: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30649: LD_INT 0
30651: PPUSH
30652: PPUSH
// if exist_mode then
30653: LD_VAR 0 2
30657: IFFALSE 30682
// unit := CreateCharacter ( prefix & ident ) else
30659: LD_ADDR_VAR 0 5
30663: PUSH
30664: LD_VAR 0 3
30668: PUSH
30669: LD_VAR 0 1
30673: STR
30674: PPUSH
30675: CALL_OW 34
30679: ST_TO_ADDR
30680: GO 30697
// unit := NewCharacter ( ident ) ;
30682: LD_ADDR_VAR 0 5
30686: PUSH
30687: LD_VAR 0 1
30691: PPUSH
30692: CALL_OW 25
30696: ST_TO_ADDR
// result := unit ;
30697: LD_ADDR_VAR 0 4
30701: PUSH
30702: LD_VAR 0 5
30706: ST_TO_ADDR
// end ;
30707: LD_VAR 0 4
30711: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30712: LD_INT 0
30714: PPUSH
30715: PPUSH
// if not side or not nation then
30716: LD_VAR 0 1
30720: NOT
30721: PUSH
30722: LD_VAR 0 2
30726: NOT
30727: OR
30728: IFFALSE 30732
// exit ;
30730: GO 31500
// case nation of nation_american :
30732: LD_VAR 0 2
30736: PUSH
30737: LD_INT 1
30739: DOUBLE
30740: EQUAL
30741: IFTRUE 30745
30743: GO 30959
30745: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30746: LD_ADDR_VAR 0 4
30750: PUSH
30751: LD_INT 35
30753: PUSH
30754: LD_INT 45
30756: PUSH
30757: LD_INT 46
30759: PUSH
30760: LD_INT 47
30762: PUSH
30763: LD_INT 82
30765: PUSH
30766: LD_INT 83
30768: PUSH
30769: LD_INT 84
30771: PUSH
30772: LD_INT 85
30774: PUSH
30775: LD_INT 86
30777: PUSH
30778: LD_INT 1
30780: PUSH
30781: LD_INT 2
30783: PUSH
30784: LD_INT 6
30786: PUSH
30787: LD_INT 15
30789: PUSH
30790: LD_INT 16
30792: PUSH
30793: LD_INT 7
30795: PUSH
30796: LD_INT 12
30798: PUSH
30799: LD_INT 13
30801: PUSH
30802: LD_INT 10
30804: PUSH
30805: LD_INT 14
30807: PUSH
30808: LD_INT 20
30810: PUSH
30811: LD_INT 21
30813: PUSH
30814: LD_INT 22
30816: PUSH
30817: LD_INT 25
30819: PUSH
30820: LD_INT 32
30822: PUSH
30823: LD_INT 27
30825: PUSH
30826: LD_INT 36
30828: PUSH
30829: LD_INT 69
30831: PUSH
30832: LD_INT 39
30834: PUSH
30835: LD_INT 34
30837: PUSH
30838: LD_INT 40
30840: PUSH
30841: LD_INT 48
30843: PUSH
30844: LD_INT 49
30846: PUSH
30847: LD_INT 50
30849: PUSH
30850: LD_INT 51
30852: PUSH
30853: LD_INT 52
30855: PUSH
30856: LD_INT 53
30858: PUSH
30859: LD_INT 54
30861: PUSH
30862: LD_INT 55
30864: PUSH
30865: LD_INT 56
30867: PUSH
30868: LD_INT 57
30870: PUSH
30871: LD_INT 58
30873: PUSH
30874: LD_INT 59
30876: PUSH
30877: LD_INT 60
30879: PUSH
30880: LD_INT 61
30882: PUSH
30883: LD_INT 62
30885: PUSH
30886: LD_INT 80
30888: PUSH
30889: LD_INT 82
30891: PUSH
30892: LD_INT 83
30894: PUSH
30895: LD_INT 84
30897: PUSH
30898: LD_INT 85
30900: PUSH
30901: LD_INT 86
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: ST_TO_ADDR
30957: GO 31424
30959: LD_INT 2
30961: DOUBLE
30962: EQUAL
30963: IFTRUE 30967
30965: GO 31193
30967: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30968: LD_ADDR_VAR 0 4
30972: PUSH
30973: LD_INT 35
30975: PUSH
30976: LD_INT 45
30978: PUSH
30979: LD_INT 46
30981: PUSH
30982: LD_INT 47
30984: PUSH
30985: LD_INT 82
30987: PUSH
30988: LD_INT 83
30990: PUSH
30991: LD_INT 84
30993: PUSH
30994: LD_INT 85
30996: PUSH
30997: LD_INT 87
30999: PUSH
31000: LD_INT 70
31002: PUSH
31003: LD_INT 1
31005: PUSH
31006: LD_INT 11
31008: PUSH
31009: LD_INT 3
31011: PUSH
31012: LD_INT 4
31014: PUSH
31015: LD_INT 5
31017: PUSH
31018: LD_INT 6
31020: PUSH
31021: LD_INT 15
31023: PUSH
31024: LD_INT 18
31026: PUSH
31027: LD_INT 7
31029: PUSH
31030: LD_INT 17
31032: PUSH
31033: LD_INT 8
31035: PUSH
31036: LD_INT 20
31038: PUSH
31039: LD_INT 21
31041: PUSH
31042: LD_INT 22
31044: PUSH
31045: LD_INT 72
31047: PUSH
31048: LD_INT 26
31050: PUSH
31051: LD_INT 69
31053: PUSH
31054: LD_INT 39
31056: PUSH
31057: LD_INT 40
31059: PUSH
31060: LD_INT 41
31062: PUSH
31063: LD_INT 42
31065: PUSH
31066: LD_INT 43
31068: PUSH
31069: LD_INT 48
31071: PUSH
31072: LD_INT 49
31074: PUSH
31075: LD_INT 50
31077: PUSH
31078: LD_INT 51
31080: PUSH
31081: LD_INT 52
31083: PUSH
31084: LD_INT 53
31086: PUSH
31087: LD_INT 54
31089: PUSH
31090: LD_INT 55
31092: PUSH
31093: LD_INT 56
31095: PUSH
31096: LD_INT 60
31098: PUSH
31099: LD_INT 61
31101: PUSH
31102: LD_INT 62
31104: PUSH
31105: LD_INT 66
31107: PUSH
31108: LD_INT 67
31110: PUSH
31111: LD_INT 68
31113: PUSH
31114: LD_INT 81
31116: PUSH
31117: LD_INT 82
31119: PUSH
31120: LD_INT 83
31122: PUSH
31123: LD_INT 84
31125: PUSH
31126: LD_INT 85
31128: PUSH
31129: LD_INT 87
31131: PUSH
31132: LD_INT 88
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: ST_TO_ADDR
31191: GO 31424
31193: LD_INT 3
31195: DOUBLE
31196: EQUAL
31197: IFTRUE 31201
31199: GO 31423
31201: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31202: LD_ADDR_VAR 0 4
31206: PUSH
31207: LD_INT 46
31209: PUSH
31210: LD_INT 47
31212: PUSH
31213: LD_INT 1
31215: PUSH
31216: LD_INT 2
31218: PUSH
31219: LD_INT 82
31221: PUSH
31222: LD_INT 83
31224: PUSH
31225: LD_INT 84
31227: PUSH
31228: LD_INT 85
31230: PUSH
31231: LD_INT 86
31233: PUSH
31234: LD_INT 11
31236: PUSH
31237: LD_INT 9
31239: PUSH
31240: LD_INT 20
31242: PUSH
31243: LD_INT 19
31245: PUSH
31246: LD_INT 21
31248: PUSH
31249: LD_INT 24
31251: PUSH
31252: LD_INT 22
31254: PUSH
31255: LD_INT 25
31257: PUSH
31258: LD_INT 28
31260: PUSH
31261: LD_INT 29
31263: PUSH
31264: LD_INT 30
31266: PUSH
31267: LD_INT 31
31269: PUSH
31270: LD_INT 37
31272: PUSH
31273: LD_INT 38
31275: PUSH
31276: LD_INT 32
31278: PUSH
31279: LD_INT 27
31281: PUSH
31282: LD_INT 33
31284: PUSH
31285: LD_INT 69
31287: PUSH
31288: LD_INT 39
31290: PUSH
31291: LD_INT 34
31293: PUSH
31294: LD_INT 40
31296: PUSH
31297: LD_INT 71
31299: PUSH
31300: LD_INT 23
31302: PUSH
31303: LD_INT 44
31305: PUSH
31306: LD_INT 48
31308: PUSH
31309: LD_INT 49
31311: PUSH
31312: LD_INT 50
31314: PUSH
31315: LD_INT 51
31317: PUSH
31318: LD_INT 52
31320: PUSH
31321: LD_INT 53
31323: PUSH
31324: LD_INT 54
31326: PUSH
31327: LD_INT 55
31329: PUSH
31330: LD_INT 56
31332: PUSH
31333: LD_INT 57
31335: PUSH
31336: LD_INT 58
31338: PUSH
31339: LD_INT 59
31341: PUSH
31342: LD_INT 63
31344: PUSH
31345: LD_INT 64
31347: PUSH
31348: LD_INT 65
31350: PUSH
31351: LD_INT 82
31353: PUSH
31354: LD_INT 83
31356: PUSH
31357: LD_INT 84
31359: PUSH
31360: LD_INT 85
31362: PUSH
31363: LD_INT 86
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: ST_TO_ADDR
31421: GO 31424
31423: POP
// if state > - 1 and state < 3 then
31424: LD_VAR 0 3
31428: PUSH
31429: LD_INT 1
31431: NEG
31432: GREATER
31433: PUSH
31434: LD_VAR 0 3
31438: PUSH
31439: LD_INT 3
31441: LESS
31442: AND
31443: IFFALSE 31500
// for i in result do
31445: LD_ADDR_VAR 0 5
31449: PUSH
31450: LD_VAR 0 4
31454: PUSH
31455: FOR_IN
31456: IFFALSE 31498
// if GetTech ( i , side ) <> state then
31458: LD_VAR 0 5
31462: PPUSH
31463: LD_VAR 0 1
31467: PPUSH
31468: CALL_OW 321
31472: PUSH
31473: LD_VAR 0 3
31477: NONEQUAL
31478: IFFALSE 31496
// result := result diff i ;
31480: LD_ADDR_VAR 0 4
31484: PUSH
31485: LD_VAR 0 4
31489: PUSH
31490: LD_VAR 0 5
31494: DIFF
31495: ST_TO_ADDR
31496: GO 31455
31498: POP
31499: POP
// end ;
31500: LD_VAR 0 4
31504: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31505: LD_INT 0
31507: PPUSH
31508: PPUSH
31509: PPUSH
// result := true ;
31510: LD_ADDR_VAR 0 3
31514: PUSH
31515: LD_INT 1
31517: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31518: LD_ADDR_VAR 0 5
31522: PUSH
31523: LD_VAR 0 2
31527: PPUSH
31528: CALL_OW 480
31532: ST_TO_ADDR
// if not tmp then
31533: LD_VAR 0 5
31537: NOT
31538: IFFALSE 31542
// exit ;
31540: GO 31591
// for i in tmp do
31542: LD_ADDR_VAR 0 4
31546: PUSH
31547: LD_VAR 0 5
31551: PUSH
31552: FOR_IN
31553: IFFALSE 31589
// if GetTech ( i , side ) <> state_researched then
31555: LD_VAR 0 4
31559: PPUSH
31560: LD_VAR 0 1
31564: PPUSH
31565: CALL_OW 321
31569: PUSH
31570: LD_INT 2
31572: NONEQUAL
31573: IFFALSE 31587
// begin result := false ;
31575: LD_ADDR_VAR 0 3
31579: PUSH
31580: LD_INT 0
31582: ST_TO_ADDR
// exit ;
31583: POP
31584: POP
31585: GO 31591
// end ;
31587: GO 31552
31589: POP
31590: POP
// end ;
31591: LD_VAR 0 3
31595: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31596: LD_INT 0
31598: PPUSH
31599: PPUSH
31600: PPUSH
31601: PPUSH
31602: PPUSH
31603: PPUSH
31604: PPUSH
31605: PPUSH
31606: PPUSH
31607: PPUSH
31608: PPUSH
31609: PPUSH
31610: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31611: LD_VAR 0 1
31615: NOT
31616: PUSH
31617: LD_VAR 0 1
31621: PPUSH
31622: CALL_OW 257
31626: PUSH
31627: LD_INT 9
31629: NONEQUAL
31630: OR
31631: IFFALSE 31635
// exit ;
31633: GO 32208
// side := GetSide ( unit ) ;
31635: LD_ADDR_VAR 0 9
31639: PUSH
31640: LD_VAR 0 1
31644: PPUSH
31645: CALL_OW 255
31649: ST_TO_ADDR
// tech_space := tech_spacanom ;
31650: LD_ADDR_VAR 0 12
31654: PUSH
31655: LD_INT 29
31657: ST_TO_ADDR
// tech_time := tech_taurad ;
31658: LD_ADDR_VAR 0 13
31662: PUSH
31663: LD_INT 28
31665: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31666: LD_ADDR_VAR 0 11
31670: PUSH
31671: LD_VAR 0 1
31675: PPUSH
31676: CALL_OW 310
31680: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31681: LD_VAR 0 11
31685: PPUSH
31686: CALL_OW 247
31690: PUSH
31691: LD_INT 2
31693: EQUAL
31694: IFFALSE 31698
// exit ;
31696: GO 32208
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31698: LD_ADDR_VAR 0 8
31702: PUSH
31703: LD_INT 81
31705: PUSH
31706: LD_VAR 0 9
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 3
31717: PUSH
31718: LD_INT 21
31720: PUSH
31721: LD_INT 3
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PPUSH
31736: CALL_OW 69
31740: ST_TO_ADDR
// if not tmp then
31741: LD_VAR 0 8
31745: NOT
31746: IFFALSE 31750
// exit ;
31748: GO 32208
// if in_unit then
31750: LD_VAR 0 11
31754: IFFALSE 31778
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31756: LD_ADDR_VAR 0 10
31760: PUSH
31761: LD_VAR 0 8
31765: PPUSH
31766: LD_VAR 0 11
31770: PPUSH
31771: CALL_OW 74
31775: ST_TO_ADDR
31776: GO 31798
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31778: LD_ADDR_VAR 0 10
31782: PUSH
31783: LD_VAR 0 8
31787: PPUSH
31788: LD_VAR 0 1
31792: PPUSH
31793: CALL_OW 74
31797: ST_TO_ADDR
// if not enemy then
31798: LD_VAR 0 10
31802: NOT
31803: IFFALSE 31807
// exit ;
31805: GO 32208
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31807: LD_VAR 0 11
31811: PUSH
31812: LD_VAR 0 11
31816: PPUSH
31817: LD_VAR 0 10
31821: PPUSH
31822: CALL_OW 296
31826: PUSH
31827: LD_INT 13
31829: GREATER
31830: AND
31831: PUSH
31832: LD_VAR 0 1
31836: PPUSH
31837: LD_VAR 0 10
31841: PPUSH
31842: CALL_OW 296
31846: PUSH
31847: LD_INT 12
31849: GREATER
31850: OR
31851: IFFALSE 31855
// exit ;
31853: GO 32208
// missile := [ 1 ] ;
31855: LD_ADDR_VAR 0 14
31859: PUSH
31860: LD_INT 1
31862: PUSH
31863: EMPTY
31864: LIST
31865: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31866: LD_VAR 0 9
31870: PPUSH
31871: LD_VAR 0 12
31875: PPUSH
31876: CALL_OW 325
31880: IFFALSE 31909
// missile := Replace ( missile , missile + 1 , 2 ) ;
31882: LD_ADDR_VAR 0 14
31886: PUSH
31887: LD_VAR 0 14
31891: PPUSH
31892: LD_VAR 0 14
31896: PUSH
31897: LD_INT 1
31899: PLUS
31900: PPUSH
31901: LD_INT 2
31903: PPUSH
31904: CALL_OW 1
31908: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31909: LD_VAR 0 9
31913: PPUSH
31914: LD_VAR 0 13
31918: PPUSH
31919: CALL_OW 325
31923: PUSH
31924: LD_VAR 0 10
31928: PPUSH
31929: CALL_OW 255
31933: PPUSH
31934: LD_VAR 0 13
31938: PPUSH
31939: CALL_OW 325
31943: NOT
31944: AND
31945: IFFALSE 31974
// missile := Replace ( missile , missile + 1 , 3 ) ;
31947: LD_ADDR_VAR 0 14
31951: PUSH
31952: LD_VAR 0 14
31956: PPUSH
31957: LD_VAR 0 14
31961: PUSH
31962: LD_INT 1
31964: PLUS
31965: PPUSH
31966: LD_INT 3
31968: PPUSH
31969: CALL_OW 1
31973: ST_TO_ADDR
// if missile < 2 then
31974: LD_VAR 0 14
31978: PUSH
31979: LD_INT 2
31981: LESS
31982: IFFALSE 31986
// exit ;
31984: GO 32208
// x := GetX ( enemy ) ;
31986: LD_ADDR_VAR 0 4
31990: PUSH
31991: LD_VAR 0 10
31995: PPUSH
31996: CALL_OW 250
32000: ST_TO_ADDR
// y := GetY ( enemy ) ;
32001: LD_ADDR_VAR 0 5
32005: PUSH
32006: LD_VAR 0 10
32010: PPUSH
32011: CALL_OW 251
32015: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32016: LD_ADDR_VAR 0 6
32020: PUSH
32021: LD_VAR 0 4
32025: PUSH
32026: LD_INT 1
32028: NEG
32029: PPUSH
32030: LD_INT 1
32032: PPUSH
32033: CALL_OW 12
32037: PLUS
32038: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32039: LD_ADDR_VAR 0 7
32043: PUSH
32044: LD_VAR 0 5
32048: PUSH
32049: LD_INT 1
32051: NEG
32052: PPUSH
32053: LD_INT 1
32055: PPUSH
32056: CALL_OW 12
32060: PLUS
32061: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32062: LD_VAR 0 6
32066: PPUSH
32067: LD_VAR 0 7
32071: PPUSH
32072: CALL_OW 488
32076: NOT
32077: IFFALSE 32099
// begin _x := x ;
32079: LD_ADDR_VAR 0 6
32083: PUSH
32084: LD_VAR 0 4
32088: ST_TO_ADDR
// _y := y ;
32089: LD_ADDR_VAR 0 7
32093: PUSH
32094: LD_VAR 0 5
32098: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32099: LD_ADDR_VAR 0 3
32103: PUSH
32104: LD_INT 1
32106: PPUSH
32107: LD_VAR 0 14
32111: PPUSH
32112: CALL_OW 12
32116: ST_TO_ADDR
// case i of 1 :
32117: LD_VAR 0 3
32121: PUSH
32122: LD_INT 1
32124: DOUBLE
32125: EQUAL
32126: IFTRUE 32130
32128: GO 32147
32130: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32131: LD_VAR 0 1
32135: PPUSH
32136: LD_VAR 0 10
32140: PPUSH
32141: CALL_OW 115
32145: GO 32208
32147: LD_INT 2
32149: DOUBLE
32150: EQUAL
32151: IFTRUE 32155
32153: GO 32177
32155: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32156: LD_VAR 0 1
32160: PPUSH
32161: LD_VAR 0 6
32165: PPUSH
32166: LD_VAR 0 7
32170: PPUSH
32171: CALL_OW 153
32175: GO 32208
32177: LD_INT 3
32179: DOUBLE
32180: EQUAL
32181: IFTRUE 32185
32183: GO 32207
32185: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32186: LD_VAR 0 1
32190: PPUSH
32191: LD_VAR 0 6
32195: PPUSH
32196: LD_VAR 0 7
32200: PPUSH
32201: CALL_OW 154
32205: GO 32208
32207: POP
// end ;
32208: LD_VAR 0 2
32212: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32213: LD_INT 0
32215: PPUSH
32216: PPUSH
32217: PPUSH
32218: PPUSH
32219: PPUSH
32220: PPUSH
// if not unit or not building then
32221: LD_VAR 0 1
32225: NOT
32226: PUSH
32227: LD_VAR 0 2
32231: NOT
32232: OR
32233: IFFALSE 32237
// exit ;
32235: GO 32395
// x := GetX ( building ) ;
32237: LD_ADDR_VAR 0 5
32241: PUSH
32242: LD_VAR 0 2
32246: PPUSH
32247: CALL_OW 250
32251: ST_TO_ADDR
// y := GetY ( building ) ;
32252: LD_ADDR_VAR 0 6
32256: PUSH
32257: LD_VAR 0 2
32261: PPUSH
32262: CALL_OW 251
32266: ST_TO_ADDR
// for i = 0 to 5 do
32267: LD_ADDR_VAR 0 4
32271: PUSH
32272: DOUBLE
32273: LD_INT 0
32275: DEC
32276: ST_TO_ADDR
32277: LD_INT 5
32279: PUSH
32280: FOR_TO
32281: IFFALSE 32393
// begin _x := ShiftX ( x , i , 3 ) ;
32283: LD_ADDR_VAR 0 7
32287: PUSH
32288: LD_VAR 0 5
32292: PPUSH
32293: LD_VAR 0 4
32297: PPUSH
32298: LD_INT 3
32300: PPUSH
32301: CALL_OW 272
32305: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32306: LD_ADDR_VAR 0 8
32310: PUSH
32311: LD_VAR 0 6
32315: PPUSH
32316: LD_VAR 0 4
32320: PPUSH
32321: LD_INT 3
32323: PPUSH
32324: CALL_OW 273
32328: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32329: LD_VAR 0 7
32333: PPUSH
32334: LD_VAR 0 8
32338: PPUSH
32339: CALL_OW 488
32343: NOT
32344: IFFALSE 32348
// continue ;
32346: GO 32280
// if HexInfo ( _x , _y ) = 0 then
32348: LD_VAR 0 7
32352: PPUSH
32353: LD_VAR 0 8
32357: PPUSH
32358: CALL_OW 428
32362: PUSH
32363: LD_INT 0
32365: EQUAL
32366: IFFALSE 32391
// begin ComMoveXY ( unit , _x , _y ) ;
32368: LD_VAR 0 1
32372: PPUSH
32373: LD_VAR 0 7
32377: PPUSH
32378: LD_VAR 0 8
32382: PPUSH
32383: CALL_OW 111
// exit ;
32387: POP
32388: POP
32389: GO 32395
// end ; end ;
32391: GO 32280
32393: POP
32394: POP
// end ;
32395: LD_VAR 0 3
32399: RET
// export function ScanBase ( side , base_area ) ; begin
32400: LD_INT 0
32402: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32403: LD_ADDR_VAR 0 3
32407: PUSH
32408: LD_VAR 0 2
32412: PPUSH
32413: LD_INT 81
32415: PUSH
32416: LD_VAR 0 1
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PPUSH
32425: CALL_OW 70
32429: ST_TO_ADDR
// end ;
32430: LD_VAR 0 3
32434: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32435: LD_INT 0
32437: PPUSH
32438: PPUSH
32439: PPUSH
32440: PPUSH
// result := false ;
32441: LD_ADDR_VAR 0 2
32445: PUSH
32446: LD_INT 0
32448: ST_TO_ADDR
// side := GetSide ( unit ) ;
32449: LD_ADDR_VAR 0 3
32453: PUSH
32454: LD_VAR 0 1
32458: PPUSH
32459: CALL_OW 255
32463: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32464: LD_ADDR_VAR 0 4
32468: PUSH
32469: LD_VAR 0 1
32473: PPUSH
32474: CALL_OW 248
32478: ST_TO_ADDR
// case nat of 1 :
32479: LD_VAR 0 4
32483: PUSH
32484: LD_INT 1
32486: DOUBLE
32487: EQUAL
32488: IFTRUE 32492
32490: GO 32503
32492: POP
// tech := tech_lassight ; 2 :
32493: LD_ADDR_VAR 0 5
32497: PUSH
32498: LD_INT 12
32500: ST_TO_ADDR
32501: GO 32542
32503: LD_INT 2
32505: DOUBLE
32506: EQUAL
32507: IFTRUE 32511
32509: GO 32522
32511: POP
// tech := tech_mortar ; 3 :
32512: LD_ADDR_VAR 0 5
32516: PUSH
32517: LD_INT 41
32519: ST_TO_ADDR
32520: GO 32542
32522: LD_INT 3
32524: DOUBLE
32525: EQUAL
32526: IFTRUE 32530
32528: GO 32541
32530: POP
// tech := tech_bazooka ; end ;
32531: LD_ADDR_VAR 0 5
32535: PUSH
32536: LD_INT 44
32538: ST_TO_ADDR
32539: GO 32542
32541: POP
// if Researched ( side , tech ) then
32542: LD_VAR 0 3
32546: PPUSH
32547: LD_VAR 0 5
32551: PPUSH
32552: CALL_OW 325
32556: IFFALSE 32583
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32558: LD_ADDR_VAR 0 2
32562: PUSH
32563: LD_INT 5
32565: PUSH
32566: LD_INT 8
32568: PUSH
32569: LD_INT 9
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: LIST
32576: PUSH
32577: LD_VAR 0 4
32581: ARRAY
32582: ST_TO_ADDR
// end ;
32583: LD_VAR 0 2
32587: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32588: LD_INT 0
32590: PPUSH
32591: PPUSH
32592: PPUSH
// if not mines then
32593: LD_VAR 0 2
32597: NOT
32598: IFFALSE 32602
// exit ;
32600: GO 32746
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32602: LD_ADDR_VAR 0 5
32606: PUSH
32607: LD_INT 81
32609: PUSH
32610: LD_VAR 0 1
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PUSH
32619: LD_INT 3
32621: PUSH
32622: LD_INT 21
32624: PUSH
32625: LD_INT 3
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PPUSH
32640: CALL_OW 69
32644: ST_TO_ADDR
// for i in mines do
32645: LD_ADDR_VAR 0 4
32649: PUSH
32650: LD_VAR 0 2
32654: PUSH
32655: FOR_IN
32656: IFFALSE 32744
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32658: LD_VAR 0 4
32662: PUSH
32663: LD_INT 1
32665: ARRAY
32666: PPUSH
32667: LD_VAR 0 4
32671: PUSH
32672: LD_INT 2
32674: ARRAY
32675: PPUSH
32676: CALL_OW 458
32680: NOT
32681: IFFALSE 32685
// continue ;
32683: GO 32655
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32685: LD_VAR 0 4
32689: PUSH
32690: LD_INT 1
32692: ARRAY
32693: PPUSH
32694: LD_VAR 0 4
32698: PUSH
32699: LD_INT 2
32701: ARRAY
32702: PPUSH
32703: CALL_OW 428
32707: PUSH
32708: LD_VAR 0 5
32712: IN
32713: IFFALSE 32742
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32715: LD_VAR 0 4
32719: PUSH
32720: LD_INT 1
32722: ARRAY
32723: PPUSH
32724: LD_VAR 0 4
32728: PUSH
32729: LD_INT 2
32731: ARRAY
32732: PPUSH
32733: LD_VAR 0 1
32737: PPUSH
32738: CALL_OW 456
// end ;
32742: GO 32655
32744: POP
32745: POP
// end ;
32746: LD_VAR 0 3
32750: RET
// export function Count ( array ) ; var i ; begin
32751: LD_INT 0
32753: PPUSH
32754: PPUSH
// result := 0 ;
32755: LD_ADDR_VAR 0 2
32759: PUSH
32760: LD_INT 0
32762: ST_TO_ADDR
// for i in array do
32763: LD_ADDR_VAR 0 3
32767: PUSH
32768: LD_VAR 0 1
32772: PUSH
32773: FOR_IN
32774: IFFALSE 32798
// if i then
32776: LD_VAR 0 3
32780: IFFALSE 32796
// result := result + 1 ;
32782: LD_ADDR_VAR 0 2
32786: PUSH
32787: LD_VAR 0 2
32791: PUSH
32792: LD_INT 1
32794: PLUS
32795: ST_TO_ADDR
32796: GO 32773
32798: POP
32799: POP
// end ;
32800: LD_VAR 0 2
32804: RET
// export function IsEmpty ( building ) ; begin
32805: LD_INT 0
32807: PPUSH
// if not building then
32808: LD_VAR 0 1
32812: NOT
32813: IFFALSE 32817
// exit ;
32815: GO 32860
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32817: LD_ADDR_VAR 0 2
32821: PUSH
32822: LD_VAR 0 1
32826: PUSH
32827: LD_INT 22
32829: PUSH
32830: LD_VAR 0 1
32834: PPUSH
32835: CALL_OW 255
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 58
32846: PUSH
32847: EMPTY
32848: LIST
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PPUSH
32854: CALL_OW 69
32858: IN
32859: ST_TO_ADDR
// end ;
32860: LD_VAR 0 2
32864: RET
// export function IsNotFull ( building ) ; var places ; begin
32865: LD_INT 0
32867: PPUSH
32868: PPUSH
// if not building then
32869: LD_VAR 0 1
32873: NOT
32874: IFFALSE 32878
// exit ;
32876: GO 33049
// result := false ;
32878: LD_ADDR_VAR 0 2
32882: PUSH
32883: LD_INT 0
32885: ST_TO_ADDR
// places := 0 ;
32886: LD_ADDR_VAR 0 3
32890: PUSH
32891: LD_INT 0
32893: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
32894: LD_VAR 0 1
32898: PPUSH
32899: CALL_OW 266
32903: PUSH
32904: LD_INT 0
32906: DOUBLE
32907: EQUAL
32908: IFTRUE 32966
32910: LD_INT 1
32912: DOUBLE
32913: EQUAL
32914: IFTRUE 32966
32916: LD_INT 6
32918: DOUBLE
32919: EQUAL
32920: IFTRUE 32966
32922: LD_INT 7
32924: DOUBLE
32925: EQUAL
32926: IFTRUE 32966
32928: LD_INT 8
32930: DOUBLE
32931: EQUAL
32932: IFTRUE 32966
32934: LD_INT 4
32936: DOUBLE
32937: EQUAL
32938: IFTRUE 32966
32940: LD_INT 5
32942: DOUBLE
32943: EQUAL
32944: IFTRUE 32966
32946: LD_INT 2
32948: DOUBLE
32949: EQUAL
32950: IFTRUE 32966
32952: LD_INT 3
32954: DOUBLE
32955: EQUAL
32956: IFTRUE 32966
32958: LD_INT 35
32960: DOUBLE
32961: EQUAL
32962: IFTRUE 32966
32964: GO 32977
32966: POP
// places := 6 ; b_bunker , b_breastwork :
32967: LD_ADDR_VAR 0 3
32971: PUSH
32972: LD_INT 6
32974: ST_TO_ADDR
32975: GO 33022
32977: LD_INT 32
32979: DOUBLE
32980: EQUAL
32981: IFTRUE 32991
32983: LD_INT 31
32985: DOUBLE
32986: EQUAL
32987: IFTRUE 32991
32989: GO 33002
32991: POP
// places := 1 ; b_control_tower :
32992: LD_ADDR_VAR 0 3
32996: PUSH
32997: LD_INT 1
32999: ST_TO_ADDR
33000: GO 33022
33002: LD_INT 36
33004: DOUBLE
33005: EQUAL
33006: IFTRUE 33010
33008: GO 33021
33010: POP
// places := 3 ; end ;
33011: LD_ADDR_VAR 0 3
33015: PUSH
33016: LD_INT 3
33018: ST_TO_ADDR
33019: GO 33022
33021: POP
// if places then
33022: LD_VAR 0 3
33026: IFFALSE 33049
// result := UnitsInside ( building ) < places ;
33028: LD_ADDR_VAR 0 2
33032: PUSH
33033: LD_VAR 0 1
33037: PPUSH
33038: CALL_OW 313
33042: PUSH
33043: LD_VAR 0 3
33047: LESS
33048: ST_TO_ADDR
// end ;
33049: LD_VAR 0 2
33053: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33054: LD_INT 0
33056: PPUSH
33057: PPUSH
33058: PPUSH
33059: PPUSH
// tmp := [ ] ;
33060: LD_ADDR_VAR 0 3
33064: PUSH
33065: EMPTY
33066: ST_TO_ADDR
// list := [ ] ;
33067: LD_ADDR_VAR 0 5
33071: PUSH
33072: EMPTY
33073: ST_TO_ADDR
// for i = 16 to 25 do
33074: LD_ADDR_VAR 0 4
33078: PUSH
33079: DOUBLE
33080: LD_INT 16
33082: DEC
33083: ST_TO_ADDR
33084: LD_INT 25
33086: PUSH
33087: FOR_TO
33088: IFFALSE 33161
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33090: LD_ADDR_VAR 0 3
33094: PUSH
33095: LD_VAR 0 3
33099: PUSH
33100: LD_INT 22
33102: PUSH
33103: LD_VAR 0 1
33107: PPUSH
33108: CALL_OW 255
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 91
33119: PUSH
33120: LD_VAR 0 1
33124: PUSH
33125: LD_INT 6
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 30
33135: PUSH
33136: LD_VAR 0 4
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: LIST
33149: PUSH
33150: EMPTY
33151: LIST
33152: PPUSH
33153: CALL_OW 69
33157: ADD
33158: ST_TO_ADDR
33159: GO 33087
33161: POP
33162: POP
// for i = 1 to tmp do
33163: LD_ADDR_VAR 0 4
33167: PUSH
33168: DOUBLE
33169: LD_INT 1
33171: DEC
33172: ST_TO_ADDR
33173: LD_VAR 0 3
33177: PUSH
33178: FOR_TO
33179: IFFALSE 33267
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33181: LD_ADDR_VAR 0 5
33185: PUSH
33186: LD_VAR 0 5
33190: PUSH
33191: LD_VAR 0 3
33195: PUSH
33196: LD_VAR 0 4
33200: ARRAY
33201: PPUSH
33202: CALL_OW 266
33206: PUSH
33207: LD_VAR 0 3
33211: PUSH
33212: LD_VAR 0 4
33216: ARRAY
33217: PPUSH
33218: CALL_OW 250
33222: PUSH
33223: LD_VAR 0 3
33227: PUSH
33228: LD_VAR 0 4
33232: ARRAY
33233: PPUSH
33234: CALL_OW 251
33238: PUSH
33239: LD_VAR 0 3
33243: PUSH
33244: LD_VAR 0 4
33248: ARRAY
33249: PPUSH
33250: CALL_OW 254
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: PUSH
33261: EMPTY
33262: LIST
33263: ADD
33264: ST_TO_ADDR
33265: GO 33178
33267: POP
33268: POP
// result := list ;
33269: LD_ADDR_VAR 0 2
33273: PUSH
33274: LD_VAR 0 5
33278: ST_TO_ADDR
// end ;
33279: LD_VAR 0 2
33283: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33284: LD_INT 0
33286: PPUSH
33287: PPUSH
33288: PPUSH
33289: PPUSH
33290: PPUSH
33291: PPUSH
33292: PPUSH
// if not factory then
33293: LD_VAR 0 1
33297: NOT
33298: IFFALSE 33302
// exit ;
33300: GO 33895
// if control = control_apeman then
33302: LD_VAR 0 4
33306: PUSH
33307: LD_INT 5
33309: EQUAL
33310: IFFALSE 33419
// begin tmp := UnitsInside ( factory ) ;
33312: LD_ADDR_VAR 0 8
33316: PUSH
33317: LD_VAR 0 1
33321: PPUSH
33322: CALL_OW 313
33326: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33327: LD_VAR 0 8
33331: PPUSH
33332: LD_INT 25
33334: PUSH
33335: LD_INT 12
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PPUSH
33342: CALL_OW 72
33346: NOT
33347: IFFALSE 33357
// control := control_manual ;
33349: LD_ADDR_VAR 0 4
33353: PUSH
33354: LD_INT 1
33356: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33357: LD_ADDR_VAR 0 8
33361: PUSH
33362: LD_VAR 0 1
33366: PPUSH
33367: CALL 33054 0 1
33371: ST_TO_ADDR
// if tmp then
33372: LD_VAR 0 8
33376: IFFALSE 33419
// begin for i in tmp do
33378: LD_ADDR_VAR 0 7
33382: PUSH
33383: LD_VAR 0 8
33387: PUSH
33388: FOR_IN
33389: IFFALSE 33417
// if i [ 1 ] = b_ext_radio then
33391: LD_VAR 0 7
33395: PUSH
33396: LD_INT 1
33398: ARRAY
33399: PUSH
33400: LD_INT 22
33402: EQUAL
33403: IFFALSE 33415
// begin control := control_remote ;
33405: LD_ADDR_VAR 0 4
33409: PUSH
33410: LD_INT 2
33412: ST_TO_ADDR
// break ;
33413: GO 33417
// end ;
33415: GO 33388
33417: POP
33418: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33419: LD_VAR 0 1
33423: PPUSH
33424: LD_VAR 0 2
33428: PPUSH
33429: LD_VAR 0 3
33433: PPUSH
33434: LD_VAR 0 4
33438: PPUSH
33439: LD_VAR 0 5
33443: PPUSH
33444: CALL_OW 448
33448: IFFALSE 33483
// begin result := [ chassis , engine , control , weapon ] ;
33450: LD_ADDR_VAR 0 6
33454: PUSH
33455: LD_VAR 0 2
33459: PUSH
33460: LD_VAR 0 3
33464: PUSH
33465: LD_VAR 0 4
33469: PUSH
33470: LD_VAR 0 5
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: ST_TO_ADDR
// exit ;
33481: GO 33895
// end ; _chassis := AvailableChassisList ( factory ) ;
33483: LD_ADDR_VAR 0 9
33487: PUSH
33488: LD_VAR 0 1
33492: PPUSH
33493: CALL_OW 475
33497: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33498: LD_ADDR_VAR 0 11
33502: PUSH
33503: LD_VAR 0 1
33507: PPUSH
33508: CALL_OW 476
33512: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33513: LD_ADDR_VAR 0 12
33517: PUSH
33518: LD_VAR 0 1
33522: PPUSH
33523: CALL_OW 477
33527: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33528: LD_ADDR_VAR 0 10
33532: PUSH
33533: LD_VAR 0 1
33537: PPUSH
33538: CALL_OW 478
33542: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33543: LD_VAR 0 9
33547: NOT
33548: PUSH
33549: LD_VAR 0 11
33553: NOT
33554: OR
33555: PUSH
33556: LD_VAR 0 12
33560: NOT
33561: OR
33562: PUSH
33563: LD_VAR 0 10
33567: NOT
33568: OR
33569: IFFALSE 33604
// begin result := [ chassis , engine , control , weapon ] ;
33571: LD_ADDR_VAR 0 6
33575: PUSH
33576: LD_VAR 0 2
33580: PUSH
33581: LD_VAR 0 3
33585: PUSH
33586: LD_VAR 0 4
33590: PUSH
33591: LD_VAR 0 5
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: ST_TO_ADDR
// exit ;
33602: GO 33895
// end ; if not chassis in _chassis then
33604: LD_VAR 0 2
33608: PUSH
33609: LD_VAR 0 9
33613: IN
33614: NOT
33615: IFFALSE 33641
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33617: LD_ADDR_VAR 0 2
33621: PUSH
33622: LD_VAR 0 9
33626: PUSH
33627: LD_INT 1
33629: PPUSH
33630: LD_VAR 0 9
33634: PPUSH
33635: CALL_OW 12
33639: ARRAY
33640: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33641: LD_VAR 0 2
33645: PPUSH
33646: LD_VAR 0 3
33650: PPUSH
33651: CALL 33900 0 2
33655: NOT
33656: IFFALSE 33715
// repeat engine := _engine [ 1 ] ;
33658: LD_ADDR_VAR 0 3
33662: PUSH
33663: LD_VAR 0 11
33667: PUSH
33668: LD_INT 1
33670: ARRAY
33671: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33672: LD_ADDR_VAR 0 11
33676: PUSH
33677: LD_VAR 0 11
33681: PPUSH
33682: LD_INT 1
33684: PPUSH
33685: CALL_OW 3
33689: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33690: LD_VAR 0 2
33694: PPUSH
33695: LD_VAR 0 3
33699: PPUSH
33700: CALL 33900 0 2
33704: PUSH
33705: LD_VAR 0 11
33709: PUSH
33710: EMPTY
33711: EQUAL
33712: OR
33713: IFFALSE 33658
// if not control in _control then
33715: LD_VAR 0 4
33719: PUSH
33720: LD_VAR 0 12
33724: IN
33725: NOT
33726: IFFALSE 33752
// control := _control [ rand ( 1 , _control ) ] ;
33728: LD_ADDR_VAR 0 4
33732: PUSH
33733: LD_VAR 0 12
33737: PUSH
33738: LD_INT 1
33740: PPUSH
33741: LD_VAR 0 12
33745: PPUSH
33746: CALL_OW 12
33750: ARRAY
33751: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33752: LD_VAR 0 2
33756: PPUSH
33757: LD_VAR 0 5
33761: PPUSH
33762: CALL 34120 0 2
33766: NOT
33767: IFFALSE 33826
// repeat weapon := _weapon [ 1 ] ;
33769: LD_ADDR_VAR 0 5
33773: PUSH
33774: LD_VAR 0 10
33778: PUSH
33779: LD_INT 1
33781: ARRAY
33782: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33783: LD_ADDR_VAR 0 10
33787: PUSH
33788: LD_VAR 0 10
33792: PPUSH
33793: LD_INT 1
33795: PPUSH
33796: CALL_OW 3
33800: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33801: LD_VAR 0 2
33805: PPUSH
33806: LD_VAR 0 5
33810: PPUSH
33811: CALL 34120 0 2
33815: PUSH
33816: LD_VAR 0 10
33820: PUSH
33821: EMPTY
33822: EQUAL
33823: OR
33824: IFFALSE 33769
// result := [ ] ;
33826: LD_ADDR_VAR 0 6
33830: PUSH
33831: EMPTY
33832: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33833: LD_VAR 0 1
33837: PPUSH
33838: LD_VAR 0 2
33842: PPUSH
33843: LD_VAR 0 3
33847: PPUSH
33848: LD_VAR 0 4
33852: PPUSH
33853: LD_VAR 0 5
33857: PPUSH
33858: CALL_OW 448
33862: IFFALSE 33895
// result := [ chassis , engine , control , weapon ] ;
33864: LD_ADDR_VAR 0 6
33868: PUSH
33869: LD_VAR 0 2
33873: PUSH
33874: LD_VAR 0 3
33878: PUSH
33879: LD_VAR 0 4
33883: PUSH
33884: LD_VAR 0 5
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: ST_TO_ADDR
// end ;
33895: LD_VAR 0 6
33899: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33900: LD_INT 0
33902: PPUSH
// if not chassis or not engine then
33903: LD_VAR 0 1
33907: NOT
33908: PUSH
33909: LD_VAR 0 2
33913: NOT
33914: OR
33915: IFFALSE 33919
// exit ;
33917: GO 34115
// case engine of engine_solar :
33919: LD_VAR 0 2
33923: PUSH
33924: LD_INT 2
33926: DOUBLE
33927: EQUAL
33928: IFTRUE 33932
33930: GO 33970
33932: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33933: LD_ADDR_VAR 0 3
33937: PUSH
33938: LD_INT 11
33940: PUSH
33941: LD_INT 12
33943: PUSH
33944: LD_INT 13
33946: PUSH
33947: LD_INT 14
33949: PUSH
33950: LD_INT 1
33952: PUSH
33953: LD_INT 2
33955: PUSH
33956: LD_INT 3
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: ST_TO_ADDR
33968: GO 34099
33970: LD_INT 1
33972: DOUBLE
33973: EQUAL
33974: IFTRUE 33978
33976: GO 34040
33978: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33979: LD_ADDR_VAR 0 3
33983: PUSH
33984: LD_INT 11
33986: PUSH
33987: LD_INT 12
33989: PUSH
33990: LD_INT 13
33992: PUSH
33993: LD_INT 14
33995: PUSH
33996: LD_INT 1
33998: PUSH
33999: LD_INT 2
34001: PUSH
34002: LD_INT 3
34004: PUSH
34005: LD_INT 4
34007: PUSH
34008: LD_INT 5
34010: PUSH
34011: LD_INT 21
34013: PUSH
34014: LD_INT 23
34016: PUSH
34017: LD_INT 22
34019: PUSH
34020: LD_INT 24
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: ST_TO_ADDR
34038: GO 34099
34040: LD_INT 3
34042: DOUBLE
34043: EQUAL
34044: IFTRUE 34048
34046: GO 34098
34048: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34049: LD_ADDR_VAR 0 3
34053: PUSH
34054: LD_INT 13
34056: PUSH
34057: LD_INT 14
34059: PUSH
34060: LD_INT 2
34062: PUSH
34063: LD_INT 3
34065: PUSH
34066: LD_INT 4
34068: PUSH
34069: LD_INT 5
34071: PUSH
34072: LD_INT 21
34074: PUSH
34075: LD_INT 22
34077: PUSH
34078: LD_INT 23
34080: PUSH
34081: LD_INT 24
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: ST_TO_ADDR
34096: GO 34099
34098: POP
// result := ( chassis in result ) ;
34099: LD_ADDR_VAR 0 3
34103: PUSH
34104: LD_VAR 0 1
34108: PUSH
34109: LD_VAR 0 3
34113: IN
34114: ST_TO_ADDR
// end ;
34115: LD_VAR 0 3
34119: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34120: LD_INT 0
34122: PPUSH
// if not chassis or not weapon then
34123: LD_VAR 0 1
34127: NOT
34128: PUSH
34129: LD_VAR 0 2
34133: NOT
34134: OR
34135: IFFALSE 34139
// exit ;
34137: GO 35199
// case weapon of us_machine_gun :
34139: LD_VAR 0 2
34143: PUSH
34144: LD_INT 2
34146: DOUBLE
34147: EQUAL
34148: IFTRUE 34152
34150: GO 34182
34152: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34153: LD_ADDR_VAR 0 3
34157: PUSH
34158: LD_INT 1
34160: PUSH
34161: LD_INT 2
34163: PUSH
34164: LD_INT 3
34166: PUSH
34167: LD_INT 4
34169: PUSH
34170: LD_INT 5
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: ST_TO_ADDR
34180: GO 35183
34182: LD_INT 3
34184: DOUBLE
34185: EQUAL
34186: IFTRUE 34190
34188: GO 34220
34190: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34191: LD_ADDR_VAR 0 3
34195: PUSH
34196: LD_INT 1
34198: PUSH
34199: LD_INT 2
34201: PUSH
34202: LD_INT 3
34204: PUSH
34205: LD_INT 4
34207: PUSH
34208: LD_INT 5
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: ST_TO_ADDR
34218: GO 35183
34220: LD_INT 11
34222: DOUBLE
34223: EQUAL
34224: IFTRUE 34228
34226: GO 34258
34228: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34229: LD_ADDR_VAR 0 3
34233: PUSH
34234: LD_INT 1
34236: PUSH
34237: LD_INT 2
34239: PUSH
34240: LD_INT 3
34242: PUSH
34243: LD_INT 4
34245: PUSH
34246: LD_INT 5
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: ST_TO_ADDR
34256: GO 35183
34258: LD_INT 4
34260: DOUBLE
34261: EQUAL
34262: IFTRUE 34266
34264: GO 34292
34266: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34267: LD_ADDR_VAR 0 3
34271: PUSH
34272: LD_INT 2
34274: PUSH
34275: LD_INT 3
34277: PUSH
34278: LD_INT 4
34280: PUSH
34281: LD_INT 5
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: ST_TO_ADDR
34290: GO 35183
34292: LD_INT 5
34294: DOUBLE
34295: EQUAL
34296: IFTRUE 34300
34298: GO 34326
34300: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34301: LD_ADDR_VAR 0 3
34305: PUSH
34306: LD_INT 2
34308: PUSH
34309: LD_INT 3
34311: PUSH
34312: LD_INT 4
34314: PUSH
34315: LD_INT 5
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: ST_TO_ADDR
34324: GO 35183
34326: LD_INT 9
34328: DOUBLE
34329: EQUAL
34330: IFTRUE 34334
34332: GO 34360
34334: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34335: LD_ADDR_VAR 0 3
34339: PUSH
34340: LD_INT 2
34342: PUSH
34343: LD_INT 3
34345: PUSH
34346: LD_INT 4
34348: PUSH
34349: LD_INT 5
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: ST_TO_ADDR
34358: GO 35183
34360: LD_INT 7
34362: DOUBLE
34363: EQUAL
34364: IFTRUE 34368
34366: GO 34394
34368: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34369: LD_ADDR_VAR 0 3
34373: PUSH
34374: LD_INT 2
34376: PUSH
34377: LD_INT 3
34379: PUSH
34380: LD_INT 4
34382: PUSH
34383: LD_INT 5
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: ST_TO_ADDR
34392: GO 35183
34394: LD_INT 12
34396: DOUBLE
34397: EQUAL
34398: IFTRUE 34402
34400: GO 34428
34402: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34403: LD_ADDR_VAR 0 3
34407: PUSH
34408: LD_INT 2
34410: PUSH
34411: LD_INT 3
34413: PUSH
34414: LD_INT 4
34416: PUSH
34417: LD_INT 5
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: ST_TO_ADDR
34426: GO 35183
34428: LD_INT 13
34430: DOUBLE
34431: EQUAL
34432: IFTRUE 34436
34434: GO 34462
34436: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34437: LD_ADDR_VAR 0 3
34441: PUSH
34442: LD_INT 2
34444: PUSH
34445: LD_INT 3
34447: PUSH
34448: LD_INT 4
34450: PUSH
34451: LD_INT 5
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: ST_TO_ADDR
34460: GO 35183
34462: LD_INT 14
34464: DOUBLE
34465: EQUAL
34466: IFTRUE 34470
34468: GO 34488
34470: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34471: LD_ADDR_VAR 0 3
34475: PUSH
34476: LD_INT 4
34478: PUSH
34479: LD_INT 5
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: ST_TO_ADDR
34486: GO 35183
34488: LD_INT 6
34490: DOUBLE
34491: EQUAL
34492: IFTRUE 34496
34494: GO 34514
34496: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34497: LD_ADDR_VAR 0 3
34501: PUSH
34502: LD_INT 4
34504: PUSH
34505: LD_INT 5
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: ST_TO_ADDR
34512: GO 35183
34514: LD_INT 10
34516: DOUBLE
34517: EQUAL
34518: IFTRUE 34522
34520: GO 34540
34522: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34523: LD_ADDR_VAR 0 3
34527: PUSH
34528: LD_INT 4
34530: PUSH
34531: LD_INT 5
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: ST_TO_ADDR
34538: GO 35183
34540: LD_INT 22
34542: DOUBLE
34543: EQUAL
34544: IFTRUE 34548
34546: GO 34574
34548: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34549: LD_ADDR_VAR 0 3
34553: PUSH
34554: LD_INT 11
34556: PUSH
34557: LD_INT 12
34559: PUSH
34560: LD_INT 13
34562: PUSH
34563: LD_INT 14
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: ST_TO_ADDR
34572: GO 35183
34574: LD_INT 23
34576: DOUBLE
34577: EQUAL
34578: IFTRUE 34582
34580: GO 34608
34582: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34583: LD_ADDR_VAR 0 3
34587: PUSH
34588: LD_INT 11
34590: PUSH
34591: LD_INT 12
34593: PUSH
34594: LD_INT 13
34596: PUSH
34597: LD_INT 14
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: ST_TO_ADDR
34606: GO 35183
34608: LD_INT 24
34610: DOUBLE
34611: EQUAL
34612: IFTRUE 34616
34614: GO 34642
34616: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34617: LD_ADDR_VAR 0 3
34621: PUSH
34622: LD_INT 11
34624: PUSH
34625: LD_INT 12
34627: PUSH
34628: LD_INT 13
34630: PUSH
34631: LD_INT 14
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: ST_TO_ADDR
34640: GO 35183
34642: LD_INT 30
34644: DOUBLE
34645: EQUAL
34646: IFTRUE 34650
34648: GO 34676
34650: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34651: LD_ADDR_VAR 0 3
34655: PUSH
34656: LD_INT 11
34658: PUSH
34659: LD_INT 12
34661: PUSH
34662: LD_INT 13
34664: PUSH
34665: LD_INT 14
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: ST_TO_ADDR
34674: GO 35183
34676: LD_INT 25
34678: DOUBLE
34679: EQUAL
34680: IFTRUE 34684
34682: GO 34702
34684: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34685: LD_ADDR_VAR 0 3
34689: PUSH
34690: LD_INT 13
34692: PUSH
34693: LD_INT 14
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: ST_TO_ADDR
34700: GO 35183
34702: LD_INT 27
34704: DOUBLE
34705: EQUAL
34706: IFTRUE 34710
34708: GO 34728
34710: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34711: LD_ADDR_VAR 0 3
34715: PUSH
34716: LD_INT 13
34718: PUSH
34719: LD_INT 14
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: ST_TO_ADDR
34726: GO 35183
34728: LD_INT 92
34730: DOUBLE
34731: EQUAL
34732: IFTRUE 34736
34734: GO 34762
34736: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34737: LD_ADDR_VAR 0 3
34741: PUSH
34742: LD_INT 11
34744: PUSH
34745: LD_INT 12
34747: PUSH
34748: LD_INT 13
34750: PUSH
34751: LD_INT 14
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: ST_TO_ADDR
34760: GO 35183
34762: LD_INT 28
34764: DOUBLE
34765: EQUAL
34766: IFTRUE 34770
34768: GO 34788
34770: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34771: LD_ADDR_VAR 0 3
34775: PUSH
34776: LD_INT 13
34778: PUSH
34779: LD_INT 14
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: ST_TO_ADDR
34786: GO 35183
34788: LD_INT 29
34790: DOUBLE
34791: EQUAL
34792: IFTRUE 34796
34794: GO 34814
34796: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34797: LD_ADDR_VAR 0 3
34801: PUSH
34802: LD_INT 13
34804: PUSH
34805: LD_INT 14
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: ST_TO_ADDR
34812: GO 35183
34814: LD_INT 31
34816: DOUBLE
34817: EQUAL
34818: IFTRUE 34822
34820: GO 34840
34822: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34823: LD_ADDR_VAR 0 3
34827: PUSH
34828: LD_INT 13
34830: PUSH
34831: LD_INT 14
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: ST_TO_ADDR
34838: GO 35183
34840: LD_INT 26
34842: DOUBLE
34843: EQUAL
34844: IFTRUE 34848
34846: GO 34866
34848: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34849: LD_ADDR_VAR 0 3
34853: PUSH
34854: LD_INT 13
34856: PUSH
34857: LD_INT 14
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: ST_TO_ADDR
34864: GO 35183
34866: LD_INT 42
34868: DOUBLE
34869: EQUAL
34870: IFTRUE 34874
34872: GO 34900
34874: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34875: LD_ADDR_VAR 0 3
34879: PUSH
34880: LD_INT 21
34882: PUSH
34883: LD_INT 22
34885: PUSH
34886: LD_INT 23
34888: PUSH
34889: LD_INT 24
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: ST_TO_ADDR
34898: GO 35183
34900: LD_INT 43
34902: DOUBLE
34903: EQUAL
34904: IFTRUE 34908
34906: GO 34934
34908: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34909: LD_ADDR_VAR 0 3
34913: PUSH
34914: LD_INT 21
34916: PUSH
34917: LD_INT 22
34919: PUSH
34920: LD_INT 23
34922: PUSH
34923: LD_INT 24
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: ST_TO_ADDR
34932: GO 35183
34934: LD_INT 44
34936: DOUBLE
34937: EQUAL
34938: IFTRUE 34942
34940: GO 34968
34942: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34943: LD_ADDR_VAR 0 3
34947: PUSH
34948: LD_INT 21
34950: PUSH
34951: LD_INT 22
34953: PUSH
34954: LD_INT 23
34956: PUSH
34957: LD_INT 24
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: ST_TO_ADDR
34966: GO 35183
34968: LD_INT 45
34970: DOUBLE
34971: EQUAL
34972: IFTRUE 34976
34974: GO 35002
34976: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34977: LD_ADDR_VAR 0 3
34981: PUSH
34982: LD_INT 21
34984: PUSH
34985: LD_INT 22
34987: PUSH
34988: LD_INT 23
34990: PUSH
34991: LD_INT 24
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: ST_TO_ADDR
35000: GO 35183
35002: LD_INT 49
35004: DOUBLE
35005: EQUAL
35006: IFTRUE 35010
35008: GO 35036
35010: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35011: LD_ADDR_VAR 0 3
35015: PUSH
35016: LD_INT 21
35018: PUSH
35019: LD_INT 22
35021: PUSH
35022: LD_INT 23
35024: PUSH
35025: LD_INT 24
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: ST_TO_ADDR
35034: GO 35183
35036: LD_INT 51
35038: DOUBLE
35039: EQUAL
35040: IFTRUE 35044
35042: GO 35070
35044: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35045: LD_ADDR_VAR 0 3
35049: PUSH
35050: LD_INT 21
35052: PUSH
35053: LD_INT 22
35055: PUSH
35056: LD_INT 23
35058: PUSH
35059: LD_INT 24
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: ST_TO_ADDR
35068: GO 35183
35070: LD_INT 52
35072: DOUBLE
35073: EQUAL
35074: IFTRUE 35078
35076: GO 35104
35078: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35079: LD_ADDR_VAR 0 3
35083: PUSH
35084: LD_INT 21
35086: PUSH
35087: LD_INT 22
35089: PUSH
35090: LD_INT 23
35092: PUSH
35093: LD_INT 24
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: ST_TO_ADDR
35102: GO 35183
35104: LD_INT 53
35106: DOUBLE
35107: EQUAL
35108: IFTRUE 35112
35110: GO 35130
35112: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35113: LD_ADDR_VAR 0 3
35117: PUSH
35118: LD_INT 23
35120: PUSH
35121: LD_INT 24
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: ST_TO_ADDR
35128: GO 35183
35130: LD_INT 46
35132: DOUBLE
35133: EQUAL
35134: IFTRUE 35138
35136: GO 35156
35138: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35139: LD_ADDR_VAR 0 3
35143: PUSH
35144: LD_INT 23
35146: PUSH
35147: LD_INT 24
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: ST_TO_ADDR
35154: GO 35183
35156: LD_INT 47
35158: DOUBLE
35159: EQUAL
35160: IFTRUE 35164
35162: GO 35182
35164: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35165: LD_ADDR_VAR 0 3
35169: PUSH
35170: LD_INT 23
35172: PUSH
35173: LD_INT 24
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: ST_TO_ADDR
35180: GO 35183
35182: POP
// result := ( chassis in result ) ;
35183: LD_ADDR_VAR 0 3
35187: PUSH
35188: LD_VAR 0 1
35192: PUSH
35193: LD_VAR 0 3
35197: IN
35198: ST_TO_ADDR
// end ;
35199: LD_VAR 0 3
35203: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35204: LD_INT 0
35206: PPUSH
35207: PPUSH
35208: PPUSH
35209: PPUSH
35210: PPUSH
35211: PPUSH
35212: PPUSH
// result := array ;
35213: LD_ADDR_VAR 0 5
35217: PUSH
35218: LD_VAR 0 1
35222: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35223: LD_VAR 0 1
35227: NOT
35228: PUSH
35229: LD_VAR 0 2
35233: NOT
35234: OR
35235: PUSH
35236: LD_VAR 0 3
35240: NOT
35241: OR
35242: PUSH
35243: LD_VAR 0 2
35247: PUSH
35248: LD_VAR 0 1
35252: GREATER
35253: OR
35254: PUSH
35255: LD_VAR 0 3
35259: PUSH
35260: LD_VAR 0 1
35264: GREATER
35265: OR
35266: IFFALSE 35270
// exit ;
35268: GO 35566
// if direction then
35270: LD_VAR 0 4
35274: IFFALSE 35338
// begin d := 1 ;
35276: LD_ADDR_VAR 0 9
35280: PUSH
35281: LD_INT 1
35283: ST_TO_ADDR
// if i_from > i_to then
35284: LD_VAR 0 2
35288: PUSH
35289: LD_VAR 0 3
35293: GREATER
35294: IFFALSE 35320
// length := ( array - i_from ) + i_to else
35296: LD_ADDR_VAR 0 11
35300: PUSH
35301: LD_VAR 0 1
35305: PUSH
35306: LD_VAR 0 2
35310: MINUS
35311: PUSH
35312: LD_VAR 0 3
35316: PLUS
35317: ST_TO_ADDR
35318: GO 35336
// length := i_to - i_from ;
35320: LD_ADDR_VAR 0 11
35324: PUSH
35325: LD_VAR 0 3
35329: PUSH
35330: LD_VAR 0 2
35334: MINUS
35335: ST_TO_ADDR
// end else
35336: GO 35399
// begin d := - 1 ;
35338: LD_ADDR_VAR 0 9
35342: PUSH
35343: LD_INT 1
35345: NEG
35346: ST_TO_ADDR
// if i_from > i_to then
35347: LD_VAR 0 2
35351: PUSH
35352: LD_VAR 0 3
35356: GREATER
35357: IFFALSE 35377
// length := i_from - i_to else
35359: LD_ADDR_VAR 0 11
35363: PUSH
35364: LD_VAR 0 2
35368: PUSH
35369: LD_VAR 0 3
35373: MINUS
35374: ST_TO_ADDR
35375: GO 35399
// length := ( array - i_to ) + i_from ;
35377: LD_ADDR_VAR 0 11
35381: PUSH
35382: LD_VAR 0 1
35386: PUSH
35387: LD_VAR 0 3
35391: MINUS
35392: PUSH
35393: LD_VAR 0 2
35397: PLUS
35398: ST_TO_ADDR
// end ; if not length then
35399: LD_VAR 0 11
35403: NOT
35404: IFFALSE 35408
// exit ;
35406: GO 35566
// tmp := array ;
35408: LD_ADDR_VAR 0 10
35412: PUSH
35413: LD_VAR 0 1
35417: ST_TO_ADDR
// for i = 1 to length do
35418: LD_ADDR_VAR 0 6
35422: PUSH
35423: DOUBLE
35424: LD_INT 1
35426: DEC
35427: ST_TO_ADDR
35428: LD_VAR 0 11
35432: PUSH
35433: FOR_TO
35434: IFFALSE 35554
// begin for j = 1 to array do
35436: LD_ADDR_VAR 0 7
35440: PUSH
35441: DOUBLE
35442: LD_INT 1
35444: DEC
35445: ST_TO_ADDR
35446: LD_VAR 0 1
35450: PUSH
35451: FOR_TO
35452: IFFALSE 35540
// begin k := j + d ;
35454: LD_ADDR_VAR 0 8
35458: PUSH
35459: LD_VAR 0 7
35463: PUSH
35464: LD_VAR 0 9
35468: PLUS
35469: ST_TO_ADDR
// if k > array then
35470: LD_VAR 0 8
35474: PUSH
35475: LD_VAR 0 1
35479: GREATER
35480: IFFALSE 35490
// k := 1 ;
35482: LD_ADDR_VAR 0 8
35486: PUSH
35487: LD_INT 1
35489: ST_TO_ADDR
// if not k then
35490: LD_VAR 0 8
35494: NOT
35495: IFFALSE 35507
// k := array ;
35497: LD_ADDR_VAR 0 8
35501: PUSH
35502: LD_VAR 0 1
35506: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35507: LD_ADDR_VAR 0 10
35511: PUSH
35512: LD_VAR 0 10
35516: PPUSH
35517: LD_VAR 0 8
35521: PPUSH
35522: LD_VAR 0 1
35526: PUSH
35527: LD_VAR 0 7
35531: ARRAY
35532: PPUSH
35533: CALL_OW 1
35537: ST_TO_ADDR
// end ;
35538: GO 35451
35540: POP
35541: POP
// array := tmp ;
35542: LD_ADDR_VAR 0 1
35546: PUSH
35547: LD_VAR 0 10
35551: ST_TO_ADDR
// end ;
35552: GO 35433
35554: POP
35555: POP
// result := array ;
35556: LD_ADDR_VAR 0 5
35560: PUSH
35561: LD_VAR 0 1
35565: ST_TO_ADDR
// end ;
35566: LD_VAR 0 5
35570: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35571: LD_INT 0
35573: PPUSH
35574: PPUSH
// result := 0 ;
35575: LD_ADDR_VAR 0 3
35579: PUSH
35580: LD_INT 0
35582: ST_TO_ADDR
// if not array or not value in array then
35583: LD_VAR 0 1
35587: NOT
35588: PUSH
35589: LD_VAR 0 2
35593: PUSH
35594: LD_VAR 0 1
35598: IN
35599: NOT
35600: OR
35601: IFFALSE 35605
// exit ;
35603: GO 35659
// for i = 1 to array do
35605: LD_ADDR_VAR 0 4
35609: PUSH
35610: DOUBLE
35611: LD_INT 1
35613: DEC
35614: ST_TO_ADDR
35615: LD_VAR 0 1
35619: PUSH
35620: FOR_TO
35621: IFFALSE 35657
// if value = array [ i ] then
35623: LD_VAR 0 2
35627: PUSH
35628: LD_VAR 0 1
35632: PUSH
35633: LD_VAR 0 4
35637: ARRAY
35638: EQUAL
35639: IFFALSE 35655
// begin result := i ;
35641: LD_ADDR_VAR 0 3
35645: PUSH
35646: LD_VAR 0 4
35650: ST_TO_ADDR
// exit ;
35651: POP
35652: POP
35653: GO 35659
// end ;
35655: GO 35620
35657: POP
35658: POP
// end ;
35659: LD_VAR 0 3
35663: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35664: LD_INT 0
35666: PPUSH
// vc_chassis := chassis ;
35667: LD_ADDR_OWVAR 37
35671: PUSH
35672: LD_VAR 0 1
35676: ST_TO_ADDR
// vc_engine := engine ;
35677: LD_ADDR_OWVAR 39
35681: PUSH
35682: LD_VAR 0 2
35686: ST_TO_ADDR
// vc_control := control ;
35687: LD_ADDR_OWVAR 38
35691: PUSH
35692: LD_VAR 0 3
35696: ST_TO_ADDR
// vc_weapon := weapon ;
35697: LD_ADDR_OWVAR 40
35701: PUSH
35702: LD_VAR 0 4
35706: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35707: LD_ADDR_OWVAR 41
35711: PUSH
35712: LD_VAR 0 5
35716: ST_TO_ADDR
// end ;
35717: LD_VAR 0 6
35721: RET
// export function WantPlant ( unit ) ; var task ; begin
35722: LD_INT 0
35724: PPUSH
35725: PPUSH
// result := false ;
35726: LD_ADDR_VAR 0 2
35730: PUSH
35731: LD_INT 0
35733: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35734: LD_ADDR_VAR 0 3
35738: PUSH
35739: LD_VAR 0 1
35743: PPUSH
35744: CALL_OW 437
35748: ST_TO_ADDR
// if task then
35749: LD_VAR 0 3
35753: IFFALSE 35781
// if task [ 1 ] [ 1 ] = p then
35755: LD_VAR 0 3
35759: PUSH
35760: LD_INT 1
35762: ARRAY
35763: PUSH
35764: LD_INT 1
35766: ARRAY
35767: PUSH
35768: LD_STRING p
35770: EQUAL
35771: IFFALSE 35781
// result := true ;
35773: LD_ADDR_VAR 0 2
35777: PUSH
35778: LD_INT 1
35780: ST_TO_ADDR
// end ;
35781: LD_VAR 0 2
35785: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35786: LD_INT 0
35788: PPUSH
35789: PPUSH
35790: PPUSH
35791: PPUSH
// if pos < 1 then
35792: LD_VAR 0 2
35796: PUSH
35797: LD_INT 1
35799: LESS
35800: IFFALSE 35804
// exit ;
35802: GO 36107
// if pos = 1 then
35804: LD_VAR 0 2
35808: PUSH
35809: LD_INT 1
35811: EQUAL
35812: IFFALSE 35845
// result := Replace ( arr , pos [ 1 ] , value ) else
35814: LD_ADDR_VAR 0 4
35818: PUSH
35819: LD_VAR 0 1
35823: PPUSH
35824: LD_VAR 0 2
35828: PUSH
35829: LD_INT 1
35831: ARRAY
35832: PPUSH
35833: LD_VAR 0 3
35837: PPUSH
35838: CALL_OW 1
35842: ST_TO_ADDR
35843: GO 36107
// begin tmp := arr ;
35845: LD_ADDR_VAR 0 6
35849: PUSH
35850: LD_VAR 0 1
35854: ST_TO_ADDR
// s_arr := [ tmp ] ;
35855: LD_ADDR_VAR 0 7
35859: PUSH
35860: LD_VAR 0 6
35864: PUSH
35865: EMPTY
35866: LIST
35867: ST_TO_ADDR
// for i = 1 to pos - 1 do
35868: LD_ADDR_VAR 0 5
35872: PUSH
35873: DOUBLE
35874: LD_INT 1
35876: DEC
35877: ST_TO_ADDR
35878: LD_VAR 0 2
35882: PUSH
35883: LD_INT 1
35885: MINUS
35886: PUSH
35887: FOR_TO
35888: IFFALSE 35933
// begin tmp := tmp [ pos [ i ] ] ;
35890: LD_ADDR_VAR 0 6
35894: PUSH
35895: LD_VAR 0 6
35899: PUSH
35900: LD_VAR 0 2
35904: PUSH
35905: LD_VAR 0 5
35909: ARRAY
35910: ARRAY
35911: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35912: LD_ADDR_VAR 0 7
35916: PUSH
35917: LD_VAR 0 7
35921: PUSH
35922: LD_VAR 0 6
35926: PUSH
35927: EMPTY
35928: LIST
35929: ADD
35930: ST_TO_ADDR
// end ;
35931: GO 35887
35933: POP
35934: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35935: LD_ADDR_VAR 0 6
35939: PUSH
35940: LD_VAR 0 6
35944: PPUSH
35945: LD_VAR 0 2
35949: PUSH
35950: LD_VAR 0 2
35954: ARRAY
35955: PPUSH
35956: LD_VAR 0 3
35960: PPUSH
35961: CALL_OW 1
35965: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35966: LD_ADDR_VAR 0 7
35970: PUSH
35971: LD_VAR 0 7
35975: PPUSH
35976: LD_VAR 0 7
35980: PPUSH
35981: LD_VAR 0 6
35985: PPUSH
35986: CALL_OW 1
35990: ST_TO_ADDR
// for i = s_arr downto 2 do
35991: LD_ADDR_VAR 0 5
35995: PUSH
35996: DOUBLE
35997: LD_VAR 0 7
36001: INC
36002: ST_TO_ADDR
36003: LD_INT 2
36005: PUSH
36006: FOR_DOWNTO
36007: IFFALSE 36091
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36009: LD_ADDR_VAR 0 6
36013: PUSH
36014: LD_VAR 0 7
36018: PUSH
36019: LD_VAR 0 5
36023: PUSH
36024: LD_INT 1
36026: MINUS
36027: ARRAY
36028: PPUSH
36029: LD_VAR 0 2
36033: PUSH
36034: LD_VAR 0 5
36038: PUSH
36039: LD_INT 1
36041: MINUS
36042: ARRAY
36043: PPUSH
36044: LD_VAR 0 7
36048: PUSH
36049: LD_VAR 0 5
36053: ARRAY
36054: PPUSH
36055: CALL_OW 1
36059: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36060: LD_ADDR_VAR 0 7
36064: PUSH
36065: LD_VAR 0 7
36069: PPUSH
36070: LD_VAR 0 5
36074: PUSH
36075: LD_INT 1
36077: MINUS
36078: PPUSH
36079: LD_VAR 0 6
36083: PPUSH
36084: CALL_OW 1
36088: ST_TO_ADDR
// end ;
36089: GO 36006
36091: POP
36092: POP
// result := s_arr [ 1 ] ;
36093: LD_ADDR_VAR 0 4
36097: PUSH
36098: LD_VAR 0 7
36102: PUSH
36103: LD_INT 1
36105: ARRAY
36106: ST_TO_ADDR
// end ; end ;
36107: LD_VAR 0 4
36111: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36112: LD_INT 0
36114: PPUSH
36115: PPUSH
// if not list then
36116: LD_VAR 0 1
36120: NOT
36121: IFFALSE 36125
// exit ;
36123: GO 36216
// i := list [ pos1 ] ;
36125: LD_ADDR_VAR 0 5
36129: PUSH
36130: LD_VAR 0 1
36134: PUSH
36135: LD_VAR 0 2
36139: ARRAY
36140: ST_TO_ADDR
// if not i then
36141: LD_VAR 0 5
36145: NOT
36146: IFFALSE 36150
// exit ;
36148: GO 36216
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36150: LD_ADDR_VAR 0 1
36154: PUSH
36155: LD_VAR 0 1
36159: PPUSH
36160: LD_VAR 0 2
36164: PPUSH
36165: LD_VAR 0 1
36169: PUSH
36170: LD_VAR 0 3
36174: ARRAY
36175: PPUSH
36176: CALL_OW 1
36180: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36181: LD_ADDR_VAR 0 1
36185: PUSH
36186: LD_VAR 0 1
36190: PPUSH
36191: LD_VAR 0 3
36195: PPUSH
36196: LD_VAR 0 5
36200: PPUSH
36201: CALL_OW 1
36205: ST_TO_ADDR
// result := list ;
36206: LD_ADDR_VAR 0 4
36210: PUSH
36211: LD_VAR 0 1
36215: ST_TO_ADDR
// end ;
36216: LD_VAR 0 4
36220: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36221: LD_INT 0
36223: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36224: LD_ADDR_VAR 0 5
36228: PUSH
36229: LD_VAR 0 1
36233: PPUSH
36234: CALL_OW 250
36238: PPUSH
36239: LD_VAR 0 1
36243: PPUSH
36244: CALL_OW 251
36248: PPUSH
36249: LD_VAR 0 2
36253: PPUSH
36254: LD_VAR 0 3
36258: PPUSH
36259: LD_VAR 0 4
36263: PPUSH
36264: CALL 36274 0 5
36268: ST_TO_ADDR
// end ;
36269: LD_VAR 0 5
36273: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36274: LD_INT 0
36276: PPUSH
36277: PPUSH
36278: PPUSH
36279: PPUSH
// if not list then
36280: LD_VAR 0 3
36284: NOT
36285: IFFALSE 36289
// exit ;
36287: GO 36677
// result := [ ] ;
36289: LD_ADDR_VAR 0 6
36293: PUSH
36294: EMPTY
36295: ST_TO_ADDR
// for i in list do
36296: LD_ADDR_VAR 0 7
36300: PUSH
36301: LD_VAR 0 3
36305: PUSH
36306: FOR_IN
36307: IFFALSE 36509
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36309: LD_ADDR_VAR 0 9
36313: PUSH
36314: LD_VAR 0 7
36318: PPUSH
36319: LD_VAR 0 1
36323: PPUSH
36324: LD_VAR 0 2
36328: PPUSH
36329: CALL_OW 297
36333: ST_TO_ADDR
// if not result then
36334: LD_VAR 0 6
36338: NOT
36339: IFFALSE 36365
// result := [ [ i , tmp ] ] else
36341: LD_ADDR_VAR 0 6
36345: PUSH
36346: LD_VAR 0 7
36350: PUSH
36351: LD_VAR 0 9
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: PUSH
36360: EMPTY
36361: LIST
36362: ST_TO_ADDR
36363: GO 36507
// begin if result [ result ] [ 2 ] < tmp then
36365: LD_VAR 0 6
36369: PUSH
36370: LD_VAR 0 6
36374: ARRAY
36375: PUSH
36376: LD_INT 2
36378: ARRAY
36379: PUSH
36380: LD_VAR 0 9
36384: LESS
36385: IFFALSE 36427
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36387: LD_ADDR_VAR 0 6
36391: PUSH
36392: LD_VAR 0 6
36396: PPUSH
36397: LD_VAR 0 6
36401: PUSH
36402: LD_INT 1
36404: PLUS
36405: PPUSH
36406: LD_VAR 0 7
36410: PUSH
36411: LD_VAR 0 9
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: PPUSH
36420: CALL_OW 2
36424: ST_TO_ADDR
36425: GO 36507
// for j = 1 to result do
36427: LD_ADDR_VAR 0 8
36431: PUSH
36432: DOUBLE
36433: LD_INT 1
36435: DEC
36436: ST_TO_ADDR
36437: LD_VAR 0 6
36441: PUSH
36442: FOR_TO
36443: IFFALSE 36505
// begin if tmp < result [ j ] [ 2 ] then
36445: LD_VAR 0 9
36449: PUSH
36450: LD_VAR 0 6
36454: PUSH
36455: LD_VAR 0 8
36459: ARRAY
36460: PUSH
36461: LD_INT 2
36463: ARRAY
36464: LESS
36465: IFFALSE 36503
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36467: LD_ADDR_VAR 0 6
36471: PUSH
36472: LD_VAR 0 6
36476: PPUSH
36477: LD_VAR 0 8
36481: PPUSH
36482: LD_VAR 0 7
36486: PUSH
36487: LD_VAR 0 9
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PPUSH
36496: CALL_OW 2
36500: ST_TO_ADDR
// break ;
36501: GO 36505
// end ; end ;
36503: GO 36442
36505: POP
36506: POP
// end ; end ;
36507: GO 36306
36509: POP
36510: POP
// if result and not asc then
36511: LD_VAR 0 6
36515: PUSH
36516: LD_VAR 0 4
36520: NOT
36521: AND
36522: IFFALSE 36597
// begin tmp := result ;
36524: LD_ADDR_VAR 0 9
36528: PUSH
36529: LD_VAR 0 6
36533: ST_TO_ADDR
// for i = tmp downto 1 do
36534: LD_ADDR_VAR 0 7
36538: PUSH
36539: DOUBLE
36540: LD_VAR 0 9
36544: INC
36545: ST_TO_ADDR
36546: LD_INT 1
36548: PUSH
36549: FOR_DOWNTO
36550: IFFALSE 36595
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36552: LD_ADDR_VAR 0 6
36556: PUSH
36557: LD_VAR 0 6
36561: PPUSH
36562: LD_VAR 0 9
36566: PUSH
36567: LD_VAR 0 7
36571: MINUS
36572: PUSH
36573: LD_INT 1
36575: PLUS
36576: PPUSH
36577: LD_VAR 0 9
36581: PUSH
36582: LD_VAR 0 7
36586: ARRAY
36587: PPUSH
36588: CALL_OW 1
36592: ST_TO_ADDR
36593: GO 36549
36595: POP
36596: POP
// end ; tmp := [ ] ;
36597: LD_ADDR_VAR 0 9
36601: PUSH
36602: EMPTY
36603: ST_TO_ADDR
// if mode then
36604: LD_VAR 0 5
36608: IFFALSE 36677
// begin for i = 1 to result do
36610: LD_ADDR_VAR 0 7
36614: PUSH
36615: DOUBLE
36616: LD_INT 1
36618: DEC
36619: ST_TO_ADDR
36620: LD_VAR 0 6
36624: PUSH
36625: FOR_TO
36626: IFFALSE 36665
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36628: LD_ADDR_VAR 0 9
36632: PUSH
36633: LD_VAR 0 9
36637: PPUSH
36638: LD_VAR 0 7
36642: PPUSH
36643: LD_VAR 0 6
36647: PUSH
36648: LD_VAR 0 7
36652: ARRAY
36653: PUSH
36654: LD_INT 1
36656: ARRAY
36657: PPUSH
36658: CALL_OW 1
36662: ST_TO_ADDR
36663: GO 36625
36665: POP
36666: POP
// result := tmp ;
36667: LD_ADDR_VAR 0 6
36671: PUSH
36672: LD_VAR 0 9
36676: ST_TO_ADDR
// end ; end ;
36677: LD_VAR 0 6
36681: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36682: LD_INT 0
36684: PPUSH
36685: PPUSH
36686: PPUSH
36687: PPUSH
36688: PPUSH
36689: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36690: LD_ADDR_VAR 0 5
36694: PUSH
36695: LD_INT 0
36697: PUSH
36698: LD_INT 0
36700: PUSH
36701: LD_INT 0
36703: PUSH
36704: EMPTY
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: ST_TO_ADDR
// if not x or not y then
36712: LD_VAR 0 2
36716: NOT
36717: PUSH
36718: LD_VAR 0 3
36722: NOT
36723: OR
36724: IFFALSE 36728
// exit ;
36726: GO 38378
// if not range then
36728: LD_VAR 0 4
36732: NOT
36733: IFFALSE 36743
// range := 10 ;
36735: LD_ADDR_VAR 0 4
36739: PUSH
36740: LD_INT 10
36742: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36743: LD_ADDR_VAR 0 8
36747: PUSH
36748: LD_INT 81
36750: PUSH
36751: LD_VAR 0 1
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 92
36762: PUSH
36763: LD_VAR 0 2
36767: PUSH
36768: LD_VAR 0 3
36772: PUSH
36773: LD_VAR 0 4
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 3
36786: PUSH
36787: LD_INT 21
36789: PUSH
36790: LD_INT 3
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: LIST
36805: PPUSH
36806: CALL_OW 69
36810: ST_TO_ADDR
// if not tmp then
36811: LD_VAR 0 8
36815: NOT
36816: IFFALSE 36820
// exit ;
36818: GO 38378
// for i in tmp do
36820: LD_ADDR_VAR 0 6
36824: PUSH
36825: LD_VAR 0 8
36829: PUSH
36830: FOR_IN
36831: IFFALSE 38353
// begin points := [ 0 , 0 , 0 ] ;
36833: LD_ADDR_VAR 0 9
36837: PUSH
36838: LD_INT 0
36840: PUSH
36841: LD_INT 0
36843: PUSH
36844: LD_INT 0
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: LIST
36851: ST_TO_ADDR
// bpoints := 1 ;
36852: LD_ADDR_VAR 0 10
36856: PUSH
36857: LD_INT 1
36859: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36860: LD_VAR 0 6
36864: PPUSH
36865: CALL_OW 247
36869: PUSH
36870: LD_INT 1
36872: DOUBLE
36873: EQUAL
36874: IFTRUE 36878
36876: GO 37456
36878: POP
// begin if GetClass ( i ) = 1 then
36879: LD_VAR 0 6
36883: PPUSH
36884: CALL_OW 257
36888: PUSH
36889: LD_INT 1
36891: EQUAL
36892: IFFALSE 36913
// points := [ 10 , 5 , 3 ] ;
36894: LD_ADDR_VAR 0 9
36898: PUSH
36899: LD_INT 10
36901: PUSH
36902: LD_INT 5
36904: PUSH
36905: LD_INT 3
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: LIST
36912: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36913: LD_VAR 0 6
36917: PPUSH
36918: CALL_OW 257
36922: PUSH
36923: LD_INT 2
36925: PUSH
36926: LD_INT 3
36928: PUSH
36929: LD_INT 4
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: LIST
36936: IN
36937: IFFALSE 36958
// points := [ 3 , 2 , 1 ] ;
36939: LD_ADDR_VAR 0 9
36943: PUSH
36944: LD_INT 3
36946: PUSH
36947: LD_INT 2
36949: PUSH
36950: LD_INT 1
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: LIST
36957: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36958: LD_VAR 0 6
36962: PPUSH
36963: CALL_OW 257
36967: PUSH
36968: LD_INT 5
36970: EQUAL
36971: IFFALSE 36992
// points := [ 130 , 5 , 2 ] ;
36973: LD_ADDR_VAR 0 9
36977: PUSH
36978: LD_INT 130
36980: PUSH
36981: LD_INT 5
36983: PUSH
36984: LD_INT 2
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: LIST
36991: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36992: LD_VAR 0 6
36996: PPUSH
36997: CALL_OW 257
37001: PUSH
37002: LD_INT 8
37004: EQUAL
37005: IFFALSE 37026
// points := [ 35 , 35 , 30 ] ;
37007: LD_ADDR_VAR 0 9
37011: PUSH
37012: LD_INT 35
37014: PUSH
37015: LD_INT 35
37017: PUSH
37018: LD_INT 30
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: LIST
37025: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37026: LD_VAR 0 6
37030: PPUSH
37031: CALL_OW 257
37035: PUSH
37036: LD_INT 9
37038: EQUAL
37039: IFFALSE 37060
// points := [ 20 , 55 , 40 ] ;
37041: LD_ADDR_VAR 0 9
37045: PUSH
37046: LD_INT 20
37048: PUSH
37049: LD_INT 55
37051: PUSH
37052: LD_INT 40
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: LIST
37059: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37060: LD_VAR 0 6
37064: PPUSH
37065: CALL_OW 257
37069: PUSH
37070: LD_INT 12
37072: PUSH
37073: LD_INT 16
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: IN
37080: IFFALSE 37101
// points := [ 5 , 3 , 2 ] ;
37082: LD_ADDR_VAR 0 9
37086: PUSH
37087: LD_INT 5
37089: PUSH
37090: LD_INT 3
37092: PUSH
37093: LD_INT 2
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: LIST
37100: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37101: LD_VAR 0 6
37105: PPUSH
37106: CALL_OW 257
37110: PUSH
37111: LD_INT 17
37113: EQUAL
37114: IFFALSE 37135
// points := [ 100 , 50 , 75 ] ;
37116: LD_ADDR_VAR 0 9
37120: PUSH
37121: LD_INT 100
37123: PUSH
37124: LD_INT 50
37126: PUSH
37127: LD_INT 75
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: LIST
37134: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37135: LD_VAR 0 6
37139: PPUSH
37140: CALL_OW 257
37144: PUSH
37145: LD_INT 15
37147: EQUAL
37148: IFFALSE 37169
// points := [ 10 , 5 , 3 ] ;
37150: LD_ADDR_VAR 0 9
37154: PUSH
37155: LD_INT 10
37157: PUSH
37158: LD_INT 5
37160: PUSH
37161: LD_INT 3
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: LIST
37168: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37169: LD_VAR 0 6
37173: PPUSH
37174: CALL_OW 257
37178: PUSH
37179: LD_INT 14
37181: EQUAL
37182: IFFALSE 37203
// points := [ 10 , 0 , 0 ] ;
37184: LD_ADDR_VAR 0 9
37188: PUSH
37189: LD_INT 10
37191: PUSH
37192: LD_INT 0
37194: PUSH
37195: LD_INT 0
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: LIST
37202: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37203: LD_VAR 0 6
37207: PPUSH
37208: CALL_OW 257
37212: PUSH
37213: LD_INT 11
37215: EQUAL
37216: IFFALSE 37237
// points := [ 30 , 10 , 5 ] ;
37218: LD_ADDR_VAR 0 9
37222: PUSH
37223: LD_INT 30
37225: PUSH
37226: LD_INT 10
37228: PUSH
37229: LD_INT 5
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: LIST
37236: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37237: LD_VAR 0 1
37241: PPUSH
37242: LD_INT 5
37244: PPUSH
37245: CALL_OW 321
37249: PUSH
37250: LD_INT 2
37252: EQUAL
37253: IFFALSE 37270
// bpoints := bpoints * 1.8 ;
37255: LD_ADDR_VAR 0 10
37259: PUSH
37260: LD_VAR 0 10
37264: PUSH
37265: LD_REAL  1.80000000000000E+0000
37268: MUL
37269: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37270: LD_VAR 0 6
37274: PPUSH
37275: CALL_OW 257
37279: PUSH
37280: LD_INT 1
37282: PUSH
37283: LD_INT 2
37285: PUSH
37286: LD_INT 3
37288: PUSH
37289: LD_INT 4
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: IN
37298: PUSH
37299: LD_VAR 0 1
37303: PPUSH
37304: LD_INT 51
37306: PPUSH
37307: CALL_OW 321
37311: PUSH
37312: LD_INT 2
37314: EQUAL
37315: AND
37316: IFFALSE 37333
// bpoints := bpoints * 1.2 ;
37318: LD_ADDR_VAR 0 10
37322: PUSH
37323: LD_VAR 0 10
37327: PUSH
37328: LD_REAL  1.20000000000000E+0000
37331: MUL
37332: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37333: LD_VAR 0 6
37337: PPUSH
37338: CALL_OW 257
37342: PUSH
37343: LD_INT 5
37345: PUSH
37346: LD_INT 7
37348: PUSH
37349: LD_INT 9
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: LIST
37356: IN
37357: PUSH
37358: LD_VAR 0 1
37362: PPUSH
37363: LD_INT 52
37365: PPUSH
37366: CALL_OW 321
37370: PUSH
37371: LD_INT 2
37373: EQUAL
37374: AND
37375: IFFALSE 37392
// bpoints := bpoints * 1.5 ;
37377: LD_ADDR_VAR 0 10
37381: PUSH
37382: LD_VAR 0 10
37386: PUSH
37387: LD_REAL  1.50000000000000E+0000
37390: MUL
37391: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37392: LD_VAR 0 1
37396: PPUSH
37397: LD_INT 66
37399: PPUSH
37400: CALL_OW 321
37404: PUSH
37405: LD_INT 2
37407: EQUAL
37408: IFFALSE 37425
// bpoints := bpoints * 1.1 ;
37410: LD_ADDR_VAR 0 10
37414: PUSH
37415: LD_VAR 0 10
37419: PUSH
37420: LD_REAL  1.10000000000000E+0000
37423: MUL
37424: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37425: LD_ADDR_VAR 0 10
37429: PUSH
37430: LD_VAR 0 10
37434: PUSH
37435: LD_VAR 0 6
37439: PPUSH
37440: LD_INT 1
37442: PPUSH
37443: CALL_OW 259
37447: PUSH
37448: LD_REAL  1.15000000000000E+0000
37451: MUL
37452: MUL
37453: ST_TO_ADDR
// end ; unit_vehicle :
37454: GO 38282
37456: LD_INT 2
37458: DOUBLE
37459: EQUAL
37460: IFTRUE 37464
37462: GO 38270
37464: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37465: LD_VAR 0 6
37469: PPUSH
37470: CALL_OW 264
37474: PUSH
37475: LD_INT 2
37477: PUSH
37478: LD_INT 42
37480: PUSH
37481: LD_INT 24
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: LIST
37488: IN
37489: IFFALSE 37510
// points := [ 25 , 5 , 3 ] ;
37491: LD_ADDR_VAR 0 9
37495: PUSH
37496: LD_INT 25
37498: PUSH
37499: LD_INT 5
37501: PUSH
37502: LD_INT 3
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: LIST
37509: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37510: LD_VAR 0 6
37514: PPUSH
37515: CALL_OW 264
37519: PUSH
37520: LD_INT 4
37522: PUSH
37523: LD_INT 43
37525: PUSH
37526: LD_INT 25
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: LIST
37533: IN
37534: IFFALSE 37555
// points := [ 40 , 15 , 5 ] ;
37536: LD_ADDR_VAR 0 9
37540: PUSH
37541: LD_INT 40
37543: PUSH
37544: LD_INT 15
37546: PUSH
37547: LD_INT 5
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: LIST
37554: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37555: LD_VAR 0 6
37559: PPUSH
37560: CALL_OW 264
37564: PUSH
37565: LD_INT 3
37567: PUSH
37568: LD_INT 23
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: IN
37575: IFFALSE 37596
// points := [ 7 , 25 , 8 ] ;
37577: LD_ADDR_VAR 0 9
37581: PUSH
37582: LD_INT 7
37584: PUSH
37585: LD_INT 25
37587: PUSH
37588: LD_INT 8
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: LIST
37595: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37596: LD_VAR 0 6
37600: PPUSH
37601: CALL_OW 264
37605: PUSH
37606: LD_INT 5
37608: PUSH
37609: LD_INT 27
37611: PUSH
37612: LD_INT 44
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: LIST
37619: IN
37620: IFFALSE 37641
// points := [ 14 , 50 , 16 ] ;
37622: LD_ADDR_VAR 0 9
37626: PUSH
37627: LD_INT 14
37629: PUSH
37630: LD_INT 50
37632: PUSH
37633: LD_INT 16
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: LIST
37640: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37641: LD_VAR 0 6
37645: PPUSH
37646: CALL_OW 264
37650: PUSH
37651: LD_INT 6
37653: PUSH
37654: LD_INT 46
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: IN
37661: IFFALSE 37682
// points := [ 32 , 120 , 70 ] ;
37663: LD_ADDR_VAR 0 9
37667: PUSH
37668: LD_INT 32
37670: PUSH
37671: LD_INT 120
37673: PUSH
37674: LD_INT 70
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: LIST
37681: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37682: LD_VAR 0 6
37686: PPUSH
37687: CALL_OW 264
37691: PUSH
37692: LD_INT 7
37694: PUSH
37695: LD_INT 28
37697: PUSH
37698: LD_INT 45
37700: PUSH
37701: LD_INT 92
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: IN
37710: IFFALSE 37731
// points := [ 35 , 20 , 45 ] ;
37712: LD_ADDR_VAR 0 9
37716: PUSH
37717: LD_INT 35
37719: PUSH
37720: LD_INT 20
37722: PUSH
37723: LD_INT 45
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: LIST
37730: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37731: LD_VAR 0 6
37735: PPUSH
37736: CALL_OW 264
37740: PUSH
37741: LD_INT 47
37743: PUSH
37744: EMPTY
37745: LIST
37746: IN
37747: IFFALSE 37768
// points := [ 67 , 45 , 75 ] ;
37749: LD_ADDR_VAR 0 9
37753: PUSH
37754: LD_INT 67
37756: PUSH
37757: LD_INT 45
37759: PUSH
37760: LD_INT 75
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: LIST
37767: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37768: LD_VAR 0 6
37772: PPUSH
37773: CALL_OW 264
37777: PUSH
37778: LD_INT 26
37780: PUSH
37781: EMPTY
37782: LIST
37783: IN
37784: IFFALSE 37805
// points := [ 120 , 30 , 80 ] ;
37786: LD_ADDR_VAR 0 9
37790: PUSH
37791: LD_INT 120
37793: PUSH
37794: LD_INT 30
37796: PUSH
37797: LD_INT 80
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: LIST
37804: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37805: LD_VAR 0 6
37809: PPUSH
37810: CALL_OW 264
37814: PUSH
37815: LD_INT 22
37817: PUSH
37818: EMPTY
37819: LIST
37820: IN
37821: IFFALSE 37842
// points := [ 40 , 1 , 1 ] ;
37823: LD_ADDR_VAR 0 9
37827: PUSH
37828: LD_INT 40
37830: PUSH
37831: LD_INT 1
37833: PUSH
37834: LD_INT 1
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: LIST
37841: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37842: LD_VAR 0 6
37846: PPUSH
37847: CALL_OW 264
37851: PUSH
37852: LD_INT 29
37854: PUSH
37855: EMPTY
37856: LIST
37857: IN
37858: IFFALSE 37879
// points := [ 70 , 200 , 400 ] ;
37860: LD_ADDR_VAR 0 9
37864: PUSH
37865: LD_INT 70
37867: PUSH
37868: LD_INT 200
37870: PUSH
37871: LD_INT 400
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: LIST
37878: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37879: LD_VAR 0 6
37883: PPUSH
37884: CALL_OW 264
37888: PUSH
37889: LD_INT 14
37891: PUSH
37892: LD_INT 53
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: IN
37899: IFFALSE 37920
// points := [ 40 , 10 , 20 ] ;
37901: LD_ADDR_VAR 0 9
37905: PUSH
37906: LD_INT 40
37908: PUSH
37909: LD_INT 10
37911: PUSH
37912: LD_INT 20
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: LIST
37919: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37920: LD_VAR 0 6
37924: PPUSH
37925: CALL_OW 264
37929: PUSH
37930: LD_INT 9
37932: PUSH
37933: EMPTY
37934: LIST
37935: IN
37936: IFFALSE 37957
// points := [ 5 , 70 , 20 ] ;
37938: LD_ADDR_VAR 0 9
37942: PUSH
37943: LD_INT 5
37945: PUSH
37946: LD_INT 70
37948: PUSH
37949: LD_INT 20
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: LIST
37956: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37957: LD_VAR 0 6
37961: PPUSH
37962: CALL_OW 264
37966: PUSH
37967: LD_INT 10
37969: PUSH
37970: EMPTY
37971: LIST
37972: IN
37973: IFFALSE 37994
// points := [ 35 , 110 , 70 ] ;
37975: LD_ADDR_VAR 0 9
37979: PUSH
37980: LD_INT 35
37982: PUSH
37983: LD_INT 110
37985: PUSH
37986: LD_INT 70
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: LIST
37993: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37994: LD_VAR 0 6
37998: PPUSH
37999: CALL_OW 265
38003: PUSH
38004: LD_INT 25
38006: EQUAL
38007: IFFALSE 38028
// points := [ 80 , 65 , 100 ] ;
38009: LD_ADDR_VAR 0 9
38013: PUSH
38014: LD_INT 80
38016: PUSH
38017: LD_INT 65
38019: PUSH
38020: LD_INT 100
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: LIST
38027: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38028: LD_VAR 0 6
38032: PPUSH
38033: CALL_OW 263
38037: PUSH
38038: LD_INT 1
38040: EQUAL
38041: IFFALSE 38076
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38043: LD_ADDR_VAR 0 10
38047: PUSH
38048: LD_VAR 0 10
38052: PUSH
38053: LD_VAR 0 6
38057: PPUSH
38058: CALL_OW 311
38062: PPUSH
38063: LD_INT 3
38065: PPUSH
38066: CALL_OW 259
38070: PUSH
38071: LD_INT 4
38073: MUL
38074: MUL
38075: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38076: LD_VAR 0 6
38080: PPUSH
38081: CALL_OW 263
38085: PUSH
38086: LD_INT 2
38088: EQUAL
38089: IFFALSE 38140
// begin j := IsControledBy ( i ) ;
38091: LD_ADDR_VAR 0 7
38095: PUSH
38096: LD_VAR 0 6
38100: PPUSH
38101: CALL_OW 312
38105: ST_TO_ADDR
// if j then
38106: LD_VAR 0 7
38110: IFFALSE 38140
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38112: LD_ADDR_VAR 0 10
38116: PUSH
38117: LD_VAR 0 10
38121: PUSH
38122: LD_VAR 0 7
38126: PPUSH
38127: LD_INT 3
38129: PPUSH
38130: CALL_OW 259
38134: PUSH
38135: LD_INT 3
38137: MUL
38138: MUL
38139: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38140: LD_VAR 0 6
38144: PPUSH
38145: CALL_OW 264
38149: PUSH
38150: LD_INT 5
38152: PUSH
38153: LD_INT 6
38155: PUSH
38156: LD_INT 46
38158: PUSH
38159: LD_INT 44
38161: PUSH
38162: LD_INT 47
38164: PUSH
38165: LD_INT 45
38167: PUSH
38168: LD_INT 28
38170: PUSH
38171: LD_INT 7
38173: PUSH
38174: LD_INT 27
38176: PUSH
38177: LD_INT 29
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: IN
38192: PUSH
38193: LD_VAR 0 1
38197: PPUSH
38198: LD_INT 52
38200: PPUSH
38201: CALL_OW 321
38205: PUSH
38206: LD_INT 2
38208: EQUAL
38209: AND
38210: IFFALSE 38227
// bpoints := bpoints * 1.2 ;
38212: LD_ADDR_VAR 0 10
38216: PUSH
38217: LD_VAR 0 10
38221: PUSH
38222: LD_REAL  1.20000000000000E+0000
38225: MUL
38226: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38227: LD_VAR 0 6
38231: PPUSH
38232: CALL_OW 264
38236: PUSH
38237: LD_INT 6
38239: PUSH
38240: LD_INT 46
38242: PUSH
38243: LD_INT 47
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: LIST
38250: IN
38251: IFFALSE 38268
// bpoints := bpoints * 1.2 ;
38253: LD_ADDR_VAR 0 10
38257: PUSH
38258: LD_VAR 0 10
38262: PUSH
38263: LD_REAL  1.20000000000000E+0000
38266: MUL
38267: ST_TO_ADDR
// end ; unit_building :
38268: GO 38282
38270: LD_INT 3
38272: DOUBLE
38273: EQUAL
38274: IFTRUE 38278
38276: GO 38281
38278: POP
// ; end ;
38279: GO 38282
38281: POP
// for j = 1 to 3 do
38282: LD_ADDR_VAR 0 7
38286: PUSH
38287: DOUBLE
38288: LD_INT 1
38290: DEC
38291: ST_TO_ADDR
38292: LD_INT 3
38294: PUSH
38295: FOR_TO
38296: IFFALSE 38349
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38298: LD_ADDR_VAR 0 5
38302: PUSH
38303: LD_VAR 0 5
38307: PPUSH
38308: LD_VAR 0 7
38312: PPUSH
38313: LD_VAR 0 5
38317: PUSH
38318: LD_VAR 0 7
38322: ARRAY
38323: PUSH
38324: LD_VAR 0 9
38328: PUSH
38329: LD_VAR 0 7
38333: ARRAY
38334: PUSH
38335: LD_VAR 0 10
38339: MUL
38340: PLUS
38341: PPUSH
38342: CALL_OW 1
38346: ST_TO_ADDR
38347: GO 38295
38349: POP
38350: POP
// end ;
38351: GO 36830
38353: POP
38354: POP
// result := Replace ( result , 4 , tmp ) ;
38355: LD_ADDR_VAR 0 5
38359: PUSH
38360: LD_VAR 0 5
38364: PPUSH
38365: LD_INT 4
38367: PPUSH
38368: LD_VAR 0 8
38372: PPUSH
38373: CALL_OW 1
38377: ST_TO_ADDR
// end ;
38378: LD_VAR 0 5
38382: RET
// export function DangerAtRange ( unit , range ) ; begin
38383: LD_INT 0
38385: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38386: LD_ADDR_VAR 0 3
38390: PUSH
38391: LD_VAR 0 1
38395: PPUSH
38396: CALL_OW 255
38400: PPUSH
38401: LD_VAR 0 1
38405: PPUSH
38406: CALL_OW 250
38410: PPUSH
38411: LD_VAR 0 1
38415: PPUSH
38416: CALL_OW 251
38420: PPUSH
38421: LD_VAR 0 2
38425: PPUSH
38426: CALL 36682 0 4
38430: ST_TO_ADDR
// end ;
38431: LD_VAR 0 3
38435: RET
// export function DangerInArea ( side , area ) ; begin
38436: LD_INT 0
38438: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38439: LD_ADDR_VAR 0 3
38443: PUSH
38444: LD_VAR 0 2
38448: PPUSH
38449: LD_INT 81
38451: PUSH
38452: LD_VAR 0 1
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PPUSH
38461: CALL_OW 70
38465: ST_TO_ADDR
// end ;
38466: LD_VAR 0 3
38470: RET
// export function IsExtension ( b ) ; begin
38471: LD_INT 0
38473: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38474: LD_ADDR_VAR 0 2
38478: PUSH
38479: LD_VAR 0 1
38483: PUSH
38484: LD_INT 23
38486: PUSH
38487: LD_INT 20
38489: PUSH
38490: LD_INT 22
38492: PUSH
38493: LD_INT 17
38495: PUSH
38496: LD_INT 24
38498: PUSH
38499: LD_INT 21
38501: PUSH
38502: LD_INT 19
38504: PUSH
38505: LD_INT 16
38507: PUSH
38508: LD_INT 25
38510: PUSH
38511: LD_INT 18
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: LIST
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: IN
38526: ST_TO_ADDR
// end ;
38527: LD_VAR 0 2
38531: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38532: LD_INT 0
38534: PPUSH
38535: PPUSH
38536: PPUSH
// result := [ ] ;
38537: LD_ADDR_VAR 0 4
38541: PUSH
38542: EMPTY
38543: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38544: LD_ADDR_VAR 0 5
38548: PUSH
38549: LD_VAR 0 2
38553: PPUSH
38554: LD_INT 21
38556: PUSH
38557: LD_INT 3
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PPUSH
38564: CALL_OW 70
38568: ST_TO_ADDR
// if not tmp then
38569: LD_VAR 0 5
38573: NOT
38574: IFFALSE 38578
// exit ;
38576: GO 38642
// if checkLink then
38578: LD_VAR 0 3
38582: IFFALSE 38632
// begin for i in tmp do
38584: LD_ADDR_VAR 0 6
38588: PUSH
38589: LD_VAR 0 5
38593: PUSH
38594: FOR_IN
38595: IFFALSE 38630
// if GetBase ( i ) <> base then
38597: LD_VAR 0 6
38601: PPUSH
38602: CALL_OW 274
38606: PUSH
38607: LD_VAR 0 1
38611: NONEQUAL
38612: IFFALSE 38628
// ComLinkToBase ( base , i ) ;
38614: LD_VAR 0 1
38618: PPUSH
38619: LD_VAR 0 6
38623: PPUSH
38624: CALL_OW 169
38628: GO 38594
38630: POP
38631: POP
// end ; result := tmp ;
38632: LD_ADDR_VAR 0 4
38636: PUSH
38637: LD_VAR 0 5
38641: ST_TO_ADDR
// end ;
38642: LD_VAR 0 4
38646: RET
// export function ComComplete ( units , b ) ; var i ; begin
38647: LD_INT 0
38649: PPUSH
38650: PPUSH
// if not units then
38651: LD_VAR 0 1
38655: NOT
38656: IFFALSE 38660
// exit ;
38658: GO 38750
// for i in units do
38660: LD_ADDR_VAR 0 4
38664: PUSH
38665: LD_VAR 0 1
38669: PUSH
38670: FOR_IN
38671: IFFALSE 38748
// if BuildingStatus ( b ) = bs_build then
38673: LD_VAR 0 2
38677: PPUSH
38678: CALL_OW 461
38682: PUSH
38683: LD_INT 1
38685: EQUAL
38686: IFFALSE 38746
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38688: LD_VAR 0 4
38692: PPUSH
38693: LD_STRING h
38695: PUSH
38696: LD_VAR 0 2
38700: PPUSH
38701: CALL_OW 250
38705: PUSH
38706: LD_VAR 0 2
38710: PPUSH
38711: CALL_OW 251
38715: PUSH
38716: LD_VAR 0 2
38720: PUSH
38721: LD_INT 0
38723: PUSH
38724: LD_INT 0
38726: PUSH
38727: LD_INT 0
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: PUSH
38739: EMPTY
38740: LIST
38741: PPUSH
38742: CALL_OW 446
38746: GO 38670
38748: POP
38749: POP
// end ;
38750: LD_VAR 0 3
38754: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38755: LD_INT 0
38757: PPUSH
38758: PPUSH
38759: PPUSH
38760: PPUSH
38761: PPUSH
38762: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38763: LD_VAR 0 1
38767: NOT
38768: PUSH
38769: LD_VAR 0 1
38773: PPUSH
38774: CALL_OW 263
38778: PUSH
38779: LD_INT 2
38781: NONEQUAL
38782: OR
38783: IFFALSE 38787
// exit ;
38785: GO 39103
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38787: LD_ADDR_VAR 0 6
38791: PUSH
38792: LD_INT 22
38794: PUSH
38795: LD_VAR 0 1
38799: PPUSH
38800: CALL_OW 255
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 2
38811: PUSH
38812: LD_INT 30
38814: PUSH
38815: LD_INT 36
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 34
38824: PUSH
38825: LD_INT 31
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: LIST
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PPUSH
38841: CALL_OW 69
38845: ST_TO_ADDR
// if not tmp then
38846: LD_VAR 0 6
38850: NOT
38851: IFFALSE 38855
// exit ;
38853: GO 39103
// result := [ ] ;
38855: LD_ADDR_VAR 0 2
38859: PUSH
38860: EMPTY
38861: ST_TO_ADDR
// for i in tmp do
38862: LD_ADDR_VAR 0 3
38866: PUSH
38867: LD_VAR 0 6
38871: PUSH
38872: FOR_IN
38873: IFFALSE 38944
// begin t := UnitsInside ( i ) ;
38875: LD_ADDR_VAR 0 4
38879: PUSH
38880: LD_VAR 0 3
38884: PPUSH
38885: CALL_OW 313
38889: ST_TO_ADDR
// if t then
38890: LD_VAR 0 4
38894: IFFALSE 38942
// for j in t do
38896: LD_ADDR_VAR 0 7
38900: PUSH
38901: LD_VAR 0 4
38905: PUSH
38906: FOR_IN
38907: IFFALSE 38940
// result := Replace ( result , result + 1 , j ) ;
38909: LD_ADDR_VAR 0 2
38913: PUSH
38914: LD_VAR 0 2
38918: PPUSH
38919: LD_VAR 0 2
38923: PUSH
38924: LD_INT 1
38926: PLUS
38927: PPUSH
38928: LD_VAR 0 7
38932: PPUSH
38933: CALL_OW 1
38937: ST_TO_ADDR
38938: GO 38906
38940: POP
38941: POP
// end ;
38942: GO 38872
38944: POP
38945: POP
// if not result then
38946: LD_VAR 0 2
38950: NOT
38951: IFFALSE 38955
// exit ;
38953: GO 39103
// mech := result [ 1 ] ;
38955: LD_ADDR_VAR 0 5
38959: PUSH
38960: LD_VAR 0 2
38964: PUSH
38965: LD_INT 1
38967: ARRAY
38968: ST_TO_ADDR
// if result > 1 then
38969: LD_VAR 0 2
38973: PUSH
38974: LD_INT 1
38976: GREATER
38977: IFFALSE 39089
// begin for i = 2 to result do
38979: LD_ADDR_VAR 0 3
38983: PUSH
38984: DOUBLE
38985: LD_INT 2
38987: DEC
38988: ST_TO_ADDR
38989: LD_VAR 0 2
38993: PUSH
38994: FOR_TO
38995: IFFALSE 39087
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38997: LD_ADDR_VAR 0 4
39001: PUSH
39002: LD_VAR 0 2
39006: PUSH
39007: LD_VAR 0 3
39011: ARRAY
39012: PPUSH
39013: LD_INT 3
39015: PPUSH
39016: CALL_OW 259
39020: PUSH
39021: LD_VAR 0 2
39025: PUSH
39026: LD_VAR 0 3
39030: ARRAY
39031: PPUSH
39032: CALL_OW 432
39036: MINUS
39037: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39038: LD_VAR 0 4
39042: PUSH
39043: LD_VAR 0 5
39047: PPUSH
39048: LD_INT 3
39050: PPUSH
39051: CALL_OW 259
39055: PUSH
39056: LD_VAR 0 5
39060: PPUSH
39061: CALL_OW 432
39065: MINUS
39066: GREATEREQUAL
39067: IFFALSE 39085
// mech := result [ i ] ;
39069: LD_ADDR_VAR 0 5
39073: PUSH
39074: LD_VAR 0 2
39078: PUSH
39079: LD_VAR 0 3
39083: ARRAY
39084: ST_TO_ADDR
// end ;
39085: GO 38994
39087: POP
39088: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39089: LD_VAR 0 1
39093: PPUSH
39094: LD_VAR 0 5
39098: PPUSH
39099: CALL_OW 135
// end ;
39103: LD_VAR 0 2
39107: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39108: LD_INT 0
39110: PPUSH
39111: PPUSH
39112: PPUSH
39113: PPUSH
39114: PPUSH
39115: PPUSH
39116: PPUSH
39117: PPUSH
39118: PPUSH
39119: PPUSH
39120: PPUSH
39121: PPUSH
39122: PPUSH
// result := [ ] ;
39123: LD_ADDR_VAR 0 7
39127: PUSH
39128: EMPTY
39129: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39130: LD_VAR 0 1
39134: PPUSH
39135: CALL_OW 266
39139: PUSH
39140: LD_INT 0
39142: PUSH
39143: LD_INT 1
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: IN
39150: NOT
39151: IFFALSE 39155
// exit ;
39153: GO 40789
// if name then
39155: LD_VAR 0 3
39159: IFFALSE 39175
// SetBName ( base_dep , name ) ;
39161: LD_VAR 0 1
39165: PPUSH
39166: LD_VAR 0 3
39170: PPUSH
39171: CALL_OW 500
// base := GetBase ( base_dep ) ;
39175: LD_ADDR_VAR 0 15
39179: PUSH
39180: LD_VAR 0 1
39184: PPUSH
39185: CALL_OW 274
39189: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39190: LD_ADDR_VAR 0 16
39194: PUSH
39195: LD_VAR 0 1
39199: PPUSH
39200: CALL_OW 255
39204: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39205: LD_ADDR_VAR 0 17
39209: PUSH
39210: LD_VAR 0 1
39214: PPUSH
39215: CALL_OW 248
39219: ST_TO_ADDR
// if sources then
39220: LD_VAR 0 5
39224: IFFALSE 39271
// for i = 1 to 3 do
39226: LD_ADDR_VAR 0 8
39230: PUSH
39231: DOUBLE
39232: LD_INT 1
39234: DEC
39235: ST_TO_ADDR
39236: LD_INT 3
39238: PUSH
39239: FOR_TO
39240: IFFALSE 39269
// AddResourceType ( base , i , sources [ i ] ) ;
39242: LD_VAR 0 15
39246: PPUSH
39247: LD_VAR 0 8
39251: PPUSH
39252: LD_VAR 0 5
39256: PUSH
39257: LD_VAR 0 8
39261: ARRAY
39262: PPUSH
39263: CALL_OW 276
39267: GO 39239
39269: POP
39270: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39271: LD_ADDR_VAR 0 18
39275: PUSH
39276: LD_VAR 0 15
39280: PPUSH
39281: LD_VAR 0 2
39285: PPUSH
39286: LD_INT 1
39288: PPUSH
39289: CALL 38532 0 3
39293: ST_TO_ADDR
// InitHc ;
39294: CALL_OW 19
// InitUc ;
39298: CALL_OW 18
// uc_side := side ;
39302: LD_ADDR_OWVAR 20
39306: PUSH
39307: LD_VAR 0 16
39311: ST_TO_ADDR
// uc_nation := nation ;
39312: LD_ADDR_OWVAR 21
39316: PUSH
39317: LD_VAR 0 17
39321: ST_TO_ADDR
// if buildings then
39322: LD_VAR 0 18
39326: IFFALSE 40648
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39328: LD_ADDR_VAR 0 19
39332: PUSH
39333: LD_VAR 0 18
39337: PPUSH
39338: LD_INT 2
39340: PUSH
39341: LD_INT 30
39343: PUSH
39344: LD_INT 29
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 30
39353: PUSH
39354: LD_INT 30
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: LIST
39365: PPUSH
39366: CALL_OW 72
39370: ST_TO_ADDR
// if tmp then
39371: LD_VAR 0 19
39375: IFFALSE 39423
// for i in tmp do
39377: LD_ADDR_VAR 0 8
39381: PUSH
39382: LD_VAR 0 19
39386: PUSH
39387: FOR_IN
39388: IFFALSE 39421
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39390: LD_VAR 0 8
39394: PPUSH
39395: CALL_OW 250
39399: PPUSH
39400: LD_VAR 0 8
39404: PPUSH
39405: CALL_OW 251
39409: PPUSH
39410: LD_VAR 0 16
39414: PPUSH
39415: CALL_OW 441
39419: GO 39387
39421: POP
39422: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39423: LD_VAR 0 18
39427: PPUSH
39428: LD_INT 2
39430: PUSH
39431: LD_INT 30
39433: PUSH
39434: LD_INT 32
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 30
39443: PUSH
39444: LD_INT 33
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: LIST
39455: PPUSH
39456: CALL_OW 72
39460: IFFALSE 39548
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39462: LD_ADDR_VAR 0 8
39466: PUSH
39467: LD_VAR 0 18
39471: PPUSH
39472: LD_INT 2
39474: PUSH
39475: LD_INT 30
39477: PUSH
39478: LD_INT 32
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 30
39487: PUSH
39488: LD_INT 33
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: LIST
39499: PPUSH
39500: CALL_OW 72
39504: PUSH
39505: FOR_IN
39506: IFFALSE 39546
// begin if not GetBWeapon ( i ) then
39508: LD_VAR 0 8
39512: PPUSH
39513: CALL_OW 269
39517: NOT
39518: IFFALSE 39544
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39520: LD_VAR 0 8
39524: PPUSH
39525: LD_VAR 0 8
39529: PPUSH
39530: LD_VAR 0 2
39534: PPUSH
39535: CALL 40794 0 2
39539: PPUSH
39540: CALL_OW 431
// end ;
39544: GO 39505
39546: POP
39547: POP
// end ; for i = 1 to personel do
39548: LD_ADDR_VAR 0 8
39552: PUSH
39553: DOUBLE
39554: LD_INT 1
39556: DEC
39557: ST_TO_ADDR
39558: LD_VAR 0 6
39562: PUSH
39563: FOR_TO
39564: IFFALSE 40628
// begin if i > 4 then
39566: LD_VAR 0 8
39570: PUSH
39571: LD_INT 4
39573: GREATER
39574: IFFALSE 39578
// break ;
39576: GO 40628
// case i of 1 :
39578: LD_VAR 0 8
39582: PUSH
39583: LD_INT 1
39585: DOUBLE
39586: EQUAL
39587: IFTRUE 39591
39589: GO 39671
39591: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39592: LD_ADDR_VAR 0 12
39596: PUSH
39597: LD_VAR 0 18
39601: PPUSH
39602: LD_INT 22
39604: PUSH
39605: LD_VAR 0 16
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 58
39616: PUSH
39617: EMPTY
39618: LIST
39619: PUSH
39620: LD_INT 2
39622: PUSH
39623: LD_INT 30
39625: PUSH
39626: LD_INT 32
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 30
39635: PUSH
39636: LD_INT 4
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 30
39645: PUSH
39646: LD_INT 5
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: LIST
39663: PPUSH
39664: CALL_OW 72
39668: ST_TO_ADDR
39669: GO 39893
39671: LD_INT 2
39673: DOUBLE
39674: EQUAL
39675: IFTRUE 39679
39677: GO 39741
39679: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39680: LD_ADDR_VAR 0 12
39684: PUSH
39685: LD_VAR 0 18
39689: PPUSH
39690: LD_INT 22
39692: PUSH
39693: LD_VAR 0 16
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 2
39704: PUSH
39705: LD_INT 30
39707: PUSH
39708: LD_INT 0
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 30
39717: PUSH
39718: LD_INT 1
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: LIST
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PPUSH
39734: CALL_OW 72
39738: ST_TO_ADDR
39739: GO 39893
39741: LD_INT 3
39743: DOUBLE
39744: EQUAL
39745: IFTRUE 39749
39747: GO 39811
39749: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39750: LD_ADDR_VAR 0 12
39754: PUSH
39755: LD_VAR 0 18
39759: PPUSH
39760: LD_INT 22
39762: PUSH
39763: LD_VAR 0 16
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 2
39774: PUSH
39775: LD_INT 30
39777: PUSH
39778: LD_INT 2
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 30
39787: PUSH
39788: LD_INT 3
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: LIST
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PPUSH
39804: CALL_OW 72
39808: ST_TO_ADDR
39809: GO 39893
39811: LD_INT 4
39813: DOUBLE
39814: EQUAL
39815: IFTRUE 39819
39817: GO 39892
39819: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39820: LD_ADDR_VAR 0 12
39824: PUSH
39825: LD_VAR 0 18
39829: PPUSH
39830: LD_INT 22
39832: PUSH
39833: LD_VAR 0 16
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 2
39844: PUSH
39845: LD_INT 30
39847: PUSH
39848: LD_INT 6
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 30
39857: PUSH
39858: LD_INT 7
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 30
39867: PUSH
39868: LD_INT 8
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PPUSH
39885: CALL_OW 72
39889: ST_TO_ADDR
39890: GO 39893
39892: POP
// if i = 1 then
39893: LD_VAR 0 8
39897: PUSH
39898: LD_INT 1
39900: EQUAL
39901: IFFALSE 40012
// begin tmp := [ ] ;
39903: LD_ADDR_VAR 0 19
39907: PUSH
39908: EMPTY
39909: ST_TO_ADDR
// for j in f do
39910: LD_ADDR_VAR 0 9
39914: PUSH
39915: LD_VAR 0 12
39919: PUSH
39920: FOR_IN
39921: IFFALSE 39994
// if GetBType ( j ) = b_bunker then
39923: LD_VAR 0 9
39927: PPUSH
39928: CALL_OW 266
39932: PUSH
39933: LD_INT 32
39935: EQUAL
39936: IFFALSE 39963
// tmp := Insert ( tmp , 1 , j ) else
39938: LD_ADDR_VAR 0 19
39942: PUSH
39943: LD_VAR 0 19
39947: PPUSH
39948: LD_INT 1
39950: PPUSH
39951: LD_VAR 0 9
39955: PPUSH
39956: CALL_OW 2
39960: ST_TO_ADDR
39961: GO 39992
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39963: LD_ADDR_VAR 0 19
39967: PUSH
39968: LD_VAR 0 19
39972: PPUSH
39973: LD_VAR 0 19
39977: PUSH
39978: LD_INT 1
39980: PLUS
39981: PPUSH
39982: LD_VAR 0 9
39986: PPUSH
39987: CALL_OW 2
39991: ST_TO_ADDR
39992: GO 39920
39994: POP
39995: POP
// if tmp then
39996: LD_VAR 0 19
40000: IFFALSE 40012
// f := tmp ;
40002: LD_ADDR_VAR 0 12
40006: PUSH
40007: LD_VAR 0 19
40011: ST_TO_ADDR
// end ; x := personel [ i ] ;
40012: LD_ADDR_VAR 0 13
40016: PUSH
40017: LD_VAR 0 6
40021: PUSH
40022: LD_VAR 0 8
40026: ARRAY
40027: ST_TO_ADDR
// if x = - 1 then
40028: LD_VAR 0 13
40032: PUSH
40033: LD_INT 1
40035: NEG
40036: EQUAL
40037: IFFALSE 40246
// begin for j in f do
40039: LD_ADDR_VAR 0 9
40043: PUSH
40044: LD_VAR 0 12
40048: PUSH
40049: FOR_IN
40050: IFFALSE 40242
// repeat InitHc ;
40052: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40056: LD_VAR 0 9
40060: PPUSH
40061: CALL_OW 266
40065: PUSH
40066: LD_INT 5
40068: EQUAL
40069: IFFALSE 40139
// begin if UnitsInside ( j ) < 3 then
40071: LD_VAR 0 9
40075: PPUSH
40076: CALL_OW 313
40080: PUSH
40081: LD_INT 3
40083: LESS
40084: IFFALSE 40120
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40086: LD_INT 0
40088: PPUSH
40089: LD_INT 5
40091: PUSH
40092: LD_INT 8
40094: PUSH
40095: LD_INT 9
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: LIST
40102: PUSH
40103: LD_VAR 0 17
40107: ARRAY
40108: PPUSH
40109: LD_VAR 0 4
40113: PPUSH
40114: CALL_OW 380
40118: GO 40137
// PrepareHuman ( false , i , skill ) ;
40120: LD_INT 0
40122: PPUSH
40123: LD_VAR 0 8
40127: PPUSH
40128: LD_VAR 0 4
40132: PPUSH
40133: CALL_OW 380
// end else
40137: GO 40156
// PrepareHuman ( false , i , skill ) ;
40139: LD_INT 0
40141: PPUSH
40142: LD_VAR 0 8
40146: PPUSH
40147: LD_VAR 0 4
40151: PPUSH
40152: CALL_OW 380
// un := CreateHuman ;
40156: LD_ADDR_VAR 0 14
40160: PUSH
40161: CALL_OW 44
40165: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40166: LD_ADDR_VAR 0 7
40170: PUSH
40171: LD_VAR 0 7
40175: PPUSH
40176: LD_INT 1
40178: PPUSH
40179: LD_VAR 0 14
40183: PPUSH
40184: CALL_OW 2
40188: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40189: LD_VAR 0 14
40193: PPUSH
40194: LD_VAR 0 9
40198: PPUSH
40199: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40203: LD_VAR 0 9
40207: PPUSH
40208: CALL_OW 313
40212: PUSH
40213: LD_INT 6
40215: EQUAL
40216: PUSH
40217: LD_VAR 0 9
40221: PPUSH
40222: CALL_OW 266
40226: PUSH
40227: LD_INT 32
40229: PUSH
40230: LD_INT 31
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: IN
40237: OR
40238: IFFALSE 40052
40240: GO 40049
40242: POP
40243: POP
// end else
40244: GO 40626
// for j = 1 to x do
40246: LD_ADDR_VAR 0 9
40250: PUSH
40251: DOUBLE
40252: LD_INT 1
40254: DEC
40255: ST_TO_ADDR
40256: LD_VAR 0 13
40260: PUSH
40261: FOR_TO
40262: IFFALSE 40624
// begin InitHc ;
40264: CALL_OW 19
// if not f then
40268: LD_VAR 0 12
40272: NOT
40273: IFFALSE 40362
// begin PrepareHuman ( false , i , skill ) ;
40275: LD_INT 0
40277: PPUSH
40278: LD_VAR 0 8
40282: PPUSH
40283: LD_VAR 0 4
40287: PPUSH
40288: CALL_OW 380
// un := CreateHuman ;
40292: LD_ADDR_VAR 0 14
40296: PUSH
40297: CALL_OW 44
40301: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40302: LD_ADDR_VAR 0 7
40306: PUSH
40307: LD_VAR 0 7
40311: PPUSH
40312: LD_INT 1
40314: PPUSH
40315: LD_VAR 0 14
40319: PPUSH
40320: CALL_OW 2
40324: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40325: LD_VAR 0 14
40329: PPUSH
40330: LD_VAR 0 1
40334: PPUSH
40335: CALL_OW 250
40339: PPUSH
40340: LD_VAR 0 1
40344: PPUSH
40345: CALL_OW 251
40349: PPUSH
40350: LD_INT 10
40352: PPUSH
40353: LD_INT 0
40355: PPUSH
40356: CALL_OW 50
// continue ;
40360: GO 40261
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40362: LD_VAR 0 12
40366: PUSH
40367: LD_INT 1
40369: ARRAY
40370: PPUSH
40371: CALL_OW 313
40375: PUSH
40376: LD_VAR 0 12
40380: PUSH
40381: LD_INT 1
40383: ARRAY
40384: PPUSH
40385: CALL_OW 266
40389: PUSH
40390: LD_INT 32
40392: PUSH
40393: LD_INT 31
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: IN
40400: AND
40401: PUSH
40402: LD_VAR 0 12
40406: PUSH
40407: LD_INT 1
40409: ARRAY
40410: PPUSH
40411: CALL_OW 313
40415: PUSH
40416: LD_INT 6
40418: EQUAL
40419: OR
40420: IFFALSE 40440
// f := Delete ( f , 1 ) ;
40422: LD_ADDR_VAR 0 12
40426: PUSH
40427: LD_VAR 0 12
40431: PPUSH
40432: LD_INT 1
40434: PPUSH
40435: CALL_OW 3
40439: ST_TO_ADDR
// if not f then
40440: LD_VAR 0 12
40444: NOT
40445: IFFALSE 40463
// begin x := x + 2 ;
40447: LD_ADDR_VAR 0 13
40451: PUSH
40452: LD_VAR 0 13
40456: PUSH
40457: LD_INT 2
40459: PLUS
40460: ST_TO_ADDR
// continue ;
40461: GO 40261
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40463: LD_VAR 0 12
40467: PUSH
40468: LD_INT 1
40470: ARRAY
40471: PPUSH
40472: CALL_OW 266
40476: PUSH
40477: LD_INT 5
40479: EQUAL
40480: IFFALSE 40554
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40482: LD_VAR 0 12
40486: PUSH
40487: LD_INT 1
40489: ARRAY
40490: PPUSH
40491: CALL_OW 313
40495: PUSH
40496: LD_INT 3
40498: LESS
40499: IFFALSE 40535
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40501: LD_INT 0
40503: PPUSH
40504: LD_INT 5
40506: PUSH
40507: LD_INT 8
40509: PUSH
40510: LD_INT 9
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: LIST
40517: PUSH
40518: LD_VAR 0 17
40522: ARRAY
40523: PPUSH
40524: LD_VAR 0 4
40528: PPUSH
40529: CALL_OW 380
40533: GO 40552
// PrepareHuman ( false , i , skill ) ;
40535: LD_INT 0
40537: PPUSH
40538: LD_VAR 0 8
40542: PPUSH
40543: LD_VAR 0 4
40547: PPUSH
40548: CALL_OW 380
// end else
40552: GO 40571
// PrepareHuman ( false , i , skill ) ;
40554: LD_INT 0
40556: PPUSH
40557: LD_VAR 0 8
40561: PPUSH
40562: LD_VAR 0 4
40566: PPUSH
40567: CALL_OW 380
// un := CreateHuman ;
40571: LD_ADDR_VAR 0 14
40575: PUSH
40576: CALL_OW 44
40580: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40581: LD_ADDR_VAR 0 7
40585: PUSH
40586: LD_VAR 0 7
40590: PPUSH
40591: LD_INT 1
40593: PPUSH
40594: LD_VAR 0 14
40598: PPUSH
40599: CALL_OW 2
40603: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40604: LD_VAR 0 14
40608: PPUSH
40609: LD_VAR 0 12
40613: PUSH
40614: LD_INT 1
40616: ARRAY
40617: PPUSH
40618: CALL_OW 52
// end ;
40622: GO 40261
40624: POP
40625: POP
// end ;
40626: GO 39563
40628: POP
40629: POP
// result := result ^ buildings ;
40630: LD_ADDR_VAR 0 7
40634: PUSH
40635: LD_VAR 0 7
40639: PUSH
40640: LD_VAR 0 18
40644: ADD
40645: ST_TO_ADDR
// end else
40646: GO 40789
// begin for i = 1 to personel do
40648: LD_ADDR_VAR 0 8
40652: PUSH
40653: DOUBLE
40654: LD_INT 1
40656: DEC
40657: ST_TO_ADDR
40658: LD_VAR 0 6
40662: PUSH
40663: FOR_TO
40664: IFFALSE 40787
// begin if i > 4 then
40666: LD_VAR 0 8
40670: PUSH
40671: LD_INT 4
40673: GREATER
40674: IFFALSE 40678
// break ;
40676: GO 40787
// x := personel [ i ] ;
40678: LD_ADDR_VAR 0 13
40682: PUSH
40683: LD_VAR 0 6
40687: PUSH
40688: LD_VAR 0 8
40692: ARRAY
40693: ST_TO_ADDR
// if x = - 1 then
40694: LD_VAR 0 13
40698: PUSH
40699: LD_INT 1
40701: NEG
40702: EQUAL
40703: IFFALSE 40707
// continue ;
40705: GO 40663
// PrepareHuman ( false , i , skill ) ;
40707: LD_INT 0
40709: PPUSH
40710: LD_VAR 0 8
40714: PPUSH
40715: LD_VAR 0 4
40719: PPUSH
40720: CALL_OW 380
// un := CreateHuman ;
40724: LD_ADDR_VAR 0 14
40728: PUSH
40729: CALL_OW 44
40733: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40734: LD_VAR 0 14
40738: PPUSH
40739: LD_VAR 0 1
40743: PPUSH
40744: CALL_OW 250
40748: PPUSH
40749: LD_VAR 0 1
40753: PPUSH
40754: CALL_OW 251
40758: PPUSH
40759: LD_INT 10
40761: PPUSH
40762: LD_INT 0
40764: PPUSH
40765: CALL_OW 50
// result := result ^ un ;
40769: LD_ADDR_VAR 0 7
40773: PUSH
40774: LD_VAR 0 7
40778: PUSH
40779: LD_VAR 0 14
40783: ADD
40784: ST_TO_ADDR
// end ;
40785: GO 40663
40787: POP
40788: POP
// end ; end ;
40789: LD_VAR 0 7
40793: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40794: LD_INT 0
40796: PPUSH
40797: PPUSH
40798: PPUSH
40799: PPUSH
40800: PPUSH
40801: PPUSH
40802: PPUSH
40803: PPUSH
40804: PPUSH
40805: PPUSH
40806: PPUSH
40807: PPUSH
40808: PPUSH
40809: PPUSH
40810: PPUSH
40811: PPUSH
// result := false ;
40812: LD_ADDR_VAR 0 3
40816: PUSH
40817: LD_INT 0
40819: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40820: LD_VAR 0 1
40824: NOT
40825: PUSH
40826: LD_VAR 0 1
40830: PPUSH
40831: CALL_OW 266
40835: PUSH
40836: LD_INT 32
40838: PUSH
40839: LD_INT 33
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: IN
40846: NOT
40847: OR
40848: IFFALSE 40852
// exit ;
40850: GO 41961
// nat := GetNation ( tower ) ;
40852: LD_ADDR_VAR 0 12
40856: PUSH
40857: LD_VAR 0 1
40861: PPUSH
40862: CALL_OW 248
40866: ST_TO_ADDR
// side := GetSide ( tower ) ;
40867: LD_ADDR_VAR 0 16
40871: PUSH
40872: LD_VAR 0 1
40876: PPUSH
40877: CALL_OW 255
40881: ST_TO_ADDR
// x := GetX ( tower ) ;
40882: LD_ADDR_VAR 0 10
40886: PUSH
40887: LD_VAR 0 1
40891: PPUSH
40892: CALL_OW 250
40896: ST_TO_ADDR
// y := GetY ( tower ) ;
40897: LD_ADDR_VAR 0 11
40901: PUSH
40902: LD_VAR 0 1
40906: PPUSH
40907: CALL_OW 251
40911: ST_TO_ADDR
// if not x or not y then
40912: LD_VAR 0 10
40916: NOT
40917: PUSH
40918: LD_VAR 0 11
40922: NOT
40923: OR
40924: IFFALSE 40928
// exit ;
40926: GO 41961
// weapon := 0 ;
40928: LD_ADDR_VAR 0 18
40932: PUSH
40933: LD_INT 0
40935: ST_TO_ADDR
// fac_list := [ ] ;
40936: LD_ADDR_VAR 0 17
40940: PUSH
40941: EMPTY
40942: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40943: LD_ADDR_VAR 0 6
40947: PUSH
40948: LD_VAR 0 1
40952: PPUSH
40953: CALL_OW 274
40957: PPUSH
40958: LD_VAR 0 2
40962: PPUSH
40963: LD_INT 0
40965: PPUSH
40966: CALL 38532 0 3
40970: PPUSH
40971: LD_INT 30
40973: PUSH
40974: LD_INT 3
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PPUSH
40981: CALL_OW 72
40985: ST_TO_ADDR
// if not factories then
40986: LD_VAR 0 6
40990: NOT
40991: IFFALSE 40995
// exit ;
40993: GO 41961
// for i in factories do
40995: LD_ADDR_VAR 0 8
40999: PUSH
41000: LD_VAR 0 6
41004: PUSH
41005: FOR_IN
41006: IFFALSE 41031
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41008: LD_ADDR_VAR 0 17
41012: PUSH
41013: LD_VAR 0 17
41017: PUSH
41018: LD_VAR 0 8
41022: PPUSH
41023: CALL_OW 478
41027: UNION
41028: ST_TO_ADDR
41029: GO 41005
41031: POP
41032: POP
// if not fac_list then
41033: LD_VAR 0 17
41037: NOT
41038: IFFALSE 41042
// exit ;
41040: GO 41961
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41042: LD_ADDR_VAR 0 5
41046: PUSH
41047: LD_INT 4
41049: PUSH
41050: LD_INT 5
41052: PUSH
41053: LD_INT 9
41055: PUSH
41056: LD_INT 10
41058: PUSH
41059: LD_INT 6
41061: PUSH
41062: LD_INT 7
41064: PUSH
41065: LD_INT 11
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 27
41079: PUSH
41080: LD_INT 28
41082: PUSH
41083: LD_INT 26
41085: PUSH
41086: LD_INT 30
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 43
41097: PUSH
41098: LD_INT 44
41100: PUSH
41101: LD_INT 46
41103: PUSH
41104: LD_INT 45
41106: PUSH
41107: LD_INT 47
41109: PUSH
41110: LD_INT 49
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: LIST
41125: PUSH
41126: LD_VAR 0 12
41130: ARRAY
41131: ST_TO_ADDR
// list := list isect fac_list ;
41132: LD_ADDR_VAR 0 5
41136: PUSH
41137: LD_VAR 0 5
41141: PUSH
41142: LD_VAR 0 17
41146: ISECT
41147: ST_TO_ADDR
// if not list then
41148: LD_VAR 0 5
41152: NOT
41153: IFFALSE 41157
// exit ;
41155: GO 41961
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41157: LD_VAR 0 12
41161: PUSH
41162: LD_INT 3
41164: EQUAL
41165: PUSH
41166: LD_INT 49
41168: PUSH
41169: LD_VAR 0 5
41173: IN
41174: AND
41175: PUSH
41176: LD_INT 31
41178: PPUSH
41179: LD_VAR 0 16
41183: PPUSH
41184: CALL_OW 321
41188: PUSH
41189: LD_INT 2
41191: EQUAL
41192: AND
41193: IFFALSE 41253
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41195: LD_INT 22
41197: PUSH
41198: LD_VAR 0 16
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 35
41209: PUSH
41210: LD_INT 49
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 91
41219: PUSH
41220: LD_VAR 0 1
41224: PUSH
41225: LD_INT 10
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: LIST
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: LIST
41237: PPUSH
41238: CALL_OW 69
41242: NOT
41243: IFFALSE 41253
// weapon := ru_time_lapser ;
41245: LD_ADDR_VAR 0 18
41249: PUSH
41250: LD_INT 49
41252: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41253: LD_VAR 0 12
41257: PUSH
41258: LD_INT 1
41260: PUSH
41261: LD_INT 2
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: IN
41268: PUSH
41269: LD_INT 11
41271: PUSH
41272: LD_VAR 0 5
41276: IN
41277: PUSH
41278: LD_INT 30
41280: PUSH
41281: LD_VAR 0 5
41285: IN
41286: OR
41287: AND
41288: PUSH
41289: LD_INT 6
41291: PPUSH
41292: LD_VAR 0 16
41296: PPUSH
41297: CALL_OW 321
41301: PUSH
41302: LD_INT 2
41304: EQUAL
41305: AND
41306: IFFALSE 41471
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41308: LD_INT 22
41310: PUSH
41311: LD_VAR 0 16
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 2
41322: PUSH
41323: LD_INT 35
41325: PUSH
41326: LD_INT 11
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 35
41335: PUSH
41336: LD_INT 30
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 91
41350: PUSH
41351: LD_VAR 0 1
41355: PUSH
41356: LD_INT 18
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: LIST
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: LIST
41368: PPUSH
41369: CALL_OW 69
41373: NOT
41374: PUSH
41375: LD_INT 22
41377: PUSH
41378: LD_VAR 0 16
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 2
41389: PUSH
41390: LD_INT 30
41392: PUSH
41393: LD_INT 32
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 30
41402: PUSH
41403: LD_INT 33
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 91
41417: PUSH
41418: LD_VAR 0 1
41422: PUSH
41423: LD_INT 12
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: LIST
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: LIST
41435: PUSH
41436: EMPTY
41437: LIST
41438: PPUSH
41439: CALL_OW 69
41443: PUSH
41444: LD_INT 2
41446: GREATER
41447: AND
41448: IFFALSE 41471
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41450: LD_ADDR_VAR 0 18
41454: PUSH
41455: LD_INT 11
41457: PUSH
41458: LD_INT 30
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: LD_VAR 0 12
41469: ARRAY
41470: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41471: LD_VAR 0 18
41475: NOT
41476: PUSH
41477: LD_INT 40
41479: PPUSH
41480: LD_VAR 0 16
41484: PPUSH
41485: CALL_OW 321
41489: PUSH
41490: LD_INT 2
41492: EQUAL
41493: AND
41494: PUSH
41495: LD_INT 7
41497: PUSH
41498: LD_VAR 0 5
41502: IN
41503: PUSH
41504: LD_INT 28
41506: PUSH
41507: LD_VAR 0 5
41511: IN
41512: OR
41513: PUSH
41514: LD_INT 45
41516: PUSH
41517: LD_VAR 0 5
41521: IN
41522: OR
41523: AND
41524: IFFALSE 41778
// begin hex := GetHexInfo ( x , y ) ;
41526: LD_ADDR_VAR 0 4
41530: PUSH
41531: LD_VAR 0 10
41535: PPUSH
41536: LD_VAR 0 11
41540: PPUSH
41541: CALL_OW 546
41545: ST_TO_ADDR
// if hex [ 1 ] then
41546: LD_VAR 0 4
41550: PUSH
41551: LD_INT 1
41553: ARRAY
41554: IFFALSE 41558
// exit ;
41556: GO 41961
// height := hex [ 2 ] ;
41558: LD_ADDR_VAR 0 15
41562: PUSH
41563: LD_VAR 0 4
41567: PUSH
41568: LD_INT 2
41570: ARRAY
41571: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41572: LD_ADDR_VAR 0 14
41576: PUSH
41577: LD_INT 0
41579: PUSH
41580: LD_INT 2
41582: PUSH
41583: LD_INT 3
41585: PUSH
41586: LD_INT 5
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: ST_TO_ADDR
// for i in tmp do
41595: LD_ADDR_VAR 0 8
41599: PUSH
41600: LD_VAR 0 14
41604: PUSH
41605: FOR_IN
41606: IFFALSE 41776
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41608: LD_ADDR_VAR 0 9
41612: PUSH
41613: LD_VAR 0 10
41617: PPUSH
41618: LD_VAR 0 8
41622: PPUSH
41623: LD_INT 5
41625: PPUSH
41626: CALL_OW 272
41630: PUSH
41631: LD_VAR 0 11
41635: PPUSH
41636: LD_VAR 0 8
41640: PPUSH
41641: LD_INT 5
41643: PPUSH
41644: CALL_OW 273
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41653: LD_VAR 0 9
41657: PUSH
41658: LD_INT 1
41660: ARRAY
41661: PPUSH
41662: LD_VAR 0 9
41666: PUSH
41667: LD_INT 2
41669: ARRAY
41670: PPUSH
41671: CALL_OW 488
41675: IFFALSE 41774
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41677: LD_ADDR_VAR 0 4
41681: PUSH
41682: LD_VAR 0 9
41686: PUSH
41687: LD_INT 1
41689: ARRAY
41690: PPUSH
41691: LD_VAR 0 9
41695: PUSH
41696: LD_INT 2
41698: ARRAY
41699: PPUSH
41700: CALL_OW 546
41704: ST_TO_ADDR
// if hex [ 1 ] then
41705: LD_VAR 0 4
41709: PUSH
41710: LD_INT 1
41712: ARRAY
41713: IFFALSE 41717
// continue ;
41715: GO 41605
// h := hex [ 2 ] ;
41717: LD_ADDR_VAR 0 13
41721: PUSH
41722: LD_VAR 0 4
41726: PUSH
41727: LD_INT 2
41729: ARRAY
41730: ST_TO_ADDR
// if h + 7 < height then
41731: LD_VAR 0 13
41735: PUSH
41736: LD_INT 7
41738: PLUS
41739: PUSH
41740: LD_VAR 0 15
41744: LESS
41745: IFFALSE 41774
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41747: LD_ADDR_VAR 0 18
41751: PUSH
41752: LD_INT 7
41754: PUSH
41755: LD_INT 28
41757: PUSH
41758: LD_INT 45
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: LIST
41765: PUSH
41766: LD_VAR 0 12
41770: ARRAY
41771: ST_TO_ADDR
// break ;
41772: GO 41776
// end ; end ; end ;
41774: GO 41605
41776: POP
41777: POP
// end ; if not weapon then
41778: LD_VAR 0 18
41782: NOT
41783: IFFALSE 41843
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41785: LD_ADDR_VAR 0 5
41789: PUSH
41790: LD_VAR 0 5
41794: PUSH
41795: LD_INT 11
41797: PUSH
41798: LD_INT 30
41800: PUSH
41801: LD_INT 49
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: LIST
41808: DIFF
41809: ST_TO_ADDR
// if not list then
41810: LD_VAR 0 5
41814: NOT
41815: IFFALSE 41819
// exit ;
41817: GO 41961
// weapon := list [ rand ( 1 , list ) ] ;
41819: LD_ADDR_VAR 0 18
41823: PUSH
41824: LD_VAR 0 5
41828: PUSH
41829: LD_INT 1
41831: PPUSH
41832: LD_VAR 0 5
41836: PPUSH
41837: CALL_OW 12
41841: ARRAY
41842: ST_TO_ADDR
// end ; if weapon then
41843: LD_VAR 0 18
41847: IFFALSE 41961
// begin tmp := CostOfWeapon ( weapon ) ;
41849: LD_ADDR_VAR 0 14
41853: PUSH
41854: LD_VAR 0 18
41858: PPUSH
41859: CALL_OW 451
41863: ST_TO_ADDR
// j := GetBase ( tower ) ;
41864: LD_ADDR_VAR 0 9
41868: PUSH
41869: LD_VAR 0 1
41873: PPUSH
41874: CALL_OW 274
41878: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41879: LD_VAR 0 9
41883: PPUSH
41884: LD_INT 1
41886: PPUSH
41887: CALL_OW 275
41891: PUSH
41892: LD_VAR 0 14
41896: PUSH
41897: LD_INT 1
41899: ARRAY
41900: GREATEREQUAL
41901: PUSH
41902: LD_VAR 0 9
41906: PPUSH
41907: LD_INT 2
41909: PPUSH
41910: CALL_OW 275
41914: PUSH
41915: LD_VAR 0 14
41919: PUSH
41920: LD_INT 2
41922: ARRAY
41923: GREATEREQUAL
41924: AND
41925: PUSH
41926: LD_VAR 0 9
41930: PPUSH
41931: LD_INT 3
41933: PPUSH
41934: CALL_OW 275
41938: PUSH
41939: LD_VAR 0 14
41943: PUSH
41944: LD_INT 3
41946: ARRAY
41947: GREATEREQUAL
41948: AND
41949: IFFALSE 41961
// result := weapon ;
41951: LD_ADDR_VAR 0 3
41955: PUSH
41956: LD_VAR 0 18
41960: ST_TO_ADDR
// end ; end ;
41961: LD_VAR 0 3
41965: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41966: LD_INT 0
41968: PPUSH
41969: PPUSH
// result := true ;
41970: LD_ADDR_VAR 0 3
41974: PUSH
41975: LD_INT 1
41977: ST_TO_ADDR
// if array1 = array2 then
41978: LD_VAR 0 1
41982: PUSH
41983: LD_VAR 0 2
41987: EQUAL
41988: IFFALSE 42048
// begin for i = 1 to array1 do
41990: LD_ADDR_VAR 0 4
41994: PUSH
41995: DOUBLE
41996: LD_INT 1
41998: DEC
41999: ST_TO_ADDR
42000: LD_VAR 0 1
42004: PUSH
42005: FOR_TO
42006: IFFALSE 42044
// if array1 [ i ] <> array2 [ i ] then
42008: LD_VAR 0 1
42012: PUSH
42013: LD_VAR 0 4
42017: ARRAY
42018: PUSH
42019: LD_VAR 0 2
42023: PUSH
42024: LD_VAR 0 4
42028: ARRAY
42029: NONEQUAL
42030: IFFALSE 42042
// begin result := false ;
42032: LD_ADDR_VAR 0 3
42036: PUSH
42037: LD_INT 0
42039: ST_TO_ADDR
// break ;
42040: GO 42044
// end ;
42042: GO 42005
42044: POP
42045: POP
// end else
42046: GO 42056
// result := false ;
42048: LD_ADDR_VAR 0 3
42052: PUSH
42053: LD_INT 0
42055: ST_TO_ADDR
// end ;
42056: LD_VAR 0 3
42060: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42061: LD_INT 0
42063: PPUSH
42064: PPUSH
// if not array1 or not array2 then
42065: LD_VAR 0 1
42069: NOT
42070: PUSH
42071: LD_VAR 0 2
42075: NOT
42076: OR
42077: IFFALSE 42081
// exit ;
42079: GO 42145
// result := true ;
42081: LD_ADDR_VAR 0 3
42085: PUSH
42086: LD_INT 1
42088: ST_TO_ADDR
// for i = 1 to array1 do
42089: LD_ADDR_VAR 0 4
42093: PUSH
42094: DOUBLE
42095: LD_INT 1
42097: DEC
42098: ST_TO_ADDR
42099: LD_VAR 0 1
42103: PUSH
42104: FOR_TO
42105: IFFALSE 42143
// if array1 [ i ] <> array2 [ i ] then
42107: LD_VAR 0 1
42111: PUSH
42112: LD_VAR 0 4
42116: ARRAY
42117: PUSH
42118: LD_VAR 0 2
42122: PUSH
42123: LD_VAR 0 4
42127: ARRAY
42128: NONEQUAL
42129: IFFALSE 42141
// begin result := false ;
42131: LD_ADDR_VAR 0 3
42135: PUSH
42136: LD_INT 0
42138: ST_TO_ADDR
// break ;
42139: GO 42143
// end ;
42141: GO 42104
42143: POP
42144: POP
// end ;
42145: LD_VAR 0 3
42149: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42150: LD_INT 0
42152: PPUSH
42153: PPUSH
42154: PPUSH
// pom := GetBase ( fac ) ;
42155: LD_ADDR_VAR 0 5
42159: PUSH
42160: LD_VAR 0 1
42164: PPUSH
42165: CALL_OW 274
42169: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42170: LD_ADDR_VAR 0 4
42174: PUSH
42175: LD_VAR 0 2
42179: PUSH
42180: LD_INT 1
42182: ARRAY
42183: PPUSH
42184: LD_VAR 0 2
42188: PUSH
42189: LD_INT 2
42191: ARRAY
42192: PPUSH
42193: LD_VAR 0 2
42197: PUSH
42198: LD_INT 3
42200: ARRAY
42201: PPUSH
42202: LD_VAR 0 2
42206: PUSH
42207: LD_INT 4
42209: ARRAY
42210: PPUSH
42211: CALL_OW 449
42215: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42216: LD_ADDR_VAR 0 3
42220: PUSH
42221: LD_VAR 0 5
42225: PPUSH
42226: LD_INT 1
42228: PPUSH
42229: CALL_OW 275
42233: PUSH
42234: LD_VAR 0 4
42238: PUSH
42239: LD_INT 1
42241: ARRAY
42242: GREATEREQUAL
42243: PUSH
42244: LD_VAR 0 5
42248: PPUSH
42249: LD_INT 2
42251: PPUSH
42252: CALL_OW 275
42256: PUSH
42257: LD_VAR 0 4
42261: PUSH
42262: LD_INT 2
42264: ARRAY
42265: GREATEREQUAL
42266: AND
42267: PUSH
42268: LD_VAR 0 5
42272: PPUSH
42273: LD_INT 3
42275: PPUSH
42276: CALL_OW 275
42280: PUSH
42281: LD_VAR 0 4
42285: PUSH
42286: LD_INT 3
42288: ARRAY
42289: GREATEREQUAL
42290: AND
42291: ST_TO_ADDR
// end ;
42292: LD_VAR 0 3
42296: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42297: LD_INT 0
42299: PPUSH
42300: PPUSH
42301: PPUSH
42302: PPUSH
// pom := GetBase ( building ) ;
42303: LD_ADDR_VAR 0 3
42307: PUSH
42308: LD_VAR 0 1
42312: PPUSH
42313: CALL_OW 274
42317: ST_TO_ADDR
// if not pom then
42318: LD_VAR 0 3
42322: NOT
42323: IFFALSE 42327
// exit ;
42325: GO 42497
// btype := GetBType ( building ) ;
42327: LD_ADDR_VAR 0 5
42331: PUSH
42332: LD_VAR 0 1
42336: PPUSH
42337: CALL_OW 266
42341: ST_TO_ADDR
// if btype = b_armoury then
42342: LD_VAR 0 5
42346: PUSH
42347: LD_INT 4
42349: EQUAL
42350: IFFALSE 42360
// btype := b_barracks ;
42352: LD_ADDR_VAR 0 5
42356: PUSH
42357: LD_INT 5
42359: ST_TO_ADDR
// if btype = b_depot then
42360: LD_VAR 0 5
42364: PUSH
42365: LD_INT 0
42367: EQUAL
42368: IFFALSE 42378
// btype := b_warehouse ;
42370: LD_ADDR_VAR 0 5
42374: PUSH
42375: LD_INT 1
42377: ST_TO_ADDR
// if btype = b_workshop then
42378: LD_VAR 0 5
42382: PUSH
42383: LD_INT 2
42385: EQUAL
42386: IFFALSE 42396
// btype := b_factory ;
42388: LD_ADDR_VAR 0 5
42392: PUSH
42393: LD_INT 3
42395: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42396: LD_ADDR_VAR 0 4
42400: PUSH
42401: LD_VAR 0 5
42405: PPUSH
42406: LD_VAR 0 1
42410: PPUSH
42411: CALL_OW 248
42415: PPUSH
42416: CALL_OW 450
42420: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42421: LD_ADDR_VAR 0 2
42425: PUSH
42426: LD_VAR 0 3
42430: PPUSH
42431: LD_INT 1
42433: PPUSH
42434: CALL_OW 275
42438: PUSH
42439: LD_VAR 0 4
42443: PUSH
42444: LD_INT 1
42446: ARRAY
42447: GREATEREQUAL
42448: PUSH
42449: LD_VAR 0 3
42453: PPUSH
42454: LD_INT 2
42456: PPUSH
42457: CALL_OW 275
42461: PUSH
42462: LD_VAR 0 4
42466: PUSH
42467: LD_INT 2
42469: ARRAY
42470: GREATEREQUAL
42471: AND
42472: PUSH
42473: LD_VAR 0 3
42477: PPUSH
42478: LD_INT 3
42480: PPUSH
42481: CALL_OW 275
42485: PUSH
42486: LD_VAR 0 4
42490: PUSH
42491: LD_INT 3
42493: ARRAY
42494: GREATEREQUAL
42495: AND
42496: ST_TO_ADDR
// end ;
42497: LD_VAR 0 2
42501: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42502: LD_INT 0
42504: PPUSH
42505: PPUSH
42506: PPUSH
// pom := GetBase ( building ) ;
42507: LD_ADDR_VAR 0 4
42511: PUSH
42512: LD_VAR 0 1
42516: PPUSH
42517: CALL_OW 274
42521: ST_TO_ADDR
// if not pom then
42522: LD_VAR 0 4
42526: NOT
42527: IFFALSE 42531
// exit ;
42529: GO 42632
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42531: LD_ADDR_VAR 0 5
42535: PUSH
42536: LD_VAR 0 2
42540: PPUSH
42541: LD_VAR 0 1
42545: PPUSH
42546: CALL_OW 248
42550: PPUSH
42551: CALL_OW 450
42555: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42556: LD_ADDR_VAR 0 3
42560: PUSH
42561: LD_VAR 0 4
42565: PPUSH
42566: LD_INT 1
42568: PPUSH
42569: CALL_OW 275
42573: PUSH
42574: LD_VAR 0 5
42578: PUSH
42579: LD_INT 1
42581: ARRAY
42582: GREATEREQUAL
42583: PUSH
42584: LD_VAR 0 4
42588: PPUSH
42589: LD_INT 2
42591: PPUSH
42592: CALL_OW 275
42596: PUSH
42597: LD_VAR 0 5
42601: PUSH
42602: LD_INT 2
42604: ARRAY
42605: GREATEREQUAL
42606: AND
42607: PUSH
42608: LD_VAR 0 4
42612: PPUSH
42613: LD_INT 3
42615: PPUSH
42616: CALL_OW 275
42620: PUSH
42621: LD_VAR 0 5
42625: PUSH
42626: LD_INT 3
42628: ARRAY
42629: GREATEREQUAL
42630: AND
42631: ST_TO_ADDR
// end ;
42632: LD_VAR 0 3
42636: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42637: LD_INT 0
42639: PPUSH
42640: PPUSH
42641: PPUSH
42642: PPUSH
42643: PPUSH
42644: PPUSH
42645: PPUSH
42646: PPUSH
42647: PPUSH
42648: PPUSH
42649: PPUSH
// result := false ;
42650: LD_ADDR_VAR 0 8
42654: PUSH
42655: LD_INT 0
42657: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42658: LD_VAR 0 5
42662: NOT
42663: PUSH
42664: LD_VAR 0 1
42668: NOT
42669: OR
42670: PUSH
42671: LD_VAR 0 2
42675: NOT
42676: OR
42677: PUSH
42678: LD_VAR 0 3
42682: NOT
42683: OR
42684: IFFALSE 42688
// exit ;
42686: GO 43502
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42688: LD_ADDR_VAR 0 14
42692: PUSH
42693: LD_VAR 0 1
42697: PPUSH
42698: LD_VAR 0 2
42702: PPUSH
42703: LD_VAR 0 3
42707: PPUSH
42708: LD_VAR 0 4
42712: PPUSH
42713: LD_VAR 0 5
42717: PUSH
42718: LD_INT 1
42720: ARRAY
42721: PPUSH
42722: CALL_OW 248
42726: PPUSH
42727: LD_INT 0
42729: PPUSH
42730: CALL 44735 0 6
42734: ST_TO_ADDR
// if not hexes then
42735: LD_VAR 0 14
42739: NOT
42740: IFFALSE 42744
// exit ;
42742: GO 43502
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42744: LD_ADDR_VAR 0 17
42748: PUSH
42749: LD_VAR 0 5
42753: PPUSH
42754: LD_INT 22
42756: PUSH
42757: LD_VAR 0 13
42761: PPUSH
42762: CALL_OW 255
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 2
42773: PUSH
42774: LD_INT 30
42776: PUSH
42777: LD_INT 0
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 30
42786: PUSH
42787: LD_INT 1
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: LIST
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PPUSH
42803: CALL_OW 72
42807: ST_TO_ADDR
// for i = 1 to hexes do
42808: LD_ADDR_VAR 0 9
42812: PUSH
42813: DOUBLE
42814: LD_INT 1
42816: DEC
42817: ST_TO_ADDR
42818: LD_VAR 0 14
42822: PUSH
42823: FOR_TO
42824: IFFALSE 43500
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42826: LD_ADDR_VAR 0 13
42830: PUSH
42831: LD_VAR 0 14
42835: PUSH
42836: LD_VAR 0 9
42840: ARRAY
42841: PUSH
42842: LD_INT 1
42844: ARRAY
42845: PPUSH
42846: LD_VAR 0 14
42850: PUSH
42851: LD_VAR 0 9
42855: ARRAY
42856: PUSH
42857: LD_INT 2
42859: ARRAY
42860: PPUSH
42861: CALL_OW 428
42865: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42866: LD_VAR 0 14
42870: PUSH
42871: LD_VAR 0 9
42875: ARRAY
42876: PUSH
42877: LD_INT 1
42879: ARRAY
42880: PPUSH
42881: LD_VAR 0 14
42885: PUSH
42886: LD_VAR 0 9
42890: ARRAY
42891: PUSH
42892: LD_INT 2
42894: ARRAY
42895: PPUSH
42896: CALL_OW 351
42900: PUSH
42901: LD_VAR 0 14
42905: PUSH
42906: LD_VAR 0 9
42910: ARRAY
42911: PUSH
42912: LD_INT 1
42914: ARRAY
42915: PPUSH
42916: LD_VAR 0 14
42920: PUSH
42921: LD_VAR 0 9
42925: ARRAY
42926: PUSH
42927: LD_INT 2
42929: ARRAY
42930: PPUSH
42931: CALL_OW 488
42935: NOT
42936: OR
42937: PUSH
42938: LD_VAR 0 13
42942: PPUSH
42943: CALL_OW 247
42947: PUSH
42948: LD_INT 3
42950: EQUAL
42951: OR
42952: IFFALSE 42958
// exit ;
42954: POP
42955: POP
42956: GO 43502
// if not tmp then
42958: LD_VAR 0 13
42962: NOT
42963: IFFALSE 42967
// continue ;
42965: GO 42823
// result := true ;
42967: LD_ADDR_VAR 0 8
42971: PUSH
42972: LD_INT 1
42974: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42975: LD_VAR 0 6
42979: PUSH
42980: LD_VAR 0 13
42984: PPUSH
42985: CALL_OW 247
42989: PUSH
42990: LD_INT 2
42992: EQUAL
42993: AND
42994: PUSH
42995: LD_VAR 0 13
42999: PPUSH
43000: CALL_OW 263
43004: PUSH
43005: LD_INT 1
43007: EQUAL
43008: AND
43009: IFFALSE 43173
// begin if IsDrivenBy ( tmp ) then
43011: LD_VAR 0 13
43015: PPUSH
43016: CALL_OW 311
43020: IFFALSE 43024
// continue ;
43022: GO 42823
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43024: LD_VAR 0 6
43028: PPUSH
43029: LD_INT 3
43031: PUSH
43032: LD_INT 60
43034: PUSH
43035: EMPTY
43036: LIST
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 3
43044: PUSH
43045: LD_INT 55
43047: PUSH
43048: EMPTY
43049: LIST
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PPUSH
43059: CALL_OW 72
43063: IFFALSE 43171
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43065: LD_ADDR_VAR 0 18
43069: PUSH
43070: LD_VAR 0 6
43074: PPUSH
43075: LD_INT 3
43077: PUSH
43078: LD_INT 60
43080: PUSH
43081: EMPTY
43082: LIST
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 3
43090: PUSH
43091: LD_INT 55
43093: PUSH
43094: EMPTY
43095: LIST
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PPUSH
43105: CALL_OW 72
43109: PUSH
43110: LD_INT 1
43112: ARRAY
43113: ST_TO_ADDR
// if IsInUnit ( driver ) then
43114: LD_VAR 0 18
43118: PPUSH
43119: CALL_OW 310
43123: IFFALSE 43134
// ComExit ( driver ) ;
43125: LD_VAR 0 18
43129: PPUSH
43130: CALL 68423 0 1
// AddComEnterUnit ( driver , tmp ) ;
43134: LD_VAR 0 18
43138: PPUSH
43139: LD_VAR 0 13
43143: PPUSH
43144: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43148: LD_VAR 0 18
43152: PPUSH
43153: LD_VAR 0 7
43157: PPUSH
43158: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43162: LD_VAR 0 18
43166: PPUSH
43167: CALL_OW 181
// end ; continue ;
43171: GO 42823
// end ; if not cleaners or not tmp in cleaners then
43173: LD_VAR 0 6
43177: NOT
43178: PUSH
43179: LD_VAR 0 13
43183: PUSH
43184: LD_VAR 0 6
43188: IN
43189: NOT
43190: OR
43191: IFFALSE 43498
// begin if dep then
43193: LD_VAR 0 17
43197: IFFALSE 43333
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43199: LD_ADDR_VAR 0 16
43203: PUSH
43204: LD_VAR 0 17
43208: PUSH
43209: LD_INT 1
43211: ARRAY
43212: PPUSH
43213: CALL_OW 250
43217: PPUSH
43218: LD_VAR 0 17
43222: PUSH
43223: LD_INT 1
43225: ARRAY
43226: PPUSH
43227: CALL_OW 254
43231: PPUSH
43232: LD_INT 5
43234: PPUSH
43235: CALL_OW 272
43239: PUSH
43240: LD_VAR 0 17
43244: PUSH
43245: LD_INT 1
43247: ARRAY
43248: PPUSH
43249: CALL_OW 251
43253: PPUSH
43254: LD_VAR 0 17
43258: PUSH
43259: LD_INT 1
43261: ARRAY
43262: PPUSH
43263: CALL_OW 254
43267: PPUSH
43268: LD_INT 5
43270: PPUSH
43271: CALL_OW 273
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43280: LD_VAR 0 16
43284: PUSH
43285: LD_INT 1
43287: ARRAY
43288: PPUSH
43289: LD_VAR 0 16
43293: PUSH
43294: LD_INT 2
43296: ARRAY
43297: PPUSH
43298: CALL_OW 488
43302: IFFALSE 43333
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43304: LD_VAR 0 13
43308: PPUSH
43309: LD_VAR 0 16
43313: PUSH
43314: LD_INT 1
43316: ARRAY
43317: PPUSH
43318: LD_VAR 0 16
43322: PUSH
43323: LD_INT 2
43325: ARRAY
43326: PPUSH
43327: CALL_OW 111
// continue ;
43331: GO 42823
// end ; end ; r := GetDir ( tmp ) ;
43333: LD_ADDR_VAR 0 15
43337: PUSH
43338: LD_VAR 0 13
43342: PPUSH
43343: CALL_OW 254
43347: ST_TO_ADDR
// if r = 5 then
43348: LD_VAR 0 15
43352: PUSH
43353: LD_INT 5
43355: EQUAL
43356: IFFALSE 43366
// r := 0 ;
43358: LD_ADDR_VAR 0 15
43362: PUSH
43363: LD_INT 0
43365: ST_TO_ADDR
// for j = r to 5 do
43366: LD_ADDR_VAR 0 10
43370: PUSH
43371: DOUBLE
43372: LD_VAR 0 15
43376: DEC
43377: ST_TO_ADDR
43378: LD_INT 5
43380: PUSH
43381: FOR_TO
43382: IFFALSE 43496
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43384: LD_ADDR_VAR 0 11
43388: PUSH
43389: LD_VAR 0 13
43393: PPUSH
43394: CALL_OW 250
43398: PPUSH
43399: LD_VAR 0 10
43403: PPUSH
43404: LD_INT 2
43406: PPUSH
43407: CALL_OW 272
43411: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43412: LD_ADDR_VAR 0 12
43416: PUSH
43417: LD_VAR 0 13
43421: PPUSH
43422: CALL_OW 251
43426: PPUSH
43427: LD_VAR 0 10
43431: PPUSH
43432: LD_INT 2
43434: PPUSH
43435: CALL_OW 273
43439: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43440: LD_VAR 0 11
43444: PPUSH
43445: LD_VAR 0 12
43449: PPUSH
43450: CALL_OW 488
43454: PUSH
43455: LD_VAR 0 11
43459: PPUSH
43460: LD_VAR 0 12
43464: PPUSH
43465: CALL_OW 428
43469: NOT
43470: AND
43471: IFFALSE 43494
// begin ComMoveXY ( tmp , _x , _y ) ;
43473: LD_VAR 0 13
43477: PPUSH
43478: LD_VAR 0 11
43482: PPUSH
43483: LD_VAR 0 12
43487: PPUSH
43488: CALL_OW 111
// break ;
43492: GO 43496
// end ; end ;
43494: GO 43381
43496: POP
43497: POP
// end ; end ;
43498: GO 42823
43500: POP
43501: POP
// end ;
43502: LD_VAR 0 8
43506: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43507: LD_INT 0
43509: PPUSH
// result := true ;
43510: LD_ADDR_VAR 0 3
43514: PUSH
43515: LD_INT 1
43517: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43518: LD_VAR 0 2
43522: PUSH
43523: LD_INT 24
43525: DOUBLE
43526: EQUAL
43527: IFTRUE 43537
43529: LD_INT 33
43531: DOUBLE
43532: EQUAL
43533: IFTRUE 43537
43535: GO 43562
43537: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43538: LD_ADDR_VAR 0 3
43542: PUSH
43543: LD_INT 32
43545: PPUSH
43546: LD_VAR 0 1
43550: PPUSH
43551: CALL_OW 321
43555: PUSH
43556: LD_INT 2
43558: EQUAL
43559: ST_TO_ADDR
43560: GO 43878
43562: LD_INT 20
43564: DOUBLE
43565: EQUAL
43566: IFTRUE 43570
43568: GO 43595
43570: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43571: LD_ADDR_VAR 0 3
43575: PUSH
43576: LD_INT 6
43578: PPUSH
43579: LD_VAR 0 1
43583: PPUSH
43584: CALL_OW 321
43588: PUSH
43589: LD_INT 2
43591: EQUAL
43592: ST_TO_ADDR
43593: GO 43878
43595: LD_INT 22
43597: DOUBLE
43598: EQUAL
43599: IFTRUE 43609
43601: LD_INT 36
43603: DOUBLE
43604: EQUAL
43605: IFTRUE 43609
43607: GO 43634
43609: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43610: LD_ADDR_VAR 0 3
43614: PUSH
43615: LD_INT 15
43617: PPUSH
43618: LD_VAR 0 1
43622: PPUSH
43623: CALL_OW 321
43627: PUSH
43628: LD_INT 2
43630: EQUAL
43631: ST_TO_ADDR
43632: GO 43878
43634: LD_INT 30
43636: DOUBLE
43637: EQUAL
43638: IFTRUE 43642
43640: GO 43667
43642: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43643: LD_ADDR_VAR 0 3
43647: PUSH
43648: LD_INT 20
43650: PPUSH
43651: LD_VAR 0 1
43655: PPUSH
43656: CALL_OW 321
43660: PUSH
43661: LD_INT 2
43663: EQUAL
43664: ST_TO_ADDR
43665: GO 43878
43667: LD_INT 28
43669: DOUBLE
43670: EQUAL
43671: IFTRUE 43681
43673: LD_INT 21
43675: DOUBLE
43676: EQUAL
43677: IFTRUE 43681
43679: GO 43706
43681: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43682: LD_ADDR_VAR 0 3
43686: PUSH
43687: LD_INT 21
43689: PPUSH
43690: LD_VAR 0 1
43694: PPUSH
43695: CALL_OW 321
43699: PUSH
43700: LD_INT 2
43702: EQUAL
43703: ST_TO_ADDR
43704: GO 43878
43706: LD_INT 16
43708: DOUBLE
43709: EQUAL
43710: IFTRUE 43714
43712: GO 43739
43714: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43715: LD_ADDR_VAR 0 3
43719: PUSH
43720: LD_INT 84
43722: PPUSH
43723: LD_VAR 0 1
43727: PPUSH
43728: CALL_OW 321
43732: PUSH
43733: LD_INT 2
43735: EQUAL
43736: ST_TO_ADDR
43737: GO 43878
43739: LD_INT 19
43741: DOUBLE
43742: EQUAL
43743: IFTRUE 43753
43745: LD_INT 23
43747: DOUBLE
43748: EQUAL
43749: IFTRUE 43753
43751: GO 43778
43753: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43754: LD_ADDR_VAR 0 3
43758: PUSH
43759: LD_INT 83
43761: PPUSH
43762: LD_VAR 0 1
43766: PPUSH
43767: CALL_OW 321
43771: PUSH
43772: LD_INT 2
43774: EQUAL
43775: ST_TO_ADDR
43776: GO 43878
43778: LD_INT 17
43780: DOUBLE
43781: EQUAL
43782: IFTRUE 43786
43784: GO 43811
43786: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43787: LD_ADDR_VAR 0 3
43791: PUSH
43792: LD_INT 39
43794: PPUSH
43795: LD_VAR 0 1
43799: PPUSH
43800: CALL_OW 321
43804: PUSH
43805: LD_INT 2
43807: EQUAL
43808: ST_TO_ADDR
43809: GO 43878
43811: LD_INT 18
43813: DOUBLE
43814: EQUAL
43815: IFTRUE 43819
43817: GO 43844
43819: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43820: LD_ADDR_VAR 0 3
43824: PUSH
43825: LD_INT 40
43827: PPUSH
43828: LD_VAR 0 1
43832: PPUSH
43833: CALL_OW 321
43837: PUSH
43838: LD_INT 2
43840: EQUAL
43841: ST_TO_ADDR
43842: GO 43878
43844: LD_INT 27
43846: DOUBLE
43847: EQUAL
43848: IFTRUE 43852
43850: GO 43877
43852: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43853: LD_ADDR_VAR 0 3
43857: PUSH
43858: LD_INT 35
43860: PPUSH
43861: LD_VAR 0 1
43865: PPUSH
43866: CALL_OW 321
43870: PUSH
43871: LD_INT 2
43873: EQUAL
43874: ST_TO_ADDR
43875: GO 43878
43877: POP
// end ;
43878: LD_VAR 0 3
43882: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43883: LD_INT 0
43885: PPUSH
43886: PPUSH
43887: PPUSH
43888: PPUSH
43889: PPUSH
43890: PPUSH
43891: PPUSH
43892: PPUSH
43893: PPUSH
43894: PPUSH
43895: PPUSH
// result := false ;
43896: LD_ADDR_VAR 0 6
43900: PUSH
43901: LD_INT 0
43903: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43904: LD_VAR 0 1
43908: NOT
43909: PUSH
43910: LD_VAR 0 1
43914: PPUSH
43915: CALL_OW 266
43919: PUSH
43920: LD_INT 0
43922: PUSH
43923: LD_INT 1
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: IN
43930: NOT
43931: OR
43932: PUSH
43933: LD_VAR 0 2
43937: NOT
43938: OR
43939: PUSH
43940: LD_VAR 0 5
43944: PUSH
43945: LD_INT 0
43947: PUSH
43948: LD_INT 1
43950: PUSH
43951: LD_INT 2
43953: PUSH
43954: LD_INT 3
43956: PUSH
43957: LD_INT 4
43959: PUSH
43960: LD_INT 5
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: IN
43971: NOT
43972: OR
43973: PUSH
43974: LD_VAR 0 3
43978: PPUSH
43979: LD_VAR 0 4
43983: PPUSH
43984: CALL_OW 488
43988: NOT
43989: OR
43990: IFFALSE 43994
// exit ;
43992: GO 44730
// side := GetSide ( depot ) ;
43994: LD_ADDR_VAR 0 9
43998: PUSH
43999: LD_VAR 0 1
44003: PPUSH
44004: CALL_OW 255
44008: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44009: LD_VAR 0 9
44013: PPUSH
44014: LD_VAR 0 2
44018: PPUSH
44019: CALL 43507 0 2
44023: NOT
44024: IFFALSE 44028
// exit ;
44026: GO 44730
// pom := GetBase ( depot ) ;
44028: LD_ADDR_VAR 0 10
44032: PUSH
44033: LD_VAR 0 1
44037: PPUSH
44038: CALL_OW 274
44042: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44043: LD_ADDR_VAR 0 11
44047: PUSH
44048: LD_VAR 0 2
44052: PPUSH
44053: LD_VAR 0 1
44057: PPUSH
44058: CALL_OW 248
44062: PPUSH
44063: CALL_OW 450
44067: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44068: LD_VAR 0 10
44072: PPUSH
44073: LD_INT 1
44075: PPUSH
44076: CALL_OW 275
44080: PUSH
44081: LD_VAR 0 11
44085: PUSH
44086: LD_INT 1
44088: ARRAY
44089: GREATEREQUAL
44090: PUSH
44091: LD_VAR 0 10
44095: PPUSH
44096: LD_INT 2
44098: PPUSH
44099: CALL_OW 275
44103: PUSH
44104: LD_VAR 0 11
44108: PUSH
44109: LD_INT 2
44111: ARRAY
44112: GREATEREQUAL
44113: AND
44114: PUSH
44115: LD_VAR 0 10
44119: PPUSH
44120: LD_INT 3
44122: PPUSH
44123: CALL_OW 275
44127: PUSH
44128: LD_VAR 0 11
44132: PUSH
44133: LD_INT 3
44135: ARRAY
44136: GREATEREQUAL
44137: AND
44138: NOT
44139: IFFALSE 44143
// exit ;
44141: GO 44730
// if GetBType ( depot ) = b_depot then
44143: LD_VAR 0 1
44147: PPUSH
44148: CALL_OW 266
44152: PUSH
44153: LD_INT 0
44155: EQUAL
44156: IFFALSE 44168
// dist := 28 else
44158: LD_ADDR_VAR 0 14
44162: PUSH
44163: LD_INT 28
44165: ST_TO_ADDR
44166: GO 44176
// dist := 36 ;
44168: LD_ADDR_VAR 0 14
44172: PUSH
44173: LD_INT 36
44175: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44176: LD_VAR 0 1
44180: PPUSH
44181: LD_VAR 0 3
44185: PPUSH
44186: LD_VAR 0 4
44190: PPUSH
44191: CALL_OW 297
44195: PUSH
44196: LD_VAR 0 14
44200: GREATER
44201: IFFALSE 44205
// exit ;
44203: GO 44730
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44205: LD_ADDR_VAR 0 12
44209: PUSH
44210: LD_VAR 0 2
44214: PPUSH
44215: LD_VAR 0 3
44219: PPUSH
44220: LD_VAR 0 4
44224: PPUSH
44225: LD_VAR 0 5
44229: PPUSH
44230: LD_VAR 0 1
44234: PPUSH
44235: CALL_OW 248
44239: PPUSH
44240: LD_INT 0
44242: PPUSH
44243: CALL 44735 0 6
44247: ST_TO_ADDR
// if not hexes then
44248: LD_VAR 0 12
44252: NOT
44253: IFFALSE 44257
// exit ;
44255: GO 44730
// hex := GetHexInfo ( x , y ) ;
44257: LD_ADDR_VAR 0 15
44261: PUSH
44262: LD_VAR 0 3
44266: PPUSH
44267: LD_VAR 0 4
44271: PPUSH
44272: CALL_OW 546
44276: ST_TO_ADDR
// if hex [ 1 ] then
44277: LD_VAR 0 15
44281: PUSH
44282: LD_INT 1
44284: ARRAY
44285: IFFALSE 44289
// exit ;
44287: GO 44730
// height := hex [ 2 ] ;
44289: LD_ADDR_VAR 0 13
44293: PUSH
44294: LD_VAR 0 15
44298: PUSH
44299: LD_INT 2
44301: ARRAY
44302: ST_TO_ADDR
// for i = 1 to hexes do
44303: LD_ADDR_VAR 0 7
44307: PUSH
44308: DOUBLE
44309: LD_INT 1
44311: DEC
44312: ST_TO_ADDR
44313: LD_VAR 0 12
44317: PUSH
44318: FOR_TO
44319: IFFALSE 44649
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44321: LD_VAR 0 12
44325: PUSH
44326: LD_VAR 0 7
44330: ARRAY
44331: PUSH
44332: LD_INT 1
44334: ARRAY
44335: PPUSH
44336: LD_VAR 0 12
44340: PUSH
44341: LD_VAR 0 7
44345: ARRAY
44346: PUSH
44347: LD_INT 2
44349: ARRAY
44350: PPUSH
44351: CALL_OW 488
44355: NOT
44356: PUSH
44357: LD_VAR 0 12
44361: PUSH
44362: LD_VAR 0 7
44366: ARRAY
44367: PUSH
44368: LD_INT 1
44370: ARRAY
44371: PPUSH
44372: LD_VAR 0 12
44376: PUSH
44377: LD_VAR 0 7
44381: ARRAY
44382: PUSH
44383: LD_INT 2
44385: ARRAY
44386: PPUSH
44387: CALL_OW 428
44391: PUSH
44392: LD_INT 0
44394: GREATER
44395: OR
44396: PUSH
44397: LD_VAR 0 12
44401: PUSH
44402: LD_VAR 0 7
44406: ARRAY
44407: PUSH
44408: LD_INT 1
44410: ARRAY
44411: PPUSH
44412: LD_VAR 0 12
44416: PUSH
44417: LD_VAR 0 7
44421: ARRAY
44422: PUSH
44423: LD_INT 2
44425: ARRAY
44426: PPUSH
44427: CALL_OW 351
44431: OR
44432: IFFALSE 44438
// exit ;
44434: POP
44435: POP
44436: GO 44730
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44438: LD_ADDR_VAR 0 8
44442: PUSH
44443: LD_VAR 0 12
44447: PUSH
44448: LD_VAR 0 7
44452: ARRAY
44453: PUSH
44454: LD_INT 1
44456: ARRAY
44457: PPUSH
44458: LD_VAR 0 12
44462: PUSH
44463: LD_VAR 0 7
44467: ARRAY
44468: PUSH
44469: LD_INT 2
44471: ARRAY
44472: PPUSH
44473: CALL_OW 546
44477: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44478: LD_VAR 0 8
44482: PUSH
44483: LD_INT 1
44485: ARRAY
44486: PUSH
44487: LD_VAR 0 8
44491: PUSH
44492: LD_INT 2
44494: ARRAY
44495: PUSH
44496: LD_VAR 0 13
44500: PUSH
44501: LD_INT 2
44503: PLUS
44504: GREATER
44505: OR
44506: PUSH
44507: LD_VAR 0 8
44511: PUSH
44512: LD_INT 2
44514: ARRAY
44515: PUSH
44516: LD_VAR 0 13
44520: PUSH
44521: LD_INT 2
44523: MINUS
44524: LESS
44525: OR
44526: PUSH
44527: LD_VAR 0 8
44531: PUSH
44532: LD_INT 3
44534: ARRAY
44535: PUSH
44536: LD_INT 0
44538: PUSH
44539: LD_INT 8
44541: PUSH
44542: LD_INT 9
44544: PUSH
44545: LD_INT 10
44547: PUSH
44548: LD_INT 11
44550: PUSH
44551: LD_INT 12
44553: PUSH
44554: LD_INT 13
44556: PUSH
44557: LD_INT 16
44559: PUSH
44560: LD_INT 17
44562: PUSH
44563: LD_INT 18
44565: PUSH
44566: LD_INT 19
44568: PUSH
44569: LD_INT 20
44571: PUSH
44572: LD_INT 21
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: IN
44590: NOT
44591: OR
44592: PUSH
44593: LD_VAR 0 8
44597: PUSH
44598: LD_INT 5
44600: ARRAY
44601: NOT
44602: OR
44603: PUSH
44604: LD_VAR 0 8
44608: PUSH
44609: LD_INT 6
44611: ARRAY
44612: PUSH
44613: LD_INT 1
44615: PUSH
44616: LD_INT 2
44618: PUSH
44619: LD_INT 7
44621: PUSH
44622: LD_INT 9
44624: PUSH
44625: LD_INT 10
44627: PUSH
44628: LD_INT 11
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: IN
44639: NOT
44640: OR
44641: IFFALSE 44647
// exit ;
44643: POP
44644: POP
44645: GO 44730
// end ;
44647: GO 44318
44649: POP
44650: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44651: LD_VAR 0 9
44655: PPUSH
44656: LD_VAR 0 3
44660: PPUSH
44661: LD_VAR 0 4
44665: PPUSH
44666: LD_INT 20
44668: PPUSH
44669: CALL 36682 0 4
44673: PUSH
44674: LD_INT 4
44676: ARRAY
44677: IFFALSE 44681
// exit ;
44679: GO 44730
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44681: LD_VAR 0 2
44685: PUSH
44686: LD_INT 29
44688: PUSH
44689: LD_INT 30
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: IN
44696: PUSH
44697: LD_VAR 0 3
44701: PPUSH
44702: LD_VAR 0 4
44706: PPUSH
44707: LD_VAR 0 9
44711: PPUSH
44712: CALL_OW 440
44716: NOT
44717: AND
44718: IFFALSE 44722
// exit ;
44720: GO 44730
// result := true ;
44722: LD_ADDR_VAR 0 6
44726: PUSH
44727: LD_INT 1
44729: ST_TO_ADDR
// end ;
44730: LD_VAR 0 6
44734: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44735: LD_INT 0
44737: PPUSH
44738: PPUSH
44739: PPUSH
44740: PPUSH
44741: PPUSH
44742: PPUSH
44743: PPUSH
44744: PPUSH
44745: PPUSH
44746: PPUSH
44747: PPUSH
44748: PPUSH
44749: PPUSH
44750: PPUSH
44751: PPUSH
44752: PPUSH
44753: PPUSH
44754: PPUSH
44755: PPUSH
44756: PPUSH
44757: PPUSH
44758: PPUSH
44759: PPUSH
44760: PPUSH
44761: PPUSH
44762: PPUSH
44763: PPUSH
44764: PPUSH
44765: PPUSH
44766: PPUSH
44767: PPUSH
44768: PPUSH
44769: PPUSH
44770: PPUSH
44771: PPUSH
44772: PPUSH
44773: PPUSH
44774: PPUSH
44775: PPUSH
44776: PPUSH
44777: PPUSH
44778: PPUSH
44779: PPUSH
44780: PPUSH
44781: PPUSH
44782: PPUSH
44783: PPUSH
44784: PPUSH
44785: PPUSH
44786: PPUSH
44787: PPUSH
44788: PPUSH
44789: PPUSH
44790: PPUSH
44791: PPUSH
44792: PPUSH
44793: PPUSH
44794: PPUSH
// result = [ ] ;
44795: LD_ADDR_VAR 0 7
44799: PUSH
44800: EMPTY
44801: ST_TO_ADDR
// temp_list = [ ] ;
44802: LD_ADDR_VAR 0 9
44806: PUSH
44807: EMPTY
44808: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44809: LD_VAR 0 4
44813: PUSH
44814: LD_INT 0
44816: PUSH
44817: LD_INT 1
44819: PUSH
44820: LD_INT 2
44822: PUSH
44823: LD_INT 3
44825: PUSH
44826: LD_INT 4
44828: PUSH
44829: LD_INT 5
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: IN
44840: NOT
44841: PUSH
44842: LD_VAR 0 1
44846: PUSH
44847: LD_INT 0
44849: PUSH
44850: LD_INT 1
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: IN
44857: PUSH
44858: LD_VAR 0 5
44862: PUSH
44863: LD_INT 1
44865: PUSH
44866: LD_INT 2
44868: PUSH
44869: LD_INT 3
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: LIST
44876: IN
44877: NOT
44878: AND
44879: OR
44880: IFFALSE 44884
// exit ;
44882: GO 63275
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44884: LD_VAR 0 1
44888: PUSH
44889: LD_INT 6
44891: PUSH
44892: LD_INT 7
44894: PUSH
44895: LD_INT 8
44897: PUSH
44898: LD_INT 13
44900: PUSH
44901: LD_INT 12
44903: PUSH
44904: LD_INT 15
44906: PUSH
44907: LD_INT 11
44909: PUSH
44910: LD_INT 14
44912: PUSH
44913: LD_INT 10
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: IN
44927: IFFALSE 44937
// btype = b_lab ;
44929: LD_ADDR_VAR 0 1
44933: PUSH
44934: LD_INT 6
44936: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44937: LD_VAR 0 6
44941: PUSH
44942: LD_INT 0
44944: PUSH
44945: LD_INT 1
44947: PUSH
44948: LD_INT 2
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: LIST
44955: IN
44956: NOT
44957: PUSH
44958: LD_VAR 0 1
44962: PUSH
44963: LD_INT 0
44965: PUSH
44966: LD_INT 1
44968: PUSH
44969: LD_INT 2
44971: PUSH
44972: LD_INT 3
44974: PUSH
44975: LD_INT 6
44977: PUSH
44978: LD_INT 36
44980: PUSH
44981: LD_INT 4
44983: PUSH
44984: LD_INT 5
44986: PUSH
44987: LD_INT 31
44989: PUSH
44990: LD_INT 32
44992: PUSH
44993: LD_INT 33
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: IN
45009: NOT
45010: PUSH
45011: LD_VAR 0 6
45015: PUSH
45016: LD_INT 1
45018: EQUAL
45019: AND
45020: OR
45021: PUSH
45022: LD_VAR 0 1
45026: PUSH
45027: LD_INT 2
45029: PUSH
45030: LD_INT 3
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: IN
45037: NOT
45038: PUSH
45039: LD_VAR 0 6
45043: PUSH
45044: LD_INT 2
45046: EQUAL
45047: AND
45048: OR
45049: IFFALSE 45059
// mode = 0 ;
45051: LD_ADDR_VAR 0 6
45055: PUSH
45056: LD_INT 0
45058: ST_TO_ADDR
// case mode of 0 :
45059: LD_VAR 0 6
45063: PUSH
45064: LD_INT 0
45066: DOUBLE
45067: EQUAL
45068: IFTRUE 45072
45070: GO 56525
45072: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45073: LD_ADDR_VAR 0 11
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 0
45090: PUSH
45091: LD_INT 1
45093: NEG
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: LD_INT 0
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 1
45111: PUSH
45112: LD_INT 1
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 0
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 1
45131: NEG
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 1
45142: NEG
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 1
45154: NEG
45155: PUSH
45156: LD_INT 2
45158: NEG
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 0
45166: PUSH
45167: LD_INT 2
45169: NEG
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 1
45177: PUSH
45178: LD_INT 1
45180: NEG
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: LD_INT 2
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 0
45198: PUSH
45199: LD_INT 2
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 1
45208: NEG
45209: PUSH
45210: LD_INT 1
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 1
45219: PUSH
45220: LD_INT 3
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 0
45229: PUSH
45230: LD_INT 3
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 1
45239: NEG
45240: PUSH
45241: LD_INT 2
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45266: LD_ADDR_VAR 0 12
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: LD_INT 0
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: LD_INT 1
45286: NEG
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 1
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: LD_INT 1
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: LD_INT 1
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: LD_INT 0
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 1
45335: NEG
45336: PUSH
45337: LD_INT 1
45339: NEG
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 1
45347: PUSH
45348: LD_INT 1
45350: NEG
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 2
45358: PUSH
45359: LD_INT 0
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 2
45368: PUSH
45369: LD_INT 1
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 1
45378: NEG
45379: PUSH
45380: LD_INT 1
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 2
45389: NEG
45390: PUSH
45391: LD_INT 0
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 2
45400: NEG
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 2
45412: NEG
45413: PUSH
45414: LD_INT 1
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 3
45423: NEG
45424: PUSH
45425: LD_INT 0
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 3
45434: NEG
45435: PUSH
45436: LD_INT 1
45438: NEG
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45462: LD_ADDR_VAR 0 13
45466: PUSH
45467: LD_INT 0
45469: PUSH
45470: LD_INT 0
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 0
45479: PUSH
45480: LD_INT 1
45482: NEG
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 1
45490: PUSH
45491: LD_INT 0
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 1
45500: PUSH
45501: LD_INT 1
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 0
45510: PUSH
45511: LD_INT 1
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 1
45520: NEG
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: NEG
45532: PUSH
45533: LD_INT 1
45535: NEG
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 1
45543: NEG
45544: PUSH
45545: LD_INT 2
45547: NEG
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 2
45555: PUSH
45556: LD_INT 1
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 2
45565: PUSH
45566: LD_INT 2
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: LD_INT 2
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 2
45585: NEG
45586: PUSH
45587: LD_INT 1
45589: NEG
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 2
45597: NEG
45598: PUSH
45599: LD_INT 2
45601: NEG
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 2
45609: NEG
45610: PUSH
45611: LD_INT 3
45613: NEG
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 3
45621: NEG
45622: PUSH
45623: LD_INT 2
45625: NEG
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 3
45633: NEG
45634: PUSH
45635: LD_INT 3
45637: NEG
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45661: LD_ADDR_VAR 0 14
45665: PUSH
45666: LD_INT 0
45668: PUSH
45669: LD_INT 0
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 0
45678: PUSH
45679: LD_INT 1
45681: NEG
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 1
45689: PUSH
45690: LD_INT 0
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 1
45699: PUSH
45700: LD_INT 1
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 0
45709: PUSH
45710: LD_INT 1
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 1
45719: NEG
45720: PUSH
45721: LD_INT 0
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 1
45730: NEG
45731: PUSH
45732: LD_INT 1
45734: NEG
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 1
45742: NEG
45743: PUSH
45744: LD_INT 2
45746: NEG
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: LD_INT 2
45757: NEG
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 1
45765: PUSH
45766: LD_INT 1
45768: NEG
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 1
45776: PUSH
45777: LD_INT 2
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: LD_INT 2
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 1
45796: NEG
45797: PUSH
45798: LD_INT 1
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 1
45807: NEG
45808: PUSH
45809: LD_INT 3
45811: NEG
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 0
45819: PUSH
45820: LD_INT 3
45822: NEG
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 1
45830: PUSH
45831: LD_INT 2
45833: NEG
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45857: LD_ADDR_VAR 0 15
45861: PUSH
45862: LD_INT 0
45864: PUSH
45865: LD_INT 0
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: LD_INT 1
45877: NEG
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 1
45885: PUSH
45886: LD_INT 0
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 1
45895: PUSH
45896: LD_INT 1
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: LD_INT 1
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 1
45915: NEG
45916: PUSH
45917: LD_INT 0
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 1
45926: NEG
45927: PUSH
45928: LD_INT 1
45930: NEG
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 1
45938: PUSH
45939: LD_INT 1
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 2
45949: PUSH
45950: LD_INT 0
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 2
45959: PUSH
45960: LD_INT 1
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 1
45969: NEG
45970: PUSH
45971: LD_INT 1
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 2
45980: NEG
45981: PUSH
45982: LD_INT 0
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 2
45991: NEG
45992: PUSH
45993: LD_INT 1
45995: NEG
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 2
46003: PUSH
46004: LD_INT 1
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 3
46014: PUSH
46015: LD_INT 0
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 3
46024: PUSH
46025: LD_INT 1
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46050: LD_ADDR_VAR 0 16
46054: PUSH
46055: LD_INT 0
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 1
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: LD_INT 1
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: LD_INT 1
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 1
46108: NEG
46109: PUSH
46110: LD_INT 0
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 1
46119: NEG
46120: PUSH
46121: LD_INT 1
46123: NEG
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 1
46131: NEG
46132: PUSH
46133: LD_INT 2
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 2
46143: PUSH
46144: LD_INT 1
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 2
46153: PUSH
46154: LD_INT 2
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 1
46163: PUSH
46164: LD_INT 2
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 2
46173: NEG
46174: PUSH
46175: LD_INT 1
46177: NEG
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 2
46185: NEG
46186: PUSH
46187: LD_INT 2
46189: NEG
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 3
46197: PUSH
46198: LD_INT 2
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: LD_INT 3
46207: PUSH
46208: LD_INT 3
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 2
46217: PUSH
46218: LD_INT 3
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46243: LD_ADDR_VAR 0 17
46247: PUSH
46248: LD_INT 0
46250: PUSH
46251: LD_INT 0
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 0
46260: PUSH
46261: LD_INT 1
46263: NEG
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 1
46271: PUSH
46272: LD_INT 0
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 1
46281: PUSH
46282: LD_INT 1
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 0
46291: PUSH
46292: LD_INT 1
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 1
46301: NEG
46302: PUSH
46303: LD_INT 0
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 1
46312: NEG
46313: PUSH
46314: LD_INT 1
46316: NEG
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 1
46324: NEG
46325: PUSH
46326: LD_INT 2
46328: NEG
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: LD_INT 2
46339: NEG
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 1
46347: PUSH
46348: LD_INT 1
46350: NEG
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 2
46358: PUSH
46359: LD_INT 0
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 2
46368: PUSH
46369: LD_INT 1
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 2
46378: PUSH
46379: LD_INT 2
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 1
46388: PUSH
46389: LD_INT 2
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 0
46398: PUSH
46399: LD_INT 2
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 1
46408: NEG
46409: PUSH
46410: LD_INT 1
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 2
46419: NEG
46420: PUSH
46421: LD_INT 0
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 2
46430: NEG
46431: PUSH
46432: LD_INT 1
46434: NEG
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 2
46442: NEG
46443: PUSH
46444: LD_INT 2
46446: NEG
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46473: LD_ADDR_VAR 0 18
46477: PUSH
46478: LD_INT 0
46480: PUSH
46481: LD_INT 0
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: LD_INT 1
46493: NEG
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 1
46501: PUSH
46502: LD_INT 0
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 1
46511: PUSH
46512: LD_INT 1
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: LD_INT 1
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 1
46531: NEG
46532: PUSH
46533: LD_INT 0
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 1
46542: NEG
46543: PUSH
46544: LD_INT 1
46546: NEG
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 1
46554: NEG
46555: PUSH
46556: LD_INT 2
46558: NEG
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: LD_INT 2
46569: NEG
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 1
46577: PUSH
46578: LD_INT 1
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 2
46588: PUSH
46589: LD_INT 0
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 2
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 2
46608: PUSH
46609: LD_INT 2
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 1
46618: PUSH
46619: LD_INT 2
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: LD_INT 2
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 1
46638: NEG
46639: PUSH
46640: LD_INT 1
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 2
46649: NEG
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 2
46660: NEG
46661: PUSH
46662: LD_INT 1
46664: NEG
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 2
46672: NEG
46673: PUSH
46674: LD_INT 2
46676: NEG
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46703: LD_ADDR_VAR 0 19
46707: PUSH
46708: LD_INT 0
46710: PUSH
46711: LD_INT 0
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 0
46720: PUSH
46721: LD_INT 1
46723: NEG
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 1
46731: PUSH
46732: LD_INT 0
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: LD_INT 1
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 0
46751: PUSH
46752: LD_INT 1
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 1
46772: NEG
46773: PUSH
46774: LD_INT 1
46776: NEG
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 1
46784: NEG
46785: PUSH
46786: LD_INT 2
46788: NEG
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: LD_INT 2
46799: NEG
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 1
46807: PUSH
46808: LD_INT 1
46810: NEG
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 2
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 2
46828: PUSH
46829: LD_INT 1
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 2
46838: PUSH
46839: LD_INT 2
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 1
46848: PUSH
46849: LD_INT 2
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 0
46858: PUSH
46859: LD_INT 2
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 1
46868: NEG
46869: PUSH
46870: LD_INT 1
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 2
46879: NEG
46880: PUSH
46881: LD_INT 0
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 2
46890: NEG
46891: PUSH
46892: LD_INT 1
46894: NEG
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 2
46902: NEG
46903: PUSH
46904: LD_INT 2
46906: NEG
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46933: LD_ADDR_VAR 0 20
46937: PUSH
46938: LD_INT 0
46940: PUSH
46941: LD_INT 0
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: LD_INT 1
46953: NEG
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 1
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: LD_INT 1
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 0
46981: PUSH
46982: LD_INT 1
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: PUSH
46993: LD_INT 0
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 1
47002: NEG
47003: PUSH
47004: LD_INT 1
47006: NEG
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: NEG
47015: PUSH
47016: LD_INT 2
47018: NEG
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 0
47026: PUSH
47027: LD_INT 2
47029: NEG
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 1
47037: PUSH
47038: LD_INT 1
47040: NEG
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 2
47048: PUSH
47049: LD_INT 0
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 2
47058: PUSH
47059: LD_INT 1
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 2
47068: PUSH
47069: LD_INT 2
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 1
47078: PUSH
47079: LD_INT 2
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: LD_INT 2
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 1
47098: NEG
47099: PUSH
47100: LD_INT 1
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 2
47109: NEG
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 2
47120: NEG
47121: PUSH
47122: LD_INT 1
47124: NEG
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 2
47132: NEG
47133: PUSH
47134: LD_INT 2
47136: NEG
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47163: LD_ADDR_VAR 0 21
47167: PUSH
47168: LD_INT 0
47170: PUSH
47171: LD_INT 0
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 0
47180: PUSH
47181: LD_INT 1
47183: NEG
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 1
47191: PUSH
47192: LD_INT 0
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 1
47201: PUSH
47202: LD_INT 1
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 0
47211: PUSH
47212: LD_INT 1
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 1
47221: NEG
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 1
47232: NEG
47233: PUSH
47234: LD_INT 1
47236: NEG
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 1
47244: NEG
47245: PUSH
47246: LD_INT 2
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 0
47256: PUSH
47257: LD_INT 2
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 1
47267: PUSH
47268: LD_INT 1
47270: NEG
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 2
47278: PUSH
47279: LD_INT 0
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 2
47288: PUSH
47289: LD_INT 1
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 2
47298: PUSH
47299: LD_INT 2
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 1
47308: PUSH
47309: LD_INT 2
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: LD_INT 2
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 1
47328: NEG
47329: PUSH
47330: LD_INT 1
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 2
47339: NEG
47340: PUSH
47341: LD_INT 0
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 2
47350: NEG
47351: PUSH
47352: LD_INT 1
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 2
47362: NEG
47363: PUSH
47364: LD_INT 2
47366: NEG
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47393: LD_ADDR_VAR 0 22
47397: PUSH
47398: LD_INT 0
47400: PUSH
47401: LD_INT 0
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 0
47410: PUSH
47411: LD_INT 1
47413: NEG
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 1
47421: PUSH
47422: LD_INT 0
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 1
47431: PUSH
47432: LD_INT 1
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: LD_INT 1
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 1
47451: NEG
47452: PUSH
47453: LD_INT 0
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 1
47462: NEG
47463: PUSH
47464: LD_INT 1
47466: NEG
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 1
47474: NEG
47475: PUSH
47476: LD_INT 2
47478: NEG
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 0
47486: PUSH
47487: LD_INT 2
47489: NEG
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 1
47497: PUSH
47498: LD_INT 1
47500: NEG
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 2
47508: PUSH
47509: LD_INT 0
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 2
47518: PUSH
47519: LD_INT 1
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 2
47528: PUSH
47529: LD_INT 2
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 1
47538: PUSH
47539: LD_INT 2
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 0
47548: PUSH
47549: LD_INT 2
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 1
47558: NEG
47559: PUSH
47560: LD_INT 1
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 2
47569: NEG
47570: PUSH
47571: LD_INT 0
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 2
47580: NEG
47581: PUSH
47582: LD_INT 1
47584: NEG
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 2
47592: NEG
47593: PUSH
47594: LD_INT 2
47596: NEG
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47623: LD_ADDR_VAR 0 23
47627: PUSH
47628: LD_INT 0
47630: PUSH
47631: LD_INT 0
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 0
47640: PUSH
47641: LD_INT 1
47643: NEG
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 1
47651: PUSH
47652: LD_INT 0
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 1
47661: PUSH
47662: LD_INT 1
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 1
47681: NEG
47682: PUSH
47683: LD_INT 0
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 1
47692: NEG
47693: PUSH
47694: LD_INT 1
47696: NEG
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 1
47704: NEG
47705: PUSH
47706: LD_INT 2
47708: NEG
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 0
47716: PUSH
47717: LD_INT 2
47719: NEG
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 1
47727: PUSH
47728: LD_INT 1
47730: NEG
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 2
47738: PUSH
47739: LD_INT 0
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 2
47748: PUSH
47749: LD_INT 1
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 2
47758: PUSH
47759: LD_INT 2
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 1
47768: PUSH
47769: LD_INT 2
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 0
47778: PUSH
47779: LD_INT 2
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: PUSH
47790: LD_INT 1
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 2
47799: NEG
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 2
47810: NEG
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 2
47822: NEG
47823: PUSH
47824: LD_INT 2
47826: NEG
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 2
47834: NEG
47835: PUSH
47836: LD_INT 3
47838: NEG
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 1
47846: NEG
47847: PUSH
47848: LD_INT 3
47850: NEG
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 1
47858: PUSH
47859: LD_INT 2
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 2
47869: PUSH
47870: LD_INT 1
47872: NEG
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47903: LD_ADDR_VAR 0 24
47907: PUSH
47908: LD_INT 0
47910: PUSH
47911: LD_INT 0
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: LD_INT 1
47923: NEG
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 1
47931: PUSH
47932: LD_INT 0
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 1
47941: PUSH
47942: LD_INT 1
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 0
47951: PUSH
47952: LD_INT 1
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 1
47961: NEG
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 1
47972: NEG
47973: PUSH
47974: LD_INT 1
47976: NEG
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 1
47984: NEG
47985: PUSH
47986: LD_INT 2
47988: NEG
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: LD_INT 2
47999: NEG
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 1
48007: PUSH
48008: LD_INT 1
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 2
48018: PUSH
48019: LD_INT 0
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 2
48028: PUSH
48029: LD_INT 1
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 2
48038: PUSH
48039: LD_INT 2
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 1
48048: PUSH
48049: LD_INT 2
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 0
48058: PUSH
48059: LD_INT 2
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 1
48068: NEG
48069: PUSH
48070: LD_INT 1
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 2
48079: NEG
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 2
48090: NEG
48091: PUSH
48092: LD_INT 1
48094: NEG
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 2
48102: NEG
48103: PUSH
48104: LD_INT 2
48106: NEG
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 1
48114: PUSH
48115: LD_INT 2
48117: NEG
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 2
48125: PUSH
48126: LD_INT 1
48128: NEG
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 3
48136: PUSH
48137: LD_INT 1
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 3
48146: PUSH
48147: LD_INT 2
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48179: LD_ADDR_VAR 0 25
48183: PUSH
48184: LD_INT 0
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 0
48196: PUSH
48197: LD_INT 1
48199: NEG
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 1
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 1
48217: PUSH
48218: LD_INT 1
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 0
48227: PUSH
48228: LD_INT 1
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 1
48237: NEG
48238: PUSH
48239: LD_INT 0
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 1
48248: NEG
48249: PUSH
48250: LD_INT 1
48252: NEG
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 1
48260: NEG
48261: PUSH
48262: LD_INT 2
48264: NEG
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: LD_INT 2
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 1
48283: PUSH
48284: LD_INT 1
48286: NEG
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 2
48294: PUSH
48295: LD_INT 0
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 2
48304: PUSH
48305: LD_INT 1
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 2
48314: PUSH
48315: LD_INT 2
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 1
48324: PUSH
48325: LD_INT 2
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 0
48334: PUSH
48335: LD_INT 2
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 1
48344: NEG
48345: PUSH
48346: LD_INT 1
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 2
48355: NEG
48356: PUSH
48357: LD_INT 0
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 2
48366: NEG
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 2
48378: NEG
48379: PUSH
48380: LD_INT 2
48382: NEG
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 3
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 3
48400: PUSH
48401: LD_INT 2
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 2
48410: PUSH
48411: LD_INT 3
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 1
48420: PUSH
48421: LD_INT 3
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48453: LD_ADDR_VAR 0 26
48457: PUSH
48458: LD_INT 0
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 0
48470: PUSH
48471: LD_INT 1
48473: NEG
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 1
48481: PUSH
48482: LD_INT 0
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: LD_INT 1
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 0
48501: PUSH
48502: LD_INT 1
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 1
48511: NEG
48512: PUSH
48513: LD_INT 0
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 1
48522: NEG
48523: PUSH
48524: LD_INT 1
48526: NEG
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 1
48534: NEG
48535: PUSH
48536: LD_INT 2
48538: NEG
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 0
48546: PUSH
48547: LD_INT 2
48549: NEG
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 1
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 2
48568: PUSH
48569: LD_INT 0
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 2
48578: PUSH
48579: LD_INT 1
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 2
48588: PUSH
48589: LD_INT 2
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 1
48598: PUSH
48599: LD_INT 2
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 0
48608: PUSH
48609: LD_INT 2
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 1
48618: NEG
48619: PUSH
48620: LD_INT 1
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 2
48629: NEG
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 2
48640: NEG
48641: PUSH
48642: LD_INT 1
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 2
48652: NEG
48653: PUSH
48654: LD_INT 2
48656: NEG
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 2
48664: PUSH
48665: LD_INT 3
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 1
48674: PUSH
48675: LD_INT 3
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 1
48684: NEG
48685: PUSH
48686: LD_INT 2
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 2
48695: NEG
48696: PUSH
48697: LD_INT 1
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48729: LD_ADDR_VAR 0 27
48733: PUSH
48734: LD_INT 0
48736: PUSH
48737: LD_INT 0
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 0
48746: PUSH
48747: LD_INT 1
48749: NEG
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 1
48757: PUSH
48758: LD_INT 0
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 1
48767: PUSH
48768: LD_INT 1
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 0
48777: PUSH
48778: LD_INT 1
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 1
48787: NEG
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 1
48798: NEG
48799: PUSH
48800: LD_INT 1
48802: NEG
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 1
48810: NEG
48811: PUSH
48812: LD_INT 2
48814: NEG
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 0
48822: PUSH
48823: LD_INT 2
48825: NEG
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 1
48833: PUSH
48834: LD_INT 1
48836: NEG
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 2
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 2
48854: PUSH
48855: LD_INT 1
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 2
48864: PUSH
48865: LD_INT 2
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 1
48874: PUSH
48875: LD_INT 2
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 0
48884: PUSH
48885: LD_INT 2
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 1
48894: NEG
48895: PUSH
48896: LD_INT 1
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 2
48905: NEG
48906: PUSH
48907: LD_INT 0
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 2
48916: NEG
48917: PUSH
48918: LD_INT 1
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 2
48928: NEG
48929: PUSH
48930: LD_INT 2
48932: NEG
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 1
48940: NEG
48941: PUSH
48942: LD_INT 2
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 2
48951: NEG
48952: PUSH
48953: LD_INT 1
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 3
48962: NEG
48963: PUSH
48964: LD_INT 1
48966: NEG
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 3
48974: NEG
48975: PUSH
48976: LD_INT 2
48978: NEG
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49009: LD_ADDR_VAR 0 28
49013: PUSH
49014: LD_INT 0
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 0
49026: PUSH
49027: LD_INT 1
49029: NEG
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 1
49037: PUSH
49038: LD_INT 0
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 1
49047: PUSH
49048: LD_INT 1
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 0
49057: PUSH
49058: LD_INT 1
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 1
49067: NEG
49068: PUSH
49069: LD_INT 0
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 1
49078: NEG
49079: PUSH
49080: LD_INT 1
49082: NEG
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 1
49090: NEG
49091: PUSH
49092: LD_INT 2
49094: NEG
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 0
49102: PUSH
49103: LD_INT 2
49105: NEG
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 1
49113: PUSH
49114: LD_INT 1
49116: NEG
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 2
49124: PUSH
49125: LD_INT 0
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 2
49134: PUSH
49135: LD_INT 1
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 2
49144: PUSH
49145: LD_INT 2
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 1
49154: PUSH
49155: LD_INT 2
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 0
49164: PUSH
49165: LD_INT 2
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 1
49174: NEG
49175: PUSH
49176: LD_INT 1
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 2
49185: NEG
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 2
49196: NEG
49197: PUSH
49198: LD_INT 1
49200: NEG
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 2
49208: NEG
49209: PUSH
49210: LD_INT 2
49212: NEG
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 2
49220: NEG
49221: PUSH
49222: LD_INT 3
49224: NEG
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 1
49232: NEG
49233: PUSH
49234: LD_INT 3
49236: NEG
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 3
49244: NEG
49245: PUSH
49246: LD_INT 1
49248: NEG
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 3
49256: NEG
49257: PUSH
49258: LD_INT 2
49260: NEG
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49291: LD_ADDR_VAR 0 29
49295: PUSH
49296: LD_INT 0
49298: PUSH
49299: LD_INT 0
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 0
49308: PUSH
49309: LD_INT 1
49311: NEG
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 1
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 1
49329: PUSH
49330: LD_INT 1
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 0
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 1
49349: NEG
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 1
49360: NEG
49361: PUSH
49362: LD_INT 1
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 1
49372: NEG
49373: PUSH
49374: LD_INT 2
49376: NEG
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 0
49384: PUSH
49385: LD_INT 2
49387: NEG
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 1
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 2
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 2
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 1
49426: PUSH
49427: LD_INT 2
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 0
49436: PUSH
49437: LD_INT 2
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 1
49446: NEG
49447: PUSH
49448: LD_INT 1
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 2
49457: NEG
49458: PUSH
49459: LD_INT 1
49461: NEG
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 2
49469: NEG
49470: PUSH
49471: LD_INT 2
49473: NEG
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 2
49481: NEG
49482: PUSH
49483: LD_INT 3
49485: NEG
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 2
49493: PUSH
49494: LD_INT 1
49496: NEG
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 3
49504: PUSH
49505: LD_INT 1
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 1
49514: PUSH
49515: LD_INT 3
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 1
49524: NEG
49525: PUSH
49526: LD_INT 2
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 3
49535: NEG
49536: PUSH
49537: LD_INT 2
49539: NEG
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49570: LD_ADDR_VAR 0 30
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: LD_INT 0
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 0
49587: PUSH
49588: LD_INT 1
49590: NEG
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 1
49598: PUSH
49599: LD_INT 0
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 1
49608: PUSH
49609: LD_INT 1
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 0
49618: PUSH
49619: LD_INT 1
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 1
49628: NEG
49629: PUSH
49630: LD_INT 0
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 1
49639: NEG
49640: PUSH
49641: LD_INT 1
49643: NEG
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 1
49651: NEG
49652: PUSH
49653: LD_INT 2
49655: NEG
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 0
49663: PUSH
49664: LD_INT 2
49666: NEG
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 1
49674: PUSH
49675: LD_INT 1
49677: NEG
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 2
49685: PUSH
49686: LD_INT 0
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 2
49695: PUSH
49696: LD_INT 1
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 2
49705: PUSH
49706: LD_INT 2
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 1
49715: PUSH
49716: LD_INT 2
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 1
49725: NEG
49726: PUSH
49727: LD_INT 1
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 2
49736: NEG
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 2
49747: NEG
49748: PUSH
49749: LD_INT 1
49751: NEG
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 1
49759: NEG
49760: PUSH
49761: LD_INT 3
49763: NEG
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: LD_INT 2
49774: NEG
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 3
49782: PUSH
49783: LD_INT 2
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 2
49792: PUSH
49793: LD_INT 3
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 2
49802: NEG
49803: PUSH
49804: LD_INT 1
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 3
49813: NEG
49814: PUSH
49815: LD_INT 1
49817: NEG
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49848: LD_ADDR_VAR 0 31
49852: PUSH
49853: LD_INT 0
49855: PUSH
49856: LD_INT 0
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 0
49865: PUSH
49866: LD_INT 1
49868: NEG
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 1
49876: PUSH
49877: LD_INT 0
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 1
49886: PUSH
49887: LD_INT 1
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 0
49896: PUSH
49897: LD_INT 1
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 1
49906: NEG
49907: PUSH
49908: LD_INT 0
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 1
49917: NEG
49918: PUSH
49919: LD_INT 1
49921: NEG
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 1
49929: NEG
49930: PUSH
49931: LD_INT 2
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 1
49941: PUSH
49942: LD_INT 1
49944: NEG
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 2
49952: PUSH
49953: LD_INT 0
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 2
49962: PUSH
49963: LD_INT 1
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 2
49972: PUSH
49973: LD_INT 2
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 1
49982: PUSH
49983: LD_INT 2
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 0
49992: PUSH
49993: LD_INT 2
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 1
50002: NEG
50003: PUSH
50004: LD_INT 1
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 2
50013: NEG
50014: PUSH
50015: LD_INT 1
50017: NEG
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 2
50025: NEG
50026: PUSH
50027: LD_INT 2
50029: NEG
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 2
50037: NEG
50038: PUSH
50039: LD_INT 3
50041: NEG
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 2
50049: PUSH
50050: LD_INT 1
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 3
50060: PUSH
50061: LD_INT 1
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 1
50070: PUSH
50071: LD_INT 3
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 1
50080: NEG
50081: PUSH
50082: LD_INT 2
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 3
50091: NEG
50092: PUSH
50093: LD_INT 2
50095: NEG
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50126: LD_ADDR_VAR 0 32
50130: PUSH
50131: LD_INT 0
50133: PUSH
50134: LD_INT 0
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 0
50143: PUSH
50144: LD_INT 1
50146: NEG
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 1
50154: PUSH
50155: LD_INT 0
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 1
50164: PUSH
50165: LD_INT 1
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: LD_INT 1
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 1
50184: NEG
50185: PUSH
50186: LD_INT 0
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 1
50195: NEG
50196: PUSH
50197: LD_INT 1
50199: NEG
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 1
50207: NEG
50208: PUSH
50209: LD_INT 2
50211: NEG
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 0
50219: PUSH
50220: LD_INT 2
50222: NEG
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 1
50230: PUSH
50231: LD_INT 1
50233: NEG
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 2
50241: PUSH
50242: LD_INT 1
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 2
50251: PUSH
50252: LD_INT 2
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 1
50261: PUSH
50262: LD_INT 2
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 0
50271: PUSH
50272: LD_INT 2
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 1
50281: NEG
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 2
50292: NEG
50293: PUSH
50294: LD_INT 0
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 2
50303: NEG
50304: PUSH
50305: LD_INT 1
50307: NEG
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: LD_INT 3
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 1
50327: PUSH
50328: LD_INT 2
50330: NEG
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 3
50338: PUSH
50339: LD_INT 2
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 2
50348: PUSH
50349: LD_INT 3
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 2
50358: NEG
50359: PUSH
50360: LD_INT 1
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 3
50369: NEG
50370: PUSH
50371: LD_INT 1
50373: NEG
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50404: LD_ADDR_VAR 0 33
50408: PUSH
50409: LD_INT 0
50411: PUSH
50412: LD_INT 0
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 0
50421: PUSH
50422: LD_INT 1
50424: NEG
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 1
50432: PUSH
50433: LD_INT 0
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 1
50442: PUSH
50443: LD_INT 1
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 1
50473: NEG
50474: PUSH
50475: LD_INT 1
50477: NEG
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 1
50485: NEG
50486: PUSH
50487: LD_INT 2
50489: NEG
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 1
50497: PUSH
50498: LD_INT 1
50500: NEG
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 2
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 2
50518: PUSH
50519: LD_INT 1
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 1
50528: PUSH
50529: LD_INT 2
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: LD_INT 2
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: LD_INT 1
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 2
50559: NEG
50560: PUSH
50561: LD_INT 0
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 2
50570: NEG
50571: PUSH
50572: LD_INT 1
50574: NEG
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 2
50582: NEG
50583: PUSH
50584: LD_INT 2
50586: NEG
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 2
50594: NEG
50595: PUSH
50596: LD_INT 3
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 2
50606: PUSH
50607: LD_INT 1
50609: NEG
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 3
50617: PUSH
50618: LD_INT 1
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: LD_INT 3
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 1
50637: NEG
50638: PUSH
50639: LD_INT 2
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 3
50648: NEG
50649: PUSH
50650: LD_INT 2
50652: NEG
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50683: LD_ADDR_VAR 0 34
50687: PUSH
50688: LD_INT 0
50690: PUSH
50691: LD_INT 0
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: LD_INT 1
50703: NEG
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 1
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 1
50721: PUSH
50722: LD_INT 1
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 0
50731: PUSH
50732: LD_INT 1
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 1
50741: NEG
50742: PUSH
50743: LD_INT 0
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 1
50752: NEG
50753: PUSH
50754: LD_INT 1
50756: NEG
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 1
50764: NEG
50765: PUSH
50766: LD_INT 2
50768: NEG
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 0
50776: PUSH
50777: LD_INT 2
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 1
50787: PUSH
50788: LD_INT 1
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 2
50798: PUSH
50799: LD_INT 1
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 2
50808: PUSH
50809: LD_INT 2
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 1
50818: PUSH
50819: LD_INT 2
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 1
50828: NEG
50829: PUSH
50830: LD_INT 1
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 2
50839: NEG
50840: PUSH
50841: LD_INT 0
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 2
50850: NEG
50851: PUSH
50852: LD_INT 1
50854: NEG
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 2
50862: NEG
50863: PUSH
50864: LD_INT 2
50866: NEG
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: LD_INT 3
50878: NEG
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 1
50886: PUSH
50887: LD_INT 2
50889: NEG
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 3
50897: PUSH
50898: LD_INT 2
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 2
50907: PUSH
50908: LD_INT 3
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 2
50917: NEG
50918: PUSH
50919: LD_INT 1
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 3
50928: NEG
50929: PUSH
50930: LD_INT 1
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50963: LD_ADDR_VAR 0 35
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: LD_INT 0
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 0
50980: PUSH
50981: LD_INT 1
50983: NEG
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 1
50991: PUSH
50992: LD_INT 0
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 1
51001: PUSH
51002: LD_INT 1
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 0
51011: PUSH
51012: LD_INT 1
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 1
51021: NEG
51022: PUSH
51023: LD_INT 0
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 1
51032: NEG
51033: PUSH
51034: LD_INT 1
51036: NEG
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 2
51044: PUSH
51045: LD_INT 1
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 2
51054: NEG
51055: PUSH
51056: LD_INT 1
51058: NEG
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51075: LD_ADDR_VAR 0 36
51079: PUSH
51080: LD_INT 0
51082: PUSH
51083: LD_INT 0
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 0
51092: PUSH
51093: LD_INT 1
51095: NEG
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 1
51103: PUSH
51104: LD_INT 0
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 1
51113: PUSH
51114: LD_INT 1
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 0
51123: PUSH
51124: LD_INT 1
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 1
51133: NEG
51134: PUSH
51135: LD_INT 0
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 1
51144: NEG
51145: PUSH
51146: LD_INT 1
51148: NEG
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 1
51156: NEG
51157: PUSH
51158: LD_INT 2
51160: NEG
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: LD_INT 2
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51187: LD_ADDR_VAR 0 37
51191: PUSH
51192: LD_INT 0
51194: PUSH
51195: LD_INT 0
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 0
51204: PUSH
51205: LD_INT 1
51207: NEG
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 1
51215: PUSH
51216: LD_INT 0
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 1
51225: PUSH
51226: LD_INT 1
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 0
51235: PUSH
51236: LD_INT 1
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 1
51245: NEG
51246: PUSH
51247: LD_INT 0
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 1
51256: NEG
51257: PUSH
51258: LD_INT 1
51260: NEG
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 1
51268: PUSH
51269: LD_INT 1
51271: NEG
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 1
51279: NEG
51280: PUSH
51281: LD_INT 1
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51299: LD_ADDR_VAR 0 38
51303: PUSH
51304: LD_INT 0
51306: PUSH
51307: LD_INT 0
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: LD_INT 1
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 1
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 1
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 1
51357: NEG
51358: PUSH
51359: LD_INT 0
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 1
51368: NEG
51369: PUSH
51370: LD_INT 1
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 2
51380: PUSH
51381: LD_INT 1
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 2
51390: NEG
51391: PUSH
51392: LD_INT 1
51394: NEG
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51411: LD_ADDR_VAR 0 39
51415: PUSH
51416: LD_INT 0
51418: PUSH
51419: LD_INT 0
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 0
51428: PUSH
51429: LD_INT 1
51431: NEG
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 1
51439: PUSH
51440: LD_INT 0
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 1
51449: PUSH
51450: LD_INT 1
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 0
51459: PUSH
51460: LD_INT 1
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 1
51469: NEG
51470: PUSH
51471: LD_INT 0
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 1
51480: NEG
51481: PUSH
51482: LD_INT 1
51484: NEG
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 1
51492: NEG
51493: PUSH
51494: LD_INT 2
51496: NEG
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 1
51504: PUSH
51505: LD_INT 2
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51523: LD_ADDR_VAR 0 40
51527: PUSH
51528: LD_INT 0
51530: PUSH
51531: LD_INT 0
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 0
51540: PUSH
51541: LD_INT 1
51543: NEG
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 1
51551: PUSH
51552: LD_INT 0
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 1
51561: PUSH
51562: LD_INT 1
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 0
51571: PUSH
51572: LD_INT 1
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 1
51581: NEG
51582: PUSH
51583: LD_INT 0
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 1
51592: NEG
51593: PUSH
51594: LD_INT 1
51596: NEG
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 1
51604: PUSH
51605: LD_INT 1
51607: NEG
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 1
51615: NEG
51616: PUSH
51617: LD_INT 1
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51635: LD_ADDR_VAR 0 41
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 0
51652: PUSH
51653: LD_INT 1
51655: NEG
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 1
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 1
51673: PUSH
51674: LD_INT 1
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 0
51683: PUSH
51684: LD_INT 1
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 1
51693: NEG
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 1
51704: NEG
51705: PUSH
51706: LD_INT 1
51708: NEG
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 1
51716: NEG
51717: PUSH
51718: LD_INT 2
51720: NEG
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 1
51728: PUSH
51729: LD_INT 1
51731: NEG
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 2
51739: PUSH
51740: LD_INT 0
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 2
51749: PUSH
51750: LD_INT 1
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 2
51759: PUSH
51760: LD_INT 2
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 1
51769: PUSH
51770: LD_INT 2
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 1
51779: NEG
51780: PUSH
51781: LD_INT 1
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 2
51790: NEG
51791: PUSH
51792: LD_INT 0
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 2
51801: NEG
51802: PUSH
51803: LD_INT 1
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 2
51813: NEG
51814: PUSH
51815: LD_INT 2
51817: NEG
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 2
51825: NEG
51826: PUSH
51827: LD_INT 3
51829: NEG
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 2
51837: PUSH
51838: LD_INT 1
51840: NEG
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 3
51848: PUSH
51849: LD_INT 0
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 3
51858: PUSH
51859: LD_INT 1
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 3
51868: PUSH
51869: LD_INT 2
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 3
51878: PUSH
51879: LD_INT 3
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 2
51888: PUSH
51889: LD_INT 3
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 2
51898: NEG
51899: PUSH
51900: LD_INT 1
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 3
51909: NEG
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 3
51920: NEG
51921: PUSH
51922: LD_INT 1
51924: NEG
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 3
51932: NEG
51933: PUSH
51934: LD_INT 2
51936: NEG
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 3
51944: NEG
51945: PUSH
51946: LD_INT 3
51948: NEG
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51985: LD_ADDR_VAR 0 42
51989: PUSH
51990: LD_INT 0
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 0
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 1
52013: PUSH
52014: LD_INT 0
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 1
52023: PUSH
52024: LD_INT 1
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 0
52033: PUSH
52034: LD_INT 1
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 1
52043: NEG
52044: PUSH
52045: LD_INT 0
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: LD_INT 1
52058: NEG
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 1
52066: NEG
52067: PUSH
52068: LD_INT 2
52070: NEG
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 0
52078: PUSH
52079: LD_INT 2
52081: NEG
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: LD_INT 1
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 2
52100: PUSH
52101: LD_INT 1
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 2
52110: PUSH
52111: LD_INT 2
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 1
52120: PUSH
52121: LD_INT 2
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 0
52130: PUSH
52131: LD_INT 2
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 1
52140: NEG
52141: PUSH
52142: LD_INT 1
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 2
52151: NEG
52152: PUSH
52153: LD_INT 1
52155: NEG
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 2
52163: NEG
52164: PUSH
52165: LD_INT 2
52167: NEG
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 2
52175: NEG
52176: PUSH
52177: LD_INT 3
52179: NEG
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 1
52187: NEG
52188: PUSH
52189: LD_INT 3
52191: NEG
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 0
52199: PUSH
52200: LD_INT 3
52202: NEG
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 1
52210: PUSH
52211: LD_INT 2
52213: NEG
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 3
52221: PUSH
52222: LD_INT 2
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 3
52231: PUSH
52232: LD_INT 3
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 2
52241: PUSH
52242: LD_INT 3
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 1
52251: PUSH
52252: LD_INT 3
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 0
52261: PUSH
52262: LD_INT 3
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 1
52271: NEG
52272: PUSH
52273: LD_INT 2
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 3
52282: NEG
52283: PUSH
52284: LD_INT 2
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 3
52294: NEG
52295: PUSH
52296: LD_INT 3
52298: NEG
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52335: LD_ADDR_VAR 0 43
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 0
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: PUSH
52364: LD_INT 0
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 1
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 0
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 1
52393: NEG
52394: PUSH
52395: LD_INT 0
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 1
52404: NEG
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: NEG
52417: PUSH
52418: LD_INT 2
52420: NEG
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 0
52428: PUSH
52429: LD_INT 2
52431: NEG
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 1
52439: PUSH
52440: LD_INT 1
52442: NEG
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 2
52450: PUSH
52451: LD_INT 0
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 2
52460: PUSH
52461: LD_INT 1
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 1
52470: PUSH
52471: LD_INT 2
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: LD_INT 2
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 1
52490: NEG
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 2
52501: NEG
52502: PUSH
52503: LD_INT 0
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 2
52512: NEG
52513: PUSH
52514: LD_INT 1
52516: NEG
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: LD_INT 3
52528: NEG
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: LD_INT 3
52539: NEG
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 1
52547: PUSH
52548: LD_INT 2
52550: NEG
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 2
52558: PUSH
52559: LD_INT 1
52561: NEG
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 3
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 3
52579: PUSH
52580: LD_INT 1
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 1
52589: PUSH
52590: LD_INT 3
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 0
52599: PUSH
52600: LD_INT 3
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 1
52609: NEG
52610: PUSH
52611: LD_INT 2
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 2
52620: NEG
52621: PUSH
52622: LD_INT 1
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 3
52631: NEG
52632: PUSH
52633: LD_INT 0
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 3
52642: NEG
52643: PUSH
52644: LD_INT 1
52646: NEG
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52683: LD_ADDR_VAR 0 44
52687: PUSH
52688: LD_INT 0
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 0
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 1
52711: PUSH
52712: LD_INT 0
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 1
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 0
52731: PUSH
52732: LD_INT 1
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 1
52741: NEG
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 1
52752: NEG
52753: PUSH
52754: LD_INT 1
52756: NEG
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 1
52764: NEG
52765: PUSH
52766: LD_INT 2
52768: NEG
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 1
52776: PUSH
52777: LD_INT 1
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 2
52787: PUSH
52788: LD_INT 0
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 2
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 2
52807: PUSH
52808: LD_INT 2
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 1
52817: PUSH
52818: LD_INT 2
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 1
52827: NEG
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 2
52838: NEG
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 2
52849: NEG
52850: PUSH
52851: LD_INT 1
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 2
52861: NEG
52862: PUSH
52863: LD_INT 2
52865: NEG
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 2
52873: NEG
52874: PUSH
52875: LD_INT 3
52877: NEG
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 2
52885: PUSH
52886: LD_INT 1
52888: NEG
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 3
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 3
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 3
52916: PUSH
52917: LD_INT 2
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 3
52926: PUSH
52927: LD_INT 3
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 2
52936: PUSH
52937: LD_INT 3
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 2
52946: NEG
52947: PUSH
52948: LD_INT 1
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 3
52957: NEG
52958: PUSH
52959: LD_INT 0
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 3
52968: NEG
52969: PUSH
52970: LD_INT 1
52972: NEG
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 3
52980: NEG
52981: PUSH
52982: LD_INT 2
52984: NEG
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 3
52992: NEG
52993: PUSH
52994: LD_INT 3
52996: NEG
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53033: LD_ADDR_VAR 0 45
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: LD_INT 0
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 0
53050: PUSH
53051: LD_INT 1
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 1
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 0
53081: PUSH
53082: LD_INT 1
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 1
53091: NEG
53092: PUSH
53093: LD_INT 0
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 1
53102: NEG
53103: PUSH
53104: LD_INT 1
53106: NEG
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 1
53114: NEG
53115: PUSH
53116: LD_INT 2
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 0
53126: PUSH
53127: LD_INT 2
53129: NEG
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 1
53137: PUSH
53138: LD_INT 1
53140: NEG
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 2
53148: PUSH
53149: LD_INT 1
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 2
53158: PUSH
53159: LD_INT 2
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 1
53168: PUSH
53169: LD_INT 2
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 0
53178: PUSH
53179: LD_INT 2
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 1
53188: NEG
53189: PUSH
53190: LD_INT 1
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 2
53199: NEG
53200: PUSH
53201: LD_INT 1
53203: NEG
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 2
53211: NEG
53212: PUSH
53213: LD_INT 2
53215: NEG
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 2
53223: NEG
53224: PUSH
53225: LD_INT 3
53227: NEG
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 1
53235: NEG
53236: PUSH
53237: LD_INT 3
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 0
53247: PUSH
53248: LD_INT 3
53250: NEG
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 1
53258: PUSH
53259: LD_INT 2
53261: NEG
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 3
53269: PUSH
53270: LD_INT 2
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 3
53279: PUSH
53280: LD_INT 3
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 2
53289: PUSH
53290: LD_INT 3
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 1
53299: PUSH
53300: LD_INT 3
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 0
53309: PUSH
53310: LD_INT 3
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 1
53319: NEG
53320: PUSH
53321: LD_INT 2
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 3
53330: NEG
53331: PUSH
53332: LD_INT 2
53334: NEG
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 3
53342: NEG
53343: PUSH
53344: LD_INT 3
53346: NEG
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53383: LD_ADDR_VAR 0 46
53387: PUSH
53388: LD_INT 0
53390: PUSH
53391: LD_INT 0
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 0
53400: PUSH
53401: LD_INT 1
53403: NEG
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: LD_INT 0
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 1
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: LD_INT 1
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 1
53441: NEG
53442: PUSH
53443: LD_INT 0
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 1
53452: NEG
53453: PUSH
53454: LD_INT 1
53456: NEG
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 1
53464: NEG
53465: PUSH
53466: LD_INT 2
53468: NEG
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: LD_INT 2
53479: NEG
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 1
53487: PUSH
53488: LD_INT 1
53490: NEG
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 2
53498: PUSH
53499: LD_INT 0
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 2
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 1
53518: PUSH
53519: LD_INT 2
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: LD_INT 2
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: NEG
53539: PUSH
53540: LD_INT 1
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 2
53549: NEG
53550: PUSH
53551: LD_INT 0
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 2
53560: NEG
53561: PUSH
53562: LD_INT 1
53564: NEG
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 1
53572: NEG
53573: PUSH
53574: LD_INT 3
53576: NEG
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 0
53584: PUSH
53585: LD_INT 3
53587: NEG
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 1
53595: PUSH
53596: LD_INT 2
53598: NEG
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 2
53606: PUSH
53607: LD_INT 1
53609: NEG
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 3
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 3
53627: PUSH
53628: LD_INT 1
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 1
53637: PUSH
53638: LD_INT 3
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 0
53647: PUSH
53648: LD_INT 3
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 1
53657: NEG
53658: PUSH
53659: LD_INT 2
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 2
53668: NEG
53669: PUSH
53670: LD_INT 1
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 3
53679: NEG
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 3
53690: NEG
53691: PUSH
53692: LD_INT 1
53694: NEG
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53731: LD_ADDR_VAR 0 47
53735: PUSH
53736: LD_INT 0
53738: PUSH
53739: LD_INT 0
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 0
53748: PUSH
53749: LD_INT 1
53751: NEG
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 1
53759: PUSH
53760: LD_INT 0
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 1
53769: PUSH
53770: LD_INT 1
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 0
53779: PUSH
53780: LD_INT 1
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 1
53789: NEG
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 1
53800: NEG
53801: PUSH
53802: LD_INT 1
53804: NEG
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 1
53812: NEG
53813: PUSH
53814: LD_INT 2
53816: NEG
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 0
53824: PUSH
53825: LD_INT 2
53827: NEG
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 1
53835: PUSH
53836: LD_INT 1
53838: NEG
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 2
53846: NEG
53847: PUSH
53848: LD_INT 1
53850: NEG
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 2
53858: NEG
53859: PUSH
53860: LD_INT 2
53862: NEG
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53882: LD_ADDR_VAR 0 48
53886: PUSH
53887: LD_INT 0
53889: PUSH
53890: LD_INT 0
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: LD_INT 1
53902: NEG
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 1
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 1
53920: PUSH
53921: LD_INT 1
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 0
53930: PUSH
53931: LD_INT 1
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 1
53940: NEG
53941: PUSH
53942: LD_INT 0
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 1
53951: NEG
53952: PUSH
53953: LD_INT 1
53955: NEG
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 1
53963: NEG
53964: PUSH
53965: LD_INT 2
53967: NEG
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: LD_INT 2
53978: NEG
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 1
53986: PUSH
53987: LD_INT 1
53989: NEG
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 2
53997: PUSH
53998: LD_INT 0
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 2
54007: PUSH
54008: LD_INT 1
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54029: LD_ADDR_VAR 0 49
54033: PUSH
54034: LD_INT 0
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 0
54046: PUSH
54047: LD_INT 1
54049: NEG
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 1
54057: PUSH
54058: LD_INT 0
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 1
54067: PUSH
54068: LD_INT 1
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 0
54077: PUSH
54078: LD_INT 1
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 1
54087: NEG
54088: PUSH
54089: LD_INT 0
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 1
54098: NEG
54099: PUSH
54100: LD_INT 1
54102: NEG
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 1
54110: PUSH
54111: LD_INT 1
54113: NEG
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 2
54121: PUSH
54122: LD_INT 0
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 2
54131: PUSH
54132: LD_INT 1
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 2
54141: PUSH
54142: LD_INT 2
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 1
54151: PUSH
54152: LD_INT 2
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54173: LD_ADDR_VAR 0 50
54177: PUSH
54178: LD_INT 0
54180: PUSH
54181: LD_INT 0
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 0
54190: PUSH
54191: LD_INT 1
54193: NEG
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 1
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: PUSH
54212: LD_INT 1
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 0
54221: PUSH
54222: LD_INT 1
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 1
54231: NEG
54232: PUSH
54233: LD_INT 0
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 1
54242: NEG
54243: PUSH
54244: LD_INT 1
54246: NEG
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 2
54254: PUSH
54255: LD_INT 1
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 2
54264: PUSH
54265: LD_INT 2
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 1
54274: PUSH
54275: LD_INT 2
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 0
54284: PUSH
54285: LD_INT 2
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 1
54294: NEG
54295: PUSH
54296: LD_INT 1
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54317: LD_ADDR_VAR 0 51
54321: PUSH
54322: LD_INT 0
54324: PUSH
54325: LD_INT 0
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 0
54334: PUSH
54335: LD_INT 1
54337: NEG
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 1
54345: PUSH
54346: LD_INT 0
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 1
54355: PUSH
54356: LD_INT 1
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 0
54365: PUSH
54366: LD_INT 1
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 1
54375: NEG
54376: PUSH
54377: LD_INT 0
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 1
54386: NEG
54387: PUSH
54388: LD_INT 1
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 1
54398: PUSH
54399: LD_INT 2
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 0
54408: PUSH
54409: LD_INT 2
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 1
54418: NEG
54419: PUSH
54420: LD_INT 1
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 2
54429: NEG
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 2
54440: NEG
54441: PUSH
54442: LD_INT 1
54444: NEG
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54464: LD_ADDR_VAR 0 52
54468: PUSH
54469: LD_INT 0
54471: PUSH
54472: LD_INT 0
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 0
54481: PUSH
54482: LD_INT 1
54484: NEG
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 1
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 1
54502: PUSH
54503: LD_INT 1
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 0
54512: PUSH
54513: LD_INT 1
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 1
54522: NEG
54523: PUSH
54524: LD_INT 0
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 1
54533: NEG
54534: PUSH
54535: LD_INT 1
54537: NEG
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 1
54545: NEG
54546: PUSH
54547: LD_INT 2
54549: NEG
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 1
54557: NEG
54558: PUSH
54559: LD_INT 1
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 2
54568: NEG
54569: PUSH
54570: LD_INT 0
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 2
54579: NEG
54580: PUSH
54581: LD_INT 1
54583: NEG
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 2
54591: NEG
54592: PUSH
54593: LD_INT 2
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54615: LD_ADDR_VAR 0 53
54619: PUSH
54620: LD_INT 0
54622: PUSH
54623: LD_INT 0
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 0
54632: PUSH
54633: LD_INT 1
54635: NEG
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 1
54643: PUSH
54644: LD_INT 0
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 1
54653: PUSH
54654: LD_INT 1
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 0
54663: PUSH
54664: LD_INT 1
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 1
54673: NEG
54674: PUSH
54675: LD_INT 0
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 1
54684: NEG
54685: PUSH
54686: LD_INT 1
54688: NEG
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 1
54696: NEG
54697: PUSH
54698: LD_INT 2
54700: NEG
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: LD_INT 2
54711: NEG
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: LD_INT 1
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 2
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 2
54740: PUSH
54741: LD_INT 1
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 2
54750: PUSH
54751: LD_INT 2
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 1
54760: PUSH
54761: LD_INT 2
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 0
54770: PUSH
54771: LD_INT 2
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 1
54780: NEG
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 2
54791: NEG
54792: PUSH
54793: LD_INT 0
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 2
54802: NEG
54803: PUSH
54804: LD_INT 1
54806: NEG
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 2
54814: NEG
54815: PUSH
54816: LD_INT 2
54818: NEG
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54845: LD_ADDR_VAR 0 54
54849: PUSH
54850: LD_INT 0
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 0
54862: PUSH
54863: LD_INT 1
54865: NEG
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 1
54873: PUSH
54874: LD_INT 0
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 1
54883: PUSH
54884: LD_INT 1
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 0
54893: PUSH
54894: LD_INT 1
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 1
54903: NEG
54904: PUSH
54905: LD_INT 0
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 1
54914: NEG
54915: PUSH
54916: LD_INT 1
54918: NEG
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 1
54926: NEG
54927: PUSH
54928: LD_INT 2
54930: NEG
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 0
54938: PUSH
54939: LD_INT 2
54941: NEG
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 1
54949: PUSH
54950: LD_INT 1
54952: NEG
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 2
54960: PUSH
54961: LD_INT 0
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 2
54970: PUSH
54971: LD_INT 1
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 2
54980: PUSH
54981: LD_INT 2
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 1
54990: PUSH
54991: LD_INT 2
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 0
55000: PUSH
55001: LD_INT 2
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 1
55010: NEG
55011: PUSH
55012: LD_INT 1
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 2
55021: NEG
55022: PUSH
55023: LD_INT 0
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 2
55032: NEG
55033: PUSH
55034: LD_INT 1
55036: NEG
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 2
55044: NEG
55045: PUSH
55046: LD_INT 2
55048: NEG
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55075: LD_ADDR_VAR 0 55
55079: PUSH
55080: LD_INT 0
55082: PUSH
55083: LD_INT 0
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: LD_INT 1
55095: NEG
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 1
55103: PUSH
55104: LD_INT 0
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 1
55113: PUSH
55114: LD_INT 1
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: LD_INT 1
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 1
55133: NEG
55134: PUSH
55135: LD_INT 0
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 1
55144: NEG
55145: PUSH
55146: LD_INT 1
55148: NEG
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 1
55156: NEG
55157: PUSH
55158: LD_INT 2
55160: NEG
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: LD_INT 2
55171: NEG
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: LD_INT 1
55182: NEG
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 2
55190: PUSH
55191: LD_INT 0
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 2
55200: PUSH
55201: LD_INT 1
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 2
55210: PUSH
55211: LD_INT 2
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 1
55220: PUSH
55221: LD_INT 2
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 0
55230: PUSH
55231: LD_INT 2
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 1
55240: NEG
55241: PUSH
55242: LD_INT 1
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: PUSH
55249: LD_INT 2
55251: NEG
55252: PUSH
55253: LD_INT 0
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 2
55262: NEG
55263: PUSH
55264: LD_INT 1
55266: NEG
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 2
55274: NEG
55275: PUSH
55276: LD_INT 2
55278: NEG
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55305: LD_ADDR_VAR 0 56
55309: PUSH
55310: LD_INT 0
55312: PUSH
55313: LD_INT 0
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 1
55333: PUSH
55334: LD_INT 0
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 1
55343: PUSH
55344: LD_INT 1
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 0
55353: PUSH
55354: LD_INT 1
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 1
55363: NEG
55364: PUSH
55365: LD_INT 0
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 1
55374: NEG
55375: PUSH
55376: LD_INT 1
55378: NEG
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 1
55386: NEG
55387: PUSH
55388: LD_INT 2
55390: NEG
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 0
55398: PUSH
55399: LD_INT 2
55401: NEG
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 1
55409: PUSH
55410: LD_INT 1
55412: NEG
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 2
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 2
55430: PUSH
55431: LD_INT 1
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 2
55440: PUSH
55441: LD_INT 2
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 1
55450: PUSH
55451: LD_INT 2
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 0
55460: PUSH
55461: LD_INT 2
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: NEG
55471: PUSH
55472: LD_INT 1
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 2
55481: NEG
55482: PUSH
55483: LD_INT 0
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 2
55492: NEG
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 2
55504: NEG
55505: PUSH
55506: LD_INT 2
55508: NEG
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55535: LD_ADDR_VAR 0 57
55539: PUSH
55540: LD_INT 0
55542: PUSH
55543: LD_INT 0
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 0
55552: PUSH
55553: LD_INT 1
55555: NEG
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 1
55563: PUSH
55564: LD_INT 0
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 1
55573: PUSH
55574: LD_INT 1
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 0
55583: PUSH
55584: LD_INT 1
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 1
55593: NEG
55594: PUSH
55595: LD_INT 0
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 1
55604: NEG
55605: PUSH
55606: LD_INT 1
55608: NEG
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 1
55616: NEG
55617: PUSH
55618: LD_INT 2
55620: NEG
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: LD_INT 2
55631: NEG
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 1
55639: PUSH
55640: LD_INT 1
55642: NEG
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 2
55650: PUSH
55651: LD_INT 0
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 2
55660: PUSH
55661: LD_INT 1
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 2
55670: PUSH
55671: LD_INT 2
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 1
55680: PUSH
55681: LD_INT 2
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: LD_INT 2
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 1
55700: NEG
55701: PUSH
55702: LD_INT 1
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 2
55711: NEG
55712: PUSH
55713: LD_INT 0
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 2
55722: NEG
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 2
55734: NEG
55735: PUSH
55736: LD_INT 2
55738: NEG
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55765: LD_ADDR_VAR 0 58
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: LD_INT 0
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 0
55782: PUSH
55783: LD_INT 1
55785: NEG
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 1
55793: PUSH
55794: LD_INT 0
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 1
55803: PUSH
55804: LD_INT 1
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: LD_INT 1
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 1
55823: NEG
55824: PUSH
55825: LD_INT 0
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 1
55834: NEG
55835: PUSH
55836: LD_INT 1
55838: NEG
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 1
55846: NEG
55847: PUSH
55848: LD_INT 2
55850: NEG
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: LD_INT 2
55861: NEG
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 1
55869: PUSH
55870: LD_INT 1
55872: NEG
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 2
55880: PUSH
55881: LD_INT 0
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 2
55890: PUSH
55891: LD_INT 1
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 2
55900: PUSH
55901: LD_INT 2
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 1
55910: PUSH
55911: LD_INT 2
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 0
55920: PUSH
55921: LD_INT 2
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 1
55930: NEG
55931: PUSH
55932: LD_INT 1
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 2
55941: NEG
55942: PUSH
55943: LD_INT 0
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 2
55952: NEG
55953: PUSH
55954: LD_INT 1
55956: NEG
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 2
55964: NEG
55965: PUSH
55966: LD_INT 2
55968: NEG
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55995: LD_ADDR_VAR 0 59
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: LD_INT 0
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 0
56012: PUSH
56013: LD_INT 1
56015: NEG
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 1
56023: PUSH
56024: LD_INT 0
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 1
56033: PUSH
56034: LD_INT 1
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 0
56043: PUSH
56044: LD_INT 1
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 1
56053: NEG
56054: PUSH
56055: LD_INT 0
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: PUSH
56062: LD_INT 1
56064: NEG
56065: PUSH
56066: LD_INT 1
56068: NEG
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56083: LD_ADDR_VAR 0 60
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: LD_INT 0
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 0
56100: PUSH
56101: LD_INT 1
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 1
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 1
56121: PUSH
56122: LD_INT 1
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 0
56131: PUSH
56132: LD_INT 1
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 1
56141: NEG
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 1
56152: NEG
56153: PUSH
56154: LD_INT 1
56156: NEG
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56171: LD_ADDR_VAR 0 61
56175: PUSH
56176: LD_INT 0
56178: PUSH
56179: LD_INT 0
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 0
56188: PUSH
56189: LD_INT 1
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 1
56199: PUSH
56200: LD_INT 0
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 1
56209: PUSH
56210: LD_INT 1
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 0
56219: PUSH
56220: LD_INT 1
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 1
56229: NEG
56230: PUSH
56231: LD_INT 0
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 1
56240: NEG
56241: PUSH
56242: LD_INT 1
56244: NEG
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56259: LD_ADDR_VAR 0 62
56263: PUSH
56264: LD_INT 0
56266: PUSH
56267: LD_INT 0
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 0
56276: PUSH
56277: LD_INT 1
56279: NEG
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 1
56287: PUSH
56288: LD_INT 0
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 1
56297: PUSH
56298: LD_INT 1
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 0
56307: PUSH
56308: LD_INT 1
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 1
56317: NEG
56318: PUSH
56319: LD_INT 0
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 1
56328: NEG
56329: PUSH
56330: LD_INT 1
56332: NEG
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56347: LD_ADDR_VAR 0 63
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: LD_INT 1
56367: NEG
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 1
56375: PUSH
56376: LD_INT 0
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 1
56385: PUSH
56386: LD_INT 1
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 0
56395: PUSH
56396: LD_INT 1
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 1
56405: NEG
56406: PUSH
56407: LD_INT 0
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 1
56416: NEG
56417: PUSH
56418: LD_INT 1
56420: NEG
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56435: LD_ADDR_VAR 0 64
56439: PUSH
56440: LD_INT 0
56442: PUSH
56443: LD_INT 0
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 0
56452: PUSH
56453: LD_INT 1
56455: NEG
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 1
56463: PUSH
56464: LD_INT 0
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 1
56473: PUSH
56474: LD_INT 1
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 0
56483: PUSH
56484: LD_INT 1
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 1
56493: NEG
56494: PUSH
56495: LD_INT 0
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 1
56504: NEG
56505: PUSH
56506: LD_INT 1
56508: NEG
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: ST_TO_ADDR
// end ; 1 :
56523: GO 62420
56525: LD_INT 1
56527: DOUBLE
56528: EQUAL
56529: IFTRUE 56533
56531: GO 59156
56533: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56534: LD_ADDR_VAR 0 11
56538: PUSH
56539: LD_INT 1
56541: NEG
56542: PUSH
56543: LD_INT 3
56545: NEG
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 0
56553: PUSH
56554: LD_INT 3
56556: NEG
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 1
56564: PUSH
56565: LD_INT 2
56567: NEG
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: LIST
56577: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56578: LD_ADDR_VAR 0 12
56582: PUSH
56583: LD_INT 2
56585: PUSH
56586: LD_INT 1
56588: NEG
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 3
56596: PUSH
56597: LD_INT 0
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 3
56606: PUSH
56607: LD_INT 1
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: LIST
56618: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56619: LD_ADDR_VAR 0 13
56623: PUSH
56624: LD_INT 3
56626: PUSH
56627: LD_INT 2
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 3
56636: PUSH
56637: LD_INT 3
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 2
56646: PUSH
56647: LD_INT 3
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: LIST
56658: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56659: LD_ADDR_VAR 0 14
56663: PUSH
56664: LD_INT 1
56666: PUSH
56667: LD_INT 3
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 0
56676: PUSH
56677: LD_INT 3
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 1
56686: NEG
56687: PUSH
56688: LD_INT 2
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: LIST
56699: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56700: LD_ADDR_VAR 0 15
56704: PUSH
56705: LD_INT 2
56707: NEG
56708: PUSH
56709: LD_INT 1
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 3
56718: NEG
56719: PUSH
56720: LD_INT 0
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 3
56729: NEG
56730: PUSH
56731: LD_INT 1
56733: NEG
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: LIST
56743: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56744: LD_ADDR_VAR 0 16
56748: PUSH
56749: LD_INT 2
56751: NEG
56752: PUSH
56753: LD_INT 3
56755: NEG
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 3
56763: NEG
56764: PUSH
56765: LD_INT 2
56767: NEG
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 3
56775: NEG
56776: PUSH
56777: LD_INT 3
56779: NEG
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: LIST
56789: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56790: LD_ADDR_VAR 0 17
56794: PUSH
56795: LD_INT 1
56797: NEG
56798: PUSH
56799: LD_INT 3
56801: NEG
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 0
56809: PUSH
56810: LD_INT 3
56812: NEG
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 1
56820: PUSH
56821: LD_INT 2
56823: NEG
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: LIST
56833: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56834: LD_ADDR_VAR 0 18
56838: PUSH
56839: LD_INT 2
56841: PUSH
56842: LD_INT 1
56844: NEG
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 3
56852: PUSH
56853: LD_INT 0
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 3
56862: PUSH
56863: LD_INT 1
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: LIST
56874: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56875: LD_ADDR_VAR 0 19
56879: PUSH
56880: LD_INT 3
56882: PUSH
56883: LD_INT 2
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 3
56892: PUSH
56893: LD_INT 3
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 2
56902: PUSH
56903: LD_INT 3
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: LIST
56914: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56915: LD_ADDR_VAR 0 20
56919: PUSH
56920: LD_INT 1
56922: PUSH
56923: LD_INT 3
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 0
56932: PUSH
56933: LD_INT 3
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 1
56942: NEG
56943: PUSH
56944: LD_INT 2
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: LIST
56955: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56956: LD_ADDR_VAR 0 21
56960: PUSH
56961: LD_INT 2
56963: NEG
56964: PUSH
56965: LD_INT 1
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 3
56974: NEG
56975: PUSH
56976: LD_INT 0
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 3
56985: NEG
56986: PUSH
56987: LD_INT 1
56989: NEG
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: LIST
56999: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57000: LD_ADDR_VAR 0 22
57004: PUSH
57005: LD_INT 2
57007: NEG
57008: PUSH
57009: LD_INT 3
57011: NEG
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 3
57019: NEG
57020: PUSH
57021: LD_INT 2
57023: NEG
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 3
57031: NEG
57032: PUSH
57033: LD_INT 3
57035: NEG
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: LIST
57045: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57046: LD_ADDR_VAR 0 23
57050: PUSH
57051: LD_INT 0
57053: PUSH
57054: LD_INT 3
57056: NEG
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 1
57064: NEG
57065: PUSH
57066: LD_INT 4
57068: NEG
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 1
57076: PUSH
57077: LD_INT 3
57079: NEG
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: LIST
57089: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57090: LD_ADDR_VAR 0 24
57094: PUSH
57095: LD_INT 3
57097: PUSH
57098: LD_INT 0
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 3
57107: PUSH
57108: LD_INT 1
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 4
57118: PUSH
57119: LD_INT 1
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: LIST
57130: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57131: LD_ADDR_VAR 0 25
57135: PUSH
57136: LD_INT 3
57138: PUSH
57139: LD_INT 3
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 4
57148: PUSH
57149: LD_INT 3
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 3
57158: PUSH
57159: LD_INT 4
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: LIST
57170: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57171: LD_ADDR_VAR 0 26
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: LD_INT 3
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 1
57188: PUSH
57189: LD_INT 4
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 1
57198: NEG
57199: PUSH
57200: LD_INT 3
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: LIST
57211: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57212: LD_ADDR_VAR 0 27
57216: PUSH
57217: LD_INT 3
57219: NEG
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 3
57230: NEG
57231: PUSH
57232: LD_INT 1
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 4
57241: NEG
57242: PUSH
57243: LD_INT 1
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: LIST
57255: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57256: LD_ADDR_VAR 0 28
57260: PUSH
57261: LD_INT 3
57263: NEG
57264: PUSH
57265: LD_INT 3
57267: NEG
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 3
57275: NEG
57276: PUSH
57277: LD_INT 4
57279: NEG
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 4
57287: NEG
57288: PUSH
57289: LD_INT 3
57291: NEG
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: LIST
57301: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57302: LD_ADDR_VAR 0 29
57306: PUSH
57307: LD_INT 1
57309: NEG
57310: PUSH
57311: LD_INT 3
57313: NEG
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 0
57321: PUSH
57322: LD_INT 3
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 1
57332: PUSH
57333: LD_INT 2
57335: NEG
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 1
57343: NEG
57344: PUSH
57345: LD_INT 4
57347: NEG
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 0
57355: PUSH
57356: LD_INT 4
57358: NEG
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 1
57366: PUSH
57367: LD_INT 3
57369: NEG
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 1
57377: NEG
57378: PUSH
57379: LD_INT 5
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 0
57389: PUSH
57390: LD_INT 5
57392: NEG
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 1
57400: PUSH
57401: LD_INT 4
57403: NEG
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 1
57411: NEG
57412: PUSH
57413: LD_INT 6
57415: NEG
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 0
57423: PUSH
57424: LD_INT 6
57426: NEG
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 1
57434: PUSH
57435: LD_INT 5
57437: NEG
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57457: LD_ADDR_VAR 0 30
57461: PUSH
57462: LD_INT 2
57464: PUSH
57465: LD_INT 1
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 3
57475: PUSH
57476: LD_INT 0
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 3
57485: PUSH
57486: LD_INT 1
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 3
57495: PUSH
57496: LD_INT 1
57498: NEG
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 4
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 4
57516: PUSH
57517: LD_INT 1
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 4
57526: PUSH
57527: LD_INT 1
57529: NEG
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 5
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 5
57547: PUSH
57548: LD_INT 1
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 5
57557: PUSH
57558: LD_INT 1
57560: NEG
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 6
57568: PUSH
57569: LD_INT 0
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 6
57578: PUSH
57579: LD_INT 1
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57600: LD_ADDR_VAR 0 31
57604: PUSH
57605: LD_INT 3
57607: PUSH
57608: LD_INT 2
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 3
57617: PUSH
57618: LD_INT 3
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 2
57627: PUSH
57628: LD_INT 3
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 4
57637: PUSH
57638: LD_INT 3
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 4
57647: PUSH
57648: LD_INT 4
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 3
57657: PUSH
57658: LD_INT 4
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 5
57667: PUSH
57668: LD_INT 4
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 5
57677: PUSH
57678: LD_INT 5
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 4
57687: PUSH
57688: LD_INT 5
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 6
57697: PUSH
57698: LD_INT 5
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 6
57707: PUSH
57708: LD_INT 6
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 5
57717: PUSH
57718: LD_INT 6
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57739: LD_ADDR_VAR 0 32
57743: PUSH
57744: LD_INT 1
57746: PUSH
57747: LD_INT 3
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 0
57756: PUSH
57757: LD_INT 3
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 1
57766: NEG
57767: PUSH
57768: LD_INT 2
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 1
57777: PUSH
57778: LD_INT 4
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 0
57787: PUSH
57788: LD_INT 4
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 1
57797: NEG
57798: PUSH
57799: LD_INT 3
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 1
57808: PUSH
57809: LD_INT 5
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 0
57818: PUSH
57819: LD_INT 5
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 1
57828: NEG
57829: PUSH
57830: LD_INT 4
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 1
57839: PUSH
57840: LD_INT 6
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 0
57849: PUSH
57850: LD_INT 6
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 1
57859: NEG
57860: PUSH
57861: LD_INT 5
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57882: LD_ADDR_VAR 0 33
57886: PUSH
57887: LD_INT 2
57889: NEG
57890: PUSH
57891: LD_INT 1
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 3
57900: NEG
57901: PUSH
57902: LD_INT 0
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 3
57911: NEG
57912: PUSH
57913: LD_INT 1
57915: NEG
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 3
57923: NEG
57924: PUSH
57925: LD_INT 1
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 4
57934: NEG
57935: PUSH
57936: LD_INT 0
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 4
57945: NEG
57946: PUSH
57947: LD_INT 1
57949: NEG
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 4
57957: NEG
57958: PUSH
57959: LD_INT 1
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 5
57968: NEG
57969: PUSH
57970: LD_INT 0
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 5
57979: NEG
57980: PUSH
57981: LD_INT 1
57983: NEG
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 5
57991: NEG
57992: PUSH
57993: LD_INT 1
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 6
58002: NEG
58003: PUSH
58004: LD_INT 0
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 6
58013: NEG
58014: PUSH
58015: LD_INT 1
58017: NEG
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58037: LD_ADDR_VAR 0 34
58041: PUSH
58042: LD_INT 2
58044: NEG
58045: PUSH
58046: LD_INT 3
58048: NEG
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 3
58056: NEG
58057: PUSH
58058: LD_INT 2
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 3
58068: NEG
58069: PUSH
58070: LD_INT 3
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 3
58080: NEG
58081: PUSH
58082: LD_INT 4
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 4
58092: NEG
58093: PUSH
58094: LD_INT 3
58096: NEG
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 4
58104: NEG
58105: PUSH
58106: LD_INT 4
58108: NEG
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 4
58116: NEG
58117: PUSH
58118: LD_INT 5
58120: NEG
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 5
58128: NEG
58129: PUSH
58130: LD_INT 4
58132: NEG
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 5
58140: NEG
58141: PUSH
58142: LD_INT 5
58144: NEG
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 5
58152: NEG
58153: PUSH
58154: LD_INT 6
58156: NEG
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 6
58164: NEG
58165: PUSH
58166: LD_INT 5
58168: NEG
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 6
58176: NEG
58177: PUSH
58178: LD_INT 6
58180: NEG
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58200: LD_ADDR_VAR 0 41
58204: PUSH
58205: LD_INT 0
58207: PUSH
58208: LD_INT 2
58210: NEG
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 1
58218: NEG
58219: PUSH
58220: LD_INT 3
58222: NEG
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 1
58230: PUSH
58231: LD_INT 2
58233: NEG
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: LIST
58243: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58244: LD_ADDR_VAR 0 42
58248: PUSH
58249: LD_INT 2
58251: PUSH
58252: LD_INT 0
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 2
58261: PUSH
58262: LD_INT 1
58264: NEG
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 3
58272: PUSH
58273: LD_INT 1
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: LIST
58284: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58285: LD_ADDR_VAR 0 43
58289: PUSH
58290: LD_INT 2
58292: PUSH
58293: LD_INT 2
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 3
58302: PUSH
58303: LD_INT 2
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 2
58312: PUSH
58313: LD_INT 3
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: LIST
58324: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58325: LD_ADDR_VAR 0 44
58329: PUSH
58330: LD_INT 0
58332: PUSH
58333: LD_INT 2
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 1
58342: PUSH
58343: LD_INT 3
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 1
58352: NEG
58353: PUSH
58354: LD_INT 2
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: LIST
58365: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58366: LD_ADDR_VAR 0 45
58370: PUSH
58371: LD_INT 2
58373: NEG
58374: PUSH
58375: LD_INT 0
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 2
58384: NEG
58385: PUSH
58386: LD_INT 1
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 3
58395: NEG
58396: PUSH
58397: LD_INT 1
58399: NEG
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: LIST
58409: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58410: LD_ADDR_VAR 0 46
58414: PUSH
58415: LD_INT 2
58417: NEG
58418: PUSH
58419: LD_INT 2
58421: NEG
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 2
58429: NEG
58430: PUSH
58431: LD_INT 3
58433: NEG
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 3
58441: NEG
58442: PUSH
58443: LD_INT 2
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: LIST
58455: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58456: LD_ADDR_VAR 0 47
58460: PUSH
58461: LD_INT 2
58463: NEG
58464: PUSH
58465: LD_INT 3
58467: NEG
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 1
58475: NEG
58476: PUSH
58477: LD_INT 3
58479: NEG
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58489: LD_ADDR_VAR 0 48
58493: PUSH
58494: LD_INT 1
58496: PUSH
58497: LD_INT 2
58499: NEG
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 2
58507: PUSH
58508: LD_INT 1
58510: NEG
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58520: LD_ADDR_VAR 0 49
58524: PUSH
58525: LD_INT 3
58527: PUSH
58528: LD_INT 1
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 3
58537: PUSH
58538: LD_INT 2
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58549: LD_ADDR_VAR 0 50
58553: PUSH
58554: LD_INT 2
58556: PUSH
58557: LD_INT 3
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 1
58566: PUSH
58567: LD_INT 3
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58578: LD_ADDR_VAR 0 51
58582: PUSH
58583: LD_INT 1
58585: NEG
58586: PUSH
58587: LD_INT 2
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 2
58596: NEG
58597: PUSH
58598: LD_INT 1
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58609: LD_ADDR_VAR 0 52
58613: PUSH
58614: LD_INT 3
58616: NEG
58617: PUSH
58618: LD_INT 1
58620: NEG
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 3
58628: NEG
58629: PUSH
58630: LD_INT 2
58632: NEG
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58642: LD_ADDR_VAR 0 53
58646: PUSH
58647: LD_INT 1
58649: NEG
58650: PUSH
58651: LD_INT 3
58653: NEG
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 0
58661: PUSH
58662: LD_INT 3
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 1
58672: PUSH
58673: LD_INT 2
58675: NEG
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: LIST
58685: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58686: LD_ADDR_VAR 0 54
58690: PUSH
58691: LD_INT 2
58693: PUSH
58694: LD_INT 1
58696: NEG
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 3
58704: PUSH
58705: LD_INT 0
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 3
58714: PUSH
58715: LD_INT 1
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: LIST
58726: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58727: LD_ADDR_VAR 0 55
58731: PUSH
58732: LD_INT 3
58734: PUSH
58735: LD_INT 2
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 3
58744: PUSH
58745: LD_INT 3
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 2
58754: PUSH
58755: LD_INT 3
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: LIST
58766: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58767: LD_ADDR_VAR 0 56
58771: PUSH
58772: LD_INT 1
58774: PUSH
58775: LD_INT 3
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 0
58784: PUSH
58785: LD_INT 3
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 1
58794: NEG
58795: PUSH
58796: LD_INT 2
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: LIST
58807: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58808: LD_ADDR_VAR 0 57
58812: PUSH
58813: LD_INT 2
58815: NEG
58816: PUSH
58817: LD_INT 1
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 3
58826: NEG
58827: PUSH
58828: LD_INT 0
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 3
58837: NEG
58838: PUSH
58839: LD_INT 1
58841: NEG
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: LIST
58851: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58852: LD_ADDR_VAR 0 58
58856: PUSH
58857: LD_INT 2
58859: NEG
58860: PUSH
58861: LD_INT 3
58863: NEG
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 3
58871: NEG
58872: PUSH
58873: LD_INT 2
58875: NEG
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 3
58883: NEG
58884: PUSH
58885: LD_INT 3
58887: NEG
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: LIST
58897: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58898: LD_ADDR_VAR 0 59
58902: PUSH
58903: LD_INT 1
58905: NEG
58906: PUSH
58907: LD_INT 2
58909: NEG
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 0
58917: PUSH
58918: LD_INT 2
58920: NEG
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 1
58928: PUSH
58929: LD_INT 1
58931: NEG
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: LIST
58941: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58942: LD_ADDR_VAR 0 60
58946: PUSH
58947: LD_INT 1
58949: PUSH
58950: LD_INT 1
58952: NEG
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 2
58960: PUSH
58961: LD_INT 0
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 2
58970: PUSH
58971: LD_INT 1
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: LIST
58982: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58983: LD_ADDR_VAR 0 61
58987: PUSH
58988: LD_INT 2
58990: PUSH
58991: LD_INT 1
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 2
59000: PUSH
59001: LD_INT 2
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 1
59010: PUSH
59011: LD_INT 2
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: LIST
59022: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59023: LD_ADDR_VAR 0 62
59027: PUSH
59028: LD_INT 1
59030: PUSH
59031: LD_INT 2
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 0
59040: PUSH
59041: LD_INT 2
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 1
59050: NEG
59051: PUSH
59052: LD_INT 1
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: LIST
59063: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59064: LD_ADDR_VAR 0 63
59068: PUSH
59069: LD_INT 1
59071: NEG
59072: PUSH
59073: LD_INT 1
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 2
59082: NEG
59083: PUSH
59084: LD_INT 0
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 2
59093: NEG
59094: PUSH
59095: LD_INT 1
59097: NEG
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: LIST
59107: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59108: LD_ADDR_VAR 0 64
59112: PUSH
59113: LD_INT 1
59115: NEG
59116: PUSH
59117: LD_INT 2
59119: NEG
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 2
59127: NEG
59128: PUSH
59129: LD_INT 1
59131: NEG
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 2
59139: NEG
59140: PUSH
59141: LD_INT 2
59143: NEG
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: LIST
59153: ST_TO_ADDR
// end ; 2 :
59154: GO 62420
59156: LD_INT 2
59158: DOUBLE
59159: EQUAL
59160: IFTRUE 59164
59162: GO 62419
59164: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59165: LD_ADDR_VAR 0 29
59169: PUSH
59170: LD_INT 4
59172: PUSH
59173: LD_INT 0
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 4
59182: PUSH
59183: LD_INT 1
59185: NEG
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 5
59193: PUSH
59194: LD_INT 0
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 5
59203: PUSH
59204: LD_INT 1
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 4
59213: PUSH
59214: LD_INT 1
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 3
59223: PUSH
59224: LD_INT 0
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 3
59233: PUSH
59234: LD_INT 1
59236: NEG
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 3
59244: PUSH
59245: LD_INT 2
59247: NEG
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 5
59255: PUSH
59256: LD_INT 2
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 3
59265: PUSH
59266: LD_INT 3
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 3
59275: PUSH
59276: LD_INT 2
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 4
59285: PUSH
59286: LD_INT 3
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 4
59295: PUSH
59296: LD_INT 4
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 3
59305: PUSH
59306: LD_INT 4
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 2
59315: PUSH
59316: LD_INT 3
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 2
59325: PUSH
59326: LD_INT 2
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 4
59335: PUSH
59336: LD_INT 2
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 2
59345: PUSH
59346: LD_INT 4
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 0
59355: PUSH
59356: LD_INT 4
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 0
59365: PUSH
59366: LD_INT 3
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 1
59375: PUSH
59376: LD_INT 4
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 1
59385: PUSH
59386: LD_INT 5
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 0
59395: PUSH
59396: LD_INT 5
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 1
59405: NEG
59406: PUSH
59407: LD_INT 4
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 1
59416: NEG
59417: PUSH
59418: LD_INT 3
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 2
59427: PUSH
59428: LD_INT 5
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 2
59437: NEG
59438: PUSH
59439: LD_INT 3
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 3
59448: NEG
59449: PUSH
59450: LD_INT 0
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 3
59459: NEG
59460: PUSH
59461: LD_INT 1
59463: NEG
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 2
59471: NEG
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 2
59482: NEG
59483: PUSH
59484: LD_INT 1
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 3
59493: NEG
59494: PUSH
59495: LD_INT 1
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 4
59504: NEG
59505: PUSH
59506: LD_INT 0
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 4
59515: NEG
59516: PUSH
59517: LD_INT 1
59519: NEG
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 4
59527: NEG
59528: PUSH
59529: LD_INT 2
59531: NEG
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 2
59539: NEG
59540: PUSH
59541: LD_INT 2
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 4
59550: NEG
59551: PUSH
59552: LD_INT 4
59554: NEG
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 4
59562: NEG
59563: PUSH
59564: LD_INT 5
59566: NEG
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 3
59574: NEG
59575: PUSH
59576: LD_INT 4
59578: NEG
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 3
59586: NEG
59587: PUSH
59588: LD_INT 3
59590: NEG
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 4
59598: NEG
59599: PUSH
59600: LD_INT 3
59602: NEG
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 5
59610: NEG
59611: PUSH
59612: LD_INT 4
59614: NEG
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 5
59622: NEG
59623: PUSH
59624: LD_INT 5
59626: NEG
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 3
59634: NEG
59635: PUSH
59636: LD_INT 5
59638: NEG
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 5
59646: NEG
59647: PUSH
59648: LD_INT 3
59650: NEG
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59703: LD_ADDR_VAR 0 30
59707: PUSH
59708: LD_INT 4
59710: PUSH
59711: LD_INT 4
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 4
59720: PUSH
59721: LD_INT 3
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 5
59730: PUSH
59731: LD_INT 4
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 5
59740: PUSH
59741: LD_INT 5
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 4
59750: PUSH
59751: LD_INT 5
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 3
59760: PUSH
59761: LD_INT 4
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 3
59770: PUSH
59771: LD_INT 3
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 5
59780: PUSH
59781: LD_INT 3
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 3
59790: PUSH
59791: LD_INT 5
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 0
59800: PUSH
59801: LD_INT 3
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 0
59810: PUSH
59811: LD_INT 2
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 1
59820: PUSH
59821: LD_INT 3
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 1
59830: PUSH
59831: LD_INT 4
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 0
59840: PUSH
59841: LD_INT 4
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 1
59850: NEG
59851: PUSH
59852: LD_INT 3
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 1
59861: NEG
59862: PUSH
59863: LD_INT 2
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 2
59872: PUSH
59873: LD_INT 4
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 2
59882: NEG
59883: PUSH
59884: LD_INT 2
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 4
59893: NEG
59894: PUSH
59895: LD_INT 0
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 4
59904: NEG
59905: PUSH
59906: LD_INT 1
59908: NEG
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 3
59916: NEG
59917: PUSH
59918: LD_INT 0
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 3
59927: NEG
59928: PUSH
59929: LD_INT 1
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 4
59938: NEG
59939: PUSH
59940: LD_INT 1
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 5
59949: NEG
59950: PUSH
59951: LD_INT 0
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 5
59960: NEG
59961: PUSH
59962: LD_INT 1
59964: NEG
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 5
59972: NEG
59973: PUSH
59974: LD_INT 2
59976: NEG
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 3
59984: NEG
59985: PUSH
59986: LD_INT 2
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 3
59995: NEG
59996: PUSH
59997: LD_INT 3
59999: NEG
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 3
60007: NEG
60008: PUSH
60009: LD_INT 4
60011: NEG
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 2
60019: NEG
60020: PUSH
60021: LD_INT 3
60023: NEG
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 2
60031: NEG
60032: PUSH
60033: LD_INT 2
60035: NEG
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 3
60043: NEG
60044: PUSH
60045: LD_INT 2
60047: NEG
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 4
60055: NEG
60056: PUSH
60057: LD_INT 3
60059: NEG
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 4
60067: NEG
60068: PUSH
60069: LD_INT 4
60071: NEG
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 2
60079: NEG
60080: PUSH
60081: LD_INT 4
60083: NEG
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 4
60091: NEG
60092: PUSH
60093: LD_INT 2
60095: NEG
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 0
60103: PUSH
60104: LD_INT 4
60106: NEG
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 0
60114: PUSH
60115: LD_INT 5
60117: NEG
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 1
60125: PUSH
60126: LD_INT 4
60128: NEG
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 1
60136: PUSH
60137: LD_INT 3
60139: NEG
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 0
60147: PUSH
60148: LD_INT 3
60150: NEG
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 1
60158: NEG
60159: PUSH
60160: LD_INT 4
60162: NEG
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 1
60170: NEG
60171: PUSH
60172: LD_INT 5
60174: NEG
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 2
60182: PUSH
60183: LD_INT 3
60185: NEG
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 2
60193: NEG
60194: PUSH
60195: LD_INT 5
60197: NEG
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60250: LD_ADDR_VAR 0 31
60254: PUSH
60255: LD_INT 0
60257: PUSH
60258: LD_INT 4
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 0
60267: PUSH
60268: LD_INT 3
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 1
60277: PUSH
60278: LD_INT 4
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 1
60287: PUSH
60288: LD_INT 5
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 0
60297: PUSH
60298: LD_INT 5
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 1
60307: NEG
60308: PUSH
60309: LD_INT 4
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 1
60318: NEG
60319: PUSH
60320: LD_INT 3
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 2
60329: PUSH
60330: LD_INT 5
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 2
60339: NEG
60340: PUSH
60341: LD_INT 3
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 3
60350: NEG
60351: PUSH
60352: LD_INT 0
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 3
60361: NEG
60362: PUSH
60363: LD_INT 1
60365: NEG
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 2
60373: NEG
60374: PUSH
60375: LD_INT 0
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 2
60384: NEG
60385: PUSH
60386: LD_INT 1
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 3
60395: NEG
60396: PUSH
60397: LD_INT 1
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 4
60406: NEG
60407: PUSH
60408: LD_INT 0
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 4
60417: NEG
60418: PUSH
60419: LD_INT 1
60421: NEG
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 4
60429: NEG
60430: PUSH
60431: LD_INT 2
60433: NEG
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 2
60441: NEG
60442: PUSH
60443: LD_INT 2
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 4
60452: NEG
60453: PUSH
60454: LD_INT 4
60456: NEG
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 4
60464: NEG
60465: PUSH
60466: LD_INT 5
60468: NEG
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 3
60476: NEG
60477: PUSH
60478: LD_INT 4
60480: NEG
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 3
60488: NEG
60489: PUSH
60490: LD_INT 3
60492: NEG
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 4
60500: NEG
60501: PUSH
60502: LD_INT 3
60504: NEG
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 5
60512: NEG
60513: PUSH
60514: LD_INT 4
60516: NEG
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 5
60524: NEG
60525: PUSH
60526: LD_INT 5
60528: NEG
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 3
60536: NEG
60537: PUSH
60538: LD_INT 5
60540: NEG
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 5
60548: NEG
60549: PUSH
60550: LD_INT 3
60552: NEG
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 0
60560: PUSH
60561: LD_INT 3
60563: NEG
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 0
60571: PUSH
60572: LD_INT 4
60574: NEG
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 1
60582: PUSH
60583: LD_INT 3
60585: NEG
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 1
60593: PUSH
60594: LD_INT 2
60596: NEG
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 0
60604: PUSH
60605: LD_INT 2
60607: NEG
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 1
60615: NEG
60616: PUSH
60617: LD_INT 3
60619: NEG
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 1
60627: NEG
60628: PUSH
60629: LD_INT 4
60631: NEG
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 2
60639: PUSH
60640: LD_INT 2
60642: NEG
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 2
60650: NEG
60651: PUSH
60652: LD_INT 4
60654: NEG
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 4
60662: PUSH
60663: LD_INT 0
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 4
60672: PUSH
60673: LD_INT 1
60675: NEG
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 5
60683: PUSH
60684: LD_INT 0
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 5
60693: PUSH
60694: LD_INT 1
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 4
60703: PUSH
60704: LD_INT 1
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 3
60713: PUSH
60714: LD_INT 0
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 3
60723: PUSH
60724: LD_INT 1
60726: NEG
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 3
60734: PUSH
60735: LD_INT 2
60737: NEG
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 5
60745: PUSH
60746: LD_INT 2
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60800: LD_ADDR_VAR 0 32
60804: PUSH
60805: LD_INT 4
60807: NEG
60808: PUSH
60809: LD_INT 0
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 4
60818: NEG
60819: PUSH
60820: LD_INT 1
60822: NEG
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 3
60830: NEG
60831: PUSH
60832: LD_INT 0
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 3
60841: NEG
60842: PUSH
60843: LD_INT 1
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 4
60852: NEG
60853: PUSH
60854: LD_INT 1
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 5
60863: NEG
60864: PUSH
60865: LD_INT 0
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 5
60874: NEG
60875: PUSH
60876: LD_INT 1
60878: NEG
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 5
60886: NEG
60887: PUSH
60888: LD_INT 2
60890: NEG
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 3
60898: NEG
60899: PUSH
60900: LD_INT 2
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 3
60909: NEG
60910: PUSH
60911: LD_INT 3
60913: NEG
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 3
60921: NEG
60922: PUSH
60923: LD_INT 4
60925: NEG
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 2
60933: NEG
60934: PUSH
60935: LD_INT 3
60937: NEG
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 2
60945: NEG
60946: PUSH
60947: LD_INT 2
60949: NEG
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 3
60957: NEG
60958: PUSH
60959: LD_INT 2
60961: NEG
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 4
60969: NEG
60970: PUSH
60971: LD_INT 3
60973: NEG
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 4
60981: NEG
60982: PUSH
60983: LD_INT 4
60985: NEG
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 2
60993: NEG
60994: PUSH
60995: LD_INT 4
60997: NEG
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 4
61005: NEG
61006: PUSH
61007: LD_INT 2
61009: NEG
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 0
61017: PUSH
61018: LD_INT 4
61020: NEG
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 0
61028: PUSH
61029: LD_INT 5
61031: NEG
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 1
61039: PUSH
61040: LD_INT 4
61042: NEG
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 1
61050: PUSH
61051: LD_INT 3
61053: NEG
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 0
61061: PUSH
61062: LD_INT 3
61064: NEG
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 1
61072: NEG
61073: PUSH
61074: LD_INT 4
61076: NEG
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 1
61084: NEG
61085: PUSH
61086: LD_INT 5
61088: NEG
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 2
61096: PUSH
61097: LD_INT 3
61099: NEG
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 2
61107: NEG
61108: PUSH
61109: LD_INT 5
61111: NEG
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 3
61119: PUSH
61120: LD_INT 0
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 3
61129: PUSH
61130: LD_INT 1
61132: NEG
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 4
61140: PUSH
61141: LD_INT 0
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 4
61150: PUSH
61151: LD_INT 1
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 3
61160: PUSH
61161: LD_INT 1
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 2
61170: PUSH
61171: LD_INT 0
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 2
61180: PUSH
61181: LD_INT 1
61183: NEG
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 2
61191: PUSH
61192: LD_INT 2
61194: NEG
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 4
61202: PUSH
61203: LD_INT 2
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 4
61212: PUSH
61213: LD_INT 4
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 4
61222: PUSH
61223: LD_INT 3
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 5
61232: PUSH
61233: LD_INT 4
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 5
61242: PUSH
61243: LD_INT 5
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 4
61252: PUSH
61253: LD_INT 5
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 3
61262: PUSH
61263: LD_INT 4
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 3
61272: PUSH
61273: LD_INT 3
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 5
61282: PUSH
61283: LD_INT 3
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 3
61292: PUSH
61293: LD_INT 5
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61347: LD_ADDR_VAR 0 33
61351: PUSH
61352: LD_INT 4
61354: NEG
61355: PUSH
61356: LD_INT 4
61358: NEG
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 4
61366: NEG
61367: PUSH
61368: LD_INT 5
61370: NEG
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 3
61378: NEG
61379: PUSH
61380: LD_INT 4
61382: NEG
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 3
61390: NEG
61391: PUSH
61392: LD_INT 3
61394: NEG
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 4
61402: NEG
61403: PUSH
61404: LD_INT 3
61406: NEG
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 5
61414: NEG
61415: PUSH
61416: LD_INT 4
61418: NEG
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 5
61426: NEG
61427: PUSH
61428: LD_INT 5
61430: NEG
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 3
61438: NEG
61439: PUSH
61440: LD_INT 5
61442: NEG
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 5
61450: NEG
61451: PUSH
61452: LD_INT 3
61454: NEG
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 0
61462: PUSH
61463: LD_INT 3
61465: NEG
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 0
61473: PUSH
61474: LD_INT 4
61476: NEG
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 1
61484: PUSH
61485: LD_INT 3
61487: NEG
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 1
61495: PUSH
61496: LD_INT 2
61498: NEG
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 0
61506: PUSH
61507: LD_INT 2
61509: NEG
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 1
61517: NEG
61518: PUSH
61519: LD_INT 3
61521: NEG
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 1
61529: NEG
61530: PUSH
61531: LD_INT 4
61533: NEG
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 2
61541: PUSH
61542: LD_INT 2
61544: NEG
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 2
61552: NEG
61553: PUSH
61554: LD_INT 4
61556: NEG
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 4
61564: PUSH
61565: LD_INT 0
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 4
61574: PUSH
61575: LD_INT 1
61577: NEG
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 5
61585: PUSH
61586: LD_INT 0
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 5
61595: PUSH
61596: LD_INT 1
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 4
61605: PUSH
61606: LD_INT 1
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 3
61615: PUSH
61616: LD_INT 0
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 3
61625: PUSH
61626: LD_INT 1
61628: NEG
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 3
61636: PUSH
61637: LD_INT 2
61639: NEG
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 5
61647: PUSH
61648: LD_INT 2
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 3
61657: PUSH
61658: LD_INT 3
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 3
61667: PUSH
61668: LD_INT 2
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 4
61677: PUSH
61678: LD_INT 3
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 4
61687: PUSH
61688: LD_INT 4
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 3
61697: PUSH
61698: LD_INT 4
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 2
61707: PUSH
61708: LD_INT 3
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 2
61717: PUSH
61718: LD_INT 2
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 4
61727: PUSH
61728: LD_INT 2
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 2
61737: PUSH
61738: LD_INT 4
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 0
61747: PUSH
61748: LD_INT 4
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 0
61757: PUSH
61758: LD_INT 3
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 1
61767: PUSH
61768: LD_INT 4
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 1
61777: PUSH
61778: LD_INT 5
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 0
61787: PUSH
61788: LD_INT 5
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 1
61797: NEG
61798: PUSH
61799: LD_INT 4
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 1
61808: NEG
61809: PUSH
61810: LD_INT 3
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 2
61819: PUSH
61820: LD_INT 5
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 2
61829: NEG
61830: PUSH
61831: LD_INT 3
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61885: LD_ADDR_VAR 0 34
61889: PUSH
61890: LD_INT 0
61892: PUSH
61893: LD_INT 4
61895: NEG
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 0
61903: PUSH
61904: LD_INT 5
61906: NEG
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 1
61914: PUSH
61915: LD_INT 4
61917: NEG
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 1
61925: PUSH
61926: LD_INT 3
61928: NEG
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 0
61936: PUSH
61937: LD_INT 3
61939: NEG
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 1
61947: NEG
61948: PUSH
61949: LD_INT 4
61951: NEG
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 1
61959: NEG
61960: PUSH
61961: LD_INT 5
61963: NEG
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 2
61971: PUSH
61972: LD_INT 3
61974: NEG
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 2
61982: NEG
61983: PUSH
61984: LD_INT 5
61986: NEG
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 3
61994: PUSH
61995: LD_INT 0
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: LD_INT 3
62004: PUSH
62005: LD_INT 1
62007: NEG
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 4
62015: PUSH
62016: LD_INT 0
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 4
62025: PUSH
62026: LD_INT 1
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 3
62035: PUSH
62036: LD_INT 1
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 2
62045: PUSH
62046: LD_INT 0
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 2
62055: PUSH
62056: LD_INT 1
62058: NEG
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 2
62066: PUSH
62067: LD_INT 2
62069: NEG
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 4
62077: PUSH
62078: LD_INT 2
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 4
62087: PUSH
62088: LD_INT 4
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 4
62097: PUSH
62098: LD_INT 3
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 5
62107: PUSH
62108: LD_INT 4
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 5
62117: PUSH
62118: LD_INT 5
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 4
62127: PUSH
62128: LD_INT 5
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 3
62137: PUSH
62138: LD_INT 4
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 3
62147: PUSH
62148: LD_INT 3
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 5
62157: PUSH
62158: LD_INT 3
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 3
62167: PUSH
62168: LD_INT 5
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 0
62177: PUSH
62178: LD_INT 3
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 0
62187: PUSH
62188: LD_INT 2
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 1
62197: PUSH
62198: LD_INT 3
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 1
62207: PUSH
62208: LD_INT 4
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 0
62217: PUSH
62218: LD_INT 4
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 1
62227: NEG
62228: PUSH
62229: LD_INT 3
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 1
62238: NEG
62239: PUSH
62240: LD_INT 2
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 2
62249: PUSH
62250: LD_INT 4
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 2
62259: NEG
62260: PUSH
62261: LD_INT 2
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 4
62270: NEG
62271: PUSH
62272: LD_INT 0
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 4
62281: NEG
62282: PUSH
62283: LD_INT 1
62285: NEG
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 3
62293: NEG
62294: PUSH
62295: LD_INT 0
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 3
62304: NEG
62305: PUSH
62306: LD_INT 1
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 4
62315: NEG
62316: PUSH
62317: LD_INT 1
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 5
62326: NEG
62327: PUSH
62328: LD_INT 0
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 5
62337: NEG
62338: PUSH
62339: LD_INT 1
62341: NEG
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 5
62349: NEG
62350: PUSH
62351: LD_INT 2
62353: NEG
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 3
62361: NEG
62362: PUSH
62363: LD_INT 2
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: ST_TO_ADDR
// end ; end ;
62417: GO 62420
62419: POP
// case btype of b_depot , b_warehouse :
62420: LD_VAR 0 1
62424: PUSH
62425: LD_INT 0
62427: DOUBLE
62428: EQUAL
62429: IFTRUE 62439
62431: LD_INT 1
62433: DOUBLE
62434: EQUAL
62435: IFTRUE 62439
62437: GO 62640
62439: POP
// case nation of nation_american :
62440: LD_VAR 0 5
62444: PUSH
62445: LD_INT 1
62447: DOUBLE
62448: EQUAL
62449: IFTRUE 62453
62451: GO 62509
62453: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62454: LD_ADDR_VAR 0 9
62458: PUSH
62459: LD_VAR 0 11
62463: PUSH
62464: LD_VAR 0 12
62468: PUSH
62469: LD_VAR 0 13
62473: PUSH
62474: LD_VAR 0 14
62478: PUSH
62479: LD_VAR 0 15
62483: PUSH
62484: LD_VAR 0 16
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: PUSH
62497: LD_VAR 0 4
62501: PUSH
62502: LD_INT 1
62504: PLUS
62505: ARRAY
62506: ST_TO_ADDR
62507: GO 62638
62509: LD_INT 2
62511: DOUBLE
62512: EQUAL
62513: IFTRUE 62517
62515: GO 62573
62517: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62518: LD_ADDR_VAR 0 9
62522: PUSH
62523: LD_VAR 0 17
62527: PUSH
62528: LD_VAR 0 18
62532: PUSH
62533: LD_VAR 0 19
62537: PUSH
62538: LD_VAR 0 20
62542: PUSH
62543: LD_VAR 0 21
62547: PUSH
62548: LD_VAR 0 22
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: PUSH
62561: LD_VAR 0 4
62565: PUSH
62566: LD_INT 1
62568: PLUS
62569: ARRAY
62570: ST_TO_ADDR
62571: GO 62638
62573: LD_INT 3
62575: DOUBLE
62576: EQUAL
62577: IFTRUE 62581
62579: GO 62637
62581: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62582: LD_ADDR_VAR 0 9
62586: PUSH
62587: LD_VAR 0 23
62591: PUSH
62592: LD_VAR 0 24
62596: PUSH
62597: LD_VAR 0 25
62601: PUSH
62602: LD_VAR 0 26
62606: PUSH
62607: LD_VAR 0 27
62611: PUSH
62612: LD_VAR 0 28
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: PUSH
62625: LD_VAR 0 4
62629: PUSH
62630: LD_INT 1
62632: PLUS
62633: ARRAY
62634: ST_TO_ADDR
62635: GO 62638
62637: POP
62638: GO 63193
62640: LD_INT 2
62642: DOUBLE
62643: EQUAL
62644: IFTRUE 62654
62646: LD_INT 3
62648: DOUBLE
62649: EQUAL
62650: IFTRUE 62654
62652: GO 62710
62654: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62655: LD_ADDR_VAR 0 9
62659: PUSH
62660: LD_VAR 0 29
62664: PUSH
62665: LD_VAR 0 30
62669: PUSH
62670: LD_VAR 0 31
62674: PUSH
62675: LD_VAR 0 32
62679: PUSH
62680: LD_VAR 0 33
62684: PUSH
62685: LD_VAR 0 34
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: PUSH
62698: LD_VAR 0 4
62702: PUSH
62703: LD_INT 1
62705: PLUS
62706: ARRAY
62707: ST_TO_ADDR
62708: GO 63193
62710: LD_INT 16
62712: DOUBLE
62713: EQUAL
62714: IFTRUE 62772
62716: LD_INT 17
62718: DOUBLE
62719: EQUAL
62720: IFTRUE 62772
62722: LD_INT 18
62724: DOUBLE
62725: EQUAL
62726: IFTRUE 62772
62728: LD_INT 19
62730: DOUBLE
62731: EQUAL
62732: IFTRUE 62772
62734: LD_INT 22
62736: DOUBLE
62737: EQUAL
62738: IFTRUE 62772
62740: LD_INT 20
62742: DOUBLE
62743: EQUAL
62744: IFTRUE 62772
62746: LD_INT 21
62748: DOUBLE
62749: EQUAL
62750: IFTRUE 62772
62752: LD_INT 23
62754: DOUBLE
62755: EQUAL
62756: IFTRUE 62772
62758: LD_INT 24
62760: DOUBLE
62761: EQUAL
62762: IFTRUE 62772
62764: LD_INT 25
62766: DOUBLE
62767: EQUAL
62768: IFTRUE 62772
62770: GO 62828
62772: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62773: LD_ADDR_VAR 0 9
62777: PUSH
62778: LD_VAR 0 35
62782: PUSH
62783: LD_VAR 0 36
62787: PUSH
62788: LD_VAR 0 37
62792: PUSH
62793: LD_VAR 0 38
62797: PUSH
62798: LD_VAR 0 39
62802: PUSH
62803: LD_VAR 0 40
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: PUSH
62816: LD_VAR 0 4
62820: PUSH
62821: LD_INT 1
62823: PLUS
62824: ARRAY
62825: ST_TO_ADDR
62826: GO 63193
62828: LD_INT 6
62830: DOUBLE
62831: EQUAL
62832: IFTRUE 62884
62834: LD_INT 7
62836: DOUBLE
62837: EQUAL
62838: IFTRUE 62884
62840: LD_INT 8
62842: DOUBLE
62843: EQUAL
62844: IFTRUE 62884
62846: LD_INT 13
62848: DOUBLE
62849: EQUAL
62850: IFTRUE 62884
62852: LD_INT 12
62854: DOUBLE
62855: EQUAL
62856: IFTRUE 62884
62858: LD_INT 15
62860: DOUBLE
62861: EQUAL
62862: IFTRUE 62884
62864: LD_INT 11
62866: DOUBLE
62867: EQUAL
62868: IFTRUE 62884
62870: LD_INT 14
62872: DOUBLE
62873: EQUAL
62874: IFTRUE 62884
62876: LD_INT 10
62878: DOUBLE
62879: EQUAL
62880: IFTRUE 62884
62882: GO 62940
62884: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62885: LD_ADDR_VAR 0 9
62889: PUSH
62890: LD_VAR 0 41
62894: PUSH
62895: LD_VAR 0 42
62899: PUSH
62900: LD_VAR 0 43
62904: PUSH
62905: LD_VAR 0 44
62909: PUSH
62910: LD_VAR 0 45
62914: PUSH
62915: LD_VAR 0 46
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: PUSH
62928: LD_VAR 0 4
62932: PUSH
62933: LD_INT 1
62935: PLUS
62936: ARRAY
62937: ST_TO_ADDR
62938: GO 63193
62940: LD_INT 36
62942: DOUBLE
62943: EQUAL
62944: IFTRUE 62948
62946: GO 63004
62948: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62949: LD_ADDR_VAR 0 9
62953: PUSH
62954: LD_VAR 0 47
62958: PUSH
62959: LD_VAR 0 48
62963: PUSH
62964: LD_VAR 0 49
62968: PUSH
62969: LD_VAR 0 50
62973: PUSH
62974: LD_VAR 0 51
62978: PUSH
62979: LD_VAR 0 52
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: PUSH
62992: LD_VAR 0 4
62996: PUSH
62997: LD_INT 1
62999: PLUS
63000: ARRAY
63001: ST_TO_ADDR
63002: GO 63193
63004: LD_INT 4
63006: DOUBLE
63007: EQUAL
63008: IFTRUE 63030
63010: LD_INT 5
63012: DOUBLE
63013: EQUAL
63014: IFTRUE 63030
63016: LD_INT 34
63018: DOUBLE
63019: EQUAL
63020: IFTRUE 63030
63022: LD_INT 37
63024: DOUBLE
63025: EQUAL
63026: IFTRUE 63030
63028: GO 63086
63030: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63031: LD_ADDR_VAR 0 9
63035: PUSH
63036: LD_VAR 0 53
63040: PUSH
63041: LD_VAR 0 54
63045: PUSH
63046: LD_VAR 0 55
63050: PUSH
63051: LD_VAR 0 56
63055: PUSH
63056: LD_VAR 0 57
63060: PUSH
63061: LD_VAR 0 58
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: PUSH
63074: LD_VAR 0 4
63078: PUSH
63079: LD_INT 1
63081: PLUS
63082: ARRAY
63083: ST_TO_ADDR
63084: GO 63193
63086: LD_INT 31
63088: DOUBLE
63089: EQUAL
63090: IFTRUE 63136
63092: LD_INT 32
63094: DOUBLE
63095: EQUAL
63096: IFTRUE 63136
63098: LD_INT 33
63100: DOUBLE
63101: EQUAL
63102: IFTRUE 63136
63104: LD_INT 27
63106: DOUBLE
63107: EQUAL
63108: IFTRUE 63136
63110: LD_INT 26
63112: DOUBLE
63113: EQUAL
63114: IFTRUE 63136
63116: LD_INT 28
63118: DOUBLE
63119: EQUAL
63120: IFTRUE 63136
63122: LD_INT 29
63124: DOUBLE
63125: EQUAL
63126: IFTRUE 63136
63128: LD_INT 30
63130: DOUBLE
63131: EQUAL
63132: IFTRUE 63136
63134: GO 63192
63136: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63137: LD_ADDR_VAR 0 9
63141: PUSH
63142: LD_VAR 0 59
63146: PUSH
63147: LD_VAR 0 60
63151: PUSH
63152: LD_VAR 0 61
63156: PUSH
63157: LD_VAR 0 62
63161: PUSH
63162: LD_VAR 0 63
63166: PUSH
63167: LD_VAR 0 64
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: PUSH
63180: LD_VAR 0 4
63184: PUSH
63185: LD_INT 1
63187: PLUS
63188: ARRAY
63189: ST_TO_ADDR
63190: GO 63193
63192: POP
// temp_list2 = [ ] ;
63193: LD_ADDR_VAR 0 10
63197: PUSH
63198: EMPTY
63199: ST_TO_ADDR
// for i in temp_list do
63200: LD_ADDR_VAR 0 8
63204: PUSH
63205: LD_VAR 0 9
63209: PUSH
63210: FOR_IN
63211: IFFALSE 63263
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63213: LD_ADDR_VAR 0 10
63217: PUSH
63218: LD_VAR 0 10
63222: PUSH
63223: LD_VAR 0 8
63227: PUSH
63228: LD_INT 1
63230: ARRAY
63231: PUSH
63232: LD_VAR 0 2
63236: PLUS
63237: PUSH
63238: LD_VAR 0 8
63242: PUSH
63243: LD_INT 2
63245: ARRAY
63246: PUSH
63247: LD_VAR 0 3
63251: PLUS
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: EMPTY
63258: LIST
63259: ADD
63260: ST_TO_ADDR
63261: GO 63210
63263: POP
63264: POP
// result = temp_list2 ;
63265: LD_ADDR_VAR 0 7
63269: PUSH
63270: LD_VAR 0 10
63274: ST_TO_ADDR
// end ;
63275: LD_VAR 0 7
63279: RET
// export function EnemyInRange ( unit , dist ) ; begin
63280: LD_INT 0
63282: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63283: LD_ADDR_VAR 0 3
63287: PUSH
63288: LD_VAR 0 1
63292: PPUSH
63293: CALL_OW 255
63297: PPUSH
63298: LD_VAR 0 1
63302: PPUSH
63303: CALL_OW 250
63307: PPUSH
63308: LD_VAR 0 1
63312: PPUSH
63313: CALL_OW 251
63317: PPUSH
63318: LD_VAR 0 2
63322: PPUSH
63323: CALL 36682 0 4
63327: PUSH
63328: LD_INT 4
63330: ARRAY
63331: ST_TO_ADDR
// end ;
63332: LD_VAR 0 3
63336: RET
// export function PlayerSeeMe ( unit ) ; begin
63337: LD_INT 0
63339: PPUSH
// result := See ( your_side , unit ) ;
63340: LD_ADDR_VAR 0 2
63344: PUSH
63345: LD_OWVAR 2
63349: PPUSH
63350: LD_VAR 0 1
63354: PPUSH
63355: CALL_OW 292
63359: ST_TO_ADDR
// end ;
63360: LD_VAR 0 2
63364: RET
// export function ReverseDir ( unit ) ; begin
63365: LD_INT 0
63367: PPUSH
// if not unit then
63368: LD_VAR 0 1
63372: NOT
63373: IFFALSE 63377
// exit ;
63375: GO 63400
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63377: LD_ADDR_VAR 0 2
63381: PUSH
63382: LD_VAR 0 1
63386: PPUSH
63387: CALL_OW 254
63391: PUSH
63392: LD_INT 3
63394: PLUS
63395: PUSH
63396: LD_INT 6
63398: MOD
63399: ST_TO_ADDR
// end ;
63400: LD_VAR 0 2
63404: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63405: LD_INT 0
63407: PPUSH
63408: PPUSH
63409: PPUSH
63410: PPUSH
63411: PPUSH
63412: PPUSH
// if not unit or not hexes then
63413: LD_VAR 0 1
63417: NOT
63418: PUSH
63419: LD_VAR 0 2
63423: NOT
63424: OR
63425: IFFALSE 63429
// exit ;
63427: GO 63552
// dist := 9999 ;
63429: LD_ADDR_VAR 0 5
63433: PUSH
63434: LD_INT 9999
63436: ST_TO_ADDR
// for i = 1 to hexes do
63437: LD_ADDR_VAR 0 4
63441: PUSH
63442: DOUBLE
63443: LD_INT 1
63445: DEC
63446: ST_TO_ADDR
63447: LD_VAR 0 2
63451: PUSH
63452: FOR_TO
63453: IFFALSE 63540
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63455: LD_ADDR_VAR 0 6
63459: PUSH
63460: LD_VAR 0 1
63464: PPUSH
63465: LD_VAR 0 2
63469: PUSH
63470: LD_VAR 0 4
63474: ARRAY
63475: PUSH
63476: LD_INT 1
63478: ARRAY
63479: PPUSH
63480: LD_VAR 0 2
63484: PUSH
63485: LD_VAR 0 4
63489: ARRAY
63490: PUSH
63491: LD_INT 2
63493: ARRAY
63494: PPUSH
63495: CALL_OW 297
63499: ST_TO_ADDR
// if tdist < dist then
63500: LD_VAR 0 6
63504: PUSH
63505: LD_VAR 0 5
63509: LESS
63510: IFFALSE 63538
// begin hex := hexes [ i ] ;
63512: LD_ADDR_VAR 0 8
63516: PUSH
63517: LD_VAR 0 2
63521: PUSH
63522: LD_VAR 0 4
63526: ARRAY
63527: ST_TO_ADDR
// dist := tdist ;
63528: LD_ADDR_VAR 0 5
63532: PUSH
63533: LD_VAR 0 6
63537: ST_TO_ADDR
// end ; end ;
63538: GO 63452
63540: POP
63541: POP
// result := hex ;
63542: LD_ADDR_VAR 0 3
63546: PUSH
63547: LD_VAR 0 8
63551: ST_TO_ADDR
// end ;
63552: LD_VAR 0 3
63556: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63557: LD_INT 0
63559: PPUSH
63560: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63561: LD_VAR 0 1
63565: NOT
63566: PUSH
63567: LD_VAR 0 1
63571: PUSH
63572: LD_INT 21
63574: PUSH
63575: LD_INT 2
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 23
63584: PUSH
63585: LD_INT 2
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PPUSH
63596: CALL_OW 69
63600: IN
63601: NOT
63602: OR
63603: IFFALSE 63607
// exit ;
63605: GO 63654
// for i = 1 to 3 do
63607: LD_ADDR_VAR 0 3
63611: PUSH
63612: DOUBLE
63613: LD_INT 1
63615: DEC
63616: ST_TO_ADDR
63617: LD_INT 3
63619: PUSH
63620: FOR_TO
63621: IFFALSE 63652
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63623: LD_VAR 0 1
63627: PPUSH
63628: CALL_OW 250
63632: PPUSH
63633: LD_VAR 0 1
63637: PPUSH
63638: CALL_OW 251
63642: PPUSH
63643: LD_INT 1
63645: PPUSH
63646: CALL_OW 453
63650: GO 63620
63652: POP
63653: POP
// end ;
63654: LD_VAR 0 2
63658: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63659: LD_INT 0
63661: PPUSH
63662: PPUSH
63663: PPUSH
63664: PPUSH
63665: PPUSH
63666: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63667: LD_VAR 0 1
63671: NOT
63672: PUSH
63673: LD_VAR 0 2
63677: NOT
63678: OR
63679: PUSH
63680: LD_VAR 0 1
63684: PPUSH
63685: CALL_OW 314
63689: OR
63690: IFFALSE 63694
// exit ;
63692: GO 64135
// x := GetX ( enemy_unit ) ;
63694: LD_ADDR_VAR 0 7
63698: PUSH
63699: LD_VAR 0 2
63703: PPUSH
63704: CALL_OW 250
63708: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63709: LD_ADDR_VAR 0 8
63713: PUSH
63714: LD_VAR 0 2
63718: PPUSH
63719: CALL_OW 251
63723: ST_TO_ADDR
// if not x or not y then
63724: LD_VAR 0 7
63728: NOT
63729: PUSH
63730: LD_VAR 0 8
63734: NOT
63735: OR
63736: IFFALSE 63740
// exit ;
63738: GO 64135
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63740: LD_ADDR_VAR 0 6
63744: PUSH
63745: LD_VAR 0 7
63749: PPUSH
63750: LD_INT 0
63752: PPUSH
63753: LD_INT 4
63755: PPUSH
63756: CALL_OW 272
63760: PUSH
63761: LD_VAR 0 8
63765: PPUSH
63766: LD_INT 0
63768: PPUSH
63769: LD_INT 4
63771: PPUSH
63772: CALL_OW 273
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_VAR 0 7
63785: PPUSH
63786: LD_INT 1
63788: PPUSH
63789: LD_INT 4
63791: PPUSH
63792: CALL_OW 272
63796: PUSH
63797: LD_VAR 0 8
63801: PPUSH
63802: LD_INT 1
63804: PPUSH
63805: LD_INT 4
63807: PPUSH
63808: CALL_OW 273
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_VAR 0 7
63821: PPUSH
63822: LD_INT 2
63824: PPUSH
63825: LD_INT 4
63827: PPUSH
63828: CALL_OW 272
63832: PUSH
63833: LD_VAR 0 8
63837: PPUSH
63838: LD_INT 2
63840: PPUSH
63841: LD_INT 4
63843: PPUSH
63844: CALL_OW 273
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: PUSH
63853: LD_VAR 0 7
63857: PPUSH
63858: LD_INT 3
63860: PPUSH
63861: LD_INT 4
63863: PPUSH
63864: CALL_OW 272
63868: PUSH
63869: LD_VAR 0 8
63873: PPUSH
63874: LD_INT 3
63876: PPUSH
63877: LD_INT 4
63879: PPUSH
63880: CALL_OW 273
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_VAR 0 7
63893: PPUSH
63894: LD_INT 4
63896: PPUSH
63897: LD_INT 4
63899: PPUSH
63900: CALL_OW 272
63904: PUSH
63905: LD_VAR 0 8
63909: PPUSH
63910: LD_INT 4
63912: PPUSH
63913: LD_INT 4
63915: PPUSH
63916: CALL_OW 273
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_VAR 0 7
63929: PPUSH
63930: LD_INT 5
63932: PPUSH
63933: LD_INT 4
63935: PPUSH
63936: CALL_OW 272
63940: PUSH
63941: LD_VAR 0 8
63945: PPUSH
63946: LD_INT 5
63948: PPUSH
63949: LD_INT 4
63951: PPUSH
63952: CALL_OW 273
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: ST_TO_ADDR
// for i = tmp downto 1 do
63969: LD_ADDR_VAR 0 4
63973: PUSH
63974: DOUBLE
63975: LD_VAR 0 6
63979: INC
63980: ST_TO_ADDR
63981: LD_INT 1
63983: PUSH
63984: FOR_DOWNTO
63985: IFFALSE 64086
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63987: LD_VAR 0 6
63991: PUSH
63992: LD_VAR 0 4
63996: ARRAY
63997: PUSH
63998: LD_INT 1
64000: ARRAY
64001: PPUSH
64002: LD_VAR 0 6
64006: PUSH
64007: LD_VAR 0 4
64011: ARRAY
64012: PUSH
64013: LD_INT 2
64015: ARRAY
64016: PPUSH
64017: CALL_OW 488
64021: NOT
64022: PUSH
64023: LD_VAR 0 6
64027: PUSH
64028: LD_VAR 0 4
64032: ARRAY
64033: PUSH
64034: LD_INT 1
64036: ARRAY
64037: PPUSH
64038: LD_VAR 0 6
64042: PUSH
64043: LD_VAR 0 4
64047: ARRAY
64048: PUSH
64049: LD_INT 2
64051: ARRAY
64052: PPUSH
64053: CALL_OW 428
64057: PUSH
64058: LD_INT 0
64060: NONEQUAL
64061: OR
64062: IFFALSE 64084
// tmp := Delete ( tmp , i ) ;
64064: LD_ADDR_VAR 0 6
64068: PUSH
64069: LD_VAR 0 6
64073: PPUSH
64074: LD_VAR 0 4
64078: PPUSH
64079: CALL_OW 3
64083: ST_TO_ADDR
64084: GO 63984
64086: POP
64087: POP
// j := GetClosestHex ( unit , tmp ) ;
64088: LD_ADDR_VAR 0 5
64092: PUSH
64093: LD_VAR 0 1
64097: PPUSH
64098: LD_VAR 0 6
64102: PPUSH
64103: CALL 63405 0 2
64107: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64108: LD_VAR 0 1
64112: PPUSH
64113: LD_VAR 0 5
64117: PUSH
64118: LD_INT 1
64120: ARRAY
64121: PPUSH
64122: LD_VAR 0 5
64126: PUSH
64127: LD_INT 2
64129: ARRAY
64130: PPUSH
64131: CALL_OW 111
// end ;
64135: LD_VAR 0 3
64139: RET
// export function PrepareApemanSoldier ( ) ; begin
64140: LD_INT 0
64142: PPUSH
// uc_nation := 0 ;
64143: LD_ADDR_OWVAR 21
64147: PUSH
64148: LD_INT 0
64150: ST_TO_ADDR
// hc_sex := sex_male ;
64151: LD_ADDR_OWVAR 27
64155: PUSH
64156: LD_INT 1
64158: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64159: LD_ADDR_OWVAR 28
64163: PUSH
64164: LD_INT 15
64166: ST_TO_ADDR
// hc_gallery :=  ;
64167: LD_ADDR_OWVAR 33
64171: PUSH
64172: LD_STRING 
64174: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64175: LD_ADDR_OWVAR 31
64179: PUSH
64180: LD_INT 0
64182: PPUSH
64183: LD_INT 3
64185: PPUSH
64186: CALL_OW 12
64190: PUSH
64191: LD_INT 0
64193: PPUSH
64194: LD_INT 3
64196: PPUSH
64197: CALL_OW 12
64201: PUSH
64202: LD_INT 0
64204: PUSH
64205: LD_INT 0
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: ST_TO_ADDR
// end ;
64214: LD_VAR 0 1
64218: RET
// export function PrepareApemanEngineer ( ) ; begin
64219: LD_INT 0
64221: PPUSH
// uc_nation := 0 ;
64222: LD_ADDR_OWVAR 21
64226: PUSH
64227: LD_INT 0
64229: ST_TO_ADDR
// hc_sex := sex_male ;
64230: LD_ADDR_OWVAR 27
64234: PUSH
64235: LD_INT 1
64237: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64238: LD_ADDR_OWVAR 28
64242: PUSH
64243: LD_INT 16
64245: ST_TO_ADDR
// hc_gallery :=  ;
64246: LD_ADDR_OWVAR 33
64250: PUSH
64251: LD_STRING 
64253: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64254: LD_ADDR_OWVAR 31
64258: PUSH
64259: LD_INT 0
64261: PPUSH
64262: LD_INT 3
64264: PPUSH
64265: CALL_OW 12
64269: PUSH
64270: LD_INT 0
64272: PPUSH
64273: LD_INT 3
64275: PPUSH
64276: CALL_OW 12
64280: PUSH
64281: LD_INT 0
64283: PUSH
64284: LD_INT 0
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: LIST
64291: LIST
64292: ST_TO_ADDR
// end ;
64293: LD_VAR 0 1
64297: RET
// export function PrepareApeman ( agressivity ) ; begin
64298: LD_INT 0
64300: PPUSH
// uc_side := 0 ;
64301: LD_ADDR_OWVAR 20
64305: PUSH
64306: LD_INT 0
64308: ST_TO_ADDR
// uc_nation := 0 ;
64309: LD_ADDR_OWVAR 21
64313: PUSH
64314: LD_INT 0
64316: ST_TO_ADDR
// hc_sex := sex_male ;
64317: LD_ADDR_OWVAR 27
64321: PUSH
64322: LD_INT 1
64324: ST_TO_ADDR
// hc_class := class_apeman ;
64325: LD_ADDR_OWVAR 28
64329: PUSH
64330: LD_INT 12
64332: ST_TO_ADDR
// hc_gallery :=  ;
64333: LD_ADDR_OWVAR 33
64337: PUSH
64338: LD_STRING 
64340: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64341: LD_ADDR_OWVAR 35
64345: PUSH
64346: LD_VAR 0 1
64350: NEG
64351: PPUSH
64352: LD_VAR 0 1
64356: PPUSH
64357: CALL_OW 12
64361: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64362: LD_ADDR_OWVAR 31
64366: PUSH
64367: LD_INT 0
64369: PPUSH
64370: LD_INT 3
64372: PPUSH
64373: CALL_OW 12
64377: PUSH
64378: LD_INT 0
64380: PPUSH
64381: LD_INT 3
64383: PPUSH
64384: CALL_OW 12
64388: PUSH
64389: LD_INT 0
64391: PUSH
64392: LD_INT 0
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: LIST
64399: LIST
64400: ST_TO_ADDR
// end ;
64401: LD_VAR 0 2
64405: RET
// export function PrepareTiger ( agressivity ) ; begin
64406: LD_INT 0
64408: PPUSH
// uc_side := 0 ;
64409: LD_ADDR_OWVAR 20
64413: PUSH
64414: LD_INT 0
64416: ST_TO_ADDR
// uc_nation := 0 ;
64417: LD_ADDR_OWVAR 21
64421: PUSH
64422: LD_INT 0
64424: ST_TO_ADDR
// hc_class := class_tiger ;
64425: LD_ADDR_OWVAR 28
64429: PUSH
64430: LD_INT 14
64432: ST_TO_ADDR
// hc_gallery :=  ;
64433: LD_ADDR_OWVAR 33
64437: PUSH
64438: LD_STRING 
64440: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64441: LD_ADDR_OWVAR 35
64445: PUSH
64446: LD_VAR 0 1
64450: NEG
64451: PPUSH
64452: LD_VAR 0 1
64456: PPUSH
64457: CALL_OW 12
64461: ST_TO_ADDR
// end ;
64462: LD_VAR 0 2
64466: RET
// export function PrepareEnchidna ( ) ; begin
64467: LD_INT 0
64469: PPUSH
// uc_side := 0 ;
64470: LD_ADDR_OWVAR 20
64474: PUSH
64475: LD_INT 0
64477: ST_TO_ADDR
// uc_nation := 0 ;
64478: LD_ADDR_OWVAR 21
64482: PUSH
64483: LD_INT 0
64485: ST_TO_ADDR
// hc_class := class_baggie ;
64486: LD_ADDR_OWVAR 28
64490: PUSH
64491: LD_INT 13
64493: ST_TO_ADDR
// hc_gallery :=  ;
64494: LD_ADDR_OWVAR 33
64498: PUSH
64499: LD_STRING 
64501: ST_TO_ADDR
// end ;
64502: LD_VAR 0 1
64506: RET
// export function PrepareFrog ( ) ; begin
64507: LD_INT 0
64509: PPUSH
// uc_side := 0 ;
64510: LD_ADDR_OWVAR 20
64514: PUSH
64515: LD_INT 0
64517: ST_TO_ADDR
// uc_nation := 0 ;
64518: LD_ADDR_OWVAR 21
64522: PUSH
64523: LD_INT 0
64525: ST_TO_ADDR
// hc_class := class_frog ;
64526: LD_ADDR_OWVAR 28
64530: PUSH
64531: LD_INT 19
64533: ST_TO_ADDR
// hc_gallery :=  ;
64534: LD_ADDR_OWVAR 33
64538: PUSH
64539: LD_STRING 
64541: ST_TO_ADDR
// end ;
64542: LD_VAR 0 1
64546: RET
// export function PrepareFish ( ) ; begin
64547: LD_INT 0
64549: PPUSH
// uc_side := 0 ;
64550: LD_ADDR_OWVAR 20
64554: PUSH
64555: LD_INT 0
64557: ST_TO_ADDR
// uc_nation := 0 ;
64558: LD_ADDR_OWVAR 21
64562: PUSH
64563: LD_INT 0
64565: ST_TO_ADDR
// hc_class := class_fish ;
64566: LD_ADDR_OWVAR 28
64570: PUSH
64571: LD_INT 20
64573: ST_TO_ADDR
// hc_gallery :=  ;
64574: LD_ADDR_OWVAR 33
64578: PUSH
64579: LD_STRING 
64581: ST_TO_ADDR
// end ;
64582: LD_VAR 0 1
64586: RET
// export function PrepareBird ( ) ; begin
64587: LD_INT 0
64589: PPUSH
// uc_side := 0 ;
64590: LD_ADDR_OWVAR 20
64594: PUSH
64595: LD_INT 0
64597: ST_TO_ADDR
// uc_nation := 0 ;
64598: LD_ADDR_OWVAR 21
64602: PUSH
64603: LD_INT 0
64605: ST_TO_ADDR
// hc_class := class_phororhacos ;
64606: LD_ADDR_OWVAR 28
64610: PUSH
64611: LD_INT 18
64613: ST_TO_ADDR
// hc_gallery :=  ;
64614: LD_ADDR_OWVAR 33
64618: PUSH
64619: LD_STRING 
64621: ST_TO_ADDR
// end ;
64622: LD_VAR 0 1
64626: RET
// export function PrepareHorse ( ) ; begin
64627: LD_INT 0
64629: PPUSH
// uc_side := 0 ;
64630: LD_ADDR_OWVAR 20
64634: PUSH
64635: LD_INT 0
64637: ST_TO_ADDR
// uc_nation := 0 ;
64638: LD_ADDR_OWVAR 21
64642: PUSH
64643: LD_INT 0
64645: ST_TO_ADDR
// hc_class := class_horse ;
64646: LD_ADDR_OWVAR 28
64650: PUSH
64651: LD_INT 21
64653: ST_TO_ADDR
// hc_gallery :=  ;
64654: LD_ADDR_OWVAR 33
64658: PUSH
64659: LD_STRING 
64661: ST_TO_ADDR
// end ;
64662: LD_VAR 0 1
64666: RET
// export function PrepareMastodont ( ) ; begin
64667: LD_INT 0
64669: PPUSH
// uc_side := 0 ;
64670: LD_ADDR_OWVAR 20
64674: PUSH
64675: LD_INT 0
64677: ST_TO_ADDR
// uc_nation := 0 ;
64678: LD_ADDR_OWVAR 21
64682: PUSH
64683: LD_INT 0
64685: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64686: LD_ADDR_OWVAR 37
64690: PUSH
64691: LD_INT 31
64693: ST_TO_ADDR
// vc_control := control_rider ;
64694: LD_ADDR_OWVAR 38
64698: PUSH
64699: LD_INT 4
64701: ST_TO_ADDR
// end ;
64702: LD_VAR 0 1
64706: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64707: LD_INT 0
64709: PPUSH
64710: PPUSH
64711: PPUSH
// uc_side = 0 ;
64712: LD_ADDR_OWVAR 20
64716: PUSH
64717: LD_INT 0
64719: ST_TO_ADDR
// uc_nation = 0 ;
64720: LD_ADDR_OWVAR 21
64724: PUSH
64725: LD_INT 0
64727: ST_TO_ADDR
// InitHc_All ( ) ;
64728: CALL_OW 584
// InitVc ;
64732: CALL_OW 20
// if mastodonts then
64736: LD_VAR 0 6
64740: IFFALSE 64807
// for i = 1 to mastodonts do
64742: LD_ADDR_VAR 0 11
64746: PUSH
64747: DOUBLE
64748: LD_INT 1
64750: DEC
64751: ST_TO_ADDR
64752: LD_VAR 0 6
64756: PUSH
64757: FOR_TO
64758: IFFALSE 64805
// begin vc_chassis := 31 ;
64760: LD_ADDR_OWVAR 37
64764: PUSH
64765: LD_INT 31
64767: ST_TO_ADDR
// vc_control := control_rider ;
64768: LD_ADDR_OWVAR 38
64772: PUSH
64773: LD_INT 4
64775: ST_TO_ADDR
// animal := CreateVehicle ;
64776: LD_ADDR_VAR 0 12
64780: PUSH
64781: CALL_OW 45
64785: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64786: LD_VAR 0 12
64790: PPUSH
64791: LD_VAR 0 8
64795: PPUSH
64796: LD_INT 0
64798: PPUSH
64799: CALL 66942 0 3
// end ;
64803: GO 64757
64805: POP
64806: POP
// if horses then
64807: LD_VAR 0 5
64811: IFFALSE 64878
// for i = 1 to horses do
64813: LD_ADDR_VAR 0 11
64817: PUSH
64818: DOUBLE
64819: LD_INT 1
64821: DEC
64822: ST_TO_ADDR
64823: LD_VAR 0 5
64827: PUSH
64828: FOR_TO
64829: IFFALSE 64876
// begin hc_class := 21 ;
64831: LD_ADDR_OWVAR 28
64835: PUSH
64836: LD_INT 21
64838: ST_TO_ADDR
// hc_gallery :=  ;
64839: LD_ADDR_OWVAR 33
64843: PUSH
64844: LD_STRING 
64846: ST_TO_ADDR
// animal := CreateHuman ;
64847: LD_ADDR_VAR 0 12
64851: PUSH
64852: CALL_OW 44
64856: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64857: LD_VAR 0 12
64861: PPUSH
64862: LD_VAR 0 8
64866: PPUSH
64867: LD_INT 0
64869: PPUSH
64870: CALL 66942 0 3
// end ;
64874: GO 64828
64876: POP
64877: POP
// if birds then
64878: LD_VAR 0 1
64882: IFFALSE 64949
// for i = 1 to birds do
64884: LD_ADDR_VAR 0 11
64888: PUSH
64889: DOUBLE
64890: LD_INT 1
64892: DEC
64893: ST_TO_ADDR
64894: LD_VAR 0 1
64898: PUSH
64899: FOR_TO
64900: IFFALSE 64947
// begin hc_class = 18 ;
64902: LD_ADDR_OWVAR 28
64906: PUSH
64907: LD_INT 18
64909: ST_TO_ADDR
// hc_gallery =  ;
64910: LD_ADDR_OWVAR 33
64914: PUSH
64915: LD_STRING 
64917: ST_TO_ADDR
// animal := CreateHuman ;
64918: LD_ADDR_VAR 0 12
64922: PUSH
64923: CALL_OW 44
64927: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64928: LD_VAR 0 12
64932: PPUSH
64933: LD_VAR 0 8
64937: PPUSH
64938: LD_INT 0
64940: PPUSH
64941: CALL 66942 0 3
// end ;
64945: GO 64899
64947: POP
64948: POP
// if tigers then
64949: LD_VAR 0 2
64953: IFFALSE 65037
// for i = 1 to tigers do
64955: LD_ADDR_VAR 0 11
64959: PUSH
64960: DOUBLE
64961: LD_INT 1
64963: DEC
64964: ST_TO_ADDR
64965: LD_VAR 0 2
64969: PUSH
64970: FOR_TO
64971: IFFALSE 65035
// begin hc_class = class_tiger ;
64973: LD_ADDR_OWVAR 28
64977: PUSH
64978: LD_INT 14
64980: ST_TO_ADDR
// hc_gallery =  ;
64981: LD_ADDR_OWVAR 33
64985: PUSH
64986: LD_STRING 
64988: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64989: LD_ADDR_OWVAR 35
64993: PUSH
64994: LD_INT 7
64996: NEG
64997: PPUSH
64998: LD_INT 7
65000: PPUSH
65001: CALL_OW 12
65005: ST_TO_ADDR
// animal := CreateHuman ;
65006: LD_ADDR_VAR 0 12
65010: PUSH
65011: CALL_OW 44
65015: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65016: LD_VAR 0 12
65020: PPUSH
65021: LD_VAR 0 8
65025: PPUSH
65026: LD_INT 0
65028: PPUSH
65029: CALL 66942 0 3
// end ;
65033: GO 64970
65035: POP
65036: POP
// if apemans then
65037: LD_VAR 0 3
65041: IFFALSE 65164
// for i = 1 to apemans do
65043: LD_ADDR_VAR 0 11
65047: PUSH
65048: DOUBLE
65049: LD_INT 1
65051: DEC
65052: ST_TO_ADDR
65053: LD_VAR 0 3
65057: PUSH
65058: FOR_TO
65059: IFFALSE 65162
// begin hc_class = class_apeman ;
65061: LD_ADDR_OWVAR 28
65065: PUSH
65066: LD_INT 12
65068: ST_TO_ADDR
// hc_gallery =  ;
65069: LD_ADDR_OWVAR 33
65073: PUSH
65074: LD_STRING 
65076: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65077: LD_ADDR_OWVAR 35
65081: PUSH
65082: LD_INT 2
65084: NEG
65085: PPUSH
65086: LD_INT 2
65088: PPUSH
65089: CALL_OW 12
65093: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65094: LD_ADDR_OWVAR 31
65098: PUSH
65099: LD_INT 1
65101: PPUSH
65102: LD_INT 3
65104: PPUSH
65105: CALL_OW 12
65109: PUSH
65110: LD_INT 1
65112: PPUSH
65113: LD_INT 3
65115: PPUSH
65116: CALL_OW 12
65120: PUSH
65121: LD_INT 0
65123: PUSH
65124: LD_INT 0
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: ST_TO_ADDR
// animal := CreateHuman ;
65133: LD_ADDR_VAR 0 12
65137: PUSH
65138: CALL_OW 44
65142: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65143: LD_VAR 0 12
65147: PPUSH
65148: LD_VAR 0 8
65152: PPUSH
65153: LD_INT 0
65155: PPUSH
65156: CALL 66942 0 3
// end ;
65160: GO 65058
65162: POP
65163: POP
// if enchidnas then
65164: LD_VAR 0 4
65168: IFFALSE 65235
// for i = 1 to enchidnas do
65170: LD_ADDR_VAR 0 11
65174: PUSH
65175: DOUBLE
65176: LD_INT 1
65178: DEC
65179: ST_TO_ADDR
65180: LD_VAR 0 4
65184: PUSH
65185: FOR_TO
65186: IFFALSE 65233
// begin hc_class = 13 ;
65188: LD_ADDR_OWVAR 28
65192: PUSH
65193: LD_INT 13
65195: ST_TO_ADDR
// hc_gallery =  ;
65196: LD_ADDR_OWVAR 33
65200: PUSH
65201: LD_STRING 
65203: ST_TO_ADDR
// animal := CreateHuman ;
65204: LD_ADDR_VAR 0 12
65208: PUSH
65209: CALL_OW 44
65213: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65214: LD_VAR 0 12
65218: PPUSH
65219: LD_VAR 0 8
65223: PPUSH
65224: LD_INT 0
65226: PPUSH
65227: CALL 66942 0 3
// end ;
65231: GO 65185
65233: POP
65234: POP
// if fishes then
65235: LD_VAR 0 7
65239: IFFALSE 65306
// for i = 1 to fishes do
65241: LD_ADDR_VAR 0 11
65245: PUSH
65246: DOUBLE
65247: LD_INT 1
65249: DEC
65250: ST_TO_ADDR
65251: LD_VAR 0 7
65255: PUSH
65256: FOR_TO
65257: IFFALSE 65304
// begin hc_class = 20 ;
65259: LD_ADDR_OWVAR 28
65263: PUSH
65264: LD_INT 20
65266: ST_TO_ADDR
// hc_gallery =  ;
65267: LD_ADDR_OWVAR 33
65271: PUSH
65272: LD_STRING 
65274: ST_TO_ADDR
// animal := CreateHuman ;
65275: LD_ADDR_VAR 0 12
65279: PUSH
65280: CALL_OW 44
65284: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65285: LD_VAR 0 12
65289: PPUSH
65290: LD_VAR 0 9
65294: PPUSH
65295: LD_INT 0
65297: PPUSH
65298: CALL 66942 0 3
// end ;
65302: GO 65256
65304: POP
65305: POP
// end ;
65306: LD_VAR 0 10
65310: RET
// export function WantHeal ( sci , unit ) ; begin
65311: LD_INT 0
65313: PPUSH
// if GetTaskList ( sci ) > 0 then
65314: LD_VAR 0 1
65318: PPUSH
65319: CALL_OW 437
65323: PUSH
65324: LD_INT 0
65326: GREATER
65327: IFFALSE 65397
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65329: LD_VAR 0 1
65333: PPUSH
65334: CALL_OW 437
65338: PUSH
65339: LD_INT 1
65341: ARRAY
65342: PUSH
65343: LD_INT 1
65345: ARRAY
65346: PUSH
65347: LD_STRING l
65349: EQUAL
65350: PUSH
65351: LD_VAR 0 1
65355: PPUSH
65356: CALL_OW 437
65360: PUSH
65361: LD_INT 1
65363: ARRAY
65364: PUSH
65365: LD_INT 4
65367: ARRAY
65368: PUSH
65369: LD_VAR 0 2
65373: EQUAL
65374: AND
65375: IFFALSE 65387
// result := true else
65377: LD_ADDR_VAR 0 3
65381: PUSH
65382: LD_INT 1
65384: ST_TO_ADDR
65385: GO 65395
// result := false ;
65387: LD_ADDR_VAR 0 3
65391: PUSH
65392: LD_INT 0
65394: ST_TO_ADDR
// end else
65395: GO 65405
// result := false ;
65397: LD_ADDR_VAR 0 3
65401: PUSH
65402: LD_INT 0
65404: ST_TO_ADDR
// end ;
65405: LD_VAR 0 3
65409: RET
// export function HealTarget ( sci ) ; begin
65410: LD_INT 0
65412: PPUSH
// if not sci then
65413: LD_VAR 0 1
65417: NOT
65418: IFFALSE 65422
// exit ;
65420: GO 65487
// result := 0 ;
65422: LD_ADDR_VAR 0 2
65426: PUSH
65427: LD_INT 0
65429: ST_TO_ADDR
// if GetTaskList ( sci ) then
65430: LD_VAR 0 1
65434: PPUSH
65435: CALL_OW 437
65439: IFFALSE 65487
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65441: LD_VAR 0 1
65445: PPUSH
65446: CALL_OW 437
65450: PUSH
65451: LD_INT 1
65453: ARRAY
65454: PUSH
65455: LD_INT 1
65457: ARRAY
65458: PUSH
65459: LD_STRING l
65461: EQUAL
65462: IFFALSE 65487
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65464: LD_ADDR_VAR 0 2
65468: PUSH
65469: LD_VAR 0 1
65473: PPUSH
65474: CALL_OW 437
65478: PUSH
65479: LD_INT 1
65481: ARRAY
65482: PUSH
65483: LD_INT 4
65485: ARRAY
65486: ST_TO_ADDR
// end ;
65487: LD_VAR 0 2
65491: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65492: LD_INT 0
65494: PPUSH
65495: PPUSH
65496: PPUSH
65497: PPUSH
// if not base_units then
65498: LD_VAR 0 1
65502: NOT
65503: IFFALSE 65507
// exit ;
65505: GO 65594
// result := false ;
65507: LD_ADDR_VAR 0 2
65511: PUSH
65512: LD_INT 0
65514: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65515: LD_ADDR_VAR 0 5
65519: PUSH
65520: LD_VAR 0 1
65524: PPUSH
65525: LD_INT 21
65527: PUSH
65528: LD_INT 3
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PPUSH
65535: CALL_OW 72
65539: ST_TO_ADDR
// if not tmp then
65540: LD_VAR 0 5
65544: NOT
65545: IFFALSE 65549
// exit ;
65547: GO 65594
// for i in tmp do
65549: LD_ADDR_VAR 0 3
65553: PUSH
65554: LD_VAR 0 5
65558: PUSH
65559: FOR_IN
65560: IFFALSE 65592
// begin result := EnemyInRange ( i , 22 ) ;
65562: LD_ADDR_VAR 0 2
65566: PUSH
65567: LD_VAR 0 3
65571: PPUSH
65572: LD_INT 22
65574: PPUSH
65575: CALL 63280 0 2
65579: ST_TO_ADDR
// if result then
65580: LD_VAR 0 2
65584: IFFALSE 65590
// exit ;
65586: POP
65587: POP
65588: GO 65594
// end ;
65590: GO 65559
65592: POP
65593: POP
// end ;
65594: LD_VAR 0 2
65598: RET
// export function FilterByTag ( units , tag ) ; begin
65599: LD_INT 0
65601: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65602: LD_ADDR_VAR 0 3
65606: PUSH
65607: LD_VAR 0 1
65611: PPUSH
65612: LD_INT 120
65614: PUSH
65615: LD_VAR 0 2
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PPUSH
65624: CALL_OW 72
65628: ST_TO_ADDR
// end ;
65629: LD_VAR 0 3
65633: RET
// export function IsDriver ( un ) ; begin
65634: LD_INT 0
65636: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65637: LD_ADDR_VAR 0 2
65641: PUSH
65642: LD_VAR 0 1
65646: PUSH
65647: LD_INT 55
65649: PUSH
65650: EMPTY
65651: LIST
65652: PPUSH
65653: CALL_OW 69
65657: IN
65658: ST_TO_ADDR
// end ;
65659: LD_VAR 0 2
65663: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65664: LD_INT 0
65666: PPUSH
65667: PPUSH
// list := [ ] ;
65668: LD_ADDR_VAR 0 5
65672: PUSH
65673: EMPTY
65674: ST_TO_ADDR
// case d of 0 :
65675: LD_VAR 0 3
65679: PUSH
65680: LD_INT 0
65682: DOUBLE
65683: EQUAL
65684: IFTRUE 65688
65686: GO 65821
65688: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65689: LD_ADDR_VAR 0 5
65693: PUSH
65694: LD_VAR 0 1
65698: PUSH
65699: LD_INT 4
65701: MINUS
65702: PUSH
65703: LD_VAR 0 2
65707: PUSH
65708: LD_INT 4
65710: MINUS
65711: PUSH
65712: LD_INT 2
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: LIST
65719: PUSH
65720: LD_VAR 0 1
65724: PUSH
65725: LD_INT 3
65727: MINUS
65728: PUSH
65729: LD_VAR 0 2
65733: PUSH
65734: LD_INT 1
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: LIST
65741: PUSH
65742: LD_VAR 0 1
65746: PUSH
65747: LD_INT 4
65749: PLUS
65750: PUSH
65751: LD_VAR 0 2
65755: PUSH
65756: LD_INT 4
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: LIST
65763: PUSH
65764: LD_VAR 0 1
65768: PUSH
65769: LD_INT 3
65771: PLUS
65772: PUSH
65773: LD_VAR 0 2
65777: PUSH
65778: LD_INT 3
65780: PLUS
65781: PUSH
65782: LD_INT 5
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: LIST
65789: PUSH
65790: LD_VAR 0 1
65794: PUSH
65795: LD_VAR 0 2
65799: PUSH
65800: LD_INT 4
65802: PLUS
65803: PUSH
65804: LD_INT 0
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: LIST
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: LIST
65816: LIST
65817: LIST
65818: ST_TO_ADDR
// end ; 1 :
65819: GO 66519
65821: LD_INT 1
65823: DOUBLE
65824: EQUAL
65825: IFTRUE 65829
65827: GO 65962
65829: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65830: LD_ADDR_VAR 0 5
65834: PUSH
65835: LD_VAR 0 1
65839: PUSH
65840: LD_VAR 0 2
65844: PUSH
65845: LD_INT 4
65847: MINUS
65848: PUSH
65849: LD_INT 3
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: LIST
65856: PUSH
65857: LD_VAR 0 1
65861: PUSH
65862: LD_INT 3
65864: MINUS
65865: PUSH
65866: LD_VAR 0 2
65870: PUSH
65871: LD_INT 3
65873: MINUS
65874: PUSH
65875: LD_INT 2
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: LIST
65882: PUSH
65883: LD_VAR 0 1
65887: PUSH
65888: LD_INT 4
65890: MINUS
65891: PUSH
65892: LD_VAR 0 2
65896: PUSH
65897: LD_INT 1
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: LIST
65904: PUSH
65905: LD_VAR 0 1
65909: PUSH
65910: LD_VAR 0 2
65914: PUSH
65915: LD_INT 3
65917: PLUS
65918: PUSH
65919: LD_INT 0
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: LIST
65926: PUSH
65927: LD_VAR 0 1
65931: PUSH
65932: LD_INT 4
65934: PLUS
65935: PUSH
65936: LD_VAR 0 2
65940: PUSH
65941: LD_INT 4
65943: PLUS
65944: PUSH
65945: LD_INT 5
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: LIST
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: LIST
65957: LIST
65958: LIST
65959: ST_TO_ADDR
// end ; 2 :
65960: GO 66519
65962: LD_INT 2
65964: DOUBLE
65965: EQUAL
65966: IFTRUE 65970
65968: GO 66099
65970: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65971: LD_ADDR_VAR 0 5
65975: PUSH
65976: LD_VAR 0 1
65980: PUSH
65981: LD_VAR 0 2
65985: PUSH
65986: LD_INT 3
65988: MINUS
65989: PUSH
65990: LD_INT 3
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: LIST
65997: PUSH
65998: LD_VAR 0 1
66002: PUSH
66003: LD_INT 4
66005: PLUS
66006: PUSH
66007: LD_VAR 0 2
66011: PUSH
66012: LD_INT 4
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: LIST
66019: PUSH
66020: LD_VAR 0 1
66024: PUSH
66025: LD_VAR 0 2
66029: PUSH
66030: LD_INT 4
66032: PLUS
66033: PUSH
66034: LD_INT 0
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: LIST
66041: PUSH
66042: LD_VAR 0 1
66046: PUSH
66047: LD_INT 3
66049: MINUS
66050: PUSH
66051: LD_VAR 0 2
66055: PUSH
66056: LD_INT 1
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: LIST
66063: PUSH
66064: LD_VAR 0 1
66068: PUSH
66069: LD_INT 4
66071: MINUS
66072: PUSH
66073: LD_VAR 0 2
66077: PUSH
66078: LD_INT 4
66080: MINUS
66081: PUSH
66082: LD_INT 2
66084: PUSH
66085: EMPTY
66086: LIST
66087: LIST
66088: LIST
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: ST_TO_ADDR
// end ; 3 :
66097: GO 66519
66099: LD_INT 3
66101: DOUBLE
66102: EQUAL
66103: IFTRUE 66107
66105: GO 66240
66107: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66108: LD_ADDR_VAR 0 5
66112: PUSH
66113: LD_VAR 0 1
66117: PUSH
66118: LD_INT 3
66120: PLUS
66121: PUSH
66122: LD_VAR 0 2
66126: PUSH
66127: LD_INT 4
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: LIST
66134: PUSH
66135: LD_VAR 0 1
66139: PUSH
66140: LD_INT 4
66142: PLUS
66143: PUSH
66144: LD_VAR 0 2
66148: PUSH
66149: LD_INT 4
66151: PLUS
66152: PUSH
66153: LD_INT 5
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: LIST
66160: PUSH
66161: LD_VAR 0 1
66165: PUSH
66166: LD_INT 4
66168: MINUS
66169: PUSH
66170: LD_VAR 0 2
66174: PUSH
66175: LD_INT 1
66177: PUSH
66178: EMPTY
66179: LIST
66180: LIST
66181: LIST
66182: PUSH
66183: LD_VAR 0 1
66187: PUSH
66188: LD_VAR 0 2
66192: PUSH
66193: LD_INT 4
66195: MINUS
66196: PUSH
66197: LD_INT 3
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: LIST
66204: PUSH
66205: LD_VAR 0 1
66209: PUSH
66210: LD_INT 3
66212: MINUS
66213: PUSH
66214: LD_VAR 0 2
66218: PUSH
66219: LD_INT 3
66221: MINUS
66222: PUSH
66223: LD_INT 2
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: LIST
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: LIST
66235: LIST
66236: LIST
66237: ST_TO_ADDR
// end ; 4 :
66238: GO 66519
66240: LD_INT 4
66242: DOUBLE
66243: EQUAL
66244: IFTRUE 66248
66246: GO 66381
66248: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66249: LD_ADDR_VAR 0 5
66253: PUSH
66254: LD_VAR 0 1
66258: PUSH
66259: LD_VAR 0 2
66263: PUSH
66264: LD_INT 4
66266: PLUS
66267: PUSH
66268: LD_INT 0
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: LIST
66275: PUSH
66276: LD_VAR 0 1
66280: PUSH
66281: LD_INT 3
66283: PLUS
66284: PUSH
66285: LD_VAR 0 2
66289: PUSH
66290: LD_INT 3
66292: PLUS
66293: PUSH
66294: LD_INT 5
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: LIST
66301: PUSH
66302: LD_VAR 0 1
66306: PUSH
66307: LD_INT 4
66309: PLUS
66310: PUSH
66311: LD_VAR 0 2
66315: PUSH
66316: LD_INT 4
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: LIST
66323: PUSH
66324: LD_VAR 0 1
66328: PUSH
66329: LD_VAR 0 2
66333: PUSH
66334: LD_INT 3
66336: MINUS
66337: PUSH
66338: LD_INT 3
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: LIST
66345: PUSH
66346: LD_VAR 0 1
66350: PUSH
66351: LD_INT 4
66353: MINUS
66354: PUSH
66355: LD_VAR 0 2
66359: PUSH
66360: LD_INT 4
66362: MINUS
66363: PUSH
66364: LD_INT 2
66366: PUSH
66367: EMPTY
66368: LIST
66369: LIST
66370: LIST
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: ST_TO_ADDR
// end ; 5 :
66379: GO 66519
66381: LD_INT 5
66383: DOUBLE
66384: EQUAL
66385: IFTRUE 66389
66387: GO 66518
66389: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66390: LD_ADDR_VAR 0 5
66394: PUSH
66395: LD_VAR 0 1
66399: PUSH
66400: LD_INT 4
66402: MINUS
66403: PUSH
66404: LD_VAR 0 2
66408: PUSH
66409: LD_INT 1
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: LIST
66416: PUSH
66417: LD_VAR 0 1
66421: PUSH
66422: LD_VAR 0 2
66426: PUSH
66427: LD_INT 4
66429: MINUS
66430: PUSH
66431: LD_INT 3
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: LIST
66438: PUSH
66439: LD_VAR 0 1
66443: PUSH
66444: LD_INT 4
66446: PLUS
66447: PUSH
66448: LD_VAR 0 2
66452: PUSH
66453: LD_INT 4
66455: PLUS
66456: PUSH
66457: LD_INT 5
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: LIST
66464: PUSH
66465: LD_VAR 0 1
66469: PUSH
66470: LD_INT 3
66472: PLUS
66473: PUSH
66474: LD_VAR 0 2
66478: PUSH
66479: LD_INT 4
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: LIST
66486: PUSH
66487: LD_VAR 0 1
66491: PUSH
66492: LD_VAR 0 2
66496: PUSH
66497: LD_INT 3
66499: PLUS
66500: PUSH
66501: LD_INT 0
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: LIST
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: LIST
66513: LIST
66514: LIST
66515: ST_TO_ADDR
// end ; end ;
66516: GO 66519
66518: POP
// result := list ;
66519: LD_ADDR_VAR 0 4
66523: PUSH
66524: LD_VAR 0 5
66528: ST_TO_ADDR
// end ;
66529: LD_VAR 0 4
66533: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66534: LD_INT 0
66536: PPUSH
66537: PPUSH
66538: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66539: LD_VAR 0 1
66543: NOT
66544: PUSH
66545: LD_VAR 0 2
66549: PUSH
66550: LD_INT 1
66552: PUSH
66553: LD_INT 2
66555: PUSH
66556: LD_INT 3
66558: PUSH
66559: LD_INT 4
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: LIST
66566: LIST
66567: IN
66568: NOT
66569: OR
66570: IFFALSE 66574
// exit ;
66572: GO 66666
// tmp := [ ] ;
66574: LD_ADDR_VAR 0 5
66578: PUSH
66579: EMPTY
66580: ST_TO_ADDR
// for i in units do
66581: LD_ADDR_VAR 0 4
66585: PUSH
66586: LD_VAR 0 1
66590: PUSH
66591: FOR_IN
66592: IFFALSE 66635
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
66594: LD_ADDR_VAR 0 5
66598: PUSH
66599: LD_VAR 0 5
66603: PPUSH
66604: LD_VAR 0 5
66608: PUSH
66609: LD_INT 1
66611: PLUS
66612: PPUSH
66613: LD_VAR 0 4
66617: PPUSH
66618: LD_VAR 0 2
66622: PPUSH
66623: CALL_OW 259
66627: PPUSH
66628: CALL_OW 2
66632: ST_TO_ADDR
66633: GO 66591
66635: POP
66636: POP
// if not tmp then
66637: LD_VAR 0 5
66641: NOT
66642: IFFALSE 66646
// exit ;
66644: GO 66666
// result := SortListByListDesc ( units , tmp ) ;
66646: LD_ADDR_VAR 0 3
66650: PUSH
66651: LD_VAR 0 1
66655: PPUSH
66656: LD_VAR 0 5
66660: PPUSH
66661: CALL_OW 77
66665: ST_TO_ADDR
// end ;
66666: LD_VAR 0 3
66670: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66671: LD_INT 0
66673: PPUSH
66674: PPUSH
66675: PPUSH
// result := false ;
66676: LD_ADDR_VAR 0 3
66680: PUSH
66681: LD_INT 0
66683: ST_TO_ADDR
// x := GetX ( building ) ;
66684: LD_ADDR_VAR 0 4
66688: PUSH
66689: LD_VAR 0 2
66693: PPUSH
66694: CALL_OW 250
66698: ST_TO_ADDR
// y := GetY ( building ) ;
66699: LD_ADDR_VAR 0 5
66703: PUSH
66704: LD_VAR 0 2
66708: PPUSH
66709: CALL_OW 251
66713: ST_TO_ADDR
// if not building or not x or not y then
66714: LD_VAR 0 2
66718: NOT
66719: PUSH
66720: LD_VAR 0 4
66724: NOT
66725: OR
66726: PUSH
66727: LD_VAR 0 5
66731: NOT
66732: OR
66733: IFFALSE 66737
// exit ;
66735: GO 66829
// if GetTaskList ( unit ) then
66737: LD_VAR 0 1
66741: PPUSH
66742: CALL_OW 437
66746: IFFALSE 66829
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66748: LD_STRING e
66750: PUSH
66751: LD_VAR 0 1
66755: PPUSH
66756: CALL_OW 437
66760: PUSH
66761: LD_INT 1
66763: ARRAY
66764: PUSH
66765: LD_INT 1
66767: ARRAY
66768: EQUAL
66769: PUSH
66770: LD_VAR 0 4
66774: PUSH
66775: LD_VAR 0 1
66779: PPUSH
66780: CALL_OW 437
66784: PUSH
66785: LD_INT 1
66787: ARRAY
66788: PUSH
66789: LD_INT 2
66791: ARRAY
66792: EQUAL
66793: AND
66794: PUSH
66795: LD_VAR 0 5
66799: PUSH
66800: LD_VAR 0 1
66804: PPUSH
66805: CALL_OW 437
66809: PUSH
66810: LD_INT 1
66812: ARRAY
66813: PUSH
66814: LD_INT 3
66816: ARRAY
66817: EQUAL
66818: AND
66819: IFFALSE 66829
// result := true end ;
66821: LD_ADDR_VAR 0 3
66825: PUSH
66826: LD_INT 1
66828: ST_TO_ADDR
// end ;
66829: LD_VAR 0 3
66833: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66834: LD_INT 0
66836: PPUSH
// result := false ;
66837: LD_ADDR_VAR 0 4
66841: PUSH
66842: LD_INT 0
66844: ST_TO_ADDR
// if GetTaskList ( unit ) then
66845: LD_VAR 0 1
66849: PPUSH
66850: CALL_OW 437
66854: IFFALSE 66937
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66856: LD_STRING M
66858: PUSH
66859: LD_VAR 0 1
66863: PPUSH
66864: CALL_OW 437
66868: PUSH
66869: LD_INT 1
66871: ARRAY
66872: PUSH
66873: LD_INT 1
66875: ARRAY
66876: EQUAL
66877: PUSH
66878: LD_VAR 0 2
66882: PUSH
66883: LD_VAR 0 1
66887: PPUSH
66888: CALL_OW 437
66892: PUSH
66893: LD_INT 1
66895: ARRAY
66896: PUSH
66897: LD_INT 2
66899: ARRAY
66900: EQUAL
66901: AND
66902: PUSH
66903: LD_VAR 0 3
66907: PUSH
66908: LD_VAR 0 1
66912: PPUSH
66913: CALL_OW 437
66917: PUSH
66918: LD_INT 1
66920: ARRAY
66921: PUSH
66922: LD_INT 3
66924: ARRAY
66925: EQUAL
66926: AND
66927: IFFALSE 66937
// result := true ;
66929: LD_ADDR_VAR 0 4
66933: PUSH
66934: LD_INT 1
66936: ST_TO_ADDR
// end ; end ;
66937: LD_VAR 0 4
66941: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66942: LD_INT 0
66944: PPUSH
66945: PPUSH
66946: PPUSH
66947: PPUSH
// if not unit or not area then
66948: LD_VAR 0 1
66952: NOT
66953: PUSH
66954: LD_VAR 0 2
66958: NOT
66959: OR
66960: IFFALSE 66964
// exit ;
66962: GO 67128
// tmp := AreaToList ( area , i ) ;
66964: LD_ADDR_VAR 0 6
66968: PUSH
66969: LD_VAR 0 2
66973: PPUSH
66974: LD_VAR 0 5
66978: PPUSH
66979: CALL_OW 517
66983: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66984: LD_ADDR_VAR 0 5
66988: PUSH
66989: DOUBLE
66990: LD_INT 1
66992: DEC
66993: ST_TO_ADDR
66994: LD_VAR 0 6
66998: PUSH
66999: LD_INT 1
67001: ARRAY
67002: PUSH
67003: FOR_TO
67004: IFFALSE 67126
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67006: LD_ADDR_VAR 0 7
67010: PUSH
67011: LD_VAR 0 6
67015: PUSH
67016: LD_INT 1
67018: ARRAY
67019: PUSH
67020: LD_VAR 0 5
67024: ARRAY
67025: PUSH
67026: LD_VAR 0 6
67030: PUSH
67031: LD_INT 2
67033: ARRAY
67034: PUSH
67035: LD_VAR 0 5
67039: ARRAY
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67045: LD_VAR 0 7
67049: PUSH
67050: LD_INT 1
67052: ARRAY
67053: PPUSH
67054: LD_VAR 0 7
67058: PUSH
67059: LD_INT 2
67061: ARRAY
67062: PPUSH
67063: CALL_OW 428
67067: PUSH
67068: LD_INT 0
67070: EQUAL
67071: IFFALSE 67124
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67073: LD_VAR 0 1
67077: PPUSH
67078: LD_VAR 0 7
67082: PUSH
67083: LD_INT 1
67085: ARRAY
67086: PPUSH
67087: LD_VAR 0 7
67091: PUSH
67092: LD_INT 2
67094: ARRAY
67095: PPUSH
67096: LD_VAR 0 3
67100: PPUSH
67101: CALL_OW 48
// result := IsPlaced ( unit ) ;
67105: LD_ADDR_VAR 0 4
67109: PUSH
67110: LD_VAR 0 1
67114: PPUSH
67115: CALL_OW 305
67119: ST_TO_ADDR
// exit ;
67120: POP
67121: POP
67122: GO 67128
// end ; end ;
67124: GO 67003
67126: POP
67127: POP
// end ;
67128: LD_VAR 0 4
67132: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67133: LD_INT 0
67135: PPUSH
67136: PPUSH
67137: PPUSH
// if not side or side > 8 then
67138: LD_VAR 0 1
67142: NOT
67143: PUSH
67144: LD_VAR 0 1
67148: PUSH
67149: LD_INT 8
67151: GREATER
67152: OR
67153: IFFALSE 67157
// exit ;
67155: GO 67344
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67157: LD_ADDR_VAR 0 4
67161: PUSH
67162: LD_INT 22
67164: PUSH
67165: LD_VAR 0 1
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: LD_INT 21
67176: PUSH
67177: LD_INT 3
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: PPUSH
67188: CALL_OW 69
67192: ST_TO_ADDR
// if not tmp then
67193: LD_VAR 0 4
67197: NOT
67198: IFFALSE 67202
// exit ;
67200: GO 67344
// enable_addtolog := true ;
67202: LD_ADDR_OWVAR 81
67206: PUSH
67207: LD_INT 1
67209: ST_TO_ADDR
// AddToLog ( [ ) ;
67210: LD_STRING [
67212: PPUSH
67213: CALL_OW 561
// for i in tmp do
67217: LD_ADDR_VAR 0 3
67221: PUSH
67222: LD_VAR 0 4
67226: PUSH
67227: FOR_IN
67228: IFFALSE 67335
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67230: LD_STRING [
67232: PUSH
67233: LD_VAR 0 3
67237: PPUSH
67238: CALL_OW 266
67242: STR
67243: PUSH
67244: LD_STRING , 
67246: STR
67247: PUSH
67248: LD_VAR 0 3
67252: PPUSH
67253: CALL_OW 250
67257: STR
67258: PUSH
67259: LD_STRING , 
67261: STR
67262: PUSH
67263: LD_VAR 0 3
67267: PPUSH
67268: CALL_OW 251
67272: STR
67273: PUSH
67274: LD_STRING , 
67276: STR
67277: PUSH
67278: LD_VAR 0 3
67282: PPUSH
67283: CALL_OW 254
67287: STR
67288: PUSH
67289: LD_STRING , 
67291: STR
67292: PUSH
67293: LD_VAR 0 3
67297: PPUSH
67298: LD_INT 1
67300: PPUSH
67301: CALL_OW 268
67305: STR
67306: PUSH
67307: LD_STRING , 
67309: STR
67310: PUSH
67311: LD_VAR 0 3
67315: PPUSH
67316: LD_INT 2
67318: PPUSH
67319: CALL_OW 268
67323: STR
67324: PUSH
67325: LD_STRING ],
67327: STR
67328: PPUSH
67329: CALL_OW 561
// end ;
67333: GO 67227
67335: POP
67336: POP
// AddToLog ( ]; ) ;
67337: LD_STRING ];
67339: PPUSH
67340: CALL_OW 561
// end ;
67344: LD_VAR 0 2
67348: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67349: LD_INT 0
67351: PPUSH
67352: PPUSH
67353: PPUSH
67354: PPUSH
67355: PPUSH
// if not area or not rate or not max then
67356: LD_VAR 0 1
67360: NOT
67361: PUSH
67362: LD_VAR 0 2
67366: NOT
67367: OR
67368: PUSH
67369: LD_VAR 0 4
67373: NOT
67374: OR
67375: IFFALSE 67379
// exit ;
67377: GO 67568
// while 1 do
67379: LD_INT 1
67381: IFFALSE 67568
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67383: LD_ADDR_VAR 0 9
67387: PUSH
67388: LD_VAR 0 1
67392: PPUSH
67393: LD_INT 1
67395: PPUSH
67396: CALL_OW 287
67400: PUSH
67401: LD_INT 10
67403: MUL
67404: ST_TO_ADDR
// r := rate / 10 ;
67405: LD_ADDR_VAR 0 7
67409: PUSH
67410: LD_VAR 0 2
67414: PUSH
67415: LD_INT 10
67417: DIVREAL
67418: ST_TO_ADDR
// time := 1 1$00 ;
67419: LD_ADDR_VAR 0 8
67423: PUSH
67424: LD_INT 2100
67426: ST_TO_ADDR
// if amount < min then
67427: LD_VAR 0 9
67431: PUSH
67432: LD_VAR 0 3
67436: LESS
67437: IFFALSE 67455
// r := r * 2 else
67439: LD_ADDR_VAR 0 7
67443: PUSH
67444: LD_VAR 0 7
67448: PUSH
67449: LD_INT 2
67451: MUL
67452: ST_TO_ADDR
67453: GO 67481
// if amount > max then
67455: LD_VAR 0 9
67459: PUSH
67460: LD_VAR 0 4
67464: GREATER
67465: IFFALSE 67481
// r := r / 2 ;
67467: LD_ADDR_VAR 0 7
67471: PUSH
67472: LD_VAR 0 7
67476: PUSH
67477: LD_INT 2
67479: DIVREAL
67480: ST_TO_ADDR
// time := time / r ;
67481: LD_ADDR_VAR 0 8
67485: PUSH
67486: LD_VAR 0 8
67490: PUSH
67491: LD_VAR 0 7
67495: DIVREAL
67496: ST_TO_ADDR
// if time < 0 then
67497: LD_VAR 0 8
67501: PUSH
67502: LD_INT 0
67504: LESS
67505: IFFALSE 67522
// time := time * - 1 ;
67507: LD_ADDR_VAR 0 8
67511: PUSH
67512: LD_VAR 0 8
67516: PUSH
67517: LD_INT 1
67519: NEG
67520: MUL
67521: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67522: LD_VAR 0 8
67526: PUSH
67527: LD_INT 35
67529: PPUSH
67530: LD_INT 875
67532: PPUSH
67533: CALL_OW 12
67537: PLUS
67538: PPUSH
67539: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67543: LD_INT 1
67545: PPUSH
67546: LD_INT 5
67548: PPUSH
67549: CALL_OW 12
67553: PPUSH
67554: LD_VAR 0 1
67558: PPUSH
67559: LD_INT 1
67561: PPUSH
67562: CALL_OW 55
// end ;
67566: GO 67379
// end ;
67568: LD_VAR 0 5
67572: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67573: LD_INT 0
67575: PPUSH
67576: PPUSH
67577: PPUSH
67578: PPUSH
67579: PPUSH
67580: PPUSH
67581: PPUSH
67582: PPUSH
// if not turrets or not factories then
67583: LD_VAR 0 1
67587: NOT
67588: PUSH
67589: LD_VAR 0 2
67593: NOT
67594: OR
67595: IFFALSE 67599
// exit ;
67597: GO 67906
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67599: LD_ADDR_VAR 0 10
67603: PUSH
67604: LD_INT 5
67606: PUSH
67607: LD_INT 6
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: LD_INT 2
67616: PUSH
67617: LD_INT 4
67619: PUSH
67620: EMPTY
67621: LIST
67622: LIST
67623: PUSH
67624: LD_INT 3
67626: PUSH
67627: LD_INT 5
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: LIST
67638: PUSH
67639: LD_INT 24
67641: PUSH
67642: LD_INT 25
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: PUSH
67649: LD_INT 23
67651: PUSH
67652: LD_INT 27
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: PUSH
67659: EMPTY
67660: LIST
67661: LIST
67662: PUSH
67663: LD_INT 42
67665: PUSH
67666: LD_INT 43
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: PUSH
67673: LD_INT 44
67675: PUSH
67676: LD_INT 46
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: PUSH
67683: LD_INT 45
67685: PUSH
67686: LD_INT 47
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: LIST
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: LIST
67702: ST_TO_ADDR
// result := [ ] ;
67703: LD_ADDR_VAR 0 3
67707: PUSH
67708: EMPTY
67709: ST_TO_ADDR
// for i in turrets do
67710: LD_ADDR_VAR 0 4
67714: PUSH
67715: LD_VAR 0 1
67719: PUSH
67720: FOR_IN
67721: IFFALSE 67904
// begin nat := GetNation ( i ) ;
67723: LD_ADDR_VAR 0 7
67727: PUSH
67728: LD_VAR 0 4
67732: PPUSH
67733: CALL_OW 248
67737: ST_TO_ADDR
// weapon := 0 ;
67738: LD_ADDR_VAR 0 8
67742: PUSH
67743: LD_INT 0
67745: ST_TO_ADDR
// if not nat then
67746: LD_VAR 0 7
67750: NOT
67751: IFFALSE 67755
// continue ;
67753: GO 67720
// for j in list [ nat ] do
67755: LD_ADDR_VAR 0 5
67759: PUSH
67760: LD_VAR 0 10
67764: PUSH
67765: LD_VAR 0 7
67769: ARRAY
67770: PUSH
67771: FOR_IN
67772: IFFALSE 67813
// if GetBWeapon ( i ) = j [ 1 ] then
67774: LD_VAR 0 4
67778: PPUSH
67779: CALL_OW 269
67783: PUSH
67784: LD_VAR 0 5
67788: PUSH
67789: LD_INT 1
67791: ARRAY
67792: EQUAL
67793: IFFALSE 67811
// begin weapon := j [ 2 ] ;
67795: LD_ADDR_VAR 0 8
67799: PUSH
67800: LD_VAR 0 5
67804: PUSH
67805: LD_INT 2
67807: ARRAY
67808: ST_TO_ADDR
// break ;
67809: GO 67813
// end ;
67811: GO 67771
67813: POP
67814: POP
// if not weapon then
67815: LD_VAR 0 8
67819: NOT
67820: IFFALSE 67824
// continue ;
67822: GO 67720
// for k in factories do
67824: LD_ADDR_VAR 0 6
67828: PUSH
67829: LD_VAR 0 2
67833: PUSH
67834: FOR_IN
67835: IFFALSE 67900
// begin weapons := AvailableWeaponList ( k ) ;
67837: LD_ADDR_VAR 0 9
67841: PUSH
67842: LD_VAR 0 6
67846: PPUSH
67847: CALL_OW 478
67851: ST_TO_ADDR
// if not weapons then
67852: LD_VAR 0 9
67856: NOT
67857: IFFALSE 67861
// continue ;
67859: GO 67834
// if weapon in weapons then
67861: LD_VAR 0 8
67865: PUSH
67866: LD_VAR 0 9
67870: IN
67871: IFFALSE 67898
// begin result := [ i , weapon ] ;
67873: LD_ADDR_VAR 0 3
67877: PUSH
67878: LD_VAR 0 4
67882: PUSH
67883: LD_VAR 0 8
67887: PUSH
67888: EMPTY
67889: LIST
67890: LIST
67891: ST_TO_ADDR
// exit ;
67892: POP
67893: POP
67894: POP
67895: POP
67896: GO 67906
// end ; end ;
67898: GO 67834
67900: POP
67901: POP
// end ;
67902: GO 67720
67904: POP
67905: POP
// end ;
67906: LD_VAR 0 3
67910: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67911: LD_INT 0
67913: PPUSH
// if not side or side > 8 then
67914: LD_VAR 0 3
67918: NOT
67919: PUSH
67920: LD_VAR 0 3
67924: PUSH
67925: LD_INT 8
67927: GREATER
67928: OR
67929: IFFALSE 67933
// exit ;
67931: GO 67992
// if not range then
67933: LD_VAR 0 4
67937: NOT
67938: IFFALSE 67949
// range := - 12 ;
67940: LD_ADDR_VAR 0 4
67944: PUSH
67945: LD_INT 12
67947: NEG
67948: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67949: LD_VAR 0 1
67953: PPUSH
67954: LD_VAR 0 2
67958: PPUSH
67959: LD_VAR 0 3
67963: PPUSH
67964: LD_VAR 0 4
67968: PPUSH
67969: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67973: LD_VAR 0 1
67977: PPUSH
67978: LD_VAR 0 2
67982: PPUSH
67983: LD_VAR 0 3
67987: PPUSH
67988: CALL_OW 331
// end ;
67992: LD_VAR 0 5
67996: RET
// export function Video ( mode ) ; begin
67997: LD_INT 0
67999: PPUSH
// ingame_video = mode ;
68000: LD_ADDR_OWVAR 52
68004: PUSH
68005: LD_VAR 0 1
68009: ST_TO_ADDR
// interface_hidden = mode ;
68010: LD_ADDR_OWVAR 54
68014: PUSH
68015: LD_VAR 0 1
68019: ST_TO_ADDR
// end ;
68020: LD_VAR 0 2
68024: RET
// export function Join ( array , element ) ; begin
68025: LD_INT 0
68027: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68028: LD_ADDR_VAR 0 3
68032: PUSH
68033: LD_VAR 0 1
68037: PPUSH
68038: LD_VAR 0 1
68042: PUSH
68043: LD_INT 1
68045: PLUS
68046: PPUSH
68047: LD_VAR 0 2
68051: PPUSH
68052: CALL_OW 1
68056: ST_TO_ADDR
// end ;
68057: LD_VAR 0 3
68061: RET
// export function JoinUnion ( array , element ) ; begin
68062: LD_INT 0
68064: PPUSH
// result := array union element ;
68065: LD_ADDR_VAR 0 3
68069: PUSH
68070: LD_VAR 0 1
68074: PUSH
68075: LD_VAR 0 2
68079: UNION
68080: ST_TO_ADDR
// end ;
68081: LD_VAR 0 3
68085: RET
// export function GetBehemoths ( side ) ; begin
68086: LD_INT 0
68088: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68089: LD_ADDR_VAR 0 2
68093: PUSH
68094: LD_INT 22
68096: PUSH
68097: LD_VAR 0 1
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: LD_INT 31
68108: PUSH
68109: LD_INT 25
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: PPUSH
68120: CALL_OW 69
68124: ST_TO_ADDR
// end ;
68125: LD_VAR 0 2
68129: RET
// export function Shuffle ( array ) ; var i , index ; begin
68130: LD_INT 0
68132: PPUSH
68133: PPUSH
68134: PPUSH
// result := [ ] ;
68135: LD_ADDR_VAR 0 2
68139: PUSH
68140: EMPTY
68141: ST_TO_ADDR
// if not array then
68142: LD_VAR 0 1
68146: NOT
68147: IFFALSE 68151
// exit ;
68149: GO 68250
// Randomize ;
68151: CALL_OW 10
// for i = array downto 1 do
68155: LD_ADDR_VAR 0 3
68159: PUSH
68160: DOUBLE
68161: LD_VAR 0 1
68165: INC
68166: ST_TO_ADDR
68167: LD_INT 1
68169: PUSH
68170: FOR_DOWNTO
68171: IFFALSE 68248
// begin index := rand ( 1 , array ) ;
68173: LD_ADDR_VAR 0 4
68177: PUSH
68178: LD_INT 1
68180: PPUSH
68181: LD_VAR 0 1
68185: PPUSH
68186: CALL_OW 12
68190: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68191: LD_ADDR_VAR 0 2
68195: PUSH
68196: LD_VAR 0 2
68200: PPUSH
68201: LD_VAR 0 2
68205: PUSH
68206: LD_INT 1
68208: PLUS
68209: PPUSH
68210: LD_VAR 0 1
68214: PUSH
68215: LD_VAR 0 4
68219: ARRAY
68220: PPUSH
68221: CALL_OW 2
68225: ST_TO_ADDR
// array := Delete ( array , index ) ;
68226: LD_ADDR_VAR 0 1
68230: PUSH
68231: LD_VAR 0 1
68235: PPUSH
68236: LD_VAR 0 4
68240: PPUSH
68241: CALL_OW 3
68245: ST_TO_ADDR
// end ;
68246: GO 68170
68248: POP
68249: POP
// end ;
68250: LD_VAR 0 2
68254: RET
// export function GetBaseMaterials ( base ) ; begin
68255: LD_INT 0
68257: PPUSH
// result := [ 0 , 0 , 0 ] ;
68258: LD_ADDR_VAR 0 2
68262: PUSH
68263: LD_INT 0
68265: PUSH
68266: LD_INT 0
68268: PUSH
68269: LD_INT 0
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: LIST
68276: ST_TO_ADDR
// if not base then
68277: LD_VAR 0 1
68281: NOT
68282: IFFALSE 68286
// exit ;
68284: GO 68335
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68286: LD_ADDR_VAR 0 2
68290: PUSH
68291: LD_VAR 0 1
68295: PPUSH
68296: LD_INT 1
68298: PPUSH
68299: CALL_OW 275
68303: PUSH
68304: LD_VAR 0 1
68308: PPUSH
68309: LD_INT 2
68311: PPUSH
68312: CALL_OW 275
68316: PUSH
68317: LD_VAR 0 1
68321: PPUSH
68322: LD_INT 3
68324: PPUSH
68325: CALL_OW 275
68329: PUSH
68330: EMPTY
68331: LIST
68332: LIST
68333: LIST
68334: ST_TO_ADDR
// end ;
68335: LD_VAR 0 2
68339: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68340: LD_INT 0
68342: PPUSH
68343: PPUSH
// result := array ;
68344: LD_ADDR_VAR 0 3
68348: PUSH
68349: LD_VAR 0 1
68353: ST_TO_ADDR
// if size >= result then
68354: LD_VAR 0 2
68358: PUSH
68359: LD_VAR 0 3
68363: GREATEREQUAL
68364: IFFALSE 68368
// exit ;
68366: GO 68418
// if size then
68368: LD_VAR 0 2
68372: IFFALSE 68418
// for i := array downto size do
68374: LD_ADDR_VAR 0 4
68378: PUSH
68379: DOUBLE
68380: LD_VAR 0 1
68384: INC
68385: ST_TO_ADDR
68386: LD_VAR 0 2
68390: PUSH
68391: FOR_DOWNTO
68392: IFFALSE 68416
// result := Delete ( result , result ) ;
68394: LD_ADDR_VAR 0 3
68398: PUSH
68399: LD_VAR 0 3
68403: PPUSH
68404: LD_VAR 0 3
68408: PPUSH
68409: CALL_OW 3
68413: ST_TO_ADDR
68414: GO 68391
68416: POP
68417: POP
// end ;
68418: LD_VAR 0 3
68422: RET
// export function ComExit ( unit ) ; var tmp ; begin
68423: LD_INT 0
68425: PPUSH
68426: PPUSH
// if not IsInUnit ( unit ) then
68427: LD_VAR 0 1
68431: PPUSH
68432: CALL_OW 310
68436: NOT
68437: IFFALSE 68441
// exit ;
68439: GO 68501
// tmp := IsInUnit ( unit ) ;
68441: LD_ADDR_VAR 0 3
68445: PUSH
68446: LD_VAR 0 1
68450: PPUSH
68451: CALL_OW 310
68455: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68456: LD_VAR 0 3
68460: PPUSH
68461: CALL_OW 247
68465: PUSH
68466: LD_INT 2
68468: EQUAL
68469: IFFALSE 68482
// ComExitVehicle ( unit ) else
68471: LD_VAR 0 1
68475: PPUSH
68476: CALL_OW 121
68480: GO 68491
// ComExitBuilding ( unit ) ;
68482: LD_VAR 0 1
68486: PPUSH
68487: CALL_OW 122
// result := tmp ;
68491: LD_ADDR_VAR 0 2
68495: PUSH
68496: LD_VAR 0 3
68500: ST_TO_ADDR
// end ;
68501: LD_VAR 0 2
68505: RET
// export function ComExitAll ( units ) ; var i ; begin
68506: LD_INT 0
68508: PPUSH
68509: PPUSH
// if not units then
68510: LD_VAR 0 1
68514: NOT
68515: IFFALSE 68519
// exit ;
68517: GO 68545
// for i in units do
68519: LD_ADDR_VAR 0 3
68523: PUSH
68524: LD_VAR 0 1
68528: PUSH
68529: FOR_IN
68530: IFFALSE 68543
// ComExit ( i ) ;
68532: LD_VAR 0 3
68536: PPUSH
68537: CALL 68423 0 1
68541: GO 68529
68543: POP
68544: POP
// end ;
68545: LD_VAR 0 2
68549: RET
// export function ResetHc ; begin
68550: LD_INT 0
68552: PPUSH
// InitHc ;
68553: CALL_OW 19
// hc_importance := 0 ;
68557: LD_ADDR_OWVAR 32
68561: PUSH
68562: LD_INT 0
68564: ST_TO_ADDR
// end ;
68565: LD_VAR 0 1
68569: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68570: LD_INT 0
68572: PPUSH
68573: PPUSH
68574: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68575: LD_ADDR_VAR 0 6
68579: PUSH
68580: LD_VAR 0 1
68584: PUSH
68585: LD_VAR 0 3
68589: PLUS
68590: PUSH
68591: LD_INT 2
68593: DIV
68594: ST_TO_ADDR
// if _x < 0 then
68595: LD_VAR 0 6
68599: PUSH
68600: LD_INT 0
68602: LESS
68603: IFFALSE 68620
// _x := _x * - 1 ;
68605: LD_ADDR_VAR 0 6
68609: PUSH
68610: LD_VAR 0 6
68614: PUSH
68615: LD_INT 1
68617: NEG
68618: MUL
68619: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68620: LD_ADDR_VAR 0 7
68624: PUSH
68625: LD_VAR 0 2
68629: PUSH
68630: LD_VAR 0 4
68634: PLUS
68635: PUSH
68636: LD_INT 2
68638: DIV
68639: ST_TO_ADDR
// if _y < 0 then
68640: LD_VAR 0 7
68644: PUSH
68645: LD_INT 0
68647: LESS
68648: IFFALSE 68665
// _y := _y * - 1 ;
68650: LD_ADDR_VAR 0 7
68654: PUSH
68655: LD_VAR 0 7
68659: PUSH
68660: LD_INT 1
68662: NEG
68663: MUL
68664: ST_TO_ADDR
// result := [ _x , _y ] ;
68665: LD_ADDR_VAR 0 5
68669: PUSH
68670: LD_VAR 0 6
68674: PUSH
68675: LD_VAR 0 7
68679: PUSH
68680: EMPTY
68681: LIST
68682: LIST
68683: ST_TO_ADDR
// end ;
68684: LD_VAR 0 5
68688: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68689: LD_INT 0
68691: PPUSH
68692: PPUSH
68693: PPUSH
68694: PPUSH
// task := GetTaskList ( unit ) ;
68695: LD_ADDR_VAR 0 7
68699: PUSH
68700: LD_VAR 0 1
68704: PPUSH
68705: CALL_OW 437
68709: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68710: LD_VAR 0 7
68714: NOT
68715: PUSH
68716: LD_VAR 0 1
68720: PPUSH
68721: LD_VAR 0 2
68725: PPUSH
68726: CALL_OW 308
68730: NOT
68731: AND
68732: IFFALSE 68736
// exit ;
68734: GO 68854
// if IsInArea ( unit , area ) then
68736: LD_VAR 0 1
68740: PPUSH
68741: LD_VAR 0 2
68745: PPUSH
68746: CALL_OW 308
68750: IFFALSE 68768
// begin ComMoveToArea ( unit , goAway ) ;
68752: LD_VAR 0 1
68756: PPUSH
68757: LD_VAR 0 3
68761: PPUSH
68762: CALL_OW 113
// exit ;
68766: GO 68854
// end ; if task [ 1 ] [ 1 ] <> M then
68768: LD_VAR 0 7
68772: PUSH
68773: LD_INT 1
68775: ARRAY
68776: PUSH
68777: LD_INT 1
68779: ARRAY
68780: PUSH
68781: LD_STRING M
68783: NONEQUAL
68784: IFFALSE 68788
// exit ;
68786: GO 68854
// x := task [ 1 ] [ 2 ] ;
68788: LD_ADDR_VAR 0 5
68792: PUSH
68793: LD_VAR 0 7
68797: PUSH
68798: LD_INT 1
68800: ARRAY
68801: PUSH
68802: LD_INT 2
68804: ARRAY
68805: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68806: LD_ADDR_VAR 0 6
68810: PUSH
68811: LD_VAR 0 7
68815: PUSH
68816: LD_INT 1
68818: ARRAY
68819: PUSH
68820: LD_INT 3
68822: ARRAY
68823: ST_TO_ADDR
// if InArea ( x , y , area ) then
68824: LD_VAR 0 5
68828: PPUSH
68829: LD_VAR 0 6
68833: PPUSH
68834: LD_VAR 0 2
68838: PPUSH
68839: CALL_OW 309
68843: IFFALSE 68854
// ComStop ( unit ) ;
68845: LD_VAR 0 1
68849: PPUSH
68850: CALL_OW 141
// end ;
68854: LD_VAR 0 4
68858: RET
// export function Abs ( value ) ; begin
68859: LD_INT 0
68861: PPUSH
// result := value ;
68862: LD_ADDR_VAR 0 2
68866: PUSH
68867: LD_VAR 0 1
68871: ST_TO_ADDR
// if value < 0 then
68872: LD_VAR 0 1
68876: PUSH
68877: LD_INT 0
68879: LESS
68880: IFFALSE 68897
// result := value * - 1 ;
68882: LD_ADDR_VAR 0 2
68886: PUSH
68887: LD_VAR 0 1
68891: PUSH
68892: LD_INT 1
68894: NEG
68895: MUL
68896: ST_TO_ADDR
// end ;
68897: LD_VAR 0 2
68901: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68902: LD_INT 0
68904: PPUSH
68905: PPUSH
68906: PPUSH
68907: PPUSH
68908: PPUSH
68909: PPUSH
68910: PPUSH
68911: PPUSH
// if not unit or not building then
68912: LD_VAR 0 1
68916: NOT
68917: PUSH
68918: LD_VAR 0 2
68922: NOT
68923: OR
68924: IFFALSE 68928
// exit ;
68926: GO 69154
// x := GetX ( building ) ;
68928: LD_ADDR_VAR 0 4
68932: PUSH
68933: LD_VAR 0 2
68937: PPUSH
68938: CALL_OW 250
68942: ST_TO_ADDR
// y := GetY ( building ) ;
68943: LD_ADDR_VAR 0 6
68947: PUSH
68948: LD_VAR 0 2
68952: PPUSH
68953: CALL_OW 251
68957: ST_TO_ADDR
// d := GetDir ( building ) ;
68958: LD_ADDR_VAR 0 8
68962: PUSH
68963: LD_VAR 0 2
68967: PPUSH
68968: CALL_OW 254
68972: ST_TO_ADDR
// r := 4 ;
68973: LD_ADDR_VAR 0 9
68977: PUSH
68978: LD_INT 4
68980: ST_TO_ADDR
// for i := 1 to 5 do
68981: LD_ADDR_VAR 0 10
68985: PUSH
68986: DOUBLE
68987: LD_INT 1
68989: DEC
68990: ST_TO_ADDR
68991: LD_INT 5
68993: PUSH
68994: FOR_TO
68995: IFFALSE 69152
// begin _x := ShiftX ( x , d , r + i ) ;
68997: LD_ADDR_VAR 0 5
69001: PUSH
69002: LD_VAR 0 4
69006: PPUSH
69007: LD_VAR 0 8
69011: PPUSH
69012: LD_VAR 0 9
69016: PUSH
69017: LD_VAR 0 10
69021: PLUS
69022: PPUSH
69023: CALL_OW 272
69027: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69028: LD_ADDR_VAR 0 7
69032: PUSH
69033: LD_VAR 0 6
69037: PPUSH
69038: LD_VAR 0 8
69042: PPUSH
69043: LD_VAR 0 9
69047: PUSH
69048: LD_VAR 0 10
69052: PLUS
69053: PPUSH
69054: CALL_OW 273
69058: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69059: LD_VAR 0 5
69063: PPUSH
69064: LD_VAR 0 7
69068: PPUSH
69069: CALL_OW 488
69073: PUSH
69074: LD_VAR 0 5
69078: PPUSH
69079: LD_VAR 0 7
69083: PPUSH
69084: CALL_OW 428
69088: PPUSH
69089: CALL_OW 247
69093: PUSH
69094: LD_INT 3
69096: PUSH
69097: LD_INT 2
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: IN
69104: NOT
69105: AND
69106: IFFALSE 69150
// begin ComMoveXY ( unit , _x , _y ) ;
69108: LD_VAR 0 1
69112: PPUSH
69113: LD_VAR 0 5
69117: PPUSH
69118: LD_VAR 0 7
69122: PPUSH
69123: CALL_OW 111
// result := [ _x , _y ] ;
69127: LD_ADDR_VAR 0 3
69131: PUSH
69132: LD_VAR 0 5
69136: PUSH
69137: LD_VAR 0 7
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: ST_TO_ADDR
// exit ;
69146: POP
69147: POP
69148: GO 69154
// end ; end ;
69150: GO 68994
69152: POP
69153: POP
// end ;
69154: LD_VAR 0 3
69158: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69159: LD_INT 0
69161: PPUSH
69162: PPUSH
69163: PPUSH
// result := 0 ;
69164: LD_ADDR_VAR 0 3
69168: PUSH
69169: LD_INT 0
69171: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69172: LD_VAR 0 1
69176: PUSH
69177: LD_INT 0
69179: LESS
69180: PUSH
69181: LD_VAR 0 1
69185: PUSH
69186: LD_INT 8
69188: GREATER
69189: OR
69190: PUSH
69191: LD_VAR 0 2
69195: PUSH
69196: LD_INT 0
69198: LESS
69199: OR
69200: PUSH
69201: LD_VAR 0 2
69205: PUSH
69206: LD_INT 8
69208: GREATER
69209: OR
69210: IFFALSE 69214
// exit ;
69212: GO 69289
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69214: LD_ADDR_VAR 0 4
69218: PUSH
69219: LD_INT 22
69221: PUSH
69222: LD_VAR 0 2
69226: PUSH
69227: EMPTY
69228: LIST
69229: LIST
69230: PPUSH
69231: CALL_OW 69
69235: PUSH
69236: FOR_IN
69237: IFFALSE 69287
// begin un := UnitShoot ( i ) ;
69239: LD_ADDR_VAR 0 5
69243: PUSH
69244: LD_VAR 0 4
69248: PPUSH
69249: CALL_OW 504
69253: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69254: LD_VAR 0 5
69258: PPUSH
69259: CALL_OW 255
69263: PUSH
69264: LD_VAR 0 1
69268: EQUAL
69269: IFFALSE 69285
// begin result := un ;
69271: LD_ADDR_VAR 0 3
69275: PUSH
69276: LD_VAR 0 5
69280: ST_TO_ADDR
// exit ;
69281: POP
69282: POP
69283: GO 69289
// end ; end ;
69285: GO 69236
69287: POP
69288: POP
// end ;
69289: LD_VAR 0 3
69293: RET
// export function GetCargoBay ( units ) ; begin
69294: LD_INT 0
69296: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69297: LD_ADDR_VAR 0 2
69301: PUSH
69302: LD_VAR 0 1
69306: PPUSH
69307: LD_INT 2
69309: PUSH
69310: LD_INT 34
69312: PUSH
69313: LD_INT 12
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: PUSH
69320: LD_INT 34
69322: PUSH
69323: LD_INT 51
69325: PUSH
69326: EMPTY
69327: LIST
69328: LIST
69329: PUSH
69330: LD_INT 34
69332: PUSH
69333: LD_INT 32
69335: PUSH
69336: EMPTY
69337: LIST
69338: LIST
69339: PUSH
69340: LD_INT 34
69342: PUSH
69343: LD_INT 89
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: PUSH
69350: EMPTY
69351: LIST
69352: LIST
69353: LIST
69354: LIST
69355: LIST
69356: PPUSH
69357: CALL_OW 72
69361: ST_TO_ADDR
// end ;
69362: LD_VAR 0 2
69366: RET
// export function Negate ( value ) ; begin
69367: LD_INT 0
69369: PPUSH
// result := not value ;
69370: LD_ADDR_VAR 0 2
69374: PUSH
69375: LD_VAR 0 1
69379: NOT
69380: ST_TO_ADDR
// end ;
69381: LD_VAR 0 2
69385: RET
// export function Inc ( value ) ; begin
69386: LD_INT 0
69388: PPUSH
// result := value + 1 ;
69389: LD_ADDR_VAR 0 2
69393: PUSH
69394: LD_VAR 0 1
69398: PUSH
69399: LD_INT 1
69401: PLUS
69402: ST_TO_ADDR
// end ;
69403: LD_VAR 0 2
69407: RET
// export function Dec ( value ) ; begin
69408: LD_INT 0
69410: PPUSH
// result := value - 1 ;
69411: LD_ADDR_VAR 0 2
69415: PUSH
69416: LD_VAR 0 1
69420: PUSH
69421: LD_INT 1
69423: MINUS
69424: ST_TO_ADDR
// end ;
69425: LD_VAR 0 2
69429: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69430: LD_INT 0
69432: PPUSH
69433: PPUSH
69434: PPUSH
69435: PPUSH
69436: PPUSH
69437: PPUSH
69438: PPUSH
69439: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69440: LD_VAR 0 1
69444: PPUSH
69445: LD_VAR 0 2
69449: PPUSH
69450: CALL_OW 488
69454: NOT
69455: PUSH
69456: LD_VAR 0 3
69460: PPUSH
69461: LD_VAR 0 4
69465: PPUSH
69466: CALL_OW 488
69470: NOT
69471: OR
69472: IFFALSE 69485
// begin result := - 1 ;
69474: LD_ADDR_VAR 0 5
69478: PUSH
69479: LD_INT 1
69481: NEG
69482: ST_TO_ADDR
// exit ;
69483: GO 69720
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69485: LD_ADDR_VAR 0 12
69489: PUSH
69490: LD_VAR 0 1
69494: PPUSH
69495: LD_VAR 0 2
69499: PPUSH
69500: LD_VAR 0 3
69504: PPUSH
69505: LD_VAR 0 4
69509: PPUSH
69510: CALL 68570 0 4
69514: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69515: LD_ADDR_VAR 0 11
69519: PUSH
69520: LD_VAR 0 1
69524: PPUSH
69525: LD_VAR 0 2
69529: PPUSH
69530: LD_VAR 0 12
69534: PUSH
69535: LD_INT 1
69537: ARRAY
69538: PPUSH
69539: LD_VAR 0 12
69543: PUSH
69544: LD_INT 2
69546: ARRAY
69547: PPUSH
69548: CALL_OW 298
69552: ST_TO_ADDR
// distance := 9999 ;
69553: LD_ADDR_VAR 0 10
69557: PUSH
69558: LD_INT 9999
69560: ST_TO_ADDR
// for i := 0 to 5 do
69561: LD_ADDR_VAR 0 6
69565: PUSH
69566: DOUBLE
69567: LD_INT 0
69569: DEC
69570: ST_TO_ADDR
69571: LD_INT 5
69573: PUSH
69574: FOR_TO
69575: IFFALSE 69718
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69577: LD_ADDR_VAR 0 7
69581: PUSH
69582: LD_VAR 0 1
69586: PPUSH
69587: LD_VAR 0 6
69591: PPUSH
69592: LD_VAR 0 11
69596: PPUSH
69597: CALL_OW 272
69601: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69602: LD_ADDR_VAR 0 8
69606: PUSH
69607: LD_VAR 0 2
69611: PPUSH
69612: LD_VAR 0 6
69616: PPUSH
69617: LD_VAR 0 11
69621: PPUSH
69622: CALL_OW 273
69626: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69627: LD_VAR 0 7
69631: PPUSH
69632: LD_VAR 0 8
69636: PPUSH
69637: CALL_OW 488
69641: NOT
69642: IFFALSE 69646
// continue ;
69644: GO 69574
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69646: LD_ADDR_VAR 0 9
69650: PUSH
69651: LD_VAR 0 12
69655: PUSH
69656: LD_INT 1
69658: ARRAY
69659: PPUSH
69660: LD_VAR 0 12
69664: PUSH
69665: LD_INT 2
69667: ARRAY
69668: PPUSH
69669: LD_VAR 0 7
69673: PPUSH
69674: LD_VAR 0 8
69678: PPUSH
69679: CALL_OW 298
69683: ST_TO_ADDR
// if tmp < distance then
69684: LD_VAR 0 9
69688: PUSH
69689: LD_VAR 0 10
69693: LESS
69694: IFFALSE 69716
// begin result := i ;
69696: LD_ADDR_VAR 0 5
69700: PUSH
69701: LD_VAR 0 6
69705: ST_TO_ADDR
// distance := tmp ;
69706: LD_ADDR_VAR 0 10
69710: PUSH
69711: LD_VAR 0 9
69715: ST_TO_ADDR
// end ; end ;
69716: GO 69574
69718: POP
69719: POP
// end ;
69720: LD_VAR 0 5
69724: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69725: LD_INT 0
69727: PPUSH
69728: PPUSH
// if not driver or not IsInUnit ( driver ) then
69729: LD_VAR 0 1
69733: NOT
69734: PUSH
69735: LD_VAR 0 1
69739: PPUSH
69740: CALL_OW 310
69744: NOT
69745: OR
69746: IFFALSE 69750
// exit ;
69748: GO 69840
// vehicle := IsInUnit ( driver ) ;
69750: LD_ADDR_VAR 0 3
69754: PUSH
69755: LD_VAR 0 1
69759: PPUSH
69760: CALL_OW 310
69764: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69765: LD_VAR 0 1
69769: PPUSH
69770: LD_STRING \
69772: PUSH
69773: LD_INT 0
69775: PUSH
69776: LD_INT 0
69778: PUSH
69779: LD_INT 0
69781: PUSH
69782: LD_INT 0
69784: PUSH
69785: LD_INT 0
69787: PUSH
69788: LD_INT 0
69790: PUSH
69791: EMPTY
69792: LIST
69793: LIST
69794: LIST
69795: LIST
69796: LIST
69797: LIST
69798: LIST
69799: PUSH
69800: LD_STRING E
69802: PUSH
69803: LD_INT 0
69805: PUSH
69806: LD_INT 0
69808: PUSH
69809: LD_VAR 0 3
69813: PUSH
69814: LD_INT 0
69816: PUSH
69817: LD_INT 0
69819: PUSH
69820: LD_INT 0
69822: PUSH
69823: EMPTY
69824: LIST
69825: LIST
69826: LIST
69827: LIST
69828: LIST
69829: LIST
69830: LIST
69831: PUSH
69832: EMPTY
69833: LIST
69834: LIST
69835: PPUSH
69836: CALL_OW 446
// end ;
69840: LD_VAR 0 2
69844: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69845: LD_INT 0
69847: PPUSH
69848: PPUSH
// if not driver or not IsInUnit ( driver ) then
69849: LD_VAR 0 1
69853: NOT
69854: PUSH
69855: LD_VAR 0 1
69859: PPUSH
69860: CALL_OW 310
69864: NOT
69865: OR
69866: IFFALSE 69870
// exit ;
69868: GO 69960
// vehicle := IsInUnit ( driver ) ;
69870: LD_ADDR_VAR 0 3
69874: PUSH
69875: LD_VAR 0 1
69879: PPUSH
69880: CALL_OW 310
69884: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69885: LD_VAR 0 1
69889: PPUSH
69890: LD_STRING \
69892: PUSH
69893: LD_INT 0
69895: PUSH
69896: LD_INT 0
69898: PUSH
69899: LD_INT 0
69901: PUSH
69902: LD_INT 0
69904: PUSH
69905: LD_INT 0
69907: PUSH
69908: LD_INT 0
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: LIST
69915: LIST
69916: LIST
69917: LIST
69918: LIST
69919: PUSH
69920: LD_STRING E
69922: PUSH
69923: LD_INT 0
69925: PUSH
69926: LD_INT 0
69928: PUSH
69929: LD_VAR 0 3
69933: PUSH
69934: LD_INT 0
69936: PUSH
69937: LD_INT 0
69939: PUSH
69940: LD_INT 0
69942: PUSH
69943: EMPTY
69944: LIST
69945: LIST
69946: LIST
69947: LIST
69948: LIST
69949: LIST
69950: LIST
69951: PUSH
69952: EMPTY
69953: LIST
69954: LIST
69955: PPUSH
69956: CALL_OW 447
// end ;
69960: LD_VAR 0 2
69964: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69965: LD_INT 0
69967: PPUSH
69968: PPUSH
69969: PPUSH
// tmp := [ ] ;
69970: LD_ADDR_VAR 0 5
69974: PUSH
69975: EMPTY
69976: ST_TO_ADDR
// for i in units do
69977: LD_ADDR_VAR 0 4
69981: PUSH
69982: LD_VAR 0 1
69986: PUSH
69987: FOR_IN
69988: IFFALSE 70026
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69990: LD_ADDR_VAR 0 5
69994: PUSH
69995: LD_VAR 0 5
69999: PPUSH
70000: LD_VAR 0 5
70004: PUSH
70005: LD_INT 1
70007: PLUS
70008: PPUSH
70009: LD_VAR 0 4
70013: PPUSH
70014: CALL_OW 256
70018: PPUSH
70019: CALL_OW 2
70023: ST_TO_ADDR
70024: GO 69987
70026: POP
70027: POP
// if not tmp then
70028: LD_VAR 0 5
70032: NOT
70033: IFFALSE 70037
// exit ;
70035: GO 70085
// if asc then
70037: LD_VAR 0 2
70041: IFFALSE 70065
// result := SortListByListAsc ( units , tmp ) else
70043: LD_ADDR_VAR 0 3
70047: PUSH
70048: LD_VAR 0 1
70052: PPUSH
70053: LD_VAR 0 5
70057: PPUSH
70058: CALL_OW 76
70062: ST_TO_ADDR
70063: GO 70085
// result := SortListByListDesc ( units , tmp ) ;
70065: LD_ADDR_VAR 0 3
70069: PUSH
70070: LD_VAR 0 1
70074: PPUSH
70075: LD_VAR 0 5
70079: PPUSH
70080: CALL_OW 77
70084: ST_TO_ADDR
// end ;
70085: LD_VAR 0 3
70089: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70090: LD_INT 0
70092: PPUSH
70093: PPUSH
// task := GetTaskList ( mech ) ;
70094: LD_ADDR_VAR 0 4
70098: PUSH
70099: LD_VAR 0 1
70103: PPUSH
70104: CALL_OW 437
70108: ST_TO_ADDR
// if not task then
70109: LD_VAR 0 4
70113: NOT
70114: IFFALSE 70118
// exit ;
70116: GO 70160
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70118: LD_ADDR_VAR 0 3
70122: PUSH
70123: LD_VAR 0 4
70127: PUSH
70128: LD_INT 1
70130: ARRAY
70131: PUSH
70132: LD_INT 1
70134: ARRAY
70135: PUSH
70136: LD_STRING r
70138: EQUAL
70139: PUSH
70140: LD_VAR 0 4
70144: PUSH
70145: LD_INT 1
70147: ARRAY
70148: PUSH
70149: LD_INT 4
70151: ARRAY
70152: PUSH
70153: LD_VAR 0 2
70157: EQUAL
70158: AND
70159: ST_TO_ADDR
// end ;
70160: LD_VAR 0 3
70164: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70165: LD_INT 0
70167: PPUSH
// SetDir ( unit , d ) ;
70168: LD_VAR 0 1
70172: PPUSH
70173: LD_VAR 0 4
70177: PPUSH
70178: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70182: LD_VAR 0 1
70186: PPUSH
70187: LD_VAR 0 2
70191: PPUSH
70192: LD_VAR 0 3
70196: PPUSH
70197: LD_VAR 0 5
70201: PPUSH
70202: CALL_OW 48
// end ;
70206: LD_VAR 0 6
70210: RET
// export function ToNaturalNumber ( number ) ; begin
70211: LD_INT 0
70213: PPUSH
// result := number div 1 ;
70214: LD_ADDR_VAR 0 2
70218: PUSH
70219: LD_VAR 0 1
70223: PUSH
70224: LD_INT 1
70226: DIV
70227: ST_TO_ADDR
// if number < 0 then
70228: LD_VAR 0 1
70232: PUSH
70233: LD_INT 0
70235: LESS
70236: IFFALSE 70246
// result := 0 ;
70238: LD_ADDR_VAR 0 2
70242: PUSH
70243: LD_INT 0
70245: ST_TO_ADDR
// end ;
70246: LD_VAR 0 2
70250: RET
// export function SortByClass ( units , class ) ; var un ; begin
70251: LD_INT 0
70253: PPUSH
70254: PPUSH
// if not units or not class then
70255: LD_VAR 0 1
70259: NOT
70260: PUSH
70261: LD_VAR 0 2
70265: NOT
70266: OR
70267: IFFALSE 70271
// exit ;
70269: GO 70366
// result := [ ] ;
70271: LD_ADDR_VAR 0 3
70275: PUSH
70276: EMPTY
70277: ST_TO_ADDR
// for un in units do
70278: LD_ADDR_VAR 0 4
70282: PUSH
70283: LD_VAR 0 1
70287: PUSH
70288: FOR_IN
70289: IFFALSE 70364
// if GetClass ( un ) = class then
70291: LD_VAR 0 4
70295: PPUSH
70296: CALL_OW 257
70300: PUSH
70301: LD_VAR 0 2
70305: EQUAL
70306: IFFALSE 70333
// result := Insert ( result , 1 , un ) else
70308: LD_ADDR_VAR 0 3
70312: PUSH
70313: LD_VAR 0 3
70317: PPUSH
70318: LD_INT 1
70320: PPUSH
70321: LD_VAR 0 4
70325: PPUSH
70326: CALL_OW 2
70330: ST_TO_ADDR
70331: GO 70362
// result := Replace ( result , result + 1 , un ) ;
70333: LD_ADDR_VAR 0 3
70337: PUSH
70338: LD_VAR 0 3
70342: PPUSH
70343: LD_VAR 0 3
70347: PUSH
70348: LD_INT 1
70350: PLUS
70351: PPUSH
70352: LD_VAR 0 4
70356: PPUSH
70357: CALL_OW 1
70361: ST_TO_ADDR
70362: GO 70288
70364: POP
70365: POP
// end ;
70366: LD_VAR 0 3
70370: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70371: LD_INT 0
70373: PPUSH
70374: PPUSH
70375: PPUSH
70376: PPUSH
70377: PPUSH
70378: PPUSH
70379: PPUSH
// result := [ ] ;
70380: LD_ADDR_VAR 0 4
70384: PUSH
70385: EMPTY
70386: ST_TO_ADDR
// if x - r < 0 then
70387: LD_VAR 0 1
70391: PUSH
70392: LD_VAR 0 3
70396: MINUS
70397: PUSH
70398: LD_INT 0
70400: LESS
70401: IFFALSE 70413
// min_x := 0 else
70403: LD_ADDR_VAR 0 8
70407: PUSH
70408: LD_INT 0
70410: ST_TO_ADDR
70411: GO 70429
// min_x := x - r ;
70413: LD_ADDR_VAR 0 8
70417: PUSH
70418: LD_VAR 0 1
70422: PUSH
70423: LD_VAR 0 3
70427: MINUS
70428: ST_TO_ADDR
// if y - r < 0 then
70429: LD_VAR 0 2
70433: PUSH
70434: LD_VAR 0 3
70438: MINUS
70439: PUSH
70440: LD_INT 0
70442: LESS
70443: IFFALSE 70455
// min_y := 0 else
70445: LD_ADDR_VAR 0 7
70449: PUSH
70450: LD_INT 0
70452: ST_TO_ADDR
70453: GO 70471
// min_y := y - r ;
70455: LD_ADDR_VAR 0 7
70459: PUSH
70460: LD_VAR 0 2
70464: PUSH
70465: LD_VAR 0 3
70469: MINUS
70470: ST_TO_ADDR
// max_x := x + r ;
70471: LD_ADDR_VAR 0 9
70475: PUSH
70476: LD_VAR 0 1
70480: PUSH
70481: LD_VAR 0 3
70485: PLUS
70486: ST_TO_ADDR
// max_y := y + r ;
70487: LD_ADDR_VAR 0 10
70491: PUSH
70492: LD_VAR 0 2
70496: PUSH
70497: LD_VAR 0 3
70501: PLUS
70502: ST_TO_ADDR
// for _x = min_x to max_x do
70503: LD_ADDR_VAR 0 5
70507: PUSH
70508: DOUBLE
70509: LD_VAR 0 8
70513: DEC
70514: ST_TO_ADDR
70515: LD_VAR 0 9
70519: PUSH
70520: FOR_TO
70521: IFFALSE 70622
// for _y = min_y to max_y do
70523: LD_ADDR_VAR 0 6
70527: PUSH
70528: DOUBLE
70529: LD_VAR 0 7
70533: DEC
70534: ST_TO_ADDR
70535: LD_VAR 0 10
70539: PUSH
70540: FOR_TO
70541: IFFALSE 70618
// begin if not ValidHex ( _x , _y ) then
70543: LD_VAR 0 5
70547: PPUSH
70548: LD_VAR 0 6
70552: PPUSH
70553: CALL_OW 488
70557: NOT
70558: IFFALSE 70562
// continue ;
70560: GO 70540
// if GetResourceTypeXY ( _x , _y ) then
70562: LD_VAR 0 5
70566: PPUSH
70567: LD_VAR 0 6
70571: PPUSH
70572: CALL_OW 283
70576: IFFALSE 70616
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70578: LD_ADDR_VAR 0 4
70582: PUSH
70583: LD_VAR 0 4
70587: PPUSH
70588: LD_VAR 0 4
70592: PUSH
70593: LD_INT 1
70595: PLUS
70596: PPUSH
70597: LD_VAR 0 5
70601: PUSH
70602: LD_VAR 0 6
70606: PUSH
70607: EMPTY
70608: LIST
70609: LIST
70610: PPUSH
70611: CALL_OW 1
70615: ST_TO_ADDR
// end ;
70616: GO 70540
70618: POP
70619: POP
70620: GO 70520
70622: POP
70623: POP
// end ;
70624: LD_VAR 0 4
70628: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70629: LD_INT 0
70631: PPUSH
70632: PPUSH
70633: PPUSH
70634: PPUSH
70635: PPUSH
70636: PPUSH
70637: PPUSH
70638: PPUSH
// if not units then
70639: LD_VAR 0 1
70643: NOT
70644: IFFALSE 70648
// exit ;
70646: GO 71172
// result := UnitFilter ( units , [ f_ok ] ) ;
70648: LD_ADDR_VAR 0 3
70652: PUSH
70653: LD_VAR 0 1
70657: PPUSH
70658: LD_INT 50
70660: PUSH
70661: EMPTY
70662: LIST
70663: PPUSH
70664: CALL_OW 72
70668: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70669: LD_ADDR_VAR 0 8
70673: PUSH
70674: LD_VAR 0 1
70678: PUSH
70679: LD_INT 1
70681: ARRAY
70682: PPUSH
70683: CALL_OW 255
70687: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70688: LD_ADDR_VAR 0 10
70692: PUSH
70693: LD_INT 29
70695: PUSH
70696: LD_INT 91
70698: PUSH
70699: LD_INT 49
70701: PUSH
70702: EMPTY
70703: LIST
70704: LIST
70705: LIST
70706: ST_TO_ADDR
// if not result then
70707: LD_VAR 0 3
70711: NOT
70712: IFFALSE 70716
// exit ;
70714: GO 71172
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70716: LD_ADDR_VAR 0 5
70720: PUSH
70721: LD_INT 81
70723: PUSH
70724: LD_VAR 0 8
70728: PUSH
70729: EMPTY
70730: LIST
70731: LIST
70732: PPUSH
70733: CALL_OW 69
70737: ST_TO_ADDR
// for i in result do
70738: LD_ADDR_VAR 0 4
70742: PUSH
70743: LD_VAR 0 3
70747: PUSH
70748: FOR_IN
70749: IFFALSE 71170
// begin tag := GetTag ( i ) + 1 ;
70751: LD_ADDR_VAR 0 9
70755: PUSH
70756: LD_VAR 0 4
70760: PPUSH
70761: CALL_OW 110
70765: PUSH
70766: LD_INT 1
70768: PLUS
70769: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70770: LD_ADDR_VAR 0 7
70774: PUSH
70775: LD_VAR 0 4
70779: PPUSH
70780: CALL_OW 250
70784: PPUSH
70785: LD_VAR 0 4
70789: PPUSH
70790: CALL_OW 251
70794: PPUSH
70795: LD_INT 6
70797: PPUSH
70798: CALL 70371 0 3
70802: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70803: LD_VAR 0 4
70807: PPUSH
70808: CALL_OW 247
70812: PUSH
70813: LD_INT 2
70815: EQUAL
70816: PUSH
70817: LD_VAR 0 7
70821: AND
70822: PUSH
70823: LD_VAR 0 4
70827: PPUSH
70828: CALL_OW 264
70832: PUSH
70833: LD_VAR 0 10
70837: IN
70838: NOT
70839: AND
70840: IFFALSE 70879
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70842: LD_VAR 0 4
70846: PPUSH
70847: LD_VAR 0 7
70851: PUSH
70852: LD_INT 1
70854: ARRAY
70855: PUSH
70856: LD_INT 1
70858: ARRAY
70859: PPUSH
70860: LD_VAR 0 7
70864: PUSH
70865: LD_INT 1
70867: ARRAY
70868: PUSH
70869: LD_INT 2
70871: ARRAY
70872: PPUSH
70873: CALL_OW 116
70877: GO 71168
// if path > tag then
70879: LD_VAR 0 2
70883: PUSH
70884: LD_VAR 0 9
70888: GREATER
70889: IFFALSE 71097
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70891: LD_ADDR_VAR 0 6
70895: PUSH
70896: LD_VAR 0 5
70900: PPUSH
70901: LD_INT 91
70903: PUSH
70904: LD_VAR 0 4
70908: PUSH
70909: LD_INT 8
70911: PUSH
70912: EMPTY
70913: LIST
70914: LIST
70915: LIST
70916: PPUSH
70917: CALL_OW 72
70921: ST_TO_ADDR
// if nearEnemy then
70922: LD_VAR 0 6
70926: IFFALSE 70995
// begin if GetWeapon ( i ) = ru_time_lapser then
70928: LD_VAR 0 4
70932: PPUSH
70933: CALL_OW 264
70937: PUSH
70938: LD_INT 49
70940: EQUAL
70941: IFFALSE 70969
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70943: LD_VAR 0 4
70947: PPUSH
70948: LD_VAR 0 6
70952: PPUSH
70953: LD_VAR 0 4
70957: PPUSH
70958: CALL_OW 74
70962: PPUSH
70963: CALL_OW 112
70967: GO 70993
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70969: LD_VAR 0 4
70973: PPUSH
70974: LD_VAR 0 6
70978: PPUSH
70979: LD_VAR 0 4
70983: PPUSH
70984: CALL_OW 74
70988: PPUSH
70989: CALL_OW 115
// end else
70993: GO 71095
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70995: LD_VAR 0 4
70999: PPUSH
71000: LD_VAR 0 2
71004: PUSH
71005: LD_VAR 0 9
71009: ARRAY
71010: PUSH
71011: LD_INT 1
71013: ARRAY
71014: PPUSH
71015: LD_VAR 0 2
71019: PUSH
71020: LD_VAR 0 9
71024: ARRAY
71025: PUSH
71026: LD_INT 2
71028: ARRAY
71029: PPUSH
71030: CALL_OW 297
71034: PUSH
71035: LD_INT 6
71037: GREATER
71038: IFFALSE 71081
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71040: LD_VAR 0 4
71044: PPUSH
71045: LD_VAR 0 2
71049: PUSH
71050: LD_VAR 0 9
71054: ARRAY
71055: PUSH
71056: LD_INT 1
71058: ARRAY
71059: PPUSH
71060: LD_VAR 0 2
71064: PUSH
71065: LD_VAR 0 9
71069: ARRAY
71070: PUSH
71071: LD_INT 2
71073: ARRAY
71074: PPUSH
71075: CALL_OW 114
71079: GO 71095
// SetTag ( i , tag ) ;
71081: LD_VAR 0 4
71085: PPUSH
71086: LD_VAR 0 9
71090: PPUSH
71091: CALL_OW 109
// end else
71095: GO 71168
// if enemy then
71097: LD_VAR 0 5
71101: IFFALSE 71168
// begin if GetWeapon ( i ) = ru_time_lapser then
71103: LD_VAR 0 4
71107: PPUSH
71108: CALL_OW 264
71112: PUSH
71113: LD_INT 49
71115: EQUAL
71116: IFFALSE 71144
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71118: LD_VAR 0 4
71122: PPUSH
71123: LD_VAR 0 5
71127: PPUSH
71128: LD_VAR 0 4
71132: PPUSH
71133: CALL_OW 74
71137: PPUSH
71138: CALL_OW 112
71142: GO 71168
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71144: LD_VAR 0 4
71148: PPUSH
71149: LD_VAR 0 5
71153: PPUSH
71154: LD_VAR 0 4
71158: PPUSH
71159: CALL_OW 74
71163: PPUSH
71164: CALL_OW 115
// end ; end ;
71168: GO 70748
71170: POP
71171: POP
// end ;
71172: LD_VAR 0 3
71176: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71177: LD_INT 0
71179: PPUSH
71180: PPUSH
71181: PPUSH
// if not unit or IsInUnit ( unit ) then
71182: LD_VAR 0 1
71186: NOT
71187: PUSH
71188: LD_VAR 0 1
71192: PPUSH
71193: CALL_OW 310
71197: OR
71198: IFFALSE 71202
// exit ;
71200: GO 71293
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71202: LD_ADDR_VAR 0 4
71206: PUSH
71207: LD_VAR 0 1
71211: PPUSH
71212: CALL_OW 250
71216: PPUSH
71217: LD_VAR 0 2
71221: PPUSH
71222: LD_INT 1
71224: PPUSH
71225: CALL_OW 272
71229: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71230: LD_ADDR_VAR 0 5
71234: PUSH
71235: LD_VAR 0 1
71239: PPUSH
71240: CALL_OW 251
71244: PPUSH
71245: LD_VAR 0 2
71249: PPUSH
71250: LD_INT 1
71252: PPUSH
71253: CALL_OW 273
71257: ST_TO_ADDR
// if ValidHex ( x , y ) then
71258: LD_VAR 0 4
71262: PPUSH
71263: LD_VAR 0 5
71267: PPUSH
71268: CALL_OW 488
71272: IFFALSE 71293
// ComTurnXY ( unit , x , y ) ;
71274: LD_VAR 0 1
71278: PPUSH
71279: LD_VAR 0 4
71283: PPUSH
71284: LD_VAR 0 5
71288: PPUSH
71289: CALL_OW 118
// end ;
71293: LD_VAR 0 3
71297: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71298: LD_INT 0
71300: PPUSH
71301: PPUSH
// result := false ;
71302: LD_ADDR_VAR 0 3
71306: PUSH
71307: LD_INT 0
71309: ST_TO_ADDR
// if not units then
71310: LD_VAR 0 2
71314: NOT
71315: IFFALSE 71319
// exit ;
71317: GO 71364
// for i in units do
71319: LD_ADDR_VAR 0 4
71323: PUSH
71324: LD_VAR 0 2
71328: PUSH
71329: FOR_IN
71330: IFFALSE 71362
// if See ( side , i ) then
71332: LD_VAR 0 1
71336: PPUSH
71337: LD_VAR 0 4
71341: PPUSH
71342: CALL_OW 292
71346: IFFALSE 71360
// begin result := true ;
71348: LD_ADDR_VAR 0 3
71352: PUSH
71353: LD_INT 1
71355: ST_TO_ADDR
// exit ;
71356: POP
71357: POP
71358: GO 71364
// end ;
71360: GO 71329
71362: POP
71363: POP
// end ;
71364: LD_VAR 0 3
71368: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71369: LD_INT 0
71371: PPUSH
71372: PPUSH
71373: PPUSH
71374: PPUSH
// if not unit or not points then
71375: LD_VAR 0 1
71379: NOT
71380: PUSH
71381: LD_VAR 0 2
71385: NOT
71386: OR
71387: IFFALSE 71391
// exit ;
71389: GO 71481
// dist := 99999 ;
71391: LD_ADDR_VAR 0 5
71395: PUSH
71396: LD_INT 99999
71398: ST_TO_ADDR
// for i in points do
71399: LD_ADDR_VAR 0 4
71403: PUSH
71404: LD_VAR 0 2
71408: PUSH
71409: FOR_IN
71410: IFFALSE 71479
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71412: LD_ADDR_VAR 0 6
71416: PUSH
71417: LD_VAR 0 1
71421: PPUSH
71422: LD_VAR 0 4
71426: PUSH
71427: LD_INT 1
71429: ARRAY
71430: PPUSH
71431: LD_VAR 0 4
71435: PUSH
71436: LD_INT 2
71438: ARRAY
71439: PPUSH
71440: CALL_OW 297
71444: ST_TO_ADDR
// if tmpDist < dist then
71445: LD_VAR 0 6
71449: PUSH
71450: LD_VAR 0 5
71454: LESS
71455: IFFALSE 71477
// begin result := i ;
71457: LD_ADDR_VAR 0 3
71461: PUSH
71462: LD_VAR 0 4
71466: ST_TO_ADDR
// dist := tmpDist ;
71467: LD_ADDR_VAR 0 5
71471: PUSH
71472: LD_VAR 0 6
71476: ST_TO_ADDR
// end ; end ;
71477: GO 71409
71479: POP
71480: POP
// end ;
71481: LD_VAR 0 3
71485: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71486: LD_INT 0
71488: PPUSH
// uc_side := side ;
71489: LD_ADDR_OWVAR 20
71493: PUSH
71494: LD_VAR 0 1
71498: ST_TO_ADDR
// uc_nation := 3 ;
71499: LD_ADDR_OWVAR 21
71503: PUSH
71504: LD_INT 3
71506: ST_TO_ADDR
// vc_chassis := 25 ;
71507: LD_ADDR_OWVAR 37
71511: PUSH
71512: LD_INT 25
71514: ST_TO_ADDR
// vc_engine := engine_siberite ;
71515: LD_ADDR_OWVAR 39
71519: PUSH
71520: LD_INT 3
71522: ST_TO_ADDR
// vc_control := control_computer ;
71523: LD_ADDR_OWVAR 38
71527: PUSH
71528: LD_INT 3
71530: ST_TO_ADDR
// vc_weapon := 59 ;
71531: LD_ADDR_OWVAR 40
71535: PUSH
71536: LD_INT 59
71538: ST_TO_ADDR
// result := CreateVehicle ;
71539: LD_ADDR_VAR 0 5
71543: PUSH
71544: CALL_OW 45
71548: ST_TO_ADDR
// SetDir ( result , d ) ;
71549: LD_VAR 0 5
71553: PPUSH
71554: LD_VAR 0 4
71558: PPUSH
71559: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71563: LD_VAR 0 5
71567: PPUSH
71568: LD_VAR 0 2
71572: PPUSH
71573: LD_VAR 0 3
71577: PPUSH
71578: LD_INT 0
71580: PPUSH
71581: CALL_OW 48
// end ;
71585: LD_VAR 0 5
71589: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71590: LD_INT 0
71592: PPUSH
71593: PPUSH
71594: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71595: LD_ADDR_VAR 0 2
71599: PUSH
71600: LD_INT 0
71602: PUSH
71603: LD_INT 0
71605: PUSH
71606: LD_INT 0
71608: PUSH
71609: LD_INT 0
71611: PUSH
71612: EMPTY
71613: LIST
71614: LIST
71615: LIST
71616: LIST
71617: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71618: LD_VAR 0 1
71622: NOT
71623: PUSH
71624: LD_VAR 0 1
71628: PPUSH
71629: CALL_OW 264
71633: PUSH
71634: LD_INT 12
71636: PUSH
71637: LD_INT 51
71639: PUSH
71640: LD_INT 32
71642: PUSH
71643: LD_INT 89
71645: PUSH
71646: EMPTY
71647: LIST
71648: LIST
71649: LIST
71650: LIST
71651: IN
71652: NOT
71653: OR
71654: IFFALSE 71658
// exit ;
71656: GO 71756
// for i := 1 to 3 do
71658: LD_ADDR_VAR 0 3
71662: PUSH
71663: DOUBLE
71664: LD_INT 1
71666: DEC
71667: ST_TO_ADDR
71668: LD_INT 3
71670: PUSH
71671: FOR_TO
71672: IFFALSE 71754
// begin tmp := GetCargo ( cargo , i ) ;
71674: LD_ADDR_VAR 0 4
71678: PUSH
71679: LD_VAR 0 1
71683: PPUSH
71684: LD_VAR 0 3
71688: PPUSH
71689: CALL_OW 289
71693: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71694: LD_ADDR_VAR 0 2
71698: PUSH
71699: LD_VAR 0 2
71703: PPUSH
71704: LD_VAR 0 3
71708: PPUSH
71709: LD_VAR 0 4
71713: PPUSH
71714: CALL_OW 1
71718: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71719: LD_ADDR_VAR 0 2
71723: PUSH
71724: LD_VAR 0 2
71728: PPUSH
71729: LD_INT 4
71731: PPUSH
71732: LD_VAR 0 2
71736: PUSH
71737: LD_INT 4
71739: ARRAY
71740: PUSH
71741: LD_VAR 0 4
71745: PLUS
71746: PPUSH
71747: CALL_OW 1
71751: ST_TO_ADDR
// end ;
71752: GO 71671
71754: POP
71755: POP
// end ;
71756: LD_VAR 0 2
71760: RET
// export function Length ( array ) ; begin
71761: LD_INT 0
71763: PPUSH
// result := array + 0 ;
71764: LD_ADDR_VAR 0 2
71768: PUSH
71769: LD_VAR 0 1
71773: PUSH
71774: LD_INT 0
71776: PLUS
71777: ST_TO_ADDR
// end ;
71778: LD_VAR 0 2
71782: RET
// export function PrepareArray ( array ) ; begin
71783: LD_INT 0
71785: PPUSH
// result := array diff 0 ;
71786: LD_ADDR_VAR 0 2
71790: PUSH
71791: LD_VAR 0 1
71795: PUSH
71796: LD_INT 0
71798: DIFF
71799: ST_TO_ADDR
// if not result [ 1 ] then
71800: LD_VAR 0 2
71804: PUSH
71805: LD_INT 1
71807: ARRAY
71808: NOT
71809: IFFALSE 71829
// result := Delete ( result , 1 ) ;
71811: LD_ADDR_VAR 0 2
71815: PUSH
71816: LD_VAR 0 2
71820: PPUSH
71821: LD_INT 1
71823: PPUSH
71824: CALL_OW 3
71828: ST_TO_ADDR
// end ; end_of_file
71829: LD_VAR 0 2
71833: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71834: LD_VAR 0 1
71838: PUSH
71839: LD_INT 200
71841: DOUBLE
71842: GREATEREQUAL
71843: IFFALSE 71851
71845: LD_INT 299
71847: DOUBLE
71848: LESSEQUAL
71849: IFTRUE 71853
71851: GO 71885
71853: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71854: LD_VAR 0 1
71858: PPUSH
71859: LD_VAR 0 2
71863: PPUSH
71864: LD_VAR 0 3
71868: PPUSH
71869: LD_VAR 0 4
71873: PPUSH
71874: LD_VAR 0 5
71878: PPUSH
71879: CALL 11087 0 5
71883: GO 71962
71885: LD_INT 300
71887: DOUBLE
71888: GREATEREQUAL
71889: IFFALSE 71897
71891: LD_INT 399
71893: DOUBLE
71894: LESSEQUAL
71895: IFTRUE 71899
71897: GO 71961
71899: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71900: LD_VAR 0 1
71904: PPUSH
71905: LD_VAR 0 2
71909: PPUSH
71910: LD_VAR 0 3
71914: PPUSH
71915: LD_VAR 0 4
71919: PPUSH
71920: LD_VAR 0 5
71924: PPUSH
71925: LD_VAR 0 6
71929: PPUSH
71930: LD_VAR 0 7
71934: PPUSH
71935: LD_VAR 0 8
71939: PPUSH
71940: LD_VAR 0 9
71944: PPUSH
71945: LD_VAR 0 10
71949: PPUSH
71950: LD_VAR 0 11
71954: PPUSH
71955: CALL 27358 0 11
71959: GO 71962
71961: POP
// end ;
71962: PPOPN 11
71964: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71965: LD_VAR 0 1
71969: PPUSH
71970: LD_VAR 0 2
71974: PPUSH
71975: LD_VAR 0 3
71979: PPUSH
71980: LD_VAR 0 4
71984: PPUSH
71985: LD_VAR 0 5
71989: PPUSH
71990: CALL 10823 0 5
// end ; end_of_file
71994: PPOPN 5
71996: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71997: LD_VAR 0 1
72001: PPUSH
72002: LD_VAR 0 2
72006: PPUSH
72007: LD_VAR 0 3
72011: PPUSH
72012: LD_VAR 0 4
72016: PPUSH
72017: LD_VAR 0 5
72021: PPUSH
72022: LD_VAR 0 6
72026: PPUSH
72027: CALL 15051 0 6
// end ;
72031: PPOPN 6
72033: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72034: LD_INT 0
72036: PPUSH
// begin if not units then
72037: LD_VAR 0 1
72041: NOT
72042: IFFALSE 72046
// exit ;
72044: GO 72046
// end ;
72046: PPOPN 7
72048: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72049: CALL 15022 0 0
// end ;
72053: PPOPN 1
72055: END
