// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 98 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 24
// Difficulty := 2 else
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 2
  21: ST_TO_ADDR
  22: GO 37
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_OWVAR 67
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// PrepareNature ( 3 , 3 , 4 , 2 , 1 , 0 , 0 , natureArea , 0 ) ;
  37: LD_INT 3
  39: PPUSH
  40: LD_INT 3
  42: PPUSH
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 2
  48: PPUSH
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 0
  54: PPUSH
  55: LD_INT 0
  57: PPUSH
  58: LD_INT 8
  60: PPUSH
  61: LD_INT 0
  63: PPUSH
  64: CALL 64951 0 9
// PrepareRussian ;
  68: CALL 896 0 0
// PrepareAmerican ;
  72: CALL 202 0 0
// PrepareSikorski ;
  76: CALL 694 0 0
// Action ;
  80: CALL 7093 0 0
// if debug then
  84: LD_EXP 1
  88: IFFALSE 97
// FogOff ( 1 ) ;
  90: LD_INT 1
  92: PPUSH
  93: CALL_OW 344
// end ;
  97: END
// export debug , activeGrishkoAI , allowToPatrol , spottedByPatrol , russianAlert , startAttackOnOmicron , omicronFall , retreatFromOmicron , sikorskiInOmicron , usLoseCounter , ruLoseCounter , tanksCounter ; function Init ; begin
  98: LD_INT 0
 100: PPUSH
// debug := 0 ;
 101: LD_ADDR_EXP 1
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// activeGrishkoAI := true ;
 109: LD_ADDR_EXP 2
 113: PUSH
 114: LD_INT 1
 116: ST_TO_ADDR
// allowToPatrol := true ;
 117: LD_ADDR_EXP 3
 121: PUSH
 122: LD_INT 1
 124: ST_TO_ADDR
// spottedByPatrol := false ;
 125: LD_ADDR_EXP 4
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// russianAlert := false ;
 133: LD_ADDR_EXP 5
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// startAttackOnOmicron := false ;
 141: LD_ADDR_EXP 6
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// omicronFall := false ;
 149: LD_ADDR_EXP 7
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// retreatFromOmicron := false ;
 157: LD_ADDR_EXP 8
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// sikorskiInOmicron := false ;
 165: LD_ADDR_EXP 9
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// usLoseCounter := 0 ;
 173: LD_ADDR_EXP 10
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// ruLoseCounter := 0 ;
 181: LD_ADDR_EXP 11
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// tanksCounter := 0 ;
 189: LD_ADDR_EXP 12
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// end ; end_of_file
 197: LD_VAR 0 1
 201: RET
// export omicronSquad , Sikorski , Harrison ; export function PrepareAmerican ; var i , un , veh ; begin
 202: LD_INT 0
 204: PPUSH
 205: PPUSH
 206: PPUSH
 207: PPUSH
// SetBName ( omikron , omikron ) ;
 208: LD_INT 64
 210: PPUSH
 211: LD_STRING omikron
 213: PPUSH
 214: CALL_OW 500
// uc_side := 4 ;
 218: LD_ADDR_OWVAR 20
 222: PUSH
 223: LD_INT 4
 225: ST_TO_ADDR
// uc_nation := 1 ;
 226: LD_ADDR_OWVAR 21
 230: PUSH
 231: LD_INT 1
 233: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_STRING Harisson
 241: PPUSH
 242: LD_INT 0
 244: PPUSH
 245: LD_STRING 
 247: PPUSH
 248: CALL 30794 0 3
 252: ST_TO_ADDR
// omicronSquad := [ ] ;
 253: LD_ADDR_EXP 13
 257: PUSH
 258: EMPTY
 259: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
 260: LD_ADDR_VAR 0 2
 264: PUSH
 265: LD_INT 22
 267: PUSH
 268: LD_INT 4
 270: PUSH
 271: EMPTY
 272: LIST
 273: LIST
 274: PUSH
 275: LD_INT 2
 277: PUSH
 278: LD_INT 30
 280: PUSH
 281: LD_INT 32
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: PUSH
 288: LD_INT 30
 290: PUSH
 291: LD_INT 31
 293: PUSH
 294: EMPTY
 295: LIST
 296: LIST
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: LIST
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PPUSH
 307: CALL_OW 69
 311: PUSH
 312: FOR_IN
 313: IFFALSE 393
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
 315: LD_INT 1
 317: PPUSH
 318: LD_INT 1
 320: PPUSH
 321: LD_INT 1
 323: PPUSH
 324: CALL_OW 380
// un := CreateHuman ;
 328: LD_ADDR_VAR 0 3
 332: PUSH
 333: CALL_OW 44
 337: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 338: LD_ADDR_EXP 13
 342: PUSH
 343: LD_EXP 13
 347: PUSH
 348: LD_VAR 0 3
 352: UNION
 353: ST_TO_ADDR
// SetDir ( un , GetDir ( i ) - 3 ) ;
 354: LD_VAR 0 3
 358: PPUSH
 359: LD_VAR 0 2
 363: PPUSH
 364: CALL_OW 254
 368: PUSH
 369: LD_INT 3
 371: MINUS
 372: PPUSH
 373: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
 377: LD_VAR 0 3
 381: PPUSH
 382: LD_VAR 0 2
 386: PPUSH
 387: CALL_OW 52
// end ;
 391: GO 312
 393: POP
 394: POP
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
 395: LD_ADDR_VAR 0 2
 399: PUSH
 400: DOUBLE
 401: LD_INT 1
 403: DEC
 404: ST_TO_ADDR
 405: LD_INT 3
 407: PUSH
 408: LD_INT 2
 410: PUSH
 411: LD_INT 2
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: LIST
 418: PUSH
 419: LD_OWVAR 67
 423: ARRAY
 424: PUSH
 425: FOR_TO
 426: IFFALSE 505
// begin PrepareHuman ( false , 2 , 2 ) ;
 428: LD_INT 0
 430: PPUSH
 431: LD_INT 2
 433: PPUSH
 434: LD_INT 2
 436: PPUSH
 437: CALL_OW 380
// un := CreateHuman ;
 441: LD_ADDR_VAR 0 3
 445: PUSH
 446: CALL_OW 44
 450: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 451: LD_ADDR_EXP 13
 455: PUSH
 456: LD_EXP 13
 460: PUSH
 461: LD_VAR 0 3
 465: UNION
 466: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
 467: LD_VAR 0 3
 471: PPUSH
 472: LD_INT 64
 474: PPUSH
 475: CALL_OW 52
// ComExitBuilding ( un ) ;
 479: LD_VAR 0 3
 483: PPUSH
 484: CALL_OW 122
// AddComMoveXY ( un , 19 , 23 ) ;
 488: LD_VAR 0 3
 492: PPUSH
 493: LD_INT 19
 495: PPUSH
 496: LD_INT 23
 498: PPUSH
 499: CALL_OW 171
// end ;
 503: GO 425
 505: POP
 506: POP
// for i := 1 to 2 do
 507: LD_ADDR_VAR 0 2
 511: PUSH
 512: DOUBLE
 513: LD_INT 1
 515: DEC
 516: ST_TO_ADDR
 517: LD_INT 2
 519: PUSH
 520: FOR_TO
 521: IFFALSE 687
// begin PrepareVehicle ( [ us_medium_wheeled , us_medium_tracked ] [ i ] , engine_solar , control_manual , [ us_light_gun , us_gatling_gun ] [ i ] , 100 ) ;
 523: LD_INT 2
 525: PUSH
 526: LD_INT 3
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_VAR 0 2
 537: ARRAY
 538: PPUSH
 539: LD_INT 2
 541: PPUSH
 542: LD_INT 1
 544: PPUSH
 545: LD_INT 3
 547: PUSH
 548: LD_INT 4
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: PUSH
 555: LD_VAR 0 2
 559: ARRAY
 560: PPUSH
 561: LD_INT 100
 563: PPUSH
 564: CALL 35809 0 5
// veh := CreateVehicle ;
 568: LD_ADDR_VAR 0 4
 572: PUSH
 573: CALL_OW 45
 577: ST_TO_ADDR
// PlaceUnitXYR ( veh , 28 , 37 , 6 , false ) ;
 578: LD_VAR 0 4
 582: PPUSH
 583: LD_INT 28
 585: PPUSH
 586: LD_INT 37
 588: PPUSH
 589: LD_INT 6
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
 599: LD_INT 0
 601: PPUSH
 602: LD_INT 3
 604: PPUSH
 605: LD_INT 2
 607: PPUSH
 608: CALL_OW 380
// un := CreateHuman ;
 612: LD_ADDR_VAR 0 3
 616: PUSH
 617: CALL_OW 44
 621: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 622: LD_ADDR_EXP 13
 626: PUSH
 627: LD_EXP 13
 631: PUSH
 632: LD_VAR 0 3
 636: UNION
 637: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
 638: LD_VAR 0 3
 642: PPUSH
 643: LD_VAR 0 4
 647: PPUSH
 648: CALL_OW 52
// ComMoveXY ( un , GetX ( un ) + 3 , GetY ( un ) ) ;
 652: LD_VAR 0 3
 656: PPUSH
 657: LD_VAR 0 3
 661: PPUSH
 662: CALL_OW 250
 666: PUSH
 667: LD_INT 3
 669: PLUS
 670: PPUSH
 671: LD_VAR 0 3
 675: PPUSH
 676: CALL_OW 251
 680: PPUSH
 681: CALL_OW 111
// end ;
 685: GO 520
 687: POP
 688: POP
// end ;
 689: LD_VAR 0 1
 693: RET
// export function PrepareSikorski ; var veh ; begin
 694: LD_INT 0
 696: PPUSH
 697: PPUSH
// uc_side := 1 ;
 698: LD_ADDR_OWVAR 20
 702: PUSH
 703: LD_INT 1
 705: ST_TO_ADDR
// uc_nation := 1 ;
 706: LD_ADDR_OWVAR 21
 710: PUSH
 711: LD_INT 1
 713: ST_TO_ADDR
// hc_importance := 100 ;
 714: LD_ADDR_OWVAR 32
 718: PUSH
 719: LD_INT 100
 721: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
 722: LD_ADDR_OWVAR 26
 726: PUSH
 727: LD_STRING Jeremy Sikorski
 729: ST_TO_ADDR
// hc_gallery := us ;
 730: LD_ADDR_OWVAR 33
 734: PUSH
 735: LD_STRING us
 737: ST_TO_ADDR
// hc_face_number := 19 ;
 738: LD_ADDR_OWVAR 34
 742: PUSH
 743: LD_INT 19
 745: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , [ 4 , 4 , 3 ] [ Difficulty ] ) ;
 746: LD_INT 1
 748: PPUSH
 749: LD_INT 1
 751: PPUSH
 752: LD_INT 4
 754: PUSH
 755: LD_INT 4
 757: PUSH
 758: LD_INT 3
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: LIST
 765: PUSH
 766: LD_OWVAR 67
 770: ARRAY
 771: PPUSH
 772: CALL_OW 380
// hc_attr := [ 10 , 12 ] ;
 776: LD_ADDR_OWVAR 29
 780: PUSH
 781: LD_INT 10
 783: PUSH
 784: LD_INT 12
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: ST_TO_ADDR
// Sikorski := CreateHuman ;
 791: LD_ADDR_EXP 14
 795: PUSH
 796: CALL_OW 44
 800: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_light_gun , 88 ) ;
 801: LD_INT 3
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: LD_INT 1
 809: PPUSH
 810: LD_INT 3
 812: PPUSH
 813: LD_INT 88
 815: PPUSH
 816: CALL 35809 0 5
// veh := CreateVehicle ;
 820: LD_ADDR_VAR 0 2
 824: PUSH
 825: CALL_OW 45
 829: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
 830: LD_VAR 0 2
 834: PPUSH
 835: LD_INT 3
 837: PPUSH
 838: CALL_OW 233
// PlaceUnitXY ( veh , 106 , 2 , false ) ;
 842: LD_VAR 0 2
 846: PPUSH
 847: LD_INT 106
 849: PPUSH
 850: LD_INT 2
 852: PPUSH
 853: LD_INT 0
 855: PPUSH
 856: CALL_OW 48
// PlaceHumanInUnit ( Sikorski , veh ) ;
 860: LD_EXP 14
 864: PPUSH
 865: LD_VAR 0 2
 869: PPUSH
 870: CALL_OW 52
// SetMark ( veh , - 1 ) ;
 874: LD_VAR 0 2
 878: PPUSH
 879: LD_INT 1
 881: NEG
 882: PPUSH
 883: CALL_OW 242
// InitHc ;
 887: CALL_OW 19
// end ; end_of_file
 891: LD_VAR 0 1
 895: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo ; export function PrepareRussian ; var i , un , arm , bar , bun , tmp ; begin
 896: LD_INT 0
 898: PPUSH
 899: PPUSH
 900: PPUSH
 901: PPUSH
 902: PPUSH
 903: PPUSH
 904: PPUSH
// ResetHc ;
 905: CALL 68787 0 0
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
 909: LD_ADDR_VAR 0 2
 913: PUSH
 914: LD_INT 21
 916: PUSH
 917: LD_INT 3
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 23
 926: PUSH
 927: LD_INT 3
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: PPUSH
 938: CALL_OW 69
 942: PUSH
 943: FOR_IN
 944: IFFALSE 960
// SetBLevel ( i , 5 ) ;
 946: LD_VAR 0 2
 950: PPUSH
 951: LD_INT 5
 953: PPUSH
 954: CALL_OW 241
 958: GO 943
 960: POP
 961: POP
// SetBName ( kirov , kirov ) ;
 962: LD_INT 71
 964: PPUSH
 965: LD_STRING kirov
 967: PPUSH
 968: CALL_OW 500
// SetBName ( beria , beria ) ;
 972: LD_INT 106
 974: PPUSH
 975: LD_STRING beria
 977: PPUSH
 978: CALL_OW 500
// SetBName ( kagan , kagan ) ;
 982: LD_INT 112
 984: PPUSH
 985: LD_STRING kagan
 987: PPUSH
 988: CALL_OW 500
// uc_side := 6 ;
 992: LD_ADDR_OWVAR 20
 996: PUSH
 997: LD_INT 6
 999: ST_TO_ADDR
// uc_nation := 3 ;
1000: LD_ADDR_OWVAR 21
1004: PUSH
1005: LD_INT 3
1007: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
1008: LD_ADDR_VAR 0 5
1012: PUSH
1013: LD_INT 22
1015: PUSH
1016: LD_INT 6
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: PUSH
1023: LD_INT 30
1025: PUSH
1026: LD_INT 5
1028: PUSH
1029: EMPTY
1030: LIST
1031: LIST
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: PPUSH
1037: CALL_OW 69
1041: PUSH
1042: LD_INT 1
1044: ARRAY
1045: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
1046: LD_ADDR_VAR 0 4
1050: PUSH
1051: LD_INT 22
1053: PUSH
1054: LD_INT 6
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PUSH
1061: LD_INT 30
1063: PUSH
1064: LD_INT 4
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PPUSH
1075: CALL_OW 69
1079: PUSH
1080: LD_INT 1
1082: ARRAY
1083: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
1084: LD_ADDR_EXP 20
1088: PUSH
1089: EMPTY
1090: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
1091: LD_ADDR_EXP 21
1095: PUSH
1096: EMPTY
1097: ST_TO_ADDR
// russianPatrol := [ ] ;
1098: LD_ADDR_EXP 23
1102: PUSH
1103: EMPTY
1104: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
1105: LD_ADDR_EXP 16
1109: PUSH
1110: LD_STRING Kurin
1112: PPUSH
1113: LD_INT 0
1115: PPUSH
1116: LD_STRING 
1118: PPUSH
1119: CALL 30794 0 3
1123: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
1124: LD_EXP 16
1128: PPUSH
1129: LD_INT 71
1131: PPUSH
1132: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
1136: LD_ADDR_EXP 18
1140: PUSH
1141: LD_STRING Popov
1143: PPUSH
1144: LD_INT 0
1146: PPUSH
1147: LD_STRING 
1149: PPUSH
1150: CALL 30794 0 3
1154: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
1155: LD_EXP 18
1159: PPUSH
1160: LD_INT 71
1162: PPUSH
1163: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
1167: LD_ADDR_EXP 17
1171: PUSH
1172: LD_STRING Grishko
1174: PPUSH
1175: LD_INT 0
1177: PPUSH
1178: LD_STRING 
1180: PPUSH
1181: CALL 30794 0 3
1185: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
1186: LD_EXP 17
1190: PPUSH
1191: LD_INT 207
1193: PPUSH
1194: LD_INT 106
1196: PPUSH
1197: LD_INT 0
1199: PPUSH
1200: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
1204: LD_EXP 17
1208: PPUSH
1209: LD_INT 209
1211: PPUSH
1212: LD_INT 106
1214: PPUSH
1215: CALL_OW 118
// hc_importance := 0 ;
1219: LD_ADDR_OWVAR 32
1223: PUSH
1224: LD_INT 0
1226: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
1227: LD_ADDR_VAR 0 7
1231: PUSH
1232: LD_INT 22
1234: PUSH
1235: LD_INT 6
1237: PUSH
1238: EMPTY
1239: LIST
1240: LIST
1241: PUSH
1242: LD_INT 30
1244: PUSH
1245: LD_INT 32
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PPUSH
1256: CALL_OW 69
1260: ST_TO_ADDR
// for i in tmp do
1261: LD_ADDR_VAR 0 2
1265: PUSH
1266: LD_VAR 0 7
1270: PUSH
1271: FOR_IN
1272: IFFALSE 1309
// PlaceWeaponTurret ( i , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] ) ;
1274: LD_VAR 0 2
1278: PPUSH
1279: LD_INT 44
1281: PUSH
1282: LD_INT 43
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PUSH
1289: LD_VAR 0 2
1293: PUSH
1294: LD_INT 2
1296: MOD
1297: PUSH
1298: LD_INT 1
1300: PLUS
1301: ARRAY
1302: PPUSH
1303: CALL_OW 431
1307: GO 1271
1309: POP
1310: POP
// for i := 1 to Difficulty do
1311: LD_ADDR_VAR 0 2
1315: PUSH
1316: DOUBLE
1317: LD_INT 1
1319: DEC
1320: ST_TO_ADDR
1321: LD_OWVAR 67
1325: PUSH
1326: FOR_TO
1327: IFFALSE 1382
// begin PrepareHuman ( false , 2 , 2 ) ;
1329: LD_INT 0
1331: PPUSH
1332: LD_INT 2
1334: PPUSH
1335: LD_INT 2
1337: PPUSH
1338: CALL_OW 380
// un := CreateHuman ;
1342: LD_ADDR_VAR 0 3
1346: PUSH
1347: CALL_OW 44
1351: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
1352: LD_VAR 0 3
1356: PPUSH
1357: LD_INT 71
1359: PPUSH
1360: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1364: LD_ADDR_EXP 20
1368: PUSH
1369: LD_EXP 20
1373: PUSH
1374: LD_VAR 0 3
1378: UNION
1379: ST_TO_ADDR
// end ;
1380: GO 1326
1382: POP
1383: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1384: LD_ADDR_VAR 0 2
1388: PUSH
1389: DOUBLE
1390: LD_INT 1
1392: DEC
1393: ST_TO_ADDR
1394: LD_INT 5
1396: PUSH
1397: LD_INT 6
1399: PUSH
1400: LD_INT 6
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_OWVAR 67
1412: ARRAY
1413: PUSH
1414: FOR_TO
1415: IFFALSE 1489
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
1417: LD_INT 0
1419: PPUSH
1420: LD_INT 1
1422: PPUSH
1423: LD_INT 2
1425: PUSH
1426: LD_INT 3
1428: PUSH
1429: LD_INT 4
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: LIST
1436: PUSH
1437: LD_OWVAR 67
1441: ARRAY
1442: PPUSH
1443: CALL_OW 380
// un := CreateHuman ;
1447: LD_ADDR_VAR 0 3
1451: PUSH
1452: CALL_OW 44
1456: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
1457: LD_VAR 0 3
1461: PPUSH
1462: LD_VAR 0 5
1466: PPUSH
1467: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1471: LD_ADDR_EXP 20
1475: PUSH
1476: LD_EXP 20
1480: PUSH
1481: LD_VAR 0 3
1485: UNION
1486: ST_TO_ADDR
// end ;
1487: GO 1414
1489: POP
1490: POP
// for i := 1 to 3 do
1491: LD_ADDR_VAR 0 2
1495: PUSH
1496: DOUBLE
1497: LD_INT 1
1499: DEC
1500: ST_TO_ADDR
1501: LD_INT 3
1503: PUSH
1504: FOR_TO
1505: IFFALSE 1560
// begin PrepareHuman ( false , 3 , 3 ) ;
1507: LD_INT 0
1509: PPUSH
1510: LD_INT 3
1512: PPUSH
1513: LD_INT 3
1515: PPUSH
1516: CALL_OW 380
// un := CreateHuman ;
1520: LD_ADDR_VAR 0 3
1524: PUSH
1525: CALL_OW 44
1529: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
1530: LD_VAR 0 3
1534: PPUSH
1535: LD_INT 92
1537: PPUSH
1538: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1542: LD_ADDR_EXP 20
1546: PUSH
1547: LD_EXP 20
1551: PUSH
1552: LD_VAR 0 3
1556: UNION
1557: ST_TO_ADDR
// end ;
1558: GO 1504
1560: POP
1561: POP
// for i := 1 to 2 do
1562: LD_ADDR_VAR 0 2
1566: PUSH
1567: DOUBLE
1568: LD_INT 1
1570: DEC
1571: ST_TO_ADDR
1572: LD_INT 2
1574: PUSH
1575: FOR_TO
1576: IFFALSE 1631
// begin PrepareHuman ( false , 4 , 3 ) ;
1578: LD_INT 0
1580: PPUSH
1581: LD_INT 4
1583: PPUSH
1584: LD_INT 3
1586: PPUSH
1587: CALL_OW 380
// un := CreateHuman ;
1591: LD_ADDR_VAR 0 3
1595: PUSH
1596: CALL_OW 44
1600: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
1601: LD_VAR 0 3
1605: PPUSH
1606: LD_INT 83
1608: PPUSH
1609: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1613: LD_ADDR_EXP 20
1617: PUSH
1618: LD_EXP 20
1622: PUSH
1623: LD_VAR 0 3
1627: UNION
1628: ST_TO_ADDR
// end ;
1629: GO 1575
1631: POP
1632: POP
// for i := 1 to 5 do
1633: LD_ADDR_VAR 0 2
1637: PUSH
1638: DOUBLE
1639: LD_INT 1
1641: DEC
1642: ST_TO_ADDR
1643: LD_INT 5
1645: PUSH
1646: FOR_TO
1647: IFFALSE 1704
// begin PrepareHuman ( false , 1 , 3 ) ;
1649: LD_INT 0
1651: PPUSH
1652: LD_INT 1
1654: PPUSH
1655: LD_INT 3
1657: PPUSH
1658: CALL_OW 380
// un := CreateHuman ;
1662: LD_ADDR_VAR 0 3
1666: PUSH
1667: CALL_OW 44
1671: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
1672: LD_VAR 0 3
1676: PPUSH
1677: LD_VAR 0 4
1681: PPUSH
1682: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
1686: LD_ADDR_EXP 22
1690: PUSH
1691: LD_EXP 22
1695: PUSH
1696: LD_VAR 0 3
1700: UNION
1701: ST_TO_ADDR
// end ;
1702: GO 1646
1704: POP
1705: POP
// russianCargo := [ ] ;
1706: LD_ADDR_EXP 25
1710: PUSH
1711: EMPTY
1712: ST_TO_ADDR
// for i := 1 to 2 do
1713: LD_ADDR_VAR 0 2
1717: PUSH
1718: DOUBLE
1719: LD_INT 1
1721: DEC
1722: ST_TO_ADDR
1723: LD_INT 2
1725: PUSH
1726: FOR_TO
1727: IFFALSE 1853
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
1729: LD_INT 21
1731: PPUSH
1732: LD_INT 1
1734: PPUSH
1735: LD_INT 1
1737: PPUSH
1738: LD_INT 51
1740: PPUSH
1741: LD_INT 100
1743: PPUSH
1744: CALL 35809 0 5
// un := CreateVehicle ;
1748: LD_ADDR_VAR 0 3
1752: PUSH
1753: CALL_OW 45
1757: ST_TO_ADDR
// russianCargo := russianCargo union un ;
1758: LD_ADDR_EXP 25
1762: PUSH
1763: LD_EXP 25
1767: PUSH
1768: LD_VAR 0 3
1772: UNION
1773: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
1774: LD_VAR 0 3
1778: PPUSH
1779: LD_INT 2
1781: PPUSH
1782: LD_INT 100
1784: PPUSH
1785: CALL_OW 290
// SetDir ( un , 4 ) ;
1789: LD_VAR 0 3
1793: PPUSH
1794: LD_INT 4
1796: PPUSH
1797: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
1801: LD_VAR 0 3
1805: PPUSH
1806: LD_INT 147
1808: PPUSH
1809: LD_INT 103
1811: PPUSH
1812: LD_INT 4
1814: PPUSH
1815: LD_INT 0
1817: PPUSH
1818: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
1822: LD_INT 0
1824: PPUSH
1825: LD_INT 1
1827: PPUSH
1828: LD_OWVAR 67
1832: PPUSH
1833: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1837: CALL_OW 44
1841: PPUSH
1842: LD_VAR 0 3
1846: PPUSH
1847: CALL_OW 52
// end ;
1851: GO 1726
1853: POP
1854: POP
// uc_side := 3 ;
1855: LD_ADDR_OWVAR 20
1859: PUSH
1860: LD_INT 3
1862: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
1863: LD_ADDR_EXP 19
1867: PUSH
1868: LD_STRING Burlak
1870: PPUSH
1871: LD_INT 0
1873: PPUSH
1874: LD_STRING 
1876: PPUSH
1877: CALL 30794 0 3
1881: ST_TO_ADDR
// ResetHc ;
1882: CALL 68787 0 0
// PrepareHuman ( false , 3 , 2 ) ;
1886: LD_INT 0
1888: PPUSH
1889: LD_INT 3
1891: PPUSH
1892: LD_INT 2
1894: PPUSH
1895: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ruBeriaCargo ) ;
1899: CALL_OW 44
1903: PPUSH
1904: LD_INT 180
1906: PPUSH
1907: CALL_OW 52
// if Difficulty > 1 then
1911: LD_OWVAR 67
1915: PUSH
1916: LD_INT 1
1918: GREATER
1919: IFFALSE 1977
// begin for i := 1 to 3 do
1921: LD_ADDR_VAR 0 2
1925: PUSH
1926: DOUBLE
1927: LD_INT 1
1929: DEC
1930: ST_TO_ADDR
1931: LD_INT 3
1933: PUSH
1934: FOR_TO
1935: IFFALSE 1975
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1937: LD_INT 0
1939: PPUSH
1940: LD_INT 1
1942: PPUSH
1943: LD_OWVAR 67
1947: PPUSH
1948: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 86 , 17 , 3 , false ) ;
1952: CALL_OW 44
1956: PPUSH
1957: LD_INT 86
1959: PPUSH
1960: LD_INT 17
1962: PPUSH
1963: LD_INT 3
1965: PPUSH
1966: LD_INT 0
1968: PPUSH
1969: CALL_OW 50
// end ;
1973: GO 1934
1975: POP
1976: POP
// end ; for i := 1 to 2 do
1977: LD_ADDR_VAR 0 2
1981: PUSH
1982: DOUBLE
1983: LD_INT 1
1985: DEC
1986: ST_TO_ADDR
1987: LD_INT 2
1989: PUSH
1990: FOR_TO
1991: IFFALSE 2031
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1993: LD_INT 0
1995: PPUSH
1996: LD_INT 1
1998: PPUSH
1999: LD_OWVAR 67
2003: PPUSH
2004: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 108 , 153 , 3 , false ) ;
2008: CALL_OW 44
2012: PPUSH
2013: LD_INT 108
2015: PPUSH
2016: LD_INT 153
2018: PPUSH
2019: LD_INT 3
2021: PPUSH
2022: LD_INT 0
2024: PPUSH
2025: CALL_OW 50
// end ;
2029: GO 1990
2031: POP
2032: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
2033: LD_ADDR_VAR 0 7
2037: PUSH
2038: LD_INT 22
2040: PUSH
2041: LD_INT 3
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PUSH
2048: LD_INT 30
2050: PUSH
2051: LD_INT 32
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PPUSH
2062: CALL_OW 69
2066: ST_TO_ADDR
// for i := 1 to tmp do
2067: LD_ADDR_VAR 0 2
2071: PUSH
2072: DOUBLE
2073: LD_INT 1
2075: DEC
2076: ST_TO_ADDR
2077: LD_VAR 0 7
2081: PUSH
2082: FOR_TO
2083: IFFALSE 2191
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
2085: LD_INT 0
2087: PPUSH
2088: LD_INT 1
2090: PPUSH
2091: LD_OWVAR 67
2095: PUSH
2096: LD_INT 1
2098: PLUS
2099: PPUSH
2100: CALL_OW 380
// un := CreateHuman ;
2104: LD_ADDR_VAR 0 3
2108: PUSH
2109: CALL_OW 44
2113: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
2114: LD_VAR 0 3
2118: PPUSH
2119: LD_VAR 0 7
2123: PUSH
2124: LD_VAR 0 2
2128: ARRAY
2129: PPUSH
2130: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2134: LD_ADDR_EXP 21
2138: PUSH
2139: LD_EXP 21
2143: PUSH
2144: LD_VAR 0 3
2148: UNION
2149: ST_TO_ADDR
// PlaceWeaponTurret ( tmp [ i ] , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] ) ;
2150: LD_VAR 0 7
2154: PUSH
2155: LD_VAR 0 2
2159: ARRAY
2160: PPUSH
2161: LD_INT 44
2163: PUSH
2164: LD_INT 43
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PUSH
2171: LD_VAR 0 2
2175: PUSH
2176: LD_INT 2
2178: MOD
2179: PUSH
2180: LD_INT 1
2182: PLUS
2183: ARRAY
2184: PPUSH
2185: CALL_OW 431
// end ;
2189: GO 2082
2191: POP
2192: POP
// for i := 1 to Difficulty + 1 do
2193: LD_ADDR_VAR 0 2
2197: PUSH
2198: DOUBLE
2199: LD_INT 1
2201: DEC
2202: ST_TO_ADDR
2203: LD_OWVAR 67
2207: PUSH
2208: LD_INT 1
2210: PLUS
2211: PUSH
2212: FOR_TO
2213: IFFALSE 2304
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
2215: LD_INT 0
2217: PPUSH
2218: LD_INT 1
2220: PPUSH
2221: LD_OWVAR 67
2225: PUSH
2226: LD_INT 1
2228: PLUS
2229: PPUSH
2230: CALL_OW 380
// un := CreateHuman ;
2234: LD_ADDR_VAR 0 3
2238: PUSH
2239: CALL_OW 44
2243: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2244: LD_VAR 0 3
2248: PPUSH
2249: LD_INT 22
2251: PUSH
2252: LD_INT 3
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 30
2261: PUSH
2262: LD_INT 5
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PPUSH
2273: CALL_OW 69
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: PPUSH
2282: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2286: LD_ADDR_EXP 21
2290: PUSH
2291: LD_EXP 21
2295: PUSH
2296: LD_VAR 0 3
2300: UNION
2301: ST_TO_ADDR
// end ;
2302: GO 2212
2304: POP
2305: POP
// for i := 1 to 2 do
2306: LD_ADDR_VAR 0 2
2310: PUSH
2311: DOUBLE
2312: LD_INT 1
2314: DEC
2315: ST_TO_ADDR
2316: LD_INT 2
2318: PUSH
2319: FOR_TO
2320: IFFALSE 2407
// begin PrepareHuman ( false , 4 , Difficulty ) ;
2322: LD_INT 0
2324: PPUSH
2325: LD_INT 4
2327: PPUSH
2328: LD_OWVAR 67
2332: PPUSH
2333: CALL_OW 380
// un := CreateHuman ;
2337: LD_ADDR_VAR 0 3
2341: PUSH
2342: CALL_OW 44
2346: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
2347: LD_VAR 0 3
2351: PPUSH
2352: LD_INT 22
2354: PUSH
2355: LD_INT 3
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PUSH
2362: LD_INT 30
2364: PUSH
2365: LD_INT 7
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PPUSH
2376: CALL_OW 69
2380: PUSH
2381: LD_INT 1
2383: ARRAY
2384: PPUSH
2385: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2389: LD_ADDR_EXP 21
2393: PUSH
2394: LD_EXP 21
2398: PUSH
2399: LD_VAR 0 3
2403: UNION
2404: ST_TO_ADDR
// end ;
2405: GO 2319
2407: POP
2408: POP
// for i := 1 to Difficulty do
2409: LD_ADDR_VAR 0 2
2413: PUSH
2414: DOUBLE
2415: LD_INT 1
2417: DEC
2418: ST_TO_ADDR
2419: LD_OWVAR 67
2423: PUSH
2424: FOR_TO
2425: IFFALSE 2482
// begin PrepareHuman ( false , 2 , Difficulty ) ;
2427: LD_INT 0
2429: PPUSH
2430: LD_INT 2
2432: PPUSH
2433: LD_OWVAR 67
2437: PPUSH
2438: CALL_OW 380
// un := CreateHuman ;
2442: LD_ADDR_VAR 0 3
2446: PUSH
2447: CALL_OW 44
2451: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
2452: LD_VAR 0 3
2456: PPUSH
2457: LD_INT 106
2459: PPUSH
2460: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2464: LD_ADDR_EXP 21
2468: PUSH
2469: LD_EXP 21
2473: PUSH
2474: LD_VAR 0 3
2478: UNION
2479: ST_TO_ADDR
// end ;
2480: GO 2424
2482: POP
2483: POP
// for i := 1 to 3 do
2484: LD_ADDR_VAR 0 2
2488: PUSH
2489: DOUBLE
2490: LD_INT 1
2492: DEC
2493: ST_TO_ADDR
2494: LD_INT 3
2496: PUSH
2497: FOR_TO
2498: IFFALSE 2620
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
2500: LD_ADDR_VAR 0 6
2504: PUSH
2505: LD_INT 22
2507: PUSH
2508: LD_INT 3
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: PUSH
2515: LD_INT 30
2517: PUSH
2518: LD_INT 31
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PPUSH
2529: CALL_OW 69
2533: PUSH
2534: LD_VAR 0 2
2538: ARRAY
2539: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
2540: LD_INT 0
2542: PPUSH
2543: LD_INT 1
2545: PPUSH
2546: LD_OWVAR 67
2550: PPUSH
2551: CALL_OW 380
// un := CreateHuman ;
2555: LD_ADDR_VAR 0 3
2559: PUSH
2560: CALL_OW 44
2564: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
2565: LD_VAR 0 3
2569: PPUSH
2570: LD_VAR 0 6
2574: PPUSH
2575: CALL_OW 254
2579: PUSH
2580: LD_INT 3
2582: PLUS
2583: PPUSH
2584: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
2588: LD_VAR 0 3
2592: PPUSH
2593: LD_VAR 0 6
2597: PPUSH
2598: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2602: LD_ADDR_EXP 21
2606: PUSH
2607: LD_EXP 21
2611: PUSH
2612: LD_VAR 0 3
2616: UNION
2617: ST_TO_ADDR
// end ;
2618: GO 2497
2620: POP
2621: POP
// russianOmicronAttackers := [ ] ;
2622: LD_ADDR_EXP 24
2626: PUSH
2627: EMPTY
2628: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2629: LD_ADDR_VAR 0 2
2633: PUSH
2634: DOUBLE
2635: LD_INT 1
2637: DEC
2638: ST_TO_ADDR
2639: LD_INT 4
2641: PUSH
2642: LD_INT 5
2644: PUSH
2645: LD_INT 6
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: LIST
2652: PUSH
2653: LD_OWVAR 67
2657: ARRAY
2658: PUSH
2659: FOR_TO
2660: IFFALSE 2878
// begin PrepareVehicle ( [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
2662: LD_INT 21
2664: PUSH
2665: LD_INT 23
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: PUSH
2672: LD_VAR 0 2
2676: PUSH
2677: LD_INT 2
2679: MOD
2680: PUSH
2681: LD_INT 1
2683: PLUS
2684: ARRAY
2685: PPUSH
2686: LD_INT 1
2688: PPUSH
2689: LD_INT 1
2691: PPUSH
2692: LD_INT 43
2694: PUSH
2695: LD_INT 44
2697: PUSH
2698: LD_INT 42
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: LIST
2705: PUSH
2706: LD_VAR 0 2
2710: PUSH
2711: LD_INT 3
2713: MOD
2714: PUSH
2715: LD_INT 1
2717: PLUS
2718: ARRAY
2719: PPUSH
2720: LD_INT 100
2722: PPUSH
2723: CALL 35809 0 5
// un := CreateVehicle ;
2727: LD_ADDR_VAR 0 3
2731: PUSH
2732: CALL_OW 45
2736: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
2737: LD_VAR 0 3
2741: PPUSH
2742: LD_INT 0
2744: PUSH
2745: LD_INT 5
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: PUSH
2752: LD_INT 1
2754: PPUSH
2755: LD_INT 2
2757: PPUSH
2758: CALL_OW 12
2762: ARRAY
2763: PPUSH
2764: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
2768: LD_ADDR_EXP 24
2772: PUSH
2773: LD_EXP 24
2777: PUSH
2778: LD_VAR 0 3
2782: UNION
2783: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
2784: LD_VAR 0 3
2788: PPUSH
2789: LD_INT 127
2791: PPUSH
2792: LD_INT 89
2794: PPUSH
2795: LD_INT 7
2797: PPUSH
2798: LD_INT 0
2800: PPUSH
2801: CALL_OW 50
// uc_side := 3 ;
2805: LD_ADDR_OWVAR 20
2809: PUSH
2810: LD_INT 3
2812: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
2813: LD_INT 0
2815: PPUSH
2816: LD_INT 3
2818: PPUSH
2819: LD_INT 3
2821: PPUSH
2822: CALL_OW 380
// un := CreateHuman ;
2826: LD_ADDR_VAR 0 3
2830: PUSH
2831: CALL_OW 44
2835: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
2836: LD_ADDR_EXP 24
2840: PUSH
2841: LD_EXP 24
2845: PUSH
2846: LD_VAR 0 3
2850: UNION
2851: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
2852: LD_VAR 0 3
2856: PPUSH
2857: LD_EXP 24
2861: PUSH
2862: LD_EXP 24
2866: PUSH
2867: LD_INT 1
2869: MINUS
2870: ARRAY
2871: PPUSH
2872: CALL_OW 52
// end ;
2876: GO 2659
2878: POP
2879: POP
// for i := 1 to 3 do
2880: LD_ADDR_VAR 0 2
2884: PUSH
2885: DOUBLE
2886: LD_INT 1
2888: DEC
2889: ST_TO_ADDR
2890: LD_INT 3
2892: PUSH
2893: FOR_TO
2894: IFFALSE 2960
// begin PrepareHuman ( false , 1 , Difficulty ) ;
2896: LD_INT 0
2898: PPUSH
2899: LD_INT 1
2901: PPUSH
2902: LD_OWVAR 67
2906: PPUSH
2907: CALL_OW 380
// un := CreateHuman ;
2911: LD_ADDR_VAR 0 3
2915: PUSH
2916: CALL_OW 44
2920: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
2921: LD_ADDR_EXP 24
2925: PUSH
2926: LD_EXP 24
2930: PUSH
2931: LD_VAR 0 3
2935: UNION
2936: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
2937: LD_VAR 0 3
2941: PPUSH
2942: LD_INT 91
2944: PPUSH
2945: LD_INT 60
2947: PPUSH
2948: LD_INT 3
2950: PPUSH
2951: LD_INT 0
2953: PPUSH
2954: CALL_OW 50
// end ;
2958: GO 2893
2960: POP
2961: POP
// end ;
2962: LD_VAR 0 1
2966: RET
// every 0 0$3 do var i ;
2967: GO 2969
2969: DISABLE
2970: LD_INT 0
2972: PPUSH
// begin for i := 1 to 4 do
2973: LD_ADDR_VAR 0 1
2977: PUSH
2978: DOUBLE
2979: LD_INT 1
2981: DEC
2982: ST_TO_ADDR
2983: LD_INT 4
2985: PUSH
2986: FOR_TO
2987: IFFALSE 3006
// ComExitBuilding ( grishkoSquad [ i ] ) ;
2989: LD_EXP 22
2993: PUSH
2994: LD_VAR 0 1
2998: ARRAY
2999: PPUSH
3000: CALL_OW 122
3004: GO 2986
3006: POP
3007: POP
// wait ( 3 ) ;
3008: LD_INT 3
3010: PPUSH
3011: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
3015: LD_EXP 22
3019: PUSH
3020: LD_INT 1
3022: ARRAY
3023: PPUSH
3024: LD_INT 22
3026: PUSH
3027: LD_INT 6
3029: PUSH
3030: EMPTY
3031: LIST
3032: LIST
3033: PUSH
3034: LD_INT 30
3036: PUSH
3037: LD_INT 31
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PPUSH
3048: CALL_OW 69
3052: PPUSH
3053: LD_EXP 22
3057: PUSH
3058: LD_INT 1
3060: ARRAY
3061: PPUSH
3062: CALL_OW 74
3066: PPUSH
3067: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
3071: LD_EXP 22
3075: PUSH
3076: LD_INT 2
3078: ARRAY
3079: PPUSH
3080: LD_INT 211
3082: PPUSH
3083: LD_INT 107
3085: PPUSH
3086: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
3090: LD_EXP 22
3094: PUSH
3095: LD_INT 2
3097: ARRAY
3098: PPUSH
3099: LD_INT 209
3101: PPUSH
3102: LD_INT 106
3104: PPUSH
3105: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
3109: LD_EXP 22
3113: PUSH
3114: LD_INT 3
3116: ARRAY
3117: PPUSH
3118: LD_INT 209
3120: PPUSH
3121: LD_INT 103
3123: PPUSH
3124: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
3128: LD_EXP 22
3132: PUSH
3133: LD_INT 3
3135: ARRAY
3136: PPUSH
3137: LD_INT 209
3139: PPUSH
3140: LD_INT 106
3142: PPUSH
3143: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
3147: LD_EXP 22
3151: PUSH
3152: LD_INT 4
3154: ARRAY
3155: PPUSH
3156: LD_INT 227
3158: PPUSH
3159: LD_INT 117
3161: PPUSH
3162: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
3166: LD_EXP 22
3170: PUSH
3171: LD_INT 4
3173: ARRAY
3174: PPUSH
3175: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
3179: LD_INT 700
3181: PPUSH
3182: CALL_OW 67
// for i := 3 downto 2 do
3186: LD_ADDR_VAR 0 1
3190: PUSH
3191: DOUBLE
3192: LD_INT 3
3194: INC
3195: ST_TO_ADDR
3196: LD_INT 2
3198: PUSH
3199: FOR_DOWNTO
3200: IFFALSE 3367
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
3202: LD_EXP 22
3206: PUSH
3207: LD_VAR 0 1
3211: ARRAY
3212: PPUSH
3213: LD_INT 200
3215: PPUSH
3216: LD_INT 91
3218: PPUSH
3219: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3223: LD_EXP 22
3227: PUSH
3228: LD_VAR 0 1
3232: ARRAY
3233: PPUSH
3234: LD_INT 210
3236: PPUSH
3237: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
3241: LD_EXP 22
3245: PUSH
3246: LD_VAR 0 1
3250: ARRAY
3251: PPUSH
3252: LD_INT 224
3254: PPUSH
3255: LD_INT 93
3257: PPUSH
3258: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3262: LD_EXP 22
3266: PUSH
3267: LD_VAR 0 1
3271: ARRAY
3272: PPUSH
3273: LD_INT 210
3275: PPUSH
3276: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
3280: LD_EXP 22
3284: PUSH
3285: LD_VAR 0 1
3289: ARRAY
3290: PPUSH
3291: LD_INT 239
3293: PPUSH
3294: LD_INT 123
3296: PPUSH
3297: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3301: LD_EXP 22
3305: PUSH
3306: LD_VAR 0 1
3310: ARRAY
3311: PPUSH
3312: LD_INT 210
3314: PPUSH
3315: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
3319: LD_EXP 22
3323: PUSH
3324: LD_VAR 0 1
3328: ARRAY
3329: PPUSH
3330: LD_INT 212
3332: PPUSH
3333: LD_INT 105
3335: PPUSH
3336: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
3340: LD_EXP 22
3344: PUSH
3345: LD_VAR 0 1
3349: ARRAY
3350: PPUSH
3351: LD_INT 700
3353: PPUSH
3354: CALL_OW 202
// wait ( 0 0$30 ) ;
3358: LD_INT 1050
3360: PPUSH
3361: CALL_OW 67
// end ;
3365: GO 3199
3367: POP
3368: POP
// until not activeGrishkoAI ;
3369: LD_EXP 2
3373: NOT
3374: IFFALSE 3179
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
3376: LD_EXP 22
3380: PPUSH
3381: LD_INT 221
3383: PPUSH
3384: LD_INT 110
3386: PPUSH
3387: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
3391: LD_EXP 22
3395: PPUSH
3396: LD_INT 228
3398: PPUSH
3399: LD_INT 115
3401: PPUSH
3402: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
3406: LD_EXP 22
3410: PPUSH
3411: CALL_OW 200
// end ;
3415: PPOPN 1
3417: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
3418: LD_EXP 3
3422: IFFALSE 4056
3424: GO 3426
3426: DISABLE
3427: LD_INT 0
3429: PPUSH
3430: PPUSH
3431: PPUSH
3432: PPUSH
// begin uc_side := 6 ;
3433: LD_ADDR_OWVAR 20
3437: PUSH
3438: LD_INT 6
3440: ST_TO_ADDR
// uc_nation := 3 ;
3441: LD_ADDR_OWVAR 21
3445: PUSH
3446: LD_INT 3
3448: ST_TO_ADDR
// ResetHc ;
3449: CALL 68787 0 0
// for i := 1 to 3 do
3453: LD_ADDR_VAR 0 2
3457: PUSH
3458: DOUBLE
3459: LD_INT 1
3461: DEC
3462: ST_TO_ADDR
3463: LD_INT 3
3465: PUSH
3466: FOR_TO
3467: IFFALSE 3576
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
3469: LD_INT 0
3471: PPUSH
3472: LD_INT 1
3474: PPUSH
3475: LD_INT 2
3477: PUSH
3478: LD_INT 3
3480: PUSH
3481: LD_INT 4
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: LIST
3488: PUSH
3489: LD_OWVAR 67
3493: ARRAY
3494: PPUSH
3495: CALL_OW 380
// un := CreateHuman ;
3499: LD_ADDR_VAR 0 1
3503: PUSH
3504: CALL_OW 44
3508: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
3509: LD_ADDR_EXP 23
3513: PUSH
3514: LD_EXP 23
3518: PUSH
3519: LD_VAR 0 1
3523: UNION
3524: ST_TO_ADDR
// SetTag ( un , 1 ) ;
3525: LD_VAR 0 1
3529: PPUSH
3530: LD_INT 1
3532: PPUSH
3533: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
3537: LD_VAR 0 1
3541: PPUSH
3542: LD_INT 3
3544: PPUSH
3545: LD_INT 0
3547: PPUSH
3548: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
3552: LD_VAR 0 1
3556: PPUSH
3557: LD_INT 210
3559: PPUSH
3560: LD_INT 159
3562: PPUSH
3563: CALL_OW 111
// wait ( 0 0$2 ) ;
3567: LD_INT 70
3569: PPUSH
3570: CALL_OW 67
// end ;
3574: GO 3466
3576: POP
3577: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 208 , 42 ] ] ] ;
3578: LD_ADDR_VAR 0 4
3582: PUSH
3583: LD_INT 172
3585: PUSH
3586: LD_INT 76
3588: PUSH
3589: EMPTY
3590: LIST
3591: LIST
3592: PUSH
3593: LD_INT 150
3595: PUSH
3596: LD_INT 38
3598: PUSH
3599: EMPTY
3600: LIST
3601: LIST
3602: PUSH
3603: LD_INT 148
3605: PUSH
3606: LD_INT 9
3608: PUSH
3609: EMPTY
3610: LIST
3611: LIST
3612: PUSH
3613: LD_INT 165
3615: PUSH
3616: LD_INT 38
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: PUSH
3629: LD_INT 191
3631: PUSH
3632: LD_INT 77
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: LD_INT 168
3641: PUSH
3642: LD_INT 42
3644: PUSH
3645: EMPTY
3646: LIST
3647: LIST
3648: PUSH
3649: LD_INT 166
3651: PUSH
3652: LD_INT 11
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: PUSH
3659: LD_INT 151
3661: PUSH
3662: LD_INT 12
3664: PUSH
3665: EMPTY
3666: LIST
3667: LIST
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: PUSH
3675: LD_INT 221
3677: PUSH
3678: LD_INT 88
3680: PUSH
3681: EMPTY
3682: LIST
3683: LIST
3684: PUSH
3685: LD_INT 217
3687: PUSH
3688: LD_INT 64
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: PUSH
3695: LD_INT 208
3697: PUSH
3698: LD_INT 42
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: LIST
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: LIST
3714: ST_TO_ADDR
// repeat wait ( 0 0$5 ) ;
3715: LD_INT 175
3717: PPUSH
3718: CALL_OW 67
// for i := 1 to patrol do
3722: LD_ADDR_VAR 0 2
3726: PUSH
3727: DOUBLE
3728: LD_INT 1
3730: DEC
3731: ST_TO_ADDR
3732: LD_VAR 0 4
3736: PUSH
3737: FOR_TO
3738: IFFALSE 4020
// begin if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
3740: LD_EXP 23
3744: PUSH
3745: LD_VAR 0 2
3749: ARRAY
3750: PPUSH
3751: CALL_OW 256
3755: PUSH
3756: LD_INT 990
3758: LESS
3759: PUSH
3760: LD_EXP 23
3764: PUSH
3765: LD_VAR 0 2
3769: ARRAY
3770: PPUSH
3771: CALL_OW 110
3775: PUSH
3776: LD_INT 1
3778: EQUAL
3779: AND
3780: IFFALSE 3808
// begin spottedByPatrol := true ;
3782: LD_ADDR_EXP 4
3786: PUSH
3787: LD_INT 1
3789: ST_TO_ADDR
// SetTag ( russianPatrol [ i ] , 2 ) ;
3790: LD_EXP 23
3794: PUSH
3795: LD_VAR 0 2
3799: ARRAY
3800: PPUSH
3801: LD_INT 2
3803: PPUSH
3804: CALL_OW 109
// end ; if GetTag ( russianPatrol [ i ] ) = 2 then
3808: LD_EXP 23
3812: PUSH
3813: LD_VAR 0 2
3817: ARRAY
3818: PPUSH
3819: CALL_OW 110
3823: PUSH
3824: LD_INT 2
3826: EQUAL
3827: IFFALSE 3918
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
3829: LD_EXP 23
3833: PUSH
3834: LD_VAR 0 2
3838: ARRAY
3839: PPUSH
3840: LD_INT 166
3842: PPUSH
3843: LD_INT 101
3845: PPUSH
3846: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
3850: LD_EXP 23
3854: PUSH
3855: LD_VAR 0 2
3859: ARRAY
3860: PPUSH
3861: LD_INT 71
3863: PPUSH
3864: CALL_OW 296
3868: PUSH
3869: LD_INT 10
3871: LESS
3872: IFFALSE 3916
// begin kirovBaseSquad := kirovBaseSquad union russianPatrol [ i ] ;
3874: LD_ADDR_EXP 20
3878: PUSH
3879: LD_EXP 20
3883: PUSH
3884: LD_EXP 23
3888: PUSH
3889: LD_VAR 0 2
3893: ARRAY
3894: UNION
3895: ST_TO_ADDR
// russianPatrol := Delete ( russianPatrol , i ) ;
3896: LD_ADDR_EXP 23
3900: PUSH
3901: LD_EXP 23
3905: PPUSH
3906: LD_VAR 0 2
3910: PPUSH
3911: CALL_OW 3
3915: ST_TO_ADDR
// end ; continue ;
3916: GO 3737
// end ; if not HasTask ( russianPatrol [ i ] ) then
3918: LD_EXP 23
3922: PUSH
3923: LD_VAR 0 2
3927: ARRAY
3928: PPUSH
3929: CALL_OW 314
3933: NOT
3934: IFFALSE 4018
// for j in patrol [ i ] do
3936: LD_ADDR_VAR 0 3
3940: PUSH
3941: LD_VAR 0 4
3945: PUSH
3946: LD_VAR 0 2
3950: ARRAY
3951: PUSH
3952: FOR_IN
3953: IFFALSE 4016
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
3955: LD_EXP 23
3959: PUSH
3960: LD_VAR 0 2
3964: ARRAY
3965: PPUSH
3966: LD_INT 35
3968: PPUSH
3969: LD_INT 175
3971: PPUSH
3972: CALL_OW 12
3976: PPUSH
3977: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
3981: LD_EXP 23
3985: PUSH
3986: LD_VAR 0 2
3990: ARRAY
3991: PPUSH
3992: LD_VAR 0 3
3996: PUSH
3997: LD_INT 1
3999: ARRAY
4000: PPUSH
4001: LD_VAR 0 3
4005: PUSH
4006: LD_INT 2
4008: ARRAY
4009: PPUSH
4010: CALL_OW 174
// end ;
4014: GO 3952
4016: POP
4017: POP
// end ;
4018: GO 3737
4020: POP
4021: POP
// until not russianPatrol or russianAlert ;
4022: LD_EXP 23
4026: NOT
4027: PUSH
4028: LD_EXP 5
4032: OR
4033: IFFALSE 3715
// if russianPatrol then
4035: LD_EXP 23
4039: IFFALSE 4056
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
4041: LD_EXP 23
4045: PPUSH
4046: LD_INT 161
4048: PPUSH
4049: LD_INT 107
4051: PPUSH
4052: CALL_OW 114
// end ;
4056: PPOPN 4
4058: END
// every 0 0$1 trigger startAttackOnOmicron and not retreatFromOmicron do var i , filter , tmp , enemy , x , points , point ;
4059: LD_EXP 6
4063: PUSH
4064: LD_EXP 8
4068: NOT
4069: AND
4070: IFFALSE 4640
4072: GO 4074
4074: DISABLE
4075: LD_INT 0
4077: PPUSH
4078: PPUSH
4079: PPUSH
4080: PPUSH
4081: PPUSH
4082: PPUSH
4083: PPUSH
// begin enable ;
4084: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
4085: LD_ADDR_VAR 0 2
4089: PUSH
4090: LD_EXP 24
4094: PPUSH
4095: LD_INT 21
4097: PUSH
4098: LD_INT 2
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: PPUSH
4105: CALL_OW 72
4109: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 1 ] ) ;
4110: LD_ADDR_VAR 0 4
4114: PUSH
4115: LD_INT 22
4117: PUSH
4118: LD_INT 1
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: PPUSH
4125: CALL_OW 69
4129: ST_TO_ADDR
// points := [ [ 44 , 15 ] , [ 54 , 39 ] ] ;
4130: LD_ADDR_VAR 0 6
4134: PUSH
4135: LD_INT 44
4137: PUSH
4138: LD_INT 15
4140: PUSH
4141: EMPTY
4142: LIST
4143: LIST
4144: PUSH
4145: LD_INT 54
4147: PUSH
4148: LD_INT 39
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: ST_TO_ADDR
// for i in filter do
4159: LD_ADDR_VAR 0 1
4163: PUSH
4164: LD_VAR 0 2
4168: PUSH
4169: FOR_IN
4170: IFFALSE 4638
// begin tmp := IsDrivenBy ( i ) ;
4172: LD_ADDR_VAR 0 3
4176: PUSH
4177: LD_VAR 0 1
4181: PPUSH
4182: CALL_OW 311
4186: ST_TO_ADDR
// if not tmp then
4187: LD_VAR 0 3
4191: NOT
4192: IFFALSE 4196
// continue ;
4194: GO 4169
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
4196: LD_VAR 0 1
4200: PPUSH
4201: CALL_OW 261
4205: PUSH
4206: LD_INT 90
4208: GREATER
4209: PUSH
4210: LD_VAR 0 1
4214: PPUSH
4215: CALL_OW 110
4219: PUSH
4220: LD_INT 2
4222: EQUAL
4223: AND
4224: IFFALSE 4240
// SetTag ( i , 0 ) else
4226: LD_VAR 0 1
4230: PPUSH
4231: LD_INT 0
4233: PPUSH
4234: CALL_OW 109
4238: GO 4336
// if GetTag ( i ) = 2 then
4240: LD_VAR 0 1
4244: PPUSH
4245: CALL_OW 110
4249: PUSH
4250: LD_INT 2
4252: EQUAL
4253: IFFALSE 4336
// begin x := rand ( 1 , 2 ) ;
4255: LD_ADDR_VAR 0 5
4259: PUSH
4260: LD_INT 1
4262: PPUSH
4263: LD_INT 2
4265: PPUSH
4266: CALL_OW 12
4270: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
4271: LD_VAR 0 1
4275: PPUSH
4276: LD_EXP 25
4280: PUSH
4281: LD_VAR 0 5
4285: ARRAY
4286: PPUSH
4287: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
4291: LD_EXP 25
4295: PUSH
4296: LD_VAR 0 5
4300: ARRAY
4301: PPUSH
4302: LD_INT 2
4304: PPUSH
4305: CALL_OW 289
4309: PUSH
4310: LD_INT 20
4312: LESS
4313: IFFALSE 4336
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
4315: LD_EXP 25
4319: PUSH
4320: LD_VAR 0 5
4324: ARRAY
4325: PPUSH
4326: LD_INT 2
4328: PPUSH
4329: LD_INT 100
4331: PPUSH
4332: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
4336: LD_VAR 0 1
4340: PPUSH
4341: CALL_OW 256
4345: PUSH
4346: LD_INT 600
4348: GREATEREQUAL
4349: PUSH
4350: LD_VAR 0 1
4354: PPUSH
4355: CALL_OW 110
4359: NOT
4360: AND
4361: IFFALSE 4387
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4363: LD_VAR 0 1
4367: PPUSH
4368: LD_VAR 0 4
4372: PPUSH
4373: LD_VAR 0 1
4377: PPUSH
4378: CALL_OW 74
4382: PPUSH
4383: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
4387: LD_VAR 0 1
4391: PPUSH
4392: CALL_OW 256
4396: PUSH
4397: LD_INT 600
4399: LESS
4400: PUSH
4401: LD_VAR 0 1
4405: PPUSH
4406: CALL_OW 110
4410: NOT
4411: AND
4412: IFFALSE 4488
// begin SetTag ( i , 1 ) ;
4414: LD_VAR 0 1
4418: PPUSH
4419: LD_INT 1
4421: PPUSH
4422: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
4426: LD_ADDR_VAR 0 7
4430: PUSH
4431: LD_VAR 0 1
4435: PPUSH
4436: LD_VAR 0 6
4440: PPUSH
4441: CALL 71606 0 2
4445: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
4446: LD_VAR 0 1
4450: PPUSH
4451: LD_VAR 0 7
4455: PUSH
4456: LD_INT 1
4458: ARRAY
4459: PPUSH
4460: LD_VAR 0 7
4464: PUSH
4465: LD_INT 2
4467: ARRAY
4468: PPUSH
4469: CALL_OW 111
// AddComMoveXY ( i , 71 , 29 ) ;
4473: LD_VAR 0 1
4477: PPUSH
4478: LD_INT 71
4480: PPUSH
4481: LD_INT 29
4483: PPUSH
4484: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 71 , 29 ) < 9 and tmp then
4488: LD_VAR 0 1
4492: PPUSH
4493: CALL_OW 110
4497: PUSH
4498: LD_INT 1
4500: EQUAL
4501: PUSH
4502: LD_VAR 0 1
4506: PPUSH
4507: LD_INT 71
4509: PPUSH
4510: LD_INT 29
4512: PPUSH
4513: CALL_OW 297
4517: PUSH
4518: LD_INT 9
4520: LESS
4521: AND
4522: PUSH
4523: LD_VAR 0 3
4527: AND
4528: IFFALSE 4636
// begin ComExitVehicle ( tmp ) ;
4530: LD_VAR 0 3
4534: PPUSH
4535: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4539: LD_VAR 0 3
4543: PPUSH
4544: LD_VAR 0 1
4548: PPUSH
4549: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4553: LD_INT 35
4555: PPUSH
4556: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4560: LD_VAR 0 1
4564: PPUSH
4565: CALL_OW 256
4569: PUSH
4570: LD_INT 1000
4572: EQUAL
4573: IFFALSE 4553
// ComEnterUnit ( tmp , i ) ;
4575: LD_VAR 0 3
4579: PPUSH
4580: LD_VAR 0 1
4584: PPUSH
4585: CALL_OW 120
// if GetFuel ( i ) <= 90 and russianCargo then
4589: LD_VAR 0 1
4593: PPUSH
4594: CALL_OW 261
4598: PUSH
4599: LD_INT 90
4601: LESSEQUAL
4602: PUSH
4603: LD_EXP 25
4607: AND
4608: IFFALSE 4624
// SetTag ( i , 2 ) else
4610: LD_VAR 0 1
4614: PPUSH
4615: LD_INT 2
4617: PPUSH
4618: CALL_OW 109
4622: GO 4636
// SetTag ( i , 0 ) ;
4624: LD_VAR 0 1
4628: PPUSH
4629: LD_INT 0
4631: PPUSH
4632: CALL_OW 109
// end ; end ;
4636: GO 4169
4638: POP
4639: POP
// end ;
4640: PPOPN 7
4642: END
// every 0 0$30 trigger startAttackOnOmicron and not retreatFromOmicron and russianOmicronAttackers < [ 12 , 14 , 16 ] [ Difficulty ] do
4643: LD_EXP 6
4647: PUSH
4648: LD_EXP 8
4652: NOT
4653: AND
4654: PUSH
4655: LD_EXP 24
4659: PUSH
4660: LD_INT 12
4662: PUSH
4663: LD_INT 14
4665: PUSH
4666: LD_INT 16
4668: PUSH
4669: EMPTY
4670: LIST
4671: LIST
4672: LIST
4673: PUSH
4674: LD_OWVAR 67
4678: ARRAY
4679: LESS
4680: AND
4681: IFFALSE 4694
4683: GO 4685
4685: DISABLE
// begin enable ;
4686: ENABLE
// ProduceNew ( 0 ) ;
4687: LD_INT 0
4689: PPUSH
4690: CALL 4695 0 1
// end ;
4694: END
// export function ProduceNew ( type ) ; var un ; begin
4695: LD_INT 0
4697: PPUSH
4698: PPUSH
// if tanksCounter < [ 7 , 12 , 15 ] [ Difficulty ] then
4699: LD_EXP 12
4703: PUSH
4704: LD_INT 7
4706: PUSH
4707: LD_INT 12
4709: PUSH
4710: LD_INT 15
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: LIST
4717: PUSH
4718: LD_OWVAR 67
4722: ARRAY
4723: LESS
4724: IFFALSE 4798
// begin uc_side := 3 ;
4726: LD_ADDR_OWVAR 20
4730: PUSH
4731: LD_INT 3
4733: ST_TO_ADDR
// uc_nation := 3 ;
4734: LD_ADDR_OWVAR 21
4738: PUSH
4739: LD_INT 3
4741: ST_TO_ADDR
// ResetHc ;
4742: CALL 68787 0 0
// PrepareHuman ( false , 3 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4746: LD_INT 0
4748: PPUSH
4749: LD_INT 3
4751: PPUSH
4752: LD_INT 3
4754: PUSH
4755: LD_INT 4
4757: PUSH
4758: LD_INT 5
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: LIST
4765: PUSH
4766: LD_OWVAR 67
4770: ARRAY
4771: PPUSH
4772: CALL_OW 380
// un := CreateHuman ;
4776: LD_ADDR_VAR 0 3
4780: PUSH
4781: CALL_OW 44
4785: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruBeriaFac ) ;
4786: LD_VAR 0 3
4790: PPUSH
4791: LD_INT 143
4793: PPUSH
4794: CALL_OW 52
// end ; if type = 1 then
4798: LD_VAR 0 1
4802: PUSH
4803: LD_INT 1
4805: EQUAL
4806: IFFALSE 4829
// AddComConstruct ( ruBeriaFac , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) else
4808: LD_INT 143
4810: PPUSH
4811: LD_INT 21
4813: PPUSH
4814: LD_INT 1
4816: PPUSH
4817: LD_INT 1
4819: PPUSH
4820: LD_INT 51
4822: PPUSH
4823: CALL_OW 185
4827: GO 4908
// AddComConstruct ( ruBeriaFac , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , Difficulty + 1 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 4 ) ] ) ;
4829: LD_INT 143
4831: PPUSH
4832: LD_INT 21
4834: PUSH
4835: LD_INT 22
4837: PUSH
4838: LD_INT 23
4840: PUSH
4841: LD_INT 24
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: PUSH
4850: LD_INT 1
4852: PPUSH
4853: LD_OWVAR 67
4857: PUSH
4858: LD_INT 1
4860: PLUS
4861: PPUSH
4862: CALL_OW 12
4866: ARRAY
4867: PPUSH
4868: LD_INT 1
4870: PPUSH
4871: LD_INT 1
4873: PPUSH
4874: LD_INT 44
4876: PUSH
4877: LD_INT 44
4879: PUSH
4880: LD_INT 43
4882: PUSH
4883: LD_INT 42
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: PUSH
4892: LD_INT 1
4894: PPUSH
4895: LD_INT 4
4897: PPUSH
4898: CALL_OW 12
4902: ARRAY
4903: PPUSH
4904: CALL_OW 185
// end ;
4908: LD_VAR 0 2
4912: RET
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
4913: LD_EXP 8
4917: IFFALSE 5119
4919: GO 4921
4921: DISABLE
4922: LD_INT 0
4924: PPUSH
4925: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
4926: LD_EXP 25
4930: PPUSH
4931: LD_INT 79
4933: PPUSH
4934: LD_INT 155
4936: PPUSH
4937: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
4941: LD_EXP 25
4945: PPUSH
4946: LD_INT 4
4948: PPUSH
4949: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
4953: LD_ADDR_VAR 0 2
4957: PUSH
4958: LD_EXP 24
4962: PPUSH
4963: LD_INT 50
4965: PUSH
4966: EMPTY
4967: LIST
4968: PPUSH
4969: CALL_OW 72
4973: ST_TO_ADDR
// for i in tmp do
4974: LD_ADDR_VAR 0 1
4978: PUSH
4979: LD_VAR 0 2
4983: PUSH
4984: FOR_IN
4985: IFFALSE 5019
// begin ComAgressiveMove ( i , 123 , 60 ) ;
4987: LD_VAR 0 1
4991: PPUSH
4992: LD_INT 123
4994: PPUSH
4995: LD_INT 60
4997: PPUSH
4998: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
5002: LD_VAR 0 1
5006: PPUSH
5007: LD_INT 153
5009: PPUSH
5010: LD_INT 103
5012: PPUSH
5013: CALL_OW 174
// end ;
5017: GO 4984
5019: POP
5020: POP
// repeat wait ( 0 0$1 ) ;
5021: LD_INT 35
5023: PPUSH
5024: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5028: LD_ADDR_VAR 0 2
5032: PUSH
5033: LD_EXP 24
5037: PPUSH
5038: LD_INT 50
5040: PUSH
5041: EMPTY
5042: LIST
5043: PPUSH
5044: CALL_OW 72
5048: ST_TO_ADDR
// for i in tmp do
5049: LD_ADDR_VAR 0 1
5053: PUSH
5054: LD_VAR 0 2
5058: PUSH
5059: FOR_IN
5060: IFFALSE 5110
// if not HasTask ( i ) then
5062: LD_VAR 0 1
5066: PPUSH
5067: CALL_OW 314
5071: NOT
5072: IFFALSE 5108
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) until not tmp ;
5074: LD_VAR 0 1
5078: PPUSH
5079: LD_INT 81
5081: PUSH
5082: LD_INT 3
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: PPUSH
5089: CALL_OW 69
5093: PPUSH
5094: LD_VAR 0 1
5098: PPUSH
5099: CALL_OW 74
5103: PPUSH
5104: CALL_OW 115
5108: GO 5059
5110: POP
5111: POP
5112: LD_VAR 0 2
5116: NOT
5117: IFFALSE 5021
// end ;
5119: PPOPN 2
5121: END
// every 0 0$2 trigger FilterUnitsInArea ( eastKirovArea , [ f_enemy , 6 ] ) do
5122: LD_INT 5
5124: PPUSH
5125: LD_INT 81
5127: PUSH
5128: LD_INT 6
5130: PUSH
5131: EMPTY
5132: LIST
5133: LIST
5134: PPUSH
5135: CALL_OW 70
5139: IFFALSE 5152
5141: GO 5143
5143: DISABLE
// russianAlert := true ;
5144: LD_ADDR_EXP 5
5148: PUSH
5149: LD_INT 1
5151: ST_TO_ADDR
5152: END
// every 0 0$1 trigger IsOk ( Beria ) and GetSide ( Beria ) = 3 and GetResourceType ( GetBase ( Beria ) , mat_cans ) < 100 do
5153: LD_INT 106
5155: PPUSH
5156: CALL_OW 302
5160: PUSH
5161: LD_INT 106
5163: PPUSH
5164: CALL_OW 255
5168: PUSH
5169: LD_INT 3
5171: EQUAL
5172: AND
5173: PUSH
5174: LD_INT 106
5176: PPUSH
5177: CALL_OW 274
5181: PPUSH
5182: LD_INT 1
5184: PPUSH
5185: CALL_OW 275
5189: PUSH
5190: LD_INT 100
5192: LESS
5193: AND
5194: IFFALSE 5218
5196: GO 5198
5198: DISABLE
// begin enable ;
5199: ENABLE
// AddResourceType ( GetBase ( beria ) , mat_cans , 200 ) ;
5200: LD_INT 106
5202: PPUSH
5203: CALL_OW 274
5207: PPUSH
5208: LD_INT 1
5210: PPUSH
5211: LD_INT 200
5213: PPUSH
5214: CALL_OW 276
// end ;
5218: END
// every 0 0$1 do var i , un , tmp ;
5219: GO 5221
5221: DISABLE
5222: LD_INT 0
5224: PPUSH
5225: PPUSH
5226: PPUSH
// begin uc_side := 3 ;
5227: LD_ADDR_OWVAR 20
5231: PUSH
5232: LD_INT 3
5234: ST_TO_ADDR
// uc_nation := 3 ;
5235: LD_ADDR_OWVAR 21
5239: PUSH
5240: LD_INT 3
5242: ST_TO_ADDR
// tmp := [ ] ;
5243: LD_ADDR_VAR 0 3
5247: PUSH
5248: EMPTY
5249: ST_TO_ADDR
// for i := 1 to 2 do
5250: LD_ADDR_VAR 0 1
5254: PUSH
5255: DOUBLE
5256: LD_INT 1
5258: DEC
5259: ST_TO_ADDR
5260: LD_INT 2
5262: PUSH
5263: FOR_TO
5264: IFFALSE 5341
// begin PrepareHuman ( false , 2 , 2 ) ;
5266: LD_INT 0
5268: PPUSH
5269: LD_INT 2
5271: PPUSH
5272: LD_INT 2
5274: PPUSH
5275: CALL_OW 380
// un := CreateHuman ;
5279: LD_ADDR_VAR 0 2
5283: PUSH
5284: CALL_OW 44
5288: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
5289: LD_ADDR_VAR 0 3
5293: PUSH
5294: LD_VAR 0 3
5298: PPUSH
5299: LD_VAR 0 3
5303: PUSH
5304: LD_INT 1
5306: PLUS
5307: PPUSH
5308: LD_VAR 0 2
5312: PPUSH
5313: CALL_OW 1
5317: ST_TO_ADDR
// PlaceUnitXYR ( un , 74 , 112 , 3 , false ) ;
5318: LD_VAR 0 2
5322: PPUSH
5323: LD_INT 74
5325: PPUSH
5326: LD_INT 112
5328: PPUSH
5329: LD_INT 3
5331: PPUSH
5332: LD_INT 0
5334: PPUSH
5335: CALL_OW 50
// end ;
5339: GO 5263
5341: POP
5342: POP
// AddResourceType ( GetBase ( kagan ) , mat_oil , 100 ) ;
5343: LD_INT 112
5345: PPUSH
5346: CALL_OW 274
5350: PPUSH
5351: LD_INT 2
5353: PPUSH
5354: LD_INT 100
5356: PPUSH
5357: CALL_OW 276
// repeat wait ( 0 0$1 ) ;
5361: LD_INT 35
5363: PPUSH
5364: CALL_OW 67
// for i in tmp do
5368: LD_ADDR_VAR 0 1
5372: PUSH
5373: LD_VAR 0 3
5377: PUSH
5378: FOR_IN
5379: IFFALSE 5461
// begin if IsDead ( i ) then
5381: LD_VAR 0 1
5385: PPUSH
5386: CALL_OW 301
5390: IFFALSE 5408
// tmp := tmp diff i ;
5392: LD_ADDR_VAR 0 3
5396: PUSH
5397: LD_VAR 0 3
5401: PUSH
5402: LD_VAR 0 1
5406: DIFF
5407: ST_TO_ADDR
// if not HasTask ( i ) and not Carry ( i ) then
5408: LD_VAR 0 1
5412: PPUSH
5413: CALL_OW 314
5417: NOT
5418: PUSH
5419: LD_VAR 0 1
5423: PPUSH
5424: CALL_OW 281
5428: NOT
5429: AND
5430: IFFALSE 5459
// begin ComTransport ( i , kagan , mat_oil ) ;
5432: LD_VAR 0 1
5436: PPUSH
5437: LD_INT 112
5439: PPUSH
5440: LD_INT 2
5442: PPUSH
5443: CALL_OW 151
// AddComGive ( i , beria ) ;
5447: LD_VAR 0 1
5451: PPUSH
5452: LD_INT 106
5454: PPUSH
5455: CALL_OW 221
// end ; end ;
5459: GO 5378
5461: POP
5462: POP
// until not tmp or IsDead ( kagan ) or IsDead ( beria ) ;
5463: LD_VAR 0 3
5467: NOT
5468: PUSH
5469: LD_INT 112
5471: PPUSH
5472: CALL_OW 301
5476: OR
5477: PUSH
5478: LD_INT 106
5480: PPUSH
5481: CALL_OW 301
5485: OR
5486: IFFALSE 5361
// end ;
5488: PPOPN 3
5490: END
// every 0 0$01 do var i , j , skr , cargo , dep ;
5491: GO 5493
5493: DISABLE
5494: LD_INT 0
5496: PPUSH
5497: PPUSH
5498: PPUSH
5499: PPUSH
5500: PPUSH
// begin enable ;
5501: ENABLE
// cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] , [ f_lives , 600 ] ] ) ;
5502: LD_ADDR_VAR 0 4
5506: PUSH
5507: LD_INT 22
5509: PUSH
5510: LD_INT 3
5512: PUSH
5513: EMPTY
5514: LIST
5515: LIST
5516: PUSH
5517: LD_INT 34
5519: PUSH
5520: LD_INT 51
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: PUSH
5527: LD_INT 24
5529: PUSH
5530: LD_INT 600
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PUSH
5537: EMPTY
5538: LIST
5539: LIST
5540: LIST
5541: PPUSH
5542: CALL_OW 69
5546: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5547: LD_ADDR_VAR 0 5
5551: PUSH
5552: LD_INT 22
5554: PUSH
5555: LD_INT 3
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: PUSH
5562: LD_INT 2
5564: PUSH
5565: LD_INT 30
5567: PUSH
5568: LD_INT 0
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: LD_INT 30
5577: PUSH
5578: LD_INT 1
5580: PUSH
5581: EMPTY
5582: LIST
5583: LIST
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: LIST
5589: PUSH
5590: EMPTY
5591: LIST
5592: LIST
5593: PPUSH
5594: CALL_OW 69
5598: ST_TO_ADDR
// skr = GetListOfCratesInArea ( ruCratesCollectArea ) ;
5599: LD_ADDR_VAR 0 3
5603: PUSH
5604: LD_INT 9
5606: PPUSH
5607: CALL_OW 435
5611: ST_TO_ADDR
// if not cargo or not skr or not dep then
5612: LD_VAR 0 4
5616: NOT
5617: PUSH
5618: LD_VAR 0 3
5622: NOT
5623: OR
5624: PUSH
5625: LD_VAR 0 5
5629: NOT
5630: OR
5631: IFFALSE 5635
// exit ;
5633: GO 5799
// for i in cargo do
5635: LD_ADDR_VAR 0 1
5639: PUSH
5640: LD_VAR 0 4
5644: PUSH
5645: FOR_IN
5646: IFFALSE 5797
// begin if not skr then
5648: LD_VAR 0 3
5652: NOT
5653: IFFALSE 5659
// exit ;
5655: POP
5656: POP
5657: GO 5799
// if not HasTask ( i ) then
5659: LD_VAR 0 1
5663: PPUSH
5664: CALL_OW 314
5668: NOT
5669: IFFALSE 5738
// begin ComCollect ( i , skr [ 1 ] , skr [ 2 ] ) ;
5671: LD_VAR 0 1
5675: PPUSH
5676: LD_VAR 0 3
5680: PUSH
5681: LD_INT 1
5683: ARRAY
5684: PPUSH
5685: LD_VAR 0 3
5689: PUSH
5690: LD_INT 2
5692: ARRAY
5693: PPUSH
5694: CALL_OW 117
// for j := 1 to 2 do
5698: LD_ADDR_VAR 0 2
5702: PUSH
5703: DOUBLE
5704: LD_INT 1
5706: DEC
5707: ST_TO_ADDR
5708: LD_INT 2
5710: PUSH
5711: FOR_TO
5712: IFFALSE 5734
// skr := Delete ( skr , 1 ) ;
5714: LD_ADDR_VAR 0 3
5718: PUSH
5719: LD_VAR 0 3
5723: PPUSH
5724: LD_INT 1
5726: PPUSH
5727: CALL_OW 3
5731: ST_TO_ADDR
5732: GO 5711
5734: POP
5735: POP
// end else
5736: GO 5795
// if GetFuel ( i ) < 3 and GetDistUnits ( i , NearestUnitToUnit ( dep , i ) ) < 6 then
5738: LD_VAR 0 1
5742: PPUSH
5743: CALL_OW 261
5747: PUSH
5748: LD_INT 3
5750: LESS
5751: PUSH
5752: LD_VAR 0 1
5756: PPUSH
5757: LD_VAR 0 5
5761: PPUSH
5762: LD_VAR 0 1
5766: PPUSH
5767: CALL_OW 74
5771: PPUSH
5772: CALL_OW 296
5776: PUSH
5777: LD_INT 6
5779: LESS
5780: AND
5781: IFFALSE 5795
// SetFuel ( i , 100 ) ;
5783: LD_VAR 0 1
5787: PPUSH
5788: LD_INT 100
5790: PPUSH
5791: CALL_OW 240
// end ;
5795: GO 5645
5797: POP
5798: POP
// end ;
5799: PPOPN 5
5801: END
// export function SendSupport ; var i , un ; begin
5802: LD_INT 0
5804: PPUSH
5805: PPUSH
5806: PPUSH
// uc_nation := 3 ;
5807: LD_ADDR_OWVAR 21
5811: PUSH
5812: LD_INT 3
5814: ST_TO_ADDR
// uc_side := 3 ;
5815: LD_ADDR_OWVAR 20
5819: PUSH
5820: LD_INT 3
5822: ST_TO_ADDR
// ResetHc ;
5823: CALL 68787 0 0
// for i := 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
5827: LD_ADDR_VAR 0 2
5831: PUSH
5832: DOUBLE
5833: LD_INT 1
5835: DEC
5836: ST_TO_ADDR
5837: LD_INT 3
5839: PUSH
5840: LD_INT 3
5842: PUSH
5843: LD_INT 4
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: LIST
5850: PUSH
5851: LD_OWVAR 67
5855: ARRAY
5856: PUSH
5857: FOR_TO
5858: IFFALSE 5932
// begin PrepareHuman ( false , 1 , Difficulty ) ;
5860: LD_INT 0
5862: PPUSH
5863: LD_INT 1
5865: PPUSH
5866: LD_OWVAR 67
5870: PPUSH
5871: CALL_OW 380
// un := CreateHuman ;
5875: LD_ADDR_VAR 0 3
5879: PUSH
5880: CALL_OW 44
5884: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
5885: LD_VAR 0 3
5889: PPUSH
5890: LD_INT 107
5892: PPUSH
5893: LD_INT 95
5895: PPUSH
5896: LD_INT 4
5898: PPUSH
5899: LD_INT 0
5901: PPUSH
5902: CALL_OW 50
// ComAgressiveMove ( un , 56 , 27 ) ;
5906: LD_VAR 0 3
5910: PPUSH
5911: LD_INT 56
5913: PPUSH
5914: LD_INT 27
5916: PPUSH
5917: CALL_OW 114
// AddComHold ( un ) ;
5921: LD_VAR 0 3
5925: PPUSH
5926: CALL_OW 200
// end ;
5930: GO 5857
5932: POP
5933: POP
// PrepareHuman ( false , 4 , Difficulty ) ;
5934: LD_INT 0
5936: PPUSH
5937: LD_INT 4
5939: PPUSH
5940: LD_OWVAR 67
5944: PPUSH
5945: CALL_OW 380
// un := CreateHuman ;
5949: LD_ADDR_VAR 0 3
5953: PUSH
5954: CALL_OW 44
5958: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
5959: LD_VAR 0 3
5963: PPUSH
5964: LD_INT 107
5966: PPUSH
5967: LD_INT 95
5969: PPUSH
5970: LD_INT 4
5972: PPUSH
5973: LD_INT 0
5975: PPUSH
5976: CALL_OW 50
// ComMoveXY ( un , 59 , 25 ) ;
5980: LD_VAR 0 3
5984: PPUSH
5985: LD_INT 59
5987: PPUSH
5988: LD_INT 25
5990: PPUSH
5991: CALL_OW 111
// if Difficulty > 1 then
5995: LD_OWVAR 67
5999: PUSH
6000: LD_INT 1
6002: GREATER
6003: IFFALSE 6112
// begin for i := 1 to [ 2 , 2 , 3 ] [ Difficulty ] do
6005: LD_ADDR_VAR 0 2
6009: PUSH
6010: DOUBLE
6011: LD_INT 1
6013: DEC
6014: ST_TO_ADDR
6015: LD_INT 2
6017: PUSH
6018: LD_INT 2
6020: PUSH
6021: LD_INT 3
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: LIST
6028: PUSH
6029: LD_OWVAR 67
6033: ARRAY
6034: PUSH
6035: FOR_TO
6036: IFFALSE 6110
// begin PrepareHuman ( false , 1 , Difficulty ) ;
6038: LD_INT 0
6040: PPUSH
6041: LD_INT 1
6043: PPUSH
6044: LD_OWVAR 67
6048: PPUSH
6049: CALL_OW 380
// un := CreateHuman ;
6053: LD_ADDR_VAR 0 3
6057: PUSH
6058: CALL_OW 44
6062: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
6063: LD_VAR 0 3
6067: PPUSH
6068: LD_INT 107
6070: PPUSH
6071: LD_INT 95
6073: PPUSH
6074: LD_INT 4
6076: PPUSH
6077: LD_INT 0
6079: PPUSH
6080: CALL_OW 50
// ComAgressiveMove ( un , 45 , 76 ) ;
6084: LD_VAR 0 3
6088: PPUSH
6089: LD_INT 45
6091: PPUSH
6092: LD_INT 76
6094: PPUSH
6095: CALL_OW 114
// AddComHold ( un ) ;
6099: LD_VAR 0 3
6103: PPUSH
6104: CALL_OW 200
// end ;
6108: GO 6035
6110: POP
6111: POP
// end ; end ;
6112: LD_VAR 0 1
6116: RET
// every 6 6$00 trigger tick >= 20 20$00 and Difficulty > 1 and russianOmicronAttackers > 4 and not retreatFromOmicron do var i , un , tmp , path ;
6117: LD_OWVAR 1
6121: PUSH
6122: LD_INT 42000
6124: GREATEREQUAL
6125: PUSH
6126: LD_OWVAR 67
6130: PUSH
6131: LD_INT 1
6133: GREATER
6134: AND
6135: PUSH
6136: LD_EXP 24
6140: PUSH
6141: LD_INT 4
6143: GREATER
6144: AND
6145: PUSH
6146: LD_EXP 8
6150: NOT
6151: AND
6152: IFFALSE 6445
6154: GO 6156
6156: DISABLE
6157: LD_INT 0
6159: PPUSH
6160: PPUSH
6161: PPUSH
6162: PPUSH
// begin enable ;
6163: ENABLE
// tmp := [ ] ;
6164: LD_ADDR_VAR 0 3
6168: PUSH
6169: EMPTY
6170: ST_TO_ADDR
// path := [ [ 55 , 91 ] , [ 47 , 80 ] , [ 39 , 67 ] , [ 36 , 60 ] , [ 33 , 52 ] ] ;
6171: LD_ADDR_VAR 0 4
6175: PUSH
6176: LD_INT 55
6178: PUSH
6179: LD_INT 91
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: LD_INT 47
6188: PUSH
6189: LD_INT 80
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: LD_INT 39
6198: PUSH
6199: LD_INT 67
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: PUSH
6206: LD_INT 36
6208: PUSH
6209: LD_INT 60
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: PUSH
6216: LD_INT 33
6218: PUSH
6219: LD_INT 52
6221: PUSH
6222: EMPTY
6223: LIST
6224: LIST
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty - 1 ] do
6233: LD_ADDR_VAR 0 1
6237: PUSH
6238: DOUBLE
6239: LD_INT 1
6241: DEC
6242: ST_TO_ADDR
6243: LD_INT 2
6245: PUSH
6246: LD_INT 3
6248: PUSH
6249: LD_INT 3
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: LIST
6256: PUSH
6257: LD_OWVAR 67
6261: PUSH
6262: LD_INT 1
6264: MINUS
6265: ARRAY
6266: PUSH
6267: FOR_TO
6268: IFFALSE 6419
// begin uc_side := 3 ;
6270: LD_ADDR_OWVAR 20
6274: PUSH
6275: LD_INT 3
6277: ST_TO_ADDR
// uc_nation := 3 ;
6278: LD_ADDR_OWVAR 21
6282: PUSH
6283: LD_INT 3
6285: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gun ] [ i mod 3 + 1 ] , 100 ) ;
6286: LD_INT 22
6288: PPUSH
6289: LD_INT 1
6291: PPUSH
6292: LD_INT 1
6294: PPUSH
6295: LD_INT 42
6297: PUSH
6298: LD_INT 42
6300: PUSH
6301: LD_INT 44
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: LIST
6308: PUSH
6309: LD_VAR 0 1
6313: PUSH
6314: LD_INT 3
6316: MOD
6317: PUSH
6318: LD_INT 1
6320: PLUS
6321: ARRAY
6322: PPUSH
6323: LD_INT 100
6325: PPUSH
6326: CALL 35809 0 5
// un := CreateVehicle ;
6330: LD_ADDR_VAR 0 2
6334: PUSH
6335: CALL_OW 45
6339: ST_TO_ADDR
// PlaceUnitXYR ( un , 57 , 103 , 4 , false ) ;
6340: LD_VAR 0 2
6344: PPUSH
6345: LD_INT 57
6347: PPUSH
6348: LD_INT 103
6350: PPUSH
6351: LD_INT 4
6353: PPUSH
6354: LD_INT 0
6356: PPUSH
6357: CALL_OW 50
// tmp := Replace ( tmp , tmp + 1 , un ) ;
6361: LD_ADDR_VAR 0 3
6365: PUSH
6366: LD_VAR 0 3
6370: PPUSH
6371: LD_VAR 0 3
6375: PUSH
6376: LD_INT 1
6378: PLUS
6379: PPUSH
6380: LD_VAR 0 2
6384: PPUSH
6385: CALL_OW 1
6389: ST_TO_ADDR
// PrepareHuman ( false , 3 , 5 ) ;
6390: LD_INT 0
6392: PPUSH
6393: LD_INT 3
6395: PPUSH
6396: LD_INT 5
6398: PPUSH
6399: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
6403: CALL_OW 44
6407: PPUSH
6408: LD_VAR 0 2
6412: PPUSH
6413: CALL_OW 52
// end ;
6417: GO 6267
6419: POP
6420: POP
// repeat wait ( 0 0$1 ) ;
6421: LD_INT 35
6423: PPUSH
6424: CALL_OW 67
// until not AgressiveMove ( tmp , path ) ;
6428: LD_VAR 0 3
6432: PPUSH
6433: LD_VAR 0 4
6437: PPUSH
6438: CALL 70866 0 2
6442: NOT
6443: IFFALSE 6421
// end ;
6445: PPOPN 4
6447: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
6448: LD_INT 3
6450: PUSH
6451: LD_INT 22
6453: PUSH
6454: LD_INT 1
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: PUSH
6465: LD_INT 32
6467: PUSH
6468: LD_INT 1
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: PPUSH
6479: CALL_OW 69
6483: IFFALSE 6567
6485: GO 6487
6487: DISABLE
6488: LD_INT 0
6490: PPUSH
// begin enable ;
6491: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
6492: LD_ADDR_VAR 0 1
6496: PUSH
6497: LD_INT 3
6499: PUSH
6500: LD_INT 22
6502: PUSH
6503: LD_INT 1
6505: PUSH
6506: EMPTY
6507: LIST
6508: LIST
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: PUSH
6514: LD_INT 32
6516: PUSH
6517: LD_INT 1
6519: PUSH
6520: EMPTY
6521: LIST
6522: LIST
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: PPUSH
6528: CALL_OW 69
6532: PUSH
6533: FOR_IN
6534: IFFALSE 6565
// if GetFuel ( i ) < 3 then
6536: LD_VAR 0 1
6540: PPUSH
6541: CALL_OW 261
6545: PUSH
6546: LD_INT 3
6548: LESS
6549: IFFALSE 6563
// SetFuel ( i , 3 ) ;
6551: LD_VAR 0 1
6555: PPUSH
6556: LD_INT 3
6558: PPUSH
6559: CALL_OW 240
6563: GO 6533
6565: POP
6566: POP
// end ; end_of_file
6567: PPOPN 1
6569: END
// export function PrepareArabian ; var i , j , un , veh , xy ; begin
6570: LD_INT 0
6572: PPUSH
6573: PPUSH
6574: PPUSH
6575: PPUSH
6576: PPUSH
6577: PPUSH
// uc_side := 2 ;
6578: LD_ADDR_OWVAR 20
6582: PUSH
6583: LD_INT 2
6585: ST_TO_ADDR
// uc_nation := 2 ;
6586: LD_ADDR_OWVAR 21
6590: PUSH
6591: LD_INT 2
6593: ST_TO_ADDR
// InitVc ;
6594: CALL_OW 20
// ResetHc ;
6598: CALL 68787 0 0
// for j := 1 to 2 do
6602: LD_ADDR_VAR 0 3
6606: PUSH
6607: DOUBLE
6608: LD_INT 1
6610: DEC
6611: ST_TO_ADDR
6612: LD_INT 2
6614: PUSH
6615: FOR_TO
6616: IFFALSE 6840
// begin xy := [ [ 178 , 3 ] , [ 268 , 121 ] ] [ j ] ;
6618: LD_ADDR_VAR 0 6
6622: PUSH
6623: LD_INT 178
6625: PUSH
6626: LD_INT 3
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: PUSH
6633: LD_INT 268
6635: PUSH
6636: LD_INT 121
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: PUSH
6647: LD_VAR 0 3
6651: ARRAY
6652: ST_TO_ADDR
// for i := 1 to 8 do
6653: LD_ADDR_VAR 0 2
6657: PUSH
6658: DOUBLE
6659: LD_INT 1
6661: DEC
6662: ST_TO_ADDR
6663: LD_INT 8
6665: PUSH
6666: FOR_TO
6667: IFFALSE 6836
// begin uc_side := 2 ;
6669: LD_ADDR_OWVAR 20
6673: PUSH
6674: LD_INT 2
6676: ST_TO_ADDR
// uc_nation := 2 ;
6677: LD_ADDR_OWVAR 21
6681: PUSH
6682: LD_INT 2
6684: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_flame_thrower , ar_gun ] [ rand ( 1 , 2 ) ] , 99 ) ;
6685: LD_INT 14
6687: PPUSH
6688: LD_INT 1
6690: PPUSH
6691: LD_INT 1
6693: PPUSH
6694: LD_INT 26
6696: PUSH
6697: LD_INT 27
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: PUSH
6704: LD_INT 1
6706: PPUSH
6707: LD_INT 2
6709: PPUSH
6710: CALL_OW 12
6714: ARRAY
6715: PPUSH
6716: LD_INT 99
6718: PPUSH
6719: CALL 35809 0 5
// veh := CreateVehicle ;
6723: LD_ADDR_VAR 0 5
6727: PUSH
6728: CALL_OW 45
6732: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6733: LD_VAR 0 5
6737: PPUSH
6738: LD_INT 3
6740: PPUSH
6741: CALL_OW 233
// PlaceUnitXY ( veh , xy [ 1 ] , xy [ 2 ] , false ) ;
6745: LD_VAR 0 5
6749: PPUSH
6750: LD_VAR 0 6
6754: PUSH
6755: LD_INT 1
6757: ARRAY
6758: PPUSH
6759: LD_VAR 0 6
6763: PUSH
6764: LD_INT 2
6766: ARRAY
6767: PPUSH
6768: LD_INT 0
6770: PPUSH
6771: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
6775: LD_INT 0
6777: PPUSH
6778: LD_INT 3
6780: PPUSH
6781: LD_INT 6
6783: PPUSH
6784: CALL_OW 380
// un := CreateHuman ;
6788: LD_ADDR_VAR 0 4
6792: PUSH
6793: CALL_OW 44
6797: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6798: LD_VAR 0 4
6802: PPUSH
6803: LD_VAR 0 5
6807: PPUSH
6808: CALL_OW 52
// ComMoveXY ( un , 186 , 17 ) ;
6812: LD_VAR 0 4
6816: PPUSH
6817: LD_INT 186
6819: PPUSH
6820: LD_INT 17
6822: PPUSH
6823: CALL_OW 111
// wait ( 0 0$2 ) ;
6827: LD_INT 70
6829: PPUSH
6830: CALL_OW 67
// end ;
6834: GO 6666
6836: POP
6837: POP
// end ;
6838: GO 6615
6840: POP
6841: POP
// for i := 1 to 10 do
6842: LD_ADDR_VAR 0 2
6846: PUSH
6847: DOUBLE
6848: LD_INT 1
6850: DEC
6851: ST_TO_ADDR
6852: LD_INT 10
6854: PUSH
6855: FOR_TO
6856: IFFALSE 6923
// begin PrepareHuman ( false , 1 , 5 ) ;
6858: LD_INT 0
6860: PPUSH
6861: LD_INT 1
6863: PPUSH
6864: LD_INT 5
6866: PPUSH
6867: CALL_OW 380
// un := CreateHuman ;
6871: LD_ADDR_VAR 0 4
6875: PUSH
6876: CALL_OW 44
6880: ST_TO_ADDR
// PlaceUnitXY ( un , 178 , 3 , false ) ;
6881: LD_VAR 0 4
6885: PPUSH
6886: LD_INT 178
6888: PPUSH
6889: LD_INT 3
6891: PPUSH
6892: LD_INT 0
6894: PPUSH
6895: CALL_OW 48
// ComMoveXY ( un , 186 , 17 ) ;
6899: LD_VAR 0 4
6903: PPUSH
6904: LD_INT 186
6906: PPUSH
6907: LD_INT 17
6909: PPUSH
6910: CALL_OW 111
// wait ( 0 0$2 ) ;
6914: LD_INT 70
6916: PPUSH
6917: CALL_OW 67
// end ;
6921: GO 6855
6923: POP
6924: POP
// end ;
6925: LD_VAR 0 1
6929: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] ] ) do var i , enemy ;
6930: LD_INT 22
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: LD_INT 50
6942: PUSH
6943: EMPTY
6944: LIST
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PPUSH
6950: CALL_OW 69
6954: IFFALSE 7090
6956: GO 6958
6958: DISABLE
6959: LD_INT 0
6961: PPUSH
6962: PPUSH
// begin enable ;
6963: ENABLE
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6964: LD_ADDR_VAR 0 2
6968: PUSH
6969: LD_INT 2
6971: PUSH
6972: LD_INT 22
6974: PUSH
6975: LD_INT 3
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: LD_INT 22
6984: PUSH
6985: LD_INT 6
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: LIST
6996: PPUSH
6997: CALL_OW 69
7001: ST_TO_ADDR
// if not enemy then
7002: LD_VAR 0 2
7006: NOT
7007: IFFALSE 7029
// enemy := FilterAllUnits ( [ f_side , 1 ] ) ;
7009: LD_ADDR_VAR 0 2
7013: PUSH
7014: LD_INT 22
7016: PUSH
7017: LD_INT 1
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PPUSH
7024: CALL_OW 69
7028: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] ] ) do
7029: LD_ADDR_VAR 0 1
7033: PUSH
7034: LD_INT 22
7036: PUSH
7037: LD_INT 2
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: LD_INT 50
7046: PUSH
7047: EMPTY
7048: LIST
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PPUSH
7054: CALL_OW 69
7058: PUSH
7059: FOR_IN
7060: IFFALSE 7088
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7062: LD_VAR 0 1
7066: PPUSH
7067: LD_VAR 0 2
7071: PPUSH
7072: LD_VAR 0 1
7076: PPUSH
7077: CALL_OW 74
7081: PPUSH
7082: CALL_OW 115
7086: GO 7059
7088: POP
7089: POP
// end ; end_of_file
7090: PPOPN 2
7092: END
// export function Action ; begin
7093: LD_INT 0
7095: PPUSH
// InGameOn ;
7096: CALL_OW 8
// CenterNowOnXY ( 106 , 3 ) ;
7100: LD_INT 106
7102: PPUSH
7103: LD_INT 3
7105: PPUSH
7106: CALL_OW 86
// wait ( 0 0$2 ) ;
7110: LD_INT 70
7112: PPUSH
7113: CALL_OW 67
// ChangeMissionObjectives ( target1 ) ;
7117: LD_STRING target1
7119: PPUSH
7120: CALL_OW 337
// InGameOff ;
7124: CALL_OW 9
// SaveForQuickRestart ;
7128: CALL_OW 22
// end ;
7132: LD_VAR 0 1
7136: RET
// every 0 0$1 trigger IsDead ( omikron ) and not retreatFromOmicron do
7137: LD_INT 64
7139: PPUSH
7140: CALL_OW 301
7144: PUSH
7145: LD_EXP 8
7149: NOT
7150: AND
7151: IFFALSE 7171
7153: GO 7155
7155: DISABLE
// begin omicronFall := true ;
7156: LD_ADDR_EXP 7
7160: PUSH
7161: LD_INT 1
7163: ST_TO_ADDR
// YouLost ( omi ) ;
7164: LD_STRING omi
7166: PPUSH
7167: CALL_OW 104
// end ;
7171: END
// every 0 0$1 trigger ( See ( 4 , Sikorski ) or See ( 4 , IsInUnit ( Sikorski ) ) ) and IsOk ( omikron ) do var i , tmp , speaker , whereHeWas ;
7172: LD_INT 4
7174: PPUSH
7175: LD_EXP 14
7179: PPUSH
7180: CALL_OW 292
7184: PUSH
7185: LD_INT 4
7187: PPUSH
7188: LD_EXP 14
7192: PPUSH
7193: CALL_OW 310
7197: PPUSH
7198: CALL_OW 292
7202: OR
7203: PUSH
7204: LD_INT 64
7206: PPUSH
7207: CALL_OW 302
7211: AND
7212: IFFALSE 7765
7214: GO 7216
7216: DISABLE
7217: LD_INT 0
7219: PPUSH
7220: PPUSH
7221: PPUSH
7222: PPUSH
// begin InGameOn ;
7223: CALL_OW 8
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
7227: LD_ADDR_VAR 0 2
7231: PUSH
7232: LD_INT 22
7234: PUSH
7235: LD_INT 4
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PPUSH
7242: CALL_OW 69
7246: ST_TO_ADDR
// speaker := UnitFilter ( tmp , [ f_sex , sex_male ] ) [ 1 ] ;
7247: LD_ADDR_VAR 0 3
7251: PUSH
7252: LD_VAR 0 2
7256: PPUSH
7257: LD_INT 26
7259: PUSH
7260: LD_INT 1
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PPUSH
7267: CALL_OW 72
7271: PUSH
7272: LD_INT 1
7274: ARRAY
7275: ST_TO_ADDR
// for i in tmp do
7276: LD_ADDR_VAR 0 1
7280: PUSH
7281: LD_VAR 0 2
7285: PUSH
7286: FOR_IN
7287: IFFALSE 7303
// SetSide ( i , 1 ) ;
7289: LD_VAR 0 1
7293: PPUSH
7294: LD_INT 1
7296: PPUSH
7297: CALL_OW 235
7301: GO 7286
7303: POP
7304: POP
// ComMoveXY ( Sikorski , 37 , 40 ) ;
7305: LD_EXP 14
7309: PPUSH
7310: LD_INT 37
7312: PPUSH
7313: LD_INT 40
7315: PPUSH
7316: CALL_OW 111
// wait ( 0 0$5 ) ;
7320: LD_INT 175
7322: PPUSH
7323: CALL_OW 67
// ComExit ( Sikorski ) ;
7327: LD_EXP 14
7331: PPUSH
7332: CALL 68660 0 1
// AddComMoveXY ( Sikorski , 37 , 40 ) ;
7336: LD_EXP 14
7340: PPUSH
7341: LD_INT 37
7343: PPUSH
7344: LD_INT 40
7346: PPUSH
7347: CALL_OW 171
// CenterOnUnits ( Sikorski ) ;
7351: LD_EXP 14
7355: PPUSH
7356: CALL_OW 85
// wait ( 0 0$2 ) ;
7360: LD_INT 70
7362: PPUSH
7363: CALL_OW 67
// whereHeWas := ComExit ( speaker ) ;
7367: LD_ADDR_VAR 0 4
7371: PUSH
7372: LD_VAR 0 3
7376: PPUSH
7377: CALL 68660 0 1
7381: ST_TO_ADDR
// AddComMoveUnit ( speaker , Sikorski ) ;
7382: LD_VAR 0 3
7386: PPUSH
7387: LD_EXP 14
7391: PPUSH
7392: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
7396: LD_INT 35
7398: PPUSH
7399: CALL_OW 67
// until GetDistUnits ( speaker , Sikorski ) < 5 and not IsInUnit ( Sikorski ) ;
7403: LD_VAR 0 3
7407: PPUSH
7408: LD_EXP 14
7412: PPUSH
7413: CALL_OW 296
7417: PUSH
7418: LD_INT 5
7420: LESS
7421: PUSH
7422: LD_EXP 14
7426: PPUSH
7427: CALL_OW 310
7431: NOT
7432: AND
7433: IFFALSE 7396
// ComTurnUnit ( Sikorski , speaker ) ;
7435: LD_EXP 14
7439: PPUSH
7440: LD_VAR 0 3
7444: PPUSH
7445: CALL_OW 119
// ComTurnUnit ( speaker , Sikorski ) ;
7449: LD_VAR 0 3
7453: PPUSH
7454: LD_EXP 14
7458: PPUSH
7459: CALL_OW 119
// CenterNowOnUnits ( Sikorski ) ;
7463: LD_EXP 14
7467: PPUSH
7468: CALL_OW 87
// Say ( Sikorski , DS-1 ) ;
7472: LD_EXP 14
7476: PPUSH
7477: LD_STRING DS-1
7479: PPUSH
7480: CALL_OW 88
// Say ( speaker , DP-1 ) ;
7484: LD_VAR 0 3
7488: PPUSH
7489: LD_STRING DP-1
7491: PPUSH
7492: CALL_OW 88
// Say ( Sikorski , DS-2 ) ;
7496: LD_EXP 14
7500: PPUSH
7501: LD_STRING DS-2
7503: PPUSH
7504: CALL_OW 88
// Say ( speaker , DP-2 ) ;
7508: LD_VAR 0 3
7512: PPUSH
7513: LD_STRING DP-2
7515: PPUSH
7516: CALL_OW 88
// Say ( Sikorski , DS-3 ) ;
7520: LD_EXP 14
7524: PPUSH
7525: LD_STRING DS-3
7527: PPUSH
7528: CALL_OW 88
// Say ( speaker , DP-3 ) ;
7532: LD_VAR 0 3
7536: PPUSH
7537: LD_STRING DP-3
7539: PPUSH
7540: CALL_OW 88
// Say ( Sikorski , DS-4 ) ;
7544: LD_EXP 14
7548: PPUSH
7549: LD_STRING DS-4
7551: PPUSH
7552: CALL_OW 88
// wait ( 0 0$1 ) ;
7556: LD_INT 35
7558: PPUSH
7559: CALL_OW 67
// if whereHeWas then
7563: LD_VAR 0 4
7567: IFFALSE 7583
// ComEnterUnit ( speaker , whereHeWas ) ;
7569: LD_VAR 0 3
7573: PPUSH
7574: LD_VAR 0 4
7578: PPUSH
7579: CALL_OW 120
// ComHold ( Sikorski ) ;
7583: LD_EXP 14
7587: PPUSH
7588: CALL_OW 140
// wait ( 0 0$1 ) ;
7592: LD_INT 35
7594: PPUSH
7595: CALL_OW 67
// SayRadio ( Harrison , DR-1 ) ;
7599: LD_EXP 15
7603: PPUSH
7604: LD_STRING DR-1
7606: PPUSH
7607: CALL_OW 94
// Say ( Sikorski , DS-5 ) ;
7611: LD_EXP 14
7615: PPUSH
7616: LD_STRING DS-5
7618: PPUSH
7619: CALL_OW 88
// SayRadio ( Harrison , DR-2 ) ;
7623: LD_EXP 15
7627: PPUSH
7628: LD_STRING DR-2
7630: PPUSH
7631: CALL_OW 94
// Say ( Sikorski , DS-6 ) ;
7635: LD_EXP 14
7639: PPUSH
7640: LD_STRING DS-6
7642: PPUSH
7643: CALL_OW 88
// SayRadio ( Harrison , DR-3 ) ;
7647: LD_EXP 15
7651: PPUSH
7652: LD_STRING DR-3
7654: PPUSH
7655: CALL_OW 94
// InGameOff ;
7659: CALL_OW 9
// ChangeMissionObjectives ( target2 ) ;
7663: LD_STRING target2
7665: PPUSH
7666: CALL_OW 337
// sikorskiInOmicron := true ;
7670: LD_ADDR_EXP 9
7674: PUSH
7675: LD_INT 1
7677: ST_TO_ADDR
// wait ( 0 0$2 ) ;
7678: LD_INT 70
7680: PPUSH
7681: CALL_OW 67
// Say ( Sikorski , DS-7 ) ;
7685: LD_EXP 14
7689: PPUSH
7690: LD_STRING DS-7
7692: PPUSH
7693: CALL_OW 88
// wait ( 3 3$00 ) ;
7697: LD_INT 6300
7699: PPUSH
7700: CALL_OW 67
// SayRadio ( Harrison , DRforce-5 ) ;
7704: LD_EXP 15
7708: PPUSH
7709: LD_STRING DRforce-5
7711: PPUSH
7712: CALL_OW 94
// wait ( 4 4$50 ) ;
7716: LD_INT 10150
7718: PPUSH
7719: CALL_OW 67
// FirstReinforcements ;
7723: CALL 7942 0 0
// wait ( rand ( 12 12$00 , 15 15$00 ) ) ;
7727: LD_INT 25200
7729: PPUSH
7730: LD_INT 31500
7732: PPUSH
7733: CALL_OW 12
7737: PPUSH
7738: CALL_OW 67
// SayRadio ( Harrison , DRforce-10 ) ;
7742: LD_EXP 15
7746: PPUSH
7747: LD_STRING DRforce-10
7749: PPUSH
7750: CALL_OW 94
// wait ( 9 9$50 ) ;
7754: LD_INT 20650
7756: PPUSH
7757: CALL_OW 67
// SecondReinforcements ;
7761: CALL 8785 0 0
// end ;
7765: PPOPN 4
7767: END
// every 0 0$1 trigger GetLives ( Sikorski ) < 1000 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
7768: LD_EXP 14
7772: PPUSH
7773: CALL_OW 256
7777: PUSH
7778: LD_INT 1000
7780: LESS
7781: PUSH
7782: LD_INT 22
7784: PUSH
7785: LD_INT 1
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: PUSH
7792: LD_INT 2
7794: PUSH
7795: LD_INT 101
7797: PUSH
7798: LD_INT 3
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PUSH
7805: LD_INT 101
7807: PUSH
7808: LD_INT 6
7810: PUSH
7811: EMPTY
7812: LIST
7813: LIST
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: LIST
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: PPUSH
7824: CALL_OW 69
7828: AND
7829: IFFALSE 7846
7831: GO 7833
7833: DISABLE
// Say ( Sikorski , DRus ) ;
7834: LD_EXP 14
7838: PPUSH
7839: LD_STRING DRus
7841: PPUSH
7842: CALL_OW 88
7846: END
// every 0 0$1 trigger tick >= [ 11 11$00 , 10 10$30 , 9 9$40 ] [ Difficulty ] do
7847: LD_OWVAR 1
7851: PUSH
7852: LD_INT 23100
7854: PUSH
7855: LD_INT 22050
7857: PUSH
7858: LD_INT 20300
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: LIST
7865: PUSH
7866: LD_OWVAR 67
7870: ARRAY
7871: GREATEREQUAL
7872: IFFALSE 7941
7874: GO 7876
7876: DISABLE
// begin SendSupport ;
7877: CALL 5802 0 0
// ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
7881: LD_EXP 24
7885: PPUSH
7886: LD_INT 21
7888: PUSH
7889: LD_INT 2
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: PPUSH
7896: CALL_OW 72
7900: PPUSH
7901: LD_INT 62
7903: PPUSH
7904: LD_INT 22
7906: PPUSH
7907: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
7911: LD_EXP 25
7915: PPUSH
7916: LD_INT 69
7918: PPUSH
7919: LD_INT 27
7921: PPUSH
7922: CALL_OW 111
// wait ( 1 1$00 ) ;
7926: LD_INT 2100
7928: PPUSH
7929: CALL_OW 67
// startAttackOnOmicron := true ;
7933: LD_ADDR_EXP 6
7937: PUSH
7938: LD_INT 1
7940: ST_TO_ADDR
// end ;
7941: END
// export function FirstReinforcements ; var i , un , tmp , spotted , xy ; begin
7942: LD_INT 0
7944: PPUSH
7945: PPUSH
7946: PPUSH
7947: PPUSH
7948: PPUSH
7949: PPUSH
// uc_side := 4 ;
7950: LD_ADDR_OWVAR 20
7954: PUSH
7955: LD_INT 4
7957: ST_TO_ADDR
// uc_nation := 1 ;
7958: LD_ADDR_OWVAR 21
7962: PUSH
7963: LD_INT 1
7965: ST_TO_ADDR
// tmp := [ ] ;
7966: LD_ADDR_VAR 0 4
7970: PUSH
7971: EMPTY
7972: ST_TO_ADDR
// ResetHc ;
7973: CALL 68787 0 0
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7977: LD_INT 2
7979: PPUSH
7980: LD_INT 1
7982: PPUSH
7983: LD_INT 1
7985: PPUSH
7986: LD_INT 4
7988: PPUSH
7989: LD_INT 77
7991: PPUSH
7992: CALL 35809 0 5
// un := CreateVehicle ;
7996: LD_ADDR_VAR 0 3
8000: PUSH
8001: CALL_OW 45
8005: ST_TO_ADDR
// tmp := tmp union un ;
8006: LD_ADDR_VAR 0 4
8010: PUSH
8011: LD_VAR 0 4
8015: PUSH
8016: LD_VAR 0 3
8020: UNION
8021: ST_TO_ADDR
// SetDir ( un , 2 ) ;
8022: LD_VAR 0 3
8026: PPUSH
8027: LD_INT 2
8029: PPUSH
8030: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
8034: LD_VAR 0 3
8038: PPUSH
8039: LD_INT 106
8041: PPUSH
8042: LD_INT 3
8044: PPUSH
8045: LD_INT 0
8047: PPUSH
8048: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
8052: LD_INT 0
8054: PPUSH
8055: LD_INT 3
8057: PPUSH
8058: LD_INT 2
8060: PPUSH
8061: CALL_OW 380
// un := CreateHuman ;
8065: LD_ADDR_VAR 0 3
8069: PUSH
8070: CALL_OW 44
8074: ST_TO_ADDR
// tmp := tmp union un ;
8075: LD_ADDR_VAR 0 4
8079: PUSH
8080: LD_VAR 0 4
8084: PUSH
8085: LD_VAR 0 3
8089: UNION
8090: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
8091: LD_VAR 0 3
8095: PPUSH
8096: LD_VAR 0 4
8100: PUSH
8101: LD_VAR 0 4
8105: PUSH
8106: LD_INT 1
8108: MINUS
8109: ARRAY
8110: PPUSH
8111: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
8115: LD_VAR 0 3
8119: PPUSH
8120: LD_INT 109
8122: PPUSH
8123: LD_INT 9
8125: PPUSH
8126: CALL_OW 111
// wait ( 0 0$1 ) ;
8130: LD_INT 35
8132: PPUSH
8133: CALL_OW 67
// for i := 1 to [ 2 , 2 , 1 ] [ Difficulty ] do
8137: LD_ADDR_VAR 0 2
8141: PUSH
8142: DOUBLE
8143: LD_INT 1
8145: DEC
8146: ST_TO_ADDR
8147: LD_INT 2
8149: PUSH
8150: LD_INT 2
8152: PUSH
8153: LD_INT 1
8155: PUSH
8156: EMPTY
8157: LIST
8158: LIST
8159: LIST
8160: PUSH
8161: LD_OWVAR 67
8165: ARRAY
8166: PUSH
8167: FOR_TO
8168: IFFALSE 8232
// begin PrepareHuman ( false , 1 , 2 ) ;
8170: LD_INT 0
8172: PPUSH
8173: LD_INT 1
8175: PPUSH
8176: LD_INT 2
8178: PPUSH
8179: CALL_OW 380
// un := CreateHuman ;
8183: LD_ADDR_VAR 0 3
8187: PUSH
8188: CALL_OW 44
8192: ST_TO_ADDR
// tmp := tmp union un ;
8193: LD_ADDR_VAR 0 4
8197: PUSH
8198: LD_VAR 0 4
8202: PUSH
8203: LD_VAR 0 3
8207: UNION
8208: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
8209: LD_VAR 0 3
8213: PPUSH
8214: LD_INT 105
8216: PPUSH
8217: LD_INT 2
8219: PPUSH
8220: LD_INT 2
8222: PPUSH
8223: LD_INT 0
8225: PPUSH
8226: CALL_OW 50
// end ;
8230: GO 8167
8232: POP
8233: POP
// PrepareHuman ( false , 4 , 2 ) ;
8234: LD_INT 0
8236: PPUSH
8237: LD_INT 4
8239: PPUSH
8240: LD_INT 2
8242: PPUSH
8243: CALL_OW 380
// un := CreateHuman ;
8247: LD_ADDR_VAR 0 3
8251: PUSH
8252: CALL_OW 44
8256: ST_TO_ADDR
// tmp := tmp union un ;
8257: LD_ADDR_VAR 0 4
8261: PUSH
8262: LD_VAR 0 4
8266: PUSH
8267: LD_VAR 0 3
8271: UNION
8272: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
8273: LD_VAR 0 3
8277: PPUSH
8278: LD_INT 105
8280: PPUSH
8281: LD_INT 2
8283: PPUSH
8284: LD_INT 2
8286: PPUSH
8287: LD_INT 0
8289: PPUSH
8290: CALL_OW 50
// ComAgressiveMove ( tmp , 26 , 35 ) ;
8294: LD_VAR 0 4
8298: PPUSH
8299: LD_INT 26
8301: PPUSH
8302: LD_INT 35
8304: PPUSH
8305: CALL_OW 114
// spotted := false ;
8309: LD_ADDR_VAR 0 5
8313: PUSH
8314: LD_INT 0
8316: ST_TO_ADDR
// xy := [ 0 , 0 ] ;
8317: LD_ADDR_VAR 0 6
8321: PUSH
8322: LD_INT 0
8324: PUSH
8325: LD_INT 0
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8332: LD_INT 35
8334: PPUSH
8335: CALL_OW 67
// if UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) and not spotted then
8339: LD_VAR 0 4
8343: PPUSH
8344: LD_INT 3
8346: PUSH
8347: LD_INT 24
8349: PUSH
8350: LD_INT 1000
8352: PUSH
8353: EMPTY
8354: LIST
8355: LIST
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: PPUSH
8361: CALL_OW 72
8365: PUSH
8366: LD_VAR 0 5
8370: NOT
8371: AND
8372: IFFALSE 8498
// begin spotted := true ;
8374: LD_ADDR_VAR 0 5
8378: PUSH
8379: LD_INT 1
8381: ST_TO_ADDR
// un := UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ;
8382: LD_ADDR_VAR 0 3
8386: PUSH
8387: LD_VAR 0 4
8391: PPUSH
8392: LD_INT 3
8394: PUSH
8395: LD_INT 24
8397: PUSH
8398: LD_INT 1000
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: PPUSH
8409: CALL_OW 72
8413: PUSH
8414: LD_INT 1
8416: ARRAY
8417: ST_TO_ADDR
// xy := [ GetX ( un ) , GetY ( un ) ] ;
8418: LD_ADDR_VAR 0 6
8422: PUSH
8423: LD_VAR 0 3
8427: PPUSH
8428: CALL_OW 250
8432: PUSH
8433: LD_VAR 0 3
8437: PPUSH
8438: CALL_OW 251
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: ST_TO_ADDR
// PlaceSeeing ( xy [ 1 ] , xy [ 2 ] , 1 , - 12 ) ;
8447: LD_VAR 0 6
8451: PUSH
8452: LD_INT 1
8454: ARRAY
8455: PPUSH
8456: LD_VAR 0 6
8460: PUSH
8461: LD_INT 2
8463: ARRAY
8464: PPUSH
8465: LD_INT 1
8467: PPUSH
8468: LD_INT 12
8470: NEG
8471: PPUSH
8472: CALL_OW 330
// CenterOnXY ( xy [ 1 ] , xy [ 2 ] ) ;
8476: LD_VAR 0 6
8480: PUSH
8481: LD_INT 1
8483: ARRAY
8484: PPUSH
8485: LD_VAR 0 6
8489: PUSH
8490: LD_INT 2
8492: ARRAY
8493: PPUSH
8494: CALL_OW 84
// end ; for i in tmp do
8498: LD_ADDR_VAR 0 2
8502: PUSH
8503: LD_VAR 0 4
8507: PUSH
8508: FOR_IN
8509: IFFALSE 8540
// if not HasTask ( i ) then
8511: LD_VAR 0 2
8515: PPUSH
8516: CALL_OW 314
8520: NOT
8521: IFFALSE 8538
// ComAgressiveMove ( i , 26 , 35 ) ;
8523: LD_VAR 0 2
8527: PPUSH
8528: LD_INT 26
8530: PPUSH
8531: LD_INT 35
8533: PPUSH
8534: CALL_OW 114
8538: GO 8508
8540: POP
8541: POP
// if not UnitFilter ( tmp , [ f_ok ] ) then
8542: LD_VAR 0 4
8546: PPUSH
8547: LD_INT 50
8549: PUSH
8550: EMPTY
8551: LIST
8552: PPUSH
8553: CALL_OW 72
8557: NOT
8558: IFFALSE 8593
// begin if spotted then
8560: LD_VAR 0 5
8564: IFFALSE 8591
// RemoveSeeing ( xy [ 1 ] , xy [ 2 ] , 1 ) ;
8566: LD_VAR 0 6
8570: PUSH
8571: LD_INT 1
8573: ARRAY
8574: PPUSH
8575: LD_VAR 0 6
8579: PUSH
8580: LD_INT 2
8582: ARRAY
8583: PPUSH
8584: LD_INT 1
8586: PPUSH
8587: CALL_OW 331
// exit ;
8591: GO 8780
// end ; until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) or See ( 4 , Sikorski ) ;
8593: LD_VAR 0 4
8597: PPUSH
8598: LD_INT 91
8600: PUSH
8601: LD_INT 64
8603: PUSH
8604: LD_INT 12
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: LIST
8611: PPUSH
8612: CALL_OW 72
8616: PUSH
8617: LD_INT 4
8619: PPUSH
8620: LD_EXP 14
8624: PPUSH
8625: CALL_OW 292
8629: OR
8630: IFFALSE 8332
// omicronSquad := omicronSquad union tmp ;
8632: LD_ADDR_EXP 13
8636: PUSH
8637: LD_EXP 13
8641: PUSH
8642: LD_VAR 0 4
8646: UNION
8647: ST_TO_ADDR
// if spotted then
8648: LD_VAR 0 5
8652: IFFALSE 8679
// RemoveSeeing ( xy [ 1 ] , xy [ 2 ] , 1 ) ;
8654: LD_VAR 0 6
8658: PUSH
8659: LD_INT 1
8661: ARRAY
8662: PPUSH
8663: LD_VAR 0 6
8667: PUSH
8668: LD_INT 2
8670: ARRAY
8671: PPUSH
8672: LD_INT 1
8674: PPUSH
8675: CALL_OW 331
// for i in tmp do
8679: LD_ADDR_VAR 0 2
8683: PUSH
8684: LD_VAR 0 4
8688: PUSH
8689: FOR_IN
8690: IFFALSE 8706
// SetSide ( i , 1 ) ;
8692: LD_VAR 0 2
8696: PPUSH
8697: LD_INT 1
8699: PPUSH
8700: CALL_OW 235
8704: GO 8689
8706: POP
8707: POP
// if UnitFilter ( tmp , [ [ f_sex , sex_male ] , [ f_ok ] ] ) then
8708: LD_VAR 0 4
8712: PPUSH
8713: LD_INT 26
8715: PUSH
8716: LD_INT 1
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: PUSH
8723: LD_INT 50
8725: PUSH
8726: EMPTY
8727: LIST
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: PPUSH
8733: CALL_OW 72
8737: IFFALSE 8780
// Say ( UnitFilter ( tmp , [ [ f_sex , sex_male ] , [ f_ok ] ] ) [ 1 ] , Dcargo ) ;
8739: LD_VAR 0 4
8743: PPUSH
8744: LD_INT 26
8746: PUSH
8747: LD_INT 1
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: PUSH
8754: LD_INT 50
8756: PUSH
8757: EMPTY
8758: LIST
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: PPUSH
8764: CALL_OW 72
8768: PUSH
8769: LD_INT 1
8771: ARRAY
8772: PPUSH
8773: LD_STRING Dcargo
8775: PPUSH
8776: CALL_OW 88
// end ;
8780: LD_VAR 0 1
8784: RET
// export function SecondReinforcements ; var un , veh , i ; begin
8785: LD_INT 0
8787: PPUSH
8788: PPUSH
8789: PPUSH
8790: PPUSH
// uc_side := 1 ;
8791: LD_ADDR_OWVAR 20
8795: PUSH
8796: LD_INT 1
8798: ST_TO_ADDR
// uc_nation := 1 ;
8799: LD_ADDR_OWVAR 21
8803: PUSH
8804: LD_INT 1
8806: ST_TO_ADDR
// ResetHc ;
8807: CALL 68787 0 0
// PrepareHuman ( false , 3 , 3 ) ;
8811: LD_INT 0
8813: PPUSH
8814: LD_INT 3
8816: PPUSH
8817: LD_INT 3
8819: PPUSH
8820: CALL_OW 380
// un := CreateHuman ;
8824: LD_ADDR_VAR 0 2
8828: PUSH
8829: CALL_OW 44
8833: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_double_gun , 90 ) ;
8834: LD_INT 3
8836: PPUSH
8837: LD_INT 1
8839: PPUSH
8840: LD_INT 1
8842: PPUSH
8843: LD_INT 5
8845: PPUSH
8846: LD_INT 90
8848: PPUSH
8849: CALL 35809 0 5
// veh := CreateVehicle ;
8853: LD_ADDR_VAR 0 3
8857: PUSH
8858: CALL_OW 45
8862: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8863: LD_VAR 0 3
8867: PPUSH
8868: LD_INT 2
8870: PPUSH
8871: CALL_OW 233
// PlaceUnitXYR ( veh , 83 , 154 , 10 , false ) ;
8875: LD_VAR 0 3
8879: PPUSH
8880: LD_INT 83
8882: PPUSH
8883: LD_INT 154
8885: PPUSH
8886: LD_INT 10
8888: PPUSH
8889: LD_INT 0
8891: PPUSH
8892: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
8896: LD_VAR 0 2
8900: PPUSH
8901: LD_VAR 0 3
8905: PPUSH
8906: CALL_OW 52
// for i := 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
8910: LD_ADDR_VAR 0 4
8914: PUSH
8915: DOUBLE
8916: LD_INT 1
8918: DEC
8919: ST_TO_ADDR
8920: LD_INT 4
8922: PUSH
8923: LD_INT 3
8925: PUSH
8926: LD_INT 3
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: LIST
8933: PUSH
8934: LD_OWVAR 67
8938: ARRAY
8939: PUSH
8940: FOR_TO
8941: IFFALSE 8989
// begin PrepareHuman ( false , 1 , 3 ) ;
8943: LD_INT 0
8945: PPUSH
8946: LD_INT 1
8948: PPUSH
8949: LD_INT 3
8951: PPUSH
8952: CALL_OW 380
// un := CreateHuman ;
8956: LD_ADDR_VAR 0 2
8960: PUSH
8961: CALL_OW 44
8965: ST_TO_ADDR
// PlaceUnitXYR ( un , 83 , 154 , 10 , false ) ;
8966: LD_VAR 0 2
8970: PPUSH
8971: LD_INT 83
8973: PPUSH
8974: LD_INT 154
8976: PPUSH
8977: LD_INT 10
8979: PPUSH
8980: LD_INT 0
8982: PPUSH
8983: CALL_OW 50
// end ;
8987: GO 8940
8989: POP
8990: POP
// PrepareHuman ( sex_male , 1 , 3 ) ;
8991: LD_INT 1
8993: PPUSH
8994: LD_INT 1
8996: PPUSH
8997: LD_INT 3
8999: PPUSH
9000: CALL_OW 380
// un := CreateHuman ;
9004: LD_ADDR_VAR 0 2
9008: PUSH
9009: CALL_OW 44
9013: ST_TO_ADDR
// PlaceUnitXYR ( un , 83 , 154 , 10 , false ) ;
9014: LD_VAR 0 2
9018: PPUSH
9019: LD_INT 83
9021: PPUSH
9022: LD_INT 154
9024: PPUSH
9025: LD_INT 10
9027: PPUSH
9028: LD_INT 0
9030: PPUSH
9031: CALL_OW 50
// SayRadio ( un , Dhelp ) ;
9035: LD_VAR 0 2
9039: PPUSH
9040: LD_STRING Dhelp
9042: PPUSH
9043: CALL_OW 94
// ResetHc ;
9047: CALL 68787 0 0
// end ;
9051: LD_VAR 0 1
9055: RET
// every 0 0$1 trigger russianAlert do var i , tmp , towers ;
9056: LD_EXP 5
9060: IFFALSE 9202
9062: GO 9064
9064: DISABLE
9065: LD_INT 0
9067: PPUSH
9068: PPUSH
9069: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_inside ] ] ) ;
9070: LD_ADDR_VAR 0 2
9074: PUSH
9075: LD_EXP 20
9079: PPUSH
9080: LD_INT 25
9082: PUSH
9083: LD_INT 1
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: PUSH
9090: LD_INT 54
9092: PUSH
9093: EMPTY
9094: LIST
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PPUSH
9100: CALL_OW 72
9104: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
9105: LD_ADDR_VAR 0 3
9109: PUSH
9110: LD_INT 22
9112: PUSH
9113: LD_INT 6
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PUSH
9120: LD_INT 30
9122: PUSH
9123: LD_INT 32
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: PPUSH
9134: CALL_OW 69
9138: ST_TO_ADDR
// for i := 1 to tmp do
9139: LD_ADDR_VAR 0 1
9143: PUSH
9144: DOUBLE
9145: LD_INT 1
9147: DEC
9148: ST_TO_ADDR
9149: LD_VAR 0 2
9153: PUSH
9154: FOR_TO
9155: IFFALSE 9200
// begin ComExitBuilding ( tmp [ i ] ) ;
9157: LD_VAR 0 2
9161: PUSH
9162: LD_VAR 0 1
9166: ARRAY
9167: PPUSH
9168: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , towers [ i ] ) ;
9172: LD_VAR 0 2
9176: PUSH
9177: LD_VAR 0 1
9181: ARRAY
9182: PPUSH
9183: LD_VAR 0 3
9187: PUSH
9188: LD_VAR 0 1
9192: ARRAY
9193: PPUSH
9194: CALL_OW 180
// end ;
9198: GO 9154
9200: POP
9201: POP
// end ;
9202: PPOPN 3
9204: END
// every 0 0$1 trigger russianAlert and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) do var i , noncombat ;
9205: LD_EXP 5
9209: PUSH
9210: LD_INT 22
9212: PUSH
9213: LD_INT 2
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: PUSH
9220: LD_INT 101
9222: PUSH
9223: LD_INT 6
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: PPUSH
9234: CALL_OW 69
9238: AND
9239: IFFALSE 9385
9241: GO 9243
9243: DISABLE
9244: LD_INT 0
9246: PPUSH
9247: PPUSH
// begin SayRadio ( Kurin , D9a-Kur-1 ) ;
9248: LD_EXP 16
9252: PPUSH
9253: LD_STRING D9a-Kur-1
9255: PPUSH
9256: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
9260: LD_EXP 19
9264: PPUSH
9265: LD_STRING D9a-Bur-1
9267: PPUSH
9268: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
9272: LD_EXP 16
9276: PPUSH
9277: LD_STRING D9a-Kur-2
9279: PPUSH
9280: CALL_OW 94
// retreatFromOmicron := true ;
9284: LD_ADDR_EXP 8
9288: PUSH
9289: LD_INT 1
9291: ST_TO_ADDR
// noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
9292: LD_ADDR_VAR 0 2
9296: PUSH
9297: LD_EXP 18
9301: PUSH
9302: LD_EXP 20
9306: PUSH
9307: LD_EXP 21
9311: UNION
9312: PPUSH
9313: LD_INT 3
9315: PUSH
9316: LD_INT 25
9318: PUSH
9319: LD_INT 1
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: PPUSH
9330: CALL_OW 72
9334: UNION
9335: ST_TO_ADDR
// for i in noncombat do
9336: LD_ADDR_VAR 0 1
9340: PUSH
9341: LD_VAR 0 2
9345: PUSH
9346: FOR_IN
9347: IFFALSE 9383
// begin if IsInUnit ( i ) then
9349: LD_VAR 0 1
9353: PPUSH
9354: CALL_OW 310
9358: IFFALSE 9369
// ComExitBuilding ( i ) ;
9360: LD_VAR 0 1
9364: PPUSH
9365: CALL_OW 122
// AddComMoveToArea ( i , westEscapeArea ) ;
9369: LD_VAR 0 1
9373: PPUSH
9374: LD_INT 4
9376: PPUSH
9377: CALL_OW 173
// end ;
9381: GO 9346
9383: POP
9384: POP
// end ;
9385: PPOPN 2
9387: END
// every 0 0$1 trigger tick > rand ( 20 20$00 , 30 30$00 ) do var un ;
9388: LD_OWVAR 1
9392: PUSH
9393: LD_INT 42000
9395: PPUSH
9396: LD_INT 63000
9398: PPUSH
9399: CALL_OW 12
9403: GREATER
9404: IFFALSE 9549
9406: GO 9408
9408: DISABLE
9409: LD_INT 0
9411: PPUSH
// begin uc_side := 4 ;
9412: LD_ADDR_OWVAR 20
9416: PUSH
9417: LD_INT 4
9419: ST_TO_ADDR
// uc_nation := 4 ;
9420: LD_ADDR_OWVAR 21
9424: PUSH
9425: LD_INT 4
9427: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 3 ) ;
9428: LD_INT 1
9430: PPUSH
9431: LD_INT 4
9433: PPUSH
9434: LD_INT 3
9436: PPUSH
9437: CALL_OW 380
// hc_name :=  ;
9441: LD_ADDR_OWVAR 26
9445: PUSH
9446: LD_STRING 
9448: ST_TO_ADDR
// un := CreateHuman ;
9449: LD_ADDR_VAR 0 1
9453: PUSH
9454: CALL_OW 44
9458: ST_TO_ADDR
// PlaceUnitXYR ( un , 161 , 162 , 3 , true ) ;
9459: LD_VAR 0 1
9463: PPUSH
9464: LD_INT 161
9466: PPUSH
9467: LD_INT 162
9469: PPUSH
9470: LD_INT 3
9472: PPUSH
9473: LD_INT 1
9475: PPUSH
9476: CALL_OW 50
// ResetHc ;
9480: CALL 68787 0 0
// wait ( 0 0$3 ) ;
9484: LD_INT 105
9486: PPUSH
9487: CALL_OW 67
// SayRadio ( un , Dun1 ) ;
9491: LD_VAR 0 1
9495: PPUSH
9496: LD_STRING Dun1
9498: PPUSH
9499: CALL_OW 94
// repeat wait ( 0 0$1 ) ;
9503: LD_INT 35
9505: PPUSH
9506: CALL_OW 67
// if IsDead ( un ) then
9510: LD_VAR 0 1
9514: PPUSH
9515: CALL_OW 301
9519: IFFALSE 9523
// exit ;
9521: GO 9549
// until See ( 1 , un ) ;
9523: LD_INT 1
9525: PPUSH
9526: LD_VAR 0 1
9530: PPUSH
9531: CALL_OW 292
9535: IFFALSE 9503
// SetSide ( un , 1 ) ;
9537: LD_VAR 0 1
9541: PPUSH
9542: LD_INT 1
9544: PPUSH
9545: CALL_OW 235
// end ;
9549: PPOPN 1
9551: END
// every 0 0$1 trigger tanksCounter >= 20 do
9552: LD_EXP 12
9556: PUSH
9557: LD_INT 20
9559: GREATEREQUAL
9560: IFFALSE 9572
9562: GO 9564
9564: DISABLE
// SetAchievement ( ACH_PANZERKNACKER ) ;
9565: LD_STRING ACH_PANZERKNACKER
9567: PPUSH
9568: CALL_OW 543
9572: END
// every 0 0$1 trigger tick > rand ( 45 45$00 , 52 52$00 ) do var un ;
9573: LD_OWVAR 1
9577: PUSH
9578: LD_INT 94500
9580: PPUSH
9581: LD_INT 109200
9583: PPUSH
9584: CALL_OW 12
9588: GREATER
9589: IFFALSE 9852
9591: GO 9593
9593: DISABLE
9594: LD_INT 0
9596: PPUSH
// begin PrepareArabian ;
9597: CALL 6570 0 0
// uc_side := 4 ;
9601: LD_ADDR_OWVAR 20
9605: PUSH
9606: LD_INT 4
9608: ST_TO_ADDR
// uc_nation := 1 ;
9609: LD_ADDR_OWVAR 21
9613: PUSH
9614: LD_INT 1
9616: ST_TO_ADDR
// ResetHc ;
9617: CALL 68787 0 0
// un := CreateHuman ;
9621: LD_ADDR_VAR 0 1
9625: PUSH
9626: CALL_OW 44
9630: ST_TO_ADDR
// SayRadio ( un , ar_come ) ;
9631: LD_VAR 0 1
9635: PPUSH
9636: LD_STRING ar_come
9638: PPUSH
9639: CALL_OW 94
// wait ( 0 0$20 ) ;
9643: LD_INT 700
9645: PPUSH
9646: CALL_OW 67
// SayRadio ( Harrison , DR-Back ) ;
9650: LD_EXP 15
9654: PPUSH
9655: LD_STRING DR-Back
9657: PPUSH
9658: CALL_OW 94
// ChangeMissionObjectives ( target3 ) ;
9662: LD_STRING target3
9664: PPUSH
9665: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
9669: LD_INT 10
9671: PPUSH
9672: LD_INT 1
9674: PPUSH
9675: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
9679: LD_INT 35
9681: PPUSH
9682: CALL_OW 67
// until IsInArea ( Sikorski , escapeArea ) or FilterUnitsInArea ( escapeArea , [ f_side , 1 ] ) ;
9686: LD_EXP 14
9690: PPUSH
9691: LD_INT 10
9693: PPUSH
9694: CALL_OW 308
9698: PUSH
9699: LD_INT 10
9701: PPUSH
9702: LD_INT 22
9704: PUSH
9705: LD_INT 1
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PPUSH
9712: CALL_OW 70
9716: OR
9717: IFFALSE 9679
// SayRadio ( Harrison , you_win ) ;
9719: LD_EXP 15
9723: PPUSH
9724: LD_STRING you_win
9726: PPUSH
9727: CALL_OW 94
// AddMedal ( med , 1 ) ;
9731: LD_STRING med
9733: PPUSH
9734: LD_INT 1
9736: PPUSH
9737: CALL_OW 101
// if ruLoseCounter > [ 27 , 32 , 36 ] [ Difficulty ] then
9741: LD_EXP 11
9745: PUSH
9746: LD_INT 27
9748: PUSH
9749: LD_INT 32
9751: PUSH
9752: LD_INT 36
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: LIST
9759: PUSH
9760: LD_OWVAR 67
9764: ARRAY
9765: GREATER
9766: IFFALSE 9780
// AddMedal ( ru , 1 ) else
9768: LD_STRING ru
9770: PPUSH
9771: LD_INT 1
9773: PPUSH
9774: CALL_OW 101
9778: GO 9791
// AddMedal ( ru , - 1 ) ;
9780: LD_STRING ru
9782: PPUSH
9783: LD_INT 1
9785: NEG
9786: PPUSH
9787: CALL_OW 101
// if usLoseCounter < [ 4 , 3 , 2 ] [ Difficulty ] then
9791: LD_EXP 10
9795: PUSH
9796: LD_INT 4
9798: PUSH
9799: LD_INT 3
9801: PUSH
9802: LD_INT 2
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: LIST
9809: PUSH
9810: LD_OWVAR 67
9814: ARRAY
9815: LESS
9816: IFFALSE 9830
// AddMedal ( pep , 1 ) else
9818: LD_STRING pep
9820: PPUSH
9821: LD_INT 1
9823: PPUSH
9824: CALL_OW 101
9828: GO 9841
// AddMedal ( pep , - 1 ) ;
9830: LD_STRING pep
9832: PPUSH
9833: LD_INT 1
9835: NEG
9836: PPUSH
9837: CALL_OW 101
// GiveMedals ( MAIN ) ;
9841: LD_STRING MAIN
9843: PPUSH
9844: CALL_OW 102
// YouWin ;
9848: CALL_OW 103
// end ; end_of_file
9852: PPOPN 1
9854: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
9855: LD_VAR 0 1
9859: PPUSH
9860: CALL 10711 0 1
// if un = Sikorski then
9864: LD_VAR 0 1
9868: PUSH
9869: LD_EXP 14
9873: EQUAL
9874: IFFALSE 9883
// YouLost ( sik ) ;
9876: LD_STRING sik
9878: PPUSH
9879: CALL_OW 104
// if un in russianOmicronAttackers then
9883: LD_VAR 0 1
9887: PUSH
9888: LD_EXP 24
9892: IN
9893: IFFALSE 9911
// russianOmicronAttackers := russianOmicronAttackers diff un ;
9895: LD_ADDR_EXP 24
9899: PUSH
9900: LD_EXP 24
9904: PUSH
9905: LD_VAR 0 1
9909: DIFF
9910: ST_TO_ADDR
// if un in russianCargo then
9911: LD_VAR 0 1
9915: PUSH
9916: LD_EXP 25
9920: IN
9921: IFFALSE 9939
// russianCargo := russianCargo diff un ;
9923: LD_ADDR_EXP 25
9927: PUSH
9928: LD_EXP 25
9932: PUSH
9933: LD_VAR 0 1
9937: DIFF
9938: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) then
9939: LD_VAR 0 1
9943: PUSH
9944: LD_INT 22
9946: PUSH
9947: LD_INT 3
9949: PUSH
9950: EMPTY
9951: LIST
9952: LIST
9953: PUSH
9954: LD_INT 34
9956: PUSH
9957: LD_INT 51
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: PPUSH
9968: CALL_OW 69
9972: IN
9973: IFFALSE 9982
// ProduceNew ( 1 ) ;
9975: LD_INT 1
9977: PPUSH
9978: CALL 4695 0 1
// if GetSide ( un ) in [ 1 , 4 ] and GetType ( un ) = unit_human and GetNation ( un ) = nation_american then
9982: LD_VAR 0 1
9986: PPUSH
9987: CALL_OW 255
9991: PUSH
9992: LD_INT 1
9994: PUSH
9995: LD_INT 4
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: IN
10002: PUSH
10003: LD_VAR 0 1
10007: PPUSH
10008: CALL_OW 247
10012: PUSH
10013: LD_INT 1
10015: EQUAL
10016: AND
10017: PUSH
10018: LD_VAR 0 1
10022: PPUSH
10023: CALL_OW 248
10027: PUSH
10028: LD_INT 1
10030: EQUAL
10031: AND
10032: IFFALSE 10048
// usLoseCounter := usLoseCounter + 1 ;
10034: LD_ADDR_EXP 10
10038: PUSH
10039: LD_EXP 10
10043: PUSH
10044: LD_INT 1
10046: PLUS
10047: ST_TO_ADDR
// end ;
10048: PPOPN 1
10050: END
// on VehicleConstructed ( veh , factory ) do begin SOS_VehicleConstructed ( veh , factory ) ;
10051: LD_VAR 0 1
10055: PPUSH
10056: LD_VAR 0 2
10060: PPUSH
10061: CALL 10831 0 2
// if GetSide ( factory ) <> 3 then
10065: LD_VAR 0 2
10069: PPUSH
10070: CALL_OW 255
10074: PUSH
10075: LD_INT 3
10077: NONEQUAL
10078: IFFALSE 10082
// exit ;
10080: GO 10144
// if GetWeapon ( veh ) = ru_cargo_bay then
10082: LD_VAR 0 1
10086: PPUSH
10087: CALL_OW 264
10091: PUSH
10092: LD_INT 51
10094: EQUAL
10095: IFFALSE 10099
// exit ;
10097: GO 10144
// russianOmicronAttackers := russianOmicronAttackers union [ veh , IsInUnit ( veh ) ] ;
10099: LD_ADDR_EXP 24
10103: PUSH
10104: LD_EXP 24
10108: PUSH
10109: LD_VAR 0 1
10113: PUSH
10114: LD_VAR 0 1
10118: PPUSH
10119: CALL_OW 310
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: UNION
10128: ST_TO_ADDR
// AddComAgressiveMove ( veh , 71 , 37 ) ;
10129: LD_VAR 0 1
10133: PPUSH
10134: LD_INT 71
10136: PPUSH
10137: LD_INT 37
10139: PPUSH
10140: CALL_OW 174
// end ;
10144: PPOPN 2
10146: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId in russianOmicronAttackers then
10147: LD_VAR 0 2
10151: PUSH
10152: LD_EXP 24
10156: IN
10157: IFFALSE 10175
// russianOmicronAttackers := russianOmicronAttackers diff oldId ;
10159: LD_ADDR_EXP 24
10163: PUSH
10164: LD_EXP 24
10168: PUSH
10169: LD_VAR 0 2
10173: DIFF
10174: ST_TO_ADDR
// if oldId in russianCargo then
10175: LD_VAR 0 2
10179: PUSH
10180: LD_EXP 25
10184: IN
10185: IFFALSE 10203
// russianCargo := russianCargo diff oldId ;
10187: LD_ADDR_EXP 25
10191: PUSH
10192: LD_EXP 25
10196: PUSH
10197: LD_VAR 0 2
10201: DIFF
10202: ST_TO_ADDR
// if newId in russianOmicronAttackers then
10203: LD_VAR 0 1
10207: PUSH
10208: LD_EXP 24
10212: IN
10213: IFFALSE 10231
// russianOmicronAttackers := russianOmicronAttackers diff newId ;
10215: LD_ADDR_EXP 24
10219: PUSH
10220: LD_EXP 24
10224: PUSH
10225: LD_VAR 0 1
10229: DIFF
10230: ST_TO_ADDR
// if newId in russianCargo then
10231: LD_VAR 0 1
10235: PUSH
10236: LD_EXP 25
10240: IN
10241: IFFALSE 10259
// russianCargo := russianCargo diff newId ;
10243: LD_ADDR_EXP 25
10247: PUSH
10248: LD_EXP 25
10252: PUSH
10253: LD_VAR 0 1
10257: DIFF
10258: ST_TO_ADDR
// end ;
10259: PPOPN 4
10261: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
10262: LD_VAR 0 1
10266: PPUSH
10267: LD_VAR 0 2
10271: PPUSH
10272: LD_VAR 0 3
10276: PPUSH
10277: CALL 10807 0 3
// if killerSide in [ 1 , 4 ] and GetSide ( un ) in [ 3 , 6 ] then
10281: LD_VAR 0 2
10285: PUSH
10286: LD_INT 1
10288: PUSH
10289: LD_INT 4
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: IN
10296: PUSH
10297: LD_VAR 0 1
10301: PPUSH
10302: CALL_OW 255
10306: PUSH
10307: LD_INT 3
10309: PUSH
10310: LD_INT 6
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: IN
10317: AND
10318: IFFALSE 10334
// ruLoseCounter := ruLoseCounter + 1 ;
10320: LD_ADDR_EXP 11
10324: PUSH
10325: LD_EXP 11
10329: PUSH
10330: LD_INT 1
10332: PLUS
10333: ST_TO_ADDR
// if killerSide in [ 1 , 4 ] and GetType ( un ) = unit_vehicle and GetSide ( un ) in [ 3 , 6 ] then
10334: LD_VAR 0 2
10338: PUSH
10339: LD_INT 1
10341: PUSH
10342: LD_INT 4
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: IN
10349: PUSH
10350: LD_VAR 0 1
10354: PPUSH
10355: CALL_OW 247
10359: PUSH
10360: LD_INT 2
10362: EQUAL
10363: AND
10364: PUSH
10365: LD_VAR 0 1
10369: PPUSH
10370: CALL_OW 255
10374: PUSH
10375: LD_INT 3
10377: PUSH
10378: LD_INT 6
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: IN
10385: AND
10386: IFFALSE 10402
// tanksCounter := tanksCounter + 1 ;
10388: LD_ADDR_EXP 12
10392: PUSH
10393: LD_EXP 12
10397: PUSH
10398: LD_INT 1
10400: PLUS
10401: ST_TO_ADDR
// end ;
10402: PPOPN 3
10404: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) in [ 3 , 6 ] then
10405: LD_VAR 0 1
10409: PPUSH
10410: CALL_OW 255
10414: PUSH
10415: LD_INT 3
10417: PUSH
10418: LD_INT 6
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: IN
10425: IFFALSE 10574
// begin ComRepairVehicle ( driver , veh ) ;
10427: LD_VAR 0 1
10431: PPUSH
10432: LD_VAR 0 2
10436: PPUSH
10437: CALL_OW 129
// repeat wait ( 0 0$1 ) ;
10441: LD_INT 35
10443: PPUSH
10444: CALL_OW 67
// until IsDead ( veh ) or IsDead ( driver ) or GetLives ( veh ) > 250 ;
10448: LD_VAR 0 2
10452: PPUSH
10453: CALL_OW 301
10457: PUSH
10458: LD_VAR 0 1
10462: PPUSH
10463: CALL_OW 301
10467: OR
10468: PUSH
10469: LD_VAR 0 2
10473: PPUSH
10474: CALL_OW 256
10478: PUSH
10479: LD_INT 250
10481: GREATER
10482: OR
10483: IFFALSE 10441
// if GetLives ( veh ) > 250 then
10485: LD_VAR 0 2
10489: PPUSH
10490: CALL_OW 256
10494: PUSH
10495: LD_INT 250
10497: GREATER
10498: IFFALSE 10574
// begin ComEnterUnit ( driver , veh ) ;
10500: LD_VAR 0 1
10504: PPUSH
10505: LD_VAR 0 2
10509: PPUSH
10510: CALL_OW 120
// AddComMoveXY ( driver , 71 , 29 ) ;
10514: LD_VAR 0 1
10518: PPUSH
10519: LD_INT 71
10521: PPUSH
10522: LD_INT 29
10524: PPUSH
10525: CALL_OW 171
// SetTag ( veh , 1 ) ;
10529: LD_VAR 0 2
10533: PPUSH
10534: LD_INT 1
10536: PPUSH
10537: CALL_OW 109
// if not veh in russianOmicronAttackers then
10541: LD_VAR 0 2
10545: PUSH
10546: LD_EXP 24
10550: IN
10551: NOT
10552: IFFALSE 10574
// russianOmicronAttackers := Join ( russianOmicronAttackers , veh ) ;
10554: LD_ADDR_EXP 24
10558: PUSH
10559: LD_EXP 24
10563: PPUSH
10564: LD_VAR 0 2
10568: PPUSH
10569: CALL 68262 0 2
10573: ST_TO_ADDR
// end ; end ; end ;
10574: PPOPN 4
10576: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10577: LD_VAR 0 1
10581: PPUSH
10582: CALL 10815 0 1
// end ; end_of_file
10586: PPOPN 1
10588: END
// every 1 1$35 trigger sikorskiInOmicron and GetResourceArea ( cratesSpawnArea , mat_cans ) < [ 18 , 15 , 12 ] [ Difficulty ] do
10589: LD_EXP 9
10593: PUSH
10594: LD_INT 6
10596: PPUSH
10597: LD_INT 1
10599: PPUSH
10600: CALL_OW 287
10604: PUSH
10605: LD_INT 18
10607: PUSH
10608: LD_INT 15
10610: PUSH
10611: LD_INT 12
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: LIST
10618: PUSH
10619: LD_OWVAR 67
10623: ARRAY
10624: LESS
10625: AND
10626: IFFALSE 10668
10628: GO 10630
10630: DISABLE
// begin enable ;
10631: ENABLE
// wait ( rand ( 0 0$10 , 0 0$30 ) ) ;
10632: LD_INT 350
10634: PPUSH
10635: LD_INT 1050
10637: PPUSH
10638: CALL_OW 12
10642: PPUSH
10643: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , cratesSpawnArea , true ) ;
10647: LD_INT 2
10649: PPUSH
10650: LD_INT 5
10652: PPUSH
10653: CALL_OW 12
10657: PPUSH
10658: LD_INT 6
10660: PPUSH
10661: LD_INT 1
10663: PPUSH
10664: CALL_OW 55
// end ;
10668: END
// every 1 1$25 trigger GetResourceArea ( ruCratesSpawnArea , mat_cans ) < 5 do
10669: LD_INT 7
10671: PPUSH
10672: LD_INT 1
10674: PPUSH
10675: CALL_OW 287
10679: PUSH
10680: LD_INT 5
10682: LESS
10683: IFFALSE 10710
10685: GO 10687
10687: DISABLE
// begin enable ;
10688: ENABLE
// CreateCratesArea ( rand ( 2 , 5 ) , ruCratesSpawnArea , true ) ;
10689: LD_INT 2
10691: PPUSH
10692: LD_INT 5
10694: PPUSH
10695: CALL_OW 12
10699: PPUSH
10700: LD_INT 7
10702: PPUSH
10703: LD_INT 1
10705: PPUSH
10706: CALL_OW 55
// end ; end_of_file end_of_file
10710: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
10711: LD_INT 0
10713: PPUSH
10714: PPUSH
10715: PPUSH
10716: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
10717: LD_VAR 0 1
10721: PPUSH
10722: CALL_OW 264
10726: PUSH
10727: LD_INT 91
10729: EQUAL
10730: IFFALSE 10802
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10732: LD_INT 68
10734: PPUSH
10735: LD_VAR 0 1
10739: PPUSH
10740: CALL_OW 255
10744: PPUSH
10745: CALL_OW 321
10749: PUSH
10750: LD_INT 2
10752: EQUAL
10753: IFFALSE 10765
// eff := 70 else
10755: LD_ADDR_VAR 0 4
10759: PUSH
10760: LD_INT 70
10762: ST_TO_ADDR
10763: GO 10773
// eff := 30 ;
10765: LD_ADDR_VAR 0 4
10769: PUSH
10770: LD_INT 30
10772: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
10773: LD_VAR 0 1
10777: PPUSH
10778: CALL_OW 250
10782: PPUSH
10783: LD_VAR 0 1
10787: PPUSH
10788: CALL_OW 251
10792: PPUSH
10793: LD_VAR 0 4
10797: PPUSH
10798: CALL_OW 495
// end ; end ;
10802: LD_VAR 0 2
10806: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
10807: LD_INT 0
10809: PPUSH
// end ;
10810: LD_VAR 0 4
10814: RET
// export function SOS_Command ( cmd ) ; begin
10815: LD_INT 0
10817: PPUSH
// end ;
10818: LD_VAR 0 2
10822: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
10823: LD_INT 0
10825: PPUSH
// end ;
10826: LD_VAR 0 6
10830: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
10831: LD_INT 0
10833: PPUSH
10834: PPUSH
// if not vehicle or not factory then
10835: LD_VAR 0 1
10839: NOT
10840: PUSH
10841: LD_VAR 0 2
10845: NOT
10846: OR
10847: IFFALSE 10851
// exit ;
10849: GO 11082
// if factoryWaypoints >= factory then
10851: LD_EXP 95
10855: PUSH
10856: LD_VAR 0 2
10860: GREATEREQUAL
10861: IFFALSE 11082
// if factoryWaypoints [ factory ] then
10863: LD_EXP 95
10867: PUSH
10868: LD_VAR 0 2
10872: ARRAY
10873: IFFALSE 11082
// begin if GetControl ( vehicle ) = control_manual then
10875: LD_VAR 0 1
10879: PPUSH
10880: CALL_OW 263
10884: PUSH
10885: LD_INT 1
10887: EQUAL
10888: IFFALSE 10969
// begin driver := IsDrivenBy ( vehicle ) ;
10890: LD_ADDR_VAR 0 4
10894: PUSH
10895: LD_VAR 0 1
10899: PPUSH
10900: CALL_OW 311
10904: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
10905: LD_VAR 0 4
10909: PPUSH
10910: LD_EXP 95
10914: PUSH
10915: LD_VAR 0 2
10919: ARRAY
10920: PUSH
10921: LD_INT 3
10923: ARRAY
10924: PPUSH
10925: LD_EXP 95
10929: PUSH
10930: LD_VAR 0 2
10934: ARRAY
10935: PUSH
10936: LD_INT 4
10938: ARRAY
10939: PPUSH
10940: CALL_OW 171
// AddComExitVehicle ( driver ) ;
10944: LD_VAR 0 4
10948: PPUSH
10949: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
10953: LD_VAR 0 4
10957: PPUSH
10958: LD_VAR 0 2
10962: PPUSH
10963: CALL_OW 180
// end else
10967: GO 11082
// if GetControl ( vehicle ) = control_remote then
10969: LD_VAR 0 1
10973: PPUSH
10974: CALL_OW 263
10978: PUSH
10979: LD_INT 2
10981: EQUAL
10982: IFFALSE 11043
// begin wait ( 0 0$2 ) ;
10984: LD_INT 70
10986: PPUSH
10987: CALL_OW 67
// if Connect ( vehicle ) then
10991: LD_VAR 0 1
10995: PPUSH
10996: CALL 38900 0 1
11000: IFFALSE 11041
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
11002: LD_VAR 0 1
11006: PPUSH
11007: LD_EXP 95
11011: PUSH
11012: LD_VAR 0 2
11016: ARRAY
11017: PUSH
11018: LD_INT 3
11020: ARRAY
11021: PPUSH
11022: LD_EXP 95
11026: PUSH
11027: LD_VAR 0 2
11031: ARRAY
11032: PUSH
11033: LD_INT 4
11035: ARRAY
11036: PPUSH
11037: CALL_OW 171
// end else
11041: GO 11082
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
11043: LD_VAR 0 1
11047: PPUSH
11048: LD_EXP 95
11052: PUSH
11053: LD_VAR 0 2
11057: ARRAY
11058: PUSH
11059: LD_INT 3
11061: ARRAY
11062: PPUSH
11063: LD_EXP 95
11067: PUSH
11068: LD_VAR 0 2
11072: ARRAY
11073: PUSH
11074: LD_INT 4
11076: ARRAY
11077: PPUSH
11078: CALL_OW 171
// end ; end ;
11082: LD_VAR 0 3
11086: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
11087: LD_INT 0
11089: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
11090: LD_VAR 0 1
11094: PUSH
11095: LD_INT 250
11097: EQUAL
11098: PUSH
11099: LD_VAR 0 2
11103: PPUSH
11104: CALL_OW 264
11108: PUSH
11109: LD_INT 81
11111: EQUAL
11112: AND
11113: IFFALSE 11134
// MinerPlaceMine ( unit , x , y ) ;
11115: LD_VAR 0 2
11119: PPUSH
11120: LD_VAR 0 4
11124: PPUSH
11125: LD_VAR 0 5
11129: PPUSH
11130: CALL 13519 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
11134: LD_VAR 0 1
11138: PUSH
11139: LD_INT 251
11141: EQUAL
11142: PUSH
11143: LD_VAR 0 2
11147: PPUSH
11148: CALL_OW 264
11152: PUSH
11153: LD_INT 81
11155: EQUAL
11156: AND
11157: IFFALSE 11178
// MinerDetonateMine ( unit , x , y ) ;
11159: LD_VAR 0 2
11163: PPUSH
11164: LD_VAR 0 4
11168: PPUSH
11169: LD_VAR 0 5
11173: PPUSH
11174: CALL 13794 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
11178: LD_VAR 0 1
11182: PUSH
11183: LD_INT 252
11185: EQUAL
11186: PUSH
11187: LD_VAR 0 2
11191: PPUSH
11192: CALL_OW 264
11196: PUSH
11197: LD_INT 81
11199: EQUAL
11200: AND
11201: IFFALSE 11222
// MinerCreateMinefield ( unit , x , y ) ;
11203: LD_VAR 0 2
11207: PPUSH
11208: LD_VAR 0 4
11212: PPUSH
11213: LD_VAR 0 5
11217: PPUSH
11218: CALL 14211 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
11222: LD_VAR 0 1
11226: PUSH
11227: LD_INT 253
11229: EQUAL
11230: PUSH
11231: LD_VAR 0 2
11235: PPUSH
11236: CALL_OW 257
11240: PUSH
11241: LD_INT 5
11243: EQUAL
11244: AND
11245: IFFALSE 11266
// ComBinocular ( unit , x , y ) ;
11247: LD_VAR 0 2
11251: PPUSH
11252: LD_VAR 0 4
11256: PPUSH
11257: LD_VAR 0 5
11261: PPUSH
11262: CALL 14580 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
11266: LD_VAR 0 1
11270: PUSH
11271: LD_INT 254
11273: EQUAL
11274: PUSH
11275: LD_VAR 0 2
11279: PPUSH
11280: CALL_OW 264
11284: PUSH
11285: LD_INT 99
11287: EQUAL
11288: AND
11289: PUSH
11290: LD_VAR 0 3
11294: PPUSH
11295: CALL_OW 263
11299: PUSH
11300: LD_INT 3
11302: EQUAL
11303: AND
11304: IFFALSE 11320
// HackDestroyVehicle ( unit , selectedUnit ) ;
11306: LD_VAR 0 2
11310: PPUSH
11311: LD_VAR 0 3
11315: PPUSH
11316: CALL 12883 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
11320: LD_VAR 0 1
11324: PUSH
11325: LD_INT 255
11327: EQUAL
11328: PUSH
11329: LD_VAR 0 2
11333: PPUSH
11334: CALL_OW 264
11338: PUSH
11339: LD_INT 14
11341: PUSH
11342: LD_INT 53
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: IN
11349: AND
11350: PUSH
11351: LD_VAR 0 4
11355: PPUSH
11356: LD_VAR 0 5
11360: PPUSH
11361: CALL_OW 488
11365: AND
11366: IFFALSE 11390
// CutTreeXYR ( unit , x , y , 12 ) ;
11368: LD_VAR 0 2
11372: PPUSH
11373: LD_VAR 0 4
11377: PPUSH
11378: LD_VAR 0 5
11382: PPUSH
11383: LD_INT 12
11385: PPUSH
11386: CALL 11453 0 4
// if cmd = 256 then
11390: LD_VAR 0 1
11394: PUSH
11395: LD_INT 256
11397: EQUAL
11398: IFFALSE 11419
// SetFactoryWaypoint ( unit , x , y ) ;
11400: LD_VAR 0 2
11404: PPUSH
11405: LD_VAR 0 4
11409: PPUSH
11410: LD_VAR 0 5
11414: PPUSH
11415: CALL 29483 0 3
// if cmd = 257 then
11419: LD_VAR 0 1
11423: PUSH
11424: LD_INT 257
11426: EQUAL
11427: IFFALSE 11448
// SetWarehouseGatheringPoint ( unit , x , y ) ;
11429: LD_VAR 0 2
11433: PPUSH
11434: LD_VAR 0 4
11438: PPUSH
11439: LD_VAR 0 5
11443: PPUSH
11444: CALL 29845 0 3
// end ;
11448: LD_VAR 0 6
11452: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
11453: LD_INT 0
11455: PPUSH
11456: PPUSH
11457: PPUSH
11458: PPUSH
11459: PPUSH
11460: PPUSH
11461: PPUSH
11462: PPUSH
11463: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
11464: LD_VAR 0 1
11468: NOT
11469: PUSH
11470: LD_VAR 0 2
11474: PPUSH
11475: LD_VAR 0 3
11479: PPUSH
11480: CALL_OW 488
11484: NOT
11485: OR
11486: PUSH
11487: LD_VAR 0 4
11491: NOT
11492: OR
11493: IFFALSE 11497
// exit ;
11495: GO 11837
// list := [ ] ;
11497: LD_ADDR_VAR 0 13
11501: PUSH
11502: EMPTY
11503: ST_TO_ADDR
// if x - r < 0 then
11504: LD_VAR 0 2
11508: PUSH
11509: LD_VAR 0 4
11513: MINUS
11514: PUSH
11515: LD_INT 0
11517: LESS
11518: IFFALSE 11530
// min_x := 0 else
11520: LD_ADDR_VAR 0 7
11524: PUSH
11525: LD_INT 0
11527: ST_TO_ADDR
11528: GO 11546
// min_x := x - r ;
11530: LD_ADDR_VAR 0 7
11534: PUSH
11535: LD_VAR 0 2
11539: PUSH
11540: LD_VAR 0 4
11544: MINUS
11545: ST_TO_ADDR
// if y - r < 0 then
11546: LD_VAR 0 3
11550: PUSH
11551: LD_VAR 0 4
11555: MINUS
11556: PUSH
11557: LD_INT 0
11559: LESS
11560: IFFALSE 11572
// min_y := 0 else
11562: LD_ADDR_VAR 0 8
11566: PUSH
11567: LD_INT 0
11569: ST_TO_ADDR
11570: GO 11588
// min_y := y - r ;
11572: LD_ADDR_VAR 0 8
11576: PUSH
11577: LD_VAR 0 3
11581: PUSH
11582: LD_VAR 0 4
11586: MINUS
11587: ST_TO_ADDR
// max_x := x + r ;
11588: LD_ADDR_VAR 0 9
11592: PUSH
11593: LD_VAR 0 2
11597: PUSH
11598: LD_VAR 0 4
11602: PLUS
11603: ST_TO_ADDR
// max_y := y + r ;
11604: LD_ADDR_VAR 0 10
11608: PUSH
11609: LD_VAR 0 3
11613: PUSH
11614: LD_VAR 0 4
11618: PLUS
11619: ST_TO_ADDR
// for _x = min_x to max_x do
11620: LD_ADDR_VAR 0 11
11624: PUSH
11625: DOUBLE
11626: LD_VAR 0 7
11630: DEC
11631: ST_TO_ADDR
11632: LD_VAR 0 9
11636: PUSH
11637: FOR_TO
11638: IFFALSE 11755
// for _y = min_y to max_y do
11640: LD_ADDR_VAR 0 12
11644: PUSH
11645: DOUBLE
11646: LD_VAR 0 8
11650: DEC
11651: ST_TO_ADDR
11652: LD_VAR 0 10
11656: PUSH
11657: FOR_TO
11658: IFFALSE 11751
// begin if not ValidHex ( _x , _y ) then
11660: LD_VAR 0 11
11664: PPUSH
11665: LD_VAR 0 12
11669: PPUSH
11670: CALL_OW 488
11674: NOT
11675: IFFALSE 11679
// continue ;
11677: GO 11657
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
11679: LD_VAR 0 11
11683: PPUSH
11684: LD_VAR 0 12
11688: PPUSH
11689: CALL_OW 351
11693: PUSH
11694: LD_VAR 0 11
11698: PPUSH
11699: LD_VAR 0 12
11703: PPUSH
11704: CALL_OW 554
11708: AND
11709: IFFALSE 11749
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
11711: LD_ADDR_VAR 0 13
11715: PUSH
11716: LD_VAR 0 13
11720: PPUSH
11721: LD_VAR 0 13
11725: PUSH
11726: LD_INT 1
11728: PLUS
11729: PPUSH
11730: LD_VAR 0 11
11734: PUSH
11735: LD_VAR 0 12
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: PPUSH
11744: CALL_OW 2
11748: ST_TO_ADDR
// end ;
11749: GO 11657
11751: POP
11752: POP
11753: GO 11637
11755: POP
11756: POP
// if not list then
11757: LD_VAR 0 13
11761: NOT
11762: IFFALSE 11766
// exit ;
11764: GO 11837
// for i in list do
11766: LD_ADDR_VAR 0 6
11770: PUSH
11771: LD_VAR 0 13
11775: PUSH
11776: FOR_IN
11777: IFFALSE 11835
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
11779: LD_VAR 0 1
11783: PPUSH
11784: LD_STRING M
11786: PUSH
11787: LD_VAR 0 6
11791: PUSH
11792: LD_INT 1
11794: ARRAY
11795: PUSH
11796: LD_VAR 0 6
11800: PUSH
11801: LD_INT 2
11803: ARRAY
11804: PUSH
11805: LD_INT 0
11807: PUSH
11808: LD_INT 0
11810: PUSH
11811: LD_INT 0
11813: PUSH
11814: LD_INT 0
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: PUSH
11826: EMPTY
11827: LIST
11828: PPUSH
11829: CALL_OW 447
11833: GO 11776
11835: POP
11836: POP
// end ;
11837: LD_VAR 0 5
11841: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
11842: LD_EXP 26
11846: NOT
11847: IFFALSE 11897
11849: GO 11851
11851: DISABLE
// begin initHack := true ;
11852: LD_ADDR_EXP 26
11856: PUSH
11857: LD_INT 1
11859: ST_TO_ADDR
// hackTanks := [ ] ;
11860: LD_ADDR_EXP 27
11864: PUSH
11865: EMPTY
11866: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
11867: LD_ADDR_EXP 28
11871: PUSH
11872: EMPTY
11873: ST_TO_ADDR
// hackLimit := 3 ;
11874: LD_ADDR_EXP 29
11878: PUSH
11879: LD_INT 3
11881: ST_TO_ADDR
// hackDist := 12 ;
11882: LD_ADDR_EXP 30
11886: PUSH
11887: LD_INT 12
11889: ST_TO_ADDR
// hackCounter := [ ] ;
11890: LD_ADDR_EXP 31
11894: PUSH
11895: EMPTY
11896: ST_TO_ADDR
// end ;
11897: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
11898: LD_EXP 26
11902: PUSH
11903: LD_INT 34
11905: PUSH
11906: LD_INT 99
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: PPUSH
11913: CALL_OW 69
11917: AND
11918: IFFALSE 12171
11920: GO 11922
11922: DISABLE
11923: LD_INT 0
11925: PPUSH
11926: PPUSH
// begin enable ;
11927: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
11928: LD_ADDR_VAR 0 1
11932: PUSH
11933: LD_INT 34
11935: PUSH
11936: LD_INT 99
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: PPUSH
11943: CALL_OW 69
11947: PUSH
11948: FOR_IN
11949: IFFALSE 12169
// begin if not i in hackTanks then
11951: LD_VAR 0 1
11955: PUSH
11956: LD_EXP 27
11960: IN
11961: NOT
11962: IFFALSE 12045
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
11964: LD_ADDR_EXP 27
11968: PUSH
11969: LD_EXP 27
11973: PPUSH
11974: LD_EXP 27
11978: PUSH
11979: LD_INT 1
11981: PLUS
11982: PPUSH
11983: LD_VAR 0 1
11987: PPUSH
11988: CALL_OW 1
11992: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
11993: LD_ADDR_EXP 28
11997: PUSH
11998: LD_EXP 28
12002: PPUSH
12003: LD_EXP 28
12007: PUSH
12008: LD_INT 1
12010: PLUS
12011: PPUSH
12012: EMPTY
12013: PPUSH
12014: CALL_OW 1
12018: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
12019: LD_ADDR_EXP 31
12023: PUSH
12024: LD_EXP 31
12028: PPUSH
12029: LD_EXP 31
12033: PUSH
12034: LD_INT 1
12036: PLUS
12037: PPUSH
12038: EMPTY
12039: PPUSH
12040: CALL_OW 1
12044: ST_TO_ADDR
// end ; if not IsOk ( i ) then
12045: LD_VAR 0 1
12049: PPUSH
12050: CALL_OW 302
12054: NOT
12055: IFFALSE 12068
// begin HackUnlinkAll ( i ) ;
12057: LD_VAR 0 1
12061: PPUSH
12062: CALL 12174 0 1
// continue ;
12066: GO 11948
// end ; HackCheckCapturedStatus ( i ) ;
12068: LD_VAR 0 1
12072: PPUSH
12073: CALL 12617 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
12077: LD_ADDR_VAR 0 2
12081: PUSH
12082: LD_INT 81
12084: PUSH
12085: LD_VAR 0 1
12089: PPUSH
12090: CALL_OW 255
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: PUSH
12099: LD_INT 33
12101: PUSH
12102: LD_INT 3
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PUSH
12109: LD_INT 91
12111: PUSH
12112: LD_VAR 0 1
12116: PUSH
12117: LD_EXP 30
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: LIST
12126: PUSH
12127: LD_INT 50
12129: PUSH
12130: EMPTY
12131: LIST
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: PPUSH
12139: CALL_OW 69
12143: ST_TO_ADDR
// if not tmp then
12144: LD_VAR 0 2
12148: NOT
12149: IFFALSE 12153
// continue ;
12151: GO 11948
// HackLink ( i , tmp ) ;
12153: LD_VAR 0 1
12157: PPUSH
12158: LD_VAR 0 2
12162: PPUSH
12163: CALL 12310 0 2
// end ;
12167: GO 11948
12169: POP
12170: POP
// end ;
12171: PPOPN 2
12173: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
12174: LD_INT 0
12176: PPUSH
12177: PPUSH
12178: PPUSH
// if not hack in hackTanks then
12179: LD_VAR 0 1
12183: PUSH
12184: LD_EXP 27
12188: IN
12189: NOT
12190: IFFALSE 12194
// exit ;
12192: GO 12305
// index := GetElementIndex ( hackTanks , hack ) ;
12194: LD_ADDR_VAR 0 4
12198: PUSH
12199: LD_EXP 27
12203: PPUSH
12204: LD_VAR 0 1
12208: PPUSH
12209: CALL 35716 0 2
12213: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
12214: LD_EXP 28
12218: PUSH
12219: LD_VAR 0 4
12223: ARRAY
12224: IFFALSE 12305
// begin for i in hackTanksCaptured [ index ] do
12226: LD_ADDR_VAR 0 3
12230: PUSH
12231: LD_EXP 28
12235: PUSH
12236: LD_VAR 0 4
12240: ARRAY
12241: PUSH
12242: FOR_IN
12243: IFFALSE 12269
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
12245: LD_VAR 0 3
12249: PUSH
12250: LD_INT 1
12252: ARRAY
12253: PPUSH
12254: LD_VAR 0 3
12258: PUSH
12259: LD_INT 2
12261: ARRAY
12262: PPUSH
12263: CALL_OW 235
12267: GO 12242
12269: POP
12270: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
12271: LD_ADDR_EXP 28
12275: PUSH
12276: LD_EXP 28
12280: PPUSH
12281: LD_VAR 0 4
12285: PPUSH
12286: EMPTY
12287: PPUSH
12288: CALL_OW 1
12292: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
12293: LD_VAR 0 1
12297: PPUSH
12298: LD_INT 0
12300: PPUSH
12301: CALL_OW 505
// end ; end ;
12305: LD_VAR 0 2
12309: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
12310: LD_INT 0
12312: PPUSH
12313: PPUSH
12314: PPUSH
// if not hack in hackTanks or not vehicles then
12315: LD_VAR 0 1
12319: PUSH
12320: LD_EXP 27
12324: IN
12325: NOT
12326: PUSH
12327: LD_VAR 0 2
12331: NOT
12332: OR
12333: IFFALSE 12337
// exit ;
12335: GO 12612
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
12337: LD_ADDR_VAR 0 2
12341: PUSH
12342: LD_VAR 0 1
12346: PPUSH
12347: LD_VAR 0 2
12351: PPUSH
12352: LD_INT 1
12354: PPUSH
12355: LD_INT 1
12357: PPUSH
12358: CALL 36366 0 4
12362: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
12363: LD_ADDR_VAR 0 5
12367: PUSH
12368: LD_EXP 27
12372: PPUSH
12373: LD_VAR 0 1
12377: PPUSH
12378: CALL 35716 0 2
12382: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
12383: LD_EXP 28
12387: PUSH
12388: LD_VAR 0 5
12392: ARRAY
12393: PUSH
12394: LD_EXP 29
12398: LESS
12399: IFFALSE 12588
// begin for i := 1 to vehicles do
12401: LD_ADDR_VAR 0 4
12405: PUSH
12406: DOUBLE
12407: LD_INT 1
12409: DEC
12410: ST_TO_ADDR
12411: LD_VAR 0 2
12415: PUSH
12416: FOR_TO
12417: IFFALSE 12586
// begin if hackTanksCaptured [ index ] = hackLimit then
12419: LD_EXP 28
12423: PUSH
12424: LD_VAR 0 5
12428: ARRAY
12429: PUSH
12430: LD_EXP 29
12434: EQUAL
12435: IFFALSE 12439
// break ;
12437: GO 12586
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
12439: LD_ADDR_EXP 31
12443: PUSH
12444: LD_EXP 31
12448: PPUSH
12449: LD_VAR 0 5
12453: PPUSH
12454: LD_EXP 31
12458: PUSH
12459: LD_VAR 0 5
12463: ARRAY
12464: PUSH
12465: LD_INT 1
12467: PLUS
12468: PPUSH
12469: CALL_OW 1
12473: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
12474: LD_ADDR_EXP 28
12478: PUSH
12479: LD_EXP 28
12483: PPUSH
12484: LD_VAR 0 5
12488: PUSH
12489: LD_EXP 28
12493: PUSH
12494: LD_VAR 0 5
12498: ARRAY
12499: PUSH
12500: LD_INT 1
12502: PLUS
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: PPUSH
12508: LD_VAR 0 2
12512: PUSH
12513: LD_VAR 0 4
12517: ARRAY
12518: PUSH
12519: LD_VAR 0 2
12523: PUSH
12524: LD_VAR 0 4
12528: ARRAY
12529: PPUSH
12530: CALL_OW 255
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: PPUSH
12539: CALL 35931 0 3
12543: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
12544: LD_VAR 0 2
12548: PUSH
12549: LD_VAR 0 4
12553: ARRAY
12554: PPUSH
12555: LD_VAR 0 1
12559: PPUSH
12560: CALL_OW 255
12564: PPUSH
12565: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
12569: LD_VAR 0 2
12573: PUSH
12574: LD_VAR 0 4
12578: ARRAY
12579: PPUSH
12580: CALL_OW 141
// end ;
12584: GO 12416
12586: POP
12587: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12588: LD_VAR 0 1
12592: PPUSH
12593: LD_EXP 28
12597: PUSH
12598: LD_VAR 0 5
12602: ARRAY
12603: PUSH
12604: LD_INT 0
12606: PLUS
12607: PPUSH
12608: CALL_OW 505
// end ;
12612: LD_VAR 0 3
12616: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
12617: LD_INT 0
12619: PPUSH
12620: PPUSH
12621: PPUSH
12622: PPUSH
// if not hack in hackTanks then
12623: LD_VAR 0 1
12627: PUSH
12628: LD_EXP 27
12632: IN
12633: NOT
12634: IFFALSE 12638
// exit ;
12636: GO 12878
// index := GetElementIndex ( hackTanks , hack ) ;
12638: LD_ADDR_VAR 0 4
12642: PUSH
12643: LD_EXP 27
12647: PPUSH
12648: LD_VAR 0 1
12652: PPUSH
12653: CALL 35716 0 2
12657: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
12658: LD_ADDR_VAR 0 3
12662: PUSH
12663: DOUBLE
12664: LD_EXP 28
12668: PUSH
12669: LD_VAR 0 4
12673: ARRAY
12674: INC
12675: ST_TO_ADDR
12676: LD_INT 1
12678: PUSH
12679: FOR_DOWNTO
12680: IFFALSE 12852
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
12682: LD_ADDR_VAR 0 5
12686: PUSH
12687: LD_EXP 28
12691: PUSH
12692: LD_VAR 0 4
12696: ARRAY
12697: PUSH
12698: LD_VAR 0 3
12702: ARRAY
12703: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
12704: LD_VAR 0 5
12708: PUSH
12709: LD_INT 1
12711: ARRAY
12712: PPUSH
12713: CALL_OW 302
12717: NOT
12718: PUSH
12719: LD_VAR 0 5
12723: PUSH
12724: LD_INT 1
12726: ARRAY
12727: PPUSH
12728: CALL_OW 255
12732: PUSH
12733: LD_VAR 0 1
12737: PPUSH
12738: CALL_OW 255
12742: NONEQUAL
12743: OR
12744: IFFALSE 12850
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
12746: LD_VAR 0 5
12750: PUSH
12751: LD_INT 1
12753: ARRAY
12754: PPUSH
12755: CALL_OW 305
12759: PUSH
12760: LD_VAR 0 5
12764: PUSH
12765: LD_INT 1
12767: ARRAY
12768: PPUSH
12769: CALL_OW 255
12773: PUSH
12774: LD_VAR 0 1
12778: PPUSH
12779: CALL_OW 255
12783: EQUAL
12784: AND
12785: IFFALSE 12809
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
12787: LD_VAR 0 5
12791: PUSH
12792: LD_INT 1
12794: ARRAY
12795: PPUSH
12796: LD_VAR 0 5
12800: PUSH
12801: LD_INT 2
12803: ARRAY
12804: PPUSH
12805: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
12809: LD_ADDR_EXP 28
12813: PUSH
12814: LD_EXP 28
12818: PPUSH
12819: LD_VAR 0 4
12823: PPUSH
12824: LD_EXP 28
12828: PUSH
12829: LD_VAR 0 4
12833: ARRAY
12834: PPUSH
12835: LD_VAR 0 3
12839: PPUSH
12840: CALL_OW 3
12844: PPUSH
12845: CALL_OW 1
12849: ST_TO_ADDR
// end ; end ;
12850: GO 12679
12852: POP
12853: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12854: LD_VAR 0 1
12858: PPUSH
12859: LD_EXP 28
12863: PUSH
12864: LD_VAR 0 4
12868: ARRAY
12869: PUSH
12870: LD_INT 0
12872: PLUS
12873: PPUSH
12874: CALL_OW 505
// end ;
12878: LD_VAR 0 2
12882: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
12883: LD_INT 0
12885: PPUSH
12886: PPUSH
12887: PPUSH
12888: PPUSH
// if not hack in hackTanks then
12889: LD_VAR 0 1
12893: PUSH
12894: LD_EXP 27
12898: IN
12899: NOT
12900: IFFALSE 12904
// exit ;
12902: GO 12989
// index := GetElementIndex ( hackTanks , hack ) ;
12904: LD_ADDR_VAR 0 5
12908: PUSH
12909: LD_EXP 27
12913: PPUSH
12914: LD_VAR 0 1
12918: PPUSH
12919: CALL 35716 0 2
12923: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
12924: LD_ADDR_VAR 0 4
12928: PUSH
12929: DOUBLE
12930: LD_INT 1
12932: DEC
12933: ST_TO_ADDR
12934: LD_EXP 28
12938: PUSH
12939: LD_VAR 0 5
12943: ARRAY
12944: PUSH
12945: FOR_TO
12946: IFFALSE 12987
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
12948: LD_EXP 28
12952: PUSH
12953: LD_VAR 0 5
12957: ARRAY
12958: PUSH
12959: LD_VAR 0 4
12963: ARRAY
12964: PUSH
12965: LD_INT 1
12967: ARRAY
12968: PUSH
12969: LD_VAR 0 2
12973: EQUAL
12974: IFFALSE 12985
// KillUnit ( vehicle ) ;
12976: LD_VAR 0 2
12980: PPUSH
12981: CALL_OW 66
12985: GO 12945
12987: POP
12988: POP
// end ;
12989: LD_VAR 0 3
12993: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
12994: LD_EXP 32
12998: NOT
12999: IFFALSE 13034
13001: GO 13003
13003: DISABLE
// begin initMiner := true ;
13004: LD_ADDR_EXP 32
13008: PUSH
13009: LD_INT 1
13011: ST_TO_ADDR
// minersList := [ ] ;
13012: LD_ADDR_EXP 33
13016: PUSH
13017: EMPTY
13018: ST_TO_ADDR
// minerMinesList := [ ] ;
13019: LD_ADDR_EXP 34
13023: PUSH
13024: EMPTY
13025: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
13026: LD_ADDR_EXP 35
13030: PUSH
13031: LD_INT 5
13033: ST_TO_ADDR
// end ;
13034: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
13035: LD_EXP 32
13039: PUSH
13040: LD_INT 34
13042: PUSH
13043: LD_INT 81
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: PPUSH
13050: CALL_OW 69
13054: AND
13055: IFFALSE 13516
13057: GO 13059
13059: DISABLE
13060: LD_INT 0
13062: PPUSH
13063: PPUSH
13064: PPUSH
13065: PPUSH
// begin enable ;
13066: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
13067: LD_ADDR_VAR 0 1
13071: PUSH
13072: LD_INT 34
13074: PUSH
13075: LD_INT 81
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: PPUSH
13082: CALL_OW 69
13086: PUSH
13087: FOR_IN
13088: IFFALSE 13160
// begin if not i in minersList then
13090: LD_VAR 0 1
13094: PUSH
13095: LD_EXP 33
13099: IN
13100: NOT
13101: IFFALSE 13158
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
13103: LD_ADDR_EXP 33
13107: PUSH
13108: LD_EXP 33
13112: PPUSH
13113: LD_EXP 33
13117: PUSH
13118: LD_INT 1
13120: PLUS
13121: PPUSH
13122: LD_VAR 0 1
13126: PPUSH
13127: CALL_OW 1
13131: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
13132: LD_ADDR_EXP 34
13136: PUSH
13137: LD_EXP 34
13141: PPUSH
13142: LD_EXP 34
13146: PUSH
13147: LD_INT 1
13149: PLUS
13150: PPUSH
13151: EMPTY
13152: PPUSH
13153: CALL_OW 1
13157: ST_TO_ADDR
// end end ;
13158: GO 13087
13160: POP
13161: POP
// for i := minerMinesList downto 1 do
13162: LD_ADDR_VAR 0 1
13166: PUSH
13167: DOUBLE
13168: LD_EXP 34
13172: INC
13173: ST_TO_ADDR
13174: LD_INT 1
13176: PUSH
13177: FOR_DOWNTO
13178: IFFALSE 13514
// begin if IsLive ( minersList [ i ] ) then
13180: LD_EXP 33
13184: PUSH
13185: LD_VAR 0 1
13189: ARRAY
13190: PPUSH
13191: CALL_OW 300
13195: IFFALSE 13223
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
13197: LD_EXP 33
13201: PUSH
13202: LD_VAR 0 1
13206: ARRAY
13207: PPUSH
13208: LD_EXP 34
13212: PUSH
13213: LD_VAR 0 1
13217: ARRAY
13218: PPUSH
13219: CALL_OW 505
// if not minerMinesList [ i ] then
13223: LD_EXP 34
13227: PUSH
13228: LD_VAR 0 1
13232: ARRAY
13233: NOT
13234: IFFALSE 13238
// continue ;
13236: GO 13177
// for j := minerMinesList [ i ] downto 1 do
13238: LD_ADDR_VAR 0 2
13242: PUSH
13243: DOUBLE
13244: LD_EXP 34
13248: PUSH
13249: LD_VAR 0 1
13253: ARRAY
13254: INC
13255: ST_TO_ADDR
13256: LD_INT 1
13258: PUSH
13259: FOR_DOWNTO
13260: IFFALSE 13510
// begin side := GetSide ( minersList [ i ] ) ;
13262: LD_ADDR_VAR 0 3
13266: PUSH
13267: LD_EXP 33
13271: PUSH
13272: LD_VAR 0 1
13276: ARRAY
13277: PPUSH
13278: CALL_OW 255
13282: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
13283: LD_ADDR_VAR 0 4
13287: PUSH
13288: LD_EXP 34
13292: PUSH
13293: LD_VAR 0 1
13297: ARRAY
13298: PUSH
13299: LD_VAR 0 2
13303: ARRAY
13304: PUSH
13305: LD_INT 1
13307: ARRAY
13308: PPUSH
13309: LD_EXP 34
13313: PUSH
13314: LD_VAR 0 1
13318: ARRAY
13319: PUSH
13320: LD_VAR 0 2
13324: ARRAY
13325: PUSH
13326: LD_INT 2
13328: ARRAY
13329: PPUSH
13330: CALL_OW 428
13334: ST_TO_ADDR
// if not tmp then
13335: LD_VAR 0 4
13339: NOT
13340: IFFALSE 13344
// continue ;
13342: GO 13259
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
13344: LD_VAR 0 4
13348: PUSH
13349: LD_INT 81
13351: PUSH
13352: LD_VAR 0 3
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PPUSH
13361: CALL_OW 69
13365: IN
13366: PUSH
13367: LD_EXP 34
13371: PUSH
13372: LD_VAR 0 1
13376: ARRAY
13377: PUSH
13378: LD_VAR 0 2
13382: ARRAY
13383: PUSH
13384: LD_INT 1
13386: ARRAY
13387: PPUSH
13388: LD_EXP 34
13392: PUSH
13393: LD_VAR 0 1
13397: ARRAY
13398: PUSH
13399: LD_VAR 0 2
13403: ARRAY
13404: PUSH
13405: LD_INT 2
13407: ARRAY
13408: PPUSH
13409: CALL_OW 458
13413: AND
13414: IFFALSE 13508
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
13416: LD_EXP 34
13420: PUSH
13421: LD_VAR 0 1
13425: ARRAY
13426: PUSH
13427: LD_VAR 0 2
13431: ARRAY
13432: PUSH
13433: LD_INT 1
13435: ARRAY
13436: PPUSH
13437: LD_EXP 34
13441: PUSH
13442: LD_VAR 0 1
13446: ARRAY
13447: PUSH
13448: LD_VAR 0 2
13452: ARRAY
13453: PUSH
13454: LD_INT 2
13456: ARRAY
13457: PPUSH
13458: LD_VAR 0 3
13462: PPUSH
13463: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
13467: LD_ADDR_EXP 34
13471: PUSH
13472: LD_EXP 34
13476: PPUSH
13477: LD_VAR 0 1
13481: PPUSH
13482: LD_EXP 34
13486: PUSH
13487: LD_VAR 0 1
13491: ARRAY
13492: PPUSH
13493: LD_VAR 0 2
13497: PPUSH
13498: CALL_OW 3
13502: PPUSH
13503: CALL_OW 1
13507: ST_TO_ADDR
// end ; end ;
13508: GO 13259
13510: POP
13511: POP
// end ;
13512: GO 13177
13514: POP
13515: POP
// end ;
13516: PPOPN 4
13518: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
13519: LD_INT 0
13521: PPUSH
13522: PPUSH
// result := false ;
13523: LD_ADDR_VAR 0 4
13527: PUSH
13528: LD_INT 0
13530: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
13531: LD_VAR 0 1
13535: PPUSH
13536: CALL_OW 264
13540: PUSH
13541: LD_INT 81
13543: EQUAL
13544: NOT
13545: IFFALSE 13549
// exit ;
13547: GO 13789
// index := GetElementIndex ( minersList , unit ) ;
13549: LD_ADDR_VAR 0 5
13553: PUSH
13554: LD_EXP 33
13558: PPUSH
13559: LD_VAR 0 1
13563: PPUSH
13564: CALL 35716 0 2
13568: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
13569: LD_EXP 34
13573: PUSH
13574: LD_VAR 0 5
13578: ARRAY
13579: PUSH
13580: LD_EXP 35
13584: GREATEREQUAL
13585: IFFALSE 13589
// exit ;
13587: GO 13789
// ComMoveXY ( unit , x , y ) ;
13589: LD_VAR 0 1
13593: PPUSH
13594: LD_VAR 0 2
13598: PPUSH
13599: LD_VAR 0 3
13603: PPUSH
13604: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13608: LD_INT 35
13610: PPUSH
13611: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
13615: LD_VAR 0 1
13619: PPUSH
13620: LD_VAR 0 2
13624: PPUSH
13625: LD_VAR 0 3
13629: PPUSH
13630: CALL 67071 0 3
13634: NOT
13635: PUSH
13636: LD_VAR 0 1
13640: PPUSH
13641: CALL_OW 314
13645: AND
13646: IFFALSE 13650
// exit ;
13648: GO 13789
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
13650: LD_VAR 0 2
13654: PPUSH
13655: LD_VAR 0 3
13659: PPUSH
13660: CALL_OW 428
13664: PUSH
13665: LD_VAR 0 1
13669: EQUAL
13670: PUSH
13671: LD_VAR 0 1
13675: PPUSH
13676: CALL_OW 314
13680: NOT
13681: AND
13682: IFFALSE 13608
// PlaySoundXY ( x , y , PlantMine ) ;
13684: LD_VAR 0 2
13688: PPUSH
13689: LD_VAR 0 3
13693: PPUSH
13694: LD_STRING PlantMine
13696: PPUSH
13697: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
13701: LD_VAR 0 2
13705: PPUSH
13706: LD_VAR 0 3
13710: PPUSH
13711: LD_VAR 0 1
13715: PPUSH
13716: CALL_OW 255
13720: PPUSH
13721: LD_INT 0
13723: PPUSH
13724: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
13728: LD_ADDR_EXP 34
13732: PUSH
13733: LD_EXP 34
13737: PPUSH
13738: LD_VAR 0 5
13742: PUSH
13743: LD_EXP 34
13747: PUSH
13748: LD_VAR 0 5
13752: ARRAY
13753: PUSH
13754: LD_INT 1
13756: PLUS
13757: PUSH
13758: EMPTY
13759: LIST
13760: LIST
13761: PPUSH
13762: LD_VAR 0 2
13766: PUSH
13767: LD_VAR 0 3
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: PPUSH
13776: CALL 35931 0 3
13780: ST_TO_ADDR
// result := true ;
13781: LD_ADDR_VAR 0 4
13785: PUSH
13786: LD_INT 1
13788: ST_TO_ADDR
// end ;
13789: LD_VAR 0 4
13793: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
13794: LD_INT 0
13796: PPUSH
13797: PPUSH
13798: PPUSH
// if not unit in minersList then
13799: LD_VAR 0 1
13803: PUSH
13804: LD_EXP 33
13808: IN
13809: NOT
13810: IFFALSE 13814
// exit ;
13812: GO 14206
// index := GetElementIndex ( minersList , unit ) ;
13814: LD_ADDR_VAR 0 6
13818: PUSH
13819: LD_EXP 33
13823: PPUSH
13824: LD_VAR 0 1
13828: PPUSH
13829: CALL 35716 0 2
13833: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
13834: LD_ADDR_VAR 0 5
13838: PUSH
13839: DOUBLE
13840: LD_EXP 34
13844: PUSH
13845: LD_VAR 0 6
13849: ARRAY
13850: INC
13851: ST_TO_ADDR
13852: LD_INT 1
13854: PUSH
13855: FOR_DOWNTO
13856: IFFALSE 14017
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
13858: LD_EXP 34
13862: PUSH
13863: LD_VAR 0 6
13867: ARRAY
13868: PUSH
13869: LD_VAR 0 5
13873: ARRAY
13874: PUSH
13875: LD_INT 1
13877: ARRAY
13878: PUSH
13879: LD_VAR 0 2
13883: EQUAL
13884: PUSH
13885: LD_EXP 34
13889: PUSH
13890: LD_VAR 0 6
13894: ARRAY
13895: PUSH
13896: LD_VAR 0 5
13900: ARRAY
13901: PUSH
13902: LD_INT 2
13904: ARRAY
13905: PUSH
13906: LD_VAR 0 3
13910: EQUAL
13911: AND
13912: IFFALSE 14015
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
13914: LD_EXP 34
13918: PUSH
13919: LD_VAR 0 6
13923: ARRAY
13924: PUSH
13925: LD_VAR 0 5
13929: ARRAY
13930: PUSH
13931: LD_INT 1
13933: ARRAY
13934: PPUSH
13935: LD_EXP 34
13939: PUSH
13940: LD_VAR 0 6
13944: ARRAY
13945: PUSH
13946: LD_VAR 0 5
13950: ARRAY
13951: PUSH
13952: LD_INT 2
13954: ARRAY
13955: PPUSH
13956: LD_VAR 0 1
13960: PPUSH
13961: CALL_OW 255
13965: PPUSH
13966: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
13970: LD_ADDR_EXP 34
13974: PUSH
13975: LD_EXP 34
13979: PPUSH
13980: LD_VAR 0 6
13984: PPUSH
13985: LD_EXP 34
13989: PUSH
13990: LD_VAR 0 6
13994: ARRAY
13995: PPUSH
13996: LD_VAR 0 5
14000: PPUSH
14001: CALL_OW 3
14005: PPUSH
14006: CALL_OW 1
14010: ST_TO_ADDR
// exit ;
14011: POP
14012: POP
14013: GO 14206
// end ; end ;
14015: GO 13855
14017: POP
14018: POP
// for i := minerMinesList [ index ] downto 1 do
14019: LD_ADDR_VAR 0 5
14023: PUSH
14024: DOUBLE
14025: LD_EXP 34
14029: PUSH
14030: LD_VAR 0 6
14034: ARRAY
14035: INC
14036: ST_TO_ADDR
14037: LD_INT 1
14039: PUSH
14040: FOR_DOWNTO
14041: IFFALSE 14204
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
14043: LD_EXP 34
14047: PUSH
14048: LD_VAR 0 6
14052: ARRAY
14053: PUSH
14054: LD_VAR 0 5
14058: ARRAY
14059: PUSH
14060: LD_INT 1
14062: ARRAY
14063: PPUSH
14064: LD_EXP 34
14068: PUSH
14069: LD_VAR 0 6
14073: ARRAY
14074: PUSH
14075: LD_VAR 0 5
14079: ARRAY
14080: PUSH
14081: LD_INT 2
14083: ARRAY
14084: PPUSH
14085: LD_VAR 0 2
14089: PPUSH
14090: LD_VAR 0 3
14094: PPUSH
14095: CALL_OW 298
14099: PUSH
14100: LD_INT 6
14102: LESS
14103: IFFALSE 14202
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
14105: LD_EXP 34
14109: PUSH
14110: LD_VAR 0 6
14114: ARRAY
14115: PUSH
14116: LD_VAR 0 5
14120: ARRAY
14121: PUSH
14122: LD_INT 1
14124: ARRAY
14125: PPUSH
14126: LD_EXP 34
14130: PUSH
14131: LD_VAR 0 6
14135: ARRAY
14136: PUSH
14137: LD_VAR 0 5
14141: ARRAY
14142: PUSH
14143: LD_INT 2
14145: ARRAY
14146: PPUSH
14147: LD_VAR 0 1
14151: PPUSH
14152: CALL_OW 255
14156: PPUSH
14157: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
14161: LD_ADDR_EXP 34
14165: PUSH
14166: LD_EXP 34
14170: PPUSH
14171: LD_VAR 0 6
14175: PPUSH
14176: LD_EXP 34
14180: PUSH
14181: LD_VAR 0 6
14185: ARRAY
14186: PPUSH
14187: LD_VAR 0 5
14191: PPUSH
14192: CALL_OW 3
14196: PPUSH
14197: CALL_OW 1
14201: ST_TO_ADDR
// end ; end ;
14202: GO 14040
14204: POP
14205: POP
// end ;
14206: LD_VAR 0 4
14210: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
14211: LD_INT 0
14213: PPUSH
14214: PPUSH
14215: PPUSH
14216: PPUSH
14217: PPUSH
14218: PPUSH
14219: PPUSH
14220: PPUSH
14221: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
14222: LD_VAR 0 1
14226: PPUSH
14227: CALL_OW 264
14231: PUSH
14232: LD_INT 81
14234: EQUAL
14235: NOT
14236: PUSH
14237: LD_VAR 0 1
14241: PUSH
14242: LD_EXP 33
14246: IN
14247: NOT
14248: OR
14249: IFFALSE 14253
// exit ;
14251: GO 14575
// index := GetElementIndex ( minersList , unit ) ;
14253: LD_ADDR_VAR 0 6
14257: PUSH
14258: LD_EXP 33
14262: PPUSH
14263: LD_VAR 0 1
14267: PPUSH
14268: CALL 35716 0 2
14272: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
14273: LD_ADDR_VAR 0 8
14277: PUSH
14278: LD_EXP 35
14282: PUSH
14283: LD_EXP 34
14287: PUSH
14288: LD_VAR 0 6
14292: ARRAY
14293: MINUS
14294: ST_TO_ADDR
// if not minesFreeAmount then
14295: LD_VAR 0 8
14299: NOT
14300: IFFALSE 14304
// exit ;
14302: GO 14575
// tmp := [ ] ;
14304: LD_ADDR_VAR 0 7
14308: PUSH
14309: EMPTY
14310: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
14311: LD_ADDR_VAR 0 5
14315: PUSH
14316: DOUBLE
14317: LD_INT 1
14319: DEC
14320: ST_TO_ADDR
14321: LD_VAR 0 8
14325: PUSH
14326: FOR_TO
14327: IFFALSE 14522
// begin _d := rand ( 0 , 5 ) ;
14329: LD_ADDR_VAR 0 11
14333: PUSH
14334: LD_INT 0
14336: PPUSH
14337: LD_INT 5
14339: PPUSH
14340: CALL_OW 12
14344: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
14345: LD_ADDR_VAR 0 12
14349: PUSH
14350: LD_INT 2
14352: PPUSH
14353: LD_INT 6
14355: PPUSH
14356: CALL_OW 12
14360: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
14361: LD_ADDR_VAR 0 9
14365: PUSH
14366: LD_VAR 0 2
14370: PPUSH
14371: LD_VAR 0 11
14375: PPUSH
14376: LD_VAR 0 12
14380: PPUSH
14381: CALL_OW 272
14385: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
14386: LD_ADDR_VAR 0 10
14390: PUSH
14391: LD_VAR 0 3
14395: PPUSH
14396: LD_VAR 0 11
14400: PPUSH
14401: LD_VAR 0 12
14405: PPUSH
14406: CALL_OW 273
14410: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
14411: LD_VAR 0 9
14415: PPUSH
14416: LD_VAR 0 10
14420: PPUSH
14421: CALL_OW 488
14425: PUSH
14426: LD_VAR 0 9
14430: PUSH
14431: LD_VAR 0 10
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: PUSH
14440: LD_VAR 0 7
14444: IN
14445: NOT
14446: AND
14447: PUSH
14448: LD_VAR 0 9
14452: PPUSH
14453: LD_VAR 0 10
14457: PPUSH
14458: CALL_OW 458
14462: NOT
14463: AND
14464: IFFALSE 14506
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
14466: LD_ADDR_VAR 0 7
14470: PUSH
14471: LD_VAR 0 7
14475: PPUSH
14476: LD_VAR 0 7
14480: PUSH
14481: LD_INT 1
14483: PLUS
14484: PPUSH
14485: LD_VAR 0 9
14489: PUSH
14490: LD_VAR 0 10
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: PPUSH
14499: CALL_OW 1
14503: ST_TO_ADDR
14504: GO 14520
// i := i - 1 ;
14506: LD_ADDR_VAR 0 5
14510: PUSH
14511: LD_VAR 0 5
14515: PUSH
14516: LD_INT 1
14518: MINUS
14519: ST_TO_ADDR
// end ;
14520: GO 14326
14522: POP
14523: POP
// for i in tmp do
14524: LD_ADDR_VAR 0 5
14528: PUSH
14529: LD_VAR 0 7
14533: PUSH
14534: FOR_IN
14535: IFFALSE 14573
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
14537: LD_VAR 0 1
14541: PPUSH
14542: LD_VAR 0 5
14546: PUSH
14547: LD_INT 1
14549: ARRAY
14550: PPUSH
14551: LD_VAR 0 5
14555: PUSH
14556: LD_INT 2
14558: ARRAY
14559: PPUSH
14560: CALL 13519 0 3
14564: NOT
14565: IFFALSE 14571
// exit ;
14567: POP
14568: POP
14569: GO 14575
14571: GO 14534
14573: POP
14574: POP
// end ;
14575: LD_VAR 0 4
14579: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
14580: LD_INT 0
14582: PPUSH
14583: PPUSH
14584: PPUSH
14585: PPUSH
14586: PPUSH
14587: PPUSH
14588: PPUSH
// if not GetClass ( unit ) = class_sniper then
14589: LD_VAR 0 1
14593: PPUSH
14594: CALL_OW 257
14598: PUSH
14599: LD_INT 5
14601: EQUAL
14602: NOT
14603: IFFALSE 14607
// exit ;
14605: GO 14995
// dist := 8 ;
14607: LD_ADDR_VAR 0 5
14611: PUSH
14612: LD_INT 8
14614: ST_TO_ADDR
// viewRange := 12 ;
14615: LD_ADDR_VAR 0 7
14619: PUSH
14620: LD_INT 12
14622: ST_TO_ADDR
// side := GetSide ( unit ) ;
14623: LD_ADDR_VAR 0 6
14627: PUSH
14628: LD_VAR 0 1
14632: PPUSH
14633: CALL_OW 255
14637: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
14638: LD_INT 61
14640: PPUSH
14641: LD_VAR 0 6
14645: PPUSH
14646: CALL_OW 321
14650: PUSH
14651: LD_INT 2
14653: EQUAL
14654: IFFALSE 14664
// viewRange := 16 ;
14656: LD_ADDR_VAR 0 7
14660: PUSH
14661: LD_INT 16
14663: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
14664: LD_VAR 0 1
14668: PPUSH
14669: LD_VAR 0 2
14673: PPUSH
14674: LD_VAR 0 3
14678: PPUSH
14679: CALL_OW 297
14683: PUSH
14684: LD_VAR 0 5
14688: GREATER
14689: IFFALSE 14768
// begin ComMoveXY ( unit , x , y ) ;
14691: LD_VAR 0 1
14695: PPUSH
14696: LD_VAR 0 2
14700: PPUSH
14701: LD_VAR 0 3
14705: PPUSH
14706: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14710: LD_INT 35
14712: PPUSH
14713: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
14717: LD_VAR 0 1
14721: PPUSH
14722: LD_VAR 0 2
14726: PPUSH
14727: LD_VAR 0 3
14731: PPUSH
14732: CALL 67071 0 3
14736: NOT
14737: IFFALSE 14741
// exit ;
14739: GO 14995
// until GetDistUnitXY ( unit , x , y ) < dist ;
14741: LD_VAR 0 1
14745: PPUSH
14746: LD_VAR 0 2
14750: PPUSH
14751: LD_VAR 0 3
14755: PPUSH
14756: CALL_OW 297
14760: PUSH
14761: LD_VAR 0 5
14765: LESS
14766: IFFALSE 14710
// end ; ComTurnXY ( unit , x , y ) ;
14768: LD_VAR 0 1
14772: PPUSH
14773: LD_VAR 0 2
14777: PPUSH
14778: LD_VAR 0 3
14782: PPUSH
14783: CALL_OW 118
// wait ( 5 ) ;
14787: LD_INT 5
14789: PPUSH
14790: CALL_OW 67
// _d := GetDir ( unit ) ;
14794: LD_ADDR_VAR 0 10
14798: PUSH
14799: LD_VAR 0 1
14803: PPUSH
14804: CALL_OW 254
14808: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
14809: LD_ADDR_VAR 0 8
14813: PUSH
14814: LD_VAR 0 1
14818: PPUSH
14819: CALL_OW 250
14823: PPUSH
14824: LD_VAR 0 10
14828: PPUSH
14829: LD_VAR 0 5
14833: PPUSH
14834: CALL_OW 272
14838: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
14839: LD_ADDR_VAR 0 9
14843: PUSH
14844: LD_VAR 0 1
14848: PPUSH
14849: CALL_OW 251
14853: PPUSH
14854: LD_VAR 0 10
14858: PPUSH
14859: LD_VAR 0 5
14863: PPUSH
14864: CALL_OW 273
14868: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14869: LD_VAR 0 8
14873: PPUSH
14874: LD_VAR 0 9
14878: PPUSH
14879: CALL_OW 488
14883: NOT
14884: IFFALSE 14888
// exit ;
14886: GO 14995
// ComAnimCustom ( unit , 1 ) ;
14888: LD_VAR 0 1
14892: PPUSH
14893: LD_INT 1
14895: PPUSH
14896: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
14900: LD_VAR 0 8
14904: PPUSH
14905: LD_VAR 0 9
14909: PPUSH
14910: LD_VAR 0 6
14914: PPUSH
14915: LD_VAR 0 7
14919: PPUSH
14920: CALL_OW 330
// repeat wait ( 1 ) ;
14924: LD_INT 1
14926: PPUSH
14927: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
14931: LD_VAR 0 1
14935: PPUSH
14936: CALL_OW 316
14940: PUSH
14941: LD_VAR 0 1
14945: PPUSH
14946: CALL_OW 314
14950: OR
14951: PUSH
14952: LD_VAR 0 1
14956: PPUSH
14957: CALL_OW 302
14961: NOT
14962: OR
14963: PUSH
14964: LD_VAR 0 1
14968: PPUSH
14969: CALL_OW 301
14973: OR
14974: IFFALSE 14924
// RemoveSeeing ( _x , _y , side ) ;
14976: LD_VAR 0 8
14980: PPUSH
14981: LD_VAR 0 9
14985: PPUSH
14986: LD_VAR 0 6
14990: PPUSH
14991: CALL_OW 331
// end ; end_of_file
14995: LD_VAR 0 4
14999: RET
// export globalGameSaveCounter ; every 0 0$1 do
15000: GO 15002
15002: DISABLE
// begin enable ;
15003: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15004: LD_STRING updateTimer(
15006: PUSH
15007: LD_OWVAR 1
15011: STR
15012: PUSH
15013: LD_STRING );
15015: STR
15016: PPUSH
15017: CALL_OW 559
// end ;
15021: END
// every 0 0$1 do
15022: GO 15024
15024: DISABLE
// begin globalGameSaveCounter := 0 ;
15025: LD_ADDR_EXP 36
15029: PUSH
15030: LD_INT 0
15032: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
15033: LD_STRING setGameSaveCounter(0)
15035: PPUSH
15036: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
15040: LD_STRING initStreamRollete();
15042: PPUSH
15043: CALL_OW 559
// InitStreamMode ;
15047: CALL 16373 0 0
// DefineStreamItems ( false ) ;
15051: LD_INT 0
15053: PPUSH
15054: CALL 16837 0 1
// end ;
15058: END
// export function SOS_MapStart ( ) ; begin
15059: LD_INT 0
15061: PPUSH
// if streamModeActive then
15062: LD_EXP 37
15066: IFFALSE 15075
// DefineStreamItems ( true ) ;
15068: LD_INT 1
15070: PPUSH
15071: CALL 16837 0 1
// UpdateLuaVariables ( ) ;
15075: CALL 15092 0 0
// UpdateFactoryWaypoints ( ) ;
15079: CALL 29698 0 0
// UpdateWarehouseGatheringPoints ( ) ;
15083: CALL 29955 0 0
// end ;
15087: LD_VAR 0 1
15091: RET
// function UpdateLuaVariables ( ) ; begin
15092: LD_INT 0
15094: PPUSH
// if globalGameSaveCounter then
15095: LD_EXP 36
15099: IFFALSE 15133
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
15101: LD_ADDR_EXP 36
15105: PUSH
15106: LD_EXP 36
15110: PPUSH
15111: CALL 69623 0 1
15115: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
15116: LD_STRING setGameSaveCounter(
15118: PUSH
15119: LD_EXP 36
15123: STR
15124: PUSH
15125: LD_STRING )
15127: STR
15128: PPUSH
15129: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
15133: LD_STRING setGameDifficulty(
15135: PUSH
15136: LD_OWVAR 67
15140: STR
15141: PUSH
15142: LD_STRING )
15144: STR
15145: PPUSH
15146: CALL_OW 559
// end ;
15150: LD_VAR 0 1
15154: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15155: LD_INT 0
15157: PPUSH
// if p2 = stream_mode then
15158: LD_VAR 0 2
15162: PUSH
15163: LD_INT 100
15165: EQUAL
15166: IFFALSE 16169
// begin if not StreamModeActive then
15168: LD_EXP 37
15172: NOT
15173: IFFALSE 15183
// StreamModeActive := true ;
15175: LD_ADDR_EXP 37
15179: PUSH
15180: LD_INT 1
15182: ST_TO_ADDR
// if p3 = 0 then
15183: LD_VAR 0 3
15187: PUSH
15188: LD_INT 0
15190: EQUAL
15191: IFFALSE 15197
// InitStreamMode ;
15193: CALL 16373 0 0
// if p3 = 1 then
15197: LD_VAR 0 3
15201: PUSH
15202: LD_INT 1
15204: EQUAL
15205: IFFALSE 15215
// sRocket := true ;
15207: LD_ADDR_EXP 42
15211: PUSH
15212: LD_INT 1
15214: ST_TO_ADDR
// if p3 = 2 then
15215: LD_VAR 0 3
15219: PUSH
15220: LD_INT 2
15222: EQUAL
15223: IFFALSE 15233
// sSpeed := true ;
15225: LD_ADDR_EXP 41
15229: PUSH
15230: LD_INT 1
15232: ST_TO_ADDR
// if p3 = 3 then
15233: LD_VAR 0 3
15237: PUSH
15238: LD_INT 3
15240: EQUAL
15241: IFFALSE 15251
// sEngine := true ;
15243: LD_ADDR_EXP 43
15247: PUSH
15248: LD_INT 1
15250: ST_TO_ADDR
// if p3 = 4 then
15251: LD_VAR 0 3
15255: PUSH
15256: LD_INT 4
15258: EQUAL
15259: IFFALSE 15269
// sSpec := true ;
15261: LD_ADDR_EXP 40
15265: PUSH
15266: LD_INT 1
15268: ST_TO_ADDR
// if p3 = 5 then
15269: LD_VAR 0 3
15273: PUSH
15274: LD_INT 5
15276: EQUAL
15277: IFFALSE 15287
// sLevel := true ;
15279: LD_ADDR_EXP 44
15283: PUSH
15284: LD_INT 1
15286: ST_TO_ADDR
// if p3 = 6 then
15287: LD_VAR 0 3
15291: PUSH
15292: LD_INT 6
15294: EQUAL
15295: IFFALSE 15305
// sArmoury := true ;
15297: LD_ADDR_EXP 45
15301: PUSH
15302: LD_INT 1
15304: ST_TO_ADDR
// if p3 = 7 then
15305: LD_VAR 0 3
15309: PUSH
15310: LD_INT 7
15312: EQUAL
15313: IFFALSE 15323
// sRadar := true ;
15315: LD_ADDR_EXP 46
15319: PUSH
15320: LD_INT 1
15322: ST_TO_ADDR
// if p3 = 8 then
15323: LD_VAR 0 3
15327: PUSH
15328: LD_INT 8
15330: EQUAL
15331: IFFALSE 15341
// sBunker := true ;
15333: LD_ADDR_EXP 47
15337: PUSH
15338: LD_INT 1
15340: ST_TO_ADDR
// if p3 = 9 then
15341: LD_VAR 0 3
15345: PUSH
15346: LD_INT 9
15348: EQUAL
15349: IFFALSE 15359
// sHack := true ;
15351: LD_ADDR_EXP 48
15355: PUSH
15356: LD_INT 1
15358: ST_TO_ADDR
// if p3 = 10 then
15359: LD_VAR 0 3
15363: PUSH
15364: LD_INT 10
15366: EQUAL
15367: IFFALSE 15377
// sFire := true ;
15369: LD_ADDR_EXP 49
15373: PUSH
15374: LD_INT 1
15376: ST_TO_ADDR
// if p3 = 11 then
15377: LD_VAR 0 3
15381: PUSH
15382: LD_INT 11
15384: EQUAL
15385: IFFALSE 15395
// sRefresh := true ;
15387: LD_ADDR_EXP 50
15391: PUSH
15392: LD_INT 1
15394: ST_TO_ADDR
// if p3 = 12 then
15395: LD_VAR 0 3
15399: PUSH
15400: LD_INT 12
15402: EQUAL
15403: IFFALSE 15413
// sExp := true ;
15405: LD_ADDR_EXP 51
15409: PUSH
15410: LD_INT 1
15412: ST_TO_ADDR
// if p3 = 13 then
15413: LD_VAR 0 3
15417: PUSH
15418: LD_INT 13
15420: EQUAL
15421: IFFALSE 15431
// sDepot := true ;
15423: LD_ADDR_EXP 52
15427: PUSH
15428: LD_INT 1
15430: ST_TO_ADDR
// if p3 = 14 then
15431: LD_VAR 0 3
15435: PUSH
15436: LD_INT 14
15438: EQUAL
15439: IFFALSE 15449
// sFlag := true ;
15441: LD_ADDR_EXP 53
15445: PUSH
15446: LD_INT 1
15448: ST_TO_ADDR
// if p3 = 15 then
15449: LD_VAR 0 3
15453: PUSH
15454: LD_INT 15
15456: EQUAL
15457: IFFALSE 15467
// sKamikadze := true ;
15459: LD_ADDR_EXP 61
15463: PUSH
15464: LD_INT 1
15466: ST_TO_ADDR
// if p3 = 16 then
15467: LD_VAR 0 3
15471: PUSH
15472: LD_INT 16
15474: EQUAL
15475: IFFALSE 15485
// sTroll := true ;
15477: LD_ADDR_EXP 62
15481: PUSH
15482: LD_INT 1
15484: ST_TO_ADDR
// if p3 = 17 then
15485: LD_VAR 0 3
15489: PUSH
15490: LD_INT 17
15492: EQUAL
15493: IFFALSE 15503
// sSlow := true ;
15495: LD_ADDR_EXP 63
15499: PUSH
15500: LD_INT 1
15502: ST_TO_ADDR
// if p3 = 18 then
15503: LD_VAR 0 3
15507: PUSH
15508: LD_INT 18
15510: EQUAL
15511: IFFALSE 15521
// sLack := true ;
15513: LD_ADDR_EXP 64
15517: PUSH
15518: LD_INT 1
15520: ST_TO_ADDR
// if p3 = 19 then
15521: LD_VAR 0 3
15525: PUSH
15526: LD_INT 19
15528: EQUAL
15529: IFFALSE 15539
// sTank := true ;
15531: LD_ADDR_EXP 66
15535: PUSH
15536: LD_INT 1
15538: ST_TO_ADDR
// if p3 = 20 then
15539: LD_VAR 0 3
15543: PUSH
15544: LD_INT 20
15546: EQUAL
15547: IFFALSE 15557
// sRemote := true ;
15549: LD_ADDR_EXP 67
15553: PUSH
15554: LD_INT 1
15556: ST_TO_ADDR
// if p3 = 21 then
15557: LD_VAR 0 3
15561: PUSH
15562: LD_INT 21
15564: EQUAL
15565: IFFALSE 15575
// sPowell := true ;
15567: LD_ADDR_EXP 68
15571: PUSH
15572: LD_INT 1
15574: ST_TO_ADDR
// if p3 = 22 then
15575: LD_VAR 0 3
15579: PUSH
15580: LD_INT 22
15582: EQUAL
15583: IFFALSE 15593
// sTeleport := true ;
15585: LD_ADDR_EXP 71
15589: PUSH
15590: LD_INT 1
15592: ST_TO_ADDR
// if p3 = 23 then
15593: LD_VAR 0 3
15597: PUSH
15598: LD_INT 23
15600: EQUAL
15601: IFFALSE 15611
// sOilTower := true ;
15603: LD_ADDR_EXP 73
15607: PUSH
15608: LD_INT 1
15610: ST_TO_ADDR
// if p3 = 24 then
15611: LD_VAR 0 3
15615: PUSH
15616: LD_INT 24
15618: EQUAL
15619: IFFALSE 15629
// sShovel := true ;
15621: LD_ADDR_EXP 74
15625: PUSH
15626: LD_INT 1
15628: ST_TO_ADDR
// if p3 = 25 then
15629: LD_VAR 0 3
15633: PUSH
15634: LD_INT 25
15636: EQUAL
15637: IFFALSE 15647
// sSheik := true ;
15639: LD_ADDR_EXP 75
15643: PUSH
15644: LD_INT 1
15646: ST_TO_ADDR
// if p3 = 26 then
15647: LD_VAR 0 3
15651: PUSH
15652: LD_INT 26
15654: EQUAL
15655: IFFALSE 15665
// sEarthquake := true ;
15657: LD_ADDR_EXP 77
15661: PUSH
15662: LD_INT 1
15664: ST_TO_ADDR
// if p3 = 27 then
15665: LD_VAR 0 3
15669: PUSH
15670: LD_INT 27
15672: EQUAL
15673: IFFALSE 15683
// sAI := true ;
15675: LD_ADDR_EXP 78
15679: PUSH
15680: LD_INT 1
15682: ST_TO_ADDR
// if p3 = 28 then
15683: LD_VAR 0 3
15687: PUSH
15688: LD_INT 28
15690: EQUAL
15691: IFFALSE 15701
// sCargo := true ;
15693: LD_ADDR_EXP 81
15697: PUSH
15698: LD_INT 1
15700: ST_TO_ADDR
// if p3 = 29 then
15701: LD_VAR 0 3
15705: PUSH
15706: LD_INT 29
15708: EQUAL
15709: IFFALSE 15719
// sDLaser := true ;
15711: LD_ADDR_EXP 82
15715: PUSH
15716: LD_INT 1
15718: ST_TO_ADDR
// if p3 = 30 then
15719: LD_VAR 0 3
15723: PUSH
15724: LD_INT 30
15726: EQUAL
15727: IFFALSE 15737
// sExchange := true ;
15729: LD_ADDR_EXP 83
15733: PUSH
15734: LD_INT 1
15736: ST_TO_ADDR
// if p3 = 31 then
15737: LD_VAR 0 3
15741: PUSH
15742: LD_INT 31
15744: EQUAL
15745: IFFALSE 15755
// sFac := true ;
15747: LD_ADDR_EXP 84
15751: PUSH
15752: LD_INT 1
15754: ST_TO_ADDR
// if p3 = 32 then
15755: LD_VAR 0 3
15759: PUSH
15760: LD_INT 32
15762: EQUAL
15763: IFFALSE 15773
// sPower := true ;
15765: LD_ADDR_EXP 85
15769: PUSH
15770: LD_INT 1
15772: ST_TO_ADDR
// if p3 = 33 then
15773: LD_VAR 0 3
15777: PUSH
15778: LD_INT 33
15780: EQUAL
15781: IFFALSE 15791
// sRandom := true ;
15783: LD_ADDR_EXP 86
15787: PUSH
15788: LD_INT 1
15790: ST_TO_ADDR
// if p3 = 34 then
15791: LD_VAR 0 3
15795: PUSH
15796: LD_INT 34
15798: EQUAL
15799: IFFALSE 15809
// sShield := true ;
15801: LD_ADDR_EXP 87
15805: PUSH
15806: LD_INT 1
15808: ST_TO_ADDR
// if p3 = 35 then
15809: LD_VAR 0 3
15813: PUSH
15814: LD_INT 35
15816: EQUAL
15817: IFFALSE 15827
// sTime := true ;
15819: LD_ADDR_EXP 88
15823: PUSH
15824: LD_INT 1
15826: ST_TO_ADDR
// if p3 = 36 then
15827: LD_VAR 0 3
15831: PUSH
15832: LD_INT 36
15834: EQUAL
15835: IFFALSE 15845
// sTools := true ;
15837: LD_ADDR_EXP 89
15841: PUSH
15842: LD_INT 1
15844: ST_TO_ADDR
// if p3 = 101 then
15845: LD_VAR 0 3
15849: PUSH
15850: LD_INT 101
15852: EQUAL
15853: IFFALSE 15863
// sSold := true ;
15855: LD_ADDR_EXP 54
15859: PUSH
15860: LD_INT 1
15862: ST_TO_ADDR
// if p3 = 102 then
15863: LD_VAR 0 3
15867: PUSH
15868: LD_INT 102
15870: EQUAL
15871: IFFALSE 15881
// sDiff := true ;
15873: LD_ADDR_EXP 55
15877: PUSH
15878: LD_INT 1
15880: ST_TO_ADDR
// if p3 = 103 then
15881: LD_VAR 0 3
15885: PUSH
15886: LD_INT 103
15888: EQUAL
15889: IFFALSE 15899
// sFog := true ;
15891: LD_ADDR_EXP 58
15895: PUSH
15896: LD_INT 1
15898: ST_TO_ADDR
// if p3 = 104 then
15899: LD_VAR 0 3
15903: PUSH
15904: LD_INT 104
15906: EQUAL
15907: IFFALSE 15917
// sReset := true ;
15909: LD_ADDR_EXP 59
15913: PUSH
15914: LD_INT 1
15916: ST_TO_ADDR
// if p3 = 105 then
15917: LD_VAR 0 3
15921: PUSH
15922: LD_INT 105
15924: EQUAL
15925: IFFALSE 15935
// sSun := true ;
15927: LD_ADDR_EXP 60
15931: PUSH
15932: LD_INT 1
15934: ST_TO_ADDR
// if p3 = 106 then
15935: LD_VAR 0 3
15939: PUSH
15940: LD_INT 106
15942: EQUAL
15943: IFFALSE 15953
// sTiger := true ;
15945: LD_ADDR_EXP 56
15949: PUSH
15950: LD_INT 1
15952: ST_TO_ADDR
// if p3 = 107 then
15953: LD_VAR 0 3
15957: PUSH
15958: LD_INT 107
15960: EQUAL
15961: IFFALSE 15971
// sBomb := true ;
15963: LD_ADDR_EXP 57
15967: PUSH
15968: LD_INT 1
15970: ST_TO_ADDR
// if p3 = 108 then
15971: LD_VAR 0 3
15975: PUSH
15976: LD_INT 108
15978: EQUAL
15979: IFFALSE 15989
// sWound := true ;
15981: LD_ADDR_EXP 65
15985: PUSH
15986: LD_INT 1
15988: ST_TO_ADDR
// if p3 = 109 then
15989: LD_VAR 0 3
15993: PUSH
15994: LD_INT 109
15996: EQUAL
15997: IFFALSE 16007
// sBetray := true ;
15999: LD_ADDR_EXP 69
16003: PUSH
16004: LD_INT 1
16006: ST_TO_ADDR
// if p3 = 110 then
16007: LD_VAR 0 3
16011: PUSH
16012: LD_INT 110
16014: EQUAL
16015: IFFALSE 16025
// sContamin := true ;
16017: LD_ADDR_EXP 70
16021: PUSH
16022: LD_INT 1
16024: ST_TO_ADDR
// if p3 = 111 then
16025: LD_VAR 0 3
16029: PUSH
16030: LD_INT 111
16032: EQUAL
16033: IFFALSE 16043
// sOil := true ;
16035: LD_ADDR_EXP 72
16039: PUSH
16040: LD_INT 1
16042: ST_TO_ADDR
// if p3 = 112 then
16043: LD_VAR 0 3
16047: PUSH
16048: LD_INT 112
16050: EQUAL
16051: IFFALSE 16061
// sStu := true ;
16053: LD_ADDR_EXP 76
16057: PUSH
16058: LD_INT 1
16060: ST_TO_ADDR
// if p3 = 113 then
16061: LD_VAR 0 3
16065: PUSH
16066: LD_INT 113
16068: EQUAL
16069: IFFALSE 16079
// sBazooka := true ;
16071: LD_ADDR_EXP 79
16075: PUSH
16076: LD_INT 1
16078: ST_TO_ADDR
// if p3 = 114 then
16079: LD_VAR 0 3
16083: PUSH
16084: LD_INT 114
16086: EQUAL
16087: IFFALSE 16097
// sMortar := true ;
16089: LD_ADDR_EXP 80
16093: PUSH
16094: LD_INT 1
16096: ST_TO_ADDR
// if p3 = 115 then
16097: LD_VAR 0 3
16101: PUSH
16102: LD_INT 115
16104: EQUAL
16105: IFFALSE 16115
// sRanger := true ;
16107: LD_ADDR_EXP 90
16111: PUSH
16112: LD_INT 1
16114: ST_TO_ADDR
// if p3 = 116 then
16115: LD_VAR 0 3
16119: PUSH
16120: LD_INT 116
16122: EQUAL
16123: IFFALSE 16133
// sComputer := true ;
16125: LD_ADDR_EXP 91
16129: PUSH
16130: LD_INT 1
16132: ST_TO_ADDR
// if p3 = 117 then
16133: LD_VAR 0 3
16137: PUSH
16138: LD_INT 117
16140: EQUAL
16141: IFFALSE 16151
// s30 := true ;
16143: LD_ADDR_EXP 92
16147: PUSH
16148: LD_INT 1
16150: ST_TO_ADDR
// if p3 = 118 then
16151: LD_VAR 0 3
16155: PUSH
16156: LD_INT 118
16158: EQUAL
16159: IFFALSE 16169
// s60 := true ;
16161: LD_ADDR_EXP 93
16165: PUSH
16166: LD_INT 1
16168: ST_TO_ADDR
// end ; if p2 = hack_mode then
16169: LD_VAR 0 2
16173: PUSH
16174: LD_INT 101
16176: EQUAL
16177: IFFALSE 16305
// begin case p3 of 1 :
16179: LD_VAR 0 3
16183: PUSH
16184: LD_INT 1
16186: DOUBLE
16187: EQUAL
16188: IFTRUE 16192
16190: GO 16199
16192: POP
// hHackUnlimitedResources ; 2 :
16193: CALL 28444 0 0
16197: GO 16305
16199: LD_INT 2
16201: DOUBLE
16202: EQUAL
16203: IFTRUE 16207
16205: GO 16214
16207: POP
// hHackSetLevel10 ; 3 :
16208: CALL 28577 0 0
16212: GO 16305
16214: LD_INT 3
16216: DOUBLE
16217: EQUAL
16218: IFTRUE 16222
16220: GO 16229
16222: POP
// hHackSetLevel10YourUnits ; 4 :
16223: CALL 28662 0 0
16227: GO 16305
16229: LD_INT 4
16231: DOUBLE
16232: EQUAL
16233: IFTRUE 16237
16235: GO 16244
16237: POP
// hHackInvincible ; 5 :
16238: CALL 29110 0 0
16242: GO 16305
16244: LD_INT 5
16246: DOUBLE
16247: EQUAL
16248: IFTRUE 16252
16250: GO 16259
16252: POP
// hHackInvisible ; 6 :
16253: CALL 29221 0 0
16257: GO 16305
16259: LD_INT 6
16261: DOUBLE
16262: EQUAL
16263: IFTRUE 16267
16265: GO 16274
16267: POP
// hHackChangeYourSide ; 7 :
16268: CALL 29278 0 0
16272: GO 16305
16274: LD_INT 7
16276: DOUBLE
16277: EQUAL
16278: IFTRUE 16282
16280: GO 16289
16282: POP
// hHackChangeUnitSide ; 8 :
16283: CALL 29320 0 0
16287: GO 16305
16289: LD_INT 8
16291: DOUBLE
16292: EQUAL
16293: IFTRUE 16297
16295: GO 16304
16297: POP
// hHackFog ; end ;
16298: CALL 29421 0 0
16302: GO 16305
16304: POP
// end ; if p2 = game_save_mode then
16305: LD_VAR 0 2
16309: PUSH
16310: LD_INT 102
16312: EQUAL
16313: IFFALSE 16368
// begin if p3 = 1 then
16315: LD_VAR 0 3
16319: PUSH
16320: LD_INT 1
16322: EQUAL
16323: IFFALSE 16335
// globalGameSaveCounter := p4 ;
16325: LD_ADDR_EXP 36
16329: PUSH
16330: LD_VAR 0 4
16334: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
16335: LD_VAR 0 3
16339: PUSH
16340: LD_INT 2
16342: EQUAL
16343: PUSH
16344: LD_EXP 36
16348: AND
16349: IFFALSE 16368
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
16351: LD_STRING setGameSaveCounter(
16353: PUSH
16354: LD_EXP 36
16358: STR
16359: PUSH
16360: LD_STRING )
16362: STR
16363: PPUSH
16364: CALL_OW 559
// end ; end ;
16368: LD_VAR 0 7
16372: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
16373: LD_INT 0
16375: PPUSH
// streamModeActive := false ;
16376: LD_ADDR_EXP 37
16380: PUSH
16381: LD_INT 0
16383: ST_TO_ADDR
// normalCounter := 36 ;
16384: LD_ADDR_EXP 38
16388: PUSH
16389: LD_INT 36
16391: ST_TO_ADDR
// hardcoreCounter := 18 ;
16392: LD_ADDR_EXP 39
16396: PUSH
16397: LD_INT 18
16399: ST_TO_ADDR
// sRocket := false ;
16400: LD_ADDR_EXP 42
16404: PUSH
16405: LD_INT 0
16407: ST_TO_ADDR
// sSpeed := false ;
16408: LD_ADDR_EXP 41
16412: PUSH
16413: LD_INT 0
16415: ST_TO_ADDR
// sEngine := false ;
16416: LD_ADDR_EXP 43
16420: PUSH
16421: LD_INT 0
16423: ST_TO_ADDR
// sSpec := false ;
16424: LD_ADDR_EXP 40
16428: PUSH
16429: LD_INT 0
16431: ST_TO_ADDR
// sLevel := false ;
16432: LD_ADDR_EXP 44
16436: PUSH
16437: LD_INT 0
16439: ST_TO_ADDR
// sArmoury := false ;
16440: LD_ADDR_EXP 45
16444: PUSH
16445: LD_INT 0
16447: ST_TO_ADDR
// sRadar := false ;
16448: LD_ADDR_EXP 46
16452: PUSH
16453: LD_INT 0
16455: ST_TO_ADDR
// sBunker := false ;
16456: LD_ADDR_EXP 47
16460: PUSH
16461: LD_INT 0
16463: ST_TO_ADDR
// sHack := false ;
16464: LD_ADDR_EXP 48
16468: PUSH
16469: LD_INT 0
16471: ST_TO_ADDR
// sFire := false ;
16472: LD_ADDR_EXP 49
16476: PUSH
16477: LD_INT 0
16479: ST_TO_ADDR
// sRefresh := false ;
16480: LD_ADDR_EXP 50
16484: PUSH
16485: LD_INT 0
16487: ST_TO_ADDR
// sExp := false ;
16488: LD_ADDR_EXP 51
16492: PUSH
16493: LD_INT 0
16495: ST_TO_ADDR
// sDepot := false ;
16496: LD_ADDR_EXP 52
16500: PUSH
16501: LD_INT 0
16503: ST_TO_ADDR
// sFlag := false ;
16504: LD_ADDR_EXP 53
16508: PUSH
16509: LD_INT 0
16511: ST_TO_ADDR
// sKamikadze := false ;
16512: LD_ADDR_EXP 61
16516: PUSH
16517: LD_INT 0
16519: ST_TO_ADDR
// sTroll := false ;
16520: LD_ADDR_EXP 62
16524: PUSH
16525: LD_INT 0
16527: ST_TO_ADDR
// sSlow := false ;
16528: LD_ADDR_EXP 63
16532: PUSH
16533: LD_INT 0
16535: ST_TO_ADDR
// sLack := false ;
16536: LD_ADDR_EXP 64
16540: PUSH
16541: LD_INT 0
16543: ST_TO_ADDR
// sTank := false ;
16544: LD_ADDR_EXP 66
16548: PUSH
16549: LD_INT 0
16551: ST_TO_ADDR
// sRemote := false ;
16552: LD_ADDR_EXP 67
16556: PUSH
16557: LD_INT 0
16559: ST_TO_ADDR
// sPowell := false ;
16560: LD_ADDR_EXP 68
16564: PUSH
16565: LD_INT 0
16567: ST_TO_ADDR
// sTeleport := false ;
16568: LD_ADDR_EXP 71
16572: PUSH
16573: LD_INT 0
16575: ST_TO_ADDR
// sOilTower := false ;
16576: LD_ADDR_EXP 73
16580: PUSH
16581: LD_INT 0
16583: ST_TO_ADDR
// sShovel := false ;
16584: LD_ADDR_EXP 74
16588: PUSH
16589: LD_INT 0
16591: ST_TO_ADDR
// sSheik := false ;
16592: LD_ADDR_EXP 75
16596: PUSH
16597: LD_INT 0
16599: ST_TO_ADDR
// sEarthquake := false ;
16600: LD_ADDR_EXP 77
16604: PUSH
16605: LD_INT 0
16607: ST_TO_ADDR
// sAI := false ;
16608: LD_ADDR_EXP 78
16612: PUSH
16613: LD_INT 0
16615: ST_TO_ADDR
// sCargo := false ;
16616: LD_ADDR_EXP 81
16620: PUSH
16621: LD_INT 0
16623: ST_TO_ADDR
// sDLaser := false ;
16624: LD_ADDR_EXP 82
16628: PUSH
16629: LD_INT 0
16631: ST_TO_ADDR
// sExchange := false ;
16632: LD_ADDR_EXP 83
16636: PUSH
16637: LD_INT 0
16639: ST_TO_ADDR
// sFac := false ;
16640: LD_ADDR_EXP 84
16644: PUSH
16645: LD_INT 0
16647: ST_TO_ADDR
// sPower := false ;
16648: LD_ADDR_EXP 85
16652: PUSH
16653: LD_INT 0
16655: ST_TO_ADDR
// sRandom := false ;
16656: LD_ADDR_EXP 86
16660: PUSH
16661: LD_INT 0
16663: ST_TO_ADDR
// sShield := false ;
16664: LD_ADDR_EXP 87
16668: PUSH
16669: LD_INT 0
16671: ST_TO_ADDR
// sTime := false ;
16672: LD_ADDR_EXP 88
16676: PUSH
16677: LD_INT 0
16679: ST_TO_ADDR
// sTools := false ;
16680: LD_ADDR_EXP 89
16684: PUSH
16685: LD_INT 0
16687: ST_TO_ADDR
// sSold := false ;
16688: LD_ADDR_EXP 54
16692: PUSH
16693: LD_INT 0
16695: ST_TO_ADDR
// sDiff := false ;
16696: LD_ADDR_EXP 55
16700: PUSH
16701: LD_INT 0
16703: ST_TO_ADDR
// sFog := false ;
16704: LD_ADDR_EXP 58
16708: PUSH
16709: LD_INT 0
16711: ST_TO_ADDR
// sReset := false ;
16712: LD_ADDR_EXP 59
16716: PUSH
16717: LD_INT 0
16719: ST_TO_ADDR
// sSun := false ;
16720: LD_ADDR_EXP 60
16724: PUSH
16725: LD_INT 0
16727: ST_TO_ADDR
// sTiger := false ;
16728: LD_ADDR_EXP 56
16732: PUSH
16733: LD_INT 0
16735: ST_TO_ADDR
// sBomb := false ;
16736: LD_ADDR_EXP 57
16740: PUSH
16741: LD_INT 0
16743: ST_TO_ADDR
// sWound := false ;
16744: LD_ADDR_EXP 65
16748: PUSH
16749: LD_INT 0
16751: ST_TO_ADDR
// sBetray := false ;
16752: LD_ADDR_EXP 69
16756: PUSH
16757: LD_INT 0
16759: ST_TO_ADDR
// sContamin := false ;
16760: LD_ADDR_EXP 70
16764: PUSH
16765: LD_INT 0
16767: ST_TO_ADDR
// sOil := false ;
16768: LD_ADDR_EXP 72
16772: PUSH
16773: LD_INT 0
16775: ST_TO_ADDR
// sStu := false ;
16776: LD_ADDR_EXP 76
16780: PUSH
16781: LD_INT 0
16783: ST_TO_ADDR
// sBazooka := false ;
16784: LD_ADDR_EXP 79
16788: PUSH
16789: LD_INT 0
16791: ST_TO_ADDR
// sMortar := false ;
16792: LD_ADDR_EXP 80
16796: PUSH
16797: LD_INT 0
16799: ST_TO_ADDR
// sRanger := false ;
16800: LD_ADDR_EXP 90
16804: PUSH
16805: LD_INT 0
16807: ST_TO_ADDR
// sComputer := false ;
16808: LD_ADDR_EXP 91
16812: PUSH
16813: LD_INT 0
16815: ST_TO_ADDR
// s30 := false ;
16816: LD_ADDR_EXP 92
16820: PUSH
16821: LD_INT 0
16823: ST_TO_ADDR
// s60 := false ;
16824: LD_ADDR_EXP 93
16828: PUSH
16829: LD_INT 0
16831: ST_TO_ADDR
// end ;
16832: LD_VAR 0 1
16836: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
16837: LD_INT 0
16839: PPUSH
16840: PPUSH
16841: PPUSH
16842: PPUSH
16843: PPUSH
16844: PPUSH
16845: PPUSH
// result := [ ] ;
16846: LD_ADDR_VAR 0 2
16850: PUSH
16851: EMPTY
16852: ST_TO_ADDR
// if campaign_id = 1 then
16853: LD_OWVAR 69
16857: PUSH
16858: LD_INT 1
16860: EQUAL
16861: IFFALSE 20027
// begin case mission_number of 1 :
16863: LD_OWVAR 70
16867: PUSH
16868: LD_INT 1
16870: DOUBLE
16871: EQUAL
16872: IFTRUE 16876
16874: GO 16952
16876: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
16877: LD_ADDR_VAR 0 2
16881: PUSH
16882: LD_INT 2
16884: PUSH
16885: LD_INT 4
16887: PUSH
16888: LD_INT 11
16890: PUSH
16891: LD_INT 12
16893: PUSH
16894: LD_INT 15
16896: PUSH
16897: LD_INT 16
16899: PUSH
16900: LD_INT 22
16902: PUSH
16903: LD_INT 23
16905: PUSH
16906: LD_INT 26
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: PUSH
16920: LD_INT 101
16922: PUSH
16923: LD_INT 102
16925: PUSH
16926: LD_INT 106
16928: PUSH
16929: LD_INT 116
16931: PUSH
16932: LD_INT 117
16934: PUSH
16935: LD_INT 118
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: PUSH
16946: EMPTY
16947: LIST
16948: LIST
16949: ST_TO_ADDR
16950: GO 20025
16952: LD_INT 2
16954: DOUBLE
16955: EQUAL
16956: IFTRUE 16960
16958: GO 17044
16960: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
16961: LD_ADDR_VAR 0 2
16965: PUSH
16966: LD_INT 2
16968: PUSH
16969: LD_INT 4
16971: PUSH
16972: LD_INT 11
16974: PUSH
16975: LD_INT 12
16977: PUSH
16978: LD_INT 15
16980: PUSH
16981: LD_INT 16
16983: PUSH
16984: LD_INT 22
16986: PUSH
16987: LD_INT 23
16989: PUSH
16990: LD_INT 26
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: PUSH
17004: LD_INT 101
17006: PUSH
17007: LD_INT 102
17009: PUSH
17010: LD_INT 105
17012: PUSH
17013: LD_INT 106
17015: PUSH
17016: LD_INT 108
17018: PUSH
17019: LD_INT 116
17021: PUSH
17022: LD_INT 117
17024: PUSH
17025: LD_INT 118
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: ST_TO_ADDR
17042: GO 20025
17044: LD_INT 3
17046: DOUBLE
17047: EQUAL
17048: IFTRUE 17052
17050: GO 17140
17052: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17053: LD_ADDR_VAR 0 2
17057: PUSH
17058: LD_INT 2
17060: PUSH
17061: LD_INT 4
17063: PUSH
17064: LD_INT 5
17066: PUSH
17067: LD_INT 11
17069: PUSH
17070: LD_INT 12
17072: PUSH
17073: LD_INT 15
17075: PUSH
17076: LD_INT 16
17078: PUSH
17079: LD_INT 22
17081: PUSH
17082: LD_INT 26
17084: PUSH
17085: LD_INT 36
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: PUSH
17100: LD_INT 101
17102: PUSH
17103: LD_INT 102
17105: PUSH
17106: LD_INT 105
17108: PUSH
17109: LD_INT 106
17111: PUSH
17112: LD_INT 108
17114: PUSH
17115: LD_INT 116
17117: PUSH
17118: LD_INT 117
17120: PUSH
17121: LD_INT 118
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: ST_TO_ADDR
17138: GO 20025
17140: LD_INT 4
17142: DOUBLE
17143: EQUAL
17144: IFTRUE 17148
17146: GO 17244
17148: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17149: LD_ADDR_VAR 0 2
17153: PUSH
17154: LD_INT 2
17156: PUSH
17157: LD_INT 4
17159: PUSH
17160: LD_INT 5
17162: PUSH
17163: LD_INT 8
17165: PUSH
17166: LD_INT 11
17168: PUSH
17169: LD_INT 12
17171: PUSH
17172: LD_INT 15
17174: PUSH
17175: LD_INT 16
17177: PUSH
17178: LD_INT 22
17180: PUSH
17181: LD_INT 23
17183: PUSH
17184: LD_INT 26
17186: PUSH
17187: LD_INT 36
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: PUSH
17204: LD_INT 101
17206: PUSH
17207: LD_INT 102
17209: PUSH
17210: LD_INT 105
17212: PUSH
17213: LD_INT 106
17215: PUSH
17216: LD_INT 108
17218: PUSH
17219: LD_INT 116
17221: PUSH
17222: LD_INT 117
17224: PUSH
17225: LD_INT 118
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: PUSH
17238: EMPTY
17239: LIST
17240: LIST
17241: ST_TO_ADDR
17242: GO 20025
17244: LD_INT 5
17246: DOUBLE
17247: EQUAL
17248: IFTRUE 17252
17250: GO 17364
17252: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
17253: LD_ADDR_VAR 0 2
17257: PUSH
17258: LD_INT 2
17260: PUSH
17261: LD_INT 4
17263: PUSH
17264: LD_INT 5
17266: PUSH
17267: LD_INT 6
17269: PUSH
17270: LD_INT 8
17272: PUSH
17273: LD_INT 11
17275: PUSH
17276: LD_INT 12
17278: PUSH
17279: LD_INT 15
17281: PUSH
17282: LD_INT 16
17284: PUSH
17285: LD_INT 22
17287: PUSH
17288: LD_INT 23
17290: PUSH
17291: LD_INT 25
17293: PUSH
17294: LD_INT 26
17296: PUSH
17297: LD_INT 36
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: PUSH
17316: LD_INT 101
17318: PUSH
17319: LD_INT 102
17321: PUSH
17322: LD_INT 105
17324: PUSH
17325: LD_INT 106
17327: PUSH
17328: LD_INT 108
17330: PUSH
17331: LD_INT 109
17333: PUSH
17334: LD_INT 112
17336: PUSH
17337: LD_INT 116
17339: PUSH
17340: LD_INT 117
17342: PUSH
17343: LD_INT 118
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: ST_TO_ADDR
17362: GO 20025
17364: LD_INT 6
17366: DOUBLE
17367: EQUAL
17368: IFTRUE 17372
17370: GO 17504
17372: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
17373: LD_ADDR_VAR 0 2
17377: PUSH
17378: LD_INT 2
17380: PUSH
17381: LD_INT 4
17383: PUSH
17384: LD_INT 5
17386: PUSH
17387: LD_INT 6
17389: PUSH
17390: LD_INT 8
17392: PUSH
17393: LD_INT 11
17395: PUSH
17396: LD_INT 12
17398: PUSH
17399: LD_INT 15
17401: PUSH
17402: LD_INT 16
17404: PUSH
17405: LD_INT 20
17407: PUSH
17408: LD_INT 21
17410: PUSH
17411: LD_INT 22
17413: PUSH
17414: LD_INT 23
17416: PUSH
17417: LD_INT 25
17419: PUSH
17420: LD_INT 26
17422: PUSH
17423: LD_INT 30
17425: PUSH
17426: LD_INT 31
17428: PUSH
17429: LD_INT 32
17431: PUSH
17432: LD_INT 36
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: PUSH
17456: LD_INT 101
17458: PUSH
17459: LD_INT 102
17461: PUSH
17462: LD_INT 105
17464: PUSH
17465: LD_INT 106
17467: PUSH
17468: LD_INT 108
17470: PUSH
17471: LD_INT 109
17473: PUSH
17474: LD_INT 112
17476: PUSH
17477: LD_INT 116
17479: PUSH
17480: LD_INT 117
17482: PUSH
17483: LD_INT 118
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: PUSH
17498: EMPTY
17499: LIST
17500: LIST
17501: ST_TO_ADDR
17502: GO 20025
17504: LD_INT 7
17506: DOUBLE
17507: EQUAL
17508: IFTRUE 17512
17510: GO 17624
17512: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
17513: LD_ADDR_VAR 0 2
17517: PUSH
17518: LD_INT 2
17520: PUSH
17521: LD_INT 4
17523: PUSH
17524: LD_INT 5
17526: PUSH
17527: LD_INT 7
17529: PUSH
17530: LD_INT 11
17532: PUSH
17533: LD_INT 12
17535: PUSH
17536: LD_INT 15
17538: PUSH
17539: LD_INT 16
17541: PUSH
17542: LD_INT 20
17544: PUSH
17545: LD_INT 21
17547: PUSH
17548: LD_INT 22
17550: PUSH
17551: LD_INT 23
17553: PUSH
17554: LD_INT 25
17556: PUSH
17557: LD_INT 26
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: PUSH
17576: LD_INT 101
17578: PUSH
17579: LD_INT 102
17581: PUSH
17582: LD_INT 103
17584: PUSH
17585: LD_INT 105
17587: PUSH
17588: LD_INT 106
17590: PUSH
17591: LD_INT 108
17593: PUSH
17594: LD_INT 112
17596: PUSH
17597: LD_INT 116
17599: PUSH
17600: LD_INT 117
17602: PUSH
17603: LD_INT 118
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: ST_TO_ADDR
17622: GO 20025
17624: LD_INT 8
17626: DOUBLE
17627: EQUAL
17628: IFTRUE 17632
17630: GO 17772
17632: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
17633: LD_ADDR_VAR 0 2
17637: PUSH
17638: LD_INT 2
17640: PUSH
17641: LD_INT 4
17643: PUSH
17644: LD_INT 5
17646: PUSH
17647: LD_INT 6
17649: PUSH
17650: LD_INT 7
17652: PUSH
17653: LD_INT 8
17655: PUSH
17656: LD_INT 11
17658: PUSH
17659: LD_INT 12
17661: PUSH
17662: LD_INT 15
17664: PUSH
17665: LD_INT 16
17667: PUSH
17668: LD_INT 20
17670: PUSH
17671: LD_INT 21
17673: PUSH
17674: LD_INT 22
17676: PUSH
17677: LD_INT 23
17679: PUSH
17680: LD_INT 25
17682: PUSH
17683: LD_INT 26
17685: PUSH
17686: LD_INT 30
17688: PUSH
17689: LD_INT 31
17691: PUSH
17692: LD_INT 32
17694: PUSH
17695: LD_INT 36
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: PUSH
17720: LD_INT 101
17722: PUSH
17723: LD_INT 102
17725: PUSH
17726: LD_INT 103
17728: PUSH
17729: LD_INT 105
17731: PUSH
17732: LD_INT 106
17734: PUSH
17735: LD_INT 108
17737: PUSH
17738: LD_INT 109
17740: PUSH
17741: LD_INT 112
17743: PUSH
17744: LD_INT 116
17746: PUSH
17747: LD_INT 117
17749: PUSH
17750: LD_INT 118
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: ST_TO_ADDR
17770: GO 20025
17772: LD_INT 9
17774: DOUBLE
17775: EQUAL
17776: IFTRUE 17780
17778: GO 17928
17780: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17781: LD_ADDR_VAR 0 2
17785: PUSH
17786: LD_INT 2
17788: PUSH
17789: LD_INT 4
17791: PUSH
17792: LD_INT 5
17794: PUSH
17795: LD_INT 6
17797: PUSH
17798: LD_INT 7
17800: PUSH
17801: LD_INT 8
17803: PUSH
17804: LD_INT 11
17806: PUSH
17807: LD_INT 12
17809: PUSH
17810: LD_INT 15
17812: PUSH
17813: LD_INT 16
17815: PUSH
17816: LD_INT 20
17818: PUSH
17819: LD_INT 21
17821: PUSH
17822: LD_INT 22
17824: PUSH
17825: LD_INT 23
17827: PUSH
17828: LD_INT 25
17830: PUSH
17831: LD_INT 26
17833: PUSH
17834: LD_INT 28
17836: PUSH
17837: LD_INT 30
17839: PUSH
17840: LD_INT 31
17842: PUSH
17843: LD_INT 32
17845: PUSH
17846: LD_INT 36
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: PUSH
17872: LD_INT 101
17874: PUSH
17875: LD_INT 102
17877: PUSH
17878: LD_INT 103
17880: PUSH
17881: LD_INT 105
17883: PUSH
17884: LD_INT 106
17886: PUSH
17887: LD_INT 108
17889: PUSH
17890: LD_INT 109
17892: PUSH
17893: LD_INT 112
17895: PUSH
17896: LD_INT 114
17898: PUSH
17899: LD_INT 116
17901: PUSH
17902: LD_INT 117
17904: PUSH
17905: LD_INT 118
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: LIST
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: ST_TO_ADDR
17926: GO 20025
17928: LD_INT 10
17930: DOUBLE
17931: EQUAL
17932: IFTRUE 17936
17934: GO 18132
17936: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
17937: LD_ADDR_VAR 0 2
17941: PUSH
17942: LD_INT 2
17944: PUSH
17945: LD_INT 4
17947: PUSH
17948: LD_INT 5
17950: PUSH
17951: LD_INT 6
17953: PUSH
17954: LD_INT 7
17956: PUSH
17957: LD_INT 8
17959: PUSH
17960: LD_INT 9
17962: PUSH
17963: LD_INT 10
17965: PUSH
17966: LD_INT 11
17968: PUSH
17969: LD_INT 12
17971: PUSH
17972: LD_INT 13
17974: PUSH
17975: LD_INT 14
17977: PUSH
17978: LD_INT 15
17980: PUSH
17981: LD_INT 16
17983: PUSH
17984: LD_INT 17
17986: PUSH
17987: LD_INT 18
17989: PUSH
17990: LD_INT 19
17992: PUSH
17993: LD_INT 20
17995: PUSH
17996: LD_INT 21
17998: PUSH
17999: LD_INT 22
18001: PUSH
18002: LD_INT 23
18004: PUSH
18005: LD_INT 24
18007: PUSH
18008: LD_INT 25
18010: PUSH
18011: LD_INT 26
18013: PUSH
18014: LD_INT 28
18016: PUSH
18017: LD_INT 30
18019: PUSH
18020: LD_INT 31
18022: PUSH
18023: LD_INT 32
18025: PUSH
18026: LD_INT 36
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 101
18062: PUSH
18063: LD_INT 102
18065: PUSH
18066: LD_INT 103
18068: PUSH
18069: LD_INT 104
18071: PUSH
18072: LD_INT 105
18074: PUSH
18075: LD_INT 106
18077: PUSH
18078: LD_INT 107
18080: PUSH
18081: LD_INT 108
18083: PUSH
18084: LD_INT 109
18086: PUSH
18087: LD_INT 110
18089: PUSH
18090: LD_INT 111
18092: PUSH
18093: LD_INT 112
18095: PUSH
18096: LD_INT 114
18098: PUSH
18099: LD_INT 116
18101: PUSH
18102: LD_INT 117
18104: PUSH
18105: LD_INT 118
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: ST_TO_ADDR
18130: GO 20025
18132: LD_INT 11
18134: DOUBLE
18135: EQUAL
18136: IFTRUE 18140
18138: GO 18344
18140: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18141: LD_ADDR_VAR 0 2
18145: PUSH
18146: LD_INT 2
18148: PUSH
18149: LD_INT 3
18151: PUSH
18152: LD_INT 4
18154: PUSH
18155: LD_INT 5
18157: PUSH
18158: LD_INT 6
18160: PUSH
18161: LD_INT 7
18163: PUSH
18164: LD_INT 8
18166: PUSH
18167: LD_INT 9
18169: PUSH
18170: LD_INT 10
18172: PUSH
18173: LD_INT 11
18175: PUSH
18176: LD_INT 12
18178: PUSH
18179: LD_INT 13
18181: PUSH
18182: LD_INT 14
18184: PUSH
18185: LD_INT 15
18187: PUSH
18188: LD_INT 16
18190: PUSH
18191: LD_INT 17
18193: PUSH
18194: LD_INT 18
18196: PUSH
18197: LD_INT 19
18199: PUSH
18200: LD_INT 20
18202: PUSH
18203: LD_INT 21
18205: PUSH
18206: LD_INT 22
18208: PUSH
18209: LD_INT 23
18211: PUSH
18212: LD_INT 24
18214: PUSH
18215: LD_INT 25
18217: PUSH
18218: LD_INT 26
18220: PUSH
18221: LD_INT 28
18223: PUSH
18224: LD_INT 30
18226: PUSH
18227: LD_INT 31
18229: PUSH
18230: LD_INT 32
18232: PUSH
18233: LD_INT 34
18235: PUSH
18236: LD_INT 36
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: PUSH
18272: LD_INT 101
18274: PUSH
18275: LD_INT 102
18277: PUSH
18278: LD_INT 103
18280: PUSH
18281: LD_INT 104
18283: PUSH
18284: LD_INT 105
18286: PUSH
18287: LD_INT 106
18289: PUSH
18290: LD_INT 107
18292: PUSH
18293: LD_INT 108
18295: PUSH
18296: LD_INT 109
18298: PUSH
18299: LD_INT 110
18301: PUSH
18302: LD_INT 111
18304: PUSH
18305: LD_INT 112
18307: PUSH
18308: LD_INT 114
18310: PUSH
18311: LD_INT 116
18313: PUSH
18314: LD_INT 117
18316: PUSH
18317: LD_INT 118
18319: PUSH
18320: EMPTY
18321: LIST
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: ST_TO_ADDR
18342: GO 20025
18344: LD_INT 12
18346: DOUBLE
18347: EQUAL
18348: IFTRUE 18352
18350: GO 18572
18352: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18353: LD_ADDR_VAR 0 2
18357: PUSH
18358: LD_INT 1
18360: PUSH
18361: LD_INT 2
18363: PUSH
18364: LD_INT 3
18366: PUSH
18367: LD_INT 4
18369: PUSH
18370: LD_INT 5
18372: PUSH
18373: LD_INT 6
18375: PUSH
18376: LD_INT 7
18378: PUSH
18379: LD_INT 8
18381: PUSH
18382: LD_INT 9
18384: PUSH
18385: LD_INT 10
18387: PUSH
18388: LD_INT 11
18390: PUSH
18391: LD_INT 12
18393: PUSH
18394: LD_INT 13
18396: PUSH
18397: LD_INT 14
18399: PUSH
18400: LD_INT 15
18402: PUSH
18403: LD_INT 16
18405: PUSH
18406: LD_INT 17
18408: PUSH
18409: LD_INT 18
18411: PUSH
18412: LD_INT 19
18414: PUSH
18415: LD_INT 20
18417: PUSH
18418: LD_INT 21
18420: PUSH
18421: LD_INT 22
18423: PUSH
18424: LD_INT 23
18426: PUSH
18427: LD_INT 24
18429: PUSH
18430: LD_INT 25
18432: PUSH
18433: LD_INT 26
18435: PUSH
18436: LD_INT 27
18438: PUSH
18439: LD_INT 28
18441: PUSH
18442: LD_INT 30
18444: PUSH
18445: LD_INT 31
18447: PUSH
18448: LD_INT 32
18450: PUSH
18451: LD_INT 33
18453: PUSH
18454: LD_INT 34
18456: PUSH
18457: LD_INT 36
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 101
18498: PUSH
18499: LD_INT 102
18501: PUSH
18502: LD_INT 103
18504: PUSH
18505: LD_INT 104
18507: PUSH
18508: LD_INT 105
18510: PUSH
18511: LD_INT 106
18513: PUSH
18514: LD_INT 107
18516: PUSH
18517: LD_INT 108
18519: PUSH
18520: LD_INT 109
18522: PUSH
18523: LD_INT 110
18525: PUSH
18526: LD_INT 111
18528: PUSH
18529: LD_INT 112
18531: PUSH
18532: LD_INT 113
18534: PUSH
18535: LD_INT 114
18537: PUSH
18538: LD_INT 116
18540: PUSH
18541: LD_INT 117
18543: PUSH
18544: LD_INT 118
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: ST_TO_ADDR
18570: GO 20025
18572: LD_INT 13
18574: DOUBLE
18575: EQUAL
18576: IFTRUE 18580
18578: GO 18788
18580: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
18581: LD_ADDR_VAR 0 2
18585: PUSH
18586: LD_INT 1
18588: PUSH
18589: LD_INT 2
18591: PUSH
18592: LD_INT 3
18594: PUSH
18595: LD_INT 4
18597: PUSH
18598: LD_INT 5
18600: PUSH
18601: LD_INT 8
18603: PUSH
18604: LD_INT 9
18606: PUSH
18607: LD_INT 10
18609: PUSH
18610: LD_INT 11
18612: PUSH
18613: LD_INT 12
18615: PUSH
18616: LD_INT 14
18618: PUSH
18619: LD_INT 15
18621: PUSH
18622: LD_INT 16
18624: PUSH
18625: LD_INT 17
18627: PUSH
18628: LD_INT 18
18630: PUSH
18631: LD_INT 19
18633: PUSH
18634: LD_INT 20
18636: PUSH
18637: LD_INT 21
18639: PUSH
18640: LD_INT 22
18642: PUSH
18643: LD_INT 23
18645: PUSH
18646: LD_INT 24
18648: PUSH
18649: LD_INT 25
18651: PUSH
18652: LD_INT 26
18654: PUSH
18655: LD_INT 27
18657: PUSH
18658: LD_INT 28
18660: PUSH
18661: LD_INT 30
18663: PUSH
18664: LD_INT 31
18666: PUSH
18667: LD_INT 32
18669: PUSH
18670: LD_INT 33
18672: PUSH
18673: LD_INT 34
18675: PUSH
18676: LD_INT 36
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: PUSH
18712: LD_INT 101
18714: PUSH
18715: LD_INT 102
18717: PUSH
18718: LD_INT 103
18720: PUSH
18721: LD_INT 104
18723: PUSH
18724: LD_INT 105
18726: PUSH
18727: LD_INT 106
18729: PUSH
18730: LD_INT 107
18732: PUSH
18733: LD_INT 108
18735: PUSH
18736: LD_INT 109
18738: PUSH
18739: LD_INT 110
18741: PUSH
18742: LD_INT 111
18744: PUSH
18745: LD_INT 112
18747: PUSH
18748: LD_INT 113
18750: PUSH
18751: LD_INT 114
18753: PUSH
18754: LD_INT 116
18756: PUSH
18757: LD_INT 117
18759: PUSH
18760: LD_INT 118
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: LIST
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: ST_TO_ADDR
18786: GO 20025
18788: LD_INT 14
18790: DOUBLE
18791: EQUAL
18792: IFTRUE 18796
18794: GO 19020
18796: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18797: LD_ADDR_VAR 0 2
18801: PUSH
18802: LD_INT 1
18804: PUSH
18805: LD_INT 2
18807: PUSH
18808: LD_INT 3
18810: PUSH
18811: LD_INT 4
18813: PUSH
18814: LD_INT 5
18816: PUSH
18817: LD_INT 6
18819: PUSH
18820: LD_INT 7
18822: PUSH
18823: LD_INT 8
18825: PUSH
18826: LD_INT 9
18828: PUSH
18829: LD_INT 10
18831: PUSH
18832: LD_INT 11
18834: PUSH
18835: LD_INT 12
18837: PUSH
18838: LD_INT 13
18840: PUSH
18841: LD_INT 14
18843: PUSH
18844: LD_INT 15
18846: PUSH
18847: LD_INT 16
18849: PUSH
18850: LD_INT 17
18852: PUSH
18853: LD_INT 18
18855: PUSH
18856: LD_INT 19
18858: PUSH
18859: LD_INT 20
18861: PUSH
18862: LD_INT 21
18864: PUSH
18865: LD_INT 22
18867: PUSH
18868: LD_INT 23
18870: PUSH
18871: LD_INT 24
18873: PUSH
18874: LD_INT 25
18876: PUSH
18877: LD_INT 26
18879: PUSH
18880: LD_INT 27
18882: PUSH
18883: LD_INT 28
18885: PUSH
18886: LD_INT 29
18888: PUSH
18889: LD_INT 30
18891: PUSH
18892: LD_INT 31
18894: PUSH
18895: LD_INT 32
18897: PUSH
18898: LD_INT 33
18900: PUSH
18901: LD_INT 34
18903: PUSH
18904: LD_INT 36
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: PUSH
18944: LD_INT 101
18946: PUSH
18947: LD_INT 102
18949: PUSH
18950: LD_INT 103
18952: PUSH
18953: LD_INT 104
18955: PUSH
18956: LD_INT 105
18958: PUSH
18959: LD_INT 106
18961: PUSH
18962: LD_INT 107
18964: PUSH
18965: LD_INT 108
18967: PUSH
18968: LD_INT 109
18970: PUSH
18971: LD_INT 110
18973: PUSH
18974: LD_INT 111
18976: PUSH
18977: LD_INT 112
18979: PUSH
18980: LD_INT 113
18982: PUSH
18983: LD_INT 114
18985: PUSH
18986: LD_INT 116
18988: PUSH
18989: LD_INT 117
18991: PUSH
18992: LD_INT 118
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: ST_TO_ADDR
19018: GO 20025
19020: LD_INT 15
19022: DOUBLE
19023: EQUAL
19024: IFTRUE 19028
19026: GO 19252
19028: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
19029: LD_ADDR_VAR 0 2
19033: PUSH
19034: LD_INT 1
19036: PUSH
19037: LD_INT 2
19039: PUSH
19040: LD_INT 3
19042: PUSH
19043: LD_INT 4
19045: PUSH
19046: LD_INT 5
19048: PUSH
19049: LD_INT 6
19051: PUSH
19052: LD_INT 7
19054: PUSH
19055: LD_INT 8
19057: PUSH
19058: LD_INT 9
19060: PUSH
19061: LD_INT 10
19063: PUSH
19064: LD_INT 11
19066: PUSH
19067: LD_INT 12
19069: PUSH
19070: LD_INT 13
19072: PUSH
19073: LD_INT 14
19075: PUSH
19076: LD_INT 15
19078: PUSH
19079: LD_INT 16
19081: PUSH
19082: LD_INT 17
19084: PUSH
19085: LD_INT 18
19087: PUSH
19088: LD_INT 19
19090: PUSH
19091: LD_INT 20
19093: PUSH
19094: LD_INT 21
19096: PUSH
19097: LD_INT 22
19099: PUSH
19100: LD_INT 23
19102: PUSH
19103: LD_INT 24
19105: PUSH
19106: LD_INT 25
19108: PUSH
19109: LD_INT 26
19111: PUSH
19112: LD_INT 27
19114: PUSH
19115: LD_INT 28
19117: PUSH
19118: LD_INT 29
19120: PUSH
19121: LD_INT 30
19123: PUSH
19124: LD_INT 31
19126: PUSH
19127: LD_INT 32
19129: PUSH
19130: LD_INT 33
19132: PUSH
19133: LD_INT 34
19135: PUSH
19136: LD_INT 36
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 101
19178: PUSH
19179: LD_INT 102
19181: PUSH
19182: LD_INT 103
19184: PUSH
19185: LD_INT 104
19187: PUSH
19188: LD_INT 105
19190: PUSH
19191: LD_INT 106
19193: PUSH
19194: LD_INT 107
19196: PUSH
19197: LD_INT 108
19199: PUSH
19200: LD_INT 109
19202: PUSH
19203: LD_INT 110
19205: PUSH
19206: LD_INT 111
19208: PUSH
19209: LD_INT 112
19211: PUSH
19212: LD_INT 113
19214: PUSH
19215: LD_INT 114
19217: PUSH
19218: LD_INT 116
19220: PUSH
19221: LD_INT 117
19223: PUSH
19224: LD_INT 118
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: ST_TO_ADDR
19250: GO 20025
19252: LD_INT 16
19254: DOUBLE
19255: EQUAL
19256: IFTRUE 19260
19258: GO 19396
19260: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19261: LD_ADDR_VAR 0 2
19265: PUSH
19266: LD_INT 2
19268: PUSH
19269: LD_INT 4
19271: PUSH
19272: LD_INT 5
19274: PUSH
19275: LD_INT 7
19277: PUSH
19278: LD_INT 11
19280: PUSH
19281: LD_INT 12
19283: PUSH
19284: LD_INT 15
19286: PUSH
19287: LD_INT 16
19289: PUSH
19290: LD_INT 20
19292: PUSH
19293: LD_INT 21
19295: PUSH
19296: LD_INT 22
19298: PUSH
19299: LD_INT 23
19301: PUSH
19302: LD_INT 25
19304: PUSH
19305: LD_INT 26
19307: PUSH
19308: LD_INT 30
19310: PUSH
19311: LD_INT 31
19313: PUSH
19314: LD_INT 32
19316: PUSH
19317: LD_INT 33
19319: PUSH
19320: LD_INT 34
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: PUSH
19344: LD_INT 101
19346: PUSH
19347: LD_INT 102
19349: PUSH
19350: LD_INT 103
19352: PUSH
19353: LD_INT 106
19355: PUSH
19356: LD_INT 108
19358: PUSH
19359: LD_INT 112
19361: PUSH
19362: LD_INT 113
19364: PUSH
19365: LD_INT 114
19367: PUSH
19368: LD_INT 116
19370: PUSH
19371: LD_INT 117
19373: PUSH
19374: LD_INT 118
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: ST_TO_ADDR
19394: GO 20025
19396: LD_INT 17
19398: DOUBLE
19399: EQUAL
19400: IFTRUE 19404
19402: GO 19628
19404: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
19405: LD_ADDR_VAR 0 2
19409: PUSH
19410: LD_INT 1
19412: PUSH
19413: LD_INT 2
19415: PUSH
19416: LD_INT 3
19418: PUSH
19419: LD_INT 4
19421: PUSH
19422: LD_INT 5
19424: PUSH
19425: LD_INT 6
19427: PUSH
19428: LD_INT 7
19430: PUSH
19431: LD_INT 8
19433: PUSH
19434: LD_INT 9
19436: PUSH
19437: LD_INT 10
19439: PUSH
19440: LD_INT 11
19442: PUSH
19443: LD_INT 12
19445: PUSH
19446: LD_INT 13
19448: PUSH
19449: LD_INT 14
19451: PUSH
19452: LD_INT 15
19454: PUSH
19455: LD_INT 16
19457: PUSH
19458: LD_INT 17
19460: PUSH
19461: LD_INT 18
19463: PUSH
19464: LD_INT 19
19466: PUSH
19467: LD_INT 20
19469: PUSH
19470: LD_INT 21
19472: PUSH
19473: LD_INT 22
19475: PUSH
19476: LD_INT 23
19478: PUSH
19479: LD_INT 24
19481: PUSH
19482: LD_INT 25
19484: PUSH
19485: LD_INT 26
19487: PUSH
19488: LD_INT 27
19490: PUSH
19491: LD_INT 28
19493: PUSH
19494: LD_INT 29
19496: PUSH
19497: LD_INT 30
19499: PUSH
19500: LD_INT 31
19502: PUSH
19503: LD_INT 32
19505: PUSH
19506: LD_INT 33
19508: PUSH
19509: LD_INT 34
19511: PUSH
19512: LD_INT 36
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 101
19554: PUSH
19555: LD_INT 102
19557: PUSH
19558: LD_INT 103
19560: PUSH
19561: LD_INT 104
19563: PUSH
19564: LD_INT 105
19566: PUSH
19567: LD_INT 106
19569: PUSH
19570: LD_INT 107
19572: PUSH
19573: LD_INT 108
19575: PUSH
19576: LD_INT 109
19578: PUSH
19579: LD_INT 110
19581: PUSH
19582: LD_INT 111
19584: PUSH
19585: LD_INT 112
19587: PUSH
19588: LD_INT 113
19590: PUSH
19591: LD_INT 114
19593: PUSH
19594: LD_INT 116
19596: PUSH
19597: LD_INT 117
19599: PUSH
19600: LD_INT 118
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: ST_TO_ADDR
19626: GO 20025
19628: LD_INT 18
19630: DOUBLE
19631: EQUAL
19632: IFTRUE 19636
19634: GO 19784
19636: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
19637: LD_ADDR_VAR 0 2
19641: PUSH
19642: LD_INT 2
19644: PUSH
19645: LD_INT 4
19647: PUSH
19648: LD_INT 5
19650: PUSH
19651: LD_INT 7
19653: PUSH
19654: LD_INT 11
19656: PUSH
19657: LD_INT 12
19659: PUSH
19660: LD_INT 15
19662: PUSH
19663: LD_INT 16
19665: PUSH
19666: LD_INT 20
19668: PUSH
19669: LD_INT 21
19671: PUSH
19672: LD_INT 22
19674: PUSH
19675: LD_INT 23
19677: PUSH
19678: LD_INT 25
19680: PUSH
19681: LD_INT 26
19683: PUSH
19684: LD_INT 30
19686: PUSH
19687: LD_INT 31
19689: PUSH
19690: LD_INT 32
19692: PUSH
19693: LD_INT 33
19695: PUSH
19696: LD_INT 34
19698: PUSH
19699: LD_INT 35
19701: PUSH
19702: LD_INT 36
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: PUSH
19728: LD_INT 101
19730: PUSH
19731: LD_INT 102
19733: PUSH
19734: LD_INT 103
19736: PUSH
19737: LD_INT 106
19739: PUSH
19740: LD_INT 108
19742: PUSH
19743: LD_INT 112
19745: PUSH
19746: LD_INT 113
19748: PUSH
19749: LD_INT 114
19751: PUSH
19752: LD_INT 115
19754: PUSH
19755: LD_INT 116
19757: PUSH
19758: LD_INT 117
19760: PUSH
19761: LD_INT 118
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: ST_TO_ADDR
19782: GO 20025
19784: LD_INT 19
19786: DOUBLE
19787: EQUAL
19788: IFTRUE 19792
19790: GO 20024
19792: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19793: LD_ADDR_VAR 0 2
19797: PUSH
19798: LD_INT 1
19800: PUSH
19801: LD_INT 2
19803: PUSH
19804: LD_INT 3
19806: PUSH
19807: LD_INT 4
19809: PUSH
19810: LD_INT 5
19812: PUSH
19813: LD_INT 6
19815: PUSH
19816: LD_INT 7
19818: PUSH
19819: LD_INT 8
19821: PUSH
19822: LD_INT 9
19824: PUSH
19825: LD_INT 10
19827: PUSH
19828: LD_INT 11
19830: PUSH
19831: LD_INT 12
19833: PUSH
19834: LD_INT 13
19836: PUSH
19837: LD_INT 14
19839: PUSH
19840: LD_INT 15
19842: PUSH
19843: LD_INT 16
19845: PUSH
19846: LD_INT 17
19848: PUSH
19849: LD_INT 18
19851: PUSH
19852: LD_INT 19
19854: PUSH
19855: LD_INT 20
19857: PUSH
19858: LD_INT 21
19860: PUSH
19861: LD_INT 22
19863: PUSH
19864: LD_INT 23
19866: PUSH
19867: LD_INT 24
19869: PUSH
19870: LD_INT 25
19872: PUSH
19873: LD_INT 26
19875: PUSH
19876: LD_INT 27
19878: PUSH
19879: LD_INT 28
19881: PUSH
19882: LD_INT 29
19884: PUSH
19885: LD_INT 30
19887: PUSH
19888: LD_INT 31
19890: PUSH
19891: LD_INT 32
19893: PUSH
19894: LD_INT 33
19896: PUSH
19897: LD_INT 34
19899: PUSH
19900: LD_INT 35
19902: PUSH
19903: LD_INT 36
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 101
19946: PUSH
19947: LD_INT 102
19949: PUSH
19950: LD_INT 103
19952: PUSH
19953: LD_INT 104
19955: PUSH
19956: LD_INT 105
19958: PUSH
19959: LD_INT 106
19961: PUSH
19962: LD_INT 107
19964: PUSH
19965: LD_INT 108
19967: PUSH
19968: LD_INT 109
19970: PUSH
19971: LD_INT 110
19973: PUSH
19974: LD_INT 111
19976: PUSH
19977: LD_INT 112
19979: PUSH
19980: LD_INT 113
19982: PUSH
19983: LD_INT 114
19985: PUSH
19986: LD_INT 115
19988: PUSH
19989: LD_INT 116
19991: PUSH
19992: LD_INT 117
19994: PUSH
19995: LD_INT 118
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: ST_TO_ADDR
20022: GO 20025
20024: POP
// end else
20025: GO 20256
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
20027: LD_ADDR_VAR 0 2
20031: PUSH
20032: LD_INT 1
20034: PUSH
20035: LD_INT 2
20037: PUSH
20038: LD_INT 3
20040: PUSH
20041: LD_INT 4
20043: PUSH
20044: LD_INT 5
20046: PUSH
20047: LD_INT 6
20049: PUSH
20050: LD_INT 7
20052: PUSH
20053: LD_INT 8
20055: PUSH
20056: LD_INT 9
20058: PUSH
20059: LD_INT 10
20061: PUSH
20062: LD_INT 11
20064: PUSH
20065: LD_INT 12
20067: PUSH
20068: LD_INT 13
20070: PUSH
20071: LD_INT 14
20073: PUSH
20074: LD_INT 15
20076: PUSH
20077: LD_INT 16
20079: PUSH
20080: LD_INT 17
20082: PUSH
20083: LD_INT 18
20085: PUSH
20086: LD_INT 19
20088: PUSH
20089: LD_INT 20
20091: PUSH
20092: LD_INT 21
20094: PUSH
20095: LD_INT 22
20097: PUSH
20098: LD_INT 23
20100: PUSH
20101: LD_INT 24
20103: PUSH
20104: LD_INT 25
20106: PUSH
20107: LD_INT 26
20109: PUSH
20110: LD_INT 27
20112: PUSH
20113: LD_INT 28
20115: PUSH
20116: LD_INT 29
20118: PUSH
20119: LD_INT 30
20121: PUSH
20122: LD_INT 31
20124: PUSH
20125: LD_INT 32
20127: PUSH
20128: LD_INT 33
20130: PUSH
20131: LD_INT 34
20133: PUSH
20134: LD_INT 35
20136: PUSH
20137: LD_INT 36
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: PUSH
20178: LD_INT 101
20180: PUSH
20181: LD_INT 102
20183: PUSH
20184: LD_INT 103
20186: PUSH
20187: LD_INT 104
20189: PUSH
20190: LD_INT 105
20192: PUSH
20193: LD_INT 106
20195: PUSH
20196: LD_INT 107
20198: PUSH
20199: LD_INT 108
20201: PUSH
20202: LD_INT 109
20204: PUSH
20205: LD_INT 110
20207: PUSH
20208: LD_INT 111
20210: PUSH
20211: LD_INT 112
20213: PUSH
20214: LD_INT 113
20216: PUSH
20217: LD_INT 114
20219: PUSH
20220: LD_INT 115
20222: PUSH
20223: LD_INT 116
20225: PUSH
20226: LD_INT 117
20228: PUSH
20229: LD_INT 118
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: ST_TO_ADDR
// if result then
20256: LD_VAR 0 2
20260: IFFALSE 21046
// begin normal :=  ;
20262: LD_ADDR_VAR 0 5
20266: PUSH
20267: LD_STRING 
20269: ST_TO_ADDR
// hardcore :=  ;
20270: LD_ADDR_VAR 0 6
20274: PUSH
20275: LD_STRING 
20277: ST_TO_ADDR
// active :=  ;
20278: LD_ADDR_VAR 0 7
20282: PUSH
20283: LD_STRING 
20285: ST_TO_ADDR
// for i = 1 to normalCounter do
20286: LD_ADDR_VAR 0 8
20290: PUSH
20291: DOUBLE
20292: LD_INT 1
20294: DEC
20295: ST_TO_ADDR
20296: LD_EXP 38
20300: PUSH
20301: FOR_TO
20302: IFFALSE 20403
// begin tmp := 0 ;
20304: LD_ADDR_VAR 0 3
20308: PUSH
20309: LD_STRING 0
20311: ST_TO_ADDR
// if result [ 1 ] then
20312: LD_VAR 0 2
20316: PUSH
20317: LD_INT 1
20319: ARRAY
20320: IFFALSE 20385
// if result [ 1 ] [ 1 ] = i then
20322: LD_VAR 0 2
20326: PUSH
20327: LD_INT 1
20329: ARRAY
20330: PUSH
20331: LD_INT 1
20333: ARRAY
20334: PUSH
20335: LD_VAR 0 8
20339: EQUAL
20340: IFFALSE 20385
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20342: LD_ADDR_VAR 0 2
20346: PUSH
20347: LD_VAR 0 2
20351: PPUSH
20352: LD_INT 1
20354: PPUSH
20355: LD_VAR 0 2
20359: PUSH
20360: LD_INT 1
20362: ARRAY
20363: PPUSH
20364: LD_INT 1
20366: PPUSH
20367: CALL_OW 3
20371: PPUSH
20372: CALL_OW 1
20376: ST_TO_ADDR
// tmp := 1 ;
20377: LD_ADDR_VAR 0 3
20381: PUSH
20382: LD_STRING 1
20384: ST_TO_ADDR
// end ; normal := normal & tmp ;
20385: LD_ADDR_VAR 0 5
20389: PUSH
20390: LD_VAR 0 5
20394: PUSH
20395: LD_VAR 0 3
20399: STR
20400: ST_TO_ADDR
// end ;
20401: GO 20301
20403: POP
20404: POP
// for i = 1 to hardcoreCounter do
20405: LD_ADDR_VAR 0 8
20409: PUSH
20410: DOUBLE
20411: LD_INT 1
20413: DEC
20414: ST_TO_ADDR
20415: LD_EXP 39
20419: PUSH
20420: FOR_TO
20421: IFFALSE 20526
// begin tmp := 0 ;
20423: LD_ADDR_VAR 0 3
20427: PUSH
20428: LD_STRING 0
20430: ST_TO_ADDR
// if result [ 2 ] then
20431: LD_VAR 0 2
20435: PUSH
20436: LD_INT 2
20438: ARRAY
20439: IFFALSE 20508
// if result [ 2 ] [ 1 ] = 100 + i then
20441: LD_VAR 0 2
20445: PUSH
20446: LD_INT 2
20448: ARRAY
20449: PUSH
20450: LD_INT 1
20452: ARRAY
20453: PUSH
20454: LD_INT 100
20456: PUSH
20457: LD_VAR 0 8
20461: PLUS
20462: EQUAL
20463: IFFALSE 20508
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20465: LD_ADDR_VAR 0 2
20469: PUSH
20470: LD_VAR 0 2
20474: PPUSH
20475: LD_INT 2
20477: PPUSH
20478: LD_VAR 0 2
20482: PUSH
20483: LD_INT 2
20485: ARRAY
20486: PPUSH
20487: LD_INT 1
20489: PPUSH
20490: CALL_OW 3
20494: PPUSH
20495: CALL_OW 1
20499: ST_TO_ADDR
// tmp := 1 ;
20500: LD_ADDR_VAR 0 3
20504: PUSH
20505: LD_STRING 1
20507: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20508: LD_ADDR_VAR 0 6
20512: PUSH
20513: LD_VAR 0 6
20517: PUSH
20518: LD_VAR 0 3
20522: STR
20523: ST_TO_ADDR
// end ;
20524: GO 20420
20526: POP
20527: POP
// if isGameLoad then
20528: LD_VAR 0 1
20532: IFFALSE 21007
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
20534: LD_ADDR_VAR 0 4
20538: PUSH
20539: LD_EXP 42
20543: PUSH
20544: LD_EXP 41
20548: PUSH
20549: LD_EXP 43
20553: PUSH
20554: LD_EXP 40
20558: PUSH
20559: LD_EXP 44
20563: PUSH
20564: LD_EXP 45
20568: PUSH
20569: LD_EXP 46
20573: PUSH
20574: LD_EXP 47
20578: PUSH
20579: LD_EXP 48
20583: PUSH
20584: LD_EXP 49
20588: PUSH
20589: LD_EXP 50
20593: PUSH
20594: LD_EXP 51
20598: PUSH
20599: LD_EXP 52
20603: PUSH
20604: LD_EXP 53
20608: PUSH
20609: LD_EXP 61
20613: PUSH
20614: LD_EXP 62
20618: PUSH
20619: LD_EXP 63
20623: PUSH
20624: LD_EXP 64
20628: PUSH
20629: LD_EXP 66
20633: PUSH
20634: LD_EXP 67
20638: PUSH
20639: LD_EXP 68
20643: PUSH
20644: LD_EXP 71
20648: PUSH
20649: LD_EXP 73
20653: PUSH
20654: LD_EXP 74
20658: PUSH
20659: LD_EXP 75
20663: PUSH
20664: LD_EXP 77
20668: PUSH
20669: LD_EXP 78
20673: PUSH
20674: LD_EXP 81
20678: PUSH
20679: LD_EXP 82
20683: PUSH
20684: LD_EXP 83
20688: PUSH
20689: LD_EXP 84
20693: PUSH
20694: LD_EXP 85
20698: PUSH
20699: LD_EXP 86
20703: PUSH
20704: LD_EXP 87
20708: PUSH
20709: LD_EXP 88
20713: PUSH
20714: LD_EXP 89
20718: PUSH
20719: LD_EXP 54
20723: PUSH
20724: LD_EXP 55
20728: PUSH
20729: LD_EXP 58
20733: PUSH
20734: LD_EXP 59
20738: PUSH
20739: LD_EXP 60
20743: PUSH
20744: LD_EXP 56
20748: PUSH
20749: LD_EXP 57
20753: PUSH
20754: LD_EXP 65
20758: PUSH
20759: LD_EXP 69
20763: PUSH
20764: LD_EXP 70
20768: PUSH
20769: LD_EXP 72
20773: PUSH
20774: LD_EXP 76
20778: PUSH
20779: LD_EXP 79
20783: PUSH
20784: LD_EXP 80
20788: PUSH
20789: LD_EXP 90
20793: PUSH
20794: LD_EXP 91
20798: PUSH
20799: LD_EXP 92
20803: PUSH
20804: LD_EXP 93
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: ST_TO_ADDR
// tmp :=  ;
20865: LD_ADDR_VAR 0 3
20869: PUSH
20870: LD_STRING 
20872: ST_TO_ADDR
// for i = 1 to normalCounter do
20873: LD_ADDR_VAR 0 8
20877: PUSH
20878: DOUBLE
20879: LD_INT 1
20881: DEC
20882: ST_TO_ADDR
20883: LD_EXP 38
20887: PUSH
20888: FOR_TO
20889: IFFALSE 20925
// begin if flags [ i ] then
20891: LD_VAR 0 4
20895: PUSH
20896: LD_VAR 0 8
20900: ARRAY
20901: IFFALSE 20923
// tmp := tmp & i & ; ;
20903: LD_ADDR_VAR 0 3
20907: PUSH
20908: LD_VAR 0 3
20912: PUSH
20913: LD_VAR 0 8
20917: STR
20918: PUSH
20919: LD_STRING ;
20921: STR
20922: ST_TO_ADDR
// end ;
20923: GO 20888
20925: POP
20926: POP
// for i = 1 to hardcoreCounter do
20927: LD_ADDR_VAR 0 8
20931: PUSH
20932: DOUBLE
20933: LD_INT 1
20935: DEC
20936: ST_TO_ADDR
20937: LD_EXP 39
20941: PUSH
20942: FOR_TO
20943: IFFALSE 20989
// begin if flags [ normalCounter + i ] then
20945: LD_VAR 0 4
20949: PUSH
20950: LD_EXP 38
20954: PUSH
20955: LD_VAR 0 8
20959: PLUS
20960: ARRAY
20961: IFFALSE 20987
// tmp := tmp & ( 100 + i ) & ; ;
20963: LD_ADDR_VAR 0 3
20967: PUSH
20968: LD_VAR 0 3
20972: PUSH
20973: LD_INT 100
20975: PUSH
20976: LD_VAR 0 8
20980: PLUS
20981: STR
20982: PUSH
20983: LD_STRING ;
20985: STR
20986: ST_TO_ADDR
// end ;
20987: GO 20942
20989: POP
20990: POP
// if tmp then
20991: LD_VAR 0 3
20995: IFFALSE 21007
// active := tmp ;
20997: LD_ADDR_VAR 0 7
21001: PUSH
21002: LD_VAR 0 3
21006: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
21007: LD_STRING getStreamItemsFromMission("
21009: PUSH
21010: LD_VAR 0 5
21014: STR
21015: PUSH
21016: LD_STRING ","
21018: STR
21019: PUSH
21020: LD_VAR 0 6
21024: STR
21025: PUSH
21026: LD_STRING ","
21028: STR
21029: PUSH
21030: LD_VAR 0 7
21034: STR
21035: PUSH
21036: LD_STRING ")
21038: STR
21039: PPUSH
21040: CALL_OW 559
// end else
21044: GO 21053
// ToLua ( getStreamItemsFromMission("","","") ) ;
21046: LD_STRING getStreamItemsFromMission("","","")
21048: PPUSH
21049: CALL_OW 559
// end ;
21053: LD_VAR 0 2
21057: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21058: LD_EXP 37
21062: PUSH
21063: LD_EXP 42
21067: AND
21068: IFFALSE 21192
21070: GO 21072
21072: DISABLE
21073: LD_INT 0
21075: PPUSH
21076: PPUSH
// begin enable ;
21077: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21078: LD_ADDR_VAR 0 2
21082: PUSH
21083: LD_INT 22
21085: PUSH
21086: LD_OWVAR 2
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PUSH
21095: LD_INT 2
21097: PUSH
21098: LD_INT 34
21100: PUSH
21101: LD_INT 7
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: PUSH
21108: LD_INT 34
21110: PUSH
21111: LD_INT 45
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: LD_INT 34
21120: PUSH
21121: LD_INT 28
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 34
21130: PUSH
21131: LD_INT 47
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: PPUSH
21149: CALL_OW 69
21153: ST_TO_ADDR
// if not tmp then
21154: LD_VAR 0 2
21158: NOT
21159: IFFALSE 21163
// exit ;
21161: GO 21192
// for i in tmp do
21163: LD_ADDR_VAR 0 1
21167: PUSH
21168: LD_VAR 0 2
21172: PUSH
21173: FOR_IN
21174: IFFALSE 21190
// begin SetLives ( i , 0 ) ;
21176: LD_VAR 0 1
21180: PPUSH
21181: LD_INT 0
21183: PPUSH
21184: CALL_OW 234
// end ;
21188: GO 21173
21190: POP
21191: POP
// end ;
21192: PPOPN 2
21194: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21195: LD_EXP 37
21199: PUSH
21200: LD_EXP 43
21204: AND
21205: IFFALSE 21289
21207: GO 21209
21209: DISABLE
21210: LD_INT 0
21212: PPUSH
21213: PPUSH
// begin enable ;
21214: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21215: LD_ADDR_VAR 0 2
21219: PUSH
21220: LD_INT 22
21222: PUSH
21223: LD_OWVAR 2
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: PUSH
21232: LD_INT 32
21234: PUSH
21235: LD_INT 3
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PPUSH
21246: CALL_OW 69
21250: ST_TO_ADDR
// if not tmp then
21251: LD_VAR 0 2
21255: NOT
21256: IFFALSE 21260
// exit ;
21258: GO 21289
// for i in tmp do
21260: LD_ADDR_VAR 0 1
21264: PUSH
21265: LD_VAR 0 2
21269: PUSH
21270: FOR_IN
21271: IFFALSE 21287
// begin SetLives ( i , 0 ) ;
21273: LD_VAR 0 1
21277: PPUSH
21278: LD_INT 0
21280: PPUSH
21281: CALL_OW 234
// end ;
21285: GO 21270
21287: POP
21288: POP
// end ;
21289: PPOPN 2
21291: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21292: LD_EXP 37
21296: PUSH
21297: LD_EXP 40
21301: AND
21302: IFFALSE 21395
21304: GO 21306
21306: DISABLE
21307: LD_INT 0
21309: PPUSH
// begin enable ;
21310: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21311: LD_ADDR_VAR 0 1
21315: PUSH
21316: LD_INT 22
21318: PUSH
21319: LD_OWVAR 2
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: LD_INT 2
21330: PUSH
21331: LD_INT 25
21333: PUSH
21334: LD_INT 5
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 25
21343: PUSH
21344: LD_INT 9
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 25
21353: PUSH
21354: LD_INT 8
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: PPUSH
21371: CALL_OW 69
21375: PUSH
21376: FOR_IN
21377: IFFALSE 21393
// begin SetClass ( i , 1 ) ;
21379: LD_VAR 0 1
21383: PPUSH
21384: LD_INT 1
21386: PPUSH
21387: CALL_OW 336
// end ;
21391: GO 21376
21393: POP
21394: POP
// end ;
21395: PPOPN 1
21397: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21398: LD_EXP 37
21402: PUSH
21403: LD_EXP 41
21407: AND
21408: PUSH
21409: LD_OWVAR 65
21413: PUSH
21414: LD_INT 7
21416: LESS
21417: AND
21418: IFFALSE 21432
21420: GO 21422
21422: DISABLE
// begin enable ;
21423: ENABLE
// game_speed := 7 ;
21424: LD_ADDR_OWVAR 65
21428: PUSH
21429: LD_INT 7
21431: ST_TO_ADDR
// end ;
21432: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21433: LD_EXP 37
21437: PUSH
21438: LD_EXP 44
21442: AND
21443: IFFALSE 21645
21445: GO 21447
21447: DISABLE
21448: LD_INT 0
21450: PPUSH
21451: PPUSH
21452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21453: LD_ADDR_VAR 0 3
21457: PUSH
21458: LD_INT 81
21460: PUSH
21461: LD_OWVAR 2
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: PUSH
21470: LD_INT 21
21472: PUSH
21473: LD_INT 1
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PPUSH
21484: CALL_OW 69
21488: ST_TO_ADDR
// if not tmp then
21489: LD_VAR 0 3
21493: NOT
21494: IFFALSE 21498
// exit ;
21496: GO 21645
// if tmp > 5 then
21498: LD_VAR 0 3
21502: PUSH
21503: LD_INT 5
21505: GREATER
21506: IFFALSE 21518
// k := 5 else
21508: LD_ADDR_VAR 0 2
21512: PUSH
21513: LD_INT 5
21515: ST_TO_ADDR
21516: GO 21528
// k := tmp ;
21518: LD_ADDR_VAR 0 2
21522: PUSH
21523: LD_VAR 0 3
21527: ST_TO_ADDR
// for i := 1 to k do
21528: LD_ADDR_VAR 0 1
21532: PUSH
21533: DOUBLE
21534: LD_INT 1
21536: DEC
21537: ST_TO_ADDR
21538: LD_VAR 0 2
21542: PUSH
21543: FOR_TO
21544: IFFALSE 21643
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21546: LD_VAR 0 3
21550: PUSH
21551: LD_VAR 0 1
21555: ARRAY
21556: PPUSH
21557: LD_VAR 0 1
21561: PUSH
21562: LD_INT 4
21564: MOD
21565: PUSH
21566: LD_INT 1
21568: PLUS
21569: PPUSH
21570: CALL_OW 259
21574: PUSH
21575: LD_INT 10
21577: LESS
21578: IFFALSE 21641
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21580: LD_VAR 0 3
21584: PUSH
21585: LD_VAR 0 1
21589: ARRAY
21590: PPUSH
21591: LD_VAR 0 1
21595: PUSH
21596: LD_INT 4
21598: MOD
21599: PUSH
21600: LD_INT 1
21602: PLUS
21603: PPUSH
21604: LD_VAR 0 3
21608: PUSH
21609: LD_VAR 0 1
21613: ARRAY
21614: PPUSH
21615: LD_VAR 0 1
21619: PUSH
21620: LD_INT 4
21622: MOD
21623: PUSH
21624: LD_INT 1
21626: PLUS
21627: PPUSH
21628: CALL_OW 259
21632: PUSH
21633: LD_INT 1
21635: PLUS
21636: PPUSH
21637: CALL_OW 237
21641: GO 21543
21643: POP
21644: POP
// end ;
21645: PPOPN 3
21647: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21648: LD_EXP 37
21652: PUSH
21653: LD_EXP 45
21657: AND
21658: IFFALSE 21678
21660: GO 21662
21662: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21663: LD_INT 4
21665: PPUSH
21666: LD_OWVAR 2
21670: PPUSH
21671: LD_INT 0
21673: PPUSH
21674: CALL_OW 324
21678: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21679: LD_EXP 37
21683: PUSH
21684: LD_EXP 74
21688: AND
21689: IFFALSE 21709
21691: GO 21693
21693: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21694: LD_INT 19
21696: PPUSH
21697: LD_OWVAR 2
21701: PPUSH
21702: LD_INT 0
21704: PPUSH
21705: CALL_OW 324
21709: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21710: LD_EXP 37
21714: PUSH
21715: LD_EXP 46
21719: AND
21720: IFFALSE 21822
21722: GO 21724
21724: DISABLE
21725: LD_INT 0
21727: PPUSH
21728: PPUSH
// begin enable ;
21729: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21730: LD_ADDR_VAR 0 2
21734: PUSH
21735: LD_INT 22
21737: PUSH
21738: LD_OWVAR 2
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PUSH
21747: LD_INT 2
21749: PUSH
21750: LD_INT 34
21752: PUSH
21753: LD_INT 11
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: PUSH
21760: LD_INT 34
21762: PUSH
21763: LD_INT 30
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: LIST
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PPUSH
21779: CALL_OW 69
21783: ST_TO_ADDR
// if not tmp then
21784: LD_VAR 0 2
21788: NOT
21789: IFFALSE 21793
// exit ;
21791: GO 21822
// for i in tmp do
21793: LD_ADDR_VAR 0 1
21797: PUSH
21798: LD_VAR 0 2
21802: PUSH
21803: FOR_IN
21804: IFFALSE 21820
// begin SetLives ( i , 0 ) ;
21806: LD_VAR 0 1
21810: PPUSH
21811: LD_INT 0
21813: PPUSH
21814: CALL_OW 234
// end ;
21818: GO 21803
21820: POP
21821: POP
// end ;
21822: PPOPN 2
21824: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21825: LD_EXP 37
21829: PUSH
21830: LD_EXP 47
21834: AND
21835: IFFALSE 21855
21837: GO 21839
21839: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21840: LD_INT 32
21842: PPUSH
21843: LD_OWVAR 2
21847: PPUSH
21848: LD_INT 0
21850: PPUSH
21851: CALL_OW 324
21855: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21856: LD_EXP 37
21860: PUSH
21861: LD_EXP 48
21865: AND
21866: IFFALSE 22047
21868: GO 21870
21870: DISABLE
21871: LD_INT 0
21873: PPUSH
21874: PPUSH
21875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21876: LD_ADDR_VAR 0 2
21880: PUSH
21881: LD_INT 22
21883: PUSH
21884: LD_OWVAR 2
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: PUSH
21893: LD_INT 33
21895: PUSH
21896: LD_INT 3
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: PUSH
21903: EMPTY
21904: LIST
21905: LIST
21906: PPUSH
21907: CALL_OW 69
21911: ST_TO_ADDR
// if not tmp then
21912: LD_VAR 0 2
21916: NOT
21917: IFFALSE 21921
// exit ;
21919: GO 22047
// side := 0 ;
21921: LD_ADDR_VAR 0 3
21925: PUSH
21926: LD_INT 0
21928: ST_TO_ADDR
// for i := 1 to 8 do
21929: LD_ADDR_VAR 0 1
21933: PUSH
21934: DOUBLE
21935: LD_INT 1
21937: DEC
21938: ST_TO_ADDR
21939: LD_INT 8
21941: PUSH
21942: FOR_TO
21943: IFFALSE 21991
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21945: LD_OWVAR 2
21949: PUSH
21950: LD_VAR 0 1
21954: NONEQUAL
21955: PUSH
21956: LD_OWVAR 2
21960: PPUSH
21961: LD_VAR 0 1
21965: PPUSH
21966: CALL_OW 81
21970: PUSH
21971: LD_INT 2
21973: EQUAL
21974: AND
21975: IFFALSE 21989
// begin side := i ;
21977: LD_ADDR_VAR 0 3
21981: PUSH
21982: LD_VAR 0 1
21986: ST_TO_ADDR
// break ;
21987: GO 21991
// end ;
21989: GO 21942
21991: POP
21992: POP
// if not side then
21993: LD_VAR 0 3
21997: NOT
21998: IFFALSE 22002
// exit ;
22000: GO 22047
// for i := 1 to tmp do
22002: LD_ADDR_VAR 0 1
22006: PUSH
22007: DOUBLE
22008: LD_INT 1
22010: DEC
22011: ST_TO_ADDR
22012: LD_VAR 0 2
22016: PUSH
22017: FOR_TO
22018: IFFALSE 22045
// if Prob ( 60 ) then
22020: LD_INT 60
22022: PPUSH
22023: CALL_OW 13
22027: IFFALSE 22043
// SetSide ( i , side ) ;
22029: LD_VAR 0 1
22033: PPUSH
22034: LD_VAR 0 3
22038: PPUSH
22039: CALL_OW 235
22043: GO 22017
22045: POP
22046: POP
// end ;
22047: PPOPN 3
22049: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22050: LD_EXP 37
22054: PUSH
22055: LD_EXP 50
22059: AND
22060: IFFALSE 22179
22062: GO 22064
22064: DISABLE
22065: LD_INT 0
22067: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22068: LD_ADDR_VAR 0 1
22072: PUSH
22073: LD_INT 22
22075: PUSH
22076: LD_OWVAR 2
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 21
22087: PUSH
22088: LD_INT 1
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: LD_INT 3
22097: PUSH
22098: LD_INT 23
22100: PUSH
22101: LD_INT 0
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: LIST
22116: PPUSH
22117: CALL_OW 69
22121: PUSH
22122: FOR_IN
22123: IFFALSE 22177
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22125: LD_VAR 0 1
22129: PPUSH
22130: CALL_OW 257
22134: PUSH
22135: LD_INT 1
22137: PUSH
22138: LD_INT 2
22140: PUSH
22141: LD_INT 3
22143: PUSH
22144: LD_INT 4
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: IN
22153: IFFALSE 22175
// SetClass ( un , rand ( 1 , 4 ) ) ;
22155: LD_VAR 0 1
22159: PPUSH
22160: LD_INT 1
22162: PPUSH
22163: LD_INT 4
22165: PPUSH
22166: CALL_OW 12
22170: PPUSH
22171: CALL_OW 336
22175: GO 22122
22177: POP
22178: POP
// end ;
22179: PPOPN 1
22181: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22182: LD_EXP 37
22186: PUSH
22187: LD_EXP 49
22191: AND
22192: IFFALSE 22271
22194: GO 22196
22196: DISABLE
22197: LD_INT 0
22199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22200: LD_ADDR_VAR 0 1
22204: PUSH
22205: LD_INT 22
22207: PUSH
22208: LD_OWVAR 2
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: PUSH
22217: LD_INT 21
22219: PUSH
22220: LD_INT 3
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PPUSH
22231: CALL_OW 69
22235: ST_TO_ADDR
// if not tmp then
22236: LD_VAR 0 1
22240: NOT
22241: IFFALSE 22245
// exit ;
22243: GO 22271
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22245: LD_VAR 0 1
22249: PUSH
22250: LD_INT 1
22252: PPUSH
22253: LD_VAR 0 1
22257: PPUSH
22258: CALL_OW 12
22262: ARRAY
22263: PPUSH
22264: LD_INT 100
22266: PPUSH
22267: CALL_OW 234
// end ;
22271: PPOPN 1
22273: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22274: LD_EXP 37
22278: PUSH
22279: LD_EXP 51
22283: AND
22284: IFFALSE 22382
22286: GO 22288
22288: DISABLE
22289: LD_INT 0
22291: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22292: LD_ADDR_VAR 0 1
22296: PUSH
22297: LD_INT 22
22299: PUSH
22300: LD_OWVAR 2
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: LD_INT 21
22311: PUSH
22312: LD_INT 1
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: PPUSH
22323: CALL_OW 69
22327: ST_TO_ADDR
// if not tmp then
22328: LD_VAR 0 1
22332: NOT
22333: IFFALSE 22337
// exit ;
22335: GO 22382
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22337: LD_VAR 0 1
22341: PUSH
22342: LD_INT 1
22344: PPUSH
22345: LD_VAR 0 1
22349: PPUSH
22350: CALL_OW 12
22354: ARRAY
22355: PPUSH
22356: LD_INT 1
22358: PPUSH
22359: LD_INT 4
22361: PPUSH
22362: CALL_OW 12
22366: PPUSH
22367: LD_INT 3000
22369: PPUSH
22370: LD_INT 9000
22372: PPUSH
22373: CALL_OW 12
22377: PPUSH
22378: CALL_OW 492
// end ;
22382: PPOPN 1
22384: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22385: LD_EXP 37
22389: PUSH
22390: LD_EXP 52
22394: AND
22395: IFFALSE 22415
22397: GO 22399
22399: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22400: LD_INT 1
22402: PPUSH
22403: LD_OWVAR 2
22407: PPUSH
22408: LD_INT 0
22410: PPUSH
22411: CALL_OW 324
22415: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22416: LD_EXP 37
22420: PUSH
22421: LD_EXP 53
22425: AND
22426: IFFALSE 22509
22428: GO 22430
22430: DISABLE
22431: LD_INT 0
22433: PPUSH
22434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22435: LD_ADDR_VAR 0 2
22439: PUSH
22440: LD_INT 22
22442: PUSH
22443: LD_OWVAR 2
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_INT 21
22454: PUSH
22455: LD_INT 3
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PPUSH
22466: CALL_OW 69
22470: ST_TO_ADDR
// if not tmp then
22471: LD_VAR 0 2
22475: NOT
22476: IFFALSE 22480
// exit ;
22478: GO 22509
// for i in tmp do
22480: LD_ADDR_VAR 0 1
22484: PUSH
22485: LD_VAR 0 2
22489: PUSH
22490: FOR_IN
22491: IFFALSE 22507
// SetBLevel ( i , 10 ) ;
22493: LD_VAR 0 1
22497: PPUSH
22498: LD_INT 10
22500: PPUSH
22501: CALL_OW 241
22505: GO 22490
22507: POP
22508: POP
// end ;
22509: PPOPN 2
22511: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22512: LD_EXP 37
22516: PUSH
22517: LD_EXP 54
22521: AND
22522: IFFALSE 22633
22524: GO 22526
22526: DISABLE
22527: LD_INT 0
22529: PPUSH
22530: PPUSH
22531: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22532: LD_ADDR_VAR 0 3
22536: PUSH
22537: LD_INT 22
22539: PUSH
22540: LD_OWVAR 2
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 25
22551: PUSH
22552: LD_INT 1
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: PPUSH
22563: CALL_OW 69
22567: ST_TO_ADDR
// if not tmp then
22568: LD_VAR 0 3
22572: NOT
22573: IFFALSE 22577
// exit ;
22575: GO 22633
// un := tmp [ rand ( 1 , tmp ) ] ;
22577: LD_ADDR_VAR 0 2
22581: PUSH
22582: LD_VAR 0 3
22586: PUSH
22587: LD_INT 1
22589: PPUSH
22590: LD_VAR 0 3
22594: PPUSH
22595: CALL_OW 12
22599: ARRAY
22600: ST_TO_ADDR
// if Crawls ( un ) then
22601: LD_VAR 0 2
22605: PPUSH
22606: CALL_OW 318
22610: IFFALSE 22621
// ComWalk ( un ) ;
22612: LD_VAR 0 2
22616: PPUSH
22617: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22621: LD_VAR 0 2
22625: PPUSH
22626: LD_INT 5
22628: PPUSH
22629: CALL_OW 336
// end ;
22633: PPOPN 3
22635: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
22636: LD_EXP 37
22640: PUSH
22641: LD_EXP 55
22645: AND
22646: PUSH
22647: LD_OWVAR 67
22651: PUSH
22652: LD_INT 4
22654: LESS
22655: AND
22656: IFFALSE 22675
22658: GO 22660
22660: DISABLE
// begin Difficulty := Difficulty + 1 ;
22661: LD_ADDR_OWVAR 67
22665: PUSH
22666: LD_OWVAR 67
22670: PUSH
22671: LD_INT 1
22673: PLUS
22674: ST_TO_ADDR
// end ;
22675: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22676: LD_EXP 37
22680: PUSH
22681: LD_EXP 56
22685: AND
22686: IFFALSE 22789
22688: GO 22690
22690: DISABLE
22691: LD_INT 0
22693: PPUSH
// begin for i := 1 to 5 do
22694: LD_ADDR_VAR 0 1
22698: PUSH
22699: DOUBLE
22700: LD_INT 1
22702: DEC
22703: ST_TO_ADDR
22704: LD_INT 5
22706: PUSH
22707: FOR_TO
22708: IFFALSE 22787
// begin uc_nation := nation_nature ;
22710: LD_ADDR_OWVAR 21
22714: PUSH
22715: LD_INT 0
22717: ST_TO_ADDR
// uc_side := 0 ;
22718: LD_ADDR_OWVAR 20
22722: PUSH
22723: LD_INT 0
22725: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22726: LD_ADDR_OWVAR 29
22730: PUSH
22731: LD_INT 12
22733: PUSH
22734: LD_INT 12
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: ST_TO_ADDR
// hc_agressivity := 20 ;
22741: LD_ADDR_OWVAR 35
22745: PUSH
22746: LD_INT 20
22748: ST_TO_ADDR
// hc_class := class_tiger ;
22749: LD_ADDR_OWVAR 28
22753: PUSH
22754: LD_INT 14
22756: ST_TO_ADDR
// hc_gallery :=  ;
22757: LD_ADDR_OWVAR 33
22761: PUSH
22762: LD_STRING 
22764: ST_TO_ADDR
// hc_name :=  ;
22765: LD_ADDR_OWVAR 26
22769: PUSH
22770: LD_STRING 
22772: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22773: CALL_OW 44
22777: PPUSH
22778: LD_INT 0
22780: PPUSH
22781: CALL_OW 51
// end ;
22785: GO 22707
22787: POP
22788: POP
// end ;
22789: PPOPN 1
22791: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22792: LD_EXP 37
22796: PUSH
22797: LD_EXP 57
22801: AND
22802: IFFALSE 22811
22804: GO 22806
22806: DISABLE
// StreamSibBomb ;
22807: CALL 22812 0 0
22811: END
// export function StreamSibBomb ; var i , x , y ; begin
22812: LD_INT 0
22814: PPUSH
22815: PPUSH
22816: PPUSH
22817: PPUSH
// result := false ;
22818: LD_ADDR_VAR 0 1
22822: PUSH
22823: LD_INT 0
22825: ST_TO_ADDR
// for i := 1 to 16 do
22826: LD_ADDR_VAR 0 2
22830: PUSH
22831: DOUBLE
22832: LD_INT 1
22834: DEC
22835: ST_TO_ADDR
22836: LD_INT 16
22838: PUSH
22839: FOR_TO
22840: IFFALSE 23039
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22842: LD_ADDR_VAR 0 3
22846: PUSH
22847: LD_INT 10
22849: PUSH
22850: LD_INT 20
22852: PUSH
22853: LD_INT 30
22855: PUSH
22856: LD_INT 40
22858: PUSH
22859: LD_INT 50
22861: PUSH
22862: LD_INT 60
22864: PUSH
22865: LD_INT 70
22867: PUSH
22868: LD_INT 80
22870: PUSH
22871: LD_INT 90
22873: PUSH
22874: LD_INT 100
22876: PUSH
22877: LD_INT 110
22879: PUSH
22880: LD_INT 120
22882: PUSH
22883: LD_INT 130
22885: PUSH
22886: LD_INT 140
22888: PUSH
22889: LD_INT 150
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: PUSH
22909: LD_INT 1
22911: PPUSH
22912: LD_INT 15
22914: PPUSH
22915: CALL_OW 12
22919: ARRAY
22920: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22921: LD_ADDR_VAR 0 4
22925: PUSH
22926: LD_INT 10
22928: PUSH
22929: LD_INT 20
22931: PUSH
22932: LD_INT 30
22934: PUSH
22935: LD_INT 40
22937: PUSH
22938: LD_INT 50
22940: PUSH
22941: LD_INT 60
22943: PUSH
22944: LD_INT 70
22946: PUSH
22947: LD_INT 80
22949: PUSH
22950: LD_INT 90
22952: PUSH
22953: LD_INT 100
22955: PUSH
22956: LD_INT 110
22958: PUSH
22959: LD_INT 120
22961: PUSH
22962: LD_INT 130
22964: PUSH
22965: LD_INT 140
22967: PUSH
22968: LD_INT 150
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: PUSH
22988: LD_INT 1
22990: PPUSH
22991: LD_INT 15
22993: PPUSH
22994: CALL_OW 12
22998: ARRAY
22999: ST_TO_ADDR
// if ValidHex ( x , y ) then
23000: LD_VAR 0 3
23004: PPUSH
23005: LD_VAR 0 4
23009: PPUSH
23010: CALL_OW 488
23014: IFFALSE 23037
// begin result := [ x , y ] ;
23016: LD_ADDR_VAR 0 1
23020: PUSH
23021: LD_VAR 0 3
23025: PUSH
23026: LD_VAR 0 4
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: ST_TO_ADDR
// break ;
23035: GO 23039
// end ; end ;
23037: GO 22839
23039: POP
23040: POP
// if result then
23041: LD_VAR 0 1
23045: IFFALSE 23105
// begin ToLua ( playSibBomb() ) ;
23047: LD_STRING playSibBomb()
23049: PPUSH
23050: CALL_OW 559
// wait ( 0 0$14 ) ;
23054: LD_INT 490
23056: PPUSH
23057: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23061: LD_VAR 0 1
23065: PUSH
23066: LD_INT 1
23068: ARRAY
23069: PPUSH
23070: LD_VAR 0 1
23074: PUSH
23075: LD_INT 2
23077: ARRAY
23078: PPUSH
23079: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23083: LD_VAR 0 1
23087: PUSH
23088: LD_INT 1
23090: ARRAY
23091: PPUSH
23092: LD_VAR 0 1
23096: PUSH
23097: LD_INT 2
23099: ARRAY
23100: PPUSH
23101: CALL_OW 429
// end ; end ;
23105: LD_VAR 0 1
23109: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23110: LD_EXP 37
23114: PUSH
23115: LD_EXP 59
23119: AND
23120: IFFALSE 23132
23122: GO 23124
23124: DISABLE
// YouLost (  ) ;
23125: LD_STRING 
23127: PPUSH
23128: CALL_OW 104
23132: END
// every 0 0$1 trigger StreamModeActive and sFog do
23133: LD_EXP 37
23137: PUSH
23138: LD_EXP 58
23142: AND
23143: IFFALSE 23157
23145: GO 23147
23147: DISABLE
// FogOff ( your_side ) ;
23148: LD_OWVAR 2
23152: PPUSH
23153: CALL_OW 344
23157: END
// every 0 0$1 trigger StreamModeActive and sSun do
23158: LD_EXP 37
23162: PUSH
23163: LD_EXP 60
23167: AND
23168: IFFALSE 23196
23170: GO 23172
23172: DISABLE
// begin solar_recharge_percent := 0 ;
23173: LD_ADDR_OWVAR 79
23177: PUSH
23178: LD_INT 0
23180: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23181: LD_INT 10500
23183: PPUSH
23184: CALL_OW 67
// solar_recharge_percent := 100 ;
23188: LD_ADDR_OWVAR 79
23192: PUSH
23193: LD_INT 100
23195: ST_TO_ADDR
// end ;
23196: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23197: LD_EXP 37
23201: PUSH
23202: LD_EXP 61
23206: AND
23207: IFFALSE 23446
23209: GO 23211
23211: DISABLE
23212: LD_INT 0
23214: PPUSH
23215: PPUSH
23216: PPUSH
// begin tmp := [ ] ;
23217: LD_ADDR_VAR 0 3
23221: PUSH
23222: EMPTY
23223: ST_TO_ADDR
// for i := 1 to 6 do
23224: LD_ADDR_VAR 0 1
23228: PUSH
23229: DOUBLE
23230: LD_INT 1
23232: DEC
23233: ST_TO_ADDR
23234: LD_INT 6
23236: PUSH
23237: FOR_TO
23238: IFFALSE 23343
// begin uc_nation := nation_nature ;
23240: LD_ADDR_OWVAR 21
23244: PUSH
23245: LD_INT 0
23247: ST_TO_ADDR
// uc_side := 0 ;
23248: LD_ADDR_OWVAR 20
23252: PUSH
23253: LD_INT 0
23255: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23256: LD_ADDR_OWVAR 29
23260: PUSH
23261: LD_INT 12
23263: PUSH
23264: LD_INT 12
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: ST_TO_ADDR
// hc_agressivity := 20 ;
23271: LD_ADDR_OWVAR 35
23275: PUSH
23276: LD_INT 20
23278: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23279: LD_ADDR_OWVAR 28
23283: PUSH
23284: LD_INT 17
23286: ST_TO_ADDR
// hc_gallery :=  ;
23287: LD_ADDR_OWVAR 33
23291: PUSH
23292: LD_STRING 
23294: ST_TO_ADDR
// hc_name :=  ;
23295: LD_ADDR_OWVAR 26
23299: PUSH
23300: LD_STRING 
23302: ST_TO_ADDR
// un := CreateHuman ;
23303: LD_ADDR_VAR 0 2
23307: PUSH
23308: CALL_OW 44
23312: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23313: LD_VAR 0 2
23317: PPUSH
23318: LD_INT 1
23320: PPUSH
23321: CALL_OW 51
// tmp := tmp ^ un ;
23325: LD_ADDR_VAR 0 3
23329: PUSH
23330: LD_VAR 0 3
23334: PUSH
23335: LD_VAR 0 2
23339: ADD
23340: ST_TO_ADDR
// end ;
23341: GO 23237
23343: POP
23344: POP
// repeat wait ( 0 0$1 ) ;
23345: LD_INT 35
23347: PPUSH
23348: CALL_OW 67
// for un in tmp do
23352: LD_ADDR_VAR 0 2
23356: PUSH
23357: LD_VAR 0 3
23361: PUSH
23362: FOR_IN
23363: IFFALSE 23437
// begin if IsDead ( un ) then
23365: LD_VAR 0 2
23369: PPUSH
23370: CALL_OW 301
23374: IFFALSE 23394
// begin tmp := tmp diff un ;
23376: LD_ADDR_VAR 0 3
23380: PUSH
23381: LD_VAR 0 3
23385: PUSH
23386: LD_VAR 0 2
23390: DIFF
23391: ST_TO_ADDR
// continue ;
23392: GO 23362
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23394: LD_VAR 0 2
23398: PPUSH
23399: LD_INT 3
23401: PUSH
23402: LD_INT 22
23404: PUSH
23405: LD_INT 0
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: PUSH
23412: EMPTY
23413: LIST
23414: LIST
23415: PPUSH
23416: CALL_OW 69
23420: PPUSH
23421: LD_VAR 0 2
23425: PPUSH
23426: CALL_OW 74
23430: PPUSH
23431: CALL_OW 115
// end ;
23435: GO 23362
23437: POP
23438: POP
// until not tmp ;
23439: LD_VAR 0 3
23443: NOT
23444: IFFALSE 23345
// end ;
23446: PPOPN 3
23448: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23449: LD_EXP 37
23453: PUSH
23454: LD_EXP 62
23458: AND
23459: IFFALSE 23513
23461: GO 23463
23463: DISABLE
// begin ToLua ( displayTroll(); ) ;
23464: LD_STRING displayTroll();
23466: PPUSH
23467: CALL_OW 559
// wait ( 3 3$00 ) ;
23471: LD_INT 6300
23473: PPUSH
23474: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23478: LD_STRING hideTroll();
23480: PPUSH
23481: CALL_OW 559
// wait ( 1 1$00 ) ;
23485: LD_INT 2100
23487: PPUSH
23488: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23492: LD_STRING displayTroll();
23494: PPUSH
23495: CALL_OW 559
// wait ( 1 1$00 ) ;
23499: LD_INT 2100
23501: PPUSH
23502: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23506: LD_STRING hideTroll();
23508: PPUSH
23509: CALL_OW 559
// end ;
23513: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23514: LD_EXP 37
23518: PUSH
23519: LD_EXP 63
23523: AND
23524: IFFALSE 23587
23526: GO 23528
23528: DISABLE
23529: LD_INT 0
23531: PPUSH
// begin p := 0 ;
23532: LD_ADDR_VAR 0 1
23536: PUSH
23537: LD_INT 0
23539: ST_TO_ADDR
// repeat game_speed := 1 ;
23540: LD_ADDR_OWVAR 65
23544: PUSH
23545: LD_INT 1
23547: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23548: LD_INT 35
23550: PPUSH
23551: CALL_OW 67
// p := p + 1 ;
23555: LD_ADDR_VAR 0 1
23559: PUSH
23560: LD_VAR 0 1
23564: PUSH
23565: LD_INT 1
23567: PLUS
23568: ST_TO_ADDR
// until p >= 60 ;
23569: LD_VAR 0 1
23573: PUSH
23574: LD_INT 60
23576: GREATEREQUAL
23577: IFFALSE 23540
// game_speed := 4 ;
23579: LD_ADDR_OWVAR 65
23583: PUSH
23584: LD_INT 4
23586: ST_TO_ADDR
// end ;
23587: PPOPN 1
23589: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23590: LD_EXP 37
23594: PUSH
23595: LD_EXP 64
23599: AND
23600: IFFALSE 23746
23602: GO 23604
23604: DISABLE
23605: LD_INT 0
23607: PPUSH
23608: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23609: LD_ADDR_VAR 0 1
23613: PUSH
23614: LD_INT 22
23616: PUSH
23617: LD_OWVAR 2
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 2
23628: PUSH
23629: LD_INT 30
23631: PUSH
23632: LD_INT 0
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PUSH
23639: LD_INT 30
23641: PUSH
23642: LD_INT 1
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: LIST
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PPUSH
23658: CALL_OW 69
23662: ST_TO_ADDR
// if not depot then
23663: LD_VAR 0 1
23667: NOT
23668: IFFALSE 23672
// exit ;
23670: GO 23746
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23672: LD_ADDR_VAR 0 2
23676: PUSH
23677: LD_VAR 0 1
23681: PUSH
23682: LD_INT 1
23684: PPUSH
23685: LD_VAR 0 1
23689: PPUSH
23690: CALL_OW 12
23694: ARRAY
23695: PPUSH
23696: CALL_OW 274
23700: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23701: LD_VAR 0 2
23705: PPUSH
23706: LD_INT 1
23708: PPUSH
23709: LD_INT 0
23711: PPUSH
23712: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23716: LD_VAR 0 2
23720: PPUSH
23721: LD_INT 2
23723: PPUSH
23724: LD_INT 0
23726: PPUSH
23727: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23731: LD_VAR 0 2
23735: PPUSH
23736: LD_INT 3
23738: PPUSH
23739: LD_INT 0
23741: PPUSH
23742: CALL_OW 277
// end ;
23746: PPOPN 2
23748: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23749: LD_EXP 37
23753: PUSH
23754: LD_EXP 65
23758: AND
23759: IFFALSE 23856
23761: GO 23763
23763: DISABLE
23764: LD_INT 0
23766: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23767: LD_ADDR_VAR 0 1
23771: PUSH
23772: LD_INT 22
23774: PUSH
23775: LD_OWVAR 2
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: PUSH
23784: LD_INT 21
23786: PUSH
23787: LD_INT 1
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: PUSH
23794: LD_INT 3
23796: PUSH
23797: LD_INT 23
23799: PUSH
23800: LD_INT 0
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: LIST
23815: PPUSH
23816: CALL_OW 69
23820: ST_TO_ADDR
// if not tmp then
23821: LD_VAR 0 1
23825: NOT
23826: IFFALSE 23830
// exit ;
23828: GO 23856
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23830: LD_VAR 0 1
23834: PUSH
23835: LD_INT 1
23837: PPUSH
23838: LD_VAR 0 1
23842: PPUSH
23843: CALL_OW 12
23847: ARRAY
23848: PPUSH
23849: LD_INT 200
23851: PPUSH
23852: CALL_OW 234
// end ;
23856: PPOPN 1
23858: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23859: LD_EXP 37
23863: PUSH
23864: LD_EXP 66
23868: AND
23869: IFFALSE 23948
23871: GO 23873
23873: DISABLE
23874: LD_INT 0
23876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23877: LD_ADDR_VAR 0 1
23881: PUSH
23882: LD_INT 22
23884: PUSH
23885: LD_OWVAR 2
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: LD_INT 21
23896: PUSH
23897: LD_INT 2
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PPUSH
23908: CALL_OW 69
23912: ST_TO_ADDR
// if not tmp then
23913: LD_VAR 0 1
23917: NOT
23918: IFFALSE 23922
// exit ;
23920: GO 23948
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23922: LD_VAR 0 1
23926: PUSH
23927: LD_INT 1
23929: PPUSH
23930: LD_VAR 0 1
23934: PPUSH
23935: CALL_OW 12
23939: ARRAY
23940: PPUSH
23941: LD_INT 60
23943: PPUSH
23944: CALL_OW 234
// end ;
23948: PPOPN 1
23950: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23951: LD_EXP 37
23955: PUSH
23956: LD_EXP 67
23960: AND
23961: IFFALSE 24060
23963: GO 23965
23965: DISABLE
23966: LD_INT 0
23968: PPUSH
23969: PPUSH
// begin enable ;
23970: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23971: LD_ADDR_VAR 0 1
23975: PUSH
23976: LD_INT 22
23978: PUSH
23979: LD_OWVAR 2
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: LD_INT 61
23990: PUSH
23991: EMPTY
23992: LIST
23993: PUSH
23994: LD_INT 33
23996: PUSH
23997: LD_INT 2
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: LIST
24008: PPUSH
24009: CALL_OW 69
24013: ST_TO_ADDR
// if not tmp then
24014: LD_VAR 0 1
24018: NOT
24019: IFFALSE 24023
// exit ;
24021: GO 24060
// for i in tmp do
24023: LD_ADDR_VAR 0 2
24027: PUSH
24028: LD_VAR 0 1
24032: PUSH
24033: FOR_IN
24034: IFFALSE 24058
// if IsControledBy ( i ) then
24036: LD_VAR 0 2
24040: PPUSH
24041: CALL_OW 312
24045: IFFALSE 24056
// ComUnlink ( i ) ;
24047: LD_VAR 0 2
24051: PPUSH
24052: CALL_OW 136
24056: GO 24033
24058: POP
24059: POP
// end ;
24060: PPOPN 2
24062: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24063: LD_EXP 37
24067: PUSH
24068: LD_EXP 68
24072: AND
24073: IFFALSE 24213
24075: GO 24077
24077: DISABLE
24078: LD_INT 0
24080: PPUSH
24081: PPUSH
// begin ToLua ( displayPowell(); ) ;
24082: LD_STRING displayPowell();
24084: PPUSH
24085: CALL_OW 559
// uc_side := 0 ;
24089: LD_ADDR_OWVAR 20
24093: PUSH
24094: LD_INT 0
24096: ST_TO_ADDR
// uc_nation := 2 ;
24097: LD_ADDR_OWVAR 21
24101: PUSH
24102: LD_INT 2
24104: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24105: LD_ADDR_OWVAR 37
24109: PUSH
24110: LD_INT 14
24112: ST_TO_ADDR
// vc_engine := engine_siberite ;
24113: LD_ADDR_OWVAR 39
24117: PUSH
24118: LD_INT 3
24120: ST_TO_ADDR
// vc_control := control_apeman ;
24121: LD_ADDR_OWVAR 38
24125: PUSH
24126: LD_INT 5
24128: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24129: LD_ADDR_OWVAR 40
24133: PUSH
24134: LD_INT 29
24136: ST_TO_ADDR
// un := CreateVehicle ;
24137: LD_ADDR_VAR 0 2
24141: PUSH
24142: CALL_OW 45
24146: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24147: LD_VAR 0 2
24151: PPUSH
24152: LD_INT 1
24154: PPUSH
24155: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24159: LD_INT 35
24161: PPUSH
24162: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24166: LD_VAR 0 2
24170: PPUSH
24171: LD_INT 22
24173: PUSH
24174: LD_OWVAR 2
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: PPUSH
24183: CALL_OW 69
24187: PPUSH
24188: LD_VAR 0 2
24192: PPUSH
24193: CALL_OW 74
24197: PPUSH
24198: CALL_OW 115
// until IsDead ( un ) ;
24202: LD_VAR 0 2
24206: PPUSH
24207: CALL_OW 301
24211: IFFALSE 24159
// end ;
24213: PPOPN 2
24215: END
// every 0 0$1 trigger StreamModeActive and sStu do
24216: LD_EXP 37
24220: PUSH
24221: LD_EXP 76
24225: AND
24226: IFFALSE 24242
24228: GO 24230
24230: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24231: LD_STRING displayStucuk();
24233: PPUSH
24234: CALL_OW 559
// ResetFog ;
24238: CALL_OW 335
// end ;
24242: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24243: LD_EXP 37
24247: PUSH
24248: LD_EXP 69
24252: AND
24253: IFFALSE 24394
24255: GO 24257
24257: DISABLE
24258: LD_INT 0
24260: PPUSH
24261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24262: LD_ADDR_VAR 0 2
24266: PUSH
24267: LD_INT 22
24269: PUSH
24270: LD_OWVAR 2
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 21
24281: PUSH
24282: LD_INT 1
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PPUSH
24293: CALL_OW 69
24297: ST_TO_ADDR
// if not tmp then
24298: LD_VAR 0 2
24302: NOT
24303: IFFALSE 24307
// exit ;
24305: GO 24394
// un := tmp [ rand ( 1 , tmp ) ] ;
24307: LD_ADDR_VAR 0 1
24311: PUSH
24312: LD_VAR 0 2
24316: PUSH
24317: LD_INT 1
24319: PPUSH
24320: LD_VAR 0 2
24324: PPUSH
24325: CALL_OW 12
24329: ARRAY
24330: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24331: LD_VAR 0 1
24335: PPUSH
24336: LD_INT 0
24338: PPUSH
24339: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24343: LD_VAR 0 1
24347: PPUSH
24348: LD_OWVAR 3
24352: PUSH
24353: LD_VAR 0 1
24357: DIFF
24358: PPUSH
24359: LD_VAR 0 1
24363: PPUSH
24364: CALL_OW 74
24368: PPUSH
24369: CALL_OW 115
// wait ( 0 0$20 ) ;
24373: LD_INT 700
24375: PPUSH
24376: CALL_OW 67
// SetSide ( un , your_side ) ;
24380: LD_VAR 0 1
24384: PPUSH
24385: LD_OWVAR 2
24389: PPUSH
24390: CALL_OW 235
// end ;
24394: PPOPN 2
24396: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24397: LD_EXP 37
24401: PUSH
24402: LD_EXP 70
24406: AND
24407: IFFALSE 24513
24409: GO 24411
24411: DISABLE
24412: LD_INT 0
24414: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24415: LD_ADDR_VAR 0 1
24419: PUSH
24420: LD_INT 22
24422: PUSH
24423: LD_OWVAR 2
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: PUSH
24432: LD_INT 2
24434: PUSH
24435: LD_INT 30
24437: PUSH
24438: LD_INT 0
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PUSH
24445: LD_INT 30
24447: PUSH
24448: LD_INT 1
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: LIST
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PPUSH
24464: CALL_OW 69
24468: ST_TO_ADDR
// if not depot then
24469: LD_VAR 0 1
24473: NOT
24474: IFFALSE 24478
// exit ;
24476: GO 24513
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24478: LD_VAR 0 1
24482: PUSH
24483: LD_INT 1
24485: ARRAY
24486: PPUSH
24487: CALL_OW 250
24491: PPUSH
24492: LD_VAR 0 1
24496: PUSH
24497: LD_INT 1
24499: ARRAY
24500: PPUSH
24501: CALL_OW 251
24505: PPUSH
24506: LD_INT 70
24508: PPUSH
24509: CALL_OW 495
// end ;
24513: PPOPN 1
24515: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24516: LD_EXP 37
24520: PUSH
24521: LD_EXP 71
24525: AND
24526: IFFALSE 24737
24528: GO 24530
24530: DISABLE
24531: LD_INT 0
24533: PPUSH
24534: PPUSH
24535: PPUSH
24536: PPUSH
24537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24538: LD_ADDR_VAR 0 5
24542: PUSH
24543: LD_INT 22
24545: PUSH
24546: LD_OWVAR 2
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: PUSH
24555: LD_INT 21
24557: PUSH
24558: LD_INT 1
24560: PUSH
24561: EMPTY
24562: LIST
24563: LIST
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PPUSH
24569: CALL_OW 69
24573: ST_TO_ADDR
// if not tmp then
24574: LD_VAR 0 5
24578: NOT
24579: IFFALSE 24583
// exit ;
24581: GO 24737
// for i in tmp do
24583: LD_ADDR_VAR 0 1
24587: PUSH
24588: LD_VAR 0 5
24592: PUSH
24593: FOR_IN
24594: IFFALSE 24735
// begin d := rand ( 0 , 5 ) ;
24596: LD_ADDR_VAR 0 4
24600: PUSH
24601: LD_INT 0
24603: PPUSH
24604: LD_INT 5
24606: PPUSH
24607: CALL_OW 12
24611: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24612: LD_ADDR_VAR 0 2
24616: PUSH
24617: LD_VAR 0 1
24621: PPUSH
24622: CALL_OW 250
24626: PPUSH
24627: LD_VAR 0 4
24631: PPUSH
24632: LD_INT 3
24634: PPUSH
24635: LD_INT 12
24637: PPUSH
24638: CALL_OW 12
24642: PPUSH
24643: CALL_OW 272
24647: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24648: LD_ADDR_VAR 0 3
24652: PUSH
24653: LD_VAR 0 1
24657: PPUSH
24658: CALL_OW 251
24662: PPUSH
24663: LD_VAR 0 4
24667: PPUSH
24668: LD_INT 3
24670: PPUSH
24671: LD_INT 12
24673: PPUSH
24674: CALL_OW 12
24678: PPUSH
24679: CALL_OW 273
24683: ST_TO_ADDR
// if ValidHex ( x , y ) then
24684: LD_VAR 0 2
24688: PPUSH
24689: LD_VAR 0 3
24693: PPUSH
24694: CALL_OW 488
24698: IFFALSE 24733
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24700: LD_VAR 0 1
24704: PPUSH
24705: LD_VAR 0 2
24709: PPUSH
24710: LD_VAR 0 3
24714: PPUSH
24715: LD_INT 3
24717: PPUSH
24718: LD_INT 6
24720: PPUSH
24721: CALL_OW 12
24725: PPUSH
24726: LD_INT 1
24728: PPUSH
24729: CALL_OW 483
// end ;
24733: GO 24593
24735: POP
24736: POP
// end ;
24737: PPOPN 5
24739: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24740: LD_EXP 37
24744: PUSH
24745: LD_EXP 72
24749: AND
24750: IFFALSE 24844
24752: GO 24754
24754: DISABLE
24755: LD_INT 0
24757: PPUSH
24758: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24759: LD_ADDR_VAR 0 2
24763: PUSH
24764: LD_INT 22
24766: PUSH
24767: LD_OWVAR 2
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: LD_INT 32
24778: PUSH
24779: LD_INT 1
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: PUSH
24786: LD_INT 21
24788: PUSH
24789: LD_INT 2
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: LIST
24800: PPUSH
24801: CALL_OW 69
24805: ST_TO_ADDR
// if not tmp then
24806: LD_VAR 0 2
24810: NOT
24811: IFFALSE 24815
// exit ;
24813: GO 24844
// for i in tmp do
24815: LD_ADDR_VAR 0 1
24819: PUSH
24820: LD_VAR 0 2
24824: PUSH
24825: FOR_IN
24826: IFFALSE 24842
// SetFuel ( i , 0 ) ;
24828: LD_VAR 0 1
24832: PPUSH
24833: LD_INT 0
24835: PPUSH
24836: CALL_OW 240
24840: GO 24825
24842: POP
24843: POP
// end ;
24844: PPOPN 2
24846: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24847: LD_EXP 37
24851: PUSH
24852: LD_EXP 73
24856: AND
24857: IFFALSE 24923
24859: GO 24861
24861: DISABLE
24862: LD_INT 0
24864: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24865: LD_ADDR_VAR 0 1
24869: PUSH
24870: LD_INT 22
24872: PUSH
24873: LD_OWVAR 2
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: PUSH
24882: LD_INT 30
24884: PUSH
24885: LD_INT 29
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PPUSH
24896: CALL_OW 69
24900: ST_TO_ADDR
// if not tmp then
24901: LD_VAR 0 1
24905: NOT
24906: IFFALSE 24910
// exit ;
24908: GO 24923
// DestroyUnit ( tmp [ 1 ] ) ;
24910: LD_VAR 0 1
24914: PUSH
24915: LD_INT 1
24917: ARRAY
24918: PPUSH
24919: CALL_OW 65
// end ;
24923: PPOPN 1
24925: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24926: LD_EXP 37
24930: PUSH
24931: LD_EXP 75
24935: AND
24936: IFFALSE 25065
24938: GO 24940
24940: DISABLE
24941: LD_INT 0
24943: PPUSH
// begin uc_side := 0 ;
24944: LD_ADDR_OWVAR 20
24948: PUSH
24949: LD_INT 0
24951: ST_TO_ADDR
// uc_nation := nation_arabian ;
24952: LD_ADDR_OWVAR 21
24956: PUSH
24957: LD_INT 2
24959: ST_TO_ADDR
// hc_gallery :=  ;
24960: LD_ADDR_OWVAR 33
24964: PUSH
24965: LD_STRING 
24967: ST_TO_ADDR
// hc_name :=  ;
24968: LD_ADDR_OWVAR 26
24972: PUSH
24973: LD_STRING 
24975: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24976: LD_INT 1
24978: PPUSH
24979: LD_INT 11
24981: PPUSH
24982: LD_INT 10
24984: PPUSH
24985: CALL_OW 380
// un := CreateHuman ;
24989: LD_ADDR_VAR 0 1
24993: PUSH
24994: CALL_OW 44
24998: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24999: LD_VAR 0 1
25003: PPUSH
25004: LD_INT 1
25006: PPUSH
25007: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25011: LD_INT 35
25013: PPUSH
25014: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25018: LD_VAR 0 1
25022: PPUSH
25023: LD_INT 22
25025: PUSH
25026: LD_OWVAR 2
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PPUSH
25035: CALL_OW 69
25039: PPUSH
25040: LD_VAR 0 1
25044: PPUSH
25045: CALL_OW 74
25049: PPUSH
25050: CALL_OW 115
// until IsDead ( un ) ;
25054: LD_VAR 0 1
25058: PPUSH
25059: CALL_OW 301
25063: IFFALSE 25011
// end ;
25065: PPOPN 1
25067: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25068: LD_EXP 37
25072: PUSH
25073: LD_EXP 77
25077: AND
25078: IFFALSE 25090
25080: GO 25082
25082: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25083: LD_STRING earthquake(getX(game), 0, 32)
25085: PPUSH
25086: CALL_OW 559
25090: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25091: LD_EXP 37
25095: PUSH
25096: LD_EXP 78
25100: AND
25101: IFFALSE 25192
25103: GO 25105
25105: DISABLE
25106: LD_INT 0
25108: PPUSH
// begin enable ;
25109: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25110: LD_ADDR_VAR 0 1
25114: PUSH
25115: LD_INT 22
25117: PUSH
25118: LD_OWVAR 2
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: LD_INT 21
25129: PUSH
25130: LD_INT 2
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: LD_INT 33
25139: PUSH
25140: LD_INT 3
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: LIST
25151: PPUSH
25152: CALL_OW 69
25156: ST_TO_ADDR
// if not tmp then
25157: LD_VAR 0 1
25161: NOT
25162: IFFALSE 25166
// exit ;
25164: GO 25192
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25166: LD_VAR 0 1
25170: PUSH
25171: LD_INT 1
25173: PPUSH
25174: LD_VAR 0 1
25178: PPUSH
25179: CALL_OW 12
25183: ARRAY
25184: PPUSH
25185: LD_INT 1
25187: PPUSH
25188: CALL_OW 234
// end ;
25192: PPOPN 1
25194: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25195: LD_EXP 37
25199: PUSH
25200: LD_EXP 79
25204: AND
25205: IFFALSE 25346
25207: GO 25209
25209: DISABLE
25210: LD_INT 0
25212: PPUSH
25213: PPUSH
25214: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25215: LD_ADDR_VAR 0 3
25219: PUSH
25220: LD_INT 22
25222: PUSH
25223: LD_OWVAR 2
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: LD_INT 25
25234: PUSH
25235: LD_INT 1
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PPUSH
25246: CALL_OW 69
25250: ST_TO_ADDR
// if not tmp then
25251: LD_VAR 0 3
25255: NOT
25256: IFFALSE 25260
// exit ;
25258: GO 25346
// un := tmp [ rand ( 1 , tmp ) ] ;
25260: LD_ADDR_VAR 0 2
25264: PUSH
25265: LD_VAR 0 3
25269: PUSH
25270: LD_INT 1
25272: PPUSH
25273: LD_VAR 0 3
25277: PPUSH
25278: CALL_OW 12
25282: ARRAY
25283: ST_TO_ADDR
// if Crawls ( un ) then
25284: LD_VAR 0 2
25288: PPUSH
25289: CALL_OW 318
25293: IFFALSE 25304
// ComWalk ( un ) ;
25295: LD_VAR 0 2
25299: PPUSH
25300: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25304: LD_VAR 0 2
25308: PPUSH
25309: LD_INT 9
25311: PPUSH
25312: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25316: LD_INT 28
25318: PPUSH
25319: LD_OWVAR 2
25323: PPUSH
25324: LD_INT 2
25326: PPUSH
25327: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25331: LD_INT 29
25333: PPUSH
25334: LD_OWVAR 2
25338: PPUSH
25339: LD_INT 2
25341: PPUSH
25342: CALL_OW 322
// end ;
25346: PPOPN 3
25348: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25349: LD_EXP 37
25353: PUSH
25354: LD_EXP 80
25358: AND
25359: IFFALSE 25470
25361: GO 25363
25363: DISABLE
25364: LD_INT 0
25366: PPUSH
25367: PPUSH
25368: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25369: LD_ADDR_VAR 0 3
25373: PUSH
25374: LD_INT 22
25376: PUSH
25377: LD_OWVAR 2
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 25
25388: PUSH
25389: LD_INT 1
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: PPUSH
25400: CALL_OW 69
25404: ST_TO_ADDR
// if not tmp then
25405: LD_VAR 0 3
25409: NOT
25410: IFFALSE 25414
// exit ;
25412: GO 25470
// un := tmp [ rand ( 1 , tmp ) ] ;
25414: LD_ADDR_VAR 0 2
25418: PUSH
25419: LD_VAR 0 3
25423: PUSH
25424: LD_INT 1
25426: PPUSH
25427: LD_VAR 0 3
25431: PPUSH
25432: CALL_OW 12
25436: ARRAY
25437: ST_TO_ADDR
// if Crawls ( un ) then
25438: LD_VAR 0 2
25442: PPUSH
25443: CALL_OW 318
25447: IFFALSE 25458
// ComWalk ( un ) ;
25449: LD_VAR 0 2
25453: PPUSH
25454: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25458: LD_VAR 0 2
25462: PPUSH
25463: LD_INT 8
25465: PPUSH
25466: CALL_OW 336
// end ;
25470: PPOPN 3
25472: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25473: LD_EXP 37
25477: PUSH
25478: LD_EXP 81
25482: AND
25483: IFFALSE 25627
25485: GO 25487
25487: DISABLE
25488: LD_INT 0
25490: PPUSH
25491: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25492: LD_ADDR_VAR 0 2
25496: PUSH
25497: LD_INT 22
25499: PUSH
25500: LD_OWVAR 2
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 21
25511: PUSH
25512: LD_INT 2
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 2
25521: PUSH
25522: LD_INT 34
25524: PUSH
25525: LD_INT 12
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: PUSH
25532: LD_INT 34
25534: PUSH
25535: LD_INT 51
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PUSH
25542: LD_INT 34
25544: PUSH
25545: LD_INT 32
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: LIST
25562: PPUSH
25563: CALL_OW 69
25567: ST_TO_ADDR
// if not tmp then
25568: LD_VAR 0 2
25572: NOT
25573: IFFALSE 25577
// exit ;
25575: GO 25627
// for i in tmp do
25577: LD_ADDR_VAR 0 1
25581: PUSH
25582: LD_VAR 0 2
25586: PUSH
25587: FOR_IN
25588: IFFALSE 25625
// if GetCargo ( i , mat_artifact ) = 0 then
25590: LD_VAR 0 1
25594: PPUSH
25595: LD_INT 4
25597: PPUSH
25598: CALL_OW 289
25602: PUSH
25603: LD_INT 0
25605: EQUAL
25606: IFFALSE 25623
// SetCargo ( i , mat_siberit , 100 ) ;
25608: LD_VAR 0 1
25612: PPUSH
25613: LD_INT 3
25615: PPUSH
25616: LD_INT 100
25618: PPUSH
25619: CALL_OW 290
25623: GO 25587
25625: POP
25626: POP
// end ;
25627: PPOPN 2
25629: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25630: LD_EXP 37
25634: PUSH
25635: LD_EXP 82
25639: AND
25640: IFFALSE 25823
25642: GO 25644
25644: DISABLE
25645: LD_INT 0
25647: PPUSH
25648: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25649: LD_ADDR_VAR 0 2
25653: PUSH
25654: LD_INT 22
25656: PUSH
25657: LD_OWVAR 2
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PPUSH
25666: CALL_OW 69
25670: ST_TO_ADDR
// if not tmp then
25671: LD_VAR 0 2
25675: NOT
25676: IFFALSE 25680
// exit ;
25678: GO 25823
// for i := 1 to 2 do
25680: LD_ADDR_VAR 0 1
25684: PUSH
25685: DOUBLE
25686: LD_INT 1
25688: DEC
25689: ST_TO_ADDR
25690: LD_INT 2
25692: PUSH
25693: FOR_TO
25694: IFFALSE 25821
// begin uc_side := your_side ;
25696: LD_ADDR_OWVAR 20
25700: PUSH
25701: LD_OWVAR 2
25705: ST_TO_ADDR
// uc_nation := nation_american ;
25706: LD_ADDR_OWVAR 21
25710: PUSH
25711: LD_INT 1
25713: ST_TO_ADDR
// vc_chassis := us_morphling ;
25714: LD_ADDR_OWVAR 37
25718: PUSH
25719: LD_INT 5
25721: ST_TO_ADDR
// vc_engine := engine_siberite ;
25722: LD_ADDR_OWVAR 39
25726: PUSH
25727: LD_INT 3
25729: ST_TO_ADDR
// vc_control := control_computer ;
25730: LD_ADDR_OWVAR 38
25734: PUSH
25735: LD_INT 3
25737: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25738: LD_ADDR_OWVAR 40
25742: PUSH
25743: LD_INT 10
25745: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25746: LD_VAR 0 2
25750: PUSH
25751: LD_INT 1
25753: ARRAY
25754: PPUSH
25755: CALL_OW 310
25759: NOT
25760: IFFALSE 25807
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25762: CALL_OW 45
25766: PPUSH
25767: LD_VAR 0 2
25771: PUSH
25772: LD_INT 1
25774: ARRAY
25775: PPUSH
25776: CALL_OW 250
25780: PPUSH
25781: LD_VAR 0 2
25785: PUSH
25786: LD_INT 1
25788: ARRAY
25789: PPUSH
25790: CALL_OW 251
25794: PPUSH
25795: LD_INT 12
25797: PPUSH
25798: LD_INT 1
25800: PPUSH
25801: CALL_OW 50
25805: GO 25819
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25807: CALL_OW 45
25811: PPUSH
25812: LD_INT 1
25814: PPUSH
25815: CALL_OW 51
// end ;
25819: GO 25693
25821: POP
25822: POP
// end ;
25823: PPOPN 2
25825: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25826: LD_EXP 37
25830: PUSH
25831: LD_EXP 83
25835: AND
25836: IFFALSE 26058
25838: GO 25840
25840: DISABLE
25841: LD_INT 0
25843: PPUSH
25844: PPUSH
25845: PPUSH
25846: PPUSH
25847: PPUSH
25848: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25849: LD_ADDR_VAR 0 6
25853: PUSH
25854: LD_INT 22
25856: PUSH
25857: LD_OWVAR 2
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: PUSH
25866: LD_INT 21
25868: PUSH
25869: LD_INT 1
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: LD_INT 3
25878: PUSH
25879: LD_INT 23
25881: PUSH
25882: LD_INT 0
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: LIST
25897: PPUSH
25898: CALL_OW 69
25902: ST_TO_ADDR
// if not tmp then
25903: LD_VAR 0 6
25907: NOT
25908: IFFALSE 25912
// exit ;
25910: GO 26058
// s1 := rand ( 1 , 4 ) ;
25912: LD_ADDR_VAR 0 2
25916: PUSH
25917: LD_INT 1
25919: PPUSH
25920: LD_INT 4
25922: PPUSH
25923: CALL_OW 12
25927: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25928: LD_ADDR_VAR 0 4
25932: PUSH
25933: LD_VAR 0 6
25937: PUSH
25938: LD_INT 1
25940: ARRAY
25941: PPUSH
25942: LD_VAR 0 2
25946: PPUSH
25947: CALL_OW 259
25951: ST_TO_ADDR
// if s1 = 1 then
25952: LD_VAR 0 2
25956: PUSH
25957: LD_INT 1
25959: EQUAL
25960: IFFALSE 25980
// s2 := rand ( 2 , 4 ) else
25962: LD_ADDR_VAR 0 3
25966: PUSH
25967: LD_INT 2
25969: PPUSH
25970: LD_INT 4
25972: PPUSH
25973: CALL_OW 12
25977: ST_TO_ADDR
25978: GO 25988
// s2 := 1 ;
25980: LD_ADDR_VAR 0 3
25984: PUSH
25985: LD_INT 1
25987: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25988: LD_ADDR_VAR 0 5
25992: PUSH
25993: LD_VAR 0 6
25997: PUSH
25998: LD_INT 1
26000: ARRAY
26001: PPUSH
26002: LD_VAR 0 3
26006: PPUSH
26007: CALL_OW 259
26011: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26012: LD_VAR 0 6
26016: PUSH
26017: LD_INT 1
26019: ARRAY
26020: PPUSH
26021: LD_VAR 0 2
26025: PPUSH
26026: LD_VAR 0 5
26030: PPUSH
26031: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26035: LD_VAR 0 6
26039: PUSH
26040: LD_INT 1
26042: ARRAY
26043: PPUSH
26044: LD_VAR 0 3
26048: PPUSH
26049: LD_VAR 0 4
26053: PPUSH
26054: CALL_OW 237
// end ;
26058: PPOPN 6
26060: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26061: LD_EXP 37
26065: PUSH
26066: LD_EXP 84
26070: AND
26071: IFFALSE 26150
26073: GO 26075
26075: DISABLE
26076: LD_INT 0
26078: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26079: LD_ADDR_VAR 0 1
26083: PUSH
26084: LD_INT 22
26086: PUSH
26087: LD_OWVAR 2
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: PUSH
26096: LD_INT 30
26098: PUSH
26099: LD_INT 3
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PPUSH
26110: CALL_OW 69
26114: ST_TO_ADDR
// if not tmp then
26115: LD_VAR 0 1
26119: NOT
26120: IFFALSE 26124
// exit ;
26122: GO 26150
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26124: LD_VAR 0 1
26128: PUSH
26129: LD_INT 1
26131: PPUSH
26132: LD_VAR 0 1
26136: PPUSH
26137: CALL_OW 12
26141: ARRAY
26142: PPUSH
26143: LD_INT 1
26145: PPUSH
26146: CALL_OW 234
// end ;
26150: PPOPN 1
26152: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26153: LD_EXP 37
26157: PUSH
26158: LD_EXP 85
26162: AND
26163: IFFALSE 26275
26165: GO 26167
26167: DISABLE
26168: LD_INT 0
26170: PPUSH
26171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26172: LD_ADDR_VAR 0 2
26176: PUSH
26177: LD_INT 22
26179: PUSH
26180: LD_OWVAR 2
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 2
26191: PUSH
26192: LD_INT 30
26194: PUSH
26195: LD_INT 27
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PUSH
26202: LD_INT 30
26204: PUSH
26205: LD_INT 26
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 30
26214: PUSH
26215: LD_INT 28
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PPUSH
26232: CALL_OW 69
26236: ST_TO_ADDR
// if not tmp then
26237: LD_VAR 0 2
26241: NOT
26242: IFFALSE 26246
// exit ;
26244: GO 26275
// for i in tmp do
26246: LD_ADDR_VAR 0 1
26250: PUSH
26251: LD_VAR 0 2
26255: PUSH
26256: FOR_IN
26257: IFFALSE 26273
// SetLives ( i , 1 ) ;
26259: LD_VAR 0 1
26263: PPUSH
26264: LD_INT 1
26266: PPUSH
26267: CALL_OW 234
26271: GO 26256
26273: POP
26274: POP
// end ;
26275: PPOPN 2
26277: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26278: LD_EXP 37
26282: PUSH
26283: LD_EXP 86
26287: AND
26288: IFFALSE 26575
26290: GO 26292
26292: DISABLE
26293: LD_INT 0
26295: PPUSH
26296: PPUSH
26297: PPUSH
// begin i := rand ( 1 , 7 ) ;
26298: LD_ADDR_VAR 0 1
26302: PUSH
26303: LD_INT 1
26305: PPUSH
26306: LD_INT 7
26308: PPUSH
26309: CALL_OW 12
26313: ST_TO_ADDR
// case i of 1 :
26314: LD_VAR 0 1
26318: PUSH
26319: LD_INT 1
26321: DOUBLE
26322: EQUAL
26323: IFTRUE 26327
26325: GO 26337
26327: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26328: LD_STRING earthquake(getX(game), 0, 32)
26330: PPUSH
26331: CALL_OW 559
26335: GO 26575
26337: LD_INT 2
26339: DOUBLE
26340: EQUAL
26341: IFTRUE 26345
26343: GO 26359
26345: POP
// begin ToLua ( displayStucuk(); ) ;
26346: LD_STRING displayStucuk();
26348: PPUSH
26349: CALL_OW 559
// ResetFog ;
26353: CALL_OW 335
// end ; 3 :
26357: GO 26575
26359: LD_INT 3
26361: DOUBLE
26362: EQUAL
26363: IFTRUE 26367
26365: GO 26471
26367: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26368: LD_ADDR_VAR 0 2
26372: PUSH
26373: LD_INT 22
26375: PUSH
26376: LD_OWVAR 2
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: LD_INT 25
26387: PUSH
26388: LD_INT 1
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PPUSH
26399: CALL_OW 69
26403: ST_TO_ADDR
// if not tmp then
26404: LD_VAR 0 2
26408: NOT
26409: IFFALSE 26413
// exit ;
26411: GO 26575
// un := tmp [ rand ( 1 , tmp ) ] ;
26413: LD_ADDR_VAR 0 3
26417: PUSH
26418: LD_VAR 0 2
26422: PUSH
26423: LD_INT 1
26425: PPUSH
26426: LD_VAR 0 2
26430: PPUSH
26431: CALL_OW 12
26435: ARRAY
26436: ST_TO_ADDR
// if Crawls ( un ) then
26437: LD_VAR 0 3
26441: PPUSH
26442: CALL_OW 318
26446: IFFALSE 26457
// ComWalk ( un ) ;
26448: LD_VAR 0 3
26452: PPUSH
26453: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26457: LD_VAR 0 3
26461: PPUSH
26462: LD_INT 8
26464: PPUSH
26465: CALL_OW 336
// end ; 4 :
26469: GO 26575
26471: LD_INT 4
26473: DOUBLE
26474: EQUAL
26475: IFTRUE 26479
26477: GO 26553
26479: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26480: LD_ADDR_VAR 0 2
26484: PUSH
26485: LD_INT 22
26487: PUSH
26488: LD_OWVAR 2
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 30
26499: PUSH
26500: LD_INT 29
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PPUSH
26511: CALL_OW 69
26515: ST_TO_ADDR
// if not tmp then
26516: LD_VAR 0 2
26520: NOT
26521: IFFALSE 26525
// exit ;
26523: GO 26575
// CenterNowOnUnits ( tmp [ 1 ] ) ;
26525: LD_VAR 0 2
26529: PUSH
26530: LD_INT 1
26532: ARRAY
26533: PPUSH
26534: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
26538: LD_VAR 0 2
26542: PUSH
26543: LD_INT 1
26545: ARRAY
26546: PPUSH
26547: CALL_OW 65
// end ; 5 .. 7 :
26551: GO 26575
26553: LD_INT 5
26555: DOUBLE
26556: GREATEREQUAL
26557: IFFALSE 26565
26559: LD_INT 7
26561: DOUBLE
26562: LESSEQUAL
26563: IFTRUE 26567
26565: GO 26574
26567: POP
// StreamSibBomb ; end ;
26568: CALL 22812 0 0
26572: GO 26575
26574: POP
// end ;
26575: PPOPN 3
26577: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26578: LD_EXP 37
26582: PUSH
26583: LD_EXP 87
26587: AND
26588: IFFALSE 26744
26590: GO 26592
26592: DISABLE
26593: LD_INT 0
26595: PPUSH
26596: PPUSH
26597: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26598: LD_ADDR_VAR 0 2
26602: PUSH
26603: LD_INT 81
26605: PUSH
26606: LD_OWVAR 2
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 2
26617: PUSH
26618: LD_INT 21
26620: PUSH
26621: LD_INT 1
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PUSH
26628: LD_INT 21
26630: PUSH
26631: LD_INT 2
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: LIST
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PPUSH
26647: CALL_OW 69
26651: ST_TO_ADDR
// if not tmp then
26652: LD_VAR 0 2
26656: NOT
26657: IFFALSE 26661
// exit ;
26659: GO 26744
// p := 0 ;
26661: LD_ADDR_VAR 0 3
26665: PUSH
26666: LD_INT 0
26668: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26669: LD_INT 35
26671: PPUSH
26672: CALL_OW 67
// p := p + 1 ;
26676: LD_ADDR_VAR 0 3
26680: PUSH
26681: LD_VAR 0 3
26685: PUSH
26686: LD_INT 1
26688: PLUS
26689: ST_TO_ADDR
// for i in tmp do
26690: LD_ADDR_VAR 0 1
26694: PUSH
26695: LD_VAR 0 2
26699: PUSH
26700: FOR_IN
26701: IFFALSE 26732
// if GetLives ( i ) < 1000 then
26703: LD_VAR 0 1
26707: PPUSH
26708: CALL_OW 256
26712: PUSH
26713: LD_INT 1000
26715: LESS
26716: IFFALSE 26730
// SetLives ( i , 1000 ) ;
26718: LD_VAR 0 1
26722: PPUSH
26723: LD_INT 1000
26725: PPUSH
26726: CALL_OW 234
26730: GO 26700
26732: POP
26733: POP
// until p > 20 ;
26734: LD_VAR 0 3
26738: PUSH
26739: LD_INT 20
26741: GREATER
26742: IFFALSE 26669
// end ;
26744: PPOPN 3
26746: END
// every 0 0$1 trigger StreamModeActive and sTime do
26747: LD_EXP 37
26751: PUSH
26752: LD_EXP 88
26756: AND
26757: IFFALSE 26792
26759: GO 26761
26761: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26762: LD_INT 28
26764: PPUSH
26765: LD_OWVAR 2
26769: PPUSH
26770: LD_INT 2
26772: PPUSH
26773: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26777: LD_INT 30
26779: PPUSH
26780: LD_OWVAR 2
26784: PPUSH
26785: LD_INT 2
26787: PPUSH
26788: CALL_OW 322
// end ;
26792: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26793: LD_EXP 37
26797: PUSH
26798: LD_EXP 89
26802: AND
26803: IFFALSE 26924
26805: GO 26807
26807: DISABLE
26808: LD_INT 0
26810: PPUSH
26811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26812: LD_ADDR_VAR 0 2
26816: PUSH
26817: LD_INT 22
26819: PUSH
26820: LD_OWVAR 2
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 21
26831: PUSH
26832: LD_INT 1
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 3
26841: PUSH
26842: LD_INT 23
26844: PUSH
26845: LD_INT 0
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: LIST
26860: PPUSH
26861: CALL_OW 69
26865: ST_TO_ADDR
// if not tmp then
26866: LD_VAR 0 2
26870: NOT
26871: IFFALSE 26875
// exit ;
26873: GO 26924
// for i in tmp do
26875: LD_ADDR_VAR 0 1
26879: PUSH
26880: LD_VAR 0 2
26884: PUSH
26885: FOR_IN
26886: IFFALSE 26922
// begin if Crawls ( i ) then
26888: LD_VAR 0 1
26892: PPUSH
26893: CALL_OW 318
26897: IFFALSE 26908
// ComWalk ( i ) ;
26899: LD_VAR 0 1
26903: PPUSH
26904: CALL_OW 138
// SetClass ( i , 2 ) ;
26908: LD_VAR 0 1
26912: PPUSH
26913: LD_INT 2
26915: PPUSH
26916: CALL_OW 336
// end ;
26920: GO 26885
26922: POP
26923: POP
// end ;
26924: PPOPN 2
26926: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26927: LD_EXP 37
26931: PUSH
26932: LD_EXP 90
26936: AND
26937: IFFALSE 27225
26939: GO 26941
26941: DISABLE
26942: LD_INT 0
26944: PPUSH
26945: PPUSH
26946: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26947: LD_OWVAR 2
26951: PPUSH
26952: LD_INT 9
26954: PPUSH
26955: LD_INT 1
26957: PPUSH
26958: LD_INT 1
26960: PPUSH
26961: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26965: LD_INT 9
26967: PPUSH
26968: LD_OWVAR 2
26972: PPUSH
26973: CALL_OW 343
// uc_side := 9 ;
26977: LD_ADDR_OWVAR 20
26981: PUSH
26982: LD_INT 9
26984: ST_TO_ADDR
// uc_nation := 2 ;
26985: LD_ADDR_OWVAR 21
26989: PUSH
26990: LD_INT 2
26992: ST_TO_ADDR
// hc_name := Dark Warrior ;
26993: LD_ADDR_OWVAR 26
26997: PUSH
26998: LD_STRING Dark Warrior
27000: ST_TO_ADDR
// hc_gallery :=  ;
27001: LD_ADDR_OWVAR 33
27005: PUSH
27006: LD_STRING 
27008: ST_TO_ADDR
// hc_noskilllimit := true ;
27009: LD_ADDR_OWVAR 76
27013: PUSH
27014: LD_INT 1
27016: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27017: LD_ADDR_OWVAR 31
27021: PUSH
27022: LD_INT 30
27024: PUSH
27025: LD_INT 30
27027: PUSH
27028: LD_INT 30
27030: PUSH
27031: LD_INT 30
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: ST_TO_ADDR
// un := CreateHuman ;
27040: LD_ADDR_VAR 0 3
27044: PUSH
27045: CALL_OW 44
27049: ST_TO_ADDR
// hc_noskilllimit := false ;
27050: LD_ADDR_OWVAR 76
27054: PUSH
27055: LD_INT 0
27057: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27058: LD_VAR 0 3
27062: PPUSH
27063: LD_INT 1
27065: PPUSH
27066: CALL_OW 51
// ToLua ( playRanger() ) ;
27070: LD_STRING playRanger()
27072: PPUSH
27073: CALL_OW 559
// p := 0 ;
27077: LD_ADDR_VAR 0 2
27081: PUSH
27082: LD_INT 0
27084: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27085: LD_INT 35
27087: PPUSH
27088: CALL_OW 67
// p := p + 1 ;
27092: LD_ADDR_VAR 0 2
27096: PUSH
27097: LD_VAR 0 2
27101: PUSH
27102: LD_INT 1
27104: PLUS
27105: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27106: LD_VAR 0 3
27110: PPUSH
27111: CALL_OW 256
27115: PUSH
27116: LD_INT 1000
27118: LESS
27119: IFFALSE 27133
// SetLives ( un , 1000 ) ;
27121: LD_VAR 0 3
27125: PPUSH
27126: LD_INT 1000
27128: PPUSH
27129: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27133: LD_VAR 0 3
27137: PPUSH
27138: LD_INT 81
27140: PUSH
27141: LD_OWVAR 2
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: PUSH
27150: LD_INT 91
27152: PUSH
27153: LD_VAR 0 3
27157: PUSH
27158: LD_INT 30
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: LIST
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PPUSH
27170: CALL_OW 69
27174: PPUSH
27175: LD_VAR 0 3
27179: PPUSH
27180: CALL_OW 74
27184: PPUSH
27185: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
27189: LD_VAR 0 2
27193: PUSH
27194: LD_INT 80
27196: GREATER
27197: PUSH
27198: LD_VAR 0 3
27202: PPUSH
27203: CALL_OW 301
27207: OR
27208: IFFALSE 27085
// if un then
27210: LD_VAR 0 3
27214: IFFALSE 27225
// RemoveUnit ( un ) ;
27216: LD_VAR 0 3
27220: PPUSH
27221: CALL_OW 64
// end ;
27225: PPOPN 3
27227: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
27228: LD_EXP 91
27232: IFFALSE 27348
27234: GO 27236
27236: DISABLE
27237: LD_INT 0
27239: PPUSH
27240: PPUSH
27241: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27242: LD_ADDR_VAR 0 2
27246: PUSH
27247: LD_INT 81
27249: PUSH
27250: LD_OWVAR 2
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 21
27261: PUSH
27262: LD_INT 1
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PPUSH
27273: CALL_OW 69
27277: ST_TO_ADDR
// ToLua ( playComputer() ) ;
27278: LD_STRING playComputer()
27280: PPUSH
27281: CALL_OW 559
// if not tmp then
27285: LD_VAR 0 2
27289: NOT
27290: IFFALSE 27294
// exit ;
27292: GO 27348
// for i in tmp do
27294: LD_ADDR_VAR 0 1
27298: PUSH
27299: LD_VAR 0 2
27303: PUSH
27304: FOR_IN
27305: IFFALSE 27346
// for j := 1 to 4 do
27307: LD_ADDR_VAR 0 3
27311: PUSH
27312: DOUBLE
27313: LD_INT 1
27315: DEC
27316: ST_TO_ADDR
27317: LD_INT 4
27319: PUSH
27320: FOR_TO
27321: IFFALSE 27342
// SetSkill ( i , j , 10 ) ;
27323: LD_VAR 0 1
27327: PPUSH
27328: LD_VAR 0 3
27332: PPUSH
27333: LD_INT 10
27335: PPUSH
27336: CALL_OW 237
27340: GO 27320
27342: POP
27343: POP
27344: GO 27304
27346: POP
27347: POP
// end ;
27348: PPOPN 3
27350: END
// every 0 0$1 trigger s30 do var i , tmp ;
27351: LD_EXP 92
27355: IFFALSE 27424
27357: GO 27359
27359: DISABLE
27360: LD_INT 0
27362: PPUSH
27363: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27364: LD_ADDR_VAR 0 2
27368: PUSH
27369: LD_INT 22
27371: PUSH
27372: LD_OWVAR 2
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PPUSH
27381: CALL_OW 69
27385: ST_TO_ADDR
// if not tmp then
27386: LD_VAR 0 2
27390: NOT
27391: IFFALSE 27395
// exit ;
27393: GO 27424
// for i in tmp do
27395: LD_ADDR_VAR 0 1
27399: PUSH
27400: LD_VAR 0 2
27404: PUSH
27405: FOR_IN
27406: IFFALSE 27422
// SetLives ( i , 300 ) ;
27408: LD_VAR 0 1
27412: PPUSH
27413: LD_INT 300
27415: PPUSH
27416: CALL_OW 234
27420: GO 27405
27422: POP
27423: POP
// end ;
27424: PPOPN 2
27426: END
// every 0 0$1 trigger s60 do var i , tmp ;
27427: LD_EXP 93
27431: IFFALSE 27500
27433: GO 27435
27435: DISABLE
27436: LD_INT 0
27438: PPUSH
27439: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27440: LD_ADDR_VAR 0 2
27444: PUSH
27445: LD_INT 22
27447: PUSH
27448: LD_OWVAR 2
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PPUSH
27457: CALL_OW 69
27461: ST_TO_ADDR
// if not tmp then
27462: LD_VAR 0 2
27466: NOT
27467: IFFALSE 27471
// exit ;
27469: GO 27500
// for i in tmp do
27471: LD_ADDR_VAR 0 1
27475: PUSH
27476: LD_VAR 0 2
27480: PUSH
27481: FOR_IN
27482: IFFALSE 27498
// SetLives ( i , 600 ) ;
27484: LD_VAR 0 1
27488: PPUSH
27489: LD_INT 600
27491: PPUSH
27492: CALL_OW 234
27496: GO 27481
27498: POP
27499: POP
// end ;
27500: PPOPN 2
27502: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27503: LD_INT 0
27505: PPUSH
// case cmd of 301 :
27506: LD_VAR 0 1
27510: PUSH
27511: LD_INT 301
27513: DOUBLE
27514: EQUAL
27515: IFTRUE 27519
27517: GO 27551
27519: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
27520: LD_VAR 0 6
27524: PPUSH
27525: LD_VAR 0 7
27529: PPUSH
27530: LD_VAR 0 8
27534: PPUSH
27535: LD_VAR 0 4
27539: PPUSH
27540: LD_VAR 0 5
27544: PPUSH
27545: CALL 28752 0 5
27549: GO 27672
27551: LD_INT 302
27553: DOUBLE
27554: EQUAL
27555: IFTRUE 27559
27557: GO 27596
27559: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
27560: LD_VAR 0 6
27564: PPUSH
27565: LD_VAR 0 7
27569: PPUSH
27570: LD_VAR 0 8
27574: PPUSH
27575: LD_VAR 0 9
27579: PPUSH
27580: LD_VAR 0 4
27584: PPUSH
27585: LD_VAR 0 5
27589: PPUSH
27590: CALL 28843 0 6
27594: GO 27672
27596: LD_INT 303
27598: DOUBLE
27599: EQUAL
27600: IFTRUE 27604
27602: GO 27641
27604: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
27605: LD_VAR 0 6
27609: PPUSH
27610: LD_VAR 0 7
27614: PPUSH
27615: LD_VAR 0 8
27619: PPUSH
27620: LD_VAR 0 9
27624: PPUSH
27625: LD_VAR 0 4
27629: PPUSH
27630: LD_VAR 0 5
27634: PPUSH
27635: CALL 27677 0 6
27639: GO 27672
27641: LD_INT 304
27643: DOUBLE
27644: EQUAL
27645: IFTRUE 27649
27647: GO 27671
27649: POP
// hHackTeleport ( unit , x , y ) ; end ;
27650: LD_VAR 0 2
27654: PPUSH
27655: LD_VAR 0 4
27659: PPUSH
27660: LD_VAR 0 5
27664: PPUSH
27665: CALL 29436 0 3
27669: GO 27672
27671: POP
// end ;
27672: LD_VAR 0 12
27676: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27677: LD_INT 0
27679: PPUSH
27680: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27681: LD_VAR 0 1
27685: PUSH
27686: LD_INT 1
27688: LESS
27689: PUSH
27690: LD_VAR 0 1
27694: PUSH
27695: LD_INT 3
27697: GREATER
27698: OR
27699: PUSH
27700: LD_VAR 0 5
27704: PPUSH
27705: LD_VAR 0 6
27709: PPUSH
27710: CALL_OW 428
27714: OR
27715: IFFALSE 27719
// exit ;
27717: GO 28439
// uc_side := your_side ;
27719: LD_ADDR_OWVAR 20
27723: PUSH
27724: LD_OWVAR 2
27728: ST_TO_ADDR
// uc_nation := nation ;
27729: LD_ADDR_OWVAR 21
27733: PUSH
27734: LD_VAR 0 1
27738: ST_TO_ADDR
// bc_level = 1 ;
27739: LD_ADDR_OWVAR 43
27743: PUSH
27744: LD_INT 1
27746: ST_TO_ADDR
// case btype of 1 :
27747: LD_VAR 0 2
27751: PUSH
27752: LD_INT 1
27754: DOUBLE
27755: EQUAL
27756: IFTRUE 27760
27758: GO 27771
27760: POP
// bc_type := b_depot ; 2 :
27761: LD_ADDR_OWVAR 42
27765: PUSH
27766: LD_INT 0
27768: ST_TO_ADDR
27769: GO 28383
27771: LD_INT 2
27773: DOUBLE
27774: EQUAL
27775: IFTRUE 27779
27777: GO 27790
27779: POP
// bc_type := b_warehouse ; 3 :
27780: LD_ADDR_OWVAR 42
27784: PUSH
27785: LD_INT 1
27787: ST_TO_ADDR
27788: GO 28383
27790: LD_INT 3
27792: DOUBLE
27793: EQUAL
27794: IFTRUE 27798
27796: GO 27809
27798: POP
// bc_type := b_lab ; 4 .. 9 :
27799: LD_ADDR_OWVAR 42
27803: PUSH
27804: LD_INT 6
27806: ST_TO_ADDR
27807: GO 28383
27809: LD_INT 4
27811: DOUBLE
27812: GREATEREQUAL
27813: IFFALSE 27821
27815: LD_INT 9
27817: DOUBLE
27818: LESSEQUAL
27819: IFTRUE 27823
27821: GO 27875
27823: POP
// begin bc_type := b_lab_half ;
27824: LD_ADDR_OWVAR 42
27828: PUSH
27829: LD_INT 7
27831: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
27832: LD_ADDR_OWVAR 44
27836: PUSH
27837: LD_INT 10
27839: PUSH
27840: LD_INT 11
27842: PUSH
27843: LD_INT 12
27845: PUSH
27846: LD_INT 15
27848: PUSH
27849: LD_INT 14
27851: PUSH
27852: LD_INT 13
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: PUSH
27863: LD_VAR 0 2
27867: PUSH
27868: LD_INT 3
27870: MINUS
27871: ARRAY
27872: ST_TO_ADDR
// end ; 10 .. 13 :
27873: GO 28383
27875: LD_INT 10
27877: DOUBLE
27878: GREATEREQUAL
27879: IFFALSE 27887
27881: LD_INT 13
27883: DOUBLE
27884: LESSEQUAL
27885: IFTRUE 27889
27887: GO 27966
27889: POP
// begin bc_type := b_lab_full ;
27890: LD_ADDR_OWVAR 42
27894: PUSH
27895: LD_INT 8
27897: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27898: LD_ADDR_OWVAR 44
27902: PUSH
27903: LD_INT 10
27905: PUSH
27906: LD_INT 12
27908: PUSH
27909: LD_INT 14
27911: PUSH
27912: LD_INT 13
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: PUSH
27921: LD_VAR 0 2
27925: PUSH
27926: LD_INT 9
27928: MINUS
27929: ARRAY
27930: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
27931: LD_ADDR_OWVAR 45
27935: PUSH
27936: LD_INT 11
27938: PUSH
27939: LD_INT 15
27941: PUSH
27942: LD_INT 12
27944: PUSH
27945: LD_INT 15
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: PUSH
27954: LD_VAR 0 2
27958: PUSH
27959: LD_INT 9
27961: MINUS
27962: ARRAY
27963: ST_TO_ADDR
// end ; 14 :
27964: GO 28383
27966: LD_INT 14
27968: DOUBLE
27969: EQUAL
27970: IFTRUE 27974
27972: GO 27985
27974: POP
// bc_type := b_workshop ; 15 :
27975: LD_ADDR_OWVAR 42
27979: PUSH
27980: LD_INT 2
27982: ST_TO_ADDR
27983: GO 28383
27985: LD_INT 15
27987: DOUBLE
27988: EQUAL
27989: IFTRUE 27993
27991: GO 28004
27993: POP
// bc_type := b_factory ; 16 :
27994: LD_ADDR_OWVAR 42
27998: PUSH
27999: LD_INT 3
28001: ST_TO_ADDR
28002: GO 28383
28004: LD_INT 16
28006: DOUBLE
28007: EQUAL
28008: IFTRUE 28012
28010: GO 28023
28012: POP
// bc_type := b_ext_gun ; 17 :
28013: LD_ADDR_OWVAR 42
28017: PUSH
28018: LD_INT 17
28020: ST_TO_ADDR
28021: GO 28383
28023: LD_INT 17
28025: DOUBLE
28026: EQUAL
28027: IFTRUE 28031
28029: GO 28059
28031: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28032: LD_ADDR_OWVAR 42
28036: PUSH
28037: LD_INT 19
28039: PUSH
28040: LD_INT 23
28042: PUSH
28043: LD_INT 19
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: LIST
28050: PUSH
28051: LD_VAR 0 1
28055: ARRAY
28056: ST_TO_ADDR
28057: GO 28383
28059: LD_INT 18
28061: DOUBLE
28062: EQUAL
28063: IFTRUE 28067
28065: GO 28078
28067: POP
// bc_type := b_ext_radar ; 19 :
28068: LD_ADDR_OWVAR 42
28072: PUSH
28073: LD_INT 20
28075: ST_TO_ADDR
28076: GO 28383
28078: LD_INT 19
28080: DOUBLE
28081: EQUAL
28082: IFTRUE 28086
28084: GO 28097
28086: POP
// bc_type := b_ext_radio ; 20 :
28087: LD_ADDR_OWVAR 42
28091: PUSH
28092: LD_INT 22
28094: ST_TO_ADDR
28095: GO 28383
28097: LD_INT 20
28099: DOUBLE
28100: EQUAL
28101: IFTRUE 28105
28103: GO 28116
28105: POP
// bc_type := b_ext_siberium ; 21 :
28106: LD_ADDR_OWVAR 42
28110: PUSH
28111: LD_INT 21
28113: ST_TO_ADDR
28114: GO 28383
28116: LD_INT 21
28118: DOUBLE
28119: EQUAL
28120: IFTRUE 28124
28122: GO 28135
28124: POP
// bc_type := b_ext_computer ; 22 :
28125: LD_ADDR_OWVAR 42
28129: PUSH
28130: LD_INT 24
28132: ST_TO_ADDR
28133: GO 28383
28135: LD_INT 22
28137: DOUBLE
28138: EQUAL
28139: IFTRUE 28143
28141: GO 28154
28143: POP
// bc_type := b_ext_track ; 23 :
28144: LD_ADDR_OWVAR 42
28148: PUSH
28149: LD_INT 16
28151: ST_TO_ADDR
28152: GO 28383
28154: LD_INT 23
28156: DOUBLE
28157: EQUAL
28158: IFTRUE 28162
28160: GO 28173
28162: POP
// bc_type := b_ext_laser ; 24 :
28163: LD_ADDR_OWVAR 42
28167: PUSH
28168: LD_INT 25
28170: ST_TO_ADDR
28171: GO 28383
28173: LD_INT 24
28175: DOUBLE
28176: EQUAL
28177: IFTRUE 28181
28179: GO 28192
28181: POP
// bc_type := b_control_tower ; 25 :
28182: LD_ADDR_OWVAR 42
28186: PUSH
28187: LD_INT 36
28189: ST_TO_ADDR
28190: GO 28383
28192: LD_INT 25
28194: DOUBLE
28195: EQUAL
28196: IFTRUE 28200
28198: GO 28211
28200: POP
// bc_type := b_breastwork ; 26 :
28201: LD_ADDR_OWVAR 42
28205: PUSH
28206: LD_INT 31
28208: ST_TO_ADDR
28209: GO 28383
28211: LD_INT 26
28213: DOUBLE
28214: EQUAL
28215: IFTRUE 28219
28217: GO 28230
28219: POP
// bc_type := b_bunker ; 27 :
28220: LD_ADDR_OWVAR 42
28224: PUSH
28225: LD_INT 32
28227: ST_TO_ADDR
28228: GO 28383
28230: LD_INT 27
28232: DOUBLE
28233: EQUAL
28234: IFTRUE 28238
28236: GO 28249
28238: POP
// bc_type := b_turret ; 28 :
28239: LD_ADDR_OWVAR 42
28243: PUSH
28244: LD_INT 33
28246: ST_TO_ADDR
28247: GO 28383
28249: LD_INT 28
28251: DOUBLE
28252: EQUAL
28253: IFTRUE 28257
28255: GO 28268
28257: POP
// bc_type := b_armoury ; 29 :
28258: LD_ADDR_OWVAR 42
28262: PUSH
28263: LD_INT 4
28265: ST_TO_ADDR
28266: GO 28383
28268: LD_INT 29
28270: DOUBLE
28271: EQUAL
28272: IFTRUE 28276
28274: GO 28287
28276: POP
// bc_type := b_barracks ; 30 :
28277: LD_ADDR_OWVAR 42
28281: PUSH
28282: LD_INT 5
28284: ST_TO_ADDR
28285: GO 28383
28287: LD_INT 30
28289: DOUBLE
28290: EQUAL
28291: IFTRUE 28295
28293: GO 28306
28295: POP
// bc_type := b_solar_power ; 31 :
28296: LD_ADDR_OWVAR 42
28300: PUSH
28301: LD_INT 27
28303: ST_TO_ADDR
28304: GO 28383
28306: LD_INT 31
28308: DOUBLE
28309: EQUAL
28310: IFTRUE 28314
28312: GO 28325
28314: POP
// bc_type := b_oil_power ; 32 :
28315: LD_ADDR_OWVAR 42
28319: PUSH
28320: LD_INT 26
28322: ST_TO_ADDR
28323: GO 28383
28325: LD_INT 32
28327: DOUBLE
28328: EQUAL
28329: IFTRUE 28333
28331: GO 28344
28333: POP
// bc_type := b_siberite_power ; 33 :
28334: LD_ADDR_OWVAR 42
28338: PUSH
28339: LD_INT 28
28341: ST_TO_ADDR
28342: GO 28383
28344: LD_INT 33
28346: DOUBLE
28347: EQUAL
28348: IFTRUE 28352
28350: GO 28363
28352: POP
// bc_type := b_oil_mine ; 34 :
28353: LD_ADDR_OWVAR 42
28357: PUSH
28358: LD_INT 29
28360: ST_TO_ADDR
28361: GO 28383
28363: LD_INT 34
28365: DOUBLE
28366: EQUAL
28367: IFTRUE 28371
28369: GO 28382
28371: POP
// bc_type := b_siberite_mine ; end ;
28372: LD_ADDR_OWVAR 42
28376: PUSH
28377: LD_INT 30
28379: ST_TO_ADDR
28380: GO 28383
28382: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28383: LD_ADDR_VAR 0 8
28387: PUSH
28388: LD_VAR 0 5
28392: PPUSH
28393: LD_VAR 0 6
28397: PPUSH
28398: LD_VAR 0 3
28402: PPUSH
28403: CALL_OW 47
28407: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28408: LD_OWVAR 42
28412: PUSH
28413: LD_INT 32
28415: PUSH
28416: LD_INT 33
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: IN
28423: IFFALSE 28439
// PlaceWeaponTurret ( b , weapon ) ;
28425: LD_VAR 0 8
28429: PPUSH
28430: LD_VAR 0 4
28434: PPUSH
28435: CALL_OW 431
// end ;
28439: LD_VAR 0 7
28443: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
28444: LD_INT 0
28446: PPUSH
28447: PPUSH
28448: PPUSH
28449: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28450: LD_ADDR_VAR 0 4
28454: PUSH
28455: LD_INT 22
28457: PUSH
28458: LD_OWVAR 2
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PUSH
28467: LD_INT 2
28469: PUSH
28470: LD_INT 30
28472: PUSH
28473: LD_INT 0
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: LD_INT 30
28482: PUSH
28483: LD_INT 1
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: LIST
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PPUSH
28499: CALL_OW 69
28503: ST_TO_ADDR
// if not tmp then
28504: LD_VAR 0 4
28508: NOT
28509: IFFALSE 28513
// exit ;
28511: GO 28572
// for i in tmp do
28513: LD_ADDR_VAR 0 2
28517: PUSH
28518: LD_VAR 0 4
28522: PUSH
28523: FOR_IN
28524: IFFALSE 28570
// for j = 1 to 3 do
28526: LD_ADDR_VAR 0 3
28530: PUSH
28531: DOUBLE
28532: LD_INT 1
28534: DEC
28535: ST_TO_ADDR
28536: LD_INT 3
28538: PUSH
28539: FOR_TO
28540: IFFALSE 28566
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
28542: LD_VAR 0 2
28546: PPUSH
28547: CALL_OW 274
28551: PPUSH
28552: LD_VAR 0 3
28556: PPUSH
28557: LD_INT 99999
28559: PPUSH
28560: CALL_OW 277
28564: GO 28539
28566: POP
28567: POP
28568: GO 28523
28570: POP
28571: POP
// end ;
28572: LD_VAR 0 1
28576: RET
// export function hHackSetLevel10 ; var i , j ; begin
28577: LD_INT 0
28579: PPUSH
28580: PPUSH
28581: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28582: LD_ADDR_VAR 0 2
28586: PUSH
28587: LD_INT 21
28589: PUSH
28590: LD_INT 1
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PPUSH
28597: CALL_OW 69
28601: PUSH
28602: FOR_IN
28603: IFFALSE 28655
// if IsSelected ( i ) then
28605: LD_VAR 0 2
28609: PPUSH
28610: CALL_OW 306
28614: IFFALSE 28653
// begin for j := 1 to 4 do
28616: LD_ADDR_VAR 0 3
28620: PUSH
28621: DOUBLE
28622: LD_INT 1
28624: DEC
28625: ST_TO_ADDR
28626: LD_INT 4
28628: PUSH
28629: FOR_TO
28630: IFFALSE 28651
// SetSkill ( i , j , 10 ) ;
28632: LD_VAR 0 2
28636: PPUSH
28637: LD_VAR 0 3
28641: PPUSH
28642: LD_INT 10
28644: PPUSH
28645: CALL_OW 237
28649: GO 28629
28651: POP
28652: POP
// end ;
28653: GO 28602
28655: POP
28656: POP
// end ;
28657: LD_VAR 0 1
28661: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
28662: LD_INT 0
28664: PPUSH
28665: PPUSH
28666: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
28667: LD_ADDR_VAR 0 2
28671: PUSH
28672: LD_INT 22
28674: PUSH
28675: LD_OWVAR 2
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: PUSH
28684: LD_INT 21
28686: PUSH
28687: LD_INT 1
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PPUSH
28698: CALL_OW 69
28702: PUSH
28703: FOR_IN
28704: IFFALSE 28745
// begin for j := 1 to 4 do
28706: LD_ADDR_VAR 0 3
28710: PUSH
28711: DOUBLE
28712: LD_INT 1
28714: DEC
28715: ST_TO_ADDR
28716: LD_INT 4
28718: PUSH
28719: FOR_TO
28720: IFFALSE 28741
// SetSkill ( i , j , 10 ) ;
28722: LD_VAR 0 2
28726: PPUSH
28727: LD_VAR 0 3
28731: PPUSH
28732: LD_INT 10
28734: PPUSH
28735: CALL_OW 237
28739: GO 28719
28741: POP
28742: POP
// end ;
28743: GO 28703
28745: POP
28746: POP
// end ;
28747: LD_VAR 0 1
28751: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
28752: LD_INT 0
28754: PPUSH
// uc_side := your_side ;
28755: LD_ADDR_OWVAR 20
28759: PUSH
28760: LD_OWVAR 2
28764: ST_TO_ADDR
// uc_nation := nation ;
28765: LD_ADDR_OWVAR 21
28769: PUSH
28770: LD_VAR 0 1
28774: ST_TO_ADDR
// InitHc ;
28775: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28779: LD_INT 0
28781: PPUSH
28782: LD_VAR 0 2
28786: PPUSH
28787: LD_VAR 0 3
28791: PPUSH
28792: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28796: LD_VAR 0 4
28800: PPUSH
28801: LD_VAR 0 5
28805: PPUSH
28806: CALL_OW 428
28810: PUSH
28811: LD_INT 0
28813: EQUAL
28814: IFFALSE 28838
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
28816: CALL_OW 44
28820: PPUSH
28821: LD_VAR 0 4
28825: PPUSH
28826: LD_VAR 0 5
28830: PPUSH
28831: LD_INT 1
28833: PPUSH
28834: CALL_OW 48
// end ;
28838: LD_VAR 0 6
28842: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28843: LD_INT 0
28845: PPUSH
28846: PPUSH
// uc_side := your_side ;
28847: LD_ADDR_OWVAR 20
28851: PUSH
28852: LD_OWVAR 2
28856: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28857: LD_VAR 0 1
28861: PUSH
28862: LD_INT 1
28864: PUSH
28865: LD_INT 2
28867: PUSH
28868: LD_INT 3
28870: PUSH
28871: LD_INT 4
28873: PUSH
28874: LD_INT 5
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: IN
28884: IFFALSE 28896
// uc_nation := nation_american else
28886: LD_ADDR_OWVAR 21
28890: PUSH
28891: LD_INT 1
28893: ST_TO_ADDR
28894: GO 28939
// if chassis in [ 11 , 12 , 13 , 14 ] then
28896: LD_VAR 0 1
28900: PUSH
28901: LD_INT 11
28903: PUSH
28904: LD_INT 12
28906: PUSH
28907: LD_INT 13
28909: PUSH
28910: LD_INT 14
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: IN
28919: IFFALSE 28931
// uc_nation := nation_arabian else
28921: LD_ADDR_OWVAR 21
28925: PUSH
28926: LD_INT 2
28928: ST_TO_ADDR
28929: GO 28939
// uc_nation := nation_russian ;
28931: LD_ADDR_OWVAR 21
28935: PUSH
28936: LD_INT 3
28938: ST_TO_ADDR
// vc_chassis := chassis ;
28939: LD_ADDR_OWVAR 37
28943: PUSH
28944: LD_VAR 0 1
28948: ST_TO_ADDR
// vc_engine := engine ;
28949: LD_ADDR_OWVAR 39
28953: PUSH
28954: LD_VAR 0 2
28958: ST_TO_ADDR
// vc_control := control ;
28959: LD_ADDR_OWVAR 38
28963: PUSH
28964: LD_VAR 0 3
28968: ST_TO_ADDR
// vc_weapon := weapon ;
28969: LD_ADDR_OWVAR 40
28973: PUSH
28974: LD_VAR 0 4
28978: ST_TO_ADDR
// un := CreateVehicle ;
28979: LD_ADDR_VAR 0 8
28983: PUSH
28984: CALL_OW 45
28988: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
28989: LD_VAR 0 8
28993: PPUSH
28994: LD_INT 0
28996: PPUSH
28997: LD_INT 5
28999: PPUSH
29000: CALL_OW 12
29004: PPUSH
29005: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29009: LD_VAR 0 8
29013: PPUSH
29014: LD_VAR 0 5
29018: PPUSH
29019: LD_VAR 0 6
29023: PPUSH
29024: LD_INT 1
29026: PPUSH
29027: CALL_OW 48
// end ;
29031: LD_VAR 0 7
29035: RET
// export hInvincible ; every 1 do
29036: GO 29038
29038: DISABLE
// hInvincible := [ ] ;
29039: LD_ADDR_EXP 94
29043: PUSH
29044: EMPTY
29045: ST_TO_ADDR
29046: END
// every 10 do var i ;
29047: GO 29049
29049: DISABLE
29050: LD_INT 0
29052: PPUSH
// begin enable ;
29053: ENABLE
// if not hInvincible then
29054: LD_EXP 94
29058: NOT
29059: IFFALSE 29063
// exit ;
29061: GO 29107
// for i in hInvincible do
29063: LD_ADDR_VAR 0 1
29067: PUSH
29068: LD_EXP 94
29072: PUSH
29073: FOR_IN
29074: IFFALSE 29105
// if GetLives ( i ) < 1000 then
29076: LD_VAR 0 1
29080: PPUSH
29081: CALL_OW 256
29085: PUSH
29086: LD_INT 1000
29088: LESS
29089: IFFALSE 29103
// SetLives ( i , 1000 ) ;
29091: LD_VAR 0 1
29095: PPUSH
29096: LD_INT 1000
29098: PPUSH
29099: CALL_OW 234
29103: GO 29073
29105: POP
29106: POP
// end ;
29107: PPOPN 1
29109: END
// export function hHackInvincible ; var i ; begin
29110: LD_INT 0
29112: PPUSH
29113: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29114: LD_ADDR_VAR 0 2
29118: PUSH
29119: LD_INT 2
29121: PUSH
29122: LD_INT 21
29124: PUSH
29125: LD_INT 1
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: LD_INT 21
29134: PUSH
29135: LD_INT 2
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: LIST
29146: PPUSH
29147: CALL_OW 69
29151: PUSH
29152: FOR_IN
29153: IFFALSE 29214
// if IsSelected ( i ) then
29155: LD_VAR 0 2
29159: PPUSH
29160: CALL_OW 306
29164: IFFALSE 29212
// begin if i in hInvincible then
29166: LD_VAR 0 2
29170: PUSH
29171: LD_EXP 94
29175: IN
29176: IFFALSE 29196
// hInvincible := hInvincible diff i else
29178: LD_ADDR_EXP 94
29182: PUSH
29183: LD_EXP 94
29187: PUSH
29188: LD_VAR 0 2
29192: DIFF
29193: ST_TO_ADDR
29194: GO 29212
// hInvincible := hInvincible union i ;
29196: LD_ADDR_EXP 94
29200: PUSH
29201: LD_EXP 94
29205: PUSH
29206: LD_VAR 0 2
29210: UNION
29211: ST_TO_ADDR
// end ;
29212: GO 29152
29214: POP
29215: POP
// end ;
29216: LD_VAR 0 1
29220: RET
// export function hHackInvisible ; var i , j ; begin
29221: LD_INT 0
29223: PPUSH
29224: PPUSH
29225: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29226: LD_ADDR_VAR 0 2
29230: PUSH
29231: LD_INT 21
29233: PUSH
29234: LD_INT 1
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: PPUSH
29241: CALL_OW 69
29245: PUSH
29246: FOR_IN
29247: IFFALSE 29271
// if IsSelected ( i ) then
29249: LD_VAR 0 2
29253: PPUSH
29254: CALL_OW 306
29258: IFFALSE 29269
// ComForceInvisible ( i ) ;
29260: LD_VAR 0 2
29264: PPUSH
29265: CALL_OW 496
29269: GO 29246
29271: POP
29272: POP
// end ;
29273: LD_VAR 0 1
29277: RET
// export function hHackChangeYourSide ; begin
29278: LD_INT 0
29280: PPUSH
// if your_side = 8 then
29281: LD_OWVAR 2
29285: PUSH
29286: LD_INT 8
29288: EQUAL
29289: IFFALSE 29301
// your_side := 0 else
29291: LD_ADDR_OWVAR 2
29295: PUSH
29296: LD_INT 0
29298: ST_TO_ADDR
29299: GO 29315
// your_side := your_side + 1 ;
29301: LD_ADDR_OWVAR 2
29305: PUSH
29306: LD_OWVAR 2
29310: PUSH
29311: LD_INT 1
29313: PLUS
29314: ST_TO_ADDR
// end ;
29315: LD_VAR 0 1
29319: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29320: LD_INT 0
29322: PPUSH
29323: PPUSH
29324: PPUSH
// for i in all_units do
29325: LD_ADDR_VAR 0 2
29329: PUSH
29330: LD_OWVAR 3
29334: PUSH
29335: FOR_IN
29336: IFFALSE 29414
// if IsSelected ( i ) then
29338: LD_VAR 0 2
29342: PPUSH
29343: CALL_OW 306
29347: IFFALSE 29412
// begin j := GetSide ( i ) ;
29349: LD_ADDR_VAR 0 3
29353: PUSH
29354: LD_VAR 0 2
29358: PPUSH
29359: CALL_OW 255
29363: ST_TO_ADDR
// if j = 8 then
29364: LD_VAR 0 3
29368: PUSH
29369: LD_INT 8
29371: EQUAL
29372: IFFALSE 29384
// j := 0 else
29374: LD_ADDR_VAR 0 3
29378: PUSH
29379: LD_INT 0
29381: ST_TO_ADDR
29382: GO 29398
// j := j + 1 ;
29384: LD_ADDR_VAR 0 3
29388: PUSH
29389: LD_VAR 0 3
29393: PUSH
29394: LD_INT 1
29396: PLUS
29397: ST_TO_ADDR
// SetSide ( i , j ) ;
29398: LD_VAR 0 2
29402: PPUSH
29403: LD_VAR 0 3
29407: PPUSH
29408: CALL_OW 235
// end ;
29412: GO 29335
29414: POP
29415: POP
// end ;
29416: LD_VAR 0 1
29420: RET
// export function hHackFog ; begin
29421: LD_INT 0
29423: PPUSH
// FogOff ( true ) ;
29424: LD_INT 1
29426: PPUSH
29427: CALL_OW 344
// end ;
29431: LD_VAR 0 1
29435: RET
// export function hHackTeleport ( unit , x , y ) ; begin
29436: LD_INT 0
29438: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
29439: LD_VAR 0 1
29443: PPUSH
29444: LD_VAR 0 2
29448: PPUSH
29449: LD_VAR 0 3
29453: PPUSH
29454: LD_INT 1
29456: PPUSH
29457: LD_INT 1
29459: PPUSH
29460: CALL_OW 483
// CenterOnXY ( x , y ) ;
29464: LD_VAR 0 2
29468: PPUSH
29469: LD_VAR 0 3
29473: PPUSH
29474: CALL_OW 84
// end ;
29478: LD_VAR 0 4
29482: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
29483: LD_INT 0
29485: PPUSH
29486: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
29487: LD_VAR 0 1
29491: NOT
29492: PUSH
29493: LD_VAR 0 2
29497: PPUSH
29498: LD_VAR 0 3
29502: PPUSH
29503: CALL_OW 488
29507: NOT
29508: OR
29509: PUSH
29510: LD_VAR 0 1
29514: PPUSH
29515: CALL_OW 266
29519: PUSH
29520: LD_INT 3
29522: NONEQUAL
29523: PUSH
29524: LD_VAR 0 1
29528: PPUSH
29529: CALL_OW 247
29533: PUSH
29534: LD_INT 1
29536: EQUAL
29537: NOT
29538: AND
29539: OR
29540: IFFALSE 29544
// exit ;
29542: GO 29693
// if GetType ( factory ) = unit_human then
29544: LD_VAR 0 1
29548: PPUSH
29549: CALL_OW 247
29553: PUSH
29554: LD_INT 1
29556: EQUAL
29557: IFFALSE 29574
// factory := IsInUnit ( factory ) ;
29559: LD_ADDR_VAR 0 1
29563: PUSH
29564: LD_VAR 0 1
29568: PPUSH
29569: CALL_OW 310
29573: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
29574: LD_VAR 0 1
29578: PPUSH
29579: CALL_OW 266
29583: PUSH
29584: LD_INT 3
29586: NONEQUAL
29587: IFFALSE 29591
// exit ;
29589: GO 29693
// if HexInfo ( x , y ) = factory then
29591: LD_VAR 0 2
29595: PPUSH
29596: LD_VAR 0 3
29600: PPUSH
29601: CALL_OW 428
29605: PUSH
29606: LD_VAR 0 1
29610: EQUAL
29611: IFFALSE 29638
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
29613: LD_ADDR_EXP 95
29617: PUSH
29618: LD_EXP 95
29622: PPUSH
29623: LD_VAR 0 1
29627: PPUSH
29628: LD_INT 0
29630: PPUSH
29631: CALL_OW 1
29635: ST_TO_ADDR
29636: GO 29689
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
29638: LD_ADDR_EXP 95
29642: PUSH
29643: LD_EXP 95
29647: PPUSH
29648: LD_VAR 0 1
29652: PPUSH
29653: LD_VAR 0 1
29657: PPUSH
29658: CALL_OW 255
29662: PUSH
29663: LD_VAR 0 1
29667: PUSH
29668: LD_VAR 0 2
29672: PUSH
29673: LD_VAR 0 3
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: PPUSH
29684: CALL_OW 1
29688: ST_TO_ADDR
// UpdateFactoryWaypoints ;
29689: CALL 29698 0 0
// end ;
29693: LD_VAR 0 4
29697: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
29698: LD_INT 0
29700: PPUSH
29701: PPUSH
29702: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
29703: LD_STRING resetFactoryWaypoint();
29705: PPUSH
29706: CALL_OW 559
// if factoryWaypoints then
29710: LD_EXP 95
29714: IFFALSE 29840
// begin list := PrepareArray ( factoryWaypoints ) ;
29716: LD_ADDR_VAR 0 3
29720: PUSH
29721: LD_EXP 95
29725: PPUSH
29726: CALL 72020 0 1
29730: ST_TO_ADDR
// for i := 1 to list do
29731: LD_ADDR_VAR 0 2
29735: PUSH
29736: DOUBLE
29737: LD_INT 1
29739: DEC
29740: ST_TO_ADDR
29741: LD_VAR 0 3
29745: PUSH
29746: FOR_TO
29747: IFFALSE 29838
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
29749: LD_STRING setFactoryWaypointXY(
29751: PUSH
29752: LD_VAR 0 3
29756: PUSH
29757: LD_VAR 0 2
29761: ARRAY
29762: PUSH
29763: LD_INT 1
29765: ARRAY
29766: STR
29767: PUSH
29768: LD_STRING ,
29770: STR
29771: PUSH
29772: LD_VAR 0 3
29776: PUSH
29777: LD_VAR 0 2
29781: ARRAY
29782: PUSH
29783: LD_INT 2
29785: ARRAY
29786: STR
29787: PUSH
29788: LD_STRING ,
29790: STR
29791: PUSH
29792: LD_VAR 0 3
29796: PUSH
29797: LD_VAR 0 2
29801: ARRAY
29802: PUSH
29803: LD_INT 3
29805: ARRAY
29806: STR
29807: PUSH
29808: LD_STRING ,
29810: STR
29811: PUSH
29812: LD_VAR 0 3
29816: PUSH
29817: LD_VAR 0 2
29821: ARRAY
29822: PUSH
29823: LD_INT 4
29825: ARRAY
29826: STR
29827: PUSH
29828: LD_STRING )
29830: STR
29831: PPUSH
29832: CALL_OW 559
29836: GO 29746
29838: POP
29839: POP
// end ; end ;
29840: LD_VAR 0 1
29844: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
29845: LD_INT 0
29847: PPUSH
// if HexInfo ( x , y ) = warehouse then
29848: LD_VAR 0 2
29852: PPUSH
29853: LD_VAR 0 3
29857: PPUSH
29858: CALL_OW 428
29862: PUSH
29863: LD_VAR 0 1
29867: EQUAL
29868: IFFALSE 29895
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
29870: LD_ADDR_EXP 96
29874: PUSH
29875: LD_EXP 96
29879: PPUSH
29880: LD_VAR 0 1
29884: PPUSH
29885: LD_INT 0
29887: PPUSH
29888: CALL_OW 1
29892: ST_TO_ADDR
29893: GO 29946
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
29895: LD_ADDR_EXP 96
29899: PUSH
29900: LD_EXP 96
29904: PPUSH
29905: LD_VAR 0 1
29909: PPUSH
29910: LD_VAR 0 1
29914: PPUSH
29915: CALL_OW 255
29919: PUSH
29920: LD_VAR 0 1
29924: PUSH
29925: LD_VAR 0 2
29929: PUSH
29930: LD_VAR 0 3
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: PPUSH
29941: CALL_OW 1
29945: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
29946: CALL 29955 0 0
// end ;
29950: LD_VAR 0 4
29954: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
29955: LD_INT 0
29957: PPUSH
29958: PPUSH
29959: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
29960: LD_STRING resetWarehouseGatheringPoints();
29962: PPUSH
29963: CALL_OW 559
// if warehouseGatheringPoints then
29967: LD_EXP 96
29971: IFFALSE 30097
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
29973: LD_ADDR_VAR 0 3
29977: PUSH
29978: LD_EXP 96
29982: PPUSH
29983: CALL 72020 0 1
29987: ST_TO_ADDR
// for i := 1 to list do
29988: LD_ADDR_VAR 0 2
29992: PUSH
29993: DOUBLE
29994: LD_INT 1
29996: DEC
29997: ST_TO_ADDR
29998: LD_VAR 0 3
30002: PUSH
30003: FOR_TO
30004: IFFALSE 30095
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30006: LD_STRING setWarehouseGatheringPointXY(
30008: PUSH
30009: LD_VAR 0 3
30013: PUSH
30014: LD_VAR 0 2
30018: ARRAY
30019: PUSH
30020: LD_INT 1
30022: ARRAY
30023: STR
30024: PUSH
30025: LD_STRING ,
30027: STR
30028: PUSH
30029: LD_VAR 0 3
30033: PUSH
30034: LD_VAR 0 2
30038: ARRAY
30039: PUSH
30040: LD_INT 2
30042: ARRAY
30043: STR
30044: PUSH
30045: LD_STRING ,
30047: STR
30048: PUSH
30049: LD_VAR 0 3
30053: PUSH
30054: LD_VAR 0 2
30058: ARRAY
30059: PUSH
30060: LD_INT 3
30062: ARRAY
30063: STR
30064: PUSH
30065: LD_STRING ,
30067: STR
30068: PUSH
30069: LD_VAR 0 3
30073: PUSH
30074: LD_VAR 0 2
30078: ARRAY
30079: PUSH
30080: LD_INT 4
30082: ARRAY
30083: STR
30084: PUSH
30085: LD_STRING )
30087: STR
30088: PPUSH
30089: CALL_OW 559
30093: GO 30003
30095: POP
30096: POP
// end ; end ;
30097: LD_VAR 0 1
30101: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
30102: LD_EXP 96
30106: IFFALSE 30791
30108: GO 30110
30110: DISABLE
30111: LD_INT 0
30113: PPUSH
30114: PPUSH
30115: PPUSH
30116: PPUSH
30117: PPUSH
30118: PPUSH
30119: PPUSH
30120: PPUSH
30121: PPUSH
// begin enable ;
30122: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
30123: LD_ADDR_VAR 0 3
30127: PUSH
30128: LD_EXP 96
30132: PPUSH
30133: CALL 72020 0 1
30137: ST_TO_ADDR
// if not list then
30138: LD_VAR 0 3
30142: NOT
30143: IFFALSE 30147
// exit ;
30145: GO 30791
// for i := 1 to list do
30147: LD_ADDR_VAR 0 1
30151: PUSH
30152: DOUBLE
30153: LD_INT 1
30155: DEC
30156: ST_TO_ADDR
30157: LD_VAR 0 3
30161: PUSH
30162: FOR_TO
30163: IFFALSE 30789
// begin depot := list [ i ] [ 2 ] ;
30165: LD_ADDR_VAR 0 8
30169: PUSH
30170: LD_VAR 0 3
30174: PUSH
30175: LD_VAR 0 1
30179: ARRAY
30180: PUSH
30181: LD_INT 2
30183: ARRAY
30184: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
30185: LD_ADDR_VAR 0 5
30189: PUSH
30190: LD_VAR 0 3
30194: PUSH
30195: LD_VAR 0 1
30199: ARRAY
30200: PUSH
30201: LD_INT 1
30203: ARRAY
30204: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
30205: LD_VAR 0 8
30209: PPUSH
30210: CALL_OW 301
30214: PUSH
30215: LD_VAR 0 5
30219: PUSH
30220: LD_VAR 0 8
30224: PPUSH
30225: CALL_OW 255
30229: NONEQUAL
30230: OR
30231: IFFALSE 30260
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
30233: LD_ADDR_EXP 96
30237: PUSH
30238: LD_EXP 96
30242: PPUSH
30243: LD_VAR 0 8
30247: PPUSH
30248: LD_INT 0
30250: PPUSH
30251: CALL_OW 1
30255: ST_TO_ADDR
// exit ;
30256: POP
30257: POP
30258: GO 30791
// end ; x := list [ i ] [ 3 ] ;
30260: LD_ADDR_VAR 0 6
30264: PUSH
30265: LD_VAR 0 3
30269: PUSH
30270: LD_VAR 0 1
30274: ARRAY
30275: PUSH
30276: LD_INT 3
30278: ARRAY
30279: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
30280: LD_ADDR_VAR 0 7
30284: PUSH
30285: LD_VAR 0 3
30289: PUSH
30290: LD_VAR 0 1
30294: ARRAY
30295: PUSH
30296: LD_INT 4
30298: ARRAY
30299: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
30300: LD_ADDR_VAR 0 9
30304: PUSH
30305: LD_VAR 0 6
30309: PPUSH
30310: LD_VAR 0 7
30314: PPUSH
30315: LD_INT 16
30317: PPUSH
30318: CALL 70608 0 3
30322: ST_TO_ADDR
// if not cratesNearbyPoint then
30323: LD_VAR 0 9
30327: NOT
30328: IFFALSE 30334
// exit ;
30330: POP
30331: POP
30332: GO 30791
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
30334: LD_ADDR_VAR 0 4
30338: PUSH
30339: LD_INT 22
30341: PUSH
30342: LD_VAR 0 5
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: LD_INT 3
30353: PUSH
30354: LD_INT 60
30356: PUSH
30357: EMPTY
30358: LIST
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 91
30366: PUSH
30367: LD_VAR 0 8
30371: PUSH
30372: LD_INT 6
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 2
30382: PUSH
30383: LD_INT 25
30385: PUSH
30386: LD_INT 2
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 25
30395: PUSH
30396: LD_INT 16
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: LIST
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: PPUSH
30414: CALL_OW 69
30418: PUSH
30419: LD_VAR 0 8
30423: PPUSH
30424: CALL_OW 313
30428: PPUSH
30429: LD_INT 3
30431: PUSH
30432: LD_INT 60
30434: PUSH
30435: EMPTY
30436: LIST
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 2
30444: PUSH
30445: LD_INT 25
30447: PUSH
30448: LD_INT 2
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PUSH
30455: LD_INT 25
30457: PUSH
30458: LD_INT 16
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: LIST
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PPUSH
30474: CALL_OW 72
30478: UNION
30479: ST_TO_ADDR
// if tmp then
30480: LD_VAR 0 4
30484: IFFALSE 30564
// begin tmp := ShrinkArray ( tmp , 3 ) ;
30486: LD_ADDR_VAR 0 4
30490: PUSH
30491: LD_VAR 0 4
30495: PPUSH
30496: LD_INT 3
30498: PPUSH
30499: CALL 68577 0 2
30503: ST_TO_ADDR
// for j in tmp do
30504: LD_ADDR_VAR 0 2
30508: PUSH
30509: LD_VAR 0 4
30513: PUSH
30514: FOR_IN
30515: IFFALSE 30558
// begin if IsInUnit ( j ) then
30517: LD_VAR 0 2
30521: PPUSH
30522: CALL_OW 310
30526: IFFALSE 30537
// ComExit ( j ) ;
30528: LD_VAR 0 2
30532: PPUSH
30533: CALL 68660 0 1
// AddComCollect ( j , x , y ) ;
30537: LD_VAR 0 2
30541: PPUSH
30542: LD_VAR 0 6
30546: PPUSH
30547: LD_VAR 0 7
30551: PPUSH
30552: CALL_OW 177
// end ;
30556: GO 30514
30558: POP
30559: POP
// exit ;
30560: POP
30561: POP
30562: GO 30791
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
30564: LD_ADDR_VAR 0 4
30568: PUSH
30569: LD_INT 22
30571: PUSH
30572: LD_VAR 0 5
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 91
30583: PUSH
30584: LD_VAR 0 8
30588: PUSH
30589: LD_INT 8
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 2
30599: PUSH
30600: LD_INT 34
30602: PUSH
30603: LD_INT 12
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 34
30612: PUSH
30613: LD_INT 51
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 34
30622: PUSH
30623: LD_INT 32
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 34
30632: PUSH
30633: LD_INT 89
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: LIST
30651: PPUSH
30652: CALL_OW 69
30656: ST_TO_ADDR
// if tmp then
30657: LD_VAR 0 4
30661: IFFALSE 30787
// begin for j in tmp do
30663: LD_ADDR_VAR 0 2
30667: PUSH
30668: LD_VAR 0 4
30672: PUSH
30673: FOR_IN
30674: IFFALSE 30785
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
30676: LD_VAR 0 2
30680: PPUSH
30681: CALL_OW 262
30685: PUSH
30686: LD_INT 3
30688: EQUAL
30689: PUSH
30690: LD_VAR 0 2
30694: PPUSH
30695: CALL_OW 261
30699: PUSH
30700: LD_INT 20
30702: GREATER
30703: OR
30704: PUSH
30705: LD_VAR 0 2
30709: PPUSH
30710: CALL_OW 314
30714: NOT
30715: AND
30716: PUSH
30717: LD_VAR 0 2
30721: PPUSH
30722: CALL_OW 263
30726: PUSH
30727: LD_INT 1
30729: NONEQUAL
30730: PUSH
30731: LD_VAR 0 2
30735: PPUSH
30736: CALL_OW 311
30740: OR
30741: AND
30742: IFFALSE 30783
// begin ComCollect ( j , x , y ) ;
30744: LD_VAR 0 2
30748: PPUSH
30749: LD_VAR 0 6
30753: PPUSH
30754: LD_VAR 0 7
30758: PPUSH
30759: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
30763: LD_VAR 0 2
30767: PPUSH
30768: LD_VAR 0 8
30772: PPUSH
30773: CALL_OW 172
// exit ;
30777: POP
30778: POP
30779: POP
30780: POP
30781: GO 30791
// end ;
30783: GO 30673
30785: POP
30786: POP
// end ; end ;
30787: GO 30162
30789: POP
30790: POP
// end ; end_of_file end_of_file
30791: PPOPN 9
30793: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30794: LD_INT 0
30796: PPUSH
30797: PPUSH
// if exist_mode then
30798: LD_VAR 0 2
30802: IFFALSE 30827
// unit := CreateCharacter ( prefix & ident ) else
30804: LD_ADDR_VAR 0 5
30808: PUSH
30809: LD_VAR 0 3
30813: PUSH
30814: LD_VAR 0 1
30818: STR
30819: PPUSH
30820: CALL_OW 34
30824: ST_TO_ADDR
30825: GO 30842
// unit := NewCharacter ( ident ) ;
30827: LD_ADDR_VAR 0 5
30831: PUSH
30832: LD_VAR 0 1
30836: PPUSH
30837: CALL_OW 25
30841: ST_TO_ADDR
// result := unit ;
30842: LD_ADDR_VAR 0 4
30846: PUSH
30847: LD_VAR 0 5
30851: ST_TO_ADDR
// end ;
30852: LD_VAR 0 4
30856: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30857: LD_INT 0
30859: PPUSH
30860: PPUSH
// if not side or not nation then
30861: LD_VAR 0 1
30865: NOT
30866: PUSH
30867: LD_VAR 0 2
30871: NOT
30872: OR
30873: IFFALSE 30877
// exit ;
30875: GO 31645
// case nation of nation_american :
30877: LD_VAR 0 2
30881: PUSH
30882: LD_INT 1
30884: DOUBLE
30885: EQUAL
30886: IFTRUE 30890
30888: GO 31104
30890: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30891: LD_ADDR_VAR 0 4
30895: PUSH
30896: LD_INT 35
30898: PUSH
30899: LD_INT 45
30901: PUSH
30902: LD_INT 46
30904: PUSH
30905: LD_INT 47
30907: PUSH
30908: LD_INT 82
30910: PUSH
30911: LD_INT 83
30913: PUSH
30914: LD_INT 84
30916: PUSH
30917: LD_INT 85
30919: PUSH
30920: LD_INT 86
30922: PUSH
30923: LD_INT 1
30925: PUSH
30926: LD_INT 2
30928: PUSH
30929: LD_INT 6
30931: PUSH
30932: LD_INT 15
30934: PUSH
30935: LD_INT 16
30937: PUSH
30938: LD_INT 7
30940: PUSH
30941: LD_INT 12
30943: PUSH
30944: LD_INT 13
30946: PUSH
30947: LD_INT 10
30949: PUSH
30950: LD_INT 14
30952: PUSH
30953: LD_INT 20
30955: PUSH
30956: LD_INT 21
30958: PUSH
30959: LD_INT 22
30961: PUSH
30962: LD_INT 25
30964: PUSH
30965: LD_INT 32
30967: PUSH
30968: LD_INT 27
30970: PUSH
30971: LD_INT 36
30973: PUSH
30974: LD_INT 69
30976: PUSH
30977: LD_INT 39
30979: PUSH
30980: LD_INT 34
30982: PUSH
30983: LD_INT 40
30985: PUSH
30986: LD_INT 48
30988: PUSH
30989: LD_INT 49
30991: PUSH
30992: LD_INT 50
30994: PUSH
30995: LD_INT 51
30997: PUSH
30998: LD_INT 52
31000: PUSH
31001: LD_INT 53
31003: PUSH
31004: LD_INT 54
31006: PUSH
31007: LD_INT 55
31009: PUSH
31010: LD_INT 56
31012: PUSH
31013: LD_INT 57
31015: PUSH
31016: LD_INT 58
31018: PUSH
31019: LD_INT 59
31021: PUSH
31022: LD_INT 60
31024: PUSH
31025: LD_INT 61
31027: PUSH
31028: LD_INT 62
31030: PUSH
31031: LD_INT 80
31033: PUSH
31034: LD_INT 82
31036: PUSH
31037: LD_INT 83
31039: PUSH
31040: LD_INT 84
31042: PUSH
31043: LD_INT 85
31045: PUSH
31046: LD_INT 86
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: ST_TO_ADDR
31102: GO 31569
31104: LD_INT 2
31106: DOUBLE
31107: EQUAL
31108: IFTRUE 31112
31110: GO 31338
31112: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31113: LD_ADDR_VAR 0 4
31117: PUSH
31118: LD_INT 35
31120: PUSH
31121: LD_INT 45
31123: PUSH
31124: LD_INT 46
31126: PUSH
31127: LD_INT 47
31129: PUSH
31130: LD_INT 82
31132: PUSH
31133: LD_INT 83
31135: PUSH
31136: LD_INT 84
31138: PUSH
31139: LD_INT 85
31141: PUSH
31142: LD_INT 87
31144: PUSH
31145: LD_INT 70
31147: PUSH
31148: LD_INT 1
31150: PUSH
31151: LD_INT 11
31153: PUSH
31154: LD_INT 3
31156: PUSH
31157: LD_INT 4
31159: PUSH
31160: LD_INT 5
31162: PUSH
31163: LD_INT 6
31165: PUSH
31166: LD_INT 15
31168: PUSH
31169: LD_INT 18
31171: PUSH
31172: LD_INT 7
31174: PUSH
31175: LD_INT 17
31177: PUSH
31178: LD_INT 8
31180: PUSH
31181: LD_INT 20
31183: PUSH
31184: LD_INT 21
31186: PUSH
31187: LD_INT 22
31189: PUSH
31190: LD_INT 72
31192: PUSH
31193: LD_INT 26
31195: PUSH
31196: LD_INT 69
31198: PUSH
31199: LD_INT 39
31201: PUSH
31202: LD_INT 40
31204: PUSH
31205: LD_INT 41
31207: PUSH
31208: LD_INT 42
31210: PUSH
31211: LD_INT 43
31213: PUSH
31214: LD_INT 48
31216: PUSH
31217: LD_INT 49
31219: PUSH
31220: LD_INT 50
31222: PUSH
31223: LD_INT 51
31225: PUSH
31226: LD_INT 52
31228: PUSH
31229: LD_INT 53
31231: PUSH
31232: LD_INT 54
31234: PUSH
31235: LD_INT 55
31237: PUSH
31238: LD_INT 56
31240: PUSH
31241: LD_INT 60
31243: PUSH
31244: LD_INT 61
31246: PUSH
31247: LD_INT 62
31249: PUSH
31250: LD_INT 66
31252: PUSH
31253: LD_INT 67
31255: PUSH
31256: LD_INT 68
31258: PUSH
31259: LD_INT 81
31261: PUSH
31262: LD_INT 82
31264: PUSH
31265: LD_INT 83
31267: PUSH
31268: LD_INT 84
31270: PUSH
31271: LD_INT 85
31273: PUSH
31274: LD_INT 87
31276: PUSH
31277: LD_INT 88
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: ST_TO_ADDR
31336: GO 31569
31338: LD_INT 3
31340: DOUBLE
31341: EQUAL
31342: IFTRUE 31346
31344: GO 31568
31346: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31347: LD_ADDR_VAR 0 4
31351: PUSH
31352: LD_INT 46
31354: PUSH
31355: LD_INT 47
31357: PUSH
31358: LD_INT 1
31360: PUSH
31361: LD_INT 2
31363: PUSH
31364: LD_INT 82
31366: PUSH
31367: LD_INT 83
31369: PUSH
31370: LD_INT 84
31372: PUSH
31373: LD_INT 85
31375: PUSH
31376: LD_INT 86
31378: PUSH
31379: LD_INT 11
31381: PUSH
31382: LD_INT 9
31384: PUSH
31385: LD_INT 20
31387: PUSH
31388: LD_INT 19
31390: PUSH
31391: LD_INT 21
31393: PUSH
31394: LD_INT 24
31396: PUSH
31397: LD_INT 22
31399: PUSH
31400: LD_INT 25
31402: PUSH
31403: LD_INT 28
31405: PUSH
31406: LD_INT 29
31408: PUSH
31409: LD_INT 30
31411: PUSH
31412: LD_INT 31
31414: PUSH
31415: LD_INT 37
31417: PUSH
31418: LD_INT 38
31420: PUSH
31421: LD_INT 32
31423: PUSH
31424: LD_INT 27
31426: PUSH
31427: LD_INT 33
31429: PUSH
31430: LD_INT 69
31432: PUSH
31433: LD_INT 39
31435: PUSH
31436: LD_INT 34
31438: PUSH
31439: LD_INT 40
31441: PUSH
31442: LD_INT 71
31444: PUSH
31445: LD_INT 23
31447: PUSH
31448: LD_INT 44
31450: PUSH
31451: LD_INT 48
31453: PUSH
31454: LD_INT 49
31456: PUSH
31457: LD_INT 50
31459: PUSH
31460: LD_INT 51
31462: PUSH
31463: LD_INT 52
31465: PUSH
31466: LD_INT 53
31468: PUSH
31469: LD_INT 54
31471: PUSH
31472: LD_INT 55
31474: PUSH
31475: LD_INT 56
31477: PUSH
31478: LD_INT 57
31480: PUSH
31481: LD_INT 58
31483: PUSH
31484: LD_INT 59
31486: PUSH
31487: LD_INT 63
31489: PUSH
31490: LD_INT 64
31492: PUSH
31493: LD_INT 65
31495: PUSH
31496: LD_INT 82
31498: PUSH
31499: LD_INT 83
31501: PUSH
31502: LD_INT 84
31504: PUSH
31505: LD_INT 85
31507: PUSH
31508: LD_INT 86
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: ST_TO_ADDR
31566: GO 31569
31568: POP
// if state > - 1 and state < 3 then
31569: LD_VAR 0 3
31573: PUSH
31574: LD_INT 1
31576: NEG
31577: GREATER
31578: PUSH
31579: LD_VAR 0 3
31583: PUSH
31584: LD_INT 3
31586: LESS
31587: AND
31588: IFFALSE 31645
// for i in result do
31590: LD_ADDR_VAR 0 5
31594: PUSH
31595: LD_VAR 0 4
31599: PUSH
31600: FOR_IN
31601: IFFALSE 31643
// if GetTech ( i , side ) <> state then
31603: LD_VAR 0 5
31607: PPUSH
31608: LD_VAR 0 1
31612: PPUSH
31613: CALL_OW 321
31617: PUSH
31618: LD_VAR 0 3
31622: NONEQUAL
31623: IFFALSE 31641
// result := result diff i ;
31625: LD_ADDR_VAR 0 4
31629: PUSH
31630: LD_VAR 0 4
31634: PUSH
31635: LD_VAR 0 5
31639: DIFF
31640: ST_TO_ADDR
31641: GO 31600
31643: POP
31644: POP
// end ;
31645: LD_VAR 0 4
31649: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31650: LD_INT 0
31652: PPUSH
31653: PPUSH
31654: PPUSH
// result := true ;
31655: LD_ADDR_VAR 0 3
31659: PUSH
31660: LD_INT 1
31662: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31663: LD_ADDR_VAR 0 5
31667: PUSH
31668: LD_VAR 0 2
31672: PPUSH
31673: CALL_OW 480
31677: ST_TO_ADDR
// if not tmp then
31678: LD_VAR 0 5
31682: NOT
31683: IFFALSE 31687
// exit ;
31685: GO 31736
// for i in tmp do
31687: LD_ADDR_VAR 0 4
31691: PUSH
31692: LD_VAR 0 5
31696: PUSH
31697: FOR_IN
31698: IFFALSE 31734
// if GetTech ( i , side ) <> state_researched then
31700: LD_VAR 0 4
31704: PPUSH
31705: LD_VAR 0 1
31709: PPUSH
31710: CALL_OW 321
31714: PUSH
31715: LD_INT 2
31717: NONEQUAL
31718: IFFALSE 31732
// begin result := false ;
31720: LD_ADDR_VAR 0 3
31724: PUSH
31725: LD_INT 0
31727: ST_TO_ADDR
// exit ;
31728: POP
31729: POP
31730: GO 31736
// end ;
31732: GO 31697
31734: POP
31735: POP
// end ;
31736: LD_VAR 0 3
31740: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31741: LD_INT 0
31743: PPUSH
31744: PPUSH
31745: PPUSH
31746: PPUSH
31747: PPUSH
31748: PPUSH
31749: PPUSH
31750: PPUSH
31751: PPUSH
31752: PPUSH
31753: PPUSH
31754: PPUSH
31755: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31756: LD_VAR 0 1
31760: NOT
31761: PUSH
31762: LD_VAR 0 1
31766: PPUSH
31767: CALL_OW 257
31771: PUSH
31772: LD_INT 9
31774: NONEQUAL
31775: OR
31776: IFFALSE 31780
// exit ;
31778: GO 32353
// side := GetSide ( unit ) ;
31780: LD_ADDR_VAR 0 9
31784: PUSH
31785: LD_VAR 0 1
31789: PPUSH
31790: CALL_OW 255
31794: ST_TO_ADDR
// tech_space := tech_spacanom ;
31795: LD_ADDR_VAR 0 12
31799: PUSH
31800: LD_INT 29
31802: ST_TO_ADDR
// tech_time := tech_taurad ;
31803: LD_ADDR_VAR 0 13
31807: PUSH
31808: LD_INT 28
31810: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31811: LD_ADDR_VAR 0 11
31815: PUSH
31816: LD_VAR 0 1
31820: PPUSH
31821: CALL_OW 310
31825: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31826: LD_VAR 0 11
31830: PPUSH
31831: CALL_OW 247
31835: PUSH
31836: LD_INT 2
31838: EQUAL
31839: IFFALSE 31843
// exit ;
31841: GO 32353
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31843: LD_ADDR_VAR 0 8
31847: PUSH
31848: LD_INT 81
31850: PUSH
31851: LD_VAR 0 9
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 3
31862: PUSH
31863: LD_INT 21
31865: PUSH
31866: LD_INT 3
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PPUSH
31881: CALL_OW 69
31885: ST_TO_ADDR
// if not tmp then
31886: LD_VAR 0 8
31890: NOT
31891: IFFALSE 31895
// exit ;
31893: GO 32353
// if in_unit then
31895: LD_VAR 0 11
31899: IFFALSE 31923
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31901: LD_ADDR_VAR 0 10
31905: PUSH
31906: LD_VAR 0 8
31910: PPUSH
31911: LD_VAR 0 11
31915: PPUSH
31916: CALL_OW 74
31920: ST_TO_ADDR
31921: GO 31943
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31923: LD_ADDR_VAR 0 10
31927: PUSH
31928: LD_VAR 0 8
31932: PPUSH
31933: LD_VAR 0 1
31937: PPUSH
31938: CALL_OW 74
31942: ST_TO_ADDR
// if not enemy then
31943: LD_VAR 0 10
31947: NOT
31948: IFFALSE 31952
// exit ;
31950: GO 32353
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31952: LD_VAR 0 11
31956: PUSH
31957: LD_VAR 0 11
31961: PPUSH
31962: LD_VAR 0 10
31966: PPUSH
31967: CALL_OW 296
31971: PUSH
31972: LD_INT 13
31974: GREATER
31975: AND
31976: PUSH
31977: LD_VAR 0 1
31981: PPUSH
31982: LD_VAR 0 10
31986: PPUSH
31987: CALL_OW 296
31991: PUSH
31992: LD_INT 12
31994: GREATER
31995: OR
31996: IFFALSE 32000
// exit ;
31998: GO 32353
// missile := [ 1 ] ;
32000: LD_ADDR_VAR 0 14
32004: PUSH
32005: LD_INT 1
32007: PUSH
32008: EMPTY
32009: LIST
32010: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32011: LD_VAR 0 9
32015: PPUSH
32016: LD_VAR 0 12
32020: PPUSH
32021: CALL_OW 325
32025: IFFALSE 32054
// missile := Replace ( missile , missile + 1 , 2 ) ;
32027: LD_ADDR_VAR 0 14
32031: PUSH
32032: LD_VAR 0 14
32036: PPUSH
32037: LD_VAR 0 14
32041: PUSH
32042: LD_INT 1
32044: PLUS
32045: PPUSH
32046: LD_INT 2
32048: PPUSH
32049: CALL_OW 1
32053: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32054: LD_VAR 0 9
32058: PPUSH
32059: LD_VAR 0 13
32063: PPUSH
32064: CALL_OW 325
32068: PUSH
32069: LD_VAR 0 10
32073: PPUSH
32074: CALL_OW 255
32078: PPUSH
32079: LD_VAR 0 13
32083: PPUSH
32084: CALL_OW 325
32088: NOT
32089: AND
32090: IFFALSE 32119
// missile := Replace ( missile , missile + 1 , 3 ) ;
32092: LD_ADDR_VAR 0 14
32096: PUSH
32097: LD_VAR 0 14
32101: PPUSH
32102: LD_VAR 0 14
32106: PUSH
32107: LD_INT 1
32109: PLUS
32110: PPUSH
32111: LD_INT 3
32113: PPUSH
32114: CALL_OW 1
32118: ST_TO_ADDR
// if missile < 2 then
32119: LD_VAR 0 14
32123: PUSH
32124: LD_INT 2
32126: LESS
32127: IFFALSE 32131
// exit ;
32129: GO 32353
// x := GetX ( enemy ) ;
32131: LD_ADDR_VAR 0 4
32135: PUSH
32136: LD_VAR 0 10
32140: PPUSH
32141: CALL_OW 250
32145: ST_TO_ADDR
// y := GetY ( enemy ) ;
32146: LD_ADDR_VAR 0 5
32150: PUSH
32151: LD_VAR 0 10
32155: PPUSH
32156: CALL_OW 251
32160: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32161: LD_ADDR_VAR 0 6
32165: PUSH
32166: LD_VAR 0 4
32170: PUSH
32171: LD_INT 1
32173: NEG
32174: PPUSH
32175: LD_INT 1
32177: PPUSH
32178: CALL_OW 12
32182: PLUS
32183: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32184: LD_ADDR_VAR 0 7
32188: PUSH
32189: LD_VAR 0 5
32193: PUSH
32194: LD_INT 1
32196: NEG
32197: PPUSH
32198: LD_INT 1
32200: PPUSH
32201: CALL_OW 12
32205: PLUS
32206: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32207: LD_VAR 0 6
32211: PPUSH
32212: LD_VAR 0 7
32216: PPUSH
32217: CALL_OW 488
32221: NOT
32222: IFFALSE 32244
// begin _x := x ;
32224: LD_ADDR_VAR 0 6
32228: PUSH
32229: LD_VAR 0 4
32233: ST_TO_ADDR
// _y := y ;
32234: LD_ADDR_VAR 0 7
32238: PUSH
32239: LD_VAR 0 5
32243: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32244: LD_ADDR_VAR 0 3
32248: PUSH
32249: LD_INT 1
32251: PPUSH
32252: LD_VAR 0 14
32256: PPUSH
32257: CALL_OW 12
32261: ST_TO_ADDR
// case i of 1 :
32262: LD_VAR 0 3
32266: PUSH
32267: LD_INT 1
32269: DOUBLE
32270: EQUAL
32271: IFTRUE 32275
32273: GO 32292
32275: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32276: LD_VAR 0 1
32280: PPUSH
32281: LD_VAR 0 10
32285: PPUSH
32286: CALL_OW 115
32290: GO 32353
32292: LD_INT 2
32294: DOUBLE
32295: EQUAL
32296: IFTRUE 32300
32298: GO 32322
32300: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32301: LD_VAR 0 1
32305: PPUSH
32306: LD_VAR 0 6
32310: PPUSH
32311: LD_VAR 0 7
32315: PPUSH
32316: CALL_OW 153
32320: GO 32353
32322: LD_INT 3
32324: DOUBLE
32325: EQUAL
32326: IFTRUE 32330
32328: GO 32352
32330: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32331: LD_VAR 0 1
32335: PPUSH
32336: LD_VAR 0 6
32340: PPUSH
32341: LD_VAR 0 7
32345: PPUSH
32346: CALL_OW 154
32350: GO 32353
32352: POP
// end ;
32353: LD_VAR 0 2
32357: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32358: LD_INT 0
32360: PPUSH
32361: PPUSH
32362: PPUSH
32363: PPUSH
32364: PPUSH
32365: PPUSH
// if not unit or not building then
32366: LD_VAR 0 1
32370: NOT
32371: PUSH
32372: LD_VAR 0 2
32376: NOT
32377: OR
32378: IFFALSE 32382
// exit ;
32380: GO 32540
// x := GetX ( building ) ;
32382: LD_ADDR_VAR 0 5
32386: PUSH
32387: LD_VAR 0 2
32391: PPUSH
32392: CALL_OW 250
32396: ST_TO_ADDR
// y := GetY ( building ) ;
32397: LD_ADDR_VAR 0 6
32401: PUSH
32402: LD_VAR 0 2
32406: PPUSH
32407: CALL_OW 251
32411: ST_TO_ADDR
// for i = 0 to 5 do
32412: LD_ADDR_VAR 0 4
32416: PUSH
32417: DOUBLE
32418: LD_INT 0
32420: DEC
32421: ST_TO_ADDR
32422: LD_INT 5
32424: PUSH
32425: FOR_TO
32426: IFFALSE 32538
// begin _x := ShiftX ( x , i , 3 ) ;
32428: LD_ADDR_VAR 0 7
32432: PUSH
32433: LD_VAR 0 5
32437: PPUSH
32438: LD_VAR 0 4
32442: PPUSH
32443: LD_INT 3
32445: PPUSH
32446: CALL_OW 272
32450: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32451: LD_ADDR_VAR 0 8
32455: PUSH
32456: LD_VAR 0 6
32460: PPUSH
32461: LD_VAR 0 4
32465: PPUSH
32466: LD_INT 3
32468: PPUSH
32469: CALL_OW 273
32473: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32474: LD_VAR 0 7
32478: PPUSH
32479: LD_VAR 0 8
32483: PPUSH
32484: CALL_OW 488
32488: NOT
32489: IFFALSE 32493
// continue ;
32491: GO 32425
// if HexInfo ( _x , _y ) = 0 then
32493: LD_VAR 0 7
32497: PPUSH
32498: LD_VAR 0 8
32502: PPUSH
32503: CALL_OW 428
32507: PUSH
32508: LD_INT 0
32510: EQUAL
32511: IFFALSE 32536
// begin ComMoveXY ( unit , _x , _y ) ;
32513: LD_VAR 0 1
32517: PPUSH
32518: LD_VAR 0 7
32522: PPUSH
32523: LD_VAR 0 8
32527: PPUSH
32528: CALL_OW 111
// exit ;
32532: POP
32533: POP
32534: GO 32540
// end ; end ;
32536: GO 32425
32538: POP
32539: POP
// end ;
32540: LD_VAR 0 3
32544: RET
// export function ScanBase ( side , base_area ) ; begin
32545: LD_INT 0
32547: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32548: LD_ADDR_VAR 0 3
32552: PUSH
32553: LD_VAR 0 2
32557: PPUSH
32558: LD_INT 81
32560: PUSH
32561: LD_VAR 0 1
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PPUSH
32570: CALL_OW 70
32574: ST_TO_ADDR
// end ;
32575: LD_VAR 0 3
32579: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32580: LD_INT 0
32582: PPUSH
32583: PPUSH
32584: PPUSH
32585: PPUSH
// result := false ;
32586: LD_ADDR_VAR 0 2
32590: PUSH
32591: LD_INT 0
32593: ST_TO_ADDR
// side := GetSide ( unit ) ;
32594: LD_ADDR_VAR 0 3
32598: PUSH
32599: LD_VAR 0 1
32603: PPUSH
32604: CALL_OW 255
32608: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32609: LD_ADDR_VAR 0 4
32613: PUSH
32614: LD_VAR 0 1
32618: PPUSH
32619: CALL_OW 248
32623: ST_TO_ADDR
// case nat of 1 :
32624: LD_VAR 0 4
32628: PUSH
32629: LD_INT 1
32631: DOUBLE
32632: EQUAL
32633: IFTRUE 32637
32635: GO 32648
32637: POP
// tech := tech_lassight ; 2 :
32638: LD_ADDR_VAR 0 5
32642: PUSH
32643: LD_INT 12
32645: ST_TO_ADDR
32646: GO 32687
32648: LD_INT 2
32650: DOUBLE
32651: EQUAL
32652: IFTRUE 32656
32654: GO 32667
32656: POP
// tech := tech_mortar ; 3 :
32657: LD_ADDR_VAR 0 5
32661: PUSH
32662: LD_INT 41
32664: ST_TO_ADDR
32665: GO 32687
32667: LD_INT 3
32669: DOUBLE
32670: EQUAL
32671: IFTRUE 32675
32673: GO 32686
32675: POP
// tech := tech_bazooka ; end ;
32676: LD_ADDR_VAR 0 5
32680: PUSH
32681: LD_INT 44
32683: ST_TO_ADDR
32684: GO 32687
32686: POP
// if Researched ( side , tech ) then
32687: LD_VAR 0 3
32691: PPUSH
32692: LD_VAR 0 5
32696: PPUSH
32697: CALL_OW 325
32701: IFFALSE 32728
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32703: LD_ADDR_VAR 0 2
32707: PUSH
32708: LD_INT 5
32710: PUSH
32711: LD_INT 8
32713: PUSH
32714: LD_INT 9
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: LIST
32721: PUSH
32722: LD_VAR 0 4
32726: ARRAY
32727: ST_TO_ADDR
// end ;
32728: LD_VAR 0 2
32732: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32733: LD_INT 0
32735: PPUSH
32736: PPUSH
32737: PPUSH
// if not mines then
32738: LD_VAR 0 2
32742: NOT
32743: IFFALSE 32747
// exit ;
32745: GO 32891
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32747: LD_ADDR_VAR 0 5
32751: PUSH
32752: LD_INT 81
32754: PUSH
32755: LD_VAR 0 1
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 3
32766: PUSH
32767: LD_INT 21
32769: PUSH
32770: LD_INT 3
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PPUSH
32785: CALL_OW 69
32789: ST_TO_ADDR
// for i in mines do
32790: LD_ADDR_VAR 0 4
32794: PUSH
32795: LD_VAR 0 2
32799: PUSH
32800: FOR_IN
32801: IFFALSE 32889
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32803: LD_VAR 0 4
32807: PUSH
32808: LD_INT 1
32810: ARRAY
32811: PPUSH
32812: LD_VAR 0 4
32816: PUSH
32817: LD_INT 2
32819: ARRAY
32820: PPUSH
32821: CALL_OW 458
32825: NOT
32826: IFFALSE 32830
// continue ;
32828: GO 32800
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32830: LD_VAR 0 4
32834: PUSH
32835: LD_INT 1
32837: ARRAY
32838: PPUSH
32839: LD_VAR 0 4
32843: PUSH
32844: LD_INT 2
32846: ARRAY
32847: PPUSH
32848: CALL_OW 428
32852: PUSH
32853: LD_VAR 0 5
32857: IN
32858: IFFALSE 32887
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32860: LD_VAR 0 4
32864: PUSH
32865: LD_INT 1
32867: ARRAY
32868: PPUSH
32869: LD_VAR 0 4
32873: PUSH
32874: LD_INT 2
32876: ARRAY
32877: PPUSH
32878: LD_VAR 0 1
32882: PPUSH
32883: CALL_OW 456
// end ;
32887: GO 32800
32889: POP
32890: POP
// end ;
32891: LD_VAR 0 3
32895: RET
// export function Count ( array ) ; var i ; begin
32896: LD_INT 0
32898: PPUSH
32899: PPUSH
// result := 0 ;
32900: LD_ADDR_VAR 0 2
32904: PUSH
32905: LD_INT 0
32907: ST_TO_ADDR
// for i in array do
32908: LD_ADDR_VAR 0 3
32912: PUSH
32913: LD_VAR 0 1
32917: PUSH
32918: FOR_IN
32919: IFFALSE 32943
// if i then
32921: LD_VAR 0 3
32925: IFFALSE 32941
// result := result + 1 ;
32927: LD_ADDR_VAR 0 2
32931: PUSH
32932: LD_VAR 0 2
32936: PUSH
32937: LD_INT 1
32939: PLUS
32940: ST_TO_ADDR
32941: GO 32918
32943: POP
32944: POP
// end ;
32945: LD_VAR 0 2
32949: RET
// export function IsEmpty ( building ) ; begin
32950: LD_INT 0
32952: PPUSH
// if not building then
32953: LD_VAR 0 1
32957: NOT
32958: IFFALSE 32962
// exit ;
32960: GO 33005
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32962: LD_ADDR_VAR 0 2
32966: PUSH
32967: LD_VAR 0 1
32971: PUSH
32972: LD_INT 22
32974: PUSH
32975: LD_VAR 0 1
32979: PPUSH
32980: CALL_OW 255
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 58
32991: PUSH
32992: EMPTY
32993: LIST
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PPUSH
32999: CALL_OW 69
33003: IN
33004: ST_TO_ADDR
// end ;
33005: LD_VAR 0 2
33009: RET
// export function IsNotFull ( building ) ; var places ; begin
33010: LD_INT 0
33012: PPUSH
33013: PPUSH
// if not building then
33014: LD_VAR 0 1
33018: NOT
33019: IFFALSE 33023
// exit ;
33021: GO 33194
// result := false ;
33023: LD_ADDR_VAR 0 2
33027: PUSH
33028: LD_INT 0
33030: ST_TO_ADDR
// places := 0 ;
33031: LD_ADDR_VAR 0 3
33035: PUSH
33036: LD_INT 0
33038: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
33039: LD_VAR 0 1
33043: PPUSH
33044: CALL_OW 266
33048: PUSH
33049: LD_INT 0
33051: DOUBLE
33052: EQUAL
33053: IFTRUE 33111
33055: LD_INT 1
33057: DOUBLE
33058: EQUAL
33059: IFTRUE 33111
33061: LD_INT 6
33063: DOUBLE
33064: EQUAL
33065: IFTRUE 33111
33067: LD_INT 7
33069: DOUBLE
33070: EQUAL
33071: IFTRUE 33111
33073: LD_INT 8
33075: DOUBLE
33076: EQUAL
33077: IFTRUE 33111
33079: LD_INT 4
33081: DOUBLE
33082: EQUAL
33083: IFTRUE 33111
33085: LD_INT 5
33087: DOUBLE
33088: EQUAL
33089: IFTRUE 33111
33091: LD_INT 2
33093: DOUBLE
33094: EQUAL
33095: IFTRUE 33111
33097: LD_INT 3
33099: DOUBLE
33100: EQUAL
33101: IFTRUE 33111
33103: LD_INT 35
33105: DOUBLE
33106: EQUAL
33107: IFTRUE 33111
33109: GO 33122
33111: POP
// places := 6 ; b_bunker , b_breastwork :
33112: LD_ADDR_VAR 0 3
33116: PUSH
33117: LD_INT 6
33119: ST_TO_ADDR
33120: GO 33167
33122: LD_INT 32
33124: DOUBLE
33125: EQUAL
33126: IFTRUE 33136
33128: LD_INT 31
33130: DOUBLE
33131: EQUAL
33132: IFTRUE 33136
33134: GO 33147
33136: POP
// places := 1 ; b_control_tower :
33137: LD_ADDR_VAR 0 3
33141: PUSH
33142: LD_INT 1
33144: ST_TO_ADDR
33145: GO 33167
33147: LD_INT 36
33149: DOUBLE
33150: EQUAL
33151: IFTRUE 33155
33153: GO 33166
33155: POP
// places := 3 ; end ;
33156: LD_ADDR_VAR 0 3
33160: PUSH
33161: LD_INT 3
33163: ST_TO_ADDR
33164: GO 33167
33166: POP
// if places then
33167: LD_VAR 0 3
33171: IFFALSE 33194
// result := UnitsInside ( building ) < places ;
33173: LD_ADDR_VAR 0 2
33177: PUSH
33178: LD_VAR 0 1
33182: PPUSH
33183: CALL_OW 313
33187: PUSH
33188: LD_VAR 0 3
33192: LESS
33193: ST_TO_ADDR
// end ;
33194: LD_VAR 0 2
33198: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33199: LD_INT 0
33201: PPUSH
33202: PPUSH
33203: PPUSH
33204: PPUSH
// tmp := [ ] ;
33205: LD_ADDR_VAR 0 3
33209: PUSH
33210: EMPTY
33211: ST_TO_ADDR
// list := [ ] ;
33212: LD_ADDR_VAR 0 5
33216: PUSH
33217: EMPTY
33218: ST_TO_ADDR
// for i = 16 to 25 do
33219: LD_ADDR_VAR 0 4
33223: PUSH
33224: DOUBLE
33225: LD_INT 16
33227: DEC
33228: ST_TO_ADDR
33229: LD_INT 25
33231: PUSH
33232: FOR_TO
33233: IFFALSE 33306
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33235: LD_ADDR_VAR 0 3
33239: PUSH
33240: LD_VAR 0 3
33244: PUSH
33245: LD_INT 22
33247: PUSH
33248: LD_VAR 0 1
33252: PPUSH
33253: CALL_OW 255
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 91
33264: PUSH
33265: LD_VAR 0 1
33269: PUSH
33270: LD_INT 6
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: LIST
33277: PUSH
33278: LD_INT 30
33280: PUSH
33281: LD_VAR 0 4
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: LIST
33294: PUSH
33295: EMPTY
33296: LIST
33297: PPUSH
33298: CALL_OW 69
33302: ADD
33303: ST_TO_ADDR
33304: GO 33232
33306: POP
33307: POP
// for i = 1 to tmp do
33308: LD_ADDR_VAR 0 4
33312: PUSH
33313: DOUBLE
33314: LD_INT 1
33316: DEC
33317: ST_TO_ADDR
33318: LD_VAR 0 3
33322: PUSH
33323: FOR_TO
33324: IFFALSE 33412
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33326: LD_ADDR_VAR 0 5
33330: PUSH
33331: LD_VAR 0 5
33335: PUSH
33336: LD_VAR 0 3
33340: PUSH
33341: LD_VAR 0 4
33345: ARRAY
33346: PPUSH
33347: CALL_OW 266
33351: PUSH
33352: LD_VAR 0 3
33356: PUSH
33357: LD_VAR 0 4
33361: ARRAY
33362: PPUSH
33363: CALL_OW 250
33367: PUSH
33368: LD_VAR 0 3
33372: PUSH
33373: LD_VAR 0 4
33377: ARRAY
33378: PPUSH
33379: CALL_OW 251
33383: PUSH
33384: LD_VAR 0 3
33388: PUSH
33389: LD_VAR 0 4
33393: ARRAY
33394: PPUSH
33395: CALL_OW 254
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: PUSH
33406: EMPTY
33407: LIST
33408: ADD
33409: ST_TO_ADDR
33410: GO 33323
33412: POP
33413: POP
// result := list ;
33414: LD_ADDR_VAR 0 2
33418: PUSH
33419: LD_VAR 0 5
33423: ST_TO_ADDR
// end ;
33424: LD_VAR 0 2
33428: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33429: LD_INT 0
33431: PPUSH
33432: PPUSH
33433: PPUSH
33434: PPUSH
33435: PPUSH
33436: PPUSH
33437: PPUSH
// if not factory then
33438: LD_VAR 0 1
33442: NOT
33443: IFFALSE 33447
// exit ;
33445: GO 34040
// if control = control_apeman then
33447: LD_VAR 0 4
33451: PUSH
33452: LD_INT 5
33454: EQUAL
33455: IFFALSE 33564
// begin tmp := UnitsInside ( factory ) ;
33457: LD_ADDR_VAR 0 8
33461: PUSH
33462: LD_VAR 0 1
33466: PPUSH
33467: CALL_OW 313
33471: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33472: LD_VAR 0 8
33476: PPUSH
33477: LD_INT 25
33479: PUSH
33480: LD_INT 12
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PPUSH
33487: CALL_OW 72
33491: NOT
33492: IFFALSE 33502
// control := control_manual ;
33494: LD_ADDR_VAR 0 4
33498: PUSH
33499: LD_INT 1
33501: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33502: LD_ADDR_VAR 0 8
33506: PUSH
33507: LD_VAR 0 1
33511: PPUSH
33512: CALL 33199 0 1
33516: ST_TO_ADDR
// if tmp then
33517: LD_VAR 0 8
33521: IFFALSE 33564
// begin for i in tmp do
33523: LD_ADDR_VAR 0 7
33527: PUSH
33528: LD_VAR 0 8
33532: PUSH
33533: FOR_IN
33534: IFFALSE 33562
// if i [ 1 ] = b_ext_radio then
33536: LD_VAR 0 7
33540: PUSH
33541: LD_INT 1
33543: ARRAY
33544: PUSH
33545: LD_INT 22
33547: EQUAL
33548: IFFALSE 33560
// begin control := control_remote ;
33550: LD_ADDR_VAR 0 4
33554: PUSH
33555: LD_INT 2
33557: ST_TO_ADDR
// break ;
33558: GO 33562
// end ;
33560: GO 33533
33562: POP
33563: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33564: LD_VAR 0 1
33568: PPUSH
33569: LD_VAR 0 2
33573: PPUSH
33574: LD_VAR 0 3
33578: PPUSH
33579: LD_VAR 0 4
33583: PPUSH
33584: LD_VAR 0 5
33588: PPUSH
33589: CALL_OW 448
33593: IFFALSE 33628
// begin result := [ chassis , engine , control , weapon ] ;
33595: LD_ADDR_VAR 0 6
33599: PUSH
33600: LD_VAR 0 2
33604: PUSH
33605: LD_VAR 0 3
33609: PUSH
33610: LD_VAR 0 4
33614: PUSH
33615: LD_VAR 0 5
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: ST_TO_ADDR
// exit ;
33626: GO 34040
// end ; _chassis := AvailableChassisList ( factory ) ;
33628: LD_ADDR_VAR 0 9
33632: PUSH
33633: LD_VAR 0 1
33637: PPUSH
33638: CALL_OW 475
33642: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33643: LD_ADDR_VAR 0 11
33647: PUSH
33648: LD_VAR 0 1
33652: PPUSH
33653: CALL_OW 476
33657: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33658: LD_ADDR_VAR 0 12
33662: PUSH
33663: LD_VAR 0 1
33667: PPUSH
33668: CALL_OW 477
33672: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33673: LD_ADDR_VAR 0 10
33677: PUSH
33678: LD_VAR 0 1
33682: PPUSH
33683: CALL_OW 478
33687: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33688: LD_VAR 0 9
33692: NOT
33693: PUSH
33694: LD_VAR 0 11
33698: NOT
33699: OR
33700: PUSH
33701: LD_VAR 0 12
33705: NOT
33706: OR
33707: PUSH
33708: LD_VAR 0 10
33712: NOT
33713: OR
33714: IFFALSE 33749
// begin result := [ chassis , engine , control , weapon ] ;
33716: LD_ADDR_VAR 0 6
33720: PUSH
33721: LD_VAR 0 2
33725: PUSH
33726: LD_VAR 0 3
33730: PUSH
33731: LD_VAR 0 4
33735: PUSH
33736: LD_VAR 0 5
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: ST_TO_ADDR
// exit ;
33747: GO 34040
// end ; if not chassis in _chassis then
33749: LD_VAR 0 2
33753: PUSH
33754: LD_VAR 0 9
33758: IN
33759: NOT
33760: IFFALSE 33786
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33762: LD_ADDR_VAR 0 2
33766: PUSH
33767: LD_VAR 0 9
33771: PUSH
33772: LD_INT 1
33774: PPUSH
33775: LD_VAR 0 9
33779: PPUSH
33780: CALL_OW 12
33784: ARRAY
33785: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33786: LD_VAR 0 2
33790: PPUSH
33791: LD_VAR 0 3
33795: PPUSH
33796: CALL 34045 0 2
33800: NOT
33801: IFFALSE 33860
// repeat engine := _engine [ 1 ] ;
33803: LD_ADDR_VAR 0 3
33807: PUSH
33808: LD_VAR 0 11
33812: PUSH
33813: LD_INT 1
33815: ARRAY
33816: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33817: LD_ADDR_VAR 0 11
33821: PUSH
33822: LD_VAR 0 11
33826: PPUSH
33827: LD_INT 1
33829: PPUSH
33830: CALL_OW 3
33834: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33835: LD_VAR 0 2
33839: PPUSH
33840: LD_VAR 0 3
33844: PPUSH
33845: CALL 34045 0 2
33849: PUSH
33850: LD_VAR 0 11
33854: PUSH
33855: EMPTY
33856: EQUAL
33857: OR
33858: IFFALSE 33803
// if not control in _control then
33860: LD_VAR 0 4
33864: PUSH
33865: LD_VAR 0 12
33869: IN
33870: NOT
33871: IFFALSE 33897
// control := _control [ rand ( 1 , _control ) ] ;
33873: LD_ADDR_VAR 0 4
33877: PUSH
33878: LD_VAR 0 12
33882: PUSH
33883: LD_INT 1
33885: PPUSH
33886: LD_VAR 0 12
33890: PPUSH
33891: CALL_OW 12
33895: ARRAY
33896: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33897: LD_VAR 0 2
33901: PPUSH
33902: LD_VAR 0 5
33906: PPUSH
33907: CALL 34265 0 2
33911: NOT
33912: IFFALSE 33971
// repeat weapon := _weapon [ 1 ] ;
33914: LD_ADDR_VAR 0 5
33918: PUSH
33919: LD_VAR 0 10
33923: PUSH
33924: LD_INT 1
33926: ARRAY
33927: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33928: LD_ADDR_VAR 0 10
33932: PUSH
33933: LD_VAR 0 10
33937: PPUSH
33938: LD_INT 1
33940: PPUSH
33941: CALL_OW 3
33945: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33946: LD_VAR 0 2
33950: PPUSH
33951: LD_VAR 0 5
33955: PPUSH
33956: CALL 34265 0 2
33960: PUSH
33961: LD_VAR 0 10
33965: PUSH
33966: EMPTY
33967: EQUAL
33968: OR
33969: IFFALSE 33914
// result := [ ] ;
33971: LD_ADDR_VAR 0 6
33975: PUSH
33976: EMPTY
33977: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33978: LD_VAR 0 1
33982: PPUSH
33983: LD_VAR 0 2
33987: PPUSH
33988: LD_VAR 0 3
33992: PPUSH
33993: LD_VAR 0 4
33997: PPUSH
33998: LD_VAR 0 5
34002: PPUSH
34003: CALL_OW 448
34007: IFFALSE 34040
// result := [ chassis , engine , control , weapon ] ;
34009: LD_ADDR_VAR 0 6
34013: PUSH
34014: LD_VAR 0 2
34018: PUSH
34019: LD_VAR 0 3
34023: PUSH
34024: LD_VAR 0 4
34028: PUSH
34029: LD_VAR 0 5
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: ST_TO_ADDR
// end ;
34040: LD_VAR 0 6
34044: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34045: LD_INT 0
34047: PPUSH
// if not chassis or not engine then
34048: LD_VAR 0 1
34052: NOT
34053: PUSH
34054: LD_VAR 0 2
34058: NOT
34059: OR
34060: IFFALSE 34064
// exit ;
34062: GO 34260
// case engine of engine_solar :
34064: LD_VAR 0 2
34068: PUSH
34069: LD_INT 2
34071: DOUBLE
34072: EQUAL
34073: IFTRUE 34077
34075: GO 34115
34077: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34078: LD_ADDR_VAR 0 3
34082: PUSH
34083: LD_INT 11
34085: PUSH
34086: LD_INT 12
34088: PUSH
34089: LD_INT 13
34091: PUSH
34092: LD_INT 14
34094: PUSH
34095: LD_INT 1
34097: PUSH
34098: LD_INT 2
34100: PUSH
34101: LD_INT 3
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: LIST
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: ST_TO_ADDR
34113: GO 34244
34115: LD_INT 1
34117: DOUBLE
34118: EQUAL
34119: IFTRUE 34123
34121: GO 34185
34123: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34124: LD_ADDR_VAR 0 3
34128: PUSH
34129: LD_INT 11
34131: PUSH
34132: LD_INT 12
34134: PUSH
34135: LD_INT 13
34137: PUSH
34138: LD_INT 14
34140: PUSH
34141: LD_INT 1
34143: PUSH
34144: LD_INT 2
34146: PUSH
34147: LD_INT 3
34149: PUSH
34150: LD_INT 4
34152: PUSH
34153: LD_INT 5
34155: PUSH
34156: LD_INT 21
34158: PUSH
34159: LD_INT 23
34161: PUSH
34162: LD_INT 22
34164: PUSH
34165: LD_INT 24
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: ST_TO_ADDR
34183: GO 34244
34185: LD_INT 3
34187: DOUBLE
34188: EQUAL
34189: IFTRUE 34193
34191: GO 34243
34193: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34194: LD_ADDR_VAR 0 3
34198: PUSH
34199: LD_INT 13
34201: PUSH
34202: LD_INT 14
34204: PUSH
34205: LD_INT 2
34207: PUSH
34208: LD_INT 3
34210: PUSH
34211: LD_INT 4
34213: PUSH
34214: LD_INT 5
34216: PUSH
34217: LD_INT 21
34219: PUSH
34220: LD_INT 22
34222: PUSH
34223: LD_INT 23
34225: PUSH
34226: LD_INT 24
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: ST_TO_ADDR
34241: GO 34244
34243: POP
// result := ( chassis in result ) ;
34244: LD_ADDR_VAR 0 3
34248: PUSH
34249: LD_VAR 0 1
34253: PUSH
34254: LD_VAR 0 3
34258: IN
34259: ST_TO_ADDR
// end ;
34260: LD_VAR 0 3
34264: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34265: LD_INT 0
34267: PPUSH
// if not chassis or not weapon then
34268: LD_VAR 0 1
34272: NOT
34273: PUSH
34274: LD_VAR 0 2
34278: NOT
34279: OR
34280: IFFALSE 34284
// exit ;
34282: GO 35344
// case weapon of us_machine_gun :
34284: LD_VAR 0 2
34288: PUSH
34289: LD_INT 2
34291: DOUBLE
34292: EQUAL
34293: IFTRUE 34297
34295: GO 34327
34297: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34298: LD_ADDR_VAR 0 3
34302: PUSH
34303: LD_INT 1
34305: PUSH
34306: LD_INT 2
34308: PUSH
34309: LD_INT 3
34311: PUSH
34312: LD_INT 4
34314: PUSH
34315: LD_INT 5
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: ST_TO_ADDR
34325: GO 35328
34327: LD_INT 3
34329: DOUBLE
34330: EQUAL
34331: IFTRUE 34335
34333: GO 34365
34335: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34336: LD_ADDR_VAR 0 3
34340: PUSH
34341: LD_INT 1
34343: PUSH
34344: LD_INT 2
34346: PUSH
34347: LD_INT 3
34349: PUSH
34350: LD_INT 4
34352: PUSH
34353: LD_INT 5
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: ST_TO_ADDR
34363: GO 35328
34365: LD_INT 11
34367: DOUBLE
34368: EQUAL
34369: IFTRUE 34373
34371: GO 34403
34373: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34374: LD_ADDR_VAR 0 3
34378: PUSH
34379: LD_INT 1
34381: PUSH
34382: LD_INT 2
34384: PUSH
34385: LD_INT 3
34387: PUSH
34388: LD_INT 4
34390: PUSH
34391: LD_INT 5
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: ST_TO_ADDR
34401: GO 35328
34403: LD_INT 4
34405: DOUBLE
34406: EQUAL
34407: IFTRUE 34411
34409: GO 34437
34411: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34412: LD_ADDR_VAR 0 3
34416: PUSH
34417: LD_INT 2
34419: PUSH
34420: LD_INT 3
34422: PUSH
34423: LD_INT 4
34425: PUSH
34426: LD_INT 5
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: ST_TO_ADDR
34435: GO 35328
34437: LD_INT 5
34439: DOUBLE
34440: EQUAL
34441: IFTRUE 34445
34443: GO 34471
34445: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34446: LD_ADDR_VAR 0 3
34450: PUSH
34451: LD_INT 2
34453: PUSH
34454: LD_INT 3
34456: PUSH
34457: LD_INT 4
34459: PUSH
34460: LD_INT 5
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: ST_TO_ADDR
34469: GO 35328
34471: LD_INT 9
34473: DOUBLE
34474: EQUAL
34475: IFTRUE 34479
34477: GO 34505
34479: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34480: LD_ADDR_VAR 0 3
34484: PUSH
34485: LD_INT 2
34487: PUSH
34488: LD_INT 3
34490: PUSH
34491: LD_INT 4
34493: PUSH
34494: LD_INT 5
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: ST_TO_ADDR
34503: GO 35328
34505: LD_INT 7
34507: DOUBLE
34508: EQUAL
34509: IFTRUE 34513
34511: GO 34539
34513: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34514: LD_ADDR_VAR 0 3
34518: PUSH
34519: LD_INT 2
34521: PUSH
34522: LD_INT 3
34524: PUSH
34525: LD_INT 4
34527: PUSH
34528: LD_INT 5
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: ST_TO_ADDR
34537: GO 35328
34539: LD_INT 12
34541: DOUBLE
34542: EQUAL
34543: IFTRUE 34547
34545: GO 34573
34547: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34548: LD_ADDR_VAR 0 3
34552: PUSH
34553: LD_INT 2
34555: PUSH
34556: LD_INT 3
34558: PUSH
34559: LD_INT 4
34561: PUSH
34562: LD_INT 5
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: ST_TO_ADDR
34571: GO 35328
34573: LD_INT 13
34575: DOUBLE
34576: EQUAL
34577: IFTRUE 34581
34579: GO 34607
34581: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34582: LD_ADDR_VAR 0 3
34586: PUSH
34587: LD_INT 2
34589: PUSH
34590: LD_INT 3
34592: PUSH
34593: LD_INT 4
34595: PUSH
34596: LD_INT 5
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: ST_TO_ADDR
34605: GO 35328
34607: LD_INT 14
34609: DOUBLE
34610: EQUAL
34611: IFTRUE 34615
34613: GO 34633
34615: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34616: LD_ADDR_VAR 0 3
34620: PUSH
34621: LD_INT 4
34623: PUSH
34624: LD_INT 5
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: ST_TO_ADDR
34631: GO 35328
34633: LD_INT 6
34635: DOUBLE
34636: EQUAL
34637: IFTRUE 34641
34639: GO 34659
34641: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34642: LD_ADDR_VAR 0 3
34646: PUSH
34647: LD_INT 4
34649: PUSH
34650: LD_INT 5
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: ST_TO_ADDR
34657: GO 35328
34659: LD_INT 10
34661: DOUBLE
34662: EQUAL
34663: IFTRUE 34667
34665: GO 34685
34667: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34668: LD_ADDR_VAR 0 3
34672: PUSH
34673: LD_INT 4
34675: PUSH
34676: LD_INT 5
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: ST_TO_ADDR
34683: GO 35328
34685: LD_INT 22
34687: DOUBLE
34688: EQUAL
34689: IFTRUE 34693
34691: GO 34719
34693: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34694: LD_ADDR_VAR 0 3
34698: PUSH
34699: LD_INT 11
34701: PUSH
34702: LD_INT 12
34704: PUSH
34705: LD_INT 13
34707: PUSH
34708: LD_INT 14
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: ST_TO_ADDR
34717: GO 35328
34719: LD_INT 23
34721: DOUBLE
34722: EQUAL
34723: IFTRUE 34727
34725: GO 34753
34727: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34728: LD_ADDR_VAR 0 3
34732: PUSH
34733: LD_INT 11
34735: PUSH
34736: LD_INT 12
34738: PUSH
34739: LD_INT 13
34741: PUSH
34742: LD_INT 14
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: ST_TO_ADDR
34751: GO 35328
34753: LD_INT 24
34755: DOUBLE
34756: EQUAL
34757: IFTRUE 34761
34759: GO 34787
34761: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34762: LD_ADDR_VAR 0 3
34766: PUSH
34767: LD_INT 11
34769: PUSH
34770: LD_INT 12
34772: PUSH
34773: LD_INT 13
34775: PUSH
34776: LD_INT 14
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: ST_TO_ADDR
34785: GO 35328
34787: LD_INT 30
34789: DOUBLE
34790: EQUAL
34791: IFTRUE 34795
34793: GO 34821
34795: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34796: LD_ADDR_VAR 0 3
34800: PUSH
34801: LD_INT 11
34803: PUSH
34804: LD_INT 12
34806: PUSH
34807: LD_INT 13
34809: PUSH
34810: LD_INT 14
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: ST_TO_ADDR
34819: GO 35328
34821: LD_INT 25
34823: DOUBLE
34824: EQUAL
34825: IFTRUE 34829
34827: GO 34847
34829: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34830: LD_ADDR_VAR 0 3
34834: PUSH
34835: LD_INT 13
34837: PUSH
34838: LD_INT 14
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: ST_TO_ADDR
34845: GO 35328
34847: LD_INT 27
34849: DOUBLE
34850: EQUAL
34851: IFTRUE 34855
34853: GO 34873
34855: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34856: LD_ADDR_VAR 0 3
34860: PUSH
34861: LD_INT 13
34863: PUSH
34864: LD_INT 14
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: ST_TO_ADDR
34871: GO 35328
34873: LD_INT 92
34875: DOUBLE
34876: EQUAL
34877: IFTRUE 34881
34879: GO 34907
34881: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34882: LD_ADDR_VAR 0 3
34886: PUSH
34887: LD_INT 11
34889: PUSH
34890: LD_INT 12
34892: PUSH
34893: LD_INT 13
34895: PUSH
34896: LD_INT 14
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: ST_TO_ADDR
34905: GO 35328
34907: LD_INT 28
34909: DOUBLE
34910: EQUAL
34911: IFTRUE 34915
34913: GO 34933
34915: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34916: LD_ADDR_VAR 0 3
34920: PUSH
34921: LD_INT 13
34923: PUSH
34924: LD_INT 14
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: ST_TO_ADDR
34931: GO 35328
34933: LD_INT 29
34935: DOUBLE
34936: EQUAL
34937: IFTRUE 34941
34939: GO 34959
34941: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34942: LD_ADDR_VAR 0 3
34946: PUSH
34947: LD_INT 13
34949: PUSH
34950: LD_INT 14
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: ST_TO_ADDR
34957: GO 35328
34959: LD_INT 31
34961: DOUBLE
34962: EQUAL
34963: IFTRUE 34967
34965: GO 34985
34967: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34968: LD_ADDR_VAR 0 3
34972: PUSH
34973: LD_INT 13
34975: PUSH
34976: LD_INT 14
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: ST_TO_ADDR
34983: GO 35328
34985: LD_INT 26
34987: DOUBLE
34988: EQUAL
34989: IFTRUE 34993
34991: GO 35011
34993: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34994: LD_ADDR_VAR 0 3
34998: PUSH
34999: LD_INT 13
35001: PUSH
35002: LD_INT 14
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: ST_TO_ADDR
35009: GO 35328
35011: LD_INT 42
35013: DOUBLE
35014: EQUAL
35015: IFTRUE 35019
35017: GO 35045
35019: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35020: LD_ADDR_VAR 0 3
35024: PUSH
35025: LD_INT 21
35027: PUSH
35028: LD_INT 22
35030: PUSH
35031: LD_INT 23
35033: PUSH
35034: LD_INT 24
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: ST_TO_ADDR
35043: GO 35328
35045: LD_INT 43
35047: DOUBLE
35048: EQUAL
35049: IFTRUE 35053
35051: GO 35079
35053: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35054: LD_ADDR_VAR 0 3
35058: PUSH
35059: LD_INT 21
35061: PUSH
35062: LD_INT 22
35064: PUSH
35065: LD_INT 23
35067: PUSH
35068: LD_INT 24
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: ST_TO_ADDR
35077: GO 35328
35079: LD_INT 44
35081: DOUBLE
35082: EQUAL
35083: IFTRUE 35087
35085: GO 35113
35087: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35088: LD_ADDR_VAR 0 3
35092: PUSH
35093: LD_INT 21
35095: PUSH
35096: LD_INT 22
35098: PUSH
35099: LD_INT 23
35101: PUSH
35102: LD_INT 24
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: ST_TO_ADDR
35111: GO 35328
35113: LD_INT 45
35115: DOUBLE
35116: EQUAL
35117: IFTRUE 35121
35119: GO 35147
35121: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35122: LD_ADDR_VAR 0 3
35126: PUSH
35127: LD_INT 21
35129: PUSH
35130: LD_INT 22
35132: PUSH
35133: LD_INT 23
35135: PUSH
35136: LD_INT 24
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: ST_TO_ADDR
35145: GO 35328
35147: LD_INT 49
35149: DOUBLE
35150: EQUAL
35151: IFTRUE 35155
35153: GO 35181
35155: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35156: LD_ADDR_VAR 0 3
35160: PUSH
35161: LD_INT 21
35163: PUSH
35164: LD_INT 22
35166: PUSH
35167: LD_INT 23
35169: PUSH
35170: LD_INT 24
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: ST_TO_ADDR
35179: GO 35328
35181: LD_INT 51
35183: DOUBLE
35184: EQUAL
35185: IFTRUE 35189
35187: GO 35215
35189: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35190: LD_ADDR_VAR 0 3
35194: PUSH
35195: LD_INT 21
35197: PUSH
35198: LD_INT 22
35200: PUSH
35201: LD_INT 23
35203: PUSH
35204: LD_INT 24
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: ST_TO_ADDR
35213: GO 35328
35215: LD_INT 52
35217: DOUBLE
35218: EQUAL
35219: IFTRUE 35223
35221: GO 35249
35223: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35224: LD_ADDR_VAR 0 3
35228: PUSH
35229: LD_INT 21
35231: PUSH
35232: LD_INT 22
35234: PUSH
35235: LD_INT 23
35237: PUSH
35238: LD_INT 24
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: ST_TO_ADDR
35247: GO 35328
35249: LD_INT 53
35251: DOUBLE
35252: EQUAL
35253: IFTRUE 35257
35255: GO 35275
35257: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35258: LD_ADDR_VAR 0 3
35262: PUSH
35263: LD_INT 23
35265: PUSH
35266: LD_INT 24
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: ST_TO_ADDR
35273: GO 35328
35275: LD_INT 46
35277: DOUBLE
35278: EQUAL
35279: IFTRUE 35283
35281: GO 35301
35283: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35284: LD_ADDR_VAR 0 3
35288: PUSH
35289: LD_INT 23
35291: PUSH
35292: LD_INT 24
35294: PUSH
35295: EMPTY
35296: LIST
35297: LIST
35298: ST_TO_ADDR
35299: GO 35328
35301: LD_INT 47
35303: DOUBLE
35304: EQUAL
35305: IFTRUE 35309
35307: GO 35327
35309: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35310: LD_ADDR_VAR 0 3
35314: PUSH
35315: LD_INT 23
35317: PUSH
35318: LD_INT 24
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: ST_TO_ADDR
35325: GO 35328
35327: POP
// result := ( chassis in result ) ;
35328: LD_ADDR_VAR 0 3
35332: PUSH
35333: LD_VAR 0 1
35337: PUSH
35338: LD_VAR 0 3
35342: IN
35343: ST_TO_ADDR
// end ;
35344: LD_VAR 0 3
35348: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35349: LD_INT 0
35351: PPUSH
35352: PPUSH
35353: PPUSH
35354: PPUSH
35355: PPUSH
35356: PPUSH
35357: PPUSH
// result := array ;
35358: LD_ADDR_VAR 0 5
35362: PUSH
35363: LD_VAR 0 1
35367: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35368: LD_VAR 0 1
35372: NOT
35373: PUSH
35374: LD_VAR 0 2
35378: NOT
35379: OR
35380: PUSH
35381: LD_VAR 0 3
35385: NOT
35386: OR
35387: PUSH
35388: LD_VAR 0 2
35392: PUSH
35393: LD_VAR 0 1
35397: GREATER
35398: OR
35399: PUSH
35400: LD_VAR 0 3
35404: PUSH
35405: LD_VAR 0 1
35409: GREATER
35410: OR
35411: IFFALSE 35415
// exit ;
35413: GO 35711
// if direction then
35415: LD_VAR 0 4
35419: IFFALSE 35483
// begin d := 1 ;
35421: LD_ADDR_VAR 0 9
35425: PUSH
35426: LD_INT 1
35428: ST_TO_ADDR
// if i_from > i_to then
35429: LD_VAR 0 2
35433: PUSH
35434: LD_VAR 0 3
35438: GREATER
35439: IFFALSE 35465
// length := ( array - i_from ) + i_to else
35441: LD_ADDR_VAR 0 11
35445: PUSH
35446: LD_VAR 0 1
35450: PUSH
35451: LD_VAR 0 2
35455: MINUS
35456: PUSH
35457: LD_VAR 0 3
35461: PLUS
35462: ST_TO_ADDR
35463: GO 35481
// length := i_to - i_from ;
35465: LD_ADDR_VAR 0 11
35469: PUSH
35470: LD_VAR 0 3
35474: PUSH
35475: LD_VAR 0 2
35479: MINUS
35480: ST_TO_ADDR
// end else
35481: GO 35544
// begin d := - 1 ;
35483: LD_ADDR_VAR 0 9
35487: PUSH
35488: LD_INT 1
35490: NEG
35491: ST_TO_ADDR
// if i_from > i_to then
35492: LD_VAR 0 2
35496: PUSH
35497: LD_VAR 0 3
35501: GREATER
35502: IFFALSE 35522
// length := i_from - i_to else
35504: LD_ADDR_VAR 0 11
35508: PUSH
35509: LD_VAR 0 2
35513: PUSH
35514: LD_VAR 0 3
35518: MINUS
35519: ST_TO_ADDR
35520: GO 35544
// length := ( array - i_to ) + i_from ;
35522: LD_ADDR_VAR 0 11
35526: PUSH
35527: LD_VAR 0 1
35531: PUSH
35532: LD_VAR 0 3
35536: MINUS
35537: PUSH
35538: LD_VAR 0 2
35542: PLUS
35543: ST_TO_ADDR
// end ; if not length then
35544: LD_VAR 0 11
35548: NOT
35549: IFFALSE 35553
// exit ;
35551: GO 35711
// tmp := array ;
35553: LD_ADDR_VAR 0 10
35557: PUSH
35558: LD_VAR 0 1
35562: ST_TO_ADDR
// for i = 1 to length do
35563: LD_ADDR_VAR 0 6
35567: PUSH
35568: DOUBLE
35569: LD_INT 1
35571: DEC
35572: ST_TO_ADDR
35573: LD_VAR 0 11
35577: PUSH
35578: FOR_TO
35579: IFFALSE 35699
// begin for j = 1 to array do
35581: LD_ADDR_VAR 0 7
35585: PUSH
35586: DOUBLE
35587: LD_INT 1
35589: DEC
35590: ST_TO_ADDR
35591: LD_VAR 0 1
35595: PUSH
35596: FOR_TO
35597: IFFALSE 35685
// begin k := j + d ;
35599: LD_ADDR_VAR 0 8
35603: PUSH
35604: LD_VAR 0 7
35608: PUSH
35609: LD_VAR 0 9
35613: PLUS
35614: ST_TO_ADDR
// if k > array then
35615: LD_VAR 0 8
35619: PUSH
35620: LD_VAR 0 1
35624: GREATER
35625: IFFALSE 35635
// k := 1 ;
35627: LD_ADDR_VAR 0 8
35631: PUSH
35632: LD_INT 1
35634: ST_TO_ADDR
// if not k then
35635: LD_VAR 0 8
35639: NOT
35640: IFFALSE 35652
// k := array ;
35642: LD_ADDR_VAR 0 8
35646: PUSH
35647: LD_VAR 0 1
35651: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35652: LD_ADDR_VAR 0 10
35656: PUSH
35657: LD_VAR 0 10
35661: PPUSH
35662: LD_VAR 0 8
35666: PPUSH
35667: LD_VAR 0 1
35671: PUSH
35672: LD_VAR 0 7
35676: ARRAY
35677: PPUSH
35678: CALL_OW 1
35682: ST_TO_ADDR
// end ;
35683: GO 35596
35685: POP
35686: POP
// array := tmp ;
35687: LD_ADDR_VAR 0 1
35691: PUSH
35692: LD_VAR 0 10
35696: ST_TO_ADDR
// end ;
35697: GO 35578
35699: POP
35700: POP
// result := array ;
35701: LD_ADDR_VAR 0 5
35705: PUSH
35706: LD_VAR 0 1
35710: ST_TO_ADDR
// end ;
35711: LD_VAR 0 5
35715: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35716: LD_INT 0
35718: PPUSH
35719: PPUSH
// result := 0 ;
35720: LD_ADDR_VAR 0 3
35724: PUSH
35725: LD_INT 0
35727: ST_TO_ADDR
// if not array or not value in array then
35728: LD_VAR 0 1
35732: NOT
35733: PUSH
35734: LD_VAR 0 2
35738: PUSH
35739: LD_VAR 0 1
35743: IN
35744: NOT
35745: OR
35746: IFFALSE 35750
// exit ;
35748: GO 35804
// for i = 1 to array do
35750: LD_ADDR_VAR 0 4
35754: PUSH
35755: DOUBLE
35756: LD_INT 1
35758: DEC
35759: ST_TO_ADDR
35760: LD_VAR 0 1
35764: PUSH
35765: FOR_TO
35766: IFFALSE 35802
// if value = array [ i ] then
35768: LD_VAR 0 2
35772: PUSH
35773: LD_VAR 0 1
35777: PUSH
35778: LD_VAR 0 4
35782: ARRAY
35783: EQUAL
35784: IFFALSE 35800
// begin result := i ;
35786: LD_ADDR_VAR 0 3
35790: PUSH
35791: LD_VAR 0 4
35795: ST_TO_ADDR
// exit ;
35796: POP
35797: POP
35798: GO 35804
// end ;
35800: GO 35765
35802: POP
35803: POP
// end ;
35804: LD_VAR 0 3
35808: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35809: LD_INT 0
35811: PPUSH
// vc_chassis := chassis ;
35812: LD_ADDR_OWVAR 37
35816: PUSH
35817: LD_VAR 0 1
35821: ST_TO_ADDR
// vc_engine := engine ;
35822: LD_ADDR_OWVAR 39
35826: PUSH
35827: LD_VAR 0 2
35831: ST_TO_ADDR
// vc_control := control ;
35832: LD_ADDR_OWVAR 38
35836: PUSH
35837: LD_VAR 0 3
35841: ST_TO_ADDR
// vc_weapon := weapon ;
35842: LD_ADDR_OWVAR 40
35846: PUSH
35847: LD_VAR 0 4
35851: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35852: LD_ADDR_OWVAR 41
35856: PUSH
35857: LD_VAR 0 5
35861: ST_TO_ADDR
// end ;
35862: LD_VAR 0 6
35866: RET
// export function WantPlant ( unit ) ; var task ; begin
35867: LD_INT 0
35869: PPUSH
35870: PPUSH
// result := false ;
35871: LD_ADDR_VAR 0 2
35875: PUSH
35876: LD_INT 0
35878: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35879: LD_ADDR_VAR 0 3
35883: PUSH
35884: LD_VAR 0 1
35888: PPUSH
35889: CALL_OW 437
35893: ST_TO_ADDR
// if task then
35894: LD_VAR 0 3
35898: IFFALSE 35926
// if task [ 1 ] [ 1 ] = p then
35900: LD_VAR 0 3
35904: PUSH
35905: LD_INT 1
35907: ARRAY
35908: PUSH
35909: LD_INT 1
35911: ARRAY
35912: PUSH
35913: LD_STRING p
35915: EQUAL
35916: IFFALSE 35926
// result := true ;
35918: LD_ADDR_VAR 0 2
35922: PUSH
35923: LD_INT 1
35925: ST_TO_ADDR
// end ;
35926: LD_VAR 0 2
35930: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35931: LD_INT 0
35933: PPUSH
35934: PPUSH
35935: PPUSH
35936: PPUSH
// if pos < 1 then
35937: LD_VAR 0 2
35941: PUSH
35942: LD_INT 1
35944: LESS
35945: IFFALSE 35949
// exit ;
35947: GO 36252
// if pos = 1 then
35949: LD_VAR 0 2
35953: PUSH
35954: LD_INT 1
35956: EQUAL
35957: IFFALSE 35990
// result := Replace ( arr , pos [ 1 ] , value ) else
35959: LD_ADDR_VAR 0 4
35963: PUSH
35964: LD_VAR 0 1
35968: PPUSH
35969: LD_VAR 0 2
35973: PUSH
35974: LD_INT 1
35976: ARRAY
35977: PPUSH
35978: LD_VAR 0 3
35982: PPUSH
35983: CALL_OW 1
35987: ST_TO_ADDR
35988: GO 36252
// begin tmp := arr ;
35990: LD_ADDR_VAR 0 6
35994: PUSH
35995: LD_VAR 0 1
35999: ST_TO_ADDR
// s_arr := [ tmp ] ;
36000: LD_ADDR_VAR 0 7
36004: PUSH
36005: LD_VAR 0 6
36009: PUSH
36010: EMPTY
36011: LIST
36012: ST_TO_ADDR
// for i = 1 to pos - 1 do
36013: LD_ADDR_VAR 0 5
36017: PUSH
36018: DOUBLE
36019: LD_INT 1
36021: DEC
36022: ST_TO_ADDR
36023: LD_VAR 0 2
36027: PUSH
36028: LD_INT 1
36030: MINUS
36031: PUSH
36032: FOR_TO
36033: IFFALSE 36078
// begin tmp := tmp [ pos [ i ] ] ;
36035: LD_ADDR_VAR 0 6
36039: PUSH
36040: LD_VAR 0 6
36044: PUSH
36045: LD_VAR 0 2
36049: PUSH
36050: LD_VAR 0 5
36054: ARRAY
36055: ARRAY
36056: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36057: LD_ADDR_VAR 0 7
36061: PUSH
36062: LD_VAR 0 7
36066: PUSH
36067: LD_VAR 0 6
36071: PUSH
36072: EMPTY
36073: LIST
36074: ADD
36075: ST_TO_ADDR
// end ;
36076: GO 36032
36078: POP
36079: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36080: LD_ADDR_VAR 0 6
36084: PUSH
36085: LD_VAR 0 6
36089: PPUSH
36090: LD_VAR 0 2
36094: PUSH
36095: LD_VAR 0 2
36099: ARRAY
36100: PPUSH
36101: LD_VAR 0 3
36105: PPUSH
36106: CALL_OW 1
36110: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36111: LD_ADDR_VAR 0 7
36115: PUSH
36116: LD_VAR 0 7
36120: PPUSH
36121: LD_VAR 0 7
36125: PPUSH
36126: LD_VAR 0 6
36130: PPUSH
36131: CALL_OW 1
36135: ST_TO_ADDR
// for i = s_arr downto 2 do
36136: LD_ADDR_VAR 0 5
36140: PUSH
36141: DOUBLE
36142: LD_VAR 0 7
36146: INC
36147: ST_TO_ADDR
36148: LD_INT 2
36150: PUSH
36151: FOR_DOWNTO
36152: IFFALSE 36236
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36154: LD_ADDR_VAR 0 6
36158: PUSH
36159: LD_VAR 0 7
36163: PUSH
36164: LD_VAR 0 5
36168: PUSH
36169: LD_INT 1
36171: MINUS
36172: ARRAY
36173: PPUSH
36174: LD_VAR 0 2
36178: PUSH
36179: LD_VAR 0 5
36183: PUSH
36184: LD_INT 1
36186: MINUS
36187: ARRAY
36188: PPUSH
36189: LD_VAR 0 7
36193: PUSH
36194: LD_VAR 0 5
36198: ARRAY
36199: PPUSH
36200: CALL_OW 1
36204: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36205: LD_ADDR_VAR 0 7
36209: PUSH
36210: LD_VAR 0 7
36214: PPUSH
36215: LD_VAR 0 5
36219: PUSH
36220: LD_INT 1
36222: MINUS
36223: PPUSH
36224: LD_VAR 0 6
36228: PPUSH
36229: CALL_OW 1
36233: ST_TO_ADDR
// end ;
36234: GO 36151
36236: POP
36237: POP
// result := s_arr [ 1 ] ;
36238: LD_ADDR_VAR 0 4
36242: PUSH
36243: LD_VAR 0 7
36247: PUSH
36248: LD_INT 1
36250: ARRAY
36251: ST_TO_ADDR
// end ; end ;
36252: LD_VAR 0 4
36256: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36257: LD_INT 0
36259: PPUSH
36260: PPUSH
// if not list then
36261: LD_VAR 0 1
36265: NOT
36266: IFFALSE 36270
// exit ;
36268: GO 36361
// i := list [ pos1 ] ;
36270: LD_ADDR_VAR 0 5
36274: PUSH
36275: LD_VAR 0 1
36279: PUSH
36280: LD_VAR 0 2
36284: ARRAY
36285: ST_TO_ADDR
// if not i then
36286: LD_VAR 0 5
36290: NOT
36291: IFFALSE 36295
// exit ;
36293: GO 36361
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36295: LD_ADDR_VAR 0 1
36299: PUSH
36300: LD_VAR 0 1
36304: PPUSH
36305: LD_VAR 0 2
36309: PPUSH
36310: LD_VAR 0 1
36314: PUSH
36315: LD_VAR 0 3
36319: ARRAY
36320: PPUSH
36321: CALL_OW 1
36325: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36326: LD_ADDR_VAR 0 1
36330: PUSH
36331: LD_VAR 0 1
36335: PPUSH
36336: LD_VAR 0 3
36340: PPUSH
36341: LD_VAR 0 5
36345: PPUSH
36346: CALL_OW 1
36350: ST_TO_ADDR
// result := list ;
36351: LD_ADDR_VAR 0 4
36355: PUSH
36356: LD_VAR 0 1
36360: ST_TO_ADDR
// end ;
36361: LD_VAR 0 4
36365: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36366: LD_INT 0
36368: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36369: LD_ADDR_VAR 0 5
36373: PUSH
36374: LD_VAR 0 1
36378: PPUSH
36379: CALL_OW 250
36383: PPUSH
36384: LD_VAR 0 1
36388: PPUSH
36389: CALL_OW 251
36393: PPUSH
36394: LD_VAR 0 2
36398: PPUSH
36399: LD_VAR 0 3
36403: PPUSH
36404: LD_VAR 0 4
36408: PPUSH
36409: CALL 36419 0 5
36413: ST_TO_ADDR
// end ;
36414: LD_VAR 0 5
36418: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36419: LD_INT 0
36421: PPUSH
36422: PPUSH
36423: PPUSH
36424: PPUSH
// if not list then
36425: LD_VAR 0 3
36429: NOT
36430: IFFALSE 36434
// exit ;
36432: GO 36822
// result := [ ] ;
36434: LD_ADDR_VAR 0 6
36438: PUSH
36439: EMPTY
36440: ST_TO_ADDR
// for i in list do
36441: LD_ADDR_VAR 0 7
36445: PUSH
36446: LD_VAR 0 3
36450: PUSH
36451: FOR_IN
36452: IFFALSE 36654
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36454: LD_ADDR_VAR 0 9
36458: PUSH
36459: LD_VAR 0 7
36463: PPUSH
36464: LD_VAR 0 1
36468: PPUSH
36469: LD_VAR 0 2
36473: PPUSH
36474: CALL_OW 297
36478: ST_TO_ADDR
// if not result then
36479: LD_VAR 0 6
36483: NOT
36484: IFFALSE 36510
// result := [ [ i , tmp ] ] else
36486: LD_ADDR_VAR 0 6
36490: PUSH
36491: LD_VAR 0 7
36495: PUSH
36496: LD_VAR 0 9
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: EMPTY
36506: LIST
36507: ST_TO_ADDR
36508: GO 36652
// begin if result [ result ] [ 2 ] < tmp then
36510: LD_VAR 0 6
36514: PUSH
36515: LD_VAR 0 6
36519: ARRAY
36520: PUSH
36521: LD_INT 2
36523: ARRAY
36524: PUSH
36525: LD_VAR 0 9
36529: LESS
36530: IFFALSE 36572
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36532: LD_ADDR_VAR 0 6
36536: PUSH
36537: LD_VAR 0 6
36541: PPUSH
36542: LD_VAR 0 6
36546: PUSH
36547: LD_INT 1
36549: PLUS
36550: PPUSH
36551: LD_VAR 0 7
36555: PUSH
36556: LD_VAR 0 9
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PPUSH
36565: CALL_OW 2
36569: ST_TO_ADDR
36570: GO 36652
// for j = 1 to result do
36572: LD_ADDR_VAR 0 8
36576: PUSH
36577: DOUBLE
36578: LD_INT 1
36580: DEC
36581: ST_TO_ADDR
36582: LD_VAR 0 6
36586: PUSH
36587: FOR_TO
36588: IFFALSE 36650
// begin if tmp < result [ j ] [ 2 ] then
36590: LD_VAR 0 9
36594: PUSH
36595: LD_VAR 0 6
36599: PUSH
36600: LD_VAR 0 8
36604: ARRAY
36605: PUSH
36606: LD_INT 2
36608: ARRAY
36609: LESS
36610: IFFALSE 36648
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36612: LD_ADDR_VAR 0 6
36616: PUSH
36617: LD_VAR 0 6
36621: PPUSH
36622: LD_VAR 0 8
36626: PPUSH
36627: LD_VAR 0 7
36631: PUSH
36632: LD_VAR 0 9
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PPUSH
36641: CALL_OW 2
36645: ST_TO_ADDR
// break ;
36646: GO 36650
// end ; end ;
36648: GO 36587
36650: POP
36651: POP
// end ; end ;
36652: GO 36451
36654: POP
36655: POP
// if result and not asc then
36656: LD_VAR 0 6
36660: PUSH
36661: LD_VAR 0 4
36665: NOT
36666: AND
36667: IFFALSE 36742
// begin tmp := result ;
36669: LD_ADDR_VAR 0 9
36673: PUSH
36674: LD_VAR 0 6
36678: ST_TO_ADDR
// for i = tmp downto 1 do
36679: LD_ADDR_VAR 0 7
36683: PUSH
36684: DOUBLE
36685: LD_VAR 0 9
36689: INC
36690: ST_TO_ADDR
36691: LD_INT 1
36693: PUSH
36694: FOR_DOWNTO
36695: IFFALSE 36740
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36697: LD_ADDR_VAR 0 6
36701: PUSH
36702: LD_VAR 0 6
36706: PPUSH
36707: LD_VAR 0 9
36711: PUSH
36712: LD_VAR 0 7
36716: MINUS
36717: PUSH
36718: LD_INT 1
36720: PLUS
36721: PPUSH
36722: LD_VAR 0 9
36726: PUSH
36727: LD_VAR 0 7
36731: ARRAY
36732: PPUSH
36733: CALL_OW 1
36737: ST_TO_ADDR
36738: GO 36694
36740: POP
36741: POP
// end ; tmp := [ ] ;
36742: LD_ADDR_VAR 0 9
36746: PUSH
36747: EMPTY
36748: ST_TO_ADDR
// if mode then
36749: LD_VAR 0 5
36753: IFFALSE 36822
// begin for i = 1 to result do
36755: LD_ADDR_VAR 0 7
36759: PUSH
36760: DOUBLE
36761: LD_INT 1
36763: DEC
36764: ST_TO_ADDR
36765: LD_VAR 0 6
36769: PUSH
36770: FOR_TO
36771: IFFALSE 36810
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36773: LD_ADDR_VAR 0 9
36777: PUSH
36778: LD_VAR 0 9
36782: PPUSH
36783: LD_VAR 0 7
36787: PPUSH
36788: LD_VAR 0 6
36792: PUSH
36793: LD_VAR 0 7
36797: ARRAY
36798: PUSH
36799: LD_INT 1
36801: ARRAY
36802: PPUSH
36803: CALL_OW 1
36807: ST_TO_ADDR
36808: GO 36770
36810: POP
36811: POP
// result := tmp ;
36812: LD_ADDR_VAR 0 6
36816: PUSH
36817: LD_VAR 0 9
36821: ST_TO_ADDR
// end ; end ;
36822: LD_VAR 0 6
36826: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36827: LD_INT 0
36829: PPUSH
36830: PPUSH
36831: PPUSH
36832: PPUSH
36833: PPUSH
36834: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36835: LD_ADDR_VAR 0 5
36839: PUSH
36840: LD_INT 0
36842: PUSH
36843: LD_INT 0
36845: PUSH
36846: LD_INT 0
36848: PUSH
36849: EMPTY
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: ST_TO_ADDR
// if not x or not y then
36857: LD_VAR 0 2
36861: NOT
36862: PUSH
36863: LD_VAR 0 3
36867: NOT
36868: OR
36869: IFFALSE 36873
// exit ;
36871: GO 38523
// if not range then
36873: LD_VAR 0 4
36877: NOT
36878: IFFALSE 36888
// range := 10 ;
36880: LD_ADDR_VAR 0 4
36884: PUSH
36885: LD_INT 10
36887: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36888: LD_ADDR_VAR 0 8
36892: PUSH
36893: LD_INT 81
36895: PUSH
36896: LD_VAR 0 1
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 92
36907: PUSH
36908: LD_VAR 0 2
36912: PUSH
36913: LD_VAR 0 3
36917: PUSH
36918: LD_VAR 0 4
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 3
36931: PUSH
36932: LD_INT 21
36934: PUSH
36935: LD_INT 3
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: LIST
36950: PPUSH
36951: CALL_OW 69
36955: ST_TO_ADDR
// if not tmp then
36956: LD_VAR 0 8
36960: NOT
36961: IFFALSE 36965
// exit ;
36963: GO 38523
// for i in tmp do
36965: LD_ADDR_VAR 0 6
36969: PUSH
36970: LD_VAR 0 8
36974: PUSH
36975: FOR_IN
36976: IFFALSE 38498
// begin points := [ 0 , 0 , 0 ] ;
36978: LD_ADDR_VAR 0 9
36982: PUSH
36983: LD_INT 0
36985: PUSH
36986: LD_INT 0
36988: PUSH
36989: LD_INT 0
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: LIST
36996: ST_TO_ADDR
// bpoints := 1 ;
36997: LD_ADDR_VAR 0 10
37001: PUSH
37002: LD_INT 1
37004: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37005: LD_VAR 0 6
37009: PPUSH
37010: CALL_OW 247
37014: PUSH
37015: LD_INT 1
37017: DOUBLE
37018: EQUAL
37019: IFTRUE 37023
37021: GO 37601
37023: POP
// begin if GetClass ( i ) = 1 then
37024: LD_VAR 0 6
37028: PPUSH
37029: CALL_OW 257
37033: PUSH
37034: LD_INT 1
37036: EQUAL
37037: IFFALSE 37058
// points := [ 10 , 5 , 3 ] ;
37039: LD_ADDR_VAR 0 9
37043: PUSH
37044: LD_INT 10
37046: PUSH
37047: LD_INT 5
37049: PUSH
37050: LD_INT 3
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: LIST
37057: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37058: LD_VAR 0 6
37062: PPUSH
37063: CALL_OW 257
37067: PUSH
37068: LD_INT 2
37070: PUSH
37071: LD_INT 3
37073: PUSH
37074: LD_INT 4
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: LIST
37081: IN
37082: IFFALSE 37103
// points := [ 3 , 2 , 1 ] ;
37084: LD_ADDR_VAR 0 9
37088: PUSH
37089: LD_INT 3
37091: PUSH
37092: LD_INT 2
37094: PUSH
37095: LD_INT 1
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: LIST
37102: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37103: LD_VAR 0 6
37107: PPUSH
37108: CALL_OW 257
37112: PUSH
37113: LD_INT 5
37115: EQUAL
37116: IFFALSE 37137
// points := [ 130 , 5 , 2 ] ;
37118: LD_ADDR_VAR 0 9
37122: PUSH
37123: LD_INT 130
37125: PUSH
37126: LD_INT 5
37128: PUSH
37129: LD_INT 2
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: LIST
37136: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37137: LD_VAR 0 6
37141: PPUSH
37142: CALL_OW 257
37146: PUSH
37147: LD_INT 8
37149: EQUAL
37150: IFFALSE 37171
// points := [ 35 , 35 , 30 ] ;
37152: LD_ADDR_VAR 0 9
37156: PUSH
37157: LD_INT 35
37159: PUSH
37160: LD_INT 35
37162: PUSH
37163: LD_INT 30
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: LIST
37170: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37171: LD_VAR 0 6
37175: PPUSH
37176: CALL_OW 257
37180: PUSH
37181: LD_INT 9
37183: EQUAL
37184: IFFALSE 37205
// points := [ 20 , 55 , 40 ] ;
37186: LD_ADDR_VAR 0 9
37190: PUSH
37191: LD_INT 20
37193: PUSH
37194: LD_INT 55
37196: PUSH
37197: LD_INT 40
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: LIST
37204: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37205: LD_VAR 0 6
37209: PPUSH
37210: CALL_OW 257
37214: PUSH
37215: LD_INT 12
37217: PUSH
37218: LD_INT 16
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: IN
37225: IFFALSE 37246
// points := [ 5 , 3 , 2 ] ;
37227: LD_ADDR_VAR 0 9
37231: PUSH
37232: LD_INT 5
37234: PUSH
37235: LD_INT 3
37237: PUSH
37238: LD_INT 2
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: LIST
37245: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37246: LD_VAR 0 6
37250: PPUSH
37251: CALL_OW 257
37255: PUSH
37256: LD_INT 17
37258: EQUAL
37259: IFFALSE 37280
// points := [ 100 , 50 , 75 ] ;
37261: LD_ADDR_VAR 0 9
37265: PUSH
37266: LD_INT 100
37268: PUSH
37269: LD_INT 50
37271: PUSH
37272: LD_INT 75
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: LIST
37279: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37280: LD_VAR 0 6
37284: PPUSH
37285: CALL_OW 257
37289: PUSH
37290: LD_INT 15
37292: EQUAL
37293: IFFALSE 37314
// points := [ 10 , 5 , 3 ] ;
37295: LD_ADDR_VAR 0 9
37299: PUSH
37300: LD_INT 10
37302: PUSH
37303: LD_INT 5
37305: PUSH
37306: LD_INT 3
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: LIST
37313: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37314: LD_VAR 0 6
37318: PPUSH
37319: CALL_OW 257
37323: PUSH
37324: LD_INT 14
37326: EQUAL
37327: IFFALSE 37348
// points := [ 10 , 0 , 0 ] ;
37329: LD_ADDR_VAR 0 9
37333: PUSH
37334: LD_INT 10
37336: PUSH
37337: LD_INT 0
37339: PUSH
37340: LD_INT 0
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: LIST
37347: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37348: LD_VAR 0 6
37352: PPUSH
37353: CALL_OW 257
37357: PUSH
37358: LD_INT 11
37360: EQUAL
37361: IFFALSE 37382
// points := [ 30 , 10 , 5 ] ;
37363: LD_ADDR_VAR 0 9
37367: PUSH
37368: LD_INT 30
37370: PUSH
37371: LD_INT 10
37373: PUSH
37374: LD_INT 5
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: LIST
37381: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37382: LD_VAR 0 1
37386: PPUSH
37387: LD_INT 5
37389: PPUSH
37390: CALL_OW 321
37394: PUSH
37395: LD_INT 2
37397: EQUAL
37398: IFFALSE 37415
// bpoints := bpoints * 1.8 ;
37400: LD_ADDR_VAR 0 10
37404: PUSH
37405: LD_VAR 0 10
37409: PUSH
37410: LD_REAL  1.80000000000000E+0000
37413: MUL
37414: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37415: LD_VAR 0 6
37419: PPUSH
37420: CALL_OW 257
37424: PUSH
37425: LD_INT 1
37427: PUSH
37428: LD_INT 2
37430: PUSH
37431: LD_INT 3
37433: PUSH
37434: LD_INT 4
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: IN
37443: PUSH
37444: LD_VAR 0 1
37448: PPUSH
37449: LD_INT 51
37451: PPUSH
37452: CALL_OW 321
37456: PUSH
37457: LD_INT 2
37459: EQUAL
37460: AND
37461: IFFALSE 37478
// bpoints := bpoints * 1.2 ;
37463: LD_ADDR_VAR 0 10
37467: PUSH
37468: LD_VAR 0 10
37472: PUSH
37473: LD_REAL  1.20000000000000E+0000
37476: MUL
37477: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37478: LD_VAR 0 6
37482: PPUSH
37483: CALL_OW 257
37487: PUSH
37488: LD_INT 5
37490: PUSH
37491: LD_INT 7
37493: PUSH
37494: LD_INT 9
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: LIST
37501: IN
37502: PUSH
37503: LD_VAR 0 1
37507: PPUSH
37508: LD_INT 52
37510: PPUSH
37511: CALL_OW 321
37515: PUSH
37516: LD_INT 2
37518: EQUAL
37519: AND
37520: IFFALSE 37537
// bpoints := bpoints * 1.5 ;
37522: LD_ADDR_VAR 0 10
37526: PUSH
37527: LD_VAR 0 10
37531: PUSH
37532: LD_REAL  1.50000000000000E+0000
37535: MUL
37536: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37537: LD_VAR 0 1
37541: PPUSH
37542: LD_INT 66
37544: PPUSH
37545: CALL_OW 321
37549: PUSH
37550: LD_INT 2
37552: EQUAL
37553: IFFALSE 37570
// bpoints := bpoints * 1.1 ;
37555: LD_ADDR_VAR 0 10
37559: PUSH
37560: LD_VAR 0 10
37564: PUSH
37565: LD_REAL  1.10000000000000E+0000
37568: MUL
37569: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37570: LD_ADDR_VAR 0 10
37574: PUSH
37575: LD_VAR 0 10
37579: PUSH
37580: LD_VAR 0 6
37584: PPUSH
37585: LD_INT 1
37587: PPUSH
37588: CALL_OW 259
37592: PUSH
37593: LD_REAL  1.15000000000000E+0000
37596: MUL
37597: MUL
37598: ST_TO_ADDR
// end ; unit_vehicle :
37599: GO 38427
37601: LD_INT 2
37603: DOUBLE
37604: EQUAL
37605: IFTRUE 37609
37607: GO 38415
37609: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37610: LD_VAR 0 6
37614: PPUSH
37615: CALL_OW 264
37619: PUSH
37620: LD_INT 2
37622: PUSH
37623: LD_INT 42
37625: PUSH
37626: LD_INT 24
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: LIST
37633: IN
37634: IFFALSE 37655
// points := [ 25 , 5 , 3 ] ;
37636: LD_ADDR_VAR 0 9
37640: PUSH
37641: LD_INT 25
37643: PUSH
37644: LD_INT 5
37646: PUSH
37647: LD_INT 3
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: LIST
37654: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37655: LD_VAR 0 6
37659: PPUSH
37660: CALL_OW 264
37664: PUSH
37665: LD_INT 4
37667: PUSH
37668: LD_INT 43
37670: PUSH
37671: LD_INT 25
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: LIST
37678: IN
37679: IFFALSE 37700
// points := [ 40 , 15 , 5 ] ;
37681: LD_ADDR_VAR 0 9
37685: PUSH
37686: LD_INT 40
37688: PUSH
37689: LD_INT 15
37691: PUSH
37692: LD_INT 5
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: LIST
37699: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37700: LD_VAR 0 6
37704: PPUSH
37705: CALL_OW 264
37709: PUSH
37710: LD_INT 3
37712: PUSH
37713: LD_INT 23
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: IN
37720: IFFALSE 37741
// points := [ 7 , 25 , 8 ] ;
37722: LD_ADDR_VAR 0 9
37726: PUSH
37727: LD_INT 7
37729: PUSH
37730: LD_INT 25
37732: PUSH
37733: LD_INT 8
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: LIST
37740: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37741: LD_VAR 0 6
37745: PPUSH
37746: CALL_OW 264
37750: PUSH
37751: LD_INT 5
37753: PUSH
37754: LD_INT 27
37756: PUSH
37757: LD_INT 44
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: LIST
37764: IN
37765: IFFALSE 37786
// points := [ 14 , 50 , 16 ] ;
37767: LD_ADDR_VAR 0 9
37771: PUSH
37772: LD_INT 14
37774: PUSH
37775: LD_INT 50
37777: PUSH
37778: LD_INT 16
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: LIST
37785: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37786: LD_VAR 0 6
37790: PPUSH
37791: CALL_OW 264
37795: PUSH
37796: LD_INT 6
37798: PUSH
37799: LD_INT 46
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: IN
37806: IFFALSE 37827
// points := [ 32 , 120 , 70 ] ;
37808: LD_ADDR_VAR 0 9
37812: PUSH
37813: LD_INT 32
37815: PUSH
37816: LD_INT 120
37818: PUSH
37819: LD_INT 70
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: LIST
37826: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37827: LD_VAR 0 6
37831: PPUSH
37832: CALL_OW 264
37836: PUSH
37837: LD_INT 7
37839: PUSH
37840: LD_INT 28
37842: PUSH
37843: LD_INT 45
37845: PUSH
37846: LD_INT 92
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: IN
37855: IFFALSE 37876
// points := [ 35 , 20 , 45 ] ;
37857: LD_ADDR_VAR 0 9
37861: PUSH
37862: LD_INT 35
37864: PUSH
37865: LD_INT 20
37867: PUSH
37868: LD_INT 45
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: LIST
37875: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37876: LD_VAR 0 6
37880: PPUSH
37881: CALL_OW 264
37885: PUSH
37886: LD_INT 47
37888: PUSH
37889: EMPTY
37890: LIST
37891: IN
37892: IFFALSE 37913
// points := [ 67 , 45 , 75 ] ;
37894: LD_ADDR_VAR 0 9
37898: PUSH
37899: LD_INT 67
37901: PUSH
37902: LD_INT 45
37904: PUSH
37905: LD_INT 75
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: LIST
37912: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37913: LD_VAR 0 6
37917: PPUSH
37918: CALL_OW 264
37922: PUSH
37923: LD_INT 26
37925: PUSH
37926: EMPTY
37927: LIST
37928: IN
37929: IFFALSE 37950
// points := [ 120 , 30 , 80 ] ;
37931: LD_ADDR_VAR 0 9
37935: PUSH
37936: LD_INT 120
37938: PUSH
37939: LD_INT 30
37941: PUSH
37942: LD_INT 80
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: LIST
37949: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37950: LD_VAR 0 6
37954: PPUSH
37955: CALL_OW 264
37959: PUSH
37960: LD_INT 22
37962: PUSH
37963: EMPTY
37964: LIST
37965: IN
37966: IFFALSE 37987
// points := [ 40 , 1 , 1 ] ;
37968: LD_ADDR_VAR 0 9
37972: PUSH
37973: LD_INT 40
37975: PUSH
37976: LD_INT 1
37978: PUSH
37979: LD_INT 1
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: LIST
37986: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37987: LD_VAR 0 6
37991: PPUSH
37992: CALL_OW 264
37996: PUSH
37997: LD_INT 29
37999: PUSH
38000: EMPTY
38001: LIST
38002: IN
38003: IFFALSE 38024
// points := [ 70 , 200 , 400 ] ;
38005: LD_ADDR_VAR 0 9
38009: PUSH
38010: LD_INT 70
38012: PUSH
38013: LD_INT 200
38015: PUSH
38016: LD_INT 400
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: LIST
38023: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38024: LD_VAR 0 6
38028: PPUSH
38029: CALL_OW 264
38033: PUSH
38034: LD_INT 14
38036: PUSH
38037: LD_INT 53
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: IN
38044: IFFALSE 38065
// points := [ 40 , 10 , 20 ] ;
38046: LD_ADDR_VAR 0 9
38050: PUSH
38051: LD_INT 40
38053: PUSH
38054: LD_INT 10
38056: PUSH
38057: LD_INT 20
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: LIST
38064: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38065: LD_VAR 0 6
38069: PPUSH
38070: CALL_OW 264
38074: PUSH
38075: LD_INT 9
38077: PUSH
38078: EMPTY
38079: LIST
38080: IN
38081: IFFALSE 38102
// points := [ 5 , 70 , 20 ] ;
38083: LD_ADDR_VAR 0 9
38087: PUSH
38088: LD_INT 5
38090: PUSH
38091: LD_INT 70
38093: PUSH
38094: LD_INT 20
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: LIST
38101: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38102: LD_VAR 0 6
38106: PPUSH
38107: CALL_OW 264
38111: PUSH
38112: LD_INT 10
38114: PUSH
38115: EMPTY
38116: LIST
38117: IN
38118: IFFALSE 38139
// points := [ 35 , 110 , 70 ] ;
38120: LD_ADDR_VAR 0 9
38124: PUSH
38125: LD_INT 35
38127: PUSH
38128: LD_INT 110
38130: PUSH
38131: LD_INT 70
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: LIST
38138: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38139: LD_VAR 0 6
38143: PPUSH
38144: CALL_OW 265
38148: PUSH
38149: LD_INT 25
38151: EQUAL
38152: IFFALSE 38173
// points := [ 80 , 65 , 100 ] ;
38154: LD_ADDR_VAR 0 9
38158: PUSH
38159: LD_INT 80
38161: PUSH
38162: LD_INT 65
38164: PUSH
38165: LD_INT 100
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: LIST
38172: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38173: LD_VAR 0 6
38177: PPUSH
38178: CALL_OW 263
38182: PUSH
38183: LD_INT 1
38185: EQUAL
38186: IFFALSE 38221
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38188: LD_ADDR_VAR 0 10
38192: PUSH
38193: LD_VAR 0 10
38197: PUSH
38198: LD_VAR 0 6
38202: PPUSH
38203: CALL_OW 311
38207: PPUSH
38208: LD_INT 3
38210: PPUSH
38211: CALL_OW 259
38215: PUSH
38216: LD_INT 4
38218: MUL
38219: MUL
38220: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38221: LD_VAR 0 6
38225: PPUSH
38226: CALL_OW 263
38230: PUSH
38231: LD_INT 2
38233: EQUAL
38234: IFFALSE 38285
// begin j := IsControledBy ( i ) ;
38236: LD_ADDR_VAR 0 7
38240: PUSH
38241: LD_VAR 0 6
38245: PPUSH
38246: CALL_OW 312
38250: ST_TO_ADDR
// if j then
38251: LD_VAR 0 7
38255: IFFALSE 38285
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38257: LD_ADDR_VAR 0 10
38261: PUSH
38262: LD_VAR 0 10
38266: PUSH
38267: LD_VAR 0 7
38271: PPUSH
38272: LD_INT 3
38274: PPUSH
38275: CALL_OW 259
38279: PUSH
38280: LD_INT 3
38282: MUL
38283: MUL
38284: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38285: LD_VAR 0 6
38289: PPUSH
38290: CALL_OW 264
38294: PUSH
38295: LD_INT 5
38297: PUSH
38298: LD_INT 6
38300: PUSH
38301: LD_INT 46
38303: PUSH
38304: LD_INT 44
38306: PUSH
38307: LD_INT 47
38309: PUSH
38310: LD_INT 45
38312: PUSH
38313: LD_INT 28
38315: PUSH
38316: LD_INT 7
38318: PUSH
38319: LD_INT 27
38321: PUSH
38322: LD_INT 29
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: IN
38337: PUSH
38338: LD_VAR 0 1
38342: PPUSH
38343: LD_INT 52
38345: PPUSH
38346: CALL_OW 321
38350: PUSH
38351: LD_INT 2
38353: EQUAL
38354: AND
38355: IFFALSE 38372
// bpoints := bpoints * 1.2 ;
38357: LD_ADDR_VAR 0 10
38361: PUSH
38362: LD_VAR 0 10
38366: PUSH
38367: LD_REAL  1.20000000000000E+0000
38370: MUL
38371: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38372: LD_VAR 0 6
38376: PPUSH
38377: CALL_OW 264
38381: PUSH
38382: LD_INT 6
38384: PUSH
38385: LD_INT 46
38387: PUSH
38388: LD_INT 47
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: LIST
38395: IN
38396: IFFALSE 38413
// bpoints := bpoints * 1.2 ;
38398: LD_ADDR_VAR 0 10
38402: PUSH
38403: LD_VAR 0 10
38407: PUSH
38408: LD_REAL  1.20000000000000E+0000
38411: MUL
38412: ST_TO_ADDR
// end ; unit_building :
38413: GO 38427
38415: LD_INT 3
38417: DOUBLE
38418: EQUAL
38419: IFTRUE 38423
38421: GO 38426
38423: POP
// ; end ;
38424: GO 38427
38426: POP
// for j = 1 to 3 do
38427: LD_ADDR_VAR 0 7
38431: PUSH
38432: DOUBLE
38433: LD_INT 1
38435: DEC
38436: ST_TO_ADDR
38437: LD_INT 3
38439: PUSH
38440: FOR_TO
38441: IFFALSE 38494
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38443: LD_ADDR_VAR 0 5
38447: PUSH
38448: LD_VAR 0 5
38452: PPUSH
38453: LD_VAR 0 7
38457: PPUSH
38458: LD_VAR 0 5
38462: PUSH
38463: LD_VAR 0 7
38467: ARRAY
38468: PUSH
38469: LD_VAR 0 9
38473: PUSH
38474: LD_VAR 0 7
38478: ARRAY
38479: PUSH
38480: LD_VAR 0 10
38484: MUL
38485: PLUS
38486: PPUSH
38487: CALL_OW 1
38491: ST_TO_ADDR
38492: GO 38440
38494: POP
38495: POP
// end ;
38496: GO 36975
38498: POP
38499: POP
// result := Replace ( result , 4 , tmp ) ;
38500: LD_ADDR_VAR 0 5
38504: PUSH
38505: LD_VAR 0 5
38509: PPUSH
38510: LD_INT 4
38512: PPUSH
38513: LD_VAR 0 8
38517: PPUSH
38518: CALL_OW 1
38522: ST_TO_ADDR
// end ;
38523: LD_VAR 0 5
38527: RET
// export function DangerAtRange ( unit , range ) ; begin
38528: LD_INT 0
38530: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38531: LD_ADDR_VAR 0 3
38535: PUSH
38536: LD_VAR 0 1
38540: PPUSH
38541: CALL_OW 255
38545: PPUSH
38546: LD_VAR 0 1
38550: PPUSH
38551: CALL_OW 250
38555: PPUSH
38556: LD_VAR 0 1
38560: PPUSH
38561: CALL_OW 251
38565: PPUSH
38566: LD_VAR 0 2
38570: PPUSH
38571: CALL 36827 0 4
38575: ST_TO_ADDR
// end ;
38576: LD_VAR 0 3
38580: RET
// export function DangerInArea ( side , area ) ; begin
38581: LD_INT 0
38583: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38584: LD_ADDR_VAR 0 3
38588: PUSH
38589: LD_VAR 0 2
38593: PPUSH
38594: LD_INT 81
38596: PUSH
38597: LD_VAR 0 1
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PPUSH
38606: CALL_OW 70
38610: ST_TO_ADDR
// end ;
38611: LD_VAR 0 3
38615: RET
// export function IsExtension ( b ) ; begin
38616: LD_INT 0
38618: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38619: LD_ADDR_VAR 0 2
38623: PUSH
38624: LD_VAR 0 1
38628: PUSH
38629: LD_INT 23
38631: PUSH
38632: LD_INT 20
38634: PUSH
38635: LD_INT 22
38637: PUSH
38638: LD_INT 17
38640: PUSH
38641: LD_INT 24
38643: PUSH
38644: LD_INT 21
38646: PUSH
38647: LD_INT 19
38649: PUSH
38650: LD_INT 16
38652: PUSH
38653: LD_INT 25
38655: PUSH
38656: LD_INT 18
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: IN
38671: ST_TO_ADDR
// end ;
38672: LD_VAR 0 2
38676: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38677: LD_INT 0
38679: PPUSH
38680: PPUSH
38681: PPUSH
// result := [ ] ;
38682: LD_ADDR_VAR 0 4
38686: PUSH
38687: EMPTY
38688: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38689: LD_ADDR_VAR 0 5
38693: PUSH
38694: LD_VAR 0 2
38698: PPUSH
38699: LD_INT 21
38701: PUSH
38702: LD_INT 3
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PPUSH
38709: CALL_OW 70
38713: ST_TO_ADDR
// if not tmp then
38714: LD_VAR 0 5
38718: NOT
38719: IFFALSE 38723
// exit ;
38721: GO 38787
// if checkLink then
38723: LD_VAR 0 3
38727: IFFALSE 38777
// begin for i in tmp do
38729: LD_ADDR_VAR 0 6
38733: PUSH
38734: LD_VAR 0 5
38738: PUSH
38739: FOR_IN
38740: IFFALSE 38775
// if GetBase ( i ) <> base then
38742: LD_VAR 0 6
38746: PPUSH
38747: CALL_OW 274
38751: PUSH
38752: LD_VAR 0 1
38756: NONEQUAL
38757: IFFALSE 38773
// ComLinkToBase ( base , i ) ;
38759: LD_VAR 0 1
38763: PPUSH
38764: LD_VAR 0 6
38768: PPUSH
38769: CALL_OW 169
38773: GO 38739
38775: POP
38776: POP
// end ; result := tmp ;
38777: LD_ADDR_VAR 0 4
38781: PUSH
38782: LD_VAR 0 5
38786: ST_TO_ADDR
// end ;
38787: LD_VAR 0 4
38791: RET
// export function ComComplete ( units , b ) ; var i ; begin
38792: LD_INT 0
38794: PPUSH
38795: PPUSH
// if not units then
38796: LD_VAR 0 1
38800: NOT
38801: IFFALSE 38805
// exit ;
38803: GO 38895
// for i in units do
38805: LD_ADDR_VAR 0 4
38809: PUSH
38810: LD_VAR 0 1
38814: PUSH
38815: FOR_IN
38816: IFFALSE 38893
// if BuildingStatus ( b ) = bs_build then
38818: LD_VAR 0 2
38822: PPUSH
38823: CALL_OW 461
38827: PUSH
38828: LD_INT 1
38830: EQUAL
38831: IFFALSE 38891
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38833: LD_VAR 0 4
38837: PPUSH
38838: LD_STRING h
38840: PUSH
38841: LD_VAR 0 2
38845: PPUSH
38846: CALL_OW 250
38850: PUSH
38851: LD_VAR 0 2
38855: PPUSH
38856: CALL_OW 251
38860: PUSH
38861: LD_VAR 0 2
38865: PUSH
38866: LD_INT 0
38868: PUSH
38869: LD_INT 0
38871: PUSH
38872: LD_INT 0
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: PUSH
38884: EMPTY
38885: LIST
38886: PPUSH
38887: CALL_OW 446
38891: GO 38815
38893: POP
38894: POP
// end ;
38895: LD_VAR 0 3
38899: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38900: LD_INT 0
38902: PPUSH
38903: PPUSH
38904: PPUSH
38905: PPUSH
38906: PPUSH
38907: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38908: LD_VAR 0 1
38912: NOT
38913: PUSH
38914: LD_VAR 0 1
38918: PPUSH
38919: CALL_OW 263
38923: PUSH
38924: LD_INT 2
38926: NONEQUAL
38927: OR
38928: IFFALSE 38932
// exit ;
38930: GO 39248
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38932: LD_ADDR_VAR 0 6
38936: PUSH
38937: LD_INT 22
38939: PUSH
38940: LD_VAR 0 1
38944: PPUSH
38945: CALL_OW 255
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 2
38956: PUSH
38957: LD_INT 30
38959: PUSH
38960: LD_INT 36
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 34
38969: PUSH
38970: LD_INT 31
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: LIST
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PPUSH
38986: CALL_OW 69
38990: ST_TO_ADDR
// if not tmp then
38991: LD_VAR 0 6
38995: NOT
38996: IFFALSE 39000
// exit ;
38998: GO 39248
// result := [ ] ;
39000: LD_ADDR_VAR 0 2
39004: PUSH
39005: EMPTY
39006: ST_TO_ADDR
// for i in tmp do
39007: LD_ADDR_VAR 0 3
39011: PUSH
39012: LD_VAR 0 6
39016: PUSH
39017: FOR_IN
39018: IFFALSE 39089
// begin t := UnitsInside ( i ) ;
39020: LD_ADDR_VAR 0 4
39024: PUSH
39025: LD_VAR 0 3
39029: PPUSH
39030: CALL_OW 313
39034: ST_TO_ADDR
// if t then
39035: LD_VAR 0 4
39039: IFFALSE 39087
// for j in t do
39041: LD_ADDR_VAR 0 7
39045: PUSH
39046: LD_VAR 0 4
39050: PUSH
39051: FOR_IN
39052: IFFALSE 39085
// result := Replace ( result , result + 1 , j ) ;
39054: LD_ADDR_VAR 0 2
39058: PUSH
39059: LD_VAR 0 2
39063: PPUSH
39064: LD_VAR 0 2
39068: PUSH
39069: LD_INT 1
39071: PLUS
39072: PPUSH
39073: LD_VAR 0 7
39077: PPUSH
39078: CALL_OW 1
39082: ST_TO_ADDR
39083: GO 39051
39085: POP
39086: POP
// end ;
39087: GO 39017
39089: POP
39090: POP
// if not result then
39091: LD_VAR 0 2
39095: NOT
39096: IFFALSE 39100
// exit ;
39098: GO 39248
// mech := result [ 1 ] ;
39100: LD_ADDR_VAR 0 5
39104: PUSH
39105: LD_VAR 0 2
39109: PUSH
39110: LD_INT 1
39112: ARRAY
39113: ST_TO_ADDR
// if result > 1 then
39114: LD_VAR 0 2
39118: PUSH
39119: LD_INT 1
39121: GREATER
39122: IFFALSE 39234
// begin for i = 2 to result do
39124: LD_ADDR_VAR 0 3
39128: PUSH
39129: DOUBLE
39130: LD_INT 2
39132: DEC
39133: ST_TO_ADDR
39134: LD_VAR 0 2
39138: PUSH
39139: FOR_TO
39140: IFFALSE 39232
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39142: LD_ADDR_VAR 0 4
39146: PUSH
39147: LD_VAR 0 2
39151: PUSH
39152: LD_VAR 0 3
39156: ARRAY
39157: PPUSH
39158: LD_INT 3
39160: PPUSH
39161: CALL_OW 259
39165: PUSH
39166: LD_VAR 0 2
39170: PUSH
39171: LD_VAR 0 3
39175: ARRAY
39176: PPUSH
39177: CALL_OW 432
39181: MINUS
39182: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39183: LD_VAR 0 4
39187: PUSH
39188: LD_VAR 0 5
39192: PPUSH
39193: LD_INT 3
39195: PPUSH
39196: CALL_OW 259
39200: PUSH
39201: LD_VAR 0 5
39205: PPUSH
39206: CALL_OW 432
39210: MINUS
39211: GREATEREQUAL
39212: IFFALSE 39230
// mech := result [ i ] ;
39214: LD_ADDR_VAR 0 5
39218: PUSH
39219: LD_VAR 0 2
39223: PUSH
39224: LD_VAR 0 3
39228: ARRAY
39229: ST_TO_ADDR
// end ;
39230: GO 39139
39232: POP
39233: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39234: LD_VAR 0 1
39238: PPUSH
39239: LD_VAR 0 5
39243: PPUSH
39244: CALL_OW 135
// end ;
39248: LD_VAR 0 2
39252: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39253: LD_INT 0
39255: PPUSH
39256: PPUSH
39257: PPUSH
39258: PPUSH
39259: PPUSH
39260: PPUSH
39261: PPUSH
39262: PPUSH
39263: PPUSH
39264: PPUSH
39265: PPUSH
39266: PPUSH
39267: PPUSH
// result := [ ] ;
39268: LD_ADDR_VAR 0 7
39272: PUSH
39273: EMPTY
39274: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39275: LD_VAR 0 1
39279: PPUSH
39280: CALL_OW 266
39284: PUSH
39285: LD_INT 0
39287: PUSH
39288: LD_INT 1
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: IN
39295: NOT
39296: IFFALSE 39300
// exit ;
39298: GO 40934
// if name then
39300: LD_VAR 0 3
39304: IFFALSE 39320
// SetBName ( base_dep , name ) ;
39306: LD_VAR 0 1
39310: PPUSH
39311: LD_VAR 0 3
39315: PPUSH
39316: CALL_OW 500
// base := GetBase ( base_dep ) ;
39320: LD_ADDR_VAR 0 15
39324: PUSH
39325: LD_VAR 0 1
39329: PPUSH
39330: CALL_OW 274
39334: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39335: LD_ADDR_VAR 0 16
39339: PUSH
39340: LD_VAR 0 1
39344: PPUSH
39345: CALL_OW 255
39349: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39350: LD_ADDR_VAR 0 17
39354: PUSH
39355: LD_VAR 0 1
39359: PPUSH
39360: CALL_OW 248
39364: ST_TO_ADDR
// if sources then
39365: LD_VAR 0 5
39369: IFFALSE 39416
// for i = 1 to 3 do
39371: LD_ADDR_VAR 0 8
39375: PUSH
39376: DOUBLE
39377: LD_INT 1
39379: DEC
39380: ST_TO_ADDR
39381: LD_INT 3
39383: PUSH
39384: FOR_TO
39385: IFFALSE 39414
// AddResourceType ( base , i , sources [ i ] ) ;
39387: LD_VAR 0 15
39391: PPUSH
39392: LD_VAR 0 8
39396: PPUSH
39397: LD_VAR 0 5
39401: PUSH
39402: LD_VAR 0 8
39406: ARRAY
39407: PPUSH
39408: CALL_OW 276
39412: GO 39384
39414: POP
39415: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39416: LD_ADDR_VAR 0 18
39420: PUSH
39421: LD_VAR 0 15
39425: PPUSH
39426: LD_VAR 0 2
39430: PPUSH
39431: LD_INT 1
39433: PPUSH
39434: CALL 38677 0 3
39438: ST_TO_ADDR
// InitHc ;
39439: CALL_OW 19
// InitUc ;
39443: CALL_OW 18
// uc_side := side ;
39447: LD_ADDR_OWVAR 20
39451: PUSH
39452: LD_VAR 0 16
39456: ST_TO_ADDR
// uc_nation := nation ;
39457: LD_ADDR_OWVAR 21
39461: PUSH
39462: LD_VAR 0 17
39466: ST_TO_ADDR
// if buildings then
39467: LD_VAR 0 18
39471: IFFALSE 40793
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39473: LD_ADDR_VAR 0 19
39477: PUSH
39478: LD_VAR 0 18
39482: PPUSH
39483: LD_INT 2
39485: PUSH
39486: LD_INT 30
39488: PUSH
39489: LD_INT 29
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 30
39498: PUSH
39499: LD_INT 30
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: LIST
39510: PPUSH
39511: CALL_OW 72
39515: ST_TO_ADDR
// if tmp then
39516: LD_VAR 0 19
39520: IFFALSE 39568
// for i in tmp do
39522: LD_ADDR_VAR 0 8
39526: PUSH
39527: LD_VAR 0 19
39531: PUSH
39532: FOR_IN
39533: IFFALSE 39566
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39535: LD_VAR 0 8
39539: PPUSH
39540: CALL_OW 250
39544: PPUSH
39545: LD_VAR 0 8
39549: PPUSH
39550: CALL_OW 251
39554: PPUSH
39555: LD_VAR 0 16
39559: PPUSH
39560: CALL_OW 441
39564: GO 39532
39566: POP
39567: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39568: LD_VAR 0 18
39572: PPUSH
39573: LD_INT 2
39575: PUSH
39576: LD_INT 30
39578: PUSH
39579: LD_INT 32
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 30
39588: PUSH
39589: LD_INT 33
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: LIST
39600: PPUSH
39601: CALL_OW 72
39605: IFFALSE 39693
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39607: LD_ADDR_VAR 0 8
39611: PUSH
39612: LD_VAR 0 18
39616: PPUSH
39617: LD_INT 2
39619: PUSH
39620: LD_INT 30
39622: PUSH
39623: LD_INT 32
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 30
39632: PUSH
39633: LD_INT 33
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: LIST
39644: PPUSH
39645: CALL_OW 72
39649: PUSH
39650: FOR_IN
39651: IFFALSE 39691
// begin if not GetBWeapon ( i ) then
39653: LD_VAR 0 8
39657: PPUSH
39658: CALL_OW 269
39662: NOT
39663: IFFALSE 39689
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39665: LD_VAR 0 8
39669: PPUSH
39670: LD_VAR 0 8
39674: PPUSH
39675: LD_VAR 0 2
39679: PPUSH
39680: CALL 40939 0 2
39684: PPUSH
39685: CALL_OW 431
// end ;
39689: GO 39650
39691: POP
39692: POP
// end ; for i = 1 to personel do
39693: LD_ADDR_VAR 0 8
39697: PUSH
39698: DOUBLE
39699: LD_INT 1
39701: DEC
39702: ST_TO_ADDR
39703: LD_VAR 0 6
39707: PUSH
39708: FOR_TO
39709: IFFALSE 40773
// begin if i > 4 then
39711: LD_VAR 0 8
39715: PUSH
39716: LD_INT 4
39718: GREATER
39719: IFFALSE 39723
// break ;
39721: GO 40773
// case i of 1 :
39723: LD_VAR 0 8
39727: PUSH
39728: LD_INT 1
39730: DOUBLE
39731: EQUAL
39732: IFTRUE 39736
39734: GO 39816
39736: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39737: LD_ADDR_VAR 0 12
39741: PUSH
39742: LD_VAR 0 18
39746: PPUSH
39747: LD_INT 22
39749: PUSH
39750: LD_VAR 0 16
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: LD_INT 58
39761: PUSH
39762: EMPTY
39763: LIST
39764: PUSH
39765: LD_INT 2
39767: PUSH
39768: LD_INT 30
39770: PUSH
39771: LD_INT 32
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 30
39780: PUSH
39781: LD_INT 4
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 30
39790: PUSH
39791: LD_INT 5
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: LIST
39808: PPUSH
39809: CALL_OW 72
39813: ST_TO_ADDR
39814: GO 40038
39816: LD_INT 2
39818: DOUBLE
39819: EQUAL
39820: IFTRUE 39824
39822: GO 39886
39824: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39825: LD_ADDR_VAR 0 12
39829: PUSH
39830: LD_VAR 0 18
39834: PPUSH
39835: LD_INT 22
39837: PUSH
39838: LD_VAR 0 16
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 2
39849: PUSH
39850: LD_INT 30
39852: PUSH
39853: LD_INT 0
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 30
39862: PUSH
39863: LD_INT 1
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: LIST
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PPUSH
39879: CALL_OW 72
39883: ST_TO_ADDR
39884: GO 40038
39886: LD_INT 3
39888: DOUBLE
39889: EQUAL
39890: IFTRUE 39894
39892: GO 39956
39894: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39895: LD_ADDR_VAR 0 12
39899: PUSH
39900: LD_VAR 0 18
39904: PPUSH
39905: LD_INT 22
39907: PUSH
39908: LD_VAR 0 16
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 2
39919: PUSH
39920: LD_INT 30
39922: PUSH
39923: LD_INT 2
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 30
39932: PUSH
39933: LD_INT 3
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: LIST
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PPUSH
39949: CALL_OW 72
39953: ST_TO_ADDR
39954: GO 40038
39956: LD_INT 4
39958: DOUBLE
39959: EQUAL
39960: IFTRUE 39964
39962: GO 40037
39964: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39965: LD_ADDR_VAR 0 12
39969: PUSH
39970: LD_VAR 0 18
39974: PPUSH
39975: LD_INT 22
39977: PUSH
39978: LD_VAR 0 16
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 2
39989: PUSH
39990: LD_INT 30
39992: PUSH
39993: LD_INT 6
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 30
40002: PUSH
40003: LD_INT 7
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 30
40012: PUSH
40013: LD_INT 8
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PPUSH
40030: CALL_OW 72
40034: ST_TO_ADDR
40035: GO 40038
40037: POP
// if i = 1 then
40038: LD_VAR 0 8
40042: PUSH
40043: LD_INT 1
40045: EQUAL
40046: IFFALSE 40157
// begin tmp := [ ] ;
40048: LD_ADDR_VAR 0 19
40052: PUSH
40053: EMPTY
40054: ST_TO_ADDR
// for j in f do
40055: LD_ADDR_VAR 0 9
40059: PUSH
40060: LD_VAR 0 12
40064: PUSH
40065: FOR_IN
40066: IFFALSE 40139
// if GetBType ( j ) = b_bunker then
40068: LD_VAR 0 9
40072: PPUSH
40073: CALL_OW 266
40077: PUSH
40078: LD_INT 32
40080: EQUAL
40081: IFFALSE 40108
// tmp := Insert ( tmp , 1 , j ) else
40083: LD_ADDR_VAR 0 19
40087: PUSH
40088: LD_VAR 0 19
40092: PPUSH
40093: LD_INT 1
40095: PPUSH
40096: LD_VAR 0 9
40100: PPUSH
40101: CALL_OW 2
40105: ST_TO_ADDR
40106: GO 40137
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40108: LD_ADDR_VAR 0 19
40112: PUSH
40113: LD_VAR 0 19
40117: PPUSH
40118: LD_VAR 0 19
40122: PUSH
40123: LD_INT 1
40125: PLUS
40126: PPUSH
40127: LD_VAR 0 9
40131: PPUSH
40132: CALL_OW 2
40136: ST_TO_ADDR
40137: GO 40065
40139: POP
40140: POP
// if tmp then
40141: LD_VAR 0 19
40145: IFFALSE 40157
// f := tmp ;
40147: LD_ADDR_VAR 0 12
40151: PUSH
40152: LD_VAR 0 19
40156: ST_TO_ADDR
// end ; x := personel [ i ] ;
40157: LD_ADDR_VAR 0 13
40161: PUSH
40162: LD_VAR 0 6
40166: PUSH
40167: LD_VAR 0 8
40171: ARRAY
40172: ST_TO_ADDR
// if x = - 1 then
40173: LD_VAR 0 13
40177: PUSH
40178: LD_INT 1
40180: NEG
40181: EQUAL
40182: IFFALSE 40391
// begin for j in f do
40184: LD_ADDR_VAR 0 9
40188: PUSH
40189: LD_VAR 0 12
40193: PUSH
40194: FOR_IN
40195: IFFALSE 40387
// repeat InitHc ;
40197: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40201: LD_VAR 0 9
40205: PPUSH
40206: CALL_OW 266
40210: PUSH
40211: LD_INT 5
40213: EQUAL
40214: IFFALSE 40284
// begin if UnitsInside ( j ) < 3 then
40216: LD_VAR 0 9
40220: PPUSH
40221: CALL_OW 313
40225: PUSH
40226: LD_INT 3
40228: LESS
40229: IFFALSE 40265
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40231: LD_INT 0
40233: PPUSH
40234: LD_INT 5
40236: PUSH
40237: LD_INT 8
40239: PUSH
40240: LD_INT 9
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: LIST
40247: PUSH
40248: LD_VAR 0 17
40252: ARRAY
40253: PPUSH
40254: LD_VAR 0 4
40258: PPUSH
40259: CALL_OW 380
40263: GO 40282
// PrepareHuman ( false , i , skill ) ;
40265: LD_INT 0
40267: PPUSH
40268: LD_VAR 0 8
40272: PPUSH
40273: LD_VAR 0 4
40277: PPUSH
40278: CALL_OW 380
// end else
40282: GO 40301
// PrepareHuman ( false , i , skill ) ;
40284: LD_INT 0
40286: PPUSH
40287: LD_VAR 0 8
40291: PPUSH
40292: LD_VAR 0 4
40296: PPUSH
40297: CALL_OW 380
// un := CreateHuman ;
40301: LD_ADDR_VAR 0 14
40305: PUSH
40306: CALL_OW 44
40310: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40311: LD_ADDR_VAR 0 7
40315: PUSH
40316: LD_VAR 0 7
40320: PPUSH
40321: LD_INT 1
40323: PPUSH
40324: LD_VAR 0 14
40328: PPUSH
40329: CALL_OW 2
40333: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40334: LD_VAR 0 14
40338: PPUSH
40339: LD_VAR 0 9
40343: PPUSH
40344: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40348: LD_VAR 0 9
40352: PPUSH
40353: CALL_OW 313
40357: PUSH
40358: LD_INT 6
40360: EQUAL
40361: PUSH
40362: LD_VAR 0 9
40366: PPUSH
40367: CALL_OW 266
40371: PUSH
40372: LD_INT 32
40374: PUSH
40375: LD_INT 31
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: IN
40382: OR
40383: IFFALSE 40197
40385: GO 40194
40387: POP
40388: POP
// end else
40389: GO 40771
// for j = 1 to x do
40391: LD_ADDR_VAR 0 9
40395: PUSH
40396: DOUBLE
40397: LD_INT 1
40399: DEC
40400: ST_TO_ADDR
40401: LD_VAR 0 13
40405: PUSH
40406: FOR_TO
40407: IFFALSE 40769
// begin InitHc ;
40409: CALL_OW 19
// if not f then
40413: LD_VAR 0 12
40417: NOT
40418: IFFALSE 40507
// begin PrepareHuman ( false , i , skill ) ;
40420: LD_INT 0
40422: PPUSH
40423: LD_VAR 0 8
40427: PPUSH
40428: LD_VAR 0 4
40432: PPUSH
40433: CALL_OW 380
// un := CreateHuman ;
40437: LD_ADDR_VAR 0 14
40441: PUSH
40442: CALL_OW 44
40446: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40447: LD_ADDR_VAR 0 7
40451: PUSH
40452: LD_VAR 0 7
40456: PPUSH
40457: LD_INT 1
40459: PPUSH
40460: LD_VAR 0 14
40464: PPUSH
40465: CALL_OW 2
40469: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40470: LD_VAR 0 14
40474: PPUSH
40475: LD_VAR 0 1
40479: PPUSH
40480: CALL_OW 250
40484: PPUSH
40485: LD_VAR 0 1
40489: PPUSH
40490: CALL_OW 251
40494: PPUSH
40495: LD_INT 10
40497: PPUSH
40498: LD_INT 0
40500: PPUSH
40501: CALL_OW 50
// continue ;
40505: GO 40406
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40507: LD_VAR 0 12
40511: PUSH
40512: LD_INT 1
40514: ARRAY
40515: PPUSH
40516: CALL_OW 313
40520: PUSH
40521: LD_VAR 0 12
40525: PUSH
40526: LD_INT 1
40528: ARRAY
40529: PPUSH
40530: CALL_OW 266
40534: PUSH
40535: LD_INT 32
40537: PUSH
40538: LD_INT 31
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: IN
40545: AND
40546: PUSH
40547: LD_VAR 0 12
40551: PUSH
40552: LD_INT 1
40554: ARRAY
40555: PPUSH
40556: CALL_OW 313
40560: PUSH
40561: LD_INT 6
40563: EQUAL
40564: OR
40565: IFFALSE 40585
// f := Delete ( f , 1 ) ;
40567: LD_ADDR_VAR 0 12
40571: PUSH
40572: LD_VAR 0 12
40576: PPUSH
40577: LD_INT 1
40579: PPUSH
40580: CALL_OW 3
40584: ST_TO_ADDR
// if not f then
40585: LD_VAR 0 12
40589: NOT
40590: IFFALSE 40608
// begin x := x + 2 ;
40592: LD_ADDR_VAR 0 13
40596: PUSH
40597: LD_VAR 0 13
40601: PUSH
40602: LD_INT 2
40604: PLUS
40605: ST_TO_ADDR
// continue ;
40606: GO 40406
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40608: LD_VAR 0 12
40612: PUSH
40613: LD_INT 1
40615: ARRAY
40616: PPUSH
40617: CALL_OW 266
40621: PUSH
40622: LD_INT 5
40624: EQUAL
40625: IFFALSE 40699
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40627: LD_VAR 0 12
40631: PUSH
40632: LD_INT 1
40634: ARRAY
40635: PPUSH
40636: CALL_OW 313
40640: PUSH
40641: LD_INT 3
40643: LESS
40644: IFFALSE 40680
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40646: LD_INT 0
40648: PPUSH
40649: LD_INT 5
40651: PUSH
40652: LD_INT 8
40654: PUSH
40655: LD_INT 9
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: LIST
40662: PUSH
40663: LD_VAR 0 17
40667: ARRAY
40668: PPUSH
40669: LD_VAR 0 4
40673: PPUSH
40674: CALL_OW 380
40678: GO 40697
// PrepareHuman ( false , i , skill ) ;
40680: LD_INT 0
40682: PPUSH
40683: LD_VAR 0 8
40687: PPUSH
40688: LD_VAR 0 4
40692: PPUSH
40693: CALL_OW 380
// end else
40697: GO 40716
// PrepareHuman ( false , i , skill ) ;
40699: LD_INT 0
40701: PPUSH
40702: LD_VAR 0 8
40706: PPUSH
40707: LD_VAR 0 4
40711: PPUSH
40712: CALL_OW 380
// un := CreateHuman ;
40716: LD_ADDR_VAR 0 14
40720: PUSH
40721: CALL_OW 44
40725: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40726: LD_ADDR_VAR 0 7
40730: PUSH
40731: LD_VAR 0 7
40735: PPUSH
40736: LD_INT 1
40738: PPUSH
40739: LD_VAR 0 14
40743: PPUSH
40744: CALL_OW 2
40748: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40749: LD_VAR 0 14
40753: PPUSH
40754: LD_VAR 0 12
40758: PUSH
40759: LD_INT 1
40761: ARRAY
40762: PPUSH
40763: CALL_OW 52
// end ;
40767: GO 40406
40769: POP
40770: POP
// end ;
40771: GO 39708
40773: POP
40774: POP
// result := result ^ buildings ;
40775: LD_ADDR_VAR 0 7
40779: PUSH
40780: LD_VAR 0 7
40784: PUSH
40785: LD_VAR 0 18
40789: ADD
40790: ST_TO_ADDR
// end else
40791: GO 40934
// begin for i = 1 to personel do
40793: LD_ADDR_VAR 0 8
40797: PUSH
40798: DOUBLE
40799: LD_INT 1
40801: DEC
40802: ST_TO_ADDR
40803: LD_VAR 0 6
40807: PUSH
40808: FOR_TO
40809: IFFALSE 40932
// begin if i > 4 then
40811: LD_VAR 0 8
40815: PUSH
40816: LD_INT 4
40818: GREATER
40819: IFFALSE 40823
// break ;
40821: GO 40932
// x := personel [ i ] ;
40823: LD_ADDR_VAR 0 13
40827: PUSH
40828: LD_VAR 0 6
40832: PUSH
40833: LD_VAR 0 8
40837: ARRAY
40838: ST_TO_ADDR
// if x = - 1 then
40839: LD_VAR 0 13
40843: PUSH
40844: LD_INT 1
40846: NEG
40847: EQUAL
40848: IFFALSE 40852
// continue ;
40850: GO 40808
// PrepareHuman ( false , i , skill ) ;
40852: LD_INT 0
40854: PPUSH
40855: LD_VAR 0 8
40859: PPUSH
40860: LD_VAR 0 4
40864: PPUSH
40865: CALL_OW 380
// un := CreateHuman ;
40869: LD_ADDR_VAR 0 14
40873: PUSH
40874: CALL_OW 44
40878: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40879: LD_VAR 0 14
40883: PPUSH
40884: LD_VAR 0 1
40888: PPUSH
40889: CALL_OW 250
40893: PPUSH
40894: LD_VAR 0 1
40898: PPUSH
40899: CALL_OW 251
40903: PPUSH
40904: LD_INT 10
40906: PPUSH
40907: LD_INT 0
40909: PPUSH
40910: CALL_OW 50
// result := result ^ un ;
40914: LD_ADDR_VAR 0 7
40918: PUSH
40919: LD_VAR 0 7
40923: PUSH
40924: LD_VAR 0 14
40928: ADD
40929: ST_TO_ADDR
// end ;
40930: GO 40808
40932: POP
40933: POP
// end ; end ;
40934: LD_VAR 0 7
40938: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40939: LD_INT 0
40941: PPUSH
40942: PPUSH
40943: PPUSH
40944: PPUSH
40945: PPUSH
40946: PPUSH
40947: PPUSH
40948: PPUSH
40949: PPUSH
40950: PPUSH
40951: PPUSH
40952: PPUSH
40953: PPUSH
40954: PPUSH
40955: PPUSH
40956: PPUSH
// result := false ;
40957: LD_ADDR_VAR 0 3
40961: PUSH
40962: LD_INT 0
40964: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40965: LD_VAR 0 1
40969: NOT
40970: PUSH
40971: LD_VAR 0 1
40975: PPUSH
40976: CALL_OW 266
40980: PUSH
40981: LD_INT 32
40983: PUSH
40984: LD_INT 33
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: IN
40991: NOT
40992: OR
40993: IFFALSE 40997
// exit ;
40995: GO 42106
// nat := GetNation ( tower ) ;
40997: LD_ADDR_VAR 0 12
41001: PUSH
41002: LD_VAR 0 1
41006: PPUSH
41007: CALL_OW 248
41011: ST_TO_ADDR
// side := GetSide ( tower ) ;
41012: LD_ADDR_VAR 0 16
41016: PUSH
41017: LD_VAR 0 1
41021: PPUSH
41022: CALL_OW 255
41026: ST_TO_ADDR
// x := GetX ( tower ) ;
41027: LD_ADDR_VAR 0 10
41031: PUSH
41032: LD_VAR 0 1
41036: PPUSH
41037: CALL_OW 250
41041: ST_TO_ADDR
// y := GetY ( tower ) ;
41042: LD_ADDR_VAR 0 11
41046: PUSH
41047: LD_VAR 0 1
41051: PPUSH
41052: CALL_OW 251
41056: ST_TO_ADDR
// if not x or not y then
41057: LD_VAR 0 10
41061: NOT
41062: PUSH
41063: LD_VAR 0 11
41067: NOT
41068: OR
41069: IFFALSE 41073
// exit ;
41071: GO 42106
// weapon := 0 ;
41073: LD_ADDR_VAR 0 18
41077: PUSH
41078: LD_INT 0
41080: ST_TO_ADDR
// fac_list := [ ] ;
41081: LD_ADDR_VAR 0 17
41085: PUSH
41086: EMPTY
41087: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41088: LD_ADDR_VAR 0 6
41092: PUSH
41093: LD_VAR 0 1
41097: PPUSH
41098: CALL_OW 274
41102: PPUSH
41103: LD_VAR 0 2
41107: PPUSH
41108: LD_INT 0
41110: PPUSH
41111: CALL 38677 0 3
41115: PPUSH
41116: LD_INT 30
41118: PUSH
41119: LD_INT 3
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PPUSH
41126: CALL_OW 72
41130: ST_TO_ADDR
// if not factories then
41131: LD_VAR 0 6
41135: NOT
41136: IFFALSE 41140
// exit ;
41138: GO 42106
// for i in factories do
41140: LD_ADDR_VAR 0 8
41144: PUSH
41145: LD_VAR 0 6
41149: PUSH
41150: FOR_IN
41151: IFFALSE 41176
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41153: LD_ADDR_VAR 0 17
41157: PUSH
41158: LD_VAR 0 17
41162: PUSH
41163: LD_VAR 0 8
41167: PPUSH
41168: CALL_OW 478
41172: UNION
41173: ST_TO_ADDR
41174: GO 41150
41176: POP
41177: POP
// if not fac_list then
41178: LD_VAR 0 17
41182: NOT
41183: IFFALSE 41187
// exit ;
41185: GO 42106
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41187: LD_ADDR_VAR 0 5
41191: PUSH
41192: LD_INT 4
41194: PUSH
41195: LD_INT 5
41197: PUSH
41198: LD_INT 9
41200: PUSH
41201: LD_INT 10
41203: PUSH
41204: LD_INT 6
41206: PUSH
41207: LD_INT 7
41209: PUSH
41210: LD_INT 11
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 27
41224: PUSH
41225: LD_INT 28
41227: PUSH
41228: LD_INT 26
41230: PUSH
41231: LD_INT 30
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 43
41242: PUSH
41243: LD_INT 44
41245: PUSH
41246: LD_INT 46
41248: PUSH
41249: LD_INT 45
41251: PUSH
41252: LD_INT 47
41254: PUSH
41255: LD_INT 49
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: LIST
41270: PUSH
41271: LD_VAR 0 12
41275: ARRAY
41276: ST_TO_ADDR
// list := list isect fac_list ;
41277: LD_ADDR_VAR 0 5
41281: PUSH
41282: LD_VAR 0 5
41286: PUSH
41287: LD_VAR 0 17
41291: ISECT
41292: ST_TO_ADDR
// if not list then
41293: LD_VAR 0 5
41297: NOT
41298: IFFALSE 41302
// exit ;
41300: GO 42106
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41302: LD_VAR 0 12
41306: PUSH
41307: LD_INT 3
41309: EQUAL
41310: PUSH
41311: LD_INT 49
41313: PUSH
41314: LD_VAR 0 5
41318: IN
41319: AND
41320: PUSH
41321: LD_INT 31
41323: PPUSH
41324: LD_VAR 0 16
41328: PPUSH
41329: CALL_OW 321
41333: PUSH
41334: LD_INT 2
41336: EQUAL
41337: AND
41338: IFFALSE 41398
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41340: LD_INT 22
41342: PUSH
41343: LD_VAR 0 16
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 35
41354: PUSH
41355: LD_INT 49
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 91
41364: PUSH
41365: LD_VAR 0 1
41369: PUSH
41370: LD_INT 10
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: LIST
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: LIST
41382: PPUSH
41383: CALL_OW 69
41387: NOT
41388: IFFALSE 41398
// weapon := ru_time_lapser ;
41390: LD_ADDR_VAR 0 18
41394: PUSH
41395: LD_INT 49
41397: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41398: LD_VAR 0 12
41402: PUSH
41403: LD_INT 1
41405: PUSH
41406: LD_INT 2
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: IN
41413: PUSH
41414: LD_INT 11
41416: PUSH
41417: LD_VAR 0 5
41421: IN
41422: PUSH
41423: LD_INT 30
41425: PUSH
41426: LD_VAR 0 5
41430: IN
41431: OR
41432: AND
41433: PUSH
41434: LD_INT 6
41436: PPUSH
41437: LD_VAR 0 16
41441: PPUSH
41442: CALL_OW 321
41446: PUSH
41447: LD_INT 2
41449: EQUAL
41450: AND
41451: IFFALSE 41616
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41453: LD_INT 22
41455: PUSH
41456: LD_VAR 0 16
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: LD_INT 2
41467: PUSH
41468: LD_INT 35
41470: PUSH
41471: LD_INT 11
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 35
41480: PUSH
41481: LD_INT 30
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 91
41495: PUSH
41496: LD_VAR 0 1
41500: PUSH
41501: LD_INT 18
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: LIST
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: LIST
41513: PPUSH
41514: CALL_OW 69
41518: NOT
41519: PUSH
41520: LD_INT 22
41522: PUSH
41523: LD_VAR 0 16
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 2
41534: PUSH
41535: LD_INT 30
41537: PUSH
41538: LD_INT 32
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 30
41547: PUSH
41548: LD_INT 33
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 91
41562: PUSH
41563: LD_VAR 0 1
41567: PUSH
41568: LD_INT 12
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: LIST
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: LIST
41580: PUSH
41581: EMPTY
41582: LIST
41583: PPUSH
41584: CALL_OW 69
41588: PUSH
41589: LD_INT 2
41591: GREATER
41592: AND
41593: IFFALSE 41616
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41595: LD_ADDR_VAR 0 18
41599: PUSH
41600: LD_INT 11
41602: PUSH
41603: LD_INT 30
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_VAR 0 12
41614: ARRAY
41615: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41616: LD_VAR 0 18
41620: NOT
41621: PUSH
41622: LD_INT 40
41624: PPUSH
41625: LD_VAR 0 16
41629: PPUSH
41630: CALL_OW 321
41634: PUSH
41635: LD_INT 2
41637: EQUAL
41638: AND
41639: PUSH
41640: LD_INT 7
41642: PUSH
41643: LD_VAR 0 5
41647: IN
41648: PUSH
41649: LD_INT 28
41651: PUSH
41652: LD_VAR 0 5
41656: IN
41657: OR
41658: PUSH
41659: LD_INT 45
41661: PUSH
41662: LD_VAR 0 5
41666: IN
41667: OR
41668: AND
41669: IFFALSE 41923
// begin hex := GetHexInfo ( x , y ) ;
41671: LD_ADDR_VAR 0 4
41675: PUSH
41676: LD_VAR 0 10
41680: PPUSH
41681: LD_VAR 0 11
41685: PPUSH
41686: CALL_OW 546
41690: ST_TO_ADDR
// if hex [ 1 ] then
41691: LD_VAR 0 4
41695: PUSH
41696: LD_INT 1
41698: ARRAY
41699: IFFALSE 41703
// exit ;
41701: GO 42106
// height := hex [ 2 ] ;
41703: LD_ADDR_VAR 0 15
41707: PUSH
41708: LD_VAR 0 4
41712: PUSH
41713: LD_INT 2
41715: ARRAY
41716: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41717: LD_ADDR_VAR 0 14
41721: PUSH
41722: LD_INT 0
41724: PUSH
41725: LD_INT 2
41727: PUSH
41728: LD_INT 3
41730: PUSH
41731: LD_INT 5
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: ST_TO_ADDR
// for i in tmp do
41740: LD_ADDR_VAR 0 8
41744: PUSH
41745: LD_VAR 0 14
41749: PUSH
41750: FOR_IN
41751: IFFALSE 41921
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41753: LD_ADDR_VAR 0 9
41757: PUSH
41758: LD_VAR 0 10
41762: PPUSH
41763: LD_VAR 0 8
41767: PPUSH
41768: LD_INT 5
41770: PPUSH
41771: CALL_OW 272
41775: PUSH
41776: LD_VAR 0 11
41780: PPUSH
41781: LD_VAR 0 8
41785: PPUSH
41786: LD_INT 5
41788: PPUSH
41789: CALL_OW 273
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41798: LD_VAR 0 9
41802: PUSH
41803: LD_INT 1
41805: ARRAY
41806: PPUSH
41807: LD_VAR 0 9
41811: PUSH
41812: LD_INT 2
41814: ARRAY
41815: PPUSH
41816: CALL_OW 488
41820: IFFALSE 41919
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41822: LD_ADDR_VAR 0 4
41826: PUSH
41827: LD_VAR 0 9
41831: PUSH
41832: LD_INT 1
41834: ARRAY
41835: PPUSH
41836: LD_VAR 0 9
41840: PUSH
41841: LD_INT 2
41843: ARRAY
41844: PPUSH
41845: CALL_OW 546
41849: ST_TO_ADDR
// if hex [ 1 ] then
41850: LD_VAR 0 4
41854: PUSH
41855: LD_INT 1
41857: ARRAY
41858: IFFALSE 41862
// continue ;
41860: GO 41750
// h := hex [ 2 ] ;
41862: LD_ADDR_VAR 0 13
41866: PUSH
41867: LD_VAR 0 4
41871: PUSH
41872: LD_INT 2
41874: ARRAY
41875: ST_TO_ADDR
// if h + 7 < height then
41876: LD_VAR 0 13
41880: PUSH
41881: LD_INT 7
41883: PLUS
41884: PUSH
41885: LD_VAR 0 15
41889: LESS
41890: IFFALSE 41919
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41892: LD_ADDR_VAR 0 18
41896: PUSH
41897: LD_INT 7
41899: PUSH
41900: LD_INT 28
41902: PUSH
41903: LD_INT 45
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: LIST
41910: PUSH
41911: LD_VAR 0 12
41915: ARRAY
41916: ST_TO_ADDR
// break ;
41917: GO 41921
// end ; end ; end ;
41919: GO 41750
41921: POP
41922: POP
// end ; if not weapon then
41923: LD_VAR 0 18
41927: NOT
41928: IFFALSE 41988
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41930: LD_ADDR_VAR 0 5
41934: PUSH
41935: LD_VAR 0 5
41939: PUSH
41940: LD_INT 11
41942: PUSH
41943: LD_INT 30
41945: PUSH
41946: LD_INT 49
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: LIST
41953: DIFF
41954: ST_TO_ADDR
// if not list then
41955: LD_VAR 0 5
41959: NOT
41960: IFFALSE 41964
// exit ;
41962: GO 42106
// weapon := list [ rand ( 1 , list ) ] ;
41964: LD_ADDR_VAR 0 18
41968: PUSH
41969: LD_VAR 0 5
41973: PUSH
41974: LD_INT 1
41976: PPUSH
41977: LD_VAR 0 5
41981: PPUSH
41982: CALL_OW 12
41986: ARRAY
41987: ST_TO_ADDR
// end ; if weapon then
41988: LD_VAR 0 18
41992: IFFALSE 42106
// begin tmp := CostOfWeapon ( weapon ) ;
41994: LD_ADDR_VAR 0 14
41998: PUSH
41999: LD_VAR 0 18
42003: PPUSH
42004: CALL_OW 451
42008: ST_TO_ADDR
// j := GetBase ( tower ) ;
42009: LD_ADDR_VAR 0 9
42013: PUSH
42014: LD_VAR 0 1
42018: PPUSH
42019: CALL_OW 274
42023: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42024: LD_VAR 0 9
42028: PPUSH
42029: LD_INT 1
42031: PPUSH
42032: CALL_OW 275
42036: PUSH
42037: LD_VAR 0 14
42041: PUSH
42042: LD_INT 1
42044: ARRAY
42045: GREATEREQUAL
42046: PUSH
42047: LD_VAR 0 9
42051: PPUSH
42052: LD_INT 2
42054: PPUSH
42055: CALL_OW 275
42059: PUSH
42060: LD_VAR 0 14
42064: PUSH
42065: LD_INT 2
42067: ARRAY
42068: GREATEREQUAL
42069: AND
42070: PUSH
42071: LD_VAR 0 9
42075: PPUSH
42076: LD_INT 3
42078: PPUSH
42079: CALL_OW 275
42083: PUSH
42084: LD_VAR 0 14
42088: PUSH
42089: LD_INT 3
42091: ARRAY
42092: GREATEREQUAL
42093: AND
42094: IFFALSE 42106
// result := weapon ;
42096: LD_ADDR_VAR 0 3
42100: PUSH
42101: LD_VAR 0 18
42105: ST_TO_ADDR
// end ; end ;
42106: LD_VAR 0 3
42110: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42111: LD_INT 0
42113: PPUSH
42114: PPUSH
// result := true ;
42115: LD_ADDR_VAR 0 3
42119: PUSH
42120: LD_INT 1
42122: ST_TO_ADDR
// if array1 = array2 then
42123: LD_VAR 0 1
42127: PUSH
42128: LD_VAR 0 2
42132: EQUAL
42133: IFFALSE 42193
// begin for i = 1 to array1 do
42135: LD_ADDR_VAR 0 4
42139: PUSH
42140: DOUBLE
42141: LD_INT 1
42143: DEC
42144: ST_TO_ADDR
42145: LD_VAR 0 1
42149: PUSH
42150: FOR_TO
42151: IFFALSE 42189
// if array1 [ i ] <> array2 [ i ] then
42153: LD_VAR 0 1
42157: PUSH
42158: LD_VAR 0 4
42162: ARRAY
42163: PUSH
42164: LD_VAR 0 2
42168: PUSH
42169: LD_VAR 0 4
42173: ARRAY
42174: NONEQUAL
42175: IFFALSE 42187
// begin result := false ;
42177: LD_ADDR_VAR 0 3
42181: PUSH
42182: LD_INT 0
42184: ST_TO_ADDR
// break ;
42185: GO 42189
// end ;
42187: GO 42150
42189: POP
42190: POP
// end else
42191: GO 42201
// result := false ;
42193: LD_ADDR_VAR 0 3
42197: PUSH
42198: LD_INT 0
42200: ST_TO_ADDR
// end ;
42201: LD_VAR 0 3
42205: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42206: LD_INT 0
42208: PPUSH
42209: PPUSH
// if not array1 or not array2 then
42210: LD_VAR 0 1
42214: NOT
42215: PUSH
42216: LD_VAR 0 2
42220: NOT
42221: OR
42222: IFFALSE 42226
// exit ;
42224: GO 42290
// result := true ;
42226: LD_ADDR_VAR 0 3
42230: PUSH
42231: LD_INT 1
42233: ST_TO_ADDR
// for i = 1 to array1 do
42234: LD_ADDR_VAR 0 4
42238: PUSH
42239: DOUBLE
42240: LD_INT 1
42242: DEC
42243: ST_TO_ADDR
42244: LD_VAR 0 1
42248: PUSH
42249: FOR_TO
42250: IFFALSE 42288
// if array1 [ i ] <> array2 [ i ] then
42252: LD_VAR 0 1
42256: PUSH
42257: LD_VAR 0 4
42261: ARRAY
42262: PUSH
42263: LD_VAR 0 2
42267: PUSH
42268: LD_VAR 0 4
42272: ARRAY
42273: NONEQUAL
42274: IFFALSE 42286
// begin result := false ;
42276: LD_ADDR_VAR 0 3
42280: PUSH
42281: LD_INT 0
42283: ST_TO_ADDR
// break ;
42284: GO 42288
// end ;
42286: GO 42249
42288: POP
42289: POP
// end ;
42290: LD_VAR 0 3
42294: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42295: LD_INT 0
42297: PPUSH
42298: PPUSH
42299: PPUSH
// pom := GetBase ( fac ) ;
42300: LD_ADDR_VAR 0 5
42304: PUSH
42305: LD_VAR 0 1
42309: PPUSH
42310: CALL_OW 274
42314: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42315: LD_ADDR_VAR 0 4
42319: PUSH
42320: LD_VAR 0 2
42324: PUSH
42325: LD_INT 1
42327: ARRAY
42328: PPUSH
42329: LD_VAR 0 2
42333: PUSH
42334: LD_INT 2
42336: ARRAY
42337: PPUSH
42338: LD_VAR 0 2
42342: PUSH
42343: LD_INT 3
42345: ARRAY
42346: PPUSH
42347: LD_VAR 0 2
42351: PUSH
42352: LD_INT 4
42354: ARRAY
42355: PPUSH
42356: CALL_OW 449
42360: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42361: LD_ADDR_VAR 0 3
42365: PUSH
42366: LD_VAR 0 5
42370: PPUSH
42371: LD_INT 1
42373: PPUSH
42374: CALL_OW 275
42378: PUSH
42379: LD_VAR 0 4
42383: PUSH
42384: LD_INT 1
42386: ARRAY
42387: GREATEREQUAL
42388: PUSH
42389: LD_VAR 0 5
42393: PPUSH
42394: LD_INT 2
42396: PPUSH
42397: CALL_OW 275
42401: PUSH
42402: LD_VAR 0 4
42406: PUSH
42407: LD_INT 2
42409: ARRAY
42410: GREATEREQUAL
42411: AND
42412: PUSH
42413: LD_VAR 0 5
42417: PPUSH
42418: LD_INT 3
42420: PPUSH
42421: CALL_OW 275
42425: PUSH
42426: LD_VAR 0 4
42430: PUSH
42431: LD_INT 3
42433: ARRAY
42434: GREATEREQUAL
42435: AND
42436: ST_TO_ADDR
// end ;
42437: LD_VAR 0 3
42441: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42442: LD_INT 0
42444: PPUSH
42445: PPUSH
42446: PPUSH
42447: PPUSH
// pom := GetBase ( building ) ;
42448: LD_ADDR_VAR 0 3
42452: PUSH
42453: LD_VAR 0 1
42457: PPUSH
42458: CALL_OW 274
42462: ST_TO_ADDR
// if not pom then
42463: LD_VAR 0 3
42467: NOT
42468: IFFALSE 42472
// exit ;
42470: GO 42642
// btype := GetBType ( building ) ;
42472: LD_ADDR_VAR 0 5
42476: PUSH
42477: LD_VAR 0 1
42481: PPUSH
42482: CALL_OW 266
42486: ST_TO_ADDR
// if btype = b_armoury then
42487: LD_VAR 0 5
42491: PUSH
42492: LD_INT 4
42494: EQUAL
42495: IFFALSE 42505
// btype := b_barracks ;
42497: LD_ADDR_VAR 0 5
42501: PUSH
42502: LD_INT 5
42504: ST_TO_ADDR
// if btype = b_depot then
42505: LD_VAR 0 5
42509: PUSH
42510: LD_INT 0
42512: EQUAL
42513: IFFALSE 42523
// btype := b_warehouse ;
42515: LD_ADDR_VAR 0 5
42519: PUSH
42520: LD_INT 1
42522: ST_TO_ADDR
// if btype = b_workshop then
42523: LD_VAR 0 5
42527: PUSH
42528: LD_INT 2
42530: EQUAL
42531: IFFALSE 42541
// btype := b_factory ;
42533: LD_ADDR_VAR 0 5
42537: PUSH
42538: LD_INT 3
42540: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42541: LD_ADDR_VAR 0 4
42545: PUSH
42546: LD_VAR 0 5
42550: PPUSH
42551: LD_VAR 0 1
42555: PPUSH
42556: CALL_OW 248
42560: PPUSH
42561: CALL_OW 450
42565: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42566: LD_ADDR_VAR 0 2
42570: PUSH
42571: LD_VAR 0 3
42575: PPUSH
42576: LD_INT 1
42578: PPUSH
42579: CALL_OW 275
42583: PUSH
42584: LD_VAR 0 4
42588: PUSH
42589: LD_INT 1
42591: ARRAY
42592: GREATEREQUAL
42593: PUSH
42594: LD_VAR 0 3
42598: PPUSH
42599: LD_INT 2
42601: PPUSH
42602: CALL_OW 275
42606: PUSH
42607: LD_VAR 0 4
42611: PUSH
42612: LD_INT 2
42614: ARRAY
42615: GREATEREQUAL
42616: AND
42617: PUSH
42618: LD_VAR 0 3
42622: PPUSH
42623: LD_INT 3
42625: PPUSH
42626: CALL_OW 275
42630: PUSH
42631: LD_VAR 0 4
42635: PUSH
42636: LD_INT 3
42638: ARRAY
42639: GREATEREQUAL
42640: AND
42641: ST_TO_ADDR
// end ;
42642: LD_VAR 0 2
42646: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42647: LD_INT 0
42649: PPUSH
42650: PPUSH
42651: PPUSH
// pom := GetBase ( building ) ;
42652: LD_ADDR_VAR 0 4
42656: PUSH
42657: LD_VAR 0 1
42661: PPUSH
42662: CALL_OW 274
42666: ST_TO_ADDR
// if not pom then
42667: LD_VAR 0 4
42671: NOT
42672: IFFALSE 42676
// exit ;
42674: GO 42777
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42676: LD_ADDR_VAR 0 5
42680: PUSH
42681: LD_VAR 0 2
42685: PPUSH
42686: LD_VAR 0 1
42690: PPUSH
42691: CALL_OW 248
42695: PPUSH
42696: CALL_OW 450
42700: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42701: LD_ADDR_VAR 0 3
42705: PUSH
42706: LD_VAR 0 4
42710: PPUSH
42711: LD_INT 1
42713: PPUSH
42714: CALL_OW 275
42718: PUSH
42719: LD_VAR 0 5
42723: PUSH
42724: LD_INT 1
42726: ARRAY
42727: GREATEREQUAL
42728: PUSH
42729: LD_VAR 0 4
42733: PPUSH
42734: LD_INT 2
42736: PPUSH
42737: CALL_OW 275
42741: PUSH
42742: LD_VAR 0 5
42746: PUSH
42747: LD_INT 2
42749: ARRAY
42750: GREATEREQUAL
42751: AND
42752: PUSH
42753: LD_VAR 0 4
42757: PPUSH
42758: LD_INT 3
42760: PPUSH
42761: CALL_OW 275
42765: PUSH
42766: LD_VAR 0 5
42770: PUSH
42771: LD_INT 3
42773: ARRAY
42774: GREATEREQUAL
42775: AND
42776: ST_TO_ADDR
// end ;
42777: LD_VAR 0 3
42781: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42782: LD_INT 0
42784: PPUSH
42785: PPUSH
42786: PPUSH
42787: PPUSH
42788: PPUSH
42789: PPUSH
42790: PPUSH
42791: PPUSH
42792: PPUSH
42793: PPUSH
42794: PPUSH
// result := false ;
42795: LD_ADDR_VAR 0 8
42799: PUSH
42800: LD_INT 0
42802: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42803: LD_VAR 0 5
42807: NOT
42808: PUSH
42809: LD_VAR 0 1
42813: NOT
42814: OR
42815: PUSH
42816: LD_VAR 0 2
42820: NOT
42821: OR
42822: PUSH
42823: LD_VAR 0 3
42827: NOT
42828: OR
42829: IFFALSE 42833
// exit ;
42831: GO 43647
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42833: LD_ADDR_VAR 0 14
42837: PUSH
42838: LD_VAR 0 1
42842: PPUSH
42843: LD_VAR 0 2
42847: PPUSH
42848: LD_VAR 0 3
42852: PPUSH
42853: LD_VAR 0 4
42857: PPUSH
42858: LD_VAR 0 5
42862: PUSH
42863: LD_INT 1
42865: ARRAY
42866: PPUSH
42867: CALL_OW 248
42871: PPUSH
42872: LD_INT 0
42874: PPUSH
42875: CALL 44880 0 6
42879: ST_TO_ADDR
// if not hexes then
42880: LD_VAR 0 14
42884: NOT
42885: IFFALSE 42889
// exit ;
42887: GO 43647
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42889: LD_ADDR_VAR 0 17
42893: PUSH
42894: LD_VAR 0 5
42898: PPUSH
42899: LD_INT 22
42901: PUSH
42902: LD_VAR 0 13
42906: PPUSH
42907: CALL_OW 255
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 2
42918: PUSH
42919: LD_INT 30
42921: PUSH
42922: LD_INT 0
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 30
42931: PUSH
42932: LD_INT 1
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: LIST
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PPUSH
42948: CALL_OW 72
42952: ST_TO_ADDR
// for i = 1 to hexes do
42953: LD_ADDR_VAR 0 9
42957: PUSH
42958: DOUBLE
42959: LD_INT 1
42961: DEC
42962: ST_TO_ADDR
42963: LD_VAR 0 14
42967: PUSH
42968: FOR_TO
42969: IFFALSE 43645
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42971: LD_ADDR_VAR 0 13
42975: PUSH
42976: LD_VAR 0 14
42980: PUSH
42981: LD_VAR 0 9
42985: ARRAY
42986: PUSH
42987: LD_INT 1
42989: ARRAY
42990: PPUSH
42991: LD_VAR 0 14
42995: PUSH
42996: LD_VAR 0 9
43000: ARRAY
43001: PUSH
43002: LD_INT 2
43004: ARRAY
43005: PPUSH
43006: CALL_OW 428
43010: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43011: LD_VAR 0 14
43015: PUSH
43016: LD_VAR 0 9
43020: ARRAY
43021: PUSH
43022: LD_INT 1
43024: ARRAY
43025: PPUSH
43026: LD_VAR 0 14
43030: PUSH
43031: LD_VAR 0 9
43035: ARRAY
43036: PUSH
43037: LD_INT 2
43039: ARRAY
43040: PPUSH
43041: CALL_OW 351
43045: PUSH
43046: LD_VAR 0 14
43050: PUSH
43051: LD_VAR 0 9
43055: ARRAY
43056: PUSH
43057: LD_INT 1
43059: ARRAY
43060: PPUSH
43061: LD_VAR 0 14
43065: PUSH
43066: LD_VAR 0 9
43070: ARRAY
43071: PUSH
43072: LD_INT 2
43074: ARRAY
43075: PPUSH
43076: CALL_OW 488
43080: NOT
43081: OR
43082: PUSH
43083: LD_VAR 0 13
43087: PPUSH
43088: CALL_OW 247
43092: PUSH
43093: LD_INT 3
43095: EQUAL
43096: OR
43097: IFFALSE 43103
// exit ;
43099: POP
43100: POP
43101: GO 43647
// if not tmp then
43103: LD_VAR 0 13
43107: NOT
43108: IFFALSE 43112
// continue ;
43110: GO 42968
// result := true ;
43112: LD_ADDR_VAR 0 8
43116: PUSH
43117: LD_INT 1
43119: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43120: LD_VAR 0 6
43124: PUSH
43125: LD_VAR 0 13
43129: PPUSH
43130: CALL_OW 247
43134: PUSH
43135: LD_INT 2
43137: EQUAL
43138: AND
43139: PUSH
43140: LD_VAR 0 13
43144: PPUSH
43145: CALL_OW 263
43149: PUSH
43150: LD_INT 1
43152: EQUAL
43153: AND
43154: IFFALSE 43318
// begin if IsDrivenBy ( tmp ) then
43156: LD_VAR 0 13
43160: PPUSH
43161: CALL_OW 311
43165: IFFALSE 43169
// continue ;
43167: GO 42968
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43169: LD_VAR 0 6
43173: PPUSH
43174: LD_INT 3
43176: PUSH
43177: LD_INT 60
43179: PUSH
43180: EMPTY
43181: LIST
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 3
43189: PUSH
43190: LD_INT 55
43192: PUSH
43193: EMPTY
43194: LIST
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PPUSH
43204: CALL_OW 72
43208: IFFALSE 43316
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43210: LD_ADDR_VAR 0 18
43214: PUSH
43215: LD_VAR 0 6
43219: PPUSH
43220: LD_INT 3
43222: PUSH
43223: LD_INT 60
43225: PUSH
43226: EMPTY
43227: LIST
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 3
43235: PUSH
43236: LD_INT 55
43238: PUSH
43239: EMPTY
43240: LIST
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PPUSH
43250: CALL_OW 72
43254: PUSH
43255: LD_INT 1
43257: ARRAY
43258: ST_TO_ADDR
// if IsInUnit ( driver ) then
43259: LD_VAR 0 18
43263: PPUSH
43264: CALL_OW 310
43268: IFFALSE 43279
// ComExit ( driver ) ;
43270: LD_VAR 0 18
43274: PPUSH
43275: CALL 68660 0 1
// AddComEnterUnit ( driver , tmp ) ;
43279: LD_VAR 0 18
43283: PPUSH
43284: LD_VAR 0 13
43288: PPUSH
43289: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43293: LD_VAR 0 18
43297: PPUSH
43298: LD_VAR 0 7
43302: PPUSH
43303: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43307: LD_VAR 0 18
43311: PPUSH
43312: CALL_OW 181
// end ; continue ;
43316: GO 42968
// end ; if not cleaners or not tmp in cleaners then
43318: LD_VAR 0 6
43322: NOT
43323: PUSH
43324: LD_VAR 0 13
43328: PUSH
43329: LD_VAR 0 6
43333: IN
43334: NOT
43335: OR
43336: IFFALSE 43643
// begin if dep then
43338: LD_VAR 0 17
43342: IFFALSE 43478
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43344: LD_ADDR_VAR 0 16
43348: PUSH
43349: LD_VAR 0 17
43353: PUSH
43354: LD_INT 1
43356: ARRAY
43357: PPUSH
43358: CALL_OW 250
43362: PPUSH
43363: LD_VAR 0 17
43367: PUSH
43368: LD_INT 1
43370: ARRAY
43371: PPUSH
43372: CALL_OW 254
43376: PPUSH
43377: LD_INT 5
43379: PPUSH
43380: CALL_OW 272
43384: PUSH
43385: LD_VAR 0 17
43389: PUSH
43390: LD_INT 1
43392: ARRAY
43393: PPUSH
43394: CALL_OW 251
43398: PPUSH
43399: LD_VAR 0 17
43403: PUSH
43404: LD_INT 1
43406: ARRAY
43407: PPUSH
43408: CALL_OW 254
43412: PPUSH
43413: LD_INT 5
43415: PPUSH
43416: CALL_OW 273
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43425: LD_VAR 0 16
43429: PUSH
43430: LD_INT 1
43432: ARRAY
43433: PPUSH
43434: LD_VAR 0 16
43438: PUSH
43439: LD_INT 2
43441: ARRAY
43442: PPUSH
43443: CALL_OW 488
43447: IFFALSE 43478
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43449: LD_VAR 0 13
43453: PPUSH
43454: LD_VAR 0 16
43458: PUSH
43459: LD_INT 1
43461: ARRAY
43462: PPUSH
43463: LD_VAR 0 16
43467: PUSH
43468: LD_INT 2
43470: ARRAY
43471: PPUSH
43472: CALL_OW 111
// continue ;
43476: GO 42968
// end ; end ; r := GetDir ( tmp ) ;
43478: LD_ADDR_VAR 0 15
43482: PUSH
43483: LD_VAR 0 13
43487: PPUSH
43488: CALL_OW 254
43492: ST_TO_ADDR
// if r = 5 then
43493: LD_VAR 0 15
43497: PUSH
43498: LD_INT 5
43500: EQUAL
43501: IFFALSE 43511
// r := 0 ;
43503: LD_ADDR_VAR 0 15
43507: PUSH
43508: LD_INT 0
43510: ST_TO_ADDR
// for j = r to 5 do
43511: LD_ADDR_VAR 0 10
43515: PUSH
43516: DOUBLE
43517: LD_VAR 0 15
43521: DEC
43522: ST_TO_ADDR
43523: LD_INT 5
43525: PUSH
43526: FOR_TO
43527: IFFALSE 43641
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43529: LD_ADDR_VAR 0 11
43533: PUSH
43534: LD_VAR 0 13
43538: PPUSH
43539: CALL_OW 250
43543: PPUSH
43544: LD_VAR 0 10
43548: PPUSH
43549: LD_INT 2
43551: PPUSH
43552: CALL_OW 272
43556: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43557: LD_ADDR_VAR 0 12
43561: PUSH
43562: LD_VAR 0 13
43566: PPUSH
43567: CALL_OW 251
43571: PPUSH
43572: LD_VAR 0 10
43576: PPUSH
43577: LD_INT 2
43579: PPUSH
43580: CALL_OW 273
43584: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43585: LD_VAR 0 11
43589: PPUSH
43590: LD_VAR 0 12
43594: PPUSH
43595: CALL_OW 488
43599: PUSH
43600: LD_VAR 0 11
43604: PPUSH
43605: LD_VAR 0 12
43609: PPUSH
43610: CALL_OW 428
43614: NOT
43615: AND
43616: IFFALSE 43639
// begin ComMoveXY ( tmp , _x , _y ) ;
43618: LD_VAR 0 13
43622: PPUSH
43623: LD_VAR 0 11
43627: PPUSH
43628: LD_VAR 0 12
43632: PPUSH
43633: CALL_OW 111
// break ;
43637: GO 43641
// end ; end ;
43639: GO 43526
43641: POP
43642: POP
// end ; end ;
43643: GO 42968
43645: POP
43646: POP
// end ;
43647: LD_VAR 0 8
43651: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43652: LD_INT 0
43654: PPUSH
// result := true ;
43655: LD_ADDR_VAR 0 3
43659: PUSH
43660: LD_INT 1
43662: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43663: LD_VAR 0 2
43667: PUSH
43668: LD_INT 24
43670: DOUBLE
43671: EQUAL
43672: IFTRUE 43682
43674: LD_INT 33
43676: DOUBLE
43677: EQUAL
43678: IFTRUE 43682
43680: GO 43707
43682: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43683: LD_ADDR_VAR 0 3
43687: PUSH
43688: LD_INT 32
43690: PPUSH
43691: LD_VAR 0 1
43695: PPUSH
43696: CALL_OW 321
43700: PUSH
43701: LD_INT 2
43703: EQUAL
43704: ST_TO_ADDR
43705: GO 44023
43707: LD_INT 20
43709: DOUBLE
43710: EQUAL
43711: IFTRUE 43715
43713: GO 43740
43715: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43716: LD_ADDR_VAR 0 3
43720: PUSH
43721: LD_INT 6
43723: PPUSH
43724: LD_VAR 0 1
43728: PPUSH
43729: CALL_OW 321
43733: PUSH
43734: LD_INT 2
43736: EQUAL
43737: ST_TO_ADDR
43738: GO 44023
43740: LD_INT 22
43742: DOUBLE
43743: EQUAL
43744: IFTRUE 43754
43746: LD_INT 36
43748: DOUBLE
43749: EQUAL
43750: IFTRUE 43754
43752: GO 43779
43754: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43755: LD_ADDR_VAR 0 3
43759: PUSH
43760: LD_INT 15
43762: PPUSH
43763: LD_VAR 0 1
43767: PPUSH
43768: CALL_OW 321
43772: PUSH
43773: LD_INT 2
43775: EQUAL
43776: ST_TO_ADDR
43777: GO 44023
43779: LD_INT 30
43781: DOUBLE
43782: EQUAL
43783: IFTRUE 43787
43785: GO 43812
43787: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43788: LD_ADDR_VAR 0 3
43792: PUSH
43793: LD_INT 20
43795: PPUSH
43796: LD_VAR 0 1
43800: PPUSH
43801: CALL_OW 321
43805: PUSH
43806: LD_INT 2
43808: EQUAL
43809: ST_TO_ADDR
43810: GO 44023
43812: LD_INT 28
43814: DOUBLE
43815: EQUAL
43816: IFTRUE 43826
43818: LD_INT 21
43820: DOUBLE
43821: EQUAL
43822: IFTRUE 43826
43824: GO 43851
43826: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43827: LD_ADDR_VAR 0 3
43831: PUSH
43832: LD_INT 21
43834: PPUSH
43835: LD_VAR 0 1
43839: PPUSH
43840: CALL_OW 321
43844: PUSH
43845: LD_INT 2
43847: EQUAL
43848: ST_TO_ADDR
43849: GO 44023
43851: LD_INT 16
43853: DOUBLE
43854: EQUAL
43855: IFTRUE 43859
43857: GO 43884
43859: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43860: LD_ADDR_VAR 0 3
43864: PUSH
43865: LD_INT 84
43867: PPUSH
43868: LD_VAR 0 1
43872: PPUSH
43873: CALL_OW 321
43877: PUSH
43878: LD_INT 2
43880: EQUAL
43881: ST_TO_ADDR
43882: GO 44023
43884: LD_INT 19
43886: DOUBLE
43887: EQUAL
43888: IFTRUE 43898
43890: LD_INT 23
43892: DOUBLE
43893: EQUAL
43894: IFTRUE 43898
43896: GO 43923
43898: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43899: LD_ADDR_VAR 0 3
43903: PUSH
43904: LD_INT 83
43906: PPUSH
43907: LD_VAR 0 1
43911: PPUSH
43912: CALL_OW 321
43916: PUSH
43917: LD_INT 2
43919: EQUAL
43920: ST_TO_ADDR
43921: GO 44023
43923: LD_INT 17
43925: DOUBLE
43926: EQUAL
43927: IFTRUE 43931
43929: GO 43956
43931: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43932: LD_ADDR_VAR 0 3
43936: PUSH
43937: LD_INT 39
43939: PPUSH
43940: LD_VAR 0 1
43944: PPUSH
43945: CALL_OW 321
43949: PUSH
43950: LD_INT 2
43952: EQUAL
43953: ST_TO_ADDR
43954: GO 44023
43956: LD_INT 18
43958: DOUBLE
43959: EQUAL
43960: IFTRUE 43964
43962: GO 43989
43964: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43965: LD_ADDR_VAR 0 3
43969: PUSH
43970: LD_INT 40
43972: PPUSH
43973: LD_VAR 0 1
43977: PPUSH
43978: CALL_OW 321
43982: PUSH
43983: LD_INT 2
43985: EQUAL
43986: ST_TO_ADDR
43987: GO 44023
43989: LD_INT 27
43991: DOUBLE
43992: EQUAL
43993: IFTRUE 43997
43995: GO 44022
43997: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43998: LD_ADDR_VAR 0 3
44002: PUSH
44003: LD_INT 35
44005: PPUSH
44006: LD_VAR 0 1
44010: PPUSH
44011: CALL_OW 321
44015: PUSH
44016: LD_INT 2
44018: EQUAL
44019: ST_TO_ADDR
44020: GO 44023
44022: POP
// end ;
44023: LD_VAR 0 3
44027: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44028: LD_INT 0
44030: PPUSH
44031: PPUSH
44032: PPUSH
44033: PPUSH
44034: PPUSH
44035: PPUSH
44036: PPUSH
44037: PPUSH
44038: PPUSH
44039: PPUSH
44040: PPUSH
// result := false ;
44041: LD_ADDR_VAR 0 6
44045: PUSH
44046: LD_INT 0
44048: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44049: LD_VAR 0 1
44053: NOT
44054: PUSH
44055: LD_VAR 0 1
44059: PPUSH
44060: CALL_OW 266
44064: PUSH
44065: LD_INT 0
44067: PUSH
44068: LD_INT 1
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: IN
44075: NOT
44076: OR
44077: PUSH
44078: LD_VAR 0 2
44082: NOT
44083: OR
44084: PUSH
44085: LD_VAR 0 5
44089: PUSH
44090: LD_INT 0
44092: PUSH
44093: LD_INT 1
44095: PUSH
44096: LD_INT 2
44098: PUSH
44099: LD_INT 3
44101: PUSH
44102: LD_INT 4
44104: PUSH
44105: LD_INT 5
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: IN
44116: NOT
44117: OR
44118: PUSH
44119: LD_VAR 0 3
44123: PPUSH
44124: LD_VAR 0 4
44128: PPUSH
44129: CALL_OW 488
44133: NOT
44134: OR
44135: IFFALSE 44139
// exit ;
44137: GO 44875
// side := GetSide ( depot ) ;
44139: LD_ADDR_VAR 0 9
44143: PUSH
44144: LD_VAR 0 1
44148: PPUSH
44149: CALL_OW 255
44153: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44154: LD_VAR 0 9
44158: PPUSH
44159: LD_VAR 0 2
44163: PPUSH
44164: CALL 43652 0 2
44168: NOT
44169: IFFALSE 44173
// exit ;
44171: GO 44875
// pom := GetBase ( depot ) ;
44173: LD_ADDR_VAR 0 10
44177: PUSH
44178: LD_VAR 0 1
44182: PPUSH
44183: CALL_OW 274
44187: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44188: LD_ADDR_VAR 0 11
44192: PUSH
44193: LD_VAR 0 2
44197: PPUSH
44198: LD_VAR 0 1
44202: PPUSH
44203: CALL_OW 248
44207: PPUSH
44208: CALL_OW 450
44212: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44213: LD_VAR 0 10
44217: PPUSH
44218: LD_INT 1
44220: PPUSH
44221: CALL_OW 275
44225: PUSH
44226: LD_VAR 0 11
44230: PUSH
44231: LD_INT 1
44233: ARRAY
44234: GREATEREQUAL
44235: PUSH
44236: LD_VAR 0 10
44240: PPUSH
44241: LD_INT 2
44243: PPUSH
44244: CALL_OW 275
44248: PUSH
44249: LD_VAR 0 11
44253: PUSH
44254: LD_INT 2
44256: ARRAY
44257: GREATEREQUAL
44258: AND
44259: PUSH
44260: LD_VAR 0 10
44264: PPUSH
44265: LD_INT 3
44267: PPUSH
44268: CALL_OW 275
44272: PUSH
44273: LD_VAR 0 11
44277: PUSH
44278: LD_INT 3
44280: ARRAY
44281: GREATEREQUAL
44282: AND
44283: NOT
44284: IFFALSE 44288
// exit ;
44286: GO 44875
// if GetBType ( depot ) = b_depot then
44288: LD_VAR 0 1
44292: PPUSH
44293: CALL_OW 266
44297: PUSH
44298: LD_INT 0
44300: EQUAL
44301: IFFALSE 44313
// dist := 28 else
44303: LD_ADDR_VAR 0 14
44307: PUSH
44308: LD_INT 28
44310: ST_TO_ADDR
44311: GO 44321
// dist := 36 ;
44313: LD_ADDR_VAR 0 14
44317: PUSH
44318: LD_INT 36
44320: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44321: LD_VAR 0 1
44325: PPUSH
44326: LD_VAR 0 3
44330: PPUSH
44331: LD_VAR 0 4
44335: PPUSH
44336: CALL_OW 297
44340: PUSH
44341: LD_VAR 0 14
44345: GREATER
44346: IFFALSE 44350
// exit ;
44348: GO 44875
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44350: LD_ADDR_VAR 0 12
44354: PUSH
44355: LD_VAR 0 2
44359: PPUSH
44360: LD_VAR 0 3
44364: PPUSH
44365: LD_VAR 0 4
44369: PPUSH
44370: LD_VAR 0 5
44374: PPUSH
44375: LD_VAR 0 1
44379: PPUSH
44380: CALL_OW 248
44384: PPUSH
44385: LD_INT 0
44387: PPUSH
44388: CALL 44880 0 6
44392: ST_TO_ADDR
// if not hexes then
44393: LD_VAR 0 12
44397: NOT
44398: IFFALSE 44402
// exit ;
44400: GO 44875
// hex := GetHexInfo ( x , y ) ;
44402: LD_ADDR_VAR 0 15
44406: PUSH
44407: LD_VAR 0 3
44411: PPUSH
44412: LD_VAR 0 4
44416: PPUSH
44417: CALL_OW 546
44421: ST_TO_ADDR
// if hex [ 1 ] then
44422: LD_VAR 0 15
44426: PUSH
44427: LD_INT 1
44429: ARRAY
44430: IFFALSE 44434
// exit ;
44432: GO 44875
// height := hex [ 2 ] ;
44434: LD_ADDR_VAR 0 13
44438: PUSH
44439: LD_VAR 0 15
44443: PUSH
44444: LD_INT 2
44446: ARRAY
44447: ST_TO_ADDR
// for i = 1 to hexes do
44448: LD_ADDR_VAR 0 7
44452: PUSH
44453: DOUBLE
44454: LD_INT 1
44456: DEC
44457: ST_TO_ADDR
44458: LD_VAR 0 12
44462: PUSH
44463: FOR_TO
44464: IFFALSE 44794
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44466: LD_VAR 0 12
44470: PUSH
44471: LD_VAR 0 7
44475: ARRAY
44476: PUSH
44477: LD_INT 1
44479: ARRAY
44480: PPUSH
44481: LD_VAR 0 12
44485: PUSH
44486: LD_VAR 0 7
44490: ARRAY
44491: PUSH
44492: LD_INT 2
44494: ARRAY
44495: PPUSH
44496: CALL_OW 488
44500: NOT
44501: PUSH
44502: LD_VAR 0 12
44506: PUSH
44507: LD_VAR 0 7
44511: ARRAY
44512: PUSH
44513: LD_INT 1
44515: ARRAY
44516: PPUSH
44517: LD_VAR 0 12
44521: PUSH
44522: LD_VAR 0 7
44526: ARRAY
44527: PUSH
44528: LD_INT 2
44530: ARRAY
44531: PPUSH
44532: CALL_OW 428
44536: PUSH
44537: LD_INT 0
44539: GREATER
44540: OR
44541: PUSH
44542: LD_VAR 0 12
44546: PUSH
44547: LD_VAR 0 7
44551: ARRAY
44552: PUSH
44553: LD_INT 1
44555: ARRAY
44556: PPUSH
44557: LD_VAR 0 12
44561: PUSH
44562: LD_VAR 0 7
44566: ARRAY
44567: PUSH
44568: LD_INT 2
44570: ARRAY
44571: PPUSH
44572: CALL_OW 351
44576: OR
44577: IFFALSE 44583
// exit ;
44579: POP
44580: POP
44581: GO 44875
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44583: LD_ADDR_VAR 0 8
44587: PUSH
44588: LD_VAR 0 12
44592: PUSH
44593: LD_VAR 0 7
44597: ARRAY
44598: PUSH
44599: LD_INT 1
44601: ARRAY
44602: PPUSH
44603: LD_VAR 0 12
44607: PUSH
44608: LD_VAR 0 7
44612: ARRAY
44613: PUSH
44614: LD_INT 2
44616: ARRAY
44617: PPUSH
44618: CALL_OW 546
44622: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44623: LD_VAR 0 8
44627: PUSH
44628: LD_INT 1
44630: ARRAY
44631: PUSH
44632: LD_VAR 0 8
44636: PUSH
44637: LD_INT 2
44639: ARRAY
44640: PUSH
44641: LD_VAR 0 13
44645: PUSH
44646: LD_INT 2
44648: PLUS
44649: GREATER
44650: OR
44651: PUSH
44652: LD_VAR 0 8
44656: PUSH
44657: LD_INT 2
44659: ARRAY
44660: PUSH
44661: LD_VAR 0 13
44665: PUSH
44666: LD_INT 2
44668: MINUS
44669: LESS
44670: OR
44671: PUSH
44672: LD_VAR 0 8
44676: PUSH
44677: LD_INT 3
44679: ARRAY
44680: PUSH
44681: LD_INT 0
44683: PUSH
44684: LD_INT 8
44686: PUSH
44687: LD_INT 9
44689: PUSH
44690: LD_INT 10
44692: PUSH
44693: LD_INT 11
44695: PUSH
44696: LD_INT 12
44698: PUSH
44699: LD_INT 13
44701: PUSH
44702: LD_INT 16
44704: PUSH
44705: LD_INT 17
44707: PUSH
44708: LD_INT 18
44710: PUSH
44711: LD_INT 19
44713: PUSH
44714: LD_INT 20
44716: PUSH
44717: LD_INT 21
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: IN
44735: NOT
44736: OR
44737: PUSH
44738: LD_VAR 0 8
44742: PUSH
44743: LD_INT 5
44745: ARRAY
44746: NOT
44747: OR
44748: PUSH
44749: LD_VAR 0 8
44753: PUSH
44754: LD_INT 6
44756: ARRAY
44757: PUSH
44758: LD_INT 1
44760: PUSH
44761: LD_INT 2
44763: PUSH
44764: LD_INT 7
44766: PUSH
44767: LD_INT 9
44769: PUSH
44770: LD_INT 10
44772: PUSH
44773: LD_INT 11
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: IN
44784: NOT
44785: OR
44786: IFFALSE 44792
// exit ;
44788: POP
44789: POP
44790: GO 44875
// end ;
44792: GO 44463
44794: POP
44795: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44796: LD_VAR 0 9
44800: PPUSH
44801: LD_VAR 0 3
44805: PPUSH
44806: LD_VAR 0 4
44810: PPUSH
44811: LD_INT 20
44813: PPUSH
44814: CALL 36827 0 4
44818: PUSH
44819: LD_INT 4
44821: ARRAY
44822: IFFALSE 44826
// exit ;
44824: GO 44875
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44826: LD_VAR 0 2
44830: PUSH
44831: LD_INT 29
44833: PUSH
44834: LD_INT 30
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: IN
44841: PUSH
44842: LD_VAR 0 3
44846: PPUSH
44847: LD_VAR 0 4
44851: PPUSH
44852: LD_VAR 0 9
44856: PPUSH
44857: CALL_OW 440
44861: NOT
44862: AND
44863: IFFALSE 44867
// exit ;
44865: GO 44875
// result := true ;
44867: LD_ADDR_VAR 0 6
44871: PUSH
44872: LD_INT 1
44874: ST_TO_ADDR
// end ;
44875: LD_VAR 0 6
44879: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44880: LD_INT 0
44882: PPUSH
44883: PPUSH
44884: PPUSH
44885: PPUSH
44886: PPUSH
44887: PPUSH
44888: PPUSH
44889: PPUSH
44890: PPUSH
44891: PPUSH
44892: PPUSH
44893: PPUSH
44894: PPUSH
44895: PPUSH
44896: PPUSH
44897: PPUSH
44898: PPUSH
44899: PPUSH
44900: PPUSH
44901: PPUSH
44902: PPUSH
44903: PPUSH
44904: PPUSH
44905: PPUSH
44906: PPUSH
44907: PPUSH
44908: PPUSH
44909: PPUSH
44910: PPUSH
44911: PPUSH
44912: PPUSH
44913: PPUSH
44914: PPUSH
44915: PPUSH
44916: PPUSH
44917: PPUSH
44918: PPUSH
44919: PPUSH
44920: PPUSH
44921: PPUSH
44922: PPUSH
44923: PPUSH
44924: PPUSH
44925: PPUSH
44926: PPUSH
44927: PPUSH
44928: PPUSH
44929: PPUSH
44930: PPUSH
44931: PPUSH
44932: PPUSH
44933: PPUSH
44934: PPUSH
44935: PPUSH
44936: PPUSH
44937: PPUSH
44938: PPUSH
44939: PPUSH
// result = [ ] ;
44940: LD_ADDR_VAR 0 7
44944: PUSH
44945: EMPTY
44946: ST_TO_ADDR
// temp_list = [ ] ;
44947: LD_ADDR_VAR 0 9
44951: PUSH
44952: EMPTY
44953: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44954: LD_VAR 0 4
44958: PUSH
44959: LD_INT 0
44961: PUSH
44962: LD_INT 1
44964: PUSH
44965: LD_INT 2
44967: PUSH
44968: LD_INT 3
44970: PUSH
44971: LD_INT 4
44973: PUSH
44974: LD_INT 5
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: IN
44985: NOT
44986: PUSH
44987: LD_VAR 0 1
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: LD_INT 1
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: IN
45002: PUSH
45003: LD_VAR 0 5
45007: PUSH
45008: LD_INT 1
45010: PUSH
45011: LD_INT 2
45013: PUSH
45014: LD_INT 3
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: LIST
45021: IN
45022: NOT
45023: AND
45024: OR
45025: IFFALSE 45029
// exit ;
45027: GO 63420
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45029: LD_VAR 0 1
45033: PUSH
45034: LD_INT 6
45036: PUSH
45037: LD_INT 7
45039: PUSH
45040: LD_INT 8
45042: PUSH
45043: LD_INT 13
45045: PUSH
45046: LD_INT 12
45048: PUSH
45049: LD_INT 15
45051: PUSH
45052: LD_INT 11
45054: PUSH
45055: LD_INT 14
45057: PUSH
45058: LD_INT 10
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: IN
45072: IFFALSE 45082
// btype = b_lab ;
45074: LD_ADDR_VAR 0 1
45078: PUSH
45079: LD_INT 6
45081: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45082: LD_VAR 0 6
45086: PUSH
45087: LD_INT 0
45089: PUSH
45090: LD_INT 1
45092: PUSH
45093: LD_INT 2
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: LIST
45100: IN
45101: NOT
45102: PUSH
45103: LD_VAR 0 1
45107: PUSH
45108: LD_INT 0
45110: PUSH
45111: LD_INT 1
45113: PUSH
45114: LD_INT 2
45116: PUSH
45117: LD_INT 3
45119: PUSH
45120: LD_INT 6
45122: PUSH
45123: LD_INT 36
45125: PUSH
45126: LD_INT 4
45128: PUSH
45129: LD_INT 5
45131: PUSH
45132: LD_INT 31
45134: PUSH
45135: LD_INT 32
45137: PUSH
45138: LD_INT 33
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: IN
45154: NOT
45155: PUSH
45156: LD_VAR 0 6
45160: PUSH
45161: LD_INT 1
45163: EQUAL
45164: AND
45165: OR
45166: PUSH
45167: LD_VAR 0 1
45171: PUSH
45172: LD_INT 2
45174: PUSH
45175: LD_INT 3
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: IN
45182: NOT
45183: PUSH
45184: LD_VAR 0 6
45188: PUSH
45189: LD_INT 2
45191: EQUAL
45192: AND
45193: OR
45194: IFFALSE 45204
// mode = 0 ;
45196: LD_ADDR_VAR 0 6
45200: PUSH
45201: LD_INT 0
45203: ST_TO_ADDR
// case mode of 0 :
45204: LD_VAR 0 6
45208: PUSH
45209: LD_INT 0
45211: DOUBLE
45212: EQUAL
45213: IFTRUE 45217
45215: GO 56670
45217: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45218: LD_ADDR_VAR 0 11
45222: PUSH
45223: LD_INT 0
45225: PUSH
45226: LD_INT 0
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 0
45235: PUSH
45236: LD_INT 1
45238: NEG
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 1
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 1
45256: PUSH
45257: LD_INT 1
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: LD_INT 1
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 1
45276: NEG
45277: PUSH
45278: LD_INT 0
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 1
45287: NEG
45288: PUSH
45289: LD_INT 1
45291: NEG
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 1
45299: NEG
45300: PUSH
45301: LD_INT 2
45303: NEG
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: LD_INT 2
45314: NEG
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 1
45322: PUSH
45323: LD_INT 1
45325: NEG
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 1
45333: PUSH
45334: LD_INT 2
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 0
45343: PUSH
45344: LD_INT 2
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 1
45353: NEG
45354: PUSH
45355: LD_INT 1
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 1
45364: PUSH
45365: LD_INT 3
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 0
45374: PUSH
45375: LD_INT 3
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 1
45384: NEG
45385: PUSH
45386: LD_INT 2
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45411: LD_ADDR_VAR 0 12
45415: PUSH
45416: LD_INT 0
45418: PUSH
45419: LD_INT 0
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 0
45428: PUSH
45429: LD_INT 1
45431: NEG
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 1
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 1
45449: PUSH
45450: LD_INT 1
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 0
45459: PUSH
45460: LD_INT 1
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 1
45469: NEG
45470: PUSH
45471: LD_INT 0
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 1
45480: NEG
45481: PUSH
45482: LD_INT 1
45484: NEG
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 1
45492: PUSH
45493: LD_INT 1
45495: NEG
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 2
45503: PUSH
45504: LD_INT 0
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 2
45513: PUSH
45514: LD_INT 1
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 1
45523: NEG
45524: PUSH
45525: LD_INT 1
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 2
45534: NEG
45535: PUSH
45536: LD_INT 0
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 2
45545: NEG
45546: PUSH
45547: LD_INT 1
45549: NEG
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 2
45557: NEG
45558: PUSH
45559: LD_INT 1
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 3
45568: NEG
45569: PUSH
45570: LD_INT 0
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 3
45579: NEG
45580: PUSH
45581: LD_INT 1
45583: NEG
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45607: LD_ADDR_VAR 0 13
45611: PUSH
45612: LD_INT 0
45614: PUSH
45615: LD_INT 0
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: LD_INT 1
45627: NEG
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 1
45635: PUSH
45636: LD_INT 0
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 1
45645: PUSH
45646: LD_INT 1
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 0
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 1
45665: NEG
45666: PUSH
45667: LD_INT 0
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 1
45676: NEG
45677: PUSH
45678: LD_INT 1
45680: NEG
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 1
45688: NEG
45689: PUSH
45690: LD_INT 2
45692: NEG
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 2
45700: PUSH
45701: LD_INT 1
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 2
45710: PUSH
45711: LD_INT 2
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 1
45720: PUSH
45721: LD_INT 2
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 2
45730: NEG
45731: PUSH
45732: LD_INT 1
45734: NEG
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 2
45742: NEG
45743: PUSH
45744: LD_INT 2
45746: NEG
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 2
45754: NEG
45755: PUSH
45756: LD_INT 3
45758: NEG
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 3
45766: NEG
45767: PUSH
45768: LD_INT 2
45770: NEG
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 3
45778: NEG
45779: PUSH
45780: LD_INT 3
45782: NEG
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45806: LD_ADDR_VAR 0 14
45810: PUSH
45811: LD_INT 0
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 0
45823: PUSH
45824: LD_INT 1
45826: NEG
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 1
45834: PUSH
45835: LD_INT 0
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 1
45844: PUSH
45845: LD_INT 1
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 0
45854: PUSH
45855: LD_INT 1
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 1
45864: NEG
45865: PUSH
45866: LD_INT 0
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 1
45875: NEG
45876: PUSH
45877: LD_INT 1
45879: NEG
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 1
45887: NEG
45888: PUSH
45889: LD_INT 2
45891: NEG
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 0
45899: PUSH
45900: LD_INT 2
45902: NEG
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 1
45910: PUSH
45911: LD_INT 1
45913: NEG
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 1
45921: PUSH
45922: LD_INT 2
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: LD_INT 2
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 1
45941: NEG
45942: PUSH
45943: LD_INT 1
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 1
45952: NEG
45953: PUSH
45954: LD_INT 3
45956: NEG
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 0
45964: PUSH
45965: LD_INT 3
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 1
45975: PUSH
45976: LD_INT 2
45978: NEG
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46002: LD_ADDR_VAR 0 15
46006: PUSH
46007: LD_INT 0
46009: PUSH
46010: LD_INT 0
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 0
46019: PUSH
46020: LD_INT 1
46022: NEG
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 1
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 1
46040: PUSH
46041: LD_INT 1
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 0
46050: PUSH
46051: LD_INT 1
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 1
46060: NEG
46061: PUSH
46062: LD_INT 0
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 1
46071: NEG
46072: PUSH
46073: LD_INT 1
46075: NEG
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 1
46083: PUSH
46084: LD_INT 1
46086: NEG
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 2
46094: PUSH
46095: LD_INT 0
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 2
46104: PUSH
46105: LD_INT 1
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 1
46114: NEG
46115: PUSH
46116: LD_INT 1
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 2
46125: NEG
46126: PUSH
46127: LD_INT 0
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 2
46136: NEG
46137: PUSH
46138: LD_INT 1
46140: NEG
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 2
46148: PUSH
46149: LD_INT 1
46151: NEG
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 3
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 3
46169: PUSH
46170: LD_INT 1
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46195: LD_ADDR_VAR 0 16
46199: PUSH
46200: LD_INT 0
46202: PUSH
46203: LD_INT 0
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 0
46212: PUSH
46213: LD_INT 1
46215: NEG
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 1
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 1
46233: PUSH
46234: LD_INT 1
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 0
46243: PUSH
46244: LD_INT 1
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: LD_INT 0
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 1
46264: NEG
46265: PUSH
46266: LD_INT 1
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 1
46276: NEG
46277: PUSH
46278: LD_INT 2
46280: NEG
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 2
46288: PUSH
46289: LD_INT 1
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 2
46298: PUSH
46299: LD_INT 2
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 1
46308: PUSH
46309: LD_INT 2
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 2
46318: NEG
46319: PUSH
46320: LD_INT 1
46322: NEG
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 2
46330: NEG
46331: PUSH
46332: LD_INT 2
46334: NEG
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 3
46342: PUSH
46343: LD_INT 2
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 3
46352: PUSH
46353: LD_INT 3
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 2
46362: PUSH
46363: LD_INT 3
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46388: LD_ADDR_VAR 0 17
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: LD_INT 0
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 0
46405: PUSH
46406: LD_INT 1
46408: NEG
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 1
46416: PUSH
46417: LD_INT 0
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 1
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 0
46436: PUSH
46437: LD_INT 1
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 1
46446: NEG
46447: PUSH
46448: LD_INT 0
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 1
46457: NEG
46458: PUSH
46459: LD_INT 1
46461: NEG
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 1
46469: NEG
46470: PUSH
46471: LD_INT 2
46473: NEG
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: LD_INT 2
46484: NEG
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 1
46492: PUSH
46493: LD_INT 1
46495: NEG
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 2
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 2
46513: PUSH
46514: LD_INT 1
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 2
46523: PUSH
46524: LD_INT 2
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 1
46533: PUSH
46534: LD_INT 2
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 0
46543: PUSH
46544: LD_INT 2
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 1
46553: NEG
46554: PUSH
46555: LD_INT 1
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 2
46564: NEG
46565: PUSH
46566: LD_INT 0
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 2
46575: NEG
46576: PUSH
46577: LD_INT 1
46579: NEG
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 2
46587: NEG
46588: PUSH
46589: LD_INT 2
46591: NEG
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46618: LD_ADDR_VAR 0 18
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: LD_INT 1
46638: NEG
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 1
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 0
46666: PUSH
46667: LD_INT 1
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 1
46676: NEG
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 1
46687: NEG
46688: PUSH
46689: LD_INT 1
46691: NEG
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 1
46699: NEG
46700: PUSH
46701: LD_INT 2
46703: NEG
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 0
46711: PUSH
46712: LD_INT 2
46714: NEG
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 1
46722: PUSH
46723: LD_INT 1
46725: NEG
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 2
46733: PUSH
46734: LD_INT 0
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 2
46743: PUSH
46744: LD_INT 1
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 2
46753: PUSH
46754: LD_INT 2
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 1
46763: PUSH
46764: LD_INT 2
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 0
46773: PUSH
46774: LD_INT 2
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 1
46783: NEG
46784: PUSH
46785: LD_INT 1
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 2
46794: NEG
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 2
46805: NEG
46806: PUSH
46807: LD_INT 1
46809: NEG
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 2
46817: NEG
46818: PUSH
46819: LD_INT 2
46821: NEG
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46848: LD_ADDR_VAR 0 19
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: LD_INT 0
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 0
46865: PUSH
46866: LD_INT 1
46868: NEG
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 1
46876: PUSH
46877: LD_INT 0
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 1
46886: PUSH
46887: LD_INT 1
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 0
46896: PUSH
46897: LD_INT 1
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 1
46906: NEG
46907: PUSH
46908: LD_INT 0
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 1
46917: NEG
46918: PUSH
46919: LD_INT 1
46921: NEG
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 1
46929: NEG
46930: PUSH
46931: LD_INT 2
46933: NEG
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 0
46941: PUSH
46942: LD_INT 2
46944: NEG
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 1
46952: PUSH
46953: LD_INT 1
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 2
46963: PUSH
46964: LD_INT 0
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 2
46973: PUSH
46974: LD_INT 1
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 2
46983: PUSH
46984: LD_INT 2
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 1
46993: PUSH
46994: LD_INT 2
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 0
47003: PUSH
47004: LD_INT 2
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 1
47013: NEG
47014: PUSH
47015: LD_INT 1
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 2
47024: NEG
47025: PUSH
47026: LD_INT 0
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 2
47035: NEG
47036: PUSH
47037: LD_INT 1
47039: NEG
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 2
47047: NEG
47048: PUSH
47049: LD_INT 2
47051: NEG
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47078: LD_ADDR_VAR 0 20
47082: PUSH
47083: LD_INT 0
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: LD_INT 1
47098: NEG
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 1
47106: PUSH
47107: LD_INT 0
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 1
47116: PUSH
47117: LD_INT 1
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: LD_INT 1
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 1
47136: NEG
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 1
47147: NEG
47148: PUSH
47149: LD_INT 1
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 1
47159: NEG
47160: PUSH
47161: LD_INT 2
47163: NEG
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 0
47171: PUSH
47172: LD_INT 2
47174: NEG
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 1
47182: PUSH
47183: LD_INT 1
47185: NEG
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 2
47193: PUSH
47194: LD_INT 0
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 2
47203: PUSH
47204: LD_INT 1
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 2
47213: PUSH
47214: LD_INT 2
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: LD_INT 2
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 0
47233: PUSH
47234: LD_INT 2
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 1
47243: NEG
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 2
47254: NEG
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 2
47265: NEG
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 2
47277: NEG
47278: PUSH
47279: LD_INT 2
47281: NEG
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47308: LD_ADDR_VAR 0 21
47312: PUSH
47313: LD_INT 0
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 0
47325: PUSH
47326: LD_INT 1
47328: NEG
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 1
47336: PUSH
47337: LD_INT 0
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: PUSH
47347: LD_INT 1
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 0
47356: PUSH
47357: LD_INT 1
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: LD_INT 0
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 1
47377: NEG
47378: PUSH
47379: LD_INT 1
47381: NEG
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 1
47389: NEG
47390: PUSH
47391: LD_INT 2
47393: NEG
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 0
47401: PUSH
47402: LD_INT 2
47404: NEG
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 1
47412: PUSH
47413: LD_INT 1
47415: NEG
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 2
47423: PUSH
47424: LD_INT 0
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 2
47433: PUSH
47434: LD_INT 1
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 2
47443: PUSH
47444: LD_INT 2
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 1
47453: PUSH
47454: LD_INT 2
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 0
47463: PUSH
47464: LD_INT 2
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 1
47473: NEG
47474: PUSH
47475: LD_INT 1
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 2
47484: NEG
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 2
47495: NEG
47496: PUSH
47497: LD_INT 1
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 2
47507: NEG
47508: PUSH
47509: LD_INT 2
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47538: LD_ADDR_VAR 0 22
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: LD_INT 0
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 0
47555: PUSH
47556: LD_INT 1
47558: NEG
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 1
47566: PUSH
47567: LD_INT 0
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 1
47576: PUSH
47577: LD_INT 1
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: LD_INT 1
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 1
47596: NEG
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 1
47607: NEG
47608: PUSH
47609: LD_INT 1
47611: NEG
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 1
47619: NEG
47620: PUSH
47621: LD_INT 2
47623: NEG
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 0
47631: PUSH
47632: LD_INT 2
47634: NEG
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 1
47642: PUSH
47643: LD_INT 1
47645: NEG
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 2
47653: PUSH
47654: LD_INT 0
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 2
47663: PUSH
47664: LD_INT 1
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 2
47673: PUSH
47674: LD_INT 2
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 1
47683: PUSH
47684: LD_INT 2
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 0
47693: PUSH
47694: LD_INT 2
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 1
47703: NEG
47704: PUSH
47705: LD_INT 1
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 2
47714: NEG
47715: PUSH
47716: LD_INT 0
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 2
47725: NEG
47726: PUSH
47727: LD_INT 1
47729: NEG
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 2
47737: NEG
47738: PUSH
47739: LD_INT 2
47741: NEG
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47768: LD_ADDR_VAR 0 23
47772: PUSH
47773: LD_INT 0
47775: PUSH
47776: LD_INT 0
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 1
47796: PUSH
47797: LD_INT 0
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 1
47806: PUSH
47807: LD_INT 1
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 0
47816: PUSH
47817: LD_INT 1
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 1
47826: NEG
47827: PUSH
47828: LD_INT 0
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 1
47837: NEG
47838: PUSH
47839: LD_INT 1
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 1
47849: NEG
47850: PUSH
47851: LD_INT 2
47853: NEG
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 0
47861: PUSH
47862: LD_INT 2
47864: NEG
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 1
47872: PUSH
47873: LD_INT 1
47875: NEG
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 2
47883: PUSH
47884: LD_INT 0
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 2
47893: PUSH
47894: LD_INT 1
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 2
47903: PUSH
47904: LD_INT 2
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 1
47913: PUSH
47914: LD_INT 2
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 0
47923: PUSH
47924: LD_INT 2
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 1
47933: NEG
47934: PUSH
47935: LD_INT 1
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 2
47944: NEG
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 2
47955: NEG
47956: PUSH
47957: LD_INT 1
47959: NEG
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 2
47967: NEG
47968: PUSH
47969: LD_INT 2
47971: NEG
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 2
47979: NEG
47980: PUSH
47981: LD_INT 3
47983: NEG
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 1
47991: NEG
47992: PUSH
47993: LD_INT 3
47995: NEG
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 1
48003: PUSH
48004: LD_INT 2
48006: NEG
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 2
48014: PUSH
48015: LD_INT 1
48017: NEG
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48048: LD_ADDR_VAR 0 24
48052: PUSH
48053: LD_INT 0
48055: PUSH
48056: LD_INT 0
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 0
48065: PUSH
48066: LD_INT 1
48068: NEG
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 1
48076: PUSH
48077: LD_INT 0
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 1
48086: PUSH
48087: LD_INT 1
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 0
48096: PUSH
48097: LD_INT 1
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 1
48106: NEG
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 1
48117: NEG
48118: PUSH
48119: LD_INT 1
48121: NEG
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 1
48129: NEG
48130: PUSH
48131: LD_INT 2
48133: NEG
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: LD_INT 2
48144: NEG
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 1
48152: PUSH
48153: LD_INT 1
48155: NEG
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 2
48163: PUSH
48164: LD_INT 0
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 2
48173: PUSH
48174: LD_INT 1
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 2
48183: PUSH
48184: LD_INT 2
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 1
48193: PUSH
48194: LD_INT 2
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 0
48203: PUSH
48204: LD_INT 2
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 1
48213: NEG
48214: PUSH
48215: LD_INT 1
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 2
48224: NEG
48225: PUSH
48226: LD_INT 0
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 2
48235: NEG
48236: PUSH
48237: LD_INT 1
48239: NEG
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 2
48247: NEG
48248: PUSH
48249: LD_INT 2
48251: NEG
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 1
48259: PUSH
48260: LD_INT 2
48262: NEG
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 2
48270: PUSH
48271: LD_INT 1
48273: NEG
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 3
48281: PUSH
48282: LD_INT 1
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 3
48291: PUSH
48292: LD_INT 2
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48324: LD_ADDR_VAR 0 25
48328: PUSH
48329: LD_INT 0
48331: PUSH
48332: LD_INT 0
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 0
48341: PUSH
48342: LD_INT 1
48344: NEG
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: LD_INT 0
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: LD_INT 1
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 0
48372: PUSH
48373: LD_INT 1
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 1
48382: NEG
48383: PUSH
48384: LD_INT 0
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 1
48393: NEG
48394: PUSH
48395: LD_INT 1
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 1
48405: NEG
48406: PUSH
48407: LD_INT 2
48409: NEG
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 0
48417: PUSH
48418: LD_INT 2
48420: NEG
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 1
48428: PUSH
48429: LD_INT 1
48431: NEG
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 2
48439: PUSH
48440: LD_INT 0
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 2
48449: PUSH
48450: LD_INT 1
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 2
48459: PUSH
48460: LD_INT 2
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 1
48469: PUSH
48470: LD_INT 2
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 0
48479: PUSH
48480: LD_INT 2
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 1
48489: NEG
48490: PUSH
48491: LD_INT 1
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 2
48500: NEG
48501: PUSH
48502: LD_INT 0
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 2
48511: NEG
48512: PUSH
48513: LD_INT 1
48515: NEG
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 2
48523: NEG
48524: PUSH
48525: LD_INT 2
48527: NEG
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 3
48535: PUSH
48536: LD_INT 1
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 3
48545: PUSH
48546: LD_INT 2
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 2
48555: PUSH
48556: LD_INT 3
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 1
48565: PUSH
48566: LD_INT 3
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48598: LD_ADDR_VAR 0 26
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: LD_INT 0
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: LD_INT 1
48618: NEG
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 1
48626: PUSH
48627: LD_INT 0
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 1
48636: PUSH
48637: LD_INT 1
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 0
48646: PUSH
48647: LD_INT 1
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 1
48656: NEG
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 1
48667: NEG
48668: PUSH
48669: LD_INT 1
48671: NEG
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 1
48679: NEG
48680: PUSH
48681: LD_INT 2
48683: NEG
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 0
48691: PUSH
48692: LD_INT 2
48694: NEG
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: LD_INT 1
48705: NEG
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 2
48713: PUSH
48714: LD_INT 0
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 2
48723: PUSH
48724: LD_INT 1
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 2
48733: PUSH
48734: LD_INT 2
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 1
48743: PUSH
48744: LD_INT 2
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 0
48753: PUSH
48754: LD_INT 2
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 1
48763: NEG
48764: PUSH
48765: LD_INT 1
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 2
48774: NEG
48775: PUSH
48776: LD_INT 0
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 2
48785: NEG
48786: PUSH
48787: LD_INT 1
48789: NEG
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 2
48797: NEG
48798: PUSH
48799: LD_INT 2
48801: NEG
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 2
48809: PUSH
48810: LD_INT 3
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 1
48819: PUSH
48820: LD_INT 3
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 1
48829: NEG
48830: PUSH
48831: LD_INT 2
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 2
48840: NEG
48841: PUSH
48842: LD_INT 1
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48874: LD_ADDR_VAR 0 27
48878: PUSH
48879: LD_INT 0
48881: PUSH
48882: LD_INT 0
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 0
48891: PUSH
48892: LD_INT 1
48894: NEG
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 1
48902: PUSH
48903: LD_INT 0
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 1
48912: PUSH
48913: LD_INT 1
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 0
48922: PUSH
48923: LD_INT 1
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 1
48932: NEG
48933: PUSH
48934: LD_INT 0
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 1
48943: NEG
48944: PUSH
48945: LD_INT 1
48947: NEG
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 1
48955: NEG
48956: PUSH
48957: LD_INT 2
48959: NEG
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 0
48967: PUSH
48968: LD_INT 2
48970: NEG
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 1
48978: PUSH
48979: LD_INT 1
48981: NEG
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 2
48989: PUSH
48990: LD_INT 0
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 2
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 2
49009: PUSH
49010: LD_INT 2
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 1
49019: PUSH
49020: LD_INT 2
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 0
49029: PUSH
49030: LD_INT 2
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 1
49039: NEG
49040: PUSH
49041: LD_INT 1
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 2
49050: NEG
49051: PUSH
49052: LD_INT 0
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 2
49061: NEG
49062: PUSH
49063: LD_INT 1
49065: NEG
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 2
49073: NEG
49074: PUSH
49075: LD_INT 2
49077: NEG
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 1
49085: NEG
49086: PUSH
49087: LD_INT 2
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 2
49096: NEG
49097: PUSH
49098: LD_INT 1
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 3
49107: NEG
49108: PUSH
49109: LD_INT 1
49111: NEG
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 3
49119: NEG
49120: PUSH
49121: LD_INT 2
49123: NEG
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49154: LD_ADDR_VAR 0 28
49158: PUSH
49159: LD_INT 0
49161: PUSH
49162: LD_INT 0
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: LD_INT 1
49174: NEG
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 1
49182: PUSH
49183: LD_INT 0
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 1
49192: PUSH
49193: LD_INT 1
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 0
49202: PUSH
49203: LD_INT 1
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 1
49212: NEG
49213: PUSH
49214: LD_INT 0
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 1
49223: NEG
49224: PUSH
49225: LD_INT 1
49227: NEG
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: LD_INT 2
49239: NEG
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: LD_INT 2
49250: NEG
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 1
49258: PUSH
49259: LD_INT 1
49261: NEG
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 2
49269: PUSH
49270: LD_INT 0
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 2
49279: PUSH
49280: LD_INT 1
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 2
49289: PUSH
49290: LD_INT 2
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 1
49299: PUSH
49300: LD_INT 2
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 0
49309: PUSH
49310: LD_INT 2
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 1
49319: NEG
49320: PUSH
49321: LD_INT 1
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 2
49330: NEG
49331: PUSH
49332: LD_INT 0
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 2
49341: NEG
49342: PUSH
49343: LD_INT 1
49345: NEG
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 2
49353: NEG
49354: PUSH
49355: LD_INT 2
49357: NEG
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 2
49365: NEG
49366: PUSH
49367: LD_INT 3
49369: NEG
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 1
49377: NEG
49378: PUSH
49379: LD_INT 3
49381: NEG
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 3
49389: NEG
49390: PUSH
49391: LD_INT 1
49393: NEG
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 3
49401: NEG
49402: PUSH
49403: LD_INT 2
49405: NEG
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49436: LD_ADDR_VAR 0 29
49440: PUSH
49441: LD_INT 0
49443: PUSH
49444: LD_INT 0
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: LD_INT 1
49456: NEG
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 1
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 0
49484: PUSH
49485: LD_INT 1
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 1
49494: NEG
49495: PUSH
49496: LD_INT 0
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 1
49505: NEG
49506: PUSH
49507: LD_INT 1
49509: NEG
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 1
49517: NEG
49518: PUSH
49519: LD_INT 2
49521: NEG
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 0
49529: PUSH
49530: LD_INT 2
49532: NEG
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 1
49540: PUSH
49541: LD_INT 1
49543: NEG
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 2
49551: PUSH
49552: LD_INT 0
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 2
49561: PUSH
49562: LD_INT 1
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 1
49571: PUSH
49572: LD_INT 2
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 0
49581: PUSH
49582: LD_INT 2
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 1
49591: NEG
49592: PUSH
49593: LD_INT 1
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 2
49602: NEG
49603: PUSH
49604: LD_INT 1
49606: NEG
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 2
49614: NEG
49615: PUSH
49616: LD_INT 2
49618: NEG
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 2
49626: NEG
49627: PUSH
49628: LD_INT 3
49630: NEG
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 2
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 3
49649: PUSH
49650: LD_INT 1
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 1
49659: PUSH
49660: LD_INT 3
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 1
49669: NEG
49670: PUSH
49671: LD_INT 2
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 3
49680: NEG
49681: PUSH
49682: LD_INT 2
49684: NEG
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49715: LD_ADDR_VAR 0 30
49719: PUSH
49720: LD_INT 0
49722: PUSH
49723: LD_INT 0
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 0
49732: PUSH
49733: LD_INT 1
49735: NEG
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 1
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 1
49753: PUSH
49754: LD_INT 1
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 0
49763: PUSH
49764: LD_INT 1
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 1
49773: NEG
49774: PUSH
49775: LD_INT 0
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 1
49784: NEG
49785: PUSH
49786: LD_INT 1
49788: NEG
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 1
49796: NEG
49797: PUSH
49798: LD_INT 2
49800: NEG
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: LD_INT 2
49811: NEG
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 1
49819: PUSH
49820: LD_INT 1
49822: NEG
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 2
49830: PUSH
49831: LD_INT 0
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 2
49840: PUSH
49841: LD_INT 1
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 2
49850: PUSH
49851: LD_INT 2
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 1
49860: PUSH
49861: LD_INT 2
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 2
49881: NEG
49882: PUSH
49883: LD_INT 0
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 2
49892: NEG
49893: PUSH
49894: LD_INT 1
49896: NEG
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 1
49904: NEG
49905: PUSH
49906: LD_INT 3
49908: NEG
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 1
49916: PUSH
49917: LD_INT 2
49919: NEG
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 3
49927: PUSH
49928: LD_INT 2
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 2
49937: PUSH
49938: LD_INT 3
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 2
49947: NEG
49948: PUSH
49949: LD_INT 1
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 3
49958: NEG
49959: PUSH
49960: LD_INT 1
49962: NEG
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49993: LD_ADDR_VAR 0 31
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: LD_INT 0
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 0
50010: PUSH
50011: LD_INT 1
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 1
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 1
50031: PUSH
50032: LD_INT 1
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 0
50041: PUSH
50042: LD_INT 1
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 1
50051: NEG
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 1
50062: NEG
50063: PUSH
50064: LD_INT 1
50066: NEG
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 1
50074: NEG
50075: PUSH
50076: LD_INT 2
50078: NEG
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 1
50086: PUSH
50087: LD_INT 1
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 2
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 2
50107: PUSH
50108: LD_INT 1
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 2
50117: PUSH
50118: LD_INT 2
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 1
50127: PUSH
50128: LD_INT 2
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 0
50137: PUSH
50138: LD_INT 2
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 1
50147: NEG
50148: PUSH
50149: LD_INT 1
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 2
50158: NEG
50159: PUSH
50160: LD_INT 1
50162: NEG
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 2
50170: NEG
50171: PUSH
50172: LD_INT 2
50174: NEG
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 2
50182: NEG
50183: PUSH
50184: LD_INT 3
50186: NEG
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 2
50194: PUSH
50195: LD_INT 1
50197: NEG
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 3
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 1
50215: PUSH
50216: LD_INT 3
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 1
50225: NEG
50226: PUSH
50227: LD_INT 2
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 3
50236: NEG
50237: PUSH
50238: LD_INT 2
50240: NEG
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50271: LD_ADDR_VAR 0 32
50275: PUSH
50276: LD_INT 0
50278: PUSH
50279: LD_INT 0
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 0
50288: PUSH
50289: LD_INT 1
50291: NEG
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 1
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 1
50309: PUSH
50310: LD_INT 1
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: LD_INT 1
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 1
50329: NEG
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 1
50340: NEG
50341: PUSH
50342: LD_INT 1
50344: NEG
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: LD_INT 2
50356: NEG
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: LD_INT 2
50367: NEG
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 1
50375: PUSH
50376: LD_INT 1
50378: NEG
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 2
50386: PUSH
50387: LD_INT 1
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 2
50396: PUSH
50397: LD_INT 2
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 1
50406: PUSH
50407: LD_INT 2
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 0
50416: PUSH
50417: LD_INT 2
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 1
50426: NEG
50427: PUSH
50428: LD_INT 1
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 2
50437: NEG
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 2
50448: NEG
50449: PUSH
50450: LD_INT 1
50452: NEG
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 1
50460: NEG
50461: PUSH
50462: LD_INT 3
50464: NEG
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 1
50472: PUSH
50473: LD_INT 2
50475: NEG
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 3
50483: PUSH
50484: LD_INT 2
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 2
50493: PUSH
50494: LD_INT 3
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 2
50503: NEG
50504: PUSH
50505: LD_INT 1
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 3
50514: NEG
50515: PUSH
50516: LD_INT 1
50518: NEG
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50549: LD_ADDR_VAR 0 33
50553: PUSH
50554: LD_INT 0
50556: PUSH
50557: LD_INT 0
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: LD_INT 1
50569: NEG
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 1
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 1
50587: PUSH
50588: LD_INT 1
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 0
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 1
50607: NEG
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 1
50618: NEG
50619: PUSH
50620: LD_INT 1
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: LD_INT 2
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 1
50642: PUSH
50643: LD_INT 1
50645: NEG
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 2
50653: PUSH
50654: LD_INT 0
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 2
50663: PUSH
50664: LD_INT 1
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 1
50673: PUSH
50674: LD_INT 2
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 0
50683: PUSH
50684: LD_INT 2
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 1
50693: NEG
50694: PUSH
50695: LD_INT 1
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 2
50704: NEG
50705: PUSH
50706: LD_INT 0
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 2
50715: NEG
50716: PUSH
50717: LD_INT 1
50719: NEG
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 2
50727: NEG
50728: PUSH
50729: LD_INT 2
50731: NEG
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 2
50739: NEG
50740: PUSH
50741: LD_INT 3
50743: NEG
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 2
50751: PUSH
50752: LD_INT 1
50754: NEG
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 3
50762: PUSH
50763: LD_INT 1
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 1
50772: PUSH
50773: LD_INT 3
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 1
50782: NEG
50783: PUSH
50784: LD_INT 2
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 3
50793: NEG
50794: PUSH
50795: LD_INT 2
50797: NEG
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50828: LD_ADDR_VAR 0 34
50832: PUSH
50833: LD_INT 0
50835: PUSH
50836: LD_INT 0
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: LD_INT 1
50848: NEG
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 1
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 1
50866: PUSH
50867: LD_INT 1
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 0
50876: PUSH
50877: LD_INT 1
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 1
50886: NEG
50887: PUSH
50888: LD_INT 0
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 1
50897: NEG
50898: PUSH
50899: LD_INT 1
50901: NEG
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 1
50909: NEG
50910: PUSH
50911: LD_INT 2
50913: NEG
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 0
50921: PUSH
50922: LD_INT 2
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 1
50932: PUSH
50933: LD_INT 1
50935: NEG
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 2
50943: PUSH
50944: LD_INT 1
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 2
50953: PUSH
50954: LD_INT 2
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 1
50963: PUSH
50964: LD_INT 2
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 1
50973: NEG
50974: PUSH
50975: LD_INT 1
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 2
50984: NEG
50985: PUSH
50986: LD_INT 0
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 2
50995: NEG
50996: PUSH
50997: LD_INT 1
50999: NEG
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 2
51007: NEG
51008: PUSH
51009: LD_INT 2
51011: NEG
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 1
51019: NEG
51020: PUSH
51021: LD_INT 3
51023: NEG
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 1
51031: PUSH
51032: LD_INT 2
51034: NEG
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 3
51042: PUSH
51043: LD_INT 2
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 2
51052: PUSH
51053: LD_INT 3
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 2
51062: NEG
51063: PUSH
51064: LD_INT 1
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 3
51073: NEG
51074: PUSH
51075: LD_INT 1
51077: NEG
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51108: LD_ADDR_VAR 0 35
51112: PUSH
51113: LD_INT 0
51115: PUSH
51116: LD_INT 0
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 0
51125: PUSH
51126: LD_INT 1
51128: NEG
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 1
51136: PUSH
51137: LD_INT 0
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 1
51146: PUSH
51147: LD_INT 1
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 0
51156: PUSH
51157: LD_INT 1
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 1
51166: NEG
51167: PUSH
51168: LD_INT 0
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 1
51177: NEG
51178: PUSH
51179: LD_INT 1
51181: NEG
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 2
51189: PUSH
51190: LD_INT 1
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 2
51199: NEG
51200: PUSH
51201: LD_INT 1
51203: NEG
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51220: LD_ADDR_VAR 0 36
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: LD_INT 0
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 0
51237: PUSH
51238: LD_INT 1
51240: NEG
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 1
51248: PUSH
51249: LD_INT 0
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 1
51258: PUSH
51259: LD_INT 1
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 0
51268: PUSH
51269: LD_INT 1
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 1
51278: NEG
51279: PUSH
51280: LD_INT 0
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 1
51289: NEG
51290: PUSH
51291: LD_INT 1
51293: NEG
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 1
51301: NEG
51302: PUSH
51303: LD_INT 2
51305: NEG
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 1
51313: PUSH
51314: LD_INT 2
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51332: LD_ADDR_VAR 0 37
51336: PUSH
51337: LD_INT 0
51339: PUSH
51340: LD_INT 0
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: LD_INT 1
51352: NEG
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 1
51360: PUSH
51361: LD_INT 0
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 1
51370: PUSH
51371: LD_INT 1
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 0
51380: PUSH
51381: LD_INT 1
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 1
51390: NEG
51391: PUSH
51392: LD_INT 0
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: LD_INT 1
51405: NEG
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 1
51413: PUSH
51414: LD_INT 1
51416: NEG
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 1
51424: NEG
51425: PUSH
51426: LD_INT 1
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51444: LD_ADDR_VAR 0 38
51448: PUSH
51449: LD_INT 0
51451: PUSH
51452: LD_INT 0
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 0
51461: PUSH
51462: LD_INT 1
51464: NEG
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 1
51472: PUSH
51473: LD_INT 0
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: LD_INT 1
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: LD_INT 1
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 1
51502: NEG
51503: PUSH
51504: LD_INT 0
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 1
51513: NEG
51514: PUSH
51515: LD_INT 1
51517: NEG
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 2
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 2
51535: NEG
51536: PUSH
51537: LD_INT 1
51539: NEG
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51556: LD_ADDR_VAR 0 39
51560: PUSH
51561: LD_INT 0
51563: PUSH
51564: LD_INT 0
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 0
51573: PUSH
51574: LD_INT 1
51576: NEG
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 1
51584: PUSH
51585: LD_INT 0
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 1
51594: PUSH
51595: LD_INT 1
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: LD_INT 1
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 1
51614: NEG
51615: PUSH
51616: LD_INT 0
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 1
51625: NEG
51626: PUSH
51627: LD_INT 1
51629: NEG
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 1
51637: NEG
51638: PUSH
51639: LD_INT 2
51641: NEG
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 1
51649: PUSH
51650: LD_INT 2
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51668: LD_ADDR_VAR 0 40
51672: PUSH
51673: LD_INT 0
51675: PUSH
51676: LD_INT 0
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 0
51685: PUSH
51686: LD_INT 1
51688: NEG
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 1
51696: PUSH
51697: LD_INT 0
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 1
51706: PUSH
51707: LD_INT 1
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 0
51716: PUSH
51717: LD_INT 1
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 1
51726: NEG
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: LD_INT 1
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 1
51749: PUSH
51750: LD_INT 1
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 1
51760: NEG
51761: PUSH
51762: LD_INT 1
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51780: LD_ADDR_VAR 0 41
51784: PUSH
51785: LD_INT 0
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: LD_INT 1
51800: NEG
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 1
51808: PUSH
51809: LD_INT 0
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 1
51818: PUSH
51819: LD_INT 1
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 0
51828: PUSH
51829: LD_INT 1
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 1
51838: NEG
51839: PUSH
51840: LD_INT 0
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 1
51849: NEG
51850: PUSH
51851: LD_INT 1
51853: NEG
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 1
51861: NEG
51862: PUSH
51863: LD_INT 2
51865: NEG
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 1
51873: PUSH
51874: LD_INT 1
51876: NEG
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 2
51884: PUSH
51885: LD_INT 0
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 2
51894: PUSH
51895: LD_INT 1
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 2
51904: PUSH
51905: LD_INT 2
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 1
51914: PUSH
51915: LD_INT 2
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 1
51924: NEG
51925: PUSH
51926: LD_INT 1
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 2
51935: NEG
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 2
51946: NEG
51947: PUSH
51948: LD_INT 1
51950: NEG
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 2
51958: NEG
51959: PUSH
51960: LD_INT 2
51962: NEG
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 2
51970: NEG
51971: PUSH
51972: LD_INT 3
51974: NEG
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 2
51982: PUSH
51983: LD_INT 1
51985: NEG
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 3
51993: PUSH
51994: LD_INT 0
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 3
52003: PUSH
52004: LD_INT 1
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 3
52013: PUSH
52014: LD_INT 2
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 3
52023: PUSH
52024: LD_INT 3
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 2
52033: PUSH
52034: LD_INT 3
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 2
52043: NEG
52044: PUSH
52045: LD_INT 1
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 3
52054: NEG
52055: PUSH
52056: LD_INT 0
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 3
52065: NEG
52066: PUSH
52067: LD_INT 1
52069: NEG
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 3
52077: NEG
52078: PUSH
52079: LD_INT 2
52081: NEG
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 3
52089: NEG
52090: PUSH
52091: LD_INT 3
52093: NEG
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52130: LD_ADDR_VAR 0 42
52134: PUSH
52135: LD_INT 0
52137: PUSH
52138: LD_INT 0
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 0
52147: PUSH
52148: LD_INT 1
52150: NEG
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 1
52158: PUSH
52159: LD_INT 0
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 1
52168: PUSH
52169: LD_INT 1
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 0
52178: PUSH
52179: LD_INT 1
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 1
52188: NEG
52189: PUSH
52190: LD_INT 0
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 1
52199: NEG
52200: PUSH
52201: LD_INT 1
52203: NEG
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 1
52211: NEG
52212: PUSH
52213: LD_INT 2
52215: NEG
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 0
52223: PUSH
52224: LD_INT 2
52226: NEG
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 1
52234: PUSH
52235: LD_INT 1
52237: NEG
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 2
52245: PUSH
52246: LD_INT 1
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 2
52255: PUSH
52256: LD_INT 2
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 1
52265: PUSH
52266: LD_INT 2
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 0
52275: PUSH
52276: LD_INT 2
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 1
52285: NEG
52286: PUSH
52287: LD_INT 1
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 2
52296: NEG
52297: PUSH
52298: LD_INT 1
52300: NEG
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 2
52308: NEG
52309: PUSH
52310: LD_INT 2
52312: NEG
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 2
52320: NEG
52321: PUSH
52322: LD_INT 3
52324: NEG
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 1
52332: NEG
52333: PUSH
52334: LD_INT 3
52336: NEG
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 0
52344: PUSH
52345: LD_INT 3
52347: NEG
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 1
52355: PUSH
52356: LD_INT 2
52358: NEG
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 3
52366: PUSH
52367: LD_INT 2
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 3
52376: PUSH
52377: LD_INT 3
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 2
52386: PUSH
52387: LD_INT 3
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 1
52396: PUSH
52397: LD_INT 3
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 0
52406: PUSH
52407: LD_INT 3
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: NEG
52417: PUSH
52418: LD_INT 2
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 3
52427: NEG
52428: PUSH
52429: LD_INT 2
52431: NEG
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 3
52439: NEG
52440: PUSH
52441: LD_INT 3
52443: NEG
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52480: LD_ADDR_VAR 0 43
52484: PUSH
52485: LD_INT 0
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 0
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 1
52508: PUSH
52509: LD_INT 0
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 1
52518: PUSH
52519: LD_INT 1
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 0
52528: PUSH
52529: LD_INT 1
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 1
52538: NEG
52539: PUSH
52540: LD_INT 0
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 1
52549: NEG
52550: PUSH
52551: LD_INT 1
52553: NEG
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 1
52561: NEG
52562: PUSH
52563: LD_INT 2
52565: NEG
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 0
52573: PUSH
52574: LD_INT 2
52576: NEG
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 1
52584: PUSH
52585: LD_INT 1
52587: NEG
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 2
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 2
52605: PUSH
52606: LD_INT 1
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 1
52615: PUSH
52616: LD_INT 2
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 0
52625: PUSH
52626: LD_INT 2
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 1
52635: NEG
52636: PUSH
52637: LD_INT 1
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 2
52646: NEG
52647: PUSH
52648: LD_INT 0
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 2
52657: NEG
52658: PUSH
52659: LD_INT 1
52661: NEG
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 1
52669: NEG
52670: PUSH
52671: LD_INT 3
52673: NEG
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 0
52681: PUSH
52682: LD_INT 3
52684: NEG
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 1
52692: PUSH
52693: LD_INT 2
52695: NEG
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 2
52703: PUSH
52704: LD_INT 1
52706: NEG
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 3
52714: PUSH
52715: LD_INT 0
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 3
52724: PUSH
52725: LD_INT 1
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 1
52734: PUSH
52735: LD_INT 3
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: LD_INT 3
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 1
52754: NEG
52755: PUSH
52756: LD_INT 2
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 2
52765: NEG
52766: PUSH
52767: LD_INT 1
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 3
52776: NEG
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 3
52787: NEG
52788: PUSH
52789: LD_INT 1
52791: NEG
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52828: LD_ADDR_VAR 0 44
52832: PUSH
52833: LD_INT 0
52835: PUSH
52836: LD_INT 0
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 0
52845: PUSH
52846: LD_INT 1
52848: NEG
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 1
52856: PUSH
52857: LD_INT 0
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 1
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 0
52876: PUSH
52877: LD_INT 1
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 1
52886: NEG
52887: PUSH
52888: LD_INT 0
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 1
52897: NEG
52898: PUSH
52899: LD_INT 1
52901: NEG
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 1
52909: NEG
52910: PUSH
52911: LD_INT 2
52913: NEG
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 1
52921: PUSH
52922: LD_INT 1
52924: NEG
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 2
52932: PUSH
52933: LD_INT 0
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 2
52942: PUSH
52943: LD_INT 1
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 2
52952: PUSH
52953: LD_INT 2
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 1
52962: PUSH
52963: LD_INT 2
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 1
52972: NEG
52973: PUSH
52974: LD_INT 1
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 2
52983: NEG
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 2
52994: NEG
52995: PUSH
52996: LD_INT 1
52998: NEG
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 2
53006: NEG
53007: PUSH
53008: LD_INT 2
53010: NEG
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 2
53018: NEG
53019: PUSH
53020: LD_INT 3
53022: NEG
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 2
53030: PUSH
53031: LD_INT 1
53033: NEG
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 3
53041: PUSH
53042: LD_INT 0
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 3
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 3
53061: PUSH
53062: LD_INT 2
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 3
53071: PUSH
53072: LD_INT 3
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 2
53081: PUSH
53082: LD_INT 3
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 2
53091: NEG
53092: PUSH
53093: LD_INT 1
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 3
53102: NEG
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 3
53113: NEG
53114: PUSH
53115: LD_INT 1
53117: NEG
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 3
53125: NEG
53126: PUSH
53127: LD_INT 2
53129: NEG
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 3
53137: NEG
53138: PUSH
53139: LD_INT 3
53141: NEG
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53178: LD_ADDR_VAR 0 45
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: LD_INT 0
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 0
53195: PUSH
53196: LD_INT 1
53198: NEG
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 1
53206: PUSH
53207: LD_INT 0
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 1
53216: PUSH
53217: LD_INT 1
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 0
53226: PUSH
53227: LD_INT 1
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 1
53236: NEG
53237: PUSH
53238: LD_INT 0
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 1
53247: NEG
53248: PUSH
53249: LD_INT 1
53251: NEG
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 1
53259: NEG
53260: PUSH
53261: LD_INT 2
53263: NEG
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 0
53271: PUSH
53272: LD_INT 2
53274: NEG
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 1
53282: PUSH
53283: LD_INT 1
53285: NEG
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 2
53293: PUSH
53294: LD_INT 1
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 2
53303: PUSH
53304: LD_INT 2
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 1
53313: PUSH
53314: LD_INT 2
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 0
53323: PUSH
53324: LD_INT 2
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 1
53333: NEG
53334: PUSH
53335: LD_INT 1
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 2
53344: NEG
53345: PUSH
53346: LD_INT 1
53348: NEG
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 2
53356: NEG
53357: PUSH
53358: LD_INT 2
53360: NEG
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 2
53368: NEG
53369: PUSH
53370: LD_INT 3
53372: NEG
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 1
53380: NEG
53381: PUSH
53382: LD_INT 3
53384: NEG
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 0
53392: PUSH
53393: LD_INT 3
53395: NEG
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 1
53403: PUSH
53404: LD_INT 2
53406: NEG
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 3
53414: PUSH
53415: LD_INT 2
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 3
53424: PUSH
53425: LD_INT 3
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 2
53434: PUSH
53435: LD_INT 3
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 1
53444: PUSH
53445: LD_INT 3
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 0
53454: PUSH
53455: LD_INT 3
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 1
53464: NEG
53465: PUSH
53466: LD_INT 2
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 3
53475: NEG
53476: PUSH
53477: LD_INT 2
53479: NEG
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 3
53487: NEG
53488: PUSH
53489: LD_INT 3
53491: NEG
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53528: LD_ADDR_VAR 0 46
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: LD_INT 0
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 0
53545: PUSH
53546: LD_INT 1
53548: NEG
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 1
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 1
53566: PUSH
53567: LD_INT 1
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 0
53576: PUSH
53577: LD_INT 1
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 1
53586: NEG
53587: PUSH
53588: LD_INT 0
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 1
53597: NEG
53598: PUSH
53599: LD_INT 1
53601: NEG
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 1
53609: NEG
53610: PUSH
53611: LD_INT 2
53613: NEG
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 0
53621: PUSH
53622: LD_INT 2
53624: NEG
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 1
53632: PUSH
53633: LD_INT 1
53635: NEG
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 2
53643: PUSH
53644: LD_INT 0
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 2
53653: PUSH
53654: LD_INT 1
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 1
53663: PUSH
53664: LD_INT 2
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 0
53673: PUSH
53674: LD_INT 2
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 1
53683: NEG
53684: PUSH
53685: LD_INT 1
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 2
53694: NEG
53695: PUSH
53696: LD_INT 0
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 2
53705: NEG
53706: PUSH
53707: LD_INT 1
53709: NEG
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 1
53717: NEG
53718: PUSH
53719: LD_INT 3
53721: NEG
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 0
53729: PUSH
53730: LD_INT 3
53732: NEG
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 1
53740: PUSH
53741: LD_INT 2
53743: NEG
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 2
53751: PUSH
53752: LD_INT 1
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 3
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 3
53772: PUSH
53773: LD_INT 1
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 1
53782: PUSH
53783: LD_INT 3
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 0
53792: PUSH
53793: LD_INT 3
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 1
53802: NEG
53803: PUSH
53804: LD_INT 2
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 2
53813: NEG
53814: PUSH
53815: LD_INT 1
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 3
53824: NEG
53825: PUSH
53826: LD_INT 0
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 3
53835: NEG
53836: PUSH
53837: LD_INT 1
53839: NEG
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53876: LD_ADDR_VAR 0 47
53880: PUSH
53881: LD_INT 0
53883: PUSH
53884: LD_INT 0
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 0
53893: PUSH
53894: LD_INT 1
53896: NEG
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 1
53904: PUSH
53905: LD_INT 0
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 1
53914: PUSH
53915: LD_INT 1
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 0
53924: PUSH
53925: LD_INT 1
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 1
53934: NEG
53935: PUSH
53936: LD_INT 0
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 1
53945: NEG
53946: PUSH
53947: LD_INT 1
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 1
53957: NEG
53958: PUSH
53959: LD_INT 2
53961: NEG
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 0
53969: PUSH
53970: LD_INT 2
53972: NEG
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 1
53980: PUSH
53981: LD_INT 1
53983: NEG
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 2
53991: NEG
53992: PUSH
53993: LD_INT 1
53995: NEG
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 2
54003: NEG
54004: PUSH
54005: LD_INT 2
54007: NEG
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54027: LD_ADDR_VAR 0 48
54031: PUSH
54032: LD_INT 0
54034: PUSH
54035: LD_INT 0
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 0
54044: PUSH
54045: LD_INT 1
54047: NEG
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 1
54055: PUSH
54056: LD_INT 0
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 1
54065: PUSH
54066: LD_INT 1
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 0
54075: PUSH
54076: LD_INT 1
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 1
54085: NEG
54086: PUSH
54087: LD_INT 0
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 1
54096: NEG
54097: PUSH
54098: LD_INT 1
54100: NEG
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 1
54108: NEG
54109: PUSH
54110: LD_INT 2
54112: NEG
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 0
54120: PUSH
54121: LD_INT 2
54123: NEG
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 1
54131: PUSH
54132: LD_INT 1
54134: NEG
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 2
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 2
54152: PUSH
54153: LD_INT 1
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54174: LD_ADDR_VAR 0 49
54178: PUSH
54179: LD_INT 0
54181: PUSH
54182: LD_INT 0
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 0
54191: PUSH
54192: LD_INT 1
54194: NEG
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 1
54202: PUSH
54203: LD_INT 0
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 1
54212: PUSH
54213: LD_INT 1
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 0
54222: PUSH
54223: LD_INT 1
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 1
54232: NEG
54233: PUSH
54234: LD_INT 0
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 1
54243: NEG
54244: PUSH
54245: LD_INT 1
54247: NEG
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 1
54255: PUSH
54256: LD_INT 1
54258: NEG
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 2
54266: PUSH
54267: LD_INT 0
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 2
54276: PUSH
54277: LD_INT 1
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 2
54286: PUSH
54287: LD_INT 2
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 1
54296: PUSH
54297: LD_INT 2
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54318: LD_ADDR_VAR 0 50
54322: PUSH
54323: LD_INT 0
54325: PUSH
54326: LD_INT 0
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 0
54335: PUSH
54336: LD_INT 1
54338: NEG
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: LD_INT 0
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 1
54356: PUSH
54357: LD_INT 1
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 0
54366: PUSH
54367: LD_INT 1
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 1
54376: NEG
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 1
54387: NEG
54388: PUSH
54389: LD_INT 1
54391: NEG
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 2
54399: PUSH
54400: LD_INT 1
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 2
54409: PUSH
54410: LD_INT 2
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 1
54419: PUSH
54420: LD_INT 2
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 0
54429: PUSH
54430: LD_INT 2
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 1
54439: NEG
54440: PUSH
54441: LD_INT 1
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54462: LD_ADDR_VAR 0 51
54466: PUSH
54467: LD_INT 0
54469: PUSH
54470: LD_INT 0
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 0
54479: PUSH
54480: LD_INT 1
54482: NEG
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 1
54490: PUSH
54491: LD_INT 0
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 1
54500: PUSH
54501: LD_INT 1
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: LD_INT 1
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 1
54520: NEG
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: LD_INT 1
54535: NEG
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 1
54543: PUSH
54544: LD_INT 2
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 0
54553: PUSH
54554: LD_INT 2
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 1
54563: NEG
54564: PUSH
54565: LD_INT 1
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 2
54574: NEG
54575: PUSH
54576: LD_INT 0
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 2
54585: NEG
54586: PUSH
54587: LD_INT 1
54589: NEG
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54609: LD_ADDR_VAR 0 52
54613: PUSH
54614: LD_INT 0
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 0
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: LD_INT 0
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 1
54647: PUSH
54648: LD_INT 1
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 0
54657: PUSH
54658: LD_INT 1
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 1
54667: NEG
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 1
54678: NEG
54679: PUSH
54680: LD_INT 1
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 1
54690: NEG
54691: PUSH
54692: LD_INT 2
54694: NEG
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 1
54702: NEG
54703: PUSH
54704: LD_INT 1
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 2
54713: NEG
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 2
54724: NEG
54725: PUSH
54726: LD_INT 1
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 2
54736: NEG
54737: PUSH
54738: LD_INT 2
54740: NEG
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54760: LD_ADDR_VAR 0 53
54764: PUSH
54765: LD_INT 0
54767: PUSH
54768: LD_INT 0
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 0
54777: PUSH
54778: LD_INT 1
54780: NEG
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 1
54788: PUSH
54789: LD_INT 0
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 1
54798: PUSH
54799: LD_INT 1
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 0
54808: PUSH
54809: LD_INT 1
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 1
54818: NEG
54819: PUSH
54820: LD_INT 0
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 1
54829: NEG
54830: PUSH
54831: LD_INT 1
54833: NEG
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 1
54841: NEG
54842: PUSH
54843: LD_INT 2
54845: NEG
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 0
54853: PUSH
54854: LD_INT 2
54856: NEG
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 1
54864: PUSH
54865: LD_INT 1
54867: NEG
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 2
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 2
54885: PUSH
54886: LD_INT 1
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 2
54895: PUSH
54896: LD_INT 2
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 1
54905: PUSH
54906: LD_INT 2
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 0
54915: PUSH
54916: LD_INT 2
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 1
54925: NEG
54926: PUSH
54927: LD_INT 1
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 2
54936: NEG
54937: PUSH
54938: LD_INT 0
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 2
54947: NEG
54948: PUSH
54949: LD_INT 1
54951: NEG
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 2
54959: NEG
54960: PUSH
54961: LD_INT 2
54963: NEG
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54990: LD_ADDR_VAR 0 54
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: LD_INT 0
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 0
55007: PUSH
55008: LD_INT 1
55010: NEG
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 1
55018: PUSH
55019: LD_INT 0
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 1
55028: PUSH
55029: LD_INT 1
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 0
55038: PUSH
55039: LD_INT 1
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 1
55048: NEG
55049: PUSH
55050: LD_INT 0
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 1
55059: NEG
55060: PUSH
55061: LD_INT 1
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 1
55071: NEG
55072: PUSH
55073: LD_INT 2
55075: NEG
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 0
55083: PUSH
55084: LD_INT 2
55086: NEG
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 1
55094: PUSH
55095: LD_INT 1
55097: NEG
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 2
55105: PUSH
55106: LD_INT 0
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 2
55115: PUSH
55116: LD_INT 1
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 2
55125: PUSH
55126: LD_INT 2
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 1
55135: PUSH
55136: LD_INT 2
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 0
55145: PUSH
55146: LD_INT 2
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 1
55155: NEG
55156: PUSH
55157: LD_INT 1
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 2
55166: NEG
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 2
55177: NEG
55178: PUSH
55179: LD_INT 1
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 2
55189: NEG
55190: PUSH
55191: LD_INT 2
55193: NEG
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55220: LD_ADDR_VAR 0 55
55224: PUSH
55225: LD_INT 0
55227: PUSH
55228: LD_INT 0
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 0
55237: PUSH
55238: LD_INT 1
55240: NEG
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 1
55248: PUSH
55249: LD_INT 0
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 1
55258: PUSH
55259: LD_INT 1
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 0
55268: PUSH
55269: LD_INT 1
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 1
55278: NEG
55279: PUSH
55280: LD_INT 0
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 1
55289: NEG
55290: PUSH
55291: LD_INT 1
55293: NEG
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 1
55301: NEG
55302: PUSH
55303: LD_INT 2
55305: NEG
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 0
55313: PUSH
55314: LD_INT 2
55316: NEG
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 1
55324: PUSH
55325: LD_INT 1
55327: NEG
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 2
55335: PUSH
55336: LD_INT 0
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 2
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 2
55355: PUSH
55356: LD_INT 2
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 1
55365: PUSH
55366: LD_INT 2
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 0
55375: PUSH
55376: LD_INT 2
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 1
55385: NEG
55386: PUSH
55387: LD_INT 1
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 2
55396: NEG
55397: PUSH
55398: LD_INT 0
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 2
55407: NEG
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 2
55419: NEG
55420: PUSH
55421: LD_INT 2
55423: NEG
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55450: LD_ADDR_VAR 0 56
55454: PUSH
55455: LD_INT 0
55457: PUSH
55458: LD_INT 0
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 0
55467: PUSH
55468: LD_INT 1
55470: NEG
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 1
55478: PUSH
55479: LD_INT 0
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 1
55488: PUSH
55489: LD_INT 1
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 0
55498: PUSH
55499: LD_INT 1
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 1
55508: NEG
55509: PUSH
55510: LD_INT 0
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 1
55519: NEG
55520: PUSH
55521: LD_INT 1
55523: NEG
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 1
55531: NEG
55532: PUSH
55533: LD_INT 2
55535: NEG
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 0
55543: PUSH
55544: LD_INT 2
55546: NEG
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 1
55554: PUSH
55555: LD_INT 1
55557: NEG
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 2
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 2
55575: PUSH
55576: LD_INT 1
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 2
55585: PUSH
55586: LD_INT 2
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 1
55595: PUSH
55596: LD_INT 2
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 0
55605: PUSH
55606: LD_INT 2
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 1
55615: NEG
55616: PUSH
55617: LD_INT 1
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 2
55626: NEG
55627: PUSH
55628: LD_INT 0
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 2
55637: NEG
55638: PUSH
55639: LD_INT 1
55641: NEG
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 2
55649: NEG
55650: PUSH
55651: LD_INT 2
55653: NEG
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55680: LD_ADDR_VAR 0 57
55684: PUSH
55685: LD_INT 0
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 0
55697: PUSH
55698: LD_INT 1
55700: NEG
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 1
55708: PUSH
55709: LD_INT 0
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 1
55718: PUSH
55719: LD_INT 1
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 0
55728: PUSH
55729: LD_INT 1
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 1
55738: NEG
55739: PUSH
55740: LD_INT 0
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 1
55749: NEG
55750: PUSH
55751: LD_INT 1
55753: NEG
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 1
55761: NEG
55762: PUSH
55763: LD_INT 2
55765: NEG
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 0
55773: PUSH
55774: LD_INT 2
55776: NEG
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 1
55784: PUSH
55785: LD_INT 1
55787: NEG
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 2
55795: PUSH
55796: LD_INT 0
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 2
55805: PUSH
55806: LD_INT 1
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 2
55815: PUSH
55816: LD_INT 2
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 1
55825: PUSH
55826: LD_INT 2
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 0
55835: PUSH
55836: LD_INT 2
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 1
55845: NEG
55846: PUSH
55847: LD_INT 1
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 2
55856: NEG
55857: PUSH
55858: LD_INT 0
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 2
55867: NEG
55868: PUSH
55869: LD_INT 1
55871: NEG
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 2
55879: NEG
55880: PUSH
55881: LD_INT 2
55883: NEG
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55910: LD_ADDR_VAR 0 58
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: LD_INT 0
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 0
55927: PUSH
55928: LD_INT 1
55930: NEG
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 1
55938: PUSH
55939: LD_INT 0
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 1
55948: PUSH
55949: LD_INT 1
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: LD_INT 1
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 1
55968: NEG
55969: PUSH
55970: LD_INT 0
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 1
55979: NEG
55980: PUSH
55981: LD_INT 1
55983: NEG
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 1
55991: NEG
55992: PUSH
55993: LD_INT 2
55995: NEG
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: LD_INT 2
56006: NEG
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 1
56014: PUSH
56015: LD_INT 1
56017: NEG
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 2
56025: PUSH
56026: LD_INT 0
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 2
56035: PUSH
56036: LD_INT 1
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 2
56045: PUSH
56046: LD_INT 2
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 1
56055: PUSH
56056: LD_INT 2
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 0
56065: PUSH
56066: LD_INT 2
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 1
56075: NEG
56076: PUSH
56077: LD_INT 1
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 2
56086: NEG
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 2
56097: NEG
56098: PUSH
56099: LD_INT 1
56101: NEG
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 2
56109: NEG
56110: PUSH
56111: LD_INT 2
56113: NEG
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56140: LD_ADDR_VAR 0 59
56144: PUSH
56145: LD_INT 0
56147: PUSH
56148: LD_INT 0
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 0
56157: PUSH
56158: LD_INT 1
56160: NEG
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 1
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: LD_INT 1
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 0
56188: PUSH
56189: LD_INT 1
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 1
56198: NEG
56199: PUSH
56200: LD_INT 0
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 1
56209: NEG
56210: PUSH
56211: LD_INT 1
56213: NEG
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56228: LD_ADDR_VAR 0 60
56232: PUSH
56233: LD_INT 0
56235: PUSH
56236: LD_INT 0
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 0
56245: PUSH
56246: LD_INT 1
56248: NEG
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 1
56256: PUSH
56257: LD_INT 0
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 1
56266: PUSH
56267: LD_INT 1
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 0
56276: PUSH
56277: LD_INT 1
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 1
56286: NEG
56287: PUSH
56288: LD_INT 0
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 1
56297: NEG
56298: PUSH
56299: LD_INT 1
56301: NEG
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56316: LD_ADDR_VAR 0 61
56320: PUSH
56321: LD_INT 0
56323: PUSH
56324: LD_INT 0
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 0
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 1
56344: PUSH
56345: LD_INT 0
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 1
56354: PUSH
56355: LD_INT 1
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: LD_INT 1
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 1
56374: NEG
56375: PUSH
56376: LD_INT 0
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 1
56385: NEG
56386: PUSH
56387: LD_INT 1
56389: NEG
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56404: LD_ADDR_VAR 0 62
56408: PUSH
56409: LD_INT 0
56411: PUSH
56412: LD_INT 0
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 0
56421: PUSH
56422: LD_INT 1
56424: NEG
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 1
56432: PUSH
56433: LD_INT 0
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 1
56442: PUSH
56443: LD_INT 1
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 0
56452: PUSH
56453: LD_INT 1
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 1
56462: NEG
56463: PUSH
56464: LD_INT 0
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 1
56473: NEG
56474: PUSH
56475: LD_INT 1
56477: NEG
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56492: LD_ADDR_VAR 0 63
56496: PUSH
56497: LD_INT 0
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 0
56509: PUSH
56510: LD_INT 1
56512: NEG
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 1
56520: PUSH
56521: LD_INT 0
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 1
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 0
56540: PUSH
56541: LD_INT 1
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 1
56550: NEG
56551: PUSH
56552: LD_INT 0
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 1
56561: NEG
56562: PUSH
56563: LD_INT 1
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56580: LD_ADDR_VAR 0 64
56584: PUSH
56585: LD_INT 0
56587: PUSH
56588: LD_INT 0
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 0
56597: PUSH
56598: LD_INT 1
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 1
56608: PUSH
56609: LD_INT 0
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 1
56618: PUSH
56619: LD_INT 1
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 0
56628: PUSH
56629: LD_INT 1
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 1
56638: NEG
56639: PUSH
56640: LD_INT 0
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 1
56649: NEG
56650: PUSH
56651: LD_INT 1
56653: NEG
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: ST_TO_ADDR
// end ; 1 :
56668: GO 62565
56670: LD_INT 1
56672: DOUBLE
56673: EQUAL
56674: IFTRUE 56678
56676: GO 59301
56678: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56679: LD_ADDR_VAR 0 11
56683: PUSH
56684: LD_INT 1
56686: NEG
56687: PUSH
56688: LD_INT 3
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 0
56698: PUSH
56699: LD_INT 3
56701: NEG
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 1
56709: PUSH
56710: LD_INT 2
56712: NEG
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: LIST
56722: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56723: LD_ADDR_VAR 0 12
56727: PUSH
56728: LD_INT 2
56730: PUSH
56731: LD_INT 1
56733: NEG
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 3
56741: PUSH
56742: LD_INT 0
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 3
56751: PUSH
56752: LD_INT 1
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: LIST
56763: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56764: LD_ADDR_VAR 0 13
56768: PUSH
56769: LD_INT 3
56771: PUSH
56772: LD_INT 2
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 3
56781: PUSH
56782: LD_INT 3
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 2
56791: PUSH
56792: LD_INT 3
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: LIST
56803: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56804: LD_ADDR_VAR 0 14
56808: PUSH
56809: LD_INT 1
56811: PUSH
56812: LD_INT 3
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: LD_INT 3
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 1
56831: NEG
56832: PUSH
56833: LD_INT 2
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: LIST
56844: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56845: LD_ADDR_VAR 0 15
56849: PUSH
56850: LD_INT 2
56852: NEG
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 3
56863: NEG
56864: PUSH
56865: LD_INT 0
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 3
56874: NEG
56875: PUSH
56876: LD_INT 1
56878: NEG
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: LIST
56888: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56889: LD_ADDR_VAR 0 16
56893: PUSH
56894: LD_INT 2
56896: NEG
56897: PUSH
56898: LD_INT 3
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 3
56908: NEG
56909: PUSH
56910: LD_INT 2
56912: NEG
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 3
56920: NEG
56921: PUSH
56922: LD_INT 3
56924: NEG
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: LIST
56934: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56935: LD_ADDR_VAR 0 17
56939: PUSH
56940: LD_INT 1
56942: NEG
56943: PUSH
56944: LD_INT 3
56946: NEG
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: LD_INT 3
56957: NEG
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 1
56965: PUSH
56966: LD_INT 2
56968: NEG
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: LIST
56978: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56979: LD_ADDR_VAR 0 18
56983: PUSH
56984: LD_INT 2
56986: PUSH
56987: LD_INT 1
56989: NEG
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 3
56997: PUSH
56998: LD_INT 0
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 3
57007: PUSH
57008: LD_INT 1
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: LIST
57019: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57020: LD_ADDR_VAR 0 19
57024: PUSH
57025: LD_INT 3
57027: PUSH
57028: LD_INT 2
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 3
57037: PUSH
57038: LD_INT 3
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 2
57047: PUSH
57048: LD_INT 3
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: LIST
57059: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57060: LD_ADDR_VAR 0 20
57064: PUSH
57065: LD_INT 1
57067: PUSH
57068: LD_INT 3
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: LD_INT 3
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 1
57087: NEG
57088: PUSH
57089: LD_INT 2
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: LIST
57100: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57101: LD_ADDR_VAR 0 21
57105: PUSH
57106: LD_INT 2
57108: NEG
57109: PUSH
57110: LD_INT 1
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 3
57119: NEG
57120: PUSH
57121: LD_INT 0
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 3
57130: NEG
57131: PUSH
57132: LD_INT 1
57134: NEG
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: LIST
57144: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57145: LD_ADDR_VAR 0 22
57149: PUSH
57150: LD_INT 2
57152: NEG
57153: PUSH
57154: LD_INT 3
57156: NEG
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 3
57164: NEG
57165: PUSH
57166: LD_INT 2
57168: NEG
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 3
57176: NEG
57177: PUSH
57178: LD_INT 3
57180: NEG
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: LIST
57190: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57191: LD_ADDR_VAR 0 23
57195: PUSH
57196: LD_INT 0
57198: PUSH
57199: LD_INT 3
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 1
57209: NEG
57210: PUSH
57211: LD_INT 4
57213: NEG
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 1
57221: PUSH
57222: LD_INT 3
57224: NEG
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: LIST
57234: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57235: LD_ADDR_VAR 0 24
57239: PUSH
57240: LD_INT 3
57242: PUSH
57243: LD_INT 0
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 3
57252: PUSH
57253: LD_INT 1
57255: NEG
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 4
57263: PUSH
57264: LD_INT 1
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: LIST
57275: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57276: LD_ADDR_VAR 0 25
57280: PUSH
57281: LD_INT 3
57283: PUSH
57284: LD_INT 3
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 4
57293: PUSH
57294: LD_INT 3
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 3
57303: PUSH
57304: LD_INT 4
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: LIST
57315: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57316: LD_ADDR_VAR 0 26
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: LD_INT 3
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 1
57333: PUSH
57334: LD_INT 4
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 1
57343: NEG
57344: PUSH
57345: LD_INT 3
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: LIST
57356: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57357: LD_ADDR_VAR 0 27
57361: PUSH
57362: LD_INT 3
57364: NEG
57365: PUSH
57366: LD_INT 0
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 3
57375: NEG
57376: PUSH
57377: LD_INT 1
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 4
57386: NEG
57387: PUSH
57388: LD_INT 1
57390: NEG
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: LIST
57400: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57401: LD_ADDR_VAR 0 28
57405: PUSH
57406: LD_INT 3
57408: NEG
57409: PUSH
57410: LD_INT 3
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 3
57420: NEG
57421: PUSH
57422: LD_INT 4
57424: NEG
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 4
57432: NEG
57433: PUSH
57434: LD_INT 3
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: LIST
57446: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57447: LD_ADDR_VAR 0 29
57451: PUSH
57452: LD_INT 1
57454: NEG
57455: PUSH
57456: LD_INT 3
57458: NEG
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 0
57466: PUSH
57467: LD_INT 3
57469: NEG
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 1
57477: PUSH
57478: LD_INT 2
57480: NEG
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 1
57488: NEG
57489: PUSH
57490: LD_INT 4
57492: NEG
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 0
57500: PUSH
57501: LD_INT 4
57503: NEG
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 1
57511: PUSH
57512: LD_INT 3
57514: NEG
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 1
57522: NEG
57523: PUSH
57524: LD_INT 5
57526: NEG
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 0
57534: PUSH
57535: LD_INT 5
57537: NEG
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 1
57545: PUSH
57546: LD_INT 4
57548: NEG
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 1
57556: NEG
57557: PUSH
57558: LD_INT 6
57560: NEG
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 0
57568: PUSH
57569: LD_INT 6
57571: NEG
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 1
57579: PUSH
57580: LD_INT 5
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57602: LD_ADDR_VAR 0 30
57606: PUSH
57607: LD_INT 2
57609: PUSH
57610: LD_INT 1
57612: NEG
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 3
57620: PUSH
57621: LD_INT 0
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 3
57630: PUSH
57631: LD_INT 1
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 3
57640: PUSH
57641: LD_INT 1
57643: NEG
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 4
57651: PUSH
57652: LD_INT 0
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 4
57661: PUSH
57662: LD_INT 1
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 4
57671: PUSH
57672: LD_INT 1
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 5
57682: PUSH
57683: LD_INT 0
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 5
57692: PUSH
57693: LD_INT 1
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 5
57702: PUSH
57703: LD_INT 1
57705: NEG
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 6
57713: PUSH
57714: LD_INT 0
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 6
57723: PUSH
57724: LD_INT 1
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57745: LD_ADDR_VAR 0 31
57749: PUSH
57750: LD_INT 3
57752: PUSH
57753: LD_INT 2
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 3
57762: PUSH
57763: LD_INT 3
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 2
57772: PUSH
57773: LD_INT 3
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 4
57782: PUSH
57783: LD_INT 3
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 4
57792: PUSH
57793: LD_INT 4
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 3
57802: PUSH
57803: LD_INT 4
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 5
57812: PUSH
57813: LD_INT 4
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 5
57822: PUSH
57823: LD_INT 5
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 4
57832: PUSH
57833: LD_INT 5
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 6
57842: PUSH
57843: LD_INT 5
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 6
57852: PUSH
57853: LD_INT 6
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 5
57862: PUSH
57863: LD_INT 6
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57884: LD_ADDR_VAR 0 32
57888: PUSH
57889: LD_INT 1
57891: PUSH
57892: LD_INT 3
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 0
57901: PUSH
57902: LD_INT 3
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 1
57911: NEG
57912: PUSH
57913: LD_INT 2
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 1
57922: PUSH
57923: LD_INT 4
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 0
57932: PUSH
57933: LD_INT 4
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 1
57942: NEG
57943: PUSH
57944: LD_INT 3
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 1
57953: PUSH
57954: LD_INT 5
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 0
57963: PUSH
57964: LD_INT 5
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 1
57973: NEG
57974: PUSH
57975: LD_INT 4
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 1
57984: PUSH
57985: LD_INT 6
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 0
57994: PUSH
57995: LD_INT 6
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 1
58004: NEG
58005: PUSH
58006: LD_INT 5
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58027: LD_ADDR_VAR 0 33
58031: PUSH
58032: LD_INT 2
58034: NEG
58035: PUSH
58036: LD_INT 1
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 3
58045: NEG
58046: PUSH
58047: LD_INT 0
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 3
58056: NEG
58057: PUSH
58058: LD_INT 1
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 3
58068: NEG
58069: PUSH
58070: LD_INT 1
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 4
58079: NEG
58080: PUSH
58081: LD_INT 0
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 4
58090: NEG
58091: PUSH
58092: LD_INT 1
58094: NEG
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 4
58102: NEG
58103: PUSH
58104: LD_INT 1
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 5
58113: NEG
58114: PUSH
58115: LD_INT 0
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 5
58124: NEG
58125: PUSH
58126: LD_INT 1
58128: NEG
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 5
58136: NEG
58137: PUSH
58138: LD_INT 1
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 6
58147: NEG
58148: PUSH
58149: LD_INT 0
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 6
58158: NEG
58159: PUSH
58160: LD_INT 1
58162: NEG
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58182: LD_ADDR_VAR 0 34
58186: PUSH
58187: LD_INT 2
58189: NEG
58190: PUSH
58191: LD_INT 3
58193: NEG
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_INT 3
58201: NEG
58202: PUSH
58203: LD_INT 2
58205: NEG
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 3
58213: NEG
58214: PUSH
58215: LD_INT 3
58217: NEG
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 3
58225: NEG
58226: PUSH
58227: LD_INT 4
58229: NEG
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 4
58237: NEG
58238: PUSH
58239: LD_INT 3
58241: NEG
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 4
58249: NEG
58250: PUSH
58251: LD_INT 4
58253: NEG
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 4
58261: NEG
58262: PUSH
58263: LD_INT 5
58265: NEG
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 5
58273: NEG
58274: PUSH
58275: LD_INT 4
58277: NEG
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 5
58285: NEG
58286: PUSH
58287: LD_INT 5
58289: NEG
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 5
58297: NEG
58298: PUSH
58299: LD_INT 6
58301: NEG
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 6
58309: NEG
58310: PUSH
58311: LD_INT 5
58313: NEG
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 6
58321: NEG
58322: PUSH
58323: LD_INT 6
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58345: LD_ADDR_VAR 0 41
58349: PUSH
58350: LD_INT 0
58352: PUSH
58353: LD_INT 2
58355: NEG
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 1
58363: NEG
58364: PUSH
58365: LD_INT 3
58367: NEG
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 1
58375: PUSH
58376: LD_INT 2
58378: NEG
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: LIST
58388: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58389: LD_ADDR_VAR 0 42
58393: PUSH
58394: LD_INT 2
58396: PUSH
58397: LD_INT 0
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 2
58406: PUSH
58407: LD_INT 1
58409: NEG
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 3
58417: PUSH
58418: LD_INT 1
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: LIST
58429: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58430: LD_ADDR_VAR 0 43
58434: PUSH
58435: LD_INT 2
58437: PUSH
58438: LD_INT 2
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 3
58447: PUSH
58448: LD_INT 2
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 2
58457: PUSH
58458: LD_INT 3
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: LIST
58469: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58470: LD_ADDR_VAR 0 44
58474: PUSH
58475: LD_INT 0
58477: PUSH
58478: LD_INT 2
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 1
58487: PUSH
58488: LD_INT 3
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 1
58497: NEG
58498: PUSH
58499: LD_INT 2
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: LIST
58510: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58511: LD_ADDR_VAR 0 45
58515: PUSH
58516: LD_INT 2
58518: NEG
58519: PUSH
58520: LD_INT 0
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 2
58529: NEG
58530: PUSH
58531: LD_INT 1
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 3
58540: NEG
58541: PUSH
58542: LD_INT 1
58544: NEG
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: LIST
58554: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58555: LD_ADDR_VAR 0 46
58559: PUSH
58560: LD_INT 2
58562: NEG
58563: PUSH
58564: LD_INT 2
58566: NEG
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 2
58574: NEG
58575: PUSH
58576: LD_INT 3
58578: NEG
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 3
58586: NEG
58587: PUSH
58588: LD_INT 2
58590: NEG
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: LIST
58600: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58601: LD_ADDR_VAR 0 47
58605: PUSH
58606: LD_INT 2
58608: NEG
58609: PUSH
58610: LD_INT 3
58612: NEG
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 1
58620: NEG
58621: PUSH
58622: LD_INT 3
58624: NEG
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58634: LD_ADDR_VAR 0 48
58638: PUSH
58639: LD_INT 1
58641: PUSH
58642: LD_INT 2
58644: NEG
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 2
58652: PUSH
58653: LD_INT 1
58655: NEG
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58665: LD_ADDR_VAR 0 49
58669: PUSH
58670: LD_INT 3
58672: PUSH
58673: LD_INT 1
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 3
58682: PUSH
58683: LD_INT 2
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58694: LD_ADDR_VAR 0 50
58698: PUSH
58699: LD_INT 2
58701: PUSH
58702: LD_INT 3
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 1
58711: PUSH
58712: LD_INT 3
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58723: LD_ADDR_VAR 0 51
58727: PUSH
58728: LD_INT 1
58730: NEG
58731: PUSH
58732: LD_INT 2
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 2
58741: NEG
58742: PUSH
58743: LD_INT 1
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58754: LD_ADDR_VAR 0 52
58758: PUSH
58759: LD_INT 3
58761: NEG
58762: PUSH
58763: LD_INT 1
58765: NEG
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 3
58773: NEG
58774: PUSH
58775: LD_INT 2
58777: NEG
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58787: LD_ADDR_VAR 0 53
58791: PUSH
58792: LD_INT 1
58794: NEG
58795: PUSH
58796: LD_INT 3
58798: NEG
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 0
58806: PUSH
58807: LD_INT 3
58809: NEG
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 1
58817: PUSH
58818: LD_INT 2
58820: NEG
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: LIST
58830: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58831: LD_ADDR_VAR 0 54
58835: PUSH
58836: LD_INT 2
58838: PUSH
58839: LD_INT 1
58841: NEG
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 3
58849: PUSH
58850: LD_INT 0
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 3
58859: PUSH
58860: LD_INT 1
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: LIST
58871: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58872: LD_ADDR_VAR 0 55
58876: PUSH
58877: LD_INT 3
58879: PUSH
58880: LD_INT 2
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 3
58889: PUSH
58890: LD_INT 3
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 2
58899: PUSH
58900: LD_INT 3
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: LIST
58911: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58912: LD_ADDR_VAR 0 56
58916: PUSH
58917: LD_INT 1
58919: PUSH
58920: LD_INT 3
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 0
58929: PUSH
58930: LD_INT 3
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 1
58939: NEG
58940: PUSH
58941: LD_INT 2
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: LIST
58952: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58953: LD_ADDR_VAR 0 57
58957: PUSH
58958: LD_INT 2
58960: NEG
58961: PUSH
58962: LD_INT 1
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 3
58971: NEG
58972: PUSH
58973: LD_INT 0
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 3
58982: NEG
58983: PUSH
58984: LD_INT 1
58986: NEG
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: LIST
58996: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58997: LD_ADDR_VAR 0 58
59001: PUSH
59002: LD_INT 2
59004: NEG
59005: PUSH
59006: LD_INT 3
59008: NEG
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 3
59016: NEG
59017: PUSH
59018: LD_INT 2
59020: NEG
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 3
59028: NEG
59029: PUSH
59030: LD_INT 3
59032: NEG
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: LIST
59042: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59043: LD_ADDR_VAR 0 59
59047: PUSH
59048: LD_INT 1
59050: NEG
59051: PUSH
59052: LD_INT 2
59054: NEG
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 0
59062: PUSH
59063: LD_INT 2
59065: NEG
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 1
59073: PUSH
59074: LD_INT 1
59076: NEG
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: LIST
59086: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59087: LD_ADDR_VAR 0 60
59091: PUSH
59092: LD_INT 1
59094: PUSH
59095: LD_INT 1
59097: NEG
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 2
59105: PUSH
59106: LD_INT 0
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 2
59115: PUSH
59116: LD_INT 1
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: LIST
59127: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59128: LD_ADDR_VAR 0 61
59132: PUSH
59133: LD_INT 2
59135: PUSH
59136: LD_INT 1
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 2
59145: PUSH
59146: LD_INT 2
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 1
59155: PUSH
59156: LD_INT 2
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: LIST
59167: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59168: LD_ADDR_VAR 0 62
59172: PUSH
59173: LD_INT 1
59175: PUSH
59176: LD_INT 2
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 0
59185: PUSH
59186: LD_INT 2
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 1
59195: NEG
59196: PUSH
59197: LD_INT 1
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: LIST
59208: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59209: LD_ADDR_VAR 0 63
59213: PUSH
59214: LD_INT 1
59216: NEG
59217: PUSH
59218: LD_INT 1
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 2
59227: NEG
59228: PUSH
59229: LD_INT 0
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 2
59238: NEG
59239: PUSH
59240: LD_INT 1
59242: NEG
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: LIST
59252: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59253: LD_ADDR_VAR 0 64
59257: PUSH
59258: LD_INT 1
59260: NEG
59261: PUSH
59262: LD_INT 2
59264: NEG
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 2
59272: NEG
59273: PUSH
59274: LD_INT 1
59276: NEG
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 2
59284: NEG
59285: PUSH
59286: LD_INT 2
59288: NEG
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: LIST
59298: ST_TO_ADDR
// end ; 2 :
59299: GO 62565
59301: LD_INT 2
59303: DOUBLE
59304: EQUAL
59305: IFTRUE 59309
59307: GO 62564
59309: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59310: LD_ADDR_VAR 0 29
59314: PUSH
59315: LD_INT 4
59317: PUSH
59318: LD_INT 0
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 4
59327: PUSH
59328: LD_INT 1
59330: NEG
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 5
59338: PUSH
59339: LD_INT 0
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 5
59348: PUSH
59349: LD_INT 1
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 4
59358: PUSH
59359: LD_INT 1
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 3
59368: PUSH
59369: LD_INT 0
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 3
59378: PUSH
59379: LD_INT 1
59381: NEG
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 3
59389: PUSH
59390: LD_INT 2
59392: NEG
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 5
59400: PUSH
59401: LD_INT 2
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 3
59410: PUSH
59411: LD_INT 3
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 3
59420: PUSH
59421: LD_INT 2
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 4
59430: PUSH
59431: LD_INT 3
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 4
59440: PUSH
59441: LD_INT 4
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 3
59450: PUSH
59451: LD_INT 4
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 2
59460: PUSH
59461: LD_INT 3
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 2
59470: PUSH
59471: LD_INT 2
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 4
59480: PUSH
59481: LD_INT 2
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 2
59490: PUSH
59491: LD_INT 4
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 0
59500: PUSH
59501: LD_INT 4
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 0
59510: PUSH
59511: LD_INT 3
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 1
59520: PUSH
59521: LD_INT 4
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 1
59530: PUSH
59531: LD_INT 5
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 0
59540: PUSH
59541: LD_INT 5
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 1
59550: NEG
59551: PUSH
59552: LD_INT 4
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 1
59561: NEG
59562: PUSH
59563: LD_INT 3
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 2
59572: PUSH
59573: LD_INT 5
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 2
59582: NEG
59583: PUSH
59584: LD_INT 3
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 3
59593: NEG
59594: PUSH
59595: LD_INT 0
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 3
59604: NEG
59605: PUSH
59606: LD_INT 1
59608: NEG
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 2
59616: NEG
59617: PUSH
59618: LD_INT 0
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 2
59627: NEG
59628: PUSH
59629: LD_INT 1
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 3
59638: NEG
59639: PUSH
59640: LD_INT 1
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 4
59649: NEG
59650: PUSH
59651: LD_INT 0
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 4
59660: NEG
59661: PUSH
59662: LD_INT 1
59664: NEG
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 4
59672: NEG
59673: PUSH
59674: LD_INT 2
59676: NEG
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 2
59684: NEG
59685: PUSH
59686: LD_INT 2
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 4
59695: NEG
59696: PUSH
59697: LD_INT 4
59699: NEG
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 4
59707: NEG
59708: PUSH
59709: LD_INT 5
59711: NEG
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 3
59719: NEG
59720: PUSH
59721: LD_INT 4
59723: NEG
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 3
59731: NEG
59732: PUSH
59733: LD_INT 3
59735: NEG
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 4
59743: NEG
59744: PUSH
59745: LD_INT 3
59747: NEG
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 5
59755: NEG
59756: PUSH
59757: LD_INT 4
59759: NEG
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 5
59767: NEG
59768: PUSH
59769: LD_INT 5
59771: NEG
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 3
59779: NEG
59780: PUSH
59781: LD_INT 5
59783: NEG
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 5
59791: NEG
59792: PUSH
59793: LD_INT 3
59795: NEG
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59848: LD_ADDR_VAR 0 30
59852: PUSH
59853: LD_INT 4
59855: PUSH
59856: LD_INT 4
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 4
59865: PUSH
59866: LD_INT 3
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 5
59875: PUSH
59876: LD_INT 4
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 5
59885: PUSH
59886: LD_INT 5
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 4
59895: PUSH
59896: LD_INT 5
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 3
59905: PUSH
59906: LD_INT 4
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 3
59915: PUSH
59916: LD_INT 3
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 5
59925: PUSH
59926: LD_INT 3
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 3
59935: PUSH
59936: LD_INT 5
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 0
59945: PUSH
59946: LD_INT 3
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 0
59955: PUSH
59956: LD_INT 2
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 1
59965: PUSH
59966: LD_INT 3
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 1
59975: PUSH
59976: LD_INT 4
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 0
59985: PUSH
59986: LD_INT 4
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 1
59995: NEG
59996: PUSH
59997: LD_INT 3
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 1
60006: NEG
60007: PUSH
60008: LD_INT 2
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 2
60017: PUSH
60018: LD_INT 4
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 2
60027: NEG
60028: PUSH
60029: LD_INT 2
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 4
60038: NEG
60039: PUSH
60040: LD_INT 0
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 4
60049: NEG
60050: PUSH
60051: LD_INT 1
60053: NEG
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 3
60061: NEG
60062: PUSH
60063: LD_INT 0
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 3
60072: NEG
60073: PUSH
60074: LD_INT 1
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 4
60083: NEG
60084: PUSH
60085: LD_INT 1
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_INT 5
60094: NEG
60095: PUSH
60096: LD_INT 0
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 5
60105: NEG
60106: PUSH
60107: LD_INT 1
60109: NEG
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 5
60117: NEG
60118: PUSH
60119: LD_INT 2
60121: NEG
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 3
60129: NEG
60130: PUSH
60131: LD_INT 2
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 3
60140: NEG
60141: PUSH
60142: LD_INT 3
60144: NEG
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 3
60152: NEG
60153: PUSH
60154: LD_INT 4
60156: NEG
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 2
60164: NEG
60165: PUSH
60166: LD_INT 3
60168: NEG
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 2
60176: NEG
60177: PUSH
60178: LD_INT 2
60180: NEG
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 3
60188: NEG
60189: PUSH
60190: LD_INT 2
60192: NEG
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 4
60200: NEG
60201: PUSH
60202: LD_INT 3
60204: NEG
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 4
60212: NEG
60213: PUSH
60214: LD_INT 4
60216: NEG
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 2
60224: NEG
60225: PUSH
60226: LD_INT 4
60228: NEG
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 4
60236: NEG
60237: PUSH
60238: LD_INT 2
60240: NEG
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 0
60248: PUSH
60249: LD_INT 4
60251: NEG
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 0
60259: PUSH
60260: LD_INT 5
60262: NEG
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 1
60270: PUSH
60271: LD_INT 4
60273: NEG
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 1
60281: PUSH
60282: LD_INT 3
60284: NEG
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 0
60292: PUSH
60293: LD_INT 3
60295: NEG
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 1
60303: NEG
60304: PUSH
60305: LD_INT 4
60307: NEG
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 1
60315: NEG
60316: PUSH
60317: LD_INT 5
60319: NEG
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 2
60327: PUSH
60328: LD_INT 3
60330: NEG
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 2
60338: NEG
60339: PUSH
60340: LD_INT 5
60342: NEG
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60395: LD_ADDR_VAR 0 31
60399: PUSH
60400: LD_INT 0
60402: PUSH
60403: LD_INT 4
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 0
60412: PUSH
60413: LD_INT 3
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 1
60422: PUSH
60423: LD_INT 4
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 1
60432: PUSH
60433: LD_INT 5
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 0
60442: PUSH
60443: LD_INT 5
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 1
60452: NEG
60453: PUSH
60454: LD_INT 4
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 1
60463: NEG
60464: PUSH
60465: LD_INT 3
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 2
60474: PUSH
60475: LD_INT 5
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 2
60484: NEG
60485: PUSH
60486: LD_INT 3
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 3
60495: NEG
60496: PUSH
60497: LD_INT 0
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 3
60506: NEG
60507: PUSH
60508: LD_INT 1
60510: NEG
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 2
60518: NEG
60519: PUSH
60520: LD_INT 0
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 2
60529: NEG
60530: PUSH
60531: LD_INT 1
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 3
60540: NEG
60541: PUSH
60542: LD_INT 1
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 4
60551: NEG
60552: PUSH
60553: LD_INT 0
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 4
60562: NEG
60563: PUSH
60564: LD_INT 1
60566: NEG
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 4
60574: NEG
60575: PUSH
60576: LD_INT 2
60578: NEG
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 2
60586: NEG
60587: PUSH
60588: LD_INT 2
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 4
60597: NEG
60598: PUSH
60599: LD_INT 4
60601: NEG
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 4
60609: NEG
60610: PUSH
60611: LD_INT 5
60613: NEG
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 3
60621: NEG
60622: PUSH
60623: LD_INT 4
60625: NEG
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 3
60633: NEG
60634: PUSH
60635: LD_INT 3
60637: NEG
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 4
60645: NEG
60646: PUSH
60647: LD_INT 3
60649: NEG
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 5
60657: NEG
60658: PUSH
60659: LD_INT 4
60661: NEG
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 5
60669: NEG
60670: PUSH
60671: LD_INT 5
60673: NEG
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 3
60681: NEG
60682: PUSH
60683: LD_INT 5
60685: NEG
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 5
60693: NEG
60694: PUSH
60695: LD_INT 3
60697: NEG
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 0
60705: PUSH
60706: LD_INT 3
60708: NEG
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 0
60716: PUSH
60717: LD_INT 4
60719: NEG
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 1
60727: PUSH
60728: LD_INT 3
60730: NEG
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 1
60738: PUSH
60739: LD_INT 2
60741: NEG
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 0
60749: PUSH
60750: LD_INT 2
60752: NEG
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 1
60760: NEG
60761: PUSH
60762: LD_INT 3
60764: NEG
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 1
60772: NEG
60773: PUSH
60774: LD_INT 4
60776: NEG
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 2
60784: PUSH
60785: LD_INT 2
60787: NEG
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 2
60795: NEG
60796: PUSH
60797: LD_INT 4
60799: NEG
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 4
60807: PUSH
60808: LD_INT 0
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 4
60817: PUSH
60818: LD_INT 1
60820: NEG
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 5
60828: PUSH
60829: LD_INT 0
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 5
60838: PUSH
60839: LD_INT 1
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 4
60848: PUSH
60849: LD_INT 1
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 3
60858: PUSH
60859: LD_INT 0
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 3
60868: PUSH
60869: LD_INT 1
60871: NEG
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 3
60879: PUSH
60880: LD_INT 2
60882: NEG
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 5
60890: PUSH
60891: LD_INT 2
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60945: LD_ADDR_VAR 0 32
60949: PUSH
60950: LD_INT 4
60952: NEG
60953: PUSH
60954: LD_INT 0
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 4
60963: NEG
60964: PUSH
60965: LD_INT 1
60967: NEG
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 3
60975: NEG
60976: PUSH
60977: LD_INT 0
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 3
60986: NEG
60987: PUSH
60988: LD_INT 1
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 4
60997: NEG
60998: PUSH
60999: LD_INT 1
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 5
61008: NEG
61009: PUSH
61010: LD_INT 0
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 5
61019: NEG
61020: PUSH
61021: LD_INT 1
61023: NEG
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 5
61031: NEG
61032: PUSH
61033: LD_INT 2
61035: NEG
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 3
61043: NEG
61044: PUSH
61045: LD_INT 2
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 3
61054: NEG
61055: PUSH
61056: LD_INT 3
61058: NEG
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 3
61066: NEG
61067: PUSH
61068: LD_INT 4
61070: NEG
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 2
61078: NEG
61079: PUSH
61080: LD_INT 3
61082: NEG
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 2
61090: NEG
61091: PUSH
61092: LD_INT 2
61094: NEG
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 3
61102: NEG
61103: PUSH
61104: LD_INT 2
61106: NEG
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 4
61114: NEG
61115: PUSH
61116: LD_INT 3
61118: NEG
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 4
61126: NEG
61127: PUSH
61128: LD_INT 4
61130: NEG
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 2
61138: NEG
61139: PUSH
61140: LD_INT 4
61142: NEG
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 4
61150: NEG
61151: PUSH
61152: LD_INT 2
61154: NEG
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: LD_INT 0
61162: PUSH
61163: LD_INT 4
61165: NEG
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 0
61173: PUSH
61174: LD_INT 5
61176: NEG
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 1
61184: PUSH
61185: LD_INT 4
61187: NEG
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 1
61195: PUSH
61196: LD_INT 3
61198: NEG
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 0
61206: PUSH
61207: LD_INT 3
61209: NEG
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 1
61217: NEG
61218: PUSH
61219: LD_INT 4
61221: NEG
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 1
61229: NEG
61230: PUSH
61231: LD_INT 5
61233: NEG
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 2
61241: PUSH
61242: LD_INT 3
61244: NEG
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 2
61252: NEG
61253: PUSH
61254: LD_INT 5
61256: NEG
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 3
61264: PUSH
61265: LD_INT 0
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 3
61274: PUSH
61275: LD_INT 1
61277: NEG
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 4
61285: PUSH
61286: LD_INT 0
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 4
61295: PUSH
61296: LD_INT 1
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 3
61305: PUSH
61306: LD_INT 1
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 2
61315: PUSH
61316: LD_INT 0
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 2
61325: PUSH
61326: LD_INT 1
61328: NEG
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 2
61336: PUSH
61337: LD_INT 2
61339: NEG
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 4
61347: PUSH
61348: LD_INT 2
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 4
61357: PUSH
61358: LD_INT 4
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 4
61367: PUSH
61368: LD_INT 3
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 5
61377: PUSH
61378: LD_INT 4
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 5
61387: PUSH
61388: LD_INT 5
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 4
61397: PUSH
61398: LD_INT 5
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 3
61407: PUSH
61408: LD_INT 4
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 3
61417: PUSH
61418: LD_INT 3
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 5
61427: PUSH
61428: LD_INT 3
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 3
61437: PUSH
61438: LD_INT 5
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61492: LD_ADDR_VAR 0 33
61496: PUSH
61497: LD_INT 4
61499: NEG
61500: PUSH
61501: LD_INT 4
61503: NEG
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 4
61511: NEG
61512: PUSH
61513: LD_INT 5
61515: NEG
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 3
61523: NEG
61524: PUSH
61525: LD_INT 4
61527: NEG
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 3
61535: NEG
61536: PUSH
61537: LD_INT 3
61539: NEG
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 4
61547: NEG
61548: PUSH
61549: LD_INT 3
61551: NEG
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 5
61559: NEG
61560: PUSH
61561: LD_INT 4
61563: NEG
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 5
61571: NEG
61572: PUSH
61573: LD_INT 5
61575: NEG
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 3
61583: NEG
61584: PUSH
61585: LD_INT 5
61587: NEG
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 5
61595: NEG
61596: PUSH
61597: LD_INT 3
61599: NEG
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: LD_INT 0
61607: PUSH
61608: LD_INT 3
61610: NEG
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 0
61618: PUSH
61619: LD_INT 4
61621: NEG
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 1
61629: PUSH
61630: LD_INT 3
61632: NEG
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 1
61640: PUSH
61641: LD_INT 2
61643: NEG
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 0
61651: PUSH
61652: LD_INT 2
61654: NEG
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 1
61662: NEG
61663: PUSH
61664: LD_INT 3
61666: NEG
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 1
61674: NEG
61675: PUSH
61676: LD_INT 4
61678: NEG
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 2
61686: PUSH
61687: LD_INT 2
61689: NEG
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 2
61697: NEG
61698: PUSH
61699: LD_INT 4
61701: NEG
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 4
61709: PUSH
61710: LD_INT 0
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 4
61719: PUSH
61720: LD_INT 1
61722: NEG
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 5
61730: PUSH
61731: LD_INT 0
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 5
61740: PUSH
61741: LD_INT 1
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 4
61750: PUSH
61751: LD_INT 1
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 3
61760: PUSH
61761: LD_INT 0
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 3
61770: PUSH
61771: LD_INT 1
61773: NEG
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 3
61781: PUSH
61782: LD_INT 2
61784: NEG
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 5
61792: PUSH
61793: LD_INT 2
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: LD_INT 3
61802: PUSH
61803: LD_INT 3
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 3
61812: PUSH
61813: LD_INT 2
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 4
61822: PUSH
61823: LD_INT 3
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 4
61832: PUSH
61833: LD_INT 4
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 3
61842: PUSH
61843: LD_INT 4
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 2
61852: PUSH
61853: LD_INT 3
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 2
61862: PUSH
61863: LD_INT 2
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 4
61872: PUSH
61873: LD_INT 2
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 2
61882: PUSH
61883: LD_INT 4
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 0
61892: PUSH
61893: LD_INT 4
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 0
61902: PUSH
61903: LD_INT 3
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 1
61912: PUSH
61913: LD_INT 4
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 1
61922: PUSH
61923: LD_INT 5
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 0
61932: PUSH
61933: LD_INT 5
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 1
61942: NEG
61943: PUSH
61944: LD_INT 4
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 1
61953: NEG
61954: PUSH
61955: LD_INT 3
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 2
61964: PUSH
61965: LD_INT 5
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 2
61974: NEG
61975: PUSH
61976: LD_INT 3
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62030: LD_ADDR_VAR 0 34
62034: PUSH
62035: LD_INT 0
62037: PUSH
62038: LD_INT 4
62040: NEG
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: PUSH
62046: LD_INT 0
62048: PUSH
62049: LD_INT 5
62051: NEG
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 1
62059: PUSH
62060: LD_INT 4
62062: NEG
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 1
62070: PUSH
62071: LD_INT 3
62073: NEG
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 0
62081: PUSH
62082: LD_INT 3
62084: NEG
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 1
62092: NEG
62093: PUSH
62094: LD_INT 4
62096: NEG
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 1
62104: NEG
62105: PUSH
62106: LD_INT 5
62108: NEG
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 2
62116: PUSH
62117: LD_INT 3
62119: NEG
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 2
62127: NEG
62128: PUSH
62129: LD_INT 5
62131: NEG
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 3
62139: PUSH
62140: LD_INT 0
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 3
62149: PUSH
62150: LD_INT 1
62152: NEG
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 4
62160: PUSH
62161: LD_INT 0
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 4
62170: PUSH
62171: LD_INT 1
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 3
62180: PUSH
62181: LD_INT 1
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 2
62190: PUSH
62191: LD_INT 0
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 2
62200: PUSH
62201: LD_INT 1
62203: NEG
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: LD_INT 2
62211: PUSH
62212: LD_INT 2
62214: NEG
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 4
62222: PUSH
62223: LD_INT 2
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 4
62232: PUSH
62233: LD_INT 4
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 4
62242: PUSH
62243: LD_INT 3
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 5
62252: PUSH
62253: LD_INT 4
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 5
62262: PUSH
62263: LD_INT 5
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 4
62272: PUSH
62273: LD_INT 5
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 3
62282: PUSH
62283: LD_INT 4
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 3
62292: PUSH
62293: LD_INT 3
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 5
62302: PUSH
62303: LD_INT 3
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 3
62312: PUSH
62313: LD_INT 5
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 0
62322: PUSH
62323: LD_INT 3
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 0
62332: PUSH
62333: LD_INT 2
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 1
62342: PUSH
62343: LD_INT 3
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 1
62352: PUSH
62353: LD_INT 4
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_INT 0
62362: PUSH
62363: LD_INT 4
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 1
62372: NEG
62373: PUSH
62374: LD_INT 3
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 1
62383: NEG
62384: PUSH
62385: LD_INT 2
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 2
62394: PUSH
62395: LD_INT 4
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 2
62404: NEG
62405: PUSH
62406: LD_INT 2
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 4
62415: NEG
62416: PUSH
62417: LD_INT 0
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 4
62426: NEG
62427: PUSH
62428: LD_INT 1
62430: NEG
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 3
62438: NEG
62439: PUSH
62440: LD_INT 0
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 3
62449: NEG
62450: PUSH
62451: LD_INT 1
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 4
62460: NEG
62461: PUSH
62462: LD_INT 1
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 5
62471: NEG
62472: PUSH
62473: LD_INT 0
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 5
62482: NEG
62483: PUSH
62484: LD_INT 1
62486: NEG
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 5
62494: NEG
62495: PUSH
62496: LD_INT 2
62498: NEG
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 3
62506: NEG
62507: PUSH
62508: LD_INT 2
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: ST_TO_ADDR
// end ; end ;
62562: GO 62565
62564: POP
// case btype of b_depot , b_warehouse :
62565: LD_VAR 0 1
62569: PUSH
62570: LD_INT 0
62572: DOUBLE
62573: EQUAL
62574: IFTRUE 62584
62576: LD_INT 1
62578: DOUBLE
62579: EQUAL
62580: IFTRUE 62584
62582: GO 62785
62584: POP
// case nation of nation_american :
62585: LD_VAR 0 5
62589: PUSH
62590: LD_INT 1
62592: DOUBLE
62593: EQUAL
62594: IFTRUE 62598
62596: GO 62654
62598: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62599: LD_ADDR_VAR 0 9
62603: PUSH
62604: LD_VAR 0 11
62608: PUSH
62609: LD_VAR 0 12
62613: PUSH
62614: LD_VAR 0 13
62618: PUSH
62619: LD_VAR 0 14
62623: PUSH
62624: LD_VAR 0 15
62628: PUSH
62629: LD_VAR 0 16
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: PUSH
62642: LD_VAR 0 4
62646: PUSH
62647: LD_INT 1
62649: PLUS
62650: ARRAY
62651: ST_TO_ADDR
62652: GO 62783
62654: LD_INT 2
62656: DOUBLE
62657: EQUAL
62658: IFTRUE 62662
62660: GO 62718
62662: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62663: LD_ADDR_VAR 0 9
62667: PUSH
62668: LD_VAR 0 17
62672: PUSH
62673: LD_VAR 0 18
62677: PUSH
62678: LD_VAR 0 19
62682: PUSH
62683: LD_VAR 0 20
62687: PUSH
62688: LD_VAR 0 21
62692: PUSH
62693: LD_VAR 0 22
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: PUSH
62706: LD_VAR 0 4
62710: PUSH
62711: LD_INT 1
62713: PLUS
62714: ARRAY
62715: ST_TO_ADDR
62716: GO 62783
62718: LD_INT 3
62720: DOUBLE
62721: EQUAL
62722: IFTRUE 62726
62724: GO 62782
62726: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62727: LD_ADDR_VAR 0 9
62731: PUSH
62732: LD_VAR 0 23
62736: PUSH
62737: LD_VAR 0 24
62741: PUSH
62742: LD_VAR 0 25
62746: PUSH
62747: LD_VAR 0 26
62751: PUSH
62752: LD_VAR 0 27
62756: PUSH
62757: LD_VAR 0 28
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: PUSH
62770: LD_VAR 0 4
62774: PUSH
62775: LD_INT 1
62777: PLUS
62778: ARRAY
62779: ST_TO_ADDR
62780: GO 62783
62782: POP
62783: GO 63338
62785: LD_INT 2
62787: DOUBLE
62788: EQUAL
62789: IFTRUE 62799
62791: LD_INT 3
62793: DOUBLE
62794: EQUAL
62795: IFTRUE 62799
62797: GO 62855
62799: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62800: LD_ADDR_VAR 0 9
62804: PUSH
62805: LD_VAR 0 29
62809: PUSH
62810: LD_VAR 0 30
62814: PUSH
62815: LD_VAR 0 31
62819: PUSH
62820: LD_VAR 0 32
62824: PUSH
62825: LD_VAR 0 33
62829: PUSH
62830: LD_VAR 0 34
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: PUSH
62843: LD_VAR 0 4
62847: PUSH
62848: LD_INT 1
62850: PLUS
62851: ARRAY
62852: ST_TO_ADDR
62853: GO 63338
62855: LD_INT 16
62857: DOUBLE
62858: EQUAL
62859: IFTRUE 62917
62861: LD_INT 17
62863: DOUBLE
62864: EQUAL
62865: IFTRUE 62917
62867: LD_INT 18
62869: DOUBLE
62870: EQUAL
62871: IFTRUE 62917
62873: LD_INT 19
62875: DOUBLE
62876: EQUAL
62877: IFTRUE 62917
62879: LD_INT 22
62881: DOUBLE
62882: EQUAL
62883: IFTRUE 62917
62885: LD_INT 20
62887: DOUBLE
62888: EQUAL
62889: IFTRUE 62917
62891: LD_INT 21
62893: DOUBLE
62894: EQUAL
62895: IFTRUE 62917
62897: LD_INT 23
62899: DOUBLE
62900: EQUAL
62901: IFTRUE 62917
62903: LD_INT 24
62905: DOUBLE
62906: EQUAL
62907: IFTRUE 62917
62909: LD_INT 25
62911: DOUBLE
62912: EQUAL
62913: IFTRUE 62917
62915: GO 62973
62917: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62918: LD_ADDR_VAR 0 9
62922: PUSH
62923: LD_VAR 0 35
62927: PUSH
62928: LD_VAR 0 36
62932: PUSH
62933: LD_VAR 0 37
62937: PUSH
62938: LD_VAR 0 38
62942: PUSH
62943: LD_VAR 0 39
62947: PUSH
62948: LD_VAR 0 40
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: PUSH
62961: LD_VAR 0 4
62965: PUSH
62966: LD_INT 1
62968: PLUS
62969: ARRAY
62970: ST_TO_ADDR
62971: GO 63338
62973: LD_INT 6
62975: DOUBLE
62976: EQUAL
62977: IFTRUE 63029
62979: LD_INT 7
62981: DOUBLE
62982: EQUAL
62983: IFTRUE 63029
62985: LD_INT 8
62987: DOUBLE
62988: EQUAL
62989: IFTRUE 63029
62991: LD_INT 13
62993: DOUBLE
62994: EQUAL
62995: IFTRUE 63029
62997: LD_INT 12
62999: DOUBLE
63000: EQUAL
63001: IFTRUE 63029
63003: LD_INT 15
63005: DOUBLE
63006: EQUAL
63007: IFTRUE 63029
63009: LD_INT 11
63011: DOUBLE
63012: EQUAL
63013: IFTRUE 63029
63015: LD_INT 14
63017: DOUBLE
63018: EQUAL
63019: IFTRUE 63029
63021: LD_INT 10
63023: DOUBLE
63024: EQUAL
63025: IFTRUE 63029
63027: GO 63085
63029: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63030: LD_ADDR_VAR 0 9
63034: PUSH
63035: LD_VAR 0 41
63039: PUSH
63040: LD_VAR 0 42
63044: PUSH
63045: LD_VAR 0 43
63049: PUSH
63050: LD_VAR 0 44
63054: PUSH
63055: LD_VAR 0 45
63059: PUSH
63060: LD_VAR 0 46
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: PUSH
63073: LD_VAR 0 4
63077: PUSH
63078: LD_INT 1
63080: PLUS
63081: ARRAY
63082: ST_TO_ADDR
63083: GO 63338
63085: LD_INT 36
63087: DOUBLE
63088: EQUAL
63089: IFTRUE 63093
63091: GO 63149
63093: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63094: LD_ADDR_VAR 0 9
63098: PUSH
63099: LD_VAR 0 47
63103: PUSH
63104: LD_VAR 0 48
63108: PUSH
63109: LD_VAR 0 49
63113: PUSH
63114: LD_VAR 0 50
63118: PUSH
63119: LD_VAR 0 51
63123: PUSH
63124: LD_VAR 0 52
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: PUSH
63137: LD_VAR 0 4
63141: PUSH
63142: LD_INT 1
63144: PLUS
63145: ARRAY
63146: ST_TO_ADDR
63147: GO 63338
63149: LD_INT 4
63151: DOUBLE
63152: EQUAL
63153: IFTRUE 63175
63155: LD_INT 5
63157: DOUBLE
63158: EQUAL
63159: IFTRUE 63175
63161: LD_INT 34
63163: DOUBLE
63164: EQUAL
63165: IFTRUE 63175
63167: LD_INT 37
63169: DOUBLE
63170: EQUAL
63171: IFTRUE 63175
63173: GO 63231
63175: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63176: LD_ADDR_VAR 0 9
63180: PUSH
63181: LD_VAR 0 53
63185: PUSH
63186: LD_VAR 0 54
63190: PUSH
63191: LD_VAR 0 55
63195: PUSH
63196: LD_VAR 0 56
63200: PUSH
63201: LD_VAR 0 57
63205: PUSH
63206: LD_VAR 0 58
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: LIST
63217: LIST
63218: PUSH
63219: LD_VAR 0 4
63223: PUSH
63224: LD_INT 1
63226: PLUS
63227: ARRAY
63228: ST_TO_ADDR
63229: GO 63338
63231: LD_INT 31
63233: DOUBLE
63234: EQUAL
63235: IFTRUE 63281
63237: LD_INT 32
63239: DOUBLE
63240: EQUAL
63241: IFTRUE 63281
63243: LD_INT 33
63245: DOUBLE
63246: EQUAL
63247: IFTRUE 63281
63249: LD_INT 27
63251: DOUBLE
63252: EQUAL
63253: IFTRUE 63281
63255: LD_INT 26
63257: DOUBLE
63258: EQUAL
63259: IFTRUE 63281
63261: LD_INT 28
63263: DOUBLE
63264: EQUAL
63265: IFTRUE 63281
63267: LD_INT 29
63269: DOUBLE
63270: EQUAL
63271: IFTRUE 63281
63273: LD_INT 30
63275: DOUBLE
63276: EQUAL
63277: IFTRUE 63281
63279: GO 63337
63281: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63282: LD_ADDR_VAR 0 9
63286: PUSH
63287: LD_VAR 0 59
63291: PUSH
63292: LD_VAR 0 60
63296: PUSH
63297: LD_VAR 0 61
63301: PUSH
63302: LD_VAR 0 62
63306: PUSH
63307: LD_VAR 0 63
63311: PUSH
63312: LD_VAR 0 64
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: PUSH
63325: LD_VAR 0 4
63329: PUSH
63330: LD_INT 1
63332: PLUS
63333: ARRAY
63334: ST_TO_ADDR
63335: GO 63338
63337: POP
// temp_list2 = [ ] ;
63338: LD_ADDR_VAR 0 10
63342: PUSH
63343: EMPTY
63344: ST_TO_ADDR
// for i in temp_list do
63345: LD_ADDR_VAR 0 8
63349: PUSH
63350: LD_VAR 0 9
63354: PUSH
63355: FOR_IN
63356: IFFALSE 63408
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63358: LD_ADDR_VAR 0 10
63362: PUSH
63363: LD_VAR 0 10
63367: PUSH
63368: LD_VAR 0 8
63372: PUSH
63373: LD_INT 1
63375: ARRAY
63376: PUSH
63377: LD_VAR 0 2
63381: PLUS
63382: PUSH
63383: LD_VAR 0 8
63387: PUSH
63388: LD_INT 2
63390: ARRAY
63391: PUSH
63392: LD_VAR 0 3
63396: PLUS
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: EMPTY
63403: LIST
63404: ADD
63405: ST_TO_ADDR
63406: GO 63355
63408: POP
63409: POP
// result = temp_list2 ;
63410: LD_ADDR_VAR 0 7
63414: PUSH
63415: LD_VAR 0 10
63419: ST_TO_ADDR
// end ;
63420: LD_VAR 0 7
63424: RET
// export function EnemyInRange ( unit , dist ) ; begin
63425: LD_INT 0
63427: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63428: LD_ADDR_VAR 0 3
63432: PUSH
63433: LD_VAR 0 1
63437: PPUSH
63438: CALL_OW 255
63442: PPUSH
63443: LD_VAR 0 1
63447: PPUSH
63448: CALL_OW 250
63452: PPUSH
63453: LD_VAR 0 1
63457: PPUSH
63458: CALL_OW 251
63462: PPUSH
63463: LD_VAR 0 2
63467: PPUSH
63468: CALL 36827 0 4
63472: PUSH
63473: LD_INT 4
63475: ARRAY
63476: ST_TO_ADDR
// end ;
63477: LD_VAR 0 3
63481: RET
// export function PlayerSeeMe ( unit ) ; begin
63482: LD_INT 0
63484: PPUSH
// result := See ( your_side , unit ) ;
63485: LD_ADDR_VAR 0 2
63489: PUSH
63490: LD_OWVAR 2
63494: PPUSH
63495: LD_VAR 0 1
63499: PPUSH
63500: CALL_OW 292
63504: ST_TO_ADDR
// end ;
63505: LD_VAR 0 2
63509: RET
// export function ReverseDir ( unit ) ; begin
63510: LD_INT 0
63512: PPUSH
// if not unit then
63513: LD_VAR 0 1
63517: NOT
63518: IFFALSE 63522
// exit ;
63520: GO 63545
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63522: LD_ADDR_VAR 0 2
63526: PUSH
63527: LD_VAR 0 1
63531: PPUSH
63532: CALL_OW 254
63536: PUSH
63537: LD_INT 3
63539: PLUS
63540: PUSH
63541: LD_INT 6
63543: MOD
63544: ST_TO_ADDR
// end ;
63545: LD_VAR 0 2
63549: RET
// export function ReverseArray ( array ) ; var i ; begin
63550: LD_INT 0
63552: PPUSH
63553: PPUSH
// if not array then
63554: LD_VAR 0 1
63558: NOT
63559: IFFALSE 63563
// exit ;
63561: GO 63618
// result := [ ] ;
63563: LD_ADDR_VAR 0 2
63567: PUSH
63568: EMPTY
63569: ST_TO_ADDR
// for i := array downto 1 do
63570: LD_ADDR_VAR 0 3
63574: PUSH
63575: DOUBLE
63576: LD_VAR 0 1
63580: INC
63581: ST_TO_ADDR
63582: LD_INT 1
63584: PUSH
63585: FOR_DOWNTO
63586: IFFALSE 63616
// result := Join ( result , array [ i ] ) ;
63588: LD_ADDR_VAR 0 2
63592: PUSH
63593: LD_VAR 0 2
63597: PPUSH
63598: LD_VAR 0 1
63602: PUSH
63603: LD_VAR 0 3
63607: ARRAY
63608: PPUSH
63609: CALL 68262 0 2
63613: ST_TO_ADDR
63614: GO 63585
63616: POP
63617: POP
// end ;
63618: LD_VAR 0 2
63622: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63623: LD_INT 0
63625: PPUSH
63626: PPUSH
63627: PPUSH
63628: PPUSH
63629: PPUSH
63630: PPUSH
// if not unit or not hexes then
63631: LD_VAR 0 1
63635: NOT
63636: PUSH
63637: LD_VAR 0 2
63641: NOT
63642: OR
63643: IFFALSE 63647
// exit ;
63645: GO 63770
// dist := 9999 ;
63647: LD_ADDR_VAR 0 5
63651: PUSH
63652: LD_INT 9999
63654: ST_TO_ADDR
// for i = 1 to hexes do
63655: LD_ADDR_VAR 0 4
63659: PUSH
63660: DOUBLE
63661: LD_INT 1
63663: DEC
63664: ST_TO_ADDR
63665: LD_VAR 0 2
63669: PUSH
63670: FOR_TO
63671: IFFALSE 63758
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63673: LD_ADDR_VAR 0 6
63677: PUSH
63678: LD_VAR 0 1
63682: PPUSH
63683: LD_VAR 0 2
63687: PUSH
63688: LD_VAR 0 4
63692: ARRAY
63693: PUSH
63694: LD_INT 1
63696: ARRAY
63697: PPUSH
63698: LD_VAR 0 2
63702: PUSH
63703: LD_VAR 0 4
63707: ARRAY
63708: PUSH
63709: LD_INT 2
63711: ARRAY
63712: PPUSH
63713: CALL_OW 297
63717: ST_TO_ADDR
// if tdist < dist then
63718: LD_VAR 0 6
63722: PUSH
63723: LD_VAR 0 5
63727: LESS
63728: IFFALSE 63756
// begin hex := hexes [ i ] ;
63730: LD_ADDR_VAR 0 8
63734: PUSH
63735: LD_VAR 0 2
63739: PUSH
63740: LD_VAR 0 4
63744: ARRAY
63745: ST_TO_ADDR
// dist := tdist ;
63746: LD_ADDR_VAR 0 5
63750: PUSH
63751: LD_VAR 0 6
63755: ST_TO_ADDR
// end ; end ;
63756: GO 63670
63758: POP
63759: POP
// result := hex ;
63760: LD_ADDR_VAR 0 3
63764: PUSH
63765: LD_VAR 0 8
63769: ST_TO_ADDR
// end ;
63770: LD_VAR 0 3
63774: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63775: LD_INT 0
63777: PPUSH
63778: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63779: LD_VAR 0 1
63783: NOT
63784: PUSH
63785: LD_VAR 0 1
63789: PUSH
63790: LD_INT 21
63792: PUSH
63793: LD_INT 2
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 23
63802: PUSH
63803: LD_INT 2
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PPUSH
63814: CALL_OW 69
63818: IN
63819: NOT
63820: OR
63821: IFFALSE 63825
// exit ;
63823: GO 63872
// for i = 1 to 3 do
63825: LD_ADDR_VAR 0 3
63829: PUSH
63830: DOUBLE
63831: LD_INT 1
63833: DEC
63834: ST_TO_ADDR
63835: LD_INT 3
63837: PUSH
63838: FOR_TO
63839: IFFALSE 63870
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63841: LD_VAR 0 1
63845: PPUSH
63846: CALL_OW 250
63850: PPUSH
63851: LD_VAR 0 1
63855: PPUSH
63856: CALL_OW 251
63860: PPUSH
63861: LD_INT 1
63863: PPUSH
63864: CALL_OW 453
63868: GO 63838
63870: POP
63871: POP
// end ;
63872: LD_VAR 0 2
63876: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63877: LD_INT 0
63879: PPUSH
63880: PPUSH
63881: PPUSH
63882: PPUSH
63883: PPUSH
63884: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63885: LD_VAR 0 1
63889: NOT
63890: PUSH
63891: LD_VAR 0 2
63895: NOT
63896: OR
63897: PUSH
63898: LD_VAR 0 1
63902: PPUSH
63903: CALL_OW 314
63907: OR
63908: IFFALSE 63912
// exit ;
63910: GO 64379
// if GetLives ( i ) < 250 then
63912: LD_VAR 0 4
63916: PPUSH
63917: CALL_OW 256
63921: PUSH
63922: LD_INT 250
63924: LESS
63925: IFFALSE 63938
// begin ComAutodestruct ( i ) ;
63927: LD_VAR 0 4
63931: PPUSH
63932: CALL 63775 0 1
// exit ;
63936: GO 64379
// end ; x := GetX ( enemy_unit ) ;
63938: LD_ADDR_VAR 0 7
63942: PUSH
63943: LD_VAR 0 2
63947: PPUSH
63948: CALL_OW 250
63952: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63953: LD_ADDR_VAR 0 8
63957: PUSH
63958: LD_VAR 0 2
63962: PPUSH
63963: CALL_OW 251
63967: ST_TO_ADDR
// if not x or not y then
63968: LD_VAR 0 7
63972: NOT
63973: PUSH
63974: LD_VAR 0 8
63978: NOT
63979: OR
63980: IFFALSE 63984
// exit ;
63982: GO 64379
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63984: LD_ADDR_VAR 0 6
63988: PUSH
63989: LD_VAR 0 7
63993: PPUSH
63994: LD_INT 0
63996: PPUSH
63997: LD_INT 4
63999: PPUSH
64000: CALL_OW 272
64004: PUSH
64005: LD_VAR 0 8
64009: PPUSH
64010: LD_INT 0
64012: PPUSH
64013: LD_INT 4
64015: PPUSH
64016: CALL_OW 273
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: LD_VAR 0 7
64029: PPUSH
64030: LD_INT 1
64032: PPUSH
64033: LD_INT 4
64035: PPUSH
64036: CALL_OW 272
64040: PUSH
64041: LD_VAR 0 8
64045: PPUSH
64046: LD_INT 1
64048: PPUSH
64049: LD_INT 4
64051: PPUSH
64052: CALL_OW 273
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PUSH
64061: LD_VAR 0 7
64065: PPUSH
64066: LD_INT 2
64068: PPUSH
64069: LD_INT 4
64071: PPUSH
64072: CALL_OW 272
64076: PUSH
64077: LD_VAR 0 8
64081: PPUSH
64082: LD_INT 2
64084: PPUSH
64085: LD_INT 4
64087: PPUSH
64088: CALL_OW 273
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: LD_VAR 0 7
64101: PPUSH
64102: LD_INT 3
64104: PPUSH
64105: LD_INT 4
64107: PPUSH
64108: CALL_OW 272
64112: PUSH
64113: LD_VAR 0 8
64117: PPUSH
64118: LD_INT 3
64120: PPUSH
64121: LD_INT 4
64123: PPUSH
64124: CALL_OW 273
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_VAR 0 7
64137: PPUSH
64138: LD_INT 4
64140: PPUSH
64141: LD_INT 4
64143: PPUSH
64144: CALL_OW 272
64148: PUSH
64149: LD_VAR 0 8
64153: PPUSH
64154: LD_INT 4
64156: PPUSH
64157: LD_INT 4
64159: PPUSH
64160: CALL_OW 273
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_VAR 0 7
64173: PPUSH
64174: LD_INT 5
64176: PPUSH
64177: LD_INT 4
64179: PPUSH
64180: CALL_OW 272
64184: PUSH
64185: LD_VAR 0 8
64189: PPUSH
64190: LD_INT 5
64192: PPUSH
64193: LD_INT 4
64195: PPUSH
64196: CALL_OW 273
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: ST_TO_ADDR
// for i = tmp downto 1 do
64213: LD_ADDR_VAR 0 4
64217: PUSH
64218: DOUBLE
64219: LD_VAR 0 6
64223: INC
64224: ST_TO_ADDR
64225: LD_INT 1
64227: PUSH
64228: FOR_DOWNTO
64229: IFFALSE 64330
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64231: LD_VAR 0 6
64235: PUSH
64236: LD_VAR 0 4
64240: ARRAY
64241: PUSH
64242: LD_INT 1
64244: ARRAY
64245: PPUSH
64246: LD_VAR 0 6
64250: PUSH
64251: LD_VAR 0 4
64255: ARRAY
64256: PUSH
64257: LD_INT 2
64259: ARRAY
64260: PPUSH
64261: CALL_OW 488
64265: NOT
64266: PUSH
64267: LD_VAR 0 6
64271: PUSH
64272: LD_VAR 0 4
64276: ARRAY
64277: PUSH
64278: LD_INT 1
64280: ARRAY
64281: PPUSH
64282: LD_VAR 0 6
64286: PUSH
64287: LD_VAR 0 4
64291: ARRAY
64292: PUSH
64293: LD_INT 2
64295: ARRAY
64296: PPUSH
64297: CALL_OW 428
64301: PUSH
64302: LD_INT 0
64304: NONEQUAL
64305: OR
64306: IFFALSE 64328
// tmp := Delete ( tmp , i ) ;
64308: LD_ADDR_VAR 0 6
64312: PUSH
64313: LD_VAR 0 6
64317: PPUSH
64318: LD_VAR 0 4
64322: PPUSH
64323: CALL_OW 3
64327: ST_TO_ADDR
64328: GO 64228
64330: POP
64331: POP
// j := GetClosestHex ( unit , tmp ) ;
64332: LD_ADDR_VAR 0 5
64336: PUSH
64337: LD_VAR 0 1
64341: PPUSH
64342: LD_VAR 0 6
64346: PPUSH
64347: CALL 63623 0 2
64351: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64352: LD_VAR 0 1
64356: PPUSH
64357: LD_VAR 0 5
64361: PUSH
64362: LD_INT 1
64364: ARRAY
64365: PPUSH
64366: LD_VAR 0 5
64370: PUSH
64371: LD_INT 2
64373: ARRAY
64374: PPUSH
64375: CALL_OW 111
// end ;
64379: LD_VAR 0 3
64383: RET
// export function PrepareApemanSoldier ( ) ; begin
64384: LD_INT 0
64386: PPUSH
// uc_nation := 0 ;
64387: LD_ADDR_OWVAR 21
64391: PUSH
64392: LD_INT 0
64394: ST_TO_ADDR
// hc_sex := sex_male ;
64395: LD_ADDR_OWVAR 27
64399: PUSH
64400: LD_INT 1
64402: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64403: LD_ADDR_OWVAR 28
64407: PUSH
64408: LD_INT 15
64410: ST_TO_ADDR
// hc_gallery :=  ;
64411: LD_ADDR_OWVAR 33
64415: PUSH
64416: LD_STRING 
64418: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64419: LD_ADDR_OWVAR 31
64423: PUSH
64424: LD_INT 0
64426: PPUSH
64427: LD_INT 3
64429: PPUSH
64430: CALL_OW 12
64434: PUSH
64435: LD_INT 0
64437: PPUSH
64438: LD_INT 3
64440: PPUSH
64441: CALL_OW 12
64445: PUSH
64446: LD_INT 0
64448: PUSH
64449: LD_INT 0
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: ST_TO_ADDR
// end ;
64458: LD_VAR 0 1
64462: RET
// export function PrepareApemanEngineer ( ) ; begin
64463: LD_INT 0
64465: PPUSH
// uc_nation := 0 ;
64466: LD_ADDR_OWVAR 21
64470: PUSH
64471: LD_INT 0
64473: ST_TO_ADDR
// hc_sex := sex_male ;
64474: LD_ADDR_OWVAR 27
64478: PUSH
64479: LD_INT 1
64481: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64482: LD_ADDR_OWVAR 28
64486: PUSH
64487: LD_INT 16
64489: ST_TO_ADDR
// hc_gallery :=  ;
64490: LD_ADDR_OWVAR 33
64494: PUSH
64495: LD_STRING 
64497: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64498: LD_ADDR_OWVAR 31
64502: PUSH
64503: LD_INT 0
64505: PPUSH
64506: LD_INT 3
64508: PPUSH
64509: CALL_OW 12
64513: PUSH
64514: LD_INT 0
64516: PPUSH
64517: LD_INT 3
64519: PPUSH
64520: CALL_OW 12
64524: PUSH
64525: LD_INT 0
64527: PUSH
64528: LD_INT 0
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: ST_TO_ADDR
// end ;
64537: LD_VAR 0 1
64541: RET
// export function PrepareApeman ( agressivity ) ; begin
64542: LD_INT 0
64544: PPUSH
// uc_side := 0 ;
64545: LD_ADDR_OWVAR 20
64549: PUSH
64550: LD_INT 0
64552: ST_TO_ADDR
// uc_nation := 0 ;
64553: LD_ADDR_OWVAR 21
64557: PUSH
64558: LD_INT 0
64560: ST_TO_ADDR
// hc_sex := sex_male ;
64561: LD_ADDR_OWVAR 27
64565: PUSH
64566: LD_INT 1
64568: ST_TO_ADDR
// hc_class := class_apeman ;
64569: LD_ADDR_OWVAR 28
64573: PUSH
64574: LD_INT 12
64576: ST_TO_ADDR
// hc_gallery :=  ;
64577: LD_ADDR_OWVAR 33
64581: PUSH
64582: LD_STRING 
64584: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64585: LD_ADDR_OWVAR 35
64589: PUSH
64590: LD_VAR 0 1
64594: NEG
64595: PPUSH
64596: LD_VAR 0 1
64600: PPUSH
64601: CALL_OW 12
64605: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64606: LD_ADDR_OWVAR 31
64610: PUSH
64611: LD_INT 0
64613: PPUSH
64614: LD_INT 3
64616: PPUSH
64617: CALL_OW 12
64621: PUSH
64622: LD_INT 0
64624: PPUSH
64625: LD_INT 3
64627: PPUSH
64628: CALL_OW 12
64632: PUSH
64633: LD_INT 0
64635: PUSH
64636: LD_INT 0
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: LIST
64643: LIST
64644: ST_TO_ADDR
// end ;
64645: LD_VAR 0 2
64649: RET
// export function PrepareTiger ( agressivity ) ; begin
64650: LD_INT 0
64652: PPUSH
// uc_side := 0 ;
64653: LD_ADDR_OWVAR 20
64657: PUSH
64658: LD_INT 0
64660: ST_TO_ADDR
// uc_nation := 0 ;
64661: LD_ADDR_OWVAR 21
64665: PUSH
64666: LD_INT 0
64668: ST_TO_ADDR
// hc_class := class_tiger ;
64669: LD_ADDR_OWVAR 28
64673: PUSH
64674: LD_INT 14
64676: ST_TO_ADDR
// hc_gallery :=  ;
64677: LD_ADDR_OWVAR 33
64681: PUSH
64682: LD_STRING 
64684: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64685: LD_ADDR_OWVAR 35
64689: PUSH
64690: LD_VAR 0 1
64694: NEG
64695: PPUSH
64696: LD_VAR 0 1
64700: PPUSH
64701: CALL_OW 12
64705: ST_TO_ADDR
// end ;
64706: LD_VAR 0 2
64710: RET
// export function PrepareEnchidna ( ) ; begin
64711: LD_INT 0
64713: PPUSH
// uc_side := 0 ;
64714: LD_ADDR_OWVAR 20
64718: PUSH
64719: LD_INT 0
64721: ST_TO_ADDR
// uc_nation := 0 ;
64722: LD_ADDR_OWVAR 21
64726: PUSH
64727: LD_INT 0
64729: ST_TO_ADDR
// hc_class := class_baggie ;
64730: LD_ADDR_OWVAR 28
64734: PUSH
64735: LD_INT 13
64737: ST_TO_ADDR
// hc_gallery :=  ;
64738: LD_ADDR_OWVAR 33
64742: PUSH
64743: LD_STRING 
64745: ST_TO_ADDR
// end ;
64746: LD_VAR 0 1
64750: RET
// export function PrepareFrog ( ) ; begin
64751: LD_INT 0
64753: PPUSH
// uc_side := 0 ;
64754: LD_ADDR_OWVAR 20
64758: PUSH
64759: LD_INT 0
64761: ST_TO_ADDR
// uc_nation := 0 ;
64762: LD_ADDR_OWVAR 21
64766: PUSH
64767: LD_INT 0
64769: ST_TO_ADDR
// hc_class := class_frog ;
64770: LD_ADDR_OWVAR 28
64774: PUSH
64775: LD_INT 19
64777: ST_TO_ADDR
// hc_gallery :=  ;
64778: LD_ADDR_OWVAR 33
64782: PUSH
64783: LD_STRING 
64785: ST_TO_ADDR
// end ;
64786: LD_VAR 0 1
64790: RET
// export function PrepareFish ( ) ; begin
64791: LD_INT 0
64793: PPUSH
// uc_side := 0 ;
64794: LD_ADDR_OWVAR 20
64798: PUSH
64799: LD_INT 0
64801: ST_TO_ADDR
// uc_nation := 0 ;
64802: LD_ADDR_OWVAR 21
64806: PUSH
64807: LD_INT 0
64809: ST_TO_ADDR
// hc_class := class_fish ;
64810: LD_ADDR_OWVAR 28
64814: PUSH
64815: LD_INT 20
64817: ST_TO_ADDR
// hc_gallery :=  ;
64818: LD_ADDR_OWVAR 33
64822: PUSH
64823: LD_STRING 
64825: ST_TO_ADDR
// end ;
64826: LD_VAR 0 1
64830: RET
// export function PrepareBird ( ) ; begin
64831: LD_INT 0
64833: PPUSH
// uc_side := 0 ;
64834: LD_ADDR_OWVAR 20
64838: PUSH
64839: LD_INT 0
64841: ST_TO_ADDR
// uc_nation := 0 ;
64842: LD_ADDR_OWVAR 21
64846: PUSH
64847: LD_INT 0
64849: ST_TO_ADDR
// hc_class := class_phororhacos ;
64850: LD_ADDR_OWVAR 28
64854: PUSH
64855: LD_INT 18
64857: ST_TO_ADDR
// hc_gallery :=  ;
64858: LD_ADDR_OWVAR 33
64862: PUSH
64863: LD_STRING 
64865: ST_TO_ADDR
// end ;
64866: LD_VAR 0 1
64870: RET
// export function PrepareHorse ( ) ; begin
64871: LD_INT 0
64873: PPUSH
// uc_side := 0 ;
64874: LD_ADDR_OWVAR 20
64878: PUSH
64879: LD_INT 0
64881: ST_TO_ADDR
// uc_nation := 0 ;
64882: LD_ADDR_OWVAR 21
64886: PUSH
64887: LD_INT 0
64889: ST_TO_ADDR
// hc_class := class_horse ;
64890: LD_ADDR_OWVAR 28
64894: PUSH
64895: LD_INT 21
64897: ST_TO_ADDR
// hc_gallery :=  ;
64898: LD_ADDR_OWVAR 33
64902: PUSH
64903: LD_STRING 
64905: ST_TO_ADDR
// end ;
64906: LD_VAR 0 1
64910: RET
// export function PrepareMastodont ( ) ; begin
64911: LD_INT 0
64913: PPUSH
// uc_side := 0 ;
64914: LD_ADDR_OWVAR 20
64918: PUSH
64919: LD_INT 0
64921: ST_TO_ADDR
// uc_nation := 0 ;
64922: LD_ADDR_OWVAR 21
64926: PUSH
64927: LD_INT 0
64929: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64930: LD_ADDR_OWVAR 37
64934: PUSH
64935: LD_INT 31
64937: ST_TO_ADDR
// vc_control := control_rider ;
64938: LD_ADDR_OWVAR 38
64942: PUSH
64943: LD_INT 4
64945: ST_TO_ADDR
// end ;
64946: LD_VAR 0 1
64950: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64951: LD_INT 0
64953: PPUSH
64954: PPUSH
64955: PPUSH
// uc_side = 0 ;
64956: LD_ADDR_OWVAR 20
64960: PUSH
64961: LD_INT 0
64963: ST_TO_ADDR
// uc_nation = 0 ;
64964: LD_ADDR_OWVAR 21
64968: PUSH
64969: LD_INT 0
64971: ST_TO_ADDR
// InitHc_All ( ) ;
64972: CALL_OW 584
// InitVc ;
64976: CALL_OW 20
// if mastodonts then
64980: LD_VAR 0 6
64984: IFFALSE 65051
// for i = 1 to mastodonts do
64986: LD_ADDR_VAR 0 11
64990: PUSH
64991: DOUBLE
64992: LD_INT 1
64994: DEC
64995: ST_TO_ADDR
64996: LD_VAR 0 6
65000: PUSH
65001: FOR_TO
65002: IFFALSE 65049
// begin vc_chassis := 31 ;
65004: LD_ADDR_OWVAR 37
65008: PUSH
65009: LD_INT 31
65011: ST_TO_ADDR
// vc_control := control_rider ;
65012: LD_ADDR_OWVAR 38
65016: PUSH
65017: LD_INT 4
65019: ST_TO_ADDR
// animal := CreateVehicle ;
65020: LD_ADDR_VAR 0 12
65024: PUSH
65025: CALL_OW 45
65029: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65030: LD_VAR 0 12
65034: PPUSH
65035: LD_VAR 0 8
65039: PPUSH
65040: LD_INT 0
65042: PPUSH
65043: CALL 67179 0 3
// end ;
65047: GO 65001
65049: POP
65050: POP
// if horses then
65051: LD_VAR 0 5
65055: IFFALSE 65122
// for i = 1 to horses do
65057: LD_ADDR_VAR 0 11
65061: PUSH
65062: DOUBLE
65063: LD_INT 1
65065: DEC
65066: ST_TO_ADDR
65067: LD_VAR 0 5
65071: PUSH
65072: FOR_TO
65073: IFFALSE 65120
// begin hc_class := 21 ;
65075: LD_ADDR_OWVAR 28
65079: PUSH
65080: LD_INT 21
65082: ST_TO_ADDR
// hc_gallery :=  ;
65083: LD_ADDR_OWVAR 33
65087: PUSH
65088: LD_STRING 
65090: ST_TO_ADDR
// animal := CreateHuman ;
65091: LD_ADDR_VAR 0 12
65095: PUSH
65096: CALL_OW 44
65100: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65101: LD_VAR 0 12
65105: PPUSH
65106: LD_VAR 0 8
65110: PPUSH
65111: LD_INT 0
65113: PPUSH
65114: CALL 67179 0 3
// end ;
65118: GO 65072
65120: POP
65121: POP
// if birds then
65122: LD_VAR 0 1
65126: IFFALSE 65193
// for i = 1 to birds do
65128: LD_ADDR_VAR 0 11
65132: PUSH
65133: DOUBLE
65134: LD_INT 1
65136: DEC
65137: ST_TO_ADDR
65138: LD_VAR 0 1
65142: PUSH
65143: FOR_TO
65144: IFFALSE 65191
// begin hc_class = 18 ;
65146: LD_ADDR_OWVAR 28
65150: PUSH
65151: LD_INT 18
65153: ST_TO_ADDR
// hc_gallery =  ;
65154: LD_ADDR_OWVAR 33
65158: PUSH
65159: LD_STRING 
65161: ST_TO_ADDR
// animal := CreateHuman ;
65162: LD_ADDR_VAR 0 12
65166: PUSH
65167: CALL_OW 44
65171: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65172: LD_VAR 0 12
65176: PPUSH
65177: LD_VAR 0 8
65181: PPUSH
65182: LD_INT 0
65184: PPUSH
65185: CALL 67179 0 3
// end ;
65189: GO 65143
65191: POP
65192: POP
// if tigers then
65193: LD_VAR 0 2
65197: IFFALSE 65281
// for i = 1 to tigers do
65199: LD_ADDR_VAR 0 11
65203: PUSH
65204: DOUBLE
65205: LD_INT 1
65207: DEC
65208: ST_TO_ADDR
65209: LD_VAR 0 2
65213: PUSH
65214: FOR_TO
65215: IFFALSE 65279
// begin hc_class = class_tiger ;
65217: LD_ADDR_OWVAR 28
65221: PUSH
65222: LD_INT 14
65224: ST_TO_ADDR
// hc_gallery =  ;
65225: LD_ADDR_OWVAR 33
65229: PUSH
65230: LD_STRING 
65232: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65233: LD_ADDR_OWVAR 35
65237: PUSH
65238: LD_INT 7
65240: NEG
65241: PPUSH
65242: LD_INT 7
65244: PPUSH
65245: CALL_OW 12
65249: ST_TO_ADDR
// animal := CreateHuman ;
65250: LD_ADDR_VAR 0 12
65254: PUSH
65255: CALL_OW 44
65259: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65260: LD_VAR 0 12
65264: PPUSH
65265: LD_VAR 0 8
65269: PPUSH
65270: LD_INT 0
65272: PPUSH
65273: CALL 67179 0 3
// end ;
65277: GO 65214
65279: POP
65280: POP
// if apemans then
65281: LD_VAR 0 3
65285: IFFALSE 65408
// for i = 1 to apemans do
65287: LD_ADDR_VAR 0 11
65291: PUSH
65292: DOUBLE
65293: LD_INT 1
65295: DEC
65296: ST_TO_ADDR
65297: LD_VAR 0 3
65301: PUSH
65302: FOR_TO
65303: IFFALSE 65406
// begin hc_class = class_apeman ;
65305: LD_ADDR_OWVAR 28
65309: PUSH
65310: LD_INT 12
65312: ST_TO_ADDR
// hc_gallery =  ;
65313: LD_ADDR_OWVAR 33
65317: PUSH
65318: LD_STRING 
65320: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65321: LD_ADDR_OWVAR 35
65325: PUSH
65326: LD_INT 2
65328: NEG
65329: PPUSH
65330: LD_INT 2
65332: PPUSH
65333: CALL_OW 12
65337: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65338: LD_ADDR_OWVAR 31
65342: PUSH
65343: LD_INT 1
65345: PPUSH
65346: LD_INT 3
65348: PPUSH
65349: CALL_OW 12
65353: PUSH
65354: LD_INT 1
65356: PPUSH
65357: LD_INT 3
65359: PPUSH
65360: CALL_OW 12
65364: PUSH
65365: LD_INT 0
65367: PUSH
65368: LD_INT 0
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: LIST
65375: LIST
65376: ST_TO_ADDR
// animal := CreateHuman ;
65377: LD_ADDR_VAR 0 12
65381: PUSH
65382: CALL_OW 44
65386: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65387: LD_VAR 0 12
65391: PPUSH
65392: LD_VAR 0 8
65396: PPUSH
65397: LD_INT 0
65399: PPUSH
65400: CALL 67179 0 3
// end ;
65404: GO 65302
65406: POP
65407: POP
// if enchidnas then
65408: LD_VAR 0 4
65412: IFFALSE 65479
// for i = 1 to enchidnas do
65414: LD_ADDR_VAR 0 11
65418: PUSH
65419: DOUBLE
65420: LD_INT 1
65422: DEC
65423: ST_TO_ADDR
65424: LD_VAR 0 4
65428: PUSH
65429: FOR_TO
65430: IFFALSE 65477
// begin hc_class = 13 ;
65432: LD_ADDR_OWVAR 28
65436: PUSH
65437: LD_INT 13
65439: ST_TO_ADDR
// hc_gallery =  ;
65440: LD_ADDR_OWVAR 33
65444: PUSH
65445: LD_STRING 
65447: ST_TO_ADDR
// animal := CreateHuman ;
65448: LD_ADDR_VAR 0 12
65452: PUSH
65453: CALL_OW 44
65457: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65458: LD_VAR 0 12
65462: PPUSH
65463: LD_VAR 0 8
65467: PPUSH
65468: LD_INT 0
65470: PPUSH
65471: CALL 67179 0 3
// end ;
65475: GO 65429
65477: POP
65478: POP
// if fishes then
65479: LD_VAR 0 7
65483: IFFALSE 65550
// for i = 1 to fishes do
65485: LD_ADDR_VAR 0 11
65489: PUSH
65490: DOUBLE
65491: LD_INT 1
65493: DEC
65494: ST_TO_ADDR
65495: LD_VAR 0 7
65499: PUSH
65500: FOR_TO
65501: IFFALSE 65548
// begin hc_class = 20 ;
65503: LD_ADDR_OWVAR 28
65507: PUSH
65508: LD_INT 20
65510: ST_TO_ADDR
// hc_gallery =  ;
65511: LD_ADDR_OWVAR 33
65515: PUSH
65516: LD_STRING 
65518: ST_TO_ADDR
// animal := CreateHuman ;
65519: LD_ADDR_VAR 0 12
65523: PUSH
65524: CALL_OW 44
65528: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65529: LD_VAR 0 12
65533: PPUSH
65534: LD_VAR 0 9
65538: PPUSH
65539: LD_INT 0
65541: PPUSH
65542: CALL 67179 0 3
// end ;
65546: GO 65500
65548: POP
65549: POP
// end ;
65550: LD_VAR 0 10
65554: RET
// export function WantHeal ( sci , unit ) ; begin
65555: LD_INT 0
65557: PPUSH
// if GetTaskList ( sci ) > 0 then
65558: LD_VAR 0 1
65562: PPUSH
65563: CALL_OW 437
65567: PUSH
65568: LD_INT 0
65570: GREATER
65571: IFFALSE 65641
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65573: LD_VAR 0 1
65577: PPUSH
65578: CALL_OW 437
65582: PUSH
65583: LD_INT 1
65585: ARRAY
65586: PUSH
65587: LD_INT 1
65589: ARRAY
65590: PUSH
65591: LD_STRING l
65593: EQUAL
65594: PUSH
65595: LD_VAR 0 1
65599: PPUSH
65600: CALL_OW 437
65604: PUSH
65605: LD_INT 1
65607: ARRAY
65608: PUSH
65609: LD_INT 4
65611: ARRAY
65612: PUSH
65613: LD_VAR 0 2
65617: EQUAL
65618: AND
65619: IFFALSE 65631
// result := true else
65621: LD_ADDR_VAR 0 3
65625: PUSH
65626: LD_INT 1
65628: ST_TO_ADDR
65629: GO 65639
// result := false ;
65631: LD_ADDR_VAR 0 3
65635: PUSH
65636: LD_INT 0
65638: ST_TO_ADDR
// end else
65639: GO 65649
// result := false ;
65641: LD_ADDR_VAR 0 3
65645: PUSH
65646: LD_INT 0
65648: ST_TO_ADDR
// end ;
65649: LD_VAR 0 3
65653: RET
// export function HealTarget ( sci ) ; begin
65654: LD_INT 0
65656: PPUSH
// if not sci then
65657: LD_VAR 0 1
65661: NOT
65662: IFFALSE 65666
// exit ;
65664: GO 65731
// result := 0 ;
65666: LD_ADDR_VAR 0 2
65670: PUSH
65671: LD_INT 0
65673: ST_TO_ADDR
// if GetTaskList ( sci ) then
65674: LD_VAR 0 1
65678: PPUSH
65679: CALL_OW 437
65683: IFFALSE 65731
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65685: LD_VAR 0 1
65689: PPUSH
65690: CALL_OW 437
65694: PUSH
65695: LD_INT 1
65697: ARRAY
65698: PUSH
65699: LD_INT 1
65701: ARRAY
65702: PUSH
65703: LD_STRING l
65705: EQUAL
65706: IFFALSE 65731
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65708: LD_ADDR_VAR 0 2
65712: PUSH
65713: LD_VAR 0 1
65717: PPUSH
65718: CALL_OW 437
65722: PUSH
65723: LD_INT 1
65725: ARRAY
65726: PUSH
65727: LD_INT 4
65729: ARRAY
65730: ST_TO_ADDR
// end ;
65731: LD_VAR 0 2
65735: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65736: LD_INT 0
65738: PPUSH
65739: PPUSH
65740: PPUSH
65741: PPUSH
// if not base_units then
65742: LD_VAR 0 1
65746: NOT
65747: IFFALSE 65751
// exit ;
65749: GO 65838
// result := false ;
65751: LD_ADDR_VAR 0 2
65755: PUSH
65756: LD_INT 0
65758: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65759: LD_ADDR_VAR 0 5
65763: PUSH
65764: LD_VAR 0 1
65768: PPUSH
65769: LD_INT 21
65771: PUSH
65772: LD_INT 3
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PPUSH
65779: CALL_OW 72
65783: ST_TO_ADDR
// if not tmp then
65784: LD_VAR 0 5
65788: NOT
65789: IFFALSE 65793
// exit ;
65791: GO 65838
// for i in tmp do
65793: LD_ADDR_VAR 0 3
65797: PUSH
65798: LD_VAR 0 5
65802: PUSH
65803: FOR_IN
65804: IFFALSE 65836
// begin result := EnemyInRange ( i , 22 ) ;
65806: LD_ADDR_VAR 0 2
65810: PUSH
65811: LD_VAR 0 3
65815: PPUSH
65816: LD_INT 22
65818: PPUSH
65819: CALL 63425 0 2
65823: ST_TO_ADDR
// if result then
65824: LD_VAR 0 2
65828: IFFALSE 65834
// exit ;
65830: POP
65831: POP
65832: GO 65838
// end ;
65834: GO 65803
65836: POP
65837: POP
// end ;
65838: LD_VAR 0 2
65842: RET
// export function FilterByTag ( units , tag ) ; begin
65843: LD_INT 0
65845: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65846: LD_ADDR_VAR 0 3
65850: PUSH
65851: LD_VAR 0 1
65855: PPUSH
65856: LD_INT 120
65858: PUSH
65859: LD_VAR 0 2
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: PPUSH
65868: CALL_OW 72
65872: ST_TO_ADDR
// end ;
65873: LD_VAR 0 3
65877: RET
// export function IsDriver ( un ) ; begin
65878: LD_INT 0
65880: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65881: LD_ADDR_VAR 0 2
65885: PUSH
65886: LD_VAR 0 1
65890: PUSH
65891: LD_INT 55
65893: PUSH
65894: EMPTY
65895: LIST
65896: PPUSH
65897: CALL_OW 69
65901: IN
65902: ST_TO_ADDR
// end ;
65903: LD_VAR 0 2
65907: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65908: LD_INT 0
65910: PPUSH
65911: PPUSH
// list := [ ] ;
65912: LD_ADDR_VAR 0 5
65916: PUSH
65917: EMPTY
65918: ST_TO_ADDR
// case d of 0 :
65919: LD_VAR 0 3
65923: PUSH
65924: LD_INT 0
65926: DOUBLE
65927: EQUAL
65928: IFTRUE 65932
65930: GO 66065
65932: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65933: LD_ADDR_VAR 0 5
65937: PUSH
65938: LD_VAR 0 1
65942: PUSH
65943: LD_INT 4
65945: MINUS
65946: PUSH
65947: LD_VAR 0 2
65951: PUSH
65952: LD_INT 4
65954: MINUS
65955: PUSH
65956: LD_INT 2
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: LIST
65963: PUSH
65964: LD_VAR 0 1
65968: PUSH
65969: LD_INT 3
65971: MINUS
65972: PUSH
65973: LD_VAR 0 2
65977: PUSH
65978: LD_INT 1
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: LIST
65985: PUSH
65986: LD_VAR 0 1
65990: PUSH
65991: LD_INT 4
65993: PLUS
65994: PUSH
65995: LD_VAR 0 2
65999: PUSH
66000: LD_INT 4
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: LIST
66007: PUSH
66008: LD_VAR 0 1
66012: PUSH
66013: LD_INT 3
66015: PLUS
66016: PUSH
66017: LD_VAR 0 2
66021: PUSH
66022: LD_INT 3
66024: PLUS
66025: PUSH
66026: LD_INT 5
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: LIST
66033: PUSH
66034: LD_VAR 0 1
66038: PUSH
66039: LD_VAR 0 2
66043: PUSH
66044: LD_INT 4
66046: PLUS
66047: PUSH
66048: LD_INT 0
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: LIST
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: ST_TO_ADDR
// end ; 1 :
66063: GO 66763
66065: LD_INT 1
66067: DOUBLE
66068: EQUAL
66069: IFTRUE 66073
66071: GO 66206
66073: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66074: LD_ADDR_VAR 0 5
66078: PUSH
66079: LD_VAR 0 1
66083: PUSH
66084: LD_VAR 0 2
66088: PUSH
66089: LD_INT 4
66091: MINUS
66092: PUSH
66093: LD_INT 3
66095: PUSH
66096: EMPTY
66097: LIST
66098: LIST
66099: LIST
66100: PUSH
66101: LD_VAR 0 1
66105: PUSH
66106: LD_INT 3
66108: MINUS
66109: PUSH
66110: LD_VAR 0 2
66114: PUSH
66115: LD_INT 3
66117: MINUS
66118: PUSH
66119: LD_INT 2
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: LIST
66126: PUSH
66127: LD_VAR 0 1
66131: PUSH
66132: LD_INT 4
66134: MINUS
66135: PUSH
66136: LD_VAR 0 2
66140: PUSH
66141: LD_INT 1
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: LIST
66148: PUSH
66149: LD_VAR 0 1
66153: PUSH
66154: LD_VAR 0 2
66158: PUSH
66159: LD_INT 3
66161: PLUS
66162: PUSH
66163: LD_INT 0
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: LIST
66170: PUSH
66171: LD_VAR 0 1
66175: PUSH
66176: LD_INT 4
66178: PLUS
66179: PUSH
66180: LD_VAR 0 2
66184: PUSH
66185: LD_INT 4
66187: PLUS
66188: PUSH
66189: LD_INT 5
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: LIST
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: ST_TO_ADDR
// end ; 2 :
66204: GO 66763
66206: LD_INT 2
66208: DOUBLE
66209: EQUAL
66210: IFTRUE 66214
66212: GO 66343
66214: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66215: LD_ADDR_VAR 0 5
66219: PUSH
66220: LD_VAR 0 1
66224: PUSH
66225: LD_VAR 0 2
66229: PUSH
66230: LD_INT 3
66232: MINUS
66233: PUSH
66234: LD_INT 3
66236: PUSH
66237: EMPTY
66238: LIST
66239: LIST
66240: LIST
66241: PUSH
66242: LD_VAR 0 1
66246: PUSH
66247: LD_INT 4
66249: PLUS
66250: PUSH
66251: LD_VAR 0 2
66255: PUSH
66256: LD_INT 4
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: LIST
66263: PUSH
66264: LD_VAR 0 1
66268: PUSH
66269: LD_VAR 0 2
66273: PUSH
66274: LD_INT 4
66276: PLUS
66277: PUSH
66278: LD_INT 0
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: LIST
66285: PUSH
66286: LD_VAR 0 1
66290: PUSH
66291: LD_INT 3
66293: MINUS
66294: PUSH
66295: LD_VAR 0 2
66299: PUSH
66300: LD_INT 1
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: LIST
66307: PUSH
66308: LD_VAR 0 1
66312: PUSH
66313: LD_INT 4
66315: MINUS
66316: PUSH
66317: LD_VAR 0 2
66321: PUSH
66322: LD_INT 4
66324: MINUS
66325: PUSH
66326: LD_INT 2
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: LIST
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: ST_TO_ADDR
// end ; 3 :
66341: GO 66763
66343: LD_INT 3
66345: DOUBLE
66346: EQUAL
66347: IFTRUE 66351
66349: GO 66484
66351: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66352: LD_ADDR_VAR 0 5
66356: PUSH
66357: LD_VAR 0 1
66361: PUSH
66362: LD_INT 3
66364: PLUS
66365: PUSH
66366: LD_VAR 0 2
66370: PUSH
66371: LD_INT 4
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: LIST
66378: PUSH
66379: LD_VAR 0 1
66383: PUSH
66384: LD_INT 4
66386: PLUS
66387: PUSH
66388: LD_VAR 0 2
66392: PUSH
66393: LD_INT 4
66395: PLUS
66396: PUSH
66397: LD_INT 5
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: LIST
66404: PUSH
66405: LD_VAR 0 1
66409: PUSH
66410: LD_INT 4
66412: MINUS
66413: PUSH
66414: LD_VAR 0 2
66418: PUSH
66419: LD_INT 1
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: LIST
66426: PUSH
66427: LD_VAR 0 1
66431: PUSH
66432: LD_VAR 0 2
66436: PUSH
66437: LD_INT 4
66439: MINUS
66440: PUSH
66441: LD_INT 3
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: LIST
66448: PUSH
66449: LD_VAR 0 1
66453: PUSH
66454: LD_INT 3
66456: MINUS
66457: PUSH
66458: LD_VAR 0 2
66462: PUSH
66463: LD_INT 3
66465: MINUS
66466: PUSH
66467: LD_INT 2
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: LIST
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: LIST
66479: LIST
66480: LIST
66481: ST_TO_ADDR
// end ; 4 :
66482: GO 66763
66484: LD_INT 4
66486: DOUBLE
66487: EQUAL
66488: IFTRUE 66492
66490: GO 66625
66492: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66493: LD_ADDR_VAR 0 5
66497: PUSH
66498: LD_VAR 0 1
66502: PUSH
66503: LD_VAR 0 2
66507: PUSH
66508: LD_INT 4
66510: PLUS
66511: PUSH
66512: LD_INT 0
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: LIST
66519: PUSH
66520: LD_VAR 0 1
66524: PUSH
66525: LD_INT 3
66527: PLUS
66528: PUSH
66529: LD_VAR 0 2
66533: PUSH
66534: LD_INT 3
66536: PLUS
66537: PUSH
66538: LD_INT 5
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: LIST
66545: PUSH
66546: LD_VAR 0 1
66550: PUSH
66551: LD_INT 4
66553: PLUS
66554: PUSH
66555: LD_VAR 0 2
66559: PUSH
66560: LD_INT 4
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: LIST
66567: PUSH
66568: LD_VAR 0 1
66572: PUSH
66573: LD_VAR 0 2
66577: PUSH
66578: LD_INT 3
66580: MINUS
66581: PUSH
66582: LD_INT 3
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: LIST
66589: PUSH
66590: LD_VAR 0 1
66594: PUSH
66595: LD_INT 4
66597: MINUS
66598: PUSH
66599: LD_VAR 0 2
66603: PUSH
66604: LD_INT 4
66606: MINUS
66607: PUSH
66608: LD_INT 2
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: LIST
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: ST_TO_ADDR
// end ; 5 :
66623: GO 66763
66625: LD_INT 5
66627: DOUBLE
66628: EQUAL
66629: IFTRUE 66633
66631: GO 66762
66633: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66634: LD_ADDR_VAR 0 5
66638: PUSH
66639: LD_VAR 0 1
66643: PUSH
66644: LD_INT 4
66646: MINUS
66647: PUSH
66648: LD_VAR 0 2
66652: PUSH
66653: LD_INT 1
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: LIST
66660: PUSH
66661: LD_VAR 0 1
66665: PUSH
66666: LD_VAR 0 2
66670: PUSH
66671: LD_INT 4
66673: MINUS
66674: PUSH
66675: LD_INT 3
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: LIST
66682: PUSH
66683: LD_VAR 0 1
66687: PUSH
66688: LD_INT 4
66690: PLUS
66691: PUSH
66692: LD_VAR 0 2
66696: PUSH
66697: LD_INT 4
66699: PLUS
66700: PUSH
66701: LD_INT 5
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: LIST
66708: PUSH
66709: LD_VAR 0 1
66713: PUSH
66714: LD_INT 3
66716: PLUS
66717: PUSH
66718: LD_VAR 0 2
66722: PUSH
66723: LD_INT 4
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: LIST
66730: PUSH
66731: LD_VAR 0 1
66735: PUSH
66736: LD_VAR 0 2
66740: PUSH
66741: LD_INT 3
66743: PLUS
66744: PUSH
66745: LD_INT 0
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: LIST
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: ST_TO_ADDR
// end ; end ;
66760: GO 66763
66762: POP
// result := list ;
66763: LD_ADDR_VAR 0 4
66767: PUSH
66768: LD_VAR 0 5
66772: ST_TO_ADDR
// end ;
66773: LD_VAR 0 4
66777: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66778: LD_INT 0
66780: PPUSH
66781: PPUSH
66782: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66783: LD_VAR 0 1
66787: NOT
66788: PUSH
66789: LD_VAR 0 2
66793: PUSH
66794: LD_INT 1
66796: PUSH
66797: LD_INT 2
66799: PUSH
66800: LD_INT 3
66802: PUSH
66803: LD_INT 4
66805: PUSH
66806: EMPTY
66807: LIST
66808: LIST
66809: LIST
66810: LIST
66811: IN
66812: NOT
66813: OR
66814: IFFALSE 66818
// exit ;
66816: GO 66901
// tmp := [ ] ;
66818: LD_ADDR_VAR 0 5
66822: PUSH
66823: EMPTY
66824: ST_TO_ADDR
// for i in units do
66825: LD_ADDR_VAR 0 4
66829: PUSH
66830: LD_VAR 0 1
66834: PUSH
66835: FOR_IN
66836: IFFALSE 66870
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66838: LD_ADDR_VAR 0 5
66842: PUSH
66843: LD_VAR 0 5
66847: PPUSH
66848: LD_VAR 0 4
66852: PPUSH
66853: LD_VAR 0 2
66857: PPUSH
66858: CALL_OW 259
66862: PPUSH
66863: CALL 68262 0 2
66867: ST_TO_ADDR
66868: GO 66835
66870: POP
66871: POP
// if not tmp then
66872: LD_VAR 0 5
66876: NOT
66877: IFFALSE 66881
// exit ;
66879: GO 66901
// result := SortListByListDesc ( units , tmp ) ;
66881: LD_ADDR_VAR 0 3
66885: PUSH
66886: LD_VAR 0 1
66890: PPUSH
66891: LD_VAR 0 5
66895: PPUSH
66896: CALL_OW 77
66900: ST_TO_ADDR
// end ;
66901: LD_VAR 0 3
66905: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66906: LD_INT 0
66908: PPUSH
66909: PPUSH
66910: PPUSH
// result := false ;
66911: LD_ADDR_VAR 0 3
66915: PUSH
66916: LD_INT 0
66918: ST_TO_ADDR
// if not building then
66919: LD_VAR 0 2
66923: NOT
66924: IFFALSE 66928
// exit ;
66926: GO 67066
// x := GetX ( building ) ;
66928: LD_ADDR_VAR 0 4
66932: PUSH
66933: LD_VAR 0 2
66937: PPUSH
66938: CALL_OW 250
66942: ST_TO_ADDR
// y := GetY ( building ) ;
66943: LD_ADDR_VAR 0 5
66947: PUSH
66948: LD_VAR 0 2
66952: PPUSH
66953: CALL_OW 251
66957: ST_TO_ADDR
// if not x or not y then
66958: LD_VAR 0 4
66962: NOT
66963: PUSH
66964: LD_VAR 0 5
66968: NOT
66969: OR
66970: IFFALSE 66974
// exit ;
66972: GO 67066
// if GetTaskList ( unit ) then
66974: LD_VAR 0 1
66978: PPUSH
66979: CALL_OW 437
66983: IFFALSE 67066
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66985: LD_STRING e
66987: PUSH
66988: LD_VAR 0 1
66992: PPUSH
66993: CALL_OW 437
66997: PUSH
66998: LD_INT 1
67000: ARRAY
67001: PUSH
67002: LD_INT 1
67004: ARRAY
67005: EQUAL
67006: PUSH
67007: LD_VAR 0 4
67011: PUSH
67012: LD_VAR 0 1
67016: PPUSH
67017: CALL_OW 437
67021: PUSH
67022: LD_INT 1
67024: ARRAY
67025: PUSH
67026: LD_INT 2
67028: ARRAY
67029: EQUAL
67030: AND
67031: PUSH
67032: LD_VAR 0 5
67036: PUSH
67037: LD_VAR 0 1
67041: PPUSH
67042: CALL_OW 437
67046: PUSH
67047: LD_INT 1
67049: ARRAY
67050: PUSH
67051: LD_INT 3
67053: ARRAY
67054: EQUAL
67055: AND
67056: IFFALSE 67066
// result := true end ;
67058: LD_ADDR_VAR 0 3
67062: PUSH
67063: LD_INT 1
67065: ST_TO_ADDR
// end ;
67066: LD_VAR 0 3
67070: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67071: LD_INT 0
67073: PPUSH
// result := false ;
67074: LD_ADDR_VAR 0 4
67078: PUSH
67079: LD_INT 0
67081: ST_TO_ADDR
// if GetTaskList ( unit ) then
67082: LD_VAR 0 1
67086: PPUSH
67087: CALL_OW 437
67091: IFFALSE 67174
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67093: LD_STRING M
67095: PUSH
67096: LD_VAR 0 1
67100: PPUSH
67101: CALL_OW 437
67105: PUSH
67106: LD_INT 1
67108: ARRAY
67109: PUSH
67110: LD_INT 1
67112: ARRAY
67113: EQUAL
67114: PUSH
67115: LD_VAR 0 2
67119: PUSH
67120: LD_VAR 0 1
67124: PPUSH
67125: CALL_OW 437
67129: PUSH
67130: LD_INT 1
67132: ARRAY
67133: PUSH
67134: LD_INT 2
67136: ARRAY
67137: EQUAL
67138: AND
67139: PUSH
67140: LD_VAR 0 3
67144: PUSH
67145: LD_VAR 0 1
67149: PPUSH
67150: CALL_OW 437
67154: PUSH
67155: LD_INT 1
67157: ARRAY
67158: PUSH
67159: LD_INT 3
67161: ARRAY
67162: EQUAL
67163: AND
67164: IFFALSE 67174
// result := true ;
67166: LD_ADDR_VAR 0 4
67170: PUSH
67171: LD_INT 1
67173: ST_TO_ADDR
// end ; end ;
67174: LD_VAR 0 4
67178: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67179: LD_INT 0
67181: PPUSH
67182: PPUSH
67183: PPUSH
67184: PPUSH
// if not unit or not area then
67185: LD_VAR 0 1
67189: NOT
67190: PUSH
67191: LD_VAR 0 2
67195: NOT
67196: OR
67197: IFFALSE 67201
// exit ;
67199: GO 67365
// tmp := AreaToList ( area , i ) ;
67201: LD_ADDR_VAR 0 6
67205: PUSH
67206: LD_VAR 0 2
67210: PPUSH
67211: LD_VAR 0 5
67215: PPUSH
67216: CALL_OW 517
67220: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67221: LD_ADDR_VAR 0 5
67225: PUSH
67226: DOUBLE
67227: LD_INT 1
67229: DEC
67230: ST_TO_ADDR
67231: LD_VAR 0 6
67235: PUSH
67236: LD_INT 1
67238: ARRAY
67239: PUSH
67240: FOR_TO
67241: IFFALSE 67363
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67243: LD_ADDR_VAR 0 7
67247: PUSH
67248: LD_VAR 0 6
67252: PUSH
67253: LD_INT 1
67255: ARRAY
67256: PUSH
67257: LD_VAR 0 5
67261: ARRAY
67262: PUSH
67263: LD_VAR 0 6
67267: PUSH
67268: LD_INT 2
67270: ARRAY
67271: PUSH
67272: LD_VAR 0 5
67276: ARRAY
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67282: LD_VAR 0 7
67286: PUSH
67287: LD_INT 1
67289: ARRAY
67290: PPUSH
67291: LD_VAR 0 7
67295: PUSH
67296: LD_INT 2
67298: ARRAY
67299: PPUSH
67300: CALL_OW 428
67304: PUSH
67305: LD_INT 0
67307: EQUAL
67308: IFFALSE 67361
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67310: LD_VAR 0 1
67314: PPUSH
67315: LD_VAR 0 7
67319: PUSH
67320: LD_INT 1
67322: ARRAY
67323: PPUSH
67324: LD_VAR 0 7
67328: PUSH
67329: LD_INT 2
67331: ARRAY
67332: PPUSH
67333: LD_VAR 0 3
67337: PPUSH
67338: CALL_OW 48
// result := IsPlaced ( unit ) ;
67342: LD_ADDR_VAR 0 4
67346: PUSH
67347: LD_VAR 0 1
67351: PPUSH
67352: CALL_OW 305
67356: ST_TO_ADDR
// exit ;
67357: POP
67358: POP
67359: GO 67365
// end ; end ;
67361: GO 67240
67363: POP
67364: POP
// end ;
67365: LD_VAR 0 4
67369: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67370: LD_INT 0
67372: PPUSH
67373: PPUSH
67374: PPUSH
// if not side or side > 8 then
67375: LD_VAR 0 1
67379: NOT
67380: PUSH
67381: LD_VAR 0 1
67385: PUSH
67386: LD_INT 8
67388: GREATER
67389: OR
67390: IFFALSE 67394
// exit ;
67392: GO 67581
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67394: LD_ADDR_VAR 0 4
67398: PUSH
67399: LD_INT 22
67401: PUSH
67402: LD_VAR 0 1
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: PUSH
67411: LD_INT 21
67413: PUSH
67414: LD_INT 3
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: PPUSH
67425: CALL_OW 69
67429: ST_TO_ADDR
// if not tmp then
67430: LD_VAR 0 4
67434: NOT
67435: IFFALSE 67439
// exit ;
67437: GO 67581
// enable_addtolog := true ;
67439: LD_ADDR_OWVAR 81
67443: PUSH
67444: LD_INT 1
67446: ST_TO_ADDR
// AddToLog ( [ ) ;
67447: LD_STRING [
67449: PPUSH
67450: CALL_OW 561
// for i in tmp do
67454: LD_ADDR_VAR 0 3
67458: PUSH
67459: LD_VAR 0 4
67463: PUSH
67464: FOR_IN
67465: IFFALSE 67572
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67467: LD_STRING [
67469: PUSH
67470: LD_VAR 0 3
67474: PPUSH
67475: CALL_OW 266
67479: STR
67480: PUSH
67481: LD_STRING , 
67483: STR
67484: PUSH
67485: LD_VAR 0 3
67489: PPUSH
67490: CALL_OW 250
67494: STR
67495: PUSH
67496: LD_STRING , 
67498: STR
67499: PUSH
67500: LD_VAR 0 3
67504: PPUSH
67505: CALL_OW 251
67509: STR
67510: PUSH
67511: LD_STRING , 
67513: STR
67514: PUSH
67515: LD_VAR 0 3
67519: PPUSH
67520: CALL_OW 254
67524: STR
67525: PUSH
67526: LD_STRING , 
67528: STR
67529: PUSH
67530: LD_VAR 0 3
67534: PPUSH
67535: LD_INT 1
67537: PPUSH
67538: CALL_OW 268
67542: STR
67543: PUSH
67544: LD_STRING , 
67546: STR
67547: PUSH
67548: LD_VAR 0 3
67552: PPUSH
67553: LD_INT 2
67555: PPUSH
67556: CALL_OW 268
67560: STR
67561: PUSH
67562: LD_STRING ],
67564: STR
67565: PPUSH
67566: CALL_OW 561
// end ;
67570: GO 67464
67572: POP
67573: POP
// AddToLog ( ]; ) ;
67574: LD_STRING ];
67576: PPUSH
67577: CALL_OW 561
// end ;
67581: LD_VAR 0 2
67585: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67586: LD_INT 0
67588: PPUSH
67589: PPUSH
67590: PPUSH
67591: PPUSH
67592: PPUSH
// if not area or not rate or not max then
67593: LD_VAR 0 1
67597: NOT
67598: PUSH
67599: LD_VAR 0 2
67603: NOT
67604: OR
67605: PUSH
67606: LD_VAR 0 4
67610: NOT
67611: OR
67612: IFFALSE 67616
// exit ;
67614: GO 67805
// while 1 do
67616: LD_INT 1
67618: IFFALSE 67805
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67620: LD_ADDR_VAR 0 9
67624: PUSH
67625: LD_VAR 0 1
67629: PPUSH
67630: LD_INT 1
67632: PPUSH
67633: CALL_OW 287
67637: PUSH
67638: LD_INT 10
67640: MUL
67641: ST_TO_ADDR
// r := rate / 10 ;
67642: LD_ADDR_VAR 0 7
67646: PUSH
67647: LD_VAR 0 2
67651: PUSH
67652: LD_INT 10
67654: DIVREAL
67655: ST_TO_ADDR
// time := 1 1$00 ;
67656: LD_ADDR_VAR 0 8
67660: PUSH
67661: LD_INT 2100
67663: ST_TO_ADDR
// if amount < min then
67664: LD_VAR 0 9
67668: PUSH
67669: LD_VAR 0 3
67673: LESS
67674: IFFALSE 67692
// r := r * 2 else
67676: LD_ADDR_VAR 0 7
67680: PUSH
67681: LD_VAR 0 7
67685: PUSH
67686: LD_INT 2
67688: MUL
67689: ST_TO_ADDR
67690: GO 67718
// if amount > max then
67692: LD_VAR 0 9
67696: PUSH
67697: LD_VAR 0 4
67701: GREATER
67702: IFFALSE 67718
// r := r / 2 ;
67704: LD_ADDR_VAR 0 7
67708: PUSH
67709: LD_VAR 0 7
67713: PUSH
67714: LD_INT 2
67716: DIVREAL
67717: ST_TO_ADDR
// time := time / r ;
67718: LD_ADDR_VAR 0 8
67722: PUSH
67723: LD_VAR 0 8
67727: PUSH
67728: LD_VAR 0 7
67732: DIVREAL
67733: ST_TO_ADDR
// if time < 0 then
67734: LD_VAR 0 8
67738: PUSH
67739: LD_INT 0
67741: LESS
67742: IFFALSE 67759
// time := time * - 1 ;
67744: LD_ADDR_VAR 0 8
67748: PUSH
67749: LD_VAR 0 8
67753: PUSH
67754: LD_INT 1
67756: NEG
67757: MUL
67758: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67759: LD_VAR 0 8
67763: PUSH
67764: LD_INT 35
67766: PPUSH
67767: LD_INT 875
67769: PPUSH
67770: CALL_OW 12
67774: PLUS
67775: PPUSH
67776: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67780: LD_INT 1
67782: PPUSH
67783: LD_INT 5
67785: PPUSH
67786: CALL_OW 12
67790: PPUSH
67791: LD_VAR 0 1
67795: PPUSH
67796: LD_INT 1
67798: PPUSH
67799: CALL_OW 55
// end ;
67803: GO 67616
// end ;
67805: LD_VAR 0 5
67809: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67810: LD_INT 0
67812: PPUSH
67813: PPUSH
67814: PPUSH
67815: PPUSH
67816: PPUSH
67817: PPUSH
67818: PPUSH
67819: PPUSH
// if not turrets or not factories then
67820: LD_VAR 0 1
67824: NOT
67825: PUSH
67826: LD_VAR 0 2
67830: NOT
67831: OR
67832: IFFALSE 67836
// exit ;
67834: GO 68143
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67836: LD_ADDR_VAR 0 10
67840: PUSH
67841: LD_INT 5
67843: PUSH
67844: LD_INT 6
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: PUSH
67851: LD_INT 2
67853: PUSH
67854: LD_INT 4
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: PUSH
67861: LD_INT 3
67863: PUSH
67864: LD_INT 5
67866: PUSH
67867: EMPTY
67868: LIST
67869: LIST
67870: PUSH
67871: EMPTY
67872: LIST
67873: LIST
67874: LIST
67875: PUSH
67876: LD_INT 24
67878: PUSH
67879: LD_INT 25
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: LD_INT 23
67888: PUSH
67889: LD_INT 27
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: LD_INT 42
67902: PUSH
67903: LD_INT 43
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: LD_INT 44
67912: PUSH
67913: LD_INT 46
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: PUSH
67920: LD_INT 45
67922: PUSH
67923: LD_INT 47
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: PUSH
67930: EMPTY
67931: LIST
67932: LIST
67933: LIST
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: LIST
67939: ST_TO_ADDR
// result := [ ] ;
67940: LD_ADDR_VAR 0 3
67944: PUSH
67945: EMPTY
67946: ST_TO_ADDR
// for i in turrets do
67947: LD_ADDR_VAR 0 4
67951: PUSH
67952: LD_VAR 0 1
67956: PUSH
67957: FOR_IN
67958: IFFALSE 68141
// begin nat := GetNation ( i ) ;
67960: LD_ADDR_VAR 0 7
67964: PUSH
67965: LD_VAR 0 4
67969: PPUSH
67970: CALL_OW 248
67974: ST_TO_ADDR
// weapon := 0 ;
67975: LD_ADDR_VAR 0 8
67979: PUSH
67980: LD_INT 0
67982: ST_TO_ADDR
// if not nat then
67983: LD_VAR 0 7
67987: NOT
67988: IFFALSE 67992
// continue ;
67990: GO 67957
// for j in list [ nat ] do
67992: LD_ADDR_VAR 0 5
67996: PUSH
67997: LD_VAR 0 10
68001: PUSH
68002: LD_VAR 0 7
68006: ARRAY
68007: PUSH
68008: FOR_IN
68009: IFFALSE 68050
// if GetBWeapon ( i ) = j [ 1 ] then
68011: LD_VAR 0 4
68015: PPUSH
68016: CALL_OW 269
68020: PUSH
68021: LD_VAR 0 5
68025: PUSH
68026: LD_INT 1
68028: ARRAY
68029: EQUAL
68030: IFFALSE 68048
// begin weapon := j [ 2 ] ;
68032: LD_ADDR_VAR 0 8
68036: PUSH
68037: LD_VAR 0 5
68041: PUSH
68042: LD_INT 2
68044: ARRAY
68045: ST_TO_ADDR
// break ;
68046: GO 68050
// end ;
68048: GO 68008
68050: POP
68051: POP
// if not weapon then
68052: LD_VAR 0 8
68056: NOT
68057: IFFALSE 68061
// continue ;
68059: GO 67957
// for k in factories do
68061: LD_ADDR_VAR 0 6
68065: PUSH
68066: LD_VAR 0 2
68070: PUSH
68071: FOR_IN
68072: IFFALSE 68137
// begin weapons := AvailableWeaponList ( k ) ;
68074: LD_ADDR_VAR 0 9
68078: PUSH
68079: LD_VAR 0 6
68083: PPUSH
68084: CALL_OW 478
68088: ST_TO_ADDR
// if not weapons then
68089: LD_VAR 0 9
68093: NOT
68094: IFFALSE 68098
// continue ;
68096: GO 68071
// if weapon in weapons then
68098: LD_VAR 0 8
68102: PUSH
68103: LD_VAR 0 9
68107: IN
68108: IFFALSE 68135
// begin result := [ i , weapon ] ;
68110: LD_ADDR_VAR 0 3
68114: PUSH
68115: LD_VAR 0 4
68119: PUSH
68120: LD_VAR 0 8
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: ST_TO_ADDR
// exit ;
68129: POP
68130: POP
68131: POP
68132: POP
68133: GO 68143
// end ; end ;
68135: GO 68071
68137: POP
68138: POP
// end ;
68139: GO 67957
68141: POP
68142: POP
// end ;
68143: LD_VAR 0 3
68147: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68148: LD_INT 0
68150: PPUSH
// if not side or side > 8 then
68151: LD_VAR 0 3
68155: NOT
68156: PUSH
68157: LD_VAR 0 3
68161: PUSH
68162: LD_INT 8
68164: GREATER
68165: OR
68166: IFFALSE 68170
// exit ;
68168: GO 68229
// if not range then
68170: LD_VAR 0 4
68174: NOT
68175: IFFALSE 68186
// range := - 12 ;
68177: LD_ADDR_VAR 0 4
68181: PUSH
68182: LD_INT 12
68184: NEG
68185: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68186: LD_VAR 0 1
68190: PPUSH
68191: LD_VAR 0 2
68195: PPUSH
68196: LD_VAR 0 3
68200: PPUSH
68201: LD_VAR 0 4
68205: PPUSH
68206: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68210: LD_VAR 0 1
68214: PPUSH
68215: LD_VAR 0 2
68219: PPUSH
68220: LD_VAR 0 3
68224: PPUSH
68225: CALL_OW 331
// end ;
68229: LD_VAR 0 5
68233: RET
// export function Video ( mode ) ; begin
68234: LD_INT 0
68236: PPUSH
// ingame_video = mode ;
68237: LD_ADDR_OWVAR 52
68241: PUSH
68242: LD_VAR 0 1
68246: ST_TO_ADDR
// interface_hidden = mode ;
68247: LD_ADDR_OWVAR 54
68251: PUSH
68252: LD_VAR 0 1
68256: ST_TO_ADDR
// end ;
68257: LD_VAR 0 2
68261: RET
// export function Join ( array , element ) ; begin
68262: LD_INT 0
68264: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68265: LD_ADDR_VAR 0 3
68269: PUSH
68270: LD_VAR 0 1
68274: PPUSH
68275: LD_VAR 0 1
68279: PUSH
68280: LD_INT 1
68282: PLUS
68283: PPUSH
68284: LD_VAR 0 2
68288: PPUSH
68289: CALL_OW 1
68293: ST_TO_ADDR
// end ;
68294: LD_VAR 0 3
68298: RET
// export function JoinUnion ( array , element ) ; begin
68299: LD_INT 0
68301: PPUSH
// result := array union element ;
68302: LD_ADDR_VAR 0 3
68306: PUSH
68307: LD_VAR 0 1
68311: PUSH
68312: LD_VAR 0 2
68316: UNION
68317: ST_TO_ADDR
// end ;
68318: LD_VAR 0 3
68322: RET
// export function GetBehemoths ( side ) ; begin
68323: LD_INT 0
68325: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68326: LD_ADDR_VAR 0 2
68330: PUSH
68331: LD_INT 22
68333: PUSH
68334: LD_VAR 0 1
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: PUSH
68343: LD_INT 31
68345: PUSH
68346: LD_INT 25
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: PPUSH
68357: CALL_OW 69
68361: ST_TO_ADDR
// end ;
68362: LD_VAR 0 2
68366: RET
// export function Shuffle ( array ) ; var i , index ; begin
68367: LD_INT 0
68369: PPUSH
68370: PPUSH
68371: PPUSH
// result := [ ] ;
68372: LD_ADDR_VAR 0 2
68376: PUSH
68377: EMPTY
68378: ST_TO_ADDR
// if not array then
68379: LD_VAR 0 1
68383: NOT
68384: IFFALSE 68388
// exit ;
68386: GO 68487
// Randomize ;
68388: CALL_OW 10
// for i = array downto 1 do
68392: LD_ADDR_VAR 0 3
68396: PUSH
68397: DOUBLE
68398: LD_VAR 0 1
68402: INC
68403: ST_TO_ADDR
68404: LD_INT 1
68406: PUSH
68407: FOR_DOWNTO
68408: IFFALSE 68485
// begin index := rand ( 1 , array ) ;
68410: LD_ADDR_VAR 0 4
68414: PUSH
68415: LD_INT 1
68417: PPUSH
68418: LD_VAR 0 1
68422: PPUSH
68423: CALL_OW 12
68427: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68428: LD_ADDR_VAR 0 2
68432: PUSH
68433: LD_VAR 0 2
68437: PPUSH
68438: LD_VAR 0 2
68442: PUSH
68443: LD_INT 1
68445: PLUS
68446: PPUSH
68447: LD_VAR 0 1
68451: PUSH
68452: LD_VAR 0 4
68456: ARRAY
68457: PPUSH
68458: CALL_OW 2
68462: ST_TO_ADDR
// array := Delete ( array , index ) ;
68463: LD_ADDR_VAR 0 1
68467: PUSH
68468: LD_VAR 0 1
68472: PPUSH
68473: LD_VAR 0 4
68477: PPUSH
68478: CALL_OW 3
68482: ST_TO_ADDR
// end ;
68483: GO 68407
68485: POP
68486: POP
// end ;
68487: LD_VAR 0 2
68491: RET
// export function GetBaseMaterials ( base ) ; begin
68492: LD_INT 0
68494: PPUSH
// result := [ 0 , 0 , 0 ] ;
68495: LD_ADDR_VAR 0 2
68499: PUSH
68500: LD_INT 0
68502: PUSH
68503: LD_INT 0
68505: PUSH
68506: LD_INT 0
68508: PUSH
68509: EMPTY
68510: LIST
68511: LIST
68512: LIST
68513: ST_TO_ADDR
// if not base then
68514: LD_VAR 0 1
68518: NOT
68519: IFFALSE 68523
// exit ;
68521: GO 68572
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68523: LD_ADDR_VAR 0 2
68527: PUSH
68528: LD_VAR 0 1
68532: PPUSH
68533: LD_INT 1
68535: PPUSH
68536: CALL_OW 275
68540: PUSH
68541: LD_VAR 0 1
68545: PPUSH
68546: LD_INT 2
68548: PPUSH
68549: CALL_OW 275
68553: PUSH
68554: LD_VAR 0 1
68558: PPUSH
68559: LD_INT 3
68561: PPUSH
68562: CALL_OW 275
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: LIST
68571: ST_TO_ADDR
// end ;
68572: LD_VAR 0 2
68576: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68577: LD_INT 0
68579: PPUSH
68580: PPUSH
// result := array ;
68581: LD_ADDR_VAR 0 3
68585: PUSH
68586: LD_VAR 0 1
68590: ST_TO_ADDR
// if size >= result then
68591: LD_VAR 0 2
68595: PUSH
68596: LD_VAR 0 3
68600: GREATEREQUAL
68601: IFFALSE 68605
// exit ;
68603: GO 68655
// if size then
68605: LD_VAR 0 2
68609: IFFALSE 68655
// for i := array downto size do
68611: LD_ADDR_VAR 0 4
68615: PUSH
68616: DOUBLE
68617: LD_VAR 0 1
68621: INC
68622: ST_TO_ADDR
68623: LD_VAR 0 2
68627: PUSH
68628: FOR_DOWNTO
68629: IFFALSE 68653
// result := Delete ( result , result ) ;
68631: LD_ADDR_VAR 0 3
68635: PUSH
68636: LD_VAR 0 3
68640: PPUSH
68641: LD_VAR 0 3
68645: PPUSH
68646: CALL_OW 3
68650: ST_TO_ADDR
68651: GO 68628
68653: POP
68654: POP
// end ;
68655: LD_VAR 0 3
68659: RET
// export function ComExit ( unit ) ; var tmp ; begin
68660: LD_INT 0
68662: PPUSH
68663: PPUSH
// if not IsInUnit ( unit ) then
68664: LD_VAR 0 1
68668: PPUSH
68669: CALL_OW 310
68673: NOT
68674: IFFALSE 68678
// exit ;
68676: GO 68738
// tmp := IsInUnit ( unit ) ;
68678: LD_ADDR_VAR 0 3
68682: PUSH
68683: LD_VAR 0 1
68687: PPUSH
68688: CALL_OW 310
68692: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68693: LD_VAR 0 3
68697: PPUSH
68698: CALL_OW 247
68702: PUSH
68703: LD_INT 2
68705: EQUAL
68706: IFFALSE 68719
// ComExitVehicle ( unit ) else
68708: LD_VAR 0 1
68712: PPUSH
68713: CALL_OW 121
68717: GO 68728
// ComExitBuilding ( unit ) ;
68719: LD_VAR 0 1
68723: PPUSH
68724: CALL_OW 122
// result := tmp ;
68728: LD_ADDR_VAR 0 2
68732: PUSH
68733: LD_VAR 0 3
68737: ST_TO_ADDR
// end ;
68738: LD_VAR 0 2
68742: RET
// export function ComExitAll ( units ) ; var i ; begin
68743: LD_INT 0
68745: PPUSH
68746: PPUSH
// if not units then
68747: LD_VAR 0 1
68751: NOT
68752: IFFALSE 68756
// exit ;
68754: GO 68782
// for i in units do
68756: LD_ADDR_VAR 0 3
68760: PUSH
68761: LD_VAR 0 1
68765: PUSH
68766: FOR_IN
68767: IFFALSE 68780
// ComExit ( i ) ;
68769: LD_VAR 0 3
68773: PPUSH
68774: CALL 68660 0 1
68778: GO 68766
68780: POP
68781: POP
// end ;
68782: LD_VAR 0 2
68786: RET
// export function ResetHc ; begin
68787: LD_INT 0
68789: PPUSH
// InitHc ;
68790: CALL_OW 19
// hc_importance := 0 ;
68794: LD_ADDR_OWVAR 32
68798: PUSH
68799: LD_INT 0
68801: ST_TO_ADDR
// end ;
68802: LD_VAR 0 1
68806: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68807: LD_INT 0
68809: PPUSH
68810: PPUSH
68811: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68812: LD_ADDR_VAR 0 6
68816: PUSH
68817: LD_VAR 0 1
68821: PUSH
68822: LD_VAR 0 3
68826: PLUS
68827: PUSH
68828: LD_INT 2
68830: DIV
68831: ST_TO_ADDR
// if _x < 0 then
68832: LD_VAR 0 6
68836: PUSH
68837: LD_INT 0
68839: LESS
68840: IFFALSE 68857
// _x := _x * - 1 ;
68842: LD_ADDR_VAR 0 6
68846: PUSH
68847: LD_VAR 0 6
68851: PUSH
68852: LD_INT 1
68854: NEG
68855: MUL
68856: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68857: LD_ADDR_VAR 0 7
68861: PUSH
68862: LD_VAR 0 2
68866: PUSH
68867: LD_VAR 0 4
68871: PLUS
68872: PUSH
68873: LD_INT 2
68875: DIV
68876: ST_TO_ADDR
// if _y < 0 then
68877: LD_VAR 0 7
68881: PUSH
68882: LD_INT 0
68884: LESS
68885: IFFALSE 68902
// _y := _y * - 1 ;
68887: LD_ADDR_VAR 0 7
68891: PUSH
68892: LD_VAR 0 7
68896: PUSH
68897: LD_INT 1
68899: NEG
68900: MUL
68901: ST_TO_ADDR
// result := [ _x , _y ] ;
68902: LD_ADDR_VAR 0 5
68906: PUSH
68907: LD_VAR 0 6
68911: PUSH
68912: LD_VAR 0 7
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: ST_TO_ADDR
// end ;
68921: LD_VAR 0 5
68925: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68926: LD_INT 0
68928: PPUSH
68929: PPUSH
68930: PPUSH
68931: PPUSH
// task := GetTaskList ( unit ) ;
68932: LD_ADDR_VAR 0 7
68936: PUSH
68937: LD_VAR 0 1
68941: PPUSH
68942: CALL_OW 437
68946: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68947: LD_VAR 0 7
68951: NOT
68952: PUSH
68953: LD_VAR 0 1
68957: PPUSH
68958: LD_VAR 0 2
68962: PPUSH
68963: CALL_OW 308
68967: NOT
68968: AND
68969: IFFALSE 68973
// exit ;
68971: GO 69091
// if IsInArea ( unit , area ) then
68973: LD_VAR 0 1
68977: PPUSH
68978: LD_VAR 0 2
68982: PPUSH
68983: CALL_OW 308
68987: IFFALSE 69005
// begin ComMoveToArea ( unit , goAway ) ;
68989: LD_VAR 0 1
68993: PPUSH
68994: LD_VAR 0 3
68998: PPUSH
68999: CALL_OW 113
// exit ;
69003: GO 69091
// end ; if task [ 1 ] [ 1 ] <> M then
69005: LD_VAR 0 7
69009: PUSH
69010: LD_INT 1
69012: ARRAY
69013: PUSH
69014: LD_INT 1
69016: ARRAY
69017: PUSH
69018: LD_STRING M
69020: NONEQUAL
69021: IFFALSE 69025
// exit ;
69023: GO 69091
// x := task [ 1 ] [ 2 ] ;
69025: LD_ADDR_VAR 0 5
69029: PUSH
69030: LD_VAR 0 7
69034: PUSH
69035: LD_INT 1
69037: ARRAY
69038: PUSH
69039: LD_INT 2
69041: ARRAY
69042: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69043: LD_ADDR_VAR 0 6
69047: PUSH
69048: LD_VAR 0 7
69052: PUSH
69053: LD_INT 1
69055: ARRAY
69056: PUSH
69057: LD_INT 3
69059: ARRAY
69060: ST_TO_ADDR
// if InArea ( x , y , area ) then
69061: LD_VAR 0 5
69065: PPUSH
69066: LD_VAR 0 6
69070: PPUSH
69071: LD_VAR 0 2
69075: PPUSH
69076: CALL_OW 309
69080: IFFALSE 69091
// ComStop ( unit ) ;
69082: LD_VAR 0 1
69086: PPUSH
69087: CALL_OW 141
// end ;
69091: LD_VAR 0 4
69095: RET
// export function Abs ( value ) ; begin
69096: LD_INT 0
69098: PPUSH
// result := value ;
69099: LD_ADDR_VAR 0 2
69103: PUSH
69104: LD_VAR 0 1
69108: ST_TO_ADDR
// if value < 0 then
69109: LD_VAR 0 1
69113: PUSH
69114: LD_INT 0
69116: LESS
69117: IFFALSE 69134
// result := value * - 1 ;
69119: LD_ADDR_VAR 0 2
69123: PUSH
69124: LD_VAR 0 1
69128: PUSH
69129: LD_INT 1
69131: NEG
69132: MUL
69133: ST_TO_ADDR
// end ;
69134: LD_VAR 0 2
69138: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69139: LD_INT 0
69141: PPUSH
69142: PPUSH
69143: PPUSH
69144: PPUSH
69145: PPUSH
69146: PPUSH
69147: PPUSH
69148: PPUSH
// if not unit or not building then
69149: LD_VAR 0 1
69153: NOT
69154: PUSH
69155: LD_VAR 0 2
69159: NOT
69160: OR
69161: IFFALSE 69165
// exit ;
69163: GO 69391
// x := GetX ( building ) ;
69165: LD_ADDR_VAR 0 4
69169: PUSH
69170: LD_VAR 0 2
69174: PPUSH
69175: CALL_OW 250
69179: ST_TO_ADDR
// y := GetY ( building ) ;
69180: LD_ADDR_VAR 0 6
69184: PUSH
69185: LD_VAR 0 2
69189: PPUSH
69190: CALL_OW 251
69194: ST_TO_ADDR
// d := GetDir ( building ) ;
69195: LD_ADDR_VAR 0 8
69199: PUSH
69200: LD_VAR 0 2
69204: PPUSH
69205: CALL_OW 254
69209: ST_TO_ADDR
// r := 4 ;
69210: LD_ADDR_VAR 0 9
69214: PUSH
69215: LD_INT 4
69217: ST_TO_ADDR
// for i := 1 to 5 do
69218: LD_ADDR_VAR 0 10
69222: PUSH
69223: DOUBLE
69224: LD_INT 1
69226: DEC
69227: ST_TO_ADDR
69228: LD_INT 5
69230: PUSH
69231: FOR_TO
69232: IFFALSE 69389
// begin _x := ShiftX ( x , d , r + i ) ;
69234: LD_ADDR_VAR 0 5
69238: PUSH
69239: LD_VAR 0 4
69243: PPUSH
69244: LD_VAR 0 8
69248: PPUSH
69249: LD_VAR 0 9
69253: PUSH
69254: LD_VAR 0 10
69258: PLUS
69259: PPUSH
69260: CALL_OW 272
69264: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69265: LD_ADDR_VAR 0 7
69269: PUSH
69270: LD_VAR 0 6
69274: PPUSH
69275: LD_VAR 0 8
69279: PPUSH
69280: LD_VAR 0 9
69284: PUSH
69285: LD_VAR 0 10
69289: PLUS
69290: PPUSH
69291: CALL_OW 273
69295: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69296: LD_VAR 0 5
69300: PPUSH
69301: LD_VAR 0 7
69305: PPUSH
69306: CALL_OW 488
69310: PUSH
69311: LD_VAR 0 5
69315: PPUSH
69316: LD_VAR 0 7
69320: PPUSH
69321: CALL_OW 428
69325: PPUSH
69326: CALL_OW 247
69330: PUSH
69331: LD_INT 3
69333: PUSH
69334: LD_INT 2
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: IN
69341: NOT
69342: AND
69343: IFFALSE 69387
// begin ComMoveXY ( unit , _x , _y ) ;
69345: LD_VAR 0 1
69349: PPUSH
69350: LD_VAR 0 5
69354: PPUSH
69355: LD_VAR 0 7
69359: PPUSH
69360: CALL_OW 111
// result := [ _x , _y ] ;
69364: LD_ADDR_VAR 0 3
69368: PUSH
69369: LD_VAR 0 5
69373: PUSH
69374: LD_VAR 0 7
69378: PUSH
69379: EMPTY
69380: LIST
69381: LIST
69382: ST_TO_ADDR
// exit ;
69383: POP
69384: POP
69385: GO 69391
// end ; end ;
69387: GO 69231
69389: POP
69390: POP
// end ;
69391: LD_VAR 0 3
69395: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69396: LD_INT 0
69398: PPUSH
69399: PPUSH
69400: PPUSH
// result := 0 ;
69401: LD_ADDR_VAR 0 3
69405: PUSH
69406: LD_INT 0
69408: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69409: LD_VAR 0 1
69413: PUSH
69414: LD_INT 0
69416: LESS
69417: PUSH
69418: LD_VAR 0 1
69422: PUSH
69423: LD_INT 8
69425: GREATER
69426: OR
69427: PUSH
69428: LD_VAR 0 2
69432: PUSH
69433: LD_INT 0
69435: LESS
69436: OR
69437: PUSH
69438: LD_VAR 0 2
69442: PUSH
69443: LD_INT 8
69445: GREATER
69446: OR
69447: IFFALSE 69451
// exit ;
69449: GO 69526
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69451: LD_ADDR_VAR 0 4
69455: PUSH
69456: LD_INT 22
69458: PUSH
69459: LD_VAR 0 2
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: PPUSH
69468: CALL_OW 69
69472: PUSH
69473: FOR_IN
69474: IFFALSE 69524
// begin un := UnitShoot ( i ) ;
69476: LD_ADDR_VAR 0 5
69480: PUSH
69481: LD_VAR 0 4
69485: PPUSH
69486: CALL_OW 504
69490: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69491: LD_VAR 0 5
69495: PPUSH
69496: CALL_OW 255
69500: PUSH
69501: LD_VAR 0 1
69505: EQUAL
69506: IFFALSE 69522
// begin result := un ;
69508: LD_ADDR_VAR 0 3
69512: PUSH
69513: LD_VAR 0 5
69517: ST_TO_ADDR
// exit ;
69518: POP
69519: POP
69520: GO 69526
// end ; end ;
69522: GO 69473
69524: POP
69525: POP
// end ;
69526: LD_VAR 0 3
69530: RET
// export function GetCargoBay ( units ) ; begin
69531: LD_INT 0
69533: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69534: LD_ADDR_VAR 0 2
69538: PUSH
69539: LD_VAR 0 1
69543: PPUSH
69544: LD_INT 2
69546: PUSH
69547: LD_INT 34
69549: PUSH
69550: LD_INT 12
69552: PUSH
69553: EMPTY
69554: LIST
69555: LIST
69556: PUSH
69557: LD_INT 34
69559: PUSH
69560: LD_INT 51
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: PUSH
69567: LD_INT 34
69569: PUSH
69570: LD_INT 32
69572: PUSH
69573: EMPTY
69574: LIST
69575: LIST
69576: PUSH
69577: LD_INT 34
69579: PUSH
69580: LD_INT 89
69582: PUSH
69583: EMPTY
69584: LIST
69585: LIST
69586: PUSH
69587: EMPTY
69588: LIST
69589: LIST
69590: LIST
69591: LIST
69592: LIST
69593: PPUSH
69594: CALL_OW 72
69598: ST_TO_ADDR
// end ;
69599: LD_VAR 0 2
69603: RET
// export function Negate ( value ) ; begin
69604: LD_INT 0
69606: PPUSH
// result := not value ;
69607: LD_ADDR_VAR 0 2
69611: PUSH
69612: LD_VAR 0 1
69616: NOT
69617: ST_TO_ADDR
// end ;
69618: LD_VAR 0 2
69622: RET
// export function Inc ( value ) ; begin
69623: LD_INT 0
69625: PPUSH
// result := value + 1 ;
69626: LD_ADDR_VAR 0 2
69630: PUSH
69631: LD_VAR 0 1
69635: PUSH
69636: LD_INT 1
69638: PLUS
69639: ST_TO_ADDR
// end ;
69640: LD_VAR 0 2
69644: RET
// export function Dec ( value ) ; begin
69645: LD_INT 0
69647: PPUSH
// result := value - 1 ;
69648: LD_ADDR_VAR 0 2
69652: PUSH
69653: LD_VAR 0 1
69657: PUSH
69658: LD_INT 1
69660: MINUS
69661: ST_TO_ADDR
// end ;
69662: LD_VAR 0 2
69666: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69667: LD_INT 0
69669: PPUSH
69670: PPUSH
69671: PPUSH
69672: PPUSH
69673: PPUSH
69674: PPUSH
69675: PPUSH
69676: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69677: LD_VAR 0 1
69681: PPUSH
69682: LD_VAR 0 2
69686: PPUSH
69687: CALL_OW 488
69691: NOT
69692: PUSH
69693: LD_VAR 0 3
69697: PPUSH
69698: LD_VAR 0 4
69702: PPUSH
69703: CALL_OW 488
69707: NOT
69708: OR
69709: IFFALSE 69722
// begin result := - 1 ;
69711: LD_ADDR_VAR 0 5
69715: PUSH
69716: LD_INT 1
69718: NEG
69719: ST_TO_ADDR
// exit ;
69720: GO 69957
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69722: LD_ADDR_VAR 0 12
69726: PUSH
69727: LD_VAR 0 1
69731: PPUSH
69732: LD_VAR 0 2
69736: PPUSH
69737: LD_VAR 0 3
69741: PPUSH
69742: LD_VAR 0 4
69746: PPUSH
69747: CALL 68807 0 4
69751: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69752: LD_ADDR_VAR 0 11
69756: PUSH
69757: LD_VAR 0 1
69761: PPUSH
69762: LD_VAR 0 2
69766: PPUSH
69767: LD_VAR 0 12
69771: PUSH
69772: LD_INT 1
69774: ARRAY
69775: PPUSH
69776: LD_VAR 0 12
69780: PUSH
69781: LD_INT 2
69783: ARRAY
69784: PPUSH
69785: CALL_OW 298
69789: ST_TO_ADDR
// distance := 9999 ;
69790: LD_ADDR_VAR 0 10
69794: PUSH
69795: LD_INT 9999
69797: ST_TO_ADDR
// for i := 0 to 5 do
69798: LD_ADDR_VAR 0 6
69802: PUSH
69803: DOUBLE
69804: LD_INT 0
69806: DEC
69807: ST_TO_ADDR
69808: LD_INT 5
69810: PUSH
69811: FOR_TO
69812: IFFALSE 69955
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69814: LD_ADDR_VAR 0 7
69818: PUSH
69819: LD_VAR 0 1
69823: PPUSH
69824: LD_VAR 0 6
69828: PPUSH
69829: LD_VAR 0 11
69833: PPUSH
69834: CALL_OW 272
69838: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69839: LD_ADDR_VAR 0 8
69843: PUSH
69844: LD_VAR 0 2
69848: PPUSH
69849: LD_VAR 0 6
69853: PPUSH
69854: LD_VAR 0 11
69858: PPUSH
69859: CALL_OW 273
69863: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69864: LD_VAR 0 7
69868: PPUSH
69869: LD_VAR 0 8
69873: PPUSH
69874: CALL_OW 488
69878: NOT
69879: IFFALSE 69883
// continue ;
69881: GO 69811
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69883: LD_ADDR_VAR 0 9
69887: PUSH
69888: LD_VAR 0 12
69892: PUSH
69893: LD_INT 1
69895: ARRAY
69896: PPUSH
69897: LD_VAR 0 12
69901: PUSH
69902: LD_INT 2
69904: ARRAY
69905: PPUSH
69906: LD_VAR 0 7
69910: PPUSH
69911: LD_VAR 0 8
69915: PPUSH
69916: CALL_OW 298
69920: ST_TO_ADDR
// if tmp < distance then
69921: LD_VAR 0 9
69925: PUSH
69926: LD_VAR 0 10
69930: LESS
69931: IFFALSE 69953
// begin result := i ;
69933: LD_ADDR_VAR 0 5
69937: PUSH
69938: LD_VAR 0 6
69942: ST_TO_ADDR
// distance := tmp ;
69943: LD_ADDR_VAR 0 10
69947: PUSH
69948: LD_VAR 0 9
69952: ST_TO_ADDR
// end ; end ;
69953: GO 69811
69955: POP
69956: POP
// end ;
69957: LD_VAR 0 5
69961: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69962: LD_INT 0
69964: PPUSH
69965: PPUSH
// if not driver or not IsInUnit ( driver ) then
69966: LD_VAR 0 1
69970: NOT
69971: PUSH
69972: LD_VAR 0 1
69976: PPUSH
69977: CALL_OW 310
69981: NOT
69982: OR
69983: IFFALSE 69987
// exit ;
69985: GO 70077
// vehicle := IsInUnit ( driver ) ;
69987: LD_ADDR_VAR 0 3
69991: PUSH
69992: LD_VAR 0 1
69996: PPUSH
69997: CALL_OW 310
70001: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70002: LD_VAR 0 1
70006: PPUSH
70007: LD_STRING \
70009: PUSH
70010: LD_INT 0
70012: PUSH
70013: LD_INT 0
70015: PUSH
70016: LD_INT 0
70018: PUSH
70019: LD_INT 0
70021: PUSH
70022: LD_INT 0
70024: PUSH
70025: LD_INT 0
70027: PUSH
70028: EMPTY
70029: LIST
70030: LIST
70031: LIST
70032: LIST
70033: LIST
70034: LIST
70035: LIST
70036: PUSH
70037: LD_STRING E
70039: PUSH
70040: LD_INT 0
70042: PUSH
70043: LD_INT 0
70045: PUSH
70046: LD_VAR 0 3
70050: PUSH
70051: LD_INT 0
70053: PUSH
70054: LD_INT 0
70056: PUSH
70057: LD_INT 0
70059: PUSH
70060: EMPTY
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: LIST
70066: LIST
70067: LIST
70068: PUSH
70069: EMPTY
70070: LIST
70071: LIST
70072: PPUSH
70073: CALL_OW 446
// end ;
70077: LD_VAR 0 2
70081: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70082: LD_INT 0
70084: PPUSH
70085: PPUSH
// if not driver or not IsInUnit ( driver ) then
70086: LD_VAR 0 1
70090: NOT
70091: PUSH
70092: LD_VAR 0 1
70096: PPUSH
70097: CALL_OW 310
70101: NOT
70102: OR
70103: IFFALSE 70107
// exit ;
70105: GO 70197
// vehicle := IsInUnit ( driver ) ;
70107: LD_ADDR_VAR 0 3
70111: PUSH
70112: LD_VAR 0 1
70116: PPUSH
70117: CALL_OW 310
70121: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70122: LD_VAR 0 1
70126: PPUSH
70127: LD_STRING \
70129: PUSH
70130: LD_INT 0
70132: PUSH
70133: LD_INT 0
70135: PUSH
70136: LD_INT 0
70138: PUSH
70139: LD_INT 0
70141: PUSH
70142: LD_INT 0
70144: PUSH
70145: LD_INT 0
70147: PUSH
70148: EMPTY
70149: LIST
70150: LIST
70151: LIST
70152: LIST
70153: LIST
70154: LIST
70155: LIST
70156: PUSH
70157: LD_STRING E
70159: PUSH
70160: LD_INT 0
70162: PUSH
70163: LD_INT 0
70165: PUSH
70166: LD_VAR 0 3
70170: PUSH
70171: LD_INT 0
70173: PUSH
70174: LD_INT 0
70176: PUSH
70177: LD_INT 0
70179: PUSH
70180: EMPTY
70181: LIST
70182: LIST
70183: LIST
70184: LIST
70185: LIST
70186: LIST
70187: LIST
70188: PUSH
70189: EMPTY
70190: LIST
70191: LIST
70192: PPUSH
70193: CALL_OW 447
// end ;
70197: LD_VAR 0 2
70201: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70202: LD_INT 0
70204: PPUSH
70205: PPUSH
70206: PPUSH
// tmp := [ ] ;
70207: LD_ADDR_VAR 0 5
70211: PUSH
70212: EMPTY
70213: ST_TO_ADDR
// for i in units do
70214: LD_ADDR_VAR 0 4
70218: PUSH
70219: LD_VAR 0 1
70223: PUSH
70224: FOR_IN
70225: IFFALSE 70263
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70227: LD_ADDR_VAR 0 5
70231: PUSH
70232: LD_VAR 0 5
70236: PPUSH
70237: LD_VAR 0 5
70241: PUSH
70242: LD_INT 1
70244: PLUS
70245: PPUSH
70246: LD_VAR 0 4
70250: PPUSH
70251: CALL_OW 256
70255: PPUSH
70256: CALL_OW 2
70260: ST_TO_ADDR
70261: GO 70224
70263: POP
70264: POP
// if not tmp then
70265: LD_VAR 0 5
70269: NOT
70270: IFFALSE 70274
// exit ;
70272: GO 70322
// if asc then
70274: LD_VAR 0 2
70278: IFFALSE 70302
// result := SortListByListAsc ( units , tmp ) else
70280: LD_ADDR_VAR 0 3
70284: PUSH
70285: LD_VAR 0 1
70289: PPUSH
70290: LD_VAR 0 5
70294: PPUSH
70295: CALL_OW 76
70299: ST_TO_ADDR
70300: GO 70322
// result := SortListByListDesc ( units , tmp ) ;
70302: LD_ADDR_VAR 0 3
70306: PUSH
70307: LD_VAR 0 1
70311: PPUSH
70312: LD_VAR 0 5
70316: PPUSH
70317: CALL_OW 77
70321: ST_TO_ADDR
// end ;
70322: LD_VAR 0 3
70326: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70327: LD_INT 0
70329: PPUSH
70330: PPUSH
// task := GetTaskList ( mech ) ;
70331: LD_ADDR_VAR 0 4
70335: PUSH
70336: LD_VAR 0 1
70340: PPUSH
70341: CALL_OW 437
70345: ST_TO_ADDR
// if not task then
70346: LD_VAR 0 4
70350: NOT
70351: IFFALSE 70355
// exit ;
70353: GO 70397
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70355: LD_ADDR_VAR 0 3
70359: PUSH
70360: LD_VAR 0 4
70364: PUSH
70365: LD_INT 1
70367: ARRAY
70368: PUSH
70369: LD_INT 1
70371: ARRAY
70372: PUSH
70373: LD_STRING r
70375: EQUAL
70376: PUSH
70377: LD_VAR 0 4
70381: PUSH
70382: LD_INT 1
70384: ARRAY
70385: PUSH
70386: LD_INT 4
70388: ARRAY
70389: PUSH
70390: LD_VAR 0 2
70394: EQUAL
70395: AND
70396: ST_TO_ADDR
// end ;
70397: LD_VAR 0 3
70401: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70402: LD_INT 0
70404: PPUSH
// SetDir ( unit , d ) ;
70405: LD_VAR 0 1
70409: PPUSH
70410: LD_VAR 0 4
70414: PPUSH
70415: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70419: LD_VAR 0 1
70423: PPUSH
70424: LD_VAR 0 2
70428: PPUSH
70429: LD_VAR 0 3
70433: PPUSH
70434: LD_VAR 0 5
70438: PPUSH
70439: CALL_OW 48
// end ;
70443: LD_VAR 0 6
70447: RET
// export function ToNaturalNumber ( number ) ; begin
70448: LD_INT 0
70450: PPUSH
// result := number div 1 ;
70451: LD_ADDR_VAR 0 2
70455: PUSH
70456: LD_VAR 0 1
70460: PUSH
70461: LD_INT 1
70463: DIV
70464: ST_TO_ADDR
// if number < 0 then
70465: LD_VAR 0 1
70469: PUSH
70470: LD_INT 0
70472: LESS
70473: IFFALSE 70483
// result := 0 ;
70475: LD_ADDR_VAR 0 2
70479: PUSH
70480: LD_INT 0
70482: ST_TO_ADDR
// end ;
70483: LD_VAR 0 2
70487: RET
// export function SortByClass ( units , class ) ; var un ; begin
70488: LD_INT 0
70490: PPUSH
70491: PPUSH
// if not units or not class then
70492: LD_VAR 0 1
70496: NOT
70497: PUSH
70498: LD_VAR 0 2
70502: NOT
70503: OR
70504: IFFALSE 70508
// exit ;
70506: GO 70603
// result := [ ] ;
70508: LD_ADDR_VAR 0 3
70512: PUSH
70513: EMPTY
70514: ST_TO_ADDR
// for un in units do
70515: LD_ADDR_VAR 0 4
70519: PUSH
70520: LD_VAR 0 1
70524: PUSH
70525: FOR_IN
70526: IFFALSE 70601
// if GetClass ( un ) = class then
70528: LD_VAR 0 4
70532: PPUSH
70533: CALL_OW 257
70537: PUSH
70538: LD_VAR 0 2
70542: EQUAL
70543: IFFALSE 70570
// result := Insert ( result , 1 , un ) else
70545: LD_ADDR_VAR 0 3
70549: PUSH
70550: LD_VAR 0 3
70554: PPUSH
70555: LD_INT 1
70557: PPUSH
70558: LD_VAR 0 4
70562: PPUSH
70563: CALL_OW 2
70567: ST_TO_ADDR
70568: GO 70599
// result := Replace ( result , result + 1 , un ) ;
70570: LD_ADDR_VAR 0 3
70574: PUSH
70575: LD_VAR 0 3
70579: PPUSH
70580: LD_VAR 0 3
70584: PUSH
70585: LD_INT 1
70587: PLUS
70588: PPUSH
70589: LD_VAR 0 4
70593: PPUSH
70594: CALL_OW 1
70598: ST_TO_ADDR
70599: GO 70525
70601: POP
70602: POP
// end ;
70603: LD_VAR 0 3
70607: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70608: LD_INT 0
70610: PPUSH
70611: PPUSH
70612: PPUSH
70613: PPUSH
70614: PPUSH
70615: PPUSH
70616: PPUSH
// result := [ ] ;
70617: LD_ADDR_VAR 0 4
70621: PUSH
70622: EMPTY
70623: ST_TO_ADDR
// if x - r < 0 then
70624: LD_VAR 0 1
70628: PUSH
70629: LD_VAR 0 3
70633: MINUS
70634: PUSH
70635: LD_INT 0
70637: LESS
70638: IFFALSE 70650
// min_x := 0 else
70640: LD_ADDR_VAR 0 8
70644: PUSH
70645: LD_INT 0
70647: ST_TO_ADDR
70648: GO 70666
// min_x := x - r ;
70650: LD_ADDR_VAR 0 8
70654: PUSH
70655: LD_VAR 0 1
70659: PUSH
70660: LD_VAR 0 3
70664: MINUS
70665: ST_TO_ADDR
// if y - r < 0 then
70666: LD_VAR 0 2
70670: PUSH
70671: LD_VAR 0 3
70675: MINUS
70676: PUSH
70677: LD_INT 0
70679: LESS
70680: IFFALSE 70692
// min_y := 0 else
70682: LD_ADDR_VAR 0 7
70686: PUSH
70687: LD_INT 0
70689: ST_TO_ADDR
70690: GO 70708
// min_y := y - r ;
70692: LD_ADDR_VAR 0 7
70696: PUSH
70697: LD_VAR 0 2
70701: PUSH
70702: LD_VAR 0 3
70706: MINUS
70707: ST_TO_ADDR
// max_x := x + r ;
70708: LD_ADDR_VAR 0 9
70712: PUSH
70713: LD_VAR 0 1
70717: PUSH
70718: LD_VAR 0 3
70722: PLUS
70723: ST_TO_ADDR
// max_y := y + r ;
70724: LD_ADDR_VAR 0 10
70728: PUSH
70729: LD_VAR 0 2
70733: PUSH
70734: LD_VAR 0 3
70738: PLUS
70739: ST_TO_ADDR
// for _x = min_x to max_x do
70740: LD_ADDR_VAR 0 5
70744: PUSH
70745: DOUBLE
70746: LD_VAR 0 8
70750: DEC
70751: ST_TO_ADDR
70752: LD_VAR 0 9
70756: PUSH
70757: FOR_TO
70758: IFFALSE 70859
// for _y = min_y to max_y do
70760: LD_ADDR_VAR 0 6
70764: PUSH
70765: DOUBLE
70766: LD_VAR 0 7
70770: DEC
70771: ST_TO_ADDR
70772: LD_VAR 0 10
70776: PUSH
70777: FOR_TO
70778: IFFALSE 70855
// begin if not ValidHex ( _x , _y ) then
70780: LD_VAR 0 5
70784: PPUSH
70785: LD_VAR 0 6
70789: PPUSH
70790: CALL_OW 488
70794: NOT
70795: IFFALSE 70799
// continue ;
70797: GO 70777
// if GetResourceTypeXY ( _x , _y ) then
70799: LD_VAR 0 5
70803: PPUSH
70804: LD_VAR 0 6
70808: PPUSH
70809: CALL_OW 283
70813: IFFALSE 70853
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70815: LD_ADDR_VAR 0 4
70819: PUSH
70820: LD_VAR 0 4
70824: PPUSH
70825: LD_VAR 0 4
70829: PUSH
70830: LD_INT 1
70832: PLUS
70833: PPUSH
70834: LD_VAR 0 5
70838: PUSH
70839: LD_VAR 0 6
70843: PUSH
70844: EMPTY
70845: LIST
70846: LIST
70847: PPUSH
70848: CALL_OW 1
70852: ST_TO_ADDR
// end ;
70853: GO 70777
70855: POP
70856: POP
70857: GO 70757
70859: POP
70860: POP
// end ;
70861: LD_VAR 0 4
70865: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70866: LD_INT 0
70868: PPUSH
70869: PPUSH
70870: PPUSH
70871: PPUSH
70872: PPUSH
70873: PPUSH
70874: PPUSH
70875: PPUSH
// if not units then
70876: LD_VAR 0 1
70880: NOT
70881: IFFALSE 70885
// exit ;
70883: GO 71409
// result := UnitFilter ( units , [ f_ok ] ) ;
70885: LD_ADDR_VAR 0 3
70889: PUSH
70890: LD_VAR 0 1
70894: PPUSH
70895: LD_INT 50
70897: PUSH
70898: EMPTY
70899: LIST
70900: PPUSH
70901: CALL_OW 72
70905: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70906: LD_ADDR_VAR 0 8
70910: PUSH
70911: LD_VAR 0 1
70915: PUSH
70916: LD_INT 1
70918: ARRAY
70919: PPUSH
70920: CALL_OW 255
70924: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70925: LD_ADDR_VAR 0 10
70929: PUSH
70930: LD_INT 29
70932: PUSH
70933: LD_INT 91
70935: PUSH
70936: LD_INT 49
70938: PUSH
70939: EMPTY
70940: LIST
70941: LIST
70942: LIST
70943: ST_TO_ADDR
// if not result then
70944: LD_VAR 0 3
70948: NOT
70949: IFFALSE 70953
// exit ;
70951: GO 71409
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70953: LD_ADDR_VAR 0 5
70957: PUSH
70958: LD_INT 81
70960: PUSH
70961: LD_VAR 0 8
70965: PUSH
70966: EMPTY
70967: LIST
70968: LIST
70969: PPUSH
70970: CALL_OW 69
70974: ST_TO_ADDR
// for i in result do
70975: LD_ADDR_VAR 0 4
70979: PUSH
70980: LD_VAR 0 3
70984: PUSH
70985: FOR_IN
70986: IFFALSE 71407
// begin tag := GetTag ( i ) + 1 ;
70988: LD_ADDR_VAR 0 9
70992: PUSH
70993: LD_VAR 0 4
70997: PPUSH
70998: CALL_OW 110
71002: PUSH
71003: LD_INT 1
71005: PLUS
71006: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71007: LD_ADDR_VAR 0 7
71011: PUSH
71012: LD_VAR 0 4
71016: PPUSH
71017: CALL_OW 250
71021: PPUSH
71022: LD_VAR 0 4
71026: PPUSH
71027: CALL_OW 251
71031: PPUSH
71032: LD_INT 6
71034: PPUSH
71035: CALL 70608 0 3
71039: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71040: LD_VAR 0 4
71044: PPUSH
71045: CALL_OW 247
71049: PUSH
71050: LD_INT 2
71052: EQUAL
71053: PUSH
71054: LD_VAR 0 7
71058: AND
71059: PUSH
71060: LD_VAR 0 4
71064: PPUSH
71065: CALL_OW 264
71069: PUSH
71070: LD_VAR 0 10
71074: IN
71075: NOT
71076: AND
71077: IFFALSE 71116
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71079: LD_VAR 0 4
71083: PPUSH
71084: LD_VAR 0 7
71088: PUSH
71089: LD_INT 1
71091: ARRAY
71092: PUSH
71093: LD_INT 1
71095: ARRAY
71096: PPUSH
71097: LD_VAR 0 7
71101: PUSH
71102: LD_INT 1
71104: ARRAY
71105: PUSH
71106: LD_INT 2
71108: ARRAY
71109: PPUSH
71110: CALL_OW 116
71114: GO 71405
// if path > tag then
71116: LD_VAR 0 2
71120: PUSH
71121: LD_VAR 0 9
71125: GREATER
71126: IFFALSE 71334
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71128: LD_ADDR_VAR 0 6
71132: PUSH
71133: LD_VAR 0 5
71137: PPUSH
71138: LD_INT 91
71140: PUSH
71141: LD_VAR 0 4
71145: PUSH
71146: LD_INT 8
71148: PUSH
71149: EMPTY
71150: LIST
71151: LIST
71152: LIST
71153: PPUSH
71154: CALL_OW 72
71158: ST_TO_ADDR
// if nearEnemy then
71159: LD_VAR 0 6
71163: IFFALSE 71232
// begin if GetWeapon ( i ) = ru_time_lapser then
71165: LD_VAR 0 4
71169: PPUSH
71170: CALL_OW 264
71174: PUSH
71175: LD_INT 49
71177: EQUAL
71178: IFFALSE 71206
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71180: LD_VAR 0 4
71184: PPUSH
71185: LD_VAR 0 6
71189: PPUSH
71190: LD_VAR 0 4
71194: PPUSH
71195: CALL_OW 74
71199: PPUSH
71200: CALL_OW 112
71204: GO 71230
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71206: LD_VAR 0 4
71210: PPUSH
71211: LD_VAR 0 6
71215: PPUSH
71216: LD_VAR 0 4
71220: PPUSH
71221: CALL_OW 74
71225: PPUSH
71226: CALL_OW 115
// end else
71230: GO 71332
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71232: LD_VAR 0 4
71236: PPUSH
71237: LD_VAR 0 2
71241: PUSH
71242: LD_VAR 0 9
71246: ARRAY
71247: PUSH
71248: LD_INT 1
71250: ARRAY
71251: PPUSH
71252: LD_VAR 0 2
71256: PUSH
71257: LD_VAR 0 9
71261: ARRAY
71262: PUSH
71263: LD_INT 2
71265: ARRAY
71266: PPUSH
71267: CALL_OW 297
71271: PUSH
71272: LD_INT 6
71274: GREATER
71275: IFFALSE 71318
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71277: LD_VAR 0 4
71281: PPUSH
71282: LD_VAR 0 2
71286: PUSH
71287: LD_VAR 0 9
71291: ARRAY
71292: PUSH
71293: LD_INT 1
71295: ARRAY
71296: PPUSH
71297: LD_VAR 0 2
71301: PUSH
71302: LD_VAR 0 9
71306: ARRAY
71307: PUSH
71308: LD_INT 2
71310: ARRAY
71311: PPUSH
71312: CALL_OW 114
71316: GO 71332
// SetTag ( i , tag ) ;
71318: LD_VAR 0 4
71322: PPUSH
71323: LD_VAR 0 9
71327: PPUSH
71328: CALL_OW 109
// end else
71332: GO 71405
// if enemy then
71334: LD_VAR 0 5
71338: IFFALSE 71405
// begin if GetWeapon ( i ) = ru_time_lapser then
71340: LD_VAR 0 4
71344: PPUSH
71345: CALL_OW 264
71349: PUSH
71350: LD_INT 49
71352: EQUAL
71353: IFFALSE 71381
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71355: LD_VAR 0 4
71359: PPUSH
71360: LD_VAR 0 5
71364: PPUSH
71365: LD_VAR 0 4
71369: PPUSH
71370: CALL_OW 74
71374: PPUSH
71375: CALL_OW 112
71379: GO 71405
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71381: LD_VAR 0 4
71385: PPUSH
71386: LD_VAR 0 5
71390: PPUSH
71391: LD_VAR 0 4
71395: PPUSH
71396: CALL_OW 74
71400: PPUSH
71401: CALL_OW 115
// end ; end ;
71405: GO 70985
71407: POP
71408: POP
// end ;
71409: LD_VAR 0 3
71413: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71414: LD_INT 0
71416: PPUSH
71417: PPUSH
71418: PPUSH
// if not unit or IsInUnit ( unit ) then
71419: LD_VAR 0 1
71423: NOT
71424: PUSH
71425: LD_VAR 0 1
71429: PPUSH
71430: CALL_OW 310
71434: OR
71435: IFFALSE 71439
// exit ;
71437: GO 71530
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71439: LD_ADDR_VAR 0 4
71443: PUSH
71444: LD_VAR 0 1
71448: PPUSH
71449: CALL_OW 250
71453: PPUSH
71454: LD_VAR 0 2
71458: PPUSH
71459: LD_INT 1
71461: PPUSH
71462: CALL_OW 272
71466: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71467: LD_ADDR_VAR 0 5
71471: PUSH
71472: LD_VAR 0 1
71476: PPUSH
71477: CALL_OW 251
71481: PPUSH
71482: LD_VAR 0 2
71486: PPUSH
71487: LD_INT 1
71489: PPUSH
71490: CALL_OW 273
71494: ST_TO_ADDR
// if ValidHex ( x , y ) then
71495: LD_VAR 0 4
71499: PPUSH
71500: LD_VAR 0 5
71504: PPUSH
71505: CALL_OW 488
71509: IFFALSE 71530
// ComTurnXY ( unit , x , y ) ;
71511: LD_VAR 0 1
71515: PPUSH
71516: LD_VAR 0 4
71520: PPUSH
71521: LD_VAR 0 5
71525: PPUSH
71526: CALL_OW 118
// end ;
71530: LD_VAR 0 3
71534: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71535: LD_INT 0
71537: PPUSH
71538: PPUSH
// result := false ;
71539: LD_ADDR_VAR 0 3
71543: PUSH
71544: LD_INT 0
71546: ST_TO_ADDR
// if not units then
71547: LD_VAR 0 2
71551: NOT
71552: IFFALSE 71556
// exit ;
71554: GO 71601
// for i in units do
71556: LD_ADDR_VAR 0 4
71560: PUSH
71561: LD_VAR 0 2
71565: PUSH
71566: FOR_IN
71567: IFFALSE 71599
// if See ( side , i ) then
71569: LD_VAR 0 1
71573: PPUSH
71574: LD_VAR 0 4
71578: PPUSH
71579: CALL_OW 292
71583: IFFALSE 71597
// begin result := true ;
71585: LD_ADDR_VAR 0 3
71589: PUSH
71590: LD_INT 1
71592: ST_TO_ADDR
// exit ;
71593: POP
71594: POP
71595: GO 71601
// end ;
71597: GO 71566
71599: POP
71600: POP
// end ;
71601: LD_VAR 0 3
71605: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71606: LD_INT 0
71608: PPUSH
71609: PPUSH
71610: PPUSH
71611: PPUSH
// if not unit or not points then
71612: LD_VAR 0 1
71616: NOT
71617: PUSH
71618: LD_VAR 0 2
71622: NOT
71623: OR
71624: IFFALSE 71628
// exit ;
71626: GO 71718
// dist := 99999 ;
71628: LD_ADDR_VAR 0 5
71632: PUSH
71633: LD_INT 99999
71635: ST_TO_ADDR
// for i in points do
71636: LD_ADDR_VAR 0 4
71640: PUSH
71641: LD_VAR 0 2
71645: PUSH
71646: FOR_IN
71647: IFFALSE 71716
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71649: LD_ADDR_VAR 0 6
71653: PUSH
71654: LD_VAR 0 1
71658: PPUSH
71659: LD_VAR 0 4
71663: PUSH
71664: LD_INT 1
71666: ARRAY
71667: PPUSH
71668: LD_VAR 0 4
71672: PUSH
71673: LD_INT 2
71675: ARRAY
71676: PPUSH
71677: CALL_OW 297
71681: ST_TO_ADDR
// if tmpDist < dist then
71682: LD_VAR 0 6
71686: PUSH
71687: LD_VAR 0 5
71691: LESS
71692: IFFALSE 71714
// begin result := i ;
71694: LD_ADDR_VAR 0 3
71698: PUSH
71699: LD_VAR 0 4
71703: ST_TO_ADDR
// dist := tmpDist ;
71704: LD_ADDR_VAR 0 5
71708: PUSH
71709: LD_VAR 0 6
71713: ST_TO_ADDR
// end ; end ;
71714: GO 71646
71716: POP
71717: POP
// end ;
71718: LD_VAR 0 3
71722: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71723: LD_INT 0
71725: PPUSH
// uc_side := side ;
71726: LD_ADDR_OWVAR 20
71730: PUSH
71731: LD_VAR 0 1
71735: ST_TO_ADDR
// uc_nation := 3 ;
71736: LD_ADDR_OWVAR 21
71740: PUSH
71741: LD_INT 3
71743: ST_TO_ADDR
// vc_chassis := 25 ;
71744: LD_ADDR_OWVAR 37
71748: PUSH
71749: LD_INT 25
71751: ST_TO_ADDR
// vc_engine := engine_siberite ;
71752: LD_ADDR_OWVAR 39
71756: PUSH
71757: LD_INT 3
71759: ST_TO_ADDR
// vc_control := control_computer ;
71760: LD_ADDR_OWVAR 38
71764: PUSH
71765: LD_INT 3
71767: ST_TO_ADDR
// vc_weapon := 59 ;
71768: LD_ADDR_OWVAR 40
71772: PUSH
71773: LD_INT 59
71775: ST_TO_ADDR
// result := CreateVehicle ;
71776: LD_ADDR_VAR 0 5
71780: PUSH
71781: CALL_OW 45
71785: ST_TO_ADDR
// SetDir ( result , d ) ;
71786: LD_VAR 0 5
71790: PPUSH
71791: LD_VAR 0 4
71795: PPUSH
71796: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71800: LD_VAR 0 5
71804: PPUSH
71805: LD_VAR 0 2
71809: PPUSH
71810: LD_VAR 0 3
71814: PPUSH
71815: LD_INT 0
71817: PPUSH
71818: CALL_OW 48
// end ;
71822: LD_VAR 0 5
71826: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71827: LD_INT 0
71829: PPUSH
71830: PPUSH
71831: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71832: LD_ADDR_VAR 0 2
71836: PUSH
71837: LD_INT 0
71839: PUSH
71840: LD_INT 0
71842: PUSH
71843: LD_INT 0
71845: PUSH
71846: LD_INT 0
71848: PUSH
71849: EMPTY
71850: LIST
71851: LIST
71852: LIST
71853: LIST
71854: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71855: LD_VAR 0 1
71859: NOT
71860: PUSH
71861: LD_VAR 0 1
71865: PPUSH
71866: CALL_OW 264
71870: PUSH
71871: LD_INT 12
71873: PUSH
71874: LD_INT 51
71876: PUSH
71877: LD_INT 32
71879: PUSH
71880: LD_INT 89
71882: PUSH
71883: EMPTY
71884: LIST
71885: LIST
71886: LIST
71887: LIST
71888: IN
71889: NOT
71890: OR
71891: IFFALSE 71895
// exit ;
71893: GO 71993
// for i := 1 to 3 do
71895: LD_ADDR_VAR 0 3
71899: PUSH
71900: DOUBLE
71901: LD_INT 1
71903: DEC
71904: ST_TO_ADDR
71905: LD_INT 3
71907: PUSH
71908: FOR_TO
71909: IFFALSE 71991
// begin tmp := GetCargo ( cargo , i ) ;
71911: LD_ADDR_VAR 0 4
71915: PUSH
71916: LD_VAR 0 1
71920: PPUSH
71921: LD_VAR 0 3
71925: PPUSH
71926: CALL_OW 289
71930: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71931: LD_ADDR_VAR 0 2
71935: PUSH
71936: LD_VAR 0 2
71940: PPUSH
71941: LD_VAR 0 3
71945: PPUSH
71946: LD_VAR 0 4
71950: PPUSH
71951: CALL_OW 1
71955: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71956: LD_ADDR_VAR 0 2
71960: PUSH
71961: LD_VAR 0 2
71965: PPUSH
71966: LD_INT 4
71968: PPUSH
71969: LD_VAR 0 2
71973: PUSH
71974: LD_INT 4
71976: ARRAY
71977: PUSH
71978: LD_VAR 0 4
71982: PLUS
71983: PPUSH
71984: CALL_OW 1
71988: ST_TO_ADDR
// end ;
71989: GO 71908
71991: POP
71992: POP
// end ;
71993: LD_VAR 0 2
71997: RET
// export function Length ( array ) ; begin
71998: LD_INT 0
72000: PPUSH
// result := array + 0 ;
72001: LD_ADDR_VAR 0 2
72005: PUSH
72006: LD_VAR 0 1
72010: PUSH
72011: LD_INT 0
72013: PLUS
72014: ST_TO_ADDR
// end ;
72015: LD_VAR 0 2
72019: RET
// export function PrepareArray ( array ) ; begin
72020: LD_INT 0
72022: PPUSH
// result := array diff 0 ;
72023: LD_ADDR_VAR 0 2
72027: PUSH
72028: LD_VAR 0 1
72032: PUSH
72033: LD_INT 0
72035: DIFF
72036: ST_TO_ADDR
// if not result [ 1 ] then
72037: LD_VAR 0 2
72041: PUSH
72042: LD_INT 1
72044: ARRAY
72045: NOT
72046: IFFALSE 72066
// result := Delete ( result , 1 ) ;
72048: LD_ADDR_VAR 0 2
72052: PUSH
72053: LD_VAR 0 2
72057: PPUSH
72058: LD_INT 1
72060: PPUSH
72061: CALL_OW 3
72065: ST_TO_ADDR
// end ;
72066: LD_VAR 0 2
72070: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72071: LD_INT 0
72073: PPUSH
72074: PPUSH
72075: PPUSH
72076: PPUSH
// sibRocketRange := 25 ;
72077: LD_ADDR_VAR 0 6
72081: PUSH
72082: LD_INT 25
72084: ST_TO_ADDR
// result := false ;
72085: LD_ADDR_VAR 0 4
72089: PUSH
72090: LD_INT 0
72092: ST_TO_ADDR
// for i := 0 to 5 do
72093: LD_ADDR_VAR 0 5
72097: PUSH
72098: DOUBLE
72099: LD_INT 0
72101: DEC
72102: ST_TO_ADDR
72103: LD_INT 5
72105: PUSH
72106: FOR_TO
72107: IFFALSE 72174
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72109: LD_VAR 0 1
72113: PPUSH
72114: LD_VAR 0 5
72118: PPUSH
72119: LD_VAR 0 6
72123: PPUSH
72124: CALL_OW 272
72128: PPUSH
72129: LD_VAR 0 2
72133: PPUSH
72134: LD_VAR 0 5
72138: PPUSH
72139: LD_VAR 0 6
72143: PPUSH
72144: CALL_OW 273
72148: PPUSH
72149: LD_VAR 0 3
72153: PPUSH
72154: CALL_OW 309
72158: IFFALSE 72172
// begin result := true ;
72160: LD_ADDR_VAR 0 4
72164: PUSH
72165: LD_INT 1
72167: ST_TO_ADDR
// exit ;
72168: POP
72169: POP
72170: GO 72176
// end ;
72172: GO 72106
72174: POP
72175: POP
// end ;
72176: LD_VAR 0 4
72180: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72181: LD_INT 0
72183: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72184: LD_VAR 0 1
72188: PPUSH
72189: LD_VAR 0 2
72193: PPUSH
72194: LD_INT 0
72196: PPUSH
72197: LD_INT 0
72199: PPUSH
72200: LD_INT 1
72202: PPUSH
72203: LD_INT 0
72205: PPUSH
72206: CALL_OW 587
// end ; end_of_file
72210: LD_VAR 0 3
72214: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72215: LD_VAR 0 1
72219: PUSH
72220: LD_INT 200
72222: DOUBLE
72223: GREATEREQUAL
72224: IFFALSE 72232
72226: LD_INT 299
72228: DOUBLE
72229: LESSEQUAL
72230: IFTRUE 72234
72232: GO 72266
72234: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72235: LD_VAR 0 1
72239: PPUSH
72240: LD_VAR 0 2
72244: PPUSH
72245: LD_VAR 0 3
72249: PPUSH
72250: LD_VAR 0 4
72254: PPUSH
72255: LD_VAR 0 5
72259: PPUSH
72260: CALL 11087 0 5
72264: GO 72343
72266: LD_INT 300
72268: DOUBLE
72269: GREATEREQUAL
72270: IFFALSE 72278
72272: LD_INT 399
72274: DOUBLE
72275: LESSEQUAL
72276: IFTRUE 72280
72278: GO 72342
72280: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72281: LD_VAR 0 1
72285: PPUSH
72286: LD_VAR 0 2
72290: PPUSH
72291: LD_VAR 0 3
72295: PPUSH
72296: LD_VAR 0 4
72300: PPUSH
72301: LD_VAR 0 5
72305: PPUSH
72306: LD_VAR 0 6
72310: PPUSH
72311: LD_VAR 0 7
72315: PPUSH
72316: LD_VAR 0 8
72320: PPUSH
72321: LD_VAR 0 9
72325: PPUSH
72326: LD_VAR 0 10
72330: PPUSH
72331: LD_VAR 0 11
72335: PPUSH
72336: CALL 27503 0 11
72340: GO 72343
72342: POP
// end ;
72343: PPOPN 11
72345: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72346: LD_VAR 0 1
72350: PPUSH
72351: LD_VAR 0 2
72355: PPUSH
72356: LD_VAR 0 3
72360: PPUSH
72361: LD_VAR 0 4
72365: PPUSH
72366: LD_VAR 0 5
72370: PPUSH
72371: CALL 10823 0 5
// end ; end_of_file
72375: PPOPN 5
72377: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72378: LD_VAR 0 1
72382: PPUSH
72383: LD_VAR 0 2
72387: PPUSH
72388: LD_VAR 0 3
72392: PPUSH
72393: LD_VAR 0 4
72397: PPUSH
72398: LD_VAR 0 5
72402: PPUSH
72403: LD_VAR 0 6
72407: PPUSH
72408: CALL 15155 0 6
// end ;
72412: PPOPN 6
72414: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72415: LD_INT 0
72417: PPUSH
// begin if not units then
72418: LD_VAR 0 1
72422: NOT
72423: IFFALSE 72427
// exit ;
72425: GO 72427
// end ;
72427: PPOPN 7
72429: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72430: CALL 15059 0 0
// end ;
72434: PPOPN 1
72436: END
