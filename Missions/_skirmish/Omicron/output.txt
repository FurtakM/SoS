// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 98 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 24
// Difficulty := 2 else
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 2
  21: ST_TO_ADDR
  22: GO 37
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_OWVAR 67
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// PrepareNature ( 3 , 3 , 4 , 2 , 1 , 0 , 0 , natureArea , 0 ) ;
  37: LD_INT 3
  39: PPUSH
  40: LD_INT 3
  42: PPUSH
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 2
  48: PPUSH
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 0
  54: PPUSH
  55: LD_INT 0
  57: PPUSH
  58: LD_INT 8
  60: PPUSH
  61: LD_INT 0
  63: PPUSH
  64: CALL 61598 0 9
// PrepareRussian ;
  68: CALL 896 0 0
// PrepareAmerican ;
  72: CALL 202 0 0
// PrepareSikorski ;
  76: CALL 694 0 0
// Action ;
  80: CALL 6991 0 0
// if debug then
  84: LD_EXP 1
  88: IFFALSE 97
// FogOff ( 1 ) ;
  90: LD_INT 1
  92: PPUSH
  93: CALL_OW 344
// end ;
  97: END
// export debug , activeGrishkoAI , allowToPatrol , spottedByPatrol , russianAlert , startAttackOnOmicron , omicronFall , retreatFromOmicron , sikorskiInOmicron , usLoseCounter , ruLoseCounter , tanksCounter ; function Init ; begin
  98: LD_INT 0
 100: PPUSH
// debug := false ;
 101: LD_ADDR_EXP 1
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// activeGrishkoAI := true ;
 109: LD_ADDR_EXP 2
 113: PUSH
 114: LD_INT 1
 116: ST_TO_ADDR
// allowToPatrol := true ;
 117: LD_ADDR_EXP 3
 121: PUSH
 122: LD_INT 1
 124: ST_TO_ADDR
// spottedByPatrol := false ;
 125: LD_ADDR_EXP 4
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// russianAlert := false ;
 133: LD_ADDR_EXP 5
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// startAttackOnOmicron := false ;
 141: LD_ADDR_EXP 6
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// omicronFall := false ;
 149: LD_ADDR_EXP 7
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// retreatFromOmicron := false ;
 157: LD_ADDR_EXP 8
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// sikorskiInOmicron := false ;
 165: LD_ADDR_EXP 9
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// usLoseCounter := 0 ;
 173: LD_ADDR_EXP 10
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// ruLoseCounter := 0 ;
 181: LD_ADDR_EXP 11
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// tanksCounter := 0 ;
 189: LD_ADDR_EXP 12
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// end ; end_of_file
 197: LD_VAR 0 1
 201: RET
// export omicronSquad , Sikorski , Harrison ; export function PrepareAmerican ; var i , un , veh ; begin
 202: LD_INT 0
 204: PPUSH
 205: PPUSH
 206: PPUSH
 207: PPUSH
// SetBName ( omikron , omikron ) ;
 208: LD_INT 64
 210: PPUSH
 211: LD_STRING omikron
 213: PPUSH
 214: CALL_OW 500
// uc_side := 4 ;
 218: LD_ADDR_OWVAR 20
 222: PUSH
 223: LD_INT 4
 225: ST_TO_ADDR
// uc_nation := 1 ;
 226: LD_ADDR_OWVAR 21
 230: PUSH
 231: LD_INT 1
 233: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_STRING Harisson
 241: PPUSH
 242: LD_INT 0
 244: PPUSH
 245: LD_STRING 
 247: PPUSH
 248: CALL 28235 0 3
 252: ST_TO_ADDR
// omicronSquad := [ ] ;
 253: LD_ADDR_EXP 13
 257: PUSH
 258: EMPTY
 259: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
 260: LD_ADDR_VAR 0 2
 264: PUSH
 265: LD_INT 22
 267: PUSH
 268: LD_INT 4
 270: PUSH
 271: EMPTY
 272: LIST
 273: LIST
 274: PUSH
 275: LD_INT 2
 277: PUSH
 278: LD_INT 30
 280: PUSH
 281: LD_INT 32
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: PUSH
 288: LD_INT 30
 290: PUSH
 291: LD_INT 31
 293: PUSH
 294: EMPTY
 295: LIST
 296: LIST
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: LIST
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PPUSH
 307: CALL_OW 69
 311: PUSH
 312: FOR_IN
 313: IFFALSE 393
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
 315: LD_INT 1
 317: PPUSH
 318: LD_INT 1
 320: PPUSH
 321: LD_INT 1
 323: PPUSH
 324: CALL_OW 380
// un := CreateHuman ;
 328: LD_ADDR_VAR 0 3
 332: PUSH
 333: CALL_OW 44
 337: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 338: LD_ADDR_EXP 13
 342: PUSH
 343: LD_EXP 13
 347: PUSH
 348: LD_VAR 0 3
 352: UNION
 353: ST_TO_ADDR
// SetDir ( un , GetDir ( i ) - 3 ) ;
 354: LD_VAR 0 3
 358: PPUSH
 359: LD_VAR 0 2
 363: PPUSH
 364: CALL_OW 254
 368: PUSH
 369: LD_INT 3
 371: MINUS
 372: PPUSH
 373: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
 377: LD_VAR 0 3
 381: PPUSH
 382: LD_VAR 0 2
 386: PPUSH
 387: CALL_OW 52
// end ;
 391: GO 312
 393: POP
 394: POP
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
 395: LD_ADDR_VAR 0 2
 399: PUSH
 400: DOUBLE
 401: LD_INT 1
 403: DEC
 404: ST_TO_ADDR
 405: LD_INT 3
 407: PUSH
 408: LD_INT 2
 410: PUSH
 411: LD_INT 2
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: LIST
 418: PUSH
 419: LD_OWVAR 67
 423: ARRAY
 424: PUSH
 425: FOR_TO
 426: IFFALSE 505
// begin PrepareHuman ( false , 2 , 2 ) ;
 428: LD_INT 0
 430: PPUSH
 431: LD_INT 2
 433: PPUSH
 434: LD_INT 2
 436: PPUSH
 437: CALL_OW 380
// un := CreateHuman ;
 441: LD_ADDR_VAR 0 3
 445: PUSH
 446: CALL_OW 44
 450: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 451: LD_ADDR_EXP 13
 455: PUSH
 456: LD_EXP 13
 460: PUSH
 461: LD_VAR 0 3
 465: UNION
 466: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
 467: LD_VAR 0 3
 471: PPUSH
 472: LD_INT 64
 474: PPUSH
 475: CALL_OW 52
// ComExitBuilding ( un ) ;
 479: LD_VAR 0 3
 483: PPUSH
 484: CALL_OW 122
// AddComMoveXY ( un , 19 , 23 ) ;
 488: LD_VAR 0 3
 492: PPUSH
 493: LD_INT 19
 495: PPUSH
 496: LD_INT 23
 498: PPUSH
 499: CALL_OW 171
// end ;
 503: GO 425
 505: POP
 506: POP
// for i := 1 to 2 do
 507: LD_ADDR_VAR 0 2
 511: PUSH
 512: DOUBLE
 513: LD_INT 1
 515: DEC
 516: ST_TO_ADDR
 517: LD_INT 2
 519: PUSH
 520: FOR_TO
 521: IFFALSE 687
// begin PrepareVehicle ( [ us_medium_wheeled , us_medium_tracked ] [ i ] , engine_solar , control_manual , [ us_light_gun , us_gatling_gun ] [ i ] , 100 ) ;
 523: LD_INT 2
 525: PUSH
 526: LD_INT 3
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_VAR 0 2
 537: ARRAY
 538: PPUSH
 539: LD_INT 2
 541: PPUSH
 542: LD_INT 1
 544: PPUSH
 545: LD_INT 3
 547: PUSH
 548: LD_INT 4
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: PUSH
 555: LD_VAR 0 2
 559: ARRAY
 560: PPUSH
 561: LD_INT 100
 563: PPUSH
 564: CALL 33099 0 5
// veh := CreateVehicle ;
 568: LD_ADDR_VAR 0 4
 572: PUSH
 573: CALL_OW 45
 577: ST_TO_ADDR
// PlaceUnitXYR ( veh , 28 , 37 , 6 , false ) ;
 578: LD_VAR 0 4
 582: PPUSH
 583: LD_INT 28
 585: PPUSH
 586: LD_INT 37
 588: PPUSH
 589: LD_INT 6
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
 599: LD_INT 0
 601: PPUSH
 602: LD_INT 3
 604: PPUSH
 605: LD_INT 2
 607: PPUSH
 608: CALL_OW 380
// un := CreateHuman ;
 612: LD_ADDR_VAR 0 3
 616: PUSH
 617: CALL_OW 44
 621: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 622: LD_ADDR_EXP 13
 626: PUSH
 627: LD_EXP 13
 631: PUSH
 632: LD_VAR 0 3
 636: UNION
 637: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
 638: LD_VAR 0 3
 642: PPUSH
 643: LD_VAR 0 4
 647: PPUSH
 648: CALL_OW 52
// ComMoveXY ( un , GetX ( un ) + 3 , GetY ( un ) ) ;
 652: LD_VAR 0 3
 656: PPUSH
 657: LD_VAR 0 3
 661: PPUSH
 662: CALL_OW 250
 666: PUSH
 667: LD_INT 3
 669: PLUS
 670: PPUSH
 671: LD_VAR 0 3
 675: PPUSH
 676: CALL_OW 251
 680: PPUSH
 681: CALL_OW 111
// end ;
 685: GO 520
 687: POP
 688: POP
// end ;
 689: LD_VAR 0 1
 693: RET
// export function PrepareSikorski ; var veh ; begin
 694: LD_INT 0
 696: PPUSH
 697: PPUSH
// uc_side := 1 ;
 698: LD_ADDR_OWVAR 20
 702: PUSH
 703: LD_INT 1
 705: ST_TO_ADDR
// uc_nation := 1 ;
 706: LD_ADDR_OWVAR 21
 710: PUSH
 711: LD_INT 1
 713: ST_TO_ADDR
// hc_importance := 100 ;
 714: LD_ADDR_OWVAR 32
 718: PUSH
 719: LD_INT 100
 721: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
 722: LD_ADDR_OWVAR 26
 726: PUSH
 727: LD_STRING Jeremy Sikorski
 729: ST_TO_ADDR
// hc_gallery := us ;
 730: LD_ADDR_OWVAR 33
 734: PUSH
 735: LD_STRING us
 737: ST_TO_ADDR
// hc_face_number := 19 ;
 738: LD_ADDR_OWVAR 34
 742: PUSH
 743: LD_INT 19
 745: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , [ 4 , 4 , 3 ] [ Difficulty ] ) ;
 746: LD_INT 1
 748: PPUSH
 749: LD_INT 1
 751: PPUSH
 752: LD_INT 4
 754: PUSH
 755: LD_INT 4
 757: PUSH
 758: LD_INT 3
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: LIST
 765: PUSH
 766: LD_OWVAR 67
 770: ARRAY
 771: PPUSH
 772: CALL_OW 380
// hc_attr := [ 10 , 12 ] ;
 776: LD_ADDR_OWVAR 29
 780: PUSH
 781: LD_INT 10
 783: PUSH
 784: LD_INT 12
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: ST_TO_ADDR
// Sikorski := CreateHuman ;
 791: LD_ADDR_EXP 14
 795: PUSH
 796: CALL_OW 44
 800: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_light_gun , 88 ) ;
 801: LD_INT 3
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: LD_INT 1
 809: PPUSH
 810: LD_INT 3
 812: PPUSH
 813: LD_INT 88
 815: PPUSH
 816: CALL 33099 0 5
// veh := CreateVehicle ;
 820: LD_ADDR_VAR 0 2
 824: PUSH
 825: CALL_OW 45
 829: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
 830: LD_VAR 0 2
 834: PPUSH
 835: LD_INT 3
 837: PPUSH
 838: CALL_OW 233
// PlaceUnitXY ( veh , 106 , 2 , false ) ;
 842: LD_VAR 0 2
 846: PPUSH
 847: LD_INT 106
 849: PPUSH
 850: LD_INT 2
 852: PPUSH
 853: LD_INT 0
 855: PPUSH
 856: CALL_OW 48
// PlaceHumanInUnit ( Sikorski , veh ) ;
 860: LD_EXP 14
 864: PPUSH
 865: LD_VAR 0 2
 869: PPUSH
 870: CALL_OW 52
// SetMark ( veh , - 1 ) ;
 874: LD_VAR 0 2
 878: PPUSH
 879: LD_INT 1
 881: NEG
 882: PPUSH
 883: CALL_OW 242
// InitHc ;
 887: CALL_OW 19
// end ; end_of_file
 891: LD_VAR 0 1
 895: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo ; export function PrepareRussian ; var i , un , arm , bar , bun , tmp ; begin
 896: LD_INT 0
 898: PPUSH
 899: PPUSH
 900: PPUSH
 901: PPUSH
 902: PPUSH
 903: PPUSH
 904: PPUSH
// ResetHc ;
 905: CALL 65487 0 0
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
 909: LD_ADDR_VAR 0 2
 913: PUSH
 914: LD_INT 21
 916: PUSH
 917: LD_INT 3
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 23
 926: PUSH
 927: LD_INT 3
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: PPUSH
 938: CALL_OW 69
 942: PUSH
 943: FOR_IN
 944: IFFALSE 960
// SetBLevel ( i , 5 ) ;
 946: LD_VAR 0 2
 950: PPUSH
 951: LD_INT 5
 953: PPUSH
 954: CALL_OW 241
 958: GO 943
 960: POP
 961: POP
// SetBName ( kirov , kirov ) ;
 962: LD_INT 71
 964: PPUSH
 965: LD_STRING kirov
 967: PPUSH
 968: CALL_OW 500
// SetBName ( beria , beria ) ;
 972: LD_INT 106
 974: PPUSH
 975: LD_STRING beria
 977: PPUSH
 978: CALL_OW 500
// SetBName ( kagan , kagan ) ;
 982: LD_INT 112
 984: PPUSH
 985: LD_STRING kagan
 987: PPUSH
 988: CALL_OW 500
// uc_side := 6 ;
 992: LD_ADDR_OWVAR 20
 996: PUSH
 997: LD_INT 6
 999: ST_TO_ADDR
// uc_nation := 3 ;
1000: LD_ADDR_OWVAR 21
1004: PUSH
1005: LD_INT 3
1007: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
1008: LD_ADDR_VAR 0 5
1012: PUSH
1013: LD_INT 22
1015: PUSH
1016: LD_INT 6
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: PUSH
1023: LD_INT 30
1025: PUSH
1026: LD_INT 5
1028: PUSH
1029: EMPTY
1030: LIST
1031: LIST
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: PPUSH
1037: CALL_OW 69
1041: PUSH
1042: LD_INT 1
1044: ARRAY
1045: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
1046: LD_ADDR_VAR 0 4
1050: PUSH
1051: LD_INT 22
1053: PUSH
1054: LD_INT 6
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PUSH
1061: LD_INT 30
1063: PUSH
1064: LD_INT 4
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PPUSH
1075: CALL_OW 69
1079: PUSH
1080: LD_INT 1
1082: ARRAY
1083: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
1084: LD_ADDR_EXP 20
1088: PUSH
1089: EMPTY
1090: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
1091: LD_ADDR_EXP 21
1095: PUSH
1096: EMPTY
1097: ST_TO_ADDR
// russianPatrol := [ ] ;
1098: LD_ADDR_EXP 23
1102: PUSH
1103: EMPTY
1104: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
1105: LD_ADDR_EXP 16
1109: PUSH
1110: LD_STRING Kurin
1112: PPUSH
1113: LD_INT 0
1115: PPUSH
1116: LD_STRING 
1118: PPUSH
1119: CALL 28235 0 3
1123: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
1124: LD_EXP 16
1128: PPUSH
1129: LD_INT 71
1131: PPUSH
1132: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
1136: LD_ADDR_EXP 18
1140: PUSH
1141: LD_STRING Popov
1143: PPUSH
1144: LD_INT 0
1146: PPUSH
1147: LD_STRING 
1149: PPUSH
1150: CALL 28235 0 3
1154: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
1155: LD_EXP 18
1159: PPUSH
1160: LD_INT 71
1162: PPUSH
1163: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
1167: LD_ADDR_EXP 17
1171: PUSH
1172: LD_STRING Grishko
1174: PPUSH
1175: LD_INT 0
1177: PPUSH
1178: LD_STRING 
1180: PPUSH
1181: CALL 28235 0 3
1185: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
1186: LD_EXP 17
1190: PPUSH
1191: LD_INT 207
1193: PPUSH
1194: LD_INT 106
1196: PPUSH
1197: LD_INT 0
1199: PPUSH
1200: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
1204: LD_EXP 17
1208: PPUSH
1209: LD_INT 209
1211: PPUSH
1212: LD_INT 106
1214: PPUSH
1215: CALL_OW 118
// hc_importance := 0 ;
1219: LD_ADDR_OWVAR 32
1223: PUSH
1224: LD_INT 0
1226: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
1227: LD_ADDR_VAR 0 7
1231: PUSH
1232: LD_INT 22
1234: PUSH
1235: LD_INT 6
1237: PUSH
1238: EMPTY
1239: LIST
1240: LIST
1241: PUSH
1242: LD_INT 30
1244: PUSH
1245: LD_INT 32
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PPUSH
1256: CALL_OW 69
1260: ST_TO_ADDR
// for i in tmp do
1261: LD_ADDR_VAR 0 2
1265: PUSH
1266: LD_VAR 0 7
1270: PUSH
1271: FOR_IN
1272: IFFALSE 1309
// PlaceWeaponTurret ( i , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] ) ;
1274: LD_VAR 0 2
1278: PPUSH
1279: LD_INT 44
1281: PUSH
1282: LD_INT 43
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PUSH
1289: LD_VAR 0 2
1293: PUSH
1294: LD_INT 2
1296: MOD
1297: PUSH
1298: LD_INT 1
1300: PLUS
1301: ARRAY
1302: PPUSH
1303: CALL_OW 431
1307: GO 1271
1309: POP
1310: POP
// for i := 1 to Difficulty do
1311: LD_ADDR_VAR 0 2
1315: PUSH
1316: DOUBLE
1317: LD_INT 1
1319: DEC
1320: ST_TO_ADDR
1321: LD_OWVAR 67
1325: PUSH
1326: FOR_TO
1327: IFFALSE 1382
// begin PrepareHuman ( false , 2 , 2 ) ;
1329: LD_INT 0
1331: PPUSH
1332: LD_INT 2
1334: PPUSH
1335: LD_INT 2
1337: PPUSH
1338: CALL_OW 380
// un := CreateHuman ;
1342: LD_ADDR_VAR 0 3
1346: PUSH
1347: CALL_OW 44
1351: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
1352: LD_VAR 0 3
1356: PPUSH
1357: LD_INT 71
1359: PPUSH
1360: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1364: LD_ADDR_EXP 20
1368: PUSH
1369: LD_EXP 20
1373: PUSH
1374: LD_VAR 0 3
1378: UNION
1379: ST_TO_ADDR
// end ;
1380: GO 1326
1382: POP
1383: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1384: LD_ADDR_VAR 0 2
1388: PUSH
1389: DOUBLE
1390: LD_INT 1
1392: DEC
1393: ST_TO_ADDR
1394: LD_INT 5
1396: PUSH
1397: LD_INT 6
1399: PUSH
1400: LD_INT 6
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_OWVAR 67
1412: ARRAY
1413: PUSH
1414: FOR_TO
1415: IFFALSE 1489
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
1417: LD_INT 0
1419: PPUSH
1420: LD_INT 1
1422: PPUSH
1423: LD_INT 2
1425: PUSH
1426: LD_INT 3
1428: PUSH
1429: LD_INT 4
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: LIST
1436: PUSH
1437: LD_OWVAR 67
1441: ARRAY
1442: PPUSH
1443: CALL_OW 380
// un := CreateHuman ;
1447: LD_ADDR_VAR 0 3
1451: PUSH
1452: CALL_OW 44
1456: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
1457: LD_VAR 0 3
1461: PPUSH
1462: LD_VAR 0 5
1466: PPUSH
1467: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1471: LD_ADDR_EXP 20
1475: PUSH
1476: LD_EXP 20
1480: PUSH
1481: LD_VAR 0 3
1485: UNION
1486: ST_TO_ADDR
// end ;
1487: GO 1414
1489: POP
1490: POP
// for i := 1 to 3 do
1491: LD_ADDR_VAR 0 2
1495: PUSH
1496: DOUBLE
1497: LD_INT 1
1499: DEC
1500: ST_TO_ADDR
1501: LD_INT 3
1503: PUSH
1504: FOR_TO
1505: IFFALSE 1560
// begin PrepareHuman ( false , 3 , 3 ) ;
1507: LD_INT 0
1509: PPUSH
1510: LD_INT 3
1512: PPUSH
1513: LD_INT 3
1515: PPUSH
1516: CALL_OW 380
// un := CreateHuman ;
1520: LD_ADDR_VAR 0 3
1524: PUSH
1525: CALL_OW 44
1529: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
1530: LD_VAR 0 3
1534: PPUSH
1535: LD_INT 92
1537: PPUSH
1538: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1542: LD_ADDR_EXP 20
1546: PUSH
1547: LD_EXP 20
1551: PUSH
1552: LD_VAR 0 3
1556: UNION
1557: ST_TO_ADDR
// end ;
1558: GO 1504
1560: POP
1561: POP
// for i := 1 to 2 do
1562: LD_ADDR_VAR 0 2
1566: PUSH
1567: DOUBLE
1568: LD_INT 1
1570: DEC
1571: ST_TO_ADDR
1572: LD_INT 2
1574: PUSH
1575: FOR_TO
1576: IFFALSE 1631
// begin PrepareHuman ( false , 4 , 3 ) ;
1578: LD_INT 0
1580: PPUSH
1581: LD_INT 4
1583: PPUSH
1584: LD_INT 3
1586: PPUSH
1587: CALL_OW 380
// un := CreateHuman ;
1591: LD_ADDR_VAR 0 3
1595: PUSH
1596: CALL_OW 44
1600: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
1601: LD_VAR 0 3
1605: PPUSH
1606: LD_INT 83
1608: PPUSH
1609: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1613: LD_ADDR_EXP 20
1617: PUSH
1618: LD_EXP 20
1622: PUSH
1623: LD_VAR 0 3
1627: UNION
1628: ST_TO_ADDR
// end ;
1629: GO 1575
1631: POP
1632: POP
// for i := 1 to 5 do
1633: LD_ADDR_VAR 0 2
1637: PUSH
1638: DOUBLE
1639: LD_INT 1
1641: DEC
1642: ST_TO_ADDR
1643: LD_INT 5
1645: PUSH
1646: FOR_TO
1647: IFFALSE 1704
// begin PrepareHuman ( false , 1 , 3 ) ;
1649: LD_INT 0
1651: PPUSH
1652: LD_INT 1
1654: PPUSH
1655: LD_INT 3
1657: PPUSH
1658: CALL_OW 380
// un := CreateHuman ;
1662: LD_ADDR_VAR 0 3
1666: PUSH
1667: CALL_OW 44
1671: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
1672: LD_VAR 0 3
1676: PPUSH
1677: LD_VAR 0 4
1681: PPUSH
1682: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
1686: LD_ADDR_EXP 22
1690: PUSH
1691: LD_EXP 22
1695: PUSH
1696: LD_VAR 0 3
1700: UNION
1701: ST_TO_ADDR
// end ;
1702: GO 1646
1704: POP
1705: POP
// russianCargo := [ ] ;
1706: LD_ADDR_EXP 25
1710: PUSH
1711: EMPTY
1712: ST_TO_ADDR
// for i := 1 to 2 do
1713: LD_ADDR_VAR 0 2
1717: PUSH
1718: DOUBLE
1719: LD_INT 1
1721: DEC
1722: ST_TO_ADDR
1723: LD_INT 2
1725: PUSH
1726: FOR_TO
1727: IFFALSE 1853
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
1729: LD_INT 21
1731: PPUSH
1732: LD_INT 1
1734: PPUSH
1735: LD_INT 1
1737: PPUSH
1738: LD_INT 51
1740: PPUSH
1741: LD_INT 100
1743: PPUSH
1744: CALL 33099 0 5
// un := CreateVehicle ;
1748: LD_ADDR_VAR 0 3
1752: PUSH
1753: CALL_OW 45
1757: ST_TO_ADDR
// russianCargo := russianCargo union un ;
1758: LD_ADDR_EXP 25
1762: PUSH
1763: LD_EXP 25
1767: PUSH
1768: LD_VAR 0 3
1772: UNION
1773: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
1774: LD_VAR 0 3
1778: PPUSH
1779: LD_INT 2
1781: PPUSH
1782: LD_INT 100
1784: PPUSH
1785: CALL_OW 290
// SetDir ( un , 4 ) ;
1789: LD_VAR 0 3
1793: PPUSH
1794: LD_INT 4
1796: PPUSH
1797: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
1801: LD_VAR 0 3
1805: PPUSH
1806: LD_INT 147
1808: PPUSH
1809: LD_INT 103
1811: PPUSH
1812: LD_INT 4
1814: PPUSH
1815: LD_INT 0
1817: PPUSH
1818: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
1822: LD_INT 0
1824: PPUSH
1825: LD_INT 1
1827: PPUSH
1828: LD_OWVAR 67
1832: PPUSH
1833: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1837: CALL_OW 44
1841: PPUSH
1842: LD_VAR 0 3
1846: PPUSH
1847: CALL_OW 52
// end ;
1851: GO 1726
1853: POP
1854: POP
// uc_side := 3 ;
1855: LD_ADDR_OWVAR 20
1859: PUSH
1860: LD_INT 3
1862: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
1863: LD_ADDR_EXP 19
1867: PUSH
1868: LD_STRING Burlak
1870: PPUSH
1871: LD_INT 0
1873: PPUSH
1874: LD_STRING 
1876: PPUSH
1877: CALL 28235 0 3
1881: ST_TO_ADDR
// ResetHc ;
1882: CALL 65487 0 0
// PrepareHuman ( false , 3 , 2 ) ;
1886: LD_INT 0
1888: PPUSH
1889: LD_INT 3
1891: PPUSH
1892: LD_INT 2
1894: PPUSH
1895: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ruBeriaCargo ) ;
1899: CALL_OW 44
1903: PPUSH
1904: LD_INT 180
1906: PPUSH
1907: CALL_OW 52
// if Difficulty > 1 then
1911: LD_OWVAR 67
1915: PUSH
1916: LD_INT 1
1918: GREATER
1919: IFFALSE 1977
// begin for i := 1 to 3 do
1921: LD_ADDR_VAR 0 2
1925: PUSH
1926: DOUBLE
1927: LD_INT 1
1929: DEC
1930: ST_TO_ADDR
1931: LD_INT 3
1933: PUSH
1934: FOR_TO
1935: IFFALSE 1975
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1937: LD_INT 0
1939: PPUSH
1940: LD_INT 1
1942: PPUSH
1943: LD_OWVAR 67
1947: PPUSH
1948: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 86 , 17 , 3 , false ) ;
1952: CALL_OW 44
1956: PPUSH
1957: LD_INT 86
1959: PPUSH
1960: LD_INT 17
1962: PPUSH
1963: LD_INT 3
1965: PPUSH
1966: LD_INT 0
1968: PPUSH
1969: CALL_OW 50
// end ;
1973: GO 1934
1975: POP
1976: POP
// end ; for i := 1 to 2 do
1977: LD_ADDR_VAR 0 2
1981: PUSH
1982: DOUBLE
1983: LD_INT 1
1985: DEC
1986: ST_TO_ADDR
1987: LD_INT 2
1989: PUSH
1990: FOR_TO
1991: IFFALSE 2031
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1993: LD_INT 0
1995: PPUSH
1996: LD_INT 1
1998: PPUSH
1999: LD_OWVAR 67
2003: PPUSH
2004: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 108 , 153 , 3 , false ) ;
2008: CALL_OW 44
2012: PPUSH
2013: LD_INT 108
2015: PPUSH
2016: LD_INT 153
2018: PPUSH
2019: LD_INT 3
2021: PPUSH
2022: LD_INT 0
2024: PPUSH
2025: CALL_OW 50
// end ;
2029: GO 1990
2031: POP
2032: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
2033: LD_ADDR_VAR 0 7
2037: PUSH
2038: LD_INT 22
2040: PUSH
2041: LD_INT 3
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PUSH
2048: LD_INT 30
2050: PUSH
2051: LD_INT 32
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PPUSH
2062: CALL_OW 69
2066: ST_TO_ADDR
// for i := 1 to tmp do
2067: LD_ADDR_VAR 0 2
2071: PUSH
2072: DOUBLE
2073: LD_INT 1
2075: DEC
2076: ST_TO_ADDR
2077: LD_VAR 0 7
2081: PUSH
2082: FOR_TO
2083: IFFALSE 2191
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
2085: LD_INT 0
2087: PPUSH
2088: LD_INT 1
2090: PPUSH
2091: LD_OWVAR 67
2095: PUSH
2096: LD_INT 1
2098: PLUS
2099: PPUSH
2100: CALL_OW 380
// un := CreateHuman ;
2104: LD_ADDR_VAR 0 3
2108: PUSH
2109: CALL_OW 44
2113: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
2114: LD_VAR 0 3
2118: PPUSH
2119: LD_VAR 0 7
2123: PUSH
2124: LD_VAR 0 2
2128: ARRAY
2129: PPUSH
2130: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2134: LD_ADDR_EXP 21
2138: PUSH
2139: LD_EXP 21
2143: PUSH
2144: LD_VAR 0 3
2148: UNION
2149: ST_TO_ADDR
// PlaceWeaponTurret ( tmp [ i ] , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] ) ;
2150: LD_VAR 0 7
2154: PUSH
2155: LD_VAR 0 2
2159: ARRAY
2160: PPUSH
2161: LD_INT 44
2163: PUSH
2164: LD_INT 43
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PUSH
2171: LD_VAR 0 2
2175: PUSH
2176: LD_INT 2
2178: MOD
2179: PUSH
2180: LD_INT 1
2182: PLUS
2183: ARRAY
2184: PPUSH
2185: CALL_OW 431
// end ;
2189: GO 2082
2191: POP
2192: POP
// for i := 1 to Difficulty + 1 do
2193: LD_ADDR_VAR 0 2
2197: PUSH
2198: DOUBLE
2199: LD_INT 1
2201: DEC
2202: ST_TO_ADDR
2203: LD_OWVAR 67
2207: PUSH
2208: LD_INT 1
2210: PLUS
2211: PUSH
2212: FOR_TO
2213: IFFALSE 2304
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
2215: LD_INT 0
2217: PPUSH
2218: LD_INT 1
2220: PPUSH
2221: LD_OWVAR 67
2225: PUSH
2226: LD_INT 1
2228: PLUS
2229: PPUSH
2230: CALL_OW 380
// un := CreateHuman ;
2234: LD_ADDR_VAR 0 3
2238: PUSH
2239: CALL_OW 44
2243: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2244: LD_VAR 0 3
2248: PPUSH
2249: LD_INT 22
2251: PUSH
2252: LD_INT 3
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 30
2261: PUSH
2262: LD_INT 5
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PPUSH
2273: CALL_OW 69
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: PPUSH
2282: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2286: LD_ADDR_EXP 21
2290: PUSH
2291: LD_EXP 21
2295: PUSH
2296: LD_VAR 0 3
2300: UNION
2301: ST_TO_ADDR
// end ;
2302: GO 2212
2304: POP
2305: POP
// for i := 1 to 2 do
2306: LD_ADDR_VAR 0 2
2310: PUSH
2311: DOUBLE
2312: LD_INT 1
2314: DEC
2315: ST_TO_ADDR
2316: LD_INT 2
2318: PUSH
2319: FOR_TO
2320: IFFALSE 2407
// begin PrepareHuman ( false , 4 , Difficulty ) ;
2322: LD_INT 0
2324: PPUSH
2325: LD_INT 4
2327: PPUSH
2328: LD_OWVAR 67
2332: PPUSH
2333: CALL_OW 380
// un := CreateHuman ;
2337: LD_ADDR_VAR 0 3
2341: PUSH
2342: CALL_OW 44
2346: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
2347: LD_VAR 0 3
2351: PPUSH
2352: LD_INT 22
2354: PUSH
2355: LD_INT 3
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PUSH
2362: LD_INT 30
2364: PUSH
2365: LD_INT 7
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PPUSH
2376: CALL_OW 69
2380: PUSH
2381: LD_INT 1
2383: ARRAY
2384: PPUSH
2385: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2389: LD_ADDR_EXP 21
2393: PUSH
2394: LD_EXP 21
2398: PUSH
2399: LD_VAR 0 3
2403: UNION
2404: ST_TO_ADDR
// end ;
2405: GO 2319
2407: POP
2408: POP
// for i := 1 to Difficulty do
2409: LD_ADDR_VAR 0 2
2413: PUSH
2414: DOUBLE
2415: LD_INT 1
2417: DEC
2418: ST_TO_ADDR
2419: LD_OWVAR 67
2423: PUSH
2424: FOR_TO
2425: IFFALSE 2482
// begin PrepareHuman ( false , 2 , Difficulty ) ;
2427: LD_INT 0
2429: PPUSH
2430: LD_INT 2
2432: PPUSH
2433: LD_OWVAR 67
2437: PPUSH
2438: CALL_OW 380
// un := CreateHuman ;
2442: LD_ADDR_VAR 0 3
2446: PUSH
2447: CALL_OW 44
2451: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
2452: LD_VAR 0 3
2456: PPUSH
2457: LD_INT 106
2459: PPUSH
2460: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2464: LD_ADDR_EXP 21
2468: PUSH
2469: LD_EXP 21
2473: PUSH
2474: LD_VAR 0 3
2478: UNION
2479: ST_TO_ADDR
// end ;
2480: GO 2424
2482: POP
2483: POP
// for i := 1 to 3 do
2484: LD_ADDR_VAR 0 2
2488: PUSH
2489: DOUBLE
2490: LD_INT 1
2492: DEC
2493: ST_TO_ADDR
2494: LD_INT 3
2496: PUSH
2497: FOR_TO
2498: IFFALSE 2620
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
2500: LD_ADDR_VAR 0 6
2504: PUSH
2505: LD_INT 22
2507: PUSH
2508: LD_INT 3
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: PUSH
2515: LD_INT 30
2517: PUSH
2518: LD_INT 31
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PPUSH
2529: CALL_OW 69
2533: PUSH
2534: LD_VAR 0 2
2538: ARRAY
2539: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
2540: LD_INT 0
2542: PPUSH
2543: LD_INT 1
2545: PPUSH
2546: LD_OWVAR 67
2550: PPUSH
2551: CALL_OW 380
// un := CreateHuman ;
2555: LD_ADDR_VAR 0 3
2559: PUSH
2560: CALL_OW 44
2564: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
2565: LD_VAR 0 3
2569: PPUSH
2570: LD_VAR 0 6
2574: PPUSH
2575: CALL_OW 254
2579: PUSH
2580: LD_INT 3
2582: PLUS
2583: PPUSH
2584: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
2588: LD_VAR 0 3
2592: PPUSH
2593: LD_VAR 0 6
2597: PPUSH
2598: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2602: LD_ADDR_EXP 21
2606: PUSH
2607: LD_EXP 21
2611: PUSH
2612: LD_VAR 0 3
2616: UNION
2617: ST_TO_ADDR
// end ;
2618: GO 2497
2620: POP
2621: POP
// russianOmicronAttackers := [ ] ;
2622: LD_ADDR_EXP 24
2626: PUSH
2627: EMPTY
2628: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2629: LD_ADDR_VAR 0 2
2633: PUSH
2634: DOUBLE
2635: LD_INT 1
2637: DEC
2638: ST_TO_ADDR
2639: LD_INT 4
2641: PUSH
2642: LD_INT 5
2644: PUSH
2645: LD_INT 6
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: LIST
2652: PUSH
2653: LD_OWVAR 67
2657: ARRAY
2658: PUSH
2659: FOR_TO
2660: IFFALSE 2878
// begin PrepareVehicle ( [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
2662: LD_INT 21
2664: PUSH
2665: LD_INT 23
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: PUSH
2672: LD_VAR 0 2
2676: PUSH
2677: LD_INT 2
2679: MOD
2680: PUSH
2681: LD_INT 1
2683: PLUS
2684: ARRAY
2685: PPUSH
2686: LD_INT 1
2688: PPUSH
2689: LD_INT 1
2691: PPUSH
2692: LD_INT 43
2694: PUSH
2695: LD_INT 44
2697: PUSH
2698: LD_INT 42
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: LIST
2705: PUSH
2706: LD_VAR 0 2
2710: PUSH
2711: LD_INT 3
2713: MOD
2714: PUSH
2715: LD_INT 1
2717: PLUS
2718: ARRAY
2719: PPUSH
2720: LD_INT 100
2722: PPUSH
2723: CALL 33099 0 5
// un := CreateVehicle ;
2727: LD_ADDR_VAR 0 3
2731: PUSH
2732: CALL_OW 45
2736: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
2737: LD_VAR 0 3
2741: PPUSH
2742: LD_INT 0
2744: PUSH
2745: LD_INT 5
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: PUSH
2752: LD_INT 1
2754: PPUSH
2755: LD_INT 2
2757: PPUSH
2758: CALL_OW 12
2762: ARRAY
2763: PPUSH
2764: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
2768: LD_ADDR_EXP 24
2772: PUSH
2773: LD_EXP 24
2777: PUSH
2778: LD_VAR 0 3
2782: UNION
2783: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
2784: LD_VAR 0 3
2788: PPUSH
2789: LD_INT 127
2791: PPUSH
2792: LD_INT 89
2794: PPUSH
2795: LD_INT 7
2797: PPUSH
2798: LD_INT 0
2800: PPUSH
2801: CALL_OW 50
// uc_side := 3 ;
2805: LD_ADDR_OWVAR 20
2809: PUSH
2810: LD_INT 3
2812: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
2813: LD_INT 0
2815: PPUSH
2816: LD_INT 3
2818: PPUSH
2819: LD_INT 3
2821: PPUSH
2822: CALL_OW 380
// un := CreateHuman ;
2826: LD_ADDR_VAR 0 3
2830: PUSH
2831: CALL_OW 44
2835: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
2836: LD_ADDR_EXP 24
2840: PUSH
2841: LD_EXP 24
2845: PUSH
2846: LD_VAR 0 3
2850: UNION
2851: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
2852: LD_VAR 0 3
2856: PPUSH
2857: LD_EXP 24
2861: PUSH
2862: LD_EXP 24
2866: PUSH
2867: LD_INT 1
2869: MINUS
2870: ARRAY
2871: PPUSH
2872: CALL_OW 52
// end ;
2876: GO 2659
2878: POP
2879: POP
// for i := 1 to 3 do
2880: LD_ADDR_VAR 0 2
2884: PUSH
2885: DOUBLE
2886: LD_INT 1
2888: DEC
2889: ST_TO_ADDR
2890: LD_INT 3
2892: PUSH
2893: FOR_TO
2894: IFFALSE 2960
// begin PrepareHuman ( false , 1 , Difficulty ) ;
2896: LD_INT 0
2898: PPUSH
2899: LD_INT 1
2901: PPUSH
2902: LD_OWVAR 67
2906: PPUSH
2907: CALL_OW 380
// un := CreateHuman ;
2911: LD_ADDR_VAR 0 3
2915: PUSH
2916: CALL_OW 44
2920: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
2921: LD_ADDR_EXP 24
2925: PUSH
2926: LD_EXP 24
2930: PUSH
2931: LD_VAR 0 3
2935: UNION
2936: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
2937: LD_VAR 0 3
2941: PPUSH
2942: LD_INT 91
2944: PPUSH
2945: LD_INT 60
2947: PPUSH
2948: LD_INT 3
2950: PPUSH
2951: LD_INT 0
2953: PPUSH
2954: CALL_OW 50
// end ;
2958: GO 2893
2960: POP
2961: POP
// end ;
2962: LD_VAR 0 1
2966: RET
// every 0 0$3 do var i ;
2967: GO 2969
2969: DISABLE
2970: LD_INT 0
2972: PPUSH
// begin for i := 1 to 4 do
2973: LD_ADDR_VAR 0 1
2977: PUSH
2978: DOUBLE
2979: LD_INT 1
2981: DEC
2982: ST_TO_ADDR
2983: LD_INT 4
2985: PUSH
2986: FOR_TO
2987: IFFALSE 3006
// ComExitBuilding ( grishkoSquad [ i ] ) ;
2989: LD_EXP 22
2993: PUSH
2994: LD_VAR 0 1
2998: ARRAY
2999: PPUSH
3000: CALL_OW 122
3004: GO 2986
3006: POP
3007: POP
// wait ( 3 ) ;
3008: LD_INT 3
3010: PPUSH
3011: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
3015: LD_EXP 22
3019: PUSH
3020: LD_INT 1
3022: ARRAY
3023: PPUSH
3024: LD_INT 22
3026: PUSH
3027: LD_INT 6
3029: PUSH
3030: EMPTY
3031: LIST
3032: LIST
3033: PUSH
3034: LD_INT 30
3036: PUSH
3037: LD_INT 31
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PPUSH
3048: CALL_OW 69
3052: PPUSH
3053: LD_EXP 22
3057: PUSH
3058: LD_INT 1
3060: ARRAY
3061: PPUSH
3062: CALL_OW 74
3066: PPUSH
3067: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
3071: LD_EXP 22
3075: PUSH
3076: LD_INT 2
3078: ARRAY
3079: PPUSH
3080: LD_INT 211
3082: PPUSH
3083: LD_INT 107
3085: PPUSH
3086: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
3090: LD_EXP 22
3094: PUSH
3095: LD_INT 2
3097: ARRAY
3098: PPUSH
3099: LD_INT 209
3101: PPUSH
3102: LD_INT 106
3104: PPUSH
3105: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
3109: LD_EXP 22
3113: PUSH
3114: LD_INT 3
3116: ARRAY
3117: PPUSH
3118: LD_INT 209
3120: PPUSH
3121: LD_INT 103
3123: PPUSH
3124: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
3128: LD_EXP 22
3132: PUSH
3133: LD_INT 3
3135: ARRAY
3136: PPUSH
3137: LD_INT 209
3139: PPUSH
3140: LD_INT 106
3142: PPUSH
3143: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
3147: LD_EXP 22
3151: PUSH
3152: LD_INT 4
3154: ARRAY
3155: PPUSH
3156: LD_INT 227
3158: PPUSH
3159: LD_INT 117
3161: PPUSH
3162: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
3166: LD_EXP 22
3170: PUSH
3171: LD_INT 4
3173: ARRAY
3174: PPUSH
3175: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
3179: LD_INT 700
3181: PPUSH
3182: CALL_OW 67
// for i := 3 downto 2 do
3186: LD_ADDR_VAR 0 1
3190: PUSH
3191: DOUBLE
3192: LD_INT 3
3194: INC
3195: ST_TO_ADDR
3196: LD_INT 2
3198: PUSH
3199: FOR_DOWNTO
3200: IFFALSE 3367
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
3202: LD_EXP 22
3206: PUSH
3207: LD_VAR 0 1
3211: ARRAY
3212: PPUSH
3213: LD_INT 200
3215: PPUSH
3216: LD_INT 91
3218: PPUSH
3219: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3223: LD_EXP 22
3227: PUSH
3228: LD_VAR 0 1
3232: ARRAY
3233: PPUSH
3234: LD_INT 210
3236: PPUSH
3237: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
3241: LD_EXP 22
3245: PUSH
3246: LD_VAR 0 1
3250: ARRAY
3251: PPUSH
3252: LD_INT 224
3254: PPUSH
3255: LD_INT 93
3257: PPUSH
3258: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3262: LD_EXP 22
3266: PUSH
3267: LD_VAR 0 1
3271: ARRAY
3272: PPUSH
3273: LD_INT 210
3275: PPUSH
3276: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
3280: LD_EXP 22
3284: PUSH
3285: LD_VAR 0 1
3289: ARRAY
3290: PPUSH
3291: LD_INT 239
3293: PPUSH
3294: LD_INT 123
3296: PPUSH
3297: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3301: LD_EXP 22
3305: PUSH
3306: LD_VAR 0 1
3310: ARRAY
3311: PPUSH
3312: LD_INT 210
3314: PPUSH
3315: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
3319: LD_EXP 22
3323: PUSH
3324: LD_VAR 0 1
3328: ARRAY
3329: PPUSH
3330: LD_INT 212
3332: PPUSH
3333: LD_INT 105
3335: PPUSH
3336: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
3340: LD_EXP 22
3344: PUSH
3345: LD_VAR 0 1
3349: ARRAY
3350: PPUSH
3351: LD_INT 700
3353: PPUSH
3354: CALL_OW 202
// wait ( 0 0$30 ) ;
3358: LD_INT 1050
3360: PPUSH
3361: CALL_OW 67
// end ;
3365: GO 3199
3367: POP
3368: POP
// until not activeGrishkoAI ;
3369: LD_EXP 2
3373: NOT
3374: IFFALSE 3179
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
3376: LD_EXP 22
3380: PPUSH
3381: LD_INT 221
3383: PPUSH
3384: LD_INT 110
3386: PPUSH
3387: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
3391: LD_EXP 22
3395: PPUSH
3396: LD_INT 228
3398: PPUSH
3399: LD_INT 115
3401: PPUSH
3402: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
3406: LD_EXP 22
3410: PPUSH
3411: CALL_OW 200
// end ;
3415: PPOPN 1
3417: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
3418: LD_EXP 3
3422: IFFALSE 4056
3424: GO 3426
3426: DISABLE
3427: LD_INT 0
3429: PPUSH
3430: PPUSH
3431: PPUSH
3432: PPUSH
// begin uc_side := 6 ;
3433: LD_ADDR_OWVAR 20
3437: PUSH
3438: LD_INT 6
3440: ST_TO_ADDR
// uc_nation := 3 ;
3441: LD_ADDR_OWVAR 21
3445: PUSH
3446: LD_INT 3
3448: ST_TO_ADDR
// ResetHc ;
3449: CALL 65487 0 0
// for i := 1 to 3 do
3453: LD_ADDR_VAR 0 2
3457: PUSH
3458: DOUBLE
3459: LD_INT 1
3461: DEC
3462: ST_TO_ADDR
3463: LD_INT 3
3465: PUSH
3466: FOR_TO
3467: IFFALSE 3576
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
3469: LD_INT 0
3471: PPUSH
3472: LD_INT 1
3474: PPUSH
3475: LD_INT 2
3477: PUSH
3478: LD_INT 3
3480: PUSH
3481: LD_INT 4
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: LIST
3488: PUSH
3489: LD_OWVAR 67
3493: ARRAY
3494: PPUSH
3495: CALL_OW 380
// un := CreateHuman ;
3499: LD_ADDR_VAR 0 1
3503: PUSH
3504: CALL_OW 44
3508: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
3509: LD_ADDR_EXP 23
3513: PUSH
3514: LD_EXP 23
3518: PUSH
3519: LD_VAR 0 1
3523: UNION
3524: ST_TO_ADDR
// SetTag ( un , 1 ) ;
3525: LD_VAR 0 1
3529: PPUSH
3530: LD_INT 1
3532: PPUSH
3533: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
3537: LD_VAR 0 1
3541: PPUSH
3542: LD_INT 3
3544: PPUSH
3545: LD_INT 0
3547: PPUSH
3548: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
3552: LD_VAR 0 1
3556: PPUSH
3557: LD_INT 210
3559: PPUSH
3560: LD_INT 159
3562: PPUSH
3563: CALL_OW 111
// wait ( 0 0$2 ) ;
3567: LD_INT 70
3569: PPUSH
3570: CALL_OW 67
// end ;
3574: GO 3466
3576: POP
3577: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 208 , 42 ] ] ] ;
3578: LD_ADDR_VAR 0 4
3582: PUSH
3583: LD_INT 172
3585: PUSH
3586: LD_INT 76
3588: PUSH
3589: EMPTY
3590: LIST
3591: LIST
3592: PUSH
3593: LD_INT 150
3595: PUSH
3596: LD_INT 38
3598: PUSH
3599: EMPTY
3600: LIST
3601: LIST
3602: PUSH
3603: LD_INT 148
3605: PUSH
3606: LD_INT 9
3608: PUSH
3609: EMPTY
3610: LIST
3611: LIST
3612: PUSH
3613: LD_INT 165
3615: PUSH
3616: LD_INT 38
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: PUSH
3629: LD_INT 191
3631: PUSH
3632: LD_INT 77
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: LD_INT 168
3641: PUSH
3642: LD_INT 42
3644: PUSH
3645: EMPTY
3646: LIST
3647: LIST
3648: PUSH
3649: LD_INT 166
3651: PUSH
3652: LD_INT 11
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: PUSH
3659: LD_INT 151
3661: PUSH
3662: LD_INT 12
3664: PUSH
3665: EMPTY
3666: LIST
3667: LIST
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: PUSH
3675: LD_INT 221
3677: PUSH
3678: LD_INT 88
3680: PUSH
3681: EMPTY
3682: LIST
3683: LIST
3684: PUSH
3685: LD_INT 217
3687: PUSH
3688: LD_INT 64
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: PUSH
3695: LD_INT 208
3697: PUSH
3698: LD_INT 42
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: LIST
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: LIST
3714: ST_TO_ADDR
// repeat wait ( 0 0$5 ) ;
3715: LD_INT 175
3717: PPUSH
3718: CALL_OW 67
// for i := 1 to patrol do
3722: LD_ADDR_VAR 0 2
3726: PUSH
3727: DOUBLE
3728: LD_INT 1
3730: DEC
3731: ST_TO_ADDR
3732: LD_VAR 0 4
3736: PUSH
3737: FOR_TO
3738: IFFALSE 4020
// begin if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
3740: LD_EXP 23
3744: PUSH
3745: LD_VAR 0 2
3749: ARRAY
3750: PPUSH
3751: CALL_OW 256
3755: PUSH
3756: LD_INT 990
3758: LESS
3759: PUSH
3760: LD_EXP 23
3764: PUSH
3765: LD_VAR 0 2
3769: ARRAY
3770: PPUSH
3771: CALL_OW 110
3775: PUSH
3776: LD_INT 1
3778: EQUAL
3779: AND
3780: IFFALSE 3808
// begin spottedByPatrol := true ;
3782: LD_ADDR_EXP 4
3786: PUSH
3787: LD_INT 1
3789: ST_TO_ADDR
// SetTag ( russianPatrol [ i ] , 2 ) ;
3790: LD_EXP 23
3794: PUSH
3795: LD_VAR 0 2
3799: ARRAY
3800: PPUSH
3801: LD_INT 2
3803: PPUSH
3804: CALL_OW 109
// end ; if GetTag ( russianPatrol [ i ] ) = 2 then
3808: LD_EXP 23
3812: PUSH
3813: LD_VAR 0 2
3817: ARRAY
3818: PPUSH
3819: CALL_OW 110
3823: PUSH
3824: LD_INT 2
3826: EQUAL
3827: IFFALSE 3918
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
3829: LD_EXP 23
3833: PUSH
3834: LD_VAR 0 2
3838: ARRAY
3839: PPUSH
3840: LD_INT 166
3842: PPUSH
3843: LD_INT 101
3845: PPUSH
3846: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
3850: LD_EXP 23
3854: PUSH
3855: LD_VAR 0 2
3859: ARRAY
3860: PPUSH
3861: LD_INT 71
3863: PPUSH
3864: CALL_OW 296
3868: PUSH
3869: LD_INT 10
3871: LESS
3872: IFFALSE 3916
// begin kirovBaseSquad := kirovBaseSquad union russianPatrol [ i ] ;
3874: LD_ADDR_EXP 20
3878: PUSH
3879: LD_EXP 20
3883: PUSH
3884: LD_EXP 23
3888: PUSH
3889: LD_VAR 0 2
3893: ARRAY
3894: UNION
3895: ST_TO_ADDR
// russianPatrol := Delete ( russianPatrol , i ) ;
3896: LD_ADDR_EXP 23
3900: PUSH
3901: LD_EXP 23
3905: PPUSH
3906: LD_VAR 0 2
3910: PPUSH
3911: CALL_OW 3
3915: ST_TO_ADDR
// end ; continue ;
3916: GO 3737
// end ; if not HasTask ( russianPatrol [ i ] ) then
3918: LD_EXP 23
3922: PUSH
3923: LD_VAR 0 2
3927: ARRAY
3928: PPUSH
3929: CALL_OW 314
3933: NOT
3934: IFFALSE 4018
// for j in patrol [ i ] do
3936: LD_ADDR_VAR 0 3
3940: PUSH
3941: LD_VAR 0 4
3945: PUSH
3946: LD_VAR 0 2
3950: ARRAY
3951: PUSH
3952: FOR_IN
3953: IFFALSE 4016
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
3955: LD_EXP 23
3959: PUSH
3960: LD_VAR 0 2
3964: ARRAY
3965: PPUSH
3966: LD_INT 35
3968: PPUSH
3969: LD_INT 175
3971: PPUSH
3972: CALL_OW 12
3976: PPUSH
3977: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
3981: LD_EXP 23
3985: PUSH
3986: LD_VAR 0 2
3990: ARRAY
3991: PPUSH
3992: LD_VAR 0 3
3996: PUSH
3997: LD_INT 1
3999: ARRAY
4000: PPUSH
4001: LD_VAR 0 3
4005: PUSH
4006: LD_INT 2
4008: ARRAY
4009: PPUSH
4010: CALL_OW 174
// end ;
4014: GO 3952
4016: POP
4017: POP
// end ;
4018: GO 3737
4020: POP
4021: POP
// until not russianPatrol or russianAlert ;
4022: LD_EXP 23
4026: NOT
4027: PUSH
4028: LD_EXP 5
4032: OR
4033: IFFALSE 3715
// if russianPatrol then
4035: LD_EXP 23
4039: IFFALSE 4056
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
4041: LD_EXP 23
4045: PPUSH
4046: LD_INT 161
4048: PPUSH
4049: LD_INT 107
4051: PPUSH
4052: CALL_OW 114
// end ;
4056: PPOPN 4
4058: END
// every 0 0$1 trigger startAttackOnOmicron and not retreatFromOmicron do var i , filter , tmp , enemy , x ;
4059: LD_EXP 6
4063: PUSH
4064: LD_EXP 8
4068: NOT
4069: AND
4070: IFFALSE 4577
4072: GO 4074
4074: DISABLE
4075: LD_INT 0
4077: PPUSH
4078: PPUSH
4079: PPUSH
4080: PPUSH
4081: PPUSH
// begin enable ;
4082: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
4083: LD_ADDR_VAR 0 2
4087: PUSH
4088: LD_EXP 24
4092: PPUSH
4093: LD_INT 21
4095: PUSH
4096: LD_INT 2
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: PPUSH
4103: CALL_OW 72
4107: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 1 ] ) ;
4108: LD_ADDR_VAR 0 4
4112: PUSH
4113: LD_INT 22
4115: PUSH
4116: LD_INT 1
4118: PUSH
4119: EMPTY
4120: LIST
4121: LIST
4122: PPUSH
4123: CALL_OW 69
4127: ST_TO_ADDR
// for i in filter do
4128: LD_ADDR_VAR 0 1
4132: PUSH
4133: LD_VAR 0 2
4137: PUSH
4138: FOR_IN
4139: IFFALSE 4575
// begin tmp := IsDrivenBy ( i ) ;
4141: LD_ADDR_VAR 0 3
4145: PUSH
4146: LD_VAR 0 1
4150: PPUSH
4151: CALL_OW 311
4155: ST_TO_ADDR
// if not tmp then
4156: LD_VAR 0 3
4160: NOT
4161: IFFALSE 4165
// continue ;
4163: GO 4138
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
4165: LD_VAR 0 1
4169: PPUSH
4170: CALL_OW 261
4174: PUSH
4175: LD_INT 90
4177: GREATER
4178: PUSH
4179: LD_VAR 0 1
4183: PPUSH
4184: CALL_OW 110
4188: PUSH
4189: LD_INT 2
4191: EQUAL
4192: AND
4193: IFFALSE 4209
// SetTag ( i , 0 ) else
4195: LD_VAR 0 1
4199: PPUSH
4200: LD_INT 0
4202: PPUSH
4203: CALL_OW 109
4207: GO 4305
// if GetTag ( i ) = 2 then
4209: LD_VAR 0 1
4213: PPUSH
4214: CALL_OW 110
4218: PUSH
4219: LD_INT 2
4221: EQUAL
4222: IFFALSE 4305
// begin x := rand ( 1 , 2 ) ;
4224: LD_ADDR_VAR 0 5
4228: PUSH
4229: LD_INT 1
4231: PPUSH
4232: LD_INT 2
4234: PPUSH
4235: CALL_OW 12
4239: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
4240: LD_VAR 0 1
4244: PPUSH
4245: LD_EXP 25
4249: PUSH
4250: LD_VAR 0 5
4254: ARRAY
4255: PPUSH
4256: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
4260: LD_EXP 25
4264: PUSH
4265: LD_VAR 0 5
4269: ARRAY
4270: PPUSH
4271: LD_INT 2
4273: PPUSH
4274: CALL_OW 289
4278: PUSH
4279: LD_INT 20
4281: LESS
4282: IFFALSE 4305
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
4284: LD_EXP 25
4288: PUSH
4289: LD_VAR 0 5
4293: ARRAY
4294: PPUSH
4295: LD_INT 2
4297: PPUSH
4298: LD_INT 100
4300: PPUSH
4301: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
4305: LD_VAR 0 1
4309: PPUSH
4310: CALL_OW 256
4314: PUSH
4315: LD_INT 600
4317: GREATEREQUAL
4318: PUSH
4319: LD_VAR 0 1
4323: PPUSH
4324: CALL_OW 110
4328: NOT
4329: AND
4330: IFFALSE 4356
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4332: LD_VAR 0 1
4336: PPUSH
4337: LD_VAR 0 4
4341: PPUSH
4342: LD_VAR 0 1
4346: PPUSH
4347: CALL_OW 74
4351: PPUSH
4352: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
4356: LD_VAR 0 1
4360: PPUSH
4361: CALL_OW 256
4365: PUSH
4366: LD_INT 600
4368: LESS
4369: PUSH
4370: LD_VAR 0 1
4374: PPUSH
4375: CALL_OW 110
4379: NOT
4380: AND
4381: IFFALSE 4425
// begin SetTag ( i , 1 ) ;
4383: LD_VAR 0 1
4387: PPUSH
4388: LD_INT 1
4390: PPUSH
4391: CALL_OW 109
// ComMoveXY ( i , 61 , 28 ) ;
4395: LD_VAR 0 1
4399: PPUSH
4400: LD_INT 61
4402: PPUSH
4403: LD_INT 28
4405: PPUSH
4406: CALL_OW 111
// AddComMoveXY ( i , 71 , 29 ) ;
4410: LD_VAR 0 1
4414: PPUSH
4415: LD_INT 71
4417: PPUSH
4418: LD_INT 29
4420: PPUSH
4421: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 71 , 29 ) < 6 and tmp then
4425: LD_VAR 0 1
4429: PPUSH
4430: CALL_OW 110
4434: PUSH
4435: LD_INT 1
4437: EQUAL
4438: PUSH
4439: LD_VAR 0 1
4443: PPUSH
4444: LD_INT 71
4446: PPUSH
4447: LD_INT 29
4449: PPUSH
4450: CALL_OW 297
4454: PUSH
4455: LD_INT 6
4457: LESS
4458: AND
4459: PUSH
4460: LD_VAR 0 3
4464: AND
4465: IFFALSE 4573
// begin ComExitVehicle ( tmp ) ;
4467: LD_VAR 0 3
4471: PPUSH
4472: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4476: LD_VAR 0 3
4480: PPUSH
4481: LD_VAR 0 1
4485: PPUSH
4486: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4490: LD_INT 35
4492: PPUSH
4493: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4497: LD_VAR 0 1
4501: PPUSH
4502: CALL_OW 256
4506: PUSH
4507: LD_INT 1000
4509: EQUAL
4510: IFFALSE 4490
// ComEnterUnit ( tmp , i ) ;
4512: LD_VAR 0 3
4516: PPUSH
4517: LD_VAR 0 1
4521: PPUSH
4522: CALL_OW 120
// if GetFuel ( i ) <= 90 and russianCargo then
4526: LD_VAR 0 1
4530: PPUSH
4531: CALL_OW 261
4535: PUSH
4536: LD_INT 90
4538: LESSEQUAL
4539: PUSH
4540: LD_EXP 25
4544: AND
4545: IFFALSE 4561
// SetTag ( i , 2 ) else
4547: LD_VAR 0 1
4551: PPUSH
4552: LD_INT 2
4554: PPUSH
4555: CALL_OW 109
4559: GO 4573
// SetTag ( i , 0 ) ;
4561: LD_VAR 0 1
4565: PPUSH
4566: LD_INT 0
4568: PPUSH
4569: CALL_OW 109
// end ; end ;
4573: GO 4138
4575: POP
4576: POP
// end ;
4577: PPOPN 5
4579: END
// every 0 0$30 trigger startAttackOnOmicron and not retreatFromOmicron and russianOmicronAttackers < [ 12 , 14 , 16 ] [ Difficulty ] do
4580: LD_EXP 6
4584: PUSH
4585: LD_EXP 8
4589: NOT
4590: AND
4591: PUSH
4592: LD_EXP 24
4596: PUSH
4597: LD_INT 12
4599: PUSH
4600: LD_INT 14
4602: PUSH
4603: LD_INT 16
4605: PUSH
4606: EMPTY
4607: LIST
4608: LIST
4609: LIST
4610: PUSH
4611: LD_OWVAR 67
4615: ARRAY
4616: LESS
4617: AND
4618: IFFALSE 4631
4620: GO 4622
4622: DISABLE
// begin enable ;
4623: ENABLE
// ProduceNew ( 0 ) ;
4624: LD_INT 0
4626: PPUSH
4627: CALL 4632 0 1
// end ;
4631: END
// export function ProduceNew ( type ) ; var un ; begin
4632: LD_INT 0
4634: PPUSH
4635: PPUSH
// uc_side := 3 ;
4636: LD_ADDR_OWVAR 20
4640: PUSH
4641: LD_INT 3
4643: ST_TO_ADDR
// uc_nation := 3 ;
4644: LD_ADDR_OWVAR 21
4648: PUSH
4649: LD_INT 3
4651: ST_TO_ADDR
// ResetHc ;
4652: CALL 65487 0 0
// PrepareHuman ( false , 3 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4656: LD_INT 0
4658: PPUSH
4659: LD_INT 3
4661: PPUSH
4662: LD_INT 3
4664: PUSH
4665: LD_INT 4
4667: PUSH
4668: LD_INT 5
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: LIST
4675: PUSH
4676: LD_OWVAR 67
4680: ARRAY
4681: PPUSH
4682: CALL_OW 380
// un := CreateHuman ;
4686: LD_ADDR_VAR 0 3
4690: PUSH
4691: CALL_OW 44
4695: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruBeriaFac ) ;
4696: LD_VAR 0 3
4700: PPUSH
4701: LD_INT 143
4703: PPUSH
4704: CALL_OW 52
// if type = 1 then
4708: LD_VAR 0 1
4712: PUSH
4713: LD_INT 1
4715: EQUAL
4716: IFFALSE 4739
// AddComConstruct ( ruBeriaFac , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) else
4718: LD_INT 143
4720: PPUSH
4721: LD_INT 21
4723: PPUSH
4724: LD_INT 1
4726: PPUSH
4727: LD_INT 1
4729: PPUSH
4730: LD_INT 51
4732: PPUSH
4733: CALL_OW 185
4737: GO 4818
// AddComConstruct ( ruBeriaFac , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , Difficulty + 1 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 4 ) ] ) ;
4739: LD_INT 143
4741: PPUSH
4742: LD_INT 21
4744: PUSH
4745: LD_INT 22
4747: PUSH
4748: LD_INT 23
4750: PUSH
4751: LD_INT 24
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: PUSH
4760: LD_INT 1
4762: PPUSH
4763: LD_OWVAR 67
4767: PUSH
4768: LD_INT 1
4770: PLUS
4771: PPUSH
4772: CALL_OW 12
4776: ARRAY
4777: PPUSH
4778: LD_INT 1
4780: PPUSH
4781: LD_INT 1
4783: PPUSH
4784: LD_INT 44
4786: PUSH
4787: LD_INT 44
4789: PUSH
4790: LD_INT 43
4792: PUSH
4793: LD_INT 42
4795: PUSH
4796: EMPTY
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: PUSH
4802: LD_INT 1
4804: PPUSH
4805: LD_INT 4
4807: PPUSH
4808: CALL_OW 12
4812: ARRAY
4813: PPUSH
4814: CALL_OW 185
// end ;
4818: LD_VAR 0 2
4822: RET
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
4823: LD_EXP 8
4827: IFFALSE 5029
4829: GO 4831
4831: DISABLE
4832: LD_INT 0
4834: PPUSH
4835: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
4836: LD_EXP 25
4840: PPUSH
4841: LD_INT 79
4843: PPUSH
4844: LD_INT 155
4846: PPUSH
4847: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
4851: LD_EXP 25
4855: PPUSH
4856: LD_INT 4
4858: PPUSH
4859: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
4863: LD_ADDR_VAR 0 2
4867: PUSH
4868: LD_EXP 24
4872: PPUSH
4873: LD_INT 50
4875: PUSH
4876: EMPTY
4877: LIST
4878: PPUSH
4879: CALL_OW 72
4883: ST_TO_ADDR
// for i in tmp do
4884: LD_ADDR_VAR 0 1
4888: PUSH
4889: LD_VAR 0 2
4893: PUSH
4894: FOR_IN
4895: IFFALSE 4929
// begin ComAgressiveMove ( i , 123 , 60 ) ;
4897: LD_VAR 0 1
4901: PPUSH
4902: LD_INT 123
4904: PPUSH
4905: LD_INT 60
4907: PPUSH
4908: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
4912: LD_VAR 0 1
4916: PPUSH
4917: LD_INT 153
4919: PPUSH
4920: LD_INT 103
4922: PPUSH
4923: CALL_OW 174
// end ;
4927: GO 4894
4929: POP
4930: POP
// repeat wait ( 0 0$1 ) ;
4931: LD_INT 35
4933: PPUSH
4934: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
4938: LD_ADDR_VAR 0 2
4942: PUSH
4943: LD_EXP 24
4947: PPUSH
4948: LD_INT 50
4950: PUSH
4951: EMPTY
4952: LIST
4953: PPUSH
4954: CALL_OW 72
4958: ST_TO_ADDR
// for i in tmp do
4959: LD_ADDR_VAR 0 1
4963: PUSH
4964: LD_VAR 0 2
4968: PUSH
4969: FOR_IN
4970: IFFALSE 5020
// if not HasTask ( i ) then
4972: LD_VAR 0 1
4976: PPUSH
4977: CALL_OW 314
4981: NOT
4982: IFFALSE 5018
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) until not tmp ;
4984: LD_VAR 0 1
4988: PPUSH
4989: LD_INT 81
4991: PUSH
4992: LD_INT 3
4994: PUSH
4995: EMPTY
4996: LIST
4997: LIST
4998: PPUSH
4999: CALL_OW 69
5003: PPUSH
5004: LD_VAR 0 1
5008: PPUSH
5009: CALL_OW 74
5013: PPUSH
5014: CALL_OW 115
5018: GO 4969
5020: POP
5021: POP
5022: LD_VAR 0 2
5026: NOT
5027: IFFALSE 4931
// end ;
5029: PPOPN 2
5031: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
5032: LD_INT 22
5034: PUSH
5035: LD_INT 3
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: PUSH
5042: LD_INT 32
5044: PUSH
5045: LD_INT 1
5047: PUSH
5048: EMPTY
5049: LIST
5050: LIST
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: PPUSH
5056: CALL_OW 69
5060: IFFALSE 5139
5062: GO 5064
5064: DISABLE
5065: LD_INT 0
5067: PPUSH
// begin enable ;
5068: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
5069: LD_ADDR_VAR 0 1
5073: PUSH
5074: LD_INT 22
5076: PUSH
5077: LD_INT 3
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: PUSH
5084: LD_INT 32
5086: PUSH
5087: LD_INT 1
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: PUSH
5094: EMPTY
5095: LIST
5096: LIST
5097: PPUSH
5098: CALL_OW 69
5102: PUSH
5103: FOR_IN
5104: IFFALSE 5137
// if GetFuel ( i ) < 1 then
5106: LD_VAR 0 1
5110: PPUSH
5111: CALL_OW 261
5115: PUSH
5116: LD_INT 1
5118: LESS
5119: IFFALSE 5135
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
5121: LD_VAR 0 1
5125: PPUSH
5126: CALL_OW 311
5130: PPUSH
5131: CALL_OW 121
5135: GO 5103
5137: POP
5138: POP
// end ;
5139: PPOPN 1
5141: END
// every 0 0$2 trigger FilterUnitsInArea ( eastKirovArea , [ f_enemy , 6 ] ) do
5142: LD_INT 5
5144: PPUSH
5145: LD_INT 81
5147: PUSH
5148: LD_INT 6
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: PPUSH
5155: CALL_OW 70
5159: IFFALSE 5172
5161: GO 5163
5163: DISABLE
// russianAlert := true ;
5164: LD_ADDR_EXP 5
5168: PUSH
5169: LD_INT 1
5171: ST_TO_ADDR
5172: END
// every 0 0$1 trigger IsOk ( Beria ) and GetSide ( Beria ) = 3 and GetResourceType ( GetBase ( Beria ) , mat_cans ) < 100 do
5173: LD_INT 106
5175: PPUSH
5176: CALL_OW 302
5180: PUSH
5181: LD_INT 106
5183: PPUSH
5184: CALL_OW 255
5188: PUSH
5189: LD_INT 3
5191: EQUAL
5192: AND
5193: PUSH
5194: LD_INT 106
5196: PPUSH
5197: CALL_OW 274
5201: PPUSH
5202: LD_INT 1
5204: PPUSH
5205: CALL_OW 275
5209: PUSH
5210: LD_INT 100
5212: LESS
5213: AND
5214: IFFALSE 5238
5216: GO 5218
5218: DISABLE
// begin enable ;
5219: ENABLE
// AddResourceType ( GetBase ( beria ) , mat_cans , 200 ) ;
5220: LD_INT 106
5222: PPUSH
5223: CALL_OW 274
5227: PPUSH
5228: LD_INT 1
5230: PPUSH
5231: LD_INT 200
5233: PPUSH
5234: CALL_OW 276
// end ;
5238: END
// every 0 0$1 do var i , un , tmp ;
5239: GO 5241
5241: DISABLE
5242: LD_INT 0
5244: PPUSH
5245: PPUSH
5246: PPUSH
// begin uc_side := 3 ;
5247: LD_ADDR_OWVAR 20
5251: PUSH
5252: LD_INT 3
5254: ST_TO_ADDR
// uc_nation := 3 ;
5255: LD_ADDR_OWVAR 21
5259: PUSH
5260: LD_INT 3
5262: ST_TO_ADDR
// tmp := [ ] ;
5263: LD_ADDR_VAR 0 3
5267: PUSH
5268: EMPTY
5269: ST_TO_ADDR
// for i := 1 to 2 do
5270: LD_ADDR_VAR 0 1
5274: PUSH
5275: DOUBLE
5276: LD_INT 1
5278: DEC
5279: ST_TO_ADDR
5280: LD_INT 2
5282: PUSH
5283: FOR_TO
5284: IFFALSE 5361
// begin PrepareHuman ( false , 2 , 2 ) ;
5286: LD_INT 0
5288: PPUSH
5289: LD_INT 2
5291: PPUSH
5292: LD_INT 2
5294: PPUSH
5295: CALL_OW 380
// un := CreateHuman ;
5299: LD_ADDR_VAR 0 2
5303: PUSH
5304: CALL_OW 44
5308: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
5309: LD_ADDR_VAR 0 3
5313: PUSH
5314: LD_VAR 0 3
5318: PPUSH
5319: LD_VAR 0 3
5323: PUSH
5324: LD_INT 1
5326: PLUS
5327: PPUSH
5328: LD_VAR 0 2
5332: PPUSH
5333: CALL_OW 1
5337: ST_TO_ADDR
// PlaceUnitXYR ( un , 74 , 112 , 3 , false ) ;
5338: LD_VAR 0 2
5342: PPUSH
5343: LD_INT 74
5345: PPUSH
5346: LD_INT 112
5348: PPUSH
5349: LD_INT 3
5351: PPUSH
5352: LD_INT 0
5354: PPUSH
5355: CALL_OW 50
// end ;
5359: GO 5283
5361: POP
5362: POP
// AddResourceType ( GetBase ( kagan ) , mat_oil , 100 ) ;
5363: LD_INT 112
5365: PPUSH
5366: CALL_OW 274
5370: PPUSH
5371: LD_INT 2
5373: PPUSH
5374: LD_INT 100
5376: PPUSH
5377: CALL_OW 276
// repeat wait ( 0 0$1 ) ;
5381: LD_INT 35
5383: PPUSH
5384: CALL_OW 67
// for i in tmp do
5388: LD_ADDR_VAR 0 1
5392: PUSH
5393: LD_VAR 0 3
5397: PUSH
5398: FOR_IN
5399: IFFALSE 5481
// begin if IsDead ( i ) then
5401: LD_VAR 0 1
5405: PPUSH
5406: CALL_OW 301
5410: IFFALSE 5428
// tmp := tmp diff i ;
5412: LD_ADDR_VAR 0 3
5416: PUSH
5417: LD_VAR 0 3
5421: PUSH
5422: LD_VAR 0 1
5426: DIFF
5427: ST_TO_ADDR
// if not HasTask ( i ) and not Carry ( i ) then
5428: LD_VAR 0 1
5432: PPUSH
5433: CALL_OW 314
5437: NOT
5438: PUSH
5439: LD_VAR 0 1
5443: PPUSH
5444: CALL_OW 281
5448: NOT
5449: AND
5450: IFFALSE 5479
// begin ComTransport ( i , kagan , mat_oil ) ;
5452: LD_VAR 0 1
5456: PPUSH
5457: LD_INT 112
5459: PPUSH
5460: LD_INT 2
5462: PPUSH
5463: CALL_OW 151
// AddComGive ( i , beria ) ;
5467: LD_VAR 0 1
5471: PPUSH
5472: LD_INT 106
5474: PPUSH
5475: CALL_OW 221
// end ; end ;
5479: GO 5398
5481: POP
5482: POP
// until not tmp or IsDead ( kagan ) or IsDead ( beria ) ;
5483: LD_VAR 0 3
5487: NOT
5488: PUSH
5489: LD_INT 112
5491: PPUSH
5492: CALL_OW 301
5496: OR
5497: PUSH
5498: LD_INT 106
5500: PPUSH
5501: CALL_OW 301
5505: OR
5506: IFFALSE 5381
// end ;
5508: PPOPN 3
5510: END
// every 0 0$01 do var i , j , skr , cargo , dep ;
5511: GO 5513
5513: DISABLE
5514: LD_INT 0
5516: PPUSH
5517: PPUSH
5518: PPUSH
5519: PPUSH
5520: PPUSH
// begin enable ;
5521: ENABLE
// cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] , [ f_lives , 600 ] ] ) ;
5522: LD_ADDR_VAR 0 4
5526: PUSH
5527: LD_INT 22
5529: PUSH
5530: LD_INT 3
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PUSH
5537: LD_INT 34
5539: PUSH
5540: LD_INT 51
5542: PUSH
5543: EMPTY
5544: LIST
5545: LIST
5546: PUSH
5547: LD_INT 24
5549: PUSH
5550: LD_INT 600
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: LIST
5561: PPUSH
5562: CALL_OW 69
5566: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5567: LD_ADDR_VAR 0 5
5571: PUSH
5572: LD_INT 22
5574: PUSH
5575: LD_INT 3
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: PUSH
5582: LD_INT 2
5584: PUSH
5585: LD_INT 30
5587: PUSH
5588: LD_INT 0
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: LD_INT 30
5597: PUSH
5598: LD_INT 1
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: LIST
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: PPUSH
5614: CALL_OW 69
5618: ST_TO_ADDR
// skr = GetListOfCratesInArea ( ruCratesCollectArea ) ;
5619: LD_ADDR_VAR 0 3
5623: PUSH
5624: LD_INT 9
5626: PPUSH
5627: CALL_OW 435
5631: ST_TO_ADDR
// if not cargo or not skr or not dep then
5632: LD_VAR 0 4
5636: NOT
5637: PUSH
5638: LD_VAR 0 3
5642: NOT
5643: OR
5644: PUSH
5645: LD_VAR 0 5
5649: NOT
5650: OR
5651: IFFALSE 5655
// exit ;
5653: GO 5819
// for i in cargo do
5655: LD_ADDR_VAR 0 1
5659: PUSH
5660: LD_VAR 0 4
5664: PUSH
5665: FOR_IN
5666: IFFALSE 5817
// begin if not skr then
5668: LD_VAR 0 3
5672: NOT
5673: IFFALSE 5679
// exit ;
5675: POP
5676: POP
5677: GO 5819
// if not HasTask ( i ) then
5679: LD_VAR 0 1
5683: PPUSH
5684: CALL_OW 314
5688: NOT
5689: IFFALSE 5758
// begin ComCollect ( i , skr [ 1 ] , skr [ 2 ] ) ;
5691: LD_VAR 0 1
5695: PPUSH
5696: LD_VAR 0 3
5700: PUSH
5701: LD_INT 1
5703: ARRAY
5704: PPUSH
5705: LD_VAR 0 3
5709: PUSH
5710: LD_INT 2
5712: ARRAY
5713: PPUSH
5714: CALL_OW 117
// for j := 1 to 2 do
5718: LD_ADDR_VAR 0 2
5722: PUSH
5723: DOUBLE
5724: LD_INT 1
5726: DEC
5727: ST_TO_ADDR
5728: LD_INT 2
5730: PUSH
5731: FOR_TO
5732: IFFALSE 5754
// skr := Delete ( skr , 1 ) ;
5734: LD_ADDR_VAR 0 3
5738: PUSH
5739: LD_VAR 0 3
5743: PPUSH
5744: LD_INT 1
5746: PPUSH
5747: CALL_OW 3
5751: ST_TO_ADDR
5752: GO 5731
5754: POP
5755: POP
// end else
5756: GO 5815
// if GetFuel ( i ) < 3 and GetDistUnits ( i , NearestUnitToUnit ( dep , i ) ) < 6 then
5758: LD_VAR 0 1
5762: PPUSH
5763: CALL_OW 261
5767: PUSH
5768: LD_INT 3
5770: LESS
5771: PUSH
5772: LD_VAR 0 1
5776: PPUSH
5777: LD_VAR 0 5
5781: PPUSH
5782: LD_VAR 0 1
5786: PPUSH
5787: CALL_OW 74
5791: PPUSH
5792: CALL_OW 296
5796: PUSH
5797: LD_INT 6
5799: LESS
5800: AND
5801: IFFALSE 5815
// SetFuel ( i , 100 ) ;
5803: LD_VAR 0 1
5807: PPUSH
5808: LD_INT 100
5810: PPUSH
5811: CALL_OW 240
// end ;
5815: GO 5665
5817: POP
5818: POP
// end ;
5819: PPOPN 5
5821: END
// export function SendSupport ; var i , un ; begin
5822: LD_INT 0
5824: PPUSH
5825: PPUSH
5826: PPUSH
// uc_nation := 3 ;
5827: LD_ADDR_OWVAR 21
5831: PUSH
5832: LD_INT 3
5834: ST_TO_ADDR
// uc_side := 3 ;
5835: LD_ADDR_OWVAR 20
5839: PUSH
5840: LD_INT 3
5842: ST_TO_ADDR
// ResetHc ;
5843: CALL 65487 0 0
// for i := 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
5847: LD_ADDR_VAR 0 2
5851: PUSH
5852: DOUBLE
5853: LD_INT 1
5855: DEC
5856: ST_TO_ADDR
5857: LD_INT 3
5859: PUSH
5860: LD_INT 3
5862: PUSH
5863: LD_INT 4
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: LIST
5870: PUSH
5871: LD_OWVAR 67
5875: ARRAY
5876: PUSH
5877: FOR_TO
5878: IFFALSE 5952
// begin PrepareHuman ( false , 1 , Difficulty ) ;
5880: LD_INT 0
5882: PPUSH
5883: LD_INT 1
5885: PPUSH
5886: LD_OWVAR 67
5890: PPUSH
5891: CALL_OW 380
// un := CreateHuman ;
5895: LD_ADDR_VAR 0 3
5899: PUSH
5900: CALL_OW 44
5904: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
5905: LD_VAR 0 3
5909: PPUSH
5910: LD_INT 107
5912: PPUSH
5913: LD_INT 95
5915: PPUSH
5916: LD_INT 4
5918: PPUSH
5919: LD_INT 0
5921: PPUSH
5922: CALL_OW 50
// ComAgressiveMove ( un , 56 , 27 ) ;
5926: LD_VAR 0 3
5930: PPUSH
5931: LD_INT 56
5933: PPUSH
5934: LD_INT 27
5936: PPUSH
5937: CALL_OW 114
// AddComHold ( un ) ;
5941: LD_VAR 0 3
5945: PPUSH
5946: CALL_OW 200
// end ;
5950: GO 5877
5952: POP
5953: POP
// PrepareHuman ( false , 4 , Difficulty ) ;
5954: LD_INT 0
5956: PPUSH
5957: LD_INT 4
5959: PPUSH
5960: LD_OWVAR 67
5964: PPUSH
5965: CALL_OW 380
// un := CreateHuman ;
5969: LD_ADDR_VAR 0 3
5973: PUSH
5974: CALL_OW 44
5978: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
5979: LD_VAR 0 3
5983: PPUSH
5984: LD_INT 107
5986: PPUSH
5987: LD_INT 95
5989: PPUSH
5990: LD_INT 4
5992: PPUSH
5993: LD_INT 0
5995: PPUSH
5996: CALL_OW 50
// ComMoveXY ( un , 59 , 25 ) ;
6000: LD_VAR 0 3
6004: PPUSH
6005: LD_INT 59
6007: PPUSH
6008: LD_INT 25
6010: PPUSH
6011: CALL_OW 111
// if Difficulty > 1 then
6015: LD_OWVAR 67
6019: PUSH
6020: LD_INT 1
6022: GREATER
6023: IFFALSE 6132
// begin for i := 1 to [ 2 , 2 , 3 ] [ Difficulty ] do
6025: LD_ADDR_VAR 0 2
6029: PUSH
6030: DOUBLE
6031: LD_INT 1
6033: DEC
6034: ST_TO_ADDR
6035: LD_INT 2
6037: PUSH
6038: LD_INT 2
6040: PUSH
6041: LD_INT 3
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: LIST
6048: PUSH
6049: LD_OWVAR 67
6053: ARRAY
6054: PUSH
6055: FOR_TO
6056: IFFALSE 6130
// begin PrepareHuman ( false , 1 , Difficulty ) ;
6058: LD_INT 0
6060: PPUSH
6061: LD_INT 1
6063: PPUSH
6064: LD_OWVAR 67
6068: PPUSH
6069: CALL_OW 380
// un := CreateHuman ;
6073: LD_ADDR_VAR 0 3
6077: PUSH
6078: CALL_OW 44
6082: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
6083: LD_VAR 0 3
6087: PPUSH
6088: LD_INT 107
6090: PPUSH
6091: LD_INT 95
6093: PPUSH
6094: LD_INT 4
6096: PPUSH
6097: LD_INT 0
6099: PPUSH
6100: CALL_OW 50
// ComAgressiveMove ( un , 45 , 76 ) ;
6104: LD_VAR 0 3
6108: PPUSH
6109: LD_INT 45
6111: PPUSH
6112: LD_INT 76
6114: PPUSH
6115: CALL_OW 114
// AddComHold ( un ) ;
6119: LD_VAR 0 3
6123: PPUSH
6124: CALL_OW 200
// end ;
6128: GO 6055
6130: POP
6131: POP
// end ; end ;
6132: LD_VAR 0 1
6136: RET
// every 6 6$00 trigger tick >= 20 20$00 and Difficulty > 1 and russianOmicronAttackers > 4 and not retreatFromOmicron do var i , un , tmp , path ;
6137: LD_OWVAR 1
6141: PUSH
6142: LD_INT 42000
6144: GREATEREQUAL
6145: PUSH
6146: LD_OWVAR 67
6150: PUSH
6151: LD_INT 1
6153: GREATER
6154: AND
6155: PUSH
6156: LD_EXP 24
6160: PUSH
6161: LD_INT 4
6163: GREATER
6164: AND
6165: PUSH
6166: LD_EXP 8
6170: NOT
6171: AND
6172: IFFALSE 6465
6174: GO 6176
6176: DISABLE
6177: LD_INT 0
6179: PPUSH
6180: PPUSH
6181: PPUSH
6182: PPUSH
// begin enable ;
6183: ENABLE
// tmp := [ ] ;
6184: LD_ADDR_VAR 0 3
6188: PUSH
6189: EMPTY
6190: ST_TO_ADDR
// path := [ [ 55 , 91 ] , [ 47 , 80 ] , [ 39 , 67 ] , [ 36 , 60 ] , [ 33 , 52 ] ] ;
6191: LD_ADDR_VAR 0 4
6195: PUSH
6196: LD_INT 55
6198: PUSH
6199: LD_INT 91
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: PUSH
6206: LD_INT 47
6208: PUSH
6209: LD_INT 80
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: PUSH
6216: LD_INT 39
6218: PUSH
6219: LD_INT 67
6221: PUSH
6222: EMPTY
6223: LIST
6224: LIST
6225: PUSH
6226: LD_INT 36
6228: PUSH
6229: LD_INT 60
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: PUSH
6236: LD_INT 33
6238: PUSH
6239: LD_INT 52
6241: PUSH
6242: EMPTY
6243: LIST
6244: LIST
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: LIST
6250: LIST
6251: LIST
6252: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty - 1 ] do
6253: LD_ADDR_VAR 0 1
6257: PUSH
6258: DOUBLE
6259: LD_INT 1
6261: DEC
6262: ST_TO_ADDR
6263: LD_INT 2
6265: PUSH
6266: LD_INT 3
6268: PUSH
6269: LD_INT 3
6271: PUSH
6272: EMPTY
6273: LIST
6274: LIST
6275: LIST
6276: PUSH
6277: LD_OWVAR 67
6281: PUSH
6282: LD_INT 1
6284: MINUS
6285: ARRAY
6286: PUSH
6287: FOR_TO
6288: IFFALSE 6439
// begin uc_side := 3 ;
6290: LD_ADDR_OWVAR 20
6294: PUSH
6295: LD_INT 3
6297: ST_TO_ADDR
// uc_nation := 3 ;
6298: LD_ADDR_OWVAR 21
6302: PUSH
6303: LD_INT 3
6305: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gun ] [ i mod 3 + 1 ] , 100 ) ;
6306: LD_INT 22
6308: PPUSH
6309: LD_INT 1
6311: PPUSH
6312: LD_INT 1
6314: PPUSH
6315: LD_INT 42
6317: PUSH
6318: LD_INT 42
6320: PUSH
6321: LD_INT 44
6323: PUSH
6324: EMPTY
6325: LIST
6326: LIST
6327: LIST
6328: PUSH
6329: LD_VAR 0 1
6333: PUSH
6334: LD_INT 3
6336: MOD
6337: PUSH
6338: LD_INT 1
6340: PLUS
6341: ARRAY
6342: PPUSH
6343: LD_INT 100
6345: PPUSH
6346: CALL 33099 0 5
// un := CreateVehicle ;
6350: LD_ADDR_VAR 0 2
6354: PUSH
6355: CALL_OW 45
6359: ST_TO_ADDR
// PlaceUnitXYR ( un , 57 , 103 , 4 , false ) ;
6360: LD_VAR 0 2
6364: PPUSH
6365: LD_INT 57
6367: PPUSH
6368: LD_INT 103
6370: PPUSH
6371: LD_INT 4
6373: PPUSH
6374: LD_INT 0
6376: PPUSH
6377: CALL_OW 50
// tmp := Replace ( tmp , tmp + 1 , un ) ;
6381: LD_ADDR_VAR 0 3
6385: PUSH
6386: LD_VAR 0 3
6390: PPUSH
6391: LD_VAR 0 3
6395: PUSH
6396: LD_INT 1
6398: PLUS
6399: PPUSH
6400: LD_VAR 0 2
6404: PPUSH
6405: CALL_OW 1
6409: ST_TO_ADDR
// PrepareHuman ( false , 3 , 5 ) ;
6410: LD_INT 0
6412: PPUSH
6413: LD_INT 3
6415: PPUSH
6416: LD_INT 5
6418: PPUSH
6419: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
6423: CALL_OW 44
6427: PPUSH
6428: LD_VAR 0 2
6432: PPUSH
6433: CALL_OW 52
// end ;
6437: GO 6287
6439: POP
6440: POP
// repeat wait ( 0 0$1 ) ;
6441: LD_INT 35
6443: PPUSH
6444: CALL_OW 67
// until not AgressiveMove ( tmp , path ) ;
6448: LD_VAR 0 3
6452: PPUSH
6453: LD_VAR 0 4
6457: PPUSH
6458: CALL 67367 0 2
6462: NOT
6463: IFFALSE 6441
// end ; end_of_file
6465: PPOPN 4
6467: END
// export function PrepareArabian ; var i , j , un , veh , xy ; begin
6468: LD_INT 0
6470: PPUSH
6471: PPUSH
6472: PPUSH
6473: PPUSH
6474: PPUSH
6475: PPUSH
// uc_side := 2 ;
6476: LD_ADDR_OWVAR 20
6480: PUSH
6481: LD_INT 2
6483: ST_TO_ADDR
// uc_nation := 2 ;
6484: LD_ADDR_OWVAR 21
6488: PUSH
6489: LD_INT 2
6491: ST_TO_ADDR
// InitVc ;
6492: CALL_OW 20
// ResetHc ;
6496: CALL 65487 0 0
// for j := 1 to 2 do
6500: LD_ADDR_VAR 0 3
6504: PUSH
6505: DOUBLE
6506: LD_INT 1
6508: DEC
6509: ST_TO_ADDR
6510: LD_INT 2
6512: PUSH
6513: FOR_TO
6514: IFFALSE 6738
// begin xy := [ [ 178 , 3 ] , [ 268 , 121 ] ] [ j ] ;
6516: LD_ADDR_VAR 0 6
6520: PUSH
6521: LD_INT 178
6523: PUSH
6524: LD_INT 3
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PUSH
6531: LD_INT 268
6533: PUSH
6534: LD_INT 121
6536: PUSH
6537: EMPTY
6538: LIST
6539: LIST
6540: PUSH
6541: EMPTY
6542: LIST
6543: LIST
6544: PUSH
6545: LD_VAR 0 3
6549: ARRAY
6550: ST_TO_ADDR
// for i := 1 to 8 do
6551: LD_ADDR_VAR 0 2
6555: PUSH
6556: DOUBLE
6557: LD_INT 1
6559: DEC
6560: ST_TO_ADDR
6561: LD_INT 8
6563: PUSH
6564: FOR_TO
6565: IFFALSE 6734
// begin uc_side := 2 ;
6567: LD_ADDR_OWVAR 20
6571: PUSH
6572: LD_INT 2
6574: ST_TO_ADDR
// uc_nation := 2 ;
6575: LD_ADDR_OWVAR 21
6579: PUSH
6580: LD_INT 2
6582: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_flame_thrower , ar_gun ] [ rand ( 1 , 2 ) ] , 99 ) ;
6583: LD_INT 14
6585: PPUSH
6586: LD_INT 1
6588: PPUSH
6589: LD_INT 1
6591: PPUSH
6592: LD_INT 26
6594: PUSH
6595: LD_INT 27
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: PUSH
6602: LD_INT 1
6604: PPUSH
6605: LD_INT 2
6607: PPUSH
6608: CALL_OW 12
6612: ARRAY
6613: PPUSH
6614: LD_INT 99
6616: PPUSH
6617: CALL 33099 0 5
// veh := CreateVehicle ;
6621: LD_ADDR_VAR 0 5
6625: PUSH
6626: CALL_OW 45
6630: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6631: LD_VAR 0 5
6635: PPUSH
6636: LD_INT 3
6638: PPUSH
6639: CALL_OW 233
// PlaceUnitXY ( veh , xy [ 1 ] , xy [ 2 ] , false ) ;
6643: LD_VAR 0 5
6647: PPUSH
6648: LD_VAR 0 6
6652: PUSH
6653: LD_INT 1
6655: ARRAY
6656: PPUSH
6657: LD_VAR 0 6
6661: PUSH
6662: LD_INT 2
6664: ARRAY
6665: PPUSH
6666: LD_INT 0
6668: PPUSH
6669: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
6673: LD_INT 0
6675: PPUSH
6676: LD_INT 3
6678: PPUSH
6679: LD_INT 6
6681: PPUSH
6682: CALL_OW 380
// un := CreateHuman ;
6686: LD_ADDR_VAR 0 4
6690: PUSH
6691: CALL_OW 44
6695: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6696: LD_VAR 0 4
6700: PPUSH
6701: LD_VAR 0 5
6705: PPUSH
6706: CALL_OW 52
// ComMoveXY ( un , 186 , 17 ) ;
6710: LD_VAR 0 4
6714: PPUSH
6715: LD_INT 186
6717: PPUSH
6718: LD_INT 17
6720: PPUSH
6721: CALL_OW 111
// wait ( 0 0$2 ) ;
6725: LD_INT 70
6727: PPUSH
6728: CALL_OW 67
// end ;
6732: GO 6564
6734: POP
6735: POP
// end ;
6736: GO 6513
6738: POP
6739: POP
// for i := 1 to 10 do
6740: LD_ADDR_VAR 0 2
6744: PUSH
6745: DOUBLE
6746: LD_INT 1
6748: DEC
6749: ST_TO_ADDR
6750: LD_INT 10
6752: PUSH
6753: FOR_TO
6754: IFFALSE 6821
// begin PrepareHuman ( false , 1 , 5 ) ;
6756: LD_INT 0
6758: PPUSH
6759: LD_INT 1
6761: PPUSH
6762: LD_INT 5
6764: PPUSH
6765: CALL_OW 380
// un := CreateHuman ;
6769: LD_ADDR_VAR 0 4
6773: PUSH
6774: CALL_OW 44
6778: ST_TO_ADDR
// PlaceUnitXY ( un , 178 , 3 , false ) ;
6779: LD_VAR 0 4
6783: PPUSH
6784: LD_INT 178
6786: PPUSH
6787: LD_INT 3
6789: PPUSH
6790: LD_INT 0
6792: PPUSH
6793: CALL_OW 48
// ComMoveXY ( un , 186 , 17 ) ;
6797: LD_VAR 0 4
6801: PPUSH
6802: LD_INT 186
6804: PPUSH
6805: LD_INT 17
6807: PPUSH
6808: CALL_OW 111
// wait ( 0 0$2 ) ;
6812: LD_INT 70
6814: PPUSH
6815: CALL_OW 67
// end ;
6819: GO 6753
6821: POP
6822: POP
// end ;
6823: LD_VAR 0 1
6827: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] ] ) do var i , enemy ;
6828: LD_INT 22
6830: PUSH
6831: LD_INT 2
6833: PUSH
6834: EMPTY
6835: LIST
6836: LIST
6837: PUSH
6838: LD_INT 50
6840: PUSH
6841: EMPTY
6842: LIST
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: PPUSH
6848: CALL_OW 69
6852: IFFALSE 6988
6854: GO 6856
6856: DISABLE
6857: LD_INT 0
6859: PPUSH
6860: PPUSH
// begin enable ;
6861: ENABLE
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6862: LD_ADDR_VAR 0 2
6866: PUSH
6867: LD_INT 2
6869: PUSH
6870: LD_INT 22
6872: PUSH
6873: LD_INT 3
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: PUSH
6880: LD_INT 22
6882: PUSH
6883: LD_INT 6
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: LIST
6894: PPUSH
6895: CALL_OW 69
6899: ST_TO_ADDR
// if not enemy then
6900: LD_VAR 0 2
6904: NOT
6905: IFFALSE 6927
// enemy := FilterAllUnits ( [ f_side , 1 ] ) ;
6907: LD_ADDR_VAR 0 2
6911: PUSH
6912: LD_INT 22
6914: PUSH
6915: LD_INT 1
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: PPUSH
6922: CALL_OW 69
6926: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] ] ) do
6927: LD_ADDR_VAR 0 1
6931: PUSH
6932: LD_INT 22
6934: PUSH
6935: LD_INT 2
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: PUSH
6942: LD_INT 50
6944: PUSH
6945: EMPTY
6946: LIST
6947: PUSH
6948: EMPTY
6949: LIST
6950: LIST
6951: PPUSH
6952: CALL_OW 69
6956: PUSH
6957: FOR_IN
6958: IFFALSE 6986
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6960: LD_VAR 0 1
6964: PPUSH
6965: LD_VAR 0 2
6969: PPUSH
6970: LD_VAR 0 1
6974: PPUSH
6975: CALL_OW 74
6979: PPUSH
6980: CALL_OW 115
6984: GO 6957
6986: POP
6987: POP
// end ; end_of_file
6988: PPOPN 2
6990: END
// export function Action ; begin
6991: LD_INT 0
6993: PPUSH
// InGameOn ;
6994: CALL_OW 8
// CenterNowOnXY ( 106 , 3 ) ;
6998: LD_INT 106
7000: PPUSH
7001: LD_INT 3
7003: PPUSH
7004: CALL_OW 86
// wait ( 0 0$2 ) ;
7008: LD_INT 70
7010: PPUSH
7011: CALL_OW 67
// ChangeMissionObjectives ( target1 ) ;
7015: LD_STRING target1
7017: PPUSH
7018: CALL_OW 337
// InGameOff ;
7022: CALL_OW 9
// SaveForQuickRestart ;
7026: CALL_OW 22
// end ;
7030: LD_VAR 0 1
7034: RET
// every 0 0$1 trigger IsDead ( omikron ) and not retreatFromOmicron do
7035: LD_INT 64
7037: PPUSH
7038: CALL_OW 301
7042: PUSH
7043: LD_EXP 8
7047: NOT
7048: AND
7049: IFFALSE 7069
7051: GO 7053
7053: DISABLE
// begin omicronFall := true ;
7054: LD_ADDR_EXP 7
7058: PUSH
7059: LD_INT 1
7061: ST_TO_ADDR
// YouLost ( omi ) ;
7062: LD_STRING omi
7064: PPUSH
7065: CALL_OW 104
// end ;
7069: END
// every 0 0$1 trigger ( See ( 4 , Sikorski ) or See ( 4 , IsInUnit ( Sikorski ) ) ) and IsOk ( omikron ) do var i , tmp , speaker , whereHeWas ;
7070: LD_INT 4
7072: PPUSH
7073: LD_EXP 14
7077: PPUSH
7078: CALL_OW 292
7082: PUSH
7083: LD_INT 4
7085: PPUSH
7086: LD_EXP 14
7090: PPUSH
7091: CALL_OW 310
7095: PPUSH
7096: CALL_OW 292
7100: OR
7101: PUSH
7102: LD_INT 64
7104: PPUSH
7105: CALL_OW 302
7109: AND
7110: IFFALSE 7663
7112: GO 7114
7114: DISABLE
7115: LD_INT 0
7117: PPUSH
7118: PPUSH
7119: PPUSH
7120: PPUSH
// begin InGameOn ;
7121: CALL_OW 8
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
7125: LD_ADDR_VAR 0 2
7129: PUSH
7130: LD_INT 22
7132: PUSH
7133: LD_INT 4
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PPUSH
7140: CALL_OW 69
7144: ST_TO_ADDR
// speaker := UnitFilter ( tmp , [ f_sex , sex_male ] ) [ 1 ] ;
7145: LD_ADDR_VAR 0 3
7149: PUSH
7150: LD_VAR 0 2
7154: PPUSH
7155: LD_INT 26
7157: PUSH
7158: LD_INT 1
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: PPUSH
7165: CALL_OW 72
7169: PUSH
7170: LD_INT 1
7172: ARRAY
7173: ST_TO_ADDR
// for i in tmp do
7174: LD_ADDR_VAR 0 1
7178: PUSH
7179: LD_VAR 0 2
7183: PUSH
7184: FOR_IN
7185: IFFALSE 7201
// SetSide ( i , 1 ) ;
7187: LD_VAR 0 1
7191: PPUSH
7192: LD_INT 1
7194: PPUSH
7195: CALL_OW 235
7199: GO 7184
7201: POP
7202: POP
// ComMoveXY ( Sikorski , 37 , 40 ) ;
7203: LD_EXP 14
7207: PPUSH
7208: LD_INT 37
7210: PPUSH
7211: LD_INT 40
7213: PPUSH
7214: CALL_OW 111
// wait ( 0 0$5 ) ;
7218: LD_INT 175
7220: PPUSH
7221: CALL_OW 67
// ComExit ( Sikorski ) ;
7225: LD_EXP 14
7229: PPUSH
7230: CALL 65360 0 1
// AddComMoveXY ( Sikorski , 37 , 40 ) ;
7234: LD_EXP 14
7238: PPUSH
7239: LD_INT 37
7241: PPUSH
7242: LD_INT 40
7244: PPUSH
7245: CALL_OW 171
// CenterOnUnits ( Sikorski ) ;
7249: LD_EXP 14
7253: PPUSH
7254: CALL_OW 85
// wait ( 0 0$2 ) ;
7258: LD_INT 70
7260: PPUSH
7261: CALL_OW 67
// whereHeWas := ComExit ( speaker ) ;
7265: LD_ADDR_VAR 0 4
7269: PUSH
7270: LD_VAR 0 3
7274: PPUSH
7275: CALL 65360 0 1
7279: ST_TO_ADDR
// AddComMoveUnit ( speaker , Sikorski ) ;
7280: LD_VAR 0 3
7284: PPUSH
7285: LD_EXP 14
7289: PPUSH
7290: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
7294: LD_INT 35
7296: PPUSH
7297: CALL_OW 67
// until GetDistUnits ( speaker , Sikorski ) < 5 and not IsInUnit ( Sikorski ) ;
7301: LD_VAR 0 3
7305: PPUSH
7306: LD_EXP 14
7310: PPUSH
7311: CALL_OW 296
7315: PUSH
7316: LD_INT 5
7318: LESS
7319: PUSH
7320: LD_EXP 14
7324: PPUSH
7325: CALL_OW 310
7329: NOT
7330: AND
7331: IFFALSE 7294
// ComTurnUnit ( Sikorski , speaker ) ;
7333: LD_EXP 14
7337: PPUSH
7338: LD_VAR 0 3
7342: PPUSH
7343: CALL_OW 119
// ComTurnUnit ( speaker , Sikorski ) ;
7347: LD_VAR 0 3
7351: PPUSH
7352: LD_EXP 14
7356: PPUSH
7357: CALL_OW 119
// CenterNowOnUnits ( Sikorski ) ;
7361: LD_EXP 14
7365: PPUSH
7366: CALL_OW 87
// Say ( Sikorski , DS-1 ) ;
7370: LD_EXP 14
7374: PPUSH
7375: LD_STRING DS-1
7377: PPUSH
7378: CALL_OW 88
// Say ( speaker , DP-1 ) ;
7382: LD_VAR 0 3
7386: PPUSH
7387: LD_STRING DP-1
7389: PPUSH
7390: CALL_OW 88
// Say ( Sikorski , DS-2 ) ;
7394: LD_EXP 14
7398: PPUSH
7399: LD_STRING DS-2
7401: PPUSH
7402: CALL_OW 88
// Say ( speaker , DP-2 ) ;
7406: LD_VAR 0 3
7410: PPUSH
7411: LD_STRING DP-2
7413: PPUSH
7414: CALL_OW 88
// Say ( Sikorski , DS-3 ) ;
7418: LD_EXP 14
7422: PPUSH
7423: LD_STRING DS-3
7425: PPUSH
7426: CALL_OW 88
// Say ( speaker , DP-3 ) ;
7430: LD_VAR 0 3
7434: PPUSH
7435: LD_STRING DP-3
7437: PPUSH
7438: CALL_OW 88
// Say ( Sikorski , DS-4 ) ;
7442: LD_EXP 14
7446: PPUSH
7447: LD_STRING DS-4
7449: PPUSH
7450: CALL_OW 88
// wait ( 0 0$1 ) ;
7454: LD_INT 35
7456: PPUSH
7457: CALL_OW 67
// if whereHeWas then
7461: LD_VAR 0 4
7465: IFFALSE 7481
// ComEnterUnit ( speaker , whereHeWas ) ;
7467: LD_VAR 0 3
7471: PPUSH
7472: LD_VAR 0 4
7476: PPUSH
7477: CALL_OW 120
// ComHold ( Sikorski ) ;
7481: LD_EXP 14
7485: PPUSH
7486: CALL_OW 140
// wait ( 0 0$1 ) ;
7490: LD_INT 35
7492: PPUSH
7493: CALL_OW 67
// SayRadio ( Harrison , DR-1 ) ;
7497: LD_EXP 15
7501: PPUSH
7502: LD_STRING DR-1
7504: PPUSH
7505: CALL_OW 94
// Say ( Sikorski , DS-5 ) ;
7509: LD_EXP 14
7513: PPUSH
7514: LD_STRING DS-5
7516: PPUSH
7517: CALL_OW 88
// SayRadio ( Harrison , DR-2 ) ;
7521: LD_EXP 15
7525: PPUSH
7526: LD_STRING DR-2
7528: PPUSH
7529: CALL_OW 94
// Say ( Sikorski , DS-6 ) ;
7533: LD_EXP 14
7537: PPUSH
7538: LD_STRING DS-6
7540: PPUSH
7541: CALL_OW 88
// SayRadio ( Harrison , DR-3 ) ;
7545: LD_EXP 15
7549: PPUSH
7550: LD_STRING DR-3
7552: PPUSH
7553: CALL_OW 94
// InGameOff ;
7557: CALL_OW 9
// ChangeMissionObjectives ( target2 ) ;
7561: LD_STRING target2
7563: PPUSH
7564: CALL_OW 337
// sikorskiInOmicron := true ;
7568: LD_ADDR_EXP 9
7572: PUSH
7573: LD_INT 1
7575: ST_TO_ADDR
// wait ( 0 0$2 ) ;
7576: LD_INT 70
7578: PPUSH
7579: CALL_OW 67
// Say ( Sikorski , DS-7 ) ;
7583: LD_EXP 14
7587: PPUSH
7588: LD_STRING DS-7
7590: PPUSH
7591: CALL_OW 88
// wait ( 3 3$00 ) ;
7595: LD_INT 6300
7597: PPUSH
7598: CALL_OW 67
// SayRadio ( Harrison , DRforce-5 ) ;
7602: LD_EXP 15
7606: PPUSH
7607: LD_STRING DRforce-5
7609: PPUSH
7610: CALL_OW 94
// wait ( 4 4$50 ) ;
7614: LD_INT 10150
7616: PPUSH
7617: CALL_OW 67
// FirstReinforcements ;
7621: CALL 7840 0 0
// wait ( rand ( 12 12$00 , 15 15$00 ) ) ;
7625: LD_INT 25200
7627: PPUSH
7628: LD_INT 31500
7630: PPUSH
7631: CALL_OW 12
7635: PPUSH
7636: CALL_OW 67
// SayRadio ( Harrison , DRforce-10 ) ;
7640: LD_EXP 15
7644: PPUSH
7645: LD_STRING DRforce-10
7647: PPUSH
7648: CALL_OW 94
// wait ( 9 9$50 ) ;
7652: LD_INT 20650
7654: PPUSH
7655: CALL_OW 67
// SecondReinforcements ;
7659: CALL 8683 0 0
// end ;
7663: PPOPN 4
7665: END
// every 0 0$1 trigger GetLives ( Sikorski ) < 1000 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
7666: LD_EXP 14
7670: PPUSH
7671: CALL_OW 256
7675: PUSH
7676: LD_INT 1000
7678: LESS
7679: PUSH
7680: LD_INT 22
7682: PUSH
7683: LD_INT 1
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PUSH
7690: LD_INT 2
7692: PUSH
7693: LD_INT 101
7695: PUSH
7696: LD_INT 3
7698: PUSH
7699: EMPTY
7700: LIST
7701: LIST
7702: PUSH
7703: LD_INT 101
7705: PUSH
7706: LD_INT 6
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: LIST
7717: PUSH
7718: EMPTY
7719: LIST
7720: LIST
7721: PPUSH
7722: CALL_OW 69
7726: AND
7727: IFFALSE 7744
7729: GO 7731
7731: DISABLE
// Say ( Sikorski , DRus ) ;
7732: LD_EXP 14
7736: PPUSH
7737: LD_STRING DRus
7739: PPUSH
7740: CALL_OW 88
7744: END
// every 0 0$1 trigger tick >= [ 11 11$00 , 10 10$00 , 9 9$20 ] [ Difficulty ] do
7745: LD_OWVAR 1
7749: PUSH
7750: LD_INT 23100
7752: PUSH
7753: LD_INT 21000
7755: PUSH
7756: LD_INT 19600
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: LIST
7763: PUSH
7764: LD_OWVAR 67
7768: ARRAY
7769: GREATEREQUAL
7770: IFFALSE 7839
7772: GO 7774
7774: DISABLE
// begin SendSupport ;
7775: CALL 5822 0 0
// ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
7779: LD_EXP 24
7783: PPUSH
7784: LD_INT 21
7786: PUSH
7787: LD_INT 2
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: PPUSH
7794: CALL_OW 72
7798: PPUSH
7799: LD_INT 62
7801: PPUSH
7802: LD_INT 22
7804: PPUSH
7805: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
7809: LD_EXP 25
7813: PPUSH
7814: LD_INT 69
7816: PPUSH
7817: LD_INT 27
7819: PPUSH
7820: CALL_OW 111
// wait ( 1 1$00 ) ;
7824: LD_INT 2100
7826: PPUSH
7827: CALL_OW 67
// startAttackOnOmicron := true ;
7831: LD_ADDR_EXP 6
7835: PUSH
7836: LD_INT 1
7838: ST_TO_ADDR
// end ;
7839: END
// export function FirstReinforcements ; var i , un , tmp , spotted , xy ; begin
7840: LD_INT 0
7842: PPUSH
7843: PPUSH
7844: PPUSH
7845: PPUSH
7846: PPUSH
7847: PPUSH
// uc_side := 4 ;
7848: LD_ADDR_OWVAR 20
7852: PUSH
7853: LD_INT 4
7855: ST_TO_ADDR
// uc_nation := 1 ;
7856: LD_ADDR_OWVAR 21
7860: PUSH
7861: LD_INT 1
7863: ST_TO_ADDR
// tmp := [ ] ;
7864: LD_ADDR_VAR 0 4
7868: PUSH
7869: EMPTY
7870: ST_TO_ADDR
// ResetHc ;
7871: CALL 65487 0 0
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7875: LD_INT 2
7877: PPUSH
7878: LD_INT 1
7880: PPUSH
7881: LD_INT 1
7883: PPUSH
7884: LD_INT 4
7886: PPUSH
7887: LD_INT 77
7889: PPUSH
7890: CALL 33099 0 5
// un := CreateVehicle ;
7894: LD_ADDR_VAR 0 3
7898: PUSH
7899: CALL_OW 45
7903: ST_TO_ADDR
// tmp := tmp union un ;
7904: LD_ADDR_VAR 0 4
7908: PUSH
7909: LD_VAR 0 4
7913: PUSH
7914: LD_VAR 0 3
7918: UNION
7919: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7920: LD_VAR 0 3
7924: PPUSH
7925: LD_INT 2
7927: PPUSH
7928: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
7932: LD_VAR 0 3
7936: PPUSH
7937: LD_INT 106
7939: PPUSH
7940: LD_INT 3
7942: PPUSH
7943: LD_INT 0
7945: PPUSH
7946: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
7950: LD_INT 0
7952: PPUSH
7953: LD_INT 3
7955: PPUSH
7956: LD_INT 2
7958: PPUSH
7959: CALL_OW 380
// un := CreateHuman ;
7963: LD_ADDR_VAR 0 3
7967: PUSH
7968: CALL_OW 44
7972: ST_TO_ADDR
// tmp := tmp union un ;
7973: LD_ADDR_VAR 0 4
7977: PUSH
7978: LD_VAR 0 4
7982: PUSH
7983: LD_VAR 0 3
7987: UNION
7988: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
7989: LD_VAR 0 3
7993: PPUSH
7994: LD_VAR 0 4
7998: PUSH
7999: LD_VAR 0 4
8003: PUSH
8004: LD_INT 1
8006: MINUS
8007: ARRAY
8008: PPUSH
8009: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
8013: LD_VAR 0 3
8017: PPUSH
8018: LD_INT 109
8020: PPUSH
8021: LD_INT 9
8023: PPUSH
8024: CALL_OW 111
// wait ( 0 0$1 ) ;
8028: LD_INT 35
8030: PPUSH
8031: CALL_OW 67
// for i := 1 to [ 2 , 2 , 1 ] [ Difficulty ] do
8035: LD_ADDR_VAR 0 2
8039: PUSH
8040: DOUBLE
8041: LD_INT 1
8043: DEC
8044: ST_TO_ADDR
8045: LD_INT 2
8047: PUSH
8048: LD_INT 2
8050: PUSH
8051: LD_INT 1
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: LIST
8058: PUSH
8059: LD_OWVAR 67
8063: ARRAY
8064: PUSH
8065: FOR_TO
8066: IFFALSE 8130
// begin PrepareHuman ( false , 1 , 2 ) ;
8068: LD_INT 0
8070: PPUSH
8071: LD_INT 1
8073: PPUSH
8074: LD_INT 2
8076: PPUSH
8077: CALL_OW 380
// un := CreateHuman ;
8081: LD_ADDR_VAR 0 3
8085: PUSH
8086: CALL_OW 44
8090: ST_TO_ADDR
// tmp := tmp union un ;
8091: LD_ADDR_VAR 0 4
8095: PUSH
8096: LD_VAR 0 4
8100: PUSH
8101: LD_VAR 0 3
8105: UNION
8106: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
8107: LD_VAR 0 3
8111: PPUSH
8112: LD_INT 105
8114: PPUSH
8115: LD_INT 2
8117: PPUSH
8118: LD_INT 2
8120: PPUSH
8121: LD_INT 0
8123: PPUSH
8124: CALL_OW 50
// end ;
8128: GO 8065
8130: POP
8131: POP
// PrepareHuman ( false , 4 , 2 ) ;
8132: LD_INT 0
8134: PPUSH
8135: LD_INT 4
8137: PPUSH
8138: LD_INT 2
8140: PPUSH
8141: CALL_OW 380
// un := CreateHuman ;
8145: LD_ADDR_VAR 0 3
8149: PUSH
8150: CALL_OW 44
8154: ST_TO_ADDR
// tmp := tmp union un ;
8155: LD_ADDR_VAR 0 4
8159: PUSH
8160: LD_VAR 0 4
8164: PUSH
8165: LD_VAR 0 3
8169: UNION
8170: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
8171: LD_VAR 0 3
8175: PPUSH
8176: LD_INT 105
8178: PPUSH
8179: LD_INT 2
8181: PPUSH
8182: LD_INT 2
8184: PPUSH
8185: LD_INT 0
8187: PPUSH
8188: CALL_OW 50
// ComAgressiveMove ( tmp , 26 , 35 ) ;
8192: LD_VAR 0 4
8196: PPUSH
8197: LD_INT 26
8199: PPUSH
8200: LD_INT 35
8202: PPUSH
8203: CALL_OW 114
// spotted := false ;
8207: LD_ADDR_VAR 0 5
8211: PUSH
8212: LD_INT 0
8214: ST_TO_ADDR
// xy := [ 0 , 0 ] ;
8215: LD_ADDR_VAR 0 6
8219: PUSH
8220: LD_INT 0
8222: PUSH
8223: LD_INT 0
8225: PUSH
8226: EMPTY
8227: LIST
8228: LIST
8229: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8230: LD_INT 35
8232: PPUSH
8233: CALL_OW 67
// if UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) and not spotted then
8237: LD_VAR 0 4
8241: PPUSH
8242: LD_INT 3
8244: PUSH
8245: LD_INT 24
8247: PUSH
8248: LD_INT 1000
8250: PUSH
8251: EMPTY
8252: LIST
8253: LIST
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: PPUSH
8259: CALL_OW 72
8263: PUSH
8264: LD_VAR 0 5
8268: NOT
8269: AND
8270: IFFALSE 8396
// begin spotted := true ;
8272: LD_ADDR_VAR 0 5
8276: PUSH
8277: LD_INT 1
8279: ST_TO_ADDR
// un := UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ;
8280: LD_ADDR_VAR 0 3
8284: PUSH
8285: LD_VAR 0 4
8289: PPUSH
8290: LD_INT 3
8292: PUSH
8293: LD_INT 24
8295: PUSH
8296: LD_INT 1000
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: PPUSH
8307: CALL_OW 72
8311: PUSH
8312: LD_INT 1
8314: ARRAY
8315: ST_TO_ADDR
// xy := [ GetX ( un ) , GetY ( un ) ] ;
8316: LD_ADDR_VAR 0 6
8320: PUSH
8321: LD_VAR 0 3
8325: PPUSH
8326: CALL_OW 250
8330: PUSH
8331: LD_VAR 0 3
8335: PPUSH
8336: CALL_OW 251
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: ST_TO_ADDR
// PlaceSeeing ( xy [ 1 ] , xy [ 2 ] , 1 , - 12 ) ;
8345: LD_VAR 0 6
8349: PUSH
8350: LD_INT 1
8352: ARRAY
8353: PPUSH
8354: LD_VAR 0 6
8358: PUSH
8359: LD_INT 2
8361: ARRAY
8362: PPUSH
8363: LD_INT 1
8365: PPUSH
8366: LD_INT 12
8368: NEG
8369: PPUSH
8370: CALL_OW 330
// CenterOnXY ( xy [ 1 ] , xy [ 2 ] ) ;
8374: LD_VAR 0 6
8378: PUSH
8379: LD_INT 1
8381: ARRAY
8382: PPUSH
8383: LD_VAR 0 6
8387: PUSH
8388: LD_INT 2
8390: ARRAY
8391: PPUSH
8392: CALL_OW 84
// end ; for i in tmp do
8396: LD_ADDR_VAR 0 2
8400: PUSH
8401: LD_VAR 0 4
8405: PUSH
8406: FOR_IN
8407: IFFALSE 8438
// if not HasTask ( i ) then
8409: LD_VAR 0 2
8413: PPUSH
8414: CALL_OW 314
8418: NOT
8419: IFFALSE 8436
// ComAgressiveMove ( i , 26 , 35 ) ;
8421: LD_VAR 0 2
8425: PPUSH
8426: LD_INT 26
8428: PPUSH
8429: LD_INT 35
8431: PPUSH
8432: CALL_OW 114
8436: GO 8406
8438: POP
8439: POP
// if not UnitFilter ( tmp , [ f_ok ] ) then
8440: LD_VAR 0 4
8444: PPUSH
8445: LD_INT 50
8447: PUSH
8448: EMPTY
8449: LIST
8450: PPUSH
8451: CALL_OW 72
8455: NOT
8456: IFFALSE 8491
// begin if spotted then
8458: LD_VAR 0 5
8462: IFFALSE 8489
// RemoveSeeing ( xy [ 1 ] , xy [ 2 ] , 1 ) ;
8464: LD_VAR 0 6
8468: PUSH
8469: LD_INT 1
8471: ARRAY
8472: PPUSH
8473: LD_VAR 0 6
8477: PUSH
8478: LD_INT 2
8480: ARRAY
8481: PPUSH
8482: LD_INT 1
8484: PPUSH
8485: CALL_OW 331
// exit ;
8489: GO 8678
// end ; until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) or See ( 4 , Sikorski ) ;
8491: LD_VAR 0 4
8495: PPUSH
8496: LD_INT 91
8498: PUSH
8499: LD_INT 64
8501: PUSH
8502: LD_INT 12
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: LIST
8509: PPUSH
8510: CALL_OW 72
8514: PUSH
8515: LD_INT 4
8517: PPUSH
8518: LD_EXP 14
8522: PPUSH
8523: CALL_OW 292
8527: OR
8528: IFFALSE 8230
// omicronSquad := omicronSquad union tmp ;
8530: LD_ADDR_EXP 13
8534: PUSH
8535: LD_EXP 13
8539: PUSH
8540: LD_VAR 0 4
8544: UNION
8545: ST_TO_ADDR
// if spotted then
8546: LD_VAR 0 5
8550: IFFALSE 8577
// RemoveSeeing ( xy [ 1 ] , xy [ 2 ] , 1 ) ;
8552: LD_VAR 0 6
8556: PUSH
8557: LD_INT 1
8559: ARRAY
8560: PPUSH
8561: LD_VAR 0 6
8565: PUSH
8566: LD_INT 2
8568: ARRAY
8569: PPUSH
8570: LD_INT 1
8572: PPUSH
8573: CALL_OW 331
// for i in tmp do
8577: LD_ADDR_VAR 0 2
8581: PUSH
8582: LD_VAR 0 4
8586: PUSH
8587: FOR_IN
8588: IFFALSE 8604
// SetSide ( i , 1 ) ;
8590: LD_VAR 0 2
8594: PPUSH
8595: LD_INT 1
8597: PPUSH
8598: CALL_OW 235
8602: GO 8587
8604: POP
8605: POP
// if UnitFilter ( tmp , [ [ f_sex , sex_male ] , [ f_ok ] ] ) then
8606: LD_VAR 0 4
8610: PPUSH
8611: LD_INT 26
8613: PUSH
8614: LD_INT 1
8616: PUSH
8617: EMPTY
8618: LIST
8619: LIST
8620: PUSH
8621: LD_INT 50
8623: PUSH
8624: EMPTY
8625: LIST
8626: PUSH
8627: EMPTY
8628: LIST
8629: LIST
8630: PPUSH
8631: CALL_OW 72
8635: IFFALSE 8678
// Say ( UnitFilter ( tmp , [ [ f_sex , sex_male ] , [ f_ok ] ] ) [ 1 ] , Dcargo ) ;
8637: LD_VAR 0 4
8641: PPUSH
8642: LD_INT 26
8644: PUSH
8645: LD_INT 1
8647: PUSH
8648: EMPTY
8649: LIST
8650: LIST
8651: PUSH
8652: LD_INT 50
8654: PUSH
8655: EMPTY
8656: LIST
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: PPUSH
8662: CALL_OW 72
8666: PUSH
8667: LD_INT 1
8669: ARRAY
8670: PPUSH
8671: LD_STRING Dcargo
8673: PPUSH
8674: CALL_OW 88
// end ;
8678: LD_VAR 0 1
8682: RET
// export function SecondReinforcements ; var un , veh , i ; begin
8683: LD_INT 0
8685: PPUSH
8686: PPUSH
8687: PPUSH
8688: PPUSH
// uc_side := 1 ;
8689: LD_ADDR_OWVAR 20
8693: PUSH
8694: LD_INT 1
8696: ST_TO_ADDR
// uc_nation := 1 ;
8697: LD_ADDR_OWVAR 21
8701: PUSH
8702: LD_INT 1
8704: ST_TO_ADDR
// ResetHc ;
8705: CALL 65487 0 0
// PrepareHuman ( false , 3 , 3 ) ;
8709: LD_INT 0
8711: PPUSH
8712: LD_INT 3
8714: PPUSH
8715: LD_INT 3
8717: PPUSH
8718: CALL_OW 380
// un := CreateHuman ;
8722: LD_ADDR_VAR 0 2
8726: PUSH
8727: CALL_OW 44
8731: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_double_gun , 90 ) ;
8732: LD_INT 3
8734: PPUSH
8735: LD_INT 1
8737: PPUSH
8738: LD_INT 1
8740: PPUSH
8741: LD_INT 5
8743: PPUSH
8744: LD_INT 90
8746: PPUSH
8747: CALL 33099 0 5
// veh := CreateVehicle ;
8751: LD_ADDR_VAR 0 3
8755: PUSH
8756: CALL_OW 45
8760: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8761: LD_VAR 0 3
8765: PPUSH
8766: LD_INT 2
8768: PPUSH
8769: CALL_OW 233
// PlaceUnitXYR ( veh , 83 , 154 , 10 , false ) ;
8773: LD_VAR 0 3
8777: PPUSH
8778: LD_INT 83
8780: PPUSH
8781: LD_INT 154
8783: PPUSH
8784: LD_INT 10
8786: PPUSH
8787: LD_INT 0
8789: PPUSH
8790: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
8794: LD_VAR 0 2
8798: PPUSH
8799: LD_VAR 0 3
8803: PPUSH
8804: CALL_OW 52
// for i := 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
8808: LD_ADDR_VAR 0 4
8812: PUSH
8813: DOUBLE
8814: LD_INT 1
8816: DEC
8817: ST_TO_ADDR
8818: LD_INT 4
8820: PUSH
8821: LD_INT 3
8823: PUSH
8824: LD_INT 3
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: LIST
8831: PUSH
8832: LD_OWVAR 67
8836: ARRAY
8837: PUSH
8838: FOR_TO
8839: IFFALSE 8887
// begin PrepareHuman ( false , 1 , 3 ) ;
8841: LD_INT 0
8843: PPUSH
8844: LD_INT 1
8846: PPUSH
8847: LD_INT 3
8849: PPUSH
8850: CALL_OW 380
// un := CreateHuman ;
8854: LD_ADDR_VAR 0 2
8858: PUSH
8859: CALL_OW 44
8863: ST_TO_ADDR
// PlaceUnitXYR ( un , 83 , 154 , 10 , false ) ;
8864: LD_VAR 0 2
8868: PPUSH
8869: LD_INT 83
8871: PPUSH
8872: LD_INT 154
8874: PPUSH
8875: LD_INT 10
8877: PPUSH
8878: LD_INT 0
8880: PPUSH
8881: CALL_OW 50
// end ;
8885: GO 8838
8887: POP
8888: POP
// PrepareHuman ( sex_male , 1 , 3 ) ;
8889: LD_INT 1
8891: PPUSH
8892: LD_INT 1
8894: PPUSH
8895: LD_INT 3
8897: PPUSH
8898: CALL_OW 380
// un := CreateHuman ;
8902: LD_ADDR_VAR 0 2
8906: PUSH
8907: CALL_OW 44
8911: ST_TO_ADDR
// PlaceUnitXYR ( un , 83 , 154 , 10 , false ) ;
8912: LD_VAR 0 2
8916: PPUSH
8917: LD_INT 83
8919: PPUSH
8920: LD_INT 154
8922: PPUSH
8923: LD_INT 10
8925: PPUSH
8926: LD_INT 0
8928: PPUSH
8929: CALL_OW 50
// SayRadio ( un , Dhelp ) ;
8933: LD_VAR 0 2
8937: PPUSH
8938: LD_STRING Dhelp
8940: PPUSH
8941: CALL_OW 94
// ResetHc ;
8945: CALL 65487 0 0
// end ;
8949: LD_VAR 0 1
8953: RET
// every 0 0$1 trigger russianAlert do var i , tmp , towers ;
8954: LD_EXP 5
8958: IFFALSE 9100
8960: GO 8962
8962: DISABLE
8963: LD_INT 0
8965: PPUSH
8966: PPUSH
8967: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_inside ] ] ) ;
8968: LD_ADDR_VAR 0 2
8972: PUSH
8973: LD_EXP 20
8977: PPUSH
8978: LD_INT 25
8980: PUSH
8981: LD_INT 1
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PUSH
8988: LD_INT 54
8990: PUSH
8991: EMPTY
8992: LIST
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: PPUSH
8998: CALL_OW 72
9002: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
9003: LD_ADDR_VAR 0 3
9007: PUSH
9008: LD_INT 22
9010: PUSH
9011: LD_INT 6
9013: PUSH
9014: EMPTY
9015: LIST
9016: LIST
9017: PUSH
9018: LD_INT 30
9020: PUSH
9021: LD_INT 32
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: PUSH
9028: EMPTY
9029: LIST
9030: LIST
9031: PPUSH
9032: CALL_OW 69
9036: ST_TO_ADDR
// for i := 1 to tmp do
9037: LD_ADDR_VAR 0 1
9041: PUSH
9042: DOUBLE
9043: LD_INT 1
9045: DEC
9046: ST_TO_ADDR
9047: LD_VAR 0 2
9051: PUSH
9052: FOR_TO
9053: IFFALSE 9098
// begin ComExitBuilding ( tmp [ i ] ) ;
9055: LD_VAR 0 2
9059: PUSH
9060: LD_VAR 0 1
9064: ARRAY
9065: PPUSH
9066: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , towers [ i ] ) ;
9070: LD_VAR 0 2
9074: PUSH
9075: LD_VAR 0 1
9079: ARRAY
9080: PPUSH
9081: LD_VAR 0 3
9085: PUSH
9086: LD_VAR 0 1
9090: ARRAY
9091: PPUSH
9092: CALL_OW 180
// end ;
9096: GO 9052
9098: POP
9099: POP
// end ;
9100: PPOPN 3
9102: END
// every 0 0$1 trigger russianAlert and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) do var i , noncombat ;
9103: LD_EXP 5
9107: PUSH
9108: LD_INT 22
9110: PUSH
9111: LD_INT 2
9113: PUSH
9114: EMPTY
9115: LIST
9116: LIST
9117: PUSH
9118: LD_INT 101
9120: PUSH
9121: LD_INT 6
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: PPUSH
9132: CALL_OW 69
9136: AND
9137: IFFALSE 9283
9139: GO 9141
9141: DISABLE
9142: LD_INT 0
9144: PPUSH
9145: PPUSH
// begin SayRadio ( Kurin , D9a-Kur-1 ) ;
9146: LD_EXP 16
9150: PPUSH
9151: LD_STRING D9a-Kur-1
9153: PPUSH
9154: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
9158: LD_EXP 19
9162: PPUSH
9163: LD_STRING D9a-Bur-1
9165: PPUSH
9166: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
9170: LD_EXP 16
9174: PPUSH
9175: LD_STRING D9a-Kur-2
9177: PPUSH
9178: CALL_OW 94
// retreatFromOmicron := true ;
9182: LD_ADDR_EXP 8
9186: PUSH
9187: LD_INT 1
9189: ST_TO_ADDR
// noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
9190: LD_ADDR_VAR 0 2
9194: PUSH
9195: LD_EXP 18
9199: PUSH
9200: LD_EXP 20
9204: PUSH
9205: LD_EXP 21
9209: UNION
9210: PPUSH
9211: LD_INT 3
9213: PUSH
9214: LD_INT 25
9216: PUSH
9217: LD_INT 1
9219: PUSH
9220: EMPTY
9221: LIST
9222: LIST
9223: PUSH
9224: EMPTY
9225: LIST
9226: LIST
9227: PPUSH
9228: CALL_OW 72
9232: UNION
9233: ST_TO_ADDR
// for i in noncombat do
9234: LD_ADDR_VAR 0 1
9238: PUSH
9239: LD_VAR 0 2
9243: PUSH
9244: FOR_IN
9245: IFFALSE 9281
// begin if IsInUnit ( i ) then
9247: LD_VAR 0 1
9251: PPUSH
9252: CALL_OW 310
9256: IFFALSE 9267
// ComExitBuilding ( i ) ;
9258: LD_VAR 0 1
9262: PPUSH
9263: CALL_OW 122
// AddComMoveToArea ( i , westEscapeArea ) ;
9267: LD_VAR 0 1
9271: PPUSH
9272: LD_INT 4
9274: PPUSH
9275: CALL_OW 173
// end ;
9279: GO 9244
9281: POP
9282: POP
// end ;
9283: PPOPN 2
9285: END
// every 0 0$1 trigger tick > rand ( 20 20$00 , 30 30$00 ) do var un ;
9286: LD_OWVAR 1
9290: PUSH
9291: LD_INT 42000
9293: PPUSH
9294: LD_INT 63000
9296: PPUSH
9297: CALL_OW 12
9301: GREATER
9302: IFFALSE 9447
9304: GO 9306
9306: DISABLE
9307: LD_INT 0
9309: PPUSH
// begin uc_side := 4 ;
9310: LD_ADDR_OWVAR 20
9314: PUSH
9315: LD_INT 4
9317: ST_TO_ADDR
// uc_nation := 4 ;
9318: LD_ADDR_OWVAR 21
9322: PUSH
9323: LD_INT 4
9325: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 3 ) ;
9326: LD_INT 1
9328: PPUSH
9329: LD_INT 4
9331: PPUSH
9332: LD_INT 3
9334: PPUSH
9335: CALL_OW 380
// hc_name :=  ;
9339: LD_ADDR_OWVAR 26
9343: PUSH
9344: LD_STRING 
9346: ST_TO_ADDR
// un := CreateHuman ;
9347: LD_ADDR_VAR 0 1
9351: PUSH
9352: CALL_OW 44
9356: ST_TO_ADDR
// PlaceUnitXYR ( un , 161 , 162 , 3 , true ) ;
9357: LD_VAR 0 1
9361: PPUSH
9362: LD_INT 161
9364: PPUSH
9365: LD_INT 162
9367: PPUSH
9368: LD_INT 3
9370: PPUSH
9371: LD_INT 1
9373: PPUSH
9374: CALL_OW 50
// ResetHc ;
9378: CALL 65487 0 0
// wait ( 0 0$3 ) ;
9382: LD_INT 105
9384: PPUSH
9385: CALL_OW 67
// SayRadio ( un , Dun1 ) ;
9389: LD_VAR 0 1
9393: PPUSH
9394: LD_STRING Dun1
9396: PPUSH
9397: CALL_OW 94
// repeat wait ( 0 0$1 ) ;
9401: LD_INT 35
9403: PPUSH
9404: CALL_OW 67
// if IsDead ( un ) then
9408: LD_VAR 0 1
9412: PPUSH
9413: CALL_OW 301
9417: IFFALSE 9421
// exit ;
9419: GO 9447
// until See ( 1 , un ) ;
9421: LD_INT 1
9423: PPUSH
9424: LD_VAR 0 1
9428: PPUSH
9429: CALL_OW 292
9433: IFFALSE 9401
// SetSide ( un , 1 ) ;
9435: LD_VAR 0 1
9439: PPUSH
9440: LD_INT 1
9442: PPUSH
9443: CALL_OW 235
// end ;
9447: PPOPN 1
9449: END
// every 0 0$1 trigger tanksCounter >= 20 do
9450: LD_EXP 12
9454: PUSH
9455: LD_INT 20
9457: GREATEREQUAL
9458: IFFALSE 9470
9460: GO 9462
9462: DISABLE
// SetAchievement ( ACH_PANZERKNACKER ) ;
9463: LD_STRING ACH_PANZERKNACKER
9465: PPUSH
9466: CALL_OW 543
9470: END
// every 0 0$1 trigger tick > rand ( 45 45$00 , 52 52$00 ) do var un ;
9471: LD_OWVAR 1
9475: PUSH
9476: LD_INT 94500
9478: PPUSH
9479: LD_INT 109200
9481: PPUSH
9482: CALL_OW 12
9486: GREATER
9487: IFFALSE 9750
9489: GO 9491
9491: DISABLE
9492: LD_INT 0
9494: PPUSH
// begin PrepareArabian ;
9495: CALL 6468 0 0
// uc_side := 4 ;
9499: LD_ADDR_OWVAR 20
9503: PUSH
9504: LD_INT 4
9506: ST_TO_ADDR
// uc_nation := 1 ;
9507: LD_ADDR_OWVAR 21
9511: PUSH
9512: LD_INT 1
9514: ST_TO_ADDR
// ResetHc ;
9515: CALL 65487 0 0
// un := CreateHuman ;
9519: LD_ADDR_VAR 0 1
9523: PUSH
9524: CALL_OW 44
9528: ST_TO_ADDR
// SayRadio ( un , ar_come ) ;
9529: LD_VAR 0 1
9533: PPUSH
9534: LD_STRING ar_come
9536: PPUSH
9537: CALL_OW 94
// wait ( 0 0$20 ) ;
9541: LD_INT 700
9543: PPUSH
9544: CALL_OW 67
// SayRadio ( Harrison , DR-Back ) ;
9548: LD_EXP 15
9552: PPUSH
9553: LD_STRING DR-Back
9555: PPUSH
9556: CALL_OW 94
// ChangeMissionObjectives ( target3 ) ;
9560: LD_STRING target3
9562: PPUSH
9563: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
9567: LD_INT 10
9569: PPUSH
9570: LD_INT 1
9572: PPUSH
9573: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
9577: LD_INT 35
9579: PPUSH
9580: CALL_OW 67
// until IsInArea ( Sikorski , escapeArea ) or FilterUnitsInArea ( escapeArea , [ f_side , 1 ] ) ;
9584: LD_EXP 14
9588: PPUSH
9589: LD_INT 10
9591: PPUSH
9592: CALL_OW 308
9596: PUSH
9597: LD_INT 10
9599: PPUSH
9600: LD_INT 22
9602: PUSH
9603: LD_INT 1
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PPUSH
9610: CALL_OW 70
9614: OR
9615: IFFALSE 9577
// SayRadio ( Harrison , you_win ) ;
9617: LD_EXP 15
9621: PPUSH
9622: LD_STRING you_win
9624: PPUSH
9625: CALL_OW 94
// AddMedal ( med , 1 ) ;
9629: LD_STRING med
9631: PPUSH
9632: LD_INT 1
9634: PPUSH
9635: CALL_OW 101
// if ruLoseCounter > [ 27 , 32 , 36 ] [ Difficulty ] then
9639: LD_EXP 11
9643: PUSH
9644: LD_INT 27
9646: PUSH
9647: LD_INT 32
9649: PUSH
9650: LD_INT 36
9652: PUSH
9653: EMPTY
9654: LIST
9655: LIST
9656: LIST
9657: PUSH
9658: LD_OWVAR 67
9662: ARRAY
9663: GREATER
9664: IFFALSE 9678
// AddMedal ( ru , 1 ) else
9666: LD_STRING ru
9668: PPUSH
9669: LD_INT 1
9671: PPUSH
9672: CALL_OW 101
9676: GO 9689
// AddMedal ( ru , - 1 ) ;
9678: LD_STRING ru
9680: PPUSH
9681: LD_INT 1
9683: NEG
9684: PPUSH
9685: CALL_OW 101
// if usLoseCounter < [ 4 , 3 , 2 ] [ Difficulty ] then
9689: LD_EXP 10
9693: PUSH
9694: LD_INT 4
9696: PUSH
9697: LD_INT 3
9699: PUSH
9700: LD_INT 2
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: LIST
9707: PUSH
9708: LD_OWVAR 67
9712: ARRAY
9713: LESS
9714: IFFALSE 9728
// AddMedal ( pep , 1 ) else
9716: LD_STRING pep
9718: PPUSH
9719: LD_INT 1
9721: PPUSH
9722: CALL_OW 101
9726: GO 9739
// AddMedal ( pep , - 1 ) ;
9728: LD_STRING pep
9730: PPUSH
9731: LD_INT 1
9733: NEG
9734: PPUSH
9735: CALL_OW 101
// GiveMedals ( MAIN ) ;
9739: LD_STRING MAIN
9741: PPUSH
9742: CALL_OW 102
// YouWin ;
9746: CALL_OW 103
// end ; end_of_file
9750: PPOPN 1
9752: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
9753: LD_VAR 0 1
9757: PPUSH
9758: CALL 10445 0 1
// if un = Sikorski then
9762: LD_VAR 0 1
9766: PUSH
9767: LD_EXP 14
9771: EQUAL
9772: IFFALSE 9781
// YouLost ( sik ) ;
9774: LD_STRING sik
9776: PPUSH
9777: CALL_OW 104
// if un in russianOmicronAttackers then
9781: LD_VAR 0 1
9785: PUSH
9786: LD_EXP 24
9790: IN
9791: IFFALSE 9809
// russianOmicronAttackers := russianOmicronAttackers diff un ;
9793: LD_ADDR_EXP 24
9797: PUSH
9798: LD_EXP 24
9802: PUSH
9803: LD_VAR 0 1
9807: DIFF
9808: ST_TO_ADDR
// if un in russianCargo then
9809: LD_VAR 0 1
9813: PUSH
9814: LD_EXP 25
9818: IN
9819: IFFALSE 9837
// russianCargo := russianCargo diff un ;
9821: LD_ADDR_EXP 25
9825: PUSH
9826: LD_EXP 25
9830: PUSH
9831: LD_VAR 0 1
9835: DIFF
9836: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) then
9837: LD_VAR 0 1
9841: PUSH
9842: LD_INT 22
9844: PUSH
9845: LD_INT 3
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: PUSH
9852: LD_INT 34
9854: PUSH
9855: LD_INT 51
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: PPUSH
9866: CALL_OW 69
9870: IN
9871: IFFALSE 9880
// ProduceNew ( 1 ) ;
9873: LD_INT 1
9875: PPUSH
9876: CALL 4632 0 1
// if GetSide ( un ) in [ 1 , 4 ] and GetType ( un ) = unit_human and GetNation ( un ) = nation_american then
9880: LD_VAR 0 1
9884: PPUSH
9885: CALL_OW 255
9889: PUSH
9890: LD_INT 1
9892: PUSH
9893: LD_INT 4
9895: PUSH
9896: EMPTY
9897: LIST
9898: LIST
9899: IN
9900: PUSH
9901: LD_VAR 0 1
9905: PPUSH
9906: CALL_OW 247
9910: PUSH
9911: LD_INT 1
9913: EQUAL
9914: AND
9915: PUSH
9916: LD_VAR 0 1
9920: PPUSH
9921: CALL_OW 248
9925: PUSH
9926: LD_INT 1
9928: EQUAL
9929: AND
9930: IFFALSE 9946
// usLoseCounter := usLoseCounter + 1 ;
9932: LD_ADDR_EXP 10
9936: PUSH
9937: LD_EXP 10
9941: PUSH
9942: LD_INT 1
9944: PLUS
9945: ST_TO_ADDR
// end ;
9946: PPOPN 1
9948: END
// on VehicleConstructed ( veh , factory ) do begin if GetSide ( factory ) <> 3 then
9949: LD_VAR 0 2
9953: PPUSH
9954: CALL_OW 255
9958: PUSH
9959: LD_INT 3
9961: NONEQUAL
9962: IFFALSE 9966
// exit ;
9964: GO 10028
// if GetWeapon ( veh ) = ru_cargo_bay then
9966: LD_VAR 0 1
9970: PPUSH
9971: CALL_OW 264
9975: PUSH
9976: LD_INT 51
9978: EQUAL
9979: IFFALSE 9983
// exit ;
9981: GO 10028
// russianOmicronAttackers := russianOmicronAttackers union [ veh , IsInUnit ( veh ) ] ;
9983: LD_ADDR_EXP 24
9987: PUSH
9988: LD_EXP 24
9992: PUSH
9993: LD_VAR 0 1
9997: PUSH
9998: LD_VAR 0 1
10002: PPUSH
10003: CALL_OW 310
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: UNION
10012: ST_TO_ADDR
// AddComAgressiveMove ( veh , 71 , 37 ) ;
10013: LD_VAR 0 1
10017: PPUSH
10018: LD_INT 71
10020: PPUSH
10021: LD_INT 37
10023: PPUSH
10024: CALL_OW 174
// end ;
10028: PPOPN 2
10030: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId in russianOmicronAttackers then
10031: LD_VAR 0 2
10035: PUSH
10036: LD_EXP 24
10040: IN
10041: IFFALSE 10059
// russianOmicronAttackers := russianOmicronAttackers diff oldId ;
10043: LD_ADDR_EXP 24
10047: PUSH
10048: LD_EXP 24
10052: PUSH
10053: LD_VAR 0 2
10057: DIFF
10058: ST_TO_ADDR
// if oldId in russianCargo then
10059: LD_VAR 0 2
10063: PUSH
10064: LD_EXP 25
10068: IN
10069: IFFALSE 10087
// russianCargo := russianCargo diff oldId ;
10071: LD_ADDR_EXP 25
10075: PUSH
10076: LD_EXP 25
10080: PUSH
10081: LD_VAR 0 2
10085: DIFF
10086: ST_TO_ADDR
// if newId in russianOmicronAttackers then
10087: LD_VAR 0 1
10091: PUSH
10092: LD_EXP 24
10096: IN
10097: IFFALSE 10115
// russianOmicronAttackers := russianOmicronAttackers diff newId ;
10099: LD_ADDR_EXP 24
10103: PUSH
10104: LD_EXP 24
10108: PUSH
10109: LD_VAR 0 1
10113: DIFF
10114: ST_TO_ADDR
// if newId in russianCargo then
10115: LD_VAR 0 1
10119: PUSH
10120: LD_EXP 25
10124: IN
10125: IFFALSE 10143
// russianCargo := russianCargo diff newId ;
10127: LD_ADDR_EXP 25
10131: PUSH
10132: LD_EXP 25
10136: PUSH
10137: LD_VAR 0 1
10141: DIFF
10142: ST_TO_ADDR
// end ;
10143: PPOPN 4
10145: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
10146: LD_VAR 0 1
10150: PPUSH
10151: LD_VAR 0 2
10155: PPUSH
10156: LD_VAR 0 3
10160: PPUSH
10161: CALL 10543 0 3
// if killerSide in [ 1 , 4 ] and GetSide ( un ) in [ 3 , 6 ] then
10165: LD_VAR 0 2
10169: PUSH
10170: LD_INT 1
10172: PUSH
10173: LD_INT 4
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: IN
10180: PUSH
10181: LD_VAR 0 1
10185: PPUSH
10186: CALL_OW 255
10190: PUSH
10191: LD_INT 3
10193: PUSH
10194: LD_INT 6
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: IN
10201: AND
10202: IFFALSE 10218
// ruLoseCounter := ruLoseCounter + 1 ;
10204: LD_ADDR_EXP 11
10208: PUSH
10209: LD_EXP 11
10213: PUSH
10214: LD_INT 1
10216: PLUS
10217: ST_TO_ADDR
// if killerSide in [ 1 , 4 ] and GetType ( un ) = unit_vehicle and GetSide ( un ) in [ 3 , 6 ] then
10218: LD_VAR 0 2
10222: PUSH
10223: LD_INT 1
10225: PUSH
10226: LD_INT 4
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: IN
10233: PUSH
10234: LD_VAR 0 1
10238: PPUSH
10239: CALL_OW 247
10243: PUSH
10244: LD_INT 2
10246: EQUAL
10247: AND
10248: PUSH
10249: LD_VAR 0 1
10253: PPUSH
10254: CALL_OW 255
10258: PUSH
10259: LD_INT 3
10261: PUSH
10262: LD_INT 6
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: IN
10269: AND
10270: IFFALSE 10286
// tanksCounter := tanksCounter + 1 ;
10272: LD_ADDR_EXP 12
10276: PUSH
10277: LD_EXP 12
10281: PUSH
10282: LD_INT 1
10284: PLUS
10285: ST_TO_ADDR
// end ;
10286: PPOPN 3
10288: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10289: LD_VAR 0 1
10293: PPUSH
10294: CALL 10551 0 1
// end ; end_of_file
10298: PPOPN 1
10300: END
// every 1 1$35 trigger sikorskiInOmicron and GetResourceArea ( cratesSpawnArea , mat_cans ) < [ 18 , 15 , 12 ] [ Difficulty ] do
10301: LD_EXP 9
10305: PUSH
10306: LD_INT 6
10308: PPUSH
10309: LD_INT 1
10311: PPUSH
10312: CALL_OW 287
10316: PUSH
10317: LD_INT 18
10319: PUSH
10320: LD_INT 15
10322: PUSH
10323: LD_INT 12
10325: PUSH
10326: EMPTY
10327: LIST
10328: LIST
10329: LIST
10330: PUSH
10331: LD_OWVAR 67
10335: ARRAY
10336: LESS
10337: AND
10338: IFFALSE 10380
10340: GO 10342
10342: DISABLE
// begin enable ;
10343: ENABLE
// wait ( rand ( 0 0$10 , 0 0$30 ) ) ;
10344: LD_INT 350
10346: PPUSH
10347: LD_INT 1050
10349: PPUSH
10350: CALL_OW 12
10354: PPUSH
10355: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , cratesSpawnArea , true ) ;
10359: LD_INT 2
10361: PPUSH
10362: LD_INT 5
10364: PPUSH
10365: CALL_OW 12
10369: PPUSH
10370: LD_INT 6
10372: PPUSH
10373: LD_INT 1
10375: PPUSH
10376: CALL_OW 55
// end ;
10380: END
// every 1 1$25 trigger GetResourceArea ( ruCratesSpawnArea , mat_cans ) < 5 do
10381: LD_INT 7
10383: PPUSH
10384: LD_INT 1
10386: PPUSH
10387: CALL_OW 287
10391: PUSH
10392: LD_INT 5
10394: LESS
10395: IFFALSE 10422
10397: GO 10399
10399: DISABLE
// begin enable ;
10400: ENABLE
// CreateCratesArea ( rand ( 2 , 5 ) , ruCratesSpawnArea , true ) ;
10401: LD_INT 2
10403: PPUSH
10404: LD_INT 5
10406: PPUSH
10407: CALL_OW 12
10411: PPUSH
10412: LD_INT 7
10414: PPUSH
10415: LD_INT 1
10417: PPUSH
10418: CALL_OW 55
// end ; end_of_file
10422: END
// every 0 0$01 do
10423: GO 10425
10425: DISABLE
// begin enable ;
10426: ENABLE
// display_strings := [ #tick , tick ] ;
10427: LD_ADDR_OWVAR 47
10431: PUSH
10432: LD_STRING #tick
10434: PUSH
10435: LD_OWVAR 1
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: ST_TO_ADDR
// end ; end_of_file
10444: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
10445: LD_INT 0
10447: PPUSH
10448: PPUSH
10449: PPUSH
10450: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
10451: LD_VAR 0 1
10455: PPUSH
10456: CALL_OW 264
10460: PUSH
10461: LD_EXP 100
10465: EQUAL
10466: IFFALSE 10538
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10468: LD_INT 68
10470: PPUSH
10471: LD_VAR 0 1
10475: PPUSH
10476: CALL_OW 255
10480: PPUSH
10481: CALL_OW 321
10485: PUSH
10486: LD_INT 2
10488: EQUAL
10489: IFFALSE 10501
// eff := 70 else
10491: LD_ADDR_VAR 0 4
10495: PUSH
10496: LD_INT 70
10498: ST_TO_ADDR
10499: GO 10509
// eff := 30 ;
10501: LD_ADDR_VAR 0 4
10505: PUSH
10506: LD_INT 30
10508: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
10509: LD_VAR 0 1
10513: PPUSH
10514: CALL_OW 250
10518: PPUSH
10519: LD_VAR 0 1
10523: PPUSH
10524: CALL_OW 251
10528: PPUSH
10529: LD_VAR 0 4
10533: PPUSH
10534: CALL_OW 495
// end ; end ;
10538: LD_VAR 0 2
10542: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
10543: LD_INT 0
10545: PPUSH
// end ;
10546: LD_VAR 0 4
10550: RET
// export function SOS_Command ( cmd ) ; begin
10551: LD_INT 0
10553: PPUSH
// end ;
10554: LD_VAR 0 2
10558: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
10559: LD_INT 0
10561: PPUSH
// end ;
10562: LD_VAR 0 6
10566: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
10567: LD_INT 0
10569: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
10570: LD_VAR 0 1
10574: PUSH
10575: LD_INT 250
10577: EQUAL
10578: PUSH
10579: LD_VAR 0 2
10583: PPUSH
10584: CALL_OW 264
10588: PUSH
10589: LD_EXP 103
10593: EQUAL
10594: AND
10595: IFFALSE 10616
// MinerPlaceMine ( unit , x , y ) ;
10597: LD_VAR 0 2
10601: PPUSH
10602: LD_VAR 0 4
10606: PPUSH
10607: LD_VAR 0 5
10611: PPUSH
10612: CALL 12965 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
10616: LD_VAR 0 1
10620: PUSH
10621: LD_INT 251
10623: EQUAL
10624: PUSH
10625: LD_VAR 0 2
10629: PPUSH
10630: CALL_OW 264
10634: PUSH
10635: LD_EXP 103
10639: EQUAL
10640: AND
10641: IFFALSE 10662
// MinerDetonateMine ( unit , x , y ) ;
10643: LD_VAR 0 2
10647: PPUSH
10648: LD_VAR 0 4
10652: PPUSH
10653: LD_VAR 0 5
10657: PPUSH
10658: CALL 13242 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
10662: LD_VAR 0 1
10666: PUSH
10667: LD_INT 252
10669: EQUAL
10670: PUSH
10671: LD_VAR 0 2
10675: PPUSH
10676: CALL_OW 264
10680: PUSH
10681: LD_EXP 103
10685: EQUAL
10686: AND
10687: IFFALSE 10708
// MinerCreateMinefield ( unit , x , y ) ;
10689: LD_VAR 0 2
10693: PPUSH
10694: LD_VAR 0 4
10698: PPUSH
10699: LD_VAR 0 5
10703: PPUSH
10704: CALL 13659 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
10708: LD_VAR 0 1
10712: PUSH
10713: LD_INT 253
10715: EQUAL
10716: PUSH
10717: LD_VAR 0 2
10721: PPUSH
10722: CALL_OW 257
10726: PUSH
10727: LD_INT 5
10729: EQUAL
10730: AND
10731: IFFALSE 10752
// ComBinocular ( unit , x , y ) ;
10733: LD_VAR 0 2
10737: PPUSH
10738: LD_VAR 0 4
10742: PPUSH
10743: LD_VAR 0 5
10747: PPUSH
10748: CALL 14030 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
10752: LD_VAR 0 1
10756: PUSH
10757: LD_INT 254
10759: EQUAL
10760: PUSH
10761: LD_VAR 0 2
10765: PPUSH
10766: CALL_OW 264
10770: PUSH
10771: LD_EXP 98
10775: EQUAL
10776: AND
10777: PUSH
10778: LD_VAR 0 3
10782: PPUSH
10783: CALL_OW 263
10787: PUSH
10788: LD_INT 3
10790: EQUAL
10791: AND
10792: IFFALSE 10808
// HackDestroyVehicle ( unit , selectedUnit ) ;
10794: LD_VAR 0 2
10798: PPUSH
10799: LD_VAR 0 3
10803: PPUSH
10804: CALL 12325 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
10808: LD_VAR 0 1
10812: PUSH
10813: LD_INT 255
10815: EQUAL
10816: PUSH
10817: LD_VAR 0 2
10821: PPUSH
10822: CALL_OW 264
10826: PUSH
10827: LD_INT 14
10829: PUSH
10830: LD_INT 53
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: IN
10837: AND
10838: PUSH
10839: LD_VAR 0 4
10843: PPUSH
10844: LD_VAR 0 5
10848: PPUSH
10849: CALL_OW 488
10853: AND
10854: IFFALSE 10878
// CutTreeXYR ( unit , x , y , 12 ) ;
10856: LD_VAR 0 2
10860: PPUSH
10861: LD_VAR 0 4
10865: PPUSH
10866: LD_VAR 0 5
10870: PPUSH
10871: LD_INT 12
10873: PPUSH
10874: CALL 10891 0 4
// end ;
10878: LD_VAR 0 6
10882: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
10883: LD_INT 0
10885: PPUSH
// end ;
10886: LD_VAR 0 4
10890: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
10891: LD_INT 0
10893: PPUSH
10894: PPUSH
10895: PPUSH
10896: PPUSH
10897: PPUSH
10898: PPUSH
10899: PPUSH
10900: PPUSH
10901: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
10902: LD_VAR 0 1
10906: NOT
10907: PUSH
10908: LD_VAR 0 2
10912: PPUSH
10913: LD_VAR 0 3
10917: PPUSH
10918: CALL_OW 488
10922: NOT
10923: OR
10924: PUSH
10925: LD_VAR 0 4
10929: NOT
10930: OR
10931: IFFALSE 10935
// exit ;
10933: GO 11275
// list := [ ] ;
10935: LD_ADDR_VAR 0 13
10939: PUSH
10940: EMPTY
10941: ST_TO_ADDR
// if x - r < 0 then
10942: LD_VAR 0 2
10946: PUSH
10947: LD_VAR 0 4
10951: MINUS
10952: PUSH
10953: LD_INT 0
10955: LESS
10956: IFFALSE 10968
// min_x := 0 else
10958: LD_ADDR_VAR 0 7
10962: PUSH
10963: LD_INT 0
10965: ST_TO_ADDR
10966: GO 10984
// min_x := x - r ;
10968: LD_ADDR_VAR 0 7
10972: PUSH
10973: LD_VAR 0 2
10977: PUSH
10978: LD_VAR 0 4
10982: MINUS
10983: ST_TO_ADDR
// if y - r < 0 then
10984: LD_VAR 0 3
10988: PUSH
10989: LD_VAR 0 4
10993: MINUS
10994: PUSH
10995: LD_INT 0
10997: LESS
10998: IFFALSE 11010
// min_y := 0 else
11000: LD_ADDR_VAR 0 8
11004: PUSH
11005: LD_INT 0
11007: ST_TO_ADDR
11008: GO 11026
// min_y := y - r ;
11010: LD_ADDR_VAR 0 8
11014: PUSH
11015: LD_VAR 0 3
11019: PUSH
11020: LD_VAR 0 4
11024: MINUS
11025: ST_TO_ADDR
// max_x := x + r ;
11026: LD_ADDR_VAR 0 9
11030: PUSH
11031: LD_VAR 0 2
11035: PUSH
11036: LD_VAR 0 4
11040: PLUS
11041: ST_TO_ADDR
// max_y := y + r ;
11042: LD_ADDR_VAR 0 10
11046: PUSH
11047: LD_VAR 0 3
11051: PUSH
11052: LD_VAR 0 4
11056: PLUS
11057: ST_TO_ADDR
// for _x = min_x to max_x do
11058: LD_ADDR_VAR 0 11
11062: PUSH
11063: DOUBLE
11064: LD_VAR 0 7
11068: DEC
11069: ST_TO_ADDR
11070: LD_VAR 0 9
11074: PUSH
11075: FOR_TO
11076: IFFALSE 11193
// for _y = min_y to max_y do
11078: LD_ADDR_VAR 0 12
11082: PUSH
11083: DOUBLE
11084: LD_VAR 0 8
11088: DEC
11089: ST_TO_ADDR
11090: LD_VAR 0 10
11094: PUSH
11095: FOR_TO
11096: IFFALSE 11189
// begin if not ValidHex ( _x , _y ) then
11098: LD_VAR 0 11
11102: PPUSH
11103: LD_VAR 0 12
11107: PPUSH
11108: CALL_OW 488
11112: NOT
11113: IFFALSE 11117
// continue ;
11115: GO 11095
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
11117: LD_VAR 0 11
11121: PPUSH
11122: LD_VAR 0 12
11126: PPUSH
11127: CALL_OW 351
11131: PUSH
11132: LD_VAR 0 11
11136: PPUSH
11137: LD_VAR 0 12
11141: PPUSH
11142: CALL_OW 554
11146: AND
11147: IFFALSE 11187
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
11149: LD_ADDR_VAR 0 13
11153: PUSH
11154: LD_VAR 0 13
11158: PPUSH
11159: LD_VAR 0 13
11163: PUSH
11164: LD_INT 1
11166: PLUS
11167: PPUSH
11168: LD_VAR 0 11
11172: PUSH
11173: LD_VAR 0 12
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: PPUSH
11182: CALL_OW 2
11186: ST_TO_ADDR
// end ;
11187: GO 11095
11189: POP
11190: POP
11191: GO 11075
11193: POP
11194: POP
// if not list then
11195: LD_VAR 0 13
11199: NOT
11200: IFFALSE 11204
// exit ;
11202: GO 11275
// for i in list do
11204: LD_ADDR_VAR 0 6
11208: PUSH
11209: LD_VAR 0 13
11213: PUSH
11214: FOR_IN
11215: IFFALSE 11273
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
11217: LD_VAR 0 1
11221: PPUSH
11222: LD_STRING M
11224: PUSH
11225: LD_VAR 0 6
11229: PUSH
11230: LD_INT 1
11232: ARRAY
11233: PUSH
11234: LD_VAR 0 6
11238: PUSH
11239: LD_INT 2
11241: ARRAY
11242: PUSH
11243: LD_INT 0
11245: PUSH
11246: LD_INT 0
11248: PUSH
11249: LD_INT 0
11251: PUSH
11252: LD_INT 0
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: PUSH
11264: EMPTY
11265: LIST
11266: PPUSH
11267: CALL_OW 447
11271: GO 11214
11273: POP
11274: POP
// end ;
11275: LD_VAR 0 5
11279: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
11280: LD_EXP 28
11284: NOT
11285: IFFALSE 11335
11287: GO 11289
11289: DISABLE
// begin initHack := true ;
11290: LD_ADDR_EXP 28
11294: PUSH
11295: LD_INT 1
11297: ST_TO_ADDR
// hackTanks := [ ] ;
11298: LD_ADDR_EXP 29
11302: PUSH
11303: EMPTY
11304: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
11305: LD_ADDR_EXP 30
11309: PUSH
11310: EMPTY
11311: ST_TO_ADDR
// hackLimit := 3 ;
11312: LD_ADDR_EXP 31
11316: PUSH
11317: LD_INT 3
11319: ST_TO_ADDR
// hackDist := 12 ;
11320: LD_ADDR_EXP 32
11324: PUSH
11325: LD_INT 12
11327: ST_TO_ADDR
// hackCounter := [ ] ;
11328: LD_ADDR_EXP 33
11332: PUSH
11333: EMPTY
11334: ST_TO_ADDR
// end ;
11335: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
11336: LD_EXP 28
11340: PUSH
11341: LD_INT 34
11343: PUSH
11344: LD_EXP 98
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: PPUSH
11353: CALL_OW 69
11357: AND
11358: IFFALSE 11613
11360: GO 11362
11362: DISABLE
11363: LD_INT 0
11365: PPUSH
11366: PPUSH
// begin enable ;
11367: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
11368: LD_ADDR_VAR 0 1
11372: PUSH
11373: LD_INT 34
11375: PUSH
11376: LD_EXP 98
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PPUSH
11385: CALL_OW 69
11389: PUSH
11390: FOR_IN
11391: IFFALSE 11611
// begin if not i in hackTanks then
11393: LD_VAR 0 1
11397: PUSH
11398: LD_EXP 29
11402: IN
11403: NOT
11404: IFFALSE 11487
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
11406: LD_ADDR_EXP 29
11410: PUSH
11411: LD_EXP 29
11415: PPUSH
11416: LD_EXP 29
11420: PUSH
11421: LD_INT 1
11423: PLUS
11424: PPUSH
11425: LD_VAR 0 1
11429: PPUSH
11430: CALL_OW 1
11434: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
11435: LD_ADDR_EXP 30
11439: PUSH
11440: LD_EXP 30
11444: PPUSH
11445: LD_EXP 30
11449: PUSH
11450: LD_INT 1
11452: PLUS
11453: PPUSH
11454: EMPTY
11455: PPUSH
11456: CALL_OW 1
11460: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
11461: LD_ADDR_EXP 33
11465: PUSH
11466: LD_EXP 33
11470: PPUSH
11471: LD_EXP 33
11475: PUSH
11476: LD_INT 1
11478: PLUS
11479: PPUSH
11480: EMPTY
11481: PPUSH
11482: CALL_OW 1
11486: ST_TO_ADDR
// end ; if not IsOk ( i ) then
11487: LD_VAR 0 1
11491: PPUSH
11492: CALL_OW 302
11496: NOT
11497: IFFALSE 11510
// begin HackUnlinkAll ( i ) ;
11499: LD_VAR 0 1
11503: PPUSH
11504: CALL 11616 0 1
// continue ;
11508: GO 11390
// end ; HackCheckCapturedStatus ( i ) ;
11510: LD_VAR 0 1
11514: PPUSH
11515: CALL 12059 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
11519: LD_ADDR_VAR 0 2
11523: PUSH
11524: LD_INT 81
11526: PUSH
11527: LD_VAR 0 1
11531: PPUSH
11532: CALL_OW 255
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: PUSH
11541: LD_INT 33
11543: PUSH
11544: LD_INT 3
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: PUSH
11551: LD_INT 91
11553: PUSH
11554: LD_VAR 0 1
11558: PUSH
11559: LD_EXP 32
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 50
11571: PUSH
11572: EMPTY
11573: LIST
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: PPUSH
11581: CALL_OW 69
11585: ST_TO_ADDR
// if not tmp then
11586: LD_VAR 0 2
11590: NOT
11591: IFFALSE 11595
// continue ;
11593: GO 11390
// HackLink ( i , tmp ) ;
11595: LD_VAR 0 1
11599: PPUSH
11600: LD_VAR 0 2
11604: PPUSH
11605: CALL 11752 0 2
// end ;
11609: GO 11390
11611: POP
11612: POP
// end ;
11613: PPOPN 2
11615: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
11616: LD_INT 0
11618: PPUSH
11619: PPUSH
11620: PPUSH
// if not hack in hackTanks then
11621: LD_VAR 0 1
11625: PUSH
11626: LD_EXP 29
11630: IN
11631: NOT
11632: IFFALSE 11636
// exit ;
11634: GO 11747
// index := GetElementIndex ( hackTanks , hack ) ;
11636: LD_ADDR_VAR 0 4
11640: PUSH
11641: LD_EXP 29
11645: PPUSH
11646: LD_VAR 0 1
11650: PPUSH
11651: CALL 33006 0 2
11655: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
11656: LD_EXP 30
11660: PUSH
11661: LD_VAR 0 4
11665: ARRAY
11666: IFFALSE 11747
// begin for i in hackTanksCaptured [ index ] do
11668: LD_ADDR_VAR 0 3
11672: PUSH
11673: LD_EXP 30
11677: PUSH
11678: LD_VAR 0 4
11682: ARRAY
11683: PUSH
11684: FOR_IN
11685: IFFALSE 11711
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
11687: LD_VAR 0 3
11691: PUSH
11692: LD_INT 1
11694: ARRAY
11695: PPUSH
11696: LD_VAR 0 3
11700: PUSH
11701: LD_INT 2
11703: ARRAY
11704: PPUSH
11705: CALL_OW 235
11709: GO 11684
11711: POP
11712: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
11713: LD_ADDR_EXP 30
11717: PUSH
11718: LD_EXP 30
11722: PPUSH
11723: LD_VAR 0 4
11727: PPUSH
11728: EMPTY
11729: PPUSH
11730: CALL_OW 1
11734: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
11735: LD_VAR 0 1
11739: PPUSH
11740: LD_INT 0
11742: PPUSH
11743: CALL_OW 505
// end ; end ;
11747: LD_VAR 0 2
11751: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
11752: LD_INT 0
11754: PPUSH
11755: PPUSH
11756: PPUSH
// if not hack in hackTanks or not vehicles then
11757: LD_VAR 0 1
11761: PUSH
11762: LD_EXP 29
11766: IN
11767: NOT
11768: PUSH
11769: LD_VAR 0 2
11773: NOT
11774: OR
11775: IFFALSE 11779
// exit ;
11777: GO 12054
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
11779: LD_ADDR_VAR 0 2
11783: PUSH
11784: LD_VAR 0 1
11788: PPUSH
11789: LD_VAR 0 2
11793: PPUSH
11794: LD_INT 1
11796: PPUSH
11797: LD_INT 1
11799: PPUSH
11800: CALL 33656 0 4
11804: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
11805: LD_ADDR_VAR 0 5
11809: PUSH
11810: LD_EXP 29
11814: PPUSH
11815: LD_VAR 0 1
11819: PPUSH
11820: CALL 33006 0 2
11824: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
11825: LD_EXP 30
11829: PUSH
11830: LD_VAR 0 5
11834: ARRAY
11835: PUSH
11836: LD_EXP 31
11840: LESS
11841: IFFALSE 12030
// begin for i := 1 to vehicles do
11843: LD_ADDR_VAR 0 4
11847: PUSH
11848: DOUBLE
11849: LD_INT 1
11851: DEC
11852: ST_TO_ADDR
11853: LD_VAR 0 2
11857: PUSH
11858: FOR_TO
11859: IFFALSE 12028
// begin if hackTanksCaptured [ index ] = hackLimit then
11861: LD_EXP 30
11865: PUSH
11866: LD_VAR 0 5
11870: ARRAY
11871: PUSH
11872: LD_EXP 31
11876: EQUAL
11877: IFFALSE 11881
// break ;
11879: GO 12028
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
11881: LD_ADDR_EXP 33
11885: PUSH
11886: LD_EXP 33
11890: PPUSH
11891: LD_VAR 0 5
11895: PPUSH
11896: LD_EXP 33
11900: PUSH
11901: LD_VAR 0 5
11905: ARRAY
11906: PUSH
11907: LD_INT 1
11909: PLUS
11910: PPUSH
11911: CALL_OW 1
11915: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
11916: LD_ADDR_EXP 30
11920: PUSH
11921: LD_EXP 30
11925: PPUSH
11926: LD_VAR 0 5
11930: PUSH
11931: LD_EXP 30
11935: PUSH
11936: LD_VAR 0 5
11940: ARRAY
11941: PUSH
11942: LD_INT 1
11944: PLUS
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: PPUSH
11950: LD_VAR 0 2
11954: PUSH
11955: LD_VAR 0 4
11959: ARRAY
11960: PUSH
11961: LD_VAR 0 2
11965: PUSH
11966: LD_VAR 0 4
11970: ARRAY
11971: PPUSH
11972: CALL_OW 255
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: PPUSH
11981: CALL 33221 0 3
11985: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
11986: LD_VAR 0 2
11990: PUSH
11991: LD_VAR 0 4
11995: ARRAY
11996: PPUSH
11997: LD_VAR 0 1
12001: PPUSH
12002: CALL_OW 255
12006: PPUSH
12007: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
12011: LD_VAR 0 2
12015: PUSH
12016: LD_VAR 0 4
12020: ARRAY
12021: PPUSH
12022: CALL_OW 141
// end ;
12026: GO 11858
12028: POP
12029: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12030: LD_VAR 0 1
12034: PPUSH
12035: LD_EXP 30
12039: PUSH
12040: LD_VAR 0 5
12044: ARRAY
12045: PUSH
12046: LD_INT 0
12048: PLUS
12049: PPUSH
12050: CALL_OW 505
// end ;
12054: LD_VAR 0 3
12058: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
12059: LD_INT 0
12061: PPUSH
12062: PPUSH
12063: PPUSH
12064: PPUSH
// if not hack in hackTanks then
12065: LD_VAR 0 1
12069: PUSH
12070: LD_EXP 29
12074: IN
12075: NOT
12076: IFFALSE 12080
// exit ;
12078: GO 12320
// index := GetElementIndex ( hackTanks , hack ) ;
12080: LD_ADDR_VAR 0 4
12084: PUSH
12085: LD_EXP 29
12089: PPUSH
12090: LD_VAR 0 1
12094: PPUSH
12095: CALL 33006 0 2
12099: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
12100: LD_ADDR_VAR 0 3
12104: PUSH
12105: DOUBLE
12106: LD_EXP 30
12110: PUSH
12111: LD_VAR 0 4
12115: ARRAY
12116: INC
12117: ST_TO_ADDR
12118: LD_INT 1
12120: PUSH
12121: FOR_DOWNTO
12122: IFFALSE 12294
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
12124: LD_ADDR_VAR 0 5
12128: PUSH
12129: LD_EXP 30
12133: PUSH
12134: LD_VAR 0 4
12138: ARRAY
12139: PUSH
12140: LD_VAR 0 3
12144: ARRAY
12145: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
12146: LD_VAR 0 5
12150: PUSH
12151: LD_INT 1
12153: ARRAY
12154: PPUSH
12155: CALL_OW 302
12159: NOT
12160: PUSH
12161: LD_VAR 0 5
12165: PUSH
12166: LD_INT 1
12168: ARRAY
12169: PPUSH
12170: CALL_OW 255
12174: PUSH
12175: LD_VAR 0 1
12179: PPUSH
12180: CALL_OW 255
12184: NONEQUAL
12185: OR
12186: IFFALSE 12292
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
12188: LD_VAR 0 5
12192: PUSH
12193: LD_INT 1
12195: ARRAY
12196: PPUSH
12197: CALL_OW 305
12201: PUSH
12202: LD_VAR 0 5
12206: PUSH
12207: LD_INT 1
12209: ARRAY
12210: PPUSH
12211: CALL_OW 255
12215: PUSH
12216: LD_VAR 0 1
12220: PPUSH
12221: CALL_OW 255
12225: EQUAL
12226: AND
12227: IFFALSE 12251
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
12229: LD_VAR 0 5
12233: PUSH
12234: LD_INT 1
12236: ARRAY
12237: PPUSH
12238: LD_VAR 0 5
12242: PUSH
12243: LD_INT 2
12245: ARRAY
12246: PPUSH
12247: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
12251: LD_ADDR_EXP 30
12255: PUSH
12256: LD_EXP 30
12260: PPUSH
12261: LD_VAR 0 4
12265: PPUSH
12266: LD_EXP 30
12270: PUSH
12271: LD_VAR 0 4
12275: ARRAY
12276: PPUSH
12277: LD_VAR 0 3
12281: PPUSH
12282: CALL_OW 3
12286: PPUSH
12287: CALL_OW 1
12291: ST_TO_ADDR
// end ; end ;
12292: GO 12121
12294: POP
12295: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12296: LD_VAR 0 1
12300: PPUSH
12301: LD_EXP 30
12305: PUSH
12306: LD_VAR 0 4
12310: ARRAY
12311: PUSH
12312: LD_INT 0
12314: PLUS
12315: PPUSH
12316: CALL_OW 505
// end ;
12320: LD_VAR 0 2
12324: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
12325: LD_INT 0
12327: PPUSH
12328: PPUSH
12329: PPUSH
12330: PPUSH
// if not hack in hackTanks then
12331: LD_VAR 0 1
12335: PUSH
12336: LD_EXP 29
12340: IN
12341: NOT
12342: IFFALSE 12346
// exit ;
12344: GO 12431
// index := GetElementIndex ( hackTanks , hack ) ;
12346: LD_ADDR_VAR 0 5
12350: PUSH
12351: LD_EXP 29
12355: PPUSH
12356: LD_VAR 0 1
12360: PPUSH
12361: CALL 33006 0 2
12365: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
12366: LD_ADDR_VAR 0 4
12370: PUSH
12371: DOUBLE
12372: LD_INT 1
12374: DEC
12375: ST_TO_ADDR
12376: LD_EXP 30
12380: PUSH
12381: LD_VAR 0 5
12385: ARRAY
12386: PUSH
12387: FOR_TO
12388: IFFALSE 12429
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
12390: LD_EXP 30
12394: PUSH
12395: LD_VAR 0 5
12399: ARRAY
12400: PUSH
12401: LD_VAR 0 4
12405: ARRAY
12406: PUSH
12407: LD_INT 1
12409: ARRAY
12410: PUSH
12411: LD_VAR 0 2
12415: EQUAL
12416: IFFALSE 12427
// KillUnit ( vehicle ) ;
12418: LD_VAR 0 2
12422: PPUSH
12423: CALL_OW 66
12427: GO 12387
12429: POP
12430: POP
// end ;
12431: LD_VAR 0 3
12435: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
12436: LD_EXP 34
12440: NOT
12441: IFFALSE 12476
12443: GO 12445
12445: DISABLE
// begin initMiner := true ;
12446: LD_ADDR_EXP 34
12450: PUSH
12451: LD_INT 1
12453: ST_TO_ADDR
// minersList := [ ] ;
12454: LD_ADDR_EXP 35
12458: PUSH
12459: EMPTY
12460: ST_TO_ADDR
// minerMinesList := [ ] ;
12461: LD_ADDR_EXP 36
12465: PUSH
12466: EMPTY
12467: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
12468: LD_ADDR_EXP 37
12472: PUSH
12473: LD_INT 5
12475: ST_TO_ADDR
// end ;
12476: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
12477: LD_EXP 34
12481: PUSH
12482: LD_INT 34
12484: PUSH
12485: LD_EXP 103
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PPUSH
12494: CALL_OW 69
12498: AND
12499: IFFALSE 12962
12501: GO 12503
12503: DISABLE
12504: LD_INT 0
12506: PPUSH
12507: PPUSH
12508: PPUSH
12509: PPUSH
// begin enable ;
12510: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
12511: LD_ADDR_VAR 0 1
12515: PUSH
12516: LD_INT 34
12518: PUSH
12519: LD_EXP 103
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: PPUSH
12528: CALL_OW 69
12532: PUSH
12533: FOR_IN
12534: IFFALSE 12606
// begin if not i in minersList then
12536: LD_VAR 0 1
12540: PUSH
12541: LD_EXP 35
12545: IN
12546: NOT
12547: IFFALSE 12604
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
12549: LD_ADDR_EXP 35
12553: PUSH
12554: LD_EXP 35
12558: PPUSH
12559: LD_EXP 35
12563: PUSH
12564: LD_INT 1
12566: PLUS
12567: PPUSH
12568: LD_VAR 0 1
12572: PPUSH
12573: CALL_OW 1
12577: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
12578: LD_ADDR_EXP 36
12582: PUSH
12583: LD_EXP 36
12587: PPUSH
12588: LD_EXP 36
12592: PUSH
12593: LD_INT 1
12595: PLUS
12596: PPUSH
12597: EMPTY
12598: PPUSH
12599: CALL_OW 1
12603: ST_TO_ADDR
// end end ;
12604: GO 12533
12606: POP
12607: POP
// for i := minerMinesList downto 1 do
12608: LD_ADDR_VAR 0 1
12612: PUSH
12613: DOUBLE
12614: LD_EXP 36
12618: INC
12619: ST_TO_ADDR
12620: LD_INT 1
12622: PUSH
12623: FOR_DOWNTO
12624: IFFALSE 12960
// begin if IsLive ( minersList [ i ] ) then
12626: LD_EXP 35
12630: PUSH
12631: LD_VAR 0 1
12635: ARRAY
12636: PPUSH
12637: CALL_OW 300
12641: IFFALSE 12669
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
12643: LD_EXP 35
12647: PUSH
12648: LD_VAR 0 1
12652: ARRAY
12653: PPUSH
12654: LD_EXP 36
12658: PUSH
12659: LD_VAR 0 1
12663: ARRAY
12664: PPUSH
12665: CALL_OW 505
// if not minerMinesList [ i ] then
12669: LD_EXP 36
12673: PUSH
12674: LD_VAR 0 1
12678: ARRAY
12679: NOT
12680: IFFALSE 12684
// continue ;
12682: GO 12623
// for j := minerMinesList [ i ] downto 1 do
12684: LD_ADDR_VAR 0 2
12688: PUSH
12689: DOUBLE
12690: LD_EXP 36
12694: PUSH
12695: LD_VAR 0 1
12699: ARRAY
12700: INC
12701: ST_TO_ADDR
12702: LD_INT 1
12704: PUSH
12705: FOR_DOWNTO
12706: IFFALSE 12956
// begin side := GetSide ( minersList [ i ] ) ;
12708: LD_ADDR_VAR 0 3
12712: PUSH
12713: LD_EXP 35
12717: PUSH
12718: LD_VAR 0 1
12722: ARRAY
12723: PPUSH
12724: CALL_OW 255
12728: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
12729: LD_ADDR_VAR 0 4
12733: PUSH
12734: LD_EXP 36
12738: PUSH
12739: LD_VAR 0 1
12743: ARRAY
12744: PUSH
12745: LD_VAR 0 2
12749: ARRAY
12750: PUSH
12751: LD_INT 1
12753: ARRAY
12754: PPUSH
12755: LD_EXP 36
12759: PUSH
12760: LD_VAR 0 1
12764: ARRAY
12765: PUSH
12766: LD_VAR 0 2
12770: ARRAY
12771: PUSH
12772: LD_INT 2
12774: ARRAY
12775: PPUSH
12776: CALL_OW 428
12780: ST_TO_ADDR
// if not tmp then
12781: LD_VAR 0 4
12785: NOT
12786: IFFALSE 12790
// continue ;
12788: GO 12705
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
12790: LD_VAR 0 4
12794: PUSH
12795: LD_INT 81
12797: PUSH
12798: LD_VAR 0 3
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: PPUSH
12807: CALL_OW 69
12811: IN
12812: PUSH
12813: LD_EXP 36
12817: PUSH
12818: LD_VAR 0 1
12822: ARRAY
12823: PUSH
12824: LD_VAR 0 2
12828: ARRAY
12829: PUSH
12830: LD_INT 1
12832: ARRAY
12833: PPUSH
12834: LD_EXP 36
12838: PUSH
12839: LD_VAR 0 1
12843: ARRAY
12844: PUSH
12845: LD_VAR 0 2
12849: ARRAY
12850: PUSH
12851: LD_INT 2
12853: ARRAY
12854: PPUSH
12855: CALL_OW 458
12859: AND
12860: IFFALSE 12954
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
12862: LD_EXP 36
12866: PUSH
12867: LD_VAR 0 1
12871: ARRAY
12872: PUSH
12873: LD_VAR 0 2
12877: ARRAY
12878: PUSH
12879: LD_INT 1
12881: ARRAY
12882: PPUSH
12883: LD_EXP 36
12887: PUSH
12888: LD_VAR 0 1
12892: ARRAY
12893: PUSH
12894: LD_VAR 0 2
12898: ARRAY
12899: PUSH
12900: LD_INT 2
12902: ARRAY
12903: PPUSH
12904: LD_VAR 0 3
12908: PPUSH
12909: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
12913: LD_ADDR_EXP 36
12917: PUSH
12918: LD_EXP 36
12922: PPUSH
12923: LD_VAR 0 1
12927: PPUSH
12928: LD_EXP 36
12932: PUSH
12933: LD_VAR 0 1
12937: ARRAY
12938: PPUSH
12939: LD_VAR 0 2
12943: PPUSH
12944: CALL_OW 3
12948: PPUSH
12949: CALL_OW 1
12953: ST_TO_ADDR
// end ; end ;
12954: GO 12705
12956: POP
12957: POP
// end ;
12958: GO 12623
12960: POP
12961: POP
// end ;
12962: PPOPN 4
12964: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
12965: LD_INT 0
12967: PPUSH
12968: PPUSH
// result := false ;
12969: LD_ADDR_VAR 0 4
12973: PUSH
12974: LD_INT 0
12976: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
12977: LD_VAR 0 1
12981: PPUSH
12982: CALL_OW 264
12986: PUSH
12987: LD_EXP 103
12991: EQUAL
12992: NOT
12993: IFFALSE 12997
// exit ;
12995: GO 13237
// index := GetElementIndex ( minersList , unit ) ;
12997: LD_ADDR_VAR 0 5
13001: PUSH
13002: LD_EXP 35
13006: PPUSH
13007: LD_VAR 0 1
13011: PPUSH
13012: CALL 33006 0 2
13016: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
13017: LD_EXP 36
13021: PUSH
13022: LD_VAR 0 5
13026: ARRAY
13027: PUSH
13028: LD_EXP 37
13032: GREATEREQUAL
13033: IFFALSE 13037
// exit ;
13035: GO 13237
// ComMoveXY ( unit , x , y ) ;
13037: LD_VAR 0 1
13041: PPUSH
13042: LD_VAR 0 2
13046: PPUSH
13047: LD_VAR 0 3
13051: PPUSH
13052: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13056: LD_INT 35
13058: PPUSH
13059: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
13063: LD_VAR 0 1
13067: PPUSH
13068: LD_VAR 0 2
13072: PPUSH
13073: LD_VAR 0 3
13077: PPUSH
13078: CALL 63778 0 3
13082: NOT
13083: PUSH
13084: LD_VAR 0 1
13088: PPUSH
13089: CALL_OW 314
13093: AND
13094: IFFALSE 13098
// exit ;
13096: GO 13237
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
13098: LD_VAR 0 2
13102: PPUSH
13103: LD_VAR 0 3
13107: PPUSH
13108: CALL_OW 428
13112: PUSH
13113: LD_VAR 0 1
13117: EQUAL
13118: PUSH
13119: LD_VAR 0 1
13123: PPUSH
13124: CALL_OW 314
13128: NOT
13129: AND
13130: IFFALSE 13056
// PlaySoundXY ( x , y , PlantMine ) ;
13132: LD_VAR 0 2
13136: PPUSH
13137: LD_VAR 0 3
13141: PPUSH
13142: LD_STRING PlantMine
13144: PPUSH
13145: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
13149: LD_VAR 0 2
13153: PPUSH
13154: LD_VAR 0 3
13158: PPUSH
13159: LD_VAR 0 1
13163: PPUSH
13164: CALL_OW 255
13168: PPUSH
13169: LD_INT 0
13171: PPUSH
13172: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
13176: LD_ADDR_EXP 36
13180: PUSH
13181: LD_EXP 36
13185: PPUSH
13186: LD_VAR 0 5
13190: PUSH
13191: LD_EXP 36
13195: PUSH
13196: LD_VAR 0 5
13200: ARRAY
13201: PUSH
13202: LD_INT 1
13204: PLUS
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: PPUSH
13210: LD_VAR 0 2
13214: PUSH
13215: LD_VAR 0 3
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: PPUSH
13224: CALL 33221 0 3
13228: ST_TO_ADDR
// result := true ;
13229: LD_ADDR_VAR 0 4
13233: PUSH
13234: LD_INT 1
13236: ST_TO_ADDR
// end ;
13237: LD_VAR 0 4
13241: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
13242: LD_INT 0
13244: PPUSH
13245: PPUSH
13246: PPUSH
// if not unit in minersList then
13247: LD_VAR 0 1
13251: PUSH
13252: LD_EXP 35
13256: IN
13257: NOT
13258: IFFALSE 13262
// exit ;
13260: GO 13654
// index := GetElementIndex ( minersList , unit ) ;
13262: LD_ADDR_VAR 0 6
13266: PUSH
13267: LD_EXP 35
13271: PPUSH
13272: LD_VAR 0 1
13276: PPUSH
13277: CALL 33006 0 2
13281: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
13282: LD_ADDR_VAR 0 5
13286: PUSH
13287: DOUBLE
13288: LD_EXP 36
13292: PUSH
13293: LD_VAR 0 6
13297: ARRAY
13298: INC
13299: ST_TO_ADDR
13300: LD_INT 1
13302: PUSH
13303: FOR_DOWNTO
13304: IFFALSE 13465
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
13306: LD_EXP 36
13310: PUSH
13311: LD_VAR 0 6
13315: ARRAY
13316: PUSH
13317: LD_VAR 0 5
13321: ARRAY
13322: PUSH
13323: LD_INT 1
13325: ARRAY
13326: PUSH
13327: LD_VAR 0 2
13331: EQUAL
13332: PUSH
13333: LD_EXP 36
13337: PUSH
13338: LD_VAR 0 6
13342: ARRAY
13343: PUSH
13344: LD_VAR 0 5
13348: ARRAY
13349: PUSH
13350: LD_INT 2
13352: ARRAY
13353: PUSH
13354: LD_VAR 0 3
13358: EQUAL
13359: AND
13360: IFFALSE 13463
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
13362: LD_EXP 36
13366: PUSH
13367: LD_VAR 0 6
13371: ARRAY
13372: PUSH
13373: LD_VAR 0 5
13377: ARRAY
13378: PUSH
13379: LD_INT 1
13381: ARRAY
13382: PPUSH
13383: LD_EXP 36
13387: PUSH
13388: LD_VAR 0 6
13392: ARRAY
13393: PUSH
13394: LD_VAR 0 5
13398: ARRAY
13399: PUSH
13400: LD_INT 2
13402: ARRAY
13403: PPUSH
13404: LD_VAR 0 1
13408: PPUSH
13409: CALL_OW 255
13413: PPUSH
13414: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
13418: LD_ADDR_EXP 36
13422: PUSH
13423: LD_EXP 36
13427: PPUSH
13428: LD_VAR 0 6
13432: PPUSH
13433: LD_EXP 36
13437: PUSH
13438: LD_VAR 0 6
13442: ARRAY
13443: PPUSH
13444: LD_VAR 0 5
13448: PPUSH
13449: CALL_OW 3
13453: PPUSH
13454: CALL_OW 1
13458: ST_TO_ADDR
// exit ;
13459: POP
13460: POP
13461: GO 13654
// end ; end ;
13463: GO 13303
13465: POP
13466: POP
// for i := minerMinesList [ index ] downto 1 do
13467: LD_ADDR_VAR 0 5
13471: PUSH
13472: DOUBLE
13473: LD_EXP 36
13477: PUSH
13478: LD_VAR 0 6
13482: ARRAY
13483: INC
13484: ST_TO_ADDR
13485: LD_INT 1
13487: PUSH
13488: FOR_DOWNTO
13489: IFFALSE 13652
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
13491: LD_EXP 36
13495: PUSH
13496: LD_VAR 0 6
13500: ARRAY
13501: PUSH
13502: LD_VAR 0 5
13506: ARRAY
13507: PUSH
13508: LD_INT 1
13510: ARRAY
13511: PPUSH
13512: LD_EXP 36
13516: PUSH
13517: LD_VAR 0 6
13521: ARRAY
13522: PUSH
13523: LD_VAR 0 5
13527: ARRAY
13528: PUSH
13529: LD_INT 2
13531: ARRAY
13532: PPUSH
13533: LD_VAR 0 2
13537: PPUSH
13538: LD_VAR 0 3
13542: PPUSH
13543: CALL_OW 298
13547: PUSH
13548: LD_INT 6
13550: LESS
13551: IFFALSE 13650
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
13553: LD_EXP 36
13557: PUSH
13558: LD_VAR 0 6
13562: ARRAY
13563: PUSH
13564: LD_VAR 0 5
13568: ARRAY
13569: PUSH
13570: LD_INT 1
13572: ARRAY
13573: PPUSH
13574: LD_EXP 36
13578: PUSH
13579: LD_VAR 0 6
13583: ARRAY
13584: PUSH
13585: LD_VAR 0 5
13589: ARRAY
13590: PUSH
13591: LD_INT 2
13593: ARRAY
13594: PPUSH
13595: LD_VAR 0 1
13599: PPUSH
13600: CALL_OW 255
13604: PPUSH
13605: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
13609: LD_ADDR_EXP 36
13613: PUSH
13614: LD_EXP 36
13618: PPUSH
13619: LD_VAR 0 6
13623: PPUSH
13624: LD_EXP 36
13628: PUSH
13629: LD_VAR 0 6
13633: ARRAY
13634: PPUSH
13635: LD_VAR 0 5
13639: PPUSH
13640: CALL_OW 3
13644: PPUSH
13645: CALL_OW 1
13649: ST_TO_ADDR
// end ; end ;
13650: GO 13488
13652: POP
13653: POP
// end ;
13654: LD_VAR 0 4
13658: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
13659: LD_INT 0
13661: PPUSH
13662: PPUSH
13663: PPUSH
13664: PPUSH
13665: PPUSH
13666: PPUSH
13667: PPUSH
13668: PPUSH
13669: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
13670: LD_VAR 0 1
13674: PPUSH
13675: CALL_OW 264
13679: PUSH
13680: LD_EXP 103
13684: EQUAL
13685: NOT
13686: PUSH
13687: LD_VAR 0 1
13691: PUSH
13692: LD_EXP 35
13696: IN
13697: NOT
13698: OR
13699: IFFALSE 13703
// exit ;
13701: GO 14025
// index := GetElementIndex ( minersList , unit ) ;
13703: LD_ADDR_VAR 0 6
13707: PUSH
13708: LD_EXP 35
13712: PPUSH
13713: LD_VAR 0 1
13717: PPUSH
13718: CALL 33006 0 2
13722: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
13723: LD_ADDR_VAR 0 8
13727: PUSH
13728: LD_EXP 37
13732: PUSH
13733: LD_EXP 36
13737: PUSH
13738: LD_VAR 0 6
13742: ARRAY
13743: MINUS
13744: ST_TO_ADDR
// if not minesFreeAmount then
13745: LD_VAR 0 8
13749: NOT
13750: IFFALSE 13754
// exit ;
13752: GO 14025
// tmp := [ ] ;
13754: LD_ADDR_VAR 0 7
13758: PUSH
13759: EMPTY
13760: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
13761: LD_ADDR_VAR 0 5
13765: PUSH
13766: DOUBLE
13767: LD_INT 1
13769: DEC
13770: ST_TO_ADDR
13771: LD_VAR 0 8
13775: PUSH
13776: FOR_TO
13777: IFFALSE 13972
// begin _d := rand ( 0 , 5 ) ;
13779: LD_ADDR_VAR 0 11
13783: PUSH
13784: LD_INT 0
13786: PPUSH
13787: LD_INT 5
13789: PPUSH
13790: CALL_OW 12
13794: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
13795: LD_ADDR_VAR 0 12
13799: PUSH
13800: LD_INT 2
13802: PPUSH
13803: LD_INT 6
13805: PPUSH
13806: CALL_OW 12
13810: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
13811: LD_ADDR_VAR 0 9
13815: PUSH
13816: LD_VAR 0 2
13820: PPUSH
13821: LD_VAR 0 11
13825: PPUSH
13826: LD_VAR 0 12
13830: PPUSH
13831: CALL_OW 272
13835: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
13836: LD_ADDR_VAR 0 10
13840: PUSH
13841: LD_VAR 0 3
13845: PPUSH
13846: LD_VAR 0 11
13850: PPUSH
13851: LD_VAR 0 12
13855: PPUSH
13856: CALL_OW 273
13860: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
13861: LD_VAR 0 9
13865: PPUSH
13866: LD_VAR 0 10
13870: PPUSH
13871: CALL_OW 488
13875: PUSH
13876: LD_VAR 0 9
13880: PUSH
13881: LD_VAR 0 10
13885: PUSH
13886: EMPTY
13887: LIST
13888: LIST
13889: PUSH
13890: LD_VAR 0 7
13894: IN
13895: NOT
13896: AND
13897: PUSH
13898: LD_VAR 0 9
13902: PPUSH
13903: LD_VAR 0 10
13907: PPUSH
13908: CALL_OW 458
13912: NOT
13913: AND
13914: IFFALSE 13956
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
13916: LD_ADDR_VAR 0 7
13920: PUSH
13921: LD_VAR 0 7
13925: PPUSH
13926: LD_VAR 0 7
13930: PUSH
13931: LD_INT 1
13933: PLUS
13934: PPUSH
13935: LD_VAR 0 9
13939: PUSH
13940: LD_VAR 0 10
13944: PUSH
13945: EMPTY
13946: LIST
13947: LIST
13948: PPUSH
13949: CALL_OW 1
13953: ST_TO_ADDR
13954: GO 13970
// i := i - 1 ;
13956: LD_ADDR_VAR 0 5
13960: PUSH
13961: LD_VAR 0 5
13965: PUSH
13966: LD_INT 1
13968: MINUS
13969: ST_TO_ADDR
// end ;
13970: GO 13776
13972: POP
13973: POP
// for i in tmp do
13974: LD_ADDR_VAR 0 5
13978: PUSH
13979: LD_VAR 0 7
13983: PUSH
13984: FOR_IN
13985: IFFALSE 14023
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
13987: LD_VAR 0 1
13991: PPUSH
13992: LD_VAR 0 5
13996: PUSH
13997: LD_INT 1
13999: ARRAY
14000: PPUSH
14001: LD_VAR 0 5
14005: PUSH
14006: LD_INT 2
14008: ARRAY
14009: PPUSH
14010: CALL 12965 0 3
14014: NOT
14015: IFFALSE 14021
// exit ;
14017: POP
14018: POP
14019: GO 14025
14021: GO 13984
14023: POP
14024: POP
// end ;
14025: LD_VAR 0 4
14029: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
14030: LD_INT 0
14032: PPUSH
14033: PPUSH
14034: PPUSH
14035: PPUSH
14036: PPUSH
14037: PPUSH
14038: PPUSH
// if not GetClass ( unit ) = class_sniper then
14039: LD_VAR 0 1
14043: PPUSH
14044: CALL_OW 257
14048: PUSH
14049: LD_INT 5
14051: EQUAL
14052: NOT
14053: IFFALSE 14057
// exit ;
14055: GO 14445
// dist := 8 ;
14057: LD_ADDR_VAR 0 5
14061: PUSH
14062: LD_INT 8
14064: ST_TO_ADDR
// viewRange := 12 ;
14065: LD_ADDR_VAR 0 7
14069: PUSH
14070: LD_INT 12
14072: ST_TO_ADDR
// side := GetSide ( unit ) ;
14073: LD_ADDR_VAR 0 6
14077: PUSH
14078: LD_VAR 0 1
14082: PPUSH
14083: CALL_OW 255
14087: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
14088: LD_INT 61
14090: PPUSH
14091: LD_VAR 0 6
14095: PPUSH
14096: CALL_OW 321
14100: PUSH
14101: LD_INT 2
14103: EQUAL
14104: IFFALSE 14114
// viewRange := 16 ;
14106: LD_ADDR_VAR 0 7
14110: PUSH
14111: LD_INT 16
14113: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
14114: LD_VAR 0 1
14118: PPUSH
14119: LD_VAR 0 2
14123: PPUSH
14124: LD_VAR 0 3
14128: PPUSH
14129: CALL_OW 297
14133: PUSH
14134: LD_VAR 0 5
14138: GREATER
14139: IFFALSE 14218
// begin ComMoveXY ( unit , x , y ) ;
14141: LD_VAR 0 1
14145: PPUSH
14146: LD_VAR 0 2
14150: PPUSH
14151: LD_VAR 0 3
14155: PPUSH
14156: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14160: LD_INT 35
14162: PPUSH
14163: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
14167: LD_VAR 0 1
14171: PPUSH
14172: LD_VAR 0 2
14176: PPUSH
14177: LD_VAR 0 3
14181: PPUSH
14182: CALL 63778 0 3
14186: NOT
14187: IFFALSE 14191
// exit ;
14189: GO 14445
// until GetDistUnitXY ( unit , x , y ) < dist ;
14191: LD_VAR 0 1
14195: PPUSH
14196: LD_VAR 0 2
14200: PPUSH
14201: LD_VAR 0 3
14205: PPUSH
14206: CALL_OW 297
14210: PUSH
14211: LD_VAR 0 5
14215: LESS
14216: IFFALSE 14160
// end ; ComTurnXY ( unit , x , y ) ;
14218: LD_VAR 0 1
14222: PPUSH
14223: LD_VAR 0 2
14227: PPUSH
14228: LD_VAR 0 3
14232: PPUSH
14233: CALL_OW 118
// wait ( 5 ) ;
14237: LD_INT 5
14239: PPUSH
14240: CALL_OW 67
// _d := GetDir ( unit ) ;
14244: LD_ADDR_VAR 0 10
14248: PUSH
14249: LD_VAR 0 1
14253: PPUSH
14254: CALL_OW 254
14258: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
14259: LD_ADDR_VAR 0 8
14263: PUSH
14264: LD_VAR 0 1
14268: PPUSH
14269: CALL_OW 250
14273: PPUSH
14274: LD_VAR 0 10
14278: PPUSH
14279: LD_VAR 0 5
14283: PPUSH
14284: CALL_OW 272
14288: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
14289: LD_ADDR_VAR 0 9
14293: PUSH
14294: LD_VAR 0 1
14298: PPUSH
14299: CALL_OW 251
14303: PPUSH
14304: LD_VAR 0 10
14308: PPUSH
14309: LD_VAR 0 5
14313: PPUSH
14314: CALL_OW 273
14318: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14319: LD_VAR 0 8
14323: PPUSH
14324: LD_VAR 0 9
14328: PPUSH
14329: CALL_OW 488
14333: NOT
14334: IFFALSE 14338
// exit ;
14336: GO 14445
// ComAnimCustom ( unit , 1 ) ;
14338: LD_VAR 0 1
14342: PPUSH
14343: LD_INT 1
14345: PPUSH
14346: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
14350: LD_VAR 0 8
14354: PPUSH
14355: LD_VAR 0 9
14359: PPUSH
14360: LD_VAR 0 6
14364: PPUSH
14365: LD_VAR 0 7
14369: PPUSH
14370: CALL_OW 330
// repeat wait ( 1 ) ;
14374: LD_INT 1
14376: PPUSH
14377: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
14381: LD_VAR 0 1
14385: PPUSH
14386: CALL_OW 316
14390: PUSH
14391: LD_VAR 0 1
14395: PPUSH
14396: CALL_OW 314
14400: OR
14401: PUSH
14402: LD_VAR 0 1
14406: PPUSH
14407: CALL_OW 302
14411: NOT
14412: OR
14413: PUSH
14414: LD_VAR 0 1
14418: PPUSH
14419: CALL_OW 301
14423: OR
14424: IFFALSE 14374
// RemoveSeeing ( _x , _y , side ) ;
14426: LD_VAR 0 8
14430: PPUSH
14431: LD_VAR 0 9
14435: PPUSH
14436: LD_VAR 0 6
14440: PPUSH
14441: CALL_OW 331
// end ; end_of_file
14445: LD_VAR 0 4
14449: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14450: LD_INT 0
14452: PPUSH
// if p2 = 100 then
14453: LD_VAR 0 2
14457: PUSH
14458: LD_INT 100
14460: EQUAL
14461: IFFALSE 15464
// begin if not StreamModeActive then
14463: LD_EXP 38
14467: NOT
14468: IFFALSE 14478
// StreamModeActive := true ;
14470: LD_ADDR_EXP 38
14474: PUSH
14475: LD_INT 1
14477: ST_TO_ADDR
// if p3 = 0 then
14478: LD_VAR 0 3
14482: PUSH
14483: LD_INT 0
14485: EQUAL
14486: IFFALSE 14492
// InitStreamMode ;
14488: CALL 15624 0 0
// if p3 = 1 then
14492: LD_VAR 0 3
14496: PUSH
14497: LD_INT 1
14499: EQUAL
14500: IFFALSE 14510
// sRocket := true ;
14502: LD_ADDR_EXP 43
14506: PUSH
14507: LD_INT 1
14509: ST_TO_ADDR
// if p3 = 2 then
14510: LD_VAR 0 3
14514: PUSH
14515: LD_INT 2
14517: EQUAL
14518: IFFALSE 14528
// sSpeed := true ;
14520: LD_ADDR_EXP 42
14524: PUSH
14525: LD_INT 1
14527: ST_TO_ADDR
// if p3 = 3 then
14528: LD_VAR 0 3
14532: PUSH
14533: LD_INT 3
14535: EQUAL
14536: IFFALSE 14546
// sEngine := true ;
14538: LD_ADDR_EXP 44
14542: PUSH
14543: LD_INT 1
14545: ST_TO_ADDR
// if p3 = 4 then
14546: LD_VAR 0 3
14550: PUSH
14551: LD_INT 4
14553: EQUAL
14554: IFFALSE 14564
// sSpec := true ;
14556: LD_ADDR_EXP 41
14560: PUSH
14561: LD_INT 1
14563: ST_TO_ADDR
// if p3 = 5 then
14564: LD_VAR 0 3
14568: PUSH
14569: LD_INT 5
14571: EQUAL
14572: IFFALSE 14582
// sLevel := true ;
14574: LD_ADDR_EXP 45
14578: PUSH
14579: LD_INT 1
14581: ST_TO_ADDR
// if p3 = 6 then
14582: LD_VAR 0 3
14586: PUSH
14587: LD_INT 6
14589: EQUAL
14590: IFFALSE 14600
// sArmoury := true ;
14592: LD_ADDR_EXP 46
14596: PUSH
14597: LD_INT 1
14599: ST_TO_ADDR
// if p3 = 7 then
14600: LD_VAR 0 3
14604: PUSH
14605: LD_INT 7
14607: EQUAL
14608: IFFALSE 14618
// sRadar := true ;
14610: LD_ADDR_EXP 47
14614: PUSH
14615: LD_INT 1
14617: ST_TO_ADDR
// if p3 = 8 then
14618: LD_VAR 0 3
14622: PUSH
14623: LD_INT 8
14625: EQUAL
14626: IFFALSE 14636
// sBunker := true ;
14628: LD_ADDR_EXP 48
14632: PUSH
14633: LD_INT 1
14635: ST_TO_ADDR
// if p3 = 9 then
14636: LD_VAR 0 3
14640: PUSH
14641: LD_INT 9
14643: EQUAL
14644: IFFALSE 14654
// sHack := true ;
14646: LD_ADDR_EXP 49
14650: PUSH
14651: LD_INT 1
14653: ST_TO_ADDR
// if p3 = 10 then
14654: LD_VAR 0 3
14658: PUSH
14659: LD_INT 10
14661: EQUAL
14662: IFFALSE 14672
// sFire := true ;
14664: LD_ADDR_EXP 50
14668: PUSH
14669: LD_INT 1
14671: ST_TO_ADDR
// if p3 = 11 then
14672: LD_VAR 0 3
14676: PUSH
14677: LD_INT 11
14679: EQUAL
14680: IFFALSE 14690
// sRefresh := true ;
14682: LD_ADDR_EXP 51
14686: PUSH
14687: LD_INT 1
14689: ST_TO_ADDR
// if p3 = 12 then
14690: LD_VAR 0 3
14694: PUSH
14695: LD_INT 12
14697: EQUAL
14698: IFFALSE 14708
// sExp := true ;
14700: LD_ADDR_EXP 52
14704: PUSH
14705: LD_INT 1
14707: ST_TO_ADDR
// if p3 = 13 then
14708: LD_VAR 0 3
14712: PUSH
14713: LD_INT 13
14715: EQUAL
14716: IFFALSE 14726
// sDepot := true ;
14718: LD_ADDR_EXP 53
14722: PUSH
14723: LD_INT 1
14725: ST_TO_ADDR
// if p3 = 14 then
14726: LD_VAR 0 3
14730: PUSH
14731: LD_INT 14
14733: EQUAL
14734: IFFALSE 14744
// sFlag := true ;
14736: LD_ADDR_EXP 54
14740: PUSH
14741: LD_INT 1
14743: ST_TO_ADDR
// if p3 = 15 then
14744: LD_VAR 0 3
14748: PUSH
14749: LD_INT 15
14751: EQUAL
14752: IFFALSE 14762
// sKamikadze := true ;
14754: LD_ADDR_EXP 62
14758: PUSH
14759: LD_INT 1
14761: ST_TO_ADDR
// if p3 = 16 then
14762: LD_VAR 0 3
14766: PUSH
14767: LD_INT 16
14769: EQUAL
14770: IFFALSE 14780
// sTroll := true ;
14772: LD_ADDR_EXP 63
14776: PUSH
14777: LD_INT 1
14779: ST_TO_ADDR
// if p3 = 17 then
14780: LD_VAR 0 3
14784: PUSH
14785: LD_INT 17
14787: EQUAL
14788: IFFALSE 14798
// sSlow := true ;
14790: LD_ADDR_EXP 64
14794: PUSH
14795: LD_INT 1
14797: ST_TO_ADDR
// if p3 = 18 then
14798: LD_VAR 0 3
14802: PUSH
14803: LD_INT 18
14805: EQUAL
14806: IFFALSE 14816
// sLack := true ;
14808: LD_ADDR_EXP 65
14812: PUSH
14813: LD_INT 1
14815: ST_TO_ADDR
// if p3 = 19 then
14816: LD_VAR 0 3
14820: PUSH
14821: LD_INT 19
14823: EQUAL
14824: IFFALSE 14834
// sTank := true ;
14826: LD_ADDR_EXP 67
14830: PUSH
14831: LD_INT 1
14833: ST_TO_ADDR
// if p3 = 20 then
14834: LD_VAR 0 3
14838: PUSH
14839: LD_INT 20
14841: EQUAL
14842: IFFALSE 14852
// sRemote := true ;
14844: LD_ADDR_EXP 68
14848: PUSH
14849: LD_INT 1
14851: ST_TO_ADDR
// if p3 = 21 then
14852: LD_VAR 0 3
14856: PUSH
14857: LD_INT 21
14859: EQUAL
14860: IFFALSE 14870
// sPowell := true ;
14862: LD_ADDR_EXP 69
14866: PUSH
14867: LD_INT 1
14869: ST_TO_ADDR
// if p3 = 22 then
14870: LD_VAR 0 3
14874: PUSH
14875: LD_INT 22
14877: EQUAL
14878: IFFALSE 14888
// sTeleport := true ;
14880: LD_ADDR_EXP 72
14884: PUSH
14885: LD_INT 1
14887: ST_TO_ADDR
// if p3 = 23 then
14888: LD_VAR 0 3
14892: PUSH
14893: LD_INT 23
14895: EQUAL
14896: IFFALSE 14906
// sOilTower := true ;
14898: LD_ADDR_EXP 74
14902: PUSH
14903: LD_INT 1
14905: ST_TO_ADDR
// if p3 = 24 then
14906: LD_VAR 0 3
14910: PUSH
14911: LD_INT 24
14913: EQUAL
14914: IFFALSE 14924
// sShovel := true ;
14916: LD_ADDR_EXP 75
14920: PUSH
14921: LD_INT 1
14923: ST_TO_ADDR
// if p3 = 25 then
14924: LD_VAR 0 3
14928: PUSH
14929: LD_INT 25
14931: EQUAL
14932: IFFALSE 14942
// sSheik := true ;
14934: LD_ADDR_EXP 76
14938: PUSH
14939: LD_INT 1
14941: ST_TO_ADDR
// if p3 = 26 then
14942: LD_VAR 0 3
14946: PUSH
14947: LD_INT 26
14949: EQUAL
14950: IFFALSE 14960
// sEarthquake := true ;
14952: LD_ADDR_EXP 78
14956: PUSH
14957: LD_INT 1
14959: ST_TO_ADDR
// if p3 = 27 then
14960: LD_VAR 0 3
14964: PUSH
14965: LD_INT 27
14967: EQUAL
14968: IFFALSE 14978
// sAI := true ;
14970: LD_ADDR_EXP 79
14974: PUSH
14975: LD_INT 1
14977: ST_TO_ADDR
// if p3 = 28 then
14978: LD_VAR 0 3
14982: PUSH
14983: LD_INT 28
14985: EQUAL
14986: IFFALSE 14996
// sCargo := true ;
14988: LD_ADDR_EXP 82
14992: PUSH
14993: LD_INT 1
14995: ST_TO_ADDR
// if p3 = 29 then
14996: LD_VAR 0 3
15000: PUSH
15001: LD_INT 29
15003: EQUAL
15004: IFFALSE 15014
// sDLaser := true ;
15006: LD_ADDR_EXP 83
15010: PUSH
15011: LD_INT 1
15013: ST_TO_ADDR
// if p3 = 30 then
15014: LD_VAR 0 3
15018: PUSH
15019: LD_INT 30
15021: EQUAL
15022: IFFALSE 15032
// sExchange := true ;
15024: LD_ADDR_EXP 84
15028: PUSH
15029: LD_INT 1
15031: ST_TO_ADDR
// if p3 = 31 then
15032: LD_VAR 0 3
15036: PUSH
15037: LD_INT 31
15039: EQUAL
15040: IFFALSE 15050
// sFac := true ;
15042: LD_ADDR_EXP 85
15046: PUSH
15047: LD_INT 1
15049: ST_TO_ADDR
// if p3 = 32 then
15050: LD_VAR 0 3
15054: PUSH
15055: LD_INT 32
15057: EQUAL
15058: IFFALSE 15068
// sPower := true ;
15060: LD_ADDR_EXP 86
15064: PUSH
15065: LD_INT 1
15067: ST_TO_ADDR
// if p3 = 33 then
15068: LD_VAR 0 3
15072: PUSH
15073: LD_INT 33
15075: EQUAL
15076: IFFALSE 15086
// sRandom := true ;
15078: LD_ADDR_EXP 87
15082: PUSH
15083: LD_INT 1
15085: ST_TO_ADDR
// if p3 = 34 then
15086: LD_VAR 0 3
15090: PUSH
15091: LD_INT 34
15093: EQUAL
15094: IFFALSE 15104
// sShield := true ;
15096: LD_ADDR_EXP 88
15100: PUSH
15101: LD_INT 1
15103: ST_TO_ADDR
// if p3 = 35 then
15104: LD_VAR 0 3
15108: PUSH
15109: LD_INT 35
15111: EQUAL
15112: IFFALSE 15122
// sTime := true ;
15114: LD_ADDR_EXP 89
15118: PUSH
15119: LD_INT 1
15121: ST_TO_ADDR
// if p3 = 36 then
15122: LD_VAR 0 3
15126: PUSH
15127: LD_INT 36
15129: EQUAL
15130: IFFALSE 15140
// sTools := true ;
15132: LD_ADDR_EXP 90
15136: PUSH
15137: LD_INT 1
15139: ST_TO_ADDR
// if p3 = 101 then
15140: LD_VAR 0 3
15144: PUSH
15145: LD_INT 101
15147: EQUAL
15148: IFFALSE 15158
// sSold := true ;
15150: LD_ADDR_EXP 55
15154: PUSH
15155: LD_INT 1
15157: ST_TO_ADDR
// if p3 = 102 then
15158: LD_VAR 0 3
15162: PUSH
15163: LD_INT 102
15165: EQUAL
15166: IFFALSE 15176
// sDiff := true ;
15168: LD_ADDR_EXP 56
15172: PUSH
15173: LD_INT 1
15175: ST_TO_ADDR
// if p3 = 103 then
15176: LD_VAR 0 3
15180: PUSH
15181: LD_INT 103
15183: EQUAL
15184: IFFALSE 15194
// sFog := true ;
15186: LD_ADDR_EXP 59
15190: PUSH
15191: LD_INT 1
15193: ST_TO_ADDR
// if p3 = 104 then
15194: LD_VAR 0 3
15198: PUSH
15199: LD_INT 104
15201: EQUAL
15202: IFFALSE 15212
// sReset := true ;
15204: LD_ADDR_EXP 60
15208: PUSH
15209: LD_INT 1
15211: ST_TO_ADDR
// if p3 = 105 then
15212: LD_VAR 0 3
15216: PUSH
15217: LD_INT 105
15219: EQUAL
15220: IFFALSE 15230
// sSun := true ;
15222: LD_ADDR_EXP 61
15226: PUSH
15227: LD_INT 1
15229: ST_TO_ADDR
// if p3 = 106 then
15230: LD_VAR 0 3
15234: PUSH
15235: LD_INT 106
15237: EQUAL
15238: IFFALSE 15248
// sTiger := true ;
15240: LD_ADDR_EXP 57
15244: PUSH
15245: LD_INT 1
15247: ST_TO_ADDR
// if p3 = 107 then
15248: LD_VAR 0 3
15252: PUSH
15253: LD_INT 107
15255: EQUAL
15256: IFFALSE 15266
// sBomb := true ;
15258: LD_ADDR_EXP 58
15262: PUSH
15263: LD_INT 1
15265: ST_TO_ADDR
// if p3 = 108 then
15266: LD_VAR 0 3
15270: PUSH
15271: LD_INT 108
15273: EQUAL
15274: IFFALSE 15284
// sWound := true ;
15276: LD_ADDR_EXP 66
15280: PUSH
15281: LD_INT 1
15283: ST_TO_ADDR
// if p3 = 109 then
15284: LD_VAR 0 3
15288: PUSH
15289: LD_INT 109
15291: EQUAL
15292: IFFALSE 15302
// sBetray := true ;
15294: LD_ADDR_EXP 70
15298: PUSH
15299: LD_INT 1
15301: ST_TO_ADDR
// if p3 = 110 then
15302: LD_VAR 0 3
15306: PUSH
15307: LD_INT 110
15309: EQUAL
15310: IFFALSE 15320
// sContamin := true ;
15312: LD_ADDR_EXP 71
15316: PUSH
15317: LD_INT 1
15319: ST_TO_ADDR
// if p3 = 111 then
15320: LD_VAR 0 3
15324: PUSH
15325: LD_INT 111
15327: EQUAL
15328: IFFALSE 15338
// sOil := true ;
15330: LD_ADDR_EXP 73
15334: PUSH
15335: LD_INT 1
15337: ST_TO_ADDR
// if p3 = 112 then
15338: LD_VAR 0 3
15342: PUSH
15343: LD_INT 112
15345: EQUAL
15346: IFFALSE 15356
// sStu := true ;
15348: LD_ADDR_EXP 77
15352: PUSH
15353: LD_INT 1
15355: ST_TO_ADDR
// if p3 = 113 then
15356: LD_VAR 0 3
15360: PUSH
15361: LD_INT 113
15363: EQUAL
15364: IFFALSE 15374
// sBazooka := true ;
15366: LD_ADDR_EXP 80
15370: PUSH
15371: LD_INT 1
15373: ST_TO_ADDR
// if p3 = 114 then
15374: LD_VAR 0 3
15378: PUSH
15379: LD_INT 114
15381: EQUAL
15382: IFFALSE 15392
// sMortar := true ;
15384: LD_ADDR_EXP 81
15388: PUSH
15389: LD_INT 1
15391: ST_TO_ADDR
// if p3 = 115 then
15392: LD_VAR 0 3
15396: PUSH
15397: LD_INT 115
15399: EQUAL
15400: IFFALSE 15410
// sRanger := true ;
15402: LD_ADDR_EXP 91
15406: PUSH
15407: LD_INT 1
15409: ST_TO_ADDR
// if p3 = 116 then
15410: LD_VAR 0 3
15414: PUSH
15415: LD_INT 116
15417: EQUAL
15418: IFFALSE 15428
// sComputer := true ;
15420: LD_ADDR_EXP 92
15424: PUSH
15425: LD_INT 1
15427: ST_TO_ADDR
// if p3 = 117 then
15428: LD_VAR 0 3
15432: PUSH
15433: LD_INT 117
15435: EQUAL
15436: IFFALSE 15446
// s30 := true ;
15438: LD_ADDR_EXP 93
15442: PUSH
15443: LD_INT 1
15445: ST_TO_ADDR
// if p3 = 118 then
15446: LD_VAR 0 3
15450: PUSH
15451: LD_INT 118
15453: EQUAL
15454: IFFALSE 15464
// s60 := true ;
15456: LD_ADDR_EXP 94
15460: PUSH
15461: LD_INT 1
15463: ST_TO_ADDR
// end ; if p2 = 101 then
15464: LD_VAR 0 2
15468: PUSH
15469: LD_INT 101
15471: EQUAL
15472: IFFALSE 15600
// begin case p3 of 1 :
15474: LD_VAR 0 3
15478: PUSH
15479: LD_INT 1
15481: DOUBLE
15482: EQUAL
15483: IFTRUE 15487
15485: GO 15494
15487: POP
// hHackUnlimitedResources ; 2 :
15488: CALL 27196 0 0
15492: GO 15600
15494: LD_INT 2
15496: DOUBLE
15497: EQUAL
15498: IFTRUE 15502
15500: GO 15509
15502: POP
// hHackSetLevel10 ; 3 :
15503: CALL 27329 0 0
15507: GO 15600
15509: LD_INT 3
15511: DOUBLE
15512: EQUAL
15513: IFTRUE 15517
15515: GO 15524
15517: POP
// hHackSetLevel10YourUnits ; 4 :
15518: CALL 27414 0 0
15522: GO 15600
15524: LD_INT 4
15526: DOUBLE
15527: EQUAL
15528: IFTRUE 15532
15530: GO 15539
15532: POP
// hHackInvincible ; 5 :
15533: CALL 27862 0 0
15537: GO 15600
15539: LD_INT 5
15541: DOUBLE
15542: EQUAL
15543: IFTRUE 15547
15545: GO 15554
15547: POP
// hHackInvisible ; 6 :
15548: CALL 27973 0 0
15552: GO 15600
15554: LD_INT 6
15556: DOUBLE
15557: EQUAL
15558: IFTRUE 15562
15560: GO 15569
15562: POP
// hHackChangeYourSide ; 7 :
15563: CALL 28030 0 0
15567: GO 15600
15569: LD_INT 7
15571: DOUBLE
15572: EQUAL
15573: IFTRUE 15577
15575: GO 15584
15577: POP
// hHackChangeUnitSide ; 8 :
15578: CALL 28072 0 0
15582: GO 15600
15584: LD_INT 8
15586: DOUBLE
15587: EQUAL
15588: IFTRUE 15592
15590: GO 15599
15592: POP
// hHackFog ; end ;
15593: CALL 28173 0 0
15597: GO 15600
15599: POP
// end ; end ;
15600: LD_VAR 0 7
15604: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
15605: GO 15607
15607: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
15608: LD_STRING initStreamRollete();
15610: PPUSH
15611: CALL_OW 559
// InitStreamMode ;
15615: CALL 15624 0 0
// DefineStreamItems ( ) ;
15619: CALL 16088 0 0
// end ;
15623: END
// function InitStreamMode ; begin
15624: LD_INT 0
15626: PPUSH
// streamModeActive := false ;
15627: LD_ADDR_EXP 38
15631: PUSH
15632: LD_INT 0
15634: ST_TO_ADDR
// normalCounter := 36 ;
15635: LD_ADDR_EXP 39
15639: PUSH
15640: LD_INT 36
15642: ST_TO_ADDR
// hardcoreCounter := 16 ;
15643: LD_ADDR_EXP 40
15647: PUSH
15648: LD_INT 16
15650: ST_TO_ADDR
// sRocket := false ;
15651: LD_ADDR_EXP 43
15655: PUSH
15656: LD_INT 0
15658: ST_TO_ADDR
// sSpeed := false ;
15659: LD_ADDR_EXP 42
15663: PUSH
15664: LD_INT 0
15666: ST_TO_ADDR
// sEngine := false ;
15667: LD_ADDR_EXP 44
15671: PUSH
15672: LD_INT 0
15674: ST_TO_ADDR
// sSpec := false ;
15675: LD_ADDR_EXP 41
15679: PUSH
15680: LD_INT 0
15682: ST_TO_ADDR
// sLevel := false ;
15683: LD_ADDR_EXP 45
15687: PUSH
15688: LD_INT 0
15690: ST_TO_ADDR
// sArmoury := false ;
15691: LD_ADDR_EXP 46
15695: PUSH
15696: LD_INT 0
15698: ST_TO_ADDR
// sRadar := false ;
15699: LD_ADDR_EXP 47
15703: PUSH
15704: LD_INT 0
15706: ST_TO_ADDR
// sBunker := false ;
15707: LD_ADDR_EXP 48
15711: PUSH
15712: LD_INT 0
15714: ST_TO_ADDR
// sHack := false ;
15715: LD_ADDR_EXP 49
15719: PUSH
15720: LD_INT 0
15722: ST_TO_ADDR
// sFire := false ;
15723: LD_ADDR_EXP 50
15727: PUSH
15728: LD_INT 0
15730: ST_TO_ADDR
// sRefresh := false ;
15731: LD_ADDR_EXP 51
15735: PUSH
15736: LD_INT 0
15738: ST_TO_ADDR
// sExp := false ;
15739: LD_ADDR_EXP 52
15743: PUSH
15744: LD_INT 0
15746: ST_TO_ADDR
// sDepot := false ;
15747: LD_ADDR_EXP 53
15751: PUSH
15752: LD_INT 0
15754: ST_TO_ADDR
// sFlag := false ;
15755: LD_ADDR_EXP 54
15759: PUSH
15760: LD_INT 0
15762: ST_TO_ADDR
// sKamikadze := false ;
15763: LD_ADDR_EXP 62
15767: PUSH
15768: LD_INT 0
15770: ST_TO_ADDR
// sTroll := false ;
15771: LD_ADDR_EXP 63
15775: PUSH
15776: LD_INT 0
15778: ST_TO_ADDR
// sSlow := false ;
15779: LD_ADDR_EXP 64
15783: PUSH
15784: LD_INT 0
15786: ST_TO_ADDR
// sLack := false ;
15787: LD_ADDR_EXP 65
15791: PUSH
15792: LD_INT 0
15794: ST_TO_ADDR
// sTank := false ;
15795: LD_ADDR_EXP 67
15799: PUSH
15800: LD_INT 0
15802: ST_TO_ADDR
// sRemote := false ;
15803: LD_ADDR_EXP 68
15807: PUSH
15808: LD_INT 0
15810: ST_TO_ADDR
// sPowell := false ;
15811: LD_ADDR_EXP 69
15815: PUSH
15816: LD_INT 0
15818: ST_TO_ADDR
// sTeleport := false ;
15819: LD_ADDR_EXP 72
15823: PUSH
15824: LD_INT 0
15826: ST_TO_ADDR
// sOilTower := false ;
15827: LD_ADDR_EXP 74
15831: PUSH
15832: LD_INT 0
15834: ST_TO_ADDR
// sShovel := false ;
15835: LD_ADDR_EXP 75
15839: PUSH
15840: LD_INT 0
15842: ST_TO_ADDR
// sSheik := false ;
15843: LD_ADDR_EXP 76
15847: PUSH
15848: LD_INT 0
15850: ST_TO_ADDR
// sEarthquake := false ;
15851: LD_ADDR_EXP 78
15855: PUSH
15856: LD_INT 0
15858: ST_TO_ADDR
// sAI := false ;
15859: LD_ADDR_EXP 79
15863: PUSH
15864: LD_INT 0
15866: ST_TO_ADDR
// sCargo := false ;
15867: LD_ADDR_EXP 82
15871: PUSH
15872: LD_INT 0
15874: ST_TO_ADDR
// sDLaser := false ;
15875: LD_ADDR_EXP 83
15879: PUSH
15880: LD_INT 0
15882: ST_TO_ADDR
// sExchange := false ;
15883: LD_ADDR_EXP 84
15887: PUSH
15888: LD_INT 0
15890: ST_TO_ADDR
// sFac := false ;
15891: LD_ADDR_EXP 85
15895: PUSH
15896: LD_INT 0
15898: ST_TO_ADDR
// sPower := false ;
15899: LD_ADDR_EXP 86
15903: PUSH
15904: LD_INT 0
15906: ST_TO_ADDR
// sRandom := false ;
15907: LD_ADDR_EXP 87
15911: PUSH
15912: LD_INT 0
15914: ST_TO_ADDR
// sShield := false ;
15915: LD_ADDR_EXP 88
15919: PUSH
15920: LD_INT 0
15922: ST_TO_ADDR
// sTime := false ;
15923: LD_ADDR_EXP 89
15927: PUSH
15928: LD_INT 0
15930: ST_TO_ADDR
// sTools := false ;
15931: LD_ADDR_EXP 90
15935: PUSH
15936: LD_INT 0
15938: ST_TO_ADDR
// sSold := false ;
15939: LD_ADDR_EXP 55
15943: PUSH
15944: LD_INT 0
15946: ST_TO_ADDR
// sDiff := false ;
15947: LD_ADDR_EXP 56
15951: PUSH
15952: LD_INT 0
15954: ST_TO_ADDR
// sFog := false ;
15955: LD_ADDR_EXP 59
15959: PUSH
15960: LD_INT 0
15962: ST_TO_ADDR
// sReset := false ;
15963: LD_ADDR_EXP 60
15967: PUSH
15968: LD_INT 0
15970: ST_TO_ADDR
// sSun := false ;
15971: LD_ADDR_EXP 61
15975: PUSH
15976: LD_INT 0
15978: ST_TO_ADDR
// sTiger := false ;
15979: LD_ADDR_EXP 57
15983: PUSH
15984: LD_INT 0
15986: ST_TO_ADDR
// sBomb := false ;
15987: LD_ADDR_EXP 58
15991: PUSH
15992: LD_INT 0
15994: ST_TO_ADDR
// sWound := false ;
15995: LD_ADDR_EXP 66
15999: PUSH
16000: LD_INT 0
16002: ST_TO_ADDR
// sBetray := false ;
16003: LD_ADDR_EXP 70
16007: PUSH
16008: LD_INT 0
16010: ST_TO_ADDR
// sContamin := false ;
16011: LD_ADDR_EXP 71
16015: PUSH
16016: LD_INT 0
16018: ST_TO_ADDR
// sOil := false ;
16019: LD_ADDR_EXP 73
16023: PUSH
16024: LD_INT 0
16026: ST_TO_ADDR
// sStu := false ;
16027: LD_ADDR_EXP 77
16031: PUSH
16032: LD_INT 0
16034: ST_TO_ADDR
// sBazooka := false ;
16035: LD_ADDR_EXP 80
16039: PUSH
16040: LD_INT 0
16042: ST_TO_ADDR
// sMortar := false ;
16043: LD_ADDR_EXP 81
16047: PUSH
16048: LD_INT 0
16050: ST_TO_ADDR
// sRanger := false ;
16051: LD_ADDR_EXP 91
16055: PUSH
16056: LD_INT 0
16058: ST_TO_ADDR
// sComputer := false ;
16059: LD_ADDR_EXP 92
16063: PUSH
16064: LD_INT 0
16066: ST_TO_ADDR
// s30 := false ;
16067: LD_ADDR_EXP 93
16071: PUSH
16072: LD_INT 0
16074: ST_TO_ADDR
// s60 := false ;
16075: LD_ADDR_EXP 94
16079: PUSH
16080: LD_INT 0
16082: ST_TO_ADDR
// end ;
16083: LD_VAR 0 1
16087: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
16088: LD_INT 0
16090: PPUSH
16091: PPUSH
16092: PPUSH
16093: PPUSH
16094: PPUSH
// result := [ ] ;
16095: LD_ADDR_VAR 0 1
16099: PUSH
16100: EMPTY
16101: ST_TO_ADDR
// if campaign_id = 1 then
16102: LD_OWVAR 69
16106: PUSH
16107: LD_INT 1
16109: EQUAL
16110: IFFALSE 19276
// begin case mission_number of 1 :
16112: LD_OWVAR 70
16116: PUSH
16117: LD_INT 1
16119: DOUBLE
16120: EQUAL
16121: IFTRUE 16125
16123: GO 16201
16125: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
16126: LD_ADDR_VAR 0 1
16130: PUSH
16131: LD_INT 2
16133: PUSH
16134: LD_INT 4
16136: PUSH
16137: LD_INT 11
16139: PUSH
16140: LD_INT 12
16142: PUSH
16143: LD_INT 15
16145: PUSH
16146: LD_INT 16
16148: PUSH
16149: LD_INT 22
16151: PUSH
16152: LD_INT 23
16154: PUSH
16155: LD_INT 26
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: PUSH
16169: LD_INT 101
16171: PUSH
16172: LD_INT 102
16174: PUSH
16175: LD_INT 106
16177: PUSH
16178: LD_INT 116
16180: PUSH
16181: LD_INT 117
16183: PUSH
16184: LD_INT 118
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: ST_TO_ADDR
16199: GO 19274
16201: LD_INT 2
16203: DOUBLE
16204: EQUAL
16205: IFTRUE 16209
16207: GO 16293
16209: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
16210: LD_ADDR_VAR 0 1
16214: PUSH
16215: LD_INT 2
16217: PUSH
16218: LD_INT 4
16220: PUSH
16221: LD_INT 11
16223: PUSH
16224: LD_INT 12
16226: PUSH
16227: LD_INT 15
16229: PUSH
16230: LD_INT 16
16232: PUSH
16233: LD_INT 22
16235: PUSH
16236: LD_INT 23
16238: PUSH
16239: LD_INT 26
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: PUSH
16253: LD_INT 101
16255: PUSH
16256: LD_INT 102
16258: PUSH
16259: LD_INT 105
16261: PUSH
16262: LD_INT 106
16264: PUSH
16265: LD_INT 108
16267: PUSH
16268: LD_INT 116
16270: PUSH
16271: LD_INT 117
16273: PUSH
16274: LD_INT 118
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: ST_TO_ADDR
16291: GO 19274
16293: LD_INT 3
16295: DOUBLE
16296: EQUAL
16297: IFTRUE 16301
16299: GO 16389
16301: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
16302: LD_ADDR_VAR 0 1
16306: PUSH
16307: LD_INT 2
16309: PUSH
16310: LD_INT 4
16312: PUSH
16313: LD_INT 5
16315: PUSH
16316: LD_INT 11
16318: PUSH
16319: LD_INT 12
16321: PUSH
16322: LD_INT 15
16324: PUSH
16325: LD_INT 16
16327: PUSH
16328: LD_INT 22
16330: PUSH
16331: LD_INT 26
16333: PUSH
16334: LD_INT 36
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: PUSH
16349: LD_INT 101
16351: PUSH
16352: LD_INT 102
16354: PUSH
16355: LD_INT 105
16357: PUSH
16358: LD_INT 106
16360: PUSH
16361: LD_INT 108
16363: PUSH
16364: LD_INT 116
16366: PUSH
16367: LD_INT 117
16369: PUSH
16370: LD_INT 118
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: LIST
16381: LIST
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: ST_TO_ADDR
16387: GO 19274
16389: LD_INT 4
16391: DOUBLE
16392: EQUAL
16393: IFTRUE 16397
16395: GO 16493
16397: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
16398: LD_ADDR_VAR 0 1
16402: PUSH
16403: LD_INT 2
16405: PUSH
16406: LD_INT 4
16408: PUSH
16409: LD_INT 5
16411: PUSH
16412: LD_INT 8
16414: PUSH
16415: LD_INT 11
16417: PUSH
16418: LD_INT 12
16420: PUSH
16421: LD_INT 15
16423: PUSH
16424: LD_INT 16
16426: PUSH
16427: LD_INT 22
16429: PUSH
16430: LD_INT 23
16432: PUSH
16433: LD_INT 26
16435: PUSH
16436: LD_INT 36
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: PUSH
16453: LD_INT 101
16455: PUSH
16456: LD_INT 102
16458: PUSH
16459: LD_INT 105
16461: PUSH
16462: LD_INT 106
16464: PUSH
16465: LD_INT 108
16467: PUSH
16468: LD_INT 116
16470: PUSH
16471: LD_INT 117
16473: PUSH
16474: LD_INT 118
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: ST_TO_ADDR
16491: GO 19274
16493: LD_INT 5
16495: DOUBLE
16496: EQUAL
16497: IFTRUE 16501
16499: GO 16613
16501: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
16502: LD_ADDR_VAR 0 1
16506: PUSH
16507: LD_INT 2
16509: PUSH
16510: LD_INT 4
16512: PUSH
16513: LD_INT 5
16515: PUSH
16516: LD_INT 6
16518: PUSH
16519: LD_INT 8
16521: PUSH
16522: LD_INT 11
16524: PUSH
16525: LD_INT 12
16527: PUSH
16528: LD_INT 15
16530: PUSH
16531: LD_INT 16
16533: PUSH
16534: LD_INT 22
16536: PUSH
16537: LD_INT 23
16539: PUSH
16540: LD_INT 25
16542: PUSH
16543: LD_INT 26
16545: PUSH
16546: LD_INT 36
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: PUSH
16565: LD_INT 101
16567: PUSH
16568: LD_INT 102
16570: PUSH
16571: LD_INT 105
16573: PUSH
16574: LD_INT 106
16576: PUSH
16577: LD_INT 108
16579: PUSH
16580: LD_INT 109
16582: PUSH
16583: LD_INT 112
16585: PUSH
16586: LD_INT 116
16588: PUSH
16589: LD_INT 117
16591: PUSH
16592: LD_INT 118
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: ST_TO_ADDR
16611: GO 19274
16613: LD_INT 6
16615: DOUBLE
16616: EQUAL
16617: IFTRUE 16621
16619: GO 16753
16621: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
16622: LD_ADDR_VAR 0 1
16626: PUSH
16627: LD_INT 2
16629: PUSH
16630: LD_INT 4
16632: PUSH
16633: LD_INT 5
16635: PUSH
16636: LD_INT 6
16638: PUSH
16639: LD_INT 8
16641: PUSH
16642: LD_INT 11
16644: PUSH
16645: LD_INT 12
16647: PUSH
16648: LD_INT 15
16650: PUSH
16651: LD_INT 16
16653: PUSH
16654: LD_INT 20
16656: PUSH
16657: LD_INT 21
16659: PUSH
16660: LD_INT 22
16662: PUSH
16663: LD_INT 23
16665: PUSH
16666: LD_INT 25
16668: PUSH
16669: LD_INT 26
16671: PUSH
16672: LD_INT 30
16674: PUSH
16675: LD_INT 31
16677: PUSH
16678: LD_INT 32
16680: PUSH
16681: LD_INT 36
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: PUSH
16705: LD_INT 101
16707: PUSH
16708: LD_INT 102
16710: PUSH
16711: LD_INT 105
16713: PUSH
16714: LD_INT 106
16716: PUSH
16717: LD_INT 108
16719: PUSH
16720: LD_INT 109
16722: PUSH
16723: LD_INT 112
16725: PUSH
16726: LD_INT 116
16728: PUSH
16729: LD_INT 117
16731: PUSH
16732: LD_INT 118
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: ST_TO_ADDR
16751: GO 19274
16753: LD_INT 7
16755: DOUBLE
16756: EQUAL
16757: IFTRUE 16761
16759: GO 16873
16761: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
16762: LD_ADDR_VAR 0 1
16766: PUSH
16767: LD_INT 2
16769: PUSH
16770: LD_INT 4
16772: PUSH
16773: LD_INT 5
16775: PUSH
16776: LD_INT 7
16778: PUSH
16779: LD_INT 11
16781: PUSH
16782: LD_INT 12
16784: PUSH
16785: LD_INT 15
16787: PUSH
16788: LD_INT 16
16790: PUSH
16791: LD_INT 20
16793: PUSH
16794: LD_INT 21
16796: PUSH
16797: LD_INT 22
16799: PUSH
16800: LD_INT 23
16802: PUSH
16803: LD_INT 25
16805: PUSH
16806: LD_INT 26
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: PUSH
16825: LD_INT 101
16827: PUSH
16828: LD_INT 102
16830: PUSH
16831: LD_INT 103
16833: PUSH
16834: LD_INT 105
16836: PUSH
16837: LD_INT 106
16839: PUSH
16840: LD_INT 108
16842: PUSH
16843: LD_INT 112
16845: PUSH
16846: LD_INT 116
16848: PUSH
16849: LD_INT 117
16851: PUSH
16852: LD_INT 118
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: ST_TO_ADDR
16871: GO 19274
16873: LD_INT 8
16875: DOUBLE
16876: EQUAL
16877: IFTRUE 16881
16879: GO 17021
16881: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
16882: LD_ADDR_VAR 0 1
16886: PUSH
16887: LD_INT 2
16889: PUSH
16890: LD_INT 4
16892: PUSH
16893: LD_INT 5
16895: PUSH
16896: LD_INT 6
16898: PUSH
16899: LD_INT 7
16901: PUSH
16902: LD_INT 8
16904: PUSH
16905: LD_INT 11
16907: PUSH
16908: LD_INT 12
16910: PUSH
16911: LD_INT 15
16913: PUSH
16914: LD_INT 16
16916: PUSH
16917: LD_INT 20
16919: PUSH
16920: LD_INT 21
16922: PUSH
16923: LD_INT 22
16925: PUSH
16926: LD_INT 23
16928: PUSH
16929: LD_INT 25
16931: PUSH
16932: LD_INT 26
16934: PUSH
16935: LD_INT 30
16937: PUSH
16938: LD_INT 31
16940: PUSH
16941: LD_INT 32
16943: PUSH
16944: LD_INT 36
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: PUSH
16969: LD_INT 101
16971: PUSH
16972: LD_INT 102
16974: PUSH
16975: LD_INT 103
16977: PUSH
16978: LD_INT 105
16980: PUSH
16981: LD_INT 106
16983: PUSH
16984: LD_INT 108
16986: PUSH
16987: LD_INT 109
16989: PUSH
16990: LD_INT 112
16992: PUSH
16993: LD_INT 116
16995: PUSH
16996: LD_INT 117
16998: PUSH
16999: LD_INT 118
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: ST_TO_ADDR
17019: GO 19274
17021: LD_INT 9
17023: DOUBLE
17024: EQUAL
17025: IFTRUE 17029
17027: GO 17177
17029: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17030: LD_ADDR_VAR 0 1
17034: PUSH
17035: LD_INT 2
17037: PUSH
17038: LD_INT 4
17040: PUSH
17041: LD_INT 5
17043: PUSH
17044: LD_INT 6
17046: PUSH
17047: LD_INT 7
17049: PUSH
17050: LD_INT 8
17052: PUSH
17053: LD_INT 11
17055: PUSH
17056: LD_INT 12
17058: PUSH
17059: LD_INT 15
17061: PUSH
17062: LD_INT 16
17064: PUSH
17065: LD_INT 20
17067: PUSH
17068: LD_INT 21
17070: PUSH
17071: LD_INT 22
17073: PUSH
17074: LD_INT 23
17076: PUSH
17077: LD_INT 25
17079: PUSH
17080: LD_INT 26
17082: PUSH
17083: LD_INT 28
17085: PUSH
17086: LD_INT 30
17088: PUSH
17089: LD_INT 31
17091: PUSH
17092: LD_INT 32
17094: PUSH
17095: LD_INT 36
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: PUSH
17121: LD_INT 101
17123: PUSH
17124: LD_INT 102
17126: PUSH
17127: LD_INT 103
17129: PUSH
17130: LD_INT 105
17132: PUSH
17133: LD_INT 106
17135: PUSH
17136: LD_INT 108
17138: PUSH
17139: LD_INT 109
17141: PUSH
17142: LD_INT 112
17144: PUSH
17145: LD_INT 114
17147: PUSH
17148: LD_INT 116
17150: PUSH
17151: LD_INT 117
17153: PUSH
17154: LD_INT 118
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: ST_TO_ADDR
17175: GO 19274
17177: LD_INT 10
17179: DOUBLE
17180: EQUAL
17181: IFTRUE 17185
17183: GO 17381
17185: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
17186: LD_ADDR_VAR 0 1
17190: PUSH
17191: LD_INT 2
17193: PUSH
17194: LD_INT 4
17196: PUSH
17197: LD_INT 5
17199: PUSH
17200: LD_INT 6
17202: PUSH
17203: LD_INT 7
17205: PUSH
17206: LD_INT 8
17208: PUSH
17209: LD_INT 9
17211: PUSH
17212: LD_INT 10
17214: PUSH
17215: LD_INT 11
17217: PUSH
17218: LD_INT 12
17220: PUSH
17221: LD_INT 13
17223: PUSH
17224: LD_INT 14
17226: PUSH
17227: LD_INT 15
17229: PUSH
17230: LD_INT 16
17232: PUSH
17233: LD_INT 17
17235: PUSH
17236: LD_INT 18
17238: PUSH
17239: LD_INT 19
17241: PUSH
17242: LD_INT 20
17244: PUSH
17245: LD_INT 21
17247: PUSH
17248: LD_INT 22
17250: PUSH
17251: LD_INT 23
17253: PUSH
17254: LD_INT 24
17256: PUSH
17257: LD_INT 25
17259: PUSH
17260: LD_INT 26
17262: PUSH
17263: LD_INT 28
17265: PUSH
17266: LD_INT 30
17268: PUSH
17269: LD_INT 31
17271: PUSH
17272: LD_INT 32
17274: PUSH
17275: LD_INT 36
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: PUSH
17309: LD_INT 101
17311: PUSH
17312: LD_INT 102
17314: PUSH
17315: LD_INT 103
17317: PUSH
17318: LD_INT 104
17320: PUSH
17321: LD_INT 105
17323: PUSH
17324: LD_INT 106
17326: PUSH
17327: LD_INT 107
17329: PUSH
17330: LD_INT 108
17332: PUSH
17333: LD_INT 109
17335: PUSH
17336: LD_INT 110
17338: PUSH
17339: LD_INT 111
17341: PUSH
17342: LD_INT 112
17344: PUSH
17345: LD_INT 114
17347: PUSH
17348: LD_INT 116
17350: PUSH
17351: LD_INT 117
17353: PUSH
17354: LD_INT 118
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: LIST
17361: LIST
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: ST_TO_ADDR
17379: GO 19274
17381: LD_INT 11
17383: DOUBLE
17384: EQUAL
17385: IFTRUE 17389
17387: GO 17593
17389: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
17390: LD_ADDR_VAR 0 1
17394: PUSH
17395: LD_INT 2
17397: PUSH
17398: LD_INT 3
17400: PUSH
17401: LD_INT 4
17403: PUSH
17404: LD_INT 5
17406: PUSH
17407: LD_INT 6
17409: PUSH
17410: LD_INT 7
17412: PUSH
17413: LD_INT 8
17415: PUSH
17416: LD_INT 9
17418: PUSH
17419: LD_INT 10
17421: PUSH
17422: LD_INT 11
17424: PUSH
17425: LD_INT 12
17427: PUSH
17428: LD_INT 13
17430: PUSH
17431: LD_INT 14
17433: PUSH
17434: LD_INT 15
17436: PUSH
17437: LD_INT 16
17439: PUSH
17440: LD_INT 17
17442: PUSH
17443: LD_INT 18
17445: PUSH
17446: LD_INT 19
17448: PUSH
17449: LD_INT 20
17451: PUSH
17452: LD_INT 21
17454: PUSH
17455: LD_INT 22
17457: PUSH
17458: LD_INT 23
17460: PUSH
17461: LD_INT 24
17463: PUSH
17464: LD_INT 25
17466: PUSH
17467: LD_INT 26
17469: PUSH
17470: LD_INT 28
17472: PUSH
17473: LD_INT 30
17475: PUSH
17476: LD_INT 31
17478: PUSH
17479: LD_INT 32
17481: PUSH
17482: LD_INT 34
17484: PUSH
17485: LD_INT 36
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: PUSH
17521: LD_INT 101
17523: PUSH
17524: LD_INT 102
17526: PUSH
17527: LD_INT 103
17529: PUSH
17530: LD_INT 104
17532: PUSH
17533: LD_INT 105
17535: PUSH
17536: LD_INT 106
17538: PUSH
17539: LD_INT 107
17541: PUSH
17542: LD_INT 108
17544: PUSH
17545: LD_INT 109
17547: PUSH
17548: LD_INT 110
17550: PUSH
17551: LD_INT 111
17553: PUSH
17554: LD_INT 112
17556: PUSH
17557: LD_INT 114
17559: PUSH
17560: LD_INT 116
17562: PUSH
17563: LD_INT 117
17565: PUSH
17566: LD_INT 118
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: ST_TO_ADDR
17591: GO 19274
17593: LD_INT 12
17595: DOUBLE
17596: EQUAL
17597: IFTRUE 17601
17599: GO 17821
17601: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
17602: LD_ADDR_VAR 0 1
17606: PUSH
17607: LD_INT 1
17609: PUSH
17610: LD_INT 2
17612: PUSH
17613: LD_INT 3
17615: PUSH
17616: LD_INT 4
17618: PUSH
17619: LD_INT 5
17621: PUSH
17622: LD_INT 6
17624: PUSH
17625: LD_INT 7
17627: PUSH
17628: LD_INT 8
17630: PUSH
17631: LD_INT 9
17633: PUSH
17634: LD_INT 10
17636: PUSH
17637: LD_INT 11
17639: PUSH
17640: LD_INT 12
17642: PUSH
17643: LD_INT 13
17645: PUSH
17646: LD_INT 14
17648: PUSH
17649: LD_INT 15
17651: PUSH
17652: LD_INT 16
17654: PUSH
17655: LD_INT 17
17657: PUSH
17658: LD_INT 18
17660: PUSH
17661: LD_INT 19
17663: PUSH
17664: LD_INT 20
17666: PUSH
17667: LD_INT 21
17669: PUSH
17670: LD_INT 22
17672: PUSH
17673: LD_INT 23
17675: PUSH
17676: LD_INT 24
17678: PUSH
17679: LD_INT 25
17681: PUSH
17682: LD_INT 26
17684: PUSH
17685: LD_INT 27
17687: PUSH
17688: LD_INT 28
17690: PUSH
17691: LD_INT 30
17693: PUSH
17694: LD_INT 31
17696: PUSH
17697: LD_INT 32
17699: PUSH
17700: LD_INT 33
17702: PUSH
17703: LD_INT 34
17705: PUSH
17706: LD_INT 36
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: PUSH
17745: LD_INT 101
17747: PUSH
17748: LD_INT 102
17750: PUSH
17751: LD_INT 103
17753: PUSH
17754: LD_INT 104
17756: PUSH
17757: LD_INT 105
17759: PUSH
17760: LD_INT 106
17762: PUSH
17763: LD_INT 107
17765: PUSH
17766: LD_INT 108
17768: PUSH
17769: LD_INT 109
17771: PUSH
17772: LD_INT 110
17774: PUSH
17775: LD_INT 111
17777: PUSH
17778: LD_INT 112
17780: PUSH
17781: LD_INT 113
17783: PUSH
17784: LD_INT 114
17786: PUSH
17787: LD_INT 116
17789: PUSH
17790: LD_INT 117
17792: PUSH
17793: LD_INT 118
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: ST_TO_ADDR
17819: GO 19274
17821: LD_INT 13
17823: DOUBLE
17824: EQUAL
17825: IFTRUE 17829
17827: GO 18037
17829: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
17830: LD_ADDR_VAR 0 1
17834: PUSH
17835: LD_INT 1
17837: PUSH
17838: LD_INT 2
17840: PUSH
17841: LD_INT 3
17843: PUSH
17844: LD_INT 4
17846: PUSH
17847: LD_INT 5
17849: PUSH
17850: LD_INT 8
17852: PUSH
17853: LD_INT 9
17855: PUSH
17856: LD_INT 10
17858: PUSH
17859: LD_INT 11
17861: PUSH
17862: LD_INT 12
17864: PUSH
17865: LD_INT 14
17867: PUSH
17868: LD_INT 15
17870: PUSH
17871: LD_INT 16
17873: PUSH
17874: LD_INT 17
17876: PUSH
17877: LD_INT 18
17879: PUSH
17880: LD_INT 19
17882: PUSH
17883: LD_INT 20
17885: PUSH
17886: LD_INT 21
17888: PUSH
17889: LD_INT 22
17891: PUSH
17892: LD_INT 23
17894: PUSH
17895: LD_INT 24
17897: PUSH
17898: LD_INT 25
17900: PUSH
17901: LD_INT 26
17903: PUSH
17904: LD_INT 27
17906: PUSH
17907: LD_INT 28
17909: PUSH
17910: LD_INT 30
17912: PUSH
17913: LD_INT 31
17915: PUSH
17916: LD_INT 32
17918: PUSH
17919: LD_INT 33
17921: PUSH
17922: LD_INT 34
17924: PUSH
17925: LD_INT 36
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: PUSH
17961: LD_INT 101
17963: PUSH
17964: LD_INT 102
17966: PUSH
17967: LD_INT 103
17969: PUSH
17970: LD_INT 104
17972: PUSH
17973: LD_INT 105
17975: PUSH
17976: LD_INT 106
17978: PUSH
17979: LD_INT 107
17981: PUSH
17982: LD_INT 108
17984: PUSH
17985: LD_INT 109
17987: PUSH
17988: LD_INT 110
17990: PUSH
17991: LD_INT 111
17993: PUSH
17994: LD_INT 112
17996: PUSH
17997: LD_INT 113
17999: PUSH
18000: LD_INT 114
18002: PUSH
18003: LD_INT 116
18005: PUSH
18006: LD_INT 117
18008: PUSH
18009: LD_INT 118
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: ST_TO_ADDR
18035: GO 19274
18037: LD_INT 14
18039: DOUBLE
18040: EQUAL
18041: IFTRUE 18045
18043: GO 18269
18045: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18046: LD_ADDR_VAR 0 1
18050: PUSH
18051: LD_INT 1
18053: PUSH
18054: LD_INT 2
18056: PUSH
18057: LD_INT 3
18059: PUSH
18060: LD_INT 4
18062: PUSH
18063: LD_INT 5
18065: PUSH
18066: LD_INT 6
18068: PUSH
18069: LD_INT 7
18071: PUSH
18072: LD_INT 8
18074: PUSH
18075: LD_INT 9
18077: PUSH
18078: LD_INT 10
18080: PUSH
18081: LD_INT 11
18083: PUSH
18084: LD_INT 12
18086: PUSH
18087: LD_INT 13
18089: PUSH
18090: LD_INT 14
18092: PUSH
18093: LD_INT 15
18095: PUSH
18096: LD_INT 16
18098: PUSH
18099: LD_INT 17
18101: PUSH
18102: LD_INT 18
18104: PUSH
18105: LD_INT 19
18107: PUSH
18108: LD_INT 20
18110: PUSH
18111: LD_INT 21
18113: PUSH
18114: LD_INT 22
18116: PUSH
18117: LD_INT 23
18119: PUSH
18120: LD_INT 24
18122: PUSH
18123: LD_INT 25
18125: PUSH
18126: LD_INT 26
18128: PUSH
18129: LD_INT 27
18131: PUSH
18132: LD_INT 28
18134: PUSH
18135: LD_INT 29
18137: PUSH
18138: LD_INT 30
18140: PUSH
18141: LD_INT 31
18143: PUSH
18144: LD_INT 32
18146: PUSH
18147: LD_INT 33
18149: PUSH
18150: LD_INT 34
18152: PUSH
18153: LD_INT 36
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: PUSH
18193: LD_INT 101
18195: PUSH
18196: LD_INT 102
18198: PUSH
18199: LD_INT 103
18201: PUSH
18202: LD_INT 104
18204: PUSH
18205: LD_INT 105
18207: PUSH
18208: LD_INT 106
18210: PUSH
18211: LD_INT 107
18213: PUSH
18214: LD_INT 108
18216: PUSH
18217: LD_INT 109
18219: PUSH
18220: LD_INT 110
18222: PUSH
18223: LD_INT 111
18225: PUSH
18226: LD_INT 112
18228: PUSH
18229: LD_INT 113
18231: PUSH
18232: LD_INT 114
18234: PUSH
18235: LD_INT 116
18237: PUSH
18238: LD_INT 117
18240: PUSH
18241: LD_INT 118
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: ST_TO_ADDR
18267: GO 19274
18269: LD_INT 15
18271: DOUBLE
18272: EQUAL
18273: IFTRUE 18277
18275: GO 18501
18277: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
18278: LD_ADDR_VAR 0 1
18282: PUSH
18283: LD_INT 1
18285: PUSH
18286: LD_INT 2
18288: PUSH
18289: LD_INT 3
18291: PUSH
18292: LD_INT 4
18294: PUSH
18295: LD_INT 5
18297: PUSH
18298: LD_INT 6
18300: PUSH
18301: LD_INT 7
18303: PUSH
18304: LD_INT 8
18306: PUSH
18307: LD_INT 9
18309: PUSH
18310: LD_INT 10
18312: PUSH
18313: LD_INT 11
18315: PUSH
18316: LD_INT 12
18318: PUSH
18319: LD_INT 13
18321: PUSH
18322: LD_INT 14
18324: PUSH
18325: LD_INT 15
18327: PUSH
18328: LD_INT 16
18330: PUSH
18331: LD_INT 17
18333: PUSH
18334: LD_INT 18
18336: PUSH
18337: LD_INT 19
18339: PUSH
18340: LD_INT 20
18342: PUSH
18343: LD_INT 21
18345: PUSH
18346: LD_INT 22
18348: PUSH
18349: LD_INT 23
18351: PUSH
18352: LD_INT 24
18354: PUSH
18355: LD_INT 25
18357: PUSH
18358: LD_INT 26
18360: PUSH
18361: LD_INT 27
18363: PUSH
18364: LD_INT 28
18366: PUSH
18367: LD_INT 29
18369: PUSH
18370: LD_INT 30
18372: PUSH
18373: LD_INT 31
18375: PUSH
18376: LD_INT 32
18378: PUSH
18379: LD_INT 33
18381: PUSH
18382: LD_INT 34
18384: PUSH
18385: LD_INT 36
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: LIST
18401: LIST
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: PUSH
18425: LD_INT 101
18427: PUSH
18428: LD_INT 102
18430: PUSH
18431: LD_INT 103
18433: PUSH
18434: LD_INT 104
18436: PUSH
18437: LD_INT 105
18439: PUSH
18440: LD_INT 106
18442: PUSH
18443: LD_INT 107
18445: PUSH
18446: LD_INT 108
18448: PUSH
18449: LD_INT 109
18451: PUSH
18452: LD_INT 110
18454: PUSH
18455: LD_INT 111
18457: PUSH
18458: LD_INT 112
18460: PUSH
18461: LD_INT 113
18463: PUSH
18464: LD_INT 114
18466: PUSH
18467: LD_INT 116
18469: PUSH
18470: LD_INT 117
18472: PUSH
18473: LD_INT 118
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: PUSH
18495: EMPTY
18496: LIST
18497: LIST
18498: ST_TO_ADDR
18499: GO 19274
18501: LD_INT 16
18503: DOUBLE
18504: EQUAL
18505: IFTRUE 18509
18507: GO 18645
18509: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
18510: LD_ADDR_VAR 0 1
18514: PUSH
18515: LD_INT 2
18517: PUSH
18518: LD_INT 4
18520: PUSH
18521: LD_INT 5
18523: PUSH
18524: LD_INT 7
18526: PUSH
18527: LD_INT 11
18529: PUSH
18530: LD_INT 12
18532: PUSH
18533: LD_INT 15
18535: PUSH
18536: LD_INT 16
18538: PUSH
18539: LD_INT 20
18541: PUSH
18542: LD_INT 21
18544: PUSH
18545: LD_INT 22
18547: PUSH
18548: LD_INT 23
18550: PUSH
18551: LD_INT 25
18553: PUSH
18554: LD_INT 26
18556: PUSH
18557: LD_INT 30
18559: PUSH
18560: LD_INT 31
18562: PUSH
18563: LD_INT 32
18565: PUSH
18566: LD_INT 33
18568: PUSH
18569: LD_INT 34
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: PUSH
18593: LD_INT 101
18595: PUSH
18596: LD_INT 102
18598: PUSH
18599: LD_INT 103
18601: PUSH
18602: LD_INT 106
18604: PUSH
18605: LD_INT 108
18607: PUSH
18608: LD_INT 112
18610: PUSH
18611: LD_INT 113
18613: PUSH
18614: LD_INT 114
18616: PUSH
18617: LD_INT 116
18619: PUSH
18620: LD_INT 117
18622: PUSH
18623: LD_INT 118
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: ST_TO_ADDR
18643: GO 19274
18645: LD_INT 17
18647: DOUBLE
18648: EQUAL
18649: IFTRUE 18653
18651: GO 18877
18653: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
18654: LD_ADDR_VAR 0 1
18658: PUSH
18659: LD_INT 1
18661: PUSH
18662: LD_INT 2
18664: PUSH
18665: LD_INT 3
18667: PUSH
18668: LD_INT 4
18670: PUSH
18671: LD_INT 5
18673: PUSH
18674: LD_INT 6
18676: PUSH
18677: LD_INT 7
18679: PUSH
18680: LD_INT 8
18682: PUSH
18683: LD_INT 9
18685: PUSH
18686: LD_INT 10
18688: PUSH
18689: LD_INT 11
18691: PUSH
18692: LD_INT 12
18694: PUSH
18695: LD_INT 13
18697: PUSH
18698: LD_INT 14
18700: PUSH
18701: LD_INT 15
18703: PUSH
18704: LD_INT 16
18706: PUSH
18707: LD_INT 17
18709: PUSH
18710: LD_INT 18
18712: PUSH
18713: LD_INT 19
18715: PUSH
18716: LD_INT 20
18718: PUSH
18719: LD_INT 21
18721: PUSH
18722: LD_INT 22
18724: PUSH
18725: LD_INT 23
18727: PUSH
18728: LD_INT 24
18730: PUSH
18731: LD_INT 25
18733: PUSH
18734: LD_INT 26
18736: PUSH
18737: LD_INT 27
18739: PUSH
18740: LD_INT 28
18742: PUSH
18743: LD_INT 29
18745: PUSH
18746: LD_INT 30
18748: PUSH
18749: LD_INT 31
18751: PUSH
18752: LD_INT 32
18754: PUSH
18755: LD_INT 33
18757: PUSH
18758: LD_INT 34
18760: PUSH
18761: LD_INT 36
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: PUSH
18801: LD_INT 101
18803: PUSH
18804: LD_INT 102
18806: PUSH
18807: LD_INT 103
18809: PUSH
18810: LD_INT 104
18812: PUSH
18813: LD_INT 105
18815: PUSH
18816: LD_INT 106
18818: PUSH
18819: LD_INT 107
18821: PUSH
18822: LD_INT 108
18824: PUSH
18825: LD_INT 109
18827: PUSH
18828: LD_INT 110
18830: PUSH
18831: LD_INT 111
18833: PUSH
18834: LD_INT 112
18836: PUSH
18837: LD_INT 113
18839: PUSH
18840: LD_INT 114
18842: PUSH
18843: LD_INT 116
18845: PUSH
18846: LD_INT 117
18848: PUSH
18849: LD_INT 118
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: ST_TO_ADDR
18875: GO 19274
18877: LD_INT 18
18879: DOUBLE
18880: EQUAL
18881: IFTRUE 18885
18883: GO 19033
18885: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
18886: LD_ADDR_VAR 0 1
18890: PUSH
18891: LD_INT 2
18893: PUSH
18894: LD_INT 4
18896: PUSH
18897: LD_INT 5
18899: PUSH
18900: LD_INT 7
18902: PUSH
18903: LD_INT 11
18905: PUSH
18906: LD_INT 12
18908: PUSH
18909: LD_INT 15
18911: PUSH
18912: LD_INT 16
18914: PUSH
18915: LD_INT 20
18917: PUSH
18918: LD_INT 21
18920: PUSH
18921: LD_INT 22
18923: PUSH
18924: LD_INT 23
18926: PUSH
18927: LD_INT 25
18929: PUSH
18930: LD_INT 26
18932: PUSH
18933: LD_INT 30
18935: PUSH
18936: LD_INT 31
18938: PUSH
18939: LD_INT 32
18941: PUSH
18942: LD_INT 33
18944: PUSH
18945: LD_INT 34
18947: PUSH
18948: LD_INT 35
18950: PUSH
18951: LD_INT 36
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: LIST
18975: LIST
18976: PUSH
18977: LD_INT 101
18979: PUSH
18980: LD_INT 102
18982: PUSH
18983: LD_INT 103
18985: PUSH
18986: LD_INT 106
18988: PUSH
18989: LD_INT 108
18991: PUSH
18992: LD_INT 112
18994: PUSH
18995: LD_INT 113
18997: PUSH
18998: LD_INT 114
19000: PUSH
19001: LD_INT 115
19003: PUSH
19004: LD_INT 116
19006: PUSH
19007: LD_INT 117
19009: PUSH
19010: LD_INT 118
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: ST_TO_ADDR
19031: GO 19274
19033: LD_INT 19
19035: DOUBLE
19036: EQUAL
19037: IFTRUE 19041
19039: GO 19273
19041: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19042: LD_ADDR_VAR 0 1
19046: PUSH
19047: LD_INT 1
19049: PUSH
19050: LD_INT 2
19052: PUSH
19053: LD_INT 3
19055: PUSH
19056: LD_INT 4
19058: PUSH
19059: LD_INT 5
19061: PUSH
19062: LD_INT 6
19064: PUSH
19065: LD_INT 7
19067: PUSH
19068: LD_INT 8
19070: PUSH
19071: LD_INT 9
19073: PUSH
19074: LD_INT 10
19076: PUSH
19077: LD_INT 11
19079: PUSH
19080: LD_INT 12
19082: PUSH
19083: LD_INT 13
19085: PUSH
19086: LD_INT 14
19088: PUSH
19089: LD_INT 15
19091: PUSH
19092: LD_INT 16
19094: PUSH
19095: LD_INT 17
19097: PUSH
19098: LD_INT 18
19100: PUSH
19101: LD_INT 19
19103: PUSH
19104: LD_INT 20
19106: PUSH
19107: LD_INT 21
19109: PUSH
19110: LD_INT 22
19112: PUSH
19113: LD_INT 23
19115: PUSH
19116: LD_INT 24
19118: PUSH
19119: LD_INT 25
19121: PUSH
19122: LD_INT 26
19124: PUSH
19125: LD_INT 27
19127: PUSH
19128: LD_INT 28
19130: PUSH
19131: LD_INT 29
19133: PUSH
19134: LD_INT 30
19136: PUSH
19137: LD_INT 31
19139: PUSH
19140: LD_INT 32
19142: PUSH
19143: LD_INT 33
19145: PUSH
19146: LD_INT 34
19148: PUSH
19149: LD_INT 35
19151: PUSH
19152: LD_INT 36
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: PUSH
19193: LD_INT 101
19195: PUSH
19196: LD_INT 102
19198: PUSH
19199: LD_INT 103
19201: PUSH
19202: LD_INT 104
19204: PUSH
19205: LD_INT 105
19207: PUSH
19208: LD_INT 106
19210: PUSH
19211: LD_INT 107
19213: PUSH
19214: LD_INT 108
19216: PUSH
19217: LD_INT 109
19219: PUSH
19220: LD_INT 110
19222: PUSH
19223: LD_INT 111
19225: PUSH
19226: LD_INT 112
19228: PUSH
19229: LD_INT 113
19231: PUSH
19232: LD_INT 114
19234: PUSH
19235: LD_INT 115
19237: PUSH
19238: LD_INT 116
19240: PUSH
19241: LD_INT 117
19243: PUSH
19244: LD_INT 118
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: ST_TO_ADDR
19271: GO 19274
19273: POP
// end else
19274: GO 19505
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
19276: LD_ADDR_VAR 0 1
19280: PUSH
19281: LD_INT 1
19283: PUSH
19284: LD_INT 2
19286: PUSH
19287: LD_INT 3
19289: PUSH
19290: LD_INT 4
19292: PUSH
19293: LD_INT 5
19295: PUSH
19296: LD_INT 6
19298: PUSH
19299: LD_INT 7
19301: PUSH
19302: LD_INT 8
19304: PUSH
19305: LD_INT 9
19307: PUSH
19308: LD_INT 10
19310: PUSH
19311: LD_INT 11
19313: PUSH
19314: LD_INT 12
19316: PUSH
19317: LD_INT 13
19319: PUSH
19320: LD_INT 14
19322: PUSH
19323: LD_INT 15
19325: PUSH
19326: LD_INT 16
19328: PUSH
19329: LD_INT 17
19331: PUSH
19332: LD_INT 18
19334: PUSH
19335: LD_INT 19
19337: PUSH
19338: LD_INT 20
19340: PUSH
19341: LD_INT 21
19343: PUSH
19344: LD_INT 22
19346: PUSH
19347: LD_INT 23
19349: PUSH
19350: LD_INT 24
19352: PUSH
19353: LD_INT 25
19355: PUSH
19356: LD_INT 26
19358: PUSH
19359: LD_INT 27
19361: PUSH
19362: LD_INT 28
19364: PUSH
19365: LD_INT 29
19367: PUSH
19368: LD_INT 30
19370: PUSH
19371: LD_INT 31
19373: PUSH
19374: LD_INT 32
19376: PUSH
19377: LD_INT 33
19379: PUSH
19380: LD_INT 34
19382: PUSH
19383: LD_INT 35
19385: PUSH
19386: LD_INT 36
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: PUSH
19427: LD_INT 101
19429: PUSH
19430: LD_INT 102
19432: PUSH
19433: LD_INT 103
19435: PUSH
19436: LD_INT 104
19438: PUSH
19439: LD_INT 105
19441: PUSH
19442: LD_INT 106
19444: PUSH
19445: LD_INT 107
19447: PUSH
19448: LD_INT 108
19450: PUSH
19451: LD_INT 109
19453: PUSH
19454: LD_INT 110
19456: PUSH
19457: LD_INT 111
19459: PUSH
19460: LD_INT 112
19462: PUSH
19463: LD_INT 113
19465: PUSH
19466: LD_INT 114
19468: PUSH
19469: LD_INT 115
19471: PUSH
19472: LD_INT 116
19474: PUSH
19475: LD_INT 117
19477: PUSH
19478: LD_INT 118
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: LIST
19492: LIST
19493: LIST
19494: LIST
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: ST_TO_ADDR
// if result then
19505: LD_VAR 0 1
19509: IFFALSE 19798
// begin normal :=  ;
19511: LD_ADDR_VAR 0 3
19515: PUSH
19516: LD_STRING 
19518: ST_TO_ADDR
// hardcore :=  ;
19519: LD_ADDR_VAR 0 4
19523: PUSH
19524: LD_STRING 
19526: ST_TO_ADDR
// for i = 1 to normalCounter do
19527: LD_ADDR_VAR 0 5
19531: PUSH
19532: DOUBLE
19533: LD_INT 1
19535: DEC
19536: ST_TO_ADDR
19537: LD_EXP 39
19541: PUSH
19542: FOR_TO
19543: IFFALSE 19644
// begin tmp := 0 ;
19545: LD_ADDR_VAR 0 2
19549: PUSH
19550: LD_STRING 0
19552: ST_TO_ADDR
// if result [ 1 ] then
19553: LD_VAR 0 1
19557: PUSH
19558: LD_INT 1
19560: ARRAY
19561: IFFALSE 19626
// if result [ 1 ] [ 1 ] = i then
19563: LD_VAR 0 1
19567: PUSH
19568: LD_INT 1
19570: ARRAY
19571: PUSH
19572: LD_INT 1
19574: ARRAY
19575: PUSH
19576: LD_VAR 0 5
19580: EQUAL
19581: IFFALSE 19626
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
19583: LD_ADDR_VAR 0 1
19587: PUSH
19588: LD_VAR 0 1
19592: PPUSH
19593: LD_INT 1
19595: PPUSH
19596: LD_VAR 0 1
19600: PUSH
19601: LD_INT 1
19603: ARRAY
19604: PPUSH
19605: LD_INT 1
19607: PPUSH
19608: CALL_OW 3
19612: PPUSH
19613: CALL_OW 1
19617: ST_TO_ADDR
// tmp := 1 ;
19618: LD_ADDR_VAR 0 2
19622: PUSH
19623: LD_STRING 1
19625: ST_TO_ADDR
// end ; normal := normal & tmp ;
19626: LD_ADDR_VAR 0 3
19630: PUSH
19631: LD_VAR 0 3
19635: PUSH
19636: LD_VAR 0 2
19640: STR
19641: ST_TO_ADDR
// end ;
19642: GO 19542
19644: POP
19645: POP
// for i = 1 to hardcoreCounter do
19646: LD_ADDR_VAR 0 5
19650: PUSH
19651: DOUBLE
19652: LD_INT 1
19654: DEC
19655: ST_TO_ADDR
19656: LD_EXP 40
19660: PUSH
19661: FOR_TO
19662: IFFALSE 19767
// begin tmp := 0 ;
19664: LD_ADDR_VAR 0 2
19668: PUSH
19669: LD_STRING 0
19671: ST_TO_ADDR
// if result [ 2 ] then
19672: LD_VAR 0 1
19676: PUSH
19677: LD_INT 2
19679: ARRAY
19680: IFFALSE 19749
// if result [ 2 ] [ 1 ] = 100 + i then
19682: LD_VAR 0 1
19686: PUSH
19687: LD_INT 2
19689: ARRAY
19690: PUSH
19691: LD_INT 1
19693: ARRAY
19694: PUSH
19695: LD_INT 100
19697: PUSH
19698: LD_VAR 0 5
19702: PLUS
19703: EQUAL
19704: IFFALSE 19749
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
19706: LD_ADDR_VAR 0 1
19710: PUSH
19711: LD_VAR 0 1
19715: PPUSH
19716: LD_INT 2
19718: PPUSH
19719: LD_VAR 0 1
19723: PUSH
19724: LD_INT 2
19726: ARRAY
19727: PPUSH
19728: LD_INT 1
19730: PPUSH
19731: CALL_OW 3
19735: PPUSH
19736: CALL_OW 1
19740: ST_TO_ADDR
// tmp := 1 ;
19741: LD_ADDR_VAR 0 2
19745: PUSH
19746: LD_STRING 1
19748: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
19749: LD_ADDR_VAR 0 4
19753: PUSH
19754: LD_VAR 0 4
19758: PUSH
19759: LD_VAR 0 2
19763: STR
19764: ST_TO_ADDR
// end ;
19765: GO 19661
19767: POP
19768: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
19769: LD_STRING getStreamItemsFromMission("
19771: PUSH
19772: LD_VAR 0 3
19776: STR
19777: PUSH
19778: LD_STRING ","
19780: STR
19781: PUSH
19782: LD_VAR 0 4
19786: STR
19787: PUSH
19788: LD_STRING ")
19790: STR
19791: PPUSH
19792: CALL_OW 559
// end else
19796: GO 19805
// ToLua ( getStreamItemsFromMission("","") ) ;
19798: LD_STRING getStreamItemsFromMission("","")
19800: PPUSH
19801: CALL_OW 559
// end ;
19805: LD_VAR 0 1
19809: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
19810: LD_EXP 38
19814: PUSH
19815: LD_EXP 43
19819: AND
19820: IFFALSE 19944
19822: GO 19824
19824: DISABLE
19825: LD_INT 0
19827: PPUSH
19828: PPUSH
// begin enable ;
19829: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
19830: LD_ADDR_VAR 0 2
19834: PUSH
19835: LD_INT 22
19837: PUSH
19838: LD_OWVAR 2
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: LD_INT 2
19849: PUSH
19850: LD_INT 34
19852: PUSH
19853: LD_INT 7
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PUSH
19860: LD_INT 34
19862: PUSH
19863: LD_INT 45
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: LD_INT 34
19872: PUSH
19873: LD_INT 28
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PUSH
19880: LD_INT 34
19882: PUSH
19883: LD_INT 47
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PPUSH
19901: CALL_OW 69
19905: ST_TO_ADDR
// if not tmp then
19906: LD_VAR 0 2
19910: NOT
19911: IFFALSE 19915
// exit ;
19913: GO 19944
// for i in tmp do
19915: LD_ADDR_VAR 0 1
19919: PUSH
19920: LD_VAR 0 2
19924: PUSH
19925: FOR_IN
19926: IFFALSE 19942
// begin SetLives ( i , 0 ) ;
19928: LD_VAR 0 1
19932: PPUSH
19933: LD_INT 0
19935: PPUSH
19936: CALL_OW 234
// end ;
19940: GO 19925
19942: POP
19943: POP
// end ;
19944: PPOPN 2
19946: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
19947: LD_EXP 38
19951: PUSH
19952: LD_EXP 44
19956: AND
19957: IFFALSE 20041
19959: GO 19961
19961: DISABLE
19962: LD_INT 0
19964: PPUSH
19965: PPUSH
// begin enable ;
19966: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
19967: LD_ADDR_VAR 0 2
19971: PUSH
19972: LD_INT 22
19974: PUSH
19975: LD_OWVAR 2
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 32
19986: PUSH
19987: LD_INT 3
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: EMPTY
19995: LIST
19996: LIST
19997: PPUSH
19998: CALL_OW 69
20002: ST_TO_ADDR
// if not tmp then
20003: LD_VAR 0 2
20007: NOT
20008: IFFALSE 20012
// exit ;
20010: GO 20041
// for i in tmp do
20012: LD_ADDR_VAR 0 1
20016: PUSH
20017: LD_VAR 0 2
20021: PUSH
20022: FOR_IN
20023: IFFALSE 20039
// begin SetLives ( i , 0 ) ;
20025: LD_VAR 0 1
20029: PPUSH
20030: LD_INT 0
20032: PPUSH
20033: CALL_OW 234
// end ;
20037: GO 20022
20039: POP
20040: POP
// end ;
20041: PPOPN 2
20043: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20044: LD_EXP 38
20048: PUSH
20049: LD_EXP 41
20053: AND
20054: IFFALSE 20147
20056: GO 20058
20058: DISABLE
20059: LD_INT 0
20061: PPUSH
// begin enable ;
20062: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20063: LD_ADDR_VAR 0 1
20067: PUSH
20068: LD_INT 22
20070: PUSH
20071: LD_OWVAR 2
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 2
20082: PUSH
20083: LD_INT 25
20085: PUSH
20086: LD_INT 5
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PUSH
20093: LD_INT 25
20095: PUSH
20096: LD_INT 9
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PUSH
20103: LD_INT 25
20105: PUSH
20106: LD_INT 8
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: PPUSH
20123: CALL_OW 69
20127: PUSH
20128: FOR_IN
20129: IFFALSE 20145
// begin SetClass ( i , 1 ) ;
20131: LD_VAR 0 1
20135: PPUSH
20136: LD_INT 1
20138: PPUSH
20139: CALL_OW 336
// end ;
20143: GO 20128
20145: POP
20146: POP
// end ;
20147: PPOPN 1
20149: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
20150: LD_EXP 38
20154: PUSH
20155: LD_EXP 42
20159: AND
20160: PUSH
20161: LD_OWVAR 65
20165: PUSH
20166: LD_INT 7
20168: LESS
20169: AND
20170: IFFALSE 20184
20172: GO 20174
20174: DISABLE
// begin enable ;
20175: ENABLE
// game_speed := 7 ;
20176: LD_ADDR_OWVAR 65
20180: PUSH
20181: LD_INT 7
20183: ST_TO_ADDR
// end ;
20184: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
20185: LD_EXP 38
20189: PUSH
20190: LD_EXP 45
20194: AND
20195: IFFALSE 20397
20197: GO 20199
20199: DISABLE
20200: LD_INT 0
20202: PPUSH
20203: PPUSH
20204: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20205: LD_ADDR_VAR 0 3
20209: PUSH
20210: LD_INT 81
20212: PUSH
20213: LD_OWVAR 2
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: PUSH
20222: LD_INT 21
20224: PUSH
20225: LD_INT 1
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: PPUSH
20236: CALL_OW 69
20240: ST_TO_ADDR
// if not tmp then
20241: LD_VAR 0 3
20245: NOT
20246: IFFALSE 20250
// exit ;
20248: GO 20397
// if tmp > 5 then
20250: LD_VAR 0 3
20254: PUSH
20255: LD_INT 5
20257: GREATER
20258: IFFALSE 20270
// k := 5 else
20260: LD_ADDR_VAR 0 2
20264: PUSH
20265: LD_INT 5
20267: ST_TO_ADDR
20268: GO 20280
// k := tmp ;
20270: LD_ADDR_VAR 0 2
20274: PUSH
20275: LD_VAR 0 3
20279: ST_TO_ADDR
// for i := 1 to k do
20280: LD_ADDR_VAR 0 1
20284: PUSH
20285: DOUBLE
20286: LD_INT 1
20288: DEC
20289: ST_TO_ADDR
20290: LD_VAR 0 2
20294: PUSH
20295: FOR_TO
20296: IFFALSE 20395
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
20298: LD_VAR 0 3
20302: PUSH
20303: LD_VAR 0 1
20307: ARRAY
20308: PPUSH
20309: LD_VAR 0 1
20313: PUSH
20314: LD_INT 4
20316: MOD
20317: PUSH
20318: LD_INT 1
20320: PLUS
20321: PPUSH
20322: CALL_OW 259
20326: PUSH
20327: LD_INT 10
20329: LESS
20330: IFFALSE 20393
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
20332: LD_VAR 0 3
20336: PUSH
20337: LD_VAR 0 1
20341: ARRAY
20342: PPUSH
20343: LD_VAR 0 1
20347: PUSH
20348: LD_INT 4
20350: MOD
20351: PUSH
20352: LD_INT 1
20354: PLUS
20355: PPUSH
20356: LD_VAR 0 3
20360: PUSH
20361: LD_VAR 0 1
20365: ARRAY
20366: PPUSH
20367: LD_VAR 0 1
20371: PUSH
20372: LD_INT 4
20374: MOD
20375: PUSH
20376: LD_INT 1
20378: PLUS
20379: PPUSH
20380: CALL_OW 259
20384: PUSH
20385: LD_INT 1
20387: PLUS
20388: PPUSH
20389: CALL_OW 237
20393: GO 20295
20395: POP
20396: POP
// end ;
20397: PPOPN 3
20399: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
20400: LD_EXP 38
20404: PUSH
20405: LD_EXP 46
20409: AND
20410: IFFALSE 20430
20412: GO 20414
20414: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
20415: LD_INT 4
20417: PPUSH
20418: LD_OWVAR 2
20422: PPUSH
20423: LD_INT 0
20425: PPUSH
20426: CALL_OW 324
20430: END
// every 0 0$1 trigger StreamModeActive and sShovel do
20431: LD_EXP 38
20435: PUSH
20436: LD_EXP 75
20440: AND
20441: IFFALSE 20461
20443: GO 20445
20445: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
20446: LD_INT 19
20448: PPUSH
20449: LD_OWVAR 2
20453: PPUSH
20454: LD_INT 0
20456: PPUSH
20457: CALL_OW 324
20461: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
20462: LD_EXP 38
20466: PUSH
20467: LD_EXP 47
20471: AND
20472: IFFALSE 20574
20474: GO 20476
20476: DISABLE
20477: LD_INT 0
20479: PPUSH
20480: PPUSH
// begin enable ;
20481: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
20482: LD_ADDR_VAR 0 2
20486: PUSH
20487: LD_INT 22
20489: PUSH
20490: LD_OWVAR 2
20494: PUSH
20495: EMPTY
20496: LIST
20497: LIST
20498: PUSH
20499: LD_INT 2
20501: PUSH
20502: LD_INT 34
20504: PUSH
20505: LD_INT 11
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: PUSH
20512: LD_INT 34
20514: PUSH
20515: LD_INT 30
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: LIST
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: PPUSH
20531: CALL_OW 69
20535: ST_TO_ADDR
// if not tmp then
20536: LD_VAR 0 2
20540: NOT
20541: IFFALSE 20545
// exit ;
20543: GO 20574
// for i in tmp do
20545: LD_ADDR_VAR 0 1
20549: PUSH
20550: LD_VAR 0 2
20554: PUSH
20555: FOR_IN
20556: IFFALSE 20572
// begin SetLives ( i , 0 ) ;
20558: LD_VAR 0 1
20562: PPUSH
20563: LD_INT 0
20565: PPUSH
20566: CALL_OW 234
// end ;
20570: GO 20555
20572: POP
20573: POP
// end ;
20574: PPOPN 2
20576: END
// every 0 0$1 trigger StreamModeActive and sBunker do
20577: LD_EXP 38
20581: PUSH
20582: LD_EXP 48
20586: AND
20587: IFFALSE 20607
20589: GO 20591
20591: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
20592: LD_INT 32
20594: PPUSH
20595: LD_OWVAR 2
20599: PPUSH
20600: LD_INT 0
20602: PPUSH
20603: CALL_OW 324
20607: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
20608: LD_EXP 38
20612: PUSH
20613: LD_EXP 49
20617: AND
20618: IFFALSE 20799
20620: GO 20622
20622: DISABLE
20623: LD_INT 0
20625: PPUSH
20626: PPUSH
20627: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
20628: LD_ADDR_VAR 0 2
20632: PUSH
20633: LD_INT 22
20635: PUSH
20636: LD_OWVAR 2
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: PUSH
20645: LD_INT 33
20647: PUSH
20648: LD_INT 3
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PPUSH
20659: CALL_OW 69
20663: ST_TO_ADDR
// if not tmp then
20664: LD_VAR 0 2
20668: NOT
20669: IFFALSE 20673
// exit ;
20671: GO 20799
// side := 0 ;
20673: LD_ADDR_VAR 0 3
20677: PUSH
20678: LD_INT 0
20680: ST_TO_ADDR
// for i := 1 to 8 do
20681: LD_ADDR_VAR 0 1
20685: PUSH
20686: DOUBLE
20687: LD_INT 1
20689: DEC
20690: ST_TO_ADDR
20691: LD_INT 8
20693: PUSH
20694: FOR_TO
20695: IFFALSE 20743
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
20697: LD_OWVAR 2
20701: PUSH
20702: LD_VAR 0 1
20706: NONEQUAL
20707: PUSH
20708: LD_OWVAR 2
20712: PPUSH
20713: LD_VAR 0 1
20717: PPUSH
20718: CALL_OW 81
20722: PUSH
20723: LD_INT 2
20725: EQUAL
20726: AND
20727: IFFALSE 20741
// begin side := i ;
20729: LD_ADDR_VAR 0 3
20733: PUSH
20734: LD_VAR 0 1
20738: ST_TO_ADDR
// break ;
20739: GO 20743
// end ;
20741: GO 20694
20743: POP
20744: POP
// if not side then
20745: LD_VAR 0 3
20749: NOT
20750: IFFALSE 20754
// exit ;
20752: GO 20799
// for i := 1 to tmp do
20754: LD_ADDR_VAR 0 1
20758: PUSH
20759: DOUBLE
20760: LD_INT 1
20762: DEC
20763: ST_TO_ADDR
20764: LD_VAR 0 2
20768: PUSH
20769: FOR_TO
20770: IFFALSE 20797
// if Prob ( 60 ) then
20772: LD_INT 60
20774: PPUSH
20775: CALL_OW 13
20779: IFFALSE 20795
// SetSide ( i , side ) ;
20781: LD_VAR 0 1
20785: PPUSH
20786: LD_VAR 0 3
20790: PPUSH
20791: CALL_OW 235
20795: GO 20769
20797: POP
20798: POP
// end ;
20799: PPOPN 3
20801: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
20802: LD_EXP 38
20806: PUSH
20807: LD_EXP 51
20811: AND
20812: IFFALSE 20931
20814: GO 20816
20816: DISABLE
20817: LD_INT 0
20819: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
20820: LD_ADDR_VAR 0 1
20824: PUSH
20825: LD_INT 22
20827: PUSH
20828: LD_OWVAR 2
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: PUSH
20837: LD_INT 21
20839: PUSH
20840: LD_INT 1
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 3
20849: PUSH
20850: LD_INT 23
20852: PUSH
20853: LD_INT 0
20855: PUSH
20856: EMPTY
20857: LIST
20858: LIST
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: LIST
20868: PPUSH
20869: CALL_OW 69
20873: PUSH
20874: FOR_IN
20875: IFFALSE 20929
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
20877: LD_VAR 0 1
20881: PPUSH
20882: CALL_OW 257
20886: PUSH
20887: LD_INT 1
20889: PUSH
20890: LD_INT 2
20892: PUSH
20893: LD_INT 3
20895: PUSH
20896: LD_INT 4
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: IN
20905: IFFALSE 20927
// SetClass ( un , rand ( 1 , 4 ) ) ;
20907: LD_VAR 0 1
20911: PPUSH
20912: LD_INT 1
20914: PPUSH
20915: LD_INT 4
20917: PPUSH
20918: CALL_OW 12
20922: PPUSH
20923: CALL_OW 336
20927: GO 20874
20929: POP
20930: POP
// end ;
20931: PPOPN 1
20933: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
20934: LD_EXP 38
20938: PUSH
20939: LD_EXP 50
20943: AND
20944: IFFALSE 21023
20946: GO 20948
20948: DISABLE
20949: LD_INT 0
20951: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20952: LD_ADDR_VAR 0 1
20956: PUSH
20957: LD_INT 22
20959: PUSH
20960: LD_OWVAR 2
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: LD_INT 21
20971: PUSH
20972: LD_INT 3
20974: PUSH
20975: EMPTY
20976: LIST
20977: LIST
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PPUSH
20983: CALL_OW 69
20987: ST_TO_ADDR
// if not tmp then
20988: LD_VAR 0 1
20992: NOT
20993: IFFALSE 20997
// exit ;
20995: GO 21023
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
20997: LD_VAR 0 1
21001: PUSH
21002: LD_INT 1
21004: PPUSH
21005: LD_VAR 0 1
21009: PPUSH
21010: CALL_OW 12
21014: ARRAY
21015: PPUSH
21016: LD_INT 100
21018: PPUSH
21019: CALL_OW 234
// end ;
21023: PPOPN 1
21025: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21026: LD_EXP 38
21030: PUSH
21031: LD_EXP 52
21035: AND
21036: IFFALSE 21134
21038: GO 21040
21040: DISABLE
21041: LD_INT 0
21043: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21044: LD_ADDR_VAR 0 1
21048: PUSH
21049: LD_INT 22
21051: PUSH
21052: LD_OWVAR 2
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 21
21063: PUSH
21064: LD_INT 1
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PPUSH
21075: CALL_OW 69
21079: ST_TO_ADDR
// if not tmp then
21080: LD_VAR 0 1
21084: NOT
21085: IFFALSE 21089
// exit ;
21087: GO 21134
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
21089: LD_VAR 0 1
21093: PUSH
21094: LD_INT 1
21096: PPUSH
21097: LD_VAR 0 1
21101: PPUSH
21102: CALL_OW 12
21106: ARRAY
21107: PPUSH
21108: LD_INT 1
21110: PPUSH
21111: LD_INT 4
21113: PPUSH
21114: CALL_OW 12
21118: PPUSH
21119: LD_INT 3000
21121: PPUSH
21122: LD_INT 9000
21124: PPUSH
21125: CALL_OW 12
21129: PPUSH
21130: CALL_OW 492
// end ;
21134: PPOPN 1
21136: END
// every 0 0$1 trigger StreamModeActive and sDepot do
21137: LD_EXP 38
21141: PUSH
21142: LD_EXP 53
21146: AND
21147: IFFALSE 21167
21149: GO 21151
21151: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
21152: LD_INT 1
21154: PPUSH
21155: LD_OWVAR 2
21159: PPUSH
21160: LD_INT 0
21162: PPUSH
21163: CALL_OW 324
21167: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
21168: LD_EXP 38
21172: PUSH
21173: LD_EXP 54
21177: AND
21178: IFFALSE 21261
21180: GO 21182
21182: DISABLE
21183: LD_INT 0
21185: PPUSH
21186: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21187: LD_ADDR_VAR 0 2
21191: PUSH
21192: LD_INT 22
21194: PUSH
21195: LD_OWVAR 2
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: PUSH
21204: LD_INT 21
21206: PUSH
21207: LD_INT 3
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: PPUSH
21218: CALL_OW 69
21222: ST_TO_ADDR
// if not tmp then
21223: LD_VAR 0 2
21227: NOT
21228: IFFALSE 21232
// exit ;
21230: GO 21261
// for i in tmp do
21232: LD_ADDR_VAR 0 1
21236: PUSH
21237: LD_VAR 0 2
21241: PUSH
21242: FOR_IN
21243: IFFALSE 21259
// SetBLevel ( i , 10 ) ;
21245: LD_VAR 0 1
21249: PPUSH
21250: LD_INT 10
21252: PPUSH
21253: CALL_OW 241
21257: GO 21242
21259: POP
21260: POP
// end ;
21261: PPOPN 2
21263: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
21264: LD_EXP 38
21268: PUSH
21269: LD_EXP 55
21273: AND
21274: IFFALSE 21385
21276: GO 21278
21278: DISABLE
21279: LD_INT 0
21281: PPUSH
21282: PPUSH
21283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21284: LD_ADDR_VAR 0 3
21288: PUSH
21289: LD_INT 22
21291: PUSH
21292: LD_OWVAR 2
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: PUSH
21301: LD_INT 25
21303: PUSH
21304: LD_INT 1
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PPUSH
21315: CALL_OW 69
21319: ST_TO_ADDR
// if not tmp then
21320: LD_VAR 0 3
21324: NOT
21325: IFFALSE 21329
// exit ;
21327: GO 21385
// un := tmp [ rand ( 1 , tmp ) ] ;
21329: LD_ADDR_VAR 0 2
21333: PUSH
21334: LD_VAR 0 3
21338: PUSH
21339: LD_INT 1
21341: PPUSH
21342: LD_VAR 0 3
21346: PPUSH
21347: CALL_OW 12
21351: ARRAY
21352: ST_TO_ADDR
// if Crawls ( un ) then
21353: LD_VAR 0 2
21357: PPUSH
21358: CALL_OW 318
21362: IFFALSE 21373
// ComWalk ( un ) ;
21364: LD_VAR 0 2
21368: PPUSH
21369: CALL_OW 138
// SetClass ( un , class_sniper ) ;
21373: LD_VAR 0 2
21377: PPUSH
21378: LD_INT 5
21380: PPUSH
21381: CALL_OW 336
// end ;
21385: PPOPN 3
21387: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
21388: LD_EXP 38
21392: PUSH
21393: LD_EXP 56
21397: AND
21398: PUSH
21399: LD_OWVAR 67
21403: PUSH
21404: LD_INT 4
21406: LESS
21407: AND
21408: IFFALSE 21427
21410: GO 21412
21412: DISABLE
// begin Difficulty := Difficulty + 1 ;
21413: LD_ADDR_OWVAR 67
21417: PUSH
21418: LD_OWVAR 67
21422: PUSH
21423: LD_INT 1
21425: PLUS
21426: ST_TO_ADDR
// end ;
21427: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
21428: LD_EXP 38
21432: PUSH
21433: LD_EXP 57
21437: AND
21438: IFFALSE 21541
21440: GO 21442
21442: DISABLE
21443: LD_INT 0
21445: PPUSH
// begin for i := 1 to 5 do
21446: LD_ADDR_VAR 0 1
21450: PUSH
21451: DOUBLE
21452: LD_INT 1
21454: DEC
21455: ST_TO_ADDR
21456: LD_INT 5
21458: PUSH
21459: FOR_TO
21460: IFFALSE 21539
// begin uc_nation := nation_nature ;
21462: LD_ADDR_OWVAR 21
21466: PUSH
21467: LD_INT 0
21469: ST_TO_ADDR
// uc_side := 0 ;
21470: LD_ADDR_OWVAR 20
21474: PUSH
21475: LD_INT 0
21477: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21478: LD_ADDR_OWVAR 29
21482: PUSH
21483: LD_INT 12
21485: PUSH
21486: LD_INT 12
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: ST_TO_ADDR
// hc_agressivity := 20 ;
21493: LD_ADDR_OWVAR 35
21497: PUSH
21498: LD_INT 20
21500: ST_TO_ADDR
// hc_class := class_tiger ;
21501: LD_ADDR_OWVAR 28
21505: PUSH
21506: LD_INT 14
21508: ST_TO_ADDR
// hc_gallery :=  ;
21509: LD_ADDR_OWVAR 33
21513: PUSH
21514: LD_STRING 
21516: ST_TO_ADDR
// hc_name :=  ;
21517: LD_ADDR_OWVAR 26
21521: PUSH
21522: LD_STRING 
21524: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
21525: CALL_OW 44
21529: PPUSH
21530: LD_INT 0
21532: PPUSH
21533: CALL_OW 51
// end ;
21537: GO 21459
21539: POP
21540: POP
// end ;
21541: PPOPN 1
21543: END
// every 0 0$1 trigger StreamModeActive and sBomb do
21544: LD_EXP 38
21548: PUSH
21549: LD_EXP 58
21553: AND
21554: IFFALSE 21563
21556: GO 21558
21558: DISABLE
// StreamSibBomb ;
21559: CALL 21564 0 0
21563: END
// export function StreamSibBomb ; var i , x , y ; begin
21564: LD_INT 0
21566: PPUSH
21567: PPUSH
21568: PPUSH
21569: PPUSH
// result := false ;
21570: LD_ADDR_VAR 0 1
21574: PUSH
21575: LD_INT 0
21577: ST_TO_ADDR
// for i := 1 to 16 do
21578: LD_ADDR_VAR 0 2
21582: PUSH
21583: DOUBLE
21584: LD_INT 1
21586: DEC
21587: ST_TO_ADDR
21588: LD_INT 16
21590: PUSH
21591: FOR_TO
21592: IFFALSE 21791
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21594: LD_ADDR_VAR 0 3
21598: PUSH
21599: LD_INT 10
21601: PUSH
21602: LD_INT 20
21604: PUSH
21605: LD_INT 30
21607: PUSH
21608: LD_INT 40
21610: PUSH
21611: LD_INT 50
21613: PUSH
21614: LD_INT 60
21616: PUSH
21617: LD_INT 70
21619: PUSH
21620: LD_INT 80
21622: PUSH
21623: LD_INT 90
21625: PUSH
21626: LD_INT 100
21628: PUSH
21629: LD_INT 110
21631: PUSH
21632: LD_INT 120
21634: PUSH
21635: LD_INT 130
21637: PUSH
21638: LD_INT 140
21640: PUSH
21641: LD_INT 150
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: PUSH
21661: LD_INT 1
21663: PPUSH
21664: LD_INT 15
21666: PPUSH
21667: CALL_OW 12
21671: ARRAY
21672: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21673: LD_ADDR_VAR 0 4
21677: PUSH
21678: LD_INT 10
21680: PUSH
21681: LD_INT 20
21683: PUSH
21684: LD_INT 30
21686: PUSH
21687: LD_INT 40
21689: PUSH
21690: LD_INT 50
21692: PUSH
21693: LD_INT 60
21695: PUSH
21696: LD_INT 70
21698: PUSH
21699: LD_INT 80
21701: PUSH
21702: LD_INT 90
21704: PUSH
21705: LD_INT 100
21707: PUSH
21708: LD_INT 110
21710: PUSH
21711: LD_INT 120
21713: PUSH
21714: LD_INT 130
21716: PUSH
21717: LD_INT 140
21719: PUSH
21720: LD_INT 150
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: PUSH
21740: LD_INT 1
21742: PPUSH
21743: LD_INT 15
21745: PPUSH
21746: CALL_OW 12
21750: ARRAY
21751: ST_TO_ADDR
// if ValidHex ( x , y ) then
21752: LD_VAR 0 3
21756: PPUSH
21757: LD_VAR 0 4
21761: PPUSH
21762: CALL_OW 488
21766: IFFALSE 21789
// begin result := [ x , y ] ;
21768: LD_ADDR_VAR 0 1
21772: PUSH
21773: LD_VAR 0 3
21777: PUSH
21778: LD_VAR 0 4
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: ST_TO_ADDR
// break ;
21787: GO 21791
// end ; end ;
21789: GO 21591
21791: POP
21792: POP
// if result then
21793: LD_VAR 0 1
21797: IFFALSE 21857
// begin ToLua ( playSibBomb() ) ;
21799: LD_STRING playSibBomb()
21801: PPUSH
21802: CALL_OW 559
// wait ( 0 0$14 ) ;
21806: LD_INT 490
21808: PPUSH
21809: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
21813: LD_VAR 0 1
21817: PUSH
21818: LD_INT 1
21820: ARRAY
21821: PPUSH
21822: LD_VAR 0 1
21826: PUSH
21827: LD_INT 2
21829: ARRAY
21830: PPUSH
21831: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
21835: LD_VAR 0 1
21839: PUSH
21840: LD_INT 1
21842: ARRAY
21843: PPUSH
21844: LD_VAR 0 1
21848: PUSH
21849: LD_INT 2
21851: ARRAY
21852: PPUSH
21853: CALL_OW 429
// end ; end ;
21857: LD_VAR 0 1
21861: RET
// every 0 0$1 trigger StreamModeActive and sReset do
21862: LD_EXP 38
21866: PUSH
21867: LD_EXP 60
21871: AND
21872: IFFALSE 21884
21874: GO 21876
21876: DISABLE
// YouLost (  ) ;
21877: LD_STRING 
21879: PPUSH
21880: CALL_OW 104
21884: END
// every 0 0$1 trigger StreamModeActive and sFog do
21885: LD_EXP 38
21889: PUSH
21890: LD_EXP 59
21894: AND
21895: IFFALSE 21909
21897: GO 21899
21899: DISABLE
// FogOff ( your_side ) ;
21900: LD_OWVAR 2
21904: PPUSH
21905: CALL_OW 344
21909: END
// every 0 0$1 trigger StreamModeActive and sSun do
21910: LD_EXP 38
21914: PUSH
21915: LD_EXP 61
21919: AND
21920: IFFALSE 21948
21922: GO 21924
21924: DISABLE
// begin solar_recharge_percent := 0 ;
21925: LD_ADDR_OWVAR 79
21929: PUSH
21930: LD_INT 0
21932: ST_TO_ADDR
// wait ( 5 5$00 ) ;
21933: LD_INT 10500
21935: PPUSH
21936: CALL_OW 67
// solar_recharge_percent := 100 ;
21940: LD_ADDR_OWVAR 79
21944: PUSH
21945: LD_INT 100
21947: ST_TO_ADDR
// end ;
21948: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
21949: LD_EXP 38
21953: PUSH
21954: LD_EXP 62
21958: AND
21959: IFFALSE 22198
21961: GO 21963
21963: DISABLE
21964: LD_INT 0
21966: PPUSH
21967: PPUSH
21968: PPUSH
// begin tmp := [ ] ;
21969: LD_ADDR_VAR 0 3
21973: PUSH
21974: EMPTY
21975: ST_TO_ADDR
// for i := 1 to 6 do
21976: LD_ADDR_VAR 0 1
21980: PUSH
21981: DOUBLE
21982: LD_INT 1
21984: DEC
21985: ST_TO_ADDR
21986: LD_INT 6
21988: PUSH
21989: FOR_TO
21990: IFFALSE 22095
// begin uc_nation := nation_nature ;
21992: LD_ADDR_OWVAR 21
21996: PUSH
21997: LD_INT 0
21999: ST_TO_ADDR
// uc_side := 0 ;
22000: LD_ADDR_OWVAR 20
22004: PUSH
22005: LD_INT 0
22007: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22008: LD_ADDR_OWVAR 29
22012: PUSH
22013: LD_INT 12
22015: PUSH
22016: LD_INT 12
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: ST_TO_ADDR
// hc_agressivity := 20 ;
22023: LD_ADDR_OWVAR 35
22027: PUSH
22028: LD_INT 20
22030: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22031: LD_ADDR_OWVAR 28
22035: PUSH
22036: LD_INT 17
22038: ST_TO_ADDR
// hc_gallery :=  ;
22039: LD_ADDR_OWVAR 33
22043: PUSH
22044: LD_STRING 
22046: ST_TO_ADDR
// hc_name :=  ;
22047: LD_ADDR_OWVAR 26
22051: PUSH
22052: LD_STRING 
22054: ST_TO_ADDR
// un := CreateHuman ;
22055: LD_ADDR_VAR 0 2
22059: PUSH
22060: CALL_OW 44
22064: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22065: LD_VAR 0 2
22069: PPUSH
22070: LD_INT 1
22072: PPUSH
22073: CALL_OW 51
// tmp := tmp ^ un ;
22077: LD_ADDR_VAR 0 3
22081: PUSH
22082: LD_VAR 0 3
22086: PUSH
22087: LD_VAR 0 2
22091: ADD
22092: ST_TO_ADDR
// end ;
22093: GO 21989
22095: POP
22096: POP
// repeat wait ( 0 0$1 ) ;
22097: LD_INT 35
22099: PPUSH
22100: CALL_OW 67
// for un in tmp do
22104: LD_ADDR_VAR 0 2
22108: PUSH
22109: LD_VAR 0 3
22113: PUSH
22114: FOR_IN
22115: IFFALSE 22189
// begin if IsDead ( un ) then
22117: LD_VAR 0 2
22121: PPUSH
22122: CALL_OW 301
22126: IFFALSE 22146
// begin tmp := tmp diff un ;
22128: LD_ADDR_VAR 0 3
22132: PUSH
22133: LD_VAR 0 3
22137: PUSH
22138: LD_VAR 0 2
22142: DIFF
22143: ST_TO_ADDR
// continue ;
22144: GO 22114
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
22146: LD_VAR 0 2
22150: PPUSH
22151: LD_INT 3
22153: PUSH
22154: LD_INT 22
22156: PUSH
22157: LD_INT 0
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: PPUSH
22168: CALL_OW 69
22172: PPUSH
22173: LD_VAR 0 2
22177: PPUSH
22178: CALL_OW 74
22182: PPUSH
22183: CALL_OW 115
// end ;
22187: GO 22114
22189: POP
22190: POP
// until not tmp ;
22191: LD_VAR 0 3
22195: NOT
22196: IFFALSE 22097
// end ;
22198: PPOPN 3
22200: END
// every 0 0$1 trigger StreamModeActive and sTroll do
22201: LD_EXP 38
22205: PUSH
22206: LD_EXP 63
22210: AND
22211: IFFALSE 22265
22213: GO 22215
22215: DISABLE
// begin ToLua ( displayTroll(); ) ;
22216: LD_STRING displayTroll();
22218: PPUSH
22219: CALL_OW 559
// wait ( 3 3$00 ) ;
22223: LD_INT 6300
22225: PPUSH
22226: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22230: LD_STRING hideTroll();
22232: PPUSH
22233: CALL_OW 559
// wait ( 1 1$00 ) ;
22237: LD_INT 2100
22239: PPUSH
22240: CALL_OW 67
// ToLua ( displayTroll(); ) ;
22244: LD_STRING displayTroll();
22246: PPUSH
22247: CALL_OW 559
// wait ( 1 1$00 ) ;
22251: LD_INT 2100
22253: PPUSH
22254: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22258: LD_STRING hideTroll();
22260: PPUSH
22261: CALL_OW 559
// end ;
22265: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
22266: LD_EXP 38
22270: PUSH
22271: LD_EXP 64
22275: AND
22276: IFFALSE 22339
22278: GO 22280
22280: DISABLE
22281: LD_INT 0
22283: PPUSH
// begin p := 0 ;
22284: LD_ADDR_VAR 0 1
22288: PUSH
22289: LD_INT 0
22291: ST_TO_ADDR
// repeat game_speed := 1 ;
22292: LD_ADDR_OWVAR 65
22296: PUSH
22297: LD_INT 1
22299: ST_TO_ADDR
// wait ( 0 0$1 ) ;
22300: LD_INT 35
22302: PPUSH
22303: CALL_OW 67
// p := p + 1 ;
22307: LD_ADDR_VAR 0 1
22311: PUSH
22312: LD_VAR 0 1
22316: PUSH
22317: LD_INT 1
22319: PLUS
22320: ST_TO_ADDR
// until p >= 60 ;
22321: LD_VAR 0 1
22325: PUSH
22326: LD_INT 60
22328: GREATEREQUAL
22329: IFFALSE 22292
// game_speed := 4 ;
22331: LD_ADDR_OWVAR 65
22335: PUSH
22336: LD_INT 4
22338: ST_TO_ADDR
// end ;
22339: PPOPN 1
22341: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
22342: LD_EXP 38
22346: PUSH
22347: LD_EXP 65
22351: AND
22352: IFFALSE 22498
22354: GO 22356
22356: DISABLE
22357: LD_INT 0
22359: PPUSH
22360: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22361: LD_ADDR_VAR 0 1
22365: PUSH
22366: LD_INT 22
22368: PUSH
22369: LD_OWVAR 2
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: PUSH
22378: LD_INT 2
22380: PUSH
22381: LD_INT 30
22383: PUSH
22384: LD_INT 0
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: LD_INT 30
22393: PUSH
22394: LD_INT 1
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: LIST
22405: PUSH
22406: EMPTY
22407: LIST
22408: LIST
22409: PPUSH
22410: CALL_OW 69
22414: ST_TO_ADDR
// if not depot then
22415: LD_VAR 0 1
22419: NOT
22420: IFFALSE 22424
// exit ;
22422: GO 22498
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
22424: LD_ADDR_VAR 0 2
22428: PUSH
22429: LD_VAR 0 1
22433: PUSH
22434: LD_INT 1
22436: PPUSH
22437: LD_VAR 0 1
22441: PPUSH
22442: CALL_OW 12
22446: ARRAY
22447: PPUSH
22448: CALL_OW 274
22452: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
22453: LD_VAR 0 2
22457: PPUSH
22458: LD_INT 1
22460: PPUSH
22461: LD_INT 0
22463: PPUSH
22464: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
22468: LD_VAR 0 2
22472: PPUSH
22473: LD_INT 2
22475: PPUSH
22476: LD_INT 0
22478: PPUSH
22479: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
22483: LD_VAR 0 2
22487: PPUSH
22488: LD_INT 3
22490: PPUSH
22491: LD_INT 0
22493: PPUSH
22494: CALL_OW 277
// end ;
22498: PPOPN 2
22500: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
22501: LD_EXP 38
22505: PUSH
22506: LD_EXP 66
22510: AND
22511: IFFALSE 22608
22513: GO 22515
22515: DISABLE
22516: LD_INT 0
22518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22519: LD_ADDR_VAR 0 1
22523: PUSH
22524: LD_INT 22
22526: PUSH
22527: LD_OWVAR 2
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 21
22538: PUSH
22539: LD_INT 1
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PUSH
22546: LD_INT 3
22548: PUSH
22549: LD_INT 23
22551: PUSH
22552: LD_INT 0
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: LIST
22567: PPUSH
22568: CALL_OW 69
22572: ST_TO_ADDR
// if not tmp then
22573: LD_VAR 0 1
22577: NOT
22578: IFFALSE 22582
// exit ;
22580: GO 22608
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
22582: LD_VAR 0 1
22586: PUSH
22587: LD_INT 1
22589: PPUSH
22590: LD_VAR 0 1
22594: PPUSH
22595: CALL_OW 12
22599: ARRAY
22600: PPUSH
22601: LD_INT 200
22603: PPUSH
22604: CALL_OW 234
// end ;
22608: PPOPN 1
22610: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
22611: LD_EXP 38
22615: PUSH
22616: LD_EXP 67
22620: AND
22621: IFFALSE 22700
22623: GO 22625
22625: DISABLE
22626: LD_INT 0
22628: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
22629: LD_ADDR_VAR 0 1
22633: PUSH
22634: LD_INT 22
22636: PUSH
22637: LD_OWVAR 2
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PUSH
22646: LD_INT 21
22648: PUSH
22649: LD_INT 2
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: PPUSH
22660: CALL_OW 69
22664: ST_TO_ADDR
// if not tmp then
22665: LD_VAR 0 1
22669: NOT
22670: IFFALSE 22674
// exit ;
22672: GO 22700
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
22674: LD_VAR 0 1
22678: PUSH
22679: LD_INT 1
22681: PPUSH
22682: LD_VAR 0 1
22686: PPUSH
22687: CALL_OW 12
22691: ARRAY
22692: PPUSH
22693: LD_INT 60
22695: PPUSH
22696: CALL_OW 234
// end ;
22700: PPOPN 1
22702: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
22703: LD_EXP 38
22707: PUSH
22708: LD_EXP 68
22712: AND
22713: IFFALSE 22812
22715: GO 22717
22717: DISABLE
22718: LD_INT 0
22720: PPUSH
22721: PPUSH
// begin enable ;
22722: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
22723: LD_ADDR_VAR 0 1
22727: PUSH
22728: LD_INT 22
22730: PUSH
22731: LD_OWVAR 2
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: LD_INT 61
22742: PUSH
22743: EMPTY
22744: LIST
22745: PUSH
22746: LD_INT 33
22748: PUSH
22749: LD_INT 2
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: EMPTY
22757: LIST
22758: LIST
22759: LIST
22760: PPUSH
22761: CALL_OW 69
22765: ST_TO_ADDR
// if not tmp then
22766: LD_VAR 0 1
22770: NOT
22771: IFFALSE 22775
// exit ;
22773: GO 22812
// for i in tmp do
22775: LD_ADDR_VAR 0 2
22779: PUSH
22780: LD_VAR 0 1
22784: PUSH
22785: FOR_IN
22786: IFFALSE 22810
// if IsControledBy ( i ) then
22788: LD_VAR 0 2
22792: PPUSH
22793: CALL_OW 312
22797: IFFALSE 22808
// ComUnlink ( i ) ;
22799: LD_VAR 0 2
22803: PPUSH
22804: CALL_OW 136
22808: GO 22785
22810: POP
22811: POP
// end ;
22812: PPOPN 2
22814: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
22815: LD_EXP 38
22819: PUSH
22820: LD_EXP 69
22824: AND
22825: IFFALSE 22965
22827: GO 22829
22829: DISABLE
22830: LD_INT 0
22832: PPUSH
22833: PPUSH
// begin ToLua ( displayPowell(); ) ;
22834: LD_STRING displayPowell();
22836: PPUSH
22837: CALL_OW 559
// uc_side := 0 ;
22841: LD_ADDR_OWVAR 20
22845: PUSH
22846: LD_INT 0
22848: ST_TO_ADDR
// uc_nation := 2 ;
22849: LD_ADDR_OWVAR 21
22853: PUSH
22854: LD_INT 2
22856: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
22857: LD_ADDR_OWVAR 37
22861: PUSH
22862: LD_INT 14
22864: ST_TO_ADDR
// vc_engine := engine_siberite ;
22865: LD_ADDR_OWVAR 39
22869: PUSH
22870: LD_INT 3
22872: ST_TO_ADDR
// vc_control := control_apeman ;
22873: LD_ADDR_OWVAR 38
22877: PUSH
22878: LD_INT 5
22880: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
22881: LD_ADDR_OWVAR 40
22885: PUSH
22886: LD_INT 29
22888: ST_TO_ADDR
// un := CreateVehicle ;
22889: LD_ADDR_VAR 0 2
22893: PUSH
22894: CALL_OW 45
22898: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22899: LD_VAR 0 2
22903: PPUSH
22904: LD_INT 1
22906: PPUSH
22907: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22911: LD_INT 35
22913: PPUSH
22914: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22918: LD_VAR 0 2
22922: PPUSH
22923: LD_INT 22
22925: PUSH
22926: LD_OWVAR 2
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PPUSH
22935: CALL_OW 69
22939: PPUSH
22940: LD_VAR 0 2
22944: PPUSH
22945: CALL_OW 74
22949: PPUSH
22950: CALL_OW 115
// until IsDead ( un ) ;
22954: LD_VAR 0 2
22958: PPUSH
22959: CALL_OW 301
22963: IFFALSE 22911
// end ;
22965: PPOPN 2
22967: END
// every 0 0$1 trigger StreamModeActive and sStu do
22968: LD_EXP 38
22972: PUSH
22973: LD_EXP 77
22977: AND
22978: IFFALSE 22994
22980: GO 22982
22982: DISABLE
// begin ToLua ( displayStucuk(); ) ;
22983: LD_STRING displayStucuk();
22985: PPUSH
22986: CALL_OW 559
// ResetFog ;
22990: CALL_OW 335
// end ;
22994: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
22995: LD_EXP 38
22999: PUSH
23000: LD_EXP 70
23004: AND
23005: IFFALSE 23146
23007: GO 23009
23009: DISABLE
23010: LD_INT 0
23012: PPUSH
23013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23014: LD_ADDR_VAR 0 2
23018: PUSH
23019: LD_INT 22
23021: PUSH
23022: LD_OWVAR 2
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PUSH
23031: LD_INT 21
23033: PUSH
23034: LD_INT 1
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PPUSH
23045: CALL_OW 69
23049: ST_TO_ADDR
// if not tmp then
23050: LD_VAR 0 2
23054: NOT
23055: IFFALSE 23059
// exit ;
23057: GO 23146
// un := tmp [ rand ( 1 , tmp ) ] ;
23059: LD_ADDR_VAR 0 1
23063: PUSH
23064: LD_VAR 0 2
23068: PUSH
23069: LD_INT 1
23071: PPUSH
23072: LD_VAR 0 2
23076: PPUSH
23077: CALL_OW 12
23081: ARRAY
23082: ST_TO_ADDR
// SetSide ( un , 0 ) ;
23083: LD_VAR 0 1
23087: PPUSH
23088: LD_INT 0
23090: PPUSH
23091: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
23095: LD_VAR 0 1
23099: PPUSH
23100: LD_OWVAR 3
23104: PUSH
23105: LD_VAR 0 1
23109: DIFF
23110: PPUSH
23111: LD_VAR 0 1
23115: PPUSH
23116: CALL_OW 74
23120: PPUSH
23121: CALL_OW 115
// wait ( 0 0$20 ) ;
23125: LD_INT 700
23127: PPUSH
23128: CALL_OW 67
// SetSide ( un , your_side ) ;
23132: LD_VAR 0 1
23136: PPUSH
23137: LD_OWVAR 2
23141: PPUSH
23142: CALL_OW 235
// end ;
23146: PPOPN 2
23148: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
23149: LD_EXP 38
23153: PUSH
23154: LD_EXP 71
23158: AND
23159: IFFALSE 23265
23161: GO 23163
23163: DISABLE
23164: LD_INT 0
23166: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23167: LD_ADDR_VAR 0 1
23171: PUSH
23172: LD_INT 22
23174: PUSH
23175: LD_OWVAR 2
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 2
23186: PUSH
23187: LD_INT 30
23189: PUSH
23190: LD_INT 0
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 30
23199: PUSH
23200: LD_INT 1
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: LIST
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PPUSH
23216: CALL_OW 69
23220: ST_TO_ADDR
// if not depot then
23221: LD_VAR 0 1
23225: NOT
23226: IFFALSE 23230
// exit ;
23228: GO 23265
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
23230: LD_VAR 0 1
23234: PUSH
23235: LD_INT 1
23237: ARRAY
23238: PPUSH
23239: CALL_OW 250
23243: PPUSH
23244: LD_VAR 0 1
23248: PUSH
23249: LD_INT 1
23251: ARRAY
23252: PPUSH
23253: CALL_OW 251
23257: PPUSH
23258: LD_INT 70
23260: PPUSH
23261: CALL_OW 495
// end ;
23265: PPOPN 1
23267: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
23268: LD_EXP 38
23272: PUSH
23273: LD_EXP 72
23277: AND
23278: IFFALSE 23489
23280: GO 23282
23282: DISABLE
23283: LD_INT 0
23285: PPUSH
23286: PPUSH
23287: PPUSH
23288: PPUSH
23289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23290: LD_ADDR_VAR 0 5
23294: PUSH
23295: LD_INT 22
23297: PUSH
23298: LD_OWVAR 2
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 21
23309: PUSH
23310: LD_INT 1
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: PPUSH
23321: CALL_OW 69
23325: ST_TO_ADDR
// if not tmp then
23326: LD_VAR 0 5
23330: NOT
23331: IFFALSE 23335
// exit ;
23333: GO 23489
// for i in tmp do
23335: LD_ADDR_VAR 0 1
23339: PUSH
23340: LD_VAR 0 5
23344: PUSH
23345: FOR_IN
23346: IFFALSE 23487
// begin d := rand ( 0 , 5 ) ;
23348: LD_ADDR_VAR 0 4
23352: PUSH
23353: LD_INT 0
23355: PPUSH
23356: LD_INT 5
23358: PPUSH
23359: CALL_OW 12
23363: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
23364: LD_ADDR_VAR 0 2
23368: PUSH
23369: LD_VAR 0 1
23373: PPUSH
23374: CALL_OW 250
23378: PPUSH
23379: LD_VAR 0 4
23383: PPUSH
23384: LD_INT 3
23386: PPUSH
23387: LD_INT 12
23389: PPUSH
23390: CALL_OW 12
23394: PPUSH
23395: CALL_OW 272
23399: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
23400: LD_ADDR_VAR 0 3
23404: PUSH
23405: LD_VAR 0 1
23409: PPUSH
23410: CALL_OW 251
23414: PPUSH
23415: LD_VAR 0 4
23419: PPUSH
23420: LD_INT 3
23422: PPUSH
23423: LD_INT 12
23425: PPUSH
23426: CALL_OW 12
23430: PPUSH
23431: CALL_OW 273
23435: ST_TO_ADDR
// if ValidHex ( x , y ) then
23436: LD_VAR 0 2
23440: PPUSH
23441: LD_VAR 0 3
23445: PPUSH
23446: CALL_OW 488
23450: IFFALSE 23485
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
23452: LD_VAR 0 1
23456: PPUSH
23457: LD_VAR 0 2
23461: PPUSH
23462: LD_VAR 0 3
23466: PPUSH
23467: LD_INT 3
23469: PPUSH
23470: LD_INT 6
23472: PPUSH
23473: CALL_OW 12
23477: PPUSH
23478: LD_INT 1
23480: PPUSH
23481: CALL_OW 483
// end ;
23485: GO 23345
23487: POP
23488: POP
// end ;
23489: PPOPN 5
23491: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
23492: LD_EXP 38
23496: PUSH
23497: LD_EXP 73
23501: AND
23502: IFFALSE 23596
23504: GO 23506
23506: DISABLE
23507: LD_INT 0
23509: PPUSH
23510: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
23511: LD_ADDR_VAR 0 2
23515: PUSH
23516: LD_INT 22
23518: PUSH
23519: LD_OWVAR 2
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 32
23530: PUSH
23531: LD_INT 1
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: PUSH
23538: LD_INT 21
23540: PUSH
23541: LD_INT 2
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: LIST
23552: PPUSH
23553: CALL_OW 69
23557: ST_TO_ADDR
// if not tmp then
23558: LD_VAR 0 2
23562: NOT
23563: IFFALSE 23567
// exit ;
23565: GO 23596
// for i in tmp do
23567: LD_ADDR_VAR 0 1
23571: PUSH
23572: LD_VAR 0 2
23576: PUSH
23577: FOR_IN
23578: IFFALSE 23594
// SetFuel ( i , 0 ) ;
23580: LD_VAR 0 1
23584: PPUSH
23585: LD_INT 0
23587: PPUSH
23588: CALL_OW 240
23592: GO 23577
23594: POP
23595: POP
// end ;
23596: PPOPN 2
23598: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
23599: LD_EXP 38
23603: PUSH
23604: LD_EXP 74
23608: AND
23609: IFFALSE 23675
23611: GO 23613
23613: DISABLE
23614: LD_INT 0
23616: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23617: LD_ADDR_VAR 0 1
23621: PUSH
23622: LD_INT 22
23624: PUSH
23625: LD_OWVAR 2
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: PUSH
23634: LD_INT 30
23636: PUSH
23637: LD_INT 29
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: PPUSH
23648: CALL_OW 69
23652: ST_TO_ADDR
// if not tmp then
23653: LD_VAR 0 1
23657: NOT
23658: IFFALSE 23662
// exit ;
23660: GO 23675
// DestroyUnit ( tmp [ 1 ] ) ;
23662: LD_VAR 0 1
23666: PUSH
23667: LD_INT 1
23669: ARRAY
23670: PPUSH
23671: CALL_OW 65
// end ;
23675: PPOPN 1
23677: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
23678: LD_EXP 38
23682: PUSH
23683: LD_EXP 76
23687: AND
23688: IFFALSE 23817
23690: GO 23692
23692: DISABLE
23693: LD_INT 0
23695: PPUSH
// begin uc_side := 0 ;
23696: LD_ADDR_OWVAR 20
23700: PUSH
23701: LD_INT 0
23703: ST_TO_ADDR
// uc_nation := nation_arabian ;
23704: LD_ADDR_OWVAR 21
23708: PUSH
23709: LD_INT 2
23711: ST_TO_ADDR
// hc_gallery :=  ;
23712: LD_ADDR_OWVAR 33
23716: PUSH
23717: LD_STRING 
23719: ST_TO_ADDR
// hc_name :=  ;
23720: LD_ADDR_OWVAR 26
23724: PUSH
23725: LD_STRING 
23727: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
23728: LD_INT 1
23730: PPUSH
23731: LD_INT 11
23733: PPUSH
23734: LD_INT 10
23736: PPUSH
23737: CALL_OW 380
// un := CreateHuman ;
23741: LD_ADDR_VAR 0 1
23745: PUSH
23746: CALL_OW 44
23750: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23751: LD_VAR 0 1
23755: PPUSH
23756: LD_INT 1
23758: PPUSH
23759: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23763: LD_INT 35
23765: PPUSH
23766: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23770: LD_VAR 0 1
23774: PPUSH
23775: LD_INT 22
23777: PUSH
23778: LD_OWVAR 2
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PPUSH
23787: CALL_OW 69
23791: PPUSH
23792: LD_VAR 0 1
23796: PPUSH
23797: CALL_OW 74
23801: PPUSH
23802: CALL_OW 115
// until IsDead ( un ) ;
23806: LD_VAR 0 1
23810: PPUSH
23811: CALL_OW 301
23815: IFFALSE 23763
// end ;
23817: PPOPN 1
23819: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
23820: LD_EXP 38
23824: PUSH
23825: LD_EXP 78
23829: AND
23830: IFFALSE 23842
23832: GO 23834
23834: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
23835: LD_STRING earthquake(getX(game), 0, 32)
23837: PPUSH
23838: CALL_OW 559
23842: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
23843: LD_EXP 38
23847: PUSH
23848: LD_EXP 79
23852: AND
23853: IFFALSE 23944
23855: GO 23857
23857: DISABLE
23858: LD_INT 0
23860: PPUSH
// begin enable ;
23861: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
23862: LD_ADDR_VAR 0 1
23866: PUSH
23867: LD_INT 22
23869: PUSH
23870: LD_OWVAR 2
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: PUSH
23879: LD_INT 21
23881: PUSH
23882: LD_INT 2
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 33
23891: PUSH
23892: LD_INT 3
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: LIST
23903: PPUSH
23904: CALL_OW 69
23908: ST_TO_ADDR
// if not tmp then
23909: LD_VAR 0 1
23913: NOT
23914: IFFALSE 23918
// exit ;
23916: GO 23944
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23918: LD_VAR 0 1
23922: PUSH
23923: LD_INT 1
23925: PPUSH
23926: LD_VAR 0 1
23930: PPUSH
23931: CALL_OW 12
23935: ARRAY
23936: PPUSH
23937: LD_INT 1
23939: PPUSH
23940: CALL_OW 234
// end ;
23944: PPOPN 1
23946: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
23947: LD_EXP 38
23951: PUSH
23952: LD_EXP 80
23956: AND
23957: IFFALSE 24098
23959: GO 23961
23961: DISABLE
23962: LD_INT 0
23964: PPUSH
23965: PPUSH
23966: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23967: LD_ADDR_VAR 0 3
23971: PUSH
23972: LD_INT 22
23974: PUSH
23975: LD_OWVAR 2
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: LD_INT 25
23986: PUSH
23987: LD_INT 1
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: PPUSH
23998: CALL_OW 69
24002: ST_TO_ADDR
// if not tmp then
24003: LD_VAR 0 3
24007: NOT
24008: IFFALSE 24012
// exit ;
24010: GO 24098
// un := tmp [ rand ( 1 , tmp ) ] ;
24012: LD_ADDR_VAR 0 2
24016: PUSH
24017: LD_VAR 0 3
24021: PUSH
24022: LD_INT 1
24024: PPUSH
24025: LD_VAR 0 3
24029: PPUSH
24030: CALL_OW 12
24034: ARRAY
24035: ST_TO_ADDR
// if Crawls ( un ) then
24036: LD_VAR 0 2
24040: PPUSH
24041: CALL_OW 318
24045: IFFALSE 24056
// ComWalk ( un ) ;
24047: LD_VAR 0 2
24051: PPUSH
24052: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24056: LD_VAR 0 2
24060: PPUSH
24061: LD_INT 9
24063: PPUSH
24064: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24068: LD_INT 28
24070: PPUSH
24071: LD_OWVAR 2
24075: PPUSH
24076: LD_INT 2
24078: PPUSH
24079: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
24083: LD_INT 29
24085: PPUSH
24086: LD_OWVAR 2
24090: PPUSH
24091: LD_INT 2
24093: PPUSH
24094: CALL_OW 322
// end ;
24098: PPOPN 3
24100: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
24101: LD_EXP 38
24105: PUSH
24106: LD_EXP 81
24110: AND
24111: IFFALSE 24222
24113: GO 24115
24115: DISABLE
24116: LD_INT 0
24118: PPUSH
24119: PPUSH
24120: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24121: LD_ADDR_VAR 0 3
24125: PUSH
24126: LD_INT 22
24128: PUSH
24129: LD_OWVAR 2
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: LD_INT 25
24140: PUSH
24141: LD_INT 1
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PPUSH
24152: CALL_OW 69
24156: ST_TO_ADDR
// if not tmp then
24157: LD_VAR 0 3
24161: NOT
24162: IFFALSE 24166
// exit ;
24164: GO 24222
// un := tmp [ rand ( 1 , tmp ) ] ;
24166: LD_ADDR_VAR 0 2
24170: PUSH
24171: LD_VAR 0 3
24175: PUSH
24176: LD_INT 1
24178: PPUSH
24179: LD_VAR 0 3
24183: PPUSH
24184: CALL_OW 12
24188: ARRAY
24189: ST_TO_ADDR
// if Crawls ( un ) then
24190: LD_VAR 0 2
24194: PPUSH
24195: CALL_OW 318
24199: IFFALSE 24210
// ComWalk ( un ) ;
24201: LD_VAR 0 2
24205: PPUSH
24206: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24210: LD_VAR 0 2
24214: PPUSH
24215: LD_INT 8
24217: PPUSH
24218: CALL_OW 336
// end ;
24222: PPOPN 3
24224: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
24225: LD_EXP 38
24229: PUSH
24230: LD_EXP 82
24234: AND
24235: IFFALSE 24379
24237: GO 24239
24239: DISABLE
24240: LD_INT 0
24242: PPUSH
24243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
24244: LD_ADDR_VAR 0 2
24248: PUSH
24249: LD_INT 22
24251: PUSH
24252: LD_OWVAR 2
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: LD_INT 21
24263: PUSH
24264: LD_INT 2
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: LD_INT 2
24273: PUSH
24274: LD_INT 34
24276: PUSH
24277: LD_INT 12
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: LD_INT 34
24286: PUSH
24287: LD_INT 51
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: LD_INT 34
24296: PUSH
24297: LD_INT 32
24299: PUSH
24300: EMPTY
24301: LIST
24302: LIST
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: LIST
24314: PPUSH
24315: CALL_OW 69
24319: ST_TO_ADDR
// if not tmp then
24320: LD_VAR 0 2
24324: NOT
24325: IFFALSE 24329
// exit ;
24327: GO 24379
// for i in tmp do
24329: LD_ADDR_VAR 0 1
24333: PUSH
24334: LD_VAR 0 2
24338: PUSH
24339: FOR_IN
24340: IFFALSE 24377
// if GetCargo ( i , mat_artifact ) = 0 then
24342: LD_VAR 0 1
24346: PPUSH
24347: LD_INT 4
24349: PPUSH
24350: CALL_OW 289
24354: PUSH
24355: LD_INT 0
24357: EQUAL
24358: IFFALSE 24375
// SetCargo ( i , mat_siberit , 100 ) ;
24360: LD_VAR 0 1
24364: PPUSH
24365: LD_INT 3
24367: PPUSH
24368: LD_INT 100
24370: PPUSH
24371: CALL_OW 290
24375: GO 24339
24377: POP
24378: POP
// end ;
24379: PPOPN 2
24381: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
24382: LD_EXP 38
24386: PUSH
24387: LD_EXP 83
24391: AND
24392: IFFALSE 24575
24394: GO 24396
24396: DISABLE
24397: LD_INT 0
24399: PPUSH
24400: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24401: LD_ADDR_VAR 0 2
24405: PUSH
24406: LD_INT 22
24408: PUSH
24409: LD_OWVAR 2
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PPUSH
24418: CALL_OW 69
24422: ST_TO_ADDR
// if not tmp then
24423: LD_VAR 0 2
24427: NOT
24428: IFFALSE 24432
// exit ;
24430: GO 24575
// for i := 1 to 2 do
24432: LD_ADDR_VAR 0 1
24436: PUSH
24437: DOUBLE
24438: LD_INT 1
24440: DEC
24441: ST_TO_ADDR
24442: LD_INT 2
24444: PUSH
24445: FOR_TO
24446: IFFALSE 24573
// begin uc_side := your_side ;
24448: LD_ADDR_OWVAR 20
24452: PUSH
24453: LD_OWVAR 2
24457: ST_TO_ADDR
// uc_nation := nation_american ;
24458: LD_ADDR_OWVAR 21
24462: PUSH
24463: LD_INT 1
24465: ST_TO_ADDR
// vc_chassis := us_morphling ;
24466: LD_ADDR_OWVAR 37
24470: PUSH
24471: LD_INT 5
24473: ST_TO_ADDR
// vc_engine := engine_siberite ;
24474: LD_ADDR_OWVAR 39
24478: PUSH
24479: LD_INT 3
24481: ST_TO_ADDR
// vc_control := control_computer ;
24482: LD_ADDR_OWVAR 38
24486: PUSH
24487: LD_INT 3
24489: ST_TO_ADDR
// vc_weapon := us_double_laser ;
24490: LD_ADDR_OWVAR 40
24494: PUSH
24495: LD_INT 10
24497: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
24498: LD_VAR 0 2
24502: PUSH
24503: LD_INT 1
24505: ARRAY
24506: PPUSH
24507: CALL_OW 310
24511: NOT
24512: IFFALSE 24559
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
24514: CALL_OW 45
24518: PPUSH
24519: LD_VAR 0 2
24523: PUSH
24524: LD_INT 1
24526: ARRAY
24527: PPUSH
24528: CALL_OW 250
24532: PPUSH
24533: LD_VAR 0 2
24537: PUSH
24538: LD_INT 1
24540: ARRAY
24541: PPUSH
24542: CALL_OW 251
24546: PPUSH
24547: LD_INT 12
24549: PPUSH
24550: LD_INT 1
24552: PPUSH
24553: CALL_OW 50
24557: GO 24571
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
24559: CALL_OW 45
24563: PPUSH
24564: LD_INT 1
24566: PPUSH
24567: CALL_OW 51
// end ;
24571: GO 24445
24573: POP
24574: POP
// end ;
24575: PPOPN 2
24577: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
24578: LD_EXP 38
24582: PUSH
24583: LD_EXP 84
24587: AND
24588: IFFALSE 24810
24590: GO 24592
24592: DISABLE
24593: LD_INT 0
24595: PPUSH
24596: PPUSH
24597: PPUSH
24598: PPUSH
24599: PPUSH
24600: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24601: LD_ADDR_VAR 0 6
24605: PUSH
24606: LD_INT 22
24608: PUSH
24609: LD_OWVAR 2
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 21
24620: PUSH
24621: LD_INT 1
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PUSH
24628: LD_INT 3
24630: PUSH
24631: LD_INT 23
24633: PUSH
24634: LD_INT 0
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: LIST
24649: PPUSH
24650: CALL_OW 69
24654: ST_TO_ADDR
// if not tmp then
24655: LD_VAR 0 6
24659: NOT
24660: IFFALSE 24664
// exit ;
24662: GO 24810
// s1 := rand ( 1 , 4 ) ;
24664: LD_ADDR_VAR 0 2
24668: PUSH
24669: LD_INT 1
24671: PPUSH
24672: LD_INT 4
24674: PPUSH
24675: CALL_OW 12
24679: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
24680: LD_ADDR_VAR 0 4
24684: PUSH
24685: LD_VAR 0 6
24689: PUSH
24690: LD_INT 1
24692: ARRAY
24693: PPUSH
24694: LD_VAR 0 2
24698: PPUSH
24699: CALL_OW 259
24703: ST_TO_ADDR
// if s1 = 1 then
24704: LD_VAR 0 2
24708: PUSH
24709: LD_INT 1
24711: EQUAL
24712: IFFALSE 24732
// s2 := rand ( 2 , 4 ) else
24714: LD_ADDR_VAR 0 3
24718: PUSH
24719: LD_INT 2
24721: PPUSH
24722: LD_INT 4
24724: PPUSH
24725: CALL_OW 12
24729: ST_TO_ADDR
24730: GO 24740
// s2 := 1 ;
24732: LD_ADDR_VAR 0 3
24736: PUSH
24737: LD_INT 1
24739: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
24740: LD_ADDR_VAR 0 5
24744: PUSH
24745: LD_VAR 0 6
24749: PUSH
24750: LD_INT 1
24752: ARRAY
24753: PPUSH
24754: LD_VAR 0 3
24758: PPUSH
24759: CALL_OW 259
24763: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
24764: LD_VAR 0 6
24768: PUSH
24769: LD_INT 1
24771: ARRAY
24772: PPUSH
24773: LD_VAR 0 2
24777: PPUSH
24778: LD_VAR 0 5
24782: PPUSH
24783: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
24787: LD_VAR 0 6
24791: PUSH
24792: LD_INT 1
24794: ARRAY
24795: PPUSH
24796: LD_VAR 0 3
24800: PPUSH
24801: LD_VAR 0 4
24805: PPUSH
24806: CALL_OW 237
// end ;
24810: PPOPN 6
24812: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
24813: LD_EXP 38
24817: PUSH
24818: LD_EXP 85
24822: AND
24823: IFFALSE 24902
24825: GO 24827
24827: DISABLE
24828: LD_INT 0
24830: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
24831: LD_ADDR_VAR 0 1
24835: PUSH
24836: LD_INT 22
24838: PUSH
24839: LD_OWVAR 2
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: LD_INT 30
24850: PUSH
24851: LD_INT 3
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PPUSH
24862: CALL_OW 69
24866: ST_TO_ADDR
// if not tmp then
24867: LD_VAR 0 1
24871: NOT
24872: IFFALSE 24876
// exit ;
24874: GO 24902
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24876: LD_VAR 0 1
24880: PUSH
24881: LD_INT 1
24883: PPUSH
24884: LD_VAR 0 1
24888: PPUSH
24889: CALL_OW 12
24893: ARRAY
24894: PPUSH
24895: LD_INT 1
24897: PPUSH
24898: CALL_OW 234
// end ;
24902: PPOPN 1
24904: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
24905: LD_EXP 38
24909: PUSH
24910: LD_EXP 86
24914: AND
24915: IFFALSE 25027
24917: GO 24919
24919: DISABLE
24920: LD_INT 0
24922: PPUSH
24923: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
24924: LD_ADDR_VAR 0 2
24928: PUSH
24929: LD_INT 22
24931: PUSH
24932: LD_OWVAR 2
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 2
24943: PUSH
24944: LD_INT 30
24946: PUSH
24947: LD_INT 27
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: PUSH
24954: LD_INT 30
24956: PUSH
24957: LD_INT 26
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 30
24966: PUSH
24967: LD_INT 28
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: PPUSH
24984: CALL_OW 69
24988: ST_TO_ADDR
// if not tmp then
24989: LD_VAR 0 2
24993: NOT
24994: IFFALSE 24998
// exit ;
24996: GO 25027
// for i in tmp do
24998: LD_ADDR_VAR 0 1
25002: PUSH
25003: LD_VAR 0 2
25007: PUSH
25008: FOR_IN
25009: IFFALSE 25025
// SetLives ( i , 1 ) ;
25011: LD_VAR 0 1
25015: PPUSH
25016: LD_INT 1
25018: PPUSH
25019: CALL_OW 234
25023: GO 25008
25025: POP
25026: POP
// end ;
25027: PPOPN 2
25029: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25030: LD_EXP 38
25034: PUSH
25035: LD_EXP 87
25039: AND
25040: IFFALSE 25327
25042: GO 25044
25044: DISABLE
25045: LD_INT 0
25047: PPUSH
25048: PPUSH
25049: PPUSH
// begin i := rand ( 1 , 7 ) ;
25050: LD_ADDR_VAR 0 1
25054: PUSH
25055: LD_INT 1
25057: PPUSH
25058: LD_INT 7
25060: PPUSH
25061: CALL_OW 12
25065: ST_TO_ADDR
// case i of 1 :
25066: LD_VAR 0 1
25070: PUSH
25071: LD_INT 1
25073: DOUBLE
25074: EQUAL
25075: IFTRUE 25079
25077: GO 25089
25079: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
25080: LD_STRING earthquake(getX(game), 0, 32)
25082: PPUSH
25083: CALL_OW 559
25087: GO 25327
25089: LD_INT 2
25091: DOUBLE
25092: EQUAL
25093: IFTRUE 25097
25095: GO 25111
25097: POP
// begin ToLua ( displayStucuk(); ) ;
25098: LD_STRING displayStucuk();
25100: PPUSH
25101: CALL_OW 559
// ResetFog ;
25105: CALL_OW 335
// end ; 3 :
25109: GO 25327
25111: LD_INT 3
25113: DOUBLE
25114: EQUAL
25115: IFTRUE 25119
25117: GO 25223
25119: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25120: LD_ADDR_VAR 0 2
25124: PUSH
25125: LD_INT 22
25127: PUSH
25128: LD_OWVAR 2
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: LD_INT 25
25139: PUSH
25140: LD_INT 1
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PPUSH
25151: CALL_OW 69
25155: ST_TO_ADDR
// if not tmp then
25156: LD_VAR 0 2
25160: NOT
25161: IFFALSE 25165
// exit ;
25163: GO 25327
// un := tmp [ rand ( 1 , tmp ) ] ;
25165: LD_ADDR_VAR 0 3
25169: PUSH
25170: LD_VAR 0 2
25174: PUSH
25175: LD_INT 1
25177: PPUSH
25178: LD_VAR 0 2
25182: PPUSH
25183: CALL_OW 12
25187: ARRAY
25188: ST_TO_ADDR
// if Crawls ( un ) then
25189: LD_VAR 0 3
25193: PPUSH
25194: CALL_OW 318
25198: IFFALSE 25209
// ComWalk ( un ) ;
25200: LD_VAR 0 3
25204: PPUSH
25205: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25209: LD_VAR 0 3
25213: PPUSH
25214: LD_INT 8
25216: PPUSH
25217: CALL_OW 336
// end ; 4 :
25221: GO 25327
25223: LD_INT 4
25225: DOUBLE
25226: EQUAL
25227: IFTRUE 25231
25229: GO 25305
25231: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25232: LD_ADDR_VAR 0 2
25236: PUSH
25237: LD_INT 22
25239: PUSH
25240: LD_OWVAR 2
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 30
25251: PUSH
25252: LD_INT 29
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PPUSH
25263: CALL_OW 69
25267: ST_TO_ADDR
// if not tmp then
25268: LD_VAR 0 2
25272: NOT
25273: IFFALSE 25277
// exit ;
25275: GO 25327
// CenterNowOnUnits ( tmp [ 1 ] ) ;
25277: LD_VAR 0 2
25281: PUSH
25282: LD_INT 1
25284: ARRAY
25285: PPUSH
25286: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
25290: LD_VAR 0 2
25294: PUSH
25295: LD_INT 1
25297: ARRAY
25298: PPUSH
25299: CALL_OW 65
// end ; 5 .. 7 :
25303: GO 25327
25305: LD_INT 5
25307: DOUBLE
25308: GREATEREQUAL
25309: IFFALSE 25317
25311: LD_INT 7
25313: DOUBLE
25314: LESSEQUAL
25315: IFTRUE 25319
25317: GO 25326
25319: POP
// StreamSibBomb ; end ;
25320: CALL 21564 0 0
25324: GO 25327
25326: POP
// end ;
25327: PPOPN 3
25329: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
25330: LD_EXP 38
25334: PUSH
25335: LD_EXP 88
25339: AND
25340: IFFALSE 25496
25342: GO 25344
25344: DISABLE
25345: LD_INT 0
25347: PPUSH
25348: PPUSH
25349: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
25350: LD_ADDR_VAR 0 2
25354: PUSH
25355: LD_INT 81
25357: PUSH
25358: LD_OWVAR 2
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 2
25369: PUSH
25370: LD_INT 21
25372: PUSH
25373: LD_INT 1
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PUSH
25380: LD_INT 21
25382: PUSH
25383: LD_INT 2
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: LIST
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PPUSH
25399: CALL_OW 69
25403: ST_TO_ADDR
// if not tmp then
25404: LD_VAR 0 2
25408: NOT
25409: IFFALSE 25413
// exit ;
25411: GO 25496
// p := 0 ;
25413: LD_ADDR_VAR 0 3
25417: PUSH
25418: LD_INT 0
25420: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25421: LD_INT 35
25423: PPUSH
25424: CALL_OW 67
// p := p + 1 ;
25428: LD_ADDR_VAR 0 3
25432: PUSH
25433: LD_VAR 0 3
25437: PUSH
25438: LD_INT 1
25440: PLUS
25441: ST_TO_ADDR
// for i in tmp do
25442: LD_ADDR_VAR 0 1
25446: PUSH
25447: LD_VAR 0 2
25451: PUSH
25452: FOR_IN
25453: IFFALSE 25484
// if GetLives ( i ) < 1000 then
25455: LD_VAR 0 1
25459: PPUSH
25460: CALL_OW 256
25464: PUSH
25465: LD_INT 1000
25467: LESS
25468: IFFALSE 25482
// SetLives ( i , 1000 ) ;
25470: LD_VAR 0 1
25474: PPUSH
25475: LD_INT 1000
25477: PPUSH
25478: CALL_OW 234
25482: GO 25452
25484: POP
25485: POP
// until p > 20 ;
25486: LD_VAR 0 3
25490: PUSH
25491: LD_INT 20
25493: GREATER
25494: IFFALSE 25421
// end ;
25496: PPOPN 3
25498: END
// every 0 0$1 trigger StreamModeActive and sTime do
25499: LD_EXP 38
25503: PUSH
25504: LD_EXP 89
25508: AND
25509: IFFALSE 25544
25511: GO 25513
25513: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
25514: LD_INT 28
25516: PPUSH
25517: LD_OWVAR 2
25521: PPUSH
25522: LD_INT 2
25524: PPUSH
25525: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
25529: LD_INT 30
25531: PPUSH
25532: LD_OWVAR 2
25536: PPUSH
25537: LD_INT 2
25539: PPUSH
25540: CALL_OW 322
// end ;
25544: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
25545: LD_EXP 38
25549: PUSH
25550: LD_EXP 90
25554: AND
25555: IFFALSE 25676
25557: GO 25559
25559: DISABLE
25560: LD_INT 0
25562: PPUSH
25563: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25564: LD_ADDR_VAR 0 2
25568: PUSH
25569: LD_INT 22
25571: PUSH
25572: LD_OWVAR 2
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: LD_INT 21
25583: PUSH
25584: LD_INT 1
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PUSH
25591: LD_INT 3
25593: PUSH
25594: LD_INT 23
25596: PUSH
25597: LD_INT 0
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: LIST
25612: PPUSH
25613: CALL_OW 69
25617: ST_TO_ADDR
// if not tmp then
25618: LD_VAR 0 2
25622: NOT
25623: IFFALSE 25627
// exit ;
25625: GO 25676
// for i in tmp do
25627: LD_ADDR_VAR 0 1
25631: PUSH
25632: LD_VAR 0 2
25636: PUSH
25637: FOR_IN
25638: IFFALSE 25674
// begin if Crawls ( i ) then
25640: LD_VAR 0 1
25644: PPUSH
25645: CALL_OW 318
25649: IFFALSE 25660
// ComWalk ( i ) ;
25651: LD_VAR 0 1
25655: PPUSH
25656: CALL_OW 138
// SetClass ( i , 2 ) ;
25660: LD_VAR 0 1
25664: PPUSH
25665: LD_INT 2
25667: PPUSH
25668: CALL_OW 336
// end ;
25672: GO 25637
25674: POP
25675: POP
// end ;
25676: PPOPN 2
25678: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
25679: LD_EXP 38
25683: PUSH
25684: LD_EXP 91
25688: AND
25689: IFFALSE 25977
25691: GO 25693
25693: DISABLE
25694: LD_INT 0
25696: PPUSH
25697: PPUSH
25698: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
25699: LD_OWVAR 2
25703: PPUSH
25704: LD_INT 9
25706: PPUSH
25707: LD_INT 1
25709: PPUSH
25710: LD_INT 1
25712: PPUSH
25713: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
25717: LD_INT 9
25719: PPUSH
25720: LD_OWVAR 2
25724: PPUSH
25725: CALL_OW 343
// uc_side := 9 ;
25729: LD_ADDR_OWVAR 20
25733: PUSH
25734: LD_INT 9
25736: ST_TO_ADDR
// uc_nation := 2 ;
25737: LD_ADDR_OWVAR 21
25741: PUSH
25742: LD_INT 2
25744: ST_TO_ADDR
// hc_name := Dark Warrior ;
25745: LD_ADDR_OWVAR 26
25749: PUSH
25750: LD_STRING Dark Warrior
25752: ST_TO_ADDR
// hc_gallery :=  ;
25753: LD_ADDR_OWVAR 33
25757: PUSH
25758: LD_STRING 
25760: ST_TO_ADDR
// hc_noskilllimit := true ;
25761: LD_ADDR_OWVAR 76
25765: PUSH
25766: LD_INT 1
25768: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
25769: LD_ADDR_OWVAR 31
25773: PUSH
25774: LD_INT 30
25776: PUSH
25777: LD_INT 30
25779: PUSH
25780: LD_INT 30
25782: PUSH
25783: LD_INT 30
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: ST_TO_ADDR
// un := CreateHuman ;
25792: LD_ADDR_VAR 0 3
25796: PUSH
25797: CALL_OW 44
25801: ST_TO_ADDR
// hc_noskilllimit := false ;
25802: LD_ADDR_OWVAR 76
25806: PUSH
25807: LD_INT 0
25809: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25810: LD_VAR 0 3
25814: PPUSH
25815: LD_INT 1
25817: PPUSH
25818: CALL_OW 51
// ToLua ( playRanger() ) ;
25822: LD_STRING playRanger()
25824: PPUSH
25825: CALL_OW 559
// p := 0 ;
25829: LD_ADDR_VAR 0 2
25833: PUSH
25834: LD_INT 0
25836: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25837: LD_INT 35
25839: PPUSH
25840: CALL_OW 67
// p := p + 1 ;
25844: LD_ADDR_VAR 0 2
25848: PUSH
25849: LD_VAR 0 2
25853: PUSH
25854: LD_INT 1
25856: PLUS
25857: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
25858: LD_VAR 0 3
25862: PPUSH
25863: CALL_OW 256
25867: PUSH
25868: LD_INT 1000
25870: LESS
25871: IFFALSE 25885
// SetLives ( un , 1000 ) ;
25873: LD_VAR 0 3
25877: PPUSH
25878: LD_INT 1000
25880: PPUSH
25881: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
25885: LD_VAR 0 3
25889: PPUSH
25890: LD_INT 81
25892: PUSH
25893: LD_OWVAR 2
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 91
25904: PUSH
25905: LD_VAR 0 3
25909: PUSH
25910: LD_INT 30
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: LIST
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PPUSH
25922: CALL_OW 69
25926: PPUSH
25927: LD_VAR 0 3
25931: PPUSH
25932: CALL_OW 74
25936: PPUSH
25937: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
25941: LD_VAR 0 2
25945: PUSH
25946: LD_INT 80
25948: GREATER
25949: PUSH
25950: LD_VAR 0 3
25954: PPUSH
25955: CALL_OW 301
25959: OR
25960: IFFALSE 25837
// if un then
25962: LD_VAR 0 3
25966: IFFALSE 25977
// RemoveUnit ( un ) ;
25968: LD_VAR 0 3
25972: PPUSH
25973: CALL_OW 64
// end ;
25977: PPOPN 3
25979: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
25980: LD_EXP 92
25984: IFFALSE 26100
25986: GO 25988
25988: DISABLE
25989: LD_INT 0
25991: PPUSH
25992: PPUSH
25993: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25994: LD_ADDR_VAR 0 2
25998: PUSH
25999: LD_INT 81
26001: PUSH
26002: LD_OWVAR 2
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: LD_INT 21
26013: PUSH
26014: LD_INT 1
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PPUSH
26025: CALL_OW 69
26029: ST_TO_ADDR
// ToLua ( playComputer() ) ;
26030: LD_STRING playComputer()
26032: PPUSH
26033: CALL_OW 559
// if not tmp then
26037: LD_VAR 0 2
26041: NOT
26042: IFFALSE 26046
// exit ;
26044: GO 26100
// for i in tmp do
26046: LD_ADDR_VAR 0 1
26050: PUSH
26051: LD_VAR 0 2
26055: PUSH
26056: FOR_IN
26057: IFFALSE 26098
// for j := 1 to 4 do
26059: LD_ADDR_VAR 0 3
26063: PUSH
26064: DOUBLE
26065: LD_INT 1
26067: DEC
26068: ST_TO_ADDR
26069: LD_INT 4
26071: PUSH
26072: FOR_TO
26073: IFFALSE 26094
// SetSkill ( i , j , 10 ) ;
26075: LD_VAR 0 1
26079: PPUSH
26080: LD_VAR 0 3
26084: PPUSH
26085: LD_INT 10
26087: PPUSH
26088: CALL_OW 237
26092: GO 26072
26094: POP
26095: POP
26096: GO 26056
26098: POP
26099: POP
// end ;
26100: PPOPN 3
26102: END
// every 0 0$1 trigger s30 do var i , tmp ;
26103: LD_EXP 93
26107: IFFALSE 26176
26109: GO 26111
26111: DISABLE
26112: LD_INT 0
26114: PPUSH
26115: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26116: LD_ADDR_VAR 0 2
26120: PUSH
26121: LD_INT 22
26123: PUSH
26124: LD_OWVAR 2
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PPUSH
26133: CALL_OW 69
26137: ST_TO_ADDR
// if not tmp then
26138: LD_VAR 0 2
26142: NOT
26143: IFFALSE 26147
// exit ;
26145: GO 26176
// for i in tmp do
26147: LD_ADDR_VAR 0 1
26151: PUSH
26152: LD_VAR 0 2
26156: PUSH
26157: FOR_IN
26158: IFFALSE 26174
// SetLives ( i , 300 ) ;
26160: LD_VAR 0 1
26164: PPUSH
26165: LD_INT 300
26167: PPUSH
26168: CALL_OW 234
26172: GO 26157
26174: POP
26175: POP
// end ;
26176: PPOPN 2
26178: END
// every 0 0$1 trigger s60 do var i , tmp ;
26179: LD_EXP 94
26183: IFFALSE 26252
26185: GO 26187
26187: DISABLE
26188: LD_INT 0
26190: PPUSH
26191: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26192: LD_ADDR_VAR 0 2
26196: PUSH
26197: LD_INT 22
26199: PUSH
26200: LD_OWVAR 2
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PPUSH
26209: CALL_OW 69
26213: ST_TO_ADDR
// if not tmp then
26214: LD_VAR 0 2
26218: NOT
26219: IFFALSE 26223
// exit ;
26221: GO 26252
// for i in tmp do
26223: LD_ADDR_VAR 0 1
26227: PUSH
26228: LD_VAR 0 2
26232: PUSH
26233: FOR_IN
26234: IFFALSE 26250
// SetLives ( i , 600 ) ;
26236: LD_VAR 0 1
26240: PPUSH
26241: LD_INT 600
26243: PPUSH
26244: CALL_OW 234
26248: GO 26233
26250: POP
26251: POP
// end ;
26252: PPOPN 2
26254: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
26255: LD_INT 0
26257: PPUSH
// case cmd of 301 :
26258: LD_VAR 0 1
26262: PUSH
26263: LD_INT 301
26265: DOUBLE
26266: EQUAL
26267: IFTRUE 26271
26269: GO 26303
26271: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
26272: LD_VAR 0 6
26276: PPUSH
26277: LD_VAR 0 7
26281: PPUSH
26282: LD_VAR 0 8
26286: PPUSH
26287: LD_VAR 0 4
26291: PPUSH
26292: LD_VAR 0 5
26296: PPUSH
26297: CALL 27504 0 5
26301: GO 26424
26303: LD_INT 302
26305: DOUBLE
26306: EQUAL
26307: IFTRUE 26311
26309: GO 26348
26311: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
26312: LD_VAR 0 6
26316: PPUSH
26317: LD_VAR 0 7
26321: PPUSH
26322: LD_VAR 0 8
26326: PPUSH
26327: LD_VAR 0 9
26331: PPUSH
26332: LD_VAR 0 4
26336: PPUSH
26337: LD_VAR 0 5
26341: PPUSH
26342: CALL 27595 0 6
26346: GO 26424
26348: LD_INT 303
26350: DOUBLE
26351: EQUAL
26352: IFTRUE 26356
26354: GO 26393
26356: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
26357: LD_VAR 0 6
26361: PPUSH
26362: LD_VAR 0 7
26366: PPUSH
26367: LD_VAR 0 8
26371: PPUSH
26372: LD_VAR 0 9
26376: PPUSH
26377: LD_VAR 0 4
26381: PPUSH
26382: LD_VAR 0 5
26386: PPUSH
26387: CALL 26429 0 6
26391: GO 26424
26393: LD_INT 304
26395: DOUBLE
26396: EQUAL
26397: IFTRUE 26401
26399: GO 26423
26401: POP
// hHackTeleport ( unit , x , y ) ; end ;
26402: LD_VAR 0 2
26406: PPUSH
26407: LD_VAR 0 4
26411: PPUSH
26412: LD_VAR 0 5
26416: PPUSH
26417: CALL 28188 0 3
26421: GO 26424
26423: POP
// end ;
26424: LD_VAR 0 12
26428: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
26429: LD_INT 0
26431: PPUSH
26432: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
26433: LD_VAR 0 1
26437: PUSH
26438: LD_INT 1
26440: LESS
26441: PUSH
26442: LD_VAR 0 1
26446: PUSH
26447: LD_INT 3
26449: GREATER
26450: OR
26451: PUSH
26452: LD_VAR 0 5
26456: PPUSH
26457: LD_VAR 0 6
26461: PPUSH
26462: CALL_OW 428
26466: OR
26467: IFFALSE 26471
// exit ;
26469: GO 27191
// uc_side := your_side ;
26471: LD_ADDR_OWVAR 20
26475: PUSH
26476: LD_OWVAR 2
26480: ST_TO_ADDR
// uc_nation := nation ;
26481: LD_ADDR_OWVAR 21
26485: PUSH
26486: LD_VAR 0 1
26490: ST_TO_ADDR
// bc_level = 1 ;
26491: LD_ADDR_OWVAR 43
26495: PUSH
26496: LD_INT 1
26498: ST_TO_ADDR
// case btype of 1 :
26499: LD_VAR 0 2
26503: PUSH
26504: LD_INT 1
26506: DOUBLE
26507: EQUAL
26508: IFTRUE 26512
26510: GO 26523
26512: POP
// bc_type := b_depot ; 2 :
26513: LD_ADDR_OWVAR 42
26517: PUSH
26518: LD_INT 0
26520: ST_TO_ADDR
26521: GO 27135
26523: LD_INT 2
26525: DOUBLE
26526: EQUAL
26527: IFTRUE 26531
26529: GO 26542
26531: POP
// bc_type := b_warehouse ; 3 :
26532: LD_ADDR_OWVAR 42
26536: PUSH
26537: LD_INT 1
26539: ST_TO_ADDR
26540: GO 27135
26542: LD_INT 3
26544: DOUBLE
26545: EQUAL
26546: IFTRUE 26550
26548: GO 26561
26550: POP
// bc_type := b_lab ; 4 .. 9 :
26551: LD_ADDR_OWVAR 42
26555: PUSH
26556: LD_INT 6
26558: ST_TO_ADDR
26559: GO 27135
26561: LD_INT 4
26563: DOUBLE
26564: GREATEREQUAL
26565: IFFALSE 26573
26567: LD_INT 9
26569: DOUBLE
26570: LESSEQUAL
26571: IFTRUE 26575
26573: GO 26627
26575: POP
// begin bc_type := b_lab_half ;
26576: LD_ADDR_OWVAR 42
26580: PUSH
26581: LD_INT 7
26583: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
26584: LD_ADDR_OWVAR 44
26588: PUSH
26589: LD_INT 10
26591: PUSH
26592: LD_INT 11
26594: PUSH
26595: LD_INT 12
26597: PUSH
26598: LD_INT 15
26600: PUSH
26601: LD_INT 14
26603: PUSH
26604: LD_INT 13
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: PUSH
26615: LD_VAR 0 2
26619: PUSH
26620: LD_INT 3
26622: MINUS
26623: ARRAY
26624: ST_TO_ADDR
// end ; 10 .. 13 :
26625: GO 27135
26627: LD_INT 10
26629: DOUBLE
26630: GREATEREQUAL
26631: IFFALSE 26639
26633: LD_INT 13
26635: DOUBLE
26636: LESSEQUAL
26637: IFTRUE 26641
26639: GO 26718
26641: POP
// begin bc_type := b_lab_full ;
26642: LD_ADDR_OWVAR 42
26646: PUSH
26647: LD_INT 8
26649: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
26650: LD_ADDR_OWVAR 44
26654: PUSH
26655: LD_INT 10
26657: PUSH
26658: LD_INT 12
26660: PUSH
26661: LD_INT 14
26663: PUSH
26664: LD_INT 13
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: PUSH
26673: LD_VAR 0 2
26677: PUSH
26678: LD_INT 9
26680: MINUS
26681: ARRAY
26682: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
26683: LD_ADDR_OWVAR 45
26687: PUSH
26688: LD_INT 11
26690: PUSH
26691: LD_INT 15
26693: PUSH
26694: LD_INT 12
26696: PUSH
26697: LD_INT 15
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: PUSH
26706: LD_VAR 0 2
26710: PUSH
26711: LD_INT 9
26713: MINUS
26714: ARRAY
26715: ST_TO_ADDR
// end ; 14 :
26716: GO 27135
26718: LD_INT 14
26720: DOUBLE
26721: EQUAL
26722: IFTRUE 26726
26724: GO 26737
26726: POP
// bc_type := b_workshop ; 15 :
26727: LD_ADDR_OWVAR 42
26731: PUSH
26732: LD_INT 2
26734: ST_TO_ADDR
26735: GO 27135
26737: LD_INT 15
26739: DOUBLE
26740: EQUAL
26741: IFTRUE 26745
26743: GO 26756
26745: POP
// bc_type := b_factory ; 16 :
26746: LD_ADDR_OWVAR 42
26750: PUSH
26751: LD_INT 3
26753: ST_TO_ADDR
26754: GO 27135
26756: LD_INT 16
26758: DOUBLE
26759: EQUAL
26760: IFTRUE 26764
26762: GO 26775
26764: POP
// bc_type := b_ext_gun ; 17 :
26765: LD_ADDR_OWVAR 42
26769: PUSH
26770: LD_INT 17
26772: ST_TO_ADDR
26773: GO 27135
26775: LD_INT 17
26777: DOUBLE
26778: EQUAL
26779: IFTRUE 26783
26781: GO 26811
26783: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
26784: LD_ADDR_OWVAR 42
26788: PUSH
26789: LD_INT 19
26791: PUSH
26792: LD_INT 23
26794: PUSH
26795: LD_INT 19
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: LIST
26802: PUSH
26803: LD_VAR 0 1
26807: ARRAY
26808: ST_TO_ADDR
26809: GO 27135
26811: LD_INT 18
26813: DOUBLE
26814: EQUAL
26815: IFTRUE 26819
26817: GO 26830
26819: POP
// bc_type := b_ext_radar ; 19 :
26820: LD_ADDR_OWVAR 42
26824: PUSH
26825: LD_INT 20
26827: ST_TO_ADDR
26828: GO 27135
26830: LD_INT 19
26832: DOUBLE
26833: EQUAL
26834: IFTRUE 26838
26836: GO 26849
26838: POP
// bc_type := b_ext_radio ; 20 :
26839: LD_ADDR_OWVAR 42
26843: PUSH
26844: LD_INT 22
26846: ST_TO_ADDR
26847: GO 27135
26849: LD_INT 20
26851: DOUBLE
26852: EQUAL
26853: IFTRUE 26857
26855: GO 26868
26857: POP
// bc_type := b_ext_siberium ; 21 :
26858: LD_ADDR_OWVAR 42
26862: PUSH
26863: LD_INT 21
26865: ST_TO_ADDR
26866: GO 27135
26868: LD_INT 21
26870: DOUBLE
26871: EQUAL
26872: IFTRUE 26876
26874: GO 26887
26876: POP
// bc_type := b_ext_computer ; 22 :
26877: LD_ADDR_OWVAR 42
26881: PUSH
26882: LD_INT 24
26884: ST_TO_ADDR
26885: GO 27135
26887: LD_INT 22
26889: DOUBLE
26890: EQUAL
26891: IFTRUE 26895
26893: GO 26906
26895: POP
// bc_type := b_ext_track ; 23 :
26896: LD_ADDR_OWVAR 42
26900: PUSH
26901: LD_INT 16
26903: ST_TO_ADDR
26904: GO 27135
26906: LD_INT 23
26908: DOUBLE
26909: EQUAL
26910: IFTRUE 26914
26912: GO 26925
26914: POP
// bc_type := b_ext_laser ; 24 :
26915: LD_ADDR_OWVAR 42
26919: PUSH
26920: LD_INT 25
26922: ST_TO_ADDR
26923: GO 27135
26925: LD_INT 24
26927: DOUBLE
26928: EQUAL
26929: IFTRUE 26933
26931: GO 26944
26933: POP
// bc_type := b_control_tower ; 25 :
26934: LD_ADDR_OWVAR 42
26938: PUSH
26939: LD_INT 36
26941: ST_TO_ADDR
26942: GO 27135
26944: LD_INT 25
26946: DOUBLE
26947: EQUAL
26948: IFTRUE 26952
26950: GO 26963
26952: POP
// bc_type := b_breastwork ; 26 :
26953: LD_ADDR_OWVAR 42
26957: PUSH
26958: LD_INT 31
26960: ST_TO_ADDR
26961: GO 27135
26963: LD_INT 26
26965: DOUBLE
26966: EQUAL
26967: IFTRUE 26971
26969: GO 26982
26971: POP
// bc_type := b_bunker ; 27 :
26972: LD_ADDR_OWVAR 42
26976: PUSH
26977: LD_INT 32
26979: ST_TO_ADDR
26980: GO 27135
26982: LD_INT 27
26984: DOUBLE
26985: EQUAL
26986: IFTRUE 26990
26988: GO 27001
26990: POP
// bc_type := b_turret ; 28 :
26991: LD_ADDR_OWVAR 42
26995: PUSH
26996: LD_INT 33
26998: ST_TO_ADDR
26999: GO 27135
27001: LD_INT 28
27003: DOUBLE
27004: EQUAL
27005: IFTRUE 27009
27007: GO 27020
27009: POP
// bc_type := b_armoury ; 29 :
27010: LD_ADDR_OWVAR 42
27014: PUSH
27015: LD_INT 4
27017: ST_TO_ADDR
27018: GO 27135
27020: LD_INT 29
27022: DOUBLE
27023: EQUAL
27024: IFTRUE 27028
27026: GO 27039
27028: POP
// bc_type := b_barracks ; 30 :
27029: LD_ADDR_OWVAR 42
27033: PUSH
27034: LD_INT 5
27036: ST_TO_ADDR
27037: GO 27135
27039: LD_INT 30
27041: DOUBLE
27042: EQUAL
27043: IFTRUE 27047
27045: GO 27058
27047: POP
// bc_type := b_solar_power ; 31 :
27048: LD_ADDR_OWVAR 42
27052: PUSH
27053: LD_INT 27
27055: ST_TO_ADDR
27056: GO 27135
27058: LD_INT 31
27060: DOUBLE
27061: EQUAL
27062: IFTRUE 27066
27064: GO 27077
27066: POP
// bc_type := b_oil_power ; 32 :
27067: LD_ADDR_OWVAR 42
27071: PUSH
27072: LD_INT 26
27074: ST_TO_ADDR
27075: GO 27135
27077: LD_INT 32
27079: DOUBLE
27080: EQUAL
27081: IFTRUE 27085
27083: GO 27096
27085: POP
// bc_type := b_siberite_power ; 33 :
27086: LD_ADDR_OWVAR 42
27090: PUSH
27091: LD_INT 28
27093: ST_TO_ADDR
27094: GO 27135
27096: LD_INT 33
27098: DOUBLE
27099: EQUAL
27100: IFTRUE 27104
27102: GO 27115
27104: POP
// bc_type := b_oil_mine ; 34 :
27105: LD_ADDR_OWVAR 42
27109: PUSH
27110: LD_INT 29
27112: ST_TO_ADDR
27113: GO 27135
27115: LD_INT 34
27117: DOUBLE
27118: EQUAL
27119: IFTRUE 27123
27121: GO 27134
27123: POP
// bc_type := b_siberite_mine ; end ;
27124: LD_ADDR_OWVAR 42
27128: PUSH
27129: LD_INT 30
27131: ST_TO_ADDR
27132: GO 27135
27134: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
27135: LD_ADDR_VAR 0 8
27139: PUSH
27140: LD_VAR 0 5
27144: PPUSH
27145: LD_VAR 0 6
27149: PPUSH
27150: LD_VAR 0 3
27154: PPUSH
27155: CALL_OW 47
27159: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
27160: LD_OWVAR 42
27164: PUSH
27165: LD_INT 32
27167: PUSH
27168: LD_INT 33
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: IN
27175: IFFALSE 27191
// PlaceWeaponTurret ( b , weapon ) ;
27177: LD_VAR 0 8
27181: PPUSH
27182: LD_VAR 0 4
27186: PPUSH
27187: CALL_OW 431
// end ;
27191: LD_VAR 0 7
27195: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
27196: LD_INT 0
27198: PPUSH
27199: PPUSH
27200: PPUSH
27201: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27202: LD_ADDR_VAR 0 4
27206: PUSH
27207: LD_INT 22
27209: PUSH
27210: LD_OWVAR 2
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 2
27221: PUSH
27222: LD_INT 30
27224: PUSH
27225: LD_INT 0
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 30
27234: PUSH
27235: LD_INT 1
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: LIST
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PPUSH
27251: CALL_OW 69
27255: ST_TO_ADDR
// if not tmp then
27256: LD_VAR 0 4
27260: NOT
27261: IFFALSE 27265
// exit ;
27263: GO 27324
// for i in tmp do
27265: LD_ADDR_VAR 0 2
27269: PUSH
27270: LD_VAR 0 4
27274: PUSH
27275: FOR_IN
27276: IFFALSE 27322
// for j = 1 to 3 do
27278: LD_ADDR_VAR 0 3
27282: PUSH
27283: DOUBLE
27284: LD_INT 1
27286: DEC
27287: ST_TO_ADDR
27288: LD_INT 3
27290: PUSH
27291: FOR_TO
27292: IFFALSE 27318
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
27294: LD_VAR 0 2
27298: PPUSH
27299: CALL_OW 274
27303: PPUSH
27304: LD_VAR 0 3
27308: PPUSH
27309: LD_INT 99999
27311: PPUSH
27312: CALL_OW 277
27316: GO 27291
27318: POP
27319: POP
27320: GO 27275
27322: POP
27323: POP
// end ;
27324: LD_VAR 0 1
27328: RET
// export function hHackSetLevel10 ; var i , j ; begin
27329: LD_INT 0
27331: PPUSH
27332: PPUSH
27333: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27334: LD_ADDR_VAR 0 2
27338: PUSH
27339: LD_INT 21
27341: PUSH
27342: LD_INT 1
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PPUSH
27349: CALL_OW 69
27353: PUSH
27354: FOR_IN
27355: IFFALSE 27407
// if IsSelected ( i ) then
27357: LD_VAR 0 2
27361: PPUSH
27362: CALL_OW 306
27366: IFFALSE 27405
// begin for j := 1 to 4 do
27368: LD_ADDR_VAR 0 3
27372: PUSH
27373: DOUBLE
27374: LD_INT 1
27376: DEC
27377: ST_TO_ADDR
27378: LD_INT 4
27380: PUSH
27381: FOR_TO
27382: IFFALSE 27403
// SetSkill ( i , j , 10 ) ;
27384: LD_VAR 0 2
27388: PPUSH
27389: LD_VAR 0 3
27393: PPUSH
27394: LD_INT 10
27396: PPUSH
27397: CALL_OW 237
27401: GO 27381
27403: POP
27404: POP
// end ;
27405: GO 27354
27407: POP
27408: POP
// end ;
27409: LD_VAR 0 1
27413: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
27414: LD_INT 0
27416: PPUSH
27417: PPUSH
27418: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
27419: LD_ADDR_VAR 0 2
27423: PUSH
27424: LD_INT 22
27426: PUSH
27427: LD_OWVAR 2
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: LD_INT 21
27438: PUSH
27439: LD_INT 1
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PPUSH
27450: CALL_OW 69
27454: PUSH
27455: FOR_IN
27456: IFFALSE 27497
// begin for j := 1 to 4 do
27458: LD_ADDR_VAR 0 3
27462: PUSH
27463: DOUBLE
27464: LD_INT 1
27466: DEC
27467: ST_TO_ADDR
27468: LD_INT 4
27470: PUSH
27471: FOR_TO
27472: IFFALSE 27493
// SetSkill ( i , j , 10 ) ;
27474: LD_VAR 0 2
27478: PPUSH
27479: LD_VAR 0 3
27483: PPUSH
27484: LD_INT 10
27486: PPUSH
27487: CALL_OW 237
27491: GO 27471
27493: POP
27494: POP
// end ;
27495: GO 27455
27497: POP
27498: POP
// end ;
27499: LD_VAR 0 1
27503: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
27504: LD_INT 0
27506: PPUSH
// uc_side := your_side ;
27507: LD_ADDR_OWVAR 20
27511: PUSH
27512: LD_OWVAR 2
27516: ST_TO_ADDR
// uc_nation := nation ;
27517: LD_ADDR_OWVAR 21
27521: PUSH
27522: LD_VAR 0 1
27526: ST_TO_ADDR
// InitHc ;
27527: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
27531: LD_INT 0
27533: PPUSH
27534: LD_VAR 0 2
27538: PPUSH
27539: LD_VAR 0 3
27543: PPUSH
27544: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
27548: LD_VAR 0 4
27552: PPUSH
27553: LD_VAR 0 5
27557: PPUSH
27558: CALL_OW 428
27562: PUSH
27563: LD_INT 0
27565: EQUAL
27566: IFFALSE 27590
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
27568: CALL_OW 44
27572: PPUSH
27573: LD_VAR 0 4
27577: PPUSH
27578: LD_VAR 0 5
27582: PPUSH
27583: LD_INT 1
27585: PPUSH
27586: CALL_OW 48
// end ;
27590: LD_VAR 0 6
27594: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
27595: LD_INT 0
27597: PPUSH
27598: PPUSH
// uc_side := your_side ;
27599: LD_ADDR_OWVAR 20
27603: PUSH
27604: LD_OWVAR 2
27608: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
27609: LD_VAR 0 1
27613: PUSH
27614: LD_INT 1
27616: PUSH
27617: LD_INT 2
27619: PUSH
27620: LD_INT 3
27622: PUSH
27623: LD_INT 4
27625: PUSH
27626: LD_INT 5
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: IN
27636: IFFALSE 27648
// uc_nation := nation_american else
27638: LD_ADDR_OWVAR 21
27642: PUSH
27643: LD_INT 1
27645: ST_TO_ADDR
27646: GO 27691
// if chassis in [ 11 , 12 , 13 , 14 ] then
27648: LD_VAR 0 1
27652: PUSH
27653: LD_INT 11
27655: PUSH
27656: LD_INT 12
27658: PUSH
27659: LD_INT 13
27661: PUSH
27662: LD_INT 14
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: IN
27671: IFFALSE 27683
// uc_nation := nation_arabian else
27673: LD_ADDR_OWVAR 21
27677: PUSH
27678: LD_INT 2
27680: ST_TO_ADDR
27681: GO 27691
// uc_nation := nation_russian ;
27683: LD_ADDR_OWVAR 21
27687: PUSH
27688: LD_INT 3
27690: ST_TO_ADDR
// vc_chassis := chassis ;
27691: LD_ADDR_OWVAR 37
27695: PUSH
27696: LD_VAR 0 1
27700: ST_TO_ADDR
// vc_engine := engine ;
27701: LD_ADDR_OWVAR 39
27705: PUSH
27706: LD_VAR 0 2
27710: ST_TO_ADDR
// vc_control := control ;
27711: LD_ADDR_OWVAR 38
27715: PUSH
27716: LD_VAR 0 3
27720: ST_TO_ADDR
// vc_weapon := weapon ;
27721: LD_ADDR_OWVAR 40
27725: PUSH
27726: LD_VAR 0 4
27730: ST_TO_ADDR
// un := CreateVehicle ;
27731: LD_ADDR_VAR 0 8
27735: PUSH
27736: CALL_OW 45
27740: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
27741: LD_VAR 0 8
27745: PPUSH
27746: LD_INT 0
27748: PPUSH
27749: LD_INT 5
27751: PPUSH
27752: CALL_OW 12
27756: PPUSH
27757: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
27761: LD_VAR 0 8
27765: PPUSH
27766: LD_VAR 0 5
27770: PPUSH
27771: LD_VAR 0 6
27775: PPUSH
27776: LD_INT 1
27778: PPUSH
27779: CALL_OW 48
// end ;
27783: LD_VAR 0 7
27787: RET
// export hInvincible ; every 1 do
27788: GO 27790
27790: DISABLE
// hInvincible := [ ] ;
27791: LD_ADDR_EXP 95
27795: PUSH
27796: EMPTY
27797: ST_TO_ADDR
27798: END
// every 10 do var i ;
27799: GO 27801
27801: DISABLE
27802: LD_INT 0
27804: PPUSH
// begin enable ;
27805: ENABLE
// if not hInvincible then
27806: LD_EXP 95
27810: NOT
27811: IFFALSE 27815
// exit ;
27813: GO 27859
// for i in hInvincible do
27815: LD_ADDR_VAR 0 1
27819: PUSH
27820: LD_EXP 95
27824: PUSH
27825: FOR_IN
27826: IFFALSE 27857
// if GetLives ( i ) < 1000 then
27828: LD_VAR 0 1
27832: PPUSH
27833: CALL_OW 256
27837: PUSH
27838: LD_INT 1000
27840: LESS
27841: IFFALSE 27855
// SetLives ( i , 1000 ) ;
27843: LD_VAR 0 1
27847: PPUSH
27848: LD_INT 1000
27850: PPUSH
27851: CALL_OW 234
27855: GO 27825
27857: POP
27858: POP
// end ;
27859: PPOPN 1
27861: END
// export function hHackInvincible ; var i ; begin
27862: LD_INT 0
27864: PPUSH
27865: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
27866: LD_ADDR_VAR 0 2
27870: PUSH
27871: LD_INT 2
27873: PUSH
27874: LD_INT 21
27876: PUSH
27877: LD_INT 1
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: LD_INT 21
27886: PUSH
27887: LD_INT 2
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: LIST
27898: PPUSH
27899: CALL_OW 69
27903: PUSH
27904: FOR_IN
27905: IFFALSE 27966
// if IsSelected ( i ) then
27907: LD_VAR 0 2
27911: PPUSH
27912: CALL_OW 306
27916: IFFALSE 27964
// begin if i in hInvincible then
27918: LD_VAR 0 2
27922: PUSH
27923: LD_EXP 95
27927: IN
27928: IFFALSE 27948
// hInvincible := hInvincible diff i else
27930: LD_ADDR_EXP 95
27934: PUSH
27935: LD_EXP 95
27939: PUSH
27940: LD_VAR 0 2
27944: DIFF
27945: ST_TO_ADDR
27946: GO 27964
// hInvincible := hInvincible union i ;
27948: LD_ADDR_EXP 95
27952: PUSH
27953: LD_EXP 95
27957: PUSH
27958: LD_VAR 0 2
27962: UNION
27963: ST_TO_ADDR
// end ;
27964: GO 27904
27966: POP
27967: POP
// end ;
27968: LD_VAR 0 1
27972: RET
// export function hHackInvisible ; var i , j ; begin
27973: LD_INT 0
27975: PPUSH
27976: PPUSH
27977: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27978: LD_ADDR_VAR 0 2
27982: PUSH
27983: LD_INT 21
27985: PUSH
27986: LD_INT 1
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PPUSH
27993: CALL_OW 69
27997: PUSH
27998: FOR_IN
27999: IFFALSE 28023
// if IsSelected ( i ) then
28001: LD_VAR 0 2
28005: PPUSH
28006: CALL_OW 306
28010: IFFALSE 28021
// ComForceInvisible ( i ) ;
28012: LD_VAR 0 2
28016: PPUSH
28017: CALL_OW 496
28021: GO 27998
28023: POP
28024: POP
// end ;
28025: LD_VAR 0 1
28029: RET
// export function hHackChangeYourSide ; begin
28030: LD_INT 0
28032: PPUSH
// if your_side = 8 then
28033: LD_OWVAR 2
28037: PUSH
28038: LD_INT 8
28040: EQUAL
28041: IFFALSE 28053
// your_side := 0 else
28043: LD_ADDR_OWVAR 2
28047: PUSH
28048: LD_INT 0
28050: ST_TO_ADDR
28051: GO 28067
// your_side := your_side + 1 ;
28053: LD_ADDR_OWVAR 2
28057: PUSH
28058: LD_OWVAR 2
28062: PUSH
28063: LD_INT 1
28065: PLUS
28066: ST_TO_ADDR
// end ;
28067: LD_VAR 0 1
28071: RET
// export function hHackChangeUnitSide ; var i , j ; begin
28072: LD_INT 0
28074: PPUSH
28075: PPUSH
28076: PPUSH
// for i in all_units do
28077: LD_ADDR_VAR 0 2
28081: PUSH
28082: LD_OWVAR 3
28086: PUSH
28087: FOR_IN
28088: IFFALSE 28166
// if IsSelected ( i ) then
28090: LD_VAR 0 2
28094: PPUSH
28095: CALL_OW 306
28099: IFFALSE 28164
// begin j := GetSide ( i ) ;
28101: LD_ADDR_VAR 0 3
28105: PUSH
28106: LD_VAR 0 2
28110: PPUSH
28111: CALL_OW 255
28115: ST_TO_ADDR
// if j = 8 then
28116: LD_VAR 0 3
28120: PUSH
28121: LD_INT 8
28123: EQUAL
28124: IFFALSE 28136
// j := 0 else
28126: LD_ADDR_VAR 0 3
28130: PUSH
28131: LD_INT 0
28133: ST_TO_ADDR
28134: GO 28150
// j := j + 1 ;
28136: LD_ADDR_VAR 0 3
28140: PUSH
28141: LD_VAR 0 3
28145: PUSH
28146: LD_INT 1
28148: PLUS
28149: ST_TO_ADDR
// SetSide ( i , j ) ;
28150: LD_VAR 0 2
28154: PPUSH
28155: LD_VAR 0 3
28159: PPUSH
28160: CALL_OW 235
// end ;
28164: GO 28087
28166: POP
28167: POP
// end ;
28168: LD_VAR 0 1
28172: RET
// export function hHackFog ; begin
28173: LD_INT 0
28175: PPUSH
// FogOff ( true ) ;
28176: LD_INT 1
28178: PPUSH
28179: CALL_OW 344
// end ;
28183: LD_VAR 0 1
28187: RET
// export function hHackTeleport ( unit , x , y ) ; begin
28188: LD_INT 0
28190: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
28191: LD_VAR 0 1
28195: PPUSH
28196: LD_VAR 0 2
28200: PPUSH
28201: LD_VAR 0 3
28205: PPUSH
28206: LD_INT 1
28208: PPUSH
28209: LD_INT 1
28211: PPUSH
28212: CALL_OW 483
// CenterOnXY ( x , y ) ;
28216: LD_VAR 0 2
28220: PPUSH
28221: LD_VAR 0 3
28225: PPUSH
28226: CALL_OW 84
// end ; end_of_file end_of_file
28230: LD_VAR 0 4
28234: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28235: LD_INT 0
28237: PPUSH
28238: PPUSH
// if exist_mode then
28239: LD_VAR 0 2
28243: IFFALSE 28268
// unit := CreateCharacter ( prefix & ident ) else
28245: LD_ADDR_VAR 0 5
28249: PUSH
28250: LD_VAR 0 3
28254: PUSH
28255: LD_VAR 0 1
28259: STR
28260: PPUSH
28261: CALL_OW 34
28265: ST_TO_ADDR
28266: GO 28283
// unit := NewCharacter ( ident ) ;
28268: LD_ADDR_VAR 0 5
28272: PUSH
28273: LD_VAR 0 1
28277: PPUSH
28278: CALL_OW 25
28282: ST_TO_ADDR
// result := unit ;
28283: LD_ADDR_VAR 0 4
28287: PUSH
28288: LD_VAR 0 5
28292: ST_TO_ADDR
// end ;
28293: LD_VAR 0 4
28297: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28298: LD_INT 0
28300: PPUSH
28301: PPUSH
// if not side or not nation then
28302: LD_VAR 0 1
28306: NOT
28307: PUSH
28308: LD_VAR 0 2
28312: NOT
28313: OR
28314: IFFALSE 28318
// exit ;
28316: GO 29086
// case nation of nation_american :
28318: LD_VAR 0 2
28322: PUSH
28323: LD_INT 1
28325: DOUBLE
28326: EQUAL
28327: IFTRUE 28331
28329: GO 28545
28331: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28332: LD_ADDR_VAR 0 4
28336: PUSH
28337: LD_INT 35
28339: PUSH
28340: LD_INT 45
28342: PUSH
28343: LD_INT 46
28345: PUSH
28346: LD_INT 47
28348: PUSH
28349: LD_INT 82
28351: PUSH
28352: LD_INT 83
28354: PUSH
28355: LD_INT 84
28357: PUSH
28358: LD_INT 85
28360: PUSH
28361: LD_INT 86
28363: PUSH
28364: LD_INT 1
28366: PUSH
28367: LD_INT 2
28369: PUSH
28370: LD_INT 6
28372: PUSH
28373: LD_INT 15
28375: PUSH
28376: LD_INT 16
28378: PUSH
28379: LD_INT 7
28381: PUSH
28382: LD_INT 12
28384: PUSH
28385: LD_INT 13
28387: PUSH
28388: LD_INT 10
28390: PUSH
28391: LD_INT 14
28393: PUSH
28394: LD_INT 20
28396: PUSH
28397: LD_INT 21
28399: PUSH
28400: LD_INT 22
28402: PUSH
28403: LD_INT 25
28405: PUSH
28406: LD_INT 32
28408: PUSH
28409: LD_INT 27
28411: PUSH
28412: LD_INT 36
28414: PUSH
28415: LD_INT 69
28417: PUSH
28418: LD_INT 39
28420: PUSH
28421: LD_INT 34
28423: PUSH
28424: LD_INT 40
28426: PUSH
28427: LD_INT 48
28429: PUSH
28430: LD_INT 49
28432: PUSH
28433: LD_INT 50
28435: PUSH
28436: LD_INT 51
28438: PUSH
28439: LD_INT 52
28441: PUSH
28442: LD_INT 53
28444: PUSH
28445: LD_INT 54
28447: PUSH
28448: LD_INT 55
28450: PUSH
28451: LD_INT 56
28453: PUSH
28454: LD_INT 57
28456: PUSH
28457: LD_INT 58
28459: PUSH
28460: LD_INT 59
28462: PUSH
28463: LD_INT 60
28465: PUSH
28466: LD_INT 61
28468: PUSH
28469: LD_INT 62
28471: PUSH
28472: LD_INT 80
28474: PUSH
28475: LD_INT 82
28477: PUSH
28478: LD_INT 83
28480: PUSH
28481: LD_INT 84
28483: PUSH
28484: LD_INT 85
28486: PUSH
28487: LD_INT 86
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: LIST
28538: LIST
28539: LIST
28540: LIST
28541: LIST
28542: ST_TO_ADDR
28543: GO 29010
28545: LD_INT 2
28547: DOUBLE
28548: EQUAL
28549: IFTRUE 28553
28551: GO 28779
28553: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28554: LD_ADDR_VAR 0 4
28558: PUSH
28559: LD_INT 35
28561: PUSH
28562: LD_INT 45
28564: PUSH
28565: LD_INT 46
28567: PUSH
28568: LD_INT 47
28570: PUSH
28571: LD_INT 82
28573: PUSH
28574: LD_INT 83
28576: PUSH
28577: LD_INT 84
28579: PUSH
28580: LD_INT 85
28582: PUSH
28583: LD_INT 87
28585: PUSH
28586: LD_INT 70
28588: PUSH
28589: LD_INT 1
28591: PUSH
28592: LD_INT 11
28594: PUSH
28595: LD_INT 3
28597: PUSH
28598: LD_INT 4
28600: PUSH
28601: LD_INT 5
28603: PUSH
28604: LD_INT 6
28606: PUSH
28607: LD_INT 15
28609: PUSH
28610: LD_INT 18
28612: PUSH
28613: LD_INT 7
28615: PUSH
28616: LD_INT 17
28618: PUSH
28619: LD_INT 8
28621: PUSH
28622: LD_INT 20
28624: PUSH
28625: LD_INT 21
28627: PUSH
28628: LD_INT 22
28630: PUSH
28631: LD_INT 72
28633: PUSH
28634: LD_INT 26
28636: PUSH
28637: LD_INT 69
28639: PUSH
28640: LD_INT 39
28642: PUSH
28643: LD_INT 40
28645: PUSH
28646: LD_INT 41
28648: PUSH
28649: LD_INT 42
28651: PUSH
28652: LD_INT 43
28654: PUSH
28655: LD_INT 48
28657: PUSH
28658: LD_INT 49
28660: PUSH
28661: LD_INT 50
28663: PUSH
28664: LD_INT 51
28666: PUSH
28667: LD_INT 52
28669: PUSH
28670: LD_INT 53
28672: PUSH
28673: LD_INT 54
28675: PUSH
28676: LD_INT 55
28678: PUSH
28679: LD_INT 56
28681: PUSH
28682: LD_INT 60
28684: PUSH
28685: LD_INT 61
28687: PUSH
28688: LD_INT 62
28690: PUSH
28691: LD_INT 66
28693: PUSH
28694: LD_INT 67
28696: PUSH
28697: LD_INT 68
28699: PUSH
28700: LD_INT 81
28702: PUSH
28703: LD_INT 82
28705: PUSH
28706: LD_INT 83
28708: PUSH
28709: LD_INT 84
28711: PUSH
28712: LD_INT 85
28714: PUSH
28715: LD_INT 87
28717: PUSH
28718: LD_INT 88
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: LIST
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: ST_TO_ADDR
28777: GO 29010
28779: LD_INT 3
28781: DOUBLE
28782: EQUAL
28783: IFTRUE 28787
28785: GO 29009
28787: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28788: LD_ADDR_VAR 0 4
28792: PUSH
28793: LD_INT 46
28795: PUSH
28796: LD_INT 47
28798: PUSH
28799: LD_INT 1
28801: PUSH
28802: LD_INT 2
28804: PUSH
28805: LD_INT 82
28807: PUSH
28808: LD_INT 83
28810: PUSH
28811: LD_INT 84
28813: PUSH
28814: LD_INT 85
28816: PUSH
28817: LD_INT 86
28819: PUSH
28820: LD_INT 11
28822: PUSH
28823: LD_INT 9
28825: PUSH
28826: LD_INT 20
28828: PUSH
28829: LD_INT 19
28831: PUSH
28832: LD_INT 21
28834: PUSH
28835: LD_INT 24
28837: PUSH
28838: LD_INT 22
28840: PUSH
28841: LD_INT 25
28843: PUSH
28844: LD_INT 28
28846: PUSH
28847: LD_INT 29
28849: PUSH
28850: LD_INT 30
28852: PUSH
28853: LD_INT 31
28855: PUSH
28856: LD_INT 37
28858: PUSH
28859: LD_INT 38
28861: PUSH
28862: LD_INT 32
28864: PUSH
28865: LD_INT 27
28867: PUSH
28868: LD_INT 33
28870: PUSH
28871: LD_INT 69
28873: PUSH
28874: LD_INT 39
28876: PUSH
28877: LD_INT 34
28879: PUSH
28880: LD_INT 40
28882: PUSH
28883: LD_INT 71
28885: PUSH
28886: LD_INT 23
28888: PUSH
28889: LD_INT 44
28891: PUSH
28892: LD_INT 48
28894: PUSH
28895: LD_INT 49
28897: PUSH
28898: LD_INT 50
28900: PUSH
28901: LD_INT 51
28903: PUSH
28904: LD_INT 52
28906: PUSH
28907: LD_INT 53
28909: PUSH
28910: LD_INT 54
28912: PUSH
28913: LD_INT 55
28915: PUSH
28916: LD_INT 56
28918: PUSH
28919: LD_INT 57
28921: PUSH
28922: LD_INT 58
28924: PUSH
28925: LD_INT 59
28927: PUSH
28928: LD_INT 63
28930: PUSH
28931: LD_INT 64
28933: PUSH
28934: LD_INT 65
28936: PUSH
28937: LD_INT 82
28939: PUSH
28940: LD_INT 83
28942: PUSH
28943: LD_INT 84
28945: PUSH
28946: LD_INT 85
28948: PUSH
28949: LD_INT 86
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: ST_TO_ADDR
29007: GO 29010
29009: POP
// if state > - 1 and state < 3 then
29010: LD_VAR 0 3
29014: PUSH
29015: LD_INT 1
29017: NEG
29018: GREATER
29019: PUSH
29020: LD_VAR 0 3
29024: PUSH
29025: LD_INT 3
29027: LESS
29028: AND
29029: IFFALSE 29086
// for i in result do
29031: LD_ADDR_VAR 0 5
29035: PUSH
29036: LD_VAR 0 4
29040: PUSH
29041: FOR_IN
29042: IFFALSE 29084
// if GetTech ( i , side ) <> state then
29044: LD_VAR 0 5
29048: PPUSH
29049: LD_VAR 0 1
29053: PPUSH
29054: CALL_OW 321
29058: PUSH
29059: LD_VAR 0 3
29063: NONEQUAL
29064: IFFALSE 29082
// result := result diff i ;
29066: LD_ADDR_VAR 0 4
29070: PUSH
29071: LD_VAR 0 4
29075: PUSH
29076: LD_VAR 0 5
29080: DIFF
29081: ST_TO_ADDR
29082: GO 29041
29084: POP
29085: POP
// end ;
29086: LD_VAR 0 4
29090: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29091: LD_INT 0
29093: PPUSH
29094: PPUSH
29095: PPUSH
// result := true ;
29096: LD_ADDR_VAR 0 3
29100: PUSH
29101: LD_INT 1
29103: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29104: LD_ADDR_VAR 0 5
29108: PUSH
29109: LD_VAR 0 2
29113: PPUSH
29114: CALL_OW 480
29118: ST_TO_ADDR
// if not tmp then
29119: LD_VAR 0 5
29123: NOT
29124: IFFALSE 29128
// exit ;
29126: GO 29177
// for i in tmp do
29128: LD_ADDR_VAR 0 4
29132: PUSH
29133: LD_VAR 0 5
29137: PUSH
29138: FOR_IN
29139: IFFALSE 29175
// if GetTech ( i , side ) <> state_researched then
29141: LD_VAR 0 4
29145: PPUSH
29146: LD_VAR 0 1
29150: PPUSH
29151: CALL_OW 321
29155: PUSH
29156: LD_INT 2
29158: NONEQUAL
29159: IFFALSE 29173
// begin result := false ;
29161: LD_ADDR_VAR 0 3
29165: PUSH
29166: LD_INT 0
29168: ST_TO_ADDR
// exit ;
29169: POP
29170: POP
29171: GO 29177
// end ;
29173: GO 29138
29175: POP
29176: POP
// end ;
29177: LD_VAR 0 3
29181: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29182: LD_INT 0
29184: PPUSH
29185: PPUSH
29186: PPUSH
29187: PPUSH
29188: PPUSH
29189: PPUSH
29190: PPUSH
29191: PPUSH
29192: PPUSH
29193: PPUSH
29194: PPUSH
29195: PPUSH
29196: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29197: LD_VAR 0 1
29201: NOT
29202: PUSH
29203: LD_VAR 0 1
29207: PPUSH
29208: CALL_OW 257
29212: PUSH
29213: LD_INT 9
29215: NONEQUAL
29216: OR
29217: IFFALSE 29221
// exit ;
29219: GO 29794
// side := GetSide ( unit ) ;
29221: LD_ADDR_VAR 0 9
29225: PUSH
29226: LD_VAR 0 1
29230: PPUSH
29231: CALL_OW 255
29235: ST_TO_ADDR
// tech_space := tech_spacanom ;
29236: LD_ADDR_VAR 0 12
29240: PUSH
29241: LD_INT 29
29243: ST_TO_ADDR
// tech_time := tech_taurad ;
29244: LD_ADDR_VAR 0 13
29248: PUSH
29249: LD_INT 28
29251: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29252: LD_ADDR_VAR 0 11
29256: PUSH
29257: LD_VAR 0 1
29261: PPUSH
29262: CALL_OW 310
29266: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29267: LD_VAR 0 11
29271: PPUSH
29272: CALL_OW 247
29276: PUSH
29277: LD_INT 2
29279: EQUAL
29280: IFFALSE 29284
// exit ;
29282: GO 29794
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29284: LD_ADDR_VAR 0 8
29288: PUSH
29289: LD_INT 81
29291: PUSH
29292: LD_VAR 0 9
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 3
29303: PUSH
29304: LD_INT 21
29306: PUSH
29307: LD_INT 3
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PPUSH
29322: CALL_OW 69
29326: ST_TO_ADDR
// if not tmp then
29327: LD_VAR 0 8
29331: NOT
29332: IFFALSE 29336
// exit ;
29334: GO 29794
// if in_unit then
29336: LD_VAR 0 11
29340: IFFALSE 29364
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29342: LD_ADDR_VAR 0 10
29346: PUSH
29347: LD_VAR 0 8
29351: PPUSH
29352: LD_VAR 0 11
29356: PPUSH
29357: CALL_OW 74
29361: ST_TO_ADDR
29362: GO 29384
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29364: LD_ADDR_VAR 0 10
29368: PUSH
29369: LD_VAR 0 8
29373: PPUSH
29374: LD_VAR 0 1
29378: PPUSH
29379: CALL_OW 74
29383: ST_TO_ADDR
// if not enemy then
29384: LD_VAR 0 10
29388: NOT
29389: IFFALSE 29393
// exit ;
29391: GO 29794
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29393: LD_VAR 0 11
29397: PUSH
29398: LD_VAR 0 11
29402: PPUSH
29403: LD_VAR 0 10
29407: PPUSH
29408: CALL_OW 296
29412: PUSH
29413: LD_INT 13
29415: GREATER
29416: AND
29417: PUSH
29418: LD_VAR 0 1
29422: PPUSH
29423: LD_VAR 0 10
29427: PPUSH
29428: CALL_OW 296
29432: PUSH
29433: LD_INT 12
29435: GREATER
29436: OR
29437: IFFALSE 29441
// exit ;
29439: GO 29794
// missile := [ 1 ] ;
29441: LD_ADDR_VAR 0 14
29445: PUSH
29446: LD_INT 1
29448: PUSH
29449: EMPTY
29450: LIST
29451: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29452: LD_VAR 0 9
29456: PPUSH
29457: LD_VAR 0 12
29461: PPUSH
29462: CALL_OW 325
29466: IFFALSE 29495
// missile := Insert ( missile , missile + 1 , 2 ) ;
29468: LD_ADDR_VAR 0 14
29472: PUSH
29473: LD_VAR 0 14
29477: PPUSH
29478: LD_VAR 0 14
29482: PUSH
29483: LD_INT 1
29485: PLUS
29486: PPUSH
29487: LD_INT 2
29489: PPUSH
29490: CALL_OW 2
29494: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29495: LD_VAR 0 9
29499: PPUSH
29500: LD_VAR 0 13
29504: PPUSH
29505: CALL_OW 325
29509: PUSH
29510: LD_VAR 0 10
29514: PPUSH
29515: CALL_OW 255
29519: PPUSH
29520: LD_VAR 0 13
29524: PPUSH
29525: CALL_OW 325
29529: NOT
29530: AND
29531: IFFALSE 29560
// missile := Insert ( missile , missile + 1 , 3 ) ;
29533: LD_ADDR_VAR 0 14
29537: PUSH
29538: LD_VAR 0 14
29542: PPUSH
29543: LD_VAR 0 14
29547: PUSH
29548: LD_INT 1
29550: PLUS
29551: PPUSH
29552: LD_INT 3
29554: PPUSH
29555: CALL_OW 2
29559: ST_TO_ADDR
// if missile < 2 then
29560: LD_VAR 0 14
29564: PUSH
29565: LD_INT 2
29567: LESS
29568: IFFALSE 29572
// exit ;
29570: GO 29794
// x := GetX ( enemy ) ;
29572: LD_ADDR_VAR 0 4
29576: PUSH
29577: LD_VAR 0 10
29581: PPUSH
29582: CALL_OW 250
29586: ST_TO_ADDR
// y := GetY ( enemy ) ;
29587: LD_ADDR_VAR 0 5
29591: PUSH
29592: LD_VAR 0 10
29596: PPUSH
29597: CALL_OW 251
29601: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29602: LD_ADDR_VAR 0 6
29606: PUSH
29607: LD_VAR 0 4
29611: PUSH
29612: LD_INT 1
29614: NEG
29615: PPUSH
29616: LD_INT 1
29618: PPUSH
29619: CALL_OW 12
29623: PLUS
29624: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29625: LD_ADDR_VAR 0 7
29629: PUSH
29630: LD_VAR 0 5
29634: PUSH
29635: LD_INT 1
29637: NEG
29638: PPUSH
29639: LD_INT 1
29641: PPUSH
29642: CALL_OW 12
29646: PLUS
29647: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29648: LD_VAR 0 6
29652: PPUSH
29653: LD_VAR 0 7
29657: PPUSH
29658: CALL_OW 488
29662: NOT
29663: IFFALSE 29685
// begin _x := x ;
29665: LD_ADDR_VAR 0 6
29669: PUSH
29670: LD_VAR 0 4
29674: ST_TO_ADDR
// _y := y ;
29675: LD_ADDR_VAR 0 7
29679: PUSH
29680: LD_VAR 0 5
29684: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29685: LD_ADDR_VAR 0 3
29689: PUSH
29690: LD_INT 1
29692: PPUSH
29693: LD_VAR 0 14
29697: PPUSH
29698: CALL_OW 12
29702: ST_TO_ADDR
// case i of 1 :
29703: LD_VAR 0 3
29707: PUSH
29708: LD_INT 1
29710: DOUBLE
29711: EQUAL
29712: IFTRUE 29716
29714: GO 29733
29716: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29717: LD_VAR 0 1
29721: PPUSH
29722: LD_VAR 0 10
29726: PPUSH
29727: CALL_OW 115
29731: GO 29794
29733: LD_INT 2
29735: DOUBLE
29736: EQUAL
29737: IFTRUE 29741
29739: GO 29763
29741: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29742: LD_VAR 0 1
29746: PPUSH
29747: LD_VAR 0 6
29751: PPUSH
29752: LD_VAR 0 7
29756: PPUSH
29757: CALL_OW 153
29761: GO 29794
29763: LD_INT 3
29765: DOUBLE
29766: EQUAL
29767: IFTRUE 29771
29769: GO 29793
29771: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29772: LD_VAR 0 1
29776: PPUSH
29777: LD_VAR 0 6
29781: PPUSH
29782: LD_VAR 0 7
29786: PPUSH
29787: CALL_OW 154
29791: GO 29794
29793: POP
// end ;
29794: LD_VAR 0 2
29798: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29799: LD_INT 0
29801: PPUSH
29802: PPUSH
29803: PPUSH
29804: PPUSH
29805: PPUSH
29806: PPUSH
// if not unit or not building then
29807: LD_VAR 0 1
29811: NOT
29812: PUSH
29813: LD_VAR 0 2
29817: NOT
29818: OR
29819: IFFALSE 29823
// exit ;
29821: GO 29981
// x := GetX ( building ) ;
29823: LD_ADDR_VAR 0 5
29827: PUSH
29828: LD_VAR 0 2
29832: PPUSH
29833: CALL_OW 250
29837: ST_TO_ADDR
// y := GetY ( building ) ;
29838: LD_ADDR_VAR 0 6
29842: PUSH
29843: LD_VAR 0 2
29847: PPUSH
29848: CALL_OW 251
29852: ST_TO_ADDR
// for i = 0 to 5 do
29853: LD_ADDR_VAR 0 4
29857: PUSH
29858: DOUBLE
29859: LD_INT 0
29861: DEC
29862: ST_TO_ADDR
29863: LD_INT 5
29865: PUSH
29866: FOR_TO
29867: IFFALSE 29979
// begin _x := ShiftX ( x , i , 3 ) ;
29869: LD_ADDR_VAR 0 7
29873: PUSH
29874: LD_VAR 0 5
29878: PPUSH
29879: LD_VAR 0 4
29883: PPUSH
29884: LD_INT 3
29886: PPUSH
29887: CALL_OW 272
29891: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29892: LD_ADDR_VAR 0 8
29896: PUSH
29897: LD_VAR 0 6
29901: PPUSH
29902: LD_VAR 0 4
29906: PPUSH
29907: LD_INT 3
29909: PPUSH
29910: CALL_OW 273
29914: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29915: LD_VAR 0 7
29919: PPUSH
29920: LD_VAR 0 8
29924: PPUSH
29925: CALL_OW 488
29929: NOT
29930: IFFALSE 29934
// continue ;
29932: GO 29866
// if HexInfo ( _x , _y ) = 0 then
29934: LD_VAR 0 7
29938: PPUSH
29939: LD_VAR 0 8
29943: PPUSH
29944: CALL_OW 428
29948: PUSH
29949: LD_INT 0
29951: EQUAL
29952: IFFALSE 29977
// begin ComMoveXY ( unit , _x , _y ) ;
29954: LD_VAR 0 1
29958: PPUSH
29959: LD_VAR 0 7
29963: PPUSH
29964: LD_VAR 0 8
29968: PPUSH
29969: CALL_OW 111
// exit ;
29973: POP
29974: POP
29975: GO 29981
// end ; end ;
29977: GO 29866
29979: POP
29980: POP
// end ;
29981: LD_VAR 0 3
29985: RET
// export function ScanBase ( side , base_area ) ; begin
29986: LD_INT 0
29988: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29989: LD_ADDR_VAR 0 3
29993: PUSH
29994: LD_VAR 0 2
29998: PPUSH
29999: LD_INT 81
30001: PUSH
30002: LD_VAR 0 1
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: PPUSH
30011: CALL_OW 70
30015: ST_TO_ADDR
// end ;
30016: LD_VAR 0 3
30020: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30021: LD_INT 0
30023: PPUSH
30024: PPUSH
30025: PPUSH
30026: PPUSH
// result := false ;
30027: LD_ADDR_VAR 0 2
30031: PUSH
30032: LD_INT 0
30034: ST_TO_ADDR
// side := GetSide ( unit ) ;
30035: LD_ADDR_VAR 0 3
30039: PUSH
30040: LD_VAR 0 1
30044: PPUSH
30045: CALL_OW 255
30049: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30050: LD_ADDR_VAR 0 4
30054: PUSH
30055: LD_VAR 0 1
30059: PPUSH
30060: CALL_OW 248
30064: ST_TO_ADDR
// case nat of 1 :
30065: LD_VAR 0 4
30069: PUSH
30070: LD_INT 1
30072: DOUBLE
30073: EQUAL
30074: IFTRUE 30078
30076: GO 30089
30078: POP
// tech := tech_lassight ; 2 :
30079: LD_ADDR_VAR 0 5
30083: PUSH
30084: LD_INT 12
30086: ST_TO_ADDR
30087: GO 30128
30089: LD_INT 2
30091: DOUBLE
30092: EQUAL
30093: IFTRUE 30097
30095: GO 30108
30097: POP
// tech := tech_mortar ; 3 :
30098: LD_ADDR_VAR 0 5
30102: PUSH
30103: LD_INT 41
30105: ST_TO_ADDR
30106: GO 30128
30108: LD_INT 3
30110: DOUBLE
30111: EQUAL
30112: IFTRUE 30116
30114: GO 30127
30116: POP
// tech := tech_bazooka ; end ;
30117: LD_ADDR_VAR 0 5
30121: PUSH
30122: LD_INT 44
30124: ST_TO_ADDR
30125: GO 30128
30127: POP
// if Researched ( side , tech ) then
30128: LD_VAR 0 3
30132: PPUSH
30133: LD_VAR 0 5
30137: PPUSH
30138: CALL_OW 325
30142: IFFALSE 30169
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30144: LD_ADDR_VAR 0 2
30148: PUSH
30149: LD_INT 5
30151: PUSH
30152: LD_INT 8
30154: PUSH
30155: LD_INT 9
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: LIST
30162: PUSH
30163: LD_VAR 0 4
30167: ARRAY
30168: ST_TO_ADDR
// end ;
30169: LD_VAR 0 2
30173: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30174: LD_INT 0
30176: PPUSH
30177: PPUSH
30178: PPUSH
// if not mines then
30179: LD_VAR 0 2
30183: NOT
30184: IFFALSE 30188
// exit ;
30186: GO 30332
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30188: LD_ADDR_VAR 0 5
30192: PUSH
30193: LD_INT 81
30195: PUSH
30196: LD_VAR 0 1
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: LD_INT 3
30207: PUSH
30208: LD_INT 21
30210: PUSH
30211: LD_INT 3
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PPUSH
30226: CALL_OW 69
30230: ST_TO_ADDR
// for i in mines do
30231: LD_ADDR_VAR 0 4
30235: PUSH
30236: LD_VAR 0 2
30240: PUSH
30241: FOR_IN
30242: IFFALSE 30330
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30244: LD_VAR 0 4
30248: PUSH
30249: LD_INT 1
30251: ARRAY
30252: PPUSH
30253: LD_VAR 0 4
30257: PUSH
30258: LD_INT 2
30260: ARRAY
30261: PPUSH
30262: CALL_OW 458
30266: NOT
30267: IFFALSE 30271
// continue ;
30269: GO 30241
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30271: LD_VAR 0 4
30275: PUSH
30276: LD_INT 1
30278: ARRAY
30279: PPUSH
30280: LD_VAR 0 4
30284: PUSH
30285: LD_INT 2
30287: ARRAY
30288: PPUSH
30289: CALL_OW 428
30293: PUSH
30294: LD_VAR 0 5
30298: IN
30299: IFFALSE 30328
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30301: LD_VAR 0 4
30305: PUSH
30306: LD_INT 1
30308: ARRAY
30309: PPUSH
30310: LD_VAR 0 4
30314: PUSH
30315: LD_INT 2
30317: ARRAY
30318: PPUSH
30319: LD_VAR 0 1
30323: PPUSH
30324: CALL_OW 456
// end ;
30328: GO 30241
30330: POP
30331: POP
// end ;
30332: LD_VAR 0 3
30336: RET
// export function Count ( array ) ; var i ; begin
30337: LD_INT 0
30339: PPUSH
30340: PPUSH
// result := 0 ;
30341: LD_ADDR_VAR 0 2
30345: PUSH
30346: LD_INT 0
30348: ST_TO_ADDR
// for i in array do
30349: LD_ADDR_VAR 0 3
30353: PUSH
30354: LD_VAR 0 1
30358: PUSH
30359: FOR_IN
30360: IFFALSE 30384
// if i then
30362: LD_VAR 0 3
30366: IFFALSE 30382
// result := result + 1 ;
30368: LD_ADDR_VAR 0 2
30372: PUSH
30373: LD_VAR 0 2
30377: PUSH
30378: LD_INT 1
30380: PLUS
30381: ST_TO_ADDR
30382: GO 30359
30384: POP
30385: POP
// end ;
30386: LD_VAR 0 2
30390: RET
// export function IsEmpty ( building ) ; begin
30391: LD_INT 0
30393: PPUSH
// if not building then
30394: LD_VAR 0 1
30398: NOT
30399: IFFALSE 30403
// exit ;
30401: GO 30446
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30403: LD_ADDR_VAR 0 2
30407: PUSH
30408: LD_VAR 0 1
30412: PUSH
30413: LD_INT 22
30415: PUSH
30416: LD_VAR 0 1
30420: PPUSH
30421: CALL_OW 255
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 58
30432: PUSH
30433: EMPTY
30434: LIST
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PPUSH
30440: CALL_OW 69
30444: IN
30445: ST_TO_ADDR
// end ;
30446: LD_VAR 0 2
30450: RET
// export function IsNotFull ( building ) ; begin
30451: LD_INT 0
30453: PPUSH
// if not building then
30454: LD_VAR 0 1
30458: NOT
30459: IFFALSE 30463
// exit ;
30461: GO 30482
// result := UnitsInside ( building ) < 6 ;
30463: LD_ADDR_VAR 0 2
30467: PUSH
30468: LD_VAR 0 1
30472: PPUSH
30473: CALL_OW 313
30477: PUSH
30478: LD_INT 6
30480: LESS
30481: ST_TO_ADDR
// end ;
30482: LD_VAR 0 2
30486: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30487: LD_INT 0
30489: PPUSH
30490: PPUSH
30491: PPUSH
30492: PPUSH
// tmp := [ ] ;
30493: LD_ADDR_VAR 0 3
30497: PUSH
30498: EMPTY
30499: ST_TO_ADDR
// list := [ ] ;
30500: LD_ADDR_VAR 0 5
30504: PUSH
30505: EMPTY
30506: ST_TO_ADDR
// for i = 16 to 25 do
30507: LD_ADDR_VAR 0 4
30511: PUSH
30512: DOUBLE
30513: LD_INT 16
30515: DEC
30516: ST_TO_ADDR
30517: LD_INT 25
30519: PUSH
30520: FOR_TO
30521: IFFALSE 30594
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30523: LD_ADDR_VAR 0 3
30527: PUSH
30528: LD_VAR 0 3
30532: PUSH
30533: LD_INT 22
30535: PUSH
30536: LD_VAR 0 1
30540: PPUSH
30541: CALL_OW 255
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 91
30552: PUSH
30553: LD_VAR 0 1
30557: PUSH
30558: LD_INT 6
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 30
30568: PUSH
30569: LD_VAR 0 4
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: LIST
30582: PUSH
30583: EMPTY
30584: LIST
30585: PPUSH
30586: CALL_OW 69
30590: ADD
30591: ST_TO_ADDR
30592: GO 30520
30594: POP
30595: POP
// for i = 1 to tmp do
30596: LD_ADDR_VAR 0 4
30600: PUSH
30601: DOUBLE
30602: LD_INT 1
30604: DEC
30605: ST_TO_ADDR
30606: LD_VAR 0 3
30610: PUSH
30611: FOR_TO
30612: IFFALSE 30700
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30614: LD_ADDR_VAR 0 5
30618: PUSH
30619: LD_VAR 0 5
30623: PUSH
30624: LD_VAR 0 3
30628: PUSH
30629: LD_VAR 0 4
30633: ARRAY
30634: PPUSH
30635: CALL_OW 266
30639: PUSH
30640: LD_VAR 0 3
30644: PUSH
30645: LD_VAR 0 4
30649: ARRAY
30650: PPUSH
30651: CALL_OW 250
30655: PUSH
30656: LD_VAR 0 3
30660: PUSH
30661: LD_VAR 0 4
30665: ARRAY
30666: PPUSH
30667: CALL_OW 251
30671: PUSH
30672: LD_VAR 0 3
30676: PUSH
30677: LD_VAR 0 4
30681: ARRAY
30682: PPUSH
30683: CALL_OW 254
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: PUSH
30694: EMPTY
30695: LIST
30696: ADD
30697: ST_TO_ADDR
30698: GO 30611
30700: POP
30701: POP
// result := list ;
30702: LD_ADDR_VAR 0 2
30706: PUSH
30707: LD_VAR 0 5
30711: ST_TO_ADDR
// end ;
30712: LD_VAR 0 2
30716: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30717: LD_INT 0
30719: PPUSH
30720: PPUSH
30721: PPUSH
30722: PPUSH
30723: PPUSH
30724: PPUSH
30725: PPUSH
// if not factory then
30726: LD_VAR 0 1
30730: NOT
30731: IFFALSE 30735
// exit ;
30733: GO 31328
// if control = control_apeman then
30735: LD_VAR 0 4
30739: PUSH
30740: LD_INT 5
30742: EQUAL
30743: IFFALSE 30852
// begin tmp := UnitsInside ( factory ) ;
30745: LD_ADDR_VAR 0 8
30749: PUSH
30750: LD_VAR 0 1
30754: PPUSH
30755: CALL_OW 313
30759: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30760: LD_VAR 0 8
30764: PPUSH
30765: LD_INT 25
30767: PUSH
30768: LD_INT 12
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PPUSH
30775: CALL_OW 72
30779: NOT
30780: IFFALSE 30790
// control := control_manual ;
30782: LD_ADDR_VAR 0 4
30786: PUSH
30787: LD_INT 1
30789: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30790: LD_ADDR_VAR 0 8
30794: PUSH
30795: LD_VAR 0 1
30799: PPUSH
30800: CALL 30487 0 1
30804: ST_TO_ADDR
// if tmp then
30805: LD_VAR 0 8
30809: IFFALSE 30852
// begin for i in tmp do
30811: LD_ADDR_VAR 0 7
30815: PUSH
30816: LD_VAR 0 8
30820: PUSH
30821: FOR_IN
30822: IFFALSE 30850
// if i [ 1 ] = b_ext_radio then
30824: LD_VAR 0 7
30828: PUSH
30829: LD_INT 1
30831: ARRAY
30832: PUSH
30833: LD_INT 22
30835: EQUAL
30836: IFFALSE 30848
// begin control := control_remote ;
30838: LD_ADDR_VAR 0 4
30842: PUSH
30843: LD_INT 2
30845: ST_TO_ADDR
// break ;
30846: GO 30850
// end ;
30848: GO 30821
30850: POP
30851: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30852: LD_VAR 0 1
30856: PPUSH
30857: LD_VAR 0 2
30861: PPUSH
30862: LD_VAR 0 3
30866: PPUSH
30867: LD_VAR 0 4
30871: PPUSH
30872: LD_VAR 0 5
30876: PPUSH
30877: CALL_OW 448
30881: IFFALSE 30916
// begin result := [ chassis , engine , control , weapon ] ;
30883: LD_ADDR_VAR 0 6
30887: PUSH
30888: LD_VAR 0 2
30892: PUSH
30893: LD_VAR 0 3
30897: PUSH
30898: LD_VAR 0 4
30902: PUSH
30903: LD_VAR 0 5
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: ST_TO_ADDR
// exit ;
30914: GO 31328
// end ; _chassis := AvailableChassisList ( factory ) ;
30916: LD_ADDR_VAR 0 9
30920: PUSH
30921: LD_VAR 0 1
30925: PPUSH
30926: CALL_OW 475
30930: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30931: LD_ADDR_VAR 0 11
30935: PUSH
30936: LD_VAR 0 1
30940: PPUSH
30941: CALL_OW 476
30945: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30946: LD_ADDR_VAR 0 12
30950: PUSH
30951: LD_VAR 0 1
30955: PPUSH
30956: CALL_OW 477
30960: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30961: LD_ADDR_VAR 0 10
30965: PUSH
30966: LD_VAR 0 1
30970: PPUSH
30971: CALL_OW 478
30975: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30976: LD_VAR 0 9
30980: NOT
30981: PUSH
30982: LD_VAR 0 11
30986: NOT
30987: OR
30988: PUSH
30989: LD_VAR 0 12
30993: NOT
30994: OR
30995: PUSH
30996: LD_VAR 0 10
31000: NOT
31001: OR
31002: IFFALSE 31037
// begin result := [ chassis , engine , control , weapon ] ;
31004: LD_ADDR_VAR 0 6
31008: PUSH
31009: LD_VAR 0 2
31013: PUSH
31014: LD_VAR 0 3
31018: PUSH
31019: LD_VAR 0 4
31023: PUSH
31024: LD_VAR 0 5
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: ST_TO_ADDR
// exit ;
31035: GO 31328
// end ; if not chassis in _chassis then
31037: LD_VAR 0 2
31041: PUSH
31042: LD_VAR 0 9
31046: IN
31047: NOT
31048: IFFALSE 31074
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31050: LD_ADDR_VAR 0 2
31054: PUSH
31055: LD_VAR 0 9
31059: PUSH
31060: LD_INT 1
31062: PPUSH
31063: LD_VAR 0 9
31067: PPUSH
31068: CALL_OW 12
31072: ARRAY
31073: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31074: LD_VAR 0 2
31078: PPUSH
31079: LD_VAR 0 3
31083: PPUSH
31084: CALL 31333 0 2
31088: NOT
31089: IFFALSE 31148
// repeat engine := _engine [ 1 ] ;
31091: LD_ADDR_VAR 0 3
31095: PUSH
31096: LD_VAR 0 11
31100: PUSH
31101: LD_INT 1
31103: ARRAY
31104: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31105: LD_ADDR_VAR 0 11
31109: PUSH
31110: LD_VAR 0 11
31114: PPUSH
31115: LD_INT 1
31117: PPUSH
31118: CALL_OW 3
31122: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31123: LD_VAR 0 2
31127: PPUSH
31128: LD_VAR 0 3
31132: PPUSH
31133: CALL 31333 0 2
31137: PUSH
31138: LD_VAR 0 11
31142: PUSH
31143: EMPTY
31144: EQUAL
31145: OR
31146: IFFALSE 31091
// if not control in _control then
31148: LD_VAR 0 4
31152: PUSH
31153: LD_VAR 0 12
31157: IN
31158: NOT
31159: IFFALSE 31185
// control := _control [ rand ( 1 , _control ) ] ;
31161: LD_ADDR_VAR 0 4
31165: PUSH
31166: LD_VAR 0 12
31170: PUSH
31171: LD_INT 1
31173: PPUSH
31174: LD_VAR 0 12
31178: PPUSH
31179: CALL_OW 12
31183: ARRAY
31184: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31185: LD_VAR 0 2
31189: PPUSH
31190: LD_VAR 0 5
31194: PPUSH
31195: CALL 31553 0 2
31199: NOT
31200: IFFALSE 31259
// repeat weapon := _weapon [ 1 ] ;
31202: LD_ADDR_VAR 0 5
31206: PUSH
31207: LD_VAR 0 10
31211: PUSH
31212: LD_INT 1
31214: ARRAY
31215: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31216: LD_ADDR_VAR 0 10
31220: PUSH
31221: LD_VAR 0 10
31225: PPUSH
31226: LD_INT 1
31228: PPUSH
31229: CALL_OW 3
31233: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31234: LD_VAR 0 2
31238: PPUSH
31239: LD_VAR 0 5
31243: PPUSH
31244: CALL 31553 0 2
31248: PUSH
31249: LD_VAR 0 10
31253: PUSH
31254: EMPTY
31255: EQUAL
31256: OR
31257: IFFALSE 31202
// result := [ ] ;
31259: LD_ADDR_VAR 0 6
31263: PUSH
31264: EMPTY
31265: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31266: LD_VAR 0 1
31270: PPUSH
31271: LD_VAR 0 2
31275: PPUSH
31276: LD_VAR 0 3
31280: PPUSH
31281: LD_VAR 0 4
31285: PPUSH
31286: LD_VAR 0 5
31290: PPUSH
31291: CALL_OW 448
31295: IFFALSE 31328
// result := [ chassis , engine , control , weapon ] ;
31297: LD_ADDR_VAR 0 6
31301: PUSH
31302: LD_VAR 0 2
31306: PUSH
31307: LD_VAR 0 3
31311: PUSH
31312: LD_VAR 0 4
31316: PUSH
31317: LD_VAR 0 5
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: ST_TO_ADDR
// end ;
31328: LD_VAR 0 6
31332: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31333: LD_INT 0
31335: PPUSH
// if not chassis or not engine then
31336: LD_VAR 0 1
31340: NOT
31341: PUSH
31342: LD_VAR 0 2
31346: NOT
31347: OR
31348: IFFALSE 31352
// exit ;
31350: GO 31548
// case engine of engine_solar :
31352: LD_VAR 0 2
31356: PUSH
31357: LD_INT 2
31359: DOUBLE
31360: EQUAL
31361: IFTRUE 31365
31363: GO 31403
31365: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31366: LD_ADDR_VAR 0 3
31370: PUSH
31371: LD_INT 11
31373: PUSH
31374: LD_INT 12
31376: PUSH
31377: LD_INT 13
31379: PUSH
31380: LD_INT 14
31382: PUSH
31383: LD_INT 1
31385: PUSH
31386: LD_INT 2
31388: PUSH
31389: LD_INT 3
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: ST_TO_ADDR
31401: GO 31532
31403: LD_INT 1
31405: DOUBLE
31406: EQUAL
31407: IFTRUE 31411
31409: GO 31473
31411: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31412: LD_ADDR_VAR 0 3
31416: PUSH
31417: LD_INT 11
31419: PUSH
31420: LD_INT 12
31422: PUSH
31423: LD_INT 13
31425: PUSH
31426: LD_INT 14
31428: PUSH
31429: LD_INT 1
31431: PUSH
31432: LD_INT 2
31434: PUSH
31435: LD_INT 3
31437: PUSH
31438: LD_INT 4
31440: PUSH
31441: LD_INT 5
31443: PUSH
31444: LD_INT 21
31446: PUSH
31447: LD_INT 23
31449: PUSH
31450: LD_INT 22
31452: PUSH
31453: LD_INT 24
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: ST_TO_ADDR
31471: GO 31532
31473: LD_INT 3
31475: DOUBLE
31476: EQUAL
31477: IFTRUE 31481
31479: GO 31531
31481: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31482: LD_ADDR_VAR 0 3
31486: PUSH
31487: LD_INT 13
31489: PUSH
31490: LD_INT 14
31492: PUSH
31493: LD_INT 2
31495: PUSH
31496: LD_INT 3
31498: PUSH
31499: LD_INT 4
31501: PUSH
31502: LD_INT 5
31504: PUSH
31505: LD_INT 21
31507: PUSH
31508: LD_INT 22
31510: PUSH
31511: LD_INT 23
31513: PUSH
31514: LD_INT 24
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: ST_TO_ADDR
31529: GO 31532
31531: POP
// result := ( chassis in result ) ;
31532: LD_ADDR_VAR 0 3
31536: PUSH
31537: LD_VAR 0 1
31541: PUSH
31542: LD_VAR 0 3
31546: IN
31547: ST_TO_ADDR
// end ;
31548: LD_VAR 0 3
31552: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31553: LD_INT 0
31555: PPUSH
// if not chassis or not weapon then
31556: LD_VAR 0 1
31560: NOT
31561: PUSH
31562: LD_VAR 0 2
31566: NOT
31567: OR
31568: IFFALSE 31572
// exit ;
31570: GO 32634
// case weapon of us_machine_gun :
31572: LD_VAR 0 2
31576: PUSH
31577: LD_INT 2
31579: DOUBLE
31580: EQUAL
31581: IFTRUE 31585
31583: GO 31615
31585: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31586: LD_ADDR_VAR 0 3
31590: PUSH
31591: LD_INT 1
31593: PUSH
31594: LD_INT 2
31596: PUSH
31597: LD_INT 3
31599: PUSH
31600: LD_INT 4
31602: PUSH
31603: LD_INT 5
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: ST_TO_ADDR
31613: GO 32618
31615: LD_INT 3
31617: DOUBLE
31618: EQUAL
31619: IFTRUE 31623
31621: GO 31653
31623: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31624: LD_ADDR_VAR 0 3
31628: PUSH
31629: LD_INT 1
31631: PUSH
31632: LD_INT 2
31634: PUSH
31635: LD_INT 3
31637: PUSH
31638: LD_INT 4
31640: PUSH
31641: LD_INT 5
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: ST_TO_ADDR
31651: GO 32618
31653: LD_INT 11
31655: DOUBLE
31656: EQUAL
31657: IFTRUE 31661
31659: GO 31691
31661: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31662: LD_ADDR_VAR 0 3
31666: PUSH
31667: LD_INT 1
31669: PUSH
31670: LD_INT 2
31672: PUSH
31673: LD_INT 3
31675: PUSH
31676: LD_INT 4
31678: PUSH
31679: LD_INT 5
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: ST_TO_ADDR
31689: GO 32618
31691: LD_INT 4
31693: DOUBLE
31694: EQUAL
31695: IFTRUE 31699
31697: GO 31725
31699: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31700: LD_ADDR_VAR 0 3
31704: PUSH
31705: LD_INT 2
31707: PUSH
31708: LD_INT 3
31710: PUSH
31711: LD_INT 4
31713: PUSH
31714: LD_INT 5
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: ST_TO_ADDR
31723: GO 32618
31725: LD_INT 5
31727: DOUBLE
31728: EQUAL
31729: IFTRUE 31733
31731: GO 31759
31733: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31734: LD_ADDR_VAR 0 3
31738: PUSH
31739: LD_INT 2
31741: PUSH
31742: LD_INT 3
31744: PUSH
31745: LD_INT 4
31747: PUSH
31748: LD_INT 5
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: ST_TO_ADDR
31757: GO 32618
31759: LD_INT 9
31761: DOUBLE
31762: EQUAL
31763: IFTRUE 31767
31765: GO 31793
31767: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31768: LD_ADDR_VAR 0 3
31772: PUSH
31773: LD_INT 2
31775: PUSH
31776: LD_INT 3
31778: PUSH
31779: LD_INT 4
31781: PUSH
31782: LD_INT 5
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: ST_TO_ADDR
31791: GO 32618
31793: LD_INT 7
31795: DOUBLE
31796: EQUAL
31797: IFTRUE 31801
31799: GO 31827
31801: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31802: LD_ADDR_VAR 0 3
31806: PUSH
31807: LD_INT 2
31809: PUSH
31810: LD_INT 3
31812: PUSH
31813: LD_INT 4
31815: PUSH
31816: LD_INT 5
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: ST_TO_ADDR
31825: GO 32618
31827: LD_INT 12
31829: DOUBLE
31830: EQUAL
31831: IFTRUE 31835
31833: GO 31861
31835: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31836: LD_ADDR_VAR 0 3
31840: PUSH
31841: LD_INT 2
31843: PUSH
31844: LD_INT 3
31846: PUSH
31847: LD_INT 4
31849: PUSH
31850: LD_INT 5
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: ST_TO_ADDR
31859: GO 32618
31861: LD_INT 13
31863: DOUBLE
31864: EQUAL
31865: IFTRUE 31869
31867: GO 31895
31869: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31870: LD_ADDR_VAR 0 3
31874: PUSH
31875: LD_INT 2
31877: PUSH
31878: LD_INT 3
31880: PUSH
31881: LD_INT 4
31883: PUSH
31884: LD_INT 5
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: ST_TO_ADDR
31893: GO 32618
31895: LD_INT 14
31897: DOUBLE
31898: EQUAL
31899: IFTRUE 31903
31901: GO 31921
31903: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31904: LD_ADDR_VAR 0 3
31908: PUSH
31909: LD_INT 4
31911: PUSH
31912: LD_INT 5
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: ST_TO_ADDR
31919: GO 32618
31921: LD_INT 6
31923: DOUBLE
31924: EQUAL
31925: IFTRUE 31929
31927: GO 31947
31929: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31930: LD_ADDR_VAR 0 3
31934: PUSH
31935: LD_INT 4
31937: PUSH
31938: LD_INT 5
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: ST_TO_ADDR
31945: GO 32618
31947: LD_INT 10
31949: DOUBLE
31950: EQUAL
31951: IFTRUE 31955
31953: GO 31973
31955: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31956: LD_ADDR_VAR 0 3
31960: PUSH
31961: LD_INT 4
31963: PUSH
31964: LD_INT 5
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: ST_TO_ADDR
31971: GO 32618
31973: LD_INT 22
31975: DOUBLE
31976: EQUAL
31977: IFTRUE 31981
31979: GO 32007
31981: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31982: LD_ADDR_VAR 0 3
31986: PUSH
31987: LD_INT 11
31989: PUSH
31990: LD_INT 12
31992: PUSH
31993: LD_INT 13
31995: PUSH
31996: LD_INT 14
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: ST_TO_ADDR
32005: GO 32618
32007: LD_INT 23
32009: DOUBLE
32010: EQUAL
32011: IFTRUE 32015
32013: GO 32041
32015: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32016: LD_ADDR_VAR 0 3
32020: PUSH
32021: LD_INT 11
32023: PUSH
32024: LD_INT 12
32026: PUSH
32027: LD_INT 13
32029: PUSH
32030: LD_INT 14
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: ST_TO_ADDR
32039: GO 32618
32041: LD_INT 24
32043: DOUBLE
32044: EQUAL
32045: IFTRUE 32049
32047: GO 32075
32049: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32050: LD_ADDR_VAR 0 3
32054: PUSH
32055: LD_INT 11
32057: PUSH
32058: LD_INT 12
32060: PUSH
32061: LD_INT 13
32063: PUSH
32064: LD_INT 14
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: ST_TO_ADDR
32073: GO 32618
32075: LD_INT 30
32077: DOUBLE
32078: EQUAL
32079: IFTRUE 32083
32081: GO 32109
32083: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32084: LD_ADDR_VAR 0 3
32088: PUSH
32089: LD_INT 11
32091: PUSH
32092: LD_INT 12
32094: PUSH
32095: LD_INT 13
32097: PUSH
32098: LD_INT 14
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: ST_TO_ADDR
32107: GO 32618
32109: LD_INT 25
32111: DOUBLE
32112: EQUAL
32113: IFTRUE 32117
32115: GO 32135
32117: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32118: LD_ADDR_VAR 0 3
32122: PUSH
32123: LD_INT 13
32125: PUSH
32126: LD_INT 14
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: ST_TO_ADDR
32133: GO 32618
32135: LD_INT 27
32137: DOUBLE
32138: EQUAL
32139: IFTRUE 32143
32141: GO 32161
32143: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32144: LD_ADDR_VAR 0 3
32148: PUSH
32149: LD_INT 13
32151: PUSH
32152: LD_INT 14
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: ST_TO_ADDR
32159: GO 32618
32161: LD_EXP 101
32165: DOUBLE
32166: EQUAL
32167: IFTRUE 32171
32169: GO 32197
32171: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32172: LD_ADDR_VAR 0 3
32176: PUSH
32177: LD_INT 11
32179: PUSH
32180: LD_INT 12
32182: PUSH
32183: LD_INT 13
32185: PUSH
32186: LD_INT 14
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: ST_TO_ADDR
32195: GO 32618
32197: LD_INT 28
32199: DOUBLE
32200: EQUAL
32201: IFTRUE 32205
32203: GO 32223
32205: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32206: LD_ADDR_VAR 0 3
32210: PUSH
32211: LD_INT 13
32213: PUSH
32214: LD_INT 14
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: ST_TO_ADDR
32221: GO 32618
32223: LD_INT 29
32225: DOUBLE
32226: EQUAL
32227: IFTRUE 32231
32229: GO 32249
32231: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32232: LD_ADDR_VAR 0 3
32236: PUSH
32237: LD_INT 13
32239: PUSH
32240: LD_INT 14
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: ST_TO_ADDR
32247: GO 32618
32249: LD_INT 31
32251: DOUBLE
32252: EQUAL
32253: IFTRUE 32257
32255: GO 32275
32257: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32258: LD_ADDR_VAR 0 3
32262: PUSH
32263: LD_INT 13
32265: PUSH
32266: LD_INT 14
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: ST_TO_ADDR
32273: GO 32618
32275: LD_INT 26
32277: DOUBLE
32278: EQUAL
32279: IFTRUE 32283
32281: GO 32301
32283: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32284: LD_ADDR_VAR 0 3
32288: PUSH
32289: LD_INT 13
32291: PUSH
32292: LD_INT 14
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: ST_TO_ADDR
32299: GO 32618
32301: LD_INT 42
32303: DOUBLE
32304: EQUAL
32305: IFTRUE 32309
32307: GO 32335
32309: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32310: LD_ADDR_VAR 0 3
32314: PUSH
32315: LD_INT 21
32317: PUSH
32318: LD_INT 22
32320: PUSH
32321: LD_INT 23
32323: PUSH
32324: LD_INT 24
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: ST_TO_ADDR
32333: GO 32618
32335: LD_INT 43
32337: DOUBLE
32338: EQUAL
32339: IFTRUE 32343
32341: GO 32369
32343: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32344: LD_ADDR_VAR 0 3
32348: PUSH
32349: LD_INT 21
32351: PUSH
32352: LD_INT 22
32354: PUSH
32355: LD_INT 23
32357: PUSH
32358: LD_INT 24
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: ST_TO_ADDR
32367: GO 32618
32369: LD_INT 44
32371: DOUBLE
32372: EQUAL
32373: IFTRUE 32377
32375: GO 32403
32377: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32378: LD_ADDR_VAR 0 3
32382: PUSH
32383: LD_INT 21
32385: PUSH
32386: LD_INT 22
32388: PUSH
32389: LD_INT 23
32391: PUSH
32392: LD_INT 24
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: ST_TO_ADDR
32401: GO 32618
32403: LD_INT 45
32405: DOUBLE
32406: EQUAL
32407: IFTRUE 32411
32409: GO 32437
32411: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32412: LD_ADDR_VAR 0 3
32416: PUSH
32417: LD_INT 21
32419: PUSH
32420: LD_INT 22
32422: PUSH
32423: LD_INT 23
32425: PUSH
32426: LD_INT 24
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: ST_TO_ADDR
32435: GO 32618
32437: LD_INT 49
32439: DOUBLE
32440: EQUAL
32441: IFTRUE 32445
32443: GO 32471
32445: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32446: LD_ADDR_VAR 0 3
32450: PUSH
32451: LD_INT 21
32453: PUSH
32454: LD_INT 22
32456: PUSH
32457: LD_INT 23
32459: PUSH
32460: LD_INT 24
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: ST_TO_ADDR
32469: GO 32618
32471: LD_INT 51
32473: DOUBLE
32474: EQUAL
32475: IFTRUE 32479
32477: GO 32505
32479: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32480: LD_ADDR_VAR 0 3
32484: PUSH
32485: LD_INT 21
32487: PUSH
32488: LD_INT 22
32490: PUSH
32491: LD_INT 23
32493: PUSH
32494: LD_INT 24
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: ST_TO_ADDR
32503: GO 32618
32505: LD_INT 52
32507: DOUBLE
32508: EQUAL
32509: IFTRUE 32513
32511: GO 32539
32513: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32514: LD_ADDR_VAR 0 3
32518: PUSH
32519: LD_INT 21
32521: PUSH
32522: LD_INT 22
32524: PUSH
32525: LD_INT 23
32527: PUSH
32528: LD_INT 24
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: ST_TO_ADDR
32537: GO 32618
32539: LD_INT 53
32541: DOUBLE
32542: EQUAL
32543: IFTRUE 32547
32545: GO 32565
32547: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32548: LD_ADDR_VAR 0 3
32552: PUSH
32553: LD_INT 23
32555: PUSH
32556: LD_INT 24
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: ST_TO_ADDR
32563: GO 32618
32565: LD_INT 46
32567: DOUBLE
32568: EQUAL
32569: IFTRUE 32573
32571: GO 32591
32573: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32574: LD_ADDR_VAR 0 3
32578: PUSH
32579: LD_INT 23
32581: PUSH
32582: LD_INT 24
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: ST_TO_ADDR
32589: GO 32618
32591: LD_INT 47
32593: DOUBLE
32594: EQUAL
32595: IFTRUE 32599
32597: GO 32617
32599: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32600: LD_ADDR_VAR 0 3
32604: PUSH
32605: LD_INT 23
32607: PUSH
32608: LD_INT 24
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: ST_TO_ADDR
32615: GO 32618
32617: POP
// result := ( chassis in result ) ;
32618: LD_ADDR_VAR 0 3
32622: PUSH
32623: LD_VAR 0 1
32627: PUSH
32628: LD_VAR 0 3
32632: IN
32633: ST_TO_ADDR
// end ;
32634: LD_VAR 0 3
32638: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32639: LD_INT 0
32641: PPUSH
32642: PPUSH
32643: PPUSH
32644: PPUSH
32645: PPUSH
32646: PPUSH
32647: PPUSH
// result := array ;
32648: LD_ADDR_VAR 0 5
32652: PUSH
32653: LD_VAR 0 1
32657: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32658: LD_VAR 0 1
32662: NOT
32663: PUSH
32664: LD_VAR 0 2
32668: NOT
32669: OR
32670: PUSH
32671: LD_VAR 0 3
32675: NOT
32676: OR
32677: PUSH
32678: LD_VAR 0 2
32682: PUSH
32683: LD_VAR 0 1
32687: GREATER
32688: OR
32689: PUSH
32690: LD_VAR 0 3
32694: PUSH
32695: LD_VAR 0 1
32699: GREATER
32700: OR
32701: IFFALSE 32705
// exit ;
32703: GO 33001
// if direction then
32705: LD_VAR 0 4
32709: IFFALSE 32773
// begin d := 1 ;
32711: LD_ADDR_VAR 0 9
32715: PUSH
32716: LD_INT 1
32718: ST_TO_ADDR
// if i_from > i_to then
32719: LD_VAR 0 2
32723: PUSH
32724: LD_VAR 0 3
32728: GREATER
32729: IFFALSE 32755
// length := ( array - i_from ) + i_to else
32731: LD_ADDR_VAR 0 11
32735: PUSH
32736: LD_VAR 0 1
32740: PUSH
32741: LD_VAR 0 2
32745: MINUS
32746: PUSH
32747: LD_VAR 0 3
32751: PLUS
32752: ST_TO_ADDR
32753: GO 32771
// length := i_to - i_from ;
32755: LD_ADDR_VAR 0 11
32759: PUSH
32760: LD_VAR 0 3
32764: PUSH
32765: LD_VAR 0 2
32769: MINUS
32770: ST_TO_ADDR
// end else
32771: GO 32834
// begin d := - 1 ;
32773: LD_ADDR_VAR 0 9
32777: PUSH
32778: LD_INT 1
32780: NEG
32781: ST_TO_ADDR
// if i_from > i_to then
32782: LD_VAR 0 2
32786: PUSH
32787: LD_VAR 0 3
32791: GREATER
32792: IFFALSE 32812
// length := i_from - i_to else
32794: LD_ADDR_VAR 0 11
32798: PUSH
32799: LD_VAR 0 2
32803: PUSH
32804: LD_VAR 0 3
32808: MINUS
32809: ST_TO_ADDR
32810: GO 32834
// length := ( array - i_to ) + i_from ;
32812: LD_ADDR_VAR 0 11
32816: PUSH
32817: LD_VAR 0 1
32821: PUSH
32822: LD_VAR 0 3
32826: MINUS
32827: PUSH
32828: LD_VAR 0 2
32832: PLUS
32833: ST_TO_ADDR
// end ; if not length then
32834: LD_VAR 0 11
32838: NOT
32839: IFFALSE 32843
// exit ;
32841: GO 33001
// tmp := array ;
32843: LD_ADDR_VAR 0 10
32847: PUSH
32848: LD_VAR 0 1
32852: ST_TO_ADDR
// for i = 1 to length do
32853: LD_ADDR_VAR 0 6
32857: PUSH
32858: DOUBLE
32859: LD_INT 1
32861: DEC
32862: ST_TO_ADDR
32863: LD_VAR 0 11
32867: PUSH
32868: FOR_TO
32869: IFFALSE 32989
// begin for j = 1 to array do
32871: LD_ADDR_VAR 0 7
32875: PUSH
32876: DOUBLE
32877: LD_INT 1
32879: DEC
32880: ST_TO_ADDR
32881: LD_VAR 0 1
32885: PUSH
32886: FOR_TO
32887: IFFALSE 32975
// begin k := j + d ;
32889: LD_ADDR_VAR 0 8
32893: PUSH
32894: LD_VAR 0 7
32898: PUSH
32899: LD_VAR 0 9
32903: PLUS
32904: ST_TO_ADDR
// if k > array then
32905: LD_VAR 0 8
32909: PUSH
32910: LD_VAR 0 1
32914: GREATER
32915: IFFALSE 32925
// k := 1 ;
32917: LD_ADDR_VAR 0 8
32921: PUSH
32922: LD_INT 1
32924: ST_TO_ADDR
// if not k then
32925: LD_VAR 0 8
32929: NOT
32930: IFFALSE 32942
// k := array ;
32932: LD_ADDR_VAR 0 8
32936: PUSH
32937: LD_VAR 0 1
32941: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32942: LD_ADDR_VAR 0 10
32946: PUSH
32947: LD_VAR 0 10
32951: PPUSH
32952: LD_VAR 0 8
32956: PPUSH
32957: LD_VAR 0 1
32961: PUSH
32962: LD_VAR 0 7
32966: ARRAY
32967: PPUSH
32968: CALL_OW 1
32972: ST_TO_ADDR
// end ;
32973: GO 32886
32975: POP
32976: POP
// array := tmp ;
32977: LD_ADDR_VAR 0 1
32981: PUSH
32982: LD_VAR 0 10
32986: ST_TO_ADDR
// end ;
32987: GO 32868
32989: POP
32990: POP
// result := array ;
32991: LD_ADDR_VAR 0 5
32995: PUSH
32996: LD_VAR 0 1
33000: ST_TO_ADDR
// end ;
33001: LD_VAR 0 5
33005: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33006: LD_INT 0
33008: PPUSH
33009: PPUSH
// result := 0 ;
33010: LD_ADDR_VAR 0 3
33014: PUSH
33015: LD_INT 0
33017: ST_TO_ADDR
// if not array or not value in array then
33018: LD_VAR 0 1
33022: NOT
33023: PUSH
33024: LD_VAR 0 2
33028: PUSH
33029: LD_VAR 0 1
33033: IN
33034: NOT
33035: OR
33036: IFFALSE 33040
// exit ;
33038: GO 33094
// for i = 1 to array do
33040: LD_ADDR_VAR 0 4
33044: PUSH
33045: DOUBLE
33046: LD_INT 1
33048: DEC
33049: ST_TO_ADDR
33050: LD_VAR 0 1
33054: PUSH
33055: FOR_TO
33056: IFFALSE 33092
// if value = array [ i ] then
33058: LD_VAR 0 2
33062: PUSH
33063: LD_VAR 0 1
33067: PUSH
33068: LD_VAR 0 4
33072: ARRAY
33073: EQUAL
33074: IFFALSE 33090
// begin result := i ;
33076: LD_ADDR_VAR 0 3
33080: PUSH
33081: LD_VAR 0 4
33085: ST_TO_ADDR
// exit ;
33086: POP
33087: POP
33088: GO 33094
// end ;
33090: GO 33055
33092: POP
33093: POP
// end ;
33094: LD_VAR 0 3
33098: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33099: LD_INT 0
33101: PPUSH
// vc_chassis := chassis ;
33102: LD_ADDR_OWVAR 37
33106: PUSH
33107: LD_VAR 0 1
33111: ST_TO_ADDR
// vc_engine := engine ;
33112: LD_ADDR_OWVAR 39
33116: PUSH
33117: LD_VAR 0 2
33121: ST_TO_ADDR
// vc_control := control ;
33122: LD_ADDR_OWVAR 38
33126: PUSH
33127: LD_VAR 0 3
33131: ST_TO_ADDR
// vc_weapon := weapon ;
33132: LD_ADDR_OWVAR 40
33136: PUSH
33137: LD_VAR 0 4
33141: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33142: LD_ADDR_OWVAR 41
33146: PUSH
33147: LD_VAR 0 5
33151: ST_TO_ADDR
// end ;
33152: LD_VAR 0 6
33156: RET
// export function WantPlant ( unit ) ; var task ; begin
33157: LD_INT 0
33159: PPUSH
33160: PPUSH
// result := false ;
33161: LD_ADDR_VAR 0 2
33165: PUSH
33166: LD_INT 0
33168: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33169: LD_ADDR_VAR 0 3
33173: PUSH
33174: LD_VAR 0 1
33178: PPUSH
33179: CALL_OW 437
33183: ST_TO_ADDR
// if task then
33184: LD_VAR 0 3
33188: IFFALSE 33216
// if task [ 1 ] [ 1 ] = p then
33190: LD_VAR 0 3
33194: PUSH
33195: LD_INT 1
33197: ARRAY
33198: PUSH
33199: LD_INT 1
33201: ARRAY
33202: PUSH
33203: LD_STRING p
33205: EQUAL
33206: IFFALSE 33216
// result := true ;
33208: LD_ADDR_VAR 0 2
33212: PUSH
33213: LD_INT 1
33215: ST_TO_ADDR
// end ;
33216: LD_VAR 0 2
33220: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33221: LD_INT 0
33223: PPUSH
33224: PPUSH
33225: PPUSH
33226: PPUSH
// if pos < 1 then
33227: LD_VAR 0 2
33231: PUSH
33232: LD_INT 1
33234: LESS
33235: IFFALSE 33239
// exit ;
33237: GO 33542
// if pos = 1 then
33239: LD_VAR 0 2
33243: PUSH
33244: LD_INT 1
33246: EQUAL
33247: IFFALSE 33280
// result := Replace ( arr , pos [ 1 ] , value ) else
33249: LD_ADDR_VAR 0 4
33253: PUSH
33254: LD_VAR 0 1
33258: PPUSH
33259: LD_VAR 0 2
33263: PUSH
33264: LD_INT 1
33266: ARRAY
33267: PPUSH
33268: LD_VAR 0 3
33272: PPUSH
33273: CALL_OW 1
33277: ST_TO_ADDR
33278: GO 33542
// begin tmp := arr ;
33280: LD_ADDR_VAR 0 6
33284: PUSH
33285: LD_VAR 0 1
33289: ST_TO_ADDR
// s_arr := [ tmp ] ;
33290: LD_ADDR_VAR 0 7
33294: PUSH
33295: LD_VAR 0 6
33299: PUSH
33300: EMPTY
33301: LIST
33302: ST_TO_ADDR
// for i = 1 to pos - 1 do
33303: LD_ADDR_VAR 0 5
33307: PUSH
33308: DOUBLE
33309: LD_INT 1
33311: DEC
33312: ST_TO_ADDR
33313: LD_VAR 0 2
33317: PUSH
33318: LD_INT 1
33320: MINUS
33321: PUSH
33322: FOR_TO
33323: IFFALSE 33368
// begin tmp := tmp [ pos [ i ] ] ;
33325: LD_ADDR_VAR 0 6
33329: PUSH
33330: LD_VAR 0 6
33334: PUSH
33335: LD_VAR 0 2
33339: PUSH
33340: LD_VAR 0 5
33344: ARRAY
33345: ARRAY
33346: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33347: LD_ADDR_VAR 0 7
33351: PUSH
33352: LD_VAR 0 7
33356: PUSH
33357: LD_VAR 0 6
33361: PUSH
33362: EMPTY
33363: LIST
33364: ADD
33365: ST_TO_ADDR
// end ;
33366: GO 33322
33368: POP
33369: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33370: LD_ADDR_VAR 0 6
33374: PUSH
33375: LD_VAR 0 6
33379: PPUSH
33380: LD_VAR 0 2
33384: PUSH
33385: LD_VAR 0 2
33389: ARRAY
33390: PPUSH
33391: LD_VAR 0 3
33395: PPUSH
33396: CALL_OW 1
33400: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33401: LD_ADDR_VAR 0 7
33405: PUSH
33406: LD_VAR 0 7
33410: PPUSH
33411: LD_VAR 0 7
33415: PPUSH
33416: LD_VAR 0 6
33420: PPUSH
33421: CALL_OW 1
33425: ST_TO_ADDR
// for i = s_arr downto 2 do
33426: LD_ADDR_VAR 0 5
33430: PUSH
33431: DOUBLE
33432: LD_VAR 0 7
33436: INC
33437: ST_TO_ADDR
33438: LD_INT 2
33440: PUSH
33441: FOR_DOWNTO
33442: IFFALSE 33526
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33444: LD_ADDR_VAR 0 6
33448: PUSH
33449: LD_VAR 0 7
33453: PUSH
33454: LD_VAR 0 5
33458: PUSH
33459: LD_INT 1
33461: MINUS
33462: ARRAY
33463: PPUSH
33464: LD_VAR 0 2
33468: PUSH
33469: LD_VAR 0 5
33473: PUSH
33474: LD_INT 1
33476: MINUS
33477: ARRAY
33478: PPUSH
33479: LD_VAR 0 7
33483: PUSH
33484: LD_VAR 0 5
33488: ARRAY
33489: PPUSH
33490: CALL_OW 1
33494: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33495: LD_ADDR_VAR 0 7
33499: PUSH
33500: LD_VAR 0 7
33504: PPUSH
33505: LD_VAR 0 5
33509: PUSH
33510: LD_INT 1
33512: MINUS
33513: PPUSH
33514: LD_VAR 0 6
33518: PPUSH
33519: CALL_OW 1
33523: ST_TO_ADDR
// end ;
33524: GO 33441
33526: POP
33527: POP
// result := s_arr [ 1 ] ;
33528: LD_ADDR_VAR 0 4
33532: PUSH
33533: LD_VAR 0 7
33537: PUSH
33538: LD_INT 1
33540: ARRAY
33541: ST_TO_ADDR
// end ; end ;
33542: LD_VAR 0 4
33546: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33547: LD_INT 0
33549: PPUSH
33550: PPUSH
// if not list then
33551: LD_VAR 0 1
33555: NOT
33556: IFFALSE 33560
// exit ;
33558: GO 33651
// i := list [ pos1 ] ;
33560: LD_ADDR_VAR 0 5
33564: PUSH
33565: LD_VAR 0 1
33569: PUSH
33570: LD_VAR 0 2
33574: ARRAY
33575: ST_TO_ADDR
// if not i then
33576: LD_VAR 0 5
33580: NOT
33581: IFFALSE 33585
// exit ;
33583: GO 33651
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33585: LD_ADDR_VAR 0 1
33589: PUSH
33590: LD_VAR 0 1
33594: PPUSH
33595: LD_VAR 0 2
33599: PPUSH
33600: LD_VAR 0 1
33604: PUSH
33605: LD_VAR 0 3
33609: ARRAY
33610: PPUSH
33611: CALL_OW 1
33615: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33616: LD_ADDR_VAR 0 1
33620: PUSH
33621: LD_VAR 0 1
33625: PPUSH
33626: LD_VAR 0 3
33630: PPUSH
33631: LD_VAR 0 5
33635: PPUSH
33636: CALL_OW 1
33640: ST_TO_ADDR
// result := list ;
33641: LD_ADDR_VAR 0 4
33645: PUSH
33646: LD_VAR 0 1
33650: ST_TO_ADDR
// end ;
33651: LD_VAR 0 4
33655: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33656: LD_INT 0
33658: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33659: LD_ADDR_VAR 0 5
33663: PUSH
33664: LD_VAR 0 1
33668: PPUSH
33669: CALL_OW 250
33673: PPUSH
33674: LD_VAR 0 1
33678: PPUSH
33679: CALL_OW 251
33683: PPUSH
33684: LD_VAR 0 2
33688: PPUSH
33689: LD_VAR 0 3
33693: PPUSH
33694: LD_VAR 0 4
33698: PPUSH
33699: CALL 33709 0 5
33703: ST_TO_ADDR
// end ;
33704: LD_VAR 0 5
33708: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33709: LD_INT 0
33711: PPUSH
33712: PPUSH
33713: PPUSH
33714: PPUSH
// if not list then
33715: LD_VAR 0 3
33719: NOT
33720: IFFALSE 33724
// exit ;
33722: GO 34112
// result := [ ] ;
33724: LD_ADDR_VAR 0 6
33728: PUSH
33729: EMPTY
33730: ST_TO_ADDR
// for i in list do
33731: LD_ADDR_VAR 0 7
33735: PUSH
33736: LD_VAR 0 3
33740: PUSH
33741: FOR_IN
33742: IFFALSE 33944
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33744: LD_ADDR_VAR 0 9
33748: PUSH
33749: LD_VAR 0 7
33753: PPUSH
33754: LD_VAR 0 1
33758: PPUSH
33759: LD_VAR 0 2
33763: PPUSH
33764: CALL_OW 297
33768: ST_TO_ADDR
// if not result then
33769: LD_VAR 0 6
33773: NOT
33774: IFFALSE 33800
// result := [ [ i , tmp ] ] else
33776: LD_ADDR_VAR 0 6
33780: PUSH
33781: LD_VAR 0 7
33785: PUSH
33786: LD_VAR 0 9
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: EMPTY
33796: LIST
33797: ST_TO_ADDR
33798: GO 33942
// begin if result [ result ] [ 2 ] < tmp then
33800: LD_VAR 0 6
33804: PUSH
33805: LD_VAR 0 6
33809: ARRAY
33810: PUSH
33811: LD_INT 2
33813: ARRAY
33814: PUSH
33815: LD_VAR 0 9
33819: LESS
33820: IFFALSE 33862
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33822: LD_ADDR_VAR 0 6
33826: PUSH
33827: LD_VAR 0 6
33831: PPUSH
33832: LD_VAR 0 6
33836: PUSH
33837: LD_INT 1
33839: PLUS
33840: PPUSH
33841: LD_VAR 0 7
33845: PUSH
33846: LD_VAR 0 9
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PPUSH
33855: CALL_OW 2
33859: ST_TO_ADDR
33860: GO 33942
// for j = 1 to result do
33862: LD_ADDR_VAR 0 8
33866: PUSH
33867: DOUBLE
33868: LD_INT 1
33870: DEC
33871: ST_TO_ADDR
33872: LD_VAR 0 6
33876: PUSH
33877: FOR_TO
33878: IFFALSE 33940
// begin if tmp < result [ j ] [ 2 ] then
33880: LD_VAR 0 9
33884: PUSH
33885: LD_VAR 0 6
33889: PUSH
33890: LD_VAR 0 8
33894: ARRAY
33895: PUSH
33896: LD_INT 2
33898: ARRAY
33899: LESS
33900: IFFALSE 33938
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33902: LD_ADDR_VAR 0 6
33906: PUSH
33907: LD_VAR 0 6
33911: PPUSH
33912: LD_VAR 0 8
33916: PPUSH
33917: LD_VAR 0 7
33921: PUSH
33922: LD_VAR 0 9
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PPUSH
33931: CALL_OW 2
33935: ST_TO_ADDR
// break ;
33936: GO 33940
// end ; end ;
33938: GO 33877
33940: POP
33941: POP
// end ; end ;
33942: GO 33741
33944: POP
33945: POP
// if result and not asc then
33946: LD_VAR 0 6
33950: PUSH
33951: LD_VAR 0 4
33955: NOT
33956: AND
33957: IFFALSE 34032
// begin tmp := result ;
33959: LD_ADDR_VAR 0 9
33963: PUSH
33964: LD_VAR 0 6
33968: ST_TO_ADDR
// for i = tmp downto 1 do
33969: LD_ADDR_VAR 0 7
33973: PUSH
33974: DOUBLE
33975: LD_VAR 0 9
33979: INC
33980: ST_TO_ADDR
33981: LD_INT 1
33983: PUSH
33984: FOR_DOWNTO
33985: IFFALSE 34030
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33987: LD_ADDR_VAR 0 6
33991: PUSH
33992: LD_VAR 0 6
33996: PPUSH
33997: LD_VAR 0 9
34001: PUSH
34002: LD_VAR 0 7
34006: MINUS
34007: PUSH
34008: LD_INT 1
34010: PLUS
34011: PPUSH
34012: LD_VAR 0 9
34016: PUSH
34017: LD_VAR 0 7
34021: ARRAY
34022: PPUSH
34023: CALL_OW 1
34027: ST_TO_ADDR
34028: GO 33984
34030: POP
34031: POP
// end ; tmp := [ ] ;
34032: LD_ADDR_VAR 0 9
34036: PUSH
34037: EMPTY
34038: ST_TO_ADDR
// if mode then
34039: LD_VAR 0 5
34043: IFFALSE 34112
// begin for i = 1 to result do
34045: LD_ADDR_VAR 0 7
34049: PUSH
34050: DOUBLE
34051: LD_INT 1
34053: DEC
34054: ST_TO_ADDR
34055: LD_VAR 0 6
34059: PUSH
34060: FOR_TO
34061: IFFALSE 34100
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34063: LD_ADDR_VAR 0 9
34067: PUSH
34068: LD_VAR 0 9
34072: PPUSH
34073: LD_VAR 0 7
34077: PPUSH
34078: LD_VAR 0 6
34082: PUSH
34083: LD_VAR 0 7
34087: ARRAY
34088: PUSH
34089: LD_INT 1
34091: ARRAY
34092: PPUSH
34093: CALL_OW 1
34097: ST_TO_ADDR
34098: GO 34060
34100: POP
34101: POP
// result := tmp ;
34102: LD_ADDR_VAR 0 6
34106: PUSH
34107: LD_VAR 0 9
34111: ST_TO_ADDR
// end ; end ;
34112: LD_VAR 0 6
34116: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34117: LD_INT 0
34119: PPUSH
34120: PPUSH
34121: PPUSH
34122: PPUSH
34123: PPUSH
34124: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34125: LD_ADDR_VAR 0 5
34129: PUSH
34130: LD_INT 0
34132: PUSH
34133: LD_INT 0
34135: PUSH
34136: LD_INT 0
34138: PUSH
34139: EMPTY
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: ST_TO_ADDR
// if not x or not y then
34147: LD_VAR 0 2
34151: NOT
34152: PUSH
34153: LD_VAR 0 3
34157: NOT
34158: OR
34159: IFFALSE 34163
// exit ;
34161: GO 35815
// if not range then
34163: LD_VAR 0 4
34167: NOT
34168: IFFALSE 34178
// range := 10 ;
34170: LD_ADDR_VAR 0 4
34174: PUSH
34175: LD_INT 10
34177: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34178: LD_ADDR_VAR 0 8
34182: PUSH
34183: LD_INT 81
34185: PUSH
34186: LD_VAR 0 1
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: LD_INT 92
34197: PUSH
34198: LD_VAR 0 2
34202: PUSH
34203: LD_VAR 0 3
34207: PUSH
34208: LD_VAR 0 4
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 3
34221: PUSH
34222: LD_INT 21
34224: PUSH
34225: LD_INT 3
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: LIST
34240: PPUSH
34241: CALL_OW 69
34245: ST_TO_ADDR
// if not tmp then
34246: LD_VAR 0 8
34250: NOT
34251: IFFALSE 34255
// exit ;
34253: GO 35815
// for i in tmp do
34255: LD_ADDR_VAR 0 6
34259: PUSH
34260: LD_VAR 0 8
34264: PUSH
34265: FOR_IN
34266: IFFALSE 35790
// begin points := [ 0 , 0 , 0 ] ;
34268: LD_ADDR_VAR 0 9
34272: PUSH
34273: LD_INT 0
34275: PUSH
34276: LD_INT 0
34278: PUSH
34279: LD_INT 0
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: LIST
34286: ST_TO_ADDR
// bpoints := 1 ;
34287: LD_ADDR_VAR 0 10
34291: PUSH
34292: LD_INT 1
34294: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34295: LD_VAR 0 6
34299: PPUSH
34300: CALL_OW 247
34304: PUSH
34305: LD_INT 1
34307: DOUBLE
34308: EQUAL
34309: IFTRUE 34313
34311: GO 34891
34313: POP
// begin if GetClass ( i ) = 1 then
34314: LD_VAR 0 6
34318: PPUSH
34319: CALL_OW 257
34323: PUSH
34324: LD_INT 1
34326: EQUAL
34327: IFFALSE 34348
// points := [ 10 , 5 , 3 ] ;
34329: LD_ADDR_VAR 0 9
34333: PUSH
34334: LD_INT 10
34336: PUSH
34337: LD_INT 5
34339: PUSH
34340: LD_INT 3
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: LIST
34347: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34348: LD_VAR 0 6
34352: PPUSH
34353: CALL_OW 257
34357: PUSH
34358: LD_INT 2
34360: PUSH
34361: LD_INT 3
34363: PUSH
34364: LD_INT 4
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: LIST
34371: IN
34372: IFFALSE 34393
// points := [ 3 , 2 , 1 ] ;
34374: LD_ADDR_VAR 0 9
34378: PUSH
34379: LD_INT 3
34381: PUSH
34382: LD_INT 2
34384: PUSH
34385: LD_INT 1
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: LIST
34392: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34393: LD_VAR 0 6
34397: PPUSH
34398: CALL_OW 257
34402: PUSH
34403: LD_INT 5
34405: EQUAL
34406: IFFALSE 34427
// points := [ 130 , 5 , 2 ] ;
34408: LD_ADDR_VAR 0 9
34412: PUSH
34413: LD_INT 130
34415: PUSH
34416: LD_INT 5
34418: PUSH
34419: LD_INT 2
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: LIST
34426: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34427: LD_VAR 0 6
34431: PPUSH
34432: CALL_OW 257
34436: PUSH
34437: LD_INT 8
34439: EQUAL
34440: IFFALSE 34461
// points := [ 35 , 35 , 30 ] ;
34442: LD_ADDR_VAR 0 9
34446: PUSH
34447: LD_INT 35
34449: PUSH
34450: LD_INT 35
34452: PUSH
34453: LD_INT 30
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: LIST
34460: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34461: LD_VAR 0 6
34465: PPUSH
34466: CALL_OW 257
34470: PUSH
34471: LD_INT 9
34473: EQUAL
34474: IFFALSE 34495
// points := [ 20 , 55 , 40 ] ;
34476: LD_ADDR_VAR 0 9
34480: PUSH
34481: LD_INT 20
34483: PUSH
34484: LD_INT 55
34486: PUSH
34487: LD_INT 40
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: LIST
34494: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34495: LD_VAR 0 6
34499: PPUSH
34500: CALL_OW 257
34504: PUSH
34505: LD_INT 12
34507: PUSH
34508: LD_INT 16
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: IN
34515: IFFALSE 34536
// points := [ 5 , 3 , 2 ] ;
34517: LD_ADDR_VAR 0 9
34521: PUSH
34522: LD_INT 5
34524: PUSH
34525: LD_INT 3
34527: PUSH
34528: LD_INT 2
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: LIST
34535: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34536: LD_VAR 0 6
34540: PPUSH
34541: CALL_OW 257
34545: PUSH
34546: LD_INT 17
34548: EQUAL
34549: IFFALSE 34570
// points := [ 100 , 50 , 75 ] ;
34551: LD_ADDR_VAR 0 9
34555: PUSH
34556: LD_INT 100
34558: PUSH
34559: LD_INT 50
34561: PUSH
34562: LD_INT 75
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: LIST
34569: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34570: LD_VAR 0 6
34574: PPUSH
34575: CALL_OW 257
34579: PUSH
34580: LD_INT 15
34582: EQUAL
34583: IFFALSE 34604
// points := [ 10 , 5 , 3 ] ;
34585: LD_ADDR_VAR 0 9
34589: PUSH
34590: LD_INT 10
34592: PUSH
34593: LD_INT 5
34595: PUSH
34596: LD_INT 3
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: LIST
34603: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34604: LD_VAR 0 6
34608: PPUSH
34609: CALL_OW 257
34613: PUSH
34614: LD_INT 14
34616: EQUAL
34617: IFFALSE 34638
// points := [ 10 , 0 , 0 ] ;
34619: LD_ADDR_VAR 0 9
34623: PUSH
34624: LD_INT 10
34626: PUSH
34627: LD_INT 0
34629: PUSH
34630: LD_INT 0
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: LIST
34637: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34638: LD_VAR 0 6
34642: PPUSH
34643: CALL_OW 257
34647: PUSH
34648: LD_INT 11
34650: EQUAL
34651: IFFALSE 34672
// points := [ 30 , 10 , 5 ] ;
34653: LD_ADDR_VAR 0 9
34657: PUSH
34658: LD_INT 30
34660: PUSH
34661: LD_INT 10
34663: PUSH
34664: LD_INT 5
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: LIST
34671: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34672: LD_VAR 0 1
34676: PPUSH
34677: LD_INT 5
34679: PPUSH
34680: CALL_OW 321
34684: PUSH
34685: LD_INT 2
34687: EQUAL
34688: IFFALSE 34705
// bpoints := bpoints * 1.8 ;
34690: LD_ADDR_VAR 0 10
34694: PUSH
34695: LD_VAR 0 10
34699: PUSH
34700: LD_REAL  1.80000000000000E+0000
34703: MUL
34704: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34705: LD_VAR 0 6
34709: PPUSH
34710: CALL_OW 257
34714: PUSH
34715: LD_INT 1
34717: PUSH
34718: LD_INT 2
34720: PUSH
34721: LD_INT 3
34723: PUSH
34724: LD_INT 4
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: IN
34733: PUSH
34734: LD_VAR 0 1
34738: PPUSH
34739: LD_INT 51
34741: PPUSH
34742: CALL_OW 321
34746: PUSH
34747: LD_INT 2
34749: EQUAL
34750: AND
34751: IFFALSE 34768
// bpoints := bpoints * 1.2 ;
34753: LD_ADDR_VAR 0 10
34757: PUSH
34758: LD_VAR 0 10
34762: PUSH
34763: LD_REAL  1.20000000000000E+0000
34766: MUL
34767: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34768: LD_VAR 0 6
34772: PPUSH
34773: CALL_OW 257
34777: PUSH
34778: LD_INT 5
34780: PUSH
34781: LD_INT 7
34783: PUSH
34784: LD_INT 9
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: LIST
34791: IN
34792: PUSH
34793: LD_VAR 0 1
34797: PPUSH
34798: LD_INT 52
34800: PPUSH
34801: CALL_OW 321
34805: PUSH
34806: LD_INT 2
34808: EQUAL
34809: AND
34810: IFFALSE 34827
// bpoints := bpoints * 1.5 ;
34812: LD_ADDR_VAR 0 10
34816: PUSH
34817: LD_VAR 0 10
34821: PUSH
34822: LD_REAL  1.50000000000000E+0000
34825: MUL
34826: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34827: LD_VAR 0 1
34831: PPUSH
34832: LD_INT 66
34834: PPUSH
34835: CALL_OW 321
34839: PUSH
34840: LD_INT 2
34842: EQUAL
34843: IFFALSE 34860
// bpoints := bpoints * 1.1 ;
34845: LD_ADDR_VAR 0 10
34849: PUSH
34850: LD_VAR 0 10
34854: PUSH
34855: LD_REAL  1.10000000000000E+0000
34858: MUL
34859: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34860: LD_ADDR_VAR 0 10
34864: PUSH
34865: LD_VAR 0 10
34869: PUSH
34870: LD_VAR 0 6
34874: PPUSH
34875: LD_INT 1
34877: PPUSH
34878: CALL_OW 259
34882: PUSH
34883: LD_REAL  1.15000000000000E+0000
34886: MUL
34887: MUL
34888: ST_TO_ADDR
// end ; unit_vehicle :
34889: GO 35719
34891: LD_INT 2
34893: DOUBLE
34894: EQUAL
34895: IFTRUE 34899
34897: GO 35707
34899: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34900: LD_VAR 0 6
34904: PPUSH
34905: CALL_OW 264
34909: PUSH
34910: LD_INT 2
34912: PUSH
34913: LD_INT 42
34915: PUSH
34916: LD_INT 24
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: LIST
34923: IN
34924: IFFALSE 34945
// points := [ 25 , 5 , 3 ] ;
34926: LD_ADDR_VAR 0 9
34930: PUSH
34931: LD_INT 25
34933: PUSH
34934: LD_INT 5
34936: PUSH
34937: LD_INT 3
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: LIST
34944: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34945: LD_VAR 0 6
34949: PPUSH
34950: CALL_OW 264
34954: PUSH
34955: LD_INT 4
34957: PUSH
34958: LD_INT 43
34960: PUSH
34961: LD_INT 25
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: LIST
34968: IN
34969: IFFALSE 34990
// points := [ 40 , 15 , 5 ] ;
34971: LD_ADDR_VAR 0 9
34975: PUSH
34976: LD_INT 40
34978: PUSH
34979: LD_INT 15
34981: PUSH
34982: LD_INT 5
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: LIST
34989: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34990: LD_VAR 0 6
34994: PPUSH
34995: CALL_OW 264
34999: PUSH
35000: LD_INT 3
35002: PUSH
35003: LD_INT 23
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: IN
35010: IFFALSE 35031
// points := [ 7 , 25 , 8 ] ;
35012: LD_ADDR_VAR 0 9
35016: PUSH
35017: LD_INT 7
35019: PUSH
35020: LD_INT 25
35022: PUSH
35023: LD_INT 8
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: LIST
35030: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35031: LD_VAR 0 6
35035: PPUSH
35036: CALL_OW 264
35040: PUSH
35041: LD_INT 5
35043: PUSH
35044: LD_INT 27
35046: PUSH
35047: LD_INT 44
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: LIST
35054: IN
35055: IFFALSE 35076
// points := [ 14 , 50 , 16 ] ;
35057: LD_ADDR_VAR 0 9
35061: PUSH
35062: LD_INT 14
35064: PUSH
35065: LD_INT 50
35067: PUSH
35068: LD_INT 16
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: LIST
35075: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35076: LD_VAR 0 6
35080: PPUSH
35081: CALL_OW 264
35085: PUSH
35086: LD_INT 6
35088: PUSH
35089: LD_INT 46
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: IN
35096: IFFALSE 35117
// points := [ 32 , 120 , 70 ] ;
35098: LD_ADDR_VAR 0 9
35102: PUSH
35103: LD_INT 32
35105: PUSH
35106: LD_INT 120
35108: PUSH
35109: LD_INT 70
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: LIST
35116: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35117: LD_VAR 0 6
35121: PPUSH
35122: CALL_OW 264
35126: PUSH
35127: LD_INT 7
35129: PUSH
35130: LD_INT 28
35132: PUSH
35133: LD_INT 45
35135: PUSH
35136: LD_EXP 101
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: IN
35147: IFFALSE 35168
// points := [ 35 , 20 , 45 ] ;
35149: LD_ADDR_VAR 0 9
35153: PUSH
35154: LD_INT 35
35156: PUSH
35157: LD_INT 20
35159: PUSH
35160: LD_INT 45
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: LIST
35167: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35168: LD_VAR 0 6
35172: PPUSH
35173: CALL_OW 264
35177: PUSH
35178: LD_INT 47
35180: PUSH
35181: EMPTY
35182: LIST
35183: IN
35184: IFFALSE 35205
// points := [ 67 , 45 , 75 ] ;
35186: LD_ADDR_VAR 0 9
35190: PUSH
35191: LD_INT 67
35193: PUSH
35194: LD_INT 45
35196: PUSH
35197: LD_INT 75
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: LIST
35204: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35205: LD_VAR 0 6
35209: PPUSH
35210: CALL_OW 264
35214: PUSH
35215: LD_INT 26
35217: PUSH
35218: EMPTY
35219: LIST
35220: IN
35221: IFFALSE 35242
// points := [ 120 , 30 , 80 ] ;
35223: LD_ADDR_VAR 0 9
35227: PUSH
35228: LD_INT 120
35230: PUSH
35231: LD_INT 30
35233: PUSH
35234: LD_INT 80
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: LIST
35241: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35242: LD_VAR 0 6
35246: PPUSH
35247: CALL_OW 264
35251: PUSH
35252: LD_INT 22
35254: PUSH
35255: EMPTY
35256: LIST
35257: IN
35258: IFFALSE 35279
// points := [ 40 , 1 , 1 ] ;
35260: LD_ADDR_VAR 0 9
35264: PUSH
35265: LD_INT 40
35267: PUSH
35268: LD_INT 1
35270: PUSH
35271: LD_INT 1
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: LIST
35278: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35279: LD_VAR 0 6
35283: PPUSH
35284: CALL_OW 264
35288: PUSH
35289: LD_INT 29
35291: PUSH
35292: EMPTY
35293: LIST
35294: IN
35295: IFFALSE 35316
// points := [ 70 , 200 , 400 ] ;
35297: LD_ADDR_VAR 0 9
35301: PUSH
35302: LD_INT 70
35304: PUSH
35305: LD_INT 200
35307: PUSH
35308: LD_INT 400
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: LIST
35315: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35316: LD_VAR 0 6
35320: PPUSH
35321: CALL_OW 264
35325: PUSH
35326: LD_INT 14
35328: PUSH
35329: LD_INT 53
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: IN
35336: IFFALSE 35357
// points := [ 40 , 10 , 20 ] ;
35338: LD_ADDR_VAR 0 9
35342: PUSH
35343: LD_INT 40
35345: PUSH
35346: LD_INT 10
35348: PUSH
35349: LD_INT 20
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: LIST
35356: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35357: LD_VAR 0 6
35361: PPUSH
35362: CALL_OW 264
35366: PUSH
35367: LD_INT 9
35369: PUSH
35370: EMPTY
35371: LIST
35372: IN
35373: IFFALSE 35394
// points := [ 5 , 70 , 20 ] ;
35375: LD_ADDR_VAR 0 9
35379: PUSH
35380: LD_INT 5
35382: PUSH
35383: LD_INT 70
35385: PUSH
35386: LD_INT 20
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: LIST
35393: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35394: LD_VAR 0 6
35398: PPUSH
35399: CALL_OW 264
35403: PUSH
35404: LD_INT 10
35406: PUSH
35407: EMPTY
35408: LIST
35409: IN
35410: IFFALSE 35431
// points := [ 35 , 110 , 70 ] ;
35412: LD_ADDR_VAR 0 9
35416: PUSH
35417: LD_INT 35
35419: PUSH
35420: LD_INT 110
35422: PUSH
35423: LD_INT 70
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: LIST
35430: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35431: LD_VAR 0 6
35435: PPUSH
35436: CALL_OW 265
35440: PUSH
35441: LD_INT 25
35443: EQUAL
35444: IFFALSE 35465
// points := [ 80 , 65 , 100 ] ;
35446: LD_ADDR_VAR 0 9
35450: PUSH
35451: LD_INT 80
35453: PUSH
35454: LD_INT 65
35456: PUSH
35457: LD_INT 100
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: LIST
35464: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35465: LD_VAR 0 6
35469: PPUSH
35470: CALL_OW 263
35474: PUSH
35475: LD_INT 1
35477: EQUAL
35478: IFFALSE 35513
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35480: LD_ADDR_VAR 0 10
35484: PUSH
35485: LD_VAR 0 10
35489: PUSH
35490: LD_VAR 0 6
35494: PPUSH
35495: CALL_OW 311
35499: PPUSH
35500: LD_INT 3
35502: PPUSH
35503: CALL_OW 259
35507: PUSH
35508: LD_INT 4
35510: MUL
35511: MUL
35512: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35513: LD_VAR 0 6
35517: PPUSH
35518: CALL_OW 263
35522: PUSH
35523: LD_INT 2
35525: EQUAL
35526: IFFALSE 35577
// begin j := IsControledBy ( i ) ;
35528: LD_ADDR_VAR 0 7
35532: PUSH
35533: LD_VAR 0 6
35537: PPUSH
35538: CALL_OW 312
35542: ST_TO_ADDR
// if j then
35543: LD_VAR 0 7
35547: IFFALSE 35577
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35549: LD_ADDR_VAR 0 10
35553: PUSH
35554: LD_VAR 0 10
35558: PUSH
35559: LD_VAR 0 7
35563: PPUSH
35564: LD_INT 3
35566: PPUSH
35567: CALL_OW 259
35571: PUSH
35572: LD_INT 3
35574: MUL
35575: MUL
35576: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35577: LD_VAR 0 6
35581: PPUSH
35582: CALL_OW 264
35586: PUSH
35587: LD_INT 5
35589: PUSH
35590: LD_INT 6
35592: PUSH
35593: LD_INT 46
35595: PUSH
35596: LD_INT 44
35598: PUSH
35599: LD_INT 47
35601: PUSH
35602: LD_INT 45
35604: PUSH
35605: LD_INT 28
35607: PUSH
35608: LD_INT 7
35610: PUSH
35611: LD_INT 27
35613: PUSH
35614: LD_INT 29
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: IN
35629: PUSH
35630: LD_VAR 0 1
35634: PPUSH
35635: LD_INT 52
35637: PPUSH
35638: CALL_OW 321
35642: PUSH
35643: LD_INT 2
35645: EQUAL
35646: AND
35647: IFFALSE 35664
// bpoints := bpoints * 1.2 ;
35649: LD_ADDR_VAR 0 10
35653: PUSH
35654: LD_VAR 0 10
35658: PUSH
35659: LD_REAL  1.20000000000000E+0000
35662: MUL
35663: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35664: LD_VAR 0 6
35668: PPUSH
35669: CALL_OW 264
35673: PUSH
35674: LD_INT 6
35676: PUSH
35677: LD_INT 46
35679: PUSH
35680: LD_INT 47
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: LIST
35687: IN
35688: IFFALSE 35705
// bpoints := bpoints * 1.2 ;
35690: LD_ADDR_VAR 0 10
35694: PUSH
35695: LD_VAR 0 10
35699: PUSH
35700: LD_REAL  1.20000000000000E+0000
35703: MUL
35704: ST_TO_ADDR
// end ; unit_building :
35705: GO 35719
35707: LD_INT 3
35709: DOUBLE
35710: EQUAL
35711: IFTRUE 35715
35713: GO 35718
35715: POP
// ; end ;
35716: GO 35719
35718: POP
// for j = 1 to 3 do
35719: LD_ADDR_VAR 0 7
35723: PUSH
35724: DOUBLE
35725: LD_INT 1
35727: DEC
35728: ST_TO_ADDR
35729: LD_INT 3
35731: PUSH
35732: FOR_TO
35733: IFFALSE 35786
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35735: LD_ADDR_VAR 0 5
35739: PUSH
35740: LD_VAR 0 5
35744: PPUSH
35745: LD_VAR 0 7
35749: PPUSH
35750: LD_VAR 0 5
35754: PUSH
35755: LD_VAR 0 7
35759: ARRAY
35760: PUSH
35761: LD_VAR 0 9
35765: PUSH
35766: LD_VAR 0 7
35770: ARRAY
35771: PUSH
35772: LD_VAR 0 10
35776: MUL
35777: PLUS
35778: PPUSH
35779: CALL_OW 1
35783: ST_TO_ADDR
35784: GO 35732
35786: POP
35787: POP
// end ;
35788: GO 34265
35790: POP
35791: POP
// result := Replace ( result , 4 , tmp ) ;
35792: LD_ADDR_VAR 0 5
35796: PUSH
35797: LD_VAR 0 5
35801: PPUSH
35802: LD_INT 4
35804: PPUSH
35805: LD_VAR 0 8
35809: PPUSH
35810: CALL_OW 1
35814: ST_TO_ADDR
// end ;
35815: LD_VAR 0 5
35819: RET
// export function DangerAtRange ( unit , range ) ; begin
35820: LD_INT 0
35822: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35823: LD_ADDR_VAR 0 3
35827: PUSH
35828: LD_VAR 0 1
35832: PPUSH
35833: CALL_OW 255
35837: PPUSH
35838: LD_VAR 0 1
35842: PPUSH
35843: CALL_OW 250
35847: PPUSH
35848: LD_VAR 0 1
35852: PPUSH
35853: CALL_OW 251
35857: PPUSH
35858: LD_VAR 0 2
35862: PPUSH
35863: CALL 34117 0 4
35867: ST_TO_ADDR
// end ;
35868: LD_VAR 0 3
35872: RET
// export function DangerInArea ( side , area ) ; begin
35873: LD_INT 0
35875: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35876: LD_ADDR_VAR 0 3
35880: PUSH
35881: LD_VAR 0 2
35885: PPUSH
35886: LD_INT 81
35888: PUSH
35889: LD_VAR 0 1
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PPUSH
35898: CALL_OW 70
35902: ST_TO_ADDR
// end ;
35903: LD_VAR 0 3
35907: RET
// export function IsExtension ( b ) ; begin
35908: LD_INT 0
35910: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35911: LD_ADDR_VAR 0 2
35915: PUSH
35916: LD_VAR 0 1
35920: PUSH
35921: LD_INT 23
35923: PUSH
35924: LD_INT 20
35926: PUSH
35927: LD_INT 22
35929: PUSH
35930: LD_INT 17
35932: PUSH
35933: LD_INT 24
35935: PUSH
35936: LD_INT 21
35938: PUSH
35939: LD_INT 19
35941: PUSH
35942: LD_INT 16
35944: PUSH
35945: LD_INT 25
35947: PUSH
35948: LD_INT 18
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: IN
35963: ST_TO_ADDR
// end ;
35964: LD_VAR 0 2
35968: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35969: LD_INT 0
35971: PPUSH
35972: PPUSH
35973: PPUSH
// result := [ ] ;
35974: LD_ADDR_VAR 0 4
35978: PUSH
35979: EMPTY
35980: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35981: LD_ADDR_VAR 0 5
35985: PUSH
35986: LD_VAR 0 2
35990: PPUSH
35991: LD_INT 21
35993: PUSH
35994: LD_INT 3
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: PPUSH
36001: CALL_OW 70
36005: ST_TO_ADDR
// if not tmp then
36006: LD_VAR 0 5
36010: NOT
36011: IFFALSE 36015
// exit ;
36013: GO 36079
// if checkLink then
36015: LD_VAR 0 3
36019: IFFALSE 36069
// begin for i in tmp do
36021: LD_ADDR_VAR 0 6
36025: PUSH
36026: LD_VAR 0 5
36030: PUSH
36031: FOR_IN
36032: IFFALSE 36067
// if GetBase ( i ) <> base then
36034: LD_VAR 0 6
36038: PPUSH
36039: CALL_OW 274
36043: PUSH
36044: LD_VAR 0 1
36048: NONEQUAL
36049: IFFALSE 36065
// ComLinkToBase ( base , i ) ;
36051: LD_VAR 0 1
36055: PPUSH
36056: LD_VAR 0 6
36060: PPUSH
36061: CALL_OW 169
36065: GO 36031
36067: POP
36068: POP
// end ; result := tmp ;
36069: LD_ADDR_VAR 0 4
36073: PUSH
36074: LD_VAR 0 5
36078: ST_TO_ADDR
// end ;
36079: LD_VAR 0 4
36083: RET
// export function ComComplete ( units , b ) ; var i ; begin
36084: LD_INT 0
36086: PPUSH
36087: PPUSH
// if not units then
36088: LD_VAR 0 1
36092: NOT
36093: IFFALSE 36097
// exit ;
36095: GO 36187
// for i in units do
36097: LD_ADDR_VAR 0 4
36101: PUSH
36102: LD_VAR 0 1
36106: PUSH
36107: FOR_IN
36108: IFFALSE 36185
// if BuildingStatus ( b ) = bs_build then
36110: LD_VAR 0 2
36114: PPUSH
36115: CALL_OW 461
36119: PUSH
36120: LD_INT 1
36122: EQUAL
36123: IFFALSE 36183
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36125: LD_VAR 0 4
36129: PPUSH
36130: LD_STRING h
36132: PUSH
36133: LD_VAR 0 2
36137: PPUSH
36138: CALL_OW 250
36142: PUSH
36143: LD_VAR 0 2
36147: PPUSH
36148: CALL_OW 251
36152: PUSH
36153: LD_VAR 0 2
36157: PUSH
36158: LD_INT 0
36160: PUSH
36161: LD_INT 0
36163: PUSH
36164: LD_INT 0
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: PUSH
36176: EMPTY
36177: LIST
36178: PPUSH
36179: CALL_OW 446
36183: GO 36107
36185: POP
36186: POP
// end ;
36187: LD_VAR 0 3
36191: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36192: LD_INT 0
36194: PPUSH
36195: PPUSH
36196: PPUSH
36197: PPUSH
36198: PPUSH
36199: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36200: LD_VAR 0 1
36204: NOT
36205: PUSH
36206: LD_VAR 0 1
36210: PPUSH
36211: CALL_OW 263
36215: PUSH
36216: LD_INT 2
36218: NONEQUAL
36219: OR
36220: IFFALSE 36224
// exit ;
36222: GO 36540
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36224: LD_ADDR_VAR 0 6
36228: PUSH
36229: LD_INT 22
36231: PUSH
36232: LD_VAR 0 1
36236: PPUSH
36237: CALL_OW 255
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 2
36248: PUSH
36249: LD_INT 30
36251: PUSH
36252: LD_INT 36
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: PUSH
36259: LD_INT 34
36261: PUSH
36262: LD_INT 31
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: LIST
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PPUSH
36278: CALL_OW 69
36282: ST_TO_ADDR
// if not tmp then
36283: LD_VAR 0 6
36287: NOT
36288: IFFALSE 36292
// exit ;
36290: GO 36540
// result := [ ] ;
36292: LD_ADDR_VAR 0 2
36296: PUSH
36297: EMPTY
36298: ST_TO_ADDR
// for i in tmp do
36299: LD_ADDR_VAR 0 3
36303: PUSH
36304: LD_VAR 0 6
36308: PUSH
36309: FOR_IN
36310: IFFALSE 36381
// begin t := UnitsInside ( i ) ;
36312: LD_ADDR_VAR 0 4
36316: PUSH
36317: LD_VAR 0 3
36321: PPUSH
36322: CALL_OW 313
36326: ST_TO_ADDR
// if t then
36327: LD_VAR 0 4
36331: IFFALSE 36379
// for j in t do
36333: LD_ADDR_VAR 0 7
36337: PUSH
36338: LD_VAR 0 4
36342: PUSH
36343: FOR_IN
36344: IFFALSE 36377
// result := Replace ( result , result + 1 , j ) ;
36346: LD_ADDR_VAR 0 2
36350: PUSH
36351: LD_VAR 0 2
36355: PPUSH
36356: LD_VAR 0 2
36360: PUSH
36361: LD_INT 1
36363: PLUS
36364: PPUSH
36365: LD_VAR 0 7
36369: PPUSH
36370: CALL_OW 1
36374: ST_TO_ADDR
36375: GO 36343
36377: POP
36378: POP
// end ;
36379: GO 36309
36381: POP
36382: POP
// if not result then
36383: LD_VAR 0 2
36387: NOT
36388: IFFALSE 36392
// exit ;
36390: GO 36540
// mech := result [ 1 ] ;
36392: LD_ADDR_VAR 0 5
36396: PUSH
36397: LD_VAR 0 2
36401: PUSH
36402: LD_INT 1
36404: ARRAY
36405: ST_TO_ADDR
// if result > 1 then
36406: LD_VAR 0 2
36410: PUSH
36411: LD_INT 1
36413: GREATER
36414: IFFALSE 36526
// begin for i = 2 to result do
36416: LD_ADDR_VAR 0 3
36420: PUSH
36421: DOUBLE
36422: LD_INT 2
36424: DEC
36425: ST_TO_ADDR
36426: LD_VAR 0 2
36430: PUSH
36431: FOR_TO
36432: IFFALSE 36524
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36434: LD_ADDR_VAR 0 4
36438: PUSH
36439: LD_VAR 0 2
36443: PUSH
36444: LD_VAR 0 3
36448: ARRAY
36449: PPUSH
36450: LD_INT 3
36452: PPUSH
36453: CALL_OW 259
36457: PUSH
36458: LD_VAR 0 2
36462: PUSH
36463: LD_VAR 0 3
36467: ARRAY
36468: PPUSH
36469: CALL_OW 432
36473: MINUS
36474: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36475: LD_VAR 0 4
36479: PUSH
36480: LD_VAR 0 5
36484: PPUSH
36485: LD_INT 3
36487: PPUSH
36488: CALL_OW 259
36492: PUSH
36493: LD_VAR 0 5
36497: PPUSH
36498: CALL_OW 432
36502: MINUS
36503: GREATEREQUAL
36504: IFFALSE 36522
// mech := result [ i ] ;
36506: LD_ADDR_VAR 0 5
36510: PUSH
36511: LD_VAR 0 2
36515: PUSH
36516: LD_VAR 0 3
36520: ARRAY
36521: ST_TO_ADDR
// end ;
36522: GO 36431
36524: POP
36525: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36526: LD_VAR 0 1
36530: PPUSH
36531: LD_VAR 0 5
36535: PPUSH
36536: CALL_OW 135
// end ;
36540: LD_VAR 0 2
36544: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36545: LD_INT 0
36547: PPUSH
36548: PPUSH
36549: PPUSH
36550: PPUSH
36551: PPUSH
36552: PPUSH
36553: PPUSH
36554: PPUSH
36555: PPUSH
36556: PPUSH
36557: PPUSH
36558: PPUSH
36559: PPUSH
// result := [ ] ;
36560: LD_ADDR_VAR 0 7
36564: PUSH
36565: EMPTY
36566: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36567: LD_VAR 0 1
36571: PPUSH
36572: CALL_OW 266
36576: PUSH
36577: LD_INT 0
36579: PUSH
36580: LD_INT 1
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: IN
36587: NOT
36588: IFFALSE 36592
// exit ;
36590: GO 38226
// if name then
36592: LD_VAR 0 3
36596: IFFALSE 36612
// SetBName ( base_dep , name ) ;
36598: LD_VAR 0 1
36602: PPUSH
36603: LD_VAR 0 3
36607: PPUSH
36608: CALL_OW 500
// base := GetBase ( base_dep ) ;
36612: LD_ADDR_VAR 0 15
36616: PUSH
36617: LD_VAR 0 1
36621: PPUSH
36622: CALL_OW 274
36626: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36627: LD_ADDR_VAR 0 16
36631: PUSH
36632: LD_VAR 0 1
36636: PPUSH
36637: CALL_OW 255
36641: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36642: LD_ADDR_VAR 0 17
36646: PUSH
36647: LD_VAR 0 1
36651: PPUSH
36652: CALL_OW 248
36656: ST_TO_ADDR
// if sources then
36657: LD_VAR 0 5
36661: IFFALSE 36708
// for i = 1 to 3 do
36663: LD_ADDR_VAR 0 8
36667: PUSH
36668: DOUBLE
36669: LD_INT 1
36671: DEC
36672: ST_TO_ADDR
36673: LD_INT 3
36675: PUSH
36676: FOR_TO
36677: IFFALSE 36706
// AddResourceType ( base , i , sources [ i ] ) ;
36679: LD_VAR 0 15
36683: PPUSH
36684: LD_VAR 0 8
36688: PPUSH
36689: LD_VAR 0 5
36693: PUSH
36694: LD_VAR 0 8
36698: ARRAY
36699: PPUSH
36700: CALL_OW 276
36704: GO 36676
36706: POP
36707: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36708: LD_ADDR_VAR 0 18
36712: PUSH
36713: LD_VAR 0 15
36717: PPUSH
36718: LD_VAR 0 2
36722: PPUSH
36723: LD_INT 1
36725: PPUSH
36726: CALL 35969 0 3
36730: ST_TO_ADDR
// InitHc ;
36731: CALL_OW 19
// InitUc ;
36735: CALL_OW 18
// uc_side := side ;
36739: LD_ADDR_OWVAR 20
36743: PUSH
36744: LD_VAR 0 16
36748: ST_TO_ADDR
// uc_nation := nation ;
36749: LD_ADDR_OWVAR 21
36753: PUSH
36754: LD_VAR 0 17
36758: ST_TO_ADDR
// if buildings then
36759: LD_VAR 0 18
36763: IFFALSE 38085
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36765: LD_ADDR_VAR 0 19
36769: PUSH
36770: LD_VAR 0 18
36774: PPUSH
36775: LD_INT 2
36777: PUSH
36778: LD_INT 30
36780: PUSH
36781: LD_INT 29
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: LD_INT 30
36790: PUSH
36791: LD_INT 30
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: LIST
36802: PPUSH
36803: CALL_OW 72
36807: ST_TO_ADDR
// if tmp then
36808: LD_VAR 0 19
36812: IFFALSE 36860
// for i in tmp do
36814: LD_ADDR_VAR 0 8
36818: PUSH
36819: LD_VAR 0 19
36823: PUSH
36824: FOR_IN
36825: IFFALSE 36858
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36827: LD_VAR 0 8
36831: PPUSH
36832: CALL_OW 250
36836: PPUSH
36837: LD_VAR 0 8
36841: PPUSH
36842: CALL_OW 251
36846: PPUSH
36847: LD_VAR 0 16
36851: PPUSH
36852: CALL_OW 441
36856: GO 36824
36858: POP
36859: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36860: LD_VAR 0 18
36864: PPUSH
36865: LD_INT 2
36867: PUSH
36868: LD_INT 30
36870: PUSH
36871: LD_INT 32
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 30
36880: PUSH
36881: LD_INT 33
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: LIST
36892: PPUSH
36893: CALL_OW 72
36897: IFFALSE 36985
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36899: LD_ADDR_VAR 0 8
36903: PUSH
36904: LD_VAR 0 18
36908: PPUSH
36909: LD_INT 2
36911: PUSH
36912: LD_INT 30
36914: PUSH
36915: LD_INT 32
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 30
36924: PUSH
36925: LD_INT 33
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: LIST
36936: PPUSH
36937: CALL_OW 72
36941: PUSH
36942: FOR_IN
36943: IFFALSE 36983
// begin if not GetBWeapon ( i ) then
36945: LD_VAR 0 8
36949: PPUSH
36950: CALL_OW 269
36954: NOT
36955: IFFALSE 36981
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36957: LD_VAR 0 8
36961: PPUSH
36962: LD_VAR 0 8
36966: PPUSH
36967: LD_VAR 0 2
36971: PPUSH
36972: CALL 38231 0 2
36976: PPUSH
36977: CALL_OW 431
// end ;
36981: GO 36942
36983: POP
36984: POP
// end ; for i = 1 to personel do
36985: LD_ADDR_VAR 0 8
36989: PUSH
36990: DOUBLE
36991: LD_INT 1
36993: DEC
36994: ST_TO_ADDR
36995: LD_VAR 0 6
36999: PUSH
37000: FOR_TO
37001: IFFALSE 38065
// begin if i > 4 then
37003: LD_VAR 0 8
37007: PUSH
37008: LD_INT 4
37010: GREATER
37011: IFFALSE 37015
// break ;
37013: GO 38065
// case i of 1 :
37015: LD_VAR 0 8
37019: PUSH
37020: LD_INT 1
37022: DOUBLE
37023: EQUAL
37024: IFTRUE 37028
37026: GO 37108
37028: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37029: LD_ADDR_VAR 0 12
37033: PUSH
37034: LD_VAR 0 18
37038: PPUSH
37039: LD_INT 22
37041: PUSH
37042: LD_VAR 0 16
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 58
37053: PUSH
37054: EMPTY
37055: LIST
37056: PUSH
37057: LD_INT 2
37059: PUSH
37060: LD_INT 30
37062: PUSH
37063: LD_INT 32
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: PUSH
37070: LD_INT 30
37072: PUSH
37073: LD_INT 4
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 30
37082: PUSH
37083: LD_INT 5
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: LIST
37100: PPUSH
37101: CALL_OW 72
37105: ST_TO_ADDR
37106: GO 37330
37108: LD_INT 2
37110: DOUBLE
37111: EQUAL
37112: IFTRUE 37116
37114: GO 37178
37116: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37117: LD_ADDR_VAR 0 12
37121: PUSH
37122: LD_VAR 0 18
37126: PPUSH
37127: LD_INT 22
37129: PUSH
37130: LD_VAR 0 16
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 2
37141: PUSH
37142: LD_INT 30
37144: PUSH
37145: LD_INT 0
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 30
37154: PUSH
37155: LD_INT 1
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: LIST
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PPUSH
37171: CALL_OW 72
37175: ST_TO_ADDR
37176: GO 37330
37178: LD_INT 3
37180: DOUBLE
37181: EQUAL
37182: IFTRUE 37186
37184: GO 37248
37186: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37187: LD_ADDR_VAR 0 12
37191: PUSH
37192: LD_VAR 0 18
37196: PPUSH
37197: LD_INT 22
37199: PUSH
37200: LD_VAR 0 16
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: LD_INT 2
37211: PUSH
37212: LD_INT 30
37214: PUSH
37215: LD_INT 2
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 30
37224: PUSH
37225: LD_INT 3
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: LIST
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PPUSH
37241: CALL_OW 72
37245: ST_TO_ADDR
37246: GO 37330
37248: LD_INT 4
37250: DOUBLE
37251: EQUAL
37252: IFTRUE 37256
37254: GO 37329
37256: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37257: LD_ADDR_VAR 0 12
37261: PUSH
37262: LD_VAR 0 18
37266: PPUSH
37267: LD_INT 22
37269: PUSH
37270: LD_VAR 0 16
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 2
37281: PUSH
37282: LD_INT 30
37284: PUSH
37285: LD_INT 6
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 30
37294: PUSH
37295: LD_INT 7
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 30
37304: PUSH
37305: LD_INT 8
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: LIST
37316: LIST
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PPUSH
37322: CALL_OW 72
37326: ST_TO_ADDR
37327: GO 37330
37329: POP
// if i = 1 then
37330: LD_VAR 0 8
37334: PUSH
37335: LD_INT 1
37337: EQUAL
37338: IFFALSE 37449
// begin tmp := [ ] ;
37340: LD_ADDR_VAR 0 19
37344: PUSH
37345: EMPTY
37346: ST_TO_ADDR
// for j in f do
37347: LD_ADDR_VAR 0 9
37351: PUSH
37352: LD_VAR 0 12
37356: PUSH
37357: FOR_IN
37358: IFFALSE 37431
// if GetBType ( j ) = b_bunker then
37360: LD_VAR 0 9
37364: PPUSH
37365: CALL_OW 266
37369: PUSH
37370: LD_INT 32
37372: EQUAL
37373: IFFALSE 37400
// tmp := Insert ( tmp , 1 , j ) else
37375: LD_ADDR_VAR 0 19
37379: PUSH
37380: LD_VAR 0 19
37384: PPUSH
37385: LD_INT 1
37387: PPUSH
37388: LD_VAR 0 9
37392: PPUSH
37393: CALL_OW 2
37397: ST_TO_ADDR
37398: GO 37429
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37400: LD_ADDR_VAR 0 19
37404: PUSH
37405: LD_VAR 0 19
37409: PPUSH
37410: LD_VAR 0 19
37414: PUSH
37415: LD_INT 1
37417: PLUS
37418: PPUSH
37419: LD_VAR 0 9
37423: PPUSH
37424: CALL_OW 2
37428: ST_TO_ADDR
37429: GO 37357
37431: POP
37432: POP
// if tmp then
37433: LD_VAR 0 19
37437: IFFALSE 37449
// f := tmp ;
37439: LD_ADDR_VAR 0 12
37443: PUSH
37444: LD_VAR 0 19
37448: ST_TO_ADDR
// end ; x := personel [ i ] ;
37449: LD_ADDR_VAR 0 13
37453: PUSH
37454: LD_VAR 0 6
37458: PUSH
37459: LD_VAR 0 8
37463: ARRAY
37464: ST_TO_ADDR
// if x = - 1 then
37465: LD_VAR 0 13
37469: PUSH
37470: LD_INT 1
37472: NEG
37473: EQUAL
37474: IFFALSE 37683
// begin for j in f do
37476: LD_ADDR_VAR 0 9
37480: PUSH
37481: LD_VAR 0 12
37485: PUSH
37486: FOR_IN
37487: IFFALSE 37679
// repeat InitHc ;
37489: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37493: LD_VAR 0 9
37497: PPUSH
37498: CALL_OW 266
37502: PUSH
37503: LD_INT 5
37505: EQUAL
37506: IFFALSE 37576
// begin if UnitsInside ( j ) < 3 then
37508: LD_VAR 0 9
37512: PPUSH
37513: CALL_OW 313
37517: PUSH
37518: LD_INT 3
37520: LESS
37521: IFFALSE 37557
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37523: LD_INT 0
37525: PPUSH
37526: LD_INT 5
37528: PUSH
37529: LD_INT 8
37531: PUSH
37532: LD_INT 9
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: LIST
37539: PUSH
37540: LD_VAR 0 17
37544: ARRAY
37545: PPUSH
37546: LD_VAR 0 4
37550: PPUSH
37551: CALL_OW 380
37555: GO 37574
// PrepareHuman ( false , i , skill ) ;
37557: LD_INT 0
37559: PPUSH
37560: LD_VAR 0 8
37564: PPUSH
37565: LD_VAR 0 4
37569: PPUSH
37570: CALL_OW 380
// end else
37574: GO 37593
// PrepareHuman ( false , i , skill ) ;
37576: LD_INT 0
37578: PPUSH
37579: LD_VAR 0 8
37583: PPUSH
37584: LD_VAR 0 4
37588: PPUSH
37589: CALL_OW 380
// un := CreateHuman ;
37593: LD_ADDR_VAR 0 14
37597: PUSH
37598: CALL_OW 44
37602: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37603: LD_ADDR_VAR 0 7
37607: PUSH
37608: LD_VAR 0 7
37612: PPUSH
37613: LD_INT 1
37615: PPUSH
37616: LD_VAR 0 14
37620: PPUSH
37621: CALL_OW 2
37625: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37626: LD_VAR 0 14
37630: PPUSH
37631: LD_VAR 0 9
37635: PPUSH
37636: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37640: LD_VAR 0 9
37644: PPUSH
37645: CALL_OW 313
37649: PUSH
37650: LD_INT 6
37652: EQUAL
37653: PUSH
37654: LD_VAR 0 9
37658: PPUSH
37659: CALL_OW 266
37663: PUSH
37664: LD_INT 32
37666: PUSH
37667: LD_INT 31
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: IN
37674: OR
37675: IFFALSE 37489
37677: GO 37486
37679: POP
37680: POP
// end else
37681: GO 38063
// for j = 1 to x do
37683: LD_ADDR_VAR 0 9
37687: PUSH
37688: DOUBLE
37689: LD_INT 1
37691: DEC
37692: ST_TO_ADDR
37693: LD_VAR 0 13
37697: PUSH
37698: FOR_TO
37699: IFFALSE 38061
// begin InitHc ;
37701: CALL_OW 19
// if not f then
37705: LD_VAR 0 12
37709: NOT
37710: IFFALSE 37799
// begin PrepareHuman ( false , i , skill ) ;
37712: LD_INT 0
37714: PPUSH
37715: LD_VAR 0 8
37719: PPUSH
37720: LD_VAR 0 4
37724: PPUSH
37725: CALL_OW 380
// un := CreateHuman ;
37729: LD_ADDR_VAR 0 14
37733: PUSH
37734: CALL_OW 44
37738: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37739: LD_ADDR_VAR 0 7
37743: PUSH
37744: LD_VAR 0 7
37748: PPUSH
37749: LD_INT 1
37751: PPUSH
37752: LD_VAR 0 14
37756: PPUSH
37757: CALL_OW 2
37761: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37762: LD_VAR 0 14
37766: PPUSH
37767: LD_VAR 0 1
37771: PPUSH
37772: CALL_OW 250
37776: PPUSH
37777: LD_VAR 0 1
37781: PPUSH
37782: CALL_OW 251
37786: PPUSH
37787: LD_INT 10
37789: PPUSH
37790: LD_INT 0
37792: PPUSH
37793: CALL_OW 50
// continue ;
37797: GO 37698
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37799: LD_VAR 0 12
37803: PUSH
37804: LD_INT 1
37806: ARRAY
37807: PPUSH
37808: CALL_OW 313
37812: PUSH
37813: LD_VAR 0 12
37817: PUSH
37818: LD_INT 1
37820: ARRAY
37821: PPUSH
37822: CALL_OW 266
37826: PUSH
37827: LD_INT 32
37829: PUSH
37830: LD_INT 31
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: IN
37837: AND
37838: PUSH
37839: LD_VAR 0 12
37843: PUSH
37844: LD_INT 1
37846: ARRAY
37847: PPUSH
37848: CALL_OW 313
37852: PUSH
37853: LD_INT 6
37855: EQUAL
37856: OR
37857: IFFALSE 37877
// f := Delete ( f , 1 ) ;
37859: LD_ADDR_VAR 0 12
37863: PUSH
37864: LD_VAR 0 12
37868: PPUSH
37869: LD_INT 1
37871: PPUSH
37872: CALL_OW 3
37876: ST_TO_ADDR
// if not f then
37877: LD_VAR 0 12
37881: NOT
37882: IFFALSE 37900
// begin x := x + 2 ;
37884: LD_ADDR_VAR 0 13
37888: PUSH
37889: LD_VAR 0 13
37893: PUSH
37894: LD_INT 2
37896: PLUS
37897: ST_TO_ADDR
// continue ;
37898: GO 37698
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37900: LD_VAR 0 12
37904: PUSH
37905: LD_INT 1
37907: ARRAY
37908: PPUSH
37909: CALL_OW 266
37913: PUSH
37914: LD_INT 5
37916: EQUAL
37917: IFFALSE 37991
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37919: LD_VAR 0 12
37923: PUSH
37924: LD_INT 1
37926: ARRAY
37927: PPUSH
37928: CALL_OW 313
37932: PUSH
37933: LD_INT 3
37935: LESS
37936: IFFALSE 37972
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37938: LD_INT 0
37940: PPUSH
37941: LD_INT 5
37943: PUSH
37944: LD_INT 8
37946: PUSH
37947: LD_INT 9
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: LIST
37954: PUSH
37955: LD_VAR 0 17
37959: ARRAY
37960: PPUSH
37961: LD_VAR 0 4
37965: PPUSH
37966: CALL_OW 380
37970: GO 37989
// PrepareHuman ( false , i , skill ) ;
37972: LD_INT 0
37974: PPUSH
37975: LD_VAR 0 8
37979: PPUSH
37980: LD_VAR 0 4
37984: PPUSH
37985: CALL_OW 380
// end else
37989: GO 38008
// PrepareHuman ( false , i , skill ) ;
37991: LD_INT 0
37993: PPUSH
37994: LD_VAR 0 8
37998: PPUSH
37999: LD_VAR 0 4
38003: PPUSH
38004: CALL_OW 380
// un := CreateHuman ;
38008: LD_ADDR_VAR 0 14
38012: PUSH
38013: CALL_OW 44
38017: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38018: LD_ADDR_VAR 0 7
38022: PUSH
38023: LD_VAR 0 7
38027: PPUSH
38028: LD_INT 1
38030: PPUSH
38031: LD_VAR 0 14
38035: PPUSH
38036: CALL_OW 2
38040: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38041: LD_VAR 0 14
38045: PPUSH
38046: LD_VAR 0 12
38050: PUSH
38051: LD_INT 1
38053: ARRAY
38054: PPUSH
38055: CALL_OW 52
// end ;
38059: GO 37698
38061: POP
38062: POP
// end ;
38063: GO 37000
38065: POP
38066: POP
// result := result ^ buildings ;
38067: LD_ADDR_VAR 0 7
38071: PUSH
38072: LD_VAR 0 7
38076: PUSH
38077: LD_VAR 0 18
38081: ADD
38082: ST_TO_ADDR
// end else
38083: GO 38226
// begin for i = 1 to personel do
38085: LD_ADDR_VAR 0 8
38089: PUSH
38090: DOUBLE
38091: LD_INT 1
38093: DEC
38094: ST_TO_ADDR
38095: LD_VAR 0 6
38099: PUSH
38100: FOR_TO
38101: IFFALSE 38224
// begin if i > 4 then
38103: LD_VAR 0 8
38107: PUSH
38108: LD_INT 4
38110: GREATER
38111: IFFALSE 38115
// break ;
38113: GO 38224
// x := personel [ i ] ;
38115: LD_ADDR_VAR 0 13
38119: PUSH
38120: LD_VAR 0 6
38124: PUSH
38125: LD_VAR 0 8
38129: ARRAY
38130: ST_TO_ADDR
// if x = - 1 then
38131: LD_VAR 0 13
38135: PUSH
38136: LD_INT 1
38138: NEG
38139: EQUAL
38140: IFFALSE 38144
// continue ;
38142: GO 38100
// PrepareHuman ( false , i , skill ) ;
38144: LD_INT 0
38146: PPUSH
38147: LD_VAR 0 8
38151: PPUSH
38152: LD_VAR 0 4
38156: PPUSH
38157: CALL_OW 380
// un := CreateHuman ;
38161: LD_ADDR_VAR 0 14
38165: PUSH
38166: CALL_OW 44
38170: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38171: LD_VAR 0 14
38175: PPUSH
38176: LD_VAR 0 1
38180: PPUSH
38181: CALL_OW 250
38185: PPUSH
38186: LD_VAR 0 1
38190: PPUSH
38191: CALL_OW 251
38195: PPUSH
38196: LD_INT 10
38198: PPUSH
38199: LD_INT 0
38201: PPUSH
38202: CALL_OW 50
// result := result ^ un ;
38206: LD_ADDR_VAR 0 7
38210: PUSH
38211: LD_VAR 0 7
38215: PUSH
38216: LD_VAR 0 14
38220: ADD
38221: ST_TO_ADDR
// end ;
38222: GO 38100
38224: POP
38225: POP
// end ; end ;
38226: LD_VAR 0 7
38230: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38231: LD_INT 0
38233: PPUSH
38234: PPUSH
38235: PPUSH
38236: PPUSH
38237: PPUSH
38238: PPUSH
38239: PPUSH
38240: PPUSH
38241: PPUSH
38242: PPUSH
38243: PPUSH
38244: PPUSH
38245: PPUSH
38246: PPUSH
38247: PPUSH
38248: PPUSH
// result := false ;
38249: LD_ADDR_VAR 0 3
38253: PUSH
38254: LD_INT 0
38256: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38257: LD_VAR 0 1
38261: NOT
38262: PUSH
38263: LD_VAR 0 1
38267: PPUSH
38268: CALL_OW 266
38272: PUSH
38273: LD_INT 32
38275: PUSH
38276: LD_INT 33
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: IN
38283: NOT
38284: OR
38285: IFFALSE 38289
// exit ;
38287: GO 39398
// nat := GetNation ( tower ) ;
38289: LD_ADDR_VAR 0 12
38293: PUSH
38294: LD_VAR 0 1
38298: PPUSH
38299: CALL_OW 248
38303: ST_TO_ADDR
// side := GetSide ( tower ) ;
38304: LD_ADDR_VAR 0 16
38308: PUSH
38309: LD_VAR 0 1
38313: PPUSH
38314: CALL_OW 255
38318: ST_TO_ADDR
// x := GetX ( tower ) ;
38319: LD_ADDR_VAR 0 10
38323: PUSH
38324: LD_VAR 0 1
38328: PPUSH
38329: CALL_OW 250
38333: ST_TO_ADDR
// y := GetY ( tower ) ;
38334: LD_ADDR_VAR 0 11
38338: PUSH
38339: LD_VAR 0 1
38343: PPUSH
38344: CALL_OW 251
38348: ST_TO_ADDR
// if not x or not y then
38349: LD_VAR 0 10
38353: NOT
38354: PUSH
38355: LD_VAR 0 11
38359: NOT
38360: OR
38361: IFFALSE 38365
// exit ;
38363: GO 39398
// weapon := 0 ;
38365: LD_ADDR_VAR 0 18
38369: PUSH
38370: LD_INT 0
38372: ST_TO_ADDR
// fac_list := [ ] ;
38373: LD_ADDR_VAR 0 17
38377: PUSH
38378: EMPTY
38379: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38380: LD_ADDR_VAR 0 6
38384: PUSH
38385: LD_VAR 0 1
38389: PPUSH
38390: CALL_OW 274
38394: PPUSH
38395: LD_VAR 0 2
38399: PPUSH
38400: LD_INT 0
38402: PPUSH
38403: CALL 35969 0 3
38407: PPUSH
38408: LD_INT 30
38410: PUSH
38411: LD_INT 3
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PPUSH
38418: CALL_OW 72
38422: ST_TO_ADDR
// if not factories then
38423: LD_VAR 0 6
38427: NOT
38428: IFFALSE 38432
// exit ;
38430: GO 39398
// for i in factories do
38432: LD_ADDR_VAR 0 8
38436: PUSH
38437: LD_VAR 0 6
38441: PUSH
38442: FOR_IN
38443: IFFALSE 38468
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38445: LD_ADDR_VAR 0 17
38449: PUSH
38450: LD_VAR 0 17
38454: PUSH
38455: LD_VAR 0 8
38459: PPUSH
38460: CALL_OW 478
38464: UNION
38465: ST_TO_ADDR
38466: GO 38442
38468: POP
38469: POP
// if not fac_list then
38470: LD_VAR 0 17
38474: NOT
38475: IFFALSE 38479
// exit ;
38477: GO 39398
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38479: LD_ADDR_VAR 0 5
38483: PUSH
38484: LD_INT 4
38486: PUSH
38487: LD_INT 5
38489: PUSH
38490: LD_INT 9
38492: PUSH
38493: LD_INT 10
38495: PUSH
38496: LD_INT 6
38498: PUSH
38499: LD_INT 7
38501: PUSH
38502: LD_INT 11
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 27
38516: PUSH
38517: LD_INT 28
38519: PUSH
38520: LD_INT 26
38522: PUSH
38523: LD_INT 30
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: PUSH
38532: LD_INT 43
38534: PUSH
38535: LD_INT 44
38537: PUSH
38538: LD_INT 46
38540: PUSH
38541: LD_INT 45
38543: PUSH
38544: LD_INT 47
38546: PUSH
38547: LD_INT 49
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: LIST
38562: PUSH
38563: LD_VAR 0 12
38567: ARRAY
38568: ST_TO_ADDR
// list := list isect fac_list ;
38569: LD_ADDR_VAR 0 5
38573: PUSH
38574: LD_VAR 0 5
38578: PUSH
38579: LD_VAR 0 17
38583: ISECT
38584: ST_TO_ADDR
// if not list then
38585: LD_VAR 0 5
38589: NOT
38590: IFFALSE 38594
// exit ;
38592: GO 39398
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38594: LD_VAR 0 12
38598: PUSH
38599: LD_INT 3
38601: EQUAL
38602: PUSH
38603: LD_INT 49
38605: PUSH
38606: LD_VAR 0 5
38610: IN
38611: AND
38612: PUSH
38613: LD_INT 31
38615: PPUSH
38616: LD_VAR 0 16
38620: PPUSH
38621: CALL_OW 321
38625: PUSH
38626: LD_INT 2
38628: EQUAL
38629: AND
38630: IFFALSE 38690
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38632: LD_INT 22
38634: PUSH
38635: LD_VAR 0 16
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 35
38646: PUSH
38647: LD_INT 49
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 91
38656: PUSH
38657: LD_VAR 0 1
38661: PUSH
38662: LD_INT 10
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: LIST
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: LIST
38674: PPUSH
38675: CALL_OW 69
38679: NOT
38680: IFFALSE 38690
// weapon := ru_time_lapser ;
38682: LD_ADDR_VAR 0 18
38686: PUSH
38687: LD_INT 49
38689: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38690: LD_VAR 0 12
38694: PUSH
38695: LD_INT 1
38697: PUSH
38698: LD_INT 2
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: IN
38705: PUSH
38706: LD_INT 11
38708: PUSH
38709: LD_VAR 0 5
38713: IN
38714: PUSH
38715: LD_INT 30
38717: PUSH
38718: LD_VAR 0 5
38722: IN
38723: OR
38724: AND
38725: PUSH
38726: LD_INT 6
38728: PPUSH
38729: LD_VAR 0 16
38733: PPUSH
38734: CALL_OW 321
38738: PUSH
38739: LD_INT 2
38741: EQUAL
38742: AND
38743: IFFALSE 38908
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38745: LD_INT 22
38747: PUSH
38748: LD_VAR 0 16
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 2
38759: PUSH
38760: LD_INT 35
38762: PUSH
38763: LD_INT 11
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 35
38772: PUSH
38773: LD_INT 30
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 91
38787: PUSH
38788: LD_VAR 0 1
38792: PUSH
38793: LD_INT 18
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: LIST
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: LIST
38805: PPUSH
38806: CALL_OW 69
38810: NOT
38811: PUSH
38812: LD_INT 22
38814: PUSH
38815: LD_VAR 0 16
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 2
38826: PUSH
38827: LD_INT 30
38829: PUSH
38830: LD_INT 32
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 30
38839: PUSH
38840: LD_INT 33
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 91
38854: PUSH
38855: LD_VAR 0 1
38859: PUSH
38860: LD_INT 12
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: LIST
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: LIST
38872: PUSH
38873: EMPTY
38874: LIST
38875: PPUSH
38876: CALL_OW 69
38880: PUSH
38881: LD_INT 2
38883: GREATER
38884: AND
38885: IFFALSE 38908
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38887: LD_ADDR_VAR 0 18
38891: PUSH
38892: LD_INT 11
38894: PUSH
38895: LD_INT 30
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_VAR 0 12
38906: ARRAY
38907: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38908: LD_VAR 0 18
38912: NOT
38913: PUSH
38914: LD_INT 40
38916: PPUSH
38917: LD_VAR 0 16
38921: PPUSH
38922: CALL_OW 321
38926: PUSH
38927: LD_INT 2
38929: EQUAL
38930: AND
38931: PUSH
38932: LD_INT 7
38934: PUSH
38935: LD_VAR 0 5
38939: IN
38940: PUSH
38941: LD_INT 28
38943: PUSH
38944: LD_VAR 0 5
38948: IN
38949: OR
38950: PUSH
38951: LD_INT 45
38953: PUSH
38954: LD_VAR 0 5
38958: IN
38959: OR
38960: AND
38961: IFFALSE 39215
// begin hex := GetHexInfo ( x , y ) ;
38963: LD_ADDR_VAR 0 4
38967: PUSH
38968: LD_VAR 0 10
38972: PPUSH
38973: LD_VAR 0 11
38977: PPUSH
38978: CALL_OW 546
38982: ST_TO_ADDR
// if hex [ 1 ] then
38983: LD_VAR 0 4
38987: PUSH
38988: LD_INT 1
38990: ARRAY
38991: IFFALSE 38995
// exit ;
38993: GO 39398
// height := hex [ 2 ] ;
38995: LD_ADDR_VAR 0 15
38999: PUSH
39000: LD_VAR 0 4
39004: PUSH
39005: LD_INT 2
39007: ARRAY
39008: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39009: LD_ADDR_VAR 0 14
39013: PUSH
39014: LD_INT 0
39016: PUSH
39017: LD_INT 2
39019: PUSH
39020: LD_INT 3
39022: PUSH
39023: LD_INT 5
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: ST_TO_ADDR
// for i in tmp do
39032: LD_ADDR_VAR 0 8
39036: PUSH
39037: LD_VAR 0 14
39041: PUSH
39042: FOR_IN
39043: IFFALSE 39213
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39045: LD_ADDR_VAR 0 9
39049: PUSH
39050: LD_VAR 0 10
39054: PPUSH
39055: LD_VAR 0 8
39059: PPUSH
39060: LD_INT 5
39062: PPUSH
39063: CALL_OW 272
39067: PUSH
39068: LD_VAR 0 11
39072: PPUSH
39073: LD_VAR 0 8
39077: PPUSH
39078: LD_INT 5
39080: PPUSH
39081: CALL_OW 273
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39090: LD_VAR 0 9
39094: PUSH
39095: LD_INT 1
39097: ARRAY
39098: PPUSH
39099: LD_VAR 0 9
39103: PUSH
39104: LD_INT 2
39106: ARRAY
39107: PPUSH
39108: CALL_OW 488
39112: IFFALSE 39211
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39114: LD_ADDR_VAR 0 4
39118: PUSH
39119: LD_VAR 0 9
39123: PUSH
39124: LD_INT 1
39126: ARRAY
39127: PPUSH
39128: LD_VAR 0 9
39132: PUSH
39133: LD_INT 2
39135: ARRAY
39136: PPUSH
39137: CALL_OW 546
39141: ST_TO_ADDR
// if hex [ 1 ] then
39142: LD_VAR 0 4
39146: PUSH
39147: LD_INT 1
39149: ARRAY
39150: IFFALSE 39154
// continue ;
39152: GO 39042
// h := hex [ 2 ] ;
39154: LD_ADDR_VAR 0 13
39158: PUSH
39159: LD_VAR 0 4
39163: PUSH
39164: LD_INT 2
39166: ARRAY
39167: ST_TO_ADDR
// if h + 7 < height then
39168: LD_VAR 0 13
39172: PUSH
39173: LD_INT 7
39175: PLUS
39176: PUSH
39177: LD_VAR 0 15
39181: LESS
39182: IFFALSE 39211
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39184: LD_ADDR_VAR 0 18
39188: PUSH
39189: LD_INT 7
39191: PUSH
39192: LD_INT 28
39194: PUSH
39195: LD_INT 45
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: LIST
39202: PUSH
39203: LD_VAR 0 12
39207: ARRAY
39208: ST_TO_ADDR
// break ;
39209: GO 39213
// end ; end ; end ;
39211: GO 39042
39213: POP
39214: POP
// end ; if not weapon then
39215: LD_VAR 0 18
39219: NOT
39220: IFFALSE 39280
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39222: LD_ADDR_VAR 0 5
39226: PUSH
39227: LD_VAR 0 5
39231: PUSH
39232: LD_INT 11
39234: PUSH
39235: LD_INT 30
39237: PUSH
39238: LD_INT 49
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: LIST
39245: DIFF
39246: ST_TO_ADDR
// if not list then
39247: LD_VAR 0 5
39251: NOT
39252: IFFALSE 39256
// exit ;
39254: GO 39398
// weapon := list [ rand ( 1 , list ) ] ;
39256: LD_ADDR_VAR 0 18
39260: PUSH
39261: LD_VAR 0 5
39265: PUSH
39266: LD_INT 1
39268: PPUSH
39269: LD_VAR 0 5
39273: PPUSH
39274: CALL_OW 12
39278: ARRAY
39279: ST_TO_ADDR
// end ; if weapon then
39280: LD_VAR 0 18
39284: IFFALSE 39398
// begin tmp := CostOfWeapon ( weapon ) ;
39286: LD_ADDR_VAR 0 14
39290: PUSH
39291: LD_VAR 0 18
39295: PPUSH
39296: CALL_OW 451
39300: ST_TO_ADDR
// j := GetBase ( tower ) ;
39301: LD_ADDR_VAR 0 9
39305: PUSH
39306: LD_VAR 0 1
39310: PPUSH
39311: CALL_OW 274
39315: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39316: LD_VAR 0 9
39320: PPUSH
39321: LD_INT 1
39323: PPUSH
39324: CALL_OW 275
39328: PUSH
39329: LD_VAR 0 14
39333: PUSH
39334: LD_INT 1
39336: ARRAY
39337: GREATEREQUAL
39338: PUSH
39339: LD_VAR 0 9
39343: PPUSH
39344: LD_INT 2
39346: PPUSH
39347: CALL_OW 275
39351: PUSH
39352: LD_VAR 0 14
39356: PUSH
39357: LD_INT 2
39359: ARRAY
39360: GREATEREQUAL
39361: AND
39362: PUSH
39363: LD_VAR 0 9
39367: PPUSH
39368: LD_INT 3
39370: PPUSH
39371: CALL_OW 275
39375: PUSH
39376: LD_VAR 0 14
39380: PUSH
39381: LD_INT 3
39383: ARRAY
39384: GREATEREQUAL
39385: AND
39386: IFFALSE 39398
// result := weapon ;
39388: LD_ADDR_VAR 0 3
39392: PUSH
39393: LD_VAR 0 18
39397: ST_TO_ADDR
// end ; end ;
39398: LD_VAR 0 3
39402: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39403: LD_INT 0
39405: PPUSH
39406: PPUSH
// result := true ;
39407: LD_ADDR_VAR 0 3
39411: PUSH
39412: LD_INT 1
39414: ST_TO_ADDR
// if array1 = array2 then
39415: LD_VAR 0 1
39419: PUSH
39420: LD_VAR 0 2
39424: EQUAL
39425: IFFALSE 39485
// begin for i = 1 to array1 do
39427: LD_ADDR_VAR 0 4
39431: PUSH
39432: DOUBLE
39433: LD_INT 1
39435: DEC
39436: ST_TO_ADDR
39437: LD_VAR 0 1
39441: PUSH
39442: FOR_TO
39443: IFFALSE 39481
// if array1 [ i ] <> array2 [ i ] then
39445: LD_VAR 0 1
39449: PUSH
39450: LD_VAR 0 4
39454: ARRAY
39455: PUSH
39456: LD_VAR 0 2
39460: PUSH
39461: LD_VAR 0 4
39465: ARRAY
39466: NONEQUAL
39467: IFFALSE 39479
// begin result := false ;
39469: LD_ADDR_VAR 0 3
39473: PUSH
39474: LD_INT 0
39476: ST_TO_ADDR
// break ;
39477: GO 39481
// end ;
39479: GO 39442
39481: POP
39482: POP
// end else
39483: GO 39493
// result := false ;
39485: LD_ADDR_VAR 0 3
39489: PUSH
39490: LD_INT 0
39492: ST_TO_ADDR
// end ;
39493: LD_VAR 0 3
39497: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39498: LD_INT 0
39500: PPUSH
39501: PPUSH
// if not array1 or not array2 then
39502: LD_VAR 0 1
39506: NOT
39507: PUSH
39508: LD_VAR 0 2
39512: NOT
39513: OR
39514: IFFALSE 39518
// exit ;
39516: GO 39582
// result := true ;
39518: LD_ADDR_VAR 0 3
39522: PUSH
39523: LD_INT 1
39525: ST_TO_ADDR
// for i = 1 to array1 do
39526: LD_ADDR_VAR 0 4
39530: PUSH
39531: DOUBLE
39532: LD_INT 1
39534: DEC
39535: ST_TO_ADDR
39536: LD_VAR 0 1
39540: PUSH
39541: FOR_TO
39542: IFFALSE 39580
// if array1 [ i ] <> array2 [ i ] then
39544: LD_VAR 0 1
39548: PUSH
39549: LD_VAR 0 4
39553: ARRAY
39554: PUSH
39555: LD_VAR 0 2
39559: PUSH
39560: LD_VAR 0 4
39564: ARRAY
39565: NONEQUAL
39566: IFFALSE 39578
// begin result := false ;
39568: LD_ADDR_VAR 0 3
39572: PUSH
39573: LD_INT 0
39575: ST_TO_ADDR
// break ;
39576: GO 39580
// end ;
39578: GO 39541
39580: POP
39581: POP
// end ;
39582: LD_VAR 0 3
39586: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39587: LD_INT 0
39589: PPUSH
39590: PPUSH
39591: PPUSH
// pom := GetBase ( fac ) ;
39592: LD_ADDR_VAR 0 5
39596: PUSH
39597: LD_VAR 0 1
39601: PPUSH
39602: CALL_OW 274
39606: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39607: LD_ADDR_VAR 0 4
39611: PUSH
39612: LD_VAR 0 2
39616: PUSH
39617: LD_INT 1
39619: ARRAY
39620: PPUSH
39621: LD_VAR 0 2
39625: PUSH
39626: LD_INT 2
39628: ARRAY
39629: PPUSH
39630: LD_VAR 0 2
39634: PUSH
39635: LD_INT 3
39637: ARRAY
39638: PPUSH
39639: LD_VAR 0 2
39643: PUSH
39644: LD_INT 4
39646: ARRAY
39647: PPUSH
39648: CALL_OW 449
39652: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39653: LD_ADDR_VAR 0 3
39657: PUSH
39658: LD_VAR 0 5
39662: PPUSH
39663: LD_INT 1
39665: PPUSH
39666: CALL_OW 275
39670: PUSH
39671: LD_VAR 0 4
39675: PUSH
39676: LD_INT 1
39678: ARRAY
39679: GREATEREQUAL
39680: PUSH
39681: LD_VAR 0 5
39685: PPUSH
39686: LD_INT 2
39688: PPUSH
39689: CALL_OW 275
39693: PUSH
39694: LD_VAR 0 4
39698: PUSH
39699: LD_INT 2
39701: ARRAY
39702: GREATEREQUAL
39703: AND
39704: PUSH
39705: LD_VAR 0 5
39709: PPUSH
39710: LD_INT 3
39712: PPUSH
39713: CALL_OW 275
39717: PUSH
39718: LD_VAR 0 4
39722: PUSH
39723: LD_INT 3
39725: ARRAY
39726: GREATEREQUAL
39727: AND
39728: ST_TO_ADDR
// end ;
39729: LD_VAR 0 3
39733: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39734: LD_INT 0
39736: PPUSH
39737: PPUSH
39738: PPUSH
39739: PPUSH
// pom := GetBase ( building ) ;
39740: LD_ADDR_VAR 0 3
39744: PUSH
39745: LD_VAR 0 1
39749: PPUSH
39750: CALL_OW 274
39754: ST_TO_ADDR
// if not pom then
39755: LD_VAR 0 3
39759: NOT
39760: IFFALSE 39764
// exit ;
39762: GO 39934
// btype := GetBType ( building ) ;
39764: LD_ADDR_VAR 0 5
39768: PUSH
39769: LD_VAR 0 1
39773: PPUSH
39774: CALL_OW 266
39778: ST_TO_ADDR
// if btype = b_armoury then
39779: LD_VAR 0 5
39783: PUSH
39784: LD_INT 4
39786: EQUAL
39787: IFFALSE 39797
// btype := b_barracks ;
39789: LD_ADDR_VAR 0 5
39793: PUSH
39794: LD_INT 5
39796: ST_TO_ADDR
// if btype = b_depot then
39797: LD_VAR 0 5
39801: PUSH
39802: LD_INT 0
39804: EQUAL
39805: IFFALSE 39815
// btype := b_warehouse ;
39807: LD_ADDR_VAR 0 5
39811: PUSH
39812: LD_INT 1
39814: ST_TO_ADDR
// if btype = b_workshop then
39815: LD_VAR 0 5
39819: PUSH
39820: LD_INT 2
39822: EQUAL
39823: IFFALSE 39833
// btype := b_factory ;
39825: LD_ADDR_VAR 0 5
39829: PUSH
39830: LD_INT 3
39832: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39833: LD_ADDR_VAR 0 4
39837: PUSH
39838: LD_VAR 0 5
39842: PPUSH
39843: LD_VAR 0 1
39847: PPUSH
39848: CALL_OW 248
39852: PPUSH
39853: CALL_OW 450
39857: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39858: LD_ADDR_VAR 0 2
39862: PUSH
39863: LD_VAR 0 3
39867: PPUSH
39868: LD_INT 1
39870: PPUSH
39871: CALL_OW 275
39875: PUSH
39876: LD_VAR 0 4
39880: PUSH
39881: LD_INT 1
39883: ARRAY
39884: GREATEREQUAL
39885: PUSH
39886: LD_VAR 0 3
39890: PPUSH
39891: LD_INT 2
39893: PPUSH
39894: CALL_OW 275
39898: PUSH
39899: LD_VAR 0 4
39903: PUSH
39904: LD_INT 2
39906: ARRAY
39907: GREATEREQUAL
39908: AND
39909: PUSH
39910: LD_VAR 0 3
39914: PPUSH
39915: LD_INT 3
39917: PPUSH
39918: CALL_OW 275
39922: PUSH
39923: LD_VAR 0 4
39927: PUSH
39928: LD_INT 3
39930: ARRAY
39931: GREATEREQUAL
39932: AND
39933: ST_TO_ADDR
// end ;
39934: LD_VAR 0 2
39938: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39939: LD_INT 0
39941: PPUSH
39942: PPUSH
39943: PPUSH
// pom := GetBase ( building ) ;
39944: LD_ADDR_VAR 0 4
39948: PUSH
39949: LD_VAR 0 1
39953: PPUSH
39954: CALL_OW 274
39958: ST_TO_ADDR
// if not pom then
39959: LD_VAR 0 4
39963: NOT
39964: IFFALSE 39968
// exit ;
39966: GO 40069
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39968: LD_ADDR_VAR 0 5
39972: PUSH
39973: LD_VAR 0 2
39977: PPUSH
39978: LD_VAR 0 1
39982: PPUSH
39983: CALL_OW 248
39987: PPUSH
39988: CALL_OW 450
39992: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39993: LD_ADDR_VAR 0 3
39997: PUSH
39998: LD_VAR 0 4
40002: PPUSH
40003: LD_INT 1
40005: PPUSH
40006: CALL_OW 275
40010: PUSH
40011: LD_VAR 0 5
40015: PUSH
40016: LD_INT 1
40018: ARRAY
40019: GREATEREQUAL
40020: PUSH
40021: LD_VAR 0 4
40025: PPUSH
40026: LD_INT 2
40028: PPUSH
40029: CALL_OW 275
40033: PUSH
40034: LD_VAR 0 5
40038: PUSH
40039: LD_INT 2
40041: ARRAY
40042: GREATEREQUAL
40043: AND
40044: PUSH
40045: LD_VAR 0 4
40049: PPUSH
40050: LD_INT 3
40052: PPUSH
40053: CALL_OW 275
40057: PUSH
40058: LD_VAR 0 5
40062: PUSH
40063: LD_INT 3
40065: ARRAY
40066: GREATEREQUAL
40067: AND
40068: ST_TO_ADDR
// end ;
40069: LD_VAR 0 3
40073: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40074: LD_INT 0
40076: PPUSH
40077: PPUSH
40078: PPUSH
40079: PPUSH
40080: PPUSH
40081: PPUSH
40082: PPUSH
40083: PPUSH
40084: PPUSH
40085: PPUSH
40086: PPUSH
// result := false ;
40087: LD_ADDR_VAR 0 8
40091: PUSH
40092: LD_INT 0
40094: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40095: LD_VAR 0 5
40099: NOT
40100: PUSH
40101: LD_VAR 0 1
40105: NOT
40106: OR
40107: PUSH
40108: LD_VAR 0 2
40112: NOT
40113: OR
40114: PUSH
40115: LD_VAR 0 3
40119: NOT
40120: OR
40121: IFFALSE 40125
// exit ;
40123: GO 40939
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40125: LD_ADDR_VAR 0 14
40129: PUSH
40130: LD_VAR 0 1
40134: PPUSH
40135: LD_VAR 0 2
40139: PPUSH
40140: LD_VAR 0 3
40144: PPUSH
40145: LD_VAR 0 4
40149: PPUSH
40150: LD_VAR 0 5
40154: PUSH
40155: LD_INT 1
40157: ARRAY
40158: PPUSH
40159: CALL_OW 248
40163: PPUSH
40164: LD_INT 0
40166: PPUSH
40167: CALL 42176 0 6
40171: ST_TO_ADDR
// if not hexes then
40172: LD_VAR 0 14
40176: NOT
40177: IFFALSE 40181
// exit ;
40179: GO 40939
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40181: LD_ADDR_VAR 0 17
40185: PUSH
40186: LD_VAR 0 5
40190: PPUSH
40191: LD_INT 22
40193: PUSH
40194: LD_VAR 0 13
40198: PPUSH
40199: CALL_OW 255
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 2
40210: PUSH
40211: LD_INT 30
40213: PUSH
40214: LD_INT 0
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 30
40223: PUSH
40224: LD_INT 1
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: LIST
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PPUSH
40240: CALL_OW 72
40244: ST_TO_ADDR
// for i = 1 to hexes do
40245: LD_ADDR_VAR 0 9
40249: PUSH
40250: DOUBLE
40251: LD_INT 1
40253: DEC
40254: ST_TO_ADDR
40255: LD_VAR 0 14
40259: PUSH
40260: FOR_TO
40261: IFFALSE 40937
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40263: LD_ADDR_VAR 0 13
40267: PUSH
40268: LD_VAR 0 14
40272: PUSH
40273: LD_VAR 0 9
40277: ARRAY
40278: PUSH
40279: LD_INT 1
40281: ARRAY
40282: PPUSH
40283: LD_VAR 0 14
40287: PUSH
40288: LD_VAR 0 9
40292: ARRAY
40293: PUSH
40294: LD_INT 2
40296: ARRAY
40297: PPUSH
40298: CALL_OW 428
40302: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40303: LD_VAR 0 14
40307: PUSH
40308: LD_VAR 0 9
40312: ARRAY
40313: PUSH
40314: LD_INT 1
40316: ARRAY
40317: PPUSH
40318: LD_VAR 0 14
40322: PUSH
40323: LD_VAR 0 9
40327: ARRAY
40328: PUSH
40329: LD_INT 2
40331: ARRAY
40332: PPUSH
40333: CALL_OW 351
40337: PUSH
40338: LD_VAR 0 14
40342: PUSH
40343: LD_VAR 0 9
40347: ARRAY
40348: PUSH
40349: LD_INT 1
40351: ARRAY
40352: PPUSH
40353: LD_VAR 0 14
40357: PUSH
40358: LD_VAR 0 9
40362: ARRAY
40363: PUSH
40364: LD_INT 2
40366: ARRAY
40367: PPUSH
40368: CALL_OW 488
40372: NOT
40373: OR
40374: PUSH
40375: LD_VAR 0 13
40379: PPUSH
40380: CALL_OW 247
40384: PUSH
40385: LD_INT 3
40387: EQUAL
40388: OR
40389: IFFALSE 40395
// exit ;
40391: POP
40392: POP
40393: GO 40939
// if not tmp then
40395: LD_VAR 0 13
40399: NOT
40400: IFFALSE 40404
// continue ;
40402: GO 40260
// result := true ;
40404: LD_ADDR_VAR 0 8
40408: PUSH
40409: LD_INT 1
40411: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40412: LD_VAR 0 6
40416: PUSH
40417: LD_VAR 0 13
40421: PPUSH
40422: CALL_OW 247
40426: PUSH
40427: LD_INT 2
40429: EQUAL
40430: AND
40431: PUSH
40432: LD_VAR 0 13
40436: PPUSH
40437: CALL_OW 263
40441: PUSH
40442: LD_INT 1
40444: EQUAL
40445: AND
40446: IFFALSE 40610
// begin if IsDrivenBy ( tmp ) then
40448: LD_VAR 0 13
40452: PPUSH
40453: CALL_OW 311
40457: IFFALSE 40461
// continue ;
40459: GO 40260
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40461: LD_VAR 0 6
40465: PPUSH
40466: LD_INT 3
40468: PUSH
40469: LD_INT 60
40471: PUSH
40472: EMPTY
40473: LIST
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 3
40481: PUSH
40482: LD_INT 55
40484: PUSH
40485: EMPTY
40486: LIST
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PPUSH
40496: CALL_OW 72
40500: IFFALSE 40608
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40502: LD_ADDR_VAR 0 18
40506: PUSH
40507: LD_VAR 0 6
40511: PPUSH
40512: LD_INT 3
40514: PUSH
40515: LD_INT 60
40517: PUSH
40518: EMPTY
40519: LIST
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 3
40527: PUSH
40528: LD_INT 55
40530: PUSH
40531: EMPTY
40532: LIST
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PPUSH
40542: CALL_OW 72
40546: PUSH
40547: LD_INT 1
40549: ARRAY
40550: ST_TO_ADDR
// if IsInUnit ( driver ) then
40551: LD_VAR 0 18
40555: PPUSH
40556: CALL_OW 310
40560: IFFALSE 40571
// ComExit ( driver ) ;
40562: LD_VAR 0 18
40566: PPUSH
40567: CALL 65360 0 1
// AddComEnterUnit ( driver , tmp ) ;
40571: LD_VAR 0 18
40575: PPUSH
40576: LD_VAR 0 13
40580: PPUSH
40581: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40585: LD_VAR 0 18
40589: PPUSH
40590: LD_VAR 0 7
40594: PPUSH
40595: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40599: LD_VAR 0 18
40603: PPUSH
40604: CALL_OW 181
// end ; continue ;
40608: GO 40260
// end ; if not cleaners or not tmp in cleaners then
40610: LD_VAR 0 6
40614: NOT
40615: PUSH
40616: LD_VAR 0 13
40620: PUSH
40621: LD_VAR 0 6
40625: IN
40626: NOT
40627: OR
40628: IFFALSE 40935
// begin if dep then
40630: LD_VAR 0 17
40634: IFFALSE 40770
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40636: LD_ADDR_VAR 0 16
40640: PUSH
40641: LD_VAR 0 17
40645: PUSH
40646: LD_INT 1
40648: ARRAY
40649: PPUSH
40650: CALL_OW 250
40654: PPUSH
40655: LD_VAR 0 17
40659: PUSH
40660: LD_INT 1
40662: ARRAY
40663: PPUSH
40664: CALL_OW 254
40668: PPUSH
40669: LD_INT 5
40671: PPUSH
40672: CALL_OW 272
40676: PUSH
40677: LD_VAR 0 17
40681: PUSH
40682: LD_INT 1
40684: ARRAY
40685: PPUSH
40686: CALL_OW 251
40690: PPUSH
40691: LD_VAR 0 17
40695: PUSH
40696: LD_INT 1
40698: ARRAY
40699: PPUSH
40700: CALL_OW 254
40704: PPUSH
40705: LD_INT 5
40707: PPUSH
40708: CALL_OW 273
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40717: LD_VAR 0 16
40721: PUSH
40722: LD_INT 1
40724: ARRAY
40725: PPUSH
40726: LD_VAR 0 16
40730: PUSH
40731: LD_INT 2
40733: ARRAY
40734: PPUSH
40735: CALL_OW 488
40739: IFFALSE 40770
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40741: LD_VAR 0 13
40745: PPUSH
40746: LD_VAR 0 16
40750: PUSH
40751: LD_INT 1
40753: ARRAY
40754: PPUSH
40755: LD_VAR 0 16
40759: PUSH
40760: LD_INT 2
40762: ARRAY
40763: PPUSH
40764: CALL_OW 111
// continue ;
40768: GO 40260
// end ; end ; r := GetDir ( tmp ) ;
40770: LD_ADDR_VAR 0 15
40774: PUSH
40775: LD_VAR 0 13
40779: PPUSH
40780: CALL_OW 254
40784: ST_TO_ADDR
// if r = 5 then
40785: LD_VAR 0 15
40789: PUSH
40790: LD_INT 5
40792: EQUAL
40793: IFFALSE 40803
// r := 0 ;
40795: LD_ADDR_VAR 0 15
40799: PUSH
40800: LD_INT 0
40802: ST_TO_ADDR
// for j = r to 5 do
40803: LD_ADDR_VAR 0 10
40807: PUSH
40808: DOUBLE
40809: LD_VAR 0 15
40813: DEC
40814: ST_TO_ADDR
40815: LD_INT 5
40817: PUSH
40818: FOR_TO
40819: IFFALSE 40933
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40821: LD_ADDR_VAR 0 11
40825: PUSH
40826: LD_VAR 0 13
40830: PPUSH
40831: CALL_OW 250
40835: PPUSH
40836: LD_VAR 0 10
40840: PPUSH
40841: LD_INT 2
40843: PPUSH
40844: CALL_OW 272
40848: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40849: LD_ADDR_VAR 0 12
40853: PUSH
40854: LD_VAR 0 13
40858: PPUSH
40859: CALL_OW 251
40863: PPUSH
40864: LD_VAR 0 10
40868: PPUSH
40869: LD_INT 2
40871: PPUSH
40872: CALL_OW 273
40876: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40877: LD_VAR 0 11
40881: PPUSH
40882: LD_VAR 0 12
40886: PPUSH
40887: CALL_OW 488
40891: PUSH
40892: LD_VAR 0 11
40896: PPUSH
40897: LD_VAR 0 12
40901: PPUSH
40902: CALL_OW 428
40906: NOT
40907: AND
40908: IFFALSE 40931
// begin ComMoveXY ( tmp , _x , _y ) ;
40910: LD_VAR 0 13
40914: PPUSH
40915: LD_VAR 0 11
40919: PPUSH
40920: LD_VAR 0 12
40924: PPUSH
40925: CALL_OW 111
// break ;
40929: GO 40933
// end ; end ;
40931: GO 40818
40933: POP
40934: POP
// end ; end ;
40935: GO 40260
40937: POP
40938: POP
// end ;
40939: LD_VAR 0 8
40943: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40944: LD_INT 0
40946: PPUSH
// result := true ;
40947: LD_ADDR_VAR 0 3
40951: PUSH
40952: LD_INT 1
40954: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40955: LD_VAR 0 2
40959: PUSH
40960: LD_INT 24
40962: DOUBLE
40963: EQUAL
40964: IFTRUE 40974
40966: LD_INT 33
40968: DOUBLE
40969: EQUAL
40970: IFTRUE 40974
40972: GO 40999
40974: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40975: LD_ADDR_VAR 0 3
40979: PUSH
40980: LD_INT 32
40982: PPUSH
40983: LD_VAR 0 1
40987: PPUSH
40988: CALL_OW 321
40992: PUSH
40993: LD_INT 2
40995: EQUAL
40996: ST_TO_ADDR
40997: GO 41319
40999: LD_INT 20
41001: DOUBLE
41002: EQUAL
41003: IFTRUE 41007
41005: GO 41032
41007: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41008: LD_ADDR_VAR 0 3
41012: PUSH
41013: LD_INT 6
41015: PPUSH
41016: LD_VAR 0 1
41020: PPUSH
41021: CALL_OW 321
41025: PUSH
41026: LD_INT 2
41028: EQUAL
41029: ST_TO_ADDR
41030: GO 41319
41032: LD_INT 22
41034: DOUBLE
41035: EQUAL
41036: IFTRUE 41046
41038: LD_INT 36
41040: DOUBLE
41041: EQUAL
41042: IFTRUE 41046
41044: GO 41071
41046: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41047: LD_ADDR_VAR 0 3
41051: PUSH
41052: LD_INT 15
41054: PPUSH
41055: LD_VAR 0 1
41059: PPUSH
41060: CALL_OW 321
41064: PUSH
41065: LD_INT 2
41067: EQUAL
41068: ST_TO_ADDR
41069: GO 41319
41071: LD_INT 30
41073: DOUBLE
41074: EQUAL
41075: IFTRUE 41079
41077: GO 41104
41079: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41080: LD_ADDR_VAR 0 3
41084: PUSH
41085: LD_INT 20
41087: PPUSH
41088: LD_VAR 0 1
41092: PPUSH
41093: CALL_OW 321
41097: PUSH
41098: LD_INT 2
41100: EQUAL
41101: ST_TO_ADDR
41102: GO 41319
41104: LD_INT 28
41106: DOUBLE
41107: EQUAL
41108: IFTRUE 41118
41110: LD_INT 21
41112: DOUBLE
41113: EQUAL
41114: IFTRUE 41118
41116: GO 41143
41118: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41119: LD_ADDR_VAR 0 3
41123: PUSH
41124: LD_INT 21
41126: PPUSH
41127: LD_VAR 0 1
41131: PPUSH
41132: CALL_OW 321
41136: PUSH
41137: LD_INT 2
41139: EQUAL
41140: ST_TO_ADDR
41141: GO 41319
41143: LD_INT 16
41145: DOUBLE
41146: EQUAL
41147: IFTRUE 41151
41149: GO 41178
41151: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41152: LD_ADDR_VAR 0 3
41156: PUSH
41157: LD_EXP 108
41161: PPUSH
41162: LD_VAR 0 1
41166: PPUSH
41167: CALL_OW 321
41171: PUSH
41172: LD_INT 2
41174: EQUAL
41175: ST_TO_ADDR
41176: GO 41319
41178: LD_INT 19
41180: DOUBLE
41181: EQUAL
41182: IFTRUE 41192
41184: LD_INT 23
41186: DOUBLE
41187: EQUAL
41188: IFTRUE 41192
41190: GO 41219
41192: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41193: LD_ADDR_VAR 0 3
41197: PUSH
41198: LD_EXP 107
41202: PPUSH
41203: LD_VAR 0 1
41207: PPUSH
41208: CALL_OW 321
41212: PUSH
41213: LD_INT 2
41215: EQUAL
41216: ST_TO_ADDR
41217: GO 41319
41219: LD_INT 17
41221: DOUBLE
41222: EQUAL
41223: IFTRUE 41227
41225: GO 41252
41227: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41228: LD_ADDR_VAR 0 3
41232: PUSH
41233: LD_INT 39
41235: PPUSH
41236: LD_VAR 0 1
41240: PPUSH
41241: CALL_OW 321
41245: PUSH
41246: LD_INT 2
41248: EQUAL
41249: ST_TO_ADDR
41250: GO 41319
41252: LD_INT 18
41254: DOUBLE
41255: EQUAL
41256: IFTRUE 41260
41258: GO 41285
41260: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41261: LD_ADDR_VAR 0 3
41265: PUSH
41266: LD_INT 40
41268: PPUSH
41269: LD_VAR 0 1
41273: PPUSH
41274: CALL_OW 321
41278: PUSH
41279: LD_INT 2
41281: EQUAL
41282: ST_TO_ADDR
41283: GO 41319
41285: LD_INT 27
41287: DOUBLE
41288: EQUAL
41289: IFTRUE 41293
41291: GO 41318
41293: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41294: LD_ADDR_VAR 0 3
41298: PUSH
41299: LD_INT 35
41301: PPUSH
41302: LD_VAR 0 1
41306: PPUSH
41307: CALL_OW 321
41311: PUSH
41312: LD_INT 2
41314: EQUAL
41315: ST_TO_ADDR
41316: GO 41319
41318: POP
// end ;
41319: LD_VAR 0 3
41323: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41324: LD_INT 0
41326: PPUSH
41327: PPUSH
41328: PPUSH
41329: PPUSH
41330: PPUSH
41331: PPUSH
41332: PPUSH
41333: PPUSH
41334: PPUSH
41335: PPUSH
41336: PPUSH
// result := false ;
41337: LD_ADDR_VAR 0 6
41341: PUSH
41342: LD_INT 0
41344: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41345: LD_VAR 0 1
41349: NOT
41350: PUSH
41351: LD_VAR 0 1
41355: PPUSH
41356: CALL_OW 266
41360: PUSH
41361: LD_INT 0
41363: PUSH
41364: LD_INT 1
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: IN
41371: NOT
41372: OR
41373: PUSH
41374: LD_VAR 0 2
41378: NOT
41379: OR
41380: PUSH
41381: LD_VAR 0 5
41385: PUSH
41386: LD_INT 0
41388: PUSH
41389: LD_INT 1
41391: PUSH
41392: LD_INT 2
41394: PUSH
41395: LD_INT 3
41397: PUSH
41398: LD_INT 4
41400: PUSH
41401: LD_INT 5
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: IN
41412: NOT
41413: OR
41414: PUSH
41415: LD_VAR 0 3
41419: PPUSH
41420: LD_VAR 0 4
41424: PPUSH
41425: CALL_OW 488
41429: NOT
41430: OR
41431: IFFALSE 41435
// exit ;
41433: GO 42171
// side := GetSide ( depot ) ;
41435: LD_ADDR_VAR 0 9
41439: PUSH
41440: LD_VAR 0 1
41444: PPUSH
41445: CALL_OW 255
41449: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41450: LD_VAR 0 9
41454: PPUSH
41455: LD_VAR 0 2
41459: PPUSH
41460: CALL 40944 0 2
41464: NOT
41465: IFFALSE 41469
// exit ;
41467: GO 42171
// pom := GetBase ( depot ) ;
41469: LD_ADDR_VAR 0 10
41473: PUSH
41474: LD_VAR 0 1
41478: PPUSH
41479: CALL_OW 274
41483: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41484: LD_ADDR_VAR 0 11
41488: PUSH
41489: LD_VAR 0 2
41493: PPUSH
41494: LD_VAR 0 1
41498: PPUSH
41499: CALL_OW 248
41503: PPUSH
41504: CALL_OW 450
41508: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41509: LD_VAR 0 10
41513: PPUSH
41514: LD_INT 1
41516: PPUSH
41517: CALL_OW 275
41521: PUSH
41522: LD_VAR 0 11
41526: PUSH
41527: LD_INT 1
41529: ARRAY
41530: GREATEREQUAL
41531: PUSH
41532: LD_VAR 0 10
41536: PPUSH
41537: LD_INT 2
41539: PPUSH
41540: CALL_OW 275
41544: PUSH
41545: LD_VAR 0 11
41549: PUSH
41550: LD_INT 2
41552: ARRAY
41553: GREATEREQUAL
41554: AND
41555: PUSH
41556: LD_VAR 0 10
41560: PPUSH
41561: LD_INT 3
41563: PPUSH
41564: CALL_OW 275
41568: PUSH
41569: LD_VAR 0 11
41573: PUSH
41574: LD_INT 3
41576: ARRAY
41577: GREATEREQUAL
41578: AND
41579: NOT
41580: IFFALSE 41584
// exit ;
41582: GO 42171
// if GetBType ( depot ) = b_depot then
41584: LD_VAR 0 1
41588: PPUSH
41589: CALL_OW 266
41593: PUSH
41594: LD_INT 0
41596: EQUAL
41597: IFFALSE 41609
// dist := 28 else
41599: LD_ADDR_VAR 0 14
41603: PUSH
41604: LD_INT 28
41606: ST_TO_ADDR
41607: GO 41617
// dist := 36 ;
41609: LD_ADDR_VAR 0 14
41613: PUSH
41614: LD_INT 36
41616: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41617: LD_VAR 0 1
41621: PPUSH
41622: LD_VAR 0 3
41626: PPUSH
41627: LD_VAR 0 4
41631: PPUSH
41632: CALL_OW 297
41636: PUSH
41637: LD_VAR 0 14
41641: GREATER
41642: IFFALSE 41646
// exit ;
41644: GO 42171
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41646: LD_ADDR_VAR 0 12
41650: PUSH
41651: LD_VAR 0 2
41655: PPUSH
41656: LD_VAR 0 3
41660: PPUSH
41661: LD_VAR 0 4
41665: PPUSH
41666: LD_VAR 0 5
41670: PPUSH
41671: LD_VAR 0 1
41675: PPUSH
41676: CALL_OW 248
41680: PPUSH
41681: LD_INT 0
41683: PPUSH
41684: CALL 42176 0 6
41688: ST_TO_ADDR
// if not hexes then
41689: LD_VAR 0 12
41693: NOT
41694: IFFALSE 41698
// exit ;
41696: GO 42171
// hex := GetHexInfo ( x , y ) ;
41698: LD_ADDR_VAR 0 15
41702: PUSH
41703: LD_VAR 0 3
41707: PPUSH
41708: LD_VAR 0 4
41712: PPUSH
41713: CALL_OW 546
41717: ST_TO_ADDR
// if hex [ 1 ] then
41718: LD_VAR 0 15
41722: PUSH
41723: LD_INT 1
41725: ARRAY
41726: IFFALSE 41730
// exit ;
41728: GO 42171
// height := hex [ 2 ] ;
41730: LD_ADDR_VAR 0 13
41734: PUSH
41735: LD_VAR 0 15
41739: PUSH
41740: LD_INT 2
41742: ARRAY
41743: ST_TO_ADDR
// for i = 1 to hexes do
41744: LD_ADDR_VAR 0 7
41748: PUSH
41749: DOUBLE
41750: LD_INT 1
41752: DEC
41753: ST_TO_ADDR
41754: LD_VAR 0 12
41758: PUSH
41759: FOR_TO
41760: IFFALSE 42090
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41762: LD_VAR 0 12
41766: PUSH
41767: LD_VAR 0 7
41771: ARRAY
41772: PUSH
41773: LD_INT 1
41775: ARRAY
41776: PPUSH
41777: LD_VAR 0 12
41781: PUSH
41782: LD_VAR 0 7
41786: ARRAY
41787: PUSH
41788: LD_INT 2
41790: ARRAY
41791: PPUSH
41792: CALL_OW 488
41796: NOT
41797: PUSH
41798: LD_VAR 0 12
41802: PUSH
41803: LD_VAR 0 7
41807: ARRAY
41808: PUSH
41809: LD_INT 1
41811: ARRAY
41812: PPUSH
41813: LD_VAR 0 12
41817: PUSH
41818: LD_VAR 0 7
41822: ARRAY
41823: PUSH
41824: LD_INT 2
41826: ARRAY
41827: PPUSH
41828: CALL_OW 428
41832: PUSH
41833: LD_INT 0
41835: GREATER
41836: OR
41837: PUSH
41838: LD_VAR 0 12
41842: PUSH
41843: LD_VAR 0 7
41847: ARRAY
41848: PUSH
41849: LD_INT 1
41851: ARRAY
41852: PPUSH
41853: LD_VAR 0 12
41857: PUSH
41858: LD_VAR 0 7
41862: ARRAY
41863: PUSH
41864: LD_INT 2
41866: ARRAY
41867: PPUSH
41868: CALL_OW 351
41872: OR
41873: IFFALSE 41879
// exit ;
41875: POP
41876: POP
41877: GO 42171
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41879: LD_ADDR_VAR 0 8
41883: PUSH
41884: LD_VAR 0 12
41888: PUSH
41889: LD_VAR 0 7
41893: ARRAY
41894: PUSH
41895: LD_INT 1
41897: ARRAY
41898: PPUSH
41899: LD_VAR 0 12
41903: PUSH
41904: LD_VAR 0 7
41908: ARRAY
41909: PUSH
41910: LD_INT 2
41912: ARRAY
41913: PPUSH
41914: CALL_OW 546
41918: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41919: LD_VAR 0 8
41923: PUSH
41924: LD_INT 1
41926: ARRAY
41927: PUSH
41928: LD_VAR 0 8
41932: PUSH
41933: LD_INT 2
41935: ARRAY
41936: PUSH
41937: LD_VAR 0 13
41941: PUSH
41942: LD_INT 2
41944: PLUS
41945: GREATER
41946: OR
41947: PUSH
41948: LD_VAR 0 8
41952: PUSH
41953: LD_INT 2
41955: ARRAY
41956: PUSH
41957: LD_VAR 0 13
41961: PUSH
41962: LD_INT 2
41964: MINUS
41965: LESS
41966: OR
41967: PUSH
41968: LD_VAR 0 8
41972: PUSH
41973: LD_INT 3
41975: ARRAY
41976: PUSH
41977: LD_INT 0
41979: PUSH
41980: LD_INT 8
41982: PUSH
41983: LD_INT 9
41985: PUSH
41986: LD_INT 10
41988: PUSH
41989: LD_INT 11
41991: PUSH
41992: LD_INT 12
41994: PUSH
41995: LD_INT 13
41997: PUSH
41998: LD_INT 16
42000: PUSH
42001: LD_INT 17
42003: PUSH
42004: LD_INT 18
42006: PUSH
42007: LD_INT 19
42009: PUSH
42010: LD_INT 20
42012: PUSH
42013: LD_INT 21
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: IN
42031: NOT
42032: OR
42033: PUSH
42034: LD_VAR 0 8
42038: PUSH
42039: LD_INT 5
42041: ARRAY
42042: NOT
42043: OR
42044: PUSH
42045: LD_VAR 0 8
42049: PUSH
42050: LD_INT 6
42052: ARRAY
42053: PUSH
42054: LD_INT 1
42056: PUSH
42057: LD_INT 2
42059: PUSH
42060: LD_INT 7
42062: PUSH
42063: LD_INT 9
42065: PUSH
42066: LD_INT 10
42068: PUSH
42069: LD_INT 11
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: IN
42080: NOT
42081: OR
42082: IFFALSE 42088
// exit ;
42084: POP
42085: POP
42086: GO 42171
// end ;
42088: GO 41759
42090: POP
42091: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42092: LD_VAR 0 9
42096: PPUSH
42097: LD_VAR 0 3
42101: PPUSH
42102: LD_VAR 0 4
42106: PPUSH
42107: LD_INT 20
42109: PPUSH
42110: CALL 34117 0 4
42114: PUSH
42115: LD_INT 4
42117: ARRAY
42118: IFFALSE 42122
// exit ;
42120: GO 42171
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42122: LD_VAR 0 2
42126: PUSH
42127: LD_INT 29
42129: PUSH
42130: LD_INT 30
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: IN
42137: PUSH
42138: LD_VAR 0 3
42142: PPUSH
42143: LD_VAR 0 4
42147: PPUSH
42148: LD_VAR 0 9
42152: PPUSH
42153: CALL_OW 440
42157: NOT
42158: AND
42159: IFFALSE 42163
// exit ;
42161: GO 42171
// result := true ;
42163: LD_ADDR_VAR 0 6
42167: PUSH
42168: LD_INT 1
42170: ST_TO_ADDR
// end ;
42171: LD_VAR 0 6
42175: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42176: LD_INT 0
42178: PPUSH
42179: PPUSH
42180: PPUSH
42181: PPUSH
42182: PPUSH
42183: PPUSH
42184: PPUSH
42185: PPUSH
42186: PPUSH
42187: PPUSH
42188: PPUSH
42189: PPUSH
42190: PPUSH
42191: PPUSH
42192: PPUSH
42193: PPUSH
42194: PPUSH
42195: PPUSH
42196: PPUSH
42197: PPUSH
42198: PPUSH
42199: PPUSH
42200: PPUSH
42201: PPUSH
42202: PPUSH
42203: PPUSH
42204: PPUSH
42205: PPUSH
42206: PPUSH
42207: PPUSH
42208: PPUSH
42209: PPUSH
42210: PPUSH
42211: PPUSH
42212: PPUSH
42213: PPUSH
42214: PPUSH
42215: PPUSH
42216: PPUSH
42217: PPUSH
42218: PPUSH
42219: PPUSH
42220: PPUSH
42221: PPUSH
42222: PPUSH
42223: PPUSH
42224: PPUSH
42225: PPUSH
42226: PPUSH
42227: PPUSH
42228: PPUSH
42229: PPUSH
42230: PPUSH
42231: PPUSH
42232: PPUSH
42233: PPUSH
42234: PPUSH
42235: PPUSH
// result = [ ] ;
42236: LD_ADDR_VAR 0 7
42240: PUSH
42241: EMPTY
42242: ST_TO_ADDR
// temp_list = [ ] ;
42243: LD_ADDR_VAR 0 9
42247: PUSH
42248: EMPTY
42249: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42250: LD_VAR 0 4
42254: PUSH
42255: LD_INT 0
42257: PUSH
42258: LD_INT 1
42260: PUSH
42261: LD_INT 2
42263: PUSH
42264: LD_INT 3
42266: PUSH
42267: LD_INT 4
42269: PUSH
42270: LD_INT 5
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: IN
42281: NOT
42282: PUSH
42283: LD_VAR 0 1
42287: PUSH
42288: LD_INT 0
42290: PUSH
42291: LD_INT 1
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: IN
42298: PUSH
42299: LD_VAR 0 5
42303: PUSH
42304: LD_INT 1
42306: PUSH
42307: LD_INT 2
42309: PUSH
42310: LD_INT 3
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: LIST
42317: IN
42318: NOT
42319: AND
42320: OR
42321: IFFALSE 42325
// exit ;
42323: GO 60716
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42325: LD_VAR 0 1
42329: PUSH
42330: LD_INT 6
42332: PUSH
42333: LD_INT 7
42335: PUSH
42336: LD_INT 8
42338: PUSH
42339: LD_INT 13
42341: PUSH
42342: LD_INT 12
42344: PUSH
42345: LD_INT 15
42347: PUSH
42348: LD_INT 11
42350: PUSH
42351: LD_INT 14
42353: PUSH
42354: LD_INT 10
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: IN
42368: IFFALSE 42378
// btype = b_lab ;
42370: LD_ADDR_VAR 0 1
42374: PUSH
42375: LD_INT 6
42377: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42378: LD_VAR 0 6
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: LD_INT 1
42388: PUSH
42389: LD_INT 2
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: LIST
42396: IN
42397: NOT
42398: PUSH
42399: LD_VAR 0 1
42403: PUSH
42404: LD_INT 0
42406: PUSH
42407: LD_INT 1
42409: PUSH
42410: LD_INT 2
42412: PUSH
42413: LD_INT 3
42415: PUSH
42416: LD_INT 6
42418: PUSH
42419: LD_INT 36
42421: PUSH
42422: LD_INT 4
42424: PUSH
42425: LD_INT 5
42427: PUSH
42428: LD_INT 31
42430: PUSH
42431: LD_INT 32
42433: PUSH
42434: LD_INT 33
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: IN
42450: NOT
42451: PUSH
42452: LD_VAR 0 6
42456: PUSH
42457: LD_INT 1
42459: EQUAL
42460: AND
42461: OR
42462: PUSH
42463: LD_VAR 0 1
42467: PUSH
42468: LD_INT 2
42470: PUSH
42471: LD_INT 3
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: IN
42478: NOT
42479: PUSH
42480: LD_VAR 0 6
42484: PUSH
42485: LD_INT 2
42487: EQUAL
42488: AND
42489: OR
42490: IFFALSE 42500
// mode = 0 ;
42492: LD_ADDR_VAR 0 6
42496: PUSH
42497: LD_INT 0
42499: ST_TO_ADDR
// case mode of 0 :
42500: LD_VAR 0 6
42504: PUSH
42505: LD_INT 0
42507: DOUBLE
42508: EQUAL
42509: IFTRUE 42513
42511: GO 53966
42513: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42514: LD_ADDR_VAR 0 11
42518: PUSH
42519: LD_INT 0
42521: PUSH
42522: LD_INT 0
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 0
42531: PUSH
42532: LD_INT 1
42534: NEG
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 1
42542: PUSH
42543: LD_INT 0
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 1
42552: PUSH
42553: LD_INT 1
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 0
42562: PUSH
42563: LD_INT 1
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 1
42572: NEG
42573: PUSH
42574: LD_INT 0
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 1
42583: NEG
42584: PUSH
42585: LD_INT 1
42587: NEG
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 1
42595: NEG
42596: PUSH
42597: LD_INT 2
42599: NEG
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 0
42607: PUSH
42608: LD_INT 2
42610: NEG
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 1
42618: PUSH
42619: LD_INT 1
42621: NEG
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 1
42629: PUSH
42630: LD_INT 2
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 0
42639: PUSH
42640: LD_INT 2
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 1
42649: NEG
42650: PUSH
42651: LD_INT 1
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 1
42660: PUSH
42661: LD_INT 3
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 0
42670: PUSH
42671: LD_INT 3
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 1
42680: NEG
42681: PUSH
42682: LD_INT 2
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42707: LD_ADDR_VAR 0 12
42711: PUSH
42712: LD_INT 0
42714: PUSH
42715: LD_INT 0
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 0
42724: PUSH
42725: LD_INT 1
42727: NEG
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 1
42735: PUSH
42736: LD_INT 0
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 1
42745: PUSH
42746: LD_INT 1
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 0
42755: PUSH
42756: LD_INT 1
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 1
42765: NEG
42766: PUSH
42767: LD_INT 0
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 1
42776: NEG
42777: PUSH
42778: LD_INT 1
42780: NEG
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 1
42788: PUSH
42789: LD_INT 1
42791: NEG
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 2
42799: PUSH
42800: LD_INT 0
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 2
42809: PUSH
42810: LD_INT 1
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 1
42819: NEG
42820: PUSH
42821: LD_INT 1
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 2
42830: NEG
42831: PUSH
42832: LD_INT 0
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 2
42841: NEG
42842: PUSH
42843: LD_INT 1
42845: NEG
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 2
42853: NEG
42854: PUSH
42855: LD_INT 1
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 3
42864: NEG
42865: PUSH
42866: LD_INT 0
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 3
42875: NEG
42876: PUSH
42877: LD_INT 1
42879: NEG
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42903: LD_ADDR_VAR 0 13
42907: PUSH
42908: LD_INT 0
42910: PUSH
42911: LD_INT 0
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 0
42920: PUSH
42921: LD_INT 1
42923: NEG
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 1
42931: PUSH
42932: LD_INT 0
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 1
42941: PUSH
42942: LD_INT 1
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 0
42951: PUSH
42952: LD_INT 1
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 1
42961: NEG
42962: PUSH
42963: LD_INT 0
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 1
42972: NEG
42973: PUSH
42974: LD_INT 1
42976: NEG
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 1
42984: NEG
42985: PUSH
42986: LD_INT 2
42988: NEG
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 2
42996: PUSH
42997: LD_INT 1
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 2
43006: PUSH
43007: LD_INT 2
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 1
43016: PUSH
43017: LD_INT 2
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 2
43026: NEG
43027: PUSH
43028: LD_INT 1
43030: NEG
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 2
43038: NEG
43039: PUSH
43040: LD_INT 2
43042: NEG
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 2
43050: NEG
43051: PUSH
43052: LD_INT 3
43054: NEG
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 3
43062: NEG
43063: PUSH
43064: LD_INT 2
43066: NEG
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 3
43074: NEG
43075: PUSH
43076: LD_INT 3
43078: NEG
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43102: LD_ADDR_VAR 0 14
43106: PUSH
43107: LD_INT 0
43109: PUSH
43110: LD_INT 0
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 0
43119: PUSH
43120: LD_INT 1
43122: NEG
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 1
43130: PUSH
43131: LD_INT 0
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 1
43140: PUSH
43141: LD_INT 1
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 0
43150: PUSH
43151: LD_INT 1
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 1
43160: NEG
43161: PUSH
43162: LD_INT 0
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 1
43171: NEG
43172: PUSH
43173: LD_INT 1
43175: NEG
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 1
43183: NEG
43184: PUSH
43185: LD_INT 2
43187: NEG
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 0
43195: PUSH
43196: LD_INT 2
43198: NEG
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 1
43206: PUSH
43207: LD_INT 1
43209: NEG
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 1
43217: PUSH
43218: LD_INT 2
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 0
43227: PUSH
43228: LD_INT 2
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 1
43237: NEG
43238: PUSH
43239: LD_INT 1
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 1
43248: NEG
43249: PUSH
43250: LD_INT 3
43252: NEG
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 0
43260: PUSH
43261: LD_INT 3
43263: NEG
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 1
43271: PUSH
43272: LD_INT 2
43274: NEG
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43298: LD_ADDR_VAR 0 15
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: LD_INT 0
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: LD_INT 1
43318: NEG
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 1
43326: PUSH
43327: LD_INT 0
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 1
43336: PUSH
43337: LD_INT 1
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 0
43346: PUSH
43347: LD_INT 1
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 1
43356: NEG
43357: PUSH
43358: LD_INT 0
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 1
43367: NEG
43368: PUSH
43369: LD_INT 1
43371: NEG
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 1
43379: PUSH
43380: LD_INT 1
43382: NEG
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 2
43390: PUSH
43391: LD_INT 0
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 2
43400: PUSH
43401: LD_INT 1
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 1
43410: NEG
43411: PUSH
43412: LD_INT 1
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 2
43421: NEG
43422: PUSH
43423: LD_INT 0
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 2
43432: NEG
43433: PUSH
43434: LD_INT 1
43436: NEG
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 2
43444: PUSH
43445: LD_INT 1
43447: NEG
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 3
43455: PUSH
43456: LD_INT 0
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 3
43465: PUSH
43466: LD_INT 1
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43491: LD_ADDR_VAR 0 16
43495: PUSH
43496: LD_INT 0
43498: PUSH
43499: LD_INT 0
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 0
43508: PUSH
43509: LD_INT 1
43511: NEG
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 1
43519: PUSH
43520: LD_INT 0
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 1
43529: PUSH
43530: LD_INT 1
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 0
43539: PUSH
43540: LD_INT 1
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 1
43549: NEG
43550: PUSH
43551: LD_INT 0
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 1
43560: NEG
43561: PUSH
43562: LD_INT 1
43564: NEG
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 1
43572: NEG
43573: PUSH
43574: LD_INT 2
43576: NEG
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 2
43584: PUSH
43585: LD_INT 1
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 2
43594: PUSH
43595: LD_INT 2
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 1
43604: PUSH
43605: LD_INT 2
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 2
43614: NEG
43615: PUSH
43616: LD_INT 1
43618: NEG
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 2
43626: NEG
43627: PUSH
43628: LD_INT 2
43630: NEG
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 3
43638: PUSH
43639: LD_INT 2
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 3
43648: PUSH
43649: LD_INT 3
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 2
43658: PUSH
43659: LD_INT 3
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43684: LD_ADDR_VAR 0 17
43688: PUSH
43689: LD_INT 0
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 0
43701: PUSH
43702: LD_INT 1
43704: NEG
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 1
43712: PUSH
43713: LD_INT 0
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 1
43722: PUSH
43723: LD_INT 1
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 0
43732: PUSH
43733: LD_INT 1
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 1
43742: NEG
43743: PUSH
43744: LD_INT 0
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 1
43753: NEG
43754: PUSH
43755: LD_INT 1
43757: NEG
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 1
43765: NEG
43766: PUSH
43767: LD_INT 2
43769: NEG
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 0
43777: PUSH
43778: LD_INT 2
43780: NEG
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: LD_INT 1
43791: NEG
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 2
43799: PUSH
43800: LD_INT 0
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 2
43809: PUSH
43810: LD_INT 1
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 2
43819: PUSH
43820: LD_INT 2
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 1
43829: PUSH
43830: LD_INT 2
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 0
43839: PUSH
43840: LD_INT 2
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 1
43849: NEG
43850: PUSH
43851: LD_INT 1
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 2
43860: NEG
43861: PUSH
43862: LD_INT 0
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 2
43871: NEG
43872: PUSH
43873: LD_INT 1
43875: NEG
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 2
43883: NEG
43884: PUSH
43885: LD_INT 2
43887: NEG
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43914: LD_ADDR_VAR 0 18
43918: PUSH
43919: LD_INT 0
43921: PUSH
43922: LD_INT 0
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 0
43931: PUSH
43932: LD_INT 1
43934: NEG
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 1
43942: PUSH
43943: LD_INT 0
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 1
43952: PUSH
43953: LD_INT 1
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 0
43962: PUSH
43963: LD_INT 1
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 1
43972: NEG
43973: PUSH
43974: LD_INT 0
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 1
43983: NEG
43984: PUSH
43985: LD_INT 1
43987: NEG
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 1
43995: NEG
43996: PUSH
43997: LD_INT 2
43999: NEG
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 0
44007: PUSH
44008: LD_INT 2
44010: NEG
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: LD_INT 1
44021: NEG
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 2
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 2
44039: PUSH
44040: LD_INT 1
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 2
44049: PUSH
44050: LD_INT 2
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 1
44059: PUSH
44060: LD_INT 2
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 0
44069: PUSH
44070: LD_INT 2
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 1
44079: NEG
44080: PUSH
44081: LD_INT 1
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 2
44090: NEG
44091: PUSH
44092: LD_INT 0
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 2
44101: NEG
44102: PUSH
44103: LD_INT 1
44105: NEG
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 2
44113: NEG
44114: PUSH
44115: LD_INT 2
44117: NEG
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44144: LD_ADDR_VAR 0 19
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: LD_INT 0
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 0
44161: PUSH
44162: LD_INT 1
44164: NEG
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 1
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 1
44182: PUSH
44183: LD_INT 1
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 0
44192: PUSH
44193: LD_INT 1
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 1
44202: NEG
44203: PUSH
44204: LD_INT 0
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 1
44213: NEG
44214: PUSH
44215: LD_INT 1
44217: NEG
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 1
44225: NEG
44226: PUSH
44227: LD_INT 2
44229: NEG
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 0
44237: PUSH
44238: LD_INT 2
44240: NEG
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 1
44248: PUSH
44249: LD_INT 1
44251: NEG
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 2
44259: PUSH
44260: LD_INT 0
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 2
44269: PUSH
44270: LD_INT 1
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 2
44279: PUSH
44280: LD_INT 2
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 1
44289: PUSH
44290: LD_INT 2
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 0
44299: PUSH
44300: LD_INT 2
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 1
44309: NEG
44310: PUSH
44311: LD_INT 1
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 2
44320: NEG
44321: PUSH
44322: LD_INT 0
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 2
44331: NEG
44332: PUSH
44333: LD_INT 1
44335: NEG
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 2
44343: NEG
44344: PUSH
44345: LD_INT 2
44347: NEG
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44374: LD_ADDR_VAR 0 20
44378: PUSH
44379: LD_INT 0
44381: PUSH
44382: LD_INT 0
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 0
44391: PUSH
44392: LD_INT 1
44394: NEG
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 1
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 1
44412: PUSH
44413: LD_INT 1
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 0
44422: PUSH
44423: LD_INT 1
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 1
44432: NEG
44433: PUSH
44434: LD_INT 0
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 1
44443: NEG
44444: PUSH
44445: LD_INT 1
44447: NEG
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 1
44455: NEG
44456: PUSH
44457: LD_INT 2
44459: NEG
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 0
44467: PUSH
44468: LD_INT 2
44470: NEG
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: LD_INT 1
44481: NEG
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 2
44489: PUSH
44490: LD_INT 0
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 2
44499: PUSH
44500: LD_INT 1
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 2
44509: PUSH
44510: LD_INT 2
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 1
44519: PUSH
44520: LD_INT 2
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 0
44529: PUSH
44530: LD_INT 2
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 1
44539: NEG
44540: PUSH
44541: LD_INT 1
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 2
44550: NEG
44551: PUSH
44552: LD_INT 0
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 2
44561: NEG
44562: PUSH
44563: LD_INT 1
44565: NEG
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 2
44573: NEG
44574: PUSH
44575: LD_INT 2
44577: NEG
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44604: LD_ADDR_VAR 0 21
44608: PUSH
44609: LD_INT 0
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 0
44621: PUSH
44622: LD_INT 1
44624: NEG
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 1
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 1
44642: PUSH
44643: LD_INT 1
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 0
44652: PUSH
44653: LD_INT 1
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 1
44662: NEG
44663: PUSH
44664: LD_INT 0
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 1
44673: NEG
44674: PUSH
44675: LD_INT 1
44677: NEG
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 1
44685: NEG
44686: PUSH
44687: LD_INT 2
44689: NEG
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 0
44697: PUSH
44698: LD_INT 2
44700: NEG
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 1
44708: PUSH
44709: LD_INT 1
44711: NEG
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 2
44719: PUSH
44720: LD_INT 0
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 2
44729: PUSH
44730: LD_INT 1
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 2
44739: PUSH
44740: LD_INT 2
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 1
44749: PUSH
44750: LD_INT 2
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 0
44759: PUSH
44760: LD_INT 2
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 1
44769: NEG
44770: PUSH
44771: LD_INT 1
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 2
44780: NEG
44781: PUSH
44782: LD_INT 0
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 2
44791: NEG
44792: PUSH
44793: LD_INT 1
44795: NEG
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 2
44803: NEG
44804: PUSH
44805: LD_INT 2
44807: NEG
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44834: LD_ADDR_VAR 0 22
44838: PUSH
44839: LD_INT 0
44841: PUSH
44842: LD_INT 0
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 0
44851: PUSH
44852: LD_INT 1
44854: NEG
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 1
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 1
44872: PUSH
44873: LD_INT 1
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 0
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 1
44892: NEG
44893: PUSH
44894: LD_INT 0
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 1
44903: NEG
44904: PUSH
44905: LD_INT 1
44907: NEG
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 1
44915: NEG
44916: PUSH
44917: LD_INT 2
44919: NEG
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 0
44927: PUSH
44928: LD_INT 2
44930: NEG
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 1
44938: PUSH
44939: LD_INT 1
44941: NEG
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 2
44949: PUSH
44950: LD_INT 0
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 2
44959: PUSH
44960: LD_INT 1
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 2
44969: PUSH
44970: LD_INT 2
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 1
44979: PUSH
44980: LD_INT 2
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 0
44989: PUSH
44990: LD_INT 2
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 1
44999: NEG
45000: PUSH
45001: LD_INT 1
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 2
45010: NEG
45011: PUSH
45012: LD_INT 0
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 2
45021: NEG
45022: PUSH
45023: LD_INT 1
45025: NEG
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 2
45033: NEG
45034: PUSH
45035: LD_INT 2
45037: NEG
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45064: LD_ADDR_VAR 0 23
45068: PUSH
45069: LD_INT 0
45071: PUSH
45072: LD_INT 0
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 0
45081: PUSH
45082: LD_INT 1
45084: NEG
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 1
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: LD_INT 1
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 0
45112: PUSH
45113: LD_INT 1
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 1
45122: NEG
45123: PUSH
45124: LD_INT 0
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 1
45133: NEG
45134: PUSH
45135: LD_INT 1
45137: NEG
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 1
45145: NEG
45146: PUSH
45147: LD_INT 2
45149: NEG
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 0
45157: PUSH
45158: LD_INT 2
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 1
45168: PUSH
45169: LD_INT 1
45171: NEG
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 2
45179: PUSH
45180: LD_INT 0
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 2
45189: PUSH
45190: LD_INT 1
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 2
45199: PUSH
45200: LD_INT 2
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 1
45209: PUSH
45210: LD_INT 2
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: LD_INT 2
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 1
45229: NEG
45230: PUSH
45231: LD_INT 1
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 2
45240: NEG
45241: PUSH
45242: LD_INT 0
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 2
45251: NEG
45252: PUSH
45253: LD_INT 1
45255: NEG
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 2
45263: NEG
45264: PUSH
45265: LD_INT 2
45267: NEG
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 2
45275: NEG
45276: PUSH
45277: LD_INT 3
45279: NEG
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 1
45287: NEG
45288: PUSH
45289: LD_INT 3
45291: NEG
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 1
45299: PUSH
45300: LD_INT 2
45302: NEG
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 2
45310: PUSH
45311: LD_INT 1
45313: NEG
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45344: LD_ADDR_VAR 0 24
45348: PUSH
45349: LD_INT 0
45351: PUSH
45352: LD_INT 0
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 0
45361: PUSH
45362: LD_INT 1
45364: NEG
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 1
45372: PUSH
45373: LD_INT 0
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 1
45382: PUSH
45383: LD_INT 1
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: LD_INT 1
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 1
45402: NEG
45403: PUSH
45404: LD_INT 0
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 1
45413: NEG
45414: PUSH
45415: LD_INT 1
45417: NEG
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 1
45425: NEG
45426: PUSH
45427: LD_INT 2
45429: NEG
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 0
45437: PUSH
45438: LD_INT 2
45440: NEG
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 1
45448: PUSH
45449: LD_INT 1
45451: NEG
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 2
45459: PUSH
45460: LD_INT 0
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 2
45469: PUSH
45470: LD_INT 1
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 2
45479: PUSH
45480: LD_INT 2
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 1
45489: PUSH
45490: LD_INT 2
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 0
45499: PUSH
45500: LD_INT 2
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 1
45509: NEG
45510: PUSH
45511: LD_INT 1
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 2
45520: NEG
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 2
45531: NEG
45532: PUSH
45533: LD_INT 1
45535: NEG
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 2
45543: NEG
45544: PUSH
45545: LD_INT 2
45547: NEG
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 1
45555: PUSH
45556: LD_INT 2
45558: NEG
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 2
45566: PUSH
45567: LD_INT 1
45569: NEG
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 3
45577: PUSH
45578: LD_INT 1
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 3
45587: PUSH
45588: LD_INT 2
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45620: LD_ADDR_VAR 0 25
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: LD_INT 0
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: LD_INT 1
45640: NEG
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 1
45648: PUSH
45649: LD_INT 0
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: LD_INT 1
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 0
45668: PUSH
45669: LD_INT 1
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 1
45678: NEG
45679: PUSH
45680: LD_INT 0
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 1
45689: NEG
45690: PUSH
45691: LD_INT 1
45693: NEG
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 1
45701: NEG
45702: PUSH
45703: LD_INT 2
45705: NEG
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 0
45713: PUSH
45714: LD_INT 2
45716: NEG
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 1
45724: PUSH
45725: LD_INT 1
45727: NEG
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 2
45735: PUSH
45736: LD_INT 0
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 2
45745: PUSH
45746: LD_INT 1
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 2
45755: PUSH
45756: LD_INT 2
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 1
45765: PUSH
45766: LD_INT 2
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 0
45775: PUSH
45776: LD_INT 2
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 1
45785: NEG
45786: PUSH
45787: LD_INT 1
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 2
45796: NEG
45797: PUSH
45798: LD_INT 0
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 2
45807: NEG
45808: PUSH
45809: LD_INT 1
45811: NEG
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 2
45819: NEG
45820: PUSH
45821: LD_INT 2
45823: NEG
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 3
45831: PUSH
45832: LD_INT 1
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 3
45841: PUSH
45842: LD_INT 2
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 2
45851: PUSH
45852: LD_INT 3
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 1
45861: PUSH
45862: LD_INT 3
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45894: LD_ADDR_VAR 0 26
45898: PUSH
45899: LD_INT 0
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 0
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 1
45922: PUSH
45923: LD_INT 0
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: LD_INT 1
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 0
45942: PUSH
45943: LD_INT 1
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 1
45952: NEG
45953: PUSH
45954: LD_INT 0
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 1
45963: NEG
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 1
45975: NEG
45976: PUSH
45977: LD_INT 2
45979: NEG
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 0
45987: PUSH
45988: LD_INT 2
45990: NEG
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 1
45998: PUSH
45999: LD_INT 1
46001: NEG
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 2
46009: PUSH
46010: LD_INT 0
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 2
46019: PUSH
46020: LD_INT 1
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 2
46029: PUSH
46030: LD_INT 2
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: LD_INT 2
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 0
46049: PUSH
46050: LD_INT 2
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 1
46059: NEG
46060: PUSH
46061: LD_INT 1
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 2
46070: NEG
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 2
46081: NEG
46082: PUSH
46083: LD_INT 1
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 2
46093: NEG
46094: PUSH
46095: LD_INT 2
46097: NEG
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 2
46105: PUSH
46106: LD_INT 3
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 1
46115: PUSH
46116: LD_INT 3
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 1
46125: NEG
46126: PUSH
46127: LD_INT 2
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 2
46136: NEG
46137: PUSH
46138: LD_INT 1
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46170: LD_ADDR_VAR 0 27
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 0
46187: PUSH
46188: LD_INT 1
46190: NEG
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 1
46198: PUSH
46199: LD_INT 0
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 1
46208: PUSH
46209: LD_INT 1
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 0
46218: PUSH
46219: LD_INT 1
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 1
46228: NEG
46229: PUSH
46230: LD_INT 0
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 1
46239: NEG
46240: PUSH
46241: LD_INT 1
46243: NEG
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 1
46251: NEG
46252: PUSH
46253: LD_INT 2
46255: NEG
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 0
46263: PUSH
46264: LD_INT 2
46266: NEG
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 1
46274: PUSH
46275: LD_INT 1
46277: NEG
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 2
46285: PUSH
46286: LD_INT 0
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 2
46295: PUSH
46296: LD_INT 1
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 2
46305: PUSH
46306: LD_INT 2
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 1
46315: PUSH
46316: LD_INT 2
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 0
46325: PUSH
46326: LD_INT 2
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 1
46335: NEG
46336: PUSH
46337: LD_INT 1
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 2
46346: NEG
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 2
46357: NEG
46358: PUSH
46359: LD_INT 1
46361: NEG
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 2
46369: NEG
46370: PUSH
46371: LD_INT 2
46373: NEG
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 1
46381: NEG
46382: PUSH
46383: LD_INT 2
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 2
46392: NEG
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 3
46403: NEG
46404: PUSH
46405: LD_INT 1
46407: NEG
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 3
46415: NEG
46416: PUSH
46417: LD_INT 2
46419: NEG
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46450: LD_ADDR_VAR 0 28
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: LD_INT 0
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 0
46467: PUSH
46468: LD_INT 1
46470: NEG
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 1
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 1
46488: PUSH
46489: LD_INT 1
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 0
46498: PUSH
46499: LD_INT 1
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 1
46508: NEG
46509: PUSH
46510: LD_INT 0
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 1
46519: NEG
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 1
46531: NEG
46532: PUSH
46533: LD_INT 2
46535: NEG
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 0
46543: PUSH
46544: LD_INT 2
46546: NEG
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 1
46554: PUSH
46555: LD_INT 1
46557: NEG
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 2
46565: PUSH
46566: LD_INT 0
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 2
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 2
46585: PUSH
46586: LD_INT 2
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 1
46595: PUSH
46596: LD_INT 2
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 0
46605: PUSH
46606: LD_INT 2
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 1
46615: NEG
46616: PUSH
46617: LD_INT 1
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 2
46626: NEG
46627: PUSH
46628: LD_INT 0
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 2
46637: NEG
46638: PUSH
46639: LD_INT 1
46641: NEG
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 2
46649: NEG
46650: PUSH
46651: LD_INT 2
46653: NEG
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 2
46661: NEG
46662: PUSH
46663: LD_INT 3
46665: NEG
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 1
46673: NEG
46674: PUSH
46675: LD_INT 3
46677: NEG
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 3
46685: NEG
46686: PUSH
46687: LD_INT 1
46689: NEG
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 3
46697: NEG
46698: PUSH
46699: LD_INT 2
46701: NEG
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46732: LD_ADDR_VAR 0 29
46736: PUSH
46737: LD_INT 0
46739: PUSH
46740: LD_INT 0
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 0
46749: PUSH
46750: LD_INT 1
46752: NEG
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 1
46760: PUSH
46761: LD_INT 0
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 1
46770: PUSH
46771: LD_INT 1
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 0
46780: PUSH
46781: LD_INT 1
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: LD_INT 0
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: LD_INT 1
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 1
46813: NEG
46814: PUSH
46815: LD_INT 2
46817: NEG
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: LD_INT 2
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 1
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 2
46847: PUSH
46848: LD_INT 0
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 2
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 1
46867: PUSH
46868: LD_INT 2
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: LD_INT 2
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 1
46887: NEG
46888: PUSH
46889: LD_INT 1
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 2
46898: NEG
46899: PUSH
46900: LD_INT 1
46902: NEG
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 2
46910: NEG
46911: PUSH
46912: LD_INT 2
46914: NEG
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 2
46922: NEG
46923: PUSH
46924: LD_INT 3
46926: NEG
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 2
46934: PUSH
46935: LD_INT 1
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 3
46945: PUSH
46946: LD_INT 1
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 1
46955: PUSH
46956: LD_INT 3
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 1
46965: NEG
46966: PUSH
46967: LD_INT 2
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 3
46976: NEG
46977: PUSH
46978: LD_INT 2
46980: NEG
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47011: LD_ADDR_VAR 0 30
47015: PUSH
47016: LD_INT 0
47018: PUSH
47019: LD_INT 0
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 0
47028: PUSH
47029: LD_INT 1
47031: NEG
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 1
47039: PUSH
47040: LD_INT 0
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 1
47049: PUSH
47050: LD_INT 1
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 0
47059: PUSH
47060: LD_INT 1
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 1
47069: NEG
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 1
47080: NEG
47081: PUSH
47082: LD_INT 1
47084: NEG
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 1
47092: NEG
47093: PUSH
47094: LD_INT 2
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 0
47104: PUSH
47105: LD_INT 2
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 1
47115: PUSH
47116: LD_INT 1
47118: NEG
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 2
47126: PUSH
47127: LD_INT 0
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 2
47136: PUSH
47137: LD_INT 1
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 2
47146: PUSH
47147: LD_INT 2
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 1
47156: PUSH
47157: LD_INT 2
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 1
47166: NEG
47167: PUSH
47168: LD_INT 1
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 2
47177: NEG
47178: PUSH
47179: LD_INT 0
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 2
47188: NEG
47189: PUSH
47190: LD_INT 1
47192: NEG
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 1
47200: NEG
47201: PUSH
47202: LD_INT 3
47204: NEG
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 1
47212: PUSH
47213: LD_INT 2
47215: NEG
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 3
47223: PUSH
47224: LD_INT 2
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 2
47233: PUSH
47234: LD_INT 3
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 2
47243: NEG
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 3
47254: NEG
47255: PUSH
47256: LD_INT 1
47258: NEG
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47289: LD_ADDR_VAR 0 31
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 0
47306: PUSH
47307: LD_INT 1
47309: NEG
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 1
47317: PUSH
47318: LD_INT 0
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 1
47327: PUSH
47328: LD_INT 1
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: LD_INT 1
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 1
47347: NEG
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: LD_INT 1
47362: NEG
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: NEG
47371: PUSH
47372: LD_INT 2
47374: NEG
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 1
47382: PUSH
47383: LD_INT 1
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 2
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 2
47403: PUSH
47404: LD_INT 1
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 2
47413: PUSH
47414: LD_INT 2
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 1
47423: PUSH
47424: LD_INT 2
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: LD_INT 2
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 1
47443: NEG
47444: PUSH
47445: LD_INT 1
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 2
47454: NEG
47455: PUSH
47456: LD_INT 1
47458: NEG
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 2
47466: NEG
47467: PUSH
47468: LD_INT 2
47470: NEG
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 2
47478: NEG
47479: PUSH
47480: LD_INT 3
47482: NEG
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 2
47490: PUSH
47491: LD_INT 1
47493: NEG
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 3
47501: PUSH
47502: LD_INT 1
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: LD_INT 3
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 1
47521: NEG
47522: PUSH
47523: LD_INT 2
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 3
47532: NEG
47533: PUSH
47534: LD_INT 2
47536: NEG
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47567: LD_ADDR_VAR 0 32
47571: PUSH
47572: LD_INT 0
47574: PUSH
47575: LD_INT 0
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 0
47584: PUSH
47585: LD_INT 1
47587: NEG
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 1
47595: PUSH
47596: LD_INT 0
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 1
47605: PUSH
47606: LD_INT 1
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 0
47615: PUSH
47616: LD_INT 1
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 1
47625: NEG
47626: PUSH
47627: LD_INT 0
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 1
47636: NEG
47637: PUSH
47638: LD_INT 1
47640: NEG
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 1
47648: NEG
47649: PUSH
47650: LD_INT 2
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: LD_INT 2
47663: NEG
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: LD_INT 1
47674: NEG
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 2
47682: PUSH
47683: LD_INT 1
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 2
47692: PUSH
47693: LD_INT 2
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 1
47702: PUSH
47703: LD_INT 2
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 0
47712: PUSH
47713: LD_INT 2
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 1
47722: NEG
47723: PUSH
47724: LD_INT 1
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 2
47733: NEG
47734: PUSH
47735: LD_INT 0
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 2
47744: NEG
47745: PUSH
47746: LD_INT 1
47748: NEG
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 1
47756: NEG
47757: PUSH
47758: LD_INT 3
47760: NEG
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 1
47768: PUSH
47769: LD_INT 2
47771: NEG
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 3
47779: PUSH
47780: LD_INT 2
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 2
47789: PUSH
47790: LD_INT 3
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 2
47799: NEG
47800: PUSH
47801: LD_INT 1
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 3
47810: NEG
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47845: LD_ADDR_VAR 0 33
47849: PUSH
47850: LD_INT 0
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 0
47862: PUSH
47863: LD_INT 1
47865: NEG
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 1
47873: PUSH
47874: LD_INT 0
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 1
47883: PUSH
47884: LD_INT 1
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: LD_INT 1
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 1
47903: NEG
47904: PUSH
47905: LD_INT 0
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 1
47914: NEG
47915: PUSH
47916: LD_INT 1
47918: NEG
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 1
47926: NEG
47927: PUSH
47928: LD_INT 2
47930: NEG
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 1
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 2
47949: PUSH
47950: LD_INT 0
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 2
47959: PUSH
47960: LD_INT 1
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 1
47969: PUSH
47970: LD_INT 2
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 0
47979: PUSH
47980: LD_INT 2
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 1
47989: NEG
47990: PUSH
47991: LD_INT 1
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 2
48000: NEG
48001: PUSH
48002: LD_INT 0
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 2
48011: NEG
48012: PUSH
48013: LD_INT 1
48015: NEG
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 2
48023: NEG
48024: PUSH
48025: LD_INT 2
48027: NEG
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 2
48035: NEG
48036: PUSH
48037: LD_INT 3
48039: NEG
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 2
48047: PUSH
48048: LD_INT 1
48050: NEG
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 3
48058: PUSH
48059: LD_INT 1
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: LD_INT 3
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 1
48078: NEG
48079: PUSH
48080: LD_INT 2
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 3
48089: NEG
48090: PUSH
48091: LD_INT 2
48093: NEG
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48124: LD_ADDR_VAR 0 34
48128: PUSH
48129: LD_INT 0
48131: PUSH
48132: LD_INT 0
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: LD_INT 1
48144: NEG
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 1
48152: PUSH
48153: LD_INT 0
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 1
48162: PUSH
48163: LD_INT 1
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 0
48172: PUSH
48173: LD_INT 1
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 1
48182: NEG
48183: PUSH
48184: LD_INT 0
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 1
48193: NEG
48194: PUSH
48195: LD_INT 1
48197: NEG
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 1
48205: NEG
48206: PUSH
48207: LD_INT 2
48209: NEG
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 0
48217: PUSH
48218: LD_INT 2
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 1
48228: PUSH
48229: LD_INT 1
48231: NEG
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 2
48239: PUSH
48240: LD_INT 1
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 2
48249: PUSH
48250: LD_INT 2
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 1
48259: PUSH
48260: LD_INT 2
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 1
48269: NEG
48270: PUSH
48271: LD_INT 1
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 2
48280: NEG
48281: PUSH
48282: LD_INT 0
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 2
48291: NEG
48292: PUSH
48293: LD_INT 1
48295: NEG
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 2
48303: NEG
48304: PUSH
48305: LD_INT 2
48307: NEG
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 1
48315: NEG
48316: PUSH
48317: LD_INT 3
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 1
48327: PUSH
48328: LD_INT 2
48330: NEG
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 3
48338: PUSH
48339: LD_INT 2
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 2
48348: PUSH
48349: LD_INT 3
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 2
48358: NEG
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 3
48369: NEG
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48404: LD_ADDR_VAR 0 35
48408: PUSH
48409: LD_INT 0
48411: PUSH
48412: LD_INT 0
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 0
48421: PUSH
48422: LD_INT 1
48424: NEG
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 1
48432: PUSH
48433: LD_INT 0
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 1
48442: PUSH
48443: LD_INT 1
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 0
48452: PUSH
48453: LD_INT 1
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 1
48462: NEG
48463: PUSH
48464: LD_INT 0
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 1
48473: NEG
48474: PUSH
48475: LD_INT 1
48477: NEG
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 2
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 2
48495: NEG
48496: PUSH
48497: LD_INT 1
48499: NEG
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48516: LD_ADDR_VAR 0 36
48520: PUSH
48521: LD_INT 0
48523: PUSH
48524: LD_INT 0
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 1
48544: PUSH
48545: LD_INT 0
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 1
48554: PUSH
48555: LD_INT 1
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 0
48564: PUSH
48565: LD_INT 1
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 1
48574: NEG
48575: PUSH
48576: LD_INT 0
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 1
48585: NEG
48586: PUSH
48587: LD_INT 1
48589: NEG
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 1
48597: NEG
48598: PUSH
48599: LD_INT 2
48601: NEG
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 1
48609: PUSH
48610: LD_INT 2
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48628: LD_ADDR_VAR 0 37
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: LD_INT 0
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 0
48645: PUSH
48646: LD_INT 1
48648: NEG
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 1
48656: PUSH
48657: LD_INT 0
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 1
48666: PUSH
48667: LD_INT 1
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 0
48676: PUSH
48677: LD_INT 1
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 1
48686: NEG
48687: PUSH
48688: LD_INT 0
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 1
48697: NEG
48698: PUSH
48699: LD_INT 1
48701: NEG
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: PUSH
48710: LD_INT 1
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 1
48720: NEG
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48740: LD_ADDR_VAR 0 38
48744: PUSH
48745: LD_INT 0
48747: PUSH
48748: LD_INT 0
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 0
48757: PUSH
48758: LD_INT 1
48760: NEG
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 1
48768: PUSH
48769: LD_INT 0
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: LD_INT 1
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 0
48788: PUSH
48789: LD_INT 1
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 1
48798: NEG
48799: PUSH
48800: LD_INT 0
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 1
48809: NEG
48810: PUSH
48811: LD_INT 1
48813: NEG
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 2
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 2
48831: NEG
48832: PUSH
48833: LD_INT 1
48835: NEG
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48852: LD_ADDR_VAR 0 39
48856: PUSH
48857: LD_INT 0
48859: PUSH
48860: LD_INT 0
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: LD_INT 1
48872: NEG
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: LD_INT 0
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 1
48890: PUSH
48891: LD_INT 1
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 0
48900: PUSH
48901: LD_INT 1
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 1
48910: NEG
48911: PUSH
48912: LD_INT 0
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 1
48921: NEG
48922: PUSH
48923: LD_INT 1
48925: NEG
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 1
48933: NEG
48934: PUSH
48935: LD_INT 2
48937: NEG
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 1
48945: PUSH
48946: LD_INT 2
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48964: LD_ADDR_VAR 0 40
48968: PUSH
48969: LD_INT 0
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 0
48981: PUSH
48982: LD_INT 1
48984: NEG
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 1
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: LD_INT 1
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 0
49012: PUSH
49013: LD_INT 1
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 1
49022: NEG
49023: PUSH
49024: LD_INT 0
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 1
49033: NEG
49034: PUSH
49035: LD_INT 1
49037: NEG
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 1
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 1
49056: NEG
49057: PUSH
49058: LD_INT 1
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49076: LD_ADDR_VAR 0 41
49080: PUSH
49081: LD_INT 0
49083: PUSH
49084: LD_INT 0
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 0
49093: PUSH
49094: LD_INT 1
49096: NEG
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 1
49114: PUSH
49115: LD_INT 1
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 0
49124: PUSH
49125: LD_INT 1
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 1
49134: NEG
49135: PUSH
49136: LD_INT 0
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 1
49145: NEG
49146: PUSH
49147: LD_INT 1
49149: NEG
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 1
49157: NEG
49158: PUSH
49159: LD_INT 2
49161: NEG
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 1
49169: PUSH
49170: LD_INT 1
49172: NEG
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 2
49180: PUSH
49181: LD_INT 0
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 2
49190: PUSH
49191: LD_INT 1
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 2
49200: PUSH
49201: LD_INT 2
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: LD_INT 2
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 1
49220: NEG
49221: PUSH
49222: LD_INT 1
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 2
49231: NEG
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 2
49242: NEG
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 2
49254: NEG
49255: PUSH
49256: LD_INT 2
49258: NEG
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 2
49266: NEG
49267: PUSH
49268: LD_INT 3
49270: NEG
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 2
49278: PUSH
49279: LD_INT 1
49281: NEG
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 3
49289: PUSH
49290: LD_INT 0
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 3
49299: PUSH
49300: LD_INT 1
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 3
49309: PUSH
49310: LD_INT 2
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 3
49319: PUSH
49320: LD_INT 3
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 2
49329: PUSH
49330: LD_INT 3
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 2
49339: NEG
49340: PUSH
49341: LD_INT 1
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 3
49350: NEG
49351: PUSH
49352: LD_INT 0
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 3
49361: NEG
49362: PUSH
49363: LD_INT 1
49365: NEG
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 3
49373: NEG
49374: PUSH
49375: LD_INT 2
49377: NEG
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 3
49385: NEG
49386: PUSH
49387: LD_INT 3
49389: NEG
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49426: LD_ADDR_VAR 0 42
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: LD_INT 0
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 0
49443: PUSH
49444: LD_INT 1
49446: NEG
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 1
49454: PUSH
49455: LD_INT 0
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: LD_INT 1
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 0
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 1
49484: NEG
49485: PUSH
49486: LD_INT 0
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 1
49495: NEG
49496: PUSH
49497: LD_INT 1
49499: NEG
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 1
49507: NEG
49508: PUSH
49509: LD_INT 2
49511: NEG
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 0
49519: PUSH
49520: LD_INT 2
49522: NEG
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 1
49530: PUSH
49531: LD_INT 1
49533: NEG
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 2
49541: PUSH
49542: LD_INT 1
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 2
49551: PUSH
49552: LD_INT 2
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 1
49561: PUSH
49562: LD_INT 2
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: LD_INT 2
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 1
49581: NEG
49582: PUSH
49583: LD_INT 1
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 2
49592: NEG
49593: PUSH
49594: LD_INT 1
49596: NEG
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 2
49604: NEG
49605: PUSH
49606: LD_INT 2
49608: NEG
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 2
49616: NEG
49617: PUSH
49618: LD_INT 3
49620: NEG
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 1
49628: NEG
49629: PUSH
49630: LD_INT 3
49632: NEG
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 0
49640: PUSH
49641: LD_INT 3
49643: NEG
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 1
49651: PUSH
49652: LD_INT 2
49654: NEG
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 3
49662: PUSH
49663: LD_INT 2
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 3
49672: PUSH
49673: LD_INT 3
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 2
49682: PUSH
49683: LD_INT 3
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 1
49692: PUSH
49693: LD_INT 3
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 0
49702: PUSH
49703: LD_INT 3
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: LD_INT 2
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 3
49723: NEG
49724: PUSH
49725: LD_INT 2
49727: NEG
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 3
49735: NEG
49736: PUSH
49737: LD_INT 3
49739: NEG
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49776: LD_ADDR_VAR 0 43
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: LD_INT 0
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: LD_INT 1
49796: NEG
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 1
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 1
49814: PUSH
49815: LD_INT 1
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: LD_INT 1
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 1
49834: NEG
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 1
49845: NEG
49846: PUSH
49847: LD_INT 1
49849: NEG
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 1
49857: NEG
49858: PUSH
49859: LD_INT 2
49861: NEG
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 0
49869: PUSH
49870: LD_INT 2
49872: NEG
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 1
49880: PUSH
49881: LD_INT 1
49883: NEG
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 2
49891: PUSH
49892: LD_INT 0
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 2
49901: PUSH
49902: LD_INT 1
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 1
49911: PUSH
49912: LD_INT 2
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 0
49921: PUSH
49922: LD_INT 2
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 1
49931: NEG
49932: PUSH
49933: LD_INT 1
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 2
49942: NEG
49943: PUSH
49944: LD_INT 0
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 2
49953: NEG
49954: PUSH
49955: LD_INT 1
49957: NEG
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 1
49965: NEG
49966: PUSH
49967: LD_INT 3
49969: NEG
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 0
49977: PUSH
49978: LD_INT 3
49980: NEG
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 1
49988: PUSH
49989: LD_INT 2
49991: NEG
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 2
49999: PUSH
50000: LD_INT 1
50002: NEG
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 3
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 3
50020: PUSH
50021: LD_INT 1
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 1
50030: PUSH
50031: LD_INT 3
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 0
50040: PUSH
50041: LD_INT 3
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 1
50050: NEG
50051: PUSH
50052: LD_INT 2
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 2
50061: NEG
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 3
50072: NEG
50073: PUSH
50074: LD_INT 0
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 3
50083: NEG
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50124: LD_ADDR_VAR 0 44
50128: PUSH
50129: LD_INT 0
50131: PUSH
50132: LD_INT 0
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: LD_INT 1
50144: NEG
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 1
50152: PUSH
50153: LD_INT 0
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 1
50162: PUSH
50163: LD_INT 1
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 0
50172: PUSH
50173: LD_INT 1
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 1
50182: NEG
50183: PUSH
50184: LD_INT 0
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 1
50193: NEG
50194: PUSH
50195: LD_INT 1
50197: NEG
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 1
50205: NEG
50206: PUSH
50207: LD_INT 2
50209: NEG
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: LD_INT 1
50220: NEG
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 2
50228: PUSH
50229: LD_INT 0
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 2
50238: PUSH
50239: LD_INT 1
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 2
50248: PUSH
50249: LD_INT 2
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 1
50258: PUSH
50259: LD_INT 2
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 1
50268: NEG
50269: PUSH
50270: LD_INT 1
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 2
50279: NEG
50280: PUSH
50281: LD_INT 0
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 2
50290: NEG
50291: PUSH
50292: LD_INT 1
50294: NEG
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 2
50302: NEG
50303: PUSH
50304: LD_INT 2
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 2
50314: NEG
50315: PUSH
50316: LD_INT 3
50318: NEG
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 2
50326: PUSH
50327: LD_INT 1
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 3
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 3
50347: PUSH
50348: LD_INT 1
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 3
50357: PUSH
50358: LD_INT 2
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 3
50367: PUSH
50368: LD_INT 3
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 2
50377: PUSH
50378: LD_INT 3
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 2
50387: NEG
50388: PUSH
50389: LD_INT 1
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 3
50398: NEG
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 3
50409: NEG
50410: PUSH
50411: LD_INT 1
50413: NEG
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 3
50421: NEG
50422: PUSH
50423: LD_INT 2
50425: NEG
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 3
50433: NEG
50434: PUSH
50435: LD_INT 3
50437: NEG
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50474: LD_ADDR_VAR 0 45
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: LD_INT 0
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 0
50491: PUSH
50492: LD_INT 1
50494: NEG
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 1
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 1
50512: PUSH
50513: LD_INT 1
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 0
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 1
50532: NEG
50533: PUSH
50534: LD_INT 0
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 1
50543: NEG
50544: PUSH
50545: LD_INT 1
50547: NEG
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 1
50555: NEG
50556: PUSH
50557: LD_INT 2
50559: NEG
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: LD_INT 2
50570: NEG
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 1
50578: PUSH
50579: LD_INT 1
50581: NEG
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 2
50589: PUSH
50590: LD_INT 1
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 2
50599: PUSH
50600: LD_INT 2
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 1
50609: PUSH
50610: LD_INT 2
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 0
50619: PUSH
50620: LD_INT 2
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 1
50629: NEG
50630: PUSH
50631: LD_INT 1
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 2
50640: NEG
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 2
50652: NEG
50653: PUSH
50654: LD_INT 2
50656: NEG
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 2
50664: NEG
50665: PUSH
50666: LD_INT 3
50668: NEG
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 1
50676: NEG
50677: PUSH
50678: LD_INT 3
50680: NEG
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 0
50688: PUSH
50689: LD_INT 3
50691: NEG
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 1
50699: PUSH
50700: LD_INT 2
50702: NEG
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 3
50710: PUSH
50711: LD_INT 2
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 3
50720: PUSH
50721: LD_INT 3
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 2
50730: PUSH
50731: LD_INT 3
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 1
50740: PUSH
50741: LD_INT 3
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 0
50750: PUSH
50751: LD_INT 3
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 1
50760: NEG
50761: PUSH
50762: LD_INT 2
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 3
50771: NEG
50772: PUSH
50773: LD_INT 2
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 3
50783: NEG
50784: PUSH
50785: LD_INT 3
50787: NEG
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50824: LD_ADDR_VAR 0 46
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: LD_INT 0
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 0
50841: PUSH
50842: LD_INT 1
50844: NEG
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: LD_INT 0
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: LD_INT 1
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 0
50872: PUSH
50873: LD_INT 1
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 1
50882: NEG
50883: PUSH
50884: LD_INT 0
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 1
50893: NEG
50894: PUSH
50895: LD_INT 1
50897: NEG
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 1
50905: NEG
50906: PUSH
50907: LD_INT 2
50909: NEG
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 0
50917: PUSH
50918: LD_INT 2
50920: NEG
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 1
50928: PUSH
50929: LD_INT 1
50931: NEG
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 2
50939: PUSH
50940: LD_INT 0
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 2
50949: PUSH
50950: LD_INT 1
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 1
50959: PUSH
50960: LD_INT 2
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 0
50969: PUSH
50970: LD_INT 2
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 1
50979: NEG
50980: PUSH
50981: LD_INT 1
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 2
50990: NEG
50991: PUSH
50992: LD_INT 0
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 2
51001: NEG
51002: PUSH
51003: LD_INT 1
51005: NEG
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 1
51013: NEG
51014: PUSH
51015: LD_INT 3
51017: NEG
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 0
51025: PUSH
51026: LD_INT 3
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 1
51036: PUSH
51037: LD_INT 2
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 2
51047: PUSH
51048: LD_INT 1
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 3
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 3
51068: PUSH
51069: LD_INT 1
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: PUSH
51079: LD_INT 3
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 0
51088: PUSH
51089: LD_INT 3
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 1
51098: NEG
51099: PUSH
51100: LD_INT 2
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 2
51109: NEG
51110: PUSH
51111: LD_INT 1
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 3
51120: NEG
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 3
51131: NEG
51132: PUSH
51133: LD_INT 1
51135: NEG
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51172: LD_ADDR_VAR 0 47
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: LD_INT 0
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: LD_INT 1
51192: NEG
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 1
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: LD_INT 1
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 0
51220: PUSH
51221: LD_INT 1
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 1
51230: NEG
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 1
51241: NEG
51242: PUSH
51243: LD_INT 1
51245: NEG
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 1
51253: NEG
51254: PUSH
51255: LD_INT 2
51257: NEG
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: LD_INT 2
51268: NEG
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 1
51276: PUSH
51277: LD_INT 1
51279: NEG
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 2
51287: NEG
51288: PUSH
51289: LD_INT 1
51291: NEG
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 2
51299: NEG
51300: PUSH
51301: LD_INT 2
51303: NEG
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51323: LD_ADDR_VAR 0 48
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: LD_INT 1
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 1
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: LD_INT 1
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: LD_INT 1
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 1
51392: NEG
51393: PUSH
51394: LD_INT 1
51396: NEG
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: LD_INT 2
51408: NEG
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 0
51416: PUSH
51417: LD_INT 2
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: LD_INT 1
51430: NEG
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 2
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 2
51448: PUSH
51449: LD_INT 1
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51470: LD_ADDR_VAR 0 49
51474: PUSH
51475: LD_INT 0
51477: PUSH
51478: LD_INT 0
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 0
51487: PUSH
51488: LD_INT 1
51490: NEG
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 1
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 1
51508: PUSH
51509: LD_INT 1
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 0
51518: PUSH
51519: LD_INT 1
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 1
51528: NEG
51529: PUSH
51530: LD_INT 0
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 1
51539: NEG
51540: PUSH
51541: LD_INT 1
51543: NEG
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 1
51551: PUSH
51552: LD_INT 1
51554: NEG
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 2
51562: PUSH
51563: LD_INT 0
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 2
51572: PUSH
51573: LD_INT 1
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 2
51582: PUSH
51583: LD_INT 2
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 1
51592: PUSH
51593: LD_INT 2
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51614: LD_ADDR_VAR 0 50
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: LD_INT 0
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 0
51631: PUSH
51632: LD_INT 1
51634: NEG
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 1
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 1
51652: PUSH
51653: LD_INT 1
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 0
51662: PUSH
51663: LD_INT 1
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 1
51672: NEG
51673: PUSH
51674: LD_INT 0
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 1
51683: NEG
51684: PUSH
51685: LD_INT 1
51687: NEG
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 2
51695: PUSH
51696: LD_INT 1
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 2
51705: PUSH
51706: LD_INT 2
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 1
51715: PUSH
51716: LD_INT 2
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 0
51725: PUSH
51726: LD_INT 2
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 1
51735: NEG
51736: PUSH
51737: LD_INT 1
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51758: LD_ADDR_VAR 0 51
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 0
51775: PUSH
51776: LD_INT 1
51778: NEG
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 1
51786: PUSH
51787: LD_INT 0
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 1
51796: PUSH
51797: LD_INT 1
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 0
51806: PUSH
51807: LD_INT 1
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 1
51816: NEG
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 1
51827: NEG
51828: PUSH
51829: LD_INT 1
51831: NEG
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 1
51839: PUSH
51840: LD_INT 2
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 0
51849: PUSH
51850: LD_INT 2
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 1
51859: NEG
51860: PUSH
51861: LD_INT 1
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 2
51870: NEG
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 2
51881: NEG
51882: PUSH
51883: LD_INT 1
51885: NEG
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51905: LD_ADDR_VAR 0 52
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: LD_INT 0
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: LD_INT 1
51925: NEG
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 1
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 1
51943: PUSH
51944: LD_INT 1
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 0
51953: PUSH
51954: LD_INT 1
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 1
51963: NEG
51964: PUSH
51965: LD_INT 0
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 1
51974: NEG
51975: PUSH
51976: LD_INT 1
51978: NEG
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 1
51986: NEG
51987: PUSH
51988: LD_INT 2
51990: NEG
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 1
51998: NEG
51999: PUSH
52000: LD_INT 1
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 2
52009: NEG
52010: PUSH
52011: LD_INT 0
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 2
52020: NEG
52021: PUSH
52022: LD_INT 1
52024: NEG
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 2
52032: NEG
52033: PUSH
52034: LD_INT 2
52036: NEG
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52056: LD_ADDR_VAR 0 53
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: LD_INT 0
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 0
52073: PUSH
52074: LD_INT 1
52076: NEG
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: LD_INT 1
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 0
52104: PUSH
52105: LD_INT 1
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 1
52114: NEG
52115: PUSH
52116: LD_INT 0
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 1
52125: NEG
52126: PUSH
52127: LD_INT 1
52129: NEG
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 1
52137: NEG
52138: PUSH
52139: LD_INT 2
52141: NEG
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: LD_INT 2
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 1
52160: PUSH
52161: LD_INT 1
52163: NEG
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 2
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 2
52181: PUSH
52182: LD_INT 1
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 2
52191: PUSH
52192: LD_INT 2
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 1
52201: PUSH
52202: LD_INT 2
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 0
52211: PUSH
52212: LD_INT 2
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 1
52221: NEG
52222: PUSH
52223: LD_INT 1
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 2
52232: NEG
52233: PUSH
52234: LD_INT 0
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 2
52243: NEG
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 2
52255: NEG
52256: PUSH
52257: LD_INT 2
52259: NEG
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52286: LD_ADDR_VAR 0 54
52290: PUSH
52291: LD_INT 0
52293: PUSH
52294: LD_INT 0
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 0
52303: PUSH
52304: LD_INT 1
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 1
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 1
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 0
52334: PUSH
52335: LD_INT 1
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 1
52344: NEG
52345: PUSH
52346: LD_INT 0
52348: PUSH
52349: EMPTY
52350: LIST
52351: LIST
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: LD_INT 1
52359: NEG
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 1
52367: NEG
52368: PUSH
52369: LD_INT 2
52371: NEG
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: LD_INT 2
52382: NEG
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 1
52390: PUSH
52391: LD_INT 1
52393: NEG
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 2
52401: PUSH
52402: LD_INT 0
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 2
52411: PUSH
52412: LD_INT 1
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 2
52421: PUSH
52422: LD_INT 2
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 1
52431: PUSH
52432: LD_INT 2
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: LD_INT 2
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 1
52451: NEG
52452: PUSH
52453: LD_INT 1
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 2
52462: NEG
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 2
52473: NEG
52474: PUSH
52475: LD_INT 1
52477: NEG
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 2
52485: NEG
52486: PUSH
52487: LD_INT 2
52489: NEG
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52516: LD_ADDR_VAR 0 55
52520: PUSH
52521: LD_INT 0
52523: PUSH
52524: LD_INT 0
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 0
52533: PUSH
52534: LD_INT 1
52536: NEG
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 1
52544: PUSH
52545: LD_INT 0
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 1
52554: PUSH
52555: LD_INT 1
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 0
52564: PUSH
52565: LD_INT 1
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: LD_INT 0
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 1
52585: NEG
52586: PUSH
52587: LD_INT 1
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: LD_INT 2
52601: NEG
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 0
52609: PUSH
52610: LD_INT 2
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 1
52620: PUSH
52621: LD_INT 1
52623: NEG
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 2
52631: PUSH
52632: LD_INT 0
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 2
52641: PUSH
52642: LD_INT 1
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 2
52651: PUSH
52652: LD_INT 2
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 1
52661: PUSH
52662: LD_INT 2
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 0
52671: PUSH
52672: LD_INT 2
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 1
52681: NEG
52682: PUSH
52683: LD_INT 1
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 2
52692: NEG
52693: PUSH
52694: LD_INT 0
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 2
52703: NEG
52704: PUSH
52705: LD_INT 1
52707: NEG
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 2
52715: NEG
52716: PUSH
52717: LD_INT 2
52719: NEG
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52746: LD_ADDR_VAR 0 56
52750: PUSH
52751: LD_INT 0
52753: PUSH
52754: LD_INT 0
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 0
52763: PUSH
52764: LD_INT 1
52766: NEG
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 1
52774: PUSH
52775: LD_INT 0
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 1
52784: PUSH
52785: LD_INT 1
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 0
52794: PUSH
52795: LD_INT 1
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 1
52804: NEG
52805: PUSH
52806: LD_INT 0
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 1
52815: NEG
52816: PUSH
52817: LD_INT 1
52819: NEG
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 1
52827: NEG
52828: PUSH
52829: LD_INT 2
52831: NEG
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 0
52839: PUSH
52840: LD_INT 2
52842: NEG
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: LD_INT 1
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 2
52861: PUSH
52862: LD_INT 0
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 2
52871: PUSH
52872: LD_INT 1
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 2
52881: PUSH
52882: LD_INT 2
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 1
52891: PUSH
52892: LD_INT 2
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 0
52901: PUSH
52902: LD_INT 2
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 1
52911: NEG
52912: PUSH
52913: LD_INT 1
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 2
52922: NEG
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 2
52933: NEG
52934: PUSH
52935: LD_INT 1
52937: NEG
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 2
52945: NEG
52946: PUSH
52947: LD_INT 2
52949: NEG
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52976: LD_ADDR_VAR 0 57
52980: PUSH
52981: LD_INT 0
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 0
52993: PUSH
52994: LD_INT 1
52996: NEG
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 1
53004: PUSH
53005: LD_INT 0
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 1
53014: PUSH
53015: LD_INT 1
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 0
53024: PUSH
53025: LD_INT 1
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 1
53034: NEG
53035: PUSH
53036: LD_INT 0
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 1
53045: NEG
53046: PUSH
53047: LD_INT 1
53049: NEG
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 1
53057: NEG
53058: PUSH
53059: LD_INT 2
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 0
53069: PUSH
53070: LD_INT 2
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 1
53080: PUSH
53081: LD_INT 1
53083: NEG
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 2
53091: PUSH
53092: LD_INT 0
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 2
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 2
53111: PUSH
53112: LD_INT 2
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 1
53121: PUSH
53122: LD_INT 2
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 0
53131: PUSH
53132: LD_INT 2
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 1
53141: NEG
53142: PUSH
53143: LD_INT 1
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 2
53152: NEG
53153: PUSH
53154: LD_INT 0
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 2
53163: NEG
53164: PUSH
53165: LD_INT 1
53167: NEG
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 2
53175: NEG
53176: PUSH
53177: LD_INT 2
53179: NEG
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53206: LD_ADDR_VAR 0 58
53210: PUSH
53211: LD_INT 0
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 0
53223: PUSH
53224: LD_INT 1
53226: NEG
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 1
53234: PUSH
53235: LD_INT 0
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 1
53244: PUSH
53245: LD_INT 1
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 0
53254: PUSH
53255: LD_INT 1
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 1
53264: NEG
53265: PUSH
53266: LD_INT 0
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 1
53275: NEG
53276: PUSH
53277: LD_INT 1
53279: NEG
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 1
53287: NEG
53288: PUSH
53289: LD_INT 2
53291: NEG
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: LD_INT 2
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 1
53310: PUSH
53311: LD_INT 1
53313: NEG
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 2
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 2
53331: PUSH
53332: LD_INT 1
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 2
53341: PUSH
53342: LD_INT 2
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: LD_INT 2
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 0
53361: PUSH
53362: LD_INT 2
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 1
53371: NEG
53372: PUSH
53373: LD_INT 1
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 2
53382: NEG
53383: PUSH
53384: LD_INT 0
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 2
53393: NEG
53394: PUSH
53395: LD_INT 1
53397: NEG
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 2
53405: NEG
53406: PUSH
53407: LD_INT 2
53409: NEG
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53436: LD_ADDR_VAR 0 59
53440: PUSH
53441: LD_INT 0
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 0
53453: PUSH
53454: LD_INT 1
53456: NEG
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 1
53464: PUSH
53465: LD_INT 0
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 1
53474: PUSH
53475: LD_INT 1
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 0
53484: PUSH
53485: LD_INT 1
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 1
53494: NEG
53495: PUSH
53496: LD_INT 0
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 1
53505: NEG
53506: PUSH
53507: LD_INT 1
53509: NEG
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53524: LD_ADDR_VAR 0 60
53528: PUSH
53529: LD_INT 0
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 0
53541: PUSH
53542: LD_INT 1
53544: NEG
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 1
53552: PUSH
53553: LD_INT 0
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 1
53562: PUSH
53563: LD_INT 1
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: LD_INT 1
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 1
53582: NEG
53583: PUSH
53584: LD_INT 0
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 1
53593: NEG
53594: PUSH
53595: LD_INT 1
53597: NEG
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53612: LD_ADDR_VAR 0 61
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: LD_INT 0
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 0
53629: PUSH
53630: LD_INT 1
53632: NEG
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 1
53640: PUSH
53641: LD_INT 0
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 1
53650: PUSH
53651: LD_INT 1
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: LD_INT 1
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 1
53670: NEG
53671: PUSH
53672: LD_INT 0
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 1
53681: NEG
53682: PUSH
53683: LD_INT 1
53685: NEG
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53700: LD_ADDR_VAR 0 62
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: LD_INT 0
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: LD_INT 1
53720: NEG
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 1
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 1
53738: PUSH
53739: LD_INT 1
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 0
53748: PUSH
53749: LD_INT 1
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 1
53758: NEG
53759: PUSH
53760: LD_INT 0
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 1
53769: NEG
53770: PUSH
53771: LD_INT 1
53773: NEG
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53788: LD_ADDR_VAR 0 63
53792: PUSH
53793: LD_INT 0
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 0
53805: PUSH
53806: LD_INT 1
53808: NEG
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 1
53816: PUSH
53817: LD_INT 0
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 1
53826: PUSH
53827: LD_INT 1
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 0
53836: PUSH
53837: LD_INT 1
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 1
53846: NEG
53847: PUSH
53848: LD_INT 0
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 1
53857: NEG
53858: PUSH
53859: LD_INT 1
53861: NEG
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53876: LD_ADDR_VAR 0 64
53880: PUSH
53881: LD_INT 0
53883: PUSH
53884: LD_INT 0
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 0
53893: PUSH
53894: LD_INT 1
53896: NEG
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 1
53904: PUSH
53905: LD_INT 0
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 1
53914: PUSH
53915: LD_INT 1
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 0
53924: PUSH
53925: LD_INT 1
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 1
53934: NEG
53935: PUSH
53936: LD_INT 0
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 1
53945: NEG
53946: PUSH
53947: LD_INT 1
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: ST_TO_ADDR
// end ; 1 :
53964: GO 59861
53966: LD_INT 1
53968: DOUBLE
53969: EQUAL
53970: IFTRUE 53974
53972: GO 56597
53974: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53975: LD_ADDR_VAR 0 11
53979: PUSH
53980: LD_INT 1
53982: NEG
53983: PUSH
53984: LD_INT 3
53986: NEG
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 0
53994: PUSH
53995: LD_INT 3
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 1
54005: PUSH
54006: LD_INT 2
54008: NEG
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: LIST
54018: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54019: LD_ADDR_VAR 0 12
54023: PUSH
54024: LD_INT 2
54026: PUSH
54027: LD_INT 1
54029: NEG
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 3
54037: PUSH
54038: LD_INT 0
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 3
54047: PUSH
54048: LD_INT 1
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: LIST
54059: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54060: LD_ADDR_VAR 0 13
54064: PUSH
54065: LD_INT 3
54067: PUSH
54068: LD_INT 2
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 3
54077: PUSH
54078: LD_INT 3
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 2
54087: PUSH
54088: LD_INT 3
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: LIST
54099: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54100: LD_ADDR_VAR 0 14
54104: PUSH
54105: LD_INT 1
54107: PUSH
54108: LD_INT 3
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 0
54117: PUSH
54118: LD_INT 3
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 1
54127: NEG
54128: PUSH
54129: LD_INT 2
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: LIST
54140: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54141: LD_ADDR_VAR 0 15
54145: PUSH
54146: LD_INT 2
54148: NEG
54149: PUSH
54150: LD_INT 1
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 3
54159: NEG
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 3
54170: NEG
54171: PUSH
54172: LD_INT 1
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: LIST
54184: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54185: LD_ADDR_VAR 0 16
54189: PUSH
54190: LD_INT 2
54192: NEG
54193: PUSH
54194: LD_INT 3
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 3
54204: NEG
54205: PUSH
54206: LD_INT 2
54208: NEG
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 3
54216: NEG
54217: PUSH
54218: LD_INT 3
54220: NEG
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: LIST
54230: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54231: LD_ADDR_VAR 0 17
54235: PUSH
54236: LD_INT 1
54238: NEG
54239: PUSH
54240: LD_INT 3
54242: NEG
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: LD_INT 3
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 1
54261: PUSH
54262: LD_INT 2
54264: NEG
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: LIST
54274: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54275: LD_ADDR_VAR 0 18
54279: PUSH
54280: LD_INT 2
54282: PUSH
54283: LD_INT 1
54285: NEG
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 3
54293: PUSH
54294: LD_INT 0
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 3
54303: PUSH
54304: LD_INT 1
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: LIST
54315: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54316: LD_ADDR_VAR 0 19
54320: PUSH
54321: LD_INT 3
54323: PUSH
54324: LD_INT 2
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 3
54333: PUSH
54334: LD_INT 3
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 2
54343: PUSH
54344: LD_INT 3
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: LIST
54355: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54356: LD_ADDR_VAR 0 20
54360: PUSH
54361: LD_INT 1
54363: PUSH
54364: LD_INT 3
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 0
54373: PUSH
54374: LD_INT 3
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 1
54383: NEG
54384: PUSH
54385: LD_INT 2
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: LIST
54396: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54397: LD_ADDR_VAR 0 21
54401: PUSH
54402: LD_INT 2
54404: NEG
54405: PUSH
54406: LD_INT 1
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 3
54415: NEG
54416: PUSH
54417: LD_INT 0
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 3
54426: NEG
54427: PUSH
54428: LD_INT 1
54430: NEG
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: LIST
54440: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54441: LD_ADDR_VAR 0 22
54445: PUSH
54446: LD_INT 2
54448: NEG
54449: PUSH
54450: LD_INT 3
54452: NEG
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 3
54460: NEG
54461: PUSH
54462: LD_INT 2
54464: NEG
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 3
54472: NEG
54473: PUSH
54474: LD_INT 3
54476: NEG
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: LIST
54486: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54487: LD_ADDR_VAR 0 23
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: LD_INT 3
54497: NEG
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: LD_INT 4
54509: NEG
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 1
54517: PUSH
54518: LD_INT 3
54520: NEG
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: LIST
54530: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54531: LD_ADDR_VAR 0 24
54535: PUSH
54536: LD_INT 3
54538: PUSH
54539: LD_INT 0
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 3
54548: PUSH
54549: LD_INT 1
54551: NEG
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 4
54559: PUSH
54560: LD_INT 1
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: LIST
54571: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54572: LD_ADDR_VAR 0 25
54576: PUSH
54577: LD_INT 3
54579: PUSH
54580: LD_INT 3
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 4
54589: PUSH
54590: LD_INT 3
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 3
54599: PUSH
54600: LD_INT 4
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: LIST
54611: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54612: LD_ADDR_VAR 0 26
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: LD_INT 3
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 1
54629: PUSH
54630: LD_INT 4
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 1
54639: NEG
54640: PUSH
54641: LD_INT 3
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: LIST
54652: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54653: LD_ADDR_VAR 0 27
54657: PUSH
54658: LD_INT 3
54660: NEG
54661: PUSH
54662: LD_INT 0
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 3
54671: NEG
54672: PUSH
54673: LD_INT 1
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 4
54682: NEG
54683: PUSH
54684: LD_INT 1
54686: NEG
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: LIST
54696: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54697: LD_ADDR_VAR 0 28
54701: PUSH
54702: LD_INT 3
54704: NEG
54705: PUSH
54706: LD_INT 3
54708: NEG
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 3
54716: NEG
54717: PUSH
54718: LD_INT 4
54720: NEG
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 4
54728: NEG
54729: PUSH
54730: LD_INT 3
54732: NEG
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: LIST
54742: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54743: LD_ADDR_VAR 0 29
54747: PUSH
54748: LD_INT 1
54750: NEG
54751: PUSH
54752: LD_INT 3
54754: NEG
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 0
54762: PUSH
54763: LD_INT 3
54765: NEG
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 1
54773: PUSH
54774: LD_INT 2
54776: NEG
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 1
54784: NEG
54785: PUSH
54786: LD_INT 4
54788: NEG
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 0
54796: PUSH
54797: LD_INT 4
54799: NEG
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 1
54807: PUSH
54808: LD_INT 3
54810: NEG
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 1
54818: NEG
54819: PUSH
54820: LD_INT 5
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 0
54830: PUSH
54831: LD_INT 5
54833: NEG
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 1
54841: PUSH
54842: LD_INT 4
54844: NEG
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 1
54852: NEG
54853: PUSH
54854: LD_INT 6
54856: NEG
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 0
54864: PUSH
54865: LD_INT 6
54867: NEG
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 1
54875: PUSH
54876: LD_INT 5
54878: NEG
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54898: LD_ADDR_VAR 0 30
54902: PUSH
54903: LD_INT 2
54905: PUSH
54906: LD_INT 1
54908: NEG
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 3
54916: PUSH
54917: LD_INT 0
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 3
54926: PUSH
54927: LD_INT 1
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 3
54936: PUSH
54937: LD_INT 1
54939: NEG
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 4
54947: PUSH
54948: LD_INT 0
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 4
54957: PUSH
54958: LD_INT 1
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 4
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 5
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 5
54988: PUSH
54989: LD_INT 1
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 5
54998: PUSH
54999: LD_INT 1
55001: NEG
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 6
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 6
55019: PUSH
55020: LD_INT 1
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55041: LD_ADDR_VAR 0 31
55045: PUSH
55046: LD_INT 3
55048: PUSH
55049: LD_INT 2
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 3
55058: PUSH
55059: LD_INT 3
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 2
55068: PUSH
55069: LD_INT 3
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 4
55078: PUSH
55079: LD_INT 3
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 4
55088: PUSH
55089: LD_INT 4
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 3
55098: PUSH
55099: LD_INT 4
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 5
55108: PUSH
55109: LD_INT 4
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 5
55118: PUSH
55119: LD_INT 5
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 4
55128: PUSH
55129: LD_INT 5
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 6
55138: PUSH
55139: LD_INT 5
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 6
55148: PUSH
55149: LD_INT 6
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 5
55158: PUSH
55159: LD_INT 6
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55180: LD_ADDR_VAR 0 32
55184: PUSH
55185: LD_INT 1
55187: PUSH
55188: LD_INT 3
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 0
55197: PUSH
55198: LD_INT 3
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 1
55207: NEG
55208: PUSH
55209: LD_INT 2
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 1
55218: PUSH
55219: LD_INT 4
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 0
55228: PUSH
55229: LD_INT 4
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 1
55238: NEG
55239: PUSH
55240: LD_INT 3
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: PUSH
55250: LD_INT 5
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: LD_INT 5
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 1
55269: NEG
55270: PUSH
55271: LD_INT 4
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 1
55280: PUSH
55281: LD_INT 6
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 0
55290: PUSH
55291: LD_INT 6
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 1
55300: NEG
55301: PUSH
55302: LD_INT 5
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55323: LD_ADDR_VAR 0 33
55327: PUSH
55328: LD_INT 2
55330: NEG
55331: PUSH
55332: LD_INT 1
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 3
55341: NEG
55342: PUSH
55343: LD_INT 0
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 3
55352: NEG
55353: PUSH
55354: LD_INT 1
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 3
55364: NEG
55365: PUSH
55366: LD_INT 1
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 4
55375: NEG
55376: PUSH
55377: LD_INT 0
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 4
55386: NEG
55387: PUSH
55388: LD_INT 1
55390: NEG
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 4
55398: NEG
55399: PUSH
55400: LD_INT 1
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 5
55409: NEG
55410: PUSH
55411: LD_INT 0
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 5
55420: NEG
55421: PUSH
55422: LD_INT 1
55424: NEG
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 5
55432: NEG
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 6
55443: NEG
55444: PUSH
55445: LD_INT 0
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 6
55454: NEG
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55478: LD_ADDR_VAR 0 34
55482: PUSH
55483: LD_INT 2
55485: NEG
55486: PUSH
55487: LD_INT 3
55489: NEG
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 3
55497: NEG
55498: PUSH
55499: LD_INT 2
55501: NEG
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 3
55509: NEG
55510: PUSH
55511: LD_INT 3
55513: NEG
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 3
55521: NEG
55522: PUSH
55523: LD_INT 4
55525: NEG
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 4
55533: NEG
55534: PUSH
55535: LD_INT 3
55537: NEG
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 4
55545: NEG
55546: PUSH
55547: LD_INT 4
55549: NEG
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 4
55557: NEG
55558: PUSH
55559: LD_INT 5
55561: NEG
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 5
55569: NEG
55570: PUSH
55571: LD_INT 4
55573: NEG
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 5
55581: NEG
55582: PUSH
55583: LD_INT 5
55585: NEG
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 5
55593: NEG
55594: PUSH
55595: LD_INT 6
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 6
55605: NEG
55606: PUSH
55607: LD_INT 5
55609: NEG
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 6
55617: NEG
55618: PUSH
55619: LD_INT 6
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55641: LD_ADDR_VAR 0 41
55645: PUSH
55646: LD_INT 0
55648: PUSH
55649: LD_INT 2
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 1
55659: NEG
55660: PUSH
55661: LD_INT 3
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 1
55671: PUSH
55672: LD_INT 2
55674: NEG
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: LIST
55684: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55685: LD_ADDR_VAR 0 42
55689: PUSH
55690: LD_INT 2
55692: PUSH
55693: LD_INT 0
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 2
55702: PUSH
55703: LD_INT 1
55705: NEG
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 3
55713: PUSH
55714: LD_INT 1
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: LIST
55725: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55726: LD_ADDR_VAR 0 43
55730: PUSH
55731: LD_INT 2
55733: PUSH
55734: LD_INT 2
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 3
55743: PUSH
55744: LD_INT 2
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 2
55753: PUSH
55754: LD_INT 3
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: LIST
55765: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55766: LD_ADDR_VAR 0 44
55770: PUSH
55771: LD_INT 0
55773: PUSH
55774: LD_INT 2
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 1
55783: PUSH
55784: LD_INT 3
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 1
55793: NEG
55794: PUSH
55795: LD_INT 2
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: LIST
55806: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55807: LD_ADDR_VAR 0 45
55811: PUSH
55812: LD_INT 2
55814: NEG
55815: PUSH
55816: LD_INT 0
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 2
55825: NEG
55826: PUSH
55827: LD_INT 1
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 3
55836: NEG
55837: PUSH
55838: LD_INT 1
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: LIST
55850: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55851: LD_ADDR_VAR 0 46
55855: PUSH
55856: LD_INT 2
55858: NEG
55859: PUSH
55860: LD_INT 2
55862: NEG
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 2
55870: NEG
55871: PUSH
55872: LD_INT 3
55874: NEG
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 3
55882: NEG
55883: PUSH
55884: LD_INT 2
55886: NEG
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: LIST
55896: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55897: LD_ADDR_VAR 0 47
55901: PUSH
55902: LD_INT 2
55904: NEG
55905: PUSH
55906: LD_INT 3
55908: NEG
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 1
55916: NEG
55917: PUSH
55918: LD_INT 3
55920: NEG
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55930: LD_ADDR_VAR 0 48
55934: PUSH
55935: LD_INT 1
55937: PUSH
55938: LD_INT 2
55940: NEG
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 2
55948: PUSH
55949: LD_INT 1
55951: NEG
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55961: LD_ADDR_VAR 0 49
55965: PUSH
55966: LD_INT 3
55968: PUSH
55969: LD_INT 1
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 3
55978: PUSH
55979: LD_INT 2
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55990: LD_ADDR_VAR 0 50
55994: PUSH
55995: LD_INT 2
55997: PUSH
55998: LD_INT 3
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 1
56007: PUSH
56008: LD_INT 3
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56019: LD_ADDR_VAR 0 51
56023: PUSH
56024: LD_INT 1
56026: NEG
56027: PUSH
56028: LD_INT 2
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 2
56037: NEG
56038: PUSH
56039: LD_INT 1
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56050: LD_ADDR_VAR 0 52
56054: PUSH
56055: LD_INT 3
56057: NEG
56058: PUSH
56059: LD_INT 1
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 3
56069: NEG
56070: PUSH
56071: LD_INT 2
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56083: LD_ADDR_VAR 0 53
56087: PUSH
56088: LD_INT 1
56090: NEG
56091: PUSH
56092: LD_INT 3
56094: NEG
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 0
56102: PUSH
56103: LD_INT 3
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 1
56113: PUSH
56114: LD_INT 2
56116: NEG
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: LIST
56126: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56127: LD_ADDR_VAR 0 54
56131: PUSH
56132: LD_INT 2
56134: PUSH
56135: LD_INT 1
56137: NEG
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 3
56145: PUSH
56146: LD_INT 0
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 3
56155: PUSH
56156: LD_INT 1
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: LIST
56167: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56168: LD_ADDR_VAR 0 55
56172: PUSH
56173: LD_INT 3
56175: PUSH
56176: LD_INT 2
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 3
56185: PUSH
56186: LD_INT 3
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 2
56195: PUSH
56196: LD_INT 3
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: LIST
56207: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56208: LD_ADDR_VAR 0 56
56212: PUSH
56213: LD_INT 1
56215: PUSH
56216: LD_INT 3
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 0
56225: PUSH
56226: LD_INT 3
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 1
56235: NEG
56236: PUSH
56237: LD_INT 2
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: LIST
56248: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56249: LD_ADDR_VAR 0 57
56253: PUSH
56254: LD_INT 2
56256: NEG
56257: PUSH
56258: LD_INT 1
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 3
56267: NEG
56268: PUSH
56269: LD_INT 0
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 3
56278: NEG
56279: PUSH
56280: LD_INT 1
56282: NEG
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: LIST
56292: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56293: LD_ADDR_VAR 0 58
56297: PUSH
56298: LD_INT 2
56300: NEG
56301: PUSH
56302: LD_INT 3
56304: NEG
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 3
56312: NEG
56313: PUSH
56314: LD_INT 2
56316: NEG
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 3
56324: NEG
56325: PUSH
56326: LD_INT 3
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: LIST
56338: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56339: LD_ADDR_VAR 0 59
56343: PUSH
56344: LD_INT 1
56346: NEG
56347: PUSH
56348: LD_INT 2
56350: NEG
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 0
56358: PUSH
56359: LD_INT 2
56361: NEG
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 1
56369: PUSH
56370: LD_INT 1
56372: NEG
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: LIST
56382: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56383: LD_ADDR_VAR 0 60
56387: PUSH
56388: LD_INT 1
56390: PUSH
56391: LD_INT 1
56393: NEG
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 2
56401: PUSH
56402: LD_INT 0
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 2
56411: PUSH
56412: LD_INT 1
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: LIST
56423: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56424: LD_ADDR_VAR 0 61
56428: PUSH
56429: LD_INT 2
56431: PUSH
56432: LD_INT 1
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 2
56441: PUSH
56442: LD_INT 2
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 1
56451: PUSH
56452: LD_INT 2
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: LIST
56463: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56464: LD_ADDR_VAR 0 62
56468: PUSH
56469: LD_INT 1
56471: PUSH
56472: LD_INT 2
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 0
56481: PUSH
56482: LD_INT 2
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 1
56491: NEG
56492: PUSH
56493: LD_INT 1
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: LIST
56504: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56505: LD_ADDR_VAR 0 63
56509: PUSH
56510: LD_INT 1
56512: NEG
56513: PUSH
56514: LD_INT 1
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 2
56523: NEG
56524: PUSH
56525: LD_INT 0
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 2
56534: NEG
56535: PUSH
56536: LD_INT 1
56538: NEG
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: LIST
56548: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56549: LD_ADDR_VAR 0 64
56553: PUSH
56554: LD_INT 1
56556: NEG
56557: PUSH
56558: LD_INT 2
56560: NEG
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 2
56568: NEG
56569: PUSH
56570: LD_INT 1
56572: NEG
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 2
56580: NEG
56581: PUSH
56582: LD_INT 2
56584: NEG
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: LIST
56594: ST_TO_ADDR
// end ; 2 :
56595: GO 59861
56597: LD_INT 2
56599: DOUBLE
56600: EQUAL
56601: IFTRUE 56605
56603: GO 59860
56605: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56606: LD_ADDR_VAR 0 29
56610: PUSH
56611: LD_INT 4
56613: PUSH
56614: LD_INT 0
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 4
56623: PUSH
56624: LD_INT 1
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 5
56634: PUSH
56635: LD_INT 0
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 5
56644: PUSH
56645: LD_INT 1
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 4
56654: PUSH
56655: LD_INT 1
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 3
56664: PUSH
56665: LD_INT 0
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 3
56674: PUSH
56675: LD_INT 1
56677: NEG
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 3
56685: PUSH
56686: LD_INT 2
56688: NEG
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 5
56696: PUSH
56697: LD_INT 2
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 3
56706: PUSH
56707: LD_INT 3
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 3
56716: PUSH
56717: LD_INT 2
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 4
56726: PUSH
56727: LD_INT 3
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 4
56736: PUSH
56737: LD_INT 4
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 3
56746: PUSH
56747: LD_INT 4
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 2
56756: PUSH
56757: LD_INT 3
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 2
56766: PUSH
56767: LD_INT 2
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 4
56776: PUSH
56777: LD_INT 2
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 2
56786: PUSH
56787: LD_INT 4
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 0
56796: PUSH
56797: LD_INT 4
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 0
56806: PUSH
56807: LD_INT 3
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 1
56816: PUSH
56817: LD_INT 4
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 1
56826: PUSH
56827: LD_INT 5
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 0
56836: PUSH
56837: LD_INT 5
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 1
56846: NEG
56847: PUSH
56848: LD_INT 4
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 1
56857: NEG
56858: PUSH
56859: LD_INT 3
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 2
56868: PUSH
56869: LD_INT 5
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 2
56878: NEG
56879: PUSH
56880: LD_INT 3
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 3
56889: NEG
56890: PUSH
56891: LD_INT 0
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 3
56900: NEG
56901: PUSH
56902: LD_INT 1
56904: NEG
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 2
56912: NEG
56913: PUSH
56914: LD_INT 0
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 2
56923: NEG
56924: PUSH
56925: LD_INT 1
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 3
56934: NEG
56935: PUSH
56936: LD_INT 1
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 4
56945: NEG
56946: PUSH
56947: LD_INT 0
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 4
56956: NEG
56957: PUSH
56958: LD_INT 1
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 4
56968: NEG
56969: PUSH
56970: LD_INT 2
56972: NEG
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 2
56980: NEG
56981: PUSH
56982: LD_INT 2
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 4
56991: NEG
56992: PUSH
56993: LD_INT 4
56995: NEG
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 4
57003: NEG
57004: PUSH
57005: LD_INT 5
57007: NEG
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 3
57015: NEG
57016: PUSH
57017: LD_INT 4
57019: NEG
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 3
57027: NEG
57028: PUSH
57029: LD_INT 3
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 4
57039: NEG
57040: PUSH
57041: LD_INT 3
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 5
57051: NEG
57052: PUSH
57053: LD_INT 4
57055: NEG
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 5
57063: NEG
57064: PUSH
57065: LD_INT 5
57067: NEG
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 3
57075: NEG
57076: PUSH
57077: LD_INT 5
57079: NEG
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 5
57087: NEG
57088: PUSH
57089: LD_INT 3
57091: NEG
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57144: LD_ADDR_VAR 0 30
57148: PUSH
57149: LD_INT 4
57151: PUSH
57152: LD_INT 4
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 4
57161: PUSH
57162: LD_INT 3
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 5
57171: PUSH
57172: LD_INT 4
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 5
57181: PUSH
57182: LD_INT 5
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 4
57191: PUSH
57192: LD_INT 5
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 3
57201: PUSH
57202: LD_INT 4
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 3
57211: PUSH
57212: LD_INT 3
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 5
57221: PUSH
57222: LD_INT 3
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 3
57231: PUSH
57232: LD_INT 5
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 0
57241: PUSH
57242: LD_INT 3
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 0
57251: PUSH
57252: LD_INT 2
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 1
57261: PUSH
57262: LD_INT 3
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 1
57271: PUSH
57272: LD_INT 4
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 0
57281: PUSH
57282: LD_INT 4
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 1
57291: NEG
57292: PUSH
57293: LD_INT 3
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 1
57302: NEG
57303: PUSH
57304: LD_INT 2
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 2
57313: PUSH
57314: LD_INT 4
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 2
57323: NEG
57324: PUSH
57325: LD_INT 2
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 4
57334: NEG
57335: PUSH
57336: LD_INT 0
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 4
57345: NEG
57346: PUSH
57347: LD_INT 1
57349: NEG
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 3
57357: NEG
57358: PUSH
57359: LD_INT 0
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 3
57368: NEG
57369: PUSH
57370: LD_INT 1
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 4
57379: NEG
57380: PUSH
57381: LD_INT 1
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 5
57390: NEG
57391: PUSH
57392: LD_INT 0
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 5
57401: NEG
57402: PUSH
57403: LD_INT 1
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 5
57413: NEG
57414: PUSH
57415: LD_INT 2
57417: NEG
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 3
57425: NEG
57426: PUSH
57427: LD_INT 2
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 3
57436: NEG
57437: PUSH
57438: LD_INT 3
57440: NEG
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 3
57448: NEG
57449: PUSH
57450: LD_INT 4
57452: NEG
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 2
57460: NEG
57461: PUSH
57462: LD_INT 3
57464: NEG
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 2
57472: NEG
57473: PUSH
57474: LD_INT 2
57476: NEG
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 3
57484: NEG
57485: PUSH
57486: LD_INT 2
57488: NEG
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 4
57496: NEG
57497: PUSH
57498: LD_INT 3
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 4
57508: NEG
57509: PUSH
57510: LD_INT 4
57512: NEG
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 2
57520: NEG
57521: PUSH
57522: LD_INT 4
57524: NEG
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 4
57532: NEG
57533: PUSH
57534: LD_INT 2
57536: NEG
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 0
57544: PUSH
57545: LD_INT 4
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: LD_INT 5
57558: NEG
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: PUSH
57567: LD_INT 4
57569: NEG
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 1
57577: PUSH
57578: LD_INT 3
57580: NEG
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 0
57588: PUSH
57589: LD_INT 3
57591: NEG
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: LD_INT 4
57603: NEG
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 1
57611: NEG
57612: PUSH
57613: LD_INT 5
57615: NEG
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 2
57623: PUSH
57624: LD_INT 3
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 2
57634: NEG
57635: PUSH
57636: LD_INT 5
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57691: LD_ADDR_VAR 0 31
57695: PUSH
57696: LD_INT 0
57698: PUSH
57699: LD_INT 4
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 0
57708: PUSH
57709: LD_INT 3
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 1
57718: PUSH
57719: LD_INT 4
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 1
57728: PUSH
57729: LD_INT 5
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 0
57738: PUSH
57739: LD_INT 5
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 1
57748: NEG
57749: PUSH
57750: LD_INT 4
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 1
57759: NEG
57760: PUSH
57761: LD_INT 3
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 2
57770: PUSH
57771: LD_INT 5
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 2
57780: NEG
57781: PUSH
57782: LD_INT 3
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 3
57791: NEG
57792: PUSH
57793: LD_INT 0
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 3
57802: NEG
57803: PUSH
57804: LD_INT 1
57806: NEG
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 2
57814: NEG
57815: PUSH
57816: LD_INT 0
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 2
57825: NEG
57826: PUSH
57827: LD_INT 1
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 3
57836: NEG
57837: PUSH
57838: LD_INT 1
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 4
57847: NEG
57848: PUSH
57849: LD_INT 0
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 4
57858: NEG
57859: PUSH
57860: LD_INT 1
57862: NEG
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 4
57870: NEG
57871: PUSH
57872: LD_INT 2
57874: NEG
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 2
57882: NEG
57883: PUSH
57884: LD_INT 2
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 4
57893: NEG
57894: PUSH
57895: LD_INT 4
57897: NEG
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 4
57905: NEG
57906: PUSH
57907: LD_INT 5
57909: NEG
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 3
57917: NEG
57918: PUSH
57919: LD_INT 4
57921: NEG
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 3
57929: NEG
57930: PUSH
57931: LD_INT 3
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 4
57941: NEG
57942: PUSH
57943: LD_INT 3
57945: NEG
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 5
57953: NEG
57954: PUSH
57955: LD_INT 4
57957: NEG
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 5
57965: NEG
57966: PUSH
57967: LD_INT 5
57969: NEG
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 3
57977: NEG
57978: PUSH
57979: LD_INT 5
57981: NEG
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 5
57989: NEG
57990: PUSH
57991: LD_INT 3
57993: NEG
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 0
58001: PUSH
58002: LD_INT 3
58004: NEG
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 0
58012: PUSH
58013: LD_INT 4
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 1
58023: PUSH
58024: LD_INT 3
58026: NEG
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 1
58034: PUSH
58035: LD_INT 2
58037: NEG
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 0
58045: PUSH
58046: LD_INT 2
58048: NEG
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 1
58056: NEG
58057: PUSH
58058: LD_INT 3
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 1
58068: NEG
58069: PUSH
58070: LD_INT 4
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 2
58080: PUSH
58081: LD_INT 2
58083: NEG
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 2
58091: NEG
58092: PUSH
58093: LD_INT 4
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 4
58103: PUSH
58104: LD_INT 0
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 4
58113: PUSH
58114: LD_INT 1
58116: NEG
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 5
58124: PUSH
58125: LD_INT 0
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 5
58134: PUSH
58135: LD_INT 1
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 4
58144: PUSH
58145: LD_INT 1
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 3
58154: PUSH
58155: LD_INT 0
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 3
58164: PUSH
58165: LD_INT 1
58167: NEG
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 3
58175: PUSH
58176: LD_INT 2
58178: NEG
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 5
58186: PUSH
58187: LD_INT 2
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58241: LD_ADDR_VAR 0 32
58245: PUSH
58246: LD_INT 4
58248: NEG
58249: PUSH
58250: LD_INT 0
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 4
58259: NEG
58260: PUSH
58261: LD_INT 1
58263: NEG
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 3
58271: NEG
58272: PUSH
58273: LD_INT 0
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 3
58282: NEG
58283: PUSH
58284: LD_INT 1
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 4
58293: NEG
58294: PUSH
58295: LD_INT 1
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 5
58304: NEG
58305: PUSH
58306: LD_INT 0
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 5
58315: NEG
58316: PUSH
58317: LD_INT 1
58319: NEG
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 5
58327: NEG
58328: PUSH
58329: LD_INT 2
58331: NEG
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 3
58339: NEG
58340: PUSH
58341: LD_INT 2
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 3
58350: NEG
58351: PUSH
58352: LD_INT 3
58354: NEG
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 3
58362: NEG
58363: PUSH
58364: LD_INT 4
58366: NEG
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 2
58374: NEG
58375: PUSH
58376: LD_INT 3
58378: NEG
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 2
58386: NEG
58387: PUSH
58388: LD_INT 2
58390: NEG
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 3
58398: NEG
58399: PUSH
58400: LD_INT 2
58402: NEG
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 4
58410: NEG
58411: PUSH
58412: LD_INT 3
58414: NEG
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 4
58422: NEG
58423: PUSH
58424: LD_INT 4
58426: NEG
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 2
58434: NEG
58435: PUSH
58436: LD_INT 4
58438: NEG
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 4
58446: NEG
58447: PUSH
58448: LD_INT 2
58450: NEG
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 0
58458: PUSH
58459: LD_INT 4
58461: NEG
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 0
58469: PUSH
58470: LD_INT 5
58472: NEG
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 1
58480: PUSH
58481: LD_INT 4
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 1
58491: PUSH
58492: LD_INT 3
58494: NEG
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: LD_INT 0
58502: PUSH
58503: LD_INT 3
58505: NEG
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 1
58513: NEG
58514: PUSH
58515: LD_INT 4
58517: NEG
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 1
58525: NEG
58526: PUSH
58527: LD_INT 5
58529: NEG
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 2
58537: PUSH
58538: LD_INT 3
58540: NEG
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 2
58548: NEG
58549: PUSH
58550: LD_INT 5
58552: NEG
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 3
58560: PUSH
58561: LD_INT 0
58563: PUSH
58564: EMPTY
58565: LIST
58566: LIST
58567: PUSH
58568: LD_INT 3
58570: PUSH
58571: LD_INT 1
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 4
58581: PUSH
58582: LD_INT 0
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 4
58591: PUSH
58592: LD_INT 1
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 3
58601: PUSH
58602: LD_INT 1
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 2
58611: PUSH
58612: LD_INT 0
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 2
58621: PUSH
58622: LD_INT 1
58624: NEG
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 2
58632: PUSH
58633: LD_INT 2
58635: NEG
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 4
58643: PUSH
58644: LD_INT 2
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 4
58653: PUSH
58654: LD_INT 4
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 4
58663: PUSH
58664: LD_INT 3
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 5
58673: PUSH
58674: LD_INT 4
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 5
58683: PUSH
58684: LD_INT 5
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 4
58693: PUSH
58694: LD_INT 5
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 3
58703: PUSH
58704: LD_INT 4
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 3
58713: PUSH
58714: LD_INT 3
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 5
58723: PUSH
58724: LD_INT 3
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 3
58733: PUSH
58734: LD_INT 5
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58788: LD_ADDR_VAR 0 33
58792: PUSH
58793: LD_INT 4
58795: NEG
58796: PUSH
58797: LD_INT 4
58799: NEG
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 4
58807: NEG
58808: PUSH
58809: LD_INT 5
58811: NEG
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 3
58819: NEG
58820: PUSH
58821: LD_INT 4
58823: NEG
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 3
58831: NEG
58832: PUSH
58833: LD_INT 3
58835: NEG
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 4
58843: NEG
58844: PUSH
58845: LD_INT 3
58847: NEG
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 5
58855: NEG
58856: PUSH
58857: LD_INT 4
58859: NEG
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 5
58867: NEG
58868: PUSH
58869: LD_INT 5
58871: NEG
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 3
58879: NEG
58880: PUSH
58881: LD_INT 5
58883: NEG
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 5
58891: NEG
58892: PUSH
58893: LD_INT 3
58895: NEG
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 0
58903: PUSH
58904: LD_INT 3
58906: NEG
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 0
58914: PUSH
58915: LD_INT 4
58917: NEG
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 1
58925: PUSH
58926: LD_INT 3
58928: NEG
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 1
58936: PUSH
58937: LD_INT 2
58939: NEG
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 0
58947: PUSH
58948: LD_INT 2
58950: NEG
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 1
58958: NEG
58959: PUSH
58960: LD_INT 3
58962: NEG
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 1
58970: NEG
58971: PUSH
58972: LD_INT 4
58974: NEG
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 2
58982: PUSH
58983: LD_INT 2
58985: NEG
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 2
58993: NEG
58994: PUSH
58995: LD_INT 4
58997: NEG
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 4
59005: PUSH
59006: LD_INT 0
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 4
59015: PUSH
59016: LD_INT 1
59018: NEG
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 5
59026: PUSH
59027: LD_INT 0
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 5
59036: PUSH
59037: LD_INT 1
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 4
59046: PUSH
59047: LD_INT 1
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 3
59056: PUSH
59057: LD_INT 0
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 3
59066: PUSH
59067: LD_INT 1
59069: NEG
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 3
59077: PUSH
59078: LD_INT 2
59080: NEG
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 5
59088: PUSH
59089: LD_INT 2
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 3
59098: PUSH
59099: LD_INT 3
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 3
59108: PUSH
59109: LD_INT 2
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 4
59118: PUSH
59119: LD_INT 3
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 4
59128: PUSH
59129: LD_INT 4
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 3
59138: PUSH
59139: LD_INT 4
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 2
59148: PUSH
59149: LD_INT 3
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 2
59158: PUSH
59159: LD_INT 2
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 4
59168: PUSH
59169: LD_INT 2
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 2
59178: PUSH
59179: LD_INT 4
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 0
59188: PUSH
59189: LD_INT 4
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 0
59198: PUSH
59199: LD_INT 3
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 1
59208: PUSH
59209: LD_INT 4
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 1
59218: PUSH
59219: LD_INT 5
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 0
59228: PUSH
59229: LD_INT 5
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 1
59238: NEG
59239: PUSH
59240: LD_INT 4
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 1
59249: NEG
59250: PUSH
59251: LD_INT 3
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 2
59260: PUSH
59261: LD_INT 5
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 2
59270: NEG
59271: PUSH
59272: LD_INT 3
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59326: LD_ADDR_VAR 0 34
59330: PUSH
59331: LD_INT 0
59333: PUSH
59334: LD_INT 4
59336: NEG
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 0
59344: PUSH
59345: LD_INT 5
59347: NEG
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 1
59355: PUSH
59356: LD_INT 4
59358: NEG
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 1
59366: PUSH
59367: LD_INT 3
59369: NEG
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 0
59377: PUSH
59378: LD_INT 3
59380: NEG
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 1
59388: NEG
59389: PUSH
59390: LD_INT 4
59392: NEG
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 1
59400: NEG
59401: PUSH
59402: LD_INT 5
59404: NEG
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 2
59412: PUSH
59413: LD_INT 3
59415: NEG
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 2
59423: NEG
59424: PUSH
59425: LD_INT 5
59427: NEG
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 3
59435: PUSH
59436: LD_INT 0
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 3
59445: PUSH
59446: LD_INT 1
59448: NEG
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 4
59456: PUSH
59457: LD_INT 0
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 4
59466: PUSH
59467: LD_INT 1
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 3
59476: PUSH
59477: LD_INT 1
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 2
59486: PUSH
59487: LD_INT 0
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 2
59496: PUSH
59497: LD_INT 1
59499: NEG
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 2
59507: PUSH
59508: LD_INT 2
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 4
59518: PUSH
59519: LD_INT 2
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 4
59528: PUSH
59529: LD_INT 4
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 4
59538: PUSH
59539: LD_INT 3
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 5
59548: PUSH
59549: LD_INT 4
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 5
59558: PUSH
59559: LD_INT 5
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 4
59568: PUSH
59569: LD_INT 5
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 3
59578: PUSH
59579: LD_INT 4
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 3
59588: PUSH
59589: LD_INT 3
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 5
59598: PUSH
59599: LD_INT 3
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 3
59608: PUSH
59609: LD_INT 5
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 0
59618: PUSH
59619: LD_INT 3
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 0
59628: PUSH
59629: LD_INT 2
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 1
59638: PUSH
59639: LD_INT 3
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 1
59648: PUSH
59649: LD_INT 4
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 0
59658: PUSH
59659: LD_INT 4
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 1
59668: NEG
59669: PUSH
59670: LD_INT 3
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 1
59679: NEG
59680: PUSH
59681: LD_INT 2
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 2
59690: PUSH
59691: LD_INT 4
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 2
59700: NEG
59701: PUSH
59702: LD_INT 2
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 4
59711: NEG
59712: PUSH
59713: LD_INT 0
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 4
59722: NEG
59723: PUSH
59724: LD_INT 1
59726: NEG
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 3
59734: NEG
59735: PUSH
59736: LD_INT 0
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 3
59745: NEG
59746: PUSH
59747: LD_INT 1
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 4
59756: NEG
59757: PUSH
59758: LD_INT 1
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 5
59767: NEG
59768: PUSH
59769: LD_INT 0
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 5
59778: NEG
59779: PUSH
59780: LD_INT 1
59782: NEG
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 5
59790: NEG
59791: PUSH
59792: LD_INT 2
59794: NEG
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 3
59802: NEG
59803: PUSH
59804: LD_INT 2
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: ST_TO_ADDR
// end ; end ;
59858: GO 59861
59860: POP
// case btype of b_depot , b_warehouse :
59861: LD_VAR 0 1
59865: PUSH
59866: LD_INT 0
59868: DOUBLE
59869: EQUAL
59870: IFTRUE 59880
59872: LD_INT 1
59874: DOUBLE
59875: EQUAL
59876: IFTRUE 59880
59878: GO 60081
59880: POP
// case nation of nation_american :
59881: LD_VAR 0 5
59885: PUSH
59886: LD_INT 1
59888: DOUBLE
59889: EQUAL
59890: IFTRUE 59894
59892: GO 59950
59894: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59895: LD_ADDR_VAR 0 9
59899: PUSH
59900: LD_VAR 0 11
59904: PUSH
59905: LD_VAR 0 12
59909: PUSH
59910: LD_VAR 0 13
59914: PUSH
59915: LD_VAR 0 14
59919: PUSH
59920: LD_VAR 0 15
59924: PUSH
59925: LD_VAR 0 16
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: PUSH
59938: LD_VAR 0 4
59942: PUSH
59943: LD_INT 1
59945: PLUS
59946: ARRAY
59947: ST_TO_ADDR
59948: GO 60079
59950: LD_INT 2
59952: DOUBLE
59953: EQUAL
59954: IFTRUE 59958
59956: GO 60014
59958: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59959: LD_ADDR_VAR 0 9
59963: PUSH
59964: LD_VAR 0 17
59968: PUSH
59969: LD_VAR 0 18
59973: PUSH
59974: LD_VAR 0 19
59978: PUSH
59979: LD_VAR 0 20
59983: PUSH
59984: LD_VAR 0 21
59988: PUSH
59989: LD_VAR 0 22
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: PUSH
60002: LD_VAR 0 4
60006: PUSH
60007: LD_INT 1
60009: PLUS
60010: ARRAY
60011: ST_TO_ADDR
60012: GO 60079
60014: LD_INT 3
60016: DOUBLE
60017: EQUAL
60018: IFTRUE 60022
60020: GO 60078
60022: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60023: LD_ADDR_VAR 0 9
60027: PUSH
60028: LD_VAR 0 23
60032: PUSH
60033: LD_VAR 0 24
60037: PUSH
60038: LD_VAR 0 25
60042: PUSH
60043: LD_VAR 0 26
60047: PUSH
60048: LD_VAR 0 27
60052: PUSH
60053: LD_VAR 0 28
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: PUSH
60066: LD_VAR 0 4
60070: PUSH
60071: LD_INT 1
60073: PLUS
60074: ARRAY
60075: ST_TO_ADDR
60076: GO 60079
60078: POP
60079: GO 60634
60081: LD_INT 2
60083: DOUBLE
60084: EQUAL
60085: IFTRUE 60095
60087: LD_INT 3
60089: DOUBLE
60090: EQUAL
60091: IFTRUE 60095
60093: GO 60151
60095: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60096: LD_ADDR_VAR 0 9
60100: PUSH
60101: LD_VAR 0 29
60105: PUSH
60106: LD_VAR 0 30
60110: PUSH
60111: LD_VAR 0 31
60115: PUSH
60116: LD_VAR 0 32
60120: PUSH
60121: LD_VAR 0 33
60125: PUSH
60126: LD_VAR 0 34
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: PUSH
60139: LD_VAR 0 4
60143: PUSH
60144: LD_INT 1
60146: PLUS
60147: ARRAY
60148: ST_TO_ADDR
60149: GO 60634
60151: LD_INT 16
60153: DOUBLE
60154: EQUAL
60155: IFTRUE 60213
60157: LD_INT 17
60159: DOUBLE
60160: EQUAL
60161: IFTRUE 60213
60163: LD_INT 18
60165: DOUBLE
60166: EQUAL
60167: IFTRUE 60213
60169: LD_INT 19
60171: DOUBLE
60172: EQUAL
60173: IFTRUE 60213
60175: LD_INT 22
60177: DOUBLE
60178: EQUAL
60179: IFTRUE 60213
60181: LD_INT 20
60183: DOUBLE
60184: EQUAL
60185: IFTRUE 60213
60187: LD_INT 21
60189: DOUBLE
60190: EQUAL
60191: IFTRUE 60213
60193: LD_INT 23
60195: DOUBLE
60196: EQUAL
60197: IFTRUE 60213
60199: LD_INT 24
60201: DOUBLE
60202: EQUAL
60203: IFTRUE 60213
60205: LD_INT 25
60207: DOUBLE
60208: EQUAL
60209: IFTRUE 60213
60211: GO 60269
60213: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60214: LD_ADDR_VAR 0 9
60218: PUSH
60219: LD_VAR 0 35
60223: PUSH
60224: LD_VAR 0 36
60228: PUSH
60229: LD_VAR 0 37
60233: PUSH
60234: LD_VAR 0 38
60238: PUSH
60239: LD_VAR 0 39
60243: PUSH
60244: LD_VAR 0 40
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: PUSH
60257: LD_VAR 0 4
60261: PUSH
60262: LD_INT 1
60264: PLUS
60265: ARRAY
60266: ST_TO_ADDR
60267: GO 60634
60269: LD_INT 6
60271: DOUBLE
60272: EQUAL
60273: IFTRUE 60325
60275: LD_INT 7
60277: DOUBLE
60278: EQUAL
60279: IFTRUE 60325
60281: LD_INT 8
60283: DOUBLE
60284: EQUAL
60285: IFTRUE 60325
60287: LD_INT 13
60289: DOUBLE
60290: EQUAL
60291: IFTRUE 60325
60293: LD_INT 12
60295: DOUBLE
60296: EQUAL
60297: IFTRUE 60325
60299: LD_INT 15
60301: DOUBLE
60302: EQUAL
60303: IFTRUE 60325
60305: LD_INT 11
60307: DOUBLE
60308: EQUAL
60309: IFTRUE 60325
60311: LD_INT 14
60313: DOUBLE
60314: EQUAL
60315: IFTRUE 60325
60317: LD_INT 10
60319: DOUBLE
60320: EQUAL
60321: IFTRUE 60325
60323: GO 60381
60325: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60326: LD_ADDR_VAR 0 9
60330: PUSH
60331: LD_VAR 0 41
60335: PUSH
60336: LD_VAR 0 42
60340: PUSH
60341: LD_VAR 0 43
60345: PUSH
60346: LD_VAR 0 44
60350: PUSH
60351: LD_VAR 0 45
60355: PUSH
60356: LD_VAR 0 46
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: PUSH
60369: LD_VAR 0 4
60373: PUSH
60374: LD_INT 1
60376: PLUS
60377: ARRAY
60378: ST_TO_ADDR
60379: GO 60634
60381: LD_INT 36
60383: DOUBLE
60384: EQUAL
60385: IFTRUE 60389
60387: GO 60445
60389: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60390: LD_ADDR_VAR 0 9
60394: PUSH
60395: LD_VAR 0 47
60399: PUSH
60400: LD_VAR 0 48
60404: PUSH
60405: LD_VAR 0 49
60409: PUSH
60410: LD_VAR 0 50
60414: PUSH
60415: LD_VAR 0 51
60419: PUSH
60420: LD_VAR 0 52
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: PUSH
60433: LD_VAR 0 4
60437: PUSH
60438: LD_INT 1
60440: PLUS
60441: ARRAY
60442: ST_TO_ADDR
60443: GO 60634
60445: LD_INT 4
60447: DOUBLE
60448: EQUAL
60449: IFTRUE 60471
60451: LD_INT 5
60453: DOUBLE
60454: EQUAL
60455: IFTRUE 60471
60457: LD_INT 34
60459: DOUBLE
60460: EQUAL
60461: IFTRUE 60471
60463: LD_INT 37
60465: DOUBLE
60466: EQUAL
60467: IFTRUE 60471
60469: GO 60527
60471: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60472: LD_ADDR_VAR 0 9
60476: PUSH
60477: LD_VAR 0 53
60481: PUSH
60482: LD_VAR 0 54
60486: PUSH
60487: LD_VAR 0 55
60491: PUSH
60492: LD_VAR 0 56
60496: PUSH
60497: LD_VAR 0 57
60501: PUSH
60502: LD_VAR 0 58
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: PUSH
60515: LD_VAR 0 4
60519: PUSH
60520: LD_INT 1
60522: PLUS
60523: ARRAY
60524: ST_TO_ADDR
60525: GO 60634
60527: LD_INT 31
60529: DOUBLE
60530: EQUAL
60531: IFTRUE 60577
60533: LD_INT 32
60535: DOUBLE
60536: EQUAL
60537: IFTRUE 60577
60539: LD_INT 33
60541: DOUBLE
60542: EQUAL
60543: IFTRUE 60577
60545: LD_INT 27
60547: DOUBLE
60548: EQUAL
60549: IFTRUE 60577
60551: LD_INT 26
60553: DOUBLE
60554: EQUAL
60555: IFTRUE 60577
60557: LD_INT 28
60559: DOUBLE
60560: EQUAL
60561: IFTRUE 60577
60563: LD_INT 29
60565: DOUBLE
60566: EQUAL
60567: IFTRUE 60577
60569: LD_INT 30
60571: DOUBLE
60572: EQUAL
60573: IFTRUE 60577
60575: GO 60633
60577: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60578: LD_ADDR_VAR 0 9
60582: PUSH
60583: LD_VAR 0 59
60587: PUSH
60588: LD_VAR 0 60
60592: PUSH
60593: LD_VAR 0 61
60597: PUSH
60598: LD_VAR 0 62
60602: PUSH
60603: LD_VAR 0 63
60607: PUSH
60608: LD_VAR 0 64
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: PUSH
60621: LD_VAR 0 4
60625: PUSH
60626: LD_INT 1
60628: PLUS
60629: ARRAY
60630: ST_TO_ADDR
60631: GO 60634
60633: POP
// temp_list2 = [ ] ;
60634: LD_ADDR_VAR 0 10
60638: PUSH
60639: EMPTY
60640: ST_TO_ADDR
// for i in temp_list do
60641: LD_ADDR_VAR 0 8
60645: PUSH
60646: LD_VAR 0 9
60650: PUSH
60651: FOR_IN
60652: IFFALSE 60704
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60654: LD_ADDR_VAR 0 10
60658: PUSH
60659: LD_VAR 0 10
60663: PUSH
60664: LD_VAR 0 8
60668: PUSH
60669: LD_INT 1
60671: ARRAY
60672: PUSH
60673: LD_VAR 0 2
60677: PLUS
60678: PUSH
60679: LD_VAR 0 8
60683: PUSH
60684: LD_INT 2
60686: ARRAY
60687: PUSH
60688: LD_VAR 0 3
60692: PLUS
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: EMPTY
60699: LIST
60700: ADD
60701: ST_TO_ADDR
60702: GO 60651
60704: POP
60705: POP
// result = temp_list2 ;
60706: LD_ADDR_VAR 0 7
60710: PUSH
60711: LD_VAR 0 10
60715: ST_TO_ADDR
// end ;
60716: LD_VAR 0 7
60720: RET
// export function EnemyInRange ( unit , dist ) ; begin
60721: LD_INT 0
60723: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60724: LD_ADDR_VAR 0 3
60728: PUSH
60729: LD_VAR 0 1
60733: PPUSH
60734: CALL_OW 255
60738: PPUSH
60739: LD_VAR 0 1
60743: PPUSH
60744: CALL_OW 250
60748: PPUSH
60749: LD_VAR 0 1
60753: PPUSH
60754: CALL_OW 251
60758: PPUSH
60759: LD_VAR 0 2
60763: PPUSH
60764: CALL 34117 0 4
60768: PUSH
60769: LD_INT 4
60771: ARRAY
60772: ST_TO_ADDR
// end ;
60773: LD_VAR 0 3
60777: RET
// export function PlayerSeeMe ( unit ) ; begin
60778: LD_INT 0
60780: PPUSH
// result := See ( your_side , unit ) ;
60781: LD_ADDR_VAR 0 2
60785: PUSH
60786: LD_OWVAR 2
60790: PPUSH
60791: LD_VAR 0 1
60795: PPUSH
60796: CALL_OW 292
60800: ST_TO_ADDR
// end ;
60801: LD_VAR 0 2
60805: RET
// export function ReverseDir ( unit ) ; begin
60806: LD_INT 0
60808: PPUSH
// if not unit then
60809: LD_VAR 0 1
60813: NOT
60814: IFFALSE 60818
// exit ;
60816: GO 60841
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60818: LD_ADDR_VAR 0 2
60822: PUSH
60823: LD_VAR 0 1
60827: PPUSH
60828: CALL_OW 254
60832: PUSH
60833: LD_INT 3
60835: PLUS
60836: PUSH
60837: LD_INT 6
60839: MOD
60840: ST_TO_ADDR
// end ;
60841: LD_VAR 0 2
60845: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
60846: LD_INT 0
60848: PPUSH
60849: PPUSH
60850: PPUSH
60851: PPUSH
60852: PPUSH
// if not hexes then
60853: LD_VAR 0 2
60857: NOT
60858: IFFALSE 60862
// exit ;
60860: GO 61010
// dist := 9999 ;
60862: LD_ADDR_VAR 0 5
60866: PUSH
60867: LD_INT 9999
60869: ST_TO_ADDR
// for i = 1 to hexes do
60870: LD_ADDR_VAR 0 4
60874: PUSH
60875: DOUBLE
60876: LD_INT 1
60878: DEC
60879: ST_TO_ADDR
60880: LD_VAR 0 2
60884: PUSH
60885: FOR_TO
60886: IFFALSE 60998
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
60888: LD_VAR 0 1
60892: PPUSH
60893: LD_VAR 0 2
60897: PUSH
60898: LD_VAR 0 4
60902: ARRAY
60903: PUSH
60904: LD_INT 1
60906: ARRAY
60907: PPUSH
60908: LD_VAR 0 2
60912: PUSH
60913: LD_VAR 0 4
60917: ARRAY
60918: PUSH
60919: LD_INT 2
60921: ARRAY
60922: PPUSH
60923: CALL_OW 297
60927: PUSH
60928: LD_VAR 0 5
60932: LESS
60933: IFFALSE 60996
// begin hex := hexes [ i ] ;
60935: LD_ADDR_VAR 0 7
60939: PUSH
60940: LD_VAR 0 2
60944: PUSH
60945: LD_VAR 0 4
60949: ARRAY
60950: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60951: LD_ADDR_VAR 0 5
60955: PUSH
60956: LD_VAR 0 1
60960: PPUSH
60961: LD_VAR 0 2
60965: PUSH
60966: LD_VAR 0 4
60970: ARRAY
60971: PUSH
60972: LD_INT 1
60974: ARRAY
60975: PPUSH
60976: LD_VAR 0 2
60980: PUSH
60981: LD_VAR 0 4
60985: ARRAY
60986: PUSH
60987: LD_INT 2
60989: ARRAY
60990: PPUSH
60991: CALL_OW 297
60995: ST_TO_ADDR
// end ; end ;
60996: GO 60885
60998: POP
60999: POP
// result := hex ;
61000: LD_ADDR_VAR 0 3
61004: PUSH
61005: LD_VAR 0 7
61009: ST_TO_ADDR
// end ;
61010: LD_VAR 0 3
61014: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61015: LD_INT 0
61017: PPUSH
61018: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61019: LD_VAR 0 1
61023: NOT
61024: PUSH
61025: LD_VAR 0 1
61029: PUSH
61030: LD_INT 21
61032: PUSH
61033: LD_INT 2
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 23
61042: PUSH
61043: LD_INT 2
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PPUSH
61054: CALL_OW 69
61058: IN
61059: NOT
61060: OR
61061: IFFALSE 61065
// exit ;
61063: GO 61112
// for i = 1 to 3 do
61065: LD_ADDR_VAR 0 3
61069: PUSH
61070: DOUBLE
61071: LD_INT 1
61073: DEC
61074: ST_TO_ADDR
61075: LD_INT 3
61077: PUSH
61078: FOR_TO
61079: IFFALSE 61110
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61081: LD_VAR 0 1
61085: PPUSH
61086: CALL_OW 250
61090: PPUSH
61091: LD_VAR 0 1
61095: PPUSH
61096: CALL_OW 251
61100: PPUSH
61101: LD_INT 1
61103: PPUSH
61104: CALL_OW 453
61108: GO 61078
61110: POP
61111: POP
// end ;
61112: LD_VAR 0 2
61116: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61117: LD_INT 0
61119: PPUSH
61120: PPUSH
61121: PPUSH
61122: PPUSH
61123: PPUSH
61124: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61125: LD_VAR 0 1
61129: NOT
61130: PUSH
61131: LD_VAR 0 2
61135: NOT
61136: OR
61137: PUSH
61138: LD_VAR 0 1
61142: PPUSH
61143: CALL_OW 314
61147: OR
61148: IFFALSE 61152
// exit ;
61150: GO 61593
// x := GetX ( enemy_unit ) ;
61152: LD_ADDR_VAR 0 7
61156: PUSH
61157: LD_VAR 0 2
61161: PPUSH
61162: CALL_OW 250
61166: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61167: LD_ADDR_VAR 0 8
61171: PUSH
61172: LD_VAR 0 2
61176: PPUSH
61177: CALL_OW 251
61181: ST_TO_ADDR
// if not x or not y then
61182: LD_VAR 0 7
61186: NOT
61187: PUSH
61188: LD_VAR 0 8
61192: NOT
61193: OR
61194: IFFALSE 61198
// exit ;
61196: GO 61593
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61198: LD_ADDR_VAR 0 6
61202: PUSH
61203: LD_VAR 0 7
61207: PPUSH
61208: LD_INT 0
61210: PPUSH
61211: LD_INT 4
61213: PPUSH
61214: CALL_OW 272
61218: PUSH
61219: LD_VAR 0 8
61223: PPUSH
61224: LD_INT 0
61226: PPUSH
61227: LD_INT 4
61229: PPUSH
61230: CALL_OW 273
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_VAR 0 7
61243: PPUSH
61244: LD_INT 1
61246: PPUSH
61247: LD_INT 4
61249: PPUSH
61250: CALL_OW 272
61254: PUSH
61255: LD_VAR 0 8
61259: PPUSH
61260: LD_INT 1
61262: PPUSH
61263: LD_INT 4
61265: PPUSH
61266: CALL_OW 273
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_VAR 0 7
61279: PPUSH
61280: LD_INT 2
61282: PPUSH
61283: LD_INT 4
61285: PPUSH
61286: CALL_OW 272
61290: PUSH
61291: LD_VAR 0 8
61295: PPUSH
61296: LD_INT 2
61298: PPUSH
61299: LD_INT 4
61301: PPUSH
61302: CALL_OW 273
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_VAR 0 7
61315: PPUSH
61316: LD_INT 3
61318: PPUSH
61319: LD_INT 4
61321: PPUSH
61322: CALL_OW 272
61326: PUSH
61327: LD_VAR 0 8
61331: PPUSH
61332: LD_INT 3
61334: PPUSH
61335: LD_INT 4
61337: PPUSH
61338: CALL_OW 273
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_VAR 0 7
61351: PPUSH
61352: LD_INT 4
61354: PPUSH
61355: LD_INT 4
61357: PPUSH
61358: CALL_OW 272
61362: PUSH
61363: LD_VAR 0 8
61367: PPUSH
61368: LD_INT 4
61370: PPUSH
61371: LD_INT 4
61373: PPUSH
61374: CALL_OW 273
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_VAR 0 7
61387: PPUSH
61388: LD_INT 5
61390: PPUSH
61391: LD_INT 4
61393: PPUSH
61394: CALL_OW 272
61398: PUSH
61399: LD_VAR 0 8
61403: PPUSH
61404: LD_INT 5
61406: PPUSH
61407: LD_INT 4
61409: PPUSH
61410: CALL_OW 273
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: ST_TO_ADDR
// for i = tmp downto 1 do
61427: LD_ADDR_VAR 0 4
61431: PUSH
61432: DOUBLE
61433: LD_VAR 0 6
61437: INC
61438: ST_TO_ADDR
61439: LD_INT 1
61441: PUSH
61442: FOR_DOWNTO
61443: IFFALSE 61544
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61445: LD_VAR 0 6
61449: PUSH
61450: LD_VAR 0 4
61454: ARRAY
61455: PUSH
61456: LD_INT 1
61458: ARRAY
61459: PPUSH
61460: LD_VAR 0 6
61464: PUSH
61465: LD_VAR 0 4
61469: ARRAY
61470: PUSH
61471: LD_INT 2
61473: ARRAY
61474: PPUSH
61475: CALL_OW 488
61479: NOT
61480: PUSH
61481: LD_VAR 0 6
61485: PUSH
61486: LD_VAR 0 4
61490: ARRAY
61491: PUSH
61492: LD_INT 1
61494: ARRAY
61495: PPUSH
61496: LD_VAR 0 6
61500: PUSH
61501: LD_VAR 0 4
61505: ARRAY
61506: PUSH
61507: LD_INT 2
61509: ARRAY
61510: PPUSH
61511: CALL_OW 428
61515: PUSH
61516: LD_INT 0
61518: NONEQUAL
61519: OR
61520: IFFALSE 61542
// tmp := Delete ( tmp , i ) ;
61522: LD_ADDR_VAR 0 6
61526: PUSH
61527: LD_VAR 0 6
61531: PPUSH
61532: LD_VAR 0 4
61536: PPUSH
61537: CALL_OW 3
61541: ST_TO_ADDR
61542: GO 61442
61544: POP
61545: POP
// j := GetClosestHex ( unit , tmp ) ;
61546: LD_ADDR_VAR 0 5
61550: PUSH
61551: LD_VAR 0 1
61555: PPUSH
61556: LD_VAR 0 6
61560: PPUSH
61561: CALL 60846 0 2
61565: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61566: LD_VAR 0 1
61570: PPUSH
61571: LD_VAR 0 5
61575: PUSH
61576: LD_INT 1
61578: ARRAY
61579: PPUSH
61580: LD_VAR 0 5
61584: PUSH
61585: LD_INT 2
61587: ARRAY
61588: PPUSH
61589: CALL_OW 111
// end ;
61593: LD_VAR 0 3
61597: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61598: LD_INT 0
61600: PPUSH
61601: PPUSH
61602: PPUSH
// uc_side = 0 ;
61603: LD_ADDR_OWVAR 20
61607: PUSH
61608: LD_INT 0
61610: ST_TO_ADDR
// uc_nation = 0 ;
61611: LD_ADDR_OWVAR 21
61615: PUSH
61616: LD_INT 0
61618: ST_TO_ADDR
// InitHc_All ( ) ;
61619: CALL_OW 584
// InitVc ;
61623: CALL_OW 20
// if mastodonts then
61627: LD_VAR 0 6
61631: IFFALSE 61698
// for i = 1 to mastodonts do
61633: LD_ADDR_VAR 0 11
61637: PUSH
61638: DOUBLE
61639: LD_INT 1
61641: DEC
61642: ST_TO_ADDR
61643: LD_VAR 0 6
61647: PUSH
61648: FOR_TO
61649: IFFALSE 61696
// begin vc_chassis := 31 ;
61651: LD_ADDR_OWVAR 37
61655: PUSH
61656: LD_INT 31
61658: ST_TO_ADDR
// vc_control := control_rider ;
61659: LD_ADDR_OWVAR 38
61663: PUSH
61664: LD_INT 4
61666: ST_TO_ADDR
// animal := CreateVehicle ;
61667: LD_ADDR_VAR 0 12
61671: PUSH
61672: CALL_OW 45
61676: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61677: LD_VAR 0 12
61681: PPUSH
61682: LD_VAR 0 8
61686: PPUSH
61687: LD_INT 0
61689: PPUSH
61690: CALL 63886 0 3
// end ;
61694: GO 61648
61696: POP
61697: POP
// if horses then
61698: LD_VAR 0 5
61702: IFFALSE 61769
// for i = 1 to horses do
61704: LD_ADDR_VAR 0 11
61708: PUSH
61709: DOUBLE
61710: LD_INT 1
61712: DEC
61713: ST_TO_ADDR
61714: LD_VAR 0 5
61718: PUSH
61719: FOR_TO
61720: IFFALSE 61767
// begin hc_class := 21 ;
61722: LD_ADDR_OWVAR 28
61726: PUSH
61727: LD_INT 21
61729: ST_TO_ADDR
// hc_gallery :=  ;
61730: LD_ADDR_OWVAR 33
61734: PUSH
61735: LD_STRING 
61737: ST_TO_ADDR
// animal := CreateHuman ;
61738: LD_ADDR_VAR 0 12
61742: PUSH
61743: CALL_OW 44
61747: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61748: LD_VAR 0 12
61752: PPUSH
61753: LD_VAR 0 8
61757: PPUSH
61758: LD_INT 0
61760: PPUSH
61761: CALL 63886 0 3
// end ;
61765: GO 61719
61767: POP
61768: POP
// if birds then
61769: LD_VAR 0 1
61773: IFFALSE 61840
// for i = 1 to birds do
61775: LD_ADDR_VAR 0 11
61779: PUSH
61780: DOUBLE
61781: LD_INT 1
61783: DEC
61784: ST_TO_ADDR
61785: LD_VAR 0 1
61789: PUSH
61790: FOR_TO
61791: IFFALSE 61838
// begin hc_class = 18 ;
61793: LD_ADDR_OWVAR 28
61797: PUSH
61798: LD_INT 18
61800: ST_TO_ADDR
// hc_gallery =  ;
61801: LD_ADDR_OWVAR 33
61805: PUSH
61806: LD_STRING 
61808: ST_TO_ADDR
// animal := CreateHuman ;
61809: LD_ADDR_VAR 0 12
61813: PUSH
61814: CALL_OW 44
61818: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61819: LD_VAR 0 12
61823: PPUSH
61824: LD_VAR 0 8
61828: PPUSH
61829: LD_INT 0
61831: PPUSH
61832: CALL 63886 0 3
// end ;
61836: GO 61790
61838: POP
61839: POP
// if tigers then
61840: LD_VAR 0 2
61844: IFFALSE 61928
// for i = 1 to tigers do
61846: LD_ADDR_VAR 0 11
61850: PUSH
61851: DOUBLE
61852: LD_INT 1
61854: DEC
61855: ST_TO_ADDR
61856: LD_VAR 0 2
61860: PUSH
61861: FOR_TO
61862: IFFALSE 61926
// begin hc_class = class_tiger ;
61864: LD_ADDR_OWVAR 28
61868: PUSH
61869: LD_INT 14
61871: ST_TO_ADDR
// hc_gallery =  ;
61872: LD_ADDR_OWVAR 33
61876: PUSH
61877: LD_STRING 
61879: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61880: LD_ADDR_OWVAR 35
61884: PUSH
61885: LD_INT 7
61887: NEG
61888: PPUSH
61889: LD_INT 7
61891: PPUSH
61892: CALL_OW 12
61896: ST_TO_ADDR
// animal := CreateHuman ;
61897: LD_ADDR_VAR 0 12
61901: PUSH
61902: CALL_OW 44
61906: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61907: LD_VAR 0 12
61911: PPUSH
61912: LD_VAR 0 8
61916: PPUSH
61917: LD_INT 0
61919: PPUSH
61920: CALL 63886 0 3
// end ;
61924: GO 61861
61926: POP
61927: POP
// if apemans then
61928: LD_VAR 0 3
61932: IFFALSE 62055
// for i = 1 to apemans do
61934: LD_ADDR_VAR 0 11
61938: PUSH
61939: DOUBLE
61940: LD_INT 1
61942: DEC
61943: ST_TO_ADDR
61944: LD_VAR 0 3
61948: PUSH
61949: FOR_TO
61950: IFFALSE 62053
// begin hc_class = class_apeman ;
61952: LD_ADDR_OWVAR 28
61956: PUSH
61957: LD_INT 12
61959: ST_TO_ADDR
// hc_gallery =  ;
61960: LD_ADDR_OWVAR 33
61964: PUSH
61965: LD_STRING 
61967: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61968: LD_ADDR_OWVAR 35
61972: PUSH
61973: LD_INT 2
61975: NEG
61976: PPUSH
61977: LD_INT 2
61979: PPUSH
61980: CALL_OW 12
61984: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61985: LD_ADDR_OWVAR 31
61989: PUSH
61990: LD_INT 1
61992: PPUSH
61993: LD_INT 3
61995: PPUSH
61996: CALL_OW 12
62000: PUSH
62001: LD_INT 1
62003: PPUSH
62004: LD_INT 3
62006: PPUSH
62007: CALL_OW 12
62011: PUSH
62012: LD_INT 0
62014: PUSH
62015: LD_INT 0
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: ST_TO_ADDR
// animal := CreateHuman ;
62024: LD_ADDR_VAR 0 12
62028: PUSH
62029: CALL_OW 44
62033: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62034: LD_VAR 0 12
62038: PPUSH
62039: LD_VAR 0 8
62043: PPUSH
62044: LD_INT 0
62046: PPUSH
62047: CALL 63886 0 3
// end ;
62051: GO 61949
62053: POP
62054: POP
// if enchidnas then
62055: LD_VAR 0 4
62059: IFFALSE 62126
// for i = 1 to enchidnas do
62061: LD_ADDR_VAR 0 11
62065: PUSH
62066: DOUBLE
62067: LD_INT 1
62069: DEC
62070: ST_TO_ADDR
62071: LD_VAR 0 4
62075: PUSH
62076: FOR_TO
62077: IFFALSE 62124
// begin hc_class = 13 ;
62079: LD_ADDR_OWVAR 28
62083: PUSH
62084: LD_INT 13
62086: ST_TO_ADDR
// hc_gallery =  ;
62087: LD_ADDR_OWVAR 33
62091: PUSH
62092: LD_STRING 
62094: ST_TO_ADDR
// animal := CreateHuman ;
62095: LD_ADDR_VAR 0 12
62099: PUSH
62100: CALL_OW 44
62104: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62105: LD_VAR 0 12
62109: PPUSH
62110: LD_VAR 0 8
62114: PPUSH
62115: LD_INT 0
62117: PPUSH
62118: CALL 63886 0 3
// end ;
62122: GO 62076
62124: POP
62125: POP
// if fishes then
62126: LD_VAR 0 7
62130: IFFALSE 62197
// for i = 1 to fishes do
62132: LD_ADDR_VAR 0 11
62136: PUSH
62137: DOUBLE
62138: LD_INT 1
62140: DEC
62141: ST_TO_ADDR
62142: LD_VAR 0 7
62146: PUSH
62147: FOR_TO
62148: IFFALSE 62195
// begin hc_class = 20 ;
62150: LD_ADDR_OWVAR 28
62154: PUSH
62155: LD_INT 20
62157: ST_TO_ADDR
// hc_gallery =  ;
62158: LD_ADDR_OWVAR 33
62162: PUSH
62163: LD_STRING 
62165: ST_TO_ADDR
// animal := CreateHuman ;
62166: LD_ADDR_VAR 0 12
62170: PUSH
62171: CALL_OW 44
62175: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62176: LD_VAR 0 12
62180: PPUSH
62181: LD_VAR 0 9
62185: PPUSH
62186: LD_INT 0
62188: PPUSH
62189: CALL 63886 0 3
// end ;
62193: GO 62147
62195: POP
62196: POP
// end ;
62197: LD_VAR 0 10
62201: RET
// export function WantHeal ( sci , unit ) ; begin
62202: LD_INT 0
62204: PPUSH
// if GetTaskList ( sci ) > 0 then
62205: LD_VAR 0 1
62209: PPUSH
62210: CALL_OW 437
62214: PUSH
62215: LD_INT 0
62217: GREATER
62218: IFFALSE 62288
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62220: LD_VAR 0 1
62224: PPUSH
62225: CALL_OW 437
62229: PUSH
62230: LD_INT 1
62232: ARRAY
62233: PUSH
62234: LD_INT 1
62236: ARRAY
62237: PUSH
62238: LD_STRING l
62240: EQUAL
62241: PUSH
62242: LD_VAR 0 1
62246: PPUSH
62247: CALL_OW 437
62251: PUSH
62252: LD_INT 1
62254: ARRAY
62255: PUSH
62256: LD_INT 4
62258: ARRAY
62259: PUSH
62260: LD_VAR 0 2
62264: EQUAL
62265: AND
62266: IFFALSE 62278
// result := true else
62268: LD_ADDR_VAR 0 3
62272: PUSH
62273: LD_INT 1
62275: ST_TO_ADDR
62276: GO 62286
// result := false ;
62278: LD_ADDR_VAR 0 3
62282: PUSH
62283: LD_INT 0
62285: ST_TO_ADDR
// end else
62286: GO 62296
// result := false ;
62288: LD_ADDR_VAR 0 3
62292: PUSH
62293: LD_INT 0
62295: ST_TO_ADDR
// end ;
62296: LD_VAR 0 3
62300: RET
// export function HealTarget ( sci ) ; begin
62301: LD_INT 0
62303: PPUSH
// if not sci then
62304: LD_VAR 0 1
62308: NOT
62309: IFFALSE 62313
// exit ;
62311: GO 62378
// result := 0 ;
62313: LD_ADDR_VAR 0 2
62317: PUSH
62318: LD_INT 0
62320: ST_TO_ADDR
// if GetTaskList ( sci ) then
62321: LD_VAR 0 1
62325: PPUSH
62326: CALL_OW 437
62330: IFFALSE 62378
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62332: LD_VAR 0 1
62336: PPUSH
62337: CALL_OW 437
62341: PUSH
62342: LD_INT 1
62344: ARRAY
62345: PUSH
62346: LD_INT 1
62348: ARRAY
62349: PUSH
62350: LD_STRING l
62352: EQUAL
62353: IFFALSE 62378
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62355: LD_ADDR_VAR 0 2
62359: PUSH
62360: LD_VAR 0 1
62364: PPUSH
62365: CALL_OW 437
62369: PUSH
62370: LD_INT 1
62372: ARRAY
62373: PUSH
62374: LD_INT 4
62376: ARRAY
62377: ST_TO_ADDR
// end ;
62378: LD_VAR 0 2
62382: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62383: LD_INT 0
62385: PPUSH
62386: PPUSH
62387: PPUSH
62388: PPUSH
// if not base_units then
62389: LD_VAR 0 1
62393: NOT
62394: IFFALSE 62398
// exit ;
62396: GO 62485
// result := false ;
62398: LD_ADDR_VAR 0 2
62402: PUSH
62403: LD_INT 0
62405: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62406: LD_ADDR_VAR 0 5
62410: PUSH
62411: LD_VAR 0 1
62415: PPUSH
62416: LD_INT 21
62418: PUSH
62419: LD_INT 3
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PPUSH
62426: CALL_OW 72
62430: ST_TO_ADDR
// if not tmp then
62431: LD_VAR 0 5
62435: NOT
62436: IFFALSE 62440
// exit ;
62438: GO 62485
// for i in tmp do
62440: LD_ADDR_VAR 0 3
62444: PUSH
62445: LD_VAR 0 5
62449: PUSH
62450: FOR_IN
62451: IFFALSE 62483
// begin result := EnemyInRange ( i , 22 ) ;
62453: LD_ADDR_VAR 0 2
62457: PUSH
62458: LD_VAR 0 3
62462: PPUSH
62463: LD_INT 22
62465: PPUSH
62466: CALL 60721 0 2
62470: ST_TO_ADDR
// if result then
62471: LD_VAR 0 2
62475: IFFALSE 62481
// exit ;
62477: POP
62478: POP
62479: GO 62485
// end ;
62481: GO 62450
62483: POP
62484: POP
// end ;
62485: LD_VAR 0 2
62489: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
62490: LD_INT 0
62492: PPUSH
62493: PPUSH
// if not units then
62494: LD_VAR 0 1
62498: NOT
62499: IFFALSE 62503
// exit ;
62501: GO 62573
// result := [ ] ;
62503: LD_ADDR_VAR 0 3
62507: PUSH
62508: EMPTY
62509: ST_TO_ADDR
// for i in units do
62510: LD_ADDR_VAR 0 4
62514: PUSH
62515: LD_VAR 0 1
62519: PUSH
62520: FOR_IN
62521: IFFALSE 62571
// if GetTag ( i ) = tag then
62523: LD_VAR 0 4
62527: PPUSH
62528: CALL_OW 110
62532: PUSH
62533: LD_VAR 0 2
62537: EQUAL
62538: IFFALSE 62569
// result := Replace ( result , result + 1 , i ) ;
62540: LD_ADDR_VAR 0 3
62544: PUSH
62545: LD_VAR 0 3
62549: PPUSH
62550: LD_VAR 0 3
62554: PUSH
62555: LD_INT 1
62557: PLUS
62558: PPUSH
62559: LD_VAR 0 4
62563: PPUSH
62564: CALL_OW 1
62568: ST_TO_ADDR
62569: GO 62520
62571: POP
62572: POP
// end ;
62573: LD_VAR 0 3
62577: RET
// export function IsDriver ( un ) ; begin
62578: LD_INT 0
62580: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62581: LD_ADDR_VAR 0 2
62585: PUSH
62586: LD_VAR 0 1
62590: PUSH
62591: LD_INT 55
62593: PUSH
62594: EMPTY
62595: LIST
62596: PPUSH
62597: CALL_OW 69
62601: IN
62602: ST_TO_ADDR
// end ;
62603: LD_VAR 0 2
62607: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62608: LD_INT 0
62610: PPUSH
62611: PPUSH
// list := [ ] ;
62612: LD_ADDR_VAR 0 5
62616: PUSH
62617: EMPTY
62618: ST_TO_ADDR
// case d of 0 :
62619: LD_VAR 0 3
62623: PUSH
62624: LD_INT 0
62626: DOUBLE
62627: EQUAL
62628: IFTRUE 62632
62630: GO 62765
62632: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62633: LD_ADDR_VAR 0 5
62637: PUSH
62638: LD_VAR 0 1
62642: PUSH
62643: LD_INT 4
62645: MINUS
62646: PUSH
62647: LD_VAR 0 2
62651: PUSH
62652: LD_INT 4
62654: MINUS
62655: PUSH
62656: LD_INT 2
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: LIST
62663: PUSH
62664: LD_VAR 0 1
62668: PUSH
62669: LD_INT 3
62671: MINUS
62672: PUSH
62673: LD_VAR 0 2
62677: PUSH
62678: LD_INT 1
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: LIST
62685: PUSH
62686: LD_VAR 0 1
62690: PUSH
62691: LD_INT 4
62693: PLUS
62694: PUSH
62695: LD_VAR 0 2
62699: PUSH
62700: LD_INT 4
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: LIST
62707: PUSH
62708: LD_VAR 0 1
62712: PUSH
62713: LD_INT 3
62715: PLUS
62716: PUSH
62717: LD_VAR 0 2
62721: PUSH
62722: LD_INT 3
62724: PLUS
62725: PUSH
62726: LD_INT 5
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: LIST
62733: PUSH
62734: LD_VAR 0 1
62738: PUSH
62739: LD_VAR 0 2
62743: PUSH
62744: LD_INT 4
62746: PLUS
62747: PUSH
62748: LD_INT 0
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: LIST
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: ST_TO_ADDR
// end ; 1 :
62763: GO 63463
62765: LD_INT 1
62767: DOUBLE
62768: EQUAL
62769: IFTRUE 62773
62771: GO 62906
62773: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62774: LD_ADDR_VAR 0 5
62778: PUSH
62779: LD_VAR 0 1
62783: PUSH
62784: LD_VAR 0 2
62788: PUSH
62789: LD_INT 4
62791: MINUS
62792: PUSH
62793: LD_INT 3
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: LIST
62800: PUSH
62801: LD_VAR 0 1
62805: PUSH
62806: LD_INT 3
62808: MINUS
62809: PUSH
62810: LD_VAR 0 2
62814: PUSH
62815: LD_INT 3
62817: MINUS
62818: PUSH
62819: LD_INT 2
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: LIST
62826: PUSH
62827: LD_VAR 0 1
62831: PUSH
62832: LD_INT 4
62834: MINUS
62835: PUSH
62836: LD_VAR 0 2
62840: PUSH
62841: LD_INT 1
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: LIST
62848: PUSH
62849: LD_VAR 0 1
62853: PUSH
62854: LD_VAR 0 2
62858: PUSH
62859: LD_INT 3
62861: PLUS
62862: PUSH
62863: LD_INT 0
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: LIST
62870: PUSH
62871: LD_VAR 0 1
62875: PUSH
62876: LD_INT 4
62878: PLUS
62879: PUSH
62880: LD_VAR 0 2
62884: PUSH
62885: LD_INT 4
62887: PLUS
62888: PUSH
62889: LD_INT 5
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: LIST
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: ST_TO_ADDR
// end ; 2 :
62904: GO 63463
62906: LD_INT 2
62908: DOUBLE
62909: EQUAL
62910: IFTRUE 62914
62912: GO 63043
62914: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62915: LD_ADDR_VAR 0 5
62919: PUSH
62920: LD_VAR 0 1
62924: PUSH
62925: LD_VAR 0 2
62929: PUSH
62930: LD_INT 3
62932: MINUS
62933: PUSH
62934: LD_INT 3
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: LIST
62941: PUSH
62942: LD_VAR 0 1
62946: PUSH
62947: LD_INT 4
62949: PLUS
62950: PUSH
62951: LD_VAR 0 2
62955: PUSH
62956: LD_INT 4
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: LIST
62963: PUSH
62964: LD_VAR 0 1
62968: PUSH
62969: LD_VAR 0 2
62973: PUSH
62974: LD_INT 4
62976: PLUS
62977: PUSH
62978: LD_INT 0
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: LIST
62985: PUSH
62986: LD_VAR 0 1
62990: PUSH
62991: LD_INT 3
62993: MINUS
62994: PUSH
62995: LD_VAR 0 2
62999: PUSH
63000: LD_INT 1
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: LIST
63007: PUSH
63008: LD_VAR 0 1
63012: PUSH
63013: LD_INT 4
63015: MINUS
63016: PUSH
63017: LD_VAR 0 2
63021: PUSH
63022: LD_INT 4
63024: MINUS
63025: PUSH
63026: LD_INT 2
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: LIST
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: ST_TO_ADDR
// end ; 3 :
63041: GO 63463
63043: LD_INT 3
63045: DOUBLE
63046: EQUAL
63047: IFTRUE 63051
63049: GO 63184
63051: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63052: LD_ADDR_VAR 0 5
63056: PUSH
63057: LD_VAR 0 1
63061: PUSH
63062: LD_INT 3
63064: PLUS
63065: PUSH
63066: LD_VAR 0 2
63070: PUSH
63071: LD_INT 4
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: LIST
63078: PUSH
63079: LD_VAR 0 1
63083: PUSH
63084: LD_INT 4
63086: PLUS
63087: PUSH
63088: LD_VAR 0 2
63092: PUSH
63093: LD_INT 4
63095: PLUS
63096: PUSH
63097: LD_INT 5
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: LIST
63104: PUSH
63105: LD_VAR 0 1
63109: PUSH
63110: LD_INT 4
63112: MINUS
63113: PUSH
63114: LD_VAR 0 2
63118: PUSH
63119: LD_INT 1
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: LIST
63126: PUSH
63127: LD_VAR 0 1
63131: PUSH
63132: LD_VAR 0 2
63136: PUSH
63137: LD_INT 4
63139: MINUS
63140: PUSH
63141: LD_INT 3
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: LIST
63148: PUSH
63149: LD_VAR 0 1
63153: PUSH
63154: LD_INT 3
63156: MINUS
63157: PUSH
63158: LD_VAR 0 2
63162: PUSH
63163: LD_INT 3
63165: MINUS
63166: PUSH
63167: LD_INT 2
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: LIST
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: ST_TO_ADDR
// end ; 4 :
63182: GO 63463
63184: LD_INT 4
63186: DOUBLE
63187: EQUAL
63188: IFTRUE 63192
63190: GO 63325
63192: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63193: LD_ADDR_VAR 0 5
63197: PUSH
63198: LD_VAR 0 1
63202: PUSH
63203: LD_VAR 0 2
63207: PUSH
63208: LD_INT 4
63210: PLUS
63211: PUSH
63212: LD_INT 0
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: LIST
63219: PUSH
63220: LD_VAR 0 1
63224: PUSH
63225: LD_INT 3
63227: PLUS
63228: PUSH
63229: LD_VAR 0 2
63233: PUSH
63234: LD_INT 3
63236: PLUS
63237: PUSH
63238: LD_INT 5
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: LIST
63245: PUSH
63246: LD_VAR 0 1
63250: PUSH
63251: LD_INT 4
63253: PLUS
63254: PUSH
63255: LD_VAR 0 2
63259: PUSH
63260: LD_INT 4
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: LIST
63267: PUSH
63268: LD_VAR 0 1
63272: PUSH
63273: LD_VAR 0 2
63277: PUSH
63278: LD_INT 3
63280: MINUS
63281: PUSH
63282: LD_INT 3
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: LIST
63289: PUSH
63290: LD_VAR 0 1
63294: PUSH
63295: LD_INT 4
63297: MINUS
63298: PUSH
63299: LD_VAR 0 2
63303: PUSH
63304: LD_INT 4
63306: MINUS
63307: PUSH
63308: LD_INT 2
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: LIST
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: ST_TO_ADDR
// end ; 5 :
63323: GO 63463
63325: LD_INT 5
63327: DOUBLE
63328: EQUAL
63329: IFTRUE 63333
63331: GO 63462
63333: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63334: LD_ADDR_VAR 0 5
63338: PUSH
63339: LD_VAR 0 1
63343: PUSH
63344: LD_INT 4
63346: MINUS
63347: PUSH
63348: LD_VAR 0 2
63352: PUSH
63353: LD_INT 1
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: LIST
63360: PUSH
63361: LD_VAR 0 1
63365: PUSH
63366: LD_VAR 0 2
63370: PUSH
63371: LD_INT 4
63373: MINUS
63374: PUSH
63375: LD_INT 3
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: LIST
63382: PUSH
63383: LD_VAR 0 1
63387: PUSH
63388: LD_INT 4
63390: PLUS
63391: PUSH
63392: LD_VAR 0 2
63396: PUSH
63397: LD_INT 4
63399: PLUS
63400: PUSH
63401: LD_INT 5
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: LIST
63408: PUSH
63409: LD_VAR 0 1
63413: PUSH
63414: LD_INT 3
63416: PLUS
63417: PUSH
63418: LD_VAR 0 2
63422: PUSH
63423: LD_INT 4
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: LIST
63430: PUSH
63431: LD_VAR 0 1
63435: PUSH
63436: LD_VAR 0 2
63440: PUSH
63441: LD_INT 3
63443: PLUS
63444: PUSH
63445: LD_INT 0
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: LIST
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: ST_TO_ADDR
// end ; end ;
63460: GO 63463
63462: POP
// result := list ;
63463: LD_ADDR_VAR 0 4
63467: PUSH
63468: LD_VAR 0 5
63472: ST_TO_ADDR
// end ;
63473: LD_VAR 0 4
63477: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63478: LD_INT 0
63480: PPUSH
63481: PPUSH
63482: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63483: LD_VAR 0 1
63487: NOT
63488: PUSH
63489: LD_VAR 0 2
63493: PUSH
63494: LD_INT 1
63496: PUSH
63497: LD_INT 2
63499: PUSH
63500: LD_INT 3
63502: PUSH
63503: LD_INT 4
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: IN
63512: NOT
63513: OR
63514: IFFALSE 63518
// exit ;
63516: GO 63610
// tmp := [ ] ;
63518: LD_ADDR_VAR 0 5
63522: PUSH
63523: EMPTY
63524: ST_TO_ADDR
// for i in units do
63525: LD_ADDR_VAR 0 4
63529: PUSH
63530: LD_VAR 0 1
63534: PUSH
63535: FOR_IN
63536: IFFALSE 63579
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63538: LD_ADDR_VAR 0 5
63542: PUSH
63543: LD_VAR 0 5
63547: PPUSH
63548: LD_VAR 0 5
63552: PUSH
63553: LD_INT 1
63555: PLUS
63556: PPUSH
63557: LD_VAR 0 4
63561: PPUSH
63562: LD_VAR 0 2
63566: PPUSH
63567: CALL_OW 259
63571: PPUSH
63572: CALL_OW 2
63576: ST_TO_ADDR
63577: GO 63535
63579: POP
63580: POP
// if not tmp then
63581: LD_VAR 0 5
63585: NOT
63586: IFFALSE 63590
// exit ;
63588: GO 63610
// result := SortListByListDesc ( units , tmp ) ;
63590: LD_ADDR_VAR 0 3
63594: PUSH
63595: LD_VAR 0 1
63599: PPUSH
63600: LD_VAR 0 5
63604: PPUSH
63605: CALL_OW 77
63609: ST_TO_ADDR
// end ;
63610: LD_VAR 0 3
63614: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63615: LD_INT 0
63617: PPUSH
63618: PPUSH
63619: PPUSH
// result := false ;
63620: LD_ADDR_VAR 0 3
63624: PUSH
63625: LD_INT 0
63627: ST_TO_ADDR
// x := GetX ( building ) ;
63628: LD_ADDR_VAR 0 4
63632: PUSH
63633: LD_VAR 0 2
63637: PPUSH
63638: CALL_OW 250
63642: ST_TO_ADDR
// y := GetY ( building ) ;
63643: LD_ADDR_VAR 0 5
63647: PUSH
63648: LD_VAR 0 2
63652: PPUSH
63653: CALL_OW 251
63657: ST_TO_ADDR
// if not building or not x or not y then
63658: LD_VAR 0 2
63662: NOT
63663: PUSH
63664: LD_VAR 0 4
63668: NOT
63669: OR
63670: PUSH
63671: LD_VAR 0 5
63675: NOT
63676: OR
63677: IFFALSE 63681
// exit ;
63679: GO 63773
// if GetTaskList ( unit ) then
63681: LD_VAR 0 1
63685: PPUSH
63686: CALL_OW 437
63690: IFFALSE 63773
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63692: LD_STRING e
63694: PUSH
63695: LD_VAR 0 1
63699: PPUSH
63700: CALL_OW 437
63704: PUSH
63705: LD_INT 1
63707: ARRAY
63708: PUSH
63709: LD_INT 1
63711: ARRAY
63712: EQUAL
63713: PUSH
63714: LD_VAR 0 4
63718: PUSH
63719: LD_VAR 0 1
63723: PPUSH
63724: CALL_OW 437
63728: PUSH
63729: LD_INT 1
63731: ARRAY
63732: PUSH
63733: LD_INT 2
63735: ARRAY
63736: EQUAL
63737: AND
63738: PUSH
63739: LD_VAR 0 5
63743: PUSH
63744: LD_VAR 0 1
63748: PPUSH
63749: CALL_OW 437
63753: PUSH
63754: LD_INT 1
63756: ARRAY
63757: PUSH
63758: LD_INT 3
63760: ARRAY
63761: EQUAL
63762: AND
63763: IFFALSE 63773
// result := true end ;
63765: LD_ADDR_VAR 0 3
63769: PUSH
63770: LD_INT 1
63772: ST_TO_ADDR
// end ;
63773: LD_VAR 0 3
63777: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63778: LD_INT 0
63780: PPUSH
// result := false ;
63781: LD_ADDR_VAR 0 4
63785: PUSH
63786: LD_INT 0
63788: ST_TO_ADDR
// if GetTaskList ( unit ) then
63789: LD_VAR 0 1
63793: PPUSH
63794: CALL_OW 437
63798: IFFALSE 63881
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63800: LD_STRING M
63802: PUSH
63803: LD_VAR 0 1
63807: PPUSH
63808: CALL_OW 437
63812: PUSH
63813: LD_INT 1
63815: ARRAY
63816: PUSH
63817: LD_INT 1
63819: ARRAY
63820: EQUAL
63821: PUSH
63822: LD_VAR 0 2
63826: PUSH
63827: LD_VAR 0 1
63831: PPUSH
63832: CALL_OW 437
63836: PUSH
63837: LD_INT 1
63839: ARRAY
63840: PUSH
63841: LD_INT 2
63843: ARRAY
63844: EQUAL
63845: AND
63846: PUSH
63847: LD_VAR 0 3
63851: PUSH
63852: LD_VAR 0 1
63856: PPUSH
63857: CALL_OW 437
63861: PUSH
63862: LD_INT 1
63864: ARRAY
63865: PUSH
63866: LD_INT 3
63868: ARRAY
63869: EQUAL
63870: AND
63871: IFFALSE 63881
// result := true ;
63873: LD_ADDR_VAR 0 4
63877: PUSH
63878: LD_INT 1
63880: ST_TO_ADDR
// end ; end ;
63881: LD_VAR 0 4
63885: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63886: LD_INT 0
63888: PPUSH
63889: PPUSH
63890: PPUSH
63891: PPUSH
// if not unit or not area then
63892: LD_VAR 0 1
63896: NOT
63897: PUSH
63898: LD_VAR 0 2
63902: NOT
63903: OR
63904: IFFALSE 63908
// exit ;
63906: GO 64072
// tmp := AreaToList ( area , i ) ;
63908: LD_ADDR_VAR 0 6
63912: PUSH
63913: LD_VAR 0 2
63917: PPUSH
63918: LD_VAR 0 5
63922: PPUSH
63923: CALL_OW 517
63927: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63928: LD_ADDR_VAR 0 5
63932: PUSH
63933: DOUBLE
63934: LD_INT 1
63936: DEC
63937: ST_TO_ADDR
63938: LD_VAR 0 6
63942: PUSH
63943: LD_INT 1
63945: ARRAY
63946: PUSH
63947: FOR_TO
63948: IFFALSE 64070
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63950: LD_ADDR_VAR 0 7
63954: PUSH
63955: LD_VAR 0 6
63959: PUSH
63960: LD_INT 1
63962: ARRAY
63963: PUSH
63964: LD_VAR 0 5
63968: ARRAY
63969: PUSH
63970: LD_VAR 0 6
63974: PUSH
63975: LD_INT 2
63977: ARRAY
63978: PUSH
63979: LD_VAR 0 5
63983: ARRAY
63984: PUSH
63985: EMPTY
63986: LIST
63987: LIST
63988: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63989: LD_VAR 0 7
63993: PUSH
63994: LD_INT 1
63996: ARRAY
63997: PPUSH
63998: LD_VAR 0 7
64002: PUSH
64003: LD_INT 2
64005: ARRAY
64006: PPUSH
64007: CALL_OW 428
64011: PUSH
64012: LD_INT 0
64014: EQUAL
64015: IFFALSE 64068
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64017: LD_VAR 0 1
64021: PPUSH
64022: LD_VAR 0 7
64026: PUSH
64027: LD_INT 1
64029: ARRAY
64030: PPUSH
64031: LD_VAR 0 7
64035: PUSH
64036: LD_INT 2
64038: ARRAY
64039: PPUSH
64040: LD_VAR 0 3
64044: PPUSH
64045: CALL_OW 48
// result := IsPlaced ( unit ) ;
64049: LD_ADDR_VAR 0 4
64053: PUSH
64054: LD_VAR 0 1
64058: PPUSH
64059: CALL_OW 305
64063: ST_TO_ADDR
// exit ;
64064: POP
64065: POP
64066: GO 64072
// end ; end ;
64068: GO 63947
64070: POP
64071: POP
// end ;
64072: LD_VAR 0 4
64076: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64077: LD_INT 0
64079: PPUSH
64080: PPUSH
64081: PPUSH
// if not side or side > 8 then
64082: LD_VAR 0 1
64086: NOT
64087: PUSH
64088: LD_VAR 0 1
64092: PUSH
64093: LD_INT 8
64095: GREATER
64096: OR
64097: IFFALSE 64101
// exit ;
64099: GO 64288
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64101: LD_ADDR_VAR 0 4
64105: PUSH
64106: LD_INT 22
64108: PUSH
64109: LD_VAR 0 1
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 21
64120: PUSH
64121: LD_INT 3
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PPUSH
64132: CALL_OW 69
64136: ST_TO_ADDR
// if not tmp then
64137: LD_VAR 0 4
64141: NOT
64142: IFFALSE 64146
// exit ;
64144: GO 64288
// enable_addtolog := true ;
64146: LD_ADDR_OWVAR 81
64150: PUSH
64151: LD_INT 1
64153: ST_TO_ADDR
// AddToLog ( [ ) ;
64154: LD_STRING [
64156: PPUSH
64157: CALL_OW 561
// for i in tmp do
64161: LD_ADDR_VAR 0 3
64165: PUSH
64166: LD_VAR 0 4
64170: PUSH
64171: FOR_IN
64172: IFFALSE 64279
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64174: LD_STRING [
64176: PUSH
64177: LD_VAR 0 3
64181: PPUSH
64182: CALL_OW 266
64186: STR
64187: PUSH
64188: LD_STRING , 
64190: STR
64191: PUSH
64192: LD_VAR 0 3
64196: PPUSH
64197: CALL_OW 250
64201: STR
64202: PUSH
64203: LD_STRING , 
64205: STR
64206: PUSH
64207: LD_VAR 0 3
64211: PPUSH
64212: CALL_OW 251
64216: STR
64217: PUSH
64218: LD_STRING , 
64220: STR
64221: PUSH
64222: LD_VAR 0 3
64226: PPUSH
64227: CALL_OW 254
64231: STR
64232: PUSH
64233: LD_STRING , 
64235: STR
64236: PUSH
64237: LD_VAR 0 3
64241: PPUSH
64242: LD_INT 1
64244: PPUSH
64245: CALL_OW 268
64249: STR
64250: PUSH
64251: LD_STRING , 
64253: STR
64254: PUSH
64255: LD_VAR 0 3
64259: PPUSH
64260: LD_INT 2
64262: PPUSH
64263: CALL_OW 268
64267: STR
64268: PUSH
64269: LD_STRING ],
64271: STR
64272: PPUSH
64273: CALL_OW 561
// end ;
64277: GO 64171
64279: POP
64280: POP
// AddToLog ( ]; ) ;
64281: LD_STRING ];
64283: PPUSH
64284: CALL_OW 561
// end ;
64288: LD_VAR 0 2
64292: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64293: LD_INT 0
64295: PPUSH
64296: PPUSH
64297: PPUSH
64298: PPUSH
64299: PPUSH
// if not area or not rate or not max then
64300: LD_VAR 0 1
64304: NOT
64305: PUSH
64306: LD_VAR 0 2
64310: NOT
64311: OR
64312: PUSH
64313: LD_VAR 0 4
64317: NOT
64318: OR
64319: IFFALSE 64323
// exit ;
64321: GO 64515
// while 1 do
64323: LD_INT 1
64325: IFFALSE 64515
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64327: LD_ADDR_VAR 0 9
64331: PUSH
64332: LD_VAR 0 1
64336: PPUSH
64337: LD_INT 1
64339: PPUSH
64340: CALL_OW 287
64344: PUSH
64345: LD_INT 10
64347: MUL
64348: ST_TO_ADDR
// r := rate / 10 ;
64349: LD_ADDR_VAR 0 7
64353: PUSH
64354: LD_VAR 0 2
64358: PUSH
64359: LD_INT 10
64361: DIVREAL
64362: ST_TO_ADDR
// time := 1 1$00 ;
64363: LD_ADDR_VAR 0 8
64367: PUSH
64368: LD_INT 2100
64370: ST_TO_ADDR
// if amount < min then
64371: LD_VAR 0 9
64375: PUSH
64376: LD_VAR 0 3
64380: LESS
64381: IFFALSE 64399
// r := r * 2 else
64383: LD_ADDR_VAR 0 7
64387: PUSH
64388: LD_VAR 0 7
64392: PUSH
64393: LD_INT 2
64395: MUL
64396: ST_TO_ADDR
64397: GO 64425
// if amount > max then
64399: LD_VAR 0 9
64403: PUSH
64404: LD_VAR 0 4
64408: GREATER
64409: IFFALSE 64425
// r := r / 2 ;
64411: LD_ADDR_VAR 0 7
64415: PUSH
64416: LD_VAR 0 7
64420: PUSH
64421: LD_INT 2
64423: DIVREAL
64424: ST_TO_ADDR
// time := time / r ;
64425: LD_ADDR_VAR 0 8
64429: PUSH
64430: LD_VAR 0 8
64434: PUSH
64435: LD_VAR 0 7
64439: DIVREAL
64440: ST_TO_ADDR
// if time < 0 then
64441: LD_VAR 0 8
64445: PUSH
64446: LD_INT 0
64448: LESS
64449: IFFALSE 64466
// time := time * - 1 ;
64451: LD_ADDR_VAR 0 8
64455: PUSH
64456: LD_VAR 0 8
64460: PUSH
64461: LD_INT 1
64463: NEG
64464: MUL
64465: ST_TO_ADDR
// wait ( time ) ;
64466: LD_VAR 0 8
64470: PPUSH
64471: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
64475: LD_INT 35
64477: PPUSH
64478: LD_INT 875
64480: PPUSH
64481: CALL_OW 12
64485: PPUSH
64486: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64490: LD_INT 1
64492: PPUSH
64493: LD_INT 5
64495: PPUSH
64496: CALL_OW 12
64500: PPUSH
64501: LD_VAR 0 1
64505: PPUSH
64506: LD_INT 1
64508: PPUSH
64509: CALL_OW 55
// end ;
64513: GO 64323
// end ;
64515: LD_VAR 0 5
64519: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64520: LD_INT 0
64522: PPUSH
64523: PPUSH
64524: PPUSH
64525: PPUSH
64526: PPUSH
64527: PPUSH
64528: PPUSH
64529: PPUSH
// if not turrets or not factories then
64530: LD_VAR 0 1
64534: NOT
64535: PUSH
64536: LD_VAR 0 2
64540: NOT
64541: OR
64542: IFFALSE 64546
// exit ;
64544: GO 64853
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64546: LD_ADDR_VAR 0 10
64550: PUSH
64551: LD_INT 5
64553: PUSH
64554: LD_INT 6
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: LD_INT 2
64563: PUSH
64564: LD_INT 4
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: PUSH
64571: LD_INT 3
64573: PUSH
64574: LD_INT 5
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 24
64588: PUSH
64589: LD_INT 25
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 23
64598: PUSH
64599: LD_INT 27
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 42
64612: PUSH
64613: LD_INT 43
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 44
64622: PUSH
64623: LD_INT 46
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 45
64632: PUSH
64633: LD_INT 47
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: LIST
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: LIST
64649: ST_TO_ADDR
// result := [ ] ;
64650: LD_ADDR_VAR 0 3
64654: PUSH
64655: EMPTY
64656: ST_TO_ADDR
// for i in turrets do
64657: LD_ADDR_VAR 0 4
64661: PUSH
64662: LD_VAR 0 1
64666: PUSH
64667: FOR_IN
64668: IFFALSE 64851
// begin nat := GetNation ( i ) ;
64670: LD_ADDR_VAR 0 7
64674: PUSH
64675: LD_VAR 0 4
64679: PPUSH
64680: CALL_OW 248
64684: ST_TO_ADDR
// weapon := 0 ;
64685: LD_ADDR_VAR 0 8
64689: PUSH
64690: LD_INT 0
64692: ST_TO_ADDR
// if not nat then
64693: LD_VAR 0 7
64697: NOT
64698: IFFALSE 64702
// continue ;
64700: GO 64667
// for j in list [ nat ] do
64702: LD_ADDR_VAR 0 5
64706: PUSH
64707: LD_VAR 0 10
64711: PUSH
64712: LD_VAR 0 7
64716: ARRAY
64717: PUSH
64718: FOR_IN
64719: IFFALSE 64760
// if GetBWeapon ( i ) = j [ 1 ] then
64721: LD_VAR 0 4
64725: PPUSH
64726: CALL_OW 269
64730: PUSH
64731: LD_VAR 0 5
64735: PUSH
64736: LD_INT 1
64738: ARRAY
64739: EQUAL
64740: IFFALSE 64758
// begin weapon := j [ 2 ] ;
64742: LD_ADDR_VAR 0 8
64746: PUSH
64747: LD_VAR 0 5
64751: PUSH
64752: LD_INT 2
64754: ARRAY
64755: ST_TO_ADDR
// break ;
64756: GO 64760
// end ;
64758: GO 64718
64760: POP
64761: POP
// if not weapon then
64762: LD_VAR 0 8
64766: NOT
64767: IFFALSE 64771
// continue ;
64769: GO 64667
// for k in factories do
64771: LD_ADDR_VAR 0 6
64775: PUSH
64776: LD_VAR 0 2
64780: PUSH
64781: FOR_IN
64782: IFFALSE 64847
// begin weapons := AvailableWeaponList ( k ) ;
64784: LD_ADDR_VAR 0 9
64788: PUSH
64789: LD_VAR 0 6
64793: PPUSH
64794: CALL_OW 478
64798: ST_TO_ADDR
// if not weapons then
64799: LD_VAR 0 9
64803: NOT
64804: IFFALSE 64808
// continue ;
64806: GO 64781
// if weapon in weapons then
64808: LD_VAR 0 8
64812: PUSH
64813: LD_VAR 0 9
64817: IN
64818: IFFALSE 64845
// begin result := [ i , weapon ] ;
64820: LD_ADDR_VAR 0 3
64824: PUSH
64825: LD_VAR 0 4
64829: PUSH
64830: LD_VAR 0 8
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: ST_TO_ADDR
// exit ;
64839: POP
64840: POP
64841: POP
64842: POP
64843: GO 64853
// end ; end ;
64845: GO 64781
64847: POP
64848: POP
// end ;
64849: GO 64667
64851: POP
64852: POP
// end ;
64853: LD_VAR 0 3
64857: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64858: LD_INT 0
64860: PPUSH
// if not side or side > 8 then
64861: LD_VAR 0 3
64865: NOT
64866: PUSH
64867: LD_VAR 0 3
64871: PUSH
64872: LD_INT 8
64874: GREATER
64875: OR
64876: IFFALSE 64880
// exit ;
64878: GO 64939
// if not range then
64880: LD_VAR 0 4
64884: NOT
64885: IFFALSE 64896
// range := - 12 ;
64887: LD_ADDR_VAR 0 4
64891: PUSH
64892: LD_INT 12
64894: NEG
64895: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64896: LD_VAR 0 1
64900: PPUSH
64901: LD_VAR 0 2
64905: PPUSH
64906: LD_VAR 0 3
64910: PPUSH
64911: LD_VAR 0 4
64915: PPUSH
64916: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64920: LD_VAR 0 1
64924: PPUSH
64925: LD_VAR 0 2
64929: PPUSH
64930: LD_VAR 0 3
64934: PPUSH
64935: CALL_OW 331
// end ;
64939: LD_VAR 0 5
64943: RET
// export function Video ( mode ) ; begin
64944: LD_INT 0
64946: PPUSH
// ingame_video = mode ;
64947: LD_ADDR_OWVAR 52
64951: PUSH
64952: LD_VAR 0 1
64956: ST_TO_ADDR
// interface_hidden = mode ;
64957: LD_ADDR_OWVAR 54
64961: PUSH
64962: LD_VAR 0 1
64966: ST_TO_ADDR
// end ;
64967: LD_VAR 0 2
64971: RET
// export function Join ( array , element ) ; begin
64972: LD_INT 0
64974: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64975: LD_ADDR_VAR 0 3
64979: PUSH
64980: LD_VAR 0 1
64984: PPUSH
64985: LD_VAR 0 1
64989: PUSH
64990: LD_INT 1
64992: PLUS
64993: PPUSH
64994: LD_VAR 0 2
64998: PPUSH
64999: CALL_OW 1
65003: ST_TO_ADDR
// end ;
65004: LD_VAR 0 3
65008: RET
// export function JoinUnion ( array , element ) ; begin
65009: LD_INT 0
65011: PPUSH
// result := array union element ;
65012: LD_ADDR_VAR 0 3
65016: PUSH
65017: LD_VAR 0 1
65021: PUSH
65022: LD_VAR 0 2
65026: UNION
65027: ST_TO_ADDR
// end ;
65028: LD_VAR 0 3
65032: RET
// export function GetBehemoths ( side ) ; begin
65033: LD_INT 0
65035: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
65036: LD_ADDR_VAR 0 2
65040: PUSH
65041: LD_INT 22
65043: PUSH
65044: LD_VAR 0 1
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: LD_INT 31
65055: PUSH
65056: LD_INT 25
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PPUSH
65067: CALL_OW 69
65071: ST_TO_ADDR
// end ;
65072: LD_VAR 0 2
65076: RET
// export function Shuffle ( array ) ; var i , index ; begin
65077: LD_INT 0
65079: PPUSH
65080: PPUSH
65081: PPUSH
// result := [ ] ;
65082: LD_ADDR_VAR 0 2
65086: PUSH
65087: EMPTY
65088: ST_TO_ADDR
// if not array then
65089: LD_VAR 0 1
65093: NOT
65094: IFFALSE 65098
// exit ;
65096: GO 65197
// Randomize ;
65098: CALL_OW 10
// for i = array downto 1 do
65102: LD_ADDR_VAR 0 3
65106: PUSH
65107: DOUBLE
65108: LD_VAR 0 1
65112: INC
65113: ST_TO_ADDR
65114: LD_INT 1
65116: PUSH
65117: FOR_DOWNTO
65118: IFFALSE 65195
// begin index := rand ( 1 , array ) ;
65120: LD_ADDR_VAR 0 4
65124: PUSH
65125: LD_INT 1
65127: PPUSH
65128: LD_VAR 0 1
65132: PPUSH
65133: CALL_OW 12
65137: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65138: LD_ADDR_VAR 0 2
65142: PUSH
65143: LD_VAR 0 2
65147: PPUSH
65148: LD_VAR 0 2
65152: PUSH
65153: LD_INT 1
65155: PLUS
65156: PPUSH
65157: LD_VAR 0 1
65161: PUSH
65162: LD_VAR 0 4
65166: ARRAY
65167: PPUSH
65168: CALL_OW 2
65172: ST_TO_ADDR
// array := Delete ( array , index ) ;
65173: LD_ADDR_VAR 0 1
65177: PUSH
65178: LD_VAR 0 1
65182: PPUSH
65183: LD_VAR 0 4
65187: PPUSH
65188: CALL_OW 3
65192: ST_TO_ADDR
// end ;
65193: GO 65117
65195: POP
65196: POP
// end ;
65197: LD_VAR 0 2
65201: RET
// export function GetBaseMaterials ( base ) ; begin
65202: LD_INT 0
65204: PPUSH
// result := [ 0 , 0 , 0 ] ;
65205: LD_ADDR_VAR 0 2
65209: PUSH
65210: LD_INT 0
65212: PUSH
65213: LD_INT 0
65215: PUSH
65216: LD_INT 0
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: LIST
65223: ST_TO_ADDR
// if not base then
65224: LD_VAR 0 1
65228: NOT
65229: IFFALSE 65233
// exit ;
65231: GO 65282
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65233: LD_ADDR_VAR 0 2
65237: PUSH
65238: LD_VAR 0 1
65242: PPUSH
65243: LD_INT 1
65245: PPUSH
65246: CALL_OW 275
65250: PUSH
65251: LD_VAR 0 1
65255: PPUSH
65256: LD_INT 2
65258: PPUSH
65259: CALL_OW 275
65263: PUSH
65264: LD_VAR 0 1
65268: PPUSH
65269: LD_INT 3
65271: PPUSH
65272: CALL_OW 275
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: LIST
65281: ST_TO_ADDR
// end ;
65282: LD_VAR 0 2
65286: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65287: LD_INT 0
65289: PPUSH
65290: PPUSH
// result := array ;
65291: LD_ADDR_VAR 0 3
65295: PUSH
65296: LD_VAR 0 1
65300: ST_TO_ADDR
// if size > 0 then
65301: LD_VAR 0 2
65305: PUSH
65306: LD_INT 0
65308: GREATER
65309: IFFALSE 65355
// for i := array downto size do
65311: LD_ADDR_VAR 0 4
65315: PUSH
65316: DOUBLE
65317: LD_VAR 0 1
65321: INC
65322: ST_TO_ADDR
65323: LD_VAR 0 2
65327: PUSH
65328: FOR_DOWNTO
65329: IFFALSE 65353
// result := Delete ( result , result ) ;
65331: LD_ADDR_VAR 0 3
65335: PUSH
65336: LD_VAR 0 3
65340: PPUSH
65341: LD_VAR 0 3
65345: PPUSH
65346: CALL_OW 3
65350: ST_TO_ADDR
65351: GO 65328
65353: POP
65354: POP
// end ;
65355: LD_VAR 0 3
65359: RET
// export function ComExit ( unit ) ; var tmp ; begin
65360: LD_INT 0
65362: PPUSH
65363: PPUSH
// if not IsInUnit ( unit ) then
65364: LD_VAR 0 1
65368: PPUSH
65369: CALL_OW 310
65373: NOT
65374: IFFALSE 65378
// exit ;
65376: GO 65438
// tmp := IsInUnit ( unit ) ;
65378: LD_ADDR_VAR 0 3
65382: PUSH
65383: LD_VAR 0 1
65387: PPUSH
65388: CALL_OW 310
65392: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65393: LD_VAR 0 3
65397: PPUSH
65398: CALL_OW 247
65402: PUSH
65403: LD_INT 2
65405: EQUAL
65406: IFFALSE 65419
// ComExitVehicle ( unit ) else
65408: LD_VAR 0 1
65412: PPUSH
65413: CALL_OW 121
65417: GO 65428
// ComExitBuilding ( unit ) ;
65419: LD_VAR 0 1
65423: PPUSH
65424: CALL_OW 122
// result := tmp ;
65428: LD_ADDR_VAR 0 2
65432: PUSH
65433: LD_VAR 0 3
65437: ST_TO_ADDR
// end ;
65438: LD_VAR 0 2
65442: RET
// export function ComExitAll ( units ) ; var i ; begin
65443: LD_INT 0
65445: PPUSH
65446: PPUSH
// if not units then
65447: LD_VAR 0 1
65451: NOT
65452: IFFALSE 65456
// exit ;
65454: GO 65482
// for i in units do
65456: LD_ADDR_VAR 0 3
65460: PUSH
65461: LD_VAR 0 1
65465: PUSH
65466: FOR_IN
65467: IFFALSE 65480
// ComExit ( i ) ;
65469: LD_VAR 0 3
65473: PPUSH
65474: CALL 65360 0 1
65478: GO 65466
65480: POP
65481: POP
// end ;
65482: LD_VAR 0 2
65486: RET
// export function ResetHc ; begin
65487: LD_INT 0
65489: PPUSH
// InitHc ;
65490: CALL_OW 19
// hc_importance := 0 ;
65494: LD_ADDR_OWVAR 32
65498: PUSH
65499: LD_INT 0
65501: ST_TO_ADDR
// end ;
65502: LD_VAR 0 1
65506: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65507: LD_INT 0
65509: PPUSH
65510: PPUSH
65511: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65512: LD_ADDR_VAR 0 6
65516: PUSH
65517: LD_VAR 0 1
65521: PUSH
65522: LD_VAR 0 3
65526: PLUS
65527: PUSH
65528: LD_INT 2
65530: DIV
65531: ST_TO_ADDR
// if _x < 0 then
65532: LD_VAR 0 6
65536: PUSH
65537: LD_INT 0
65539: LESS
65540: IFFALSE 65557
// _x := _x * - 1 ;
65542: LD_ADDR_VAR 0 6
65546: PUSH
65547: LD_VAR 0 6
65551: PUSH
65552: LD_INT 1
65554: NEG
65555: MUL
65556: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65557: LD_ADDR_VAR 0 7
65561: PUSH
65562: LD_VAR 0 2
65566: PUSH
65567: LD_VAR 0 4
65571: PLUS
65572: PUSH
65573: LD_INT 2
65575: DIV
65576: ST_TO_ADDR
// if _y < 0 then
65577: LD_VAR 0 7
65581: PUSH
65582: LD_INT 0
65584: LESS
65585: IFFALSE 65602
// _y := _y * - 1 ;
65587: LD_ADDR_VAR 0 7
65591: PUSH
65592: LD_VAR 0 7
65596: PUSH
65597: LD_INT 1
65599: NEG
65600: MUL
65601: ST_TO_ADDR
// result := [ _x , _y ] ;
65602: LD_ADDR_VAR 0 5
65606: PUSH
65607: LD_VAR 0 6
65611: PUSH
65612: LD_VAR 0 7
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: ST_TO_ADDR
// end ;
65621: LD_VAR 0 5
65625: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65626: LD_INT 0
65628: PPUSH
65629: PPUSH
65630: PPUSH
65631: PPUSH
// task := GetTaskList ( unit ) ;
65632: LD_ADDR_VAR 0 7
65636: PUSH
65637: LD_VAR 0 1
65641: PPUSH
65642: CALL_OW 437
65646: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65647: LD_VAR 0 7
65651: NOT
65652: PUSH
65653: LD_VAR 0 1
65657: PPUSH
65658: LD_VAR 0 2
65662: PPUSH
65663: CALL_OW 308
65667: NOT
65668: AND
65669: IFFALSE 65673
// exit ;
65671: GO 65791
// if IsInArea ( unit , area ) then
65673: LD_VAR 0 1
65677: PPUSH
65678: LD_VAR 0 2
65682: PPUSH
65683: CALL_OW 308
65687: IFFALSE 65705
// begin ComMoveToArea ( unit , goAway ) ;
65689: LD_VAR 0 1
65693: PPUSH
65694: LD_VAR 0 3
65698: PPUSH
65699: CALL_OW 113
// exit ;
65703: GO 65791
// end ; if task [ 1 ] [ 1 ] <> M then
65705: LD_VAR 0 7
65709: PUSH
65710: LD_INT 1
65712: ARRAY
65713: PUSH
65714: LD_INT 1
65716: ARRAY
65717: PUSH
65718: LD_STRING M
65720: NONEQUAL
65721: IFFALSE 65725
// exit ;
65723: GO 65791
// x := task [ 1 ] [ 2 ] ;
65725: LD_ADDR_VAR 0 5
65729: PUSH
65730: LD_VAR 0 7
65734: PUSH
65735: LD_INT 1
65737: ARRAY
65738: PUSH
65739: LD_INT 2
65741: ARRAY
65742: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65743: LD_ADDR_VAR 0 6
65747: PUSH
65748: LD_VAR 0 7
65752: PUSH
65753: LD_INT 1
65755: ARRAY
65756: PUSH
65757: LD_INT 3
65759: ARRAY
65760: ST_TO_ADDR
// if InArea ( x , y , area ) then
65761: LD_VAR 0 5
65765: PPUSH
65766: LD_VAR 0 6
65770: PPUSH
65771: LD_VAR 0 2
65775: PPUSH
65776: CALL_OW 309
65780: IFFALSE 65791
// ComStop ( unit ) ;
65782: LD_VAR 0 1
65786: PPUSH
65787: CALL_OW 141
// end ;
65791: LD_VAR 0 4
65795: RET
// export function Abs ( value ) ; begin
65796: LD_INT 0
65798: PPUSH
// result := value ;
65799: LD_ADDR_VAR 0 2
65803: PUSH
65804: LD_VAR 0 1
65808: ST_TO_ADDR
// if value < 0 then
65809: LD_VAR 0 1
65813: PUSH
65814: LD_INT 0
65816: LESS
65817: IFFALSE 65834
// result := value * - 1 ;
65819: LD_ADDR_VAR 0 2
65823: PUSH
65824: LD_VAR 0 1
65828: PUSH
65829: LD_INT 1
65831: NEG
65832: MUL
65833: ST_TO_ADDR
// end ;
65834: LD_VAR 0 2
65838: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65839: LD_INT 0
65841: PPUSH
65842: PPUSH
65843: PPUSH
65844: PPUSH
65845: PPUSH
65846: PPUSH
65847: PPUSH
65848: PPUSH
// if not unit or not building then
65849: LD_VAR 0 1
65853: NOT
65854: PUSH
65855: LD_VAR 0 2
65859: NOT
65860: OR
65861: IFFALSE 65865
// exit ;
65863: GO 66091
// x := GetX ( building ) ;
65865: LD_ADDR_VAR 0 4
65869: PUSH
65870: LD_VAR 0 2
65874: PPUSH
65875: CALL_OW 250
65879: ST_TO_ADDR
// y := GetY ( building ) ;
65880: LD_ADDR_VAR 0 6
65884: PUSH
65885: LD_VAR 0 2
65889: PPUSH
65890: CALL_OW 251
65894: ST_TO_ADDR
// d := GetDir ( building ) ;
65895: LD_ADDR_VAR 0 8
65899: PUSH
65900: LD_VAR 0 2
65904: PPUSH
65905: CALL_OW 254
65909: ST_TO_ADDR
// r := 4 ;
65910: LD_ADDR_VAR 0 9
65914: PUSH
65915: LD_INT 4
65917: ST_TO_ADDR
// for i := 1 to 5 do
65918: LD_ADDR_VAR 0 10
65922: PUSH
65923: DOUBLE
65924: LD_INT 1
65926: DEC
65927: ST_TO_ADDR
65928: LD_INT 5
65930: PUSH
65931: FOR_TO
65932: IFFALSE 66089
// begin _x := ShiftX ( x , d , r + i ) ;
65934: LD_ADDR_VAR 0 5
65938: PUSH
65939: LD_VAR 0 4
65943: PPUSH
65944: LD_VAR 0 8
65948: PPUSH
65949: LD_VAR 0 9
65953: PUSH
65954: LD_VAR 0 10
65958: PLUS
65959: PPUSH
65960: CALL_OW 272
65964: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65965: LD_ADDR_VAR 0 7
65969: PUSH
65970: LD_VAR 0 6
65974: PPUSH
65975: LD_VAR 0 8
65979: PPUSH
65980: LD_VAR 0 9
65984: PUSH
65985: LD_VAR 0 10
65989: PLUS
65990: PPUSH
65991: CALL_OW 273
65995: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65996: LD_VAR 0 5
66000: PPUSH
66001: LD_VAR 0 7
66005: PPUSH
66006: CALL_OW 488
66010: PUSH
66011: LD_VAR 0 5
66015: PPUSH
66016: LD_VAR 0 7
66020: PPUSH
66021: CALL_OW 428
66025: PPUSH
66026: CALL_OW 247
66030: PUSH
66031: LD_INT 3
66033: PUSH
66034: LD_INT 2
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: IN
66041: NOT
66042: AND
66043: IFFALSE 66087
// begin ComMoveXY ( unit , _x , _y ) ;
66045: LD_VAR 0 1
66049: PPUSH
66050: LD_VAR 0 5
66054: PPUSH
66055: LD_VAR 0 7
66059: PPUSH
66060: CALL_OW 111
// result := [ _x , _y ] ;
66064: LD_ADDR_VAR 0 3
66068: PUSH
66069: LD_VAR 0 5
66073: PUSH
66074: LD_VAR 0 7
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: ST_TO_ADDR
// exit ;
66083: POP
66084: POP
66085: GO 66091
// end ; end ;
66087: GO 65931
66089: POP
66090: POP
// end ;
66091: LD_VAR 0 3
66095: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66096: LD_INT 0
66098: PPUSH
66099: PPUSH
66100: PPUSH
// result := 0 ;
66101: LD_ADDR_VAR 0 3
66105: PUSH
66106: LD_INT 0
66108: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66109: LD_VAR 0 1
66113: PUSH
66114: LD_INT 0
66116: LESS
66117: PUSH
66118: LD_VAR 0 1
66122: PUSH
66123: LD_INT 8
66125: GREATER
66126: OR
66127: PUSH
66128: LD_VAR 0 2
66132: PUSH
66133: LD_INT 0
66135: LESS
66136: OR
66137: PUSH
66138: LD_VAR 0 2
66142: PUSH
66143: LD_INT 8
66145: GREATER
66146: OR
66147: IFFALSE 66151
// exit ;
66149: GO 66226
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66151: LD_ADDR_VAR 0 4
66155: PUSH
66156: LD_INT 22
66158: PUSH
66159: LD_VAR 0 2
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PPUSH
66168: CALL_OW 69
66172: PUSH
66173: FOR_IN
66174: IFFALSE 66224
// begin un := UnitShoot ( i ) ;
66176: LD_ADDR_VAR 0 5
66180: PUSH
66181: LD_VAR 0 4
66185: PPUSH
66186: CALL_OW 504
66190: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66191: LD_VAR 0 5
66195: PPUSH
66196: CALL_OW 255
66200: PUSH
66201: LD_VAR 0 1
66205: EQUAL
66206: IFFALSE 66222
// begin result := un ;
66208: LD_ADDR_VAR 0 3
66212: PUSH
66213: LD_VAR 0 5
66217: ST_TO_ADDR
// exit ;
66218: POP
66219: POP
66220: GO 66226
// end ; end ;
66222: GO 66173
66224: POP
66225: POP
// end ;
66226: LD_VAR 0 3
66230: RET
// export function GetCargoBay ( units ) ; begin
66231: LD_INT 0
66233: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66234: LD_ADDR_VAR 0 2
66238: PUSH
66239: LD_VAR 0 1
66243: PPUSH
66244: LD_INT 2
66246: PUSH
66247: LD_INT 34
66249: PUSH
66250: LD_INT 12
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 34
66259: PUSH
66260: LD_INT 51
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: LD_INT 34
66269: PUSH
66270: LD_INT 32
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 34
66279: PUSH
66280: LD_EXP 97
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: LIST
66293: LIST
66294: LIST
66295: PPUSH
66296: CALL_OW 72
66300: ST_TO_ADDR
// end ;
66301: LD_VAR 0 2
66305: RET
// export function Negate ( value ) ; begin
66306: LD_INT 0
66308: PPUSH
// result := not value ;
66309: LD_ADDR_VAR 0 2
66313: PUSH
66314: LD_VAR 0 1
66318: NOT
66319: ST_TO_ADDR
// end ;
66320: LD_VAR 0 2
66324: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
66325: LD_INT 0
66327: PPUSH
// if x1 = x2 then
66328: LD_VAR 0 1
66332: PUSH
66333: LD_VAR 0 3
66337: EQUAL
66338: IFFALSE 66372
// begin if y1 > y2 then
66340: LD_VAR 0 2
66344: PUSH
66345: LD_VAR 0 4
66349: GREATER
66350: IFFALSE 66362
// result := 0 else
66352: LD_ADDR_VAR 0 5
66356: PUSH
66357: LD_INT 0
66359: ST_TO_ADDR
66360: GO 66370
// result := 3 ;
66362: LD_ADDR_VAR 0 5
66366: PUSH
66367: LD_INT 3
66369: ST_TO_ADDR
// exit ;
66370: GO 66458
// end ; if y1 = y2 then
66372: LD_VAR 0 2
66376: PUSH
66377: LD_VAR 0 4
66381: EQUAL
66382: IFFALSE 66416
// begin if x1 > x2 then
66384: LD_VAR 0 1
66388: PUSH
66389: LD_VAR 0 3
66393: GREATER
66394: IFFALSE 66406
// result := 1 else
66396: LD_ADDR_VAR 0 5
66400: PUSH
66401: LD_INT 1
66403: ST_TO_ADDR
66404: GO 66414
// result := 4 ;
66406: LD_ADDR_VAR 0 5
66410: PUSH
66411: LD_INT 4
66413: ST_TO_ADDR
// exit ;
66414: GO 66458
// end ; if x1 > x2 and y1 > y2 then
66416: LD_VAR 0 1
66420: PUSH
66421: LD_VAR 0 3
66425: GREATER
66426: PUSH
66427: LD_VAR 0 2
66431: PUSH
66432: LD_VAR 0 4
66436: GREATER
66437: AND
66438: IFFALSE 66450
// result := 2 else
66440: LD_ADDR_VAR 0 5
66444: PUSH
66445: LD_INT 2
66447: ST_TO_ADDR
66448: GO 66458
// result := 5 ;
66450: LD_ADDR_VAR 0 5
66454: PUSH
66455: LD_INT 5
66457: ST_TO_ADDR
// end ;
66458: LD_VAR 0 5
66462: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66463: LD_INT 0
66465: PPUSH
66466: PPUSH
// if not driver or not IsInUnit ( driver ) then
66467: LD_VAR 0 1
66471: NOT
66472: PUSH
66473: LD_VAR 0 1
66477: PPUSH
66478: CALL_OW 310
66482: NOT
66483: OR
66484: IFFALSE 66488
// exit ;
66486: GO 66578
// vehicle := IsInUnit ( driver ) ;
66488: LD_ADDR_VAR 0 3
66492: PUSH
66493: LD_VAR 0 1
66497: PPUSH
66498: CALL_OW 310
66502: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66503: LD_VAR 0 1
66507: PPUSH
66508: LD_STRING \
66510: PUSH
66511: LD_INT 0
66513: PUSH
66514: LD_INT 0
66516: PUSH
66517: LD_INT 0
66519: PUSH
66520: LD_INT 0
66522: PUSH
66523: LD_INT 0
66525: PUSH
66526: LD_INT 0
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: LIST
66533: LIST
66534: LIST
66535: LIST
66536: LIST
66537: PUSH
66538: LD_STRING E
66540: PUSH
66541: LD_INT 0
66543: PUSH
66544: LD_INT 0
66546: PUSH
66547: LD_VAR 0 3
66551: PUSH
66552: LD_INT 0
66554: PUSH
66555: LD_INT 0
66557: PUSH
66558: LD_INT 0
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: LIST
66565: LIST
66566: LIST
66567: LIST
66568: LIST
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: PPUSH
66574: CALL_OW 446
// end ;
66578: LD_VAR 0 2
66582: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66583: LD_INT 0
66585: PPUSH
66586: PPUSH
// if not driver or not IsInUnit ( driver ) then
66587: LD_VAR 0 1
66591: NOT
66592: PUSH
66593: LD_VAR 0 1
66597: PPUSH
66598: CALL_OW 310
66602: NOT
66603: OR
66604: IFFALSE 66608
// exit ;
66606: GO 66698
// vehicle := IsInUnit ( driver ) ;
66608: LD_ADDR_VAR 0 3
66612: PUSH
66613: LD_VAR 0 1
66617: PPUSH
66618: CALL_OW 310
66622: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66623: LD_VAR 0 1
66627: PPUSH
66628: LD_STRING \
66630: PUSH
66631: LD_INT 0
66633: PUSH
66634: LD_INT 0
66636: PUSH
66637: LD_INT 0
66639: PUSH
66640: LD_INT 0
66642: PUSH
66643: LD_INT 0
66645: PUSH
66646: LD_INT 0
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: PUSH
66658: LD_STRING E
66660: PUSH
66661: LD_INT 0
66663: PUSH
66664: LD_INT 0
66666: PUSH
66667: LD_VAR 0 3
66671: PUSH
66672: LD_INT 0
66674: PUSH
66675: LD_INT 0
66677: PUSH
66678: LD_INT 0
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: LIST
66687: LIST
66688: LIST
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PPUSH
66694: CALL_OW 447
// end ;
66698: LD_VAR 0 2
66702: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66703: LD_INT 0
66705: PPUSH
66706: PPUSH
66707: PPUSH
// tmp := [ ] ;
66708: LD_ADDR_VAR 0 5
66712: PUSH
66713: EMPTY
66714: ST_TO_ADDR
// for i in units do
66715: LD_ADDR_VAR 0 4
66719: PUSH
66720: LD_VAR 0 1
66724: PUSH
66725: FOR_IN
66726: IFFALSE 66764
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66728: LD_ADDR_VAR 0 5
66732: PUSH
66733: LD_VAR 0 5
66737: PPUSH
66738: LD_VAR 0 5
66742: PUSH
66743: LD_INT 1
66745: PLUS
66746: PPUSH
66747: LD_VAR 0 4
66751: PPUSH
66752: CALL_OW 256
66756: PPUSH
66757: CALL_OW 2
66761: ST_TO_ADDR
66762: GO 66725
66764: POP
66765: POP
// if not tmp then
66766: LD_VAR 0 5
66770: NOT
66771: IFFALSE 66775
// exit ;
66773: GO 66823
// if asc then
66775: LD_VAR 0 2
66779: IFFALSE 66803
// result := SortListByListAsc ( units , tmp ) else
66781: LD_ADDR_VAR 0 3
66785: PUSH
66786: LD_VAR 0 1
66790: PPUSH
66791: LD_VAR 0 5
66795: PPUSH
66796: CALL_OW 76
66800: ST_TO_ADDR
66801: GO 66823
// result := SortListByListDesc ( units , tmp ) ;
66803: LD_ADDR_VAR 0 3
66807: PUSH
66808: LD_VAR 0 1
66812: PPUSH
66813: LD_VAR 0 5
66817: PPUSH
66818: CALL_OW 77
66822: ST_TO_ADDR
// end ;
66823: LD_VAR 0 3
66827: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66828: LD_INT 0
66830: PPUSH
66831: PPUSH
// task := GetTaskList ( mech ) ;
66832: LD_ADDR_VAR 0 4
66836: PUSH
66837: LD_VAR 0 1
66841: PPUSH
66842: CALL_OW 437
66846: ST_TO_ADDR
// if not task then
66847: LD_VAR 0 4
66851: NOT
66852: IFFALSE 66856
// exit ;
66854: GO 66898
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66856: LD_ADDR_VAR 0 3
66860: PUSH
66861: LD_VAR 0 4
66865: PUSH
66866: LD_INT 1
66868: ARRAY
66869: PUSH
66870: LD_INT 1
66872: ARRAY
66873: PUSH
66874: LD_STRING r
66876: EQUAL
66877: PUSH
66878: LD_VAR 0 4
66882: PUSH
66883: LD_INT 1
66885: ARRAY
66886: PUSH
66887: LD_INT 4
66889: ARRAY
66890: PUSH
66891: LD_VAR 0 2
66895: EQUAL
66896: AND
66897: ST_TO_ADDR
// end ;
66898: LD_VAR 0 3
66902: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66903: LD_INT 0
66905: PPUSH
// SetDir ( unit , d ) ;
66906: LD_VAR 0 1
66910: PPUSH
66911: LD_VAR 0 4
66915: PPUSH
66916: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66920: LD_VAR 0 1
66924: PPUSH
66925: LD_VAR 0 2
66929: PPUSH
66930: LD_VAR 0 3
66934: PPUSH
66935: LD_VAR 0 5
66939: PPUSH
66940: CALL_OW 48
// end ;
66944: LD_VAR 0 6
66948: RET
// export function ToNaturalNumber ( number ) ; begin
66949: LD_INT 0
66951: PPUSH
// result := number div 1 ;
66952: LD_ADDR_VAR 0 2
66956: PUSH
66957: LD_VAR 0 1
66961: PUSH
66962: LD_INT 1
66964: DIV
66965: ST_TO_ADDR
// if number < 0 then
66966: LD_VAR 0 1
66970: PUSH
66971: LD_INT 0
66973: LESS
66974: IFFALSE 66984
// result := 0 ;
66976: LD_ADDR_VAR 0 2
66980: PUSH
66981: LD_INT 0
66983: ST_TO_ADDR
// end ;
66984: LD_VAR 0 2
66988: RET
// export function SortByClass ( units , class ) ; var un ; begin
66989: LD_INT 0
66991: PPUSH
66992: PPUSH
// if not units or not class then
66993: LD_VAR 0 1
66997: NOT
66998: PUSH
66999: LD_VAR 0 2
67003: NOT
67004: OR
67005: IFFALSE 67009
// exit ;
67007: GO 67104
// result := [ ] ;
67009: LD_ADDR_VAR 0 3
67013: PUSH
67014: EMPTY
67015: ST_TO_ADDR
// for un in units do
67016: LD_ADDR_VAR 0 4
67020: PUSH
67021: LD_VAR 0 1
67025: PUSH
67026: FOR_IN
67027: IFFALSE 67102
// if GetClass ( un ) = class then
67029: LD_VAR 0 4
67033: PPUSH
67034: CALL_OW 257
67038: PUSH
67039: LD_VAR 0 2
67043: EQUAL
67044: IFFALSE 67071
// result := Insert ( result , 1 , un ) else
67046: LD_ADDR_VAR 0 3
67050: PUSH
67051: LD_VAR 0 3
67055: PPUSH
67056: LD_INT 1
67058: PPUSH
67059: LD_VAR 0 4
67063: PPUSH
67064: CALL_OW 2
67068: ST_TO_ADDR
67069: GO 67100
// result := Replace ( result , result + 1 , un ) ;
67071: LD_ADDR_VAR 0 3
67075: PUSH
67076: LD_VAR 0 3
67080: PPUSH
67081: LD_VAR 0 3
67085: PUSH
67086: LD_INT 1
67088: PLUS
67089: PPUSH
67090: LD_VAR 0 4
67094: PPUSH
67095: CALL_OW 1
67099: ST_TO_ADDR
67100: GO 67026
67102: POP
67103: POP
// end ;
67104: LD_VAR 0 3
67108: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67109: LD_INT 0
67111: PPUSH
67112: PPUSH
67113: PPUSH
67114: PPUSH
67115: PPUSH
67116: PPUSH
67117: PPUSH
// result := [ ] ;
67118: LD_ADDR_VAR 0 4
67122: PUSH
67123: EMPTY
67124: ST_TO_ADDR
// if x - r < 0 then
67125: LD_VAR 0 1
67129: PUSH
67130: LD_VAR 0 3
67134: MINUS
67135: PUSH
67136: LD_INT 0
67138: LESS
67139: IFFALSE 67151
// min_x := 0 else
67141: LD_ADDR_VAR 0 8
67145: PUSH
67146: LD_INT 0
67148: ST_TO_ADDR
67149: GO 67167
// min_x := x - r ;
67151: LD_ADDR_VAR 0 8
67155: PUSH
67156: LD_VAR 0 1
67160: PUSH
67161: LD_VAR 0 3
67165: MINUS
67166: ST_TO_ADDR
// if y - r < 0 then
67167: LD_VAR 0 2
67171: PUSH
67172: LD_VAR 0 3
67176: MINUS
67177: PUSH
67178: LD_INT 0
67180: LESS
67181: IFFALSE 67193
// min_y := 0 else
67183: LD_ADDR_VAR 0 7
67187: PUSH
67188: LD_INT 0
67190: ST_TO_ADDR
67191: GO 67209
// min_y := y - r ;
67193: LD_ADDR_VAR 0 7
67197: PUSH
67198: LD_VAR 0 2
67202: PUSH
67203: LD_VAR 0 3
67207: MINUS
67208: ST_TO_ADDR
// max_x := x + r ;
67209: LD_ADDR_VAR 0 9
67213: PUSH
67214: LD_VAR 0 1
67218: PUSH
67219: LD_VAR 0 3
67223: PLUS
67224: ST_TO_ADDR
// max_y := y + r ;
67225: LD_ADDR_VAR 0 10
67229: PUSH
67230: LD_VAR 0 2
67234: PUSH
67235: LD_VAR 0 3
67239: PLUS
67240: ST_TO_ADDR
// for _x = min_x to max_x do
67241: LD_ADDR_VAR 0 5
67245: PUSH
67246: DOUBLE
67247: LD_VAR 0 8
67251: DEC
67252: ST_TO_ADDR
67253: LD_VAR 0 9
67257: PUSH
67258: FOR_TO
67259: IFFALSE 67360
// for _y = min_y to max_y do
67261: LD_ADDR_VAR 0 6
67265: PUSH
67266: DOUBLE
67267: LD_VAR 0 7
67271: DEC
67272: ST_TO_ADDR
67273: LD_VAR 0 10
67277: PUSH
67278: FOR_TO
67279: IFFALSE 67356
// begin if not ValidHex ( _x , _y ) then
67281: LD_VAR 0 5
67285: PPUSH
67286: LD_VAR 0 6
67290: PPUSH
67291: CALL_OW 488
67295: NOT
67296: IFFALSE 67300
// continue ;
67298: GO 67278
// if GetResourceTypeXY ( _x , _y ) then
67300: LD_VAR 0 5
67304: PPUSH
67305: LD_VAR 0 6
67309: PPUSH
67310: CALL_OW 283
67314: IFFALSE 67354
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67316: LD_ADDR_VAR 0 4
67320: PUSH
67321: LD_VAR 0 4
67325: PPUSH
67326: LD_VAR 0 4
67330: PUSH
67331: LD_INT 1
67333: PLUS
67334: PPUSH
67335: LD_VAR 0 5
67339: PUSH
67340: LD_VAR 0 6
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: PPUSH
67349: CALL_OW 1
67353: ST_TO_ADDR
// end ;
67354: GO 67278
67356: POP
67357: POP
67358: GO 67258
67360: POP
67361: POP
// end ;
67362: LD_VAR 0 4
67366: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67367: LD_INT 0
67369: PPUSH
67370: PPUSH
67371: PPUSH
67372: PPUSH
67373: PPUSH
67374: PPUSH
67375: PPUSH
67376: PPUSH
// if not units then
67377: LD_VAR 0 1
67381: NOT
67382: IFFALSE 67386
// exit ;
67384: GO 67811
// result := UnitFilter ( units , [ f_ok ] ) ;
67386: LD_ADDR_VAR 0 3
67390: PUSH
67391: LD_VAR 0 1
67395: PPUSH
67396: LD_INT 50
67398: PUSH
67399: EMPTY
67400: LIST
67401: PPUSH
67402: CALL_OW 72
67406: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67407: LD_ADDR_VAR 0 8
67411: PUSH
67412: LD_VAR 0 1
67416: PUSH
67417: LD_INT 1
67419: ARRAY
67420: PPUSH
67421: CALL_OW 255
67425: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
67426: LD_ADDR_VAR 0 10
67430: PUSH
67431: LD_INT 29
67433: PUSH
67434: LD_EXP 100
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: ST_TO_ADDR
// if not result then
67443: LD_VAR 0 3
67447: NOT
67448: IFFALSE 67452
// exit ;
67450: GO 67811
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67452: LD_ADDR_VAR 0 5
67456: PUSH
67457: LD_INT 81
67459: PUSH
67460: LD_VAR 0 8
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: PPUSH
67469: CALL_OW 69
67473: ST_TO_ADDR
// for i in result do
67474: LD_ADDR_VAR 0 4
67478: PUSH
67479: LD_VAR 0 3
67483: PUSH
67484: FOR_IN
67485: IFFALSE 67809
// begin tag := GetTag ( i ) + 1 ;
67487: LD_ADDR_VAR 0 9
67491: PUSH
67492: LD_VAR 0 4
67496: PPUSH
67497: CALL_OW 110
67501: PUSH
67502: LD_INT 1
67504: PLUS
67505: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
67506: LD_ADDR_VAR 0 7
67510: PUSH
67511: LD_VAR 0 4
67515: PPUSH
67516: CALL_OW 250
67520: PPUSH
67521: LD_VAR 0 4
67525: PPUSH
67526: CALL_OW 251
67530: PPUSH
67531: LD_INT 6
67533: PPUSH
67534: CALL 67109 0 3
67538: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
67539: LD_VAR 0 7
67543: PUSH
67544: LD_VAR 0 4
67548: PPUSH
67549: CALL_OW 264
67553: PUSH
67554: LD_VAR 0 10
67558: IN
67559: NOT
67560: AND
67561: IFFALSE 67600
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67563: LD_VAR 0 4
67567: PPUSH
67568: LD_VAR 0 7
67572: PUSH
67573: LD_INT 1
67575: ARRAY
67576: PUSH
67577: LD_INT 1
67579: ARRAY
67580: PPUSH
67581: LD_VAR 0 7
67585: PUSH
67586: LD_INT 1
67588: ARRAY
67589: PUSH
67590: LD_INT 2
67592: ARRAY
67593: PPUSH
67594: CALL_OW 116
67598: GO 67807
// if path > tag then
67600: LD_VAR 0 2
67604: PUSH
67605: LD_VAR 0 9
67609: GREATER
67610: IFFALSE 67777
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
67612: LD_ADDR_VAR 0 6
67616: PUSH
67617: LD_VAR 0 5
67621: PPUSH
67622: LD_INT 91
67624: PUSH
67625: LD_VAR 0 4
67629: PUSH
67630: LD_INT 12
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: LIST
67637: PPUSH
67638: CALL_OW 72
67642: ST_TO_ADDR
// if nearEnemy then
67643: LD_VAR 0 6
67647: IFFALSE 67675
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67649: LD_VAR 0 4
67653: PPUSH
67654: LD_VAR 0 6
67658: PPUSH
67659: LD_VAR 0 4
67663: PPUSH
67664: CALL_OW 74
67668: PPUSH
67669: CALL_OW 115
67673: GO 67775
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67675: LD_VAR 0 4
67679: PPUSH
67680: LD_VAR 0 2
67684: PUSH
67685: LD_VAR 0 9
67689: ARRAY
67690: PUSH
67691: LD_INT 1
67693: ARRAY
67694: PPUSH
67695: LD_VAR 0 2
67699: PUSH
67700: LD_VAR 0 9
67704: ARRAY
67705: PUSH
67706: LD_INT 2
67708: ARRAY
67709: PPUSH
67710: CALL_OW 297
67714: PUSH
67715: LD_INT 6
67717: GREATER
67718: IFFALSE 67761
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67720: LD_VAR 0 4
67724: PPUSH
67725: LD_VAR 0 2
67729: PUSH
67730: LD_VAR 0 9
67734: ARRAY
67735: PUSH
67736: LD_INT 1
67738: ARRAY
67739: PPUSH
67740: LD_VAR 0 2
67744: PUSH
67745: LD_VAR 0 9
67749: ARRAY
67750: PUSH
67751: LD_INT 2
67753: ARRAY
67754: PPUSH
67755: CALL_OW 114
67759: GO 67775
// SetTag ( i , tag ) ;
67761: LD_VAR 0 4
67765: PPUSH
67766: LD_VAR 0 9
67770: PPUSH
67771: CALL_OW 109
// end else
67775: GO 67807
// if enemy then
67777: LD_VAR 0 5
67781: IFFALSE 67807
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67783: LD_VAR 0 4
67787: PPUSH
67788: LD_VAR 0 5
67792: PPUSH
67793: LD_VAR 0 4
67797: PPUSH
67798: CALL_OW 74
67802: PPUSH
67803: CALL_OW 115
// end ;
67807: GO 67484
67809: POP
67810: POP
// end ; end_of_file
67811: LD_VAR 0 3
67815: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
67816: LD_INT 0
67818: PPUSH
// ar_miner := 81 ;
67819: LD_ADDR_EXP 103
67823: PUSH
67824: LD_INT 81
67826: ST_TO_ADDR
// ar_crane := 88 ;
67827: LD_ADDR_EXP 102
67831: PUSH
67832: LD_INT 88
67834: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
67835: LD_ADDR_EXP 97
67839: PUSH
67840: LD_INT 89
67842: ST_TO_ADDR
// us_hack := 99 ;
67843: LD_ADDR_EXP 98
67847: PUSH
67848: LD_INT 99
67850: ST_TO_ADDR
// us_artillery := 97 ;
67851: LD_ADDR_EXP 99
67855: PUSH
67856: LD_INT 97
67858: ST_TO_ADDR
// ar_bio_bomb := 91 ;
67859: LD_ADDR_EXP 100
67863: PUSH
67864: LD_INT 91
67866: ST_TO_ADDR
// ar_mortar := 92 ;
67867: LD_ADDR_EXP 101
67871: PUSH
67872: LD_INT 92
67874: ST_TO_ADDR
// ru_radar := 98 ;
67875: LD_ADDR_EXP 96
67879: PUSH
67880: LD_INT 98
67882: ST_TO_ADDR
// tech_Artillery := 80 ;
67883: LD_ADDR_EXP 104
67887: PUSH
67888: LD_INT 80
67890: ST_TO_ADDR
// tech_RadMat := 81 ;
67891: LD_ADDR_EXP 105
67895: PUSH
67896: LD_INT 81
67898: ST_TO_ADDR
// tech_BasicTools := 82 ;
67899: LD_ADDR_EXP 106
67903: PUSH
67904: LD_INT 82
67906: ST_TO_ADDR
// tech_Cargo := 83 ;
67907: LD_ADDR_EXP 107
67911: PUSH
67912: LD_INT 83
67914: ST_TO_ADDR
// tech_Track := 84 ;
67915: LD_ADDR_EXP 108
67919: PUSH
67920: LD_INT 84
67922: ST_TO_ADDR
// tech_Crane := 85 ;
67923: LD_ADDR_EXP 109
67927: PUSH
67928: LD_INT 85
67930: ST_TO_ADDR
// tech_Bulldozer := 86 ;
67931: LD_ADDR_EXP 110
67935: PUSH
67936: LD_INT 86
67938: ST_TO_ADDR
// tech_Hovercraft := 87 ;
67939: LD_ADDR_EXP 111
67943: PUSH
67944: LD_INT 87
67946: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
67947: LD_ADDR_EXP 112
67951: PUSH
67952: LD_INT 88
67954: ST_TO_ADDR
// class_mastodont := 31 ;
67955: LD_ADDR_EXP 113
67959: PUSH
67960: LD_INT 31
67962: ST_TO_ADDR
// class_horse := 21 ;
67963: LD_ADDR_EXP 114
67967: PUSH
67968: LD_INT 21
67970: ST_TO_ADDR
// end ;
67971: LD_VAR 0 1
67975: RET
// every 1 do
67976: GO 67978
67978: DISABLE
// InitGlobalVariables ; end_of_file
67979: CALL 67816 0 0
67983: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67984: LD_VAR 0 1
67988: PUSH
67989: LD_INT 200
67991: DOUBLE
67992: GREATEREQUAL
67993: IFFALSE 68001
67995: LD_INT 299
67997: DOUBLE
67998: LESSEQUAL
67999: IFTRUE 68003
68001: GO 68035
68003: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68004: LD_VAR 0 1
68008: PPUSH
68009: LD_VAR 0 2
68013: PPUSH
68014: LD_VAR 0 3
68018: PPUSH
68019: LD_VAR 0 4
68023: PPUSH
68024: LD_VAR 0 5
68028: PPUSH
68029: CALL 10567 0 5
68033: GO 68112
68035: LD_INT 300
68037: DOUBLE
68038: GREATEREQUAL
68039: IFFALSE 68047
68041: LD_INT 399
68043: DOUBLE
68044: LESSEQUAL
68045: IFTRUE 68049
68047: GO 68111
68049: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68050: LD_VAR 0 1
68054: PPUSH
68055: LD_VAR 0 2
68059: PPUSH
68060: LD_VAR 0 3
68064: PPUSH
68065: LD_VAR 0 4
68069: PPUSH
68070: LD_VAR 0 5
68074: PPUSH
68075: LD_VAR 0 6
68079: PPUSH
68080: LD_VAR 0 7
68084: PPUSH
68085: LD_VAR 0 8
68089: PPUSH
68090: LD_VAR 0 9
68094: PPUSH
68095: LD_VAR 0 10
68099: PPUSH
68100: LD_VAR 0 11
68104: PPUSH
68105: CALL 26255 0 11
68109: GO 68112
68111: POP
// end ;
68112: PPOPN 11
68114: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68115: LD_VAR 0 1
68119: PPUSH
68120: LD_VAR 0 2
68124: PPUSH
68125: LD_VAR 0 3
68129: PPUSH
68130: LD_VAR 0 4
68134: PPUSH
68135: LD_VAR 0 5
68139: PPUSH
68140: CALL 10559 0 5
// end ; end_of_file
68144: PPOPN 5
68146: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68147: LD_VAR 0 1
68151: PPUSH
68152: LD_VAR 0 2
68156: PPUSH
68157: LD_VAR 0 3
68161: PPUSH
68162: LD_VAR 0 4
68166: PPUSH
68167: LD_VAR 0 5
68171: PPUSH
68172: LD_VAR 0 6
68176: PPUSH
68177: CALL 14450 0 6
// end ;
68181: PPOPN 6
68183: END
