// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 98 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 24
// Difficulty := 2 else
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 2
  21: ST_TO_ADDR
  22: GO 37
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_OWVAR 67
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// PrepareNature ( 3 , 3 , 4 , 2 , 1 , 0 , 0 , natureArea , 0 ) ;
  37: LD_INT 3
  39: PPUSH
  40: LD_INT 3
  42: PPUSH
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 2
  48: PPUSH
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 0
  54: PPUSH
  55: LD_INT 0
  57: PPUSH
  58: LD_INT 8
  60: PPUSH
  61: LD_INT 0
  63: PPUSH
  64: CALL 67878 0 9
// PrepareRussian ;
  68: CALL 896 0 0
// PrepareAmerican ;
  72: CALL 202 0 0
// PrepareSikorski ;
  76: CALL 694 0 0
// Action ;
  80: CALL 7137 0 0
// if debug then
  84: LD_EXP 1
  88: IFFALSE 97
// FogOff ( 1 ) ;
  90: LD_INT 1
  92: PPUSH
  93: CALL_OW 344
// end ;
  97: END
// export debug , activeGrishkoAI , allowToPatrol , spottedByPatrol , russianAlert , startAttackOnOmicron , omicronFall , retreatFromOmicron , sikorskiInOmicron , usLoseCounter , ruLoseCounter , tanksCounter ; function Init ; begin
  98: LD_INT 0
 100: PPUSH
// debug := 0 ;
 101: LD_ADDR_EXP 1
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// activeGrishkoAI := true ;
 109: LD_ADDR_EXP 2
 113: PUSH
 114: LD_INT 1
 116: ST_TO_ADDR
// allowToPatrol := true ;
 117: LD_ADDR_EXP 3
 121: PUSH
 122: LD_INT 1
 124: ST_TO_ADDR
// spottedByPatrol := false ;
 125: LD_ADDR_EXP 4
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// russianAlert := false ;
 133: LD_ADDR_EXP 5
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// startAttackOnOmicron := false ;
 141: LD_ADDR_EXP 6
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// omicronFall := false ;
 149: LD_ADDR_EXP 7
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// retreatFromOmicron := false ;
 157: LD_ADDR_EXP 8
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// sikorskiInOmicron := false ;
 165: LD_ADDR_EXP 9
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// usLoseCounter := 0 ;
 173: LD_ADDR_EXP 10
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// ruLoseCounter := 0 ;
 181: LD_ADDR_EXP 11
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// tanksCounter := 0 ;
 189: LD_ADDR_EXP 12
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// end ; end_of_file
 197: LD_VAR 0 1
 201: RET
// export omicronSquad , Sikorski , Harrison ; export function PrepareAmerican ; var i , un , veh ; begin
 202: LD_INT 0
 204: PPUSH
 205: PPUSH
 206: PPUSH
 207: PPUSH
// SetBName ( omikron , omikron ) ;
 208: LD_INT 64
 210: PPUSH
 211: LD_STRING omikron
 213: PPUSH
 214: CALL_OW 500
// uc_side := 4 ;
 218: LD_ADDR_OWVAR 20
 222: PUSH
 223: LD_INT 4
 225: ST_TO_ADDR
// uc_nation := 1 ;
 226: LD_ADDR_OWVAR 21
 230: PUSH
 231: LD_INT 1
 233: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_STRING Harisson
 241: PPUSH
 242: LD_INT 0
 244: PPUSH
 245: LD_STRING 
 247: PPUSH
 248: CALL 33071 0 3
 252: ST_TO_ADDR
// omicronSquad := [ ] ;
 253: LD_ADDR_EXP 13
 257: PUSH
 258: EMPTY
 259: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
 260: LD_ADDR_VAR 0 2
 264: PUSH
 265: LD_INT 22
 267: PUSH
 268: LD_INT 4
 270: PUSH
 271: EMPTY
 272: LIST
 273: LIST
 274: PUSH
 275: LD_INT 2
 277: PUSH
 278: LD_INT 30
 280: PUSH
 281: LD_INT 32
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: PUSH
 288: LD_INT 30
 290: PUSH
 291: LD_INT 31
 293: PUSH
 294: EMPTY
 295: LIST
 296: LIST
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: LIST
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PPUSH
 307: CALL_OW 69
 311: PUSH
 312: FOR_IN
 313: IFFALSE 393
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
 315: LD_INT 1
 317: PPUSH
 318: LD_INT 1
 320: PPUSH
 321: LD_INT 1
 323: PPUSH
 324: CALL_OW 380
// un := CreateHuman ;
 328: LD_ADDR_VAR 0 3
 332: PUSH
 333: CALL_OW 44
 337: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 338: LD_ADDR_EXP 13
 342: PUSH
 343: LD_EXP 13
 347: PUSH
 348: LD_VAR 0 3
 352: UNION
 353: ST_TO_ADDR
// SetDir ( un , GetDir ( i ) - 3 ) ;
 354: LD_VAR 0 3
 358: PPUSH
 359: LD_VAR 0 2
 363: PPUSH
 364: CALL_OW 254
 368: PUSH
 369: LD_INT 3
 371: MINUS
 372: PPUSH
 373: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
 377: LD_VAR 0 3
 381: PPUSH
 382: LD_VAR 0 2
 386: PPUSH
 387: CALL_OW 52
// end ;
 391: GO 312
 393: POP
 394: POP
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
 395: LD_ADDR_VAR 0 2
 399: PUSH
 400: DOUBLE
 401: LD_INT 1
 403: DEC
 404: ST_TO_ADDR
 405: LD_INT 3
 407: PUSH
 408: LD_INT 2
 410: PUSH
 411: LD_INT 2
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: LIST
 418: PUSH
 419: LD_OWVAR 67
 423: ARRAY
 424: PUSH
 425: FOR_TO
 426: IFFALSE 505
// begin PrepareHuman ( false , 2 , 2 ) ;
 428: LD_INT 0
 430: PPUSH
 431: LD_INT 2
 433: PPUSH
 434: LD_INT 2
 436: PPUSH
 437: CALL_OW 380
// un := CreateHuman ;
 441: LD_ADDR_VAR 0 3
 445: PUSH
 446: CALL_OW 44
 450: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 451: LD_ADDR_EXP 13
 455: PUSH
 456: LD_EXP 13
 460: PUSH
 461: LD_VAR 0 3
 465: UNION
 466: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
 467: LD_VAR 0 3
 471: PPUSH
 472: LD_INT 64
 474: PPUSH
 475: CALL_OW 52
// ComExitBuilding ( un ) ;
 479: LD_VAR 0 3
 483: PPUSH
 484: CALL_OW 122
// AddComMoveXY ( un , 19 , 23 ) ;
 488: LD_VAR 0 3
 492: PPUSH
 493: LD_INT 19
 495: PPUSH
 496: LD_INT 23
 498: PPUSH
 499: CALL_OW 171
// end ;
 503: GO 425
 505: POP
 506: POP
// for i := 1 to 2 do
 507: LD_ADDR_VAR 0 2
 511: PUSH
 512: DOUBLE
 513: LD_INT 1
 515: DEC
 516: ST_TO_ADDR
 517: LD_INT 2
 519: PUSH
 520: FOR_TO
 521: IFFALSE 687
// begin PrepareVehicle ( [ us_medium_wheeled , us_medium_tracked ] [ i ] , engine_solar , control_manual , [ us_light_gun , us_gatling_gun ] [ i ] , 100 ) ;
 523: LD_INT 2
 525: PUSH
 526: LD_INT 3
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_VAR 0 2
 537: ARRAY
 538: PPUSH
 539: LD_INT 2
 541: PPUSH
 542: LD_INT 1
 544: PPUSH
 545: LD_INT 3
 547: PUSH
 548: LD_INT 4
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: PUSH
 555: LD_VAR 0 2
 559: ARRAY
 560: PPUSH
 561: LD_INT 100
 563: PPUSH
 564: CALL 38057 0 5
// veh := CreateVehicle ;
 568: LD_ADDR_VAR 0 4
 572: PUSH
 573: CALL_OW 45
 577: ST_TO_ADDR
// PlaceUnitXYR ( veh , 28 , 37 , 6 , false ) ;
 578: LD_VAR 0 4
 582: PPUSH
 583: LD_INT 28
 585: PPUSH
 586: LD_INT 37
 588: PPUSH
 589: LD_INT 6
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
 599: LD_INT 0
 601: PPUSH
 602: LD_INT 3
 604: PPUSH
 605: LD_INT 2
 607: PPUSH
 608: CALL_OW 380
// un := CreateHuman ;
 612: LD_ADDR_VAR 0 3
 616: PUSH
 617: CALL_OW 44
 621: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 622: LD_ADDR_EXP 13
 626: PUSH
 627: LD_EXP 13
 631: PUSH
 632: LD_VAR 0 3
 636: UNION
 637: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
 638: LD_VAR 0 3
 642: PPUSH
 643: LD_VAR 0 4
 647: PPUSH
 648: CALL_OW 52
// ComMoveXY ( un , GetX ( un ) + 3 , GetY ( un ) ) ;
 652: LD_VAR 0 3
 656: PPUSH
 657: LD_VAR 0 3
 661: PPUSH
 662: CALL_OW 250
 666: PUSH
 667: LD_INT 3
 669: PLUS
 670: PPUSH
 671: LD_VAR 0 3
 675: PPUSH
 676: CALL_OW 251
 680: PPUSH
 681: CALL_OW 111
// end ;
 685: GO 520
 687: POP
 688: POP
// end ;
 689: LD_VAR 0 1
 693: RET
// export function PrepareSikorski ; var veh ; begin
 694: LD_INT 0
 696: PPUSH
 697: PPUSH
// uc_side := 1 ;
 698: LD_ADDR_OWVAR 20
 702: PUSH
 703: LD_INT 1
 705: ST_TO_ADDR
// uc_nation := 1 ;
 706: LD_ADDR_OWVAR 21
 710: PUSH
 711: LD_INT 1
 713: ST_TO_ADDR
// hc_importance := 100 ;
 714: LD_ADDR_OWVAR 32
 718: PUSH
 719: LD_INT 100
 721: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
 722: LD_ADDR_OWVAR 26
 726: PUSH
 727: LD_STRING Jeremy Sikorski
 729: ST_TO_ADDR
// hc_gallery := us ;
 730: LD_ADDR_OWVAR 33
 734: PUSH
 735: LD_STRING us
 737: ST_TO_ADDR
// hc_face_number := 19 ;
 738: LD_ADDR_OWVAR 34
 742: PUSH
 743: LD_INT 19
 745: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , [ 4 , 4 , 3 ] [ Difficulty ] ) ;
 746: LD_INT 1
 748: PPUSH
 749: LD_INT 1
 751: PPUSH
 752: LD_INT 4
 754: PUSH
 755: LD_INT 4
 757: PUSH
 758: LD_INT 3
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: LIST
 765: PUSH
 766: LD_OWVAR 67
 770: ARRAY
 771: PPUSH
 772: CALL_OW 380
// hc_attr := [ 10 , 12 ] ;
 776: LD_ADDR_OWVAR 29
 780: PUSH
 781: LD_INT 10
 783: PUSH
 784: LD_INT 12
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: ST_TO_ADDR
// Sikorski := CreateHuman ;
 791: LD_ADDR_EXP 14
 795: PUSH
 796: CALL_OW 44
 800: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_light_gun , 88 ) ;
 801: LD_INT 3
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: LD_INT 1
 809: PPUSH
 810: LD_INT 3
 812: PPUSH
 813: LD_INT 88
 815: PPUSH
 816: CALL 38057 0 5
// veh := CreateVehicle ;
 820: LD_ADDR_VAR 0 2
 824: PUSH
 825: CALL_OW 45
 829: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
 830: LD_VAR 0 2
 834: PPUSH
 835: LD_INT 3
 837: PPUSH
 838: CALL_OW 233
// PlaceUnitXY ( veh , 106 , 2 , false ) ;
 842: LD_VAR 0 2
 846: PPUSH
 847: LD_INT 106
 849: PPUSH
 850: LD_INT 2
 852: PPUSH
 853: LD_INT 0
 855: PPUSH
 856: CALL_OW 48
// PlaceHumanInUnit ( Sikorski , veh ) ;
 860: LD_EXP 14
 864: PPUSH
 865: LD_VAR 0 2
 869: PPUSH
 870: CALL_OW 52
// SetMark ( veh , - 1 ) ;
 874: LD_VAR 0 2
 878: PPUSH
 879: LD_INT 1
 881: NEG
 882: PPUSH
 883: CALL_OW 242
// InitHc ;
 887: CALL_OW 19
// end ; end_of_file
 891: LD_VAR 0 1
 895: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo ; export function PrepareRussian ; var i , un , arm , bar , bun , tmp ; begin
 896: LD_INT 0
 898: PPUSH
 899: PPUSH
 900: PPUSH
 901: PPUSH
 902: PPUSH
 903: PPUSH
 904: PPUSH
// ResetHc ;
 905: CALL 71752 0 0
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
 909: LD_ADDR_VAR 0 2
 913: PUSH
 914: LD_INT 21
 916: PUSH
 917: LD_INT 3
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 23
 926: PUSH
 927: LD_INT 3
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: PPUSH
 938: CALL_OW 69
 942: PUSH
 943: FOR_IN
 944: IFFALSE 960
// SetBLevel ( i , 5 ) ;
 946: LD_VAR 0 2
 950: PPUSH
 951: LD_INT 5
 953: PPUSH
 954: CALL_OW 241
 958: GO 943
 960: POP
 961: POP
// SetBName ( kirov , kirov ) ;
 962: LD_INT 71
 964: PPUSH
 965: LD_STRING kirov
 967: PPUSH
 968: CALL_OW 500
// SetBName ( beria , beria ) ;
 972: LD_INT 106
 974: PPUSH
 975: LD_STRING beria
 977: PPUSH
 978: CALL_OW 500
// SetBName ( kagan , kagan ) ;
 982: LD_INT 112
 984: PPUSH
 985: LD_STRING kagan
 987: PPUSH
 988: CALL_OW 500
// uc_side := 6 ;
 992: LD_ADDR_OWVAR 20
 996: PUSH
 997: LD_INT 6
 999: ST_TO_ADDR
// uc_nation := 3 ;
1000: LD_ADDR_OWVAR 21
1004: PUSH
1005: LD_INT 3
1007: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
1008: LD_ADDR_VAR 0 5
1012: PUSH
1013: LD_INT 22
1015: PUSH
1016: LD_INT 6
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: PUSH
1023: LD_INT 30
1025: PUSH
1026: LD_INT 5
1028: PUSH
1029: EMPTY
1030: LIST
1031: LIST
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: PPUSH
1037: CALL_OW 69
1041: PUSH
1042: LD_INT 1
1044: ARRAY
1045: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
1046: LD_ADDR_VAR 0 4
1050: PUSH
1051: LD_INT 22
1053: PUSH
1054: LD_INT 6
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PUSH
1061: LD_INT 30
1063: PUSH
1064: LD_INT 4
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PPUSH
1075: CALL_OW 69
1079: PUSH
1080: LD_INT 1
1082: ARRAY
1083: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
1084: LD_ADDR_EXP 20
1088: PUSH
1089: EMPTY
1090: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
1091: LD_ADDR_EXP 21
1095: PUSH
1096: EMPTY
1097: ST_TO_ADDR
// russianPatrol := [ ] ;
1098: LD_ADDR_EXP 23
1102: PUSH
1103: EMPTY
1104: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
1105: LD_ADDR_EXP 16
1109: PUSH
1110: LD_STRING Kurin
1112: PPUSH
1113: LD_INT 0
1115: PPUSH
1116: LD_STRING 
1118: PPUSH
1119: CALL 33071 0 3
1123: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
1124: LD_EXP 16
1128: PPUSH
1129: LD_INT 71
1131: PPUSH
1132: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
1136: LD_ADDR_EXP 18
1140: PUSH
1141: LD_STRING Popov
1143: PPUSH
1144: LD_INT 0
1146: PPUSH
1147: LD_STRING 
1149: PPUSH
1150: CALL 33071 0 3
1154: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
1155: LD_EXP 18
1159: PPUSH
1160: LD_INT 71
1162: PPUSH
1163: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
1167: LD_ADDR_EXP 17
1171: PUSH
1172: LD_STRING Grishko
1174: PPUSH
1175: LD_INT 0
1177: PPUSH
1178: LD_STRING 
1180: PPUSH
1181: CALL 33071 0 3
1185: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
1186: LD_EXP 17
1190: PPUSH
1191: LD_INT 207
1193: PPUSH
1194: LD_INT 106
1196: PPUSH
1197: LD_INT 0
1199: PPUSH
1200: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
1204: LD_EXP 17
1208: PPUSH
1209: LD_INT 209
1211: PPUSH
1212: LD_INT 106
1214: PPUSH
1215: CALL_OW 118
// hc_importance := 0 ;
1219: LD_ADDR_OWVAR 32
1223: PUSH
1224: LD_INT 0
1226: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
1227: LD_ADDR_VAR 0 7
1231: PUSH
1232: LD_INT 22
1234: PUSH
1235: LD_INT 6
1237: PUSH
1238: EMPTY
1239: LIST
1240: LIST
1241: PUSH
1242: LD_INT 30
1244: PUSH
1245: LD_INT 32
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PPUSH
1256: CALL_OW 69
1260: ST_TO_ADDR
// for i in tmp do
1261: LD_ADDR_VAR 0 2
1265: PUSH
1266: LD_VAR 0 7
1270: PUSH
1271: FOR_IN
1272: IFFALSE 1309
// PlaceWeaponTurret ( i , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] ) ;
1274: LD_VAR 0 2
1278: PPUSH
1279: LD_INT 44
1281: PUSH
1282: LD_INT 43
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PUSH
1289: LD_VAR 0 2
1293: PUSH
1294: LD_INT 2
1296: MOD
1297: PUSH
1298: LD_INT 1
1300: PLUS
1301: ARRAY
1302: PPUSH
1303: CALL_OW 431
1307: GO 1271
1309: POP
1310: POP
// for i := 1 to Difficulty do
1311: LD_ADDR_VAR 0 2
1315: PUSH
1316: DOUBLE
1317: LD_INT 1
1319: DEC
1320: ST_TO_ADDR
1321: LD_OWVAR 67
1325: PUSH
1326: FOR_TO
1327: IFFALSE 1382
// begin PrepareHuman ( false , 2 , 2 ) ;
1329: LD_INT 0
1331: PPUSH
1332: LD_INT 2
1334: PPUSH
1335: LD_INT 2
1337: PPUSH
1338: CALL_OW 380
// un := CreateHuman ;
1342: LD_ADDR_VAR 0 3
1346: PUSH
1347: CALL_OW 44
1351: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
1352: LD_VAR 0 3
1356: PPUSH
1357: LD_INT 71
1359: PPUSH
1360: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1364: LD_ADDR_EXP 20
1368: PUSH
1369: LD_EXP 20
1373: PUSH
1374: LD_VAR 0 3
1378: UNION
1379: ST_TO_ADDR
// end ;
1380: GO 1326
1382: POP
1383: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1384: LD_ADDR_VAR 0 2
1388: PUSH
1389: DOUBLE
1390: LD_INT 1
1392: DEC
1393: ST_TO_ADDR
1394: LD_INT 5
1396: PUSH
1397: LD_INT 6
1399: PUSH
1400: LD_INT 6
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_OWVAR 67
1412: ARRAY
1413: PUSH
1414: FOR_TO
1415: IFFALSE 1489
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
1417: LD_INT 0
1419: PPUSH
1420: LD_INT 1
1422: PPUSH
1423: LD_INT 2
1425: PUSH
1426: LD_INT 3
1428: PUSH
1429: LD_INT 4
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: LIST
1436: PUSH
1437: LD_OWVAR 67
1441: ARRAY
1442: PPUSH
1443: CALL_OW 380
// un := CreateHuman ;
1447: LD_ADDR_VAR 0 3
1451: PUSH
1452: CALL_OW 44
1456: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
1457: LD_VAR 0 3
1461: PPUSH
1462: LD_VAR 0 5
1466: PPUSH
1467: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1471: LD_ADDR_EXP 20
1475: PUSH
1476: LD_EXP 20
1480: PUSH
1481: LD_VAR 0 3
1485: UNION
1486: ST_TO_ADDR
// end ;
1487: GO 1414
1489: POP
1490: POP
// for i := 1 to 3 do
1491: LD_ADDR_VAR 0 2
1495: PUSH
1496: DOUBLE
1497: LD_INT 1
1499: DEC
1500: ST_TO_ADDR
1501: LD_INT 3
1503: PUSH
1504: FOR_TO
1505: IFFALSE 1560
// begin PrepareHuman ( false , 3 , 3 ) ;
1507: LD_INT 0
1509: PPUSH
1510: LD_INT 3
1512: PPUSH
1513: LD_INT 3
1515: PPUSH
1516: CALL_OW 380
// un := CreateHuman ;
1520: LD_ADDR_VAR 0 3
1524: PUSH
1525: CALL_OW 44
1529: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
1530: LD_VAR 0 3
1534: PPUSH
1535: LD_INT 92
1537: PPUSH
1538: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1542: LD_ADDR_EXP 20
1546: PUSH
1547: LD_EXP 20
1551: PUSH
1552: LD_VAR 0 3
1556: UNION
1557: ST_TO_ADDR
// end ;
1558: GO 1504
1560: POP
1561: POP
// for i := 1 to 2 do
1562: LD_ADDR_VAR 0 2
1566: PUSH
1567: DOUBLE
1568: LD_INT 1
1570: DEC
1571: ST_TO_ADDR
1572: LD_INT 2
1574: PUSH
1575: FOR_TO
1576: IFFALSE 1631
// begin PrepareHuman ( false , 4 , 3 ) ;
1578: LD_INT 0
1580: PPUSH
1581: LD_INT 4
1583: PPUSH
1584: LD_INT 3
1586: PPUSH
1587: CALL_OW 380
// un := CreateHuman ;
1591: LD_ADDR_VAR 0 3
1595: PUSH
1596: CALL_OW 44
1600: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
1601: LD_VAR 0 3
1605: PPUSH
1606: LD_INT 83
1608: PPUSH
1609: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1613: LD_ADDR_EXP 20
1617: PUSH
1618: LD_EXP 20
1622: PUSH
1623: LD_VAR 0 3
1627: UNION
1628: ST_TO_ADDR
// end ;
1629: GO 1575
1631: POP
1632: POP
// for i := 1 to 5 do
1633: LD_ADDR_VAR 0 2
1637: PUSH
1638: DOUBLE
1639: LD_INT 1
1641: DEC
1642: ST_TO_ADDR
1643: LD_INT 5
1645: PUSH
1646: FOR_TO
1647: IFFALSE 1704
// begin PrepareHuman ( false , 1 , 3 ) ;
1649: LD_INT 0
1651: PPUSH
1652: LD_INT 1
1654: PPUSH
1655: LD_INT 3
1657: PPUSH
1658: CALL_OW 380
// un := CreateHuman ;
1662: LD_ADDR_VAR 0 3
1666: PUSH
1667: CALL_OW 44
1671: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
1672: LD_VAR 0 3
1676: PPUSH
1677: LD_VAR 0 4
1681: PPUSH
1682: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
1686: LD_ADDR_EXP 22
1690: PUSH
1691: LD_EXP 22
1695: PUSH
1696: LD_VAR 0 3
1700: UNION
1701: ST_TO_ADDR
// end ;
1702: GO 1646
1704: POP
1705: POP
// russianCargo := [ ] ;
1706: LD_ADDR_EXP 25
1710: PUSH
1711: EMPTY
1712: ST_TO_ADDR
// for i := 1 to 2 do
1713: LD_ADDR_VAR 0 2
1717: PUSH
1718: DOUBLE
1719: LD_INT 1
1721: DEC
1722: ST_TO_ADDR
1723: LD_INT 2
1725: PUSH
1726: FOR_TO
1727: IFFALSE 1853
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
1729: LD_INT 21
1731: PPUSH
1732: LD_INT 1
1734: PPUSH
1735: LD_INT 1
1737: PPUSH
1738: LD_INT 51
1740: PPUSH
1741: LD_INT 100
1743: PPUSH
1744: CALL 38057 0 5
// un := CreateVehicle ;
1748: LD_ADDR_VAR 0 3
1752: PUSH
1753: CALL_OW 45
1757: ST_TO_ADDR
// russianCargo := russianCargo union un ;
1758: LD_ADDR_EXP 25
1762: PUSH
1763: LD_EXP 25
1767: PUSH
1768: LD_VAR 0 3
1772: UNION
1773: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
1774: LD_VAR 0 3
1778: PPUSH
1779: LD_INT 2
1781: PPUSH
1782: LD_INT 100
1784: PPUSH
1785: CALL_OW 290
// SetDir ( un , 4 ) ;
1789: LD_VAR 0 3
1793: PPUSH
1794: LD_INT 4
1796: PPUSH
1797: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
1801: LD_VAR 0 3
1805: PPUSH
1806: LD_INT 147
1808: PPUSH
1809: LD_INT 103
1811: PPUSH
1812: LD_INT 4
1814: PPUSH
1815: LD_INT 0
1817: PPUSH
1818: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
1822: LD_INT 0
1824: PPUSH
1825: LD_INT 1
1827: PPUSH
1828: LD_OWVAR 67
1832: PPUSH
1833: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1837: CALL_OW 44
1841: PPUSH
1842: LD_VAR 0 3
1846: PPUSH
1847: CALL_OW 52
// end ;
1851: GO 1726
1853: POP
1854: POP
// uc_side := 3 ;
1855: LD_ADDR_OWVAR 20
1859: PUSH
1860: LD_INT 3
1862: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
1863: LD_ADDR_EXP 19
1867: PUSH
1868: LD_STRING Burlak
1870: PPUSH
1871: LD_INT 0
1873: PPUSH
1874: LD_STRING 
1876: PPUSH
1877: CALL 33071 0 3
1881: ST_TO_ADDR
// ResetHc ;
1882: CALL 71752 0 0
// PrepareHuman ( false , 3 , 2 ) ;
1886: LD_INT 0
1888: PPUSH
1889: LD_INT 3
1891: PPUSH
1892: LD_INT 2
1894: PPUSH
1895: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ruBeriaCargo ) ;
1899: CALL_OW 44
1903: PPUSH
1904: LD_INT 180
1906: PPUSH
1907: CALL_OW 52
// if Difficulty > 1 then
1911: LD_OWVAR 67
1915: PUSH
1916: LD_INT 1
1918: GREATER
1919: IFFALSE 1977
// begin for i := 1 to 3 do
1921: LD_ADDR_VAR 0 2
1925: PUSH
1926: DOUBLE
1927: LD_INT 1
1929: DEC
1930: ST_TO_ADDR
1931: LD_INT 3
1933: PUSH
1934: FOR_TO
1935: IFFALSE 1975
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1937: LD_INT 0
1939: PPUSH
1940: LD_INT 1
1942: PPUSH
1943: LD_OWVAR 67
1947: PPUSH
1948: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 86 , 17 , 3 , false ) ;
1952: CALL_OW 44
1956: PPUSH
1957: LD_INT 86
1959: PPUSH
1960: LD_INT 17
1962: PPUSH
1963: LD_INT 3
1965: PPUSH
1966: LD_INT 0
1968: PPUSH
1969: CALL_OW 50
// end ;
1973: GO 1934
1975: POP
1976: POP
// end ; for i := 1 to 2 do
1977: LD_ADDR_VAR 0 2
1981: PUSH
1982: DOUBLE
1983: LD_INT 1
1985: DEC
1986: ST_TO_ADDR
1987: LD_INT 2
1989: PUSH
1990: FOR_TO
1991: IFFALSE 2031
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1993: LD_INT 0
1995: PPUSH
1996: LD_INT 1
1998: PPUSH
1999: LD_OWVAR 67
2003: PPUSH
2004: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 108 , 153 , 3 , false ) ;
2008: CALL_OW 44
2012: PPUSH
2013: LD_INT 108
2015: PPUSH
2016: LD_INT 153
2018: PPUSH
2019: LD_INT 3
2021: PPUSH
2022: LD_INT 0
2024: PPUSH
2025: CALL_OW 50
// end ;
2029: GO 1990
2031: POP
2032: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
2033: LD_ADDR_VAR 0 7
2037: PUSH
2038: LD_INT 22
2040: PUSH
2041: LD_INT 3
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PUSH
2048: LD_INT 30
2050: PUSH
2051: LD_INT 32
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PPUSH
2062: CALL_OW 69
2066: ST_TO_ADDR
// for i := 1 to tmp do
2067: LD_ADDR_VAR 0 2
2071: PUSH
2072: DOUBLE
2073: LD_INT 1
2075: DEC
2076: ST_TO_ADDR
2077: LD_VAR 0 7
2081: PUSH
2082: FOR_TO
2083: IFFALSE 2191
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
2085: LD_INT 0
2087: PPUSH
2088: LD_INT 1
2090: PPUSH
2091: LD_OWVAR 67
2095: PUSH
2096: LD_INT 1
2098: PLUS
2099: PPUSH
2100: CALL_OW 380
// un := CreateHuman ;
2104: LD_ADDR_VAR 0 3
2108: PUSH
2109: CALL_OW 44
2113: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
2114: LD_VAR 0 3
2118: PPUSH
2119: LD_VAR 0 7
2123: PUSH
2124: LD_VAR 0 2
2128: ARRAY
2129: PPUSH
2130: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2134: LD_ADDR_EXP 21
2138: PUSH
2139: LD_EXP 21
2143: PUSH
2144: LD_VAR 0 3
2148: UNION
2149: ST_TO_ADDR
// PlaceWeaponTurret ( tmp [ i ] , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] ) ;
2150: LD_VAR 0 7
2154: PUSH
2155: LD_VAR 0 2
2159: ARRAY
2160: PPUSH
2161: LD_INT 44
2163: PUSH
2164: LD_INT 43
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PUSH
2171: LD_VAR 0 2
2175: PUSH
2176: LD_INT 2
2178: MOD
2179: PUSH
2180: LD_INT 1
2182: PLUS
2183: ARRAY
2184: PPUSH
2185: CALL_OW 431
// end ;
2189: GO 2082
2191: POP
2192: POP
// for i := 1 to Difficulty + 1 do
2193: LD_ADDR_VAR 0 2
2197: PUSH
2198: DOUBLE
2199: LD_INT 1
2201: DEC
2202: ST_TO_ADDR
2203: LD_OWVAR 67
2207: PUSH
2208: LD_INT 1
2210: PLUS
2211: PUSH
2212: FOR_TO
2213: IFFALSE 2304
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
2215: LD_INT 0
2217: PPUSH
2218: LD_INT 1
2220: PPUSH
2221: LD_OWVAR 67
2225: PUSH
2226: LD_INT 1
2228: PLUS
2229: PPUSH
2230: CALL_OW 380
// un := CreateHuman ;
2234: LD_ADDR_VAR 0 3
2238: PUSH
2239: CALL_OW 44
2243: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2244: LD_VAR 0 3
2248: PPUSH
2249: LD_INT 22
2251: PUSH
2252: LD_INT 3
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 30
2261: PUSH
2262: LD_INT 5
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PPUSH
2273: CALL_OW 69
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: PPUSH
2282: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2286: LD_ADDR_EXP 21
2290: PUSH
2291: LD_EXP 21
2295: PUSH
2296: LD_VAR 0 3
2300: UNION
2301: ST_TO_ADDR
// end ;
2302: GO 2212
2304: POP
2305: POP
// for i := 1 to 2 do
2306: LD_ADDR_VAR 0 2
2310: PUSH
2311: DOUBLE
2312: LD_INT 1
2314: DEC
2315: ST_TO_ADDR
2316: LD_INT 2
2318: PUSH
2319: FOR_TO
2320: IFFALSE 2407
// begin PrepareHuman ( false , 4 , Difficulty ) ;
2322: LD_INT 0
2324: PPUSH
2325: LD_INT 4
2327: PPUSH
2328: LD_OWVAR 67
2332: PPUSH
2333: CALL_OW 380
// un := CreateHuman ;
2337: LD_ADDR_VAR 0 3
2341: PUSH
2342: CALL_OW 44
2346: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
2347: LD_VAR 0 3
2351: PPUSH
2352: LD_INT 22
2354: PUSH
2355: LD_INT 3
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PUSH
2362: LD_INT 30
2364: PUSH
2365: LD_INT 7
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PPUSH
2376: CALL_OW 69
2380: PUSH
2381: LD_INT 1
2383: ARRAY
2384: PPUSH
2385: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2389: LD_ADDR_EXP 21
2393: PUSH
2394: LD_EXP 21
2398: PUSH
2399: LD_VAR 0 3
2403: UNION
2404: ST_TO_ADDR
// end ;
2405: GO 2319
2407: POP
2408: POP
// for i := 1 to Difficulty do
2409: LD_ADDR_VAR 0 2
2413: PUSH
2414: DOUBLE
2415: LD_INT 1
2417: DEC
2418: ST_TO_ADDR
2419: LD_OWVAR 67
2423: PUSH
2424: FOR_TO
2425: IFFALSE 2482
// begin PrepareHuman ( false , 2 , Difficulty ) ;
2427: LD_INT 0
2429: PPUSH
2430: LD_INT 2
2432: PPUSH
2433: LD_OWVAR 67
2437: PPUSH
2438: CALL_OW 380
// un := CreateHuman ;
2442: LD_ADDR_VAR 0 3
2446: PUSH
2447: CALL_OW 44
2451: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
2452: LD_VAR 0 3
2456: PPUSH
2457: LD_INT 106
2459: PPUSH
2460: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2464: LD_ADDR_EXP 21
2468: PUSH
2469: LD_EXP 21
2473: PUSH
2474: LD_VAR 0 3
2478: UNION
2479: ST_TO_ADDR
// end ;
2480: GO 2424
2482: POP
2483: POP
// for i := 1 to 3 do
2484: LD_ADDR_VAR 0 2
2488: PUSH
2489: DOUBLE
2490: LD_INT 1
2492: DEC
2493: ST_TO_ADDR
2494: LD_INT 3
2496: PUSH
2497: FOR_TO
2498: IFFALSE 2620
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
2500: LD_ADDR_VAR 0 6
2504: PUSH
2505: LD_INT 22
2507: PUSH
2508: LD_INT 3
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: PUSH
2515: LD_INT 30
2517: PUSH
2518: LD_INT 31
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PPUSH
2529: CALL_OW 69
2533: PUSH
2534: LD_VAR 0 2
2538: ARRAY
2539: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
2540: LD_INT 0
2542: PPUSH
2543: LD_INT 1
2545: PPUSH
2546: LD_OWVAR 67
2550: PPUSH
2551: CALL_OW 380
// un := CreateHuman ;
2555: LD_ADDR_VAR 0 3
2559: PUSH
2560: CALL_OW 44
2564: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
2565: LD_VAR 0 3
2569: PPUSH
2570: LD_VAR 0 6
2574: PPUSH
2575: CALL_OW 254
2579: PUSH
2580: LD_INT 3
2582: PLUS
2583: PPUSH
2584: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
2588: LD_VAR 0 3
2592: PPUSH
2593: LD_VAR 0 6
2597: PPUSH
2598: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2602: LD_ADDR_EXP 21
2606: PUSH
2607: LD_EXP 21
2611: PUSH
2612: LD_VAR 0 3
2616: UNION
2617: ST_TO_ADDR
// end ;
2618: GO 2497
2620: POP
2621: POP
// russianOmicronAttackers := [ ] ;
2622: LD_ADDR_EXP 24
2626: PUSH
2627: EMPTY
2628: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2629: LD_ADDR_VAR 0 2
2633: PUSH
2634: DOUBLE
2635: LD_INT 1
2637: DEC
2638: ST_TO_ADDR
2639: LD_INT 4
2641: PUSH
2642: LD_INT 5
2644: PUSH
2645: LD_INT 6
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: LIST
2652: PUSH
2653: LD_OWVAR 67
2657: ARRAY
2658: PUSH
2659: FOR_TO
2660: IFFALSE 2878
// begin PrepareVehicle ( [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
2662: LD_INT 21
2664: PUSH
2665: LD_INT 23
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: PUSH
2672: LD_VAR 0 2
2676: PUSH
2677: LD_INT 2
2679: MOD
2680: PUSH
2681: LD_INT 1
2683: PLUS
2684: ARRAY
2685: PPUSH
2686: LD_INT 1
2688: PPUSH
2689: LD_INT 1
2691: PPUSH
2692: LD_INT 43
2694: PUSH
2695: LD_INT 44
2697: PUSH
2698: LD_INT 42
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: LIST
2705: PUSH
2706: LD_VAR 0 2
2710: PUSH
2711: LD_INT 3
2713: MOD
2714: PUSH
2715: LD_INT 1
2717: PLUS
2718: ARRAY
2719: PPUSH
2720: LD_INT 100
2722: PPUSH
2723: CALL 38057 0 5
// un := CreateVehicle ;
2727: LD_ADDR_VAR 0 3
2731: PUSH
2732: CALL_OW 45
2736: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
2737: LD_VAR 0 3
2741: PPUSH
2742: LD_INT 0
2744: PUSH
2745: LD_INT 5
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: PUSH
2752: LD_INT 1
2754: PPUSH
2755: LD_INT 2
2757: PPUSH
2758: CALL_OW 12
2762: ARRAY
2763: PPUSH
2764: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
2768: LD_ADDR_EXP 24
2772: PUSH
2773: LD_EXP 24
2777: PUSH
2778: LD_VAR 0 3
2782: UNION
2783: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
2784: LD_VAR 0 3
2788: PPUSH
2789: LD_INT 127
2791: PPUSH
2792: LD_INT 89
2794: PPUSH
2795: LD_INT 7
2797: PPUSH
2798: LD_INT 0
2800: PPUSH
2801: CALL_OW 50
// uc_side := 3 ;
2805: LD_ADDR_OWVAR 20
2809: PUSH
2810: LD_INT 3
2812: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
2813: LD_INT 0
2815: PPUSH
2816: LD_INT 3
2818: PPUSH
2819: LD_INT 3
2821: PPUSH
2822: CALL_OW 380
// un := CreateHuman ;
2826: LD_ADDR_VAR 0 3
2830: PUSH
2831: CALL_OW 44
2835: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
2836: LD_ADDR_EXP 24
2840: PUSH
2841: LD_EXP 24
2845: PUSH
2846: LD_VAR 0 3
2850: UNION
2851: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
2852: LD_VAR 0 3
2856: PPUSH
2857: LD_EXP 24
2861: PUSH
2862: LD_EXP 24
2866: PUSH
2867: LD_INT 1
2869: MINUS
2870: ARRAY
2871: PPUSH
2872: CALL_OW 52
// end ;
2876: GO 2659
2878: POP
2879: POP
// for i := 1 to 3 do
2880: LD_ADDR_VAR 0 2
2884: PUSH
2885: DOUBLE
2886: LD_INT 1
2888: DEC
2889: ST_TO_ADDR
2890: LD_INT 3
2892: PUSH
2893: FOR_TO
2894: IFFALSE 2960
// begin PrepareHuman ( false , 1 , Difficulty ) ;
2896: LD_INT 0
2898: PPUSH
2899: LD_INT 1
2901: PPUSH
2902: LD_OWVAR 67
2906: PPUSH
2907: CALL_OW 380
// un := CreateHuman ;
2911: LD_ADDR_VAR 0 3
2915: PUSH
2916: CALL_OW 44
2920: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
2921: LD_ADDR_EXP 24
2925: PUSH
2926: LD_EXP 24
2930: PUSH
2931: LD_VAR 0 3
2935: UNION
2936: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
2937: LD_VAR 0 3
2941: PPUSH
2942: LD_INT 91
2944: PPUSH
2945: LD_INT 60
2947: PPUSH
2948: LD_INT 3
2950: PPUSH
2951: LD_INT 0
2953: PPUSH
2954: CALL_OW 50
// end ;
2958: GO 2893
2960: POP
2961: POP
// end ;
2962: LD_VAR 0 1
2966: RET
// every 0 0$3 do var i ;
2967: GO 2969
2969: DISABLE
2970: LD_INT 0
2972: PPUSH
// begin for i := 1 to 4 do
2973: LD_ADDR_VAR 0 1
2977: PUSH
2978: DOUBLE
2979: LD_INT 1
2981: DEC
2982: ST_TO_ADDR
2983: LD_INT 4
2985: PUSH
2986: FOR_TO
2987: IFFALSE 3006
// ComExitBuilding ( grishkoSquad [ i ] ) ;
2989: LD_EXP 22
2993: PUSH
2994: LD_VAR 0 1
2998: ARRAY
2999: PPUSH
3000: CALL_OW 122
3004: GO 2986
3006: POP
3007: POP
// wait ( 3 ) ;
3008: LD_INT 3
3010: PPUSH
3011: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
3015: LD_EXP 22
3019: PUSH
3020: LD_INT 1
3022: ARRAY
3023: PPUSH
3024: LD_INT 22
3026: PUSH
3027: LD_INT 6
3029: PUSH
3030: EMPTY
3031: LIST
3032: LIST
3033: PUSH
3034: LD_INT 30
3036: PUSH
3037: LD_INT 31
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PPUSH
3048: CALL_OW 69
3052: PPUSH
3053: LD_EXP 22
3057: PUSH
3058: LD_INT 1
3060: ARRAY
3061: PPUSH
3062: CALL_OW 74
3066: PPUSH
3067: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
3071: LD_EXP 22
3075: PUSH
3076: LD_INT 2
3078: ARRAY
3079: PPUSH
3080: LD_INT 211
3082: PPUSH
3083: LD_INT 107
3085: PPUSH
3086: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
3090: LD_EXP 22
3094: PUSH
3095: LD_INT 2
3097: ARRAY
3098: PPUSH
3099: LD_INT 209
3101: PPUSH
3102: LD_INT 106
3104: PPUSH
3105: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
3109: LD_EXP 22
3113: PUSH
3114: LD_INT 3
3116: ARRAY
3117: PPUSH
3118: LD_INT 209
3120: PPUSH
3121: LD_INT 103
3123: PPUSH
3124: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
3128: LD_EXP 22
3132: PUSH
3133: LD_INT 3
3135: ARRAY
3136: PPUSH
3137: LD_INT 209
3139: PPUSH
3140: LD_INT 106
3142: PPUSH
3143: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
3147: LD_EXP 22
3151: PUSH
3152: LD_INT 4
3154: ARRAY
3155: PPUSH
3156: LD_INT 227
3158: PPUSH
3159: LD_INT 117
3161: PPUSH
3162: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
3166: LD_EXP 22
3170: PUSH
3171: LD_INT 4
3173: ARRAY
3174: PPUSH
3175: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
3179: LD_INT 700
3181: PPUSH
3182: CALL_OW 67
// for i := 3 downto 2 do
3186: LD_ADDR_VAR 0 1
3190: PUSH
3191: DOUBLE
3192: LD_INT 3
3194: INC
3195: ST_TO_ADDR
3196: LD_INT 2
3198: PUSH
3199: FOR_DOWNTO
3200: IFFALSE 3367
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
3202: LD_EXP 22
3206: PUSH
3207: LD_VAR 0 1
3211: ARRAY
3212: PPUSH
3213: LD_INT 200
3215: PPUSH
3216: LD_INT 91
3218: PPUSH
3219: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3223: LD_EXP 22
3227: PUSH
3228: LD_VAR 0 1
3232: ARRAY
3233: PPUSH
3234: LD_INT 210
3236: PPUSH
3237: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
3241: LD_EXP 22
3245: PUSH
3246: LD_VAR 0 1
3250: ARRAY
3251: PPUSH
3252: LD_INT 224
3254: PPUSH
3255: LD_INT 93
3257: PPUSH
3258: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3262: LD_EXP 22
3266: PUSH
3267: LD_VAR 0 1
3271: ARRAY
3272: PPUSH
3273: LD_INT 210
3275: PPUSH
3276: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
3280: LD_EXP 22
3284: PUSH
3285: LD_VAR 0 1
3289: ARRAY
3290: PPUSH
3291: LD_INT 239
3293: PPUSH
3294: LD_INT 123
3296: PPUSH
3297: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3301: LD_EXP 22
3305: PUSH
3306: LD_VAR 0 1
3310: ARRAY
3311: PPUSH
3312: LD_INT 210
3314: PPUSH
3315: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
3319: LD_EXP 22
3323: PUSH
3324: LD_VAR 0 1
3328: ARRAY
3329: PPUSH
3330: LD_INT 212
3332: PPUSH
3333: LD_INT 105
3335: PPUSH
3336: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
3340: LD_EXP 22
3344: PUSH
3345: LD_VAR 0 1
3349: ARRAY
3350: PPUSH
3351: LD_INT 700
3353: PPUSH
3354: CALL_OW 202
// wait ( 0 0$30 ) ;
3358: LD_INT 1050
3360: PPUSH
3361: CALL_OW 67
// end ;
3365: GO 3199
3367: POP
3368: POP
// until not activeGrishkoAI ;
3369: LD_EXP 2
3373: NOT
3374: IFFALSE 3179
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
3376: LD_EXP 22
3380: PPUSH
3381: LD_INT 221
3383: PPUSH
3384: LD_INT 110
3386: PPUSH
3387: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
3391: LD_EXP 22
3395: PPUSH
3396: LD_INT 228
3398: PPUSH
3399: LD_INT 115
3401: PPUSH
3402: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
3406: LD_EXP 22
3410: PPUSH
3411: CALL_OW 200
// end ;
3415: PPOPN 1
3417: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
3418: LD_EXP 3
3422: IFFALSE 4060
3424: GO 3426
3426: DISABLE
3427: LD_INT 0
3429: PPUSH
3430: PPUSH
3431: PPUSH
3432: PPUSH
// begin uc_side := 6 ;
3433: LD_ADDR_OWVAR 20
3437: PUSH
3438: LD_INT 6
3440: ST_TO_ADDR
// uc_nation := 3 ;
3441: LD_ADDR_OWVAR 21
3445: PUSH
3446: LD_INT 3
3448: ST_TO_ADDR
// ResetHc ;
3449: CALL 71752 0 0
// for i := 1 to 3 do
3453: LD_ADDR_VAR 0 2
3457: PUSH
3458: DOUBLE
3459: LD_INT 1
3461: DEC
3462: ST_TO_ADDR
3463: LD_INT 3
3465: PUSH
3466: FOR_TO
3467: IFFALSE 3576
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
3469: LD_INT 0
3471: PPUSH
3472: LD_INT 1
3474: PPUSH
3475: LD_INT 2
3477: PUSH
3478: LD_INT 3
3480: PUSH
3481: LD_INT 4
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: LIST
3488: PUSH
3489: LD_OWVAR 67
3493: ARRAY
3494: PPUSH
3495: CALL_OW 380
// un := CreateHuman ;
3499: LD_ADDR_VAR 0 1
3503: PUSH
3504: CALL_OW 44
3508: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
3509: LD_ADDR_EXP 23
3513: PUSH
3514: LD_EXP 23
3518: PUSH
3519: LD_VAR 0 1
3523: UNION
3524: ST_TO_ADDR
// SetTag ( un , 1 ) ;
3525: LD_VAR 0 1
3529: PPUSH
3530: LD_INT 1
3532: PPUSH
3533: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
3537: LD_VAR 0 1
3541: PPUSH
3542: LD_INT 3
3544: PPUSH
3545: LD_INT 0
3547: PPUSH
3548: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
3552: LD_VAR 0 1
3556: PPUSH
3557: LD_INT 210
3559: PPUSH
3560: LD_INT 159
3562: PPUSH
3563: CALL_OW 111
// wait ( 0 0$2 ) ;
3567: LD_INT 70
3569: PPUSH
3570: CALL_OW 67
// end ;
3574: GO 3466
3576: POP
3577: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 208 , 42 ] ] ] ;
3578: LD_ADDR_VAR 0 4
3582: PUSH
3583: LD_INT 172
3585: PUSH
3586: LD_INT 76
3588: PUSH
3589: EMPTY
3590: LIST
3591: LIST
3592: PUSH
3593: LD_INT 150
3595: PUSH
3596: LD_INT 38
3598: PUSH
3599: EMPTY
3600: LIST
3601: LIST
3602: PUSH
3603: LD_INT 148
3605: PUSH
3606: LD_INT 9
3608: PUSH
3609: EMPTY
3610: LIST
3611: LIST
3612: PUSH
3613: LD_INT 165
3615: PUSH
3616: LD_INT 38
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: PUSH
3629: LD_INT 191
3631: PUSH
3632: LD_INT 77
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: LD_INT 168
3641: PUSH
3642: LD_INT 42
3644: PUSH
3645: EMPTY
3646: LIST
3647: LIST
3648: PUSH
3649: LD_INT 166
3651: PUSH
3652: LD_INT 11
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: PUSH
3659: LD_INT 151
3661: PUSH
3662: LD_INT 12
3664: PUSH
3665: EMPTY
3666: LIST
3667: LIST
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: PUSH
3675: LD_INT 221
3677: PUSH
3678: LD_INT 88
3680: PUSH
3681: EMPTY
3682: LIST
3683: LIST
3684: PUSH
3685: LD_INT 217
3687: PUSH
3688: LD_INT 64
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: PUSH
3695: LD_INT 208
3697: PUSH
3698: LD_INT 42
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: LIST
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: LIST
3714: ST_TO_ADDR
// repeat wait ( 0 0$5 ) ;
3715: LD_INT 175
3717: PPUSH
3718: CALL_OW 67
// for i := 1 to patrol do
3722: LD_ADDR_VAR 0 2
3726: PUSH
3727: DOUBLE
3728: LD_INT 1
3730: DEC
3731: ST_TO_ADDR
3732: LD_VAR 0 4
3736: PUSH
3737: FOR_TO
3738: IFFALSE 4022
// begin if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
3740: LD_EXP 23
3744: PUSH
3745: LD_VAR 0 2
3749: ARRAY
3750: PPUSH
3751: CALL_OW 256
3755: PUSH
3756: LD_INT 990
3758: LESS
3759: IFFALSE 3782
3761: PUSH
3762: LD_EXP 23
3766: PUSH
3767: LD_VAR 0 2
3771: ARRAY
3772: PPUSH
3773: CALL_OW 110
3777: PUSH
3778: LD_INT 1
3780: EQUAL
3781: AND
3782: IFFALSE 3810
// begin spottedByPatrol := true ;
3784: LD_ADDR_EXP 4
3788: PUSH
3789: LD_INT 1
3791: ST_TO_ADDR
// SetTag ( russianPatrol [ i ] , 2 ) ;
3792: LD_EXP 23
3796: PUSH
3797: LD_VAR 0 2
3801: ARRAY
3802: PPUSH
3803: LD_INT 2
3805: PPUSH
3806: CALL_OW 109
// end ; if GetTag ( russianPatrol [ i ] ) = 2 then
3810: LD_EXP 23
3814: PUSH
3815: LD_VAR 0 2
3819: ARRAY
3820: PPUSH
3821: CALL_OW 110
3825: PUSH
3826: LD_INT 2
3828: EQUAL
3829: IFFALSE 3920
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
3831: LD_EXP 23
3835: PUSH
3836: LD_VAR 0 2
3840: ARRAY
3841: PPUSH
3842: LD_INT 166
3844: PPUSH
3845: LD_INT 101
3847: PPUSH
3848: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
3852: LD_EXP 23
3856: PUSH
3857: LD_VAR 0 2
3861: ARRAY
3862: PPUSH
3863: LD_INT 71
3865: PPUSH
3866: CALL_OW 296
3870: PUSH
3871: LD_INT 10
3873: LESS
3874: IFFALSE 3918
// begin kirovBaseSquad := kirovBaseSquad union russianPatrol [ i ] ;
3876: LD_ADDR_EXP 20
3880: PUSH
3881: LD_EXP 20
3885: PUSH
3886: LD_EXP 23
3890: PUSH
3891: LD_VAR 0 2
3895: ARRAY
3896: UNION
3897: ST_TO_ADDR
// russianPatrol := Delete ( russianPatrol , i ) ;
3898: LD_ADDR_EXP 23
3902: PUSH
3903: LD_EXP 23
3907: PPUSH
3908: LD_VAR 0 2
3912: PPUSH
3913: CALL_OW 3
3917: ST_TO_ADDR
// end ; continue ;
3918: GO 3737
// end ; if not HasTask ( russianPatrol [ i ] ) then
3920: LD_EXP 23
3924: PUSH
3925: LD_VAR 0 2
3929: ARRAY
3930: PPUSH
3931: CALL_OW 314
3935: NOT
3936: IFFALSE 4020
// for j in patrol [ i ] do
3938: LD_ADDR_VAR 0 3
3942: PUSH
3943: LD_VAR 0 4
3947: PUSH
3948: LD_VAR 0 2
3952: ARRAY
3953: PUSH
3954: FOR_IN
3955: IFFALSE 4018
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
3957: LD_EXP 23
3961: PUSH
3962: LD_VAR 0 2
3966: ARRAY
3967: PPUSH
3968: LD_INT 35
3970: PPUSH
3971: LD_INT 175
3973: PPUSH
3974: CALL_OW 12
3978: PPUSH
3979: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
3983: LD_EXP 23
3987: PUSH
3988: LD_VAR 0 2
3992: ARRAY
3993: PPUSH
3994: LD_VAR 0 3
3998: PUSH
3999: LD_INT 1
4001: ARRAY
4002: PPUSH
4003: LD_VAR 0 3
4007: PUSH
4008: LD_INT 2
4010: ARRAY
4011: PPUSH
4012: CALL_OW 174
// end ;
4016: GO 3954
4018: POP
4019: POP
// end ;
4020: GO 3737
4022: POP
4023: POP
// until not russianPatrol or russianAlert ;
4024: LD_EXP 23
4028: NOT
4029: IFTRUE 4037
4031: PUSH
4032: LD_EXP 5
4036: OR
4037: IFFALSE 3715
// if russianPatrol then
4039: LD_EXP 23
4043: IFFALSE 4060
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
4045: LD_EXP 23
4049: PPUSH
4050: LD_INT 161
4052: PPUSH
4053: LD_INT 107
4055: PPUSH
4056: CALL_OW 114
// end ;
4060: PPOPN 4
4062: END
// every 0 0$1 trigger startAttackOnOmicron and not retreatFromOmicron do var i , filter , tmp , enemy , x , points , point ;
4063: LD_EXP 6
4067: IFFALSE 4076
4069: PUSH
4070: LD_EXP 8
4074: NOT
4075: AND
4076: IFFALSE 4658
4078: GO 4080
4080: DISABLE
4081: LD_INT 0
4083: PPUSH
4084: PPUSH
4085: PPUSH
4086: PPUSH
4087: PPUSH
4088: PPUSH
4089: PPUSH
// begin enable ;
4090: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
4091: LD_ADDR_VAR 0 2
4095: PUSH
4096: LD_EXP 24
4100: PPUSH
4101: LD_INT 21
4103: PUSH
4104: LD_INT 2
4106: PUSH
4107: EMPTY
4108: LIST
4109: LIST
4110: PPUSH
4111: CALL_OW 72
4115: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 1 ] ) ;
4116: LD_ADDR_VAR 0 4
4120: PUSH
4121: LD_INT 22
4123: PUSH
4124: LD_INT 1
4126: PUSH
4127: EMPTY
4128: LIST
4129: LIST
4130: PPUSH
4131: CALL_OW 69
4135: ST_TO_ADDR
// points := [ [ 44 , 15 ] , [ 54 , 39 ] ] ;
4136: LD_ADDR_VAR 0 6
4140: PUSH
4141: LD_INT 44
4143: PUSH
4144: LD_INT 15
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PUSH
4151: LD_INT 54
4153: PUSH
4154: LD_INT 39
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: ST_TO_ADDR
// for i in filter do
4165: LD_ADDR_VAR 0 1
4169: PUSH
4170: LD_VAR 0 2
4174: PUSH
4175: FOR_IN
4176: IFFALSE 4656
// begin tmp := IsDrivenBy ( i ) ;
4178: LD_ADDR_VAR 0 3
4182: PUSH
4183: LD_VAR 0 1
4187: PPUSH
4188: CALL_OW 311
4192: ST_TO_ADDR
// if not tmp then
4193: LD_VAR 0 3
4197: NOT
4198: IFFALSE 4202
// continue ;
4200: GO 4175
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
4202: LD_VAR 0 1
4206: PPUSH
4207: CALL_OW 261
4211: PUSH
4212: LD_INT 90
4214: GREATER
4215: IFFALSE 4232
4217: PUSH
4218: LD_VAR 0 1
4222: PPUSH
4223: CALL_OW 110
4227: PUSH
4228: LD_INT 2
4230: EQUAL
4231: AND
4232: IFFALSE 4248
// SetTag ( i , 0 ) else
4234: LD_VAR 0 1
4238: PPUSH
4239: LD_INT 0
4241: PPUSH
4242: CALL_OW 109
4246: GO 4344
// if GetTag ( i ) = 2 then
4248: LD_VAR 0 1
4252: PPUSH
4253: CALL_OW 110
4257: PUSH
4258: LD_INT 2
4260: EQUAL
4261: IFFALSE 4344
// begin x := rand ( 1 , 2 ) ;
4263: LD_ADDR_VAR 0 5
4267: PUSH
4268: LD_INT 1
4270: PPUSH
4271: LD_INT 2
4273: PPUSH
4274: CALL_OW 12
4278: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
4279: LD_VAR 0 1
4283: PPUSH
4284: LD_EXP 25
4288: PUSH
4289: LD_VAR 0 5
4293: ARRAY
4294: PPUSH
4295: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
4299: LD_EXP 25
4303: PUSH
4304: LD_VAR 0 5
4308: ARRAY
4309: PPUSH
4310: LD_INT 2
4312: PPUSH
4313: CALL_OW 289
4317: PUSH
4318: LD_INT 20
4320: LESS
4321: IFFALSE 4344
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
4323: LD_EXP 25
4327: PUSH
4328: LD_VAR 0 5
4332: ARRAY
4333: PPUSH
4334: LD_INT 2
4336: PPUSH
4337: LD_INT 100
4339: PPUSH
4340: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
4344: LD_VAR 0 1
4348: PPUSH
4349: CALL_OW 256
4353: PUSH
4354: LD_INT 600
4356: GREATEREQUAL
4357: IFFALSE 4371
4359: PUSH
4360: LD_VAR 0 1
4364: PPUSH
4365: CALL_OW 110
4369: NOT
4370: AND
4371: IFFALSE 4397
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4373: LD_VAR 0 1
4377: PPUSH
4378: LD_VAR 0 4
4382: PPUSH
4383: LD_VAR 0 1
4387: PPUSH
4388: CALL_OW 74
4392: PPUSH
4393: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
4397: LD_VAR 0 1
4401: PPUSH
4402: CALL_OW 256
4406: PUSH
4407: LD_INT 600
4409: LESS
4410: IFFALSE 4424
4412: PUSH
4413: LD_VAR 0 1
4417: PPUSH
4418: CALL_OW 110
4422: NOT
4423: AND
4424: IFFALSE 4500
// begin SetTag ( i , 1 ) ;
4426: LD_VAR 0 1
4430: PPUSH
4431: LD_INT 1
4433: PPUSH
4434: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
4438: LD_ADDR_VAR 0 7
4442: PUSH
4443: LD_VAR 0 1
4447: PPUSH
4448: LD_VAR 0 6
4452: PPUSH
4453: CALL 74743 0 2
4457: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
4458: LD_VAR 0 1
4462: PPUSH
4463: LD_VAR 0 7
4467: PUSH
4468: LD_INT 1
4470: ARRAY
4471: PPUSH
4472: LD_VAR 0 7
4476: PUSH
4477: LD_INT 2
4479: ARRAY
4480: PPUSH
4481: CALL_OW 111
// AddComMoveXY ( i , 71 , 29 ) ;
4485: LD_VAR 0 1
4489: PPUSH
4490: LD_INT 71
4492: PPUSH
4493: LD_INT 29
4495: PPUSH
4496: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 71 , 29 ) < 9 and tmp then
4500: LD_VAR 0 1
4504: PPUSH
4505: CALL_OW 110
4509: PUSH
4510: LD_INT 1
4512: EQUAL
4513: IFFALSE 4536
4515: PUSH
4516: LD_VAR 0 1
4520: PPUSH
4521: LD_INT 71
4523: PPUSH
4524: LD_INT 29
4526: PPUSH
4527: CALL_OW 297
4531: PUSH
4532: LD_INT 9
4534: LESS
4535: AND
4536: IFFALSE 4544
4538: PUSH
4539: LD_VAR 0 3
4543: AND
4544: IFFALSE 4654
// begin ComExitVehicle ( tmp ) ;
4546: LD_VAR 0 3
4550: PPUSH
4551: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4555: LD_VAR 0 3
4559: PPUSH
4560: LD_VAR 0 1
4564: PPUSH
4565: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4569: LD_INT 35
4571: PPUSH
4572: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4576: LD_VAR 0 1
4580: PPUSH
4581: CALL_OW 256
4585: PUSH
4586: LD_INT 1000
4588: EQUAL
4589: IFFALSE 4569
// ComEnterUnit ( tmp , i ) ;
4591: LD_VAR 0 3
4595: PPUSH
4596: LD_VAR 0 1
4600: PPUSH
4601: CALL_OW 120
// if GetFuel ( i ) <= 90 and russianCargo then
4605: LD_VAR 0 1
4609: PPUSH
4610: CALL_OW 261
4614: PUSH
4615: LD_INT 90
4617: LESSEQUAL
4618: IFFALSE 4626
4620: PUSH
4621: LD_EXP 25
4625: AND
4626: IFFALSE 4642
// SetTag ( i , 2 ) else
4628: LD_VAR 0 1
4632: PPUSH
4633: LD_INT 2
4635: PPUSH
4636: CALL_OW 109
4640: GO 4654
// SetTag ( i , 0 ) ;
4642: LD_VAR 0 1
4646: PPUSH
4647: LD_INT 0
4649: PPUSH
4650: CALL_OW 109
// end ; end ;
4654: GO 4175
4656: POP
4657: POP
// end ;
4658: PPOPN 7
4660: END
// every 0 0$30 trigger startAttackOnOmicron and not retreatFromOmicron and russianOmicronAttackers < [ 12 , 14 , 16 ] [ Difficulty ] do
4661: LD_EXP 6
4665: IFFALSE 4674
4667: PUSH
4668: LD_EXP 8
4672: NOT
4673: AND
4674: IFFALSE 4703
4676: PUSH
4677: LD_EXP 24
4681: PUSH
4682: LD_INT 12
4684: PUSH
4685: LD_INT 14
4687: PUSH
4688: LD_INT 16
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: LIST
4695: PUSH
4696: LD_OWVAR 67
4700: ARRAY
4701: LESS
4702: AND
4703: IFFALSE 4716
4705: GO 4707
4707: DISABLE
// begin enable ;
4708: ENABLE
// ProduceNew ( 0 ) ;
4709: LD_INT 0
4711: PPUSH
4712: CALL 4717 0 1
// end ;
4716: END
// export function ProduceNew ( type ) ; var un ; begin
4717: LD_INT 0
4719: PPUSH
4720: PPUSH
// if tanksCounter < [ 7 , 12 , 15 ] [ Difficulty ] then
4721: LD_EXP 12
4725: PUSH
4726: LD_INT 7
4728: PUSH
4729: LD_INT 12
4731: PUSH
4732: LD_INT 15
4734: PUSH
4735: EMPTY
4736: LIST
4737: LIST
4738: LIST
4739: PUSH
4740: LD_OWVAR 67
4744: ARRAY
4745: LESS
4746: IFFALSE 4820
// begin uc_side := 3 ;
4748: LD_ADDR_OWVAR 20
4752: PUSH
4753: LD_INT 3
4755: ST_TO_ADDR
// uc_nation := 3 ;
4756: LD_ADDR_OWVAR 21
4760: PUSH
4761: LD_INT 3
4763: ST_TO_ADDR
// ResetHc ;
4764: CALL 71752 0 0
// PrepareHuman ( false , 3 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4768: LD_INT 0
4770: PPUSH
4771: LD_INT 3
4773: PPUSH
4774: LD_INT 3
4776: PUSH
4777: LD_INT 4
4779: PUSH
4780: LD_INT 5
4782: PUSH
4783: EMPTY
4784: LIST
4785: LIST
4786: LIST
4787: PUSH
4788: LD_OWVAR 67
4792: ARRAY
4793: PPUSH
4794: CALL_OW 380
// un := CreateHuman ;
4798: LD_ADDR_VAR 0 3
4802: PUSH
4803: CALL_OW 44
4807: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruBeriaFac ) ;
4808: LD_VAR 0 3
4812: PPUSH
4813: LD_INT 143
4815: PPUSH
4816: CALL_OW 52
// end ; if type = 1 then
4820: LD_VAR 0 1
4824: PUSH
4825: LD_INT 1
4827: EQUAL
4828: IFFALSE 4851
// AddComConstruct ( ruBeriaFac , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) else
4830: LD_INT 143
4832: PPUSH
4833: LD_INT 21
4835: PPUSH
4836: LD_INT 1
4838: PPUSH
4839: LD_INT 1
4841: PPUSH
4842: LD_INT 51
4844: PPUSH
4845: CALL_OW 185
4849: GO 4930
// AddComConstruct ( ruBeriaFac , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , Difficulty + 1 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 4 ) ] ) ;
4851: LD_INT 143
4853: PPUSH
4854: LD_INT 21
4856: PUSH
4857: LD_INT 22
4859: PUSH
4860: LD_INT 23
4862: PUSH
4863: LD_INT 24
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: PUSH
4872: LD_INT 1
4874: PPUSH
4875: LD_OWVAR 67
4879: PUSH
4880: LD_INT 1
4882: PLUS
4883: PPUSH
4884: CALL_OW 12
4888: ARRAY
4889: PPUSH
4890: LD_INT 1
4892: PPUSH
4893: LD_INT 1
4895: PPUSH
4896: LD_INT 44
4898: PUSH
4899: LD_INT 44
4901: PUSH
4902: LD_INT 43
4904: PUSH
4905: LD_INT 42
4907: PUSH
4908: EMPTY
4909: LIST
4910: LIST
4911: LIST
4912: LIST
4913: PUSH
4914: LD_INT 1
4916: PPUSH
4917: LD_INT 4
4919: PPUSH
4920: CALL_OW 12
4924: ARRAY
4925: PPUSH
4926: CALL_OW 185
// end ;
4930: LD_VAR 0 2
4934: RET
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
4935: LD_EXP 8
4939: IFFALSE 5141
4941: GO 4943
4943: DISABLE
4944: LD_INT 0
4946: PPUSH
4947: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
4948: LD_EXP 25
4952: PPUSH
4953: LD_INT 79
4955: PPUSH
4956: LD_INT 155
4958: PPUSH
4959: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
4963: LD_EXP 25
4967: PPUSH
4968: LD_INT 4
4970: PPUSH
4971: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
4975: LD_ADDR_VAR 0 2
4979: PUSH
4980: LD_EXP 24
4984: PPUSH
4985: LD_INT 50
4987: PUSH
4988: EMPTY
4989: LIST
4990: PPUSH
4991: CALL_OW 72
4995: ST_TO_ADDR
// for i in tmp do
4996: LD_ADDR_VAR 0 1
5000: PUSH
5001: LD_VAR 0 2
5005: PUSH
5006: FOR_IN
5007: IFFALSE 5041
// begin ComAgressiveMove ( i , 123 , 60 ) ;
5009: LD_VAR 0 1
5013: PPUSH
5014: LD_INT 123
5016: PPUSH
5017: LD_INT 60
5019: PPUSH
5020: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
5024: LD_VAR 0 1
5028: PPUSH
5029: LD_INT 153
5031: PPUSH
5032: LD_INT 103
5034: PPUSH
5035: CALL_OW 174
// end ;
5039: GO 5006
5041: POP
5042: POP
// repeat wait ( 0 0$1 ) ;
5043: LD_INT 35
5045: PPUSH
5046: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5050: LD_ADDR_VAR 0 2
5054: PUSH
5055: LD_EXP 24
5059: PPUSH
5060: LD_INT 50
5062: PUSH
5063: EMPTY
5064: LIST
5065: PPUSH
5066: CALL_OW 72
5070: ST_TO_ADDR
// for i in tmp do
5071: LD_ADDR_VAR 0 1
5075: PUSH
5076: LD_VAR 0 2
5080: PUSH
5081: FOR_IN
5082: IFFALSE 5132
// if not HasTask ( i ) then
5084: LD_VAR 0 1
5088: PPUSH
5089: CALL_OW 314
5093: NOT
5094: IFFALSE 5130
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) until not tmp ;
5096: LD_VAR 0 1
5100: PPUSH
5101: LD_INT 81
5103: PUSH
5104: LD_INT 3
5106: PUSH
5107: EMPTY
5108: LIST
5109: LIST
5110: PPUSH
5111: CALL_OW 69
5115: PPUSH
5116: LD_VAR 0 1
5120: PPUSH
5121: CALL_OW 74
5125: PPUSH
5126: CALL_OW 115
5130: GO 5081
5132: POP
5133: POP
5134: LD_VAR 0 2
5138: NOT
5139: IFFALSE 5043
// end ;
5141: PPOPN 2
5143: END
// every 0 0$2 trigger FilterUnitsInArea ( eastKirovArea , [ f_enemy , 6 ] ) do
5144: LD_INT 5
5146: PPUSH
5147: LD_INT 81
5149: PUSH
5150: LD_INT 6
5152: PUSH
5153: EMPTY
5154: LIST
5155: LIST
5156: PPUSH
5157: CALL_OW 70
5161: IFFALSE 5174
5163: GO 5165
5165: DISABLE
// russianAlert := true ;
5166: LD_ADDR_EXP 5
5170: PUSH
5171: LD_INT 1
5173: ST_TO_ADDR
5174: END
// every 0 0$1 trigger IsOk ( Beria ) and GetSide ( Beria ) = 3 and GetResourceType ( GetBase ( Beria ) , mat_cans ) < 100 do
5175: LD_INT 106
5177: PPUSH
5178: CALL_OW 302
5182: IFFALSE 5197
5184: PUSH
5185: LD_INT 106
5187: PPUSH
5188: CALL_OW 255
5192: PUSH
5193: LD_INT 3
5195: EQUAL
5196: AND
5197: IFFALSE 5220
5199: PUSH
5200: LD_INT 106
5202: PPUSH
5203: CALL_OW 274
5207: PPUSH
5208: LD_INT 1
5210: PPUSH
5211: CALL_OW 275
5215: PUSH
5216: LD_INT 100
5218: LESS
5219: AND
5220: IFFALSE 5244
5222: GO 5224
5224: DISABLE
// begin enable ;
5225: ENABLE
// AddResourceType ( GetBase ( beria ) , mat_cans , 200 ) ;
5226: LD_INT 106
5228: PPUSH
5229: CALL_OW 274
5233: PPUSH
5234: LD_INT 1
5236: PPUSH
5237: LD_INT 200
5239: PPUSH
5240: CALL_OW 276
// end ;
5244: END
// every 0 0$1 do var i , un , tmp ;
5245: GO 5247
5247: DISABLE
5248: LD_INT 0
5250: PPUSH
5251: PPUSH
5252: PPUSH
// begin uc_side := 3 ;
5253: LD_ADDR_OWVAR 20
5257: PUSH
5258: LD_INT 3
5260: ST_TO_ADDR
// uc_nation := 3 ;
5261: LD_ADDR_OWVAR 21
5265: PUSH
5266: LD_INT 3
5268: ST_TO_ADDR
// tmp := [ ] ;
5269: LD_ADDR_VAR 0 3
5273: PUSH
5274: EMPTY
5275: ST_TO_ADDR
// for i := 1 to 2 do
5276: LD_ADDR_VAR 0 1
5280: PUSH
5281: DOUBLE
5282: LD_INT 1
5284: DEC
5285: ST_TO_ADDR
5286: LD_INT 2
5288: PUSH
5289: FOR_TO
5290: IFFALSE 5367
// begin PrepareHuman ( false , 2 , 2 ) ;
5292: LD_INT 0
5294: PPUSH
5295: LD_INT 2
5297: PPUSH
5298: LD_INT 2
5300: PPUSH
5301: CALL_OW 380
// un := CreateHuman ;
5305: LD_ADDR_VAR 0 2
5309: PUSH
5310: CALL_OW 44
5314: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
5315: LD_ADDR_VAR 0 3
5319: PUSH
5320: LD_VAR 0 3
5324: PPUSH
5325: LD_VAR 0 3
5329: PUSH
5330: LD_INT 1
5332: PLUS
5333: PPUSH
5334: LD_VAR 0 2
5338: PPUSH
5339: CALL_OW 1
5343: ST_TO_ADDR
// PlaceUnitXYR ( un , 74 , 112 , 3 , false ) ;
5344: LD_VAR 0 2
5348: PPUSH
5349: LD_INT 74
5351: PPUSH
5352: LD_INT 112
5354: PPUSH
5355: LD_INT 3
5357: PPUSH
5358: LD_INT 0
5360: PPUSH
5361: CALL_OW 50
// end ;
5365: GO 5289
5367: POP
5368: POP
// AddResourceType ( GetBase ( kagan ) , mat_oil , 100 ) ;
5369: LD_INT 112
5371: PPUSH
5372: CALL_OW 274
5376: PPUSH
5377: LD_INT 2
5379: PPUSH
5380: LD_INT 100
5382: PPUSH
5383: CALL_OW 276
// repeat wait ( 0 0$1 ) ;
5387: LD_INT 35
5389: PPUSH
5390: CALL_OW 67
// for i in tmp do
5394: LD_ADDR_VAR 0 1
5398: PUSH
5399: LD_VAR 0 3
5403: PUSH
5404: FOR_IN
5405: IFFALSE 5489
// begin if IsDead ( i ) then
5407: LD_VAR 0 1
5411: PPUSH
5412: CALL_OW 301
5416: IFFALSE 5434
// tmp := tmp diff i ;
5418: LD_ADDR_VAR 0 3
5422: PUSH
5423: LD_VAR 0 3
5427: PUSH
5428: LD_VAR 0 1
5432: DIFF
5433: ST_TO_ADDR
// if not HasTask ( i ) and not Carry ( i ) then
5434: LD_VAR 0 1
5438: PPUSH
5439: CALL_OW 314
5443: NOT
5444: IFFALSE 5458
5446: PUSH
5447: LD_VAR 0 1
5451: PPUSH
5452: CALL_OW 281
5456: NOT
5457: AND
5458: IFFALSE 5487
// begin ComTransport ( i , kagan , mat_oil ) ;
5460: LD_VAR 0 1
5464: PPUSH
5465: LD_INT 112
5467: PPUSH
5468: LD_INT 2
5470: PPUSH
5471: CALL_OW 151
// AddComGive ( i , beria ) ;
5475: LD_VAR 0 1
5479: PPUSH
5480: LD_INT 106
5482: PPUSH
5483: CALL_OW 221
// end ; end ;
5487: GO 5404
5489: POP
5490: POP
// until not tmp or IsDead ( kagan ) or IsDead ( beria ) ;
5491: LD_VAR 0 3
5495: NOT
5496: IFTRUE 5507
5498: PUSH
5499: LD_INT 112
5501: PPUSH
5502: CALL_OW 301
5506: OR
5507: IFTRUE 5518
5509: PUSH
5510: LD_INT 106
5512: PPUSH
5513: CALL_OW 301
5517: OR
5518: IFFALSE 5387
// end ;
5520: PPOPN 3
5522: END
// every 0 0$01 do var i , j , skr , cargo , dep ;
5523: GO 5525
5525: DISABLE
5526: LD_INT 0
5528: PPUSH
5529: PPUSH
5530: PPUSH
5531: PPUSH
5532: PPUSH
// begin enable ;
5533: ENABLE
// cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] , [ f_lives , 600 ] ] ) ;
5534: LD_ADDR_VAR 0 4
5538: PUSH
5539: LD_INT 22
5541: PUSH
5542: LD_INT 3
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: PUSH
5549: LD_INT 34
5551: PUSH
5552: LD_INT 51
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: PUSH
5559: LD_INT 24
5561: PUSH
5562: LD_INT 600
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: PUSH
5569: EMPTY
5570: LIST
5571: LIST
5572: LIST
5573: PPUSH
5574: CALL_OW 69
5578: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5579: LD_ADDR_VAR 0 5
5583: PUSH
5584: LD_INT 22
5586: PUSH
5587: LD_INT 3
5589: PUSH
5590: EMPTY
5591: LIST
5592: LIST
5593: PUSH
5594: LD_INT 2
5596: PUSH
5597: LD_INT 30
5599: PUSH
5600: LD_INT 0
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: PUSH
5607: LD_INT 30
5609: PUSH
5610: LD_INT 1
5612: PUSH
5613: EMPTY
5614: LIST
5615: LIST
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: LIST
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: PPUSH
5626: CALL_OW 69
5630: ST_TO_ADDR
// skr = GetListOfCratesInArea ( ruCratesCollectArea ) ;
5631: LD_ADDR_VAR 0 3
5635: PUSH
5636: LD_INT 9
5638: PPUSH
5639: CALL_OW 435
5643: ST_TO_ADDR
// if not cargo or not skr or not dep then
5644: LD_VAR 0 4
5648: NOT
5649: IFTRUE 5658
5651: PUSH
5652: LD_VAR 0 3
5656: NOT
5657: OR
5658: IFTRUE 5667
5660: PUSH
5661: LD_VAR 0 5
5665: NOT
5666: OR
5667: IFFALSE 5671
// exit ;
5669: GO 5837
// for i in cargo do
5671: LD_ADDR_VAR 0 1
5675: PUSH
5676: LD_VAR 0 4
5680: PUSH
5681: FOR_IN
5682: IFFALSE 5835
// begin if not skr then
5684: LD_VAR 0 3
5688: NOT
5689: IFFALSE 5695
// exit ;
5691: POP
5692: POP
5693: GO 5837
// if not HasTask ( i ) then
5695: LD_VAR 0 1
5699: PPUSH
5700: CALL_OW 314
5704: NOT
5705: IFFALSE 5774
// begin ComCollect ( i , skr [ 1 ] , skr [ 2 ] ) ;
5707: LD_VAR 0 1
5711: PPUSH
5712: LD_VAR 0 3
5716: PUSH
5717: LD_INT 1
5719: ARRAY
5720: PPUSH
5721: LD_VAR 0 3
5725: PUSH
5726: LD_INT 2
5728: ARRAY
5729: PPUSH
5730: CALL_OW 117
// for j := 1 to 2 do
5734: LD_ADDR_VAR 0 2
5738: PUSH
5739: DOUBLE
5740: LD_INT 1
5742: DEC
5743: ST_TO_ADDR
5744: LD_INT 2
5746: PUSH
5747: FOR_TO
5748: IFFALSE 5770
// skr := Delete ( skr , 1 ) ;
5750: LD_ADDR_VAR 0 3
5754: PUSH
5755: LD_VAR 0 3
5759: PPUSH
5760: LD_INT 1
5762: PPUSH
5763: CALL_OW 3
5767: ST_TO_ADDR
5768: GO 5747
5770: POP
5771: POP
// end else
5772: GO 5833
// if GetFuel ( i ) < 3 and GetDistUnits ( i , NearestUnitToUnit ( dep , i ) ) < 6 then
5774: LD_VAR 0 1
5778: PPUSH
5779: CALL_OW 261
5783: PUSH
5784: LD_INT 3
5786: LESS
5787: IFFALSE 5819
5789: PUSH
5790: LD_VAR 0 1
5794: PPUSH
5795: LD_VAR 0 5
5799: PPUSH
5800: LD_VAR 0 1
5804: PPUSH
5805: CALL_OW 74
5809: PPUSH
5810: CALL_OW 296
5814: PUSH
5815: LD_INT 6
5817: LESS
5818: AND
5819: IFFALSE 5833
// SetFuel ( i , 100 ) ;
5821: LD_VAR 0 1
5825: PPUSH
5826: LD_INT 100
5828: PPUSH
5829: CALL_OW 240
// end ;
5833: GO 5681
5835: POP
5836: POP
// end ;
5837: PPOPN 5
5839: END
// export function SendSupport ; var i , un ; begin
5840: LD_INT 0
5842: PPUSH
5843: PPUSH
5844: PPUSH
// uc_nation := 3 ;
5845: LD_ADDR_OWVAR 21
5849: PUSH
5850: LD_INT 3
5852: ST_TO_ADDR
// uc_side := 3 ;
5853: LD_ADDR_OWVAR 20
5857: PUSH
5858: LD_INT 3
5860: ST_TO_ADDR
// ResetHc ;
5861: CALL 71752 0 0
// for i := 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
5865: LD_ADDR_VAR 0 2
5869: PUSH
5870: DOUBLE
5871: LD_INT 1
5873: DEC
5874: ST_TO_ADDR
5875: LD_INT 3
5877: PUSH
5878: LD_INT 3
5880: PUSH
5881: LD_INT 4
5883: PUSH
5884: EMPTY
5885: LIST
5886: LIST
5887: LIST
5888: PUSH
5889: LD_OWVAR 67
5893: ARRAY
5894: PUSH
5895: FOR_TO
5896: IFFALSE 5970
// begin PrepareHuman ( false , 1 , Difficulty ) ;
5898: LD_INT 0
5900: PPUSH
5901: LD_INT 1
5903: PPUSH
5904: LD_OWVAR 67
5908: PPUSH
5909: CALL_OW 380
// un := CreateHuman ;
5913: LD_ADDR_VAR 0 3
5917: PUSH
5918: CALL_OW 44
5922: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
5923: LD_VAR 0 3
5927: PPUSH
5928: LD_INT 107
5930: PPUSH
5931: LD_INT 95
5933: PPUSH
5934: LD_INT 4
5936: PPUSH
5937: LD_INT 0
5939: PPUSH
5940: CALL_OW 50
// ComAgressiveMove ( un , 56 , 27 ) ;
5944: LD_VAR 0 3
5948: PPUSH
5949: LD_INT 56
5951: PPUSH
5952: LD_INT 27
5954: PPUSH
5955: CALL_OW 114
// AddComHold ( un ) ;
5959: LD_VAR 0 3
5963: PPUSH
5964: CALL_OW 200
// end ;
5968: GO 5895
5970: POP
5971: POP
// PrepareHuman ( false , 4 , Difficulty ) ;
5972: LD_INT 0
5974: PPUSH
5975: LD_INT 4
5977: PPUSH
5978: LD_OWVAR 67
5982: PPUSH
5983: CALL_OW 380
// un := CreateHuman ;
5987: LD_ADDR_VAR 0 3
5991: PUSH
5992: CALL_OW 44
5996: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
5997: LD_VAR 0 3
6001: PPUSH
6002: LD_INT 107
6004: PPUSH
6005: LD_INT 95
6007: PPUSH
6008: LD_INT 4
6010: PPUSH
6011: LD_INT 0
6013: PPUSH
6014: CALL_OW 50
// ComMoveXY ( un , 59 , 25 ) ;
6018: LD_VAR 0 3
6022: PPUSH
6023: LD_INT 59
6025: PPUSH
6026: LD_INT 25
6028: PPUSH
6029: CALL_OW 111
// if Difficulty > 1 then
6033: LD_OWVAR 67
6037: PUSH
6038: LD_INT 1
6040: GREATER
6041: IFFALSE 6150
// begin for i := 1 to [ 2 , 2 , 3 ] [ Difficulty ] do
6043: LD_ADDR_VAR 0 2
6047: PUSH
6048: DOUBLE
6049: LD_INT 1
6051: DEC
6052: ST_TO_ADDR
6053: LD_INT 2
6055: PUSH
6056: LD_INT 2
6058: PUSH
6059: LD_INT 3
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: LIST
6066: PUSH
6067: LD_OWVAR 67
6071: ARRAY
6072: PUSH
6073: FOR_TO
6074: IFFALSE 6148
// begin PrepareHuman ( false , 1 , Difficulty ) ;
6076: LD_INT 0
6078: PPUSH
6079: LD_INT 1
6081: PPUSH
6082: LD_OWVAR 67
6086: PPUSH
6087: CALL_OW 380
// un := CreateHuman ;
6091: LD_ADDR_VAR 0 3
6095: PUSH
6096: CALL_OW 44
6100: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
6101: LD_VAR 0 3
6105: PPUSH
6106: LD_INT 107
6108: PPUSH
6109: LD_INT 95
6111: PPUSH
6112: LD_INT 4
6114: PPUSH
6115: LD_INT 0
6117: PPUSH
6118: CALL_OW 50
// ComAgressiveMove ( un , 45 , 76 ) ;
6122: LD_VAR 0 3
6126: PPUSH
6127: LD_INT 45
6129: PPUSH
6130: LD_INT 76
6132: PPUSH
6133: CALL_OW 114
// AddComHold ( un ) ;
6137: LD_VAR 0 3
6141: PPUSH
6142: CALL_OW 200
// end ;
6146: GO 6073
6148: POP
6149: POP
// end ; end ;
6150: LD_VAR 0 1
6154: RET
// every 6 6$00 trigger tick >= 20 20$00 and Difficulty > 1 and russianOmicronAttackers > 4 and not retreatFromOmicron do var i , un , tmp , path ;
6155: LD_OWVAR 1
6159: PUSH
6160: LD_INT 42000
6162: GREATEREQUAL
6163: IFFALSE 6175
6165: PUSH
6166: LD_OWVAR 67
6170: PUSH
6171: LD_INT 1
6173: GREATER
6174: AND
6175: IFFALSE 6187
6177: PUSH
6178: LD_EXP 24
6182: PUSH
6183: LD_INT 4
6185: GREATER
6186: AND
6187: IFFALSE 6196
6189: PUSH
6190: LD_EXP 8
6194: NOT
6195: AND
6196: IFFALSE 6489
6198: GO 6200
6200: DISABLE
6201: LD_INT 0
6203: PPUSH
6204: PPUSH
6205: PPUSH
6206: PPUSH
// begin enable ;
6207: ENABLE
// tmp := [ ] ;
6208: LD_ADDR_VAR 0 3
6212: PUSH
6213: EMPTY
6214: ST_TO_ADDR
// path := [ [ 55 , 91 ] , [ 47 , 80 ] , [ 39 , 67 ] , [ 36 , 60 ] , [ 33 , 52 ] ] ;
6215: LD_ADDR_VAR 0 4
6219: PUSH
6220: LD_INT 55
6222: PUSH
6223: LD_INT 91
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: PUSH
6230: LD_INT 47
6232: PUSH
6233: LD_INT 80
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: PUSH
6240: LD_INT 39
6242: PUSH
6243: LD_INT 67
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: PUSH
6250: LD_INT 36
6252: PUSH
6253: LD_INT 60
6255: PUSH
6256: EMPTY
6257: LIST
6258: LIST
6259: PUSH
6260: LD_INT 33
6262: PUSH
6263: LD_INT 52
6265: PUSH
6266: EMPTY
6267: LIST
6268: LIST
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: LIST
6274: LIST
6275: LIST
6276: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty - 1 ] do
6277: LD_ADDR_VAR 0 1
6281: PUSH
6282: DOUBLE
6283: LD_INT 1
6285: DEC
6286: ST_TO_ADDR
6287: LD_INT 2
6289: PUSH
6290: LD_INT 3
6292: PUSH
6293: LD_INT 3
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: LIST
6300: PUSH
6301: LD_OWVAR 67
6305: PUSH
6306: LD_INT 1
6308: MINUS
6309: ARRAY
6310: PUSH
6311: FOR_TO
6312: IFFALSE 6463
// begin uc_side := 3 ;
6314: LD_ADDR_OWVAR 20
6318: PUSH
6319: LD_INT 3
6321: ST_TO_ADDR
// uc_nation := 3 ;
6322: LD_ADDR_OWVAR 21
6326: PUSH
6327: LD_INT 3
6329: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gun ] [ i mod 3 + 1 ] , 100 ) ;
6330: LD_INT 22
6332: PPUSH
6333: LD_INT 1
6335: PPUSH
6336: LD_INT 1
6338: PPUSH
6339: LD_INT 42
6341: PUSH
6342: LD_INT 42
6344: PUSH
6345: LD_INT 44
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: LIST
6352: PUSH
6353: LD_VAR 0 1
6357: PUSH
6358: LD_INT 3
6360: MOD
6361: PUSH
6362: LD_INT 1
6364: PLUS
6365: ARRAY
6366: PPUSH
6367: LD_INT 100
6369: PPUSH
6370: CALL 38057 0 5
// un := CreateVehicle ;
6374: LD_ADDR_VAR 0 2
6378: PUSH
6379: CALL_OW 45
6383: ST_TO_ADDR
// PlaceUnitXYR ( un , 57 , 103 , 4 , false ) ;
6384: LD_VAR 0 2
6388: PPUSH
6389: LD_INT 57
6391: PPUSH
6392: LD_INT 103
6394: PPUSH
6395: LD_INT 4
6397: PPUSH
6398: LD_INT 0
6400: PPUSH
6401: CALL_OW 50
// tmp := Replace ( tmp , tmp + 1 , un ) ;
6405: LD_ADDR_VAR 0 3
6409: PUSH
6410: LD_VAR 0 3
6414: PPUSH
6415: LD_VAR 0 3
6419: PUSH
6420: LD_INT 1
6422: PLUS
6423: PPUSH
6424: LD_VAR 0 2
6428: PPUSH
6429: CALL_OW 1
6433: ST_TO_ADDR
// PrepareHuman ( false , 3 , 5 ) ;
6434: LD_INT 0
6436: PPUSH
6437: LD_INT 3
6439: PPUSH
6440: LD_INT 5
6442: PPUSH
6443: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
6447: CALL_OW 44
6451: PPUSH
6452: LD_VAR 0 2
6456: PPUSH
6457: CALL_OW 52
// end ;
6461: GO 6311
6463: POP
6464: POP
// repeat wait ( 0 0$1 ) ;
6465: LD_INT 35
6467: PPUSH
6468: CALL_OW 67
// until not AgressiveMove ( tmp , path ) ;
6472: LD_VAR 0 3
6476: PPUSH
6477: LD_VAR 0 4
6481: PPUSH
6482: CALL 73993 0 2
6486: NOT
6487: IFFALSE 6465
// end ;
6489: PPOPN 4
6491: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
6492: LD_INT 3
6494: PUSH
6495: LD_INT 22
6497: PUSH
6498: LD_INT 1
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: PUSH
6509: LD_INT 32
6511: PUSH
6512: LD_INT 1
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: PPUSH
6523: CALL_OW 69
6527: IFFALSE 6611
6529: GO 6531
6531: DISABLE
6532: LD_INT 0
6534: PPUSH
// begin enable ;
6535: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
6536: LD_ADDR_VAR 0 1
6540: PUSH
6541: LD_INT 3
6543: PUSH
6544: LD_INT 22
6546: PUSH
6547: LD_INT 1
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: PUSH
6558: LD_INT 32
6560: PUSH
6561: LD_INT 1
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: PPUSH
6572: CALL_OW 69
6576: PUSH
6577: FOR_IN
6578: IFFALSE 6609
// if GetFuel ( i ) < 3 then
6580: LD_VAR 0 1
6584: PPUSH
6585: CALL_OW 261
6589: PUSH
6590: LD_INT 3
6592: LESS
6593: IFFALSE 6607
// SetFuel ( i , 3 ) ;
6595: LD_VAR 0 1
6599: PPUSH
6600: LD_INT 3
6602: PPUSH
6603: CALL_OW 240
6607: GO 6577
6609: POP
6610: POP
// end ; end_of_file
6611: PPOPN 1
6613: END
// export function PrepareArabian ; var i , j , un , veh , xy ; begin
6614: LD_INT 0
6616: PPUSH
6617: PPUSH
6618: PPUSH
6619: PPUSH
6620: PPUSH
6621: PPUSH
// uc_side := 2 ;
6622: LD_ADDR_OWVAR 20
6626: PUSH
6627: LD_INT 2
6629: ST_TO_ADDR
// uc_nation := 2 ;
6630: LD_ADDR_OWVAR 21
6634: PUSH
6635: LD_INT 2
6637: ST_TO_ADDR
// InitVc ;
6638: CALL_OW 20
// ResetHc ;
6642: CALL 71752 0 0
// for j := 1 to 2 do
6646: LD_ADDR_VAR 0 3
6650: PUSH
6651: DOUBLE
6652: LD_INT 1
6654: DEC
6655: ST_TO_ADDR
6656: LD_INT 2
6658: PUSH
6659: FOR_TO
6660: IFFALSE 6884
// begin xy := [ [ 178 , 3 ] , [ 268 , 121 ] ] [ j ] ;
6662: LD_ADDR_VAR 0 6
6666: PUSH
6667: LD_INT 178
6669: PUSH
6670: LD_INT 3
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: PUSH
6677: LD_INT 268
6679: PUSH
6680: LD_INT 121
6682: PUSH
6683: EMPTY
6684: LIST
6685: LIST
6686: PUSH
6687: EMPTY
6688: LIST
6689: LIST
6690: PUSH
6691: LD_VAR 0 3
6695: ARRAY
6696: ST_TO_ADDR
// for i := 1 to 8 do
6697: LD_ADDR_VAR 0 2
6701: PUSH
6702: DOUBLE
6703: LD_INT 1
6705: DEC
6706: ST_TO_ADDR
6707: LD_INT 8
6709: PUSH
6710: FOR_TO
6711: IFFALSE 6880
// begin uc_side := 2 ;
6713: LD_ADDR_OWVAR 20
6717: PUSH
6718: LD_INT 2
6720: ST_TO_ADDR
// uc_nation := 2 ;
6721: LD_ADDR_OWVAR 21
6725: PUSH
6726: LD_INT 2
6728: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_flame_thrower , ar_gun ] [ rand ( 1 , 2 ) ] , 99 ) ;
6729: LD_INT 14
6731: PPUSH
6732: LD_INT 1
6734: PPUSH
6735: LD_INT 1
6737: PPUSH
6738: LD_INT 26
6740: PUSH
6741: LD_INT 27
6743: PUSH
6744: EMPTY
6745: LIST
6746: LIST
6747: PUSH
6748: LD_INT 1
6750: PPUSH
6751: LD_INT 2
6753: PPUSH
6754: CALL_OW 12
6758: ARRAY
6759: PPUSH
6760: LD_INT 99
6762: PPUSH
6763: CALL 38057 0 5
// veh := CreateVehicle ;
6767: LD_ADDR_VAR 0 5
6771: PUSH
6772: CALL_OW 45
6776: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6777: LD_VAR 0 5
6781: PPUSH
6782: LD_INT 3
6784: PPUSH
6785: CALL_OW 233
// PlaceUnitXY ( veh , xy [ 1 ] , xy [ 2 ] , false ) ;
6789: LD_VAR 0 5
6793: PPUSH
6794: LD_VAR 0 6
6798: PUSH
6799: LD_INT 1
6801: ARRAY
6802: PPUSH
6803: LD_VAR 0 6
6807: PUSH
6808: LD_INT 2
6810: ARRAY
6811: PPUSH
6812: LD_INT 0
6814: PPUSH
6815: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
6819: LD_INT 0
6821: PPUSH
6822: LD_INT 3
6824: PPUSH
6825: LD_INT 6
6827: PPUSH
6828: CALL_OW 380
// un := CreateHuman ;
6832: LD_ADDR_VAR 0 4
6836: PUSH
6837: CALL_OW 44
6841: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6842: LD_VAR 0 4
6846: PPUSH
6847: LD_VAR 0 5
6851: PPUSH
6852: CALL_OW 52
// ComMoveXY ( un , 186 , 17 ) ;
6856: LD_VAR 0 4
6860: PPUSH
6861: LD_INT 186
6863: PPUSH
6864: LD_INT 17
6866: PPUSH
6867: CALL_OW 111
// wait ( 0 0$2 ) ;
6871: LD_INT 70
6873: PPUSH
6874: CALL_OW 67
// end ;
6878: GO 6710
6880: POP
6881: POP
// end ;
6882: GO 6659
6884: POP
6885: POP
// for i := 1 to 10 do
6886: LD_ADDR_VAR 0 2
6890: PUSH
6891: DOUBLE
6892: LD_INT 1
6894: DEC
6895: ST_TO_ADDR
6896: LD_INT 10
6898: PUSH
6899: FOR_TO
6900: IFFALSE 6967
// begin PrepareHuman ( false , 1 , 5 ) ;
6902: LD_INT 0
6904: PPUSH
6905: LD_INT 1
6907: PPUSH
6908: LD_INT 5
6910: PPUSH
6911: CALL_OW 380
// un := CreateHuman ;
6915: LD_ADDR_VAR 0 4
6919: PUSH
6920: CALL_OW 44
6924: ST_TO_ADDR
// PlaceUnitXY ( un , 178 , 3 , false ) ;
6925: LD_VAR 0 4
6929: PPUSH
6930: LD_INT 178
6932: PPUSH
6933: LD_INT 3
6935: PPUSH
6936: LD_INT 0
6938: PPUSH
6939: CALL_OW 48
// ComMoveXY ( un , 186 , 17 ) ;
6943: LD_VAR 0 4
6947: PPUSH
6948: LD_INT 186
6950: PPUSH
6951: LD_INT 17
6953: PPUSH
6954: CALL_OW 111
// wait ( 0 0$2 ) ;
6958: LD_INT 70
6960: PPUSH
6961: CALL_OW 67
// end ;
6965: GO 6899
6967: POP
6968: POP
// end ;
6969: LD_VAR 0 1
6973: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] ] ) do var i , enemy ;
6974: LD_INT 22
6976: PUSH
6977: LD_INT 2
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 50
6986: PUSH
6987: EMPTY
6988: LIST
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PPUSH
6994: CALL_OW 69
6998: IFFALSE 7134
7000: GO 7002
7002: DISABLE
7003: LD_INT 0
7005: PPUSH
7006: PPUSH
// begin enable ;
7007: ENABLE
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
7008: LD_ADDR_VAR 0 2
7012: PUSH
7013: LD_INT 2
7015: PUSH
7016: LD_INT 22
7018: PUSH
7019: LD_INT 3
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: PUSH
7026: LD_INT 22
7028: PUSH
7029: LD_INT 6
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: LIST
7040: PPUSH
7041: CALL_OW 69
7045: ST_TO_ADDR
// if not enemy then
7046: LD_VAR 0 2
7050: NOT
7051: IFFALSE 7073
// enemy := FilterAllUnits ( [ f_side , 1 ] ) ;
7053: LD_ADDR_VAR 0 2
7057: PUSH
7058: LD_INT 22
7060: PUSH
7061: LD_INT 1
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: PPUSH
7068: CALL_OW 69
7072: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] ] ) do
7073: LD_ADDR_VAR 0 1
7077: PUSH
7078: LD_INT 22
7080: PUSH
7081: LD_INT 2
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PUSH
7088: LD_INT 50
7090: PUSH
7091: EMPTY
7092: LIST
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: PPUSH
7098: CALL_OW 69
7102: PUSH
7103: FOR_IN
7104: IFFALSE 7132
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7106: LD_VAR 0 1
7110: PPUSH
7111: LD_VAR 0 2
7115: PPUSH
7116: LD_VAR 0 1
7120: PPUSH
7121: CALL_OW 74
7125: PPUSH
7126: CALL_OW 115
7130: GO 7103
7132: POP
7133: POP
// end ; end_of_file
7134: PPOPN 2
7136: END
// export function Action ; begin
7137: LD_INT 0
7139: PPUSH
// InGameOn ;
7140: CALL_OW 8
// CenterNowOnXY ( 106 , 3 ) ;
7144: LD_INT 106
7146: PPUSH
7147: LD_INT 3
7149: PPUSH
7150: CALL_OW 86
// wait ( 0 0$2 ) ;
7154: LD_INT 70
7156: PPUSH
7157: CALL_OW 67
// ChangeMissionObjectives ( target1 ) ;
7161: LD_STRING target1
7163: PPUSH
7164: CALL_OW 337
// InGameOff ;
7168: CALL_OW 9
// SaveForQuickRestart ;
7172: CALL_OW 22
// end ;
7176: LD_VAR 0 1
7180: RET
// every 0 0$1 trigger IsDead ( omikron ) and not retreatFromOmicron do
7181: LD_INT 64
7183: PPUSH
7184: CALL_OW 301
7188: IFFALSE 7197
7190: PUSH
7191: LD_EXP 8
7195: NOT
7196: AND
7197: IFFALSE 7217
7199: GO 7201
7201: DISABLE
// begin omicronFall := true ;
7202: LD_ADDR_EXP 7
7206: PUSH
7207: LD_INT 1
7209: ST_TO_ADDR
// YouLost ( omi ) ;
7210: LD_STRING omi
7212: PPUSH
7213: CALL_OW 104
// end ;
7217: END
// every 0 0$1 trigger ( See ( 4 , Sikorski ) or See ( 4 , IsInUnit ( Sikorski ) ) ) and IsOk ( omikron ) do var i , tmp , speaker , whereHeWas ;
7218: LD_INT 4
7220: PPUSH
7221: LD_EXP 14
7225: PPUSH
7226: CALL_OW 292
7230: IFTRUE 7251
7232: PUSH
7233: LD_INT 4
7235: PPUSH
7236: LD_EXP 14
7240: PPUSH
7241: CALL_OW 310
7245: PPUSH
7246: CALL_OW 292
7250: OR
7251: IFFALSE 7262
7253: PUSH
7254: LD_INT 64
7256: PPUSH
7257: CALL_OW 302
7261: AND
7262: IFFALSE 7817
7264: GO 7266
7266: DISABLE
7267: LD_INT 0
7269: PPUSH
7270: PPUSH
7271: PPUSH
7272: PPUSH
// begin InGameOn ;
7273: CALL_OW 8
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
7277: LD_ADDR_VAR 0 2
7281: PUSH
7282: LD_INT 22
7284: PUSH
7285: LD_INT 4
7287: PUSH
7288: EMPTY
7289: LIST
7290: LIST
7291: PPUSH
7292: CALL_OW 69
7296: ST_TO_ADDR
// speaker := UnitFilter ( tmp , [ f_sex , sex_male ] ) [ 1 ] ;
7297: LD_ADDR_VAR 0 3
7301: PUSH
7302: LD_VAR 0 2
7306: PPUSH
7307: LD_INT 26
7309: PUSH
7310: LD_INT 1
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: PPUSH
7317: CALL_OW 72
7321: PUSH
7322: LD_INT 1
7324: ARRAY
7325: ST_TO_ADDR
// for i in tmp do
7326: LD_ADDR_VAR 0 1
7330: PUSH
7331: LD_VAR 0 2
7335: PUSH
7336: FOR_IN
7337: IFFALSE 7353
// SetSide ( i , 1 ) ;
7339: LD_VAR 0 1
7343: PPUSH
7344: LD_INT 1
7346: PPUSH
7347: CALL_OW 235
7351: GO 7336
7353: POP
7354: POP
// ComMoveXY ( Sikorski , 37 , 40 ) ;
7355: LD_EXP 14
7359: PPUSH
7360: LD_INT 37
7362: PPUSH
7363: LD_INT 40
7365: PPUSH
7366: CALL_OW 111
// wait ( 0 0$5 ) ;
7370: LD_INT 175
7372: PPUSH
7373: CALL_OW 67
// ComExit ( Sikorski ) ;
7377: LD_EXP 14
7381: PPUSH
7382: CALL 71625 0 1
// AddComMoveXY ( Sikorski , 37 , 40 ) ;
7386: LD_EXP 14
7390: PPUSH
7391: LD_INT 37
7393: PPUSH
7394: LD_INT 40
7396: PPUSH
7397: CALL_OW 171
// CenterOnUnits ( Sikorski ) ;
7401: LD_EXP 14
7405: PPUSH
7406: CALL_OW 85
// wait ( 0 0$2 ) ;
7410: LD_INT 70
7412: PPUSH
7413: CALL_OW 67
// whereHeWas := ComExit ( speaker ) ;
7417: LD_ADDR_VAR 0 4
7421: PUSH
7422: LD_VAR 0 3
7426: PPUSH
7427: CALL 71625 0 1
7431: ST_TO_ADDR
// AddComMoveUnit ( speaker , Sikorski ) ;
7432: LD_VAR 0 3
7436: PPUSH
7437: LD_EXP 14
7441: PPUSH
7442: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
7446: LD_INT 35
7448: PPUSH
7449: CALL_OW 67
// until GetDistUnits ( speaker , Sikorski ) < 5 and not IsInUnit ( Sikorski ) ;
7453: LD_VAR 0 3
7457: PPUSH
7458: LD_EXP 14
7462: PPUSH
7463: CALL_OW 296
7467: PUSH
7468: LD_INT 5
7470: LESS
7471: IFFALSE 7485
7473: PUSH
7474: LD_EXP 14
7478: PPUSH
7479: CALL_OW 310
7483: NOT
7484: AND
7485: IFFALSE 7446
// ComTurnUnit ( Sikorski , speaker ) ;
7487: LD_EXP 14
7491: PPUSH
7492: LD_VAR 0 3
7496: PPUSH
7497: CALL_OW 119
// ComTurnUnit ( speaker , Sikorski ) ;
7501: LD_VAR 0 3
7505: PPUSH
7506: LD_EXP 14
7510: PPUSH
7511: CALL_OW 119
// CenterNowOnUnits ( Sikorski ) ;
7515: LD_EXP 14
7519: PPUSH
7520: CALL_OW 87
// Say ( Sikorski , DS-1 ) ;
7524: LD_EXP 14
7528: PPUSH
7529: LD_STRING DS-1
7531: PPUSH
7532: CALL_OW 88
// Say ( speaker , DP-1 ) ;
7536: LD_VAR 0 3
7540: PPUSH
7541: LD_STRING DP-1
7543: PPUSH
7544: CALL_OW 88
// Say ( Sikorski , DS-2 ) ;
7548: LD_EXP 14
7552: PPUSH
7553: LD_STRING DS-2
7555: PPUSH
7556: CALL_OW 88
// Say ( speaker , DP-2 ) ;
7560: LD_VAR 0 3
7564: PPUSH
7565: LD_STRING DP-2
7567: PPUSH
7568: CALL_OW 88
// Say ( Sikorski , DS-3 ) ;
7572: LD_EXP 14
7576: PPUSH
7577: LD_STRING DS-3
7579: PPUSH
7580: CALL_OW 88
// Say ( speaker , DP-3 ) ;
7584: LD_VAR 0 3
7588: PPUSH
7589: LD_STRING DP-3
7591: PPUSH
7592: CALL_OW 88
// Say ( Sikorski , DS-4 ) ;
7596: LD_EXP 14
7600: PPUSH
7601: LD_STRING DS-4
7603: PPUSH
7604: CALL_OW 88
// wait ( 0 0$1 ) ;
7608: LD_INT 35
7610: PPUSH
7611: CALL_OW 67
// if whereHeWas then
7615: LD_VAR 0 4
7619: IFFALSE 7635
// ComEnterUnit ( speaker , whereHeWas ) ;
7621: LD_VAR 0 3
7625: PPUSH
7626: LD_VAR 0 4
7630: PPUSH
7631: CALL_OW 120
// ComHold ( Sikorski ) ;
7635: LD_EXP 14
7639: PPUSH
7640: CALL_OW 140
// wait ( 0 0$1 ) ;
7644: LD_INT 35
7646: PPUSH
7647: CALL_OW 67
// SayRadio ( Harrison , DR-1 ) ;
7651: LD_EXP 15
7655: PPUSH
7656: LD_STRING DR-1
7658: PPUSH
7659: CALL_OW 94
// Say ( Sikorski , DS-5 ) ;
7663: LD_EXP 14
7667: PPUSH
7668: LD_STRING DS-5
7670: PPUSH
7671: CALL_OW 88
// SayRadio ( Harrison , DR-2 ) ;
7675: LD_EXP 15
7679: PPUSH
7680: LD_STRING DR-2
7682: PPUSH
7683: CALL_OW 94
// Say ( Sikorski , DS-6 ) ;
7687: LD_EXP 14
7691: PPUSH
7692: LD_STRING DS-6
7694: PPUSH
7695: CALL_OW 88
// SayRadio ( Harrison , DR-3 ) ;
7699: LD_EXP 15
7703: PPUSH
7704: LD_STRING DR-3
7706: PPUSH
7707: CALL_OW 94
// InGameOff ;
7711: CALL_OW 9
// ChangeMissionObjectives ( target2 ) ;
7715: LD_STRING target2
7717: PPUSH
7718: CALL_OW 337
// sikorskiInOmicron := true ;
7722: LD_ADDR_EXP 9
7726: PUSH
7727: LD_INT 1
7729: ST_TO_ADDR
// wait ( 0 0$2 ) ;
7730: LD_INT 70
7732: PPUSH
7733: CALL_OW 67
// Say ( Sikorski , DS-7 ) ;
7737: LD_EXP 14
7741: PPUSH
7742: LD_STRING DS-7
7744: PPUSH
7745: CALL_OW 88
// wait ( 3 3$00 ) ;
7749: LD_INT 6300
7751: PPUSH
7752: CALL_OW 67
// SayRadio ( Harrison , DRforce-5 ) ;
7756: LD_EXP 15
7760: PPUSH
7761: LD_STRING DRforce-5
7763: PPUSH
7764: CALL_OW 94
// wait ( 4 4$50 ) ;
7768: LD_INT 10150
7770: PPUSH
7771: CALL_OW 67
// FirstReinforcements ;
7775: CALL 7996 0 0
// wait ( rand ( 12 12$00 , 15 15$00 ) ) ;
7779: LD_INT 25200
7781: PPUSH
7782: LD_INT 31500
7784: PPUSH
7785: CALL_OW 12
7789: PPUSH
7790: CALL_OW 67
// SayRadio ( Harrison , DRforce-10 ) ;
7794: LD_EXP 15
7798: PPUSH
7799: LD_STRING DRforce-10
7801: PPUSH
7802: CALL_OW 94
// wait ( 9 9$50 ) ;
7806: LD_INT 20650
7808: PPUSH
7809: CALL_OW 67
// SecondReinforcements ;
7813: CALL 8843 0 0
// end ;
7817: PPOPN 4
7819: END
// every 0 0$1 trigger GetLives ( Sikorski ) < 1000 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
7820: LD_EXP 14
7824: PPUSH
7825: CALL_OW 256
7829: PUSH
7830: LD_INT 1000
7832: LESS
7833: IFFALSE 7883
7835: PUSH
7836: LD_INT 22
7838: PUSH
7839: LD_INT 1
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: PUSH
7846: LD_INT 2
7848: PUSH
7849: LD_INT 101
7851: PUSH
7852: LD_INT 3
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: PUSH
7859: LD_INT 101
7861: PUSH
7862: LD_INT 6
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: PUSH
7869: EMPTY
7870: LIST
7871: LIST
7872: LIST
7873: PUSH
7874: EMPTY
7875: LIST
7876: LIST
7877: PPUSH
7878: CALL_OW 69
7882: AND
7883: IFFALSE 7900
7885: GO 7887
7887: DISABLE
// Say ( Sikorski , DRus ) ;
7888: LD_EXP 14
7892: PPUSH
7893: LD_STRING DRus
7895: PPUSH
7896: CALL_OW 88
7900: END
// every 0 0$1 trigger tick >= [ 11 11$00 , 10 10$30 , 9 9$40 ] [ Difficulty ] do
7901: LD_OWVAR 1
7905: PUSH
7906: LD_INT 23100
7908: PUSH
7909: LD_INT 22050
7911: PUSH
7912: LD_INT 20300
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: LIST
7919: PUSH
7920: LD_OWVAR 67
7924: ARRAY
7925: GREATEREQUAL
7926: IFFALSE 7995
7928: GO 7930
7930: DISABLE
// begin SendSupport ;
7931: CALL 5840 0 0
// ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
7935: LD_EXP 24
7939: PPUSH
7940: LD_INT 21
7942: PUSH
7943: LD_INT 2
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: PPUSH
7950: CALL_OW 72
7954: PPUSH
7955: LD_INT 62
7957: PPUSH
7958: LD_INT 22
7960: PPUSH
7961: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
7965: LD_EXP 25
7969: PPUSH
7970: LD_INT 69
7972: PPUSH
7973: LD_INT 27
7975: PPUSH
7976: CALL_OW 111
// wait ( 1 1$00 ) ;
7980: LD_INT 2100
7982: PPUSH
7983: CALL_OW 67
// startAttackOnOmicron := true ;
7987: LD_ADDR_EXP 6
7991: PUSH
7992: LD_INT 1
7994: ST_TO_ADDR
// end ;
7995: END
// export function FirstReinforcements ; var i , un , tmp , spotted , xy ; begin
7996: LD_INT 0
7998: PPUSH
7999: PPUSH
8000: PPUSH
8001: PPUSH
8002: PPUSH
8003: PPUSH
// uc_side := 4 ;
8004: LD_ADDR_OWVAR 20
8008: PUSH
8009: LD_INT 4
8011: ST_TO_ADDR
// uc_nation := 1 ;
8012: LD_ADDR_OWVAR 21
8016: PUSH
8017: LD_INT 1
8019: ST_TO_ADDR
// tmp := [ ] ;
8020: LD_ADDR_VAR 0 4
8024: PUSH
8025: EMPTY
8026: ST_TO_ADDR
// ResetHc ;
8027: CALL 71752 0 0
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
8031: LD_INT 2
8033: PPUSH
8034: LD_INT 1
8036: PPUSH
8037: LD_INT 1
8039: PPUSH
8040: LD_INT 4
8042: PPUSH
8043: LD_INT 77
8045: PPUSH
8046: CALL 38057 0 5
// un := CreateVehicle ;
8050: LD_ADDR_VAR 0 3
8054: PUSH
8055: CALL_OW 45
8059: ST_TO_ADDR
// tmp := tmp union un ;
8060: LD_ADDR_VAR 0 4
8064: PUSH
8065: LD_VAR 0 4
8069: PUSH
8070: LD_VAR 0 3
8074: UNION
8075: ST_TO_ADDR
// SetDir ( un , 2 ) ;
8076: LD_VAR 0 3
8080: PPUSH
8081: LD_INT 2
8083: PPUSH
8084: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
8088: LD_VAR 0 3
8092: PPUSH
8093: LD_INT 106
8095: PPUSH
8096: LD_INT 3
8098: PPUSH
8099: LD_INT 0
8101: PPUSH
8102: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
8106: LD_INT 0
8108: PPUSH
8109: LD_INT 3
8111: PPUSH
8112: LD_INT 2
8114: PPUSH
8115: CALL_OW 380
// un := CreateHuman ;
8119: LD_ADDR_VAR 0 3
8123: PUSH
8124: CALL_OW 44
8128: ST_TO_ADDR
// tmp := tmp union un ;
8129: LD_ADDR_VAR 0 4
8133: PUSH
8134: LD_VAR 0 4
8138: PUSH
8139: LD_VAR 0 3
8143: UNION
8144: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
8145: LD_VAR 0 3
8149: PPUSH
8150: LD_VAR 0 4
8154: PUSH
8155: LD_VAR 0 4
8159: PUSH
8160: LD_INT 1
8162: MINUS
8163: ARRAY
8164: PPUSH
8165: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
8169: LD_VAR 0 3
8173: PPUSH
8174: LD_INT 109
8176: PPUSH
8177: LD_INT 9
8179: PPUSH
8180: CALL_OW 111
// wait ( 0 0$1 ) ;
8184: LD_INT 35
8186: PPUSH
8187: CALL_OW 67
// for i := 1 to [ 2 , 2 , 1 ] [ Difficulty ] do
8191: LD_ADDR_VAR 0 2
8195: PUSH
8196: DOUBLE
8197: LD_INT 1
8199: DEC
8200: ST_TO_ADDR
8201: LD_INT 2
8203: PUSH
8204: LD_INT 2
8206: PUSH
8207: LD_INT 1
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: LIST
8214: PUSH
8215: LD_OWVAR 67
8219: ARRAY
8220: PUSH
8221: FOR_TO
8222: IFFALSE 8286
// begin PrepareHuman ( false , 1 , 2 ) ;
8224: LD_INT 0
8226: PPUSH
8227: LD_INT 1
8229: PPUSH
8230: LD_INT 2
8232: PPUSH
8233: CALL_OW 380
// un := CreateHuman ;
8237: LD_ADDR_VAR 0 3
8241: PUSH
8242: CALL_OW 44
8246: ST_TO_ADDR
// tmp := tmp union un ;
8247: LD_ADDR_VAR 0 4
8251: PUSH
8252: LD_VAR 0 4
8256: PUSH
8257: LD_VAR 0 3
8261: UNION
8262: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
8263: LD_VAR 0 3
8267: PPUSH
8268: LD_INT 105
8270: PPUSH
8271: LD_INT 2
8273: PPUSH
8274: LD_INT 2
8276: PPUSH
8277: LD_INT 0
8279: PPUSH
8280: CALL_OW 50
// end ;
8284: GO 8221
8286: POP
8287: POP
// PrepareHuman ( false , 4 , 2 ) ;
8288: LD_INT 0
8290: PPUSH
8291: LD_INT 4
8293: PPUSH
8294: LD_INT 2
8296: PPUSH
8297: CALL_OW 380
// un := CreateHuman ;
8301: LD_ADDR_VAR 0 3
8305: PUSH
8306: CALL_OW 44
8310: ST_TO_ADDR
// tmp := tmp union un ;
8311: LD_ADDR_VAR 0 4
8315: PUSH
8316: LD_VAR 0 4
8320: PUSH
8321: LD_VAR 0 3
8325: UNION
8326: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
8327: LD_VAR 0 3
8331: PPUSH
8332: LD_INT 105
8334: PPUSH
8335: LD_INT 2
8337: PPUSH
8338: LD_INT 2
8340: PPUSH
8341: LD_INT 0
8343: PPUSH
8344: CALL_OW 50
// ComAgressiveMove ( tmp , 26 , 35 ) ;
8348: LD_VAR 0 4
8352: PPUSH
8353: LD_INT 26
8355: PPUSH
8356: LD_INT 35
8358: PPUSH
8359: CALL_OW 114
// spotted := false ;
8363: LD_ADDR_VAR 0 5
8367: PUSH
8368: LD_INT 0
8370: ST_TO_ADDR
// xy := [ 0 , 0 ] ;
8371: LD_ADDR_VAR 0 6
8375: PUSH
8376: LD_INT 0
8378: PUSH
8379: LD_INT 0
8381: PUSH
8382: EMPTY
8383: LIST
8384: LIST
8385: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8386: LD_INT 35
8388: PPUSH
8389: CALL_OW 67
// if UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) and not spotted then
8393: LD_VAR 0 4
8397: PPUSH
8398: LD_INT 3
8400: PUSH
8401: LD_INT 24
8403: PUSH
8404: LD_INT 1000
8406: PUSH
8407: EMPTY
8408: LIST
8409: LIST
8410: PUSH
8411: EMPTY
8412: LIST
8413: LIST
8414: PPUSH
8415: CALL_OW 72
8419: IFFALSE 8428
8421: PUSH
8422: LD_VAR 0 5
8426: NOT
8427: AND
8428: IFFALSE 8554
// begin spotted := true ;
8430: LD_ADDR_VAR 0 5
8434: PUSH
8435: LD_INT 1
8437: ST_TO_ADDR
// un := UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ;
8438: LD_ADDR_VAR 0 3
8442: PUSH
8443: LD_VAR 0 4
8447: PPUSH
8448: LD_INT 3
8450: PUSH
8451: LD_INT 24
8453: PUSH
8454: LD_INT 1000
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: PUSH
8461: EMPTY
8462: LIST
8463: LIST
8464: PPUSH
8465: CALL_OW 72
8469: PUSH
8470: LD_INT 1
8472: ARRAY
8473: ST_TO_ADDR
// xy := [ GetX ( un ) , GetY ( un ) ] ;
8474: LD_ADDR_VAR 0 6
8478: PUSH
8479: LD_VAR 0 3
8483: PPUSH
8484: CALL_OW 250
8488: PUSH
8489: LD_VAR 0 3
8493: PPUSH
8494: CALL_OW 251
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: ST_TO_ADDR
// PlaceSeeing ( xy [ 1 ] , xy [ 2 ] , 1 , - 12 ) ;
8503: LD_VAR 0 6
8507: PUSH
8508: LD_INT 1
8510: ARRAY
8511: PPUSH
8512: LD_VAR 0 6
8516: PUSH
8517: LD_INT 2
8519: ARRAY
8520: PPUSH
8521: LD_INT 1
8523: PPUSH
8524: LD_INT 12
8526: NEG
8527: PPUSH
8528: CALL_OW 330
// CenterOnXY ( xy [ 1 ] , xy [ 2 ] ) ;
8532: LD_VAR 0 6
8536: PUSH
8537: LD_INT 1
8539: ARRAY
8540: PPUSH
8541: LD_VAR 0 6
8545: PUSH
8546: LD_INT 2
8548: ARRAY
8549: PPUSH
8550: CALL_OW 84
// end ; for i in tmp do
8554: LD_ADDR_VAR 0 2
8558: PUSH
8559: LD_VAR 0 4
8563: PUSH
8564: FOR_IN
8565: IFFALSE 8596
// if not HasTask ( i ) then
8567: LD_VAR 0 2
8571: PPUSH
8572: CALL_OW 314
8576: NOT
8577: IFFALSE 8594
// ComAgressiveMove ( i , 26 , 35 ) ;
8579: LD_VAR 0 2
8583: PPUSH
8584: LD_INT 26
8586: PPUSH
8587: LD_INT 35
8589: PPUSH
8590: CALL_OW 114
8594: GO 8564
8596: POP
8597: POP
// if not UnitFilter ( tmp , [ f_ok ] ) then
8598: LD_VAR 0 4
8602: PPUSH
8603: LD_INT 50
8605: PUSH
8606: EMPTY
8607: LIST
8608: PPUSH
8609: CALL_OW 72
8613: NOT
8614: IFFALSE 8649
// begin if spotted then
8616: LD_VAR 0 5
8620: IFFALSE 8647
// RemoveSeeing ( xy [ 1 ] , xy [ 2 ] , 1 ) ;
8622: LD_VAR 0 6
8626: PUSH
8627: LD_INT 1
8629: ARRAY
8630: PPUSH
8631: LD_VAR 0 6
8635: PUSH
8636: LD_INT 2
8638: ARRAY
8639: PPUSH
8640: LD_INT 1
8642: PPUSH
8643: CALL_OW 331
// exit ;
8647: GO 8838
// end ; until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) or See ( 4 , Sikorski ) ;
8649: LD_VAR 0 4
8653: PPUSH
8654: LD_INT 91
8656: PUSH
8657: LD_INT 64
8659: PUSH
8660: LD_INT 12
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: LIST
8667: PPUSH
8668: CALL_OW 72
8672: IFTRUE 8688
8674: PUSH
8675: LD_INT 4
8677: PPUSH
8678: LD_EXP 14
8682: PPUSH
8683: CALL_OW 292
8687: OR
8688: IFFALSE 8386
// omicronSquad := omicronSquad union tmp ;
8690: LD_ADDR_EXP 13
8694: PUSH
8695: LD_EXP 13
8699: PUSH
8700: LD_VAR 0 4
8704: UNION
8705: ST_TO_ADDR
// if spotted then
8706: LD_VAR 0 5
8710: IFFALSE 8737
// RemoveSeeing ( xy [ 1 ] , xy [ 2 ] , 1 ) ;
8712: LD_VAR 0 6
8716: PUSH
8717: LD_INT 1
8719: ARRAY
8720: PPUSH
8721: LD_VAR 0 6
8725: PUSH
8726: LD_INT 2
8728: ARRAY
8729: PPUSH
8730: LD_INT 1
8732: PPUSH
8733: CALL_OW 331
// for i in tmp do
8737: LD_ADDR_VAR 0 2
8741: PUSH
8742: LD_VAR 0 4
8746: PUSH
8747: FOR_IN
8748: IFFALSE 8764
// SetSide ( i , 1 ) ;
8750: LD_VAR 0 2
8754: PPUSH
8755: LD_INT 1
8757: PPUSH
8758: CALL_OW 235
8762: GO 8747
8764: POP
8765: POP
// if UnitFilter ( tmp , [ [ f_sex , sex_male ] , [ f_ok ] ] ) then
8766: LD_VAR 0 4
8770: PPUSH
8771: LD_INT 26
8773: PUSH
8774: LD_INT 1
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: PUSH
8781: LD_INT 50
8783: PUSH
8784: EMPTY
8785: LIST
8786: PUSH
8787: EMPTY
8788: LIST
8789: LIST
8790: PPUSH
8791: CALL_OW 72
8795: IFFALSE 8838
// Say ( UnitFilter ( tmp , [ [ f_sex , sex_male ] , [ f_ok ] ] ) [ 1 ] , Dcargo ) ;
8797: LD_VAR 0 4
8801: PPUSH
8802: LD_INT 26
8804: PUSH
8805: LD_INT 1
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: PUSH
8812: LD_INT 50
8814: PUSH
8815: EMPTY
8816: LIST
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: PPUSH
8822: CALL_OW 72
8826: PUSH
8827: LD_INT 1
8829: ARRAY
8830: PPUSH
8831: LD_STRING Dcargo
8833: PPUSH
8834: CALL_OW 88
// end ;
8838: LD_VAR 0 1
8842: RET
// export function SecondReinforcements ; var un , veh , i ; begin
8843: LD_INT 0
8845: PPUSH
8846: PPUSH
8847: PPUSH
8848: PPUSH
// uc_side := 1 ;
8849: LD_ADDR_OWVAR 20
8853: PUSH
8854: LD_INT 1
8856: ST_TO_ADDR
// uc_nation := 1 ;
8857: LD_ADDR_OWVAR 21
8861: PUSH
8862: LD_INT 1
8864: ST_TO_ADDR
// ResetHc ;
8865: CALL 71752 0 0
// PrepareHuman ( false , 3 , 3 ) ;
8869: LD_INT 0
8871: PPUSH
8872: LD_INT 3
8874: PPUSH
8875: LD_INT 3
8877: PPUSH
8878: CALL_OW 380
// un := CreateHuman ;
8882: LD_ADDR_VAR 0 2
8886: PUSH
8887: CALL_OW 44
8891: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_double_gun , 90 ) ;
8892: LD_INT 3
8894: PPUSH
8895: LD_INT 1
8897: PPUSH
8898: LD_INT 1
8900: PPUSH
8901: LD_INT 5
8903: PPUSH
8904: LD_INT 90
8906: PPUSH
8907: CALL 38057 0 5
// veh := CreateVehicle ;
8911: LD_ADDR_VAR 0 3
8915: PUSH
8916: CALL_OW 45
8920: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8921: LD_VAR 0 3
8925: PPUSH
8926: LD_INT 2
8928: PPUSH
8929: CALL_OW 233
// PlaceUnitXYR ( veh , 83 , 154 , 10 , false ) ;
8933: LD_VAR 0 3
8937: PPUSH
8938: LD_INT 83
8940: PPUSH
8941: LD_INT 154
8943: PPUSH
8944: LD_INT 10
8946: PPUSH
8947: LD_INT 0
8949: PPUSH
8950: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
8954: LD_VAR 0 2
8958: PPUSH
8959: LD_VAR 0 3
8963: PPUSH
8964: CALL_OW 52
// for i := 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
8968: LD_ADDR_VAR 0 4
8972: PUSH
8973: DOUBLE
8974: LD_INT 1
8976: DEC
8977: ST_TO_ADDR
8978: LD_INT 4
8980: PUSH
8981: LD_INT 3
8983: PUSH
8984: LD_INT 3
8986: PUSH
8987: EMPTY
8988: LIST
8989: LIST
8990: LIST
8991: PUSH
8992: LD_OWVAR 67
8996: ARRAY
8997: PUSH
8998: FOR_TO
8999: IFFALSE 9047
// begin PrepareHuman ( false , 1 , 3 ) ;
9001: LD_INT 0
9003: PPUSH
9004: LD_INT 1
9006: PPUSH
9007: LD_INT 3
9009: PPUSH
9010: CALL_OW 380
// un := CreateHuman ;
9014: LD_ADDR_VAR 0 2
9018: PUSH
9019: CALL_OW 44
9023: ST_TO_ADDR
// PlaceUnitXYR ( un , 83 , 154 , 10 , false ) ;
9024: LD_VAR 0 2
9028: PPUSH
9029: LD_INT 83
9031: PPUSH
9032: LD_INT 154
9034: PPUSH
9035: LD_INT 10
9037: PPUSH
9038: LD_INT 0
9040: PPUSH
9041: CALL_OW 50
// end ;
9045: GO 8998
9047: POP
9048: POP
// PrepareHuman ( sex_male , 1 , 3 ) ;
9049: LD_INT 1
9051: PPUSH
9052: LD_INT 1
9054: PPUSH
9055: LD_INT 3
9057: PPUSH
9058: CALL_OW 380
// un := CreateHuman ;
9062: LD_ADDR_VAR 0 2
9066: PUSH
9067: CALL_OW 44
9071: ST_TO_ADDR
// PlaceUnitXYR ( un , 83 , 154 , 10 , false ) ;
9072: LD_VAR 0 2
9076: PPUSH
9077: LD_INT 83
9079: PPUSH
9080: LD_INT 154
9082: PPUSH
9083: LD_INT 10
9085: PPUSH
9086: LD_INT 0
9088: PPUSH
9089: CALL_OW 50
// SayRadio ( un , Dhelp ) ;
9093: LD_VAR 0 2
9097: PPUSH
9098: LD_STRING Dhelp
9100: PPUSH
9101: CALL_OW 94
// ResetHc ;
9105: CALL 71752 0 0
// end ;
9109: LD_VAR 0 1
9113: RET
// every 0 0$1 trigger russianAlert do var i , tmp , towers ;
9114: LD_EXP 5
9118: IFFALSE 9260
9120: GO 9122
9122: DISABLE
9123: LD_INT 0
9125: PPUSH
9126: PPUSH
9127: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_inside ] ] ) ;
9128: LD_ADDR_VAR 0 2
9132: PUSH
9133: LD_EXP 20
9137: PPUSH
9138: LD_INT 25
9140: PUSH
9141: LD_INT 1
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: PUSH
9148: LD_INT 54
9150: PUSH
9151: EMPTY
9152: LIST
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: PPUSH
9158: CALL_OW 72
9162: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
9163: LD_ADDR_VAR 0 3
9167: PUSH
9168: LD_INT 22
9170: PUSH
9171: LD_INT 6
9173: PUSH
9174: EMPTY
9175: LIST
9176: LIST
9177: PUSH
9178: LD_INT 30
9180: PUSH
9181: LD_INT 32
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: PUSH
9188: EMPTY
9189: LIST
9190: LIST
9191: PPUSH
9192: CALL_OW 69
9196: ST_TO_ADDR
// for i := 1 to tmp do
9197: LD_ADDR_VAR 0 1
9201: PUSH
9202: DOUBLE
9203: LD_INT 1
9205: DEC
9206: ST_TO_ADDR
9207: LD_VAR 0 2
9211: PUSH
9212: FOR_TO
9213: IFFALSE 9258
// begin ComExitBuilding ( tmp [ i ] ) ;
9215: LD_VAR 0 2
9219: PUSH
9220: LD_VAR 0 1
9224: ARRAY
9225: PPUSH
9226: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , towers [ i ] ) ;
9230: LD_VAR 0 2
9234: PUSH
9235: LD_VAR 0 1
9239: ARRAY
9240: PPUSH
9241: LD_VAR 0 3
9245: PUSH
9246: LD_VAR 0 1
9250: ARRAY
9251: PPUSH
9252: CALL_OW 180
// end ;
9256: GO 9212
9258: POP
9259: POP
// end ;
9260: PPOPN 3
9262: END
// every 0 0$1 trigger russianAlert and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) do var i , noncombat ;
9263: LD_EXP 5
9267: IFFALSE 9299
9269: PUSH
9270: LD_INT 22
9272: PUSH
9273: LD_INT 2
9275: PUSH
9276: EMPTY
9277: LIST
9278: LIST
9279: PUSH
9280: LD_INT 101
9282: PUSH
9283: LD_INT 6
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PPUSH
9294: CALL_OW 69
9298: AND
9299: IFFALSE 9445
9301: GO 9303
9303: DISABLE
9304: LD_INT 0
9306: PPUSH
9307: PPUSH
// begin SayRadio ( Kurin , D9a-Kur-1 ) ;
9308: LD_EXP 16
9312: PPUSH
9313: LD_STRING D9a-Kur-1
9315: PPUSH
9316: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
9320: LD_EXP 19
9324: PPUSH
9325: LD_STRING D9a-Bur-1
9327: PPUSH
9328: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
9332: LD_EXP 16
9336: PPUSH
9337: LD_STRING D9a-Kur-2
9339: PPUSH
9340: CALL_OW 94
// retreatFromOmicron := true ;
9344: LD_ADDR_EXP 8
9348: PUSH
9349: LD_INT 1
9351: ST_TO_ADDR
// noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
9352: LD_ADDR_VAR 0 2
9356: PUSH
9357: LD_EXP 18
9361: PUSH
9362: LD_EXP 20
9366: PUSH
9367: LD_EXP 21
9371: UNION
9372: PPUSH
9373: LD_INT 3
9375: PUSH
9376: LD_INT 25
9378: PUSH
9379: LD_INT 1
9381: PUSH
9382: EMPTY
9383: LIST
9384: LIST
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: PPUSH
9390: CALL_OW 72
9394: UNION
9395: ST_TO_ADDR
// for i in noncombat do
9396: LD_ADDR_VAR 0 1
9400: PUSH
9401: LD_VAR 0 2
9405: PUSH
9406: FOR_IN
9407: IFFALSE 9443
// begin if IsInUnit ( i ) then
9409: LD_VAR 0 1
9413: PPUSH
9414: CALL_OW 310
9418: IFFALSE 9429
// ComExitBuilding ( i ) ;
9420: LD_VAR 0 1
9424: PPUSH
9425: CALL_OW 122
// AddComMoveToArea ( i , westEscapeArea ) ;
9429: LD_VAR 0 1
9433: PPUSH
9434: LD_INT 4
9436: PPUSH
9437: CALL_OW 173
// end ;
9441: GO 9406
9443: POP
9444: POP
// end ;
9445: PPOPN 2
9447: END
// every 0 0$1 trigger tick > rand ( 20 20$00 , 30 30$00 ) do var un ;
9448: LD_OWVAR 1
9452: PUSH
9453: LD_INT 42000
9455: PPUSH
9456: LD_INT 63000
9458: PPUSH
9459: CALL_OW 12
9463: GREATER
9464: IFFALSE 9609
9466: GO 9468
9468: DISABLE
9469: LD_INT 0
9471: PPUSH
// begin uc_side := 4 ;
9472: LD_ADDR_OWVAR 20
9476: PUSH
9477: LD_INT 4
9479: ST_TO_ADDR
// uc_nation := 4 ;
9480: LD_ADDR_OWVAR 21
9484: PUSH
9485: LD_INT 4
9487: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 3 ) ;
9488: LD_INT 1
9490: PPUSH
9491: LD_INT 4
9493: PPUSH
9494: LD_INT 3
9496: PPUSH
9497: CALL_OW 380
// hc_name :=  ;
9501: LD_ADDR_OWVAR 26
9505: PUSH
9506: LD_STRING 
9508: ST_TO_ADDR
// un := CreateHuman ;
9509: LD_ADDR_VAR 0 1
9513: PUSH
9514: CALL_OW 44
9518: ST_TO_ADDR
// PlaceUnitXYR ( un , 161 , 162 , 3 , true ) ;
9519: LD_VAR 0 1
9523: PPUSH
9524: LD_INT 161
9526: PPUSH
9527: LD_INT 162
9529: PPUSH
9530: LD_INT 3
9532: PPUSH
9533: LD_INT 1
9535: PPUSH
9536: CALL_OW 50
// ResetHc ;
9540: CALL 71752 0 0
// wait ( 0 0$3 ) ;
9544: LD_INT 105
9546: PPUSH
9547: CALL_OW 67
// SayRadio ( un , Dun1 ) ;
9551: LD_VAR 0 1
9555: PPUSH
9556: LD_STRING Dun1
9558: PPUSH
9559: CALL_OW 94
// repeat wait ( 0 0$1 ) ;
9563: LD_INT 35
9565: PPUSH
9566: CALL_OW 67
// if IsDead ( un ) then
9570: LD_VAR 0 1
9574: PPUSH
9575: CALL_OW 301
9579: IFFALSE 9583
// exit ;
9581: GO 9609
// until See ( 1 , un ) ;
9583: LD_INT 1
9585: PPUSH
9586: LD_VAR 0 1
9590: PPUSH
9591: CALL_OW 292
9595: IFFALSE 9563
// SetSide ( un , 1 ) ;
9597: LD_VAR 0 1
9601: PPUSH
9602: LD_INT 1
9604: PPUSH
9605: CALL_OW 235
// end ;
9609: PPOPN 1
9611: END
// every 0 0$1 trigger tanksCounter >= 20 do
9612: LD_EXP 12
9616: PUSH
9617: LD_INT 20
9619: GREATEREQUAL
9620: IFFALSE 9632
9622: GO 9624
9624: DISABLE
// SetAchievement ( ACH_PANZERKNACKER ) ;
9625: LD_STRING ACH_PANZERKNACKER
9627: PPUSH
9628: CALL_OW 543
9632: END
// every 0 0$1 trigger tick > rand ( 45 45$00 , 52 52$00 ) do var un ;
9633: LD_OWVAR 1
9637: PUSH
9638: LD_INT 94500
9640: PPUSH
9641: LD_INT 109200
9643: PPUSH
9644: CALL_OW 12
9648: GREATER
9649: IFFALSE 9914
9651: GO 9653
9653: DISABLE
9654: LD_INT 0
9656: PPUSH
// begin PrepareArabian ;
9657: CALL 6614 0 0
// uc_side := 4 ;
9661: LD_ADDR_OWVAR 20
9665: PUSH
9666: LD_INT 4
9668: ST_TO_ADDR
// uc_nation := 1 ;
9669: LD_ADDR_OWVAR 21
9673: PUSH
9674: LD_INT 1
9676: ST_TO_ADDR
// ResetHc ;
9677: CALL 71752 0 0
// un := CreateHuman ;
9681: LD_ADDR_VAR 0 1
9685: PUSH
9686: CALL_OW 44
9690: ST_TO_ADDR
// SayRadio ( un , ar_come ) ;
9691: LD_VAR 0 1
9695: PPUSH
9696: LD_STRING ar_come
9698: PPUSH
9699: CALL_OW 94
// wait ( 0 0$20 ) ;
9703: LD_INT 700
9705: PPUSH
9706: CALL_OW 67
// SayRadio ( Harrison , DR-Back ) ;
9710: LD_EXP 15
9714: PPUSH
9715: LD_STRING DR-Back
9717: PPUSH
9718: CALL_OW 94
// ChangeMissionObjectives ( target3 ) ;
9722: LD_STRING target3
9724: PPUSH
9725: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
9729: LD_INT 10
9731: PPUSH
9732: LD_INT 1
9734: PPUSH
9735: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
9739: LD_INT 35
9741: PPUSH
9742: CALL_OW 67
// until IsInArea ( Sikorski , escapeArea ) or FilterUnitsInArea ( escapeArea , [ f_side , 1 ] ) ;
9746: LD_EXP 14
9750: PPUSH
9751: LD_INT 10
9753: PPUSH
9754: CALL_OW 308
9758: IFTRUE 9779
9760: PUSH
9761: LD_INT 10
9763: PPUSH
9764: LD_INT 22
9766: PUSH
9767: LD_INT 1
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: PPUSH
9774: CALL_OW 70
9778: OR
9779: IFFALSE 9739
// SayRadio ( Harrison , you_win ) ;
9781: LD_EXP 15
9785: PPUSH
9786: LD_STRING you_win
9788: PPUSH
9789: CALL_OW 94
// AddMedal ( med , 1 ) ;
9793: LD_STRING med
9795: PPUSH
9796: LD_INT 1
9798: PPUSH
9799: CALL_OW 101
// if ruLoseCounter > [ 27 , 32 , 36 ] [ Difficulty ] then
9803: LD_EXP 11
9807: PUSH
9808: LD_INT 27
9810: PUSH
9811: LD_INT 32
9813: PUSH
9814: LD_INT 36
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: LIST
9821: PUSH
9822: LD_OWVAR 67
9826: ARRAY
9827: GREATER
9828: IFFALSE 9842
// AddMedal ( ru , 1 ) else
9830: LD_STRING ru
9832: PPUSH
9833: LD_INT 1
9835: PPUSH
9836: CALL_OW 101
9840: GO 9853
// AddMedal ( ru , - 1 ) ;
9842: LD_STRING ru
9844: PPUSH
9845: LD_INT 1
9847: NEG
9848: PPUSH
9849: CALL_OW 101
// if usLoseCounter < [ 4 , 3 , 2 ] [ Difficulty ] then
9853: LD_EXP 10
9857: PUSH
9858: LD_INT 4
9860: PUSH
9861: LD_INT 3
9863: PUSH
9864: LD_INT 2
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: LIST
9871: PUSH
9872: LD_OWVAR 67
9876: ARRAY
9877: LESS
9878: IFFALSE 9892
// AddMedal ( pep , 1 ) else
9880: LD_STRING pep
9882: PPUSH
9883: LD_INT 1
9885: PPUSH
9886: CALL_OW 101
9890: GO 9903
// AddMedal ( pep , - 1 ) ;
9892: LD_STRING pep
9894: PPUSH
9895: LD_INT 1
9897: NEG
9898: PPUSH
9899: CALL_OW 101
// GiveMedals ( MAIN ) ;
9903: LD_STRING MAIN
9905: PPUSH
9906: CALL_OW 102
// YouWin ;
9910: CALL_OW 103
// end ; end_of_file
9914: PPOPN 1
9916: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
9917: LD_VAR 0 1
9921: PPUSH
9922: CALL 10789 0 1
// if un = Sikorski then
9926: LD_VAR 0 1
9930: PUSH
9931: LD_EXP 14
9935: EQUAL
9936: IFFALSE 9945
// YouLost ( sik ) ;
9938: LD_STRING sik
9940: PPUSH
9941: CALL_OW 104
// if un in russianOmicronAttackers then
9945: LD_VAR 0 1
9949: PUSH
9950: LD_EXP 24
9954: IN
9955: IFFALSE 9973
// russianOmicronAttackers := russianOmicronAttackers diff un ;
9957: LD_ADDR_EXP 24
9961: PUSH
9962: LD_EXP 24
9966: PUSH
9967: LD_VAR 0 1
9971: DIFF
9972: ST_TO_ADDR
// if un in russianCargo then
9973: LD_VAR 0 1
9977: PUSH
9978: LD_EXP 25
9982: IN
9983: IFFALSE 10001
// russianCargo := russianCargo diff un ;
9985: LD_ADDR_EXP 25
9989: PUSH
9990: LD_EXP 25
9994: PUSH
9995: LD_VAR 0 1
9999: DIFF
10000: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) then
10001: LD_VAR 0 1
10005: PUSH
10006: LD_INT 22
10008: PUSH
10009: LD_INT 3
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: PUSH
10016: LD_INT 34
10018: PUSH
10019: LD_INT 51
10021: PUSH
10022: EMPTY
10023: LIST
10024: LIST
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: PPUSH
10030: CALL_OW 69
10034: IN
10035: IFFALSE 10044
// ProduceNew ( 1 ) ;
10037: LD_INT 1
10039: PPUSH
10040: CALL 4717 0 1
// if GetSide ( un ) in [ 1 , 4 ] and GetType ( un ) = unit_human and GetNation ( un ) = nation_american then
10044: LD_VAR 0 1
10048: PPUSH
10049: CALL_OW 255
10053: PUSH
10054: LD_INT 1
10056: PUSH
10057: LD_INT 4
10059: PUSH
10060: EMPTY
10061: LIST
10062: LIST
10063: IN
10064: IFFALSE 10081
10066: PUSH
10067: LD_VAR 0 1
10071: PPUSH
10072: CALL_OW 247
10076: PUSH
10077: LD_INT 1
10079: EQUAL
10080: AND
10081: IFFALSE 10098
10083: PUSH
10084: LD_VAR 0 1
10088: PPUSH
10089: CALL_OW 248
10093: PUSH
10094: LD_INT 1
10096: EQUAL
10097: AND
10098: IFFALSE 10114
// usLoseCounter := usLoseCounter + 1 ;
10100: LD_ADDR_EXP 10
10104: PUSH
10105: LD_EXP 10
10109: PUSH
10110: LD_INT 1
10112: PLUS
10113: ST_TO_ADDR
// end ;
10114: PPOPN 1
10116: END
// on VehicleConstructed ( veh , factory ) do begin SOS_VehicleConstructed ( veh , factory ) ;
10117: LD_VAR 0 1
10121: PPUSH
10122: LD_VAR 0 2
10126: PPUSH
10127: CALL 10847 0 2
// if GetSide ( factory ) <> 3 then
10131: LD_VAR 0 2
10135: PPUSH
10136: CALL_OW 255
10140: PUSH
10141: LD_INT 3
10143: NONEQUAL
10144: IFFALSE 10148
// exit ;
10146: GO 10210
// if GetWeapon ( veh ) = ru_cargo_bay then
10148: LD_VAR 0 1
10152: PPUSH
10153: CALL_OW 264
10157: PUSH
10158: LD_INT 51
10160: EQUAL
10161: IFFALSE 10165
// exit ;
10163: GO 10210
// russianOmicronAttackers := russianOmicronAttackers union [ veh , IsInUnit ( veh ) ] ;
10165: LD_ADDR_EXP 24
10169: PUSH
10170: LD_EXP 24
10174: PUSH
10175: LD_VAR 0 1
10179: PUSH
10180: LD_VAR 0 1
10184: PPUSH
10185: CALL_OW 310
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: UNION
10194: ST_TO_ADDR
// AddComAgressiveMove ( veh , 71 , 37 ) ;
10195: LD_VAR 0 1
10199: PPUSH
10200: LD_INT 71
10202: PPUSH
10203: LD_INT 37
10205: PPUSH
10206: CALL_OW 174
// end ;
10210: PPOPN 2
10212: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId in russianOmicronAttackers then
10213: LD_VAR 0 2
10217: PUSH
10218: LD_EXP 24
10222: IN
10223: IFFALSE 10241
// russianOmicronAttackers := russianOmicronAttackers diff oldId ;
10225: LD_ADDR_EXP 24
10229: PUSH
10230: LD_EXP 24
10234: PUSH
10235: LD_VAR 0 2
10239: DIFF
10240: ST_TO_ADDR
// if oldId in russianCargo then
10241: LD_VAR 0 2
10245: PUSH
10246: LD_EXP 25
10250: IN
10251: IFFALSE 10269
// russianCargo := russianCargo diff oldId ;
10253: LD_ADDR_EXP 25
10257: PUSH
10258: LD_EXP 25
10262: PUSH
10263: LD_VAR 0 2
10267: DIFF
10268: ST_TO_ADDR
// if newId in russianOmicronAttackers then
10269: LD_VAR 0 1
10273: PUSH
10274: LD_EXP 24
10278: IN
10279: IFFALSE 10297
// russianOmicronAttackers := russianOmicronAttackers diff newId ;
10281: LD_ADDR_EXP 24
10285: PUSH
10286: LD_EXP 24
10290: PUSH
10291: LD_VAR 0 1
10295: DIFF
10296: ST_TO_ADDR
// if newId in russianCargo then
10297: LD_VAR 0 1
10301: PUSH
10302: LD_EXP 25
10306: IN
10307: IFFALSE 10325
// russianCargo := russianCargo diff newId ;
10309: LD_ADDR_EXP 25
10313: PUSH
10314: LD_EXP 25
10318: PUSH
10319: LD_VAR 0 1
10323: DIFF
10324: ST_TO_ADDR
// end ;
10325: PPOPN 4
10327: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
10328: LD_VAR 0 1
10332: PPUSH
10333: LD_VAR 0 2
10337: PPUSH
10338: LD_VAR 0 3
10342: PPUSH
10343: CALL 10823 0 3
// if killerSide in [ 1 , 4 ] and GetSide ( un ) in [ 3 , 6 ] then
10347: LD_VAR 0 2
10351: PUSH
10352: LD_INT 1
10354: PUSH
10355: LD_INT 4
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: IN
10362: IFFALSE 10386
10364: PUSH
10365: LD_VAR 0 1
10369: PPUSH
10370: CALL_OW 255
10374: PUSH
10375: LD_INT 3
10377: PUSH
10378: LD_INT 6
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: IN
10385: AND
10386: IFFALSE 10402
// ruLoseCounter := ruLoseCounter + 1 ;
10388: LD_ADDR_EXP 11
10392: PUSH
10393: LD_EXP 11
10397: PUSH
10398: LD_INT 1
10400: PLUS
10401: ST_TO_ADDR
// if killerSide in [ 1 , 4 ] and GetType ( un ) = unit_vehicle and GetSide ( un ) in [ 3 , 6 ] then
10402: LD_VAR 0 2
10406: PUSH
10407: LD_INT 1
10409: PUSH
10410: LD_INT 4
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: IN
10417: IFFALSE 10434
10419: PUSH
10420: LD_VAR 0 1
10424: PPUSH
10425: CALL_OW 247
10429: PUSH
10430: LD_INT 2
10432: EQUAL
10433: AND
10434: IFFALSE 10458
10436: PUSH
10437: LD_VAR 0 1
10441: PPUSH
10442: CALL_OW 255
10446: PUSH
10447: LD_INT 3
10449: PUSH
10450: LD_INT 6
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: IN
10457: AND
10458: IFFALSE 10474
// tanksCounter := tanksCounter + 1 ;
10460: LD_ADDR_EXP 12
10464: PUSH
10465: LD_EXP 12
10469: PUSH
10470: LD_INT 1
10472: PLUS
10473: ST_TO_ADDR
// end ;
10474: PPOPN 3
10476: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) in [ 3 , 6 ] then
10477: LD_VAR 0 1
10481: PPUSH
10482: CALL_OW 255
10486: PUSH
10487: LD_INT 3
10489: PUSH
10490: LD_INT 6
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: IN
10497: IFFALSE 10650
// begin ComRepairVehicle ( driver , veh ) ;
10499: LD_VAR 0 1
10503: PPUSH
10504: LD_VAR 0 2
10508: PPUSH
10509: CALL_OW 129
// repeat wait ( 0 0$1 ) ;
10513: LD_INT 35
10515: PPUSH
10516: CALL_OW 67
// until IsDead ( veh ) or IsDead ( driver ) or GetLives ( veh ) > 250 ;
10520: LD_VAR 0 2
10524: PPUSH
10525: CALL_OW 301
10529: IFTRUE 10542
10531: PUSH
10532: LD_VAR 0 1
10536: PPUSH
10537: CALL_OW 301
10541: OR
10542: IFTRUE 10559
10544: PUSH
10545: LD_VAR 0 2
10549: PPUSH
10550: CALL_OW 256
10554: PUSH
10555: LD_INT 250
10557: GREATER
10558: OR
10559: IFFALSE 10513
// if GetLives ( veh ) > 250 then
10561: LD_VAR 0 2
10565: PPUSH
10566: CALL_OW 256
10570: PUSH
10571: LD_INT 250
10573: GREATER
10574: IFFALSE 10650
// begin ComEnterUnit ( driver , veh ) ;
10576: LD_VAR 0 1
10580: PPUSH
10581: LD_VAR 0 2
10585: PPUSH
10586: CALL_OW 120
// AddComMoveXY ( driver , 71 , 29 ) ;
10590: LD_VAR 0 1
10594: PPUSH
10595: LD_INT 71
10597: PPUSH
10598: LD_INT 29
10600: PPUSH
10601: CALL_OW 171
// SetTag ( veh , 1 ) ;
10605: LD_VAR 0 2
10609: PPUSH
10610: LD_INT 1
10612: PPUSH
10613: CALL_OW 109
// if not veh in russianOmicronAttackers then
10617: LD_VAR 0 2
10621: PUSH
10622: LD_EXP 24
10626: IN
10627: NOT
10628: IFFALSE 10650
// russianOmicronAttackers := Join ( russianOmicronAttackers , veh ) ;
10630: LD_ADDR_EXP 24
10634: PUSH
10635: LD_EXP 24
10639: PPUSH
10640: LD_VAR 0 2
10644: PPUSH
10645: CALL 71227 0 2
10649: ST_TO_ADDR
// end ; end ; end ;
10650: PPOPN 4
10652: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10653: LD_VAR 0 1
10657: PPUSH
10658: CALL 10831 0 1
// end ; end_of_file
10662: PPOPN 1
10664: END
// every 1 1$35 trigger sikorskiInOmicron and GetResourceArea ( cratesSpawnArea , mat_cans ) < [ 18 , 15 , 12 ] [ Difficulty ] do
10665: LD_EXP 9
10669: IFFALSE 10704
10671: PUSH
10672: LD_INT 6
10674: PPUSH
10675: LD_INT 1
10677: PPUSH
10678: CALL_OW 287
10682: PUSH
10683: LD_INT 18
10685: PUSH
10686: LD_INT 15
10688: PUSH
10689: LD_INT 12
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: LIST
10696: PUSH
10697: LD_OWVAR 67
10701: ARRAY
10702: LESS
10703: AND
10704: IFFALSE 10746
10706: GO 10708
10708: DISABLE
// begin enable ;
10709: ENABLE
// wait ( rand ( 0 0$10 , 0 0$30 ) ) ;
10710: LD_INT 350
10712: PPUSH
10713: LD_INT 1050
10715: PPUSH
10716: CALL_OW 12
10720: PPUSH
10721: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , cratesSpawnArea , true ) ;
10725: LD_INT 2
10727: PPUSH
10728: LD_INT 5
10730: PPUSH
10731: CALL_OW 12
10735: PPUSH
10736: LD_INT 6
10738: PPUSH
10739: LD_INT 1
10741: PPUSH
10742: CALL_OW 55
// end ;
10746: END
// every 1 1$25 trigger GetResourceArea ( ruCratesSpawnArea , mat_cans ) < 5 do
10747: LD_INT 7
10749: PPUSH
10750: LD_INT 1
10752: PPUSH
10753: CALL_OW 287
10757: PUSH
10758: LD_INT 5
10760: LESS
10761: IFFALSE 10788
10763: GO 10765
10765: DISABLE
// begin enable ;
10766: ENABLE
// CreateCratesArea ( rand ( 2 , 5 ) , ruCratesSpawnArea , true ) ;
10767: LD_INT 2
10769: PPUSH
10770: LD_INT 5
10772: PPUSH
10773: CALL_OW 12
10777: PPUSH
10778: LD_INT 7
10780: PPUSH
10781: LD_INT 1
10783: PPUSH
10784: CALL_OW 55
// end ; end_of_file end_of_file
10788: END
// export function SOS_UnitDestroyed ( un ) ; begin
10789: LD_INT 0
10791: PPUSH
// ComRadiation ( un ) ;
10792: LD_VAR 0 1
10796: PPUSH
10797: CALL 11878 0 1
// end ;
10801: LD_VAR 0 2
10805: RET
// export function SOS_UnitKamikazed ( un ) ; begin
10806: LD_INT 0
10808: PPUSH
// ComRadiation ( un ) ;
10809: LD_VAR 0 1
10813: PPUSH
10814: CALL 11878 0 1
// end ;
10818: LD_VAR 0 2
10822: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
10823: LD_INT 0
10825: PPUSH
// end ;
10826: LD_VAR 0 4
10830: RET
// export function SOS_Command ( cmd ) ; begin
10831: LD_INT 0
10833: PPUSH
// end ;
10834: LD_VAR 0 2
10838: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
10839: LD_INT 0
10841: PPUSH
// end ;
10842: LD_VAR 0 6
10846: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
10847: LD_INT 0
10849: PPUSH
10850: PPUSH
10851: PPUSH
10852: PPUSH
// if not vehicle or not factory then
10853: LD_VAR 0 1
10857: NOT
10858: IFTRUE 10867
10860: PUSH
10861: LD_VAR 0 2
10865: NOT
10866: OR
10867: IFFALSE 10871
// exit ;
10869: GO 11453
// if not factoryWaypoints then
10871: LD_EXP 95
10875: NOT
10876: IFFALSE 10880
// exit ;
10878: GO 11453
// for i := 1 to Count ( factoryWaypoints ) do
10880: LD_ADDR_VAR 0 4
10884: PUSH
10885: DOUBLE
10886: LD_INT 1
10888: DEC
10889: ST_TO_ADDR
10890: LD_EXP 95
10894: PPUSH
10895: CALL 35295 0 1
10899: PUSH
10900: FOR_TO
10901: IFFALSE 11451
// if factoryWaypoints [ i ] [ 2 ] = factory then
10903: LD_EXP 95
10907: PUSH
10908: LD_VAR 0 4
10912: ARRAY
10913: PUSH
10914: LD_INT 2
10916: ARRAY
10917: PUSH
10918: LD_VAR 0 2
10922: EQUAL
10923: IFFALSE 11449
// begin if GetControl ( vehicle ) = control_manual then
10925: LD_VAR 0 1
10929: PPUSH
10930: CALL_OW 263
10934: PUSH
10935: LD_INT 1
10937: EQUAL
10938: IFFALSE 11302
// begin driver := IsDrivenBy ( vehicle ) ;
10940: LD_ADDR_VAR 0 5
10944: PUSH
10945: LD_VAR 0 1
10949: PPUSH
10950: CALL_OW 311
10954: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
10955: LD_VAR 0 5
10959: PUSH
10960: LD_EXP 96
10964: IN
10965: IFTRUE 10979
10967: PUSH
10968: LD_VAR 0 1
10972: PUSH
10973: LD_EXP 96
10977: IN
10978: OR
10979: IFFALSE 10985
// exit ;
10981: POP
10982: POP
10983: GO 11453
// if not HasTask ( driver ) then
10985: LD_VAR 0 5
10989: PPUSH
10990: CALL_OW 314
10994: NOT
10995: IFFALSE 11300
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
10997: LD_ADDR_EXP 96
11001: PUSH
11002: LD_EXP 96
11006: PPUSH
11007: LD_VAR 0 5
11011: PPUSH
11012: CALL 71227 0 2
11016: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
11017: LD_ADDR_EXP 96
11021: PUSH
11022: LD_EXP 96
11026: PPUSH
11027: LD_VAR 0 1
11031: PPUSH
11032: CALL 71227 0 2
11036: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
11037: LD_ADDR_VAR 0 6
11041: PUSH
11042: LD_EXP 95
11046: PUSH
11047: LD_VAR 0 4
11051: ARRAY
11052: PUSH
11053: LD_INT 3
11055: ARRAY
11056: PPUSH
11057: LD_EXP 95
11061: PUSH
11062: LD_VAR 0 4
11066: ARRAY
11067: PUSH
11068: LD_INT 4
11070: ARRAY
11071: PPUSH
11072: CALL_OW 428
11076: ST_TO_ADDR
// if hex then
11077: LD_VAR 0 6
11081: IFFALSE 11099
// ComMoveUnit ( driver , hex ) else
11083: LD_VAR 0 5
11087: PPUSH
11088: LD_VAR 0 6
11092: PPUSH
11093: CALL_OW 112
11097: GO 11183
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
11099: LD_VAR 0 1
11103: PPUSH
11104: LD_EXP 95
11108: PUSH
11109: LD_VAR 0 4
11113: ARRAY
11114: PUSH
11115: LD_INT 3
11117: ARRAY
11118: PPUSH
11119: LD_EXP 95
11123: PUSH
11124: LD_VAR 0 4
11128: ARRAY
11129: PUSH
11130: LD_INT 4
11132: ARRAY
11133: PPUSH
11134: CALL_OW 297
11138: PUSH
11139: LD_INT 0
11141: GREATER
11142: IFFALSE 11183
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
11144: LD_VAR 0 5
11148: PPUSH
11149: LD_EXP 95
11153: PUSH
11154: LD_VAR 0 4
11158: ARRAY
11159: PUSH
11160: LD_INT 3
11162: ARRAY
11163: PPUSH
11164: LD_EXP 95
11168: PUSH
11169: LD_VAR 0 4
11173: ARRAY
11174: PUSH
11175: LD_INT 4
11177: ARRAY
11178: PPUSH
11179: CALL_OW 111
// AddComExitVehicle ( driver ) ;
11183: LD_VAR 0 5
11187: PPUSH
11188: CALL_OW 181
// if Multiplayer then
11192: LD_OWVAR 4
11196: IFFALSE 11245
// begin repeat wait ( 10 ) ;
11198: LD_INT 10
11200: PPUSH
11201: CALL_OW 67
// until not IsInUnit ( driver ) ;
11205: LD_VAR 0 5
11209: PPUSH
11210: CALL_OW 310
11214: NOT
11215: IFFALSE 11198
// if not HasTask ( driver ) then
11217: LD_VAR 0 5
11221: PPUSH
11222: CALL_OW 314
11226: NOT
11227: IFFALSE 11243
// ComEnterUnit ( driver , factory ) ;
11229: LD_VAR 0 5
11233: PPUSH
11234: LD_VAR 0 2
11238: PPUSH
11239: CALL_OW 120
// end else
11243: GO 11259
// AddComEnterUnit ( driver , factory ) ;
11245: LD_VAR 0 5
11249: PPUSH
11250: LD_VAR 0 2
11254: PPUSH
11255: CALL_OW 180
// wait ( 0 0$1 ) ;
11259: LD_INT 35
11261: PPUSH
11262: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
11266: LD_ADDR_EXP 96
11270: PUSH
11271: LD_EXP 96
11275: PUSH
11276: LD_VAR 0 5
11280: DIFF
11281: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
11282: LD_ADDR_EXP 96
11286: PUSH
11287: LD_EXP 96
11291: PUSH
11292: LD_VAR 0 1
11296: DIFF
11297: ST_TO_ADDR
// break ;
11298: GO 11451
// end ; end else
11300: GO 11449
// if GetControl ( vehicle ) = control_remote then
11302: LD_VAR 0 1
11306: PPUSH
11307: CALL_OW 263
11311: PUSH
11312: LD_INT 2
11314: EQUAL
11315: IFFALSE 11401
// begin wait ( 0 0$2 ) ;
11317: LD_INT 70
11319: PPUSH
11320: CALL_OW 67
// repeat wait ( 10 ) ;
11324: LD_INT 10
11326: PPUSH
11327: CALL_OW 67
// Connect ( vehicle ) ;
11331: LD_VAR 0 1
11335: PPUSH
11336: CALL 41539 0 1
// until IsControledBy ( vehicle ) ;
11340: LD_VAR 0 1
11344: PPUSH
11345: CALL_OW 312
11349: IFFALSE 11324
// wait ( 10 ) ;
11351: LD_INT 10
11353: PPUSH
11354: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
11358: LD_VAR 0 1
11362: PPUSH
11363: LD_EXP 95
11367: PUSH
11368: LD_VAR 0 4
11372: ARRAY
11373: PUSH
11374: LD_INT 3
11376: ARRAY
11377: PPUSH
11378: LD_EXP 95
11382: PUSH
11383: LD_VAR 0 4
11387: ARRAY
11388: PUSH
11389: LD_INT 4
11391: ARRAY
11392: PPUSH
11393: CALL_OW 111
// break ;
11397: GO 11451
// end else
11399: GO 11449
// begin wait ( 0 0$3 ) ;
11401: LD_INT 105
11403: PPUSH
11404: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
11408: LD_VAR 0 1
11412: PPUSH
11413: LD_EXP 95
11417: PUSH
11418: LD_VAR 0 4
11422: ARRAY
11423: PUSH
11424: LD_INT 3
11426: ARRAY
11427: PPUSH
11428: LD_EXP 95
11432: PUSH
11433: LD_VAR 0 4
11437: ARRAY
11438: PUSH
11439: LD_INT 4
11441: ARRAY
11442: PPUSH
11443: CALL_OW 111
// break ;
11447: GO 11451
// end ; end ;
11449: GO 10900
11451: POP
11452: POP
// end ;
11453: LD_VAR 0 3
11457: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
11458: LD_INT 0
11460: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
11461: LD_VAR 0 1
11465: PUSH
11466: LD_INT 250
11468: EQUAL
11469: IFFALSE 11486
11471: PUSH
11472: LD_VAR 0 2
11476: PPUSH
11477: CALL_OW 264
11481: PUSH
11482: LD_INT 81
11484: EQUAL
11485: AND
11486: IFFALSE 11507
// MinerPlaceMine ( unit , x , y ) ;
11488: LD_VAR 0 2
11492: PPUSH
11493: LD_VAR 0 4
11497: PPUSH
11498: LD_VAR 0 5
11502: PPUSH
11503: CALL 14639 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
11507: LD_VAR 0 1
11511: PUSH
11512: LD_INT 251
11514: EQUAL
11515: IFFALSE 11532
11517: PUSH
11518: LD_VAR 0 2
11522: PPUSH
11523: CALL_OW 264
11527: PUSH
11528: LD_INT 81
11530: EQUAL
11531: AND
11532: IFFALSE 11553
// MinerDetonateMine ( unit , x , y ) ;
11534: LD_VAR 0 2
11538: PPUSH
11539: LD_VAR 0 4
11543: PPUSH
11544: LD_VAR 0 5
11548: PPUSH
11549: CALL 14918 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
11553: LD_VAR 0 1
11557: PUSH
11558: LD_INT 252
11560: EQUAL
11561: IFFALSE 11578
11563: PUSH
11564: LD_VAR 0 2
11568: PPUSH
11569: CALL_OW 264
11573: PUSH
11574: LD_INT 81
11576: EQUAL
11577: AND
11578: IFFALSE 11599
// MinerCreateMinefield ( unit , x , y ) ;
11580: LD_VAR 0 2
11584: PPUSH
11585: LD_VAR 0 4
11589: PPUSH
11590: LD_VAR 0 5
11594: PPUSH
11595: CALL 15337 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
11599: LD_VAR 0 1
11603: PUSH
11604: LD_INT 253
11606: EQUAL
11607: IFFALSE 11624
11609: PUSH
11610: LD_VAR 0 2
11614: PPUSH
11615: CALL_OW 257
11619: PUSH
11620: LD_INT 5
11622: EQUAL
11623: AND
11624: IFFALSE 11645
// ComBinocular ( unit , x , y ) ;
11626: LD_VAR 0 2
11630: PPUSH
11631: LD_VAR 0 4
11635: PPUSH
11636: LD_VAR 0 5
11640: PPUSH
11641: CALL 15712 0 3
// if selectedUnit then
11645: LD_VAR 0 3
11649: IFFALSE 11709
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
11651: LD_VAR 0 1
11655: PUSH
11656: LD_INT 254
11658: EQUAL
11659: IFFALSE 11676
11661: PUSH
11662: LD_VAR 0 2
11666: PPUSH
11667: CALL_OW 264
11671: PUSH
11672: LD_INT 99
11674: EQUAL
11675: AND
11676: IFFALSE 11693
11678: PUSH
11679: LD_VAR 0 3
11683: PPUSH
11684: CALL_OW 263
11688: PUSH
11689: LD_INT 3
11691: EQUAL
11692: AND
11693: IFFALSE 11709
// HackDestroyVehicle ( unit , selectedUnit ) ;
11695: LD_VAR 0 2
11699: PPUSH
11700: LD_VAR 0 3
11704: PPUSH
11705: CALL 13999 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
11709: LD_VAR 0 1
11713: PUSH
11714: LD_INT 255
11716: EQUAL
11717: IFFALSE 11741
11719: PUSH
11720: LD_VAR 0 2
11724: PPUSH
11725: CALL_OW 264
11729: PUSH
11730: LD_INT 14
11732: PUSH
11733: LD_INT 53
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: IN
11740: AND
11741: IFFALSE 11759
11743: PUSH
11744: LD_VAR 0 4
11748: PPUSH
11749: LD_VAR 0 5
11753: PPUSH
11754: CALL_OW 488
11758: AND
11759: IFFALSE 11783
// CutTreeXYR ( unit , x , y , 12 ) ;
11761: LD_VAR 0 2
11765: PPUSH
11766: LD_VAR 0 4
11770: PPUSH
11771: LD_VAR 0 5
11775: PPUSH
11776: LD_INT 12
11778: PPUSH
11779: CALL 11974 0 4
// if cmd = 256 then
11783: LD_VAR 0 1
11787: PUSH
11788: LD_INT 256
11790: EQUAL
11791: IFFALSE 11812
// SetFactoryWaypoint ( unit , x , y ) ;
11793: LD_VAR 0 2
11797: PPUSH
11798: LD_VAR 0 4
11802: PPUSH
11803: LD_VAR 0 5
11807: PPUSH
11808: CALL 31616 0 3
// if cmd = 257 then
11812: LD_VAR 0 1
11816: PUSH
11817: LD_INT 257
11819: EQUAL
11820: IFFALSE 11841
// SetWarehouseGatheringPoint ( unit , x , y ) ;
11822: LD_VAR 0 2
11826: PPUSH
11827: LD_VAR 0 4
11831: PPUSH
11832: LD_VAR 0 5
11836: PPUSH
11837: CALL 32112 0 3
// if cmd = 258 then
11841: LD_VAR 0 1
11845: PUSH
11846: LD_INT 258
11848: EQUAL
11849: IFFALSE 11873
// BurnTreeXYR ( unit , x , y , 8 ) ;
11851: LD_VAR 0 2
11855: PPUSH
11856: LD_VAR 0 4
11860: PPUSH
11861: LD_VAR 0 5
11865: PPUSH
11866: LD_INT 8
11868: PPUSH
11869: CALL 12374 0 4
// end ;
11873: LD_VAR 0 6
11877: RET
// export function ComRadiation ( un ) ; var eff ; begin
11878: LD_INT 0
11880: PPUSH
11881: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
11882: LD_VAR 0 1
11886: PPUSH
11887: CALL_OW 264
11891: PUSH
11892: LD_INT 91
11894: NONEQUAL
11895: IFFALSE 11899
// exit ;
11897: GO 11969
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
11899: LD_INT 68
11901: PPUSH
11902: LD_VAR 0 1
11906: PPUSH
11907: CALL_OW 255
11911: PPUSH
11912: CALL_OW 321
11916: PUSH
11917: LD_INT 2
11919: EQUAL
11920: IFFALSE 11932
// eff := 50 else
11922: LD_ADDR_VAR 0 3
11926: PUSH
11927: LD_INT 50
11929: ST_TO_ADDR
11930: GO 11940
// eff := 25 ;
11932: LD_ADDR_VAR 0 3
11936: PUSH
11937: LD_INT 25
11939: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
11940: LD_VAR 0 1
11944: PPUSH
11945: CALL_OW 250
11949: PPUSH
11950: LD_VAR 0 1
11954: PPUSH
11955: CALL_OW 251
11959: PPUSH
11960: LD_VAR 0 3
11964: PPUSH
11965: CALL_OW 495
// end ;
11969: LD_VAR 0 2
11973: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
11974: LD_INT 0
11976: PPUSH
11977: PPUSH
11978: PPUSH
11979: PPUSH
11980: PPUSH
11981: PPUSH
11982: PPUSH
11983: PPUSH
11984: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
11985: LD_VAR 0 1
11989: PPUSH
11990: CALL_OW 302
11994: NOT
11995: IFTRUE 12014
11997: PUSH
11998: LD_VAR 0 2
12002: PPUSH
12003: LD_VAR 0 3
12007: PPUSH
12008: CALL_OW 488
12012: NOT
12013: OR
12014: IFTRUE 12023
12016: PUSH
12017: LD_VAR 0 4
12021: NOT
12022: OR
12023: IFFALSE 12027
// exit ;
12025: GO 12369
// list := [ ] ;
12027: LD_ADDR_VAR 0 13
12031: PUSH
12032: EMPTY
12033: ST_TO_ADDR
// if x - r < 0 then
12034: LD_VAR 0 2
12038: PUSH
12039: LD_VAR 0 4
12043: MINUS
12044: PUSH
12045: LD_INT 0
12047: LESS
12048: IFFALSE 12060
// min_x := 0 else
12050: LD_ADDR_VAR 0 7
12054: PUSH
12055: LD_INT 0
12057: ST_TO_ADDR
12058: GO 12076
// min_x := x - r ;
12060: LD_ADDR_VAR 0 7
12064: PUSH
12065: LD_VAR 0 2
12069: PUSH
12070: LD_VAR 0 4
12074: MINUS
12075: ST_TO_ADDR
// if y - r < 0 then
12076: LD_VAR 0 3
12080: PUSH
12081: LD_VAR 0 4
12085: MINUS
12086: PUSH
12087: LD_INT 0
12089: LESS
12090: IFFALSE 12102
// min_y := 0 else
12092: LD_ADDR_VAR 0 8
12096: PUSH
12097: LD_INT 0
12099: ST_TO_ADDR
12100: GO 12118
// min_y := y - r ;
12102: LD_ADDR_VAR 0 8
12106: PUSH
12107: LD_VAR 0 3
12111: PUSH
12112: LD_VAR 0 4
12116: MINUS
12117: ST_TO_ADDR
// max_x := x + r ;
12118: LD_ADDR_VAR 0 9
12122: PUSH
12123: LD_VAR 0 2
12127: PUSH
12128: LD_VAR 0 4
12132: PLUS
12133: ST_TO_ADDR
// max_y := y + r ;
12134: LD_ADDR_VAR 0 10
12138: PUSH
12139: LD_VAR 0 3
12143: PUSH
12144: LD_VAR 0 4
12148: PLUS
12149: ST_TO_ADDR
// for _x = min_x to max_x do
12150: LD_ADDR_VAR 0 11
12154: PUSH
12155: DOUBLE
12156: LD_VAR 0 7
12160: DEC
12161: ST_TO_ADDR
12162: LD_VAR 0 9
12166: PUSH
12167: FOR_TO
12168: IFFALSE 12287
// for _y = min_y to max_y do
12170: LD_ADDR_VAR 0 12
12174: PUSH
12175: DOUBLE
12176: LD_VAR 0 8
12180: DEC
12181: ST_TO_ADDR
12182: LD_VAR 0 10
12186: PUSH
12187: FOR_TO
12188: IFFALSE 12283
// begin if not ValidHex ( _x , _y ) then
12190: LD_VAR 0 11
12194: PPUSH
12195: LD_VAR 0 12
12199: PPUSH
12200: CALL_OW 488
12204: NOT
12205: IFFALSE 12209
// continue ;
12207: GO 12187
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
12209: LD_VAR 0 11
12213: PPUSH
12214: LD_VAR 0 12
12218: PPUSH
12219: CALL_OW 351
12223: IFFALSE 12241
12225: PUSH
12226: LD_VAR 0 11
12230: PPUSH
12231: LD_VAR 0 12
12235: PPUSH
12236: CALL_OW 554
12240: AND
12241: IFFALSE 12281
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
12243: LD_ADDR_VAR 0 13
12247: PUSH
12248: LD_VAR 0 13
12252: PPUSH
12253: LD_VAR 0 13
12257: PUSH
12258: LD_INT 1
12260: PLUS
12261: PPUSH
12262: LD_VAR 0 11
12266: PUSH
12267: LD_VAR 0 12
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: PPUSH
12276: CALL_OW 2
12280: ST_TO_ADDR
// end ;
12281: GO 12187
12283: POP
12284: POP
12285: GO 12167
12287: POP
12288: POP
// if not list then
12289: LD_VAR 0 13
12293: NOT
12294: IFFALSE 12298
// exit ;
12296: GO 12369
// for i in list do
12298: LD_ADDR_VAR 0 6
12302: PUSH
12303: LD_VAR 0 13
12307: PUSH
12308: FOR_IN
12309: IFFALSE 12367
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
12311: LD_VAR 0 1
12315: PPUSH
12316: LD_STRING M
12318: PUSH
12319: LD_VAR 0 6
12323: PUSH
12324: LD_INT 1
12326: ARRAY
12327: PUSH
12328: LD_VAR 0 6
12332: PUSH
12333: LD_INT 2
12335: ARRAY
12336: PUSH
12337: LD_INT 0
12339: PUSH
12340: LD_INT 0
12342: PUSH
12343: LD_INT 0
12345: PUSH
12346: LD_INT 0
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: PUSH
12358: EMPTY
12359: LIST
12360: PPUSH
12361: CALL_OW 447
12365: GO 12308
12367: POP
12368: POP
// end ;
12369: LD_VAR 0 5
12373: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
12374: LD_INT 0
12376: PPUSH
12377: PPUSH
12378: PPUSH
12379: PPUSH
12380: PPUSH
12381: PPUSH
12382: PPUSH
12383: PPUSH
12384: PPUSH
12385: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
12386: LD_VAR 0 1
12390: PPUSH
12391: CALL_OW 302
12395: NOT
12396: IFTRUE 12415
12398: PUSH
12399: LD_VAR 0 2
12403: PPUSH
12404: LD_VAR 0 3
12408: PPUSH
12409: CALL_OW 488
12413: NOT
12414: OR
12415: IFTRUE 12424
12417: PUSH
12418: LD_VAR 0 4
12422: NOT
12423: OR
12424: IFFALSE 12428
// exit ;
12426: GO 12945
// list := [ ] ;
12428: LD_ADDR_VAR 0 13
12432: PUSH
12433: EMPTY
12434: ST_TO_ADDR
// if x - r < 0 then
12435: LD_VAR 0 2
12439: PUSH
12440: LD_VAR 0 4
12444: MINUS
12445: PUSH
12446: LD_INT 0
12448: LESS
12449: IFFALSE 12461
// min_x := 0 else
12451: LD_ADDR_VAR 0 7
12455: PUSH
12456: LD_INT 0
12458: ST_TO_ADDR
12459: GO 12477
// min_x := x - r ;
12461: LD_ADDR_VAR 0 7
12465: PUSH
12466: LD_VAR 0 2
12470: PUSH
12471: LD_VAR 0 4
12475: MINUS
12476: ST_TO_ADDR
// if y - r < 0 then
12477: LD_VAR 0 3
12481: PUSH
12482: LD_VAR 0 4
12486: MINUS
12487: PUSH
12488: LD_INT 0
12490: LESS
12491: IFFALSE 12503
// min_y := 0 else
12493: LD_ADDR_VAR 0 8
12497: PUSH
12498: LD_INT 0
12500: ST_TO_ADDR
12501: GO 12519
// min_y := y - r ;
12503: LD_ADDR_VAR 0 8
12507: PUSH
12508: LD_VAR 0 3
12512: PUSH
12513: LD_VAR 0 4
12517: MINUS
12518: ST_TO_ADDR
// max_x := x + r ;
12519: LD_ADDR_VAR 0 9
12523: PUSH
12524: LD_VAR 0 2
12528: PUSH
12529: LD_VAR 0 4
12533: PLUS
12534: ST_TO_ADDR
// max_y := y + r ;
12535: LD_ADDR_VAR 0 10
12539: PUSH
12540: LD_VAR 0 3
12544: PUSH
12545: LD_VAR 0 4
12549: PLUS
12550: ST_TO_ADDR
// for _x = min_x to max_x do
12551: LD_ADDR_VAR 0 11
12555: PUSH
12556: DOUBLE
12557: LD_VAR 0 7
12561: DEC
12562: ST_TO_ADDR
12563: LD_VAR 0 9
12567: PUSH
12568: FOR_TO
12569: IFFALSE 12688
// for _y = min_y to max_y do
12571: LD_ADDR_VAR 0 12
12575: PUSH
12576: DOUBLE
12577: LD_VAR 0 8
12581: DEC
12582: ST_TO_ADDR
12583: LD_VAR 0 10
12587: PUSH
12588: FOR_TO
12589: IFFALSE 12684
// begin if not ValidHex ( _x , _y ) then
12591: LD_VAR 0 11
12595: PPUSH
12596: LD_VAR 0 12
12600: PPUSH
12601: CALL_OW 488
12605: NOT
12606: IFFALSE 12610
// continue ;
12608: GO 12588
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
12610: LD_VAR 0 11
12614: PPUSH
12615: LD_VAR 0 12
12619: PPUSH
12620: CALL_OW 351
12624: IFFALSE 12642
12626: PUSH
12627: LD_VAR 0 11
12631: PPUSH
12632: LD_VAR 0 12
12636: PPUSH
12637: CALL_OW 554
12641: AND
12642: IFFALSE 12682
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
12644: LD_ADDR_VAR 0 13
12648: PUSH
12649: LD_VAR 0 13
12653: PPUSH
12654: LD_VAR 0 13
12658: PUSH
12659: LD_INT 1
12661: PLUS
12662: PPUSH
12663: LD_VAR 0 11
12667: PUSH
12668: LD_VAR 0 12
12672: PUSH
12673: EMPTY
12674: LIST
12675: LIST
12676: PPUSH
12677: CALL_OW 2
12681: ST_TO_ADDR
// end ;
12682: GO 12588
12684: POP
12685: POP
12686: GO 12568
12688: POP
12689: POP
// if not list then
12690: LD_VAR 0 13
12694: NOT
12695: IFFALSE 12699
// exit ;
12697: GO 12945
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
12699: LD_ADDR_VAR 0 13
12703: PUSH
12704: LD_VAR 0 1
12708: PPUSH
12709: LD_VAR 0 13
12713: PPUSH
12714: LD_INT 1
12716: PPUSH
12717: LD_INT 1
12719: PPUSH
12720: CALL 38667 0 4
12724: ST_TO_ADDR
// ComStop ( flame ) ;
12725: LD_VAR 0 1
12729: PPUSH
12730: CALL_OW 141
// for i in list do
12734: LD_ADDR_VAR 0 6
12738: PUSH
12739: LD_VAR 0 13
12743: PUSH
12744: FOR_IN
12745: IFFALSE 12776
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
12747: LD_VAR 0 1
12751: PPUSH
12752: LD_VAR 0 6
12756: PUSH
12757: LD_INT 1
12759: ARRAY
12760: PPUSH
12761: LD_VAR 0 6
12765: PUSH
12766: LD_INT 2
12768: ARRAY
12769: PPUSH
12770: CALL_OW 176
12774: GO 12744
12776: POP
12777: POP
// repeat wait ( 0 0$1 ) ;
12778: LD_INT 35
12780: PPUSH
12781: CALL_OW 67
// task := GetTaskList ( flame ) ;
12785: LD_ADDR_VAR 0 14
12789: PUSH
12790: LD_VAR 0 1
12794: PPUSH
12795: CALL_OW 437
12799: ST_TO_ADDR
// if not task then
12800: LD_VAR 0 14
12804: NOT
12805: IFFALSE 12809
// exit ;
12807: GO 12945
// if task [ 1 ] [ 1 ] <> | then
12809: LD_VAR 0 14
12813: PUSH
12814: LD_INT 1
12816: ARRAY
12817: PUSH
12818: LD_INT 1
12820: ARRAY
12821: PUSH
12822: LD_STRING |
12824: NONEQUAL
12825: IFFALSE 12829
// exit ;
12827: GO 12945
// _x := task [ 1 ] [ 2 ] ;
12829: LD_ADDR_VAR 0 11
12833: PUSH
12834: LD_VAR 0 14
12838: PUSH
12839: LD_INT 1
12841: ARRAY
12842: PUSH
12843: LD_INT 2
12845: ARRAY
12846: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
12847: LD_ADDR_VAR 0 12
12851: PUSH
12852: LD_VAR 0 14
12856: PUSH
12857: LD_INT 1
12859: ARRAY
12860: PUSH
12861: LD_INT 3
12863: ARRAY
12864: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
12865: LD_VAR 0 11
12869: PPUSH
12870: LD_VAR 0 12
12874: PPUSH
12875: CALL_OW 351
12879: NOT
12880: IFTRUE 12899
12882: PUSH
12883: LD_VAR 0 11
12887: PPUSH
12888: LD_VAR 0 12
12892: PPUSH
12893: CALL_OW 554
12897: NOT
12898: OR
12899: IFFALSE 12933
// begin task := Delete ( task , 1 ) ;
12901: LD_ADDR_VAR 0 14
12905: PUSH
12906: LD_VAR 0 14
12910: PPUSH
12911: LD_INT 1
12913: PPUSH
12914: CALL_OW 3
12918: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
12919: LD_VAR 0 1
12923: PPUSH
12924: LD_VAR 0 14
12928: PPUSH
12929: CALL_OW 446
// end ; until not HasTask ( flame ) ;
12933: LD_VAR 0 1
12937: PPUSH
12938: CALL_OW 314
12942: NOT
12943: IFFALSE 12778
// end ;
12945: LD_VAR 0 5
12949: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
12950: LD_EXP 26
12954: NOT
12955: IFFALSE 13005
12957: GO 12959
12959: DISABLE
// begin initHack := true ;
12960: LD_ADDR_EXP 26
12964: PUSH
12965: LD_INT 1
12967: ST_TO_ADDR
// hackTanks := [ ] ;
12968: LD_ADDR_EXP 27
12972: PUSH
12973: EMPTY
12974: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
12975: LD_ADDR_EXP 28
12979: PUSH
12980: EMPTY
12981: ST_TO_ADDR
// hackLimit := 3 ;
12982: LD_ADDR_EXP 29
12986: PUSH
12987: LD_INT 3
12989: ST_TO_ADDR
// hackDist := 12 ;
12990: LD_ADDR_EXP 30
12994: PUSH
12995: LD_INT 12
12997: ST_TO_ADDR
// hackCounter := [ ] ;
12998: LD_ADDR_EXP 31
13002: PUSH
13003: EMPTY
13004: ST_TO_ADDR
// end ;
13005: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
13006: LD_EXP 26
13010: IFFALSE 13028
13012: PUSH
13013: LD_INT 34
13015: PUSH
13016: LD_INT 99
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: PPUSH
13023: CALL_OW 69
13027: AND
13028: IFFALSE 13281
13030: GO 13032
13032: DISABLE
13033: LD_INT 0
13035: PPUSH
13036: PPUSH
// begin enable ;
13037: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
13038: LD_ADDR_VAR 0 1
13042: PUSH
13043: LD_INT 34
13045: PUSH
13046: LD_INT 99
13048: PUSH
13049: EMPTY
13050: LIST
13051: LIST
13052: PPUSH
13053: CALL_OW 69
13057: PUSH
13058: FOR_IN
13059: IFFALSE 13279
// begin if not i in hackTanks then
13061: LD_VAR 0 1
13065: PUSH
13066: LD_EXP 27
13070: IN
13071: NOT
13072: IFFALSE 13155
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
13074: LD_ADDR_EXP 27
13078: PUSH
13079: LD_EXP 27
13083: PPUSH
13084: LD_EXP 27
13088: PUSH
13089: LD_INT 1
13091: PLUS
13092: PPUSH
13093: LD_VAR 0 1
13097: PPUSH
13098: CALL_OW 1
13102: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
13103: LD_ADDR_EXP 28
13107: PUSH
13108: LD_EXP 28
13112: PPUSH
13113: LD_EXP 28
13117: PUSH
13118: LD_INT 1
13120: PLUS
13121: PPUSH
13122: EMPTY
13123: PPUSH
13124: CALL_OW 1
13128: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
13129: LD_ADDR_EXP 31
13133: PUSH
13134: LD_EXP 31
13138: PPUSH
13139: LD_EXP 31
13143: PUSH
13144: LD_INT 1
13146: PLUS
13147: PPUSH
13148: EMPTY
13149: PPUSH
13150: CALL_OW 1
13154: ST_TO_ADDR
// end ; if not IsOk ( i ) then
13155: LD_VAR 0 1
13159: PPUSH
13160: CALL_OW 302
13164: NOT
13165: IFFALSE 13178
// begin HackUnlinkAll ( i ) ;
13167: LD_VAR 0 1
13171: PPUSH
13172: CALL 13284 0 1
// continue ;
13176: GO 13058
// end ; HackCheckCapturedStatus ( i ) ;
13178: LD_VAR 0 1
13182: PPUSH
13183: CALL 13729 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
13187: LD_ADDR_VAR 0 2
13191: PUSH
13192: LD_INT 81
13194: PUSH
13195: LD_VAR 0 1
13199: PPUSH
13200: CALL_OW 255
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: PUSH
13209: LD_INT 33
13211: PUSH
13212: LD_INT 3
13214: PUSH
13215: EMPTY
13216: LIST
13217: LIST
13218: PUSH
13219: LD_INT 91
13221: PUSH
13222: LD_VAR 0 1
13226: PUSH
13227: LD_EXP 30
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: LIST
13236: PUSH
13237: LD_INT 50
13239: PUSH
13240: EMPTY
13241: LIST
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: PPUSH
13249: CALL_OW 69
13253: ST_TO_ADDR
// if not tmp then
13254: LD_VAR 0 2
13258: NOT
13259: IFFALSE 13263
// continue ;
13261: GO 13058
// HackLink ( i , tmp ) ;
13263: LD_VAR 0 1
13267: PPUSH
13268: LD_VAR 0 2
13272: PPUSH
13273: CALL 13420 0 2
// end ;
13277: GO 13058
13279: POP
13280: POP
// end ;
13281: PPOPN 2
13283: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
13284: LD_INT 0
13286: PPUSH
13287: PPUSH
13288: PPUSH
// if not hack in hackTanks then
13289: LD_VAR 0 1
13293: PUSH
13294: LD_EXP 27
13298: IN
13299: NOT
13300: IFFALSE 13304
// exit ;
13302: GO 13415
// index := GetElementIndex ( hackTanks , hack ) ;
13304: LD_ADDR_VAR 0 4
13308: PUSH
13309: LD_EXP 27
13313: PPUSH
13314: LD_VAR 0 1
13318: PPUSH
13319: CALL 37962 0 2
13323: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
13324: LD_EXP 28
13328: PUSH
13329: LD_VAR 0 4
13333: ARRAY
13334: IFFALSE 13415
// begin for i in hackTanksCaptured [ index ] do
13336: LD_ADDR_VAR 0 3
13340: PUSH
13341: LD_EXP 28
13345: PUSH
13346: LD_VAR 0 4
13350: ARRAY
13351: PUSH
13352: FOR_IN
13353: IFFALSE 13379
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
13355: LD_VAR 0 3
13359: PUSH
13360: LD_INT 1
13362: ARRAY
13363: PPUSH
13364: LD_VAR 0 3
13368: PUSH
13369: LD_INT 2
13371: ARRAY
13372: PPUSH
13373: CALL_OW 235
13377: GO 13352
13379: POP
13380: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
13381: LD_ADDR_EXP 28
13385: PUSH
13386: LD_EXP 28
13390: PPUSH
13391: LD_VAR 0 4
13395: PPUSH
13396: EMPTY
13397: PPUSH
13398: CALL_OW 1
13402: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
13403: LD_VAR 0 1
13407: PPUSH
13408: LD_INT 0
13410: PPUSH
13411: CALL_OW 505
// end ; end ;
13415: LD_VAR 0 2
13419: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
13420: LD_INT 0
13422: PPUSH
13423: PPUSH
13424: PPUSH
// if not hack in hackTanks or not vehicles then
13425: LD_VAR 0 1
13429: PUSH
13430: LD_EXP 27
13434: IN
13435: NOT
13436: IFTRUE 13445
13438: PUSH
13439: LD_VAR 0 2
13443: NOT
13444: OR
13445: IFFALSE 13449
// exit ;
13447: GO 13724
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
13449: LD_ADDR_VAR 0 2
13453: PUSH
13454: LD_VAR 0 1
13458: PPUSH
13459: LD_VAR 0 2
13463: PPUSH
13464: LD_INT 1
13466: PPUSH
13467: LD_INT 1
13469: PPUSH
13470: CALL 38614 0 4
13474: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
13475: LD_ADDR_VAR 0 5
13479: PUSH
13480: LD_EXP 27
13484: PPUSH
13485: LD_VAR 0 1
13489: PPUSH
13490: CALL 37962 0 2
13494: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
13495: LD_EXP 28
13499: PUSH
13500: LD_VAR 0 5
13504: ARRAY
13505: PUSH
13506: LD_EXP 29
13510: LESS
13511: IFFALSE 13700
// begin for i := 1 to vehicles do
13513: LD_ADDR_VAR 0 4
13517: PUSH
13518: DOUBLE
13519: LD_INT 1
13521: DEC
13522: ST_TO_ADDR
13523: LD_VAR 0 2
13527: PUSH
13528: FOR_TO
13529: IFFALSE 13698
// begin if hackTanksCaptured [ index ] = hackLimit then
13531: LD_EXP 28
13535: PUSH
13536: LD_VAR 0 5
13540: ARRAY
13541: PUSH
13542: LD_EXP 29
13546: EQUAL
13547: IFFALSE 13551
// break ;
13549: GO 13698
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
13551: LD_ADDR_EXP 31
13555: PUSH
13556: LD_EXP 31
13560: PPUSH
13561: LD_VAR 0 5
13565: PPUSH
13566: LD_EXP 31
13570: PUSH
13571: LD_VAR 0 5
13575: ARRAY
13576: PUSH
13577: LD_INT 1
13579: PLUS
13580: PPUSH
13581: CALL_OW 1
13585: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
13586: LD_ADDR_EXP 28
13590: PUSH
13591: LD_EXP 28
13595: PPUSH
13596: LD_VAR 0 5
13600: PUSH
13601: LD_EXP 28
13605: PUSH
13606: LD_VAR 0 5
13610: ARRAY
13611: PUSH
13612: LD_INT 1
13614: PLUS
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PPUSH
13620: LD_VAR 0 2
13624: PUSH
13625: LD_VAR 0 4
13629: ARRAY
13630: PUSH
13631: LD_VAR 0 2
13635: PUSH
13636: LD_VAR 0 4
13640: ARRAY
13641: PPUSH
13642: CALL_OW 255
13646: PUSH
13647: EMPTY
13648: LIST
13649: LIST
13650: PPUSH
13651: CALL 38179 0 3
13655: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
13656: LD_VAR 0 2
13660: PUSH
13661: LD_VAR 0 4
13665: ARRAY
13666: PPUSH
13667: LD_VAR 0 1
13671: PPUSH
13672: CALL_OW 255
13676: PPUSH
13677: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
13681: LD_VAR 0 2
13685: PUSH
13686: LD_VAR 0 4
13690: ARRAY
13691: PPUSH
13692: CALL_OW 141
// end ;
13696: GO 13528
13698: POP
13699: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
13700: LD_VAR 0 1
13704: PPUSH
13705: LD_EXP 28
13709: PUSH
13710: LD_VAR 0 5
13714: ARRAY
13715: PUSH
13716: LD_INT 0
13718: PLUS
13719: PPUSH
13720: CALL_OW 505
// end ;
13724: LD_VAR 0 3
13728: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
13729: LD_INT 0
13731: PPUSH
13732: PPUSH
13733: PPUSH
13734: PPUSH
// if not hack in hackTanks then
13735: LD_VAR 0 1
13739: PUSH
13740: LD_EXP 27
13744: IN
13745: NOT
13746: IFFALSE 13750
// exit ;
13748: GO 13994
// index := GetElementIndex ( hackTanks , hack ) ;
13750: LD_ADDR_VAR 0 4
13754: PUSH
13755: LD_EXP 27
13759: PPUSH
13760: LD_VAR 0 1
13764: PPUSH
13765: CALL 37962 0 2
13769: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
13770: LD_ADDR_VAR 0 3
13774: PUSH
13775: DOUBLE
13776: LD_EXP 28
13780: PUSH
13781: LD_VAR 0 4
13785: ARRAY
13786: INC
13787: ST_TO_ADDR
13788: LD_INT 1
13790: PUSH
13791: FOR_DOWNTO
13792: IFFALSE 13968
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
13794: LD_ADDR_VAR 0 5
13798: PUSH
13799: LD_EXP 28
13803: PUSH
13804: LD_VAR 0 4
13808: ARRAY
13809: PUSH
13810: LD_VAR 0 3
13814: ARRAY
13815: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
13816: LD_VAR 0 5
13820: PUSH
13821: LD_INT 1
13823: ARRAY
13824: PPUSH
13825: CALL_OW 302
13829: NOT
13830: IFTRUE 13858
13832: PUSH
13833: LD_VAR 0 5
13837: PUSH
13838: LD_INT 1
13840: ARRAY
13841: PPUSH
13842: CALL_OW 255
13846: PUSH
13847: LD_VAR 0 1
13851: PPUSH
13852: CALL_OW 255
13856: NONEQUAL
13857: OR
13858: IFFALSE 13966
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
13860: LD_VAR 0 5
13864: PUSH
13865: LD_INT 1
13867: ARRAY
13868: PPUSH
13869: CALL_OW 305
13873: IFFALSE 13901
13875: PUSH
13876: LD_VAR 0 5
13880: PUSH
13881: LD_INT 1
13883: ARRAY
13884: PPUSH
13885: CALL_OW 255
13889: PUSH
13890: LD_VAR 0 1
13894: PPUSH
13895: CALL_OW 255
13899: EQUAL
13900: AND
13901: IFFALSE 13925
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
13903: LD_VAR 0 5
13907: PUSH
13908: LD_INT 1
13910: ARRAY
13911: PPUSH
13912: LD_VAR 0 5
13916: PUSH
13917: LD_INT 2
13919: ARRAY
13920: PPUSH
13921: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
13925: LD_ADDR_EXP 28
13929: PUSH
13930: LD_EXP 28
13934: PPUSH
13935: LD_VAR 0 4
13939: PPUSH
13940: LD_EXP 28
13944: PUSH
13945: LD_VAR 0 4
13949: ARRAY
13950: PPUSH
13951: LD_VAR 0 3
13955: PPUSH
13956: CALL_OW 3
13960: PPUSH
13961: CALL_OW 1
13965: ST_TO_ADDR
// end ; end ;
13966: GO 13791
13968: POP
13969: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
13970: LD_VAR 0 1
13974: PPUSH
13975: LD_EXP 28
13979: PUSH
13980: LD_VAR 0 4
13984: ARRAY
13985: PUSH
13986: LD_INT 0
13988: PLUS
13989: PPUSH
13990: CALL_OW 505
// end ;
13994: LD_VAR 0 2
13998: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
13999: LD_INT 0
14001: PPUSH
14002: PPUSH
14003: PPUSH
14004: PPUSH
// if not hack in hackTanks then
14005: LD_VAR 0 1
14009: PUSH
14010: LD_EXP 27
14014: IN
14015: NOT
14016: IFFALSE 14020
// exit ;
14018: GO 14105
// index := GetElementIndex ( hackTanks , hack ) ;
14020: LD_ADDR_VAR 0 5
14024: PUSH
14025: LD_EXP 27
14029: PPUSH
14030: LD_VAR 0 1
14034: PPUSH
14035: CALL 37962 0 2
14039: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
14040: LD_ADDR_VAR 0 4
14044: PUSH
14045: DOUBLE
14046: LD_INT 1
14048: DEC
14049: ST_TO_ADDR
14050: LD_EXP 28
14054: PUSH
14055: LD_VAR 0 5
14059: ARRAY
14060: PUSH
14061: FOR_TO
14062: IFFALSE 14103
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
14064: LD_EXP 28
14068: PUSH
14069: LD_VAR 0 5
14073: ARRAY
14074: PUSH
14075: LD_VAR 0 4
14079: ARRAY
14080: PUSH
14081: LD_INT 1
14083: ARRAY
14084: PUSH
14085: LD_VAR 0 2
14089: EQUAL
14090: IFFALSE 14101
// KillUnit ( vehicle ) ;
14092: LD_VAR 0 2
14096: PPUSH
14097: CALL_OW 66
14101: GO 14061
14103: POP
14104: POP
// end ;
14105: LD_VAR 0 3
14109: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
14110: LD_EXP 32
14114: NOT
14115: IFFALSE 14150
14117: GO 14119
14119: DISABLE
// begin initMiner := true ;
14120: LD_ADDR_EXP 32
14124: PUSH
14125: LD_INT 1
14127: ST_TO_ADDR
// minersList := [ ] ;
14128: LD_ADDR_EXP 33
14132: PUSH
14133: EMPTY
14134: ST_TO_ADDR
// minerMinesList := [ ] ;
14135: LD_ADDR_EXP 34
14139: PUSH
14140: EMPTY
14141: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
14142: LD_ADDR_EXP 35
14146: PUSH
14147: LD_INT 5
14149: ST_TO_ADDR
// end ;
14150: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
14151: LD_EXP 32
14155: IFFALSE 14173
14157: PUSH
14158: LD_INT 34
14160: PUSH
14161: LD_INT 81
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: PPUSH
14168: CALL_OW 69
14172: AND
14173: IFFALSE 14636
14175: GO 14177
14177: DISABLE
14178: LD_INT 0
14180: PPUSH
14181: PPUSH
14182: PPUSH
14183: PPUSH
// begin enable ;
14184: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
14185: LD_ADDR_VAR 0 1
14189: PUSH
14190: LD_INT 34
14192: PUSH
14193: LD_INT 81
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: PPUSH
14200: CALL_OW 69
14204: PUSH
14205: FOR_IN
14206: IFFALSE 14278
// begin if not i in minersList then
14208: LD_VAR 0 1
14212: PUSH
14213: LD_EXP 33
14217: IN
14218: NOT
14219: IFFALSE 14276
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
14221: LD_ADDR_EXP 33
14225: PUSH
14226: LD_EXP 33
14230: PPUSH
14231: LD_EXP 33
14235: PUSH
14236: LD_INT 1
14238: PLUS
14239: PPUSH
14240: LD_VAR 0 1
14244: PPUSH
14245: CALL_OW 1
14249: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
14250: LD_ADDR_EXP 34
14254: PUSH
14255: LD_EXP 34
14259: PPUSH
14260: LD_EXP 34
14264: PUSH
14265: LD_INT 1
14267: PLUS
14268: PPUSH
14269: EMPTY
14270: PPUSH
14271: CALL_OW 1
14275: ST_TO_ADDR
// end end ;
14276: GO 14205
14278: POP
14279: POP
// for i := minerMinesList downto 1 do
14280: LD_ADDR_VAR 0 1
14284: PUSH
14285: DOUBLE
14286: LD_EXP 34
14290: INC
14291: ST_TO_ADDR
14292: LD_INT 1
14294: PUSH
14295: FOR_DOWNTO
14296: IFFALSE 14634
// begin if IsLive ( minersList [ i ] ) then
14298: LD_EXP 33
14302: PUSH
14303: LD_VAR 0 1
14307: ARRAY
14308: PPUSH
14309: CALL_OW 300
14313: IFFALSE 14341
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
14315: LD_EXP 33
14319: PUSH
14320: LD_VAR 0 1
14324: ARRAY
14325: PPUSH
14326: LD_EXP 34
14330: PUSH
14331: LD_VAR 0 1
14335: ARRAY
14336: PPUSH
14337: CALL_OW 505
// if not minerMinesList [ i ] then
14341: LD_EXP 34
14345: PUSH
14346: LD_VAR 0 1
14350: ARRAY
14351: NOT
14352: IFFALSE 14356
// continue ;
14354: GO 14295
// for j := minerMinesList [ i ] downto 1 do
14356: LD_ADDR_VAR 0 2
14360: PUSH
14361: DOUBLE
14362: LD_EXP 34
14366: PUSH
14367: LD_VAR 0 1
14371: ARRAY
14372: INC
14373: ST_TO_ADDR
14374: LD_INT 1
14376: PUSH
14377: FOR_DOWNTO
14378: IFFALSE 14630
// begin side := GetSide ( minersList [ i ] ) ;
14380: LD_ADDR_VAR 0 3
14384: PUSH
14385: LD_EXP 33
14389: PUSH
14390: LD_VAR 0 1
14394: ARRAY
14395: PPUSH
14396: CALL_OW 255
14400: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
14401: LD_ADDR_VAR 0 4
14405: PUSH
14406: LD_EXP 34
14410: PUSH
14411: LD_VAR 0 1
14415: ARRAY
14416: PUSH
14417: LD_VAR 0 2
14421: ARRAY
14422: PUSH
14423: LD_INT 1
14425: ARRAY
14426: PPUSH
14427: LD_EXP 34
14431: PUSH
14432: LD_VAR 0 1
14436: ARRAY
14437: PUSH
14438: LD_VAR 0 2
14442: ARRAY
14443: PUSH
14444: LD_INT 2
14446: ARRAY
14447: PPUSH
14448: CALL_OW 428
14452: ST_TO_ADDR
// if not tmp then
14453: LD_VAR 0 4
14457: NOT
14458: IFFALSE 14462
// continue ;
14460: GO 14377
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
14462: LD_VAR 0 4
14466: PUSH
14467: LD_INT 81
14469: PUSH
14470: LD_VAR 0 3
14474: PUSH
14475: EMPTY
14476: LIST
14477: LIST
14478: PPUSH
14479: CALL_OW 69
14483: IN
14484: IFFALSE 14534
14486: PUSH
14487: LD_EXP 34
14491: PUSH
14492: LD_VAR 0 1
14496: ARRAY
14497: PUSH
14498: LD_VAR 0 2
14502: ARRAY
14503: PUSH
14504: LD_INT 1
14506: ARRAY
14507: PPUSH
14508: LD_EXP 34
14512: PUSH
14513: LD_VAR 0 1
14517: ARRAY
14518: PUSH
14519: LD_VAR 0 2
14523: ARRAY
14524: PUSH
14525: LD_INT 2
14527: ARRAY
14528: PPUSH
14529: CALL_OW 458
14533: AND
14534: IFFALSE 14628
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
14536: LD_EXP 34
14540: PUSH
14541: LD_VAR 0 1
14545: ARRAY
14546: PUSH
14547: LD_VAR 0 2
14551: ARRAY
14552: PUSH
14553: LD_INT 1
14555: ARRAY
14556: PPUSH
14557: LD_EXP 34
14561: PUSH
14562: LD_VAR 0 1
14566: ARRAY
14567: PUSH
14568: LD_VAR 0 2
14572: ARRAY
14573: PUSH
14574: LD_INT 2
14576: ARRAY
14577: PPUSH
14578: LD_VAR 0 3
14582: PPUSH
14583: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
14587: LD_ADDR_EXP 34
14591: PUSH
14592: LD_EXP 34
14596: PPUSH
14597: LD_VAR 0 1
14601: PPUSH
14602: LD_EXP 34
14606: PUSH
14607: LD_VAR 0 1
14611: ARRAY
14612: PPUSH
14613: LD_VAR 0 2
14617: PPUSH
14618: CALL_OW 3
14622: PPUSH
14623: CALL_OW 1
14627: ST_TO_ADDR
// end ; end ;
14628: GO 14377
14630: POP
14631: POP
// end ;
14632: GO 14295
14634: POP
14635: POP
// end ;
14636: PPOPN 4
14638: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
14639: LD_INT 0
14641: PPUSH
14642: PPUSH
// result := false ;
14643: LD_ADDR_VAR 0 4
14647: PUSH
14648: LD_INT 0
14650: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
14651: LD_VAR 0 1
14655: PPUSH
14656: CALL_OW 264
14660: PUSH
14661: LD_INT 81
14663: EQUAL
14664: NOT
14665: IFFALSE 14669
// exit ;
14667: GO 14913
// index := GetElementIndex ( minersList , unit ) ;
14669: LD_ADDR_VAR 0 5
14673: PUSH
14674: LD_EXP 33
14678: PPUSH
14679: LD_VAR 0 1
14683: PPUSH
14684: CALL 37962 0 2
14688: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
14689: LD_EXP 34
14693: PUSH
14694: LD_VAR 0 5
14698: ARRAY
14699: PUSH
14700: LD_EXP 35
14704: GREATEREQUAL
14705: IFFALSE 14709
// exit ;
14707: GO 14913
// ComMoveXY ( unit , x , y ) ;
14709: LD_VAR 0 1
14713: PPUSH
14714: LD_VAR 0 2
14718: PPUSH
14719: LD_VAR 0 3
14723: PPUSH
14724: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14728: LD_INT 35
14730: PPUSH
14731: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
14735: LD_VAR 0 1
14739: PPUSH
14740: LD_VAR 0 2
14744: PPUSH
14745: LD_VAR 0 3
14749: PPUSH
14750: CALL 70008 0 3
14754: NOT
14755: IFFALSE 14768
14757: PUSH
14758: LD_VAR 0 1
14762: PPUSH
14763: CALL_OW 314
14767: AND
14768: IFFALSE 14772
// exit ;
14770: GO 14913
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
14772: LD_VAR 0 2
14776: PPUSH
14777: LD_VAR 0 3
14781: PPUSH
14782: CALL_OW 428
14786: PUSH
14787: LD_VAR 0 1
14791: EQUAL
14792: IFFALSE 14806
14794: PUSH
14795: LD_VAR 0 1
14799: PPUSH
14800: CALL_OW 314
14804: NOT
14805: AND
14806: IFFALSE 14728
// PlaySoundXY ( x , y , PlantMine ) ;
14808: LD_VAR 0 2
14812: PPUSH
14813: LD_VAR 0 3
14817: PPUSH
14818: LD_STRING PlantMine
14820: PPUSH
14821: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
14825: LD_VAR 0 2
14829: PPUSH
14830: LD_VAR 0 3
14834: PPUSH
14835: LD_VAR 0 1
14839: PPUSH
14840: CALL_OW 255
14844: PPUSH
14845: LD_INT 0
14847: PPUSH
14848: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
14852: LD_ADDR_EXP 34
14856: PUSH
14857: LD_EXP 34
14861: PPUSH
14862: LD_VAR 0 5
14866: PUSH
14867: LD_EXP 34
14871: PUSH
14872: LD_VAR 0 5
14876: ARRAY
14877: PUSH
14878: LD_INT 1
14880: PLUS
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: PPUSH
14886: LD_VAR 0 2
14890: PUSH
14891: LD_VAR 0 3
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: PPUSH
14900: CALL 38179 0 3
14904: ST_TO_ADDR
// result := true ;
14905: LD_ADDR_VAR 0 4
14909: PUSH
14910: LD_INT 1
14912: ST_TO_ADDR
// end ;
14913: LD_VAR 0 4
14917: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
14918: LD_INT 0
14920: PPUSH
14921: PPUSH
14922: PPUSH
// if not unit in minersList then
14923: LD_VAR 0 1
14927: PUSH
14928: LD_EXP 33
14932: IN
14933: NOT
14934: IFFALSE 14938
// exit ;
14936: GO 15332
// index := GetElementIndex ( minersList , unit ) ;
14938: LD_ADDR_VAR 0 6
14942: PUSH
14943: LD_EXP 33
14947: PPUSH
14948: LD_VAR 0 1
14952: PPUSH
14953: CALL 37962 0 2
14957: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
14958: LD_ADDR_VAR 0 5
14962: PUSH
14963: DOUBLE
14964: LD_EXP 34
14968: PUSH
14969: LD_VAR 0 6
14973: ARRAY
14974: INC
14975: ST_TO_ADDR
14976: LD_INT 1
14978: PUSH
14979: FOR_DOWNTO
14980: IFFALSE 15143
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
14982: LD_EXP 34
14986: PUSH
14987: LD_VAR 0 6
14991: ARRAY
14992: PUSH
14993: LD_VAR 0 5
14997: ARRAY
14998: PUSH
14999: LD_INT 1
15001: ARRAY
15002: PUSH
15003: LD_VAR 0 2
15007: EQUAL
15008: IFFALSE 15038
15010: PUSH
15011: LD_EXP 34
15015: PUSH
15016: LD_VAR 0 6
15020: ARRAY
15021: PUSH
15022: LD_VAR 0 5
15026: ARRAY
15027: PUSH
15028: LD_INT 2
15030: ARRAY
15031: PUSH
15032: LD_VAR 0 3
15036: EQUAL
15037: AND
15038: IFFALSE 15141
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
15040: LD_EXP 34
15044: PUSH
15045: LD_VAR 0 6
15049: ARRAY
15050: PUSH
15051: LD_VAR 0 5
15055: ARRAY
15056: PUSH
15057: LD_INT 1
15059: ARRAY
15060: PPUSH
15061: LD_EXP 34
15065: PUSH
15066: LD_VAR 0 6
15070: ARRAY
15071: PUSH
15072: LD_VAR 0 5
15076: ARRAY
15077: PUSH
15078: LD_INT 2
15080: ARRAY
15081: PPUSH
15082: LD_VAR 0 1
15086: PPUSH
15087: CALL_OW 255
15091: PPUSH
15092: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
15096: LD_ADDR_EXP 34
15100: PUSH
15101: LD_EXP 34
15105: PPUSH
15106: LD_VAR 0 6
15110: PPUSH
15111: LD_EXP 34
15115: PUSH
15116: LD_VAR 0 6
15120: ARRAY
15121: PPUSH
15122: LD_VAR 0 5
15126: PPUSH
15127: CALL_OW 3
15131: PPUSH
15132: CALL_OW 1
15136: ST_TO_ADDR
// exit ;
15137: POP
15138: POP
15139: GO 15332
// end ; end ;
15141: GO 14979
15143: POP
15144: POP
// for i := minerMinesList [ index ] downto 1 do
15145: LD_ADDR_VAR 0 5
15149: PUSH
15150: DOUBLE
15151: LD_EXP 34
15155: PUSH
15156: LD_VAR 0 6
15160: ARRAY
15161: INC
15162: ST_TO_ADDR
15163: LD_INT 1
15165: PUSH
15166: FOR_DOWNTO
15167: IFFALSE 15330
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
15169: LD_EXP 34
15173: PUSH
15174: LD_VAR 0 6
15178: ARRAY
15179: PUSH
15180: LD_VAR 0 5
15184: ARRAY
15185: PUSH
15186: LD_INT 1
15188: ARRAY
15189: PPUSH
15190: LD_EXP 34
15194: PUSH
15195: LD_VAR 0 6
15199: ARRAY
15200: PUSH
15201: LD_VAR 0 5
15205: ARRAY
15206: PUSH
15207: LD_INT 2
15209: ARRAY
15210: PPUSH
15211: LD_VAR 0 2
15215: PPUSH
15216: LD_VAR 0 3
15220: PPUSH
15221: CALL_OW 298
15225: PUSH
15226: LD_INT 6
15228: LESS
15229: IFFALSE 15328
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
15231: LD_EXP 34
15235: PUSH
15236: LD_VAR 0 6
15240: ARRAY
15241: PUSH
15242: LD_VAR 0 5
15246: ARRAY
15247: PUSH
15248: LD_INT 1
15250: ARRAY
15251: PPUSH
15252: LD_EXP 34
15256: PUSH
15257: LD_VAR 0 6
15261: ARRAY
15262: PUSH
15263: LD_VAR 0 5
15267: ARRAY
15268: PUSH
15269: LD_INT 2
15271: ARRAY
15272: PPUSH
15273: LD_VAR 0 1
15277: PPUSH
15278: CALL_OW 255
15282: PPUSH
15283: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
15287: LD_ADDR_EXP 34
15291: PUSH
15292: LD_EXP 34
15296: PPUSH
15297: LD_VAR 0 6
15301: PPUSH
15302: LD_EXP 34
15306: PUSH
15307: LD_VAR 0 6
15311: ARRAY
15312: PPUSH
15313: LD_VAR 0 5
15317: PPUSH
15318: CALL_OW 3
15322: PPUSH
15323: CALL_OW 1
15327: ST_TO_ADDR
// end ; end ;
15328: GO 15166
15330: POP
15331: POP
// end ;
15332: LD_VAR 0 4
15336: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
15337: LD_INT 0
15339: PPUSH
15340: PPUSH
15341: PPUSH
15342: PPUSH
15343: PPUSH
15344: PPUSH
15345: PPUSH
15346: PPUSH
15347: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
15348: LD_VAR 0 1
15352: PPUSH
15353: CALL_OW 264
15357: PUSH
15358: LD_INT 81
15360: EQUAL
15361: NOT
15362: IFTRUE 15377
15364: PUSH
15365: LD_VAR 0 1
15369: PUSH
15370: LD_EXP 33
15374: IN
15375: NOT
15376: OR
15377: IFFALSE 15381
// exit ;
15379: GO 15707
// index := GetElementIndex ( minersList , unit ) ;
15381: LD_ADDR_VAR 0 6
15385: PUSH
15386: LD_EXP 33
15390: PPUSH
15391: LD_VAR 0 1
15395: PPUSH
15396: CALL 37962 0 2
15400: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
15401: LD_ADDR_VAR 0 8
15405: PUSH
15406: LD_EXP 35
15410: PUSH
15411: LD_EXP 34
15415: PUSH
15416: LD_VAR 0 6
15420: ARRAY
15421: MINUS
15422: ST_TO_ADDR
// if not minesFreeAmount then
15423: LD_VAR 0 8
15427: NOT
15428: IFFALSE 15432
// exit ;
15430: GO 15707
// tmp := [ ] ;
15432: LD_ADDR_VAR 0 7
15436: PUSH
15437: EMPTY
15438: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
15439: LD_ADDR_VAR 0 5
15443: PUSH
15444: DOUBLE
15445: LD_INT 1
15447: DEC
15448: ST_TO_ADDR
15449: LD_VAR 0 8
15453: PUSH
15454: FOR_TO
15455: IFFALSE 15654
// begin _d := rand ( 0 , 5 ) ;
15457: LD_ADDR_VAR 0 11
15461: PUSH
15462: LD_INT 0
15464: PPUSH
15465: LD_INT 5
15467: PPUSH
15468: CALL_OW 12
15472: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
15473: LD_ADDR_VAR 0 12
15477: PUSH
15478: LD_INT 2
15480: PPUSH
15481: LD_INT 6
15483: PPUSH
15484: CALL_OW 12
15488: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
15489: LD_ADDR_VAR 0 9
15493: PUSH
15494: LD_VAR 0 2
15498: PPUSH
15499: LD_VAR 0 11
15503: PPUSH
15504: LD_VAR 0 12
15508: PPUSH
15509: CALL_OW 272
15513: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
15514: LD_ADDR_VAR 0 10
15518: PUSH
15519: LD_VAR 0 3
15523: PPUSH
15524: LD_VAR 0 11
15528: PPUSH
15529: LD_VAR 0 12
15533: PPUSH
15534: CALL_OW 273
15538: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
15539: LD_VAR 0 9
15543: PPUSH
15544: LD_VAR 0 10
15548: PPUSH
15549: CALL_OW 488
15553: IFFALSE 15577
15555: PUSH
15556: LD_VAR 0 9
15560: PUSH
15561: LD_VAR 0 10
15565: PUSH
15566: EMPTY
15567: LIST
15568: LIST
15569: PUSH
15570: LD_VAR 0 7
15574: IN
15575: NOT
15576: AND
15577: IFFALSE 15596
15579: PUSH
15580: LD_VAR 0 9
15584: PPUSH
15585: LD_VAR 0 10
15589: PPUSH
15590: CALL_OW 458
15594: NOT
15595: AND
15596: IFFALSE 15638
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
15598: LD_ADDR_VAR 0 7
15602: PUSH
15603: LD_VAR 0 7
15607: PPUSH
15608: LD_VAR 0 7
15612: PUSH
15613: LD_INT 1
15615: PLUS
15616: PPUSH
15617: LD_VAR 0 9
15621: PUSH
15622: LD_VAR 0 10
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PPUSH
15631: CALL_OW 1
15635: ST_TO_ADDR
15636: GO 15652
// i := i - 1 ;
15638: LD_ADDR_VAR 0 5
15642: PUSH
15643: LD_VAR 0 5
15647: PUSH
15648: LD_INT 1
15650: MINUS
15651: ST_TO_ADDR
// end ;
15652: GO 15454
15654: POP
15655: POP
// for i in tmp do
15656: LD_ADDR_VAR 0 5
15660: PUSH
15661: LD_VAR 0 7
15665: PUSH
15666: FOR_IN
15667: IFFALSE 15705
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
15669: LD_VAR 0 1
15673: PPUSH
15674: LD_VAR 0 5
15678: PUSH
15679: LD_INT 1
15681: ARRAY
15682: PPUSH
15683: LD_VAR 0 5
15687: PUSH
15688: LD_INT 2
15690: ARRAY
15691: PPUSH
15692: CALL 14639 0 3
15696: NOT
15697: IFFALSE 15703
// exit ;
15699: POP
15700: POP
15701: GO 15707
15703: GO 15666
15705: POP
15706: POP
// end ;
15707: LD_VAR 0 4
15711: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
15712: LD_INT 0
15714: PPUSH
15715: PPUSH
15716: PPUSH
15717: PPUSH
15718: PPUSH
15719: PPUSH
15720: PPUSH
15721: PPUSH
15722: PPUSH
// if GetClass ( unit ) <> class_sniper then
15723: LD_VAR 0 1
15727: PPUSH
15728: CALL_OW 257
15732: PUSH
15733: LD_INT 5
15735: NONEQUAL
15736: IFFALSE 15740
// exit ;
15738: GO 16210
// dist := 8 ;
15740: LD_ADDR_VAR 0 5
15744: PUSH
15745: LD_INT 8
15747: ST_TO_ADDR
// viewRange := 12 ;
15748: LD_ADDR_VAR 0 8
15752: PUSH
15753: LD_INT 12
15755: ST_TO_ADDR
// side := GetSide ( unit ) ;
15756: LD_ADDR_VAR 0 6
15760: PUSH
15761: LD_VAR 0 1
15765: PPUSH
15766: CALL_OW 255
15770: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
15771: LD_INT 61
15773: PPUSH
15774: LD_VAR 0 6
15778: PPUSH
15779: CALL_OW 321
15783: PUSH
15784: LD_INT 2
15786: EQUAL
15787: IFFALSE 15797
// viewRange := 16 ;
15789: LD_ADDR_VAR 0 8
15793: PUSH
15794: LD_INT 16
15796: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
15797: LD_VAR 0 1
15801: PPUSH
15802: LD_VAR 0 2
15806: PPUSH
15807: LD_VAR 0 3
15811: PPUSH
15812: CALL_OW 297
15816: PUSH
15817: LD_VAR 0 5
15821: GREATER
15822: IFFALSE 15901
// begin ComMoveXY ( unit , x , y ) ;
15824: LD_VAR 0 1
15828: PPUSH
15829: LD_VAR 0 2
15833: PPUSH
15834: LD_VAR 0 3
15838: PPUSH
15839: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
15843: LD_INT 35
15845: PPUSH
15846: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
15850: LD_VAR 0 1
15854: PPUSH
15855: LD_VAR 0 2
15859: PPUSH
15860: LD_VAR 0 3
15864: PPUSH
15865: CALL 70008 0 3
15869: NOT
15870: IFFALSE 15874
// exit ;
15872: GO 16210
// until GetDistUnitXY ( unit , x , y ) < dist ;
15874: LD_VAR 0 1
15878: PPUSH
15879: LD_VAR 0 2
15883: PPUSH
15884: LD_VAR 0 3
15888: PPUSH
15889: CALL_OW 297
15893: PUSH
15894: LD_VAR 0 5
15898: LESS
15899: IFFALSE 15843
// end ; ComTurnXY ( unit , x , y ) ;
15901: LD_VAR 0 1
15905: PPUSH
15906: LD_VAR 0 2
15910: PPUSH
15911: LD_VAR 0 3
15915: PPUSH
15916: CALL_OW 118
// repeat if Multiplayer then
15920: LD_OWVAR 4
15924: IFFALSE 15935
// wait ( 35 ) else
15926: LD_INT 35
15928: PPUSH
15929: CALL_OW 67
15933: GO 15942
// wait ( 5 ) ;
15935: LD_INT 5
15937: PPUSH
15938: CALL_OW 67
// _d := GetDir ( unit ) ;
15942: LD_ADDR_VAR 0 11
15946: PUSH
15947: LD_VAR 0 1
15951: PPUSH
15952: CALL_OW 254
15956: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
15957: LD_ADDR_VAR 0 7
15961: PUSH
15962: LD_VAR 0 1
15966: PPUSH
15967: CALL_OW 250
15971: PPUSH
15972: LD_VAR 0 1
15976: PPUSH
15977: CALL_OW 251
15981: PPUSH
15982: LD_VAR 0 2
15986: PPUSH
15987: LD_VAR 0 3
15991: PPUSH
15992: CALL 72644 0 4
15996: ST_TO_ADDR
// until dir = _d ;
15997: LD_VAR 0 7
16001: PUSH
16002: LD_VAR 0 11
16006: EQUAL
16007: IFFALSE 15920
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
16009: LD_ADDR_VAR 0 9
16013: PUSH
16014: LD_VAR 0 1
16018: PPUSH
16019: CALL_OW 250
16023: PPUSH
16024: LD_VAR 0 7
16028: PPUSH
16029: LD_VAR 0 5
16033: PPUSH
16034: CALL_OW 272
16038: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
16039: LD_ADDR_VAR 0 10
16043: PUSH
16044: LD_VAR 0 1
16048: PPUSH
16049: CALL_OW 251
16053: PPUSH
16054: LD_VAR 0 7
16058: PPUSH
16059: LD_VAR 0 5
16063: PPUSH
16064: CALL_OW 273
16068: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16069: LD_VAR 0 9
16073: PPUSH
16074: LD_VAR 0 10
16078: PPUSH
16079: CALL_OW 488
16083: NOT
16084: IFFALSE 16088
// exit ;
16086: GO 16210
// ComAnimCustom ( unit , 1 ) ;
16088: LD_VAR 0 1
16092: PPUSH
16093: LD_INT 1
16095: PPUSH
16096: CALL_OW 592
// p := 0 ;
16100: LD_ADDR_VAR 0 12
16104: PUSH
16105: LD_INT 0
16107: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
16108: LD_VAR 0 9
16112: PPUSH
16113: LD_VAR 0 10
16117: PPUSH
16118: LD_VAR 0 6
16122: PPUSH
16123: LD_VAR 0 8
16127: PPUSH
16128: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
16132: LD_INT 35
16134: PPUSH
16135: CALL_OW 67
// p := Inc ( p ) ;
16139: LD_ADDR_VAR 0 12
16143: PUSH
16144: LD_VAR 0 12
16148: PPUSH
16149: CALL 72600 0 1
16153: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
16154: LD_VAR 0 12
16158: PUSH
16159: LD_INT 3
16161: EQUAL
16162: IFTRUE 16176
16164: PUSH
16165: LD_VAR 0 1
16169: PPUSH
16170: CALL_OW 302
16174: NOT
16175: OR
16176: IFTRUE 16189
16178: PUSH
16179: LD_VAR 0 1
16183: PPUSH
16184: CALL_OW 301
16188: OR
16189: IFFALSE 16132
// RemoveSeeing ( _x , _y , side ) ;
16191: LD_VAR 0 9
16195: PPUSH
16196: LD_VAR 0 10
16200: PPUSH
16201: LD_VAR 0 6
16205: PPUSH
16206: CALL_OW 331
// end ;
16210: LD_VAR 0 4
16214: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
16215: LD_INT 0
16217: PPUSH
16218: PPUSH
16219: PPUSH
16220: PPUSH
16221: PPUSH
16222: PPUSH
16223: PPUSH
16224: PPUSH
16225: PPUSH
16226: PPUSH
16227: PPUSH
// if not unit then
16228: LD_VAR 0 1
16232: NOT
16233: IFFALSE 16237
// exit ;
16235: GO 16508
// side := GetSide ( unit ) ;
16237: LD_ADDR_VAR 0 3
16241: PUSH
16242: LD_VAR 0 1
16246: PPUSH
16247: CALL_OW 255
16251: ST_TO_ADDR
// x := GetX ( unit ) ;
16252: LD_ADDR_VAR 0 5
16256: PUSH
16257: LD_VAR 0 1
16261: PPUSH
16262: CALL_OW 250
16266: ST_TO_ADDR
// y := GetY ( unit ) ;
16267: LD_ADDR_VAR 0 6
16271: PUSH
16272: LD_VAR 0 1
16276: PPUSH
16277: CALL_OW 251
16281: ST_TO_ADDR
// r := 8 ;
16282: LD_ADDR_VAR 0 4
16286: PUSH
16287: LD_INT 8
16289: ST_TO_ADDR
// if x - r < 0 then
16290: LD_VAR 0 5
16294: PUSH
16295: LD_VAR 0 4
16299: MINUS
16300: PUSH
16301: LD_INT 0
16303: LESS
16304: IFFALSE 16316
// min_x := 0 else
16306: LD_ADDR_VAR 0 7
16310: PUSH
16311: LD_INT 0
16313: ST_TO_ADDR
16314: GO 16332
// min_x := x - r ;
16316: LD_ADDR_VAR 0 7
16320: PUSH
16321: LD_VAR 0 5
16325: PUSH
16326: LD_VAR 0 4
16330: MINUS
16331: ST_TO_ADDR
// if y - r < 0 then
16332: LD_VAR 0 6
16336: PUSH
16337: LD_VAR 0 4
16341: MINUS
16342: PUSH
16343: LD_INT 0
16345: LESS
16346: IFFALSE 16358
// min_y := 0 else
16348: LD_ADDR_VAR 0 8
16352: PUSH
16353: LD_INT 0
16355: ST_TO_ADDR
16356: GO 16374
// min_y := y - r ;
16358: LD_ADDR_VAR 0 8
16362: PUSH
16363: LD_VAR 0 6
16367: PUSH
16368: LD_VAR 0 4
16372: MINUS
16373: ST_TO_ADDR
// max_x := x + r ;
16374: LD_ADDR_VAR 0 9
16378: PUSH
16379: LD_VAR 0 5
16383: PUSH
16384: LD_VAR 0 4
16388: PLUS
16389: ST_TO_ADDR
// max_y := y + r ;
16390: LD_ADDR_VAR 0 10
16394: PUSH
16395: LD_VAR 0 6
16399: PUSH
16400: LD_VAR 0 4
16404: PLUS
16405: ST_TO_ADDR
// for _x = min_x to max_x do
16406: LD_ADDR_VAR 0 11
16410: PUSH
16411: DOUBLE
16412: LD_VAR 0 7
16416: DEC
16417: ST_TO_ADDR
16418: LD_VAR 0 9
16422: PUSH
16423: FOR_TO
16424: IFFALSE 16506
// for _y = min_y to max_y do
16426: LD_ADDR_VAR 0 12
16430: PUSH
16431: DOUBLE
16432: LD_VAR 0 8
16436: DEC
16437: ST_TO_ADDR
16438: LD_VAR 0 10
16442: PUSH
16443: FOR_TO
16444: IFFALSE 16502
// begin if not ValidHex ( _x , _y ) then
16446: LD_VAR 0 11
16450: PPUSH
16451: LD_VAR 0 12
16455: PPUSH
16456: CALL_OW 488
16460: NOT
16461: IFFALSE 16465
// continue ;
16463: GO 16443
// if MineAtPos ( _x , _y ) then
16465: LD_VAR 0 11
16469: PPUSH
16470: LD_VAR 0 12
16474: PPUSH
16475: CALL_OW 458
16479: IFFALSE 16500
// ViewMineAtPos ( _x , _y , side ) ;
16481: LD_VAR 0 11
16485: PPUSH
16486: LD_VAR 0 12
16490: PPUSH
16491: LD_VAR 0 3
16495: PPUSH
16496: CALL_OW 457
// end ;
16500: GO 16443
16502: POP
16503: POP
16504: GO 16423
16506: POP
16507: POP
// end ;
16508: LD_VAR 0 2
16512: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
16513: LD_INT 0
16515: PPUSH
16516: PPUSH
16517: PPUSH
16518: PPUSH
16519: PPUSH
16520: PPUSH
// if not units then
16521: LD_VAR 0 1
16525: NOT
16526: IFFALSE 16530
// exit ;
16528: GO 16960
// scaners := [ ] ;
16530: LD_ADDR_VAR 0 6
16534: PUSH
16535: EMPTY
16536: ST_TO_ADDR
// for i in units do
16537: LD_ADDR_VAR 0 3
16541: PUSH
16542: LD_VAR 0 1
16546: PUSH
16547: FOR_IN
16548: IFFALSE 16705
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
16550: LD_VAR 0 3
16554: PPUSH
16555: CALL_OW 264
16559: PUSH
16560: LD_INT 11
16562: NONEQUAL
16563: IFTRUE 16577
16565: PUSH
16566: LD_VAR 0 3
16570: PPUSH
16571: CALL_OW 302
16575: NOT
16576: OR
16577: IFTRUE 16594
16579: PUSH
16580: LD_VAR 0 3
16584: PPUSH
16585: CALL_OW 110
16589: PUSH
16590: LD_INT 502
16592: EQUAL
16593: OR
16594: IFFALSE 16598
// continue ;
16596: GO 16547
// ComStop ( i ) ;
16598: LD_VAR 0 3
16602: PPUSH
16603: CALL_OW 141
// x := GetX ( i ) ;
16607: LD_ADDR_VAR 0 4
16611: PUSH
16612: LD_VAR 0 3
16616: PPUSH
16617: CALL_OW 250
16621: ST_TO_ADDR
// y := GetY ( i ) ;
16622: LD_ADDR_VAR 0 5
16626: PUSH
16627: LD_VAR 0 3
16631: PPUSH
16632: CALL_OW 251
16636: ST_TO_ADDR
// if GetSide ( i ) = your_side then
16637: LD_VAR 0 3
16641: PPUSH
16642: CALL_OW 255
16646: PUSH
16647: LD_OWVAR 2
16651: EQUAL
16652: IFFALSE 16671
// PlaySoundXY ( x , y , mineDetector ) ;
16654: LD_VAR 0 4
16658: PPUSH
16659: LD_VAR 0 5
16663: PPUSH
16664: LD_STRING mineDetector
16666: PPUSH
16667: CALL_OW 366
// scaners := Join ( scaners , i ) ;
16671: LD_ADDR_VAR 0 6
16675: PUSH
16676: LD_VAR 0 6
16680: PPUSH
16681: LD_VAR 0 3
16685: PPUSH
16686: CALL 71227 0 2
16690: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
16691: LD_VAR 0 3
16695: PPUSH
16696: LD_INT 502
16698: PPUSH
16699: CALL_OW 109
// end ;
16703: GO 16547
16705: POP
16706: POP
// if not scaners then
16707: LD_VAR 0 6
16711: NOT
16712: IFFALSE 16716
// exit ;
16714: GO 16960
// wait ( 3 ) ;
16716: LD_INT 3
16718: PPUSH
16719: CALL_OW 67
// timer := 6 ;
16723: LD_ADDR_VAR 0 7
16727: PUSH
16728: LD_INT 6
16730: ST_TO_ADDR
// repeat for i in scaners do
16731: LD_ADDR_VAR 0 3
16735: PUSH
16736: LD_VAR 0 6
16740: PUSH
16741: FOR_IN
16742: IFFALSE 16858
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
16744: LD_VAR 0 3
16748: PPUSH
16749: CALL_OW 302
16753: NOT
16754: IFTRUE 16767
16756: PUSH
16757: LD_VAR 0 3
16761: PPUSH
16762: CALL_OW 314
16766: OR
16767: IFTRUE 16798
16769: PUSH
16770: LD_VAR 0 3
16774: PPUSH
16775: CALL_OW 263
16779: PUSH
16780: LD_INT 1
16782: EQUAL
16783: IFFALSE 16797
16785: PUSH
16786: LD_VAR 0 3
16790: PPUSH
16791: CALL_OW 311
16795: NOT
16796: AND
16797: OR
16798: IFFALSE 16842
// begin SetUnitDisplayNumber ( i , 0 ) ;
16800: LD_VAR 0 3
16804: PPUSH
16805: LD_INT 0
16807: PPUSH
16808: CALL_OW 505
// SetTag ( i , 0 ) ;
16812: LD_VAR 0 3
16816: PPUSH
16817: LD_INT 0
16819: PPUSH
16820: CALL_OW 109
// scaners := scaners diff i ;
16824: LD_ADDR_VAR 0 6
16828: PUSH
16829: LD_VAR 0 6
16833: PUSH
16834: LD_VAR 0 3
16838: DIFF
16839: ST_TO_ADDR
// continue ;
16840: GO 16741
// end ; SetUnitDisplayNumber ( i , timer ) ;
16842: LD_VAR 0 3
16846: PPUSH
16847: LD_VAR 0 7
16851: PPUSH
16852: CALL_OW 505
// end ;
16856: GO 16741
16858: POP
16859: POP
// if not scaners then
16860: LD_VAR 0 6
16864: NOT
16865: IFFALSE 16869
// exit ;
16867: GO 16960
// timer := Dec ( timer ) ;
16869: LD_ADDR_VAR 0 7
16873: PUSH
16874: LD_VAR 0 7
16878: PPUSH
16879: CALL 72622 0 1
16883: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16884: LD_INT 35
16886: PPUSH
16887: CALL_OW 67
// until timer = 0 ;
16891: LD_VAR 0 7
16895: PUSH
16896: LD_INT 0
16898: EQUAL
16899: IFFALSE 16731
// if not scaners then
16901: LD_VAR 0 6
16905: NOT
16906: IFFALSE 16910
// exit ;
16908: GO 16960
// for i in scaners do
16910: LD_ADDR_VAR 0 3
16914: PUSH
16915: LD_VAR 0 6
16919: PUSH
16920: FOR_IN
16921: IFFALSE 16958
// begin SetUnitDisplayNumber ( i , 0 ) ;
16923: LD_VAR 0 3
16927: PPUSH
16928: LD_INT 0
16930: PPUSH
16931: CALL_OW 505
// SetTag ( i , 0 ) ;
16935: LD_VAR 0 3
16939: PPUSH
16940: LD_INT 0
16942: PPUSH
16943: CALL_OW 109
// RevealDetectorMine ( i ) ;
16947: LD_VAR 0 3
16951: PPUSH
16952: CALL 16215 0 1
// end ;
16956: GO 16920
16958: POP
16959: POP
// end ;
16960: LD_VAR 0 2
16964: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
16965: LD_INT 0
16967: PPUSH
// if p1 = mine_detector_mode then
16968: LD_VAR 0 2
16972: PUSH
16973: LD_INT 103
16975: EQUAL
16976: IFFALSE 16987
// DetectMine ( units ) ;
16978: LD_VAR 0 1
16982: PPUSH
16983: CALL 16513 0 1
// end ; end_of_file
16987: LD_VAR 0 7
16991: RET
// export globalGameSaveCounter ; every 0 0$1 do
16992: GO 16994
16994: DISABLE
// begin enable ;
16995: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
16996: LD_STRING updateTimer(
16998: PUSH
16999: LD_OWVAR 1
17003: STR
17004: PUSH
17005: LD_STRING );
17007: STR
17008: PPUSH
17009: CALL_OW 559
// end ;
17013: END
// every 0 0$1 do
17014: GO 17016
17016: DISABLE
// begin globalGameSaveCounter := 0 ;
17017: LD_ADDR_EXP 36
17021: PUSH
17022: LD_INT 0
17024: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
17025: LD_STRING setGameSaveCounter(0)
17027: PPUSH
17028: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
17032: LD_STRING initStreamRollete();
17034: PPUSH
17035: CALL_OW 559
// InitStreamMode ;
17039: CALL 18384 0 0
// DefineStreamItems ( false ) ;
17043: LD_INT 0
17045: PPUSH
17046: CALL 18848 0 1
// end ;
17050: END
// export function SOS_MapStart ( ) ; begin
17051: LD_INT 0
17053: PPUSH
// if streamModeActive then
17054: LD_EXP 37
17058: IFFALSE 17067
// DefineStreamItems ( true ) ;
17060: LD_INT 1
17062: PPUSH
17063: CALL 18848 0 1
// UpdateLuaVariables ( ) ;
17067: CALL 17084 0 0
// UpdateFactoryWaypoints ( ) ;
17071: CALL 31970 0 0
// UpdateWarehouseGatheringPoints ( ) ;
17075: CALL 32222 0 0
// end ;
17079: LD_VAR 0 1
17083: RET
// function UpdateLuaVariables ( ) ; begin
17084: LD_INT 0
17086: PPUSH
// if globalGameSaveCounter then
17087: LD_EXP 36
17091: IFFALSE 17125
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
17093: LD_ADDR_EXP 36
17097: PUSH
17098: LD_EXP 36
17102: PPUSH
17103: CALL 72600 0 1
17107: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17108: LD_STRING setGameSaveCounter(
17110: PUSH
17111: LD_EXP 36
17115: STR
17116: PUSH
17117: LD_STRING )
17119: STR
17120: PPUSH
17121: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
17125: LD_STRING setGameDifficulty(
17127: PUSH
17128: LD_OWVAR 67
17132: STR
17133: PUSH
17134: LD_STRING )
17136: STR
17137: PPUSH
17138: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
17142: LD_STRING displayDifficulty(
17144: PUSH
17145: LD_OWVAR 67
17149: STR
17150: PUSH
17151: LD_STRING )
17153: STR
17154: PPUSH
17155: CALL_OW 559
// end ;
17159: LD_VAR 0 1
17163: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17164: LD_INT 0
17166: PPUSH
// if p2 = stream_mode then
17167: LD_VAR 0 2
17171: PUSH
17172: LD_INT 100
17174: EQUAL
17175: IFFALSE 18178
// begin if not StreamModeActive then
17177: LD_EXP 37
17181: NOT
17182: IFFALSE 17192
// StreamModeActive := true ;
17184: LD_ADDR_EXP 37
17188: PUSH
17189: LD_INT 1
17191: ST_TO_ADDR
// if p3 = 0 then
17192: LD_VAR 0 3
17196: PUSH
17197: LD_INT 0
17199: EQUAL
17200: IFFALSE 17206
// InitStreamMode ;
17202: CALL 18384 0 0
// if p3 = 1 then
17206: LD_VAR 0 3
17210: PUSH
17211: LD_INT 1
17213: EQUAL
17214: IFFALSE 17224
// sRocket := true ;
17216: LD_ADDR_EXP 42
17220: PUSH
17221: LD_INT 1
17223: ST_TO_ADDR
// if p3 = 2 then
17224: LD_VAR 0 3
17228: PUSH
17229: LD_INT 2
17231: EQUAL
17232: IFFALSE 17242
// sSpeed := true ;
17234: LD_ADDR_EXP 41
17238: PUSH
17239: LD_INT 1
17241: ST_TO_ADDR
// if p3 = 3 then
17242: LD_VAR 0 3
17246: PUSH
17247: LD_INT 3
17249: EQUAL
17250: IFFALSE 17260
// sEngine := true ;
17252: LD_ADDR_EXP 43
17256: PUSH
17257: LD_INT 1
17259: ST_TO_ADDR
// if p3 = 4 then
17260: LD_VAR 0 3
17264: PUSH
17265: LD_INT 4
17267: EQUAL
17268: IFFALSE 17278
// sSpec := true ;
17270: LD_ADDR_EXP 40
17274: PUSH
17275: LD_INT 1
17277: ST_TO_ADDR
// if p3 = 5 then
17278: LD_VAR 0 3
17282: PUSH
17283: LD_INT 5
17285: EQUAL
17286: IFFALSE 17296
// sLevel := true ;
17288: LD_ADDR_EXP 44
17292: PUSH
17293: LD_INT 1
17295: ST_TO_ADDR
// if p3 = 6 then
17296: LD_VAR 0 3
17300: PUSH
17301: LD_INT 6
17303: EQUAL
17304: IFFALSE 17314
// sArmoury := true ;
17306: LD_ADDR_EXP 45
17310: PUSH
17311: LD_INT 1
17313: ST_TO_ADDR
// if p3 = 7 then
17314: LD_VAR 0 3
17318: PUSH
17319: LD_INT 7
17321: EQUAL
17322: IFFALSE 17332
// sRadar := true ;
17324: LD_ADDR_EXP 46
17328: PUSH
17329: LD_INT 1
17331: ST_TO_ADDR
// if p3 = 8 then
17332: LD_VAR 0 3
17336: PUSH
17337: LD_INT 8
17339: EQUAL
17340: IFFALSE 17350
// sBunker := true ;
17342: LD_ADDR_EXP 47
17346: PUSH
17347: LD_INT 1
17349: ST_TO_ADDR
// if p3 = 9 then
17350: LD_VAR 0 3
17354: PUSH
17355: LD_INT 9
17357: EQUAL
17358: IFFALSE 17368
// sHack := true ;
17360: LD_ADDR_EXP 48
17364: PUSH
17365: LD_INT 1
17367: ST_TO_ADDR
// if p3 = 10 then
17368: LD_VAR 0 3
17372: PUSH
17373: LD_INT 10
17375: EQUAL
17376: IFFALSE 17386
// sFire := true ;
17378: LD_ADDR_EXP 49
17382: PUSH
17383: LD_INT 1
17385: ST_TO_ADDR
// if p3 = 11 then
17386: LD_VAR 0 3
17390: PUSH
17391: LD_INT 11
17393: EQUAL
17394: IFFALSE 17404
// sRefresh := true ;
17396: LD_ADDR_EXP 50
17400: PUSH
17401: LD_INT 1
17403: ST_TO_ADDR
// if p3 = 12 then
17404: LD_VAR 0 3
17408: PUSH
17409: LD_INT 12
17411: EQUAL
17412: IFFALSE 17422
// sExp := true ;
17414: LD_ADDR_EXP 51
17418: PUSH
17419: LD_INT 1
17421: ST_TO_ADDR
// if p3 = 13 then
17422: LD_VAR 0 3
17426: PUSH
17427: LD_INT 13
17429: EQUAL
17430: IFFALSE 17440
// sDepot := true ;
17432: LD_ADDR_EXP 52
17436: PUSH
17437: LD_INT 1
17439: ST_TO_ADDR
// if p3 = 14 then
17440: LD_VAR 0 3
17444: PUSH
17445: LD_INT 14
17447: EQUAL
17448: IFFALSE 17458
// sFlag := true ;
17450: LD_ADDR_EXP 53
17454: PUSH
17455: LD_INT 1
17457: ST_TO_ADDR
// if p3 = 15 then
17458: LD_VAR 0 3
17462: PUSH
17463: LD_INT 15
17465: EQUAL
17466: IFFALSE 17476
// sKamikadze := true ;
17468: LD_ADDR_EXP 61
17472: PUSH
17473: LD_INT 1
17475: ST_TO_ADDR
// if p3 = 16 then
17476: LD_VAR 0 3
17480: PUSH
17481: LD_INT 16
17483: EQUAL
17484: IFFALSE 17494
// sTroll := true ;
17486: LD_ADDR_EXP 62
17490: PUSH
17491: LD_INT 1
17493: ST_TO_ADDR
// if p3 = 17 then
17494: LD_VAR 0 3
17498: PUSH
17499: LD_INT 17
17501: EQUAL
17502: IFFALSE 17512
// sSlow := true ;
17504: LD_ADDR_EXP 63
17508: PUSH
17509: LD_INT 1
17511: ST_TO_ADDR
// if p3 = 18 then
17512: LD_VAR 0 3
17516: PUSH
17517: LD_INT 18
17519: EQUAL
17520: IFFALSE 17530
// sLack := true ;
17522: LD_ADDR_EXP 64
17526: PUSH
17527: LD_INT 1
17529: ST_TO_ADDR
// if p3 = 19 then
17530: LD_VAR 0 3
17534: PUSH
17535: LD_INT 19
17537: EQUAL
17538: IFFALSE 17548
// sTank := true ;
17540: LD_ADDR_EXP 66
17544: PUSH
17545: LD_INT 1
17547: ST_TO_ADDR
// if p3 = 20 then
17548: LD_VAR 0 3
17552: PUSH
17553: LD_INT 20
17555: EQUAL
17556: IFFALSE 17566
// sRemote := true ;
17558: LD_ADDR_EXP 67
17562: PUSH
17563: LD_INT 1
17565: ST_TO_ADDR
// if p3 = 21 then
17566: LD_VAR 0 3
17570: PUSH
17571: LD_INT 21
17573: EQUAL
17574: IFFALSE 17584
// sPowell := true ;
17576: LD_ADDR_EXP 68
17580: PUSH
17581: LD_INT 1
17583: ST_TO_ADDR
// if p3 = 22 then
17584: LD_VAR 0 3
17588: PUSH
17589: LD_INT 22
17591: EQUAL
17592: IFFALSE 17602
// sTeleport := true ;
17594: LD_ADDR_EXP 71
17598: PUSH
17599: LD_INT 1
17601: ST_TO_ADDR
// if p3 = 23 then
17602: LD_VAR 0 3
17606: PUSH
17607: LD_INT 23
17609: EQUAL
17610: IFFALSE 17620
// sOilTower := true ;
17612: LD_ADDR_EXP 73
17616: PUSH
17617: LD_INT 1
17619: ST_TO_ADDR
// if p3 = 24 then
17620: LD_VAR 0 3
17624: PUSH
17625: LD_INT 24
17627: EQUAL
17628: IFFALSE 17638
// sShovel := true ;
17630: LD_ADDR_EXP 74
17634: PUSH
17635: LD_INT 1
17637: ST_TO_ADDR
// if p3 = 25 then
17638: LD_VAR 0 3
17642: PUSH
17643: LD_INT 25
17645: EQUAL
17646: IFFALSE 17656
// sSheik := true ;
17648: LD_ADDR_EXP 75
17652: PUSH
17653: LD_INT 1
17655: ST_TO_ADDR
// if p3 = 26 then
17656: LD_VAR 0 3
17660: PUSH
17661: LD_INT 26
17663: EQUAL
17664: IFFALSE 17674
// sEarthquake := true ;
17666: LD_ADDR_EXP 77
17670: PUSH
17671: LD_INT 1
17673: ST_TO_ADDR
// if p3 = 27 then
17674: LD_VAR 0 3
17678: PUSH
17679: LD_INT 27
17681: EQUAL
17682: IFFALSE 17692
// sAI := true ;
17684: LD_ADDR_EXP 78
17688: PUSH
17689: LD_INT 1
17691: ST_TO_ADDR
// if p3 = 28 then
17692: LD_VAR 0 3
17696: PUSH
17697: LD_INT 28
17699: EQUAL
17700: IFFALSE 17710
// sCargo := true ;
17702: LD_ADDR_EXP 81
17706: PUSH
17707: LD_INT 1
17709: ST_TO_ADDR
// if p3 = 29 then
17710: LD_VAR 0 3
17714: PUSH
17715: LD_INT 29
17717: EQUAL
17718: IFFALSE 17728
// sDLaser := true ;
17720: LD_ADDR_EXP 82
17724: PUSH
17725: LD_INT 1
17727: ST_TO_ADDR
// if p3 = 30 then
17728: LD_VAR 0 3
17732: PUSH
17733: LD_INT 30
17735: EQUAL
17736: IFFALSE 17746
// sExchange := true ;
17738: LD_ADDR_EXP 83
17742: PUSH
17743: LD_INT 1
17745: ST_TO_ADDR
// if p3 = 31 then
17746: LD_VAR 0 3
17750: PUSH
17751: LD_INT 31
17753: EQUAL
17754: IFFALSE 17764
// sFac := true ;
17756: LD_ADDR_EXP 84
17760: PUSH
17761: LD_INT 1
17763: ST_TO_ADDR
// if p3 = 32 then
17764: LD_VAR 0 3
17768: PUSH
17769: LD_INT 32
17771: EQUAL
17772: IFFALSE 17782
// sPower := true ;
17774: LD_ADDR_EXP 85
17778: PUSH
17779: LD_INT 1
17781: ST_TO_ADDR
// if p3 = 33 then
17782: LD_VAR 0 3
17786: PUSH
17787: LD_INT 33
17789: EQUAL
17790: IFFALSE 17800
// sRandom := true ;
17792: LD_ADDR_EXP 86
17796: PUSH
17797: LD_INT 1
17799: ST_TO_ADDR
// if p3 = 34 then
17800: LD_VAR 0 3
17804: PUSH
17805: LD_INT 34
17807: EQUAL
17808: IFFALSE 17818
// sShield := true ;
17810: LD_ADDR_EXP 87
17814: PUSH
17815: LD_INT 1
17817: ST_TO_ADDR
// if p3 = 35 then
17818: LD_VAR 0 3
17822: PUSH
17823: LD_INT 35
17825: EQUAL
17826: IFFALSE 17836
// sTime := true ;
17828: LD_ADDR_EXP 88
17832: PUSH
17833: LD_INT 1
17835: ST_TO_ADDR
// if p3 = 36 then
17836: LD_VAR 0 3
17840: PUSH
17841: LD_INT 36
17843: EQUAL
17844: IFFALSE 17854
// sTools := true ;
17846: LD_ADDR_EXP 89
17850: PUSH
17851: LD_INT 1
17853: ST_TO_ADDR
// if p3 = 101 then
17854: LD_VAR 0 3
17858: PUSH
17859: LD_INT 101
17861: EQUAL
17862: IFFALSE 17872
// sSold := true ;
17864: LD_ADDR_EXP 54
17868: PUSH
17869: LD_INT 1
17871: ST_TO_ADDR
// if p3 = 102 then
17872: LD_VAR 0 3
17876: PUSH
17877: LD_INT 102
17879: EQUAL
17880: IFFALSE 17890
// sDiff := true ;
17882: LD_ADDR_EXP 55
17886: PUSH
17887: LD_INT 1
17889: ST_TO_ADDR
// if p3 = 103 then
17890: LD_VAR 0 3
17894: PUSH
17895: LD_INT 103
17897: EQUAL
17898: IFFALSE 17908
// sFog := true ;
17900: LD_ADDR_EXP 58
17904: PUSH
17905: LD_INT 1
17907: ST_TO_ADDR
// if p3 = 104 then
17908: LD_VAR 0 3
17912: PUSH
17913: LD_INT 104
17915: EQUAL
17916: IFFALSE 17926
// sReset := true ;
17918: LD_ADDR_EXP 59
17922: PUSH
17923: LD_INT 1
17925: ST_TO_ADDR
// if p3 = 105 then
17926: LD_VAR 0 3
17930: PUSH
17931: LD_INT 105
17933: EQUAL
17934: IFFALSE 17944
// sSun := true ;
17936: LD_ADDR_EXP 60
17940: PUSH
17941: LD_INT 1
17943: ST_TO_ADDR
// if p3 = 106 then
17944: LD_VAR 0 3
17948: PUSH
17949: LD_INT 106
17951: EQUAL
17952: IFFALSE 17962
// sTiger := true ;
17954: LD_ADDR_EXP 56
17958: PUSH
17959: LD_INT 1
17961: ST_TO_ADDR
// if p3 = 107 then
17962: LD_VAR 0 3
17966: PUSH
17967: LD_INT 107
17969: EQUAL
17970: IFFALSE 17980
// sBomb := true ;
17972: LD_ADDR_EXP 57
17976: PUSH
17977: LD_INT 1
17979: ST_TO_ADDR
// if p3 = 108 then
17980: LD_VAR 0 3
17984: PUSH
17985: LD_INT 108
17987: EQUAL
17988: IFFALSE 17998
// sWound := true ;
17990: LD_ADDR_EXP 65
17994: PUSH
17995: LD_INT 1
17997: ST_TO_ADDR
// if p3 = 109 then
17998: LD_VAR 0 3
18002: PUSH
18003: LD_INT 109
18005: EQUAL
18006: IFFALSE 18016
// sBetray := true ;
18008: LD_ADDR_EXP 69
18012: PUSH
18013: LD_INT 1
18015: ST_TO_ADDR
// if p3 = 110 then
18016: LD_VAR 0 3
18020: PUSH
18021: LD_INT 110
18023: EQUAL
18024: IFFALSE 18034
// sContamin := true ;
18026: LD_ADDR_EXP 70
18030: PUSH
18031: LD_INT 1
18033: ST_TO_ADDR
// if p3 = 111 then
18034: LD_VAR 0 3
18038: PUSH
18039: LD_INT 111
18041: EQUAL
18042: IFFALSE 18052
// sOil := true ;
18044: LD_ADDR_EXP 72
18048: PUSH
18049: LD_INT 1
18051: ST_TO_ADDR
// if p3 = 112 then
18052: LD_VAR 0 3
18056: PUSH
18057: LD_INT 112
18059: EQUAL
18060: IFFALSE 18070
// sStu := true ;
18062: LD_ADDR_EXP 76
18066: PUSH
18067: LD_INT 1
18069: ST_TO_ADDR
// if p3 = 113 then
18070: LD_VAR 0 3
18074: PUSH
18075: LD_INT 113
18077: EQUAL
18078: IFFALSE 18088
// sBazooka := true ;
18080: LD_ADDR_EXP 79
18084: PUSH
18085: LD_INT 1
18087: ST_TO_ADDR
// if p3 = 114 then
18088: LD_VAR 0 3
18092: PUSH
18093: LD_INT 114
18095: EQUAL
18096: IFFALSE 18106
// sMortar := true ;
18098: LD_ADDR_EXP 80
18102: PUSH
18103: LD_INT 1
18105: ST_TO_ADDR
// if p3 = 115 then
18106: LD_VAR 0 3
18110: PUSH
18111: LD_INT 115
18113: EQUAL
18114: IFFALSE 18124
// sRanger := true ;
18116: LD_ADDR_EXP 90
18120: PUSH
18121: LD_INT 1
18123: ST_TO_ADDR
// if p3 = 116 then
18124: LD_VAR 0 3
18128: PUSH
18129: LD_INT 116
18131: EQUAL
18132: IFFALSE 18142
// sComputer := true ;
18134: LD_ADDR_EXP 91
18138: PUSH
18139: LD_INT 1
18141: ST_TO_ADDR
// if p3 = 117 then
18142: LD_VAR 0 3
18146: PUSH
18147: LD_INT 117
18149: EQUAL
18150: IFFALSE 18160
// s30 := true ;
18152: LD_ADDR_EXP 92
18156: PUSH
18157: LD_INT 1
18159: ST_TO_ADDR
// if p3 = 118 then
18160: LD_VAR 0 3
18164: PUSH
18165: LD_INT 118
18167: EQUAL
18168: IFFALSE 18178
// s60 := true ;
18170: LD_ADDR_EXP 93
18174: PUSH
18175: LD_INT 1
18177: ST_TO_ADDR
// end ; if p2 = hack_mode then
18178: LD_VAR 0 2
18182: PUSH
18183: LD_INT 101
18185: EQUAL
18186: IFFALSE 18314
// begin case p3 of 1 :
18188: LD_VAR 0 3
18192: PUSH
18193: LD_INT 1
18195: DOUBLE
18196: EQUAL
18197: IFTRUE 18201
18199: GO 18208
18201: POP
// hHackUnlimitedResources ; 2 :
18202: CALL 30577 0 0
18206: GO 18314
18208: LD_INT 2
18210: DOUBLE
18211: EQUAL
18212: IFTRUE 18216
18214: GO 18223
18216: POP
// hHackSetLevel10 ; 3 :
18217: CALL 30710 0 0
18221: GO 18314
18223: LD_INT 3
18225: DOUBLE
18226: EQUAL
18227: IFTRUE 18231
18229: GO 18238
18231: POP
// hHackSetLevel10YourUnits ; 4 :
18232: CALL 30795 0 0
18236: GO 18314
18238: LD_INT 4
18240: DOUBLE
18241: EQUAL
18242: IFTRUE 18246
18244: GO 18253
18246: POP
// hHackInvincible ; 5 :
18247: CALL 31243 0 0
18251: GO 18314
18253: LD_INT 5
18255: DOUBLE
18256: EQUAL
18257: IFTRUE 18261
18259: GO 18268
18261: POP
// hHackInvisible ; 6 :
18262: CALL 31354 0 0
18266: GO 18314
18268: LD_INT 6
18270: DOUBLE
18271: EQUAL
18272: IFTRUE 18276
18274: GO 18283
18276: POP
// hHackChangeYourSide ; 7 :
18277: CALL 31411 0 0
18281: GO 18314
18283: LD_INT 7
18285: DOUBLE
18286: EQUAL
18287: IFTRUE 18291
18289: GO 18298
18291: POP
// hHackChangeUnitSide ; 8 :
18292: CALL 31453 0 0
18296: GO 18314
18298: LD_INT 8
18300: DOUBLE
18301: EQUAL
18302: IFTRUE 18306
18304: GO 18313
18306: POP
// hHackFog ; end ;
18307: CALL 31554 0 0
18311: GO 18314
18313: POP
// end ; if p2 = game_save_mode then
18314: LD_VAR 0 2
18318: PUSH
18319: LD_INT 102
18321: EQUAL
18322: IFFALSE 18379
// begin if p3 = 1 then
18324: LD_VAR 0 3
18328: PUSH
18329: LD_INT 1
18331: EQUAL
18332: IFFALSE 18344
// globalGameSaveCounter := p4 ;
18334: LD_ADDR_EXP 36
18338: PUSH
18339: LD_VAR 0 4
18343: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
18344: LD_VAR 0 3
18348: PUSH
18349: LD_INT 2
18351: EQUAL
18352: IFFALSE 18360
18354: PUSH
18355: LD_EXP 36
18359: AND
18360: IFFALSE 18379
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
18362: LD_STRING setGameSaveCounter(
18364: PUSH
18365: LD_EXP 36
18369: STR
18370: PUSH
18371: LD_STRING )
18373: STR
18374: PPUSH
18375: CALL_OW 559
// end ; end ;
18379: LD_VAR 0 7
18383: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
18384: LD_INT 0
18386: PPUSH
// streamModeActive := false ;
18387: LD_ADDR_EXP 37
18391: PUSH
18392: LD_INT 0
18394: ST_TO_ADDR
// normalCounter := 36 ;
18395: LD_ADDR_EXP 38
18399: PUSH
18400: LD_INT 36
18402: ST_TO_ADDR
// hardcoreCounter := 18 ;
18403: LD_ADDR_EXP 39
18407: PUSH
18408: LD_INT 18
18410: ST_TO_ADDR
// sRocket := false ;
18411: LD_ADDR_EXP 42
18415: PUSH
18416: LD_INT 0
18418: ST_TO_ADDR
// sSpeed := false ;
18419: LD_ADDR_EXP 41
18423: PUSH
18424: LD_INT 0
18426: ST_TO_ADDR
// sEngine := false ;
18427: LD_ADDR_EXP 43
18431: PUSH
18432: LD_INT 0
18434: ST_TO_ADDR
// sSpec := false ;
18435: LD_ADDR_EXP 40
18439: PUSH
18440: LD_INT 0
18442: ST_TO_ADDR
// sLevel := false ;
18443: LD_ADDR_EXP 44
18447: PUSH
18448: LD_INT 0
18450: ST_TO_ADDR
// sArmoury := false ;
18451: LD_ADDR_EXP 45
18455: PUSH
18456: LD_INT 0
18458: ST_TO_ADDR
// sRadar := false ;
18459: LD_ADDR_EXP 46
18463: PUSH
18464: LD_INT 0
18466: ST_TO_ADDR
// sBunker := false ;
18467: LD_ADDR_EXP 47
18471: PUSH
18472: LD_INT 0
18474: ST_TO_ADDR
// sHack := false ;
18475: LD_ADDR_EXP 48
18479: PUSH
18480: LD_INT 0
18482: ST_TO_ADDR
// sFire := false ;
18483: LD_ADDR_EXP 49
18487: PUSH
18488: LD_INT 0
18490: ST_TO_ADDR
// sRefresh := false ;
18491: LD_ADDR_EXP 50
18495: PUSH
18496: LD_INT 0
18498: ST_TO_ADDR
// sExp := false ;
18499: LD_ADDR_EXP 51
18503: PUSH
18504: LD_INT 0
18506: ST_TO_ADDR
// sDepot := false ;
18507: LD_ADDR_EXP 52
18511: PUSH
18512: LD_INT 0
18514: ST_TO_ADDR
// sFlag := false ;
18515: LD_ADDR_EXP 53
18519: PUSH
18520: LD_INT 0
18522: ST_TO_ADDR
// sKamikadze := false ;
18523: LD_ADDR_EXP 61
18527: PUSH
18528: LD_INT 0
18530: ST_TO_ADDR
// sTroll := false ;
18531: LD_ADDR_EXP 62
18535: PUSH
18536: LD_INT 0
18538: ST_TO_ADDR
// sSlow := false ;
18539: LD_ADDR_EXP 63
18543: PUSH
18544: LD_INT 0
18546: ST_TO_ADDR
// sLack := false ;
18547: LD_ADDR_EXP 64
18551: PUSH
18552: LD_INT 0
18554: ST_TO_ADDR
// sTank := false ;
18555: LD_ADDR_EXP 66
18559: PUSH
18560: LD_INT 0
18562: ST_TO_ADDR
// sRemote := false ;
18563: LD_ADDR_EXP 67
18567: PUSH
18568: LD_INT 0
18570: ST_TO_ADDR
// sPowell := false ;
18571: LD_ADDR_EXP 68
18575: PUSH
18576: LD_INT 0
18578: ST_TO_ADDR
// sTeleport := false ;
18579: LD_ADDR_EXP 71
18583: PUSH
18584: LD_INT 0
18586: ST_TO_ADDR
// sOilTower := false ;
18587: LD_ADDR_EXP 73
18591: PUSH
18592: LD_INT 0
18594: ST_TO_ADDR
// sShovel := false ;
18595: LD_ADDR_EXP 74
18599: PUSH
18600: LD_INT 0
18602: ST_TO_ADDR
// sSheik := false ;
18603: LD_ADDR_EXP 75
18607: PUSH
18608: LD_INT 0
18610: ST_TO_ADDR
// sEarthquake := false ;
18611: LD_ADDR_EXP 77
18615: PUSH
18616: LD_INT 0
18618: ST_TO_ADDR
// sAI := false ;
18619: LD_ADDR_EXP 78
18623: PUSH
18624: LD_INT 0
18626: ST_TO_ADDR
// sCargo := false ;
18627: LD_ADDR_EXP 81
18631: PUSH
18632: LD_INT 0
18634: ST_TO_ADDR
// sDLaser := false ;
18635: LD_ADDR_EXP 82
18639: PUSH
18640: LD_INT 0
18642: ST_TO_ADDR
// sExchange := false ;
18643: LD_ADDR_EXP 83
18647: PUSH
18648: LD_INT 0
18650: ST_TO_ADDR
// sFac := false ;
18651: LD_ADDR_EXP 84
18655: PUSH
18656: LD_INT 0
18658: ST_TO_ADDR
// sPower := false ;
18659: LD_ADDR_EXP 85
18663: PUSH
18664: LD_INT 0
18666: ST_TO_ADDR
// sRandom := false ;
18667: LD_ADDR_EXP 86
18671: PUSH
18672: LD_INT 0
18674: ST_TO_ADDR
// sShield := false ;
18675: LD_ADDR_EXP 87
18679: PUSH
18680: LD_INT 0
18682: ST_TO_ADDR
// sTime := false ;
18683: LD_ADDR_EXP 88
18687: PUSH
18688: LD_INT 0
18690: ST_TO_ADDR
// sTools := false ;
18691: LD_ADDR_EXP 89
18695: PUSH
18696: LD_INT 0
18698: ST_TO_ADDR
// sSold := false ;
18699: LD_ADDR_EXP 54
18703: PUSH
18704: LD_INT 0
18706: ST_TO_ADDR
// sDiff := false ;
18707: LD_ADDR_EXP 55
18711: PUSH
18712: LD_INT 0
18714: ST_TO_ADDR
// sFog := false ;
18715: LD_ADDR_EXP 58
18719: PUSH
18720: LD_INT 0
18722: ST_TO_ADDR
// sReset := false ;
18723: LD_ADDR_EXP 59
18727: PUSH
18728: LD_INT 0
18730: ST_TO_ADDR
// sSun := false ;
18731: LD_ADDR_EXP 60
18735: PUSH
18736: LD_INT 0
18738: ST_TO_ADDR
// sTiger := false ;
18739: LD_ADDR_EXP 56
18743: PUSH
18744: LD_INT 0
18746: ST_TO_ADDR
// sBomb := false ;
18747: LD_ADDR_EXP 57
18751: PUSH
18752: LD_INT 0
18754: ST_TO_ADDR
// sWound := false ;
18755: LD_ADDR_EXP 65
18759: PUSH
18760: LD_INT 0
18762: ST_TO_ADDR
// sBetray := false ;
18763: LD_ADDR_EXP 69
18767: PUSH
18768: LD_INT 0
18770: ST_TO_ADDR
// sContamin := false ;
18771: LD_ADDR_EXP 70
18775: PUSH
18776: LD_INT 0
18778: ST_TO_ADDR
// sOil := false ;
18779: LD_ADDR_EXP 72
18783: PUSH
18784: LD_INT 0
18786: ST_TO_ADDR
// sStu := false ;
18787: LD_ADDR_EXP 76
18791: PUSH
18792: LD_INT 0
18794: ST_TO_ADDR
// sBazooka := false ;
18795: LD_ADDR_EXP 79
18799: PUSH
18800: LD_INT 0
18802: ST_TO_ADDR
// sMortar := false ;
18803: LD_ADDR_EXP 80
18807: PUSH
18808: LD_INT 0
18810: ST_TO_ADDR
// sRanger := false ;
18811: LD_ADDR_EXP 90
18815: PUSH
18816: LD_INT 0
18818: ST_TO_ADDR
// sComputer := false ;
18819: LD_ADDR_EXP 91
18823: PUSH
18824: LD_INT 0
18826: ST_TO_ADDR
// s30 := false ;
18827: LD_ADDR_EXP 92
18831: PUSH
18832: LD_INT 0
18834: ST_TO_ADDR
// s60 := false ;
18835: LD_ADDR_EXP 93
18839: PUSH
18840: LD_INT 0
18842: ST_TO_ADDR
// end ;
18843: LD_VAR 0 1
18847: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
18848: LD_INT 0
18850: PPUSH
18851: PPUSH
18852: PPUSH
18853: PPUSH
18854: PPUSH
18855: PPUSH
18856: PPUSH
// result := [ ] ;
18857: LD_ADDR_VAR 0 2
18861: PUSH
18862: EMPTY
18863: ST_TO_ADDR
// if campaign_id = 1 then
18864: LD_OWVAR 69
18868: PUSH
18869: LD_INT 1
18871: EQUAL
18872: IFFALSE 22038
// begin case mission_number of 1 :
18874: LD_OWVAR 70
18878: PUSH
18879: LD_INT 1
18881: DOUBLE
18882: EQUAL
18883: IFTRUE 18887
18885: GO 18963
18887: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
18888: LD_ADDR_VAR 0 2
18892: PUSH
18893: LD_INT 2
18895: PUSH
18896: LD_INT 4
18898: PUSH
18899: LD_INT 11
18901: PUSH
18902: LD_INT 12
18904: PUSH
18905: LD_INT 15
18907: PUSH
18908: LD_INT 16
18910: PUSH
18911: LD_INT 22
18913: PUSH
18914: LD_INT 23
18916: PUSH
18917: LD_INT 26
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: PUSH
18931: LD_INT 101
18933: PUSH
18934: LD_INT 102
18936: PUSH
18937: LD_INT 106
18939: PUSH
18940: LD_INT 116
18942: PUSH
18943: LD_INT 117
18945: PUSH
18946: LD_INT 118
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: ST_TO_ADDR
18961: GO 22036
18963: LD_INT 2
18965: DOUBLE
18966: EQUAL
18967: IFTRUE 18971
18969: GO 19055
18971: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
18972: LD_ADDR_VAR 0 2
18976: PUSH
18977: LD_INT 2
18979: PUSH
18980: LD_INT 4
18982: PUSH
18983: LD_INT 11
18985: PUSH
18986: LD_INT 12
18988: PUSH
18989: LD_INT 15
18991: PUSH
18992: LD_INT 16
18994: PUSH
18995: LD_INT 22
18997: PUSH
18998: LD_INT 23
19000: PUSH
19001: LD_INT 26
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: PUSH
19015: LD_INT 101
19017: PUSH
19018: LD_INT 102
19020: PUSH
19021: LD_INT 105
19023: PUSH
19024: LD_INT 106
19026: PUSH
19027: LD_INT 108
19029: PUSH
19030: LD_INT 116
19032: PUSH
19033: LD_INT 117
19035: PUSH
19036: LD_INT 118
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: ST_TO_ADDR
19053: GO 22036
19055: LD_INT 3
19057: DOUBLE
19058: EQUAL
19059: IFTRUE 19063
19061: GO 19151
19063: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
19064: LD_ADDR_VAR 0 2
19068: PUSH
19069: LD_INT 2
19071: PUSH
19072: LD_INT 4
19074: PUSH
19075: LD_INT 5
19077: PUSH
19078: LD_INT 11
19080: PUSH
19081: LD_INT 12
19083: PUSH
19084: LD_INT 15
19086: PUSH
19087: LD_INT 16
19089: PUSH
19090: LD_INT 22
19092: PUSH
19093: LD_INT 26
19095: PUSH
19096: LD_INT 36
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: PUSH
19111: LD_INT 101
19113: PUSH
19114: LD_INT 102
19116: PUSH
19117: LD_INT 105
19119: PUSH
19120: LD_INT 106
19122: PUSH
19123: LD_INT 108
19125: PUSH
19126: LD_INT 116
19128: PUSH
19129: LD_INT 117
19131: PUSH
19132: LD_INT 118
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: ST_TO_ADDR
19149: GO 22036
19151: LD_INT 4
19153: DOUBLE
19154: EQUAL
19155: IFTRUE 19159
19157: GO 19255
19159: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
19160: LD_ADDR_VAR 0 2
19164: PUSH
19165: LD_INT 2
19167: PUSH
19168: LD_INT 4
19170: PUSH
19171: LD_INT 5
19173: PUSH
19174: LD_INT 8
19176: PUSH
19177: LD_INT 11
19179: PUSH
19180: LD_INT 12
19182: PUSH
19183: LD_INT 15
19185: PUSH
19186: LD_INT 16
19188: PUSH
19189: LD_INT 22
19191: PUSH
19192: LD_INT 23
19194: PUSH
19195: LD_INT 26
19197: PUSH
19198: LD_INT 36
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: PUSH
19215: LD_INT 101
19217: PUSH
19218: LD_INT 102
19220: PUSH
19221: LD_INT 105
19223: PUSH
19224: LD_INT 106
19226: PUSH
19227: LD_INT 108
19229: PUSH
19230: LD_INT 116
19232: PUSH
19233: LD_INT 117
19235: PUSH
19236: LD_INT 118
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: ST_TO_ADDR
19253: GO 22036
19255: LD_INT 5
19257: DOUBLE
19258: EQUAL
19259: IFTRUE 19263
19261: GO 19375
19263: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
19264: LD_ADDR_VAR 0 2
19268: PUSH
19269: LD_INT 2
19271: PUSH
19272: LD_INT 4
19274: PUSH
19275: LD_INT 5
19277: PUSH
19278: LD_INT 6
19280: PUSH
19281: LD_INT 8
19283: PUSH
19284: LD_INT 11
19286: PUSH
19287: LD_INT 12
19289: PUSH
19290: LD_INT 15
19292: PUSH
19293: LD_INT 16
19295: PUSH
19296: LD_INT 22
19298: PUSH
19299: LD_INT 23
19301: PUSH
19302: LD_INT 25
19304: PUSH
19305: LD_INT 26
19307: PUSH
19308: LD_INT 36
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: PUSH
19327: LD_INT 101
19329: PUSH
19330: LD_INT 102
19332: PUSH
19333: LD_INT 105
19335: PUSH
19336: LD_INT 106
19338: PUSH
19339: LD_INT 108
19341: PUSH
19342: LD_INT 109
19344: PUSH
19345: LD_INT 112
19347: PUSH
19348: LD_INT 116
19350: PUSH
19351: LD_INT 117
19353: PUSH
19354: LD_INT 118
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: ST_TO_ADDR
19373: GO 22036
19375: LD_INT 6
19377: DOUBLE
19378: EQUAL
19379: IFTRUE 19383
19381: GO 19515
19383: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
19384: LD_ADDR_VAR 0 2
19388: PUSH
19389: LD_INT 2
19391: PUSH
19392: LD_INT 4
19394: PUSH
19395: LD_INT 5
19397: PUSH
19398: LD_INT 6
19400: PUSH
19401: LD_INT 8
19403: PUSH
19404: LD_INT 11
19406: PUSH
19407: LD_INT 12
19409: PUSH
19410: LD_INT 15
19412: PUSH
19413: LD_INT 16
19415: PUSH
19416: LD_INT 20
19418: PUSH
19419: LD_INT 21
19421: PUSH
19422: LD_INT 22
19424: PUSH
19425: LD_INT 23
19427: PUSH
19428: LD_INT 25
19430: PUSH
19431: LD_INT 26
19433: PUSH
19434: LD_INT 30
19436: PUSH
19437: LD_INT 31
19439: PUSH
19440: LD_INT 32
19442: PUSH
19443: LD_INT 36
19445: PUSH
19446: EMPTY
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 101
19469: PUSH
19470: LD_INT 102
19472: PUSH
19473: LD_INT 105
19475: PUSH
19476: LD_INT 106
19478: PUSH
19479: LD_INT 108
19481: PUSH
19482: LD_INT 109
19484: PUSH
19485: LD_INT 112
19487: PUSH
19488: LD_INT 116
19490: PUSH
19491: LD_INT 117
19493: PUSH
19494: LD_INT 118
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: ST_TO_ADDR
19513: GO 22036
19515: LD_INT 7
19517: DOUBLE
19518: EQUAL
19519: IFTRUE 19523
19521: GO 19635
19523: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
19524: LD_ADDR_VAR 0 2
19528: PUSH
19529: LD_INT 2
19531: PUSH
19532: LD_INT 4
19534: PUSH
19535: LD_INT 5
19537: PUSH
19538: LD_INT 7
19540: PUSH
19541: LD_INT 11
19543: PUSH
19544: LD_INT 12
19546: PUSH
19547: LD_INT 15
19549: PUSH
19550: LD_INT 16
19552: PUSH
19553: LD_INT 20
19555: PUSH
19556: LD_INT 21
19558: PUSH
19559: LD_INT 22
19561: PUSH
19562: LD_INT 23
19564: PUSH
19565: LD_INT 25
19567: PUSH
19568: LD_INT 26
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: PUSH
19587: LD_INT 101
19589: PUSH
19590: LD_INT 102
19592: PUSH
19593: LD_INT 103
19595: PUSH
19596: LD_INT 105
19598: PUSH
19599: LD_INT 106
19601: PUSH
19602: LD_INT 108
19604: PUSH
19605: LD_INT 112
19607: PUSH
19608: LD_INT 116
19610: PUSH
19611: LD_INT 117
19613: PUSH
19614: LD_INT 118
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: ST_TO_ADDR
19633: GO 22036
19635: LD_INT 8
19637: DOUBLE
19638: EQUAL
19639: IFTRUE 19643
19641: GO 19783
19643: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
19644: LD_ADDR_VAR 0 2
19648: PUSH
19649: LD_INT 2
19651: PUSH
19652: LD_INT 4
19654: PUSH
19655: LD_INT 5
19657: PUSH
19658: LD_INT 6
19660: PUSH
19661: LD_INT 7
19663: PUSH
19664: LD_INT 8
19666: PUSH
19667: LD_INT 11
19669: PUSH
19670: LD_INT 12
19672: PUSH
19673: LD_INT 15
19675: PUSH
19676: LD_INT 16
19678: PUSH
19679: LD_INT 20
19681: PUSH
19682: LD_INT 21
19684: PUSH
19685: LD_INT 22
19687: PUSH
19688: LD_INT 23
19690: PUSH
19691: LD_INT 25
19693: PUSH
19694: LD_INT 26
19696: PUSH
19697: LD_INT 30
19699: PUSH
19700: LD_INT 31
19702: PUSH
19703: LD_INT 32
19705: PUSH
19706: LD_INT 36
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: PUSH
19731: LD_INT 101
19733: PUSH
19734: LD_INT 102
19736: PUSH
19737: LD_INT 103
19739: PUSH
19740: LD_INT 105
19742: PUSH
19743: LD_INT 106
19745: PUSH
19746: LD_INT 108
19748: PUSH
19749: LD_INT 109
19751: PUSH
19752: LD_INT 112
19754: PUSH
19755: LD_INT 116
19757: PUSH
19758: LD_INT 117
19760: PUSH
19761: LD_INT 118
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: ST_TO_ADDR
19781: GO 22036
19783: LD_INT 9
19785: DOUBLE
19786: EQUAL
19787: IFTRUE 19791
19789: GO 19939
19791: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
19792: LD_ADDR_VAR 0 2
19796: PUSH
19797: LD_INT 2
19799: PUSH
19800: LD_INT 4
19802: PUSH
19803: LD_INT 5
19805: PUSH
19806: LD_INT 6
19808: PUSH
19809: LD_INT 7
19811: PUSH
19812: LD_INT 8
19814: PUSH
19815: LD_INT 11
19817: PUSH
19818: LD_INT 12
19820: PUSH
19821: LD_INT 15
19823: PUSH
19824: LD_INT 16
19826: PUSH
19827: LD_INT 20
19829: PUSH
19830: LD_INT 21
19832: PUSH
19833: LD_INT 22
19835: PUSH
19836: LD_INT 23
19838: PUSH
19839: LD_INT 25
19841: PUSH
19842: LD_INT 26
19844: PUSH
19845: LD_INT 28
19847: PUSH
19848: LD_INT 30
19850: PUSH
19851: LD_INT 31
19853: PUSH
19854: LD_INT 32
19856: PUSH
19857: LD_INT 36
19859: PUSH
19860: EMPTY
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: PUSH
19883: LD_INT 101
19885: PUSH
19886: LD_INT 102
19888: PUSH
19889: LD_INT 103
19891: PUSH
19892: LD_INT 105
19894: PUSH
19895: LD_INT 106
19897: PUSH
19898: LD_INT 108
19900: PUSH
19901: LD_INT 109
19903: PUSH
19904: LD_INT 112
19906: PUSH
19907: LD_INT 114
19909: PUSH
19910: LD_INT 116
19912: PUSH
19913: LD_INT 117
19915: PUSH
19916: LD_INT 118
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: ST_TO_ADDR
19937: GO 22036
19939: LD_INT 10
19941: DOUBLE
19942: EQUAL
19943: IFTRUE 19947
19945: GO 20143
19947: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
19948: LD_ADDR_VAR 0 2
19952: PUSH
19953: LD_INT 2
19955: PUSH
19956: LD_INT 4
19958: PUSH
19959: LD_INT 5
19961: PUSH
19962: LD_INT 6
19964: PUSH
19965: LD_INT 7
19967: PUSH
19968: LD_INT 8
19970: PUSH
19971: LD_INT 9
19973: PUSH
19974: LD_INT 10
19976: PUSH
19977: LD_INT 11
19979: PUSH
19980: LD_INT 12
19982: PUSH
19983: LD_INT 13
19985: PUSH
19986: LD_INT 14
19988: PUSH
19989: LD_INT 15
19991: PUSH
19992: LD_INT 16
19994: PUSH
19995: LD_INT 17
19997: PUSH
19998: LD_INT 18
20000: PUSH
20001: LD_INT 19
20003: PUSH
20004: LD_INT 20
20006: PUSH
20007: LD_INT 21
20009: PUSH
20010: LD_INT 22
20012: PUSH
20013: LD_INT 23
20015: PUSH
20016: LD_INT 24
20018: PUSH
20019: LD_INT 25
20021: PUSH
20022: LD_INT 26
20024: PUSH
20025: LD_INT 28
20027: PUSH
20028: LD_INT 30
20030: PUSH
20031: LD_INT 31
20033: PUSH
20034: LD_INT 32
20036: PUSH
20037: LD_INT 36
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: PUSH
20071: LD_INT 101
20073: PUSH
20074: LD_INT 102
20076: PUSH
20077: LD_INT 103
20079: PUSH
20080: LD_INT 104
20082: PUSH
20083: LD_INT 105
20085: PUSH
20086: LD_INT 106
20088: PUSH
20089: LD_INT 107
20091: PUSH
20092: LD_INT 108
20094: PUSH
20095: LD_INT 109
20097: PUSH
20098: LD_INT 110
20100: PUSH
20101: LD_INT 111
20103: PUSH
20104: LD_INT 112
20106: PUSH
20107: LD_INT 114
20109: PUSH
20110: LD_INT 116
20112: PUSH
20113: LD_INT 117
20115: PUSH
20116: LD_INT 118
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: ST_TO_ADDR
20141: GO 22036
20143: LD_INT 11
20145: DOUBLE
20146: EQUAL
20147: IFTRUE 20151
20149: GO 20355
20151: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
20152: LD_ADDR_VAR 0 2
20156: PUSH
20157: LD_INT 2
20159: PUSH
20160: LD_INT 3
20162: PUSH
20163: LD_INT 4
20165: PUSH
20166: LD_INT 5
20168: PUSH
20169: LD_INT 6
20171: PUSH
20172: LD_INT 7
20174: PUSH
20175: LD_INT 8
20177: PUSH
20178: LD_INT 9
20180: PUSH
20181: LD_INT 10
20183: PUSH
20184: LD_INT 11
20186: PUSH
20187: LD_INT 12
20189: PUSH
20190: LD_INT 13
20192: PUSH
20193: LD_INT 14
20195: PUSH
20196: LD_INT 15
20198: PUSH
20199: LD_INT 16
20201: PUSH
20202: LD_INT 17
20204: PUSH
20205: LD_INT 18
20207: PUSH
20208: LD_INT 19
20210: PUSH
20211: LD_INT 20
20213: PUSH
20214: LD_INT 21
20216: PUSH
20217: LD_INT 22
20219: PUSH
20220: LD_INT 23
20222: PUSH
20223: LD_INT 24
20225: PUSH
20226: LD_INT 25
20228: PUSH
20229: LD_INT 26
20231: PUSH
20232: LD_INT 28
20234: PUSH
20235: LD_INT 30
20237: PUSH
20238: LD_INT 31
20240: PUSH
20241: LD_INT 32
20243: PUSH
20244: LD_INT 34
20246: PUSH
20247: LD_INT 36
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: PUSH
20283: LD_INT 101
20285: PUSH
20286: LD_INT 102
20288: PUSH
20289: LD_INT 103
20291: PUSH
20292: LD_INT 104
20294: PUSH
20295: LD_INT 105
20297: PUSH
20298: LD_INT 106
20300: PUSH
20301: LD_INT 107
20303: PUSH
20304: LD_INT 108
20306: PUSH
20307: LD_INT 109
20309: PUSH
20310: LD_INT 110
20312: PUSH
20313: LD_INT 111
20315: PUSH
20316: LD_INT 112
20318: PUSH
20319: LD_INT 114
20321: PUSH
20322: LD_INT 116
20324: PUSH
20325: LD_INT 117
20327: PUSH
20328: LD_INT 118
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: LIST
20339: LIST
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: ST_TO_ADDR
20353: GO 22036
20355: LD_INT 12
20357: DOUBLE
20358: EQUAL
20359: IFTRUE 20363
20361: GO 20583
20363: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
20364: LD_ADDR_VAR 0 2
20368: PUSH
20369: LD_INT 1
20371: PUSH
20372: LD_INT 2
20374: PUSH
20375: LD_INT 3
20377: PUSH
20378: LD_INT 4
20380: PUSH
20381: LD_INT 5
20383: PUSH
20384: LD_INT 6
20386: PUSH
20387: LD_INT 7
20389: PUSH
20390: LD_INT 8
20392: PUSH
20393: LD_INT 9
20395: PUSH
20396: LD_INT 10
20398: PUSH
20399: LD_INT 11
20401: PUSH
20402: LD_INT 12
20404: PUSH
20405: LD_INT 13
20407: PUSH
20408: LD_INT 14
20410: PUSH
20411: LD_INT 15
20413: PUSH
20414: LD_INT 16
20416: PUSH
20417: LD_INT 17
20419: PUSH
20420: LD_INT 18
20422: PUSH
20423: LD_INT 19
20425: PUSH
20426: LD_INT 20
20428: PUSH
20429: LD_INT 21
20431: PUSH
20432: LD_INT 22
20434: PUSH
20435: LD_INT 23
20437: PUSH
20438: LD_INT 24
20440: PUSH
20441: LD_INT 25
20443: PUSH
20444: LD_INT 26
20446: PUSH
20447: LD_INT 27
20449: PUSH
20450: LD_INT 28
20452: PUSH
20453: LD_INT 30
20455: PUSH
20456: LD_INT 31
20458: PUSH
20459: LD_INT 32
20461: PUSH
20462: LD_INT 33
20464: PUSH
20465: LD_INT 34
20467: PUSH
20468: LD_INT 36
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: PUSH
20507: LD_INT 101
20509: PUSH
20510: LD_INT 102
20512: PUSH
20513: LD_INT 103
20515: PUSH
20516: LD_INT 104
20518: PUSH
20519: LD_INT 105
20521: PUSH
20522: LD_INT 106
20524: PUSH
20525: LD_INT 107
20527: PUSH
20528: LD_INT 108
20530: PUSH
20531: LD_INT 109
20533: PUSH
20534: LD_INT 110
20536: PUSH
20537: LD_INT 111
20539: PUSH
20540: LD_INT 112
20542: PUSH
20543: LD_INT 113
20545: PUSH
20546: LD_INT 114
20548: PUSH
20549: LD_INT 116
20551: PUSH
20552: LD_INT 117
20554: PUSH
20555: LD_INT 118
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: LIST
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: ST_TO_ADDR
20581: GO 22036
20583: LD_INT 13
20585: DOUBLE
20586: EQUAL
20587: IFTRUE 20591
20589: GO 20799
20591: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
20592: LD_ADDR_VAR 0 2
20596: PUSH
20597: LD_INT 1
20599: PUSH
20600: LD_INT 2
20602: PUSH
20603: LD_INT 3
20605: PUSH
20606: LD_INT 4
20608: PUSH
20609: LD_INT 5
20611: PUSH
20612: LD_INT 8
20614: PUSH
20615: LD_INT 9
20617: PUSH
20618: LD_INT 10
20620: PUSH
20621: LD_INT 11
20623: PUSH
20624: LD_INT 12
20626: PUSH
20627: LD_INT 14
20629: PUSH
20630: LD_INT 15
20632: PUSH
20633: LD_INT 16
20635: PUSH
20636: LD_INT 17
20638: PUSH
20639: LD_INT 18
20641: PUSH
20642: LD_INT 19
20644: PUSH
20645: LD_INT 20
20647: PUSH
20648: LD_INT 21
20650: PUSH
20651: LD_INT 22
20653: PUSH
20654: LD_INT 23
20656: PUSH
20657: LD_INT 24
20659: PUSH
20660: LD_INT 25
20662: PUSH
20663: LD_INT 26
20665: PUSH
20666: LD_INT 27
20668: PUSH
20669: LD_INT 28
20671: PUSH
20672: LD_INT 30
20674: PUSH
20675: LD_INT 31
20677: PUSH
20678: LD_INT 32
20680: PUSH
20681: LD_INT 33
20683: PUSH
20684: LD_INT 34
20686: PUSH
20687: LD_INT 36
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: PUSH
20723: LD_INT 101
20725: PUSH
20726: LD_INT 102
20728: PUSH
20729: LD_INT 103
20731: PUSH
20732: LD_INT 104
20734: PUSH
20735: LD_INT 105
20737: PUSH
20738: LD_INT 106
20740: PUSH
20741: LD_INT 107
20743: PUSH
20744: LD_INT 108
20746: PUSH
20747: LD_INT 109
20749: PUSH
20750: LD_INT 110
20752: PUSH
20753: LD_INT 111
20755: PUSH
20756: LD_INT 112
20758: PUSH
20759: LD_INT 113
20761: PUSH
20762: LD_INT 114
20764: PUSH
20765: LD_INT 116
20767: PUSH
20768: LD_INT 117
20770: PUSH
20771: LD_INT 118
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: ST_TO_ADDR
20797: GO 22036
20799: LD_INT 14
20801: DOUBLE
20802: EQUAL
20803: IFTRUE 20807
20805: GO 21031
20807: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
20808: LD_ADDR_VAR 0 2
20812: PUSH
20813: LD_INT 1
20815: PUSH
20816: LD_INT 2
20818: PUSH
20819: LD_INT 3
20821: PUSH
20822: LD_INT 4
20824: PUSH
20825: LD_INT 5
20827: PUSH
20828: LD_INT 6
20830: PUSH
20831: LD_INT 7
20833: PUSH
20834: LD_INT 8
20836: PUSH
20837: LD_INT 9
20839: PUSH
20840: LD_INT 10
20842: PUSH
20843: LD_INT 11
20845: PUSH
20846: LD_INT 12
20848: PUSH
20849: LD_INT 13
20851: PUSH
20852: LD_INT 14
20854: PUSH
20855: LD_INT 15
20857: PUSH
20858: LD_INT 16
20860: PUSH
20861: LD_INT 17
20863: PUSH
20864: LD_INT 18
20866: PUSH
20867: LD_INT 19
20869: PUSH
20870: LD_INT 20
20872: PUSH
20873: LD_INT 21
20875: PUSH
20876: LD_INT 22
20878: PUSH
20879: LD_INT 23
20881: PUSH
20882: LD_INT 24
20884: PUSH
20885: LD_INT 25
20887: PUSH
20888: LD_INT 26
20890: PUSH
20891: LD_INT 27
20893: PUSH
20894: LD_INT 28
20896: PUSH
20897: LD_INT 29
20899: PUSH
20900: LD_INT 30
20902: PUSH
20903: LD_INT 31
20905: PUSH
20906: LD_INT 32
20908: PUSH
20909: LD_INT 33
20911: PUSH
20912: LD_INT 34
20914: PUSH
20915: LD_INT 36
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: PUSH
20955: LD_INT 101
20957: PUSH
20958: LD_INT 102
20960: PUSH
20961: LD_INT 103
20963: PUSH
20964: LD_INT 104
20966: PUSH
20967: LD_INT 105
20969: PUSH
20970: LD_INT 106
20972: PUSH
20973: LD_INT 107
20975: PUSH
20976: LD_INT 108
20978: PUSH
20979: LD_INT 109
20981: PUSH
20982: LD_INT 110
20984: PUSH
20985: LD_INT 111
20987: PUSH
20988: LD_INT 112
20990: PUSH
20991: LD_INT 113
20993: PUSH
20994: LD_INT 114
20996: PUSH
20997: LD_INT 116
20999: PUSH
21000: LD_INT 117
21002: PUSH
21003: LD_INT 118
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: PUSH
21025: EMPTY
21026: LIST
21027: LIST
21028: ST_TO_ADDR
21029: GO 22036
21031: LD_INT 15
21033: DOUBLE
21034: EQUAL
21035: IFTRUE 21039
21037: GO 21263
21039: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
21040: LD_ADDR_VAR 0 2
21044: PUSH
21045: LD_INT 1
21047: PUSH
21048: LD_INT 2
21050: PUSH
21051: LD_INT 3
21053: PUSH
21054: LD_INT 4
21056: PUSH
21057: LD_INT 5
21059: PUSH
21060: LD_INT 6
21062: PUSH
21063: LD_INT 7
21065: PUSH
21066: LD_INT 8
21068: PUSH
21069: LD_INT 9
21071: PUSH
21072: LD_INT 10
21074: PUSH
21075: LD_INT 11
21077: PUSH
21078: LD_INT 12
21080: PUSH
21081: LD_INT 13
21083: PUSH
21084: LD_INT 14
21086: PUSH
21087: LD_INT 15
21089: PUSH
21090: LD_INT 16
21092: PUSH
21093: LD_INT 17
21095: PUSH
21096: LD_INT 18
21098: PUSH
21099: LD_INT 19
21101: PUSH
21102: LD_INT 20
21104: PUSH
21105: LD_INT 21
21107: PUSH
21108: LD_INT 22
21110: PUSH
21111: LD_INT 23
21113: PUSH
21114: LD_INT 24
21116: PUSH
21117: LD_INT 25
21119: PUSH
21120: LD_INT 26
21122: PUSH
21123: LD_INT 27
21125: PUSH
21126: LD_INT 28
21128: PUSH
21129: LD_INT 29
21131: PUSH
21132: LD_INT 30
21134: PUSH
21135: LD_INT 31
21137: PUSH
21138: LD_INT 32
21140: PUSH
21141: LD_INT 33
21143: PUSH
21144: LD_INT 34
21146: PUSH
21147: LD_INT 36
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 101
21189: PUSH
21190: LD_INT 102
21192: PUSH
21193: LD_INT 103
21195: PUSH
21196: LD_INT 104
21198: PUSH
21199: LD_INT 105
21201: PUSH
21202: LD_INT 106
21204: PUSH
21205: LD_INT 107
21207: PUSH
21208: LD_INT 108
21210: PUSH
21211: LD_INT 109
21213: PUSH
21214: LD_INT 110
21216: PUSH
21217: LD_INT 111
21219: PUSH
21220: LD_INT 112
21222: PUSH
21223: LD_INT 113
21225: PUSH
21226: LD_INT 114
21228: PUSH
21229: LD_INT 116
21231: PUSH
21232: LD_INT 117
21234: PUSH
21235: LD_INT 118
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: PUSH
21257: EMPTY
21258: LIST
21259: LIST
21260: ST_TO_ADDR
21261: GO 22036
21263: LD_INT 16
21265: DOUBLE
21266: EQUAL
21267: IFTRUE 21271
21269: GO 21407
21271: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
21272: LD_ADDR_VAR 0 2
21276: PUSH
21277: LD_INT 2
21279: PUSH
21280: LD_INT 4
21282: PUSH
21283: LD_INT 5
21285: PUSH
21286: LD_INT 7
21288: PUSH
21289: LD_INT 11
21291: PUSH
21292: LD_INT 12
21294: PUSH
21295: LD_INT 15
21297: PUSH
21298: LD_INT 16
21300: PUSH
21301: LD_INT 20
21303: PUSH
21304: LD_INT 21
21306: PUSH
21307: LD_INT 22
21309: PUSH
21310: LD_INT 23
21312: PUSH
21313: LD_INT 25
21315: PUSH
21316: LD_INT 26
21318: PUSH
21319: LD_INT 30
21321: PUSH
21322: LD_INT 31
21324: PUSH
21325: LD_INT 32
21327: PUSH
21328: LD_INT 33
21330: PUSH
21331: LD_INT 34
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: PUSH
21355: LD_INT 101
21357: PUSH
21358: LD_INT 102
21360: PUSH
21361: LD_INT 103
21363: PUSH
21364: LD_INT 106
21366: PUSH
21367: LD_INT 108
21369: PUSH
21370: LD_INT 112
21372: PUSH
21373: LD_INT 113
21375: PUSH
21376: LD_INT 114
21378: PUSH
21379: LD_INT 116
21381: PUSH
21382: LD_INT 117
21384: PUSH
21385: LD_INT 118
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: ST_TO_ADDR
21405: GO 22036
21407: LD_INT 17
21409: DOUBLE
21410: EQUAL
21411: IFTRUE 21415
21413: GO 21639
21415: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
21416: LD_ADDR_VAR 0 2
21420: PUSH
21421: LD_INT 1
21423: PUSH
21424: LD_INT 2
21426: PUSH
21427: LD_INT 3
21429: PUSH
21430: LD_INT 4
21432: PUSH
21433: LD_INT 5
21435: PUSH
21436: LD_INT 6
21438: PUSH
21439: LD_INT 7
21441: PUSH
21442: LD_INT 8
21444: PUSH
21445: LD_INT 9
21447: PUSH
21448: LD_INT 10
21450: PUSH
21451: LD_INT 11
21453: PUSH
21454: LD_INT 12
21456: PUSH
21457: LD_INT 13
21459: PUSH
21460: LD_INT 14
21462: PUSH
21463: LD_INT 15
21465: PUSH
21466: LD_INT 16
21468: PUSH
21469: LD_INT 17
21471: PUSH
21472: LD_INT 18
21474: PUSH
21475: LD_INT 19
21477: PUSH
21478: LD_INT 20
21480: PUSH
21481: LD_INT 21
21483: PUSH
21484: LD_INT 22
21486: PUSH
21487: LD_INT 23
21489: PUSH
21490: LD_INT 24
21492: PUSH
21493: LD_INT 25
21495: PUSH
21496: LD_INT 26
21498: PUSH
21499: LD_INT 27
21501: PUSH
21502: LD_INT 28
21504: PUSH
21505: LD_INT 29
21507: PUSH
21508: LD_INT 30
21510: PUSH
21511: LD_INT 31
21513: PUSH
21514: LD_INT 32
21516: PUSH
21517: LD_INT 33
21519: PUSH
21520: LD_INT 34
21522: PUSH
21523: LD_INT 36
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: LIST
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: LIST
21562: PUSH
21563: LD_INT 101
21565: PUSH
21566: LD_INT 102
21568: PUSH
21569: LD_INT 103
21571: PUSH
21572: LD_INT 104
21574: PUSH
21575: LD_INT 105
21577: PUSH
21578: LD_INT 106
21580: PUSH
21581: LD_INT 107
21583: PUSH
21584: LD_INT 108
21586: PUSH
21587: LD_INT 109
21589: PUSH
21590: LD_INT 110
21592: PUSH
21593: LD_INT 111
21595: PUSH
21596: LD_INT 112
21598: PUSH
21599: LD_INT 113
21601: PUSH
21602: LD_INT 114
21604: PUSH
21605: LD_INT 116
21607: PUSH
21608: LD_INT 117
21610: PUSH
21611: LD_INT 118
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: ST_TO_ADDR
21637: GO 22036
21639: LD_INT 18
21641: DOUBLE
21642: EQUAL
21643: IFTRUE 21647
21645: GO 21795
21647: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
21648: LD_ADDR_VAR 0 2
21652: PUSH
21653: LD_INT 2
21655: PUSH
21656: LD_INT 4
21658: PUSH
21659: LD_INT 5
21661: PUSH
21662: LD_INT 7
21664: PUSH
21665: LD_INT 11
21667: PUSH
21668: LD_INT 12
21670: PUSH
21671: LD_INT 15
21673: PUSH
21674: LD_INT 16
21676: PUSH
21677: LD_INT 20
21679: PUSH
21680: LD_INT 21
21682: PUSH
21683: LD_INT 22
21685: PUSH
21686: LD_INT 23
21688: PUSH
21689: LD_INT 25
21691: PUSH
21692: LD_INT 26
21694: PUSH
21695: LD_INT 30
21697: PUSH
21698: LD_INT 31
21700: PUSH
21701: LD_INT 32
21703: PUSH
21704: LD_INT 33
21706: PUSH
21707: LD_INT 34
21709: PUSH
21710: LD_INT 35
21712: PUSH
21713: LD_INT 36
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 101
21741: PUSH
21742: LD_INT 102
21744: PUSH
21745: LD_INT 103
21747: PUSH
21748: LD_INT 106
21750: PUSH
21751: LD_INT 108
21753: PUSH
21754: LD_INT 112
21756: PUSH
21757: LD_INT 113
21759: PUSH
21760: LD_INT 114
21762: PUSH
21763: LD_INT 115
21765: PUSH
21766: LD_INT 116
21768: PUSH
21769: LD_INT 117
21771: PUSH
21772: LD_INT 118
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: ST_TO_ADDR
21793: GO 22036
21795: LD_INT 19
21797: DOUBLE
21798: EQUAL
21799: IFTRUE 21803
21801: GO 22035
21803: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
21804: LD_ADDR_VAR 0 2
21808: PUSH
21809: LD_INT 1
21811: PUSH
21812: LD_INT 2
21814: PUSH
21815: LD_INT 3
21817: PUSH
21818: LD_INT 4
21820: PUSH
21821: LD_INT 5
21823: PUSH
21824: LD_INT 6
21826: PUSH
21827: LD_INT 7
21829: PUSH
21830: LD_INT 8
21832: PUSH
21833: LD_INT 9
21835: PUSH
21836: LD_INT 10
21838: PUSH
21839: LD_INT 11
21841: PUSH
21842: LD_INT 12
21844: PUSH
21845: LD_INT 13
21847: PUSH
21848: LD_INT 14
21850: PUSH
21851: LD_INT 15
21853: PUSH
21854: LD_INT 16
21856: PUSH
21857: LD_INT 17
21859: PUSH
21860: LD_INT 18
21862: PUSH
21863: LD_INT 19
21865: PUSH
21866: LD_INT 20
21868: PUSH
21869: LD_INT 21
21871: PUSH
21872: LD_INT 22
21874: PUSH
21875: LD_INT 23
21877: PUSH
21878: LD_INT 24
21880: PUSH
21881: LD_INT 25
21883: PUSH
21884: LD_INT 26
21886: PUSH
21887: LD_INT 27
21889: PUSH
21890: LD_INT 28
21892: PUSH
21893: LD_INT 29
21895: PUSH
21896: LD_INT 30
21898: PUSH
21899: LD_INT 31
21901: PUSH
21902: LD_INT 32
21904: PUSH
21905: LD_INT 33
21907: PUSH
21908: LD_INT 34
21910: PUSH
21911: LD_INT 35
21913: PUSH
21914: LD_INT 36
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 101
21957: PUSH
21958: LD_INT 102
21960: PUSH
21961: LD_INT 103
21963: PUSH
21964: LD_INT 104
21966: PUSH
21967: LD_INT 105
21969: PUSH
21970: LD_INT 106
21972: PUSH
21973: LD_INT 107
21975: PUSH
21976: LD_INT 108
21978: PUSH
21979: LD_INT 109
21981: PUSH
21982: LD_INT 110
21984: PUSH
21985: LD_INT 111
21987: PUSH
21988: LD_INT 112
21990: PUSH
21991: LD_INT 113
21993: PUSH
21994: LD_INT 114
21996: PUSH
21997: LD_INT 115
21999: PUSH
22000: LD_INT 116
22002: PUSH
22003: LD_INT 117
22005: PUSH
22006: LD_INT 118
22008: PUSH
22009: EMPTY
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: ST_TO_ADDR
22033: GO 22036
22035: POP
// end else
22036: GO 22267
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
22038: LD_ADDR_VAR 0 2
22042: PUSH
22043: LD_INT 1
22045: PUSH
22046: LD_INT 2
22048: PUSH
22049: LD_INT 3
22051: PUSH
22052: LD_INT 4
22054: PUSH
22055: LD_INT 5
22057: PUSH
22058: LD_INT 6
22060: PUSH
22061: LD_INT 7
22063: PUSH
22064: LD_INT 8
22066: PUSH
22067: LD_INT 9
22069: PUSH
22070: LD_INT 10
22072: PUSH
22073: LD_INT 11
22075: PUSH
22076: LD_INT 12
22078: PUSH
22079: LD_INT 13
22081: PUSH
22082: LD_INT 14
22084: PUSH
22085: LD_INT 15
22087: PUSH
22088: LD_INT 16
22090: PUSH
22091: LD_INT 17
22093: PUSH
22094: LD_INT 18
22096: PUSH
22097: LD_INT 19
22099: PUSH
22100: LD_INT 20
22102: PUSH
22103: LD_INT 21
22105: PUSH
22106: LD_INT 22
22108: PUSH
22109: LD_INT 23
22111: PUSH
22112: LD_INT 24
22114: PUSH
22115: LD_INT 25
22117: PUSH
22118: LD_INT 26
22120: PUSH
22121: LD_INT 27
22123: PUSH
22124: LD_INT 28
22126: PUSH
22127: LD_INT 29
22129: PUSH
22130: LD_INT 30
22132: PUSH
22133: LD_INT 31
22135: PUSH
22136: LD_INT 32
22138: PUSH
22139: LD_INT 33
22141: PUSH
22142: LD_INT 34
22144: PUSH
22145: LD_INT 35
22147: PUSH
22148: LD_INT 36
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: PUSH
22189: LD_INT 101
22191: PUSH
22192: LD_INT 102
22194: PUSH
22195: LD_INT 103
22197: PUSH
22198: LD_INT 104
22200: PUSH
22201: LD_INT 105
22203: PUSH
22204: LD_INT 106
22206: PUSH
22207: LD_INT 107
22209: PUSH
22210: LD_INT 108
22212: PUSH
22213: LD_INT 109
22215: PUSH
22216: LD_INT 110
22218: PUSH
22219: LD_INT 111
22221: PUSH
22222: LD_INT 112
22224: PUSH
22225: LD_INT 113
22227: PUSH
22228: LD_INT 114
22230: PUSH
22231: LD_INT 115
22233: PUSH
22234: LD_INT 116
22236: PUSH
22237: LD_INT 117
22239: PUSH
22240: LD_INT 118
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: ST_TO_ADDR
// if result then
22267: LD_VAR 0 2
22271: IFFALSE 23057
// begin normal :=  ;
22273: LD_ADDR_VAR 0 5
22277: PUSH
22278: LD_STRING 
22280: ST_TO_ADDR
// hardcore :=  ;
22281: LD_ADDR_VAR 0 6
22285: PUSH
22286: LD_STRING 
22288: ST_TO_ADDR
// active :=  ;
22289: LD_ADDR_VAR 0 7
22293: PUSH
22294: LD_STRING 
22296: ST_TO_ADDR
// for i = 1 to normalCounter do
22297: LD_ADDR_VAR 0 8
22301: PUSH
22302: DOUBLE
22303: LD_INT 1
22305: DEC
22306: ST_TO_ADDR
22307: LD_EXP 38
22311: PUSH
22312: FOR_TO
22313: IFFALSE 22414
// begin tmp := 0 ;
22315: LD_ADDR_VAR 0 3
22319: PUSH
22320: LD_STRING 0
22322: ST_TO_ADDR
// if result [ 1 ] then
22323: LD_VAR 0 2
22327: PUSH
22328: LD_INT 1
22330: ARRAY
22331: IFFALSE 22396
// if result [ 1 ] [ 1 ] = i then
22333: LD_VAR 0 2
22337: PUSH
22338: LD_INT 1
22340: ARRAY
22341: PUSH
22342: LD_INT 1
22344: ARRAY
22345: PUSH
22346: LD_VAR 0 8
22350: EQUAL
22351: IFFALSE 22396
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
22353: LD_ADDR_VAR 0 2
22357: PUSH
22358: LD_VAR 0 2
22362: PPUSH
22363: LD_INT 1
22365: PPUSH
22366: LD_VAR 0 2
22370: PUSH
22371: LD_INT 1
22373: ARRAY
22374: PPUSH
22375: LD_INT 1
22377: PPUSH
22378: CALL_OW 3
22382: PPUSH
22383: CALL_OW 1
22387: ST_TO_ADDR
// tmp := 1 ;
22388: LD_ADDR_VAR 0 3
22392: PUSH
22393: LD_STRING 1
22395: ST_TO_ADDR
// end ; normal := normal & tmp ;
22396: LD_ADDR_VAR 0 5
22400: PUSH
22401: LD_VAR 0 5
22405: PUSH
22406: LD_VAR 0 3
22410: STR
22411: ST_TO_ADDR
// end ;
22412: GO 22312
22414: POP
22415: POP
// for i = 1 to hardcoreCounter do
22416: LD_ADDR_VAR 0 8
22420: PUSH
22421: DOUBLE
22422: LD_INT 1
22424: DEC
22425: ST_TO_ADDR
22426: LD_EXP 39
22430: PUSH
22431: FOR_TO
22432: IFFALSE 22537
// begin tmp := 0 ;
22434: LD_ADDR_VAR 0 3
22438: PUSH
22439: LD_STRING 0
22441: ST_TO_ADDR
// if result [ 2 ] then
22442: LD_VAR 0 2
22446: PUSH
22447: LD_INT 2
22449: ARRAY
22450: IFFALSE 22519
// if result [ 2 ] [ 1 ] = 100 + i then
22452: LD_VAR 0 2
22456: PUSH
22457: LD_INT 2
22459: ARRAY
22460: PUSH
22461: LD_INT 1
22463: ARRAY
22464: PUSH
22465: LD_INT 100
22467: PUSH
22468: LD_VAR 0 8
22472: PLUS
22473: EQUAL
22474: IFFALSE 22519
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
22476: LD_ADDR_VAR 0 2
22480: PUSH
22481: LD_VAR 0 2
22485: PPUSH
22486: LD_INT 2
22488: PPUSH
22489: LD_VAR 0 2
22493: PUSH
22494: LD_INT 2
22496: ARRAY
22497: PPUSH
22498: LD_INT 1
22500: PPUSH
22501: CALL_OW 3
22505: PPUSH
22506: CALL_OW 1
22510: ST_TO_ADDR
// tmp := 1 ;
22511: LD_ADDR_VAR 0 3
22515: PUSH
22516: LD_STRING 1
22518: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
22519: LD_ADDR_VAR 0 6
22523: PUSH
22524: LD_VAR 0 6
22528: PUSH
22529: LD_VAR 0 3
22533: STR
22534: ST_TO_ADDR
// end ;
22535: GO 22431
22537: POP
22538: POP
// if isGameLoad then
22539: LD_VAR 0 1
22543: IFFALSE 23018
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
22545: LD_ADDR_VAR 0 4
22549: PUSH
22550: LD_EXP 42
22554: PUSH
22555: LD_EXP 41
22559: PUSH
22560: LD_EXP 43
22564: PUSH
22565: LD_EXP 40
22569: PUSH
22570: LD_EXP 44
22574: PUSH
22575: LD_EXP 45
22579: PUSH
22580: LD_EXP 46
22584: PUSH
22585: LD_EXP 47
22589: PUSH
22590: LD_EXP 48
22594: PUSH
22595: LD_EXP 49
22599: PUSH
22600: LD_EXP 50
22604: PUSH
22605: LD_EXP 51
22609: PUSH
22610: LD_EXP 52
22614: PUSH
22615: LD_EXP 53
22619: PUSH
22620: LD_EXP 61
22624: PUSH
22625: LD_EXP 62
22629: PUSH
22630: LD_EXP 63
22634: PUSH
22635: LD_EXP 64
22639: PUSH
22640: LD_EXP 66
22644: PUSH
22645: LD_EXP 67
22649: PUSH
22650: LD_EXP 68
22654: PUSH
22655: LD_EXP 71
22659: PUSH
22660: LD_EXP 73
22664: PUSH
22665: LD_EXP 74
22669: PUSH
22670: LD_EXP 75
22674: PUSH
22675: LD_EXP 77
22679: PUSH
22680: LD_EXP 78
22684: PUSH
22685: LD_EXP 81
22689: PUSH
22690: LD_EXP 82
22694: PUSH
22695: LD_EXP 83
22699: PUSH
22700: LD_EXP 84
22704: PUSH
22705: LD_EXP 85
22709: PUSH
22710: LD_EXP 86
22714: PUSH
22715: LD_EXP 87
22719: PUSH
22720: LD_EXP 88
22724: PUSH
22725: LD_EXP 89
22729: PUSH
22730: LD_EXP 54
22734: PUSH
22735: LD_EXP 55
22739: PUSH
22740: LD_EXP 58
22744: PUSH
22745: LD_EXP 59
22749: PUSH
22750: LD_EXP 60
22754: PUSH
22755: LD_EXP 56
22759: PUSH
22760: LD_EXP 57
22764: PUSH
22765: LD_EXP 65
22769: PUSH
22770: LD_EXP 69
22774: PUSH
22775: LD_EXP 70
22779: PUSH
22780: LD_EXP 72
22784: PUSH
22785: LD_EXP 76
22789: PUSH
22790: LD_EXP 79
22794: PUSH
22795: LD_EXP 80
22799: PUSH
22800: LD_EXP 90
22804: PUSH
22805: LD_EXP 91
22809: PUSH
22810: LD_EXP 92
22814: PUSH
22815: LD_EXP 93
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: ST_TO_ADDR
// tmp :=  ;
22876: LD_ADDR_VAR 0 3
22880: PUSH
22881: LD_STRING 
22883: ST_TO_ADDR
// for i = 1 to normalCounter do
22884: LD_ADDR_VAR 0 8
22888: PUSH
22889: DOUBLE
22890: LD_INT 1
22892: DEC
22893: ST_TO_ADDR
22894: LD_EXP 38
22898: PUSH
22899: FOR_TO
22900: IFFALSE 22936
// begin if flags [ i ] then
22902: LD_VAR 0 4
22906: PUSH
22907: LD_VAR 0 8
22911: ARRAY
22912: IFFALSE 22934
// tmp := tmp & i & ; ;
22914: LD_ADDR_VAR 0 3
22918: PUSH
22919: LD_VAR 0 3
22923: PUSH
22924: LD_VAR 0 8
22928: STR
22929: PUSH
22930: LD_STRING ;
22932: STR
22933: ST_TO_ADDR
// end ;
22934: GO 22899
22936: POP
22937: POP
// for i = 1 to hardcoreCounter do
22938: LD_ADDR_VAR 0 8
22942: PUSH
22943: DOUBLE
22944: LD_INT 1
22946: DEC
22947: ST_TO_ADDR
22948: LD_EXP 39
22952: PUSH
22953: FOR_TO
22954: IFFALSE 23000
// begin if flags [ normalCounter + i ] then
22956: LD_VAR 0 4
22960: PUSH
22961: LD_EXP 38
22965: PUSH
22966: LD_VAR 0 8
22970: PLUS
22971: ARRAY
22972: IFFALSE 22998
// tmp := tmp & ( 100 + i ) & ; ;
22974: LD_ADDR_VAR 0 3
22978: PUSH
22979: LD_VAR 0 3
22983: PUSH
22984: LD_INT 100
22986: PUSH
22987: LD_VAR 0 8
22991: PLUS
22992: STR
22993: PUSH
22994: LD_STRING ;
22996: STR
22997: ST_TO_ADDR
// end ;
22998: GO 22953
23000: POP
23001: POP
// if tmp then
23002: LD_VAR 0 3
23006: IFFALSE 23018
// active := tmp ;
23008: LD_ADDR_VAR 0 7
23012: PUSH
23013: LD_VAR 0 3
23017: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
23018: LD_STRING getStreamItemsFromMission("
23020: PUSH
23021: LD_VAR 0 5
23025: STR
23026: PUSH
23027: LD_STRING ","
23029: STR
23030: PUSH
23031: LD_VAR 0 6
23035: STR
23036: PUSH
23037: LD_STRING ","
23039: STR
23040: PUSH
23041: LD_VAR 0 7
23045: STR
23046: PUSH
23047: LD_STRING ")
23049: STR
23050: PPUSH
23051: CALL_OW 559
// end else
23055: GO 23064
// ToLua ( getStreamItemsFromMission("","","") ) ;
23057: LD_STRING getStreamItemsFromMission("","","")
23059: PPUSH
23060: CALL_OW 559
// end ;
23064: LD_VAR 0 2
23068: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
23069: LD_EXP 37
23073: IFFALSE 23081
23075: PUSH
23076: LD_EXP 42
23080: AND
23081: IFFALSE 23205
23083: GO 23085
23085: DISABLE
23086: LD_INT 0
23088: PPUSH
23089: PPUSH
// begin enable ;
23090: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
23091: LD_ADDR_VAR 0 2
23095: PUSH
23096: LD_INT 22
23098: PUSH
23099: LD_OWVAR 2
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 2
23110: PUSH
23111: LD_INT 34
23113: PUSH
23114: LD_INT 7
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: LD_INT 34
23123: PUSH
23124: LD_INT 45
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: LD_INT 34
23133: PUSH
23134: LD_INT 28
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 34
23143: PUSH
23144: LD_INT 47
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: PPUSH
23162: CALL_OW 69
23166: ST_TO_ADDR
// if not tmp then
23167: LD_VAR 0 2
23171: NOT
23172: IFFALSE 23176
// exit ;
23174: GO 23205
// for i in tmp do
23176: LD_ADDR_VAR 0 1
23180: PUSH
23181: LD_VAR 0 2
23185: PUSH
23186: FOR_IN
23187: IFFALSE 23203
// begin SetLives ( i , 0 ) ;
23189: LD_VAR 0 1
23193: PPUSH
23194: LD_INT 0
23196: PPUSH
23197: CALL_OW 234
// end ;
23201: GO 23186
23203: POP
23204: POP
// end ;
23205: PPOPN 2
23207: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
23208: LD_EXP 37
23212: IFFALSE 23220
23214: PUSH
23215: LD_EXP 43
23219: AND
23220: IFFALSE 23304
23222: GO 23224
23224: DISABLE
23225: LD_INT 0
23227: PPUSH
23228: PPUSH
// begin enable ;
23229: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
23230: LD_ADDR_VAR 0 2
23234: PUSH
23235: LD_INT 22
23237: PUSH
23238: LD_OWVAR 2
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 32
23249: PUSH
23250: LD_INT 3
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PPUSH
23261: CALL_OW 69
23265: ST_TO_ADDR
// if not tmp then
23266: LD_VAR 0 2
23270: NOT
23271: IFFALSE 23275
// exit ;
23273: GO 23304
// for i in tmp do
23275: LD_ADDR_VAR 0 1
23279: PUSH
23280: LD_VAR 0 2
23284: PUSH
23285: FOR_IN
23286: IFFALSE 23302
// begin SetLives ( i , 0 ) ;
23288: LD_VAR 0 1
23292: PPUSH
23293: LD_INT 0
23295: PPUSH
23296: CALL_OW 234
// end ;
23300: GO 23285
23302: POP
23303: POP
// end ;
23304: PPOPN 2
23306: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
23307: LD_EXP 37
23311: IFFALSE 23319
23313: PUSH
23314: LD_EXP 40
23318: AND
23319: IFFALSE 23412
23321: GO 23323
23323: DISABLE
23324: LD_INT 0
23326: PPUSH
// begin enable ;
23327: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
23328: LD_ADDR_VAR 0 1
23332: PUSH
23333: LD_INT 22
23335: PUSH
23336: LD_OWVAR 2
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: LD_INT 2
23347: PUSH
23348: LD_INT 25
23350: PUSH
23351: LD_INT 5
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 25
23360: PUSH
23361: LD_INT 9
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 25
23370: PUSH
23371: LD_INT 8
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: EMPTY
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PPUSH
23388: CALL_OW 69
23392: PUSH
23393: FOR_IN
23394: IFFALSE 23410
// begin SetClass ( i , 1 ) ;
23396: LD_VAR 0 1
23400: PPUSH
23401: LD_INT 1
23403: PPUSH
23404: CALL_OW 336
// end ;
23408: GO 23393
23410: POP
23411: POP
// end ;
23412: PPOPN 1
23414: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
23415: LD_EXP 37
23419: IFFALSE 23427
23421: PUSH
23422: LD_EXP 41
23426: AND
23427: IFFALSE 23439
23429: PUSH
23430: LD_OWVAR 65
23434: PUSH
23435: LD_INT 7
23437: LESS
23438: AND
23439: IFFALSE 23453
23441: GO 23443
23443: DISABLE
// begin enable ;
23444: ENABLE
// game_speed := 7 ;
23445: LD_ADDR_OWVAR 65
23449: PUSH
23450: LD_INT 7
23452: ST_TO_ADDR
// end ;
23453: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
23454: LD_EXP 37
23458: IFFALSE 23466
23460: PUSH
23461: LD_EXP 44
23465: AND
23466: IFFALSE 23668
23468: GO 23470
23470: DISABLE
23471: LD_INT 0
23473: PPUSH
23474: PPUSH
23475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23476: LD_ADDR_VAR 0 3
23480: PUSH
23481: LD_INT 81
23483: PUSH
23484: LD_OWVAR 2
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 21
23495: PUSH
23496: LD_INT 1
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PPUSH
23507: CALL_OW 69
23511: ST_TO_ADDR
// if not tmp then
23512: LD_VAR 0 3
23516: NOT
23517: IFFALSE 23521
// exit ;
23519: GO 23668
// if tmp > 5 then
23521: LD_VAR 0 3
23525: PUSH
23526: LD_INT 5
23528: GREATER
23529: IFFALSE 23541
// k := 5 else
23531: LD_ADDR_VAR 0 2
23535: PUSH
23536: LD_INT 5
23538: ST_TO_ADDR
23539: GO 23551
// k := tmp ;
23541: LD_ADDR_VAR 0 2
23545: PUSH
23546: LD_VAR 0 3
23550: ST_TO_ADDR
// for i := 1 to k do
23551: LD_ADDR_VAR 0 1
23555: PUSH
23556: DOUBLE
23557: LD_INT 1
23559: DEC
23560: ST_TO_ADDR
23561: LD_VAR 0 2
23565: PUSH
23566: FOR_TO
23567: IFFALSE 23666
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
23569: LD_VAR 0 3
23573: PUSH
23574: LD_VAR 0 1
23578: ARRAY
23579: PPUSH
23580: LD_VAR 0 1
23584: PUSH
23585: LD_INT 4
23587: MOD
23588: PUSH
23589: LD_INT 1
23591: PLUS
23592: PPUSH
23593: CALL_OW 259
23597: PUSH
23598: LD_INT 10
23600: LESS
23601: IFFALSE 23664
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
23603: LD_VAR 0 3
23607: PUSH
23608: LD_VAR 0 1
23612: ARRAY
23613: PPUSH
23614: LD_VAR 0 1
23618: PUSH
23619: LD_INT 4
23621: MOD
23622: PUSH
23623: LD_INT 1
23625: PLUS
23626: PPUSH
23627: LD_VAR 0 3
23631: PUSH
23632: LD_VAR 0 1
23636: ARRAY
23637: PPUSH
23638: LD_VAR 0 1
23642: PUSH
23643: LD_INT 4
23645: MOD
23646: PUSH
23647: LD_INT 1
23649: PLUS
23650: PPUSH
23651: CALL_OW 259
23655: PUSH
23656: LD_INT 1
23658: PLUS
23659: PPUSH
23660: CALL_OW 237
23664: GO 23566
23666: POP
23667: POP
// end ;
23668: PPOPN 3
23670: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
23671: LD_EXP 37
23675: IFFALSE 23683
23677: PUSH
23678: LD_EXP 45
23682: AND
23683: IFFALSE 23703
23685: GO 23687
23687: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
23688: LD_INT 4
23690: PPUSH
23691: LD_OWVAR 2
23695: PPUSH
23696: LD_INT 0
23698: PPUSH
23699: CALL_OW 324
23703: END
// every 0 0$1 trigger StreamModeActive and sShovel do
23704: LD_EXP 37
23708: IFFALSE 23716
23710: PUSH
23711: LD_EXP 74
23715: AND
23716: IFFALSE 23736
23718: GO 23720
23720: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
23721: LD_INT 19
23723: PPUSH
23724: LD_OWVAR 2
23728: PPUSH
23729: LD_INT 0
23731: PPUSH
23732: CALL_OW 324
23736: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
23737: LD_EXP 37
23741: IFFALSE 23749
23743: PUSH
23744: LD_EXP 46
23748: AND
23749: IFFALSE 23851
23751: GO 23753
23753: DISABLE
23754: LD_INT 0
23756: PPUSH
23757: PPUSH
// begin enable ;
23758: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
23759: LD_ADDR_VAR 0 2
23763: PUSH
23764: LD_INT 22
23766: PUSH
23767: LD_OWVAR 2
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 2
23778: PUSH
23779: LD_INT 34
23781: PUSH
23782: LD_INT 11
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: LD_INT 34
23791: PUSH
23792: LD_INT 30
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: LIST
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: PPUSH
23808: CALL_OW 69
23812: ST_TO_ADDR
// if not tmp then
23813: LD_VAR 0 2
23817: NOT
23818: IFFALSE 23822
// exit ;
23820: GO 23851
// for i in tmp do
23822: LD_ADDR_VAR 0 1
23826: PUSH
23827: LD_VAR 0 2
23831: PUSH
23832: FOR_IN
23833: IFFALSE 23849
// begin SetLives ( i , 0 ) ;
23835: LD_VAR 0 1
23839: PPUSH
23840: LD_INT 0
23842: PPUSH
23843: CALL_OW 234
// end ;
23847: GO 23832
23849: POP
23850: POP
// end ;
23851: PPOPN 2
23853: END
// every 0 0$1 trigger StreamModeActive and sBunker do
23854: LD_EXP 37
23858: IFFALSE 23866
23860: PUSH
23861: LD_EXP 47
23865: AND
23866: IFFALSE 23886
23868: GO 23870
23870: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
23871: LD_INT 32
23873: PPUSH
23874: LD_OWVAR 2
23878: PPUSH
23879: LD_INT 0
23881: PPUSH
23882: CALL_OW 324
23886: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
23887: LD_EXP 37
23891: IFFALSE 23899
23893: PUSH
23894: LD_EXP 48
23898: AND
23899: IFFALSE 24082
23901: GO 23903
23903: DISABLE
23904: LD_INT 0
23906: PPUSH
23907: PPUSH
23908: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
23909: LD_ADDR_VAR 0 2
23913: PUSH
23914: LD_INT 22
23916: PUSH
23917: LD_OWVAR 2
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: PUSH
23926: LD_INT 33
23928: PUSH
23929: LD_INT 3
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PPUSH
23940: CALL_OW 69
23944: ST_TO_ADDR
// if not tmp then
23945: LD_VAR 0 2
23949: NOT
23950: IFFALSE 23954
// exit ;
23952: GO 24082
// side := 0 ;
23954: LD_ADDR_VAR 0 3
23958: PUSH
23959: LD_INT 0
23961: ST_TO_ADDR
// for i := 1 to 8 do
23962: LD_ADDR_VAR 0 1
23966: PUSH
23967: DOUBLE
23968: LD_INT 1
23970: DEC
23971: ST_TO_ADDR
23972: LD_INT 8
23974: PUSH
23975: FOR_TO
23976: IFFALSE 24026
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
23978: LD_OWVAR 2
23982: PUSH
23983: LD_VAR 0 1
23987: NONEQUAL
23988: IFFALSE 24010
23990: PUSH
23991: LD_OWVAR 2
23995: PPUSH
23996: LD_VAR 0 1
24000: PPUSH
24001: CALL_OW 81
24005: PUSH
24006: LD_INT 2
24008: EQUAL
24009: AND
24010: IFFALSE 24024
// begin side := i ;
24012: LD_ADDR_VAR 0 3
24016: PUSH
24017: LD_VAR 0 1
24021: ST_TO_ADDR
// break ;
24022: GO 24026
// end ;
24024: GO 23975
24026: POP
24027: POP
// if not side then
24028: LD_VAR 0 3
24032: NOT
24033: IFFALSE 24037
// exit ;
24035: GO 24082
// for i := 1 to tmp do
24037: LD_ADDR_VAR 0 1
24041: PUSH
24042: DOUBLE
24043: LD_INT 1
24045: DEC
24046: ST_TO_ADDR
24047: LD_VAR 0 2
24051: PUSH
24052: FOR_TO
24053: IFFALSE 24080
// if Prob ( 60 ) then
24055: LD_INT 60
24057: PPUSH
24058: CALL_OW 13
24062: IFFALSE 24078
// SetSide ( i , side ) ;
24064: LD_VAR 0 1
24068: PPUSH
24069: LD_VAR 0 3
24073: PPUSH
24074: CALL_OW 235
24078: GO 24052
24080: POP
24081: POP
// end ;
24082: PPOPN 3
24084: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
24085: LD_EXP 37
24089: IFFALSE 24097
24091: PUSH
24092: LD_EXP 50
24096: AND
24097: IFFALSE 24216
24099: GO 24101
24101: DISABLE
24102: LD_INT 0
24104: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
24105: LD_ADDR_VAR 0 1
24109: PUSH
24110: LD_INT 22
24112: PUSH
24113: LD_OWVAR 2
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PUSH
24122: LD_INT 21
24124: PUSH
24125: LD_INT 1
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PUSH
24132: LD_INT 3
24134: PUSH
24135: LD_INT 23
24137: PUSH
24138: LD_INT 0
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: LIST
24153: PPUSH
24154: CALL_OW 69
24158: PUSH
24159: FOR_IN
24160: IFFALSE 24214
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
24162: LD_VAR 0 1
24166: PPUSH
24167: CALL_OW 257
24171: PUSH
24172: LD_INT 1
24174: PUSH
24175: LD_INT 2
24177: PUSH
24178: LD_INT 3
24180: PUSH
24181: LD_INT 4
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: IN
24190: IFFALSE 24212
// SetClass ( un , rand ( 1 , 4 ) ) ;
24192: LD_VAR 0 1
24196: PPUSH
24197: LD_INT 1
24199: PPUSH
24200: LD_INT 4
24202: PPUSH
24203: CALL_OW 12
24207: PPUSH
24208: CALL_OW 336
24212: GO 24159
24214: POP
24215: POP
// end ;
24216: PPOPN 1
24218: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
24219: LD_EXP 37
24223: IFFALSE 24231
24225: PUSH
24226: LD_EXP 49
24230: AND
24231: IFFALSE 24310
24233: GO 24235
24235: DISABLE
24236: LD_INT 0
24238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24239: LD_ADDR_VAR 0 1
24243: PUSH
24244: LD_INT 22
24246: PUSH
24247: LD_OWVAR 2
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 21
24258: PUSH
24259: LD_INT 3
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PPUSH
24270: CALL_OW 69
24274: ST_TO_ADDR
// if not tmp then
24275: LD_VAR 0 1
24279: NOT
24280: IFFALSE 24284
// exit ;
24282: GO 24310
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
24284: LD_VAR 0 1
24288: PUSH
24289: LD_INT 1
24291: PPUSH
24292: LD_VAR 0 1
24296: PPUSH
24297: CALL_OW 12
24301: ARRAY
24302: PPUSH
24303: LD_INT 100
24305: PPUSH
24306: CALL_OW 234
// end ;
24310: PPOPN 1
24312: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
24313: LD_EXP 37
24317: IFFALSE 24325
24319: PUSH
24320: LD_EXP 51
24324: AND
24325: IFFALSE 24423
24327: GO 24329
24329: DISABLE
24330: LD_INT 0
24332: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24333: LD_ADDR_VAR 0 1
24337: PUSH
24338: LD_INT 22
24340: PUSH
24341: LD_OWVAR 2
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 21
24352: PUSH
24353: LD_INT 1
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: PPUSH
24364: CALL_OW 69
24368: ST_TO_ADDR
// if not tmp then
24369: LD_VAR 0 1
24373: NOT
24374: IFFALSE 24378
// exit ;
24376: GO 24423
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
24378: LD_VAR 0 1
24382: PUSH
24383: LD_INT 1
24385: PPUSH
24386: LD_VAR 0 1
24390: PPUSH
24391: CALL_OW 12
24395: ARRAY
24396: PPUSH
24397: LD_INT 1
24399: PPUSH
24400: LD_INT 4
24402: PPUSH
24403: CALL_OW 12
24407: PPUSH
24408: LD_INT 3000
24410: PPUSH
24411: LD_INT 9000
24413: PPUSH
24414: CALL_OW 12
24418: PPUSH
24419: CALL_OW 492
// end ;
24423: PPOPN 1
24425: END
// every 0 0$1 trigger StreamModeActive and sDepot do
24426: LD_EXP 37
24430: IFFALSE 24438
24432: PUSH
24433: LD_EXP 52
24437: AND
24438: IFFALSE 24458
24440: GO 24442
24442: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
24443: LD_INT 1
24445: PPUSH
24446: LD_OWVAR 2
24450: PPUSH
24451: LD_INT 0
24453: PPUSH
24454: CALL_OW 324
24458: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
24459: LD_EXP 37
24463: IFFALSE 24471
24465: PUSH
24466: LD_EXP 53
24470: AND
24471: IFFALSE 24554
24473: GO 24475
24475: DISABLE
24476: LD_INT 0
24478: PPUSH
24479: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
24480: LD_ADDR_VAR 0 2
24484: PUSH
24485: LD_INT 22
24487: PUSH
24488: LD_OWVAR 2
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 21
24499: PUSH
24500: LD_INT 3
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: PPUSH
24511: CALL_OW 69
24515: ST_TO_ADDR
// if not tmp then
24516: LD_VAR 0 2
24520: NOT
24521: IFFALSE 24525
// exit ;
24523: GO 24554
// for i in tmp do
24525: LD_ADDR_VAR 0 1
24529: PUSH
24530: LD_VAR 0 2
24534: PUSH
24535: FOR_IN
24536: IFFALSE 24552
// SetBLevel ( i , 10 ) ;
24538: LD_VAR 0 1
24542: PPUSH
24543: LD_INT 10
24545: PPUSH
24546: CALL_OW 241
24550: GO 24535
24552: POP
24553: POP
// end ;
24554: PPOPN 2
24556: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
24557: LD_EXP 37
24561: IFFALSE 24569
24563: PUSH
24564: LD_EXP 54
24568: AND
24569: IFFALSE 24680
24571: GO 24573
24573: DISABLE
24574: LD_INT 0
24576: PPUSH
24577: PPUSH
24578: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24579: LD_ADDR_VAR 0 3
24583: PUSH
24584: LD_INT 22
24586: PUSH
24587: LD_OWVAR 2
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: PUSH
24596: LD_INT 25
24598: PUSH
24599: LD_INT 1
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PPUSH
24610: CALL_OW 69
24614: ST_TO_ADDR
// if not tmp then
24615: LD_VAR 0 3
24619: NOT
24620: IFFALSE 24624
// exit ;
24622: GO 24680
// un := tmp [ rand ( 1 , tmp ) ] ;
24624: LD_ADDR_VAR 0 2
24628: PUSH
24629: LD_VAR 0 3
24633: PUSH
24634: LD_INT 1
24636: PPUSH
24637: LD_VAR 0 3
24641: PPUSH
24642: CALL_OW 12
24646: ARRAY
24647: ST_TO_ADDR
// if Crawls ( un ) then
24648: LD_VAR 0 2
24652: PPUSH
24653: CALL_OW 318
24657: IFFALSE 24668
// ComWalk ( un ) ;
24659: LD_VAR 0 2
24663: PPUSH
24664: CALL_OW 138
// SetClass ( un , class_sniper ) ;
24668: LD_VAR 0 2
24672: PPUSH
24673: LD_INT 5
24675: PPUSH
24676: CALL_OW 336
// end ;
24680: PPOPN 3
24682: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
24683: LD_EXP 37
24687: IFFALSE 24695
24689: PUSH
24690: LD_EXP 55
24694: AND
24695: IFFALSE 24707
24697: PUSH
24698: LD_OWVAR 67
24702: PUSH
24703: LD_INT 4
24705: LESS
24706: AND
24707: IFFALSE 24726
24709: GO 24711
24711: DISABLE
// begin Difficulty := Difficulty + 1 ;
24712: LD_ADDR_OWVAR 67
24716: PUSH
24717: LD_OWVAR 67
24721: PUSH
24722: LD_INT 1
24724: PLUS
24725: ST_TO_ADDR
// end ;
24726: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
24727: LD_EXP 37
24731: IFFALSE 24739
24733: PUSH
24734: LD_EXP 56
24738: AND
24739: IFFALSE 24842
24741: GO 24743
24743: DISABLE
24744: LD_INT 0
24746: PPUSH
// begin for i := 1 to 5 do
24747: LD_ADDR_VAR 0 1
24751: PUSH
24752: DOUBLE
24753: LD_INT 1
24755: DEC
24756: ST_TO_ADDR
24757: LD_INT 5
24759: PUSH
24760: FOR_TO
24761: IFFALSE 24840
// begin uc_nation := nation_nature ;
24763: LD_ADDR_OWVAR 21
24767: PUSH
24768: LD_INT 0
24770: ST_TO_ADDR
// uc_side := 0 ;
24771: LD_ADDR_OWVAR 20
24775: PUSH
24776: LD_INT 0
24778: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24779: LD_ADDR_OWVAR 29
24783: PUSH
24784: LD_INT 12
24786: PUSH
24787: LD_INT 12
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: ST_TO_ADDR
// hc_agressivity := 20 ;
24794: LD_ADDR_OWVAR 35
24798: PUSH
24799: LD_INT 20
24801: ST_TO_ADDR
// hc_class := class_tiger ;
24802: LD_ADDR_OWVAR 28
24806: PUSH
24807: LD_INT 14
24809: ST_TO_ADDR
// hc_gallery :=  ;
24810: LD_ADDR_OWVAR 33
24814: PUSH
24815: LD_STRING 
24817: ST_TO_ADDR
// hc_name :=  ;
24818: LD_ADDR_OWVAR 26
24822: PUSH
24823: LD_STRING 
24825: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
24826: CALL_OW 44
24830: PPUSH
24831: LD_INT 0
24833: PPUSH
24834: CALL_OW 51
// end ;
24838: GO 24760
24840: POP
24841: POP
// end ;
24842: PPOPN 1
24844: END
// every 0 0$1 trigger StreamModeActive and sBomb do
24845: LD_EXP 37
24849: IFFALSE 24857
24851: PUSH
24852: LD_EXP 57
24856: AND
24857: IFFALSE 24866
24859: GO 24861
24861: DISABLE
// StreamSibBomb ;
24862: CALL 24867 0 0
24866: END
// export function StreamSibBomb ; var i , x , y ; begin
24867: LD_INT 0
24869: PPUSH
24870: PPUSH
24871: PPUSH
24872: PPUSH
// result := false ;
24873: LD_ADDR_VAR 0 1
24877: PUSH
24878: LD_INT 0
24880: ST_TO_ADDR
// for i := 1 to 16 do
24881: LD_ADDR_VAR 0 2
24885: PUSH
24886: DOUBLE
24887: LD_INT 1
24889: DEC
24890: ST_TO_ADDR
24891: LD_INT 16
24893: PUSH
24894: FOR_TO
24895: IFFALSE 25094
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24897: LD_ADDR_VAR 0 3
24901: PUSH
24902: LD_INT 10
24904: PUSH
24905: LD_INT 20
24907: PUSH
24908: LD_INT 30
24910: PUSH
24911: LD_INT 40
24913: PUSH
24914: LD_INT 50
24916: PUSH
24917: LD_INT 60
24919: PUSH
24920: LD_INT 70
24922: PUSH
24923: LD_INT 80
24925: PUSH
24926: LD_INT 90
24928: PUSH
24929: LD_INT 100
24931: PUSH
24932: LD_INT 110
24934: PUSH
24935: LD_INT 120
24937: PUSH
24938: LD_INT 130
24940: PUSH
24941: LD_INT 140
24943: PUSH
24944: LD_INT 150
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 1
24966: PPUSH
24967: LD_INT 15
24969: PPUSH
24970: CALL_OW 12
24974: ARRAY
24975: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
24976: LD_ADDR_VAR 0 4
24980: PUSH
24981: LD_INT 10
24983: PUSH
24984: LD_INT 20
24986: PUSH
24987: LD_INT 30
24989: PUSH
24990: LD_INT 40
24992: PUSH
24993: LD_INT 50
24995: PUSH
24996: LD_INT 60
24998: PUSH
24999: LD_INT 70
25001: PUSH
25002: LD_INT 80
25004: PUSH
25005: LD_INT 90
25007: PUSH
25008: LD_INT 100
25010: PUSH
25011: LD_INT 110
25013: PUSH
25014: LD_INT 120
25016: PUSH
25017: LD_INT 130
25019: PUSH
25020: LD_INT 140
25022: PUSH
25023: LD_INT 150
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 1
25045: PPUSH
25046: LD_INT 15
25048: PPUSH
25049: CALL_OW 12
25053: ARRAY
25054: ST_TO_ADDR
// if ValidHex ( x , y ) then
25055: LD_VAR 0 3
25059: PPUSH
25060: LD_VAR 0 4
25064: PPUSH
25065: CALL_OW 488
25069: IFFALSE 25092
// begin result := [ x , y ] ;
25071: LD_ADDR_VAR 0 1
25075: PUSH
25076: LD_VAR 0 3
25080: PUSH
25081: LD_VAR 0 4
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: ST_TO_ADDR
// break ;
25090: GO 25094
// end ; end ;
25092: GO 24894
25094: POP
25095: POP
// if result then
25096: LD_VAR 0 1
25100: IFFALSE 25160
// begin ToLua ( playSibBomb() ) ;
25102: LD_STRING playSibBomb()
25104: PPUSH
25105: CALL_OW 559
// wait ( 0 0$14 ) ;
25109: LD_INT 490
25111: PPUSH
25112: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
25116: LD_VAR 0 1
25120: PUSH
25121: LD_INT 1
25123: ARRAY
25124: PPUSH
25125: LD_VAR 0 1
25129: PUSH
25130: LD_INT 2
25132: ARRAY
25133: PPUSH
25134: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
25138: LD_VAR 0 1
25142: PUSH
25143: LD_INT 1
25145: ARRAY
25146: PPUSH
25147: LD_VAR 0 1
25151: PUSH
25152: LD_INT 2
25154: ARRAY
25155: PPUSH
25156: CALL_OW 429
// end ; end ;
25160: LD_VAR 0 1
25164: RET
// every 0 0$1 trigger StreamModeActive and sReset do
25165: LD_EXP 37
25169: IFFALSE 25177
25171: PUSH
25172: LD_EXP 59
25176: AND
25177: IFFALSE 25189
25179: GO 25181
25181: DISABLE
// YouLost (  ) ;
25182: LD_STRING 
25184: PPUSH
25185: CALL_OW 104
25189: END
// every 0 0$1 trigger StreamModeActive and sFog do
25190: LD_EXP 37
25194: IFFALSE 25202
25196: PUSH
25197: LD_EXP 58
25201: AND
25202: IFFALSE 25216
25204: GO 25206
25206: DISABLE
// FogOff ( your_side ) ;
25207: LD_OWVAR 2
25211: PPUSH
25212: CALL_OW 344
25216: END
// every 0 0$1 trigger StreamModeActive and sSun do
25217: LD_EXP 37
25221: IFFALSE 25229
25223: PUSH
25224: LD_EXP 60
25228: AND
25229: IFFALSE 25257
25231: GO 25233
25233: DISABLE
// begin solar_recharge_percent := 0 ;
25234: LD_ADDR_OWVAR 79
25238: PUSH
25239: LD_INT 0
25241: ST_TO_ADDR
// wait ( 5 5$00 ) ;
25242: LD_INT 10500
25244: PPUSH
25245: CALL_OW 67
// solar_recharge_percent := 100 ;
25249: LD_ADDR_OWVAR 79
25253: PUSH
25254: LD_INT 100
25256: ST_TO_ADDR
// end ;
25257: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
25258: LD_EXP 37
25262: IFFALSE 25270
25264: PUSH
25265: LD_EXP 61
25269: AND
25270: IFFALSE 25509
25272: GO 25274
25274: DISABLE
25275: LD_INT 0
25277: PPUSH
25278: PPUSH
25279: PPUSH
// begin tmp := [ ] ;
25280: LD_ADDR_VAR 0 3
25284: PUSH
25285: EMPTY
25286: ST_TO_ADDR
// for i := 1 to 6 do
25287: LD_ADDR_VAR 0 1
25291: PUSH
25292: DOUBLE
25293: LD_INT 1
25295: DEC
25296: ST_TO_ADDR
25297: LD_INT 6
25299: PUSH
25300: FOR_TO
25301: IFFALSE 25406
// begin uc_nation := nation_nature ;
25303: LD_ADDR_OWVAR 21
25307: PUSH
25308: LD_INT 0
25310: ST_TO_ADDR
// uc_side := 0 ;
25311: LD_ADDR_OWVAR 20
25315: PUSH
25316: LD_INT 0
25318: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
25319: LD_ADDR_OWVAR 29
25323: PUSH
25324: LD_INT 12
25326: PUSH
25327: LD_INT 12
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: ST_TO_ADDR
// hc_agressivity := 20 ;
25334: LD_ADDR_OWVAR 35
25338: PUSH
25339: LD_INT 20
25341: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
25342: LD_ADDR_OWVAR 28
25346: PUSH
25347: LD_INT 17
25349: ST_TO_ADDR
// hc_gallery :=  ;
25350: LD_ADDR_OWVAR 33
25354: PUSH
25355: LD_STRING 
25357: ST_TO_ADDR
// hc_name :=  ;
25358: LD_ADDR_OWVAR 26
25362: PUSH
25363: LD_STRING 
25365: ST_TO_ADDR
// un := CreateHuman ;
25366: LD_ADDR_VAR 0 2
25370: PUSH
25371: CALL_OW 44
25375: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
25376: LD_VAR 0 2
25380: PPUSH
25381: LD_INT 1
25383: PPUSH
25384: CALL_OW 51
// tmp := tmp ^ un ;
25388: LD_ADDR_VAR 0 3
25392: PUSH
25393: LD_VAR 0 3
25397: PUSH
25398: LD_VAR 0 2
25402: ADD
25403: ST_TO_ADDR
// end ;
25404: GO 25300
25406: POP
25407: POP
// repeat wait ( 0 0$1 ) ;
25408: LD_INT 35
25410: PPUSH
25411: CALL_OW 67
// for un in tmp do
25415: LD_ADDR_VAR 0 2
25419: PUSH
25420: LD_VAR 0 3
25424: PUSH
25425: FOR_IN
25426: IFFALSE 25500
// begin if IsDead ( un ) then
25428: LD_VAR 0 2
25432: PPUSH
25433: CALL_OW 301
25437: IFFALSE 25457
// begin tmp := tmp diff un ;
25439: LD_ADDR_VAR 0 3
25443: PUSH
25444: LD_VAR 0 3
25448: PUSH
25449: LD_VAR 0 2
25453: DIFF
25454: ST_TO_ADDR
// continue ;
25455: GO 25425
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
25457: LD_VAR 0 2
25461: PPUSH
25462: LD_INT 3
25464: PUSH
25465: LD_INT 22
25467: PUSH
25468: LD_INT 0
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PPUSH
25479: CALL_OW 69
25483: PPUSH
25484: LD_VAR 0 2
25488: PPUSH
25489: CALL_OW 74
25493: PPUSH
25494: CALL_OW 115
// end ;
25498: GO 25425
25500: POP
25501: POP
// until not tmp ;
25502: LD_VAR 0 3
25506: NOT
25507: IFFALSE 25408
// end ;
25509: PPOPN 3
25511: END
// every 0 0$1 trigger StreamModeActive and sTroll do
25512: LD_EXP 37
25516: IFFALSE 25524
25518: PUSH
25519: LD_EXP 62
25523: AND
25524: IFFALSE 25578
25526: GO 25528
25528: DISABLE
// begin ToLua ( displayTroll(); ) ;
25529: LD_STRING displayTroll();
25531: PPUSH
25532: CALL_OW 559
// wait ( 3 3$00 ) ;
25536: LD_INT 6300
25538: PPUSH
25539: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25543: LD_STRING hideTroll();
25545: PPUSH
25546: CALL_OW 559
// wait ( 1 1$00 ) ;
25550: LD_INT 2100
25552: PPUSH
25553: CALL_OW 67
// ToLua ( displayTroll(); ) ;
25557: LD_STRING displayTroll();
25559: PPUSH
25560: CALL_OW 559
// wait ( 1 1$00 ) ;
25564: LD_INT 2100
25566: PPUSH
25567: CALL_OW 67
// ToLua ( hideTroll(); ) ;
25571: LD_STRING hideTroll();
25573: PPUSH
25574: CALL_OW 559
// end ;
25578: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
25579: LD_EXP 37
25583: IFFALSE 25591
25585: PUSH
25586: LD_EXP 63
25590: AND
25591: IFFALSE 25654
25593: GO 25595
25595: DISABLE
25596: LD_INT 0
25598: PPUSH
// begin p := 0 ;
25599: LD_ADDR_VAR 0 1
25603: PUSH
25604: LD_INT 0
25606: ST_TO_ADDR
// repeat game_speed := 1 ;
25607: LD_ADDR_OWVAR 65
25611: PUSH
25612: LD_INT 1
25614: ST_TO_ADDR
// wait ( 0 0$1 ) ;
25615: LD_INT 35
25617: PPUSH
25618: CALL_OW 67
// p := p + 1 ;
25622: LD_ADDR_VAR 0 1
25626: PUSH
25627: LD_VAR 0 1
25631: PUSH
25632: LD_INT 1
25634: PLUS
25635: ST_TO_ADDR
// until p >= 60 ;
25636: LD_VAR 0 1
25640: PUSH
25641: LD_INT 60
25643: GREATEREQUAL
25644: IFFALSE 25607
// game_speed := 4 ;
25646: LD_ADDR_OWVAR 65
25650: PUSH
25651: LD_INT 4
25653: ST_TO_ADDR
// end ;
25654: PPOPN 1
25656: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
25657: LD_EXP 37
25661: IFFALSE 25669
25663: PUSH
25664: LD_EXP 64
25668: AND
25669: IFFALSE 25815
25671: GO 25673
25673: DISABLE
25674: LD_INT 0
25676: PPUSH
25677: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25678: LD_ADDR_VAR 0 1
25682: PUSH
25683: LD_INT 22
25685: PUSH
25686: LD_OWVAR 2
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: LD_INT 2
25697: PUSH
25698: LD_INT 30
25700: PUSH
25701: LD_INT 0
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: LD_INT 30
25710: PUSH
25711: LD_INT 1
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: LIST
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PPUSH
25727: CALL_OW 69
25731: ST_TO_ADDR
// if not depot then
25732: LD_VAR 0 1
25736: NOT
25737: IFFALSE 25741
// exit ;
25739: GO 25815
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
25741: LD_ADDR_VAR 0 2
25745: PUSH
25746: LD_VAR 0 1
25750: PUSH
25751: LD_INT 1
25753: PPUSH
25754: LD_VAR 0 1
25758: PPUSH
25759: CALL_OW 12
25763: ARRAY
25764: PPUSH
25765: CALL_OW 274
25769: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
25770: LD_VAR 0 2
25774: PPUSH
25775: LD_INT 1
25777: PPUSH
25778: LD_INT 0
25780: PPUSH
25781: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
25785: LD_VAR 0 2
25789: PPUSH
25790: LD_INT 2
25792: PPUSH
25793: LD_INT 0
25795: PPUSH
25796: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
25800: LD_VAR 0 2
25804: PPUSH
25805: LD_INT 3
25807: PPUSH
25808: LD_INT 0
25810: PPUSH
25811: CALL_OW 277
// end ;
25815: PPOPN 2
25817: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
25818: LD_EXP 37
25822: IFFALSE 25830
25824: PUSH
25825: LD_EXP 65
25829: AND
25830: IFFALSE 25927
25832: GO 25834
25834: DISABLE
25835: LD_INT 0
25837: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25838: LD_ADDR_VAR 0 1
25842: PUSH
25843: LD_INT 22
25845: PUSH
25846: LD_OWVAR 2
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 21
25857: PUSH
25858: LD_INT 1
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PUSH
25865: LD_INT 3
25867: PUSH
25868: LD_INT 23
25870: PUSH
25871: LD_INT 0
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: LIST
25886: PPUSH
25887: CALL_OW 69
25891: ST_TO_ADDR
// if not tmp then
25892: LD_VAR 0 1
25896: NOT
25897: IFFALSE 25901
// exit ;
25899: GO 25927
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
25901: LD_VAR 0 1
25905: PUSH
25906: LD_INT 1
25908: PPUSH
25909: LD_VAR 0 1
25913: PPUSH
25914: CALL_OW 12
25918: ARRAY
25919: PPUSH
25920: LD_INT 200
25922: PPUSH
25923: CALL_OW 234
// end ;
25927: PPOPN 1
25929: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
25930: LD_EXP 37
25934: IFFALSE 25942
25936: PUSH
25937: LD_EXP 66
25941: AND
25942: IFFALSE 26021
25944: GO 25946
25946: DISABLE
25947: LD_INT 0
25949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
25950: LD_ADDR_VAR 0 1
25954: PUSH
25955: LD_INT 22
25957: PUSH
25958: LD_OWVAR 2
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: LD_INT 21
25969: PUSH
25970: LD_INT 2
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PPUSH
25981: CALL_OW 69
25985: ST_TO_ADDR
// if not tmp then
25986: LD_VAR 0 1
25990: NOT
25991: IFFALSE 25995
// exit ;
25993: GO 26021
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
25995: LD_VAR 0 1
25999: PUSH
26000: LD_INT 1
26002: PPUSH
26003: LD_VAR 0 1
26007: PPUSH
26008: CALL_OW 12
26012: ARRAY
26013: PPUSH
26014: LD_INT 60
26016: PPUSH
26017: CALL_OW 234
// end ;
26021: PPOPN 1
26023: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
26024: LD_EXP 37
26028: IFFALSE 26036
26030: PUSH
26031: LD_EXP 67
26035: AND
26036: IFFALSE 26135
26038: GO 26040
26040: DISABLE
26041: LD_INT 0
26043: PPUSH
26044: PPUSH
// begin enable ;
26045: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
26046: LD_ADDR_VAR 0 1
26050: PUSH
26051: LD_INT 22
26053: PUSH
26054: LD_OWVAR 2
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PUSH
26063: LD_INT 61
26065: PUSH
26066: EMPTY
26067: LIST
26068: PUSH
26069: LD_INT 33
26071: PUSH
26072: LD_INT 2
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: LIST
26083: PPUSH
26084: CALL_OW 69
26088: ST_TO_ADDR
// if not tmp then
26089: LD_VAR 0 1
26093: NOT
26094: IFFALSE 26098
// exit ;
26096: GO 26135
// for i in tmp do
26098: LD_ADDR_VAR 0 2
26102: PUSH
26103: LD_VAR 0 1
26107: PUSH
26108: FOR_IN
26109: IFFALSE 26133
// if IsControledBy ( i ) then
26111: LD_VAR 0 2
26115: PPUSH
26116: CALL_OW 312
26120: IFFALSE 26131
// ComUnlink ( i ) ;
26122: LD_VAR 0 2
26126: PPUSH
26127: CALL_OW 136
26131: GO 26108
26133: POP
26134: POP
// end ;
26135: PPOPN 2
26137: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
26138: LD_EXP 37
26142: IFFALSE 26150
26144: PUSH
26145: LD_EXP 68
26149: AND
26150: IFFALSE 26290
26152: GO 26154
26154: DISABLE
26155: LD_INT 0
26157: PPUSH
26158: PPUSH
// begin ToLua ( displayPowell(); ) ;
26159: LD_STRING displayPowell();
26161: PPUSH
26162: CALL_OW 559
// uc_side := 0 ;
26166: LD_ADDR_OWVAR 20
26170: PUSH
26171: LD_INT 0
26173: ST_TO_ADDR
// uc_nation := 2 ;
26174: LD_ADDR_OWVAR 21
26178: PUSH
26179: LD_INT 2
26181: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26182: LD_ADDR_OWVAR 37
26186: PUSH
26187: LD_INT 14
26189: ST_TO_ADDR
// vc_engine := engine_siberite ;
26190: LD_ADDR_OWVAR 39
26194: PUSH
26195: LD_INT 3
26197: ST_TO_ADDR
// vc_control := control_apeman ;
26198: LD_ADDR_OWVAR 38
26202: PUSH
26203: LD_INT 5
26205: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
26206: LD_ADDR_OWVAR 40
26210: PUSH
26211: LD_INT 29
26213: ST_TO_ADDR
// un := CreateVehicle ;
26214: LD_ADDR_VAR 0 2
26218: PUSH
26219: CALL_OW 45
26223: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26224: LD_VAR 0 2
26228: PPUSH
26229: LD_INT 1
26231: PPUSH
26232: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
26236: LD_INT 35
26238: PPUSH
26239: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
26243: LD_VAR 0 2
26247: PPUSH
26248: LD_INT 22
26250: PUSH
26251: LD_OWVAR 2
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PPUSH
26260: CALL_OW 69
26264: PPUSH
26265: LD_VAR 0 2
26269: PPUSH
26270: CALL_OW 74
26274: PPUSH
26275: CALL_OW 115
// until IsDead ( un ) ;
26279: LD_VAR 0 2
26283: PPUSH
26284: CALL_OW 301
26288: IFFALSE 26236
// end ;
26290: PPOPN 2
26292: END
// every 0 0$1 trigger StreamModeActive and sStu do
26293: LD_EXP 37
26297: IFFALSE 26305
26299: PUSH
26300: LD_EXP 76
26304: AND
26305: IFFALSE 26321
26307: GO 26309
26309: DISABLE
// begin ToLua ( displayStucuk(); ) ;
26310: LD_STRING displayStucuk();
26312: PPUSH
26313: CALL_OW 559
// ResetFog ;
26317: CALL_OW 335
// end ;
26321: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
26322: LD_EXP 37
26326: IFFALSE 26334
26328: PUSH
26329: LD_EXP 69
26333: AND
26334: IFFALSE 26475
26336: GO 26338
26338: DISABLE
26339: LD_INT 0
26341: PPUSH
26342: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26343: LD_ADDR_VAR 0 2
26347: PUSH
26348: LD_INT 22
26350: PUSH
26351: LD_OWVAR 2
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 21
26362: PUSH
26363: LD_INT 1
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PPUSH
26374: CALL_OW 69
26378: ST_TO_ADDR
// if not tmp then
26379: LD_VAR 0 2
26383: NOT
26384: IFFALSE 26388
// exit ;
26386: GO 26475
// un := tmp [ rand ( 1 , tmp ) ] ;
26388: LD_ADDR_VAR 0 1
26392: PUSH
26393: LD_VAR 0 2
26397: PUSH
26398: LD_INT 1
26400: PPUSH
26401: LD_VAR 0 2
26405: PPUSH
26406: CALL_OW 12
26410: ARRAY
26411: ST_TO_ADDR
// SetSide ( un , 0 ) ;
26412: LD_VAR 0 1
26416: PPUSH
26417: LD_INT 0
26419: PPUSH
26420: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
26424: LD_VAR 0 1
26428: PPUSH
26429: LD_OWVAR 3
26433: PUSH
26434: LD_VAR 0 1
26438: DIFF
26439: PPUSH
26440: LD_VAR 0 1
26444: PPUSH
26445: CALL_OW 74
26449: PPUSH
26450: CALL_OW 115
// wait ( 0 0$20 ) ;
26454: LD_INT 700
26456: PPUSH
26457: CALL_OW 67
// SetSide ( un , your_side ) ;
26461: LD_VAR 0 1
26465: PPUSH
26466: LD_OWVAR 2
26470: PPUSH
26471: CALL_OW 235
// end ;
26475: PPOPN 2
26477: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
26478: LD_EXP 37
26482: IFFALSE 26490
26484: PUSH
26485: LD_EXP 70
26489: AND
26490: IFFALSE 26596
26492: GO 26494
26494: DISABLE
26495: LD_INT 0
26497: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26498: LD_ADDR_VAR 0 1
26502: PUSH
26503: LD_INT 22
26505: PUSH
26506: LD_OWVAR 2
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: LD_INT 2
26517: PUSH
26518: LD_INT 30
26520: PUSH
26521: LD_INT 0
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: LD_INT 30
26530: PUSH
26531: LD_INT 1
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: LIST
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PPUSH
26547: CALL_OW 69
26551: ST_TO_ADDR
// if not depot then
26552: LD_VAR 0 1
26556: NOT
26557: IFFALSE 26561
// exit ;
26559: GO 26596
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
26561: LD_VAR 0 1
26565: PUSH
26566: LD_INT 1
26568: ARRAY
26569: PPUSH
26570: CALL_OW 250
26574: PPUSH
26575: LD_VAR 0 1
26579: PUSH
26580: LD_INT 1
26582: ARRAY
26583: PPUSH
26584: CALL_OW 251
26588: PPUSH
26589: LD_INT 70
26591: PPUSH
26592: CALL_OW 495
// end ;
26596: PPOPN 1
26598: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
26599: LD_EXP 37
26603: IFFALSE 26611
26605: PUSH
26606: LD_EXP 71
26610: AND
26611: IFFALSE 26822
26613: GO 26615
26615: DISABLE
26616: LD_INT 0
26618: PPUSH
26619: PPUSH
26620: PPUSH
26621: PPUSH
26622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26623: LD_ADDR_VAR 0 5
26627: PUSH
26628: LD_INT 22
26630: PUSH
26631: LD_OWVAR 2
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PUSH
26640: LD_INT 21
26642: PUSH
26643: LD_INT 1
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PPUSH
26654: CALL_OW 69
26658: ST_TO_ADDR
// if not tmp then
26659: LD_VAR 0 5
26663: NOT
26664: IFFALSE 26668
// exit ;
26666: GO 26822
// for i in tmp do
26668: LD_ADDR_VAR 0 1
26672: PUSH
26673: LD_VAR 0 5
26677: PUSH
26678: FOR_IN
26679: IFFALSE 26820
// begin d := rand ( 0 , 5 ) ;
26681: LD_ADDR_VAR 0 4
26685: PUSH
26686: LD_INT 0
26688: PPUSH
26689: LD_INT 5
26691: PPUSH
26692: CALL_OW 12
26696: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
26697: LD_ADDR_VAR 0 2
26701: PUSH
26702: LD_VAR 0 1
26706: PPUSH
26707: CALL_OW 250
26711: PPUSH
26712: LD_VAR 0 4
26716: PPUSH
26717: LD_INT 3
26719: PPUSH
26720: LD_INT 12
26722: PPUSH
26723: CALL_OW 12
26727: PPUSH
26728: CALL_OW 272
26732: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
26733: LD_ADDR_VAR 0 3
26737: PUSH
26738: LD_VAR 0 1
26742: PPUSH
26743: CALL_OW 251
26747: PPUSH
26748: LD_VAR 0 4
26752: PPUSH
26753: LD_INT 3
26755: PPUSH
26756: LD_INT 12
26758: PPUSH
26759: CALL_OW 12
26763: PPUSH
26764: CALL_OW 273
26768: ST_TO_ADDR
// if ValidHex ( x , y ) then
26769: LD_VAR 0 2
26773: PPUSH
26774: LD_VAR 0 3
26778: PPUSH
26779: CALL_OW 488
26783: IFFALSE 26818
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
26785: LD_VAR 0 1
26789: PPUSH
26790: LD_VAR 0 2
26794: PPUSH
26795: LD_VAR 0 3
26799: PPUSH
26800: LD_INT 3
26802: PPUSH
26803: LD_INT 6
26805: PPUSH
26806: CALL_OW 12
26810: PPUSH
26811: LD_INT 1
26813: PPUSH
26814: CALL_OW 483
// end ;
26818: GO 26678
26820: POP
26821: POP
// end ;
26822: PPOPN 5
26824: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
26825: LD_EXP 37
26829: IFFALSE 26837
26831: PUSH
26832: LD_EXP 72
26836: AND
26837: IFFALSE 26931
26839: GO 26841
26841: DISABLE
26842: LD_INT 0
26844: PPUSH
26845: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
26846: LD_ADDR_VAR 0 2
26850: PUSH
26851: LD_INT 22
26853: PUSH
26854: LD_OWVAR 2
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_INT 32
26865: PUSH
26866: LD_INT 1
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: LD_INT 21
26875: PUSH
26876: LD_INT 2
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: LIST
26887: PPUSH
26888: CALL_OW 69
26892: ST_TO_ADDR
// if not tmp then
26893: LD_VAR 0 2
26897: NOT
26898: IFFALSE 26902
// exit ;
26900: GO 26931
// for i in tmp do
26902: LD_ADDR_VAR 0 1
26906: PUSH
26907: LD_VAR 0 2
26911: PUSH
26912: FOR_IN
26913: IFFALSE 26929
// SetFuel ( i , 0 ) ;
26915: LD_VAR 0 1
26919: PPUSH
26920: LD_INT 0
26922: PPUSH
26923: CALL_OW 240
26927: GO 26912
26929: POP
26930: POP
// end ;
26931: PPOPN 2
26933: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
26934: LD_EXP 37
26938: IFFALSE 26946
26940: PUSH
26941: LD_EXP 73
26945: AND
26946: IFFALSE 27012
26948: GO 26950
26950: DISABLE
26951: LD_INT 0
26953: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26954: LD_ADDR_VAR 0 1
26958: PUSH
26959: LD_INT 22
26961: PUSH
26962: LD_OWVAR 2
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: LD_INT 30
26973: PUSH
26974: LD_INT 29
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PPUSH
26985: CALL_OW 69
26989: ST_TO_ADDR
// if not tmp then
26990: LD_VAR 0 1
26994: NOT
26995: IFFALSE 26999
// exit ;
26997: GO 27012
// DestroyUnit ( tmp [ 1 ] ) ;
26999: LD_VAR 0 1
27003: PUSH
27004: LD_INT 1
27006: ARRAY
27007: PPUSH
27008: CALL_OW 65
// end ;
27012: PPOPN 1
27014: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
27015: LD_EXP 37
27019: IFFALSE 27027
27021: PUSH
27022: LD_EXP 75
27026: AND
27027: IFFALSE 27156
27029: GO 27031
27031: DISABLE
27032: LD_INT 0
27034: PPUSH
// begin uc_side := 0 ;
27035: LD_ADDR_OWVAR 20
27039: PUSH
27040: LD_INT 0
27042: ST_TO_ADDR
// uc_nation := nation_arabian ;
27043: LD_ADDR_OWVAR 21
27047: PUSH
27048: LD_INT 2
27050: ST_TO_ADDR
// hc_gallery :=  ;
27051: LD_ADDR_OWVAR 33
27055: PUSH
27056: LD_STRING 
27058: ST_TO_ADDR
// hc_name :=  ;
27059: LD_ADDR_OWVAR 26
27063: PUSH
27064: LD_STRING 
27066: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
27067: LD_INT 1
27069: PPUSH
27070: LD_INT 11
27072: PPUSH
27073: LD_INT 10
27075: PPUSH
27076: CALL_OW 380
// un := CreateHuman ;
27080: LD_ADDR_VAR 0 1
27084: PUSH
27085: CALL_OW 44
27089: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27090: LD_VAR 0 1
27094: PPUSH
27095: LD_INT 1
27097: PPUSH
27098: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27102: LD_INT 35
27104: PPUSH
27105: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27109: LD_VAR 0 1
27113: PPUSH
27114: LD_INT 22
27116: PUSH
27117: LD_OWVAR 2
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PPUSH
27126: CALL_OW 69
27130: PPUSH
27131: LD_VAR 0 1
27135: PPUSH
27136: CALL_OW 74
27140: PPUSH
27141: CALL_OW 115
// until IsDead ( un ) ;
27145: LD_VAR 0 1
27149: PPUSH
27150: CALL_OW 301
27154: IFFALSE 27102
// end ;
27156: PPOPN 1
27158: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
27159: LD_EXP 37
27163: IFFALSE 27171
27165: PUSH
27166: LD_EXP 77
27170: AND
27171: IFFALSE 27183
27173: GO 27175
27175: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
27176: LD_STRING earthquake(getX(game), 0, 32)
27178: PPUSH
27179: CALL_OW 559
27183: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
27184: LD_EXP 37
27188: IFFALSE 27196
27190: PUSH
27191: LD_EXP 78
27195: AND
27196: IFFALSE 27287
27198: GO 27200
27200: DISABLE
27201: LD_INT 0
27203: PPUSH
// begin enable ;
27204: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
27205: LD_ADDR_VAR 0 1
27209: PUSH
27210: LD_INT 22
27212: PUSH
27213: LD_OWVAR 2
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: LD_INT 21
27224: PUSH
27225: LD_INT 2
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 33
27234: PUSH
27235: LD_INT 3
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: LIST
27246: PPUSH
27247: CALL_OW 69
27251: ST_TO_ADDR
// if not tmp then
27252: LD_VAR 0 1
27256: NOT
27257: IFFALSE 27261
// exit ;
27259: GO 27287
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27261: LD_VAR 0 1
27265: PUSH
27266: LD_INT 1
27268: PPUSH
27269: LD_VAR 0 1
27273: PPUSH
27274: CALL_OW 12
27278: ARRAY
27279: PPUSH
27280: LD_INT 1
27282: PPUSH
27283: CALL_OW 234
// end ;
27287: PPOPN 1
27289: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
27290: LD_EXP 37
27294: IFFALSE 27302
27296: PUSH
27297: LD_EXP 79
27301: AND
27302: IFFALSE 27443
27304: GO 27306
27306: DISABLE
27307: LD_INT 0
27309: PPUSH
27310: PPUSH
27311: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27312: LD_ADDR_VAR 0 3
27316: PUSH
27317: LD_INT 22
27319: PUSH
27320: LD_OWVAR 2
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: LD_INT 25
27331: PUSH
27332: LD_INT 1
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PPUSH
27343: CALL_OW 69
27347: ST_TO_ADDR
// if not tmp then
27348: LD_VAR 0 3
27352: NOT
27353: IFFALSE 27357
// exit ;
27355: GO 27443
// un := tmp [ rand ( 1 , tmp ) ] ;
27357: LD_ADDR_VAR 0 2
27361: PUSH
27362: LD_VAR 0 3
27366: PUSH
27367: LD_INT 1
27369: PPUSH
27370: LD_VAR 0 3
27374: PPUSH
27375: CALL_OW 12
27379: ARRAY
27380: ST_TO_ADDR
// if Crawls ( un ) then
27381: LD_VAR 0 2
27385: PPUSH
27386: CALL_OW 318
27390: IFFALSE 27401
// ComWalk ( un ) ;
27392: LD_VAR 0 2
27396: PPUSH
27397: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
27401: LD_VAR 0 2
27405: PPUSH
27406: LD_INT 9
27408: PPUSH
27409: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
27413: LD_INT 28
27415: PPUSH
27416: LD_OWVAR 2
27420: PPUSH
27421: LD_INT 2
27423: PPUSH
27424: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
27428: LD_INT 29
27430: PPUSH
27431: LD_OWVAR 2
27435: PPUSH
27436: LD_INT 2
27438: PPUSH
27439: CALL_OW 322
// end ;
27443: PPOPN 3
27445: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
27446: LD_EXP 37
27450: IFFALSE 27458
27452: PUSH
27453: LD_EXP 80
27457: AND
27458: IFFALSE 27569
27460: GO 27462
27462: DISABLE
27463: LD_INT 0
27465: PPUSH
27466: PPUSH
27467: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27468: LD_ADDR_VAR 0 3
27472: PUSH
27473: LD_INT 22
27475: PUSH
27476: LD_OWVAR 2
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 25
27487: PUSH
27488: LD_INT 1
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PPUSH
27499: CALL_OW 69
27503: ST_TO_ADDR
// if not tmp then
27504: LD_VAR 0 3
27508: NOT
27509: IFFALSE 27513
// exit ;
27511: GO 27569
// un := tmp [ rand ( 1 , tmp ) ] ;
27513: LD_ADDR_VAR 0 2
27517: PUSH
27518: LD_VAR 0 3
27522: PUSH
27523: LD_INT 1
27525: PPUSH
27526: LD_VAR 0 3
27530: PPUSH
27531: CALL_OW 12
27535: ARRAY
27536: ST_TO_ADDR
// if Crawls ( un ) then
27537: LD_VAR 0 2
27541: PPUSH
27542: CALL_OW 318
27546: IFFALSE 27557
// ComWalk ( un ) ;
27548: LD_VAR 0 2
27552: PPUSH
27553: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27557: LD_VAR 0 2
27561: PPUSH
27562: LD_INT 8
27564: PPUSH
27565: CALL_OW 336
// end ;
27569: PPOPN 3
27571: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
27572: LD_EXP 37
27576: IFFALSE 27584
27578: PUSH
27579: LD_EXP 81
27583: AND
27584: IFFALSE 27728
27586: GO 27588
27588: DISABLE
27589: LD_INT 0
27591: PPUSH
27592: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
27593: LD_ADDR_VAR 0 2
27597: PUSH
27598: LD_INT 22
27600: PUSH
27601: LD_OWVAR 2
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 21
27612: PUSH
27613: LD_INT 2
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: LD_INT 2
27622: PUSH
27623: LD_INT 34
27625: PUSH
27626: LD_INT 12
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: LD_INT 34
27635: PUSH
27636: LD_INT 51
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 34
27645: PUSH
27646: LD_INT 32
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: LIST
27663: PPUSH
27664: CALL_OW 69
27668: ST_TO_ADDR
// if not tmp then
27669: LD_VAR 0 2
27673: NOT
27674: IFFALSE 27678
// exit ;
27676: GO 27728
// for i in tmp do
27678: LD_ADDR_VAR 0 1
27682: PUSH
27683: LD_VAR 0 2
27687: PUSH
27688: FOR_IN
27689: IFFALSE 27726
// if GetCargo ( i , mat_artifact ) = 0 then
27691: LD_VAR 0 1
27695: PPUSH
27696: LD_INT 4
27698: PPUSH
27699: CALL_OW 289
27703: PUSH
27704: LD_INT 0
27706: EQUAL
27707: IFFALSE 27724
// SetCargo ( i , mat_siberit , 100 ) ;
27709: LD_VAR 0 1
27713: PPUSH
27714: LD_INT 3
27716: PPUSH
27717: LD_INT 100
27719: PPUSH
27720: CALL_OW 290
27724: GO 27688
27726: POP
27727: POP
// end ;
27728: PPOPN 2
27730: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
27731: LD_EXP 37
27735: IFFALSE 27743
27737: PUSH
27738: LD_EXP 82
27742: AND
27743: IFFALSE 27926
27745: GO 27747
27747: DISABLE
27748: LD_INT 0
27750: PPUSH
27751: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27752: LD_ADDR_VAR 0 2
27756: PUSH
27757: LD_INT 22
27759: PUSH
27760: LD_OWVAR 2
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PPUSH
27769: CALL_OW 69
27773: ST_TO_ADDR
// if not tmp then
27774: LD_VAR 0 2
27778: NOT
27779: IFFALSE 27783
// exit ;
27781: GO 27926
// for i := 1 to 2 do
27783: LD_ADDR_VAR 0 1
27787: PUSH
27788: DOUBLE
27789: LD_INT 1
27791: DEC
27792: ST_TO_ADDR
27793: LD_INT 2
27795: PUSH
27796: FOR_TO
27797: IFFALSE 27924
// begin uc_side := your_side ;
27799: LD_ADDR_OWVAR 20
27803: PUSH
27804: LD_OWVAR 2
27808: ST_TO_ADDR
// uc_nation := nation_american ;
27809: LD_ADDR_OWVAR 21
27813: PUSH
27814: LD_INT 1
27816: ST_TO_ADDR
// vc_chassis := us_morphling ;
27817: LD_ADDR_OWVAR 37
27821: PUSH
27822: LD_INT 5
27824: ST_TO_ADDR
// vc_engine := engine_siberite ;
27825: LD_ADDR_OWVAR 39
27829: PUSH
27830: LD_INT 3
27832: ST_TO_ADDR
// vc_control := control_computer ;
27833: LD_ADDR_OWVAR 38
27837: PUSH
27838: LD_INT 3
27840: ST_TO_ADDR
// vc_weapon := us_double_laser ;
27841: LD_ADDR_OWVAR 40
27845: PUSH
27846: LD_INT 10
27848: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
27849: LD_VAR 0 2
27853: PUSH
27854: LD_INT 1
27856: ARRAY
27857: PPUSH
27858: CALL_OW 310
27862: NOT
27863: IFFALSE 27910
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
27865: CALL_OW 45
27869: PPUSH
27870: LD_VAR 0 2
27874: PUSH
27875: LD_INT 1
27877: ARRAY
27878: PPUSH
27879: CALL_OW 250
27883: PPUSH
27884: LD_VAR 0 2
27888: PUSH
27889: LD_INT 1
27891: ARRAY
27892: PPUSH
27893: CALL_OW 251
27897: PPUSH
27898: LD_INT 12
27900: PPUSH
27901: LD_INT 1
27903: PPUSH
27904: CALL_OW 50
27908: GO 27922
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
27910: CALL_OW 45
27914: PPUSH
27915: LD_INT 1
27917: PPUSH
27918: CALL_OW 51
// end ;
27922: GO 27796
27924: POP
27925: POP
// end ;
27926: PPOPN 2
27928: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
27929: LD_EXP 37
27933: IFFALSE 27941
27935: PUSH
27936: LD_EXP 83
27940: AND
27941: IFFALSE 28163
27943: GO 27945
27945: DISABLE
27946: LD_INT 0
27948: PPUSH
27949: PPUSH
27950: PPUSH
27951: PPUSH
27952: PPUSH
27953: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27954: LD_ADDR_VAR 0 6
27958: PUSH
27959: LD_INT 22
27961: PUSH
27962: LD_OWVAR 2
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: LD_INT 21
27973: PUSH
27974: LD_INT 1
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: LD_INT 3
27983: PUSH
27984: LD_INT 23
27986: PUSH
27987: LD_INT 0
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: LIST
28002: PPUSH
28003: CALL_OW 69
28007: ST_TO_ADDR
// if not tmp then
28008: LD_VAR 0 6
28012: NOT
28013: IFFALSE 28017
// exit ;
28015: GO 28163
// s1 := rand ( 1 , 4 ) ;
28017: LD_ADDR_VAR 0 2
28021: PUSH
28022: LD_INT 1
28024: PPUSH
28025: LD_INT 4
28027: PPUSH
28028: CALL_OW 12
28032: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
28033: LD_ADDR_VAR 0 4
28037: PUSH
28038: LD_VAR 0 6
28042: PUSH
28043: LD_INT 1
28045: ARRAY
28046: PPUSH
28047: LD_VAR 0 2
28051: PPUSH
28052: CALL_OW 259
28056: ST_TO_ADDR
// if s1 = 1 then
28057: LD_VAR 0 2
28061: PUSH
28062: LD_INT 1
28064: EQUAL
28065: IFFALSE 28085
// s2 := rand ( 2 , 4 ) else
28067: LD_ADDR_VAR 0 3
28071: PUSH
28072: LD_INT 2
28074: PPUSH
28075: LD_INT 4
28077: PPUSH
28078: CALL_OW 12
28082: ST_TO_ADDR
28083: GO 28093
// s2 := 1 ;
28085: LD_ADDR_VAR 0 3
28089: PUSH
28090: LD_INT 1
28092: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
28093: LD_ADDR_VAR 0 5
28097: PUSH
28098: LD_VAR 0 6
28102: PUSH
28103: LD_INT 1
28105: ARRAY
28106: PPUSH
28107: LD_VAR 0 3
28111: PPUSH
28112: CALL_OW 259
28116: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
28117: LD_VAR 0 6
28121: PUSH
28122: LD_INT 1
28124: ARRAY
28125: PPUSH
28126: LD_VAR 0 2
28130: PPUSH
28131: LD_VAR 0 5
28135: PPUSH
28136: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
28140: LD_VAR 0 6
28144: PUSH
28145: LD_INT 1
28147: ARRAY
28148: PPUSH
28149: LD_VAR 0 3
28153: PPUSH
28154: LD_VAR 0 4
28158: PPUSH
28159: CALL_OW 237
// end ;
28163: PPOPN 6
28165: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
28166: LD_EXP 37
28170: IFFALSE 28178
28172: PUSH
28173: LD_EXP 84
28177: AND
28178: IFFALSE 28257
28180: GO 28182
28182: DISABLE
28183: LD_INT 0
28185: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
28186: LD_ADDR_VAR 0 1
28190: PUSH
28191: LD_INT 22
28193: PUSH
28194: LD_OWVAR 2
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: LD_INT 30
28205: PUSH
28206: LD_INT 3
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PPUSH
28217: CALL_OW 69
28221: ST_TO_ADDR
// if not tmp then
28222: LD_VAR 0 1
28226: NOT
28227: IFFALSE 28231
// exit ;
28229: GO 28257
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28231: LD_VAR 0 1
28235: PUSH
28236: LD_INT 1
28238: PPUSH
28239: LD_VAR 0 1
28243: PPUSH
28244: CALL_OW 12
28248: ARRAY
28249: PPUSH
28250: LD_INT 1
28252: PPUSH
28253: CALL_OW 234
// end ;
28257: PPOPN 1
28259: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
28260: LD_EXP 37
28264: IFFALSE 28272
28266: PUSH
28267: LD_EXP 85
28271: AND
28272: IFFALSE 28384
28274: GO 28276
28276: DISABLE
28277: LD_INT 0
28279: PPUSH
28280: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
28281: LD_ADDR_VAR 0 2
28285: PUSH
28286: LD_INT 22
28288: PUSH
28289: LD_OWVAR 2
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: LD_INT 2
28300: PUSH
28301: LD_INT 30
28303: PUSH
28304: LD_INT 27
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 30
28313: PUSH
28314: LD_INT 26
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: LD_INT 30
28323: PUSH
28324: LD_INT 28
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PPUSH
28341: CALL_OW 69
28345: ST_TO_ADDR
// if not tmp then
28346: LD_VAR 0 2
28350: NOT
28351: IFFALSE 28355
// exit ;
28353: GO 28384
// for i in tmp do
28355: LD_ADDR_VAR 0 1
28359: PUSH
28360: LD_VAR 0 2
28364: PUSH
28365: FOR_IN
28366: IFFALSE 28382
// SetLives ( i , 1 ) ;
28368: LD_VAR 0 1
28372: PPUSH
28373: LD_INT 1
28375: PPUSH
28376: CALL_OW 234
28380: GO 28365
28382: POP
28383: POP
// end ;
28384: PPOPN 2
28386: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
28387: LD_EXP 37
28391: IFFALSE 28399
28393: PUSH
28394: LD_EXP 86
28398: AND
28399: IFFALSE 28686
28401: GO 28403
28403: DISABLE
28404: LD_INT 0
28406: PPUSH
28407: PPUSH
28408: PPUSH
// begin i := rand ( 1 , 7 ) ;
28409: LD_ADDR_VAR 0 1
28413: PUSH
28414: LD_INT 1
28416: PPUSH
28417: LD_INT 7
28419: PPUSH
28420: CALL_OW 12
28424: ST_TO_ADDR
// case i of 1 :
28425: LD_VAR 0 1
28429: PUSH
28430: LD_INT 1
28432: DOUBLE
28433: EQUAL
28434: IFTRUE 28438
28436: GO 28448
28438: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
28439: LD_STRING earthquake(getX(game), 0, 32)
28441: PPUSH
28442: CALL_OW 559
28446: GO 28686
28448: LD_INT 2
28450: DOUBLE
28451: EQUAL
28452: IFTRUE 28456
28454: GO 28470
28456: POP
// begin ToLua ( displayStucuk(); ) ;
28457: LD_STRING displayStucuk();
28459: PPUSH
28460: CALL_OW 559
// ResetFog ;
28464: CALL_OW 335
// end ; 3 :
28468: GO 28686
28470: LD_INT 3
28472: DOUBLE
28473: EQUAL
28474: IFTRUE 28478
28476: GO 28582
28478: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28479: LD_ADDR_VAR 0 2
28483: PUSH
28484: LD_INT 22
28486: PUSH
28487: LD_OWVAR 2
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: LD_INT 25
28498: PUSH
28499: LD_INT 1
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PPUSH
28510: CALL_OW 69
28514: ST_TO_ADDR
// if not tmp then
28515: LD_VAR 0 2
28519: NOT
28520: IFFALSE 28524
// exit ;
28522: GO 28686
// un := tmp [ rand ( 1 , tmp ) ] ;
28524: LD_ADDR_VAR 0 3
28528: PUSH
28529: LD_VAR 0 2
28533: PUSH
28534: LD_INT 1
28536: PPUSH
28537: LD_VAR 0 2
28541: PPUSH
28542: CALL_OW 12
28546: ARRAY
28547: ST_TO_ADDR
// if Crawls ( un ) then
28548: LD_VAR 0 3
28552: PPUSH
28553: CALL_OW 318
28557: IFFALSE 28568
// ComWalk ( un ) ;
28559: LD_VAR 0 3
28563: PPUSH
28564: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28568: LD_VAR 0 3
28572: PPUSH
28573: LD_INT 8
28575: PPUSH
28576: CALL_OW 336
// end ; 4 :
28580: GO 28686
28582: LD_INT 4
28584: DOUBLE
28585: EQUAL
28586: IFTRUE 28590
28588: GO 28664
28590: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28591: LD_ADDR_VAR 0 2
28595: PUSH
28596: LD_INT 22
28598: PUSH
28599: LD_OWVAR 2
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 30
28610: PUSH
28611: LD_INT 29
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: PPUSH
28622: CALL_OW 69
28626: ST_TO_ADDR
// if not tmp then
28627: LD_VAR 0 2
28631: NOT
28632: IFFALSE 28636
// exit ;
28634: GO 28686
// CenterNowOnUnits ( tmp [ 1 ] ) ;
28636: LD_VAR 0 2
28640: PUSH
28641: LD_INT 1
28643: ARRAY
28644: PPUSH
28645: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
28649: LD_VAR 0 2
28653: PUSH
28654: LD_INT 1
28656: ARRAY
28657: PPUSH
28658: CALL_OW 65
// end ; 5 .. 7 :
28662: GO 28686
28664: LD_INT 5
28666: DOUBLE
28667: GREATEREQUAL
28668: IFFALSE 28676
28670: LD_INT 7
28672: DOUBLE
28673: LESSEQUAL
28674: IFTRUE 28678
28676: GO 28685
28678: POP
// StreamSibBomb ; end ;
28679: CALL 24867 0 0
28683: GO 28686
28685: POP
// end ;
28686: PPOPN 3
28688: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
28689: LD_EXP 37
28693: IFFALSE 28701
28695: PUSH
28696: LD_EXP 87
28700: AND
28701: IFFALSE 28857
28703: GO 28705
28705: DISABLE
28706: LD_INT 0
28708: PPUSH
28709: PPUSH
28710: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
28711: LD_ADDR_VAR 0 2
28715: PUSH
28716: LD_INT 81
28718: PUSH
28719: LD_OWVAR 2
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PUSH
28728: LD_INT 2
28730: PUSH
28731: LD_INT 21
28733: PUSH
28734: LD_INT 1
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: LD_INT 21
28743: PUSH
28744: LD_INT 2
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: LIST
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PPUSH
28760: CALL_OW 69
28764: ST_TO_ADDR
// if not tmp then
28765: LD_VAR 0 2
28769: NOT
28770: IFFALSE 28774
// exit ;
28772: GO 28857
// p := 0 ;
28774: LD_ADDR_VAR 0 3
28778: PUSH
28779: LD_INT 0
28781: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28782: LD_INT 35
28784: PPUSH
28785: CALL_OW 67
// p := p + 1 ;
28789: LD_ADDR_VAR 0 3
28793: PUSH
28794: LD_VAR 0 3
28798: PUSH
28799: LD_INT 1
28801: PLUS
28802: ST_TO_ADDR
// for i in tmp do
28803: LD_ADDR_VAR 0 1
28807: PUSH
28808: LD_VAR 0 2
28812: PUSH
28813: FOR_IN
28814: IFFALSE 28845
// if GetLives ( i ) < 1000 then
28816: LD_VAR 0 1
28820: PPUSH
28821: CALL_OW 256
28825: PUSH
28826: LD_INT 1000
28828: LESS
28829: IFFALSE 28843
// SetLives ( i , 1000 ) ;
28831: LD_VAR 0 1
28835: PPUSH
28836: LD_INT 1000
28838: PPUSH
28839: CALL_OW 234
28843: GO 28813
28845: POP
28846: POP
// until p > 20 ;
28847: LD_VAR 0 3
28851: PUSH
28852: LD_INT 20
28854: GREATER
28855: IFFALSE 28782
// end ;
28857: PPOPN 3
28859: END
// every 0 0$1 trigger StreamModeActive and sTime do
28860: LD_EXP 37
28864: IFFALSE 28872
28866: PUSH
28867: LD_EXP 88
28871: AND
28872: IFFALSE 28907
28874: GO 28876
28876: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
28877: LD_INT 28
28879: PPUSH
28880: LD_OWVAR 2
28884: PPUSH
28885: LD_INT 2
28887: PPUSH
28888: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
28892: LD_INT 30
28894: PPUSH
28895: LD_OWVAR 2
28899: PPUSH
28900: LD_INT 2
28902: PPUSH
28903: CALL_OW 322
// end ;
28907: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
28908: LD_EXP 37
28912: IFFALSE 28920
28914: PUSH
28915: LD_EXP 89
28919: AND
28920: IFFALSE 29041
28922: GO 28924
28924: DISABLE
28925: LD_INT 0
28927: PPUSH
28928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28929: LD_ADDR_VAR 0 2
28933: PUSH
28934: LD_INT 22
28936: PUSH
28937: LD_OWVAR 2
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 21
28948: PUSH
28949: LD_INT 1
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PUSH
28956: LD_INT 3
28958: PUSH
28959: LD_INT 23
28961: PUSH
28962: LD_INT 0
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: LIST
28977: PPUSH
28978: CALL_OW 69
28982: ST_TO_ADDR
// if not tmp then
28983: LD_VAR 0 2
28987: NOT
28988: IFFALSE 28992
// exit ;
28990: GO 29041
// for i in tmp do
28992: LD_ADDR_VAR 0 1
28996: PUSH
28997: LD_VAR 0 2
29001: PUSH
29002: FOR_IN
29003: IFFALSE 29039
// begin if Crawls ( i ) then
29005: LD_VAR 0 1
29009: PPUSH
29010: CALL_OW 318
29014: IFFALSE 29025
// ComWalk ( i ) ;
29016: LD_VAR 0 1
29020: PPUSH
29021: CALL_OW 138
// SetClass ( i , 2 ) ;
29025: LD_VAR 0 1
29029: PPUSH
29030: LD_INT 2
29032: PPUSH
29033: CALL_OW 336
// end ;
29037: GO 29002
29039: POP
29040: POP
// end ;
29041: PPOPN 2
29043: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
29044: LD_EXP 37
29048: IFFALSE 29056
29050: PUSH
29051: LD_EXP 90
29055: AND
29056: IFFALSE 29346
29058: GO 29060
29060: DISABLE
29061: LD_INT 0
29063: PPUSH
29064: PPUSH
29065: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
29066: LD_OWVAR 2
29070: PPUSH
29071: LD_INT 9
29073: PPUSH
29074: LD_INT 1
29076: PPUSH
29077: LD_INT 1
29079: PPUSH
29080: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
29084: LD_INT 9
29086: PPUSH
29087: LD_OWVAR 2
29091: PPUSH
29092: CALL_OW 343
// uc_side := 9 ;
29096: LD_ADDR_OWVAR 20
29100: PUSH
29101: LD_INT 9
29103: ST_TO_ADDR
// uc_nation := 2 ;
29104: LD_ADDR_OWVAR 21
29108: PUSH
29109: LD_INT 2
29111: ST_TO_ADDR
// hc_name := Dark Warrior ;
29112: LD_ADDR_OWVAR 26
29116: PUSH
29117: LD_STRING Dark Warrior
29119: ST_TO_ADDR
// hc_gallery :=  ;
29120: LD_ADDR_OWVAR 33
29124: PUSH
29125: LD_STRING 
29127: ST_TO_ADDR
// hc_noskilllimit := true ;
29128: LD_ADDR_OWVAR 76
29132: PUSH
29133: LD_INT 1
29135: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
29136: LD_ADDR_OWVAR 31
29140: PUSH
29141: LD_INT 30
29143: PUSH
29144: LD_INT 30
29146: PUSH
29147: LD_INT 30
29149: PUSH
29150: LD_INT 30
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: ST_TO_ADDR
// un := CreateHuman ;
29159: LD_ADDR_VAR 0 3
29163: PUSH
29164: CALL_OW 44
29168: ST_TO_ADDR
// hc_noskilllimit := false ;
29169: LD_ADDR_OWVAR 76
29173: PUSH
29174: LD_INT 0
29176: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29177: LD_VAR 0 3
29181: PPUSH
29182: LD_INT 1
29184: PPUSH
29185: CALL_OW 51
// ToLua ( playRanger() ) ;
29189: LD_STRING playRanger()
29191: PPUSH
29192: CALL_OW 559
// p := 0 ;
29196: LD_ADDR_VAR 0 2
29200: PUSH
29201: LD_INT 0
29203: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29204: LD_INT 35
29206: PPUSH
29207: CALL_OW 67
// p := p + 1 ;
29211: LD_ADDR_VAR 0 2
29215: PUSH
29216: LD_VAR 0 2
29220: PUSH
29221: LD_INT 1
29223: PLUS
29224: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
29225: LD_VAR 0 3
29229: PPUSH
29230: CALL_OW 256
29234: PUSH
29235: LD_INT 1000
29237: LESS
29238: IFFALSE 29252
// SetLives ( un , 1000 ) ;
29240: LD_VAR 0 3
29244: PPUSH
29245: LD_INT 1000
29247: PPUSH
29248: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
29252: LD_VAR 0 3
29256: PPUSH
29257: LD_INT 81
29259: PUSH
29260: LD_OWVAR 2
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 91
29271: PUSH
29272: LD_VAR 0 3
29276: PUSH
29277: LD_INT 30
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: LIST
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PPUSH
29289: CALL_OW 69
29293: PPUSH
29294: LD_VAR 0 3
29298: PPUSH
29299: CALL_OW 74
29303: PPUSH
29304: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
29308: LD_VAR 0 2
29312: PUSH
29313: LD_INT 80
29315: GREATER
29316: IFTRUE 29329
29318: PUSH
29319: LD_VAR 0 3
29323: PPUSH
29324: CALL_OW 301
29328: OR
29329: IFFALSE 29204
// if un then
29331: LD_VAR 0 3
29335: IFFALSE 29346
// RemoveUnit ( un ) ;
29337: LD_VAR 0 3
29341: PPUSH
29342: CALL_OW 64
// end ;
29346: PPOPN 3
29348: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
29349: LD_EXP 91
29353: IFFALSE 29469
29355: GO 29357
29357: DISABLE
29358: LD_INT 0
29360: PPUSH
29361: PPUSH
29362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
29363: LD_ADDR_VAR 0 2
29367: PUSH
29368: LD_INT 81
29370: PUSH
29371: LD_OWVAR 2
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 21
29382: PUSH
29383: LD_INT 1
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PPUSH
29394: CALL_OW 69
29398: ST_TO_ADDR
// ToLua ( playComputer() ) ;
29399: LD_STRING playComputer()
29401: PPUSH
29402: CALL_OW 559
// if not tmp then
29406: LD_VAR 0 2
29410: NOT
29411: IFFALSE 29415
// exit ;
29413: GO 29469
// for i in tmp do
29415: LD_ADDR_VAR 0 1
29419: PUSH
29420: LD_VAR 0 2
29424: PUSH
29425: FOR_IN
29426: IFFALSE 29467
// for j := 1 to 4 do
29428: LD_ADDR_VAR 0 3
29432: PUSH
29433: DOUBLE
29434: LD_INT 1
29436: DEC
29437: ST_TO_ADDR
29438: LD_INT 4
29440: PUSH
29441: FOR_TO
29442: IFFALSE 29463
// SetSkill ( i , j , 10 ) ;
29444: LD_VAR 0 1
29448: PPUSH
29449: LD_VAR 0 3
29453: PPUSH
29454: LD_INT 10
29456: PPUSH
29457: CALL_OW 237
29461: GO 29441
29463: POP
29464: POP
29465: GO 29425
29467: POP
29468: POP
// end ;
29469: PPOPN 3
29471: END
// every 0 0$1 trigger s30 do var i , tmp ;
29472: LD_EXP 92
29476: IFFALSE 29545
29478: GO 29480
29480: DISABLE
29481: LD_INT 0
29483: PPUSH
29484: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29485: LD_ADDR_VAR 0 2
29489: PUSH
29490: LD_INT 22
29492: PUSH
29493: LD_OWVAR 2
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PPUSH
29502: CALL_OW 69
29506: ST_TO_ADDR
// if not tmp then
29507: LD_VAR 0 2
29511: NOT
29512: IFFALSE 29516
// exit ;
29514: GO 29545
// for i in tmp do
29516: LD_ADDR_VAR 0 1
29520: PUSH
29521: LD_VAR 0 2
29525: PUSH
29526: FOR_IN
29527: IFFALSE 29543
// SetLives ( i , 300 ) ;
29529: LD_VAR 0 1
29533: PPUSH
29534: LD_INT 300
29536: PPUSH
29537: CALL_OW 234
29541: GO 29526
29543: POP
29544: POP
// end ;
29545: PPOPN 2
29547: END
// every 0 0$1 trigger s60 do var i , tmp ;
29548: LD_EXP 93
29552: IFFALSE 29621
29554: GO 29556
29556: DISABLE
29557: LD_INT 0
29559: PPUSH
29560: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29561: LD_ADDR_VAR 0 2
29565: PUSH
29566: LD_INT 22
29568: PUSH
29569: LD_OWVAR 2
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PPUSH
29578: CALL_OW 69
29582: ST_TO_ADDR
// if not tmp then
29583: LD_VAR 0 2
29587: NOT
29588: IFFALSE 29592
// exit ;
29590: GO 29621
// for i in tmp do
29592: LD_ADDR_VAR 0 1
29596: PUSH
29597: LD_VAR 0 2
29601: PUSH
29602: FOR_IN
29603: IFFALSE 29619
// SetLives ( i , 600 ) ;
29605: LD_VAR 0 1
29609: PPUSH
29610: LD_INT 600
29612: PPUSH
29613: CALL_OW 234
29617: GO 29602
29619: POP
29620: POP
// end ;
29621: PPOPN 2
29623: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29624: LD_INT 0
29626: PPUSH
// case cmd of 301 :
29627: LD_VAR 0 1
29631: PUSH
29632: LD_INT 301
29634: DOUBLE
29635: EQUAL
29636: IFTRUE 29640
29638: GO 29672
29640: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
29641: LD_VAR 0 6
29645: PPUSH
29646: LD_VAR 0 7
29650: PPUSH
29651: LD_VAR 0 8
29655: PPUSH
29656: LD_VAR 0 4
29660: PPUSH
29661: LD_VAR 0 5
29665: PPUSH
29666: CALL 30885 0 5
29670: GO 29793
29672: LD_INT 302
29674: DOUBLE
29675: EQUAL
29676: IFTRUE 29680
29678: GO 29717
29680: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
29681: LD_VAR 0 6
29685: PPUSH
29686: LD_VAR 0 7
29690: PPUSH
29691: LD_VAR 0 8
29695: PPUSH
29696: LD_VAR 0 9
29700: PPUSH
29701: LD_VAR 0 4
29705: PPUSH
29706: LD_VAR 0 5
29710: PPUSH
29711: CALL 30976 0 6
29715: GO 29793
29717: LD_INT 303
29719: DOUBLE
29720: EQUAL
29721: IFTRUE 29725
29723: GO 29762
29725: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
29726: LD_VAR 0 6
29730: PPUSH
29731: LD_VAR 0 7
29735: PPUSH
29736: LD_VAR 0 8
29740: PPUSH
29741: LD_VAR 0 9
29745: PPUSH
29746: LD_VAR 0 4
29750: PPUSH
29751: LD_VAR 0 5
29755: PPUSH
29756: CALL 29798 0 6
29760: GO 29793
29762: LD_INT 304
29764: DOUBLE
29765: EQUAL
29766: IFTRUE 29770
29768: GO 29792
29770: POP
// hHackTeleport ( unit , x , y ) ; end ;
29771: LD_VAR 0 2
29775: PPUSH
29776: LD_VAR 0 4
29780: PPUSH
29781: LD_VAR 0 5
29785: PPUSH
29786: CALL 31569 0 3
29790: GO 29793
29792: POP
// end ;
29793: LD_VAR 0 12
29797: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
29798: LD_INT 0
29800: PPUSH
29801: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
29802: LD_VAR 0 1
29806: PUSH
29807: LD_INT 1
29809: LESS
29810: IFTRUE 29822
29812: PUSH
29813: LD_VAR 0 1
29817: PUSH
29818: LD_INT 3
29820: GREATER
29821: OR
29822: IFTRUE 29840
29824: PUSH
29825: LD_VAR 0 5
29829: PPUSH
29830: LD_VAR 0 6
29834: PPUSH
29835: CALL_OW 428
29839: OR
29840: IFFALSE 29844
// exit ;
29842: GO 30572
// uc_side := your_side ;
29844: LD_ADDR_OWVAR 20
29848: PUSH
29849: LD_OWVAR 2
29853: ST_TO_ADDR
// uc_nation := nation ;
29854: LD_ADDR_OWVAR 21
29858: PUSH
29859: LD_VAR 0 1
29863: ST_TO_ADDR
// bc_level = 1 ;
29864: LD_ADDR_OWVAR 43
29868: PUSH
29869: LD_INT 1
29871: ST_TO_ADDR
// case btype of 1 :
29872: LD_VAR 0 2
29876: PUSH
29877: LD_INT 1
29879: DOUBLE
29880: EQUAL
29881: IFTRUE 29885
29883: GO 29896
29885: POP
// bc_type := b_depot ; 2 :
29886: LD_ADDR_OWVAR 42
29890: PUSH
29891: LD_INT 0
29893: ST_TO_ADDR
29894: GO 30516
29896: LD_INT 2
29898: DOUBLE
29899: EQUAL
29900: IFTRUE 29904
29902: GO 29915
29904: POP
// bc_type := b_warehouse ; 3 :
29905: LD_ADDR_OWVAR 42
29909: PUSH
29910: LD_INT 1
29912: ST_TO_ADDR
29913: GO 30516
29915: LD_INT 3
29917: DOUBLE
29918: EQUAL
29919: IFTRUE 29923
29921: GO 29934
29923: POP
// bc_type := b_lab ; 4 .. 9 :
29924: LD_ADDR_OWVAR 42
29928: PUSH
29929: LD_INT 6
29931: ST_TO_ADDR
29932: GO 30516
29934: LD_INT 4
29936: DOUBLE
29937: GREATEREQUAL
29938: IFFALSE 29946
29940: LD_INT 9
29942: DOUBLE
29943: LESSEQUAL
29944: IFTRUE 29948
29946: GO 30008
29948: POP
// begin bc_type := b_lab_half ;
29949: LD_ADDR_OWVAR 42
29953: PUSH
29954: LD_INT 7
29956: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
29957: LD_ADDR_OWVAR 44
29961: PUSH
29962: LD_INT 10
29964: PUSH
29965: LD_INT 11
29967: PUSH
29968: LD_INT 12
29970: PUSH
29971: LD_INT 15
29973: PUSH
29974: LD_INT 14
29976: PUSH
29977: LD_INT 13
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: PUSH
29988: LD_VAR 0 2
29992: PUSH
29993: LD_INT 3
29995: MINUS
29996: ARRAY
29997: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
29998: LD_ADDR_OWVAR 45
30002: PUSH
30003: LD_INT 9
30005: ST_TO_ADDR
// end ; 10 .. 13 :
30006: GO 30516
30008: LD_INT 10
30010: DOUBLE
30011: GREATEREQUAL
30012: IFFALSE 30020
30014: LD_INT 13
30016: DOUBLE
30017: LESSEQUAL
30018: IFTRUE 30022
30020: GO 30099
30022: POP
// begin bc_type := b_lab_full ;
30023: LD_ADDR_OWVAR 42
30027: PUSH
30028: LD_INT 8
30030: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
30031: LD_ADDR_OWVAR 44
30035: PUSH
30036: LD_INT 10
30038: PUSH
30039: LD_INT 12
30041: PUSH
30042: LD_INT 14
30044: PUSH
30045: LD_INT 13
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: PUSH
30054: LD_VAR 0 2
30058: PUSH
30059: LD_INT 9
30061: MINUS
30062: ARRAY
30063: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
30064: LD_ADDR_OWVAR 45
30068: PUSH
30069: LD_INT 11
30071: PUSH
30072: LD_INT 15
30074: PUSH
30075: LD_INT 12
30077: PUSH
30078: LD_INT 15
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: PUSH
30087: LD_VAR 0 2
30091: PUSH
30092: LD_INT 9
30094: MINUS
30095: ARRAY
30096: ST_TO_ADDR
// end ; 14 :
30097: GO 30516
30099: LD_INT 14
30101: DOUBLE
30102: EQUAL
30103: IFTRUE 30107
30105: GO 30118
30107: POP
// bc_type := b_workshop ; 15 :
30108: LD_ADDR_OWVAR 42
30112: PUSH
30113: LD_INT 2
30115: ST_TO_ADDR
30116: GO 30516
30118: LD_INT 15
30120: DOUBLE
30121: EQUAL
30122: IFTRUE 30126
30124: GO 30137
30126: POP
// bc_type := b_factory ; 16 :
30127: LD_ADDR_OWVAR 42
30131: PUSH
30132: LD_INT 3
30134: ST_TO_ADDR
30135: GO 30516
30137: LD_INT 16
30139: DOUBLE
30140: EQUAL
30141: IFTRUE 30145
30143: GO 30156
30145: POP
// bc_type := b_ext_gun ; 17 :
30146: LD_ADDR_OWVAR 42
30150: PUSH
30151: LD_INT 17
30153: ST_TO_ADDR
30154: GO 30516
30156: LD_INT 17
30158: DOUBLE
30159: EQUAL
30160: IFTRUE 30164
30162: GO 30192
30164: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
30165: LD_ADDR_OWVAR 42
30169: PUSH
30170: LD_INT 19
30172: PUSH
30173: LD_INT 23
30175: PUSH
30176: LD_INT 19
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: LIST
30183: PUSH
30184: LD_VAR 0 1
30188: ARRAY
30189: ST_TO_ADDR
30190: GO 30516
30192: LD_INT 18
30194: DOUBLE
30195: EQUAL
30196: IFTRUE 30200
30198: GO 30211
30200: POP
// bc_type := b_ext_radar ; 19 :
30201: LD_ADDR_OWVAR 42
30205: PUSH
30206: LD_INT 20
30208: ST_TO_ADDR
30209: GO 30516
30211: LD_INT 19
30213: DOUBLE
30214: EQUAL
30215: IFTRUE 30219
30217: GO 30230
30219: POP
// bc_type := b_ext_radio ; 20 :
30220: LD_ADDR_OWVAR 42
30224: PUSH
30225: LD_INT 22
30227: ST_TO_ADDR
30228: GO 30516
30230: LD_INT 20
30232: DOUBLE
30233: EQUAL
30234: IFTRUE 30238
30236: GO 30249
30238: POP
// bc_type := b_ext_siberium ; 21 :
30239: LD_ADDR_OWVAR 42
30243: PUSH
30244: LD_INT 21
30246: ST_TO_ADDR
30247: GO 30516
30249: LD_INT 21
30251: DOUBLE
30252: EQUAL
30253: IFTRUE 30257
30255: GO 30268
30257: POP
// bc_type := b_ext_computer ; 22 :
30258: LD_ADDR_OWVAR 42
30262: PUSH
30263: LD_INT 24
30265: ST_TO_ADDR
30266: GO 30516
30268: LD_INT 22
30270: DOUBLE
30271: EQUAL
30272: IFTRUE 30276
30274: GO 30287
30276: POP
// bc_type := b_ext_track ; 23 :
30277: LD_ADDR_OWVAR 42
30281: PUSH
30282: LD_INT 16
30284: ST_TO_ADDR
30285: GO 30516
30287: LD_INT 23
30289: DOUBLE
30290: EQUAL
30291: IFTRUE 30295
30293: GO 30306
30295: POP
// bc_type := b_ext_laser ; 24 :
30296: LD_ADDR_OWVAR 42
30300: PUSH
30301: LD_INT 25
30303: ST_TO_ADDR
30304: GO 30516
30306: LD_INT 24
30308: DOUBLE
30309: EQUAL
30310: IFTRUE 30314
30312: GO 30325
30314: POP
// bc_type := b_control_tower ; 25 :
30315: LD_ADDR_OWVAR 42
30319: PUSH
30320: LD_INT 36
30322: ST_TO_ADDR
30323: GO 30516
30325: LD_INT 25
30327: DOUBLE
30328: EQUAL
30329: IFTRUE 30333
30331: GO 30344
30333: POP
// bc_type := b_breastwork ; 26 :
30334: LD_ADDR_OWVAR 42
30338: PUSH
30339: LD_INT 31
30341: ST_TO_ADDR
30342: GO 30516
30344: LD_INT 26
30346: DOUBLE
30347: EQUAL
30348: IFTRUE 30352
30350: GO 30363
30352: POP
// bc_type := b_bunker ; 27 :
30353: LD_ADDR_OWVAR 42
30357: PUSH
30358: LD_INT 32
30360: ST_TO_ADDR
30361: GO 30516
30363: LD_INT 27
30365: DOUBLE
30366: EQUAL
30367: IFTRUE 30371
30369: GO 30382
30371: POP
// bc_type := b_turret ; 28 :
30372: LD_ADDR_OWVAR 42
30376: PUSH
30377: LD_INT 33
30379: ST_TO_ADDR
30380: GO 30516
30382: LD_INT 28
30384: DOUBLE
30385: EQUAL
30386: IFTRUE 30390
30388: GO 30401
30390: POP
// bc_type := b_armoury ; 29 :
30391: LD_ADDR_OWVAR 42
30395: PUSH
30396: LD_INT 4
30398: ST_TO_ADDR
30399: GO 30516
30401: LD_INT 29
30403: DOUBLE
30404: EQUAL
30405: IFTRUE 30409
30407: GO 30420
30409: POP
// bc_type := b_barracks ; 30 :
30410: LD_ADDR_OWVAR 42
30414: PUSH
30415: LD_INT 5
30417: ST_TO_ADDR
30418: GO 30516
30420: LD_INT 30
30422: DOUBLE
30423: EQUAL
30424: IFTRUE 30428
30426: GO 30439
30428: POP
// bc_type := b_solar_power ; 31 :
30429: LD_ADDR_OWVAR 42
30433: PUSH
30434: LD_INT 27
30436: ST_TO_ADDR
30437: GO 30516
30439: LD_INT 31
30441: DOUBLE
30442: EQUAL
30443: IFTRUE 30447
30445: GO 30458
30447: POP
// bc_type := b_oil_power ; 32 :
30448: LD_ADDR_OWVAR 42
30452: PUSH
30453: LD_INT 26
30455: ST_TO_ADDR
30456: GO 30516
30458: LD_INT 32
30460: DOUBLE
30461: EQUAL
30462: IFTRUE 30466
30464: GO 30477
30466: POP
// bc_type := b_siberite_power ; 33 :
30467: LD_ADDR_OWVAR 42
30471: PUSH
30472: LD_INT 28
30474: ST_TO_ADDR
30475: GO 30516
30477: LD_INT 33
30479: DOUBLE
30480: EQUAL
30481: IFTRUE 30485
30483: GO 30496
30485: POP
// bc_type := b_oil_mine ; 34 :
30486: LD_ADDR_OWVAR 42
30490: PUSH
30491: LD_INT 29
30493: ST_TO_ADDR
30494: GO 30516
30496: LD_INT 34
30498: DOUBLE
30499: EQUAL
30500: IFTRUE 30504
30502: GO 30515
30504: POP
// bc_type := b_siberite_mine ; end ;
30505: LD_ADDR_OWVAR 42
30509: PUSH
30510: LD_INT 30
30512: ST_TO_ADDR
30513: GO 30516
30515: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
30516: LD_ADDR_VAR 0 8
30520: PUSH
30521: LD_VAR 0 5
30525: PPUSH
30526: LD_VAR 0 6
30530: PPUSH
30531: LD_VAR 0 3
30535: PPUSH
30536: CALL_OW 47
30540: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
30541: LD_OWVAR 42
30545: PUSH
30546: LD_INT 32
30548: PUSH
30549: LD_INT 33
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: IN
30556: IFFALSE 30572
// PlaceWeaponTurret ( b , weapon ) ;
30558: LD_VAR 0 8
30562: PPUSH
30563: LD_VAR 0 4
30567: PPUSH
30568: CALL_OW 431
// end ;
30572: LD_VAR 0 7
30576: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
30577: LD_INT 0
30579: PPUSH
30580: PPUSH
30581: PPUSH
30582: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30583: LD_ADDR_VAR 0 4
30587: PUSH
30588: LD_INT 22
30590: PUSH
30591: LD_OWVAR 2
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 2
30602: PUSH
30603: LD_INT 30
30605: PUSH
30606: LD_INT 0
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 30
30615: PUSH
30616: LD_INT 1
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: LIST
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PPUSH
30632: CALL_OW 69
30636: ST_TO_ADDR
// if not tmp then
30637: LD_VAR 0 4
30641: NOT
30642: IFFALSE 30646
// exit ;
30644: GO 30705
// for i in tmp do
30646: LD_ADDR_VAR 0 2
30650: PUSH
30651: LD_VAR 0 4
30655: PUSH
30656: FOR_IN
30657: IFFALSE 30703
// for j = 1 to 3 do
30659: LD_ADDR_VAR 0 3
30663: PUSH
30664: DOUBLE
30665: LD_INT 1
30667: DEC
30668: ST_TO_ADDR
30669: LD_INT 3
30671: PUSH
30672: FOR_TO
30673: IFFALSE 30699
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
30675: LD_VAR 0 2
30679: PPUSH
30680: CALL_OW 274
30684: PPUSH
30685: LD_VAR 0 3
30689: PPUSH
30690: LD_INT 99999
30692: PPUSH
30693: CALL_OW 277
30697: GO 30672
30699: POP
30700: POP
30701: GO 30656
30703: POP
30704: POP
// end ;
30705: LD_VAR 0 1
30709: RET
// export function hHackSetLevel10 ; var i , j ; begin
30710: LD_INT 0
30712: PPUSH
30713: PPUSH
30714: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30715: LD_ADDR_VAR 0 2
30719: PUSH
30720: LD_INT 21
30722: PUSH
30723: LD_INT 1
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PPUSH
30730: CALL_OW 69
30734: PUSH
30735: FOR_IN
30736: IFFALSE 30788
// if IsSelected ( i ) then
30738: LD_VAR 0 2
30742: PPUSH
30743: CALL_OW 306
30747: IFFALSE 30786
// begin for j := 1 to 4 do
30749: LD_ADDR_VAR 0 3
30753: PUSH
30754: DOUBLE
30755: LD_INT 1
30757: DEC
30758: ST_TO_ADDR
30759: LD_INT 4
30761: PUSH
30762: FOR_TO
30763: IFFALSE 30784
// SetSkill ( i , j , 10 ) ;
30765: LD_VAR 0 2
30769: PPUSH
30770: LD_VAR 0 3
30774: PPUSH
30775: LD_INT 10
30777: PPUSH
30778: CALL_OW 237
30782: GO 30762
30784: POP
30785: POP
// end ;
30786: GO 30735
30788: POP
30789: POP
// end ;
30790: LD_VAR 0 1
30794: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
30795: LD_INT 0
30797: PPUSH
30798: PPUSH
30799: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
30800: LD_ADDR_VAR 0 2
30804: PUSH
30805: LD_INT 22
30807: PUSH
30808: LD_OWVAR 2
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: LD_INT 21
30819: PUSH
30820: LD_INT 1
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PPUSH
30831: CALL_OW 69
30835: PUSH
30836: FOR_IN
30837: IFFALSE 30878
// begin for j := 1 to 4 do
30839: LD_ADDR_VAR 0 3
30843: PUSH
30844: DOUBLE
30845: LD_INT 1
30847: DEC
30848: ST_TO_ADDR
30849: LD_INT 4
30851: PUSH
30852: FOR_TO
30853: IFFALSE 30874
// SetSkill ( i , j , 10 ) ;
30855: LD_VAR 0 2
30859: PPUSH
30860: LD_VAR 0 3
30864: PPUSH
30865: LD_INT 10
30867: PPUSH
30868: CALL_OW 237
30872: GO 30852
30874: POP
30875: POP
// end ;
30876: GO 30836
30878: POP
30879: POP
// end ;
30880: LD_VAR 0 1
30884: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
30885: LD_INT 0
30887: PPUSH
// uc_side := your_side ;
30888: LD_ADDR_OWVAR 20
30892: PUSH
30893: LD_OWVAR 2
30897: ST_TO_ADDR
// uc_nation := nation ;
30898: LD_ADDR_OWVAR 21
30902: PUSH
30903: LD_VAR 0 1
30907: ST_TO_ADDR
// InitHc ;
30908: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
30912: LD_INT 0
30914: PPUSH
30915: LD_VAR 0 2
30919: PPUSH
30920: LD_VAR 0 3
30924: PPUSH
30925: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
30929: LD_VAR 0 4
30933: PPUSH
30934: LD_VAR 0 5
30938: PPUSH
30939: CALL_OW 428
30943: PUSH
30944: LD_INT 0
30946: EQUAL
30947: IFFALSE 30971
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
30949: CALL_OW 44
30953: PPUSH
30954: LD_VAR 0 4
30958: PPUSH
30959: LD_VAR 0 5
30963: PPUSH
30964: LD_INT 1
30966: PPUSH
30967: CALL_OW 48
// end ;
30971: LD_VAR 0 6
30975: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
30976: LD_INT 0
30978: PPUSH
30979: PPUSH
// uc_side := your_side ;
30980: LD_ADDR_OWVAR 20
30984: PUSH
30985: LD_OWVAR 2
30989: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
30990: LD_VAR 0 1
30994: PUSH
30995: LD_INT 1
30997: PUSH
30998: LD_INT 2
31000: PUSH
31001: LD_INT 3
31003: PUSH
31004: LD_INT 4
31006: PUSH
31007: LD_INT 5
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: IN
31017: IFFALSE 31029
// uc_nation := nation_american else
31019: LD_ADDR_OWVAR 21
31023: PUSH
31024: LD_INT 1
31026: ST_TO_ADDR
31027: GO 31072
// if chassis in [ 11 , 12 , 13 , 14 ] then
31029: LD_VAR 0 1
31033: PUSH
31034: LD_INT 11
31036: PUSH
31037: LD_INT 12
31039: PUSH
31040: LD_INT 13
31042: PUSH
31043: LD_INT 14
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: IN
31052: IFFALSE 31064
// uc_nation := nation_arabian else
31054: LD_ADDR_OWVAR 21
31058: PUSH
31059: LD_INT 2
31061: ST_TO_ADDR
31062: GO 31072
// uc_nation := nation_russian ;
31064: LD_ADDR_OWVAR 21
31068: PUSH
31069: LD_INT 3
31071: ST_TO_ADDR
// vc_chassis := chassis ;
31072: LD_ADDR_OWVAR 37
31076: PUSH
31077: LD_VAR 0 1
31081: ST_TO_ADDR
// vc_engine := engine ;
31082: LD_ADDR_OWVAR 39
31086: PUSH
31087: LD_VAR 0 2
31091: ST_TO_ADDR
// vc_control := control ;
31092: LD_ADDR_OWVAR 38
31096: PUSH
31097: LD_VAR 0 3
31101: ST_TO_ADDR
// vc_weapon := weapon ;
31102: LD_ADDR_OWVAR 40
31106: PUSH
31107: LD_VAR 0 4
31111: ST_TO_ADDR
// un := CreateVehicle ;
31112: LD_ADDR_VAR 0 8
31116: PUSH
31117: CALL_OW 45
31121: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31122: LD_VAR 0 8
31126: PPUSH
31127: LD_INT 0
31129: PPUSH
31130: LD_INT 5
31132: PPUSH
31133: CALL_OW 12
31137: PPUSH
31138: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
31142: LD_VAR 0 8
31146: PPUSH
31147: LD_VAR 0 5
31151: PPUSH
31152: LD_VAR 0 6
31156: PPUSH
31157: LD_INT 1
31159: PPUSH
31160: CALL_OW 48
// end ;
31164: LD_VAR 0 7
31168: RET
// export hInvincible ; every 1 do
31169: GO 31171
31171: DISABLE
// hInvincible := [ ] ;
31172: LD_ADDR_EXP 94
31176: PUSH
31177: EMPTY
31178: ST_TO_ADDR
31179: END
// every 10 do var i ;
31180: GO 31182
31182: DISABLE
31183: LD_INT 0
31185: PPUSH
// begin enable ;
31186: ENABLE
// if not hInvincible then
31187: LD_EXP 94
31191: NOT
31192: IFFALSE 31196
// exit ;
31194: GO 31240
// for i in hInvincible do
31196: LD_ADDR_VAR 0 1
31200: PUSH
31201: LD_EXP 94
31205: PUSH
31206: FOR_IN
31207: IFFALSE 31238
// if GetLives ( i ) < 1000 then
31209: LD_VAR 0 1
31213: PPUSH
31214: CALL_OW 256
31218: PUSH
31219: LD_INT 1000
31221: LESS
31222: IFFALSE 31236
// SetLives ( i , 1000 ) ;
31224: LD_VAR 0 1
31228: PPUSH
31229: LD_INT 1000
31231: PPUSH
31232: CALL_OW 234
31236: GO 31206
31238: POP
31239: POP
// end ;
31240: PPOPN 1
31242: END
// export function hHackInvincible ; var i ; begin
31243: LD_INT 0
31245: PPUSH
31246: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
31247: LD_ADDR_VAR 0 2
31251: PUSH
31252: LD_INT 2
31254: PUSH
31255: LD_INT 21
31257: PUSH
31258: LD_INT 1
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: LD_INT 21
31267: PUSH
31268: LD_INT 2
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: LIST
31279: PPUSH
31280: CALL_OW 69
31284: PUSH
31285: FOR_IN
31286: IFFALSE 31347
// if IsSelected ( i ) then
31288: LD_VAR 0 2
31292: PPUSH
31293: CALL_OW 306
31297: IFFALSE 31345
// begin if i in hInvincible then
31299: LD_VAR 0 2
31303: PUSH
31304: LD_EXP 94
31308: IN
31309: IFFALSE 31329
// hInvincible := hInvincible diff i else
31311: LD_ADDR_EXP 94
31315: PUSH
31316: LD_EXP 94
31320: PUSH
31321: LD_VAR 0 2
31325: DIFF
31326: ST_TO_ADDR
31327: GO 31345
// hInvincible := hInvincible union i ;
31329: LD_ADDR_EXP 94
31333: PUSH
31334: LD_EXP 94
31338: PUSH
31339: LD_VAR 0 2
31343: UNION
31344: ST_TO_ADDR
// end ;
31345: GO 31285
31347: POP
31348: POP
// end ;
31349: LD_VAR 0 1
31353: RET
// export function hHackInvisible ; var i , j ; begin
31354: LD_INT 0
31356: PPUSH
31357: PPUSH
31358: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31359: LD_ADDR_VAR 0 2
31363: PUSH
31364: LD_INT 21
31366: PUSH
31367: LD_INT 1
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PPUSH
31374: CALL_OW 69
31378: PUSH
31379: FOR_IN
31380: IFFALSE 31404
// if IsSelected ( i ) then
31382: LD_VAR 0 2
31386: PPUSH
31387: CALL_OW 306
31391: IFFALSE 31402
// ComForceInvisible ( i ) ;
31393: LD_VAR 0 2
31397: PPUSH
31398: CALL_OW 496
31402: GO 31379
31404: POP
31405: POP
// end ;
31406: LD_VAR 0 1
31410: RET
// export function hHackChangeYourSide ; begin
31411: LD_INT 0
31413: PPUSH
// if your_side = 8 then
31414: LD_OWVAR 2
31418: PUSH
31419: LD_INT 8
31421: EQUAL
31422: IFFALSE 31434
// your_side := 0 else
31424: LD_ADDR_OWVAR 2
31428: PUSH
31429: LD_INT 0
31431: ST_TO_ADDR
31432: GO 31448
// your_side := your_side + 1 ;
31434: LD_ADDR_OWVAR 2
31438: PUSH
31439: LD_OWVAR 2
31443: PUSH
31444: LD_INT 1
31446: PLUS
31447: ST_TO_ADDR
// end ;
31448: LD_VAR 0 1
31452: RET
// export function hHackChangeUnitSide ; var i , j ; begin
31453: LD_INT 0
31455: PPUSH
31456: PPUSH
31457: PPUSH
// for i in all_units do
31458: LD_ADDR_VAR 0 2
31462: PUSH
31463: LD_OWVAR 3
31467: PUSH
31468: FOR_IN
31469: IFFALSE 31547
// if IsSelected ( i ) then
31471: LD_VAR 0 2
31475: PPUSH
31476: CALL_OW 306
31480: IFFALSE 31545
// begin j := GetSide ( i ) ;
31482: LD_ADDR_VAR 0 3
31486: PUSH
31487: LD_VAR 0 2
31491: PPUSH
31492: CALL_OW 255
31496: ST_TO_ADDR
// if j = 8 then
31497: LD_VAR 0 3
31501: PUSH
31502: LD_INT 8
31504: EQUAL
31505: IFFALSE 31517
// j := 0 else
31507: LD_ADDR_VAR 0 3
31511: PUSH
31512: LD_INT 0
31514: ST_TO_ADDR
31515: GO 31531
// j := j + 1 ;
31517: LD_ADDR_VAR 0 3
31521: PUSH
31522: LD_VAR 0 3
31526: PUSH
31527: LD_INT 1
31529: PLUS
31530: ST_TO_ADDR
// SetSide ( i , j ) ;
31531: LD_VAR 0 2
31535: PPUSH
31536: LD_VAR 0 3
31540: PPUSH
31541: CALL_OW 235
// end ;
31545: GO 31468
31547: POP
31548: POP
// end ;
31549: LD_VAR 0 1
31553: RET
// export function hHackFog ; begin
31554: LD_INT 0
31556: PPUSH
// FogOff ( true ) ;
31557: LD_INT 1
31559: PPUSH
31560: CALL_OW 344
// end ;
31564: LD_VAR 0 1
31568: RET
// export function hHackTeleport ( unit , x , y ) ; begin
31569: LD_INT 0
31571: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
31572: LD_VAR 0 1
31576: PPUSH
31577: LD_VAR 0 2
31581: PPUSH
31582: LD_VAR 0 3
31586: PPUSH
31587: LD_INT 1
31589: PPUSH
31590: LD_INT 1
31592: PPUSH
31593: CALL_OW 483
// CenterOnXY ( x , y ) ;
31597: LD_VAR 0 2
31601: PPUSH
31602: LD_VAR 0 3
31606: PPUSH
31607: CALL_OW 84
// end ;
31611: LD_VAR 0 4
31615: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
31616: LD_INT 0
31618: PPUSH
31619: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
31620: LD_VAR 0 1
31624: NOT
31625: IFTRUE 31644
31627: PUSH
31628: LD_VAR 0 2
31632: PPUSH
31633: LD_VAR 0 3
31637: PPUSH
31638: CALL_OW 488
31642: NOT
31643: OR
31644: IFTRUE 31679
31646: PUSH
31647: LD_VAR 0 1
31651: PPUSH
31652: CALL_OW 266
31656: PUSH
31657: LD_INT 3
31659: NONEQUAL
31660: IFFALSE 31678
31662: PUSH
31663: LD_VAR 0 1
31667: PPUSH
31668: CALL_OW 247
31672: PUSH
31673: LD_INT 1
31675: EQUAL
31676: NOT
31677: AND
31678: OR
31679: IFFALSE 31683
// exit ;
31681: GO 31965
// if GetType ( factory ) = unit_human then
31683: LD_VAR 0 1
31687: PPUSH
31688: CALL_OW 247
31692: PUSH
31693: LD_INT 1
31695: EQUAL
31696: IFFALSE 31713
// factory := IsInUnit ( factory ) ;
31698: LD_ADDR_VAR 0 1
31702: PUSH
31703: LD_VAR 0 1
31707: PPUSH
31708: CALL_OW 310
31712: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
31713: LD_VAR 0 1
31717: PPUSH
31718: CALL_OW 266
31722: PUSH
31723: LD_INT 3
31725: NONEQUAL
31726: IFFALSE 31730
// exit ;
31728: GO 31965
// for i := 1 to Count ( factoryWaypoints ) do
31730: LD_ADDR_VAR 0 5
31734: PUSH
31735: DOUBLE
31736: LD_INT 1
31738: DEC
31739: ST_TO_ADDR
31740: LD_EXP 95
31744: PPUSH
31745: CALL 35295 0 1
31749: PUSH
31750: FOR_TO
31751: IFFALSE 31913
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
31753: LD_VAR 0 2
31757: PPUSH
31758: LD_VAR 0 3
31762: PPUSH
31763: CALL_OW 428
31767: PUSH
31768: LD_EXP 95
31772: PUSH
31773: LD_VAR 0 5
31777: ARRAY
31778: PUSH
31779: LD_INT 2
31781: ARRAY
31782: EQUAL
31783: IFFALSE 31815
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
31785: LD_ADDR_EXP 95
31789: PUSH
31790: LD_EXP 95
31794: PPUSH
31795: LD_VAR 0 5
31799: PPUSH
31800: CALL_OW 3
31804: ST_TO_ADDR
// UpdateFactoryWaypoints ;
31805: CALL 31970 0 0
// exit ;
31809: POP
31810: POP
31811: GO 31965
// end else
31813: GO 31911
// if factory = factoryWaypoints [ i ] [ 2 ] then
31815: LD_VAR 0 1
31819: PUSH
31820: LD_EXP 95
31824: PUSH
31825: LD_VAR 0 5
31829: ARRAY
31830: PUSH
31831: LD_INT 2
31833: ARRAY
31834: EQUAL
31835: IFFALSE 31911
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
31837: LD_ADDR_EXP 95
31841: PUSH
31842: LD_EXP 95
31846: PPUSH
31847: LD_VAR 0 5
31851: PPUSH
31852: CALL_OW 3
31856: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
31857: LD_ADDR_EXP 95
31861: PUSH
31862: LD_EXP 95
31866: PPUSH
31867: LD_VAR 0 1
31871: PPUSH
31872: CALL_OW 255
31876: PUSH
31877: LD_VAR 0 1
31881: PUSH
31882: LD_VAR 0 2
31886: PUSH
31887: LD_VAR 0 3
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: PPUSH
31898: CALL 71227 0 2
31902: ST_TO_ADDR
// UpdateFactoryWaypoints ;
31903: CALL 31970 0 0
// exit ;
31907: POP
31908: POP
31909: GO 31965
// end ; end ;
31911: GO 31750
31913: POP
31914: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
31915: LD_ADDR_EXP 95
31919: PUSH
31920: LD_EXP 95
31924: PPUSH
31925: LD_VAR 0 1
31929: PPUSH
31930: CALL_OW 255
31934: PUSH
31935: LD_VAR 0 1
31939: PUSH
31940: LD_VAR 0 2
31944: PUSH
31945: LD_VAR 0 3
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: PPUSH
31956: CALL 71227 0 2
31960: ST_TO_ADDR
// UpdateFactoryWaypoints ;
31961: CALL 31970 0 0
// end ;
31965: LD_VAR 0 4
31969: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
31970: LD_INT 0
31972: PPUSH
31973: PPUSH
31974: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
31975: LD_STRING resetFactoryWaypoint();
31977: PPUSH
31978: CALL_OW 559
// if factoryWaypoints then
31982: LD_EXP 95
31986: IFFALSE 32107
// begin list := factoryWaypoints ;
31988: LD_ADDR_VAR 0 3
31992: PUSH
31993: LD_EXP 95
31997: ST_TO_ADDR
// for i := 1 to list do
31998: LD_ADDR_VAR 0 2
32002: PUSH
32003: DOUBLE
32004: LD_INT 1
32006: DEC
32007: ST_TO_ADDR
32008: LD_VAR 0 3
32012: PUSH
32013: FOR_TO
32014: IFFALSE 32105
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32016: LD_STRING setFactoryWaypointXY(
32018: PUSH
32019: LD_VAR 0 3
32023: PUSH
32024: LD_VAR 0 2
32028: ARRAY
32029: PUSH
32030: LD_INT 1
32032: ARRAY
32033: STR
32034: PUSH
32035: LD_STRING ,
32037: STR
32038: PUSH
32039: LD_VAR 0 3
32043: PUSH
32044: LD_VAR 0 2
32048: ARRAY
32049: PUSH
32050: LD_INT 2
32052: ARRAY
32053: STR
32054: PUSH
32055: LD_STRING ,
32057: STR
32058: PUSH
32059: LD_VAR 0 3
32063: PUSH
32064: LD_VAR 0 2
32068: ARRAY
32069: PUSH
32070: LD_INT 3
32072: ARRAY
32073: STR
32074: PUSH
32075: LD_STRING ,
32077: STR
32078: PUSH
32079: LD_VAR 0 3
32083: PUSH
32084: LD_VAR 0 2
32088: ARRAY
32089: PUSH
32090: LD_INT 4
32092: ARRAY
32093: STR
32094: PUSH
32095: LD_STRING )
32097: STR
32098: PPUSH
32099: CALL_OW 559
32103: GO 32013
32105: POP
32106: POP
// end ; end ;
32107: LD_VAR 0 1
32111: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
32112: LD_INT 0
32114: PPUSH
// if HexInfo ( x , y ) = warehouse then
32115: LD_VAR 0 2
32119: PPUSH
32120: LD_VAR 0 3
32124: PPUSH
32125: CALL_OW 428
32129: PUSH
32130: LD_VAR 0 1
32134: EQUAL
32135: IFFALSE 32162
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
32137: LD_ADDR_EXP 97
32141: PUSH
32142: LD_EXP 97
32146: PPUSH
32147: LD_VAR 0 1
32151: PPUSH
32152: LD_INT 0
32154: PPUSH
32155: CALL_OW 1
32159: ST_TO_ADDR
32160: GO 32213
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
32162: LD_ADDR_EXP 97
32166: PUSH
32167: LD_EXP 97
32171: PPUSH
32172: LD_VAR 0 1
32176: PPUSH
32177: LD_VAR 0 1
32181: PPUSH
32182: CALL_OW 255
32186: PUSH
32187: LD_VAR 0 1
32191: PUSH
32192: LD_VAR 0 2
32196: PUSH
32197: LD_VAR 0 3
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: PPUSH
32208: CALL_OW 1
32212: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
32213: CALL 32222 0 0
// end ;
32217: LD_VAR 0 4
32221: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
32222: LD_INT 0
32224: PPUSH
32225: PPUSH
32226: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
32227: LD_STRING resetWarehouseGatheringPoints();
32229: PPUSH
32230: CALL_OW 559
// if warehouseGatheringPoints then
32234: LD_EXP 97
32238: IFFALSE 32364
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
32240: LD_ADDR_VAR 0 3
32244: PUSH
32245: LD_EXP 97
32249: PPUSH
32250: CALL 75161 0 1
32254: ST_TO_ADDR
// for i := 1 to list do
32255: LD_ADDR_VAR 0 2
32259: PUSH
32260: DOUBLE
32261: LD_INT 1
32263: DEC
32264: ST_TO_ADDR
32265: LD_VAR 0 3
32269: PUSH
32270: FOR_TO
32271: IFFALSE 32362
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
32273: LD_STRING setWarehouseGatheringPointXY(
32275: PUSH
32276: LD_VAR 0 3
32280: PUSH
32281: LD_VAR 0 2
32285: ARRAY
32286: PUSH
32287: LD_INT 1
32289: ARRAY
32290: STR
32291: PUSH
32292: LD_STRING ,
32294: STR
32295: PUSH
32296: LD_VAR 0 3
32300: PUSH
32301: LD_VAR 0 2
32305: ARRAY
32306: PUSH
32307: LD_INT 2
32309: ARRAY
32310: STR
32311: PUSH
32312: LD_STRING ,
32314: STR
32315: PUSH
32316: LD_VAR 0 3
32320: PUSH
32321: LD_VAR 0 2
32325: ARRAY
32326: PUSH
32327: LD_INT 3
32329: ARRAY
32330: STR
32331: PUSH
32332: LD_STRING ,
32334: STR
32335: PUSH
32336: LD_VAR 0 3
32340: PUSH
32341: LD_VAR 0 2
32345: ARRAY
32346: PUSH
32347: LD_INT 4
32349: ARRAY
32350: STR
32351: PUSH
32352: LD_STRING )
32354: STR
32355: PPUSH
32356: CALL_OW 559
32360: GO 32270
32362: POP
32363: POP
// end ; end ;
32364: LD_VAR 0 1
32368: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
32369: LD_EXP 97
32373: IFFALSE 33068
32375: GO 32377
32377: DISABLE
32378: LD_INT 0
32380: PPUSH
32381: PPUSH
32382: PPUSH
32383: PPUSH
32384: PPUSH
32385: PPUSH
32386: PPUSH
32387: PPUSH
32388: PPUSH
// begin enable ;
32389: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
32390: LD_ADDR_VAR 0 3
32394: PUSH
32395: LD_EXP 97
32399: PPUSH
32400: CALL 75161 0 1
32404: ST_TO_ADDR
// if not list then
32405: LD_VAR 0 3
32409: NOT
32410: IFFALSE 32414
// exit ;
32412: GO 33068
// for i := 1 to list do
32414: LD_ADDR_VAR 0 1
32418: PUSH
32419: DOUBLE
32420: LD_INT 1
32422: DEC
32423: ST_TO_ADDR
32424: LD_VAR 0 3
32428: PUSH
32429: FOR_TO
32430: IFFALSE 33066
// begin depot := list [ i ] [ 2 ] ;
32432: LD_ADDR_VAR 0 8
32436: PUSH
32437: LD_VAR 0 3
32441: PUSH
32442: LD_VAR 0 1
32446: ARRAY
32447: PUSH
32448: LD_INT 2
32450: ARRAY
32451: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
32452: LD_ADDR_VAR 0 5
32456: PUSH
32457: LD_VAR 0 3
32461: PUSH
32462: LD_VAR 0 1
32466: ARRAY
32467: PUSH
32468: LD_INT 1
32470: ARRAY
32471: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
32472: LD_VAR 0 8
32476: PPUSH
32477: CALL_OW 301
32481: IFTRUE 32500
32483: PUSH
32484: LD_VAR 0 5
32488: PUSH
32489: LD_VAR 0 8
32493: PPUSH
32494: CALL_OW 255
32498: NONEQUAL
32499: OR
32500: IFFALSE 32529
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
32502: LD_ADDR_EXP 97
32506: PUSH
32507: LD_EXP 97
32511: PPUSH
32512: LD_VAR 0 8
32516: PPUSH
32517: LD_INT 0
32519: PPUSH
32520: CALL_OW 1
32524: ST_TO_ADDR
// exit ;
32525: POP
32526: POP
32527: GO 33068
// end ; x := list [ i ] [ 3 ] ;
32529: LD_ADDR_VAR 0 6
32533: PUSH
32534: LD_VAR 0 3
32538: PUSH
32539: LD_VAR 0 1
32543: ARRAY
32544: PUSH
32545: LD_INT 3
32547: ARRAY
32548: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
32549: LD_ADDR_VAR 0 7
32553: PUSH
32554: LD_VAR 0 3
32558: PUSH
32559: LD_VAR 0 1
32563: ARRAY
32564: PUSH
32565: LD_INT 4
32567: ARRAY
32568: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
32569: LD_ADDR_VAR 0 9
32573: PUSH
32574: LD_VAR 0 6
32578: PPUSH
32579: LD_VAR 0 7
32583: PPUSH
32584: LD_INT 16
32586: PPUSH
32587: CALL 73735 0 3
32591: ST_TO_ADDR
// if not cratesNearbyPoint then
32592: LD_VAR 0 9
32596: NOT
32597: IFFALSE 32603
// exit ;
32599: POP
32600: POP
32601: GO 33068
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
32603: LD_ADDR_VAR 0 4
32607: PUSH
32608: LD_INT 22
32610: PUSH
32611: LD_VAR 0 5
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: PUSH
32620: LD_INT 3
32622: PUSH
32623: LD_INT 60
32625: PUSH
32626: EMPTY
32627: LIST
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 91
32635: PUSH
32636: LD_VAR 0 8
32640: PUSH
32641: LD_INT 6
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: LIST
32648: PUSH
32649: LD_INT 2
32651: PUSH
32652: LD_INT 25
32654: PUSH
32655: LD_INT 2
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 25
32664: PUSH
32665: LD_INT 16
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: LIST
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: PPUSH
32683: CALL_OW 69
32687: PUSH
32688: LD_VAR 0 8
32692: PPUSH
32693: CALL_OW 313
32697: PPUSH
32698: LD_INT 3
32700: PUSH
32701: LD_INT 60
32703: PUSH
32704: EMPTY
32705: LIST
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PUSH
32711: LD_INT 2
32713: PUSH
32714: LD_INT 25
32716: PUSH
32717: LD_INT 2
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 25
32726: PUSH
32727: LD_INT 16
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: LIST
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PPUSH
32743: CALL_OW 72
32747: UNION
32748: ST_TO_ADDR
// if tmp then
32749: LD_VAR 0 4
32753: IFFALSE 32833
// begin tmp := ShrinkArray ( tmp , 3 ) ;
32755: LD_ADDR_VAR 0 4
32759: PUSH
32760: LD_VAR 0 4
32764: PPUSH
32765: LD_INT 3
32767: PPUSH
32768: CALL 71542 0 2
32772: ST_TO_ADDR
// for j in tmp do
32773: LD_ADDR_VAR 0 2
32777: PUSH
32778: LD_VAR 0 4
32782: PUSH
32783: FOR_IN
32784: IFFALSE 32827
// begin if IsInUnit ( j ) then
32786: LD_VAR 0 2
32790: PPUSH
32791: CALL_OW 310
32795: IFFALSE 32806
// ComExit ( j ) ;
32797: LD_VAR 0 2
32801: PPUSH
32802: CALL 71625 0 1
// AddComCollect ( j , x , y ) ;
32806: LD_VAR 0 2
32810: PPUSH
32811: LD_VAR 0 6
32815: PPUSH
32816: LD_VAR 0 7
32820: PPUSH
32821: CALL_OW 177
// end ;
32825: GO 32783
32827: POP
32828: POP
// exit ;
32829: POP
32830: POP
32831: GO 33068
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
32833: LD_ADDR_VAR 0 4
32837: PUSH
32838: LD_INT 22
32840: PUSH
32841: LD_VAR 0 5
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 91
32852: PUSH
32853: LD_VAR 0 8
32857: PUSH
32858: LD_INT 8
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 2
32868: PUSH
32869: LD_INT 34
32871: PUSH
32872: LD_INT 12
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 34
32881: PUSH
32882: LD_INT 51
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: LD_INT 34
32891: PUSH
32892: LD_INT 32
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: LD_INT 34
32901: PUSH
32902: LD_INT 89
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: LIST
32920: PPUSH
32921: CALL_OW 69
32925: ST_TO_ADDR
// if tmp then
32926: LD_VAR 0 4
32930: IFFALSE 33064
// begin for j in tmp do
32932: LD_ADDR_VAR 0 2
32936: PUSH
32937: LD_VAR 0 4
32941: PUSH
32942: FOR_IN
32943: IFFALSE 33062
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
32945: LD_VAR 0 2
32949: PPUSH
32950: CALL_OW 262
32954: PUSH
32955: LD_INT 3
32957: EQUAL
32958: IFTRUE 32975
32960: PUSH
32961: LD_VAR 0 2
32965: PPUSH
32966: CALL_OW 261
32970: PUSH
32971: LD_INT 20
32973: GREATER
32974: OR
32975: IFFALSE 32989
32977: PUSH
32978: LD_VAR 0 2
32982: PPUSH
32983: CALL_OW 314
32987: NOT
32988: AND
32989: IFFALSE 33019
32991: PUSH
32992: LD_VAR 0 2
32996: PPUSH
32997: CALL_OW 263
33001: PUSH
33002: LD_INT 1
33004: NONEQUAL
33005: IFTRUE 33018
33007: PUSH
33008: LD_VAR 0 2
33012: PPUSH
33013: CALL_OW 311
33017: OR
33018: AND
33019: IFFALSE 33060
// begin ComCollect ( j , x , y ) ;
33021: LD_VAR 0 2
33025: PPUSH
33026: LD_VAR 0 6
33030: PPUSH
33031: LD_VAR 0 7
33035: PPUSH
33036: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
33040: LD_VAR 0 2
33044: PPUSH
33045: LD_VAR 0 8
33049: PPUSH
33050: CALL_OW 172
// exit ;
33054: POP
33055: POP
33056: POP
33057: POP
33058: GO 33068
// end ;
33060: GO 32942
33062: POP
33063: POP
// end ; end ;
33064: GO 32429
33066: POP
33067: POP
// end ; end_of_file end_of_file
33068: PPOPN 9
33070: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33071: LD_INT 0
33073: PPUSH
33074: PPUSH
// if exist_mode then
33075: LD_VAR 0 2
33079: IFFALSE 33125
// begin unit := CreateCharacter ( prefix & ident ) ;
33081: LD_ADDR_VAR 0 5
33085: PUSH
33086: LD_VAR 0 3
33090: PUSH
33091: LD_VAR 0 1
33095: STR
33096: PPUSH
33097: CALL_OW 34
33101: ST_TO_ADDR
// if unit then
33102: LD_VAR 0 5
33106: IFFALSE 33123
// DeleteCharacters ( prefix & ident ) ;
33108: LD_VAR 0 3
33112: PUSH
33113: LD_VAR 0 1
33117: STR
33118: PPUSH
33119: CALL_OW 40
// end else
33123: GO 33140
// unit := NewCharacter ( ident ) ;
33125: LD_ADDR_VAR 0 5
33129: PUSH
33130: LD_VAR 0 1
33134: PPUSH
33135: CALL_OW 25
33139: ST_TO_ADDR
// result := unit ;
33140: LD_ADDR_VAR 0 4
33144: PUSH
33145: LD_VAR 0 5
33149: ST_TO_ADDR
// end ;
33150: LD_VAR 0 4
33154: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
33155: LD_INT 0
33157: PPUSH
33158: PPUSH
// if exist_mode then
33159: LD_VAR 0 2
33163: IFFALSE 33188
// unit := CreateCharacter ( prefix & ident ) else
33165: LD_ADDR_VAR 0 5
33169: PUSH
33170: LD_VAR 0 3
33174: PUSH
33175: LD_VAR 0 1
33179: STR
33180: PPUSH
33181: CALL_OW 34
33185: ST_TO_ADDR
33186: GO 33203
// unit := NewCharacter ( ident ) ;
33188: LD_ADDR_VAR 0 5
33192: PUSH
33193: LD_VAR 0 1
33197: PPUSH
33198: CALL_OW 25
33202: ST_TO_ADDR
// result := unit ;
33203: LD_ADDR_VAR 0 4
33207: PUSH
33208: LD_VAR 0 5
33212: ST_TO_ADDR
// end ;
33213: LD_VAR 0 4
33217: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33218: LD_INT 0
33220: PPUSH
33221: PPUSH
// if not side or not nation then
33222: LD_VAR 0 1
33226: NOT
33227: IFTRUE 33236
33229: PUSH
33230: LD_VAR 0 2
33234: NOT
33235: OR
33236: IFFALSE 33240
// exit ;
33238: GO 34034
// case nation of nation_american :
33240: LD_VAR 0 2
33244: PUSH
33245: LD_INT 1
33247: DOUBLE
33248: EQUAL
33249: IFTRUE 33253
33251: GO 33475
33253: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
33254: LD_ADDR_VAR 0 4
33258: PUSH
33259: LD_INT 35
33261: PUSH
33262: LD_INT 45
33264: PUSH
33265: LD_INT 46
33267: PUSH
33268: LD_INT 47
33270: PUSH
33271: LD_INT 82
33273: PUSH
33274: LD_INT 83
33276: PUSH
33277: LD_INT 84
33279: PUSH
33280: LD_INT 85
33282: PUSH
33283: LD_INT 86
33285: PUSH
33286: LD_INT 1
33288: PUSH
33289: LD_INT 2
33291: PUSH
33292: LD_INT 6
33294: PUSH
33295: LD_INT 15
33297: PUSH
33298: LD_INT 16
33300: PUSH
33301: LD_INT 7
33303: PUSH
33304: LD_INT 12
33306: PUSH
33307: LD_INT 13
33309: PUSH
33310: LD_INT 10
33312: PUSH
33313: LD_INT 14
33315: PUSH
33316: LD_INT 20
33318: PUSH
33319: LD_INT 21
33321: PUSH
33322: LD_INT 22
33324: PUSH
33325: LD_INT 25
33327: PUSH
33328: LD_INT 32
33330: PUSH
33331: LD_INT 27
33333: PUSH
33334: LD_INT 36
33336: PUSH
33337: LD_INT 69
33339: PUSH
33340: LD_INT 39
33342: PUSH
33343: LD_INT 34
33345: PUSH
33346: LD_INT 40
33348: PUSH
33349: LD_INT 48
33351: PUSH
33352: LD_INT 49
33354: PUSH
33355: LD_INT 50
33357: PUSH
33358: LD_INT 51
33360: PUSH
33361: LD_INT 52
33363: PUSH
33364: LD_INT 53
33366: PUSH
33367: LD_INT 54
33369: PUSH
33370: LD_INT 55
33372: PUSH
33373: LD_INT 56
33375: PUSH
33376: LD_INT 57
33378: PUSH
33379: LD_INT 58
33381: PUSH
33382: LD_INT 59
33384: PUSH
33385: LD_INT 60
33387: PUSH
33388: LD_INT 61
33390: PUSH
33391: LD_INT 62
33393: PUSH
33394: LD_INT 80
33396: PUSH
33397: LD_INT 82
33399: PUSH
33400: LD_INT 83
33402: PUSH
33403: LD_INT 84
33405: PUSH
33406: LD_INT 85
33408: PUSH
33409: LD_INT 86
33411: PUSH
33412: LD_INT 90
33414: PUSH
33415: LD_INT 93
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: ST_TO_ADDR
33473: GO 33956
33475: LD_INT 2
33477: DOUBLE
33478: EQUAL
33479: IFTRUE 33483
33481: GO 33717
33483: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
33484: LD_ADDR_VAR 0 4
33488: PUSH
33489: LD_INT 35
33491: PUSH
33492: LD_INT 45
33494: PUSH
33495: LD_INT 46
33497: PUSH
33498: LD_INT 47
33500: PUSH
33501: LD_INT 82
33503: PUSH
33504: LD_INT 83
33506: PUSH
33507: LD_INT 84
33509: PUSH
33510: LD_INT 85
33512: PUSH
33513: LD_INT 87
33515: PUSH
33516: LD_INT 70
33518: PUSH
33519: LD_INT 1
33521: PUSH
33522: LD_INT 11
33524: PUSH
33525: LD_INT 3
33527: PUSH
33528: LD_INT 4
33530: PUSH
33531: LD_INT 5
33533: PUSH
33534: LD_INT 6
33536: PUSH
33537: LD_INT 15
33539: PUSH
33540: LD_INT 18
33542: PUSH
33543: LD_INT 7
33545: PUSH
33546: LD_INT 17
33548: PUSH
33549: LD_INT 8
33551: PUSH
33552: LD_INT 20
33554: PUSH
33555: LD_INT 21
33557: PUSH
33558: LD_INT 22
33560: PUSH
33561: LD_INT 72
33563: PUSH
33564: LD_INT 26
33566: PUSH
33567: LD_INT 69
33569: PUSH
33570: LD_INT 39
33572: PUSH
33573: LD_INT 40
33575: PUSH
33576: LD_INT 41
33578: PUSH
33579: LD_INT 42
33581: PUSH
33582: LD_INT 43
33584: PUSH
33585: LD_INT 48
33587: PUSH
33588: LD_INT 49
33590: PUSH
33591: LD_INT 50
33593: PUSH
33594: LD_INT 51
33596: PUSH
33597: LD_INT 52
33599: PUSH
33600: LD_INT 53
33602: PUSH
33603: LD_INT 54
33605: PUSH
33606: LD_INT 55
33608: PUSH
33609: LD_INT 56
33611: PUSH
33612: LD_INT 60
33614: PUSH
33615: LD_INT 61
33617: PUSH
33618: LD_INT 62
33620: PUSH
33621: LD_INT 66
33623: PUSH
33624: LD_INT 67
33626: PUSH
33627: LD_INT 68
33629: PUSH
33630: LD_INT 81
33632: PUSH
33633: LD_INT 82
33635: PUSH
33636: LD_INT 83
33638: PUSH
33639: LD_INT 84
33641: PUSH
33642: LD_INT 85
33644: PUSH
33645: LD_INT 87
33647: PUSH
33648: LD_INT 88
33650: PUSH
33651: LD_INT 92
33653: PUSH
33654: LD_INT 94
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: ST_TO_ADDR
33715: GO 33956
33717: LD_INT 3
33719: DOUBLE
33720: EQUAL
33721: IFTRUE 33725
33723: GO 33955
33725: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
33726: LD_ADDR_VAR 0 4
33730: PUSH
33731: LD_INT 46
33733: PUSH
33734: LD_INT 47
33736: PUSH
33737: LD_INT 1
33739: PUSH
33740: LD_INT 2
33742: PUSH
33743: LD_INT 82
33745: PUSH
33746: LD_INT 83
33748: PUSH
33749: LD_INT 84
33751: PUSH
33752: LD_INT 85
33754: PUSH
33755: LD_INT 86
33757: PUSH
33758: LD_INT 11
33760: PUSH
33761: LD_INT 9
33763: PUSH
33764: LD_INT 20
33766: PUSH
33767: LD_INT 19
33769: PUSH
33770: LD_INT 21
33772: PUSH
33773: LD_INT 24
33775: PUSH
33776: LD_INT 22
33778: PUSH
33779: LD_INT 25
33781: PUSH
33782: LD_INT 28
33784: PUSH
33785: LD_INT 29
33787: PUSH
33788: LD_INT 30
33790: PUSH
33791: LD_INT 31
33793: PUSH
33794: LD_INT 37
33796: PUSH
33797: LD_INT 38
33799: PUSH
33800: LD_INT 32
33802: PUSH
33803: LD_INT 27
33805: PUSH
33806: LD_INT 33
33808: PUSH
33809: LD_INT 69
33811: PUSH
33812: LD_INT 39
33814: PUSH
33815: LD_INT 34
33817: PUSH
33818: LD_INT 40
33820: PUSH
33821: LD_INT 71
33823: PUSH
33824: LD_INT 23
33826: PUSH
33827: LD_INT 44
33829: PUSH
33830: LD_INT 48
33832: PUSH
33833: LD_INT 49
33835: PUSH
33836: LD_INT 50
33838: PUSH
33839: LD_INT 51
33841: PUSH
33842: LD_INT 52
33844: PUSH
33845: LD_INT 53
33847: PUSH
33848: LD_INT 54
33850: PUSH
33851: LD_INT 55
33853: PUSH
33854: LD_INT 56
33856: PUSH
33857: LD_INT 57
33859: PUSH
33860: LD_INT 58
33862: PUSH
33863: LD_INT 59
33865: PUSH
33866: LD_INT 63
33868: PUSH
33869: LD_INT 64
33871: PUSH
33872: LD_INT 65
33874: PUSH
33875: LD_INT 82
33877: PUSH
33878: LD_INT 83
33880: PUSH
33881: LD_INT 84
33883: PUSH
33884: LD_INT 85
33886: PUSH
33887: LD_INT 86
33889: PUSH
33890: LD_INT 89
33892: PUSH
33893: LD_INT 91
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: ST_TO_ADDR
33953: GO 33956
33955: POP
// if state > - 1 and state < 3 then
33956: LD_VAR 0 3
33960: PUSH
33961: LD_INT 1
33963: NEG
33964: GREATER
33965: IFFALSE 33977
33967: PUSH
33968: LD_VAR 0 3
33972: PUSH
33973: LD_INT 3
33975: LESS
33976: AND
33977: IFFALSE 34034
// for i in result do
33979: LD_ADDR_VAR 0 5
33983: PUSH
33984: LD_VAR 0 4
33988: PUSH
33989: FOR_IN
33990: IFFALSE 34032
// if GetTech ( i , side ) <> state then
33992: LD_VAR 0 5
33996: PPUSH
33997: LD_VAR 0 1
34001: PPUSH
34002: CALL_OW 321
34006: PUSH
34007: LD_VAR 0 3
34011: NONEQUAL
34012: IFFALSE 34030
// result := result diff i ;
34014: LD_ADDR_VAR 0 4
34018: PUSH
34019: LD_VAR 0 4
34023: PUSH
34024: LD_VAR 0 5
34028: DIFF
34029: ST_TO_ADDR
34030: GO 33989
34032: POP
34033: POP
// end ;
34034: LD_VAR 0 4
34038: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
34039: LD_INT 0
34041: PPUSH
34042: PPUSH
34043: PPUSH
// result := true ;
34044: LD_ADDR_VAR 0 3
34048: PUSH
34049: LD_INT 1
34051: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
34052: LD_ADDR_VAR 0 5
34056: PUSH
34057: LD_VAR 0 2
34061: PPUSH
34062: CALL_OW 480
34066: ST_TO_ADDR
// if not tmp then
34067: LD_VAR 0 5
34071: NOT
34072: IFFALSE 34076
// exit ;
34074: GO 34125
// for i in tmp do
34076: LD_ADDR_VAR 0 4
34080: PUSH
34081: LD_VAR 0 5
34085: PUSH
34086: FOR_IN
34087: IFFALSE 34123
// if GetTech ( i , side ) <> state_researched then
34089: LD_VAR 0 4
34093: PPUSH
34094: LD_VAR 0 1
34098: PPUSH
34099: CALL_OW 321
34103: PUSH
34104: LD_INT 2
34106: NONEQUAL
34107: IFFALSE 34121
// begin result := false ;
34109: LD_ADDR_VAR 0 3
34113: PUSH
34114: LD_INT 0
34116: ST_TO_ADDR
// exit ;
34117: POP
34118: POP
34119: GO 34125
// end ;
34121: GO 34086
34123: POP
34124: POP
// end ;
34125: LD_VAR 0 3
34129: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
34130: LD_INT 0
34132: PPUSH
34133: PPUSH
34134: PPUSH
34135: PPUSH
34136: PPUSH
34137: PPUSH
34138: PPUSH
34139: PPUSH
34140: PPUSH
34141: PPUSH
34142: PPUSH
34143: PPUSH
34144: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
34145: LD_VAR 0 1
34149: NOT
34150: IFTRUE 34167
34152: PUSH
34153: LD_VAR 0 1
34157: PPUSH
34158: CALL_OW 257
34162: PUSH
34163: LD_INT 9
34165: NONEQUAL
34166: OR
34167: IFFALSE 34171
// exit ;
34169: GO 34750
// side := GetSide ( unit ) ;
34171: LD_ADDR_VAR 0 9
34175: PUSH
34176: LD_VAR 0 1
34180: PPUSH
34181: CALL_OW 255
34185: ST_TO_ADDR
// tech_space := tech_spacanom ;
34186: LD_ADDR_VAR 0 12
34190: PUSH
34191: LD_INT 29
34193: ST_TO_ADDR
// tech_time := tech_taurad ;
34194: LD_ADDR_VAR 0 13
34198: PUSH
34199: LD_INT 28
34201: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34202: LD_ADDR_VAR 0 11
34206: PUSH
34207: LD_VAR 0 1
34211: PPUSH
34212: CALL_OW 310
34216: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34217: LD_VAR 0 11
34221: PPUSH
34222: CALL_OW 247
34226: PUSH
34227: LD_INT 2
34229: EQUAL
34230: IFFALSE 34234
// exit ;
34232: GO 34750
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34234: LD_ADDR_VAR 0 8
34238: PUSH
34239: LD_INT 81
34241: PUSH
34242: LD_VAR 0 9
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 3
34253: PUSH
34254: LD_INT 21
34256: PUSH
34257: LD_INT 3
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PPUSH
34272: CALL_OW 69
34276: ST_TO_ADDR
// if not tmp then
34277: LD_VAR 0 8
34281: NOT
34282: IFFALSE 34286
// exit ;
34284: GO 34750
// if in_unit then
34286: LD_VAR 0 11
34290: IFFALSE 34314
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34292: LD_ADDR_VAR 0 10
34296: PUSH
34297: LD_VAR 0 8
34301: PPUSH
34302: LD_VAR 0 11
34306: PPUSH
34307: CALL_OW 74
34311: ST_TO_ADDR
34312: GO 34334
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34314: LD_ADDR_VAR 0 10
34318: PUSH
34319: LD_VAR 0 8
34323: PPUSH
34324: LD_VAR 0 1
34328: PPUSH
34329: CALL_OW 74
34333: ST_TO_ADDR
// if not enemy then
34334: LD_VAR 0 10
34338: NOT
34339: IFFALSE 34343
// exit ;
34341: GO 34750
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34343: LD_VAR 0 11
34347: IFFALSE 34369
34349: PUSH
34350: LD_VAR 0 11
34354: PPUSH
34355: LD_VAR 0 10
34359: PPUSH
34360: CALL_OW 296
34364: PUSH
34365: LD_INT 13
34367: GREATER
34368: AND
34369: IFTRUE 34391
34371: PUSH
34372: LD_VAR 0 1
34376: PPUSH
34377: LD_VAR 0 10
34381: PPUSH
34382: CALL_OW 296
34386: PUSH
34387: LD_INT 12
34389: GREATER
34390: OR
34391: IFFALSE 34395
// exit ;
34393: GO 34750
// missile := [ 1 ] ;
34395: LD_ADDR_VAR 0 14
34399: PUSH
34400: LD_INT 1
34402: PUSH
34403: EMPTY
34404: LIST
34405: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34406: LD_VAR 0 9
34410: PPUSH
34411: LD_VAR 0 12
34415: PPUSH
34416: CALL_OW 325
34420: IFFALSE 34449
// missile := Replace ( missile , missile + 1 , 2 ) ;
34422: LD_ADDR_VAR 0 14
34426: PUSH
34427: LD_VAR 0 14
34431: PPUSH
34432: LD_VAR 0 14
34436: PUSH
34437: LD_INT 1
34439: PLUS
34440: PPUSH
34441: LD_INT 2
34443: PPUSH
34444: CALL_OW 1
34448: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34449: LD_VAR 0 9
34453: PPUSH
34454: LD_VAR 0 13
34458: PPUSH
34459: CALL_OW 325
34463: IFFALSE 34487
34465: PUSH
34466: LD_VAR 0 10
34470: PPUSH
34471: CALL_OW 255
34475: PPUSH
34476: LD_VAR 0 13
34480: PPUSH
34481: CALL_OW 325
34485: NOT
34486: AND
34487: IFFALSE 34516
// missile := Replace ( missile , missile + 1 , 3 ) ;
34489: LD_ADDR_VAR 0 14
34493: PUSH
34494: LD_VAR 0 14
34498: PPUSH
34499: LD_VAR 0 14
34503: PUSH
34504: LD_INT 1
34506: PLUS
34507: PPUSH
34508: LD_INT 3
34510: PPUSH
34511: CALL_OW 1
34515: ST_TO_ADDR
// if missile < 2 then
34516: LD_VAR 0 14
34520: PUSH
34521: LD_INT 2
34523: LESS
34524: IFFALSE 34528
// exit ;
34526: GO 34750
// x := GetX ( enemy ) ;
34528: LD_ADDR_VAR 0 4
34532: PUSH
34533: LD_VAR 0 10
34537: PPUSH
34538: CALL_OW 250
34542: ST_TO_ADDR
// y := GetY ( enemy ) ;
34543: LD_ADDR_VAR 0 5
34547: PUSH
34548: LD_VAR 0 10
34552: PPUSH
34553: CALL_OW 251
34557: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34558: LD_ADDR_VAR 0 6
34562: PUSH
34563: LD_VAR 0 4
34567: PUSH
34568: LD_INT 1
34570: NEG
34571: PPUSH
34572: LD_INT 1
34574: PPUSH
34575: CALL_OW 12
34579: PLUS
34580: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34581: LD_ADDR_VAR 0 7
34585: PUSH
34586: LD_VAR 0 5
34590: PUSH
34591: LD_INT 1
34593: NEG
34594: PPUSH
34595: LD_INT 1
34597: PPUSH
34598: CALL_OW 12
34602: PLUS
34603: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34604: LD_VAR 0 6
34608: PPUSH
34609: LD_VAR 0 7
34613: PPUSH
34614: CALL_OW 488
34618: NOT
34619: IFFALSE 34641
// begin _x := x ;
34621: LD_ADDR_VAR 0 6
34625: PUSH
34626: LD_VAR 0 4
34630: ST_TO_ADDR
// _y := y ;
34631: LD_ADDR_VAR 0 7
34635: PUSH
34636: LD_VAR 0 5
34640: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34641: LD_ADDR_VAR 0 3
34645: PUSH
34646: LD_INT 1
34648: PPUSH
34649: LD_VAR 0 14
34653: PPUSH
34654: CALL_OW 12
34658: ST_TO_ADDR
// case i of 1 :
34659: LD_VAR 0 3
34663: PUSH
34664: LD_INT 1
34666: DOUBLE
34667: EQUAL
34668: IFTRUE 34672
34670: GO 34689
34672: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34673: LD_VAR 0 1
34677: PPUSH
34678: LD_VAR 0 10
34682: PPUSH
34683: CALL_OW 115
34687: GO 34750
34689: LD_INT 2
34691: DOUBLE
34692: EQUAL
34693: IFTRUE 34697
34695: GO 34719
34697: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34698: LD_VAR 0 1
34702: PPUSH
34703: LD_VAR 0 6
34707: PPUSH
34708: LD_VAR 0 7
34712: PPUSH
34713: CALL_OW 153
34717: GO 34750
34719: LD_INT 3
34721: DOUBLE
34722: EQUAL
34723: IFTRUE 34727
34725: GO 34749
34727: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34728: LD_VAR 0 1
34732: PPUSH
34733: LD_VAR 0 6
34737: PPUSH
34738: LD_VAR 0 7
34742: PPUSH
34743: CALL_OW 154
34747: GO 34750
34749: POP
// end ;
34750: LD_VAR 0 2
34754: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34755: LD_INT 0
34757: PPUSH
34758: PPUSH
34759: PPUSH
34760: PPUSH
34761: PPUSH
34762: PPUSH
// if not unit or not building then
34763: LD_VAR 0 1
34767: NOT
34768: IFTRUE 34777
34770: PUSH
34771: LD_VAR 0 2
34775: NOT
34776: OR
34777: IFFALSE 34781
// exit ;
34779: GO 34939
// x := GetX ( building ) ;
34781: LD_ADDR_VAR 0 5
34785: PUSH
34786: LD_VAR 0 2
34790: PPUSH
34791: CALL_OW 250
34795: ST_TO_ADDR
// y := GetY ( building ) ;
34796: LD_ADDR_VAR 0 6
34800: PUSH
34801: LD_VAR 0 2
34805: PPUSH
34806: CALL_OW 251
34810: ST_TO_ADDR
// for i := 0 to 5 do
34811: LD_ADDR_VAR 0 4
34815: PUSH
34816: DOUBLE
34817: LD_INT 0
34819: DEC
34820: ST_TO_ADDR
34821: LD_INT 5
34823: PUSH
34824: FOR_TO
34825: IFFALSE 34937
// begin _x := ShiftX ( x , i , 3 ) ;
34827: LD_ADDR_VAR 0 7
34831: PUSH
34832: LD_VAR 0 5
34836: PPUSH
34837: LD_VAR 0 4
34841: PPUSH
34842: LD_INT 3
34844: PPUSH
34845: CALL_OW 272
34849: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34850: LD_ADDR_VAR 0 8
34854: PUSH
34855: LD_VAR 0 6
34859: PPUSH
34860: LD_VAR 0 4
34864: PPUSH
34865: LD_INT 3
34867: PPUSH
34868: CALL_OW 273
34872: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34873: LD_VAR 0 7
34877: PPUSH
34878: LD_VAR 0 8
34882: PPUSH
34883: CALL_OW 488
34887: NOT
34888: IFFALSE 34892
// continue ;
34890: GO 34824
// if HexInfo ( _x , _y ) = 0 then
34892: LD_VAR 0 7
34896: PPUSH
34897: LD_VAR 0 8
34901: PPUSH
34902: CALL_OW 428
34906: PUSH
34907: LD_INT 0
34909: EQUAL
34910: IFFALSE 34935
// begin ComMoveXY ( unit , _x , _y ) ;
34912: LD_VAR 0 1
34916: PPUSH
34917: LD_VAR 0 7
34921: PPUSH
34922: LD_VAR 0 8
34926: PPUSH
34927: CALL_OW 111
// exit ;
34931: POP
34932: POP
34933: GO 34939
// end ; end ;
34935: GO 34824
34937: POP
34938: POP
// end ;
34939: LD_VAR 0 3
34943: RET
// export function ScanBase ( side , base_area ) ; begin
34944: LD_INT 0
34946: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34947: LD_ADDR_VAR 0 3
34951: PUSH
34952: LD_VAR 0 2
34956: PPUSH
34957: LD_INT 81
34959: PUSH
34960: LD_VAR 0 1
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PPUSH
34969: CALL_OW 70
34973: ST_TO_ADDR
// end ;
34974: LD_VAR 0 3
34978: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34979: LD_INT 0
34981: PPUSH
34982: PPUSH
34983: PPUSH
34984: PPUSH
// result := false ;
34985: LD_ADDR_VAR 0 2
34989: PUSH
34990: LD_INT 0
34992: ST_TO_ADDR
// side := GetSide ( unit ) ;
34993: LD_ADDR_VAR 0 3
34997: PUSH
34998: LD_VAR 0 1
35002: PPUSH
35003: CALL_OW 255
35007: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35008: LD_ADDR_VAR 0 4
35012: PUSH
35013: LD_VAR 0 1
35017: PPUSH
35018: CALL_OW 248
35022: ST_TO_ADDR
// case nat of 1 :
35023: LD_VAR 0 4
35027: PUSH
35028: LD_INT 1
35030: DOUBLE
35031: EQUAL
35032: IFTRUE 35036
35034: GO 35047
35036: POP
// tech := tech_lassight ; 2 :
35037: LD_ADDR_VAR 0 5
35041: PUSH
35042: LD_INT 12
35044: ST_TO_ADDR
35045: GO 35086
35047: LD_INT 2
35049: DOUBLE
35050: EQUAL
35051: IFTRUE 35055
35053: GO 35066
35055: POP
// tech := tech_mortar ; 3 :
35056: LD_ADDR_VAR 0 5
35060: PUSH
35061: LD_INT 41
35063: ST_TO_ADDR
35064: GO 35086
35066: LD_INT 3
35068: DOUBLE
35069: EQUAL
35070: IFTRUE 35074
35072: GO 35085
35074: POP
// tech := tech_bazooka ; end ;
35075: LD_ADDR_VAR 0 5
35079: PUSH
35080: LD_INT 44
35082: ST_TO_ADDR
35083: GO 35086
35085: POP
// if Researched ( side , tech ) then
35086: LD_VAR 0 3
35090: PPUSH
35091: LD_VAR 0 5
35095: PPUSH
35096: CALL_OW 325
35100: IFFALSE 35127
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
35102: LD_ADDR_VAR 0 2
35106: PUSH
35107: LD_INT 5
35109: PUSH
35110: LD_INT 8
35112: PUSH
35113: LD_INT 9
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: LIST
35120: PUSH
35121: LD_VAR 0 4
35125: ARRAY
35126: ST_TO_ADDR
// end ;
35127: LD_VAR 0 2
35131: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
35132: LD_INT 0
35134: PPUSH
35135: PPUSH
35136: PPUSH
// if not mines then
35137: LD_VAR 0 2
35141: NOT
35142: IFFALSE 35146
// exit ;
35144: GO 35290
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35146: LD_ADDR_VAR 0 5
35150: PUSH
35151: LD_INT 81
35153: PUSH
35154: LD_VAR 0 1
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 3
35165: PUSH
35166: LD_INT 21
35168: PUSH
35169: LD_INT 3
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PPUSH
35184: CALL_OW 69
35188: ST_TO_ADDR
// for i in mines do
35189: LD_ADDR_VAR 0 4
35193: PUSH
35194: LD_VAR 0 2
35198: PUSH
35199: FOR_IN
35200: IFFALSE 35288
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35202: LD_VAR 0 4
35206: PUSH
35207: LD_INT 1
35209: ARRAY
35210: PPUSH
35211: LD_VAR 0 4
35215: PUSH
35216: LD_INT 2
35218: ARRAY
35219: PPUSH
35220: CALL_OW 458
35224: NOT
35225: IFFALSE 35229
// continue ;
35227: GO 35199
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35229: LD_VAR 0 4
35233: PUSH
35234: LD_INT 1
35236: ARRAY
35237: PPUSH
35238: LD_VAR 0 4
35242: PUSH
35243: LD_INT 2
35245: ARRAY
35246: PPUSH
35247: CALL_OW 428
35251: PUSH
35252: LD_VAR 0 5
35256: IN
35257: IFFALSE 35286
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35259: LD_VAR 0 4
35263: PUSH
35264: LD_INT 1
35266: ARRAY
35267: PPUSH
35268: LD_VAR 0 4
35272: PUSH
35273: LD_INT 2
35275: ARRAY
35276: PPUSH
35277: LD_VAR 0 1
35281: PPUSH
35282: CALL_OW 456
// end ;
35286: GO 35199
35288: POP
35289: POP
// end ;
35290: LD_VAR 0 3
35294: RET
// export function Count ( array ) ; begin
35295: LD_INT 0
35297: PPUSH
// result := array + 0 ;
35298: LD_ADDR_VAR 0 2
35302: PUSH
35303: LD_VAR 0 1
35307: PUSH
35308: LD_INT 0
35310: PLUS
35311: ST_TO_ADDR
// end ;
35312: LD_VAR 0 2
35316: RET
// export function IsEmpty ( building ) ; begin
35317: LD_INT 0
35319: PPUSH
// if not building then
35320: LD_VAR 0 1
35324: NOT
35325: IFFALSE 35329
// exit ;
35327: GO 35372
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35329: LD_ADDR_VAR 0 2
35333: PUSH
35334: LD_VAR 0 1
35338: PUSH
35339: LD_INT 22
35341: PUSH
35342: LD_VAR 0 1
35346: PPUSH
35347: CALL_OW 255
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PUSH
35356: LD_INT 58
35358: PUSH
35359: EMPTY
35360: LIST
35361: PUSH
35362: EMPTY
35363: LIST
35364: LIST
35365: PPUSH
35366: CALL_OW 69
35370: IN
35371: ST_TO_ADDR
// end ;
35372: LD_VAR 0 2
35376: RET
// export function IsNotFull ( building ) ; var places ; begin
35377: LD_INT 0
35379: PPUSH
35380: PPUSH
// if not building then
35381: LD_VAR 0 1
35385: NOT
35386: IFFALSE 35390
// exit ;
35388: GO 35418
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
35390: LD_ADDR_VAR 0 2
35394: PUSH
35395: LD_VAR 0 1
35399: PPUSH
35400: LD_INT 3
35402: PUSH
35403: LD_INT 62
35405: PUSH
35406: EMPTY
35407: LIST
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PPUSH
35413: CALL_OW 72
35417: ST_TO_ADDR
// end ;
35418: LD_VAR 0 2
35422: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35423: LD_INT 0
35425: PPUSH
35426: PPUSH
35427: PPUSH
35428: PPUSH
// tmp := [ ] ;
35429: LD_ADDR_VAR 0 3
35433: PUSH
35434: EMPTY
35435: ST_TO_ADDR
// list := [ ] ;
35436: LD_ADDR_VAR 0 5
35440: PUSH
35441: EMPTY
35442: ST_TO_ADDR
// for i = 16 to 25 do
35443: LD_ADDR_VAR 0 4
35447: PUSH
35448: DOUBLE
35449: LD_INT 16
35451: DEC
35452: ST_TO_ADDR
35453: LD_INT 25
35455: PUSH
35456: FOR_TO
35457: IFFALSE 35530
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35459: LD_ADDR_VAR 0 3
35463: PUSH
35464: LD_VAR 0 3
35468: PUSH
35469: LD_INT 22
35471: PUSH
35472: LD_VAR 0 1
35476: PPUSH
35477: CALL_OW 255
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 91
35488: PUSH
35489: LD_VAR 0 1
35493: PUSH
35494: LD_INT 6
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 30
35504: PUSH
35505: LD_VAR 0 4
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: LIST
35518: PUSH
35519: EMPTY
35520: LIST
35521: PPUSH
35522: CALL_OW 69
35526: ADD
35527: ST_TO_ADDR
35528: GO 35456
35530: POP
35531: POP
// for i = 1 to tmp do
35532: LD_ADDR_VAR 0 4
35536: PUSH
35537: DOUBLE
35538: LD_INT 1
35540: DEC
35541: ST_TO_ADDR
35542: LD_VAR 0 3
35546: PUSH
35547: FOR_TO
35548: IFFALSE 35636
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35550: LD_ADDR_VAR 0 5
35554: PUSH
35555: LD_VAR 0 5
35559: PUSH
35560: LD_VAR 0 3
35564: PUSH
35565: LD_VAR 0 4
35569: ARRAY
35570: PPUSH
35571: CALL_OW 266
35575: PUSH
35576: LD_VAR 0 3
35580: PUSH
35581: LD_VAR 0 4
35585: ARRAY
35586: PPUSH
35587: CALL_OW 250
35591: PUSH
35592: LD_VAR 0 3
35596: PUSH
35597: LD_VAR 0 4
35601: ARRAY
35602: PPUSH
35603: CALL_OW 251
35607: PUSH
35608: LD_VAR 0 3
35612: PUSH
35613: LD_VAR 0 4
35617: ARRAY
35618: PPUSH
35619: CALL_OW 254
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: PUSH
35630: EMPTY
35631: LIST
35632: ADD
35633: ST_TO_ADDR
35634: GO 35547
35636: POP
35637: POP
// result := list ;
35638: LD_ADDR_VAR 0 2
35642: PUSH
35643: LD_VAR 0 5
35647: ST_TO_ADDR
// end ;
35648: LD_VAR 0 2
35652: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35653: LD_INT 0
35655: PPUSH
35656: PPUSH
35657: PPUSH
35658: PPUSH
35659: PPUSH
35660: PPUSH
35661: PPUSH
// if not factory then
35662: LD_VAR 0 1
35666: NOT
35667: IFFALSE 35671
// exit ;
35669: GO 36274
// if control = control_apeman then
35671: LD_VAR 0 4
35675: PUSH
35676: LD_INT 5
35678: EQUAL
35679: IFFALSE 35788
// begin tmp := UnitsInside ( factory ) ;
35681: LD_ADDR_VAR 0 8
35685: PUSH
35686: LD_VAR 0 1
35690: PPUSH
35691: CALL_OW 313
35695: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35696: LD_VAR 0 8
35700: PPUSH
35701: LD_INT 25
35703: PUSH
35704: LD_INT 12
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PPUSH
35711: CALL_OW 72
35715: NOT
35716: IFFALSE 35726
// control := control_manual ;
35718: LD_ADDR_VAR 0 4
35722: PUSH
35723: LD_INT 1
35725: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35726: LD_ADDR_VAR 0 8
35730: PUSH
35731: LD_VAR 0 1
35735: PPUSH
35736: CALL 35423 0 1
35740: ST_TO_ADDR
// if tmp then
35741: LD_VAR 0 8
35745: IFFALSE 35788
// begin for i in tmp do
35747: LD_ADDR_VAR 0 7
35751: PUSH
35752: LD_VAR 0 8
35756: PUSH
35757: FOR_IN
35758: IFFALSE 35786
// if i [ 1 ] = b_ext_radio then
35760: LD_VAR 0 7
35764: PUSH
35765: LD_INT 1
35767: ARRAY
35768: PUSH
35769: LD_INT 22
35771: EQUAL
35772: IFFALSE 35784
// begin control := control_remote ;
35774: LD_ADDR_VAR 0 4
35778: PUSH
35779: LD_INT 2
35781: ST_TO_ADDR
// break ;
35782: GO 35786
// end ;
35784: GO 35757
35786: POP
35787: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35788: LD_VAR 0 1
35792: PPUSH
35793: LD_VAR 0 2
35797: PPUSH
35798: LD_VAR 0 3
35802: PPUSH
35803: LD_VAR 0 4
35807: PPUSH
35808: LD_VAR 0 5
35812: PPUSH
35813: CALL_OW 448
35817: IFFALSE 35852
// begin result := [ chassis , engine , control , weapon ] ;
35819: LD_ADDR_VAR 0 6
35823: PUSH
35824: LD_VAR 0 2
35828: PUSH
35829: LD_VAR 0 3
35833: PUSH
35834: LD_VAR 0 4
35838: PUSH
35839: LD_VAR 0 5
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: ST_TO_ADDR
// exit ;
35850: GO 36274
// end ; _chassis := AvailableChassisList ( factory ) ;
35852: LD_ADDR_VAR 0 9
35856: PUSH
35857: LD_VAR 0 1
35861: PPUSH
35862: CALL_OW 475
35866: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35867: LD_ADDR_VAR 0 11
35871: PUSH
35872: LD_VAR 0 1
35876: PPUSH
35877: CALL_OW 476
35881: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35882: LD_ADDR_VAR 0 12
35886: PUSH
35887: LD_VAR 0 1
35891: PPUSH
35892: CALL_OW 477
35896: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35897: LD_ADDR_VAR 0 10
35901: PUSH
35902: LD_VAR 0 1
35906: PPUSH
35907: CALL_OW 478
35911: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35912: LD_VAR 0 9
35916: NOT
35917: IFTRUE 35926
35919: PUSH
35920: LD_VAR 0 11
35924: NOT
35925: OR
35926: IFTRUE 35935
35928: PUSH
35929: LD_VAR 0 12
35933: NOT
35934: OR
35935: IFTRUE 35944
35937: PUSH
35938: LD_VAR 0 10
35942: NOT
35943: OR
35944: IFFALSE 35979
// begin result := [ chassis , engine , control , weapon ] ;
35946: LD_ADDR_VAR 0 6
35950: PUSH
35951: LD_VAR 0 2
35955: PUSH
35956: LD_VAR 0 3
35960: PUSH
35961: LD_VAR 0 4
35965: PUSH
35966: LD_VAR 0 5
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: ST_TO_ADDR
// exit ;
35977: GO 36274
// end ; if not chassis in _chassis then
35979: LD_VAR 0 2
35983: PUSH
35984: LD_VAR 0 9
35988: IN
35989: NOT
35990: IFFALSE 36016
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35992: LD_ADDR_VAR 0 2
35996: PUSH
35997: LD_VAR 0 9
36001: PUSH
36002: LD_INT 1
36004: PPUSH
36005: LD_VAR 0 9
36009: PPUSH
36010: CALL_OW 12
36014: ARRAY
36015: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
36016: LD_VAR 0 2
36020: PPUSH
36021: LD_VAR 0 3
36025: PPUSH
36026: CALL 36279 0 2
36030: NOT
36031: IFFALSE 36092
// repeat engine := _engine [ 1 ] ;
36033: LD_ADDR_VAR 0 3
36037: PUSH
36038: LD_VAR 0 11
36042: PUSH
36043: LD_INT 1
36045: ARRAY
36046: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
36047: LD_ADDR_VAR 0 11
36051: PUSH
36052: LD_VAR 0 11
36056: PPUSH
36057: LD_INT 1
36059: PPUSH
36060: CALL_OW 3
36064: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
36065: LD_VAR 0 2
36069: PPUSH
36070: LD_VAR 0 3
36074: PPUSH
36075: CALL 36279 0 2
36079: IFTRUE 36090
36081: PUSH
36082: LD_VAR 0 11
36086: PUSH
36087: EMPTY
36088: EQUAL
36089: OR
36090: IFFALSE 36033
// if not control in _control then
36092: LD_VAR 0 4
36096: PUSH
36097: LD_VAR 0 12
36101: IN
36102: NOT
36103: IFFALSE 36129
// control := _control [ rand ( 1 , _control ) ] ;
36105: LD_ADDR_VAR 0 4
36109: PUSH
36110: LD_VAR 0 12
36114: PUSH
36115: LD_INT 1
36117: PPUSH
36118: LD_VAR 0 12
36122: PPUSH
36123: CALL_OW 12
36127: ARRAY
36128: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
36129: LD_VAR 0 2
36133: PPUSH
36134: LD_VAR 0 5
36138: PPUSH
36139: CALL 36501 0 2
36143: NOT
36144: IFFALSE 36205
// repeat weapon := _weapon [ 1 ] ;
36146: LD_ADDR_VAR 0 5
36150: PUSH
36151: LD_VAR 0 10
36155: PUSH
36156: LD_INT 1
36158: ARRAY
36159: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36160: LD_ADDR_VAR 0 10
36164: PUSH
36165: LD_VAR 0 10
36169: PPUSH
36170: LD_INT 1
36172: PPUSH
36173: CALL_OW 3
36177: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36178: LD_VAR 0 2
36182: PPUSH
36183: LD_VAR 0 5
36187: PPUSH
36188: CALL 36501 0 2
36192: IFTRUE 36203
36194: PUSH
36195: LD_VAR 0 10
36199: PUSH
36200: EMPTY
36201: EQUAL
36202: OR
36203: IFFALSE 36146
// result := [ ] ;
36205: LD_ADDR_VAR 0 6
36209: PUSH
36210: EMPTY
36211: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36212: LD_VAR 0 1
36216: PPUSH
36217: LD_VAR 0 2
36221: PPUSH
36222: LD_VAR 0 3
36226: PPUSH
36227: LD_VAR 0 4
36231: PPUSH
36232: LD_VAR 0 5
36236: PPUSH
36237: CALL_OW 448
36241: IFFALSE 36274
// result := [ chassis , engine , control , weapon ] ;
36243: LD_ADDR_VAR 0 6
36247: PUSH
36248: LD_VAR 0 2
36252: PUSH
36253: LD_VAR 0 3
36257: PUSH
36258: LD_VAR 0 4
36262: PUSH
36263: LD_VAR 0 5
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: ST_TO_ADDR
// end ;
36274: LD_VAR 0 6
36278: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36279: LD_INT 0
36281: PPUSH
// if not chassis or not engine then
36282: LD_VAR 0 1
36286: NOT
36287: IFTRUE 36296
36289: PUSH
36290: LD_VAR 0 2
36294: NOT
36295: OR
36296: IFFALSE 36300
// exit ;
36298: GO 36496
// case engine of engine_solar :
36300: LD_VAR 0 2
36304: PUSH
36305: LD_INT 2
36307: DOUBLE
36308: EQUAL
36309: IFTRUE 36313
36311: GO 36351
36313: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36314: LD_ADDR_VAR 0 3
36318: PUSH
36319: LD_INT 11
36321: PUSH
36322: LD_INT 12
36324: PUSH
36325: LD_INT 13
36327: PUSH
36328: LD_INT 14
36330: PUSH
36331: LD_INT 1
36333: PUSH
36334: LD_INT 2
36336: PUSH
36337: LD_INT 3
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: LIST
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: ST_TO_ADDR
36349: GO 36480
36351: LD_INT 1
36353: DOUBLE
36354: EQUAL
36355: IFTRUE 36359
36357: GO 36421
36359: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36360: LD_ADDR_VAR 0 3
36364: PUSH
36365: LD_INT 11
36367: PUSH
36368: LD_INT 12
36370: PUSH
36371: LD_INT 13
36373: PUSH
36374: LD_INT 14
36376: PUSH
36377: LD_INT 1
36379: PUSH
36380: LD_INT 2
36382: PUSH
36383: LD_INT 3
36385: PUSH
36386: LD_INT 4
36388: PUSH
36389: LD_INT 5
36391: PUSH
36392: LD_INT 21
36394: PUSH
36395: LD_INT 23
36397: PUSH
36398: LD_INT 22
36400: PUSH
36401: LD_INT 24
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: ST_TO_ADDR
36419: GO 36480
36421: LD_INT 3
36423: DOUBLE
36424: EQUAL
36425: IFTRUE 36429
36427: GO 36479
36429: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36430: LD_ADDR_VAR 0 3
36434: PUSH
36435: LD_INT 13
36437: PUSH
36438: LD_INT 14
36440: PUSH
36441: LD_INT 2
36443: PUSH
36444: LD_INT 3
36446: PUSH
36447: LD_INT 4
36449: PUSH
36450: LD_INT 5
36452: PUSH
36453: LD_INT 21
36455: PUSH
36456: LD_INT 22
36458: PUSH
36459: LD_INT 23
36461: PUSH
36462: LD_INT 24
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: ST_TO_ADDR
36477: GO 36480
36479: POP
// result := ( chassis in result ) ;
36480: LD_ADDR_VAR 0 3
36484: PUSH
36485: LD_VAR 0 1
36489: PUSH
36490: LD_VAR 0 3
36494: IN
36495: ST_TO_ADDR
// end ;
36496: LD_VAR 0 3
36500: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36501: LD_INT 0
36503: PPUSH
// if not chassis or not weapon then
36504: LD_VAR 0 1
36508: NOT
36509: IFTRUE 36518
36511: PUSH
36512: LD_VAR 0 2
36516: NOT
36517: OR
36518: IFFALSE 36522
// exit ;
36520: GO 37582
// case weapon of us_machine_gun :
36522: LD_VAR 0 2
36526: PUSH
36527: LD_INT 2
36529: DOUBLE
36530: EQUAL
36531: IFTRUE 36535
36533: GO 36565
36535: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36536: LD_ADDR_VAR 0 3
36540: PUSH
36541: LD_INT 1
36543: PUSH
36544: LD_INT 2
36546: PUSH
36547: LD_INT 3
36549: PUSH
36550: LD_INT 4
36552: PUSH
36553: LD_INT 5
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: ST_TO_ADDR
36563: GO 37566
36565: LD_INT 3
36567: DOUBLE
36568: EQUAL
36569: IFTRUE 36573
36571: GO 36603
36573: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36574: LD_ADDR_VAR 0 3
36578: PUSH
36579: LD_INT 1
36581: PUSH
36582: LD_INT 2
36584: PUSH
36585: LD_INT 3
36587: PUSH
36588: LD_INT 4
36590: PUSH
36591: LD_INT 5
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: ST_TO_ADDR
36601: GO 37566
36603: LD_INT 11
36605: DOUBLE
36606: EQUAL
36607: IFTRUE 36611
36609: GO 36641
36611: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36612: LD_ADDR_VAR 0 3
36616: PUSH
36617: LD_INT 1
36619: PUSH
36620: LD_INT 2
36622: PUSH
36623: LD_INT 3
36625: PUSH
36626: LD_INT 4
36628: PUSH
36629: LD_INT 5
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: ST_TO_ADDR
36639: GO 37566
36641: LD_INT 4
36643: DOUBLE
36644: EQUAL
36645: IFTRUE 36649
36647: GO 36675
36649: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36650: LD_ADDR_VAR 0 3
36654: PUSH
36655: LD_INT 2
36657: PUSH
36658: LD_INT 3
36660: PUSH
36661: LD_INT 4
36663: PUSH
36664: LD_INT 5
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: ST_TO_ADDR
36673: GO 37566
36675: LD_INT 5
36677: DOUBLE
36678: EQUAL
36679: IFTRUE 36683
36681: GO 36709
36683: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36684: LD_ADDR_VAR 0 3
36688: PUSH
36689: LD_INT 2
36691: PUSH
36692: LD_INT 3
36694: PUSH
36695: LD_INT 4
36697: PUSH
36698: LD_INT 5
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: ST_TO_ADDR
36707: GO 37566
36709: LD_INT 9
36711: DOUBLE
36712: EQUAL
36713: IFTRUE 36717
36715: GO 36743
36717: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36718: LD_ADDR_VAR 0 3
36722: PUSH
36723: LD_INT 2
36725: PUSH
36726: LD_INT 3
36728: PUSH
36729: LD_INT 4
36731: PUSH
36732: LD_INT 5
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: LIST
36739: LIST
36740: ST_TO_ADDR
36741: GO 37566
36743: LD_INT 7
36745: DOUBLE
36746: EQUAL
36747: IFTRUE 36751
36749: GO 36777
36751: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36752: LD_ADDR_VAR 0 3
36756: PUSH
36757: LD_INT 2
36759: PUSH
36760: LD_INT 3
36762: PUSH
36763: LD_INT 4
36765: PUSH
36766: LD_INT 5
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: ST_TO_ADDR
36775: GO 37566
36777: LD_INT 12
36779: DOUBLE
36780: EQUAL
36781: IFTRUE 36785
36783: GO 36811
36785: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36786: LD_ADDR_VAR 0 3
36790: PUSH
36791: LD_INT 2
36793: PUSH
36794: LD_INT 3
36796: PUSH
36797: LD_INT 4
36799: PUSH
36800: LD_INT 5
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: ST_TO_ADDR
36809: GO 37566
36811: LD_INT 13
36813: DOUBLE
36814: EQUAL
36815: IFTRUE 36819
36817: GO 36845
36819: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36820: LD_ADDR_VAR 0 3
36824: PUSH
36825: LD_INT 2
36827: PUSH
36828: LD_INT 3
36830: PUSH
36831: LD_INT 4
36833: PUSH
36834: LD_INT 5
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: ST_TO_ADDR
36843: GO 37566
36845: LD_INT 14
36847: DOUBLE
36848: EQUAL
36849: IFTRUE 36853
36851: GO 36871
36853: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36854: LD_ADDR_VAR 0 3
36858: PUSH
36859: LD_INT 4
36861: PUSH
36862: LD_INT 5
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: ST_TO_ADDR
36869: GO 37566
36871: LD_INT 6
36873: DOUBLE
36874: EQUAL
36875: IFTRUE 36879
36877: GO 36897
36879: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36880: LD_ADDR_VAR 0 3
36884: PUSH
36885: LD_INT 4
36887: PUSH
36888: LD_INT 5
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: ST_TO_ADDR
36895: GO 37566
36897: LD_INT 10
36899: DOUBLE
36900: EQUAL
36901: IFTRUE 36905
36903: GO 36923
36905: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36906: LD_ADDR_VAR 0 3
36910: PUSH
36911: LD_INT 4
36913: PUSH
36914: LD_INT 5
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: ST_TO_ADDR
36921: GO 37566
36923: LD_INT 22
36925: DOUBLE
36926: EQUAL
36927: IFTRUE 36931
36929: GO 36957
36931: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36932: LD_ADDR_VAR 0 3
36936: PUSH
36937: LD_INT 11
36939: PUSH
36940: LD_INT 12
36942: PUSH
36943: LD_INT 13
36945: PUSH
36946: LD_INT 14
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: ST_TO_ADDR
36955: GO 37566
36957: LD_INT 23
36959: DOUBLE
36960: EQUAL
36961: IFTRUE 36965
36963: GO 36991
36965: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36966: LD_ADDR_VAR 0 3
36970: PUSH
36971: LD_INT 11
36973: PUSH
36974: LD_INT 12
36976: PUSH
36977: LD_INT 13
36979: PUSH
36980: LD_INT 14
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: ST_TO_ADDR
36989: GO 37566
36991: LD_INT 24
36993: DOUBLE
36994: EQUAL
36995: IFTRUE 36999
36997: GO 37025
36999: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
37000: LD_ADDR_VAR 0 3
37004: PUSH
37005: LD_INT 11
37007: PUSH
37008: LD_INT 12
37010: PUSH
37011: LD_INT 13
37013: PUSH
37014: LD_INT 14
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: ST_TO_ADDR
37023: GO 37566
37025: LD_INT 30
37027: DOUBLE
37028: EQUAL
37029: IFTRUE 37033
37031: GO 37059
37033: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
37034: LD_ADDR_VAR 0 3
37038: PUSH
37039: LD_INT 11
37041: PUSH
37042: LD_INT 12
37044: PUSH
37045: LD_INT 13
37047: PUSH
37048: LD_INT 14
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: ST_TO_ADDR
37057: GO 37566
37059: LD_INT 25
37061: DOUBLE
37062: EQUAL
37063: IFTRUE 37067
37065: GO 37085
37067: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
37068: LD_ADDR_VAR 0 3
37072: PUSH
37073: LD_INT 13
37075: PUSH
37076: LD_INT 14
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: ST_TO_ADDR
37083: GO 37566
37085: LD_INT 27
37087: DOUBLE
37088: EQUAL
37089: IFTRUE 37093
37091: GO 37111
37093: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
37094: LD_ADDR_VAR 0 3
37098: PUSH
37099: LD_INT 13
37101: PUSH
37102: LD_INT 14
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: ST_TO_ADDR
37109: GO 37566
37111: LD_INT 92
37113: DOUBLE
37114: EQUAL
37115: IFTRUE 37119
37117: GO 37145
37119: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
37120: LD_ADDR_VAR 0 3
37124: PUSH
37125: LD_INT 11
37127: PUSH
37128: LD_INT 12
37130: PUSH
37131: LD_INT 13
37133: PUSH
37134: LD_INT 14
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: ST_TO_ADDR
37143: GO 37566
37145: LD_INT 28
37147: DOUBLE
37148: EQUAL
37149: IFTRUE 37153
37151: GO 37171
37153: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37154: LD_ADDR_VAR 0 3
37158: PUSH
37159: LD_INT 13
37161: PUSH
37162: LD_INT 14
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: ST_TO_ADDR
37169: GO 37566
37171: LD_INT 29
37173: DOUBLE
37174: EQUAL
37175: IFTRUE 37179
37177: GO 37197
37179: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37180: LD_ADDR_VAR 0 3
37184: PUSH
37185: LD_INT 13
37187: PUSH
37188: LD_INT 14
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: ST_TO_ADDR
37195: GO 37566
37197: LD_INT 31
37199: DOUBLE
37200: EQUAL
37201: IFTRUE 37205
37203: GO 37223
37205: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37206: LD_ADDR_VAR 0 3
37210: PUSH
37211: LD_INT 13
37213: PUSH
37214: LD_INT 14
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: ST_TO_ADDR
37221: GO 37566
37223: LD_INT 26
37225: DOUBLE
37226: EQUAL
37227: IFTRUE 37231
37229: GO 37249
37231: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37232: LD_ADDR_VAR 0 3
37236: PUSH
37237: LD_INT 13
37239: PUSH
37240: LD_INT 14
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: ST_TO_ADDR
37247: GO 37566
37249: LD_INT 42
37251: DOUBLE
37252: EQUAL
37253: IFTRUE 37257
37255: GO 37283
37257: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37258: LD_ADDR_VAR 0 3
37262: PUSH
37263: LD_INT 21
37265: PUSH
37266: LD_INT 22
37268: PUSH
37269: LD_INT 23
37271: PUSH
37272: LD_INT 24
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: ST_TO_ADDR
37281: GO 37566
37283: LD_INT 43
37285: DOUBLE
37286: EQUAL
37287: IFTRUE 37291
37289: GO 37317
37291: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37292: LD_ADDR_VAR 0 3
37296: PUSH
37297: LD_INT 21
37299: PUSH
37300: LD_INT 22
37302: PUSH
37303: LD_INT 23
37305: PUSH
37306: LD_INT 24
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: ST_TO_ADDR
37315: GO 37566
37317: LD_INT 44
37319: DOUBLE
37320: EQUAL
37321: IFTRUE 37325
37323: GO 37351
37325: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37326: LD_ADDR_VAR 0 3
37330: PUSH
37331: LD_INT 21
37333: PUSH
37334: LD_INT 22
37336: PUSH
37337: LD_INT 23
37339: PUSH
37340: LD_INT 24
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: ST_TO_ADDR
37349: GO 37566
37351: LD_INT 45
37353: DOUBLE
37354: EQUAL
37355: IFTRUE 37359
37357: GO 37385
37359: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37360: LD_ADDR_VAR 0 3
37364: PUSH
37365: LD_INT 21
37367: PUSH
37368: LD_INT 22
37370: PUSH
37371: LD_INT 23
37373: PUSH
37374: LD_INT 24
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: ST_TO_ADDR
37383: GO 37566
37385: LD_INT 49
37387: DOUBLE
37388: EQUAL
37389: IFTRUE 37393
37391: GO 37419
37393: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37394: LD_ADDR_VAR 0 3
37398: PUSH
37399: LD_INT 21
37401: PUSH
37402: LD_INT 22
37404: PUSH
37405: LD_INT 23
37407: PUSH
37408: LD_INT 24
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: LIST
37415: LIST
37416: ST_TO_ADDR
37417: GO 37566
37419: LD_INT 51
37421: DOUBLE
37422: EQUAL
37423: IFTRUE 37427
37425: GO 37453
37427: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37428: LD_ADDR_VAR 0 3
37432: PUSH
37433: LD_INT 21
37435: PUSH
37436: LD_INT 22
37438: PUSH
37439: LD_INT 23
37441: PUSH
37442: LD_INT 24
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: ST_TO_ADDR
37451: GO 37566
37453: LD_INT 52
37455: DOUBLE
37456: EQUAL
37457: IFTRUE 37461
37459: GO 37487
37461: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37462: LD_ADDR_VAR 0 3
37466: PUSH
37467: LD_INT 21
37469: PUSH
37470: LD_INT 22
37472: PUSH
37473: LD_INT 23
37475: PUSH
37476: LD_INT 24
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: ST_TO_ADDR
37485: GO 37566
37487: LD_INT 53
37489: DOUBLE
37490: EQUAL
37491: IFTRUE 37495
37493: GO 37513
37495: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37496: LD_ADDR_VAR 0 3
37500: PUSH
37501: LD_INT 23
37503: PUSH
37504: LD_INT 24
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: ST_TO_ADDR
37511: GO 37566
37513: LD_INT 46
37515: DOUBLE
37516: EQUAL
37517: IFTRUE 37521
37519: GO 37539
37521: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37522: LD_ADDR_VAR 0 3
37526: PUSH
37527: LD_INT 23
37529: PUSH
37530: LD_INT 24
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: ST_TO_ADDR
37537: GO 37566
37539: LD_INT 47
37541: DOUBLE
37542: EQUAL
37543: IFTRUE 37547
37545: GO 37565
37547: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37548: LD_ADDR_VAR 0 3
37552: PUSH
37553: LD_INT 23
37555: PUSH
37556: LD_INT 24
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: ST_TO_ADDR
37563: GO 37566
37565: POP
// result := ( chassis in result ) ;
37566: LD_ADDR_VAR 0 3
37570: PUSH
37571: LD_VAR 0 1
37575: PUSH
37576: LD_VAR 0 3
37580: IN
37581: ST_TO_ADDR
// end ;
37582: LD_VAR 0 3
37586: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37587: LD_INT 0
37589: PPUSH
37590: PPUSH
37591: PPUSH
37592: PPUSH
37593: PPUSH
37594: PPUSH
37595: PPUSH
// result := array ;
37596: LD_ADDR_VAR 0 5
37600: PUSH
37601: LD_VAR 0 1
37605: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37606: LD_VAR 0 1
37610: NOT
37611: IFTRUE 37620
37613: PUSH
37614: LD_VAR 0 2
37618: NOT
37619: OR
37620: IFTRUE 37629
37622: PUSH
37623: LD_VAR 0 3
37627: NOT
37628: OR
37629: IFTRUE 37643
37631: PUSH
37632: LD_VAR 0 2
37636: PUSH
37637: LD_VAR 0 1
37641: GREATER
37642: OR
37643: IFTRUE 37657
37645: PUSH
37646: LD_VAR 0 3
37650: PUSH
37651: LD_VAR 0 1
37655: GREATER
37656: OR
37657: IFFALSE 37661
// exit ;
37659: GO 37957
// if direction then
37661: LD_VAR 0 4
37665: IFFALSE 37729
// begin d := 1 ;
37667: LD_ADDR_VAR 0 9
37671: PUSH
37672: LD_INT 1
37674: ST_TO_ADDR
// if i_from > i_to then
37675: LD_VAR 0 2
37679: PUSH
37680: LD_VAR 0 3
37684: GREATER
37685: IFFALSE 37711
// length := ( array - i_from ) + i_to else
37687: LD_ADDR_VAR 0 11
37691: PUSH
37692: LD_VAR 0 1
37696: PUSH
37697: LD_VAR 0 2
37701: MINUS
37702: PUSH
37703: LD_VAR 0 3
37707: PLUS
37708: ST_TO_ADDR
37709: GO 37727
// length := i_to - i_from ;
37711: LD_ADDR_VAR 0 11
37715: PUSH
37716: LD_VAR 0 3
37720: PUSH
37721: LD_VAR 0 2
37725: MINUS
37726: ST_TO_ADDR
// end else
37727: GO 37790
// begin d := - 1 ;
37729: LD_ADDR_VAR 0 9
37733: PUSH
37734: LD_INT 1
37736: NEG
37737: ST_TO_ADDR
// if i_from > i_to then
37738: LD_VAR 0 2
37742: PUSH
37743: LD_VAR 0 3
37747: GREATER
37748: IFFALSE 37768
// length := i_from - i_to else
37750: LD_ADDR_VAR 0 11
37754: PUSH
37755: LD_VAR 0 2
37759: PUSH
37760: LD_VAR 0 3
37764: MINUS
37765: ST_TO_ADDR
37766: GO 37790
// length := ( array - i_to ) + i_from ;
37768: LD_ADDR_VAR 0 11
37772: PUSH
37773: LD_VAR 0 1
37777: PUSH
37778: LD_VAR 0 3
37782: MINUS
37783: PUSH
37784: LD_VAR 0 2
37788: PLUS
37789: ST_TO_ADDR
// end ; if not length then
37790: LD_VAR 0 11
37794: NOT
37795: IFFALSE 37799
// exit ;
37797: GO 37957
// tmp := array ;
37799: LD_ADDR_VAR 0 10
37803: PUSH
37804: LD_VAR 0 1
37808: ST_TO_ADDR
// for i = 1 to length do
37809: LD_ADDR_VAR 0 6
37813: PUSH
37814: DOUBLE
37815: LD_INT 1
37817: DEC
37818: ST_TO_ADDR
37819: LD_VAR 0 11
37823: PUSH
37824: FOR_TO
37825: IFFALSE 37945
// begin for j = 1 to array do
37827: LD_ADDR_VAR 0 7
37831: PUSH
37832: DOUBLE
37833: LD_INT 1
37835: DEC
37836: ST_TO_ADDR
37837: LD_VAR 0 1
37841: PUSH
37842: FOR_TO
37843: IFFALSE 37931
// begin k := j + d ;
37845: LD_ADDR_VAR 0 8
37849: PUSH
37850: LD_VAR 0 7
37854: PUSH
37855: LD_VAR 0 9
37859: PLUS
37860: ST_TO_ADDR
// if k > array then
37861: LD_VAR 0 8
37865: PUSH
37866: LD_VAR 0 1
37870: GREATER
37871: IFFALSE 37881
// k := 1 ;
37873: LD_ADDR_VAR 0 8
37877: PUSH
37878: LD_INT 1
37880: ST_TO_ADDR
// if not k then
37881: LD_VAR 0 8
37885: NOT
37886: IFFALSE 37898
// k := array ;
37888: LD_ADDR_VAR 0 8
37892: PUSH
37893: LD_VAR 0 1
37897: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37898: LD_ADDR_VAR 0 10
37902: PUSH
37903: LD_VAR 0 10
37907: PPUSH
37908: LD_VAR 0 8
37912: PPUSH
37913: LD_VAR 0 1
37917: PUSH
37918: LD_VAR 0 7
37922: ARRAY
37923: PPUSH
37924: CALL_OW 1
37928: ST_TO_ADDR
// end ;
37929: GO 37842
37931: POP
37932: POP
// array := tmp ;
37933: LD_ADDR_VAR 0 1
37937: PUSH
37938: LD_VAR 0 10
37942: ST_TO_ADDR
// end ;
37943: GO 37824
37945: POP
37946: POP
// result := array ;
37947: LD_ADDR_VAR 0 5
37951: PUSH
37952: LD_VAR 0 1
37956: ST_TO_ADDR
// end ;
37957: LD_VAR 0 5
37961: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37962: LD_INT 0
37964: PPUSH
37965: PPUSH
// result := 0 ;
37966: LD_ADDR_VAR 0 3
37970: PUSH
37971: LD_INT 0
37973: ST_TO_ADDR
// if not array or not value in array then
37974: LD_VAR 0 1
37978: NOT
37979: IFTRUE 37994
37981: PUSH
37982: LD_VAR 0 2
37986: PUSH
37987: LD_VAR 0 1
37991: IN
37992: NOT
37993: OR
37994: IFFALSE 37998
// exit ;
37996: GO 38052
// for i = 1 to array do
37998: LD_ADDR_VAR 0 4
38002: PUSH
38003: DOUBLE
38004: LD_INT 1
38006: DEC
38007: ST_TO_ADDR
38008: LD_VAR 0 1
38012: PUSH
38013: FOR_TO
38014: IFFALSE 38050
// if value = array [ i ] then
38016: LD_VAR 0 2
38020: PUSH
38021: LD_VAR 0 1
38025: PUSH
38026: LD_VAR 0 4
38030: ARRAY
38031: EQUAL
38032: IFFALSE 38048
// begin result := i ;
38034: LD_ADDR_VAR 0 3
38038: PUSH
38039: LD_VAR 0 4
38043: ST_TO_ADDR
// exit ;
38044: POP
38045: POP
38046: GO 38052
// end ;
38048: GO 38013
38050: POP
38051: POP
// end ;
38052: LD_VAR 0 3
38056: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
38057: LD_INT 0
38059: PPUSH
// vc_chassis := chassis ;
38060: LD_ADDR_OWVAR 37
38064: PUSH
38065: LD_VAR 0 1
38069: ST_TO_ADDR
// vc_engine := engine ;
38070: LD_ADDR_OWVAR 39
38074: PUSH
38075: LD_VAR 0 2
38079: ST_TO_ADDR
// vc_control := control ;
38080: LD_ADDR_OWVAR 38
38084: PUSH
38085: LD_VAR 0 3
38089: ST_TO_ADDR
// vc_weapon := weapon ;
38090: LD_ADDR_OWVAR 40
38094: PUSH
38095: LD_VAR 0 4
38099: ST_TO_ADDR
// vc_fuel_battery := fuel ;
38100: LD_ADDR_OWVAR 41
38104: PUSH
38105: LD_VAR 0 5
38109: ST_TO_ADDR
// end ;
38110: LD_VAR 0 6
38114: RET
// export function WantPlant ( unit ) ; var task ; begin
38115: LD_INT 0
38117: PPUSH
38118: PPUSH
// result := false ;
38119: LD_ADDR_VAR 0 2
38123: PUSH
38124: LD_INT 0
38126: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
38127: LD_ADDR_VAR 0 3
38131: PUSH
38132: LD_VAR 0 1
38136: PPUSH
38137: CALL_OW 437
38141: ST_TO_ADDR
// if task then
38142: LD_VAR 0 3
38146: IFFALSE 38174
// if task [ 1 ] [ 1 ] = p then
38148: LD_VAR 0 3
38152: PUSH
38153: LD_INT 1
38155: ARRAY
38156: PUSH
38157: LD_INT 1
38159: ARRAY
38160: PUSH
38161: LD_STRING p
38163: EQUAL
38164: IFFALSE 38174
// result := true ;
38166: LD_ADDR_VAR 0 2
38170: PUSH
38171: LD_INT 1
38173: ST_TO_ADDR
// end ;
38174: LD_VAR 0 2
38178: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38179: LD_INT 0
38181: PPUSH
38182: PPUSH
38183: PPUSH
38184: PPUSH
// if pos < 1 then
38185: LD_VAR 0 2
38189: PUSH
38190: LD_INT 1
38192: LESS
38193: IFFALSE 38197
// exit ;
38195: GO 38500
// if pos = 1 then
38197: LD_VAR 0 2
38201: PUSH
38202: LD_INT 1
38204: EQUAL
38205: IFFALSE 38238
// result := Replace ( arr , pos [ 1 ] , value ) else
38207: LD_ADDR_VAR 0 4
38211: PUSH
38212: LD_VAR 0 1
38216: PPUSH
38217: LD_VAR 0 2
38221: PUSH
38222: LD_INT 1
38224: ARRAY
38225: PPUSH
38226: LD_VAR 0 3
38230: PPUSH
38231: CALL_OW 1
38235: ST_TO_ADDR
38236: GO 38500
// begin tmp := arr ;
38238: LD_ADDR_VAR 0 6
38242: PUSH
38243: LD_VAR 0 1
38247: ST_TO_ADDR
// s_arr := [ tmp ] ;
38248: LD_ADDR_VAR 0 7
38252: PUSH
38253: LD_VAR 0 6
38257: PUSH
38258: EMPTY
38259: LIST
38260: ST_TO_ADDR
// for i = 1 to pos - 1 do
38261: LD_ADDR_VAR 0 5
38265: PUSH
38266: DOUBLE
38267: LD_INT 1
38269: DEC
38270: ST_TO_ADDR
38271: LD_VAR 0 2
38275: PUSH
38276: LD_INT 1
38278: MINUS
38279: PUSH
38280: FOR_TO
38281: IFFALSE 38326
// begin tmp := tmp [ pos [ i ] ] ;
38283: LD_ADDR_VAR 0 6
38287: PUSH
38288: LD_VAR 0 6
38292: PUSH
38293: LD_VAR 0 2
38297: PUSH
38298: LD_VAR 0 5
38302: ARRAY
38303: ARRAY
38304: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38305: LD_ADDR_VAR 0 7
38309: PUSH
38310: LD_VAR 0 7
38314: PUSH
38315: LD_VAR 0 6
38319: PUSH
38320: EMPTY
38321: LIST
38322: ADD
38323: ST_TO_ADDR
// end ;
38324: GO 38280
38326: POP
38327: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38328: LD_ADDR_VAR 0 6
38332: PUSH
38333: LD_VAR 0 6
38337: PPUSH
38338: LD_VAR 0 2
38342: PUSH
38343: LD_VAR 0 2
38347: ARRAY
38348: PPUSH
38349: LD_VAR 0 3
38353: PPUSH
38354: CALL_OW 1
38358: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38359: LD_ADDR_VAR 0 7
38363: PUSH
38364: LD_VAR 0 7
38368: PPUSH
38369: LD_VAR 0 7
38373: PPUSH
38374: LD_VAR 0 6
38378: PPUSH
38379: CALL_OW 1
38383: ST_TO_ADDR
// for i = s_arr downto 2 do
38384: LD_ADDR_VAR 0 5
38388: PUSH
38389: DOUBLE
38390: LD_VAR 0 7
38394: INC
38395: ST_TO_ADDR
38396: LD_INT 2
38398: PUSH
38399: FOR_DOWNTO
38400: IFFALSE 38484
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38402: LD_ADDR_VAR 0 6
38406: PUSH
38407: LD_VAR 0 7
38411: PUSH
38412: LD_VAR 0 5
38416: PUSH
38417: LD_INT 1
38419: MINUS
38420: ARRAY
38421: PPUSH
38422: LD_VAR 0 2
38426: PUSH
38427: LD_VAR 0 5
38431: PUSH
38432: LD_INT 1
38434: MINUS
38435: ARRAY
38436: PPUSH
38437: LD_VAR 0 7
38441: PUSH
38442: LD_VAR 0 5
38446: ARRAY
38447: PPUSH
38448: CALL_OW 1
38452: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38453: LD_ADDR_VAR 0 7
38457: PUSH
38458: LD_VAR 0 7
38462: PPUSH
38463: LD_VAR 0 5
38467: PUSH
38468: LD_INT 1
38470: MINUS
38471: PPUSH
38472: LD_VAR 0 6
38476: PPUSH
38477: CALL_OW 1
38481: ST_TO_ADDR
// end ;
38482: GO 38399
38484: POP
38485: POP
// result := s_arr [ 1 ] ;
38486: LD_ADDR_VAR 0 4
38490: PUSH
38491: LD_VAR 0 7
38495: PUSH
38496: LD_INT 1
38498: ARRAY
38499: ST_TO_ADDR
// end ; end ;
38500: LD_VAR 0 4
38504: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38505: LD_INT 0
38507: PPUSH
38508: PPUSH
// if not list then
38509: LD_VAR 0 1
38513: NOT
38514: IFFALSE 38518
// exit ;
38516: GO 38609
// i := list [ pos1 ] ;
38518: LD_ADDR_VAR 0 5
38522: PUSH
38523: LD_VAR 0 1
38527: PUSH
38528: LD_VAR 0 2
38532: ARRAY
38533: ST_TO_ADDR
// if not i then
38534: LD_VAR 0 5
38538: NOT
38539: IFFALSE 38543
// exit ;
38541: GO 38609
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38543: LD_ADDR_VAR 0 1
38547: PUSH
38548: LD_VAR 0 1
38552: PPUSH
38553: LD_VAR 0 2
38557: PPUSH
38558: LD_VAR 0 1
38562: PUSH
38563: LD_VAR 0 3
38567: ARRAY
38568: PPUSH
38569: CALL_OW 1
38573: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38574: LD_ADDR_VAR 0 1
38578: PUSH
38579: LD_VAR 0 1
38583: PPUSH
38584: LD_VAR 0 3
38588: PPUSH
38589: LD_VAR 0 5
38593: PPUSH
38594: CALL_OW 1
38598: ST_TO_ADDR
// result := list ;
38599: LD_ADDR_VAR 0 4
38603: PUSH
38604: LD_VAR 0 1
38608: ST_TO_ADDR
// end ;
38609: LD_VAR 0 4
38613: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38614: LD_INT 0
38616: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38617: LD_ADDR_VAR 0 5
38621: PUSH
38622: LD_VAR 0 1
38626: PPUSH
38627: CALL_OW 250
38631: PPUSH
38632: LD_VAR 0 1
38636: PPUSH
38637: CALL_OW 251
38641: PPUSH
38642: LD_VAR 0 2
38646: PPUSH
38647: LD_VAR 0 3
38651: PPUSH
38652: LD_VAR 0 4
38656: PPUSH
38657: CALL 39039 0 5
38661: ST_TO_ADDR
// end ;
38662: LD_VAR 0 5
38666: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
38667: LD_INT 0
38669: PPUSH
38670: PPUSH
38671: PPUSH
38672: PPUSH
// if not list or not unit then
38673: LD_VAR 0 2
38677: NOT
38678: IFTRUE 38687
38680: PUSH
38681: LD_VAR 0 1
38685: NOT
38686: OR
38687: IFFALSE 38691
// exit ;
38689: GO 39034
// result := [ ] ;
38691: LD_ADDR_VAR 0 5
38695: PUSH
38696: EMPTY
38697: ST_TO_ADDR
// for i in list do
38698: LD_ADDR_VAR 0 6
38702: PUSH
38703: LD_VAR 0 2
38707: PUSH
38708: FOR_IN
38709: IFFALSE 38927
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
38711: LD_ADDR_VAR 0 8
38715: PUSH
38716: LD_VAR 0 1
38720: PPUSH
38721: LD_VAR 0 6
38725: PUSH
38726: LD_INT 1
38728: ARRAY
38729: PPUSH
38730: LD_VAR 0 6
38734: PUSH
38735: LD_INT 2
38737: ARRAY
38738: PPUSH
38739: CALL_OW 297
38743: ST_TO_ADDR
// if not Count ( result ) then
38744: LD_VAR 0 5
38748: PPUSH
38749: CALL 35295 0 1
38753: NOT
38754: IFFALSE 38787
// begin result := Join ( result , [ i , tmp ] ) ;
38756: LD_ADDR_VAR 0 5
38760: PUSH
38761: LD_VAR 0 5
38765: PPUSH
38766: LD_VAR 0 6
38770: PUSH
38771: LD_VAR 0 8
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PPUSH
38780: CALL 71227 0 2
38784: ST_TO_ADDR
// continue ;
38785: GO 38708
// end ; if result [ result ] [ 2 ] <= tmp then
38787: LD_VAR 0 5
38791: PUSH
38792: LD_VAR 0 5
38796: ARRAY
38797: PUSH
38798: LD_INT 2
38800: ARRAY
38801: PUSH
38802: LD_VAR 0 8
38806: LESSEQUAL
38807: IFFALSE 38840
// result := Join ( result , [ i , tmp ] ) else
38809: LD_ADDR_VAR 0 5
38813: PUSH
38814: LD_VAR 0 5
38818: PPUSH
38819: LD_VAR 0 6
38823: PUSH
38824: LD_VAR 0 8
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PPUSH
38833: CALL 71227 0 2
38837: ST_TO_ADDR
38838: GO 38925
// begin for j := 1 to Count ( result ) do
38840: LD_ADDR_VAR 0 7
38844: PUSH
38845: DOUBLE
38846: LD_INT 1
38848: DEC
38849: ST_TO_ADDR
38850: LD_VAR 0 5
38854: PPUSH
38855: CALL 35295 0 1
38859: PUSH
38860: FOR_TO
38861: IFFALSE 38923
// begin if tmp < result [ j ] [ 2 ] then
38863: LD_VAR 0 8
38867: PUSH
38868: LD_VAR 0 5
38872: PUSH
38873: LD_VAR 0 7
38877: ARRAY
38878: PUSH
38879: LD_INT 2
38881: ARRAY
38882: LESS
38883: IFFALSE 38921
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38885: LD_ADDR_VAR 0 5
38889: PUSH
38890: LD_VAR 0 5
38894: PPUSH
38895: LD_VAR 0 7
38899: PPUSH
38900: LD_VAR 0 6
38904: PUSH
38905: LD_VAR 0 8
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PPUSH
38914: CALL_OW 2
38918: ST_TO_ADDR
// break ;
38919: GO 38923
// end ; end ;
38921: GO 38860
38923: POP
38924: POP
// end ; end ;
38925: GO 38708
38927: POP
38928: POP
// if result and not asc then
38929: LD_VAR 0 5
38933: IFFALSE 38942
38935: PUSH
38936: LD_VAR 0 3
38940: NOT
38941: AND
38942: IFFALSE 38959
// result := ReverseArray ( result ) ;
38944: LD_ADDR_VAR 0 5
38948: PUSH
38949: LD_VAR 0 5
38953: PPUSH
38954: CALL 66317 0 1
38958: ST_TO_ADDR
// tmp := [ ] ;
38959: LD_ADDR_VAR 0 8
38963: PUSH
38964: EMPTY
38965: ST_TO_ADDR
// if mode then
38966: LD_VAR 0 4
38970: IFFALSE 39034
// begin for i := 1 to result do
38972: LD_ADDR_VAR 0 6
38976: PUSH
38977: DOUBLE
38978: LD_INT 1
38980: DEC
38981: ST_TO_ADDR
38982: LD_VAR 0 5
38986: PUSH
38987: FOR_TO
38988: IFFALSE 39022
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
38990: LD_ADDR_VAR 0 8
38994: PUSH
38995: LD_VAR 0 8
38999: PPUSH
39000: LD_VAR 0 5
39004: PUSH
39005: LD_VAR 0 6
39009: ARRAY
39010: PUSH
39011: LD_INT 1
39013: ARRAY
39014: PPUSH
39015: CALL 71227 0 2
39019: ST_TO_ADDR
39020: GO 38987
39022: POP
39023: POP
// result := tmp ;
39024: LD_ADDR_VAR 0 5
39028: PUSH
39029: LD_VAR 0 8
39033: ST_TO_ADDR
// end ; end ;
39034: LD_VAR 0 5
39038: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39039: LD_INT 0
39041: PPUSH
39042: PPUSH
39043: PPUSH
39044: PPUSH
// if not list then
39045: LD_VAR 0 3
39049: NOT
39050: IFFALSE 39054
// exit ;
39052: GO 39444
// result := [ ] ;
39054: LD_ADDR_VAR 0 6
39058: PUSH
39059: EMPTY
39060: ST_TO_ADDR
// for i in list do
39061: LD_ADDR_VAR 0 7
39065: PUSH
39066: LD_VAR 0 3
39070: PUSH
39071: FOR_IN
39072: IFFALSE 39274
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39074: LD_ADDR_VAR 0 9
39078: PUSH
39079: LD_VAR 0 7
39083: PPUSH
39084: LD_VAR 0 1
39088: PPUSH
39089: LD_VAR 0 2
39093: PPUSH
39094: CALL_OW 297
39098: ST_TO_ADDR
// if not result then
39099: LD_VAR 0 6
39103: NOT
39104: IFFALSE 39130
// result := [ [ i , tmp ] ] else
39106: LD_ADDR_VAR 0 6
39110: PUSH
39111: LD_VAR 0 7
39115: PUSH
39116: LD_VAR 0 9
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: EMPTY
39126: LIST
39127: ST_TO_ADDR
39128: GO 39272
// begin if result [ result ] [ 2 ] <= tmp then
39130: LD_VAR 0 6
39134: PUSH
39135: LD_VAR 0 6
39139: ARRAY
39140: PUSH
39141: LD_INT 2
39143: ARRAY
39144: PUSH
39145: LD_VAR 0 9
39149: LESSEQUAL
39150: IFFALSE 39192
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39152: LD_ADDR_VAR 0 6
39156: PUSH
39157: LD_VAR 0 6
39161: PPUSH
39162: LD_VAR 0 6
39166: PUSH
39167: LD_INT 1
39169: PLUS
39170: PPUSH
39171: LD_VAR 0 7
39175: PUSH
39176: LD_VAR 0 9
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PPUSH
39185: CALL_OW 2
39189: ST_TO_ADDR
39190: GO 39272
// for j := 1 to result do
39192: LD_ADDR_VAR 0 8
39196: PUSH
39197: DOUBLE
39198: LD_INT 1
39200: DEC
39201: ST_TO_ADDR
39202: LD_VAR 0 6
39206: PUSH
39207: FOR_TO
39208: IFFALSE 39270
// begin if tmp < result [ j ] [ 2 ] then
39210: LD_VAR 0 9
39214: PUSH
39215: LD_VAR 0 6
39219: PUSH
39220: LD_VAR 0 8
39224: ARRAY
39225: PUSH
39226: LD_INT 2
39228: ARRAY
39229: LESS
39230: IFFALSE 39268
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39232: LD_ADDR_VAR 0 6
39236: PUSH
39237: LD_VAR 0 6
39241: PPUSH
39242: LD_VAR 0 8
39246: PPUSH
39247: LD_VAR 0 7
39251: PUSH
39252: LD_VAR 0 9
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PPUSH
39261: CALL_OW 2
39265: ST_TO_ADDR
// break ;
39266: GO 39270
// end ; end ;
39268: GO 39207
39270: POP
39271: POP
// end ; end ;
39272: GO 39071
39274: POP
39275: POP
// if result and not asc then
39276: LD_VAR 0 6
39280: IFFALSE 39289
39282: PUSH
39283: LD_VAR 0 4
39287: NOT
39288: AND
39289: IFFALSE 39364
// begin tmp := result ;
39291: LD_ADDR_VAR 0 9
39295: PUSH
39296: LD_VAR 0 6
39300: ST_TO_ADDR
// for i = tmp downto 1 do
39301: LD_ADDR_VAR 0 7
39305: PUSH
39306: DOUBLE
39307: LD_VAR 0 9
39311: INC
39312: ST_TO_ADDR
39313: LD_INT 1
39315: PUSH
39316: FOR_DOWNTO
39317: IFFALSE 39362
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39319: LD_ADDR_VAR 0 6
39323: PUSH
39324: LD_VAR 0 6
39328: PPUSH
39329: LD_VAR 0 9
39333: PUSH
39334: LD_VAR 0 7
39338: MINUS
39339: PUSH
39340: LD_INT 1
39342: PLUS
39343: PPUSH
39344: LD_VAR 0 9
39348: PUSH
39349: LD_VAR 0 7
39353: ARRAY
39354: PPUSH
39355: CALL_OW 1
39359: ST_TO_ADDR
39360: GO 39316
39362: POP
39363: POP
// end ; tmp := [ ] ;
39364: LD_ADDR_VAR 0 9
39368: PUSH
39369: EMPTY
39370: ST_TO_ADDR
// if mode then
39371: LD_VAR 0 5
39375: IFFALSE 39444
// begin for i = 1 to result do
39377: LD_ADDR_VAR 0 7
39381: PUSH
39382: DOUBLE
39383: LD_INT 1
39385: DEC
39386: ST_TO_ADDR
39387: LD_VAR 0 6
39391: PUSH
39392: FOR_TO
39393: IFFALSE 39432
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39395: LD_ADDR_VAR 0 9
39399: PUSH
39400: LD_VAR 0 9
39404: PPUSH
39405: LD_VAR 0 7
39409: PPUSH
39410: LD_VAR 0 6
39414: PUSH
39415: LD_VAR 0 7
39419: ARRAY
39420: PUSH
39421: LD_INT 1
39423: ARRAY
39424: PPUSH
39425: CALL_OW 1
39429: ST_TO_ADDR
39430: GO 39392
39432: POP
39433: POP
// result := tmp ;
39434: LD_ADDR_VAR 0 6
39438: PUSH
39439: LD_VAR 0 9
39443: ST_TO_ADDR
// end ; end ;
39444: LD_VAR 0 6
39448: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39449: LD_INT 0
39451: PPUSH
39452: PPUSH
39453: PPUSH
39454: PPUSH
39455: PPUSH
39456: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39457: LD_ADDR_VAR 0 5
39461: PUSH
39462: LD_INT 0
39464: PUSH
39465: LD_INT 0
39467: PUSH
39468: LD_INT 0
39470: PUSH
39471: EMPTY
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: ST_TO_ADDR
// if not x or not y then
39479: LD_VAR 0 2
39483: NOT
39484: IFTRUE 39493
39486: PUSH
39487: LD_VAR 0 3
39491: NOT
39492: OR
39493: IFFALSE 39497
// exit ;
39495: GO 41153
// if not range then
39497: LD_VAR 0 4
39501: NOT
39502: IFFALSE 39512
// range := 10 ;
39504: LD_ADDR_VAR 0 4
39508: PUSH
39509: LD_INT 10
39511: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39512: LD_ADDR_VAR 0 8
39516: PUSH
39517: LD_INT 81
39519: PUSH
39520: LD_VAR 0 1
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 92
39531: PUSH
39532: LD_VAR 0 2
39536: PUSH
39537: LD_VAR 0 3
39541: PUSH
39542: LD_VAR 0 4
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 3
39555: PUSH
39556: LD_INT 21
39558: PUSH
39559: LD_INT 3
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: LIST
39574: PPUSH
39575: CALL_OW 69
39579: ST_TO_ADDR
// if not tmp then
39580: LD_VAR 0 8
39584: NOT
39585: IFFALSE 39589
// exit ;
39587: GO 41153
// for i in tmp do
39589: LD_ADDR_VAR 0 6
39593: PUSH
39594: LD_VAR 0 8
39598: PUSH
39599: FOR_IN
39600: IFFALSE 41128
// begin points := [ 0 , 0 , 0 ] ;
39602: LD_ADDR_VAR 0 9
39606: PUSH
39607: LD_INT 0
39609: PUSH
39610: LD_INT 0
39612: PUSH
39613: LD_INT 0
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: LIST
39620: ST_TO_ADDR
// bpoints := 1 ;
39621: LD_ADDR_VAR 0 10
39625: PUSH
39626: LD_INT 1
39628: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39629: LD_VAR 0 6
39633: PPUSH
39634: CALL_OW 247
39638: PUSH
39639: LD_INT 1
39641: DOUBLE
39642: EQUAL
39643: IFTRUE 39647
39645: GO 40229
39647: POP
// begin if GetClass ( i ) = 1 then
39648: LD_VAR 0 6
39652: PPUSH
39653: CALL_OW 257
39657: PUSH
39658: LD_INT 1
39660: EQUAL
39661: IFFALSE 39682
// points := [ 10 , 5 , 3 ] ;
39663: LD_ADDR_VAR 0 9
39667: PUSH
39668: LD_INT 10
39670: PUSH
39671: LD_INT 5
39673: PUSH
39674: LD_INT 3
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: LIST
39681: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39682: LD_VAR 0 6
39686: PPUSH
39687: CALL_OW 257
39691: PUSH
39692: LD_INT 2
39694: PUSH
39695: LD_INT 3
39697: PUSH
39698: LD_INT 4
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: LIST
39705: IN
39706: IFFALSE 39727
// points := [ 3 , 2 , 1 ] ;
39708: LD_ADDR_VAR 0 9
39712: PUSH
39713: LD_INT 3
39715: PUSH
39716: LD_INT 2
39718: PUSH
39719: LD_INT 1
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: LIST
39726: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39727: LD_VAR 0 6
39731: PPUSH
39732: CALL_OW 257
39736: PUSH
39737: LD_INT 5
39739: EQUAL
39740: IFFALSE 39761
// points := [ 130 , 5 , 2 ] ;
39742: LD_ADDR_VAR 0 9
39746: PUSH
39747: LD_INT 130
39749: PUSH
39750: LD_INT 5
39752: PUSH
39753: LD_INT 2
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: LIST
39760: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39761: LD_VAR 0 6
39765: PPUSH
39766: CALL_OW 257
39770: PUSH
39771: LD_INT 8
39773: EQUAL
39774: IFFALSE 39795
// points := [ 35 , 35 , 30 ] ;
39776: LD_ADDR_VAR 0 9
39780: PUSH
39781: LD_INT 35
39783: PUSH
39784: LD_INT 35
39786: PUSH
39787: LD_INT 30
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: LIST
39794: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39795: LD_VAR 0 6
39799: PPUSH
39800: CALL_OW 257
39804: PUSH
39805: LD_INT 9
39807: EQUAL
39808: IFFALSE 39829
// points := [ 20 , 55 , 40 ] ;
39810: LD_ADDR_VAR 0 9
39814: PUSH
39815: LD_INT 20
39817: PUSH
39818: LD_INT 55
39820: PUSH
39821: LD_INT 40
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: LIST
39828: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39829: LD_VAR 0 6
39833: PPUSH
39834: CALL_OW 257
39838: PUSH
39839: LD_INT 12
39841: PUSH
39842: LD_INT 16
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: IN
39849: IFFALSE 39870
// points := [ 5 , 3 , 2 ] ;
39851: LD_ADDR_VAR 0 9
39855: PUSH
39856: LD_INT 5
39858: PUSH
39859: LD_INT 3
39861: PUSH
39862: LD_INT 2
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: LIST
39869: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39870: LD_VAR 0 6
39874: PPUSH
39875: CALL_OW 257
39879: PUSH
39880: LD_INT 17
39882: EQUAL
39883: IFFALSE 39904
// points := [ 100 , 50 , 75 ] ;
39885: LD_ADDR_VAR 0 9
39889: PUSH
39890: LD_INT 100
39892: PUSH
39893: LD_INT 50
39895: PUSH
39896: LD_INT 75
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: LIST
39903: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39904: LD_VAR 0 6
39908: PPUSH
39909: CALL_OW 257
39913: PUSH
39914: LD_INT 15
39916: EQUAL
39917: IFFALSE 39938
// points := [ 10 , 5 , 3 ] ;
39919: LD_ADDR_VAR 0 9
39923: PUSH
39924: LD_INT 10
39926: PUSH
39927: LD_INT 5
39929: PUSH
39930: LD_INT 3
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: LIST
39937: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39938: LD_VAR 0 6
39942: PPUSH
39943: CALL_OW 257
39947: PUSH
39948: LD_INT 14
39950: EQUAL
39951: IFFALSE 39972
// points := [ 10 , 0 , 0 ] ;
39953: LD_ADDR_VAR 0 9
39957: PUSH
39958: LD_INT 10
39960: PUSH
39961: LD_INT 0
39963: PUSH
39964: LD_INT 0
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: LIST
39971: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39972: LD_VAR 0 6
39976: PPUSH
39977: CALL_OW 257
39981: PUSH
39982: LD_INT 11
39984: EQUAL
39985: IFFALSE 40006
// points := [ 30 , 10 , 5 ] ;
39987: LD_ADDR_VAR 0 9
39991: PUSH
39992: LD_INT 30
39994: PUSH
39995: LD_INT 10
39997: PUSH
39998: LD_INT 5
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: LIST
40005: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40006: LD_VAR 0 1
40010: PPUSH
40011: LD_INT 5
40013: PPUSH
40014: CALL_OW 321
40018: PUSH
40019: LD_INT 2
40021: EQUAL
40022: IFFALSE 40039
// bpoints := bpoints * 1.8 ;
40024: LD_ADDR_VAR 0 10
40028: PUSH
40029: LD_VAR 0 10
40033: PUSH
40034: LD_REAL  1.80000000000000E+0000
40037: MUL
40038: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40039: LD_VAR 0 6
40043: PPUSH
40044: CALL_OW 257
40048: PUSH
40049: LD_INT 1
40051: PUSH
40052: LD_INT 2
40054: PUSH
40055: LD_INT 3
40057: PUSH
40058: LD_INT 4
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: IN
40067: IFFALSE 40087
40069: PUSH
40070: LD_VAR 0 1
40074: PPUSH
40075: LD_INT 51
40077: PPUSH
40078: CALL_OW 321
40082: PUSH
40083: LD_INT 2
40085: EQUAL
40086: AND
40087: IFFALSE 40104
// bpoints := bpoints * 1.2 ;
40089: LD_ADDR_VAR 0 10
40093: PUSH
40094: LD_VAR 0 10
40098: PUSH
40099: LD_REAL  1.20000000000000E+0000
40102: MUL
40103: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40104: LD_VAR 0 6
40108: PPUSH
40109: CALL_OW 257
40113: PUSH
40114: LD_INT 5
40116: PUSH
40117: LD_INT 7
40119: PUSH
40120: LD_INT 9
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: LIST
40127: IN
40128: IFFALSE 40148
40130: PUSH
40131: LD_VAR 0 1
40135: PPUSH
40136: LD_INT 52
40138: PPUSH
40139: CALL_OW 321
40143: PUSH
40144: LD_INT 2
40146: EQUAL
40147: AND
40148: IFFALSE 40165
// bpoints := bpoints * 1.5 ;
40150: LD_ADDR_VAR 0 10
40154: PUSH
40155: LD_VAR 0 10
40159: PUSH
40160: LD_REAL  1.50000000000000E+0000
40163: MUL
40164: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40165: LD_VAR 0 1
40169: PPUSH
40170: LD_INT 66
40172: PPUSH
40173: CALL_OW 321
40177: PUSH
40178: LD_INT 2
40180: EQUAL
40181: IFFALSE 40198
// bpoints := bpoints * 1.1 ;
40183: LD_ADDR_VAR 0 10
40187: PUSH
40188: LD_VAR 0 10
40192: PUSH
40193: LD_REAL  1.10000000000000E+0000
40196: MUL
40197: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40198: LD_ADDR_VAR 0 10
40202: PUSH
40203: LD_VAR 0 10
40207: PUSH
40208: LD_VAR 0 6
40212: PPUSH
40213: LD_INT 1
40215: PPUSH
40216: CALL_OW 259
40220: PUSH
40221: LD_REAL  1.15000000000000E+0000
40224: MUL
40225: MUL
40226: ST_TO_ADDR
// end ; unit_vehicle :
40227: GO 41057
40229: LD_INT 2
40231: DOUBLE
40232: EQUAL
40233: IFTRUE 40237
40235: GO 41045
40237: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40238: LD_VAR 0 6
40242: PPUSH
40243: CALL_OW 264
40247: PUSH
40248: LD_INT 2
40250: PUSH
40251: LD_INT 42
40253: PUSH
40254: LD_INT 24
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: LIST
40261: IN
40262: IFFALSE 40283
// points := [ 25 , 5 , 3 ] ;
40264: LD_ADDR_VAR 0 9
40268: PUSH
40269: LD_INT 25
40271: PUSH
40272: LD_INT 5
40274: PUSH
40275: LD_INT 3
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: LIST
40282: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40283: LD_VAR 0 6
40287: PPUSH
40288: CALL_OW 264
40292: PUSH
40293: LD_INT 4
40295: PUSH
40296: LD_INT 43
40298: PUSH
40299: LD_INT 25
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: LIST
40306: IN
40307: IFFALSE 40328
// points := [ 40 , 15 , 5 ] ;
40309: LD_ADDR_VAR 0 9
40313: PUSH
40314: LD_INT 40
40316: PUSH
40317: LD_INT 15
40319: PUSH
40320: LD_INT 5
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: LIST
40327: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40328: LD_VAR 0 6
40332: PPUSH
40333: CALL_OW 264
40337: PUSH
40338: LD_INT 3
40340: PUSH
40341: LD_INT 23
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: IN
40348: IFFALSE 40369
// points := [ 7 , 25 , 8 ] ;
40350: LD_ADDR_VAR 0 9
40354: PUSH
40355: LD_INT 7
40357: PUSH
40358: LD_INT 25
40360: PUSH
40361: LD_INT 8
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: LIST
40368: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40369: LD_VAR 0 6
40373: PPUSH
40374: CALL_OW 264
40378: PUSH
40379: LD_INT 5
40381: PUSH
40382: LD_INT 27
40384: PUSH
40385: LD_INT 44
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: LIST
40392: IN
40393: IFFALSE 40414
// points := [ 14 , 50 , 16 ] ;
40395: LD_ADDR_VAR 0 9
40399: PUSH
40400: LD_INT 14
40402: PUSH
40403: LD_INT 50
40405: PUSH
40406: LD_INT 16
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: LIST
40413: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40414: LD_VAR 0 6
40418: PPUSH
40419: CALL_OW 264
40423: PUSH
40424: LD_INT 6
40426: PUSH
40427: LD_INT 46
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: IN
40434: IFFALSE 40455
// points := [ 32 , 120 , 70 ] ;
40436: LD_ADDR_VAR 0 9
40440: PUSH
40441: LD_INT 32
40443: PUSH
40444: LD_INT 120
40446: PUSH
40447: LD_INT 70
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: LIST
40454: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
40455: LD_VAR 0 6
40459: PPUSH
40460: CALL_OW 264
40464: PUSH
40465: LD_INT 7
40467: PUSH
40468: LD_INT 28
40470: PUSH
40471: LD_INT 45
40473: PUSH
40474: LD_INT 92
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: IN
40483: IFFALSE 40504
// points := [ 35 , 20 , 45 ] ;
40485: LD_ADDR_VAR 0 9
40489: PUSH
40490: LD_INT 35
40492: PUSH
40493: LD_INT 20
40495: PUSH
40496: LD_INT 45
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: LIST
40503: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40504: LD_VAR 0 6
40508: PPUSH
40509: CALL_OW 264
40513: PUSH
40514: LD_INT 47
40516: PUSH
40517: EMPTY
40518: LIST
40519: IN
40520: IFFALSE 40541
// points := [ 67 , 45 , 75 ] ;
40522: LD_ADDR_VAR 0 9
40526: PUSH
40527: LD_INT 67
40529: PUSH
40530: LD_INT 45
40532: PUSH
40533: LD_INT 75
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: LIST
40540: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
40541: LD_VAR 0 6
40545: PPUSH
40546: CALL_OW 264
40550: PUSH
40551: LD_INT 26
40553: PUSH
40554: EMPTY
40555: LIST
40556: IN
40557: IFFALSE 40578
// points := [ 120 , 30 , 80 ] ;
40559: LD_ADDR_VAR 0 9
40563: PUSH
40564: LD_INT 120
40566: PUSH
40567: LD_INT 30
40569: PUSH
40570: LD_INT 80
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: LIST
40577: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40578: LD_VAR 0 6
40582: PPUSH
40583: CALL_OW 264
40587: PUSH
40588: LD_INT 22
40590: PUSH
40591: EMPTY
40592: LIST
40593: IN
40594: IFFALSE 40615
// points := [ 40 , 1 , 1 ] ;
40596: LD_ADDR_VAR 0 9
40600: PUSH
40601: LD_INT 40
40603: PUSH
40604: LD_INT 1
40606: PUSH
40607: LD_INT 1
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: LIST
40614: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40615: LD_VAR 0 6
40619: PPUSH
40620: CALL_OW 264
40624: PUSH
40625: LD_INT 29
40627: PUSH
40628: EMPTY
40629: LIST
40630: IN
40631: IFFALSE 40652
// points := [ 70 , 200 , 400 ] ;
40633: LD_ADDR_VAR 0 9
40637: PUSH
40638: LD_INT 70
40640: PUSH
40641: LD_INT 200
40643: PUSH
40644: LD_INT 400
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: LIST
40651: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40652: LD_VAR 0 6
40656: PPUSH
40657: CALL_OW 264
40661: PUSH
40662: LD_INT 14
40664: PUSH
40665: LD_INT 53
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: IN
40672: IFFALSE 40693
// points := [ 40 , 10 , 20 ] ;
40674: LD_ADDR_VAR 0 9
40678: PUSH
40679: LD_INT 40
40681: PUSH
40682: LD_INT 10
40684: PUSH
40685: LD_INT 20
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: LIST
40692: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40693: LD_VAR 0 6
40697: PPUSH
40698: CALL_OW 264
40702: PUSH
40703: LD_INT 9
40705: PUSH
40706: EMPTY
40707: LIST
40708: IN
40709: IFFALSE 40730
// points := [ 5 , 70 , 20 ] ;
40711: LD_ADDR_VAR 0 9
40715: PUSH
40716: LD_INT 5
40718: PUSH
40719: LD_INT 70
40721: PUSH
40722: LD_INT 20
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: LIST
40729: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40730: LD_VAR 0 6
40734: PPUSH
40735: CALL_OW 264
40739: PUSH
40740: LD_INT 10
40742: PUSH
40743: EMPTY
40744: LIST
40745: IN
40746: IFFALSE 40767
// points := [ 35 , 110 , 70 ] ;
40748: LD_ADDR_VAR 0 9
40752: PUSH
40753: LD_INT 35
40755: PUSH
40756: LD_INT 110
40758: PUSH
40759: LD_INT 70
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: LIST
40766: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40767: LD_VAR 0 6
40771: PPUSH
40772: CALL_OW 265
40776: PUSH
40777: LD_INT 25
40779: EQUAL
40780: IFFALSE 40801
// points := [ 80 , 65 , 100 ] ;
40782: LD_ADDR_VAR 0 9
40786: PUSH
40787: LD_INT 80
40789: PUSH
40790: LD_INT 65
40792: PUSH
40793: LD_INT 100
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: LIST
40800: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40801: LD_VAR 0 6
40805: PPUSH
40806: CALL_OW 263
40810: PUSH
40811: LD_INT 1
40813: EQUAL
40814: IFFALSE 40849
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40816: LD_ADDR_VAR 0 10
40820: PUSH
40821: LD_VAR 0 10
40825: PUSH
40826: LD_VAR 0 6
40830: PPUSH
40831: CALL_OW 311
40835: PPUSH
40836: LD_INT 3
40838: PPUSH
40839: CALL_OW 259
40843: PUSH
40844: LD_INT 4
40846: MUL
40847: MUL
40848: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40849: LD_VAR 0 6
40853: PPUSH
40854: CALL_OW 263
40858: PUSH
40859: LD_INT 2
40861: EQUAL
40862: IFFALSE 40913
// begin j := IsControledBy ( i ) ;
40864: LD_ADDR_VAR 0 7
40868: PUSH
40869: LD_VAR 0 6
40873: PPUSH
40874: CALL_OW 312
40878: ST_TO_ADDR
// if j then
40879: LD_VAR 0 7
40883: IFFALSE 40913
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40885: LD_ADDR_VAR 0 10
40889: PUSH
40890: LD_VAR 0 10
40894: PUSH
40895: LD_VAR 0 7
40899: PPUSH
40900: LD_INT 3
40902: PPUSH
40903: CALL_OW 259
40907: PUSH
40908: LD_INT 3
40910: MUL
40911: MUL
40912: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40913: LD_VAR 0 6
40917: PPUSH
40918: CALL_OW 264
40922: PUSH
40923: LD_INT 5
40925: PUSH
40926: LD_INT 6
40928: PUSH
40929: LD_INT 46
40931: PUSH
40932: LD_INT 44
40934: PUSH
40935: LD_INT 47
40937: PUSH
40938: LD_INT 45
40940: PUSH
40941: LD_INT 28
40943: PUSH
40944: LD_INT 7
40946: PUSH
40947: LD_INT 27
40949: PUSH
40950: LD_INT 29
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: IN
40965: IFFALSE 40985
40967: PUSH
40968: LD_VAR 0 1
40972: PPUSH
40973: LD_INT 52
40975: PPUSH
40976: CALL_OW 321
40980: PUSH
40981: LD_INT 2
40983: EQUAL
40984: AND
40985: IFFALSE 41002
// bpoints := bpoints * 1.2 ;
40987: LD_ADDR_VAR 0 10
40991: PUSH
40992: LD_VAR 0 10
40996: PUSH
40997: LD_REAL  1.20000000000000E+0000
41000: MUL
41001: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41002: LD_VAR 0 6
41006: PPUSH
41007: CALL_OW 264
41011: PUSH
41012: LD_INT 6
41014: PUSH
41015: LD_INT 46
41017: PUSH
41018: LD_INT 47
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: LIST
41025: IN
41026: IFFALSE 41043
// bpoints := bpoints * 1.2 ;
41028: LD_ADDR_VAR 0 10
41032: PUSH
41033: LD_VAR 0 10
41037: PUSH
41038: LD_REAL  1.20000000000000E+0000
41041: MUL
41042: ST_TO_ADDR
// end ; unit_building :
41043: GO 41057
41045: LD_INT 3
41047: DOUBLE
41048: EQUAL
41049: IFTRUE 41053
41051: GO 41056
41053: POP
// ; end ;
41054: GO 41057
41056: POP
// for j = 1 to 3 do
41057: LD_ADDR_VAR 0 7
41061: PUSH
41062: DOUBLE
41063: LD_INT 1
41065: DEC
41066: ST_TO_ADDR
41067: LD_INT 3
41069: PUSH
41070: FOR_TO
41071: IFFALSE 41124
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41073: LD_ADDR_VAR 0 5
41077: PUSH
41078: LD_VAR 0 5
41082: PPUSH
41083: LD_VAR 0 7
41087: PPUSH
41088: LD_VAR 0 5
41092: PUSH
41093: LD_VAR 0 7
41097: ARRAY
41098: PUSH
41099: LD_VAR 0 9
41103: PUSH
41104: LD_VAR 0 7
41108: ARRAY
41109: PUSH
41110: LD_VAR 0 10
41114: MUL
41115: PLUS
41116: PPUSH
41117: CALL_OW 1
41121: ST_TO_ADDR
41122: GO 41070
41124: POP
41125: POP
// end ;
41126: GO 39599
41128: POP
41129: POP
// result := Replace ( result , 4 , tmp ) ;
41130: LD_ADDR_VAR 0 5
41134: PUSH
41135: LD_VAR 0 5
41139: PPUSH
41140: LD_INT 4
41142: PPUSH
41143: LD_VAR 0 8
41147: PPUSH
41148: CALL_OW 1
41152: ST_TO_ADDR
// end ;
41153: LD_VAR 0 5
41157: RET
// export function DangerAtRange ( unit , range ) ; begin
41158: LD_INT 0
41160: PPUSH
// if not unit then
41161: LD_VAR 0 1
41165: NOT
41166: IFFALSE 41170
// exit ;
41168: GO 41215
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41170: LD_ADDR_VAR 0 3
41174: PUSH
41175: LD_VAR 0 1
41179: PPUSH
41180: CALL_OW 255
41184: PPUSH
41185: LD_VAR 0 1
41189: PPUSH
41190: CALL_OW 250
41194: PPUSH
41195: LD_VAR 0 1
41199: PPUSH
41200: CALL_OW 251
41204: PPUSH
41205: LD_VAR 0 2
41209: PPUSH
41210: CALL 39449 0 4
41214: ST_TO_ADDR
// end ;
41215: LD_VAR 0 3
41219: RET
// export function DangerInArea ( side , area ) ; begin
41220: LD_INT 0
41222: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41223: LD_ADDR_VAR 0 3
41227: PUSH
41228: LD_VAR 0 2
41232: PPUSH
41233: LD_INT 81
41235: PUSH
41236: LD_VAR 0 1
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PPUSH
41245: CALL_OW 70
41249: ST_TO_ADDR
// end ;
41250: LD_VAR 0 3
41254: RET
// export function IsExtension ( b ) ; begin
41255: LD_INT 0
41257: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41258: LD_ADDR_VAR 0 2
41262: PUSH
41263: LD_VAR 0 1
41267: PUSH
41268: LD_INT 23
41270: PUSH
41271: LD_INT 20
41273: PUSH
41274: LD_INT 22
41276: PUSH
41277: LD_INT 17
41279: PUSH
41280: LD_INT 24
41282: PUSH
41283: LD_INT 21
41285: PUSH
41286: LD_INT 19
41288: PUSH
41289: LD_INT 16
41291: PUSH
41292: LD_INT 25
41294: PUSH
41295: LD_INT 18
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: IN
41310: ST_TO_ADDR
// end ;
41311: LD_VAR 0 2
41315: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
41316: LD_INT 0
41318: PPUSH
41319: PPUSH
41320: PPUSH
// result := [ ] ;
41321: LD_ADDR_VAR 0 4
41325: PUSH
41326: EMPTY
41327: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41328: LD_ADDR_VAR 0 5
41332: PUSH
41333: LD_VAR 0 2
41337: PPUSH
41338: LD_INT 21
41340: PUSH
41341: LD_INT 3
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PPUSH
41348: CALL_OW 70
41352: ST_TO_ADDR
// if not tmp then
41353: LD_VAR 0 5
41357: NOT
41358: IFFALSE 41362
// exit ;
41360: GO 41426
// if checkLink then
41362: LD_VAR 0 3
41366: IFFALSE 41416
// begin for i in tmp do
41368: LD_ADDR_VAR 0 6
41372: PUSH
41373: LD_VAR 0 5
41377: PUSH
41378: FOR_IN
41379: IFFALSE 41414
// if GetBase ( i ) <> base then
41381: LD_VAR 0 6
41385: PPUSH
41386: CALL_OW 274
41390: PUSH
41391: LD_VAR 0 1
41395: NONEQUAL
41396: IFFALSE 41412
// ComLinkToBase ( base , i ) ;
41398: LD_VAR 0 1
41402: PPUSH
41403: LD_VAR 0 6
41407: PPUSH
41408: CALL_OW 169
41412: GO 41378
41414: POP
41415: POP
// end ; result := tmp ;
41416: LD_ADDR_VAR 0 4
41420: PUSH
41421: LD_VAR 0 5
41425: ST_TO_ADDR
// end ;
41426: LD_VAR 0 4
41430: RET
// export function ComComplete ( units , b ) ; var i ; begin
41431: LD_INT 0
41433: PPUSH
41434: PPUSH
// if not units then
41435: LD_VAR 0 1
41439: NOT
41440: IFFALSE 41444
// exit ;
41442: GO 41534
// for i in units do
41444: LD_ADDR_VAR 0 4
41448: PUSH
41449: LD_VAR 0 1
41453: PUSH
41454: FOR_IN
41455: IFFALSE 41532
// if BuildingStatus ( b ) = bs_build then
41457: LD_VAR 0 2
41461: PPUSH
41462: CALL_OW 461
41466: PUSH
41467: LD_INT 1
41469: EQUAL
41470: IFFALSE 41530
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41472: LD_VAR 0 4
41476: PPUSH
41477: LD_STRING h
41479: PUSH
41480: LD_VAR 0 2
41484: PPUSH
41485: CALL_OW 250
41489: PUSH
41490: LD_VAR 0 2
41494: PPUSH
41495: CALL_OW 251
41499: PUSH
41500: LD_VAR 0 2
41504: PUSH
41505: LD_INT 0
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: LD_INT 0
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: PUSH
41523: EMPTY
41524: LIST
41525: PPUSH
41526: CALL_OW 446
41530: GO 41454
41532: POP
41533: POP
// end ;
41534: LD_VAR 0 3
41538: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
41539: LD_INT 0
41541: PPUSH
41542: PPUSH
41543: PPUSH
41544: PPUSH
41545: PPUSH
41546: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
41547: LD_VAR 0 1
41551: NOT
41552: IFTRUE 41569
41554: PUSH
41555: LD_VAR 0 1
41559: PPUSH
41560: CALL_OW 263
41564: PUSH
41565: LD_INT 2
41567: NONEQUAL
41568: OR
41569: IFFALSE 41573
// exit ;
41571: GO 41889
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41573: LD_ADDR_VAR 0 6
41577: PUSH
41578: LD_INT 22
41580: PUSH
41581: LD_VAR 0 1
41585: PPUSH
41586: CALL_OW 255
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 2
41597: PUSH
41598: LD_INT 30
41600: PUSH
41601: LD_INT 36
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 34
41610: PUSH
41611: LD_INT 31
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: LIST
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PPUSH
41627: CALL_OW 69
41631: ST_TO_ADDR
// if not tmp then
41632: LD_VAR 0 6
41636: NOT
41637: IFFALSE 41641
// exit ;
41639: GO 41889
// result := [ ] ;
41641: LD_ADDR_VAR 0 2
41645: PUSH
41646: EMPTY
41647: ST_TO_ADDR
// for i in tmp do
41648: LD_ADDR_VAR 0 3
41652: PUSH
41653: LD_VAR 0 6
41657: PUSH
41658: FOR_IN
41659: IFFALSE 41730
// begin t := UnitsInside ( i ) ;
41661: LD_ADDR_VAR 0 4
41665: PUSH
41666: LD_VAR 0 3
41670: PPUSH
41671: CALL_OW 313
41675: ST_TO_ADDR
// if t then
41676: LD_VAR 0 4
41680: IFFALSE 41728
// for j in t do
41682: LD_ADDR_VAR 0 7
41686: PUSH
41687: LD_VAR 0 4
41691: PUSH
41692: FOR_IN
41693: IFFALSE 41726
// result := Replace ( result , result + 1 , j ) ;
41695: LD_ADDR_VAR 0 2
41699: PUSH
41700: LD_VAR 0 2
41704: PPUSH
41705: LD_VAR 0 2
41709: PUSH
41710: LD_INT 1
41712: PLUS
41713: PPUSH
41714: LD_VAR 0 7
41718: PPUSH
41719: CALL_OW 1
41723: ST_TO_ADDR
41724: GO 41692
41726: POP
41727: POP
// end ;
41728: GO 41658
41730: POP
41731: POP
// if not result then
41732: LD_VAR 0 2
41736: NOT
41737: IFFALSE 41741
// exit ;
41739: GO 41889
// mech := result [ 1 ] ;
41741: LD_ADDR_VAR 0 5
41745: PUSH
41746: LD_VAR 0 2
41750: PUSH
41751: LD_INT 1
41753: ARRAY
41754: ST_TO_ADDR
// if result > 1 then
41755: LD_VAR 0 2
41759: PUSH
41760: LD_INT 1
41762: GREATER
41763: IFFALSE 41875
// begin for i = 2 to result do
41765: LD_ADDR_VAR 0 3
41769: PUSH
41770: DOUBLE
41771: LD_INT 2
41773: DEC
41774: ST_TO_ADDR
41775: LD_VAR 0 2
41779: PUSH
41780: FOR_TO
41781: IFFALSE 41873
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41783: LD_ADDR_VAR 0 4
41787: PUSH
41788: LD_VAR 0 2
41792: PUSH
41793: LD_VAR 0 3
41797: ARRAY
41798: PPUSH
41799: LD_INT 3
41801: PPUSH
41802: CALL_OW 259
41806: PUSH
41807: LD_VAR 0 2
41811: PUSH
41812: LD_VAR 0 3
41816: ARRAY
41817: PPUSH
41818: CALL_OW 432
41822: MINUS
41823: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41824: LD_VAR 0 4
41828: PUSH
41829: LD_VAR 0 5
41833: PPUSH
41834: LD_INT 3
41836: PPUSH
41837: CALL_OW 259
41841: PUSH
41842: LD_VAR 0 5
41846: PPUSH
41847: CALL_OW 432
41851: MINUS
41852: GREATEREQUAL
41853: IFFALSE 41871
// mech := result [ i ] ;
41855: LD_ADDR_VAR 0 5
41859: PUSH
41860: LD_VAR 0 2
41864: PUSH
41865: LD_VAR 0 3
41869: ARRAY
41870: ST_TO_ADDR
// end ;
41871: GO 41780
41873: POP
41874: POP
// end ; ComLinkTo ( vehicle , mech ) ;
41875: LD_VAR 0 1
41879: PPUSH
41880: LD_VAR 0 5
41884: PPUSH
41885: CALL_OW 135
// end ;
41889: LD_VAR 0 2
41893: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41894: LD_INT 0
41896: PPUSH
41897: PPUSH
41898: PPUSH
41899: PPUSH
41900: PPUSH
41901: PPUSH
41902: PPUSH
41903: PPUSH
41904: PPUSH
41905: PPUSH
41906: PPUSH
41907: PPUSH
41908: PPUSH
// result := [ ] ;
41909: LD_ADDR_VAR 0 7
41913: PUSH
41914: EMPTY
41915: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41916: LD_VAR 0 1
41920: PPUSH
41921: CALL_OW 266
41925: PUSH
41926: LD_INT 0
41928: PUSH
41929: LD_INT 1
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: IN
41936: NOT
41937: IFFALSE 41941
// exit ;
41939: GO 43581
// if name then
41941: LD_VAR 0 3
41945: IFFALSE 41961
// SetBName ( base_dep , name ) ;
41947: LD_VAR 0 1
41951: PPUSH
41952: LD_VAR 0 3
41956: PPUSH
41957: CALL_OW 500
// base := GetBase ( base_dep ) ;
41961: LD_ADDR_VAR 0 15
41965: PUSH
41966: LD_VAR 0 1
41970: PPUSH
41971: CALL_OW 274
41975: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41976: LD_ADDR_VAR 0 16
41980: PUSH
41981: LD_VAR 0 1
41985: PPUSH
41986: CALL_OW 255
41990: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41991: LD_ADDR_VAR 0 17
41995: PUSH
41996: LD_VAR 0 1
42000: PPUSH
42001: CALL_OW 248
42005: ST_TO_ADDR
// if sources then
42006: LD_VAR 0 5
42010: IFFALSE 42057
// for i = 1 to 3 do
42012: LD_ADDR_VAR 0 8
42016: PUSH
42017: DOUBLE
42018: LD_INT 1
42020: DEC
42021: ST_TO_ADDR
42022: LD_INT 3
42024: PUSH
42025: FOR_TO
42026: IFFALSE 42055
// AddResourceType ( base , i , sources [ i ] ) ;
42028: LD_VAR 0 15
42032: PPUSH
42033: LD_VAR 0 8
42037: PPUSH
42038: LD_VAR 0 5
42042: PUSH
42043: LD_VAR 0 8
42047: ARRAY
42048: PPUSH
42049: CALL_OW 276
42053: GO 42025
42055: POP
42056: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42057: LD_ADDR_VAR 0 18
42061: PUSH
42062: LD_VAR 0 15
42066: PPUSH
42067: LD_VAR 0 2
42071: PPUSH
42072: LD_INT 1
42074: PPUSH
42075: CALL 41316 0 3
42079: ST_TO_ADDR
// InitHc ;
42080: CALL_OW 19
// InitUc ;
42084: CALL_OW 18
// uc_side := side ;
42088: LD_ADDR_OWVAR 20
42092: PUSH
42093: LD_VAR 0 16
42097: ST_TO_ADDR
// uc_nation := nation ;
42098: LD_ADDR_OWVAR 21
42102: PUSH
42103: LD_VAR 0 17
42107: ST_TO_ADDR
// if buildings then
42108: LD_VAR 0 18
42112: IFFALSE 43440
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42114: LD_ADDR_VAR 0 19
42118: PUSH
42119: LD_VAR 0 18
42123: PPUSH
42124: LD_INT 2
42126: PUSH
42127: LD_INT 30
42129: PUSH
42130: LD_INT 29
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 30
42139: PUSH
42140: LD_INT 30
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: LIST
42151: PPUSH
42152: CALL_OW 72
42156: ST_TO_ADDR
// if tmp then
42157: LD_VAR 0 19
42161: IFFALSE 42209
// for i in tmp do
42163: LD_ADDR_VAR 0 8
42167: PUSH
42168: LD_VAR 0 19
42172: PUSH
42173: FOR_IN
42174: IFFALSE 42207
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42176: LD_VAR 0 8
42180: PPUSH
42181: CALL_OW 250
42185: PPUSH
42186: LD_VAR 0 8
42190: PPUSH
42191: CALL_OW 251
42195: PPUSH
42196: LD_VAR 0 16
42200: PPUSH
42201: CALL_OW 441
42205: GO 42173
42207: POP
42208: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42209: LD_VAR 0 18
42213: PPUSH
42214: LD_INT 2
42216: PUSH
42217: LD_INT 30
42219: PUSH
42220: LD_INT 32
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 30
42229: PUSH
42230: LD_INT 33
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: LIST
42241: PPUSH
42242: CALL_OW 72
42246: IFFALSE 42334
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42248: LD_ADDR_VAR 0 8
42252: PUSH
42253: LD_VAR 0 18
42257: PPUSH
42258: LD_INT 2
42260: PUSH
42261: LD_INT 30
42263: PUSH
42264: LD_INT 32
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 30
42273: PUSH
42274: LD_INT 33
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: LIST
42285: PPUSH
42286: CALL_OW 72
42290: PUSH
42291: FOR_IN
42292: IFFALSE 42332
// begin if not GetBWeapon ( i ) then
42294: LD_VAR 0 8
42298: PPUSH
42299: CALL_OW 269
42303: NOT
42304: IFFALSE 42330
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42306: LD_VAR 0 8
42310: PPUSH
42311: LD_VAR 0 8
42315: PPUSH
42316: LD_VAR 0 2
42320: PPUSH
42321: CALL 43586 0 2
42325: PPUSH
42326: CALL_OW 431
// end ;
42330: GO 42291
42332: POP
42333: POP
// end ; for i = 1 to personel do
42334: LD_ADDR_VAR 0 8
42338: PUSH
42339: DOUBLE
42340: LD_INT 1
42342: DEC
42343: ST_TO_ADDR
42344: LD_VAR 0 6
42348: PUSH
42349: FOR_TO
42350: IFFALSE 43420
// begin if i > 4 then
42352: LD_VAR 0 8
42356: PUSH
42357: LD_INT 4
42359: GREATER
42360: IFFALSE 42364
// break ;
42362: GO 43420
// case i of 1 :
42364: LD_VAR 0 8
42368: PUSH
42369: LD_INT 1
42371: DOUBLE
42372: EQUAL
42373: IFTRUE 42377
42375: GO 42457
42377: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
42378: LD_ADDR_VAR 0 12
42382: PUSH
42383: LD_VAR 0 18
42387: PPUSH
42388: LD_INT 22
42390: PUSH
42391: LD_VAR 0 16
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 58
42402: PUSH
42403: EMPTY
42404: LIST
42405: PUSH
42406: LD_INT 2
42408: PUSH
42409: LD_INT 30
42411: PUSH
42412: LD_INT 32
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 30
42421: PUSH
42422: LD_INT 4
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 30
42431: PUSH
42432: LD_INT 5
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: LIST
42449: PPUSH
42450: CALL_OW 72
42454: ST_TO_ADDR
42455: GO 42679
42457: LD_INT 2
42459: DOUBLE
42460: EQUAL
42461: IFTRUE 42465
42463: GO 42527
42465: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42466: LD_ADDR_VAR 0 12
42470: PUSH
42471: LD_VAR 0 18
42475: PPUSH
42476: LD_INT 22
42478: PUSH
42479: LD_VAR 0 16
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 2
42490: PUSH
42491: LD_INT 30
42493: PUSH
42494: LD_INT 0
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 30
42503: PUSH
42504: LD_INT 1
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: LIST
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PPUSH
42520: CALL_OW 72
42524: ST_TO_ADDR
42525: GO 42679
42527: LD_INT 3
42529: DOUBLE
42530: EQUAL
42531: IFTRUE 42535
42533: GO 42597
42535: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
42536: LD_ADDR_VAR 0 12
42540: PUSH
42541: LD_VAR 0 18
42545: PPUSH
42546: LD_INT 22
42548: PUSH
42549: LD_VAR 0 16
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 2
42560: PUSH
42561: LD_INT 30
42563: PUSH
42564: LD_INT 2
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 30
42573: PUSH
42574: LD_INT 3
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: LIST
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PPUSH
42590: CALL_OW 72
42594: ST_TO_ADDR
42595: GO 42679
42597: LD_INT 4
42599: DOUBLE
42600: EQUAL
42601: IFTRUE 42605
42603: GO 42678
42605: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42606: LD_ADDR_VAR 0 12
42610: PUSH
42611: LD_VAR 0 18
42615: PPUSH
42616: LD_INT 22
42618: PUSH
42619: LD_VAR 0 16
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 2
42630: PUSH
42631: LD_INT 30
42633: PUSH
42634: LD_INT 6
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 30
42643: PUSH
42644: LD_INT 7
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 30
42653: PUSH
42654: LD_INT 8
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PPUSH
42671: CALL_OW 72
42675: ST_TO_ADDR
42676: GO 42679
42678: POP
// if i = 1 then
42679: LD_VAR 0 8
42683: PUSH
42684: LD_INT 1
42686: EQUAL
42687: IFFALSE 42798
// begin tmp := [ ] ;
42689: LD_ADDR_VAR 0 19
42693: PUSH
42694: EMPTY
42695: ST_TO_ADDR
// for j in f do
42696: LD_ADDR_VAR 0 9
42700: PUSH
42701: LD_VAR 0 12
42705: PUSH
42706: FOR_IN
42707: IFFALSE 42780
// if GetBType ( j ) = b_bunker then
42709: LD_VAR 0 9
42713: PPUSH
42714: CALL_OW 266
42718: PUSH
42719: LD_INT 32
42721: EQUAL
42722: IFFALSE 42749
// tmp := Insert ( tmp , 1 , j ) else
42724: LD_ADDR_VAR 0 19
42728: PUSH
42729: LD_VAR 0 19
42733: PPUSH
42734: LD_INT 1
42736: PPUSH
42737: LD_VAR 0 9
42741: PPUSH
42742: CALL_OW 2
42746: ST_TO_ADDR
42747: GO 42778
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42749: LD_ADDR_VAR 0 19
42753: PUSH
42754: LD_VAR 0 19
42758: PPUSH
42759: LD_VAR 0 19
42763: PUSH
42764: LD_INT 1
42766: PLUS
42767: PPUSH
42768: LD_VAR 0 9
42772: PPUSH
42773: CALL_OW 2
42777: ST_TO_ADDR
42778: GO 42706
42780: POP
42781: POP
// if tmp then
42782: LD_VAR 0 19
42786: IFFALSE 42798
// f := tmp ;
42788: LD_ADDR_VAR 0 12
42792: PUSH
42793: LD_VAR 0 19
42797: ST_TO_ADDR
// end ; x := personel [ i ] ;
42798: LD_ADDR_VAR 0 13
42802: PUSH
42803: LD_VAR 0 6
42807: PUSH
42808: LD_VAR 0 8
42812: ARRAY
42813: ST_TO_ADDR
// if x = - 1 then
42814: LD_VAR 0 13
42818: PUSH
42819: LD_INT 1
42821: NEG
42822: EQUAL
42823: IFFALSE 43034
// begin for j in f do
42825: LD_ADDR_VAR 0 9
42829: PUSH
42830: LD_VAR 0 12
42834: PUSH
42835: FOR_IN
42836: IFFALSE 43030
// repeat InitHc ;
42838: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42842: LD_VAR 0 9
42846: PPUSH
42847: CALL_OW 266
42851: PUSH
42852: LD_INT 5
42854: EQUAL
42855: IFFALSE 42925
// begin if UnitsInside ( j ) < 3 then
42857: LD_VAR 0 9
42861: PPUSH
42862: CALL_OW 313
42866: PUSH
42867: LD_INT 3
42869: LESS
42870: IFFALSE 42906
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42872: LD_INT 0
42874: PPUSH
42875: LD_INT 5
42877: PUSH
42878: LD_INT 8
42880: PUSH
42881: LD_INT 9
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: LIST
42888: PUSH
42889: LD_VAR 0 17
42893: ARRAY
42894: PPUSH
42895: LD_VAR 0 4
42899: PPUSH
42900: CALL_OW 380
42904: GO 42923
// PrepareHuman ( false , i , skill ) ;
42906: LD_INT 0
42908: PPUSH
42909: LD_VAR 0 8
42913: PPUSH
42914: LD_VAR 0 4
42918: PPUSH
42919: CALL_OW 380
// end else
42923: GO 42942
// PrepareHuman ( false , i , skill ) ;
42925: LD_INT 0
42927: PPUSH
42928: LD_VAR 0 8
42932: PPUSH
42933: LD_VAR 0 4
42937: PPUSH
42938: CALL_OW 380
// un := CreateHuman ;
42942: LD_ADDR_VAR 0 14
42946: PUSH
42947: CALL_OW 44
42951: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42952: LD_ADDR_VAR 0 7
42956: PUSH
42957: LD_VAR 0 7
42961: PPUSH
42962: LD_INT 1
42964: PPUSH
42965: LD_VAR 0 14
42969: PPUSH
42970: CALL_OW 2
42974: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42975: LD_VAR 0 14
42979: PPUSH
42980: LD_VAR 0 9
42984: PPUSH
42985: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42989: LD_VAR 0 9
42993: PPUSH
42994: CALL_OW 313
42998: PUSH
42999: LD_INT 6
43001: EQUAL
43002: IFTRUE 43026
43004: PUSH
43005: LD_VAR 0 9
43009: PPUSH
43010: CALL_OW 266
43014: PUSH
43015: LD_INT 32
43017: PUSH
43018: LD_INT 31
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: IN
43025: OR
43026: IFFALSE 42838
43028: GO 42835
43030: POP
43031: POP
// end else
43032: GO 43418
// for j = 1 to x do
43034: LD_ADDR_VAR 0 9
43038: PUSH
43039: DOUBLE
43040: LD_INT 1
43042: DEC
43043: ST_TO_ADDR
43044: LD_VAR 0 13
43048: PUSH
43049: FOR_TO
43050: IFFALSE 43416
// begin InitHc ;
43052: CALL_OW 19
// if not f then
43056: LD_VAR 0 12
43060: NOT
43061: IFFALSE 43150
// begin PrepareHuman ( false , i , skill ) ;
43063: LD_INT 0
43065: PPUSH
43066: LD_VAR 0 8
43070: PPUSH
43071: LD_VAR 0 4
43075: PPUSH
43076: CALL_OW 380
// un := CreateHuman ;
43080: LD_ADDR_VAR 0 14
43084: PUSH
43085: CALL_OW 44
43089: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43090: LD_ADDR_VAR 0 7
43094: PUSH
43095: LD_VAR 0 7
43099: PPUSH
43100: LD_INT 1
43102: PPUSH
43103: LD_VAR 0 14
43107: PPUSH
43108: CALL_OW 2
43112: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43113: LD_VAR 0 14
43117: PPUSH
43118: LD_VAR 0 1
43122: PPUSH
43123: CALL_OW 250
43127: PPUSH
43128: LD_VAR 0 1
43132: PPUSH
43133: CALL_OW 251
43137: PPUSH
43138: LD_INT 10
43140: PPUSH
43141: LD_INT 0
43143: PPUSH
43144: CALL_OW 50
// continue ;
43148: GO 43049
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43150: LD_VAR 0 12
43154: PUSH
43155: LD_INT 1
43157: ARRAY
43158: PPUSH
43159: CALL_OW 313
43163: IFFALSE 43191
43165: PUSH
43166: LD_VAR 0 12
43170: PUSH
43171: LD_INT 1
43173: ARRAY
43174: PPUSH
43175: CALL_OW 266
43179: PUSH
43180: LD_INT 32
43182: PUSH
43183: LD_INT 31
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: IN
43190: AND
43191: IFTRUE 43212
43193: PUSH
43194: LD_VAR 0 12
43198: PUSH
43199: LD_INT 1
43201: ARRAY
43202: PPUSH
43203: CALL_OW 313
43207: PUSH
43208: LD_INT 6
43210: EQUAL
43211: OR
43212: IFFALSE 43232
// f := Delete ( f , 1 ) ;
43214: LD_ADDR_VAR 0 12
43218: PUSH
43219: LD_VAR 0 12
43223: PPUSH
43224: LD_INT 1
43226: PPUSH
43227: CALL_OW 3
43231: ST_TO_ADDR
// if not f then
43232: LD_VAR 0 12
43236: NOT
43237: IFFALSE 43255
// begin x := x + 2 ;
43239: LD_ADDR_VAR 0 13
43243: PUSH
43244: LD_VAR 0 13
43248: PUSH
43249: LD_INT 2
43251: PLUS
43252: ST_TO_ADDR
// continue ;
43253: GO 43049
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43255: LD_VAR 0 12
43259: PUSH
43260: LD_INT 1
43262: ARRAY
43263: PPUSH
43264: CALL_OW 266
43268: PUSH
43269: LD_INT 5
43271: EQUAL
43272: IFFALSE 43346
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43274: LD_VAR 0 12
43278: PUSH
43279: LD_INT 1
43281: ARRAY
43282: PPUSH
43283: CALL_OW 313
43287: PUSH
43288: LD_INT 3
43290: LESS
43291: IFFALSE 43327
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43293: LD_INT 0
43295: PPUSH
43296: LD_INT 5
43298: PUSH
43299: LD_INT 8
43301: PUSH
43302: LD_INT 9
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: LIST
43309: PUSH
43310: LD_VAR 0 17
43314: ARRAY
43315: PPUSH
43316: LD_VAR 0 4
43320: PPUSH
43321: CALL_OW 380
43325: GO 43344
// PrepareHuman ( false , i , skill ) ;
43327: LD_INT 0
43329: PPUSH
43330: LD_VAR 0 8
43334: PPUSH
43335: LD_VAR 0 4
43339: PPUSH
43340: CALL_OW 380
// end else
43344: GO 43363
// PrepareHuman ( false , i , skill ) ;
43346: LD_INT 0
43348: PPUSH
43349: LD_VAR 0 8
43353: PPUSH
43354: LD_VAR 0 4
43358: PPUSH
43359: CALL_OW 380
// un := CreateHuman ;
43363: LD_ADDR_VAR 0 14
43367: PUSH
43368: CALL_OW 44
43372: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43373: LD_ADDR_VAR 0 7
43377: PUSH
43378: LD_VAR 0 7
43382: PPUSH
43383: LD_INT 1
43385: PPUSH
43386: LD_VAR 0 14
43390: PPUSH
43391: CALL_OW 2
43395: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
43396: LD_VAR 0 14
43400: PPUSH
43401: LD_VAR 0 12
43405: PUSH
43406: LD_INT 1
43408: ARRAY
43409: PPUSH
43410: CALL_OW 52
// end ;
43414: GO 43049
43416: POP
43417: POP
// end ;
43418: GO 42349
43420: POP
43421: POP
// result := result ^ buildings ;
43422: LD_ADDR_VAR 0 7
43426: PUSH
43427: LD_VAR 0 7
43431: PUSH
43432: LD_VAR 0 18
43436: ADD
43437: ST_TO_ADDR
// end else
43438: GO 43581
// begin for i = 1 to personel do
43440: LD_ADDR_VAR 0 8
43444: PUSH
43445: DOUBLE
43446: LD_INT 1
43448: DEC
43449: ST_TO_ADDR
43450: LD_VAR 0 6
43454: PUSH
43455: FOR_TO
43456: IFFALSE 43579
// begin if i > 4 then
43458: LD_VAR 0 8
43462: PUSH
43463: LD_INT 4
43465: GREATER
43466: IFFALSE 43470
// break ;
43468: GO 43579
// x := personel [ i ] ;
43470: LD_ADDR_VAR 0 13
43474: PUSH
43475: LD_VAR 0 6
43479: PUSH
43480: LD_VAR 0 8
43484: ARRAY
43485: ST_TO_ADDR
// if x = - 1 then
43486: LD_VAR 0 13
43490: PUSH
43491: LD_INT 1
43493: NEG
43494: EQUAL
43495: IFFALSE 43499
// continue ;
43497: GO 43455
// PrepareHuman ( false , i , skill ) ;
43499: LD_INT 0
43501: PPUSH
43502: LD_VAR 0 8
43506: PPUSH
43507: LD_VAR 0 4
43511: PPUSH
43512: CALL_OW 380
// un := CreateHuman ;
43516: LD_ADDR_VAR 0 14
43520: PUSH
43521: CALL_OW 44
43525: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43526: LD_VAR 0 14
43530: PPUSH
43531: LD_VAR 0 1
43535: PPUSH
43536: CALL_OW 250
43540: PPUSH
43541: LD_VAR 0 1
43545: PPUSH
43546: CALL_OW 251
43550: PPUSH
43551: LD_INT 10
43553: PPUSH
43554: LD_INT 0
43556: PPUSH
43557: CALL_OW 50
// result := result ^ un ;
43561: LD_ADDR_VAR 0 7
43565: PUSH
43566: LD_VAR 0 7
43570: PUSH
43571: LD_VAR 0 14
43575: ADD
43576: ST_TO_ADDR
// end ;
43577: GO 43455
43579: POP
43580: POP
// end ; end ;
43581: LD_VAR 0 7
43585: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43586: LD_INT 0
43588: PPUSH
43589: PPUSH
43590: PPUSH
43591: PPUSH
43592: PPUSH
43593: PPUSH
43594: PPUSH
43595: PPUSH
43596: PPUSH
43597: PPUSH
43598: PPUSH
43599: PPUSH
43600: PPUSH
43601: PPUSH
43602: PPUSH
43603: PPUSH
// result := false ;
43604: LD_ADDR_VAR 0 3
43608: PUSH
43609: LD_INT 0
43611: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43612: LD_VAR 0 1
43616: NOT
43617: IFTRUE 43642
43619: PUSH
43620: LD_VAR 0 1
43624: PPUSH
43625: CALL_OW 266
43629: PUSH
43630: LD_INT 32
43632: PUSH
43633: LD_INT 33
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: IN
43640: NOT
43641: OR
43642: IFFALSE 43646
// exit ;
43644: GO 44781
// nat := GetNation ( tower ) ;
43646: LD_ADDR_VAR 0 12
43650: PUSH
43651: LD_VAR 0 1
43655: PPUSH
43656: CALL_OW 248
43660: ST_TO_ADDR
// side := GetSide ( tower ) ;
43661: LD_ADDR_VAR 0 16
43665: PUSH
43666: LD_VAR 0 1
43670: PPUSH
43671: CALL_OW 255
43675: ST_TO_ADDR
// x := GetX ( tower ) ;
43676: LD_ADDR_VAR 0 10
43680: PUSH
43681: LD_VAR 0 1
43685: PPUSH
43686: CALL_OW 250
43690: ST_TO_ADDR
// y := GetY ( tower ) ;
43691: LD_ADDR_VAR 0 11
43695: PUSH
43696: LD_VAR 0 1
43700: PPUSH
43701: CALL_OW 251
43705: ST_TO_ADDR
// if not x or not y then
43706: LD_VAR 0 10
43710: NOT
43711: IFTRUE 43720
43713: PUSH
43714: LD_VAR 0 11
43718: NOT
43719: OR
43720: IFFALSE 43724
// exit ;
43722: GO 44781
// weapon := 0 ;
43724: LD_ADDR_VAR 0 18
43728: PUSH
43729: LD_INT 0
43731: ST_TO_ADDR
// fac_list := [ ] ;
43732: LD_ADDR_VAR 0 17
43736: PUSH
43737: EMPTY
43738: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
43739: LD_ADDR_VAR 0 6
43743: PUSH
43744: LD_VAR 0 1
43748: PPUSH
43749: CALL_OW 274
43753: PPUSH
43754: LD_VAR 0 2
43758: PPUSH
43759: LD_INT 0
43761: PPUSH
43762: CALL 41316 0 3
43766: PPUSH
43767: LD_INT 30
43769: PUSH
43770: LD_INT 3
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PPUSH
43777: CALL_OW 72
43781: ST_TO_ADDR
// if not factories then
43782: LD_VAR 0 6
43786: NOT
43787: IFFALSE 43791
// exit ;
43789: GO 44781
// for i in factories do
43791: LD_ADDR_VAR 0 8
43795: PUSH
43796: LD_VAR 0 6
43800: PUSH
43801: FOR_IN
43802: IFFALSE 43827
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43804: LD_ADDR_VAR 0 17
43808: PUSH
43809: LD_VAR 0 17
43813: PUSH
43814: LD_VAR 0 8
43818: PPUSH
43819: CALL_OW 478
43823: UNION
43824: ST_TO_ADDR
43825: GO 43801
43827: POP
43828: POP
// if not fac_list then
43829: LD_VAR 0 17
43833: NOT
43834: IFFALSE 43838
// exit ;
43836: GO 44781
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43838: LD_ADDR_VAR 0 5
43842: PUSH
43843: LD_INT 4
43845: PUSH
43846: LD_INT 5
43848: PUSH
43849: LD_INT 9
43851: PUSH
43852: LD_INT 10
43854: PUSH
43855: LD_INT 6
43857: PUSH
43858: LD_INT 7
43860: PUSH
43861: LD_INT 11
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 27
43875: PUSH
43876: LD_INT 28
43878: PUSH
43879: LD_INT 26
43881: PUSH
43882: LD_INT 30
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 43
43893: PUSH
43894: LD_INT 44
43896: PUSH
43897: LD_INT 46
43899: PUSH
43900: LD_INT 45
43902: PUSH
43903: LD_INT 47
43905: PUSH
43906: LD_INT 49
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: LIST
43921: PUSH
43922: LD_VAR 0 12
43926: ARRAY
43927: ST_TO_ADDR
// list := list isect fac_list ;
43928: LD_ADDR_VAR 0 5
43932: PUSH
43933: LD_VAR 0 5
43937: PUSH
43938: LD_VAR 0 17
43942: ISECT
43943: ST_TO_ADDR
// if not list then
43944: LD_VAR 0 5
43948: NOT
43949: IFFALSE 43953
// exit ;
43951: GO 44781
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43953: LD_VAR 0 12
43957: PUSH
43958: LD_INT 3
43960: EQUAL
43961: IFFALSE 43973
43963: PUSH
43964: LD_INT 49
43966: PUSH
43967: LD_VAR 0 5
43971: IN
43972: AND
43973: IFFALSE 43993
43975: PUSH
43976: LD_INT 31
43978: PPUSH
43979: LD_VAR 0 16
43983: PPUSH
43984: CALL_OW 321
43988: PUSH
43989: LD_INT 2
43991: EQUAL
43992: AND
43993: IFFALSE 44053
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43995: LD_INT 22
43997: PUSH
43998: LD_VAR 0 16
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 35
44009: PUSH
44010: LD_INT 49
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 91
44019: PUSH
44020: LD_VAR 0 1
44024: PUSH
44025: LD_INT 10
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: LIST
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: LIST
44037: PPUSH
44038: CALL_OW 69
44042: NOT
44043: IFFALSE 44053
// weapon := ru_time_lapser ;
44045: LD_ADDR_VAR 0 18
44049: PUSH
44050: LD_INT 49
44052: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44053: LD_VAR 0 12
44057: PUSH
44058: LD_INT 1
44060: PUSH
44061: LD_INT 2
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: IN
44068: IFFALSE 44092
44070: PUSH
44071: LD_INT 11
44073: PUSH
44074: LD_VAR 0 5
44078: IN
44079: IFTRUE 44091
44081: PUSH
44082: LD_INT 30
44084: PUSH
44085: LD_VAR 0 5
44089: IN
44090: OR
44091: AND
44092: IFFALSE 44112
44094: PUSH
44095: LD_INT 6
44097: PPUSH
44098: LD_VAR 0 16
44102: PPUSH
44103: CALL_OW 321
44107: PUSH
44108: LD_INT 2
44110: EQUAL
44111: AND
44112: IFFALSE 44279
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44114: LD_INT 22
44116: PUSH
44117: LD_VAR 0 16
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 2
44128: PUSH
44129: LD_INT 35
44131: PUSH
44132: LD_INT 11
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 35
44141: PUSH
44142: LD_INT 30
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 91
44156: PUSH
44157: LD_VAR 0 1
44161: PUSH
44162: LD_INT 18
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: LIST
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: LIST
44174: PPUSH
44175: CALL_OW 69
44179: NOT
44180: IFFALSE 44256
44182: PUSH
44183: LD_INT 22
44185: PUSH
44186: LD_VAR 0 16
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 2
44197: PUSH
44198: LD_INT 30
44200: PUSH
44201: LD_INT 32
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 30
44210: PUSH
44211: LD_INT 33
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 91
44225: PUSH
44226: LD_VAR 0 1
44230: PUSH
44231: LD_INT 12
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: LIST
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: LIST
44243: PUSH
44244: EMPTY
44245: LIST
44246: PPUSH
44247: CALL_OW 69
44251: PUSH
44252: LD_INT 2
44254: GREATER
44255: AND
44256: IFFALSE 44279
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44258: LD_ADDR_VAR 0 18
44262: PUSH
44263: LD_INT 11
44265: PUSH
44266: LD_INT 30
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_VAR 0 12
44277: ARRAY
44278: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44279: LD_VAR 0 18
44283: NOT
44284: IFFALSE 44304
44286: PUSH
44287: LD_INT 40
44289: PPUSH
44290: LD_VAR 0 16
44294: PPUSH
44295: CALL_OW 321
44299: PUSH
44300: LD_INT 2
44302: EQUAL
44303: AND
44304: IFFALSE 44340
44306: PUSH
44307: LD_INT 7
44309: PUSH
44310: LD_VAR 0 5
44314: IN
44315: IFTRUE 44327
44317: PUSH
44318: LD_INT 28
44320: PUSH
44321: LD_VAR 0 5
44325: IN
44326: OR
44327: IFTRUE 44339
44329: PUSH
44330: LD_INT 45
44332: PUSH
44333: LD_VAR 0 5
44337: IN
44338: OR
44339: AND
44340: IFFALSE 44594
// begin hex := GetHexInfo ( x , y ) ;
44342: LD_ADDR_VAR 0 4
44346: PUSH
44347: LD_VAR 0 10
44351: PPUSH
44352: LD_VAR 0 11
44356: PPUSH
44357: CALL_OW 546
44361: ST_TO_ADDR
// if hex [ 1 ] then
44362: LD_VAR 0 4
44366: PUSH
44367: LD_INT 1
44369: ARRAY
44370: IFFALSE 44374
// exit ;
44372: GO 44781
// height := hex [ 2 ] ;
44374: LD_ADDR_VAR 0 15
44378: PUSH
44379: LD_VAR 0 4
44383: PUSH
44384: LD_INT 2
44386: ARRAY
44387: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44388: LD_ADDR_VAR 0 14
44392: PUSH
44393: LD_INT 0
44395: PUSH
44396: LD_INT 2
44398: PUSH
44399: LD_INT 3
44401: PUSH
44402: LD_INT 5
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: ST_TO_ADDR
// for i in tmp do
44411: LD_ADDR_VAR 0 8
44415: PUSH
44416: LD_VAR 0 14
44420: PUSH
44421: FOR_IN
44422: IFFALSE 44592
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44424: LD_ADDR_VAR 0 9
44428: PUSH
44429: LD_VAR 0 10
44433: PPUSH
44434: LD_VAR 0 8
44438: PPUSH
44439: LD_INT 5
44441: PPUSH
44442: CALL_OW 272
44446: PUSH
44447: LD_VAR 0 11
44451: PPUSH
44452: LD_VAR 0 8
44456: PPUSH
44457: LD_INT 5
44459: PPUSH
44460: CALL_OW 273
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44469: LD_VAR 0 9
44473: PUSH
44474: LD_INT 1
44476: ARRAY
44477: PPUSH
44478: LD_VAR 0 9
44482: PUSH
44483: LD_INT 2
44485: ARRAY
44486: PPUSH
44487: CALL_OW 488
44491: IFFALSE 44590
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44493: LD_ADDR_VAR 0 4
44497: PUSH
44498: LD_VAR 0 9
44502: PUSH
44503: LD_INT 1
44505: ARRAY
44506: PPUSH
44507: LD_VAR 0 9
44511: PUSH
44512: LD_INT 2
44514: ARRAY
44515: PPUSH
44516: CALL_OW 546
44520: ST_TO_ADDR
// if hex [ 1 ] then
44521: LD_VAR 0 4
44525: PUSH
44526: LD_INT 1
44528: ARRAY
44529: IFFALSE 44533
// continue ;
44531: GO 44421
// h := hex [ 2 ] ;
44533: LD_ADDR_VAR 0 13
44537: PUSH
44538: LD_VAR 0 4
44542: PUSH
44543: LD_INT 2
44545: ARRAY
44546: ST_TO_ADDR
// if h + 7 < height then
44547: LD_VAR 0 13
44551: PUSH
44552: LD_INT 7
44554: PLUS
44555: PUSH
44556: LD_VAR 0 15
44560: LESS
44561: IFFALSE 44590
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
44563: LD_ADDR_VAR 0 18
44567: PUSH
44568: LD_INT 7
44570: PUSH
44571: LD_INT 28
44573: PUSH
44574: LD_INT 45
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: LIST
44581: PUSH
44582: LD_VAR 0 12
44586: ARRAY
44587: ST_TO_ADDR
// break ;
44588: GO 44592
// end ; end ; end ;
44590: GO 44421
44592: POP
44593: POP
// end ; if not weapon then
44594: LD_VAR 0 18
44598: NOT
44599: IFFALSE 44659
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44601: LD_ADDR_VAR 0 5
44605: PUSH
44606: LD_VAR 0 5
44610: PUSH
44611: LD_INT 11
44613: PUSH
44614: LD_INT 30
44616: PUSH
44617: LD_INT 49
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: LIST
44624: DIFF
44625: ST_TO_ADDR
// if not list then
44626: LD_VAR 0 5
44630: NOT
44631: IFFALSE 44635
// exit ;
44633: GO 44781
// weapon := list [ rand ( 1 , list ) ] ;
44635: LD_ADDR_VAR 0 18
44639: PUSH
44640: LD_VAR 0 5
44644: PUSH
44645: LD_INT 1
44647: PPUSH
44648: LD_VAR 0 5
44652: PPUSH
44653: CALL_OW 12
44657: ARRAY
44658: ST_TO_ADDR
// end ; if weapon then
44659: LD_VAR 0 18
44663: IFFALSE 44781
// begin tmp := CostOfWeapon ( weapon ) ;
44665: LD_ADDR_VAR 0 14
44669: PUSH
44670: LD_VAR 0 18
44674: PPUSH
44675: CALL_OW 451
44679: ST_TO_ADDR
// j := GetBase ( tower ) ;
44680: LD_ADDR_VAR 0 9
44684: PUSH
44685: LD_VAR 0 1
44689: PPUSH
44690: CALL_OW 274
44694: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44695: LD_VAR 0 9
44699: PPUSH
44700: LD_INT 1
44702: PPUSH
44703: CALL_OW 275
44707: PUSH
44708: LD_VAR 0 14
44712: PUSH
44713: LD_INT 1
44715: ARRAY
44716: GREATEREQUAL
44717: IFFALSE 44743
44719: PUSH
44720: LD_VAR 0 9
44724: PPUSH
44725: LD_INT 2
44727: PPUSH
44728: CALL_OW 275
44732: PUSH
44733: LD_VAR 0 14
44737: PUSH
44738: LD_INT 2
44740: ARRAY
44741: GREATEREQUAL
44742: AND
44743: IFFALSE 44769
44745: PUSH
44746: LD_VAR 0 9
44750: PPUSH
44751: LD_INT 3
44753: PPUSH
44754: CALL_OW 275
44758: PUSH
44759: LD_VAR 0 14
44763: PUSH
44764: LD_INT 3
44766: ARRAY
44767: GREATEREQUAL
44768: AND
44769: IFFALSE 44781
// result := weapon ;
44771: LD_ADDR_VAR 0 3
44775: PUSH
44776: LD_VAR 0 18
44780: ST_TO_ADDR
// end ; end ;
44781: LD_VAR 0 3
44785: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44786: LD_INT 0
44788: PPUSH
44789: PPUSH
// result := true ;
44790: LD_ADDR_VAR 0 3
44794: PUSH
44795: LD_INT 1
44797: ST_TO_ADDR
// if array1 = array2 then
44798: LD_VAR 0 1
44802: PUSH
44803: LD_VAR 0 2
44807: EQUAL
44808: IFFALSE 44868
// begin for i = 1 to array1 do
44810: LD_ADDR_VAR 0 4
44814: PUSH
44815: DOUBLE
44816: LD_INT 1
44818: DEC
44819: ST_TO_ADDR
44820: LD_VAR 0 1
44824: PUSH
44825: FOR_TO
44826: IFFALSE 44864
// if array1 [ i ] <> array2 [ i ] then
44828: LD_VAR 0 1
44832: PUSH
44833: LD_VAR 0 4
44837: ARRAY
44838: PUSH
44839: LD_VAR 0 2
44843: PUSH
44844: LD_VAR 0 4
44848: ARRAY
44849: NONEQUAL
44850: IFFALSE 44862
// begin result := false ;
44852: LD_ADDR_VAR 0 3
44856: PUSH
44857: LD_INT 0
44859: ST_TO_ADDR
// break ;
44860: GO 44864
// end ;
44862: GO 44825
44864: POP
44865: POP
// end else
44866: GO 44876
// result := false ;
44868: LD_ADDR_VAR 0 3
44872: PUSH
44873: LD_INT 0
44875: ST_TO_ADDR
// end ;
44876: LD_VAR 0 3
44880: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
44881: LD_INT 0
44883: PPUSH
44884: PPUSH
// if not array1 or not array2 then
44885: LD_VAR 0 1
44889: NOT
44890: IFTRUE 44899
44892: PUSH
44893: LD_VAR 0 2
44897: NOT
44898: OR
44899: IFFALSE 44903
// exit ;
44901: GO 44967
// result := true ;
44903: LD_ADDR_VAR 0 3
44907: PUSH
44908: LD_INT 1
44910: ST_TO_ADDR
// for i = 1 to array1 do
44911: LD_ADDR_VAR 0 4
44915: PUSH
44916: DOUBLE
44917: LD_INT 1
44919: DEC
44920: ST_TO_ADDR
44921: LD_VAR 0 1
44925: PUSH
44926: FOR_TO
44927: IFFALSE 44965
// if array1 [ i ] <> array2 [ i ] then
44929: LD_VAR 0 1
44933: PUSH
44934: LD_VAR 0 4
44938: ARRAY
44939: PUSH
44940: LD_VAR 0 2
44944: PUSH
44945: LD_VAR 0 4
44949: ARRAY
44950: NONEQUAL
44951: IFFALSE 44963
// begin result := false ;
44953: LD_ADDR_VAR 0 3
44957: PUSH
44958: LD_INT 0
44960: ST_TO_ADDR
// break ;
44961: GO 44965
// end ;
44963: GO 44926
44965: POP
44966: POP
// end ;
44967: LD_VAR 0 3
44971: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44972: LD_INT 0
44974: PPUSH
44975: PPUSH
44976: PPUSH
// pom := GetBase ( fac ) ;
44977: LD_ADDR_VAR 0 5
44981: PUSH
44982: LD_VAR 0 1
44986: PPUSH
44987: CALL_OW 274
44991: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44992: LD_ADDR_VAR 0 4
44996: PUSH
44997: LD_VAR 0 2
45001: PUSH
45002: LD_INT 1
45004: ARRAY
45005: PPUSH
45006: LD_VAR 0 2
45010: PUSH
45011: LD_INT 2
45013: ARRAY
45014: PPUSH
45015: LD_VAR 0 2
45019: PUSH
45020: LD_INT 3
45022: ARRAY
45023: PPUSH
45024: LD_VAR 0 2
45028: PUSH
45029: LD_INT 4
45031: ARRAY
45032: PPUSH
45033: CALL_OW 449
45037: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45038: LD_ADDR_VAR 0 3
45042: PUSH
45043: LD_VAR 0 5
45047: PPUSH
45048: LD_INT 1
45050: PPUSH
45051: CALL_OW 275
45055: PUSH
45056: LD_VAR 0 4
45060: PUSH
45061: LD_INT 1
45063: ARRAY
45064: GREATEREQUAL
45065: IFFALSE 45091
45067: PUSH
45068: LD_VAR 0 5
45072: PPUSH
45073: LD_INT 2
45075: PPUSH
45076: CALL_OW 275
45080: PUSH
45081: LD_VAR 0 4
45085: PUSH
45086: LD_INT 2
45088: ARRAY
45089: GREATEREQUAL
45090: AND
45091: IFFALSE 45117
45093: PUSH
45094: LD_VAR 0 5
45098: PPUSH
45099: LD_INT 3
45101: PPUSH
45102: CALL_OW 275
45106: PUSH
45107: LD_VAR 0 4
45111: PUSH
45112: LD_INT 3
45114: ARRAY
45115: GREATEREQUAL
45116: AND
45117: ST_TO_ADDR
// end ;
45118: LD_VAR 0 3
45122: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45123: LD_INT 0
45125: PPUSH
45126: PPUSH
45127: PPUSH
45128: PPUSH
// pom := GetBase ( building ) ;
45129: LD_ADDR_VAR 0 3
45133: PUSH
45134: LD_VAR 0 1
45138: PPUSH
45139: CALL_OW 274
45143: ST_TO_ADDR
// if not pom then
45144: LD_VAR 0 3
45148: NOT
45149: IFFALSE 45153
// exit ;
45151: GO 45327
// btype := GetBType ( building ) ;
45153: LD_ADDR_VAR 0 5
45157: PUSH
45158: LD_VAR 0 1
45162: PPUSH
45163: CALL_OW 266
45167: ST_TO_ADDR
// if btype = b_armoury then
45168: LD_VAR 0 5
45172: PUSH
45173: LD_INT 4
45175: EQUAL
45176: IFFALSE 45186
// btype := b_barracks ;
45178: LD_ADDR_VAR 0 5
45182: PUSH
45183: LD_INT 5
45185: ST_TO_ADDR
// if btype = b_depot then
45186: LD_VAR 0 5
45190: PUSH
45191: LD_INT 0
45193: EQUAL
45194: IFFALSE 45204
// btype := b_warehouse ;
45196: LD_ADDR_VAR 0 5
45200: PUSH
45201: LD_INT 1
45203: ST_TO_ADDR
// if btype = b_workshop then
45204: LD_VAR 0 5
45208: PUSH
45209: LD_INT 2
45211: EQUAL
45212: IFFALSE 45222
// btype := b_factory ;
45214: LD_ADDR_VAR 0 5
45218: PUSH
45219: LD_INT 3
45221: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45222: LD_ADDR_VAR 0 4
45226: PUSH
45227: LD_VAR 0 5
45231: PPUSH
45232: LD_VAR 0 1
45236: PPUSH
45237: CALL_OW 248
45241: PPUSH
45242: CALL_OW 450
45246: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45247: LD_ADDR_VAR 0 2
45251: PUSH
45252: LD_VAR 0 3
45256: PPUSH
45257: LD_INT 1
45259: PPUSH
45260: CALL_OW 275
45264: PUSH
45265: LD_VAR 0 4
45269: PUSH
45270: LD_INT 1
45272: ARRAY
45273: GREATEREQUAL
45274: IFFALSE 45300
45276: PUSH
45277: LD_VAR 0 3
45281: PPUSH
45282: LD_INT 2
45284: PPUSH
45285: CALL_OW 275
45289: PUSH
45290: LD_VAR 0 4
45294: PUSH
45295: LD_INT 2
45297: ARRAY
45298: GREATEREQUAL
45299: AND
45300: IFFALSE 45326
45302: PUSH
45303: LD_VAR 0 3
45307: PPUSH
45308: LD_INT 3
45310: PPUSH
45311: CALL_OW 275
45315: PUSH
45316: LD_VAR 0 4
45320: PUSH
45321: LD_INT 3
45323: ARRAY
45324: GREATEREQUAL
45325: AND
45326: ST_TO_ADDR
// end ;
45327: LD_VAR 0 2
45331: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45332: LD_INT 0
45334: PPUSH
45335: PPUSH
45336: PPUSH
// pom := GetBase ( building ) ;
45337: LD_ADDR_VAR 0 4
45341: PUSH
45342: LD_VAR 0 1
45346: PPUSH
45347: CALL_OW 274
45351: ST_TO_ADDR
// if not pom then
45352: LD_VAR 0 4
45356: NOT
45357: IFFALSE 45361
// exit ;
45359: GO 45466
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45361: LD_ADDR_VAR 0 5
45365: PUSH
45366: LD_VAR 0 2
45370: PPUSH
45371: LD_VAR 0 1
45375: PPUSH
45376: CALL_OW 248
45380: PPUSH
45381: CALL_OW 450
45385: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45386: LD_ADDR_VAR 0 3
45390: PUSH
45391: LD_VAR 0 4
45395: PPUSH
45396: LD_INT 1
45398: PPUSH
45399: CALL_OW 275
45403: PUSH
45404: LD_VAR 0 5
45408: PUSH
45409: LD_INT 1
45411: ARRAY
45412: GREATEREQUAL
45413: IFFALSE 45439
45415: PUSH
45416: LD_VAR 0 4
45420: PPUSH
45421: LD_INT 2
45423: PPUSH
45424: CALL_OW 275
45428: PUSH
45429: LD_VAR 0 5
45433: PUSH
45434: LD_INT 2
45436: ARRAY
45437: GREATEREQUAL
45438: AND
45439: IFFALSE 45465
45441: PUSH
45442: LD_VAR 0 4
45446: PPUSH
45447: LD_INT 3
45449: PPUSH
45450: CALL_OW 275
45454: PUSH
45455: LD_VAR 0 5
45459: PUSH
45460: LD_INT 3
45462: ARRAY
45463: GREATEREQUAL
45464: AND
45465: ST_TO_ADDR
// end ;
45466: LD_VAR 0 3
45470: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
45471: LD_INT 0
45473: PPUSH
45474: PPUSH
45475: PPUSH
45476: PPUSH
45477: PPUSH
45478: PPUSH
45479: PPUSH
45480: PPUSH
45481: PPUSH
45482: PPUSH
45483: PPUSH
// result := false ;
45484: LD_ADDR_VAR 0 8
45488: PUSH
45489: LD_INT 0
45491: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
45492: LD_VAR 0 5
45496: NOT
45497: IFTRUE 45506
45499: PUSH
45500: LD_VAR 0 1
45504: NOT
45505: OR
45506: IFTRUE 45515
45508: PUSH
45509: LD_VAR 0 2
45513: NOT
45514: OR
45515: IFTRUE 45524
45517: PUSH
45518: LD_VAR 0 3
45522: NOT
45523: OR
45524: IFFALSE 45528
// exit ;
45526: GO 46354
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
45528: LD_ADDR_VAR 0 14
45532: PUSH
45533: LD_VAR 0 1
45537: PPUSH
45538: LD_VAR 0 2
45542: PPUSH
45543: LD_VAR 0 3
45547: PPUSH
45548: LD_VAR 0 4
45552: PPUSH
45553: LD_VAR 0 5
45557: PUSH
45558: LD_INT 1
45560: ARRAY
45561: PPUSH
45562: CALL_OW 248
45566: PPUSH
45567: LD_INT 0
45569: PPUSH
45570: CALL 47635 0 6
45574: ST_TO_ADDR
// if not hexes then
45575: LD_VAR 0 14
45579: NOT
45580: IFFALSE 45584
// exit ;
45582: GO 46354
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
45584: LD_ADDR_VAR 0 17
45588: PUSH
45589: LD_VAR 0 5
45593: PPUSH
45594: LD_INT 22
45596: PUSH
45597: LD_VAR 0 13
45601: PPUSH
45602: CALL_OW 255
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 2
45613: PUSH
45614: LD_INT 30
45616: PUSH
45617: LD_INT 0
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 30
45626: PUSH
45627: LD_INT 1
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: LIST
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PPUSH
45643: CALL_OW 72
45647: ST_TO_ADDR
// for i = 1 to hexes do
45648: LD_ADDR_VAR 0 9
45652: PUSH
45653: DOUBLE
45654: LD_INT 1
45656: DEC
45657: ST_TO_ADDR
45658: LD_VAR 0 14
45662: PUSH
45663: FOR_TO
45664: IFFALSE 46352
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45666: LD_ADDR_VAR 0 13
45670: PUSH
45671: LD_VAR 0 14
45675: PUSH
45676: LD_VAR 0 9
45680: ARRAY
45681: PUSH
45682: LD_INT 1
45684: ARRAY
45685: PPUSH
45686: LD_VAR 0 14
45690: PUSH
45691: LD_VAR 0 9
45695: ARRAY
45696: PUSH
45697: LD_INT 2
45699: ARRAY
45700: PPUSH
45701: CALL_OW 428
45705: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45706: LD_VAR 0 14
45710: PUSH
45711: LD_VAR 0 9
45715: ARRAY
45716: PUSH
45717: LD_INT 1
45719: ARRAY
45720: PPUSH
45721: LD_VAR 0 14
45725: PUSH
45726: LD_VAR 0 9
45730: ARRAY
45731: PUSH
45732: LD_INT 2
45734: ARRAY
45735: PPUSH
45736: CALL_OW 351
45740: IFTRUE 45779
45742: PUSH
45743: LD_VAR 0 14
45747: PUSH
45748: LD_VAR 0 9
45752: ARRAY
45753: PUSH
45754: LD_INT 1
45756: ARRAY
45757: PPUSH
45758: LD_VAR 0 14
45762: PUSH
45763: LD_VAR 0 9
45767: ARRAY
45768: PUSH
45769: LD_INT 2
45771: ARRAY
45772: PPUSH
45773: CALL_OW 488
45777: NOT
45778: OR
45779: IFTRUE 45796
45781: PUSH
45782: LD_VAR 0 13
45786: PPUSH
45787: CALL_OW 247
45791: PUSH
45792: LD_INT 3
45794: EQUAL
45795: OR
45796: IFFALSE 45802
// exit ;
45798: POP
45799: POP
45800: GO 46354
// if not tmp then
45802: LD_VAR 0 13
45806: NOT
45807: IFFALSE 45811
// continue ;
45809: GO 45663
// result := true ;
45811: LD_ADDR_VAR 0 8
45815: PUSH
45816: LD_INT 1
45818: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
45819: LD_VAR 0 6
45823: IFFALSE 45840
45825: PUSH
45826: LD_VAR 0 13
45830: PPUSH
45831: CALL_OW 247
45835: PUSH
45836: LD_INT 2
45838: EQUAL
45839: AND
45840: IFFALSE 45857
45842: PUSH
45843: LD_VAR 0 13
45847: PPUSH
45848: CALL_OW 263
45852: PUSH
45853: LD_INT 1
45855: EQUAL
45856: AND
45857: IFFALSE 46021
// begin if IsDrivenBy ( tmp ) then
45859: LD_VAR 0 13
45863: PPUSH
45864: CALL_OW 311
45868: IFFALSE 45872
// continue ;
45870: GO 45663
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
45872: LD_VAR 0 6
45876: PPUSH
45877: LD_INT 3
45879: PUSH
45880: LD_INT 60
45882: PUSH
45883: EMPTY
45884: LIST
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 3
45892: PUSH
45893: LD_INT 55
45895: PUSH
45896: EMPTY
45897: LIST
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PPUSH
45907: CALL_OW 72
45911: IFFALSE 46019
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
45913: LD_ADDR_VAR 0 18
45917: PUSH
45918: LD_VAR 0 6
45922: PPUSH
45923: LD_INT 3
45925: PUSH
45926: LD_INT 60
45928: PUSH
45929: EMPTY
45930: LIST
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 3
45938: PUSH
45939: LD_INT 55
45941: PUSH
45942: EMPTY
45943: LIST
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PPUSH
45953: CALL_OW 72
45957: PUSH
45958: LD_INT 1
45960: ARRAY
45961: ST_TO_ADDR
// if IsInUnit ( driver ) then
45962: LD_VAR 0 18
45966: PPUSH
45967: CALL_OW 310
45971: IFFALSE 45982
// ComExit ( driver ) ;
45973: LD_VAR 0 18
45977: PPUSH
45978: CALL 71625 0 1
// AddComEnterUnit ( driver , tmp ) ;
45982: LD_VAR 0 18
45986: PPUSH
45987: LD_VAR 0 13
45991: PPUSH
45992: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45996: LD_VAR 0 18
46000: PPUSH
46001: LD_VAR 0 7
46005: PPUSH
46006: CALL_OW 173
// AddComExitVehicle ( driver ) ;
46010: LD_VAR 0 18
46014: PPUSH
46015: CALL_OW 181
// end ; continue ;
46019: GO 45663
// end ; if not cleaners or not tmp in cleaners then
46021: LD_VAR 0 6
46025: NOT
46026: IFTRUE 46041
46028: PUSH
46029: LD_VAR 0 13
46033: PUSH
46034: LD_VAR 0 6
46038: IN
46039: NOT
46040: OR
46041: IFFALSE 46350
// begin if dep then
46043: LD_VAR 0 17
46047: IFFALSE 46183
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46049: LD_ADDR_VAR 0 16
46053: PUSH
46054: LD_VAR 0 17
46058: PUSH
46059: LD_INT 1
46061: ARRAY
46062: PPUSH
46063: CALL_OW 250
46067: PPUSH
46068: LD_VAR 0 17
46072: PUSH
46073: LD_INT 1
46075: ARRAY
46076: PPUSH
46077: CALL_OW 254
46081: PPUSH
46082: LD_INT 5
46084: PPUSH
46085: CALL_OW 272
46089: PUSH
46090: LD_VAR 0 17
46094: PUSH
46095: LD_INT 1
46097: ARRAY
46098: PPUSH
46099: CALL_OW 251
46103: PPUSH
46104: LD_VAR 0 17
46108: PUSH
46109: LD_INT 1
46111: ARRAY
46112: PPUSH
46113: CALL_OW 254
46117: PPUSH
46118: LD_INT 5
46120: PPUSH
46121: CALL_OW 273
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46130: LD_VAR 0 16
46134: PUSH
46135: LD_INT 1
46137: ARRAY
46138: PPUSH
46139: LD_VAR 0 16
46143: PUSH
46144: LD_INT 2
46146: ARRAY
46147: PPUSH
46148: CALL_OW 488
46152: IFFALSE 46183
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46154: LD_VAR 0 13
46158: PPUSH
46159: LD_VAR 0 16
46163: PUSH
46164: LD_INT 1
46166: ARRAY
46167: PPUSH
46168: LD_VAR 0 16
46172: PUSH
46173: LD_INT 2
46175: ARRAY
46176: PPUSH
46177: CALL_OW 111
// continue ;
46181: GO 45663
// end ; end ; r := GetDir ( tmp ) ;
46183: LD_ADDR_VAR 0 15
46187: PUSH
46188: LD_VAR 0 13
46192: PPUSH
46193: CALL_OW 254
46197: ST_TO_ADDR
// if r = 5 then
46198: LD_VAR 0 15
46202: PUSH
46203: LD_INT 5
46205: EQUAL
46206: IFFALSE 46216
// r := 0 ;
46208: LD_ADDR_VAR 0 15
46212: PUSH
46213: LD_INT 0
46215: ST_TO_ADDR
// for j = r to 5 do
46216: LD_ADDR_VAR 0 10
46220: PUSH
46221: DOUBLE
46222: LD_VAR 0 15
46226: DEC
46227: ST_TO_ADDR
46228: LD_INT 5
46230: PUSH
46231: FOR_TO
46232: IFFALSE 46348
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
46234: LD_ADDR_VAR 0 11
46238: PUSH
46239: LD_VAR 0 13
46243: PPUSH
46244: CALL_OW 250
46248: PPUSH
46249: LD_VAR 0 10
46253: PPUSH
46254: LD_INT 2
46256: PPUSH
46257: CALL_OW 272
46261: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
46262: LD_ADDR_VAR 0 12
46266: PUSH
46267: LD_VAR 0 13
46271: PPUSH
46272: CALL_OW 251
46276: PPUSH
46277: LD_VAR 0 10
46281: PPUSH
46282: LD_INT 2
46284: PPUSH
46285: CALL_OW 273
46289: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
46290: LD_VAR 0 11
46294: PPUSH
46295: LD_VAR 0 12
46299: PPUSH
46300: CALL_OW 488
46304: IFFALSE 46323
46306: PUSH
46307: LD_VAR 0 11
46311: PPUSH
46312: LD_VAR 0 12
46316: PPUSH
46317: CALL_OW 428
46321: NOT
46322: AND
46323: IFFALSE 46346
// begin ComMoveXY ( tmp , _x , _y ) ;
46325: LD_VAR 0 13
46329: PPUSH
46330: LD_VAR 0 11
46334: PPUSH
46335: LD_VAR 0 12
46339: PPUSH
46340: CALL_OW 111
// break ;
46344: GO 46348
// end ; end ;
46346: GO 46231
46348: POP
46349: POP
// end ; end ;
46350: GO 45663
46352: POP
46353: POP
// end ;
46354: LD_VAR 0 8
46358: RET
// export function BuildingTechInvented ( side , btype ) ; begin
46359: LD_INT 0
46361: PPUSH
// result := true ;
46362: LD_ADDR_VAR 0 3
46366: PUSH
46367: LD_INT 1
46369: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
46370: LD_VAR 0 2
46374: PUSH
46375: LD_INT 24
46377: DOUBLE
46378: EQUAL
46379: IFTRUE 46389
46381: LD_INT 33
46383: DOUBLE
46384: EQUAL
46385: IFTRUE 46389
46387: GO 46414
46389: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
46390: LD_ADDR_VAR 0 3
46394: PUSH
46395: LD_INT 32
46397: PPUSH
46398: LD_VAR 0 1
46402: PPUSH
46403: CALL_OW 321
46407: PUSH
46408: LD_INT 2
46410: EQUAL
46411: ST_TO_ADDR
46412: GO 46730
46414: LD_INT 20
46416: DOUBLE
46417: EQUAL
46418: IFTRUE 46422
46420: GO 46447
46422: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
46423: LD_ADDR_VAR 0 3
46427: PUSH
46428: LD_INT 6
46430: PPUSH
46431: LD_VAR 0 1
46435: PPUSH
46436: CALL_OW 321
46440: PUSH
46441: LD_INT 2
46443: EQUAL
46444: ST_TO_ADDR
46445: GO 46730
46447: LD_INT 22
46449: DOUBLE
46450: EQUAL
46451: IFTRUE 46461
46453: LD_INT 36
46455: DOUBLE
46456: EQUAL
46457: IFTRUE 46461
46459: GO 46486
46461: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
46462: LD_ADDR_VAR 0 3
46466: PUSH
46467: LD_INT 15
46469: PPUSH
46470: LD_VAR 0 1
46474: PPUSH
46475: CALL_OW 321
46479: PUSH
46480: LD_INT 2
46482: EQUAL
46483: ST_TO_ADDR
46484: GO 46730
46486: LD_INT 30
46488: DOUBLE
46489: EQUAL
46490: IFTRUE 46494
46492: GO 46519
46494: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
46495: LD_ADDR_VAR 0 3
46499: PUSH
46500: LD_INT 20
46502: PPUSH
46503: LD_VAR 0 1
46507: PPUSH
46508: CALL_OW 321
46512: PUSH
46513: LD_INT 2
46515: EQUAL
46516: ST_TO_ADDR
46517: GO 46730
46519: LD_INT 28
46521: DOUBLE
46522: EQUAL
46523: IFTRUE 46533
46525: LD_INT 21
46527: DOUBLE
46528: EQUAL
46529: IFTRUE 46533
46531: GO 46558
46533: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
46534: LD_ADDR_VAR 0 3
46538: PUSH
46539: LD_INT 21
46541: PPUSH
46542: LD_VAR 0 1
46546: PPUSH
46547: CALL_OW 321
46551: PUSH
46552: LD_INT 2
46554: EQUAL
46555: ST_TO_ADDR
46556: GO 46730
46558: LD_INT 16
46560: DOUBLE
46561: EQUAL
46562: IFTRUE 46566
46564: GO 46591
46566: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
46567: LD_ADDR_VAR 0 3
46571: PUSH
46572: LD_INT 84
46574: PPUSH
46575: LD_VAR 0 1
46579: PPUSH
46580: CALL_OW 321
46584: PUSH
46585: LD_INT 2
46587: EQUAL
46588: ST_TO_ADDR
46589: GO 46730
46591: LD_INT 19
46593: DOUBLE
46594: EQUAL
46595: IFTRUE 46605
46597: LD_INT 23
46599: DOUBLE
46600: EQUAL
46601: IFTRUE 46605
46603: GO 46630
46605: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
46606: LD_ADDR_VAR 0 3
46610: PUSH
46611: LD_INT 83
46613: PPUSH
46614: LD_VAR 0 1
46618: PPUSH
46619: CALL_OW 321
46623: PUSH
46624: LD_INT 2
46626: EQUAL
46627: ST_TO_ADDR
46628: GO 46730
46630: LD_INT 17
46632: DOUBLE
46633: EQUAL
46634: IFTRUE 46638
46636: GO 46663
46638: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
46639: LD_ADDR_VAR 0 3
46643: PUSH
46644: LD_INT 39
46646: PPUSH
46647: LD_VAR 0 1
46651: PPUSH
46652: CALL_OW 321
46656: PUSH
46657: LD_INT 2
46659: EQUAL
46660: ST_TO_ADDR
46661: GO 46730
46663: LD_INT 18
46665: DOUBLE
46666: EQUAL
46667: IFTRUE 46671
46669: GO 46696
46671: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
46672: LD_ADDR_VAR 0 3
46676: PUSH
46677: LD_INT 40
46679: PPUSH
46680: LD_VAR 0 1
46684: PPUSH
46685: CALL_OW 321
46689: PUSH
46690: LD_INT 2
46692: EQUAL
46693: ST_TO_ADDR
46694: GO 46730
46696: LD_INT 27
46698: DOUBLE
46699: EQUAL
46700: IFTRUE 46704
46702: GO 46729
46704: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
46705: LD_ADDR_VAR 0 3
46709: PUSH
46710: LD_INT 35
46712: PPUSH
46713: LD_VAR 0 1
46717: PPUSH
46718: CALL_OW 321
46722: PUSH
46723: LD_INT 2
46725: EQUAL
46726: ST_TO_ADDR
46727: GO 46730
46729: POP
// end ;
46730: LD_VAR 0 3
46734: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
46735: LD_INT 0
46737: PPUSH
46738: PPUSH
46739: PPUSH
46740: PPUSH
46741: PPUSH
46742: PPUSH
46743: PPUSH
46744: PPUSH
46745: PPUSH
46746: PPUSH
46747: PPUSH
// result := false ;
46748: LD_ADDR_VAR 0 6
46752: PUSH
46753: LD_INT 0
46755: ST_TO_ADDR
// if btype = b_depot then
46756: LD_VAR 0 2
46760: PUSH
46761: LD_INT 0
46763: EQUAL
46764: IFFALSE 46776
// begin result := true ;
46766: LD_ADDR_VAR 0 6
46770: PUSH
46771: LD_INT 1
46773: ST_TO_ADDR
// exit ;
46774: GO 47630
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46776: LD_VAR 0 1
46780: NOT
46781: IFTRUE 46806
46783: PUSH
46784: LD_VAR 0 1
46788: PPUSH
46789: CALL_OW 266
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: LD_INT 1
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: IN
46804: NOT
46805: OR
46806: IFTRUE 46815
46808: PUSH
46809: LD_VAR 0 2
46813: NOT
46814: OR
46815: IFTRUE 46851
46817: PUSH
46818: LD_VAR 0 5
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: LD_INT 1
46828: PUSH
46829: LD_INT 2
46831: PUSH
46832: LD_INT 3
46834: PUSH
46835: LD_INT 4
46837: PUSH
46838: LD_INT 5
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: IN
46849: NOT
46850: OR
46851: IFTRUE 46870
46853: PUSH
46854: LD_VAR 0 3
46858: PPUSH
46859: LD_VAR 0 4
46863: PPUSH
46864: CALL_OW 488
46868: NOT
46869: OR
46870: IFFALSE 46874
// exit ;
46872: GO 47630
// side := GetSide ( depot ) ;
46874: LD_ADDR_VAR 0 9
46878: PUSH
46879: LD_VAR 0 1
46883: PPUSH
46884: CALL_OW 255
46888: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
46889: LD_VAR 0 9
46893: PPUSH
46894: LD_VAR 0 2
46898: PPUSH
46899: CALL 46359 0 2
46903: NOT
46904: IFFALSE 46908
// exit ;
46906: GO 47630
// pom := GetBase ( depot ) ;
46908: LD_ADDR_VAR 0 10
46912: PUSH
46913: LD_VAR 0 1
46917: PPUSH
46918: CALL_OW 274
46922: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46923: LD_ADDR_VAR 0 11
46927: PUSH
46928: LD_VAR 0 2
46932: PPUSH
46933: LD_VAR 0 1
46937: PPUSH
46938: CALL_OW 248
46942: PPUSH
46943: CALL_OW 450
46947: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46948: LD_VAR 0 10
46952: PPUSH
46953: LD_INT 1
46955: PPUSH
46956: CALL_OW 275
46960: PUSH
46961: LD_VAR 0 11
46965: PUSH
46966: LD_INT 1
46968: ARRAY
46969: GREATEREQUAL
46970: IFFALSE 46996
46972: PUSH
46973: LD_VAR 0 10
46977: PPUSH
46978: LD_INT 2
46980: PPUSH
46981: CALL_OW 275
46985: PUSH
46986: LD_VAR 0 11
46990: PUSH
46991: LD_INT 2
46993: ARRAY
46994: GREATEREQUAL
46995: AND
46996: IFFALSE 47022
46998: PUSH
46999: LD_VAR 0 10
47003: PPUSH
47004: LD_INT 3
47006: PPUSH
47007: CALL_OW 275
47011: PUSH
47012: LD_VAR 0 11
47016: PUSH
47017: LD_INT 3
47019: ARRAY
47020: GREATEREQUAL
47021: AND
47022: NOT
47023: IFFALSE 47027
// exit ;
47025: GO 47630
// if GetBType ( depot ) = b_depot then
47027: LD_VAR 0 1
47031: PPUSH
47032: CALL_OW 266
47036: PUSH
47037: LD_INT 0
47039: EQUAL
47040: IFFALSE 47052
// dist := 28 else
47042: LD_ADDR_VAR 0 14
47046: PUSH
47047: LD_INT 28
47049: ST_TO_ADDR
47050: GO 47060
// dist := 36 ;
47052: LD_ADDR_VAR 0 14
47056: PUSH
47057: LD_INT 36
47059: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47060: LD_VAR 0 1
47064: PPUSH
47065: LD_VAR 0 3
47069: PPUSH
47070: LD_VAR 0 4
47074: PPUSH
47075: CALL_OW 297
47079: PUSH
47080: LD_VAR 0 14
47084: GREATER
47085: IFFALSE 47089
// exit ;
47087: GO 47630
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47089: LD_ADDR_VAR 0 12
47093: PUSH
47094: LD_VAR 0 2
47098: PPUSH
47099: LD_VAR 0 3
47103: PPUSH
47104: LD_VAR 0 4
47108: PPUSH
47109: LD_VAR 0 5
47113: PPUSH
47114: LD_VAR 0 1
47118: PPUSH
47119: CALL_OW 248
47123: PPUSH
47124: LD_INT 0
47126: PPUSH
47127: CALL 47635 0 6
47131: ST_TO_ADDR
// if not hexes then
47132: LD_VAR 0 12
47136: NOT
47137: IFFALSE 47141
// exit ;
47139: GO 47630
// hex := GetHexInfo ( x , y ) ;
47141: LD_ADDR_VAR 0 15
47145: PUSH
47146: LD_VAR 0 3
47150: PPUSH
47151: LD_VAR 0 4
47155: PPUSH
47156: CALL_OW 546
47160: ST_TO_ADDR
// if hex [ 1 ] then
47161: LD_VAR 0 15
47165: PUSH
47166: LD_INT 1
47168: ARRAY
47169: IFFALSE 47173
// exit ;
47171: GO 47630
// height := hex [ 2 ] ;
47173: LD_ADDR_VAR 0 13
47177: PUSH
47178: LD_VAR 0 15
47182: PUSH
47183: LD_INT 2
47185: ARRAY
47186: ST_TO_ADDR
// for i = 1 to hexes do
47187: LD_ADDR_VAR 0 7
47191: PUSH
47192: DOUBLE
47193: LD_INT 1
47195: DEC
47196: ST_TO_ADDR
47197: LD_VAR 0 12
47201: PUSH
47202: FOR_TO
47203: IFFALSE 47547
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47205: LD_VAR 0 12
47209: PUSH
47210: LD_VAR 0 7
47214: ARRAY
47215: PUSH
47216: LD_INT 1
47218: ARRAY
47219: PPUSH
47220: LD_VAR 0 12
47224: PUSH
47225: LD_VAR 0 7
47229: ARRAY
47230: PUSH
47231: LD_INT 2
47233: ARRAY
47234: PPUSH
47235: CALL_OW 488
47239: NOT
47240: IFTRUE 47282
47242: PUSH
47243: LD_VAR 0 12
47247: PUSH
47248: LD_VAR 0 7
47252: ARRAY
47253: PUSH
47254: LD_INT 1
47256: ARRAY
47257: PPUSH
47258: LD_VAR 0 12
47262: PUSH
47263: LD_VAR 0 7
47267: ARRAY
47268: PUSH
47269: LD_INT 2
47271: ARRAY
47272: PPUSH
47273: CALL_OW 428
47277: PUSH
47278: LD_INT 0
47280: GREATER
47281: OR
47282: IFTRUE 47320
47284: PUSH
47285: LD_VAR 0 12
47289: PUSH
47290: LD_VAR 0 7
47294: ARRAY
47295: PUSH
47296: LD_INT 1
47298: ARRAY
47299: PPUSH
47300: LD_VAR 0 12
47304: PUSH
47305: LD_VAR 0 7
47309: ARRAY
47310: PUSH
47311: LD_INT 2
47313: ARRAY
47314: PPUSH
47315: CALL_OW 351
47319: OR
47320: IFFALSE 47326
// exit ;
47322: POP
47323: POP
47324: GO 47630
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47326: LD_ADDR_VAR 0 8
47330: PUSH
47331: LD_VAR 0 12
47335: PUSH
47336: LD_VAR 0 7
47340: ARRAY
47341: PUSH
47342: LD_INT 1
47344: ARRAY
47345: PPUSH
47346: LD_VAR 0 12
47350: PUSH
47351: LD_VAR 0 7
47355: ARRAY
47356: PUSH
47357: LD_INT 2
47359: ARRAY
47360: PPUSH
47361: CALL_OW 546
47365: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47366: LD_VAR 0 8
47370: PUSH
47371: LD_INT 1
47373: ARRAY
47374: IFTRUE 47396
47376: PUSH
47377: LD_VAR 0 8
47381: PUSH
47382: LD_INT 2
47384: ARRAY
47385: PUSH
47386: LD_VAR 0 13
47390: PUSH
47391: LD_INT 2
47393: PLUS
47394: GREATER
47395: OR
47396: IFTRUE 47418
47398: PUSH
47399: LD_VAR 0 8
47403: PUSH
47404: LD_INT 2
47406: ARRAY
47407: PUSH
47408: LD_VAR 0 13
47412: PUSH
47413: LD_INT 2
47415: MINUS
47416: LESS
47417: OR
47418: IFTRUE 47486
47420: PUSH
47421: LD_VAR 0 8
47425: PUSH
47426: LD_INT 3
47428: ARRAY
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: LD_INT 8
47435: PUSH
47436: LD_INT 9
47438: PUSH
47439: LD_INT 10
47441: PUSH
47442: LD_INT 11
47444: PUSH
47445: LD_INT 12
47447: PUSH
47448: LD_INT 13
47450: PUSH
47451: LD_INT 16
47453: PUSH
47454: LD_INT 17
47456: PUSH
47457: LD_INT 18
47459: PUSH
47460: LD_INT 19
47462: PUSH
47463: LD_INT 20
47465: PUSH
47466: LD_INT 21
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: IN
47484: NOT
47485: OR
47486: IFTRUE 47499
47488: PUSH
47489: LD_VAR 0 8
47493: PUSH
47494: LD_INT 5
47496: ARRAY
47497: NOT
47498: OR
47499: IFTRUE 47539
47501: PUSH
47502: LD_VAR 0 8
47506: PUSH
47507: LD_INT 6
47509: ARRAY
47510: PUSH
47511: LD_INT 1
47513: PUSH
47514: LD_INT 2
47516: PUSH
47517: LD_INT 7
47519: PUSH
47520: LD_INT 9
47522: PUSH
47523: LD_INT 10
47525: PUSH
47526: LD_INT 11
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: IN
47537: NOT
47538: OR
47539: IFFALSE 47545
// exit ;
47541: POP
47542: POP
47543: GO 47630
// end ;
47545: GO 47202
47547: POP
47548: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
47549: LD_VAR 0 9
47553: PPUSH
47554: LD_VAR 0 3
47558: PPUSH
47559: LD_VAR 0 4
47563: PPUSH
47564: LD_INT 20
47566: PPUSH
47567: CALL 39449 0 4
47571: PUSH
47572: LD_INT 4
47574: ARRAY
47575: IFFALSE 47579
// exit ;
47577: GO 47630
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
47579: LD_VAR 0 2
47583: PUSH
47584: LD_INT 29
47586: PUSH
47587: LD_INT 30
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: IN
47594: IFFALSE 47618
47596: PUSH
47597: LD_VAR 0 3
47601: PPUSH
47602: LD_VAR 0 4
47606: PPUSH
47607: LD_VAR 0 9
47611: PPUSH
47612: CALL_OW 440
47616: NOT
47617: AND
47618: IFFALSE 47622
// exit ;
47620: GO 47630
// result := true ;
47622: LD_ADDR_VAR 0 6
47626: PUSH
47627: LD_INT 1
47629: ST_TO_ADDR
// end ;
47630: LD_VAR 0 6
47634: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
47635: LD_INT 0
47637: PPUSH
47638: PPUSH
47639: PPUSH
47640: PPUSH
47641: PPUSH
47642: PPUSH
47643: PPUSH
47644: PPUSH
47645: PPUSH
47646: PPUSH
47647: PPUSH
47648: PPUSH
47649: PPUSH
47650: PPUSH
47651: PPUSH
47652: PPUSH
47653: PPUSH
47654: PPUSH
47655: PPUSH
47656: PPUSH
47657: PPUSH
47658: PPUSH
47659: PPUSH
47660: PPUSH
47661: PPUSH
47662: PPUSH
47663: PPUSH
47664: PPUSH
47665: PPUSH
47666: PPUSH
47667: PPUSH
47668: PPUSH
47669: PPUSH
47670: PPUSH
47671: PPUSH
47672: PPUSH
47673: PPUSH
47674: PPUSH
47675: PPUSH
47676: PPUSH
47677: PPUSH
47678: PPUSH
47679: PPUSH
47680: PPUSH
47681: PPUSH
47682: PPUSH
47683: PPUSH
47684: PPUSH
47685: PPUSH
47686: PPUSH
47687: PPUSH
47688: PPUSH
47689: PPUSH
47690: PPUSH
47691: PPUSH
47692: PPUSH
47693: PPUSH
47694: PPUSH
// result = [ ] ;
47695: LD_ADDR_VAR 0 7
47699: PUSH
47700: EMPTY
47701: ST_TO_ADDR
// temp_list = [ ] ;
47702: LD_ADDR_VAR 0 9
47706: PUSH
47707: EMPTY
47708: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
47709: LD_VAR 0 4
47713: PUSH
47714: LD_INT 0
47716: PUSH
47717: LD_INT 1
47719: PUSH
47720: LD_INT 2
47722: PUSH
47723: LD_INT 3
47725: PUSH
47726: LD_INT 4
47728: PUSH
47729: LD_INT 5
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: IN
47740: NOT
47741: IFTRUE 47784
47743: PUSH
47744: LD_VAR 0 1
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: LD_INT 1
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: IN
47759: IFFALSE 47783
47761: PUSH
47762: LD_VAR 0 5
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: LD_INT 2
47772: PUSH
47773: LD_INT 3
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: LIST
47780: IN
47781: NOT
47782: AND
47783: OR
47784: IFFALSE 47788
// exit ;
47786: GO 66187
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
47788: LD_VAR 0 1
47792: PUSH
47793: LD_INT 6
47795: PUSH
47796: LD_INT 7
47798: PUSH
47799: LD_INT 8
47801: PUSH
47802: LD_INT 13
47804: PUSH
47805: LD_INT 12
47807: PUSH
47808: LD_INT 15
47810: PUSH
47811: LD_INT 11
47813: PUSH
47814: LD_INT 14
47816: PUSH
47817: LD_INT 10
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: IN
47831: IFFALSE 47841
// btype = b_lab ;
47833: LD_ADDR_VAR 0 1
47837: PUSH
47838: LD_INT 6
47840: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47841: LD_VAR 0 6
47845: PUSH
47846: LD_INT 0
47848: PUSH
47849: LD_INT 1
47851: PUSH
47852: LD_INT 2
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: LIST
47859: IN
47860: NOT
47861: IFTRUE 47929
47863: PUSH
47864: LD_VAR 0 1
47868: PUSH
47869: LD_INT 0
47871: PUSH
47872: LD_INT 1
47874: PUSH
47875: LD_INT 2
47877: PUSH
47878: LD_INT 3
47880: PUSH
47881: LD_INT 6
47883: PUSH
47884: LD_INT 36
47886: PUSH
47887: LD_INT 4
47889: PUSH
47890: LD_INT 5
47892: PUSH
47893: LD_INT 31
47895: PUSH
47896: LD_INT 32
47898: PUSH
47899: LD_INT 33
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: IN
47915: NOT
47916: IFFALSE 47928
47918: PUSH
47919: LD_VAR 0 6
47923: PUSH
47924: LD_INT 1
47926: EQUAL
47927: AND
47928: OR
47929: IFTRUE 47961
47931: PUSH
47932: LD_VAR 0 1
47936: PUSH
47937: LD_INT 2
47939: PUSH
47940: LD_INT 3
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: IN
47947: NOT
47948: IFFALSE 47960
47950: PUSH
47951: LD_VAR 0 6
47955: PUSH
47956: LD_INT 2
47958: EQUAL
47959: AND
47960: OR
47961: IFFALSE 47971
// mode = 0 ;
47963: LD_ADDR_VAR 0 6
47967: PUSH
47968: LD_INT 0
47970: ST_TO_ADDR
// case mode of 0 :
47971: LD_VAR 0 6
47975: PUSH
47976: LD_INT 0
47978: DOUBLE
47979: EQUAL
47980: IFTRUE 47984
47982: GO 59437
47984: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47985: LD_ADDR_VAR 0 11
47989: PUSH
47990: LD_INT 0
47992: PUSH
47993: LD_INT 0
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 0
48002: PUSH
48003: LD_INT 1
48005: NEG
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 1
48013: PUSH
48014: LD_INT 0
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 1
48023: PUSH
48024: LD_INT 1
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 0
48033: PUSH
48034: LD_INT 1
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 1
48043: NEG
48044: PUSH
48045: LD_INT 0
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 1
48054: NEG
48055: PUSH
48056: LD_INT 1
48058: NEG
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 1
48066: NEG
48067: PUSH
48068: LD_INT 2
48070: NEG
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 0
48078: PUSH
48079: LD_INT 2
48081: NEG
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 1
48089: PUSH
48090: LD_INT 1
48092: NEG
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 1
48100: PUSH
48101: LD_INT 2
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: LD_INT 2
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 1
48120: NEG
48121: PUSH
48122: LD_INT 1
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 1
48131: PUSH
48132: LD_INT 3
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: LD_INT 3
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: LD_INT 2
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48178: LD_ADDR_VAR 0 12
48182: PUSH
48183: LD_INT 0
48185: PUSH
48186: LD_INT 0
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 0
48195: PUSH
48196: LD_INT 1
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 1
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 1
48216: PUSH
48217: LD_INT 1
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 0
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 1
48236: NEG
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 1
48247: NEG
48248: PUSH
48249: LD_INT 1
48251: NEG
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 1
48259: PUSH
48260: LD_INT 1
48262: NEG
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 2
48270: PUSH
48271: LD_INT 0
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 2
48280: PUSH
48281: LD_INT 1
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: NEG
48291: PUSH
48292: LD_INT 1
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 2
48301: NEG
48302: PUSH
48303: LD_INT 0
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 2
48312: NEG
48313: PUSH
48314: LD_INT 1
48316: NEG
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 2
48324: NEG
48325: PUSH
48326: LD_INT 1
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 3
48335: NEG
48336: PUSH
48337: LD_INT 0
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 3
48346: NEG
48347: PUSH
48348: LD_INT 1
48350: NEG
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48374: LD_ADDR_VAR 0 13
48378: PUSH
48379: LD_INT 0
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: LD_INT 1
48394: NEG
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 1
48402: PUSH
48403: LD_INT 0
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 1
48412: PUSH
48413: LD_INT 1
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 0
48422: PUSH
48423: LD_INT 1
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 1
48432: NEG
48433: PUSH
48434: LD_INT 0
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 1
48443: NEG
48444: PUSH
48445: LD_INT 1
48447: NEG
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 1
48455: NEG
48456: PUSH
48457: LD_INT 2
48459: NEG
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 2
48467: PUSH
48468: LD_INT 1
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 2
48477: PUSH
48478: LD_INT 2
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: LD_INT 2
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 2
48497: NEG
48498: PUSH
48499: LD_INT 1
48501: NEG
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 2
48509: NEG
48510: PUSH
48511: LD_INT 2
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 2
48521: NEG
48522: PUSH
48523: LD_INT 3
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 3
48533: NEG
48534: PUSH
48535: LD_INT 2
48537: NEG
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 3
48545: NEG
48546: PUSH
48547: LD_INT 3
48549: NEG
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48573: LD_ADDR_VAR 0 14
48577: PUSH
48578: LD_INT 0
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: LD_INT 1
48593: NEG
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 1
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: PUSH
48612: LD_INT 1
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: LD_INT 1
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 1
48642: NEG
48643: PUSH
48644: LD_INT 1
48646: NEG
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 1
48654: NEG
48655: PUSH
48656: LD_INT 2
48658: NEG
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: LD_INT 2
48669: NEG
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 1
48677: PUSH
48678: LD_INT 1
48680: NEG
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 1
48688: PUSH
48689: LD_INT 2
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 0
48698: PUSH
48699: LD_INT 2
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 1
48708: NEG
48709: PUSH
48710: LD_INT 1
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 1
48719: NEG
48720: PUSH
48721: LD_INT 3
48723: NEG
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 0
48731: PUSH
48732: LD_INT 3
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 1
48742: PUSH
48743: LD_INT 2
48745: NEG
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48769: LD_ADDR_VAR 0 15
48773: PUSH
48774: LD_INT 0
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 0
48786: PUSH
48787: LD_INT 1
48789: NEG
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 1
48797: PUSH
48798: LD_INT 0
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 1
48807: PUSH
48808: LD_INT 1
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 0
48817: PUSH
48818: LD_INT 1
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 1
48827: NEG
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 1
48838: NEG
48839: PUSH
48840: LD_INT 1
48842: NEG
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 1
48850: PUSH
48851: LD_INT 1
48853: NEG
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 2
48861: PUSH
48862: LD_INT 0
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 2
48871: PUSH
48872: LD_INT 1
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 1
48881: NEG
48882: PUSH
48883: LD_INT 1
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 2
48892: NEG
48893: PUSH
48894: LD_INT 0
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 2
48903: NEG
48904: PUSH
48905: LD_INT 1
48907: NEG
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 2
48915: PUSH
48916: LD_INT 1
48918: NEG
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 3
48926: PUSH
48927: LD_INT 0
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 3
48936: PUSH
48937: LD_INT 1
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48962: LD_ADDR_VAR 0 16
48966: PUSH
48967: LD_INT 0
48969: PUSH
48970: LD_INT 0
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 0
48979: PUSH
48980: LD_INT 1
48982: NEG
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 1
48990: PUSH
48991: LD_INT 0
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 1
49000: PUSH
49001: LD_INT 1
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 0
49010: PUSH
49011: LD_INT 1
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 1
49020: NEG
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 1
49031: NEG
49032: PUSH
49033: LD_INT 1
49035: NEG
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 1
49043: NEG
49044: PUSH
49045: LD_INT 2
49047: NEG
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 2
49055: PUSH
49056: LD_INT 1
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 2
49065: PUSH
49066: LD_INT 2
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 1
49075: PUSH
49076: LD_INT 2
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 2
49085: NEG
49086: PUSH
49087: LD_INT 1
49089: NEG
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 2
49097: NEG
49098: PUSH
49099: LD_INT 2
49101: NEG
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 3
49109: PUSH
49110: LD_INT 2
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 3
49119: PUSH
49120: LD_INT 3
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 2
49129: PUSH
49130: LD_INT 3
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49155: LD_ADDR_VAR 0 17
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: LD_INT 0
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 0
49172: PUSH
49173: LD_INT 1
49175: NEG
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 1
49183: PUSH
49184: LD_INT 0
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 1
49193: PUSH
49194: LD_INT 1
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 0
49203: PUSH
49204: LD_INT 1
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 1
49213: NEG
49214: PUSH
49215: LD_INT 0
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 1
49224: NEG
49225: PUSH
49226: LD_INT 1
49228: NEG
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 1
49236: NEG
49237: PUSH
49238: LD_INT 2
49240: NEG
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 0
49248: PUSH
49249: LD_INT 2
49251: NEG
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 1
49259: PUSH
49260: LD_INT 1
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 2
49270: PUSH
49271: LD_INT 0
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 2
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 2
49290: PUSH
49291: LD_INT 2
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 1
49300: PUSH
49301: LD_INT 2
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: LD_INT 2
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 1
49320: NEG
49321: PUSH
49322: LD_INT 1
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 2
49331: NEG
49332: PUSH
49333: LD_INT 0
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 2
49342: NEG
49343: PUSH
49344: LD_INT 1
49346: NEG
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 2
49354: NEG
49355: PUSH
49356: LD_INT 2
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49385: LD_ADDR_VAR 0 18
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: LD_INT 0
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 0
49402: PUSH
49403: LD_INT 1
49405: NEG
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 1
49413: PUSH
49414: LD_INT 0
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 1
49423: PUSH
49424: LD_INT 1
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: LD_INT 1
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 1
49443: NEG
49444: PUSH
49445: LD_INT 0
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 1
49454: NEG
49455: PUSH
49456: LD_INT 1
49458: NEG
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 1
49466: NEG
49467: PUSH
49468: LD_INT 2
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 0
49478: PUSH
49479: LD_INT 2
49481: NEG
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 1
49489: PUSH
49490: LD_INT 1
49492: NEG
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 2
49500: PUSH
49501: LD_INT 0
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 2
49510: PUSH
49511: LD_INT 1
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 2
49520: PUSH
49521: LD_INT 2
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 1
49530: PUSH
49531: LD_INT 2
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 0
49540: PUSH
49541: LD_INT 2
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 1
49550: NEG
49551: PUSH
49552: LD_INT 1
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 2
49561: NEG
49562: PUSH
49563: LD_INT 0
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 2
49572: NEG
49573: PUSH
49574: LD_INT 1
49576: NEG
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 2
49584: NEG
49585: PUSH
49586: LD_INT 2
49588: NEG
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49615: LD_ADDR_VAR 0 19
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 0
49632: PUSH
49633: LD_INT 1
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: LD_INT 0
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: LD_INT 1
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 0
49663: PUSH
49664: LD_INT 1
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 1
49673: NEG
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: LD_INT 1
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 1
49696: NEG
49697: PUSH
49698: LD_INT 2
49700: NEG
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 0
49708: PUSH
49709: LD_INT 2
49711: NEG
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 1
49719: PUSH
49720: LD_INT 1
49722: NEG
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 2
49730: PUSH
49731: LD_INT 0
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 2
49740: PUSH
49741: LD_INT 1
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 2
49750: PUSH
49751: LD_INT 2
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 1
49760: PUSH
49761: LD_INT 2
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 0
49770: PUSH
49771: LD_INT 2
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 1
49780: NEG
49781: PUSH
49782: LD_INT 1
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 2
49791: NEG
49792: PUSH
49793: LD_INT 0
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 2
49802: NEG
49803: PUSH
49804: LD_INT 1
49806: NEG
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 2
49814: NEG
49815: PUSH
49816: LD_INT 2
49818: NEG
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49845: LD_ADDR_VAR 0 20
49849: PUSH
49850: LD_INT 0
49852: PUSH
49853: LD_INT 0
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 0
49862: PUSH
49863: LD_INT 1
49865: NEG
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 1
49873: PUSH
49874: LD_INT 0
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 1
49883: PUSH
49884: LD_INT 1
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 0
49893: PUSH
49894: LD_INT 1
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 1
49903: NEG
49904: PUSH
49905: LD_INT 0
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 1
49914: NEG
49915: PUSH
49916: LD_INT 1
49918: NEG
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 1
49926: NEG
49927: PUSH
49928: LD_INT 2
49930: NEG
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 0
49938: PUSH
49939: LD_INT 2
49941: NEG
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 1
49949: PUSH
49950: LD_INT 1
49952: NEG
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 2
49960: PUSH
49961: LD_INT 0
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 2
49970: PUSH
49971: LD_INT 1
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 2
49980: PUSH
49981: LD_INT 2
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 1
49990: PUSH
49991: LD_INT 2
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: LD_INT 2
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 1
50010: NEG
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 2
50021: NEG
50022: PUSH
50023: LD_INT 0
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 2
50032: NEG
50033: PUSH
50034: LD_INT 1
50036: NEG
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 2
50044: NEG
50045: PUSH
50046: LD_INT 2
50048: NEG
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50075: LD_ADDR_VAR 0 21
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: LD_INT 0
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 0
50092: PUSH
50093: LD_INT 1
50095: NEG
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 1
50103: PUSH
50104: LD_INT 0
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 1
50113: PUSH
50114: LD_INT 1
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 0
50123: PUSH
50124: LD_INT 1
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 1
50133: NEG
50134: PUSH
50135: LD_INT 0
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 1
50144: NEG
50145: PUSH
50146: LD_INT 1
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 1
50156: NEG
50157: PUSH
50158: LD_INT 2
50160: NEG
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: LD_INT 2
50171: NEG
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 1
50179: PUSH
50180: LD_INT 1
50182: NEG
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 2
50190: PUSH
50191: LD_INT 0
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 2
50200: PUSH
50201: LD_INT 1
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 2
50210: PUSH
50211: LD_INT 2
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 1
50220: PUSH
50221: LD_INT 2
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 0
50230: PUSH
50231: LD_INT 2
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 1
50240: NEG
50241: PUSH
50242: LD_INT 1
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 2
50251: NEG
50252: PUSH
50253: LD_INT 0
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 2
50262: NEG
50263: PUSH
50264: LD_INT 1
50266: NEG
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 2
50274: NEG
50275: PUSH
50276: LD_INT 2
50278: NEG
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50305: LD_ADDR_VAR 0 22
50309: PUSH
50310: LD_INT 0
50312: PUSH
50313: LD_INT 0
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 0
50322: PUSH
50323: LD_INT 1
50325: NEG
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 1
50333: PUSH
50334: LD_INT 0
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 1
50343: PUSH
50344: LD_INT 1
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 0
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 1
50363: NEG
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 1
50374: NEG
50375: PUSH
50376: LD_INT 1
50378: NEG
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 1
50386: NEG
50387: PUSH
50388: LD_INT 2
50390: NEG
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: LD_INT 2
50401: NEG
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: PUSH
50410: LD_INT 1
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 2
50420: PUSH
50421: LD_INT 0
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 2
50430: PUSH
50431: LD_INT 1
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 2
50440: PUSH
50441: LD_INT 2
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 1
50450: PUSH
50451: LD_INT 2
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 0
50460: PUSH
50461: LD_INT 2
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 1
50470: NEG
50471: PUSH
50472: LD_INT 1
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 2
50481: NEG
50482: PUSH
50483: LD_INT 0
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 2
50492: NEG
50493: PUSH
50494: LD_INT 1
50496: NEG
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 2
50504: NEG
50505: PUSH
50506: LD_INT 2
50508: NEG
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50535: LD_ADDR_VAR 0 23
50539: PUSH
50540: LD_INT 0
50542: PUSH
50543: LD_INT 0
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: LD_INT 1
50555: NEG
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 1
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 1
50573: PUSH
50574: LD_INT 1
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 0
50583: PUSH
50584: LD_INT 1
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 1
50593: NEG
50594: PUSH
50595: LD_INT 0
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 1
50604: NEG
50605: PUSH
50606: LD_INT 1
50608: NEG
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 1
50616: NEG
50617: PUSH
50618: LD_INT 2
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 0
50628: PUSH
50629: LD_INT 2
50631: NEG
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 1
50639: PUSH
50640: LD_INT 1
50642: NEG
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 2
50650: PUSH
50651: LD_INT 0
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 2
50660: PUSH
50661: LD_INT 1
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 2
50670: PUSH
50671: LD_INT 2
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 1
50680: PUSH
50681: LD_INT 2
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 0
50690: PUSH
50691: LD_INT 2
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 1
50700: NEG
50701: PUSH
50702: LD_INT 1
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 2
50711: NEG
50712: PUSH
50713: LD_INT 0
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 2
50722: NEG
50723: PUSH
50724: LD_INT 1
50726: NEG
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 2
50734: NEG
50735: PUSH
50736: LD_INT 2
50738: NEG
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 2
50746: NEG
50747: PUSH
50748: LD_INT 3
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 1
50758: NEG
50759: PUSH
50760: LD_INT 3
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 1
50770: PUSH
50771: LD_INT 2
50773: NEG
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 2
50781: PUSH
50782: LD_INT 1
50784: NEG
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
50815: LD_ADDR_VAR 0 24
50819: PUSH
50820: LD_INT 0
50822: PUSH
50823: LD_INT 0
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 0
50832: PUSH
50833: LD_INT 1
50835: NEG
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 1
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 1
50853: PUSH
50854: LD_INT 1
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 0
50863: PUSH
50864: LD_INT 1
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 1
50873: NEG
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 1
50884: NEG
50885: PUSH
50886: LD_INT 1
50888: NEG
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 1
50896: NEG
50897: PUSH
50898: LD_INT 2
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 0
50908: PUSH
50909: LD_INT 2
50911: NEG
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 1
50919: PUSH
50920: LD_INT 1
50922: NEG
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 2
50930: PUSH
50931: LD_INT 0
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 2
50940: PUSH
50941: LD_INT 1
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 2
50950: PUSH
50951: LD_INT 2
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 1
50960: PUSH
50961: LD_INT 2
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: LD_INT 2
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 1
50980: NEG
50981: PUSH
50982: LD_INT 1
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 2
50991: NEG
50992: PUSH
50993: LD_INT 0
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 2
51002: NEG
51003: PUSH
51004: LD_INT 1
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 2
51014: NEG
51015: PUSH
51016: LD_INT 2
51018: NEG
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 1
51026: PUSH
51027: LD_INT 2
51029: NEG
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 2
51037: PUSH
51038: LD_INT 1
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 3
51048: PUSH
51049: LD_INT 1
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 3
51058: PUSH
51059: LD_INT 2
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51091: LD_ADDR_VAR 0 25
51095: PUSH
51096: LD_INT 0
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: LD_INT 1
51111: NEG
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 1
51119: PUSH
51120: LD_INT 0
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 1
51129: PUSH
51130: LD_INT 1
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 0
51139: PUSH
51140: LD_INT 1
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 1
51149: NEG
51150: PUSH
51151: LD_INT 0
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 1
51160: NEG
51161: PUSH
51162: LD_INT 1
51164: NEG
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 1
51172: NEG
51173: PUSH
51174: LD_INT 2
51176: NEG
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: LD_INT 2
51187: NEG
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 2
51206: PUSH
51207: LD_INT 0
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 2
51216: PUSH
51217: LD_INT 1
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 2
51226: PUSH
51227: LD_INT 2
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 1
51236: PUSH
51237: LD_INT 2
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 0
51246: PUSH
51247: LD_INT 2
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 1
51256: NEG
51257: PUSH
51258: LD_INT 1
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 2
51267: NEG
51268: PUSH
51269: LD_INT 0
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 2
51278: NEG
51279: PUSH
51280: LD_INT 1
51282: NEG
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 2
51290: NEG
51291: PUSH
51292: LD_INT 2
51294: NEG
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 3
51302: PUSH
51303: LD_INT 1
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 3
51312: PUSH
51313: LD_INT 2
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 2
51322: PUSH
51323: LD_INT 3
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 1
51332: PUSH
51333: LD_INT 3
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51365: LD_ADDR_VAR 0 26
51369: PUSH
51370: LD_INT 0
51372: PUSH
51373: LD_INT 0
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: LD_INT 1
51385: NEG
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 1
51393: PUSH
51394: LD_INT 0
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 1
51403: PUSH
51404: LD_INT 1
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: LD_INT 1
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 1
51423: NEG
51424: PUSH
51425: LD_INT 0
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 1
51434: NEG
51435: PUSH
51436: LD_INT 1
51438: NEG
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 1
51446: NEG
51447: PUSH
51448: LD_INT 2
51450: NEG
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 0
51458: PUSH
51459: LD_INT 2
51461: NEG
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 1
51469: PUSH
51470: LD_INT 1
51472: NEG
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 2
51480: PUSH
51481: LD_INT 0
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 2
51490: PUSH
51491: LD_INT 1
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 2
51500: PUSH
51501: LD_INT 2
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 1
51510: PUSH
51511: LD_INT 2
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 0
51520: PUSH
51521: LD_INT 2
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 1
51530: NEG
51531: PUSH
51532: LD_INT 1
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 2
51541: NEG
51542: PUSH
51543: LD_INT 0
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 2
51552: NEG
51553: PUSH
51554: LD_INT 1
51556: NEG
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 2
51564: NEG
51565: PUSH
51566: LD_INT 2
51568: NEG
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 2
51576: PUSH
51577: LD_INT 3
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 1
51586: PUSH
51587: LD_INT 3
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 1
51596: NEG
51597: PUSH
51598: LD_INT 2
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 2
51607: NEG
51608: PUSH
51609: LD_INT 1
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51641: LD_ADDR_VAR 0 27
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: LD_INT 0
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: LD_INT 1
51661: NEG
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 1
51669: PUSH
51670: LD_INT 0
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 1
51679: PUSH
51680: LD_INT 1
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 1
51699: NEG
51700: PUSH
51701: LD_INT 0
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 1
51710: NEG
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: LD_INT 2
51726: NEG
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 0
51734: PUSH
51735: LD_INT 2
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: LD_INT 1
51748: NEG
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 2
51756: PUSH
51757: LD_INT 0
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 2
51766: PUSH
51767: LD_INT 1
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 2
51776: PUSH
51777: LD_INT 2
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 1
51786: PUSH
51787: LD_INT 2
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 0
51796: PUSH
51797: LD_INT 2
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 1
51806: NEG
51807: PUSH
51808: LD_INT 1
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 2
51817: NEG
51818: PUSH
51819: LD_INT 0
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 2
51828: NEG
51829: PUSH
51830: LD_INT 1
51832: NEG
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 2
51840: NEG
51841: PUSH
51842: LD_INT 2
51844: NEG
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 1
51852: NEG
51853: PUSH
51854: LD_INT 2
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 2
51863: NEG
51864: PUSH
51865: LD_INT 1
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 3
51874: NEG
51875: PUSH
51876: LD_INT 1
51878: NEG
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 3
51886: NEG
51887: PUSH
51888: LD_INT 2
51890: NEG
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51921: LD_ADDR_VAR 0 28
51925: PUSH
51926: LD_INT 0
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 1
51949: PUSH
51950: LD_INT 0
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 1
51959: PUSH
51960: LD_INT 1
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 0
51969: PUSH
51970: LD_INT 1
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 1
51979: NEG
51980: PUSH
51981: LD_INT 0
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 1
51990: NEG
51991: PUSH
51992: LD_INT 1
51994: NEG
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 1
52002: NEG
52003: PUSH
52004: LD_INT 2
52006: NEG
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 0
52014: PUSH
52015: LD_INT 2
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 1
52025: PUSH
52026: LD_INT 1
52028: NEG
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 2
52036: PUSH
52037: LD_INT 0
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 2
52046: PUSH
52047: LD_INT 1
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 2
52056: PUSH
52057: LD_INT 2
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 1
52066: PUSH
52067: LD_INT 2
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 0
52076: PUSH
52077: LD_INT 2
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 1
52086: NEG
52087: PUSH
52088: LD_INT 1
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 2
52097: NEG
52098: PUSH
52099: LD_INT 0
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 2
52108: NEG
52109: PUSH
52110: LD_INT 1
52112: NEG
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 2
52120: NEG
52121: PUSH
52122: LD_INT 2
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 2
52132: NEG
52133: PUSH
52134: LD_INT 3
52136: NEG
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 1
52144: NEG
52145: PUSH
52146: LD_INT 3
52148: NEG
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 3
52156: NEG
52157: PUSH
52158: LD_INT 1
52160: NEG
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 3
52168: NEG
52169: PUSH
52170: LD_INT 2
52172: NEG
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52203: LD_ADDR_VAR 0 29
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: LD_INT 0
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 0
52220: PUSH
52221: LD_INT 1
52223: NEG
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 1
52231: PUSH
52232: LD_INT 0
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 1
52241: PUSH
52242: LD_INT 1
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 0
52251: PUSH
52252: LD_INT 1
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 1
52261: NEG
52262: PUSH
52263: LD_INT 0
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 1
52272: NEG
52273: PUSH
52274: LD_INT 1
52276: NEG
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 1
52284: NEG
52285: PUSH
52286: LD_INT 2
52288: NEG
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 0
52296: PUSH
52297: LD_INT 2
52299: NEG
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: LD_INT 1
52310: NEG
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 2
52318: PUSH
52319: LD_INT 0
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 2
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 1
52338: PUSH
52339: LD_INT 2
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 0
52348: PUSH
52349: LD_INT 2
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 1
52358: NEG
52359: PUSH
52360: LD_INT 1
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 2
52369: NEG
52370: PUSH
52371: LD_INT 1
52373: NEG
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 2
52381: NEG
52382: PUSH
52383: LD_INT 2
52385: NEG
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 2
52393: NEG
52394: PUSH
52395: LD_INT 3
52397: NEG
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 2
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 3
52416: PUSH
52417: LD_INT 1
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 1
52426: PUSH
52427: LD_INT 3
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 1
52436: NEG
52437: PUSH
52438: LD_INT 2
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 3
52447: NEG
52448: PUSH
52449: LD_INT 2
52451: NEG
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52482: LD_ADDR_VAR 0 30
52486: PUSH
52487: LD_INT 0
52489: PUSH
52490: LD_INT 0
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 0
52499: PUSH
52500: LD_INT 1
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 1
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 1
52520: PUSH
52521: LD_INT 1
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 0
52530: PUSH
52531: LD_INT 1
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 1
52540: NEG
52541: PUSH
52542: LD_INT 0
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 1
52551: NEG
52552: PUSH
52553: LD_INT 1
52555: NEG
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 1
52563: NEG
52564: PUSH
52565: LD_INT 2
52567: NEG
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: LD_INT 2
52578: NEG
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 1
52586: PUSH
52587: LD_INT 1
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 2
52597: PUSH
52598: LD_INT 0
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 2
52607: PUSH
52608: LD_INT 1
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 2
52617: PUSH
52618: LD_INT 2
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 1
52627: PUSH
52628: LD_INT 2
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 1
52637: NEG
52638: PUSH
52639: LD_INT 1
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 2
52648: NEG
52649: PUSH
52650: LD_INT 0
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 2
52659: NEG
52660: PUSH
52661: LD_INT 1
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 1
52671: NEG
52672: PUSH
52673: LD_INT 3
52675: NEG
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 1
52683: PUSH
52684: LD_INT 2
52686: NEG
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 3
52694: PUSH
52695: LD_INT 2
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 2
52704: PUSH
52705: LD_INT 3
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 2
52714: NEG
52715: PUSH
52716: LD_INT 1
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 3
52725: NEG
52726: PUSH
52727: LD_INT 1
52729: NEG
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52760: LD_ADDR_VAR 0 31
52764: PUSH
52765: LD_INT 0
52767: PUSH
52768: LD_INT 0
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 0
52777: PUSH
52778: LD_INT 1
52780: NEG
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: LD_INT 0
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 1
52798: PUSH
52799: LD_INT 1
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 0
52808: PUSH
52809: LD_INT 1
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 1
52818: NEG
52819: PUSH
52820: LD_INT 0
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 1
52829: NEG
52830: PUSH
52831: LD_INT 1
52833: NEG
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 1
52841: NEG
52842: PUSH
52843: LD_INT 2
52845: NEG
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 1
52853: PUSH
52854: LD_INT 1
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 2
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 2
52874: PUSH
52875: LD_INT 1
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 2
52884: PUSH
52885: LD_INT 2
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 1
52894: PUSH
52895: LD_INT 2
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 0
52904: PUSH
52905: LD_INT 2
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 1
52914: NEG
52915: PUSH
52916: LD_INT 1
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 2
52925: NEG
52926: PUSH
52927: LD_INT 1
52929: NEG
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 2
52937: NEG
52938: PUSH
52939: LD_INT 2
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 2
52949: NEG
52950: PUSH
52951: LD_INT 3
52953: NEG
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 2
52961: PUSH
52962: LD_INT 1
52964: NEG
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 3
52972: PUSH
52973: LD_INT 1
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 1
52982: PUSH
52983: LD_INT 3
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 1
52992: NEG
52993: PUSH
52994: LD_INT 2
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 3
53003: NEG
53004: PUSH
53005: LD_INT 2
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53038: LD_ADDR_VAR 0 32
53042: PUSH
53043: LD_INT 0
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 0
53055: PUSH
53056: LD_INT 1
53058: NEG
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 1
53066: PUSH
53067: LD_INT 0
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 1
53076: PUSH
53077: LD_INT 1
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 0
53086: PUSH
53087: LD_INT 1
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 1
53096: NEG
53097: PUSH
53098: LD_INT 0
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 1
53107: NEG
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 1
53119: NEG
53120: PUSH
53121: LD_INT 2
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 0
53131: PUSH
53132: LD_INT 2
53134: NEG
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 1
53142: PUSH
53143: LD_INT 1
53145: NEG
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 2
53153: PUSH
53154: LD_INT 1
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 2
53163: PUSH
53164: LD_INT 2
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 1
53173: PUSH
53174: LD_INT 2
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 0
53183: PUSH
53184: LD_INT 2
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 1
53193: NEG
53194: PUSH
53195: LD_INT 1
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 2
53204: NEG
53205: PUSH
53206: LD_INT 0
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 2
53215: NEG
53216: PUSH
53217: LD_INT 1
53219: NEG
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 1
53227: NEG
53228: PUSH
53229: LD_INT 3
53231: NEG
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 1
53239: PUSH
53240: LD_INT 2
53242: NEG
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 3
53250: PUSH
53251: LD_INT 2
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 2
53260: PUSH
53261: LD_INT 3
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 2
53270: NEG
53271: PUSH
53272: LD_INT 1
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 3
53281: NEG
53282: PUSH
53283: LD_INT 1
53285: NEG
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53316: LD_ADDR_VAR 0 33
53320: PUSH
53321: LD_INT 0
53323: PUSH
53324: LD_INT 0
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 0
53333: PUSH
53334: LD_INT 1
53336: NEG
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 1
53344: PUSH
53345: LD_INT 0
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 1
53354: PUSH
53355: LD_INT 1
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 0
53364: PUSH
53365: LD_INT 1
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 1
53374: NEG
53375: PUSH
53376: LD_INT 0
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 1
53385: NEG
53386: PUSH
53387: LD_INT 1
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 1
53397: NEG
53398: PUSH
53399: LD_INT 2
53401: NEG
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 1
53409: PUSH
53410: LD_INT 1
53412: NEG
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 2
53420: PUSH
53421: LD_INT 0
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 2
53430: PUSH
53431: LD_INT 1
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 1
53440: PUSH
53441: LD_INT 2
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 0
53450: PUSH
53451: LD_INT 2
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 1
53460: NEG
53461: PUSH
53462: LD_INT 1
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 2
53471: NEG
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 2
53482: NEG
53483: PUSH
53484: LD_INT 1
53486: NEG
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 2
53494: NEG
53495: PUSH
53496: LD_INT 2
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 2
53506: NEG
53507: PUSH
53508: LD_INT 3
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 2
53518: PUSH
53519: LD_INT 1
53521: NEG
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 3
53529: PUSH
53530: LD_INT 1
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 1
53539: PUSH
53540: LD_INT 3
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 1
53549: NEG
53550: PUSH
53551: LD_INT 2
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 3
53560: NEG
53561: PUSH
53562: LD_INT 2
53564: NEG
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53595: LD_ADDR_VAR 0 34
53599: PUSH
53600: LD_INT 0
53602: PUSH
53603: LD_INT 0
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 0
53612: PUSH
53613: LD_INT 1
53615: NEG
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 1
53623: PUSH
53624: LD_INT 0
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 1
53633: PUSH
53634: LD_INT 1
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 0
53643: PUSH
53644: LD_INT 1
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 1
53653: NEG
53654: PUSH
53655: LD_INT 0
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 1
53664: NEG
53665: PUSH
53666: LD_INT 1
53668: NEG
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 1
53676: NEG
53677: PUSH
53678: LD_INT 2
53680: NEG
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 0
53688: PUSH
53689: LD_INT 2
53691: NEG
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 1
53699: PUSH
53700: LD_INT 1
53702: NEG
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 2
53710: PUSH
53711: LD_INT 1
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 2
53720: PUSH
53721: LD_INT 2
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: PUSH
53731: LD_INT 2
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 1
53740: NEG
53741: PUSH
53742: LD_INT 1
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 2
53751: NEG
53752: PUSH
53753: LD_INT 0
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 2
53762: NEG
53763: PUSH
53764: LD_INT 1
53766: NEG
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 2
53774: NEG
53775: PUSH
53776: LD_INT 2
53778: NEG
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 1
53786: NEG
53787: PUSH
53788: LD_INT 3
53790: NEG
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 1
53798: PUSH
53799: LD_INT 2
53801: NEG
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 3
53809: PUSH
53810: LD_INT 2
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 2
53819: PUSH
53820: LD_INT 3
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 2
53829: NEG
53830: PUSH
53831: LD_INT 1
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 3
53840: NEG
53841: PUSH
53842: LD_INT 1
53844: NEG
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53875: LD_ADDR_VAR 0 35
53879: PUSH
53880: LD_INT 0
53882: PUSH
53883: LD_INT 0
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 0
53892: PUSH
53893: LD_INT 1
53895: NEG
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 1
53903: PUSH
53904: LD_INT 0
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 1
53913: PUSH
53914: LD_INT 1
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: LD_INT 1
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 1
53933: NEG
53934: PUSH
53935: LD_INT 0
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 1
53944: NEG
53945: PUSH
53946: LD_INT 1
53948: NEG
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 2
53956: PUSH
53957: LD_INT 1
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 2
53966: NEG
53967: PUSH
53968: LD_INT 1
53970: NEG
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53987: LD_ADDR_VAR 0 36
53991: PUSH
53992: LD_INT 0
53994: PUSH
53995: LD_INT 0
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 0
54004: PUSH
54005: LD_INT 1
54007: NEG
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 1
54025: PUSH
54026: LD_INT 1
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 0
54035: PUSH
54036: LD_INT 1
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 1
54045: NEG
54046: PUSH
54047: LD_INT 0
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 1
54056: NEG
54057: PUSH
54058: LD_INT 1
54060: NEG
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 1
54068: NEG
54069: PUSH
54070: LD_INT 2
54072: NEG
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 1
54080: PUSH
54081: LD_INT 2
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54099: LD_ADDR_VAR 0 37
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: LD_INT 0
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: LD_INT 1
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 1
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 1
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 0
54147: PUSH
54148: LD_INT 1
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 1
54157: NEG
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 1
54168: NEG
54169: PUSH
54170: LD_INT 1
54172: NEG
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 1
54180: PUSH
54181: LD_INT 1
54183: NEG
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 1
54191: NEG
54192: PUSH
54193: LD_INT 1
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54211: LD_ADDR_VAR 0 38
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: LD_INT 0
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 0
54228: PUSH
54229: LD_INT 1
54231: NEG
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 1
54239: PUSH
54240: LD_INT 0
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 1
54249: PUSH
54250: LD_INT 1
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 0
54259: PUSH
54260: LD_INT 1
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 1
54269: NEG
54270: PUSH
54271: LD_INT 0
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 1
54280: NEG
54281: PUSH
54282: LD_INT 1
54284: NEG
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 2
54292: PUSH
54293: LD_INT 1
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 2
54302: NEG
54303: PUSH
54304: LD_INT 1
54306: NEG
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54323: LD_ADDR_VAR 0 39
54327: PUSH
54328: LD_INT 0
54330: PUSH
54331: LD_INT 0
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 0
54340: PUSH
54341: LD_INT 1
54343: NEG
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 1
54351: PUSH
54352: LD_INT 0
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 1
54361: PUSH
54362: LD_INT 1
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 0
54371: PUSH
54372: LD_INT 1
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 1
54381: NEG
54382: PUSH
54383: LD_INT 0
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 1
54392: NEG
54393: PUSH
54394: LD_INT 1
54396: NEG
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 1
54404: NEG
54405: PUSH
54406: LD_INT 2
54408: NEG
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 1
54416: PUSH
54417: LD_INT 2
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54435: LD_ADDR_VAR 0 40
54439: PUSH
54440: LD_INT 0
54442: PUSH
54443: LD_INT 0
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 0
54452: PUSH
54453: LD_INT 1
54455: NEG
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 1
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 1
54473: PUSH
54474: LD_INT 1
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 0
54483: PUSH
54484: LD_INT 1
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 1
54493: NEG
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 1
54504: NEG
54505: PUSH
54506: LD_INT 1
54508: NEG
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 1
54516: PUSH
54517: LD_INT 1
54519: NEG
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 1
54527: NEG
54528: PUSH
54529: LD_INT 1
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54547: LD_ADDR_VAR 0 41
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: LD_INT 0
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 0
54564: PUSH
54565: LD_INT 1
54567: NEG
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 1
54575: PUSH
54576: LD_INT 0
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 1
54585: PUSH
54586: LD_INT 1
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 0
54595: PUSH
54596: LD_INT 1
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 1
54605: NEG
54606: PUSH
54607: LD_INT 0
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 1
54616: NEG
54617: PUSH
54618: LD_INT 1
54620: NEG
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 1
54628: NEG
54629: PUSH
54630: LD_INT 2
54632: NEG
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 1
54640: PUSH
54641: LD_INT 1
54643: NEG
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 2
54651: PUSH
54652: LD_INT 0
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 2
54661: PUSH
54662: LD_INT 1
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 2
54671: PUSH
54672: LD_INT 2
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 1
54681: PUSH
54682: LD_INT 2
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 1
54691: NEG
54692: PUSH
54693: LD_INT 1
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 2
54702: NEG
54703: PUSH
54704: LD_INT 0
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 2
54713: NEG
54714: PUSH
54715: LD_INT 1
54717: NEG
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 2
54725: NEG
54726: PUSH
54727: LD_INT 2
54729: NEG
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 2
54737: NEG
54738: PUSH
54739: LD_INT 3
54741: NEG
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 2
54749: PUSH
54750: LD_INT 1
54752: NEG
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 3
54760: PUSH
54761: LD_INT 0
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 3
54770: PUSH
54771: LD_INT 1
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 3
54780: PUSH
54781: LD_INT 2
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 3
54790: PUSH
54791: LD_INT 3
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 2
54800: PUSH
54801: LD_INT 3
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 2
54810: NEG
54811: PUSH
54812: LD_INT 1
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 3
54821: NEG
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 3
54832: NEG
54833: PUSH
54834: LD_INT 1
54836: NEG
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 3
54844: NEG
54845: PUSH
54846: LD_INT 2
54848: NEG
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 3
54856: NEG
54857: PUSH
54858: LD_INT 3
54860: NEG
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54897: LD_ADDR_VAR 0 42
54901: PUSH
54902: LD_INT 0
54904: PUSH
54905: LD_INT 0
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: LD_INT 1
54917: NEG
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 1
54925: PUSH
54926: LD_INT 0
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 1
54935: PUSH
54936: LD_INT 1
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 0
54945: PUSH
54946: LD_INT 1
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 1
54955: NEG
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 1
54966: NEG
54967: PUSH
54968: LD_INT 1
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 1
54978: NEG
54979: PUSH
54980: LD_INT 2
54982: NEG
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: LD_INT 2
54993: NEG
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: LD_INT 1
55004: NEG
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 2
55012: PUSH
55013: LD_INT 1
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 2
55022: PUSH
55023: LD_INT 2
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 1
55032: PUSH
55033: LD_INT 2
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: LD_INT 2
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 1
55052: NEG
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 2
55063: NEG
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 2
55075: NEG
55076: PUSH
55077: LD_INT 2
55079: NEG
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 2
55087: NEG
55088: PUSH
55089: LD_INT 3
55091: NEG
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 1
55099: NEG
55100: PUSH
55101: LD_INT 3
55103: NEG
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 0
55111: PUSH
55112: LD_INT 3
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 1
55122: PUSH
55123: LD_INT 2
55125: NEG
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 3
55133: PUSH
55134: LD_INT 2
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 3
55143: PUSH
55144: LD_INT 3
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 2
55153: PUSH
55154: LD_INT 3
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 1
55163: PUSH
55164: LD_INT 3
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 0
55173: PUSH
55174: LD_INT 3
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 1
55183: NEG
55184: PUSH
55185: LD_INT 2
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 3
55194: NEG
55195: PUSH
55196: LD_INT 2
55198: NEG
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 3
55206: NEG
55207: PUSH
55208: LD_INT 3
55210: NEG
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55247: LD_ADDR_VAR 0 43
55251: PUSH
55252: LD_INT 0
55254: PUSH
55255: LD_INT 0
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 0
55264: PUSH
55265: LD_INT 1
55267: NEG
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 1
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 1
55285: PUSH
55286: LD_INT 1
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 0
55295: PUSH
55296: LD_INT 1
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 1
55305: NEG
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 1
55316: NEG
55317: PUSH
55318: LD_INT 1
55320: NEG
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 1
55328: NEG
55329: PUSH
55330: LD_INT 2
55332: NEG
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 0
55340: PUSH
55341: LD_INT 2
55343: NEG
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 1
55351: PUSH
55352: LD_INT 1
55354: NEG
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 2
55362: PUSH
55363: LD_INT 0
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 2
55372: PUSH
55373: LD_INT 1
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 1
55382: PUSH
55383: LD_INT 2
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: LD_INT 2
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 1
55402: NEG
55403: PUSH
55404: LD_INT 1
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 2
55413: NEG
55414: PUSH
55415: LD_INT 0
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 2
55424: NEG
55425: PUSH
55426: LD_INT 1
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 1
55436: NEG
55437: PUSH
55438: LD_INT 3
55440: NEG
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: LD_INT 3
55451: NEG
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 1
55459: PUSH
55460: LD_INT 2
55462: NEG
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 2
55470: PUSH
55471: LD_INT 1
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 3
55481: PUSH
55482: LD_INT 0
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 3
55491: PUSH
55492: LD_INT 1
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 1
55501: PUSH
55502: LD_INT 3
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 0
55511: PUSH
55512: LD_INT 3
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 1
55521: NEG
55522: PUSH
55523: LD_INT 2
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 2
55532: NEG
55533: PUSH
55534: LD_INT 1
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 3
55543: NEG
55544: PUSH
55545: LD_INT 0
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 3
55554: NEG
55555: PUSH
55556: LD_INT 1
55558: NEG
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55595: LD_ADDR_VAR 0 44
55599: PUSH
55600: LD_INT 0
55602: PUSH
55603: LD_INT 0
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: LD_INT 1
55615: NEG
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 1
55623: PUSH
55624: LD_INT 0
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 1
55633: PUSH
55634: LD_INT 1
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 0
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 1
55653: NEG
55654: PUSH
55655: LD_INT 0
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 1
55664: NEG
55665: PUSH
55666: LD_INT 1
55668: NEG
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 1
55676: NEG
55677: PUSH
55678: LD_INT 2
55680: NEG
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 1
55688: PUSH
55689: LD_INT 1
55691: NEG
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 2
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 2
55709: PUSH
55710: LD_INT 1
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 2
55719: PUSH
55720: LD_INT 2
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 1
55729: PUSH
55730: LD_INT 2
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 1
55739: NEG
55740: PUSH
55741: LD_INT 1
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 2
55750: NEG
55751: PUSH
55752: LD_INT 0
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 2
55761: NEG
55762: PUSH
55763: LD_INT 1
55765: NEG
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 2
55773: NEG
55774: PUSH
55775: LD_INT 2
55777: NEG
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 2
55785: NEG
55786: PUSH
55787: LD_INT 3
55789: NEG
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 2
55797: PUSH
55798: LD_INT 1
55800: NEG
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 3
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 3
55818: PUSH
55819: LD_INT 1
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 3
55828: PUSH
55829: LD_INT 2
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 3
55838: PUSH
55839: LD_INT 3
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 2
55848: PUSH
55849: LD_INT 3
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 2
55858: NEG
55859: PUSH
55860: LD_INT 1
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 3
55869: NEG
55870: PUSH
55871: LD_INT 0
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 3
55880: NEG
55881: PUSH
55882: LD_INT 1
55884: NEG
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 3
55892: NEG
55893: PUSH
55894: LD_INT 2
55896: NEG
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 3
55904: NEG
55905: PUSH
55906: LD_INT 3
55908: NEG
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55945: LD_ADDR_VAR 0 45
55949: PUSH
55950: LD_INT 0
55952: PUSH
55953: LD_INT 0
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 0
55962: PUSH
55963: LD_INT 1
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 1
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 1
55983: PUSH
55984: LD_INT 1
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 0
55993: PUSH
55994: LD_INT 1
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 1
56003: NEG
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: LD_INT 1
56018: NEG
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: NEG
56027: PUSH
56028: LD_INT 2
56030: NEG
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 0
56038: PUSH
56039: LD_INT 2
56041: NEG
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 1
56049: PUSH
56050: LD_INT 1
56052: NEG
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 2
56060: PUSH
56061: LD_INT 1
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 2
56070: PUSH
56071: LD_INT 2
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 1
56080: PUSH
56081: LD_INT 2
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: LD_INT 2
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 1
56100: NEG
56101: PUSH
56102: LD_INT 1
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 2
56111: NEG
56112: PUSH
56113: LD_INT 1
56115: NEG
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 2
56123: NEG
56124: PUSH
56125: LD_INT 2
56127: NEG
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 2
56135: NEG
56136: PUSH
56137: LD_INT 3
56139: NEG
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 1
56147: NEG
56148: PUSH
56149: LD_INT 3
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: LD_INT 3
56162: NEG
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 1
56170: PUSH
56171: LD_INT 2
56173: NEG
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 3
56181: PUSH
56182: LD_INT 2
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 3
56191: PUSH
56192: LD_INT 3
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 2
56201: PUSH
56202: LD_INT 3
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 1
56211: PUSH
56212: LD_INT 3
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 0
56221: PUSH
56222: LD_INT 3
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 1
56231: NEG
56232: PUSH
56233: LD_INT 2
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 3
56242: NEG
56243: PUSH
56244: LD_INT 2
56246: NEG
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 3
56254: NEG
56255: PUSH
56256: LD_INT 3
56258: NEG
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56295: LD_ADDR_VAR 0 46
56299: PUSH
56300: LD_INT 0
56302: PUSH
56303: LD_INT 0
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 0
56312: PUSH
56313: LD_INT 1
56315: NEG
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 1
56323: PUSH
56324: LD_INT 0
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 1
56333: PUSH
56334: LD_INT 1
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 0
56343: PUSH
56344: LD_INT 1
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 1
56353: NEG
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 1
56364: NEG
56365: PUSH
56366: LD_INT 1
56368: NEG
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 1
56376: NEG
56377: PUSH
56378: LD_INT 2
56380: NEG
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: LD_INT 2
56391: NEG
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 1
56399: PUSH
56400: LD_INT 1
56402: NEG
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 2
56410: PUSH
56411: LD_INT 0
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 2
56420: PUSH
56421: LD_INT 1
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 1
56430: PUSH
56431: LD_INT 2
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 0
56440: PUSH
56441: LD_INT 2
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 1
56450: NEG
56451: PUSH
56452: LD_INT 1
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 2
56461: NEG
56462: PUSH
56463: LD_INT 0
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 2
56472: NEG
56473: PUSH
56474: LD_INT 1
56476: NEG
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 1
56484: NEG
56485: PUSH
56486: LD_INT 3
56488: NEG
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: LD_INT 3
56499: NEG
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 1
56507: PUSH
56508: LD_INT 2
56510: NEG
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 2
56518: PUSH
56519: LD_INT 1
56521: NEG
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 3
56529: PUSH
56530: LD_INT 0
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 3
56539: PUSH
56540: LD_INT 1
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 1
56549: PUSH
56550: LD_INT 3
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 0
56559: PUSH
56560: LD_INT 3
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 1
56569: NEG
56570: PUSH
56571: LD_INT 2
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 2
56580: NEG
56581: PUSH
56582: LD_INT 1
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 3
56591: NEG
56592: PUSH
56593: LD_INT 0
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 3
56602: NEG
56603: PUSH
56604: LD_INT 1
56606: NEG
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56643: LD_ADDR_VAR 0 47
56647: PUSH
56648: LD_INT 0
56650: PUSH
56651: LD_INT 0
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 0
56660: PUSH
56661: LD_INT 1
56663: NEG
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 1
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 1
56681: PUSH
56682: LD_INT 1
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 0
56691: PUSH
56692: LD_INT 1
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 1
56701: NEG
56702: PUSH
56703: LD_INT 0
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 1
56712: NEG
56713: PUSH
56714: LD_INT 1
56716: NEG
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 1
56724: NEG
56725: PUSH
56726: LD_INT 2
56728: NEG
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 0
56736: PUSH
56737: LD_INT 2
56739: NEG
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 1
56747: PUSH
56748: LD_INT 1
56750: NEG
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 2
56758: NEG
56759: PUSH
56760: LD_INT 1
56762: NEG
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 2
56770: NEG
56771: PUSH
56772: LD_INT 2
56774: NEG
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56794: LD_ADDR_VAR 0 48
56798: PUSH
56799: LD_INT 0
56801: PUSH
56802: LD_INT 0
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 0
56811: PUSH
56812: LD_INT 1
56814: NEG
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 1
56822: PUSH
56823: LD_INT 0
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 1
56832: PUSH
56833: LD_INT 1
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: LD_INT 1
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 1
56852: NEG
56853: PUSH
56854: LD_INT 0
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 1
56863: NEG
56864: PUSH
56865: LD_INT 1
56867: NEG
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 1
56875: NEG
56876: PUSH
56877: LD_INT 2
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 0
56887: PUSH
56888: LD_INT 2
56890: NEG
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 1
56898: PUSH
56899: LD_INT 1
56901: NEG
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 2
56909: PUSH
56910: LD_INT 0
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 2
56919: PUSH
56920: LD_INT 1
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56941: LD_ADDR_VAR 0 49
56945: PUSH
56946: LD_INT 0
56948: PUSH
56949: LD_INT 0
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 0
56958: PUSH
56959: LD_INT 1
56961: NEG
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 1
56969: PUSH
56970: LD_INT 0
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 1
56979: PUSH
56980: LD_INT 1
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 0
56989: PUSH
56990: LD_INT 1
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 1
56999: NEG
57000: PUSH
57001: LD_INT 0
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 1
57010: NEG
57011: PUSH
57012: LD_INT 1
57014: NEG
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 1
57022: PUSH
57023: LD_INT 1
57025: NEG
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 2
57033: PUSH
57034: LD_INT 0
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 2
57043: PUSH
57044: LD_INT 1
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 2
57053: PUSH
57054: LD_INT 2
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 1
57063: PUSH
57064: LD_INT 2
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57085: LD_ADDR_VAR 0 50
57089: PUSH
57090: LD_INT 0
57092: PUSH
57093: LD_INT 0
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 0
57102: PUSH
57103: LD_INT 1
57105: NEG
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 1
57113: PUSH
57114: LD_INT 0
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 1
57123: PUSH
57124: LD_INT 1
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 0
57133: PUSH
57134: LD_INT 1
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 1
57143: NEG
57144: PUSH
57145: LD_INT 0
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 1
57154: NEG
57155: PUSH
57156: LD_INT 1
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 2
57166: PUSH
57167: LD_INT 1
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 2
57176: PUSH
57177: LD_INT 2
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 1
57186: PUSH
57187: LD_INT 2
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 0
57196: PUSH
57197: LD_INT 2
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 1
57206: NEG
57207: PUSH
57208: LD_INT 1
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57229: LD_ADDR_VAR 0 51
57233: PUSH
57234: LD_INT 0
57236: PUSH
57237: LD_INT 0
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 0
57246: PUSH
57247: LD_INT 1
57249: NEG
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 1
57257: PUSH
57258: LD_INT 0
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 1
57267: PUSH
57268: LD_INT 1
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 0
57277: PUSH
57278: LD_INT 1
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 1
57287: NEG
57288: PUSH
57289: LD_INT 0
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 1
57298: NEG
57299: PUSH
57300: LD_INT 1
57302: NEG
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 1
57310: PUSH
57311: LD_INT 2
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 0
57320: PUSH
57321: LD_INT 2
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 1
57330: NEG
57331: PUSH
57332: LD_INT 1
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 2
57341: NEG
57342: PUSH
57343: LD_INT 0
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 2
57352: NEG
57353: PUSH
57354: LD_INT 1
57356: NEG
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57376: LD_ADDR_VAR 0 52
57380: PUSH
57381: LD_INT 0
57383: PUSH
57384: LD_INT 0
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 0
57393: PUSH
57394: LD_INT 1
57396: NEG
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 1
57404: PUSH
57405: LD_INT 0
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 1
57414: PUSH
57415: LD_INT 1
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 0
57424: PUSH
57425: LD_INT 1
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 1
57434: NEG
57435: PUSH
57436: LD_INT 0
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 1
57445: NEG
57446: PUSH
57447: LD_INT 1
57449: NEG
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 1
57457: NEG
57458: PUSH
57459: LD_INT 2
57461: NEG
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 1
57469: NEG
57470: PUSH
57471: LD_INT 1
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 2
57480: NEG
57481: PUSH
57482: LD_INT 0
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 2
57491: NEG
57492: PUSH
57493: LD_INT 1
57495: NEG
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 2
57503: NEG
57504: PUSH
57505: LD_INT 2
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57527: LD_ADDR_VAR 0 53
57531: PUSH
57532: LD_INT 0
57534: PUSH
57535: LD_INT 0
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 0
57544: PUSH
57545: LD_INT 1
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 1
57555: PUSH
57556: LD_INT 0
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 1
57565: PUSH
57566: LD_INT 1
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 0
57575: PUSH
57576: LD_INT 1
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 1
57585: NEG
57586: PUSH
57587: LD_INT 0
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 1
57596: NEG
57597: PUSH
57598: LD_INT 1
57600: NEG
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 1
57608: NEG
57609: PUSH
57610: LD_INT 2
57612: NEG
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 0
57620: PUSH
57621: LD_INT 2
57623: NEG
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 1
57631: PUSH
57632: LD_INT 1
57634: NEG
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 2
57642: PUSH
57643: LD_INT 0
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 2
57652: PUSH
57653: LD_INT 1
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 2
57662: PUSH
57663: LD_INT 2
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 1
57672: PUSH
57673: LD_INT 2
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 0
57682: PUSH
57683: LD_INT 2
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 1
57692: NEG
57693: PUSH
57694: LD_INT 1
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 2
57703: NEG
57704: PUSH
57705: LD_INT 0
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 2
57714: NEG
57715: PUSH
57716: LD_INT 1
57718: NEG
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 2
57726: NEG
57727: PUSH
57728: LD_INT 2
57730: NEG
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57757: LD_ADDR_VAR 0 54
57761: PUSH
57762: LD_INT 0
57764: PUSH
57765: LD_INT 0
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 0
57774: PUSH
57775: LD_INT 1
57777: NEG
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: LD_INT 0
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 1
57795: PUSH
57796: LD_INT 1
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 0
57805: PUSH
57806: LD_INT 1
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 1
57815: NEG
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 1
57826: NEG
57827: PUSH
57828: LD_INT 1
57830: NEG
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 1
57838: NEG
57839: PUSH
57840: LD_INT 2
57842: NEG
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: LD_INT 2
57853: NEG
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 1
57861: PUSH
57862: LD_INT 1
57864: NEG
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 2
57872: PUSH
57873: LD_INT 0
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 2
57882: PUSH
57883: LD_INT 1
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 2
57892: PUSH
57893: LD_INT 2
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 1
57902: PUSH
57903: LD_INT 2
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 0
57912: PUSH
57913: LD_INT 2
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 1
57922: NEG
57923: PUSH
57924: LD_INT 1
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 2
57933: NEG
57934: PUSH
57935: LD_INT 0
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 2
57944: NEG
57945: PUSH
57946: LD_INT 1
57948: NEG
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 2
57956: NEG
57957: PUSH
57958: LD_INT 2
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57987: LD_ADDR_VAR 0 55
57991: PUSH
57992: LD_INT 0
57994: PUSH
57995: LD_INT 0
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 0
58004: PUSH
58005: LD_INT 1
58007: NEG
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 1
58015: PUSH
58016: LD_INT 0
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 1
58025: PUSH
58026: LD_INT 1
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 0
58035: PUSH
58036: LD_INT 1
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 1
58045: NEG
58046: PUSH
58047: LD_INT 0
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 1
58056: NEG
58057: PUSH
58058: LD_INT 1
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 1
58068: NEG
58069: PUSH
58070: LD_INT 2
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 0
58080: PUSH
58081: LD_INT 2
58083: NEG
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 1
58091: PUSH
58092: LD_INT 1
58094: NEG
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 2
58102: PUSH
58103: LD_INT 0
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 2
58112: PUSH
58113: LD_INT 1
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 2
58122: PUSH
58123: LD_INT 2
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 1
58132: PUSH
58133: LD_INT 2
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 0
58142: PUSH
58143: LD_INT 2
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 1
58152: NEG
58153: PUSH
58154: LD_INT 1
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 2
58163: NEG
58164: PUSH
58165: LD_INT 0
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 2
58174: NEG
58175: PUSH
58176: LD_INT 1
58178: NEG
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 2
58186: NEG
58187: PUSH
58188: LD_INT 2
58190: NEG
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58217: LD_ADDR_VAR 0 56
58221: PUSH
58222: LD_INT 0
58224: PUSH
58225: LD_INT 0
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 0
58234: PUSH
58235: LD_INT 1
58237: NEG
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 1
58245: PUSH
58246: LD_INT 0
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 1
58255: PUSH
58256: LD_INT 1
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 0
58265: PUSH
58266: LD_INT 1
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 1
58275: NEG
58276: PUSH
58277: LD_INT 0
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 1
58286: NEG
58287: PUSH
58288: LD_INT 1
58290: NEG
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 1
58298: NEG
58299: PUSH
58300: LD_INT 2
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 0
58310: PUSH
58311: LD_INT 2
58313: NEG
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 1
58321: PUSH
58322: LD_INT 1
58324: NEG
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 2
58332: PUSH
58333: LD_INT 0
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 2
58342: PUSH
58343: LD_INT 1
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 2
58352: PUSH
58353: LD_INT 2
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 1
58362: PUSH
58363: LD_INT 2
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 0
58372: PUSH
58373: LD_INT 2
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 1
58382: NEG
58383: PUSH
58384: LD_INT 1
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 2
58393: NEG
58394: PUSH
58395: LD_INT 0
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 2
58404: NEG
58405: PUSH
58406: LD_INT 1
58408: NEG
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 2
58416: NEG
58417: PUSH
58418: LD_INT 2
58420: NEG
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58447: LD_ADDR_VAR 0 57
58451: PUSH
58452: LD_INT 0
58454: PUSH
58455: LD_INT 0
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 0
58464: PUSH
58465: LD_INT 1
58467: NEG
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 1
58475: PUSH
58476: LD_INT 0
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 1
58485: PUSH
58486: LD_INT 1
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 0
58495: PUSH
58496: LD_INT 1
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 1
58505: NEG
58506: PUSH
58507: LD_INT 0
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 1
58516: NEG
58517: PUSH
58518: LD_INT 1
58520: NEG
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 1
58528: NEG
58529: PUSH
58530: LD_INT 2
58532: NEG
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 0
58540: PUSH
58541: LD_INT 2
58543: NEG
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 1
58551: PUSH
58552: LD_INT 1
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 2
58562: PUSH
58563: LD_INT 0
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 2
58572: PUSH
58573: LD_INT 1
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 2
58582: PUSH
58583: LD_INT 2
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 1
58592: PUSH
58593: LD_INT 2
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 0
58602: PUSH
58603: LD_INT 2
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 1
58612: NEG
58613: PUSH
58614: LD_INT 1
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 2
58623: NEG
58624: PUSH
58625: LD_INT 0
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 2
58634: NEG
58635: PUSH
58636: LD_INT 1
58638: NEG
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 2
58646: NEG
58647: PUSH
58648: LD_INT 2
58650: NEG
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58677: LD_ADDR_VAR 0 58
58681: PUSH
58682: LD_INT 0
58684: PUSH
58685: LD_INT 0
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 0
58694: PUSH
58695: LD_INT 1
58697: NEG
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 1
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 1
58715: PUSH
58716: LD_INT 1
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: LD_INT 1
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: LD_INT 0
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 1
58746: NEG
58747: PUSH
58748: LD_INT 1
58750: NEG
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 1
58758: NEG
58759: PUSH
58760: LD_INT 2
58762: NEG
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 0
58770: PUSH
58771: LD_INT 2
58773: NEG
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 1
58781: PUSH
58782: LD_INT 1
58784: NEG
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 2
58792: PUSH
58793: LD_INT 0
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 2
58802: PUSH
58803: LD_INT 1
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 2
58812: PUSH
58813: LD_INT 2
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 1
58822: PUSH
58823: LD_INT 2
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 0
58832: PUSH
58833: LD_INT 2
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 1
58842: NEG
58843: PUSH
58844: LD_INT 1
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 2
58853: NEG
58854: PUSH
58855: LD_INT 0
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 2
58864: NEG
58865: PUSH
58866: LD_INT 1
58868: NEG
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 2
58876: NEG
58877: PUSH
58878: LD_INT 2
58880: NEG
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58907: LD_ADDR_VAR 0 59
58911: PUSH
58912: LD_INT 0
58914: PUSH
58915: LD_INT 0
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 0
58924: PUSH
58925: LD_INT 1
58927: NEG
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 1
58935: PUSH
58936: LD_INT 0
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 1
58945: PUSH
58946: LD_INT 1
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 0
58955: PUSH
58956: LD_INT 1
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 1
58965: NEG
58966: PUSH
58967: LD_INT 0
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 1
58976: NEG
58977: PUSH
58978: LD_INT 1
58980: NEG
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58995: LD_ADDR_VAR 0 60
58999: PUSH
59000: LD_INT 0
59002: PUSH
59003: LD_INT 0
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 0
59012: PUSH
59013: LD_INT 1
59015: NEG
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 1
59023: PUSH
59024: LD_INT 0
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 1
59033: PUSH
59034: LD_INT 1
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 0
59043: PUSH
59044: LD_INT 1
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 1
59053: NEG
59054: PUSH
59055: LD_INT 0
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 1
59064: NEG
59065: PUSH
59066: LD_INT 1
59068: NEG
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59083: LD_ADDR_VAR 0 61
59087: PUSH
59088: LD_INT 0
59090: PUSH
59091: LD_INT 0
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 0
59100: PUSH
59101: LD_INT 1
59103: NEG
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 1
59111: PUSH
59112: LD_INT 0
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 1
59121: PUSH
59122: LD_INT 1
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 0
59131: PUSH
59132: LD_INT 1
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 1
59141: NEG
59142: PUSH
59143: LD_INT 0
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 1
59152: NEG
59153: PUSH
59154: LD_INT 1
59156: NEG
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59171: LD_ADDR_VAR 0 62
59175: PUSH
59176: LD_INT 0
59178: PUSH
59179: LD_INT 0
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 0
59188: PUSH
59189: LD_INT 1
59191: NEG
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 1
59199: PUSH
59200: LD_INT 0
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 1
59209: PUSH
59210: LD_INT 1
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 0
59219: PUSH
59220: LD_INT 1
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 1
59229: NEG
59230: PUSH
59231: LD_INT 0
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 1
59240: NEG
59241: PUSH
59242: LD_INT 1
59244: NEG
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59259: LD_ADDR_VAR 0 63
59263: PUSH
59264: LD_INT 0
59266: PUSH
59267: LD_INT 0
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 0
59276: PUSH
59277: LD_INT 1
59279: NEG
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 1
59287: PUSH
59288: LD_INT 0
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 1
59297: PUSH
59298: LD_INT 1
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 0
59307: PUSH
59308: LD_INT 1
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 1
59317: NEG
59318: PUSH
59319: LD_INT 0
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 1
59328: NEG
59329: PUSH
59330: LD_INT 1
59332: NEG
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59347: LD_ADDR_VAR 0 64
59351: PUSH
59352: LD_INT 0
59354: PUSH
59355: LD_INT 0
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 0
59364: PUSH
59365: LD_INT 1
59367: NEG
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 1
59375: PUSH
59376: LD_INT 0
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 1
59385: PUSH
59386: LD_INT 1
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 0
59395: PUSH
59396: LD_INT 1
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 1
59405: NEG
59406: PUSH
59407: LD_INT 0
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 1
59416: NEG
59417: PUSH
59418: LD_INT 1
59420: NEG
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: ST_TO_ADDR
// end ; 1 :
59435: GO 65332
59437: LD_INT 1
59439: DOUBLE
59440: EQUAL
59441: IFTRUE 59445
59443: GO 62068
59445: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59446: LD_ADDR_VAR 0 11
59450: PUSH
59451: LD_INT 1
59453: NEG
59454: PUSH
59455: LD_INT 3
59457: NEG
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 0
59465: PUSH
59466: LD_INT 3
59468: NEG
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 1
59476: PUSH
59477: LD_INT 2
59479: NEG
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: LIST
59489: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59490: LD_ADDR_VAR 0 12
59494: PUSH
59495: LD_INT 2
59497: PUSH
59498: LD_INT 1
59500: NEG
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 3
59508: PUSH
59509: LD_INT 0
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 3
59518: PUSH
59519: LD_INT 1
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: LIST
59530: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59531: LD_ADDR_VAR 0 13
59535: PUSH
59536: LD_INT 3
59538: PUSH
59539: LD_INT 2
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 3
59548: PUSH
59549: LD_INT 3
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 2
59558: PUSH
59559: LD_INT 3
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: LIST
59570: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59571: LD_ADDR_VAR 0 14
59575: PUSH
59576: LD_INT 1
59578: PUSH
59579: LD_INT 3
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 0
59588: PUSH
59589: LD_INT 3
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 1
59598: NEG
59599: PUSH
59600: LD_INT 2
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: LIST
59611: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59612: LD_ADDR_VAR 0 15
59616: PUSH
59617: LD_INT 2
59619: NEG
59620: PUSH
59621: LD_INT 1
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 3
59630: NEG
59631: PUSH
59632: LD_INT 0
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 3
59641: NEG
59642: PUSH
59643: LD_INT 1
59645: NEG
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: LIST
59655: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59656: LD_ADDR_VAR 0 16
59660: PUSH
59661: LD_INT 2
59663: NEG
59664: PUSH
59665: LD_INT 3
59667: NEG
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 3
59675: NEG
59676: PUSH
59677: LD_INT 2
59679: NEG
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 3
59687: NEG
59688: PUSH
59689: LD_INT 3
59691: NEG
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: LIST
59701: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59702: LD_ADDR_VAR 0 17
59706: PUSH
59707: LD_INT 1
59709: NEG
59710: PUSH
59711: LD_INT 3
59713: NEG
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: LD_INT 0
59721: PUSH
59722: LD_INT 3
59724: NEG
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 1
59732: PUSH
59733: LD_INT 2
59735: NEG
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: LIST
59745: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59746: LD_ADDR_VAR 0 18
59750: PUSH
59751: LD_INT 2
59753: PUSH
59754: LD_INT 1
59756: NEG
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 3
59764: PUSH
59765: LD_INT 0
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 3
59774: PUSH
59775: LD_INT 1
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: LIST
59786: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59787: LD_ADDR_VAR 0 19
59791: PUSH
59792: LD_INT 3
59794: PUSH
59795: LD_INT 2
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 3
59804: PUSH
59805: LD_INT 3
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 2
59814: PUSH
59815: LD_INT 3
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: LIST
59826: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59827: LD_ADDR_VAR 0 20
59831: PUSH
59832: LD_INT 1
59834: PUSH
59835: LD_INT 3
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 0
59844: PUSH
59845: LD_INT 3
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 1
59854: NEG
59855: PUSH
59856: LD_INT 2
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: LIST
59867: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59868: LD_ADDR_VAR 0 21
59872: PUSH
59873: LD_INT 2
59875: NEG
59876: PUSH
59877: LD_INT 1
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 3
59886: NEG
59887: PUSH
59888: LD_INT 0
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 3
59897: NEG
59898: PUSH
59899: LD_INT 1
59901: NEG
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: LIST
59911: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59912: LD_ADDR_VAR 0 22
59916: PUSH
59917: LD_INT 2
59919: NEG
59920: PUSH
59921: LD_INT 3
59923: NEG
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 3
59931: NEG
59932: PUSH
59933: LD_INT 2
59935: NEG
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 3
59943: NEG
59944: PUSH
59945: LD_INT 3
59947: NEG
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: LIST
59957: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59958: LD_ADDR_VAR 0 23
59962: PUSH
59963: LD_INT 0
59965: PUSH
59966: LD_INT 3
59968: NEG
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 1
59976: NEG
59977: PUSH
59978: LD_INT 4
59980: NEG
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 1
59988: PUSH
59989: LD_INT 3
59991: NEG
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: LIST
60001: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60002: LD_ADDR_VAR 0 24
60006: PUSH
60007: LD_INT 3
60009: PUSH
60010: LD_INT 0
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 3
60019: PUSH
60020: LD_INT 1
60022: NEG
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 4
60030: PUSH
60031: LD_INT 1
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: LIST
60042: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60043: LD_ADDR_VAR 0 25
60047: PUSH
60048: LD_INT 3
60050: PUSH
60051: LD_INT 3
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 4
60060: PUSH
60061: LD_INT 3
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 3
60070: PUSH
60071: LD_INT 4
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: LIST
60082: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60083: LD_ADDR_VAR 0 26
60087: PUSH
60088: LD_INT 0
60090: PUSH
60091: LD_INT 3
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 1
60100: PUSH
60101: LD_INT 4
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 1
60110: NEG
60111: PUSH
60112: LD_INT 3
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: LIST
60123: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60124: LD_ADDR_VAR 0 27
60128: PUSH
60129: LD_INT 3
60131: NEG
60132: PUSH
60133: LD_INT 0
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 3
60142: NEG
60143: PUSH
60144: LD_INT 1
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 4
60153: NEG
60154: PUSH
60155: LD_INT 1
60157: NEG
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: LIST
60167: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60168: LD_ADDR_VAR 0 28
60172: PUSH
60173: LD_INT 3
60175: NEG
60176: PUSH
60177: LD_INT 3
60179: NEG
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 3
60187: NEG
60188: PUSH
60189: LD_INT 4
60191: NEG
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 4
60199: NEG
60200: PUSH
60201: LD_INT 3
60203: NEG
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: LIST
60213: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60214: LD_ADDR_VAR 0 29
60218: PUSH
60219: LD_INT 1
60221: NEG
60222: PUSH
60223: LD_INT 3
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 0
60233: PUSH
60234: LD_INT 3
60236: NEG
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 1
60244: PUSH
60245: LD_INT 2
60247: NEG
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 1
60255: NEG
60256: PUSH
60257: LD_INT 4
60259: NEG
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 0
60267: PUSH
60268: LD_INT 4
60270: NEG
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 1
60278: PUSH
60279: LD_INT 3
60281: NEG
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 1
60289: NEG
60290: PUSH
60291: LD_INT 5
60293: NEG
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 0
60301: PUSH
60302: LD_INT 5
60304: NEG
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 1
60312: PUSH
60313: LD_INT 4
60315: NEG
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 1
60323: NEG
60324: PUSH
60325: LD_INT 6
60327: NEG
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 0
60335: PUSH
60336: LD_INT 6
60338: NEG
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 1
60346: PUSH
60347: LD_INT 5
60349: NEG
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60369: LD_ADDR_VAR 0 30
60373: PUSH
60374: LD_INT 2
60376: PUSH
60377: LD_INT 1
60379: NEG
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 3
60387: PUSH
60388: LD_INT 0
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 3
60397: PUSH
60398: LD_INT 1
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 3
60407: PUSH
60408: LD_INT 1
60410: NEG
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 4
60418: PUSH
60419: LD_INT 0
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 4
60428: PUSH
60429: LD_INT 1
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 4
60438: PUSH
60439: LD_INT 1
60441: NEG
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 5
60449: PUSH
60450: LD_INT 0
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 5
60459: PUSH
60460: LD_INT 1
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 5
60469: PUSH
60470: LD_INT 1
60472: NEG
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 6
60480: PUSH
60481: LD_INT 0
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 6
60490: PUSH
60491: LD_INT 1
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
60512: LD_ADDR_VAR 0 31
60516: PUSH
60517: LD_INT 3
60519: PUSH
60520: LD_INT 2
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 3
60529: PUSH
60530: LD_INT 3
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 2
60539: PUSH
60540: LD_INT 3
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 4
60549: PUSH
60550: LD_INT 3
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 4
60559: PUSH
60560: LD_INT 4
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 3
60569: PUSH
60570: LD_INT 4
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 5
60579: PUSH
60580: LD_INT 4
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 5
60589: PUSH
60590: LD_INT 5
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 4
60599: PUSH
60600: LD_INT 5
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 6
60609: PUSH
60610: LD_INT 5
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 6
60619: PUSH
60620: LD_INT 6
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 5
60629: PUSH
60630: LD_INT 6
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
60651: LD_ADDR_VAR 0 32
60655: PUSH
60656: LD_INT 1
60658: PUSH
60659: LD_INT 3
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 0
60668: PUSH
60669: LD_INT 3
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 1
60678: NEG
60679: PUSH
60680: LD_INT 2
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 1
60689: PUSH
60690: LD_INT 4
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 0
60699: PUSH
60700: LD_INT 4
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 1
60709: NEG
60710: PUSH
60711: LD_INT 3
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 1
60720: PUSH
60721: LD_INT 5
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 0
60730: PUSH
60731: LD_INT 5
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 1
60740: NEG
60741: PUSH
60742: LD_INT 4
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 1
60751: PUSH
60752: LD_INT 6
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 0
60761: PUSH
60762: LD_INT 6
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 1
60771: NEG
60772: PUSH
60773: LD_INT 5
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
60794: LD_ADDR_VAR 0 33
60798: PUSH
60799: LD_INT 2
60801: NEG
60802: PUSH
60803: LD_INT 1
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 3
60812: NEG
60813: PUSH
60814: LD_INT 0
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 3
60823: NEG
60824: PUSH
60825: LD_INT 1
60827: NEG
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 3
60835: NEG
60836: PUSH
60837: LD_INT 1
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 4
60846: NEG
60847: PUSH
60848: LD_INT 0
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 4
60857: NEG
60858: PUSH
60859: LD_INT 1
60861: NEG
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 4
60869: NEG
60870: PUSH
60871: LD_INT 1
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 5
60880: NEG
60881: PUSH
60882: LD_INT 0
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 5
60891: NEG
60892: PUSH
60893: LD_INT 1
60895: NEG
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 5
60903: NEG
60904: PUSH
60905: LD_INT 1
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 6
60914: NEG
60915: PUSH
60916: LD_INT 0
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 6
60925: NEG
60926: PUSH
60927: LD_INT 1
60929: NEG
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60949: LD_ADDR_VAR 0 34
60953: PUSH
60954: LD_INT 2
60956: NEG
60957: PUSH
60958: LD_INT 3
60960: NEG
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 3
60968: NEG
60969: PUSH
60970: LD_INT 2
60972: NEG
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 3
60980: NEG
60981: PUSH
60982: LD_INT 3
60984: NEG
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 3
60992: NEG
60993: PUSH
60994: LD_INT 4
60996: NEG
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: LD_INT 4
61004: NEG
61005: PUSH
61006: LD_INT 3
61008: NEG
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 4
61016: NEG
61017: PUSH
61018: LD_INT 4
61020: NEG
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 4
61028: NEG
61029: PUSH
61030: LD_INT 5
61032: NEG
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 5
61040: NEG
61041: PUSH
61042: LD_INT 4
61044: NEG
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 5
61052: NEG
61053: PUSH
61054: LD_INT 5
61056: NEG
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 5
61064: NEG
61065: PUSH
61066: LD_INT 6
61068: NEG
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 6
61076: NEG
61077: PUSH
61078: LD_INT 5
61080: NEG
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 6
61088: NEG
61089: PUSH
61090: LD_INT 6
61092: NEG
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61112: LD_ADDR_VAR 0 41
61116: PUSH
61117: LD_INT 0
61119: PUSH
61120: LD_INT 2
61122: NEG
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 1
61130: NEG
61131: PUSH
61132: LD_INT 3
61134: NEG
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 1
61142: PUSH
61143: LD_INT 2
61145: NEG
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: LIST
61155: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61156: LD_ADDR_VAR 0 42
61160: PUSH
61161: LD_INT 2
61163: PUSH
61164: LD_INT 0
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 2
61173: PUSH
61174: LD_INT 1
61176: NEG
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 3
61184: PUSH
61185: LD_INT 1
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: LIST
61196: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61197: LD_ADDR_VAR 0 43
61201: PUSH
61202: LD_INT 2
61204: PUSH
61205: LD_INT 2
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 3
61214: PUSH
61215: LD_INT 2
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 2
61224: PUSH
61225: LD_INT 3
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: LIST
61236: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61237: LD_ADDR_VAR 0 44
61241: PUSH
61242: LD_INT 0
61244: PUSH
61245: LD_INT 2
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 1
61254: PUSH
61255: LD_INT 3
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 1
61264: NEG
61265: PUSH
61266: LD_INT 2
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: LIST
61277: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61278: LD_ADDR_VAR 0 45
61282: PUSH
61283: LD_INT 2
61285: NEG
61286: PUSH
61287: LD_INT 0
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 2
61296: NEG
61297: PUSH
61298: LD_INT 1
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 3
61307: NEG
61308: PUSH
61309: LD_INT 1
61311: NEG
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: LIST
61321: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
61322: LD_ADDR_VAR 0 46
61326: PUSH
61327: LD_INT 2
61329: NEG
61330: PUSH
61331: LD_INT 2
61333: NEG
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 2
61341: NEG
61342: PUSH
61343: LD_INT 3
61345: NEG
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 3
61353: NEG
61354: PUSH
61355: LD_INT 2
61357: NEG
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: LIST
61367: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61368: LD_ADDR_VAR 0 47
61372: PUSH
61373: LD_INT 2
61375: NEG
61376: PUSH
61377: LD_INT 3
61379: NEG
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 1
61387: NEG
61388: PUSH
61389: LD_INT 3
61391: NEG
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61401: LD_ADDR_VAR 0 48
61405: PUSH
61406: LD_INT 1
61408: PUSH
61409: LD_INT 2
61411: NEG
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 2
61419: PUSH
61420: LD_INT 1
61422: NEG
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61432: LD_ADDR_VAR 0 49
61436: PUSH
61437: LD_INT 3
61439: PUSH
61440: LD_INT 1
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 3
61449: PUSH
61450: LD_INT 2
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61461: LD_ADDR_VAR 0 50
61465: PUSH
61466: LD_INT 2
61468: PUSH
61469: LD_INT 3
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 1
61478: PUSH
61479: LD_INT 3
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61490: LD_ADDR_VAR 0 51
61494: PUSH
61495: LD_INT 1
61497: NEG
61498: PUSH
61499: LD_INT 2
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 2
61508: NEG
61509: PUSH
61510: LD_INT 1
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61521: LD_ADDR_VAR 0 52
61525: PUSH
61526: LD_INT 3
61528: NEG
61529: PUSH
61530: LD_INT 1
61532: NEG
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 3
61540: NEG
61541: PUSH
61542: LD_INT 2
61544: NEG
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61554: LD_ADDR_VAR 0 53
61558: PUSH
61559: LD_INT 1
61561: NEG
61562: PUSH
61563: LD_INT 3
61565: NEG
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 0
61573: PUSH
61574: LD_INT 3
61576: NEG
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 1
61584: PUSH
61585: LD_INT 2
61587: NEG
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: LIST
61597: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61598: LD_ADDR_VAR 0 54
61602: PUSH
61603: LD_INT 2
61605: PUSH
61606: LD_INT 1
61608: NEG
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 3
61616: PUSH
61617: LD_INT 0
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 3
61626: PUSH
61627: LD_INT 1
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: LIST
61638: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61639: LD_ADDR_VAR 0 55
61643: PUSH
61644: LD_INT 3
61646: PUSH
61647: LD_INT 2
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 3
61656: PUSH
61657: LD_INT 3
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 2
61666: PUSH
61667: LD_INT 3
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: LIST
61678: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61679: LD_ADDR_VAR 0 56
61683: PUSH
61684: LD_INT 1
61686: PUSH
61687: LD_INT 3
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 0
61696: PUSH
61697: LD_INT 3
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 1
61706: NEG
61707: PUSH
61708: LD_INT 2
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: LIST
61719: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61720: LD_ADDR_VAR 0 57
61724: PUSH
61725: LD_INT 2
61727: NEG
61728: PUSH
61729: LD_INT 1
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 3
61738: NEG
61739: PUSH
61740: LD_INT 0
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 3
61749: NEG
61750: PUSH
61751: LD_INT 1
61753: NEG
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: LIST
61763: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61764: LD_ADDR_VAR 0 58
61768: PUSH
61769: LD_INT 2
61771: NEG
61772: PUSH
61773: LD_INT 3
61775: NEG
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 3
61783: NEG
61784: PUSH
61785: LD_INT 2
61787: NEG
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 3
61795: NEG
61796: PUSH
61797: LD_INT 3
61799: NEG
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: LIST
61809: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
61810: LD_ADDR_VAR 0 59
61814: PUSH
61815: LD_INT 1
61817: NEG
61818: PUSH
61819: LD_INT 2
61821: NEG
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 0
61829: PUSH
61830: LD_INT 2
61832: NEG
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 1
61840: PUSH
61841: LD_INT 1
61843: NEG
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: LIST
61853: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61854: LD_ADDR_VAR 0 60
61858: PUSH
61859: LD_INT 1
61861: PUSH
61862: LD_INT 1
61864: NEG
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 2
61872: PUSH
61873: LD_INT 0
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 2
61882: PUSH
61883: LD_INT 1
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: LIST
61894: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61895: LD_ADDR_VAR 0 61
61899: PUSH
61900: LD_INT 2
61902: PUSH
61903: LD_INT 1
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 2
61912: PUSH
61913: LD_INT 2
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 1
61922: PUSH
61923: LD_INT 2
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: LIST
61934: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61935: LD_ADDR_VAR 0 62
61939: PUSH
61940: LD_INT 1
61942: PUSH
61943: LD_INT 2
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 0
61952: PUSH
61953: LD_INT 2
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 1
61962: NEG
61963: PUSH
61964: LD_INT 1
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: LIST
61975: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61976: LD_ADDR_VAR 0 63
61980: PUSH
61981: LD_INT 1
61983: NEG
61984: PUSH
61985: LD_INT 1
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 2
61994: NEG
61995: PUSH
61996: LD_INT 0
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 2
62005: NEG
62006: PUSH
62007: LD_INT 1
62009: NEG
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: LIST
62019: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62020: LD_ADDR_VAR 0 64
62024: PUSH
62025: LD_INT 1
62027: NEG
62028: PUSH
62029: LD_INT 2
62031: NEG
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: LD_INT 2
62039: NEG
62040: PUSH
62041: LD_INT 1
62043: NEG
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 2
62051: NEG
62052: PUSH
62053: LD_INT 2
62055: NEG
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: LIST
62065: ST_TO_ADDR
// end ; 2 :
62066: GO 65332
62068: LD_INT 2
62070: DOUBLE
62071: EQUAL
62072: IFTRUE 62076
62074: GO 65331
62076: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62077: LD_ADDR_VAR 0 29
62081: PUSH
62082: LD_INT 4
62084: PUSH
62085: LD_INT 0
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 4
62094: PUSH
62095: LD_INT 1
62097: NEG
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 5
62105: PUSH
62106: LD_INT 0
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 5
62115: PUSH
62116: LD_INT 1
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 4
62125: PUSH
62126: LD_INT 1
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 3
62135: PUSH
62136: LD_INT 0
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 3
62145: PUSH
62146: LD_INT 1
62148: NEG
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 3
62156: PUSH
62157: LD_INT 2
62159: NEG
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 5
62167: PUSH
62168: LD_INT 2
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 3
62177: PUSH
62178: LD_INT 3
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 3
62187: PUSH
62188: LD_INT 2
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 4
62197: PUSH
62198: LD_INT 3
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 4
62207: PUSH
62208: LD_INT 4
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 3
62217: PUSH
62218: LD_INT 4
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 2
62227: PUSH
62228: LD_INT 3
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 2
62237: PUSH
62238: LD_INT 2
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 4
62247: PUSH
62248: LD_INT 2
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 2
62257: PUSH
62258: LD_INT 4
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 0
62267: PUSH
62268: LD_INT 4
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 0
62277: PUSH
62278: LD_INT 3
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 1
62287: PUSH
62288: LD_INT 4
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 1
62297: PUSH
62298: LD_INT 5
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 0
62307: PUSH
62308: LD_INT 5
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 1
62317: NEG
62318: PUSH
62319: LD_INT 4
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 1
62328: NEG
62329: PUSH
62330: LD_INT 3
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 2
62339: PUSH
62340: LD_INT 5
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 2
62349: NEG
62350: PUSH
62351: LD_INT 3
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 3
62360: NEG
62361: PUSH
62362: LD_INT 0
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 3
62371: NEG
62372: PUSH
62373: LD_INT 1
62375: NEG
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 2
62383: NEG
62384: PUSH
62385: LD_INT 0
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 2
62394: NEG
62395: PUSH
62396: LD_INT 1
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_INT 3
62405: NEG
62406: PUSH
62407: LD_INT 1
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 4
62416: NEG
62417: PUSH
62418: LD_INT 0
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 4
62427: NEG
62428: PUSH
62429: LD_INT 1
62431: NEG
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 4
62439: NEG
62440: PUSH
62441: LD_INT 2
62443: NEG
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 2
62451: NEG
62452: PUSH
62453: LD_INT 2
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: LD_INT 4
62462: NEG
62463: PUSH
62464: LD_INT 4
62466: NEG
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: LD_INT 4
62474: NEG
62475: PUSH
62476: LD_INT 5
62478: NEG
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 3
62486: NEG
62487: PUSH
62488: LD_INT 4
62490: NEG
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 3
62498: NEG
62499: PUSH
62500: LD_INT 3
62502: NEG
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 4
62510: NEG
62511: PUSH
62512: LD_INT 3
62514: NEG
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 5
62522: NEG
62523: PUSH
62524: LD_INT 4
62526: NEG
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 5
62534: NEG
62535: PUSH
62536: LD_INT 5
62538: NEG
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: PUSH
62544: LD_INT 3
62546: NEG
62547: PUSH
62548: LD_INT 5
62550: NEG
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 5
62558: NEG
62559: PUSH
62560: LD_INT 3
62562: NEG
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
62615: LD_ADDR_VAR 0 30
62619: PUSH
62620: LD_INT 4
62622: PUSH
62623: LD_INT 4
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 4
62632: PUSH
62633: LD_INT 3
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 5
62642: PUSH
62643: LD_INT 4
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 5
62652: PUSH
62653: LD_INT 5
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 4
62662: PUSH
62663: LD_INT 5
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 3
62672: PUSH
62673: LD_INT 4
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 3
62682: PUSH
62683: LD_INT 3
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 5
62692: PUSH
62693: LD_INT 3
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 3
62702: PUSH
62703: LD_INT 5
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 0
62712: PUSH
62713: LD_INT 3
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 0
62722: PUSH
62723: LD_INT 2
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 1
62732: PUSH
62733: LD_INT 3
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 1
62742: PUSH
62743: LD_INT 4
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 0
62752: PUSH
62753: LD_INT 4
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 1
62762: NEG
62763: PUSH
62764: LD_INT 3
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 1
62773: NEG
62774: PUSH
62775: LD_INT 2
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 2
62784: PUSH
62785: LD_INT 4
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 2
62794: NEG
62795: PUSH
62796: LD_INT 2
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 4
62805: NEG
62806: PUSH
62807: LD_INT 0
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 4
62816: NEG
62817: PUSH
62818: LD_INT 1
62820: NEG
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 3
62828: NEG
62829: PUSH
62830: LD_INT 0
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: PUSH
62837: LD_INT 3
62839: NEG
62840: PUSH
62841: LD_INT 1
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 4
62850: NEG
62851: PUSH
62852: LD_INT 1
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 5
62861: NEG
62862: PUSH
62863: LD_INT 0
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 5
62872: NEG
62873: PUSH
62874: LD_INT 1
62876: NEG
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 5
62884: NEG
62885: PUSH
62886: LD_INT 2
62888: NEG
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 3
62896: NEG
62897: PUSH
62898: LD_INT 2
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: LD_INT 3
62907: NEG
62908: PUSH
62909: LD_INT 3
62911: NEG
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 3
62919: NEG
62920: PUSH
62921: LD_INT 4
62923: NEG
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 2
62931: NEG
62932: PUSH
62933: LD_INT 3
62935: NEG
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 2
62943: NEG
62944: PUSH
62945: LD_INT 2
62947: NEG
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 3
62955: NEG
62956: PUSH
62957: LD_INT 2
62959: NEG
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 4
62967: NEG
62968: PUSH
62969: LD_INT 3
62971: NEG
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 4
62979: NEG
62980: PUSH
62981: LD_INT 4
62983: NEG
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 2
62991: NEG
62992: PUSH
62993: LD_INT 4
62995: NEG
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 4
63003: NEG
63004: PUSH
63005: LD_INT 2
63007: NEG
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 0
63015: PUSH
63016: LD_INT 4
63018: NEG
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 0
63026: PUSH
63027: LD_INT 5
63029: NEG
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 1
63037: PUSH
63038: LD_INT 4
63040: NEG
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: LD_INT 1
63048: PUSH
63049: LD_INT 3
63051: NEG
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 0
63059: PUSH
63060: LD_INT 3
63062: NEG
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 1
63070: NEG
63071: PUSH
63072: LD_INT 4
63074: NEG
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 1
63082: NEG
63083: PUSH
63084: LD_INT 5
63086: NEG
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 2
63094: PUSH
63095: LD_INT 3
63097: NEG
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 2
63105: NEG
63106: PUSH
63107: LD_INT 5
63109: NEG
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: LIST
63121: LIST
63122: LIST
63123: LIST
63124: LIST
63125: LIST
63126: LIST
63127: LIST
63128: LIST
63129: LIST
63130: LIST
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63162: LD_ADDR_VAR 0 31
63166: PUSH
63167: LD_INT 0
63169: PUSH
63170: LD_INT 4
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 0
63179: PUSH
63180: LD_INT 3
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 1
63189: PUSH
63190: LD_INT 4
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: PUSH
63197: LD_INT 1
63199: PUSH
63200: LD_INT 5
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: LD_INT 0
63209: PUSH
63210: LD_INT 5
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: PUSH
63217: LD_INT 1
63219: NEG
63220: PUSH
63221: LD_INT 4
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 1
63230: NEG
63231: PUSH
63232: LD_INT 3
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 2
63241: PUSH
63242: LD_INT 5
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 2
63251: NEG
63252: PUSH
63253: LD_INT 3
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 3
63262: NEG
63263: PUSH
63264: LD_INT 0
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 3
63273: NEG
63274: PUSH
63275: LD_INT 1
63277: NEG
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 2
63285: NEG
63286: PUSH
63287: LD_INT 0
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 2
63296: NEG
63297: PUSH
63298: LD_INT 1
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 3
63307: NEG
63308: PUSH
63309: LD_INT 1
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 4
63318: NEG
63319: PUSH
63320: LD_INT 0
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 4
63329: NEG
63330: PUSH
63331: LD_INT 1
63333: NEG
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 4
63341: NEG
63342: PUSH
63343: LD_INT 2
63345: NEG
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 2
63353: NEG
63354: PUSH
63355: LD_INT 2
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 4
63364: NEG
63365: PUSH
63366: LD_INT 4
63368: NEG
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 4
63376: NEG
63377: PUSH
63378: LD_INT 5
63380: NEG
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 3
63388: NEG
63389: PUSH
63390: LD_INT 4
63392: NEG
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 3
63400: NEG
63401: PUSH
63402: LD_INT 3
63404: NEG
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 4
63412: NEG
63413: PUSH
63414: LD_INT 3
63416: NEG
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 5
63424: NEG
63425: PUSH
63426: LD_INT 4
63428: NEG
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 5
63436: NEG
63437: PUSH
63438: LD_INT 5
63440: NEG
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 3
63448: NEG
63449: PUSH
63450: LD_INT 5
63452: NEG
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 5
63460: NEG
63461: PUSH
63462: LD_INT 3
63464: NEG
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 0
63472: PUSH
63473: LD_INT 3
63475: NEG
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: LD_INT 0
63483: PUSH
63484: LD_INT 4
63486: NEG
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 1
63494: PUSH
63495: LD_INT 3
63497: NEG
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 1
63505: PUSH
63506: LD_INT 2
63508: NEG
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 0
63516: PUSH
63517: LD_INT 2
63519: NEG
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 1
63527: NEG
63528: PUSH
63529: LD_INT 3
63531: NEG
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 1
63539: NEG
63540: PUSH
63541: LD_INT 4
63543: NEG
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 2
63551: PUSH
63552: LD_INT 2
63554: NEG
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 2
63562: NEG
63563: PUSH
63564: LD_INT 4
63566: NEG
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: PUSH
63572: LD_INT 4
63574: PUSH
63575: LD_INT 0
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 4
63584: PUSH
63585: LD_INT 1
63587: NEG
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 5
63595: PUSH
63596: LD_INT 0
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 5
63605: PUSH
63606: LD_INT 1
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 4
63615: PUSH
63616: LD_INT 1
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 3
63625: PUSH
63626: LD_INT 0
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PUSH
63633: LD_INT 3
63635: PUSH
63636: LD_INT 1
63638: NEG
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 3
63646: PUSH
63647: LD_INT 2
63649: NEG
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 5
63657: PUSH
63658: LD_INT 2
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: LIST
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: LIST
63695: LIST
63696: LIST
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
63712: LD_ADDR_VAR 0 32
63716: PUSH
63717: LD_INT 4
63719: NEG
63720: PUSH
63721: LD_INT 0
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 4
63730: NEG
63731: PUSH
63732: LD_INT 1
63734: NEG
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 3
63742: NEG
63743: PUSH
63744: LD_INT 0
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 3
63753: NEG
63754: PUSH
63755: LD_INT 1
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 4
63764: NEG
63765: PUSH
63766: LD_INT 1
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: LD_INT 5
63775: NEG
63776: PUSH
63777: LD_INT 0
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: LD_INT 5
63786: NEG
63787: PUSH
63788: LD_INT 1
63790: NEG
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 5
63798: NEG
63799: PUSH
63800: LD_INT 2
63802: NEG
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 3
63810: NEG
63811: PUSH
63812: LD_INT 2
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 3
63821: NEG
63822: PUSH
63823: LD_INT 3
63825: NEG
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 3
63833: NEG
63834: PUSH
63835: LD_INT 4
63837: NEG
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 2
63845: NEG
63846: PUSH
63847: LD_INT 3
63849: NEG
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 2
63857: NEG
63858: PUSH
63859: LD_INT 2
63861: NEG
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 3
63869: NEG
63870: PUSH
63871: LD_INT 2
63873: NEG
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 4
63881: NEG
63882: PUSH
63883: LD_INT 3
63885: NEG
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 4
63893: NEG
63894: PUSH
63895: LD_INT 4
63897: NEG
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: LD_INT 2
63905: NEG
63906: PUSH
63907: LD_INT 4
63909: NEG
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 4
63917: NEG
63918: PUSH
63919: LD_INT 2
63921: NEG
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 0
63929: PUSH
63930: LD_INT 4
63932: NEG
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 0
63940: PUSH
63941: LD_INT 5
63943: NEG
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 1
63951: PUSH
63952: LD_INT 4
63954: NEG
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: LD_INT 1
63962: PUSH
63963: LD_INT 3
63965: NEG
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 0
63973: PUSH
63974: LD_INT 3
63976: NEG
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_INT 1
63984: NEG
63985: PUSH
63986: LD_INT 4
63988: NEG
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 1
63996: NEG
63997: PUSH
63998: LD_INT 5
64000: NEG
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 2
64008: PUSH
64009: LD_INT 3
64011: NEG
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 2
64019: NEG
64020: PUSH
64021: LD_INT 5
64023: NEG
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 3
64031: PUSH
64032: LD_INT 0
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: LD_INT 3
64041: PUSH
64042: LD_INT 1
64044: NEG
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 4
64052: PUSH
64053: LD_INT 0
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 4
64062: PUSH
64063: LD_INT 1
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 3
64072: PUSH
64073: LD_INT 1
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PUSH
64080: LD_INT 2
64082: PUSH
64083: LD_INT 0
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 2
64092: PUSH
64093: LD_INT 1
64095: NEG
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PUSH
64101: LD_INT 2
64103: PUSH
64104: LD_INT 2
64106: NEG
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: LD_INT 4
64114: PUSH
64115: LD_INT 2
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 4
64124: PUSH
64125: LD_INT 4
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 4
64134: PUSH
64135: LD_INT 3
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 5
64144: PUSH
64145: LD_INT 4
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 5
64154: PUSH
64155: LD_INT 5
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: LD_INT 4
64164: PUSH
64165: LD_INT 5
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 3
64174: PUSH
64175: LD_INT 4
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 3
64184: PUSH
64185: LD_INT 3
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 5
64194: PUSH
64195: LD_INT 3
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: LD_INT 3
64204: PUSH
64205: LD_INT 5
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: LIST
64249: LIST
64250: LIST
64251: LIST
64252: LIST
64253: LIST
64254: LIST
64255: LIST
64256: LIST
64257: LIST
64258: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64259: LD_ADDR_VAR 0 33
64263: PUSH
64264: LD_INT 4
64266: NEG
64267: PUSH
64268: LD_INT 4
64270: NEG
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 4
64278: NEG
64279: PUSH
64280: LD_INT 5
64282: NEG
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 3
64290: NEG
64291: PUSH
64292: LD_INT 4
64294: NEG
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: LD_INT 3
64302: NEG
64303: PUSH
64304: LD_INT 3
64306: NEG
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 4
64314: NEG
64315: PUSH
64316: LD_INT 3
64318: NEG
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 5
64326: NEG
64327: PUSH
64328: LD_INT 4
64330: NEG
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 5
64338: NEG
64339: PUSH
64340: LD_INT 5
64342: NEG
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 3
64350: NEG
64351: PUSH
64352: LD_INT 5
64354: NEG
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 5
64362: NEG
64363: PUSH
64364: LD_INT 3
64366: NEG
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 0
64374: PUSH
64375: LD_INT 3
64377: NEG
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 0
64385: PUSH
64386: LD_INT 4
64388: NEG
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 1
64396: PUSH
64397: LD_INT 3
64399: NEG
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 1
64407: PUSH
64408: LD_INT 2
64410: NEG
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 0
64418: PUSH
64419: LD_INT 2
64421: NEG
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 1
64429: NEG
64430: PUSH
64431: LD_INT 3
64433: NEG
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 1
64441: NEG
64442: PUSH
64443: LD_INT 4
64445: NEG
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 2
64453: PUSH
64454: LD_INT 2
64456: NEG
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 2
64464: NEG
64465: PUSH
64466: LD_INT 4
64468: NEG
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 4
64476: PUSH
64477: LD_INT 0
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 4
64486: PUSH
64487: LD_INT 1
64489: NEG
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: LD_INT 5
64497: PUSH
64498: LD_INT 0
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 5
64507: PUSH
64508: LD_INT 1
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 4
64517: PUSH
64518: LD_INT 1
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 3
64527: PUSH
64528: LD_INT 0
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: LD_INT 3
64537: PUSH
64538: LD_INT 1
64540: NEG
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 3
64548: PUSH
64549: LD_INT 2
64551: NEG
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 5
64559: PUSH
64560: LD_INT 2
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 3
64569: PUSH
64570: LD_INT 3
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 3
64579: PUSH
64580: LD_INT 2
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 4
64589: PUSH
64590: LD_INT 3
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 4
64599: PUSH
64600: LD_INT 4
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: LD_INT 3
64609: PUSH
64610: LD_INT 4
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: LD_INT 2
64619: PUSH
64620: LD_INT 3
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_INT 2
64629: PUSH
64630: LD_INT 2
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PUSH
64637: LD_INT 4
64639: PUSH
64640: LD_INT 2
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 2
64649: PUSH
64650: LD_INT 4
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 0
64659: PUSH
64660: LD_INT 4
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 0
64669: PUSH
64670: LD_INT 3
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: LD_INT 1
64679: PUSH
64680: LD_INT 4
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 1
64689: PUSH
64690: LD_INT 5
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 0
64699: PUSH
64700: LD_INT 5
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 1
64709: NEG
64710: PUSH
64711: LD_INT 4
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: LD_INT 1
64720: NEG
64721: PUSH
64722: LD_INT 3
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 2
64731: PUSH
64732: LD_INT 5
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 2
64741: NEG
64742: PUSH
64743: LD_INT 3
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: LIST
64774: LIST
64775: LIST
64776: LIST
64777: LIST
64778: LIST
64779: LIST
64780: LIST
64781: LIST
64782: LIST
64783: LIST
64784: LIST
64785: LIST
64786: LIST
64787: LIST
64788: LIST
64789: LIST
64790: LIST
64791: LIST
64792: LIST
64793: LIST
64794: LIST
64795: LIST
64796: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
64797: LD_ADDR_VAR 0 34
64801: PUSH
64802: LD_INT 0
64804: PUSH
64805: LD_INT 4
64807: NEG
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 0
64815: PUSH
64816: LD_INT 5
64818: NEG
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 1
64826: PUSH
64827: LD_INT 4
64829: NEG
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 1
64837: PUSH
64838: LD_INT 3
64840: NEG
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: LD_INT 0
64848: PUSH
64849: LD_INT 3
64851: NEG
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: PUSH
64857: LD_INT 1
64859: NEG
64860: PUSH
64861: LD_INT 4
64863: NEG
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 1
64871: NEG
64872: PUSH
64873: LD_INT 5
64875: NEG
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 2
64883: PUSH
64884: LD_INT 3
64886: NEG
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PUSH
64892: LD_INT 2
64894: NEG
64895: PUSH
64896: LD_INT 5
64898: NEG
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 3
64906: PUSH
64907: LD_INT 0
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: PUSH
64914: LD_INT 3
64916: PUSH
64917: LD_INT 1
64919: NEG
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 4
64927: PUSH
64928: LD_INT 0
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: LD_INT 4
64937: PUSH
64938: LD_INT 1
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 3
64947: PUSH
64948: LD_INT 1
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 2
64957: PUSH
64958: LD_INT 0
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 2
64967: PUSH
64968: LD_INT 1
64970: NEG
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: LD_INT 2
64978: PUSH
64979: LD_INT 2
64981: NEG
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: LD_INT 4
64989: PUSH
64990: LD_INT 2
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: LD_INT 4
64999: PUSH
65000: LD_INT 4
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: PUSH
65007: LD_INT 4
65009: PUSH
65010: LD_INT 3
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: LD_INT 5
65019: PUSH
65020: LD_INT 4
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: PUSH
65027: LD_INT 5
65029: PUSH
65030: LD_INT 5
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: LD_INT 4
65039: PUSH
65040: LD_INT 5
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 3
65049: PUSH
65050: LD_INT 4
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: LD_INT 3
65059: PUSH
65060: LD_INT 3
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 5
65069: PUSH
65070: LD_INT 3
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: PUSH
65077: LD_INT 3
65079: PUSH
65080: LD_INT 5
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PUSH
65087: LD_INT 0
65089: PUSH
65090: LD_INT 3
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 0
65099: PUSH
65100: LD_INT 2
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 1
65109: PUSH
65110: LD_INT 3
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: LD_INT 1
65119: PUSH
65120: LD_INT 4
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 0
65129: PUSH
65130: LD_INT 4
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 1
65139: NEG
65140: PUSH
65141: LD_INT 3
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 1
65150: NEG
65151: PUSH
65152: LD_INT 2
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 2
65161: PUSH
65162: LD_INT 4
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PUSH
65169: LD_INT 2
65171: NEG
65172: PUSH
65173: LD_INT 2
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: LD_INT 4
65182: NEG
65183: PUSH
65184: LD_INT 0
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 4
65193: NEG
65194: PUSH
65195: LD_INT 1
65197: NEG
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 3
65205: NEG
65206: PUSH
65207: LD_INT 0
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 3
65216: NEG
65217: PUSH
65218: LD_INT 1
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: LD_INT 4
65227: NEG
65228: PUSH
65229: LD_INT 1
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 5
65238: NEG
65239: PUSH
65240: LD_INT 0
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 5
65249: NEG
65250: PUSH
65251: LD_INT 1
65253: NEG
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 5
65261: NEG
65262: PUSH
65263: LD_INT 2
65265: NEG
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: LD_INT 3
65273: NEG
65274: PUSH
65275: LD_INT 2
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: ST_TO_ADDR
// end ; end ;
65329: GO 65332
65331: POP
// case btype of b_depot , b_warehouse :
65332: LD_VAR 0 1
65336: PUSH
65337: LD_INT 0
65339: DOUBLE
65340: EQUAL
65341: IFTRUE 65351
65343: LD_INT 1
65345: DOUBLE
65346: EQUAL
65347: IFTRUE 65351
65349: GO 65552
65351: POP
// case nation of nation_american :
65352: LD_VAR 0 5
65356: PUSH
65357: LD_INT 1
65359: DOUBLE
65360: EQUAL
65361: IFTRUE 65365
65363: GO 65421
65365: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65366: LD_ADDR_VAR 0 9
65370: PUSH
65371: LD_VAR 0 11
65375: PUSH
65376: LD_VAR 0 12
65380: PUSH
65381: LD_VAR 0 13
65385: PUSH
65386: LD_VAR 0 14
65390: PUSH
65391: LD_VAR 0 15
65395: PUSH
65396: LD_VAR 0 16
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: LIST
65405: LIST
65406: LIST
65407: LIST
65408: PUSH
65409: LD_VAR 0 4
65413: PUSH
65414: LD_INT 1
65416: PLUS
65417: ARRAY
65418: ST_TO_ADDR
65419: GO 65550
65421: LD_INT 2
65423: DOUBLE
65424: EQUAL
65425: IFTRUE 65429
65427: GO 65485
65429: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
65430: LD_ADDR_VAR 0 9
65434: PUSH
65435: LD_VAR 0 17
65439: PUSH
65440: LD_VAR 0 18
65444: PUSH
65445: LD_VAR 0 19
65449: PUSH
65450: LD_VAR 0 20
65454: PUSH
65455: LD_VAR 0 21
65459: PUSH
65460: LD_VAR 0 22
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: LIST
65469: LIST
65470: LIST
65471: LIST
65472: PUSH
65473: LD_VAR 0 4
65477: PUSH
65478: LD_INT 1
65480: PLUS
65481: ARRAY
65482: ST_TO_ADDR
65483: GO 65550
65485: LD_INT 3
65487: DOUBLE
65488: EQUAL
65489: IFTRUE 65493
65491: GO 65549
65493: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
65494: LD_ADDR_VAR 0 9
65498: PUSH
65499: LD_VAR 0 23
65503: PUSH
65504: LD_VAR 0 24
65508: PUSH
65509: LD_VAR 0 25
65513: PUSH
65514: LD_VAR 0 26
65518: PUSH
65519: LD_VAR 0 27
65523: PUSH
65524: LD_VAR 0 28
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: PUSH
65537: LD_VAR 0 4
65541: PUSH
65542: LD_INT 1
65544: PLUS
65545: ARRAY
65546: ST_TO_ADDR
65547: GO 65550
65549: POP
65550: GO 66105
65552: LD_INT 2
65554: DOUBLE
65555: EQUAL
65556: IFTRUE 65566
65558: LD_INT 3
65560: DOUBLE
65561: EQUAL
65562: IFTRUE 65566
65564: GO 65622
65566: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
65567: LD_ADDR_VAR 0 9
65571: PUSH
65572: LD_VAR 0 29
65576: PUSH
65577: LD_VAR 0 30
65581: PUSH
65582: LD_VAR 0 31
65586: PUSH
65587: LD_VAR 0 32
65591: PUSH
65592: LD_VAR 0 33
65596: PUSH
65597: LD_VAR 0 34
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: PUSH
65610: LD_VAR 0 4
65614: PUSH
65615: LD_INT 1
65617: PLUS
65618: ARRAY
65619: ST_TO_ADDR
65620: GO 66105
65622: LD_INT 16
65624: DOUBLE
65625: EQUAL
65626: IFTRUE 65684
65628: LD_INT 17
65630: DOUBLE
65631: EQUAL
65632: IFTRUE 65684
65634: LD_INT 18
65636: DOUBLE
65637: EQUAL
65638: IFTRUE 65684
65640: LD_INT 19
65642: DOUBLE
65643: EQUAL
65644: IFTRUE 65684
65646: LD_INT 22
65648: DOUBLE
65649: EQUAL
65650: IFTRUE 65684
65652: LD_INT 20
65654: DOUBLE
65655: EQUAL
65656: IFTRUE 65684
65658: LD_INT 21
65660: DOUBLE
65661: EQUAL
65662: IFTRUE 65684
65664: LD_INT 23
65666: DOUBLE
65667: EQUAL
65668: IFTRUE 65684
65670: LD_INT 24
65672: DOUBLE
65673: EQUAL
65674: IFTRUE 65684
65676: LD_INT 25
65678: DOUBLE
65679: EQUAL
65680: IFTRUE 65684
65682: GO 65740
65684: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
65685: LD_ADDR_VAR 0 9
65689: PUSH
65690: LD_VAR 0 35
65694: PUSH
65695: LD_VAR 0 36
65699: PUSH
65700: LD_VAR 0 37
65704: PUSH
65705: LD_VAR 0 38
65709: PUSH
65710: LD_VAR 0 39
65714: PUSH
65715: LD_VAR 0 40
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: LIST
65724: LIST
65725: LIST
65726: LIST
65727: PUSH
65728: LD_VAR 0 4
65732: PUSH
65733: LD_INT 1
65735: PLUS
65736: ARRAY
65737: ST_TO_ADDR
65738: GO 66105
65740: LD_INT 6
65742: DOUBLE
65743: EQUAL
65744: IFTRUE 65796
65746: LD_INT 7
65748: DOUBLE
65749: EQUAL
65750: IFTRUE 65796
65752: LD_INT 8
65754: DOUBLE
65755: EQUAL
65756: IFTRUE 65796
65758: LD_INT 13
65760: DOUBLE
65761: EQUAL
65762: IFTRUE 65796
65764: LD_INT 12
65766: DOUBLE
65767: EQUAL
65768: IFTRUE 65796
65770: LD_INT 15
65772: DOUBLE
65773: EQUAL
65774: IFTRUE 65796
65776: LD_INT 11
65778: DOUBLE
65779: EQUAL
65780: IFTRUE 65796
65782: LD_INT 14
65784: DOUBLE
65785: EQUAL
65786: IFTRUE 65796
65788: LD_INT 10
65790: DOUBLE
65791: EQUAL
65792: IFTRUE 65796
65794: GO 65852
65796: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
65797: LD_ADDR_VAR 0 9
65801: PUSH
65802: LD_VAR 0 41
65806: PUSH
65807: LD_VAR 0 42
65811: PUSH
65812: LD_VAR 0 43
65816: PUSH
65817: LD_VAR 0 44
65821: PUSH
65822: LD_VAR 0 45
65826: PUSH
65827: LD_VAR 0 46
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: LIST
65836: LIST
65837: LIST
65838: LIST
65839: PUSH
65840: LD_VAR 0 4
65844: PUSH
65845: LD_INT 1
65847: PLUS
65848: ARRAY
65849: ST_TO_ADDR
65850: GO 66105
65852: LD_INT 36
65854: DOUBLE
65855: EQUAL
65856: IFTRUE 65860
65858: GO 65916
65860: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65861: LD_ADDR_VAR 0 9
65865: PUSH
65866: LD_VAR 0 47
65870: PUSH
65871: LD_VAR 0 48
65875: PUSH
65876: LD_VAR 0 49
65880: PUSH
65881: LD_VAR 0 50
65885: PUSH
65886: LD_VAR 0 51
65890: PUSH
65891: LD_VAR 0 52
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: PUSH
65904: LD_VAR 0 4
65908: PUSH
65909: LD_INT 1
65911: PLUS
65912: ARRAY
65913: ST_TO_ADDR
65914: GO 66105
65916: LD_INT 4
65918: DOUBLE
65919: EQUAL
65920: IFTRUE 65942
65922: LD_INT 5
65924: DOUBLE
65925: EQUAL
65926: IFTRUE 65942
65928: LD_INT 34
65930: DOUBLE
65931: EQUAL
65932: IFTRUE 65942
65934: LD_INT 37
65936: DOUBLE
65937: EQUAL
65938: IFTRUE 65942
65940: GO 65998
65942: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65943: LD_ADDR_VAR 0 9
65947: PUSH
65948: LD_VAR 0 53
65952: PUSH
65953: LD_VAR 0 54
65957: PUSH
65958: LD_VAR 0 55
65962: PUSH
65963: LD_VAR 0 56
65967: PUSH
65968: LD_VAR 0 57
65972: PUSH
65973: LD_VAR 0 58
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: PUSH
65986: LD_VAR 0 4
65990: PUSH
65991: LD_INT 1
65993: PLUS
65994: ARRAY
65995: ST_TO_ADDR
65996: GO 66105
65998: LD_INT 31
66000: DOUBLE
66001: EQUAL
66002: IFTRUE 66048
66004: LD_INT 32
66006: DOUBLE
66007: EQUAL
66008: IFTRUE 66048
66010: LD_INT 33
66012: DOUBLE
66013: EQUAL
66014: IFTRUE 66048
66016: LD_INT 27
66018: DOUBLE
66019: EQUAL
66020: IFTRUE 66048
66022: LD_INT 26
66024: DOUBLE
66025: EQUAL
66026: IFTRUE 66048
66028: LD_INT 28
66030: DOUBLE
66031: EQUAL
66032: IFTRUE 66048
66034: LD_INT 29
66036: DOUBLE
66037: EQUAL
66038: IFTRUE 66048
66040: LD_INT 30
66042: DOUBLE
66043: EQUAL
66044: IFTRUE 66048
66046: GO 66104
66048: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66049: LD_ADDR_VAR 0 9
66053: PUSH
66054: LD_VAR 0 59
66058: PUSH
66059: LD_VAR 0 60
66063: PUSH
66064: LD_VAR 0 61
66068: PUSH
66069: LD_VAR 0 62
66073: PUSH
66074: LD_VAR 0 63
66078: PUSH
66079: LD_VAR 0 64
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: PUSH
66092: LD_VAR 0 4
66096: PUSH
66097: LD_INT 1
66099: PLUS
66100: ARRAY
66101: ST_TO_ADDR
66102: GO 66105
66104: POP
// temp_list2 = [ ] ;
66105: LD_ADDR_VAR 0 10
66109: PUSH
66110: EMPTY
66111: ST_TO_ADDR
// for i in temp_list do
66112: LD_ADDR_VAR 0 8
66116: PUSH
66117: LD_VAR 0 9
66121: PUSH
66122: FOR_IN
66123: IFFALSE 66175
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66125: LD_ADDR_VAR 0 10
66129: PUSH
66130: LD_VAR 0 10
66134: PUSH
66135: LD_VAR 0 8
66139: PUSH
66140: LD_INT 1
66142: ARRAY
66143: PUSH
66144: LD_VAR 0 2
66148: PLUS
66149: PUSH
66150: LD_VAR 0 8
66154: PUSH
66155: LD_INT 2
66157: ARRAY
66158: PUSH
66159: LD_VAR 0 3
66163: PLUS
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: EMPTY
66170: LIST
66171: ADD
66172: ST_TO_ADDR
66173: GO 66122
66175: POP
66176: POP
// result = temp_list2 ;
66177: LD_ADDR_VAR 0 7
66181: PUSH
66182: LD_VAR 0 10
66186: ST_TO_ADDR
// end ;
66187: LD_VAR 0 7
66191: RET
// export function EnemyInRange ( unit , dist ) ; begin
66192: LD_INT 0
66194: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66195: LD_ADDR_VAR 0 3
66199: PUSH
66200: LD_VAR 0 1
66204: PPUSH
66205: CALL_OW 255
66209: PPUSH
66210: LD_VAR 0 1
66214: PPUSH
66215: CALL_OW 250
66219: PPUSH
66220: LD_VAR 0 1
66224: PPUSH
66225: CALL_OW 251
66229: PPUSH
66230: LD_VAR 0 2
66234: PPUSH
66235: CALL 39449 0 4
66239: PUSH
66240: LD_INT 4
66242: ARRAY
66243: ST_TO_ADDR
// end ;
66244: LD_VAR 0 3
66248: RET
// export function PlayerSeeMe ( unit ) ; begin
66249: LD_INT 0
66251: PPUSH
// result := See ( your_side , unit ) ;
66252: LD_ADDR_VAR 0 2
66256: PUSH
66257: LD_OWVAR 2
66261: PPUSH
66262: LD_VAR 0 1
66266: PPUSH
66267: CALL_OW 292
66271: ST_TO_ADDR
// end ;
66272: LD_VAR 0 2
66276: RET
// export function ReverseDir ( unit ) ; begin
66277: LD_INT 0
66279: PPUSH
// if not unit then
66280: LD_VAR 0 1
66284: NOT
66285: IFFALSE 66289
// exit ;
66287: GO 66312
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
66289: LD_ADDR_VAR 0 2
66293: PUSH
66294: LD_VAR 0 1
66298: PPUSH
66299: CALL_OW 254
66303: PUSH
66304: LD_INT 3
66306: PLUS
66307: PUSH
66308: LD_INT 6
66310: MOD
66311: ST_TO_ADDR
// end ;
66312: LD_VAR 0 2
66316: RET
// export function ReverseArray ( array ) ; var i ; begin
66317: LD_INT 0
66319: PPUSH
66320: PPUSH
// if not array then
66321: LD_VAR 0 1
66325: NOT
66326: IFFALSE 66330
// exit ;
66328: GO 66385
// result := [ ] ;
66330: LD_ADDR_VAR 0 2
66334: PUSH
66335: EMPTY
66336: ST_TO_ADDR
// for i := array downto 1 do
66337: LD_ADDR_VAR 0 3
66341: PUSH
66342: DOUBLE
66343: LD_VAR 0 1
66347: INC
66348: ST_TO_ADDR
66349: LD_INT 1
66351: PUSH
66352: FOR_DOWNTO
66353: IFFALSE 66383
// result := Join ( result , array [ i ] ) ;
66355: LD_ADDR_VAR 0 2
66359: PUSH
66360: LD_VAR 0 2
66364: PPUSH
66365: LD_VAR 0 1
66369: PUSH
66370: LD_VAR 0 3
66374: ARRAY
66375: PPUSH
66376: CALL 71227 0 2
66380: ST_TO_ADDR
66381: GO 66352
66383: POP
66384: POP
// end ;
66385: LD_VAR 0 2
66389: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
66390: LD_INT 0
66392: PPUSH
66393: PPUSH
66394: PPUSH
66395: PPUSH
66396: PPUSH
66397: PPUSH
// if not unit or not hexes then
66398: LD_VAR 0 1
66402: NOT
66403: IFTRUE 66412
66405: PUSH
66406: LD_VAR 0 2
66410: NOT
66411: OR
66412: IFFALSE 66416
// exit ;
66414: GO 66539
// dist := 9999 ;
66416: LD_ADDR_VAR 0 5
66420: PUSH
66421: LD_INT 9999
66423: ST_TO_ADDR
// for i = 1 to hexes do
66424: LD_ADDR_VAR 0 4
66428: PUSH
66429: DOUBLE
66430: LD_INT 1
66432: DEC
66433: ST_TO_ADDR
66434: LD_VAR 0 2
66438: PUSH
66439: FOR_TO
66440: IFFALSE 66527
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66442: LD_ADDR_VAR 0 6
66446: PUSH
66447: LD_VAR 0 1
66451: PPUSH
66452: LD_VAR 0 2
66456: PUSH
66457: LD_VAR 0 4
66461: ARRAY
66462: PUSH
66463: LD_INT 1
66465: ARRAY
66466: PPUSH
66467: LD_VAR 0 2
66471: PUSH
66472: LD_VAR 0 4
66476: ARRAY
66477: PUSH
66478: LD_INT 2
66480: ARRAY
66481: PPUSH
66482: CALL_OW 297
66486: ST_TO_ADDR
// if tdist < dist then
66487: LD_VAR 0 6
66491: PUSH
66492: LD_VAR 0 5
66496: LESS
66497: IFFALSE 66525
// begin hex := hexes [ i ] ;
66499: LD_ADDR_VAR 0 8
66503: PUSH
66504: LD_VAR 0 2
66508: PUSH
66509: LD_VAR 0 4
66513: ARRAY
66514: ST_TO_ADDR
// dist := tdist ;
66515: LD_ADDR_VAR 0 5
66519: PUSH
66520: LD_VAR 0 6
66524: ST_TO_ADDR
// end ; end ;
66525: GO 66439
66527: POP
66528: POP
// result := hex ;
66529: LD_ADDR_VAR 0 3
66533: PUSH
66534: LD_VAR 0 8
66538: ST_TO_ADDR
// end ;
66539: LD_VAR 0 3
66543: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
66544: LD_INT 0
66546: PPUSH
66547: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
66548: LD_VAR 0 1
66552: NOT
66553: IFTRUE 66592
66555: PUSH
66556: LD_VAR 0 1
66560: PUSH
66561: LD_INT 21
66563: PUSH
66564: LD_INT 2
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: LD_INT 23
66573: PUSH
66574: LD_INT 2
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: PPUSH
66585: CALL_OW 69
66589: IN
66590: NOT
66591: OR
66592: IFFALSE 66596
// exit ;
66594: GO 66643
// for i = 1 to 3 do
66596: LD_ADDR_VAR 0 3
66600: PUSH
66601: DOUBLE
66602: LD_INT 1
66604: DEC
66605: ST_TO_ADDR
66606: LD_INT 3
66608: PUSH
66609: FOR_TO
66610: IFFALSE 66641
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
66612: LD_VAR 0 1
66616: PPUSH
66617: CALL_OW 250
66621: PPUSH
66622: LD_VAR 0 1
66626: PPUSH
66627: CALL_OW 251
66631: PPUSH
66632: LD_INT 1
66634: PPUSH
66635: CALL_OW 453
66639: GO 66609
66641: POP
66642: POP
// end ;
66643: LD_VAR 0 2
66647: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
66648: LD_INT 0
66650: PPUSH
66651: PPUSH
66652: PPUSH
66653: PPUSH
66654: PPUSH
66655: PPUSH
// if not unit or not enemy_unit then
66656: LD_VAR 0 1
66660: NOT
66661: IFTRUE 66670
66663: PUSH
66664: LD_VAR 0 2
66668: NOT
66669: OR
66670: IFFALSE 66674
// exit ;
66672: GO 67145
// if GetLives ( i ) < 250 then
66674: LD_VAR 0 4
66678: PPUSH
66679: CALL_OW 256
66683: PUSH
66684: LD_INT 250
66686: LESS
66687: IFFALSE 66700
// begin ComAutodestruct ( i ) ;
66689: LD_VAR 0 4
66693: PPUSH
66694: CALL 66544 0 1
// exit ;
66698: GO 67145
// end ; x := GetX ( enemy_unit ) ;
66700: LD_ADDR_VAR 0 7
66704: PUSH
66705: LD_VAR 0 2
66709: PPUSH
66710: CALL_OW 250
66714: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
66715: LD_ADDR_VAR 0 8
66719: PUSH
66720: LD_VAR 0 2
66724: PPUSH
66725: CALL_OW 251
66729: ST_TO_ADDR
// if not x or not y then
66730: LD_VAR 0 7
66734: NOT
66735: IFTRUE 66744
66737: PUSH
66738: LD_VAR 0 8
66742: NOT
66743: OR
66744: IFFALSE 66748
// exit ;
66746: GO 67145
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
66748: LD_ADDR_VAR 0 6
66752: PUSH
66753: LD_VAR 0 7
66757: PPUSH
66758: LD_INT 0
66760: PPUSH
66761: LD_INT 4
66763: PPUSH
66764: CALL_OW 272
66768: PUSH
66769: LD_VAR 0 8
66773: PPUSH
66774: LD_INT 0
66776: PPUSH
66777: LD_INT 4
66779: PPUSH
66780: CALL_OW 273
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PUSH
66789: LD_VAR 0 7
66793: PPUSH
66794: LD_INT 1
66796: PPUSH
66797: LD_INT 4
66799: PPUSH
66800: CALL_OW 272
66804: PUSH
66805: LD_VAR 0 8
66809: PPUSH
66810: LD_INT 1
66812: PPUSH
66813: LD_INT 4
66815: PPUSH
66816: CALL_OW 273
66820: PUSH
66821: EMPTY
66822: LIST
66823: LIST
66824: PUSH
66825: LD_VAR 0 7
66829: PPUSH
66830: LD_INT 2
66832: PPUSH
66833: LD_INT 4
66835: PPUSH
66836: CALL_OW 272
66840: PUSH
66841: LD_VAR 0 8
66845: PPUSH
66846: LD_INT 2
66848: PPUSH
66849: LD_INT 4
66851: PPUSH
66852: CALL_OW 273
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: LD_VAR 0 7
66865: PPUSH
66866: LD_INT 3
66868: PPUSH
66869: LD_INT 4
66871: PPUSH
66872: CALL_OW 272
66876: PUSH
66877: LD_VAR 0 8
66881: PPUSH
66882: LD_INT 3
66884: PPUSH
66885: LD_INT 4
66887: PPUSH
66888: CALL_OW 273
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: PUSH
66897: LD_VAR 0 7
66901: PPUSH
66902: LD_INT 4
66904: PPUSH
66905: LD_INT 4
66907: PPUSH
66908: CALL_OW 272
66912: PUSH
66913: LD_VAR 0 8
66917: PPUSH
66918: LD_INT 4
66920: PPUSH
66921: LD_INT 4
66923: PPUSH
66924: CALL_OW 273
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: PUSH
66933: LD_VAR 0 7
66937: PPUSH
66938: LD_INT 5
66940: PPUSH
66941: LD_INT 4
66943: PPUSH
66944: CALL_OW 272
66948: PUSH
66949: LD_VAR 0 8
66953: PPUSH
66954: LD_INT 5
66956: PPUSH
66957: LD_INT 4
66959: PPUSH
66960: CALL_OW 273
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: LIST
66973: LIST
66974: LIST
66975: LIST
66976: ST_TO_ADDR
// for i = tmp downto 1 do
66977: LD_ADDR_VAR 0 4
66981: PUSH
66982: DOUBLE
66983: LD_VAR 0 6
66987: INC
66988: ST_TO_ADDR
66989: LD_INT 1
66991: PUSH
66992: FOR_DOWNTO
66993: IFFALSE 67096
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66995: LD_VAR 0 6
66999: PUSH
67000: LD_VAR 0 4
67004: ARRAY
67005: PUSH
67006: LD_INT 1
67008: ARRAY
67009: PPUSH
67010: LD_VAR 0 6
67014: PUSH
67015: LD_VAR 0 4
67019: ARRAY
67020: PUSH
67021: LD_INT 2
67023: ARRAY
67024: PPUSH
67025: CALL_OW 488
67029: NOT
67030: IFTRUE 67072
67032: PUSH
67033: LD_VAR 0 6
67037: PUSH
67038: LD_VAR 0 4
67042: ARRAY
67043: PUSH
67044: LD_INT 1
67046: ARRAY
67047: PPUSH
67048: LD_VAR 0 6
67052: PUSH
67053: LD_VAR 0 4
67057: ARRAY
67058: PUSH
67059: LD_INT 2
67061: ARRAY
67062: PPUSH
67063: CALL_OW 428
67067: PUSH
67068: LD_INT 0
67070: NONEQUAL
67071: OR
67072: IFFALSE 67094
// tmp := Delete ( tmp , i ) ;
67074: LD_ADDR_VAR 0 6
67078: PUSH
67079: LD_VAR 0 6
67083: PPUSH
67084: LD_VAR 0 4
67088: PPUSH
67089: CALL_OW 3
67093: ST_TO_ADDR
67094: GO 66992
67096: POP
67097: POP
// j := GetClosestHex ( unit , tmp ) ;
67098: LD_ADDR_VAR 0 5
67102: PUSH
67103: LD_VAR 0 1
67107: PPUSH
67108: LD_VAR 0 6
67112: PPUSH
67113: CALL 66390 0 2
67117: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67118: LD_VAR 0 1
67122: PPUSH
67123: LD_VAR 0 5
67127: PUSH
67128: LD_INT 1
67130: ARRAY
67131: PPUSH
67132: LD_VAR 0 5
67136: PUSH
67137: LD_INT 2
67139: ARRAY
67140: PPUSH
67141: CALL_OW 111
// end ;
67145: LD_VAR 0 3
67149: RET
// export function PrepareApemanSoldier ( ) ; begin
67150: LD_INT 0
67152: PPUSH
// uc_nation := 0 ;
67153: LD_ADDR_OWVAR 21
67157: PUSH
67158: LD_INT 0
67160: ST_TO_ADDR
// hc_sex := sex_male ;
67161: LD_ADDR_OWVAR 27
67165: PUSH
67166: LD_INT 1
67168: ST_TO_ADDR
// hc_name :=  ;
67169: LD_ADDR_OWVAR 26
67173: PUSH
67174: LD_STRING 
67176: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
67177: LD_ADDR_OWVAR 28
67181: PUSH
67182: LD_INT 15
67184: ST_TO_ADDR
// hc_gallery :=  ;
67185: LD_ADDR_OWVAR 33
67189: PUSH
67190: LD_STRING 
67192: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67193: LD_ADDR_OWVAR 31
67197: PUSH
67198: LD_INT 0
67200: PPUSH
67201: LD_INT 3
67203: PPUSH
67204: CALL_OW 12
67208: PUSH
67209: LD_INT 0
67211: PPUSH
67212: LD_INT 3
67214: PPUSH
67215: CALL_OW 12
67219: PUSH
67220: LD_INT 0
67222: PUSH
67223: LD_INT 0
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: LIST
67230: LIST
67231: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67232: LD_ADDR_OWVAR 29
67236: PUSH
67237: LD_INT 12
67239: PUSH
67240: LD_INT 12
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: ST_TO_ADDR
// end ;
67247: LD_VAR 0 1
67251: RET
// export function PrepareApemanEngineer ( ) ; begin
67252: LD_INT 0
67254: PPUSH
// uc_nation := 0 ;
67255: LD_ADDR_OWVAR 21
67259: PUSH
67260: LD_INT 0
67262: ST_TO_ADDR
// hc_sex := sex_male ;
67263: LD_ADDR_OWVAR 27
67267: PUSH
67268: LD_INT 1
67270: ST_TO_ADDR
// hc_name :=  ;
67271: LD_ADDR_OWVAR 26
67275: PUSH
67276: LD_STRING 
67278: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
67279: LD_ADDR_OWVAR 28
67283: PUSH
67284: LD_INT 16
67286: ST_TO_ADDR
// hc_gallery :=  ;
67287: LD_ADDR_OWVAR 33
67291: PUSH
67292: LD_STRING 
67294: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67295: LD_ADDR_OWVAR 31
67299: PUSH
67300: LD_INT 0
67302: PPUSH
67303: LD_INT 3
67305: PPUSH
67306: CALL_OW 12
67310: PUSH
67311: LD_INT 0
67313: PPUSH
67314: LD_INT 3
67316: PPUSH
67317: CALL_OW 12
67321: PUSH
67322: LD_INT 0
67324: PUSH
67325: LD_INT 0
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: LIST
67332: LIST
67333: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67334: LD_ADDR_OWVAR 29
67338: PUSH
67339: LD_INT 12
67341: PUSH
67342: LD_INT 12
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: ST_TO_ADDR
// end ;
67349: LD_VAR 0 1
67353: RET
// export function PrepareApeman ( agressivity ) ; begin
67354: LD_INT 0
67356: PPUSH
// uc_side := 0 ;
67357: LD_ADDR_OWVAR 20
67361: PUSH
67362: LD_INT 0
67364: ST_TO_ADDR
// uc_nation := 0 ;
67365: LD_ADDR_OWVAR 21
67369: PUSH
67370: LD_INT 0
67372: ST_TO_ADDR
// hc_sex := sex_male ;
67373: LD_ADDR_OWVAR 27
67377: PUSH
67378: LD_INT 1
67380: ST_TO_ADDR
// hc_class := class_apeman ;
67381: LD_ADDR_OWVAR 28
67385: PUSH
67386: LD_INT 12
67388: ST_TO_ADDR
// hc_gallery :=  ;
67389: LD_ADDR_OWVAR 33
67393: PUSH
67394: LD_STRING 
67396: ST_TO_ADDR
// hc_name :=  ;
67397: LD_ADDR_OWVAR 26
67401: PUSH
67402: LD_STRING 
67404: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67405: LD_ADDR_OWVAR 29
67409: PUSH
67410: LD_INT 12
67412: PUSH
67413: LD_INT 12
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: ST_TO_ADDR
// if agressivity = 0 then
67420: LD_VAR 0 1
67424: PUSH
67425: LD_INT 0
67427: EQUAL
67428: IFFALSE 67440
// hc_agressivity := 0 else
67430: LD_ADDR_OWVAR 35
67434: PUSH
67435: LD_INT 0
67437: ST_TO_ADDR
67438: GO 67461
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67440: LD_ADDR_OWVAR 35
67444: PUSH
67445: LD_VAR 0 1
67449: NEG
67450: PPUSH
67451: LD_VAR 0 1
67455: PPUSH
67456: CALL_OW 12
67460: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67461: LD_ADDR_OWVAR 31
67465: PUSH
67466: LD_INT 0
67468: PPUSH
67469: LD_INT 3
67471: PPUSH
67472: CALL_OW 12
67476: PUSH
67477: LD_INT 0
67479: PPUSH
67480: LD_INT 3
67482: PPUSH
67483: CALL_OW 12
67487: PUSH
67488: LD_INT 0
67490: PUSH
67491: LD_INT 0
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: LIST
67498: LIST
67499: ST_TO_ADDR
// end ;
67500: LD_VAR 0 2
67504: RET
// export function PrepareTiger ( agressivity ) ; begin
67505: LD_INT 0
67507: PPUSH
// uc_side := 0 ;
67508: LD_ADDR_OWVAR 20
67512: PUSH
67513: LD_INT 0
67515: ST_TO_ADDR
// uc_nation := 0 ;
67516: LD_ADDR_OWVAR 21
67520: PUSH
67521: LD_INT 0
67523: ST_TO_ADDR
// InitHc ;
67524: CALL_OW 19
// hc_class := class_tiger ;
67528: LD_ADDR_OWVAR 28
67532: PUSH
67533: LD_INT 14
67535: ST_TO_ADDR
// hc_gallery :=  ;
67536: LD_ADDR_OWVAR 33
67540: PUSH
67541: LD_STRING 
67543: ST_TO_ADDR
// hc_name :=  ;
67544: LD_ADDR_OWVAR 26
67548: PUSH
67549: LD_STRING 
67551: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67552: LD_ADDR_OWVAR 35
67556: PUSH
67557: LD_VAR 0 1
67561: NEG
67562: PPUSH
67563: LD_VAR 0 1
67567: PPUSH
67568: CALL_OW 12
67572: ST_TO_ADDR
// end ;
67573: LD_VAR 0 2
67577: RET
// export function PrepareEnchidna ( ) ; begin
67578: LD_INT 0
67580: PPUSH
// uc_side := 0 ;
67581: LD_ADDR_OWVAR 20
67585: PUSH
67586: LD_INT 0
67588: ST_TO_ADDR
// uc_nation := 0 ;
67589: LD_ADDR_OWVAR 21
67593: PUSH
67594: LD_INT 0
67596: ST_TO_ADDR
// InitHc ;
67597: CALL_OW 19
// hc_class := class_baggie ;
67601: LD_ADDR_OWVAR 28
67605: PUSH
67606: LD_INT 13
67608: ST_TO_ADDR
// hc_gallery :=  ;
67609: LD_ADDR_OWVAR 33
67613: PUSH
67614: LD_STRING 
67616: ST_TO_ADDR
// hc_name :=  ;
67617: LD_ADDR_OWVAR 26
67621: PUSH
67622: LD_STRING 
67624: ST_TO_ADDR
// end ;
67625: LD_VAR 0 1
67629: RET
// export function PrepareFrog ( ) ; begin
67630: LD_INT 0
67632: PPUSH
// uc_side := 0 ;
67633: LD_ADDR_OWVAR 20
67637: PUSH
67638: LD_INT 0
67640: ST_TO_ADDR
// uc_nation := 0 ;
67641: LD_ADDR_OWVAR 21
67645: PUSH
67646: LD_INT 0
67648: ST_TO_ADDR
// InitHc ;
67649: CALL_OW 19
// hc_class := class_frog ;
67653: LD_ADDR_OWVAR 28
67657: PUSH
67658: LD_INT 19
67660: ST_TO_ADDR
// hc_gallery :=  ;
67661: LD_ADDR_OWVAR 33
67665: PUSH
67666: LD_STRING 
67668: ST_TO_ADDR
// hc_name :=  ;
67669: LD_ADDR_OWVAR 26
67673: PUSH
67674: LD_STRING 
67676: ST_TO_ADDR
// end ;
67677: LD_VAR 0 1
67681: RET
// export function PrepareFish ( ) ; begin
67682: LD_INT 0
67684: PPUSH
// uc_side := 0 ;
67685: LD_ADDR_OWVAR 20
67689: PUSH
67690: LD_INT 0
67692: ST_TO_ADDR
// uc_nation := 0 ;
67693: LD_ADDR_OWVAR 21
67697: PUSH
67698: LD_INT 0
67700: ST_TO_ADDR
// InitHc ;
67701: CALL_OW 19
// hc_class := class_fish ;
67705: LD_ADDR_OWVAR 28
67709: PUSH
67710: LD_INT 20
67712: ST_TO_ADDR
// hc_gallery :=  ;
67713: LD_ADDR_OWVAR 33
67717: PUSH
67718: LD_STRING 
67720: ST_TO_ADDR
// hc_name :=  ;
67721: LD_ADDR_OWVAR 26
67725: PUSH
67726: LD_STRING 
67728: ST_TO_ADDR
// end ;
67729: LD_VAR 0 1
67733: RET
// export function PrepareBird ( ) ; begin
67734: LD_INT 0
67736: PPUSH
// uc_side := 0 ;
67737: LD_ADDR_OWVAR 20
67741: PUSH
67742: LD_INT 0
67744: ST_TO_ADDR
// uc_nation := 0 ;
67745: LD_ADDR_OWVAR 21
67749: PUSH
67750: LD_INT 0
67752: ST_TO_ADDR
// InitHc ;
67753: CALL_OW 19
// hc_class := class_phororhacos ;
67757: LD_ADDR_OWVAR 28
67761: PUSH
67762: LD_INT 18
67764: ST_TO_ADDR
// hc_gallery :=  ;
67765: LD_ADDR_OWVAR 33
67769: PUSH
67770: LD_STRING 
67772: ST_TO_ADDR
// hc_name :=  ;
67773: LD_ADDR_OWVAR 26
67777: PUSH
67778: LD_STRING 
67780: ST_TO_ADDR
// end ;
67781: LD_VAR 0 1
67785: RET
// export function PrepareHorse ( ) ; begin
67786: LD_INT 0
67788: PPUSH
// uc_side := 0 ;
67789: LD_ADDR_OWVAR 20
67793: PUSH
67794: LD_INT 0
67796: ST_TO_ADDR
// uc_nation := 0 ;
67797: LD_ADDR_OWVAR 21
67801: PUSH
67802: LD_INT 0
67804: ST_TO_ADDR
// InitHc ;
67805: CALL_OW 19
// hc_class := class_horse ;
67809: LD_ADDR_OWVAR 28
67813: PUSH
67814: LD_INT 21
67816: ST_TO_ADDR
// hc_gallery :=  ;
67817: LD_ADDR_OWVAR 33
67821: PUSH
67822: LD_STRING 
67824: ST_TO_ADDR
// hc_name :=  ;
67825: LD_ADDR_OWVAR 26
67829: PUSH
67830: LD_STRING 
67832: ST_TO_ADDR
// end ;
67833: LD_VAR 0 1
67837: RET
// export function PrepareMastodont ( ) ; begin
67838: LD_INT 0
67840: PPUSH
// uc_side := 0 ;
67841: LD_ADDR_OWVAR 20
67845: PUSH
67846: LD_INT 0
67848: ST_TO_ADDR
// uc_nation := 0 ;
67849: LD_ADDR_OWVAR 21
67853: PUSH
67854: LD_INT 0
67856: ST_TO_ADDR
// vc_chassis := class_mastodont ;
67857: LD_ADDR_OWVAR 37
67861: PUSH
67862: LD_INT 31
67864: ST_TO_ADDR
// vc_control := control_rider ;
67865: LD_ADDR_OWVAR 38
67869: PUSH
67870: LD_INT 4
67872: ST_TO_ADDR
// end ;
67873: LD_VAR 0 1
67877: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
67878: LD_INT 0
67880: PPUSH
67881: PPUSH
67882: PPUSH
// uc_side = 0 ;
67883: LD_ADDR_OWVAR 20
67887: PUSH
67888: LD_INT 0
67890: ST_TO_ADDR
// uc_nation = 0 ;
67891: LD_ADDR_OWVAR 21
67895: PUSH
67896: LD_INT 0
67898: ST_TO_ADDR
// InitHc_All ( ) ;
67899: CALL_OW 584
// InitVc ;
67903: CALL_OW 20
// if mastodonts then
67907: LD_VAR 0 6
67911: IFFALSE 67978
// for i = 1 to mastodonts do
67913: LD_ADDR_VAR 0 11
67917: PUSH
67918: DOUBLE
67919: LD_INT 1
67921: DEC
67922: ST_TO_ADDR
67923: LD_VAR 0 6
67927: PUSH
67928: FOR_TO
67929: IFFALSE 67976
// begin vc_chassis := 31 ;
67931: LD_ADDR_OWVAR 37
67935: PUSH
67936: LD_INT 31
67938: ST_TO_ADDR
// vc_control := control_rider ;
67939: LD_ADDR_OWVAR 38
67943: PUSH
67944: LD_INT 4
67946: ST_TO_ADDR
// animal := CreateVehicle ;
67947: LD_ADDR_VAR 0 12
67951: PUSH
67952: CALL_OW 45
67956: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67957: LD_VAR 0 12
67961: PPUSH
67962: LD_VAR 0 8
67966: PPUSH
67967: LD_INT 0
67969: PPUSH
67970: CALL 70120 0 3
// end ;
67974: GO 67928
67976: POP
67977: POP
// if horses then
67978: LD_VAR 0 5
67982: IFFALSE 68049
// for i = 1 to horses do
67984: LD_ADDR_VAR 0 11
67988: PUSH
67989: DOUBLE
67990: LD_INT 1
67992: DEC
67993: ST_TO_ADDR
67994: LD_VAR 0 5
67998: PUSH
67999: FOR_TO
68000: IFFALSE 68047
// begin hc_class := 21 ;
68002: LD_ADDR_OWVAR 28
68006: PUSH
68007: LD_INT 21
68009: ST_TO_ADDR
// hc_gallery :=  ;
68010: LD_ADDR_OWVAR 33
68014: PUSH
68015: LD_STRING 
68017: ST_TO_ADDR
// animal := CreateHuman ;
68018: LD_ADDR_VAR 0 12
68022: PUSH
68023: CALL_OW 44
68027: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68028: LD_VAR 0 12
68032: PPUSH
68033: LD_VAR 0 8
68037: PPUSH
68038: LD_INT 0
68040: PPUSH
68041: CALL 70120 0 3
// end ;
68045: GO 67999
68047: POP
68048: POP
// if birds then
68049: LD_VAR 0 1
68053: IFFALSE 68120
// for i = 1 to birds do
68055: LD_ADDR_VAR 0 11
68059: PUSH
68060: DOUBLE
68061: LD_INT 1
68063: DEC
68064: ST_TO_ADDR
68065: LD_VAR 0 1
68069: PUSH
68070: FOR_TO
68071: IFFALSE 68118
// begin hc_class := 18 ;
68073: LD_ADDR_OWVAR 28
68077: PUSH
68078: LD_INT 18
68080: ST_TO_ADDR
// hc_gallery =  ;
68081: LD_ADDR_OWVAR 33
68085: PUSH
68086: LD_STRING 
68088: ST_TO_ADDR
// animal := CreateHuman ;
68089: LD_ADDR_VAR 0 12
68093: PUSH
68094: CALL_OW 44
68098: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68099: LD_VAR 0 12
68103: PPUSH
68104: LD_VAR 0 8
68108: PPUSH
68109: LD_INT 0
68111: PPUSH
68112: CALL 70120 0 3
// end ;
68116: GO 68070
68118: POP
68119: POP
// if tigers then
68120: LD_VAR 0 2
68124: IFFALSE 68208
// for i = 1 to tigers do
68126: LD_ADDR_VAR 0 11
68130: PUSH
68131: DOUBLE
68132: LD_INT 1
68134: DEC
68135: ST_TO_ADDR
68136: LD_VAR 0 2
68140: PUSH
68141: FOR_TO
68142: IFFALSE 68206
// begin hc_class = class_tiger ;
68144: LD_ADDR_OWVAR 28
68148: PUSH
68149: LD_INT 14
68151: ST_TO_ADDR
// hc_gallery =  ;
68152: LD_ADDR_OWVAR 33
68156: PUSH
68157: LD_STRING 
68159: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68160: LD_ADDR_OWVAR 35
68164: PUSH
68165: LD_INT 7
68167: NEG
68168: PPUSH
68169: LD_INT 7
68171: PPUSH
68172: CALL_OW 12
68176: ST_TO_ADDR
// animal := CreateHuman ;
68177: LD_ADDR_VAR 0 12
68181: PUSH
68182: CALL_OW 44
68186: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68187: LD_VAR 0 12
68191: PPUSH
68192: LD_VAR 0 8
68196: PPUSH
68197: LD_INT 0
68199: PPUSH
68200: CALL 70120 0 3
// end ;
68204: GO 68141
68206: POP
68207: POP
// if apemans then
68208: LD_VAR 0 3
68212: IFFALSE 68335
// for i = 1 to apemans do
68214: LD_ADDR_VAR 0 11
68218: PUSH
68219: DOUBLE
68220: LD_INT 1
68222: DEC
68223: ST_TO_ADDR
68224: LD_VAR 0 3
68228: PUSH
68229: FOR_TO
68230: IFFALSE 68333
// begin hc_class = class_apeman ;
68232: LD_ADDR_OWVAR 28
68236: PUSH
68237: LD_INT 12
68239: ST_TO_ADDR
// hc_gallery =  ;
68240: LD_ADDR_OWVAR 33
68244: PUSH
68245: LD_STRING 
68247: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
68248: LD_ADDR_OWVAR 35
68252: PUSH
68253: LD_INT 2
68255: NEG
68256: PPUSH
68257: LD_INT 2
68259: PPUSH
68260: CALL_OW 12
68264: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68265: LD_ADDR_OWVAR 31
68269: PUSH
68270: LD_INT 1
68272: PPUSH
68273: LD_INT 3
68275: PPUSH
68276: CALL_OW 12
68280: PUSH
68281: LD_INT 1
68283: PPUSH
68284: LD_INT 3
68286: PPUSH
68287: CALL_OW 12
68291: PUSH
68292: LD_INT 0
68294: PUSH
68295: LD_INT 0
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: LIST
68302: LIST
68303: ST_TO_ADDR
// animal := CreateHuman ;
68304: LD_ADDR_VAR 0 12
68308: PUSH
68309: CALL_OW 44
68313: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68314: LD_VAR 0 12
68318: PPUSH
68319: LD_VAR 0 8
68323: PPUSH
68324: LD_INT 0
68326: PPUSH
68327: CALL 70120 0 3
// end ;
68331: GO 68229
68333: POP
68334: POP
// if enchidnas then
68335: LD_VAR 0 4
68339: IFFALSE 68406
// for i = 1 to enchidnas do
68341: LD_ADDR_VAR 0 11
68345: PUSH
68346: DOUBLE
68347: LD_INT 1
68349: DEC
68350: ST_TO_ADDR
68351: LD_VAR 0 4
68355: PUSH
68356: FOR_TO
68357: IFFALSE 68404
// begin hc_class = 13 ;
68359: LD_ADDR_OWVAR 28
68363: PUSH
68364: LD_INT 13
68366: ST_TO_ADDR
// hc_gallery =  ;
68367: LD_ADDR_OWVAR 33
68371: PUSH
68372: LD_STRING 
68374: ST_TO_ADDR
// animal := CreateHuman ;
68375: LD_ADDR_VAR 0 12
68379: PUSH
68380: CALL_OW 44
68384: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68385: LD_VAR 0 12
68389: PPUSH
68390: LD_VAR 0 8
68394: PPUSH
68395: LD_INT 0
68397: PPUSH
68398: CALL 70120 0 3
// end ;
68402: GO 68356
68404: POP
68405: POP
// if fishes then
68406: LD_VAR 0 7
68410: IFFALSE 68477
// for i = 1 to fishes do
68412: LD_ADDR_VAR 0 11
68416: PUSH
68417: DOUBLE
68418: LD_INT 1
68420: DEC
68421: ST_TO_ADDR
68422: LD_VAR 0 7
68426: PUSH
68427: FOR_TO
68428: IFFALSE 68475
// begin hc_class = 20 ;
68430: LD_ADDR_OWVAR 28
68434: PUSH
68435: LD_INT 20
68437: ST_TO_ADDR
// hc_gallery =  ;
68438: LD_ADDR_OWVAR 33
68442: PUSH
68443: LD_STRING 
68445: ST_TO_ADDR
// animal := CreateHuman ;
68446: LD_ADDR_VAR 0 12
68450: PUSH
68451: CALL_OW 44
68455: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
68456: LD_VAR 0 12
68460: PPUSH
68461: LD_VAR 0 9
68465: PPUSH
68466: LD_INT 0
68468: PPUSH
68469: CALL 70120 0 3
// end ;
68473: GO 68427
68475: POP
68476: POP
// end ;
68477: LD_VAR 0 10
68481: RET
// export function WantHeal ( sci , unit ) ; begin
68482: LD_INT 0
68484: PPUSH
// if GetTaskList ( sci ) > 0 then
68485: LD_VAR 0 1
68489: PPUSH
68490: CALL_OW 437
68494: PUSH
68495: LD_INT 0
68497: GREATER
68498: IFFALSE 68570
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
68500: LD_VAR 0 1
68504: PPUSH
68505: CALL_OW 437
68509: PUSH
68510: LD_INT 1
68512: ARRAY
68513: PUSH
68514: LD_INT 1
68516: ARRAY
68517: PUSH
68518: LD_STRING l
68520: EQUAL
68521: IFFALSE 68548
68523: PUSH
68524: LD_VAR 0 1
68528: PPUSH
68529: CALL_OW 437
68533: PUSH
68534: LD_INT 1
68536: ARRAY
68537: PUSH
68538: LD_INT 4
68540: ARRAY
68541: PUSH
68542: LD_VAR 0 2
68546: EQUAL
68547: AND
68548: IFFALSE 68560
// result := true else
68550: LD_ADDR_VAR 0 3
68554: PUSH
68555: LD_INT 1
68557: ST_TO_ADDR
68558: GO 68568
// result := false ;
68560: LD_ADDR_VAR 0 3
68564: PUSH
68565: LD_INT 0
68567: ST_TO_ADDR
// end else
68568: GO 68578
// result := false ;
68570: LD_ADDR_VAR 0 3
68574: PUSH
68575: LD_INT 0
68577: ST_TO_ADDR
// end ;
68578: LD_VAR 0 3
68582: RET
// export function HealTarget ( sci ) ; begin
68583: LD_INT 0
68585: PPUSH
// if not sci then
68586: LD_VAR 0 1
68590: NOT
68591: IFFALSE 68595
// exit ;
68593: GO 68660
// result := 0 ;
68595: LD_ADDR_VAR 0 2
68599: PUSH
68600: LD_INT 0
68602: ST_TO_ADDR
// if GetTaskList ( sci ) then
68603: LD_VAR 0 1
68607: PPUSH
68608: CALL_OW 437
68612: IFFALSE 68660
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
68614: LD_VAR 0 1
68618: PPUSH
68619: CALL_OW 437
68623: PUSH
68624: LD_INT 1
68626: ARRAY
68627: PUSH
68628: LD_INT 1
68630: ARRAY
68631: PUSH
68632: LD_STRING l
68634: EQUAL
68635: IFFALSE 68660
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
68637: LD_ADDR_VAR 0 2
68641: PUSH
68642: LD_VAR 0 1
68646: PPUSH
68647: CALL_OW 437
68651: PUSH
68652: LD_INT 1
68654: ARRAY
68655: PUSH
68656: LD_INT 4
68658: ARRAY
68659: ST_TO_ADDR
// end ;
68660: LD_VAR 0 2
68664: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
68665: LD_INT 0
68667: PPUSH
68668: PPUSH
68669: PPUSH
68670: PPUSH
// if not base_units then
68671: LD_VAR 0 1
68675: NOT
68676: IFFALSE 68680
// exit ;
68678: GO 68767
// result := false ;
68680: LD_ADDR_VAR 0 2
68684: PUSH
68685: LD_INT 0
68687: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
68688: LD_ADDR_VAR 0 5
68692: PUSH
68693: LD_VAR 0 1
68697: PPUSH
68698: LD_INT 21
68700: PUSH
68701: LD_INT 3
68703: PUSH
68704: EMPTY
68705: LIST
68706: LIST
68707: PPUSH
68708: CALL_OW 72
68712: ST_TO_ADDR
// if not tmp then
68713: LD_VAR 0 5
68717: NOT
68718: IFFALSE 68722
// exit ;
68720: GO 68767
// for i in tmp do
68722: LD_ADDR_VAR 0 3
68726: PUSH
68727: LD_VAR 0 5
68731: PUSH
68732: FOR_IN
68733: IFFALSE 68765
// begin result := EnemyInRange ( i , 22 ) ;
68735: LD_ADDR_VAR 0 2
68739: PUSH
68740: LD_VAR 0 3
68744: PPUSH
68745: LD_INT 22
68747: PPUSH
68748: CALL 66192 0 2
68752: ST_TO_ADDR
// if result then
68753: LD_VAR 0 2
68757: IFFALSE 68763
// exit ;
68759: POP
68760: POP
68761: GO 68767
// end ;
68763: GO 68732
68765: POP
68766: POP
// end ;
68767: LD_VAR 0 2
68771: RET
// export function FilterByTag ( units , tag ) ; begin
68772: LD_INT 0
68774: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
68775: LD_ADDR_VAR 0 3
68779: PUSH
68780: LD_VAR 0 1
68784: PPUSH
68785: LD_INT 120
68787: PUSH
68788: LD_VAR 0 2
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: PPUSH
68797: CALL_OW 72
68801: ST_TO_ADDR
// end ;
68802: LD_VAR 0 3
68806: RET
// export function IsDriver ( un ) ; begin
68807: LD_INT 0
68809: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
68810: LD_ADDR_VAR 0 2
68814: PUSH
68815: LD_VAR 0 1
68819: PUSH
68820: LD_INT 55
68822: PUSH
68823: EMPTY
68824: LIST
68825: PPUSH
68826: CALL_OW 69
68830: IN
68831: ST_TO_ADDR
// end ;
68832: LD_VAR 0 2
68836: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
68837: LD_INT 0
68839: PPUSH
68840: PPUSH
// list := [ ] ;
68841: LD_ADDR_VAR 0 5
68845: PUSH
68846: EMPTY
68847: ST_TO_ADDR
// case d of 0 :
68848: LD_VAR 0 3
68852: PUSH
68853: LD_INT 0
68855: DOUBLE
68856: EQUAL
68857: IFTRUE 68861
68859: GO 68994
68861: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
68862: LD_ADDR_VAR 0 5
68866: PUSH
68867: LD_VAR 0 1
68871: PUSH
68872: LD_INT 4
68874: MINUS
68875: PUSH
68876: LD_VAR 0 2
68880: PUSH
68881: LD_INT 4
68883: MINUS
68884: PUSH
68885: LD_INT 2
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: LIST
68892: PUSH
68893: LD_VAR 0 1
68897: PUSH
68898: LD_INT 3
68900: MINUS
68901: PUSH
68902: LD_VAR 0 2
68906: PUSH
68907: LD_INT 1
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: LIST
68914: PUSH
68915: LD_VAR 0 1
68919: PUSH
68920: LD_INT 4
68922: PLUS
68923: PUSH
68924: LD_VAR 0 2
68928: PUSH
68929: LD_INT 4
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: LIST
68936: PUSH
68937: LD_VAR 0 1
68941: PUSH
68942: LD_INT 3
68944: PLUS
68945: PUSH
68946: LD_VAR 0 2
68950: PUSH
68951: LD_INT 3
68953: PLUS
68954: PUSH
68955: LD_INT 5
68957: PUSH
68958: EMPTY
68959: LIST
68960: LIST
68961: LIST
68962: PUSH
68963: LD_VAR 0 1
68967: PUSH
68968: LD_VAR 0 2
68972: PUSH
68973: LD_INT 4
68975: PLUS
68976: PUSH
68977: LD_INT 0
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: LIST
68984: PUSH
68985: EMPTY
68986: LIST
68987: LIST
68988: LIST
68989: LIST
68990: LIST
68991: ST_TO_ADDR
// end ; 1 :
68992: GO 69692
68994: LD_INT 1
68996: DOUBLE
68997: EQUAL
68998: IFTRUE 69002
69000: GO 69135
69002: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69003: LD_ADDR_VAR 0 5
69007: PUSH
69008: LD_VAR 0 1
69012: PUSH
69013: LD_VAR 0 2
69017: PUSH
69018: LD_INT 4
69020: MINUS
69021: PUSH
69022: LD_INT 3
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: LIST
69029: PUSH
69030: LD_VAR 0 1
69034: PUSH
69035: LD_INT 3
69037: MINUS
69038: PUSH
69039: LD_VAR 0 2
69043: PUSH
69044: LD_INT 3
69046: MINUS
69047: PUSH
69048: LD_INT 2
69050: PUSH
69051: EMPTY
69052: LIST
69053: LIST
69054: LIST
69055: PUSH
69056: LD_VAR 0 1
69060: PUSH
69061: LD_INT 4
69063: MINUS
69064: PUSH
69065: LD_VAR 0 2
69069: PUSH
69070: LD_INT 1
69072: PUSH
69073: EMPTY
69074: LIST
69075: LIST
69076: LIST
69077: PUSH
69078: LD_VAR 0 1
69082: PUSH
69083: LD_VAR 0 2
69087: PUSH
69088: LD_INT 3
69090: PLUS
69091: PUSH
69092: LD_INT 0
69094: PUSH
69095: EMPTY
69096: LIST
69097: LIST
69098: LIST
69099: PUSH
69100: LD_VAR 0 1
69104: PUSH
69105: LD_INT 4
69107: PLUS
69108: PUSH
69109: LD_VAR 0 2
69113: PUSH
69114: LD_INT 4
69116: PLUS
69117: PUSH
69118: LD_INT 5
69120: PUSH
69121: EMPTY
69122: LIST
69123: LIST
69124: LIST
69125: PUSH
69126: EMPTY
69127: LIST
69128: LIST
69129: LIST
69130: LIST
69131: LIST
69132: ST_TO_ADDR
// end ; 2 :
69133: GO 69692
69135: LD_INT 2
69137: DOUBLE
69138: EQUAL
69139: IFTRUE 69143
69141: GO 69272
69143: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69144: LD_ADDR_VAR 0 5
69148: PUSH
69149: LD_VAR 0 1
69153: PUSH
69154: LD_VAR 0 2
69158: PUSH
69159: LD_INT 3
69161: MINUS
69162: PUSH
69163: LD_INT 3
69165: PUSH
69166: EMPTY
69167: LIST
69168: LIST
69169: LIST
69170: PUSH
69171: LD_VAR 0 1
69175: PUSH
69176: LD_INT 4
69178: PLUS
69179: PUSH
69180: LD_VAR 0 2
69184: PUSH
69185: LD_INT 4
69187: PUSH
69188: EMPTY
69189: LIST
69190: LIST
69191: LIST
69192: PUSH
69193: LD_VAR 0 1
69197: PUSH
69198: LD_VAR 0 2
69202: PUSH
69203: LD_INT 4
69205: PLUS
69206: PUSH
69207: LD_INT 0
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: LIST
69214: PUSH
69215: LD_VAR 0 1
69219: PUSH
69220: LD_INT 3
69222: MINUS
69223: PUSH
69224: LD_VAR 0 2
69228: PUSH
69229: LD_INT 1
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: LIST
69236: PUSH
69237: LD_VAR 0 1
69241: PUSH
69242: LD_INT 4
69244: MINUS
69245: PUSH
69246: LD_VAR 0 2
69250: PUSH
69251: LD_INT 4
69253: MINUS
69254: PUSH
69255: LD_INT 2
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: LIST
69262: PUSH
69263: EMPTY
69264: LIST
69265: LIST
69266: LIST
69267: LIST
69268: LIST
69269: ST_TO_ADDR
// end ; 3 :
69270: GO 69692
69272: LD_INT 3
69274: DOUBLE
69275: EQUAL
69276: IFTRUE 69280
69278: GO 69413
69280: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69281: LD_ADDR_VAR 0 5
69285: PUSH
69286: LD_VAR 0 1
69290: PUSH
69291: LD_INT 3
69293: PLUS
69294: PUSH
69295: LD_VAR 0 2
69299: PUSH
69300: LD_INT 4
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: LIST
69307: PUSH
69308: LD_VAR 0 1
69312: PUSH
69313: LD_INT 4
69315: PLUS
69316: PUSH
69317: LD_VAR 0 2
69321: PUSH
69322: LD_INT 4
69324: PLUS
69325: PUSH
69326: LD_INT 5
69328: PUSH
69329: EMPTY
69330: LIST
69331: LIST
69332: LIST
69333: PUSH
69334: LD_VAR 0 1
69338: PUSH
69339: LD_INT 4
69341: MINUS
69342: PUSH
69343: LD_VAR 0 2
69347: PUSH
69348: LD_INT 1
69350: PUSH
69351: EMPTY
69352: LIST
69353: LIST
69354: LIST
69355: PUSH
69356: LD_VAR 0 1
69360: PUSH
69361: LD_VAR 0 2
69365: PUSH
69366: LD_INT 4
69368: MINUS
69369: PUSH
69370: LD_INT 3
69372: PUSH
69373: EMPTY
69374: LIST
69375: LIST
69376: LIST
69377: PUSH
69378: LD_VAR 0 1
69382: PUSH
69383: LD_INT 3
69385: MINUS
69386: PUSH
69387: LD_VAR 0 2
69391: PUSH
69392: LD_INT 3
69394: MINUS
69395: PUSH
69396: LD_INT 2
69398: PUSH
69399: EMPTY
69400: LIST
69401: LIST
69402: LIST
69403: PUSH
69404: EMPTY
69405: LIST
69406: LIST
69407: LIST
69408: LIST
69409: LIST
69410: ST_TO_ADDR
// end ; 4 :
69411: GO 69692
69413: LD_INT 4
69415: DOUBLE
69416: EQUAL
69417: IFTRUE 69421
69419: GO 69554
69421: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
69422: LD_ADDR_VAR 0 5
69426: PUSH
69427: LD_VAR 0 1
69431: PUSH
69432: LD_VAR 0 2
69436: PUSH
69437: LD_INT 4
69439: PLUS
69440: PUSH
69441: LD_INT 0
69443: PUSH
69444: EMPTY
69445: LIST
69446: LIST
69447: LIST
69448: PUSH
69449: LD_VAR 0 1
69453: PUSH
69454: LD_INT 3
69456: PLUS
69457: PUSH
69458: LD_VAR 0 2
69462: PUSH
69463: LD_INT 3
69465: PLUS
69466: PUSH
69467: LD_INT 5
69469: PUSH
69470: EMPTY
69471: LIST
69472: LIST
69473: LIST
69474: PUSH
69475: LD_VAR 0 1
69479: PUSH
69480: LD_INT 4
69482: PLUS
69483: PUSH
69484: LD_VAR 0 2
69488: PUSH
69489: LD_INT 4
69491: PUSH
69492: EMPTY
69493: LIST
69494: LIST
69495: LIST
69496: PUSH
69497: LD_VAR 0 1
69501: PUSH
69502: LD_VAR 0 2
69506: PUSH
69507: LD_INT 3
69509: MINUS
69510: PUSH
69511: LD_INT 3
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: LIST
69518: PUSH
69519: LD_VAR 0 1
69523: PUSH
69524: LD_INT 4
69526: MINUS
69527: PUSH
69528: LD_VAR 0 2
69532: PUSH
69533: LD_INT 4
69535: MINUS
69536: PUSH
69537: LD_INT 2
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: LIST
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: ST_TO_ADDR
// end ; 5 :
69552: GO 69692
69554: LD_INT 5
69556: DOUBLE
69557: EQUAL
69558: IFTRUE 69562
69560: GO 69691
69562: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
69563: LD_ADDR_VAR 0 5
69567: PUSH
69568: LD_VAR 0 1
69572: PUSH
69573: LD_INT 4
69575: MINUS
69576: PUSH
69577: LD_VAR 0 2
69581: PUSH
69582: LD_INT 1
69584: PUSH
69585: EMPTY
69586: LIST
69587: LIST
69588: LIST
69589: PUSH
69590: LD_VAR 0 1
69594: PUSH
69595: LD_VAR 0 2
69599: PUSH
69600: LD_INT 4
69602: MINUS
69603: PUSH
69604: LD_INT 3
69606: PUSH
69607: EMPTY
69608: LIST
69609: LIST
69610: LIST
69611: PUSH
69612: LD_VAR 0 1
69616: PUSH
69617: LD_INT 4
69619: PLUS
69620: PUSH
69621: LD_VAR 0 2
69625: PUSH
69626: LD_INT 4
69628: PLUS
69629: PUSH
69630: LD_INT 5
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: LIST
69637: PUSH
69638: LD_VAR 0 1
69642: PUSH
69643: LD_INT 3
69645: PLUS
69646: PUSH
69647: LD_VAR 0 2
69651: PUSH
69652: LD_INT 4
69654: PUSH
69655: EMPTY
69656: LIST
69657: LIST
69658: LIST
69659: PUSH
69660: LD_VAR 0 1
69664: PUSH
69665: LD_VAR 0 2
69669: PUSH
69670: LD_INT 3
69672: PLUS
69673: PUSH
69674: LD_INT 0
69676: PUSH
69677: EMPTY
69678: LIST
69679: LIST
69680: LIST
69681: PUSH
69682: EMPTY
69683: LIST
69684: LIST
69685: LIST
69686: LIST
69687: LIST
69688: ST_TO_ADDR
// end ; end ;
69689: GO 69692
69691: POP
// result := list ;
69692: LD_ADDR_VAR 0 4
69696: PUSH
69697: LD_VAR 0 5
69701: ST_TO_ADDR
// end ;
69702: LD_VAR 0 4
69706: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
69707: LD_INT 0
69709: PPUSH
69710: PPUSH
69711: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
69712: LD_VAR 0 1
69716: NOT
69717: IFTRUE 69745
69719: PUSH
69720: LD_VAR 0 2
69724: PUSH
69725: LD_INT 1
69727: PUSH
69728: LD_INT 2
69730: PUSH
69731: LD_INT 3
69733: PUSH
69734: LD_INT 4
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: LIST
69741: LIST
69742: IN
69743: NOT
69744: OR
69745: IFFALSE 69749
// exit ;
69747: GO 69832
// tmp := [ ] ;
69749: LD_ADDR_VAR 0 5
69753: PUSH
69754: EMPTY
69755: ST_TO_ADDR
// for i in units do
69756: LD_ADDR_VAR 0 4
69760: PUSH
69761: LD_VAR 0 1
69765: PUSH
69766: FOR_IN
69767: IFFALSE 69801
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
69769: LD_ADDR_VAR 0 5
69773: PUSH
69774: LD_VAR 0 5
69778: PPUSH
69779: LD_VAR 0 4
69783: PPUSH
69784: LD_VAR 0 2
69788: PPUSH
69789: CALL_OW 259
69793: PPUSH
69794: CALL 71227 0 2
69798: ST_TO_ADDR
69799: GO 69766
69801: POP
69802: POP
// if not tmp then
69803: LD_VAR 0 5
69807: NOT
69808: IFFALSE 69812
// exit ;
69810: GO 69832
// result := SortListByListDesc ( units , tmp ) ;
69812: LD_ADDR_VAR 0 3
69816: PUSH
69817: LD_VAR 0 1
69821: PPUSH
69822: LD_VAR 0 5
69826: PPUSH
69827: CALL_OW 77
69831: ST_TO_ADDR
// end ;
69832: LD_VAR 0 3
69836: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
69837: LD_INT 0
69839: PPUSH
69840: PPUSH
69841: PPUSH
// result := false ;
69842: LD_ADDR_VAR 0 3
69846: PUSH
69847: LD_INT 0
69849: ST_TO_ADDR
// if not building then
69850: LD_VAR 0 2
69854: NOT
69855: IFFALSE 69859
// exit ;
69857: GO 70003
// x := GetX ( building ) ;
69859: LD_ADDR_VAR 0 4
69863: PUSH
69864: LD_VAR 0 2
69868: PPUSH
69869: CALL_OW 250
69873: ST_TO_ADDR
// y := GetY ( building ) ;
69874: LD_ADDR_VAR 0 5
69878: PUSH
69879: LD_VAR 0 2
69883: PPUSH
69884: CALL_OW 251
69888: ST_TO_ADDR
// if not x or not y then
69889: LD_VAR 0 4
69893: NOT
69894: IFTRUE 69903
69896: PUSH
69897: LD_VAR 0 5
69901: NOT
69902: OR
69903: IFFALSE 69907
// exit ;
69905: GO 70003
// if GetTaskList ( unit ) then
69907: LD_VAR 0 1
69911: PPUSH
69912: CALL_OW 437
69916: IFFALSE 70003
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69918: LD_STRING e
69920: PUSH
69921: LD_VAR 0 1
69925: PPUSH
69926: CALL_OW 437
69930: PUSH
69931: LD_INT 1
69933: ARRAY
69934: PUSH
69935: LD_INT 1
69937: ARRAY
69938: EQUAL
69939: IFFALSE 69966
69941: PUSH
69942: LD_VAR 0 4
69946: PUSH
69947: LD_VAR 0 1
69951: PPUSH
69952: CALL_OW 437
69956: PUSH
69957: LD_INT 1
69959: ARRAY
69960: PUSH
69961: LD_INT 2
69963: ARRAY
69964: EQUAL
69965: AND
69966: IFFALSE 69993
69968: PUSH
69969: LD_VAR 0 5
69973: PUSH
69974: LD_VAR 0 1
69978: PPUSH
69979: CALL_OW 437
69983: PUSH
69984: LD_INT 1
69986: ARRAY
69987: PUSH
69988: LD_INT 3
69990: ARRAY
69991: EQUAL
69992: AND
69993: IFFALSE 70003
// result := true end ;
69995: LD_ADDR_VAR 0 3
69999: PUSH
70000: LD_INT 1
70002: ST_TO_ADDR
// end ;
70003: LD_VAR 0 3
70007: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
70008: LD_INT 0
70010: PPUSH
// result := false ;
70011: LD_ADDR_VAR 0 4
70015: PUSH
70016: LD_INT 0
70018: ST_TO_ADDR
// if GetTaskList ( unit ) then
70019: LD_VAR 0 1
70023: PPUSH
70024: CALL_OW 437
70028: IFFALSE 70115
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70030: LD_STRING M
70032: PUSH
70033: LD_VAR 0 1
70037: PPUSH
70038: CALL_OW 437
70042: PUSH
70043: LD_INT 1
70045: ARRAY
70046: PUSH
70047: LD_INT 1
70049: ARRAY
70050: EQUAL
70051: IFFALSE 70078
70053: PUSH
70054: LD_VAR 0 2
70058: PUSH
70059: LD_VAR 0 1
70063: PPUSH
70064: CALL_OW 437
70068: PUSH
70069: LD_INT 1
70071: ARRAY
70072: PUSH
70073: LD_INT 2
70075: ARRAY
70076: EQUAL
70077: AND
70078: IFFALSE 70105
70080: PUSH
70081: LD_VAR 0 3
70085: PUSH
70086: LD_VAR 0 1
70090: PPUSH
70091: CALL_OW 437
70095: PUSH
70096: LD_INT 1
70098: ARRAY
70099: PUSH
70100: LD_INT 3
70102: ARRAY
70103: EQUAL
70104: AND
70105: IFFALSE 70115
// result := true ;
70107: LD_ADDR_VAR 0 4
70111: PUSH
70112: LD_INT 1
70114: ST_TO_ADDR
// end ; end ;
70115: LD_VAR 0 4
70119: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70120: LD_INT 0
70122: PPUSH
70123: PPUSH
70124: PPUSH
70125: PPUSH
// if not unit or not area then
70126: LD_VAR 0 1
70130: NOT
70131: IFTRUE 70140
70133: PUSH
70134: LD_VAR 0 2
70138: NOT
70139: OR
70140: IFFALSE 70144
// exit ;
70142: GO 70320
// tmp := AreaToList ( area , i ) ;
70144: LD_ADDR_VAR 0 6
70148: PUSH
70149: LD_VAR 0 2
70153: PPUSH
70154: LD_VAR 0 5
70158: PPUSH
70159: CALL_OW 517
70163: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70164: LD_ADDR_VAR 0 5
70168: PUSH
70169: DOUBLE
70170: LD_INT 1
70172: DEC
70173: ST_TO_ADDR
70174: LD_VAR 0 6
70178: PUSH
70179: LD_INT 1
70181: ARRAY
70182: PUSH
70183: FOR_TO
70184: IFFALSE 70318
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70186: LD_ADDR_VAR 0 7
70190: PUSH
70191: LD_VAR 0 6
70195: PUSH
70196: LD_INT 1
70198: ARRAY
70199: PUSH
70200: LD_VAR 0 5
70204: ARRAY
70205: PUSH
70206: LD_VAR 0 6
70210: PUSH
70211: LD_INT 2
70213: ARRAY
70214: PUSH
70215: LD_VAR 0 5
70219: ARRAY
70220: PUSH
70221: EMPTY
70222: LIST
70223: LIST
70224: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
70225: LD_INT 92
70227: PUSH
70228: LD_VAR 0 7
70232: PUSH
70233: LD_INT 1
70235: ARRAY
70236: PUSH
70237: LD_VAR 0 7
70241: PUSH
70242: LD_INT 2
70244: ARRAY
70245: PUSH
70246: LD_INT 2
70248: PUSH
70249: EMPTY
70250: LIST
70251: LIST
70252: LIST
70253: LIST
70254: PPUSH
70255: CALL_OW 69
70259: PUSH
70260: LD_INT 0
70262: EQUAL
70263: IFFALSE 70316
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70265: LD_VAR 0 1
70269: PPUSH
70270: LD_VAR 0 7
70274: PUSH
70275: LD_INT 1
70277: ARRAY
70278: PPUSH
70279: LD_VAR 0 7
70283: PUSH
70284: LD_INT 2
70286: ARRAY
70287: PPUSH
70288: LD_VAR 0 3
70292: PPUSH
70293: CALL_OW 48
// result := IsPlaced ( unit ) ;
70297: LD_ADDR_VAR 0 4
70301: PUSH
70302: LD_VAR 0 1
70306: PPUSH
70307: CALL_OW 305
70311: ST_TO_ADDR
// exit ;
70312: POP
70313: POP
70314: GO 70320
// end ; end ;
70316: GO 70183
70318: POP
70319: POP
// end ;
70320: LD_VAR 0 4
70324: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70325: LD_INT 0
70327: PPUSH
70328: PPUSH
70329: PPUSH
// if not side or side > 8 then
70330: LD_VAR 0 1
70334: NOT
70335: IFTRUE 70347
70337: PUSH
70338: LD_VAR 0 1
70342: PUSH
70343: LD_INT 8
70345: GREATER
70346: OR
70347: IFFALSE 70351
// exit ;
70349: GO 70538
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70351: LD_ADDR_VAR 0 4
70355: PUSH
70356: LD_INT 22
70358: PUSH
70359: LD_VAR 0 1
70363: PUSH
70364: EMPTY
70365: LIST
70366: LIST
70367: PUSH
70368: LD_INT 21
70370: PUSH
70371: LD_INT 3
70373: PUSH
70374: EMPTY
70375: LIST
70376: LIST
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: PPUSH
70382: CALL_OW 69
70386: ST_TO_ADDR
// if not tmp then
70387: LD_VAR 0 4
70391: NOT
70392: IFFALSE 70396
// exit ;
70394: GO 70538
// enable_addtolog := true ;
70396: LD_ADDR_OWVAR 81
70400: PUSH
70401: LD_INT 1
70403: ST_TO_ADDR
// AddToLog ( [ ) ;
70404: LD_STRING [
70406: PPUSH
70407: CALL_OW 561
// for i in tmp do
70411: LD_ADDR_VAR 0 3
70415: PUSH
70416: LD_VAR 0 4
70420: PUSH
70421: FOR_IN
70422: IFFALSE 70529
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70424: LD_STRING [
70426: PUSH
70427: LD_VAR 0 3
70431: PPUSH
70432: CALL_OW 266
70436: STR
70437: PUSH
70438: LD_STRING , 
70440: STR
70441: PUSH
70442: LD_VAR 0 3
70446: PPUSH
70447: CALL_OW 250
70451: STR
70452: PUSH
70453: LD_STRING , 
70455: STR
70456: PUSH
70457: LD_VAR 0 3
70461: PPUSH
70462: CALL_OW 251
70466: STR
70467: PUSH
70468: LD_STRING , 
70470: STR
70471: PUSH
70472: LD_VAR 0 3
70476: PPUSH
70477: CALL_OW 254
70481: STR
70482: PUSH
70483: LD_STRING , 
70485: STR
70486: PUSH
70487: LD_VAR 0 3
70491: PPUSH
70492: LD_INT 1
70494: PPUSH
70495: CALL_OW 268
70499: STR
70500: PUSH
70501: LD_STRING , 
70503: STR
70504: PUSH
70505: LD_VAR 0 3
70509: PPUSH
70510: LD_INT 2
70512: PPUSH
70513: CALL_OW 268
70517: STR
70518: PUSH
70519: LD_STRING ],
70521: STR
70522: PPUSH
70523: CALL_OW 561
// end ;
70527: GO 70421
70529: POP
70530: POP
// AddToLog ( ]; ) ;
70531: LD_STRING ];
70533: PPUSH
70534: CALL_OW 561
// end ;
70538: LD_VAR 0 2
70542: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
70543: LD_INT 0
70545: PPUSH
70546: PPUSH
70547: PPUSH
70548: PPUSH
70549: PPUSH
// if not area or not rate or not max then
70550: LD_VAR 0 1
70554: NOT
70555: IFTRUE 70564
70557: PUSH
70558: LD_VAR 0 2
70562: NOT
70563: OR
70564: IFTRUE 70573
70566: PUSH
70567: LD_VAR 0 4
70571: NOT
70572: OR
70573: IFFALSE 70577
// exit ;
70575: GO 70766
// while 1 do
70577: LD_INT 1
70579: IFFALSE 70766
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
70581: LD_ADDR_VAR 0 9
70585: PUSH
70586: LD_VAR 0 1
70590: PPUSH
70591: LD_INT 1
70593: PPUSH
70594: CALL_OW 287
70598: PUSH
70599: LD_INT 10
70601: MUL
70602: ST_TO_ADDR
// r := rate / 10 ;
70603: LD_ADDR_VAR 0 7
70607: PUSH
70608: LD_VAR 0 2
70612: PUSH
70613: LD_INT 10
70615: DIVREAL
70616: ST_TO_ADDR
// time := 1 1$00 ;
70617: LD_ADDR_VAR 0 8
70621: PUSH
70622: LD_INT 2100
70624: ST_TO_ADDR
// if amount < min then
70625: LD_VAR 0 9
70629: PUSH
70630: LD_VAR 0 3
70634: LESS
70635: IFFALSE 70653
// r := r * 2 else
70637: LD_ADDR_VAR 0 7
70641: PUSH
70642: LD_VAR 0 7
70646: PUSH
70647: LD_INT 2
70649: MUL
70650: ST_TO_ADDR
70651: GO 70679
// if amount > max then
70653: LD_VAR 0 9
70657: PUSH
70658: LD_VAR 0 4
70662: GREATER
70663: IFFALSE 70679
// r := r / 2 ;
70665: LD_ADDR_VAR 0 7
70669: PUSH
70670: LD_VAR 0 7
70674: PUSH
70675: LD_INT 2
70677: DIVREAL
70678: ST_TO_ADDR
// time := time / r ;
70679: LD_ADDR_VAR 0 8
70683: PUSH
70684: LD_VAR 0 8
70688: PUSH
70689: LD_VAR 0 7
70693: DIVREAL
70694: ST_TO_ADDR
// if time < 0 then
70695: LD_VAR 0 8
70699: PUSH
70700: LD_INT 0
70702: LESS
70703: IFFALSE 70720
// time := time * - 1 ;
70705: LD_ADDR_VAR 0 8
70709: PUSH
70710: LD_VAR 0 8
70714: PUSH
70715: LD_INT 1
70717: NEG
70718: MUL
70719: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
70720: LD_VAR 0 8
70724: PUSH
70725: LD_INT 35
70727: PPUSH
70728: LD_INT 875
70730: PPUSH
70731: CALL_OW 12
70735: PLUS
70736: PPUSH
70737: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
70741: LD_INT 1
70743: PPUSH
70744: LD_INT 5
70746: PPUSH
70747: CALL_OW 12
70751: PPUSH
70752: LD_VAR 0 1
70756: PPUSH
70757: LD_INT 1
70759: PPUSH
70760: CALL_OW 55
// end ;
70764: GO 70577
// end ;
70766: LD_VAR 0 5
70770: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
70771: LD_INT 0
70773: PPUSH
70774: PPUSH
70775: PPUSH
70776: PPUSH
70777: PPUSH
70778: PPUSH
70779: PPUSH
70780: PPUSH
// if not turrets or not factories then
70781: LD_VAR 0 1
70785: NOT
70786: IFTRUE 70795
70788: PUSH
70789: LD_VAR 0 2
70793: NOT
70794: OR
70795: IFFALSE 70799
// exit ;
70797: GO 71106
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
70799: LD_ADDR_VAR 0 10
70803: PUSH
70804: LD_INT 5
70806: PUSH
70807: LD_INT 6
70809: PUSH
70810: EMPTY
70811: LIST
70812: LIST
70813: PUSH
70814: LD_INT 2
70816: PUSH
70817: LD_INT 4
70819: PUSH
70820: EMPTY
70821: LIST
70822: LIST
70823: PUSH
70824: LD_INT 3
70826: PUSH
70827: LD_INT 5
70829: PUSH
70830: EMPTY
70831: LIST
70832: LIST
70833: PUSH
70834: EMPTY
70835: LIST
70836: LIST
70837: LIST
70838: PUSH
70839: LD_INT 24
70841: PUSH
70842: LD_INT 25
70844: PUSH
70845: EMPTY
70846: LIST
70847: LIST
70848: PUSH
70849: LD_INT 23
70851: PUSH
70852: LD_INT 27
70854: PUSH
70855: EMPTY
70856: LIST
70857: LIST
70858: PUSH
70859: EMPTY
70860: LIST
70861: LIST
70862: PUSH
70863: LD_INT 42
70865: PUSH
70866: LD_INT 43
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: PUSH
70873: LD_INT 44
70875: PUSH
70876: LD_INT 46
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: PUSH
70883: LD_INT 45
70885: PUSH
70886: LD_INT 47
70888: PUSH
70889: EMPTY
70890: LIST
70891: LIST
70892: PUSH
70893: EMPTY
70894: LIST
70895: LIST
70896: LIST
70897: PUSH
70898: EMPTY
70899: LIST
70900: LIST
70901: LIST
70902: ST_TO_ADDR
// result := [ ] ;
70903: LD_ADDR_VAR 0 3
70907: PUSH
70908: EMPTY
70909: ST_TO_ADDR
// for i in turrets do
70910: LD_ADDR_VAR 0 4
70914: PUSH
70915: LD_VAR 0 1
70919: PUSH
70920: FOR_IN
70921: IFFALSE 71104
// begin nat := GetNation ( i ) ;
70923: LD_ADDR_VAR 0 7
70927: PUSH
70928: LD_VAR 0 4
70932: PPUSH
70933: CALL_OW 248
70937: ST_TO_ADDR
// weapon := 0 ;
70938: LD_ADDR_VAR 0 8
70942: PUSH
70943: LD_INT 0
70945: ST_TO_ADDR
// if not nat then
70946: LD_VAR 0 7
70950: NOT
70951: IFFALSE 70955
// continue ;
70953: GO 70920
// for j in list [ nat ] do
70955: LD_ADDR_VAR 0 5
70959: PUSH
70960: LD_VAR 0 10
70964: PUSH
70965: LD_VAR 0 7
70969: ARRAY
70970: PUSH
70971: FOR_IN
70972: IFFALSE 71013
// if GetBWeapon ( i ) = j [ 1 ] then
70974: LD_VAR 0 4
70978: PPUSH
70979: CALL_OW 269
70983: PUSH
70984: LD_VAR 0 5
70988: PUSH
70989: LD_INT 1
70991: ARRAY
70992: EQUAL
70993: IFFALSE 71011
// begin weapon := j [ 2 ] ;
70995: LD_ADDR_VAR 0 8
70999: PUSH
71000: LD_VAR 0 5
71004: PUSH
71005: LD_INT 2
71007: ARRAY
71008: ST_TO_ADDR
// break ;
71009: GO 71013
// end ;
71011: GO 70971
71013: POP
71014: POP
// if not weapon then
71015: LD_VAR 0 8
71019: NOT
71020: IFFALSE 71024
// continue ;
71022: GO 70920
// for k in factories do
71024: LD_ADDR_VAR 0 6
71028: PUSH
71029: LD_VAR 0 2
71033: PUSH
71034: FOR_IN
71035: IFFALSE 71100
// begin weapons := AvailableWeaponList ( k ) ;
71037: LD_ADDR_VAR 0 9
71041: PUSH
71042: LD_VAR 0 6
71046: PPUSH
71047: CALL_OW 478
71051: ST_TO_ADDR
// if not weapons then
71052: LD_VAR 0 9
71056: NOT
71057: IFFALSE 71061
// continue ;
71059: GO 71034
// if weapon in weapons then
71061: LD_VAR 0 8
71065: PUSH
71066: LD_VAR 0 9
71070: IN
71071: IFFALSE 71098
// begin result := [ i , weapon ] ;
71073: LD_ADDR_VAR 0 3
71077: PUSH
71078: LD_VAR 0 4
71082: PUSH
71083: LD_VAR 0 8
71087: PUSH
71088: EMPTY
71089: LIST
71090: LIST
71091: ST_TO_ADDR
// exit ;
71092: POP
71093: POP
71094: POP
71095: POP
71096: GO 71106
// end ; end ;
71098: GO 71034
71100: POP
71101: POP
// end ;
71102: GO 70920
71104: POP
71105: POP
// end ;
71106: LD_VAR 0 3
71110: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71111: LD_INT 0
71113: PPUSH
// if not side or side > 8 then
71114: LD_VAR 0 3
71118: NOT
71119: IFTRUE 71131
71121: PUSH
71122: LD_VAR 0 3
71126: PUSH
71127: LD_INT 8
71129: GREATER
71130: OR
71131: IFFALSE 71135
// exit ;
71133: GO 71194
// if not range then
71135: LD_VAR 0 4
71139: NOT
71140: IFFALSE 71151
// range := - 12 ;
71142: LD_ADDR_VAR 0 4
71146: PUSH
71147: LD_INT 12
71149: NEG
71150: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71151: LD_VAR 0 1
71155: PPUSH
71156: LD_VAR 0 2
71160: PPUSH
71161: LD_VAR 0 3
71165: PPUSH
71166: LD_VAR 0 4
71170: PPUSH
71171: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71175: LD_VAR 0 1
71179: PPUSH
71180: LD_VAR 0 2
71184: PPUSH
71185: LD_VAR 0 3
71189: PPUSH
71190: CALL_OW 331
// end ;
71194: LD_VAR 0 5
71198: RET
// export function Video ( mode ) ; begin
71199: LD_INT 0
71201: PPUSH
// ingame_video = mode ;
71202: LD_ADDR_OWVAR 52
71206: PUSH
71207: LD_VAR 0 1
71211: ST_TO_ADDR
// interface_hidden = mode ;
71212: LD_ADDR_OWVAR 54
71216: PUSH
71217: LD_VAR 0 1
71221: ST_TO_ADDR
// end ;
71222: LD_VAR 0 2
71226: RET
// export function Join ( array , element ) ; begin
71227: LD_INT 0
71229: PPUSH
// result := Replace ( array , array + 1 , element ) ;
71230: LD_ADDR_VAR 0 3
71234: PUSH
71235: LD_VAR 0 1
71239: PPUSH
71240: LD_VAR 0 1
71244: PUSH
71245: LD_INT 1
71247: PLUS
71248: PPUSH
71249: LD_VAR 0 2
71253: PPUSH
71254: CALL_OW 1
71258: ST_TO_ADDR
// end ;
71259: LD_VAR 0 3
71263: RET
// export function JoinUnion ( array , element ) ; begin
71264: LD_INT 0
71266: PPUSH
// result := array union element ;
71267: LD_ADDR_VAR 0 3
71271: PUSH
71272: LD_VAR 0 1
71276: PUSH
71277: LD_VAR 0 2
71281: UNION
71282: ST_TO_ADDR
// end ;
71283: LD_VAR 0 3
71287: RET
// export function GetBehemoths ( side ) ; begin
71288: LD_INT 0
71290: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
71291: LD_ADDR_VAR 0 2
71295: PUSH
71296: LD_INT 22
71298: PUSH
71299: LD_VAR 0 1
71303: PUSH
71304: EMPTY
71305: LIST
71306: LIST
71307: PUSH
71308: LD_INT 31
71310: PUSH
71311: LD_INT 25
71313: PUSH
71314: EMPTY
71315: LIST
71316: LIST
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: PPUSH
71322: CALL_OW 69
71326: ST_TO_ADDR
// end ;
71327: LD_VAR 0 2
71331: RET
// export function Shuffle ( array ) ; var i , index ; begin
71332: LD_INT 0
71334: PPUSH
71335: PPUSH
71336: PPUSH
// result := [ ] ;
71337: LD_ADDR_VAR 0 2
71341: PUSH
71342: EMPTY
71343: ST_TO_ADDR
// if not array then
71344: LD_VAR 0 1
71348: NOT
71349: IFFALSE 71353
// exit ;
71351: GO 71452
// Randomize ;
71353: CALL_OW 10
// for i = array downto 1 do
71357: LD_ADDR_VAR 0 3
71361: PUSH
71362: DOUBLE
71363: LD_VAR 0 1
71367: INC
71368: ST_TO_ADDR
71369: LD_INT 1
71371: PUSH
71372: FOR_DOWNTO
71373: IFFALSE 71450
// begin index := rand ( 1 , array ) ;
71375: LD_ADDR_VAR 0 4
71379: PUSH
71380: LD_INT 1
71382: PPUSH
71383: LD_VAR 0 1
71387: PPUSH
71388: CALL_OW 12
71392: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71393: LD_ADDR_VAR 0 2
71397: PUSH
71398: LD_VAR 0 2
71402: PPUSH
71403: LD_VAR 0 2
71407: PUSH
71408: LD_INT 1
71410: PLUS
71411: PPUSH
71412: LD_VAR 0 1
71416: PUSH
71417: LD_VAR 0 4
71421: ARRAY
71422: PPUSH
71423: CALL_OW 2
71427: ST_TO_ADDR
// array := Delete ( array , index ) ;
71428: LD_ADDR_VAR 0 1
71432: PUSH
71433: LD_VAR 0 1
71437: PPUSH
71438: LD_VAR 0 4
71442: PPUSH
71443: CALL_OW 3
71447: ST_TO_ADDR
// end ;
71448: GO 71372
71450: POP
71451: POP
// end ;
71452: LD_VAR 0 2
71456: RET
// export function GetBaseMaterials ( base ) ; begin
71457: LD_INT 0
71459: PPUSH
// result := [ 0 , 0 , 0 ] ;
71460: LD_ADDR_VAR 0 2
71464: PUSH
71465: LD_INT 0
71467: PUSH
71468: LD_INT 0
71470: PUSH
71471: LD_INT 0
71473: PUSH
71474: EMPTY
71475: LIST
71476: LIST
71477: LIST
71478: ST_TO_ADDR
// if not base then
71479: LD_VAR 0 1
71483: NOT
71484: IFFALSE 71488
// exit ;
71486: GO 71537
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
71488: LD_ADDR_VAR 0 2
71492: PUSH
71493: LD_VAR 0 1
71497: PPUSH
71498: LD_INT 1
71500: PPUSH
71501: CALL_OW 275
71505: PUSH
71506: LD_VAR 0 1
71510: PPUSH
71511: LD_INT 2
71513: PPUSH
71514: CALL_OW 275
71518: PUSH
71519: LD_VAR 0 1
71523: PPUSH
71524: LD_INT 3
71526: PPUSH
71527: CALL_OW 275
71531: PUSH
71532: EMPTY
71533: LIST
71534: LIST
71535: LIST
71536: ST_TO_ADDR
// end ;
71537: LD_VAR 0 2
71541: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
71542: LD_INT 0
71544: PPUSH
71545: PPUSH
// result := array ;
71546: LD_ADDR_VAR 0 3
71550: PUSH
71551: LD_VAR 0 1
71555: ST_TO_ADDR
// if size >= result then
71556: LD_VAR 0 2
71560: PUSH
71561: LD_VAR 0 3
71565: GREATEREQUAL
71566: IFFALSE 71570
// exit ;
71568: GO 71620
// if size then
71570: LD_VAR 0 2
71574: IFFALSE 71620
// for i := array downto size do
71576: LD_ADDR_VAR 0 4
71580: PUSH
71581: DOUBLE
71582: LD_VAR 0 1
71586: INC
71587: ST_TO_ADDR
71588: LD_VAR 0 2
71592: PUSH
71593: FOR_DOWNTO
71594: IFFALSE 71618
// result := Delete ( result , result ) ;
71596: LD_ADDR_VAR 0 3
71600: PUSH
71601: LD_VAR 0 3
71605: PPUSH
71606: LD_VAR 0 3
71610: PPUSH
71611: CALL_OW 3
71615: ST_TO_ADDR
71616: GO 71593
71618: POP
71619: POP
// end ;
71620: LD_VAR 0 3
71624: RET
// export function ComExit ( unit ) ; var tmp ; begin
71625: LD_INT 0
71627: PPUSH
71628: PPUSH
// if not IsInUnit ( unit ) then
71629: LD_VAR 0 1
71633: PPUSH
71634: CALL_OW 310
71638: NOT
71639: IFFALSE 71643
// exit ;
71641: GO 71703
// tmp := IsInUnit ( unit ) ;
71643: LD_ADDR_VAR 0 3
71647: PUSH
71648: LD_VAR 0 1
71652: PPUSH
71653: CALL_OW 310
71657: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
71658: LD_VAR 0 3
71662: PPUSH
71663: CALL_OW 247
71667: PUSH
71668: LD_INT 2
71670: EQUAL
71671: IFFALSE 71684
// ComExitVehicle ( unit ) else
71673: LD_VAR 0 1
71677: PPUSH
71678: CALL_OW 121
71682: GO 71693
// ComExitBuilding ( unit ) ;
71684: LD_VAR 0 1
71688: PPUSH
71689: CALL_OW 122
// result := tmp ;
71693: LD_ADDR_VAR 0 2
71697: PUSH
71698: LD_VAR 0 3
71702: ST_TO_ADDR
// end ;
71703: LD_VAR 0 2
71707: RET
// export function ComExitAll ( units ) ; var i ; begin
71708: LD_INT 0
71710: PPUSH
71711: PPUSH
// if not units then
71712: LD_VAR 0 1
71716: NOT
71717: IFFALSE 71721
// exit ;
71719: GO 71747
// for i in units do
71721: LD_ADDR_VAR 0 3
71725: PUSH
71726: LD_VAR 0 1
71730: PUSH
71731: FOR_IN
71732: IFFALSE 71745
// ComExit ( i ) ;
71734: LD_VAR 0 3
71738: PPUSH
71739: CALL 71625 0 1
71743: GO 71731
71745: POP
71746: POP
// end ;
71747: LD_VAR 0 2
71751: RET
// export function ResetHc ; begin
71752: LD_INT 0
71754: PPUSH
// InitHc ;
71755: CALL_OW 19
// hc_importance := 0 ;
71759: LD_ADDR_OWVAR 32
71763: PUSH
71764: LD_INT 0
71766: ST_TO_ADDR
// end ;
71767: LD_VAR 0 1
71771: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
71772: LD_INT 0
71774: PPUSH
71775: PPUSH
71776: PPUSH
// _x := ( x1 + x2 ) div 2 ;
71777: LD_ADDR_VAR 0 6
71781: PUSH
71782: LD_VAR 0 1
71786: PUSH
71787: LD_VAR 0 3
71791: PLUS
71792: PUSH
71793: LD_INT 2
71795: DIV
71796: ST_TO_ADDR
// if _x < 0 then
71797: LD_VAR 0 6
71801: PUSH
71802: LD_INT 0
71804: LESS
71805: IFFALSE 71822
// _x := _x * - 1 ;
71807: LD_ADDR_VAR 0 6
71811: PUSH
71812: LD_VAR 0 6
71816: PUSH
71817: LD_INT 1
71819: NEG
71820: MUL
71821: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
71822: LD_ADDR_VAR 0 7
71826: PUSH
71827: LD_VAR 0 2
71831: PUSH
71832: LD_VAR 0 4
71836: PLUS
71837: PUSH
71838: LD_INT 2
71840: DIV
71841: ST_TO_ADDR
// if _y < 0 then
71842: LD_VAR 0 7
71846: PUSH
71847: LD_INT 0
71849: LESS
71850: IFFALSE 71867
// _y := _y * - 1 ;
71852: LD_ADDR_VAR 0 7
71856: PUSH
71857: LD_VAR 0 7
71861: PUSH
71862: LD_INT 1
71864: NEG
71865: MUL
71866: ST_TO_ADDR
// result := [ _x , _y ] ;
71867: LD_ADDR_VAR 0 5
71871: PUSH
71872: LD_VAR 0 6
71876: PUSH
71877: LD_VAR 0 7
71881: PUSH
71882: EMPTY
71883: LIST
71884: LIST
71885: ST_TO_ADDR
// end ;
71886: LD_VAR 0 5
71890: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
71891: LD_INT 0
71893: PPUSH
71894: PPUSH
71895: PPUSH
71896: PPUSH
// task := GetTaskList ( unit ) ;
71897: LD_ADDR_VAR 0 7
71901: PUSH
71902: LD_VAR 0 1
71906: PPUSH
71907: CALL_OW 437
71911: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
71912: LD_VAR 0 7
71916: NOT
71917: IFFALSE 71936
71919: PUSH
71920: LD_VAR 0 1
71924: PPUSH
71925: LD_VAR 0 2
71929: PPUSH
71930: CALL_OW 308
71934: NOT
71935: AND
71936: IFFALSE 71940
// exit ;
71938: GO 72058
// if IsInArea ( unit , area ) then
71940: LD_VAR 0 1
71944: PPUSH
71945: LD_VAR 0 2
71949: PPUSH
71950: CALL_OW 308
71954: IFFALSE 71972
// begin ComMoveToArea ( unit , goAway ) ;
71956: LD_VAR 0 1
71960: PPUSH
71961: LD_VAR 0 3
71965: PPUSH
71966: CALL_OW 113
// exit ;
71970: GO 72058
// end ; if task [ 1 ] [ 1 ] <> M then
71972: LD_VAR 0 7
71976: PUSH
71977: LD_INT 1
71979: ARRAY
71980: PUSH
71981: LD_INT 1
71983: ARRAY
71984: PUSH
71985: LD_STRING M
71987: NONEQUAL
71988: IFFALSE 71992
// exit ;
71990: GO 72058
// x := task [ 1 ] [ 2 ] ;
71992: LD_ADDR_VAR 0 5
71996: PUSH
71997: LD_VAR 0 7
72001: PUSH
72002: LD_INT 1
72004: ARRAY
72005: PUSH
72006: LD_INT 2
72008: ARRAY
72009: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
72010: LD_ADDR_VAR 0 6
72014: PUSH
72015: LD_VAR 0 7
72019: PUSH
72020: LD_INT 1
72022: ARRAY
72023: PUSH
72024: LD_INT 3
72026: ARRAY
72027: ST_TO_ADDR
// if InArea ( x , y , area ) then
72028: LD_VAR 0 5
72032: PPUSH
72033: LD_VAR 0 6
72037: PPUSH
72038: LD_VAR 0 2
72042: PPUSH
72043: CALL_OW 309
72047: IFFALSE 72058
// ComStop ( unit ) ;
72049: LD_VAR 0 1
72053: PPUSH
72054: CALL_OW 141
// end ;
72058: LD_VAR 0 4
72062: RET
// export function Abs ( value ) ; begin
72063: LD_INT 0
72065: PPUSH
// result := value ;
72066: LD_ADDR_VAR 0 2
72070: PUSH
72071: LD_VAR 0 1
72075: ST_TO_ADDR
// if value < 0 then
72076: LD_VAR 0 1
72080: PUSH
72081: LD_INT 0
72083: LESS
72084: IFFALSE 72101
// result := value * - 1 ;
72086: LD_ADDR_VAR 0 2
72090: PUSH
72091: LD_VAR 0 1
72095: PUSH
72096: LD_INT 1
72098: NEG
72099: MUL
72100: ST_TO_ADDR
// end ;
72101: LD_VAR 0 2
72105: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72106: LD_INT 0
72108: PPUSH
72109: PPUSH
72110: PPUSH
72111: PPUSH
72112: PPUSH
72113: PPUSH
72114: PPUSH
72115: PPUSH
// if not unit or not building then
72116: LD_VAR 0 1
72120: NOT
72121: IFTRUE 72130
72123: PUSH
72124: LD_VAR 0 2
72128: NOT
72129: OR
72130: IFFALSE 72134
// exit ;
72132: GO 72362
// x := GetX ( building ) ;
72134: LD_ADDR_VAR 0 4
72138: PUSH
72139: LD_VAR 0 2
72143: PPUSH
72144: CALL_OW 250
72148: ST_TO_ADDR
// y := GetY ( building ) ;
72149: LD_ADDR_VAR 0 6
72153: PUSH
72154: LD_VAR 0 2
72158: PPUSH
72159: CALL_OW 251
72163: ST_TO_ADDR
// d := GetDir ( building ) ;
72164: LD_ADDR_VAR 0 8
72168: PUSH
72169: LD_VAR 0 2
72173: PPUSH
72174: CALL_OW 254
72178: ST_TO_ADDR
// r := 4 ;
72179: LD_ADDR_VAR 0 9
72183: PUSH
72184: LD_INT 4
72186: ST_TO_ADDR
// for i := 1 to 5 do
72187: LD_ADDR_VAR 0 10
72191: PUSH
72192: DOUBLE
72193: LD_INT 1
72195: DEC
72196: ST_TO_ADDR
72197: LD_INT 5
72199: PUSH
72200: FOR_TO
72201: IFFALSE 72360
// begin _x := ShiftX ( x , d , r + i ) ;
72203: LD_ADDR_VAR 0 5
72207: PUSH
72208: LD_VAR 0 4
72212: PPUSH
72213: LD_VAR 0 8
72217: PPUSH
72218: LD_VAR 0 9
72222: PUSH
72223: LD_VAR 0 10
72227: PLUS
72228: PPUSH
72229: CALL_OW 272
72233: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
72234: LD_ADDR_VAR 0 7
72238: PUSH
72239: LD_VAR 0 6
72243: PPUSH
72244: LD_VAR 0 8
72248: PPUSH
72249: LD_VAR 0 9
72253: PUSH
72254: LD_VAR 0 10
72258: PLUS
72259: PPUSH
72260: CALL_OW 273
72264: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
72265: LD_VAR 0 5
72269: PPUSH
72270: LD_VAR 0 7
72274: PPUSH
72275: CALL_OW 488
72279: IFFALSE 72314
72281: PUSH
72282: LD_VAR 0 5
72286: PPUSH
72287: LD_VAR 0 7
72291: PPUSH
72292: CALL_OW 428
72296: PPUSH
72297: CALL_OW 247
72301: PUSH
72302: LD_INT 3
72304: PUSH
72305: LD_INT 2
72307: PUSH
72308: EMPTY
72309: LIST
72310: LIST
72311: IN
72312: NOT
72313: AND
72314: IFFALSE 72358
// begin ComMoveXY ( unit , _x , _y ) ;
72316: LD_VAR 0 1
72320: PPUSH
72321: LD_VAR 0 5
72325: PPUSH
72326: LD_VAR 0 7
72330: PPUSH
72331: CALL_OW 111
// result := [ _x , _y ] ;
72335: LD_ADDR_VAR 0 3
72339: PUSH
72340: LD_VAR 0 5
72344: PUSH
72345: LD_VAR 0 7
72349: PUSH
72350: EMPTY
72351: LIST
72352: LIST
72353: ST_TO_ADDR
// exit ;
72354: POP
72355: POP
72356: GO 72362
// end ; end ;
72358: GO 72200
72360: POP
72361: POP
// end ;
72362: LD_VAR 0 3
72366: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
72367: LD_INT 0
72369: PPUSH
72370: PPUSH
72371: PPUSH
// result := 0 ;
72372: LD_ADDR_VAR 0 3
72376: PUSH
72377: LD_INT 0
72379: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
72380: LD_VAR 0 1
72384: PUSH
72385: LD_INT 0
72387: LESS
72388: IFTRUE 72400
72390: PUSH
72391: LD_VAR 0 1
72395: PUSH
72396: LD_INT 8
72398: GREATER
72399: OR
72400: IFTRUE 72412
72402: PUSH
72403: LD_VAR 0 2
72407: PUSH
72408: LD_INT 0
72410: LESS
72411: OR
72412: IFTRUE 72424
72414: PUSH
72415: LD_VAR 0 2
72419: PUSH
72420: LD_INT 8
72422: GREATER
72423: OR
72424: IFFALSE 72428
// exit ;
72426: GO 72503
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
72428: LD_ADDR_VAR 0 4
72432: PUSH
72433: LD_INT 22
72435: PUSH
72436: LD_VAR 0 2
72440: PUSH
72441: EMPTY
72442: LIST
72443: LIST
72444: PPUSH
72445: CALL_OW 69
72449: PUSH
72450: FOR_IN
72451: IFFALSE 72501
// begin un := UnitShoot ( i ) ;
72453: LD_ADDR_VAR 0 5
72457: PUSH
72458: LD_VAR 0 4
72462: PPUSH
72463: CALL_OW 504
72467: ST_TO_ADDR
// if GetSide ( un ) = side1 then
72468: LD_VAR 0 5
72472: PPUSH
72473: CALL_OW 255
72477: PUSH
72478: LD_VAR 0 1
72482: EQUAL
72483: IFFALSE 72499
// begin result := un ;
72485: LD_ADDR_VAR 0 3
72489: PUSH
72490: LD_VAR 0 5
72494: ST_TO_ADDR
// exit ;
72495: POP
72496: POP
72497: GO 72503
// end ; end ;
72499: GO 72450
72501: POP
72502: POP
// end ;
72503: LD_VAR 0 3
72507: RET
// export function GetCargoBay ( units ) ; begin
72508: LD_INT 0
72510: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
72511: LD_ADDR_VAR 0 2
72515: PUSH
72516: LD_VAR 0 1
72520: PPUSH
72521: LD_INT 2
72523: PUSH
72524: LD_INT 34
72526: PUSH
72527: LD_INT 12
72529: PUSH
72530: EMPTY
72531: LIST
72532: LIST
72533: PUSH
72534: LD_INT 34
72536: PUSH
72537: LD_INT 51
72539: PUSH
72540: EMPTY
72541: LIST
72542: LIST
72543: PUSH
72544: LD_INT 34
72546: PUSH
72547: LD_INT 32
72549: PUSH
72550: EMPTY
72551: LIST
72552: LIST
72553: PUSH
72554: LD_INT 34
72556: PUSH
72557: LD_INT 89
72559: PUSH
72560: EMPTY
72561: LIST
72562: LIST
72563: PUSH
72564: EMPTY
72565: LIST
72566: LIST
72567: LIST
72568: LIST
72569: LIST
72570: PPUSH
72571: CALL_OW 72
72575: ST_TO_ADDR
// end ;
72576: LD_VAR 0 2
72580: RET
// export function Negate ( value ) ; begin
72581: LD_INT 0
72583: PPUSH
// result := not value ;
72584: LD_ADDR_VAR 0 2
72588: PUSH
72589: LD_VAR 0 1
72593: NOT
72594: ST_TO_ADDR
// end ;
72595: LD_VAR 0 2
72599: RET
// export function Inc ( value ) ; begin
72600: LD_INT 0
72602: PPUSH
// result := value + 1 ;
72603: LD_ADDR_VAR 0 2
72607: PUSH
72608: LD_VAR 0 1
72612: PUSH
72613: LD_INT 1
72615: PLUS
72616: ST_TO_ADDR
// end ;
72617: LD_VAR 0 2
72621: RET
// export function Dec ( value ) ; begin
72622: LD_INT 0
72624: PPUSH
// result := value - 1 ;
72625: LD_ADDR_VAR 0 2
72629: PUSH
72630: LD_VAR 0 1
72634: PUSH
72635: LD_INT 1
72637: MINUS
72638: ST_TO_ADDR
// end ;
72639: LD_VAR 0 2
72643: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
72644: LD_INT 0
72646: PPUSH
72647: PPUSH
72648: PPUSH
72649: PPUSH
72650: PPUSH
72651: PPUSH
72652: PPUSH
72653: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
72654: LD_VAR 0 1
72658: PPUSH
72659: LD_VAR 0 2
72663: PPUSH
72664: CALL_OW 488
72668: NOT
72669: IFTRUE 72688
72671: PUSH
72672: LD_VAR 0 3
72676: PPUSH
72677: LD_VAR 0 4
72681: PPUSH
72682: CALL_OW 488
72686: NOT
72687: OR
72688: IFFALSE 72701
// begin result := - 1 ;
72690: LD_ADDR_VAR 0 5
72694: PUSH
72695: LD_INT 1
72697: NEG
72698: ST_TO_ADDR
// exit ;
72699: GO 72936
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
72701: LD_ADDR_VAR 0 12
72705: PUSH
72706: LD_VAR 0 1
72710: PPUSH
72711: LD_VAR 0 2
72715: PPUSH
72716: LD_VAR 0 3
72720: PPUSH
72721: LD_VAR 0 4
72725: PPUSH
72726: CALL 71772 0 4
72730: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
72731: LD_ADDR_VAR 0 11
72735: PUSH
72736: LD_VAR 0 1
72740: PPUSH
72741: LD_VAR 0 2
72745: PPUSH
72746: LD_VAR 0 12
72750: PUSH
72751: LD_INT 1
72753: ARRAY
72754: PPUSH
72755: LD_VAR 0 12
72759: PUSH
72760: LD_INT 2
72762: ARRAY
72763: PPUSH
72764: CALL_OW 298
72768: ST_TO_ADDR
// distance := 9999 ;
72769: LD_ADDR_VAR 0 10
72773: PUSH
72774: LD_INT 9999
72776: ST_TO_ADDR
// for i := 0 to 5 do
72777: LD_ADDR_VAR 0 6
72781: PUSH
72782: DOUBLE
72783: LD_INT 0
72785: DEC
72786: ST_TO_ADDR
72787: LD_INT 5
72789: PUSH
72790: FOR_TO
72791: IFFALSE 72934
// begin _x := ShiftX ( x1 , i , centerDist ) ;
72793: LD_ADDR_VAR 0 7
72797: PUSH
72798: LD_VAR 0 1
72802: PPUSH
72803: LD_VAR 0 6
72807: PPUSH
72808: LD_VAR 0 11
72812: PPUSH
72813: CALL_OW 272
72817: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
72818: LD_ADDR_VAR 0 8
72822: PUSH
72823: LD_VAR 0 2
72827: PPUSH
72828: LD_VAR 0 6
72832: PPUSH
72833: LD_VAR 0 11
72837: PPUSH
72838: CALL_OW 273
72842: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
72843: LD_VAR 0 7
72847: PPUSH
72848: LD_VAR 0 8
72852: PPUSH
72853: CALL_OW 488
72857: NOT
72858: IFFALSE 72862
// continue ;
72860: GO 72790
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
72862: LD_ADDR_VAR 0 9
72866: PUSH
72867: LD_VAR 0 12
72871: PUSH
72872: LD_INT 1
72874: ARRAY
72875: PPUSH
72876: LD_VAR 0 12
72880: PUSH
72881: LD_INT 2
72883: ARRAY
72884: PPUSH
72885: LD_VAR 0 7
72889: PPUSH
72890: LD_VAR 0 8
72894: PPUSH
72895: CALL_OW 298
72899: ST_TO_ADDR
// if tmp < distance then
72900: LD_VAR 0 9
72904: PUSH
72905: LD_VAR 0 10
72909: LESS
72910: IFFALSE 72932
// begin result := i ;
72912: LD_ADDR_VAR 0 5
72916: PUSH
72917: LD_VAR 0 6
72921: ST_TO_ADDR
// distance := tmp ;
72922: LD_ADDR_VAR 0 10
72926: PUSH
72927: LD_VAR 0 9
72931: ST_TO_ADDR
// end ; end ;
72932: GO 72790
72934: POP
72935: POP
// end ;
72936: LD_VAR 0 5
72940: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72941: LD_INT 0
72943: PPUSH
72944: PPUSH
// if not driver or not IsInUnit ( driver ) then
72945: LD_VAR 0 1
72949: NOT
72950: IFTRUE 72964
72952: PUSH
72953: LD_VAR 0 1
72957: PPUSH
72958: CALL_OW 310
72962: NOT
72963: OR
72964: IFFALSE 72968
// exit ;
72966: GO 73058
// vehicle := IsInUnit ( driver ) ;
72968: LD_ADDR_VAR 0 3
72972: PUSH
72973: LD_VAR 0 1
72977: PPUSH
72978: CALL_OW 310
72982: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72983: LD_VAR 0 1
72987: PPUSH
72988: LD_STRING \
72990: PUSH
72991: LD_INT 0
72993: PUSH
72994: LD_INT 0
72996: PUSH
72997: LD_INT 0
72999: PUSH
73000: LD_INT 0
73002: PUSH
73003: LD_INT 0
73005: PUSH
73006: LD_INT 0
73008: PUSH
73009: EMPTY
73010: LIST
73011: LIST
73012: LIST
73013: LIST
73014: LIST
73015: LIST
73016: LIST
73017: PUSH
73018: LD_STRING E
73020: PUSH
73021: LD_INT 0
73023: PUSH
73024: LD_INT 0
73026: PUSH
73027: LD_VAR 0 3
73031: PUSH
73032: LD_INT 0
73034: PUSH
73035: LD_INT 0
73037: PUSH
73038: LD_INT 0
73040: PUSH
73041: EMPTY
73042: LIST
73043: LIST
73044: LIST
73045: LIST
73046: LIST
73047: LIST
73048: LIST
73049: PUSH
73050: EMPTY
73051: LIST
73052: LIST
73053: PPUSH
73054: CALL_OW 446
// end ;
73058: LD_VAR 0 2
73062: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73063: LD_INT 0
73065: PPUSH
73066: PPUSH
// if not driver or not IsInUnit ( driver ) then
73067: LD_VAR 0 1
73071: NOT
73072: IFTRUE 73086
73074: PUSH
73075: LD_VAR 0 1
73079: PPUSH
73080: CALL_OW 310
73084: NOT
73085: OR
73086: IFFALSE 73090
// exit ;
73088: GO 73180
// vehicle := IsInUnit ( driver ) ;
73090: LD_ADDR_VAR 0 3
73094: PUSH
73095: LD_VAR 0 1
73099: PPUSH
73100: CALL_OW 310
73104: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73105: LD_VAR 0 1
73109: PPUSH
73110: LD_STRING \
73112: PUSH
73113: LD_INT 0
73115: PUSH
73116: LD_INT 0
73118: PUSH
73119: LD_INT 0
73121: PUSH
73122: LD_INT 0
73124: PUSH
73125: LD_INT 0
73127: PUSH
73128: LD_INT 0
73130: PUSH
73131: EMPTY
73132: LIST
73133: LIST
73134: LIST
73135: LIST
73136: LIST
73137: LIST
73138: LIST
73139: PUSH
73140: LD_STRING E
73142: PUSH
73143: LD_INT 0
73145: PUSH
73146: LD_INT 0
73148: PUSH
73149: LD_VAR 0 3
73153: PUSH
73154: LD_INT 0
73156: PUSH
73157: LD_INT 0
73159: PUSH
73160: LD_INT 0
73162: PUSH
73163: EMPTY
73164: LIST
73165: LIST
73166: LIST
73167: LIST
73168: LIST
73169: LIST
73170: LIST
73171: PUSH
73172: EMPTY
73173: LIST
73174: LIST
73175: PPUSH
73176: CALL_OW 447
// end ;
73180: LD_VAR 0 2
73184: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
73185: LD_INT 0
73187: PPUSH
73188: PPUSH
73189: PPUSH
// tmp := [ ] ;
73190: LD_ADDR_VAR 0 5
73194: PUSH
73195: EMPTY
73196: ST_TO_ADDR
// for i in units do
73197: LD_ADDR_VAR 0 4
73201: PUSH
73202: LD_VAR 0 1
73206: PUSH
73207: FOR_IN
73208: IFFALSE 73246
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
73210: LD_ADDR_VAR 0 5
73214: PUSH
73215: LD_VAR 0 5
73219: PPUSH
73220: LD_VAR 0 5
73224: PUSH
73225: LD_INT 1
73227: PLUS
73228: PPUSH
73229: LD_VAR 0 4
73233: PPUSH
73234: CALL_OW 256
73238: PPUSH
73239: CALL_OW 2
73243: ST_TO_ADDR
73244: GO 73207
73246: POP
73247: POP
// if not tmp then
73248: LD_VAR 0 5
73252: NOT
73253: IFFALSE 73257
// exit ;
73255: GO 73305
// if asc then
73257: LD_VAR 0 2
73261: IFFALSE 73285
// result := SortListByListAsc ( units , tmp ) else
73263: LD_ADDR_VAR 0 3
73267: PUSH
73268: LD_VAR 0 1
73272: PPUSH
73273: LD_VAR 0 5
73277: PPUSH
73278: CALL_OW 76
73282: ST_TO_ADDR
73283: GO 73305
// result := SortListByListDesc ( units , tmp ) ;
73285: LD_ADDR_VAR 0 3
73289: PUSH
73290: LD_VAR 0 1
73294: PPUSH
73295: LD_VAR 0 5
73299: PPUSH
73300: CALL_OW 77
73304: ST_TO_ADDR
// end ;
73305: LD_VAR 0 3
73309: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
73310: LD_INT 0
73312: PPUSH
73313: PPUSH
// task := GetTaskList ( mech ) ;
73314: LD_ADDR_VAR 0 4
73318: PUSH
73319: LD_VAR 0 1
73323: PPUSH
73324: CALL_OW 437
73328: ST_TO_ADDR
// if not task then
73329: LD_VAR 0 4
73333: NOT
73334: IFFALSE 73338
// exit ;
73336: GO 73382
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
73338: LD_ADDR_VAR 0 3
73342: PUSH
73343: LD_VAR 0 4
73347: PUSH
73348: LD_INT 1
73350: ARRAY
73351: PUSH
73352: LD_INT 1
73354: ARRAY
73355: PUSH
73356: LD_STRING r
73358: EQUAL
73359: IFFALSE 73381
73361: PUSH
73362: LD_VAR 0 4
73366: PUSH
73367: LD_INT 1
73369: ARRAY
73370: PUSH
73371: LD_INT 4
73373: ARRAY
73374: PUSH
73375: LD_VAR 0 2
73379: EQUAL
73380: AND
73381: ST_TO_ADDR
// end ;
73382: LD_VAR 0 3
73386: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
73387: LD_INT 0
73389: PPUSH
// SetDir ( unit , d ) ;
73390: LD_VAR 0 1
73394: PPUSH
73395: LD_VAR 0 4
73399: PPUSH
73400: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
73404: LD_ADDR_VAR 0 6
73408: PUSH
73409: LD_VAR 0 1
73413: PPUSH
73414: LD_VAR 0 2
73418: PPUSH
73419: LD_VAR 0 3
73423: PPUSH
73424: LD_VAR 0 5
73428: PPUSH
73429: CALL_OW 48
73433: ST_TO_ADDR
// end ;
73434: LD_VAR 0 6
73438: RET
// export function ToNaturalNumber ( number ) ; begin
73439: LD_INT 0
73441: PPUSH
// result := number div 1 ;
73442: LD_ADDR_VAR 0 2
73446: PUSH
73447: LD_VAR 0 1
73451: PUSH
73452: LD_INT 1
73454: DIV
73455: ST_TO_ADDR
// if number < 0 then
73456: LD_VAR 0 1
73460: PUSH
73461: LD_INT 0
73463: LESS
73464: IFFALSE 73474
// result := 0 ;
73466: LD_ADDR_VAR 0 2
73470: PUSH
73471: LD_INT 0
73473: ST_TO_ADDR
// end ;
73474: LD_VAR 0 2
73478: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
73479: LD_INT 0
73481: PPUSH
73482: PPUSH
73483: PPUSH
// if not buildings then
73484: LD_VAR 0 1
73488: NOT
73489: IFFALSE 73493
// exit ;
73491: GO 73608
// tmp := [ ] ;
73493: LD_ADDR_VAR 0 5
73497: PUSH
73498: EMPTY
73499: ST_TO_ADDR
// for b in buildings do
73500: LD_ADDR_VAR 0 4
73504: PUSH
73505: LD_VAR 0 1
73509: PUSH
73510: FOR_IN
73511: IFFALSE 73549
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
73513: LD_ADDR_VAR 0 5
73517: PUSH
73518: LD_VAR 0 5
73522: PPUSH
73523: LD_VAR 0 5
73527: PUSH
73528: LD_INT 1
73530: PLUS
73531: PPUSH
73532: LD_VAR 0 4
73536: PPUSH
73537: CALL_OW 266
73541: PPUSH
73542: CALL_OW 1
73546: ST_TO_ADDR
73547: GO 73510
73549: POP
73550: POP
// if not tmp then
73551: LD_VAR 0 5
73555: NOT
73556: IFFALSE 73560
// exit ;
73558: GO 73608
// if asc then
73560: LD_VAR 0 2
73564: IFFALSE 73588
// result := SortListByListAsc ( buildings , tmp ) else
73566: LD_ADDR_VAR 0 3
73570: PUSH
73571: LD_VAR 0 1
73575: PPUSH
73576: LD_VAR 0 5
73580: PPUSH
73581: CALL_OW 76
73585: ST_TO_ADDR
73586: GO 73608
// result := SortListByListDesc ( buildings , tmp ) ;
73588: LD_ADDR_VAR 0 3
73592: PUSH
73593: LD_VAR 0 1
73597: PPUSH
73598: LD_VAR 0 5
73602: PPUSH
73603: CALL_OW 77
73607: ST_TO_ADDR
// end ;
73608: LD_VAR 0 3
73612: RET
// export function SortByClass ( units , class ) ; var un ; begin
73613: LD_INT 0
73615: PPUSH
73616: PPUSH
// if not units or not class then
73617: LD_VAR 0 1
73621: NOT
73622: IFTRUE 73631
73624: PUSH
73625: LD_VAR 0 2
73629: NOT
73630: OR
73631: IFFALSE 73635
// exit ;
73633: GO 73730
// result := [ ] ;
73635: LD_ADDR_VAR 0 3
73639: PUSH
73640: EMPTY
73641: ST_TO_ADDR
// for un in units do
73642: LD_ADDR_VAR 0 4
73646: PUSH
73647: LD_VAR 0 1
73651: PUSH
73652: FOR_IN
73653: IFFALSE 73728
// if GetClass ( un ) = class then
73655: LD_VAR 0 4
73659: PPUSH
73660: CALL_OW 257
73664: PUSH
73665: LD_VAR 0 2
73669: EQUAL
73670: IFFALSE 73697
// result := Insert ( result , 1 , un ) else
73672: LD_ADDR_VAR 0 3
73676: PUSH
73677: LD_VAR 0 3
73681: PPUSH
73682: LD_INT 1
73684: PPUSH
73685: LD_VAR 0 4
73689: PPUSH
73690: CALL_OW 2
73694: ST_TO_ADDR
73695: GO 73726
// result := Replace ( result , result + 1 , un ) ;
73697: LD_ADDR_VAR 0 3
73701: PUSH
73702: LD_VAR 0 3
73706: PPUSH
73707: LD_VAR 0 3
73711: PUSH
73712: LD_INT 1
73714: PLUS
73715: PPUSH
73716: LD_VAR 0 4
73720: PPUSH
73721: CALL_OW 1
73725: ST_TO_ADDR
73726: GO 73652
73728: POP
73729: POP
// end ;
73730: LD_VAR 0 3
73734: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
73735: LD_INT 0
73737: PPUSH
73738: PPUSH
73739: PPUSH
73740: PPUSH
73741: PPUSH
73742: PPUSH
73743: PPUSH
// result := [ ] ;
73744: LD_ADDR_VAR 0 4
73748: PUSH
73749: EMPTY
73750: ST_TO_ADDR
// if x - r < 0 then
73751: LD_VAR 0 1
73755: PUSH
73756: LD_VAR 0 3
73760: MINUS
73761: PUSH
73762: LD_INT 0
73764: LESS
73765: IFFALSE 73777
// min_x := 0 else
73767: LD_ADDR_VAR 0 8
73771: PUSH
73772: LD_INT 0
73774: ST_TO_ADDR
73775: GO 73793
// min_x := x - r ;
73777: LD_ADDR_VAR 0 8
73781: PUSH
73782: LD_VAR 0 1
73786: PUSH
73787: LD_VAR 0 3
73791: MINUS
73792: ST_TO_ADDR
// if y - r < 0 then
73793: LD_VAR 0 2
73797: PUSH
73798: LD_VAR 0 3
73802: MINUS
73803: PUSH
73804: LD_INT 0
73806: LESS
73807: IFFALSE 73819
// min_y := 0 else
73809: LD_ADDR_VAR 0 7
73813: PUSH
73814: LD_INT 0
73816: ST_TO_ADDR
73817: GO 73835
// min_y := y - r ;
73819: LD_ADDR_VAR 0 7
73823: PUSH
73824: LD_VAR 0 2
73828: PUSH
73829: LD_VAR 0 3
73833: MINUS
73834: ST_TO_ADDR
// max_x := x + r ;
73835: LD_ADDR_VAR 0 9
73839: PUSH
73840: LD_VAR 0 1
73844: PUSH
73845: LD_VAR 0 3
73849: PLUS
73850: ST_TO_ADDR
// max_y := y + r ;
73851: LD_ADDR_VAR 0 10
73855: PUSH
73856: LD_VAR 0 2
73860: PUSH
73861: LD_VAR 0 3
73865: PLUS
73866: ST_TO_ADDR
// for _x = min_x to max_x do
73867: LD_ADDR_VAR 0 5
73871: PUSH
73872: DOUBLE
73873: LD_VAR 0 8
73877: DEC
73878: ST_TO_ADDR
73879: LD_VAR 0 9
73883: PUSH
73884: FOR_TO
73885: IFFALSE 73986
// for _y = min_y to max_y do
73887: LD_ADDR_VAR 0 6
73891: PUSH
73892: DOUBLE
73893: LD_VAR 0 7
73897: DEC
73898: ST_TO_ADDR
73899: LD_VAR 0 10
73903: PUSH
73904: FOR_TO
73905: IFFALSE 73982
// begin if not ValidHex ( _x , _y ) then
73907: LD_VAR 0 5
73911: PPUSH
73912: LD_VAR 0 6
73916: PPUSH
73917: CALL_OW 488
73921: NOT
73922: IFFALSE 73926
// continue ;
73924: GO 73904
// if GetResourceTypeXY ( _x , _y ) then
73926: LD_VAR 0 5
73930: PPUSH
73931: LD_VAR 0 6
73935: PPUSH
73936: CALL_OW 283
73940: IFFALSE 73980
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
73942: LD_ADDR_VAR 0 4
73946: PUSH
73947: LD_VAR 0 4
73951: PPUSH
73952: LD_VAR 0 4
73956: PUSH
73957: LD_INT 1
73959: PLUS
73960: PPUSH
73961: LD_VAR 0 5
73965: PUSH
73966: LD_VAR 0 6
73970: PUSH
73971: EMPTY
73972: LIST
73973: LIST
73974: PPUSH
73975: CALL_OW 1
73979: ST_TO_ADDR
// end ;
73980: GO 73904
73982: POP
73983: POP
73984: GO 73884
73986: POP
73987: POP
// end ;
73988: LD_VAR 0 4
73992: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
73993: LD_INT 0
73995: PPUSH
73996: PPUSH
73997: PPUSH
73998: PPUSH
73999: PPUSH
74000: PPUSH
74001: PPUSH
74002: PPUSH
// if not units then
74003: LD_VAR 0 1
74007: NOT
74008: IFFALSE 74012
// exit ;
74010: GO 74544
// result := UnitFilter ( units , [ f_ok ] ) ;
74012: LD_ADDR_VAR 0 3
74016: PUSH
74017: LD_VAR 0 1
74021: PPUSH
74022: LD_INT 50
74024: PUSH
74025: EMPTY
74026: LIST
74027: PPUSH
74028: CALL_OW 72
74032: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
74033: LD_ADDR_VAR 0 8
74037: PUSH
74038: LD_VAR 0 1
74042: PUSH
74043: LD_INT 1
74045: ARRAY
74046: PPUSH
74047: CALL_OW 255
74051: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
74052: LD_ADDR_VAR 0 10
74056: PUSH
74057: LD_INT 29
74059: PUSH
74060: LD_INT 91
74062: PUSH
74063: LD_INT 49
74065: PUSH
74066: EMPTY
74067: LIST
74068: LIST
74069: LIST
74070: ST_TO_ADDR
// if not result then
74071: LD_VAR 0 3
74075: NOT
74076: IFFALSE 74080
// exit ;
74078: GO 74544
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
74080: LD_ADDR_VAR 0 5
74084: PUSH
74085: LD_INT 81
74087: PUSH
74088: LD_VAR 0 8
74092: PUSH
74093: EMPTY
74094: LIST
74095: LIST
74096: PPUSH
74097: CALL_OW 69
74101: ST_TO_ADDR
// for i in result do
74102: LD_ADDR_VAR 0 4
74106: PUSH
74107: LD_VAR 0 3
74111: PUSH
74112: FOR_IN
74113: IFFALSE 74542
// begin tag := GetTag ( i ) + 1 ;
74115: LD_ADDR_VAR 0 9
74119: PUSH
74120: LD_VAR 0 4
74124: PPUSH
74125: CALL_OW 110
74129: PUSH
74130: LD_INT 1
74132: PLUS
74133: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
74134: LD_ADDR_VAR 0 7
74138: PUSH
74139: LD_VAR 0 4
74143: PPUSH
74144: CALL_OW 250
74148: PPUSH
74149: LD_VAR 0 4
74153: PPUSH
74154: CALL_OW 251
74158: PPUSH
74159: LD_INT 4
74161: PPUSH
74162: CALL 73735 0 3
74166: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
74167: LD_VAR 0 4
74171: PPUSH
74172: CALL_OW 247
74176: PUSH
74177: LD_INT 2
74179: EQUAL
74180: IFFALSE 74192
74182: PUSH
74183: LD_VAR 0 7
74187: PUSH
74188: LD_INT 2
74190: GREATER
74191: AND
74192: IFFALSE 74212
74194: PUSH
74195: LD_VAR 0 4
74199: PPUSH
74200: CALL_OW 264
74204: PUSH
74205: LD_VAR 0 10
74209: IN
74210: NOT
74211: AND
74212: IFFALSE 74251
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
74214: LD_VAR 0 4
74218: PPUSH
74219: LD_VAR 0 7
74223: PUSH
74224: LD_INT 1
74226: ARRAY
74227: PUSH
74228: LD_INT 1
74230: ARRAY
74231: PPUSH
74232: LD_VAR 0 7
74236: PUSH
74237: LD_INT 1
74239: ARRAY
74240: PUSH
74241: LD_INT 2
74243: ARRAY
74244: PPUSH
74245: CALL_OW 116
74249: GO 74540
// if path > tag then
74251: LD_VAR 0 2
74255: PUSH
74256: LD_VAR 0 9
74260: GREATER
74261: IFFALSE 74469
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
74263: LD_ADDR_VAR 0 6
74267: PUSH
74268: LD_VAR 0 5
74272: PPUSH
74273: LD_INT 91
74275: PUSH
74276: LD_VAR 0 4
74280: PUSH
74281: LD_INT 8
74283: PUSH
74284: EMPTY
74285: LIST
74286: LIST
74287: LIST
74288: PPUSH
74289: CALL_OW 72
74293: ST_TO_ADDR
// if nearEnemy then
74294: LD_VAR 0 6
74298: IFFALSE 74367
// begin if GetWeapon ( i ) = ru_time_lapser then
74300: LD_VAR 0 4
74304: PPUSH
74305: CALL_OW 264
74309: PUSH
74310: LD_INT 49
74312: EQUAL
74313: IFFALSE 74341
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
74315: LD_VAR 0 4
74319: PPUSH
74320: LD_VAR 0 6
74324: PPUSH
74325: LD_VAR 0 4
74329: PPUSH
74330: CALL_OW 74
74334: PPUSH
74335: CALL_OW 112
74339: GO 74365
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
74341: LD_VAR 0 4
74345: PPUSH
74346: LD_VAR 0 6
74350: PPUSH
74351: LD_VAR 0 4
74355: PPUSH
74356: CALL_OW 74
74360: PPUSH
74361: CALL 75625 0 2
// end else
74365: GO 74467
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
74367: LD_VAR 0 4
74371: PPUSH
74372: LD_VAR 0 2
74376: PUSH
74377: LD_VAR 0 9
74381: ARRAY
74382: PUSH
74383: LD_INT 1
74385: ARRAY
74386: PPUSH
74387: LD_VAR 0 2
74391: PUSH
74392: LD_VAR 0 9
74396: ARRAY
74397: PUSH
74398: LD_INT 2
74400: ARRAY
74401: PPUSH
74402: CALL_OW 297
74406: PUSH
74407: LD_INT 6
74409: GREATER
74410: IFFALSE 74453
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
74412: LD_VAR 0 4
74416: PPUSH
74417: LD_VAR 0 2
74421: PUSH
74422: LD_VAR 0 9
74426: ARRAY
74427: PUSH
74428: LD_INT 1
74430: ARRAY
74431: PPUSH
74432: LD_VAR 0 2
74436: PUSH
74437: LD_VAR 0 9
74441: ARRAY
74442: PUSH
74443: LD_INT 2
74445: ARRAY
74446: PPUSH
74447: CALL_OW 114
74451: GO 74467
// SetTag ( i , tag ) ;
74453: LD_VAR 0 4
74457: PPUSH
74458: LD_VAR 0 9
74462: PPUSH
74463: CALL_OW 109
// end else
74467: GO 74540
// if enemy then
74469: LD_VAR 0 5
74473: IFFALSE 74540
// begin if GetWeapon ( i ) = ru_time_lapser then
74475: LD_VAR 0 4
74479: PPUSH
74480: CALL_OW 264
74484: PUSH
74485: LD_INT 49
74487: EQUAL
74488: IFFALSE 74516
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
74490: LD_VAR 0 4
74494: PPUSH
74495: LD_VAR 0 5
74499: PPUSH
74500: LD_VAR 0 4
74504: PPUSH
74505: CALL_OW 74
74509: PPUSH
74510: CALL_OW 112
74514: GO 74540
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
74516: LD_VAR 0 4
74520: PPUSH
74521: LD_VAR 0 5
74525: PPUSH
74526: LD_VAR 0 4
74530: PPUSH
74531: CALL_OW 74
74535: PPUSH
74536: CALL 75625 0 2
// end ; end ;
74540: GO 74112
74542: POP
74543: POP
// end ;
74544: LD_VAR 0 3
74548: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
74549: LD_INT 0
74551: PPUSH
74552: PPUSH
74553: PPUSH
// if not unit or IsInUnit ( unit ) then
74554: LD_VAR 0 1
74558: NOT
74559: IFTRUE 74572
74561: PUSH
74562: LD_VAR 0 1
74566: PPUSH
74567: CALL_OW 310
74571: OR
74572: IFFALSE 74576
// exit ;
74574: GO 74667
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
74576: LD_ADDR_VAR 0 4
74580: PUSH
74581: LD_VAR 0 1
74585: PPUSH
74586: CALL_OW 250
74590: PPUSH
74591: LD_VAR 0 2
74595: PPUSH
74596: LD_INT 1
74598: PPUSH
74599: CALL_OW 272
74603: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
74604: LD_ADDR_VAR 0 5
74608: PUSH
74609: LD_VAR 0 1
74613: PPUSH
74614: CALL_OW 251
74618: PPUSH
74619: LD_VAR 0 2
74623: PPUSH
74624: LD_INT 1
74626: PPUSH
74627: CALL_OW 273
74631: ST_TO_ADDR
// if ValidHex ( x , y ) then
74632: LD_VAR 0 4
74636: PPUSH
74637: LD_VAR 0 5
74641: PPUSH
74642: CALL_OW 488
74646: IFFALSE 74667
// ComTurnXY ( unit , x , y ) ;
74648: LD_VAR 0 1
74652: PPUSH
74653: LD_VAR 0 4
74657: PPUSH
74658: LD_VAR 0 5
74662: PPUSH
74663: CALL_OW 118
// end ;
74667: LD_VAR 0 3
74671: RET
// export function SeeUnits ( side , units ) ; var i ; begin
74672: LD_INT 0
74674: PPUSH
74675: PPUSH
// result := false ;
74676: LD_ADDR_VAR 0 3
74680: PUSH
74681: LD_INT 0
74683: ST_TO_ADDR
// if not units then
74684: LD_VAR 0 2
74688: NOT
74689: IFFALSE 74693
// exit ;
74691: GO 74738
// for i in units do
74693: LD_ADDR_VAR 0 4
74697: PUSH
74698: LD_VAR 0 2
74702: PUSH
74703: FOR_IN
74704: IFFALSE 74736
// if See ( side , i ) then
74706: LD_VAR 0 1
74710: PPUSH
74711: LD_VAR 0 4
74715: PPUSH
74716: CALL_OW 292
74720: IFFALSE 74734
// begin result := true ;
74722: LD_ADDR_VAR 0 3
74726: PUSH
74727: LD_INT 1
74729: ST_TO_ADDR
// exit ;
74730: POP
74731: POP
74732: GO 74738
// end ;
74734: GO 74703
74736: POP
74737: POP
// end ;
74738: LD_VAR 0 3
74742: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
74743: LD_INT 0
74745: PPUSH
74746: PPUSH
74747: PPUSH
74748: PPUSH
// if not unit or not points then
74749: LD_VAR 0 1
74753: NOT
74754: IFTRUE 74763
74756: PUSH
74757: LD_VAR 0 2
74761: NOT
74762: OR
74763: IFFALSE 74767
// exit ;
74765: GO 74857
// dist := 99999 ;
74767: LD_ADDR_VAR 0 5
74771: PUSH
74772: LD_INT 99999
74774: ST_TO_ADDR
// for i in points do
74775: LD_ADDR_VAR 0 4
74779: PUSH
74780: LD_VAR 0 2
74784: PUSH
74785: FOR_IN
74786: IFFALSE 74855
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
74788: LD_ADDR_VAR 0 6
74792: PUSH
74793: LD_VAR 0 1
74797: PPUSH
74798: LD_VAR 0 4
74802: PUSH
74803: LD_INT 1
74805: ARRAY
74806: PPUSH
74807: LD_VAR 0 4
74811: PUSH
74812: LD_INT 2
74814: ARRAY
74815: PPUSH
74816: CALL_OW 297
74820: ST_TO_ADDR
// if tmpDist < dist then
74821: LD_VAR 0 6
74825: PUSH
74826: LD_VAR 0 5
74830: LESS
74831: IFFALSE 74853
// begin result := i ;
74833: LD_ADDR_VAR 0 3
74837: PUSH
74838: LD_VAR 0 4
74842: ST_TO_ADDR
// dist := tmpDist ;
74843: LD_ADDR_VAR 0 5
74847: PUSH
74848: LD_VAR 0 6
74852: ST_TO_ADDR
// end ; end ;
74853: GO 74785
74855: POP
74856: POP
// end ;
74857: LD_VAR 0 3
74861: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
74862: LD_INT 0
74864: PPUSH
// uc_side := side ;
74865: LD_ADDR_OWVAR 20
74869: PUSH
74870: LD_VAR 0 1
74874: ST_TO_ADDR
// uc_nation := 3 ;
74875: LD_ADDR_OWVAR 21
74879: PUSH
74880: LD_INT 3
74882: ST_TO_ADDR
// vc_chassis := 25 ;
74883: LD_ADDR_OWVAR 37
74887: PUSH
74888: LD_INT 25
74890: ST_TO_ADDR
// vc_engine := engine_siberite ;
74891: LD_ADDR_OWVAR 39
74895: PUSH
74896: LD_INT 3
74898: ST_TO_ADDR
// vc_control := control_computer ;
74899: LD_ADDR_OWVAR 38
74903: PUSH
74904: LD_INT 3
74906: ST_TO_ADDR
// vc_weapon := 59 ;
74907: LD_ADDR_OWVAR 40
74911: PUSH
74912: LD_INT 59
74914: ST_TO_ADDR
// result := CreateVehicle ;
74915: LD_ADDR_VAR 0 5
74919: PUSH
74920: CALL_OW 45
74924: ST_TO_ADDR
// SetDir ( result , d ) ;
74925: LD_VAR 0 5
74929: PPUSH
74930: LD_VAR 0 4
74934: PPUSH
74935: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
74939: LD_VAR 0 5
74943: PPUSH
74944: LD_VAR 0 2
74948: PPUSH
74949: LD_VAR 0 3
74953: PPUSH
74954: LD_INT 0
74956: PPUSH
74957: CALL_OW 48
// end ;
74961: LD_VAR 0 5
74965: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
74966: LD_INT 0
74968: PPUSH
74969: PPUSH
74970: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
74971: LD_ADDR_VAR 0 2
74975: PUSH
74976: LD_INT 0
74978: PUSH
74979: LD_INT 0
74981: PUSH
74982: LD_INT 0
74984: PUSH
74985: LD_INT 0
74987: PUSH
74988: EMPTY
74989: LIST
74990: LIST
74991: LIST
74992: LIST
74993: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
74994: LD_VAR 0 1
74998: NOT
74999: IFTRUE 75032
75001: PUSH
75002: LD_VAR 0 1
75006: PPUSH
75007: CALL_OW 264
75011: PUSH
75012: LD_INT 12
75014: PUSH
75015: LD_INT 51
75017: PUSH
75018: LD_INT 32
75020: PUSH
75021: LD_INT 89
75023: PUSH
75024: EMPTY
75025: LIST
75026: LIST
75027: LIST
75028: LIST
75029: IN
75030: NOT
75031: OR
75032: IFFALSE 75036
// exit ;
75034: GO 75134
// for i := 1 to 3 do
75036: LD_ADDR_VAR 0 3
75040: PUSH
75041: DOUBLE
75042: LD_INT 1
75044: DEC
75045: ST_TO_ADDR
75046: LD_INT 3
75048: PUSH
75049: FOR_TO
75050: IFFALSE 75132
// begin tmp := GetCargo ( cargo , i ) ;
75052: LD_ADDR_VAR 0 4
75056: PUSH
75057: LD_VAR 0 1
75061: PPUSH
75062: LD_VAR 0 3
75066: PPUSH
75067: CALL_OW 289
75071: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
75072: LD_ADDR_VAR 0 2
75076: PUSH
75077: LD_VAR 0 2
75081: PPUSH
75082: LD_VAR 0 3
75086: PPUSH
75087: LD_VAR 0 4
75091: PPUSH
75092: CALL_OW 1
75096: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
75097: LD_ADDR_VAR 0 2
75101: PUSH
75102: LD_VAR 0 2
75106: PPUSH
75107: LD_INT 4
75109: PPUSH
75110: LD_VAR 0 2
75114: PUSH
75115: LD_INT 4
75117: ARRAY
75118: PUSH
75119: LD_VAR 0 4
75123: PLUS
75124: PPUSH
75125: CALL_OW 1
75129: ST_TO_ADDR
// end ;
75130: GO 75049
75132: POP
75133: POP
// end ;
75134: LD_VAR 0 2
75138: RET
// export function Length ( array ) ; begin
75139: LD_INT 0
75141: PPUSH
// result := array + 0 ;
75142: LD_ADDR_VAR 0 2
75146: PUSH
75147: LD_VAR 0 1
75151: PUSH
75152: LD_INT 0
75154: PLUS
75155: ST_TO_ADDR
// end ;
75156: LD_VAR 0 2
75160: RET
// export function PrepareArray ( array ) ; begin
75161: LD_INT 0
75163: PPUSH
// result := array diff 0 ;
75164: LD_ADDR_VAR 0 2
75168: PUSH
75169: LD_VAR 0 1
75173: PUSH
75174: LD_INT 0
75176: DIFF
75177: ST_TO_ADDR
// if not result [ 1 ] then
75178: LD_VAR 0 2
75182: PUSH
75183: LD_INT 1
75185: ARRAY
75186: NOT
75187: IFFALSE 75207
// result := Delete ( result , 1 ) ;
75189: LD_ADDR_VAR 0 2
75193: PUSH
75194: LD_VAR 0 2
75198: PPUSH
75199: LD_INT 1
75201: PPUSH
75202: CALL_OW 3
75206: ST_TO_ADDR
// end ;
75207: LD_VAR 0 2
75211: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
75212: LD_INT 0
75214: PPUSH
75215: PPUSH
75216: PPUSH
75217: PPUSH
// sibRocketRange := 25 ;
75218: LD_ADDR_VAR 0 6
75222: PUSH
75223: LD_INT 25
75225: ST_TO_ADDR
// result := false ;
75226: LD_ADDR_VAR 0 4
75230: PUSH
75231: LD_INT 0
75233: ST_TO_ADDR
// for i := 0 to 5 do
75234: LD_ADDR_VAR 0 5
75238: PUSH
75239: DOUBLE
75240: LD_INT 0
75242: DEC
75243: ST_TO_ADDR
75244: LD_INT 5
75246: PUSH
75247: FOR_TO
75248: IFFALSE 75315
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
75250: LD_VAR 0 1
75254: PPUSH
75255: LD_VAR 0 5
75259: PPUSH
75260: LD_VAR 0 6
75264: PPUSH
75265: CALL_OW 272
75269: PPUSH
75270: LD_VAR 0 2
75274: PPUSH
75275: LD_VAR 0 5
75279: PPUSH
75280: LD_VAR 0 6
75284: PPUSH
75285: CALL_OW 273
75289: PPUSH
75290: LD_VAR 0 3
75294: PPUSH
75295: CALL_OW 309
75299: IFFALSE 75313
// begin result := true ;
75301: LD_ADDR_VAR 0 4
75305: PUSH
75306: LD_INT 1
75308: ST_TO_ADDR
// exit ;
75309: POP
75310: POP
75311: GO 75317
// end ;
75313: GO 75247
75315: POP
75316: POP
// end ;
75317: LD_VAR 0 4
75321: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
75322: LD_INT 0
75324: PPUSH
75325: PPUSH
75326: PPUSH
// if btype = b_depot then
75327: LD_VAR 0 2
75331: PUSH
75332: LD_INT 0
75334: EQUAL
75335: IFFALSE 75347
// begin result := true ;
75337: LD_ADDR_VAR 0 3
75341: PUSH
75342: LD_INT 1
75344: ST_TO_ADDR
// exit ;
75345: GO 75467
// end ; pom := GetBase ( depot ) ;
75347: LD_ADDR_VAR 0 4
75351: PUSH
75352: LD_VAR 0 1
75356: PPUSH
75357: CALL_OW 274
75361: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
75362: LD_ADDR_VAR 0 5
75366: PUSH
75367: LD_VAR 0 2
75371: PPUSH
75372: LD_VAR 0 1
75376: PPUSH
75377: CALL_OW 248
75381: PPUSH
75382: CALL_OW 450
75386: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
75387: LD_ADDR_VAR 0 3
75391: PUSH
75392: LD_VAR 0 4
75396: PPUSH
75397: LD_INT 1
75399: PPUSH
75400: CALL_OW 275
75404: PUSH
75405: LD_VAR 0 5
75409: PUSH
75410: LD_INT 1
75412: ARRAY
75413: GREATEREQUAL
75414: IFFALSE 75440
75416: PUSH
75417: LD_VAR 0 4
75421: PPUSH
75422: LD_INT 2
75424: PPUSH
75425: CALL_OW 275
75429: PUSH
75430: LD_VAR 0 5
75434: PUSH
75435: LD_INT 2
75437: ARRAY
75438: GREATEREQUAL
75439: AND
75440: IFFALSE 75466
75442: PUSH
75443: LD_VAR 0 4
75447: PPUSH
75448: LD_INT 3
75450: PPUSH
75451: CALL_OW 275
75455: PUSH
75456: LD_VAR 0 5
75460: PUSH
75461: LD_INT 3
75463: ARRAY
75464: GREATEREQUAL
75465: AND
75466: ST_TO_ADDR
// end ;
75467: LD_VAR 0 3
75471: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
75472: LD_INT 0
75474: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
75475: LD_VAR 0 1
75479: PPUSH
75480: LD_VAR 0 2
75484: PPUSH
75485: LD_INT 0
75487: PPUSH
75488: LD_INT 0
75490: PPUSH
75491: LD_INT 1
75493: PPUSH
75494: LD_INT 0
75496: PPUSH
75497: CALL_OW 587
// end ;
75501: LD_VAR 0 3
75505: RET
// export function CenterOnNow ( unit ) ; begin
75506: LD_INT 0
75508: PPUSH
// result := IsInUnit ( unit ) ;
75509: LD_ADDR_VAR 0 2
75513: PUSH
75514: LD_VAR 0 1
75518: PPUSH
75519: CALL_OW 310
75523: ST_TO_ADDR
// if not result then
75524: LD_VAR 0 2
75528: NOT
75529: IFFALSE 75541
// result := unit ;
75531: LD_ADDR_VAR 0 2
75535: PUSH
75536: LD_VAR 0 1
75540: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
75541: LD_VAR 0 1
75545: PPUSH
75546: CALL_OW 87
// end ;
75550: LD_VAR 0 2
75554: RET
// export function ComMoveHex ( unit , hex ) ; begin
75555: LD_INT 0
75557: PPUSH
// if not hex then
75558: LD_VAR 0 2
75562: NOT
75563: IFFALSE 75567
// exit ;
75565: GO 75620
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
75567: LD_VAR 0 2
75571: PUSH
75572: LD_INT 1
75574: ARRAY
75575: PPUSH
75576: LD_VAR 0 2
75580: PUSH
75581: LD_INT 2
75583: ARRAY
75584: PPUSH
75585: CALL_OW 428
75589: IFFALSE 75593
// exit ;
75591: GO 75620
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
75593: LD_VAR 0 1
75597: PPUSH
75598: LD_VAR 0 2
75602: PUSH
75603: LD_INT 1
75605: ARRAY
75606: PPUSH
75607: LD_VAR 0 2
75611: PUSH
75612: LD_INT 2
75614: ARRAY
75615: PPUSH
75616: CALL_OW 111
// end ;
75620: LD_VAR 0 3
75624: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
75625: LD_INT 0
75627: PPUSH
75628: PPUSH
75629: PPUSH
// if not unit or not enemy then
75630: LD_VAR 0 1
75634: NOT
75635: IFTRUE 75644
75637: PUSH
75638: LD_VAR 0 2
75642: NOT
75643: OR
75644: IFFALSE 75648
// exit ;
75646: GO 75774
// x := GetX ( enemy ) ;
75648: LD_ADDR_VAR 0 4
75652: PUSH
75653: LD_VAR 0 2
75657: PPUSH
75658: CALL_OW 250
75662: ST_TO_ADDR
// y := GetY ( enemy ) ;
75663: LD_ADDR_VAR 0 5
75667: PUSH
75668: LD_VAR 0 2
75672: PPUSH
75673: CALL_OW 251
75677: ST_TO_ADDR
// if ValidHex ( x , y ) then
75678: LD_VAR 0 4
75682: PPUSH
75683: LD_VAR 0 5
75687: PPUSH
75688: CALL_OW 488
75692: IFFALSE 75774
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
75694: LD_VAR 0 2
75698: PPUSH
75699: CALL_OW 247
75703: PUSH
75704: LD_INT 3
75706: PUSH
75707: LD_INT 2
75709: PUSH
75710: EMPTY
75711: LIST
75712: LIST
75713: IN
75714: IFTRUE 75737
75716: PUSH
75717: LD_VAR 0 1
75721: PPUSH
75722: CALL_OW 255
75726: PPUSH
75727: LD_VAR 0 2
75731: PPUSH
75732: CALL_OW 292
75736: OR
75737: IFFALSE 75755
// ComAttackUnit ( unit , enemy ) else
75739: LD_VAR 0 1
75743: PPUSH
75744: LD_VAR 0 2
75748: PPUSH
75749: CALL_OW 115
75753: GO 75774
// ComAgressiveMove ( unit , x , y ) ;
75755: LD_VAR 0 1
75759: PPUSH
75760: LD_VAR 0 4
75764: PPUSH
75765: LD_VAR 0 5
75769: PPUSH
75770: CALL_OW 114
// end ;
75774: LD_VAR 0 3
75778: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
75779: LD_INT 0
75781: PPUSH
75782: PPUSH
75783: PPUSH
// list := AreaToList ( area , 0 ) ;
75784: LD_ADDR_VAR 0 5
75788: PUSH
75789: LD_VAR 0 1
75793: PPUSH
75794: LD_INT 0
75796: PPUSH
75797: CALL_OW 517
75801: ST_TO_ADDR
// if not list then
75802: LD_VAR 0 5
75806: NOT
75807: IFFALSE 75811
// exit ;
75809: GO 75941
// if all then
75811: LD_VAR 0 2
75815: IFFALSE 75903
// begin for i := 1 to list [ 1 ] do
75817: LD_ADDR_VAR 0 4
75821: PUSH
75822: DOUBLE
75823: LD_INT 1
75825: DEC
75826: ST_TO_ADDR
75827: LD_VAR 0 5
75831: PUSH
75832: LD_INT 1
75834: ARRAY
75835: PUSH
75836: FOR_TO
75837: IFFALSE 75899
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
75839: LD_ADDR_VAR 0 3
75843: PUSH
75844: LD_VAR 0 3
75848: PPUSH
75849: LD_VAR 0 3
75853: PUSH
75854: LD_INT 1
75856: PLUS
75857: PPUSH
75858: LD_VAR 0 5
75862: PUSH
75863: LD_INT 1
75865: ARRAY
75866: PUSH
75867: LD_VAR 0 4
75871: ARRAY
75872: PUSH
75873: LD_VAR 0 5
75877: PUSH
75878: LD_INT 2
75880: ARRAY
75881: PUSH
75882: LD_VAR 0 4
75886: ARRAY
75887: PUSH
75888: EMPTY
75889: LIST
75890: LIST
75891: PPUSH
75892: CALL_OW 1
75896: ST_TO_ADDR
75897: GO 75836
75899: POP
75900: POP
// exit ;
75901: GO 75941
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
75903: LD_ADDR_VAR 0 3
75907: PUSH
75908: LD_VAR 0 5
75912: PUSH
75913: LD_INT 1
75915: ARRAY
75916: PUSH
75917: LD_INT 1
75919: ARRAY
75920: PUSH
75921: LD_VAR 0 5
75925: PUSH
75926: LD_INT 2
75928: ARRAY
75929: PUSH
75930: LD_INT 1
75932: ARRAY
75933: PUSH
75934: EMPTY
75935: LIST
75936: LIST
75937: PUSH
75938: EMPTY
75939: LIST
75940: ST_TO_ADDR
// end ;
75941: LD_VAR 0 3
75945: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
75946: LD_INT 0
75948: PPUSH
75949: PPUSH
// list := AreaToList ( area , 0 ) ;
75950: LD_ADDR_VAR 0 4
75954: PUSH
75955: LD_VAR 0 1
75959: PPUSH
75960: LD_INT 0
75962: PPUSH
75963: CALL_OW 517
75967: ST_TO_ADDR
// if not list then
75968: LD_VAR 0 4
75972: NOT
75973: IFFALSE 75977
// exit ;
75975: GO 76018
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
75977: LD_ADDR_VAR 0 3
75981: PUSH
75982: LD_VAR 0 4
75986: PUSH
75987: LD_INT 1
75989: ARRAY
75990: PUSH
75991: LD_INT 1
75993: ARRAY
75994: PUSH
75995: LD_VAR 0 4
75999: PUSH
76000: LD_INT 2
76002: ARRAY
76003: PUSH
76004: LD_INT 1
76006: ARRAY
76007: PUSH
76008: LD_VAR 0 2
76012: PUSH
76013: EMPTY
76014: LIST
76015: LIST
76016: LIST
76017: ST_TO_ADDR
// end ;
76018: LD_VAR 0 3
76022: RET
// export function First ( array ) ; begin
76023: LD_INT 0
76025: PPUSH
// if not array then
76026: LD_VAR 0 1
76030: NOT
76031: IFFALSE 76035
// exit ;
76033: GO 76049
// result := array [ 1 ] ;
76035: LD_ADDR_VAR 0 2
76039: PUSH
76040: LD_VAR 0 1
76044: PUSH
76045: LD_INT 1
76047: ARRAY
76048: ST_TO_ADDR
// end ;
76049: LD_VAR 0 2
76053: RET
// export function Last ( array ) ; begin
76054: LD_INT 0
76056: PPUSH
// if not array then
76057: LD_VAR 0 1
76061: NOT
76062: IFFALSE 76066
// exit ;
76064: GO 76082
// result := array [ array ] ;
76066: LD_ADDR_VAR 0 2
76070: PUSH
76071: LD_VAR 0 1
76075: PUSH
76076: LD_VAR 0 1
76080: ARRAY
76081: ST_TO_ADDR
// end ;
76082: LD_VAR 0 2
76086: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
76087: LD_INT 0
76089: PPUSH
76090: PPUSH
// result := [ ] ;
76091: LD_ADDR_VAR 0 5
76095: PUSH
76096: EMPTY
76097: ST_TO_ADDR
// if not array then
76098: LD_VAR 0 1
76102: NOT
76103: IFFALSE 76107
// exit ;
76105: GO 76219
// for i := 1 to array do
76107: LD_ADDR_VAR 0 6
76111: PUSH
76112: DOUBLE
76113: LD_INT 1
76115: DEC
76116: ST_TO_ADDR
76117: LD_VAR 0 1
76121: PUSH
76122: FOR_TO
76123: IFFALSE 76217
// if array [ i ] [ index ] = value then
76125: LD_VAR 0 1
76129: PUSH
76130: LD_VAR 0 6
76134: ARRAY
76135: PUSH
76136: LD_VAR 0 2
76140: ARRAY
76141: PUSH
76142: LD_VAR 0 3
76146: EQUAL
76147: IFFALSE 76215
// begin if indexColumn then
76149: LD_VAR 0 4
76153: IFFALSE 76189
// result := Join ( result , array [ i ] [ indexColumn ] ) else
76155: LD_ADDR_VAR 0 5
76159: PUSH
76160: LD_VAR 0 5
76164: PPUSH
76165: LD_VAR 0 1
76169: PUSH
76170: LD_VAR 0 6
76174: ARRAY
76175: PUSH
76176: LD_VAR 0 4
76180: ARRAY
76181: PPUSH
76182: CALL 71227 0 2
76186: ST_TO_ADDR
76187: GO 76215
// result := Join ( result , array [ i ] ) ;
76189: LD_ADDR_VAR 0 5
76193: PUSH
76194: LD_VAR 0 5
76198: PPUSH
76199: LD_VAR 0 1
76203: PUSH
76204: LD_VAR 0 6
76208: ARRAY
76209: PPUSH
76210: CALL 71227 0 2
76214: ST_TO_ADDR
// end ;
76215: GO 76122
76217: POP
76218: POP
// end ;
76219: LD_VAR 0 5
76223: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
76224: LD_INT 0
76226: PPUSH
// if not vehicles or not parkingPoint then
76227: LD_VAR 0 1
76231: NOT
76232: IFTRUE 76241
76234: PUSH
76235: LD_VAR 0 2
76239: NOT
76240: OR
76241: IFFALSE 76245
// exit ;
76243: GO 76343
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
76245: LD_ADDR_VAR 0 1
76249: PUSH
76250: LD_VAR 0 1
76254: PPUSH
76255: LD_INT 50
76257: PUSH
76258: EMPTY
76259: LIST
76260: PUSH
76261: LD_INT 3
76263: PUSH
76264: LD_INT 92
76266: PUSH
76267: LD_VAR 0 2
76271: PUSH
76272: LD_INT 1
76274: ARRAY
76275: PUSH
76276: LD_VAR 0 2
76280: PUSH
76281: LD_INT 2
76283: ARRAY
76284: PUSH
76285: LD_INT 8
76287: PUSH
76288: EMPTY
76289: LIST
76290: LIST
76291: LIST
76292: LIST
76293: PUSH
76294: EMPTY
76295: LIST
76296: LIST
76297: PUSH
76298: EMPTY
76299: LIST
76300: LIST
76301: PPUSH
76302: CALL_OW 72
76306: ST_TO_ADDR
// if not vehicles then
76307: LD_VAR 0 1
76311: NOT
76312: IFFALSE 76316
// exit ;
76314: GO 76343
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
76316: LD_VAR 0 1
76320: PPUSH
76321: LD_VAR 0 2
76325: PUSH
76326: LD_INT 1
76328: ARRAY
76329: PPUSH
76330: LD_VAR 0 2
76334: PUSH
76335: LD_INT 2
76337: ARRAY
76338: PPUSH
76339: CALL_OW 111
// end ;
76343: LD_VAR 0 3
76347: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
76348: LD_INT 0
76350: PPUSH
76351: PPUSH
76352: PPUSH
// if not side or not area then
76353: LD_VAR 0 1
76357: NOT
76358: IFTRUE 76367
76360: PUSH
76361: LD_VAR 0 2
76365: NOT
76366: OR
76367: IFFALSE 76371
// exit ;
76369: GO 76490
// tmp := AreaToList ( area , 0 ) ;
76371: LD_ADDR_VAR 0 5
76375: PUSH
76376: LD_VAR 0 2
76380: PPUSH
76381: LD_INT 0
76383: PPUSH
76384: CALL_OW 517
76388: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
76389: LD_ADDR_VAR 0 4
76393: PUSH
76394: DOUBLE
76395: LD_INT 1
76397: DEC
76398: ST_TO_ADDR
76399: LD_VAR 0 5
76403: PUSH
76404: LD_INT 1
76406: ARRAY
76407: PUSH
76408: FOR_TO
76409: IFFALSE 76488
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
76411: LD_VAR 0 5
76415: PUSH
76416: LD_INT 1
76418: ARRAY
76419: PUSH
76420: LD_VAR 0 4
76424: ARRAY
76425: PPUSH
76426: LD_VAR 0 5
76430: PUSH
76431: LD_INT 2
76433: ARRAY
76434: PUSH
76435: LD_VAR 0 4
76439: ARRAY
76440: PPUSH
76441: CALL_OW 351
76445: IFFALSE 76486
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
76447: LD_VAR 0 5
76451: PUSH
76452: LD_INT 1
76454: ARRAY
76455: PUSH
76456: LD_VAR 0 4
76460: ARRAY
76461: PPUSH
76462: LD_VAR 0 5
76466: PUSH
76467: LD_INT 2
76469: ARRAY
76470: PUSH
76471: LD_VAR 0 4
76475: ARRAY
76476: PPUSH
76477: LD_VAR 0 1
76481: PPUSH
76482: CALL_OW 244
// end ;
76486: GO 76408
76488: POP
76489: POP
// end ;
76490: LD_VAR 0 3
76494: RET
// export function UniqueArray ( array ) ; var i ; begin
76495: LD_INT 0
76497: PPUSH
76498: PPUSH
// result := [ ] ;
76499: LD_ADDR_VAR 0 2
76503: PUSH
76504: EMPTY
76505: ST_TO_ADDR
// if not array then
76506: LD_VAR 0 1
76510: NOT
76511: IFFALSE 76515
// exit ;
76513: GO 76576
// for i := 1 to array do
76515: LD_ADDR_VAR 0 3
76519: PUSH
76520: DOUBLE
76521: LD_INT 1
76523: DEC
76524: ST_TO_ADDR
76525: LD_VAR 0 1
76529: PUSH
76530: FOR_TO
76531: IFFALSE 76574
// if not array [ i ] in result then
76533: LD_VAR 0 1
76537: PUSH
76538: LD_VAR 0 3
76542: ARRAY
76543: PUSH
76544: LD_VAR 0 2
76548: IN
76549: NOT
76550: IFFALSE 76572
// result := Join ( result , i ) ;
76552: LD_ADDR_VAR 0 2
76556: PUSH
76557: LD_VAR 0 2
76561: PPUSH
76562: LD_VAR 0 3
76566: PPUSH
76567: CALL 71227 0 2
76571: ST_TO_ADDR
76572: GO 76530
76574: POP
76575: POP
// end ; end_of_file
76576: LD_VAR 0 2
76580: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76581: LD_VAR 0 1
76585: PUSH
76586: LD_INT 200
76588: DOUBLE
76589: GREATEREQUAL
76590: IFFALSE 76598
76592: LD_INT 299
76594: DOUBLE
76595: LESSEQUAL
76596: IFTRUE 76600
76598: GO 76632
76600: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76601: LD_VAR 0 1
76605: PPUSH
76606: LD_VAR 0 2
76610: PPUSH
76611: LD_VAR 0 3
76615: PPUSH
76616: LD_VAR 0 4
76620: PPUSH
76621: LD_VAR 0 5
76625: PPUSH
76626: CALL 11458 0 5
76630: GO 76709
76632: LD_INT 300
76634: DOUBLE
76635: GREATEREQUAL
76636: IFFALSE 76644
76638: LD_INT 399
76640: DOUBLE
76641: LESSEQUAL
76642: IFTRUE 76646
76644: GO 76708
76646: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76647: LD_VAR 0 1
76651: PPUSH
76652: LD_VAR 0 2
76656: PPUSH
76657: LD_VAR 0 3
76661: PPUSH
76662: LD_VAR 0 4
76666: PPUSH
76667: LD_VAR 0 5
76671: PPUSH
76672: LD_VAR 0 6
76676: PPUSH
76677: LD_VAR 0 7
76681: PPUSH
76682: LD_VAR 0 8
76686: PPUSH
76687: LD_VAR 0 9
76691: PPUSH
76692: LD_VAR 0 10
76696: PPUSH
76697: LD_VAR 0 11
76701: PPUSH
76702: CALL 29624 0 11
76706: GO 76709
76708: POP
// end ;
76709: PPOPN 11
76711: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76712: LD_VAR 0 1
76716: PPUSH
76717: LD_VAR 0 2
76721: PPUSH
76722: LD_VAR 0 3
76726: PPUSH
76727: LD_VAR 0 4
76731: PPUSH
76732: LD_VAR 0 5
76736: PPUSH
76737: CALL 10839 0 5
// end ; end_of_file
76741: PPOPN 5
76743: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76744: LD_VAR 0 1
76748: PPUSH
76749: LD_VAR 0 2
76753: PPUSH
76754: LD_VAR 0 3
76758: PPUSH
76759: LD_VAR 0 4
76763: PPUSH
76764: LD_VAR 0 5
76768: PPUSH
76769: LD_VAR 0 6
76773: PPUSH
76774: CALL 17164 0 6
// end ;
76778: PPOPN 6
76780: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
76781: LD_INT 0
76783: PPUSH
// begin if not units then
76784: LD_VAR 0 1
76788: NOT
76789: IFFALSE 76793
// exit ;
76791: GO 76827
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
76793: LD_VAR 0 1
76797: PPUSH
76798: LD_VAR 0 2
76802: PPUSH
76803: LD_VAR 0 3
76807: PPUSH
76808: LD_VAR 0 4
76812: PPUSH
76813: LD_VAR 0 5
76817: PPUSH
76818: LD_VAR 0 6
76822: PPUSH
76823: CALL 16965 0 6
// end ;
76827: PPOPN 7
76829: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
76830: CALL 17051 0 0
// end ;
76834: PPOPN 1
76836: END
