// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 98 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 24
// Difficulty := 2 else
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 2
  21: ST_TO_ADDR
  22: GO 37
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  24: LD_ADDR_OWVAR 67
  28: PUSH
  29: LD_INT 0
  31: PPUSH
  32: CALL_OW 426
  36: ST_TO_ADDR
// PrepareNature ( 3 , 3 , 4 , 2 , 1 , 0 , 0 , natureArea , 0 ) ;
  37: LD_INT 3
  39: PPUSH
  40: LD_INT 3
  42: PPUSH
  43: LD_INT 4
  45: PPUSH
  46: LD_INT 2
  48: PPUSH
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 0
  54: PPUSH
  55: LD_INT 0
  57: PPUSH
  58: LD_INT 8
  60: PPUSH
  61: LD_INT 0
  63: PPUSH
  64: CALL 62338 0 9
// PrepareRussian ;
  68: CALL 896 0 0
// PrepareAmerican ;
  72: CALL 202 0 0
// PrepareSikorski ;
  76: CALL 694 0 0
// Action ;
  80: CALL 7066 0 0
// if debug then
  84: LD_EXP 1
  88: IFFALSE 97
// FogOff ( 1 ) ;
  90: LD_INT 1
  92: PPUSH
  93: CALL_OW 344
// end ;
  97: END
// export debug , activeGrishkoAI , allowToPatrol , spottedByPatrol , russianAlert , startAttackOnOmicron , omicronFall , retreatFromOmicron , sikorskiInOmicron , usLoseCounter , ruLoseCounter , tanksCounter ; function Init ; begin
  98: LD_INT 0
 100: PPUSH
// debug := 0 ;
 101: LD_ADDR_EXP 1
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// activeGrishkoAI := true ;
 109: LD_ADDR_EXP 2
 113: PUSH
 114: LD_INT 1
 116: ST_TO_ADDR
// allowToPatrol := true ;
 117: LD_ADDR_EXP 3
 121: PUSH
 122: LD_INT 1
 124: ST_TO_ADDR
// spottedByPatrol := false ;
 125: LD_ADDR_EXP 4
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// russianAlert := false ;
 133: LD_ADDR_EXP 5
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// startAttackOnOmicron := false ;
 141: LD_ADDR_EXP 6
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// omicronFall := false ;
 149: LD_ADDR_EXP 7
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// retreatFromOmicron := false ;
 157: LD_ADDR_EXP 8
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// sikorskiInOmicron := false ;
 165: LD_ADDR_EXP 9
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// usLoseCounter := 0 ;
 173: LD_ADDR_EXP 10
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// ruLoseCounter := 0 ;
 181: LD_ADDR_EXP 11
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// tanksCounter := 0 ;
 189: LD_ADDR_EXP 12
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// end ; end_of_file
 197: LD_VAR 0 1
 201: RET
// export omicronSquad , Sikorski , Harrison ; export function PrepareAmerican ; var i , un , veh ; begin
 202: LD_INT 0
 204: PPUSH
 205: PPUSH
 206: PPUSH
 207: PPUSH
// SetBName ( omikron , omikron ) ;
 208: LD_INT 64
 210: PPUSH
 211: LD_STRING omikron
 213: PPUSH
 214: CALL_OW 500
// uc_side := 4 ;
 218: LD_ADDR_OWVAR 20
 222: PUSH
 223: LD_INT 4
 225: ST_TO_ADDR
// uc_nation := 1 ;
 226: LD_ADDR_OWVAR 21
 230: PUSH
 231: LD_INT 1
 233: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
 234: LD_ADDR_EXP 15
 238: PUSH
 239: LD_STRING Harisson
 241: PPUSH
 242: LD_INT 0
 244: PPUSH
 245: LD_STRING 
 247: PPUSH
 248: CALL 28975 0 3
 252: ST_TO_ADDR
// omicronSquad := [ ] ;
 253: LD_ADDR_EXP 13
 257: PUSH
 258: EMPTY
 259: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
 260: LD_ADDR_VAR 0 2
 264: PUSH
 265: LD_INT 22
 267: PUSH
 268: LD_INT 4
 270: PUSH
 271: EMPTY
 272: LIST
 273: LIST
 274: PUSH
 275: LD_INT 2
 277: PUSH
 278: LD_INT 30
 280: PUSH
 281: LD_INT 32
 283: PUSH
 284: EMPTY
 285: LIST
 286: LIST
 287: PUSH
 288: LD_INT 30
 290: PUSH
 291: LD_INT 31
 293: PUSH
 294: EMPTY
 295: LIST
 296: LIST
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: LIST
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PPUSH
 307: CALL_OW 69
 311: PUSH
 312: FOR_IN
 313: IFFALSE 393
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
 315: LD_INT 1
 317: PPUSH
 318: LD_INT 1
 320: PPUSH
 321: LD_INT 1
 323: PPUSH
 324: CALL_OW 380
// un := CreateHuman ;
 328: LD_ADDR_VAR 0 3
 332: PUSH
 333: CALL_OW 44
 337: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 338: LD_ADDR_EXP 13
 342: PUSH
 343: LD_EXP 13
 347: PUSH
 348: LD_VAR 0 3
 352: UNION
 353: ST_TO_ADDR
// SetDir ( un , GetDir ( i ) - 3 ) ;
 354: LD_VAR 0 3
 358: PPUSH
 359: LD_VAR 0 2
 363: PPUSH
 364: CALL_OW 254
 368: PUSH
 369: LD_INT 3
 371: MINUS
 372: PPUSH
 373: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
 377: LD_VAR 0 3
 381: PPUSH
 382: LD_VAR 0 2
 386: PPUSH
 387: CALL_OW 52
// end ;
 391: GO 312
 393: POP
 394: POP
// for i := 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
 395: LD_ADDR_VAR 0 2
 399: PUSH
 400: DOUBLE
 401: LD_INT 1
 403: DEC
 404: ST_TO_ADDR
 405: LD_INT 3
 407: PUSH
 408: LD_INT 2
 410: PUSH
 411: LD_INT 2
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: LIST
 418: PUSH
 419: LD_OWVAR 67
 423: ARRAY
 424: PUSH
 425: FOR_TO
 426: IFFALSE 505
// begin PrepareHuman ( false , 2 , 2 ) ;
 428: LD_INT 0
 430: PPUSH
 431: LD_INT 2
 433: PPUSH
 434: LD_INT 2
 436: PPUSH
 437: CALL_OW 380
// un := CreateHuman ;
 441: LD_ADDR_VAR 0 3
 445: PUSH
 446: CALL_OW 44
 450: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 451: LD_ADDR_EXP 13
 455: PUSH
 456: LD_EXP 13
 460: PUSH
 461: LD_VAR 0 3
 465: UNION
 466: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
 467: LD_VAR 0 3
 471: PPUSH
 472: LD_INT 64
 474: PPUSH
 475: CALL_OW 52
// ComExitBuilding ( un ) ;
 479: LD_VAR 0 3
 483: PPUSH
 484: CALL_OW 122
// AddComMoveXY ( un , 19 , 23 ) ;
 488: LD_VAR 0 3
 492: PPUSH
 493: LD_INT 19
 495: PPUSH
 496: LD_INT 23
 498: PPUSH
 499: CALL_OW 171
// end ;
 503: GO 425
 505: POP
 506: POP
// for i := 1 to 2 do
 507: LD_ADDR_VAR 0 2
 511: PUSH
 512: DOUBLE
 513: LD_INT 1
 515: DEC
 516: ST_TO_ADDR
 517: LD_INT 2
 519: PUSH
 520: FOR_TO
 521: IFFALSE 687
// begin PrepareVehicle ( [ us_medium_wheeled , us_medium_tracked ] [ i ] , engine_solar , control_manual , [ us_light_gun , us_gatling_gun ] [ i ] , 100 ) ;
 523: LD_INT 2
 525: PUSH
 526: LD_INT 3
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_VAR 0 2
 537: ARRAY
 538: PPUSH
 539: LD_INT 2
 541: PPUSH
 542: LD_INT 1
 544: PPUSH
 545: LD_INT 3
 547: PUSH
 548: LD_INT 4
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: PUSH
 555: LD_VAR 0 2
 559: ARRAY
 560: PPUSH
 561: LD_INT 100
 563: PPUSH
 564: CALL 33839 0 5
// veh := CreateVehicle ;
 568: LD_ADDR_VAR 0 4
 572: PUSH
 573: CALL_OW 45
 577: ST_TO_ADDR
// PlaceUnitXYR ( veh , 28 , 37 , 6 , false ) ;
 578: LD_VAR 0 4
 582: PPUSH
 583: LD_INT 28
 585: PPUSH
 586: LD_INT 37
 588: PPUSH
 589: LD_INT 6
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
 599: LD_INT 0
 601: PPUSH
 602: LD_INT 3
 604: PPUSH
 605: LD_INT 2
 607: PPUSH
 608: CALL_OW 380
// un := CreateHuman ;
 612: LD_ADDR_VAR 0 3
 616: PUSH
 617: CALL_OW 44
 621: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
 622: LD_ADDR_EXP 13
 626: PUSH
 627: LD_EXP 13
 631: PUSH
 632: LD_VAR 0 3
 636: UNION
 637: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
 638: LD_VAR 0 3
 642: PPUSH
 643: LD_VAR 0 4
 647: PPUSH
 648: CALL_OW 52
// ComMoveXY ( un , GetX ( un ) + 3 , GetY ( un ) ) ;
 652: LD_VAR 0 3
 656: PPUSH
 657: LD_VAR 0 3
 661: PPUSH
 662: CALL_OW 250
 666: PUSH
 667: LD_INT 3
 669: PLUS
 670: PPUSH
 671: LD_VAR 0 3
 675: PPUSH
 676: CALL_OW 251
 680: PPUSH
 681: CALL_OW 111
// end ;
 685: GO 520
 687: POP
 688: POP
// end ;
 689: LD_VAR 0 1
 693: RET
// export function PrepareSikorski ; var veh ; begin
 694: LD_INT 0
 696: PPUSH
 697: PPUSH
// uc_side := 1 ;
 698: LD_ADDR_OWVAR 20
 702: PUSH
 703: LD_INT 1
 705: ST_TO_ADDR
// uc_nation := 1 ;
 706: LD_ADDR_OWVAR 21
 710: PUSH
 711: LD_INT 1
 713: ST_TO_ADDR
// hc_importance := 100 ;
 714: LD_ADDR_OWVAR 32
 718: PUSH
 719: LD_INT 100
 721: ST_TO_ADDR
// hc_name := Jeremy Sikorski ;
 722: LD_ADDR_OWVAR 26
 726: PUSH
 727: LD_STRING Jeremy Sikorski
 729: ST_TO_ADDR
// hc_gallery := us ;
 730: LD_ADDR_OWVAR 33
 734: PUSH
 735: LD_STRING us
 737: ST_TO_ADDR
// hc_face_number := 19 ;
 738: LD_ADDR_OWVAR 34
 742: PUSH
 743: LD_INT 19
 745: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , [ 4 , 4 , 3 ] [ Difficulty ] ) ;
 746: LD_INT 1
 748: PPUSH
 749: LD_INT 1
 751: PPUSH
 752: LD_INT 4
 754: PUSH
 755: LD_INT 4
 757: PUSH
 758: LD_INT 3
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: LIST
 765: PUSH
 766: LD_OWVAR 67
 770: ARRAY
 771: PPUSH
 772: CALL_OW 380
// hc_attr := [ 10 , 12 ] ;
 776: LD_ADDR_OWVAR 29
 780: PUSH
 781: LD_INT 10
 783: PUSH
 784: LD_INT 12
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: ST_TO_ADDR
// Sikorski := CreateHuman ;
 791: LD_ADDR_EXP 14
 795: PUSH
 796: CALL_OW 44
 800: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_light_gun , 88 ) ;
 801: LD_INT 3
 803: PPUSH
 804: LD_INT 1
 806: PPUSH
 807: LD_INT 1
 809: PPUSH
 810: LD_INT 3
 812: PPUSH
 813: LD_INT 88
 815: PPUSH
 816: CALL 33839 0 5
// veh := CreateVehicle ;
 820: LD_ADDR_VAR 0 2
 824: PUSH
 825: CALL_OW 45
 829: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
 830: LD_VAR 0 2
 834: PPUSH
 835: LD_INT 3
 837: PPUSH
 838: CALL_OW 233
// PlaceUnitXY ( veh , 106 , 2 , false ) ;
 842: LD_VAR 0 2
 846: PPUSH
 847: LD_INT 106
 849: PPUSH
 850: LD_INT 2
 852: PPUSH
 853: LD_INT 0
 855: PPUSH
 856: CALL_OW 48
// PlaceHumanInUnit ( Sikorski , veh ) ;
 860: LD_EXP 14
 864: PPUSH
 865: LD_VAR 0 2
 869: PPUSH
 870: CALL_OW 52
// SetMark ( veh , - 1 ) ;
 874: LD_VAR 0 2
 878: PPUSH
 879: LD_INT 1
 881: NEG
 882: PPUSH
 883: CALL_OW 242
// InitHc ;
 887: CALL_OW 19
// end ; end_of_file
 891: LD_VAR 0 1
 895: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo ; export function PrepareRussian ; var i , un , arm , bar , bun , tmp ; begin
 896: LD_INT 0
 898: PPUSH
 899: PPUSH
 900: PPUSH
 901: PPUSH
 902: PPUSH
 903: PPUSH
 904: PPUSH
// ResetHc ;
 905: CALL 66227 0 0
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
 909: LD_ADDR_VAR 0 2
 913: PUSH
 914: LD_INT 21
 916: PUSH
 917: LD_INT 3
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 23
 926: PUSH
 927: LD_INT 3
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: PPUSH
 938: CALL_OW 69
 942: PUSH
 943: FOR_IN
 944: IFFALSE 960
// SetBLevel ( i , 5 ) ;
 946: LD_VAR 0 2
 950: PPUSH
 951: LD_INT 5
 953: PPUSH
 954: CALL_OW 241
 958: GO 943
 960: POP
 961: POP
// SetBName ( kirov , kirov ) ;
 962: LD_INT 71
 964: PPUSH
 965: LD_STRING kirov
 967: PPUSH
 968: CALL_OW 500
// SetBName ( beria , beria ) ;
 972: LD_INT 106
 974: PPUSH
 975: LD_STRING beria
 977: PPUSH
 978: CALL_OW 500
// SetBName ( kagan , kagan ) ;
 982: LD_INT 112
 984: PPUSH
 985: LD_STRING kagan
 987: PPUSH
 988: CALL_OW 500
// uc_side := 6 ;
 992: LD_ADDR_OWVAR 20
 996: PUSH
 997: LD_INT 6
 999: ST_TO_ADDR
// uc_nation := 3 ;
1000: LD_ADDR_OWVAR 21
1004: PUSH
1005: LD_INT 3
1007: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
1008: LD_ADDR_VAR 0 5
1012: PUSH
1013: LD_INT 22
1015: PUSH
1016: LD_INT 6
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: PUSH
1023: LD_INT 30
1025: PUSH
1026: LD_INT 5
1028: PUSH
1029: EMPTY
1030: LIST
1031: LIST
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: PPUSH
1037: CALL_OW 69
1041: PUSH
1042: LD_INT 1
1044: ARRAY
1045: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
1046: LD_ADDR_VAR 0 4
1050: PUSH
1051: LD_INT 22
1053: PUSH
1054: LD_INT 6
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PUSH
1061: LD_INT 30
1063: PUSH
1064: LD_INT 4
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PPUSH
1075: CALL_OW 69
1079: PUSH
1080: LD_INT 1
1082: ARRAY
1083: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
1084: LD_ADDR_EXP 20
1088: PUSH
1089: EMPTY
1090: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
1091: LD_ADDR_EXP 21
1095: PUSH
1096: EMPTY
1097: ST_TO_ADDR
// russianPatrol := [ ] ;
1098: LD_ADDR_EXP 23
1102: PUSH
1103: EMPTY
1104: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
1105: LD_ADDR_EXP 16
1109: PUSH
1110: LD_STRING Kurin
1112: PPUSH
1113: LD_INT 0
1115: PPUSH
1116: LD_STRING 
1118: PPUSH
1119: CALL 28975 0 3
1123: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
1124: LD_EXP 16
1128: PPUSH
1129: LD_INT 71
1131: PPUSH
1132: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
1136: LD_ADDR_EXP 18
1140: PUSH
1141: LD_STRING Popov
1143: PPUSH
1144: LD_INT 0
1146: PPUSH
1147: LD_STRING 
1149: PPUSH
1150: CALL 28975 0 3
1154: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
1155: LD_EXP 18
1159: PPUSH
1160: LD_INT 71
1162: PPUSH
1163: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
1167: LD_ADDR_EXP 17
1171: PUSH
1172: LD_STRING Grishko
1174: PPUSH
1175: LD_INT 0
1177: PPUSH
1178: LD_STRING 
1180: PPUSH
1181: CALL 28975 0 3
1185: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
1186: LD_EXP 17
1190: PPUSH
1191: LD_INT 207
1193: PPUSH
1194: LD_INT 106
1196: PPUSH
1197: LD_INT 0
1199: PPUSH
1200: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
1204: LD_EXP 17
1208: PPUSH
1209: LD_INT 209
1211: PPUSH
1212: LD_INT 106
1214: PPUSH
1215: CALL_OW 118
// hc_importance := 0 ;
1219: LD_ADDR_OWVAR 32
1223: PUSH
1224: LD_INT 0
1226: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
1227: LD_ADDR_VAR 0 7
1231: PUSH
1232: LD_INT 22
1234: PUSH
1235: LD_INT 6
1237: PUSH
1238: EMPTY
1239: LIST
1240: LIST
1241: PUSH
1242: LD_INT 30
1244: PUSH
1245: LD_INT 32
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: PUSH
1252: EMPTY
1253: LIST
1254: LIST
1255: PPUSH
1256: CALL_OW 69
1260: ST_TO_ADDR
// for i in tmp do
1261: LD_ADDR_VAR 0 2
1265: PUSH
1266: LD_VAR 0 7
1270: PUSH
1271: FOR_IN
1272: IFFALSE 1309
// PlaceWeaponTurret ( i , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] ) ;
1274: LD_VAR 0 2
1278: PPUSH
1279: LD_INT 44
1281: PUSH
1282: LD_INT 43
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PUSH
1289: LD_VAR 0 2
1293: PUSH
1294: LD_INT 2
1296: MOD
1297: PUSH
1298: LD_INT 1
1300: PLUS
1301: ARRAY
1302: PPUSH
1303: CALL_OW 431
1307: GO 1271
1309: POP
1310: POP
// for i := 1 to Difficulty do
1311: LD_ADDR_VAR 0 2
1315: PUSH
1316: DOUBLE
1317: LD_INT 1
1319: DEC
1320: ST_TO_ADDR
1321: LD_OWVAR 67
1325: PUSH
1326: FOR_TO
1327: IFFALSE 1382
// begin PrepareHuman ( false , 2 , 2 ) ;
1329: LD_INT 0
1331: PPUSH
1332: LD_INT 2
1334: PPUSH
1335: LD_INT 2
1337: PPUSH
1338: CALL_OW 380
// un := CreateHuman ;
1342: LD_ADDR_VAR 0 3
1346: PUSH
1347: CALL_OW 44
1351: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
1352: LD_VAR 0 3
1356: PPUSH
1357: LD_INT 71
1359: PPUSH
1360: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1364: LD_ADDR_EXP 20
1368: PUSH
1369: LD_EXP 20
1373: PUSH
1374: LD_VAR 0 3
1378: UNION
1379: ST_TO_ADDR
// end ;
1380: GO 1326
1382: POP
1383: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
1384: LD_ADDR_VAR 0 2
1388: PUSH
1389: DOUBLE
1390: LD_INT 1
1392: DEC
1393: ST_TO_ADDR
1394: LD_INT 5
1396: PUSH
1397: LD_INT 6
1399: PUSH
1400: LD_INT 6
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: LIST
1407: PUSH
1408: LD_OWVAR 67
1412: ARRAY
1413: PUSH
1414: FOR_TO
1415: IFFALSE 1489
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
1417: LD_INT 0
1419: PPUSH
1420: LD_INT 1
1422: PPUSH
1423: LD_INT 2
1425: PUSH
1426: LD_INT 3
1428: PUSH
1429: LD_INT 4
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: LIST
1436: PUSH
1437: LD_OWVAR 67
1441: ARRAY
1442: PPUSH
1443: CALL_OW 380
// un := CreateHuman ;
1447: LD_ADDR_VAR 0 3
1451: PUSH
1452: CALL_OW 44
1456: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
1457: LD_VAR 0 3
1461: PPUSH
1462: LD_VAR 0 5
1466: PPUSH
1467: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1471: LD_ADDR_EXP 20
1475: PUSH
1476: LD_EXP 20
1480: PUSH
1481: LD_VAR 0 3
1485: UNION
1486: ST_TO_ADDR
// end ;
1487: GO 1414
1489: POP
1490: POP
// for i := 1 to 3 do
1491: LD_ADDR_VAR 0 2
1495: PUSH
1496: DOUBLE
1497: LD_INT 1
1499: DEC
1500: ST_TO_ADDR
1501: LD_INT 3
1503: PUSH
1504: FOR_TO
1505: IFFALSE 1560
// begin PrepareHuman ( false , 3 , 3 ) ;
1507: LD_INT 0
1509: PPUSH
1510: LD_INT 3
1512: PPUSH
1513: LD_INT 3
1515: PPUSH
1516: CALL_OW 380
// un := CreateHuman ;
1520: LD_ADDR_VAR 0 3
1524: PUSH
1525: CALL_OW 44
1529: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
1530: LD_VAR 0 3
1534: PPUSH
1535: LD_INT 92
1537: PPUSH
1538: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1542: LD_ADDR_EXP 20
1546: PUSH
1547: LD_EXP 20
1551: PUSH
1552: LD_VAR 0 3
1556: UNION
1557: ST_TO_ADDR
// end ;
1558: GO 1504
1560: POP
1561: POP
// for i := 1 to 2 do
1562: LD_ADDR_VAR 0 2
1566: PUSH
1567: DOUBLE
1568: LD_INT 1
1570: DEC
1571: ST_TO_ADDR
1572: LD_INT 2
1574: PUSH
1575: FOR_TO
1576: IFFALSE 1631
// begin PrepareHuman ( false , 4 , 3 ) ;
1578: LD_INT 0
1580: PPUSH
1581: LD_INT 4
1583: PPUSH
1584: LD_INT 3
1586: PPUSH
1587: CALL_OW 380
// un := CreateHuman ;
1591: LD_ADDR_VAR 0 3
1595: PUSH
1596: CALL_OW 44
1600: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
1601: LD_VAR 0 3
1605: PPUSH
1606: LD_INT 83
1608: PPUSH
1609: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
1613: LD_ADDR_EXP 20
1617: PUSH
1618: LD_EXP 20
1622: PUSH
1623: LD_VAR 0 3
1627: UNION
1628: ST_TO_ADDR
// end ;
1629: GO 1575
1631: POP
1632: POP
// for i := 1 to 5 do
1633: LD_ADDR_VAR 0 2
1637: PUSH
1638: DOUBLE
1639: LD_INT 1
1641: DEC
1642: ST_TO_ADDR
1643: LD_INT 5
1645: PUSH
1646: FOR_TO
1647: IFFALSE 1704
// begin PrepareHuman ( false , 1 , 3 ) ;
1649: LD_INT 0
1651: PPUSH
1652: LD_INT 1
1654: PPUSH
1655: LD_INT 3
1657: PPUSH
1658: CALL_OW 380
// un := CreateHuman ;
1662: LD_ADDR_VAR 0 3
1666: PUSH
1667: CALL_OW 44
1671: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
1672: LD_VAR 0 3
1676: PPUSH
1677: LD_VAR 0 4
1681: PPUSH
1682: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
1686: LD_ADDR_EXP 22
1690: PUSH
1691: LD_EXP 22
1695: PUSH
1696: LD_VAR 0 3
1700: UNION
1701: ST_TO_ADDR
// end ;
1702: GO 1646
1704: POP
1705: POP
// russianCargo := [ ] ;
1706: LD_ADDR_EXP 25
1710: PUSH
1711: EMPTY
1712: ST_TO_ADDR
// for i := 1 to 2 do
1713: LD_ADDR_VAR 0 2
1717: PUSH
1718: DOUBLE
1719: LD_INT 1
1721: DEC
1722: ST_TO_ADDR
1723: LD_INT 2
1725: PUSH
1726: FOR_TO
1727: IFFALSE 1853
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
1729: LD_INT 21
1731: PPUSH
1732: LD_INT 1
1734: PPUSH
1735: LD_INT 1
1737: PPUSH
1738: LD_INT 51
1740: PPUSH
1741: LD_INT 100
1743: PPUSH
1744: CALL 33839 0 5
// un := CreateVehicle ;
1748: LD_ADDR_VAR 0 3
1752: PUSH
1753: CALL_OW 45
1757: ST_TO_ADDR
// russianCargo := russianCargo union un ;
1758: LD_ADDR_EXP 25
1762: PUSH
1763: LD_EXP 25
1767: PUSH
1768: LD_VAR 0 3
1772: UNION
1773: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
1774: LD_VAR 0 3
1778: PPUSH
1779: LD_INT 2
1781: PPUSH
1782: LD_INT 100
1784: PPUSH
1785: CALL_OW 290
// SetDir ( un , 4 ) ;
1789: LD_VAR 0 3
1793: PPUSH
1794: LD_INT 4
1796: PPUSH
1797: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
1801: LD_VAR 0 3
1805: PPUSH
1806: LD_INT 147
1808: PPUSH
1809: LD_INT 103
1811: PPUSH
1812: LD_INT 4
1814: PPUSH
1815: LD_INT 0
1817: PPUSH
1818: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
1822: LD_INT 0
1824: PPUSH
1825: LD_INT 1
1827: PPUSH
1828: LD_OWVAR 67
1832: PPUSH
1833: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
1837: CALL_OW 44
1841: PPUSH
1842: LD_VAR 0 3
1846: PPUSH
1847: CALL_OW 52
// end ;
1851: GO 1726
1853: POP
1854: POP
// uc_side := 3 ;
1855: LD_ADDR_OWVAR 20
1859: PUSH
1860: LD_INT 3
1862: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
1863: LD_ADDR_EXP 19
1867: PUSH
1868: LD_STRING Burlak
1870: PPUSH
1871: LD_INT 0
1873: PPUSH
1874: LD_STRING 
1876: PPUSH
1877: CALL 28975 0 3
1881: ST_TO_ADDR
// ResetHc ;
1882: CALL 66227 0 0
// PrepareHuman ( false , 3 , 2 ) ;
1886: LD_INT 0
1888: PPUSH
1889: LD_INT 3
1891: PPUSH
1892: LD_INT 2
1894: PPUSH
1895: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ruBeriaCargo ) ;
1899: CALL_OW 44
1903: PPUSH
1904: LD_INT 180
1906: PPUSH
1907: CALL_OW 52
// if Difficulty > 1 then
1911: LD_OWVAR 67
1915: PUSH
1916: LD_INT 1
1918: GREATER
1919: IFFALSE 1977
// begin for i := 1 to 3 do
1921: LD_ADDR_VAR 0 2
1925: PUSH
1926: DOUBLE
1927: LD_INT 1
1929: DEC
1930: ST_TO_ADDR
1931: LD_INT 3
1933: PUSH
1934: FOR_TO
1935: IFFALSE 1975
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1937: LD_INT 0
1939: PPUSH
1940: LD_INT 1
1942: PPUSH
1943: LD_OWVAR 67
1947: PPUSH
1948: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 86 , 17 , 3 , false ) ;
1952: CALL_OW 44
1956: PPUSH
1957: LD_INT 86
1959: PPUSH
1960: LD_INT 17
1962: PPUSH
1963: LD_INT 3
1965: PPUSH
1966: LD_INT 0
1968: PPUSH
1969: CALL_OW 50
// end ;
1973: GO 1934
1975: POP
1976: POP
// end ; for i := 1 to 2 do
1977: LD_ADDR_VAR 0 2
1981: PUSH
1982: DOUBLE
1983: LD_INT 1
1985: DEC
1986: ST_TO_ADDR
1987: LD_INT 2
1989: PUSH
1990: FOR_TO
1991: IFFALSE 2031
// begin PrepareHuman ( false , 1 , Difficulty ) ;
1993: LD_INT 0
1995: PPUSH
1996: LD_INT 1
1998: PPUSH
1999: LD_OWVAR 67
2003: PPUSH
2004: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 108 , 153 , 3 , false ) ;
2008: CALL_OW 44
2012: PPUSH
2013: LD_INT 108
2015: PPUSH
2016: LD_INT 153
2018: PPUSH
2019: LD_INT 3
2021: PPUSH
2022: LD_INT 0
2024: PPUSH
2025: CALL_OW 50
// end ;
2029: GO 1990
2031: POP
2032: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
2033: LD_ADDR_VAR 0 7
2037: PUSH
2038: LD_INT 22
2040: PUSH
2041: LD_INT 3
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PUSH
2048: LD_INT 30
2050: PUSH
2051: LD_INT 32
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PPUSH
2062: CALL_OW 69
2066: ST_TO_ADDR
// for i := 1 to tmp do
2067: LD_ADDR_VAR 0 2
2071: PUSH
2072: DOUBLE
2073: LD_INT 1
2075: DEC
2076: ST_TO_ADDR
2077: LD_VAR 0 7
2081: PUSH
2082: FOR_TO
2083: IFFALSE 2191
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
2085: LD_INT 0
2087: PPUSH
2088: LD_INT 1
2090: PPUSH
2091: LD_OWVAR 67
2095: PUSH
2096: LD_INT 1
2098: PLUS
2099: PPUSH
2100: CALL_OW 380
// un := CreateHuman ;
2104: LD_ADDR_VAR 0 3
2108: PUSH
2109: CALL_OW 44
2113: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
2114: LD_VAR 0 3
2118: PPUSH
2119: LD_VAR 0 7
2123: PUSH
2124: LD_VAR 0 2
2128: ARRAY
2129: PPUSH
2130: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2134: LD_ADDR_EXP 21
2138: PUSH
2139: LD_EXP 21
2143: PUSH
2144: LD_VAR 0 3
2148: UNION
2149: ST_TO_ADDR
// PlaceWeaponTurret ( tmp [ i ] , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] ) ;
2150: LD_VAR 0 7
2154: PUSH
2155: LD_VAR 0 2
2159: ARRAY
2160: PPUSH
2161: LD_INT 44
2163: PUSH
2164: LD_INT 43
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PUSH
2171: LD_VAR 0 2
2175: PUSH
2176: LD_INT 2
2178: MOD
2179: PUSH
2180: LD_INT 1
2182: PLUS
2183: ARRAY
2184: PPUSH
2185: CALL_OW 431
// end ;
2189: GO 2082
2191: POP
2192: POP
// for i := 1 to Difficulty + 1 do
2193: LD_ADDR_VAR 0 2
2197: PUSH
2198: DOUBLE
2199: LD_INT 1
2201: DEC
2202: ST_TO_ADDR
2203: LD_OWVAR 67
2207: PUSH
2208: LD_INT 1
2210: PLUS
2211: PUSH
2212: FOR_TO
2213: IFFALSE 2304
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
2215: LD_INT 0
2217: PPUSH
2218: LD_INT 1
2220: PPUSH
2221: LD_OWVAR 67
2225: PUSH
2226: LD_INT 1
2228: PLUS
2229: PPUSH
2230: CALL_OW 380
// un := CreateHuman ;
2234: LD_ADDR_VAR 0 3
2238: PUSH
2239: CALL_OW 44
2243: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
2244: LD_VAR 0 3
2248: PPUSH
2249: LD_INT 22
2251: PUSH
2252: LD_INT 3
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 30
2261: PUSH
2262: LD_INT 5
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PPUSH
2273: CALL_OW 69
2277: PUSH
2278: LD_INT 1
2280: ARRAY
2281: PPUSH
2282: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2286: LD_ADDR_EXP 21
2290: PUSH
2291: LD_EXP 21
2295: PUSH
2296: LD_VAR 0 3
2300: UNION
2301: ST_TO_ADDR
// end ;
2302: GO 2212
2304: POP
2305: POP
// for i := 1 to 2 do
2306: LD_ADDR_VAR 0 2
2310: PUSH
2311: DOUBLE
2312: LD_INT 1
2314: DEC
2315: ST_TO_ADDR
2316: LD_INT 2
2318: PUSH
2319: FOR_TO
2320: IFFALSE 2407
// begin PrepareHuman ( false , 4 , Difficulty ) ;
2322: LD_INT 0
2324: PPUSH
2325: LD_INT 4
2327: PPUSH
2328: LD_OWVAR 67
2332: PPUSH
2333: CALL_OW 380
// un := CreateHuman ;
2337: LD_ADDR_VAR 0 3
2341: PUSH
2342: CALL_OW 44
2346: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
2347: LD_VAR 0 3
2351: PPUSH
2352: LD_INT 22
2354: PUSH
2355: LD_INT 3
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PUSH
2362: LD_INT 30
2364: PUSH
2365: LD_INT 7
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PPUSH
2376: CALL_OW 69
2380: PUSH
2381: LD_INT 1
2383: ARRAY
2384: PPUSH
2385: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2389: LD_ADDR_EXP 21
2393: PUSH
2394: LD_EXP 21
2398: PUSH
2399: LD_VAR 0 3
2403: UNION
2404: ST_TO_ADDR
// end ;
2405: GO 2319
2407: POP
2408: POP
// for i := 1 to Difficulty do
2409: LD_ADDR_VAR 0 2
2413: PUSH
2414: DOUBLE
2415: LD_INT 1
2417: DEC
2418: ST_TO_ADDR
2419: LD_OWVAR 67
2423: PUSH
2424: FOR_TO
2425: IFFALSE 2482
// begin PrepareHuman ( false , 2 , Difficulty ) ;
2427: LD_INT 0
2429: PPUSH
2430: LD_INT 2
2432: PPUSH
2433: LD_OWVAR 67
2437: PPUSH
2438: CALL_OW 380
// un := CreateHuman ;
2442: LD_ADDR_VAR 0 3
2446: PUSH
2447: CALL_OW 44
2451: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
2452: LD_VAR 0 3
2456: PPUSH
2457: LD_INT 106
2459: PPUSH
2460: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2464: LD_ADDR_EXP 21
2468: PUSH
2469: LD_EXP 21
2473: PUSH
2474: LD_VAR 0 3
2478: UNION
2479: ST_TO_ADDR
// end ;
2480: GO 2424
2482: POP
2483: POP
// for i := 1 to 3 do
2484: LD_ADDR_VAR 0 2
2488: PUSH
2489: DOUBLE
2490: LD_INT 1
2492: DEC
2493: ST_TO_ADDR
2494: LD_INT 3
2496: PUSH
2497: FOR_TO
2498: IFFALSE 2620
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
2500: LD_ADDR_VAR 0 6
2504: PUSH
2505: LD_INT 22
2507: PUSH
2508: LD_INT 3
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: PUSH
2515: LD_INT 30
2517: PUSH
2518: LD_INT 31
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PPUSH
2529: CALL_OW 69
2533: PUSH
2534: LD_VAR 0 2
2538: ARRAY
2539: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
2540: LD_INT 0
2542: PPUSH
2543: LD_INT 1
2545: PPUSH
2546: LD_OWVAR 67
2550: PPUSH
2551: CALL_OW 380
// un := CreateHuman ;
2555: LD_ADDR_VAR 0 3
2559: PUSH
2560: CALL_OW 44
2564: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
2565: LD_VAR 0 3
2569: PPUSH
2570: LD_VAR 0 6
2574: PPUSH
2575: CALL_OW 254
2579: PUSH
2580: LD_INT 3
2582: PLUS
2583: PPUSH
2584: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
2588: LD_VAR 0 3
2592: PPUSH
2593: LD_VAR 0 6
2597: PPUSH
2598: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
2602: LD_ADDR_EXP 21
2606: PUSH
2607: LD_EXP 21
2611: PUSH
2612: LD_VAR 0 3
2616: UNION
2617: ST_TO_ADDR
// end ;
2618: GO 2497
2620: POP
2621: POP
// russianOmicronAttackers := [ ] ;
2622: LD_ADDR_EXP 24
2626: PUSH
2627: EMPTY
2628: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2629: LD_ADDR_VAR 0 2
2633: PUSH
2634: DOUBLE
2635: LD_INT 1
2637: DEC
2638: ST_TO_ADDR
2639: LD_INT 4
2641: PUSH
2642: LD_INT 5
2644: PUSH
2645: LD_INT 6
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: LIST
2652: PUSH
2653: LD_OWVAR 67
2657: ARRAY
2658: PUSH
2659: FOR_TO
2660: IFFALSE 2878
// begin PrepareVehicle ( [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
2662: LD_INT 21
2664: PUSH
2665: LD_INT 23
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: PUSH
2672: LD_VAR 0 2
2676: PUSH
2677: LD_INT 2
2679: MOD
2680: PUSH
2681: LD_INT 1
2683: PLUS
2684: ARRAY
2685: PPUSH
2686: LD_INT 1
2688: PPUSH
2689: LD_INT 1
2691: PPUSH
2692: LD_INT 43
2694: PUSH
2695: LD_INT 44
2697: PUSH
2698: LD_INT 42
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: LIST
2705: PUSH
2706: LD_VAR 0 2
2710: PUSH
2711: LD_INT 3
2713: MOD
2714: PUSH
2715: LD_INT 1
2717: PLUS
2718: ARRAY
2719: PPUSH
2720: LD_INT 100
2722: PPUSH
2723: CALL 33839 0 5
// un := CreateVehicle ;
2727: LD_ADDR_VAR 0 3
2731: PUSH
2732: CALL_OW 45
2736: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
2737: LD_VAR 0 3
2741: PPUSH
2742: LD_INT 0
2744: PUSH
2745: LD_INT 5
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: PUSH
2752: LD_INT 1
2754: PPUSH
2755: LD_INT 2
2757: PPUSH
2758: CALL_OW 12
2762: ARRAY
2763: PPUSH
2764: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
2768: LD_ADDR_EXP 24
2772: PUSH
2773: LD_EXP 24
2777: PUSH
2778: LD_VAR 0 3
2782: UNION
2783: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
2784: LD_VAR 0 3
2788: PPUSH
2789: LD_INT 127
2791: PPUSH
2792: LD_INT 89
2794: PPUSH
2795: LD_INT 7
2797: PPUSH
2798: LD_INT 0
2800: PPUSH
2801: CALL_OW 50
// uc_side := 3 ;
2805: LD_ADDR_OWVAR 20
2809: PUSH
2810: LD_INT 3
2812: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
2813: LD_INT 0
2815: PPUSH
2816: LD_INT 3
2818: PPUSH
2819: LD_INT 3
2821: PPUSH
2822: CALL_OW 380
// un := CreateHuman ;
2826: LD_ADDR_VAR 0 3
2830: PUSH
2831: CALL_OW 44
2835: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
2836: LD_ADDR_EXP 24
2840: PUSH
2841: LD_EXP 24
2845: PUSH
2846: LD_VAR 0 3
2850: UNION
2851: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
2852: LD_VAR 0 3
2856: PPUSH
2857: LD_EXP 24
2861: PUSH
2862: LD_EXP 24
2866: PUSH
2867: LD_INT 1
2869: MINUS
2870: ARRAY
2871: PPUSH
2872: CALL_OW 52
// end ;
2876: GO 2659
2878: POP
2879: POP
// for i := 1 to 3 do
2880: LD_ADDR_VAR 0 2
2884: PUSH
2885: DOUBLE
2886: LD_INT 1
2888: DEC
2889: ST_TO_ADDR
2890: LD_INT 3
2892: PUSH
2893: FOR_TO
2894: IFFALSE 2960
// begin PrepareHuman ( false , 1 , Difficulty ) ;
2896: LD_INT 0
2898: PPUSH
2899: LD_INT 1
2901: PPUSH
2902: LD_OWVAR 67
2906: PPUSH
2907: CALL_OW 380
// un := CreateHuman ;
2911: LD_ADDR_VAR 0 3
2915: PUSH
2916: CALL_OW 44
2920: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
2921: LD_ADDR_EXP 24
2925: PUSH
2926: LD_EXP 24
2930: PUSH
2931: LD_VAR 0 3
2935: UNION
2936: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
2937: LD_VAR 0 3
2941: PPUSH
2942: LD_INT 91
2944: PPUSH
2945: LD_INT 60
2947: PPUSH
2948: LD_INT 3
2950: PPUSH
2951: LD_INT 0
2953: PPUSH
2954: CALL_OW 50
// end ;
2958: GO 2893
2960: POP
2961: POP
// end ;
2962: LD_VAR 0 1
2966: RET
// every 0 0$3 do var i ;
2967: GO 2969
2969: DISABLE
2970: LD_INT 0
2972: PPUSH
// begin for i := 1 to 4 do
2973: LD_ADDR_VAR 0 1
2977: PUSH
2978: DOUBLE
2979: LD_INT 1
2981: DEC
2982: ST_TO_ADDR
2983: LD_INT 4
2985: PUSH
2986: FOR_TO
2987: IFFALSE 3006
// ComExitBuilding ( grishkoSquad [ i ] ) ;
2989: LD_EXP 22
2993: PUSH
2994: LD_VAR 0 1
2998: ARRAY
2999: PPUSH
3000: CALL_OW 122
3004: GO 2986
3006: POP
3007: POP
// wait ( 3 ) ;
3008: LD_INT 3
3010: PPUSH
3011: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
3015: LD_EXP 22
3019: PUSH
3020: LD_INT 1
3022: ARRAY
3023: PPUSH
3024: LD_INT 22
3026: PUSH
3027: LD_INT 6
3029: PUSH
3030: EMPTY
3031: LIST
3032: LIST
3033: PUSH
3034: LD_INT 30
3036: PUSH
3037: LD_INT 31
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PPUSH
3048: CALL_OW 69
3052: PPUSH
3053: LD_EXP 22
3057: PUSH
3058: LD_INT 1
3060: ARRAY
3061: PPUSH
3062: CALL_OW 74
3066: PPUSH
3067: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
3071: LD_EXP 22
3075: PUSH
3076: LD_INT 2
3078: ARRAY
3079: PPUSH
3080: LD_INT 211
3082: PPUSH
3083: LD_INT 107
3085: PPUSH
3086: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
3090: LD_EXP 22
3094: PUSH
3095: LD_INT 2
3097: ARRAY
3098: PPUSH
3099: LD_INT 209
3101: PPUSH
3102: LD_INT 106
3104: PPUSH
3105: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
3109: LD_EXP 22
3113: PUSH
3114: LD_INT 3
3116: ARRAY
3117: PPUSH
3118: LD_INT 209
3120: PPUSH
3121: LD_INT 103
3123: PPUSH
3124: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
3128: LD_EXP 22
3132: PUSH
3133: LD_INT 3
3135: ARRAY
3136: PPUSH
3137: LD_INT 209
3139: PPUSH
3140: LD_INT 106
3142: PPUSH
3143: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
3147: LD_EXP 22
3151: PUSH
3152: LD_INT 4
3154: ARRAY
3155: PPUSH
3156: LD_INT 227
3158: PPUSH
3159: LD_INT 117
3161: PPUSH
3162: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
3166: LD_EXP 22
3170: PUSH
3171: LD_INT 4
3173: ARRAY
3174: PPUSH
3175: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
3179: LD_INT 700
3181: PPUSH
3182: CALL_OW 67
// for i := 3 downto 2 do
3186: LD_ADDR_VAR 0 1
3190: PUSH
3191: DOUBLE
3192: LD_INT 3
3194: INC
3195: ST_TO_ADDR
3196: LD_INT 2
3198: PUSH
3199: FOR_DOWNTO
3200: IFFALSE 3367
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
3202: LD_EXP 22
3206: PUSH
3207: LD_VAR 0 1
3211: ARRAY
3212: PPUSH
3213: LD_INT 200
3215: PPUSH
3216: LD_INT 91
3218: PPUSH
3219: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3223: LD_EXP 22
3227: PUSH
3228: LD_VAR 0 1
3232: ARRAY
3233: PPUSH
3234: LD_INT 210
3236: PPUSH
3237: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
3241: LD_EXP 22
3245: PUSH
3246: LD_VAR 0 1
3250: ARRAY
3251: PPUSH
3252: LD_INT 224
3254: PPUSH
3255: LD_INT 93
3257: PPUSH
3258: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3262: LD_EXP 22
3266: PUSH
3267: LD_VAR 0 1
3271: ARRAY
3272: PPUSH
3273: LD_INT 210
3275: PPUSH
3276: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
3280: LD_EXP 22
3284: PUSH
3285: LD_VAR 0 1
3289: ARRAY
3290: PPUSH
3291: LD_INT 239
3293: PPUSH
3294: LD_INT 123
3296: PPUSH
3297: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
3301: LD_EXP 22
3305: PUSH
3306: LD_VAR 0 1
3310: ARRAY
3311: PPUSH
3312: LD_INT 210
3314: PPUSH
3315: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
3319: LD_EXP 22
3323: PUSH
3324: LD_VAR 0 1
3328: ARRAY
3329: PPUSH
3330: LD_INT 212
3332: PPUSH
3333: LD_INT 105
3335: PPUSH
3336: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
3340: LD_EXP 22
3344: PUSH
3345: LD_VAR 0 1
3349: ARRAY
3350: PPUSH
3351: LD_INT 700
3353: PPUSH
3354: CALL_OW 202
// wait ( 0 0$30 ) ;
3358: LD_INT 1050
3360: PPUSH
3361: CALL_OW 67
// end ;
3365: GO 3199
3367: POP
3368: POP
// until not activeGrishkoAI ;
3369: LD_EXP 2
3373: NOT
3374: IFFALSE 3179
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
3376: LD_EXP 22
3380: PPUSH
3381: LD_INT 221
3383: PPUSH
3384: LD_INT 110
3386: PPUSH
3387: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
3391: LD_EXP 22
3395: PPUSH
3396: LD_INT 228
3398: PPUSH
3399: LD_INT 115
3401: PPUSH
3402: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
3406: LD_EXP 22
3410: PPUSH
3411: CALL_OW 200
// end ;
3415: PPOPN 1
3417: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
3418: LD_EXP 3
3422: IFFALSE 4056
3424: GO 3426
3426: DISABLE
3427: LD_INT 0
3429: PPUSH
3430: PPUSH
3431: PPUSH
3432: PPUSH
// begin uc_side := 6 ;
3433: LD_ADDR_OWVAR 20
3437: PUSH
3438: LD_INT 6
3440: ST_TO_ADDR
// uc_nation := 3 ;
3441: LD_ADDR_OWVAR 21
3445: PUSH
3446: LD_INT 3
3448: ST_TO_ADDR
// ResetHc ;
3449: CALL 66227 0 0
// for i := 1 to 3 do
3453: LD_ADDR_VAR 0 2
3457: PUSH
3458: DOUBLE
3459: LD_INT 1
3461: DEC
3462: ST_TO_ADDR
3463: LD_INT 3
3465: PUSH
3466: FOR_TO
3467: IFFALSE 3576
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
3469: LD_INT 0
3471: PPUSH
3472: LD_INT 1
3474: PPUSH
3475: LD_INT 2
3477: PUSH
3478: LD_INT 3
3480: PUSH
3481: LD_INT 4
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: LIST
3488: PUSH
3489: LD_OWVAR 67
3493: ARRAY
3494: PPUSH
3495: CALL_OW 380
// un := CreateHuman ;
3499: LD_ADDR_VAR 0 1
3503: PUSH
3504: CALL_OW 44
3508: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
3509: LD_ADDR_EXP 23
3513: PUSH
3514: LD_EXP 23
3518: PUSH
3519: LD_VAR 0 1
3523: UNION
3524: ST_TO_ADDR
// SetTag ( un , 1 ) ;
3525: LD_VAR 0 1
3529: PPUSH
3530: LD_INT 1
3532: PPUSH
3533: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
3537: LD_VAR 0 1
3541: PPUSH
3542: LD_INT 3
3544: PPUSH
3545: LD_INT 0
3547: PPUSH
3548: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
3552: LD_VAR 0 1
3556: PPUSH
3557: LD_INT 210
3559: PPUSH
3560: LD_INT 159
3562: PPUSH
3563: CALL_OW 111
// wait ( 0 0$2 ) ;
3567: LD_INT 70
3569: PPUSH
3570: CALL_OW 67
// end ;
3574: GO 3466
3576: POP
3577: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 208 , 42 ] ] ] ;
3578: LD_ADDR_VAR 0 4
3582: PUSH
3583: LD_INT 172
3585: PUSH
3586: LD_INT 76
3588: PUSH
3589: EMPTY
3590: LIST
3591: LIST
3592: PUSH
3593: LD_INT 150
3595: PUSH
3596: LD_INT 38
3598: PUSH
3599: EMPTY
3600: LIST
3601: LIST
3602: PUSH
3603: LD_INT 148
3605: PUSH
3606: LD_INT 9
3608: PUSH
3609: EMPTY
3610: LIST
3611: LIST
3612: PUSH
3613: LD_INT 165
3615: PUSH
3616: LD_INT 38
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: PUSH
3623: EMPTY
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: PUSH
3629: LD_INT 191
3631: PUSH
3632: LD_INT 77
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: LD_INT 168
3641: PUSH
3642: LD_INT 42
3644: PUSH
3645: EMPTY
3646: LIST
3647: LIST
3648: PUSH
3649: LD_INT 166
3651: PUSH
3652: LD_INT 11
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: PUSH
3659: LD_INT 151
3661: PUSH
3662: LD_INT 12
3664: PUSH
3665: EMPTY
3666: LIST
3667: LIST
3668: PUSH
3669: EMPTY
3670: LIST
3671: LIST
3672: LIST
3673: LIST
3674: PUSH
3675: LD_INT 221
3677: PUSH
3678: LD_INT 88
3680: PUSH
3681: EMPTY
3682: LIST
3683: LIST
3684: PUSH
3685: LD_INT 217
3687: PUSH
3688: LD_INT 64
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: PUSH
3695: LD_INT 208
3697: PUSH
3698: LD_INT 42
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: LIST
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: LIST
3714: ST_TO_ADDR
// repeat wait ( 0 0$5 ) ;
3715: LD_INT 175
3717: PPUSH
3718: CALL_OW 67
// for i := 1 to patrol do
3722: LD_ADDR_VAR 0 2
3726: PUSH
3727: DOUBLE
3728: LD_INT 1
3730: DEC
3731: ST_TO_ADDR
3732: LD_VAR 0 4
3736: PUSH
3737: FOR_TO
3738: IFFALSE 4020
// begin if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
3740: LD_EXP 23
3744: PUSH
3745: LD_VAR 0 2
3749: ARRAY
3750: PPUSH
3751: CALL_OW 256
3755: PUSH
3756: LD_INT 990
3758: LESS
3759: PUSH
3760: LD_EXP 23
3764: PUSH
3765: LD_VAR 0 2
3769: ARRAY
3770: PPUSH
3771: CALL_OW 110
3775: PUSH
3776: LD_INT 1
3778: EQUAL
3779: AND
3780: IFFALSE 3808
// begin spottedByPatrol := true ;
3782: LD_ADDR_EXP 4
3786: PUSH
3787: LD_INT 1
3789: ST_TO_ADDR
// SetTag ( russianPatrol [ i ] , 2 ) ;
3790: LD_EXP 23
3794: PUSH
3795: LD_VAR 0 2
3799: ARRAY
3800: PPUSH
3801: LD_INT 2
3803: PPUSH
3804: CALL_OW 109
// end ; if GetTag ( russianPatrol [ i ] ) = 2 then
3808: LD_EXP 23
3812: PUSH
3813: LD_VAR 0 2
3817: ARRAY
3818: PPUSH
3819: CALL_OW 110
3823: PUSH
3824: LD_INT 2
3826: EQUAL
3827: IFFALSE 3918
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
3829: LD_EXP 23
3833: PUSH
3834: LD_VAR 0 2
3838: ARRAY
3839: PPUSH
3840: LD_INT 166
3842: PPUSH
3843: LD_INT 101
3845: PPUSH
3846: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
3850: LD_EXP 23
3854: PUSH
3855: LD_VAR 0 2
3859: ARRAY
3860: PPUSH
3861: LD_INT 71
3863: PPUSH
3864: CALL_OW 296
3868: PUSH
3869: LD_INT 10
3871: LESS
3872: IFFALSE 3916
// begin kirovBaseSquad := kirovBaseSquad union russianPatrol [ i ] ;
3874: LD_ADDR_EXP 20
3878: PUSH
3879: LD_EXP 20
3883: PUSH
3884: LD_EXP 23
3888: PUSH
3889: LD_VAR 0 2
3893: ARRAY
3894: UNION
3895: ST_TO_ADDR
// russianPatrol := Delete ( russianPatrol , i ) ;
3896: LD_ADDR_EXP 23
3900: PUSH
3901: LD_EXP 23
3905: PPUSH
3906: LD_VAR 0 2
3910: PPUSH
3911: CALL_OW 3
3915: ST_TO_ADDR
// end ; continue ;
3916: GO 3737
// end ; if not HasTask ( russianPatrol [ i ] ) then
3918: LD_EXP 23
3922: PUSH
3923: LD_VAR 0 2
3927: ARRAY
3928: PPUSH
3929: CALL_OW 314
3933: NOT
3934: IFFALSE 4018
// for j in patrol [ i ] do
3936: LD_ADDR_VAR 0 3
3940: PUSH
3941: LD_VAR 0 4
3945: PUSH
3946: LD_VAR 0 2
3950: ARRAY
3951: PUSH
3952: FOR_IN
3953: IFFALSE 4016
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
3955: LD_EXP 23
3959: PUSH
3960: LD_VAR 0 2
3964: ARRAY
3965: PPUSH
3966: LD_INT 35
3968: PPUSH
3969: LD_INT 175
3971: PPUSH
3972: CALL_OW 12
3976: PPUSH
3977: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
3981: LD_EXP 23
3985: PUSH
3986: LD_VAR 0 2
3990: ARRAY
3991: PPUSH
3992: LD_VAR 0 3
3996: PUSH
3997: LD_INT 1
3999: ARRAY
4000: PPUSH
4001: LD_VAR 0 3
4005: PUSH
4006: LD_INT 2
4008: ARRAY
4009: PPUSH
4010: CALL_OW 174
// end ;
4014: GO 3952
4016: POP
4017: POP
// end ;
4018: GO 3737
4020: POP
4021: POP
// until not russianPatrol or russianAlert ;
4022: LD_EXP 23
4026: NOT
4027: PUSH
4028: LD_EXP 5
4032: OR
4033: IFFALSE 3715
// if russianPatrol then
4035: LD_EXP 23
4039: IFFALSE 4056
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
4041: LD_EXP 23
4045: PPUSH
4046: LD_INT 161
4048: PPUSH
4049: LD_INT 107
4051: PPUSH
4052: CALL_OW 114
// end ;
4056: PPOPN 4
4058: END
// every 0 0$1 trigger startAttackOnOmicron and not retreatFromOmicron do var i , filter , tmp , enemy , x , points , point ;
4059: LD_EXP 6
4063: PUSH
4064: LD_EXP 8
4068: NOT
4069: AND
4070: IFFALSE 4640
4072: GO 4074
4074: DISABLE
4075: LD_INT 0
4077: PPUSH
4078: PPUSH
4079: PPUSH
4080: PPUSH
4081: PPUSH
4082: PPUSH
4083: PPUSH
// begin enable ;
4084: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
4085: LD_ADDR_VAR 0 2
4089: PUSH
4090: LD_EXP 24
4094: PPUSH
4095: LD_INT 21
4097: PUSH
4098: LD_INT 2
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: PPUSH
4105: CALL_OW 72
4109: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 1 ] ) ;
4110: LD_ADDR_VAR 0 4
4114: PUSH
4115: LD_INT 22
4117: PUSH
4118: LD_INT 1
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: PPUSH
4125: CALL_OW 69
4129: ST_TO_ADDR
// points := [ [ 44 , 15 ] , [ 54 , 39 ] ] ;
4130: LD_ADDR_VAR 0 6
4134: PUSH
4135: LD_INT 44
4137: PUSH
4138: LD_INT 15
4140: PUSH
4141: EMPTY
4142: LIST
4143: LIST
4144: PUSH
4145: LD_INT 54
4147: PUSH
4148: LD_INT 39
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: ST_TO_ADDR
// for i in filter do
4159: LD_ADDR_VAR 0 1
4163: PUSH
4164: LD_VAR 0 2
4168: PUSH
4169: FOR_IN
4170: IFFALSE 4638
// begin tmp := IsDrivenBy ( i ) ;
4172: LD_ADDR_VAR 0 3
4176: PUSH
4177: LD_VAR 0 1
4181: PPUSH
4182: CALL_OW 311
4186: ST_TO_ADDR
// if not tmp then
4187: LD_VAR 0 3
4191: NOT
4192: IFFALSE 4196
// continue ;
4194: GO 4169
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
4196: LD_VAR 0 1
4200: PPUSH
4201: CALL_OW 261
4205: PUSH
4206: LD_INT 90
4208: GREATER
4209: PUSH
4210: LD_VAR 0 1
4214: PPUSH
4215: CALL_OW 110
4219: PUSH
4220: LD_INT 2
4222: EQUAL
4223: AND
4224: IFFALSE 4240
// SetTag ( i , 0 ) else
4226: LD_VAR 0 1
4230: PPUSH
4231: LD_INT 0
4233: PPUSH
4234: CALL_OW 109
4238: GO 4336
// if GetTag ( i ) = 2 then
4240: LD_VAR 0 1
4244: PPUSH
4245: CALL_OW 110
4249: PUSH
4250: LD_INT 2
4252: EQUAL
4253: IFFALSE 4336
// begin x := rand ( 1 , 2 ) ;
4255: LD_ADDR_VAR 0 5
4259: PUSH
4260: LD_INT 1
4262: PPUSH
4263: LD_INT 2
4265: PPUSH
4266: CALL_OW 12
4270: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
4271: LD_VAR 0 1
4275: PPUSH
4276: LD_EXP 25
4280: PUSH
4281: LD_VAR 0 5
4285: ARRAY
4286: PPUSH
4287: CALL_OW 172
// if GetCargo ( russianCargo [ x ] , mat_oil ) < 20 then
4291: LD_EXP 25
4295: PUSH
4296: LD_VAR 0 5
4300: ARRAY
4301: PPUSH
4302: LD_INT 2
4304: PPUSH
4305: CALL_OW 289
4309: PUSH
4310: LD_INT 20
4312: LESS
4313: IFFALSE 4336
// SetCargo ( russianCargo [ x ] , mat_oil , 100 ) ;
4315: LD_EXP 25
4319: PUSH
4320: LD_VAR 0 5
4324: ARRAY
4325: PPUSH
4326: LD_INT 2
4328: PPUSH
4329: LD_INT 100
4331: PPUSH
4332: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
4336: LD_VAR 0 1
4340: PPUSH
4341: CALL_OW 256
4345: PUSH
4346: LD_INT 600
4348: GREATEREQUAL
4349: PUSH
4350: LD_VAR 0 1
4354: PPUSH
4355: CALL_OW 110
4359: NOT
4360: AND
4361: IFFALSE 4387
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4363: LD_VAR 0 1
4367: PPUSH
4368: LD_VAR 0 4
4372: PPUSH
4373: LD_VAR 0 1
4377: PPUSH
4378: CALL_OW 74
4382: PPUSH
4383: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
4387: LD_VAR 0 1
4391: PPUSH
4392: CALL_OW 256
4396: PUSH
4397: LD_INT 600
4399: LESS
4400: PUSH
4401: LD_VAR 0 1
4405: PPUSH
4406: CALL_OW 110
4410: NOT
4411: AND
4412: IFFALSE 4488
// begin SetTag ( i , 1 ) ;
4414: LD_VAR 0 1
4418: PPUSH
4419: LD_INT 1
4421: PPUSH
4422: CALL_OW 109
// point := GetNearestPoint ( i , points ) ;
4426: LD_ADDR_VAR 0 7
4430: PUSH
4431: LD_VAR 0 1
4435: PPUSH
4436: LD_VAR 0 6
4440: PPUSH
4441: CALL 68949 0 2
4445: ST_TO_ADDR
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
4446: LD_VAR 0 1
4450: PPUSH
4451: LD_VAR 0 7
4455: PUSH
4456: LD_INT 1
4458: ARRAY
4459: PPUSH
4460: LD_VAR 0 7
4464: PUSH
4465: LD_INT 2
4467: ARRAY
4468: PPUSH
4469: CALL_OW 111
// AddComMoveXY ( i , 71 , 29 ) ;
4473: LD_VAR 0 1
4477: PPUSH
4478: LD_INT 71
4480: PPUSH
4481: LD_INT 29
4483: PPUSH
4484: CALL_OW 171
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 71 , 29 ) < 9 and tmp then
4488: LD_VAR 0 1
4492: PPUSH
4493: CALL_OW 110
4497: PUSH
4498: LD_INT 1
4500: EQUAL
4501: PUSH
4502: LD_VAR 0 1
4506: PPUSH
4507: LD_INT 71
4509: PPUSH
4510: LD_INT 29
4512: PPUSH
4513: CALL_OW 297
4517: PUSH
4518: LD_INT 9
4520: LESS
4521: AND
4522: PUSH
4523: LD_VAR 0 3
4527: AND
4528: IFFALSE 4636
// begin ComExitVehicle ( tmp ) ;
4530: LD_VAR 0 3
4534: PPUSH
4535: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4539: LD_VAR 0 3
4543: PPUSH
4544: LD_VAR 0 1
4548: PPUSH
4549: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4553: LD_INT 35
4555: PPUSH
4556: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4560: LD_VAR 0 1
4564: PPUSH
4565: CALL_OW 256
4569: PUSH
4570: LD_INT 1000
4572: EQUAL
4573: IFFALSE 4553
// ComEnterUnit ( tmp , i ) ;
4575: LD_VAR 0 3
4579: PPUSH
4580: LD_VAR 0 1
4584: PPUSH
4585: CALL_OW 120
// if GetFuel ( i ) <= 90 and russianCargo then
4589: LD_VAR 0 1
4593: PPUSH
4594: CALL_OW 261
4598: PUSH
4599: LD_INT 90
4601: LESSEQUAL
4602: PUSH
4603: LD_EXP 25
4607: AND
4608: IFFALSE 4624
// SetTag ( i , 2 ) else
4610: LD_VAR 0 1
4614: PPUSH
4615: LD_INT 2
4617: PPUSH
4618: CALL_OW 109
4622: GO 4636
// SetTag ( i , 0 ) ;
4624: LD_VAR 0 1
4628: PPUSH
4629: LD_INT 0
4631: PPUSH
4632: CALL_OW 109
// end ; end ;
4636: GO 4169
4638: POP
4639: POP
// end ;
4640: PPOPN 7
4642: END
// every 0 0$30 trigger startAttackOnOmicron and not retreatFromOmicron and russianOmicronAttackers < [ 12 , 14 , 16 ] [ Difficulty ] do
4643: LD_EXP 6
4647: PUSH
4648: LD_EXP 8
4652: NOT
4653: AND
4654: PUSH
4655: LD_EXP 24
4659: PUSH
4660: LD_INT 12
4662: PUSH
4663: LD_INT 14
4665: PUSH
4666: LD_INT 16
4668: PUSH
4669: EMPTY
4670: LIST
4671: LIST
4672: LIST
4673: PUSH
4674: LD_OWVAR 67
4678: ARRAY
4679: LESS
4680: AND
4681: IFFALSE 4694
4683: GO 4685
4685: DISABLE
// begin enable ;
4686: ENABLE
// ProduceNew ( 0 ) ;
4687: LD_INT 0
4689: PPUSH
4690: CALL 4695 0 1
// end ;
4694: END
// export function ProduceNew ( type ) ; var un ; begin
4695: LD_INT 0
4697: PPUSH
4698: PPUSH
// uc_side := 3 ;
4699: LD_ADDR_OWVAR 20
4703: PUSH
4704: LD_INT 3
4706: ST_TO_ADDR
// uc_nation := 3 ;
4707: LD_ADDR_OWVAR 21
4711: PUSH
4712: LD_INT 3
4714: ST_TO_ADDR
// ResetHc ;
4715: CALL 66227 0 0
// PrepareHuman ( false , 3 , [ 3 , 4 , 5 ] [ Difficulty ] ) ;
4719: LD_INT 0
4721: PPUSH
4722: LD_INT 3
4724: PPUSH
4725: LD_INT 3
4727: PUSH
4728: LD_INT 4
4730: PUSH
4731: LD_INT 5
4733: PUSH
4734: EMPTY
4735: LIST
4736: LIST
4737: LIST
4738: PUSH
4739: LD_OWVAR 67
4743: ARRAY
4744: PPUSH
4745: CALL_OW 380
// un := CreateHuman ;
4749: LD_ADDR_VAR 0 3
4753: PUSH
4754: CALL_OW 44
4758: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruBeriaFac ) ;
4759: LD_VAR 0 3
4763: PPUSH
4764: LD_INT 143
4766: PPUSH
4767: CALL_OW 52
// if type = 1 then
4771: LD_VAR 0 1
4775: PUSH
4776: LD_INT 1
4778: EQUAL
4779: IFFALSE 4802
// AddComConstruct ( ruBeriaFac , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay ) else
4781: LD_INT 143
4783: PPUSH
4784: LD_INT 21
4786: PPUSH
4787: LD_INT 1
4789: PPUSH
4790: LD_INT 1
4792: PPUSH
4793: LD_INT 51
4795: PPUSH
4796: CALL_OW 185
4800: GO 4881
// AddComConstruct ( ruBeriaFac , [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] [ rand ( 1 , Difficulty + 1 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ rand ( 1 , 4 ) ] ) ;
4802: LD_INT 143
4804: PPUSH
4805: LD_INT 21
4807: PUSH
4808: LD_INT 22
4810: PUSH
4811: LD_INT 23
4813: PUSH
4814: LD_INT 24
4816: PUSH
4817: EMPTY
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: PUSH
4823: LD_INT 1
4825: PPUSH
4826: LD_OWVAR 67
4830: PUSH
4831: LD_INT 1
4833: PLUS
4834: PPUSH
4835: CALL_OW 12
4839: ARRAY
4840: PPUSH
4841: LD_INT 1
4843: PPUSH
4844: LD_INT 1
4846: PPUSH
4847: LD_INT 44
4849: PUSH
4850: LD_INT 44
4852: PUSH
4853: LD_INT 43
4855: PUSH
4856: LD_INT 42
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: PUSH
4865: LD_INT 1
4867: PPUSH
4868: LD_INT 4
4870: PPUSH
4871: CALL_OW 12
4875: ARRAY
4876: PPUSH
4877: CALL_OW 185
// end ;
4881: LD_VAR 0 2
4885: RET
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
4886: LD_EXP 8
4890: IFFALSE 5092
4892: GO 4894
4894: DISABLE
4895: LD_INT 0
4897: PPUSH
4898: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
4899: LD_EXP 25
4903: PPUSH
4904: LD_INT 79
4906: PPUSH
4907: LD_INT 155
4909: PPUSH
4910: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
4914: LD_EXP 25
4918: PPUSH
4919: LD_INT 4
4921: PPUSH
4922: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
4926: LD_ADDR_VAR 0 2
4930: PUSH
4931: LD_EXP 24
4935: PPUSH
4936: LD_INT 50
4938: PUSH
4939: EMPTY
4940: LIST
4941: PPUSH
4942: CALL_OW 72
4946: ST_TO_ADDR
// for i in tmp do
4947: LD_ADDR_VAR 0 1
4951: PUSH
4952: LD_VAR 0 2
4956: PUSH
4957: FOR_IN
4958: IFFALSE 4992
// begin ComAgressiveMove ( i , 123 , 60 ) ;
4960: LD_VAR 0 1
4964: PPUSH
4965: LD_INT 123
4967: PPUSH
4968: LD_INT 60
4970: PPUSH
4971: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
4975: LD_VAR 0 1
4979: PPUSH
4980: LD_INT 153
4982: PPUSH
4983: LD_INT 103
4985: PPUSH
4986: CALL_OW 174
// end ;
4990: GO 4957
4992: POP
4993: POP
// repeat wait ( 0 0$1 ) ;
4994: LD_INT 35
4996: PPUSH
4997: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
5001: LD_ADDR_VAR 0 2
5005: PUSH
5006: LD_EXP 24
5010: PPUSH
5011: LD_INT 50
5013: PUSH
5014: EMPTY
5015: LIST
5016: PPUSH
5017: CALL_OW 72
5021: ST_TO_ADDR
// for i in tmp do
5022: LD_ADDR_VAR 0 1
5026: PUSH
5027: LD_VAR 0 2
5031: PUSH
5032: FOR_IN
5033: IFFALSE 5083
// if not HasTask ( i ) then
5035: LD_VAR 0 1
5039: PPUSH
5040: CALL_OW 314
5044: NOT
5045: IFFALSE 5081
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) until not tmp ;
5047: LD_VAR 0 1
5051: PPUSH
5052: LD_INT 81
5054: PUSH
5055: LD_INT 3
5057: PUSH
5058: EMPTY
5059: LIST
5060: LIST
5061: PPUSH
5062: CALL_OW 69
5066: PPUSH
5067: LD_VAR 0 1
5071: PPUSH
5072: CALL_OW 74
5076: PPUSH
5077: CALL_OW 115
5081: GO 5032
5083: POP
5084: POP
5085: LD_VAR 0 2
5089: NOT
5090: IFFALSE 4994
// end ;
5092: PPOPN 2
5094: END
// every 0 0$2 trigger FilterUnitsInArea ( eastKirovArea , [ f_enemy , 6 ] ) do
5095: LD_INT 5
5097: PPUSH
5098: LD_INT 81
5100: PUSH
5101: LD_INT 6
5103: PUSH
5104: EMPTY
5105: LIST
5106: LIST
5107: PPUSH
5108: CALL_OW 70
5112: IFFALSE 5125
5114: GO 5116
5116: DISABLE
// russianAlert := true ;
5117: LD_ADDR_EXP 5
5121: PUSH
5122: LD_INT 1
5124: ST_TO_ADDR
5125: END
// every 0 0$1 trigger IsOk ( Beria ) and GetSide ( Beria ) = 3 and GetResourceType ( GetBase ( Beria ) , mat_cans ) < 100 do
5126: LD_INT 106
5128: PPUSH
5129: CALL_OW 302
5133: PUSH
5134: LD_INT 106
5136: PPUSH
5137: CALL_OW 255
5141: PUSH
5142: LD_INT 3
5144: EQUAL
5145: AND
5146: PUSH
5147: LD_INT 106
5149: PPUSH
5150: CALL_OW 274
5154: PPUSH
5155: LD_INT 1
5157: PPUSH
5158: CALL_OW 275
5162: PUSH
5163: LD_INT 100
5165: LESS
5166: AND
5167: IFFALSE 5191
5169: GO 5171
5171: DISABLE
// begin enable ;
5172: ENABLE
// AddResourceType ( GetBase ( beria ) , mat_cans , 200 ) ;
5173: LD_INT 106
5175: PPUSH
5176: CALL_OW 274
5180: PPUSH
5181: LD_INT 1
5183: PPUSH
5184: LD_INT 200
5186: PPUSH
5187: CALL_OW 276
// end ;
5191: END
// every 0 0$1 do var i , un , tmp ;
5192: GO 5194
5194: DISABLE
5195: LD_INT 0
5197: PPUSH
5198: PPUSH
5199: PPUSH
// begin uc_side := 3 ;
5200: LD_ADDR_OWVAR 20
5204: PUSH
5205: LD_INT 3
5207: ST_TO_ADDR
// uc_nation := 3 ;
5208: LD_ADDR_OWVAR 21
5212: PUSH
5213: LD_INT 3
5215: ST_TO_ADDR
// tmp := [ ] ;
5216: LD_ADDR_VAR 0 3
5220: PUSH
5221: EMPTY
5222: ST_TO_ADDR
// for i := 1 to 2 do
5223: LD_ADDR_VAR 0 1
5227: PUSH
5228: DOUBLE
5229: LD_INT 1
5231: DEC
5232: ST_TO_ADDR
5233: LD_INT 2
5235: PUSH
5236: FOR_TO
5237: IFFALSE 5314
// begin PrepareHuman ( false , 2 , 2 ) ;
5239: LD_INT 0
5241: PPUSH
5242: LD_INT 2
5244: PPUSH
5245: LD_INT 2
5247: PPUSH
5248: CALL_OW 380
// un := CreateHuman ;
5252: LD_ADDR_VAR 0 2
5256: PUSH
5257: CALL_OW 44
5261: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
5262: LD_ADDR_VAR 0 3
5266: PUSH
5267: LD_VAR 0 3
5271: PPUSH
5272: LD_VAR 0 3
5276: PUSH
5277: LD_INT 1
5279: PLUS
5280: PPUSH
5281: LD_VAR 0 2
5285: PPUSH
5286: CALL_OW 1
5290: ST_TO_ADDR
// PlaceUnitXYR ( un , 74 , 112 , 3 , false ) ;
5291: LD_VAR 0 2
5295: PPUSH
5296: LD_INT 74
5298: PPUSH
5299: LD_INT 112
5301: PPUSH
5302: LD_INT 3
5304: PPUSH
5305: LD_INT 0
5307: PPUSH
5308: CALL_OW 50
// end ;
5312: GO 5236
5314: POP
5315: POP
// AddResourceType ( GetBase ( kagan ) , mat_oil , 100 ) ;
5316: LD_INT 112
5318: PPUSH
5319: CALL_OW 274
5323: PPUSH
5324: LD_INT 2
5326: PPUSH
5327: LD_INT 100
5329: PPUSH
5330: CALL_OW 276
// repeat wait ( 0 0$1 ) ;
5334: LD_INT 35
5336: PPUSH
5337: CALL_OW 67
// for i in tmp do
5341: LD_ADDR_VAR 0 1
5345: PUSH
5346: LD_VAR 0 3
5350: PUSH
5351: FOR_IN
5352: IFFALSE 5434
// begin if IsDead ( i ) then
5354: LD_VAR 0 1
5358: PPUSH
5359: CALL_OW 301
5363: IFFALSE 5381
// tmp := tmp diff i ;
5365: LD_ADDR_VAR 0 3
5369: PUSH
5370: LD_VAR 0 3
5374: PUSH
5375: LD_VAR 0 1
5379: DIFF
5380: ST_TO_ADDR
// if not HasTask ( i ) and not Carry ( i ) then
5381: LD_VAR 0 1
5385: PPUSH
5386: CALL_OW 314
5390: NOT
5391: PUSH
5392: LD_VAR 0 1
5396: PPUSH
5397: CALL_OW 281
5401: NOT
5402: AND
5403: IFFALSE 5432
// begin ComTransport ( i , kagan , mat_oil ) ;
5405: LD_VAR 0 1
5409: PPUSH
5410: LD_INT 112
5412: PPUSH
5413: LD_INT 2
5415: PPUSH
5416: CALL_OW 151
// AddComGive ( i , beria ) ;
5420: LD_VAR 0 1
5424: PPUSH
5425: LD_INT 106
5427: PPUSH
5428: CALL_OW 221
// end ; end ;
5432: GO 5351
5434: POP
5435: POP
// until not tmp or IsDead ( kagan ) or IsDead ( beria ) ;
5436: LD_VAR 0 3
5440: NOT
5441: PUSH
5442: LD_INT 112
5444: PPUSH
5445: CALL_OW 301
5449: OR
5450: PUSH
5451: LD_INT 106
5453: PPUSH
5454: CALL_OW 301
5458: OR
5459: IFFALSE 5334
// end ;
5461: PPOPN 3
5463: END
// every 0 0$01 do var i , j , skr , cargo , dep ;
5464: GO 5466
5466: DISABLE
5467: LD_INT 0
5469: PPUSH
5470: PPUSH
5471: PPUSH
5472: PPUSH
5473: PPUSH
// begin enable ;
5474: ENABLE
// cargo := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] , [ f_lives , 600 ] ] ) ;
5475: LD_ADDR_VAR 0 4
5479: PUSH
5480: LD_INT 22
5482: PUSH
5483: LD_INT 3
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: PUSH
5490: LD_INT 34
5492: PUSH
5493: LD_INT 51
5495: PUSH
5496: EMPTY
5497: LIST
5498: LIST
5499: PUSH
5500: LD_INT 24
5502: PUSH
5503: LD_INT 600
5505: PUSH
5506: EMPTY
5507: LIST
5508: LIST
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: LIST
5514: PPUSH
5515: CALL_OW 69
5519: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
5520: LD_ADDR_VAR 0 5
5524: PUSH
5525: LD_INT 22
5527: PUSH
5528: LD_INT 3
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: PUSH
5535: LD_INT 2
5537: PUSH
5538: LD_INT 30
5540: PUSH
5541: LD_INT 0
5543: PUSH
5544: EMPTY
5545: LIST
5546: LIST
5547: PUSH
5548: LD_INT 30
5550: PUSH
5551: LD_INT 1
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: LIST
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: PPUSH
5567: CALL_OW 69
5571: ST_TO_ADDR
// skr = GetListOfCratesInArea ( ruCratesCollectArea ) ;
5572: LD_ADDR_VAR 0 3
5576: PUSH
5577: LD_INT 9
5579: PPUSH
5580: CALL_OW 435
5584: ST_TO_ADDR
// if not cargo or not skr or not dep then
5585: LD_VAR 0 4
5589: NOT
5590: PUSH
5591: LD_VAR 0 3
5595: NOT
5596: OR
5597: PUSH
5598: LD_VAR 0 5
5602: NOT
5603: OR
5604: IFFALSE 5608
// exit ;
5606: GO 5772
// for i in cargo do
5608: LD_ADDR_VAR 0 1
5612: PUSH
5613: LD_VAR 0 4
5617: PUSH
5618: FOR_IN
5619: IFFALSE 5770
// begin if not skr then
5621: LD_VAR 0 3
5625: NOT
5626: IFFALSE 5632
// exit ;
5628: POP
5629: POP
5630: GO 5772
// if not HasTask ( i ) then
5632: LD_VAR 0 1
5636: PPUSH
5637: CALL_OW 314
5641: NOT
5642: IFFALSE 5711
// begin ComCollect ( i , skr [ 1 ] , skr [ 2 ] ) ;
5644: LD_VAR 0 1
5648: PPUSH
5649: LD_VAR 0 3
5653: PUSH
5654: LD_INT 1
5656: ARRAY
5657: PPUSH
5658: LD_VAR 0 3
5662: PUSH
5663: LD_INT 2
5665: ARRAY
5666: PPUSH
5667: CALL_OW 117
// for j := 1 to 2 do
5671: LD_ADDR_VAR 0 2
5675: PUSH
5676: DOUBLE
5677: LD_INT 1
5679: DEC
5680: ST_TO_ADDR
5681: LD_INT 2
5683: PUSH
5684: FOR_TO
5685: IFFALSE 5707
// skr := Delete ( skr , 1 ) ;
5687: LD_ADDR_VAR 0 3
5691: PUSH
5692: LD_VAR 0 3
5696: PPUSH
5697: LD_INT 1
5699: PPUSH
5700: CALL_OW 3
5704: ST_TO_ADDR
5705: GO 5684
5707: POP
5708: POP
// end else
5709: GO 5768
// if GetFuel ( i ) < 3 and GetDistUnits ( i , NearestUnitToUnit ( dep , i ) ) < 6 then
5711: LD_VAR 0 1
5715: PPUSH
5716: CALL_OW 261
5720: PUSH
5721: LD_INT 3
5723: LESS
5724: PUSH
5725: LD_VAR 0 1
5729: PPUSH
5730: LD_VAR 0 5
5734: PPUSH
5735: LD_VAR 0 1
5739: PPUSH
5740: CALL_OW 74
5744: PPUSH
5745: CALL_OW 296
5749: PUSH
5750: LD_INT 6
5752: LESS
5753: AND
5754: IFFALSE 5768
// SetFuel ( i , 100 ) ;
5756: LD_VAR 0 1
5760: PPUSH
5761: LD_INT 100
5763: PPUSH
5764: CALL_OW 240
// end ;
5768: GO 5618
5770: POP
5771: POP
// end ;
5772: PPOPN 5
5774: END
// export function SendSupport ; var i , un ; begin
5775: LD_INT 0
5777: PPUSH
5778: PPUSH
5779: PPUSH
// uc_nation := 3 ;
5780: LD_ADDR_OWVAR 21
5784: PUSH
5785: LD_INT 3
5787: ST_TO_ADDR
// uc_side := 3 ;
5788: LD_ADDR_OWVAR 20
5792: PUSH
5793: LD_INT 3
5795: ST_TO_ADDR
// ResetHc ;
5796: CALL 66227 0 0
// for i := 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
5800: LD_ADDR_VAR 0 2
5804: PUSH
5805: DOUBLE
5806: LD_INT 1
5808: DEC
5809: ST_TO_ADDR
5810: LD_INT 3
5812: PUSH
5813: LD_INT 3
5815: PUSH
5816: LD_INT 4
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: LIST
5823: PUSH
5824: LD_OWVAR 67
5828: ARRAY
5829: PUSH
5830: FOR_TO
5831: IFFALSE 5905
// begin PrepareHuman ( false , 1 , Difficulty ) ;
5833: LD_INT 0
5835: PPUSH
5836: LD_INT 1
5838: PPUSH
5839: LD_OWVAR 67
5843: PPUSH
5844: CALL_OW 380
// un := CreateHuman ;
5848: LD_ADDR_VAR 0 3
5852: PUSH
5853: CALL_OW 44
5857: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
5858: LD_VAR 0 3
5862: PPUSH
5863: LD_INT 107
5865: PPUSH
5866: LD_INT 95
5868: PPUSH
5869: LD_INT 4
5871: PPUSH
5872: LD_INT 0
5874: PPUSH
5875: CALL_OW 50
// ComAgressiveMove ( un , 56 , 27 ) ;
5879: LD_VAR 0 3
5883: PPUSH
5884: LD_INT 56
5886: PPUSH
5887: LD_INT 27
5889: PPUSH
5890: CALL_OW 114
// AddComHold ( un ) ;
5894: LD_VAR 0 3
5898: PPUSH
5899: CALL_OW 200
// end ;
5903: GO 5830
5905: POP
5906: POP
// PrepareHuman ( false , 4 , Difficulty ) ;
5907: LD_INT 0
5909: PPUSH
5910: LD_INT 4
5912: PPUSH
5913: LD_OWVAR 67
5917: PPUSH
5918: CALL_OW 380
// un := CreateHuman ;
5922: LD_ADDR_VAR 0 3
5926: PUSH
5927: CALL_OW 44
5931: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
5932: LD_VAR 0 3
5936: PPUSH
5937: LD_INT 107
5939: PPUSH
5940: LD_INT 95
5942: PPUSH
5943: LD_INT 4
5945: PPUSH
5946: LD_INT 0
5948: PPUSH
5949: CALL_OW 50
// ComMoveXY ( un , 59 , 25 ) ;
5953: LD_VAR 0 3
5957: PPUSH
5958: LD_INT 59
5960: PPUSH
5961: LD_INT 25
5963: PPUSH
5964: CALL_OW 111
// if Difficulty > 1 then
5968: LD_OWVAR 67
5972: PUSH
5973: LD_INT 1
5975: GREATER
5976: IFFALSE 6085
// begin for i := 1 to [ 2 , 2 , 3 ] [ Difficulty ] do
5978: LD_ADDR_VAR 0 2
5982: PUSH
5983: DOUBLE
5984: LD_INT 1
5986: DEC
5987: ST_TO_ADDR
5988: LD_INT 2
5990: PUSH
5991: LD_INT 2
5993: PUSH
5994: LD_INT 3
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: LIST
6001: PUSH
6002: LD_OWVAR 67
6006: ARRAY
6007: PUSH
6008: FOR_TO
6009: IFFALSE 6083
// begin PrepareHuman ( false , 1 , Difficulty ) ;
6011: LD_INT 0
6013: PPUSH
6014: LD_INT 1
6016: PPUSH
6017: LD_OWVAR 67
6021: PPUSH
6022: CALL_OW 380
// un := CreateHuman ;
6026: LD_ADDR_VAR 0 3
6030: PUSH
6031: CALL_OW 44
6035: ST_TO_ADDR
// PlaceUnitXYR ( un , 107 , 95 , 4 , false ) ;
6036: LD_VAR 0 3
6040: PPUSH
6041: LD_INT 107
6043: PPUSH
6044: LD_INT 95
6046: PPUSH
6047: LD_INT 4
6049: PPUSH
6050: LD_INT 0
6052: PPUSH
6053: CALL_OW 50
// ComAgressiveMove ( un , 45 , 76 ) ;
6057: LD_VAR 0 3
6061: PPUSH
6062: LD_INT 45
6064: PPUSH
6065: LD_INT 76
6067: PPUSH
6068: CALL_OW 114
// AddComHold ( un ) ;
6072: LD_VAR 0 3
6076: PPUSH
6077: CALL_OW 200
// end ;
6081: GO 6008
6083: POP
6084: POP
// end ; end ;
6085: LD_VAR 0 1
6089: RET
// every 6 6$00 trigger tick >= 20 20$00 and Difficulty > 1 and russianOmicronAttackers > 4 and not retreatFromOmicron do var i , un , tmp , path ;
6090: LD_OWVAR 1
6094: PUSH
6095: LD_INT 42000
6097: GREATEREQUAL
6098: PUSH
6099: LD_OWVAR 67
6103: PUSH
6104: LD_INT 1
6106: GREATER
6107: AND
6108: PUSH
6109: LD_EXP 24
6113: PUSH
6114: LD_INT 4
6116: GREATER
6117: AND
6118: PUSH
6119: LD_EXP 8
6123: NOT
6124: AND
6125: IFFALSE 6418
6127: GO 6129
6129: DISABLE
6130: LD_INT 0
6132: PPUSH
6133: PPUSH
6134: PPUSH
6135: PPUSH
// begin enable ;
6136: ENABLE
// tmp := [ ] ;
6137: LD_ADDR_VAR 0 3
6141: PUSH
6142: EMPTY
6143: ST_TO_ADDR
// path := [ [ 55 , 91 ] , [ 47 , 80 ] , [ 39 , 67 ] , [ 36 , 60 ] , [ 33 , 52 ] ] ;
6144: LD_ADDR_VAR 0 4
6148: PUSH
6149: LD_INT 55
6151: PUSH
6152: LD_INT 91
6154: PUSH
6155: EMPTY
6156: LIST
6157: LIST
6158: PUSH
6159: LD_INT 47
6161: PUSH
6162: LD_INT 80
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 39
6171: PUSH
6172: LD_INT 67
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: LD_INT 36
6181: PUSH
6182: LD_INT 60
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: PUSH
6189: LD_INT 33
6191: PUSH
6192: LD_INT 52
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty - 1 ] do
6206: LD_ADDR_VAR 0 1
6210: PUSH
6211: DOUBLE
6212: LD_INT 1
6214: DEC
6215: ST_TO_ADDR
6216: LD_INT 2
6218: PUSH
6219: LD_INT 3
6221: PUSH
6222: LD_INT 3
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: LIST
6229: PUSH
6230: LD_OWVAR 67
6234: PUSH
6235: LD_INT 1
6237: MINUS
6238: ARRAY
6239: PUSH
6240: FOR_TO
6241: IFFALSE 6392
// begin uc_side := 3 ;
6243: LD_ADDR_OWVAR 20
6247: PUSH
6248: LD_INT 3
6250: ST_TO_ADDR
// uc_nation := 3 ;
6251: LD_ADDR_OWVAR 21
6255: PUSH
6256: LD_INT 3
6258: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gun ] [ i mod 3 + 1 ] , 100 ) ;
6259: LD_INT 22
6261: PPUSH
6262: LD_INT 1
6264: PPUSH
6265: LD_INT 1
6267: PPUSH
6268: LD_INT 42
6270: PUSH
6271: LD_INT 42
6273: PUSH
6274: LD_INT 44
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: LIST
6281: PUSH
6282: LD_VAR 0 1
6286: PUSH
6287: LD_INT 3
6289: MOD
6290: PUSH
6291: LD_INT 1
6293: PLUS
6294: ARRAY
6295: PPUSH
6296: LD_INT 100
6298: PPUSH
6299: CALL 33839 0 5
// un := CreateVehicle ;
6303: LD_ADDR_VAR 0 2
6307: PUSH
6308: CALL_OW 45
6312: ST_TO_ADDR
// PlaceUnitXYR ( un , 57 , 103 , 4 , false ) ;
6313: LD_VAR 0 2
6317: PPUSH
6318: LD_INT 57
6320: PPUSH
6321: LD_INT 103
6323: PPUSH
6324: LD_INT 4
6326: PPUSH
6327: LD_INT 0
6329: PPUSH
6330: CALL_OW 50
// tmp := Replace ( tmp , tmp + 1 , un ) ;
6334: LD_ADDR_VAR 0 3
6338: PUSH
6339: LD_VAR 0 3
6343: PPUSH
6344: LD_VAR 0 3
6348: PUSH
6349: LD_INT 1
6351: PLUS
6352: PPUSH
6353: LD_VAR 0 2
6357: PPUSH
6358: CALL_OW 1
6362: ST_TO_ADDR
// PrepareHuman ( false , 3 , 5 ) ;
6363: LD_INT 0
6365: PPUSH
6366: LD_INT 3
6368: PPUSH
6369: LD_INT 5
6371: PPUSH
6372: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
6376: CALL_OW 44
6380: PPUSH
6381: LD_VAR 0 2
6385: PPUSH
6386: CALL_OW 52
// end ;
6390: GO 6240
6392: POP
6393: POP
// repeat wait ( 0 0$1 ) ;
6394: LD_INT 35
6396: PPUSH
6397: CALL_OW 67
// until not AgressiveMove ( tmp , path ) ;
6401: LD_VAR 0 3
6405: PPUSH
6406: LD_VAR 0 4
6410: PPUSH
6411: CALL 68308 0 2
6415: NOT
6416: IFFALSE 6394
// end ;
6418: PPOPN 4
6420: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
6421: LD_INT 3
6423: PUSH
6424: LD_INT 22
6426: PUSH
6427: LD_INT 1
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: PUSH
6438: LD_INT 32
6440: PUSH
6441: LD_INT 1
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: PPUSH
6452: CALL_OW 69
6456: IFFALSE 6540
6458: GO 6460
6460: DISABLE
6461: LD_INT 0
6463: PPUSH
// begin enable ;
6464: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) do
6465: LD_ADDR_VAR 0 1
6469: PUSH
6470: LD_INT 3
6472: PUSH
6473: LD_INT 22
6475: PUSH
6476: LD_INT 1
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: PUSH
6483: EMPTY
6484: LIST
6485: LIST
6486: PUSH
6487: LD_INT 32
6489: PUSH
6490: LD_INT 1
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: PPUSH
6501: CALL_OW 69
6505: PUSH
6506: FOR_IN
6507: IFFALSE 6538
// if GetFuel ( i ) < 3 then
6509: LD_VAR 0 1
6513: PPUSH
6514: CALL_OW 261
6518: PUSH
6519: LD_INT 3
6521: LESS
6522: IFFALSE 6536
// SetFuel ( i , 3 ) ;
6524: LD_VAR 0 1
6528: PPUSH
6529: LD_INT 3
6531: PPUSH
6532: CALL_OW 240
6536: GO 6506
6538: POP
6539: POP
// end ; end_of_file
6540: PPOPN 1
6542: END
// export function PrepareArabian ; var i , j , un , veh , xy ; begin
6543: LD_INT 0
6545: PPUSH
6546: PPUSH
6547: PPUSH
6548: PPUSH
6549: PPUSH
6550: PPUSH
// uc_side := 2 ;
6551: LD_ADDR_OWVAR 20
6555: PUSH
6556: LD_INT 2
6558: ST_TO_ADDR
// uc_nation := 2 ;
6559: LD_ADDR_OWVAR 21
6563: PUSH
6564: LD_INT 2
6566: ST_TO_ADDR
// InitVc ;
6567: CALL_OW 20
// ResetHc ;
6571: CALL 66227 0 0
// for j := 1 to 2 do
6575: LD_ADDR_VAR 0 3
6579: PUSH
6580: DOUBLE
6581: LD_INT 1
6583: DEC
6584: ST_TO_ADDR
6585: LD_INT 2
6587: PUSH
6588: FOR_TO
6589: IFFALSE 6813
// begin xy := [ [ 178 , 3 ] , [ 268 , 121 ] ] [ j ] ;
6591: LD_ADDR_VAR 0 6
6595: PUSH
6596: LD_INT 178
6598: PUSH
6599: LD_INT 3
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: PUSH
6606: LD_INT 268
6608: PUSH
6609: LD_INT 121
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: PUSH
6620: LD_VAR 0 3
6624: ARRAY
6625: ST_TO_ADDR
// for i := 1 to 8 do
6626: LD_ADDR_VAR 0 2
6630: PUSH
6631: DOUBLE
6632: LD_INT 1
6634: DEC
6635: ST_TO_ADDR
6636: LD_INT 8
6638: PUSH
6639: FOR_TO
6640: IFFALSE 6809
// begin uc_side := 2 ;
6642: LD_ADDR_OWVAR 20
6646: PUSH
6647: LD_INT 2
6649: ST_TO_ADDR
// uc_nation := 2 ;
6650: LD_ADDR_OWVAR 21
6654: PUSH
6655: LD_INT 2
6657: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_flame_thrower , ar_gun ] [ rand ( 1 , 2 ) ] , 99 ) ;
6658: LD_INT 14
6660: PPUSH
6661: LD_INT 1
6663: PPUSH
6664: LD_INT 1
6666: PPUSH
6667: LD_INT 26
6669: PUSH
6670: LD_INT 27
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: PUSH
6677: LD_INT 1
6679: PPUSH
6680: LD_INT 2
6682: PPUSH
6683: CALL_OW 12
6687: ARRAY
6688: PPUSH
6689: LD_INT 99
6691: PPUSH
6692: CALL 33839 0 5
// veh := CreateVehicle ;
6696: LD_ADDR_VAR 0 5
6700: PUSH
6701: CALL_OW 45
6705: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6706: LD_VAR 0 5
6710: PPUSH
6711: LD_INT 3
6713: PPUSH
6714: CALL_OW 233
// PlaceUnitXY ( veh , xy [ 1 ] , xy [ 2 ] , false ) ;
6718: LD_VAR 0 5
6722: PPUSH
6723: LD_VAR 0 6
6727: PUSH
6728: LD_INT 1
6730: ARRAY
6731: PPUSH
6732: LD_VAR 0 6
6736: PUSH
6737: LD_INT 2
6739: ARRAY
6740: PPUSH
6741: LD_INT 0
6743: PPUSH
6744: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
6748: LD_INT 0
6750: PPUSH
6751: LD_INT 3
6753: PPUSH
6754: LD_INT 6
6756: PPUSH
6757: CALL_OW 380
// un := CreateHuman ;
6761: LD_ADDR_VAR 0 4
6765: PUSH
6766: CALL_OW 44
6770: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6771: LD_VAR 0 4
6775: PPUSH
6776: LD_VAR 0 5
6780: PPUSH
6781: CALL_OW 52
// ComMoveXY ( un , 186 , 17 ) ;
6785: LD_VAR 0 4
6789: PPUSH
6790: LD_INT 186
6792: PPUSH
6793: LD_INT 17
6795: PPUSH
6796: CALL_OW 111
// wait ( 0 0$2 ) ;
6800: LD_INT 70
6802: PPUSH
6803: CALL_OW 67
// end ;
6807: GO 6639
6809: POP
6810: POP
// end ;
6811: GO 6588
6813: POP
6814: POP
// for i := 1 to 10 do
6815: LD_ADDR_VAR 0 2
6819: PUSH
6820: DOUBLE
6821: LD_INT 1
6823: DEC
6824: ST_TO_ADDR
6825: LD_INT 10
6827: PUSH
6828: FOR_TO
6829: IFFALSE 6896
// begin PrepareHuman ( false , 1 , 5 ) ;
6831: LD_INT 0
6833: PPUSH
6834: LD_INT 1
6836: PPUSH
6837: LD_INT 5
6839: PPUSH
6840: CALL_OW 380
// un := CreateHuman ;
6844: LD_ADDR_VAR 0 4
6848: PUSH
6849: CALL_OW 44
6853: ST_TO_ADDR
// PlaceUnitXY ( un , 178 , 3 , false ) ;
6854: LD_VAR 0 4
6858: PPUSH
6859: LD_INT 178
6861: PPUSH
6862: LD_INT 3
6864: PPUSH
6865: LD_INT 0
6867: PPUSH
6868: CALL_OW 48
// ComMoveXY ( un , 186 , 17 ) ;
6872: LD_VAR 0 4
6876: PPUSH
6877: LD_INT 186
6879: PPUSH
6880: LD_INT 17
6882: PPUSH
6883: CALL_OW 111
// wait ( 0 0$2 ) ;
6887: LD_INT 70
6889: PPUSH
6890: CALL_OW 67
// end ;
6894: GO 6828
6896: POP
6897: POP
// end ;
6898: LD_VAR 0 1
6902: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] ] ) do var i , enemy ;
6903: LD_INT 22
6905: PUSH
6906: LD_INT 2
6908: PUSH
6909: EMPTY
6910: LIST
6911: LIST
6912: PUSH
6913: LD_INT 50
6915: PUSH
6916: EMPTY
6917: LIST
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: PPUSH
6923: CALL_OW 69
6927: IFFALSE 7063
6929: GO 6931
6931: DISABLE
6932: LD_INT 0
6934: PPUSH
6935: PPUSH
// begin enable ;
6936: ENABLE
// enemy := FilterAllUnits ( [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) ;
6937: LD_ADDR_VAR 0 2
6941: PUSH
6942: LD_INT 2
6944: PUSH
6945: LD_INT 22
6947: PUSH
6948: LD_INT 3
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: PUSH
6955: LD_INT 22
6957: PUSH
6958: LD_INT 6
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: LIST
6969: PPUSH
6970: CALL_OW 69
6974: ST_TO_ADDR
// if not enemy then
6975: LD_VAR 0 2
6979: NOT
6980: IFFALSE 7002
// enemy := FilterAllUnits ( [ f_side , 1 ] ) ;
6982: LD_ADDR_VAR 0 2
6986: PUSH
6987: LD_INT 22
6989: PUSH
6990: LD_INT 1
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PPUSH
6997: CALL_OW 69
7001: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] ] ) do
7002: LD_ADDR_VAR 0 1
7006: PUSH
7007: LD_INT 22
7009: PUSH
7010: LD_INT 2
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PUSH
7017: LD_INT 50
7019: PUSH
7020: EMPTY
7021: LIST
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: PPUSH
7027: CALL_OW 69
7031: PUSH
7032: FOR_IN
7033: IFFALSE 7061
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7035: LD_VAR 0 1
7039: PPUSH
7040: LD_VAR 0 2
7044: PPUSH
7045: LD_VAR 0 1
7049: PPUSH
7050: CALL_OW 74
7054: PPUSH
7055: CALL_OW 115
7059: GO 7032
7061: POP
7062: POP
// end ; end_of_file
7063: PPOPN 2
7065: END
// export function Action ; begin
7066: LD_INT 0
7068: PPUSH
// InGameOn ;
7069: CALL_OW 8
// CenterNowOnXY ( 106 , 3 ) ;
7073: LD_INT 106
7075: PPUSH
7076: LD_INT 3
7078: PPUSH
7079: CALL_OW 86
// wait ( 0 0$2 ) ;
7083: LD_INT 70
7085: PPUSH
7086: CALL_OW 67
// ChangeMissionObjectives ( target1 ) ;
7090: LD_STRING target1
7092: PPUSH
7093: CALL_OW 337
// InGameOff ;
7097: CALL_OW 9
// SaveForQuickRestart ;
7101: CALL_OW 22
// end ;
7105: LD_VAR 0 1
7109: RET
// every 0 0$1 trigger IsDead ( omikron ) and not retreatFromOmicron do
7110: LD_INT 64
7112: PPUSH
7113: CALL_OW 301
7117: PUSH
7118: LD_EXP 8
7122: NOT
7123: AND
7124: IFFALSE 7144
7126: GO 7128
7128: DISABLE
// begin omicronFall := true ;
7129: LD_ADDR_EXP 7
7133: PUSH
7134: LD_INT 1
7136: ST_TO_ADDR
// YouLost ( omi ) ;
7137: LD_STRING omi
7139: PPUSH
7140: CALL_OW 104
// end ;
7144: END
// every 0 0$1 trigger ( See ( 4 , Sikorski ) or See ( 4 , IsInUnit ( Sikorski ) ) ) and IsOk ( omikron ) do var i , tmp , speaker , whereHeWas ;
7145: LD_INT 4
7147: PPUSH
7148: LD_EXP 14
7152: PPUSH
7153: CALL_OW 292
7157: PUSH
7158: LD_INT 4
7160: PPUSH
7161: LD_EXP 14
7165: PPUSH
7166: CALL_OW 310
7170: PPUSH
7171: CALL_OW 292
7175: OR
7176: PUSH
7177: LD_INT 64
7179: PPUSH
7180: CALL_OW 302
7184: AND
7185: IFFALSE 7738
7187: GO 7189
7189: DISABLE
7190: LD_INT 0
7192: PPUSH
7193: PPUSH
7194: PPUSH
7195: PPUSH
// begin InGameOn ;
7196: CALL_OW 8
// tmp := FilterAllUnits ( [ f_side , 4 ] ) ;
7200: LD_ADDR_VAR 0 2
7204: PUSH
7205: LD_INT 22
7207: PUSH
7208: LD_INT 4
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PPUSH
7215: CALL_OW 69
7219: ST_TO_ADDR
// speaker := UnitFilter ( tmp , [ f_sex , sex_male ] ) [ 1 ] ;
7220: LD_ADDR_VAR 0 3
7224: PUSH
7225: LD_VAR 0 2
7229: PPUSH
7230: LD_INT 26
7232: PUSH
7233: LD_INT 1
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: PPUSH
7240: CALL_OW 72
7244: PUSH
7245: LD_INT 1
7247: ARRAY
7248: ST_TO_ADDR
// for i in tmp do
7249: LD_ADDR_VAR 0 1
7253: PUSH
7254: LD_VAR 0 2
7258: PUSH
7259: FOR_IN
7260: IFFALSE 7276
// SetSide ( i , 1 ) ;
7262: LD_VAR 0 1
7266: PPUSH
7267: LD_INT 1
7269: PPUSH
7270: CALL_OW 235
7274: GO 7259
7276: POP
7277: POP
// ComMoveXY ( Sikorski , 37 , 40 ) ;
7278: LD_EXP 14
7282: PPUSH
7283: LD_INT 37
7285: PPUSH
7286: LD_INT 40
7288: PPUSH
7289: CALL_OW 111
// wait ( 0 0$5 ) ;
7293: LD_INT 175
7295: PPUSH
7296: CALL_OW 67
// ComExit ( Sikorski ) ;
7300: LD_EXP 14
7304: PPUSH
7305: CALL 66100 0 1
// AddComMoveXY ( Sikorski , 37 , 40 ) ;
7309: LD_EXP 14
7313: PPUSH
7314: LD_INT 37
7316: PPUSH
7317: LD_INT 40
7319: PPUSH
7320: CALL_OW 171
// CenterOnUnits ( Sikorski ) ;
7324: LD_EXP 14
7328: PPUSH
7329: CALL_OW 85
// wait ( 0 0$2 ) ;
7333: LD_INT 70
7335: PPUSH
7336: CALL_OW 67
// whereHeWas := ComExit ( speaker ) ;
7340: LD_ADDR_VAR 0 4
7344: PUSH
7345: LD_VAR 0 3
7349: PPUSH
7350: CALL 66100 0 1
7354: ST_TO_ADDR
// AddComMoveUnit ( speaker , Sikorski ) ;
7355: LD_VAR 0 3
7359: PPUSH
7360: LD_EXP 14
7364: PPUSH
7365: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
7369: LD_INT 35
7371: PPUSH
7372: CALL_OW 67
// until GetDistUnits ( speaker , Sikorski ) < 5 and not IsInUnit ( Sikorski ) ;
7376: LD_VAR 0 3
7380: PPUSH
7381: LD_EXP 14
7385: PPUSH
7386: CALL_OW 296
7390: PUSH
7391: LD_INT 5
7393: LESS
7394: PUSH
7395: LD_EXP 14
7399: PPUSH
7400: CALL_OW 310
7404: NOT
7405: AND
7406: IFFALSE 7369
// ComTurnUnit ( Sikorski , speaker ) ;
7408: LD_EXP 14
7412: PPUSH
7413: LD_VAR 0 3
7417: PPUSH
7418: CALL_OW 119
// ComTurnUnit ( speaker , Sikorski ) ;
7422: LD_VAR 0 3
7426: PPUSH
7427: LD_EXP 14
7431: PPUSH
7432: CALL_OW 119
// CenterNowOnUnits ( Sikorski ) ;
7436: LD_EXP 14
7440: PPUSH
7441: CALL_OW 87
// Say ( Sikorski , DS-1 ) ;
7445: LD_EXP 14
7449: PPUSH
7450: LD_STRING DS-1
7452: PPUSH
7453: CALL_OW 88
// Say ( speaker , DP-1 ) ;
7457: LD_VAR 0 3
7461: PPUSH
7462: LD_STRING DP-1
7464: PPUSH
7465: CALL_OW 88
// Say ( Sikorski , DS-2 ) ;
7469: LD_EXP 14
7473: PPUSH
7474: LD_STRING DS-2
7476: PPUSH
7477: CALL_OW 88
// Say ( speaker , DP-2 ) ;
7481: LD_VAR 0 3
7485: PPUSH
7486: LD_STRING DP-2
7488: PPUSH
7489: CALL_OW 88
// Say ( Sikorski , DS-3 ) ;
7493: LD_EXP 14
7497: PPUSH
7498: LD_STRING DS-3
7500: PPUSH
7501: CALL_OW 88
// Say ( speaker , DP-3 ) ;
7505: LD_VAR 0 3
7509: PPUSH
7510: LD_STRING DP-3
7512: PPUSH
7513: CALL_OW 88
// Say ( Sikorski , DS-4 ) ;
7517: LD_EXP 14
7521: PPUSH
7522: LD_STRING DS-4
7524: PPUSH
7525: CALL_OW 88
// wait ( 0 0$1 ) ;
7529: LD_INT 35
7531: PPUSH
7532: CALL_OW 67
// if whereHeWas then
7536: LD_VAR 0 4
7540: IFFALSE 7556
// ComEnterUnit ( speaker , whereHeWas ) ;
7542: LD_VAR 0 3
7546: PPUSH
7547: LD_VAR 0 4
7551: PPUSH
7552: CALL_OW 120
// ComHold ( Sikorski ) ;
7556: LD_EXP 14
7560: PPUSH
7561: CALL_OW 140
// wait ( 0 0$1 ) ;
7565: LD_INT 35
7567: PPUSH
7568: CALL_OW 67
// SayRadio ( Harrison , DR-1 ) ;
7572: LD_EXP 15
7576: PPUSH
7577: LD_STRING DR-1
7579: PPUSH
7580: CALL_OW 94
// Say ( Sikorski , DS-5 ) ;
7584: LD_EXP 14
7588: PPUSH
7589: LD_STRING DS-5
7591: PPUSH
7592: CALL_OW 88
// SayRadio ( Harrison , DR-2 ) ;
7596: LD_EXP 15
7600: PPUSH
7601: LD_STRING DR-2
7603: PPUSH
7604: CALL_OW 94
// Say ( Sikorski , DS-6 ) ;
7608: LD_EXP 14
7612: PPUSH
7613: LD_STRING DS-6
7615: PPUSH
7616: CALL_OW 88
// SayRadio ( Harrison , DR-3 ) ;
7620: LD_EXP 15
7624: PPUSH
7625: LD_STRING DR-3
7627: PPUSH
7628: CALL_OW 94
// InGameOff ;
7632: CALL_OW 9
// ChangeMissionObjectives ( target2 ) ;
7636: LD_STRING target2
7638: PPUSH
7639: CALL_OW 337
// sikorskiInOmicron := true ;
7643: LD_ADDR_EXP 9
7647: PUSH
7648: LD_INT 1
7650: ST_TO_ADDR
// wait ( 0 0$2 ) ;
7651: LD_INT 70
7653: PPUSH
7654: CALL_OW 67
// Say ( Sikorski , DS-7 ) ;
7658: LD_EXP 14
7662: PPUSH
7663: LD_STRING DS-7
7665: PPUSH
7666: CALL_OW 88
// wait ( 3 3$00 ) ;
7670: LD_INT 6300
7672: PPUSH
7673: CALL_OW 67
// SayRadio ( Harrison , DRforce-5 ) ;
7677: LD_EXP 15
7681: PPUSH
7682: LD_STRING DRforce-5
7684: PPUSH
7685: CALL_OW 94
// wait ( 4 4$50 ) ;
7689: LD_INT 10150
7691: PPUSH
7692: CALL_OW 67
// FirstReinforcements ;
7696: CALL 7915 0 0
// wait ( rand ( 12 12$00 , 15 15$00 ) ) ;
7700: LD_INT 25200
7702: PPUSH
7703: LD_INT 31500
7705: PPUSH
7706: CALL_OW 12
7710: PPUSH
7711: CALL_OW 67
// SayRadio ( Harrison , DRforce-10 ) ;
7715: LD_EXP 15
7719: PPUSH
7720: LD_STRING DRforce-10
7722: PPUSH
7723: CALL_OW 94
// wait ( 9 9$50 ) ;
7727: LD_INT 20650
7729: PPUSH
7730: CALL_OW 67
// SecondReinforcements ;
7734: CALL 8758 0 0
// end ;
7738: PPOPN 4
7740: END
// every 0 0$1 trigger GetLives ( Sikorski ) < 1000 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
7741: LD_EXP 14
7745: PPUSH
7746: CALL_OW 256
7750: PUSH
7751: LD_INT 1000
7753: LESS
7754: PUSH
7755: LD_INT 22
7757: PUSH
7758: LD_INT 1
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: PUSH
7765: LD_INT 2
7767: PUSH
7768: LD_INT 101
7770: PUSH
7771: LD_INT 3
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PUSH
7778: LD_INT 101
7780: PUSH
7781: LD_INT 6
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: LIST
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: PPUSH
7797: CALL_OW 69
7801: AND
7802: IFFALSE 7819
7804: GO 7806
7806: DISABLE
// Say ( Sikorski , DRus ) ;
7807: LD_EXP 14
7811: PPUSH
7812: LD_STRING DRus
7814: PPUSH
7815: CALL_OW 88
7819: END
// every 0 0$1 trigger tick >= [ 11 11$00 , 10 10$30 , 9 9$40 ] [ Difficulty ] do
7820: LD_OWVAR 1
7824: PUSH
7825: LD_INT 23100
7827: PUSH
7828: LD_INT 22050
7830: PUSH
7831: LD_INT 20300
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: LIST
7838: PUSH
7839: LD_OWVAR 67
7843: ARRAY
7844: GREATEREQUAL
7845: IFFALSE 7914
7847: GO 7849
7849: DISABLE
// begin SendSupport ;
7850: CALL 5775 0 0
// ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
7854: LD_EXP 24
7858: PPUSH
7859: LD_INT 21
7861: PUSH
7862: LD_INT 2
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: PPUSH
7869: CALL_OW 72
7873: PPUSH
7874: LD_INT 62
7876: PPUSH
7877: LD_INT 22
7879: PPUSH
7880: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
7884: LD_EXP 25
7888: PPUSH
7889: LD_INT 69
7891: PPUSH
7892: LD_INT 27
7894: PPUSH
7895: CALL_OW 111
// wait ( 1 1$00 ) ;
7899: LD_INT 2100
7901: PPUSH
7902: CALL_OW 67
// startAttackOnOmicron := true ;
7906: LD_ADDR_EXP 6
7910: PUSH
7911: LD_INT 1
7913: ST_TO_ADDR
// end ;
7914: END
// export function FirstReinforcements ; var i , un , tmp , spotted , xy ; begin
7915: LD_INT 0
7917: PPUSH
7918: PPUSH
7919: PPUSH
7920: PPUSH
7921: PPUSH
7922: PPUSH
// uc_side := 4 ;
7923: LD_ADDR_OWVAR 20
7927: PUSH
7928: LD_INT 4
7930: ST_TO_ADDR
// uc_nation := 1 ;
7931: LD_ADDR_OWVAR 21
7935: PUSH
7936: LD_INT 1
7938: ST_TO_ADDR
// tmp := [ ] ;
7939: LD_ADDR_VAR 0 4
7943: PUSH
7944: EMPTY
7945: ST_TO_ADDR
// ResetHc ;
7946: CALL 66227 0 0
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7950: LD_INT 2
7952: PPUSH
7953: LD_INT 1
7955: PPUSH
7956: LD_INT 1
7958: PPUSH
7959: LD_INT 4
7961: PPUSH
7962: LD_INT 77
7964: PPUSH
7965: CALL 33839 0 5
// un := CreateVehicle ;
7969: LD_ADDR_VAR 0 3
7973: PUSH
7974: CALL_OW 45
7978: ST_TO_ADDR
// tmp := tmp union un ;
7979: LD_ADDR_VAR 0 4
7983: PUSH
7984: LD_VAR 0 4
7988: PUSH
7989: LD_VAR 0 3
7993: UNION
7994: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7995: LD_VAR 0 3
7999: PPUSH
8000: LD_INT 2
8002: PPUSH
8003: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
8007: LD_VAR 0 3
8011: PPUSH
8012: LD_INT 106
8014: PPUSH
8015: LD_INT 3
8017: PPUSH
8018: LD_INT 0
8020: PPUSH
8021: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
8025: LD_INT 0
8027: PPUSH
8028: LD_INT 3
8030: PPUSH
8031: LD_INT 2
8033: PPUSH
8034: CALL_OW 380
// un := CreateHuman ;
8038: LD_ADDR_VAR 0 3
8042: PUSH
8043: CALL_OW 44
8047: ST_TO_ADDR
// tmp := tmp union un ;
8048: LD_ADDR_VAR 0 4
8052: PUSH
8053: LD_VAR 0 4
8057: PUSH
8058: LD_VAR 0 3
8062: UNION
8063: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
8064: LD_VAR 0 3
8068: PPUSH
8069: LD_VAR 0 4
8073: PUSH
8074: LD_VAR 0 4
8078: PUSH
8079: LD_INT 1
8081: MINUS
8082: ARRAY
8083: PPUSH
8084: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
8088: LD_VAR 0 3
8092: PPUSH
8093: LD_INT 109
8095: PPUSH
8096: LD_INT 9
8098: PPUSH
8099: CALL_OW 111
// wait ( 0 0$1 ) ;
8103: LD_INT 35
8105: PPUSH
8106: CALL_OW 67
// for i := 1 to [ 2 , 2 , 1 ] [ Difficulty ] do
8110: LD_ADDR_VAR 0 2
8114: PUSH
8115: DOUBLE
8116: LD_INT 1
8118: DEC
8119: ST_TO_ADDR
8120: LD_INT 2
8122: PUSH
8123: LD_INT 2
8125: PUSH
8126: LD_INT 1
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: LIST
8133: PUSH
8134: LD_OWVAR 67
8138: ARRAY
8139: PUSH
8140: FOR_TO
8141: IFFALSE 8205
// begin PrepareHuman ( false , 1 , 2 ) ;
8143: LD_INT 0
8145: PPUSH
8146: LD_INT 1
8148: PPUSH
8149: LD_INT 2
8151: PPUSH
8152: CALL_OW 380
// un := CreateHuman ;
8156: LD_ADDR_VAR 0 3
8160: PUSH
8161: CALL_OW 44
8165: ST_TO_ADDR
// tmp := tmp union un ;
8166: LD_ADDR_VAR 0 4
8170: PUSH
8171: LD_VAR 0 4
8175: PUSH
8176: LD_VAR 0 3
8180: UNION
8181: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
8182: LD_VAR 0 3
8186: PPUSH
8187: LD_INT 105
8189: PPUSH
8190: LD_INT 2
8192: PPUSH
8193: LD_INT 2
8195: PPUSH
8196: LD_INT 0
8198: PPUSH
8199: CALL_OW 50
// end ;
8203: GO 8140
8205: POP
8206: POP
// PrepareHuman ( false , 4 , 2 ) ;
8207: LD_INT 0
8209: PPUSH
8210: LD_INT 4
8212: PPUSH
8213: LD_INT 2
8215: PPUSH
8216: CALL_OW 380
// un := CreateHuman ;
8220: LD_ADDR_VAR 0 3
8224: PUSH
8225: CALL_OW 44
8229: ST_TO_ADDR
// tmp := tmp union un ;
8230: LD_ADDR_VAR 0 4
8234: PUSH
8235: LD_VAR 0 4
8239: PUSH
8240: LD_VAR 0 3
8244: UNION
8245: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
8246: LD_VAR 0 3
8250: PPUSH
8251: LD_INT 105
8253: PPUSH
8254: LD_INT 2
8256: PPUSH
8257: LD_INT 2
8259: PPUSH
8260: LD_INT 0
8262: PPUSH
8263: CALL_OW 50
// ComAgressiveMove ( tmp , 26 , 35 ) ;
8267: LD_VAR 0 4
8271: PPUSH
8272: LD_INT 26
8274: PPUSH
8275: LD_INT 35
8277: PPUSH
8278: CALL_OW 114
// spotted := false ;
8282: LD_ADDR_VAR 0 5
8286: PUSH
8287: LD_INT 0
8289: ST_TO_ADDR
// xy := [ 0 , 0 ] ;
8290: LD_ADDR_VAR 0 6
8294: PUSH
8295: LD_INT 0
8297: PUSH
8298: LD_INT 0
8300: PUSH
8301: EMPTY
8302: LIST
8303: LIST
8304: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8305: LD_INT 35
8307: PPUSH
8308: CALL_OW 67
// if UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) and not spotted then
8312: LD_VAR 0 4
8316: PPUSH
8317: LD_INT 3
8319: PUSH
8320: LD_INT 24
8322: PUSH
8323: LD_INT 1000
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: PPUSH
8334: CALL_OW 72
8338: PUSH
8339: LD_VAR 0 5
8343: NOT
8344: AND
8345: IFFALSE 8471
// begin spotted := true ;
8347: LD_ADDR_VAR 0 5
8351: PUSH
8352: LD_INT 1
8354: ST_TO_ADDR
// un := UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) [ 1 ] ;
8355: LD_ADDR_VAR 0 3
8359: PUSH
8360: LD_VAR 0 4
8364: PPUSH
8365: LD_INT 3
8367: PUSH
8368: LD_INT 24
8370: PUSH
8371: LD_INT 1000
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: PUSH
8378: EMPTY
8379: LIST
8380: LIST
8381: PPUSH
8382: CALL_OW 72
8386: PUSH
8387: LD_INT 1
8389: ARRAY
8390: ST_TO_ADDR
// xy := [ GetX ( un ) , GetY ( un ) ] ;
8391: LD_ADDR_VAR 0 6
8395: PUSH
8396: LD_VAR 0 3
8400: PPUSH
8401: CALL_OW 250
8405: PUSH
8406: LD_VAR 0 3
8410: PPUSH
8411: CALL_OW 251
8415: PUSH
8416: EMPTY
8417: LIST
8418: LIST
8419: ST_TO_ADDR
// PlaceSeeing ( xy [ 1 ] , xy [ 2 ] , 1 , - 12 ) ;
8420: LD_VAR 0 6
8424: PUSH
8425: LD_INT 1
8427: ARRAY
8428: PPUSH
8429: LD_VAR 0 6
8433: PUSH
8434: LD_INT 2
8436: ARRAY
8437: PPUSH
8438: LD_INT 1
8440: PPUSH
8441: LD_INT 12
8443: NEG
8444: PPUSH
8445: CALL_OW 330
// CenterOnXY ( xy [ 1 ] , xy [ 2 ] ) ;
8449: LD_VAR 0 6
8453: PUSH
8454: LD_INT 1
8456: ARRAY
8457: PPUSH
8458: LD_VAR 0 6
8462: PUSH
8463: LD_INT 2
8465: ARRAY
8466: PPUSH
8467: CALL_OW 84
// end ; for i in tmp do
8471: LD_ADDR_VAR 0 2
8475: PUSH
8476: LD_VAR 0 4
8480: PUSH
8481: FOR_IN
8482: IFFALSE 8513
// if not HasTask ( i ) then
8484: LD_VAR 0 2
8488: PPUSH
8489: CALL_OW 314
8493: NOT
8494: IFFALSE 8511
// ComAgressiveMove ( i , 26 , 35 ) ;
8496: LD_VAR 0 2
8500: PPUSH
8501: LD_INT 26
8503: PPUSH
8504: LD_INT 35
8506: PPUSH
8507: CALL_OW 114
8511: GO 8481
8513: POP
8514: POP
// if not UnitFilter ( tmp , [ f_ok ] ) then
8515: LD_VAR 0 4
8519: PPUSH
8520: LD_INT 50
8522: PUSH
8523: EMPTY
8524: LIST
8525: PPUSH
8526: CALL_OW 72
8530: NOT
8531: IFFALSE 8566
// begin if spotted then
8533: LD_VAR 0 5
8537: IFFALSE 8564
// RemoveSeeing ( xy [ 1 ] , xy [ 2 ] , 1 ) ;
8539: LD_VAR 0 6
8543: PUSH
8544: LD_INT 1
8546: ARRAY
8547: PPUSH
8548: LD_VAR 0 6
8552: PUSH
8553: LD_INT 2
8555: ARRAY
8556: PPUSH
8557: LD_INT 1
8559: PPUSH
8560: CALL_OW 331
// exit ;
8564: GO 8753
// end ; until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) or See ( 4 , Sikorski ) ;
8566: LD_VAR 0 4
8570: PPUSH
8571: LD_INT 91
8573: PUSH
8574: LD_INT 64
8576: PUSH
8577: LD_INT 12
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: LIST
8584: PPUSH
8585: CALL_OW 72
8589: PUSH
8590: LD_INT 4
8592: PPUSH
8593: LD_EXP 14
8597: PPUSH
8598: CALL_OW 292
8602: OR
8603: IFFALSE 8305
// omicronSquad := omicronSquad union tmp ;
8605: LD_ADDR_EXP 13
8609: PUSH
8610: LD_EXP 13
8614: PUSH
8615: LD_VAR 0 4
8619: UNION
8620: ST_TO_ADDR
// if spotted then
8621: LD_VAR 0 5
8625: IFFALSE 8652
// RemoveSeeing ( xy [ 1 ] , xy [ 2 ] , 1 ) ;
8627: LD_VAR 0 6
8631: PUSH
8632: LD_INT 1
8634: ARRAY
8635: PPUSH
8636: LD_VAR 0 6
8640: PUSH
8641: LD_INT 2
8643: ARRAY
8644: PPUSH
8645: LD_INT 1
8647: PPUSH
8648: CALL_OW 331
// for i in tmp do
8652: LD_ADDR_VAR 0 2
8656: PUSH
8657: LD_VAR 0 4
8661: PUSH
8662: FOR_IN
8663: IFFALSE 8679
// SetSide ( i , 1 ) ;
8665: LD_VAR 0 2
8669: PPUSH
8670: LD_INT 1
8672: PPUSH
8673: CALL_OW 235
8677: GO 8662
8679: POP
8680: POP
// if UnitFilter ( tmp , [ [ f_sex , sex_male ] , [ f_ok ] ] ) then
8681: LD_VAR 0 4
8685: PPUSH
8686: LD_INT 26
8688: PUSH
8689: LD_INT 1
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: PUSH
8696: LD_INT 50
8698: PUSH
8699: EMPTY
8700: LIST
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: PPUSH
8706: CALL_OW 72
8710: IFFALSE 8753
// Say ( UnitFilter ( tmp , [ [ f_sex , sex_male ] , [ f_ok ] ] ) [ 1 ] , Dcargo ) ;
8712: LD_VAR 0 4
8716: PPUSH
8717: LD_INT 26
8719: PUSH
8720: LD_INT 1
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: PUSH
8727: LD_INT 50
8729: PUSH
8730: EMPTY
8731: LIST
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: PPUSH
8737: CALL_OW 72
8741: PUSH
8742: LD_INT 1
8744: ARRAY
8745: PPUSH
8746: LD_STRING Dcargo
8748: PPUSH
8749: CALL_OW 88
// end ;
8753: LD_VAR 0 1
8757: RET
// export function SecondReinforcements ; var un , veh , i ; begin
8758: LD_INT 0
8760: PPUSH
8761: PPUSH
8762: PPUSH
8763: PPUSH
// uc_side := 1 ;
8764: LD_ADDR_OWVAR 20
8768: PUSH
8769: LD_INT 1
8771: ST_TO_ADDR
// uc_nation := 1 ;
8772: LD_ADDR_OWVAR 21
8776: PUSH
8777: LD_INT 1
8779: ST_TO_ADDR
// ResetHc ;
8780: CALL 66227 0 0
// PrepareHuman ( false , 3 , 3 ) ;
8784: LD_INT 0
8786: PPUSH
8787: LD_INT 3
8789: PPUSH
8790: LD_INT 3
8792: PPUSH
8793: CALL_OW 380
// un := CreateHuman ;
8797: LD_ADDR_VAR 0 2
8801: PUSH
8802: CALL_OW 44
8806: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_manual , us_double_gun , 90 ) ;
8807: LD_INT 3
8809: PPUSH
8810: LD_INT 1
8812: PPUSH
8813: LD_INT 1
8815: PPUSH
8816: LD_INT 5
8818: PPUSH
8819: LD_INT 90
8821: PPUSH
8822: CALL 33839 0 5
// veh := CreateVehicle ;
8826: LD_ADDR_VAR 0 3
8830: PUSH
8831: CALL_OW 45
8835: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8836: LD_VAR 0 3
8840: PPUSH
8841: LD_INT 2
8843: PPUSH
8844: CALL_OW 233
// PlaceUnitXYR ( veh , 83 , 154 , 10 , false ) ;
8848: LD_VAR 0 3
8852: PPUSH
8853: LD_INT 83
8855: PPUSH
8856: LD_INT 154
8858: PPUSH
8859: LD_INT 10
8861: PPUSH
8862: LD_INT 0
8864: PPUSH
8865: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
8869: LD_VAR 0 2
8873: PPUSH
8874: LD_VAR 0 3
8878: PPUSH
8879: CALL_OW 52
// for i := 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
8883: LD_ADDR_VAR 0 4
8887: PUSH
8888: DOUBLE
8889: LD_INT 1
8891: DEC
8892: ST_TO_ADDR
8893: LD_INT 4
8895: PUSH
8896: LD_INT 3
8898: PUSH
8899: LD_INT 3
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: LIST
8906: PUSH
8907: LD_OWVAR 67
8911: ARRAY
8912: PUSH
8913: FOR_TO
8914: IFFALSE 8962
// begin PrepareHuman ( false , 1 , 3 ) ;
8916: LD_INT 0
8918: PPUSH
8919: LD_INT 1
8921: PPUSH
8922: LD_INT 3
8924: PPUSH
8925: CALL_OW 380
// un := CreateHuman ;
8929: LD_ADDR_VAR 0 2
8933: PUSH
8934: CALL_OW 44
8938: ST_TO_ADDR
// PlaceUnitXYR ( un , 83 , 154 , 10 , false ) ;
8939: LD_VAR 0 2
8943: PPUSH
8944: LD_INT 83
8946: PPUSH
8947: LD_INT 154
8949: PPUSH
8950: LD_INT 10
8952: PPUSH
8953: LD_INT 0
8955: PPUSH
8956: CALL_OW 50
// end ;
8960: GO 8913
8962: POP
8963: POP
// PrepareHuman ( sex_male , 1 , 3 ) ;
8964: LD_INT 1
8966: PPUSH
8967: LD_INT 1
8969: PPUSH
8970: LD_INT 3
8972: PPUSH
8973: CALL_OW 380
// un := CreateHuman ;
8977: LD_ADDR_VAR 0 2
8981: PUSH
8982: CALL_OW 44
8986: ST_TO_ADDR
// PlaceUnitXYR ( un , 83 , 154 , 10 , false ) ;
8987: LD_VAR 0 2
8991: PPUSH
8992: LD_INT 83
8994: PPUSH
8995: LD_INT 154
8997: PPUSH
8998: LD_INT 10
9000: PPUSH
9001: LD_INT 0
9003: PPUSH
9004: CALL_OW 50
// SayRadio ( un , Dhelp ) ;
9008: LD_VAR 0 2
9012: PPUSH
9013: LD_STRING Dhelp
9015: PPUSH
9016: CALL_OW 94
// ResetHc ;
9020: CALL 66227 0 0
// end ;
9024: LD_VAR 0 1
9028: RET
// every 0 0$1 trigger russianAlert do var i , tmp , towers ;
9029: LD_EXP 5
9033: IFFALSE 9175
9035: GO 9037
9037: DISABLE
9038: LD_INT 0
9040: PPUSH
9041: PPUSH
9042: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_inside ] ] ) ;
9043: LD_ADDR_VAR 0 2
9047: PUSH
9048: LD_EXP 20
9052: PPUSH
9053: LD_INT 25
9055: PUSH
9056: LD_INT 1
9058: PUSH
9059: EMPTY
9060: LIST
9061: LIST
9062: PUSH
9063: LD_INT 54
9065: PUSH
9066: EMPTY
9067: LIST
9068: PUSH
9069: EMPTY
9070: LIST
9071: LIST
9072: PPUSH
9073: CALL_OW 72
9077: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
9078: LD_ADDR_VAR 0 3
9082: PUSH
9083: LD_INT 22
9085: PUSH
9086: LD_INT 6
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: PUSH
9093: LD_INT 30
9095: PUSH
9096: LD_INT 32
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: PUSH
9103: EMPTY
9104: LIST
9105: LIST
9106: PPUSH
9107: CALL_OW 69
9111: ST_TO_ADDR
// for i := 1 to tmp do
9112: LD_ADDR_VAR 0 1
9116: PUSH
9117: DOUBLE
9118: LD_INT 1
9120: DEC
9121: ST_TO_ADDR
9122: LD_VAR 0 2
9126: PUSH
9127: FOR_TO
9128: IFFALSE 9173
// begin ComExitBuilding ( tmp [ i ] ) ;
9130: LD_VAR 0 2
9134: PUSH
9135: LD_VAR 0 1
9139: ARRAY
9140: PPUSH
9141: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , towers [ i ] ) ;
9145: LD_VAR 0 2
9149: PUSH
9150: LD_VAR 0 1
9154: ARRAY
9155: PPUSH
9156: LD_VAR 0 3
9160: PUSH
9161: LD_VAR 0 1
9165: ARRAY
9166: PPUSH
9167: CALL_OW 180
// end ;
9171: GO 9127
9173: POP
9174: POP
// end ;
9175: PPOPN 3
9177: END
// every 0 0$1 trigger russianAlert and FilterAllUnits ( [ [ f_side , 2 ] , [ f_see , 6 ] ] ) do var i , noncombat ;
9178: LD_EXP 5
9182: PUSH
9183: LD_INT 22
9185: PUSH
9186: LD_INT 2
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: PUSH
9193: LD_INT 101
9195: PUSH
9196: LD_INT 6
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PPUSH
9207: CALL_OW 69
9211: AND
9212: IFFALSE 9358
9214: GO 9216
9216: DISABLE
9217: LD_INT 0
9219: PPUSH
9220: PPUSH
// begin SayRadio ( Kurin , D9a-Kur-1 ) ;
9221: LD_EXP 16
9225: PPUSH
9226: LD_STRING D9a-Kur-1
9228: PPUSH
9229: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
9233: LD_EXP 19
9237: PPUSH
9238: LD_STRING D9a-Bur-1
9240: PPUSH
9241: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
9245: LD_EXP 16
9249: PPUSH
9250: LD_STRING D9a-Kur-2
9252: PPUSH
9253: CALL_OW 94
// retreatFromOmicron := true ;
9257: LD_ADDR_EXP 8
9261: PUSH
9262: LD_INT 1
9264: ST_TO_ADDR
// noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
9265: LD_ADDR_VAR 0 2
9269: PUSH
9270: LD_EXP 18
9274: PUSH
9275: LD_EXP 20
9279: PUSH
9280: LD_EXP 21
9284: UNION
9285: PPUSH
9286: LD_INT 3
9288: PUSH
9289: LD_INT 25
9291: PUSH
9292: LD_INT 1
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: PUSH
9299: EMPTY
9300: LIST
9301: LIST
9302: PPUSH
9303: CALL_OW 72
9307: UNION
9308: ST_TO_ADDR
// for i in noncombat do
9309: LD_ADDR_VAR 0 1
9313: PUSH
9314: LD_VAR 0 2
9318: PUSH
9319: FOR_IN
9320: IFFALSE 9356
// begin if IsInUnit ( i ) then
9322: LD_VAR 0 1
9326: PPUSH
9327: CALL_OW 310
9331: IFFALSE 9342
// ComExitBuilding ( i ) ;
9333: LD_VAR 0 1
9337: PPUSH
9338: CALL_OW 122
// AddComMoveToArea ( i , westEscapeArea ) ;
9342: LD_VAR 0 1
9346: PPUSH
9347: LD_INT 4
9349: PPUSH
9350: CALL_OW 173
// end ;
9354: GO 9319
9356: POP
9357: POP
// end ;
9358: PPOPN 2
9360: END
// every 0 0$1 trigger tick > rand ( 20 20$00 , 30 30$00 ) do var un ;
9361: LD_OWVAR 1
9365: PUSH
9366: LD_INT 42000
9368: PPUSH
9369: LD_INT 63000
9371: PPUSH
9372: CALL_OW 12
9376: GREATER
9377: IFFALSE 9522
9379: GO 9381
9381: DISABLE
9382: LD_INT 0
9384: PPUSH
// begin uc_side := 4 ;
9385: LD_ADDR_OWVAR 20
9389: PUSH
9390: LD_INT 4
9392: ST_TO_ADDR
// uc_nation := 4 ;
9393: LD_ADDR_OWVAR 21
9397: PUSH
9398: LD_INT 4
9400: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 3 ) ;
9401: LD_INT 1
9403: PPUSH
9404: LD_INT 4
9406: PPUSH
9407: LD_INT 3
9409: PPUSH
9410: CALL_OW 380
// hc_name :=  ;
9414: LD_ADDR_OWVAR 26
9418: PUSH
9419: LD_STRING 
9421: ST_TO_ADDR
// un := CreateHuman ;
9422: LD_ADDR_VAR 0 1
9426: PUSH
9427: CALL_OW 44
9431: ST_TO_ADDR
// PlaceUnitXYR ( un , 161 , 162 , 3 , true ) ;
9432: LD_VAR 0 1
9436: PPUSH
9437: LD_INT 161
9439: PPUSH
9440: LD_INT 162
9442: PPUSH
9443: LD_INT 3
9445: PPUSH
9446: LD_INT 1
9448: PPUSH
9449: CALL_OW 50
// ResetHc ;
9453: CALL 66227 0 0
// wait ( 0 0$3 ) ;
9457: LD_INT 105
9459: PPUSH
9460: CALL_OW 67
// SayRadio ( un , Dun1 ) ;
9464: LD_VAR 0 1
9468: PPUSH
9469: LD_STRING Dun1
9471: PPUSH
9472: CALL_OW 94
// repeat wait ( 0 0$1 ) ;
9476: LD_INT 35
9478: PPUSH
9479: CALL_OW 67
// if IsDead ( un ) then
9483: LD_VAR 0 1
9487: PPUSH
9488: CALL_OW 301
9492: IFFALSE 9496
// exit ;
9494: GO 9522
// until See ( 1 , un ) ;
9496: LD_INT 1
9498: PPUSH
9499: LD_VAR 0 1
9503: PPUSH
9504: CALL_OW 292
9508: IFFALSE 9476
// SetSide ( un , 1 ) ;
9510: LD_VAR 0 1
9514: PPUSH
9515: LD_INT 1
9517: PPUSH
9518: CALL_OW 235
// end ;
9522: PPOPN 1
9524: END
// every 0 0$1 trigger tanksCounter >= 20 do
9525: LD_EXP 12
9529: PUSH
9530: LD_INT 20
9532: GREATEREQUAL
9533: IFFALSE 9545
9535: GO 9537
9537: DISABLE
// SetAchievement ( ACH_PANZERKNACKER ) ;
9538: LD_STRING ACH_PANZERKNACKER
9540: PPUSH
9541: CALL_OW 543
9545: END
// every 0 0$1 trigger tick > rand ( 45 45$00 , 52 52$00 ) do var un ;
9546: LD_OWVAR 1
9550: PUSH
9551: LD_INT 94500
9553: PPUSH
9554: LD_INT 109200
9556: PPUSH
9557: CALL_OW 12
9561: GREATER
9562: IFFALSE 9825
9564: GO 9566
9566: DISABLE
9567: LD_INT 0
9569: PPUSH
// begin PrepareArabian ;
9570: CALL 6543 0 0
// uc_side := 4 ;
9574: LD_ADDR_OWVAR 20
9578: PUSH
9579: LD_INT 4
9581: ST_TO_ADDR
// uc_nation := 1 ;
9582: LD_ADDR_OWVAR 21
9586: PUSH
9587: LD_INT 1
9589: ST_TO_ADDR
// ResetHc ;
9590: CALL 66227 0 0
// un := CreateHuman ;
9594: LD_ADDR_VAR 0 1
9598: PUSH
9599: CALL_OW 44
9603: ST_TO_ADDR
// SayRadio ( un , ar_come ) ;
9604: LD_VAR 0 1
9608: PPUSH
9609: LD_STRING ar_come
9611: PPUSH
9612: CALL_OW 94
// wait ( 0 0$20 ) ;
9616: LD_INT 700
9618: PPUSH
9619: CALL_OW 67
// SayRadio ( Harrison , DR-Back ) ;
9623: LD_EXP 15
9627: PPUSH
9628: LD_STRING DR-Back
9630: PPUSH
9631: CALL_OW 94
// ChangeMissionObjectives ( target3 ) ;
9635: LD_STRING target3
9637: PPUSH
9638: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
9642: LD_INT 10
9644: PPUSH
9645: LD_INT 1
9647: PPUSH
9648: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
9652: LD_INT 35
9654: PPUSH
9655: CALL_OW 67
// until IsInArea ( Sikorski , escapeArea ) or FilterUnitsInArea ( escapeArea , [ f_side , 1 ] ) ;
9659: LD_EXP 14
9663: PPUSH
9664: LD_INT 10
9666: PPUSH
9667: CALL_OW 308
9671: PUSH
9672: LD_INT 10
9674: PPUSH
9675: LD_INT 22
9677: PUSH
9678: LD_INT 1
9680: PUSH
9681: EMPTY
9682: LIST
9683: LIST
9684: PPUSH
9685: CALL_OW 70
9689: OR
9690: IFFALSE 9652
// SayRadio ( Harrison , you_win ) ;
9692: LD_EXP 15
9696: PPUSH
9697: LD_STRING you_win
9699: PPUSH
9700: CALL_OW 94
// AddMedal ( med , 1 ) ;
9704: LD_STRING med
9706: PPUSH
9707: LD_INT 1
9709: PPUSH
9710: CALL_OW 101
// if ruLoseCounter > [ 27 , 32 , 36 ] [ Difficulty ] then
9714: LD_EXP 11
9718: PUSH
9719: LD_INT 27
9721: PUSH
9722: LD_INT 32
9724: PUSH
9725: LD_INT 36
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: LIST
9732: PUSH
9733: LD_OWVAR 67
9737: ARRAY
9738: GREATER
9739: IFFALSE 9753
// AddMedal ( ru , 1 ) else
9741: LD_STRING ru
9743: PPUSH
9744: LD_INT 1
9746: PPUSH
9747: CALL_OW 101
9751: GO 9764
// AddMedal ( ru , - 1 ) ;
9753: LD_STRING ru
9755: PPUSH
9756: LD_INT 1
9758: NEG
9759: PPUSH
9760: CALL_OW 101
// if usLoseCounter < [ 4 , 3 , 2 ] [ Difficulty ] then
9764: LD_EXP 10
9768: PUSH
9769: LD_INT 4
9771: PUSH
9772: LD_INT 3
9774: PUSH
9775: LD_INT 2
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: LIST
9782: PUSH
9783: LD_OWVAR 67
9787: ARRAY
9788: LESS
9789: IFFALSE 9803
// AddMedal ( pep , 1 ) else
9791: LD_STRING pep
9793: PPUSH
9794: LD_INT 1
9796: PPUSH
9797: CALL_OW 101
9801: GO 9814
// AddMedal ( pep , - 1 ) ;
9803: LD_STRING pep
9805: PPUSH
9806: LD_INT 1
9808: NEG
9809: PPUSH
9810: CALL_OW 101
// GiveMedals ( MAIN ) ;
9814: LD_STRING MAIN
9816: PPUSH
9817: CALL_OW 102
// YouWin ;
9821: CALL_OW 103
// end ; end_of_file
9825: PPOPN 1
9827: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
9828: LD_VAR 0 1
9832: PPUSH
9833: CALL 10692 0 1
// if un = Sikorski then
9837: LD_VAR 0 1
9841: PUSH
9842: LD_EXP 14
9846: EQUAL
9847: IFFALSE 9856
// YouLost ( sik ) ;
9849: LD_STRING sik
9851: PPUSH
9852: CALL_OW 104
// if un in russianOmicronAttackers then
9856: LD_VAR 0 1
9860: PUSH
9861: LD_EXP 24
9865: IN
9866: IFFALSE 9884
// russianOmicronAttackers := russianOmicronAttackers diff un ;
9868: LD_ADDR_EXP 24
9872: PUSH
9873: LD_EXP 24
9877: PUSH
9878: LD_VAR 0 1
9882: DIFF
9883: ST_TO_ADDR
// if un in russianCargo then
9884: LD_VAR 0 1
9888: PUSH
9889: LD_EXP 25
9893: IN
9894: IFFALSE 9912
// russianCargo := russianCargo diff un ;
9896: LD_ADDR_EXP 25
9900: PUSH
9901: LD_EXP 25
9905: PUSH
9906: LD_VAR 0 1
9910: DIFF
9911: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_cargo_bay ] ] ) then
9912: LD_VAR 0 1
9916: PUSH
9917: LD_INT 22
9919: PUSH
9920: LD_INT 3
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: PUSH
9927: LD_INT 34
9929: PUSH
9930: LD_INT 51
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: PPUSH
9941: CALL_OW 69
9945: IN
9946: IFFALSE 9955
// ProduceNew ( 1 ) ;
9948: LD_INT 1
9950: PPUSH
9951: CALL 4695 0 1
// if GetSide ( un ) in [ 1 , 4 ] and GetType ( un ) = unit_human and GetNation ( un ) = nation_american then
9955: LD_VAR 0 1
9959: PPUSH
9960: CALL_OW 255
9964: PUSH
9965: LD_INT 1
9967: PUSH
9968: LD_INT 4
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: IN
9975: PUSH
9976: LD_VAR 0 1
9980: PPUSH
9981: CALL_OW 247
9985: PUSH
9986: LD_INT 1
9988: EQUAL
9989: AND
9990: PUSH
9991: LD_VAR 0 1
9995: PPUSH
9996: CALL_OW 248
10000: PUSH
10001: LD_INT 1
10003: EQUAL
10004: AND
10005: IFFALSE 10021
// usLoseCounter := usLoseCounter + 1 ;
10007: LD_ADDR_EXP 10
10011: PUSH
10012: LD_EXP 10
10016: PUSH
10017: LD_INT 1
10019: PLUS
10020: ST_TO_ADDR
// end ;
10021: PPOPN 1
10023: END
// on VehicleConstructed ( veh , factory ) do begin if GetSide ( factory ) <> 3 then
10024: LD_VAR 0 2
10028: PPUSH
10029: CALL_OW 255
10033: PUSH
10034: LD_INT 3
10036: NONEQUAL
10037: IFFALSE 10041
// exit ;
10039: GO 10103
// if GetWeapon ( veh ) = ru_cargo_bay then
10041: LD_VAR 0 1
10045: PPUSH
10046: CALL_OW 264
10050: PUSH
10051: LD_INT 51
10053: EQUAL
10054: IFFALSE 10058
// exit ;
10056: GO 10103
// russianOmicronAttackers := russianOmicronAttackers union [ veh , IsInUnit ( veh ) ] ;
10058: LD_ADDR_EXP 24
10062: PUSH
10063: LD_EXP 24
10067: PUSH
10068: LD_VAR 0 1
10072: PUSH
10073: LD_VAR 0 1
10077: PPUSH
10078: CALL_OW 310
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: UNION
10087: ST_TO_ADDR
// AddComAgressiveMove ( veh , 71 , 37 ) ;
10088: LD_VAR 0 1
10092: PPUSH
10093: LD_INT 71
10095: PPUSH
10096: LD_INT 37
10098: PPUSH
10099: CALL_OW 174
// end ;
10103: PPOPN 2
10105: END
// on VehicleCaptured ( newId , oldId , oldSide , capturingUnit ) do begin if oldId in russianOmicronAttackers then
10106: LD_VAR 0 2
10110: PUSH
10111: LD_EXP 24
10115: IN
10116: IFFALSE 10134
// russianOmicronAttackers := russianOmicronAttackers diff oldId ;
10118: LD_ADDR_EXP 24
10122: PUSH
10123: LD_EXP 24
10127: PUSH
10128: LD_VAR 0 2
10132: DIFF
10133: ST_TO_ADDR
// if oldId in russianCargo then
10134: LD_VAR 0 2
10138: PUSH
10139: LD_EXP 25
10143: IN
10144: IFFALSE 10162
// russianCargo := russianCargo diff oldId ;
10146: LD_ADDR_EXP 25
10150: PUSH
10151: LD_EXP 25
10155: PUSH
10156: LD_VAR 0 2
10160: DIFF
10161: ST_TO_ADDR
// if newId in russianOmicronAttackers then
10162: LD_VAR 0 1
10166: PUSH
10167: LD_EXP 24
10171: IN
10172: IFFALSE 10190
// russianOmicronAttackers := russianOmicronAttackers diff newId ;
10174: LD_ADDR_EXP 24
10178: PUSH
10179: LD_EXP 24
10183: PUSH
10184: LD_VAR 0 1
10188: DIFF
10189: ST_TO_ADDR
// if newId in russianCargo then
10190: LD_VAR 0 1
10194: PUSH
10195: LD_EXP 25
10199: IN
10200: IFFALSE 10218
// russianCargo := russianCargo diff newId ;
10202: LD_ADDR_EXP 25
10206: PUSH
10207: LD_EXP 25
10211: PUSH
10212: LD_VAR 0 1
10216: DIFF
10217: ST_TO_ADDR
// end ;
10218: PPOPN 4
10220: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ;
10221: LD_VAR 0 1
10225: PPUSH
10226: LD_VAR 0 2
10230: PPUSH
10231: LD_VAR 0 3
10235: PPUSH
10236: CALL 10790 0 3
// if killerSide in [ 1 , 4 ] and GetSide ( un ) in [ 3 , 6 ] then
10240: LD_VAR 0 2
10244: PUSH
10245: LD_INT 1
10247: PUSH
10248: LD_INT 4
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: IN
10255: PUSH
10256: LD_VAR 0 1
10260: PPUSH
10261: CALL_OW 255
10265: PUSH
10266: LD_INT 3
10268: PUSH
10269: LD_INT 6
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: IN
10276: AND
10277: IFFALSE 10293
// ruLoseCounter := ruLoseCounter + 1 ;
10279: LD_ADDR_EXP 11
10283: PUSH
10284: LD_EXP 11
10288: PUSH
10289: LD_INT 1
10291: PLUS
10292: ST_TO_ADDR
// if killerSide in [ 1 , 4 ] and GetType ( un ) = unit_vehicle and GetSide ( un ) in [ 3 , 6 ] then
10293: LD_VAR 0 2
10297: PUSH
10298: LD_INT 1
10300: PUSH
10301: LD_INT 4
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: IN
10308: PUSH
10309: LD_VAR 0 1
10313: PPUSH
10314: CALL_OW 247
10318: PUSH
10319: LD_INT 2
10321: EQUAL
10322: AND
10323: PUSH
10324: LD_VAR 0 1
10328: PPUSH
10329: CALL_OW 255
10333: PUSH
10334: LD_INT 3
10336: PUSH
10337: LD_INT 6
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: IN
10344: AND
10345: IFFALSE 10361
// tanksCounter := tanksCounter + 1 ;
10347: LD_ADDR_EXP 12
10351: PUSH
10352: LD_EXP 12
10356: PUSH
10357: LD_INT 1
10359: PLUS
10360: ST_TO_ADDR
// end ;
10361: PPOPN 3
10363: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetSide ( driver ) in [ 3 , 6 ] then
10364: LD_VAR 0 1
10368: PPUSH
10369: CALL_OW 255
10373: PUSH
10374: LD_INT 3
10376: PUSH
10377: LD_INT 6
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: IN
10384: IFFALSE 10533
// begin ComRepairVehicle ( driver , veh ) ;
10386: LD_VAR 0 1
10390: PPUSH
10391: LD_VAR 0 2
10395: PPUSH
10396: CALL_OW 129
// repeat wait ( 0 0$1 ) ;
10400: LD_INT 35
10402: PPUSH
10403: CALL_OW 67
// until IsDead ( veh ) or IsDead ( driver ) or GetLives ( veh ) > 250 ;
10407: LD_VAR 0 2
10411: PPUSH
10412: CALL_OW 301
10416: PUSH
10417: LD_VAR 0 1
10421: PPUSH
10422: CALL_OW 301
10426: OR
10427: PUSH
10428: LD_VAR 0 2
10432: PPUSH
10433: CALL_OW 256
10437: PUSH
10438: LD_INT 250
10440: GREATER
10441: OR
10442: IFFALSE 10400
// if GetLives ( veh ) > 250 then
10444: LD_VAR 0 2
10448: PPUSH
10449: CALL_OW 256
10453: PUSH
10454: LD_INT 250
10456: GREATER
10457: IFFALSE 10533
// begin ComEnterUnit ( driver , veh ) ;
10459: LD_VAR 0 1
10463: PPUSH
10464: LD_VAR 0 2
10468: PPUSH
10469: CALL_OW 120
// AddComMoveXY ( driver , 71 , 29 ) ;
10473: LD_VAR 0 1
10477: PPUSH
10478: LD_INT 71
10480: PPUSH
10481: LD_INT 29
10483: PPUSH
10484: CALL_OW 171
// SetTag ( veh , 1 ) ;
10488: LD_VAR 0 2
10492: PPUSH
10493: LD_INT 1
10495: PPUSH
10496: CALL_OW 109
// if not veh in russianOmicronAttackers then
10500: LD_VAR 0 2
10504: PUSH
10505: LD_EXP 24
10509: IN
10510: NOT
10511: IFFALSE 10533
// russianOmicronAttackers := Join ( russianOmicronAttackers , veh ) ;
10513: LD_ADDR_EXP 24
10517: PUSH
10518: LD_EXP 24
10522: PPUSH
10523: LD_VAR 0 2
10527: PPUSH
10528: CALL 65712 0 2
10532: ST_TO_ADDR
// end ; end ; end ;
10533: PPOPN 4
10535: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10536: LD_VAR 0 1
10540: PPUSH
10541: CALL 10798 0 1
// end ; end_of_file
10545: PPOPN 1
10547: END
// every 1 1$35 trigger sikorskiInOmicron and GetResourceArea ( cratesSpawnArea , mat_cans ) < [ 18 , 15 , 12 ] [ Difficulty ] do
10548: LD_EXP 9
10552: PUSH
10553: LD_INT 6
10555: PPUSH
10556: LD_INT 1
10558: PPUSH
10559: CALL_OW 287
10563: PUSH
10564: LD_INT 18
10566: PUSH
10567: LD_INT 15
10569: PUSH
10570: LD_INT 12
10572: PUSH
10573: EMPTY
10574: LIST
10575: LIST
10576: LIST
10577: PUSH
10578: LD_OWVAR 67
10582: ARRAY
10583: LESS
10584: AND
10585: IFFALSE 10627
10587: GO 10589
10589: DISABLE
// begin enable ;
10590: ENABLE
// wait ( rand ( 0 0$10 , 0 0$30 ) ) ;
10591: LD_INT 350
10593: PPUSH
10594: LD_INT 1050
10596: PPUSH
10597: CALL_OW 12
10601: PPUSH
10602: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , cratesSpawnArea , true ) ;
10606: LD_INT 2
10608: PPUSH
10609: LD_INT 5
10611: PPUSH
10612: CALL_OW 12
10616: PPUSH
10617: LD_INT 6
10619: PPUSH
10620: LD_INT 1
10622: PPUSH
10623: CALL_OW 55
// end ;
10627: END
// every 1 1$25 trigger GetResourceArea ( ruCratesSpawnArea , mat_cans ) < 5 do
10628: LD_INT 7
10630: PPUSH
10631: LD_INT 1
10633: PPUSH
10634: CALL_OW 287
10638: PUSH
10639: LD_INT 5
10641: LESS
10642: IFFALSE 10669
10644: GO 10646
10646: DISABLE
// begin enable ;
10647: ENABLE
// CreateCratesArea ( rand ( 2 , 5 ) , ruCratesSpawnArea , true ) ;
10648: LD_INT 2
10650: PPUSH
10651: LD_INT 5
10653: PPUSH
10654: CALL_OW 12
10658: PPUSH
10659: LD_INT 7
10661: PPUSH
10662: LD_INT 1
10664: PPUSH
10665: CALL_OW 55
// end ; end_of_file
10669: END
// every 0 0$01 do
10670: GO 10672
10672: DISABLE
// begin enable ;
10673: ENABLE
// display_strings := [ #tick , tick ] ;
10674: LD_ADDR_OWVAR 47
10678: PUSH
10679: LD_STRING #tick
10681: PUSH
10682: LD_OWVAR 1
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: ST_TO_ADDR
// end ; end_of_file
10691: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
10692: LD_INT 0
10694: PPUSH
10695: PPUSH
10696: PPUSH
10697: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
10698: LD_VAR 0 1
10702: PPUSH
10703: CALL_OW 264
10707: PUSH
10708: LD_EXP 99
10712: EQUAL
10713: IFFALSE 10785
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
10715: LD_INT 68
10717: PPUSH
10718: LD_VAR 0 1
10722: PPUSH
10723: CALL_OW 255
10727: PPUSH
10728: CALL_OW 321
10732: PUSH
10733: LD_INT 2
10735: EQUAL
10736: IFFALSE 10748
// eff := 70 else
10738: LD_ADDR_VAR 0 4
10742: PUSH
10743: LD_INT 70
10745: ST_TO_ADDR
10746: GO 10756
// eff := 30 ;
10748: LD_ADDR_VAR 0 4
10752: PUSH
10753: LD_INT 30
10755: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
10756: LD_VAR 0 1
10760: PPUSH
10761: CALL_OW 250
10765: PPUSH
10766: LD_VAR 0 1
10770: PPUSH
10771: CALL_OW 251
10775: PPUSH
10776: LD_VAR 0 4
10780: PPUSH
10781: CALL_OW 495
// end ; end ;
10785: LD_VAR 0 2
10789: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
10790: LD_INT 0
10792: PPUSH
// end ;
10793: LD_VAR 0 4
10797: RET
// export function SOS_Command ( cmd ) ; begin
10798: LD_INT 0
10800: PPUSH
// end ;
10801: LD_VAR 0 2
10805: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
10806: LD_INT 0
10808: PPUSH
// end ;
10809: LD_VAR 0 6
10813: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
10814: LD_INT 0
10816: PPUSH
10817: PPUSH
// if not vehicle or not factory then
10818: LD_VAR 0 1
10822: NOT
10823: PUSH
10824: LD_VAR 0 2
10828: NOT
10829: OR
10830: IFFALSE 10834
// exit ;
10832: GO 11065
// if factoryWaypoints >= factory then
10834: LD_EXP 26
10838: PUSH
10839: LD_VAR 0 2
10843: GREATEREQUAL
10844: IFFALSE 11065
// if factoryWaypoints [ factory ] then
10846: LD_EXP 26
10850: PUSH
10851: LD_VAR 0 2
10855: ARRAY
10856: IFFALSE 11065
// begin if GetControl ( vehicle ) = control_manual then
10858: LD_VAR 0 1
10862: PPUSH
10863: CALL_OW 263
10867: PUSH
10868: LD_INT 1
10870: EQUAL
10871: IFFALSE 10952
// begin driver := IsDrivenBy ( vehicle ) ;
10873: LD_ADDR_VAR 0 4
10877: PUSH
10878: LD_VAR 0 1
10882: PPUSH
10883: CALL_OW 311
10887: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
10888: LD_VAR 0 4
10892: PPUSH
10893: LD_EXP 26
10897: PUSH
10898: LD_VAR 0 2
10902: ARRAY
10903: PUSH
10904: LD_INT 1
10906: ARRAY
10907: PPUSH
10908: LD_EXP 26
10912: PUSH
10913: LD_VAR 0 2
10917: ARRAY
10918: PUSH
10919: LD_INT 2
10921: ARRAY
10922: PPUSH
10923: CALL_OW 171
// AddComExitVehicle ( driver ) ;
10927: LD_VAR 0 4
10931: PPUSH
10932: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
10936: LD_VAR 0 4
10940: PPUSH
10941: LD_VAR 0 2
10945: PPUSH
10946: CALL_OW 180
// end else
10950: GO 11065
// if GetControl ( vehicle ) = control_remote then
10952: LD_VAR 0 1
10956: PPUSH
10957: CALL_OW 263
10961: PUSH
10962: LD_INT 2
10964: EQUAL
10965: IFFALSE 11026
// begin wait ( 0 0$2 ) ;
10967: LD_INT 70
10969: PPUSH
10970: CALL_OW 67
// if Connect ( vehicle ) then
10974: LD_VAR 0 1
10978: PPUSH
10979: CALL 36932 0 1
10983: IFFALSE 11024
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
10985: LD_VAR 0 1
10989: PPUSH
10990: LD_EXP 26
10994: PUSH
10995: LD_VAR 0 2
10999: ARRAY
11000: PUSH
11001: LD_INT 1
11003: ARRAY
11004: PPUSH
11005: LD_EXP 26
11009: PUSH
11010: LD_VAR 0 2
11014: ARRAY
11015: PUSH
11016: LD_INT 2
11018: ARRAY
11019: PPUSH
11020: CALL_OW 171
// end else
11024: GO 11065
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
11026: LD_VAR 0 1
11030: PPUSH
11031: LD_EXP 26
11035: PUSH
11036: LD_VAR 0 2
11040: ARRAY
11041: PUSH
11042: LD_INT 1
11044: ARRAY
11045: PPUSH
11046: LD_EXP 26
11050: PUSH
11051: LD_VAR 0 2
11055: ARRAY
11056: PUSH
11057: LD_INT 2
11059: ARRAY
11060: PPUSH
11061: CALL_OW 171
// end ; end ;
11065: LD_VAR 0 3
11069: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
11070: LD_INT 0
11072: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
11073: LD_VAR 0 1
11077: PUSH
11078: LD_INT 250
11080: EQUAL
11081: PUSH
11082: LD_VAR 0 2
11086: PPUSH
11087: CALL_OW 264
11091: PUSH
11092: LD_EXP 102
11096: EQUAL
11097: AND
11098: IFFALSE 11119
// MinerPlaceMine ( unit , x , y ) ;
11100: LD_VAR 0 2
11104: PPUSH
11105: LD_VAR 0 4
11109: PPUSH
11110: LD_VAR 0 5
11114: PPUSH
11115: CALL 13683 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
11119: LD_VAR 0 1
11123: PUSH
11124: LD_INT 251
11126: EQUAL
11127: PUSH
11128: LD_VAR 0 2
11132: PPUSH
11133: CALL_OW 264
11137: PUSH
11138: LD_EXP 102
11142: EQUAL
11143: AND
11144: IFFALSE 11165
// MinerDetonateMine ( unit , x , y ) ;
11146: LD_VAR 0 2
11150: PPUSH
11151: LD_VAR 0 4
11155: PPUSH
11156: LD_VAR 0 5
11160: PPUSH
11161: CALL 13960 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
11165: LD_VAR 0 1
11169: PUSH
11170: LD_INT 252
11172: EQUAL
11173: PUSH
11174: LD_VAR 0 2
11178: PPUSH
11179: CALL_OW 264
11183: PUSH
11184: LD_EXP 102
11188: EQUAL
11189: AND
11190: IFFALSE 11211
// MinerCreateMinefield ( unit , x , y ) ;
11192: LD_VAR 0 2
11196: PPUSH
11197: LD_VAR 0 4
11201: PPUSH
11202: LD_VAR 0 5
11206: PPUSH
11207: CALL 14377 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
11211: LD_VAR 0 1
11215: PUSH
11216: LD_INT 253
11218: EQUAL
11219: PUSH
11220: LD_VAR 0 2
11224: PPUSH
11225: CALL_OW 257
11229: PUSH
11230: LD_INT 5
11232: EQUAL
11233: AND
11234: IFFALSE 11255
// ComBinocular ( unit , x , y ) ;
11236: LD_VAR 0 2
11240: PPUSH
11241: LD_VAR 0 4
11245: PPUSH
11246: LD_VAR 0 5
11250: PPUSH
11251: CALL 14748 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
11255: LD_VAR 0 1
11259: PUSH
11260: LD_INT 254
11262: EQUAL
11263: PUSH
11264: LD_VAR 0 2
11268: PPUSH
11269: CALL_OW 264
11273: PUSH
11274: LD_EXP 97
11278: EQUAL
11279: AND
11280: PUSH
11281: LD_VAR 0 3
11285: PPUSH
11286: CALL_OW 263
11290: PUSH
11291: LD_INT 3
11293: EQUAL
11294: AND
11295: IFFALSE 11311
// HackDestroyVehicle ( unit , selectedUnit ) ;
11297: LD_VAR 0 2
11301: PPUSH
11302: LD_VAR 0 3
11306: PPUSH
11307: CALL 13043 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
11311: LD_VAR 0 1
11315: PUSH
11316: LD_INT 255
11318: EQUAL
11319: PUSH
11320: LD_VAR 0 2
11324: PPUSH
11325: CALL_OW 264
11329: PUSH
11330: LD_INT 14
11332: PUSH
11333: LD_INT 53
11335: PUSH
11336: EMPTY
11337: LIST
11338: LIST
11339: IN
11340: AND
11341: PUSH
11342: LD_VAR 0 4
11346: PPUSH
11347: LD_VAR 0 5
11351: PPUSH
11352: CALL_OW 488
11356: AND
11357: IFFALSE 11381
// CutTreeXYR ( unit , x , y , 12 ) ;
11359: LD_VAR 0 2
11363: PPUSH
11364: LD_VAR 0 4
11368: PPUSH
11369: LD_VAR 0 5
11373: PPUSH
11374: LD_INT 12
11376: PPUSH
11377: CALL 11609 0 4
// if cmd = 256 then
11381: LD_VAR 0 1
11385: PUSH
11386: LD_INT 256
11388: EQUAL
11389: IFFALSE 11410
// SetFactoryWaypoint ( unit , x , y ) ;
11391: LD_VAR 0 2
11395: PPUSH
11396: LD_VAR 0 4
11400: PPUSH
11401: LD_VAR 0 5
11405: PPUSH
11406: CALL 11415 0 3
// end ;
11410: LD_VAR 0 6
11414: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
11415: LD_INT 0
11417: PPUSH
11418: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
11419: LD_VAR 0 1
11423: NOT
11424: PUSH
11425: LD_VAR 0 2
11429: PPUSH
11430: LD_VAR 0 3
11434: PPUSH
11435: CALL_OW 488
11439: NOT
11440: OR
11441: PUSH
11442: LD_VAR 0 1
11446: PPUSH
11447: CALL_OW 266
11451: PUSH
11452: LD_INT 3
11454: NONEQUAL
11455: PUSH
11456: LD_VAR 0 1
11460: PPUSH
11461: CALL_OW 247
11465: PUSH
11466: LD_INT 1
11468: EQUAL
11469: NOT
11470: AND
11471: OR
11472: IFFALSE 11476
// exit ;
11474: GO 11604
// if GetType ( factory ) = unit_human then
11476: LD_VAR 0 1
11480: PPUSH
11481: CALL_OW 247
11485: PUSH
11486: LD_INT 1
11488: EQUAL
11489: IFFALSE 11506
// factory := IsInUnit ( factory ) ;
11491: LD_ADDR_VAR 0 1
11495: PUSH
11496: LD_VAR 0 1
11500: PPUSH
11501: CALL_OW 310
11505: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
11506: LD_VAR 0 1
11510: PPUSH
11511: CALL_OW 266
11515: PUSH
11516: LD_INT 3
11518: NONEQUAL
11519: IFFALSE 11523
// exit ;
11521: GO 11604
// if HexInfo ( x , y ) = factory then
11523: LD_VAR 0 2
11527: PPUSH
11528: LD_VAR 0 3
11532: PPUSH
11533: CALL_OW 428
11537: PUSH
11538: LD_VAR 0 1
11542: EQUAL
11543: IFFALSE 11570
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
11545: LD_ADDR_EXP 26
11549: PUSH
11550: LD_EXP 26
11554: PPUSH
11555: LD_VAR 0 1
11559: PPUSH
11560: LD_INT 0
11562: PPUSH
11563: CALL_OW 1
11567: ST_TO_ADDR
11568: GO 11604
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ x , y ] ) ;
11570: LD_ADDR_EXP 26
11574: PUSH
11575: LD_EXP 26
11579: PPUSH
11580: LD_VAR 0 1
11584: PPUSH
11585: LD_VAR 0 2
11589: PUSH
11590: LD_VAR 0 3
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PPUSH
11599: CALL_OW 1
11603: ST_TO_ADDR
// end ;
11604: LD_VAR 0 4
11608: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
11609: LD_INT 0
11611: PPUSH
11612: PPUSH
11613: PPUSH
11614: PPUSH
11615: PPUSH
11616: PPUSH
11617: PPUSH
11618: PPUSH
11619: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
11620: LD_VAR 0 1
11624: NOT
11625: PUSH
11626: LD_VAR 0 2
11630: PPUSH
11631: LD_VAR 0 3
11635: PPUSH
11636: CALL_OW 488
11640: NOT
11641: OR
11642: PUSH
11643: LD_VAR 0 4
11647: NOT
11648: OR
11649: IFFALSE 11653
// exit ;
11651: GO 11993
// list := [ ] ;
11653: LD_ADDR_VAR 0 13
11657: PUSH
11658: EMPTY
11659: ST_TO_ADDR
// if x - r < 0 then
11660: LD_VAR 0 2
11664: PUSH
11665: LD_VAR 0 4
11669: MINUS
11670: PUSH
11671: LD_INT 0
11673: LESS
11674: IFFALSE 11686
// min_x := 0 else
11676: LD_ADDR_VAR 0 7
11680: PUSH
11681: LD_INT 0
11683: ST_TO_ADDR
11684: GO 11702
// min_x := x - r ;
11686: LD_ADDR_VAR 0 7
11690: PUSH
11691: LD_VAR 0 2
11695: PUSH
11696: LD_VAR 0 4
11700: MINUS
11701: ST_TO_ADDR
// if y - r < 0 then
11702: LD_VAR 0 3
11706: PUSH
11707: LD_VAR 0 4
11711: MINUS
11712: PUSH
11713: LD_INT 0
11715: LESS
11716: IFFALSE 11728
// min_y := 0 else
11718: LD_ADDR_VAR 0 8
11722: PUSH
11723: LD_INT 0
11725: ST_TO_ADDR
11726: GO 11744
// min_y := y - r ;
11728: LD_ADDR_VAR 0 8
11732: PUSH
11733: LD_VAR 0 3
11737: PUSH
11738: LD_VAR 0 4
11742: MINUS
11743: ST_TO_ADDR
// max_x := x + r ;
11744: LD_ADDR_VAR 0 9
11748: PUSH
11749: LD_VAR 0 2
11753: PUSH
11754: LD_VAR 0 4
11758: PLUS
11759: ST_TO_ADDR
// max_y := y + r ;
11760: LD_ADDR_VAR 0 10
11764: PUSH
11765: LD_VAR 0 3
11769: PUSH
11770: LD_VAR 0 4
11774: PLUS
11775: ST_TO_ADDR
// for _x = min_x to max_x do
11776: LD_ADDR_VAR 0 11
11780: PUSH
11781: DOUBLE
11782: LD_VAR 0 7
11786: DEC
11787: ST_TO_ADDR
11788: LD_VAR 0 9
11792: PUSH
11793: FOR_TO
11794: IFFALSE 11911
// for _y = min_y to max_y do
11796: LD_ADDR_VAR 0 12
11800: PUSH
11801: DOUBLE
11802: LD_VAR 0 8
11806: DEC
11807: ST_TO_ADDR
11808: LD_VAR 0 10
11812: PUSH
11813: FOR_TO
11814: IFFALSE 11907
// begin if not ValidHex ( _x , _y ) then
11816: LD_VAR 0 11
11820: PPUSH
11821: LD_VAR 0 12
11825: PPUSH
11826: CALL_OW 488
11830: NOT
11831: IFFALSE 11835
// continue ;
11833: GO 11813
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
11835: LD_VAR 0 11
11839: PPUSH
11840: LD_VAR 0 12
11844: PPUSH
11845: CALL_OW 351
11849: PUSH
11850: LD_VAR 0 11
11854: PPUSH
11855: LD_VAR 0 12
11859: PPUSH
11860: CALL_OW 554
11864: AND
11865: IFFALSE 11905
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
11867: LD_ADDR_VAR 0 13
11871: PUSH
11872: LD_VAR 0 13
11876: PPUSH
11877: LD_VAR 0 13
11881: PUSH
11882: LD_INT 1
11884: PLUS
11885: PPUSH
11886: LD_VAR 0 11
11890: PUSH
11891: LD_VAR 0 12
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: PPUSH
11900: CALL_OW 2
11904: ST_TO_ADDR
// end ;
11905: GO 11813
11907: POP
11908: POP
11909: GO 11793
11911: POP
11912: POP
// if not list then
11913: LD_VAR 0 13
11917: NOT
11918: IFFALSE 11922
// exit ;
11920: GO 11993
// for i in list do
11922: LD_ADDR_VAR 0 6
11926: PUSH
11927: LD_VAR 0 13
11931: PUSH
11932: FOR_IN
11933: IFFALSE 11991
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
11935: LD_VAR 0 1
11939: PPUSH
11940: LD_STRING M
11942: PUSH
11943: LD_VAR 0 6
11947: PUSH
11948: LD_INT 1
11950: ARRAY
11951: PUSH
11952: LD_VAR 0 6
11956: PUSH
11957: LD_INT 2
11959: ARRAY
11960: PUSH
11961: LD_INT 0
11963: PUSH
11964: LD_INT 0
11966: PUSH
11967: LD_INT 0
11969: PUSH
11970: LD_INT 0
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: PUSH
11982: EMPTY
11983: LIST
11984: PPUSH
11985: CALL_OW 447
11989: GO 11932
11991: POP
11992: POP
// end ;
11993: LD_VAR 0 5
11997: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
11998: LD_EXP 27
12002: NOT
12003: IFFALSE 12053
12005: GO 12007
12007: DISABLE
// begin initHack := true ;
12008: LD_ADDR_EXP 27
12012: PUSH
12013: LD_INT 1
12015: ST_TO_ADDR
// hackTanks := [ ] ;
12016: LD_ADDR_EXP 28
12020: PUSH
12021: EMPTY
12022: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
12023: LD_ADDR_EXP 29
12027: PUSH
12028: EMPTY
12029: ST_TO_ADDR
// hackLimit := 3 ;
12030: LD_ADDR_EXP 30
12034: PUSH
12035: LD_INT 3
12037: ST_TO_ADDR
// hackDist := 12 ;
12038: LD_ADDR_EXP 31
12042: PUSH
12043: LD_INT 12
12045: ST_TO_ADDR
// hackCounter := [ ] ;
12046: LD_ADDR_EXP 32
12050: PUSH
12051: EMPTY
12052: ST_TO_ADDR
// end ;
12053: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
12054: LD_EXP 27
12058: PUSH
12059: LD_INT 34
12061: PUSH
12062: LD_EXP 97
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: PPUSH
12071: CALL_OW 69
12075: AND
12076: IFFALSE 12331
12078: GO 12080
12080: DISABLE
12081: LD_INT 0
12083: PPUSH
12084: PPUSH
// begin enable ;
12085: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
12086: LD_ADDR_VAR 0 1
12090: PUSH
12091: LD_INT 34
12093: PUSH
12094: LD_EXP 97
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: PPUSH
12103: CALL_OW 69
12107: PUSH
12108: FOR_IN
12109: IFFALSE 12329
// begin if not i in hackTanks then
12111: LD_VAR 0 1
12115: PUSH
12116: LD_EXP 28
12120: IN
12121: NOT
12122: IFFALSE 12205
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
12124: LD_ADDR_EXP 28
12128: PUSH
12129: LD_EXP 28
12133: PPUSH
12134: LD_EXP 28
12138: PUSH
12139: LD_INT 1
12141: PLUS
12142: PPUSH
12143: LD_VAR 0 1
12147: PPUSH
12148: CALL_OW 1
12152: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
12153: LD_ADDR_EXP 29
12157: PUSH
12158: LD_EXP 29
12162: PPUSH
12163: LD_EXP 29
12167: PUSH
12168: LD_INT 1
12170: PLUS
12171: PPUSH
12172: EMPTY
12173: PPUSH
12174: CALL_OW 1
12178: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
12179: LD_ADDR_EXP 32
12183: PUSH
12184: LD_EXP 32
12188: PPUSH
12189: LD_EXP 32
12193: PUSH
12194: LD_INT 1
12196: PLUS
12197: PPUSH
12198: EMPTY
12199: PPUSH
12200: CALL_OW 1
12204: ST_TO_ADDR
// end ; if not IsOk ( i ) then
12205: LD_VAR 0 1
12209: PPUSH
12210: CALL_OW 302
12214: NOT
12215: IFFALSE 12228
// begin HackUnlinkAll ( i ) ;
12217: LD_VAR 0 1
12221: PPUSH
12222: CALL 12334 0 1
// continue ;
12226: GO 12108
// end ; HackCheckCapturedStatus ( i ) ;
12228: LD_VAR 0 1
12232: PPUSH
12233: CALL 12777 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
12237: LD_ADDR_VAR 0 2
12241: PUSH
12242: LD_INT 81
12244: PUSH
12245: LD_VAR 0 1
12249: PPUSH
12250: CALL_OW 255
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: PUSH
12259: LD_INT 33
12261: PUSH
12262: LD_INT 3
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: PUSH
12269: LD_INT 91
12271: PUSH
12272: LD_VAR 0 1
12276: PUSH
12277: LD_EXP 31
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: LIST
12286: PUSH
12287: LD_INT 50
12289: PUSH
12290: EMPTY
12291: LIST
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: PPUSH
12299: CALL_OW 69
12303: ST_TO_ADDR
// if not tmp then
12304: LD_VAR 0 2
12308: NOT
12309: IFFALSE 12313
// continue ;
12311: GO 12108
// HackLink ( i , tmp ) ;
12313: LD_VAR 0 1
12317: PPUSH
12318: LD_VAR 0 2
12322: PPUSH
12323: CALL 12470 0 2
// end ;
12327: GO 12108
12329: POP
12330: POP
// end ;
12331: PPOPN 2
12333: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
12334: LD_INT 0
12336: PPUSH
12337: PPUSH
12338: PPUSH
// if not hack in hackTanks then
12339: LD_VAR 0 1
12343: PUSH
12344: LD_EXP 28
12348: IN
12349: NOT
12350: IFFALSE 12354
// exit ;
12352: GO 12465
// index := GetElementIndex ( hackTanks , hack ) ;
12354: LD_ADDR_VAR 0 4
12358: PUSH
12359: LD_EXP 28
12363: PPUSH
12364: LD_VAR 0 1
12368: PPUSH
12369: CALL 33746 0 2
12373: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
12374: LD_EXP 29
12378: PUSH
12379: LD_VAR 0 4
12383: ARRAY
12384: IFFALSE 12465
// begin for i in hackTanksCaptured [ index ] do
12386: LD_ADDR_VAR 0 3
12390: PUSH
12391: LD_EXP 29
12395: PUSH
12396: LD_VAR 0 4
12400: ARRAY
12401: PUSH
12402: FOR_IN
12403: IFFALSE 12429
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
12405: LD_VAR 0 3
12409: PUSH
12410: LD_INT 1
12412: ARRAY
12413: PPUSH
12414: LD_VAR 0 3
12418: PUSH
12419: LD_INT 2
12421: ARRAY
12422: PPUSH
12423: CALL_OW 235
12427: GO 12402
12429: POP
12430: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
12431: LD_ADDR_EXP 29
12435: PUSH
12436: LD_EXP 29
12440: PPUSH
12441: LD_VAR 0 4
12445: PPUSH
12446: EMPTY
12447: PPUSH
12448: CALL_OW 1
12452: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
12453: LD_VAR 0 1
12457: PPUSH
12458: LD_INT 0
12460: PPUSH
12461: CALL_OW 505
// end ; end ;
12465: LD_VAR 0 2
12469: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
12470: LD_INT 0
12472: PPUSH
12473: PPUSH
12474: PPUSH
// if not hack in hackTanks or not vehicles then
12475: LD_VAR 0 1
12479: PUSH
12480: LD_EXP 28
12484: IN
12485: NOT
12486: PUSH
12487: LD_VAR 0 2
12491: NOT
12492: OR
12493: IFFALSE 12497
// exit ;
12495: GO 12772
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
12497: LD_ADDR_VAR 0 2
12501: PUSH
12502: LD_VAR 0 1
12506: PPUSH
12507: LD_VAR 0 2
12511: PPUSH
12512: LD_INT 1
12514: PPUSH
12515: LD_INT 1
12517: PPUSH
12518: CALL 34396 0 4
12522: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
12523: LD_ADDR_VAR 0 5
12527: PUSH
12528: LD_EXP 28
12532: PPUSH
12533: LD_VAR 0 1
12537: PPUSH
12538: CALL 33746 0 2
12542: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
12543: LD_EXP 29
12547: PUSH
12548: LD_VAR 0 5
12552: ARRAY
12553: PUSH
12554: LD_EXP 30
12558: LESS
12559: IFFALSE 12748
// begin for i := 1 to vehicles do
12561: LD_ADDR_VAR 0 4
12565: PUSH
12566: DOUBLE
12567: LD_INT 1
12569: DEC
12570: ST_TO_ADDR
12571: LD_VAR 0 2
12575: PUSH
12576: FOR_TO
12577: IFFALSE 12746
// begin if hackTanksCaptured [ index ] = hackLimit then
12579: LD_EXP 29
12583: PUSH
12584: LD_VAR 0 5
12588: ARRAY
12589: PUSH
12590: LD_EXP 30
12594: EQUAL
12595: IFFALSE 12599
// break ;
12597: GO 12746
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
12599: LD_ADDR_EXP 32
12603: PUSH
12604: LD_EXP 32
12608: PPUSH
12609: LD_VAR 0 5
12613: PPUSH
12614: LD_EXP 32
12618: PUSH
12619: LD_VAR 0 5
12623: ARRAY
12624: PUSH
12625: LD_INT 1
12627: PLUS
12628: PPUSH
12629: CALL_OW 1
12633: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
12634: LD_ADDR_EXP 29
12638: PUSH
12639: LD_EXP 29
12643: PPUSH
12644: LD_VAR 0 5
12648: PUSH
12649: LD_EXP 29
12653: PUSH
12654: LD_VAR 0 5
12658: ARRAY
12659: PUSH
12660: LD_INT 1
12662: PLUS
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: PPUSH
12668: LD_VAR 0 2
12672: PUSH
12673: LD_VAR 0 4
12677: ARRAY
12678: PUSH
12679: LD_VAR 0 2
12683: PUSH
12684: LD_VAR 0 4
12688: ARRAY
12689: PPUSH
12690: CALL_OW 255
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: PPUSH
12699: CALL 33961 0 3
12703: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
12704: LD_VAR 0 2
12708: PUSH
12709: LD_VAR 0 4
12713: ARRAY
12714: PPUSH
12715: LD_VAR 0 1
12719: PPUSH
12720: CALL_OW 255
12724: PPUSH
12725: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
12729: LD_VAR 0 2
12733: PUSH
12734: LD_VAR 0 4
12738: ARRAY
12739: PPUSH
12740: CALL_OW 141
// end ;
12744: GO 12576
12746: POP
12747: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
12748: LD_VAR 0 1
12752: PPUSH
12753: LD_EXP 29
12757: PUSH
12758: LD_VAR 0 5
12762: ARRAY
12763: PUSH
12764: LD_INT 0
12766: PLUS
12767: PPUSH
12768: CALL_OW 505
// end ;
12772: LD_VAR 0 3
12776: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
12777: LD_INT 0
12779: PPUSH
12780: PPUSH
12781: PPUSH
12782: PPUSH
// if not hack in hackTanks then
12783: LD_VAR 0 1
12787: PUSH
12788: LD_EXP 28
12792: IN
12793: NOT
12794: IFFALSE 12798
// exit ;
12796: GO 13038
// index := GetElementIndex ( hackTanks , hack ) ;
12798: LD_ADDR_VAR 0 4
12802: PUSH
12803: LD_EXP 28
12807: PPUSH
12808: LD_VAR 0 1
12812: PPUSH
12813: CALL 33746 0 2
12817: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
12818: LD_ADDR_VAR 0 3
12822: PUSH
12823: DOUBLE
12824: LD_EXP 29
12828: PUSH
12829: LD_VAR 0 4
12833: ARRAY
12834: INC
12835: ST_TO_ADDR
12836: LD_INT 1
12838: PUSH
12839: FOR_DOWNTO
12840: IFFALSE 13012
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
12842: LD_ADDR_VAR 0 5
12846: PUSH
12847: LD_EXP 29
12851: PUSH
12852: LD_VAR 0 4
12856: ARRAY
12857: PUSH
12858: LD_VAR 0 3
12862: ARRAY
12863: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
12864: LD_VAR 0 5
12868: PUSH
12869: LD_INT 1
12871: ARRAY
12872: PPUSH
12873: CALL_OW 302
12877: NOT
12878: PUSH
12879: LD_VAR 0 5
12883: PUSH
12884: LD_INT 1
12886: ARRAY
12887: PPUSH
12888: CALL_OW 255
12892: PUSH
12893: LD_VAR 0 1
12897: PPUSH
12898: CALL_OW 255
12902: NONEQUAL
12903: OR
12904: IFFALSE 13010
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
12906: LD_VAR 0 5
12910: PUSH
12911: LD_INT 1
12913: ARRAY
12914: PPUSH
12915: CALL_OW 305
12919: PUSH
12920: LD_VAR 0 5
12924: PUSH
12925: LD_INT 1
12927: ARRAY
12928: PPUSH
12929: CALL_OW 255
12933: PUSH
12934: LD_VAR 0 1
12938: PPUSH
12939: CALL_OW 255
12943: EQUAL
12944: AND
12945: IFFALSE 12969
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
12947: LD_VAR 0 5
12951: PUSH
12952: LD_INT 1
12954: ARRAY
12955: PPUSH
12956: LD_VAR 0 5
12960: PUSH
12961: LD_INT 2
12963: ARRAY
12964: PPUSH
12965: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
12969: LD_ADDR_EXP 29
12973: PUSH
12974: LD_EXP 29
12978: PPUSH
12979: LD_VAR 0 4
12983: PPUSH
12984: LD_EXP 29
12988: PUSH
12989: LD_VAR 0 4
12993: ARRAY
12994: PPUSH
12995: LD_VAR 0 3
12999: PPUSH
13000: CALL_OW 3
13004: PPUSH
13005: CALL_OW 1
13009: ST_TO_ADDR
// end ; end ;
13010: GO 12839
13012: POP
13013: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
13014: LD_VAR 0 1
13018: PPUSH
13019: LD_EXP 29
13023: PUSH
13024: LD_VAR 0 4
13028: ARRAY
13029: PUSH
13030: LD_INT 0
13032: PLUS
13033: PPUSH
13034: CALL_OW 505
// end ;
13038: LD_VAR 0 2
13042: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
13043: LD_INT 0
13045: PPUSH
13046: PPUSH
13047: PPUSH
13048: PPUSH
// if not hack in hackTanks then
13049: LD_VAR 0 1
13053: PUSH
13054: LD_EXP 28
13058: IN
13059: NOT
13060: IFFALSE 13064
// exit ;
13062: GO 13149
// index := GetElementIndex ( hackTanks , hack ) ;
13064: LD_ADDR_VAR 0 5
13068: PUSH
13069: LD_EXP 28
13073: PPUSH
13074: LD_VAR 0 1
13078: PPUSH
13079: CALL 33746 0 2
13083: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
13084: LD_ADDR_VAR 0 4
13088: PUSH
13089: DOUBLE
13090: LD_INT 1
13092: DEC
13093: ST_TO_ADDR
13094: LD_EXP 29
13098: PUSH
13099: LD_VAR 0 5
13103: ARRAY
13104: PUSH
13105: FOR_TO
13106: IFFALSE 13147
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
13108: LD_EXP 29
13112: PUSH
13113: LD_VAR 0 5
13117: ARRAY
13118: PUSH
13119: LD_VAR 0 4
13123: ARRAY
13124: PUSH
13125: LD_INT 1
13127: ARRAY
13128: PUSH
13129: LD_VAR 0 2
13133: EQUAL
13134: IFFALSE 13145
// KillUnit ( vehicle ) ;
13136: LD_VAR 0 2
13140: PPUSH
13141: CALL_OW 66
13145: GO 13105
13147: POP
13148: POP
// end ;
13149: LD_VAR 0 3
13153: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
13154: LD_EXP 33
13158: NOT
13159: IFFALSE 13194
13161: GO 13163
13163: DISABLE
// begin initMiner := true ;
13164: LD_ADDR_EXP 33
13168: PUSH
13169: LD_INT 1
13171: ST_TO_ADDR
// minersList := [ ] ;
13172: LD_ADDR_EXP 34
13176: PUSH
13177: EMPTY
13178: ST_TO_ADDR
// minerMinesList := [ ] ;
13179: LD_ADDR_EXP 35
13183: PUSH
13184: EMPTY
13185: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
13186: LD_ADDR_EXP 36
13190: PUSH
13191: LD_INT 5
13193: ST_TO_ADDR
// end ;
13194: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
13195: LD_EXP 33
13199: PUSH
13200: LD_INT 34
13202: PUSH
13203: LD_EXP 102
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: PPUSH
13212: CALL_OW 69
13216: AND
13217: IFFALSE 13680
13219: GO 13221
13221: DISABLE
13222: LD_INT 0
13224: PPUSH
13225: PPUSH
13226: PPUSH
13227: PPUSH
// begin enable ;
13228: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
13229: LD_ADDR_VAR 0 1
13233: PUSH
13234: LD_INT 34
13236: PUSH
13237: LD_EXP 102
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: PPUSH
13246: CALL_OW 69
13250: PUSH
13251: FOR_IN
13252: IFFALSE 13324
// begin if not i in minersList then
13254: LD_VAR 0 1
13258: PUSH
13259: LD_EXP 34
13263: IN
13264: NOT
13265: IFFALSE 13322
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
13267: LD_ADDR_EXP 34
13271: PUSH
13272: LD_EXP 34
13276: PPUSH
13277: LD_EXP 34
13281: PUSH
13282: LD_INT 1
13284: PLUS
13285: PPUSH
13286: LD_VAR 0 1
13290: PPUSH
13291: CALL_OW 1
13295: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
13296: LD_ADDR_EXP 35
13300: PUSH
13301: LD_EXP 35
13305: PPUSH
13306: LD_EXP 35
13310: PUSH
13311: LD_INT 1
13313: PLUS
13314: PPUSH
13315: EMPTY
13316: PPUSH
13317: CALL_OW 1
13321: ST_TO_ADDR
// end end ;
13322: GO 13251
13324: POP
13325: POP
// for i := minerMinesList downto 1 do
13326: LD_ADDR_VAR 0 1
13330: PUSH
13331: DOUBLE
13332: LD_EXP 35
13336: INC
13337: ST_TO_ADDR
13338: LD_INT 1
13340: PUSH
13341: FOR_DOWNTO
13342: IFFALSE 13678
// begin if IsLive ( minersList [ i ] ) then
13344: LD_EXP 34
13348: PUSH
13349: LD_VAR 0 1
13353: ARRAY
13354: PPUSH
13355: CALL_OW 300
13359: IFFALSE 13387
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
13361: LD_EXP 34
13365: PUSH
13366: LD_VAR 0 1
13370: ARRAY
13371: PPUSH
13372: LD_EXP 35
13376: PUSH
13377: LD_VAR 0 1
13381: ARRAY
13382: PPUSH
13383: CALL_OW 505
// if not minerMinesList [ i ] then
13387: LD_EXP 35
13391: PUSH
13392: LD_VAR 0 1
13396: ARRAY
13397: NOT
13398: IFFALSE 13402
// continue ;
13400: GO 13341
// for j := minerMinesList [ i ] downto 1 do
13402: LD_ADDR_VAR 0 2
13406: PUSH
13407: DOUBLE
13408: LD_EXP 35
13412: PUSH
13413: LD_VAR 0 1
13417: ARRAY
13418: INC
13419: ST_TO_ADDR
13420: LD_INT 1
13422: PUSH
13423: FOR_DOWNTO
13424: IFFALSE 13674
// begin side := GetSide ( minersList [ i ] ) ;
13426: LD_ADDR_VAR 0 3
13430: PUSH
13431: LD_EXP 34
13435: PUSH
13436: LD_VAR 0 1
13440: ARRAY
13441: PPUSH
13442: CALL_OW 255
13446: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
13447: LD_ADDR_VAR 0 4
13451: PUSH
13452: LD_EXP 35
13456: PUSH
13457: LD_VAR 0 1
13461: ARRAY
13462: PUSH
13463: LD_VAR 0 2
13467: ARRAY
13468: PUSH
13469: LD_INT 1
13471: ARRAY
13472: PPUSH
13473: LD_EXP 35
13477: PUSH
13478: LD_VAR 0 1
13482: ARRAY
13483: PUSH
13484: LD_VAR 0 2
13488: ARRAY
13489: PUSH
13490: LD_INT 2
13492: ARRAY
13493: PPUSH
13494: CALL_OW 428
13498: ST_TO_ADDR
// if not tmp then
13499: LD_VAR 0 4
13503: NOT
13504: IFFALSE 13508
// continue ;
13506: GO 13423
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
13508: LD_VAR 0 4
13512: PUSH
13513: LD_INT 81
13515: PUSH
13516: LD_VAR 0 3
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: PPUSH
13525: CALL_OW 69
13529: IN
13530: PUSH
13531: LD_EXP 35
13535: PUSH
13536: LD_VAR 0 1
13540: ARRAY
13541: PUSH
13542: LD_VAR 0 2
13546: ARRAY
13547: PUSH
13548: LD_INT 1
13550: ARRAY
13551: PPUSH
13552: LD_EXP 35
13556: PUSH
13557: LD_VAR 0 1
13561: ARRAY
13562: PUSH
13563: LD_VAR 0 2
13567: ARRAY
13568: PUSH
13569: LD_INT 2
13571: ARRAY
13572: PPUSH
13573: CALL_OW 458
13577: AND
13578: IFFALSE 13672
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
13580: LD_EXP 35
13584: PUSH
13585: LD_VAR 0 1
13589: ARRAY
13590: PUSH
13591: LD_VAR 0 2
13595: ARRAY
13596: PUSH
13597: LD_INT 1
13599: ARRAY
13600: PPUSH
13601: LD_EXP 35
13605: PUSH
13606: LD_VAR 0 1
13610: ARRAY
13611: PUSH
13612: LD_VAR 0 2
13616: ARRAY
13617: PUSH
13618: LD_INT 2
13620: ARRAY
13621: PPUSH
13622: LD_VAR 0 3
13626: PPUSH
13627: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
13631: LD_ADDR_EXP 35
13635: PUSH
13636: LD_EXP 35
13640: PPUSH
13641: LD_VAR 0 1
13645: PPUSH
13646: LD_EXP 35
13650: PUSH
13651: LD_VAR 0 1
13655: ARRAY
13656: PPUSH
13657: LD_VAR 0 2
13661: PPUSH
13662: CALL_OW 3
13666: PPUSH
13667: CALL_OW 1
13671: ST_TO_ADDR
// end ; end ;
13672: GO 13423
13674: POP
13675: POP
// end ;
13676: GO 13341
13678: POP
13679: POP
// end ;
13680: PPOPN 4
13682: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
13683: LD_INT 0
13685: PPUSH
13686: PPUSH
// result := false ;
13687: LD_ADDR_VAR 0 4
13691: PUSH
13692: LD_INT 0
13694: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
13695: LD_VAR 0 1
13699: PPUSH
13700: CALL_OW 264
13704: PUSH
13705: LD_EXP 102
13709: EQUAL
13710: NOT
13711: IFFALSE 13715
// exit ;
13713: GO 13955
// index := GetElementIndex ( minersList , unit ) ;
13715: LD_ADDR_VAR 0 5
13719: PUSH
13720: LD_EXP 34
13724: PPUSH
13725: LD_VAR 0 1
13729: PPUSH
13730: CALL 33746 0 2
13734: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
13735: LD_EXP 35
13739: PUSH
13740: LD_VAR 0 5
13744: ARRAY
13745: PUSH
13746: LD_EXP 36
13750: GREATEREQUAL
13751: IFFALSE 13755
// exit ;
13753: GO 13955
// ComMoveXY ( unit , x , y ) ;
13755: LD_VAR 0 1
13759: PPUSH
13760: LD_VAR 0 2
13764: PPUSH
13765: LD_VAR 0 3
13769: PPUSH
13770: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13774: LD_INT 35
13776: PPUSH
13777: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
13781: LD_VAR 0 1
13785: PPUSH
13786: LD_VAR 0 2
13790: PPUSH
13791: LD_VAR 0 3
13795: PPUSH
13796: CALL 64518 0 3
13800: NOT
13801: PUSH
13802: LD_VAR 0 1
13806: PPUSH
13807: CALL_OW 314
13811: AND
13812: IFFALSE 13816
// exit ;
13814: GO 13955
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
13816: LD_VAR 0 2
13820: PPUSH
13821: LD_VAR 0 3
13825: PPUSH
13826: CALL_OW 428
13830: PUSH
13831: LD_VAR 0 1
13835: EQUAL
13836: PUSH
13837: LD_VAR 0 1
13841: PPUSH
13842: CALL_OW 314
13846: NOT
13847: AND
13848: IFFALSE 13774
// PlaySoundXY ( x , y , PlantMine ) ;
13850: LD_VAR 0 2
13854: PPUSH
13855: LD_VAR 0 3
13859: PPUSH
13860: LD_STRING PlantMine
13862: PPUSH
13863: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
13867: LD_VAR 0 2
13871: PPUSH
13872: LD_VAR 0 3
13876: PPUSH
13877: LD_VAR 0 1
13881: PPUSH
13882: CALL_OW 255
13886: PPUSH
13887: LD_INT 0
13889: PPUSH
13890: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
13894: LD_ADDR_EXP 35
13898: PUSH
13899: LD_EXP 35
13903: PPUSH
13904: LD_VAR 0 5
13908: PUSH
13909: LD_EXP 35
13913: PUSH
13914: LD_VAR 0 5
13918: ARRAY
13919: PUSH
13920: LD_INT 1
13922: PLUS
13923: PUSH
13924: EMPTY
13925: LIST
13926: LIST
13927: PPUSH
13928: LD_VAR 0 2
13932: PUSH
13933: LD_VAR 0 3
13937: PUSH
13938: EMPTY
13939: LIST
13940: LIST
13941: PPUSH
13942: CALL 33961 0 3
13946: ST_TO_ADDR
// result := true ;
13947: LD_ADDR_VAR 0 4
13951: PUSH
13952: LD_INT 1
13954: ST_TO_ADDR
// end ;
13955: LD_VAR 0 4
13959: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
13960: LD_INT 0
13962: PPUSH
13963: PPUSH
13964: PPUSH
// if not unit in minersList then
13965: LD_VAR 0 1
13969: PUSH
13970: LD_EXP 34
13974: IN
13975: NOT
13976: IFFALSE 13980
// exit ;
13978: GO 14372
// index := GetElementIndex ( minersList , unit ) ;
13980: LD_ADDR_VAR 0 6
13984: PUSH
13985: LD_EXP 34
13989: PPUSH
13990: LD_VAR 0 1
13994: PPUSH
13995: CALL 33746 0 2
13999: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
14000: LD_ADDR_VAR 0 5
14004: PUSH
14005: DOUBLE
14006: LD_EXP 35
14010: PUSH
14011: LD_VAR 0 6
14015: ARRAY
14016: INC
14017: ST_TO_ADDR
14018: LD_INT 1
14020: PUSH
14021: FOR_DOWNTO
14022: IFFALSE 14183
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
14024: LD_EXP 35
14028: PUSH
14029: LD_VAR 0 6
14033: ARRAY
14034: PUSH
14035: LD_VAR 0 5
14039: ARRAY
14040: PUSH
14041: LD_INT 1
14043: ARRAY
14044: PUSH
14045: LD_VAR 0 2
14049: EQUAL
14050: PUSH
14051: LD_EXP 35
14055: PUSH
14056: LD_VAR 0 6
14060: ARRAY
14061: PUSH
14062: LD_VAR 0 5
14066: ARRAY
14067: PUSH
14068: LD_INT 2
14070: ARRAY
14071: PUSH
14072: LD_VAR 0 3
14076: EQUAL
14077: AND
14078: IFFALSE 14181
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
14080: LD_EXP 35
14084: PUSH
14085: LD_VAR 0 6
14089: ARRAY
14090: PUSH
14091: LD_VAR 0 5
14095: ARRAY
14096: PUSH
14097: LD_INT 1
14099: ARRAY
14100: PPUSH
14101: LD_EXP 35
14105: PUSH
14106: LD_VAR 0 6
14110: ARRAY
14111: PUSH
14112: LD_VAR 0 5
14116: ARRAY
14117: PUSH
14118: LD_INT 2
14120: ARRAY
14121: PPUSH
14122: LD_VAR 0 1
14126: PPUSH
14127: CALL_OW 255
14131: PPUSH
14132: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
14136: LD_ADDR_EXP 35
14140: PUSH
14141: LD_EXP 35
14145: PPUSH
14146: LD_VAR 0 6
14150: PPUSH
14151: LD_EXP 35
14155: PUSH
14156: LD_VAR 0 6
14160: ARRAY
14161: PPUSH
14162: LD_VAR 0 5
14166: PPUSH
14167: CALL_OW 3
14171: PPUSH
14172: CALL_OW 1
14176: ST_TO_ADDR
// exit ;
14177: POP
14178: POP
14179: GO 14372
// end ; end ;
14181: GO 14021
14183: POP
14184: POP
// for i := minerMinesList [ index ] downto 1 do
14185: LD_ADDR_VAR 0 5
14189: PUSH
14190: DOUBLE
14191: LD_EXP 35
14195: PUSH
14196: LD_VAR 0 6
14200: ARRAY
14201: INC
14202: ST_TO_ADDR
14203: LD_INT 1
14205: PUSH
14206: FOR_DOWNTO
14207: IFFALSE 14370
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
14209: LD_EXP 35
14213: PUSH
14214: LD_VAR 0 6
14218: ARRAY
14219: PUSH
14220: LD_VAR 0 5
14224: ARRAY
14225: PUSH
14226: LD_INT 1
14228: ARRAY
14229: PPUSH
14230: LD_EXP 35
14234: PUSH
14235: LD_VAR 0 6
14239: ARRAY
14240: PUSH
14241: LD_VAR 0 5
14245: ARRAY
14246: PUSH
14247: LD_INT 2
14249: ARRAY
14250: PPUSH
14251: LD_VAR 0 2
14255: PPUSH
14256: LD_VAR 0 3
14260: PPUSH
14261: CALL_OW 298
14265: PUSH
14266: LD_INT 6
14268: LESS
14269: IFFALSE 14368
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
14271: LD_EXP 35
14275: PUSH
14276: LD_VAR 0 6
14280: ARRAY
14281: PUSH
14282: LD_VAR 0 5
14286: ARRAY
14287: PUSH
14288: LD_INT 1
14290: ARRAY
14291: PPUSH
14292: LD_EXP 35
14296: PUSH
14297: LD_VAR 0 6
14301: ARRAY
14302: PUSH
14303: LD_VAR 0 5
14307: ARRAY
14308: PUSH
14309: LD_INT 2
14311: ARRAY
14312: PPUSH
14313: LD_VAR 0 1
14317: PPUSH
14318: CALL_OW 255
14322: PPUSH
14323: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
14327: LD_ADDR_EXP 35
14331: PUSH
14332: LD_EXP 35
14336: PPUSH
14337: LD_VAR 0 6
14341: PPUSH
14342: LD_EXP 35
14346: PUSH
14347: LD_VAR 0 6
14351: ARRAY
14352: PPUSH
14353: LD_VAR 0 5
14357: PPUSH
14358: CALL_OW 3
14362: PPUSH
14363: CALL_OW 1
14367: ST_TO_ADDR
// end ; end ;
14368: GO 14206
14370: POP
14371: POP
// end ;
14372: LD_VAR 0 4
14376: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
14377: LD_INT 0
14379: PPUSH
14380: PPUSH
14381: PPUSH
14382: PPUSH
14383: PPUSH
14384: PPUSH
14385: PPUSH
14386: PPUSH
14387: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
14388: LD_VAR 0 1
14392: PPUSH
14393: CALL_OW 264
14397: PUSH
14398: LD_EXP 102
14402: EQUAL
14403: NOT
14404: PUSH
14405: LD_VAR 0 1
14409: PUSH
14410: LD_EXP 34
14414: IN
14415: NOT
14416: OR
14417: IFFALSE 14421
// exit ;
14419: GO 14743
// index := GetElementIndex ( minersList , unit ) ;
14421: LD_ADDR_VAR 0 6
14425: PUSH
14426: LD_EXP 34
14430: PPUSH
14431: LD_VAR 0 1
14435: PPUSH
14436: CALL 33746 0 2
14440: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
14441: LD_ADDR_VAR 0 8
14445: PUSH
14446: LD_EXP 36
14450: PUSH
14451: LD_EXP 35
14455: PUSH
14456: LD_VAR 0 6
14460: ARRAY
14461: MINUS
14462: ST_TO_ADDR
// if not minesFreeAmount then
14463: LD_VAR 0 8
14467: NOT
14468: IFFALSE 14472
// exit ;
14470: GO 14743
// tmp := [ ] ;
14472: LD_ADDR_VAR 0 7
14476: PUSH
14477: EMPTY
14478: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
14479: LD_ADDR_VAR 0 5
14483: PUSH
14484: DOUBLE
14485: LD_INT 1
14487: DEC
14488: ST_TO_ADDR
14489: LD_VAR 0 8
14493: PUSH
14494: FOR_TO
14495: IFFALSE 14690
// begin _d := rand ( 0 , 5 ) ;
14497: LD_ADDR_VAR 0 11
14501: PUSH
14502: LD_INT 0
14504: PPUSH
14505: LD_INT 5
14507: PPUSH
14508: CALL_OW 12
14512: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
14513: LD_ADDR_VAR 0 12
14517: PUSH
14518: LD_INT 2
14520: PPUSH
14521: LD_INT 6
14523: PPUSH
14524: CALL_OW 12
14528: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
14529: LD_ADDR_VAR 0 9
14533: PUSH
14534: LD_VAR 0 2
14538: PPUSH
14539: LD_VAR 0 11
14543: PPUSH
14544: LD_VAR 0 12
14548: PPUSH
14549: CALL_OW 272
14553: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
14554: LD_ADDR_VAR 0 10
14558: PUSH
14559: LD_VAR 0 3
14563: PPUSH
14564: LD_VAR 0 11
14568: PPUSH
14569: LD_VAR 0 12
14573: PPUSH
14574: CALL_OW 273
14578: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
14579: LD_VAR 0 9
14583: PPUSH
14584: LD_VAR 0 10
14588: PPUSH
14589: CALL_OW 488
14593: PUSH
14594: LD_VAR 0 9
14598: PUSH
14599: LD_VAR 0 10
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: PUSH
14608: LD_VAR 0 7
14612: IN
14613: NOT
14614: AND
14615: PUSH
14616: LD_VAR 0 9
14620: PPUSH
14621: LD_VAR 0 10
14625: PPUSH
14626: CALL_OW 458
14630: NOT
14631: AND
14632: IFFALSE 14674
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
14634: LD_ADDR_VAR 0 7
14638: PUSH
14639: LD_VAR 0 7
14643: PPUSH
14644: LD_VAR 0 7
14648: PUSH
14649: LD_INT 1
14651: PLUS
14652: PPUSH
14653: LD_VAR 0 9
14657: PUSH
14658: LD_VAR 0 10
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PPUSH
14667: CALL_OW 1
14671: ST_TO_ADDR
14672: GO 14688
// i := i - 1 ;
14674: LD_ADDR_VAR 0 5
14678: PUSH
14679: LD_VAR 0 5
14683: PUSH
14684: LD_INT 1
14686: MINUS
14687: ST_TO_ADDR
// end ;
14688: GO 14494
14690: POP
14691: POP
// for i in tmp do
14692: LD_ADDR_VAR 0 5
14696: PUSH
14697: LD_VAR 0 7
14701: PUSH
14702: FOR_IN
14703: IFFALSE 14741
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
14705: LD_VAR 0 1
14709: PPUSH
14710: LD_VAR 0 5
14714: PUSH
14715: LD_INT 1
14717: ARRAY
14718: PPUSH
14719: LD_VAR 0 5
14723: PUSH
14724: LD_INT 2
14726: ARRAY
14727: PPUSH
14728: CALL 13683 0 3
14732: NOT
14733: IFFALSE 14739
// exit ;
14735: POP
14736: POP
14737: GO 14743
14739: GO 14702
14741: POP
14742: POP
// end ;
14743: LD_VAR 0 4
14747: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
14748: LD_INT 0
14750: PPUSH
14751: PPUSH
14752: PPUSH
14753: PPUSH
14754: PPUSH
14755: PPUSH
14756: PPUSH
// if not GetClass ( unit ) = class_sniper then
14757: LD_VAR 0 1
14761: PPUSH
14762: CALL_OW 257
14766: PUSH
14767: LD_INT 5
14769: EQUAL
14770: NOT
14771: IFFALSE 14775
// exit ;
14773: GO 15163
// dist := 8 ;
14775: LD_ADDR_VAR 0 5
14779: PUSH
14780: LD_INT 8
14782: ST_TO_ADDR
// viewRange := 12 ;
14783: LD_ADDR_VAR 0 7
14787: PUSH
14788: LD_INT 12
14790: ST_TO_ADDR
// side := GetSide ( unit ) ;
14791: LD_ADDR_VAR 0 6
14795: PUSH
14796: LD_VAR 0 1
14800: PPUSH
14801: CALL_OW 255
14805: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
14806: LD_INT 61
14808: PPUSH
14809: LD_VAR 0 6
14813: PPUSH
14814: CALL_OW 321
14818: PUSH
14819: LD_INT 2
14821: EQUAL
14822: IFFALSE 14832
// viewRange := 16 ;
14824: LD_ADDR_VAR 0 7
14828: PUSH
14829: LD_INT 16
14831: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
14832: LD_VAR 0 1
14836: PPUSH
14837: LD_VAR 0 2
14841: PPUSH
14842: LD_VAR 0 3
14846: PPUSH
14847: CALL_OW 297
14851: PUSH
14852: LD_VAR 0 5
14856: GREATER
14857: IFFALSE 14936
// begin ComMoveXY ( unit , x , y ) ;
14859: LD_VAR 0 1
14863: PPUSH
14864: LD_VAR 0 2
14868: PPUSH
14869: LD_VAR 0 3
14873: PPUSH
14874: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14878: LD_INT 35
14880: PPUSH
14881: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
14885: LD_VAR 0 1
14889: PPUSH
14890: LD_VAR 0 2
14894: PPUSH
14895: LD_VAR 0 3
14899: PPUSH
14900: CALL 64518 0 3
14904: NOT
14905: IFFALSE 14909
// exit ;
14907: GO 15163
// until GetDistUnitXY ( unit , x , y ) < dist ;
14909: LD_VAR 0 1
14913: PPUSH
14914: LD_VAR 0 2
14918: PPUSH
14919: LD_VAR 0 3
14923: PPUSH
14924: CALL_OW 297
14928: PUSH
14929: LD_VAR 0 5
14933: LESS
14934: IFFALSE 14878
// end ; ComTurnXY ( unit , x , y ) ;
14936: LD_VAR 0 1
14940: PPUSH
14941: LD_VAR 0 2
14945: PPUSH
14946: LD_VAR 0 3
14950: PPUSH
14951: CALL_OW 118
// wait ( 5 ) ;
14955: LD_INT 5
14957: PPUSH
14958: CALL_OW 67
// _d := GetDir ( unit ) ;
14962: LD_ADDR_VAR 0 10
14966: PUSH
14967: LD_VAR 0 1
14971: PPUSH
14972: CALL_OW 254
14976: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
14977: LD_ADDR_VAR 0 8
14981: PUSH
14982: LD_VAR 0 1
14986: PPUSH
14987: CALL_OW 250
14991: PPUSH
14992: LD_VAR 0 10
14996: PPUSH
14997: LD_VAR 0 5
15001: PPUSH
15002: CALL_OW 272
15006: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
15007: LD_ADDR_VAR 0 9
15011: PUSH
15012: LD_VAR 0 1
15016: PPUSH
15017: CALL_OW 251
15021: PPUSH
15022: LD_VAR 0 10
15026: PPUSH
15027: LD_VAR 0 5
15031: PPUSH
15032: CALL_OW 273
15036: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
15037: LD_VAR 0 8
15041: PPUSH
15042: LD_VAR 0 9
15046: PPUSH
15047: CALL_OW 488
15051: NOT
15052: IFFALSE 15056
// exit ;
15054: GO 15163
// ComAnimCustom ( unit , 1 ) ;
15056: LD_VAR 0 1
15060: PPUSH
15061: LD_INT 1
15063: PPUSH
15064: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
15068: LD_VAR 0 8
15072: PPUSH
15073: LD_VAR 0 9
15077: PPUSH
15078: LD_VAR 0 6
15082: PPUSH
15083: LD_VAR 0 7
15087: PPUSH
15088: CALL_OW 330
// repeat wait ( 1 ) ;
15092: LD_INT 1
15094: PPUSH
15095: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
15099: LD_VAR 0 1
15103: PPUSH
15104: CALL_OW 316
15108: PUSH
15109: LD_VAR 0 1
15113: PPUSH
15114: CALL_OW 314
15118: OR
15119: PUSH
15120: LD_VAR 0 1
15124: PPUSH
15125: CALL_OW 302
15129: NOT
15130: OR
15131: PUSH
15132: LD_VAR 0 1
15136: PPUSH
15137: CALL_OW 301
15141: OR
15142: IFFALSE 15092
// RemoveSeeing ( _x , _y , side ) ;
15144: LD_VAR 0 8
15148: PPUSH
15149: LD_VAR 0 9
15153: PPUSH
15154: LD_VAR 0 6
15158: PPUSH
15159: CALL_OW 331
// end ; end_of_file
15163: LD_VAR 0 4
15167: RET
// every 0 0$1 do
15168: GO 15170
15170: DISABLE
// begin enable ;
15171: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15172: LD_STRING updateTimer(
15174: PUSH
15175: LD_OWVAR 1
15179: STR
15180: PUSH
15181: LD_STRING );
15183: STR
15184: PPUSH
15185: CALL_OW 559
// end ;
15189: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15190: LD_INT 0
15192: PPUSH
// if p2 = 100 then
15193: LD_VAR 0 2
15197: PUSH
15198: LD_INT 100
15200: EQUAL
15201: IFFALSE 16204
// begin if not StreamModeActive then
15203: LD_EXP 37
15207: NOT
15208: IFFALSE 15218
// StreamModeActive := true ;
15210: LD_ADDR_EXP 37
15214: PUSH
15215: LD_INT 1
15217: ST_TO_ADDR
// if p3 = 0 then
15218: LD_VAR 0 3
15222: PUSH
15223: LD_INT 0
15225: EQUAL
15226: IFFALSE 15232
// InitStreamMode ;
15228: CALL 16364 0 0
// if p3 = 1 then
15232: LD_VAR 0 3
15236: PUSH
15237: LD_INT 1
15239: EQUAL
15240: IFFALSE 15250
// sRocket := true ;
15242: LD_ADDR_EXP 42
15246: PUSH
15247: LD_INT 1
15249: ST_TO_ADDR
// if p3 = 2 then
15250: LD_VAR 0 3
15254: PUSH
15255: LD_INT 2
15257: EQUAL
15258: IFFALSE 15268
// sSpeed := true ;
15260: LD_ADDR_EXP 41
15264: PUSH
15265: LD_INT 1
15267: ST_TO_ADDR
// if p3 = 3 then
15268: LD_VAR 0 3
15272: PUSH
15273: LD_INT 3
15275: EQUAL
15276: IFFALSE 15286
// sEngine := true ;
15278: LD_ADDR_EXP 43
15282: PUSH
15283: LD_INT 1
15285: ST_TO_ADDR
// if p3 = 4 then
15286: LD_VAR 0 3
15290: PUSH
15291: LD_INT 4
15293: EQUAL
15294: IFFALSE 15304
// sSpec := true ;
15296: LD_ADDR_EXP 40
15300: PUSH
15301: LD_INT 1
15303: ST_TO_ADDR
// if p3 = 5 then
15304: LD_VAR 0 3
15308: PUSH
15309: LD_INT 5
15311: EQUAL
15312: IFFALSE 15322
// sLevel := true ;
15314: LD_ADDR_EXP 44
15318: PUSH
15319: LD_INT 1
15321: ST_TO_ADDR
// if p3 = 6 then
15322: LD_VAR 0 3
15326: PUSH
15327: LD_INT 6
15329: EQUAL
15330: IFFALSE 15340
// sArmoury := true ;
15332: LD_ADDR_EXP 45
15336: PUSH
15337: LD_INT 1
15339: ST_TO_ADDR
// if p3 = 7 then
15340: LD_VAR 0 3
15344: PUSH
15345: LD_INT 7
15347: EQUAL
15348: IFFALSE 15358
// sRadar := true ;
15350: LD_ADDR_EXP 46
15354: PUSH
15355: LD_INT 1
15357: ST_TO_ADDR
// if p3 = 8 then
15358: LD_VAR 0 3
15362: PUSH
15363: LD_INT 8
15365: EQUAL
15366: IFFALSE 15376
// sBunker := true ;
15368: LD_ADDR_EXP 47
15372: PUSH
15373: LD_INT 1
15375: ST_TO_ADDR
// if p3 = 9 then
15376: LD_VAR 0 3
15380: PUSH
15381: LD_INT 9
15383: EQUAL
15384: IFFALSE 15394
// sHack := true ;
15386: LD_ADDR_EXP 48
15390: PUSH
15391: LD_INT 1
15393: ST_TO_ADDR
// if p3 = 10 then
15394: LD_VAR 0 3
15398: PUSH
15399: LD_INT 10
15401: EQUAL
15402: IFFALSE 15412
// sFire := true ;
15404: LD_ADDR_EXP 49
15408: PUSH
15409: LD_INT 1
15411: ST_TO_ADDR
// if p3 = 11 then
15412: LD_VAR 0 3
15416: PUSH
15417: LD_INT 11
15419: EQUAL
15420: IFFALSE 15430
// sRefresh := true ;
15422: LD_ADDR_EXP 50
15426: PUSH
15427: LD_INT 1
15429: ST_TO_ADDR
// if p3 = 12 then
15430: LD_VAR 0 3
15434: PUSH
15435: LD_INT 12
15437: EQUAL
15438: IFFALSE 15448
// sExp := true ;
15440: LD_ADDR_EXP 51
15444: PUSH
15445: LD_INT 1
15447: ST_TO_ADDR
// if p3 = 13 then
15448: LD_VAR 0 3
15452: PUSH
15453: LD_INT 13
15455: EQUAL
15456: IFFALSE 15466
// sDepot := true ;
15458: LD_ADDR_EXP 52
15462: PUSH
15463: LD_INT 1
15465: ST_TO_ADDR
// if p3 = 14 then
15466: LD_VAR 0 3
15470: PUSH
15471: LD_INT 14
15473: EQUAL
15474: IFFALSE 15484
// sFlag := true ;
15476: LD_ADDR_EXP 53
15480: PUSH
15481: LD_INT 1
15483: ST_TO_ADDR
// if p3 = 15 then
15484: LD_VAR 0 3
15488: PUSH
15489: LD_INT 15
15491: EQUAL
15492: IFFALSE 15502
// sKamikadze := true ;
15494: LD_ADDR_EXP 61
15498: PUSH
15499: LD_INT 1
15501: ST_TO_ADDR
// if p3 = 16 then
15502: LD_VAR 0 3
15506: PUSH
15507: LD_INT 16
15509: EQUAL
15510: IFFALSE 15520
// sTroll := true ;
15512: LD_ADDR_EXP 62
15516: PUSH
15517: LD_INT 1
15519: ST_TO_ADDR
// if p3 = 17 then
15520: LD_VAR 0 3
15524: PUSH
15525: LD_INT 17
15527: EQUAL
15528: IFFALSE 15538
// sSlow := true ;
15530: LD_ADDR_EXP 63
15534: PUSH
15535: LD_INT 1
15537: ST_TO_ADDR
// if p3 = 18 then
15538: LD_VAR 0 3
15542: PUSH
15543: LD_INT 18
15545: EQUAL
15546: IFFALSE 15556
// sLack := true ;
15548: LD_ADDR_EXP 64
15552: PUSH
15553: LD_INT 1
15555: ST_TO_ADDR
// if p3 = 19 then
15556: LD_VAR 0 3
15560: PUSH
15561: LD_INT 19
15563: EQUAL
15564: IFFALSE 15574
// sTank := true ;
15566: LD_ADDR_EXP 66
15570: PUSH
15571: LD_INT 1
15573: ST_TO_ADDR
// if p3 = 20 then
15574: LD_VAR 0 3
15578: PUSH
15579: LD_INT 20
15581: EQUAL
15582: IFFALSE 15592
// sRemote := true ;
15584: LD_ADDR_EXP 67
15588: PUSH
15589: LD_INT 1
15591: ST_TO_ADDR
// if p3 = 21 then
15592: LD_VAR 0 3
15596: PUSH
15597: LD_INT 21
15599: EQUAL
15600: IFFALSE 15610
// sPowell := true ;
15602: LD_ADDR_EXP 68
15606: PUSH
15607: LD_INT 1
15609: ST_TO_ADDR
// if p3 = 22 then
15610: LD_VAR 0 3
15614: PUSH
15615: LD_INT 22
15617: EQUAL
15618: IFFALSE 15628
// sTeleport := true ;
15620: LD_ADDR_EXP 71
15624: PUSH
15625: LD_INT 1
15627: ST_TO_ADDR
// if p3 = 23 then
15628: LD_VAR 0 3
15632: PUSH
15633: LD_INT 23
15635: EQUAL
15636: IFFALSE 15646
// sOilTower := true ;
15638: LD_ADDR_EXP 73
15642: PUSH
15643: LD_INT 1
15645: ST_TO_ADDR
// if p3 = 24 then
15646: LD_VAR 0 3
15650: PUSH
15651: LD_INT 24
15653: EQUAL
15654: IFFALSE 15664
// sShovel := true ;
15656: LD_ADDR_EXP 74
15660: PUSH
15661: LD_INT 1
15663: ST_TO_ADDR
// if p3 = 25 then
15664: LD_VAR 0 3
15668: PUSH
15669: LD_INT 25
15671: EQUAL
15672: IFFALSE 15682
// sSheik := true ;
15674: LD_ADDR_EXP 75
15678: PUSH
15679: LD_INT 1
15681: ST_TO_ADDR
// if p3 = 26 then
15682: LD_VAR 0 3
15686: PUSH
15687: LD_INT 26
15689: EQUAL
15690: IFFALSE 15700
// sEarthquake := true ;
15692: LD_ADDR_EXP 77
15696: PUSH
15697: LD_INT 1
15699: ST_TO_ADDR
// if p3 = 27 then
15700: LD_VAR 0 3
15704: PUSH
15705: LD_INT 27
15707: EQUAL
15708: IFFALSE 15718
// sAI := true ;
15710: LD_ADDR_EXP 78
15714: PUSH
15715: LD_INT 1
15717: ST_TO_ADDR
// if p3 = 28 then
15718: LD_VAR 0 3
15722: PUSH
15723: LD_INT 28
15725: EQUAL
15726: IFFALSE 15736
// sCargo := true ;
15728: LD_ADDR_EXP 81
15732: PUSH
15733: LD_INT 1
15735: ST_TO_ADDR
// if p3 = 29 then
15736: LD_VAR 0 3
15740: PUSH
15741: LD_INT 29
15743: EQUAL
15744: IFFALSE 15754
// sDLaser := true ;
15746: LD_ADDR_EXP 82
15750: PUSH
15751: LD_INT 1
15753: ST_TO_ADDR
// if p3 = 30 then
15754: LD_VAR 0 3
15758: PUSH
15759: LD_INT 30
15761: EQUAL
15762: IFFALSE 15772
// sExchange := true ;
15764: LD_ADDR_EXP 83
15768: PUSH
15769: LD_INT 1
15771: ST_TO_ADDR
// if p3 = 31 then
15772: LD_VAR 0 3
15776: PUSH
15777: LD_INT 31
15779: EQUAL
15780: IFFALSE 15790
// sFac := true ;
15782: LD_ADDR_EXP 84
15786: PUSH
15787: LD_INT 1
15789: ST_TO_ADDR
// if p3 = 32 then
15790: LD_VAR 0 3
15794: PUSH
15795: LD_INT 32
15797: EQUAL
15798: IFFALSE 15808
// sPower := true ;
15800: LD_ADDR_EXP 85
15804: PUSH
15805: LD_INT 1
15807: ST_TO_ADDR
// if p3 = 33 then
15808: LD_VAR 0 3
15812: PUSH
15813: LD_INT 33
15815: EQUAL
15816: IFFALSE 15826
// sRandom := true ;
15818: LD_ADDR_EXP 86
15822: PUSH
15823: LD_INT 1
15825: ST_TO_ADDR
// if p3 = 34 then
15826: LD_VAR 0 3
15830: PUSH
15831: LD_INT 34
15833: EQUAL
15834: IFFALSE 15844
// sShield := true ;
15836: LD_ADDR_EXP 87
15840: PUSH
15841: LD_INT 1
15843: ST_TO_ADDR
// if p3 = 35 then
15844: LD_VAR 0 3
15848: PUSH
15849: LD_INT 35
15851: EQUAL
15852: IFFALSE 15862
// sTime := true ;
15854: LD_ADDR_EXP 88
15858: PUSH
15859: LD_INT 1
15861: ST_TO_ADDR
// if p3 = 36 then
15862: LD_VAR 0 3
15866: PUSH
15867: LD_INT 36
15869: EQUAL
15870: IFFALSE 15880
// sTools := true ;
15872: LD_ADDR_EXP 89
15876: PUSH
15877: LD_INT 1
15879: ST_TO_ADDR
// if p3 = 101 then
15880: LD_VAR 0 3
15884: PUSH
15885: LD_INT 101
15887: EQUAL
15888: IFFALSE 15898
// sSold := true ;
15890: LD_ADDR_EXP 54
15894: PUSH
15895: LD_INT 1
15897: ST_TO_ADDR
// if p3 = 102 then
15898: LD_VAR 0 3
15902: PUSH
15903: LD_INT 102
15905: EQUAL
15906: IFFALSE 15916
// sDiff := true ;
15908: LD_ADDR_EXP 55
15912: PUSH
15913: LD_INT 1
15915: ST_TO_ADDR
// if p3 = 103 then
15916: LD_VAR 0 3
15920: PUSH
15921: LD_INT 103
15923: EQUAL
15924: IFFALSE 15934
// sFog := true ;
15926: LD_ADDR_EXP 58
15930: PUSH
15931: LD_INT 1
15933: ST_TO_ADDR
// if p3 = 104 then
15934: LD_VAR 0 3
15938: PUSH
15939: LD_INT 104
15941: EQUAL
15942: IFFALSE 15952
// sReset := true ;
15944: LD_ADDR_EXP 59
15948: PUSH
15949: LD_INT 1
15951: ST_TO_ADDR
// if p3 = 105 then
15952: LD_VAR 0 3
15956: PUSH
15957: LD_INT 105
15959: EQUAL
15960: IFFALSE 15970
// sSun := true ;
15962: LD_ADDR_EXP 60
15966: PUSH
15967: LD_INT 1
15969: ST_TO_ADDR
// if p3 = 106 then
15970: LD_VAR 0 3
15974: PUSH
15975: LD_INT 106
15977: EQUAL
15978: IFFALSE 15988
// sTiger := true ;
15980: LD_ADDR_EXP 56
15984: PUSH
15985: LD_INT 1
15987: ST_TO_ADDR
// if p3 = 107 then
15988: LD_VAR 0 3
15992: PUSH
15993: LD_INT 107
15995: EQUAL
15996: IFFALSE 16006
// sBomb := true ;
15998: LD_ADDR_EXP 57
16002: PUSH
16003: LD_INT 1
16005: ST_TO_ADDR
// if p3 = 108 then
16006: LD_VAR 0 3
16010: PUSH
16011: LD_INT 108
16013: EQUAL
16014: IFFALSE 16024
// sWound := true ;
16016: LD_ADDR_EXP 65
16020: PUSH
16021: LD_INT 1
16023: ST_TO_ADDR
// if p3 = 109 then
16024: LD_VAR 0 3
16028: PUSH
16029: LD_INT 109
16031: EQUAL
16032: IFFALSE 16042
// sBetray := true ;
16034: LD_ADDR_EXP 69
16038: PUSH
16039: LD_INT 1
16041: ST_TO_ADDR
// if p3 = 110 then
16042: LD_VAR 0 3
16046: PUSH
16047: LD_INT 110
16049: EQUAL
16050: IFFALSE 16060
// sContamin := true ;
16052: LD_ADDR_EXP 70
16056: PUSH
16057: LD_INT 1
16059: ST_TO_ADDR
// if p3 = 111 then
16060: LD_VAR 0 3
16064: PUSH
16065: LD_INT 111
16067: EQUAL
16068: IFFALSE 16078
// sOil := true ;
16070: LD_ADDR_EXP 72
16074: PUSH
16075: LD_INT 1
16077: ST_TO_ADDR
// if p3 = 112 then
16078: LD_VAR 0 3
16082: PUSH
16083: LD_INT 112
16085: EQUAL
16086: IFFALSE 16096
// sStu := true ;
16088: LD_ADDR_EXP 76
16092: PUSH
16093: LD_INT 1
16095: ST_TO_ADDR
// if p3 = 113 then
16096: LD_VAR 0 3
16100: PUSH
16101: LD_INT 113
16103: EQUAL
16104: IFFALSE 16114
// sBazooka := true ;
16106: LD_ADDR_EXP 79
16110: PUSH
16111: LD_INT 1
16113: ST_TO_ADDR
// if p3 = 114 then
16114: LD_VAR 0 3
16118: PUSH
16119: LD_INT 114
16121: EQUAL
16122: IFFALSE 16132
// sMortar := true ;
16124: LD_ADDR_EXP 80
16128: PUSH
16129: LD_INT 1
16131: ST_TO_ADDR
// if p3 = 115 then
16132: LD_VAR 0 3
16136: PUSH
16137: LD_INT 115
16139: EQUAL
16140: IFFALSE 16150
// sRanger := true ;
16142: LD_ADDR_EXP 90
16146: PUSH
16147: LD_INT 1
16149: ST_TO_ADDR
// if p3 = 116 then
16150: LD_VAR 0 3
16154: PUSH
16155: LD_INT 116
16157: EQUAL
16158: IFFALSE 16168
// sComputer := true ;
16160: LD_ADDR_EXP 91
16164: PUSH
16165: LD_INT 1
16167: ST_TO_ADDR
// if p3 = 117 then
16168: LD_VAR 0 3
16172: PUSH
16173: LD_INT 117
16175: EQUAL
16176: IFFALSE 16186
// s30 := true ;
16178: LD_ADDR_EXP 92
16182: PUSH
16183: LD_INT 1
16185: ST_TO_ADDR
// if p3 = 118 then
16186: LD_VAR 0 3
16190: PUSH
16191: LD_INT 118
16193: EQUAL
16194: IFFALSE 16204
// s60 := true ;
16196: LD_ADDR_EXP 93
16200: PUSH
16201: LD_INT 1
16203: ST_TO_ADDR
// end ; if p2 = 101 then
16204: LD_VAR 0 2
16208: PUSH
16209: LD_INT 101
16211: EQUAL
16212: IFFALSE 16340
// begin case p3 of 1 :
16214: LD_VAR 0 3
16218: PUSH
16219: LD_INT 1
16221: DOUBLE
16222: EQUAL
16223: IFTRUE 16227
16225: GO 16234
16227: POP
// hHackUnlimitedResources ; 2 :
16228: CALL 27936 0 0
16232: GO 16340
16234: LD_INT 2
16236: DOUBLE
16237: EQUAL
16238: IFTRUE 16242
16240: GO 16249
16242: POP
// hHackSetLevel10 ; 3 :
16243: CALL 28069 0 0
16247: GO 16340
16249: LD_INT 3
16251: DOUBLE
16252: EQUAL
16253: IFTRUE 16257
16255: GO 16264
16257: POP
// hHackSetLevel10YourUnits ; 4 :
16258: CALL 28154 0 0
16262: GO 16340
16264: LD_INT 4
16266: DOUBLE
16267: EQUAL
16268: IFTRUE 16272
16270: GO 16279
16272: POP
// hHackInvincible ; 5 :
16273: CALL 28602 0 0
16277: GO 16340
16279: LD_INT 5
16281: DOUBLE
16282: EQUAL
16283: IFTRUE 16287
16285: GO 16294
16287: POP
// hHackInvisible ; 6 :
16288: CALL 28713 0 0
16292: GO 16340
16294: LD_INT 6
16296: DOUBLE
16297: EQUAL
16298: IFTRUE 16302
16300: GO 16309
16302: POP
// hHackChangeYourSide ; 7 :
16303: CALL 28770 0 0
16307: GO 16340
16309: LD_INT 7
16311: DOUBLE
16312: EQUAL
16313: IFTRUE 16317
16315: GO 16324
16317: POP
// hHackChangeUnitSide ; 8 :
16318: CALL 28812 0 0
16322: GO 16340
16324: LD_INT 8
16326: DOUBLE
16327: EQUAL
16328: IFTRUE 16332
16330: GO 16339
16332: POP
// hHackFog ; end ;
16333: CALL 28913 0 0
16337: GO 16340
16339: POP
// end ; end ;
16340: LD_VAR 0 7
16344: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
16345: GO 16347
16347: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16348: LD_STRING initStreamRollete();
16350: PPUSH
16351: CALL_OW 559
// InitStreamMode ;
16355: CALL 16364 0 0
// DefineStreamItems ( ) ;
16359: CALL 16828 0 0
// end ;
16363: END
// function InitStreamMode ; begin
16364: LD_INT 0
16366: PPUSH
// streamModeActive := false ;
16367: LD_ADDR_EXP 37
16371: PUSH
16372: LD_INT 0
16374: ST_TO_ADDR
// normalCounter := 36 ;
16375: LD_ADDR_EXP 38
16379: PUSH
16380: LD_INT 36
16382: ST_TO_ADDR
// hardcoreCounter := 16 ;
16383: LD_ADDR_EXP 39
16387: PUSH
16388: LD_INT 16
16390: ST_TO_ADDR
// sRocket := false ;
16391: LD_ADDR_EXP 42
16395: PUSH
16396: LD_INT 0
16398: ST_TO_ADDR
// sSpeed := false ;
16399: LD_ADDR_EXP 41
16403: PUSH
16404: LD_INT 0
16406: ST_TO_ADDR
// sEngine := false ;
16407: LD_ADDR_EXP 43
16411: PUSH
16412: LD_INT 0
16414: ST_TO_ADDR
// sSpec := false ;
16415: LD_ADDR_EXP 40
16419: PUSH
16420: LD_INT 0
16422: ST_TO_ADDR
// sLevel := false ;
16423: LD_ADDR_EXP 44
16427: PUSH
16428: LD_INT 0
16430: ST_TO_ADDR
// sArmoury := false ;
16431: LD_ADDR_EXP 45
16435: PUSH
16436: LD_INT 0
16438: ST_TO_ADDR
// sRadar := false ;
16439: LD_ADDR_EXP 46
16443: PUSH
16444: LD_INT 0
16446: ST_TO_ADDR
// sBunker := false ;
16447: LD_ADDR_EXP 47
16451: PUSH
16452: LD_INT 0
16454: ST_TO_ADDR
// sHack := false ;
16455: LD_ADDR_EXP 48
16459: PUSH
16460: LD_INT 0
16462: ST_TO_ADDR
// sFire := false ;
16463: LD_ADDR_EXP 49
16467: PUSH
16468: LD_INT 0
16470: ST_TO_ADDR
// sRefresh := false ;
16471: LD_ADDR_EXP 50
16475: PUSH
16476: LD_INT 0
16478: ST_TO_ADDR
// sExp := false ;
16479: LD_ADDR_EXP 51
16483: PUSH
16484: LD_INT 0
16486: ST_TO_ADDR
// sDepot := false ;
16487: LD_ADDR_EXP 52
16491: PUSH
16492: LD_INT 0
16494: ST_TO_ADDR
// sFlag := false ;
16495: LD_ADDR_EXP 53
16499: PUSH
16500: LD_INT 0
16502: ST_TO_ADDR
// sKamikadze := false ;
16503: LD_ADDR_EXP 61
16507: PUSH
16508: LD_INT 0
16510: ST_TO_ADDR
// sTroll := false ;
16511: LD_ADDR_EXP 62
16515: PUSH
16516: LD_INT 0
16518: ST_TO_ADDR
// sSlow := false ;
16519: LD_ADDR_EXP 63
16523: PUSH
16524: LD_INT 0
16526: ST_TO_ADDR
// sLack := false ;
16527: LD_ADDR_EXP 64
16531: PUSH
16532: LD_INT 0
16534: ST_TO_ADDR
// sTank := false ;
16535: LD_ADDR_EXP 66
16539: PUSH
16540: LD_INT 0
16542: ST_TO_ADDR
// sRemote := false ;
16543: LD_ADDR_EXP 67
16547: PUSH
16548: LD_INT 0
16550: ST_TO_ADDR
// sPowell := false ;
16551: LD_ADDR_EXP 68
16555: PUSH
16556: LD_INT 0
16558: ST_TO_ADDR
// sTeleport := false ;
16559: LD_ADDR_EXP 71
16563: PUSH
16564: LD_INT 0
16566: ST_TO_ADDR
// sOilTower := false ;
16567: LD_ADDR_EXP 73
16571: PUSH
16572: LD_INT 0
16574: ST_TO_ADDR
// sShovel := false ;
16575: LD_ADDR_EXP 74
16579: PUSH
16580: LD_INT 0
16582: ST_TO_ADDR
// sSheik := false ;
16583: LD_ADDR_EXP 75
16587: PUSH
16588: LD_INT 0
16590: ST_TO_ADDR
// sEarthquake := false ;
16591: LD_ADDR_EXP 77
16595: PUSH
16596: LD_INT 0
16598: ST_TO_ADDR
// sAI := false ;
16599: LD_ADDR_EXP 78
16603: PUSH
16604: LD_INT 0
16606: ST_TO_ADDR
// sCargo := false ;
16607: LD_ADDR_EXP 81
16611: PUSH
16612: LD_INT 0
16614: ST_TO_ADDR
// sDLaser := false ;
16615: LD_ADDR_EXP 82
16619: PUSH
16620: LD_INT 0
16622: ST_TO_ADDR
// sExchange := false ;
16623: LD_ADDR_EXP 83
16627: PUSH
16628: LD_INT 0
16630: ST_TO_ADDR
// sFac := false ;
16631: LD_ADDR_EXP 84
16635: PUSH
16636: LD_INT 0
16638: ST_TO_ADDR
// sPower := false ;
16639: LD_ADDR_EXP 85
16643: PUSH
16644: LD_INT 0
16646: ST_TO_ADDR
// sRandom := false ;
16647: LD_ADDR_EXP 86
16651: PUSH
16652: LD_INT 0
16654: ST_TO_ADDR
// sShield := false ;
16655: LD_ADDR_EXP 87
16659: PUSH
16660: LD_INT 0
16662: ST_TO_ADDR
// sTime := false ;
16663: LD_ADDR_EXP 88
16667: PUSH
16668: LD_INT 0
16670: ST_TO_ADDR
// sTools := false ;
16671: LD_ADDR_EXP 89
16675: PUSH
16676: LD_INT 0
16678: ST_TO_ADDR
// sSold := false ;
16679: LD_ADDR_EXP 54
16683: PUSH
16684: LD_INT 0
16686: ST_TO_ADDR
// sDiff := false ;
16687: LD_ADDR_EXP 55
16691: PUSH
16692: LD_INT 0
16694: ST_TO_ADDR
// sFog := false ;
16695: LD_ADDR_EXP 58
16699: PUSH
16700: LD_INT 0
16702: ST_TO_ADDR
// sReset := false ;
16703: LD_ADDR_EXP 59
16707: PUSH
16708: LD_INT 0
16710: ST_TO_ADDR
// sSun := false ;
16711: LD_ADDR_EXP 60
16715: PUSH
16716: LD_INT 0
16718: ST_TO_ADDR
// sTiger := false ;
16719: LD_ADDR_EXP 56
16723: PUSH
16724: LD_INT 0
16726: ST_TO_ADDR
// sBomb := false ;
16727: LD_ADDR_EXP 57
16731: PUSH
16732: LD_INT 0
16734: ST_TO_ADDR
// sWound := false ;
16735: LD_ADDR_EXP 65
16739: PUSH
16740: LD_INT 0
16742: ST_TO_ADDR
// sBetray := false ;
16743: LD_ADDR_EXP 69
16747: PUSH
16748: LD_INT 0
16750: ST_TO_ADDR
// sContamin := false ;
16751: LD_ADDR_EXP 70
16755: PUSH
16756: LD_INT 0
16758: ST_TO_ADDR
// sOil := false ;
16759: LD_ADDR_EXP 72
16763: PUSH
16764: LD_INT 0
16766: ST_TO_ADDR
// sStu := false ;
16767: LD_ADDR_EXP 76
16771: PUSH
16772: LD_INT 0
16774: ST_TO_ADDR
// sBazooka := false ;
16775: LD_ADDR_EXP 79
16779: PUSH
16780: LD_INT 0
16782: ST_TO_ADDR
// sMortar := false ;
16783: LD_ADDR_EXP 80
16787: PUSH
16788: LD_INT 0
16790: ST_TO_ADDR
// sRanger := false ;
16791: LD_ADDR_EXP 90
16795: PUSH
16796: LD_INT 0
16798: ST_TO_ADDR
// sComputer := false ;
16799: LD_ADDR_EXP 91
16803: PUSH
16804: LD_INT 0
16806: ST_TO_ADDR
// s30 := false ;
16807: LD_ADDR_EXP 92
16811: PUSH
16812: LD_INT 0
16814: ST_TO_ADDR
// s60 := false ;
16815: LD_ADDR_EXP 93
16819: PUSH
16820: LD_INT 0
16822: ST_TO_ADDR
// end ;
16823: LD_VAR 0 1
16827: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
16828: LD_INT 0
16830: PPUSH
16831: PPUSH
16832: PPUSH
16833: PPUSH
16834: PPUSH
// result := [ ] ;
16835: LD_ADDR_VAR 0 1
16839: PUSH
16840: EMPTY
16841: ST_TO_ADDR
// if campaign_id = 1 then
16842: LD_OWVAR 69
16846: PUSH
16847: LD_INT 1
16849: EQUAL
16850: IFFALSE 20016
// begin case mission_number of 1 :
16852: LD_OWVAR 70
16856: PUSH
16857: LD_INT 1
16859: DOUBLE
16860: EQUAL
16861: IFTRUE 16865
16863: GO 16941
16865: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
16866: LD_ADDR_VAR 0 1
16870: PUSH
16871: LD_INT 2
16873: PUSH
16874: LD_INT 4
16876: PUSH
16877: LD_INT 11
16879: PUSH
16880: LD_INT 12
16882: PUSH
16883: LD_INT 15
16885: PUSH
16886: LD_INT 16
16888: PUSH
16889: LD_INT 22
16891: PUSH
16892: LD_INT 23
16894: PUSH
16895: LD_INT 26
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: PUSH
16909: LD_INT 101
16911: PUSH
16912: LD_INT 102
16914: PUSH
16915: LD_INT 106
16917: PUSH
16918: LD_INT 116
16920: PUSH
16921: LD_INT 117
16923: PUSH
16924: LD_INT 118
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: ST_TO_ADDR
16939: GO 20014
16941: LD_INT 2
16943: DOUBLE
16944: EQUAL
16945: IFTRUE 16949
16947: GO 17033
16949: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
16950: LD_ADDR_VAR 0 1
16954: PUSH
16955: LD_INT 2
16957: PUSH
16958: LD_INT 4
16960: PUSH
16961: LD_INT 11
16963: PUSH
16964: LD_INT 12
16966: PUSH
16967: LD_INT 15
16969: PUSH
16970: LD_INT 16
16972: PUSH
16973: LD_INT 22
16975: PUSH
16976: LD_INT 23
16978: PUSH
16979: LD_INT 26
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: PUSH
16993: LD_INT 101
16995: PUSH
16996: LD_INT 102
16998: PUSH
16999: LD_INT 105
17001: PUSH
17002: LD_INT 106
17004: PUSH
17005: LD_INT 108
17007: PUSH
17008: LD_INT 116
17010: PUSH
17011: LD_INT 117
17013: PUSH
17014: LD_INT 118
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: ST_TO_ADDR
17031: GO 20014
17033: LD_INT 3
17035: DOUBLE
17036: EQUAL
17037: IFTRUE 17041
17039: GO 17129
17041: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17042: LD_ADDR_VAR 0 1
17046: PUSH
17047: LD_INT 2
17049: PUSH
17050: LD_INT 4
17052: PUSH
17053: LD_INT 5
17055: PUSH
17056: LD_INT 11
17058: PUSH
17059: LD_INT 12
17061: PUSH
17062: LD_INT 15
17064: PUSH
17065: LD_INT 16
17067: PUSH
17068: LD_INT 22
17070: PUSH
17071: LD_INT 26
17073: PUSH
17074: LD_INT 36
17076: PUSH
17077: EMPTY
17078: LIST
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: PUSH
17089: LD_INT 101
17091: PUSH
17092: LD_INT 102
17094: PUSH
17095: LD_INT 105
17097: PUSH
17098: LD_INT 106
17100: PUSH
17101: LD_INT 108
17103: PUSH
17104: LD_INT 116
17106: PUSH
17107: LD_INT 117
17109: PUSH
17110: LD_INT 118
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: ST_TO_ADDR
17127: GO 20014
17129: LD_INT 4
17131: DOUBLE
17132: EQUAL
17133: IFTRUE 17137
17135: GO 17233
17137: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17138: LD_ADDR_VAR 0 1
17142: PUSH
17143: LD_INT 2
17145: PUSH
17146: LD_INT 4
17148: PUSH
17149: LD_INT 5
17151: PUSH
17152: LD_INT 8
17154: PUSH
17155: LD_INT 11
17157: PUSH
17158: LD_INT 12
17160: PUSH
17161: LD_INT 15
17163: PUSH
17164: LD_INT 16
17166: PUSH
17167: LD_INT 22
17169: PUSH
17170: LD_INT 23
17172: PUSH
17173: LD_INT 26
17175: PUSH
17176: LD_INT 36
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: PUSH
17193: LD_INT 101
17195: PUSH
17196: LD_INT 102
17198: PUSH
17199: LD_INT 105
17201: PUSH
17202: LD_INT 106
17204: PUSH
17205: LD_INT 108
17207: PUSH
17208: LD_INT 116
17210: PUSH
17211: LD_INT 117
17213: PUSH
17214: LD_INT 118
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: ST_TO_ADDR
17231: GO 20014
17233: LD_INT 5
17235: DOUBLE
17236: EQUAL
17237: IFTRUE 17241
17239: GO 17353
17241: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
17242: LD_ADDR_VAR 0 1
17246: PUSH
17247: LD_INT 2
17249: PUSH
17250: LD_INT 4
17252: PUSH
17253: LD_INT 5
17255: PUSH
17256: LD_INT 6
17258: PUSH
17259: LD_INT 8
17261: PUSH
17262: LD_INT 11
17264: PUSH
17265: LD_INT 12
17267: PUSH
17268: LD_INT 15
17270: PUSH
17271: LD_INT 16
17273: PUSH
17274: LD_INT 22
17276: PUSH
17277: LD_INT 23
17279: PUSH
17280: LD_INT 25
17282: PUSH
17283: LD_INT 26
17285: PUSH
17286: LD_INT 36
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: PUSH
17305: LD_INT 101
17307: PUSH
17308: LD_INT 102
17310: PUSH
17311: LD_INT 105
17313: PUSH
17314: LD_INT 106
17316: PUSH
17317: LD_INT 108
17319: PUSH
17320: LD_INT 109
17322: PUSH
17323: LD_INT 112
17325: PUSH
17326: LD_INT 116
17328: PUSH
17329: LD_INT 117
17331: PUSH
17332: LD_INT 118
17334: PUSH
17335: EMPTY
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: PUSH
17347: EMPTY
17348: LIST
17349: LIST
17350: ST_TO_ADDR
17351: GO 20014
17353: LD_INT 6
17355: DOUBLE
17356: EQUAL
17357: IFTRUE 17361
17359: GO 17493
17361: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
17362: LD_ADDR_VAR 0 1
17366: PUSH
17367: LD_INT 2
17369: PUSH
17370: LD_INT 4
17372: PUSH
17373: LD_INT 5
17375: PUSH
17376: LD_INT 6
17378: PUSH
17379: LD_INT 8
17381: PUSH
17382: LD_INT 11
17384: PUSH
17385: LD_INT 12
17387: PUSH
17388: LD_INT 15
17390: PUSH
17391: LD_INT 16
17393: PUSH
17394: LD_INT 20
17396: PUSH
17397: LD_INT 21
17399: PUSH
17400: LD_INT 22
17402: PUSH
17403: LD_INT 23
17405: PUSH
17406: LD_INT 25
17408: PUSH
17409: LD_INT 26
17411: PUSH
17412: LD_INT 30
17414: PUSH
17415: LD_INT 31
17417: PUSH
17418: LD_INT 32
17420: PUSH
17421: LD_INT 36
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: PUSH
17445: LD_INT 101
17447: PUSH
17448: LD_INT 102
17450: PUSH
17451: LD_INT 105
17453: PUSH
17454: LD_INT 106
17456: PUSH
17457: LD_INT 108
17459: PUSH
17460: LD_INT 109
17462: PUSH
17463: LD_INT 112
17465: PUSH
17466: LD_INT 116
17468: PUSH
17469: LD_INT 117
17471: PUSH
17472: LD_INT 118
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: ST_TO_ADDR
17491: GO 20014
17493: LD_INT 7
17495: DOUBLE
17496: EQUAL
17497: IFTRUE 17501
17499: GO 17613
17501: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
17502: LD_ADDR_VAR 0 1
17506: PUSH
17507: LD_INT 2
17509: PUSH
17510: LD_INT 4
17512: PUSH
17513: LD_INT 5
17515: PUSH
17516: LD_INT 7
17518: PUSH
17519: LD_INT 11
17521: PUSH
17522: LD_INT 12
17524: PUSH
17525: LD_INT 15
17527: PUSH
17528: LD_INT 16
17530: PUSH
17531: LD_INT 20
17533: PUSH
17534: LD_INT 21
17536: PUSH
17537: LD_INT 22
17539: PUSH
17540: LD_INT 23
17542: PUSH
17543: LD_INT 25
17545: PUSH
17546: LD_INT 26
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: PUSH
17565: LD_INT 101
17567: PUSH
17568: LD_INT 102
17570: PUSH
17571: LD_INT 103
17573: PUSH
17574: LD_INT 105
17576: PUSH
17577: LD_INT 106
17579: PUSH
17580: LD_INT 108
17582: PUSH
17583: LD_INT 112
17585: PUSH
17586: LD_INT 116
17588: PUSH
17589: LD_INT 117
17591: PUSH
17592: LD_INT 118
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: ST_TO_ADDR
17611: GO 20014
17613: LD_INT 8
17615: DOUBLE
17616: EQUAL
17617: IFTRUE 17621
17619: GO 17761
17621: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
17622: LD_ADDR_VAR 0 1
17626: PUSH
17627: LD_INT 2
17629: PUSH
17630: LD_INT 4
17632: PUSH
17633: LD_INT 5
17635: PUSH
17636: LD_INT 6
17638: PUSH
17639: LD_INT 7
17641: PUSH
17642: LD_INT 8
17644: PUSH
17645: LD_INT 11
17647: PUSH
17648: LD_INT 12
17650: PUSH
17651: LD_INT 15
17653: PUSH
17654: LD_INT 16
17656: PUSH
17657: LD_INT 20
17659: PUSH
17660: LD_INT 21
17662: PUSH
17663: LD_INT 22
17665: PUSH
17666: LD_INT 23
17668: PUSH
17669: LD_INT 25
17671: PUSH
17672: LD_INT 26
17674: PUSH
17675: LD_INT 30
17677: PUSH
17678: LD_INT 31
17680: PUSH
17681: LD_INT 32
17683: PUSH
17684: LD_INT 36
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: PUSH
17709: LD_INT 101
17711: PUSH
17712: LD_INT 102
17714: PUSH
17715: LD_INT 103
17717: PUSH
17718: LD_INT 105
17720: PUSH
17721: LD_INT 106
17723: PUSH
17724: LD_INT 108
17726: PUSH
17727: LD_INT 109
17729: PUSH
17730: LD_INT 112
17732: PUSH
17733: LD_INT 116
17735: PUSH
17736: LD_INT 117
17738: PUSH
17739: LD_INT 118
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: ST_TO_ADDR
17759: GO 20014
17761: LD_INT 9
17763: DOUBLE
17764: EQUAL
17765: IFTRUE 17769
17767: GO 17917
17769: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17770: LD_ADDR_VAR 0 1
17774: PUSH
17775: LD_INT 2
17777: PUSH
17778: LD_INT 4
17780: PUSH
17781: LD_INT 5
17783: PUSH
17784: LD_INT 6
17786: PUSH
17787: LD_INT 7
17789: PUSH
17790: LD_INT 8
17792: PUSH
17793: LD_INT 11
17795: PUSH
17796: LD_INT 12
17798: PUSH
17799: LD_INT 15
17801: PUSH
17802: LD_INT 16
17804: PUSH
17805: LD_INT 20
17807: PUSH
17808: LD_INT 21
17810: PUSH
17811: LD_INT 22
17813: PUSH
17814: LD_INT 23
17816: PUSH
17817: LD_INT 25
17819: PUSH
17820: LD_INT 26
17822: PUSH
17823: LD_INT 28
17825: PUSH
17826: LD_INT 30
17828: PUSH
17829: LD_INT 31
17831: PUSH
17832: LD_INT 32
17834: PUSH
17835: LD_INT 36
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: LIST
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: LIST
17847: LIST
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: PUSH
17861: LD_INT 101
17863: PUSH
17864: LD_INT 102
17866: PUSH
17867: LD_INT 103
17869: PUSH
17870: LD_INT 105
17872: PUSH
17873: LD_INT 106
17875: PUSH
17876: LD_INT 108
17878: PUSH
17879: LD_INT 109
17881: PUSH
17882: LD_INT 112
17884: PUSH
17885: LD_INT 114
17887: PUSH
17888: LD_INT 116
17890: PUSH
17891: LD_INT 117
17893: PUSH
17894: LD_INT 118
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: ST_TO_ADDR
17915: GO 20014
17917: LD_INT 10
17919: DOUBLE
17920: EQUAL
17921: IFTRUE 17925
17923: GO 18121
17925: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
17926: LD_ADDR_VAR 0 1
17930: PUSH
17931: LD_INT 2
17933: PUSH
17934: LD_INT 4
17936: PUSH
17937: LD_INT 5
17939: PUSH
17940: LD_INT 6
17942: PUSH
17943: LD_INT 7
17945: PUSH
17946: LD_INT 8
17948: PUSH
17949: LD_INT 9
17951: PUSH
17952: LD_INT 10
17954: PUSH
17955: LD_INT 11
17957: PUSH
17958: LD_INT 12
17960: PUSH
17961: LD_INT 13
17963: PUSH
17964: LD_INT 14
17966: PUSH
17967: LD_INT 15
17969: PUSH
17970: LD_INT 16
17972: PUSH
17973: LD_INT 17
17975: PUSH
17976: LD_INT 18
17978: PUSH
17979: LD_INT 19
17981: PUSH
17982: LD_INT 20
17984: PUSH
17985: LD_INT 21
17987: PUSH
17988: LD_INT 22
17990: PUSH
17991: LD_INT 23
17993: PUSH
17994: LD_INT 24
17996: PUSH
17997: LD_INT 25
17999: PUSH
18000: LD_INT 26
18002: PUSH
18003: LD_INT 28
18005: PUSH
18006: LD_INT 30
18008: PUSH
18009: LD_INT 31
18011: PUSH
18012: LD_INT 32
18014: PUSH
18015: LD_INT 36
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: PUSH
18049: LD_INT 101
18051: PUSH
18052: LD_INT 102
18054: PUSH
18055: LD_INT 103
18057: PUSH
18058: LD_INT 104
18060: PUSH
18061: LD_INT 105
18063: PUSH
18064: LD_INT 106
18066: PUSH
18067: LD_INT 107
18069: PUSH
18070: LD_INT 108
18072: PUSH
18073: LD_INT 109
18075: PUSH
18076: LD_INT 110
18078: PUSH
18079: LD_INT 111
18081: PUSH
18082: LD_INT 112
18084: PUSH
18085: LD_INT 114
18087: PUSH
18088: LD_INT 116
18090: PUSH
18091: LD_INT 117
18093: PUSH
18094: LD_INT 118
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: ST_TO_ADDR
18119: GO 20014
18121: LD_INT 11
18123: DOUBLE
18124: EQUAL
18125: IFTRUE 18129
18127: GO 18333
18129: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18130: LD_ADDR_VAR 0 1
18134: PUSH
18135: LD_INT 2
18137: PUSH
18138: LD_INT 3
18140: PUSH
18141: LD_INT 4
18143: PUSH
18144: LD_INT 5
18146: PUSH
18147: LD_INT 6
18149: PUSH
18150: LD_INT 7
18152: PUSH
18153: LD_INT 8
18155: PUSH
18156: LD_INT 9
18158: PUSH
18159: LD_INT 10
18161: PUSH
18162: LD_INT 11
18164: PUSH
18165: LD_INT 12
18167: PUSH
18168: LD_INT 13
18170: PUSH
18171: LD_INT 14
18173: PUSH
18174: LD_INT 15
18176: PUSH
18177: LD_INT 16
18179: PUSH
18180: LD_INT 17
18182: PUSH
18183: LD_INT 18
18185: PUSH
18186: LD_INT 19
18188: PUSH
18189: LD_INT 20
18191: PUSH
18192: LD_INT 21
18194: PUSH
18195: LD_INT 22
18197: PUSH
18198: LD_INT 23
18200: PUSH
18201: LD_INT 24
18203: PUSH
18204: LD_INT 25
18206: PUSH
18207: LD_INT 26
18209: PUSH
18210: LD_INT 28
18212: PUSH
18213: LD_INT 30
18215: PUSH
18216: LD_INT 31
18218: PUSH
18219: LD_INT 32
18221: PUSH
18222: LD_INT 34
18224: PUSH
18225: LD_INT 36
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: PUSH
18261: LD_INT 101
18263: PUSH
18264: LD_INT 102
18266: PUSH
18267: LD_INT 103
18269: PUSH
18270: LD_INT 104
18272: PUSH
18273: LD_INT 105
18275: PUSH
18276: LD_INT 106
18278: PUSH
18279: LD_INT 107
18281: PUSH
18282: LD_INT 108
18284: PUSH
18285: LD_INT 109
18287: PUSH
18288: LD_INT 110
18290: PUSH
18291: LD_INT 111
18293: PUSH
18294: LD_INT 112
18296: PUSH
18297: LD_INT 114
18299: PUSH
18300: LD_INT 116
18302: PUSH
18303: LD_INT 117
18305: PUSH
18306: LD_INT 118
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: ST_TO_ADDR
18331: GO 20014
18333: LD_INT 12
18335: DOUBLE
18336: EQUAL
18337: IFTRUE 18341
18339: GO 18561
18341: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18342: LD_ADDR_VAR 0 1
18346: PUSH
18347: LD_INT 1
18349: PUSH
18350: LD_INT 2
18352: PUSH
18353: LD_INT 3
18355: PUSH
18356: LD_INT 4
18358: PUSH
18359: LD_INT 5
18361: PUSH
18362: LD_INT 6
18364: PUSH
18365: LD_INT 7
18367: PUSH
18368: LD_INT 8
18370: PUSH
18371: LD_INT 9
18373: PUSH
18374: LD_INT 10
18376: PUSH
18377: LD_INT 11
18379: PUSH
18380: LD_INT 12
18382: PUSH
18383: LD_INT 13
18385: PUSH
18386: LD_INT 14
18388: PUSH
18389: LD_INT 15
18391: PUSH
18392: LD_INT 16
18394: PUSH
18395: LD_INT 17
18397: PUSH
18398: LD_INT 18
18400: PUSH
18401: LD_INT 19
18403: PUSH
18404: LD_INT 20
18406: PUSH
18407: LD_INT 21
18409: PUSH
18410: LD_INT 22
18412: PUSH
18413: LD_INT 23
18415: PUSH
18416: LD_INT 24
18418: PUSH
18419: LD_INT 25
18421: PUSH
18422: LD_INT 26
18424: PUSH
18425: LD_INT 27
18427: PUSH
18428: LD_INT 28
18430: PUSH
18431: LD_INT 30
18433: PUSH
18434: LD_INT 31
18436: PUSH
18437: LD_INT 32
18439: PUSH
18440: LD_INT 33
18442: PUSH
18443: LD_INT 34
18445: PUSH
18446: LD_INT 36
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: PUSH
18485: LD_INT 101
18487: PUSH
18488: LD_INT 102
18490: PUSH
18491: LD_INT 103
18493: PUSH
18494: LD_INT 104
18496: PUSH
18497: LD_INT 105
18499: PUSH
18500: LD_INT 106
18502: PUSH
18503: LD_INT 107
18505: PUSH
18506: LD_INT 108
18508: PUSH
18509: LD_INT 109
18511: PUSH
18512: LD_INT 110
18514: PUSH
18515: LD_INT 111
18517: PUSH
18518: LD_INT 112
18520: PUSH
18521: LD_INT 113
18523: PUSH
18524: LD_INT 114
18526: PUSH
18527: LD_INT 116
18529: PUSH
18530: LD_INT 117
18532: PUSH
18533: LD_INT 118
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: ST_TO_ADDR
18559: GO 20014
18561: LD_INT 13
18563: DOUBLE
18564: EQUAL
18565: IFTRUE 18569
18567: GO 18777
18569: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
18570: LD_ADDR_VAR 0 1
18574: PUSH
18575: LD_INT 1
18577: PUSH
18578: LD_INT 2
18580: PUSH
18581: LD_INT 3
18583: PUSH
18584: LD_INT 4
18586: PUSH
18587: LD_INT 5
18589: PUSH
18590: LD_INT 8
18592: PUSH
18593: LD_INT 9
18595: PUSH
18596: LD_INT 10
18598: PUSH
18599: LD_INT 11
18601: PUSH
18602: LD_INT 12
18604: PUSH
18605: LD_INT 14
18607: PUSH
18608: LD_INT 15
18610: PUSH
18611: LD_INT 16
18613: PUSH
18614: LD_INT 17
18616: PUSH
18617: LD_INT 18
18619: PUSH
18620: LD_INT 19
18622: PUSH
18623: LD_INT 20
18625: PUSH
18626: LD_INT 21
18628: PUSH
18629: LD_INT 22
18631: PUSH
18632: LD_INT 23
18634: PUSH
18635: LD_INT 24
18637: PUSH
18638: LD_INT 25
18640: PUSH
18641: LD_INT 26
18643: PUSH
18644: LD_INT 27
18646: PUSH
18647: LD_INT 28
18649: PUSH
18650: LD_INT 30
18652: PUSH
18653: LD_INT 31
18655: PUSH
18656: LD_INT 32
18658: PUSH
18659: LD_INT 33
18661: PUSH
18662: LD_INT 34
18664: PUSH
18665: LD_INT 36
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: PUSH
18701: LD_INT 101
18703: PUSH
18704: LD_INT 102
18706: PUSH
18707: LD_INT 103
18709: PUSH
18710: LD_INT 104
18712: PUSH
18713: LD_INT 105
18715: PUSH
18716: LD_INT 106
18718: PUSH
18719: LD_INT 107
18721: PUSH
18722: LD_INT 108
18724: PUSH
18725: LD_INT 109
18727: PUSH
18728: LD_INT 110
18730: PUSH
18731: LD_INT 111
18733: PUSH
18734: LD_INT 112
18736: PUSH
18737: LD_INT 113
18739: PUSH
18740: LD_INT 114
18742: PUSH
18743: LD_INT 116
18745: PUSH
18746: LD_INT 117
18748: PUSH
18749: LD_INT 118
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: LIST
18765: LIST
18766: LIST
18767: LIST
18768: LIST
18769: LIST
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: ST_TO_ADDR
18775: GO 20014
18777: LD_INT 14
18779: DOUBLE
18780: EQUAL
18781: IFTRUE 18785
18783: GO 19009
18785: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18786: LD_ADDR_VAR 0 1
18790: PUSH
18791: LD_INT 1
18793: PUSH
18794: LD_INT 2
18796: PUSH
18797: LD_INT 3
18799: PUSH
18800: LD_INT 4
18802: PUSH
18803: LD_INT 5
18805: PUSH
18806: LD_INT 6
18808: PUSH
18809: LD_INT 7
18811: PUSH
18812: LD_INT 8
18814: PUSH
18815: LD_INT 9
18817: PUSH
18818: LD_INT 10
18820: PUSH
18821: LD_INT 11
18823: PUSH
18824: LD_INT 12
18826: PUSH
18827: LD_INT 13
18829: PUSH
18830: LD_INT 14
18832: PUSH
18833: LD_INT 15
18835: PUSH
18836: LD_INT 16
18838: PUSH
18839: LD_INT 17
18841: PUSH
18842: LD_INT 18
18844: PUSH
18845: LD_INT 19
18847: PUSH
18848: LD_INT 20
18850: PUSH
18851: LD_INT 21
18853: PUSH
18854: LD_INT 22
18856: PUSH
18857: LD_INT 23
18859: PUSH
18860: LD_INT 24
18862: PUSH
18863: LD_INT 25
18865: PUSH
18866: LD_INT 26
18868: PUSH
18869: LD_INT 27
18871: PUSH
18872: LD_INT 28
18874: PUSH
18875: LD_INT 29
18877: PUSH
18878: LD_INT 30
18880: PUSH
18881: LD_INT 31
18883: PUSH
18884: LD_INT 32
18886: PUSH
18887: LD_INT 33
18889: PUSH
18890: LD_INT 34
18892: PUSH
18893: LD_INT 36
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: PUSH
18933: LD_INT 101
18935: PUSH
18936: LD_INT 102
18938: PUSH
18939: LD_INT 103
18941: PUSH
18942: LD_INT 104
18944: PUSH
18945: LD_INT 105
18947: PUSH
18948: LD_INT 106
18950: PUSH
18951: LD_INT 107
18953: PUSH
18954: LD_INT 108
18956: PUSH
18957: LD_INT 109
18959: PUSH
18960: LD_INT 110
18962: PUSH
18963: LD_INT 111
18965: PUSH
18966: LD_INT 112
18968: PUSH
18969: LD_INT 113
18971: PUSH
18972: LD_INT 114
18974: PUSH
18975: LD_INT 116
18977: PUSH
18978: LD_INT 117
18980: PUSH
18981: LD_INT 118
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: ST_TO_ADDR
19007: GO 20014
19009: LD_INT 15
19011: DOUBLE
19012: EQUAL
19013: IFTRUE 19017
19015: GO 19241
19017: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
19018: LD_ADDR_VAR 0 1
19022: PUSH
19023: LD_INT 1
19025: PUSH
19026: LD_INT 2
19028: PUSH
19029: LD_INT 3
19031: PUSH
19032: LD_INT 4
19034: PUSH
19035: LD_INT 5
19037: PUSH
19038: LD_INT 6
19040: PUSH
19041: LD_INT 7
19043: PUSH
19044: LD_INT 8
19046: PUSH
19047: LD_INT 9
19049: PUSH
19050: LD_INT 10
19052: PUSH
19053: LD_INT 11
19055: PUSH
19056: LD_INT 12
19058: PUSH
19059: LD_INT 13
19061: PUSH
19062: LD_INT 14
19064: PUSH
19065: LD_INT 15
19067: PUSH
19068: LD_INT 16
19070: PUSH
19071: LD_INT 17
19073: PUSH
19074: LD_INT 18
19076: PUSH
19077: LD_INT 19
19079: PUSH
19080: LD_INT 20
19082: PUSH
19083: LD_INT 21
19085: PUSH
19086: LD_INT 22
19088: PUSH
19089: LD_INT 23
19091: PUSH
19092: LD_INT 24
19094: PUSH
19095: LD_INT 25
19097: PUSH
19098: LD_INT 26
19100: PUSH
19101: LD_INT 27
19103: PUSH
19104: LD_INT 28
19106: PUSH
19107: LD_INT 29
19109: PUSH
19110: LD_INT 30
19112: PUSH
19113: LD_INT 31
19115: PUSH
19116: LD_INT 32
19118: PUSH
19119: LD_INT 33
19121: PUSH
19122: LD_INT 34
19124: PUSH
19125: LD_INT 36
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: PUSH
19165: LD_INT 101
19167: PUSH
19168: LD_INT 102
19170: PUSH
19171: LD_INT 103
19173: PUSH
19174: LD_INT 104
19176: PUSH
19177: LD_INT 105
19179: PUSH
19180: LD_INT 106
19182: PUSH
19183: LD_INT 107
19185: PUSH
19186: LD_INT 108
19188: PUSH
19189: LD_INT 109
19191: PUSH
19192: LD_INT 110
19194: PUSH
19195: LD_INT 111
19197: PUSH
19198: LD_INT 112
19200: PUSH
19201: LD_INT 113
19203: PUSH
19204: LD_INT 114
19206: PUSH
19207: LD_INT 116
19209: PUSH
19210: LD_INT 117
19212: PUSH
19213: LD_INT 118
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: ST_TO_ADDR
19239: GO 20014
19241: LD_INT 16
19243: DOUBLE
19244: EQUAL
19245: IFTRUE 19249
19247: GO 19385
19249: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19250: LD_ADDR_VAR 0 1
19254: PUSH
19255: LD_INT 2
19257: PUSH
19258: LD_INT 4
19260: PUSH
19261: LD_INT 5
19263: PUSH
19264: LD_INT 7
19266: PUSH
19267: LD_INT 11
19269: PUSH
19270: LD_INT 12
19272: PUSH
19273: LD_INT 15
19275: PUSH
19276: LD_INT 16
19278: PUSH
19279: LD_INT 20
19281: PUSH
19282: LD_INT 21
19284: PUSH
19285: LD_INT 22
19287: PUSH
19288: LD_INT 23
19290: PUSH
19291: LD_INT 25
19293: PUSH
19294: LD_INT 26
19296: PUSH
19297: LD_INT 30
19299: PUSH
19300: LD_INT 31
19302: PUSH
19303: LD_INT 32
19305: PUSH
19306: LD_INT 33
19308: PUSH
19309: LD_INT 34
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: PUSH
19333: LD_INT 101
19335: PUSH
19336: LD_INT 102
19338: PUSH
19339: LD_INT 103
19341: PUSH
19342: LD_INT 106
19344: PUSH
19345: LD_INT 108
19347: PUSH
19348: LD_INT 112
19350: PUSH
19351: LD_INT 113
19353: PUSH
19354: LD_INT 114
19356: PUSH
19357: LD_INT 116
19359: PUSH
19360: LD_INT 117
19362: PUSH
19363: LD_INT 118
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: ST_TO_ADDR
19383: GO 20014
19385: LD_INT 17
19387: DOUBLE
19388: EQUAL
19389: IFTRUE 19393
19391: GO 19617
19393: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
19394: LD_ADDR_VAR 0 1
19398: PUSH
19399: LD_INT 1
19401: PUSH
19402: LD_INT 2
19404: PUSH
19405: LD_INT 3
19407: PUSH
19408: LD_INT 4
19410: PUSH
19411: LD_INT 5
19413: PUSH
19414: LD_INT 6
19416: PUSH
19417: LD_INT 7
19419: PUSH
19420: LD_INT 8
19422: PUSH
19423: LD_INT 9
19425: PUSH
19426: LD_INT 10
19428: PUSH
19429: LD_INT 11
19431: PUSH
19432: LD_INT 12
19434: PUSH
19435: LD_INT 13
19437: PUSH
19438: LD_INT 14
19440: PUSH
19441: LD_INT 15
19443: PUSH
19444: LD_INT 16
19446: PUSH
19447: LD_INT 17
19449: PUSH
19450: LD_INT 18
19452: PUSH
19453: LD_INT 19
19455: PUSH
19456: LD_INT 20
19458: PUSH
19459: LD_INT 21
19461: PUSH
19462: LD_INT 22
19464: PUSH
19465: LD_INT 23
19467: PUSH
19468: LD_INT 24
19470: PUSH
19471: LD_INT 25
19473: PUSH
19474: LD_INT 26
19476: PUSH
19477: LD_INT 27
19479: PUSH
19480: LD_INT 28
19482: PUSH
19483: LD_INT 29
19485: PUSH
19486: LD_INT 30
19488: PUSH
19489: LD_INT 31
19491: PUSH
19492: LD_INT 32
19494: PUSH
19495: LD_INT 33
19497: PUSH
19498: LD_INT 34
19500: PUSH
19501: LD_INT 36
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: PUSH
19541: LD_INT 101
19543: PUSH
19544: LD_INT 102
19546: PUSH
19547: LD_INT 103
19549: PUSH
19550: LD_INT 104
19552: PUSH
19553: LD_INT 105
19555: PUSH
19556: LD_INT 106
19558: PUSH
19559: LD_INT 107
19561: PUSH
19562: LD_INT 108
19564: PUSH
19565: LD_INT 109
19567: PUSH
19568: LD_INT 110
19570: PUSH
19571: LD_INT 111
19573: PUSH
19574: LD_INT 112
19576: PUSH
19577: LD_INT 113
19579: PUSH
19580: LD_INT 114
19582: PUSH
19583: LD_INT 116
19585: PUSH
19586: LD_INT 117
19588: PUSH
19589: LD_INT 118
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: ST_TO_ADDR
19615: GO 20014
19617: LD_INT 18
19619: DOUBLE
19620: EQUAL
19621: IFTRUE 19625
19623: GO 19773
19625: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
19626: LD_ADDR_VAR 0 1
19630: PUSH
19631: LD_INT 2
19633: PUSH
19634: LD_INT 4
19636: PUSH
19637: LD_INT 5
19639: PUSH
19640: LD_INT 7
19642: PUSH
19643: LD_INT 11
19645: PUSH
19646: LD_INT 12
19648: PUSH
19649: LD_INT 15
19651: PUSH
19652: LD_INT 16
19654: PUSH
19655: LD_INT 20
19657: PUSH
19658: LD_INT 21
19660: PUSH
19661: LD_INT 22
19663: PUSH
19664: LD_INT 23
19666: PUSH
19667: LD_INT 25
19669: PUSH
19670: LD_INT 26
19672: PUSH
19673: LD_INT 30
19675: PUSH
19676: LD_INT 31
19678: PUSH
19679: LD_INT 32
19681: PUSH
19682: LD_INT 33
19684: PUSH
19685: LD_INT 34
19687: PUSH
19688: LD_INT 35
19690: PUSH
19691: LD_INT 36
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: PUSH
19717: LD_INT 101
19719: PUSH
19720: LD_INT 102
19722: PUSH
19723: LD_INT 103
19725: PUSH
19726: LD_INT 106
19728: PUSH
19729: LD_INT 108
19731: PUSH
19732: LD_INT 112
19734: PUSH
19735: LD_INT 113
19737: PUSH
19738: LD_INT 114
19740: PUSH
19741: LD_INT 115
19743: PUSH
19744: LD_INT 116
19746: PUSH
19747: LD_INT 117
19749: PUSH
19750: LD_INT 118
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: ST_TO_ADDR
19771: GO 20014
19773: LD_INT 19
19775: DOUBLE
19776: EQUAL
19777: IFTRUE 19781
19779: GO 20013
19781: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19782: LD_ADDR_VAR 0 1
19786: PUSH
19787: LD_INT 1
19789: PUSH
19790: LD_INT 2
19792: PUSH
19793: LD_INT 3
19795: PUSH
19796: LD_INT 4
19798: PUSH
19799: LD_INT 5
19801: PUSH
19802: LD_INT 6
19804: PUSH
19805: LD_INT 7
19807: PUSH
19808: LD_INT 8
19810: PUSH
19811: LD_INT 9
19813: PUSH
19814: LD_INT 10
19816: PUSH
19817: LD_INT 11
19819: PUSH
19820: LD_INT 12
19822: PUSH
19823: LD_INT 13
19825: PUSH
19826: LD_INT 14
19828: PUSH
19829: LD_INT 15
19831: PUSH
19832: LD_INT 16
19834: PUSH
19835: LD_INT 17
19837: PUSH
19838: LD_INT 18
19840: PUSH
19841: LD_INT 19
19843: PUSH
19844: LD_INT 20
19846: PUSH
19847: LD_INT 21
19849: PUSH
19850: LD_INT 22
19852: PUSH
19853: LD_INT 23
19855: PUSH
19856: LD_INT 24
19858: PUSH
19859: LD_INT 25
19861: PUSH
19862: LD_INT 26
19864: PUSH
19865: LD_INT 27
19867: PUSH
19868: LD_INT 28
19870: PUSH
19871: LD_INT 29
19873: PUSH
19874: LD_INT 30
19876: PUSH
19877: LD_INT 31
19879: PUSH
19880: LD_INT 32
19882: PUSH
19883: LD_INT 33
19885: PUSH
19886: LD_INT 34
19888: PUSH
19889: LD_INT 35
19891: PUSH
19892: LD_INT 36
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: PUSH
19933: LD_INT 101
19935: PUSH
19936: LD_INT 102
19938: PUSH
19939: LD_INT 103
19941: PUSH
19942: LD_INT 104
19944: PUSH
19945: LD_INT 105
19947: PUSH
19948: LD_INT 106
19950: PUSH
19951: LD_INT 107
19953: PUSH
19954: LD_INT 108
19956: PUSH
19957: LD_INT 109
19959: PUSH
19960: LD_INT 110
19962: PUSH
19963: LD_INT 111
19965: PUSH
19966: LD_INT 112
19968: PUSH
19969: LD_INT 113
19971: PUSH
19972: LD_INT 114
19974: PUSH
19975: LD_INT 115
19977: PUSH
19978: LD_INT 116
19980: PUSH
19981: LD_INT 117
19983: PUSH
19984: LD_INT 118
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: ST_TO_ADDR
20011: GO 20014
20013: POP
// end else
20014: GO 20245
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
20016: LD_ADDR_VAR 0 1
20020: PUSH
20021: LD_INT 1
20023: PUSH
20024: LD_INT 2
20026: PUSH
20027: LD_INT 3
20029: PUSH
20030: LD_INT 4
20032: PUSH
20033: LD_INT 5
20035: PUSH
20036: LD_INT 6
20038: PUSH
20039: LD_INT 7
20041: PUSH
20042: LD_INT 8
20044: PUSH
20045: LD_INT 9
20047: PUSH
20048: LD_INT 10
20050: PUSH
20051: LD_INT 11
20053: PUSH
20054: LD_INT 12
20056: PUSH
20057: LD_INT 13
20059: PUSH
20060: LD_INT 14
20062: PUSH
20063: LD_INT 15
20065: PUSH
20066: LD_INT 16
20068: PUSH
20069: LD_INT 17
20071: PUSH
20072: LD_INT 18
20074: PUSH
20075: LD_INT 19
20077: PUSH
20078: LD_INT 20
20080: PUSH
20081: LD_INT 21
20083: PUSH
20084: LD_INT 22
20086: PUSH
20087: LD_INT 23
20089: PUSH
20090: LD_INT 24
20092: PUSH
20093: LD_INT 25
20095: PUSH
20096: LD_INT 26
20098: PUSH
20099: LD_INT 27
20101: PUSH
20102: LD_INT 28
20104: PUSH
20105: LD_INT 29
20107: PUSH
20108: LD_INT 30
20110: PUSH
20111: LD_INT 31
20113: PUSH
20114: LD_INT 32
20116: PUSH
20117: LD_INT 33
20119: PUSH
20120: LD_INT 34
20122: PUSH
20123: LD_INT 35
20125: PUSH
20126: LD_INT 36
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: PUSH
20167: LD_INT 101
20169: PUSH
20170: LD_INT 102
20172: PUSH
20173: LD_INT 103
20175: PUSH
20176: LD_INT 104
20178: PUSH
20179: LD_INT 105
20181: PUSH
20182: LD_INT 106
20184: PUSH
20185: LD_INT 107
20187: PUSH
20188: LD_INT 108
20190: PUSH
20191: LD_INT 109
20193: PUSH
20194: LD_INT 110
20196: PUSH
20197: LD_INT 111
20199: PUSH
20200: LD_INT 112
20202: PUSH
20203: LD_INT 113
20205: PUSH
20206: LD_INT 114
20208: PUSH
20209: LD_INT 115
20211: PUSH
20212: LD_INT 116
20214: PUSH
20215: LD_INT 117
20217: PUSH
20218: LD_INT 118
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: ST_TO_ADDR
// if result then
20245: LD_VAR 0 1
20249: IFFALSE 20538
// begin normal :=  ;
20251: LD_ADDR_VAR 0 3
20255: PUSH
20256: LD_STRING 
20258: ST_TO_ADDR
// hardcore :=  ;
20259: LD_ADDR_VAR 0 4
20263: PUSH
20264: LD_STRING 
20266: ST_TO_ADDR
// for i = 1 to normalCounter do
20267: LD_ADDR_VAR 0 5
20271: PUSH
20272: DOUBLE
20273: LD_INT 1
20275: DEC
20276: ST_TO_ADDR
20277: LD_EXP 38
20281: PUSH
20282: FOR_TO
20283: IFFALSE 20384
// begin tmp := 0 ;
20285: LD_ADDR_VAR 0 2
20289: PUSH
20290: LD_STRING 0
20292: ST_TO_ADDR
// if result [ 1 ] then
20293: LD_VAR 0 1
20297: PUSH
20298: LD_INT 1
20300: ARRAY
20301: IFFALSE 20366
// if result [ 1 ] [ 1 ] = i then
20303: LD_VAR 0 1
20307: PUSH
20308: LD_INT 1
20310: ARRAY
20311: PUSH
20312: LD_INT 1
20314: ARRAY
20315: PUSH
20316: LD_VAR 0 5
20320: EQUAL
20321: IFFALSE 20366
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20323: LD_ADDR_VAR 0 1
20327: PUSH
20328: LD_VAR 0 1
20332: PPUSH
20333: LD_INT 1
20335: PPUSH
20336: LD_VAR 0 1
20340: PUSH
20341: LD_INT 1
20343: ARRAY
20344: PPUSH
20345: LD_INT 1
20347: PPUSH
20348: CALL_OW 3
20352: PPUSH
20353: CALL_OW 1
20357: ST_TO_ADDR
// tmp := 1 ;
20358: LD_ADDR_VAR 0 2
20362: PUSH
20363: LD_STRING 1
20365: ST_TO_ADDR
// end ; normal := normal & tmp ;
20366: LD_ADDR_VAR 0 3
20370: PUSH
20371: LD_VAR 0 3
20375: PUSH
20376: LD_VAR 0 2
20380: STR
20381: ST_TO_ADDR
// end ;
20382: GO 20282
20384: POP
20385: POP
// for i = 1 to hardcoreCounter do
20386: LD_ADDR_VAR 0 5
20390: PUSH
20391: DOUBLE
20392: LD_INT 1
20394: DEC
20395: ST_TO_ADDR
20396: LD_EXP 39
20400: PUSH
20401: FOR_TO
20402: IFFALSE 20507
// begin tmp := 0 ;
20404: LD_ADDR_VAR 0 2
20408: PUSH
20409: LD_STRING 0
20411: ST_TO_ADDR
// if result [ 2 ] then
20412: LD_VAR 0 1
20416: PUSH
20417: LD_INT 2
20419: ARRAY
20420: IFFALSE 20489
// if result [ 2 ] [ 1 ] = 100 + i then
20422: LD_VAR 0 1
20426: PUSH
20427: LD_INT 2
20429: ARRAY
20430: PUSH
20431: LD_INT 1
20433: ARRAY
20434: PUSH
20435: LD_INT 100
20437: PUSH
20438: LD_VAR 0 5
20442: PLUS
20443: EQUAL
20444: IFFALSE 20489
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20446: LD_ADDR_VAR 0 1
20450: PUSH
20451: LD_VAR 0 1
20455: PPUSH
20456: LD_INT 2
20458: PPUSH
20459: LD_VAR 0 1
20463: PUSH
20464: LD_INT 2
20466: ARRAY
20467: PPUSH
20468: LD_INT 1
20470: PPUSH
20471: CALL_OW 3
20475: PPUSH
20476: CALL_OW 1
20480: ST_TO_ADDR
// tmp := 1 ;
20481: LD_ADDR_VAR 0 2
20485: PUSH
20486: LD_STRING 1
20488: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20489: LD_ADDR_VAR 0 4
20493: PUSH
20494: LD_VAR 0 4
20498: PUSH
20499: LD_VAR 0 2
20503: STR
20504: ST_TO_ADDR
// end ;
20505: GO 20401
20507: POP
20508: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
20509: LD_STRING getStreamItemsFromMission("
20511: PUSH
20512: LD_VAR 0 3
20516: STR
20517: PUSH
20518: LD_STRING ","
20520: STR
20521: PUSH
20522: LD_VAR 0 4
20526: STR
20527: PUSH
20528: LD_STRING ")
20530: STR
20531: PPUSH
20532: CALL_OW 559
// end else
20536: GO 20545
// ToLua ( getStreamItemsFromMission("","") ) ;
20538: LD_STRING getStreamItemsFromMission("","")
20540: PPUSH
20541: CALL_OW 559
// end ;
20545: LD_VAR 0 1
20549: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20550: LD_EXP 37
20554: PUSH
20555: LD_EXP 42
20559: AND
20560: IFFALSE 20684
20562: GO 20564
20564: DISABLE
20565: LD_INT 0
20567: PPUSH
20568: PPUSH
// begin enable ;
20569: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20570: LD_ADDR_VAR 0 2
20574: PUSH
20575: LD_INT 22
20577: PUSH
20578: LD_OWVAR 2
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 2
20589: PUSH
20590: LD_INT 34
20592: PUSH
20593: LD_INT 7
20595: PUSH
20596: EMPTY
20597: LIST
20598: LIST
20599: PUSH
20600: LD_INT 34
20602: PUSH
20603: LD_INT 45
20605: PUSH
20606: EMPTY
20607: LIST
20608: LIST
20609: PUSH
20610: LD_INT 34
20612: PUSH
20613: LD_INT 28
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: LD_INT 34
20622: PUSH
20623: LD_INT 47
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: PPUSH
20641: CALL_OW 69
20645: ST_TO_ADDR
// if not tmp then
20646: LD_VAR 0 2
20650: NOT
20651: IFFALSE 20655
// exit ;
20653: GO 20684
// for i in tmp do
20655: LD_ADDR_VAR 0 1
20659: PUSH
20660: LD_VAR 0 2
20664: PUSH
20665: FOR_IN
20666: IFFALSE 20682
// begin SetLives ( i , 0 ) ;
20668: LD_VAR 0 1
20672: PPUSH
20673: LD_INT 0
20675: PPUSH
20676: CALL_OW 234
// end ;
20680: GO 20665
20682: POP
20683: POP
// end ;
20684: PPOPN 2
20686: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20687: LD_EXP 37
20691: PUSH
20692: LD_EXP 43
20696: AND
20697: IFFALSE 20781
20699: GO 20701
20701: DISABLE
20702: LD_INT 0
20704: PPUSH
20705: PPUSH
// begin enable ;
20706: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20707: LD_ADDR_VAR 0 2
20711: PUSH
20712: LD_INT 22
20714: PUSH
20715: LD_OWVAR 2
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 32
20726: PUSH
20727: LD_INT 3
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PPUSH
20738: CALL_OW 69
20742: ST_TO_ADDR
// if not tmp then
20743: LD_VAR 0 2
20747: NOT
20748: IFFALSE 20752
// exit ;
20750: GO 20781
// for i in tmp do
20752: LD_ADDR_VAR 0 1
20756: PUSH
20757: LD_VAR 0 2
20761: PUSH
20762: FOR_IN
20763: IFFALSE 20779
// begin SetLives ( i , 0 ) ;
20765: LD_VAR 0 1
20769: PPUSH
20770: LD_INT 0
20772: PPUSH
20773: CALL_OW 234
// end ;
20777: GO 20762
20779: POP
20780: POP
// end ;
20781: PPOPN 2
20783: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20784: LD_EXP 37
20788: PUSH
20789: LD_EXP 40
20793: AND
20794: IFFALSE 20887
20796: GO 20798
20798: DISABLE
20799: LD_INT 0
20801: PPUSH
// begin enable ;
20802: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20803: LD_ADDR_VAR 0 1
20807: PUSH
20808: LD_INT 22
20810: PUSH
20811: LD_OWVAR 2
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: LD_INT 2
20822: PUSH
20823: LD_INT 25
20825: PUSH
20826: LD_INT 5
20828: PUSH
20829: EMPTY
20830: LIST
20831: LIST
20832: PUSH
20833: LD_INT 25
20835: PUSH
20836: LD_INT 9
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: PUSH
20843: LD_INT 25
20845: PUSH
20846: LD_INT 8
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PPUSH
20863: CALL_OW 69
20867: PUSH
20868: FOR_IN
20869: IFFALSE 20885
// begin SetClass ( i , 1 ) ;
20871: LD_VAR 0 1
20875: PPUSH
20876: LD_INT 1
20878: PPUSH
20879: CALL_OW 336
// end ;
20883: GO 20868
20885: POP
20886: POP
// end ;
20887: PPOPN 1
20889: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
20890: LD_EXP 37
20894: PUSH
20895: LD_EXP 41
20899: AND
20900: PUSH
20901: LD_OWVAR 65
20905: PUSH
20906: LD_INT 7
20908: LESS
20909: AND
20910: IFFALSE 20924
20912: GO 20914
20914: DISABLE
// begin enable ;
20915: ENABLE
// game_speed := 7 ;
20916: LD_ADDR_OWVAR 65
20920: PUSH
20921: LD_INT 7
20923: ST_TO_ADDR
// end ;
20924: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
20925: LD_EXP 37
20929: PUSH
20930: LD_EXP 44
20934: AND
20935: IFFALSE 21137
20937: GO 20939
20939: DISABLE
20940: LD_INT 0
20942: PPUSH
20943: PPUSH
20944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20945: LD_ADDR_VAR 0 3
20949: PUSH
20950: LD_INT 81
20952: PUSH
20953: LD_OWVAR 2
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: PUSH
20962: LD_INT 21
20964: PUSH
20965: LD_INT 1
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PPUSH
20976: CALL_OW 69
20980: ST_TO_ADDR
// if not tmp then
20981: LD_VAR 0 3
20985: NOT
20986: IFFALSE 20990
// exit ;
20988: GO 21137
// if tmp > 5 then
20990: LD_VAR 0 3
20994: PUSH
20995: LD_INT 5
20997: GREATER
20998: IFFALSE 21010
// k := 5 else
21000: LD_ADDR_VAR 0 2
21004: PUSH
21005: LD_INT 5
21007: ST_TO_ADDR
21008: GO 21020
// k := tmp ;
21010: LD_ADDR_VAR 0 2
21014: PUSH
21015: LD_VAR 0 3
21019: ST_TO_ADDR
// for i := 1 to k do
21020: LD_ADDR_VAR 0 1
21024: PUSH
21025: DOUBLE
21026: LD_INT 1
21028: DEC
21029: ST_TO_ADDR
21030: LD_VAR 0 2
21034: PUSH
21035: FOR_TO
21036: IFFALSE 21135
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21038: LD_VAR 0 3
21042: PUSH
21043: LD_VAR 0 1
21047: ARRAY
21048: PPUSH
21049: LD_VAR 0 1
21053: PUSH
21054: LD_INT 4
21056: MOD
21057: PUSH
21058: LD_INT 1
21060: PLUS
21061: PPUSH
21062: CALL_OW 259
21066: PUSH
21067: LD_INT 10
21069: LESS
21070: IFFALSE 21133
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21072: LD_VAR 0 3
21076: PUSH
21077: LD_VAR 0 1
21081: ARRAY
21082: PPUSH
21083: LD_VAR 0 1
21087: PUSH
21088: LD_INT 4
21090: MOD
21091: PUSH
21092: LD_INT 1
21094: PLUS
21095: PPUSH
21096: LD_VAR 0 3
21100: PUSH
21101: LD_VAR 0 1
21105: ARRAY
21106: PPUSH
21107: LD_VAR 0 1
21111: PUSH
21112: LD_INT 4
21114: MOD
21115: PUSH
21116: LD_INT 1
21118: PLUS
21119: PPUSH
21120: CALL_OW 259
21124: PUSH
21125: LD_INT 1
21127: PLUS
21128: PPUSH
21129: CALL_OW 237
21133: GO 21035
21135: POP
21136: POP
// end ;
21137: PPOPN 3
21139: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21140: LD_EXP 37
21144: PUSH
21145: LD_EXP 45
21149: AND
21150: IFFALSE 21170
21152: GO 21154
21154: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21155: LD_INT 4
21157: PPUSH
21158: LD_OWVAR 2
21162: PPUSH
21163: LD_INT 0
21165: PPUSH
21166: CALL_OW 324
21170: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21171: LD_EXP 37
21175: PUSH
21176: LD_EXP 74
21180: AND
21181: IFFALSE 21201
21183: GO 21185
21185: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21186: LD_INT 19
21188: PPUSH
21189: LD_OWVAR 2
21193: PPUSH
21194: LD_INT 0
21196: PPUSH
21197: CALL_OW 324
21201: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21202: LD_EXP 37
21206: PUSH
21207: LD_EXP 46
21211: AND
21212: IFFALSE 21314
21214: GO 21216
21216: DISABLE
21217: LD_INT 0
21219: PPUSH
21220: PPUSH
// begin enable ;
21221: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21222: LD_ADDR_VAR 0 2
21226: PUSH
21227: LD_INT 22
21229: PUSH
21230: LD_OWVAR 2
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: PUSH
21239: LD_INT 2
21241: PUSH
21242: LD_INT 34
21244: PUSH
21245: LD_INT 11
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PUSH
21252: LD_INT 34
21254: PUSH
21255: LD_INT 30
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: LIST
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PPUSH
21271: CALL_OW 69
21275: ST_TO_ADDR
// if not tmp then
21276: LD_VAR 0 2
21280: NOT
21281: IFFALSE 21285
// exit ;
21283: GO 21314
// for i in tmp do
21285: LD_ADDR_VAR 0 1
21289: PUSH
21290: LD_VAR 0 2
21294: PUSH
21295: FOR_IN
21296: IFFALSE 21312
// begin SetLives ( i , 0 ) ;
21298: LD_VAR 0 1
21302: PPUSH
21303: LD_INT 0
21305: PPUSH
21306: CALL_OW 234
// end ;
21310: GO 21295
21312: POP
21313: POP
// end ;
21314: PPOPN 2
21316: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21317: LD_EXP 37
21321: PUSH
21322: LD_EXP 47
21326: AND
21327: IFFALSE 21347
21329: GO 21331
21331: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21332: LD_INT 32
21334: PPUSH
21335: LD_OWVAR 2
21339: PPUSH
21340: LD_INT 0
21342: PPUSH
21343: CALL_OW 324
21347: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21348: LD_EXP 37
21352: PUSH
21353: LD_EXP 48
21357: AND
21358: IFFALSE 21539
21360: GO 21362
21362: DISABLE
21363: LD_INT 0
21365: PPUSH
21366: PPUSH
21367: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21368: LD_ADDR_VAR 0 2
21372: PUSH
21373: LD_INT 22
21375: PUSH
21376: LD_OWVAR 2
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PUSH
21385: LD_INT 33
21387: PUSH
21388: LD_INT 3
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PPUSH
21399: CALL_OW 69
21403: ST_TO_ADDR
// if not tmp then
21404: LD_VAR 0 2
21408: NOT
21409: IFFALSE 21413
// exit ;
21411: GO 21539
// side := 0 ;
21413: LD_ADDR_VAR 0 3
21417: PUSH
21418: LD_INT 0
21420: ST_TO_ADDR
// for i := 1 to 8 do
21421: LD_ADDR_VAR 0 1
21425: PUSH
21426: DOUBLE
21427: LD_INT 1
21429: DEC
21430: ST_TO_ADDR
21431: LD_INT 8
21433: PUSH
21434: FOR_TO
21435: IFFALSE 21483
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21437: LD_OWVAR 2
21441: PUSH
21442: LD_VAR 0 1
21446: NONEQUAL
21447: PUSH
21448: LD_OWVAR 2
21452: PPUSH
21453: LD_VAR 0 1
21457: PPUSH
21458: CALL_OW 81
21462: PUSH
21463: LD_INT 2
21465: EQUAL
21466: AND
21467: IFFALSE 21481
// begin side := i ;
21469: LD_ADDR_VAR 0 3
21473: PUSH
21474: LD_VAR 0 1
21478: ST_TO_ADDR
// break ;
21479: GO 21483
// end ;
21481: GO 21434
21483: POP
21484: POP
// if not side then
21485: LD_VAR 0 3
21489: NOT
21490: IFFALSE 21494
// exit ;
21492: GO 21539
// for i := 1 to tmp do
21494: LD_ADDR_VAR 0 1
21498: PUSH
21499: DOUBLE
21500: LD_INT 1
21502: DEC
21503: ST_TO_ADDR
21504: LD_VAR 0 2
21508: PUSH
21509: FOR_TO
21510: IFFALSE 21537
// if Prob ( 60 ) then
21512: LD_INT 60
21514: PPUSH
21515: CALL_OW 13
21519: IFFALSE 21535
// SetSide ( i , side ) ;
21521: LD_VAR 0 1
21525: PPUSH
21526: LD_VAR 0 3
21530: PPUSH
21531: CALL_OW 235
21535: GO 21509
21537: POP
21538: POP
// end ;
21539: PPOPN 3
21541: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21542: LD_EXP 37
21546: PUSH
21547: LD_EXP 50
21551: AND
21552: IFFALSE 21671
21554: GO 21556
21556: DISABLE
21557: LD_INT 0
21559: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21560: LD_ADDR_VAR 0 1
21564: PUSH
21565: LD_INT 22
21567: PUSH
21568: LD_OWVAR 2
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: PUSH
21577: LD_INT 21
21579: PUSH
21580: LD_INT 1
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 3
21589: PUSH
21590: LD_INT 23
21592: PUSH
21593: LD_INT 0
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: LIST
21608: PPUSH
21609: CALL_OW 69
21613: PUSH
21614: FOR_IN
21615: IFFALSE 21669
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21617: LD_VAR 0 1
21621: PPUSH
21622: CALL_OW 257
21626: PUSH
21627: LD_INT 1
21629: PUSH
21630: LD_INT 2
21632: PUSH
21633: LD_INT 3
21635: PUSH
21636: LD_INT 4
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: IN
21645: IFFALSE 21667
// SetClass ( un , rand ( 1 , 4 ) ) ;
21647: LD_VAR 0 1
21651: PPUSH
21652: LD_INT 1
21654: PPUSH
21655: LD_INT 4
21657: PPUSH
21658: CALL_OW 12
21662: PPUSH
21663: CALL_OW 336
21667: GO 21614
21669: POP
21670: POP
// end ;
21671: PPOPN 1
21673: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21674: LD_EXP 37
21678: PUSH
21679: LD_EXP 49
21683: AND
21684: IFFALSE 21763
21686: GO 21688
21688: DISABLE
21689: LD_INT 0
21691: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21692: LD_ADDR_VAR 0 1
21696: PUSH
21697: LD_INT 22
21699: PUSH
21700: LD_OWVAR 2
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 21
21711: PUSH
21712: LD_INT 3
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: PPUSH
21723: CALL_OW 69
21727: ST_TO_ADDR
// if not tmp then
21728: LD_VAR 0 1
21732: NOT
21733: IFFALSE 21737
// exit ;
21735: GO 21763
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21737: LD_VAR 0 1
21741: PUSH
21742: LD_INT 1
21744: PPUSH
21745: LD_VAR 0 1
21749: PPUSH
21750: CALL_OW 12
21754: ARRAY
21755: PPUSH
21756: LD_INT 100
21758: PPUSH
21759: CALL_OW 234
// end ;
21763: PPOPN 1
21765: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21766: LD_EXP 37
21770: PUSH
21771: LD_EXP 51
21775: AND
21776: IFFALSE 21874
21778: GO 21780
21780: DISABLE
21781: LD_INT 0
21783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21784: LD_ADDR_VAR 0 1
21788: PUSH
21789: LD_INT 22
21791: PUSH
21792: LD_OWVAR 2
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: PUSH
21801: LD_INT 21
21803: PUSH
21804: LD_INT 1
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PPUSH
21815: CALL_OW 69
21819: ST_TO_ADDR
// if not tmp then
21820: LD_VAR 0 1
21824: NOT
21825: IFFALSE 21829
// exit ;
21827: GO 21874
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
21829: LD_VAR 0 1
21833: PUSH
21834: LD_INT 1
21836: PPUSH
21837: LD_VAR 0 1
21841: PPUSH
21842: CALL_OW 12
21846: ARRAY
21847: PPUSH
21848: LD_INT 1
21850: PPUSH
21851: LD_INT 4
21853: PPUSH
21854: CALL_OW 12
21858: PPUSH
21859: LD_INT 3000
21861: PPUSH
21862: LD_INT 9000
21864: PPUSH
21865: CALL_OW 12
21869: PPUSH
21870: CALL_OW 492
// end ;
21874: PPOPN 1
21876: END
// every 0 0$1 trigger StreamModeActive and sDepot do
21877: LD_EXP 37
21881: PUSH
21882: LD_EXP 52
21886: AND
21887: IFFALSE 21907
21889: GO 21891
21891: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
21892: LD_INT 1
21894: PPUSH
21895: LD_OWVAR 2
21899: PPUSH
21900: LD_INT 0
21902: PPUSH
21903: CALL_OW 324
21907: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
21908: LD_EXP 37
21912: PUSH
21913: LD_EXP 53
21917: AND
21918: IFFALSE 22001
21920: GO 21922
21922: DISABLE
21923: LD_INT 0
21925: PPUSH
21926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21927: LD_ADDR_VAR 0 2
21931: PUSH
21932: LD_INT 22
21934: PUSH
21935: LD_OWVAR 2
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PUSH
21944: LD_INT 21
21946: PUSH
21947: LD_INT 3
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PPUSH
21958: CALL_OW 69
21962: ST_TO_ADDR
// if not tmp then
21963: LD_VAR 0 2
21967: NOT
21968: IFFALSE 21972
// exit ;
21970: GO 22001
// for i in tmp do
21972: LD_ADDR_VAR 0 1
21976: PUSH
21977: LD_VAR 0 2
21981: PUSH
21982: FOR_IN
21983: IFFALSE 21999
// SetBLevel ( i , 10 ) ;
21985: LD_VAR 0 1
21989: PPUSH
21990: LD_INT 10
21992: PPUSH
21993: CALL_OW 241
21997: GO 21982
21999: POP
22000: POP
// end ;
22001: PPOPN 2
22003: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22004: LD_EXP 37
22008: PUSH
22009: LD_EXP 54
22013: AND
22014: IFFALSE 22125
22016: GO 22018
22018: DISABLE
22019: LD_INT 0
22021: PPUSH
22022: PPUSH
22023: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22024: LD_ADDR_VAR 0 3
22028: PUSH
22029: LD_INT 22
22031: PUSH
22032: LD_OWVAR 2
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PUSH
22041: LD_INT 25
22043: PUSH
22044: LD_INT 1
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: PPUSH
22055: CALL_OW 69
22059: ST_TO_ADDR
// if not tmp then
22060: LD_VAR 0 3
22064: NOT
22065: IFFALSE 22069
// exit ;
22067: GO 22125
// un := tmp [ rand ( 1 , tmp ) ] ;
22069: LD_ADDR_VAR 0 2
22073: PUSH
22074: LD_VAR 0 3
22078: PUSH
22079: LD_INT 1
22081: PPUSH
22082: LD_VAR 0 3
22086: PPUSH
22087: CALL_OW 12
22091: ARRAY
22092: ST_TO_ADDR
// if Crawls ( un ) then
22093: LD_VAR 0 2
22097: PPUSH
22098: CALL_OW 318
22102: IFFALSE 22113
// ComWalk ( un ) ;
22104: LD_VAR 0 2
22108: PPUSH
22109: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22113: LD_VAR 0 2
22117: PPUSH
22118: LD_INT 5
22120: PPUSH
22121: CALL_OW 336
// end ;
22125: PPOPN 3
22127: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
22128: LD_EXP 37
22132: PUSH
22133: LD_EXP 55
22137: AND
22138: PUSH
22139: LD_OWVAR 67
22143: PUSH
22144: LD_INT 4
22146: LESS
22147: AND
22148: IFFALSE 22167
22150: GO 22152
22152: DISABLE
// begin Difficulty := Difficulty + 1 ;
22153: LD_ADDR_OWVAR 67
22157: PUSH
22158: LD_OWVAR 67
22162: PUSH
22163: LD_INT 1
22165: PLUS
22166: ST_TO_ADDR
// end ;
22167: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22168: LD_EXP 37
22172: PUSH
22173: LD_EXP 56
22177: AND
22178: IFFALSE 22281
22180: GO 22182
22182: DISABLE
22183: LD_INT 0
22185: PPUSH
// begin for i := 1 to 5 do
22186: LD_ADDR_VAR 0 1
22190: PUSH
22191: DOUBLE
22192: LD_INT 1
22194: DEC
22195: ST_TO_ADDR
22196: LD_INT 5
22198: PUSH
22199: FOR_TO
22200: IFFALSE 22279
// begin uc_nation := nation_nature ;
22202: LD_ADDR_OWVAR 21
22206: PUSH
22207: LD_INT 0
22209: ST_TO_ADDR
// uc_side := 0 ;
22210: LD_ADDR_OWVAR 20
22214: PUSH
22215: LD_INT 0
22217: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22218: LD_ADDR_OWVAR 29
22222: PUSH
22223: LD_INT 12
22225: PUSH
22226: LD_INT 12
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: ST_TO_ADDR
// hc_agressivity := 20 ;
22233: LD_ADDR_OWVAR 35
22237: PUSH
22238: LD_INT 20
22240: ST_TO_ADDR
// hc_class := class_tiger ;
22241: LD_ADDR_OWVAR 28
22245: PUSH
22246: LD_INT 14
22248: ST_TO_ADDR
// hc_gallery :=  ;
22249: LD_ADDR_OWVAR 33
22253: PUSH
22254: LD_STRING 
22256: ST_TO_ADDR
// hc_name :=  ;
22257: LD_ADDR_OWVAR 26
22261: PUSH
22262: LD_STRING 
22264: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22265: CALL_OW 44
22269: PPUSH
22270: LD_INT 0
22272: PPUSH
22273: CALL_OW 51
// end ;
22277: GO 22199
22279: POP
22280: POP
// end ;
22281: PPOPN 1
22283: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22284: LD_EXP 37
22288: PUSH
22289: LD_EXP 57
22293: AND
22294: IFFALSE 22303
22296: GO 22298
22298: DISABLE
// StreamSibBomb ;
22299: CALL 22304 0 0
22303: END
// export function StreamSibBomb ; var i , x , y ; begin
22304: LD_INT 0
22306: PPUSH
22307: PPUSH
22308: PPUSH
22309: PPUSH
// result := false ;
22310: LD_ADDR_VAR 0 1
22314: PUSH
22315: LD_INT 0
22317: ST_TO_ADDR
// for i := 1 to 16 do
22318: LD_ADDR_VAR 0 2
22322: PUSH
22323: DOUBLE
22324: LD_INT 1
22326: DEC
22327: ST_TO_ADDR
22328: LD_INT 16
22330: PUSH
22331: FOR_TO
22332: IFFALSE 22531
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22334: LD_ADDR_VAR 0 3
22338: PUSH
22339: LD_INT 10
22341: PUSH
22342: LD_INT 20
22344: PUSH
22345: LD_INT 30
22347: PUSH
22348: LD_INT 40
22350: PUSH
22351: LD_INT 50
22353: PUSH
22354: LD_INT 60
22356: PUSH
22357: LD_INT 70
22359: PUSH
22360: LD_INT 80
22362: PUSH
22363: LD_INT 90
22365: PUSH
22366: LD_INT 100
22368: PUSH
22369: LD_INT 110
22371: PUSH
22372: LD_INT 120
22374: PUSH
22375: LD_INT 130
22377: PUSH
22378: LD_INT 140
22380: PUSH
22381: LD_INT 150
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: PUSH
22401: LD_INT 1
22403: PPUSH
22404: LD_INT 15
22406: PPUSH
22407: CALL_OW 12
22411: ARRAY
22412: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22413: LD_ADDR_VAR 0 4
22417: PUSH
22418: LD_INT 10
22420: PUSH
22421: LD_INT 20
22423: PUSH
22424: LD_INT 30
22426: PUSH
22427: LD_INT 40
22429: PUSH
22430: LD_INT 50
22432: PUSH
22433: LD_INT 60
22435: PUSH
22436: LD_INT 70
22438: PUSH
22439: LD_INT 80
22441: PUSH
22442: LD_INT 90
22444: PUSH
22445: LD_INT 100
22447: PUSH
22448: LD_INT 110
22450: PUSH
22451: LD_INT 120
22453: PUSH
22454: LD_INT 130
22456: PUSH
22457: LD_INT 140
22459: PUSH
22460: LD_INT 150
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: PUSH
22480: LD_INT 1
22482: PPUSH
22483: LD_INT 15
22485: PPUSH
22486: CALL_OW 12
22490: ARRAY
22491: ST_TO_ADDR
// if ValidHex ( x , y ) then
22492: LD_VAR 0 3
22496: PPUSH
22497: LD_VAR 0 4
22501: PPUSH
22502: CALL_OW 488
22506: IFFALSE 22529
// begin result := [ x , y ] ;
22508: LD_ADDR_VAR 0 1
22512: PUSH
22513: LD_VAR 0 3
22517: PUSH
22518: LD_VAR 0 4
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: ST_TO_ADDR
// break ;
22527: GO 22531
// end ; end ;
22529: GO 22331
22531: POP
22532: POP
// if result then
22533: LD_VAR 0 1
22537: IFFALSE 22597
// begin ToLua ( playSibBomb() ) ;
22539: LD_STRING playSibBomb()
22541: PPUSH
22542: CALL_OW 559
// wait ( 0 0$14 ) ;
22546: LD_INT 490
22548: PPUSH
22549: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22553: LD_VAR 0 1
22557: PUSH
22558: LD_INT 1
22560: ARRAY
22561: PPUSH
22562: LD_VAR 0 1
22566: PUSH
22567: LD_INT 2
22569: ARRAY
22570: PPUSH
22571: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22575: LD_VAR 0 1
22579: PUSH
22580: LD_INT 1
22582: ARRAY
22583: PPUSH
22584: LD_VAR 0 1
22588: PUSH
22589: LD_INT 2
22591: ARRAY
22592: PPUSH
22593: CALL_OW 429
// end ; end ;
22597: LD_VAR 0 1
22601: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22602: LD_EXP 37
22606: PUSH
22607: LD_EXP 59
22611: AND
22612: IFFALSE 22624
22614: GO 22616
22616: DISABLE
// YouLost (  ) ;
22617: LD_STRING 
22619: PPUSH
22620: CALL_OW 104
22624: END
// every 0 0$1 trigger StreamModeActive and sFog do
22625: LD_EXP 37
22629: PUSH
22630: LD_EXP 58
22634: AND
22635: IFFALSE 22649
22637: GO 22639
22639: DISABLE
// FogOff ( your_side ) ;
22640: LD_OWVAR 2
22644: PPUSH
22645: CALL_OW 344
22649: END
// every 0 0$1 trigger StreamModeActive and sSun do
22650: LD_EXP 37
22654: PUSH
22655: LD_EXP 60
22659: AND
22660: IFFALSE 22688
22662: GO 22664
22664: DISABLE
// begin solar_recharge_percent := 0 ;
22665: LD_ADDR_OWVAR 79
22669: PUSH
22670: LD_INT 0
22672: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22673: LD_INT 10500
22675: PPUSH
22676: CALL_OW 67
// solar_recharge_percent := 100 ;
22680: LD_ADDR_OWVAR 79
22684: PUSH
22685: LD_INT 100
22687: ST_TO_ADDR
// end ;
22688: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22689: LD_EXP 37
22693: PUSH
22694: LD_EXP 61
22698: AND
22699: IFFALSE 22938
22701: GO 22703
22703: DISABLE
22704: LD_INT 0
22706: PPUSH
22707: PPUSH
22708: PPUSH
// begin tmp := [ ] ;
22709: LD_ADDR_VAR 0 3
22713: PUSH
22714: EMPTY
22715: ST_TO_ADDR
// for i := 1 to 6 do
22716: LD_ADDR_VAR 0 1
22720: PUSH
22721: DOUBLE
22722: LD_INT 1
22724: DEC
22725: ST_TO_ADDR
22726: LD_INT 6
22728: PUSH
22729: FOR_TO
22730: IFFALSE 22835
// begin uc_nation := nation_nature ;
22732: LD_ADDR_OWVAR 21
22736: PUSH
22737: LD_INT 0
22739: ST_TO_ADDR
// uc_side := 0 ;
22740: LD_ADDR_OWVAR 20
22744: PUSH
22745: LD_INT 0
22747: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22748: LD_ADDR_OWVAR 29
22752: PUSH
22753: LD_INT 12
22755: PUSH
22756: LD_INT 12
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: ST_TO_ADDR
// hc_agressivity := 20 ;
22763: LD_ADDR_OWVAR 35
22767: PUSH
22768: LD_INT 20
22770: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22771: LD_ADDR_OWVAR 28
22775: PUSH
22776: LD_INT 17
22778: ST_TO_ADDR
// hc_gallery :=  ;
22779: LD_ADDR_OWVAR 33
22783: PUSH
22784: LD_STRING 
22786: ST_TO_ADDR
// hc_name :=  ;
22787: LD_ADDR_OWVAR 26
22791: PUSH
22792: LD_STRING 
22794: ST_TO_ADDR
// un := CreateHuman ;
22795: LD_ADDR_VAR 0 2
22799: PUSH
22800: CALL_OW 44
22804: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22805: LD_VAR 0 2
22809: PPUSH
22810: LD_INT 1
22812: PPUSH
22813: CALL_OW 51
// tmp := tmp ^ un ;
22817: LD_ADDR_VAR 0 3
22821: PUSH
22822: LD_VAR 0 3
22826: PUSH
22827: LD_VAR 0 2
22831: ADD
22832: ST_TO_ADDR
// end ;
22833: GO 22729
22835: POP
22836: POP
// repeat wait ( 0 0$1 ) ;
22837: LD_INT 35
22839: PPUSH
22840: CALL_OW 67
// for un in tmp do
22844: LD_ADDR_VAR 0 2
22848: PUSH
22849: LD_VAR 0 3
22853: PUSH
22854: FOR_IN
22855: IFFALSE 22929
// begin if IsDead ( un ) then
22857: LD_VAR 0 2
22861: PPUSH
22862: CALL_OW 301
22866: IFFALSE 22886
// begin tmp := tmp diff un ;
22868: LD_ADDR_VAR 0 3
22872: PUSH
22873: LD_VAR 0 3
22877: PUSH
22878: LD_VAR 0 2
22882: DIFF
22883: ST_TO_ADDR
// continue ;
22884: GO 22854
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
22886: LD_VAR 0 2
22890: PPUSH
22891: LD_INT 3
22893: PUSH
22894: LD_INT 22
22896: PUSH
22897: LD_INT 0
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PPUSH
22908: CALL_OW 69
22912: PPUSH
22913: LD_VAR 0 2
22917: PPUSH
22918: CALL_OW 74
22922: PPUSH
22923: CALL_OW 115
// end ;
22927: GO 22854
22929: POP
22930: POP
// until not tmp ;
22931: LD_VAR 0 3
22935: NOT
22936: IFFALSE 22837
// end ;
22938: PPOPN 3
22940: END
// every 0 0$1 trigger StreamModeActive and sTroll do
22941: LD_EXP 37
22945: PUSH
22946: LD_EXP 62
22950: AND
22951: IFFALSE 23005
22953: GO 22955
22955: DISABLE
// begin ToLua ( displayTroll(); ) ;
22956: LD_STRING displayTroll();
22958: PPUSH
22959: CALL_OW 559
// wait ( 3 3$00 ) ;
22963: LD_INT 6300
22965: PPUSH
22966: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22970: LD_STRING hideTroll();
22972: PPUSH
22973: CALL_OW 559
// wait ( 1 1$00 ) ;
22977: LD_INT 2100
22979: PPUSH
22980: CALL_OW 67
// ToLua ( displayTroll(); ) ;
22984: LD_STRING displayTroll();
22986: PPUSH
22987: CALL_OW 559
// wait ( 1 1$00 ) ;
22991: LD_INT 2100
22993: PPUSH
22994: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22998: LD_STRING hideTroll();
23000: PPUSH
23001: CALL_OW 559
// end ;
23005: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23006: LD_EXP 37
23010: PUSH
23011: LD_EXP 63
23015: AND
23016: IFFALSE 23079
23018: GO 23020
23020: DISABLE
23021: LD_INT 0
23023: PPUSH
// begin p := 0 ;
23024: LD_ADDR_VAR 0 1
23028: PUSH
23029: LD_INT 0
23031: ST_TO_ADDR
// repeat game_speed := 1 ;
23032: LD_ADDR_OWVAR 65
23036: PUSH
23037: LD_INT 1
23039: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23040: LD_INT 35
23042: PPUSH
23043: CALL_OW 67
// p := p + 1 ;
23047: LD_ADDR_VAR 0 1
23051: PUSH
23052: LD_VAR 0 1
23056: PUSH
23057: LD_INT 1
23059: PLUS
23060: ST_TO_ADDR
// until p >= 60 ;
23061: LD_VAR 0 1
23065: PUSH
23066: LD_INT 60
23068: GREATEREQUAL
23069: IFFALSE 23032
// game_speed := 4 ;
23071: LD_ADDR_OWVAR 65
23075: PUSH
23076: LD_INT 4
23078: ST_TO_ADDR
// end ;
23079: PPOPN 1
23081: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23082: LD_EXP 37
23086: PUSH
23087: LD_EXP 64
23091: AND
23092: IFFALSE 23238
23094: GO 23096
23096: DISABLE
23097: LD_INT 0
23099: PPUSH
23100: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23101: LD_ADDR_VAR 0 1
23105: PUSH
23106: LD_INT 22
23108: PUSH
23109: LD_OWVAR 2
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 2
23120: PUSH
23121: LD_INT 30
23123: PUSH
23124: LD_INT 0
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: LD_INT 30
23133: PUSH
23134: LD_INT 1
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: LIST
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PPUSH
23150: CALL_OW 69
23154: ST_TO_ADDR
// if not depot then
23155: LD_VAR 0 1
23159: NOT
23160: IFFALSE 23164
// exit ;
23162: GO 23238
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23164: LD_ADDR_VAR 0 2
23168: PUSH
23169: LD_VAR 0 1
23173: PUSH
23174: LD_INT 1
23176: PPUSH
23177: LD_VAR 0 1
23181: PPUSH
23182: CALL_OW 12
23186: ARRAY
23187: PPUSH
23188: CALL_OW 274
23192: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23193: LD_VAR 0 2
23197: PPUSH
23198: LD_INT 1
23200: PPUSH
23201: LD_INT 0
23203: PPUSH
23204: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23208: LD_VAR 0 2
23212: PPUSH
23213: LD_INT 2
23215: PPUSH
23216: LD_INT 0
23218: PPUSH
23219: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23223: LD_VAR 0 2
23227: PPUSH
23228: LD_INT 3
23230: PPUSH
23231: LD_INT 0
23233: PPUSH
23234: CALL_OW 277
// end ;
23238: PPOPN 2
23240: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23241: LD_EXP 37
23245: PUSH
23246: LD_EXP 65
23250: AND
23251: IFFALSE 23348
23253: GO 23255
23255: DISABLE
23256: LD_INT 0
23258: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23259: LD_ADDR_VAR 0 1
23263: PUSH
23264: LD_INT 22
23266: PUSH
23267: LD_OWVAR 2
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 21
23278: PUSH
23279: LD_INT 1
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 3
23288: PUSH
23289: LD_INT 23
23291: PUSH
23292: LD_INT 0
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: LIST
23307: PPUSH
23308: CALL_OW 69
23312: ST_TO_ADDR
// if not tmp then
23313: LD_VAR 0 1
23317: NOT
23318: IFFALSE 23322
// exit ;
23320: GO 23348
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23322: LD_VAR 0 1
23326: PUSH
23327: LD_INT 1
23329: PPUSH
23330: LD_VAR 0 1
23334: PPUSH
23335: CALL_OW 12
23339: ARRAY
23340: PPUSH
23341: LD_INT 200
23343: PPUSH
23344: CALL_OW 234
// end ;
23348: PPOPN 1
23350: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23351: LD_EXP 37
23355: PUSH
23356: LD_EXP 66
23360: AND
23361: IFFALSE 23440
23363: GO 23365
23365: DISABLE
23366: LD_INT 0
23368: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23369: LD_ADDR_VAR 0 1
23373: PUSH
23374: LD_INT 22
23376: PUSH
23377: LD_OWVAR 2
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: LD_INT 21
23388: PUSH
23389: LD_INT 2
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PPUSH
23400: CALL_OW 69
23404: ST_TO_ADDR
// if not tmp then
23405: LD_VAR 0 1
23409: NOT
23410: IFFALSE 23414
// exit ;
23412: GO 23440
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23414: LD_VAR 0 1
23418: PUSH
23419: LD_INT 1
23421: PPUSH
23422: LD_VAR 0 1
23426: PPUSH
23427: CALL_OW 12
23431: ARRAY
23432: PPUSH
23433: LD_INT 60
23435: PPUSH
23436: CALL_OW 234
// end ;
23440: PPOPN 1
23442: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23443: LD_EXP 37
23447: PUSH
23448: LD_EXP 67
23452: AND
23453: IFFALSE 23552
23455: GO 23457
23457: DISABLE
23458: LD_INT 0
23460: PPUSH
23461: PPUSH
// begin enable ;
23462: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23463: LD_ADDR_VAR 0 1
23467: PUSH
23468: LD_INT 22
23470: PUSH
23471: LD_OWVAR 2
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: PUSH
23480: LD_INT 61
23482: PUSH
23483: EMPTY
23484: LIST
23485: PUSH
23486: LD_INT 33
23488: PUSH
23489: LD_INT 2
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: LIST
23500: PPUSH
23501: CALL_OW 69
23505: ST_TO_ADDR
// if not tmp then
23506: LD_VAR 0 1
23510: NOT
23511: IFFALSE 23515
// exit ;
23513: GO 23552
// for i in tmp do
23515: LD_ADDR_VAR 0 2
23519: PUSH
23520: LD_VAR 0 1
23524: PUSH
23525: FOR_IN
23526: IFFALSE 23550
// if IsControledBy ( i ) then
23528: LD_VAR 0 2
23532: PPUSH
23533: CALL_OW 312
23537: IFFALSE 23548
// ComUnlink ( i ) ;
23539: LD_VAR 0 2
23543: PPUSH
23544: CALL_OW 136
23548: GO 23525
23550: POP
23551: POP
// end ;
23552: PPOPN 2
23554: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23555: LD_EXP 37
23559: PUSH
23560: LD_EXP 68
23564: AND
23565: IFFALSE 23705
23567: GO 23569
23569: DISABLE
23570: LD_INT 0
23572: PPUSH
23573: PPUSH
// begin ToLua ( displayPowell(); ) ;
23574: LD_STRING displayPowell();
23576: PPUSH
23577: CALL_OW 559
// uc_side := 0 ;
23581: LD_ADDR_OWVAR 20
23585: PUSH
23586: LD_INT 0
23588: ST_TO_ADDR
// uc_nation := 2 ;
23589: LD_ADDR_OWVAR 21
23593: PUSH
23594: LD_INT 2
23596: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23597: LD_ADDR_OWVAR 37
23601: PUSH
23602: LD_INT 14
23604: ST_TO_ADDR
// vc_engine := engine_siberite ;
23605: LD_ADDR_OWVAR 39
23609: PUSH
23610: LD_INT 3
23612: ST_TO_ADDR
// vc_control := control_apeman ;
23613: LD_ADDR_OWVAR 38
23617: PUSH
23618: LD_INT 5
23620: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23621: LD_ADDR_OWVAR 40
23625: PUSH
23626: LD_INT 29
23628: ST_TO_ADDR
// un := CreateVehicle ;
23629: LD_ADDR_VAR 0 2
23633: PUSH
23634: CALL_OW 45
23638: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23639: LD_VAR 0 2
23643: PPUSH
23644: LD_INT 1
23646: PPUSH
23647: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23651: LD_INT 35
23653: PPUSH
23654: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23658: LD_VAR 0 2
23662: PPUSH
23663: LD_INT 22
23665: PUSH
23666: LD_OWVAR 2
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PPUSH
23675: CALL_OW 69
23679: PPUSH
23680: LD_VAR 0 2
23684: PPUSH
23685: CALL_OW 74
23689: PPUSH
23690: CALL_OW 115
// until IsDead ( un ) ;
23694: LD_VAR 0 2
23698: PPUSH
23699: CALL_OW 301
23703: IFFALSE 23651
// end ;
23705: PPOPN 2
23707: END
// every 0 0$1 trigger StreamModeActive and sStu do
23708: LD_EXP 37
23712: PUSH
23713: LD_EXP 76
23717: AND
23718: IFFALSE 23734
23720: GO 23722
23722: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23723: LD_STRING displayStucuk();
23725: PPUSH
23726: CALL_OW 559
// ResetFog ;
23730: CALL_OW 335
// end ;
23734: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23735: LD_EXP 37
23739: PUSH
23740: LD_EXP 69
23744: AND
23745: IFFALSE 23886
23747: GO 23749
23749: DISABLE
23750: LD_INT 0
23752: PPUSH
23753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23754: LD_ADDR_VAR 0 2
23758: PUSH
23759: LD_INT 22
23761: PUSH
23762: LD_OWVAR 2
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: LD_INT 21
23773: PUSH
23774: LD_INT 1
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: PPUSH
23785: CALL_OW 69
23789: ST_TO_ADDR
// if not tmp then
23790: LD_VAR 0 2
23794: NOT
23795: IFFALSE 23799
// exit ;
23797: GO 23886
// un := tmp [ rand ( 1 , tmp ) ] ;
23799: LD_ADDR_VAR 0 1
23803: PUSH
23804: LD_VAR 0 2
23808: PUSH
23809: LD_INT 1
23811: PPUSH
23812: LD_VAR 0 2
23816: PPUSH
23817: CALL_OW 12
23821: ARRAY
23822: ST_TO_ADDR
// SetSide ( un , 0 ) ;
23823: LD_VAR 0 1
23827: PPUSH
23828: LD_INT 0
23830: PPUSH
23831: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
23835: LD_VAR 0 1
23839: PPUSH
23840: LD_OWVAR 3
23844: PUSH
23845: LD_VAR 0 1
23849: DIFF
23850: PPUSH
23851: LD_VAR 0 1
23855: PPUSH
23856: CALL_OW 74
23860: PPUSH
23861: CALL_OW 115
// wait ( 0 0$20 ) ;
23865: LD_INT 700
23867: PPUSH
23868: CALL_OW 67
// SetSide ( un , your_side ) ;
23872: LD_VAR 0 1
23876: PPUSH
23877: LD_OWVAR 2
23881: PPUSH
23882: CALL_OW 235
// end ;
23886: PPOPN 2
23888: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
23889: LD_EXP 37
23893: PUSH
23894: LD_EXP 70
23898: AND
23899: IFFALSE 24005
23901: GO 23903
23903: DISABLE
23904: LD_INT 0
23906: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23907: LD_ADDR_VAR 0 1
23911: PUSH
23912: LD_INT 22
23914: PUSH
23915: LD_OWVAR 2
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: LD_INT 2
23926: PUSH
23927: LD_INT 30
23929: PUSH
23930: LD_INT 0
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: LD_INT 30
23939: PUSH
23940: LD_INT 1
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: LIST
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PPUSH
23956: CALL_OW 69
23960: ST_TO_ADDR
// if not depot then
23961: LD_VAR 0 1
23965: NOT
23966: IFFALSE 23970
// exit ;
23968: GO 24005
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
23970: LD_VAR 0 1
23974: PUSH
23975: LD_INT 1
23977: ARRAY
23978: PPUSH
23979: CALL_OW 250
23983: PPUSH
23984: LD_VAR 0 1
23988: PUSH
23989: LD_INT 1
23991: ARRAY
23992: PPUSH
23993: CALL_OW 251
23997: PPUSH
23998: LD_INT 70
24000: PPUSH
24001: CALL_OW 495
// end ;
24005: PPOPN 1
24007: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24008: LD_EXP 37
24012: PUSH
24013: LD_EXP 71
24017: AND
24018: IFFALSE 24229
24020: GO 24022
24022: DISABLE
24023: LD_INT 0
24025: PPUSH
24026: PPUSH
24027: PPUSH
24028: PPUSH
24029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24030: LD_ADDR_VAR 0 5
24034: PUSH
24035: LD_INT 22
24037: PUSH
24038: LD_OWVAR 2
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: LD_INT 21
24049: PUSH
24050: LD_INT 1
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: PPUSH
24061: CALL_OW 69
24065: ST_TO_ADDR
// if not tmp then
24066: LD_VAR 0 5
24070: NOT
24071: IFFALSE 24075
// exit ;
24073: GO 24229
// for i in tmp do
24075: LD_ADDR_VAR 0 1
24079: PUSH
24080: LD_VAR 0 5
24084: PUSH
24085: FOR_IN
24086: IFFALSE 24227
// begin d := rand ( 0 , 5 ) ;
24088: LD_ADDR_VAR 0 4
24092: PUSH
24093: LD_INT 0
24095: PPUSH
24096: LD_INT 5
24098: PPUSH
24099: CALL_OW 12
24103: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24104: LD_ADDR_VAR 0 2
24108: PUSH
24109: LD_VAR 0 1
24113: PPUSH
24114: CALL_OW 250
24118: PPUSH
24119: LD_VAR 0 4
24123: PPUSH
24124: LD_INT 3
24126: PPUSH
24127: LD_INT 12
24129: PPUSH
24130: CALL_OW 12
24134: PPUSH
24135: CALL_OW 272
24139: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24140: LD_ADDR_VAR 0 3
24144: PUSH
24145: LD_VAR 0 1
24149: PPUSH
24150: CALL_OW 251
24154: PPUSH
24155: LD_VAR 0 4
24159: PPUSH
24160: LD_INT 3
24162: PPUSH
24163: LD_INT 12
24165: PPUSH
24166: CALL_OW 12
24170: PPUSH
24171: CALL_OW 273
24175: ST_TO_ADDR
// if ValidHex ( x , y ) then
24176: LD_VAR 0 2
24180: PPUSH
24181: LD_VAR 0 3
24185: PPUSH
24186: CALL_OW 488
24190: IFFALSE 24225
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24192: LD_VAR 0 1
24196: PPUSH
24197: LD_VAR 0 2
24201: PPUSH
24202: LD_VAR 0 3
24206: PPUSH
24207: LD_INT 3
24209: PPUSH
24210: LD_INT 6
24212: PPUSH
24213: CALL_OW 12
24217: PPUSH
24218: LD_INT 1
24220: PPUSH
24221: CALL_OW 483
// end ;
24225: GO 24085
24227: POP
24228: POP
// end ;
24229: PPOPN 5
24231: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24232: LD_EXP 37
24236: PUSH
24237: LD_EXP 72
24241: AND
24242: IFFALSE 24336
24244: GO 24246
24246: DISABLE
24247: LD_INT 0
24249: PPUSH
24250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24251: LD_ADDR_VAR 0 2
24255: PUSH
24256: LD_INT 22
24258: PUSH
24259: LD_OWVAR 2
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 32
24270: PUSH
24271: LD_INT 1
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 21
24280: PUSH
24281: LD_INT 2
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: LIST
24292: PPUSH
24293: CALL_OW 69
24297: ST_TO_ADDR
// if not tmp then
24298: LD_VAR 0 2
24302: NOT
24303: IFFALSE 24307
// exit ;
24305: GO 24336
// for i in tmp do
24307: LD_ADDR_VAR 0 1
24311: PUSH
24312: LD_VAR 0 2
24316: PUSH
24317: FOR_IN
24318: IFFALSE 24334
// SetFuel ( i , 0 ) ;
24320: LD_VAR 0 1
24324: PPUSH
24325: LD_INT 0
24327: PPUSH
24328: CALL_OW 240
24332: GO 24317
24334: POP
24335: POP
// end ;
24336: PPOPN 2
24338: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24339: LD_EXP 37
24343: PUSH
24344: LD_EXP 73
24348: AND
24349: IFFALSE 24415
24351: GO 24353
24353: DISABLE
24354: LD_INT 0
24356: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24357: LD_ADDR_VAR 0 1
24361: PUSH
24362: LD_INT 22
24364: PUSH
24365: LD_OWVAR 2
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: LD_INT 30
24376: PUSH
24377: LD_INT 29
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PPUSH
24388: CALL_OW 69
24392: ST_TO_ADDR
// if not tmp then
24393: LD_VAR 0 1
24397: NOT
24398: IFFALSE 24402
// exit ;
24400: GO 24415
// DestroyUnit ( tmp [ 1 ] ) ;
24402: LD_VAR 0 1
24406: PUSH
24407: LD_INT 1
24409: ARRAY
24410: PPUSH
24411: CALL_OW 65
// end ;
24415: PPOPN 1
24417: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24418: LD_EXP 37
24422: PUSH
24423: LD_EXP 75
24427: AND
24428: IFFALSE 24557
24430: GO 24432
24432: DISABLE
24433: LD_INT 0
24435: PPUSH
// begin uc_side := 0 ;
24436: LD_ADDR_OWVAR 20
24440: PUSH
24441: LD_INT 0
24443: ST_TO_ADDR
// uc_nation := nation_arabian ;
24444: LD_ADDR_OWVAR 21
24448: PUSH
24449: LD_INT 2
24451: ST_TO_ADDR
// hc_gallery :=  ;
24452: LD_ADDR_OWVAR 33
24456: PUSH
24457: LD_STRING 
24459: ST_TO_ADDR
// hc_name :=  ;
24460: LD_ADDR_OWVAR 26
24464: PUSH
24465: LD_STRING 
24467: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24468: LD_INT 1
24470: PPUSH
24471: LD_INT 11
24473: PPUSH
24474: LD_INT 10
24476: PPUSH
24477: CALL_OW 380
// un := CreateHuman ;
24481: LD_ADDR_VAR 0 1
24485: PUSH
24486: CALL_OW 44
24490: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24491: LD_VAR 0 1
24495: PPUSH
24496: LD_INT 1
24498: PPUSH
24499: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24503: LD_INT 35
24505: PPUSH
24506: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24510: LD_VAR 0 1
24514: PPUSH
24515: LD_INT 22
24517: PUSH
24518: LD_OWVAR 2
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PPUSH
24527: CALL_OW 69
24531: PPUSH
24532: LD_VAR 0 1
24536: PPUSH
24537: CALL_OW 74
24541: PPUSH
24542: CALL_OW 115
// until IsDead ( un ) ;
24546: LD_VAR 0 1
24550: PPUSH
24551: CALL_OW 301
24555: IFFALSE 24503
// end ;
24557: PPOPN 1
24559: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24560: LD_EXP 37
24564: PUSH
24565: LD_EXP 77
24569: AND
24570: IFFALSE 24582
24572: GO 24574
24574: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24575: LD_STRING earthquake(getX(game), 0, 32)
24577: PPUSH
24578: CALL_OW 559
24582: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24583: LD_EXP 37
24587: PUSH
24588: LD_EXP 78
24592: AND
24593: IFFALSE 24684
24595: GO 24597
24597: DISABLE
24598: LD_INT 0
24600: PPUSH
// begin enable ;
24601: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24602: LD_ADDR_VAR 0 1
24606: PUSH
24607: LD_INT 22
24609: PUSH
24610: LD_OWVAR 2
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 21
24621: PUSH
24622: LD_INT 2
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PUSH
24629: LD_INT 33
24631: PUSH
24632: LD_INT 3
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: LIST
24643: PPUSH
24644: CALL_OW 69
24648: ST_TO_ADDR
// if not tmp then
24649: LD_VAR 0 1
24653: NOT
24654: IFFALSE 24658
// exit ;
24656: GO 24684
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24658: LD_VAR 0 1
24662: PUSH
24663: LD_INT 1
24665: PPUSH
24666: LD_VAR 0 1
24670: PPUSH
24671: CALL_OW 12
24675: ARRAY
24676: PPUSH
24677: LD_INT 1
24679: PPUSH
24680: CALL_OW 234
// end ;
24684: PPOPN 1
24686: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24687: LD_EXP 37
24691: PUSH
24692: LD_EXP 79
24696: AND
24697: IFFALSE 24838
24699: GO 24701
24701: DISABLE
24702: LD_INT 0
24704: PPUSH
24705: PPUSH
24706: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24707: LD_ADDR_VAR 0 3
24711: PUSH
24712: LD_INT 22
24714: PUSH
24715: LD_OWVAR 2
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: LD_INT 25
24726: PUSH
24727: LD_INT 1
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: PPUSH
24738: CALL_OW 69
24742: ST_TO_ADDR
// if not tmp then
24743: LD_VAR 0 3
24747: NOT
24748: IFFALSE 24752
// exit ;
24750: GO 24838
// un := tmp [ rand ( 1 , tmp ) ] ;
24752: LD_ADDR_VAR 0 2
24756: PUSH
24757: LD_VAR 0 3
24761: PUSH
24762: LD_INT 1
24764: PPUSH
24765: LD_VAR 0 3
24769: PPUSH
24770: CALL_OW 12
24774: ARRAY
24775: ST_TO_ADDR
// if Crawls ( un ) then
24776: LD_VAR 0 2
24780: PPUSH
24781: CALL_OW 318
24785: IFFALSE 24796
// ComWalk ( un ) ;
24787: LD_VAR 0 2
24791: PPUSH
24792: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24796: LD_VAR 0 2
24800: PPUSH
24801: LD_INT 9
24803: PPUSH
24804: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24808: LD_INT 28
24810: PPUSH
24811: LD_OWVAR 2
24815: PPUSH
24816: LD_INT 2
24818: PPUSH
24819: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
24823: LD_INT 29
24825: PPUSH
24826: LD_OWVAR 2
24830: PPUSH
24831: LD_INT 2
24833: PPUSH
24834: CALL_OW 322
// end ;
24838: PPOPN 3
24840: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
24841: LD_EXP 37
24845: PUSH
24846: LD_EXP 80
24850: AND
24851: IFFALSE 24962
24853: GO 24855
24855: DISABLE
24856: LD_INT 0
24858: PPUSH
24859: PPUSH
24860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24861: LD_ADDR_VAR 0 3
24865: PUSH
24866: LD_INT 22
24868: PUSH
24869: LD_OWVAR 2
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 25
24880: PUSH
24881: LD_INT 1
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PPUSH
24892: CALL_OW 69
24896: ST_TO_ADDR
// if not tmp then
24897: LD_VAR 0 3
24901: NOT
24902: IFFALSE 24906
// exit ;
24904: GO 24962
// un := tmp [ rand ( 1 , tmp ) ] ;
24906: LD_ADDR_VAR 0 2
24910: PUSH
24911: LD_VAR 0 3
24915: PUSH
24916: LD_INT 1
24918: PPUSH
24919: LD_VAR 0 3
24923: PPUSH
24924: CALL_OW 12
24928: ARRAY
24929: ST_TO_ADDR
// if Crawls ( un ) then
24930: LD_VAR 0 2
24934: PPUSH
24935: CALL_OW 318
24939: IFFALSE 24950
// ComWalk ( un ) ;
24941: LD_VAR 0 2
24945: PPUSH
24946: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24950: LD_VAR 0 2
24954: PPUSH
24955: LD_INT 8
24957: PPUSH
24958: CALL_OW 336
// end ;
24962: PPOPN 3
24964: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
24965: LD_EXP 37
24969: PUSH
24970: LD_EXP 81
24974: AND
24975: IFFALSE 25119
24977: GO 24979
24979: DISABLE
24980: LD_INT 0
24982: PPUSH
24983: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
24984: LD_ADDR_VAR 0 2
24988: PUSH
24989: LD_INT 22
24991: PUSH
24992: LD_OWVAR 2
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 21
25003: PUSH
25004: LD_INT 2
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: LD_INT 2
25013: PUSH
25014: LD_INT 34
25016: PUSH
25017: LD_INT 12
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: LD_INT 34
25026: PUSH
25027: LD_INT 51
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: LD_INT 34
25036: PUSH
25037: LD_INT 32
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: LIST
25054: PPUSH
25055: CALL_OW 69
25059: ST_TO_ADDR
// if not tmp then
25060: LD_VAR 0 2
25064: NOT
25065: IFFALSE 25069
// exit ;
25067: GO 25119
// for i in tmp do
25069: LD_ADDR_VAR 0 1
25073: PUSH
25074: LD_VAR 0 2
25078: PUSH
25079: FOR_IN
25080: IFFALSE 25117
// if GetCargo ( i , mat_artifact ) = 0 then
25082: LD_VAR 0 1
25086: PPUSH
25087: LD_INT 4
25089: PPUSH
25090: CALL_OW 289
25094: PUSH
25095: LD_INT 0
25097: EQUAL
25098: IFFALSE 25115
// SetCargo ( i , mat_siberit , 100 ) ;
25100: LD_VAR 0 1
25104: PPUSH
25105: LD_INT 3
25107: PPUSH
25108: LD_INT 100
25110: PPUSH
25111: CALL_OW 290
25115: GO 25079
25117: POP
25118: POP
// end ;
25119: PPOPN 2
25121: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25122: LD_EXP 37
25126: PUSH
25127: LD_EXP 82
25131: AND
25132: IFFALSE 25315
25134: GO 25136
25136: DISABLE
25137: LD_INT 0
25139: PPUSH
25140: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25141: LD_ADDR_VAR 0 2
25145: PUSH
25146: LD_INT 22
25148: PUSH
25149: LD_OWVAR 2
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PPUSH
25158: CALL_OW 69
25162: ST_TO_ADDR
// if not tmp then
25163: LD_VAR 0 2
25167: NOT
25168: IFFALSE 25172
// exit ;
25170: GO 25315
// for i := 1 to 2 do
25172: LD_ADDR_VAR 0 1
25176: PUSH
25177: DOUBLE
25178: LD_INT 1
25180: DEC
25181: ST_TO_ADDR
25182: LD_INT 2
25184: PUSH
25185: FOR_TO
25186: IFFALSE 25313
// begin uc_side := your_side ;
25188: LD_ADDR_OWVAR 20
25192: PUSH
25193: LD_OWVAR 2
25197: ST_TO_ADDR
// uc_nation := nation_american ;
25198: LD_ADDR_OWVAR 21
25202: PUSH
25203: LD_INT 1
25205: ST_TO_ADDR
// vc_chassis := us_morphling ;
25206: LD_ADDR_OWVAR 37
25210: PUSH
25211: LD_INT 5
25213: ST_TO_ADDR
// vc_engine := engine_siberite ;
25214: LD_ADDR_OWVAR 39
25218: PUSH
25219: LD_INT 3
25221: ST_TO_ADDR
// vc_control := control_computer ;
25222: LD_ADDR_OWVAR 38
25226: PUSH
25227: LD_INT 3
25229: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25230: LD_ADDR_OWVAR 40
25234: PUSH
25235: LD_INT 10
25237: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25238: LD_VAR 0 2
25242: PUSH
25243: LD_INT 1
25245: ARRAY
25246: PPUSH
25247: CALL_OW 310
25251: NOT
25252: IFFALSE 25299
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25254: CALL_OW 45
25258: PPUSH
25259: LD_VAR 0 2
25263: PUSH
25264: LD_INT 1
25266: ARRAY
25267: PPUSH
25268: CALL_OW 250
25272: PPUSH
25273: LD_VAR 0 2
25277: PUSH
25278: LD_INT 1
25280: ARRAY
25281: PPUSH
25282: CALL_OW 251
25286: PPUSH
25287: LD_INT 12
25289: PPUSH
25290: LD_INT 1
25292: PPUSH
25293: CALL_OW 50
25297: GO 25311
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25299: CALL_OW 45
25303: PPUSH
25304: LD_INT 1
25306: PPUSH
25307: CALL_OW 51
// end ;
25311: GO 25185
25313: POP
25314: POP
// end ;
25315: PPOPN 2
25317: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25318: LD_EXP 37
25322: PUSH
25323: LD_EXP 83
25327: AND
25328: IFFALSE 25550
25330: GO 25332
25332: DISABLE
25333: LD_INT 0
25335: PPUSH
25336: PPUSH
25337: PPUSH
25338: PPUSH
25339: PPUSH
25340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25341: LD_ADDR_VAR 0 6
25345: PUSH
25346: LD_INT 22
25348: PUSH
25349: LD_OWVAR 2
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: LD_INT 21
25360: PUSH
25361: LD_INT 1
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 3
25370: PUSH
25371: LD_INT 23
25373: PUSH
25374: LD_INT 0
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: LIST
25389: PPUSH
25390: CALL_OW 69
25394: ST_TO_ADDR
// if not tmp then
25395: LD_VAR 0 6
25399: NOT
25400: IFFALSE 25404
// exit ;
25402: GO 25550
// s1 := rand ( 1 , 4 ) ;
25404: LD_ADDR_VAR 0 2
25408: PUSH
25409: LD_INT 1
25411: PPUSH
25412: LD_INT 4
25414: PPUSH
25415: CALL_OW 12
25419: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25420: LD_ADDR_VAR 0 4
25424: PUSH
25425: LD_VAR 0 6
25429: PUSH
25430: LD_INT 1
25432: ARRAY
25433: PPUSH
25434: LD_VAR 0 2
25438: PPUSH
25439: CALL_OW 259
25443: ST_TO_ADDR
// if s1 = 1 then
25444: LD_VAR 0 2
25448: PUSH
25449: LD_INT 1
25451: EQUAL
25452: IFFALSE 25472
// s2 := rand ( 2 , 4 ) else
25454: LD_ADDR_VAR 0 3
25458: PUSH
25459: LD_INT 2
25461: PPUSH
25462: LD_INT 4
25464: PPUSH
25465: CALL_OW 12
25469: ST_TO_ADDR
25470: GO 25480
// s2 := 1 ;
25472: LD_ADDR_VAR 0 3
25476: PUSH
25477: LD_INT 1
25479: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25480: LD_ADDR_VAR 0 5
25484: PUSH
25485: LD_VAR 0 6
25489: PUSH
25490: LD_INT 1
25492: ARRAY
25493: PPUSH
25494: LD_VAR 0 3
25498: PPUSH
25499: CALL_OW 259
25503: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25504: LD_VAR 0 6
25508: PUSH
25509: LD_INT 1
25511: ARRAY
25512: PPUSH
25513: LD_VAR 0 2
25517: PPUSH
25518: LD_VAR 0 5
25522: PPUSH
25523: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25527: LD_VAR 0 6
25531: PUSH
25532: LD_INT 1
25534: ARRAY
25535: PPUSH
25536: LD_VAR 0 3
25540: PPUSH
25541: LD_VAR 0 4
25545: PPUSH
25546: CALL_OW 237
// end ;
25550: PPOPN 6
25552: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25553: LD_EXP 37
25557: PUSH
25558: LD_EXP 84
25562: AND
25563: IFFALSE 25642
25565: GO 25567
25567: DISABLE
25568: LD_INT 0
25570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25571: LD_ADDR_VAR 0 1
25575: PUSH
25576: LD_INT 22
25578: PUSH
25579: LD_OWVAR 2
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: LD_INT 30
25590: PUSH
25591: LD_INT 3
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PPUSH
25602: CALL_OW 69
25606: ST_TO_ADDR
// if not tmp then
25607: LD_VAR 0 1
25611: NOT
25612: IFFALSE 25616
// exit ;
25614: GO 25642
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25616: LD_VAR 0 1
25620: PUSH
25621: LD_INT 1
25623: PPUSH
25624: LD_VAR 0 1
25628: PPUSH
25629: CALL_OW 12
25633: ARRAY
25634: PPUSH
25635: LD_INT 1
25637: PPUSH
25638: CALL_OW 234
// end ;
25642: PPOPN 1
25644: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25645: LD_EXP 37
25649: PUSH
25650: LD_EXP 85
25654: AND
25655: IFFALSE 25767
25657: GO 25659
25659: DISABLE
25660: LD_INT 0
25662: PPUSH
25663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25664: LD_ADDR_VAR 0 2
25668: PUSH
25669: LD_INT 22
25671: PUSH
25672: LD_OWVAR 2
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: LD_INT 2
25683: PUSH
25684: LD_INT 30
25686: PUSH
25687: LD_INT 27
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 30
25696: PUSH
25697: LD_INT 26
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 30
25706: PUSH
25707: LD_INT 28
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PPUSH
25724: CALL_OW 69
25728: ST_TO_ADDR
// if not tmp then
25729: LD_VAR 0 2
25733: NOT
25734: IFFALSE 25738
// exit ;
25736: GO 25767
// for i in tmp do
25738: LD_ADDR_VAR 0 1
25742: PUSH
25743: LD_VAR 0 2
25747: PUSH
25748: FOR_IN
25749: IFFALSE 25765
// SetLives ( i , 1 ) ;
25751: LD_VAR 0 1
25755: PPUSH
25756: LD_INT 1
25758: PPUSH
25759: CALL_OW 234
25763: GO 25748
25765: POP
25766: POP
// end ;
25767: PPOPN 2
25769: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25770: LD_EXP 37
25774: PUSH
25775: LD_EXP 86
25779: AND
25780: IFFALSE 26067
25782: GO 25784
25784: DISABLE
25785: LD_INT 0
25787: PPUSH
25788: PPUSH
25789: PPUSH
// begin i := rand ( 1 , 7 ) ;
25790: LD_ADDR_VAR 0 1
25794: PUSH
25795: LD_INT 1
25797: PPUSH
25798: LD_INT 7
25800: PPUSH
25801: CALL_OW 12
25805: ST_TO_ADDR
// case i of 1 :
25806: LD_VAR 0 1
25810: PUSH
25811: LD_INT 1
25813: DOUBLE
25814: EQUAL
25815: IFTRUE 25819
25817: GO 25829
25819: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
25820: LD_STRING earthquake(getX(game), 0, 32)
25822: PPUSH
25823: CALL_OW 559
25827: GO 26067
25829: LD_INT 2
25831: DOUBLE
25832: EQUAL
25833: IFTRUE 25837
25835: GO 25851
25837: POP
// begin ToLua ( displayStucuk(); ) ;
25838: LD_STRING displayStucuk();
25840: PPUSH
25841: CALL_OW 559
// ResetFog ;
25845: CALL_OW 335
// end ; 3 :
25849: GO 26067
25851: LD_INT 3
25853: DOUBLE
25854: EQUAL
25855: IFTRUE 25859
25857: GO 25963
25859: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25860: LD_ADDR_VAR 0 2
25864: PUSH
25865: LD_INT 22
25867: PUSH
25868: LD_OWVAR 2
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PUSH
25877: LD_INT 25
25879: PUSH
25880: LD_INT 1
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PPUSH
25891: CALL_OW 69
25895: ST_TO_ADDR
// if not tmp then
25896: LD_VAR 0 2
25900: NOT
25901: IFFALSE 25905
// exit ;
25903: GO 26067
// un := tmp [ rand ( 1 , tmp ) ] ;
25905: LD_ADDR_VAR 0 3
25909: PUSH
25910: LD_VAR 0 2
25914: PUSH
25915: LD_INT 1
25917: PPUSH
25918: LD_VAR 0 2
25922: PPUSH
25923: CALL_OW 12
25927: ARRAY
25928: ST_TO_ADDR
// if Crawls ( un ) then
25929: LD_VAR 0 3
25933: PPUSH
25934: CALL_OW 318
25938: IFFALSE 25949
// ComWalk ( un ) ;
25940: LD_VAR 0 3
25944: PPUSH
25945: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25949: LD_VAR 0 3
25953: PPUSH
25954: LD_INT 8
25956: PPUSH
25957: CALL_OW 336
// end ; 4 :
25961: GO 26067
25963: LD_INT 4
25965: DOUBLE
25966: EQUAL
25967: IFTRUE 25971
25969: GO 26045
25971: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25972: LD_ADDR_VAR 0 2
25976: PUSH
25977: LD_INT 22
25979: PUSH
25980: LD_OWVAR 2
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: LD_INT 30
25991: PUSH
25992: LD_INT 29
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PPUSH
26003: CALL_OW 69
26007: ST_TO_ADDR
// if not tmp then
26008: LD_VAR 0 2
26012: NOT
26013: IFFALSE 26017
// exit ;
26015: GO 26067
// CenterNowOnUnits ( tmp [ 1 ] ) ;
26017: LD_VAR 0 2
26021: PUSH
26022: LD_INT 1
26024: ARRAY
26025: PPUSH
26026: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
26030: LD_VAR 0 2
26034: PUSH
26035: LD_INT 1
26037: ARRAY
26038: PPUSH
26039: CALL_OW 65
// end ; 5 .. 7 :
26043: GO 26067
26045: LD_INT 5
26047: DOUBLE
26048: GREATEREQUAL
26049: IFFALSE 26057
26051: LD_INT 7
26053: DOUBLE
26054: LESSEQUAL
26055: IFTRUE 26059
26057: GO 26066
26059: POP
// StreamSibBomb ; end ;
26060: CALL 22304 0 0
26064: GO 26067
26066: POP
// end ;
26067: PPOPN 3
26069: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26070: LD_EXP 37
26074: PUSH
26075: LD_EXP 87
26079: AND
26080: IFFALSE 26236
26082: GO 26084
26084: DISABLE
26085: LD_INT 0
26087: PPUSH
26088: PPUSH
26089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26090: LD_ADDR_VAR 0 2
26094: PUSH
26095: LD_INT 81
26097: PUSH
26098: LD_OWVAR 2
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: PUSH
26107: LD_INT 2
26109: PUSH
26110: LD_INT 21
26112: PUSH
26113: LD_INT 1
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 21
26122: PUSH
26123: LD_INT 2
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: LIST
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PPUSH
26139: CALL_OW 69
26143: ST_TO_ADDR
// if not tmp then
26144: LD_VAR 0 2
26148: NOT
26149: IFFALSE 26153
// exit ;
26151: GO 26236
// p := 0 ;
26153: LD_ADDR_VAR 0 3
26157: PUSH
26158: LD_INT 0
26160: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26161: LD_INT 35
26163: PPUSH
26164: CALL_OW 67
// p := p + 1 ;
26168: LD_ADDR_VAR 0 3
26172: PUSH
26173: LD_VAR 0 3
26177: PUSH
26178: LD_INT 1
26180: PLUS
26181: ST_TO_ADDR
// for i in tmp do
26182: LD_ADDR_VAR 0 1
26186: PUSH
26187: LD_VAR 0 2
26191: PUSH
26192: FOR_IN
26193: IFFALSE 26224
// if GetLives ( i ) < 1000 then
26195: LD_VAR 0 1
26199: PPUSH
26200: CALL_OW 256
26204: PUSH
26205: LD_INT 1000
26207: LESS
26208: IFFALSE 26222
// SetLives ( i , 1000 ) ;
26210: LD_VAR 0 1
26214: PPUSH
26215: LD_INT 1000
26217: PPUSH
26218: CALL_OW 234
26222: GO 26192
26224: POP
26225: POP
// until p > 20 ;
26226: LD_VAR 0 3
26230: PUSH
26231: LD_INT 20
26233: GREATER
26234: IFFALSE 26161
// end ;
26236: PPOPN 3
26238: END
// every 0 0$1 trigger StreamModeActive and sTime do
26239: LD_EXP 37
26243: PUSH
26244: LD_EXP 88
26248: AND
26249: IFFALSE 26284
26251: GO 26253
26253: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26254: LD_INT 28
26256: PPUSH
26257: LD_OWVAR 2
26261: PPUSH
26262: LD_INT 2
26264: PPUSH
26265: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26269: LD_INT 30
26271: PPUSH
26272: LD_OWVAR 2
26276: PPUSH
26277: LD_INT 2
26279: PPUSH
26280: CALL_OW 322
// end ;
26284: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26285: LD_EXP 37
26289: PUSH
26290: LD_EXP 89
26294: AND
26295: IFFALSE 26416
26297: GO 26299
26299: DISABLE
26300: LD_INT 0
26302: PPUSH
26303: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26304: LD_ADDR_VAR 0 2
26308: PUSH
26309: LD_INT 22
26311: PUSH
26312: LD_OWVAR 2
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PUSH
26321: LD_INT 21
26323: PUSH
26324: LD_INT 1
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: PUSH
26331: LD_INT 3
26333: PUSH
26334: LD_INT 23
26336: PUSH
26337: LD_INT 0
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: LIST
26352: PPUSH
26353: CALL_OW 69
26357: ST_TO_ADDR
// if not tmp then
26358: LD_VAR 0 2
26362: NOT
26363: IFFALSE 26367
// exit ;
26365: GO 26416
// for i in tmp do
26367: LD_ADDR_VAR 0 1
26371: PUSH
26372: LD_VAR 0 2
26376: PUSH
26377: FOR_IN
26378: IFFALSE 26414
// begin if Crawls ( i ) then
26380: LD_VAR 0 1
26384: PPUSH
26385: CALL_OW 318
26389: IFFALSE 26400
// ComWalk ( i ) ;
26391: LD_VAR 0 1
26395: PPUSH
26396: CALL_OW 138
// SetClass ( i , 2 ) ;
26400: LD_VAR 0 1
26404: PPUSH
26405: LD_INT 2
26407: PPUSH
26408: CALL_OW 336
// end ;
26412: GO 26377
26414: POP
26415: POP
// end ;
26416: PPOPN 2
26418: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26419: LD_EXP 37
26423: PUSH
26424: LD_EXP 90
26428: AND
26429: IFFALSE 26717
26431: GO 26433
26433: DISABLE
26434: LD_INT 0
26436: PPUSH
26437: PPUSH
26438: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26439: LD_OWVAR 2
26443: PPUSH
26444: LD_INT 9
26446: PPUSH
26447: LD_INT 1
26449: PPUSH
26450: LD_INT 1
26452: PPUSH
26453: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26457: LD_INT 9
26459: PPUSH
26460: LD_OWVAR 2
26464: PPUSH
26465: CALL_OW 343
// uc_side := 9 ;
26469: LD_ADDR_OWVAR 20
26473: PUSH
26474: LD_INT 9
26476: ST_TO_ADDR
// uc_nation := 2 ;
26477: LD_ADDR_OWVAR 21
26481: PUSH
26482: LD_INT 2
26484: ST_TO_ADDR
// hc_name := Dark Warrior ;
26485: LD_ADDR_OWVAR 26
26489: PUSH
26490: LD_STRING Dark Warrior
26492: ST_TO_ADDR
// hc_gallery :=  ;
26493: LD_ADDR_OWVAR 33
26497: PUSH
26498: LD_STRING 
26500: ST_TO_ADDR
// hc_noskilllimit := true ;
26501: LD_ADDR_OWVAR 76
26505: PUSH
26506: LD_INT 1
26508: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26509: LD_ADDR_OWVAR 31
26513: PUSH
26514: LD_INT 30
26516: PUSH
26517: LD_INT 30
26519: PUSH
26520: LD_INT 30
26522: PUSH
26523: LD_INT 30
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: ST_TO_ADDR
// un := CreateHuman ;
26532: LD_ADDR_VAR 0 3
26536: PUSH
26537: CALL_OW 44
26541: ST_TO_ADDR
// hc_noskilllimit := false ;
26542: LD_ADDR_OWVAR 76
26546: PUSH
26547: LD_INT 0
26549: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26550: LD_VAR 0 3
26554: PPUSH
26555: LD_INT 1
26557: PPUSH
26558: CALL_OW 51
// ToLua ( playRanger() ) ;
26562: LD_STRING playRanger()
26564: PPUSH
26565: CALL_OW 559
// p := 0 ;
26569: LD_ADDR_VAR 0 2
26573: PUSH
26574: LD_INT 0
26576: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26577: LD_INT 35
26579: PPUSH
26580: CALL_OW 67
// p := p + 1 ;
26584: LD_ADDR_VAR 0 2
26588: PUSH
26589: LD_VAR 0 2
26593: PUSH
26594: LD_INT 1
26596: PLUS
26597: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26598: LD_VAR 0 3
26602: PPUSH
26603: CALL_OW 256
26607: PUSH
26608: LD_INT 1000
26610: LESS
26611: IFFALSE 26625
// SetLives ( un , 1000 ) ;
26613: LD_VAR 0 3
26617: PPUSH
26618: LD_INT 1000
26620: PPUSH
26621: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26625: LD_VAR 0 3
26629: PPUSH
26630: LD_INT 81
26632: PUSH
26633: LD_OWVAR 2
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 91
26644: PUSH
26645: LD_VAR 0 3
26649: PUSH
26650: LD_INT 30
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: LIST
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PPUSH
26662: CALL_OW 69
26666: PPUSH
26667: LD_VAR 0 3
26671: PPUSH
26672: CALL_OW 74
26676: PPUSH
26677: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
26681: LD_VAR 0 2
26685: PUSH
26686: LD_INT 80
26688: GREATER
26689: PUSH
26690: LD_VAR 0 3
26694: PPUSH
26695: CALL_OW 301
26699: OR
26700: IFFALSE 26577
// if un then
26702: LD_VAR 0 3
26706: IFFALSE 26717
// RemoveUnit ( un ) ;
26708: LD_VAR 0 3
26712: PPUSH
26713: CALL_OW 64
// end ;
26717: PPOPN 3
26719: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
26720: LD_EXP 91
26724: IFFALSE 26840
26726: GO 26728
26728: DISABLE
26729: LD_INT 0
26731: PPUSH
26732: PPUSH
26733: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26734: LD_ADDR_VAR 0 2
26738: PUSH
26739: LD_INT 81
26741: PUSH
26742: LD_OWVAR 2
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: LD_INT 21
26753: PUSH
26754: LD_INT 1
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PPUSH
26765: CALL_OW 69
26769: ST_TO_ADDR
// ToLua ( playComputer() ) ;
26770: LD_STRING playComputer()
26772: PPUSH
26773: CALL_OW 559
// if not tmp then
26777: LD_VAR 0 2
26781: NOT
26782: IFFALSE 26786
// exit ;
26784: GO 26840
// for i in tmp do
26786: LD_ADDR_VAR 0 1
26790: PUSH
26791: LD_VAR 0 2
26795: PUSH
26796: FOR_IN
26797: IFFALSE 26838
// for j := 1 to 4 do
26799: LD_ADDR_VAR 0 3
26803: PUSH
26804: DOUBLE
26805: LD_INT 1
26807: DEC
26808: ST_TO_ADDR
26809: LD_INT 4
26811: PUSH
26812: FOR_TO
26813: IFFALSE 26834
// SetSkill ( i , j , 10 ) ;
26815: LD_VAR 0 1
26819: PPUSH
26820: LD_VAR 0 3
26824: PPUSH
26825: LD_INT 10
26827: PPUSH
26828: CALL_OW 237
26832: GO 26812
26834: POP
26835: POP
26836: GO 26796
26838: POP
26839: POP
// end ;
26840: PPOPN 3
26842: END
// every 0 0$1 trigger s30 do var i , tmp ;
26843: LD_EXP 92
26847: IFFALSE 26916
26849: GO 26851
26851: DISABLE
26852: LD_INT 0
26854: PPUSH
26855: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26856: LD_ADDR_VAR 0 2
26860: PUSH
26861: LD_INT 22
26863: PUSH
26864: LD_OWVAR 2
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PPUSH
26873: CALL_OW 69
26877: ST_TO_ADDR
// if not tmp then
26878: LD_VAR 0 2
26882: NOT
26883: IFFALSE 26887
// exit ;
26885: GO 26916
// for i in tmp do
26887: LD_ADDR_VAR 0 1
26891: PUSH
26892: LD_VAR 0 2
26896: PUSH
26897: FOR_IN
26898: IFFALSE 26914
// SetLives ( i , 300 ) ;
26900: LD_VAR 0 1
26904: PPUSH
26905: LD_INT 300
26907: PPUSH
26908: CALL_OW 234
26912: GO 26897
26914: POP
26915: POP
// end ;
26916: PPOPN 2
26918: END
// every 0 0$1 trigger s60 do var i , tmp ;
26919: LD_EXP 93
26923: IFFALSE 26992
26925: GO 26927
26927: DISABLE
26928: LD_INT 0
26930: PPUSH
26931: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26932: LD_ADDR_VAR 0 2
26936: PUSH
26937: LD_INT 22
26939: PUSH
26940: LD_OWVAR 2
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PPUSH
26949: CALL_OW 69
26953: ST_TO_ADDR
// if not tmp then
26954: LD_VAR 0 2
26958: NOT
26959: IFFALSE 26963
// exit ;
26961: GO 26992
// for i in tmp do
26963: LD_ADDR_VAR 0 1
26967: PUSH
26968: LD_VAR 0 2
26972: PUSH
26973: FOR_IN
26974: IFFALSE 26990
// SetLives ( i , 600 ) ;
26976: LD_VAR 0 1
26980: PPUSH
26981: LD_INT 600
26983: PPUSH
26984: CALL_OW 234
26988: GO 26973
26990: POP
26991: POP
// end ;
26992: PPOPN 2
26994: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
26995: LD_INT 0
26997: PPUSH
// case cmd of 301 :
26998: LD_VAR 0 1
27002: PUSH
27003: LD_INT 301
27005: DOUBLE
27006: EQUAL
27007: IFTRUE 27011
27009: GO 27043
27011: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
27012: LD_VAR 0 6
27016: PPUSH
27017: LD_VAR 0 7
27021: PPUSH
27022: LD_VAR 0 8
27026: PPUSH
27027: LD_VAR 0 4
27031: PPUSH
27032: LD_VAR 0 5
27036: PPUSH
27037: CALL 28244 0 5
27041: GO 27164
27043: LD_INT 302
27045: DOUBLE
27046: EQUAL
27047: IFTRUE 27051
27049: GO 27088
27051: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
27052: LD_VAR 0 6
27056: PPUSH
27057: LD_VAR 0 7
27061: PPUSH
27062: LD_VAR 0 8
27066: PPUSH
27067: LD_VAR 0 9
27071: PPUSH
27072: LD_VAR 0 4
27076: PPUSH
27077: LD_VAR 0 5
27081: PPUSH
27082: CALL 28335 0 6
27086: GO 27164
27088: LD_INT 303
27090: DOUBLE
27091: EQUAL
27092: IFTRUE 27096
27094: GO 27133
27096: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
27097: LD_VAR 0 6
27101: PPUSH
27102: LD_VAR 0 7
27106: PPUSH
27107: LD_VAR 0 8
27111: PPUSH
27112: LD_VAR 0 9
27116: PPUSH
27117: LD_VAR 0 4
27121: PPUSH
27122: LD_VAR 0 5
27126: PPUSH
27127: CALL 27169 0 6
27131: GO 27164
27133: LD_INT 304
27135: DOUBLE
27136: EQUAL
27137: IFTRUE 27141
27139: GO 27163
27141: POP
// hHackTeleport ( unit , x , y ) ; end ;
27142: LD_VAR 0 2
27146: PPUSH
27147: LD_VAR 0 4
27151: PPUSH
27152: LD_VAR 0 5
27156: PPUSH
27157: CALL 28928 0 3
27161: GO 27164
27163: POP
// end ;
27164: LD_VAR 0 12
27168: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27169: LD_INT 0
27171: PPUSH
27172: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27173: LD_VAR 0 1
27177: PUSH
27178: LD_INT 1
27180: LESS
27181: PUSH
27182: LD_VAR 0 1
27186: PUSH
27187: LD_INT 3
27189: GREATER
27190: OR
27191: PUSH
27192: LD_VAR 0 5
27196: PPUSH
27197: LD_VAR 0 6
27201: PPUSH
27202: CALL_OW 428
27206: OR
27207: IFFALSE 27211
// exit ;
27209: GO 27931
// uc_side := your_side ;
27211: LD_ADDR_OWVAR 20
27215: PUSH
27216: LD_OWVAR 2
27220: ST_TO_ADDR
// uc_nation := nation ;
27221: LD_ADDR_OWVAR 21
27225: PUSH
27226: LD_VAR 0 1
27230: ST_TO_ADDR
// bc_level = 1 ;
27231: LD_ADDR_OWVAR 43
27235: PUSH
27236: LD_INT 1
27238: ST_TO_ADDR
// case btype of 1 :
27239: LD_VAR 0 2
27243: PUSH
27244: LD_INT 1
27246: DOUBLE
27247: EQUAL
27248: IFTRUE 27252
27250: GO 27263
27252: POP
// bc_type := b_depot ; 2 :
27253: LD_ADDR_OWVAR 42
27257: PUSH
27258: LD_INT 0
27260: ST_TO_ADDR
27261: GO 27875
27263: LD_INT 2
27265: DOUBLE
27266: EQUAL
27267: IFTRUE 27271
27269: GO 27282
27271: POP
// bc_type := b_warehouse ; 3 :
27272: LD_ADDR_OWVAR 42
27276: PUSH
27277: LD_INT 1
27279: ST_TO_ADDR
27280: GO 27875
27282: LD_INT 3
27284: DOUBLE
27285: EQUAL
27286: IFTRUE 27290
27288: GO 27301
27290: POP
// bc_type := b_lab ; 4 .. 9 :
27291: LD_ADDR_OWVAR 42
27295: PUSH
27296: LD_INT 6
27298: ST_TO_ADDR
27299: GO 27875
27301: LD_INT 4
27303: DOUBLE
27304: GREATEREQUAL
27305: IFFALSE 27313
27307: LD_INT 9
27309: DOUBLE
27310: LESSEQUAL
27311: IFTRUE 27315
27313: GO 27367
27315: POP
// begin bc_type := b_lab_half ;
27316: LD_ADDR_OWVAR 42
27320: PUSH
27321: LD_INT 7
27323: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
27324: LD_ADDR_OWVAR 44
27328: PUSH
27329: LD_INT 10
27331: PUSH
27332: LD_INT 11
27334: PUSH
27335: LD_INT 12
27337: PUSH
27338: LD_INT 15
27340: PUSH
27341: LD_INT 14
27343: PUSH
27344: LD_INT 13
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: PUSH
27355: LD_VAR 0 2
27359: PUSH
27360: LD_INT 3
27362: MINUS
27363: ARRAY
27364: ST_TO_ADDR
// end ; 10 .. 13 :
27365: GO 27875
27367: LD_INT 10
27369: DOUBLE
27370: GREATEREQUAL
27371: IFFALSE 27379
27373: LD_INT 13
27375: DOUBLE
27376: LESSEQUAL
27377: IFTRUE 27381
27379: GO 27458
27381: POP
// begin bc_type := b_lab_full ;
27382: LD_ADDR_OWVAR 42
27386: PUSH
27387: LD_INT 8
27389: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27390: LD_ADDR_OWVAR 44
27394: PUSH
27395: LD_INT 10
27397: PUSH
27398: LD_INT 12
27400: PUSH
27401: LD_INT 14
27403: PUSH
27404: LD_INT 13
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: PUSH
27413: LD_VAR 0 2
27417: PUSH
27418: LD_INT 9
27420: MINUS
27421: ARRAY
27422: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
27423: LD_ADDR_OWVAR 45
27427: PUSH
27428: LD_INT 11
27430: PUSH
27431: LD_INT 15
27433: PUSH
27434: LD_INT 12
27436: PUSH
27437: LD_INT 15
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: PUSH
27446: LD_VAR 0 2
27450: PUSH
27451: LD_INT 9
27453: MINUS
27454: ARRAY
27455: ST_TO_ADDR
// end ; 14 :
27456: GO 27875
27458: LD_INT 14
27460: DOUBLE
27461: EQUAL
27462: IFTRUE 27466
27464: GO 27477
27466: POP
// bc_type := b_workshop ; 15 :
27467: LD_ADDR_OWVAR 42
27471: PUSH
27472: LD_INT 2
27474: ST_TO_ADDR
27475: GO 27875
27477: LD_INT 15
27479: DOUBLE
27480: EQUAL
27481: IFTRUE 27485
27483: GO 27496
27485: POP
// bc_type := b_factory ; 16 :
27486: LD_ADDR_OWVAR 42
27490: PUSH
27491: LD_INT 3
27493: ST_TO_ADDR
27494: GO 27875
27496: LD_INT 16
27498: DOUBLE
27499: EQUAL
27500: IFTRUE 27504
27502: GO 27515
27504: POP
// bc_type := b_ext_gun ; 17 :
27505: LD_ADDR_OWVAR 42
27509: PUSH
27510: LD_INT 17
27512: ST_TO_ADDR
27513: GO 27875
27515: LD_INT 17
27517: DOUBLE
27518: EQUAL
27519: IFTRUE 27523
27521: GO 27551
27523: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
27524: LD_ADDR_OWVAR 42
27528: PUSH
27529: LD_INT 19
27531: PUSH
27532: LD_INT 23
27534: PUSH
27535: LD_INT 19
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: LIST
27542: PUSH
27543: LD_VAR 0 1
27547: ARRAY
27548: ST_TO_ADDR
27549: GO 27875
27551: LD_INT 18
27553: DOUBLE
27554: EQUAL
27555: IFTRUE 27559
27557: GO 27570
27559: POP
// bc_type := b_ext_radar ; 19 :
27560: LD_ADDR_OWVAR 42
27564: PUSH
27565: LD_INT 20
27567: ST_TO_ADDR
27568: GO 27875
27570: LD_INT 19
27572: DOUBLE
27573: EQUAL
27574: IFTRUE 27578
27576: GO 27589
27578: POP
// bc_type := b_ext_radio ; 20 :
27579: LD_ADDR_OWVAR 42
27583: PUSH
27584: LD_INT 22
27586: ST_TO_ADDR
27587: GO 27875
27589: LD_INT 20
27591: DOUBLE
27592: EQUAL
27593: IFTRUE 27597
27595: GO 27608
27597: POP
// bc_type := b_ext_siberium ; 21 :
27598: LD_ADDR_OWVAR 42
27602: PUSH
27603: LD_INT 21
27605: ST_TO_ADDR
27606: GO 27875
27608: LD_INT 21
27610: DOUBLE
27611: EQUAL
27612: IFTRUE 27616
27614: GO 27627
27616: POP
// bc_type := b_ext_computer ; 22 :
27617: LD_ADDR_OWVAR 42
27621: PUSH
27622: LD_INT 24
27624: ST_TO_ADDR
27625: GO 27875
27627: LD_INT 22
27629: DOUBLE
27630: EQUAL
27631: IFTRUE 27635
27633: GO 27646
27635: POP
// bc_type := b_ext_track ; 23 :
27636: LD_ADDR_OWVAR 42
27640: PUSH
27641: LD_INT 16
27643: ST_TO_ADDR
27644: GO 27875
27646: LD_INT 23
27648: DOUBLE
27649: EQUAL
27650: IFTRUE 27654
27652: GO 27665
27654: POP
// bc_type := b_ext_laser ; 24 :
27655: LD_ADDR_OWVAR 42
27659: PUSH
27660: LD_INT 25
27662: ST_TO_ADDR
27663: GO 27875
27665: LD_INT 24
27667: DOUBLE
27668: EQUAL
27669: IFTRUE 27673
27671: GO 27684
27673: POP
// bc_type := b_control_tower ; 25 :
27674: LD_ADDR_OWVAR 42
27678: PUSH
27679: LD_INT 36
27681: ST_TO_ADDR
27682: GO 27875
27684: LD_INT 25
27686: DOUBLE
27687: EQUAL
27688: IFTRUE 27692
27690: GO 27703
27692: POP
// bc_type := b_breastwork ; 26 :
27693: LD_ADDR_OWVAR 42
27697: PUSH
27698: LD_INT 31
27700: ST_TO_ADDR
27701: GO 27875
27703: LD_INT 26
27705: DOUBLE
27706: EQUAL
27707: IFTRUE 27711
27709: GO 27722
27711: POP
// bc_type := b_bunker ; 27 :
27712: LD_ADDR_OWVAR 42
27716: PUSH
27717: LD_INT 32
27719: ST_TO_ADDR
27720: GO 27875
27722: LD_INT 27
27724: DOUBLE
27725: EQUAL
27726: IFTRUE 27730
27728: GO 27741
27730: POP
// bc_type := b_turret ; 28 :
27731: LD_ADDR_OWVAR 42
27735: PUSH
27736: LD_INT 33
27738: ST_TO_ADDR
27739: GO 27875
27741: LD_INT 28
27743: DOUBLE
27744: EQUAL
27745: IFTRUE 27749
27747: GO 27760
27749: POP
// bc_type := b_armoury ; 29 :
27750: LD_ADDR_OWVAR 42
27754: PUSH
27755: LD_INT 4
27757: ST_TO_ADDR
27758: GO 27875
27760: LD_INT 29
27762: DOUBLE
27763: EQUAL
27764: IFTRUE 27768
27766: GO 27779
27768: POP
// bc_type := b_barracks ; 30 :
27769: LD_ADDR_OWVAR 42
27773: PUSH
27774: LD_INT 5
27776: ST_TO_ADDR
27777: GO 27875
27779: LD_INT 30
27781: DOUBLE
27782: EQUAL
27783: IFTRUE 27787
27785: GO 27798
27787: POP
// bc_type := b_solar_power ; 31 :
27788: LD_ADDR_OWVAR 42
27792: PUSH
27793: LD_INT 27
27795: ST_TO_ADDR
27796: GO 27875
27798: LD_INT 31
27800: DOUBLE
27801: EQUAL
27802: IFTRUE 27806
27804: GO 27817
27806: POP
// bc_type := b_oil_power ; 32 :
27807: LD_ADDR_OWVAR 42
27811: PUSH
27812: LD_INT 26
27814: ST_TO_ADDR
27815: GO 27875
27817: LD_INT 32
27819: DOUBLE
27820: EQUAL
27821: IFTRUE 27825
27823: GO 27836
27825: POP
// bc_type := b_siberite_power ; 33 :
27826: LD_ADDR_OWVAR 42
27830: PUSH
27831: LD_INT 28
27833: ST_TO_ADDR
27834: GO 27875
27836: LD_INT 33
27838: DOUBLE
27839: EQUAL
27840: IFTRUE 27844
27842: GO 27855
27844: POP
// bc_type := b_oil_mine ; 34 :
27845: LD_ADDR_OWVAR 42
27849: PUSH
27850: LD_INT 29
27852: ST_TO_ADDR
27853: GO 27875
27855: LD_INT 34
27857: DOUBLE
27858: EQUAL
27859: IFTRUE 27863
27861: GO 27874
27863: POP
// bc_type := b_siberite_mine ; end ;
27864: LD_ADDR_OWVAR 42
27868: PUSH
27869: LD_INT 30
27871: ST_TO_ADDR
27872: GO 27875
27874: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
27875: LD_ADDR_VAR 0 8
27879: PUSH
27880: LD_VAR 0 5
27884: PPUSH
27885: LD_VAR 0 6
27889: PPUSH
27890: LD_VAR 0 3
27894: PPUSH
27895: CALL_OW 47
27899: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
27900: LD_OWVAR 42
27904: PUSH
27905: LD_INT 32
27907: PUSH
27908: LD_INT 33
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: IN
27915: IFFALSE 27931
// PlaceWeaponTurret ( b , weapon ) ;
27917: LD_VAR 0 8
27921: PPUSH
27922: LD_VAR 0 4
27926: PPUSH
27927: CALL_OW 431
// end ;
27931: LD_VAR 0 7
27935: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
27936: LD_INT 0
27938: PPUSH
27939: PPUSH
27940: PPUSH
27941: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27942: LD_ADDR_VAR 0 4
27946: PUSH
27947: LD_INT 22
27949: PUSH
27950: LD_OWVAR 2
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: LD_INT 2
27961: PUSH
27962: LD_INT 30
27964: PUSH
27965: LD_INT 0
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: LD_INT 30
27974: PUSH
27975: LD_INT 1
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: LIST
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PPUSH
27991: CALL_OW 69
27995: ST_TO_ADDR
// if not tmp then
27996: LD_VAR 0 4
28000: NOT
28001: IFFALSE 28005
// exit ;
28003: GO 28064
// for i in tmp do
28005: LD_ADDR_VAR 0 2
28009: PUSH
28010: LD_VAR 0 4
28014: PUSH
28015: FOR_IN
28016: IFFALSE 28062
// for j = 1 to 3 do
28018: LD_ADDR_VAR 0 3
28022: PUSH
28023: DOUBLE
28024: LD_INT 1
28026: DEC
28027: ST_TO_ADDR
28028: LD_INT 3
28030: PUSH
28031: FOR_TO
28032: IFFALSE 28058
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
28034: LD_VAR 0 2
28038: PPUSH
28039: CALL_OW 274
28043: PPUSH
28044: LD_VAR 0 3
28048: PPUSH
28049: LD_INT 99999
28051: PPUSH
28052: CALL_OW 277
28056: GO 28031
28058: POP
28059: POP
28060: GO 28015
28062: POP
28063: POP
// end ;
28064: LD_VAR 0 1
28068: RET
// export function hHackSetLevel10 ; var i , j ; begin
28069: LD_INT 0
28071: PPUSH
28072: PPUSH
28073: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28074: LD_ADDR_VAR 0 2
28078: PUSH
28079: LD_INT 21
28081: PUSH
28082: LD_INT 1
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PPUSH
28089: CALL_OW 69
28093: PUSH
28094: FOR_IN
28095: IFFALSE 28147
// if IsSelected ( i ) then
28097: LD_VAR 0 2
28101: PPUSH
28102: CALL_OW 306
28106: IFFALSE 28145
// begin for j := 1 to 4 do
28108: LD_ADDR_VAR 0 3
28112: PUSH
28113: DOUBLE
28114: LD_INT 1
28116: DEC
28117: ST_TO_ADDR
28118: LD_INT 4
28120: PUSH
28121: FOR_TO
28122: IFFALSE 28143
// SetSkill ( i , j , 10 ) ;
28124: LD_VAR 0 2
28128: PPUSH
28129: LD_VAR 0 3
28133: PPUSH
28134: LD_INT 10
28136: PPUSH
28137: CALL_OW 237
28141: GO 28121
28143: POP
28144: POP
// end ;
28145: GO 28094
28147: POP
28148: POP
// end ;
28149: LD_VAR 0 1
28153: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
28154: LD_INT 0
28156: PPUSH
28157: PPUSH
28158: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
28159: LD_ADDR_VAR 0 2
28163: PUSH
28164: LD_INT 22
28166: PUSH
28167: LD_OWVAR 2
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: LD_INT 21
28178: PUSH
28179: LD_INT 1
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PPUSH
28190: CALL_OW 69
28194: PUSH
28195: FOR_IN
28196: IFFALSE 28237
// begin for j := 1 to 4 do
28198: LD_ADDR_VAR 0 3
28202: PUSH
28203: DOUBLE
28204: LD_INT 1
28206: DEC
28207: ST_TO_ADDR
28208: LD_INT 4
28210: PUSH
28211: FOR_TO
28212: IFFALSE 28233
// SetSkill ( i , j , 10 ) ;
28214: LD_VAR 0 2
28218: PPUSH
28219: LD_VAR 0 3
28223: PPUSH
28224: LD_INT 10
28226: PPUSH
28227: CALL_OW 237
28231: GO 28211
28233: POP
28234: POP
// end ;
28235: GO 28195
28237: POP
28238: POP
// end ;
28239: LD_VAR 0 1
28243: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
28244: LD_INT 0
28246: PPUSH
// uc_side := your_side ;
28247: LD_ADDR_OWVAR 20
28251: PUSH
28252: LD_OWVAR 2
28256: ST_TO_ADDR
// uc_nation := nation ;
28257: LD_ADDR_OWVAR 21
28261: PUSH
28262: LD_VAR 0 1
28266: ST_TO_ADDR
// InitHc ;
28267: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28271: LD_INT 0
28273: PPUSH
28274: LD_VAR 0 2
28278: PPUSH
28279: LD_VAR 0 3
28283: PPUSH
28284: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28288: LD_VAR 0 4
28292: PPUSH
28293: LD_VAR 0 5
28297: PPUSH
28298: CALL_OW 428
28302: PUSH
28303: LD_INT 0
28305: EQUAL
28306: IFFALSE 28330
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
28308: CALL_OW 44
28312: PPUSH
28313: LD_VAR 0 4
28317: PPUSH
28318: LD_VAR 0 5
28322: PPUSH
28323: LD_INT 1
28325: PPUSH
28326: CALL_OW 48
// end ;
28330: LD_VAR 0 6
28334: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28335: LD_INT 0
28337: PPUSH
28338: PPUSH
// uc_side := your_side ;
28339: LD_ADDR_OWVAR 20
28343: PUSH
28344: LD_OWVAR 2
28348: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28349: LD_VAR 0 1
28353: PUSH
28354: LD_INT 1
28356: PUSH
28357: LD_INT 2
28359: PUSH
28360: LD_INT 3
28362: PUSH
28363: LD_INT 4
28365: PUSH
28366: LD_INT 5
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: IN
28376: IFFALSE 28388
// uc_nation := nation_american else
28378: LD_ADDR_OWVAR 21
28382: PUSH
28383: LD_INT 1
28385: ST_TO_ADDR
28386: GO 28431
// if chassis in [ 11 , 12 , 13 , 14 ] then
28388: LD_VAR 0 1
28392: PUSH
28393: LD_INT 11
28395: PUSH
28396: LD_INT 12
28398: PUSH
28399: LD_INT 13
28401: PUSH
28402: LD_INT 14
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: LIST
28409: LIST
28410: IN
28411: IFFALSE 28423
// uc_nation := nation_arabian else
28413: LD_ADDR_OWVAR 21
28417: PUSH
28418: LD_INT 2
28420: ST_TO_ADDR
28421: GO 28431
// uc_nation := nation_russian ;
28423: LD_ADDR_OWVAR 21
28427: PUSH
28428: LD_INT 3
28430: ST_TO_ADDR
// vc_chassis := chassis ;
28431: LD_ADDR_OWVAR 37
28435: PUSH
28436: LD_VAR 0 1
28440: ST_TO_ADDR
// vc_engine := engine ;
28441: LD_ADDR_OWVAR 39
28445: PUSH
28446: LD_VAR 0 2
28450: ST_TO_ADDR
// vc_control := control ;
28451: LD_ADDR_OWVAR 38
28455: PUSH
28456: LD_VAR 0 3
28460: ST_TO_ADDR
// vc_weapon := weapon ;
28461: LD_ADDR_OWVAR 40
28465: PUSH
28466: LD_VAR 0 4
28470: ST_TO_ADDR
// un := CreateVehicle ;
28471: LD_ADDR_VAR 0 8
28475: PUSH
28476: CALL_OW 45
28480: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
28481: LD_VAR 0 8
28485: PPUSH
28486: LD_INT 0
28488: PPUSH
28489: LD_INT 5
28491: PPUSH
28492: CALL_OW 12
28496: PPUSH
28497: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
28501: LD_VAR 0 8
28505: PPUSH
28506: LD_VAR 0 5
28510: PPUSH
28511: LD_VAR 0 6
28515: PPUSH
28516: LD_INT 1
28518: PPUSH
28519: CALL_OW 48
// end ;
28523: LD_VAR 0 7
28527: RET
// export hInvincible ; every 1 do
28528: GO 28530
28530: DISABLE
// hInvincible := [ ] ;
28531: LD_ADDR_EXP 94
28535: PUSH
28536: EMPTY
28537: ST_TO_ADDR
28538: END
// every 10 do var i ;
28539: GO 28541
28541: DISABLE
28542: LD_INT 0
28544: PPUSH
// begin enable ;
28545: ENABLE
// if not hInvincible then
28546: LD_EXP 94
28550: NOT
28551: IFFALSE 28555
// exit ;
28553: GO 28599
// for i in hInvincible do
28555: LD_ADDR_VAR 0 1
28559: PUSH
28560: LD_EXP 94
28564: PUSH
28565: FOR_IN
28566: IFFALSE 28597
// if GetLives ( i ) < 1000 then
28568: LD_VAR 0 1
28572: PPUSH
28573: CALL_OW 256
28577: PUSH
28578: LD_INT 1000
28580: LESS
28581: IFFALSE 28595
// SetLives ( i , 1000 ) ;
28583: LD_VAR 0 1
28587: PPUSH
28588: LD_INT 1000
28590: PPUSH
28591: CALL_OW 234
28595: GO 28565
28597: POP
28598: POP
// end ;
28599: PPOPN 1
28601: END
// export function hHackInvincible ; var i ; begin
28602: LD_INT 0
28604: PPUSH
28605: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
28606: LD_ADDR_VAR 0 2
28610: PUSH
28611: LD_INT 2
28613: PUSH
28614: LD_INT 21
28616: PUSH
28617: LD_INT 1
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 21
28626: PUSH
28627: LD_INT 2
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: LIST
28638: PPUSH
28639: CALL_OW 69
28643: PUSH
28644: FOR_IN
28645: IFFALSE 28706
// if IsSelected ( i ) then
28647: LD_VAR 0 2
28651: PPUSH
28652: CALL_OW 306
28656: IFFALSE 28704
// begin if i in hInvincible then
28658: LD_VAR 0 2
28662: PUSH
28663: LD_EXP 94
28667: IN
28668: IFFALSE 28688
// hInvincible := hInvincible diff i else
28670: LD_ADDR_EXP 94
28674: PUSH
28675: LD_EXP 94
28679: PUSH
28680: LD_VAR 0 2
28684: DIFF
28685: ST_TO_ADDR
28686: GO 28704
// hInvincible := hInvincible union i ;
28688: LD_ADDR_EXP 94
28692: PUSH
28693: LD_EXP 94
28697: PUSH
28698: LD_VAR 0 2
28702: UNION
28703: ST_TO_ADDR
// end ;
28704: GO 28644
28706: POP
28707: POP
// end ;
28708: LD_VAR 0 1
28712: RET
// export function hHackInvisible ; var i , j ; begin
28713: LD_INT 0
28715: PPUSH
28716: PPUSH
28717: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28718: LD_ADDR_VAR 0 2
28722: PUSH
28723: LD_INT 21
28725: PUSH
28726: LD_INT 1
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PPUSH
28733: CALL_OW 69
28737: PUSH
28738: FOR_IN
28739: IFFALSE 28763
// if IsSelected ( i ) then
28741: LD_VAR 0 2
28745: PPUSH
28746: CALL_OW 306
28750: IFFALSE 28761
// ComForceInvisible ( i ) ;
28752: LD_VAR 0 2
28756: PPUSH
28757: CALL_OW 496
28761: GO 28738
28763: POP
28764: POP
// end ;
28765: LD_VAR 0 1
28769: RET
// export function hHackChangeYourSide ; begin
28770: LD_INT 0
28772: PPUSH
// if your_side = 8 then
28773: LD_OWVAR 2
28777: PUSH
28778: LD_INT 8
28780: EQUAL
28781: IFFALSE 28793
// your_side := 0 else
28783: LD_ADDR_OWVAR 2
28787: PUSH
28788: LD_INT 0
28790: ST_TO_ADDR
28791: GO 28807
// your_side := your_side + 1 ;
28793: LD_ADDR_OWVAR 2
28797: PUSH
28798: LD_OWVAR 2
28802: PUSH
28803: LD_INT 1
28805: PLUS
28806: ST_TO_ADDR
// end ;
28807: LD_VAR 0 1
28811: RET
// export function hHackChangeUnitSide ; var i , j ; begin
28812: LD_INT 0
28814: PPUSH
28815: PPUSH
28816: PPUSH
// for i in all_units do
28817: LD_ADDR_VAR 0 2
28821: PUSH
28822: LD_OWVAR 3
28826: PUSH
28827: FOR_IN
28828: IFFALSE 28906
// if IsSelected ( i ) then
28830: LD_VAR 0 2
28834: PPUSH
28835: CALL_OW 306
28839: IFFALSE 28904
// begin j := GetSide ( i ) ;
28841: LD_ADDR_VAR 0 3
28845: PUSH
28846: LD_VAR 0 2
28850: PPUSH
28851: CALL_OW 255
28855: ST_TO_ADDR
// if j = 8 then
28856: LD_VAR 0 3
28860: PUSH
28861: LD_INT 8
28863: EQUAL
28864: IFFALSE 28876
// j := 0 else
28866: LD_ADDR_VAR 0 3
28870: PUSH
28871: LD_INT 0
28873: ST_TO_ADDR
28874: GO 28890
// j := j + 1 ;
28876: LD_ADDR_VAR 0 3
28880: PUSH
28881: LD_VAR 0 3
28885: PUSH
28886: LD_INT 1
28888: PLUS
28889: ST_TO_ADDR
// SetSide ( i , j ) ;
28890: LD_VAR 0 2
28894: PPUSH
28895: LD_VAR 0 3
28899: PPUSH
28900: CALL_OW 235
// end ;
28904: GO 28827
28906: POP
28907: POP
// end ;
28908: LD_VAR 0 1
28912: RET
// export function hHackFog ; begin
28913: LD_INT 0
28915: PPUSH
// FogOff ( true ) ;
28916: LD_INT 1
28918: PPUSH
28919: CALL_OW 344
// end ;
28923: LD_VAR 0 1
28927: RET
// export function hHackTeleport ( unit , x , y ) ; begin
28928: LD_INT 0
28930: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
28931: LD_VAR 0 1
28935: PPUSH
28936: LD_VAR 0 2
28940: PPUSH
28941: LD_VAR 0 3
28945: PPUSH
28946: LD_INT 1
28948: PPUSH
28949: LD_INT 1
28951: PPUSH
28952: CALL_OW 483
// CenterOnXY ( x , y ) ;
28956: LD_VAR 0 2
28960: PPUSH
28961: LD_VAR 0 3
28965: PPUSH
28966: CALL_OW 84
// end ; end_of_file end_of_file
28970: LD_VAR 0 4
28974: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28975: LD_INT 0
28977: PPUSH
28978: PPUSH
// if exist_mode then
28979: LD_VAR 0 2
28983: IFFALSE 29008
// unit := CreateCharacter ( prefix & ident ) else
28985: LD_ADDR_VAR 0 5
28989: PUSH
28990: LD_VAR 0 3
28994: PUSH
28995: LD_VAR 0 1
28999: STR
29000: PPUSH
29001: CALL_OW 34
29005: ST_TO_ADDR
29006: GO 29023
// unit := NewCharacter ( ident ) ;
29008: LD_ADDR_VAR 0 5
29012: PUSH
29013: LD_VAR 0 1
29017: PPUSH
29018: CALL_OW 25
29022: ST_TO_ADDR
// result := unit ;
29023: LD_ADDR_VAR 0 4
29027: PUSH
29028: LD_VAR 0 5
29032: ST_TO_ADDR
// end ;
29033: LD_VAR 0 4
29037: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29038: LD_INT 0
29040: PPUSH
29041: PPUSH
// if not side or not nation then
29042: LD_VAR 0 1
29046: NOT
29047: PUSH
29048: LD_VAR 0 2
29052: NOT
29053: OR
29054: IFFALSE 29058
// exit ;
29056: GO 29826
// case nation of nation_american :
29058: LD_VAR 0 2
29062: PUSH
29063: LD_INT 1
29065: DOUBLE
29066: EQUAL
29067: IFTRUE 29071
29069: GO 29285
29071: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29072: LD_ADDR_VAR 0 4
29076: PUSH
29077: LD_INT 35
29079: PUSH
29080: LD_INT 45
29082: PUSH
29083: LD_INT 46
29085: PUSH
29086: LD_INT 47
29088: PUSH
29089: LD_INT 82
29091: PUSH
29092: LD_INT 83
29094: PUSH
29095: LD_INT 84
29097: PUSH
29098: LD_INT 85
29100: PUSH
29101: LD_INT 86
29103: PUSH
29104: LD_INT 1
29106: PUSH
29107: LD_INT 2
29109: PUSH
29110: LD_INT 6
29112: PUSH
29113: LD_INT 15
29115: PUSH
29116: LD_INT 16
29118: PUSH
29119: LD_INT 7
29121: PUSH
29122: LD_INT 12
29124: PUSH
29125: LD_INT 13
29127: PUSH
29128: LD_INT 10
29130: PUSH
29131: LD_INT 14
29133: PUSH
29134: LD_INT 20
29136: PUSH
29137: LD_INT 21
29139: PUSH
29140: LD_INT 22
29142: PUSH
29143: LD_INT 25
29145: PUSH
29146: LD_INT 32
29148: PUSH
29149: LD_INT 27
29151: PUSH
29152: LD_INT 36
29154: PUSH
29155: LD_INT 69
29157: PUSH
29158: LD_INT 39
29160: PUSH
29161: LD_INT 34
29163: PUSH
29164: LD_INT 40
29166: PUSH
29167: LD_INT 48
29169: PUSH
29170: LD_INT 49
29172: PUSH
29173: LD_INT 50
29175: PUSH
29176: LD_INT 51
29178: PUSH
29179: LD_INT 52
29181: PUSH
29182: LD_INT 53
29184: PUSH
29185: LD_INT 54
29187: PUSH
29188: LD_INT 55
29190: PUSH
29191: LD_INT 56
29193: PUSH
29194: LD_INT 57
29196: PUSH
29197: LD_INT 58
29199: PUSH
29200: LD_INT 59
29202: PUSH
29203: LD_INT 60
29205: PUSH
29206: LD_INT 61
29208: PUSH
29209: LD_INT 62
29211: PUSH
29212: LD_INT 80
29214: PUSH
29215: LD_INT 82
29217: PUSH
29218: LD_INT 83
29220: PUSH
29221: LD_INT 84
29223: PUSH
29224: LD_INT 85
29226: PUSH
29227: LD_INT 86
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: LIST
29239: LIST
29240: LIST
29241: LIST
29242: LIST
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: LIST
29253: LIST
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: ST_TO_ADDR
29283: GO 29750
29285: LD_INT 2
29287: DOUBLE
29288: EQUAL
29289: IFTRUE 29293
29291: GO 29519
29293: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29294: LD_ADDR_VAR 0 4
29298: PUSH
29299: LD_INT 35
29301: PUSH
29302: LD_INT 45
29304: PUSH
29305: LD_INT 46
29307: PUSH
29308: LD_INT 47
29310: PUSH
29311: LD_INT 82
29313: PUSH
29314: LD_INT 83
29316: PUSH
29317: LD_INT 84
29319: PUSH
29320: LD_INT 85
29322: PUSH
29323: LD_INT 87
29325: PUSH
29326: LD_INT 70
29328: PUSH
29329: LD_INT 1
29331: PUSH
29332: LD_INT 11
29334: PUSH
29335: LD_INT 3
29337: PUSH
29338: LD_INT 4
29340: PUSH
29341: LD_INT 5
29343: PUSH
29344: LD_INT 6
29346: PUSH
29347: LD_INT 15
29349: PUSH
29350: LD_INT 18
29352: PUSH
29353: LD_INT 7
29355: PUSH
29356: LD_INT 17
29358: PUSH
29359: LD_INT 8
29361: PUSH
29362: LD_INT 20
29364: PUSH
29365: LD_INT 21
29367: PUSH
29368: LD_INT 22
29370: PUSH
29371: LD_INT 72
29373: PUSH
29374: LD_INT 26
29376: PUSH
29377: LD_INT 69
29379: PUSH
29380: LD_INT 39
29382: PUSH
29383: LD_INT 40
29385: PUSH
29386: LD_INT 41
29388: PUSH
29389: LD_INT 42
29391: PUSH
29392: LD_INT 43
29394: PUSH
29395: LD_INT 48
29397: PUSH
29398: LD_INT 49
29400: PUSH
29401: LD_INT 50
29403: PUSH
29404: LD_INT 51
29406: PUSH
29407: LD_INT 52
29409: PUSH
29410: LD_INT 53
29412: PUSH
29413: LD_INT 54
29415: PUSH
29416: LD_INT 55
29418: PUSH
29419: LD_INT 56
29421: PUSH
29422: LD_INT 60
29424: PUSH
29425: LD_INT 61
29427: PUSH
29428: LD_INT 62
29430: PUSH
29431: LD_INT 66
29433: PUSH
29434: LD_INT 67
29436: PUSH
29437: LD_INT 68
29439: PUSH
29440: LD_INT 81
29442: PUSH
29443: LD_INT 82
29445: PUSH
29446: LD_INT 83
29448: PUSH
29449: LD_INT 84
29451: PUSH
29452: LD_INT 85
29454: PUSH
29455: LD_INT 87
29457: PUSH
29458: LD_INT 88
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: LIST
29478: LIST
29479: LIST
29480: LIST
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: ST_TO_ADDR
29517: GO 29750
29519: LD_INT 3
29521: DOUBLE
29522: EQUAL
29523: IFTRUE 29527
29525: GO 29749
29527: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29528: LD_ADDR_VAR 0 4
29532: PUSH
29533: LD_INT 46
29535: PUSH
29536: LD_INT 47
29538: PUSH
29539: LD_INT 1
29541: PUSH
29542: LD_INT 2
29544: PUSH
29545: LD_INT 82
29547: PUSH
29548: LD_INT 83
29550: PUSH
29551: LD_INT 84
29553: PUSH
29554: LD_INT 85
29556: PUSH
29557: LD_INT 86
29559: PUSH
29560: LD_INT 11
29562: PUSH
29563: LD_INT 9
29565: PUSH
29566: LD_INT 20
29568: PUSH
29569: LD_INT 19
29571: PUSH
29572: LD_INT 21
29574: PUSH
29575: LD_INT 24
29577: PUSH
29578: LD_INT 22
29580: PUSH
29581: LD_INT 25
29583: PUSH
29584: LD_INT 28
29586: PUSH
29587: LD_INT 29
29589: PUSH
29590: LD_INT 30
29592: PUSH
29593: LD_INT 31
29595: PUSH
29596: LD_INT 37
29598: PUSH
29599: LD_INT 38
29601: PUSH
29602: LD_INT 32
29604: PUSH
29605: LD_INT 27
29607: PUSH
29608: LD_INT 33
29610: PUSH
29611: LD_INT 69
29613: PUSH
29614: LD_INT 39
29616: PUSH
29617: LD_INT 34
29619: PUSH
29620: LD_INT 40
29622: PUSH
29623: LD_INT 71
29625: PUSH
29626: LD_INT 23
29628: PUSH
29629: LD_INT 44
29631: PUSH
29632: LD_INT 48
29634: PUSH
29635: LD_INT 49
29637: PUSH
29638: LD_INT 50
29640: PUSH
29641: LD_INT 51
29643: PUSH
29644: LD_INT 52
29646: PUSH
29647: LD_INT 53
29649: PUSH
29650: LD_INT 54
29652: PUSH
29653: LD_INT 55
29655: PUSH
29656: LD_INT 56
29658: PUSH
29659: LD_INT 57
29661: PUSH
29662: LD_INT 58
29664: PUSH
29665: LD_INT 59
29667: PUSH
29668: LD_INT 63
29670: PUSH
29671: LD_INT 64
29673: PUSH
29674: LD_INT 65
29676: PUSH
29677: LD_INT 82
29679: PUSH
29680: LD_INT 83
29682: PUSH
29683: LD_INT 84
29685: PUSH
29686: LD_INT 85
29688: PUSH
29689: LD_INT 86
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: LIST
29700: LIST
29701: LIST
29702: LIST
29703: LIST
29704: LIST
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: LIST
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: LIST
29738: LIST
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: ST_TO_ADDR
29747: GO 29750
29749: POP
// if state > - 1 and state < 3 then
29750: LD_VAR 0 3
29754: PUSH
29755: LD_INT 1
29757: NEG
29758: GREATER
29759: PUSH
29760: LD_VAR 0 3
29764: PUSH
29765: LD_INT 3
29767: LESS
29768: AND
29769: IFFALSE 29826
// for i in result do
29771: LD_ADDR_VAR 0 5
29775: PUSH
29776: LD_VAR 0 4
29780: PUSH
29781: FOR_IN
29782: IFFALSE 29824
// if GetTech ( i , side ) <> state then
29784: LD_VAR 0 5
29788: PPUSH
29789: LD_VAR 0 1
29793: PPUSH
29794: CALL_OW 321
29798: PUSH
29799: LD_VAR 0 3
29803: NONEQUAL
29804: IFFALSE 29822
// result := result diff i ;
29806: LD_ADDR_VAR 0 4
29810: PUSH
29811: LD_VAR 0 4
29815: PUSH
29816: LD_VAR 0 5
29820: DIFF
29821: ST_TO_ADDR
29822: GO 29781
29824: POP
29825: POP
// end ;
29826: LD_VAR 0 4
29830: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29831: LD_INT 0
29833: PPUSH
29834: PPUSH
29835: PPUSH
// result := true ;
29836: LD_ADDR_VAR 0 3
29840: PUSH
29841: LD_INT 1
29843: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29844: LD_ADDR_VAR 0 5
29848: PUSH
29849: LD_VAR 0 2
29853: PPUSH
29854: CALL_OW 480
29858: ST_TO_ADDR
// if not tmp then
29859: LD_VAR 0 5
29863: NOT
29864: IFFALSE 29868
// exit ;
29866: GO 29917
// for i in tmp do
29868: LD_ADDR_VAR 0 4
29872: PUSH
29873: LD_VAR 0 5
29877: PUSH
29878: FOR_IN
29879: IFFALSE 29915
// if GetTech ( i , side ) <> state_researched then
29881: LD_VAR 0 4
29885: PPUSH
29886: LD_VAR 0 1
29890: PPUSH
29891: CALL_OW 321
29895: PUSH
29896: LD_INT 2
29898: NONEQUAL
29899: IFFALSE 29913
// begin result := false ;
29901: LD_ADDR_VAR 0 3
29905: PUSH
29906: LD_INT 0
29908: ST_TO_ADDR
// exit ;
29909: POP
29910: POP
29911: GO 29917
// end ;
29913: GO 29878
29915: POP
29916: POP
// end ;
29917: LD_VAR 0 3
29921: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29922: LD_INT 0
29924: PPUSH
29925: PPUSH
29926: PPUSH
29927: PPUSH
29928: PPUSH
29929: PPUSH
29930: PPUSH
29931: PPUSH
29932: PPUSH
29933: PPUSH
29934: PPUSH
29935: PPUSH
29936: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29937: LD_VAR 0 1
29941: NOT
29942: PUSH
29943: LD_VAR 0 1
29947: PPUSH
29948: CALL_OW 257
29952: PUSH
29953: LD_INT 9
29955: NONEQUAL
29956: OR
29957: IFFALSE 29961
// exit ;
29959: GO 30534
// side := GetSide ( unit ) ;
29961: LD_ADDR_VAR 0 9
29965: PUSH
29966: LD_VAR 0 1
29970: PPUSH
29971: CALL_OW 255
29975: ST_TO_ADDR
// tech_space := tech_spacanom ;
29976: LD_ADDR_VAR 0 12
29980: PUSH
29981: LD_INT 29
29983: ST_TO_ADDR
// tech_time := tech_taurad ;
29984: LD_ADDR_VAR 0 13
29988: PUSH
29989: LD_INT 28
29991: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29992: LD_ADDR_VAR 0 11
29996: PUSH
29997: LD_VAR 0 1
30001: PPUSH
30002: CALL_OW 310
30006: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30007: LD_VAR 0 11
30011: PPUSH
30012: CALL_OW 247
30016: PUSH
30017: LD_INT 2
30019: EQUAL
30020: IFFALSE 30024
// exit ;
30022: GO 30534
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30024: LD_ADDR_VAR 0 8
30028: PUSH
30029: LD_INT 81
30031: PUSH
30032: LD_VAR 0 9
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: LD_INT 3
30043: PUSH
30044: LD_INT 21
30046: PUSH
30047: LD_INT 3
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PPUSH
30062: CALL_OW 69
30066: ST_TO_ADDR
// if not tmp then
30067: LD_VAR 0 8
30071: NOT
30072: IFFALSE 30076
// exit ;
30074: GO 30534
// if in_unit then
30076: LD_VAR 0 11
30080: IFFALSE 30104
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30082: LD_ADDR_VAR 0 10
30086: PUSH
30087: LD_VAR 0 8
30091: PPUSH
30092: LD_VAR 0 11
30096: PPUSH
30097: CALL_OW 74
30101: ST_TO_ADDR
30102: GO 30124
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30104: LD_ADDR_VAR 0 10
30108: PUSH
30109: LD_VAR 0 8
30113: PPUSH
30114: LD_VAR 0 1
30118: PPUSH
30119: CALL_OW 74
30123: ST_TO_ADDR
// if not enemy then
30124: LD_VAR 0 10
30128: NOT
30129: IFFALSE 30133
// exit ;
30131: GO 30534
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30133: LD_VAR 0 11
30137: PUSH
30138: LD_VAR 0 11
30142: PPUSH
30143: LD_VAR 0 10
30147: PPUSH
30148: CALL_OW 296
30152: PUSH
30153: LD_INT 13
30155: GREATER
30156: AND
30157: PUSH
30158: LD_VAR 0 1
30162: PPUSH
30163: LD_VAR 0 10
30167: PPUSH
30168: CALL_OW 296
30172: PUSH
30173: LD_INT 12
30175: GREATER
30176: OR
30177: IFFALSE 30181
// exit ;
30179: GO 30534
// missile := [ 1 ] ;
30181: LD_ADDR_VAR 0 14
30185: PUSH
30186: LD_INT 1
30188: PUSH
30189: EMPTY
30190: LIST
30191: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30192: LD_VAR 0 9
30196: PPUSH
30197: LD_VAR 0 12
30201: PPUSH
30202: CALL_OW 325
30206: IFFALSE 30235
// missile := Insert ( missile , missile + 1 , 2 ) ;
30208: LD_ADDR_VAR 0 14
30212: PUSH
30213: LD_VAR 0 14
30217: PPUSH
30218: LD_VAR 0 14
30222: PUSH
30223: LD_INT 1
30225: PLUS
30226: PPUSH
30227: LD_INT 2
30229: PPUSH
30230: CALL_OW 2
30234: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30235: LD_VAR 0 9
30239: PPUSH
30240: LD_VAR 0 13
30244: PPUSH
30245: CALL_OW 325
30249: PUSH
30250: LD_VAR 0 10
30254: PPUSH
30255: CALL_OW 255
30259: PPUSH
30260: LD_VAR 0 13
30264: PPUSH
30265: CALL_OW 325
30269: NOT
30270: AND
30271: IFFALSE 30300
// missile := Insert ( missile , missile + 1 , 3 ) ;
30273: LD_ADDR_VAR 0 14
30277: PUSH
30278: LD_VAR 0 14
30282: PPUSH
30283: LD_VAR 0 14
30287: PUSH
30288: LD_INT 1
30290: PLUS
30291: PPUSH
30292: LD_INT 3
30294: PPUSH
30295: CALL_OW 2
30299: ST_TO_ADDR
// if missile < 2 then
30300: LD_VAR 0 14
30304: PUSH
30305: LD_INT 2
30307: LESS
30308: IFFALSE 30312
// exit ;
30310: GO 30534
// x := GetX ( enemy ) ;
30312: LD_ADDR_VAR 0 4
30316: PUSH
30317: LD_VAR 0 10
30321: PPUSH
30322: CALL_OW 250
30326: ST_TO_ADDR
// y := GetY ( enemy ) ;
30327: LD_ADDR_VAR 0 5
30331: PUSH
30332: LD_VAR 0 10
30336: PPUSH
30337: CALL_OW 251
30341: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30342: LD_ADDR_VAR 0 6
30346: PUSH
30347: LD_VAR 0 4
30351: PUSH
30352: LD_INT 1
30354: NEG
30355: PPUSH
30356: LD_INT 1
30358: PPUSH
30359: CALL_OW 12
30363: PLUS
30364: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30365: LD_ADDR_VAR 0 7
30369: PUSH
30370: LD_VAR 0 5
30374: PUSH
30375: LD_INT 1
30377: NEG
30378: PPUSH
30379: LD_INT 1
30381: PPUSH
30382: CALL_OW 12
30386: PLUS
30387: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30388: LD_VAR 0 6
30392: PPUSH
30393: LD_VAR 0 7
30397: PPUSH
30398: CALL_OW 488
30402: NOT
30403: IFFALSE 30425
// begin _x := x ;
30405: LD_ADDR_VAR 0 6
30409: PUSH
30410: LD_VAR 0 4
30414: ST_TO_ADDR
// _y := y ;
30415: LD_ADDR_VAR 0 7
30419: PUSH
30420: LD_VAR 0 5
30424: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30425: LD_ADDR_VAR 0 3
30429: PUSH
30430: LD_INT 1
30432: PPUSH
30433: LD_VAR 0 14
30437: PPUSH
30438: CALL_OW 12
30442: ST_TO_ADDR
// case i of 1 :
30443: LD_VAR 0 3
30447: PUSH
30448: LD_INT 1
30450: DOUBLE
30451: EQUAL
30452: IFTRUE 30456
30454: GO 30473
30456: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30457: LD_VAR 0 1
30461: PPUSH
30462: LD_VAR 0 10
30466: PPUSH
30467: CALL_OW 115
30471: GO 30534
30473: LD_INT 2
30475: DOUBLE
30476: EQUAL
30477: IFTRUE 30481
30479: GO 30503
30481: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30482: LD_VAR 0 1
30486: PPUSH
30487: LD_VAR 0 6
30491: PPUSH
30492: LD_VAR 0 7
30496: PPUSH
30497: CALL_OW 153
30501: GO 30534
30503: LD_INT 3
30505: DOUBLE
30506: EQUAL
30507: IFTRUE 30511
30509: GO 30533
30511: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30512: LD_VAR 0 1
30516: PPUSH
30517: LD_VAR 0 6
30521: PPUSH
30522: LD_VAR 0 7
30526: PPUSH
30527: CALL_OW 154
30531: GO 30534
30533: POP
// end ;
30534: LD_VAR 0 2
30538: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30539: LD_INT 0
30541: PPUSH
30542: PPUSH
30543: PPUSH
30544: PPUSH
30545: PPUSH
30546: PPUSH
// if not unit or not building then
30547: LD_VAR 0 1
30551: NOT
30552: PUSH
30553: LD_VAR 0 2
30557: NOT
30558: OR
30559: IFFALSE 30563
// exit ;
30561: GO 30721
// x := GetX ( building ) ;
30563: LD_ADDR_VAR 0 5
30567: PUSH
30568: LD_VAR 0 2
30572: PPUSH
30573: CALL_OW 250
30577: ST_TO_ADDR
// y := GetY ( building ) ;
30578: LD_ADDR_VAR 0 6
30582: PUSH
30583: LD_VAR 0 2
30587: PPUSH
30588: CALL_OW 251
30592: ST_TO_ADDR
// for i = 0 to 5 do
30593: LD_ADDR_VAR 0 4
30597: PUSH
30598: DOUBLE
30599: LD_INT 0
30601: DEC
30602: ST_TO_ADDR
30603: LD_INT 5
30605: PUSH
30606: FOR_TO
30607: IFFALSE 30719
// begin _x := ShiftX ( x , i , 3 ) ;
30609: LD_ADDR_VAR 0 7
30613: PUSH
30614: LD_VAR 0 5
30618: PPUSH
30619: LD_VAR 0 4
30623: PPUSH
30624: LD_INT 3
30626: PPUSH
30627: CALL_OW 272
30631: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30632: LD_ADDR_VAR 0 8
30636: PUSH
30637: LD_VAR 0 6
30641: PPUSH
30642: LD_VAR 0 4
30646: PPUSH
30647: LD_INT 3
30649: PPUSH
30650: CALL_OW 273
30654: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30655: LD_VAR 0 7
30659: PPUSH
30660: LD_VAR 0 8
30664: PPUSH
30665: CALL_OW 488
30669: NOT
30670: IFFALSE 30674
// continue ;
30672: GO 30606
// if HexInfo ( _x , _y ) = 0 then
30674: LD_VAR 0 7
30678: PPUSH
30679: LD_VAR 0 8
30683: PPUSH
30684: CALL_OW 428
30688: PUSH
30689: LD_INT 0
30691: EQUAL
30692: IFFALSE 30717
// begin ComMoveXY ( unit , _x , _y ) ;
30694: LD_VAR 0 1
30698: PPUSH
30699: LD_VAR 0 7
30703: PPUSH
30704: LD_VAR 0 8
30708: PPUSH
30709: CALL_OW 111
// exit ;
30713: POP
30714: POP
30715: GO 30721
// end ; end ;
30717: GO 30606
30719: POP
30720: POP
// end ;
30721: LD_VAR 0 3
30725: RET
// export function ScanBase ( side , base_area ) ; begin
30726: LD_INT 0
30728: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30729: LD_ADDR_VAR 0 3
30733: PUSH
30734: LD_VAR 0 2
30738: PPUSH
30739: LD_INT 81
30741: PUSH
30742: LD_VAR 0 1
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PPUSH
30751: CALL_OW 70
30755: ST_TO_ADDR
// end ;
30756: LD_VAR 0 3
30760: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30761: LD_INT 0
30763: PPUSH
30764: PPUSH
30765: PPUSH
30766: PPUSH
// result := false ;
30767: LD_ADDR_VAR 0 2
30771: PUSH
30772: LD_INT 0
30774: ST_TO_ADDR
// side := GetSide ( unit ) ;
30775: LD_ADDR_VAR 0 3
30779: PUSH
30780: LD_VAR 0 1
30784: PPUSH
30785: CALL_OW 255
30789: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30790: LD_ADDR_VAR 0 4
30794: PUSH
30795: LD_VAR 0 1
30799: PPUSH
30800: CALL_OW 248
30804: ST_TO_ADDR
// case nat of 1 :
30805: LD_VAR 0 4
30809: PUSH
30810: LD_INT 1
30812: DOUBLE
30813: EQUAL
30814: IFTRUE 30818
30816: GO 30829
30818: POP
// tech := tech_lassight ; 2 :
30819: LD_ADDR_VAR 0 5
30823: PUSH
30824: LD_INT 12
30826: ST_TO_ADDR
30827: GO 30868
30829: LD_INT 2
30831: DOUBLE
30832: EQUAL
30833: IFTRUE 30837
30835: GO 30848
30837: POP
// tech := tech_mortar ; 3 :
30838: LD_ADDR_VAR 0 5
30842: PUSH
30843: LD_INT 41
30845: ST_TO_ADDR
30846: GO 30868
30848: LD_INT 3
30850: DOUBLE
30851: EQUAL
30852: IFTRUE 30856
30854: GO 30867
30856: POP
// tech := tech_bazooka ; end ;
30857: LD_ADDR_VAR 0 5
30861: PUSH
30862: LD_INT 44
30864: ST_TO_ADDR
30865: GO 30868
30867: POP
// if Researched ( side , tech ) then
30868: LD_VAR 0 3
30872: PPUSH
30873: LD_VAR 0 5
30877: PPUSH
30878: CALL_OW 325
30882: IFFALSE 30909
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30884: LD_ADDR_VAR 0 2
30888: PUSH
30889: LD_INT 5
30891: PUSH
30892: LD_INT 8
30894: PUSH
30895: LD_INT 9
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: LIST
30902: PUSH
30903: LD_VAR 0 4
30907: ARRAY
30908: ST_TO_ADDR
// end ;
30909: LD_VAR 0 2
30913: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30914: LD_INT 0
30916: PPUSH
30917: PPUSH
30918: PPUSH
// if not mines then
30919: LD_VAR 0 2
30923: NOT
30924: IFFALSE 30928
// exit ;
30926: GO 31072
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30928: LD_ADDR_VAR 0 5
30932: PUSH
30933: LD_INT 81
30935: PUSH
30936: LD_VAR 0 1
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 3
30947: PUSH
30948: LD_INT 21
30950: PUSH
30951: LD_INT 3
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: PPUSH
30966: CALL_OW 69
30970: ST_TO_ADDR
// for i in mines do
30971: LD_ADDR_VAR 0 4
30975: PUSH
30976: LD_VAR 0 2
30980: PUSH
30981: FOR_IN
30982: IFFALSE 31070
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30984: LD_VAR 0 4
30988: PUSH
30989: LD_INT 1
30991: ARRAY
30992: PPUSH
30993: LD_VAR 0 4
30997: PUSH
30998: LD_INT 2
31000: ARRAY
31001: PPUSH
31002: CALL_OW 458
31006: NOT
31007: IFFALSE 31011
// continue ;
31009: GO 30981
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31011: LD_VAR 0 4
31015: PUSH
31016: LD_INT 1
31018: ARRAY
31019: PPUSH
31020: LD_VAR 0 4
31024: PUSH
31025: LD_INT 2
31027: ARRAY
31028: PPUSH
31029: CALL_OW 428
31033: PUSH
31034: LD_VAR 0 5
31038: IN
31039: IFFALSE 31068
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31041: LD_VAR 0 4
31045: PUSH
31046: LD_INT 1
31048: ARRAY
31049: PPUSH
31050: LD_VAR 0 4
31054: PUSH
31055: LD_INT 2
31057: ARRAY
31058: PPUSH
31059: LD_VAR 0 1
31063: PPUSH
31064: CALL_OW 456
// end ;
31068: GO 30981
31070: POP
31071: POP
// end ;
31072: LD_VAR 0 3
31076: RET
// export function Count ( array ) ; var i ; begin
31077: LD_INT 0
31079: PPUSH
31080: PPUSH
// result := 0 ;
31081: LD_ADDR_VAR 0 2
31085: PUSH
31086: LD_INT 0
31088: ST_TO_ADDR
// for i in array do
31089: LD_ADDR_VAR 0 3
31093: PUSH
31094: LD_VAR 0 1
31098: PUSH
31099: FOR_IN
31100: IFFALSE 31124
// if i then
31102: LD_VAR 0 3
31106: IFFALSE 31122
// result := result + 1 ;
31108: LD_ADDR_VAR 0 2
31112: PUSH
31113: LD_VAR 0 2
31117: PUSH
31118: LD_INT 1
31120: PLUS
31121: ST_TO_ADDR
31122: GO 31099
31124: POP
31125: POP
// end ;
31126: LD_VAR 0 2
31130: RET
// export function IsEmpty ( building ) ; begin
31131: LD_INT 0
31133: PPUSH
// if not building then
31134: LD_VAR 0 1
31138: NOT
31139: IFFALSE 31143
// exit ;
31141: GO 31186
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31143: LD_ADDR_VAR 0 2
31147: PUSH
31148: LD_VAR 0 1
31152: PUSH
31153: LD_INT 22
31155: PUSH
31156: LD_VAR 0 1
31160: PPUSH
31161: CALL_OW 255
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PUSH
31170: LD_INT 58
31172: PUSH
31173: EMPTY
31174: LIST
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PPUSH
31180: CALL_OW 69
31184: IN
31185: ST_TO_ADDR
// end ;
31186: LD_VAR 0 2
31190: RET
// export function IsNotFull ( building ) ; begin
31191: LD_INT 0
31193: PPUSH
// if not building then
31194: LD_VAR 0 1
31198: NOT
31199: IFFALSE 31203
// exit ;
31201: GO 31222
// result := UnitsInside ( building ) < 6 ;
31203: LD_ADDR_VAR 0 2
31207: PUSH
31208: LD_VAR 0 1
31212: PPUSH
31213: CALL_OW 313
31217: PUSH
31218: LD_INT 6
31220: LESS
31221: ST_TO_ADDR
// end ;
31222: LD_VAR 0 2
31226: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31227: LD_INT 0
31229: PPUSH
31230: PPUSH
31231: PPUSH
31232: PPUSH
// tmp := [ ] ;
31233: LD_ADDR_VAR 0 3
31237: PUSH
31238: EMPTY
31239: ST_TO_ADDR
// list := [ ] ;
31240: LD_ADDR_VAR 0 5
31244: PUSH
31245: EMPTY
31246: ST_TO_ADDR
// for i = 16 to 25 do
31247: LD_ADDR_VAR 0 4
31251: PUSH
31252: DOUBLE
31253: LD_INT 16
31255: DEC
31256: ST_TO_ADDR
31257: LD_INT 25
31259: PUSH
31260: FOR_TO
31261: IFFALSE 31334
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31263: LD_ADDR_VAR 0 3
31267: PUSH
31268: LD_VAR 0 3
31272: PUSH
31273: LD_INT 22
31275: PUSH
31276: LD_VAR 0 1
31280: PPUSH
31281: CALL_OW 255
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 91
31292: PUSH
31293: LD_VAR 0 1
31297: PUSH
31298: LD_INT 6
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 30
31308: PUSH
31309: LD_VAR 0 4
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: LIST
31322: PUSH
31323: EMPTY
31324: LIST
31325: PPUSH
31326: CALL_OW 69
31330: ADD
31331: ST_TO_ADDR
31332: GO 31260
31334: POP
31335: POP
// for i = 1 to tmp do
31336: LD_ADDR_VAR 0 4
31340: PUSH
31341: DOUBLE
31342: LD_INT 1
31344: DEC
31345: ST_TO_ADDR
31346: LD_VAR 0 3
31350: PUSH
31351: FOR_TO
31352: IFFALSE 31440
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31354: LD_ADDR_VAR 0 5
31358: PUSH
31359: LD_VAR 0 5
31363: PUSH
31364: LD_VAR 0 3
31368: PUSH
31369: LD_VAR 0 4
31373: ARRAY
31374: PPUSH
31375: CALL_OW 266
31379: PUSH
31380: LD_VAR 0 3
31384: PUSH
31385: LD_VAR 0 4
31389: ARRAY
31390: PPUSH
31391: CALL_OW 250
31395: PUSH
31396: LD_VAR 0 3
31400: PUSH
31401: LD_VAR 0 4
31405: ARRAY
31406: PPUSH
31407: CALL_OW 251
31411: PUSH
31412: LD_VAR 0 3
31416: PUSH
31417: LD_VAR 0 4
31421: ARRAY
31422: PPUSH
31423: CALL_OW 254
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: PUSH
31434: EMPTY
31435: LIST
31436: ADD
31437: ST_TO_ADDR
31438: GO 31351
31440: POP
31441: POP
// result := list ;
31442: LD_ADDR_VAR 0 2
31446: PUSH
31447: LD_VAR 0 5
31451: ST_TO_ADDR
// end ;
31452: LD_VAR 0 2
31456: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31457: LD_INT 0
31459: PPUSH
31460: PPUSH
31461: PPUSH
31462: PPUSH
31463: PPUSH
31464: PPUSH
31465: PPUSH
// if not factory then
31466: LD_VAR 0 1
31470: NOT
31471: IFFALSE 31475
// exit ;
31473: GO 32068
// if control = control_apeman then
31475: LD_VAR 0 4
31479: PUSH
31480: LD_INT 5
31482: EQUAL
31483: IFFALSE 31592
// begin tmp := UnitsInside ( factory ) ;
31485: LD_ADDR_VAR 0 8
31489: PUSH
31490: LD_VAR 0 1
31494: PPUSH
31495: CALL_OW 313
31499: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31500: LD_VAR 0 8
31504: PPUSH
31505: LD_INT 25
31507: PUSH
31508: LD_INT 12
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PPUSH
31515: CALL_OW 72
31519: NOT
31520: IFFALSE 31530
// control := control_manual ;
31522: LD_ADDR_VAR 0 4
31526: PUSH
31527: LD_INT 1
31529: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31530: LD_ADDR_VAR 0 8
31534: PUSH
31535: LD_VAR 0 1
31539: PPUSH
31540: CALL 31227 0 1
31544: ST_TO_ADDR
// if tmp then
31545: LD_VAR 0 8
31549: IFFALSE 31592
// begin for i in tmp do
31551: LD_ADDR_VAR 0 7
31555: PUSH
31556: LD_VAR 0 8
31560: PUSH
31561: FOR_IN
31562: IFFALSE 31590
// if i [ 1 ] = b_ext_radio then
31564: LD_VAR 0 7
31568: PUSH
31569: LD_INT 1
31571: ARRAY
31572: PUSH
31573: LD_INT 22
31575: EQUAL
31576: IFFALSE 31588
// begin control := control_remote ;
31578: LD_ADDR_VAR 0 4
31582: PUSH
31583: LD_INT 2
31585: ST_TO_ADDR
// break ;
31586: GO 31590
// end ;
31588: GO 31561
31590: POP
31591: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31592: LD_VAR 0 1
31596: PPUSH
31597: LD_VAR 0 2
31601: PPUSH
31602: LD_VAR 0 3
31606: PPUSH
31607: LD_VAR 0 4
31611: PPUSH
31612: LD_VAR 0 5
31616: PPUSH
31617: CALL_OW 448
31621: IFFALSE 31656
// begin result := [ chassis , engine , control , weapon ] ;
31623: LD_ADDR_VAR 0 6
31627: PUSH
31628: LD_VAR 0 2
31632: PUSH
31633: LD_VAR 0 3
31637: PUSH
31638: LD_VAR 0 4
31642: PUSH
31643: LD_VAR 0 5
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: ST_TO_ADDR
// exit ;
31654: GO 32068
// end ; _chassis := AvailableChassisList ( factory ) ;
31656: LD_ADDR_VAR 0 9
31660: PUSH
31661: LD_VAR 0 1
31665: PPUSH
31666: CALL_OW 475
31670: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31671: LD_ADDR_VAR 0 11
31675: PUSH
31676: LD_VAR 0 1
31680: PPUSH
31681: CALL_OW 476
31685: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31686: LD_ADDR_VAR 0 12
31690: PUSH
31691: LD_VAR 0 1
31695: PPUSH
31696: CALL_OW 477
31700: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31701: LD_ADDR_VAR 0 10
31705: PUSH
31706: LD_VAR 0 1
31710: PPUSH
31711: CALL_OW 478
31715: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31716: LD_VAR 0 9
31720: NOT
31721: PUSH
31722: LD_VAR 0 11
31726: NOT
31727: OR
31728: PUSH
31729: LD_VAR 0 12
31733: NOT
31734: OR
31735: PUSH
31736: LD_VAR 0 10
31740: NOT
31741: OR
31742: IFFALSE 31777
// begin result := [ chassis , engine , control , weapon ] ;
31744: LD_ADDR_VAR 0 6
31748: PUSH
31749: LD_VAR 0 2
31753: PUSH
31754: LD_VAR 0 3
31758: PUSH
31759: LD_VAR 0 4
31763: PUSH
31764: LD_VAR 0 5
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: ST_TO_ADDR
// exit ;
31775: GO 32068
// end ; if not chassis in _chassis then
31777: LD_VAR 0 2
31781: PUSH
31782: LD_VAR 0 9
31786: IN
31787: NOT
31788: IFFALSE 31814
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31790: LD_ADDR_VAR 0 2
31794: PUSH
31795: LD_VAR 0 9
31799: PUSH
31800: LD_INT 1
31802: PPUSH
31803: LD_VAR 0 9
31807: PPUSH
31808: CALL_OW 12
31812: ARRAY
31813: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31814: LD_VAR 0 2
31818: PPUSH
31819: LD_VAR 0 3
31823: PPUSH
31824: CALL 32073 0 2
31828: NOT
31829: IFFALSE 31888
// repeat engine := _engine [ 1 ] ;
31831: LD_ADDR_VAR 0 3
31835: PUSH
31836: LD_VAR 0 11
31840: PUSH
31841: LD_INT 1
31843: ARRAY
31844: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31845: LD_ADDR_VAR 0 11
31849: PUSH
31850: LD_VAR 0 11
31854: PPUSH
31855: LD_INT 1
31857: PPUSH
31858: CALL_OW 3
31862: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31863: LD_VAR 0 2
31867: PPUSH
31868: LD_VAR 0 3
31872: PPUSH
31873: CALL 32073 0 2
31877: PUSH
31878: LD_VAR 0 11
31882: PUSH
31883: EMPTY
31884: EQUAL
31885: OR
31886: IFFALSE 31831
// if not control in _control then
31888: LD_VAR 0 4
31892: PUSH
31893: LD_VAR 0 12
31897: IN
31898: NOT
31899: IFFALSE 31925
// control := _control [ rand ( 1 , _control ) ] ;
31901: LD_ADDR_VAR 0 4
31905: PUSH
31906: LD_VAR 0 12
31910: PUSH
31911: LD_INT 1
31913: PPUSH
31914: LD_VAR 0 12
31918: PPUSH
31919: CALL_OW 12
31923: ARRAY
31924: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31925: LD_VAR 0 2
31929: PPUSH
31930: LD_VAR 0 5
31934: PPUSH
31935: CALL 32293 0 2
31939: NOT
31940: IFFALSE 31999
// repeat weapon := _weapon [ 1 ] ;
31942: LD_ADDR_VAR 0 5
31946: PUSH
31947: LD_VAR 0 10
31951: PUSH
31952: LD_INT 1
31954: ARRAY
31955: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31956: LD_ADDR_VAR 0 10
31960: PUSH
31961: LD_VAR 0 10
31965: PPUSH
31966: LD_INT 1
31968: PPUSH
31969: CALL_OW 3
31973: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31974: LD_VAR 0 2
31978: PPUSH
31979: LD_VAR 0 5
31983: PPUSH
31984: CALL 32293 0 2
31988: PUSH
31989: LD_VAR 0 10
31993: PUSH
31994: EMPTY
31995: EQUAL
31996: OR
31997: IFFALSE 31942
// result := [ ] ;
31999: LD_ADDR_VAR 0 6
32003: PUSH
32004: EMPTY
32005: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32006: LD_VAR 0 1
32010: PPUSH
32011: LD_VAR 0 2
32015: PPUSH
32016: LD_VAR 0 3
32020: PPUSH
32021: LD_VAR 0 4
32025: PPUSH
32026: LD_VAR 0 5
32030: PPUSH
32031: CALL_OW 448
32035: IFFALSE 32068
// result := [ chassis , engine , control , weapon ] ;
32037: LD_ADDR_VAR 0 6
32041: PUSH
32042: LD_VAR 0 2
32046: PUSH
32047: LD_VAR 0 3
32051: PUSH
32052: LD_VAR 0 4
32056: PUSH
32057: LD_VAR 0 5
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: ST_TO_ADDR
// end ;
32068: LD_VAR 0 6
32072: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32073: LD_INT 0
32075: PPUSH
// if not chassis or not engine then
32076: LD_VAR 0 1
32080: NOT
32081: PUSH
32082: LD_VAR 0 2
32086: NOT
32087: OR
32088: IFFALSE 32092
// exit ;
32090: GO 32288
// case engine of engine_solar :
32092: LD_VAR 0 2
32096: PUSH
32097: LD_INT 2
32099: DOUBLE
32100: EQUAL
32101: IFTRUE 32105
32103: GO 32143
32105: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32106: LD_ADDR_VAR 0 3
32110: PUSH
32111: LD_INT 11
32113: PUSH
32114: LD_INT 12
32116: PUSH
32117: LD_INT 13
32119: PUSH
32120: LD_INT 14
32122: PUSH
32123: LD_INT 1
32125: PUSH
32126: LD_INT 2
32128: PUSH
32129: LD_INT 3
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: ST_TO_ADDR
32141: GO 32272
32143: LD_INT 1
32145: DOUBLE
32146: EQUAL
32147: IFTRUE 32151
32149: GO 32213
32151: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32152: LD_ADDR_VAR 0 3
32156: PUSH
32157: LD_INT 11
32159: PUSH
32160: LD_INT 12
32162: PUSH
32163: LD_INT 13
32165: PUSH
32166: LD_INT 14
32168: PUSH
32169: LD_INT 1
32171: PUSH
32172: LD_INT 2
32174: PUSH
32175: LD_INT 3
32177: PUSH
32178: LD_INT 4
32180: PUSH
32181: LD_INT 5
32183: PUSH
32184: LD_INT 21
32186: PUSH
32187: LD_INT 23
32189: PUSH
32190: LD_INT 22
32192: PUSH
32193: LD_INT 24
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: ST_TO_ADDR
32211: GO 32272
32213: LD_INT 3
32215: DOUBLE
32216: EQUAL
32217: IFTRUE 32221
32219: GO 32271
32221: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32222: LD_ADDR_VAR 0 3
32226: PUSH
32227: LD_INT 13
32229: PUSH
32230: LD_INT 14
32232: PUSH
32233: LD_INT 2
32235: PUSH
32236: LD_INT 3
32238: PUSH
32239: LD_INT 4
32241: PUSH
32242: LD_INT 5
32244: PUSH
32245: LD_INT 21
32247: PUSH
32248: LD_INT 22
32250: PUSH
32251: LD_INT 23
32253: PUSH
32254: LD_INT 24
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: ST_TO_ADDR
32269: GO 32272
32271: POP
// result := ( chassis in result ) ;
32272: LD_ADDR_VAR 0 3
32276: PUSH
32277: LD_VAR 0 1
32281: PUSH
32282: LD_VAR 0 3
32286: IN
32287: ST_TO_ADDR
// end ;
32288: LD_VAR 0 3
32292: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32293: LD_INT 0
32295: PPUSH
// if not chassis or not weapon then
32296: LD_VAR 0 1
32300: NOT
32301: PUSH
32302: LD_VAR 0 2
32306: NOT
32307: OR
32308: IFFALSE 32312
// exit ;
32310: GO 33374
// case weapon of us_machine_gun :
32312: LD_VAR 0 2
32316: PUSH
32317: LD_INT 2
32319: DOUBLE
32320: EQUAL
32321: IFTRUE 32325
32323: GO 32355
32325: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32326: LD_ADDR_VAR 0 3
32330: PUSH
32331: LD_INT 1
32333: PUSH
32334: LD_INT 2
32336: PUSH
32337: LD_INT 3
32339: PUSH
32340: LD_INT 4
32342: PUSH
32343: LD_INT 5
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: ST_TO_ADDR
32353: GO 33358
32355: LD_INT 3
32357: DOUBLE
32358: EQUAL
32359: IFTRUE 32363
32361: GO 32393
32363: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32364: LD_ADDR_VAR 0 3
32368: PUSH
32369: LD_INT 1
32371: PUSH
32372: LD_INT 2
32374: PUSH
32375: LD_INT 3
32377: PUSH
32378: LD_INT 4
32380: PUSH
32381: LD_INT 5
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: ST_TO_ADDR
32391: GO 33358
32393: LD_INT 11
32395: DOUBLE
32396: EQUAL
32397: IFTRUE 32401
32399: GO 32431
32401: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32402: LD_ADDR_VAR 0 3
32406: PUSH
32407: LD_INT 1
32409: PUSH
32410: LD_INT 2
32412: PUSH
32413: LD_INT 3
32415: PUSH
32416: LD_INT 4
32418: PUSH
32419: LD_INT 5
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: ST_TO_ADDR
32429: GO 33358
32431: LD_INT 4
32433: DOUBLE
32434: EQUAL
32435: IFTRUE 32439
32437: GO 32465
32439: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32440: LD_ADDR_VAR 0 3
32444: PUSH
32445: LD_INT 2
32447: PUSH
32448: LD_INT 3
32450: PUSH
32451: LD_INT 4
32453: PUSH
32454: LD_INT 5
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: ST_TO_ADDR
32463: GO 33358
32465: LD_INT 5
32467: DOUBLE
32468: EQUAL
32469: IFTRUE 32473
32471: GO 32499
32473: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32474: LD_ADDR_VAR 0 3
32478: PUSH
32479: LD_INT 2
32481: PUSH
32482: LD_INT 3
32484: PUSH
32485: LD_INT 4
32487: PUSH
32488: LD_INT 5
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: ST_TO_ADDR
32497: GO 33358
32499: LD_INT 9
32501: DOUBLE
32502: EQUAL
32503: IFTRUE 32507
32505: GO 32533
32507: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32508: LD_ADDR_VAR 0 3
32512: PUSH
32513: LD_INT 2
32515: PUSH
32516: LD_INT 3
32518: PUSH
32519: LD_INT 4
32521: PUSH
32522: LD_INT 5
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: ST_TO_ADDR
32531: GO 33358
32533: LD_INT 7
32535: DOUBLE
32536: EQUAL
32537: IFTRUE 32541
32539: GO 32567
32541: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32542: LD_ADDR_VAR 0 3
32546: PUSH
32547: LD_INT 2
32549: PUSH
32550: LD_INT 3
32552: PUSH
32553: LD_INT 4
32555: PUSH
32556: LD_INT 5
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: ST_TO_ADDR
32565: GO 33358
32567: LD_INT 12
32569: DOUBLE
32570: EQUAL
32571: IFTRUE 32575
32573: GO 32601
32575: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32576: LD_ADDR_VAR 0 3
32580: PUSH
32581: LD_INT 2
32583: PUSH
32584: LD_INT 3
32586: PUSH
32587: LD_INT 4
32589: PUSH
32590: LD_INT 5
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: ST_TO_ADDR
32599: GO 33358
32601: LD_INT 13
32603: DOUBLE
32604: EQUAL
32605: IFTRUE 32609
32607: GO 32635
32609: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32610: LD_ADDR_VAR 0 3
32614: PUSH
32615: LD_INT 2
32617: PUSH
32618: LD_INT 3
32620: PUSH
32621: LD_INT 4
32623: PUSH
32624: LD_INT 5
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: ST_TO_ADDR
32633: GO 33358
32635: LD_INT 14
32637: DOUBLE
32638: EQUAL
32639: IFTRUE 32643
32641: GO 32661
32643: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32644: LD_ADDR_VAR 0 3
32648: PUSH
32649: LD_INT 4
32651: PUSH
32652: LD_INT 5
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: ST_TO_ADDR
32659: GO 33358
32661: LD_INT 6
32663: DOUBLE
32664: EQUAL
32665: IFTRUE 32669
32667: GO 32687
32669: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32670: LD_ADDR_VAR 0 3
32674: PUSH
32675: LD_INT 4
32677: PUSH
32678: LD_INT 5
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: ST_TO_ADDR
32685: GO 33358
32687: LD_INT 10
32689: DOUBLE
32690: EQUAL
32691: IFTRUE 32695
32693: GO 32713
32695: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32696: LD_ADDR_VAR 0 3
32700: PUSH
32701: LD_INT 4
32703: PUSH
32704: LD_INT 5
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: ST_TO_ADDR
32711: GO 33358
32713: LD_INT 22
32715: DOUBLE
32716: EQUAL
32717: IFTRUE 32721
32719: GO 32747
32721: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32722: LD_ADDR_VAR 0 3
32726: PUSH
32727: LD_INT 11
32729: PUSH
32730: LD_INT 12
32732: PUSH
32733: LD_INT 13
32735: PUSH
32736: LD_INT 14
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: ST_TO_ADDR
32745: GO 33358
32747: LD_INT 23
32749: DOUBLE
32750: EQUAL
32751: IFTRUE 32755
32753: GO 32781
32755: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32756: LD_ADDR_VAR 0 3
32760: PUSH
32761: LD_INT 11
32763: PUSH
32764: LD_INT 12
32766: PUSH
32767: LD_INT 13
32769: PUSH
32770: LD_INT 14
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: ST_TO_ADDR
32779: GO 33358
32781: LD_INT 24
32783: DOUBLE
32784: EQUAL
32785: IFTRUE 32789
32787: GO 32815
32789: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32790: LD_ADDR_VAR 0 3
32794: PUSH
32795: LD_INT 11
32797: PUSH
32798: LD_INT 12
32800: PUSH
32801: LD_INT 13
32803: PUSH
32804: LD_INT 14
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: ST_TO_ADDR
32813: GO 33358
32815: LD_INT 30
32817: DOUBLE
32818: EQUAL
32819: IFTRUE 32823
32821: GO 32849
32823: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32824: LD_ADDR_VAR 0 3
32828: PUSH
32829: LD_INT 11
32831: PUSH
32832: LD_INT 12
32834: PUSH
32835: LD_INT 13
32837: PUSH
32838: LD_INT 14
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: ST_TO_ADDR
32847: GO 33358
32849: LD_INT 25
32851: DOUBLE
32852: EQUAL
32853: IFTRUE 32857
32855: GO 32875
32857: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32858: LD_ADDR_VAR 0 3
32862: PUSH
32863: LD_INT 13
32865: PUSH
32866: LD_INT 14
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: ST_TO_ADDR
32873: GO 33358
32875: LD_INT 27
32877: DOUBLE
32878: EQUAL
32879: IFTRUE 32883
32881: GO 32901
32883: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32884: LD_ADDR_VAR 0 3
32888: PUSH
32889: LD_INT 13
32891: PUSH
32892: LD_INT 14
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: ST_TO_ADDR
32899: GO 33358
32901: LD_EXP 100
32905: DOUBLE
32906: EQUAL
32907: IFTRUE 32911
32909: GO 32937
32911: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32912: LD_ADDR_VAR 0 3
32916: PUSH
32917: LD_INT 11
32919: PUSH
32920: LD_INT 12
32922: PUSH
32923: LD_INT 13
32925: PUSH
32926: LD_INT 14
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: ST_TO_ADDR
32935: GO 33358
32937: LD_INT 28
32939: DOUBLE
32940: EQUAL
32941: IFTRUE 32945
32943: GO 32963
32945: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32946: LD_ADDR_VAR 0 3
32950: PUSH
32951: LD_INT 13
32953: PUSH
32954: LD_INT 14
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: ST_TO_ADDR
32961: GO 33358
32963: LD_INT 29
32965: DOUBLE
32966: EQUAL
32967: IFTRUE 32971
32969: GO 32989
32971: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32972: LD_ADDR_VAR 0 3
32976: PUSH
32977: LD_INT 13
32979: PUSH
32980: LD_INT 14
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: ST_TO_ADDR
32987: GO 33358
32989: LD_INT 31
32991: DOUBLE
32992: EQUAL
32993: IFTRUE 32997
32995: GO 33015
32997: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32998: LD_ADDR_VAR 0 3
33002: PUSH
33003: LD_INT 13
33005: PUSH
33006: LD_INT 14
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: ST_TO_ADDR
33013: GO 33358
33015: LD_INT 26
33017: DOUBLE
33018: EQUAL
33019: IFTRUE 33023
33021: GO 33041
33023: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33024: LD_ADDR_VAR 0 3
33028: PUSH
33029: LD_INT 13
33031: PUSH
33032: LD_INT 14
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: ST_TO_ADDR
33039: GO 33358
33041: LD_INT 42
33043: DOUBLE
33044: EQUAL
33045: IFTRUE 33049
33047: GO 33075
33049: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33050: LD_ADDR_VAR 0 3
33054: PUSH
33055: LD_INT 21
33057: PUSH
33058: LD_INT 22
33060: PUSH
33061: LD_INT 23
33063: PUSH
33064: LD_INT 24
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: ST_TO_ADDR
33073: GO 33358
33075: LD_INT 43
33077: DOUBLE
33078: EQUAL
33079: IFTRUE 33083
33081: GO 33109
33083: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33084: LD_ADDR_VAR 0 3
33088: PUSH
33089: LD_INT 21
33091: PUSH
33092: LD_INT 22
33094: PUSH
33095: LD_INT 23
33097: PUSH
33098: LD_INT 24
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: ST_TO_ADDR
33107: GO 33358
33109: LD_INT 44
33111: DOUBLE
33112: EQUAL
33113: IFTRUE 33117
33115: GO 33143
33117: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33118: LD_ADDR_VAR 0 3
33122: PUSH
33123: LD_INT 21
33125: PUSH
33126: LD_INT 22
33128: PUSH
33129: LD_INT 23
33131: PUSH
33132: LD_INT 24
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: ST_TO_ADDR
33141: GO 33358
33143: LD_INT 45
33145: DOUBLE
33146: EQUAL
33147: IFTRUE 33151
33149: GO 33177
33151: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33152: LD_ADDR_VAR 0 3
33156: PUSH
33157: LD_INT 21
33159: PUSH
33160: LD_INT 22
33162: PUSH
33163: LD_INT 23
33165: PUSH
33166: LD_INT 24
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: ST_TO_ADDR
33175: GO 33358
33177: LD_INT 49
33179: DOUBLE
33180: EQUAL
33181: IFTRUE 33185
33183: GO 33211
33185: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33186: LD_ADDR_VAR 0 3
33190: PUSH
33191: LD_INT 21
33193: PUSH
33194: LD_INT 22
33196: PUSH
33197: LD_INT 23
33199: PUSH
33200: LD_INT 24
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: ST_TO_ADDR
33209: GO 33358
33211: LD_INT 51
33213: DOUBLE
33214: EQUAL
33215: IFTRUE 33219
33217: GO 33245
33219: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33220: LD_ADDR_VAR 0 3
33224: PUSH
33225: LD_INT 21
33227: PUSH
33228: LD_INT 22
33230: PUSH
33231: LD_INT 23
33233: PUSH
33234: LD_INT 24
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: ST_TO_ADDR
33243: GO 33358
33245: LD_INT 52
33247: DOUBLE
33248: EQUAL
33249: IFTRUE 33253
33251: GO 33279
33253: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33254: LD_ADDR_VAR 0 3
33258: PUSH
33259: LD_INT 21
33261: PUSH
33262: LD_INT 22
33264: PUSH
33265: LD_INT 23
33267: PUSH
33268: LD_INT 24
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: ST_TO_ADDR
33277: GO 33358
33279: LD_INT 53
33281: DOUBLE
33282: EQUAL
33283: IFTRUE 33287
33285: GO 33305
33287: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33288: LD_ADDR_VAR 0 3
33292: PUSH
33293: LD_INT 23
33295: PUSH
33296: LD_INT 24
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: ST_TO_ADDR
33303: GO 33358
33305: LD_INT 46
33307: DOUBLE
33308: EQUAL
33309: IFTRUE 33313
33311: GO 33331
33313: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33314: LD_ADDR_VAR 0 3
33318: PUSH
33319: LD_INT 23
33321: PUSH
33322: LD_INT 24
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: ST_TO_ADDR
33329: GO 33358
33331: LD_INT 47
33333: DOUBLE
33334: EQUAL
33335: IFTRUE 33339
33337: GO 33357
33339: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33340: LD_ADDR_VAR 0 3
33344: PUSH
33345: LD_INT 23
33347: PUSH
33348: LD_INT 24
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: ST_TO_ADDR
33355: GO 33358
33357: POP
// result := ( chassis in result ) ;
33358: LD_ADDR_VAR 0 3
33362: PUSH
33363: LD_VAR 0 1
33367: PUSH
33368: LD_VAR 0 3
33372: IN
33373: ST_TO_ADDR
// end ;
33374: LD_VAR 0 3
33378: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33379: LD_INT 0
33381: PPUSH
33382: PPUSH
33383: PPUSH
33384: PPUSH
33385: PPUSH
33386: PPUSH
33387: PPUSH
// result := array ;
33388: LD_ADDR_VAR 0 5
33392: PUSH
33393: LD_VAR 0 1
33397: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33398: LD_VAR 0 1
33402: NOT
33403: PUSH
33404: LD_VAR 0 2
33408: NOT
33409: OR
33410: PUSH
33411: LD_VAR 0 3
33415: NOT
33416: OR
33417: PUSH
33418: LD_VAR 0 2
33422: PUSH
33423: LD_VAR 0 1
33427: GREATER
33428: OR
33429: PUSH
33430: LD_VAR 0 3
33434: PUSH
33435: LD_VAR 0 1
33439: GREATER
33440: OR
33441: IFFALSE 33445
// exit ;
33443: GO 33741
// if direction then
33445: LD_VAR 0 4
33449: IFFALSE 33513
// begin d := 1 ;
33451: LD_ADDR_VAR 0 9
33455: PUSH
33456: LD_INT 1
33458: ST_TO_ADDR
// if i_from > i_to then
33459: LD_VAR 0 2
33463: PUSH
33464: LD_VAR 0 3
33468: GREATER
33469: IFFALSE 33495
// length := ( array - i_from ) + i_to else
33471: LD_ADDR_VAR 0 11
33475: PUSH
33476: LD_VAR 0 1
33480: PUSH
33481: LD_VAR 0 2
33485: MINUS
33486: PUSH
33487: LD_VAR 0 3
33491: PLUS
33492: ST_TO_ADDR
33493: GO 33511
// length := i_to - i_from ;
33495: LD_ADDR_VAR 0 11
33499: PUSH
33500: LD_VAR 0 3
33504: PUSH
33505: LD_VAR 0 2
33509: MINUS
33510: ST_TO_ADDR
// end else
33511: GO 33574
// begin d := - 1 ;
33513: LD_ADDR_VAR 0 9
33517: PUSH
33518: LD_INT 1
33520: NEG
33521: ST_TO_ADDR
// if i_from > i_to then
33522: LD_VAR 0 2
33526: PUSH
33527: LD_VAR 0 3
33531: GREATER
33532: IFFALSE 33552
// length := i_from - i_to else
33534: LD_ADDR_VAR 0 11
33538: PUSH
33539: LD_VAR 0 2
33543: PUSH
33544: LD_VAR 0 3
33548: MINUS
33549: ST_TO_ADDR
33550: GO 33574
// length := ( array - i_to ) + i_from ;
33552: LD_ADDR_VAR 0 11
33556: PUSH
33557: LD_VAR 0 1
33561: PUSH
33562: LD_VAR 0 3
33566: MINUS
33567: PUSH
33568: LD_VAR 0 2
33572: PLUS
33573: ST_TO_ADDR
// end ; if not length then
33574: LD_VAR 0 11
33578: NOT
33579: IFFALSE 33583
// exit ;
33581: GO 33741
// tmp := array ;
33583: LD_ADDR_VAR 0 10
33587: PUSH
33588: LD_VAR 0 1
33592: ST_TO_ADDR
// for i = 1 to length do
33593: LD_ADDR_VAR 0 6
33597: PUSH
33598: DOUBLE
33599: LD_INT 1
33601: DEC
33602: ST_TO_ADDR
33603: LD_VAR 0 11
33607: PUSH
33608: FOR_TO
33609: IFFALSE 33729
// begin for j = 1 to array do
33611: LD_ADDR_VAR 0 7
33615: PUSH
33616: DOUBLE
33617: LD_INT 1
33619: DEC
33620: ST_TO_ADDR
33621: LD_VAR 0 1
33625: PUSH
33626: FOR_TO
33627: IFFALSE 33715
// begin k := j + d ;
33629: LD_ADDR_VAR 0 8
33633: PUSH
33634: LD_VAR 0 7
33638: PUSH
33639: LD_VAR 0 9
33643: PLUS
33644: ST_TO_ADDR
// if k > array then
33645: LD_VAR 0 8
33649: PUSH
33650: LD_VAR 0 1
33654: GREATER
33655: IFFALSE 33665
// k := 1 ;
33657: LD_ADDR_VAR 0 8
33661: PUSH
33662: LD_INT 1
33664: ST_TO_ADDR
// if not k then
33665: LD_VAR 0 8
33669: NOT
33670: IFFALSE 33682
// k := array ;
33672: LD_ADDR_VAR 0 8
33676: PUSH
33677: LD_VAR 0 1
33681: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33682: LD_ADDR_VAR 0 10
33686: PUSH
33687: LD_VAR 0 10
33691: PPUSH
33692: LD_VAR 0 8
33696: PPUSH
33697: LD_VAR 0 1
33701: PUSH
33702: LD_VAR 0 7
33706: ARRAY
33707: PPUSH
33708: CALL_OW 1
33712: ST_TO_ADDR
// end ;
33713: GO 33626
33715: POP
33716: POP
// array := tmp ;
33717: LD_ADDR_VAR 0 1
33721: PUSH
33722: LD_VAR 0 10
33726: ST_TO_ADDR
// end ;
33727: GO 33608
33729: POP
33730: POP
// result := array ;
33731: LD_ADDR_VAR 0 5
33735: PUSH
33736: LD_VAR 0 1
33740: ST_TO_ADDR
// end ;
33741: LD_VAR 0 5
33745: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33746: LD_INT 0
33748: PPUSH
33749: PPUSH
// result := 0 ;
33750: LD_ADDR_VAR 0 3
33754: PUSH
33755: LD_INT 0
33757: ST_TO_ADDR
// if not array or not value in array then
33758: LD_VAR 0 1
33762: NOT
33763: PUSH
33764: LD_VAR 0 2
33768: PUSH
33769: LD_VAR 0 1
33773: IN
33774: NOT
33775: OR
33776: IFFALSE 33780
// exit ;
33778: GO 33834
// for i = 1 to array do
33780: LD_ADDR_VAR 0 4
33784: PUSH
33785: DOUBLE
33786: LD_INT 1
33788: DEC
33789: ST_TO_ADDR
33790: LD_VAR 0 1
33794: PUSH
33795: FOR_TO
33796: IFFALSE 33832
// if value = array [ i ] then
33798: LD_VAR 0 2
33802: PUSH
33803: LD_VAR 0 1
33807: PUSH
33808: LD_VAR 0 4
33812: ARRAY
33813: EQUAL
33814: IFFALSE 33830
// begin result := i ;
33816: LD_ADDR_VAR 0 3
33820: PUSH
33821: LD_VAR 0 4
33825: ST_TO_ADDR
// exit ;
33826: POP
33827: POP
33828: GO 33834
// end ;
33830: GO 33795
33832: POP
33833: POP
// end ;
33834: LD_VAR 0 3
33838: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33839: LD_INT 0
33841: PPUSH
// vc_chassis := chassis ;
33842: LD_ADDR_OWVAR 37
33846: PUSH
33847: LD_VAR 0 1
33851: ST_TO_ADDR
// vc_engine := engine ;
33852: LD_ADDR_OWVAR 39
33856: PUSH
33857: LD_VAR 0 2
33861: ST_TO_ADDR
// vc_control := control ;
33862: LD_ADDR_OWVAR 38
33866: PUSH
33867: LD_VAR 0 3
33871: ST_TO_ADDR
// vc_weapon := weapon ;
33872: LD_ADDR_OWVAR 40
33876: PUSH
33877: LD_VAR 0 4
33881: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33882: LD_ADDR_OWVAR 41
33886: PUSH
33887: LD_VAR 0 5
33891: ST_TO_ADDR
// end ;
33892: LD_VAR 0 6
33896: RET
// export function WantPlant ( unit ) ; var task ; begin
33897: LD_INT 0
33899: PPUSH
33900: PPUSH
// result := false ;
33901: LD_ADDR_VAR 0 2
33905: PUSH
33906: LD_INT 0
33908: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33909: LD_ADDR_VAR 0 3
33913: PUSH
33914: LD_VAR 0 1
33918: PPUSH
33919: CALL_OW 437
33923: ST_TO_ADDR
// if task then
33924: LD_VAR 0 3
33928: IFFALSE 33956
// if task [ 1 ] [ 1 ] = p then
33930: LD_VAR 0 3
33934: PUSH
33935: LD_INT 1
33937: ARRAY
33938: PUSH
33939: LD_INT 1
33941: ARRAY
33942: PUSH
33943: LD_STRING p
33945: EQUAL
33946: IFFALSE 33956
// result := true ;
33948: LD_ADDR_VAR 0 2
33952: PUSH
33953: LD_INT 1
33955: ST_TO_ADDR
// end ;
33956: LD_VAR 0 2
33960: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33961: LD_INT 0
33963: PPUSH
33964: PPUSH
33965: PPUSH
33966: PPUSH
// if pos < 1 then
33967: LD_VAR 0 2
33971: PUSH
33972: LD_INT 1
33974: LESS
33975: IFFALSE 33979
// exit ;
33977: GO 34282
// if pos = 1 then
33979: LD_VAR 0 2
33983: PUSH
33984: LD_INT 1
33986: EQUAL
33987: IFFALSE 34020
// result := Replace ( arr , pos [ 1 ] , value ) else
33989: LD_ADDR_VAR 0 4
33993: PUSH
33994: LD_VAR 0 1
33998: PPUSH
33999: LD_VAR 0 2
34003: PUSH
34004: LD_INT 1
34006: ARRAY
34007: PPUSH
34008: LD_VAR 0 3
34012: PPUSH
34013: CALL_OW 1
34017: ST_TO_ADDR
34018: GO 34282
// begin tmp := arr ;
34020: LD_ADDR_VAR 0 6
34024: PUSH
34025: LD_VAR 0 1
34029: ST_TO_ADDR
// s_arr := [ tmp ] ;
34030: LD_ADDR_VAR 0 7
34034: PUSH
34035: LD_VAR 0 6
34039: PUSH
34040: EMPTY
34041: LIST
34042: ST_TO_ADDR
// for i = 1 to pos - 1 do
34043: LD_ADDR_VAR 0 5
34047: PUSH
34048: DOUBLE
34049: LD_INT 1
34051: DEC
34052: ST_TO_ADDR
34053: LD_VAR 0 2
34057: PUSH
34058: LD_INT 1
34060: MINUS
34061: PUSH
34062: FOR_TO
34063: IFFALSE 34108
// begin tmp := tmp [ pos [ i ] ] ;
34065: LD_ADDR_VAR 0 6
34069: PUSH
34070: LD_VAR 0 6
34074: PUSH
34075: LD_VAR 0 2
34079: PUSH
34080: LD_VAR 0 5
34084: ARRAY
34085: ARRAY
34086: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34087: LD_ADDR_VAR 0 7
34091: PUSH
34092: LD_VAR 0 7
34096: PUSH
34097: LD_VAR 0 6
34101: PUSH
34102: EMPTY
34103: LIST
34104: ADD
34105: ST_TO_ADDR
// end ;
34106: GO 34062
34108: POP
34109: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34110: LD_ADDR_VAR 0 6
34114: PUSH
34115: LD_VAR 0 6
34119: PPUSH
34120: LD_VAR 0 2
34124: PUSH
34125: LD_VAR 0 2
34129: ARRAY
34130: PPUSH
34131: LD_VAR 0 3
34135: PPUSH
34136: CALL_OW 1
34140: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34141: LD_ADDR_VAR 0 7
34145: PUSH
34146: LD_VAR 0 7
34150: PPUSH
34151: LD_VAR 0 7
34155: PPUSH
34156: LD_VAR 0 6
34160: PPUSH
34161: CALL_OW 1
34165: ST_TO_ADDR
// for i = s_arr downto 2 do
34166: LD_ADDR_VAR 0 5
34170: PUSH
34171: DOUBLE
34172: LD_VAR 0 7
34176: INC
34177: ST_TO_ADDR
34178: LD_INT 2
34180: PUSH
34181: FOR_DOWNTO
34182: IFFALSE 34266
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34184: LD_ADDR_VAR 0 6
34188: PUSH
34189: LD_VAR 0 7
34193: PUSH
34194: LD_VAR 0 5
34198: PUSH
34199: LD_INT 1
34201: MINUS
34202: ARRAY
34203: PPUSH
34204: LD_VAR 0 2
34208: PUSH
34209: LD_VAR 0 5
34213: PUSH
34214: LD_INT 1
34216: MINUS
34217: ARRAY
34218: PPUSH
34219: LD_VAR 0 7
34223: PUSH
34224: LD_VAR 0 5
34228: ARRAY
34229: PPUSH
34230: CALL_OW 1
34234: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34235: LD_ADDR_VAR 0 7
34239: PUSH
34240: LD_VAR 0 7
34244: PPUSH
34245: LD_VAR 0 5
34249: PUSH
34250: LD_INT 1
34252: MINUS
34253: PPUSH
34254: LD_VAR 0 6
34258: PPUSH
34259: CALL_OW 1
34263: ST_TO_ADDR
// end ;
34264: GO 34181
34266: POP
34267: POP
// result := s_arr [ 1 ] ;
34268: LD_ADDR_VAR 0 4
34272: PUSH
34273: LD_VAR 0 7
34277: PUSH
34278: LD_INT 1
34280: ARRAY
34281: ST_TO_ADDR
// end ; end ;
34282: LD_VAR 0 4
34286: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34287: LD_INT 0
34289: PPUSH
34290: PPUSH
// if not list then
34291: LD_VAR 0 1
34295: NOT
34296: IFFALSE 34300
// exit ;
34298: GO 34391
// i := list [ pos1 ] ;
34300: LD_ADDR_VAR 0 5
34304: PUSH
34305: LD_VAR 0 1
34309: PUSH
34310: LD_VAR 0 2
34314: ARRAY
34315: ST_TO_ADDR
// if not i then
34316: LD_VAR 0 5
34320: NOT
34321: IFFALSE 34325
// exit ;
34323: GO 34391
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34325: LD_ADDR_VAR 0 1
34329: PUSH
34330: LD_VAR 0 1
34334: PPUSH
34335: LD_VAR 0 2
34339: PPUSH
34340: LD_VAR 0 1
34344: PUSH
34345: LD_VAR 0 3
34349: ARRAY
34350: PPUSH
34351: CALL_OW 1
34355: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34356: LD_ADDR_VAR 0 1
34360: PUSH
34361: LD_VAR 0 1
34365: PPUSH
34366: LD_VAR 0 3
34370: PPUSH
34371: LD_VAR 0 5
34375: PPUSH
34376: CALL_OW 1
34380: ST_TO_ADDR
// result := list ;
34381: LD_ADDR_VAR 0 4
34385: PUSH
34386: LD_VAR 0 1
34390: ST_TO_ADDR
// end ;
34391: LD_VAR 0 4
34395: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34396: LD_INT 0
34398: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34399: LD_ADDR_VAR 0 5
34403: PUSH
34404: LD_VAR 0 1
34408: PPUSH
34409: CALL_OW 250
34413: PPUSH
34414: LD_VAR 0 1
34418: PPUSH
34419: CALL_OW 251
34423: PPUSH
34424: LD_VAR 0 2
34428: PPUSH
34429: LD_VAR 0 3
34433: PPUSH
34434: LD_VAR 0 4
34438: PPUSH
34439: CALL 34449 0 5
34443: ST_TO_ADDR
// end ;
34444: LD_VAR 0 5
34448: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34449: LD_INT 0
34451: PPUSH
34452: PPUSH
34453: PPUSH
34454: PPUSH
// if not list then
34455: LD_VAR 0 3
34459: NOT
34460: IFFALSE 34464
// exit ;
34462: GO 34852
// result := [ ] ;
34464: LD_ADDR_VAR 0 6
34468: PUSH
34469: EMPTY
34470: ST_TO_ADDR
// for i in list do
34471: LD_ADDR_VAR 0 7
34475: PUSH
34476: LD_VAR 0 3
34480: PUSH
34481: FOR_IN
34482: IFFALSE 34684
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34484: LD_ADDR_VAR 0 9
34488: PUSH
34489: LD_VAR 0 7
34493: PPUSH
34494: LD_VAR 0 1
34498: PPUSH
34499: LD_VAR 0 2
34503: PPUSH
34504: CALL_OW 297
34508: ST_TO_ADDR
// if not result then
34509: LD_VAR 0 6
34513: NOT
34514: IFFALSE 34540
// result := [ [ i , tmp ] ] else
34516: LD_ADDR_VAR 0 6
34520: PUSH
34521: LD_VAR 0 7
34525: PUSH
34526: LD_VAR 0 9
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: EMPTY
34536: LIST
34537: ST_TO_ADDR
34538: GO 34682
// begin if result [ result ] [ 2 ] < tmp then
34540: LD_VAR 0 6
34544: PUSH
34545: LD_VAR 0 6
34549: ARRAY
34550: PUSH
34551: LD_INT 2
34553: ARRAY
34554: PUSH
34555: LD_VAR 0 9
34559: LESS
34560: IFFALSE 34602
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34562: LD_ADDR_VAR 0 6
34566: PUSH
34567: LD_VAR 0 6
34571: PPUSH
34572: LD_VAR 0 6
34576: PUSH
34577: LD_INT 1
34579: PLUS
34580: PPUSH
34581: LD_VAR 0 7
34585: PUSH
34586: LD_VAR 0 9
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PPUSH
34595: CALL_OW 2
34599: ST_TO_ADDR
34600: GO 34682
// for j = 1 to result do
34602: LD_ADDR_VAR 0 8
34606: PUSH
34607: DOUBLE
34608: LD_INT 1
34610: DEC
34611: ST_TO_ADDR
34612: LD_VAR 0 6
34616: PUSH
34617: FOR_TO
34618: IFFALSE 34680
// begin if tmp < result [ j ] [ 2 ] then
34620: LD_VAR 0 9
34624: PUSH
34625: LD_VAR 0 6
34629: PUSH
34630: LD_VAR 0 8
34634: ARRAY
34635: PUSH
34636: LD_INT 2
34638: ARRAY
34639: LESS
34640: IFFALSE 34678
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34642: LD_ADDR_VAR 0 6
34646: PUSH
34647: LD_VAR 0 6
34651: PPUSH
34652: LD_VAR 0 8
34656: PPUSH
34657: LD_VAR 0 7
34661: PUSH
34662: LD_VAR 0 9
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PPUSH
34671: CALL_OW 2
34675: ST_TO_ADDR
// break ;
34676: GO 34680
// end ; end ;
34678: GO 34617
34680: POP
34681: POP
// end ; end ;
34682: GO 34481
34684: POP
34685: POP
// if result and not asc then
34686: LD_VAR 0 6
34690: PUSH
34691: LD_VAR 0 4
34695: NOT
34696: AND
34697: IFFALSE 34772
// begin tmp := result ;
34699: LD_ADDR_VAR 0 9
34703: PUSH
34704: LD_VAR 0 6
34708: ST_TO_ADDR
// for i = tmp downto 1 do
34709: LD_ADDR_VAR 0 7
34713: PUSH
34714: DOUBLE
34715: LD_VAR 0 9
34719: INC
34720: ST_TO_ADDR
34721: LD_INT 1
34723: PUSH
34724: FOR_DOWNTO
34725: IFFALSE 34770
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34727: LD_ADDR_VAR 0 6
34731: PUSH
34732: LD_VAR 0 6
34736: PPUSH
34737: LD_VAR 0 9
34741: PUSH
34742: LD_VAR 0 7
34746: MINUS
34747: PUSH
34748: LD_INT 1
34750: PLUS
34751: PPUSH
34752: LD_VAR 0 9
34756: PUSH
34757: LD_VAR 0 7
34761: ARRAY
34762: PPUSH
34763: CALL_OW 1
34767: ST_TO_ADDR
34768: GO 34724
34770: POP
34771: POP
// end ; tmp := [ ] ;
34772: LD_ADDR_VAR 0 9
34776: PUSH
34777: EMPTY
34778: ST_TO_ADDR
// if mode then
34779: LD_VAR 0 5
34783: IFFALSE 34852
// begin for i = 1 to result do
34785: LD_ADDR_VAR 0 7
34789: PUSH
34790: DOUBLE
34791: LD_INT 1
34793: DEC
34794: ST_TO_ADDR
34795: LD_VAR 0 6
34799: PUSH
34800: FOR_TO
34801: IFFALSE 34840
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34803: LD_ADDR_VAR 0 9
34807: PUSH
34808: LD_VAR 0 9
34812: PPUSH
34813: LD_VAR 0 7
34817: PPUSH
34818: LD_VAR 0 6
34822: PUSH
34823: LD_VAR 0 7
34827: ARRAY
34828: PUSH
34829: LD_INT 1
34831: ARRAY
34832: PPUSH
34833: CALL_OW 1
34837: ST_TO_ADDR
34838: GO 34800
34840: POP
34841: POP
// result := tmp ;
34842: LD_ADDR_VAR 0 6
34846: PUSH
34847: LD_VAR 0 9
34851: ST_TO_ADDR
// end ; end ;
34852: LD_VAR 0 6
34856: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34857: LD_INT 0
34859: PPUSH
34860: PPUSH
34861: PPUSH
34862: PPUSH
34863: PPUSH
34864: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34865: LD_ADDR_VAR 0 5
34869: PUSH
34870: LD_INT 0
34872: PUSH
34873: LD_INT 0
34875: PUSH
34876: LD_INT 0
34878: PUSH
34879: EMPTY
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: ST_TO_ADDR
// if not x or not y then
34887: LD_VAR 0 2
34891: NOT
34892: PUSH
34893: LD_VAR 0 3
34897: NOT
34898: OR
34899: IFFALSE 34903
// exit ;
34901: GO 36555
// if not range then
34903: LD_VAR 0 4
34907: NOT
34908: IFFALSE 34918
// range := 10 ;
34910: LD_ADDR_VAR 0 4
34914: PUSH
34915: LD_INT 10
34917: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34918: LD_ADDR_VAR 0 8
34922: PUSH
34923: LD_INT 81
34925: PUSH
34926: LD_VAR 0 1
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 92
34937: PUSH
34938: LD_VAR 0 2
34942: PUSH
34943: LD_VAR 0 3
34947: PUSH
34948: LD_VAR 0 4
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 3
34961: PUSH
34962: LD_INT 21
34964: PUSH
34965: LD_INT 3
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: LIST
34980: PPUSH
34981: CALL_OW 69
34985: ST_TO_ADDR
// if not tmp then
34986: LD_VAR 0 8
34990: NOT
34991: IFFALSE 34995
// exit ;
34993: GO 36555
// for i in tmp do
34995: LD_ADDR_VAR 0 6
34999: PUSH
35000: LD_VAR 0 8
35004: PUSH
35005: FOR_IN
35006: IFFALSE 36530
// begin points := [ 0 , 0 , 0 ] ;
35008: LD_ADDR_VAR 0 9
35012: PUSH
35013: LD_INT 0
35015: PUSH
35016: LD_INT 0
35018: PUSH
35019: LD_INT 0
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: LIST
35026: ST_TO_ADDR
// bpoints := 1 ;
35027: LD_ADDR_VAR 0 10
35031: PUSH
35032: LD_INT 1
35034: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35035: LD_VAR 0 6
35039: PPUSH
35040: CALL_OW 247
35044: PUSH
35045: LD_INT 1
35047: DOUBLE
35048: EQUAL
35049: IFTRUE 35053
35051: GO 35631
35053: POP
// begin if GetClass ( i ) = 1 then
35054: LD_VAR 0 6
35058: PPUSH
35059: CALL_OW 257
35063: PUSH
35064: LD_INT 1
35066: EQUAL
35067: IFFALSE 35088
// points := [ 10 , 5 , 3 ] ;
35069: LD_ADDR_VAR 0 9
35073: PUSH
35074: LD_INT 10
35076: PUSH
35077: LD_INT 5
35079: PUSH
35080: LD_INT 3
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: LIST
35087: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35088: LD_VAR 0 6
35092: PPUSH
35093: CALL_OW 257
35097: PUSH
35098: LD_INT 2
35100: PUSH
35101: LD_INT 3
35103: PUSH
35104: LD_INT 4
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: LIST
35111: IN
35112: IFFALSE 35133
// points := [ 3 , 2 , 1 ] ;
35114: LD_ADDR_VAR 0 9
35118: PUSH
35119: LD_INT 3
35121: PUSH
35122: LD_INT 2
35124: PUSH
35125: LD_INT 1
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: LIST
35132: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35133: LD_VAR 0 6
35137: PPUSH
35138: CALL_OW 257
35142: PUSH
35143: LD_INT 5
35145: EQUAL
35146: IFFALSE 35167
// points := [ 130 , 5 , 2 ] ;
35148: LD_ADDR_VAR 0 9
35152: PUSH
35153: LD_INT 130
35155: PUSH
35156: LD_INT 5
35158: PUSH
35159: LD_INT 2
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: LIST
35166: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35167: LD_VAR 0 6
35171: PPUSH
35172: CALL_OW 257
35176: PUSH
35177: LD_INT 8
35179: EQUAL
35180: IFFALSE 35201
// points := [ 35 , 35 , 30 ] ;
35182: LD_ADDR_VAR 0 9
35186: PUSH
35187: LD_INT 35
35189: PUSH
35190: LD_INT 35
35192: PUSH
35193: LD_INT 30
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: LIST
35200: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35201: LD_VAR 0 6
35205: PPUSH
35206: CALL_OW 257
35210: PUSH
35211: LD_INT 9
35213: EQUAL
35214: IFFALSE 35235
// points := [ 20 , 55 , 40 ] ;
35216: LD_ADDR_VAR 0 9
35220: PUSH
35221: LD_INT 20
35223: PUSH
35224: LD_INT 55
35226: PUSH
35227: LD_INT 40
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: LIST
35234: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35235: LD_VAR 0 6
35239: PPUSH
35240: CALL_OW 257
35244: PUSH
35245: LD_INT 12
35247: PUSH
35248: LD_INT 16
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: IN
35255: IFFALSE 35276
// points := [ 5 , 3 , 2 ] ;
35257: LD_ADDR_VAR 0 9
35261: PUSH
35262: LD_INT 5
35264: PUSH
35265: LD_INT 3
35267: PUSH
35268: LD_INT 2
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: LIST
35275: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35276: LD_VAR 0 6
35280: PPUSH
35281: CALL_OW 257
35285: PUSH
35286: LD_INT 17
35288: EQUAL
35289: IFFALSE 35310
// points := [ 100 , 50 , 75 ] ;
35291: LD_ADDR_VAR 0 9
35295: PUSH
35296: LD_INT 100
35298: PUSH
35299: LD_INT 50
35301: PUSH
35302: LD_INT 75
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: LIST
35309: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35310: LD_VAR 0 6
35314: PPUSH
35315: CALL_OW 257
35319: PUSH
35320: LD_INT 15
35322: EQUAL
35323: IFFALSE 35344
// points := [ 10 , 5 , 3 ] ;
35325: LD_ADDR_VAR 0 9
35329: PUSH
35330: LD_INT 10
35332: PUSH
35333: LD_INT 5
35335: PUSH
35336: LD_INT 3
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: LIST
35343: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35344: LD_VAR 0 6
35348: PPUSH
35349: CALL_OW 257
35353: PUSH
35354: LD_INT 14
35356: EQUAL
35357: IFFALSE 35378
// points := [ 10 , 0 , 0 ] ;
35359: LD_ADDR_VAR 0 9
35363: PUSH
35364: LD_INT 10
35366: PUSH
35367: LD_INT 0
35369: PUSH
35370: LD_INT 0
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: LIST
35377: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35378: LD_VAR 0 6
35382: PPUSH
35383: CALL_OW 257
35387: PUSH
35388: LD_INT 11
35390: EQUAL
35391: IFFALSE 35412
// points := [ 30 , 10 , 5 ] ;
35393: LD_ADDR_VAR 0 9
35397: PUSH
35398: LD_INT 30
35400: PUSH
35401: LD_INT 10
35403: PUSH
35404: LD_INT 5
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: LIST
35411: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35412: LD_VAR 0 1
35416: PPUSH
35417: LD_INT 5
35419: PPUSH
35420: CALL_OW 321
35424: PUSH
35425: LD_INT 2
35427: EQUAL
35428: IFFALSE 35445
// bpoints := bpoints * 1.8 ;
35430: LD_ADDR_VAR 0 10
35434: PUSH
35435: LD_VAR 0 10
35439: PUSH
35440: LD_REAL  1.80000000000000E+0000
35443: MUL
35444: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35445: LD_VAR 0 6
35449: PPUSH
35450: CALL_OW 257
35454: PUSH
35455: LD_INT 1
35457: PUSH
35458: LD_INT 2
35460: PUSH
35461: LD_INT 3
35463: PUSH
35464: LD_INT 4
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: IN
35473: PUSH
35474: LD_VAR 0 1
35478: PPUSH
35479: LD_INT 51
35481: PPUSH
35482: CALL_OW 321
35486: PUSH
35487: LD_INT 2
35489: EQUAL
35490: AND
35491: IFFALSE 35508
// bpoints := bpoints * 1.2 ;
35493: LD_ADDR_VAR 0 10
35497: PUSH
35498: LD_VAR 0 10
35502: PUSH
35503: LD_REAL  1.20000000000000E+0000
35506: MUL
35507: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35508: LD_VAR 0 6
35512: PPUSH
35513: CALL_OW 257
35517: PUSH
35518: LD_INT 5
35520: PUSH
35521: LD_INT 7
35523: PUSH
35524: LD_INT 9
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: LIST
35531: IN
35532: PUSH
35533: LD_VAR 0 1
35537: PPUSH
35538: LD_INT 52
35540: PPUSH
35541: CALL_OW 321
35545: PUSH
35546: LD_INT 2
35548: EQUAL
35549: AND
35550: IFFALSE 35567
// bpoints := bpoints * 1.5 ;
35552: LD_ADDR_VAR 0 10
35556: PUSH
35557: LD_VAR 0 10
35561: PUSH
35562: LD_REAL  1.50000000000000E+0000
35565: MUL
35566: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35567: LD_VAR 0 1
35571: PPUSH
35572: LD_INT 66
35574: PPUSH
35575: CALL_OW 321
35579: PUSH
35580: LD_INT 2
35582: EQUAL
35583: IFFALSE 35600
// bpoints := bpoints * 1.1 ;
35585: LD_ADDR_VAR 0 10
35589: PUSH
35590: LD_VAR 0 10
35594: PUSH
35595: LD_REAL  1.10000000000000E+0000
35598: MUL
35599: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35600: LD_ADDR_VAR 0 10
35604: PUSH
35605: LD_VAR 0 10
35609: PUSH
35610: LD_VAR 0 6
35614: PPUSH
35615: LD_INT 1
35617: PPUSH
35618: CALL_OW 259
35622: PUSH
35623: LD_REAL  1.15000000000000E+0000
35626: MUL
35627: MUL
35628: ST_TO_ADDR
// end ; unit_vehicle :
35629: GO 36459
35631: LD_INT 2
35633: DOUBLE
35634: EQUAL
35635: IFTRUE 35639
35637: GO 36447
35639: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35640: LD_VAR 0 6
35644: PPUSH
35645: CALL_OW 264
35649: PUSH
35650: LD_INT 2
35652: PUSH
35653: LD_INT 42
35655: PUSH
35656: LD_INT 24
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: LIST
35663: IN
35664: IFFALSE 35685
// points := [ 25 , 5 , 3 ] ;
35666: LD_ADDR_VAR 0 9
35670: PUSH
35671: LD_INT 25
35673: PUSH
35674: LD_INT 5
35676: PUSH
35677: LD_INT 3
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: LIST
35684: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35685: LD_VAR 0 6
35689: PPUSH
35690: CALL_OW 264
35694: PUSH
35695: LD_INT 4
35697: PUSH
35698: LD_INT 43
35700: PUSH
35701: LD_INT 25
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: LIST
35708: IN
35709: IFFALSE 35730
// points := [ 40 , 15 , 5 ] ;
35711: LD_ADDR_VAR 0 9
35715: PUSH
35716: LD_INT 40
35718: PUSH
35719: LD_INT 15
35721: PUSH
35722: LD_INT 5
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: LIST
35729: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35730: LD_VAR 0 6
35734: PPUSH
35735: CALL_OW 264
35739: PUSH
35740: LD_INT 3
35742: PUSH
35743: LD_INT 23
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: IN
35750: IFFALSE 35771
// points := [ 7 , 25 , 8 ] ;
35752: LD_ADDR_VAR 0 9
35756: PUSH
35757: LD_INT 7
35759: PUSH
35760: LD_INT 25
35762: PUSH
35763: LD_INT 8
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: LIST
35770: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35771: LD_VAR 0 6
35775: PPUSH
35776: CALL_OW 264
35780: PUSH
35781: LD_INT 5
35783: PUSH
35784: LD_INT 27
35786: PUSH
35787: LD_INT 44
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: LIST
35794: IN
35795: IFFALSE 35816
// points := [ 14 , 50 , 16 ] ;
35797: LD_ADDR_VAR 0 9
35801: PUSH
35802: LD_INT 14
35804: PUSH
35805: LD_INT 50
35807: PUSH
35808: LD_INT 16
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: LIST
35815: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35816: LD_VAR 0 6
35820: PPUSH
35821: CALL_OW 264
35825: PUSH
35826: LD_INT 6
35828: PUSH
35829: LD_INT 46
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: IN
35836: IFFALSE 35857
// points := [ 32 , 120 , 70 ] ;
35838: LD_ADDR_VAR 0 9
35842: PUSH
35843: LD_INT 32
35845: PUSH
35846: LD_INT 120
35848: PUSH
35849: LD_INT 70
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: LIST
35856: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35857: LD_VAR 0 6
35861: PPUSH
35862: CALL_OW 264
35866: PUSH
35867: LD_INT 7
35869: PUSH
35870: LD_INT 28
35872: PUSH
35873: LD_INT 45
35875: PUSH
35876: LD_EXP 100
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: IN
35887: IFFALSE 35908
// points := [ 35 , 20 , 45 ] ;
35889: LD_ADDR_VAR 0 9
35893: PUSH
35894: LD_INT 35
35896: PUSH
35897: LD_INT 20
35899: PUSH
35900: LD_INT 45
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: LIST
35907: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35908: LD_VAR 0 6
35912: PPUSH
35913: CALL_OW 264
35917: PUSH
35918: LD_INT 47
35920: PUSH
35921: EMPTY
35922: LIST
35923: IN
35924: IFFALSE 35945
// points := [ 67 , 45 , 75 ] ;
35926: LD_ADDR_VAR 0 9
35930: PUSH
35931: LD_INT 67
35933: PUSH
35934: LD_INT 45
35936: PUSH
35937: LD_INT 75
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: LIST
35944: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35945: LD_VAR 0 6
35949: PPUSH
35950: CALL_OW 264
35954: PUSH
35955: LD_INT 26
35957: PUSH
35958: EMPTY
35959: LIST
35960: IN
35961: IFFALSE 35982
// points := [ 120 , 30 , 80 ] ;
35963: LD_ADDR_VAR 0 9
35967: PUSH
35968: LD_INT 120
35970: PUSH
35971: LD_INT 30
35973: PUSH
35974: LD_INT 80
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: LIST
35981: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35982: LD_VAR 0 6
35986: PPUSH
35987: CALL_OW 264
35991: PUSH
35992: LD_INT 22
35994: PUSH
35995: EMPTY
35996: LIST
35997: IN
35998: IFFALSE 36019
// points := [ 40 , 1 , 1 ] ;
36000: LD_ADDR_VAR 0 9
36004: PUSH
36005: LD_INT 40
36007: PUSH
36008: LD_INT 1
36010: PUSH
36011: LD_INT 1
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: LIST
36018: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36019: LD_VAR 0 6
36023: PPUSH
36024: CALL_OW 264
36028: PUSH
36029: LD_INT 29
36031: PUSH
36032: EMPTY
36033: LIST
36034: IN
36035: IFFALSE 36056
// points := [ 70 , 200 , 400 ] ;
36037: LD_ADDR_VAR 0 9
36041: PUSH
36042: LD_INT 70
36044: PUSH
36045: LD_INT 200
36047: PUSH
36048: LD_INT 400
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: LIST
36055: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36056: LD_VAR 0 6
36060: PPUSH
36061: CALL_OW 264
36065: PUSH
36066: LD_INT 14
36068: PUSH
36069: LD_INT 53
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: IN
36076: IFFALSE 36097
// points := [ 40 , 10 , 20 ] ;
36078: LD_ADDR_VAR 0 9
36082: PUSH
36083: LD_INT 40
36085: PUSH
36086: LD_INT 10
36088: PUSH
36089: LD_INT 20
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: LIST
36096: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36097: LD_VAR 0 6
36101: PPUSH
36102: CALL_OW 264
36106: PUSH
36107: LD_INT 9
36109: PUSH
36110: EMPTY
36111: LIST
36112: IN
36113: IFFALSE 36134
// points := [ 5 , 70 , 20 ] ;
36115: LD_ADDR_VAR 0 9
36119: PUSH
36120: LD_INT 5
36122: PUSH
36123: LD_INT 70
36125: PUSH
36126: LD_INT 20
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: LIST
36133: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36134: LD_VAR 0 6
36138: PPUSH
36139: CALL_OW 264
36143: PUSH
36144: LD_INT 10
36146: PUSH
36147: EMPTY
36148: LIST
36149: IN
36150: IFFALSE 36171
// points := [ 35 , 110 , 70 ] ;
36152: LD_ADDR_VAR 0 9
36156: PUSH
36157: LD_INT 35
36159: PUSH
36160: LD_INT 110
36162: PUSH
36163: LD_INT 70
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: LIST
36170: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36171: LD_VAR 0 6
36175: PPUSH
36176: CALL_OW 265
36180: PUSH
36181: LD_INT 25
36183: EQUAL
36184: IFFALSE 36205
// points := [ 80 , 65 , 100 ] ;
36186: LD_ADDR_VAR 0 9
36190: PUSH
36191: LD_INT 80
36193: PUSH
36194: LD_INT 65
36196: PUSH
36197: LD_INT 100
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: LIST
36204: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36205: LD_VAR 0 6
36209: PPUSH
36210: CALL_OW 263
36214: PUSH
36215: LD_INT 1
36217: EQUAL
36218: IFFALSE 36253
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36220: LD_ADDR_VAR 0 10
36224: PUSH
36225: LD_VAR 0 10
36229: PUSH
36230: LD_VAR 0 6
36234: PPUSH
36235: CALL_OW 311
36239: PPUSH
36240: LD_INT 3
36242: PPUSH
36243: CALL_OW 259
36247: PUSH
36248: LD_INT 4
36250: MUL
36251: MUL
36252: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36253: LD_VAR 0 6
36257: PPUSH
36258: CALL_OW 263
36262: PUSH
36263: LD_INT 2
36265: EQUAL
36266: IFFALSE 36317
// begin j := IsControledBy ( i ) ;
36268: LD_ADDR_VAR 0 7
36272: PUSH
36273: LD_VAR 0 6
36277: PPUSH
36278: CALL_OW 312
36282: ST_TO_ADDR
// if j then
36283: LD_VAR 0 7
36287: IFFALSE 36317
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36289: LD_ADDR_VAR 0 10
36293: PUSH
36294: LD_VAR 0 10
36298: PUSH
36299: LD_VAR 0 7
36303: PPUSH
36304: LD_INT 3
36306: PPUSH
36307: CALL_OW 259
36311: PUSH
36312: LD_INT 3
36314: MUL
36315: MUL
36316: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36317: LD_VAR 0 6
36321: PPUSH
36322: CALL_OW 264
36326: PUSH
36327: LD_INT 5
36329: PUSH
36330: LD_INT 6
36332: PUSH
36333: LD_INT 46
36335: PUSH
36336: LD_INT 44
36338: PUSH
36339: LD_INT 47
36341: PUSH
36342: LD_INT 45
36344: PUSH
36345: LD_INT 28
36347: PUSH
36348: LD_INT 7
36350: PUSH
36351: LD_INT 27
36353: PUSH
36354: LD_INT 29
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: IN
36369: PUSH
36370: LD_VAR 0 1
36374: PPUSH
36375: LD_INT 52
36377: PPUSH
36378: CALL_OW 321
36382: PUSH
36383: LD_INT 2
36385: EQUAL
36386: AND
36387: IFFALSE 36404
// bpoints := bpoints * 1.2 ;
36389: LD_ADDR_VAR 0 10
36393: PUSH
36394: LD_VAR 0 10
36398: PUSH
36399: LD_REAL  1.20000000000000E+0000
36402: MUL
36403: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36404: LD_VAR 0 6
36408: PPUSH
36409: CALL_OW 264
36413: PUSH
36414: LD_INT 6
36416: PUSH
36417: LD_INT 46
36419: PUSH
36420: LD_INT 47
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: LIST
36427: IN
36428: IFFALSE 36445
// bpoints := bpoints * 1.2 ;
36430: LD_ADDR_VAR 0 10
36434: PUSH
36435: LD_VAR 0 10
36439: PUSH
36440: LD_REAL  1.20000000000000E+0000
36443: MUL
36444: ST_TO_ADDR
// end ; unit_building :
36445: GO 36459
36447: LD_INT 3
36449: DOUBLE
36450: EQUAL
36451: IFTRUE 36455
36453: GO 36458
36455: POP
// ; end ;
36456: GO 36459
36458: POP
// for j = 1 to 3 do
36459: LD_ADDR_VAR 0 7
36463: PUSH
36464: DOUBLE
36465: LD_INT 1
36467: DEC
36468: ST_TO_ADDR
36469: LD_INT 3
36471: PUSH
36472: FOR_TO
36473: IFFALSE 36526
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36475: LD_ADDR_VAR 0 5
36479: PUSH
36480: LD_VAR 0 5
36484: PPUSH
36485: LD_VAR 0 7
36489: PPUSH
36490: LD_VAR 0 5
36494: PUSH
36495: LD_VAR 0 7
36499: ARRAY
36500: PUSH
36501: LD_VAR 0 9
36505: PUSH
36506: LD_VAR 0 7
36510: ARRAY
36511: PUSH
36512: LD_VAR 0 10
36516: MUL
36517: PLUS
36518: PPUSH
36519: CALL_OW 1
36523: ST_TO_ADDR
36524: GO 36472
36526: POP
36527: POP
// end ;
36528: GO 35005
36530: POP
36531: POP
// result := Replace ( result , 4 , tmp ) ;
36532: LD_ADDR_VAR 0 5
36536: PUSH
36537: LD_VAR 0 5
36541: PPUSH
36542: LD_INT 4
36544: PPUSH
36545: LD_VAR 0 8
36549: PPUSH
36550: CALL_OW 1
36554: ST_TO_ADDR
// end ;
36555: LD_VAR 0 5
36559: RET
// export function DangerAtRange ( unit , range ) ; begin
36560: LD_INT 0
36562: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36563: LD_ADDR_VAR 0 3
36567: PUSH
36568: LD_VAR 0 1
36572: PPUSH
36573: CALL_OW 255
36577: PPUSH
36578: LD_VAR 0 1
36582: PPUSH
36583: CALL_OW 250
36587: PPUSH
36588: LD_VAR 0 1
36592: PPUSH
36593: CALL_OW 251
36597: PPUSH
36598: LD_VAR 0 2
36602: PPUSH
36603: CALL 34857 0 4
36607: ST_TO_ADDR
// end ;
36608: LD_VAR 0 3
36612: RET
// export function DangerInArea ( side , area ) ; begin
36613: LD_INT 0
36615: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36616: LD_ADDR_VAR 0 3
36620: PUSH
36621: LD_VAR 0 2
36625: PPUSH
36626: LD_INT 81
36628: PUSH
36629: LD_VAR 0 1
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PPUSH
36638: CALL_OW 70
36642: ST_TO_ADDR
// end ;
36643: LD_VAR 0 3
36647: RET
// export function IsExtension ( b ) ; begin
36648: LD_INT 0
36650: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36651: LD_ADDR_VAR 0 2
36655: PUSH
36656: LD_VAR 0 1
36660: PUSH
36661: LD_INT 23
36663: PUSH
36664: LD_INT 20
36666: PUSH
36667: LD_INT 22
36669: PUSH
36670: LD_INT 17
36672: PUSH
36673: LD_INT 24
36675: PUSH
36676: LD_INT 21
36678: PUSH
36679: LD_INT 19
36681: PUSH
36682: LD_INT 16
36684: PUSH
36685: LD_INT 25
36687: PUSH
36688: LD_INT 18
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: IN
36703: ST_TO_ADDR
// end ;
36704: LD_VAR 0 2
36708: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36709: LD_INT 0
36711: PPUSH
36712: PPUSH
36713: PPUSH
// result := [ ] ;
36714: LD_ADDR_VAR 0 4
36718: PUSH
36719: EMPTY
36720: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36721: LD_ADDR_VAR 0 5
36725: PUSH
36726: LD_VAR 0 2
36730: PPUSH
36731: LD_INT 21
36733: PUSH
36734: LD_INT 3
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PPUSH
36741: CALL_OW 70
36745: ST_TO_ADDR
// if not tmp then
36746: LD_VAR 0 5
36750: NOT
36751: IFFALSE 36755
// exit ;
36753: GO 36819
// if checkLink then
36755: LD_VAR 0 3
36759: IFFALSE 36809
// begin for i in tmp do
36761: LD_ADDR_VAR 0 6
36765: PUSH
36766: LD_VAR 0 5
36770: PUSH
36771: FOR_IN
36772: IFFALSE 36807
// if GetBase ( i ) <> base then
36774: LD_VAR 0 6
36778: PPUSH
36779: CALL_OW 274
36783: PUSH
36784: LD_VAR 0 1
36788: NONEQUAL
36789: IFFALSE 36805
// ComLinkToBase ( base , i ) ;
36791: LD_VAR 0 1
36795: PPUSH
36796: LD_VAR 0 6
36800: PPUSH
36801: CALL_OW 169
36805: GO 36771
36807: POP
36808: POP
// end ; result := tmp ;
36809: LD_ADDR_VAR 0 4
36813: PUSH
36814: LD_VAR 0 5
36818: ST_TO_ADDR
// end ;
36819: LD_VAR 0 4
36823: RET
// export function ComComplete ( units , b ) ; var i ; begin
36824: LD_INT 0
36826: PPUSH
36827: PPUSH
// if not units then
36828: LD_VAR 0 1
36832: NOT
36833: IFFALSE 36837
// exit ;
36835: GO 36927
// for i in units do
36837: LD_ADDR_VAR 0 4
36841: PUSH
36842: LD_VAR 0 1
36846: PUSH
36847: FOR_IN
36848: IFFALSE 36925
// if BuildingStatus ( b ) = bs_build then
36850: LD_VAR 0 2
36854: PPUSH
36855: CALL_OW 461
36859: PUSH
36860: LD_INT 1
36862: EQUAL
36863: IFFALSE 36923
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36865: LD_VAR 0 4
36869: PPUSH
36870: LD_STRING h
36872: PUSH
36873: LD_VAR 0 2
36877: PPUSH
36878: CALL_OW 250
36882: PUSH
36883: LD_VAR 0 2
36887: PPUSH
36888: CALL_OW 251
36892: PUSH
36893: LD_VAR 0 2
36897: PUSH
36898: LD_INT 0
36900: PUSH
36901: LD_INT 0
36903: PUSH
36904: LD_INT 0
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: PUSH
36916: EMPTY
36917: LIST
36918: PPUSH
36919: CALL_OW 446
36923: GO 36847
36925: POP
36926: POP
// end ;
36927: LD_VAR 0 3
36931: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36932: LD_INT 0
36934: PPUSH
36935: PPUSH
36936: PPUSH
36937: PPUSH
36938: PPUSH
36939: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36940: LD_VAR 0 1
36944: NOT
36945: PUSH
36946: LD_VAR 0 1
36950: PPUSH
36951: CALL_OW 263
36955: PUSH
36956: LD_INT 2
36958: NONEQUAL
36959: OR
36960: IFFALSE 36964
// exit ;
36962: GO 37280
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36964: LD_ADDR_VAR 0 6
36968: PUSH
36969: LD_INT 22
36971: PUSH
36972: LD_VAR 0 1
36976: PPUSH
36977: CALL_OW 255
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 2
36988: PUSH
36989: LD_INT 30
36991: PUSH
36992: LD_INT 36
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: LD_INT 34
37001: PUSH
37002: LD_INT 31
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: LIST
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PPUSH
37018: CALL_OW 69
37022: ST_TO_ADDR
// if not tmp then
37023: LD_VAR 0 6
37027: NOT
37028: IFFALSE 37032
// exit ;
37030: GO 37280
// result := [ ] ;
37032: LD_ADDR_VAR 0 2
37036: PUSH
37037: EMPTY
37038: ST_TO_ADDR
// for i in tmp do
37039: LD_ADDR_VAR 0 3
37043: PUSH
37044: LD_VAR 0 6
37048: PUSH
37049: FOR_IN
37050: IFFALSE 37121
// begin t := UnitsInside ( i ) ;
37052: LD_ADDR_VAR 0 4
37056: PUSH
37057: LD_VAR 0 3
37061: PPUSH
37062: CALL_OW 313
37066: ST_TO_ADDR
// if t then
37067: LD_VAR 0 4
37071: IFFALSE 37119
// for j in t do
37073: LD_ADDR_VAR 0 7
37077: PUSH
37078: LD_VAR 0 4
37082: PUSH
37083: FOR_IN
37084: IFFALSE 37117
// result := Replace ( result , result + 1 , j ) ;
37086: LD_ADDR_VAR 0 2
37090: PUSH
37091: LD_VAR 0 2
37095: PPUSH
37096: LD_VAR 0 2
37100: PUSH
37101: LD_INT 1
37103: PLUS
37104: PPUSH
37105: LD_VAR 0 7
37109: PPUSH
37110: CALL_OW 1
37114: ST_TO_ADDR
37115: GO 37083
37117: POP
37118: POP
// end ;
37119: GO 37049
37121: POP
37122: POP
// if not result then
37123: LD_VAR 0 2
37127: NOT
37128: IFFALSE 37132
// exit ;
37130: GO 37280
// mech := result [ 1 ] ;
37132: LD_ADDR_VAR 0 5
37136: PUSH
37137: LD_VAR 0 2
37141: PUSH
37142: LD_INT 1
37144: ARRAY
37145: ST_TO_ADDR
// if result > 1 then
37146: LD_VAR 0 2
37150: PUSH
37151: LD_INT 1
37153: GREATER
37154: IFFALSE 37266
// begin for i = 2 to result do
37156: LD_ADDR_VAR 0 3
37160: PUSH
37161: DOUBLE
37162: LD_INT 2
37164: DEC
37165: ST_TO_ADDR
37166: LD_VAR 0 2
37170: PUSH
37171: FOR_TO
37172: IFFALSE 37264
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37174: LD_ADDR_VAR 0 4
37178: PUSH
37179: LD_VAR 0 2
37183: PUSH
37184: LD_VAR 0 3
37188: ARRAY
37189: PPUSH
37190: LD_INT 3
37192: PPUSH
37193: CALL_OW 259
37197: PUSH
37198: LD_VAR 0 2
37202: PUSH
37203: LD_VAR 0 3
37207: ARRAY
37208: PPUSH
37209: CALL_OW 432
37213: MINUS
37214: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37215: LD_VAR 0 4
37219: PUSH
37220: LD_VAR 0 5
37224: PPUSH
37225: LD_INT 3
37227: PPUSH
37228: CALL_OW 259
37232: PUSH
37233: LD_VAR 0 5
37237: PPUSH
37238: CALL_OW 432
37242: MINUS
37243: GREATEREQUAL
37244: IFFALSE 37262
// mech := result [ i ] ;
37246: LD_ADDR_VAR 0 5
37250: PUSH
37251: LD_VAR 0 2
37255: PUSH
37256: LD_VAR 0 3
37260: ARRAY
37261: ST_TO_ADDR
// end ;
37262: GO 37171
37264: POP
37265: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37266: LD_VAR 0 1
37270: PPUSH
37271: LD_VAR 0 5
37275: PPUSH
37276: CALL_OW 135
// end ;
37280: LD_VAR 0 2
37284: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37285: LD_INT 0
37287: PPUSH
37288: PPUSH
37289: PPUSH
37290: PPUSH
37291: PPUSH
37292: PPUSH
37293: PPUSH
37294: PPUSH
37295: PPUSH
37296: PPUSH
37297: PPUSH
37298: PPUSH
37299: PPUSH
// result := [ ] ;
37300: LD_ADDR_VAR 0 7
37304: PUSH
37305: EMPTY
37306: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37307: LD_VAR 0 1
37311: PPUSH
37312: CALL_OW 266
37316: PUSH
37317: LD_INT 0
37319: PUSH
37320: LD_INT 1
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: IN
37327: NOT
37328: IFFALSE 37332
// exit ;
37330: GO 38966
// if name then
37332: LD_VAR 0 3
37336: IFFALSE 37352
// SetBName ( base_dep , name ) ;
37338: LD_VAR 0 1
37342: PPUSH
37343: LD_VAR 0 3
37347: PPUSH
37348: CALL_OW 500
// base := GetBase ( base_dep ) ;
37352: LD_ADDR_VAR 0 15
37356: PUSH
37357: LD_VAR 0 1
37361: PPUSH
37362: CALL_OW 274
37366: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37367: LD_ADDR_VAR 0 16
37371: PUSH
37372: LD_VAR 0 1
37376: PPUSH
37377: CALL_OW 255
37381: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37382: LD_ADDR_VAR 0 17
37386: PUSH
37387: LD_VAR 0 1
37391: PPUSH
37392: CALL_OW 248
37396: ST_TO_ADDR
// if sources then
37397: LD_VAR 0 5
37401: IFFALSE 37448
// for i = 1 to 3 do
37403: LD_ADDR_VAR 0 8
37407: PUSH
37408: DOUBLE
37409: LD_INT 1
37411: DEC
37412: ST_TO_ADDR
37413: LD_INT 3
37415: PUSH
37416: FOR_TO
37417: IFFALSE 37446
// AddResourceType ( base , i , sources [ i ] ) ;
37419: LD_VAR 0 15
37423: PPUSH
37424: LD_VAR 0 8
37428: PPUSH
37429: LD_VAR 0 5
37433: PUSH
37434: LD_VAR 0 8
37438: ARRAY
37439: PPUSH
37440: CALL_OW 276
37444: GO 37416
37446: POP
37447: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37448: LD_ADDR_VAR 0 18
37452: PUSH
37453: LD_VAR 0 15
37457: PPUSH
37458: LD_VAR 0 2
37462: PPUSH
37463: LD_INT 1
37465: PPUSH
37466: CALL 36709 0 3
37470: ST_TO_ADDR
// InitHc ;
37471: CALL_OW 19
// InitUc ;
37475: CALL_OW 18
// uc_side := side ;
37479: LD_ADDR_OWVAR 20
37483: PUSH
37484: LD_VAR 0 16
37488: ST_TO_ADDR
// uc_nation := nation ;
37489: LD_ADDR_OWVAR 21
37493: PUSH
37494: LD_VAR 0 17
37498: ST_TO_ADDR
// if buildings then
37499: LD_VAR 0 18
37503: IFFALSE 38825
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37505: LD_ADDR_VAR 0 19
37509: PUSH
37510: LD_VAR 0 18
37514: PPUSH
37515: LD_INT 2
37517: PUSH
37518: LD_INT 30
37520: PUSH
37521: LD_INT 29
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 30
37530: PUSH
37531: LD_INT 30
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: LIST
37542: PPUSH
37543: CALL_OW 72
37547: ST_TO_ADDR
// if tmp then
37548: LD_VAR 0 19
37552: IFFALSE 37600
// for i in tmp do
37554: LD_ADDR_VAR 0 8
37558: PUSH
37559: LD_VAR 0 19
37563: PUSH
37564: FOR_IN
37565: IFFALSE 37598
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37567: LD_VAR 0 8
37571: PPUSH
37572: CALL_OW 250
37576: PPUSH
37577: LD_VAR 0 8
37581: PPUSH
37582: CALL_OW 251
37586: PPUSH
37587: LD_VAR 0 16
37591: PPUSH
37592: CALL_OW 441
37596: GO 37564
37598: POP
37599: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37600: LD_VAR 0 18
37604: PPUSH
37605: LD_INT 2
37607: PUSH
37608: LD_INT 30
37610: PUSH
37611: LD_INT 32
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 30
37620: PUSH
37621: LD_INT 33
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: LIST
37632: PPUSH
37633: CALL_OW 72
37637: IFFALSE 37725
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37639: LD_ADDR_VAR 0 8
37643: PUSH
37644: LD_VAR 0 18
37648: PPUSH
37649: LD_INT 2
37651: PUSH
37652: LD_INT 30
37654: PUSH
37655: LD_INT 32
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 30
37664: PUSH
37665: LD_INT 33
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: LIST
37676: PPUSH
37677: CALL_OW 72
37681: PUSH
37682: FOR_IN
37683: IFFALSE 37723
// begin if not GetBWeapon ( i ) then
37685: LD_VAR 0 8
37689: PPUSH
37690: CALL_OW 269
37694: NOT
37695: IFFALSE 37721
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37697: LD_VAR 0 8
37701: PPUSH
37702: LD_VAR 0 8
37706: PPUSH
37707: LD_VAR 0 2
37711: PPUSH
37712: CALL 38971 0 2
37716: PPUSH
37717: CALL_OW 431
// end ;
37721: GO 37682
37723: POP
37724: POP
// end ; for i = 1 to personel do
37725: LD_ADDR_VAR 0 8
37729: PUSH
37730: DOUBLE
37731: LD_INT 1
37733: DEC
37734: ST_TO_ADDR
37735: LD_VAR 0 6
37739: PUSH
37740: FOR_TO
37741: IFFALSE 38805
// begin if i > 4 then
37743: LD_VAR 0 8
37747: PUSH
37748: LD_INT 4
37750: GREATER
37751: IFFALSE 37755
// break ;
37753: GO 38805
// case i of 1 :
37755: LD_VAR 0 8
37759: PUSH
37760: LD_INT 1
37762: DOUBLE
37763: EQUAL
37764: IFTRUE 37768
37766: GO 37848
37768: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37769: LD_ADDR_VAR 0 12
37773: PUSH
37774: LD_VAR 0 18
37778: PPUSH
37779: LD_INT 22
37781: PUSH
37782: LD_VAR 0 16
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: LD_INT 58
37793: PUSH
37794: EMPTY
37795: LIST
37796: PUSH
37797: LD_INT 2
37799: PUSH
37800: LD_INT 30
37802: PUSH
37803: LD_INT 32
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 30
37812: PUSH
37813: LD_INT 4
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 30
37822: PUSH
37823: LD_INT 5
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: LIST
37840: PPUSH
37841: CALL_OW 72
37845: ST_TO_ADDR
37846: GO 38070
37848: LD_INT 2
37850: DOUBLE
37851: EQUAL
37852: IFTRUE 37856
37854: GO 37918
37856: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37857: LD_ADDR_VAR 0 12
37861: PUSH
37862: LD_VAR 0 18
37866: PPUSH
37867: LD_INT 22
37869: PUSH
37870: LD_VAR 0 16
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: LD_INT 2
37881: PUSH
37882: LD_INT 30
37884: PUSH
37885: LD_INT 0
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 30
37894: PUSH
37895: LD_INT 1
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: LIST
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PPUSH
37911: CALL_OW 72
37915: ST_TO_ADDR
37916: GO 38070
37918: LD_INT 3
37920: DOUBLE
37921: EQUAL
37922: IFTRUE 37926
37924: GO 37988
37926: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37927: LD_ADDR_VAR 0 12
37931: PUSH
37932: LD_VAR 0 18
37936: PPUSH
37937: LD_INT 22
37939: PUSH
37940: LD_VAR 0 16
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 2
37951: PUSH
37952: LD_INT 30
37954: PUSH
37955: LD_INT 2
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 30
37964: PUSH
37965: LD_INT 3
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: LIST
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PPUSH
37981: CALL_OW 72
37985: ST_TO_ADDR
37986: GO 38070
37988: LD_INT 4
37990: DOUBLE
37991: EQUAL
37992: IFTRUE 37996
37994: GO 38069
37996: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37997: LD_ADDR_VAR 0 12
38001: PUSH
38002: LD_VAR 0 18
38006: PPUSH
38007: LD_INT 22
38009: PUSH
38010: LD_VAR 0 16
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 2
38021: PUSH
38022: LD_INT 30
38024: PUSH
38025: LD_INT 6
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 30
38034: PUSH
38035: LD_INT 7
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 30
38044: PUSH
38045: LD_INT 8
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PPUSH
38062: CALL_OW 72
38066: ST_TO_ADDR
38067: GO 38070
38069: POP
// if i = 1 then
38070: LD_VAR 0 8
38074: PUSH
38075: LD_INT 1
38077: EQUAL
38078: IFFALSE 38189
// begin tmp := [ ] ;
38080: LD_ADDR_VAR 0 19
38084: PUSH
38085: EMPTY
38086: ST_TO_ADDR
// for j in f do
38087: LD_ADDR_VAR 0 9
38091: PUSH
38092: LD_VAR 0 12
38096: PUSH
38097: FOR_IN
38098: IFFALSE 38171
// if GetBType ( j ) = b_bunker then
38100: LD_VAR 0 9
38104: PPUSH
38105: CALL_OW 266
38109: PUSH
38110: LD_INT 32
38112: EQUAL
38113: IFFALSE 38140
// tmp := Insert ( tmp , 1 , j ) else
38115: LD_ADDR_VAR 0 19
38119: PUSH
38120: LD_VAR 0 19
38124: PPUSH
38125: LD_INT 1
38127: PPUSH
38128: LD_VAR 0 9
38132: PPUSH
38133: CALL_OW 2
38137: ST_TO_ADDR
38138: GO 38169
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38140: LD_ADDR_VAR 0 19
38144: PUSH
38145: LD_VAR 0 19
38149: PPUSH
38150: LD_VAR 0 19
38154: PUSH
38155: LD_INT 1
38157: PLUS
38158: PPUSH
38159: LD_VAR 0 9
38163: PPUSH
38164: CALL_OW 2
38168: ST_TO_ADDR
38169: GO 38097
38171: POP
38172: POP
// if tmp then
38173: LD_VAR 0 19
38177: IFFALSE 38189
// f := tmp ;
38179: LD_ADDR_VAR 0 12
38183: PUSH
38184: LD_VAR 0 19
38188: ST_TO_ADDR
// end ; x := personel [ i ] ;
38189: LD_ADDR_VAR 0 13
38193: PUSH
38194: LD_VAR 0 6
38198: PUSH
38199: LD_VAR 0 8
38203: ARRAY
38204: ST_TO_ADDR
// if x = - 1 then
38205: LD_VAR 0 13
38209: PUSH
38210: LD_INT 1
38212: NEG
38213: EQUAL
38214: IFFALSE 38423
// begin for j in f do
38216: LD_ADDR_VAR 0 9
38220: PUSH
38221: LD_VAR 0 12
38225: PUSH
38226: FOR_IN
38227: IFFALSE 38419
// repeat InitHc ;
38229: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38233: LD_VAR 0 9
38237: PPUSH
38238: CALL_OW 266
38242: PUSH
38243: LD_INT 5
38245: EQUAL
38246: IFFALSE 38316
// begin if UnitsInside ( j ) < 3 then
38248: LD_VAR 0 9
38252: PPUSH
38253: CALL_OW 313
38257: PUSH
38258: LD_INT 3
38260: LESS
38261: IFFALSE 38297
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38263: LD_INT 0
38265: PPUSH
38266: LD_INT 5
38268: PUSH
38269: LD_INT 8
38271: PUSH
38272: LD_INT 9
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: LIST
38279: PUSH
38280: LD_VAR 0 17
38284: ARRAY
38285: PPUSH
38286: LD_VAR 0 4
38290: PPUSH
38291: CALL_OW 380
38295: GO 38314
// PrepareHuman ( false , i , skill ) ;
38297: LD_INT 0
38299: PPUSH
38300: LD_VAR 0 8
38304: PPUSH
38305: LD_VAR 0 4
38309: PPUSH
38310: CALL_OW 380
// end else
38314: GO 38333
// PrepareHuman ( false , i , skill ) ;
38316: LD_INT 0
38318: PPUSH
38319: LD_VAR 0 8
38323: PPUSH
38324: LD_VAR 0 4
38328: PPUSH
38329: CALL_OW 380
// un := CreateHuman ;
38333: LD_ADDR_VAR 0 14
38337: PUSH
38338: CALL_OW 44
38342: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38343: LD_ADDR_VAR 0 7
38347: PUSH
38348: LD_VAR 0 7
38352: PPUSH
38353: LD_INT 1
38355: PPUSH
38356: LD_VAR 0 14
38360: PPUSH
38361: CALL_OW 2
38365: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38366: LD_VAR 0 14
38370: PPUSH
38371: LD_VAR 0 9
38375: PPUSH
38376: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38380: LD_VAR 0 9
38384: PPUSH
38385: CALL_OW 313
38389: PUSH
38390: LD_INT 6
38392: EQUAL
38393: PUSH
38394: LD_VAR 0 9
38398: PPUSH
38399: CALL_OW 266
38403: PUSH
38404: LD_INT 32
38406: PUSH
38407: LD_INT 31
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: IN
38414: OR
38415: IFFALSE 38229
38417: GO 38226
38419: POP
38420: POP
// end else
38421: GO 38803
// for j = 1 to x do
38423: LD_ADDR_VAR 0 9
38427: PUSH
38428: DOUBLE
38429: LD_INT 1
38431: DEC
38432: ST_TO_ADDR
38433: LD_VAR 0 13
38437: PUSH
38438: FOR_TO
38439: IFFALSE 38801
// begin InitHc ;
38441: CALL_OW 19
// if not f then
38445: LD_VAR 0 12
38449: NOT
38450: IFFALSE 38539
// begin PrepareHuman ( false , i , skill ) ;
38452: LD_INT 0
38454: PPUSH
38455: LD_VAR 0 8
38459: PPUSH
38460: LD_VAR 0 4
38464: PPUSH
38465: CALL_OW 380
// un := CreateHuman ;
38469: LD_ADDR_VAR 0 14
38473: PUSH
38474: CALL_OW 44
38478: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38479: LD_ADDR_VAR 0 7
38483: PUSH
38484: LD_VAR 0 7
38488: PPUSH
38489: LD_INT 1
38491: PPUSH
38492: LD_VAR 0 14
38496: PPUSH
38497: CALL_OW 2
38501: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38502: LD_VAR 0 14
38506: PPUSH
38507: LD_VAR 0 1
38511: PPUSH
38512: CALL_OW 250
38516: PPUSH
38517: LD_VAR 0 1
38521: PPUSH
38522: CALL_OW 251
38526: PPUSH
38527: LD_INT 10
38529: PPUSH
38530: LD_INT 0
38532: PPUSH
38533: CALL_OW 50
// continue ;
38537: GO 38438
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38539: LD_VAR 0 12
38543: PUSH
38544: LD_INT 1
38546: ARRAY
38547: PPUSH
38548: CALL_OW 313
38552: PUSH
38553: LD_VAR 0 12
38557: PUSH
38558: LD_INT 1
38560: ARRAY
38561: PPUSH
38562: CALL_OW 266
38566: PUSH
38567: LD_INT 32
38569: PUSH
38570: LD_INT 31
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: IN
38577: AND
38578: PUSH
38579: LD_VAR 0 12
38583: PUSH
38584: LD_INT 1
38586: ARRAY
38587: PPUSH
38588: CALL_OW 313
38592: PUSH
38593: LD_INT 6
38595: EQUAL
38596: OR
38597: IFFALSE 38617
// f := Delete ( f , 1 ) ;
38599: LD_ADDR_VAR 0 12
38603: PUSH
38604: LD_VAR 0 12
38608: PPUSH
38609: LD_INT 1
38611: PPUSH
38612: CALL_OW 3
38616: ST_TO_ADDR
// if not f then
38617: LD_VAR 0 12
38621: NOT
38622: IFFALSE 38640
// begin x := x + 2 ;
38624: LD_ADDR_VAR 0 13
38628: PUSH
38629: LD_VAR 0 13
38633: PUSH
38634: LD_INT 2
38636: PLUS
38637: ST_TO_ADDR
// continue ;
38638: GO 38438
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38640: LD_VAR 0 12
38644: PUSH
38645: LD_INT 1
38647: ARRAY
38648: PPUSH
38649: CALL_OW 266
38653: PUSH
38654: LD_INT 5
38656: EQUAL
38657: IFFALSE 38731
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38659: LD_VAR 0 12
38663: PUSH
38664: LD_INT 1
38666: ARRAY
38667: PPUSH
38668: CALL_OW 313
38672: PUSH
38673: LD_INT 3
38675: LESS
38676: IFFALSE 38712
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38678: LD_INT 0
38680: PPUSH
38681: LD_INT 5
38683: PUSH
38684: LD_INT 8
38686: PUSH
38687: LD_INT 9
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: LIST
38694: PUSH
38695: LD_VAR 0 17
38699: ARRAY
38700: PPUSH
38701: LD_VAR 0 4
38705: PPUSH
38706: CALL_OW 380
38710: GO 38729
// PrepareHuman ( false , i , skill ) ;
38712: LD_INT 0
38714: PPUSH
38715: LD_VAR 0 8
38719: PPUSH
38720: LD_VAR 0 4
38724: PPUSH
38725: CALL_OW 380
// end else
38729: GO 38748
// PrepareHuman ( false , i , skill ) ;
38731: LD_INT 0
38733: PPUSH
38734: LD_VAR 0 8
38738: PPUSH
38739: LD_VAR 0 4
38743: PPUSH
38744: CALL_OW 380
// un := CreateHuman ;
38748: LD_ADDR_VAR 0 14
38752: PUSH
38753: CALL_OW 44
38757: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38758: LD_ADDR_VAR 0 7
38762: PUSH
38763: LD_VAR 0 7
38767: PPUSH
38768: LD_INT 1
38770: PPUSH
38771: LD_VAR 0 14
38775: PPUSH
38776: CALL_OW 2
38780: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38781: LD_VAR 0 14
38785: PPUSH
38786: LD_VAR 0 12
38790: PUSH
38791: LD_INT 1
38793: ARRAY
38794: PPUSH
38795: CALL_OW 52
// end ;
38799: GO 38438
38801: POP
38802: POP
// end ;
38803: GO 37740
38805: POP
38806: POP
// result := result ^ buildings ;
38807: LD_ADDR_VAR 0 7
38811: PUSH
38812: LD_VAR 0 7
38816: PUSH
38817: LD_VAR 0 18
38821: ADD
38822: ST_TO_ADDR
// end else
38823: GO 38966
// begin for i = 1 to personel do
38825: LD_ADDR_VAR 0 8
38829: PUSH
38830: DOUBLE
38831: LD_INT 1
38833: DEC
38834: ST_TO_ADDR
38835: LD_VAR 0 6
38839: PUSH
38840: FOR_TO
38841: IFFALSE 38964
// begin if i > 4 then
38843: LD_VAR 0 8
38847: PUSH
38848: LD_INT 4
38850: GREATER
38851: IFFALSE 38855
// break ;
38853: GO 38964
// x := personel [ i ] ;
38855: LD_ADDR_VAR 0 13
38859: PUSH
38860: LD_VAR 0 6
38864: PUSH
38865: LD_VAR 0 8
38869: ARRAY
38870: ST_TO_ADDR
// if x = - 1 then
38871: LD_VAR 0 13
38875: PUSH
38876: LD_INT 1
38878: NEG
38879: EQUAL
38880: IFFALSE 38884
// continue ;
38882: GO 38840
// PrepareHuman ( false , i , skill ) ;
38884: LD_INT 0
38886: PPUSH
38887: LD_VAR 0 8
38891: PPUSH
38892: LD_VAR 0 4
38896: PPUSH
38897: CALL_OW 380
// un := CreateHuman ;
38901: LD_ADDR_VAR 0 14
38905: PUSH
38906: CALL_OW 44
38910: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38911: LD_VAR 0 14
38915: PPUSH
38916: LD_VAR 0 1
38920: PPUSH
38921: CALL_OW 250
38925: PPUSH
38926: LD_VAR 0 1
38930: PPUSH
38931: CALL_OW 251
38935: PPUSH
38936: LD_INT 10
38938: PPUSH
38939: LD_INT 0
38941: PPUSH
38942: CALL_OW 50
// result := result ^ un ;
38946: LD_ADDR_VAR 0 7
38950: PUSH
38951: LD_VAR 0 7
38955: PUSH
38956: LD_VAR 0 14
38960: ADD
38961: ST_TO_ADDR
// end ;
38962: GO 38840
38964: POP
38965: POP
// end ; end ;
38966: LD_VAR 0 7
38970: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38971: LD_INT 0
38973: PPUSH
38974: PPUSH
38975: PPUSH
38976: PPUSH
38977: PPUSH
38978: PPUSH
38979: PPUSH
38980: PPUSH
38981: PPUSH
38982: PPUSH
38983: PPUSH
38984: PPUSH
38985: PPUSH
38986: PPUSH
38987: PPUSH
38988: PPUSH
// result := false ;
38989: LD_ADDR_VAR 0 3
38993: PUSH
38994: LD_INT 0
38996: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38997: LD_VAR 0 1
39001: NOT
39002: PUSH
39003: LD_VAR 0 1
39007: PPUSH
39008: CALL_OW 266
39012: PUSH
39013: LD_INT 32
39015: PUSH
39016: LD_INT 33
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: IN
39023: NOT
39024: OR
39025: IFFALSE 39029
// exit ;
39027: GO 40138
// nat := GetNation ( tower ) ;
39029: LD_ADDR_VAR 0 12
39033: PUSH
39034: LD_VAR 0 1
39038: PPUSH
39039: CALL_OW 248
39043: ST_TO_ADDR
// side := GetSide ( tower ) ;
39044: LD_ADDR_VAR 0 16
39048: PUSH
39049: LD_VAR 0 1
39053: PPUSH
39054: CALL_OW 255
39058: ST_TO_ADDR
// x := GetX ( tower ) ;
39059: LD_ADDR_VAR 0 10
39063: PUSH
39064: LD_VAR 0 1
39068: PPUSH
39069: CALL_OW 250
39073: ST_TO_ADDR
// y := GetY ( tower ) ;
39074: LD_ADDR_VAR 0 11
39078: PUSH
39079: LD_VAR 0 1
39083: PPUSH
39084: CALL_OW 251
39088: ST_TO_ADDR
// if not x or not y then
39089: LD_VAR 0 10
39093: NOT
39094: PUSH
39095: LD_VAR 0 11
39099: NOT
39100: OR
39101: IFFALSE 39105
// exit ;
39103: GO 40138
// weapon := 0 ;
39105: LD_ADDR_VAR 0 18
39109: PUSH
39110: LD_INT 0
39112: ST_TO_ADDR
// fac_list := [ ] ;
39113: LD_ADDR_VAR 0 17
39117: PUSH
39118: EMPTY
39119: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39120: LD_ADDR_VAR 0 6
39124: PUSH
39125: LD_VAR 0 1
39129: PPUSH
39130: CALL_OW 274
39134: PPUSH
39135: LD_VAR 0 2
39139: PPUSH
39140: LD_INT 0
39142: PPUSH
39143: CALL 36709 0 3
39147: PPUSH
39148: LD_INT 30
39150: PUSH
39151: LD_INT 3
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PPUSH
39158: CALL_OW 72
39162: ST_TO_ADDR
// if not factories then
39163: LD_VAR 0 6
39167: NOT
39168: IFFALSE 39172
// exit ;
39170: GO 40138
// for i in factories do
39172: LD_ADDR_VAR 0 8
39176: PUSH
39177: LD_VAR 0 6
39181: PUSH
39182: FOR_IN
39183: IFFALSE 39208
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39185: LD_ADDR_VAR 0 17
39189: PUSH
39190: LD_VAR 0 17
39194: PUSH
39195: LD_VAR 0 8
39199: PPUSH
39200: CALL_OW 478
39204: UNION
39205: ST_TO_ADDR
39206: GO 39182
39208: POP
39209: POP
// if not fac_list then
39210: LD_VAR 0 17
39214: NOT
39215: IFFALSE 39219
// exit ;
39217: GO 40138
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39219: LD_ADDR_VAR 0 5
39223: PUSH
39224: LD_INT 4
39226: PUSH
39227: LD_INT 5
39229: PUSH
39230: LD_INT 9
39232: PUSH
39233: LD_INT 10
39235: PUSH
39236: LD_INT 6
39238: PUSH
39239: LD_INT 7
39241: PUSH
39242: LD_INT 11
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 27
39256: PUSH
39257: LD_INT 28
39259: PUSH
39260: LD_INT 26
39262: PUSH
39263: LD_INT 30
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 43
39274: PUSH
39275: LD_INT 44
39277: PUSH
39278: LD_INT 46
39280: PUSH
39281: LD_INT 45
39283: PUSH
39284: LD_INT 47
39286: PUSH
39287: LD_INT 49
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: LIST
39302: PUSH
39303: LD_VAR 0 12
39307: ARRAY
39308: ST_TO_ADDR
// list := list isect fac_list ;
39309: LD_ADDR_VAR 0 5
39313: PUSH
39314: LD_VAR 0 5
39318: PUSH
39319: LD_VAR 0 17
39323: ISECT
39324: ST_TO_ADDR
// if not list then
39325: LD_VAR 0 5
39329: NOT
39330: IFFALSE 39334
// exit ;
39332: GO 40138
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39334: LD_VAR 0 12
39338: PUSH
39339: LD_INT 3
39341: EQUAL
39342: PUSH
39343: LD_INT 49
39345: PUSH
39346: LD_VAR 0 5
39350: IN
39351: AND
39352: PUSH
39353: LD_INT 31
39355: PPUSH
39356: LD_VAR 0 16
39360: PPUSH
39361: CALL_OW 321
39365: PUSH
39366: LD_INT 2
39368: EQUAL
39369: AND
39370: IFFALSE 39430
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39372: LD_INT 22
39374: PUSH
39375: LD_VAR 0 16
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 35
39386: PUSH
39387: LD_INT 49
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 91
39396: PUSH
39397: LD_VAR 0 1
39401: PUSH
39402: LD_INT 10
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: LIST
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: LIST
39414: PPUSH
39415: CALL_OW 69
39419: NOT
39420: IFFALSE 39430
// weapon := ru_time_lapser ;
39422: LD_ADDR_VAR 0 18
39426: PUSH
39427: LD_INT 49
39429: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39430: LD_VAR 0 12
39434: PUSH
39435: LD_INT 1
39437: PUSH
39438: LD_INT 2
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: IN
39445: PUSH
39446: LD_INT 11
39448: PUSH
39449: LD_VAR 0 5
39453: IN
39454: PUSH
39455: LD_INT 30
39457: PUSH
39458: LD_VAR 0 5
39462: IN
39463: OR
39464: AND
39465: PUSH
39466: LD_INT 6
39468: PPUSH
39469: LD_VAR 0 16
39473: PPUSH
39474: CALL_OW 321
39478: PUSH
39479: LD_INT 2
39481: EQUAL
39482: AND
39483: IFFALSE 39648
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39485: LD_INT 22
39487: PUSH
39488: LD_VAR 0 16
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 2
39499: PUSH
39500: LD_INT 35
39502: PUSH
39503: LD_INT 11
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 35
39512: PUSH
39513: LD_INT 30
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 91
39527: PUSH
39528: LD_VAR 0 1
39532: PUSH
39533: LD_INT 18
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: LIST
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: LIST
39545: PPUSH
39546: CALL_OW 69
39550: NOT
39551: PUSH
39552: LD_INT 22
39554: PUSH
39555: LD_VAR 0 16
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 2
39566: PUSH
39567: LD_INT 30
39569: PUSH
39570: LD_INT 32
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 30
39579: PUSH
39580: LD_INT 33
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 91
39594: PUSH
39595: LD_VAR 0 1
39599: PUSH
39600: LD_INT 12
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: LIST
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: LIST
39612: PUSH
39613: EMPTY
39614: LIST
39615: PPUSH
39616: CALL_OW 69
39620: PUSH
39621: LD_INT 2
39623: GREATER
39624: AND
39625: IFFALSE 39648
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39627: LD_ADDR_VAR 0 18
39631: PUSH
39632: LD_INT 11
39634: PUSH
39635: LD_INT 30
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_VAR 0 12
39646: ARRAY
39647: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39648: LD_VAR 0 18
39652: NOT
39653: PUSH
39654: LD_INT 40
39656: PPUSH
39657: LD_VAR 0 16
39661: PPUSH
39662: CALL_OW 321
39666: PUSH
39667: LD_INT 2
39669: EQUAL
39670: AND
39671: PUSH
39672: LD_INT 7
39674: PUSH
39675: LD_VAR 0 5
39679: IN
39680: PUSH
39681: LD_INT 28
39683: PUSH
39684: LD_VAR 0 5
39688: IN
39689: OR
39690: PUSH
39691: LD_INT 45
39693: PUSH
39694: LD_VAR 0 5
39698: IN
39699: OR
39700: AND
39701: IFFALSE 39955
// begin hex := GetHexInfo ( x , y ) ;
39703: LD_ADDR_VAR 0 4
39707: PUSH
39708: LD_VAR 0 10
39712: PPUSH
39713: LD_VAR 0 11
39717: PPUSH
39718: CALL_OW 546
39722: ST_TO_ADDR
// if hex [ 1 ] then
39723: LD_VAR 0 4
39727: PUSH
39728: LD_INT 1
39730: ARRAY
39731: IFFALSE 39735
// exit ;
39733: GO 40138
// height := hex [ 2 ] ;
39735: LD_ADDR_VAR 0 15
39739: PUSH
39740: LD_VAR 0 4
39744: PUSH
39745: LD_INT 2
39747: ARRAY
39748: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39749: LD_ADDR_VAR 0 14
39753: PUSH
39754: LD_INT 0
39756: PUSH
39757: LD_INT 2
39759: PUSH
39760: LD_INT 3
39762: PUSH
39763: LD_INT 5
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: ST_TO_ADDR
// for i in tmp do
39772: LD_ADDR_VAR 0 8
39776: PUSH
39777: LD_VAR 0 14
39781: PUSH
39782: FOR_IN
39783: IFFALSE 39953
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39785: LD_ADDR_VAR 0 9
39789: PUSH
39790: LD_VAR 0 10
39794: PPUSH
39795: LD_VAR 0 8
39799: PPUSH
39800: LD_INT 5
39802: PPUSH
39803: CALL_OW 272
39807: PUSH
39808: LD_VAR 0 11
39812: PPUSH
39813: LD_VAR 0 8
39817: PPUSH
39818: LD_INT 5
39820: PPUSH
39821: CALL_OW 273
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39830: LD_VAR 0 9
39834: PUSH
39835: LD_INT 1
39837: ARRAY
39838: PPUSH
39839: LD_VAR 0 9
39843: PUSH
39844: LD_INT 2
39846: ARRAY
39847: PPUSH
39848: CALL_OW 488
39852: IFFALSE 39951
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39854: LD_ADDR_VAR 0 4
39858: PUSH
39859: LD_VAR 0 9
39863: PUSH
39864: LD_INT 1
39866: ARRAY
39867: PPUSH
39868: LD_VAR 0 9
39872: PUSH
39873: LD_INT 2
39875: ARRAY
39876: PPUSH
39877: CALL_OW 546
39881: ST_TO_ADDR
// if hex [ 1 ] then
39882: LD_VAR 0 4
39886: PUSH
39887: LD_INT 1
39889: ARRAY
39890: IFFALSE 39894
// continue ;
39892: GO 39782
// h := hex [ 2 ] ;
39894: LD_ADDR_VAR 0 13
39898: PUSH
39899: LD_VAR 0 4
39903: PUSH
39904: LD_INT 2
39906: ARRAY
39907: ST_TO_ADDR
// if h + 7 < height then
39908: LD_VAR 0 13
39912: PUSH
39913: LD_INT 7
39915: PLUS
39916: PUSH
39917: LD_VAR 0 15
39921: LESS
39922: IFFALSE 39951
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39924: LD_ADDR_VAR 0 18
39928: PUSH
39929: LD_INT 7
39931: PUSH
39932: LD_INT 28
39934: PUSH
39935: LD_INT 45
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: LIST
39942: PUSH
39943: LD_VAR 0 12
39947: ARRAY
39948: ST_TO_ADDR
// break ;
39949: GO 39953
// end ; end ; end ;
39951: GO 39782
39953: POP
39954: POP
// end ; if not weapon then
39955: LD_VAR 0 18
39959: NOT
39960: IFFALSE 40020
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39962: LD_ADDR_VAR 0 5
39966: PUSH
39967: LD_VAR 0 5
39971: PUSH
39972: LD_INT 11
39974: PUSH
39975: LD_INT 30
39977: PUSH
39978: LD_INT 49
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: LIST
39985: DIFF
39986: ST_TO_ADDR
// if not list then
39987: LD_VAR 0 5
39991: NOT
39992: IFFALSE 39996
// exit ;
39994: GO 40138
// weapon := list [ rand ( 1 , list ) ] ;
39996: LD_ADDR_VAR 0 18
40000: PUSH
40001: LD_VAR 0 5
40005: PUSH
40006: LD_INT 1
40008: PPUSH
40009: LD_VAR 0 5
40013: PPUSH
40014: CALL_OW 12
40018: ARRAY
40019: ST_TO_ADDR
// end ; if weapon then
40020: LD_VAR 0 18
40024: IFFALSE 40138
// begin tmp := CostOfWeapon ( weapon ) ;
40026: LD_ADDR_VAR 0 14
40030: PUSH
40031: LD_VAR 0 18
40035: PPUSH
40036: CALL_OW 451
40040: ST_TO_ADDR
// j := GetBase ( tower ) ;
40041: LD_ADDR_VAR 0 9
40045: PUSH
40046: LD_VAR 0 1
40050: PPUSH
40051: CALL_OW 274
40055: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40056: LD_VAR 0 9
40060: PPUSH
40061: LD_INT 1
40063: PPUSH
40064: CALL_OW 275
40068: PUSH
40069: LD_VAR 0 14
40073: PUSH
40074: LD_INT 1
40076: ARRAY
40077: GREATEREQUAL
40078: PUSH
40079: LD_VAR 0 9
40083: PPUSH
40084: LD_INT 2
40086: PPUSH
40087: CALL_OW 275
40091: PUSH
40092: LD_VAR 0 14
40096: PUSH
40097: LD_INT 2
40099: ARRAY
40100: GREATEREQUAL
40101: AND
40102: PUSH
40103: LD_VAR 0 9
40107: PPUSH
40108: LD_INT 3
40110: PPUSH
40111: CALL_OW 275
40115: PUSH
40116: LD_VAR 0 14
40120: PUSH
40121: LD_INT 3
40123: ARRAY
40124: GREATEREQUAL
40125: AND
40126: IFFALSE 40138
// result := weapon ;
40128: LD_ADDR_VAR 0 3
40132: PUSH
40133: LD_VAR 0 18
40137: ST_TO_ADDR
// end ; end ;
40138: LD_VAR 0 3
40142: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40143: LD_INT 0
40145: PPUSH
40146: PPUSH
// result := true ;
40147: LD_ADDR_VAR 0 3
40151: PUSH
40152: LD_INT 1
40154: ST_TO_ADDR
// if array1 = array2 then
40155: LD_VAR 0 1
40159: PUSH
40160: LD_VAR 0 2
40164: EQUAL
40165: IFFALSE 40225
// begin for i = 1 to array1 do
40167: LD_ADDR_VAR 0 4
40171: PUSH
40172: DOUBLE
40173: LD_INT 1
40175: DEC
40176: ST_TO_ADDR
40177: LD_VAR 0 1
40181: PUSH
40182: FOR_TO
40183: IFFALSE 40221
// if array1 [ i ] <> array2 [ i ] then
40185: LD_VAR 0 1
40189: PUSH
40190: LD_VAR 0 4
40194: ARRAY
40195: PUSH
40196: LD_VAR 0 2
40200: PUSH
40201: LD_VAR 0 4
40205: ARRAY
40206: NONEQUAL
40207: IFFALSE 40219
// begin result := false ;
40209: LD_ADDR_VAR 0 3
40213: PUSH
40214: LD_INT 0
40216: ST_TO_ADDR
// break ;
40217: GO 40221
// end ;
40219: GO 40182
40221: POP
40222: POP
// end else
40223: GO 40233
// result := false ;
40225: LD_ADDR_VAR 0 3
40229: PUSH
40230: LD_INT 0
40232: ST_TO_ADDR
// end ;
40233: LD_VAR 0 3
40237: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40238: LD_INT 0
40240: PPUSH
40241: PPUSH
// if not array1 or not array2 then
40242: LD_VAR 0 1
40246: NOT
40247: PUSH
40248: LD_VAR 0 2
40252: NOT
40253: OR
40254: IFFALSE 40258
// exit ;
40256: GO 40322
// result := true ;
40258: LD_ADDR_VAR 0 3
40262: PUSH
40263: LD_INT 1
40265: ST_TO_ADDR
// for i = 1 to array1 do
40266: LD_ADDR_VAR 0 4
40270: PUSH
40271: DOUBLE
40272: LD_INT 1
40274: DEC
40275: ST_TO_ADDR
40276: LD_VAR 0 1
40280: PUSH
40281: FOR_TO
40282: IFFALSE 40320
// if array1 [ i ] <> array2 [ i ] then
40284: LD_VAR 0 1
40288: PUSH
40289: LD_VAR 0 4
40293: ARRAY
40294: PUSH
40295: LD_VAR 0 2
40299: PUSH
40300: LD_VAR 0 4
40304: ARRAY
40305: NONEQUAL
40306: IFFALSE 40318
// begin result := false ;
40308: LD_ADDR_VAR 0 3
40312: PUSH
40313: LD_INT 0
40315: ST_TO_ADDR
// break ;
40316: GO 40320
// end ;
40318: GO 40281
40320: POP
40321: POP
// end ;
40322: LD_VAR 0 3
40326: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40327: LD_INT 0
40329: PPUSH
40330: PPUSH
40331: PPUSH
// pom := GetBase ( fac ) ;
40332: LD_ADDR_VAR 0 5
40336: PUSH
40337: LD_VAR 0 1
40341: PPUSH
40342: CALL_OW 274
40346: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40347: LD_ADDR_VAR 0 4
40351: PUSH
40352: LD_VAR 0 2
40356: PUSH
40357: LD_INT 1
40359: ARRAY
40360: PPUSH
40361: LD_VAR 0 2
40365: PUSH
40366: LD_INT 2
40368: ARRAY
40369: PPUSH
40370: LD_VAR 0 2
40374: PUSH
40375: LD_INT 3
40377: ARRAY
40378: PPUSH
40379: LD_VAR 0 2
40383: PUSH
40384: LD_INT 4
40386: ARRAY
40387: PPUSH
40388: CALL_OW 449
40392: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40393: LD_ADDR_VAR 0 3
40397: PUSH
40398: LD_VAR 0 5
40402: PPUSH
40403: LD_INT 1
40405: PPUSH
40406: CALL_OW 275
40410: PUSH
40411: LD_VAR 0 4
40415: PUSH
40416: LD_INT 1
40418: ARRAY
40419: GREATEREQUAL
40420: PUSH
40421: LD_VAR 0 5
40425: PPUSH
40426: LD_INT 2
40428: PPUSH
40429: CALL_OW 275
40433: PUSH
40434: LD_VAR 0 4
40438: PUSH
40439: LD_INT 2
40441: ARRAY
40442: GREATEREQUAL
40443: AND
40444: PUSH
40445: LD_VAR 0 5
40449: PPUSH
40450: LD_INT 3
40452: PPUSH
40453: CALL_OW 275
40457: PUSH
40458: LD_VAR 0 4
40462: PUSH
40463: LD_INT 3
40465: ARRAY
40466: GREATEREQUAL
40467: AND
40468: ST_TO_ADDR
// end ;
40469: LD_VAR 0 3
40473: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40474: LD_INT 0
40476: PPUSH
40477: PPUSH
40478: PPUSH
40479: PPUSH
// pom := GetBase ( building ) ;
40480: LD_ADDR_VAR 0 3
40484: PUSH
40485: LD_VAR 0 1
40489: PPUSH
40490: CALL_OW 274
40494: ST_TO_ADDR
// if not pom then
40495: LD_VAR 0 3
40499: NOT
40500: IFFALSE 40504
// exit ;
40502: GO 40674
// btype := GetBType ( building ) ;
40504: LD_ADDR_VAR 0 5
40508: PUSH
40509: LD_VAR 0 1
40513: PPUSH
40514: CALL_OW 266
40518: ST_TO_ADDR
// if btype = b_armoury then
40519: LD_VAR 0 5
40523: PUSH
40524: LD_INT 4
40526: EQUAL
40527: IFFALSE 40537
// btype := b_barracks ;
40529: LD_ADDR_VAR 0 5
40533: PUSH
40534: LD_INT 5
40536: ST_TO_ADDR
// if btype = b_depot then
40537: LD_VAR 0 5
40541: PUSH
40542: LD_INT 0
40544: EQUAL
40545: IFFALSE 40555
// btype := b_warehouse ;
40547: LD_ADDR_VAR 0 5
40551: PUSH
40552: LD_INT 1
40554: ST_TO_ADDR
// if btype = b_workshop then
40555: LD_VAR 0 5
40559: PUSH
40560: LD_INT 2
40562: EQUAL
40563: IFFALSE 40573
// btype := b_factory ;
40565: LD_ADDR_VAR 0 5
40569: PUSH
40570: LD_INT 3
40572: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40573: LD_ADDR_VAR 0 4
40577: PUSH
40578: LD_VAR 0 5
40582: PPUSH
40583: LD_VAR 0 1
40587: PPUSH
40588: CALL_OW 248
40592: PPUSH
40593: CALL_OW 450
40597: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40598: LD_ADDR_VAR 0 2
40602: PUSH
40603: LD_VAR 0 3
40607: PPUSH
40608: LD_INT 1
40610: PPUSH
40611: CALL_OW 275
40615: PUSH
40616: LD_VAR 0 4
40620: PUSH
40621: LD_INT 1
40623: ARRAY
40624: GREATEREQUAL
40625: PUSH
40626: LD_VAR 0 3
40630: PPUSH
40631: LD_INT 2
40633: PPUSH
40634: CALL_OW 275
40638: PUSH
40639: LD_VAR 0 4
40643: PUSH
40644: LD_INT 2
40646: ARRAY
40647: GREATEREQUAL
40648: AND
40649: PUSH
40650: LD_VAR 0 3
40654: PPUSH
40655: LD_INT 3
40657: PPUSH
40658: CALL_OW 275
40662: PUSH
40663: LD_VAR 0 4
40667: PUSH
40668: LD_INT 3
40670: ARRAY
40671: GREATEREQUAL
40672: AND
40673: ST_TO_ADDR
// end ;
40674: LD_VAR 0 2
40678: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40679: LD_INT 0
40681: PPUSH
40682: PPUSH
40683: PPUSH
// pom := GetBase ( building ) ;
40684: LD_ADDR_VAR 0 4
40688: PUSH
40689: LD_VAR 0 1
40693: PPUSH
40694: CALL_OW 274
40698: ST_TO_ADDR
// if not pom then
40699: LD_VAR 0 4
40703: NOT
40704: IFFALSE 40708
// exit ;
40706: GO 40809
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40708: LD_ADDR_VAR 0 5
40712: PUSH
40713: LD_VAR 0 2
40717: PPUSH
40718: LD_VAR 0 1
40722: PPUSH
40723: CALL_OW 248
40727: PPUSH
40728: CALL_OW 450
40732: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40733: LD_ADDR_VAR 0 3
40737: PUSH
40738: LD_VAR 0 4
40742: PPUSH
40743: LD_INT 1
40745: PPUSH
40746: CALL_OW 275
40750: PUSH
40751: LD_VAR 0 5
40755: PUSH
40756: LD_INT 1
40758: ARRAY
40759: GREATEREQUAL
40760: PUSH
40761: LD_VAR 0 4
40765: PPUSH
40766: LD_INT 2
40768: PPUSH
40769: CALL_OW 275
40773: PUSH
40774: LD_VAR 0 5
40778: PUSH
40779: LD_INT 2
40781: ARRAY
40782: GREATEREQUAL
40783: AND
40784: PUSH
40785: LD_VAR 0 4
40789: PPUSH
40790: LD_INT 3
40792: PPUSH
40793: CALL_OW 275
40797: PUSH
40798: LD_VAR 0 5
40802: PUSH
40803: LD_INT 3
40805: ARRAY
40806: GREATEREQUAL
40807: AND
40808: ST_TO_ADDR
// end ;
40809: LD_VAR 0 3
40813: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40814: LD_INT 0
40816: PPUSH
40817: PPUSH
40818: PPUSH
40819: PPUSH
40820: PPUSH
40821: PPUSH
40822: PPUSH
40823: PPUSH
40824: PPUSH
40825: PPUSH
40826: PPUSH
// result := false ;
40827: LD_ADDR_VAR 0 8
40831: PUSH
40832: LD_INT 0
40834: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40835: LD_VAR 0 5
40839: NOT
40840: PUSH
40841: LD_VAR 0 1
40845: NOT
40846: OR
40847: PUSH
40848: LD_VAR 0 2
40852: NOT
40853: OR
40854: PUSH
40855: LD_VAR 0 3
40859: NOT
40860: OR
40861: IFFALSE 40865
// exit ;
40863: GO 41679
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40865: LD_ADDR_VAR 0 14
40869: PUSH
40870: LD_VAR 0 1
40874: PPUSH
40875: LD_VAR 0 2
40879: PPUSH
40880: LD_VAR 0 3
40884: PPUSH
40885: LD_VAR 0 4
40889: PPUSH
40890: LD_VAR 0 5
40894: PUSH
40895: LD_INT 1
40897: ARRAY
40898: PPUSH
40899: CALL_OW 248
40903: PPUSH
40904: LD_INT 0
40906: PPUSH
40907: CALL 42916 0 6
40911: ST_TO_ADDR
// if not hexes then
40912: LD_VAR 0 14
40916: NOT
40917: IFFALSE 40921
// exit ;
40919: GO 41679
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40921: LD_ADDR_VAR 0 17
40925: PUSH
40926: LD_VAR 0 5
40930: PPUSH
40931: LD_INT 22
40933: PUSH
40934: LD_VAR 0 13
40938: PPUSH
40939: CALL_OW 255
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 2
40950: PUSH
40951: LD_INT 30
40953: PUSH
40954: LD_INT 0
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 30
40963: PUSH
40964: LD_INT 1
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: LIST
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PPUSH
40980: CALL_OW 72
40984: ST_TO_ADDR
// for i = 1 to hexes do
40985: LD_ADDR_VAR 0 9
40989: PUSH
40990: DOUBLE
40991: LD_INT 1
40993: DEC
40994: ST_TO_ADDR
40995: LD_VAR 0 14
40999: PUSH
41000: FOR_TO
41001: IFFALSE 41677
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41003: LD_ADDR_VAR 0 13
41007: PUSH
41008: LD_VAR 0 14
41012: PUSH
41013: LD_VAR 0 9
41017: ARRAY
41018: PUSH
41019: LD_INT 1
41021: ARRAY
41022: PPUSH
41023: LD_VAR 0 14
41027: PUSH
41028: LD_VAR 0 9
41032: ARRAY
41033: PUSH
41034: LD_INT 2
41036: ARRAY
41037: PPUSH
41038: CALL_OW 428
41042: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41043: LD_VAR 0 14
41047: PUSH
41048: LD_VAR 0 9
41052: ARRAY
41053: PUSH
41054: LD_INT 1
41056: ARRAY
41057: PPUSH
41058: LD_VAR 0 14
41062: PUSH
41063: LD_VAR 0 9
41067: ARRAY
41068: PUSH
41069: LD_INT 2
41071: ARRAY
41072: PPUSH
41073: CALL_OW 351
41077: PUSH
41078: LD_VAR 0 14
41082: PUSH
41083: LD_VAR 0 9
41087: ARRAY
41088: PUSH
41089: LD_INT 1
41091: ARRAY
41092: PPUSH
41093: LD_VAR 0 14
41097: PUSH
41098: LD_VAR 0 9
41102: ARRAY
41103: PUSH
41104: LD_INT 2
41106: ARRAY
41107: PPUSH
41108: CALL_OW 488
41112: NOT
41113: OR
41114: PUSH
41115: LD_VAR 0 13
41119: PPUSH
41120: CALL_OW 247
41124: PUSH
41125: LD_INT 3
41127: EQUAL
41128: OR
41129: IFFALSE 41135
// exit ;
41131: POP
41132: POP
41133: GO 41679
// if not tmp then
41135: LD_VAR 0 13
41139: NOT
41140: IFFALSE 41144
// continue ;
41142: GO 41000
// result := true ;
41144: LD_ADDR_VAR 0 8
41148: PUSH
41149: LD_INT 1
41151: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41152: LD_VAR 0 6
41156: PUSH
41157: LD_VAR 0 13
41161: PPUSH
41162: CALL_OW 247
41166: PUSH
41167: LD_INT 2
41169: EQUAL
41170: AND
41171: PUSH
41172: LD_VAR 0 13
41176: PPUSH
41177: CALL_OW 263
41181: PUSH
41182: LD_INT 1
41184: EQUAL
41185: AND
41186: IFFALSE 41350
// begin if IsDrivenBy ( tmp ) then
41188: LD_VAR 0 13
41192: PPUSH
41193: CALL_OW 311
41197: IFFALSE 41201
// continue ;
41199: GO 41000
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41201: LD_VAR 0 6
41205: PPUSH
41206: LD_INT 3
41208: PUSH
41209: LD_INT 60
41211: PUSH
41212: EMPTY
41213: LIST
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 3
41221: PUSH
41222: LD_INT 55
41224: PUSH
41225: EMPTY
41226: LIST
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PPUSH
41236: CALL_OW 72
41240: IFFALSE 41348
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41242: LD_ADDR_VAR 0 18
41246: PUSH
41247: LD_VAR 0 6
41251: PPUSH
41252: LD_INT 3
41254: PUSH
41255: LD_INT 60
41257: PUSH
41258: EMPTY
41259: LIST
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 3
41267: PUSH
41268: LD_INT 55
41270: PUSH
41271: EMPTY
41272: LIST
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PPUSH
41282: CALL_OW 72
41286: PUSH
41287: LD_INT 1
41289: ARRAY
41290: ST_TO_ADDR
// if IsInUnit ( driver ) then
41291: LD_VAR 0 18
41295: PPUSH
41296: CALL_OW 310
41300: IFFALSE 41311
// ComExit ( driver ) ;
41302: LD_VAR 0 18
41306: PPUSH
41307: CALL 66100 0 1
// AddComEnterUnit ( driver , tmp ) ;
41311: LD_VAR 0 18
41315: PPUSH
41316: LD_VAR 0 13
41320: PPUSH
41321: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41325: LD_VAR 0 18
41329: PPUSH
41330: LD_VAR 0 7
41334: PPUSH
41335: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41339: LD_VAR 0 18
41343: PPUSH
41344: CALL_OW 181
// end ; continue ;
41348: GO 41000
// end ; if not cleaners or not tmp in cleaners then
41350: LD_VAR 0 6
41354: NOT
41355: PUSH
41356: LD_VAR 0 13
41360: PUSH
41361: LD_VAR 0 6
41365: IN
41366: NOT
41367: OR
41368: IFFALSE 41675
// begin if dep then
41370: LD_VAR 0 17
41374: IFFALSE 41510
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41376: LD_ADDR_VAR 0 16
41380: PUSH
41381: LD_VAR 0 17
41385: PUSH
41386: LD_INT 1
41388: ARRAY
41389: PPUSH
41390: CALL_OW 250
41394: PPUSH
41395: LD_VAR 0 17
41399: PUSH
41400: LD_INT 1
41402: ARRAY
41403: PPUSH
41404: CALL_OW 254
41408: PPUSH
41409: LD_INT 5
41411: PPUSH
41412: CALL_OW 272
41416: PUSH
41417: LD_VAR 0 17
41421: PUSH
41422: LD_INT 1
41424: ARRAY
41425: PPUSH
41426: CALL_OW 251
41430: PPUSH
41431: LD_VAR 0 17
41435: PUSH
41436: LD_INT 1
41438: ARRAY
41439: PPUSH
41440: CALL_OW 254
41444: PPUSH
41445: LD_INT 5
41447: PPUSH
41448: CALL_OW 273
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41457: LD_VAR 0 16
41461: PUSH
41462: LD_INT 1
41464: ARRAY
41465: PPUSH
41466: LD_VAR 0 16
41470: PUSH
41471: LD_INT 2
41473: ARRAY
41474: PPUSH
41475: CALL_OW 488
41479: IFFALSE 41510
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41481: LD_VAR 0 13
41485: PPUSH
41486: LD_VAR 0 16
41490: PUSH
41491: LD_INT 1
41493: ARRAY
41494: PPUSH
41495: LD_VAR 0 16
41499: PUSH
41500: LD_INT 2
41502: ARRAY
41503: PPUSH
41504: CALL_OW 111
// continue ;
41508: GO 41000
// end ; end ; r := GetDir ( tmp ) ;
41510: LD_ADDR_VAR 0 15
41514: PUSH
41515: LD_VAR 0 13
41519: PPUSH
41520: CALL_OW 254
41524: ST_TO_ADDR
// if r = 5 then
41525: LD_VAR 0 15
41529: PUSH
41530: LD_INT 5
41532: EQUAL
41533: IFFALSE 41543
// r := 0 ;
41535: LD_ADDR_VAR 0 15
41539: PUSH
41540: LD_INT 0
41542: ST_TO_ADDR
// for j = r to 5 do
41543: LD_ADDR_VAR 0 10
41547: PUSH
41548: DOUBLE
41549: LD_VAR 0 15
41553: DEC
41554: ST_TO_ADDR
41555: LD_INT 5
41557: PUSH
41558: FOR_TO
41559: IFFALSE 41673
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41561: LD_ADDR_VAR 0 11
41565: PUSH
41566: LD_VAR 0 13
41570: PPUSH
41571: CALL_OW 250
41575: PPUSH
41576: LD_VAR 0 10
41580: PPUSH
41581: LD_INT 2
41583: PPUSH
41584: CALL_OW 272
41588: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41589: LD_ADDR_VAR 0 12
41593: PUSH
41594: LD_VAR 0 13
41598: PPUSH
41599: CALL_OW 251
41603: PPUSH
41604: LD_VAR 0 10
41608: PPUSH
41609: LD_INT 2
41611: PPUSH
41612: CALL_OW 273
41616: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41617: LD_VAR 0 11
41621: PPUSH
41622: LD_VAR 0 12
41626: PPUSH
41627: CALL_OW 488
41631: PUSH
41632: LD_VAR 0 11
41636: PPUSH
41637: LD_VAR 0 12
41641: PPUSH
41642: CALL_OW 428
41646: NOT
41647: AND
41648: IFFALSE 41671
// begin ComMoveXY ( tmp , _x , _y ) ;
41650: LD_VAR 0 13
41654: PPUSH
41655: LD_VAR 0 11
41659: PPUSH
41660: LD_VAR 0 12
41664: PPUSH
41665: CALL_OW 111
// break ;
41669: GO 41673
// end ; end ;
41671: GO 41558
41673: POP
41674: POP
// end ; end ;
41675: GO 41000
41677: POP
41678: POP
// end ;
41679: LD_VAR 0 8
41683: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41684: LD_INT 0
41686: PPUSH
// result := true ;
41687: LD_ADDR_VAR 0 3
41691: PUSH
41692: LD_INT 1
41694: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41695: LD_VAR 0 2
41699: PUSH
41700: LD_INT 24
41702: DOUBLE
41703: EQUAL
41704: IFTRUE 41714
41706: LD_INT 33
41708: DOUBLE
41709: EQUAL
41710: IFTRUE 41714
41712: GO 41739
41714: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41715: LD_ADDR_VAR 0 3
41719: PUSH
41720: LD_INT 32
41722: PPUSH
41723: LD_VAR 0 1
41727: PPUSH
41728: CALL_OW 321
41732: PUSH
41733: LD_INT 2
41735: EQUAL
41736: ST_TO_ADDR
41737: GO 42059
41739: LD_INT 20
41741: DOUBLE
41742: EQUAL
41743: IFTRUE 41747
41745: GO 41772
41747: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41748: LD_ADDR_VAR 0 3
41752: PUSH
41753: LD_INT 6
41755: PPUSH
41756: LD_VAR 0 1
41760: PPUSH
41761: CALL_OW 321
41765: PUSH
41766: LD_INT 2
41768: EQUAL
41769: ST_TO_ADDR
41770: GO 42059
41772: LD_INT 22
41774: DOUBLE
41775: EQUAL
41776: IFTRUE 41786
41778: LD_INT 36
41780: DOUBLE
41781: EQUAL
41782: IFTRUE 41786
41784: GO 41811
41786: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41787: LD_ADDR_VAR 0 3
41791: PUSH
41792: LD_INT 15
41794: PPUSH
41795: LD_VAR 0 1
41799: PPUSH
41800: CALL_OW 321
41804: PUSH
41805: LD_INT 2
41807: EQUAL
41808: ST_TO_ADDR
41809: GO 42059
41811: LD_INT 30
41813: DOUBLE
41814: EQUAL
41815: IFTRUE 41819
41817: GO 41844
41819: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41820: LD_ADDR_VAR 0 3
41824: PUSH
41825: LD_INT 20
41827: PPUSH
41828: LD_VAR 0 1
41832: PPUSH
41833: CALL_OW 321
41837: PUSH
41838: LD_INT 2
41840: EQUAL
41841: ST_TO_ADDR
41842: GO 42059
41844: LD_INT 28
41846: DOUBLE
41847: EQUAL
41848: IFTRUE 41858
41850: LD_INT 21
41852: DOUBLE
41853: EQUAL
41854: IFTRUE 41858
41856: GO 41883
41858: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41859: LD_ADDR_VAR 0 3
41863: PUSH
41864: LD_INT 21
41866: PPUSH
41867: LD_VAR 0 1
41871: PPUSH
41872: CALL_OW 321
41876: PUSH
41877: LD_INT 2
41879: EQUAL
41880: ST_TO_ADDR
41881: GO 42059
41883: LD_INT 16
41885: DOUBLE
41886: EQUAL
41887: IFTRUE 41891
41889: GO 41918
41891: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41892: LD_ADDR_VAR 0 3
41896: PUSH
41897: LD_EXP 107
41901: PPUSH
41902: LD_VAR 0 1
41906: PPUSH
41907: CALL_OW 321
41911: PUSH
41912: LD_INT 2
41914: EQUAL
41915: ST_TO_ADDR
41916: GO 42059
41918: LD_INT 19
41920: DOUBLE
41921: EQUAL
41922: IFTRUE 41932
41924: LD_INT 23
41926: DOUBLE
41927: EQUAL
41928: IFTRUE 41932
41930: GO 41959
41932: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41933: LD_ADDR_VAR 0 3
41937: PUSH
41938: LD_EXP 106
41942: PPUSH
41943: LD_VAR 0 1
41947: PPUSH
41948: CALL_OW 321
41952: PUSH
41953: LD_INT 2
41955: EQUAL
41956: ST_TO_ADDR
41957: GO 42059
41959: LD_INT 17
41961: DOUBLE
41962: EQUAL
41963: IFTRUE 41967
41965: GO 41992
41967: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41968: LD_ADDR_VAR 0 3
41972: PUSH
41973: LD_INT 39
41975: PPUSH
41976: LD_VAR 0 1
41980: PPUSH
41981: CALL_OW 321
41985: PUSH
41986: LD_INT 2
41988: EQUAL
41989: ST_TO_ADDR
41990: GO 42059
41992: LD_INT 18
41994: DOUBLE
41995: EQUAL
41996: IFTRUE 42000
41998: GO 42025
42000: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42001: LD_ADDR_VAR 0 3
42005: PUSH
42006: LD_INT 40
42008: PPUSH
42009: LD_VAR 0 1
42013: PPUSH
42014: CALL_OW 321
42018: PUSH
42019: LD_INT 2
42021: EQUAL
42022: ST_TO_ADDR
42023: GO 42059
42025: LD_INT 27
42027: DOUBLE
42028: EQUAL
42029: IFTRUE 42033
42031: GO 42058
42033: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42034: LD_ADDR_VAR 0 3
42038: PUSH
42039: LD_INT 35
42041: PPUSH
42042: LD_VAR 0 1
42046: PPUSH
42047: CALL_OW 321
42051: PUSH
42052: LD_INT 2
42054: EQUAL
42055: ST_TO_ADDR
42056: GO 42059
42058: POP
// end ;
42059: LD_VAR 0 3
42063: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42064: LD_INT 0
42066: PPUSH
42067: PPUSH
42068: PPUSH
42069: PPUSH
42070: PPUSH
42071: PPUSH
42072: PPUSH
42073: PPUSH
42074: PPUSH
42075: PPUSH
42076: PPUSH
// result := false ;
42077: LD_ADDR_VAR 0 6
42081: PUSH
42082: LD_INT 0
42084: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42085: LD_VAR 0 1
42089: NOT
42090: PUSH
42091: LD_VAR 0 1
42095: PPUSH
42096: CALL_OW 266
42100: PUSH
42101: LD_INT 0
42103: PUSH
42104: LD_INT 1
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: IN
42111: NOT
42112: OR
42113: PUSH
42114: LD_VAR 0 2
42118: NOT
42119: OR
42120: PUSH
42121: LD_VAR 0 5
42125: PUSH
42126: LD_INT 0
42128: PUSH
42129: LD_INT 1
42131: PUSH
42132: LD_INT 2
42134: PUSH
42135: LD_INT 3
42137: PUSH
42138: LD_INT 4
42140: PUSH
42141: LD_INT 5
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: IN
42152: NOT
42153: OR
42154: PUSH
42155: LD_VAR 0 3
42159: PPUSH
42160: LD_VAR 0 4
42164: PPUSH
42165: CALL_OW 488
42169: NOT
42170: OR
42171: IFFALSE 42175
// exit ;
42173: GO 42911
// side := GetSide ( depot ) ;
42175: LD_ADDR_VAR 0 9
42179: PUSH
42180: LD_VAR 0 1
42184: PPUSH
42185: CALL_OW 255
42189: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42190: LD_VAR 0 9
42194: PPUSH
42195: LD_VAR 0 2
42199: PPUSH
42200: CALL 41684 0 2
42204: NOT
42205: IFFALSE 42209
// exit ;
42207: GO 42911
// pom := GetBase ( depot ) ;
42209: LD_ADDR_VAR 0 10
42213: PUSH
42214: LD_VAR 0 1
42218: PPUSH
42219: CALL_OW 274
42223: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42224: LD_ADDR_VAR 0 11
42228: PUSH
42229: LD_VAR 0 2
42233: PPUSH
42234: LD_VAR 0 1
42238: PPUSH
42239: CALL_OW 248
42243: PPUSH
42244: CALL_OW 450
42248: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42249: LD_VAR 0 10
42253: PPUSH
42254: LD_INT 1
42256: PPUSH
42257: CALL_OW 275
42261: PUSH
42262: LD_VAR 0 11
42266: PUSH
42267: LD_INT 1
42269: ARRAY
42270: GREATEREQUAL
42271: PUSH
42272: LD_VAR 0 10
42276: PPUSH
42277: LD_INT 2
42279: PPUSH
42280: CALL_OW 275
42284: PUSH
42285: LD_VAR 0 11
42289: PUSH
42290: LD_INT 2
42292: ARRAY
42293: GREATEREQUAL
42294: AND
42295: PUSH
42296: LD_VAR 0 10
42300: PPUSH
42301: LD_INT 3
42303: PPUSH
42304: CALL_OW 275
42308: PUSH
42309: LD_VAR 0 11
42313: PUSH
42314: LD_INT 3
42316: ARRAY
42317: GREATEREQUAL
42318: AND
42319: NOT
42320: IFFALSE 42324
// exit ;
42322: GO 42911
// if GetBType ( depot ) = b_depot then
42324: LD_VAR 0 1
42328: PPUSH
42329: CALL_OW 266
42333: PUSH
42334: LD_INT 0
42336: EQUAL
42337: IFFALSE 42349
// dist := 28 else
42339: LD_ADDR_VAR 0 14
42343: PUSH
42344: LD_INT 28
42346: ST_TO_ADDR
42347: GO 42357
// dist := 36 ;
42349: LD_ADDR_VAR 0 14
42353: PUSH
42354: LD_INT 36
42356: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42357: LD_VAR 0 1
42361: PPUSH
42362: LD_VAR 0 3
42366: PPUSH
42367: LD_VAR 0 4
42371: PPUSH
42372: CALL_OW 297
42376: PUSH
42377: LD_VAR 0 14
42381: GREATER
42382: IFFALSE 42386
// exit ;
42384: GO 42911
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42386: LD_ADDR_VAR 0 12
42390: PUSH
42391: LD_VAR 0 2
42395: PPUSH
42396: LD_VAR 0 3
42400: PPUSH
42401: LD_VAR 0 4
42405: PPUSH
42406: LD_VAR 0 5
42410: PPUSH
42411: LD_VAR 0 1
42415: PPUSH
42416: CALL_OW 248
42420: PPUSH
42421: LD_INT 0
42423: PPUSH
42424: CALL 42916 0 6
42428: ST_TO_ADDR
// if not hexes then
42429: LD_VAR 0 12
42433: NOT
42434: IFFALSE 42438
// exit ;
42436: GO 42911
// hex := GetHexInfo ( x , y ) ;
42438: LD_ADDR_VAR 0 15
42442: PUSH
42443: LD_VAR 0 3
42447: PPUSH
42448: LD_VAR 0 4
42452: PPUSH
42453: CALL_OW 546
42457: ST_TO_ADDR
// if hex [ 1 ] then
42458: LD_VAR 0 15
42462: PUSH
42463: LD_INT 1
42465: ARRAY
42466: IFFALSE 42470
// exit ;
42468: GO 42911
// height := hex [ 2 ] ;
42470: LD_ADDR_VAR 0 13
42474: PUSH
42475: LD_VAR 0 15
42479: PUSH
42480: LD_INT 2
42482: ARRAY
42483: ST_TO_ADDR
// for i = 1 to hexes do
42484: LD_ADDR_VAR 0 7
42488: PUSH
42489: DOUBLE
42490: LD_INT 1
42492: DEC
42493: ST_TO_ADDR
42494: LD_VAR 0 12
42498: PUSH
42499: FOR_TO
42500: IFFALSE 42830
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42502: LD_VAR 0 12
42506: PUSH
42507: LD_VAR 0 7
42511: ARRAY
42512: PUSH
42513: LD_INT 1
42515: ARRAY
42516: PPUSH
42517: LD_VAR 0 12
42521: PUSH
42522: LD_VAR 0 7
42526: ARRAY
42527: PUSH
42528: LD_INT 2
42530: ARRAY
42531: PPUSH
42532: CALL_OW 488
42536: NOT
42537: PUSH
42538: LD_VAR 0 12
42542: PUSH
42543: LD_VAR 0 7
42547: ARRAY
42548: PUSH
42549: LD_INT 1
42551: ARRAY
42552: PPUSH
42553: LD_VAR 0 12
42557: PUSH
42558: LD_VAR 0 7
42562: ARRAY
42563: PUSH
42564: LD_INT 2
42566: ARRAY
42567: PPUSH
42568: CALL_OW 428
42572: PUSH
42573: LD_INT 0
42575: GREATER
42576: OR
42577: PUSH
42578: LD_VAR 0 12
42582: PUSH
42583: LD_VAR 0 7
42587: ARRAY
42588: PUSH
42589: LD_INT 1
42591: ARRAY
42592: PPUSH
42593: LD_VAR 0 12
42597: PUSH
42598: LD_VAR 0 7
42602: ARRAY
42603: PUSH
42604: LD_INT 2
42606: ARRAY
42607: PPUSH
42608: CALL_OW 351
42612: OR
42613: IFFALSE 42619
// exit ;
42615: POP
42616: POP
42617: GO 42911
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42619: LD_ADDR_VAR 0 8
42623: PUSH
42624: LD_VAR 0 12
42628: PUSH
42629: LD_VAR 0 7
42633: ARRAY
42634: PUSH
42635: LD_INT 1
42637: ARRAY
42638: PPUSH
42639: LD_VAR 0 12
42643: PUSH
42644: LD_VAR 0 7
42648: ARRAY
42649: PUSH
42650: LD_INT 2
42652: ARRAY
42653: PPUSH
42654: CALL_OW 546
42658: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42659: LD_VAR 0 8
42663: PUSH
42664: LD_INT 1
42666: ARRAY
42667: PUSH
42668: LD_VAR 0 8
42672: PUSH
42673: LD_INT 2
42675: ARRAY
42676: PUSH
42677: LD_VAR 0 13
42681: PUSH
42682: LD_INT 2
42684: PLUS
42685: GREATER
42686: OR
42687: PUSH
42688: LD_VAR 0 8
42692: PUSH
42693: LD_INT 2
42695: ARRAY
42696: PUSH
42697: LD_VAR 0 13
42701: PUSH
42702: LD_INT 2
42704: MINUS
42705: LESS
42706: OR
42707: PUSH
42708: LD_VAR 0 8
42712: PUSH
42713: LD_INT 3
42715: ARRAY
42716: PUSH
42717: LD_INT 0
42719: PUSH
42720: LD_INT 8
42722: PUSH
42723: LD_INT 9
42725: PUSH
42726: LD_INT 10
42728: PUSH
42729: LD_INT 11
42731: PUSH
42732: LD_INT 12
42734: PUSH
42735: LD_INT 13
42737: PUSH
42738: LD_INT 16
42740: PUSH
42741: LD_INT 17
42743: PUSH
42744: LD_INT 18
42746: PUSH
42747: LD_INT 19
42749: PUSH
42750: LD_INT 20
42752: PUSH
42753: LD_INT 21
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: IN
42771: NOT
42772: OR
42773: PUSH
42774: LD_VAR 0 8
42778: PUSH
42779: LD_INT 5
42781: ARRAY
42782: NOT
42783: OR
42784: PUSH
42785: LD_VAR 0 8
42789: PUSH
42790: LD_INT 6
42792: ARRAY
42793: PUSH
42794: LD_INT 1
42796: PUSH
42797: LD_INT 2
42799: PUSH
42800: LD_INT 7
42802: PUSH
42803: LD_INT 9
42805: PUSH
42806: LD_INT 10
42808: PUSH
42809: LD_INT 11
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: IN
42820: NOT
42821: OR
42822: IFFALSE 42828
// exit ;
42824: POP
42825: POP
42826: GO 42911
// end ;
42828: GO 42499
42830: POP
42831: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42832: LD_VAR 0 9
42836: PPUSH
42837: LD_VAR 0 3
42841: PPUSH
42842: LD_VAR 0 4
42846: PPUSH
42847: LD_INT 20
42849: PPUSH
42850: CALL 34857 0 4
42854: PUSH
42855: LD_INT 4
42857: ARRAY
42858: IFFALSE 42862
// exit ;
42860: GO 42911
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42862: LD_VAR 0 2
42866: PUSH
42867: LD_INT 29
42869: PUSH
42870: LD_INT 30
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: IN
42877: PUSH
42878: LD_VAR 0 3
42882: PPUSH
42883: LD_VAR 0 4
42887: PPUSH
42888: LD_VAR 0 9
42892: PPUSH
42893: CALL_OW 440
42897: NOT
42898: AND
42899: IFFALSE 42903
// exit ;
42901: GO 42911
// result := true ;
42903: LD_ADDR_VAR 0 6
42907: PUSH
42908: LD_INT 1
42910: ST_TO_ADDR
// end ;
42911: LD_VAR 0 6
42915: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42916: LD_INT 0
42918: PPUSH
42919: PPUSH
42920: PPUSH
42921: PPUSH
42922: PPUSH
42923: PPUSH
42924: PPUSH
42925: PPUSH
42926: PPUSH
42927: PPUSH
42928: PPUSH
42929: PPUSH
42930: PPUSH
42931: PPUSH
42932: PPUSH
42933: PPUSH
42934: PPUSH
42935: PPUSH
42936: PPUSH
42937: PPUSH
42938: PPUSH
42939: PPUSH
42940: PPUSH
42941: PPUSH
42942: PPUSH
42943: PPUSH
42944: PPUSH
42945: PPUSH
42946: PPUSH
42947: PPUSH
42948: PPUSH
42949: PPUSH
42950: PPUSH
42951: PPUSH
42952: PPUSH
42953: PPUSH
42954: PPUSH
42955: PPUSH
42956: PPUSH
42957: PPUSH
42958: PPUSH
42959: PPUSH
42960: PPUSH
42961: PPUSH
42962: PPUSH
42963: PPUSH
42964: PPUSH
42965: PPUSH
42966: PPUSH
42967: PPUSH
42968: PPUSH
42969: PPUSH
42970: PPUSH
42971: PPUSH
42972: PPUSH
42973: PPUSH
42974: PPUSH
42975: PPUSH
// result = [ ] ;
42976: LD_ADDR_VAR 0 7
42980: PUSH
42981: EMPTY
42982: ST_TO_ADDR
// temp_list = [ ] ;
42983: LD_ADDR_VAR 0 9
42987: PUSH
42988: EMPTY
42989: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42990: LD_VAR 0 4
42994: PUSH
42995: LD_INT 0
42997: PUSH
42998: LD_INT 1
43000: PUSH
43001: LD_INT 2
43003: PUSH
43004: LD_INT 3
43006: PUSH
43007: LD_INT 4
43009: PUSH
43010: LD_INT 5
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: IN
43021: NOT
43022: PUSH
43023: LD_VAR 0 1
43027: PUSH
43028: LD_INT 0
43030: PUSH
43031: LD_INT 1
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: IN
43038: PUSH
43039: LD_VAR 0 5
43043: PUSH
43044: LD_INT 1
43046: PUSH
43047: LD_INT 2
43049: PUSH
43050: LD_INT 3
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: LIST
43057: IN
43058: NOT
43059: AND
43060: OR
43061: IFFALSE 43065
// exit ;
43063: GO 61456
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43065: LD_VAR 0 1
43069: PUSH
43070: LD_INT 6
43072: PUSH
43073: LD_INT 7
43075: PUSH
43076: LD_INT 8
43078: PUSH
43079: LD_INT 13
43081: PUSH
43082: LD_INT 12
43084: PUSH
43085: LD_INT 15
43087: PUSH
43088: LD_INT 11
43090: PUSH
43091: LD_INT 14
43093: PUSH
43094: LD_INT 10
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: IN
43108: IFFALSE 43118
// btype = b_lab ;
43110: LD_ADDR_VAR 0 1
43114: PUSH
43115: LD_INT 6
43117: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43118: LD_VAR 0 6
43122: PUSH
43123: LD_INT 0
43125: PUSH
43126: LD_INT 1
43128: PUSH
43129: LD_INT 2
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: LIST
43136: IN
43137: NOT
43138: PUSH
43139: LD_VAR 0 1
43143: PUSH
43144: LD_INT 0
43146: PUSH
43147: LD_INT 1
43149: PUSH
43150: LD_INT 2
43152: PUSH
43153: LD_INT 3
43155: PUSH
43156: LD_INT 6
43158: PUSH
43159: LD_INT 36
43161: PUSH
43162: LD_INT 4
43164: PUSH
43165: LD_INT 5
43167: PUSH
43168: LD_INT 31
43170: PUSH
43171: LD_INT 32
43173: PUSH
43174: LD_INT 33
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: IN
43190: NOT
43191: PUSH
43192: LD_VAR 0 6
43196: PUSH
43197: LD_INT 1
43199: EQUAL
43200: AND
43201: OR
43202: PUSH
43203: LD_VAR 0 1
43207: PUSH
43208: LD_INT 2
43210: PUSH
43211: LD_INT 3
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: IN
43218: NOT
43219: PUSH
43220: LD_VAR 0 6
43224: PUSH
43225: LD_INT 2
43227: EQUAL
43228: AND
43229: OR
43230: IFFALSE 43240
// mode = 0 ;
43232: LD_ADDR_VAR 0 6
43236: PUSH
43237: LD_INT 0
43239: ST_TO_ADDR
// case mode of 0 :
43240: LD_VAR 0 6
43244: PUSH
43245: LD_INT 0
43247: DOUBLE
43248: EQUAL
43249: IFTRUE 43253
43251: GO 54706
43253: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43254: LD_ADDR_VAR 0 11
43258: PUSH
43259: LD_INT 0
43261: PUSH
43262: LD_INT 0
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 0
43271: PUSH
43272: LD_INT 1
43274: NEG
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 1
43282: PUSH
43283: LD_INT 0
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 1
43292: PUSH
43293: LD_INT 1
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 0
43302: PUSH
43303: LD_INT 1
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 1
43312: NEG
43313: PUSH
43314: LD_INT 0
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: LD_INT 1
43323: NEG
43324: PUSH
43325: LD_INT 1
43327: NEG
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 1
43335: NEG
43336: PUSH
43337: LD_INT 2
43339: NEG
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 0
43347: PUSH
43348: LD_INT 2
43350: NEG
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 1
43358: PUSH
43359: LD_INT 1
43361: NEG
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 1
43369: PUSH
43370: LD_INT 2
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 0
43379: PUSH
43380: LD_INT 2
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 1
43389: NEG
43390: PUSH
43391: LD_INT 1
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 1
43400: PUSH
43401: LD_INT 3
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 0
43410: PUSH
43411: LD_INT 3
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 1
43420: NEG
43421: PUSH
43422: LD_INT 2
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43447: LD_ADDR_VAR 0 12
43451: PUSH
43452: LD_INT 0
43454: PUSH
43455: LD_INT 0
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 0
43464: PUSH
43465: LD_INT 1
43467: NEG
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 1
43475: PUSH
43476: LD_INT 0
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 1
43485: PUSH
43486: LD_INT 1
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 0
43495: PUSH
43496: LD_INT 1
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 1
43505: NEG
43506: PUSH
43507: LD_INT 0
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 1
43516: NEG
43517: PUSH
43518: LD_INT 1
43520: NEG
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 1
43528: PUSH
43529: LD_INT 1
43531: NEG
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 2
43539: PUSH
43540: LD_INT 0
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 2
43549: PUSH
43550: LD_INT 1
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 1
43559: NEG
43560: PUSH
43561: LD_INT 1
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 2
43570: NEG
43571: PUSH
43572: LD_INT 0
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 2
43581: NEG
43582: PUSH
43583: LD_INT 1
43585: NEG
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 2
43593: NEG
43594: PUSH
43595: LD_INT 1
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 3
43604: NEG
43605: PUSH
43606: LD_INT 0
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 3
43615: NEG
43616: PUSH
43617: LD_INT 1
43619: NEG
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43643: LD_ADDR_VAR 0 13
43647: PUSH
43648: LD_INT 0
43650: PUSH
43651: LD_INT 0
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 0
43660: PUSH
43661: LD_INT 1
43663: NEG
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 1
43671: PUSH
43672: LD_INT 0
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 1
43681: PUSH
43682: LD_INT 1
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 0
43691: PUSH
43692: LD_INT 1
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 1
43701: NEG
43702: PUSH
43703: LD_INT 0
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 1
43712: NEG
43713: PUSH
43714: LD_INT 1
43716: NEG
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 1
43724: NEG
43725: PUSH
43726: LD_INT 2
43728: NEG
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 2
43736: PUSH
43737: LD_INT 1
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 2
43746: PUSH
43747: LD_INT 2
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 1
43756: PUSH
43757: LD_INT 2
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 2
43766: NEG
43767: PUSH
43768: LD_INT 1
43770: NEG
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 2
43778: NEG
43779: PUSH
43780: LD_INT 2
43782: NEG
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 2
43790: NEG
43791: PUSH
43792: LD_INT 3
43794: NEG
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 3
43802: NEG
43803: PUSH
43804: LD_INT 2
43806: NEG
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 3
43814: NEG
43815: PUSH
43816: LD_INT 3
43818: NEG
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43842: LD_ADDR_VAR 0 14
43846: PUSH
43847: LD_INT 0
43849: PUSH
43850: LD_INT 0
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 0
43859: PUSH
43860: LD_INT 1
43862: NEG
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 1
43870: PUSH
43871: LD_INT 0
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 1
43880: PUSH
43881: LD_INT 1
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 0
43890: PUSH
43891: LD_INT 1
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 1
43900: NEG
43901: PUSH
43902: LD_INT 0
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 1
43911: NEG
43912: PUSH
43913: LD_INT 1
43915: NEG
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: PUSH
43921: LD_INT 1
43923: NEG
43924: PUSH
43925: LD_INT 2
43927: NEG
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 0
43935: PUSH
43936: LD_INT 2
43938: NEG
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 1
43946: PUSH
43947: LD_INT 1
43949: NEG
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 1
43957: PUSH
43958: LD_INT 2
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 0
43967: PUSH
43968: LD_INT 2
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 1
43977: NEG
43978: PUSH
43979: LD_INT 1
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 1
43988: NEG
43989: PUSH
43990: LD_INT 3
43992: NEG
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 0
44000: PUSH
44001: LD_INT 3
44003: NEG
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 1
44011: PUSH
44012: LD_INT 2
44014: NEG
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44038: LD_ADDR_VAR 0 15
44042: PUSH
44043: LD_INT 0
44045: PUSH
44046: LD_INT 0
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 0
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 1
44066: PUSH
44067: LD_INT 0
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 1
44076: PUSH
44077: LD_INT 1
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 0
44086: PUSH
44087: LD_INT 1
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 1
44096: NEG
44097: PUSH
44098: LD_INT 0
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 1
44107: NEG
44108: PUSH
44109: LD_INT 1
44111: NEG
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 1
44119: PUSH
44120: LD_INT 1
44122: NEG
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 2
44130: PUSH
44131: LD_INT 0
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 2
44140: PUSH
44141: LD_INT 1
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 1
44150: NEG
44151: PUSH
44152: LD_INT 1
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 2
44161: NEG
44162: PUSH
44163: LD_INT 0
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 2
44172: NEG
44173: PUSH
44174: LD_INT 1
44176: NEG
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 2
44184: PUSH
44185: LD_INT 1
44187: NEG
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 3
44195: PUSH
44196: LD_INT 0
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 3
44205: PUSH
44206: LD_INT 1
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44231: LD_ADDR_VAR 0 16
44235: PUSH
44236: LD_INT 0
44238: PUSH
44239: LD_INT 0
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 0
44248: PUSH
44249: LD_INT 1
44251: NEG
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 1
44259: PUSH
44260: LD_INT 0
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 1
44269: PUSH
44270: LD_INT 1
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 0
44279: PUSH
44280: LD_INT 1
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 1
44289: NEG
44290: PUSH
44291: LD_INT 0
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 1
44300: NEG
44301: PUSH
44302: LD_INT 1
44304: NEG
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 1
44312: NEG
44313: PUSH
44314: LD_INT 2
44316: NEG
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 2
44324: PUSH
44325: LD_INT 1
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 2
44334: PUSH
44335: LD_INT 2
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 1
44344: PUSH
44345: LD_INT 2
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 2
44354: NEG
44355: PUSH
44356: LD_INT 1
44358: NEG
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 2
44366: NEG
44367: PUSH
44368: LD_INT 2
44370: NEG
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 3
44378: PUSH
44379: LD_INT 2
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 3
44388: PUSH
44389: LD_INT 3
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 2
44398: PUSH
44399: LD_INT 3
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44424: LD_ADDR_VAR 0 17
44428: PUSH
44429: LD_INT 0
44431: PUSH
44432: LD_INT 0
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 0
44441: PUSH
44442: LD_INT 1
44444: NEG
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 1
44452: PUSH
44453: LD_INT 0
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 1
44462: PUSH
44463: LD_INT 1
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 0
44472: PUSH
44473: LD_INT 1
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 1
44482: NEG
44483: PUSH
44484: LD_INT 0
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 1
44493: NEG
44494: PUSH
44495: LD_INT 1
44497: NEG
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 1
44505: NEG
44506: PUSH
44507: LD_INT 2
44509: NEG
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 0
44517: PUSH
44518: LD_INT 2
44520: NEG
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 1
44528: PUSH
44529: LD_INT 1
44531: NEG
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 2
44539: PUSH
44540: LD_INT 0
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 2
44549: PUSH
44550: LD_INT 1
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 2
44559: PUSH
44560: LD_INT 2
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 1
44569: PUSH
44570: LD_INT 2
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 0
44579: PUSH
44580: LD_INT 2
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 1
44589: NEG
44590: PUSH
44591: LD_INT 1
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 2
44600: NEG
44601: PUSH
44602: LD_INT 0
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 2
44611: NEG
44612: PUSH
44613: LD_INT 1
44615: NEG
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 2
44623: NEG
44624: PUSH
44625: LD_INT 2
44627: NEG
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44654: LD_ADDR_VAR 0 18
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: LD_INT 0
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 0
44671: PUSH
44672: LD_INT 1
44674: NEG
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 1
44682: PUSH
44683: LD_INT 0
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 1
44692: PUSH
44693: LD_INT 1
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 0
44702: PUSH
44703: LD_INT 1
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 1
44712: NEG
44713: PUSH
44714: LD_INT 0
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 1
44723: NEG
44724: PUSH
44725: LD_INT 1
44727: NEG
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 1
44735: NEG
44736: PUSH
44737: LD_INT 2
44739: NEG
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 0
44747: PUSH
44748: LD_INT 2
44750: NEG
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 1
44758: PUSH
44759: LD_INT 1
44761: NEG
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 2
44769: PUSH
44770: LD_INT 0
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 2
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 2
44789: PUSH
44790: LD_INT 2
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 1
44799: PUSH
44800: LD_INT 2
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 0
44809: PUSH
44810: LD_INT 2
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 1
44819: NEG
44820: PUSH
44821: LD_INT 1
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 2
44830: NEG
44831: PUSH
44832: LD_INT 0
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 2
44841: NEG
44842: PUSH
44843: LD_INT 1
44845: NEG
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 2
44853: NEG
44854: PUSH
44855: LD_INT 2
44857: NEG
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: LIST
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44884: LD_ADDR_VAR 0 19
44888: PUSH
44889: LD_INT 0
44891: PUSH
44892: LD_INT 0
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: LD_INT 1
44904: NEG
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 1
44912: PUSH
44913: LD_INT 0
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 1
44922: PUSH
44923: LD_INT 1
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 0
44932: PUSH
44933: LD_INT 1
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 1
44942: NEG
44943: PUSH
44944: LD_INT 0
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 1
44953: NEG
44954: PUSH
44955: LD_INT 1
44957: NEG
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 1
44965: NEG
44966: PUSH
44967: LD_INT 2
44969: NEG
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 0
44977: PUSH
44978: LD_INT 2
44980: NEG
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 1
44988: PUSH
44989: LD_INT 1
44991: NEG
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 2
44999: PUSH
45000: LD_INT 0
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 2
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 2
45019: PUSH
45020: LD_INT 2
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 1
45029: PUSH
45030: LD_INT 2
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 0
45039: PUSH
45040: LD_INT 2
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 1
45049: NEG
45050: PUSH
45051: LD_INT 1
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 2
45060: NEG
45061: PUSH
45062: LD_INT 0
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 2
45071: NEG
45072: PUSH
45073: LD_INT 1
45075: NEG
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 2
45083: NEG
45084: PUSH
45085: LD_INT 2
45087: NEG
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45114: LD_ADDR_VAR 0 20
45118: PUSH
45119: LD_INT 0
45121: PUSH
45122: LD_INT 0
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: LD_INT 1
45134: NEG
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 1
45142: PUSH
45143: LD_INT 0
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 1
45152: PUSH
45153: LD_INT 1
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 0
45162: PUSH
45163: LD_INT 1
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 1
45172: NEG
45173: PUSH
45174: LD_INT 0
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 1
45183: NEG
45184: PUSH
45185: LD_INT 1
45187: NEG
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 1
45195: NEG
45196: PUSH
45197: LD_INT 2
45199: NEG
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: LD_INT 2
45210: NEG
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 1
45218: PUSH
45219: LD_INT 1
45221: NEG
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 2
45229: PUSH
45230: LD_INT 0
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 2
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 2
45249: PUSH
45250: LD_INT 2
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 1
45259: PUSH
45260: LD_INT 2
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 0
45269: PUSH
45270: LD_INT 2
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 1
45279: NEG
45280: PUSH
45281: LD_INT 1
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 2
45290: NEG
45291: PUSH
45292: LD_INT 0
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 2
45301: NEG
45302: PUSH
45303: LD_INT 1
45305: NEG
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 2
45313: NEG
45314: PUSH
45315: LD_INT 2
45317: NEG
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45344: LD_ADDR_VAR 0 21
45348: PUSH
45349: LD_INT 0
45351: PUSH
45352: LD_INT 0
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 0
45361: PUSH
45362: LD_INT 1
45364: NEG
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 1
45372: PUSH
45373: LD_INT 0
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 1
45382: PUSH
45383: LD_INT 1
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: LD_INT 1
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 1
45402: NEG
45403: PUSH
45404: LD_INT 0
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 1
45413: NEG
45414: PUSH
45415: LD_INT 1
45417: NEG
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 1
45425: NEG
45426: PUSH
45427: LD_INT 2
45429: NEG
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 0
45437: PUSH
45438: LD_INT 2
45440: NEG
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 1
45448: PUSH
45449: LD_INT 1
45451: NEG
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 2
45459: PUSH
45460: LD_INT 0
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 2
45469: PUSH
45470: LD_INT 1
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 2
45479: PUSH
45480: LD_INT 2
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 1
45489: PUSH
45490: LD_INT 2
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 0
45499: PUSH
45500: LD_INT 2
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 1
45509: NEG
45510: PUSH
45511: LD_INT 1
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 2
45520: NEG
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 2
45531: NEG
45532: PUSH
45533: LD_INT 1
45535: NEG
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 2
45543: NEG
45544: PUSH
45545: LD_INT 2
45547: NEG
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45574: LD_ADDR_VAR 0 22
45578: PUSH
45579: LD_INT 0
45581: PUSH
45582: LD_INT 0
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 0
45591: PUSH
45592: LD_INT 1
45594: NEG
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 1
45602: PUSH
45603: LD_INT 0
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 1
45612: PUSH
45613: LD_INT 1
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 0
45622: PUSH
45623: LD_INT 1
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 1
45632: NEG
45633: PUSH
45634: LD_INT 0
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 1
45643: NEG
45644: PUSH
45645: LD_INT 1
45647: NEG
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 1
45655: NEG
45656: PUSH
45657: LD_INT 2
45659: NEG
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 0
45667: PUSH
45668: LD_INT 2
45670: NEG
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 1
45678: PUSH
45679: LD_INT 1
45681: NEG
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 2
45689: PUSH
45690: LD_INT 0
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 2
45699: PUSH
45700: LD_INT 1
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 2
45709: PUSH
45710: LD_INT 2
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 1
45719: PUSH
45720: LD_INT 2
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 0
45729: PUSH
45730: LD_INT 2
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 1
45739: NEG
45740: PUSH
45741: LD_INT 1
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 2
45750: NEG
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 2
45761: NEG
45762: PUSH
45763: LD_INT 1
45765: NEG
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 2
45773: NEG
45774: PUSH
45775: LD_INT 2
45777: NEG
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45804: LD_ADDR_VAR 0 23
45808: PUSH
45809: LD_INT 0
45811: PUSH
45812: LD_INT 0
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 0
45821: PUSH
45822: LD_INT 1
45824: NEG
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 1
45832: PUSH
45833: LD_INT 0
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 1
45842: PUSH
45843: LD_INT 1
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 0
45852: PUSH
45853: LD_INT 1
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 1
45862: NEG
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 1
45873: NEG
45874: PUSH
45875: LD_INT 1
45877: NEG
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 1
45885: NEG
45886: PUSH
45887: LD_INT 2
45889: NEG
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 0
45897: PUSH
45898: LD_INT 2
45900: NEG
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 1
45908: PUSH
45909: LD_INT 1
45911: NEG
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 2
45919: PUSH
45920: LD_INT 0
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 2
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 2
45939: PUSH
45940: LD_INT 2
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 1
45949: PUSH
45950: LD_INT 2
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 0
45959: PUSH
45960: LD_INT 2
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 1
45969: NEG
45970: PUSH
45971: LD_INT 1
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 2
45980: NEG
45981: PUSH
45982: LD_INT 0
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 2
45991: NEG
45992: PUSH
45993: LD_INT 1
45995: NEG
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 2
46003: NEG
46004: PUSH
46005: LD_INT 2
46007: NEG
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 2
46015: NEG
46016: PUSH
46017: LD_INT 3
46019: NEG
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: LD_INT 3
46031: NEG
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: LD_INT 2
46042: NEG
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 2
46050: PUSH
46051: LD_INT 1
46053: NEG
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46084: LD_ADDR_VAR 0 24
46088: PUSH
46089: LD_INT 0
46091: PUSH
46092: LD_INT 0
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 0
46101: PUSH
46102: LD_INT 1
46104: NEG
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 1
46112: PUSH
46113: LD_INT 0
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: LD_INT 1
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 0
46132: PUSH
46133: LD_INT 1
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 1
46142: NEG
46143: PUSH
46144: LD_INT 0
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 1
46153: NEG
46154: PUSH
46155: LD_INT 1
46157: NEG
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 1
46165: NEG
46166: PUSH
46167: LD_INT 2
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: LD_INT 2
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 1
46188: PUSH
46189: LD_INT 1
46191: NEG
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 2
46199: PUSH
46200: LD_INT 0
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 2
46209: PUSH
46210: LD_INT 1
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 2
46219: PUSH
46220: LD_INT 2
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 1
46229: PUSH
46230: LD_INT 2
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 0
46239: PUSH
46240: LD_INT 2
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 1
46249: NEG
46250: PUSH
46251: LD_INT 1
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 2
46260: NEG
46261: PUSH
46262: LD_INT 0
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 2
46271: NEG
46272: PUSH
46273: LD_INT 1
46275: NEG
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 2
46283: NEG
46284: PUSH
46285: LD_INT 2
46287: NEG
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 1
46295: PUSH
46296: LD_INT 2
46298: NEG
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 2
46306: PUSH
46307: LD_INT 1
46309: NEG
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 3
46317: PUSH
46318: LD_INT 1
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 3
46327: PUSH
46328: LD_INT 2
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46360: LD_ADDR_VAR 0 25
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 0
46377: PUSH
46378: LD_INT 1
46380: NEG
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 1
46388: PUSH
46389: LD_INT 0
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 1
46398: PUSH
46399: LD_INT 1
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 0
46408: PUSH
46409: LD_INT 1
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 1
46418: NEG
46419: PUSH
46420: LD_INT 0
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 1
46429: NEG
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 1
46441: NEG
46442: PUSH
46443: LD_INT 2
46445: NEG
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 0
46453: PUSH
46454: LD_INT 2
46456: NEG
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 1
46464: PUSH
46465: LD_INT 1
46467: NEG
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 2
46475: PUSH
46476: LD_INT 0
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 2
46485: PUSH
46486: LD_INT 1
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 2
46495: PUSH
46496: LD_INT 2
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: LD_INT 2
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 0
46515: PUSH
46516: LD_INT 2
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: LD_INT 1
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 2
46536: NEG
46537: PUSH
46538: LD_INT 0
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 2
46547: NEG
46548: PUSH
46549: LD_INT 1
46551: NEG
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 2
46559: NEG
46560: PUSH
46561: LD_INT 2
46563: NEG
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 3
46571: PUSH
46572: LD_INT 1
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 3
46581: PUSH
46582: LD_INT 2
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 2
46591: PUSH
46592: LD_INT 3
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: LD_INT 3
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46634: LD_ADDR_VAR 0 26
46638: PUSH
46639: LD_INT 0
46641: PUSH
46642: LD_INT 0
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 0
46651: PUSH
46652: LD_INT 1
46654: NEG
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 1
46662: PUSH
46663: LD_INT 0
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 1
46672: PUSH
46673: LD_INT 1
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 0
46682: PUSH
46683: LD_INT 1
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 1
46692: NEG
46693: PUSH
46694: LD_INT 0
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 1
46703: NEG
46704: PUSH
46705: LD_INT 1
46707: NEG
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 1
46715: NEG
46716: PUSH
46717: LD_INT 2
46719: NEG
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 0
46727: PUSH
46728: LD_INT 2
46730: NEG
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: LD_INT 1
46741: NEG
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 2
46749: PUSH
46750: LD_INT 0
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 2
46759: PUSH
46760: LD_INT 1
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 2
46769: PUSH
46770: LD_INT 2
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 1
46779: PUSH
46780: LD_INT 2
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 0
46789: PUSH
46790: LD_INT 2
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 1
46799: NEG
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 2
46810: NEG
46811: PUSH
46812: LD_INT 0
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 2
46821: NEG
46822: PUSH
46823: LD_INT 1
46825: NEG
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 2
46833: NEG
46834: PUSH
46835: LD_INT 2
46837: NEG
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 2
46845: PUSH
46846: LD_INT 3
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 1
46855: PUSH
46856: LD_INT 3
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: LD_INT 2
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 2
46876: NEG
46877: PUSH
46878: LD_INT 1
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46910: LD_ADDR_VAR 0 27
46914: PUSH
46915: LD_INT 0
46917: PUSH
46918: LD_INT 0
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: LD_INT 1
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 1
46938: PUSH
46939: LD_INT 0
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 1
46948: PUSH
46949: LD_INT 1
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: LD_INT 1
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 1
46968: NEG
46969: PUSH
46970: LD_INT 0
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: LD_INT 1
46983: NEG
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 1
46991: NEG
46992: PUSH
46993: LD_INT 2
46995: NEG
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 0
47003: PUSH
47004: LD_INT 2
47006: NEG
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: PUSH
47015: LD_INT 1
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 2
47025: PUSH
47026: LD_INT 0
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 2
47035: PUSH
47036: LD_INT 1
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 2
47045: PUSH
47046: LD_INT 2
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 1
47055: PUSH
47056: LD_INT 2
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 0
47065: PUSH
47066: LD_INT 2
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 1
47075: NEG
47076: PUSH
47077: LD_INT 1
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 2
47086: NEG
47087: PUSH
47088: LD_INT 0
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 2
47097: NEG
47098: PUSH
47099: LD_INT 1
47101: NEG
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 2
47109: NEG
47110: PUSH
47111: LD_INT 2
47113: NEG
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 1
47121: NEG
47122: PUSH
47123: LD_INT 2
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 2
47132: NEG
47133: PUSH
47134: LD_INT 1
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 3
47143: NEG
47144: PUSH
47145: LD_INT 1
47147: NEG
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 3
47155: NEG
47156: PUSH
47157: LD_INT 2
47159: NEG
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47190: LD_ADDR_VAR 0 28
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 0
47207: PUSH
47208: LD_INT 1
47210: NEG
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 1
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 1
47228: PUSH
47229: LD_INT 1
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 0
47238: PUSH
47239: LD_INT 1
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: LD_INT 0
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 1
47259: NEG
47260: PUSH
47261: LD_INT 1
47263: NEG
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 1
47271: NEG
47272: PUSH
47273: LD_INT 2
47275: NEG
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 0
47283: PUSH
47284: LD_INT 2
47286: NEG
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 1
47294: PUSH
47295: LD_INT 1
47297: NEG
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 2
47305: PUSH
47306: LD_INT 0
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 2
47315: PUSH
47316: LD_INT 1
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 2
47325: PUSH
47326: LD_INT 2
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 1
47335: PUSH
47336: LD_INT 2
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: LD_INT 2
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 1
47355: NEG
47356: PUSH
47357: LD_INT 1
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 2
47366: NEG
47367: PUSH
47368: LD_INT 0
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 2
47377: NEG
47378: PUSH
47379: LD_INT 1
47381: NEG
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 2
47389: NEG
47390: PUSH
47391: LD_INT 2
47393: NEG
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 2
47401: NEG
47402: PUSH
47403: LD_INT 3
47405: NEG
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: NEG
47414: PUSH
47415: LD_INT 3
47417: NEG
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 3
47425: NEG
47426: PUSH
47427: LD_INT 1
47429: NEG
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 3
47437: NEG
47438: PUSH
47439: LD_INT 2
47441: NEG
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47472: LD_ADDR_VAR 0 29
47476: PUSH
47477: LD_INT 0
47479: PUSH
47480: LD_INT 0
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 0
47489: PUSH
47490: LD_INT 1
47492: NEG
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 1
47500: PUSH
47501: LD_INT 0
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: PUSH
47511: LD_INT 1
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 0
47520: PUSH
47521: LD_INT 1
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 1
47530: NEG
47531: PUSH
47532: LD_INT 0
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: NEG
47542: PUSH
47543: LD_INT 1
47545: NEG
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 1
47553: NEG
47554: PUSH
47555: LD_INT 2
47557: NEG
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 0
47565: PUSH
47566: LD_INT 2
47568: NEG
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 1
47576: PUSH
47577: LD_INT 1
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 2
47587: PUSH
47588: LD_INT 0
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 2
47597: PUSH
47598: LD_INT 1
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: LD_INT 2
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: LD_INT 2
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 1
47627: NEG
47628: PUSH
47629: LD_INT 1
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 2
47638: NEG
47639: PUSH
47640: LD_INT 1
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 2
47650: NEG
47651: PUSH
47652: LD_INT 2
47654: NEG
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 2
47662: NEG
47663: PUSH
47664: LD_INT 3
47666: NEG
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 2
47674: PUSH
47675: LD_INT 1
47677: NEG
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 3
47685: PUSH
47686: LD_INT 1
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: LD_INT 3
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 1
47705: NEG
47706: PUSH
47707: LD_INT 2
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 3
47716: NEG
47717: PUSH
47718: LD_INT 2
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47751: LD_ADDR_VAR 0 30
47755: PUSH
47756: LD_INT 0
47758: PUSH
47759: LD_INT 0
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 0
47768: PUSH
47769: LD_INT 1
47771: NEG
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: LD_INT 0
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 1
47789: PUSH
47790: LD_INT 1
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 0
47799: PUSH
47800: LD_INT 1
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 1
47809: NEG
47810: PUSH
47811: LD_INT 0
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 1
47820: NEG
47821: PUSH
47822: LD_INT 1
47824: NEG
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 1
47832: NEG
47833: PUSH
47834: LD_INT 2
47836: NEG
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 0
47844: PUSH
47845: LD_INT 2
47847: NEG
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 1
47855: PUSH
47856: LD_INT 1
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 2
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 2
47876: PUSH
47877: LD_INT 1
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 2
47886: PUSH
47887: LD_INT 2
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 1
47896: PUSH
47897: LD_INT 2
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 1
47906: NEG
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 2
47917: NEG
47918: PUSH
47919: LD_INT 0
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 2
47928: NEG
47929: PUSH
47930: LD_INT 1
47932: NEG
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 1
47940: NEG
47941: PUSH
47942: LD_INT 3
47944: NEG
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 1
47952: PUSH
47953: LD_INT 2
47955: NEG
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 3
47963: PUSH
47964: LD_INT 2
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 2
47973: PUSH
47974: LD_INT 3
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 2
47983: NEG
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 3
47994: NEG
47995: PUSH
47996: LD_INT 1
47998: NEG
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48029: LD_ADDR_VAR 0 31
48033: PUSH
48034: LD_INT 0
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 0
48046: PUSH
48047: LD_INT 1
48049: NEG
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 1
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: PUSH
48068: LD_INT 1
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: LD_INT 1
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 1
48087: NEG
48088: PUSH
48089: LD_INT 0
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 1
48098: NEG
48099: PUSH
48100: LD_INT 1
48102: NEG
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 1
48110: NEG
48111: PUSH
48112: LD_INT 2
48114: NEG
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 1
48122: PUSH
48123: LD_INT 1
48125: NEG
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 2
48133: PUSH
48134: LD_INT 0
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 2
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 2
48153: PUSH
48154: LD_INT 2
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: LD_INT 2
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: LD_INT 2
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 1
48183: NEG
48184: PUSH
48185: LD_INT 1
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 2
48194: NEG
48195: PUSH
48196: LD_INT 1
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 2
48206: NEG
48207: PUSH
48208: LD_INT 2
48210: NEG
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 2
48218: NEG
48219: PUSH
48220: LD_INT 3
48222: NEG
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 2
48230: PUSH
48231: LD_INT 1
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 3
48241: PUSH
48242: LD_INT 1
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 1
48251: PUSH
48252: LD_INT 3
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 1
48261: NEG
48262: PUSH
48263: LD_INT 2
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 3
48272: NEG
48273: PUSH
48274: LD_INT 2
48276: NEG
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48307: LD_ADDR_VAR 0 32
48311: PUSH
48312: LD_INT 0
48314: PUSH
48315: LD_INT 0
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 0
48324: PUSH
48325: LD_INT 1
48327: NEG
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 1
48335: PUSH
48336: LD_INT 0
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 1
48345: PUSH
48346: LD_INT 1
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 0
48355: PUSH
48356: LD_INT 1
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 1
48376: NEG
48377: PUSH
48378: LD_INT 1
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 1
48388: NEG
48389: PUSH
48390: LD_INT 2
48392: NEG
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 0
48400: PUSH
48401: LD_INT 2
48403: NEG
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 1
48411: PUSH
48412: LD_INT 1
48414: NEG
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 2
48422: PUSH
48423: LD_INT 1
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 2
48432: PUSH
48433: LD_INT 2
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 1
48442: PUSH
48443: LD_INT 2
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 0
48452: PUSH
48453: LD_INT 2
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 1
48462: NEG
48463: PUSH
48464: LD_INT 1
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 2
48473: NEG
48474: PUSH
48475: LD_INT 0
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 2
48484: NEG
48485: PUSH
48486: LD_INT 1
48488: NEG
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 1
48496: NEG
48497: PUSH
48498: LD_INT 3
48500: NEG
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 1
48508: PUSH
48509: LD_INT 2
48511: NEG
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 3
48519: PUSH
48520: LD_INT 2
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 2
48529: PUSH
48530: LD_INT 3
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 2
48539: NEG
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 3
48550: NEG
48551: PUSH
48552: LD_INT 1
48554: NEG
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48585: LD_ADDR_VAR 0 33
48589: PUSH
48590: LD_INT 0
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 0
48602: PUSH
48603: LD_INT 1
48605: NEG
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 1
48613: PUSH
48614: LD_INT 0
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 1
48623: PUSH
48624: LD_INT 1
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: LD_INT 1
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 1
48643: NEG
48644: PUSH
48645: LD_INT 0
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 1
48654: NEG
48655: PUSH
48656: LD_INT 1
48658: NEG
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 1
48666: NEG
48667: PUSH
48668: LD_INT 2
48670: NEG
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 1
48678: PUSH
48679: LD_INT 1
48681: NEG
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 2
48689: PUSH
48690: LD_INT 0
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 2
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: PUSH
48710: LD_INT 2
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 0
48719: PUSH
48720: LD_INT 2
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 1
48729: NEG
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 2
48740: NEG
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 2
48751: NEG
48752: PUSH
48753: LD_INT 1
48755: NEG
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 2
48763: NEG
48764: PUSH
48765: LD_INT 2
48767: NEG
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 2
48775: NEG
48776: PUSH
48777: LD_INT 3
48779: NEG
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 2
48787: PUSH
48788: LD_INT 1
48790: NEG
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 3
48798: PUSH
48799: LD_INT 1
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 1
48808: PUSH
48809: LD_INT 3
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 1
48818: NEG
48819: PUSH
48820: LD_INT 2
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 3
48829: NEG
48830: PUSH
48831: LD_INT 2
48833: NEG
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48864: LD_ADDR_VAR 0 34
48868: PUSH
48869: LD_INT 0
48871: PUSH
48872: LD_INT 0
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 0
48881: PUSH
48882: LD_INT 1
48884: NEG
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 1
48892: PUSH
48893: LD_INT 0
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 1
48902: PUSH
48903: LD_INT 1
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 0
48912: PUSH
48913: LD_INT 1
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 1
48922: NEG
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 1
48933: NEG
48934: PUSH
48935: LD_INT 1
48937: NEG
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 1
48945: NEG
48946: PUSH
48947: LD_INT 2
48949: NEG
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 0
48957: PUSH
48958: LD_INT 2
48960: NEG
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 1
48968: PUSH
48969: LD_INT 1
48971: NEG
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 2
48979: PUSH
48980: LD_INT 1
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 2
48989: PUSH
48990: LD_INT 2
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 1
48999: PUSH
49000: LD_INT 2
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 1
49009: NEG
49010: PUSH
49011: LD_INT 1
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 2
49020: NEG
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 2
49031: NEG
49032: PUSH
49033: LD_INT 1
49035: NEG
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 2
49043: NEG
49044: PUSH
49045: LD_INT 2
49047: NEG
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 1
49055: NEG
49056: PUSH
49057: LD_INT 3
49059: NEG
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 1
49067: PUSH
49068: LD_INT 2
49070: NEG
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 3
49078: PUSH
49079: LD_INT 2
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 2
49088: PUSH
49089: LD_INT 3
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 2
49098: NEG
49099: PUSH
49100: LD_INT 1
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 3
49109: NEG
49110: PUSH
49111: LD_INT 1
49113: NEG
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49144: LD_ADDR_VAR 0 35
49148: PUSH
49149: LD_INT 0
49151: PUSH
49152: LD_INT 0
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 0
49161: PUSH
49162: LD_INT 1
49164: NEG
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 1
49172: PUSH
49173: LD_INT 0
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 1
49182: PUSH
49183: LD_INT 1
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: LD_INT 1
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 1
49202: NEG
49203: PUSH
49204: LD_INT 0
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 1
49213: NEG
49214: PUSH
49215: LD_INT 1
49217: NEG
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 2
49225: PUSH
49226: LD_INT 1
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 2
49235: NEG
49236: PUSH
49237: LD_INT 1
49239: NEG
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49256: LD_ADDR_VAR 0 36
49260: PUSH
49261: LD_INT 0
49263: PUSH
49264: LD_INT 0
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 0
49273: PUSH
49274: LD_INT 1
49276: NEG
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 1
49284: PUSH
49285: LD_INT 0
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 1
49294: PUSH
49295: LD_INT 1
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 0
49304: PUSH
49305: LD_INT 1
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 1
49314: NEG
49315: PUSH
49316: LD_INT 0
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 1
49325: NEG
49326: PUSH
49327: LD_INT 1
49329: NEG
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: LD_INT 2
49341: NEG
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 1
49349: PUSH
49350: LD_INT 2
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49368: LD_ADDR_VAR 0 37
49372: PUSH
49373: LD_INT 0
49375: PUSH
49376: LD_INT 0
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: LD_INT 1
49388: NEG
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 1
49396: PUSH
49397: LD_INT 0
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 1
49406: PUSH
49407: LD_INT 1
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 0
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 1
49426: NEG
49427: PUSH
49428: LD_INT 0
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 1
49437: NEG
49438: PUSH
49439: LD_INT 1
49441: NEG
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 1
49449: PUSH
49450: LD_INT 1
49452: NEG
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 1
49460: NEG
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49480: LD_ADDR_VAR 0 38
49484: PUSH
49485: LD_INT 0
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 0
49497: PUSH
49498: LD_INT 1
49500: NEG
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 1
49508: PUSH
49509: LD_INT 0
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 1
49518: PUSH
49519: LD_INT 1
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 0
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 1
49538: NEG
49539: PUSH
49540: LD_INT 0
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 1
49549: NEG
49550: PUSH
49551: LD_INT 1
49553: NEG
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 2
49561: PUSH
49562: LD_INT 1
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 2
49571: NEG
49572: PUSH
49573: LD_INT 1
49575: NEG
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49592: LD_ADDR_VAR 0 39
49596: PUSH
49597: LD_INT 0
49599: PUSH
49600: LD_INT 0
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 0
49609: PUSH
49610: LD_INT 1
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 1
49620: PUSH
49621: LD_INT 0
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 1
49630: PUSH
49631: LD_INT 1
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 0
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 1
49650: NEG
49651: PUSH
49652: LD_INT 0
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 1
49661: NEG
49662: PUSH
49663: LD_INT 1
49665: NEG
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 1
49673: NEG
49674: PUSH
49675: LD_INT 2
49677: NEG
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 1
49685: PUSH
49686: LD_INT 2
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49704: LD_ADDR_VAR 0 40
49708: PUSH
49709: LD_INT 0
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 0
49721: PUSH
49722: LD_INT 1
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 1
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 1
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 0
49752: PUSH
49753: LD_INT 1
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 1
49762: NEG
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 1
49773: NEG
49774: PUSH
49775: LD_INT 1
49777: NEG
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 1
49785: PUSH
49786: LD_INT 1
49788: NEG
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 1
49796: NEG
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49816: LD_ADDR_VAR 0 41
49820: PUSH
49821: LD_INT 0
49823: PUSH
49824: LD_INT 0
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 0
49833: PUSH
49834: LD_INT 1
49836: NEG
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 1
49844: PUSH
49845: LD_INT 0
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 1
49854: PUSH
49855: LD_INT 1
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: LD_INT 1
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 1
49874: NEG
49875: PUSH
49876: LD_INT 0
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 1
49885: NEG
49886: PUSH
49887: LD_INT 1
49889: NEG
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 1
49897: NEG
49898: PUSH
49899: LD_INT 2
49901: NEG
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 1
49909: PUSH
49910: LD_INT 1
49912: NEG
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 2
49920: PUSH
49921: LD_INT 0
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 2
49930: PUSH
49931: LD_INT 1
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 2
49940: PUSH
49941: LD_INT 2
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 1
49950: PUSH
49951: LD_INT 2
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 1
49960: NEG
49961: PUSH
49962: LD_INT 1
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 2
49971: NEG
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 2
49982: NEG
49983: PUSH
49984: LD_INT 1
49986: NEG
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 2
49994: NEG
49995: PUSH
49996: LD_INT 2
49998: NEG
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 2
50006: NEG
50007: PUSH
50008: LD_INT 3
50010: NEG
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 2
50018: PUSH
50019: LD_INT 1
50021: NEG
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 3
50029: PUSH
50030: LD_INT 0
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 3
50039: PUSH
50040: LD_INT 1
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 3
50049: PUSH
50050: LD_INT 2
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 3
50059: PUSH
50060: LD_INT 3
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 2
50069: PUSH
50070: LD_INT 3
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 2
50079: NEG
50080: PUSH
50081: LD_INT 1
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 3
50090: NEG
50091: PUSH
50092: LD_INT 0
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 3
50101: NEG
50102: PUSH
50103: LD_INT 1
50105: NEG
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 3
50113: NEG
50114: PUSH
50115: LD_INT 2
50117: NEG
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 3
50125: NEG
50126: PUSH
50127: LD_INT 3
50129: NEG
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50166: LD_ADDR_VAR 0 42
50170: PUSH
50171: LD_INT 0
50173: PUSH
50174: LD_INT 0
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 0
50183: PUSH
50184: LD_INT 1
50186: NEG
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 1
50194: PUSH
50195: LD_INT 0
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 1
50204: PUSH
50205: LD_INT 1
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 0
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 1
50224: NEG
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 1
50235: NEG
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 1
50247: NEG
50248: PUSH
50249: LD_INT 2
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: LD_INT 2
50262: NEG
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 1
50270: PUSH
50271: LD_INT 1
50273: NEG
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 2
50281: PUSH
50282: LD_INT 1
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 2
50291: PUSH
50292: LD_INT 2
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 1
50301: PUSH
50302: LD_INT 2
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 0
50311: PUSH
50312: LD_INT 2
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 1
50321: NEG
50322: PUSH
50323: LD_INT 1
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 2
50332: NEG
50333: PUSH
50334: LD_INT 1
50336: NEG
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 2
50344: NEG
50345: PUSH
50346: LD_INT 2
50348: NEG
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 2
50356: NEG
50357: PUSH
50358: LD_INT 3
50360: NEG
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 1
50368: NEG
50369: PUSH
50370: LD_INT 3
50372: NEG
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 0
50380: PUSH
50381: LD_INT 3
50383: NEG
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 1
50391: PUSH
50392: LD_INT 2
50394: NEG
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 3
50402: PUSH
50403: LD_INT 2
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 3
50412: PUSH
50413: LD_INT 3
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 2
50422: PUSH
50423: LD_INT 3
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 1
50432: PUSH
50433: LD_INT 3
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 0
50442: PUSH
50443: LD_INT 3
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 1
50452: NEG
50453: PUSH
50454: LD_INT 2
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 3
50463: NEG
50464: PUSH
50465: LD_INT 2
50467: NEG
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 3
50475: NEG
50476: PUSH
50477: LD_INT 3
50479: NEG
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50516: LD_ADDR_VAR 0 43
50520: PUSH
50521: LD_INT 0
50523: PUSH
50524: LD_INT 0
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: LD_INT 1
50536: NEG
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 1
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 1
50554: PUSH
50555: LD_INT 1
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 0
50564: PUSH
50565: LD_INT 1
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 1
50574: NEG
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 1
50585: NEG
50586: PUSH
50587: LD_INT 1
50589: NEG
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 1
50597: NEG
50598: PUSH
50599: LD_INT 2
50601: NEG
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: LD_INT 2
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 1
50620: PUSH
50621: LD_INT 1
50623: NEG
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 2
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 2
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 1
50651: PUSH
50652: LD_INT 2
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 0
50661: PUSH
50662: LD_INT 2
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 1
50671: NEG
50672: PUSH
50673: LD_INT 1
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 2
50682: NEG
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 2
50693: NEG
50694: PUSH
50695: LD_INT 1
50697: NEG
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 1
50705: NEG
50706: PUSH
50707: LD_INT 3
50709: NEG
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 0
50717: PUSH
50718: LD_INT 3
50720: NEG
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: LD_INT 2
50731: NEG
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 2
50739: PUSH
50740: LD_INT 1
50742: NEG
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 3
50750: PUSH
50751: LD_INT 0
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 3
50760: PUSH
50761: LD_INT 1
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 1
50770: PUSH
50771: LD_INT 3
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 0
50780: PUSH
50781: LD_INT 3
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 1
50790: NEG
50791: PUSH
50792: LD_INT 2
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 2
50801: NEG
50802: PUSH
50803: LD_INT 1
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 3
50812: NEG
50813: PUSH
50814: LD_INT 0
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 3
50823: NEG
50824: PUSH
50825: LD_INT 1
50827: NEG
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50864: LD_ADDR_VAR 0 44
50868: PUSH
50869: LD_INT 0
50871: PUSH
50872: LD_INT 0
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 0
50881: PUSH
50882: LD_INT 1
50884: NEG
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 1
50892: PUSH
50893: LD_INT 0
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 1
50902: PUSH
50903: LD_INT 1
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 0
50912: PUSH
50913: LD_INT 1
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 1
50922: NEG
50923: PUSH
50924: LD_INT 0
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 1
50933: NEG
50934: PUSH
50935: LD_INT 1
50937: NEG
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 1
50945: NEG
50946: PUSH
50947: LD_INT 2
50949: NEG
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 1
50957: PUSH
50958: LD_INT 1
50960: NEG
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 2
50968: PUSH
50969: LD_INT 0
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 2
50978: PUSH
50979: LD_INT 1
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 2
50988: PUSH
50989: LD_INT 2
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 1
50998: PUSH
50999: LD_INT 2
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 1
51008: NEG
51009: PUSH
51010: LD_INT 1
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 2
51019: NEG
51020: PUSH
51021: LD_INT 0
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 2
51030: NEG
51031: PUSH
51032: LD_INT 1
51034: NEG
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 2
51042: NEG
51043: PUSH
51044: LD_INT 2
51046: NEG
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 2
51054: NEG
51055: PUSH
51056: LD_INT 3
51058: NEG
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 2
51066: PUSH
51067: LD_INT 1
51069: NEG
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 3
51077: PUSH
51078: LD_INT 0
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 3
51087: PUSH
51088: LD_INT 1
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 3
51097: PUSH
51098: LD_INT 2
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 3
51107: PUSH
51108: LD_INT 3
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 2
51117: PUSH
51118: LD_INT 3
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 2
51127: NEG
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 3
51138: NEG
51139: PUSH
51140: LD_INT 0
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 3
51149: NEG
51150: PUSH
51151: LD_INT 1
51153: NEG
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 3
51161: NEG
51162: PUSH
51163: LD_INT 2
51165: NEG
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 3
51173: NEG
51174: PUSH
51175: LD_INT 3
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51214: LD_ADDR_VAR 0 45
51218: PUSH
51219: LD_INT 0
51221: PUSH
51222: LD_INT 0
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: LD_INT 1
51234: NEG
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 1
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 1
51252: PUSH
51253: LD_INT 1
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 0
51262: PUSH
51263: LD_INT 1
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: LD_INT 0
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 1
51283: NEG
51284: PUSH
51285: LD_INT 1
51287: NEG
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 1
51295: NEG
51296: PUSH
51297: LD_INT 2
51299: NEG
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 0
51307: PUSH
51308: LD_INT 2
51310: NEG
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 1
51318: PUSH
51319: LD_INT 1
51321: NEG
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 2
51329: PUSH
51330: LD_INT 1
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 2
51339: PUSH
51340: LD_INT 2
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 1
51349: PUSH
51350: LD_INT 2
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 0
51359: PUSH
51360: LD_INT 2
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 1
51369: NEG
51370: PUSH
51371: LD_INT 1
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 2
51380: NEG
51381: PUSH
51382: LD_INT 1
51384: NEG
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 2
51392: NEG
51393: PUSH
51394: LD_INT 2
51396: NEG
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 2
51404: NEG
51405: PUSH
51406: LD_INT 3
51408: NEG
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 1
51416: NEG
51417: PUSH
51418: LD_INT 3
51420: NEG
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 0
51428: PUSH
51429: LD_INT 3
51431: NEG
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 1
51439: PUSH
51440: LD_INT 2
51442: NEG
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 3
51450: PUSH
51451: LD_INT 2
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 3
51460: PUSH
51461: LD_INT 3
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 2
51470: PUSH
51471: LD_INT 3
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 1
51480: PUSH
51481: LD_INT 3
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: LD_INT 3
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 1
51500: NEG
51501: PUSH
51502: LD_INT 2
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 3
51511: NEG
51512: PUSH
51513: LD_INT 2
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 3
51523: NEG
51524: PUSH
51525: LD_INT 3
51527: NEG
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51564: LD_ADDR_VAR 0 46
51568: PUSH
51569: LD_INT 0
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 1
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: PUSH
51603: LD_INT 1
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: LD_INT 1
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: LD_INT 0
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 1
51633: NEG
51634: PUSH
51635: LD_INT 1
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 1
51645: NEG
51646: PUSH
51647: LD_INT 2
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 0
51657: PUSH
51658: LD_INT 2
51660: NEG
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 1
51668: PUSH
51669: LD_INT 1
51671: NEG
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 2
51679: PUSH
51680: LD_INT 0
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 2
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 1
51699: PUSH
51700: LD_INT 2
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 0
51709: PUSH
51710: LD_INT 2
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 1
51719: NEG
51720: PUSH
51721: LD_INT 1
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 2
51730: NEG
51731: PUSH
51732: LD_INT 0
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 2
51741: NEG
51742: PUSH
51743: LD_INT 1
51745: NEG
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 1
51753: NEG
51754: PUSH
51755: LD_INT 3
51757: NEG
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: LD_INT 3
51768: NEG
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 1
51776: PUSH
51777: LD_INT 2
51779: NEG
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 2
51787: PUSH
51788: LD_INT 1
51790: NEG
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 3
51798: PUSH
51799: LD_INT 0
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 3
51808: PUSH
51809: LD_INT 1
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 1
51818: PUSH
51819: LD_INT 3
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 0
51828: PUSH
51829: LD_INT 3
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 1
51838: NEG
51839: PUSH
51840: LD_INT 2
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 2
51849: NEG
51850: PUSH
51851: LD_INT 1
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 3
51860: NEG
51861: PUSH
51862: LD_INT 0
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 3
51871: NEG
51872: PUSH
51873: LD_INT 1
51875: NEG
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51912: LD_ADDR_VAR 0 47
51916: PUSH
51917: LD_INT 0
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: LD_INT 1
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 1
51940: PUSH
51941: LD_INT 0
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 1
51950: PUSH
51951: LD_INT 1
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 0
51960: PUSH
51961: LD_INT 1
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 1
51970: NEG
51971: PUSH
51972: LD_INT 0
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 1
51981: NEG
51982: PUSH
51983: LD_INT 1
51985: NEG
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 1
51993: NEG
51994: PUSH
51995: LD_INT 2
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 0
52005: PUSH
52006: LD_INT 2
52008: NEG
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 1
52016: PUSH
52017: LD_INT 1
52019: NEG
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 2
52027: NEG
52028: PUSH
52029: LD_INT 1
52031: NEG
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 2
52039: NEG
52040: PUSH
52041: LD_INT 2
52043: NEG
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52063: LD_ADDR_VAR 0 48
52067: PUSH
52068: LD_INT 0
52070: PUSH
52071: LD_INT 0
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 0
52080: PUSH
52081: LD_INT 1
52083: NEG
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 1
52091: PUSH
52092: LD_INT 0
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: LD_INT 1
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: LD_INT 1
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 1
52121: NEG
52122: PUSH
52123: LD_INT 0
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 1
52132: NEG
52133: PUSH
52134: LD_INT 1
52136: NEG
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 1
52144: NEG
52145: PUSH
52146: LD_INT 2
52148: NEG
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 0
52156: PUSH
52157: LD_INT 2
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 1
52167: PUSH
52168: LD_INT 1
52170: NEG
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 2
52178: PUSH
52179: LD_INT 0
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 2
52188: PUSH
52189: LD_INT 1
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52210: LD_ADDR_VAR 0 49
52214: PUSH
52215: LD_INT 0
52217: PUSH
52218: LD_INT 0
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 0
52227: PUSH
52228: LD_INT 1
52230: NEG
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 1
52238: PUSH
52239: LD_INT 0
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 1
52248: PUSH
52249: LD_INT 1
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 0
52258: PUSH
52259: LD_INT 1
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 1
52268: NEG
52269: PUSH
52270: LD_INT 0
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 1
52279: NEG
52280: PUSH
52281: LD_INT 1
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 1
52291: PUSH
52292: LD_INT 1
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 2
52302: PUSH
52303: LD_INT 0
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 2
52312: PUSH
52313: LD_INT 1
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 2
52322: PUSH
52323: LD_INT 2
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 1
52332: PUSH
52333: LD_INT 2
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52354: LD_ADDR_VAR 0 50
52358: PUSH
52359: LD_INT 0
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: LD_INT 1
52374: NEG
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 1
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 1
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 0
52402: PUSH
52403: LD_INT 1
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 1
52412: NEG
52413: PUSH
52414: LD_INT 0
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: LD_INT 1
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 2
52435: PUSH
52436: LD_INT 1
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 2
52445: PUSH
52446: LD_INT 2
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 1
52455: PUSH
52456: LD_INT 2
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 0
52465: PUSH
52466: LD_INT 2
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 1
52475: NEG
52476: PUSH
52477: LD_INT 1
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52498: LD_ADDR_VAR 0 51
52502: PUSH
52503: LD_INT 0
52505: PUSH
52506: LD_INT 0
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: LD_INT 1
52518: NEG
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 1
52526: PUSH
52527: LD_INT 0
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 1
52536: PUSH
52537: LD_INT 1
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 0
52546: PUSH
52547: LD_INT 1
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 1
52556: NEG
52557: PUSH
52558: LD_INT 0
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 1
52567: NEG
52568: PUSH
52569: LD_INT 1
52571: NEG
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 1
52579: PUSH
52580: LD_INT 2
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: LD_INT 2
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 1
52599: NEG
52600: PUSH
52601: LD_INT 1
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 2
52610: NEG
52611: PUSH
52612: LD_INT 0
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 2
52621: NEG
52622: PUSH
52623: LD_INT 1
52625: NEG
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52645: LD_ADDR_VAR 0 52
52649: PUSH
52650: LD_INT 0
52652: PUSH
52653: LD_INT 0
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 0
52662: PUSH
52663: LD_INT 1
52665: NEG
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 1
52673: PUSH
52674: LD_INT 0
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 1
52683: PUSH
52684: LD_INT 1
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: LD_INT 1
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 1
52714: NEG
52715: PUSH
52716: LD_INT 1
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 1
52726: NEG
52727: PUSH
52728: LD_INT 2
52730: NEG
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 1
52738: NEG
52739: PUSH
52740: LD_INT 1
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 2
52749: NEG
52750: PUSH
52751: LD_INT 0
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 2
52760: NEG
52761: PUSH
52762: LD_INT 1
52764: NEG
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 2
52772: NEG
52773: PUSH
52774: LD_INT 2
52776: NEG
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52796: LD_ADDR_VAR 0 53
52800: PUSH
52801: LD_INT 0
52803: PUSH
52804: LD_INT 0
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 0
52813: PUSH
52814: LD_INT 1
52816: NEG
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 1
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 1
52834: PUSH
52835: LD_INT 1
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 0
52844: PUSH
52845: LD_INT 1
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 1
52854: NEG
52855: PUSH
52856: LD_INT 0
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 1
52865: NEG
52866: PUSH
52867: LD_INT 1
52869: NEG
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 1
52877: NEG
52878: PUSH
52879: LD_INT 2
52881: NEG
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: LD_INT 2
52892: NEG
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 1
52900: PUSH
52901: LD_INT 1
52903: NEG
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 2
52911: PUSH
52912: LD_INT 0
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 2
52921: PUSH
52922: LD_INT 1
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 2
52931: PUSH
52932: LD_INT 2
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 1
52941: PUSH
52942: LD_INT 2
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 0
52951: PUSH
52952: LD_INT 2
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 1
52961: NEG
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 2
52972: NEG
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 2
52983: NEG
52984: PUSH
52985: LD_INT 1
52987: NEG
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 2
52995: NEG
52996: PUSH
52997: LD_INT 2
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53026: LD_ADDR_VAR 0 54
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 0
53043: PUSH
53044: LD_INT 1
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: LD_INT 0
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 1
53064: PUSH
53065: LD_INT 1
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 0
53074: PUSH
53075: LD_INT 1
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 1
53084: NEG
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 1
53095: NEG
53096: PUSH
53097: LD_INT 1
53099: NEG
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 1
53107: NEG
53108: PUSH
53109: LD_INT 2
53111: NEG
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 0
53119: PUSH
53120: LD_INT 2
53122: NEG
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: LD_INT 1
53133: NEG
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 2
53141: PUSH
53142: LD_INT 0
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 2
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 2
53161: PUSH
53162: LD_INT 2
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 1
53171: PUSH
53172: LD_INT 2
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 0
53181: PUSH
53182: LD_INT 2
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 1
53191: NEG
53192: PUSH
53193: LD_INT 1
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 2
53202: NEG
53203: PUSH
53204: LD_INT 0
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 2
53213: NEG
53214: PUSH
53215: LD_INT 1
53217: NEG
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 2
53225: NEG
53226: PUSH
53227: LD_INT 2
53229: NEG
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53256: LD_ADDR_VAR 0 55
53260: PUSH
53261: LD_INT 0
53263: PUSH
53264: LD_INT 0
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 0
53273: PUSH
53274: LD_INT 1
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 1
53284: PUSH
53285: LD_INT 0
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 1
53294: PUSH
53295: LD_INT 1
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: LD_INT 1
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 1
53314: NEG
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 1
53325: NEG
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 1
53337: NEG
53338: PUSH
53339: LD_INT 2
53341: NEG
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 0
53349: PUSH
53350: LD_INT 2
53352: NEG
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 1
53360: PUSH
53361: LD_INT 1
53363: NEG
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 2
53371: PUSH
53372: LD_INT 0
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 2
53381: PUSH
53382: LD_INT 1
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 2
53391: PUSH
53392: LD_INT 2
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 1
53401: PUSH
53402: LD_INT 2
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 0
53411: PUSH
53412: LD_INT 2
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 1
53421: NEG
53422: PUSH
53423: LD_INT 1
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 2
53432: NEG
53433: PUSH
53434: LD_INT 0
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 2
53443: NEG
53444: PUSH
53445: LD_INT 1
53447: NEG
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 2
53455: NEG
53456: PUSH
53457: LD_INT 2
53459: NEG
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53486: LD_ADDR_VAR 0 56
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: LD_INT 0
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 0
53503: PUSH
53504: LD_INT 1
53506: NEG
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 1
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 1
53524: PUSH
53525: LD_INT 1
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 0
53534: PUSH
53535: LD_INT 1
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 1
53544: NEG
53545: PUSH
53546: LD_INT 0
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 1
53555: NEG
53556: PUSH
53557: LD_INT 1
53559: NEG
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 1
53567: NEG
53568: PUSH
53569: LD_INT 2
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: LD_INT 2
53582: NEG
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 1
53590: PUSH
53591: LD_INT 1
53593: NEG
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 2
53601: PUSH
53602: LD_INT 0
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 2
53611: PUSH
53612: LD_INT 1
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 2
53621: PUSH
53622: LD_INT 2
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: PUSH
53632: LD_INT 2
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 0
53641: PUSH
53642: LD_INT 2
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 1
53651: NEG
53652: PUSH
53653: LD_INT 1
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 2
53662: NEG
53663: PUSH
53664: LD_INT 0
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 2
53673: NEG
53674: PUSH
53675: LD_INT 1
53677: NEG
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 2
53685: NEG
53686: PUSH
53687: LD_INT 2
53689: NEG
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53716: LD_ADDR_VAR 0 57
53720: PUSH
53721: LD_INT 0
53723: PUSH
53724: LD_INT 0
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 0
53733: PUSH
53734: LD_INT 1
53736: NEG
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 1
53744: PUSH
53745: LD_INT 0
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 1
53754: PUSH
53755: LD_INT 1
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 0
53764: PUSH
53765: LD_INT 1
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 1
53774: NEG
53775: PUSH
53776: LD_INT 0
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 1
53785: NEG
53786: PUSH
53787: LD_INT 1
53789: NEG
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 1
53797: NEG
53798: PUSH
53799: LD_INT 2
53801: NEG
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 0
53809: PUSH
53810: LD_INT 2
53812: NEG
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 1
53820: PUSH
53821: LD_INT 1
53823: NEG
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 2
53831: PUSH
53832: LD_INT 0
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 2
53841: PUSH
53842: LD_INT 1
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 2
53851: PUSH
53852: LD_INT 2
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: LD_INT 2
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: LD_INT 2
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 1
53881: NEG
53882: PUSH
53883: LD_INT 1
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 2
53892: NEG
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 2
53903: NEG
53904: PUSH
53905: LD_INT 1
53907: NEG
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 2
53915: NEG
53916: PUSH
53917: LD_INT 2
53919: NEG
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53946: LD_ADDR_VAR 0 58
53950: PUSH
53951: LD_INT 0
53953: PUSH
53954: LD_INT 0
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 0
53963: PUSH
53964: LD_INT 1
53966: NEG
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 1
53974: PUSH
53975: LD_INT 0
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 1
53984: PUSH
53985: LD_INT 1
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 0
53994: PUSH
53995: LD_INT 1
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 1
54004: NEG
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: NEG
54016: PUSH
54017: LD_INT 1
54019: NEG
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: LD_INT 2
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: LD_INT 2
54042: NEG
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 1
54050: PUSH
54051: LD_INT 1
54053: NEG
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 2
54061: PUSH
54062: LD_INT 0
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 2
54071: PUSH
54072: LD_INT 1
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 2
54081: PUSH
54082: LD_INT 2
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 1
54091: PUSH
54092: LD_INT 2
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 0
54101: PUSH
54102: LD_INT 2
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 1
54111: NEG
54112: PUSH
54113: LD_INT 1
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 2
54122: NEG
54123: PUSH
54124: LD_INT 0
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 2
54133: NEG
54134: PUSH
54135: LD_INT 1
54137: NEG
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 2
54145: NEG
54146: PUSH
54147: LD_INT 2
54149: NEG
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54176: LD_ADDR_VAR 0 59
54180: PUSH
54181: LD_INT 0
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: LD_INT 1
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 1
54204: PUSH
54205: LD_INT 0
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 1
54214: PUSH
54215: LD_INT 1
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 0
54224: PUSH
54225: LD_INT 1
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 1
54234: NEG
54235: PUSH
54236: LD_INT 0
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 1
54245: NEG
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54264: LD_ADDR_VAR 0 60
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: LD_INT 0
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: LD_INT 1
54284: NEG
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 1
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 1
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: LD_INT 1
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: LD_INT 1
54322: NEG
54323: PUSH
54324: LD_INT 0
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 1
54333: NEG
54334: PUSH
54335: LD_INT 1
54337: NEG
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54352: LD_ADDR_VAR 0 61
54356: PUSH
54357: LD_INT 0
54359: PUSH
54360: LD_INT 0
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 0
54369: PUSH
54370: LD_INT 1
54372: NEG
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 1
54380: PUSH
54381: LD_INT 0
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 1
54390: PUSH
54391: LD_INT 1
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 0
54400: PUSH
54401: LD_INT 1
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 1
54410: NEG
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 1
54421: NEG
54422: PUSH
54423: LD_INT 1
54425: NEG
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54440: LD_ADDR_VAR 0 62
54444: PUSH
54445: LD_INT 0
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 0
54457: PUSH
54458: LD_INT 1
54460: NEG
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 1
54468: PUSH
54469: LD_INT 0
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 1
54478: PUSH
54479: LD_INT 1
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 0
54488: PUSH
54489: LD_INT 1
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 1
54498: NEG
54499: PUSH
54500: LD_INT 0
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 1
54509: NEG
54510: PUSH
54511: LD_INT 1
54513: NEG
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54528: LD_ADDR_VAR 0 63
54532: PUSH
54533: LD_INT 0
54535: PUSH
54536: LD_INT 0
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 0
54545: PUSH
54546: LD_INT 1
54548: NEG
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: LD_INT 0
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 1
54566: PUSH
54567: LD_INT 1
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 0
54576: PUSH
54577: LD_INT 1
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 1
54586: NEG
54587: PUSH
54588: LD_INT 0
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 1
54597: NEG
54598: PUSH
54599: LD_INT 1
54601: NEG
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54616: LD_ADDR_VAR 0 64
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: LD_INT 0
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 0
54633: PUSH
54634: LD_INT 1
54636: NEG
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 1
54644: PUSH
54645: LD_INT 0
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 1
54654: PUSH
54655: LD_INT 1
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 0
54664: PUSH
54665: LD_INT 1
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 1
54674: NEG
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 1
54685: NEG
54686: PUSH
54687: LD_INT 1
54689: NEG
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: ST_TO_ADDR
// end ; 1 :
54704: GO 60601
54706: LD_INT 1
54708: DOUBLE
54709: EQUAL
54710: IFTRUE 54714
54712: GO 57337
54714: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54715: LD_ADDR_VAR 0 11
54719: PUSH
54720: LD_INT 1
54722: NEG
54723: PUSH
54724: LD_INT 3
54726: NEG
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 0
54734: PUSH
54735: LD_INT 3
54737: NEG
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 1
54745: PUSH
54746: LD_INT 2
54748: NEG
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: LIST
54758: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54759: LD_ADDR_VAR 0 12
54763: PUSH
54764: LD_INT 2
54766: PUSH
54767: LD_INT 1
54769: NEG
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 3
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 3
54787: PUSH
54788: LD_INT 1
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: LIST
54799: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54800: LD_ADDR_VAR 0 13
54804: PUSH
54805: LD_INT 3
54807: PUSH
54808: LD_INT 2
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 3
54817: PUSH
54818: LD_INT 3
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 2
54827: PUSH
54828: LD_INT 3
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: LIST
54839: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54840: LD_ADDR_VAR 0 14
54844: PUSH
54845: LD_INT 1
54847: PUSH
54848: LD_INT 3
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 0
54857: PUSH
54858: LD_INT 3
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 1
54867: NEG
54868: PUSH
54869: LD_INT 2
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: LIST
54880: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54881: LD_ADDR_VAR 0 15
54885: PUSH
54886: LD_INT 2
54888: NEG
54889: PUSH
54890: LD_INT 1
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 3
54899: NEG
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 3
54910: NEG
54911: PUSH
54912: LD_INT 1
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: LIST
54924: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54925: LD_ADDR_VAR 0 16
54929: PUSH
54930: LD_INT 2
54932: NEG
54933: PUSH
54934: LD_INT 3
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 3
54944: NEG
54945: PUSH
54946: LD_INT 2
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 3
54956: NEG
54957: PUSH
54958: LD_INT 3
54960: NEG
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: LIST
54970: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54971: LD_ADDR_VAR 0 17
54975: PUSH
54976: LD_INT 1
54978: NEG
54979: PUSH
54980: LD_INT 3
54982: NEG
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: LD_INT 3
54993: NEG
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: LD_INT 2
55004: NEG
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: LIST
55014: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55015: LD_ADDR_VAR 0 18
55019: PUSH
55020: LD_INT 2
55022: PUSH
55023: LD_INT 1
55025: NEG
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 3
55033: PUSH
55034: LD_INT 0
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 3
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: LIST
55055: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55056: LD_ADDR_VAR 0 19
55060: PUSH
55061: LD_INT 3
55063: PUSH
55064: LD_INT 2
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 3
55073: PUSH
55074: LD_INT 3
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 2
55083: PUSH
55084: LD_INT 3
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: LIST
55095: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55096: LD_ADDR_VAR 0 20
55100: PUSH
55101: LD_INT 1
55103: PUSH
55104: LD_INT 3
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: LD_INT 3
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: LD_INT 2
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: LIST
55136: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55137: LD_ADDR_VAR 0 21
55141: PUSH
55142: LD_INT 2
55144: NEG
55145: PUSH
55146: LD_INT 1
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 3
55155: NEG
55156: PUSH
55157: LD_INT 0
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 3
55166: NEG
55167: PUSH
55168: LD_INT 1
55170: NEG
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: LIST
55180: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55181: LD_ADDR_VAR 0 22
55185: PUSH
55186: LD_INT 2
55188: NEG
55189: PUSH
55190: LD_INT 3
55192: NEG
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 3
55200: NEG
55201: PUSH
55202: LD_INT 2
55204: NEG
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 3
55212: NEG
55213: PUSH
55214: LD_INT 3
55216: NEG
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: LIST
55226: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55227: LD_ADDR_VAR 0 23
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: LD_INT 3
55237: NEG
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 1
55245: NEG
55246: PUSH
55247: LD_INT 4
55249: NEG
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 1
55257: PUSH
55258: LD_INT 3
55260: NEG
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: LIST
55270: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55271: LD_ADDR_VAR 0 24
55275: PUSH
55276: LD_INT 3
55278: PUSH
55279: LD_INT 0
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 3
55288: PUSH
55289: LD_INT 1
55291: NEG
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 4
55299: PUSH
55300: LD_INT 1
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: LIST
55311: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55312: LD_ADDR_VAR 0 25
55316: PUSH
55317: LD_INT 3
55319: PUSH
55320: LD_INT 3
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 4
55329: PUSH
55330: LD_INT 3
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 3
55339: PUSH
55340: LD_INT 4
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: LIST
55351: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55352: LD_ADDR_VAR 0 26
55356: PUSH
55357: LD_INT 0
55359: PUSH
55360: LD_INT 3
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 1
55369: PUSH
55370: LD_INT 4
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 1
55379: NEG
55380: PUSH
55381: LD_INT 3
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: LIST
55392: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55393: LD_ADDR_VAR 0 27
55397: PUSH
55398: LD_INT 3
55400: NEG
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 3
55411: NEG
55412: PUSH
55413: LD_INT 1
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 4
55422: NEG
55423: PUSH
55424: LD_INT 1
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: LIST
55436: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55437: LD_ADDR_VAR 0 28
55441: PUSH
55442: LD_INT 3
55444: NEG
55445: PUSH
55446: LD_INT 3
55448: NEG
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 3
55456: NEG
55457: PUSH
55458: LD_INT 4
55460: NEG
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 4
55468: NEG
55469: PUSH
55470: LD_INT 3
55472: NEG
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: LIST
55482: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55483: LD_ADDR_VAR 0 29
55487: PUSH
55488: LD_INT 1
55490: NEG
55491: PUSH
55492: LD_INT 3
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 0
55502: PUSH
55503: LD_INT 3
55505: NEG
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 1
55513: PUSH
55514: LD_INT 2
55516: NEG
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 1
55524: NEG
55525: PUSH
55526: LD_INT 4
55528: NEG
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 0
55536: PUSH
55537: LD_INT 4
55539: NEG
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 1
55547: PUSH
55548: LD_INT 3
55550: NEG
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 1
55558: NEG
55559: PUSH
55560: LD_INT 5
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 0
55570: PUSH
55571: LD_INT 5
55573: NEG
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 1
55581: PUSH
55582: LD_INT 4
55584: NEG
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: NEG
55593: PUSH
55594: LD_INT 6
55596: NEG
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: LD_INT 6
55607: NEG
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 1
55615: PUSH
55616: LD_INT 5
55618: NEG
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55638: LD_ADDR_VAR 0 30
55642: PUSH
55643: LD_INT 2
55645: PUSH
55646: LD_INT 1
55648: NEG
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 3
55656: PUSH
55657: LD_INT 0
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 3
55666: PUSH
55667: LD_INT 1
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 3
55676: PUSH
55677: LD_INT 1
55679: NEG
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 4
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 4
55697: PUSH
55698: LD_INT 1
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 4
55707: PUSH
55708: LD_INT 1
55710: NEG
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 5
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 5
55728: PUSH
55729: LD_INT 1
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 5
55738: PUSH
55739: LD_INT 1
55741: NEG
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 6
55749: PUSH
55750: LD_INT 0
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 6
55759: PUSH
55760: LD_INT 1
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55781: LD_ADDR_VAR 0 31
55785: PUSH
55786: LD_INT 3
55788: PUSH
55789: LD_INT 2
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 3
55798: PUSH
55799: LD_INT 3
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 2
55808: PUSH
55809: LD_INT 3
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 4
55818: PUSH
55819: LD_INT 3
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 4
55828: PUSH
55829: LD_INT 4
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 3
55838: PUSH
55839: LD_INT 4
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 5
55848: PUSH
55849: LD_INT 4
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 5
55858: PUSH
55859: LD_INT 5
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 4
55868: PUSH
55869: LD_INT 5
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 6
55878: PUSH
55879: LD_INT 5
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 6
55888: PUSH
55889: LD_INT 6
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 5
55898: PUSH
55899: LD_INT 6
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55920: LD_ADDR_VAR 0 32
55924: PUSH
55925: LD_INT 1
55927: PUSH
55928: LD_INT 3
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 0
55937: PUSH
55938: LD_INT 3
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 1
55947: NEG
55948: PUSH
55949: LD_INT 2
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 1
55958: PUSH
55959: LD_INT 4
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: LD_INT 4
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 1
55978: NEG
55979: PUSH
55980: LD_INT 3
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 1
55989: PUSH
55990: LD_INT 5
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 0
55999: PUSH
56000: LD_INT 5
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 1
56009: NEG
56010: PUSH
56011: LD_INT 4
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 1
56020: PUSH
56021: LD_INT 6
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 0
56030: PUSH
56031: LD_INT 6
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: PUSH
56042: LD_INT 5
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56063: LD_ADDR_VAR 0 33
56067: PUSH
56068: LD_INT 2
56070: NEG
56071: PUSH
56072: LD_INT 1
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 3
56081: NEG
56082: PUSH
56083: LD_INT 0
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 3
56092: NEG
56093: PUSH
56094: LD_INT 1
56096: NEG
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 3
56104: NEG
56105: PUSH
56106: LD_INT 1
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 4
56115: NEG
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 4
56126: NEG
56127: PUSH
56128: LD_INT 1
56130: NEG
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 4
56138: NEG
56139: PUSH
56140: LD_INT 1
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 5
56149: NEG
56150: PUSH
56151: LD_INT 0
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 5
56160: NEG
56161: PUSH
56162: LD_INT 1
56164: NEG
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 5
56172: NEG
56173: PUSH
56174: LD_INT 1
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 6
56183: NEG
56184: PUSH
56185: LD_INT 0
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 6
56194: NEG
56195: PUSH
56196: LD_INT 1
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56218: LD_ADDR_VAR 0 34
56222: PUSH
56223: LD_INT 2
56225: NEG
56226: PUSH
56227: LD_INT 3
56229: NEG
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 3
56237: NEG
56238: PUSH
56239: LD_INT 2
56241: NEG
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 3
56249: NEG
56250: PUSH
56251: LD_INT 3
56253: NEG
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 3
56261: NEG
56262: PUSH
56263: LD_INT 4
56265: NEG
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 4
56273: NEG
56274: PUSH
56275: LD_INT 3
56277: NEG
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 4
56285: NEG
56286: PUSH
56287: LD_INT 4
56289: NEG
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 4
56297: NEG
56298: PUSH
56299: LD_INT 5
56301: NEG
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 5
56309: NEG
56310: PUSH
56311: LD_INT 4
56313: NEG
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 5
56321: NEG
56322: PUSH
56323: LD_INT 5
56325: NEG
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 5
56333: NEG
56334: PUSH
56335: LD_INT 6
56337: NEG
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 6
56345: NEG
56346: PUSH
56347: LD_INT 5
56349: NEG
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 6
56357: NEG
56358: PUSH
56359: LD_INT 6
56361: NEG
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56381: LD_ADDR_VAR 0 41
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: LD_INT 2
56391: NEG
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 1
56399: NEG
56400: PUSH
56401: LD_INT 3
56403: NEG
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 1
56411: PUSH
56412: LD_INT 2
56414: NEG
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: LIST
56424: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56425: LD_ADDR_VAR 0 42
56429: PUSH
56430: LD_INT 2
56432: PUSH
56433: LD_INT 0
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 2
56442: PUSH
56443: LD_INT 1
56445: NEG
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 3
56453: PUSH
56454: LD_INT 1
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: LIST
56465: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56466: LD_ADDR_VAR 0 43
56470: PUSH
56471: LD_INT 2
56473: PUSH
56474: LD_INT 2
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 3
56483: PUSH
56484: LD_INT 2
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 2
56493: PUSH
56494: LD_INT 3
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: LIST
56505: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56506: LD_ADDR_VAR 0 44
56510: PUSH
56511: LD_INT 0
56513: PUSH
56514: LD_INT 2
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 1
56523: PUSH
56524: LD_INT 3
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 1
56533: NEG
56534: PUSH
56535: LD_INT 2
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: LIST
56546: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56547: LD_ADDR_VAR 0 45
56551: PUSH
56552: LD_INT 2
56554: NEG
56555: PUSH
56556: LD_INT 0
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 2
56565: NEG
56566: PUSH
56567: LD_INT 1
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 3
56576: NEG
56577: PUSH
56578: LD_INT 1
56580: NEG
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: LIST
56590: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56591: LD_ADDR_VAR 0 46
56595: PUSH
56596: LD_INT 2
56598: NEG
56599: PUSH
56600: LD_INT 2
56602: NEG
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 2
56610: NEG
56611: PUSH
56612: LD_INT 3
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 3
56622: NEG
56623: PUSH
56624: LD_INT 2
56626: NEG
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: LIST
56636: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56637: LD_ADDR_VAR 0 47
56641: PUSH
56642: LD_INT 2
56644: NEG
56645: PUSH
56646: LD_INT 3
56648: NEG
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 1
56656: NEG
56657: PUSH
56658: LD_INT 3
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56670: LD_ADDR_VAR 0 48
56674: PUSH
56675: LD_INT 1
56677: PUSH
56678: LD_INT 2
56680: NEG
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 2
56688: PUSH
56689: LD_INT 1
56691: NEG
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56701: LD_ADDR_VAR 0 49
56705: PUSH
56706: LD_INT 3
56708: PUSH
56709: LD_INT 1
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 3
56718: PUSH
56719: LD_INT 2
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56730: LD_ADDR_VAR 0 50
56734: PUSH
56735: LD_INT 2
56737: PUSH
56738: LD_INT 3
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 1
56747: PUSH
56748: LD_INT 3
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56759: LD_ADDR_VAR 0 51
56763: PUSH
56764: LD_INT 1
56766: NEG
56767: PUSH
56768: LD_INT 2
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 2
56777: NEG
56778: PUSH
56779: LD_INT 1
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56790: LD_ADDR_VAR 0 52
56794: PUSH
56795: LD_INT 3
56797: NEG
56798: PUSH
56799: LD_INT 1
56801: NEG
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 3
56809: NEG
56810: PUSH
56811: LD_INT 2
56813: NEG
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56823: LD_ADDR_VAR 0 53
56827: PUSH
56828: LD_INT 1
56830: NEG
56831: PUSH
56832: LD_INT 3
56834: NEG
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: LD_INT 3
56845: NEG
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 1
56853: PUSH
56854: LD_INT 2
56856: NEG
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: LIST
56866: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56867: LD_ADDR_VAR 0 54
56871: PUSH
56872: LD_INT 2
56874: PUSH
56875: LD_INT 1
56877: NEG
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 3
56885: PUSH
56886: LD_INT 0
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 3
56895: PUSH
56896: LD_INT 1
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: LIST
56907: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56908: LD_ADDR_VAR 0 55
56912: PUSH
56913: LD_INT 3
56915: PUSH
56916: LD_INT 2
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 3
56925: PUSH
56926: LD_INT 3
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 2
56935: PUSH
56936: LD_INT 3
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: LIST
56947: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56948: LD_ADDR_VAR 0 56
56952: PUSH
56953: LD_INT 1
56955: PUSH
56956: LD_INT 3
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 0
56965: PUSH
56966: LD_INT 3
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 1
56975: NEG
56976: PUSH
56977: LD_INT 2
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: LIST
56988: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56989: LD_ADDR_VAR 0 57
56993: PUSH
56994: LD_INT 2
56996: NEG
56997: PUSH
56998: LD_INT 1
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 3
57007: NEG
57008: PUSH
57009: LD_INT 0
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 3
57018: NEG
57019: PUSH
57020: LD_INT 1
57022: NEG
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: LIST
57032: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57033: LD_ADDR_VAR 0 58
57037: PUSH
57038: LD_INT 2
57040: NEG
57041: PUSH
57042: LD_INT 3
57044: NEG
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 3
57052: NEG
57053: PUSH
57054: LD_INT 2
57056: NEG
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 3
57064: NEG
57065: PUSH
57066: LD_INT 3
57068: NEG
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: LIST
57078: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57079: LD_ADDR_VAR 0 59
57083: PUSH
57084: LD_INT 1
57086: NEG
57087: PUSH
57088: LD_INT 2
57090: NEG
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 0
57098: PUSH
57099: LD_INT 2
57101: NEG
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 1
57109: PUSH
57110: LD_INT 1
57112: NEG
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: LIST
57122: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57123: LD_ADDR_VAR 0 60
57127: PUSH
57128: LD_INT 1
57130: PUSH
57131: LD_INT 1
57133: NEG
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 2
57141: PUSH
57142: LD_INT 0
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 2
57151: PUSH
57152: LD_INT 1
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: LIST
57163: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57164: LD_ADDR_VAR 0 61
57168: PUSH
57169: LD_INT 2
57171: PUSH
57172: LD_INT 1
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 2
57181: PUSH
57182: LD_INT 2
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 1
57191: PUSH
57192: LD_INT 2
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: LIST
57203: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57204: LD_ADDR_VAR 0 62
57208: PUSH
57209: LD_INT 1
57211: PUSH
57212: LD_INT 2
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 0
57221: PUSH
57222: LD_INT 2
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 1
57231: NEG
57232: PUSH
57233: LD_INT 1
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: LIST
57244: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57245: LD_ADDR_VAR 0 63
57249: PUSH
57250: LD_INT 1
57252: NEG
57253: PUSH
57254: LD_INT 1
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 2
57263: NEG
57264: PUSH
57265: LD_INT 0
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 2
57274: NEG
57275: PUSH
57276: LD_INT 1
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: LIST
57288: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57289: LD_ADDR_VAR 0 64
57293: PUSH
57294: LD_INT 1
57296: NEG
57297: PUSH
57298: LD_INT 2
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 2
57308: NEG
57309: PUSH
57310: LD_INT 1
57312: NEG
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 2
57320: NEG
57321: PUSH
57322: LD_INT 2
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: LIST
57334: ST_TO_ADDR
// end ; 2 :
57335: GO 60601
57337: LD_INT 2
57339: DOUBLE
57340: EQUAL
57341: IFTRUE 57345
57343: GO 60600
57345: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57346: LD_ADDR_VAR 0 29
57350: PUSH
57351: LD_INT 4
57353: PUSH
57354: LD_INT 0
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 4
57363: PUSH
57364: LD_INT 1
57366: NEG
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 5
57374: PUSH
57375: LD_INT 0
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 5
57384: PUSH
57385: LD_INT 1
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 4
57394: PUSH
57395: LD_INT 1
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 3
57404: PUSH
57405: LD_INT 0
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 3
57414: PUSH
57415: LD_INT 1
57417: NEG
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 3
57425: PUSH
57426: LD_INT 2
57428: NEG
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 5
57436: PUSH
57437: LD_INT 2
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 3
57446: PUSH
57447: LD_INT 3
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 3
57456: PUSH
57457: LD_INT 2
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 4
57466: PUSH
57467: LD_INT 3
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 4
57476: PUSH
57477: LD_INT 4
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 3
57486: PUSH
57487: LD_INT 4
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 2
57496: PUSH
57497: LD_INT 3
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 2
57506: PUSH
57507: LD_INT 2
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 4
57516: PUSH
57517: LD_INT 2
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 2
57526: PUSH
57527: LD_INT 4
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 0
57536: PUSH
57537: LD_INT 4
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 0
57546: PUSH
57547: LD_INT 3
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 1
57556: PUSH
57557: LD_INT 4
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: PUSH
57567: LD_INT 5
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 0
57576: PUSH
57577: LD_INT 5
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 1
57586: NEG
57587: PUSH
57588: LD_INT 4
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 1
57597: NEG
57598: PUSH
57599: LD_INT 3
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 2
57608: PUSH
57609: LD_INT 5
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 2
57618: NEG
57619: PUSH
57620: LD_INT 3
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 3
57629: NEG
57630: PUSH
57631: LD_INT 0
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 3
57640: NEG
57641: PUSH
57642: LD_INT 1
57644: NEG
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 2
57652: NEG
57653: PUSH
57654: LD_INT 0
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 2
57663: NEG
57664: PUSH
57665: LD_INT 1
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 3
57674: NEG
57675: PUSH
57676: LD_INT 1
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 4
57685: NEG
57686: PUSH
57687: LD_INT 0
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 4
57696: NEG
57697: PUSH
57698: LD_INT 1
57700: NEG
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 4
57708: NEG
57709: PUSH
57710: LD_INT 2
57712: NEG
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 2
57720: NEG
57721: PUSH
57722: LD_INT 2
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 4
57731: NEG
57732: PUSH
57733: LD_INT 4
57735: NEG
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 4
57743: NEG
57744: PUSH
57745: LD_INT 5
57747: NEG
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 3
57755: NEG
57756: PUSH
57757: LD_INT 4
57759: NEG
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 3
57767: NEG
57768: PUSH
57769: LD_INT 3
57771: NEG
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 4
57779: NEG
57780: PUSH
57781: LD_INT 3
57783: NEG
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 5
57791: NEG
57792: PUSH
57793: LD_INT 4
57795: NEG
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 5
57803: NEG
57804: PUSH
57805: LD_INT 5
57807: NEG
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 3
57815: NEG
57816: PUSH
57817: LD_INT 5
57819: NEG
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 5
57827: NEG
57828: PUSH
57829: LD_INT 3
57831: NEG
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57884: LD_ADDR_VAR 0 30
57888: PUSH
57889: LD_INT 4
57891: PUSH
57892: LD_INT 4
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 4
57901: PUSH
57902: LD_INT 3
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 5
57911: PUSH
57912: LD_INT 4
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 5
57921: PUSH
57922: LD_INT 5
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 4
57931: PUSH
57932: LD_INT 5
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 3
57941: PUSH
57942: LD_INT 4
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 3
57951: PUSH
57952: LD_INT 3
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 5
57961: PUSH
57962: LD_INT 3
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 3
57971: PUSH
57972: LD_INT 5
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 0
57981: PUSH
57982: LD_INT 3
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 0
57991: PUSH
57992: LD_INT 2
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 1
58001: PUSH
58002: LD_INT 3
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 1
58011: PUSH
58012: LD_INT 4
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 0
58021: PUSH
58022: LD_INT 4
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 1
58031: NEG
58032: PUSH
58033: LD_INT 3
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 1
58042: NEG
58043: PUSH
58044: LD_INT 2
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 2
58053: PUSH
58054: LD_INT 4
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 2
58063: NEG
58064: PUSH
58065: LD_INT 2
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 4
58074: NEG
58075: PUSH
58076: LD_INT 0
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 4
58085: NEG
58086: PUSH
58087: LD_INT 1
58089: NEG
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 3
58097: NEG
58098: PUSH
58099: LD_INT 0
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 3
58108: NEG
58109: PUSH
58110: LD_INT 1
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 4
58119: NEG
58120: PUSH
58121: LD_INT 1
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 5
58130: NEG
58131: PUSH
58132: LD_INT 0
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 5
58141: NEG
58142: PUSH
58143: LD_INT 1
58145: NEG
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 5
58153: NEG
58154: PUSH
58155: LD_INT 2
58157: NEG
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 3
58165: NEG
58166: PUSH
58167: LD_INT 2
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 3
58176: NEG
58177: PUSH
58178: LD_INT 3
58180: NEG
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 3
58188: NEG
58189: PUSH
58190: LD_INT 4
58192: NEG
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 2
58200: NEG
58201: PUSH
58202: LD_INT 3
58204: NEG
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 2
58212: NEG
58213: PUSH
58214: LD_INT 2
58216: NEG
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 3
58224: NEG
58225: PUSH
58226: LD_INT 2
58228: NEG
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 4
58236: NEG
58237: PUSH
58238: LD_INT 3
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 4
58248: NEG
58249: PUSH
58250: LD_INT 4
58252: NEG
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 2
58260: NEG
58261: PUSH
58262: LD_INT 4
58264: NEG
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 4
58272: NEG
58273: PUSH
58274: LD_INT 2
58276: NEG
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 0
58284: PUSH
58285: LD_INT 4
58287: NEG
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 0
58295: PUSH
58296: LD_INT 5
58298: NEG
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 1
58306: PUSH
58307: LD_INT 4
58309: NEG
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 1
58317: PUSH
58318: LD_INT 3
58320: NEG
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 0
58328: PUSH
58329: LD_INT 3
58331: NEG
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 1
58339: NEG
58340: PUSH
58341: LD_INT 4
58343: NEG
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 1
58351: NEG
58352: PUSH
58353: LD_INT 5
58355: NEG
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 2
58363: PUSH
58364: LD_INT 3
58366: NEG
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 2
58374: NEG
58375: PUSH
58376: LD_INT 5
58378: NEG
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58431: LD_ADDR_VAR 0 31
58435: PUSH
58436: LD_INT 0
58438: PUSH
58439: LD_INT 4
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 0
58448: PUSH
58449: LD_INT 3
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 1
58458: PUSH
58459: LD_INT 4
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 1
58468: PUSH
58469: LD_INT 5
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 0
58478: PUSH
58479: LD_INT 5
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 1
58488: NEG
58489: PUSH
58490: LD_INT 4
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 1
58499: NEG
58500: PUSH
58501: LD_INT 3
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 2
58510: PUSH
58511: LD_INT 5
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 2
58520: NEG
58521: PUSH
58522: LD_INT 3
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 3
58531: NEG
58532: PUSH
58533: LD_INT 0
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 3
58542: NEG
58543: PUSH
58544: LD_INT 1
58546: NEG
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 2
58554: NEG
58555: PUSH
58556: LD_INT 0
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 2
58565: NEG
58566: PUSH
58567: LD_INT 1
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 3
58576: NEG
58577: PUSH
58578: LD_INT 1
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 4
58587: NEG
58588: PUSH
58589: LD_INT 0
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 4
58598: NEG
58599: PUSH
58600: LD_INT 1
58602: NEG
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 4
58610: NEG
58611: PUSH
58612: LD_INT 2
58614: NEG
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 2
58622: NEG
58623: PUSH
58624: LD_INT 2
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 4
58633: NEG
58634: PUSH
58635: LD_INT 4
58637: NEG
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 4
58645: NEG
58646: PUSH
58647: LD_INT 5
58649: NEG
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 3
58657: NEG
58658: PUSH
58659: LD_INT 4
58661: NEG
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 3
58669: NEG
58670: PUSH
58671: LD_INT 3
58673: NEG
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 4
58681: NEG
58682: PUSH
58683: LD_INT 3
58685: NEG
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 5
58693: NEG
58694: PUSH
58695: LD_INT 4
58697: NEG
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 5
58705: NEG
58706: PUSH
58707: LD_INT 5
58709: NEG
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 3
58717: NEG
58718: PUSH
58719: LD_INT 5
58721: NEG
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 5
58729: NEG
58730: PUSH
58731: LD_INT 3
58733: NEG
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 0
58741: PUSH
58742: LD_INT 3
58744: NEG
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 0
58752: PUSH
58753: LD_INT 4
58755: NEG
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 1
58763: PUSH
58764: LD_INT 3
58766: NEG
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 1
58774: PUSH
58775: LD_INT 2
58777: NEG
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 0
58785: PUSH
58786: LD_INT 2
58788: NEG
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 1
58796: NEG
58797: PUSH
58798: LD_INT 3
58800: NEG
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 1
58808: NEG
58809: PUSH
58810: LD_INT 4
58812: NEG
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 2
58820: PUSH
58821: LD_INT 2
58823: NEG
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 2
58831: NEG
58832: PUSH
58833: LD_INT 4
58835: NEG
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 4
58843: PUSH
58844: LD_INT 0
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 4
58853: PUSH
58854: LD_INT 1
58856: NEG
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 5
58864: PUSH
58865: LD_INT 0
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 5
58874: PUSH
58875: LD_INT 1
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 4
58884: PUSH
58885: LD_INT 1
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 3
58894: PUSH
58895: LD_INT 0
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 3
58904: PUSH
58905: LD_INT 1
58907: NEG
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 3
58915: PUSH
58916: LD_INT 2
58918: NEG
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 5
58926: PUSH
58927: LD_INT 2
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58981: LD_ADDR_VAR 0 32
58985: PUSH
58986: LD_INT 4
58988: NEG
58989: PUSH
58990: LD_INT 0
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 4
58999: NEG
59000: PUSH
59001: LD_INT 1
59003: NEG
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 3
59011: NEG
59012: PUSH
59013: LD_INT 0
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 3
59022: NEG
59023: PUSH
59024: LD_INT 1
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 4
59033: NEG
59034: PUSH
59035: LD_INT 1
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 5
59044: NEG
59045: PUSH
59046: LD_INT 0
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 5
59055: NEG
59056: PUSH
59057: LD_INT 1
59059: NEG
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 5
59067: NEG
59068: PUSH
59069: LD_INT 2
59071: NEG
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 3
59079: NEG
59080: PUSH
59081: LD_INT 2
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 3
59090: NEG
59091: PUSH
59092: LD_INT 3
59094: NEG
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 3
59102: NEG
59103: PUSH
59104: LD_INT 4
59106: NEG
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 2
59114: NEG
59115: PUSH
59116: LD_INT 3
59118: NEG
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 2
59126: NEG
59127: PUSH
59128: LD_INT 2
59130: NEG
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 3
59138: NEG
59139: PUSH
59140: LD_INT 2
59142: NEG
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 4
59150: NEG
59151: PUSH
59152: LD_INT 3
59154: NEG
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 4
59162: NEG
59163: PUSH
59164: LD_INT 4
59166: NEG
59167: PUSH
59168: EMPTY
59169: LIST
59170: LIST
59171: PUSH
59172: LD_INT 2
59174: NEG
59175: PUSH
59176: LD_INT 4
59178: NEG
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 4
59186: NEG
59187: PUSH
59188: LD_INT 2
59190: NEG
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 0
59198: PUSH
59199: LD_INT 4
59201: NEG
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 0
59209: PUSH
59210: LD_INT 5
59212: NEG
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 1
59220: PUSH
59221: LD_INT 4
59223: NEG
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 1
59231: PUSH
59232: LD_INT 3
59234: NEG
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 0
59242: PUSH
59243: LD_INT 3
59245: NEG
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 1
59253: NEG
59254: PUSH
59255: LD_INT 4
59257: NEG
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 1
59265: NEG
59266: PUSH
59267: LD_INT 5
59269: NEG
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 2
59277: PUSH
59278: LD_INT 3
59280: NEG
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 2
59288: NEG
59289: PUSH
59290: LD_INT 5
59292: NEG
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 3
59300: PUSH
59301: LD_INT 0
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 3
59310: PUSH
59311: LD_INT 1
59313: NEG
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 4
59321: PUSH
59322: LD_INT 0
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 4
59331: PUSH
59332: LD_INT 1
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 3
59341: PUSH
59342: LD_INT 1
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 2
59351: PUSH
59352: LD_INT 0
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 2
59361: PUSH
59362: LD_INT 1
59364: NEG
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 2
59372: PUSH
59373: LD_INT 2
59375: NEG
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 4
59383: PUSH
59384: LD_INT 2
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 4
59393: PUSH
59394: LD_INT 4
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 4
59403: PUSH
59404: LD_INT 3
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 5
59413: PUSH
59414: LD_INT 4
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 5
59423: PUSH
59424: LD_INT 5
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 4
59433: PUSH
59434: LD_INT 5
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 3
59443: PUSH
59444: LD_INT 4
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 3
59453: PUSH
59454: LD_INT 3
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 5
59463: PUSH
59464: LD_INT 3
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 3
59473: PUSH
59474: LD_INT 5
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59528: LD_ADDR_VAR 0 33
59532: PUSH
59533: LD_INT 4
59535: NEG
59536: PUSH
59537: LD_INT 4
59539: NEG
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 4
59547: NEG
59548: PUSH
59549: LD_INT 5
59551: NEG
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 3
59559: NEG
59560: PUSH
59561: LD_INT 4
59563: NEG
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 3
59571: NEG
59572: PUSH
59573: LD_INT 3
59575: NEG
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 4
59583: NEG
59584: PUSH
59585: LD_INT 3
59587: NEG
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 5
59595: NEG
59596: PUSH
59597: LD_INT 4
59599: NEG
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 5
59607: NEG
59608: PUSH
59609: LD_INT 5
59611: NEG
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 3
59619: NEG
59620: PUSH
59621: LD_INT 5
59623: NEG
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 5
59631: NEG
59632: PUSH
59633: LD_INT 3
59635: NEG
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 0
59643: PUSH
59644: LD_INT 3
59646: NEG
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 0
59654: PUSH
59655: LD_INT 4
59657: NEG
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 1
59665: PUSH
59666: LD_INT 3
59668: NEG
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 1
59676: PUSH
59677: LD_INT 2
59679: NEG
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 0
59687: PUSH
59688: LD_INT 2
59690: NEG
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 1
59698: NEG
59699: PUSH
59700: LD_INT 3
59702: NEG
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 1
59710: NEG
59711: PUSH
59712: LD_INT 4
59714: NEG
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 2
59722: PUSH
59723: LD_INT 2
59725: NEG
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 2
59733: NEG
59734: PUSH
59735: LD_INT 4
59737: NEG
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 4
59745: PUSH
59746: LD_INT 0
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 4
59755: PUSH
59756: LD_INT 1
59758: NEG
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 5
59766: PUSH
59767: LD_INT 0
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 5
59776: PUSH
59777: LD_INT 1
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 4
59786: PUSH
59787: LD_INT 1
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 3
59796: PUSH
59797: LD_INT 0
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 3
59806: PUSH
59807: LD_INT 1
59809: NEG
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 3
59817: PUSH
59818: LD_INT 2
59820: NEG
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 5
59828: PUSH
59829: LD_INT 2
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 3
59838: PUSH
59839: LD_INT 3
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 3
59848: PUSH
59849: LD_INT 2
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 4
59858: PUSH
59859: LD_INT 3
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 4
59868: PUSH
59869: LD_INT 4
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 3
59878: PUSH
59879: LD_INT 4
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 2
59888: PUSH
59889: LD_INT 3
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 2
59898: PUSH
59899: LD_INT 2
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 4
59908: PUSH
59909: LD_INT 2
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 2
59918: PUSH
59919: LD_INT 4
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 0
59928: PUSH
59929: LD_INT 4
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 0
59938: PUSH
59939: LD_INT 3
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 1
59948: PUSH
59949: LD_INT 4
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 1
59958: PUSH
59959: LD_INT 5
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 0
59968: PUSH
59969: LD_INT 5
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 1
59978: NEG
59979: PUSH
59980: LD_INT 4
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 1
59989: NEG
59990: PUSH
59991: LD_INT 3
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 2
60000: PUSH
60001: LD_INT 5
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 2
60010: NEG
60011: PUSH
60012: LD_INT 3
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60066: LD_ADDR_VAR 0 34
60070: PUSH
60071: LD_INT 0
60073: PUSH
60074: LD_INT 4
60076: NEG
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 0
60084: PUSH
60085: LD_INT 5
60087: NEG
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 1
60095: PUSH
60096: LD_INT 4
60098: NEG
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 1
60106: PUSH
60107: LD_INT 3
60109: NEG
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 0
60117: PUSH
60118: LD_INT 3
60120: NEG
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 1
60128: NEG
60129: PUSH
60130: LD_INT 4
60132: NEG
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 1
60140: NEG
60141: PUSH
60142: LD_INT 5
60144: NEG
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 2
60152: PUSH
60153: LD_INT 3
60155: NEG
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 2
60163: NEG
60164: PUSH
60165: LD_INT 5
60167: NEG
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 3
60175: PUSH
60176: LD_INT 0
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 3
60185: PUSH
60186: LD_INT 1
60188: NEG
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 4
60196: PUSH
60197: LD_INT 0
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 4
60206: PUSH
60207: LD_INT 1
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 3
60216: PUSH
60217: LD_INT 1
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 2
60226: PUSH
60227: LD_INT 0
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 2
60236: PUSH
60237: LD_INT 1
60239: NEG
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 2
60247: PUSH
60248: LD_INT 2
60250: NEG
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 4
60258: PUSH
60259: LD_INT 2
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 4
60268: PUSH
60269: LD_INT 4
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 4
60278: PUSH
60279: LD_INT 3
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 5
60288: PUSH
60289: LD_INT 4
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 5
60298: PUSH
60299: LD_INT 5
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 4
60308: PUSH
60309: LD_INT 5
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 3
60318: PUSH
60319: LD_INT 4
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 3
60328: PUSH
60329: LD_INT 3
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 5
60338: PUSH
60339: LD_INT 3
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 3
60348: PUSH
60349: LD_INT 5
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 0
60358: PUSH
60359: LD_INT 3
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 0
60368: PUSH
60369: LD_INT 2
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 1
60378: PUSH
60379: LD_INT 3
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 1
60388: PUSH
60389: LD_INT 4
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 0
60398: PUSH
60399: LD_INT 4
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 1
60408: NEG
60409: PUSH
60410: LD_INT 3
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 1
60419: NEG
60420: PUSH
60421: LD_INT 2
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 2
60430: PUSH
60431: LD_INT 4
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 2
60440: NEG
60441: PUSH
60442: LD_INT 2
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 4
60451: NEG
60452: PUSH
60453: LD_INT 0
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 4
60462: NEG
60463: PUSH
60464: LD_INT 1
60466: NEG
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 3
60474: NEG
60475: PUSH
60476: LD_INT 0
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 3
60485: NEG
60486: PUSH
60487: LD_INT 1
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 4
60496: NEG
60497: PUSH
60498: LD_INT 1
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 5
60507: NEG
60508: PUSH
60509: LD_INT 0
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 5
60518: NEG
60519: PUSH
60520: LD_INT 1
60522: NEG
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 5
60530: NEG
60531: PUSH
60532: LD_INT 2
60534: NEG
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 3
60542: NEG
60543: PUSH
60544: LD_INT 2
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: ST_TO_ADDR
// end ; end ;
60598: GO 60601
60600: POP
// case btype of b_depot , b_warehouse :
60601: LD_VAR 0 1
60605: PUSH
60606: LD_INT 0
60608: DOUBLE
60609: EQUAL
60610: IFTRUE 60620
60612: LD_INT 1
60614: DOUBLE
60615: EQUAL
60616: IFTRUE 60620
60618: GO 60821
60620: POP
// case nation of nation_american :
60621: LD_VAR 0 5
60625: PUSH
60626: LD_INT 1
60628: DOUBLE
60629: EQUAL
60630: IFTRUE 60634
60632: GO 60690
60634: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60635: LD_ADDR_VAR 0 9
60639: PUSH
60640: LD_VAR 0 11
60644: PUSH
60645: LD_VAR 0 12
60649: PUSH
60650: LD_VAR 0 13
60654: PUSH
60655: LD_VAR 0 14
60659: PUSH
60660: LD_VAR 0 15
60664: PUSH
60665: LD_VAR 0 16
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: PUSH
60678: LD_VAR 0 4
60682: PUSH
60683: LD_INT 1
60685: PLUS
60686: ARRAY
60687: ST_TO_ADDR
60688: GO 60819
60690: LD_INT 2
60692: DOUBLE
60693: EQUAL
60694: IFTRUE 60698
60696: GO 60754
60698: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60699: LD_ADDR_VAR 0 9
60703: PUSH
60704: LD_VAR 0 17
60708: PUSH
60709: LD_VAR 0 18
60713: PUSH
60714: LD_VAR 0 19
60718: PUSH
60719: LD_VAR 0 20
60723: PUSH
60724: LD_VAR 0 21
60728: PUSH
60729: LD_VAR 0 22
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: PUSH
60742: LD_VAR 0 4
60746: PUSH
60747: LD_INT 1
60749: PLUS
60750: ARRAY
60751: ST_TO_ADDR
60752: GO 60819
60754: LD_INT 3
60756: DOUBLE
60757: EQUAL
60758: IFTRUE 60762
60760: GO 60818
60762: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60763: LD_ADDR_VAR 0 9
60767: PUSH
60768: LD_VAR 0 23
60772: PUSH
60773: LD_VAR 0 24
60777: PUSH
60778: LD_VAR 0 25
60782: PUSH
60783: LD_VAR 0 26
60787: PUSH
60788: LD_VAR 0 27
60792: PUSH
60793: LD_VAR 0 28
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: PUSH
60806: LD_VAR 0 4
60810: PUSH
60811: LD_INT 1
60813: PLUS
60814: ARRAY
60815: ST_TO_ADDR
60816: GO 60819
60818: POP
60819: GO 61374
60821: LD_INT 2
60823: DOUBLE
60824: EQUAL
60825: IFTRUE 60835
60827: LD_INT 3
60829: DOUBLE
60830: EQUAL
60831: IFTRUE 60835
60833: GO 60891
60835: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60836: LD_ADDR_VAR 0 9
60840: PUSH
60841: LD_VAR 0 29
60845: PUSH
60846: LD_VAR 0 30
60850: PUSH
60851: LD_VAR 0 31
60855: PUSH
60856: LD_VAR 0 32
60860: PUSH
60861: LD_VAR 0 33
60865: PUSH
60866: LD_VAR 0 34
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: PUSH
60879: LD_VAR 0 4
60883: PUSH
60884: LD_INT 1
60886: PLUS
60887: ARRAY
60888: ST_TO_ADDR
60889: GO 61374
60891: LD_INT 16
60893: DOUBLE
60894: EQUAL
60895: IFTRUE 60953
60897: LD_INT 17
60899: DOUBLE
60900: EQUAL
60901: IFTRUE 60953
60903: LD_INT 18
60905: DOUBLE
60906: EQUAL
60907: IFTRUE 60953
60909: LD_INT 19
60911: DOUBLE
60912: EQUAL
60913: IFTRUE 60953
60915: LD_INT 22
60917: DOUBLE
60918: EQUAL
60919: IFTRUE 60953
60921: LD_INT 20
60923: DOUBLE
60924: EQUAL
60925: IFTRUE 60953
60927: LD_INT 21
60929: DOUBLE
60930: EQUAL
60931: IFTRUE 60953
60933: LD_INT 23
60935: DOUBLE
60936: EQUAL
60937: IFTRUE 60953
60939: LD_INT 24
60941: DOUBLE
60942: EQUAL
60943: IFTRUE 60953
60945: LD_INT 25
60947: DOUBLE
60948: EQUAL
60949: IFTRUE 60953
60951: GO 61009
60953: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60954: LD_ADDR_VAR 0 9
60958: PUSH
60959: LD_VAR 0 35
60963: PUSH
60964: LD_VAR 0 36
60968: PUSH
60969: LD_VAR 0 37
60973: PUSH
60974: LD_VAR 0 38
60978: PUSH
60979: LD_VAR 0 39
60983: PUSH
60984: LD_VAR 0 40
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: PUSH
60997: LD_VAR 0 4
61001: PUSH
61002: LD_INT 1
61004: PLUS
61005: ARRAY
61006: ST_TO_ADDR
61007: GO 61374
61009: LD_INT 6
61011: DOUBLE
61012: EQUAL
61013: IFTRUE 61065
61015: LD_INT 7
61017: DOUBLE
61018: EQUAL
61019: IFTRUE 61065
61021: LD_INT 8
61023: DOUBLE
61024: EQUAL
61025: IFTRUE 61065
61027: LD_INT 13
61029: DOUBLE
61030: EQUAL
61031: IFTRUE 61065
61033: LD_INT 12
61035: DOUBLE
61036: EQUAL
61037: IFTRUE 61065
61039: LD_INT 15
61041: DOUBLE
61042: EQUAL
61043: IFTRUE 61065
61045: LD_INT 11
61047: DOUBLE
61048: EQUAL
61049: IFTRUE 61065
61051: LD_INT 14
61053: DOUBLE
61054: EQUAL
61055: IFTRUE 61065
61057: LD_INT 10
61059: DOUBLE
61060: EQUAL
61061: IFTRUE 61065
61063: GO 61121
61065: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61066: LD_ADDR_VAR 0 9
61070: PUSH
61071: LD_VAR 0 41
61075: PUSH
61076: LD_VAR 0 42
61080: PUSH
61081: LD_VAR 0 43
61085: PUSH
61086: LD_VAR 0 44
61090: PUSH
61091: LD_VAR 0 45
61095: PUSH
61096: LD_VAR 0 46
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: PUSH
61109: LD_VAR 0 4
61113: PUSH
61114: LD_INT 1
61116: PLUS
61117: ARRAY
61118: ST_TO_ADDR
61119: GO 61374
61121: LD_INT 36
61123: DOUBLE
61124: EQUAL
61125: IFTRUE 61129
61127: GO 61185
61129: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61130: LD_ADDR_VAR 0 9
61134: PUSH
61135: LD_VAR 0 47
61139: PUSH
61140: LD_VAR 0 48
61144: PUSH
61145: LD_VAR 0 49
61149: PUSH
61150: LD_VAR 0 50
61154: PUSH
61155: LD_VAR 0 51
61159: PUSH
61160: LD_VAR 0 52
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: PUSH
61173: LD_VAR 0 4
61177: PUSH
61178: LD_INT 1
61180: PLUS
61181: ARRAY
61182: ST_TO_ADDR
61183: GO 61374
61185: LD_INT 4
61187: DOUBLE
61188: EQUAL
61189: IFTRUE 61211
61191: LD_INT 5
61193: DOUBLE
61194: EQUAL
61195: IFTRUE 61211
61197: LD_INT 34
61199: DOUBLE
61200: EQUAL
61201: IFTRUE 61211
61203: LD_INT 37
61205: DOUBLE
61206: EQUAL
61207: IFTRUE 61211
61209: GO 61267
61211: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61212: LD_ADDR_VAR 0 9
61216: PUSH
61217: LD_VAR 0 53
61221: PUSH
61222: LD_VAR 0 54
61226: PUSH
61227: LD_VAR 0 55
61231: PUSH
61232: LD_VAR 0 56
61236: PUSH
61237: LD_VAR 0 57
61241: PUSH
61242: LD_VAR 0 58
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: PUSH
61255: LD_VAR 0 4
61259: PUSH
61260: LD_INT 1
61262: PLUS
61263: ARRAY
61264: ST_TO_ADDR
61265: GO 61374
61267: LD_INT 31
61269: DOUBLE
61270: EQUAL
61271: IFTRUE 61317
61273: LD_INT 32
61275: DOUBLE
61276: EQUAL
61277: IFTRUE 61317
61279: LD_INT 33
61281: DOUBLE
61282: EQUAL
61283: IFTRUE 61317
61285: LD_INT 27
61287: DOUBLE
61288: EQUAL
61289: IFTRUE 61317
61291: LD_INT 26
61293: DOUBLE
61294: EQUAL
61295: IFTRUE 61317
61297: LD_INT 28
61299: DOUBLE
61300: EQUAL
61301: IFTRUE 61317
61303: LD_INT 29
61305: DOUBLE
61306: EQUAL
61307: IFTRUE 61317
61309: LD_INT 30
61311: DOUBLE
61312: EQUAL
61313: IFTRUE 61317
61315: GO 61373
61317: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61318: LD_ADDR_VAR 0 9
61322: PUSH
61323: LD_VAR 0 59
61327: PUSH
61328: LD_VAR 0 60
61332: PUSH
61333: LD_VAR 0 61
61337: PUSH
61338: LD_VAR 0 62
61342: PUSH
61343: LD_VAR 0 63
61347: PUSH
61348: LD_VAR 0 64
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: PUSH
61361: LD_VAR 0 4
61365: PUSH
61366: LD_INT 1
61368: PLUS
61369: ARRAY
61370: ST_TO_ADDR
61371: GO 61374
61373: POP
// temp_list2 = [ ] ;
61374: LD_ADDR_VAR 0 10
61378: PUSH
61379: EMPTY
61380: ST_TO_ADDR
// for i in temp_list do
61381: LD_ADDR_VAR 0 8
61385: PUSH
61386: LD_VAR 0 9
61390: PUSH
61391: FOR_IN
61392: IFFALSE 61444
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61394: LD_ADDR_VAR 0 10
61398: PUSH
61399: LD_VAR 0 10
61403: PUSH
61404: LD_VAR 0 8
61408: PUSH
61409: LD_INT 1
61411: ARRAY
61412: PUSH
61413: LD_VAR 0 2
61417: PLUS
61418: PUSH
61419: LD_VAR 0 8
61423: PUSH
61424: LD_INT 2
61426: ARRAY
61427: PUSH
61428: LD_VAR 0 3
61432: PLUS
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: EMPTY
61439: LIST
61440: ADD
61441: ST_TO_ADDR
61442: GO 61391
61444: POP
61445: POP
// result = temp_list2 ;
61446: LD_ADDR_VAR 0 7
61450: PUSH
61451: LD_VAR 0 10
61455: ST_TO_ADDR
// end ;
61456: LD_VAR 0 7
61460: RET
// export function EnemyInRange ( unit , dist ) ; begin
61461: LD_INT 0
61463: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61464: LD_ADDR_VAR 0 3
61468: PUSH
61469: LD_VAR 0 1
61473: PPUSH
61474: CALL_OW 255
61478: PPUSH
61479: LD_VAR 0 1
61483: PPUSH
61484: CALL_OW 250
61488: PPUSH
61489: LD_VAR 0 1
61493: PPUSH
61494: CALL_OW 251
61498: PPUSH
61499: LD_VAR 0 2
61503: PPUSH
61504: CALL 34857 0 4
61508: PUSH
61509: LD_INT 4
61511: ARRAY
61512: ST_TO_ADDR
// end ;
61513: LD_VAR 0 3
61517: RET
// export function PlayerSeeMe ( unit ) ; begin
61518: LD_INT 0
61520: PPUSH
// result := See ( your_side , unit ) ;
61521: LD_ADDR_VAR 0 2
61525: PUSH
61526: LD_OWVAR 2
61530: PPUSH
61531: LD_VAR 0 1
61535: PPUSH
61536: CALL_OW 292
61540: ST_TO_ADDR
// end ;
61541: LD_VAR 0 2
61545: RET
// export function ReverseDir ( unit ) ; begin
61546: LD_INT 0
61548: PPUSH
// if not unit then
61549: LD_VAR 0 1
61553: NOT
61554: IFFALSE 61558
// exit ;
61556: GO 61581
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61558: LD_ADDR_VAR 0 2
61562: PUSH
61563: LD_VAR 0 1
61567: PPUSH
61568: CALL_OW 254
61572: PUSH
61573: LD_INT 3
61575: PLUS
61576: PUSH
61577: LD_INT 6
61579: MOD
61580: ST_TO_ADDR
// end ;
61581: LD_VAR 0 2
61585: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
61586: LD_INT 0
61588: PPUSH
61589: PPUSH
61590: PPUSH
61591: PPUSH
61592: PPUSH
// if not hexes then
61593: LD_VAR 0 2
61597: NOT
61598: IFFALSE 61602
// exit ;
61600: GO 61750
// dist := 9999 ;
61602: LD_ADDR_VAR 0 5
61606: PUSH
61607: LD_INT 9999
61609: ST_TO_ADDR
// for i = 1 to hexes do
61610: LD_ADDR_VAR 0 4
61614: PUSH
61615: DOUBLE
61616: LD_INT 1
61618: DEC
61619: ST_TO_ADDR
61620: LD_VAR 0 2
61624: PUSH
61625: FOR_TO
61626: IFFALSE 61738
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
61628: LD_VAR 0 1
61632: PPUSH
61633: LD_VAR 0 2
61637: PUSH
61638: LD_VAR 0 4
61642: ARRAY
61643: PUSH
61644: LD_INT 1
61646: ARRAY
61647: PPUSH
61648: LD_VAR 0 2
61652: PUSH
61653: LD_VAR 0 4
61657: ARRAY
61658: PUSH
61659: LD_INT 2
61661: ARRAY
61662: PPUSH
61663: CALL_OW 297
61667: PUSH
61668: LD_VAR 0 5
61672: LESS
61673: IFFALSE 61736
// begin hex := hexes [ i ] ;
61675: LD_ADDR_VAR 0 7
61679: PUSH
61680: LD_VAR 0 2
61684: PUSH
61685: LD_VAR 0 4
61689: ARRAY
61690: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61691: LD_ADDR_VAR 0 5
61695: PUSH
61696: LD_VAR 0 1
61700: PPUSH
61701: LD_VAR 0 2
61705: PUSH
61706: LD_VAR 0 4
61710: ARRAY
61711: PUSH
61712: LD_INT 1
61714: ARRAY
61715: PPUSH
61716: LD_VAR 0 2
61720: PUSH
61721: LD_VAR 0 4
61725: ARRAY
61726: PUSH
61727: LD_INT 2
61729: ARRAY
61730: PPUSH
61731: CALL_OW 297
61735: ST_TO_ADDR
// end ; end ;
61736: GO 61625
61738: POP
61739: POP
// result := hex ;
61740: LD_ADDR_VAR 0 3
61744: PUSH
61745: LD_VAR 0 7
61749: ST_TO_ADDR
// end ;
61750: LD_VAR 0 3
61754: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61755: LD_INT 0
61757: PPUSH
61758: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61759: LD_VAR 0 1
61763: NOT
61764: PUSH
61765: LD_VAR 0 1
61769: PUSH
61770: LD_INT 21
61772: PUSH
61773: LD_INT 2
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 23
61782: PUSH
61783: LD_INT 2
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PPUSH
61794: CALL_OW 69
61798: IN
61799: NOT
61800: OR
61801: IFFALSE 61805
// exit ;
61803: GO 61852
// for i = 1 to 3 do
61805: LD_ADDR_VAR 0 3
61809: PUSH
61810: DOUBLE
61811: LD_INT 1
61813: DEC
61814: ST_TO_ADDR
61815: LD_INT 3
61817: PUSH
61818: FOR_TO
61819: IFFALSE 61850
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61821: LD_VAR 0 1
61825: PPUSH
61826: CALL_OW 250
61830: PPUSH
61831: LD_VAR 0 1
61835: PPUSH
61836: CALL_OW 251
61840: PPUSH
61841: LD_INT 1
61843: PPUSH
61844: CALL_OW 453
61848: GO 61818
61850: POP
61851: POP
// end ;
61852: LD_VAR 0 2
61856: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61857: LD_INT 0
61859: PPUSH
61860: PPUSH
61861: PPUSH
61862: PPUSH
61863: PPUSH
61864: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61865: LD_VAR 0 1
61869: NOT
61870: PUSH
61871: LD_VAR 0 2
61875: NOT
61876: OR
61877: PUSH
61878: LD_VAR 0 1
61882: PPUSH
61883: CALL_OW 314
61887: OR
61888: IFFALSE 61892
// exit ;
61890: GO 62333
// x := GetX ( enemy_unit ) ;
61892: LD_ADDR_VAR 0 7
61896: PUSH
61897: LD_VAR 0 2
61901: PPUSH
61902: CALL_OW 250
61906: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61907: LD_ADDR_VAR 0 8
61911: PUSH
61912: LD_VAR 0 2
61916: PPUSH
61917: CALL_OW 251
61921: ST_TO_ADDR
// if not x or not y then
61922: LD_VAR 0 7
61926: NOT
61927: PUSH
61928: LD_VAR 0 8
61932: NOT
61933: OR
61934: IFFALSE 61938
// exit ;
61936: GO 62333
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61938: LD_ADDR_VAR 0 6
61942: PUSH
61943: LD_VAR 0 7
61947: PPUSH
61948: LD_INT 0
61950: PPUSH
61951: LD_INT 4
61953: PPUSH
61954: CALL_OW 272
61958: PUSH
61959: LD_VAR 0 8
61963: PPUSH
61964: LD_INT 0
61966: PPUSH
61967: LD_INT 4
61969: PPUSH
61970: CALL_OW 273
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_VAR 0 7
61983: PPUSH
61984: LD_INT 1
61986: PPUSH
61987: LD_INT 4
61989: PPUSH
61990: CALL_OW 272
61994: PUSH
61995: LD_VAR 0 8
61999: PPUSH
62000: LD_INT 1
62002: PPUSH
62003: LD_INT 4
62005: PPUSH
62006: CALL_OW 273
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_VAR 0 7
62019: PPUSH
62020: LD_INT 2
62022: PPUSH
62023: LD_INT 4
62025: PPUSH
62026: CALL_OW 272
62030: PUSH
62031: LD_VAR 0 8
62035: PPUSH
62036: LD_INT 2
62038: PPUSH
62039: LD_INT 4
62041: PPUSH
62042: CALL_OW 273
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_VAR 0 7
62055: PPUSH
62056: LD_INT 3
62058: PPUSH
62059: LD_INT 4
62061: PPUSH
62062: CALL_OW 272
62066: PUSH
62067: LD_VAR 0 8
62071: PPUSH
62072: LD_INT 3
62074: PPUSH
62075: LD_INT 4
62077: PPUSH
62078: CALL_OW 273
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_VAR 0 7
62091: PPUSH
62092: LD_INT 4
62094: PPUSH
62095: LD_INT 4
62097: PPUSH
62098: CALL_OW 272
62102: PUSH
62103: LD_VAR 0 8
62107: PPUSH
62108: LD_INT 4
62110: PPUSH
62111: LD_INT 4
62113: PPUSH
62114: CALL_OW 273
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_VAR 0 7
62127: PPUSH
62128: LD_INT 5
62130: PPUSH
62131: LD_INT 4
62133: PPUSH
62134: CALL_OW 272
62138: PUSH
62139: LD_VAR 0 8
62143: PPUSH
62144: LD_INT 5
62146: PPUSH
62147: LD_INT 4
62149: PPUSH
62150: CALL_OW 273
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: ST_TO_ADDR
// for i = tmp downto 1 do
62167: LD_ADDR_VAR 0 4
62171: PUSH
62172: DOUBLE
62173: LD_VAR 0 6
62177: INC
62178: ST_TO_ADDR
62179: LD_INT 1
62181: PUSH
62182: FOR_DOWNTO
62183: IFFALSE 62284
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62185: LD_VAR 0 6
62189: PUSH
62190: LD_VAR 0 4
62194: ARRAY
62195: PUSH
62196: LD_INT 1
62198: ARRAY
62199: PPUSH
62200: LD_VAR 0 6
62204: PUSH
62205: LD_VAR 0 4
62209: ARRAY
62210: PUSH
62211: LD_INT 2
62213: ARRAY
62214: PPUSH
62215: CALL_OW 488
62219: NOT
62220: PUSH
62221: LD_VAR 0 6
62225: PUSH
62226: LD_VAR 0 4
62230: ARRAY
62231: PUSH
62232: LD_INT 1
62234: ARRAY
62235: PPUSH
62236: LD_VAR 0 6
62240: PUSH
62241: LD_VAR 0 4
62245: ARRAY
62246: PUSH
62247: LD_INT 2
62249: ARRAY
62250: PPUSH
62251: CALL_OW 428
62255: PUSH
62256: LD_INT 0
62258: NONEQUAL
62259: OR
62260: IFFALSE 62282
// tmp := Delete ( tmp , i ) ;
62262: LD_ADDR_VAR 0 6
62266: PUSH
62267: LD_VAR 0 6
62271: PPUSH
62272: LD_VAR 0 4
62276: PPUSH
62277: CALL_OW 3
62281: ST_TO_ADDR
62282: GO 62182
62284: POP
62285: POP
// j := GetClosestHex ( unit , tmp ) ;
62286: LD_ADDR_VAR 0 5
62290: PUSH
62291: LD_VAR 0 1
62295: PPUSH
62296: LD_VAR 0 6
62300: PPUSH
62301: CALL 61586 0 2
62305: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62306: LD_VAR 0 1
62310: PPUSH
62311: LD_VAR 0 5
62315: PUSH
62316: LD_INT 1
62318: ARRAY
62319: PPUSH
62320: LD_VAR 0 5
62324: PUSH
62325: LD_INT 2
62327: ARRAY
62328: PPUSH
62329: CALL_OW 111
// end ;
62333: LD_VAR 0 3
62337: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62338: LD_INT 0
62340: PPUSH
62341: PPUSH
62342: PPUSH
// uc_side = 0 ;
62343: LD_ADDR_OWVAR 20
62347: PUSH
62348: LD_INT 0
62350: ST_TO_ADDR
// uc_nation = 0 ;
62351: LD_ADDR_OWVAR 21
62355: PUSH
62356: LD_INT 0
62358: ST_TO_ADDR
// InitHc_All ( ) ;
62359: CALL_OW 584
// InitVc ;
62363: CALL_OW 20
// if mastodonts then
62367: LD_VAR 0 6
62371: IFFALSE 62438
// for i = 1 to mastodonts do
62373: LD_ADDR_VAR 0 11
62377: PUSH
62378: DOUBLE
62379: LD_INT 1
62381: DEC
62382: ST_TO_ADDR
62383: LD_VAR 0 6
62387: PUSH
62388: FOR_TO
62389: IFFALSE 62436
// begin vc_chassis := 31 ;
62391: LD_ADDR_OWVAR 37
62395: PUSH
62396: LD_INT 31
62398: ST_TO_ADDR
// vc_control := control_rider ;
62399: LD_ADDR_OWVAR 38
62403: PUSH
62404: LD_INT 4
62406: ST_TO_ADDR
// animal := CreateVehicle ;
62407: LD_ADDR_VAR 0 12
62411: PUSH
62412: CALL_OW 45
62416: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62417: LD_VAR 0 12
62421: PPUSH
62422: LD_VAR 0 8
62426: PPUSH
62427: LD_INT 0
62429: PPUSH
62430: CALL 64626 0 3
// end ;
62434: GO 62388
62436: POP
62437: POP
// if horses then
62438: LD_VAR 0 5
62442: IFFALSE 62509
// for i = 1 to horses do
62444: LD_ADDR_VAR 0 11
62448: PUSH
62449: DOUBLE
62450: LD_INT 1
62452: DEC
62453: ST_TO_ADDR
62454: LD_VAR 0 5
62458: PUSH
62459: FOR_TO
62460: IFFALSE 62507
// begin hc_class := 21 ;
62462: LD_ADDR_OWVAR 28
62466: PUSH
62467: LD_INT 21
62469: ST_TO_ADDR
// hc_gallery :=  ;
62470: LD_ADDR_OWVAR 33
62474: PUSH
62475: LD_STRING 
62477: ST_TO_ADDR
// animal := CreateHuman ;
62478: LD_ADDR_VAR 0 12
62482: PUSH
62483: CALL_OW 44
62487: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62488: LD_VAR 0 12
62492: PPUSH
62493: LD_VAR 0 8
62497: PPUSH
62498: LD_INT 0
62500: PPUSH
62501: CALL 64626 0 3
// end ;
62505: GO 62459
62507: POP
62508: POP
// if birds then
62509: LD_VAR 0 1
62513: IFFALSE 62580
// for i = 1 to birds do
62515: LD_ADDR_VAR 0 11
62519: PUSH
62520: DOUBLE
62521: LD_INT 1
62523: DEC
62524: ST_TO_ADDR
62525: LD_VAR 0 1
62529: PUSH
62530: FOR_TO
62531: IFFALSE 62578
// begin hc_class = 18 ;
62533: LD_ADDR_OWVAR 28
62537: PUSH
62538: LD_INT 18
62540: ST_TO_ADDR
// hc_gallery =  ;
62541: LD_ADDR_OWVAR 33
62545: PUSH
62546: LD_STRING 
62548: ST_TO_ADDR
// animal := CreateHuman ;
62549: LD_ADDR_VAR 0 12
62553: PUSH
62554: CALL_OW 44
62558: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62559: LD_VAR 0 12
62563: PPUSH
62564: LD_VAR 0 8
62568: PPUSH
62569: LD_INT 0
62571: PPUSH
62572: CALL 64626 0 3
// end ;
62576: GO 62530
62578: POP
62579: POP
// if tigers then
62580: LD_VAR 0 2
62584: IFFALSE 62668
// for i = 1 to tigers do
62586: LD_ADDR_VAR 0 11
62590: PUSH
62591: DOUBLE
62592: LD_INT 1
62594: DEC
62595: ST_TO_ADDR
62596: LD_VAR 0 2
62600: PUSH
62601: FOR_TO
62602: IFFALSE 62666
// begin hc_class = class_tiger ;
62604: LD_ADDR_OWVAR 28
62608: PUSH
62609: LD_INT 14
62611: ST_TO_ADDR
// hc_gallery =  ;
62612: LD_ADDR_OWVAR 33
62616: PUSH
62617: LD_STRING 
62619: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62620: LD_ADDR_OWVAR 35
62624: PUSH
62625: LD_INT 7
62627: NEG
62628: PPUSH
62629: LD_INT 7
62631: PPUSH
62632: CALL_OW 12
62636: ST_TO_ADDR
// animal := CreateHuman ;
62637: LD_ADDR_VAR 0 12
62641: PUSH
62642: CALL_OW 44
62646: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62647: LD_VAR 0 12
62651: PPUSH
62652: LD_VAR 0 8
62656: PPUSH
62657: LD_INT 0
62659: PPUSH
62660: CALL 64626 0 3
// end ;
62664: GO 62601
62666: POP
62667: POP
// if apemans then
62668: LD_VAR 0 3
62672: IFFALSE 62795
// for i = 1 to apemans do
62674: LD_ADDR_VAR 0 11
62678: PUSH
62679: DOUBLE
62680: LD_INT 1
62682: DEC
62683: ST_TO_ADDR
62684: LD_VAR 0 3
62688: PUSH
62689: FOR_TO
62690: IFFALSE 62793
// begin hc_class = class_apeman ;
62692: LD_ADDR_OWVAR 28
62696: PUSH
62697: LD_INT 12
62699: ST_TO_ADDR
// hc_gallery =  ;
62700: LD_ADDR_OWVAR 33
62704: PUSH
62705: LD_STRING 
62707: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62708: LD_ADDR_OWVAR 35
62712: PUSH
62713: LD_INT 2
62715: NEG
62716: PPUSH
62717: LD_INT 2
62719: PPUSH
62720: CALL_OW 12
62724: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62725: LD_ADDR_OWVAR 31
62729: PUSH
62730: LD_INT 1
62732: PPUSH
62733: LD_INT 3
62735: PPUSH
62736: CALL_OW 12
62740: PUSH
62741: LD_INT 1
62743: PPUSH
62744: LD_INT 3
62746: PPUSH
62747: CALL_OW 12
62751: PUSH
62752: LD_INT 0
62754: PUSH
62755: LD_INT 0
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: ST_TO_ADDR
// animal := CreateHuman ;
62764: LD_ADDR_VAR 0 12
62768: PUSH
62769: CALL_OW 44
62773: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62774: LD_VAR 0 12
62778: PPUSH
62779: LD_VAR 0 8
62783: PPUSH
62784: LD_INT 0
62786: PPUSH
62787: CALL 64626 0 3
// end ;
62791: GO 62689
62793: POP
62794: POP
// if enchidnas then
62795: LD_VAR 0 4
62799: IFFALSE 62866
// for i = 1 to enchidnas do
62801: LD_ADDR_VAR 0 11
62805: PUSH
62806: DOUBLE
62807: LD_INT 1
62809: DEC
62810: ST_TO_ADDR
62811: LD_VAR 0 4
62815: PUSH
62816: FOR_TO
62817: IFFALSE 62864
// begin hc_class = 13 ;
62819: LD_ADDR_OWVAR 28
62823: PUSH
62824: LD_INT 13
62826: ST_TO_ADDR
// hc_gallery =  ;
62827: LD_ADDR_OWVAR 33
62831: PUSH
62832: LD_STRING 
62834: ST_TO_ADDR
// animal := CreateHuman ;
62835: LD_ADDR_VAR 0 12
62839: PUSH
62840: CALL_OW 44
62844: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62845: LD_VAR 0 12
62849: PPUSH
62850: LD_VAR 0 8
62854: PPUSH
62855: LD_INT 0
62857: PPUSH
62858: CALL 64626 0 3
// end ;
62862: GO 62816
62864: POP
62865: POP
// if fishes then
62866: LD_VAR 0 7
62870: IFFALSE 62937
// for i = 1 to fishes do
62872: LD_ADDR_VAR 0 11
62876: PUSH
62877: DOUBLE
62878: LD_INT 1
62880: DEC
62881: ST_TO_ADDR
62882: LD_VAR 0 7
62886: PUSH
62887: FOR_TO
62888: IFFALSE 62935
// begin hc_class = 20 ;
62890: LD_ADDR_OWVAR 28
62894: PUSH
62895: LD_INT 20
62897: ST_TO_ADDR
// hc_gallery =  ;
62898: LD_ADDR_OWVAR 33
62902: PUSH
62903: LD_STRING 
62905: ST_TO_ADDR
// animal := CreateHuman ;
62906: LD_ADDR_VAR 0 12
62910: PUSH
62911: CALL_OW 44
62915: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62916: LD_VAR 0 12
62920: PPUSH
62921: LD_VAR 0 9
62925: PPUSH
62926: LD_INT 0
62928: PPUSH
62929: CALL 64626 0 3
// end ;
62933: GO 62887
62935: POP
62936: POP
// end ;
62937: LD_VAR 0 10
62941: RET
// export function WantHeal ( sci , unit ) ; begin
62942: LD_INT 0
62944: PPUSH
// if GetTaskList ( sci ) > 0 then
62945: LD_VAR 0 1
62949: PPUSH
62950: CALL_OW 437
62954: PUSH
62955: LD_INT 0
62957: GREATER
62958: IFFALSE 63028
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62960: LD_VAR 0 1
62964: PPUSH
62965: CALL_OW 437
62969: PUSH
62970: LD_INT 1
62972: ARRAY
62973: PUSH
62974: LD_INT 1
62976: ARRAY
62977: PUSH
62978: LD_STRING l
62980: EQUAL
62981: PUSH
62982: LD_VAR 0 1
62986: PPUSH
62987: CALL_OW 437
62991: PUSH
62992: LD_INT 1
62994: ARRAY
62995: PUSH
62996: LD_INT 4
62998: ARRAY
62999: PUSH
63000: LD_VAR 0 2
63004: EQUAL
63005: AND
63006: IFFALSE 63018
// result := true else
63008: LD_ADDR_VAR 0 3
63012: PUSH
63013: LD_INT 1
63015: ST_TO_ADDR
63016: GO 63026
// result := false ;
63018: LD_ADDR_VAR 0 3
63022: PUSH
63023: LD_INT 0
63025: ST_TO_ADDR
// end else
63026: GO 63036
// result := false ;
63028: LD_ADDR_VAR 0 3
63032: PUSH
63033: LD_INT 0
63035: ST_TO_ADDR
// end ;
63036: LD_VAR 0 3
63040: RET
// export function HealTarget ( sci ) ; begin
63041: LD_INT 0
63043: PPUSH
// if not sci then
63044: LD_VAR 0 1
63048: NOT
63049: IFFALSE 63053
// exit ;
63051: GO 63118
// result := 0 ;
63053: LD_ADDR_VAR 0 2
63057: PUSH
63058: LD_INT 0
63060: ST_TO_ADDR
// if GetTaskList ( sci ) then
63061: LD_VAR 0 1
63065: PPUSH
63066: CALL_OW 437
63070: IFFALSE 63118
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63072: LD_VAR 0 1
63076: PPUSH
63077: CALL_OW 437
63081: PUSH
63082: LD_INT 1
63084: ARRAY
63085: PUSH
63086: LD_INT 1
63088: ARRAY
63089: PUSH
63090: LD_STRING l
63092: EQUAL
63093: IFFALSE 63118
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63095: LD_ADDR_VAR 0 2
63099: PUSH
63100: LD_VAR 0 1
63104: PPUSH
63105: CALL_OW 437
63109: PUSH
63110: LD_INT 1
63112: ARRAY
63113: PUSH
63114: LD_INT 4
63116: ARRAY
63117: ST_TO_ADDR
// end ;
63118: LD_VAR 0 2
63122: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63123: LD_INT 0
63125: PPUSH
63126: PPUSH
63127: PPUSH
63128: PPUSH
// if not base_units then
63129: LD_VAR 0 1
63133: NOT
63134: IFFALSE 63138
// exit ;
63136: GO 63225
// result := false ;
63138: LD_ADDR_VAR 0 2
63142: PUSH
63143: LD_INT 0
63145: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63146: LD_ADDR_VAR 0 5
63150: PUSH
63151: LD_VAR 0 1
63155: PPUSH
63156: LD_INT 21
63158: PUSH
63159: LD_INT 3
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PPUSH
63166: CALL_OW 72
63170: ST_TO_ADDR
// if not tmp then
63171: LD_VAR 0 5
63175: NOT
63176: IFFALSE 63180
// exit ;
63178: GO 63225
// for i in tmp do
63180: LD_ADDR_VAR 0 3
63184: PUSH
63185: LD_VAR 0 5
63189: PUSH
63190: FOR_IN
63191: IFFALSE 63223
// begin result := EnemyInRange ( i , 22 ) ;
63193: LD_ADDR_VAR 0 2
63197: PUSH
63198: LD_VAR 0 3
63202: PPUSH
63203: LD_INT 22
63205: PPUSH
63206: CALL 61461 0 2
63210: ST_TO_ADDR
// if result then
63211: LD_VAR 0 2
63215: IFFALSE 63221
// exit ;
63217: POP
63218: POP
63219: GO 63225
// end ;
63221: GO 63190
63223: POP
63224: POP
// end ;
63225: LD_VAR 0 2
63229: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
63230: LD_INT 0
63232: PPUSH
63233: PPUSH
// if not units then
63234: LD_VAR 0 1
63238: NOT
63239: IFFALSE 63243
// exit ;
63241: GO 63313
// result := [ ] ;
63243: LD_ADDR_VAR 0 3
63247: PUSH
63248: EMPTY
63249: ST_TO_ADDR
// for i in units do
63250: LD_ADDR_VAR 0 4
63254: PUSH
63255: LD_VAR 0 1
63259: PUSH
63260: FOR_IN
63261: IFFALSE 63311
// if GetTag ( i ) = tag then
63263: LD_VAR 0 4
63267: PPUSH
63268: CALL_OW 110
63272: PUSH
63273: LD_VAR 0 2
63277: EQUAL
63278: IFFALSE 63309
// result := Replace ( result , result + 1 , i ) ;
63280: LD_ADDR_VAR 0 3
63284: PUSH
63285: LD_VAR 0 3
63289: PPUSH
63290: LD_VAR 0 3
63294: PUSH
63295: LD_INT 1
63297: PLUS
63298: PPUSH
63299: LD_VAR 0 4
63303: PPUSH
63304: CALL_OW 1
63308: ST_TO_ADDR
63309: GO 63260
63311: POP
63312: POP
// end ;
63313: LD_VAR 0 3
63317: RET
// export function IsDriver ( un ) ; begin
63318: LD_INT 0
63320: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63321: LD_ADDR_VAR 0 2
63325: PUSH
63326: LD_VAR 0 1
63330: PUSH
63331: LD_INT 55
63333: PUSH
63334: EMPTY
63335: LIST
63336: PPUSH
63337: CALL_OW 69
63341: IN
63342: ST_TO_ADDR
// end ;
63343: LD_VAR 0 2
63347: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63348: LD_INT 0
63350: PPUSH
63351: PPUSH
// list := [ ] ;
63352: LD_ADDR_VAR 0 5
63356: PUSH
63357: EMPTY
63358: ST_TO_ADDR
// case d of 0 :
63359: LD_VAR 0 3
63363: PUSH
63364: LD_INT 0
63366: DOUBLE
63367: EQUAL
63368: IFTRUE 63372
63370: GO 63505
63372: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63373: LD_ADDR_VAR 0 5
63377: PUSH
63378: LD_VAR 0 1
63382: PUSH
63383: LD_INT 4
63385: MINUS
63386: PUSH
63387: LD_VAR 0 2
63391: PUSH
63392: LD_INT 4
63394: MINUS
63395: PUSH
63396: LD_INT 2
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: LIST
63403: PUSH
63404: LD_VAR 0 1
63408: PUSH
63409: LD_INT 3
63411: MINUS
63412: PUSH
63413: LD_VAR 0 2
63417: PUSH
63418: LD_INT 1
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: LIST
63425: PUSH
63426: LD_VAR 0 1
63430: PUSH
63431: LD_INT 4
63433: PLUS
63434: PUSH
63435: LD_VAR 0 2
63439: PUSH
63440: LD_INT 4
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: LIST
63447: PUSH
63448: LD_VAR 0 1
63452: PUSH
63453: LD_INT 3
63455: PLUS
63456: PUSH
63457: LD_VAR 0 2
63461: PUSH
63462: LD_INT 3
63464: PLUS
63465: PUSH
63466: LD_INT 5
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: LIST
63473: PUSH
63474: LD_VAR 0 1
63478: PUSH
63479: LD_VAR 0 2
63483: PUSH
63484: LD_INT 4
63486: PLUS
63487: PUSH
63488: LD_INT 0
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: LIST
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: ST_TO_ADDR
// end ; 1 :
63503: GO 64203
63505: LD_INT 1
63507: DOUBLE
63508: EQUAL
63509: IFTRUE 63513
63511: GO 63646
63513: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63514: LD_ADDR_VAR 0 5
63518: PUSH
63519: LD_VAR 0 1
63523: PUSH
63524: LD_VAR 0 2
63528: PUSH
63529: LD_INT 4
63531: MINUS
63532: PUSH
63533: LD_INT 3
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: LIST
63540: PUSH
63541: LD_VAR 0 1
63545: PUSH
63546: LD_INT 3
63548: MINUS
63549: PUSH
63550: LD_VAR 0 2
63554: PUSH
63555: LD_INT 3
63557: MINUS
63558: PUSH
63559: LD_INT 2
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: LIST
63566: PUSH
63567: LD_VAR 0 1
63571: PUSH
63572: LD_INT 4
63574: MINUS
63575: PUSH
63576: LD_VAR 0 2
63580: PUSH
63581: LD_INT 1
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: LIST
63588: PUSH
63589: LD_VAR 0 1
63593: PUSH
63594: LD_VAR 0 2
63598: PUSH
63599: LD_INT 3
63601: PLUS
63602: PUSH
63603: LD_INT 0
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: LIST
63610: PUSH
63611: LD_VAR 0 1
63615: PUSH
63616: LD_INT 4
63618: PLUS
63619: PUSH
63620: LD_VAR 0 2
63624: PUSH
63625: LD_INT 4
63627: PLUS
63628: PUSH
63629: LD_INT 5
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: LIST
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: ST_TO_ADDR
// end ; 2 :
63644: GO 64203
63646: LD_INT 2
63648: DOUBLE
63649: EQUAL
63650: IFTRUE 63654
63652: GO 63783
63654: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63655: LD_ADDR_VAR 0 5
63659: PUSH
63660: LD_VAR 0 1
63664: PUSH
63665: LD_VAR 0 2
63669: PUSH
63670: LD_INT 3
63672: MINUS
63673: PUSH
63674: LD_INT 3
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: LIST
63681: PUSH
63682: LD_VAR 0 1
63686: PUSH
63687: LD_INT 4
63689: PLUS
63690: PUSH
63691: LD_VAR 0 2
63695: PUSH
63696: LD_INT 4
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: LIST
63703: PUSH
63704: LD_VAR 0 1
63708: PUSH
63709: LD_VAR 0 2
63713: PUSH
63714: LD_INT 4
63716: PLUS
63717: PUSH
63718: LD_INT 0
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: LIST
63725: PUSH
63726: LD_VAR 0 1
63730: PUSH
63731: LD_INT 3
63733: MINUS
63734: PUSH
63735: LD_VAR 0 2
63739: PUSH
63740: LD_INT 1
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: LIST
63747: PUSH
63748: LD_VAR 0 1
63752: PUSH
63753: LD_INT 4
63755: MINUS
63756: PUSH
63757: LD_VAR 0 2
63761: PUSH
63762: LD_INT 4
63764: MINUS
63765: PUSH
63766: LD_INT 2
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: LIST
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: ST_TO_ADDR
// end ; 3 :
63781: GO 64203
63783: LD_INT 3
63785: DOUBLE
63786: EQUAL
63787: IFTRUE 63791
63789: GO 63924
63791: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63792: LD_ADDR_VAR 0 5
63796: PUSH
63797: LD_VAR 0 1
63801: PUSH
63802: LD_INT 3
63804: PLUS
63805: PUSH
63806: LD_VAR 0 2
63810: PUSH
63811: LD_INT 4
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: LIST
63818: PUSH
63819: LD_VAR 0 1
63823: PUSH
63824: LD_INT 4
63826: PLUS
63827: PUSH
63828: LD_VAR 0 2
63832: PUSH
63833: LD_INT 4
63835: PLUS
63836: PUSH
63837: LD_INT 5
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: LIST
63844: PUSH
63845: LD_VAR 0 1
63849: PUSH
63850: LD_INT 4
63852: MINUS
63853: PUSH
63854: LD_VAR 0 2
63858: PUSH
63859: LD_INT 1
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: LIST
63866: PUSH
63867: LD_VAR 0 1
63871: PUSH
63872: LD_VAR 0 2
63876: PUSH
63877: LD_INT 4
63879: MINUS
63880: PUSH
63881: LD_INT 3
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: LIST
63888: PUSH
63889: LD_VAR 0 1
63893: PUSH
63894: LD_INT 3
63896: MINUS
63897: PUSH
63898: LD_VAR 0 2
63902: PUSH
63903: LD_INT 3
63905: MINUS
63906: PUSH
63907: LD_INT 2
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: LIST
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: ST_TO_ADDR
// end ; 4 :
63922: GO 64203
63924: LD_INT 4
63926: DOUBLE
63927: EQUAL
63928: IFTRUE 63932
63930: GO 64065
63932: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63933: LD_ADDR_VAR 0 5
63937: PUSH
63938: LD_VAR 0 1
63942: PUSH
63943: LD_VAR 0 2
63947: PUSH
63948: LD_INT 4
63950: PLUS
63951: PUSH
63952: LD_INT 0
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: LIST
63959: PUSH
63960: LD_VAR 0 1
63964: PUSH
63965: LD_INT 3
63967: PLUS
63968: PUSH
63969: LD_VAR 0 2
63973: PUSH
63974: LD_INT 3
63976: PLUS
63977: PUSH
63978: LD_INT 5
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: LIST
63985: PUSH
63986: LD_VAR 0 1
63990: PUSH
63991: LD_INT 4
63993: PLUS
63994: PUSH
63995: LD_VAR 0 2
63999: PUSH
64000: LD_INT 4
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: LIST
64007: PUSH
64008: LD_VAR 0 1
64012: PUSH
64013: LD_VAR 0 2
64017: PUSH
64018: LD_INT 3
64020: MINUS
64021: PUSH
64022: LD_INT 3
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: LIST
64029: PUSH
64030: LD_VAR 0 1
64034: PUSH
64035: LD_INT 4
64037: MINUS
64038: PUSH
64039: LD_VAR 0 2
64043: PUSH
64044: LD_INT 4
64046: MINUS
64047: PUSH
64048: LD_INT 2
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: LIST
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: ST_TO_ADDR
// end ; 5 :
64063: GO 64203
64065: LD_INT 5
64067: DOUBLE
64068: EQUAL
64069: IFTRUE 64073
64071: GO 64202
64073: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64074: LD_ADDR_VAR 0 5
64078: PUSH
64079: LD_VAR 0 1
64083: PUSH
64084: LD_INT 4
64086: MINUS
64087: PUSH
64088: LD_VAR 0 2
64092: PUSH
64093: LD_INT 1
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: LIST
64100: PUSH
64101: LD_VAR 0 1
64105: PUSH
64106: LD_VAR 0 2
64110: PUSH
64111: LD_INT 4
64113: MINUS
64114: PUSH
64115: LD_INT 3
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: LIST
64122: PUSH
64123: LD_VAR 0 1
64127: PUSH
64128: LD_INT 4
64130: PLUS
64131: PUSH
64132: LD_VAR 0 2
64136: PUSH
64137: LD_INT 4
64139: PLUS
64140: PUSH
64141: LD_INT 5
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: LIST
64148: PUSH
64149: LD_VAR 0 1
64153: PUSH
64154: LD_INT 3
64156: PLUS
64157: PUSH
64158: LD_VAR 0 2
64162: PUSH
64163: LD_INT 4
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: LIST
64170: PUSH
64171: LD_VAR 0 1
64175: PUSH
64176: LD_VAR 0 2
64180: PUSH
64181: LD_INT 3
64183: PLUS
64184: PUSH
64185: LD_INT 0
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: LIST
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: ST_TO_ADDR
// end ; end ;
64200: GO 64203
64202: POP
// result := list ;
64203: LD_ADDR_VAR 0 4
64207: PUSH
64208: LD_VAR 0 5
64212: ST_TO_ADDR
// end ;
64213: LD_VAR 0 4
64217: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64218: LD_INT 0
64220: PPUSH
64221: PPUSH
64222: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64223: LD_VAR 0 1
64227: NOT
64228: PUSH
64229: LD_VAR 0 2
64233: PUSH
64234: LD_INT 1
64236: PUSH
64237: LD_INT 2
64239: PUSH
64240: LD_INT 3
64242: PUSH
64243: LD_INT 4
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: LIST
64250: LIST
64251: IN
64252: NOT
64253: OR
64254: IFFALSE 64258
// exit ;
64256: GO 64350
// tmp := [ ] ;
64258: LD_ADDR_VAR 0 5
64262: PUSH
64263: EMPTY
64264: ST_TO_ADDR
// for i in units do
64265: LD_ADDR_VAR 0 4
64269: PUSH
64270: LD_VAR 0 1
64274: PUSH
64275: FOR_IN
64276: IFFALSE 64319
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64278: LD_ADDR_VAR 0 5
64282: PUSH
64283: LD_VAR 0 5
64287: PPUSH
64288: LD_VAR 0 5
64292: PUSH
64293: LD_INT 1
64295: PLUS
64296: PPUSH
64297: LD_VAR 0 4
64301: PPUSH
64302: LD_VAR 0 2
64306: PPUSH
64307: CALL_OW 259
64311: PPUSH
64312: CALL_OW 2
64316: ST_TO_ADDR
64317: GO 64275
64319: POP
64320: POP
// if not tmp then
64321: LD_VAR 0 5
64325: NOT
64326: IFFALSE 64330
// exit ;
64328: GO 64350
// result := SortListByListDesc ( units , tmp ) ;
64330: LD_ADDR_VAR 0 3
64334: PUSH
64335: LD_VAR 0 1
64339: PPUSH
64340: LD_VAR 0 5
64344: PPUSH
64345: CALL_OW 77
64349: ST_TO_ADDR
// end ;
64350: LD_VAR 0 3
64354: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64355: LD_INT 0
64357: PPUSH
64358: PPUSH
64359: PPUSH
// result := false ;
64360: LD_ADDR_VAR 0 3
64364: PUSH
64365: LD_INT 0
64367: ST_TO_ADDR
// x := GetX ( building ) ;
64368: LD_ADDR_VAR 0 4
64372: PUSH
64373: LD_VAR 0 2
64377: PPUSH
64378: CALL_OW 250
64382: ST_TO_ADDR
// y := GetY ( building ) ;
64383: LD_ADDR_VAR 0 5
64387: PUSH
64388: LD_VAR 0 2
64392: PPUSH
64393: CALL_OW 251
64397: ST_TO_ADDR
// if not building or not x or not y then
64398: LD_VAR 0 2
64402: NOT
64403: PUSH
64404: LD_VAR 0 4
64408: NOT
64409: OR
64410: PUSH
64411: LD_VAR 0 5
64415: NOT
64416: OR
64417: IFFALSE 64421
// exit ;
64419: GO 64513
// if GetTaskList ( unit ) then
64421: LD_VAR 0 1
64425: PPUSH
64426: CALL_OW 437
64430: IFFALSE 64513
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64432: LD_STRING e
64434: PUSH
64435: LD_VAR 0 1
64439: PPUSH
64440: CALL_OW 437
64444: PUSH
64445: LD_INT 1
64447: ARRAY
64448: PUSH
64449: LD_INT 1
64451: ARRAY
64452: EQUAL
64453: PUSH
64454: LD_VAR 0 4
64458: PUSH
64459: LD_VAR 0 1
64463: PPUSH
64464: CALL_OW 437
64468: PUSH
64469: LD_INT 1
64471: ARRAY
64472: PUSH
64473: LD_INT 2
64475: ARRAY
64476: EQUAL
64477: AND
64478: PUSH
64479: LD_VAR 0 5
64483: PUSH
64484: LD_VAR 0 1
64488: PPUSH
64489: CALL_OW 437
64493: PUSH
64494: LD_INT 1
64496: ARRAY
64497: PUSH
64498: LD_INT 3
64500: ARRAY
64501: EQUAL
64502: AND
64503: IFFALSE 64513
// result := true end ;
64505: LD_ADDR_VAR 0 3
64509: PUSH
64510: LD_INT 1
64512: ST_TO_ADDR
// end ;
64513: LD_VAR 0 3
64517: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64518: LD_INT 0
64520: PPUSH
// result := false ;
64521: LD_ADDR_VAR 0 4
64525: PUSH
64526: LD_INT 0
64528: ST_TO_ADDR
// if GetTaskList ( unit ) then
64529: LD_VAR 0 1
64533: PPUSH
64534: CALL_OW 437
64538: IFFALSE 64621
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64540: LD_STRING M
64542: PUSH
64543: LD_VAR 0 1
64547: PPUSH
64548: CALL_OW 437
64552: PUSH
64553: LD_INT 1
64555: ARRAY
64556: PUSH
64557: LD_INT 1
64559: ARRAY
64560: EQUAL
64561: PUSH
64562: LD_VAR 0 2
64566: PUSH
64567: LD_VAR 0 1
64571: PPUSH
64572: CALL_OW 437
64576: PUSH
64577: LD_INT 1
64579: ARRAY
64580: PUSH
64581: LD_INT 2
64583: ARRAY
64584: EQUAL
64585: AND
64586: PUSH
64587: LD_VAR 0 3
64591: PUSH
64592: LD_VAR 0 1
64596: PPUSH
64597: CALL_OW 437
64601: PUSH
64602: LD_INT 1
64604: ARRAY
64605: PUSH
64606: LD_INT 3
64608: ARRAY
64609: EQUAL
64610: AND
64611: IFFALSE 64621
// result := true ;
64613: LD_ADDR_VAR 0 4
64617: PUSH
64618: LD_INT 1
64620: ST_TO_ADDR
// end ; end ;
64621: LD_VAR 0 4
64625: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64626: LD_INT 0
64628: PPUSH
64629: PPUSH
64630: PPUSH
64631: PPUSH
// if not unit or not area then
64632: LD_VAR 0 1
64636: NOT
64637: PUSH
64638: LD_VAR 0 2
64642: NOT
64643: OR
64644: IFFALSE 64648
// exit ;
64646: GO 64812
// tmp := AreaToList ( area , i ) ;
64648: LD_ADDR_VAR 0 6
64652: PUSH
64653: LD_VAR 0 2
64657: PPUSH
64658: LD_VAR 0 5
64662: PPUSH
64663: CALL_OW 517
64667: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64668: LD_ADDR_VAR 0 5
64672: PUSH
64673: DOUBLE
64674: LD_INT 1
64676: DEC
64677: ST_TO_ADDR
64678: LD_VAR 0 6
64682: PUSH
64683: LD_INT 1
64685: ARRAY
64686: PUSH
64687: FOR_TO
64688: IFFALSE 64810
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64690: LD_ADDR_VAR 0 7
64694: PUSH
64695: LD_VAR 0 6
64699: PUSH
64700: LD_INT 1
64702: ARRAY
64703: PUSH
64704: LD_VAR 0 5
64708: ARRAY
64709: PUSH
64710: LD_VAR 0 6
64714: PUSH
64715: LD_INT 2
64717: ARRAY
64718: PUSH
64719: LD_VAR 0 5
64723: ARRAY
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64729: LD_VAR 0 7
64733: PUSH
64734: LD_INT 1
64736: ARRAY
64737: PPUSH
64738: LD_VAR 0 7
64742: PUSH
64743: LD_INT 2
64745: ARRAY
64746: PPUSH
64747: CALL_OW 428
64751: PUSH
64752: LD_INT 0
64754: EQUAL
64755: IFFALSE 64808
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64757: LD_VAR 0 1
64761: PPUSH
64762: LD_VAR 0 7
64766: PUSH
64767: LD_INT 1
64769: ARRAY
64770: PPUSH
64771: LD_VAR 0 7
64775: PUSH
64776: LD_INT 2
64778: ARRAY
64779: PPUSH
64780: LD_VAR 0 3
64784: PPUSH
64785: CALL_OW 48
// result := IsPlaced ( unit ) ;
64789: LD_ADDR_VAR 0 4
64793: PUSH
64794: LD_VAR 0 1
64798: PPUSH
64799: CALL_OW 305
64803: ST_TO_ADDR
// exit ;
64804: POP
64805: POP
64806: GO 64812
// end ; end ;
64808: GO 64687
64810: POP
64811: POP
// end ;
64812: LD_VAR 0 4
64816: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64817: LD_INT 0
64819: PPUSH
64820: PPUSH
64821: PPUSH
// if not side or side > 8 then
64822: LD_VAR 0 1
64826: NOT
64827: PUSH
64828: LD_VAR 0 1
64832: PUSH
64833: LD_INT 8
64835: GREATER
64836: OR
64837: IFFALSE 64841
// exit ;
64839: GO 65028
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64841: LD_ADDR_VAR 0 4
64845: PUSH
64846: LD_INT 22
64848: PUSH
64849: LD_VAR 0 1
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 21
64860: PUSH
64861: LD_INT 3
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PPUSH
64872: CALL_OW 69
64876: ST_TO_ADDR
// if not tmp then
64877: LD_VAR 0 4
64881: NOT
64882: IFFALSE 64886
// exit ;
64884: GO 65028
// enable_addtolog := true ;
64886: LD_ADDR_OWVAR 81
64890: PUSH
64891: LD_INT 1
64893: ST_TO_ADDR
// AddToLog ( [ ) ;
64894: LD_STRING [
64896: PPUSH
64897: CALL_OW 561
// for i in tmp do
64901: LD_ADDR_VAR 0 3
64905: PUSH
64906: LD_VAR 0 4
64910: PUSH
64911: FOR_IN
64912: IFFALSE 65019
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64914: LD_STRING [
64916: PUSH
64917: LD_VAR 0 3
64921: PPUSH
64922: CALL_OW 266
64926: STR
64927: PUSH
64928: LD_STRING , 
64930: STR
64931: PUSH
64932: LD_VAR 0 3
64936: PPUSH
64937: CALL_OW 250
64941: STR
64942: PUSH
64943: LD_STRING , 
64945: STR
64946: PUSH
64947: LD_VAR 0 3
64951: PPUSH
64952: CALL_OW 251
64956: STR
64957: PUSH
64958: LD_STRING , 
64960: STR
64961: PUSH
64962: LD_VAR 0 3
64966: PPUSH
64967: CALL_OW 254
64971: STR
64972: PUSH
64973: LD_STRING , 
64975: STR
64976: PUSH
64977: LD_VAR 0 3
64981: PPUSH
64982: LD_INT 1
64984: PPUSH
64985: CALL_OW 268
64989: STR
64990: PUSH
64991: LD_STRING , 
64993: STR
64994: PUSH
64995: LD_VAR 0 3
64999: PPUSH
65000: LD_INT 2
65002: PPUSH
65003: CALL_OW 268
65007: STR
65008: PUSH
65009: LD_STRING ],
65011: STR
65012: PPUSH
65013: CALL_OW 561
// end ;
65017: GO 64911
65019: POP
65020: POP
// AddToLog ( ]; ) ;
65021: LD_STRING ];
65023: PPUSH
65024: CALL_OW 561
// end ;
65028: LD_VAR 0 2
65032: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65033: LD_INT 0
65035: PPUSH
65036: PPUSH
65037: PPUSH
65038: PPUSH
65039: PPUSH
// if not area or not rate or not max then
65040: LD_VAR 0 1
65044: NOT
65045: PUSH
65046: LD_VAR 0 2
65050: NOT
65051: OR
65052: PUSH
65053: LD_VAR 0 4
65057: NOT
65058: OR
65059: IFFALSE 65063
// exit ;
65061: GO 65255
// while 1 do
65063: LD_INT 1
65065: IFFALSE 65255
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65067: LD_ADDR_VAR 0 9
65071: PUSH
65072: LD_VAR 0 1
65076: PPUSH
65077: LD_INT 1
65079: PPUSH
65080: CALL_OW 287
65084: PUSH
65085: LD_INT 10
65087: MUL
65088: ST_TO_ADDR
// r := rate / 10 ;
65089: LD_ADDR_VAR 0 7
65093: PUSH
65094: LD_VAR 0 2
65098: PUSH
65099: LD_INT 10
65101: DIVREAL
65102: ST_TO_ADDR
// time := 1 1$00 ;
65103: LD_ADDR_VAR 0 8
65107: PUSH
65108: LD_INT 2100
65110: ST_TO_ADDR
// if amount < min then
65111: LD_VAR 0 9
65115: PUSH
65116: LD_VAR 0 3
65120: LESS
65121: IFFALSE 65139
// r := r * 2 else
65123: LD_ADDR_VAR 0 7
65127: PUSH
65128: LD_VAR 0 7
65132: PUSH
65133: LD_INT 2
65135: MUL
65136: ST_TO_ADDR
65137: GO 65165
// if amount > max then
65139: LD_VAR 0 9
65143: PUSH
65144: LD_VAR 0 4
65148: GREATER
65149: IFFALSE 65165
// r := r / 2 ;
65151: LD_ADDR_VAR 0 7
65155: PUSH
65156: LD_VAR 0 7
65160: PUSH
65161: LD_INT 2
65163: DIVREAL
65164: ST_TO_ADDR
// time := time / r ;
65165: LD_ADDR_VAR 0 8
65169: PUSH
65170: LD_VAR 0 8
65174: PUSH
65175: LD_VAR 0 7
65179: DIVREAL
65180: ST_TO_ADDR
// if time < 0 then
65181: LD_VAR 0 8
65185: PUSH
65186: LD_INT 0
65188: LESS
65189: IFFALSE 65206
// time := time * - 1 ;
65191: LD_ADDR_VAR 0 8
65195: PUSH
65196: LD_VAR 0 8
65200: PUSH
65201: LD_INT 1
65203: NEG
65204: MUL
65205: ST_TO_ADDR
// wait ( time ) ;
65206: LD_VAR 0 8
65210: PPUSH
65211: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
65215: LD_INT 35
65217: PPUSH
65218: LD_INT 875
65220: PPUSH
65221: CALL_OW 12
65225: PPUSH
65226: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65230: LD_INT 1
65232: PPUSH
65233: LD_INT 5
65235: PPUSH
65236: CALL_OW 12
65240: PPUSH
65241: LD_VAR 0 1
65245: PPUSH
65246: LD_INT 1
65248: PPUSH
65249: CALL_OW 55
// end ;
65253: GO 65063
// end ;
65255: LD_VAR 0 5
65259: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65260: LD_INT 0
65262: PPUSH
65263: PPUSH
65264: PPUSH
65265: PPUSH
65266: PPUSH
65267: PPUSH
65268: PPUSH
65269: PPUSH
// if not turrets or not factories then
65270: LD_VAR 0 1
65274: NOT
65275: PUSH
65276: LD_VAR 0 2
65280: NOT
65281: OR
65282: IFFALSE 65286
// exit ;
65284: GO 65593
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65286: LD_ADDR_VAR 0 10
65290: PUSH
65291: LD_INT 5
65293: PUSH
65294: LD_INT 6
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: LD_INT 2
65303: PUSH
65304: LD_INT 4
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: LD_INT 3
65313: PUSH
65314: LD_INT 5
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 24
65328: PUSH
65329: LD_INT 25
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: LD_INT 23
65338: PUSH
65339: LD_INT 27
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 42
65352: PUSH
65353: LD_INT 43
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 44
65362: PUSH
65363: LD_INT 46
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 45
65372: PUSH
65373: LD_INT 47
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: LIST
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: LIST
65389: ST_TO_ADDR
// result := [ ] ;
65390: LD_ADDR_VAR 0 3
65394: PUSH
65395: EMPTY
65396: ST_TO_ADDR
// for i in turrets do
65397: LD_ADDR_VAR 0 4
65401: PUSH
65402: LD_VAR 0 1
65406: PUSH
65407: FOR_IN
65408: IFFALSE 65591
// begin nat := GetNation ( i ) ;
65410: LD_ADDR_VAR 0 7
65414: PUSH
65415: LD_VAR 0 4
65419: PPUSH
65420: CALL_OW 248
65424: ST_TO_ADDR
// weapon := 0 ;
65425: LD_ADDR_VAR 0 8
65429: PUSH
65430: LD_INT 0
65432: ST_TO_ADDR
// if not nat then
65433: LD_VAR 0 7
65437: NOT
65438: IFFALSE 65442
// continue ;
65440: GO 65407
// for j in list [ nat ] do
65442: LD_ADDR_VAR 0 5
65446: PUSH
65447: LD_VAR 0 10
65451: PUSH
65452: LD_VAR 0 7
65456: ARRAY
65457: PUSH
65458: FOR_IN
65459: IFFALSE 65500
// if GetBWeapon ( i ) = j [ 1 ] then
65461: LD_VAR 0 4
65465: PPUSH
65466: CALL_OW 269
65470: PUSH
65471: LD_VAR 0 5
65475: PUSH
65476: LD_INT 1
65478: ARRAY
65479: EQUAL
65480: IFFALSE 65498
// begin weapon := j [ 2 ] ;
65482: LD_ADDR_VAR 0 8
65486: PUSH
65487: LD_VAR 0 5
65491: PUSH
65492: LD_INT 2
65494: ARRAY
65495: ST_TO_ADDR
// break ;
65496: GO 65500
// end ;
65498: GO 65458
65500: POP
65501: POP
// if not weapon then
65502: LD_VAR 0 8
65506: NOT
65507: IFFALSE 65511
// continue ;
65509: GO 65407
// for k in factories do
65511: LD_ADDR_VAR 0 6
65515: PUSH
65516: LD_VAR 0 2
65520: PUSH
65521: FOR_IN
65522: IFFALSE 65587
// begin weapons := AvailableWeaponList ( k ) ;
65524: LD_ADDR_VAR 0 9
65528: PUSH
65529: LD_VAR 0 6
65533: PPUSH
65534: CALL_OW 478
65538: ST_TO_ADDR
// if not weapons then
65539: LD_VAR 0 9
65543: NOT
65544: IFFALSE 65548
// continue ;
65546: GO 65521
// if weapon in weapons then
65548: LD_VAR 0 8
65552: PUSH
65553: LD_VAR 0 9
65557: IN
65558: IFFALSE 65585
// begin result := [ i , weapon ] ;
65560: LD_ADDR_VAR 0 3
65564: PUSH
65565: LD_VAR 0 4
65569: PUSH
65570: LD_VAR 0 8
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: ST_TO_ADDR
// exit ;
65579: POP
65580: POP
65581: POP
65582: POP
65583: GO 65593
// end ; end ;
65585: GO 65521
65587: POP
65588: POP
// end ;
65589: GO 65407
65591: POP
65592: POP
// end ;
65593: LD_VAR 0 3
65597: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65598: LD_INT 0
65600: PPUSH
// if not side or side > 8 then
65601: LD_VAR 0 3
65605: NOT
65606: PUSH
65607: LD_VAR 0 3
65611: PUSH
65612: LD_INT 8
65614: GREATER
65615: OR
65616: IFFALSE 65620
// exit ;
65618: GO 65679
// if not range then
65620: LD_VAR 0 4
65624: NOT
65625: IFFALSE 65636
// range := - 12 ;
65627: LD_ADDR_VAR 0 4
65631: PUSH
65632: LD_INT 12
65634: NEG
65635: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65636: LD_VAR 0 1
65640: PPUSH
65641: LD_VAR 0 2
65645: PPUSH
65646: LD_VAR 0 3
65650: PPUSH
65651: LD_VAR 0 4
65655: PPUSH
65656: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65660: LD_VAR 0 1
65664: PPUSH
65665: LD_VAR 0 2
65669: PPUSH
65670: LD_VAR 0 3
65674: PPUSH
65675: CALL_OW 331
// end ;
65679: LD_VAR 0 5
65683: RET
// export function Video ( mode ) ; begin
65684: LD_INT 0
65686: PPUSH
// ingame_video = mode ;
65687: LD_ADDR_OWVAR 52
65691: PUSH
65692: LD_VAR 0 1
65696: ST_TO_ADDR
// interface_hidden = mode ;
65697: LD_ADDR_OWVAR 54
65701: PUSH
65702: LD_VAR 0 1
65706: ST_TO_ADDR
// end ;
65707: LD_VAR 0 2
65711: RET
// export function Join ( array , element ) ; begin
65712: LD_INT 0
65714: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65715: LD_ADDR_VAR 0 3
65719: PUSH
65720: LD_VAR 0 1
65724: PPUSH
65725: LD_VAR 0 1
65729: PUSH
65730: LD_INT 1
65732: PLUS
65733: PPUSH
65734: LD_VAR 0 2
65738: PPUSH
65739: CALL_OW 1
65743: ST_TO_ADDR
// end ;
65744: LD_VAR 0 3
65748: RET
// export function JoinUnion ( array , element ) ; begin
65749: LD_INT 0
65751: PPUSH
// result := array union element ;
65752: LD_ADDR_VAR 0 3
65756: PUSH
65757: LD_VAR 0 1
65761: PUSH
65762: LD_VAR 0 2
65766: UNION
65767: ST_TO_ADDR
// end ;
65768: LD_VAR 0 3
65772: RET
// export function GetBehemoths ( side ) ; begin
65773: LD_INT 0
65775: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
65776: LD_ADDR_VAR 0 2
65780: PUSH
65781: LD_INT 22
65783: PUSH
65784: LD_VAR 0 1
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: LD_INT 31
65795: PUSH
65796: LD_INT 25
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PPUSH
65807: CALL_OW 69
65811: ST_TO_ADDR
// end ;
65812: LD_VAR 0 2
65816: RET
// export function Shuffle ( array ) ; var i , index ; begin
65817: LD_INT 0
65819: PPUSH
65820: PPUSH
65821: PPUSH
// result := [ ] ;
65822: LD_ADDR_VAR 0 2
65826: PUSH
65827: EMPTY
65828: ST_TO_ADDR
// if not array then
65829: LD_VAR 0 1
65833: NOT
65834: IFFALSE 65838
// exit ;
65836: GO 65937
// Randomize ;
65838: CALL_OW 10
// for i = array downto 1 do
65842: LD_ADDR_VAR 0 3
65846: PUSH
65847: DOUBLE
65848: LD_VAR 0 1
65852: INC
65853: ST_TO_ADDR
65854: LD_INT 1
65856: PUSH
65857: FOR_DOWNTO
65858: IFFALSE 65935
// begin index := rand ( 1 , array ) ;
65860: LD_ADDR_VAR 0 4
65864: PUSH
65865: LD_INT 1
65867: PPUSH
65868: LD_VAR 0 1
65872: PPUSH
65873: CALL_OW 12
65877: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65878: LD_ADDR_VAR 0 2
65882: PUSH
65883: LD_VAR 0 2
65887: PPUSH
65888: LD_VAR 0 2
65892: PUSH
65893: LD_INT 1
65895: PLUS
65896: PPUSH
65897: LD_VAR 0 1
65901: PUSH
65902: LD_VAR 0 4
65906: ARRAY
65907: PPUSH
65908: CALL_OW 2
65912: ST_TO_ADDR
// array := Delete ( array , index ) ;
65913: LD_ADDR_VAR 0 1
65917: PUSH
65918: LD_VAR 0 1
65922: PPUSH
65923: LD_VAR 0 4
65927: PPUSH
65928: CALL_OW 3
65932: ST_TO_ADDR
// end ;
65933: GO 65857
65935: POP
65936: POP
// end ;
65937: LD_VAR 0 2
65941: RET
// export function GetBaseMaterials ( base ) ; begin
65942: LD_INT 0
65944: PPUSH
// result := [ 0 , 0 , 0 ] ;
65945: LD_ADDR_VAR 0 2
65949: PUSH
65950: LD_INT 0
65952: PUSH
65953: LD_INT 0
65955: PUSH
65956: LD_INT 0
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: LIST
65963: ST_TO_ADDR
// if not base then
65964: LD_VAR 0 1
65968: NOT
65969: IFFALSE 65973
// exit ;
65971: GO 66022
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65973: LD_ADDR_VAR 0 2
65977: PUSH
65978: LD_VAR 0 1
65982: PPUSH
65983: LD_INT 1
65985: PPUSH
65986: CALL_OW 275
65990: PUSH
65991: LD_VAR 0 1
65995: PPUSH
65996: LD_INT 2
65998: PPUSH
65999: CALL_OW 275
66003: PUSH
66004: LD_VAR 0 1
66008: PPUSH
66009: LD_INT 3
66011: PPUSH
66012: CALL_OW 275
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: LIST
66021: ST_TO_ADDR
// end ;
66022: LD_VAR 0 2
66026: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66027: LD_INT 0
66029: PPUSH
66030: PPUSH
// result := array ;
66031: LD_ADDR_VAR 0 3
66035: PUSH
66036: LD_VAR 0 1
66040: ST_TO_ADDR
// if size > 0 then
66041: LD_VAR 0 2
66045: PUSH
66046: LD_INT 0
66048: GREATER
66049: IFFALSE 66095
// for i := array downto size do
66051: LD_ADDR_VAR 0 4
66055: PUSH
66056: DOUBLE
66057: LD_VAR 0 1
66061: INC
66062: ST_TO_ADDR
66063: LD_VAR 0 2
66067: PUSH
66068: FOR_DOWNTO
66069: IFFALSE 66093
// result := Delete ( result , result ) ;
66071: LD_ADDR_VAR 0 3
66075: PUSH
66076: LD_VAR 0 3
66080: PPUSH
66081: LD_VAR 0 3
66085: PPUSH
66086: CALL_OW 3
66090: ST_TO_ADDR
66091: GO 66068
66093: POP
66094: POP
// end ;
66095: LD_VAR 0 3
66099: RET
// export function ComExit ( unit ) ; var tmp ; begin
66100: LD_INT 0
66102: PPUSH
66103: PPUSH
// if not IsInUnit ( unit ) then
66104: LD_VAR 0 1
66108: PPUSH
66109: CALL_OW 310
66113: NOT
66114: IFFALSE 66118
// exit ;
66116: GO 66178
// tmp := IsInUnit ( unit ) ;
66118: LD_ADDR_VAR 0 3
66122: PUSH
66123: LD_VAR 0 1
66127: PPUSH
66128: CALL_OW 310
66132: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66133: LD_VAR 0 3
66137: PPUSH
66138: CALL_OW 247
66142: PUSH
66143: LD_INT 2
66145: EQUAL
66146: IFFALSE 66159
// ComExitVehicle ( unit ) else
66148: LD_VAR 0 1
66152: PPUSH
66153: CALL_OW 121
66157: GO 66168
// ComExitBuilding ( unit ) ;
66159: LD_VAR 0 1
66163: PPUSH
66164: CALL_OW 122
// result := tmp ;
66168: LD_ADDR_VAR 0 2
66172: PUSH
66173: LD_VAR 0 3
66177: ST_TO_ADDR
// end ;
66178: LD_VAR 0 2
66182: RET
// export function ComExitAll ( units ) ; var i ; begin
66183: LD_INT 0
66185: PPUSH
66186: PPUSH
// if not units then
66187: LD_VAR 0 1
66191: NOT
66192: IFFALSE 66196
// exit ;
66194: GO 66222
// for i in units do
66196: LD_ADDR_VAR 0 3
66200: PUSH
66201: LD_VAR 0 1
66205: PUSH
66206: FOR_IN
66207: IFFALSE 66220
// ComExit ( i ) ;
66209: LD_VAR 0 3
66213: PPUSH
66214: CALL 66100 0 1
66218: GO 66206
66220: POP
66221: POP
// end ;
66222: LD_VAR 0 2
66226: RET
// export function ResetHc ; begin
66227: LD_INT 0
66229: PPUSH
// InitHc ;
66230: CALL_OW 19
// hc_importance := 0 ;
66234: LD_ADDR_OWVAR 32
66238: PUSH
66239: LD_INT 0
66241: ST_TO_ADDR
// end ;
66242: LD_VAR 0 1
66246: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66247: LD_INT 0
66249: PPUSH
66250: PPUSH
66251: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66252: LD_ADDR_VAR 0 6
66256: PUSH
66257: LD_VAR 0 1
66261: PUSH
66262: LD_VAR 0 3
66266: PLUS
66267: PUSH
66268: LD_INT 2
66270: DIV
66271: ST_TO_ADDR
// if _x < 0 then
66272: LD_VAR 0 6
66276: PUSH
66277: LD_INT 0
66279: LESS
66280: IFFALSE 66297
// _x := _x * - 1 ;
66282: LD_ADDR_VAR 0 6
66286: PUSH
66287: LD_VAR 0 6
66291: PUSH
66292: LD_INT 1
66294: NEG
66295: MUL
66296: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66297: LD_ADDR_VAR 0 7
66301: PUSH
66302: LD_VAR 0 2
66306: PUSH
66307: LD_VAR 0 4
66311: PLUS
66312: PUSH
66313: LD_INT 2
66315: DIV
66316: ST_TO_ADDR
// if _y < 0 then
66317: LD_VAR 0 7
66321: PUSH
66322: LD_INT 0
66324: LESS
66325: IFFALSE 66342
// _y := _y * - 1 ;
66327: LD_ADDR_VAR 0 7
66331: PUSH
66332: LD_VAR 0 7
66336: PUSH
66337: LD_INT 1
66339: NEG
66340: MUL
66341: ST_TO_ADDR
// result := [ _x , _y ] ;
66342: LD_ADDR_VAR 0 5
66346: PUSH
66347: LD_VAR 0 6
66351: PUSH
66352: LD_VAR 0 7
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: ST_TO_ADDR
// end ;
66361: LD_VAR 0 5
66365: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66366: LD_INT 0
66368: PPUSH
66369: PPUSH
66370: PPUSH
66371: PPUSH
// task := GetTaskList ( unit ) ;
66372: LD_ADDR_VAR 0 7
66376: PUSH
66377: LD_VAR 0 1
66381: PPUSH
66382: CALL_OW 437
66386: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66387: LD_VAR 0 7
66391: NOT
66392: PUSH
66393: LD_VAR 0 1
66397: PPUSH
66398: LD_VAR 0 2
66402: PPUSH
66403: CALL_OW 308
66407: NOT
66408: AND
66409: IFFALSE 66413
// exit ;
66411: GO 66531
// if IsInArea ( unit , area ) then
66413: LD_VAR 0 1
66417: PPUSH
66418: LD_VAR 0 2
66422: PPUSH
66423: CALL_OW 308
66427: IFFALSE 66445
// begin ComMoveToArea ( unit , goAway ) ;
66429: LD_VAR 0 1
66433: PPUSH
66434: LD_VAR 0 3
66438: PPUSH
66439: CALL_OW 113
// exit ;
66443: GO 66531
// end ; if task [ 1 ] [ 1 ] <> M then
66445: LD_VAR 0 7
66449: PUSH
66450: LD_INT 1
66452: ARRAY
66453: PUSH
66454: LD_INT 1
66456: ARRAY
66457: PUSH
66458: LD_STRING M
66460: NONEQUAL
66461: IFFALSE 66465
// exit ;
66463: GO 66531
// x := task [ 1 ] [ 2 ] ;
66465: LD_ADDR_VAR 0 5
66469: PUSH
66470: LD_VAR 0 7
66474: PUSH
66475: LD_INT 1
66477: ARRAY
66478: PUSH
66479: LD_INT 2
66481: ARRAY
66482: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66483: LD_ADDR_VAR 0 6
66487: PUSH
66488: LD_VAR 0 7
66492: PUSH
66493: LD_INT 1
66495: ARRAY
66496: PUSH
66497: LD_INT 3
66499: ARRAY
66500: ST_TO_ADDR
// if InArea ( x , y , area ) then
66501: LD_VAR 0 5
66505: PPUSH
66506: LD_VAR 0 6
66510: PPUSH
66511: LD_VAR 0 2
66515: PPUSH
66516: CALL_OW 309
66520: IFFALSE 66531
// ComStop ( unit ) ;
66522: LD_VAR 0 1
66526: PPUSH
66527: CALL_OW 141
// end ;
66531: LD_VAR 0 4
66535: RET
// export function Abs ( value ) ; begin
66536: LD_INT 0
66538: PPUSH
// result := value ;
66539: LD_ADDR_VAR 0 2
66543: PUSH
66544: LD_VAR 0 1
66548: ST_TO_ADDR
// if value < 0 then
66549: LD_VAR 0 1
66553: PUSH
66554: LD_INT 0
66556: LESS
66557: IFFALSE 66574
// result := value * - 1 ;
66559: LD_ADDR_VAR 0 2
66563: PUSH
66564: LD_VAR 0 1
66568: PUSH
66569: LD_INT 1
66571: NEG
66572: MUL
66573: ST_TO_ADDR
// end ;
66574: LD_VAR 0 2
66578: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66579: LD_INT 0
66581: PPUSH
66582: PPUSH
66583: PPUSH
66584: PPUSH
66585: PPUSH
66586: PPUSH
66587: PPUSH
66588: PPUSH
// if not unit or not building then
66589: LD_VAR 0 1
66593: NOT
66594: PUSH
66595: LD_VAR 0 2
66599: NOT
66600: OR
66601: IFFALSE 66605
// exit ;
66603: GO 66831
// x := GetX ( building ) ;
66605: LD_ADDR_VAR 0 4
66609: PUSH
66610: LD_VAR 0 2
66614: PPUSH
66615: CALL_OW 250
66619: ST_TO_ADDR
// y := GetY ( building ) ;
66620: LD_ADDR_VAR 0 6
66624: PUSH
66625: LD_VAR 0 2
66629: PPUSH
66630: CALL_OW 251
66634: ST_TO_ADDR
// d := GetDir ( building ) ;
66635: LD_ADDR_VAR 0 8
66639: PUSH
66640: LD_VAR 0 2
66644: PPUSH
66645: CALL_OW 254
66649: ST_TO_ADDR
// r := 4 ;
66650: LD_ADDR_VAR 0 9
66654: PUSH
66655: LD_INT 4
66657: ST_TO_ADDR
// for i := 1 to 5 do
66658: LD_ADDR_VAR 0 10
66662: PUSH
66663: DOUBLE
66664: LD_INT 1
66666: DEC
66667: ST_TO_ADDR
66668: LD_INT 5
66670: PUSH
66671: FOR_TO
66672: IFFALSE 66829
// begin _x := ShiftX ( x , d , r + i ) ;
66674: LD_ADDR_VAR 0 5
66678: PUSH
66679: LD_VAR 0 4
66683: PPUSH
66684: LD_VAR 0 8
66688: PPUSH
66689: LD_VAR 0 9
66693: PUSH
66694: LD_VAR 0 10
66698: PLUS
66699: PPUSH
66700: CALL_OW 272
66704: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66705: LD_ADDR_VAR 0 7
66709: PUSH
66710: LD_VAR 0 6
66714: PPUSH
66715: LD_VAR 0 8
66719: PPUSH
66720: LD_VAR 0 9
66724: PUSH
66725: LD_VAR 0 10
66729: PLUS
66730: PPUSH
66731: CALL_OW 273
66735: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66736: LD_VAR 0 5
66740: PPUSH
66741: LD_VAR 0 7
66745: PPUSH
66746: CALL_OW 488
66750: PUSH
66751: LD_VAR 0 5
66755: PPUSH
66756: LD_VAR 0 7
66760: PPUSH
66761: CALL_OW 428
66765: PPUSH
66766: CALL_OW 247
66770: PUSH
66771: LD_INT 3
66773: PUSH
66774: LD_INT 2
66776: PUSH
66777: EMPTY
66778: LIST
66779: LIST
66780: IN
66781: NOT
66782: AND
66783: IFFALSE 66827
// begin ComMoveXY ( unit , _x , _y ) ;
66785: LD_VAR 0 1
66789: PPUSH
66790: LD_VAR 0 5
66794: PPUSH
66795: LD_VAR 0 7
66799: PPUSH
66800: CALL_OW 111
// result := [ _x , _y ] ;
66804: LD_ADDR_VAR 0 3
66808: PUSH
66809: LD_VAR 0 5
66813: PUSH
66814: LD_VAR 0 7
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: ST_TO_ADDR
// exit ;
66823: POP
66824: POP
66825: GO 66831
// end ; end ;
66827: GO 66671
66829: POP
66830: POP
// end ;
66831: LD_VAR 0 3
66835: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66836: LD_INT 0
66838: PPUSH
66839: PPUSH
66840: PPUSH
// result := 0 ;
66841: LD_ADDR_VAR 0 3
66845: PUSH
66846: LD_INT 0
66848: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66849: LD_VAR 0 1
66853: PUSH
66854: LD_INT 0
66856: LESS
66857: PUSH
66858: LD_VAR 0 1
66862: PUSH
66863: LD_INT 8
66865: GREATER
66866: OR
66867: PUSH
66868: LD_VAR 0 2
66872: PUSH
66873: LD_INT 0
66875: LESS
66876: OR
66877: PUSH
66878: LD_VAR 0 2
66882: PUSH
66883: LD_INT 8
66885: GREATER
66886: OR
66887: IFFALSE 66891
// exit ;
66889: GO 66966
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66891: LD_ADDR_VAR 0 4
66895: PUSH
66896: LD_INT 22
66898: PUSH
66899: LD_VAR 0 2
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: PPUSH
66908: CALL_OW 69
66912: PUSH
66913: FOR_IN
66914: IFFALSE 66964
// begin un := UnitShoot ( i ) ;
66916: LD_ADDR_VAR 0 5
66920: PUSH
66921: LD_VAR 0 4
66925: PPUSH
66926: CALL_OW 504
66930: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66931: LD_VAR 0 5
66935: PPUSH
66936: CALL_OW 255
66940: PUSH
66941: LD_VAR 0 1
66945: EQUAL
66946: IFFALSE 66962
// begin result := un ;
66948: LD_ADDR_VAR 0 3
66952: PUSH
66953: LD_VAR 0 5
66957: ST_TO_ADDR
// exit ;
66958: POP
66959: POP
66960: GO 66966
// end ; end ;
66962: GO 66913
66964: POP
66965: POP
// end ;
66966: LD_VAR 0 3
66970: RET
// export function GetCargoBay ( units ) ; begin
66971: LD_INT 0
66973: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66974: LD_ADDR_VAR 0 2
66978: PUSH
66979: LD_VAR 0 1
66983: PPUSH
66984: LD_INT 2
66986: PUSH
66987: LD_INT 34
66989: PUSH
66990: LD_INT 12
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: LD_INT 34
66999: PUSH
67000: LD_INT 51
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: LD_INT 34
67009: PUSH
67010: LD_INT 32
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: PUSH
67017: LD_INT 34
67019: PUSH
67020: LD_EXP 96
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: LIST
67033: LIST
67034: LIST
67035: PPUSH
67036: CALL_OW 72
67040: ST_TO_ADDR
// end ;
67041: LD_VAR 0 2
67045: RET
// export function Negate ( value ) ; begin
67046: LD_INT 0
67048: PPUSH
// result := not value ;
67049: LD_ADDR_VAR 0 2
67053: PUSH
67054: LD_VAR 0 1
67058: NOT
67059: ST_TO_ADDR
// end ;
67060: LD_VAR 0 2
67064: RET
// export function Inc ( value ) ; begin
67065: LD_INT 0
67067: PPUSH
// result := value + 1 ;
67068: LD_ADDR_VAR 0 2
67072: PUSH
67073: LD_VAR 0 1
67077: PUSH
67078: LD_INT 1
67080: PLUS
67081: ST_TO_ADDR
// end ;
67082: LD_VAR 0 2
67086: RET
// export function Dec ( value ) ; begin
67087: LD_INT 0
67089: PPUSH
// result := value - 1 ;
67090: LD_ADDR_VAR 0 2
67094: PUSH
67095: LD_VAR 0 1
67099: PUSH
67100: LD_INT 1
67102: MINUS
67103: ST_TO_ADDR
// end ;
67104: LD_VAR 0 2
67108: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67109: LD_INT 0
67111: PPUSH
67112: PPUSH
67113: PPUSH
67114: PPUSH
67115: PPUSH
67116: PPUSH
67117: PPUSH
67118: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67119: LD_VAR 0 1
67123: PPUSH
67124: LD_VAR 0 2
67128: PPUSH
67129: CALL_OW 488
67133: NOT
67134: PUSH
67135: LD_VAR 0 3
67139: PPUSH
67140: LD_VAR 0 4
67144: PPUSH
67145: CALL_OW 488
67149: NOT
67150: OR
67151: IFFALSE 67164
// begin result := - 1 ;
67153: LD_ADDR_VAR 0 5
67157: PUSH
67158: LD_INT 1
67160: NEG
67161: ST_TO_ADDR
// exit ;
67162: GO 67399
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67164: LD_ADDR_VAR 0 12
67168: PUSH
67169: LD_VAR 0 1
67173: PPUSH
67174: LD_VAR 0 2
67178: PPUSH
67179: LD_VAR 0 3
67183: PPUSH
67184: LD_VAR 0 4
67188: PPUSH
67189: CALL 66247 0 4
67193: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67194: LD_ADDR_VAR 0 11
67198: PUSH
67199: LD_VAR 0 1
67203: PPUSH
67204: LD_VAR 0 2
67208: PPUSH
67209: LD_VAR 0 12
67213: PUSH
67214: LD_INT 1
67216: ARRAY
67217: PPUSH
67218: LD_VAR 0 12
67222: PUSH
67223: LD_INT 2
67225: ARRAY
67226: PPUSH
67227: CALL_OW 298
67231: ST_TO_ADDR
// distance := 9999 ;
67232: LD_ADDR_VAR 0 10
67236: PUSH
67237: LD_INT 9999
67239: ST_TO_ADDR
// for i := 0 to 5 do
67240: LD_ADDR_VAR 0 6
67244: PUSH
67245: DOUBLE
67246: LD_INT 0
67248: DEC
67249: ST_TO_ADDR
67250: LD_INT 5
67252: PUSH
67253: FOR_TO
67254: IFFALSE 67397
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67256: LD_ADDR_VAR 0 7
67260: PUSH
67261: LD_VAR 0 1
67265: PPUSH
67266: LD_VAR 0 6
67270: PPUSH
67271: LD_VAR 0 11
67275: PPUSH
67276: CALL_OW 272
67280: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67281: LD_ADDR_VAR 0 8
67285: PUSH
67286: LD_VAR 0 2
67290: PPUSH
67291: LD_VAR 0 6
67295: PPUSH
67296: LD_VAR 0 11
67300: PPUSH
67301: CALL_OW 273
67305: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67306: LD_VAR 0 7
67310: PPUSH
67311: LD_VAR 0 8
67315: PPUSH
67316: CALL_OW 488
67320: NOT
67321: IFFALSE 67325
// continue ;
67323: GO 67253
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67325: LD_ADDR_VAR 0 9
67329: PUSH
67330: LD_VAR 0 12
67334: PUSH
67335: LD_INT 1
67337: ARRAY
67338: PPUSH
67339: LD_VAR 0 12
67343: PUSH
67344: LD_INT 2
67346: ARRAY
67347: PPUSH
67348: LD_VAR 0 7
67352: PPUSH
67353: LD_VAR 0 8
67357: PPUSH
67358: CALL_OW 298
67362: ST_TO_ADDR
// if tmp < distance then
67363: LD_VAR 0 9
67367: PUSH
67368: LD_VAR 0 10
67372: LESS
67373: IFFALSE 67395
// begin result := i ;
67375: LD_ADDR_VAR 0 5
67379: PUSH
67380: LD_VAR 0 6
67384: ST_TO_ADDR
// distance := tmp ;
67385: LD_ADDR_VAR 0 10
67389: PUSH
67390: LD_VAR 0 9
67394: ST_TO_ADDR
// end ; end ;
67395: GO 67253
67397: POP
67398: POP
// end ;
67399: LD_VAR 0 5
67403: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67404: LD_INT 0
67406: PPUSH
67407: PPUSH
// if not driver or not IsInUnit ( driver ) then
67408: LD_VAR 0 1
67412: NOT
67413: PUSH
67414: LD_VAR 0 1
67418: PPUSH
67419: CALL_OW 310
67423: NOT
67424: OR
67425: IFFALSE 67429
// exit ;
67427: GO 67519
// vehicle := IsInUnit ( driver ) ;
67429: LD_ADDR_VAR 0 3
67433: PUSH
67434: LD_VAR 0 1
67438: PPUSH
67439: CALL_OW 310
67443: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67444: LD_VAR 0 1
67448: PPUSH
67449: LD_STRING \
67451: PUSH
67452: LD_INT 0
67454: PUSH
67455: LD_INT 0
67457: PUSH
67458: LD_INT 0
67460: PUSH
67461: LD_INT 0
67463: PUSH
67464: LD_INT 0
67466: PUSH
67467: LD_INT 0
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: LIST
67478: PUSH
67479: LD_STRING E
67481: PUSH
67482: LD_INT 0
67484: PUSH
67485: LD_INT 0
67487: PUSH
67488: LD_VAR 0 3
67492: PUSH
67493: LD_INT 0
67495: PUSH
67496: LD_INT 0
67498: PUSH
67499: LD_INT 0
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: LIST
67509: LIST
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: PPUSH
67515: CALL_OW 446
// end ;
67519: LD_VAR 0 2
67523: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67524: LD_INT 0
67526: PPUSH
67527: PPUSH
// if not driver or not IsInUnit ( driver ) then
67528: LD_VAR 0 1
67532: NOT
67533: PUSH
67534: LD_VAR 0 1
67538: PPUSH
67539: CALL_OW 310
67543: NOT
67544: OR
67545: IFFALSE 67549
// exit ;
67547: GO 67639
// vehicle := IsInUnit ( driver ) ;
67549: LD_ADDR_VAR 0 3
67553: PUSH
67554: LD_VAR 0 1
67558: PPUSH
67559: CALL_OW 310
67563: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67564: LD_VAR 0 1
67568: PPUSH
67569: LD_STRING \
67571: PUSH
67572: LD_INT 0
67574: PUSH
67575: LD_INT 0
67577: PUSH
67578: LD_INT 0
67580: PUSH
67581: LD_INT 0
67583: PUSH
67584: LD_INT 0
67586: PUSH
67587: LD_INT 0
67589: PUSH
67590: EMPTY
67591: LIST
67592: LIST
67593: LIST
67594: LIST
67595: LIST
67596: LIST
67597: LIST
67598: PUSH
67599: LD_STRING E
67601: PUSH
67602: LD_INT 0
67604: PUSH
67605: LD_INT 0
67607: PUSH
67608: LD_VAR 0 3
67612: PUSH
67613: LD_INT 0
67615: PUSH
67616: LD_INT 0
67618: PUSH
67619: LD_INT 0
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: LIST
67626: LIST
67627: LIST
67628: LIST
67629: LIST
67630: PUSH
67631: EMPTY
67632: LIST
67633: LIST
67634: PPUSH
67635: CALL_OW 447
// end ;
67639: LD_VAR 0 2
67643: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67644: LD_INT 0
67646: PPUSH
67647: PPUSH
67648: PPUSH
// tmp := [ ] ;
67649: LD_ADDR_VAR 0 5
67653: PUSH
67654: EMPTY
67655: ST_TO_ADDR
// for i in units do
67656: LD_ADDR_VAR 0 4
67660: PUSH
67661: LD_VAR 0 1
67665: PUSH
67666: FOR_IN
67667: IFFALSE 67705
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67669: LD_ADDR_VAR 0 5
67673: PUSH
67674: LD_VAR 0 5
67678: PPUSH
67679: LD_VAR 0 5
67683: PUSH
67684: LD_INT 1
67686: PLUS
67687: PPUSH
67688: LD_VAR 0 4
67692: PPUSH
67693: CALL_OW 256
67697: PPUSH
67698: CALL_OW 2
67702: ST_TO_ADDR
67703: GO 67666
67705: POP
67706: POP
// if not tmp then
67707: LD_VAR 0 5
67711: NOT
67712: IFFALSE 67716
// exit ;
67714: GO 67764
// if asc then
67716: LD_VAR 0 2
67720: IFFALSE 67744
// result := SortListByListAsc ( units , tmp ) else
67722: LD_ADDR_VAR 0 3
67726: PUSH
67727: LD_VAR 0 1
67731: PPUSH
67732: LD_VAR 0 5
67736: PPUSH
67737: CALL_OW 76
67741: ST_TO_ADDR
67742: GO 67764
// result := SortListByListDesc ( units , tmp ) ;
67744: LD_ADDR_VAR 0 3
67748: PUSH
67749: LD_VAR 0 1
67753: PPUSH
67754: LD_VAR 0 5
67758: PPUSH
67759: CALL_OW 77
67763: ST_TO_ADDR
// end ;
67764: LD_VAR 0 3
67768: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67769: LD_INT 0
67771: PPUSH
67772: PPUSH
// task := GetTaskList ( mech ) ;
67773: LD_ADDR_VAR 0 4
67777: PUSH
67778: LD_VAR 0 1
67782: PPUSH
67783: CALL_OW 437
67787: ST_TO_ADDR
// if not task then
67788: LD_VAR 0 4
67792: NOT
67793: IFFALSE 67797
// exit ;
67795: GO 67839
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67797: LD_ADDR_VAR 0 3
67801: PUSH
67802: LD_VAR 0 4
67806: PUSH
67807: LD_INT 1
67809: ARRAY
67810: PUSH
67811: LD_INT 1
67813: ARRAY
67814: PUSH
67815: LD_STRING r
67817: EQUAL
67818: PUSH
67819: LD_VAR 0 4
67823: PUSH
67824: LD_INT 1
67826: ARRAY
67827: PUSH
67828: LD_INT 4
67830: ARRAY
67831: PUSH
67832: LD_VAR 0 2
67836: EQUAL
67837: AND
67838: ST_TO_ADDR
// end ;
67839: LD_VAR 0 3
67843: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67844: LD_INT 0
67846: PPUSH
// SetDir ( unit , d ) ;
67847: LD_VAR 0 1
67851: PPUSH
67852: LD_VAR 0 4
67856: PPUSH
67857: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
67861: LD_VAR 0 1
67865: PPUSH
67866: LD_VAR 0 2
67870: PPUSH
67871: LD_VAR 0 3
67875: PPUSH
67876: LD_VAR 0 5
67880: PPUSH
67881: CALL_OW 48
// end ;
67885: LD_VAR 0 6
67889: RET
// export function ToNaturalNumber ( number ) ; begin
67890: LD_INT 0
67892: PPUSH
// result := number div 1 ;
67893: LD_ADDR_VAR 0 2
67897: PUSH
67898: LD_VAR 0 1
67902: PUSH
67903: LD_INT 1
67905: DIV
67906: ST_TO_ADDR
// if number < 0 then
67907: LD_VAR 0 1
67911: PUSH
67912: LD_INT 0
67914: LESS
67915: IFFALSE 67925
// result := 0 ;
67917: LD_ADDR_VAR 0 2
67921: PUSH
67922: LD_INT 0
67924: ST_TO_ADDR
// end ;
67925: LD_VAR 0 2
67929: RET
// export function SortByClass ( units , class ) ; var un ; begin
67930: LD_INT 0
67932: PPUSH
67933: PPUSH
// if not units or not class then
67934: LD_VAR 0 1
67938: NOT
67939: PUSH
67940: LD_VAR 0 2
67944: NOT
67945: OR
67946: IFFALSE 67950
// exit ;
67948: GO 68045
// result := [ ] ;
67950: LD_ADDR_VAR 0 3
67954: PUSH
67955: EMPTY
67956: ST_TO_ADDR
// for un in units do
67957: LD_ADDR_VAR 0 4
67961: PUSH
67962: LD_VAR 0 1
67966: PUSH
67967: FOR_IN
67968: IFFALSE 68043
// if GetClass ( un ) = class then
67970: LD_VAR 0 4
67974: PPUSH
67975: CALL_OW 257
67979: PUSH
67980: LD_VAR 0 2
67984: EQUAL
67985: IFFALSE 68012
// result := Insert ( result , 1 , un ) else
67987: LD_ADDR_VAR 0 3
67991: PUSH
67992: LD_VAR 0 3
67996: PPUSH
67997: LD_INT 1
67999: PPUSH
68000: LD_VAR 0 4
68004: PPUSH
68005: CALL_OW 2
68009: ST_TO_ADDR
68010: GO 68041
// result := Replace ( result , result + 1 , un ) ;
68012: LD_ADDR_VAR 0 3
68016: PUSH
68017: LD_VAR 0 3
68021: PPUSH
68022: LD_VAR 0 3
68026: PUSH
68027: LD_INT 1
68029: PLUS
68030: PPUSH
68031: LD_VAR 0 4
68035: PPUSH
68036: CALL_OW 1
68040: ST_TO_ADDR
68041: GO 67967
68043: POP
68044: POP
// end ;
68045: LD_VAR 0 3
68049: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68050: LD_INT 0
68052: PPUSH
68053: PPUSH
68054: PPUSH
68055: PPUSH
68056: PPUSH
68057: PPUSH
68058: PPUSH
// result := [ ] ;
68059: LD_ADDR_VAR 0 4
68063: PUSH
68064: EMPTY
68065: ST_TO_ADDR
// if x - r < 0 then
68066: LD_VAR 0 1
68070: PUSH
68071: LD_VAR 0 3
68075: MINUS
68076: PUSH
68077: LD_INT 0
68079: LESS
68080: IFFALSE 68092
// min_x := 0 else
68082: LD_ADDR_VAR 0 8
68086: PUSH
68087: LD_INT 0
68089: ST_TO_ADDR
68090: GO 68108
// min_x := x - r ;
68092: LD_ADDR_VAR 0 8
68096: PUSH
68097: LD_VAR 0 1
68101: PUSH
68102: LD_VAR 0 3
68106: MINUS
68107: ST_TO_ADDR
// if y - r < 0 then
68108: LD_VAR 0 2
68112: PUSH
68113: LD_VAR 0 3
68117: MINUS
68118: PUSH
68119: LD_INT 0
68121: LESS
68122: IFFALSE 68134
// min_y := 0 else
68124: LD_ADDR_VAR 0 7
68128: PUSH
68129: LD_INT 0
68131: ST_TO_ADDR
68132: GO 68150
// min_y := y - r ;
68134: LD_ADDR_VAR 0 7
68138: PUSH
68139: LD_VAR 0 2
68143: PUSH
68144: LD_VAR 0 3
68148: MINUS
68149: ST_TO_ADDR
// max_x := x + r ;
68150: LD_ADDR_VAR 0 9
68154: PUSH
68155: LD_VAR 0 1
68159: PUSH
68160: LD_VAR 0 3
68164: PLUS
68165: ST_TO_ADDR
// max_y := y + r ;
68166: LD_ADDR_VAR 0 10
68170: PUSH
68171: LD_VAR 0 2
68175: PUSH
68176: LD_VAR 0 3
68180: PLUS
68181: ST_TO_ADDR
// for _x = min_x to max_x do
68182: LD_ADDR_VAR 0 5
68186: PUSH
68187: DOUBLE
68188: LD_VAR 0 8
68192: DEC
68193: ST_TO_ADDR
68194: LD_VAR 0 9
68198: PUSH
68199: FOR_TO
68200: IFFALSE 68301
// for _y = min_y to max_y do
68202: LD_ADDR_VAR 0 6
68206: PUSH
68207: DOUBLE
68208: LD_VAR 0 7
68212: DEC
68213: ST_TO_ADDR
68214: LD_VAR 0 10
68218: PUSH
68219: FOR_TO
68220: IFFALSE 68297
// begin if not ValidHex ( _x , _y ) then
68222: LD_VAR 0 5
68226: PPUSH
68227: LD_VAR 0 6
68231: PPUSH
68232: CALL_OW 488
68236: NOT
68237: IFFALSE 68241
// continue ;
68239: GO 68219
// if GetResourceTypeXY ( _x , _y ) then
68241: LD_VAR 0 5
68245: PPUSH
68246: LD_VAR 0 6
68250: PPUSH
68251: CALL_OW 283
68255: IFFALSE 68295
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68257: LD_ADDR_VAR 0 4
68261: PUSH
68262: LD_VAR 0 4
68266: PPUSH
68267: LD_VAR 0 4
68271: PUSH
68272: LD_INT 1
68274: PLUS
68275: PPUSH
68276: LD_VAR 0 5
68280: PUSH
68281: LD_VAR 0 6
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: PPUSH
68290: CALL_OW 1
68294: ST_TO_ADDR
// end ;
68295: GO 68219
68297: POP
68298: POP
68299: GO 68199
68301: POP
68302: POP
// end ;
68303: LD_VAR 0 4
68307: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68308: LD_INT 0
68310: PPUSH
68311: PPUSH
68312: PPUSH
68313: PPUSH
68314: PPUSH
68315: PPUSH
68316: PPUSH
68317: PPUSH
// if not units then
68318: LD_VAR 0 1
68322: NOT
68323: IFFALSE 68327
// exit ;
68325: GO 68752
// result := UnitFilter ( units , [ f_ok ] ) ;
68327: LD_ADDR_VAR 0 3
68331: PUSH
68332: LD_VAR 0 1
68336: PPUSH
68337: LD_INT 50
68339: PUSH
68340: EMPTY
68341: LIST
68342: PPUSH
68343: CALL_OW 72
68347: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68348: LD_ADDR_VAR 0 8
68352: PUSH
68353: LD_VAR 0 1
68357: PUSH
68358: LD_INT 1
68360: ARRAY
68361: PPUSH
68362: CALL_OW 255
68366: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
68367: LD_ADDR_VAR 0 10
68371: PUSH
68372: LD_INT 29
68374: PUSH
68375: LD_EXP 99
68379: PUSH
68380: EMPTY
68381: LIST
68382: LIST
68383: ST_TO_ADDR
// if not result then
68384: LD_VAR 0 3
68388: NOT
68389: IFFALSE 68393
// exit ;
68391: GO 68752
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68393: LD_ADDR_VAR 0 5
68397: PUSH
68398: LD_INT 81
68400: PUSH
68401: LD_VAR 0 8
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: PPUSH
68410: CALL_OW 69
68414: ST_TO_ADDR
// for i in result do
68415: LD_ADDR_VAR 0 4
68419: PUSH
68420: LD_VAR 0 3
68424: PUSH
68425: FOR_IN
68426: IFFALSE 68750
// begin tag := GetTag ( i ) + 1 ;
68428: LD_ADDR_VAR 0 9
68432: PUSH
68433: LD_VAR 0 4
68437: PPUSH
68438: CALL_OW 110
68442: PUSH
68443: LD_INT 1
68445: PLUS
68446: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68447: LD_ADDR_VAR 0 7
68451: PUSH
68452: LD_VAR 0 4
68456: PPUSH
68457: CALL_OW 250
68461: PPUSH
68462: LD_VAR 0 4
68466: PPUSH
68467: CALL_OW 251
68471: PPUSH
68472: LD_INT 6
68474: PPUSH
68475: CALL 68050 0 3
68479: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68480: LD_VAR 0 7
68484: PUSH
68485: LD_VAR 0 4
68489: PPUSH
68490: CALL_OW 264
68494: PUSH
68495: LD_VAR 0 10
68499: IN
68500: NOT
68501: AND
68502: IFFALSE 68541
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68504: LD_VAR 0 4
68508: PPUSH
68509: LD_VAR 0 7
68513: PUSH
68514: LD_INT 1
68516: ARRAY
68517: PUSH
68518: LD_INT 1
68520: ARRAY
68521: PPUSH
68522: LD_VAR 0 7
68526: PUSH
68527: LD_INT 1
68529: ARRAY
68530: PUSH
68531: LD_INT 2
68533: ARRAY
68534: PPUSH
68535: CALL_OW 116
68539: GO 68748
// if path > tag then
68541: LD_VAR 0 2
68545: PUSH
68546: LD_VAR 0 9
68550: GREATER
68551: IFFALSE 68718
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
68553: LD_ADDR_VAR 0 6
68557: PUSH
68558: LD_VAR 0 5
68562: PPUSH
68563: LD_INT 91
68565: PUSH
68566: LD_VAR 0 4
68570: PUSH
68571: LD_INT 12
68573: PUSH
68574: EMPTY
68575: LIST
68576: LIST
68577: LIST
68578: PPUSH
68579: CALL_OW 72
68583: ST_TO_ADDR
// if nearEnemy then
68584: LD_VAR 0 6
68588: IFFALSE 68616
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68590: LD_VAR 0 4
68594: PPUSH
68595: LD_VAR 0 6
68599: PPUSH
68600: LD_VAR 0 4
68604: PPUSH
68605: CALL_OW 74
68609: PPUSH
68610: CALL_OW 115
68614: GO 68716
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68616: LD_VAR 0 4
68620: PPUSH
68621: LD_VAR 0 2
68625: PUSH
68626: LD_VAR 0 9
68630: ARRAY
68631: PUSH
68632: LD_INT 1
68634: ARRAY
68635: PPUSH
68636: LD_VAR 0 2
68640: PUSH
68641: LD_VAR 0 9
68645: ARRAY
68646: PUSH
68647: LD_INT 2
68649: ARRAY
68650: PPUSH
68651: CALL_OW 297
68655: PUSH
68656: LD_INT 6
68658: GREATER
68659: IFFALSE 68702
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68661: LD_VAR 0 4
68665: PPUSH
68666: LD_VAR 0 2
68670: PUSH
68671: LD_VAR 0 9
68675: ARRAY
68676: PUSH
68677: LD_INT 1
68679: ARRAY
68680: PPUSH
68681: LD_VAR 0 2
68685: PUSH
68686: LD_VAR 0 9
68690: ARRAY
68691: PUSH
68692: LD_INT 2
68694: ARRAY
68695: PPUSH
68696: CALL_OW 114
68700: GO 68716
// SetTag ( i , tag ) ;
68702: LD_VAR 0 4
68706: PPUSH
68707: LD_VAR 0 9
68711: PPUSH
68712: CALL_OW 109
// end else
68716: GO 68748
// if enemy then
68718: LD_VAR 0 5
68722: IFFALSE 68748
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68724: LD_VAR 0 4
68728: PPUSH
68729: LD_VAR 0 5
68733: PPUSH
68734: LD_VAR 0 4
68738: PPUSH
68739: CALL_OW 74
68743: PPUSH
68744: CALL_OW 115
// end ;
68748: GO 68425
68750: POP
68751: POP
// end ;
68752: LD_VAR 0 3
68756: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68757: LD_INT 0
68759: PPUSH
68760: PPUSH
68761: PPUSH
// if not unit or IsInUnit ( unit ) then
68762: LD_VAR 0 1
68766: NOT
68767: PUSH
68768: LD_VAR 0 1
68772: PPUSH
68773: CALL_OW 310
68777: OR
68778: IFFALSE 68782
// exit ;
68780: GO 68873
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68782: LD_ADDR_VAR 0 4
68786: PUSH
68787: LD_VAR 0 1
68791: PPUSH
68792: CALL_OW 250
68796: PPUSH
68797: LD_VAR 0 2
68801: PPUSH
68802: LD_INT 1
68804: PPUSH
68805: CALL_OW 272
68809: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68810: LD_ADDR_VAR 0 5
68814: PUSH
68815: LD_VAR 0 1
68819: PPUSH
68820: CALL_OW 251
68824: PPUSH
68825: LD_VAR 0 2
68829: PPUSH
68830: LD_INT 1
68832: PPUSH
68833: CALL_OW 273
68837: ST_TO_ADDR
// if ValidHex ( x , y ) then
68838: LD_VAR 0 4
68842: PPUSH
68843: LD_VAR 0 5
68847: PPUSH
68848: CALL_OW 488
68852: IFFALSE 68873
// ComTurnXY ( unit , x , y ) ;
68854: LD_VAR 0 1
68858: PPUSH
68859: LD_VAR 0 4
68863: PPUSH
68864: LD_VAR 0 5
68868: PPUSH
68869: CALL_OW 118
// end ;
68873: LD_VAR 0 3
68877: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68878: LD_INT 0
68880: PPUSH
68881: PPUSH
// result := false ;
68882: LD_ADDR_VAR 0 3
68886: PUSH
68887: LD_INT 0
68889: ST_TO_ADDR
// if not units then
68890: LD_VAR 0 2
68894: NOT
68895: IFFALSE 68899
// exit ;
68897: GO 68944
// for i in units do
68899: LD_ADDR_VAR 0 4
68903: PUSH
68904: LD_VAR 0 2
68908: PUSH
68909: FOR_IN
68910: IFFALSE 68942
// if See ( side , i ) then
68912: LD_VAR 0 1
68916: PPUSH
68917: LD_VAR 0 4
68921: PPUSH
68922: CALL_OW 292
68926: IFFALSE 68940
// begin result := true ;
68928: LD_ADDR_VAR 0 3
68932: PUSH
68933: LD_INT 1
68935: ST_TO_ADDR
// exit ;
68936: POP
68937: POP
68938: GO 68944
// end ;
68940: GO 68909
68942: POP
68943: POP
// end ;
68944: LD_VAR 0 3
68948: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68949: LD_INT 0
68951: PPUSH
68952: PPUSH
68953: PPUSH
68954: PPUSH
// if not unit or not points then
68955: LD_VAR 0 1
68959: NOT
68960: PUSH
68961: LD_VAR 0 2
68965: NOT
68966: OR
68967: IFFALSE 68971
// exit ;
68969: GO 69061
// dist := 99999 ;
68971: LD_ADDR_VAR 0 5
68975: PUSH
68976: LD_INT 99999
68978: ST_TO_ADDR
// for i in points do
68979: LD_ADDR_VAR 0 4
68983: PUSH
68984: LD_VAR 0 2
68988: PUSH
68989: FOR_IN
68990: IFFALSE 69059
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68992: LD_ADDR_VAR 0 6
68996: PUSH
68997: LD_VAR 0 1
69001: PPUSH
69002: LD_VAR 0 4
69006: PUSH
69007: LD_INT 1
69009: ARRAY
69010: PPUSH
69011: LD_VAR 0 4
69015: PUSH
69016: LD_INT 2
69018: ARRAY
69019: PPUSH
69020: CALL_OW 297
69024: ST_TO_ADDR
// if tmpDist < dist then
69025: LD_VAR 0 6
69029: PUSH
69030: LD_VAR 0 5
69034: LESS
69035: IFFALSE 69057
// begin result := i ;
69037: LD_ADDR_VAR 0 3
69041: PUSH
69042: LD_VAR 0 4
69046: ST_TO_ADDR
// dist := tmpDist ;
69047: LD_ADDR_VAR 0 5
69051: PUSH
69052: LD_VAR 0 6
69056: ST_TO_ADDR
// end ; end ;
69057: GO 68989
69059: POP
69060: POP
// end ; end_of_file
69061: LD_VAR 0 3
69065: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
69066: LD_INT 0
69068: PPUSH
// ar_miner := 81 ;
69069: LD_ADDR_EXP 102
69073: PUSH
69074: LD_INT 81
69076: ST_TO_ADDR
// ar_crane := 88 ;
69077: LD_ADDR_EXP 101
69081: PUSH
69082: LD_INT 88
69084: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
69085: LD_ADDR_EXP 96
69089: PUSH
69090: LD_INT 89
69092: ST_TO_ADDR
// us_hack := 99 ;
69093: LD_ADDR_EXP 97
69097: PUSH
69098: LD_INT 99
69100: ST_TO_ADDR
// us_artillery := 97 ;
69101: LD_ADDR_EXP 98
69105: PUSH
69106: LD_INT 97
69108: ST_TO_ADDR
// ar_bio_bomb := 91 ;
69109: LD_ADDR_EXP 99
69113: PUSH
69114: LD_INT 91
69116: ST_TO_ADDR
// ar_mortar := 92 ;
69117: LD_ADDR_EXP 100
69121: PUSH
69122: LD_INT 92
69124: ST_TO_ADDR
// ru_radar := 98 ;
69125: LD_ADDR_EXP 95
69129: PUSH
69130: LD_INT 98
69132: ST_TO_ADDR
// tech_Artillery := 80 ;
69133: LD_ADDR_EXP 103
69137: PUSH
69138: LD_INT 80
69140: ST_TO_ADDR
// tech_RadMat := 81 ;
69141: LD_ADDR_EXP 104
69145: PUSH
69146: LD_INT 81
69148: ST_TO_ADDR
// tech_BasicTools := 82 ;
69149: LD_ADDR_EXP 105
69153: PUSH
69154: LD_INT 82
69156: ST_TO_ADDR
// tech_Cargo := 83 ;
69157: LD_ADDR_EXP 106
69161: PUSH
69162: LD_INT 83
69164: ST_TO_ADDR
// tech_Track := 84 ;
69165: LD_ADDR_EXP 107
69169: PUSH
69170: LD_INT 84
69172: ST_TO_ADDR
// tech_Crane := 85 ;
69173: LD_ADDR_EXP 108
69177: PUSH
69178: LD_INT 85
69180: ST_TO_ADDR
// tech_Bulldozer := 86 ;
69181: LD_ADDR_EXP 109
69185: PUSH
69186: LD_INT 86
69188: ST_TO_ADDR
// tech_Hovercraft := 87 ;
69189: LD_ADDR_EXP 110
69193: PUSH
69194: LD_INT 87
69196: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
69197: LD_ADDR_EXP 111
69201: PUSH
69202: LD_INT 88
69204: ST_TO_ADDR
// class_mastodont := 31 ;
69205: LD_ADDR_EXP 112
69209: PUSH
69210: LD_INT 31
69212: ST_TO_ADDR
// class_horse := 21 ;
69213: LD_ADDR_EXP 113
69217: PUSH
69218: LD_INT 21
69220: ST_TO_ADDR
// end ;
69221: LD_VAR 0 1
69225: RET
// every 1 do
69226: GO 69228
69228: DISABLE
// InitGlobalVariables ; end_of_file
69229: CALL 69066 0 0
69233: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69234: LD_VAR 0 1
69238: PUSH
69239: LD_INT 200
69241: DOUBLE
69242: GREATEREQUAL
69243: IFFALSE 69251
69245: LD_INT 299
69247: DOUBLE
69248: LESSEQUAL
69249: IFTRUE 69253
69251: GO 69285
69253: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69254: LD_VAR 0 1
69258: PPUSH
69259: LD_VAR 0 2
69263: PPUSH
69264: LD_VAR 0 3
69268: PPUSH
69269: LD_VAR 0 4
69273: PPUSH
69274: LD_VAR 0 5
69278: PPUSH
69279: CALL 11070 0 5
69283: GO 69362
69285: LD_INT 300
69287: DOUBLE
69288: GREATEREQUAL
69289: IFFALSE 69297
69291: LD_INT 399
69293: DOUBLE
69294: LESSEQUAL
69295: IFTRUE 69299
69297: GO 69361
69299: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69300: LD_VAR 0 1
69304: PPUSH
69305: LD_VAR 0 2
69309: PPUSH
69310: LD_VAR 0 3
69314: PPUSH
69315: LD_VAR 0 4
69319: PPUSH
69320: LD_VAR 0 5
69324: PPUSH
69325: LD_VAR 0 6
69329: PPUSH
69330: LD_VAR 0 7
69334: PPUSH
69335: LD_VAR 0 8
69339: PPUSH
69340: LD_VAR 0 9
69344: PPUSH
69345: LD_VAR 0 10
69349: PPUSH
69350: LD_VAR 0 11
69354: PPUSH
69355: CALL 26995 0 11
69359: GO 69362
69361: POP
// end ;
69362: PPOPN 11
69364: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69365: LD_VAR 0 1
69369: PPUSH
69370: LD_VAR 0 2
69374: PPUSH
69375: LD_VAR 0 3
69379: PPUSH
69380: LD_VAR 0 4
69384: PPUSH
69385: LD_VAR 0 5
69389: PPUSH
69390: CALL 10806 0 5
// end ; end_of_file
69394: PPOPN 5
69396: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69397: LD_VAR 0 1
69401: PPUSH
69402: LD_VAR 0 2
69406: PPUSH
69407: LD_VAR 0 3
69411: PPUSH
69412: LD_VAR 0 4
69416: PPUSH
69417: LD_VAR 0 5
69421: PPUSH
69422: LD_VAR 0 6
69426: PPUSH
69427: CALL 15190 0 6
// end ;
69431: PPOPN 6
69433: END
