// starting begin if GetMonth in [ 12 , 1 , 2 , 3 ] then
   0: CALL_OW 545
   4: PUSH
   5: LD_INT 12
   7: PUSH
   8: LD_INT 1
  10: PUSH
  11: LD_INT 2
  13: PUSH
  14: LD_INT 3
  16: PUSH
  17: EMPTY
  18: LIST
  19: LIST
  20: LIST
  21: LIST
  22: IN
  23: IFFALSE 34
// LoadColorsTXT ( colors-1.txt ) else
  25: LD_STRING colors-1.txt
  27: PPUSH
  28: CALL_OW 544
  32: GO 79
// if GetMonth in [ 4 , 5 , 6 , 10 , 11 ] then
  34: CALL_OW 545
  38: PUSH
  39: LD_INT 4
  41: PUSH
  42: LD_INT 5
  44: PUSH
  45: LD_INT 6
  47: PUSH
  48: LD_INT 10
  50: PUSH
  51: LD_INT 11
  53: PUSH
  54: EMPTY
  55: LIST
  56: LIST
  57: LIST
  58: LIST
  59: LIST
  60: IN
  61: IFFALSE 72
// LoadColorsTXT ( colors-2.txt ) else
  63: LD_STRING colors-2.txt
  65: PPUSH
  66: CALL_OW 544
  70: GO 79
// LoadColorsTXT ( colors-3.txt ) ;
  72: LD_STRING colors-3.txt
  74: PPUSH
  75: CALL_OW 544
// ResetFog ;
  79: CALL_OW 335
// CenterNowOnXY ( 1 , 1 ) ;
  83: LD_INT 1
  85: PPUSH
  86: LD_INT 1
  88: PPUSH
  89: CALL_OW 86
// Settings ;
  93: CALL 122 0 0
// PrepareApeman ( 12 ) ;
  97: LD_INT 12
  99: PPUSH
 100: CALL 7090 0 1
// PreparePlayer ;
 104: CALL 5843 0 0
// PrepareComputer ;
 108: CALL 1015 0 0
// FogOff ( your_side ) ;
 112: LD_OWVAR 2
 116: PPUSH
 117: CALL_OW 344
// end ;
 121: END
// function Settings ; begin
 122: LD_INT 0
 124: PPUSH
// case Query ( Info ) of 1 :
 125: LD_STRING Info
 127: PPUSH
 128: CALL_OW 97
 132: PUSH
 133: LD_INT 1
 135: DOUBLE
 136: EQUAL
 137: IFTRUE 141
 139: GO 144
 141: POP
// begin end ; end ;
 142: GO 145
 144: POP
// case Query ( PlayerNation ) of 1 :
 145: LD_STRING PlayerNation
 147: PPUSH
 148: CALL_OW 97
 152: PUSH
 153: LD_INT 1
 155: DOUBLE
 156: EQUAL
 157: IFTRUE 161
 159: GO 172
 161: POP
// begin player_nation = 1 ;
 162: LD_ADDR_EXP 74
 166: PUSH
 167: LD_INT 1
 169: ST_TO_ADDR
// end ; 2 :
 170: GO 211
 172: LD_INT 2
 174: DOUBLE
 175: EQUAL
 176: IFTRUE 180
 178: GO 191
 180: POP
// begin player_nation = 2 ;
 181: LD_ADDR_EXP 74
 185: PUSH
 186: LD_INT 2
 188: ST_TO_ADDR
// end ; 3 :
 189: GO 211
 191: LD_INT 3
 193: DOUBLE
 194: EQUAL
 195: IFTRUE 199
 197: GO 210
 199: POP
// begin player_nation = 3 ;
 200: LD_ADDR_EXP 74
 204: PUSH
 205: LD_INT 3
 207: ST_TO_ADDR
// end ; end ;
 208: GO 211
 210: POP
// player_side := 3 ;
 211: LD_ADDR_EXP 75
 215: PUSH
 216: LD_INT 3
 218: ST_TO_ADDR
// Your_Side = player_side ;
 219: LD_ADDR_OWVAR 2
 223: PUSH
 224: LD_EXP 75
 228: ST_TO_ADDR
// ChangeSideFog ( 5 , player_side ) ;
 229: LD_INT 5
 231: PPUSH
 232: LD_EXP 75
 236: PPUSH
 237: CALL_OW 343
// Music_Nat = player_nation ;
 241: LD_ADDR_OWVAR 71
 245: PUSH
 246: LD_EXP 74
 250: ST_TO_ADDR
// case Query ( PlayerCont ) of 1 :
 251: LD_STRING PlayerCont
 253: PPUSH
 254: CALL_OW 97
 258: PUSH
 259: LD_INT 1
 261: DOUBLE
 262: EQUAL
 263: IFTRUE 267
 265: GO 278
 267: POP
// begin player_cont = 2 ;
 268: LD_ADDR_EXP 76
 272: PUSH
 273: LD_INT 2
 275: ST_TO_ADDR
// end ; 2 :
 276: GO 336
 278: LD_INT 2
 280: DOUBLE
 281: EQUAL
 282: IFTRUE 286
 284: GO 297
 286: POP
// begin player_cont = 3 ;
 287: LD_ADDR_EXP 76
 291: PUSH
 292: LD_INT 3
 294: ST_TO_ADDR
// end ; 3 :
 295: GO 336
 297: LD_INT 3
 299: DOUBLE
 300: EQUAL
 301: IFTRUE 305
 303: GO 316
 305: POP
// begin player_cont = 4 ;
 306: LD_ADDR_EXP 76
 310: PUSH
 311: LD_INT 4
 313: ST_TO_ADDR
// end ; 4 :
 314: GO 336
 316: LD_INT 4
 318: DOUBLE
 319: EQUAL
 320: IFTRUE 324
 322: GO 335
 324: POP
// begin player_cont = 5 ;
 325: LD_ADDR_EXP 76
 329: PUSH
 330: LD_INT 5
 332: ST_TO_ADDR
// end ; end ;
 333: GO 336
 335: POP
// comp_nation := 1 ;
 336: LD_ADDR_EXP 2
 340: PUSH
 341: LD_INT 1
 343: ST_TO_ADDR
// if player_side = comp_side then
 344: LD_EXP 75
 348: PUSH
 349: LD_EXP 1
 353: EQUAL
 354: IFFALSE 370
// begin comp_side = player_side + 1 ;
 356: LD_ADDR_EXP 1
 360: PUSH
 361: LD_EXP 75
 365: PUSH
 366: LD_INT 1
 368: PLUS
 369: ST_TO_ADDR
// end ; case Query ( CompCont ) of 1 :
 370: LD_STRING CompCont
 372: PPUSH
 373: CALL_OW 97
 377: PUSH
 378: LD_INT 1
 380: DOUBLE
 381: EQUAL
 382: IFTRUE 386
 384: GO 397
 386: POP
// begin comp_cont = 4 ;
 387: LD_ADDR_EXP 3
 391: PUSH
 392: LD_INT 4
 394: ST_TO_ADDR
// end ; 2 :
 395: GO 436
 397: LD_INT 2
 399: DOUBLE
 400: EQUAL
 401: IFTRUE 405
 403: GO 416
 405: POP
// begin comp_cont = 5 ;
 406: LD_ADDR_EXP 3
 410: PUSH
 411: LD_INT 5
 413: ST_TO_ADDR
// end ; 3 :
 414: GO 436
 416: LD_INT 3
 418: DOUBLE
 419: EQUAL
 420: IFTRUE 424
 422: GO 435
 424: POP
// begin comp_cont = 6 ;
 425: LD_ADDR_EXP 3
 429: PUSH
 430: LD_INT 6
 432: ST_TO_ADDR
// end ; end ;
 433: GO 436
 435: POP
// case Query ( CompSkill ) of 1 :
 436: LD_STRING CompSkill
 438: PPUSH
 439: CALL_OW 97
 443: PUSH
 444: LD_INT 1
 446: DOUBLE
 447: EQUAL
 448: IFTRUE 452
 450: GO 487
 452: POP
// begin comp_skill1 = 3 ;
 453: LD_ADDR_EXP 12
 457: PUSH
 458: LD_INT 3
 460: ST_TO_ADDR
// comp_skill2 = 3 ;
 461: LD_ADDR_EXP 13
 465: PUSH
 466: LD_INT 3
 468: ST_TO_ADDR
// comp_skill3 = 3 ;
 469: LD_ADDR_EXP 14
 473: PUSH
 474: LD_INT 3
 476: ST_TO_ADDR
// comp_skill4 = 3 ;
 477: LD_ADDR_EXP 15
 481: PUSH
 482: LD_INT 3
 484: ST_TO_ADDR
// end ; 2 :
 485: GO 574
 487: LD_INT 2
 489: DOUBLE
 490: EQUAL
 491: IFTRUE 495
 493: GO 530
 495: POP
// begin comp_skill1 = 6 ;
 496: LD_ADDR_EXP 12
 500: PUSH
 501: LD_INT 6
 503: ST_TO_ADDR
// comp_skill2 = 6 ;
 504: LD_ADDR_EXP 13
 508: PUSH
 509: LD_INT 6
 511: ST_TO_ADDR
// comp_skill3 = 6 ;
 512: LD_ADDR_EXP 14
 516: PUSH
 517: LD_INT 6
 519: ST_TO_ADDR
// comp_skill4 = 6 ;
 520: LD_ADDR_EXP 15
 524: PUSH
 525: LD_INT 6
 527: ST_TO_ADDR
// end ; 3 :
 528: GO 574
 530: LD_INT 3
 532: DOUBLE
 533: EQUAL
 534: IFTRUE 538
 536: GO 573
 538: POP
// begin comp_skill1 = 9 ;
 539: LD_ADDR_EXP 12
 543: PUSH
 544: LD_INT 9
 546: ST_TO_ADDR
// comp_skill2 = 9 ;
 547: LD_ADDR_EXP 13
 551: PUSH
 552: LD_INT 9
 554: ST_TO_ADDR
// comp_skill3 = 9 ;
 555: LD_ADDR_EXP 14
 559: PUSH
 560: LD_INT 9
 562: ST_TO_ADDR
// comp_skill4 = 9 ;
 563: LD_ADDR_EXP 15
 567: PUSH
 568: LD_INT 9
 570: ST_TO_ADDR
// end ; end ;
 571: GO 574
 573: POP
// case Query ( CompDiff ) of 1 :
 574: LD_STRING CompDiff
 576: PPUSH
 577: CALL_OW 97
 581: PUSH
 582: LD_INT 1
 584: DOUBLE
 585: EQUAL
 586: IFTRUE 590
 588: GO 625
 590: POP
// begin Bonus = false ;
 591: LD_ADDR_EXP 19
 595: PUSH
 596: LD_INT 0
 598: ST_TO_ADDR
// diff_level = 1 ;
 599: LD_ADDR_EXP 16
 603: PUSH
 604: LD_INT 1
 606: ST_TO_ADDR
// diff_attack = 1 ;
 607: LD_ADDR_EXP 18
 611: PUSH
 612: LD_INT 1
 614: ST_TO_ADDR
// diff_def = 1 ;
 615: LD_ADDR_EXP 17
 619: PUSH
 620: LD_INT 1
 622: ST_TO_ADDR
// end ; 2 :
 623: GO 779
 625: LD_INT 2
 627: DOUBLE
 628: EQUAL
 629: IFTRUE 633
 631: GO 676
 633: POP
// begin Bonus = true ;
 634: LD_ADDR_EXP 19
 638: PUSH
 639: LD_INT 1
 641: ST_TO_ADDR
// bonus_level = 10 ;
 642: LD_ADDR_EXP 20
 646: PUSH
 647: LD_INT 10
 649: ST_TO_ADDR
// diff_level = 1 ;
 650: LD_ADDR_EXP 16
 654: PUSH
 655: LD_INT 1
 657: ST_TO_ADDR
// diff_attack = 1 ;
 658: LD_ADDR_EXP 18
 662: PUSH
 663: LD_INT 1
 665: ST_TO_ADDR
// diff_def = 1 ;
 666: LD_ADDR_EXP 17
 670: PUSH
 671: LD_INT 1
 673: ST_TO_ADDR
// end ; 3 :
 674: GO 779
 676: LD_INT 3
 678: DOUBLE
 679: EQUAL
 680: IFTRUE 684
 682: GO 727
 684: POP
// begin Bonus = true ;
 685: LD_ADDR_EXP 19
 689: PUSH
 690: LD_INT 1
 692: ST_TO_ADDR
// bonus_level = 35 ;
 693: LD_ADDR_EXP 20
 697: PUSH
 698: LD_INT 35
 700: ST_TO_ADDR
// diff_level = 2 ;
 701: LD_ADDR_EXP 16
 705: PUSH
 706: LD_INT 2
 708: ST_TO_ADDR
// diff_attack = 2 ;
 709: LD_ADDR_EXP 18
 713: PUSH
 714: LD_INT 2
 716: ST_TO_ADDR
// diff_def = 2 ;
 717: LD_ADDR_EXP 17
 721: PUSH
 722: LD_INT 2
 724: ST_TO_ADDR
// end ; 4 :
 725: GO 779
 727: LD_INT 4
 729: DOUBLE
 730: EQUAL
 731: IFTRUE 735
 733: GO 778
 735: POP
// begin Bonus = true ;
 736: LD_ADDR_EXP 19
 740: PUSH
 741: LD_INT 1
 743: ST_TO_ADDR
// bonus_level = 50 ;
 744: LD_ADDR_EXP 20
 748: PUSH
 749: LD_INT 50
 751: ST_TO_ADDR
// diff_level = 3 ;
 752: LD_ADDR_EXP 16
 756: PUSH
 757: LD_INT 3
 759: ST_TO_ADDR
// diff_attack = 3 ;
 760: LD_ADDR_EXP 18
 764: PUSH
 765: LD_INT 3
 767: ST_TO_ADDR
// diff_def = 3 ;
 768: LD_ADDR_EXP 17
 772: PUSH
 773: LD_INT 3
 775: ST_TO_ADDR
// end ; end ;
 776: GO 779
 778: POP
// case Query ( Crates ) of 1 :
 779: LD_STRING Crates
 781: PPUSH
 782: CALL_OW 97
 786: PUSH
 787: LD_INT 1
 789: DOUBLE
 790: EQUAL
 791: IFTRUE 795
 793: GO 814
 795: POP
// begin Cr1 = true ;
 796: LD_ADDR_EXP 78
 800: PUSH
 801: LD_INT 1
 803: ST_TO_ADDR
// Cr2 = false ;
 804: LD_ADDR_EXP 79
 808: PUSH
 809: LD_INT 0
 811: ST_TO_ADDR
// end ; 2 :
 812: GO 842
 814: LD_INT 2
 816: DOUBLE
 817: EQUAL
 818: IFTRUE 822
 820: GO 841
 822: POP
// begin Cr1 = false ;
 823: LD_ADDR_EXP 78
 827: PUSH
 828: LD_INT 0
 830: ST_TO_ADDR
// Cr2 = true ;
 831: LD_ADDR_EXP 79
 835: PUSH
 836: LD_INT 1
 838: ST_TO_ADDR
// end ; end ;
 839: GO 842
 841: POP
// case Query ( SibBomb ) of 1 :
 842: LD_STRING SibBomb
 844: PPUSH
 845: CALL_OW 97
 849: PUSH
 850: LD_INT 1
 852: DOUBLE
 853: EQUAL
 854: IFTRUE 858
 856: GO 891
 858: POP
// begin SetTech ( 25 , player_side , state_disabled ) ;
 859: LD_INT 25
 861: PPUSH
 862: LD_EXP 75
 866: PPUSH
 867: LD_INT 0
 869: PPUSH
 870: CALL_OW 322
// SetTech ( 25 , comp_side , state_disabled ) ;
 874: LD_INT 25
 876: PPUSH
 877: LD_EXP 1
 881: PPUSH
 882: LD_INT 0
 884: PPUSH
 885: CALL_OW 322
// end ; 2 :
 889: GO 933
 891: LD_INT 2
 893: DOUBLE
 894: EQUAL
 895: IFTRUE 899
 897: GO 932
 899: POP
// begin SetTech ( 25 , player_side , state_enabled ) ;
 900: LD_INT 25
 902: PPUSH
 903: LD_EXP 75
 907: PPUSH
 908: LD_INT 1
 910: PPUSH
 911: CALL_OW 322
// SetTech ( 25 , comp_side , state_enabled ) ;
 915: LD_INT 25
 917: PPUSH
 918: LD_EXP 1
 922: PPUSH
 923: LD_INT 1
 925: PPUSH
 926: CALL_OW 322
// end ; end ;
 930: GO 933
 932: POP
// case Query ( PlayerEvn ) of 1 :
 933: LD_STRING PlayerEvn
 935: PPUSH
 936: CALL_OW 97
 940: PUSH
 941: LD_INT 1
 943: DOUBLE
 944: EQUAL
 945: IFTRUE 949
 947: GO 960
 949: POP
// begin EventON = true ;
 950: LD_ADDR_EXP 90
 954: PUSH
 955: LD_INT 1
 957: ST_TO_ADDR
// end ; 2 :
 958: GO 980
 960: LD_INT 2
 962: DOUBLE
 963: EQUAL
 964: IFTRUE 968
 966: GO 979
 968: POP
// begin EventON = false ;
 969: LD_ADDR_EXP 90
 973: PUSH
 974: LD_INT 0
 976: ST_TO_ADDR
// end ; end ;
 977: GO 980
 979: POP
// case Query ( GoodLuck ) of 1 :
 980: LD_STRING GoodLuck
 982: PPUSH
 983: CALL_OW 97
 987: PUSH
 988: LD_INT 1
 990: DOUBLE
 991: EQUAL
 992: IFTRUE 996
 994: GO 1009
 996: POP
// begin CenterNowOnXY ( 149 , 14 ) ;
 997: LD_INT 149
 999: PPUSH
1000: LD_INT 14
1002: PPUSH
1003: CALL_OW 86
// end ; end ;
1007: GO 1010
1009: POP
// end ; end_of_file
1010: LD_VAR 0 1
1014: RET
// export function PrepareComputer ; begin
1015: LD_INT 0
1017: PPUSH
// CompTriggers ;
1018: CALL 2360 0 0
// PrepareUnits ;
1022: CALL 1043 0 0
// PrepareFlag ;
1026: CALL 2128 0 0
// PrepareInfo ;
1030: CALL 2286 0 0
// CheckStrategy ;
1034: CALL 2348 0 0
// end ;
1038: LD_VAR 0 1
1042: RET
// export comp_side , comp_nation , comp_cont , comp_units , comp_vehs , comp_builds , comp_sold , comp_engs , comp_mechs , comp_sci , comp_rdriver , comp_skill1 , comp_skill2 , comp_skill3 , comp_skill4 , diff_level , diff_def , diff_attack , bonus , bonus_level , veh_bonus , build_bonus , comp_dep , comp_depot , comp_factory , comp_lab , comp_lab2 , comp_arm , comp_towers , comp_cargo , comp_ct , comp_attgr , limiter , climiter , dlimiter ; function PrepareUnits ; var un , veh , b , i ; begin
1043: LD_INT 0
1045: PPUSH
1046: PPUSH
1047: PPUSH
1048: PPUSH
1049: PPUSH
// comp_side = 1 ;
1050: LD_ADDR_EXP 1
1054: PUSH
1055: LD_INT 1
1057: ST_TO_ADDR
// uc_side := 1 ;
1058: LD_ADDR_OWVAR 20
1062: PUSH
1063: LD_INT 1
1065: ST_TO_ADDR
// uc_nation := comp_nation ;
1066: LD_ADDR_OWVAR 21
1070: PUSH
1071: LD_EXP 2
1075: ST_TO_ADDR
// SetAttitude ( 1 , player_side , att_enemy , true ) ;
1076: LD_INT 1
1078: PPUSH
1079: LD_EXP 75
1083: PPUSH
1084: LD_INT 2
1086: PPUSH
1087: LD_INT 1
1089: PPUSH
1090: CALL_OW 80
// Comp_Units := [ ] ;
1094: LD_ADDR_EXP 4
1098: PUSH
1099: EMPTY
1100: ST_TO_ADDR
// Comp_Sold := [ ] ;
1101: LD_ADDR_EXP 7
1105: PUSH
1106: EMPTY
1107: ST_TO_ADDR
// Comp_Engs := [ ] ;
1108: LD_ADDR_EXP 8
1112: PUSH
1113: EMPTY
1114: ST_TO_ADDR
// Comp_Sci := [ ] ;
1115: LD_ADDR_EXP 10
1119: PUSH
1120: EMPTY
1121: ST_TO_ADDR
// Comp_Mechs := [ ] ;
1122: LD_ADDR_EXP 9
1126: PUSH
1127: EMPTY
1128: ST_TO_ADDR
// Comp_RDriver := [ ] ;
1129: LD_ADDR_EXP 11
1133: PUSH
1134: EMPTY
1135: ST_TO_ADDR
// Comp_Towers := [ ] ;
1136: LD_ADDR_EXP 29
1140: PUSH
1141: EMPTY
1142: ST_TO_ADDR
// Comp_Attgr := [ ] ;
1143: LD_ADDR_EXP 32
1147: PUSH
1148: EMPTY
1149: ST_TO_ADDR
// Limiter = [ 4 , 6 , 8 ] [ diff_attack ] ;
1150: LD_ADDR_EXP 33
1154: PUSH
1155: LD_INT 4
1157: PUSH
1158: LD_INT 6
1160: PUSH
1161: LD_INT 8
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: PUSH
1169: LD_EXP 18
1173: ARRAY
1174: ST_TO_ADDR
// CLimiter = 0 ;
1175: LD_ADDR_EXP 34
1179: PUSH
1180: LD_INT 0
1182: ST_TO_ADDR
// DLimiter = 0 ;
1183: LD_ADDR_EXP 35
1187: PUSH
1188: LD_INT 0
1190: ST_TO_ADDR
// for i = 1 to comp_cont do
1191: LD_ADDR_VAR 0 5
1195: PUSH
1196: DOUBLE
1197: LD_INT 1
1199: DEC
1200: ST_TO_ADDR
1201: LD_EXP 3
1205: PUSH
1206: FOR_TO
1207: IFFALSE 1421
// begin hc_sex = Rand ( sex_male , sex_female ) ;
1209: LD_ADDR_OWVAR 27
1213: PUSH
1214: LD_INT 1
1216: PPUSH
1217: LD_INT 2
1219: PPUSH
1220: CALL_OW 12
1224: ST_TO_ADDR
// hc_gallery =  ;
1225: LD_ADDR_OWVAR 33
1229: PUSH
1230: LD_STRING 
1232: ST_TO_ADDR
// hc_skills = [ comp_skill1 + Rand ( 0 , 1 ) , comp_skill2 + Rand ( - 3 , 0 ) , comp_skill3 + Rand ( - 3 , 0 ) , comp_skill4 + Rand ( - 3 , 0 ) ] ;
1233: LD_ADDR_OWVAR 31
1237: PUSH
1238: LD_EXP 12
1242: PUSH
1243: LD_INT 0
1245: PPUSH
1246: LD_INT 1
1248: PPUSH
1249: CALL_OW 12
1253: PLUS
1254: PUSH
1255: LD_EXP 13
1259: PUSH
1260: LD_INT 3
1262: NEG
1263: PPUSH
1264: LD_INT 0
1266: PPUSH
1267: CALL_OW 12
1271: PLUS
1272: PUSH
1273: LD_EXP 14
1277: PUSH
1278: LD_INT 3
1280: NEG
1281: PPUSH
1282: LD_INT 0
1284: PPUSH
1285: CALL_OW 12
1289: PLUS
1290: PUSH
1291: LD_EXP 15
1295: PUSH
1296: LD_INT 3
1298: NEG
1299: PPUSH
1300: LD_INT 0
1302: PPUSH
1303: CALL_OW 12
1307: PLUS
1308: PUSH
1309: EMPTY
1310: LIST
1311: LIST
1312: LIST
1313: LIST
1314: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
1315: LD_ADDR_OWVAR 29
1319: PUSH
1320: LD_INT 8
1322: PPUSH
1323: LD_INT 12
1325: PPUSH
1326: CALL_OW 12
1330: PUSH
1331: LD_INT 9
1333: PPUSH
1334: LD_INT 11
1336: PPUSH
1337: CALL_OW 12
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: ST_TO_ADDR
// hc_name =  ;
1346: LD_ADDR_OWVAR 26
1350: PUSH
1351: LD_STRING 
1353: ST_TO_ADDR
// hc_class = 1 ;
1354: LD_ADDR_OWVAR 28
1358: PUSH
1359: LD_INT 1
1361: ST_TO_ADDR
// un = CreateHuman ;
1362: LD_ADDR_VAR 0 2
1366: PUSH
1367: CALL_OW 44
1371: ST_TO_ADDR
// PlaceUnitArea ( un , CompResp , false ) ;
1372: LD_VAR 0 2
1376: PPUSH
1377: LD_INT 1
1379: PPUSH
1380: LD_INT 0
1382: PPUSH
1383: CALL_OW 49
// Comp_Units := Comp_Units ^ un ;
1387: LD_ADDR_EXP 4
1391: PUSH
1392: LD_EXP 4
1396: PUSH
1397: LD_VAR 0 2
1401: ADD
1402: ST_TO_ADDR
// Comp_Sold := Comp_Sold ^ un ;
1403: LD_ADDR_EXP 7
1407: PUSH
1408: LD_EXP 7
1412: PUSH
1413: LD_VAR 0 2
1417: ADD
1418: ST_TO_ADDR
// end ;
1419: GO 1206
1421: POP
1422: POP
// for i = 1 to comp_cont + 1 do
1423: LD_ADDR_VAR 0 5
1427: PUSH
1428: DOUBLE
1429: LD_INT 1
1431: DEC
1432: ST_TO_ADDR
1433: LD_EXP 3
1437: PUSH
1438: LD_INT 1
1440: PLUS
1441: PUSH
1442: FOR_TO
1443: IFFALSE 1657
// begin hc_sex = Rand ( sex_male , sex_female ) ;
1445: LD_ADDR_OWVAR 27
1449: PUSH
1450: LD_INT 1
1452: PPUSH
1453: LD_INT 2
1455: PPUSH
1456: CALL_OW 12
1460: ST_TO_ADDR
// hc_gallery =  ;
1461: LD_ADDR_OWVAR 33
1465: PUSH
1466: LD_STRING 
1468: ST_TO_ADDR
// hc_skills = [ comp_skill1 + Rand ( - 2 , 0 ) , comp_skill2 + Rand ( 0 , 1 ) , comp_skill3 + Rand ( - 3 , 0 ) , comp_skill4 + Rand ( - 3 , 0 ) ] ;
1469: LD_ADDR_OWVAR 31
1473: PUSH
1474: LD_EXP 12
1478: PUSH
1479: LD_INT 2
1481: NEG
1482: PPUSH
1483: LD_INT 0
1485: PPUSH
1486: CALL_OW 12
1490: PLUS
1491: PUSH
1492: LD_EXP 13
1496: PUSH
1497: LD_INT 0
1499: PPUSH
1500: LD_INT 1
1502: PPUSH
1503: CALL_OW 12
1507: PLUS
1508: PUSH
1509: LD_EXP 14
1513: PUSH
1514: LD_INT 3
1516: NEG
1517: PPUSH
1518: LD_INT 0
1520: PPUSH
1521: CALL_OW 12
1525: PLUS
1526: PUSH
1527: LD_EXP 15
1531: PUSH
1532: LD_INT 3
1534: NEG
1535: PPUSH
1536: LD_INT 0
1538: PPUSH
1539: CALL_OW 12
1543: PLUS
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
1551: LD_ADDR_OWVAR 29
1555: PUSH
1556: LD_INT 8
1558: PPUSH
1559: LD_INT 12
1561: PPUSH
1562: CALL_OW 12
1566: PUSH
1567: LD_INT 9
1569: PPUSH
1570: LD_INT 11
1572: PPUSH
1573: CALL_OW 12
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: ST_TO_ADDR
// hc_name =  ;
1582: LD_ADDR_OWVAR 26
1586: PUSH
1587: LD_STRING 
1589: ST_TO_ADDR
// hc_class = 2 ;
1590: LD_ADDR_OWVAR 28
1594: PUSH
1595: LD_INT 2
1597: ST_TO_ADDR
// un = CreateHuman ;
1598: LD_ADDR_VAR 0 2
1602: PUSH
1603: CALL_OW 44
1607: ST_TO_ADDR
// PlaceUnitArea ( un , CompResp , false ) ;
1608: LD_VAR 0 2
1612: PPUSH
1613: LD_INT 1
1615: PPUSH
1616: LD_INT 0
1618: PPUSH
1619: CALL_OW 49
// Comp_Units := Comp_Units ^ un ;
1623: LD_ADDR_EXP 4
1627: PUSH
1628: LD_EXP 4
1632: PUSH
1633: LD_VAR 0 2
1637: ADD
1638: ST_TO_ADDR
// Comp_Engs := Comp_Engs ^ un ;
1639: LD_ADDR_EXP 8
1643: PUSH
1644: LD_EXP 8
1648: PUSH
1649: LD_VAR 0 2
1653: ADD
1654: ST_TO_ADDR
// end ;
1655: GO 1442
1657: POP
1658: POP
// for i = 1 to comp_cont do
1659: LD_ADDR_VAR 0 5
1663: PUSH
1664: DOUBLE
1665: LD_INT 1
1667: DEC
1668: ST_TO_ADDR
1669: LD_EXP 3
1673: PUSH
1674: FOR_TO
1675: IFFALSE 1889
// begin hc_sex = Rand ( sex_male , sex_female ) ;
1677: LD_ADDR_OWVAR 27
1681: PUSH
1682: LD_INT 1
1684: PPUSH
1685: LD_INT 2
1687: PPUSH
1688: CALL_OW 12
1692: ST_TO_ADDR
// hc_gallery =  ;
1693: LD_ADDR_OWVAR 33
1697: PUSH
1698: LD_STRING 
1700: ST_TO_ADDR
// hc_skills = [ comp_skill1 + Rand ( - 3 , 1 ) , comp_skill2 + Rand ( - 3 , 0 ) , comp_skill3 + Rand ( 0 , 1 ) , comp_skill4 + Rand ( - 3 , 0 ) ] ;
1701: LD_ADDR_OWVAR 31
1705: PUSH
1706: LD_EXP 12
1710: PUSH
1711: LD_INT 3
1713: NEG
1714: PPUSH
1715: LD_INT 1
1717: PPUSH
1718: CALL_OW 12
1722: PLUS
1723: PUSH
1724: LD_EXP 13
1728: PUSH
1729: LD_INT 3
1731: NEG
1732: PPUSH
1733: LD_INT 0
1735: PPUSH
1736: CALL_OW 12
1740: PLUS
1741: PUSH
1742: LD_EXP 14
1746: PUSH
1747: LD_INT 0
1749: PPUSH
1750: LD_INT 1
1752: PPUSH
1753: CALL_OW 12
1757: PLUS
1758: PUSH
1759: LD_EXP 15
1763: PUSH
1764: LD_INT 3
1766: NEG
1767: PPUSH
1768: LD_INT 0
1770: PPUSH
1771: CALL_OW 12
1775: PLUS
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
1783: LD_ADDR_OWVAR 29
1787: PUSH
1788: LD_INT 8
1790: PPUSH
1791: LD_INT 12
1793: PPUSH
1794: CALL_OW 12
1798: PUSH
1799: LD_INT 9
1801: PPUSH
1802: LD_INT 11
1804: PPUSH
1805: CALL_OW 12
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: ST_TO_ADDR
// hc_name =  ;
1814: LD_ADDR_OWVAR 26
1818: PUSH
1819: LD_STRING 
1821: ST_TO_ADDR
// hc_class = 3 ;
1822: LD_ADDR_OWVAR 28
1826: PUSH
1827: LD_INT 3
1829: ST_TO_ADDR
// un = CreateHuman ;
1830: LD_ADDR_VAR 0 2
1834: PUSH
1835: CALL_OW 44
1839: ST_TO_ADDR
// PlaceUnitArea ( un , CompResp , false ) ;
1840: LD_VAR 0 2
1844: PPUSH
1845: LD_INT 1
1847: PPUSH
1848: LD_INT 0
1850: PPUSH
1851: CALL_OW 49
// Comp_Units := Comp_Units ^ un ;
1855: LD_ADDR_EXP 4
1859: PUSH
1860: LD_EXP 4
1864: PUSH
1865: LD_VAR 0 2
1869: ADD
1870: ST_TO_ADDR
// Comp_Mechs := Comp_Mechs ^ un ;
1871: LD_ADDR_EXP 9
1875: PUSH
1876: LD_EXP 9
1880: PUSH
1881: LD_VAR 0 2
1885: ADD
1886: ST_TO_ADDR
// end ;
1887: GO 1674
1889: POP
1890: POP
// for i = 1 to comp_cont do
1891: LD_ADDR_VAR 0 5
1895: PUSH
1896: DOUBLE
1897: LD_INT 1
1899: DEC
1900: ST_TO_ADDR
1901: LD_EXP 3
1905: PUSH
1906: FOR_TO
1907: IFFALSE 2121
// begin hc_sex = Rand ( sex_male , sex_female ) ;
1909: LD_ADDR_OWVAR 27
1913: PUSH
1914: LD_INT 1
1916: PPUSH
1917: LD_INT 2
1919: PPUSH
1920: CALL_OW 12
1924: ST_TO_ADDR
// hc_gallery =  ;
1925: LD_ADDR_OWVAR 33
1929: PUSH
1930: LD_STRING 
1932: ST_TO_ADDR
// hc_skills = [ comp_skill1 + Rand ( - 3 , 1 ) , comp_skill2 + Rand ( - 3 , 0 ) , comp_skill3 + Rand ( - 3 , 0 ) , comp_skill4 + Rand ( 0 , 1 ) ] ;
1933: LD_ADDR_OWVAR 31
1937: PUSH
1938: LD_EXP 12
1942: PUSH
1943: LD_INT 3
1945: NEG
1946: PPUSH
1947: LD_INT 1
1949: PPUSH
1950: CALL_OW 12
1954: PLUS
1955: PUSH
1956: LD_EXP 13
1960: PUSH
1961: LD_INT 3
1963: NEG
1964: PPUSH
1965: LD_INT 0
1967: PPUSH
1968: CALL_OW 12
1972: PLUS
1973: PUSH
1974: LD_EXP 14
1978: PUSH
1979: LD_INT 3
1981: NEG
1982: PPUSH
1983: LD_INT 0
1985: PPUSH
1986: CALL_OW 12
1990: PLUS
1991: PUSH
1992: LD_EXP 15
1996: PUSH
1997: LD_INT 0
1999: PPUSH
2000: LD_INT 1
2002: PPUSH
2003: CALL_OW 12
2007: PLUS
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
2015: LD_ADDR_OWVAR 29
2019: PUSH
2020: LD_INT 8
2022: PPUSH
2023: LD_INT 12
2025: PPUSH
2026: CALL_OW 12
2030: PUSH
2031: LD_INT 9
2033: PPUSH
2034: LD_INT 11
2036: PPUSH
2037: CALL_OW 12
2041: PUSH
2042: EMPTY
2043: LIST
2044: LIST
2045: ST_TO_ADDR
// hc_name =  ;
2046: LD_ADDR_OWVAR 26
2050: PUSH
2051: LD_STRING 
2053: ST_TO_ADDR
// hc_class = 4 ;
2054: LD_ADDR_OWVAR 28
2058: PUSH
2059: LD_INT 4
2061: ST_TO_ADDR
// un = CreateHuman ;
2062: LD_ADDR_VAR 0 2
2066: PUSH
2067: CALL_OW 44
2071: ST_TO_ADDR
// PlaceUnitArea ( un , CompResp , false ) ;
2072: LD_VAR 0 2
2076: PPUSH
2077: LD_INT 1
2079: PPUSH
2080: LD_INT 0
2082: PPUSH
2083: CALL_OW 49
// Comp_Units := Comp_Units ^ un ;
2087: LD_ADDR_EXP 4
2091: PUSH
2092: LD_EXP 4
2096: PUSH
2097: LD_VAR 0 2
2101: ADD
2102: ST_TO_ADDR
// Comp_Sci := Comp_Sci ^ un ;
2103: LD_ADDR_EXP 10
2107: PUSH
2108: LD_EXP 10
2112: PUSH
2113: LD_VAR 0 2
2117: ADD
2118: ST_TO_ADDR
// end ;
2119: GO 1906
2121: POP
2122: POP
// end ;
2123: LD_VAR 0 1
2127: RET
// function PrepareFlag ; begin
2128: LD_INT 0
2130: PPUSH
// veh_bonus = [ 0 , 10 , 25 ] [ diff_level ] ;
2131: LD_ADDR_EXP 21
2135: PUSH
2136: LD_INT 0
2138: PUSH
2139: LD_INT 10
2141: PUSH
2142: LD_INT 25
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: LIST
2149: PUSH
2150: LD_EXP 16
2154: ARRAY
2155: ST_TO_ADDR
// build_bonus = [ 0 , 15 , 30 ] [ diff_level ] ;
2156: LD_ADDR_EXP 22
2160: PUSH
2161: LD_INT 0
2163: PUSH
2164: LD_INT 15
2166: PUSH
2167: LD_INT 30
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: LIST
2174: PUSH
2175: LD_EXP 16
2179: ARRAY
2180: ST_TO_ADDR
// if Bonus = true then
2181: LD_EXP 19
2185: PUSH
2186: LD_INT 1
2188: EQUAL
2189: IFFALSE 2281
// SetBattleFlag ( comp_side , 59 , 93 , [ [ bfo_defend_bonus_human , bonus_level ] , [ bfo_defend_bonus_vehicle , bonus_level + veh_bonus ] , [ bfo_defend_bonus_building , bonus_level + build_bonus ] , [ bfo_range , 50 ] , [ bfo_height , 100 ] ] ) ;
2191: LD_EXP 1
2195: PPUSH
2196: LD_INT 59
2198: PPUSH
2199: LD_INT 93
2201: PPUSH
2202: LD_INT 1
2204: PUSH
2205: LD_EXP 20
2209: PUSH
2210: EMPTY
2211: LIST
2212: LIST
2213: PUSH
2214: LD_INT 2
2216: PUSH
2217: LD_EXP 20
2221: PUSH
2222: LD_EXP 21
2226: PLUS
2227: PUSH
2228: EMPTY
2229: LIST
2230: LIST
2231: PUSH
2232: LD_INT 3
2234: PUSH
2235: LD_EXP 20
2239: PUSH
2240: LD_EXP 22
2244: PLUS
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PUSH
2250: LD_INT 10
2252: PUSH
2253: LD_INT 50
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PUSH
2260: LD_INT 20
2262: PUSH
2263: LD_INT 100
2265: PUSH
2266: EMPTY
2267: LIST
2268: LIST
2269: PUSH
2270: EMPTY
2271: LIST
2272: LIST
2273: LIST
2274: LIST
2275: LIST
2276: PPUSH
2277: CALL_OW 418
// end ;
2281: LD_VAR 0 1
2285: RET
// export comp_oil , comp_sib ; function PrepareInfo ; begin
2286: LD_INT 0
2288: PPUSH
// comp_oil := [ 48 , 91 , 74 , 116 , 70 , 73 ] ;
2289: LD_ADDR_EXP 36
2293: PUSH
2294: LD_INT 48
2296: PUSH
2297: LD_INT 91
2299: PUSH
2300: LD_INT 74
2302: PUSH
2303: LD_INT 116
2305: PUSH
2306: LD_INT 70
2308: PUSH
2309: LD_INT 73
2311: PUSH
2312: EMPTY
2313: LIST
2314: LIST
2315: LIST
2316: LIST
2317: LIST
2318: LIST
2319: ST_TO_ADDR
// comp_sib := [ 76 , 107 , 65 , 69 ] ;
2320: LD_ADDR_EXP 37
2324: PUSH
2325: LD_INT 76
2327: PUSH
2328: LD_INT 107
2330: PUSH
2331: LD_INT 65
2333: PUSH
2334: LD_INT 69
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: LIST
2341: LIST
2342: ST_TO_ADDR
// end ;
2343: LD_VAR 0 1
2347: RET
// function CheckStrategy ; begin
2348: LD_INT 0
2350: PPUSH
// StrategyI ;
2351: CALL 2656 0 0
// end ; end_of_file
2355: LD_VAR 0 1
2359: RET
// export CanBuildBase , CanBuildFactory , CanBuildLab , CanBuildForts , CanBuildPlants , CanFactoryWork , ArmouryComplete , LabComplete , LabComplete2 , FacComplete , TowerComplete , LabFull1 , LabFull2 , labs , TechOil , TechSolar , TechApe , TechGatling , TechGun , TechHeavyGun , TechRocket , TechRadar , TechRemoteControl , TechLaser , TechAI , TechAI2 , TechAI3 , ProductionRADAR , ProductionCOMPUTER , ProductionAPEMAN , AlertOn , AlertOff , CanAttack , CanProduce , CanBuildRocket ; export function CompTriggers ; begin
2360: LD_INT 0
2362: PPUSH
// CanBuildBase = false ;
2363: LD_ADDR_EXP 38
2367: PUSH
2368: LD_INT 0
2370: ST_TO_ADDR
// CanBuildFactory = false ;
2371: LD_ADDR_EXP 39
2375: PUSH
2376: LD_INT 0
2378: ST_TO_ADDR
// CanBuildLab = false ;
2379: LD_ADDR_EXP 40
2383: PUSH
2384: LD_INT 0
2386: ST_TO_ADDR
// CanBuildForts = false ;
2387: LD_ADDR_EXP 41
2391: PUSH
2392: LD_INT 0
2394: ST_TO_ADDR
// CanBuildPlants = false ;
2395: LD_ADDR_EXP 42
2399: PUSH
2400: LD_INT 0
2402: ST_TO_ADDR
// ArmouryComplete = false ;
2403: LD_ADDR_EXP 44
2407: PUSH
2408: LD_INT 0
2410: ST_TO_ADDR
// LabComplete = false ;
2411: LD_ADDR_EXP 45
2415: PUSH
2416: LD_INT 0
2418: ST_TO_ADDR
// LabComplete2 = false ;
2419: LD_ADDR_EXP 46
2423: PUSH
2424: LD_INT 0
2426: ST_TO_ADDR
// FacComplete = false ;
2427: LD_ADDR_EXP 47
2431: PUSH
2432: LD_INT 0
2434: ST_TO_ADDR
// TowerComplete = false ;
2435: LD_ADDR_EXP 48
2439: PUSH
2440: LD_INT 0
2442: ST_TO_ADDR
// CanFactoryWork = false ;
2443: LD_ADDR_EXP 43
2447: PUSH
2448: LD_INT 0
2450: ST_TO_ADDR
// LabFull1 = false ;
2451: LD_ADDR_EXP 49
2455: PUSH
2456: LD_INT 0
2458: ST_TO_ADDR
// LabFull2 = false ;
2459: LD_ADDR_EXP 50
2463: PUSH
2464: LD_INT 0
2466: ST_TO_ADDR
// labs = 0 ;
2467: LD_ADDR_EXP 51
2471: PUSH
2472: LD_INT 0
2474: ST_TO_ADDR
// TechOil = false ;
2475: LD_ADDR_EXP 52
2479: PUSH
2480: LD_INT 0
2482: ST_TO_ADDR
// TechSolar = false ;
2483: LD_ADDR_EXP 53
2487: PUSH
2488: LD_INT 0
2490: ST_TO_ADDR
// TechApe = false ;
2491: LD_ADDR_EXP 54
2495: PUSH
2496: LD_INT 0
2498: ST_TO_ADDR
// TechGatling = false ;
2499: LD_ADDR_EXP 55
2503: PUSH
2504: LD_INT 0
2506: ST_TO_ADDR
// TechGun = false ;
2507: LD_ADDR_EXP 56
2511: PUSH
2512: LD_INT 0
2514: ST_TO_ADDR
// TechHeavyGun = false ;
2515: LD_ADDR_EXP 57
2519: PUSH
2520: LD_INT 0
2522: ST_TO_ADDR
// TechRocket = false ;
2523: LD_ADDR_EXP 58
2527: PUSH
2528: LD_INT 0
2530: ST_TO_ADDR
// TechRadar = false ;
2531: LD_ADDR_EXP 59
2535: PUSH
2536: LD_INT 0
2538: ST_TO_ADDR
// TechRemoteControl = false ;
2539: LD_ADDR_EXP 60
2543: PUSH
2544: LD_INT 0
2546: ST_TO_ADDR
// TechLaser = false ;
2547: LD_ADDR_EXP 61
2551: PUSH
2552: LD_INT 0
2554: ST_TO_ADDR
// TechAI = false ;
2555: LD_ADDR_EXP 62
2559: PUSH
2560: LD_INT 0
2562: ST_TO_ADDR
// TechAI2 = false ;
2563: LD_ADDR_EXP 63
2567: PUSH
2568: LD_INT 0
2570: ST_TO_ADDR
// TechAI3 = false ;
2571: LD_ADDR_EXP 64
2575: PUSH
2576: LD_INT 0
2578: ST_TO_ADDR
// ProductionRADAR = false ;
2579: LD_ADDR_EXP 65
2583: PUSH
2584: LD_INT 0
2586: ST_TO_ADDR
// ProductionCOMPUTER = false ;
2587: LD_ADDR_EXP 66
2591: PUSH
2592: LD_INT 0
2594: ST_TO_ADDR
// ProductionAPEMAN = false ;
2595: LD_ADDR_EXP 67
2599: PUSH
2600: LD_INT 0
2602: ST_TO_ADDR
// EnemyDetected = false ;
2603: LD_ADDR_EXP 84
2607: PUSH
2608: LD_INT 0
2610: ST_TO_ADDR
// AlertOn = false ;
2611: LD_ADDR_EXP 68
2615: PUSH
2616: LD_INT 0
2618: ST_TO_ADDR
// AlertOff = true ;
2619: LD_ADDR_EXP 69
2623: PUSH
2624: LD_INT 1
2626: ST_TO_ADDR
// CanAttack = false ;
2627: LD_ADDR_EXP 70
2631: PUSH
2632: LD_INT 0
2634: ST_TO_ADDR
// CanProduce = false ;
2635: LD_ADDR_EXP 71
2639: PUSH
2640: LD_INT 0
2642: ST_TO_ADDR
// CanBuildRocket = false ;
2643: LD_ADDR_EXP 72
2647: PUSH
2648: LD_INT 0
2650: ST_TO_ADDR
// end ; end_of_file
2651: LD_VAR 0 1
2655: RET
// export function StrategyI ; var i , un , pos_x , pos_y ; begin
2656: LD_INT 0
2658: PPUSH
2659: PPUSH
2660: PPUSH
2661: PPUSH
2662: PPUSH
// SetTech ( 20 , comp_side , state_researched ) ;
2663: LD_INT 20
2665: PPUSH
2666: LD_EXP 1
2670: PPUSH
2671: LD_INT 2
2673: PPUSH
2674: CALL_OW 322
// for i = 1 to comp_engs do
2678: LD_ADDR_VAR 0 2
2682: PUSH
2683: DOUBLE
2684: LD_INT 1
2686: DEC
2687: ST_TO_ADDR
2688: LD_EXP 8
2692: PUSH
2693: FOR_TO
2694: IFFALSE 2722
// begin BuildDepot ( comp_engs [ i ] , 61 , 106 , 0 ) ;
2696: LD_EXP 8
2700: PUSH
2701: LD_VAR 0 2
2705: ARRAY
2706: PPUSH
2707: LD_INT 61
2709: PPUSH
2710: LD_INT 106
2712: PPUSH
2713: LD_INT 0
2715: PPUSH
2716: CALL 7427 0 4
// end ;
2720: GO 2693
2722: POP
2723: POP
// Wait ( 0 0$03 ) ;
2724: LD_INT 105
2726: PPUSH
2727: CALL_OW 67
// for i = 1 to comp_mechs do
2731: LD_ADDR_VAR 0 2
2735: PUSH
2736: DOUBLE
2737: LD_INT 1
2739: DEC
2740: ST_TO_ADDR
2741: LD_EXP 9
2745: PUSH
2746: FOR_TO
2747: IFFALSE 2793
// begin ComMoveXY ( comp_mechs [ i ] , 59 , 104 ) ;
2749: LD_EXP 9
2753: PUSH
2754: LD_VAR 0 2
2758: ARRAY
2759: PPUSH
2760: LD_INT 59
2762: PPUSH
2763: LD_INT 104
2765: PPUSH
2766: CALL_OW 111
// ComMoveXY ( comp_sci [ i ] , 59 , 104 ) ;
2770: LD_EXP 10
2774: PUSH
2775: LD_VAR 0 2
2779: ARRAY
2780: PPUSH
2781: LD_INT 59
2783: PPUSH
2784: LD_INT 104
2786: PPUSH
2787: CALL_OW 111
// end ;
2791: GO 2746
2793: POP
2794: POP
// ComMoveXY ( comp_sci [ 1 ] , comp_oil [ 1 ] , comp_oil [ 2 ] ) ;
2795: LD_EXP 10
2799: PUSH
2800: LD_INT 1
2802: ARRAY
2803: PPUSH
2804: LD_EXP 36
2808: PUSH
2809: LD_INT 1
2811: ARRAY
2812: PPUSH
2813: LD_EXP 36
2817: PUSH
2818: LD_INT 2
2820: ARRAY
2821: PPUSH
2822: CALL_OW 111
// AddComMoveXY ( comp_sci [ 1 ] , GetX ( comp_sci [ 3 ] ) , GetY ( comp_sci [ 3 ] ) ) ;
2826: LD_EXP 10
2830: PUSH
2831: LD_INT 1
2833: ARRAY
2834: PPUSH
2835: LD_EXP 10
2839: PUSH
2840: LD_INT 3
2842: ARRAY
2843: PPUSH
2844: CALL_OW 250
2848: PPUSH
2849: LD_EXP 10
2853: PUSH
2854: LD_INT 3
2856: ARRAY
2857: PPUSH
2858: CALL_OW 251
2862: PPUSH
2863: CALL_OW 171
// if comp_oil > 2 then
2867: LD_EXP 36
2871: PUSH
2872: LD_INT 2
2874: GREATER
2875: IFFALSE 2949
// begin ComMoveXY ( comp_sci [ 2 ] , comp_oil [ 3 ] , comp_oil [ 4 ] ) ;
2877: LD_EXP 10
2881: PUSH
2882: LD_INT 2
2884: ARRAY
2885: PPUSH
2886: LD_EXP 36
2890: PUSH
2891: LD_INT 3
2893: ARRAY
2894: PPUSH
2895: LD_EXP 36
2899: PUSH
2900: LD_INT 4
2902: ARRAY
2903: PPUSH
2904: CALL_OW 111
// AddComMoveXY ( comp_sci [ 2 ] , GetX ( comp_sci [ 3 ] ) , GetY ( comp_sci [ 3 ] ) ) ;
2908: LD_EXP 10
2912: PUSH
2913: LD_INT 2
2915: ARRAY
2916: PPUSH
2917: LD_EXP 10
2921: PUSH
2922: LD_INT 3
2924: ARRAY
2925: PPUSH
2926: CALL_OW 250
2930: PPUSH
2931: LD_EXP 10
2935: PUSH
2936: LD_INT 3
2938: ARRAY
2939: PPUSH
2940: CALL_OW 251
2944: PPUSH
2945: CALL_OW 171
// end ; repeat begin Wait ( 0 0$01 ) ;
2949: LD_INT 35
2951: PPUSH
2952: CALL_OW 67
// end until CanBuildBase = true ;
2956: LD_EXP 38
2960: PUSH
2961: LD_INT 1
2963: EQUAL
2964: IFFALSE 2949
// Wait ( 0 0$02 ) ;
2966: LD_INT 70
2968: PPUSH
2969: CALL_OW 67
// AddComBuild ( comp_engs [ 1 ] , b_oil_mine , comp_oil [ 1 ] , comp_oil [ 2 ] , Rand ( 0 , 5 ) ) ;
2973: LD_EXP 8
2977: PUSH
2978: LD_INT 1
2980: ARRAY
2981: PPUSH
2982: LD_INT 29
2984: PPUSH
2985: LD_EXP 36
2989: PUSH
2990: LD_INT 1
2992: ARRAY
2993: PPUSH
2994: LD_EXP 36
2998: PUSH
2999: LD_INT 2
3001: ARRAY
3002: PPUSH
3003: LD_INT 0
3005: PPUSH
3006: LD_INT 5
3008: PPUSH
3009: CALL_OW 12
3013: PPUSH
3014: CALL_OW 205
// AddComBuild ( comp_engs [ 3 ] , b_siberite_mine , 53 , 102 , Rand ( 0 , 5 ) ) ;
3018: LD_EXP 8
3022: PUSH
3023: LD_INT 3
3025: ARRAY
3026: PPUSH
3027: LD_INT 30
3029: PPUSH
3030: LD_INT 53
3032: PPUSH
3033: LD_INT 102
3035: PPUSH
3036: LD_INT 0
3038: PPUSH
3039: LD_INT 5
3041: PPUSH
3042: CALL_OW 12
3046: PPUSH
3047: CALL_OW 205
// if comp_oil > 2 then
3051: LD_EXP 36
3055: PUSH
3056: LD_INT 2
3058: GREATER
3059: IFFALSE 3106
// begin AddComBuild ( comp_engs [ 2 ] , b_oil_mine , comp_oil [ 3 ] , comp_oil [ 4 ] , Rand ( 0 , 5 ) ) ;
3061: LD_EXP 8
3065: PUSH
3066: LD_INT 2
3068: ARRAY
3069: PPUSH
3070: LD_INT 29
3072: PPUSH
3073: LD_EXP 36
3077: PUSH
3078: LD_INT 3
3080: ARRAY
3081: PPUSH
3082: LD_EXP 36
3086: PUSH
3087: LD_INT 4
3089: ARRAY
3090: PPUSH
3091: LD_INT 0
3093: PPUSH
3094: LD_INT 5
3096: PPUSH
3097: CALL_OW 12
3101: PPUSH
3102: CALL_OW 205
// end ; for i = 3 to comp_engs do
3106: LD_ADDR_VAR 0 2
3110: PUSH
3111: DOUBLE
3112: LD_INT 3
3114: DEC
3115: ST_TO_ADDR
3116: LD_EXP 8
3120: PUSH
3121: FOR_TO
3122: IFFALSE 3153
// begin AddComBuild ( comp_engs [ i ] , b_armoury , 61 , 84 , 3 ) ;
3124: LD_EXP 8
3128: PUSH
3129: LD_VAR 0 2
3133: ARRAY
3134: PPUSH
3135: LD_INT 4
3137: PPUSH
3138: LD_INT 61
3140: PPUSH
3141: LD_INT 84
3143: PPUSH
3144: LD_INT 3
3146: PPUSH
3147: CALL_OW 205
// end ;
3151: GO 3121
3153: POP
3154: POP
// end ;
3155: LD_VAR 0 1
3159: RET
// every 0 0$01 trigger ArmouryComplete = true and AlertOff = true do var i ;
3160: LD_EXP 44
3164: PUSH
3165: LD_INT 1
3167: EQUAL
3168: PUSH
3169: LD_EXP 69
3173: PUSH
3174: LD_INT 1
3176: EQUAL
3177: AND
3178: IFFALSE 3435
3180: GO 3182
3182: DISABLE
3183: LD_INT 0
3185: PPUSH
// begin for i = 1 to comp_sold do
3186: LD_ADDR_VAR 0 1
3190: PUSH
3191: DOUBLE
3192: LD_INT 1
3194: DEC
3195: ST_TO_ADDR
3196: LD_EXP 7
3200: PUSH
3201: FOR_TO
3202: IFFALSE 3230
// begin ComEnterUnit ( comp_sold [ i ] , comp_arm [ 1 ] ) ;
3204: LD_EXP 7
3208: PUSH
3209: LD_VAR 0 1
3213: ARRAY
3214: PPUSH
3215: LD_EXP 28
3219: PUSH
3220: LD_INT 1
3222: ARRAY
3223: PPUSH
3224: CALL_OW 120
// end ;
3228: GO 3201
3230: POP
3231: POP
// for i = 1 to comp_mechs do
3232: LD_ADDR_VAR 0 1
3236: PUSH
3237: DOUBLE
3238: LD_INT 1
3240: DEC
3241: ST_TO_ADDR
3242: LD_EXP 9
3246: PUSH
3247: FOR_TO
3248: IFFALSE 3270
// begin SetClass ( comp_mechs [ i ] , class_engineer ) ;
3250: LD_EXP 9
3254: PUSH
3255: LD_VAR 0 1
3259: ARRAY
3260: PPUSH
3261: LD_INT 2
3263: PPUSH
3264: CALL_OW 336
// end ;
3268: GO 3247
3270: POP
3271: POP
// Wait ( 0 0$01 ) ;
3272: LD_INT 35
3274: PPUSH
3275: CALL_OW 67
// for i = 1 to comp_mechs do
3279: LD_ADDR_VAR 0 1
3283: PUSH
3284: DOUBLE
3285: LD_INT 1
3287: DEC
3288: ST_TO_ADDR
3289: LD_EXP 9
3293: PUSH
3294: FOR_TO
3295: IFFALSE 3326
// begin ComBuild ( comp_mechs [ i ] , b_lab , 53 , 97 , 1 ) ;
3297: LD_EXP 9
3301: PUSH
3302: LD_VAR 0 1
3306: ARRAY
3307: PPUSH
3308: LD_INT 6
3310: PPUSH
3311: LD_INT 53
3313: PPUSH
3314: LD_INT 97
3316: PPUSH
3317: LD_INT 1
3319: PPUSH
3320: CALL_OW 145
// end ;
3324: GO 3294
3326: POP
3327: POP
// repeat begin Wait ( 0 0$01 ) ;
3328: LD_INT 35
3330: PPUSH
3331: CALL_OW 67
// end until LabComplete = true ;
3335: LD_EXP 45
3339: PUSH
3340: LD_INT 1
3342: EQUAL
3343: IFFALSE 3328
// for i = 1 to comp_sci do
3345: LD_ADDR_VAR 0 1
3349: PUSH
3350: DOUBLE
3351: LD_INT 1
3353: DEC
3354: ST_TO_ADDR
3355: LD_EXP 10
3359: PUSH
3360: FOR_TO
3361: IFFALSE 3385
// begin ComEnterUnit ( comp_sci [ i ] , comp_lab ) ;
3363: LD_EXP 10
3367: PUSH
3368: LD_VAR 0 1
3372: ARRAY
3373: PPUSH
3374: LD_EXP 26
3378: PPUSH
3379: CALL_OW 120
// end ;
3383: GO 3360
3385: POP
3386: POP
// AddComResearch ( comp_lab , tech_oilpow ) ;
3387: LD_EXP 26
3391: PPUSH
3392: LD_INT 46
3394: PPUSH
3395: CALL_OW 184
// AddComResearch ( comp_lab , tech_oileng ) ;
3399: LD_EXP 26
3403: PPUSH
3404: LD_INT 47
3406: PPUSH
3407: CALL_OW 184
// AddComResearch ( comp_lab , tech_solpow ) ;
3411: LD_EXP 26
3415: PPUSH
3416: LD_INT 35
3418: PPUSH
3419: CALL_OW 184
// AddComResearch ( comp_lab , tech_soleng ) ;
3423: LD_EXP 26
3427: PPUSH
3428: LD_INT 45
3430: PPUSH
3431: CALL_OW 184
// end ;
3435: PPOPN 1
3437: END
// every 0 0$01 trigger AlertOff = true and CanBuildPlants = true do var i ;
3438: LD_EXP 69
3442: PUSH
3443: LD_INT 1
3445: EQUAL
3446: PUSH
3447: LD_EXP 42
3451: PUSH
3452: LD_INT 1
3454: EQUAL
3455: AND
3456: IFFALSE 3833
3458: GO 3460
3460: DISABLE
3461: LD_INT 0
3463: PPUSH
// begin for i = 1 to comp_engs do
3464: LD_ADDR_VAR 0 1
3468: PUSH
3469: DOUBLE
3470: LD_INT 1
3472: DEC
3473: ST_TO_ADDR
3474: LD_EXP 8
3478: PUSH
3479: FOR_TO
3480: IFFALSE 3707
// begin AddComBuild ( comp_engs [ i ] , b_oil_power , 57 , 110 , Rand ( 0 , 5 ) ) ;
3482: LD_EXP 8
3486: PUSH
3487: LD_VAR 0 1
3491: ARRAY
3492: PPUSH
3493: LD_INT 26
3495: PPUSH
3496: LD_INT 57
3498: PPUSH
3499: LD_INT 110
3501: PPUSH
3502: LD_INT 0
3504: PPUSH
3505: LD_INT 5
3507: PPUSH
3508: CALL_OW 12
3512: PPUSH
3513: CALL_OW 205
// AddComBuild ( comp_engs [ i ] , b_oil_power , 46 , 88 , Rand ( 0 , 5 ) ) ;
3517: LD_EXP 8
3521: PUSH
3522: LD_VAR 0 1
3526: ARRAY
3527: PPUSH
3528: LD_INT 26
3530: PPUSH
3531: LD_INT 46
3533: PPUSH
3534: LD_INT 88
3536: PPUSH
3537: LD_INT 0
3539: PPUSH
3540: LD_INT 5
3542: PPUSH
3543: CALL_OW 12
3547: PPUSH
3548: CALL_OW 205
// AddComBuild ( comp_engs [ i ] , b_solar_power , 53 , 84 , Rand ( 0 , 5 ) ) ;
3552: LD_EXP 8
3556: PUSH
3557: LD_VAR 0 1
3561: ARRAY
3562: PPUSH
3563: LD_INT 27
3565: PPUSH
3566: LD_INT 53
3568: PPUSH
3569: LD_INT 84
3571: PPUSH
3572: LD_INT 0
3574: PPUSH
3575: LD_INT 5
3577: PPUSH
3578: CALL_OW 12
3582: PPUSH
3583: CALL_OW 205
// AddComBuild ( comp_engs [ i ] , b_bunker , 71 , 86 , 2 ) ;
3587: LD_EXP 8
3591: PUSH
3592: LD_VAR 0 1
3596: ARRAY
3597: PPUSH
3598: LD_INT 32
3600: PPUSH
3601: LD_INT 71
3603: PPUSH
3604: LD_INT 86
3606: PPUSH
3607: LD_INT 2
3609: PPUSH
3610: CALL_OW 205
// AddComBuild ( comp_engs [ i ] , b_bunker , 47 , 82 , 2 ) ;
3614: LD_EXP 8
3618: PUSH
3619: LD_VAR 0 1
3623: ARRAY
3624: PPUSH
3625: LD_INT 32
3627: PPUSH
3628: LD_INT 47
3630: PPUSH
3631: LD_INT 82
3633: PPUSH
3634: LD_INT 2
3636: PPUSH
3637: CALL_OW 205
// if diff_def > 2 then
3641: LD_EXP 17
3645: PUSH
3646: LD_INT 2
3648: GREATER
3649: IFFALSE 3678
// begin AddComBuild ( comp_engs [ i ] , b_bunker , 81 , 96 , 4 ) ;
3651: LD_EXP 8
3655: PUSH
3656: LD_VAR 0 1
3660: ARRAY
3661: PPUSH
3662: LD_INT 32
3664: PPUSH
3665: LD_INT 81
3667: PPUSH
3668: LD_INT 96
3670: PPUSH
3671: LD_INT 4
3673: PPUSH
3674: CALL_OW 205
// end ; AddComBuild ( comp_mechs [ i ] , b_workshop , 68 , 100 , 5 ) ;
3678: LD_EXP 9
3682: PUSH
3683: LD_VAR 0 1
3687: ARRAY
3688: PPUSH
3689: LD_INT 2
3691: PPUSH
3692: LD_INT 68
3694: PPUSH
3695: LD_INT 100
3697: PPUSH
3698: LD_INT 5
3700: PPUSH
3701: CALL_OW 205
// end ;
3705: GO 3479
3707: POP
3708: POP
// if diff_def < 3 then
3709: LD_EXP 17
3713: PUSH
3714: LD_INT 3
3716: LESS
3717: IFFALSE 3736
// begin repeat begin Wait ( 0 0$01 ) ;
3719: LD_INT 35
3721: PPUSH
3722: CALL_OW 67
// end until comp_towers >= 2 ;
3726: LD_EXP 29
3730: PUSH
3731: LD_INT 2
3733: GREATEREQUAL
3734: IFFALSE 3719
// end ; if diff_def = 3 then
3736: LD_EXP 17
3740: PUSH
3741: LD_INT 3
3743: EQUAL
3744: IFFALSE 3763
// begin repeat begin Wait ( 0 0$01 ) ;
3746: LD_INT 35
3748: PPUSH
3749: CALL_OW 67
// end until comp_towers >= 3 ;
3753: LD_EXP 29
3757: PUSH
3758: LD_INT 3
3760: GREATEREQUAL
3761: IFFALSE 3746
// end ; for i = 1 to comp_towers do
3763: LD_ADDR_VAR 0 1
3767: PUSH
3768: DOUBLE
3769: LD_INT 1
3771: DEC
3772: ST_TO_ADDR
3773: LD_EXP 29
3777: PUSH
3778: FOR_TO
3779: IFFALSE 3831
// begin ComExitBuilding ( comp_sold [ i ] ) ;
3781: LD_EXP 7
3785: PUSH
3786: LD_VAR 0 1
3790: ARRAY
3791: PPUSH
3792: CALL_OW 122
// Wait ( 0 0$01 ) ;
3796: LD_INT 35
3798: PPUSH
3799: CALL_OW 67
// ComEnterUnit ( comp_sold [ i ] , comp_towers [ i ] ) ;
3803: LD_EXP 7
3807: PUSH
3808: LD_VAR 0 1
3812: ARRAY
3813: PPUSH
3814: LD_EXP 29
3818: PUSH
3819: LD_VAR 0 1
3823: ARRAY
3824: PPUSH
3825: CALL_OW 120
// end ;
3829: GO 3778
3831: POP
3832: POP
// end ;
3833: PPOPN 1
3835: END
// every 0 0$01 trigger FacComplete = true do var i ;
3836: LD_EXP 47
3840: PUSH
3841: LD_INT 1
3843: EQUAL
3844: IFFALSE 3920
3846: GO 3848
3848: DISABLE
3849: LD_INT 0
3851: PPUSH
// begin for i = 1 to comp_mechs do
3852: LD_ADDR_VAR 0 1
3856: PUSH
3857: DOUBLE
3858: LD_INT 1
3860: DEC
3861: ST_TO_ADDR
3862: LD_EXP 9
3866: PUSH
3867: FOR_TO
3868: IFFALSE 3910
// begin ComEnterUnit ( comp_mechs [ i ] , comp_factory ) ;
3870: LD_EXP 9
3874: PUSH
3875: LD_VAR 0 1
3879: ARRAY
3880: PPUSH
3881: LD_EXP 25
3885: PPUSH
3886: CALL_OW 120
// AddComChangeProfession ( comp_mechs [ i ] , class_mechanic ) ;
3890: LD_EXP 9
3894: PUSH
3895: LD_VAR 0 1
3899: ARRAY
3900: PPUSH
3901: LD_INT 3
3903: PPUSH
3904: CALL_OW 183
// end ;
3908: GO 3867
3910: POP
3911: POP
// CanFactoryWork = true ;
3912: LD_ADDR_EXP 43
3916: PUSH
3917: LD_INT 1
3919: ST_TO_ADDR
// end ;
3920: PPOPN 1
3922: END
// every 0 0$01 trigger Researched ( comp_side , tech_ai ) = true do var i ;
3923: LD_EXP 1
3927: PPUSH
3928: LD_INT 32
3930: PPUSH
3931: CALL_OW 325
3935: PUSH
3936: LD_INT 1
3938: EQUAL
3939: IFFALSE 4023
3941: GO 3943
3943: DISABLE
3944: LD_INT 0
3946: PPUSH
// begin for i = 1 to comp_engs do
3947: LD_ADDR_VAR 0 1
3951: PUSH
3952: DOUBLE
3953: LD_INT 1
3955: DEC
3956: ST_TO_ADDR
3957: LD_EXP 8
3961: PUSH
3962: FOR_TO
3963: IFFALSE 4021
// begin AddComBuild ( comp_engs [ i ] , b_turret , 55 , 82 , 2 ) ;
3965: LD_EXP 8
3969: PUSH
3970: LD_VAR 0 1
3974: ARRAY
3975: PPUSH
3976: LD_INT 33
3978: PPUSH
3979: LD_INT 55
3981: PPUSH
3982: LD_INT 82
3984: PPUSH
3985: LD_INT 2
3987: PPUSH
3988: CALL_OW 205
// AddComBuild ( comp_engs [ i ] , b_turret , 75 , 106 , 4 ) ;
3992: LD_EXP 8
3996: PUSH
3997: LD_VAR 0 1
4001: ARRAY
4002: PPUSH
4003: LD_INT 33
4005: PPUSH
4006: LD_INT 75
4008: PPUSH
4009: LD_INT 106
4011: PPUSH
4012: LD_INT 4
4014: PPUSH
4015: CALL_OW 205
// end ;
4019: GO 3962
4021: POP
4022: POP
// end ;
4023: PPOPN 1
4025: END
// every 0 0$30 trigger CanFactoryWork = true and comp_towers > 1 do var i ;
4026: LD_EXP 43
4030: PUSH
4031: LD_INT 1
4033: EQUAL
4034: PUSH
4035: LD_EXP 29
4039: PUSH
4040: LD_INT 1
4042: GREATER
4043: AND
4044: IFFALSE 4186
4046: GO 4048
4048: DISABLE
4049: LD_INT 0
4051: PPUSH
// begin AddComConstruct ( comp_factory , us_medium_tracked , engine_combustion , control_manual , us_cargo_bay ) ;
4052: LD_EXP 25
4056: PPUSH
4057: LD_INT 3
4059: PPUSH
4060: LD_INT 1
4062: PPUSH
4063: LD_INT 1
4065: PPUSH
4066: LD_INT 12
4068: PPUSH
4069: CALL_OW 185
// Wait ( 0 0$35 ) ;
4073: LD_INT 1225
4075: PPUSH
4076: CALL_OW 67
// for i = 1 to comp_towers do
4080: LD_ADDR_VAR 0 1
4084: PUSH
4085: DOUBLE
4086: LD_INT 1
4088: DEC
4089: ST_TO_ADDR
4090: LD_EXP 29
4094: PUSH
4095: FOR_TO
4096: IFFALSE 4184
// begin if diff_def = 1 then
4098: LD_EXP 17
4102: PUSH
4103: LD_INT 1
4105: EQUAL
4106: IFFALSE 4126
// begin AddComPlaceWeapon ( comp_towers [ i ] , us_machine_gun ) ;
4108: LD_EXP 29
4112: PUSH
4113: LD_VAR 0 1
4117: ARRAY
4118: PPUSH
4119: LD_INT 2
4121: PPUSH
4122: CALL_OW 208
// end ; if diff_def = 2 then
4126: LD_EXP 17
4130: PUSH
4131: LD_INT 2
4133: EQUAL
4134: IFFALSE 4154
// begin AddComPlaceWeapon ( comp_towers [ i ] , us_gatling_gun ) ;
4136: LD_EXP 29
4140: PUSH
4141: LD_VAR 0 1
4145: ARRAY
4146: PPUSH
4147: LD_INT 4
4149: PPUSH
4150: CALL_OW 208
// end ; if diff_def >= 3 then
4154: LD_EXP 17
4158: PUSH
4159: LD_INT 3
4161: GREATEREQUAL
4162: IFFALSE 4182
// begin AddComPlaceWeapon ( comp_towers [ i ] , us_double_gun ) ;
4164: LD_EXP 29
4168: PUSH
4169: LD_VAR 0 1
4173: ARRAY
4174: PPUSH
4175: LD_INT 5
4177: PPUSH
4178: CALL_OW 208
// end ; end ;
4182: GO 4095
4184: POP
4185: POP
// end ;
4186: PPOPN 1
4188: END
// every 0 0$02 trigger Researched ( comp_side , tech_advmet ) = true do var i ;
4189: LD_EXP 1
4193: PPUSH
4194: LD_INT 34
4196: PPUSH
4197: CALL_OW 325
4201: PUSH
4202: LD_INT 1
4204: EQUAL
4205: IFFALSE 4363
4207: GO 4209
4209: DISABLE
4210: LD_INT 0
4212: PPUSH
// begin if diff_def = 1 then
4213: LD_EXP 17
4217: PUSH
4218: LD_INT 1
4220: EQUAL
4221: IFFALSE 4263
// begin for i = 1 to comp_towers do
4223: LD_ADDR_VAR 0 1
4227: PUSH
4228: DOUBLE
4229: LD_INT 1
4231: DEC
4232: ST_TO_ADDR
4233: LD_EXP 29
4237: PUSH
4238: FOR_TO
4239: IFFALSE 4261
// begin AddComPlaceWeapon ( comp_towers [ i ] , us_double_gun ) ;
4241: LD_EXP 29
4245: PUSH
4246: LD_VAR 0 1
4250: ARRAY
4251: PPUSH
4252: LD_INT 5
4254: PPUSH
4255: CALL_OW 208
// end ;
4259: GO 4238
4261: POP
4262: POP
// end ; if diff_def = 2 then
4263: LD_EXP 17
4267: PUSH
4268: LD_INT 2
4270: EQUAL
4271: IFFALSE 4313
// begin for i = 1 to comp_towers do
4273: LD_ADDR_VAR 0 1
4277: PUSH
4278: DOUBLE
4279: LD_INT 1
4281: DEC
4282: ST_TO_ADDR
4283: LD_EXP 29
4287: PUSH
4288: FOR_TO
4289: IFFALSE 4311
// begin AddComPlaceWeapon ( comp_towers [ i ] , us_heavy_gun ) ;
4291: LD_EXP 29
4295: PUSH
4296: LD_VAR 0 1
4300: ARRAY
4301: PPUSH
4302: LD_INT 6
4304: PPUSH
4305: CALL_OW 208
// end ;
4309: GO 4288
4311: POP
4312: POP
// end ; if diff_def > 2 then
4313: LD_EXP 17
4317: PUSH
4318: LD_INT 2
4320: GREATER
4321: IFFALSE 4363
// begin for i = 1 to comp_towers do
4323: LD_ADDR_VAR 0 1
4327: PUSH
4328: DOUBLE
4329: LD_INT 1
4331: DEC
4332: ST_TO_ADDR
4333: LD_EXP 29
4337: PUSH
4338: FOR_TO
4339: IFFALSE 4361
// begin AddComPlaceWeapon ( comp_towers [ i ] , us_rocket_launcher ) ;
4341: LD_EXP 29
4345: PUSH
4346: LD_VAR 0 1
4350: ARRAY
4351: PPUSH
4352: LD_INT 7
4354: PPUSH
4355: CALL_OW 208
// end ;
4359: GO 4338
4361: POP
4362: POP
// end ; end ;
4363: PPOPN 1
4365: END
// every 0 0$30 trigger LabComplete = true do
4366: LD_EXP 45
4370: PUSH
4371: LD_INT 1
4373: EQUAL
4374: IFFALSE 4465
4376: GO 4378
4378: DISABLE
// begin if GetNation ( comp_sold [ 1 ] ) < 3 then
4379: LD_EXP 7
4383: PUSH
4384: LD_INT 1
4386: ARRAY
4387: PPUSH
4388: CALL_OW 248
4392: PUSH
4393: LD_INT 3
4395: LESS
4396: IFFALSE 4422
// begin AddComUpgradeLab ( comp_lab , b_lab_weapon ) ;
4398: LD_EXP 26
4402: PPUSH
4403: LD_INT 10
4405: PPUSH
4406: CALL_OW 207
// AddComUpgradeLab ( comp_lab , b_lab_opto ) ;
4410: LD_EXP 26
4414: PPUSH
4415: LD_INT 15
4417: PPUSH
4418: CALL_OW 207
// end ; if GetNation ( comp_sold [ 1 ] ) = 3 then
4422: LD_EXP 7
4426: PUSH
4427: LD_INT 1
4429: ARRAY
4430: PPUSH
4431: CALL_OW 248
4435: PUSH
4436: LD_INT 3
4438: EQUAL
4439: IFFALSE 4465
// begin AddComUpgradeLab ( comp_lab , b_lab_weapon ) ;
4441: LD_EXP 26
4445: PPUSH
4446: LD_INT 10
4448: PPUSH
4449: CALL_OW 207
// AddComUpgradeLab ( comp_lab , b_lab_computer ) ;
4453: LD_EXP 26
4457: PPUSH
4458: LD_INT 12
4460: PPUSH
4461: CALL_OW 207
// end ; end ;
4465: END
// every 0 0$01 trigger LabFull1 do var i ;
4466: LD_EXP 49
4470: IFFALSE 4720
4472: GO 4474
4474: DISABLE
4475: LD_INT 0
4477: PPUSH
// begin for i = 1 to comp_sci do
4478: LD_ADDR_VAR 0 1
4482: PUSH
4483: DOUBLE
4484: LD_INT 1
4486: DEC
4487: ST_TO_ADDR
4488: LD_EXP 10
4492: PUSH
4493: FOR_TO
4494: IFFALSE 4518
// begin AddComEnterUnit ( comp_sci [ i ] , comp_lab ) ;
4496: LD_EXP 10
4500: PUSH
4501: LD_VAR 0 1
4505: ARRAY
4506: PPUSH
4507: LD_EXP 26
4511: PPUSH
4512: CALL_OW 180
// end ;
4516: GO 4493
4518: POP
4519: POP
// AddComResearch ( comp_lab , tech_tech1 ) ;
4520: LD_EXP 26
4524: PPUSH
4525: LD_INT 48
4527: PPUSH
4528: CALL_OW 184
// AddComResearch ( comp_lab , tech_tech2 ) ;
4532: LD_EXP 26
4536: PPUSH
4537: LD_INT 49
4539: PPUSH
4540: CALL_OW 184
// AddComResearch ( comp_lab , tech_tech3 ) ;
4544: LD_EXP 26
4548: PPUSH
4549: LD_INT 50
4551: PPUSH
4552: CALL_OW 184
// AddComResearch ( comp_lab , tech_weap1 ) ;
4556: LD_EXP 26
4560: PPUSH
4561: LD_INT 51
4563: PPUSH
4564: CALL_OW 184
// AddComResearch ( comp_lab , tech_weap2 ) ;
4568: LD_EXP 26
4572: PPUSH
4573: LD_INT 52
4575: PPUSH
4576: CALL_OW 184
// AddComResearch ( comp_lab , tech_gatling ) ;
4580: LD_EXP 26
4584: PPUSH
4585: LD_INT 69
4587: PPUSH
4588: CALL_OW 184
// AddComResearch ( comp_lab , tech_gun ) ;
4592: LD_EXP 26
4596: PPUSH
4597: LD_INT 39
4599: PPUSH
4600: CALL_OW 184
// AddComResearch ( comp_lab , tech_opto1 ) ;
4604: LD_EXP 26
4608: PPUSH
4609: LD_INT 60
4611: PPUSH
4612: CALL_OW 184
// AddComResearch ( comp_lab , tech_radar ) ;
4616: LD_EXP 26
4620: PPUSH
4621: LD_INT 6
4623: PPUSH
4624: CALL_OW 184
// AddComResearch ( comp_lab , tech_opto2 ) ;
4628: LD_EXP 26
4632: PPUSH
4633: LD_INT 61
4635: PPUSH
4636: CALL_OW 184
// AddComResearch ( comp_lab , tech_remcont ) ;
4640: LD_EXP 26
4644: PPUSH
4645: LD_INT 15
4647: PPUSH
4648: CALL_OW 184
// if diff_attack > 1 then
4652: LD_EXP 18
4656: PUSH
4657: LD_INT 1
4659: GREATER
4660: IFFALSE 4686
// begin AddComResearch ( comp_lab , tech_advmet ) ;
4662: LD_EXP 26
4666: PPUSH
4667: LD_INT 34
4669: PPUSH
4670: CALL_OW 184
// AddComResearch ( comp_lab , tech_rocket ) ;
4674: LD_EXP 26
4678: PPUSH
4679: LD_INT 40
4681: PPUSH
4682: CALL_OW 184
// end ; if diff_attack > 2 then
4686: LD_EXP 18
4690: PUSH
4691: LD_INT 2
4693: GREATER
4694: IFFALSE 4708
// begin AddComResearch ( comp_lab , tech_weap3 ) ;
4696: LD_EXP 26
4700: PPUSH
4701: LD_INT 53
4703: PPUSH
4704: CALL_OW 184
// end ; AddComResearch ( comp_lab , tech_lassight ) ;
4708: LD_EXP 26
4712: PPUSH
4713: LD_INT 12
4715: PPUSH
4716: CALL_OW 184
// end ;
4720: PPOPN 1
4722: END
// every 0 0$01 trigger AlertOff = true and Researched ( comp_side , tech_tech3 ) = true do var i ;
4723: LD_EXP 69
4727: PUSH
4728: LD_INT 1
4730: EQUAL
4731: PUSH
4732: LD_EXP 1
4736: PPUSH
4737: LD_INT 50
4739: PPUSH
4740: CALL_OW 325
4744: PUSH
4745: LD_INT 1
4747: EQUAL
4748: AND
4749: IFFALSE 4806
4751: GO 4753
4753: DISABLE
4754: LD_INT 0
4756: PPUSH
// begin for i = 1 to comp_engs do
4757: LD_ADDR_VAR 0 1
4761: PUSH
4762: DOUBLE
4763: LD_INT 1
4765: DEC
4766: ST_TO_ADDR
4767: LD_EXP 8
4771: PUSH
4772: FOR_TO
4773: IFFALSE 4804
// begin AddComBuild ( comp_engs [ i ] , b_lab , 68 , 114 , 0 ) ;
4775: LD_EXP 8
4779: PUSH
4780: LD_VAR 0 1
4784: ARRAY
4785: PPUSH
4786: LD_INT 6
4788: PPUSH
4789: LD_INT 68
4791: PPUSH
4792: LD_INT 114
4794: PPUSH
4795: LD_INT 0
4797: PPUSH
4798: CALL_OW 205
// end ;
4802: GO 4772
4804: POP
4805: POP
// end ;
4806: PPOPN 1
4808: END
// every 0 0$01 trigger LabComplete2 = true do
4809: LD_EXP 46
4813: PUSH
4814: LD_INT 1
4816: EQUAL
4817: IFFALSE 4846
4819: GO 4821
4821: DISABLE
// begin AddComUpgradeLab ( comp_lab2 , b_lab_computer ) ;
4822: LD_EXP 27
4826: PPUSH
4827: LD_INT 12
4829: PPUSH
4830: CALL_OW 207
// AddComUpgradeLab ( comp_lab2 , b_lab_siberium ) ;
4834: LD_EXP 27
4838: PPUSH
4839: LD_INT 11
4841: PPUSH
4842: CALL_OW 207
// end ;
4846: END
// every 0 0$01 trigger LabFull2 = true do var i ;
4847: LD_EXP 50
4851: PUSH
4852: LD_INT 1
4854: EQUAL
4855: IFFALSE 5079
4857: GO 4859
4859: DISABLE
4860: LD_INT 0
4862: PPUSH
// begin Wait ( 0 0$10 ) ;
4863: LD_INT 350
4865: PPUSH
4866: CALL_OW 67
// for i = 3 to 4 do
4870: LD_ADDR_VAR 0 1
4874: PUSH
4875: DOUBLE
4876: LD_INT 3
4878: DEC
4879: ST_TO_ADDR
4880: LD_INT 4
4882: PUSH
4883: FOR_TO
4884: IFFALSE 4923
// begin AddComExitBuilding ( comp_sci [ i ] ) ;
4886: LD_EXP 10
4890: PUSH
4891: LD_VAR 0 1
4895: ARRAY
4896: PPUSH
4897: CALL_OW 182
// AddComEnterUnit ( comp_sci [ i ] , comp_lab2 ) ;
4901: LD_EXP 10
4905: PUSH
4906: LD_VAR 0 1
4910: ARRAY
4911: PPUSH
4912: LD_EXP 27
4916: PPUSH
4917: CALL_OW 180
// end ;
4921: GO 4883
4923: POP
4924: POP
// AddComResearch ( comp_lab2 , tech_comp1 ) ;
4925: LD_EXP 27
4929: PPUSH
4930: LD_INT 57
4932: PPUSH
4933: CALL_OW 184
// AddComResearch ( comp_lab2 , tech_comp2 ) ;
4937: LD_EXP 27
4941: PPUSH
4942: LD_INT 58
4944: PPUSH
4945: CALL_OW 184
// AddComResearch ( comp_lab2 , tech_comp3 ) ;
4949: LD_EXP 27
4953: PPUSH
4954: LD_INT 59
4956: PPUSH
4957: CALL_OW 184
// AddComResearch ( comp_lab2 , tech_ai ) ;
4961: LD_EXP 27
4965: PPUSH
4966: LD_INT 32
4968: PPUSH
4969: CALL_OW 184
// AddComResearch ( comp_lab2 , tech_advai ) ;
4973: LD_EXP 27
4977: PPUSH
4978: LD_INT 27
4980: PPUSH
4981: CALL_OW 184
// if diff_attack > 2 then
4985: LD_EXP 18
4989: PUSH
4990: LD_INT 2
4992: GREATER
4993: IFFALSE 5007
// AddComResearch ( comp_lab2 , tech_advchassis ) ;
4995: LD_EXP 27
4999: PPUSH
5000: LD_INT 36
5002: PPUSH
5003: CALL_OW 184
// AddComResearch ( comp_lab2 , tech_sib1 ) ;
5007: LD_EXP 27
5011: PPUSH
5012: LD_INT 54
5014: PPUSH
5015: CALL_OW 184
// AddComResearch ( comp_lab2 , tech_sib2 ) ;
5019: LD_EXP 27
5023: PPUSH
5024: LD_INT 55
5026: PPUSH
5027: CALL_OW 184
// AddComResearch ( comp_lab2 , tech_sib3 ) ;
5031: LD_EXP 27
5035: PPUSH
5036: LD_INT 56
5038: PPUSH
5039: CALL_OW 184
// AddComResearch ( comp_lab2 , tech_sibpow ) ;
5043: LD_EXP 27
5047: PPUSH
5048: LD_INT 21
5050: PPUSH
5051: CALL_OW 184
// AddComResearch ( comp_lab2 , tech_sibeng ) ;
5055: LD_EXP 27
5059: PPUSH
5060: LD_INT 22
5062: PPUSH
5063: CALL_OW 184
// AddComResearch ( comp_lab2 , tech_sibfiss ) ;
5067: LD_EXP 27
5071: PPUSH
5072: LD_INT 25
5074: PPUSH
5075: CALL_OW 184
// end ;
5079: PPOPN 1
5081: END
// every 0 0$01 trigger AlertOff = true and TechRemoteControl = true do var i ;
5082: LD_EXP 69
5086: PUSH
5087: LD_INT 1
5089: EQUAL
5090: PUSH
5091: LD_EXP 60
5095: PUSH
5096: LD_INT 1
5098: EQUAL
5099: AND
5100: IFFALSE 5192
5102: GO 5104
5104: DISABLE
5105: LD_INT 0
5107: PPUSH
// begin for i = 1 to comp_engs do
5108: LD_ADDR_VAR 0 1
5112: PUSH
5113: DOUBLE
5114: LD_INT 1
5116: DEC
5117: ST_TO_ADDR
5118: LD_EXP 8
5122: PUSH
5123: FOR_TO
5124: IFFALSE 5190
// begin AddComBuild ( comp_engs [ i ] , b_control_tower , 78 , 115 , 5 ) ;
5126: LD_EXP 8
5130: PUSH
5131: LD_VAR 0 1
5135: ARRAY
5136: PPUSH
5137: LD_INT 36
5139: PPUSH
5140: LD_INT 78
5142: PPUSH
5143: LD_INT 115
5145: PPUSH
5146: LD_INT 5
5148: PPUSH
5149: CALL_OW 205
// AddComBuild ( comp_engs [ i ] , b_solar_power , 76 , 110 , Rand ( 0 , 5 ) ) ;
5153: LD_EXP 8
5157: PUSH
5158: LD_VAR 0 1
5162: ARRAY
5163: PPUSH
5164: LD_INT 27
5166: PPUSH
5167: LD_INT 76
5169: PPUSH
5170: LD_INT 110
5172: PPUSH
5173: LD_INT 0
5175: PPUSH
5176: LD_INT 5
5178: PPUSH
5179: CALL_OW 12
5183: PPUSH
5184: CALL_OW 205
// end ;
5188: GO 5123
5190: POP
5191: POP
// end ;
5192: PPOPN 1
5194: END
// every 0 0$01 trigger AlertOff = true and dlimiter > 0 do
5195: LD_EXP 69
5199: PUSH
5200: LD_INT 1
5202: EQUAL
5203: PUSH
5204: LD_EXP 35
5208: PUSH
5209: LD_INT 0
5211: GREATER
5212: AND
5213: IFFALSE 5227
5215: GO 5217
5217: DISABLE
// begin ComUpgrade ( comp_arm ) ;
5218: LD_EXP 28
5222: PPUSH
5223: CALL_OW 146
// end ;
5227: END
// every 0 0$01 trigger AlertOff = true and TowerComplete = true do var i ;
5228: LD_EXP 69
5232: PUSH
5233: LD_INT 1
5235: EQUAL
5236: PUSH
5237: LD_EXP 48
5241: PUSH
5242: LD_INT 1
5244: EQUAL
5245: AND
5246: IFFALSE 5551
5248: GO 5250
5250: DISABLE
5251: LD_INT 0
5253: PPUSH
// begin ComMoveXY ( comp_engs , 61 , 104 ) ;
5254: LD_EXP 8
5258: PPUSH
5259: LD_INT 61
5261: PPUSH
5262: LD_INT 104
5264: PPUSH
5265: CALL_OW 111
// ComExitBuilding ( comp_mechs [ 1 ] ) ;
5269: LD_EXP 9
5273: PUSH
5274: LD_INT 1
5276: ARRAY
5277: PPUSH
5278: CALL_OW 122
// ComExitBuilding ( comp_mechs [ 2 ] ) ;
5282: LD_EXP 9
5286: PUSH
5287: LD_INT 2
5289: ARRAY
5290: PPUSH
5291: CALL_OW 122
// comp_rdriver = comp_rdriver ^ comp_mechs [ 1 ] ;
5295: LD_ADDR_EXP 11
5299: PUSH
5300: LD_EXP 11
5304: PUSH
5305: LD_EXP 9
5309: PUSH
5310: LD_INT 1
5312: ARRAY
5313: ADD
5314: ST_TO_ADDR
// comp_rdriver = comp_rdriver ^ comp_mechs [ 2 ] ;
5315: LD_ADDR_EXP 11
5319: PUSH
5320: LD_EXP 11
5324: PUSH
5325: LD_EXP 9
5329: PUSH
5330: LD_INT 2
5332: ARRAY
5333: ADD
5334: ST_TO_ADDR
// for i = 1 to 2 do
5335: LD_ADDR_VAR 0 1
5339: PUSH
5340: DOUBLE
5341: LD_INT 1
5343: DEC
5344: ST_TO_ADDR
5345: LD_INT 2
5347: PUSH
5348: FOR_TO
5349: IFFALSE 5406
// begin ComExitBuilding ( comp_sci [ i ] ) ;
5351: LD_EXP 10
5355: PUSH
5356: LD_VAR 0 1
5360: ARRAY
5361: PPUSH
5362: CALL_OW 122
// AddComEnterUnit ( comp_sci [ i ] , comp_factory ) ;
5366: LD_EXP 10
5370: PUSH
5371: LD_VAR 0 1
5375: ARRAY
5376: PPUSH
5377: LD_EXP 25
5381: PPUSH
5382: CALL_OW 180
// AddComChangeProfession ( comp_sci [ i ] , 3 ) ;
5386: LD_EXP 10
5390: PUSH
5391: LD_VAR 0 1
5395: ARRAY
5396: PPUSH
5397: LD_INT 3
5399: PPUSH
5400: CALL_OW 183
// end ;
5404: GO 5348
5406: POP
5407: POP
// Wait ( 0 0$10 ) ;
5408: LD_INT 350
5410: PPUSH
5411: CALL_OW 67
// comp_mechs = FilterAllUnits ( [ [ [ f_side , comp_side ] , [ f_class , 3 ] , [ f_inside ] ] ] ) ;
5415: LD_ADDR_EXP 9
5419: PUSH
5420: LD_INT 22
5422: PUSH
5423: LD_EXP 1
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: PUSH
5432: LD_INT 25
5434: PUSH
5435: LD_INT 3
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: PUSH
5442: LD_INT 54
5444: PUSH
5445: EMPTY
5446: LIST
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: LIST
5452: PUSH
5453: EMPTY
5454: LIST
5455: PPUSH
5456: CALL_OW 69
5460: ST_TO_ADDR
// comp_sci = FilterAllUnits ( [ [ [ f_side , comp_side ] , [ f_class , 4 ] , [ f_inside ] ] ] ) ;
5461: LD_ADDR_EXP 10
5465: PUSH
5466: LD_INT 22
5468: PUSH
5469: LD_EXP 1
5473: PUSH
5474: EMPTY
5475: LIST
5476: LIST
5477: PUSH
5478: LD_INT 25
5480: PUSH
5481: LD_INT 4
5483: PUSH
5484: EMPTY
5485: LIST
5486: LIST
5487: PUSH
5488: LD_INT 54
5490: PUSH
5491: EMPTY
5492: LIST
5493: PUSH
5494: EMPTY
5495: LIST
5496: LIST
5497: LIST
5498: PUSH
5499: EMPTY
5500: LIST
5501: PPUSH
5502: CALL_OW 69
5506: ST_TO_ADDR
// AddComEnterUnit ( comp_rdriver [ 1 ] , comp_ct ) ;
5507: LD_EXP 11
5511: PUSH
5512: LD_INT 1
5514: ARRAY
5515: PPUSH
5516: LD_EXP 31
5520: PPUSH
5521: CALL_OW 180
// AddComEnterUnit ( comp_rdriver [ 2 ] , comp_ct ) ;
5525: LD_EXP 11
5529: PUSH
5530: LD_INT 2
5532: ARRAY
5533: PPUSH
5534: LD_EXP 31
5538: PPUSH
5539: CALL_OW 180
// ProductionRADAR = true ;
5543: LD_ADDR_EXP 65
5547: PUSH
5548: LD_INT 1
5550: ST_TO_ADDR
// end ;
5551: PPOPN 1
5553: END
// export lvl ; every 0 0$10 trigger ProductionRADAR = true do var i , us_weap , ar_weap ;
5554: LD_EXP 65
5558: PUSH
5559: LD_INT 1
5561: EQUAL
5562: IFFALSE 5728
5564: GO 5566
5566: DISABLE
5567: LD_INT 0
5569: PPUSH
5570: PPUSH
5571: PPUSH
// begin us_weap = [ us_gatling_gun , us_double_gun , us_rocket_launcher ] [ diff_attack ] ;
5572: LD_ADDR_VAR 0 2
5576: PUSH
5577: LD_INT 4
5579: PUSH
5580: LD_INT 5
5582: PUSH
5583: LD_INT 7
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: LIST
5590: PUSH
5591: LD_EXP 18
5595: ARRAY
5596: ST_TO_ADDR
// ar_weap = [ ar_gatling_gun , ar_light_gun , ar_gun ] [ diff_attack ] ;
5597: LD_ADDR_VAR 0 3
5601: PUSH
5602: LD_INT 25
5604: PUSH
5605: LD_INT 23
5607: PUSH
5608: LD_INT 27
5610: PUSH
5611: EMPTY
5612: LIST
5613: LIST
5614: LIST
5615: PUSH
5616: LD_EXP 18
5620: ARRAY
5621: ST_TO_ADDR
// lvl = 0 ;
5622: LD_ADDR_EXP 73
5626: PUSH
5627: LD_INT 0
5629: ST_TO_ADDR
// for i = 1 to limiter do
5630: LD_ADDR_VAR 0 1
5634: PUSH
5635: DOUBLE
5636: LD_INT 1
5638: DEC
5639: ST_TO_ADDR
5640: LD_EXP 33
5644: PUSH
5645: FOR_TO
5646: IFFALSE 5726
// begin if GetNation ( comp_factory ) = 1 then
5648: LD_EXP 25
5652: PPUSH
5653: CALL_OW 248
5657: PUSH
5658: LD_INT 1
5660: EQUAL
5661: IFFALSE 5686
// begin AddComConstruct ( comp_factory , us_medium_tracked , engine_combustion , control_remote , us_weap ) ;
5663: LD_EXP 25
5667: PPUSH
5668: LD_INT 3
5670: PPUSH
5671: LD_INT 1
5673: PPUSH
5674: LD_INT 2
5676: PPUSH
5677: LD_VAR 0 2
5681: PPUSH
5682: CALL_OW 185
// end ; if GetNation ( comp_factory ) = 2 then
5686: LD_EXP 25
5690: PPUSH
5691: CALL_OW 248
5695: PUSH
5696: LD_INT 2
5698: EQUAL
5699: IFFALSE 5724
// begin AddComConstruct ( comp_factory , ar_half_tracked , engine_combustion , control_remote , ar_weap ) ;
5701: LD_EXP 25
5705: PPUSH
5706: LD_INT 14
5708: PPUSH
5709: LD_INT 1
5711: PPUSH
5712: LD_INT 2
5714: PPUSH
5715: LD_VAR 0 3
5719: PPUSH
5720: CALL_OW 185
// end ; end ;
5724: GO 5645
5726: POP
5727: POP
// end ;
5728: PPOPN 3
5730: END
// every 1 1$25 trigger Comp_Arm and comp_towers > 1 do var i , un ;
5731: LD_EXP 28
5735: PUSH
5736: LD_EXP 29
5740: PUSH
5741: LD_INT 1
5743: GREATER
5744: AND
5745: IFFALSE 5840
5747: GO 5749
5749: DISABLE
5750: LD_INT 0
5752: PPUSH
5753: PPUSH
// begin enable ;
5754: ENABLE
// for un in FilterAllUnits ( [ [ [ f_side , comp_side ] , [ f_or , [ f_class , 1 ] , [ f_class , class_sniper ] ] , [ f_outside ] ] ] ) do
5755: LD_ADDR_VAR 0 2
5759: PUSH
5760: LD_INT 22
5762: PUSH
5763: LD_EXP 1
5767: PUSH
5768: EMPTY
5769: LIST
5770: LIST
5771: PUSH
5772: LD_INT 2
5774: PUSH
5775: LD_INT 25
5777: PUSH
5778: LD_INT 1
5780: PUSH
5781: EMPTY
5782: LIST
5783: LIST
5784: PUSH
5785: LD_INT 25
5787: PUSH
5788: LD_INT 5
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: LIST
5799: PUSH
5800: LD_INT 56
5802: PUSH
5803: EMPTY
5804: LIST
5805: PUSH
5806: EMPTY
5807: LIST
5808: LIST
5809: LIST
5810: PUSH
5811: EMPTY
5812: LIST
5813: PPUSH
5814: CALL_OW 69
5818: PUSH
5819: FOR_IN
5820: IFFALSE 5838
// begin ComEnterUnit ( un , comp_arm ) ;
5822: LD_VAR 0 2
5826: PPUSH
5827: LD_EXP 28
5831: PPUSH
5832: CALL_OW 120
// end ;
5836: GO 5819
5838: POP
5839: POP
// end ; end_of_file
5840: PPOPN 2
5842: END
// export player_nation , player_side , player_cont ; export Tester ; export function PreparePlayer ; var i , un ; begin
5843: LD_INT 0
5845: PPUSH
5846: PPUSH
5847: PPUSH
// uc_side = player_side ;
5848: LD_ADDR_OWVAR 20
5852: PUSH
5853: LD_EXP 75
5857: ST_TO_ADDR
// uc_nation = player_nation ;
5858: LD_ADDR_OWVAR 21
5862: PUSH
5863: LD_EXP 74
5867: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
5868: LD_ADDR_OWVAR 27
5872: PUSH
5873: LD_INT 1
5875: PPUSH
5876: LD_INT 2
5878: PPUSH
5879: CALL_OW 12
5883: ST_TO_ADDR
// hc_importance = 100 ;
5884: LD_ADDR_OWVAR 32
5888: PUSH
5889: LD_INT 100
5891: ST_TO_ADDR
// hc_gallery :=  ;
5892: LD_ADDR_OWVAR 33
5896: PUSH
5897: LD_STRING 
5899: ST_TO_ADDR
// hc_skills = [ comp_skill1 + Rand ( 0 , 1 ) , comp_skill2 + Rand ( - 3 , 0 ) , comp_skill3 + Rand ( - 3 , 0 ) , comp_skill4 + Rand ( - 3 , 0 ) ] ;
5900: LD_ADDR_OWVAR 31
5904: PUSH
5905: LD_EXP 12
5909: PUSH
5910: LD_INT 0
5912: PPUSH
5913: LD_INT 1
5915: PPUSH
5916: CALL_OW 12
5920: PLUS
5921: PUSH
5922: LD_EXP 13
5926: PUSH
5927: LD_INT 3
5929: NEG
5930: PPUSH
5931: LD_INT 0
5933: PPUSH
5934: CALL_OW 12
5938: PLUS
5939: PUSH
5940: LD_EXP 14
5944: PUSH
5945: LD_INT 3
5947: NEG
5948: PPUSH
5949: LD_INT 0
5951: PPUSH
5952: CALL_OW 12
5956: PLUS
5957: PUSH
5958: LD_EXP 15
5962: PUSH
5963: LD_INT 3
5965: NEG
5966: PPUSH
5967: LD_INT 0
5969: PPUSH
5970: CALL_OW 12
5974: PLUS
5975: PUSH
5976: EMPTY
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
5982: LD_ADDR_OWVAR 29
5986: PUSH
5987: LD_INT 8
5989: PPUSH
5990: LD_INT 12
5992: PPUSH
5993: CALL_OW 12
5997: PUSH
5998: LD_INT 9
6000: PPUSH
6001: LD_INT 11
6003: PPUSH
6004: CALL_OW 12
6008: PUSH
6009: EMPTY
6010: LIST
6011: LIST
6012: ST_TO_ADDR
// hc_name :=  ;
6013: LD_ADDR_OWVAR 26
6017: PUSH
6018: LD_STRING 
6020: ST_TO_ADDR
// hc_class = 1 ;
6021: LD_ADDR_OWVAR 28
6025: PUSH
6026: LD_INT 1
6028: ST_TO_ADDR
// un = CreateHuman ;
6029: LD_ADDR_VAR 0 3
6033: PUSH
6034: CALL_OW 44
6038: ST_TO_ADDR
// PlaceUnitArea ( un , PlayerResp , false ) ;
6039: LD_VAR 0 3
6043: PPUSH
6044: LD_INT 5
6046: PPUSH
6047: LD_INT 0
6049: PPUSH
6050: CALL_OW 49
// hc_importance = 0 ;
6054: LD_ADDR_OWVAR 32
6058: PUSH
6059: LD_INT 0
6061: ST_TO_ADDR
// for i = 1 to ( player_cont - 1 ) do
6062: LD_ADDR_VAR 0 2
6066: PUSH
6067: DOUBLE
6068: LD_INT 1
6070: DEC
6071: ST_TO_ADDR
6072: LD_EXP 76
6076: PUSH
6077: LD_INT 1
6079: MINUS
6080: PUSH
6081: FOR_TO
6082: IFFALSE 6264
// begin hc_sex = Rand ( sex_male , sex_female ) ;
6084: LD_ADDR_OWVAR 27
6088: PUSH
6089: LD_INT 1
6091: PPUSH
6092: LD_INT 2
6094: PPUSH
6095: CALL_OW 12
6099: ST_TO_ADDR
// hc_gallery =  ;
6100: LD_ADDR_OWVAR 33
6104: PUSH
6105: LD_STRING 
6107: ST_TO_ADDR
// hc_skills = [ comp_skill1 + Rand ( 0 , 1 ) , comp_skill2 + Rand ( - 3 , 0 ) , comp_skill3 + Rand ( - 3 , 0 ) , comp_skill4 + Rand ( - 3 , 0 ) ] ;
6108: LD_ADDR_OWVAR 31
6112: PUSH
6113: LD_EXP 12
6117: PUSH
6118: LD_INT 0
6120: PPUSH
6121: LD_INT 1
6123: PPUSH
6124: CALL_OW 12
6128: PLUS
6129: PUSH
6130: LD_EXP 13
6134: PUSH
6135: LD_INT 3
6137: NEG
6138: PPUSH
6139: LD_INT 0
6141: PPUSH
6142: CALL_OW 12
6146: PLUS
6147: PUSH
6148: LD_EXP 14
6152: PUSH
6153: LD_INT 3
6155: NEG
6156: PPUSH
6157: LD_INT 0
6159: PPUSH
6160: CALL_OW 12
6164: PLUS
6165: PUSH
6166: LD_EXP 15
6170: PUSH
6171: LD_INT 3
6173: NEG
6174: PPUSH
6175: LD_INT 0
6177: PPUSH
6178: CALL_OW 12
6182: PLUS
6183: PUSH
6184: EMPTY
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
6190: LD_ADDR_OWVAR 29
6194: PUSH
6195: LD_INT 8
6197: PPUSH
6198: LD_INT 12
6200: PPUSH
6201: CALL_OW 12
6205: PUSH
6206: LD_INT 9
6208: PPUSH
6209: LD_INT 11
6211: PPUSH
6212: CALL_OW 12
6216: PUSH
6217: EMPTY
6218: LIST
6219: LIST
6220: ST_TO_ADDR
// hc_name =  ;
6221: LD_ADDR_OWVAR 26
6225: PUSH
6226: LD_STRING 
6228: ST_TO_ADDR
// hc_class = 1 ;
6229: LD_ADDR_OWVAR 28
6233: PUSH
6234: LD_INT 1
6236: ST_TO_ADDR
// un = CreateHuman ;
6237: LD_ADDR_VAR 0 3
6241: PUSH
6242: CALL_OW 44
6246: ST_TO_ADDR
// PlaceUnitArea ( un , PlayerResp , false ) ;
6247: LD_VAR 0 3
6251: PPUSH
6252: LD_INT 5
6254: PPUSH
6255: LD_INT 0
6257: PPUSH
6258: CALL_OW 49
// end ;
6262: GO 6081
6264: POP
6265: POP
// for i = 1 to player_cont do
6266: LD_ADDR_VAR 0 2
6270: PUSH
6271: DOUBLE
6272: LD_INT 1
6274: DEC
6275: ST_TO_ADDR
6276: LD_EXP 76
6280: PUSH
6281: FOR_TO
6282: IFFALSE 6464
// begin hc_sex = Rand ( sex_male , sex_female ) ;
6284: LD_ADDR_OWVAR 27
6288: PUSH
6289: LD_INT 1
6291: PPUSH
6292: LD_INT 2
6294: PPUSH
6295: CALL_OW 12
6299: ST_TO_ADDR
// hc_gallery =  ;
6300: LD_ADDR_OWVAR 33
6304: PUSH
6305: LD_STRING 
6307: ST_TO_ADDR
// hc_skills = [ comp_skill1 + Rand ( - 2 , 0 ) , comp_skill2 + Rand ( 0 , 1 ) , comp_skill3 + Rand ( - 3 , 0 ) , comp_skill4 + Rand ( - 3 , 0 ) ] ;
6308: LD_ADDR_OWVAR 31
6312: PUSH
6313: LD_EXP 12
6317: PUSH
6318: LD_INT 2
6320: NEG
6321: PPUSH
6322: LD_INT 0
6324: PPUSH
6325: CALL_OW 12
6329: PLUS
6330: PUSH
6331: LD_EXP 13
6335: PUSH
6336: LD_INT 0
6338: PPUSH
6339: LD_INT 1
6341: PPUSH
6342: CALL_OW 12
6346: PLUS
6347: PUSH
6348: LD_EXP 14
6352: PUSH
6353: LD_INT 3
6355: NEG
6356: PPUSH
6357: LD_INT 0
6359: PPUSH
6360: CALL_OW 12
6364: PLUS
6365: PUSH
6366: LD_EXP 15
6370: PUSH
6371: LD_INT 3
6373: NEG
6374: PPUSH
6375: LD_INT 0
6377: PPUSH
6378: CALL_OW 12
6382: PLUS
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
6390: LD_ADDR_OWVAR 29
6394: PUSH
6395: LD_INT 8
6397: PPUSH
6398: LD_INT 12
6400: PPUSH
6401: CALL_OW 12
6405: PUSH
6406: LD_INT 9
6408: PPUSH
6409: LD_INT 11
6411: PPUSH
6412: CALL_OW 12
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: ST_TO_ADDR
// hc_name =  ;
6421: LD_ADDR_OWVAR 26
6425: PUSH
6426: LD_STRING 
6428: ST_TO_ADDR
// hc_class = 2 ;
6429: LD_ADDR_OWVAR 28
6433: PUSH
6434: LD_INT 2
6436: ST_TO_ADDR
// un = CreateHuman ;
6437: LD_ADDR_VAR 0 3
6441: PUSH
6442: CALL_OW 44
6446: ST_TO_ADDR
// PlaceUnitArea ( un , PlayerResp , false ) ;
6447: LD_VAR 0 3
6451: PPUSH
6452: LD_INT 5
6454: PPUSH
6455: LD_INT 0
6457: PPUSH
6458: CALL_OW 49
// end ;
6462: GO 6281
6464: POP
6465: POP
// for i = 1 to player_cont do
6466: LD_ADDR_VAR 0 2
6470: PUSH
6471: DOUBLE
6472: LD_INT 1
6474: DEC
6475: ST_TO_ADDR
6476: LD_EXP 76
6480: PUSH
6481: FOR_TO
6482: IFFALSE 6664
// begin hc_sex = Rand ( sex_male , sex_female ) ;
6484: LD_ADDR_OWVAR 27
6488: PUSH
6489: LD_INT 1
6491: PPUSH
6492: LD_INT 2
6494: PPUSH
6495: CALL_OW 12
6499: ST_TO_ADDR
// hc_gallery =  ;
6500: LD_ADDR_OWVAR 33
6504: PUSH
6505: LD_STRING 
6507: ST_TO_ADDR
// hc_skills = [ comp_skill1 + Rand ( - 3 , 1 ) , comp_skill2 + Rand ( - 3 , 0 ) , comp_skill3 + Rand ( 0 , 1 ) , comp_skill4 + Rand ( - 3 , 0 ) ] ;
6508: LD_ADDR_OWVAR 31
6512: PUSH
6513: LD_EXP 12
6517: PUSH
6518: LD_INT 3
6520: NEG
6521: PPUSH
6522: LD_INT 1
6524: PPUSH
6525: CALL_OW 12
6529: PLUS
6530: PUSH
6531: LD_EXP 13
6535: PUSH
6536: LD_INT 3
6538: NEG
6539: PPUSH
6540: LD_INT 0
6542: PPUSH
6543: CALL_OW 12
6547: PLUS
6548: PUSH
6549: LD_EXP 14
6553: PUSH
6554: LD_INT 0
6556: PPUSH
6557: LD_INT 1
6559: PPUSH
6560: CALL_OW 12
6564: PLUS
6565: PUSH
6566: LD_EXP 15
6570: PUSH
6571: LD_INT 3
6573: NEG
6574: PPUSH
6575: LD_INT 0
6577: PPUSH
6578: CALL_OW 12
6582: PLUS
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
6590: LD_ADDR_OWVAR 29
6594: PUSH
6595: LD_INT 8
6597: PPUSH
6598: LD_INT 12
6600: PPUSH
6601: CALL_OW 12
6605: PUSH
6606: LD_INT 9
6608: PPUSH
6609: LD_INT 11
6611: PPUSH
6612: CALL_OW 12
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: ST_TO_ADDR
// hc_name =  ;
6621: LD_ADDR_OWVAR 26
6625: PUSH
6626: LD_STRING 
6628: ST_TO_ADDR
// hc_class = 3 ;
6629: LD_ADDR_OWVAR 28
6633: PUSH
6634: LD_INT 3
6636: ST_TO_ADDR
// un = CreateHuman ;
6637: LD_ADDR_VAR 0 3
6641: PUSH
6642: CALL_OW 44
6646: ST_TO_ADDR
// PlaceUnitArea ( un , PlayerResp , false ) ;
6647: LD_VAR 0 3
6651: PPUSH
6652: LD_INT 5
6654: PPUSH
6655: LD_INT 0
6657: PPUSH
6658: CALL_OW 49
// end ;
6662: GO 6481
6664: POP
6665: POP
// for i = 1 to player_cont do
6666: LD_ADDR_VAR 0 2
6670: PUSH
6671: DOUBLE
6672: LD_INT 1
6674: DEC
6675: ST_TO_ADDR
6676: LD_EXP 76
6680: PUSH
6681: FOR_TO
6682: IFFALSE 6864
// begin hc_sex = Rand ( sex_male , sex_female ) ;
6684: LD_ADDR_OWVAR 27
6688: PUSH
6689: LD_INT 1
6691: PPUSH
6692: LD_INT 2
6694: PPUSH
6695: CALL_OW 12
6699: ST_TO_ADDR
// hc_gallery =  ;
6700: LD_ADDR_OWVAR 33
6704: PUSH
6705: LD_STRING 
6707: ST_TO_ADDR
// hc_skills = [ comp_skill1 + Rand ( - 3 , 1 ) , comp_skill2 + Rand ( - 3 , 0 ) , comp_skill3 + Rand ( - 3 , 0 ) , comp_skill4 + Rand ( 0 , 1 ) ] ;
6708: LD_ADDR_OWVAR 31
6712: PUSH
6713: LD_EXP 12
6717: PUSH
6718: LD_INT 3
6720: NEG
6721: PPUSH
6722: LD_INT 1
6724: PPUSH
6725: CALL_OW 12
6729: PLUS
6730: PUSH
6731: LD_EXP 13
6735: PUSH
6736: LD_INT 3
6738: NEG
6739: PPUSH
6740: LD_INT 0
6742: PPUSH
6743: CALL_OW 12
6747: PLUS
6748: PUSH
6749: LD_EXP 14
6753: PUSH
6754: LD_INT 3
6756: NEG
6757: PPUSH
6758: LD_INT 0
6760: PPUSH
6761: CALL_OW 12
6765: PLUS
6766: PUSH
6767: LD_EXP 15
6771: PUSH
6772: LD_INT 0
6774: PPUSH
6775: LD_INT 1
6777: PPUSH
6778: CALL_OW 12
6782: PLUS
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
6790: LD_ADDR_OWVAR 29
6794: PUSH
6795: LD_INT 8
6797: PPUSH
6798: LD_INT 12
6800: PPUSH
6801: CALL_OW 12
6805: PUSH
6806: LD_INT 9
6808: PPUSH
6809: LD_INT 11
6811: PPUSH
6812: CALL_OW 12
6816: PUSH
6817: EMPTY
6818: LIST
6819: LIST
6820: ST_TO_ADDR
// hc_name =  ;
6821: LD_ADDR_OWVAR 26
6825: PUSH
6826: LD_STRING 
6828: ST_TO_ADDR
// hc_class = 4 ;
6829: LD_ADDR_OWVAR 28
6833: PUSH
6834: LD_INT 4
6836: ST_TO_ADDR
// un = CreateHuman ;
6837: LD_ADDR_VAR 0 3
6841: PUSH
6842: CALL_OW 44
6846: ST_TO_ADDR
// PlaceUnitArea ( un , PlayerResp , false ) ;
6847: LD_VAR 0 3
6851: PPUSH
6852: LD_INT 5
6854: PPUSH
6855: LD_INT 0
6857: PPUSH
6858: CALL_OW 49
// end ;
6862: GO 6681
6864: POP
6865: POP
// end ; end_of_file
6866: LD_VAR 0 1
6870: RET
// export Cr1 , Cr2 ; every 2 2$10 trigger Cr1 = true do
6871: LD_EXP 78
6875: PUSH
6876: LD_INT 1
6878: EQUAL
6879: IFFALSE 6942
6881: GO 6883
6883: DISABLE
// begin CreateCratesArea ( Rand ( 1 , 5 ) , CratesResp , true ) ;
6884: LD_INT 1
6886: PPUSH
6887: LD_INT 5
6889: PPUSH
6890: CALL_OW 12
6894: PPUSH
6895: LD_INT 4
6897: PPUSH
6898: LD_INT 1
6900: PPUSH
6901: CALL_OW 55
// Wait ( Rand ( 0 0$25 , 0 0$40 ) ) ;
6905: LD_INT 875
6907: PPUSH
6908: LD_INT 1400
6910: PPUSH
6911: CALL_OW 12
6915: PPUSH
6916: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 3 ) , CratesResp , true ) ;
6920: LD_INT 1
6922: PPUSH
6923: LD_INT 3
6925: PPUSH
6926: CALL_OW 12
6930: PPUSH
6931: LD_INT 4
6933: PPUSH
6934: LD_INT 1
6936: PPUSH
6937: CALL_OW 55
// enable ;
6941: ENABLE
// end ;
6942: END
// every 1 1$40 trigger Cr2 = true do
6943: LD_EXP 79
6947: PUSH
6948: LD_INT 1
6950: EQUAL
6951: IFFALSE 7050
6953: GO 6955
6955: DISABLE
// begin CreateCratesArea ( Rand ( 1 , 5 ) , CratesResp , true ) ;
6956: LD_INT 1
6958: PPUSH
6959: LD_INT 5
6961: PPUSH
6962: CALL_OW 12
6966: PPUSH
6967: LD_INT 4
6969: PPUSH
6970: LD_INT 1
6972: PPUSH
6973: CALL_OW 55
// Wait ( Rand ( 0 0$20 , 0 0$50 ) ) ;
6977: LD_INT 700
6979: PPUSH
6980: LD_INT 1750
6982: PPUSH
6983: CALL_OW 12
6987: PPUSH
6988: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 3 ) , CratesResp , true ) ;
6992: LD_INT 1
6994: PPUSH
6995: LD_INT 3
6997: PPUSH
6998: CALL_OW 12
7002: PPUSH
7003: LD_INT 4
7005: PPUSH
7006: LD_INT 1
7008: PPUSH
7009: CALL_OW 55
// Wait ( Rand ( 0 0$39 , 0 0$59 ) ) ;
7013: LD_INT 1365
7015: PPUSH
7016: LD_INT 2065
7018: PPUSH
7019: CALL_OW 12
7023: PPUSH
7024: CALL_OW 67
// CreateCratesArea ( Rand ( 1 , 3 ) , CratesResp , true ) ;
7028: LD_INT 1
7030: PPUSH
7031: LD_INT 3
7033: PPUSH
7034: CALL_OW 12
7038: PPUSH
7039: LD_INT 4
7041: PPUSH
7042: LD_INT 1
7044: PPUSH
7045: CALL_OW 55
// enable ;
7049: ENABLE
// end ;
7050: END
// every 0 0$35 marked 01 do
7051: GO 7053
7053: DISABLE
// begin enable ;
7054: ENABLE
// CreateCratesArea ( Rand ( 3 , 5 ) , PlayerCrResp , true ) ;
7055: LD_INT 3
7057: PPUSH
7058: LD_INT 5
7060: PPUSH
7061: CALL_OW 12
7065: PPUSH
7066: LD_INT 8
7068: PPUSH
7069: LD_INT 1
7071: PPUSH
7072: CALL_OW 55
// if Counter > 12 12$00 then
7076: LD_EXP 80
7080: PUSH
7081: LD_INT 25200
7083: GREATER
7084: IFFALSE 7089
// disable ( 01 ) ;
7086: LD_INT 1
7088: DISABLE_MARKED
// end ; end_of_file
7089: END
// export function PrepareApeman ( ap ) ; var apeman , l ; begin
7090: LD_INT 0
7092: PPUSH
7093: PPUSH
7094: PPUSH
// uc_nation = nation_nature ;
7095: LD_ADDR_OWVAR 21
7099: PUSH
7100: LD_INT 0
7102: ST_TO_ADDR
// uc_side = 0 ;
7103: LD_ADDR_OWVAR 20
7107: PUSH
7108: LD_INT 0
7110: ST_TO_ADDR
// l = 0 ;
7111: LD_ADDR_VAR 0 4
7115: PUSH
7116: LD_INT 0
7118: ST_TO_ADDR
// repeat begin hc_importance = 0 ;
7119: LD_ADDR_OWVAR 32
7123: PUSH
7124: LD_INT 0
7126: ST_TO_ADDR
// uc_direction = Rand ( 0 , 5 ) ;
7127: LD_ADDR_OWVAR 24
7131: PUSH
7132: LD_INT 0
7134: PPUSH
7135: LD_INT 5
7137: PPUSH
7138: CALL_OW 12
7142: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 10 ) ;
7143: LD_ADDR_OWVAR 35
7147: PUSH
7148: LD_INT 5
7150: NEG
7151: PPUSH
7152: LD_INT 10
7154: PPUSH
7155: CALL_OW 12
7159: ST_TO_ADDR
// hc_gallery =  ;
7160: LD_ADDR_OWVAR 33
7164: PUSH
7165: LD_STRING 
7167: ST_TO_ADDR
// hc_class = class_apeman ;
7168: LD_ADDR_OWVAR 28
7172: PUSH
7173: LD_INT 12
7175: ST_TO_ADDR
// hc_attr = [ Rand ( 11 , 13 ) , Rand ( 10 , 11 ) ] ;
7176: LD_ADDR_OWVAR 29
7180: PUSH
7181: LD_INT 11
7183: PPUSH
7184: LD_INT 13
7186: PPUSH
7187: CALL_OW 12
7191: PUSH
7192: LD_INT 10
7194: PPUSH
7195: LD_INT 11
7197: PPUSH
7198: CALL_OW 12
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: ST_TO_ADDR
// hc_sex = sex_male ;
7207: LD_ADDR_OWVAR 27
7211: PUSH
7212: LD_INT 1
7214: ST_TO_ADDR
// hc_skills = [ Rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
7215: LD_ADDR_OWVAR 31
7219: PUSH
7220: LD_INT 0
7222: PPUSH
7223: LD_INT 2
7225: PPUSH
7226: CALL_OW 12
7230: PUSH
7231: LD_INT 0
7233: PUSH
7234: LD_INT 0
7236: PUSH
7237: LD_INT 0
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: ST_TO_ADDR
// apeman = CreateHuman ;
7246: LD_ADDR_VAR 0 3
7250: PUSH
7251: CALL_OW 44
7255: ST_TO_ADDR
// PlaceUnitArea ( apeman , ApeResp , false ) ;
7256: LD_VAR 0 3
7260: PPUSH
7261: LD_INT 3
7263: PPUSH
7264: LD_INT 0
7266: PPUSH
7267: CALL_OW 49
// l = l + 1 ;
7271: LD_ADDR_VAR 0 4
7275: PUSH
7276: LD_VAR 0 4
7280: PUSH
7281: LD_INT 1
7283: PLUS
7284: ST_TO_ADDR
// end until l = ap ;
7285: LD_VAR 0 4
7289: PUSH
7290: LD_VAR 0 1
7294: EQUAL
7295: IFFALSE 7119
// end ; end_of_file
7297: LD_VAR 0 2
7301: RET
// export Counter , Score , Debug ; every 1 do
7302: GO 7304
7304: DISABLE
// begin Counter = 0 0$00 ;
7305: LD_ADDR_EXP 80
7309: PUSH
7310: LD_INT 0
7312: ST_TO_ADDR
// Score = 0 ;
7313: LD_ADDR_EXP 81
7317: PUSH
7318: LD_INT 0
7320: ST_TO_ADDR
// Debug = false ;
7321: LD_ADDR_EXP 82
7325: PUSH
7326: LD_INT 0
7328: ST_TO_ADDR
// end ;
7329: END
// every 0 0$01 do
7330: GO 7332
7332: DISABLE
// begin enable ;
7333: ENABLE
// Counter = Counter + 0 0$01 ;
7334: LD_ADDR_EXP 80
7338: PUSH
7339: LD_EXP 80
7343: PUSH
7344: LD_INT 35
7346: PLUS
7347: ST_TO_ADDR
// if Debug = false then
7348: LD_EXP 82
7352: PUSH
7353: LD_INT 0
7355: EQUAL
7356: IFFALSE 7385
// begin display_strings := [ #Am01-1 , counter , #Am01-2 , score ] ;
7358: LD_ADDR_OWVAR 47
7362: PUSH
7363: LD_STRING #Am01-1
7365: PUSH
7366: LD_EXP 80
7370: PUSH
7371: LD_STRING #Am01-2
7373: PUSH
7374: LD_EXP 81
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: ST_TO_ADDR
// end ; if Debug = true then
7385: LD_EXP 82
7389: PUSH
7390: LD_INT 1
7392: EQUAL
7393: IFFALSE 7426
// begin display_strings := [ #Am01-3 , #Am01-1 , counter , #Am01-2 , score ] ;
7395: LD_ADDR_OWVAR 47
7399: PUSH
7400: LD_STRING #Am01-3
7402: PUSH
7403: LD_STRING #Am01-1
7405: PUSH
7406: LD_EXP 80
7410: PUSH
7411: LD_STRING #Am01-2
7413: PUSH
7414: LD_EXP 81
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: LIST
7423: LIST
7424: LIST
7425: ST_TO_ADDR
// end ; end ;
7426: END
// export function BuildDepot ( eng , x , y , z ) ; begin
7427: LD_INT 0
7429: PPUSH
// if HexInfo ( x , y ) = 0 then
7430: LD_VAR 0 2
7434: PPUSH
7435: LD_VAR 0 3
7439: PPUSH
7440: CALL_OW 428
7444: PUSH
7445: LD_INT 0
7447: EQUAL
7448: IFFALSE 7479
// begin ComBuild ( eng , b_depot , x , y , z ) ;
7450: LD_VAR 0 1
7454: PPUSH
7455: LD_INT 0
7457: PPUSH
7458: LD_VAR 0 2
7462: PPUSH
7463: LD_VAR 0 3
7467: PPUSH
7468: LD_VAR 0 4
7472: PPUSH
7473: CALL_OW 145
// end else
7477: GO 7532
// begin ComBuild ( eng , b_depot , x + Rand ( - 5 , 5 ) , y + Rand ( - 5 , 5 ) , z ) ;
7479: LD_VAR 0 1
7483: PPUSH
7484: LD_INT 0
7486: PPUSH
7487: LD_VAR 0 2
7491: PUSH
7492: LD_INT 5
7494: NEG
7495: PPUSH
7496: LD_INT 5
7498: PPUSH
7499: CALL_OW 12
7503: PLUS
7504: PPUSH
7505: LD_VAR 0 3
7509: PUSH
7510: LD_INT 5
7512: NEG
7513: PPUSH
7514: LD_INT 5
7516: PPUSH
7517: CALL_OW 12
7521: PLUS
7522: PPUSH
7523: LD_VAR 0 4
7527: PPUSH
7528: CALL_OW 145
// end ; end ;
7532: LD_VAR 0 5
7536: RET
// every 0 0$10 trigger AlertOff = true and Comp_Cargo do var skr , c ;
7537: LD_EXP 69
7541: PUSH
7542: LD_INT 1
7544: EQUAL
7545: PUSH
7546: LD_EXP 30
7550: AND
7551: IFFALSE 7689
7553: GO 7555
7555: DISABLE
7556: LD_INT 0
7558: PPUSH
7559: PPUSH
// begin enable ;
7560: ENABLE
// skr = GetListOfCratesInArea ( CompCrates ) ;
7561: LD_ADDR_VAR 0 1
7565: PUSH
7566: LD_INT 6
7568: PPUSH
7569: CALL_OW 435
7573: ST_TO_ADDR
// c = 1 ;
7574: LD_ADDR_VAR 0 2
7578: PUSH
7579: LD_INT 1
7581: ST_TO_ADDR
// while c < skr do
7582: LD_VAR 0 2
7586: PUSH
7587: LD_VAR 0 1
7591: LESS
7592: IFFALSE 7645
// begin AddComCollect ( comp_cargo , skr [ c ] , skr [ c + 1 ] ) ;
7594: LD_EXP 30
7598: PPUSH
7599: LD_VAR 0 1
7603: PUSH
7604: LD_VAR 0 2
7608: ARRAY
7609: PPUSH
7610: LD_VAR 0 1
7614: PUSH
7615: LD_VAR 0 2
7619: PUSH
7620: LD_INT 1
7622: PLUS
7623: ARRAY
7624: PPUSH
7625: CALL_OW 177
// c = c + 2 ;
7629: LD_ADDR_VAR 0 2
7633: PUSH
7634: LD_VAR 0 2
7638: PUSH
7639: LD_INT 2
7641: PLUS
7642: ST_TO_ADDR
// end ;
7643: GO 7582
// if GetFuel ( comp_cargo ) < 100 then
7645: LD_EXP 30
7649: PPUSH
7650: CALL_OW 261
7654: PUSH
7655: LD_INT 100
7657: LESS
7658: IFFALSE 7689
// begin if not See ( player_side , comp_cargo ) then
7660: LD_EXP 75
7664: PPUSH
7665: LD_EXP 30
7669: PPUSH
7670: CALL_OW 292
7674: NOT
7675: IFFALSE 7689
// SetFuel ( comp_cargo , 1000 ) ;
7677: LD_EXP 30
7681: PPUSH
7682: LD_INT 1000
7684: PPUSH
7685: CALL_OW 240
// end ; end ;
7689: PPOPN 2
7691: END
// every 0 0$01 trigger ProductionRADAR = true do var v , filter ;
7692: LD_EXP 65
7696: PUSH
7697: LD_INT 1
7699: EQUAL
7700: IFFALSE 7851
7702: GO 7704
7704: DISABLE
7705: LD_INT 0
7707: PPUSH
7708: PPUSH
// begin enable ;
7709: ENABLE
// filter = FilterAllUnits ( [ [ [ f_side , comp_side ] , [ f_control , control_remote ] , [ f_ok ] ] ] ) ;
7710: LD_ADDR_VAR 0 2
7714: PUSH
7715: LD_INT 22
7717: PUSH
7718: LD_EXP 1
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: PUSH
7727: LD_INT 33
7729: PUSH
7730: LD_INT 2
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PUSH
7737: LD_INT 50
7739: PUSH
7740: EMPTY
7741: LIST
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: LIST
7747: PUSH
7748: EMPTY
7749: LIST
7750: PPUSH
7751: CALL_OW 69
7755: ST_TO_ADDR
// for v in filter do
7756: LD_ADDR_VAR 0 1
7760: PUSH
7761: LD_VAR 0 2
7765: PUSH
7766: FOR_IN
7767: IFFALSE 7849
// begin if not IsControledBy ( v ) and IsOk ( v ) then
7769: LD_VAR 0 1
7773: PPUSH
7774: CALL_OW 312
7778: NOT
7779: PUSH
7780: LD_VAR 0 1
7784: PPUSH
7785: CALL_OW 302
7789: AND
7790: IFFALSE 7810
// ComLinkTo ( v , comp_rdriver [ 1 ] ) ;
7792: LD_VAR 0 1
7796: PPUSH
7797: LD_EXP 11
7801: PUSH
7802: LD_INT 1
7804: ARRAY
7805: PPUSH
7806: CALL_OW 135
// if UnitsLinked ( comp_rdriver [ 1 ] ) > 2 then
7810: LD_EXP 11
7814: PUSH
7815: LD_INT 1
7817: ARRAY
7818: PPUSH
7819: CALL_OW 432
7823: PUSH
7824: LD_INT 2
7826: GREATER
7827: IFFALSE 7847
// ComLinkTo ( v , comp_rdriver [ 2 ] ) ;
7829: LD_VAR 0 1
7833: PPUSH
7834: LD_EXP 11
7838: PUSH
7839: LD_INT 2
7841: ARRAY
7842: PPUSH
7843: CALL_OW 135
// end ;
7847: GO 7766
7849: POP
7850: POP
// end ;
7851: PPOPN 2
7853: END
// every 0 0$01 do var un ;
7854: GO 7856
7856: DISABLE
7857: LD_INT 0
7859: PPUSH
// begin enable ;
7860: ENABLE
// for un in FilterAllUnits ( [ f_side , player_side ] ) do
7861: LD_ADDR_VAR 0 1
7865: PUSH
7866: LD_INT 22
7868: PUSH
7869: LD_EXP 75
7873: PUSH
7874: EMPTY
7875: LIST
7876: LIST
7877: PPUSH
7878: CALL_OW 69
7882: PUSH
7883: FOR_IN
7884: IFFALSE 7919
// begin if IsInArea ( un , Area1 ) then
7886: LD_VAR 0 1
7890: PPUSH
7891: LD_INT 9
7893: PPUSH
7894: CALL_OW 308
7898: IFFALSE 7917
// begin Debug = true ;
7900: LD_ADDR_EXP 82
7904: PUSH
7905: LD_INT 1
7907: ST_TO_ADDR
// FogOff ( player_side ) ;
7908: LD_EXP 75
7912: PPUSH
7913: CALL_OW 344
// end ; end ;
7917: GO 7883
7919: POP
7920: POP
// end ; end_of_file
7921: PPOPN 1
7923: END
// on BuildingComplete ( build ) do var i ;
7924: LD_INT 0
7926: PPUSH
// begin if GetSide ( build ) = player_side then
7927: LD_VAR 0 1
7931: PPUSH
7932: CALL_OW 255
7936: PUSH
7937: LD_EXP 75
7941: EQUAL
7942: IFFALSE 8020
// begin if GetBType ( build ) = b_depot then
7944: LD_VAR 0 1
7948: PPUSH
7949: CALL_OW 266
7953: PUSH
7954: LD_INT 0
7956: EQUAL
7957: IFFALSE 8020
// begin CreateCratesArea ( 5 , PlayerResp , true ) ;
7959: LD_INT 5
7961: PPUSH
7962: LD_INT 5
7964: PPUSH
7965: LD_INT 1
7967: PPUSH
7968: CALL_OW 55
// Wait ( 0 0$06 ) ;
7972: LD_INT 210
7974: PPUSH
7975: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 4 ) , PlayerResp , true ) ;
7979: LD_INT 2
7981: PPUSH
7982: LD_INT 4
7984: PPUSH
7985: CALL_OW 12
7989: PPUSH
7990: LD_INT 5
7992: PPUSH
7993: LD_INT 1
7995: PPUSH
7996: CALL_OW 55
// Wait ( 0 0$10 ) ;
8000: LD_INT 350
8002: PPUSH
8003: CALL_OW 67
// CreateCratesArea ( 5 , PlayerResp , true ) ;
8007: LD_INT 5
8009: PPUSH
8010: LD_INT 5
8012: PPUSH
8013: LD_INT 1
8015: PPUSH
8016: CALL_OW 55
// end ; end ; if GetSide ( build ) = comp_side then
8020: LD_VAR 0 1
8024: PPUSH
8025: CALL_OW 255
8029: PUSH
8030: LD_EXP 1
8034: EQUAL
8035: IFFALSE 8544
// begin if GetBType ( build ) = b_turret then
8037: LD_VAR 0 1
8041: PPUSH
8042: CALL_OW 266
8046: PUSH
8047: LD_INT 33
8049: EQUAL
8050: IFFALSE 8097
// begin if not Researched ( comp_side , tech_rocket ) = true then
8052: LD_EXP 1
8056: PPUSH
8057: LD_INT 40
8059: PPUSH
8060: CALL_OW 325
8064: PUSH
8065: LD_INT 1
8067: EQUAL
8068: NOT
8069: IFFALSE 8085
// AddComPlaceWeapon ( build , us_heavy_gun ) else
8071: LD_VAR 0 1
8075: PPUSH
8076: LD_INT 6
8078: PPUSH
8079: CALL_OW 208
8083: GO 8097
// AddComPlaceWeapon ( build , us_rocket_launcher ) ;
8085: LD_VAR 0 1
8089: PPUSH
8090: LD_INT 7
8092: PPUSH
8093: CALL_OW 208
// end ; if GetBType ( build ) = b_depot then
8097: LD_VAR 0 1
8101: PPUSH
8102: CALL_OW 266
8106: PUSH
8107: LD_INT 0
8109: EQUAL
8110: IFFALSE 8220
// begin comp_dep = GetBase ( build ) ;
8112: LD_ADDR_EXP 23
8116: PUSH
8117: LD_VAR 0 1
8121: PPUSH
8122: CALL_OW 274
8126: ST_TO_ADDR
// CanBuildBase = true ;
8127: LD_ADDR_EXP 38
8131: PUSH
8132: LD_INT 1
8134: ST_TO_ADDR
// CanBuildLab = true ;
8135: LD_ADDR_EXP 40
8139: PUSH
8140: LD_INT 1
8142: ST_TO_ADDR
// CanBuildFactory = true ;
8143: LD_ADDR_EXP 39
8147: PUSH
8148: LD_INT 1
8150: ST_TO_ADDR
// SetResourceType ( GetBase ( build ) , mat_cans , 900000 ) ;
8151: LD_VAR 0 1
8155: PPUSH
8156: CALL_OW 274
8160: PPUSH
8161: LD_INT 1
8163: PPUSH
8164: LD_INT 900000
8166: PPUSH
8167: CALL_OW 277
// SetResourceType ( GetBase ( build ) , mat_oil , 100000 ) ;
8171: LD_VAR 0 1
8175: PPUSH
8176: CALL_OW 274
8180: PPUSH
8181: LD_INT 2
8183: PPUSH
8184: LD_INT 100000
8186: PPUSH
8187: CALL_OW 277
// SetResourceType ( GetBase ( build ) , mat_siberit , 1000 ) ;
8191: LD_VAR 0 1
8195: PPUSH
8196: CALL_OW 274
8200: PPUSH
8201: LD_INT 3
8203: PPUSH
8204: LD_INT 1000
8206: PPUSH
8207: CALL_OW 277
// AddComUpgrade ( build ) ;
8211: LD_VAR 0 1
8215: PPUSH
8216: CALL_OW 206
// end ; if GetBType ( build ) = b_armoury then
8220: LD_VAR 0 1
8224: PPUSH
8225: CALL_OW 266
8229: PUSH
8230: LD_INT 4
8232: EQUAL
8233: IFFALSE 8253
// begin comp_arm = build ;
8235: LD_ADDR_EXP 28
8239: PUSH
8240: LD_VAR 0 1
8244: ST_TO_ADDR
// ArmouryComplete = true ;
8245: LD_ADDR_EXP 44
8249: PUSH
8250: LD_INT 1
8252: ST_TO_ADDR
// end ; if GetBType ( build ) = b_lab then
8253: LD_VAR 0 1
8257: PPUSH
8258: CALL_OW 266
8262: PUSH
8263: LD_INT 6
8265: EQUAL
8266: IFFALSE 8368
// begin if Researched ( comp_side , tech_oilpow ) = false then
8268: LD_EXP 1
8272: PPUSH
8273: LD_INT 46
8275: PPUSH
8276: CALL_OW 325
8280: PUSH
8281: LD_INT 0
8283: EQUAL
8284: IFFALSE 8318
// begin comp_lab = build ;
8286: LD_ADDR_EXP 26
8290: PUSH
8291: LD_VAR 0 1
8295: ST_TO_ADDR
// labs = labs + 1 ;
8296: LD_ADDR_EXP 51
8300: PUSH
8301: LD_EXP 51
8305: PUSH
8306: LD_INT 1
8308: PLUS
8309: ST_TO_ADDR
// LabComplete = true ;
8310: LD_ADDR_EXP 45
8314: PUSH
8315: LD_INT 1
8317: ST_TO_ADDR
// end ; if Researched ( comp_side , tech_oilpow ) = true then
8318: LD_EXP 1
8322: PPUSH
8323: LD_INT 46
8325: PPUSH
8326: CALL_OW 325
8330: PUSH
8331: LD_INT 1
8333: EQUAL
8334: IFFALSE 8368
// begin comp_lab2 = build ;
8336: LD_ADDR_EXP 27
8340: PUSH
8341: LD_VAR 0 1
8345: ST_TO_ADDR
// labs = labs + 1 ;
8346: LD_ADDR_EXP 51
8350: PUSH
8351: LD_EXP 51
8355: PUSH
8356: LD_INT 1
8358: PLUS
8359: ST_TO_ADDR
// LabComplete2 = true ;
8360: LD_ADDR_EXP 46
8364: PUSH
8365: LD_INT 1
8367: ST_TO_ADDR
// end ; end ; if GetBType ( build ) = b_bunker then
8368: LD_VAR 0 1
8372: PPUSH
8373: CALL_OW 266
8377: PUSH
8378: LD_INT 32
8380: EQUAL
8381: IFFALSE 8399
// begin comp_towers = comp_towers ^ build ;
8383: LD_ADDR_EXP 29
8387: PUSH
8388: LD_EXP 29
8392: PUSH
8393: LD_VAR 0 1
8397: ADD
8398: ST_TO_ADDR
// end ; if GetBType ( build ) = b_workshop then
8399: LD_VAR 0 1
8403: PPUSH
8404: CALL_OW 266
8408: PUSH
8409: LD_INT 2
8411: EQUAL
8412: IFFALSE 8433
// begin Comp_Factory = build ;
8414: LD_ADDR_EXP 25
8418: PUSH
8419: LD_VAR 0 1
8423: ST_TO_ADDR
// ComUpgrade ( build ) ;
8424: LD_VAR 0 1
8428: PPUSH
8429: CALL_OW 146
// end ; if GetBType ( build ) = b_control_tower then
8433: LD_VAR 0 1
8437: PPUSH
8438: CALL_OW 266
8442: PUSH
8443: LD_INT 36
8445: EQUAL
8446: IFFALSE 8466
// begin Comp_CT = build ;
8448: LD_ADDR_EXP 31
8452: PUSH
8453: LD_VAR 0 1
8457: ST_TO_ADDR
// TowerComplete = true ;
8458: LD_ADDR_EXP 48
8462: PUSH
8463: LD_INT 1
8465: ST_TO_ADDR
// end ; if GetBType ( build ) = b_ext_gun then
8466: LD_VAR 0 1
8470: PPUSH
8471: CALL_OW 266
8475: PUSH
8476: LD_INT 17
8478: EQUAL
8479: IFFALSE 8521
// begin for i = 1 to comp_towers do
8481: LD_ADDR_VAR 0 2
8485: PUSH
8486: DOUBLE
8487: LD_INT 1
8489: DEC
8490: ST_TO_ADDR
8491: LD_EXP 29
8495: PUSH
8496: FOR_TO
8497: IFFALSE 8519
// begin AddComPlaceWeapon ( comp_Towers [ i ] , us_double_gun ) ;
8499: LD_EXP 29
8503: PUSH
8504: LD_VAR 0 2
8508: ARRAY
8509: PPUSH
8510: LD_INT 5
8512: PPUSH
8513: CALL_OW 208
// end ;
8517: GO 8496
8519: POP
8520: POP
// end ; if GetBType ( build ) = b_ext_rocket then
8521: LD_VAR 0 1
8525: PPUSH
8526: CALL_OW 266
8530: PUSH
8531: LD_INT 18
8533: EQUAL
8534: IFFALSE 8544
// begin CanBuildRocket = true ;
8536: LD_ADDR_EXP 72
8540: PUSH
8541: LD_INT 1
8543: ST_TO_ADDR
// end ; end ; end ;
8544: PPOPN 2
8546: END
// on UpgradeComplete ( build ) do var ext , i ;
8547: LD_INT 0
8549: PPUSH
8550: PPUSH
// begin if build = comp_arm then
8551: LD_VAR 0 1
8555: PUSH
8556: LD_EXP 28
8560: EQUAL
8561: IFFALSE 8629
// begin for i = comp_towers + 1 to comp_sold do
8563: LD_ADDR_VAR 0 3
8567: PUSH
8568: DOUBLE
8569: LD_EXP 29
8573: PUSH
8574: LD_INT 1
8576: PLUS
8577: DEC
8578: ST_TO_ADDR
8579: LD_EXP 7
8583: PUSH
8584: FOR_TO
8585: IFFALSE 8627
// begin SetClass ( comp_sold [ i ] , class_sniper ) ;
8587: LD_EXP 7
8591: PUSH
8592: LD_VAR 0 3
8596: ARRAY
8597: PPUSH
8598: LD_INT 5
8600: PPUSH
8601: CALL_OW 336
// ComEnterUnit ( comp_sold [ i ] , comp_arm ) ;
8605: LD_EXP 7
8609: PUSH
8610: LD_VAR 0 3
8614: ARRAY
8615: PPUSH
8616: LD_EXP 28
8620: PPUSH
8621: CALL_OW 120
// end ;
8625: GO 8584
8627: POP
8628: POP
// end ; if build = comp_factory then
8629: LD_VAR 0 1
8633: PUSH
8634: LD_EXP 25
8638: EQUAL
8639: IFFALSE 9000
// begin comp_factory = build ;
8641: LD_ADDR_EXP 25
8645: PUSH
8646: LD_VAR 0 1
8650: ST_TO_ADDR
// FacComplete = true ;
8651: LD_ADDR_EXP 47
8655: PUSH
8656: LD_INT 1
8658: ST_TO_ADDR
// ext = GetExtPositions ( build ) ;
8659: LD_ADDR_VAR 0 2
8663: PUSH
8664: LD_VAR 0 1
8668: PPUSH
8669: CALL_OW 270
8673: ST_TO_ADDR
// for i = 1 to comp_engs do
8674: LD_ADDR_VAR 0 3
8678: PUSH
8679: DOUBLE
8680: LD_INT 1
8682: DEC
8683: ST_TO_ADDR
8684: LD_EXP 8
8688: PUSH
8689: FOR_TO
8690: IFFALSE 8998
// begin if GetNation ( comp_sold [ 1 ] ) = 1 or GetNation ( comp_dep ) = 3 then
8692: LD_EXP 7
8696: PUSH
8697: LD_INT 1
8699: ARRAY
8700: PPUSH
8701: CALL_OW 248
8705: PUSH
8706: LD_INT 1
8708: EQUAL
8709: PUSH
8710: LD_EXP 23
8714: PPUSH
8715: CALL_OW 248
8719: PUSH
8720: LD_INT 3
8722: EQUAL
8723: OR
8724: IFFALSE 8773
// begin AddComBuild ( comp_engs [ i ] , b_ext_noncombat , ext [ 1 ] [ 1 ] , ext [ 1 ] [ 2 ] , 4 ) ;
8726: LD_EXP 8
8730: PUSH
8731: LD_VAR 0 3
8735: ARRAY
8736: PPUSH
8737: LD_INT 19
8739: PPUSH
8740: LD_VAR 0 2
8744: PUSH
8745: LD_INT 1
8747: ARRAY
8748: PUSH
8749: LD_INT 1
8751: ARRAY
8752: PPUSH
8753: LD_VAR 0 2
8757: PUSH
8758: LD_INT 1
8760: ARRAY
8761: PUSH
8762: LD_INT 2
8764: ARRAY
8765: PPUSH
8766: LD_INT 4
8768: PPUSH
8769: CALL_OW 205
// end ; if GetNation ( comp_sold [ 1 ] ) = 2 then
8773: LD_EXP 7
8777: PUSH
8778: LD_INT 1
8780: ARRAY
8781: PPUSH
8782: CALL_OW 248
8786: PUSH
8787: LD_INT 2
8789: EQUAL
8790: IFFALSE 8839
// begin AddComBuild ( comp_engs [ i ] , b_ext_stitch , ext [ 1 ] [ 1 ] , ext [ 1 ] [ 2 ] , 4 ) ;
8792: LD_EXP 8
8796: PUSH
8797: LD_VAR 0 3
8801: ARRAY
8802: PPUSH
8803: LD_INT 23
8805: PPUSH
8806: LD_VAR 0 2
8810: PUSH
8811: LD_INT 1
8813: ARRAY
8814: PUSH
8815: LD_INT 1
8817: ARRAY
8818: PPUSH
8819: LD_VAR 0 2
8823: PUSH
8824: LD_INT 1
8826: ARRAY
8827: PUSH
8828: LD_INT 2
8830: ARRAY
8831: PPUSH
8832: LD_INT 4
8834: PPUSH
8835: CALL_OW 205
// end ; AddComBuild ( comp_engs [ i ] , b_ext_gun , ext [ 2 ] [ 1 ] , ext [ 2 ] [ 2 ] , 5 ) ;
8839: LD_EXP 8
8843: PUSH
8844: LD_VAR 0 3
8848: ARRAY
8849: PPUSH
8850: LD_INT 17
8852: PPUSH
8853: LD_VAR 0 2
8857: PUSH
8858: LD_INT 2
8860: ARRAY
8861: PUSH
8862: LD_INT 1
8864: ARRAY
8865: PPUSH
8866: LD_VAR 0 2
8870: PUSH
8871: LD_INT 2
8873: ARRAY
8874: PUSH
8875: LD_INT 2
8877: ARRAY
8878: PPUSH
8879: LD_INT 5
8881: PPUSH
8882: CALL_OW 205
// AddComBuild ( comp_engs [ i ] , b_ext_track , ext [ 3 ] [ 1 ] , ext [ 3 ] [ 2 ] , 3 ) ;
8886: LD_EXP 8
8890: PUSH
8891: LD_VAR 0 3
8895: ARRAY
8896: PPUSH
8897: LD_INT 16
8899: PPUSH
8900: LD_VAR 0 2
8904: PUSH
8905: LD_INT 3
8907: ARRAY
8908: PUSH
8909: LD_INT 1
8911: ARRAY
8912: PPUSH
8913: LD_VAR 0 2
8917: PUSH
8918: LD_INT 3
8920: ARRAY
8921: PUSH
8922: LD_INT 2
8924: ARRAY
8925: PPUSH
8926: LD_INT 3
8928: PPUSH
8929: CALL_OW 205
// if not GetNation ( comp_factory ) = 3 then
8933: LD_EXP 25
8937: PPUSH
8938: CALL_OW 248
8942: PUSH
8943: LD_INT 3
8945: EQUAL
8946: NOT
8947: IFFALSE 8996
// AddComBuild ( comp_engs [ i ] , b_ext_radar , ext [ 4 ] [ 1 ] , ext [ 4 ] [ 2 ] , 1 ) ;
8949: LD_EXP 8
8953: PUSH
8954: LD_VAR 0 3
8958: ARRAY
8959: PPUSH
8960: LD_INT 20
8962: PPUSH
8963: LD_VAR 0 2
8967: PUSH
8968: LD_INT 4
8970: ARRAY
8971: PUSH
8972: LD_INT 1
8974: ARRAY
8975: PPUSH
8976: LD_VAR 0 2
8980: PUSH
8981: LD_INT 4
8983: ARRAY
8984: PUSH
8985: LD_INT 2
8987: ARRAY
8988: PPUSH
8989: LD_INT 1
8991: PPUSH
8992: CALL_OW 205
// end ;
8996: GO 8689
8998: POP
8999: POP
// end ; if build = comp_lab then
9000: LD_VAR 0 1
9004: PUSH
9005: LD_EXP 26
9009: EQUAL
9010: IFFALSE 9020
// begin LabFull1 = true ;
9012: LD_ADDR_EXP 49
9016: PUSH
9017: LD_INT 1
9019: ST_TO_ADDR
// end ; if build = comp_lab2 then
9020: LD_VAR 0 1
9024: PUSH
9025: LD_EXP 27
9029: EQUAL
9030: IFFALSE 9040
// begin LabFull2 = true ;
9032: LD_ADDR_EXP 50
9036: PUSH
9037: LD_INT 1
9039: ST_TO_ADDR
// end ; end ;
9040: PPOPN 3
9042: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( fac ) = comp_side then
9043: LD_VAR 0 2
9047: PPUSH
9048: CALL_OW 255
9052: PUSH
9053: LD_EXP 1
9057: EQUAL
9058: IFFALSE 9407
// begin if GetNation ( veh ) = nation_american then
9060: LD_VAR 0 1
9064: PPUSH
9065: CALL_OW 248
9069: PUSH
9070: LD_INT 1
9072: EQUAL
9073: IFFALSE 9221
// begin if veh in FilterAllUnits ( [ f_weapon , us_cargo_bay ] ) then
9075: LD_VAR 0 1
9079: PUSH
9080: LD_INT 34
9082: PUSH
9083: LD_INT 12
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: PPUSH
9090: CALL_OW 69
9094: IN
9095: IFFALSE 9153
// begin comp_cargo = veh ;
9097: LD_ADDR_EXP 30
9101: PUSH
9102: LD_VAR 0 1
9106: ST_TO_ADDR
// comp_mechs = FilterAllUnits ( [ [ [ f_side , comp_side ] , [ f_class , 3 ] , [ f_inside ] ] ] ) ;
9107: LD_ADDR_EXP 9
9111: PUSH
9112: LD_INT 22
9114: PUSH
9115: LD_EXP 1
9119: PUSH
9120: EMPTY
9121: LIST
9122: LIST
9123: PUSH
9124: LD_INT 25
9126: PUSH
9127: LD_INT 3
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: PUSH
9134: LD_INT 54
9136: PUSH
9137: EMPTY
9138: LIST
9139: PUSH
9140: EMPTY
9141: LIST
9142: LIST
9143: LIST
9144: PUSH
9145: EMPTY
9146: LIST
9147: PPUSH
9148: CALL_OW 69
9152: ST_TO_ADDR
// end ; if not veh in FilterAllUnits ( [ f_weapon , us_cargo_bay ] ) then
9153: LD_VAR 0 1
9157: PUSH
9158: LD_INT 34
9160: PUSH
9161: LD_INT 12
9163: PUSH
9164: EMPTY
9165: LIST
9166: LIST
9167: PPUSH
9168: CALL_OW 69
9172: IN
9173: NOT
9174: IFFALSE 9221
// begin CLimiter = CLimiter + 1 ;
9176: LD_ADDR_EXP 34
9180: PUSH
9181: LD_EXP 34
9185: PUSH
9186: LD_INT 1
9188: PLUS
9189: ST_TO_ADDR
// comp_attgr = comp_attgr ^ veh ;
9190: LD_ADDR_EXP 32
9194: PUSH
9195: LD_EXP 32
9199: PUSH
9200: LD_VAR 0 1
9204: ADD
9205: ST_TO_ADDR
// ComMoveXY ( veh , 60 , 96 ) ;
9206: LD_VAR 0 1
9210: PPUSH
9211: LD_INT 60
9213: PPUSH
9214: LD_INT 96
9216: PPUSH
9217: CALL_OW 111
// end ; end ; if GetNation ( veh ) = nation_arabian then
9221: LD_VAR 0 1
9225: PPUSH
9226: CALL_OW 248
9230: PUSH
9231: LD_INT 2
9233: EQUAL
9234: IFFALSE 9314
// begin if veh in FilterAllUnits ( [ f_weapon , ar_cargo_bay ] ) then
9236: LD_VAR 0 1
9240: PUSH
9241: LD_INT 34
9243: PUSH
9244: LD_INT 32
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: PPUSH
9251: CALL_OW 69
9255: IN
9256: IFFALSE 9314
// begin comp_cargo = veh ;
9258: LD_ADDR_EXP 30
9262: PUSH
9263: LD_VAR 0 1
9267: ST_TO_ADDR
// comp_mechs = FilterAllUnits ( [ [ [ f_side , comp_side ] , [ f_class , 3 ] , [ f_inside ] ] ] ) ;
9268: LD_ADDR_EXP 9
9272: PUSH
9273: LD_INT 22
9275: PUSH
9276: LD_EXP 1
9280: PUSH
9281: EMPTY
9282: LIST
9283: LIST
9284: PUSH
9285: LD_INT 25
9287: PUSH
9288: LD_INT 3
9290: PUSH
9291: EMPTY
9292: LIST
9293: LIST
9294: PUSH
9295: LD_INT 54
9297: PUSH
9298: EMPTY
9299: LIST
9300: PUSH
9301: EMPTY
9302: LIST
9303: LIST
9304: LIST
9305: PUSH
9306: EMPTY
9307: LIST
9308: PPUSH
9309: CALL_OW 69
9313: ST_TO_ADDR
// end ; end ; if GetNation ( veh ) = nation_russian then
9314: LD_VAR 0 1
9318: PPUSH
9319: CALL_OW 248
9323: PUSH
9324: LD_INT 3
9326: EQUAL
9327: IFFALSE 9407
// begin if veh in FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) then
9329: LD_VAR 0 1
9333: PUSH
9334: LD_INT 34
9336: PUSH
9337: LD_INT 51
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: PPUSH
9344: CALL_OW 69
9348: IN
9349: IFFALSE 9407
// begin comp_cargo = veh ;
9351: LD_ADDR_EXP 30
9355: PUSH
9356: LD_VAR 0 1
9360: ST_TO_ADDR
// comp_mechs = FilterAllUnits ( [ [ [ f_side , comp_side ] , [ f_class , 3 ] , [ f_inside ] ] ] ) ;
9361: LD_ADDR_EXP 9
9365: PUSH
9366: LD_INT 22
9368: PUSH
9369: LD_EXP 1
9373: PUSH
9374: EMPTY
9375: LIST
9376: LIST
9377: PUSH
9378: LD_INT 25
9380: PUSH
9381: LD_INT 3
9383: PUSH
9384: EMPTY
9385: LIST
9386: LIST
9387: PUSH
9388: LD_INT 54
9390: PUSH
9391: EMPTY
9392: LIST
9393: PUSH
9394: EMPTY
9395: LIST
9396: LIST
9397: LIST
9398: PUSH
9399: EMPTY
9400: LIST
9401: PPUSH
9402: CALL_OW 69
9406: ST_TO_ADDR
// end ; end ; end ; end ;
9407: PPOPN 2
9409: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , comp_side ] , [ f_control , control_remote ] ] ) then
9410: LD_VAR 0 1
9414: PUSH
9415: LD_INT 22
9417: PUSH
9418: LD_EXP 1
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: PUSH
9427: LD_INT 33
9429: PUSH
9430: LD_INT 2
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: PPUSH
9441: CALL_OW 69
9445: IN
9446: IFFALSE 9457
// begin ComUnlink ( un ) ;
9448: LD_VAR 0 1
9452: PPUSH
9453: CALL_OW 136
// end ; end ;
9457: PPOPN 1
9459: END
// on UnitDestroyed ( un ) do var r_side , r_nation , r_class ;
9460: LD_INT 0
9462: PPUSH
9463: PPUSH
9464: PPUSH
// begin if un in FilterAllUnits ( [ [ [ f_side , player_side ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , class_sniper ] , [ f_class , class_mortar ] , [ f_class , class_bazooker ] ] ] ] ) then
9465: LD_VAR 0 1
9469: PUSH
9470: LD_INT 22
9472: PUSH
9473: LD_EXP 75
9477: PUSH
9478: EMPTY
9479: LIST
9480: LIST
9481: PUSH
9482: LD_INT 21
9484: PUSH
9485: LD_INT 1
9487: PUSH
9488: EMPTY
9489: LIST
9490: LIST
9491: PUSH
9492: LD_INT 2
9494: PUSH
9495: LD_INT 25
9497: PUSH
9498: LD_INT 1
9500: PUSH
9501: EMPTY
9502: LIST
9503: LIST
9504: PUSH
9505: LD_INT 25
9507: PUSH
9508: LD_INT 2
9510: PUSH
9511: EMPTY
9512: LIST
9513: LIST
9514: PUSH
9515: LD_INT 25
9517: PUSH
9518: LD_INT 3
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: PUSH
9525: LD_INT 25
9527: PUSH
9528: LD_INT 4
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: PUSH
9535: LD_INT 25
9537: PUSH
9538: LD_INT 5
9540: PUSH
9541: EMPTY
9542: LIST
9543: LIST
9544: PUSH
9545: LD_INT 25
9547: PUSH
9548: LD_INT 8
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: PUSH
9555: LD_INT 25
9557: PUSH
9558: LD_INT 9
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: PUSH
9565: EMPTY
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: PUSH
9575: EMPTY
9576: LIST
9577: LIST
9578: LIST
9579: PUSH
9580: EMPTY
9581: LIST
9582: PPUSH
9583: CALL_OW 69
9587: IN
9588: IFFALSE 9877
// begin if p_resp <= r_limit then
9590: LD_EXP 85
9594: PUSH
9595: LD_EXP 89
9599: LESSEQUAL
9600: IFFALSE 9877
// begin p_resp = p_resp + 1 ;
9602: LD_ADDR_EXP 85
9606: PUSH
9607: LD_EXP 85
9611: PUSH
9612: LD_INT 1
9614: PLUS
9615: ST_TO_ADDR
// r_side = GetSide ( un ) ;
9616: LD_ADDR_VAR 0 2
9620: PUSH
9621: LD_VAR 0 1
9625: PPUSH
9626: CALL_OW 255
9630: ST_TO_ADDR
// r_nation = GetNation ( un ) ;
9631: LD_ADDR_VAR 0 3
9635: PUSH
9636: LD_VAR 0 1
9640: PPUSH
9641: CALL_OW 248
9645: ST_TO_ADDR
// r_class = GetClass ( un ) ;
9646: LD_ADDR_VAR 0 4
9650: PUSH
9651: LD_VAR 0 1
9655: PPUSH
9656: CALL_OW 257
9660: ST_TO_ADDR
// Wait ( Rand ( 2 2$30 , 15 15$00 ) ) ;
9661: LD_INT 5250
9663: PPUSH
9664: LD_INT 31500
9666: PPUSH
9667: CALL_OW 12
9671: PPUSH
9672: CALL_OW 67
// uc_side = r_side ;
9676: LD_ADDR_OWVAR 20
9680: PUSH
9681: LD_VAR 0 2
9685: ST_TO_ADDR
// uc_nation = r_nation ;
9686: LD_ADDR_OWVAR 21
9690: PUSH
9691: LD_VAR 0 3
9695: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
9696: LD_ADDR_OWVAR 27
9700: PUSH
9701: LD_INT 1
9703: PPUSH
9704: LD_INT 2
9706: PPUSH
9707: CALL_OW 12
9711: ST_TO_ADDR
// hc_gallery =  ;
9712: LD_ADDR_OWVAR 33
9716: PUSH
9717: LD_STRING 
9719: ST_TO_ADDR
// hc_skills = [ comp_skill1 + Rand ( - 3 , 1 ) , comp_skill2 + Rand ( - 3 , 1 ) , comp_skill3 + Rand ( - 3 , 1 ) , comp_skill4 + Rand ( - 3 , 1 ) ] ;
9720: LD_ADDR_OWVAR 31
9724: PUSH
9725: LD_EXP 12
9729: PUSH
9730: LD_INT 3
9732: NEG
9733: PPUSH
9734: LD_INT 1
9736: PPUSH
9737: CALL_OW 12
9741: PLUS
9742: PUSH
9743: LD_EXP 13
9747: PUSH
9748: LD_INT 3
9750: NEG
9751: PPUSH
9752: LD_INT 1
9754: PPUSH
9755: CALL_OW 12
9759: PLUS
9760: PUSH
9761: LD_EXP 14
9765: PUSH
9766: LD_INT 3
9768: NEG
9769: PPUSH
9770: LD_INT 1
9772: PPUSH
9773: CALL_OW 12
9777: PLUS
9778: PUSH
9779: LD_EXP 15
9783: PUSH
9784: LD_INT 3
9786: NEG
9787: PPUSH
9788: LD_INT 1
9790: PPUSH
9791: CALL_OW 12
9795: PLUS
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
9803: LD_ADDR_OWVAR 29
9807: PUSH
9808: LD_INT 8
9810: PPUSH
9811: LD_INT 12
9813: PPUSH
9814: CALL_OW 12
9818: PUSH
9819: LD_INT 9
9821: PPUSH
9822: LD_INT 11
9824: PPUSH
9825: CALL_OW 12
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: ST_TO_ADDR
// hc_name =  ;
9834: LD_ADDR_OWVAR 26
9838: PUSH
9839: LD_STRING 
9841: ST_TO_ADDR
// hc_class = r_class ;
9842: LD_ADDR_OWVAR 28
9846: PUSH
9847: LD_VAR 0 4
9851: ST_TO_ADDR
// un = CreateHuman ;
9852: LD_ADDR_VAR 0 1
9856: PUSH
9857: CALL_OW 44
9861: ST_TO_ADDR
// PlaceUnitArea ( un , ApeResp , true ) ;
9862: LD_VAR 0 1
9866: PPUSH
9867: LD_INT 3
9869: PPUSH
9870: LD_INT 1
9872: PPUSH
9873: CALL_OW 49
// end ; end ; if un in FilterAllUnits ( [ [ f_side , comp_side ] , [ f_type , unit_human ] ] ) then
9877: LD_VAR 0 1
9881: PUSH
9882: LD_INT 22
9884: PUSH
9885: LD_EXP 1
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: PUSH
9894: LD_INT 21
9896: PUSH
9897: LD_INT 1
9899: PUSH
9900: EMPTY
9901: LIST
9902: LIST
9903: PUSH
9904: EMPTY
9905: LIST
9906: LIST
9907: PPUSH
9908: CALL_OW 69
9912: IN
9913: IFFALSE 10360
// begin if c_resp <= r_limit then
9915: LD_EXP 86
9919: PUSH
9920: LD_EXP 89
9924: LESSEQUAL
9925: IFFALSE 10360
// begin c_resp = c_resp + 1 ;
9927: LD_ADDR_EXP 86
9931: PUSH
9932: LD_EXP 86
9936: PUSH
9937: LD_INT 1
9939: PLUS
9940: ST_TO_ADDR
// r_side = GetSide ( un ) ;
9941: LD_ADDR_VAR 0 2
9945: PUSH
9946: LD_VAR 0 1
9950: PPUSH
9951: CALL_OW 255
9955: ST_TO_ADDR
// r_nation = GetNation ( un ) ;
9956: LD_ADDR_VAR 0 3
9960: PUSH
9961: LD_VAR 0 1
9965: PPUSH
9966: CALL_OW 248
9970: ST_TO_ADDR
// r_class = GetClass ( un ) ;
9971: LD_ADDR_VAR 0 4
9975: PUSH
9976: LD_VAR 0 1
9980: PPUSH
9981: CALL_OW 257
9985: ST_TO_ADDR
// Wait ( Rand ( 2 2$30 , 15 15$00 ) ) ;
9986: LD_INT 5250
9988: PPUSH
9989: LD_INT 31500
9991: PPUSH
9992: CALL_OW 12
9996: PPUSH
9997: CALL_OW 67
// uc_side = r_side ;
10001: LD_ADDR_OWVAR 20
10005: PUSH
10006: LD_VAR 0 2
10010: ST_TO_ADDR
// uc_nation = r_nation ;
10011: LD_ADDR_OWVAR 21
10015: PUSH
10016: LD_VAR 0 3
10020: ST_TO_ADDR
// hc_sex = Rand ( sex_male , sex_female ) ;
10021: LD_ADDR_OWVAR 27
10025: PUSH
10026: LD_INT 1
10028: PPUSH
10029: LD_INT 2
10031: PPUSH
10032: CALL_OW 12
10036: ST_TO_ADDR
// hc_gallery =  ;
10037: LD_ADDR_OWVAR 33
10041: PUSH
10042: LD_STRING 
10044: ST_TO_ADDR
// hc_skills = [ comp_skill1 + Rand ( - 3 , 1 ) , comp_skill2 + Rand ( - 3 , 1 ) , comp_skill3 + Rand ( - 3 , 1 ) , comp_skill4 + Rand ( - 3 , 1 ) ] ;
10045: LD_ADDR_OWVAR 31
10049: PUSH
10050: LD_EXP 12
10054: PUSH
10055: LD_INT 3
10057: NEG
10058: PPUSH
10059: LD_INT 1
10061: PPUSH
10062: CALL_OW 12
10066: PLUS
10067: PUSH
10068: LD_EXP 13
10072: PUSH
10073: LD_INT 3
10075: NEG
10076: PPUSH
10077: LD_INT 1
10079: PPUSH
10080: CALL_OW 12
10084: PLUS
10085: PUSH
10086: LD_EXP 14
10090: PUSH
10091: LD_INT 3
10093: NEG
10094: PPUSH
10095: LD_INT 1
10097: PPUSH
10098: CALL_OW 12
10102: PLUS
10103: PUSH
10104: LD_EXP 15
10108: PUSH
10109: LD_INT 3
10111: NEG
10112: PPUSH
10113: LD_INT 1
10115: PPUSH
10116: CALL_OW 12
10120: PLUS
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
10128: LD_ADDR_OWVAR 29
10132: PUSH
10133: LD_INT 8
10135: PPUSH
10136: LD_INT 12
10138: PPUSH
10139: CALL_OW 12
10143: PUSH
10144: LD_INT 9
10146: PPUSH
10147: LD_INT 11
10149: PPUSH
10150: CALL_OW 12
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: ST_TO_ADDR
// hc_name =  ;
10159: LD_ADDR_OWVAR 26
10163: PUSH
10164: LD_STRING 
10166: ST_TO_ADDR
// hc_class = r_class ;
10167: LD_ADDR_OWVAR 28
10171: PUSH
10172: LD_VAR 0 4
10176: ST_TO_ADDR
// un = CreateHuman ;
10177: LD_ADDR_VAR 0 1
10181: PUSH
10182: CALL_OW 44
10186: ST_TO_ADDR
// PlaceUnitArea ( un , CompResp , true ) ;
10187: LD_VAR 0 1
10191: PPUSH
10192: LD_INT 1
10194: PPUSH
10195: LD_INT 1
10197: PPUSH
10198: CALL_OW 49
// if r_class = 1 then
10202: LD_VAR 0 4
10206: PUSH
10207: LD_INT 1
10209: EQUAL
10210: IFFALSE 10242
// begin ComEnterUnit ( un , comp_arm ) ;
10212: LD_VAR 0 1
10216: PPUSH
10217: LD_EXP 28
10221: PPUSH
10222: CALL_OW 120
// comp_sold = comp_sold ^ un ;
10226: LD_ADDR_EXP 7
10230: PUSH
10231: LD_EXP 7
10235: PUSH
10236: LD_VAR 0 1
10240: ADD
10241: ST_TO_ADDR
// end ; if r_class = 2 then
10242: LD_VAR 0 4
10246: PUSH
10247: LD_INT 2
10249: EQUAL
10250: IFFALSE 10268
// begin comp_engs = comp_engs ^ un ;
10252: LD_ADDR_EXP 8
10256: PUSH
10257: LD_EXP 8
10261: PUSH
10262: LD_VAR 0 1
10266: ADD
10267: ST_TO_ADDR
// end ; if r_class = 3 then
10268: LD_VAR 0 4
10272: PUSH
10273: LD_INT 3
10275: EQUAL
10276: IFFALSE 10308
// begin ComEnterUnit ( un , comp_factory ) ;
10278: LD_VAR 0 1
10282: PPUSH
10283: LD_EXP 25
10287: PPUSH
10288: CALL_OW 120
// comp_mechs = comp_mechs ^ un ;
10292: LD_ADDR_EXP 9
10296: PUSH
10297: LD_EXP 9
10301: PUSH
10302: LD_VAR 0 1
10306: ADD
10307: ST_TO_ADDR
// end ; if r_class = 4 then
10308: LD_VAR 0 4
10312: PUSH
10313: LD_INT 4
10315: EQUAL
10316: IFFALSE 10360
// begin SetClass ( un , 1 ) ;
10318: LD_VAR 0 1
10322: PPUSH
10323: LD_INT 1
10325: PPUSH
10326: CALL_OW 336
// ComEnterUnit ( un , comp_arm ) ;
10330: LD_VAR 0 1
10334: PPUSH
10335: LD_EXP 28
10339: PPUSH
10340: CALL_OW 120
// comp_sold = comp_sold ^ un ;
10344: LD_ADDR_EXP 7
10348: PUSH
10349: LD_EXP 7
10353: PUSH
10354: LD_VAR 0 1
10358: ADD
10359: ST_TO_ADDR
// end ; end ; end ; if un = comp_cargo or un in FilterAllUnits ( [ [ [ f_side , comp_side ] , [ f_class , 3 ] , [ f_driving ] ] ] ) then
10360: LD_VAR 0 1
10364: PUSH
10365: LD_EXP 30
10369: EQUAL
10370: PUSH
10371: LD_VAR 0 1
10375: PUSH
10376: LD_INT 22
10378: PUSH
10379: LD_EXP 1
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: LD_INT 25
10390: PUSH
10391: LD_INT 3
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: LD_INT 55
10400: PUSH
10401: EMPTY
10402: LIST
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: LIST
10408: PUSH
10409: EMPTY
10410: LIST
10411: PPUSH
10412: CALL_OW 69
10416: IN
10417: OR
10418: IFFALSE 10489
// begin comp_cargo = [ ] ;
10420: LD_ADDR_EXP 30
10424: PUSH
10425: EMPTY
10426: ST_TO_ADDR
// if Researched ( comp_side , tech_advchassis ) = true then
10427: LD_EXP 1
10431: PPUSH
10432: LD_INT 36
10434: PPUSH
10435: CALL_OW 325
10439: PUSH
10440: LD_INT 1
10442: EQUAL
10443: IFFALSE 10468
// begin AddComConstruct ( comp_factory , us_morphling , engine_combustion , control_remote , us_cargo_bay ) ;
10445: LD_EXP 25
10449: PPUSH
10450: LD_INT 5
10452: PPUSH
10453: LD_INT 1
10455: PPUSH
10456: LD_INT 2
10458: PPUSH
10459: LD_INT 12
10461: PPUSH
10462: CALL_OW 185
// end else
10466: GO 10489
// begin AddComConstruct ( comp_factory , us_medium_tracked , engine_combustion , control_remote , us_cargo_bay ) ;
10468: LD_EXP 25
10472: PPUSH
10473: LD_INT 3
10475: PPUSH
10476: LD_INT 1
10478: PPUSH
10479: LD_INT 2
10481: PPUSH
10482: LD_INT 12
10484: PPUSH
10485: CALL_OW 185
// end ; end ; if un in comp_attgr then
10489: LD_VAR 0 1
10493: PUSH
10494: LD_EXP 32
10498: IN
10499: IFFALSE 10565
// begin CLimiter = CLimiter - 1 ;
10501: LD_ADDR_EXP 34
10505: PUSH
10506: LD_EXP 34
10510: PUSH
10511: LD_INT 1
10513: MINUS
10514: ST_TO_ADDR
// comp_attgr = FilterAllUnits ( [ [ f_side , comp_side ] , [ f_control , control_remote ] ] ) ;
10515: LD_ADDR_EXP 32
10519: PUSH
10520: LD_INT 22
10522: PUSH
10523: LD_EXP 1
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: PUSH
10532: LD_INT 33
10534: PUSH
10535: LD_INT 2
10537: PUSH
10538: EMPTY
10539: LIST
10540: LIST
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: PPUSH
10546: CALL_OW 69
10550: ST_TO_ADDR
// dlimiter = dlimiter + 1 ;
10551: LD_ADDR_EXP 35
10555: PUSH
10556: LD_EXP 35
10560: PUSH
10561: LD_INT 1
10563: PLUS
10564: ST_TO_ADDR
// end ; if GetSide ( un ) = comp_side then
10565: LD_VAR 0 1
10569: PPUSH
10570: CALL_OW 255
10574: PUSH
10575: LD_EXP 1
10579: EQUAL
10580: IFFALSE 10690
// begin if un in FilterAllUnits ( [ f_type , unit_human ] ) then
10582: LD_VAR 0 1
10586: PUSH
10587: LD_INT 21
10589: PUSH
10590: LD_INT 1
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: PPUSH
10597: CALL_OW 69
10601: IN
10602: IFFALSE 10618
// begin Score = Score + 100 ;
10604: LD_ADDR_EXP 81
10608: PUSH
10609: LD_EXP 81
10613: PUSH
10614: LD_INT 100
10616: PLUS
10617: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ f_type , unit_building ] ) then
10618: LD_VAR 0 1
10622: PUSH
10623: LD_INT 21
10625: PUSH
10626: LD_INT 3
10628: PUSH
10629: EMPTY
10630: LIST
10631: LIST
10632: PPUSH
10633: CALL_OW 69
10637: IN
10638: IFFALSE 10654
// begin Score = Score + 50 ;
10640: LD_ADDR_EXP 81
10644: PUSH
10645: LD_EXP 81
10649: PUSH
10650: LD_INT 50
10652: PLUS
10653: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ f_type , unit_vehicle ] ) then
10654: LD_VAR 0 1
10658: PUSH
10659: LD_INT 21
10661: PUSH
10662: LD_INT 2
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: PPUSH
10669: CALL_OW 69
10673: IN
10674: IFFALSE 10690
// begin Score = Score + 10 ;
10676: LD_ADDR_EXP 81
10680: PUSH
10681: LD_EXP 81
10685: PUSH
10686: LD_INT 10
10688: PLUS
10689: ST_TO_ADDR
// end ; end ; if GetNation ( un ) = nation_nature then
10690: LD_VAR 0 1
10694: PPUSH
10695: CALL_OW 248
10699: PUSH
10700: LD_INT 0
10702: EQUAL
10703: IFFALSE 10727
// begin Wait ( Rand ( 0 0$30 , 4 4$00 ) ) ;
10705: LD_INT 1050
10707: PPUSH
10708: LD_INT 8400
10710: PPUSH
10711: CALL_OW 12
10715: PPUSH
10716: CALL_OW 67
// PrepareApeman ( 1 ) ;
10720: LD_INT 1
10722: PPUSH
10723: CALL 7090 0 1
// end ; end ;
10727: PPOPN 4
10729: END
// on ResearchComplete ( tech , lab ) do var i , ext ;
10730: LD_INT 0
10732: PPUSH
10733: PPUSH
// begin if lab = comp_lab or lab = comp_lab2 then
10734: LD_VAR 0 2
10738: PUSH
10739: LD_EXP 26
10743: EQUAL
10744: PUSH
10745: LD_VAR 0 2
10749: PUSH
10750: LD_EXP 27
10754: EQUAL
10755: OR
10756: IFFALSE 11016
// begin if tech = tech_oilpow then
10758: LD_VAR 0 1
10762: PUSH
10763: LD_INT 46
10765: EQUAL
10766: IFFALSE 10776
// begin CanBuildPlants = true ;
10768: LD_ADDR_EXP 42
10772: PUSH
10773: LD_INT 1
10775: ST_TO_ADDR
// end ; if tech = tech_gun then
10776: LD_VAR 0 1
10780: PUSH
10781: LD_INT 39
10783: EQUAL
10784: IFFALSE 10794
// begin TechGun = true ;
10786: LD_ADDR_EXP 56
10790: PUSH
10791: LD_INT 1
10793: ST_TO_ADDR
// end ; if tech = tech_radar then
10794: LD_VAR 0 1
10798: PUSH
10799: LD_INT 6
10801: EQUAL
10802: IFFALSE 10812
// begin TechRadar = true ;
10804: LD_ADDR_EXP 59
10808: PUSH
10809: LD_INT 1
10811: ST_TO_ADDR
// end ; if tech = tech_remcont then
10812: LD_VAR 0 1
10816: PUSH
10817: LD_INT 15
10819: EQUAL
10820: IFFALSE 10830
// begin TechRemoteControl = true ;
10822: LD_ADDR_EXP 60
10826: PUSH
10827: LD_INT 1
10829: ST_TO_ADDR
// end ; if tech = tech_ai then
10830: LD_VAR 0 1
10834: PUSH
10835: LD_INT 32
10837: EQUAL
10838: IFFALSE 10848
// begin TechAI = true ;
10840: LD_ADDR_EXP 62
10844: PUSH
10845: LD_INT 1
10847: ST_TO_ADDR
// end ; if tech = tech_rocket then
10848: LD_VAR 0 1
10852: PUSH
10853: LD_INT 40
10855: EQUAL
10856: IFFALSE 10942
// begin ext = GetExtPositions ( comp_factory ) ;
10858: LD_ADDR_VAR 0 4
10862: PUSH
10863: LD_EXP 25
10867: PPUSH
10868: CALL_OW 270
10872: ST_TO_ADDR
// for i = 1 to comp_engs do
10873: LD_ADDR_VAR 0 3
10877: PUSH
10878: DOUBLE
10879: LD_INT 1
10881: DEC
10882: ST_TO_ADDR
10883: LD_EXP 8
10887: PUSH
10888: FOR_TO
10889: IFFALSE 10940
// begin AddComBuild ( comp_engs [ i ] , b_ext_rocket , ext [ 5 ] [ 1 ] , ext [ 5 ] [ 2 ] , 5 ) ;
10891: LD_EXP 8
10895: PUSH
10896: LD_VAR 0 3
10900: ARRAY
10901: PPUSH
10902: LD_INT 18
10904: PPUSH
10905: LD_VAR 0 4
10909: PUSH
10910: LD_INT 5
10912: ARRAY
10913: PUSH
10914: LD_INT 1
10916: ARRAY
10917: PPUSH
10918: LD_VAR 0 4
10922: PUSH
10923: LD_INT 5
10925: ARRAY
10926: PUSH
10927: LD_INT 2
10929: ARRAY
10930: PPUSH
10931: LD_INT 5
10933: PPUSH
10934: CALL_OW 205
// end ;
10938: GO 10888
10940: POP
10941: POP
// end ; if tech = tech_lassight then
10942: LD_VAR 0 1
10946: PUSH
10947: LD_INT 12
10949: EQUAL
10950: IFFALSE 11016
// begin for i = 1 to comp_sci do
10952: LD_ADDR_VAR 0 3
10956: PUSH
10957: DOUBLE
10958: LD_INT 1
10960: DEC
10961: ST_TO_ADDR
10962: LD_EXP 10
10966: PUSH
10967: FOR_TO
10968: IFFALSE 11014
// begin ComExitBuilding ( comp_sci [ i ] ) ;
10970: LD_EXP 10
10974: PUSH
10975: LD_VAR 0 3
10979: ARRAY
10980: PPUSH
10981: CALL_OW 122
// Wait ( 0 0$01 ) ;
10985: LD_INT 35
10987: PPUSH
10988: CALL_OW 67
// AddComEnterUnit ( comp_sci [ i ] , comp_lab2 ) ;
10992: LD_EXP 10
10996: PUSH
10997: LD_VAR 0 3
11001: ARRAY
11002: PPUSH
11003: LD_EXP 27
11007: PPUSH
11008: CALL_OW 180
// end ;
11012: GO 10967
11014: POP
11015: POP
// end ; end ; end ;
11016: PPOPN 4
11018: END
// on EnterBuilding ( b , un ) do begin if GetSide ( b ) = comp_side then
11019: LD_VAR 0 1
11023: PPUSH
11024: CALL_OW 255
11028: PUSH
11029: LD_EXP 1
11033: EQUAL
11034: IFFALSE 11102
// begin if b = comp_arm and Researched ( comp_side , tech_lassight ) = true then
11036: LD_VAR 0 1
11040: PUSH
11041: LD_EXP 28
11045: EQUAL
11046: PUSH
11047: LD_EXP 1
11051: PPUSH
11052: LD_INT 12
11054: PPUSH
11055: CALL_OW 325
11059: PUSH
11060: LD_INT 1
11062: EQUAL
11063: AND
11064: IFFALSE 11078
// begin SetClass ( un , class_sniper ) ;
11066: LD_VAR 0 2
11070: PPUSH
11071: LD_INT 5
11073: PPUSH
11074: CALL_OW 336
// end ; if b = comp_factory then
11078: LD_VAR 0 1
11082: PUSH
11083: LD_EXP 25
11087: EQUAL
11088: IFFALSE 11102
// begin SetClass ( un , class_mechanic ) ;
11090: LD_VAR 0 2
11094: PPUSH
11095: LD_INT 3
11097: PPUSH
11098: CALL_OW 336
// end ; end ; end ; end_of_file
11102: PPOPN 2
11104: END
// every 0 0$10 trigger ProductionRADAR = true do
11105: LD_EXP 65
11109: PUSH
11110: LD_INT 1
11112: EQUAL
11113: IFFALSE 11202
11115: GO 11117
11117: DISABLE
// begin enable ;
11118: ENABLE
// if dlimiter >= limiter - 1 then
11119: LD_EXP 35
11123: PUSH
11124: LD_EXP 33
11128: PUSH
11129: LD_INT 1
11131: MINUS
11132: GREATEREQUAL
11133: IFFALSE 11151
// begin CanProduce = true ;
11135: LD_ADDR_EXP 71
11139: PUSH
11140: LD_INT 1
11142: ST_TO_ADDR
// dlimiter = 0 ;
11143: LD_ADDR_EXP 35
11147: PUSH
11148: LD_INT 0
11150: ST_TO_ADDR
// end ; if CanProduce = true then
11151: LD_EXP 71
11155: PUSH
11156: LD_INT 1
11158: EQUAL
11159: IFFALSE 11202
// begin lvl = lvl + 1 ;
11161: LD_ADDR_EXP 73
11165: PUSH
11166: LD_EXP 73
11170: PUSH
11171: LD_INT 1
11173: PLUS
11174: ST_TO_ADDR
// CanProduce = false ;
11175: LD_ADDR_EXP 71
11179: PUSH
11180: LD_INT 0
11182: ST_TO_ADDR
// Wait ( Rand ( 0 0$30 , 3 3$00 ) ) ;
11183: LD_INT 1050
11185: PPUSH
11186: LD_INT 6300
11188: PPUSH
11189: CALL_OW 12
11193: PPUSH
11194: CALL_OW 67
// PrepareAttack ;
11198: CALL 11203 0 0
// end ; end ;
11202: END
// export function PrepareAttack ; var i ; begin
11203: LD_INT 0
11205: PPUSH
11206: PPUSH
// if lvl < 3 then
11207: LD_EXP 73
11211: PUSH
11212: LD_INT 3
11214: LESS
11215: IFFALSE 11316
// begin for i = 1 to limiter do
11217: LD_ADDR_VAR 0 2
11221: PUSH
11222: DOUBLE
11223: LD_INT 1
11225: DEC
11226: ST_TO_ADDR
11227: LD_EXP 33
11231: PUSH
11232: FOR_TO
11233: IFFALSE 11314
// begin if GetNation ( comp_factory ) = 1 then
11235: LD_EXP 25
11239: PPUSH
11240: CALL_OW 248
11244: PUSH
11245: LD_INT 1
11247: EQUAL
11248: IFFALSE 11312
// begin if diff_attack = 1 then
11250: LD_EXP 18
11254: PUSH
11255: LD_INT 1
11257: EQUAL
11258: IFFALSE 11281
// begin AddComConstruct ( comp_factory , us_medium_tracked , engine_combustion , control_remote , us_gatling_gun ) ;
11260: LD_EXP 25
11264: PPUSH
11265: LD_INT 3
11267: PPUSH
11268: LD_INT 1
11270: PPUSH
11271: LD_INT 2
11273: PPUSH
11274: LD_INT 4
11276: PPUSH
11277: CALL_OW 185
// end ; if diff_attack > 2 then
11281: LD_EXP 18
11285: PUSH
11286: LD_INT 2
11288: GREATER
11289: IFFALSE 11312
// begin AddComConstruct ( comp_factory , us_medium_tracked , engine_combustion , control_remote , us_double_gun ) ;
11291: LD_EXP 25
11295: PPUSH
11296: LD_INT 3
11298: PPUSH
11299: LD_INT 1
11301: PPUSH
11302: LD_INT 2
11304: PPUSH
11305: LD_INT 5
11307: PPUSH
11308: CALL_OW 185
// end ; end ; end ;
11312: GO 11232
11314: POP
11315: POP
// end ; if lvl >= 3 then
11316: LD_EXP 73
11320: PUSH
11321: LD_INT 3
11323: GREATEREQUAL
11324: IFFALSE 11500
// begin for i = 1 to limiter do
11326: LD_ADDR_VAR 0 2
11330: PUSH
11331: DOUBLE
11332: LD_INT 1
11334: DEC
11335: ST_TO_ADDR
11336: LD_EXP 33
11340: PUSH
11341: FOR_TO
11342: IFFALSE 11498
// begin if diff_attack = 1 then
11344: LD_EXP 18
11348: PUSH
11349: LD_INT 1
11351: EQUAL
11352: IFFALSE 11375
// begin AddComConstruct ( comp_factory , us_medium_tracked , engine_combustion , control_remote , us_double_gun ) ;
11354: LD_EXP 25
11358: PPUSH
11359: LD_INT 3
11361: PPUSH
11362: LD_INT 1
11364: PPUSH
11365: LD_INT 2
11367: PPUSH
11368: LD_INT 5
11370: PPUSH
11371: CALL_OW 185
// end ; if diff_attack = 2 then
11375: LD_EXP 18
11379: PUSH
11380: LD_INT 2
11382: EQUAL
11383: IFFALSE 11406
// begin AddComConstruct ( comp_factory , us_morphling , engine_combustion , control_remote , us_heavy_gun ) ;
11385: LD_EXP 25
11389: PPUSH
11390: LD_INT 5
11392: PPUSH
11393: LD_INT 1
11395: PPUSH
11396: LD_INT 2
11398: PPUSH
11399: LD_INT 6
11401: PPUSH
11402: CALL_OW 185
// end ; if diff_attack > 2 then
11406: LD_EXP 18
11410: PUSH
11411: LD_INT 2
11413: GREATER
11414: IFFALSE 11496
// if Researched ( comp_side , tech_rocket ) = true and Researched ( comp_side , tech_advchassis ) = true then
11416: LD_EXP 1
11420: PPUSH
11421: LD_INT 40
11423: PPUSH
11424: CALL_OW 325
11428: PUSH
11429: LD_INT 1
11431: EQUAL
11432: PUSH
11433: LD_EXP 1
11437: PPUSH
11438: LD_INT 36
11440: PPUSH
11441: CALL_OW 325
11445: PUSH
11446: LD_INT 1
11448: EQUAL
11449: AND
11450: IFFALSE 11475
// begin AddComConstruct ( comp_factory , us_morphling , engine_combustion , control_remote , us_rocket_launcher ) ;
11452: LD_EXP 25
11456: PPUSH
11457: LD_INT 5
11459: PPUSH
11460: LD_INT 1
11462: PPUSH
11463: LD_INT 2
11465: PPUSH
11466: LD_INT 7
11468: PPUSH
11469: CALL_OW 185
// end else
11473: GO 11496
// begin AddComConstruct ( comp_factory , us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ) ;
11475: LD_EXP 25
11479: PPUSH
11480: LD_INT 4
11482: PPUSH
11483: LD_INT 1
11485: PPUSH
11486: LD_INT 2
11488: PPUSH
11489: LD_INT 6
11491: PPUSH
11492: CALL_OW 185
// end ; end ;
11496: GO 11341
11498: POP
11499: POP
// end ; end ;
11500: LD_VAR 0 1
11504: RET
// every 0 0$11 trigger CanAttack = false and CLimiter = Limiter do
11505: LD_EXP 70
11509: PUSH
11510: LD_INT 0
11512: EQUAL
11513: PUSH
11514: LD_EXP 34
11518: PUSH
11519: LD_EXP 33
11523: EQUAL
11524: AND
11525: IFFALSE 11539
11527: GO 11529
11529: DISABLE
// begin CanAttack = true ;
11530: LD_ADDR_EXP 70
11534: PUSH
11535: LD_INT 1
11537: ST_TO_ADDR
// enable ;
11538: ENABLE
// end ;
11539: END
// export Dir ; every 0 0$01 do
11540: GO 11542
11542: DISABLE
// Dir = 0 ;
11543: LD_ADDR_EXP 83
11547: PUSH
11548: LD_INT 0
11550: ST_TO_ADDR
11551: END
// every 5 5$00 do
11552: GO 11554
11554: DISABLE
// begin enable ;
11555: ENABLE
// Dir = Dir + 1 ;
11556: LD_ADDR_EXP 83
11560: PUSH
11561: LD_EXP 83
11565: PUSH
11566: LD_INT 1
11568: PLUS
11569: ST_TO_ADDR
// if Dir > 2 then
11570: LD_EXP 83
11574: PUSH
11575: LD_INT 2
11577: GREATER
11578: IFFALSE 11588
// Dir = 1 ;
11580: LD_ADDR_EXP 83
11584: PUSH
11585: LD_INT 1
11587: ST_TO_ADDR
// end ;
11588: END
// every 0 0$10 trigger CanAttack = true do var filter ;
11589: LD_EXP 70
11593: PUSH
11594: LD_INT 1
11596: EQUAL
11597: IFFALSE 11663
11599: GO 11601
11601: DISABLE
11602: LD_INT 0
11604: PPUSH
// begin enable ;
11605: ENABLE
// filter = UnitFilter ( comp_attgr , [ f_ok ] ) ;
11606: LD_ADDR_VAR 0 1
11610: PUSH
11611: LD_EXP 32
11615: PPUSH
11616: LD_INT 50
11618: PUSH
11619: EMPTY
11620: LIST
11621: PPUSH
11622: CALL_OW 72
11626: ST_TO_ADDR
// if filter >= limiter then
11627: LD_VAR 0 1
11631: PUSH
11632: LD_EXP 33
11636: GREATEREQUAL
11637: IFFALSE 11663
// begin CanAttack = false ;
11639: LD_ADDR_EXP 70
11643: PUSH
11644: LD_INT 0
11646: ST_TO_ADDR
// Wait ( 0 0$03 ) ;
11647: LD_INT 105
11649: PPUSH
11650: CALL_OW 67
// ComAttackPlayerBase ( filter ) ;
11654: LD_VAR 0 1
11658: PPUSH
11659: CALL 11666 0 1
// end ; end ;
11663: PPOPN 1
11665: END
// export function ComAttackPlayerBase ( attackers ) ; var un , pl_units ; begin
11666: LD_INT 0
11668: PPUSH
11669: PPUSH
11670: PPUSH
// repeat begin for un in attackers do
11671: LD_ADDR_VAR 0 3
11675: PUSH
11676: LD_VAR 0 1
11680: PUSH
11681: FOR_IN
11682: IFFALSE 11739
// begin pl_units := FilterAllUnits ( [ f_side , player_side ] ) ;
11684: LD_ADDR_VAR 0 4
11688: PUSH
11689: LD_INT 22
11691: PUSH
11692: LD_EXP 75
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PPUSH
11701: CALL_OW 69
11705: ST_TO_ADDR
// ComAttackUnit ( un , NearestUnitToUnit ( pl_units , un ) ) ;
11706: LD_VAR 0 3
11710: PPUSH
11711: LD_VAR 0 4
11715: PPUSH
11716: LD_VAR 0 3
11720: PPUSH
11721: CALL_OW 74
11725: PPUSH
11726: CALL_OW 115
// Wait ( 0 0$01 ) ;
11730: LD_INT 35
11732: PPUSH
11733: CALL_OW 67
// end ;
11737: GO 11681
11739: POP
11740: POP
// end until attackers = 0 ;
11741: LD_VAR 0 1
11745: PUSH
11746: LD_INT 0
11748: EQUAL
11749: IFFALSE 11671
// end ; end_of_file
11751: LD_VAR 0 2
11755: RET
// export EnemyDetected ; every 0 0$01 trigger Comp_Units > 0 do var i , un ;
11756: LD_EXP 4
11760: PUSH
11761: LD_INT 0
11763: GREATER
11764: IFFALSE 11838
11766: GO 11768
11768: DISABLE
11769: LD_INT 0
11771: PPUSH
11772: PPUSH
// begin enable ;
11773: ENABLE
// if EnemyDetected = false then
11774: LD_EXP 84
11778: PUSH
11779: LD_INT 0
11781: EQUAL
11782: IFFALSE 11838
// begin if FilterAllUnits ( [ [ f_enemy , comp_side ] , [ f_inarea , compdeff ] ] ) > 0 then
11784: LD_INT 81
11786: PUSH
11787: LD_EXP 1
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: PUSH
11796: LD_INT 95
11798: PUSH
11799: LD_INT 7
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: PPUSH
11810: CALL_OW 69
11814: PUSH
11815: LD_INT 0
11817: GREATER
11818: IFFALSE 11830
// EnemyDetected = true else
11820: LD_ADDR_EXP 84
11824: PUSH
11825: LD_INT 1
11827: ST_TO_ADDR
11828: GO 11838
// EnemyDetected = false ;
11830: LD_ADDR_EXP 84
11834: PUSH
11835: LD_INT 0
11837: ST_TO_ADDR
// end ; end ;
11838: PPOPN 2
11840: END
// every 0 0$01 trigger EnemyDetected = true do var i , un , b , d , repair_list , task_list , build_list ;
11841: LD_EXP 84
11845: PUSH
11846: LD_INT 1
11848: EQUAL
11849: IFFALSE 12271
11851: GO 11853
11853: DISABLE
11854: LD_INT 0
11856: PPUSH
11857: PPUSH
11858: PPUSH
11859: PPUSH
11860: PPUSH
11861: PPUSH
11862: PPUSH
// begin enable ;
11863: ENABLE
// repair_list = UnitFilter ( comp_engs , [ f_ok ] ) ;
11864: LD_ADDR_VAR 0 5
11868: PUSH
11869: LD_EXP 8
11873: PPUSH
11874: LD_INT 50
11876: PUSH
11877: EMPTY
11878: LIST
11879: PPUSH
11880: CALL_OW 72
11884: ST_TO_ADDR
// task_list = [ ] ;
11885: LD_ADDR_VAR 0 6
11889: PUSH
11890: EMPTY
11891: ST_TO_ADDR
// build_list = [ ] ;
11892: LD_ADDR_VAR 0 7
11896: PUSH
11897: EMPTY
11898: ST_TO_ADDR
// i = 1 ;
11899: LD_ADDR_VAR 0 1
11903: PUSH
11904: LD_INT 1
11906: ST_TO_ADDR
// repeat case i of 1 :
11907: LD_VAR 0 1
11911: PUSH
11912: LD_INT 1
11914: DOUBLE
11915: EQUAL
11916: IFTRUE 11920
11918: GO 11976
11920: POP
// Build_List = FilterAllUnits ( [ [ [ f_side , comp_side ] , [ f_type , unit_building ] , [ f_not , [ f_ok ] ] ] ] ) ; 2 :
11921: LD_ADDR_VAR 0 7
11925: PUSH
11926: LD_INT 22
11928: PUSH
11929: LD_EXP 1
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: PUSH
11938: LD_INT 21
11940: PUSH
11941: LD_INT 3
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: PUSH
11948: LD_INT 3
11950: PUSH
11951: LD_INT 50
11953: PUSH
11954: EMPTY
11955: LIST
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: LIST
11965: PUSH
11966: EMPTY
11967: LIST
11968: PPUSH
11969: CALL_OW 69
11973: ST_TO_ADDR
11974: GO 12045
11976: LD_INT 2
11978: DOUBLE
11979: EQUAL
11980: IFTRUE 11984
11982: GO 12044
11984: POP
// Build_List = FilterAllUnits ( [ [ [ f_side , comp_side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ; end ;
11985: LD_ADDR_VAR 0 7
11989: PUSH
11990: LD_INT 22
11992: PUSH
11993: LD_EXP 1
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: PUSH
12002: LD_INT 21
12004: PUSH
12005: LD_INT 3
12007: PUSH
12008: EMPTY
12009: LIST
12010: LIST
12011: PUSH
12012: LD_INT 3
12014: PUSH
12015: LD_INT 24
12017: PUSH
12018: LD_INT 1000
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: LIST
12033: PUSH
12034: EMPTY
12035: LIST
12036: PPUSH
12037: CALL_OW 69
12041: ST_TO_ADDR
12042: GO 12045
12044: POP
// i = i + 1 ;
12045: LD_ADDR_VAR 0 1
12049: PUSH
12050: LD_VAR 0 1
12054: PUSH
12055: LD_INT 1
12057: PLUS
12058: ST_TO_ADDR
// until Build_List > 0 or i > 2 ;
12059: LD_VAR 0 7
12063: PUSH
12064: LD_INT 0
12066: GREATER
12067: PUSH
12068: LD_VAR 0 1
12072: PUSH
12073: LD_INT 2
12075: GREATER
12076: OR
12077: IFFALSE 11907
// if Build_List = 1 then
12079: LD_VAR 0 7
12083: PUSH
12084: LD_INT 1
12086: EQUAL
12087: IFFALSE 12133
// begin for i in repair_list do
12089: LD_ADDR_VAR 0 1
12093: PUSH
12094: LD_VAR 0 5
12098: PUSH
12099: FOR_IN
12100: IFFALSE 12131
// begin Task_List := Task_List ^ GetTaskList ( repair_list [ i ] ) ;
12102: LD_ADDR_VAR 0 6
12106: PUSH
12107: LD_VAR 0 6
12111: PUSH
12112: LD_VAR 0 5
12116: PUSH
12117: LD_VAR 0 1
12121: ARRAY
12122: PPUSH
12123: CALL_OW 437
12127: ADD
12128: ST_TO_ADDR
// ; end ;
12129: GO 12099
12131: POP
12132: POP
// end ; if Build_List > 0 then
12133: LD_VAR 0 7
12137: PUSH
12138: LD_INT 0
12140: GREATER
12141: IFFALSE 12161
// begin ComRepairBuilding ( repair_list , build_list [ 1 ] ) ;
12143: LD_VAR 0 5
12147: PPUSH
12148: LD_VAR 0 7
12152: PUSH
12153: LD_INT 1
12155: ARRAY
12156: PPUSH
12157: CALL_OW 130
// end ; if Build_List <= 0 and Task_List > 0 then
12161: LD_VAR 0 7
12165: PUSH
12166: LD_INT 0
12168: LESSEQUAL
12169: PUSH
12170: LD_VAR 0 6
12174: PUSH
12175: LD_INT 0
12177: GREATER
12178: AND
12179: IFFALSE 12224
// begin for i in repair_list do
12181: LD_ADDR_VAR 0 1
12185: PUSH
12186: LD_VAR 0 5
12190: PUSH
12191: FOR_IN
12192: IFFALSE 12222
// begin SetTaskList ( repair_list [ i ] , task_list [ i ] ) ;
12194: LD_VAR 0 5
12198: PUSH
12199: LD_VAR 0 1
12203: ARRAY
12204: PPUSH
12205: LD_VAR 0 6
12209: PUSH
12210: LD_VAR 0 1
12214: ARRAY
12215: PPUSH
12216: CALL_OW 446
// end ;
12220: GO 12191
12222: POP
12223: POP
// end ; for un in repair_list do
12224: LD_ADDR_VAR 0 2
12228: PUSH
12229: LD_VAR 0 5
12233: PUSH
12234: FOR_IN
12235: IFFALSE 12269
// begin if not IsInArea ( un , CompBase ) then
12237: LD_VAR 0 2
12241: PPUSH
12242: LD_INT 2
12244: PPUSH
12245: CALL_OW 308
12249: NOT
12250: IFFALSE 12267
// ComMoveXY ( un , 62 , 94 ) ;
12252: LD_VAR 0 2
12256: PPUSH
12257: LD_INT 62
12259: PPUSH
12260: LD_INT 94
12262: PPUSH
12263: CALL_OW 111
// end ;
12267: GO 12234
12269: POP
12270: POP
// end ;
12271: PPOPN 7
12273: END
// every 0 0$01 do var heal_list , doctor , un , i , d , lab ;
12274: GO 12276
12276: DISABLE
12277: LD_INT 0
12279: PPUSH
12280: PPUSH
12281: PPUSH
12282: PPUSH
12283: PPUSH
12284: PPUSH
// begin enable ;
12285: ENABLE
// heal_list = UnitFilter ( comp_engs , [ f_not , [ f_lives , 800 ] ] ) ;
12286: LD_ADDR_VAR 0 1
12290: PUSH
12291: LD_EXP 8
12295: PPUSH
12296: LD_INT 3
12298: PUSH
12299: LD_INT 24
12301: PUSH
12302: LD_INT 800
12304: PUSH
12305: EMPTY
12306: LIST
12307: LIST
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: PPUSH
12313: CALL_OW 72
12317: ST_TO_ADDR
// doctor = [ ] ;
12318: LD_ADDR_VAR 0 2
12322: PUSH
12323: EMPTY
12324: ST_TO_ADDR
// d = 0 ;
12325: LD_ADDR_VAR 0 5
12329: PUSH
12330: LD_INT 0
12332: ST_TO_ADDR
// if heal_list > 0 then
12333: LD_VAR 0 1
12337: PUSH
12338: LD_INT 0
12340: GREATER
12341: IFFALSE 12551
// begin for un in heal_list do
12343: LD_ADDR_VAR 0 3
12347: PUSH
12348: LD_VAR 0 1
12352: PUSH
12353: FOR_IN
12354: IFFALSE 12549
// begin ComMoveXY ( un , 64 , 103 ) ;
12356: LD_VAR 0 3
12360: PPUSH
12361: LD_INT 64
12363: PPUSH
12364: LD_INT 103
12366: PPUSH
12367: CALL_OW 111
// if IsOk ( comp_sci [ d + 1 ] ) then
12371: LD_EXP 10
12375: PUSH
12376: LD_VAR 0 5
12380: PUSH
12381: LD_INT 1
12383: PLUS
12384: ARRAY
12385: PPUSH
12386: CALL_OW 302
12390: IFFALSE 12414
// doctor := comp_sci [ d + 1 ] else
12392: LD_ADDR_VAR 0 2
12396: PUSH
12397: LD_EXP 10
12401: PUSH
12402: LD_VAR 0 5
12406: PUSH
12407: LD_INT 1
12409: PLUS
12410: ARRAY
12411: ST_TO_ADDR
12412: GO 12459
// repeat d = d + 1 ;
12414: LD_ADDR_VAR 0 5
12418: PUSH
12419: LD_VAR 0 5
12423: PUSH
12424: LD_INT 1
12426: PLUS
12427: ST_TO_ADDR
// until IsOk ( comp_sci [ d + 1 ] ) or d > 6 ;
12428: LD_EXP 10
12432: PUSH
12433: LD_VAR 0 5
12437: PUSH
12438: LD_INT 1
12440: PLUS
12441: ARRAY
12442: PPUSH
12443: CALL_OW 302
12447: PUSH
12448: LD_VAR 0 5
12452: PUSH
12453: LD_INT 6
12455: GREATER
12456: OR
12457: IFFALSE 12414
// if d <= 6 then
12459: LD_VAR 0 5
12463: PUSH
12464: LD_INT 6
12466: LESSEQUAL
12467: IFFALSE 12489
// doctor := comp_sci [ d + 1 ] ;
12469: LD_ADDR_VAR 0 2
12473: PUSH
12474: LD_EXP 10
12478: PUSH
12479: LD_VAR 0 5
12483: PUSH
12484: LD_INT 1
12486: PLUS
12487: ARRAY
12488: ST_TO_ADDR
// if doctor then
12489: LD_VAR 0 2
12493: IFFALSE 12510
// Lab := IsInUnit ( doctor ) ;
12495: LD_ADDR_VAR 0 6
12499: PUSH
12500: LD_VAR 0 2
12504: PPUSH
12505: CALL_OW 310
12509: ST_TO_ADDR
// ComExitBuilding ( doctor ) ;
12510: LD_VAR 0 2
12514: PPUSH
12515: CALL_OW 122
// AddComHeal ( doctor , un ) ;
12519: LD_VAR 0 2
12523: PPUSH
12524: LD_VAR 0 3
12528: PPUSH
12529: CALL_OW 188
// AddComEnterUnit ( doctor , lab ) ;
12533: LD_VAR 0 2
12537: PPUSH
12538: LD_VAR 0 6
12542: PPUSH
12543: CALL_OW 180
// end ;
12547: GO 12353
12549: POP
12550: POP
// end ; end ; end_of_file
12551: PPOPN 6
12553: END
// every 0 0$03 trigger Score > 0 and FilterAllUnits ( [ f_side , comp_side ] ) = 0 do
12554: LD_EXP 81
12558: PUSH
12559: LD_INT 0
12561: GREATER
12562: PUSH
12563: LD_INT 22
12565: PUSH
12566: LD_EXP 1
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: PPUSH
12575: CALL_OW 69
12579: PUSH
12580: LD_INT 0
12582: EQUAL
12583: AND
12584: IFFALSE 12630
12586: GO 12588
12588: DISABLE
// begin AddMedal (  , 1 ) ;
12589: LD_STRING 
12591: PPUSH
12592: LD_INT 1
12594: PPUSH
12595: CALL_OW 101
// AddMedal (  , 1 ) ;
12599: LD_STRING 
12601: PPUSH
12602: LD_INT 1
12604: PPUSH
12605: CALL_OW 101
// AddMedal (  , 1 ) ;
12609: LD_STRING 
12611: PPUSH
12612: LD_INT 1
12614: PPUSH
12615: CALL_OW 101
// GiveMedals (  ) ;
12619: LD_STRING 
12621: PPUSH
12622: CALL_OW 102
// YouWin ;
12626: CALL_OW 103
// end ; end_of_file
12630: END
// export p_resp , c_resp , c_list , p_list , r_limit ; every 1 do
12631: GO 12633
12633: DISABLE
// begin p_resp = 0 ;
12634: LD_ADDR_EXP 85
12638: PUSH
12639: LD_INT 0
12641: ST_TO_ADDR
// c_resp = 0 ;
12642: LD_ADDR_EXP 86
12646: PUSH
12647: LD_INT 0
12649: ST_TO_ADDR
// r_limit = 5 ;
12650: LD_ADDR_EXP 89
12654: PUSH
12655: LD_INT 5
12657: ST_TO_ADDR
// p_list = [ ] ;
12658: LD_ADDR_EXP 88
12662: PUSH
12663: EMPTY
12664: ST_TO_ADDR
// c_list = [ ] ;
12665: LD_ADDR_EXP 87
12669: PUSH
12670: EMPTY
12671: ST_TO_ADDR
// end ; end_of_file
12672: END
// export EventON ; export ChTEBazooka , ChTESabouter , ChTESib , ChTEResp , ChTESpy , ChTESibRocket , ChTENe , ChTApe ; every 0 0$01 trigger EventOn = true do
12673: LD_EXP 90
12677: PUSH
12678: LD_INT 1
12680: EQUAL
12681: IFFALSE 12750
12683: GO 12685
12685: DISABLE
// begin ChTEBazooka = 40 ;
12686: LD_ADDR_EXP 91
12690: PUSH
12691: LD_INT 40
12693: ST_TO_ADDR
// ChTESabouter = 35 ;
12694: LD_ADDR_EXP 92
12698: PUSH
12699: LD_INT 35
12701: ST_TO_ADDR
// ChTESib = 15 ;
12702: LD_ADDR_EXP 93
12706: PUSH
12707: LD_INT 15
12709: ST_TO_ADDR
// ChTEResp = 90 ;
12710: LD_ADDR_EXP 94
12714: PUSH
12715: LD_INT 90
12717: ST_TO_ADDR
// ChTEspy = 15 ;
12718: LD_ADDR_EXP 95
12722: PUSH
12723: LD_INT 15
12725: ST_TO_ADDR
// ChTESibRocket = 50 ;
12726: LD_ADDR_EXP 96
12730: PUSH
12731: LD_INT 50
12733: ST_TO_ADDR
// ChTENe = 73 ;
12734: LD_ADDR_EXP 97
12738: PUSH
12739: LD_INT 73
12741: ST_TO_ADDR
// ChTApe = 20 ;
12742: LD_ADDR_EXP 98
12746: PUSH
12747: LD_INT 20
12749: ST_TO_ADDR
// end ;
12750: END
// every 3 3$00 trigger FilterAllUnits ( [ [ f_side , player_side ] , [ f_class , class_bazooker ] ] ) > 0 and EventOn do var chance ;
12751: LD_INT 22
12753: PUSH
12754: LD_EXP 75
12758: PUSH
12759: EMPTY
12760: LIST
12761: LIST
12762: PUSH
12763: LD_INT 25
12765: PUSH
12766: LD_INT 9
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: PPUSH
12777: CALL_OW 69
12781: PUSH
12782: LD_INT 0
12784: GREATER
12785: PUSH
12786: LD_EXP 90
12790: AND
12791: IFFALSE 12901
12793: GO 12795
12795: DISABLE
12796: LD_INT 0
12798: PPUSH
// begin enable ;
12799: ENABLE
// chance = Rand ( 0 , 100 ) ;
12800: LD_ADDR_VAR 0 1
12804: PUSH
12805: LD_INT 0
12807: PPUSH
12808: LD_INT 100
12810: PPUSH
12811: CALL_OW 12
12815: ST_TO_ADDR
// if chance <= ChTEBazooka then
12816: LD_VAR 0 1
12820: PUSH
12821: LD_EXP 91
12825: LESSEQUAL
12826: IFFALSE 12901
// begin case Query ( EventBazooka ) of 1 :
12828: LD_STRING EventBazooka
12830: PPUSH
12831: CALL_OW 97
12835: PUSH
12836: LD_INT 1
12838: DOUBLE
12839: EQUAL
12840: IFTRUE 12844
12842: GO 12900
12844: POP
// begin ChTEBazooka = 10 ;
12845: LD_ADDR_EXP 91
12849: PUSH
12850: LD_INT 10
12852: ST_TO_ADDR
// SetTech ( tech_bazooka , player_side , state_disabled ) ;
12853: LD_INT 44
12855: PPUSH
12856: LD_EXP 75
12860: PPUSH
12861: LD_INT 0
12863: PPUSH
12864: CALL_OW 322
// Wait ( Rand ( 1 1$00 , 2 2$30 ) ) ;
12868: LD_INT 2100
12870: PPUSH
12871: LD_INT 5250
12873: PPUSH
12874: CALL_OW 12
12878: PPUSH
12879: CALL_OW 67
// SetTech ( tech_bazooka , player_side , state_researched ) ;
12883: LD_INT 44
12885: PPUSH
12886: LD_EXP 75
12890: PPUSH
12891: LD_INT 2
12893: PPUSH
12894: CALL_OW 322
// end ; end ;
12898: GO 12901
12900: POP
// end ; end ;
12901: PPOPN 1
12903: END
// every 8 8$00 trigger FilterAllUnits ( [ [ f_side , player_side ] , [ f_type , unit_building ] ] ) > 1 and EventOn do var chance , builds , x ;
12904: LD_INT 22
12906: PUSH
12907: LD_EXP 75
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: PUSH
12916: LD_INT 21
12918: PUSH
12919: LD_INT 3
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PPUSH
12930: CALL_OW 69
12934: PUSH
12935: LD_INT 1
12937: GREATER
12938: PUSH
12939: LD_EXP 90
12943: AND
12944: IFFALSE 13090
12946: GO 12948
12948: DISABLE
12949: LD_INT 0
12951: PPUSH
12952: PPUSH
12953: PPUSH
// begin enable ;
12954: ENABLE
// builds = FilterAllUnits ( [ [ f_side , player_side ] , [ f_type , unit_building ] ] ) ;
12955: LD_ADDR_VAR 0 2
12959: PUSH
12960: LD_INT 22
12962: PUSH
12963: LD_EXP 75
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PUSH
12972: LD_INT 21
12974: PUSH
12975: LD_INT 3
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: PPUSH
12986: CALL_OW 69
12990: ST_TO_ADDR
// chance = Rand ( 0 , 100 ) ;
12991: LD_ADDR_VAR 0 1
12995: PUSH
12996: LD_INT 0
12998: PPUSH
12999: LD_INT 100
13001: PPUSH
13002: CALL_OW 12
13006: ST_TO_ADDR
// if chance <= ChTESabouter then
13007: LD_VAR 0 1
13011: PUSH
13012: LD_EXP 92
13016: LESSEQUAL
13017: IFFALSE 13090
// begin case Query ( EventSab ) of 1 :
13019: LD_STRING EventSab
13021: PPUSH
13022: CALL_OW 97
13026: PUSH
13027: LD_INT 1
13029: DOUBLE
13030: EQUAL
13031: IFTRUE 13035
13033: GO 13089
13035: POP
// begin x = Rand ( 2 , builds ) ;
13036: LD_ADDR_VAR 0 3
13040: PUSH
13041: LD_INT 2
13043: PPUSH
13044: LD_VAR 0 2
13048: PPUSH
13049: CALL_OW 12
13053: ST_TO_ADDR
// CenterNowOnUnits ( builds [ x ] ) ;
13054: LD_VAR 0 2
13058: PUSH
13059: LD_VAR 0 3
13063: ARRAY
13064: PPUSH
13065: CALL_OW 87
// SetLives ( builds [ x ] , 1 ) ;
13069: LD_VAR 0 2
13073: PUSH
13074: LD_VAR 0 3
13078: ARRAY
13079: PPUSH
13080: LD_INT 1
13082: PPUSH
13083: CALL_OW 234
// end ; end ;
13087: GO 13090
13089: POP
// end ; end ;
13090: PPOPN 3
13092: END
// every 7 7$25 trigger FilterAllUnits ( [ [ f_side , player_side ] , [ f_btype , b_siberite_mine ] ] ) > 0 and EventOn do var chance , mine ;
13093: LD_INT 22
13095: PUSH
13096: LD_EXP 75
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: PUSH
13105: LD_INT 30
13107: PUSH
13108: LD_INT 30
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: PPUSH
13119: CALL_OW 69
13123: PUSH
13124: LD_INT 0
13126: GREATER
13127: PUSH
13128: LD_EXP 90
13132: AND
13133: IFFALSE 13311
13135: GO 13137
13137: DISABLE
13138: LD_INT 0
13140: PPUSH
13141: PPUSH
// begin enable ;
13142: ENABLE
// mine = FilterAllUnits ( [ [ f_side , player_side ] , [ f_btype , b_siberite_mine ] ] ) [ 1 ] ;
13143: LD_ADDR_VAR 0 2
13147: PUSH
13148: LD_INT 22
13150: PUSH
13151: LD_EXP 75
13155: PUSH
13156: EMPTY
13157: LIST
13158: LIST
13159: PUSH
13160: LD_INT 30
13162: PUSH
13163: LD_INT 30
13165: PUSH
13166: EMPTY
13167: LIST
13168: LIST
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: PPUSH
13174: CALL_OW 69
13178: PUSH
13179: LD_INT 1
13181: ARRAY
13182: ST_TO_ADDR
// chance = Rand ( 0 , 100 ) ;
13183: LD_ADDR_VAR 0 1
13187: PUSH
13188: LD_INT 0
13190: PPUSH
13191: LD_INT 100
13193: PPUSH
13194: CALL_OW 12
13198: ST_TO_ADDR
// if chance <= ChTESib then
13199: LD_VAR 0 1
13203: PUSH
13204: LD_EXP 93
13208: LESSEQUAL
13209: IFFALSE 13311
// begin case Query ( EventSib ) of 1 :
13211: LD_STRING EventSib
13213: PPUSH
13214: CALL_OW 97
13218: PUSH
13219: LD_INT 1
13221: DOUBLE
13222: EQUAL
13223: IFTRUE 13227
13225: GO 13310
13227: POP
// begin ChTESib = 5 ;
13228: LD_ADDR_EXP 93
13232: PUSH
13233: LD_INT 5
13235: ST_TO_ADDR
// Contaminate ( player_side , GetX ( mine ) , GetY ( mine ) ) ;
13236: LD_EXP 75
13240: PPUSH
13241: LD_VAR 0 2
13245: PPUSH
13246: CALL_OW 250
13250: PPUSH
13251: LD_VAR 0 2
13255: PPUSH
13256: CALL_OW 251
13260: PPUSH
13261: CALL_OW 489
// CenterNowOnXY ( GetX ( mine ) , GetY ( mine ) ) ;
13265: LD_VAR 0 2
13269: PPUSH
13270: CALL_OW 250
13274: PPUSH
13275: LD_VAR 0 2
13279: PPUSH
13280: CALL_OW 251
13284: PPUSH
13285: CALL_OW 86
// Wait ( 1 1$10 ) ;
13289: LD_INT 2450
13291: PPUSH
13292: CALL_OW 67
// SetLives ( mine , 1 ) ;
13296: LD_VAR 0 2
13300: PPUSH
13301: LD_INT 1
13303: PPUSH
13304: CALL_OW 234
// end ; end ;
13308: GO 13311
13310: POP
// end ; end ;
13311: PPOPN 2
13313: END
// every 20 20$25 trigger EventOn do var un , i , chance ;
13314: LD_EXP 90
13318: IFFALSE 13628
13320: GO 13322
13322: DISABLE
13323: LD_INT 0
13325: PPUSH
13326: PPUSH
13327: PPUSH
// begin enable ;
13328: ENABLE
// if ChTEResp < 31 then
13329: LD_EXP 94
13333: PUSH
13334: LD_INT 31
13336: LESS
13337: IFFALSE 13347
// begin ChTEResp = 5 ;
13339: LD_ADDR_EXP 94
13343: PUSH
13344: LD_INT 5
13346: ST_TO_ADDR
// end ; chance = Rand ( 0 , 100 ) ;
13347: LD_ADDR_VAR 0 3
13351: PUSH
13352: LD_INT 0
13354: PPUSH
13355: LD_INT 100
13357: PPUSH
13358: CALL_OW 12
13362: ST_TO_ADDR
// if chance <= ChTEResp then
13363: LD_VAR 0 3
13367: PUSH
13368: LD_EXP 94
13372: LESSEQUAL
13373: IFFALSE 13628
// begin case Query ( EventResp ) of 1 :
13375: LD_STRING EventResp
13377: PPUSH
13378: CALL_OW 97
13382: PUSH
13383: LD_INT 1
13385: DOUBLE
13386: EQUAL
13387: IFTRUE 13391
13389: GO 13627
13391: POP
// begin ChTEResp = ChTEResp - 30 ;
13392: LD_ADDR_EXP 94
13396: PUSH
13397: LD_EXP 94
13401: PUSH
13402: LD_INT 30
13404: MINUS
13405: ST_TO_ADDR
// uc_side = player_side ;
13406: LD_ADDR_OWVAR 20
13410: PUSH
13411: LD_EXP 75
13415: ST_TO_ADDR
// uc_nation = player_nation ;
13416: LD_ADDR_OWVAR 21
13420: PUSH
13421: LD_EXP 74
13425: ST_TO_ADDR
// hc_sex := Rand ( sex_male , sex_female ) ;
13426: LD_ADDR_OWVAR 27
13430: PUSH
13431: LD_INT 1
13433: PPUSH
13434: LD_INT 2
13436: PPUSH
13437: CALL_OW 12
13441: ST_TO_ADDR
// hc_importance = 0 ;
13442: LD_ADDR_OWVAR 32
13446: PUSH
13447: LD_INT 0
13449: ST_TO_ADDR
// hc_gallery :=  ;
13450: LD_ADDR_OWVAR 33
13454: PUSH
13455: LD_STRING 
13457: ST_TO_ADDR
// hc_skills = [ comp_skill1 + Rand ( 0 , 1 ) , comp_skill2 + Rand ( 0 , 1 ) , comp_skill3 + Rand ( - 3 , 0 ) , comp_skill4 + Rand ( - 3 , 0 ) ] ;
13458: LD_ADDR_OWVAR 31
13462: PUSH
13463: LD_EXP 12
13467: PUSH
13468: LD_INT 0
13470: PPUSH
13471: LD_INT 1
13473: PPUSH
13474: CALL_OW 12
13478: PLUS
13479: PUSH
13480: LD_EXP 13
13484: PUSH
13485: LD_INT 0
13487: PPUSH
13488: LD_INT 1
13490: PPUSH
13491: CALL_OW 12
13495: PLUS
13496: PUSH
13497: LD_EXP 14
13501: PUSH
13502: LD_INT 3
13504: NEG
13505: PPUSH
13506: LD_INT 0
13508: PPUSH
13509: CALL_OW 12
13513: PLUS
13514: PUSH
13515: LD_EXP 15
13519: PUSH
13520: LD_INT 3
13522: NEG
13523: PPUSH
13524: LD_INT 0
13526: PPUSH
13527: CALL_OW 12
13531: PLUS
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: ST_TO_ADDR
// hc_attr = [ Rand ( 8 , 12 ) , Rand ( 9 , 11 ) ] ;
13539: LD_ADDR_OWVAR 29
13543: PUSH
13544: LD_INT 8
13546: PPUSH
13547: LD_INT 12
13549: PPUSH
13550: CALL_OW 12
13554: PUSH
13555: LD_INT 9
13557: PPUSH
13558: LD_INT 11
13560: PPUSH
13561: CALL_OW 12
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: ST_TO_ADDR
// hc_name :=  ;
13570: LD_ADDR_OWVAR 26
13574: PUSH
13575: LD_STRING 
13577: ST_TO_ADDR
// hc_class = Rand ( 1 , 4 ) ;
13578: LD_ADDR_OWVAR 28
13582: PUSH
13583: LD_INT 1
13585: PPUSH
13586: LD_INT 4
13588: PPUSH
13589: CALL_OW 12
13593: ST_TO_ADDR
// un = CreateHuman ;
13594: LD_ADDR_VAR 0 1
13598: PUSH
13599: CALL_OW 44
13603: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13604: LD_VAR 0 1
13608: PPUSH
13609: LD_INT 1
13611: PPUSH
13612: CALL_OW 51
// CenterNowOnUnits ( un ) ;
13616: LD_VAR 0 1
13620: PPUSH
13621: CALL_OW 87
// end ; end ;
13625: GO 13628
13627: POP
// end ; end ;
13628: PPOPN 3
13630: END
// every 9 9$39 trigger comp_mechs > 0 and EventOn do var chance , time ;
13631: LD_EXP 9
13635: PUSH
13636: LD_INT 0
13638: GREATER
13639: PUSH
13640: LD_EXP 90
13644: AND
13645: IFFALSE 13761
13647: GO 13649
13649: DISABLE
13650: LD_INT 0
13652: PPUSH
13653: PPUSH
// begin enable ;
13654: ENABLE
// chance = Rand ( 0 , 100 ) ;
13655: LD_ADDR_VAR 0 1
13659: PUSH
13660: LD_INT 0
13662: PPUSH
13663: LD_INT 100
13665: PPUSH
13666: CALL_OW 12
13670: ST_TO_ADDR
// time = Rand ( 0 0$30 , 3 3$00 ) ;
13671: LD_ADDR_VAR 0 2
13675: PUSH
13676: LD_INT 1050
13678: PPUSH
13679: LD_INT 6300
13681: PPUSH
13682: CALL_OW 12
13686: ST_TO_ADDR
// if chance <= ChTESpy then
13687: LD_VAR 0 1
13691: PUSH
13692: LD_EXP 95
13696: LESSEQUAL
13697: IFFALSE 13761
// begin case Query ( EventSpy ) of 1 :
13699: LD_STRING EventSpy
13701: PPUSH
13702: CALL_OW 97
13706: PUSH
13707: LD_INT 1
13709: DOUBLE
13710: EQUAL
13711: IFTRUE 13715
13713: GO 13760
13715: POP
// begin PlaceSeeing ( 61 , 96 , player_side , 20 ) ;
13716: LD_INT 61
13718: PPUSH
13719: LD_INT 96
13721: PPUSH
13722: LD_EXP 75
13726: PPUSH
13727: LD_INT 20
13729: PPUSH
13730: CALL_OW 330
// Wait ( time ) ;
13734: LD_VAR 0 2
13738: PPUSH
13739: CALL_OW 67
// RemoveSeeing ( 61 , 96 , player_side ) ;
13743: LD_INT 61
13745: PPUSH
13746: LD_INT 96
13748: PPUSH
13749: LD_EXP 75
13753: PPUSH
13754: CALL_OW 331
// end ; end ;
13758: GO 13761
13760: POP
// end ; end ;
13761: PPOPN 2
13763: END
// every 39 39$00 trigger EventOn do var chance , x , y , d ;
13764: LD_EXP 90
13768: IFFALSE 13934
13770: GO 13772
13772: DISABLE
13773: LD_INT 0
13775: PPUSH
13776: PPUSH
13777: PPUSH
13778: PPUSH
// begin enable ;
13779: ENABLE
// chance = Rand ( 0 , 100 ) ;
13780: LD_ADDR_VAR 0 1
13784: PUSH
13785: LD_INT 0
13787: PPUSH
13788: LD_INT 100
13790: PPUSH
13791: CALL_OW 12
13795: ST_TO_ADDR
// x := [ 41 , 191 ] ;
13796: LD_ADDR_VAR 0 2
13800: PUSH
13801: LD_INT 41
13803: PUSH
13804: LD_INT 191
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: ST_TO_ADDR
// y := [ 19 , 101 ] ;
13811: LD_ADDR_VAR 0 3
13815: PUSH
13816: LD_INT 19
13818: PUSH
13819: LD_INT 101
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: ST_TO_ADDR
// d := Rand ( 1 , 2 ) ;
13826: LD_ADDR_VAR 0 4
13830: PUSH
13831: LD_INT 1
13833: PPUSH
13834: LD_INT 2
13836: PPUSH
13837: CALL_OW 12
13841: ST_TO_ADDR
// if chance <= ChTESibRocket then
13842: LD_VAR 0 1
13846: PUSH
13847: LD_EXP 96
13851: LESSEQUAL
13852: IFFALSE 13934
// begin case Query ( SibRocket ) of 1 :
13854: LD_STRING SibRocket
13856: PPUSH
13857: CALL_OW 97
13861: PUSH
13862: LD_INT 1
13864: DOUBLE
13865: EQUAL
13866: IFTRUE 13870
13868: GO 13933
13870: POP
// begin ChTESibRocket = 25 ;
13871: LD_ADDR_EXP 96
13875: PUSH
13876: LD_INT 25
13878: ST_TO_ADDR
// CenterNowOnXY ( x [ d ] , y [ d ] ) ;
13879: LD_VAR 0 2
13883: PUSH
13884: LD_VAR 0 4
13888: ARRAY
13889: PPUSH
13890: LD_VAR 0 3
13894: PUSH
13895: LD_VAR 0 4
13899: ARRAY
13900: PPUSH
13901: CALL_OW 86
// SendSiberiteRocket ( x [ d ] , y [ d ] ) ;
13905: LD_VAR 0 2
13909: PUSH
13910: LD_VAR 0 4
13914: ARRAY
13915: PPUSH
13916: LD_VAR 0 3
13920: PUSH
13921: LD_VAR 0 4
13925: ARRAY
13926: PPUSH
13927: CALL_OW 429
// end ; end ;
13931: GO 13934
13933: POP
// end ; end ;
13934: PPOPN 4
13936: END
// every 22 22$00 trigger EventOn do var chance , un ;
13937: LD_EXP 90
13941: IFFALSE 14044
13943: GO 13945
13945: DISABLE
13946: LD_INT 0
13948: PPUSH
13949: PPUSH
// begin enable ;
13950: ENABLE
// if FilterAllUnits ( [ f_side , 0 ] ) < 15 then
13951: LD_INT 22
13953: PUSH
13954: LD_INT 0
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: PPUSH
13961: CALL_OW 69
13965: PUSH
13966: LD_INT 15
13968: LESS
13969: IFFALSE 13981
// begin ChTApe = 60 ;
13971: LD_ADDR_EXP 98
13975: PUSH
13976: LD_INT 60
13978: ST_TO_ADDR
// end else
13979: GO 13989
// begin ChTApe = 15 ;
13981: LD_ADDR_EXP 98
13985: PUSH
13986: LD_INT 15
13988: ST_TO_ADDR
// end ; chance = Rand ( 0 , 100 ) ;
13989: LD_ADDR_VAR 0 1
13993: PUSH
13994: LD_INT 0
13996: PPUSH
13997: LD_INT 100
13999: PPUSH
14000: CALL_OW 12
14004: ST_TO_ADDR
// if chance <= ChTApe then
14005: LD_VAR 0 1
14009: PUSH
14010: LD_EXP 98
14014: LESSEQUAL
14015: IFFALSE 14044
// case Query ( EventApeman ) of 1 :
14017: LD_STRING EventApeman
14019: PPUSH
14020: CALL_OW 97
14024: PUSH
14025: LD_INT 1
14027: DOUBLE
14028: EQUAL
14029: IFTRUE 14033
14031: GO 14043
14033: POP
// begin PrepareApeman ( 5 ) ;
14034: LD_INT 5
14036: PPUSH
14037: CALL 7090 0 1
// end ; end ;
14041: GO 14044
14043: POP
// end ;
14044: PPOPN 2
14046: END
// export snipers ; every 10 10$00 do var side , un , veh , i , p , limit , chance , vehicles , pl_units ;
14047: GO 14049
14049: DISABLE
14050: LD_INT 0
14052: PPUSH
14053: PPUSH
14054: PPUSH
14055: PPUSH
14056: PPUSH
14057: PPUSH
14058: PPUSH
14059: PPUSH
14060: PPUSH
// begin enable ;
14061: ENABLE
// chance = Rand ( 0 , 100 ) ;
14062: LD_ADDR_VAR 0 7
14066: PUSH
14067: LD_INT 0
14069: PPUSH
14070: LD_INT 100
14072: PPUSH
14073: CALL_OW 12
14077: ST_TO_ADDR
// p = 0 ;
14078: LD_ADDR_VAR 0 5
14082: PUSH
14083: LD_INT 0
14085: ST_TO_ADDR
// side = comp_side + 1 ;
14086: LD_ADDR_VAR 0 1
14090: PUSH
14091: LD_EXP 1
14095: PUSH
14096: LD_INT 1
14098: PLUS
14099: ST_TO_ADDR
// if side = player_side then
14100: LD_VAR 0 1
14104: PUSH
14105: LD_EXP 75
14109: EQUAL
14110: IFFALSE 14126
// begin side = player_side + 1 ;
14112: LD_ADDR_VAR 0 1
14116: PUSH
14117: LD_EXP 75
14121: PUSH
14122: LD_INT 1
14124: PLUS
14125: ST_TO_ADDR
// end ; SetAttitude ( comp_side , side , att_friend , true ) ;
14126: LD_EXP 1
14130: PPUSH
14131: LD_VAR 0 1
14135: PPUSH
14136: LD_INT 1
14138: PPUSH
14139: LD_INT 1
14141: PPUSH
14142: CALL_OW 80
// if diff_attack > 0 then
14146: LD_EXP 18
14150: PUSH
14151: LD_INT 0
14153: GREATER
14154: IFFALSE 14210
// begin if diff_attack = 1 then
14156: LD_EXP 18
14160: PUSH
14161: LD_INT 1
14163: EQUAL
14164: IFFALSE 14174
// begin limit = 5 ;
14166: LD_ADDR_VAR 0 6
14170: PUSH
14171: LD_INT 5
14173: ST_TO_ADDR
// end ; if diff_attack = 2 then
14174: LD_EXP 18
14178: PUSH
14179: LD_INT 2
14181: EQUAL
14182: IFFALSE 14192
// begin limit = 8 ;
14184: LD_ADDR_VAR 0 6
14188: PUSH
14189: LD_INT 8
14191: ST_TO_ADDR
// end ; if diff_attack = 3 then
14192: LD_EXP 18
14196: PUSH
14197: LD_INT 3
14199: EQUAL
14200: IFFALSE 14210
// begin limit = 11 ;
14202: LD_ADDR_VAR 0 6
14206: PUSH
14207: LD_INT 11
14209: ST_TO_ADDR
// end ; end ; vehicles = [ ] ;
14210: LD_ADDR_VAR 0 8
14214: PUSH
14215: EMPTY
14216: ST_TO_ADDR
// snipers = [ ] ;
14217: LD_ADDR_EXP 99
14221: PUSH
14222: EMPTY
14223: ST_TO_ADDR
// if chance <= ChTENe then
14224: LD_VAR 0 7
14228: PUSH
14229: LD_EXP 97
14233: LESSEQUAL
14234: IFFALSE 15065
// begin case Query ( EventNewEnemy ) of 1 :
14236: LD_STRING EventNewEnemy
14238: PPUSH
14239: CALL_OW 97
14243: PUSH
14244: LD_INT 1
14246: DOUBLE
14247: EQUAL
14248: IFTRUE 14252
14250: GO 14255
14252: POP
// begin end ; end ;
14253: GO 14256
14255: POP
// if diff_attack > 0 then
14256: LD_EXP 18
14260: PUSH
14261: LD_INT 0
14263: GREATER
14264: IFFALSE 14376
// begin SetTech ( tech_weap1 , side , state_researched ) ;
14266: LD_INT 51
14268: PPUSH
14269: LD_VAR 0 1
14273: PPUSH
14274: LD_INT 2
14276: PPUSH
14277: CALL_OW 322
// SetTech ( tech_comp1 , side , state_researched ) ;
14281: LD_INT 57
14283: PPUSH
14284: LD_VAR 0 1
14288: PPUSH
14289: LD_INT 2
14291: PPUSH
14292: CALL_OW 322
// if diff_attack > 1 then
14296: LD_EXP 18
14300: PUSH
14301: LD_INT 1
14303: GREATER
14304: IFFALSE 14376
// begin SetTech ( tech_weap2 , side , state_researched ) ;
14306: LD_INT 52
14308: PPUSH
14309: LD_VAR 0 1
14313: PPUSH
14314: LD_INT 2
14316: PPUSH
14317: CALL_OW 322
// SetTech ( tech_comp2 , side , state_researched ) ;
14321: LD_INT 58
14323: PPUSH
14324: LD_VAR 0 1
14328: PPUSH
14329: LD_INT 2
14331: PPUSH
14332: CALL_OW 322
// if diff_attack > 2 then
14336: LD_EXP 18
14340: PUSH
14341: LD_INT 2
14343: GREATER
14344: IFFALSE 14376
// begin SetTech ( tech_weap3 , side , state_researched ) ;
14346: LD_INT 53
14348: PPUSH
14349: LD_VAR 0 1
14353: PPUSH
14354: LD_INT 2
14356: PPUSH
14357: CALL_OW 322
// SetTech ( tech_comp3 , side , state_researched ) ;
14361: LD_INT 59
14363: PPUSH
14364: LD_VAR 0 1
14368: PPUSH
14369: LD_INT 2
14371: PPUSH
14372: CALL_OW 322
// end ; end ; end ; uc_side = side ;
14376: LD_ADDR_OWVAR 20
14380: PUSH
14381: LD_VAR 0 1
14385: ST_TO_ADDR
// uc_nation = comp_nation ;
14386: LD_ADDR_OWVAR 21
14390: PUSH
14391: LD_EXP 2
14395: ST_TO_ADDR
// for i = 1 to 3 + ( Rand ( - 1 , 1 ) ) do
14396: LD_ADDR_VAR 0 4
14400: PUSH
14401: DOUBLE
14402: LD_INT 1
14404: DEC
14405: ST_TO_ADDR
14406: LD_INT 3
14408: PUSH
14409: LD_INT 1
14411: NEG
14412: PPUSH
14413: LD_INT 1
14415: PPUSH
14416: CALL_OW 12
14420: PLUS
14421: PUSH
14422: FOR_TO
14423: IFFALSE 14613
// begin hc_class = class_sniper ;
14425: LD_ADDR_OWVAR 28
14429: PUSH
14430: LD_INT 5
14432: ST_TO_ADDR
// hc_gallery =  ;
14433: LD_ADDR_OWVAR 33
14437: PUSH
14438: LD_STRING 
14440: ST_TO_ADDR
// hc_sex = sex_male ;
14441: LD_ADDR_OWVAR 27
14445: PUSH
14446: LD_INT 1
14448: ST_TO_ADDR
// hc_name =  ;
14449: LD_ADDR_OWVAR 26
14453: PUSH
14454: LD_STRING 
14456: ST_TO_ADDR
// hc_skills = [ comp_skill1 + Rand ( 0 , 1 ) , comp_skill2 + Rand ( - 3 , 0 ) , comp_skill3 + Rand ( - 3 , 0 ) , comp_skill4 + Rand ( - 3 , 0 ) ] ;
14457: LD_ADDR_OWVAR 31
14461: PUSH
14462: LD_EXP 12
14466: PUSH
14467: LD_INT 0
14469: PPUSH
14470: LD_INT 1
14472: PPUSH
14473: CALL_OW 12
14477: PLUS
14478: PUSH
14479: LD_EXP 13
14483: PUSH
14484: LD_INT 3
14486: NEG
14487: PPUSH
14488: LD_INT 0
14490: PPUSH
14491: CALL_OW 12
14495: PLUS
14496: PUSH
14497: LD_EXP 14
14501: PUSH
14502: LD_INT 3
14504: NEG
14505: PPUSH
14506: LD_INT 0
14508: PPUSH
14509: CALL_OW 12
14513: PLUS
14514: PUSH
14515: LD_EXP 15
14519: PUSH
14520: LD_INT 3
14522: NEG
14523: PPUSH
14524: LD_INT 0
14526: PPUSH
14527: CALL_OW 12
14531: PLUS
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: ST_TO_ADDR
// un = CreateHuman ;
14539: LD_ADDR_VAR 0 2
14543: PUSH
14544: CALL_OW 44
14548: ST_TO_ADDR
// PlaceUnitArea ( un , CompAttack , false ) ;
14549: LD_VAR 0 2
14553: PPUSH
14554: LD_INT 10
14556: PPUSH
14557: LD_INT 0
14559: PPUSH
14560: CALL_OW 49
// snipers = snipers ^ un ;
14564: LD_ADDR_EXP 99
14568: PUSH
14569: LD_EXP 99
14573: PUSH
14574: LD_VAR 0 2
14578: ADD
14579: ST_TO_ADDR
// Wait ( 1 ) ;
14580: LD_INT 1
14582: PPUSH
14583: CALL_OW 67
// ComMoveXY ( un , 142 , 55 ) ;
14587: LD_VAR 0 2
14591: PPUSH
14592: LD_INT 142
14594: PPUSH
14595: LD_INT 55
14597: PPUSH
14598: CALL_OW 111
// AddComHold ( un ) ;
14602: LD_VAR 0 2
14606: PPUSH
14607: CALL_OW 200
// end ;
14611: GO 14422
14613: POP
14614: POP
// for i = 1 to limit do
14615: LD_ADDR_VAR 0 4
14619: PUSH
14620: DOUBLE
14621: LD_INT 1
14623: DEC
14624: ST_TO_ADDR
14625: LD_VAR 0 6
14629: PUSH
14630: FOR_TO
14631: IFFALSE 14938
// begin vc_engine = engine_combustion ;
14633: LD_ADDR_OWVAR 39
14637: PUSH
14638: LD_INT 1
14640: ST_TO_ADDR
// vc_control = control_computer ;
14641: LD_ADDR_OWVAR 38
14645: PUSH
14646: LD_INT 3
14648: ST_TO_ADDR
// if diff_attack = 1 then
14649: LD_EXP 18
14653: PUSH
14654: LD_INT 1
14656: EQUAL
14657: IFFALSE 14719
// begin vc_chassis = us_medium_tracked ;
14659: LD_ADDR_OWVAR 37
14663: PUSH
14664: LD_INT 3
14666: ST_TO_ADDR
// p = Rand ( 1 , 2 ) ;
14667: LD_ADDR_VAR 0 5
14671: PUSH
14672: LD_INT 1
14674: PPUSH
14675: LD_INT 2
14677: PPUSH
14678: CALL_OW 12
14682: ST_TO_ADDR
// if p = 1 then
14683: LD_VAR 0 5
14687: PUSH
14688: LD_INT 1
14690: EQUAL
14691: IFFALSE 14701
// vc_weapon = us_gatling_gun ;
14693: LD_ADDR_OWVAR 40
14697: PUSH
14698: LD_INT 4
14700: ST_TO_ADDR
// if p = 2 then
14701: LD_VAR 0 5
14705: PUSH
14706: LD_INT 2
14708: EQUAL
14709: IFFALSE 14719
// vc_weapon = us_double_gun ;
14711: LD_ADDR_OWVAR 40
14715: PUSH
14716: LD_INT 5
14718: ST_TO_ADDR
// end ; if diff_attack = 2 then
14719: LD_EXP 18
14723: PUSH
14724: LD_INT 2
14726: EQUAL
14727: IFFALSE 14807
// begin vc_chassis = us_heavy_tracked ;
14729: LD_ADDR_OWVAR 37
14733: PUSH
14734: LD_INT 4
14736: ST_TO_ADDR
// p = Rand ( 1 , 3 ) ;
14737: LD_ADDR_VAR 0 5
14741: PUSH
14742: LD_INT 1
14744: PPUSH
14745: LD_INT 3
14747: PPUSH
14748: CALL_OW 12
14752: ST_TO_ADDR
// if p = 1 then
14753: LD_VAR 0 5
14757: PUSH
14758: LD_INT 1
14760: EQUAL
14761: IFFALSE 14771
// vc_weapon = us_laser ;
14763: LD_ADDR_OWVAR 40
14767: PUSH
14768: LD_INT 9
14770: ST_TO_ADDR
// if p = 2 then
14771: LD_VAR 0 5
14775: PUSH
14776: LD_INT 2
14778: EQUAL
14779: IFFALSE 14789
// vc_weapon = us_heavy_gun ;
14781: LD_ADDR_OWVAR 40
14785: PUSH
14786: LD_INT 6
14788: ST_TO_ADDR
// if p = 3 then
14789: LD_VAR 0 5
14793: PUSH
14794: LD_INT 3
14796: EQUAL
14797: IFFALSE 14807
// vc_weapon = us_rocket_launcher ;
14799: LD_ADDR_OWVAR 40
14803: PUSH
14804: LD_INT 7
14806: ST_TO_ADDR
// end ; if diff_attack = 3 then
14807: LD_EXP 18
14811: PUSH
14812: LD_INT 3
14814: EQUAL
14815: IFFALSE 14895
// begin vc_chassis = us_morphling ;
14817: LD_ADDR_OWVAR 37
14821: PUSH
14822: LD_INT 5
14824: ST_TO_ADDR
// p = Rand ( 1 , 3 ) ;
14825: LD_ADDR_VAR 0 5
14829: PUSH
14830: LD_INT 1
14832: PPUSH
14833: LD_INT 3
14835: PPUSH
14836: CALL_OW 12
14840: ST_TO_ADDR
// if p = 1 then
14841: LD_VAR 0 5
14845: PUSH
14846: LD_INT 1
14848: EQUAL
14849: IFFALSE 14859
// vc_weapon = us_laser ;
14851: LD_ADDR_OWVAR 40
14855: PUSH
14856: LD_INT 9
14858: ST_TO_ADDR
// if p = 2 then
14859: LD_VAR 0 5
14863: PUSH
14864: LD_INT 2
14866: EQUAL
14867: IFFALSE 14877
// vc_weapon = us_heavy_gun ;
14869: LD_ADDR_OWVAR 40
14873: PUSH
14874: LD_INT 6
14876: ST_TO_ADDR
// if p = 3 then
14877: LD_VAR 0 5
14881: PUSH
14882: LD_INT 3
14884: EQUAL
14885: IFFALSE 14895
// vc_weapon = us_rocket_launcher ;
14887: LD_ADDR_OWVAR 40
14891: PUSH
14892: LD_INT 7
14894: ST_TO_ADDR
// end ; veh = CreateVehicle ;
14895: LD_ADDR_VAR 0 3
14899: PUSH
14900: CALL_OW 45
14904: ST_TO_ADDR
// PlaceUnitArea ( veh , compattack , false ) ;
14905: LD_VAR 0 3
14909: PPUSH
14910: LD_INT 10
14912: PPUSH
14913: LD_INT 0
14915: PPUSH
14916: CALL_OW 49
// vehicles = vehicles ^ veh ;
14920: LD_ADDR_VAR 0 8
14924: PUSH
14925: LD_VAR 0 8
14929: PUSH
14930: LD_VAR 0 3
14934: ADD
14935: ST_TO_ADDR
// end ;
14936: GO 14630
14938: POP
14939: POP
// repeat begin Wait ( 0 0$01 ) ;
14940: LD_INT 35
14942: PPUSH
14943: CALL_OW 67
// end until vehicles = limit ;
14947: LD_VAR 0 8
14951: PUSH
14952: LD_VAR 0 6
14956: EQUAL
14957: IFFALSE 14940
// repeat begin for un in vehicles do
14959: LD_ADDR_VAR 0 2
14963: PUSH
14964: LD_VAR 0 8
14968: PUSH
14969: FOR_IN
14970: IFFALSE 15027
// begin pl_units := FilterAllUnits ( [ f_side , player_side ] ) ;
14972: LD_ADDR_VAR 0 9
14976: PUSH
14977: LD_INT 22
14979: PUSH
14980: LD_EXP 75
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: PPUSH
14989: CALL_OW 69
14993: ST_TO_ADDR
// ComAttackUnit ( un , NearestUnitToUnit ( pl_units , un ) ) ;
14994: LD_VAR 0 2
14998: PPUSH
14999: LD_VAR 0 9
15003: PPUSH
15004: LD_VAR 0 2
15008: PPUSH
15009: CALL_OW 74
15013: PPUSH
15014: CALL_OW 115
// Wait ( 0 0$01 ) ;
15018: LD_INT 35
15020: PPUSH
15021: CALL_OW 67
// end ;
15025: GO 14969
15027: POP
15028: POP
// end until FilterAllUnits ( [ [ f_side , side ] , [ f_control , control_computer ] ] ) = 0 ;
15029: LD_INT 22
15031: PUSH
15032: LD_VAR 0 1
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: PUSH
15041: LD_INT 33
15043: PUSH
15044: LD_INT 3
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: PPUSH
15055: CALL_OW 69
15059: PUSH
15060: LD_INT 0
15062: EQUAL
15063: IFFALSE 14959
// end ; end ; end_of_file
15065: PPOPN 9
15067: END
// every 5 5$00 do
15068: GO 15070
15070: DISABLE
// begin enable ;
15071: ENABLE
// SetResourceType ( GetBase ( comp_dep ) , mat_cans , 900000 ) ;
15072: LD_EXP 23
15076: PPUSH
15077: CALL_OW 274
15081: PPUSH
15082: LD_INT 1
15084: PPUSH
15085: LD_INT 900000
15087: PPUSH
15088: CALL_OW 277
// SetResourceType ( GetBase ( comp_dep ) , mat_oil , 100000 ) ;
15092: LD_EXP 23
15096: PPUSH
15097: CALL_OW 274
15101: PPUSH
15102: LD_INT 2
15104: PPUSH
15105: LD_INT 100000
15107: PPUSH
15108: CALL_OW 277
// SetResourceType ( GetBase ( comp_dep ) , mat_siberit , 1000 ) ;
15112: LD_EXP 23
15116: PPUSH
15117: CALL_OW 274
15121: PPUSH
15122: LD_INT 3
15124: PPUSH
15125: LD_INT 1000
15127: PPUSH
15128: CALL_OW 277
// end ;
15132: END
