// export MissionStart ; starting begin GameType ;
   0: CALL 4815 0 0
// RevealFogArea ( 1 , BetaArea ) ;
   4: LD_INT 1
   6: PPUSH
   7: LD_INT 8
   9: PPUSH
  10: CALL_OW 332
// SetBName ( BetaA , beta ) ;
  14: LD_INT 1
  16: PPUSH
  17: LD_STRING beta
  19: PPUSH
  20: CALL_OW 500
// SetBName ( BetaB , beta ) ;
  24: LD_INT 3
  26: PPUSH
  27: LD_STRING beta
  29: PPUSH
  30: CALL_OW 500
// PrepareHeroes ;
  34: CALL 2087 0 0
// PrepareBeta ;
  38: CALL 2476 0 0
// InGameOn ;
  42: CALL_OW 8
// CenterNowOnUnits ( Brighton ) ;
  46: LD_EXP 8
  50: PPUSH
  51: CALL_OW 87
// ComMoveXY ( Megan , 50 , 42 ) ;
  55: LD_EXP 10
  59: PPUSH
  60: LD_INT 50
  62: PPUSH
  63: LD_INT 42
  65: PPUSH
  66: CALL_OW 111
// repeat wait ( 0 0$1 ) until GetDistUnits ( Megan , Brighton ) < 3 ;
  70: LD_INT 35
  72: PPUSH
  73: CALL_OW 67
  77: LD_EXP 10
  81: PPUSH
  82: LD_EXP 8
  86: PPUSH
  87: CALL_OW 296
  91: PUSH
  92: LD_INT 3
  94: LESS
  95: IFFALSE 70
// ComTurnUnit ( Megan , Brighton ) ;
  97: LD_EXP 10
 101: PPUSH
 102: LD_EXP 8
 106: PPUSH
 107: CALL_OW 119
// Say ( Megan , DMegan-1a ) ;
 111: LD_EXP 10
 115: PPUSH
 116: LD_STRING DMegan-1a
 118: PPUSH
 119: CALL_OW 88
// wait ( 0 0$0.3 ) ;
 123: LD_INT 10
 125: PPUSH
 126: CALL_OW 67
// ComTurnUnit ( Brighton , Megan ) ;
 130: LD_EXP 8
 134: PPUSH
 135: LD_EXP 10
 139: PPUSH
 140: CALL_OW 119
// Say ( Brighton , DBrighton-1a ) ;
 144: LD_EXP 8
 148: PPUSH
 149: LD_STRING DBrighton-1a
 151: PPUSH
 152: CALL_OW 88
// Say ( Megan , DMegan-2a ) ;
 156: LD_EXP 10
 160: PPUSH
 161: LD_STRING DMegan-2a
 163: PPUSH
 164: CALL_OW 88
// Say ( Brighton , DBrighton-2a ) ;
 168: LD_EXP 8
 172: PPUSH
 173: LD_STRING DBrighton-2a
 175: PPUSH
 176: CALL_OW 88
// Say ( Megan , DMegan-3a ) ;
 180: LD_EXP 10
 184: PPUSH
 185: LD_STRING DMegan-3a
 187: PPUSH
 188: CALL_OW 88
// Say ( Brighton , DBrighton-3a ) ;
 192: LD_EXP 8
 196: PPUSH
 197: LD_STRING DBrighton-3a
 199: PPUSH
 200: CALL_OW 88
// Say ( Megan , DMegan-4a ) ;
 204: LD_EXP 10
 208: PPUSH
 209: LD_STRING DMegan-4a
 211: PPUSH
 212: CALL_OW 88
// ComMoveXY ( Megan , 40 , 37 ) ;
 216: LD_EXP 10
 220: PPUSH
 221: LD_INT 40
 223: PPUSH
 224: LD_INT 37
 226: PPUSH
 227: CALL_OW 111
// AddComTurnUnit ( Megan , Brighton ) ;
 231: LD_EXP 10
 235: PPUSH
 236: LD_EXP 8
 240: PPUSH
 241: CALL_OW 179
// ComMoveXY ( Palmer , 50 , 42 ) ;
 245: LD_EXP 9
 249: PPUSH
 250: LD_INT 50
 252: PPUSH
 253: LD_INT 42
 255: PPUSH
 256: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 260: LD_INT 35
 262: PPUSH
 263: CALL_OW 67
// until GetDistUnits ( Brighton , Palmer ) < 6 ;
 267: LD_EXP 8
 271: PPUSH
 272: LD_EXP 9
 276: PPUSH
 277: CALL_OW 296
 281: PUSH
 282: LD_INT 6
 284: LESS
 285: IFFALSE 260
// ComTurnUnit ( Brighton , Palmer ) ;
 287: LD_EXP 8
 291: PPUSH
 292: LD_EXP 9
 296: PPUSH
 297: CALL_OW 119
// ComTurnUnit ( Palmer , Brighton ) ;
 301: LD_EXP 9
 305: PPUSH
 306: LD_EXP 8
 310: PPUSH
 311: CALL_OW 119
// Say ( Megan , DMegan-5a ) ;
 315: LD_EXP 10
 319: PPUSH
 320: LD_STRING DMegan-5a
 322: PPUSH
 323: CALL_OW 88
// Say ( Palmer , DPalmer-1 ) ;
 327: LD_EXP 9
 331: PPUSH
 332: LD_STRING DPalmer-1
 334: PPUSH
 335: CALL_OW 88
// Say ( Brighton , DBrighton-1 ) ;
 339: LD_EXP 8
 343: PPUSH
 344: LD_STRING DBrighton-1
 346: PPUSH
 347: CALL_OW 88
// Say ( Palmer , DPalmer-2 ) ;
 351: LD_EXP 9
 355: PPUSH
 356: LD_STRING DPalmer-2
 358: PPUSH
 359: CALL_OW 88
// Say ( Brighton , DBrighton-2 ) ;
 363: LD_EXP 8
 367: PPUSH
 368: LD_STRING DBrighton-2
 370: PPUSH
 371: CALL_OW 88
// Say ( Palmer , DPalmer-3 ) ;
 375: LD_EXP 9
 379: PPUSH
 380: LD_STRING DPalmer-3
 382: PPUSH
 383: CALL_OW 88
// Say ( Brighton , DBrighton-3 ) ;
 387: LD_EXP 8
 391: PPUSH
 392: LD_STRING DBrighton-3
 394: PPUSH
 395: CALL_OW 88
// Say ( Palmer , DPalmer-4 ) ;
 399: LD_EXP 9
 403: PPUSH
 404: LD_STRING DPalmer-4
 406: PPUSH
 407: CALL_OW 88
// ComEnterUnit ( Palmer , AmTower ) ;
 411: LD_EXP 9
 415: PPUSH
 416: LD_INT 6
 418: PPUSH
 419: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
 423: LD_INT 35
 425: PPUSH
 426: CALL_OW 67
// until IsInUnit ( Palmer ) = AmTower ;
 430: LD_EXP 9
 434: PPUSH
 435: CALL_OW 310
 439: PUSH
 440: LD_INT 6
 442: EQUAL
 443: IFFALSE 423
// SayRadio ( Palmer , DPalmer-5 ) ;
 445: LD_EXP 9
 449: PPUSH
 450: LD_STRING DPalmer-5
 452: PPUSH
 453: CALL_OW 94
// ComMoveXY ( Brighton , 59 , 36 ) ;
 457: LD_EXP 8
 461: PPUSH
 462: LD_INT 59
 464: PPUSH
 465: LD_INT 36
 467: PPUSH
 468: CALL_OW 111
// ComMoveXY ( Megan , 60 , 35 ) ;
 472: LD_EXP 10
 476: PPUSH
 477: LD_INT 60
 479: PPUSH
 480: LD_INT 35
 482: PPUSH
 483: CALL_OW 111
// ComMoveXY ( Palmer , 60 , 34 ) ;
 487: LD_EXP 9
 491: PPUSH
 492: LD_INT 60
 494: PPUSH
 495: LD_INT 34
 497: PPUSH
 498: CALL_OW 111
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 502: LD_EXP 8
 506: PPUSH
 507: LD_INT 99
 509: PPUSH
 510: LD_INT 37
 512: PPUSH
 513: CALL_OW 178
// AddComTurnUnit ( Megan , Brighton ) ;
 517: LD_EXP 10
 521: PPUSH
 522: LD_EXP 8
 526: PPUSH
 527: CALL_OW 179
// AddComTurnUnit ( Palmer , Brighton ) ;
 531: LD_EXP 9
 535: PPUSH
 536: LD_EXP 8
 540: PPUSH
 541: CALL_OW 179
// CenterOnXY ( 64 , 40 ) ;
 545: LD_INT 64
 547: PPUSH
 548: LD_INT 40
 550: PPUSH
 551: CALL_OW 84
// ComMeeting ( BetaSquad , SpotArea ) ;
 555: LD_EXP 11
 559: PPUSH
 560: LD_INT 13
 562: PPUSH
 563: CALL 10049 0 2
// wait ( 0 0$30 ) ;
 567: LD_INT 1050
 569: PPUSH
 570: CALL_OW 67
// Say ( Brighton , DBrighton-4 ) ;
 574: LD_EXP 8
 578: PPUSH
 579: LD_STRING DBrighton-4
 581: PPUSH
 582: CALL_OW 88
// Say ( Brighton , DBrighton-5 ) ;
 586: LD_EXP 8
 590: PPUSH
 591: LD_STRING DBrighton-5
 593: PPUSH
 594: CALL_OW 88
// AddComTurnUnit ( Brighton , Megan ) ;
 598: LD_EXP 8
 602: PPUSH
 603: LD_EXP 10
 607: PPUSH
 608: CALL_OW 179
// Say ( Brighton , DBrighton-6 ) ;
 612: LD_EXP 8
 616: PPUSH
 617: LD_STRING DBrighton-6
 619: PPUSH
 620: CALL_OW 88
// Say ( Megan , DMegan-1 ) ;
 624: LD_EXP 10
 628: PPUSH
 629: LD_STRING DMegan-1
 631: PPUSH
 632: CALL_OW 88
// Say ( Brighton , DBrighton-7 ) ;
 636: LD_EXP 8
 640: PPUSH
 641: LD_STRING DBrighton-7
 643: PPUSH
 644: CALL_OW 88
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 648: LD_EXP 8
 652: PPUSH
 653: LD_INT 99
 655: PPUSH
 656: LD_INT 37
 658: PPUSH
 659: CALL_OW 178
// Say ( Brighton , DBrighton-8 ) ;
 663: LD_EXP 8
 667: PPUSH
 668: LD_STRING DBrighton-8
 670: PPUSH
 671: CALL_OW 88
// ChangeMissionObjectives ( C1 ) ;
 675: LD_STRING C1
 677: PPUSH
 678: CALL_OW 337
// InGameOff ;
 682: CALL_OW 9
// MissionStart := true ;
 686: LD_ADDR_EXP 1
 690: PUSH
 691: LD_INT 1
 693: ST_TO_ADDR
// music_nat := 1 ;
 694: LD_ADDR_OWVAR 71
 698: PUSH
 699: LD_INT 1
 701: ST_TO_ADDR
// end ;
 702: END
// export ArmadaArrived , FirstAssaultRepelled ; export RuSpeaker ; every 0 0$1 trigger MissionStart do
 703: LD_EXP 1
 707: IFFALSE 1664
 709: GO 711
 711: DISABLE
// begin wait ( ruArrival ) ;
 712: LD_EXP 41
 716: PPUSH
 717: CALL_OW 67
// PrepareRUArmada ;
 721: CALL 3024 0 0
// ComMoveXY ( RUArmada , 107 , 120 ) ;
 725: LD_EXP 16
 729: PPUSH
 730: LD_INT 107
 732: PPUSH
 733: LD_INT 120
 735: PPUSH
 736: CALL_OW 111
// ArmadaArrived := true ;
 740: LD_ADDR_EXP 2
 744: PUSH
 745: LD_INT 1
 747: ST_TO_ADDR
// Say ( Palmer , DPalmer-A1 ) ;
 748: LD_EXP 9
 752: PPUSH
 753: LD_STRING DPalmer-A1
 755: PPUSH
 756: CALL_OW 88
// Say ( Brighton , DBrighton-A1 ) ;
 760: LD_EXP 8
 764: PPUSH
 765: LD_STRING DBrighton-A1
 767: PPUSH
 768: CALL_OW 88
// wait ( 1 1$0 ) ;
 772: LD_INT 2100
 774: PPUSH
 775: CALL_OW 67
// PrepareRUBase ;
 779: CALL 3749 0 0
// PrepareRUBase_v2 ;
 783: CALL 4165 0 0
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
 787: LD_ADDR_EXP 52
 791: PUSH
 792: LD_EXP 52
 796: PPUSH
 797: LD_INT 1
 799: PPUSH
 800: LD_INT 22
 802: PUSH
 803: LD_INT 3
 805: PUSH
 806: EMPTY
 807: LIST
 808: LIST
 809: PPUSH
 810: CALL_OW 69
 814: PPUSH
 815: CALL_OW 1
 819: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , RU_SecondPersonnel ) ;
 820: LD_ADDR_EXP 52
 824: PUSH
 825: LD_EXP 52
 829: PPUSH
 830: LD_INT 2
 832: PPUSH
 833: LD_EXP 35
 837: PPUSH
 838: CALL_OW 1
 842: ST_TO_ADDR
// MC_Start ( ) ;
 843: CALL 54893 0 0
// wait ( 0 0$30 ) ;
 847: LD_INT 1050
 849: PPUSH
 850: CALL_OW 67
// PrepareRUBulldozers ;
 854: CALL 3636 0 0
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
 858: LD_EXP 17
 862: PUSH
 863: LD_INT 1
 865: ARRAY
 866: PPUSH
 867: LD_INT 9
 869: PPUSH
 870: CALL 9906 0 2
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
 874: LD_EXP 17
 878: PUSH
 879: LD_INT 2
 881: ARRAY
 882: PPUSH
 883: LD_INT 11
 885: PPUSH
 886: CALL 9906 0 2
// DoNotAttack ( 1 , Bulldozers [ 1 ] ) ;
 890: LD_INT 1
 892: PPUSH
 893: LD_EXP 17
 897: PUSH
 898: LD_INT 1
 900: ARRAY
 901: PPUSH
 902: CALL_OW 471
// DoNotAttack ( 1 , Bulldozers [ 2 ] ) ;
 906: LD_INT 1
 908: PPUSH
 909: LD_EXP 17
 913: PUSH
 914: LD_INT 2
 916: ARRAY
 917: PPUSH
 918: CALL_OW 471
// wait ( 0 0$30 ) ;
 922: LD_INT 1050
 924: PPUSH
 925: CALL_OW 67
// InGameOn ;
 929: CALL_OW 8
// ComMoveXY ( FilterUnitsInArea ( US_BackOffArea , [ f_side , 1 ] ) , 63 , 39 ) ;
 933: LD_INT 10
 935: PPUSH
 936: LD_INT 22
 938: PUSH
 939: LD_INT 1
 941: PUSH
 942: EMPTY
 943: LIST
 944: LIST
 945: PPUSH
 946: CALL_OW 70
 950: PPUSH
 951: LD_INT 63
 953: PPUSH
 954: LD_INT 39
 956: PPUSH
 957: CALL_OW 111
// CenterOnXY ( 95 , 93 ) ;
 961: LD_INT 95
 963: PPUSH
 964: LD_INT 93
 966: PPUSH
 967: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
 971: LD_INT 35
 973: PPUSH
 974: CALL_OW 67
// until ListEnvironmentArea ( BulldozerArea ) < 4 or ListEnvironmentArea ( BulldozerArea2 ) < 4 ;
 978: LD_INT 9
 980: PPUSH
 981: CALL_OW 353
 985: PUSH
 986: LD_INT 4
 988: LESS
 989: PUSH
 990: LD_INT 11
 992: PPUSH
 993: CALL_OW 353
 997: PUSH
 998: LD_INT 4
1000: LESS
1001: OR
1002: IFFALSE 971
// wait ( 0 0$10 ) ;
1004: LD_INT 350
1006: PPUSH
1007: CALL_OW 67
// ComMoveXY ( Bulldozers , 120 , 131 ) ;
1011: LD_EXP 17
1015: PPUSH
1016: LD_INT 120
1018: PPUSH
1019: LD_INT 131
1021: PPUSH
1022: CALL_OW 111
// wait ( 0 0$5 ) ;
1026: LD_INT 175
1028: PPUSH
1029: CALL_OW 67
// NormalAttack ( 1 , Bulldozers [ 1 ] ) ;
1033: LD_INT 1
1035: PPUSH
1036: LD_EXP 17
1040: PUSH
1041: LD_INT 1
1043: ARRAY
1044: PPUSH
1045: CALL_OW 472
// NormalAttack ( 1 , Bulldozers [ 2 ] ) ;
1049: LD_INT 1
1051: PPUSH
1052: LD_EXP 17
1056: PUSH
1057: LD_INT 2
1059: ARRAY
1060: PPUSH
1061: CALL_OW 472
// Say ( Yashin , DDeath-Yas-1 ) ;
1065: LD_EXP 12
1069: PPUSH
1070: LD_STRING DDeath-Yas-1
1072: PPUSH
1073: CALL_OW 88
// Say ( Gaydar , DDeath-Gay-2 ) ;
1077: LD_EXP 14
1081: PPUSH
1082: LD_STRING DDeath-Gay-2
1084: PPUSH
1085: CALL_OW 88
// SayEffect ( DRuSol-A1 ) ;
1089: LD_STRING DRuSol-A1
1091: PPUSH
1092: CALL_OW 96
// wait ( 0 0$2 ) ;
1096: LD_INT 70
1098: PPUSH
1099: CALL_OW 67
// InGameOff ;
1103: CALL_OW 9
// ComMoveXY ( RUArmada , 82 , 67 ) ;
1107: LD_EXP 16
1111: PPUSH
1112: LD_INT 82
1114: PPUSH
1115: LD_INT 67
1117: PPUSH
1118: CALL_OW 111
// wait ( 0 0$20 ) ;
1122: LD_INT 700
1124: PPUSH
1125: CALL_OW 67
// AssaultStarted := true ;
1129: LD_ADDR_EXP 7
1133: PUSH
1134: LD_INT 1
1136: ST_TO_ADDR
// Say ( Popov , DDeath-Pop-1 ) ;
1137: LD_EXP 13
1141: PPUSH
1142: LD_STRING DDeath-Pop-1
1144: PPUSH
1145: CALL_OW 88
// Say ( Gaydar , DDeath-Gay-1 ) ;
1149: LD_EXP 14
1153: PPUSH
1154: LD_STRING DDeath-Gay-1
1156: PPUSH
1157: CALL_OW 88
// wait ( 0 0$5 ) ;
1161: LD_INT 175
1163: PPUSH
1164: CALL_OW 67
// Say ( Sevi , DDeath-Vse-1 ) ;
1168: LD_EXP 15
1172: PPUSH
1173: LD_STRING DDeath-Vse-1
1175: PPUSH
1176: CALL_OW 88
// PriorityAttack ( 6 , BetaA ) ;
1180: LD_INT 6
1182: PPUSH
1183: LD_INT 1
1185: PPUSH
1186: CALL_OW 470
// PriorityAttack ( 6 , BetaB ) ;
1190: LD_INT 6
1192: PPUSH
1193: LD_INT 3
1195: PPUSH
1196: CALL_OW 470
// repeat ComAgressiveMove ( RUArmada , 67 , 37 ) ;
1200: LD_EXP 16
1204: PPUSH
1205: LD_INT 67
1207: PPUSH
1208: LD_INT 37
1210: PPUSH
1211: CALL_OW 114
// ComAgressiveMove ( [ Yashin , Popov , Gaydar , Sevi ] , 67 , 37 ) ;
1215: LD_EXP 12
1219: PUSH
1220: LD_EXP 13
1224: PUSH
1225: LD_EXP 14
1229: PUSH
1230: LD_EXP 15
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: LIST
1239: LIST
1240: PPUSH
1241: LD_INT 67
1243: PPUSH
1244: LD_INT 37
1246: PPUSH
1247: CALL_OW 114
// wait ( 0 0$1 ) until FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_type , unit_human ] ] ) < 10 and IsDead ( Yashin ) and IsDead ( Popov ) and IsDead ( Gaydar ) and IsDead ( Sevi ) ;
1251: LD_INT 35
1253: PPUSH
1254: CALL_OW 67
1258: LD_INT 1
1260: PUSH
1261: LD_INT 22
1263: PUSH
1264: LD_INT 6
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 21
1273: PUSH
1274: LD_INT 1
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: LIST
1285: PPUSH
1286: CALL_OW 69
1290: PUSH
1291: LD_INT 10
1293: LESS
1294: PUSH
1295: LD_EXP 12
1299: PPUSH
1300: CALL_OW 301
1304: AND
1305: PUSH
1306: LD_EXP 13
1310: PPUSH
1311: CALL_OW 301
1315: AND
1316: PUSH
1317: LD_EXP 14
1321: PPUSH
1322: CALL_OW 301
1326: AND
1327: PUSH
1328: LD_EXP 15
1332: PPUSH
1333: CALL_OW 301
1337: AND
1338: IFFALSE 1200
// AssaultStarted := false ;
1340: LD_ADDR_EXP 7
1344: PUSH
1345: LD_INT 0
1347: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ f_side , 6 ] ) , 120 , 131 ) ;
1348: LD_INT 22
1350: PUSH
1351: LD_INT 6
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: PPUSH
1358: CALL_OW 69
1362: PPUSH
1363: LD_INT 120
1365: PPUSH
1366: LD_INT 131
1368: PPUSH
1369: CALL_OW 111
// RuSpeaker := FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 500 ] ] ) ;
1373: LD_ADDR_EXP 4
1377: PUSH
1378: LD_INT 1
1380: PUSH
1381: LD_INT 22
1383: PUSH
1384: LD_INT 6
1386: PUSH
1387: EMPTY
1388: LIST
1389: LIST
1390: PUSH
1391: LD_INT 21
1393: PUSH
1394: LD_INT 1
1396: PUSH
1397: EMPTY
1398: LIST
1399: LIST
1400: PUSH
1401: LD_INT 24
1403: PUSH
1404: LD_INT 500
1406: PUSH
1407: EMPTY
1408: LIST
1409: LIST
1410: PUSH
1411: EMPTY
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: PPUSH
1417: CALL_OW 69
1421: ST_TO_ADDR
// Say ( RuSpeaker [ 1 ] , DRuSol-A2 ) ;
1422: LD_EXP 4
1426: PUSH
1427: LD_INT 1
1429: ARRAY
1430: PPUSH
1431: LD_STRING DRuSol-A2
1433: PPUSH
1434: CALL_OW 88
// wait ( 0 0$30 ) ;
1438: LD_INT 1050
1440: PPUSH
1441: CALL_OW 67
// DialogueOn ;
1445: CALL_OW 6
// Say ( Brighton , DBrighton-B1 ) ;
1449: LD_EXP 8
1453: PPUSH
1454: LD_STRING DBrighton-B1
1456: PPUSH
1457: CALL_OW 88
// Say ( Palmer , DPalmer-B1 ) ;
1461: LD_EXP 9
1465: PPUSH
1466: LD_STRING DPalmer-B1
1468: PPUSH
1469: CALL_OW 88
// Say ( Brighton , DBrighton-B2 ) ;
1473: LD_EXP 8
1477: PPUSH
1478: LD_STRING DBrighton-B2
1480: PPUSH
1481: CALL_OW 88
// SayRadio ( Burlak , DBurlak-B1 ) ;
1485: LD_EXP 18
1489: PPUSH
1490: LD_STRING DBurlak-B1
1492: PPUSH
1493: CALL_OW 94
// Say ( Brighton , DBrighton-B3 ) ;
1497: LD_EXP 8
1501: PPUSH
1502: LD_STRING DBrighton-B3
1504: PPUSH
1505: CALL_OW 88
// Say ( Palmer , DPalmer-B2 ) ;
1509: LD_EXP 9
1513: PPUSH
1514: LD_STRING DPalmer-B2
1516: PPUSH
1517: CALL_OW 88
// Say ( Brighton , DBrighton-B4 ) ;
1521: LD_EXP 8
1525: PPUSH
1526: LD_STRING DBrighton-B4
1528: PPUSH
1529: CALL_OW 88
// Say ( Brighton , DBrighton-B5 ) ;
1533: LD_EXP 8
1537: PPUSH
1538: LD_STRING DBrighton-B5
1540: PPUSH
1541: CALL_OW 88
// DialogueOff ;
1545: CALL_OW 7
// ChangeMissionObjectives ( C2 ) ;
1549: LD_STRING C2
1551: PPUSH
1552: CALL_OW 337
// FirstAssaultRepelled := true ;
1556: LD_ADDR_EXP 3
1560: PUSH
1561: LD_INT 1
1563: ST_TO_ADDR
// RemoveUnit ( Bulldozers [ 1 ] ) ;
1564: LD_EXP 17
1568: PUSH
1569: LD_INT 1
1571: ARRAY
1572: PPUSH
1573: CALL_OW 64
// RemoveUnit ( Bulldozers [ 2 ] ) ;
1577: LD_EXP 17
1581: PUSH
1582: LD_INT 2
1584: ARRAY
1585: PPUSH
1586: CALL_OW 64
// AddComExitVehicle ( FilterAllUnits ( [ f_side , 6 ] ) ) ;
1590: LD_INT 22
1592: PUSH
1593: LD_INT 6
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: PPUSH
1600: CALL_OW 69
1604: PPUSH
1605: CALL_OW 181
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
1609: LD_INT 22
1611: PUSH
1612: LD_INT 6
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PPUSH
1619: CALL_OW 69
1623: PPUSH
1624: LD_INT 3
1626: PPUSH
1627: CALL_OW 235
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
1631: LD_ADDR_EXP 52
1635: PUSH
1636: LD_EXP 52
1640: PPUSH
1641: LD_INT 1
1643: PPUSH
1644: LD_INT 22
1646: PUSH
1647: LD_INT 3
1649: PUSH
1650: EMPTY
1651: LIST
1652: LIST
1653: PPUSH
1654: CALL_OW 69
1658: PPUSH
1659: CALL_OW 1
1663: ST_TO_ADDR
// end ;
1664: END
// every 0 0$1 trigger FirstAssaultRepelled and jmmArrival > 0 0$00 do
1665: LD_EXP 3
1669: PUSH
1670: LD_EXP 40
1674: PUSH
1675: LD_INT 0
1677: GREATER
1678: AND
1679: IFFALSE 1699
1681: GO 1683
1683: DISABLE
// begin enable ;
1684: ENABLE
// jmmArrival := jmmArrival - 0 0$01 ;
1685: LD_ADDR_EXP 40
1689: PUSH
1690: LD_EXP 40
1694: PUSH
1695: LD_INT 35
1697: MINUS
1698: ST_TO_ADDR
// end ;
1699: END
// export JMM_Arrived ; every 0 0$1 trigger jmmArrival = 0 0$00 do
1700: LD_EXP 40
1704: PUSH
1705: LD_INT 0
1707: EQUAL
1708: IFFALSE 1793
1710: GO 1712
1712: DISABLE
// begin JMMReinforcement ;
1713: CALL 4493 0 0
// DialogueOn ;
1717: CALL_OW 6
// CenterOnUnits ( JMM ) ;
1721: LD_EXP 36
1725: PPUSH
1726: CALL_OW 85
// Say ( JMM , DJMM-F1 ) ;
1730: LD_EXP 36
1734: PPUSH
1735: LD_STRING DJMM-F1
1737: PPUSH
1738: CALL_OW 88
// if RussiansDefeated then
1742: LD_EXP 42
1746: IFFALSE 1762
// Say ( Brighton , DBrighton-F1a ) else
1748: LD_EXP 8
1752: PPUSH
1753: LD_STRING DBrighton-F1a
1755: PPUSH
1756: CALL_OW 88
1760: GO 1781
// begin Say ( Brighton , DBrighton-F1 ) ;
1762: LD_EXP 8
1766: PPUSH
1767: LD_STRING DBrighton-F1
1769: PPUSH
1770: CALL_OW 88
// ChangeMissionObjectives ( C3 ) ;
1774: LD_STRING C3
1776: PPUSH
1777: CALL_OW 337
// end ; DialogueOff ;
1781: CALL_OW 7
// JMM_Arrived := true ;
1785: LD_ADDR_EXP 5
1789: PUSH
1790: LD_INT 1
1792: ST_TO_ADDR
// end ;
1793: END
// every 0 0$1 trigger JMM_Arrived and See ( 1 , Burlak ) do
1794: LD_EXP 5
1798: PUSH
1799: LD_INT 1
1801: PPUSH
1802: LD_EXP 18
1806: PPUSH
1807: CALL_OW 292
1811: AND
1812: IFFALSE 1841
1814: GO 1816
1816: DISABLE
// begin Say ( Burlak , DBurlak ) ;
1817: LD_EXP 18
1821: PPUSH
1822: LD_STRING DBurlak
1824: PPUSH
1825: CALL_OW 88
// Say ( JMM , DJMM ) ;
1829: LD_EXP 36
1833: PPUSH
1834: LD_STRING DJMM
1836: PPUSH
1837: CALL_OW 88
// end ;
1841: END
// export LaserBuilt ; every 0 0$1 trigger FilterAllUnits ( [ f_and , [ f_side , 1 ] , [ f_or , [ f_weapon , us_laser ] , [ f_bweapon , us_laser ] ] ] ) > 1 do
1842: LD_INT 1
1844: PUSH
1845: LD_INT 22
1847: PUSH
1848: LD_INT 1
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: PUSH
1855: LD_INT 2
1857: PUSH
1858: LD_INT 34
1860: PUSH
1861: LD_INT 9
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 35
1870: PUSH
1871: LD_INT 9
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: LIST
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: LIST
1887: PPUSH
1888: CALL_OW 69
1892: PUSH
1893: LD_INT 1
1895: GREATER
1896: IFFALSE 1909
1898: GO 1900
1900: DISABLE
// begin LaserBuilt := true ;
1901: LD_ADDR_EXP 6
1905: PUSH
1906: LD_INT 1
1908: ST_TO_ADDR
// end ;
1909: END
// export AssaultStarted ; every 0 0$1 trigger AssaultStarted and See ( 6 , NearestUnitToUnit ( FilterAllUnits ( [ f_and , [ [ f_side , 1 ] , [ f_bweapon , us_laser ] ] ] ) , IsInUnit ( Sevi ) ) ) do
1910: LD_EXP 7
1914: PUSH
1915: LD_INT 6
1917: PPUSH
1918: LD_INT 1
1920: PUSH
1921: LD_INT 22
1923: PUSH
1924: LD_INT 1
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PUSH
1931: LD_INT 35
1933: PUSH
1934: LD_INT 9
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: PUSH
1945: EMPTY
1946: LIST
1947: LIST
1948: PPUSH
1949: CALL_OW 69
1953: PPUSH
1954: LD_EXP 15
1958: PPUSH
1959: CALL_OW 310
1963: PPUSH
1964: CALL_OW 74
1968: PPUSH
1969: CALL_OW 292
1973: AND
1974: IFFALSE 2010
1976: GO 1978
1978: DISABLE
// begin wait ( 0 0$5 ) ;
1979: LD_INT 175
1981: PPUSH
1982: CALL_OW 67
// Say ( Sevi , DDeath-Vse-2 ) ;
1986: LD_EXP 15
1990: PPUSH
1991: LD_STRING DDeath-Vse-2
1993: PPUSH
1994: CALL_OW 88
// Say ( Yashin , DDeath-Yas-2 ) ;
1998: LD_EXP 12
2002: PPUSH
2003: LD_STRING DDeath-Yas-2
2005: PPUSH
2006: CALL_OW 88
// end ;
2010: END
// every 0 0$1 trigger AssaultStarted do
2011: LD_EXP 7
2015: IFFALSE 2039
2017: GO 2019
2019: DISABLE
// begin wait ( 0 0$20 ) ;
2020: LD_INT 700
2022: PPUSH
2023: CALL_OW 67
// Say ( Popov , DDeath-Pop-2 ) ;
2027: LD_EXP 13
2031: PPUSH
2032: LD_STRING DDeath-Pop-2
2034: PPUSH
2035: CALL_OW 88
// end ;
2039: END
// every 0 0$1 trigger MissionStart do
2040: LD_EXP 1
2044: IFFALSE 2086
2046: GO 2048
2048: DISABLE
// begin wait ( Rand ( 0 0$50 , 1 1$20 ) ) ;
2049: LD_INT 1750
2051: PPUSH
2052: LD_INT 2800
2054: PPUSH
2055: CALL_OW 12
2059: PPUSH
2060: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
2064: LD_INT 2
2066: PPUSH
2067: LD_INT 5
2069: PPUSH
2070: CALL_OW 12
2074: PPUSH
2075: LD_INT 12
2077: PPUSH
2078: LD_INT 1
2080: PPUSH
2081: CALL_OW 55
// enable ;
2085: ENABLE
// end ; end_of_file
2086: END
// export Brighton , Palmer , Megan ; export BetaSquad ; export function PrepareHeroes ; begin
2087: LD_INT 0
2089: PPUSH
// uc_side := 1 ;
2090: LD_ADDR_OWVAR 20
2094: PUSH
2095: LD_INT 1
2097: ST_TO_ADDR
// hc_class = class_soldier ;
2098: LD_ADDR_OWVAR 28
2102: PUSH
2103: LD_INT 1
2105: ST_TO_ADDR
// uc_nation := nation_american ;
2106: LD_ADDR_OWVAR 21
2110: PUSH
2111: LD_INT 1
2113: ST_TO_ADDR
// hc_sex = sex_male ;
2114: LD_ADDR_OWVAR 27
2118: PUSH
2119: LD_INT 1
2121: ST_TO_ADDR
// hc_importance = 110 ;
2122: LD_ADDR_OWVAR 32
2126: PUSH
2127: LD_INT 110
2129: ST_TO_ADDR
// hc_basic_skills = [ 5 , 4 , 5 , 3 ] ;
2130: LD_ADDR_OWVAR 30
2134: PUSH
2135: LD_INT 5
2137: PUSH
2138: LD_INT 4
2140: PUSH
2141: LD_INT 5
2143: PUSH
2144: LD_INT 3
2146: PUSH
2147: EMPTY
2148: LIST
2149: LIST
2150: LIST
2151: LIST
2152: ST_TO_ADDR
// hc_skills = [ 9 , 6 , 7 , 6 ] ;
2153: LD_ADDR_OWVAR 31
2157: PUSH
2158: LD_INT 9
2160: PUSH
2161: LD_INT 6
2163: PUSH
2164: LD_INT 7
2166: PUSH
2167: LD_INT 6
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: ST_TO_ADDR
// hc_attr = [ 12 , 10 ] ;
2176: LD_ADDR_OWVAR 29
2180: PUSH
2181: LD_INT 12
2183: PUSH
2184: LD_INT 10
2186: PUSH
2187: EMPTY
2188: LIST
2189: LIST
2190: ST_TO_ADDR
// hc_name := Gerard Brighton ;
2191: LD_ADDR_OWVAR 26
2195: PUSH
2196: LD_STRING Gerard Brighton
2198: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2199: LD_ADDR_OWVAR 33
2203: PUSH
2204: LD_STRING Beta_Skirmish
2206: ST_TO_ADDR
// hc_face_number := 1 ;
2207: LD_ADDR_OWVAR 34
2211: PUSH
2212: LD_INT 1
2214: ST_TO_ADDR
// Brighton := CreateHuman ;
2215: LD_ADDR_EXP 8
2219: PUSH
2220: CALL_OW 44
2224: ST_TO_ADDR
// uc_nation := nation_american ;
2225: LD_ADDR_OWVAR 21
2229: PUSH
2230: LD_INT 1
2232: ST_TO_ADDR
// hc_importance = 80 ;
2233: LD_ADDR_OWVAR 32
2237: PUSH
2238: LD_INT 80
2240: ST_TO_ADDR
// hc_sex = sex_male ;
2241: LD_ADDR_OWVAR 27
2245: PUSH
2246: LD_INT 1
2248: ST_TO_ADDR
// hc_basic_skills = [ 5 , 5 , 3 , 1 ] ;
2249: LD_ADDR_OWVAR 30
2253: PUSH
2254: LD_INT 5
2256: PUSH
2257: LD_INT 5
2259: PUSH
2260: LD_INT 3
2262: PUSH
2263: LD_INT 1
2265: PUSH
2266: EMPTY
2267: LIST
2268: LIST
2269: LIST
2270: LIST
2271: ST_TO_ADDR
// hc_skills = [ 7 , 6 , 5 , 3 ] ;
2272: LD_ADDR_OWVAR 31
2276: PUSH
2277: LD_INT 7
2279: PUSH
2280: LD_INT 6
2282: PUSH
2283: LD_INT 5
2285: PUSH
2286: LD_INT 3
2288: PUSH
2289: EMPTY
2290: LIST
2291: LIST
2292: LIST
2293: LIST
2294: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2295: LD_ADDR_OWVAR 29
2299: PUSH
2300: LD_INT 10
2302: PUSH
2303: LD_INT 10
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: ST_TO_ADDR
// hc_name := Brian Palmer ;
2310: LD_ADDR_OWVAR 26
2314: PUSH
2315: LD_STRING Brian Palmer
2317: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2318: LD_ADDR_OWVAR 33
2322: PUSH
2323: LD_STRING Beta_Skirmish
2325: ST_TO_ADDR
// hc_face_number := 3 ;
2326: LD_ADDR_OWVAR 34
2330: PUSH
2331: LD_INT 3
2333: ST_TO_ADDR
// Palmer := CreateHuman ;
2334: LD_ADDR_EXP 9
2338: PUSH
2339: CALL_OW 44
2343: ST_TO_ADDR
// hc_class = class_scientistic ;
2344: LD_ADDR_OWVAR 28
2348: PUSH
2349: LD_INT 4
2351: ST_TO_ADDR
// uc_nation := nation_american ;
2352: LD_ADDR_OWVAR 21
2356: PUSH
2357: LD_INT 1
2359: ST_TO_ADDR
// hc_importance = 70 ;
2360: LD_ADDR_OWVAR 32
2364: PUSH
2365: LD_INT 70
2367: ST_TO_ADDR
// hc_sex = sex_female ;
2368: LD_ADDR_OWVAR 27
2372: PUSH
2373: LD_INT 2
2375: ST_TO_ADDR
// hc_basic_skills = [ 3 , 2 , 4 , 6 ] ;
2376: LD_ADDR_OWVAR 30
2380: PUSH
2381: LD_INT 3
2383: PUSH
2384: LD_INT 2
2386: PUSH
2387: LD_INT 4
2389: PUSH
2390: LD_INT 6
2392: PUSH
2393: EMPTY
2394: LIST
2395: LIST
2396: LIST
2397: LIST
2398: ST_TO_ADDR
// hc_skills = [ 4 , 2 , 5 , 8 ] ;
2399: LD_ADDR_OWVAR 31
2403: PUSH
2404: LD_INT 4
2406: PUSH
2407: LD_INT 2
2409: PUSH
2410: LD_INT 5
2412: PUSH
2413: LD_INT 8
2415: PUSH
2416: EMPTY
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2422: LD_ADDR_OWVAR 29
2426: PUSH
2427: LD_INT 10
2429: PUSH
2430: LD_INT 10
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: ST_TO_ADDR
// hc_name := Megan Armitage ;
2437: LD_ADDR_OWVAR 26
2441: PUSH
2442: LD_STRING Megan Armitage
2444: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2445: LD_ADDR_OWVAR 33
2449: PUSH
2450: LD_STRING Beta_Skirmish
2452: ST_TO_ADDR
// hc_face_number := 4 ;
2453: LD_ADDR_OWVAR 34
2457: PUSH
2458: LD_INT 4
2460: ST_TO_ADDR
// Megan := CreateHuman ;
2461: LD_ADDR_EXP 10
2465: PUSH
2466: CALL_OW 44
2470: ST_TO_ADDR
// end ;
2471: LD_VAR 0 1
2475: RET
// export function PrepareBeta ; var i , filter , un , soldiers ; begin
2476: LD_INT 0
2478: PPUSH
2479: PPUSH
2480: PPUSH
2481: PPUSH
2482: PPUSH
// uc_side := 1 ;
2483: LD_ADDR_OWVAR 20
2487: PUSH
2488: LD_INT 1
2490: ST_TO_ADDR
// uc_nation := nation_american ;
2491: LD_ADDR_OWVAR 21
2495: PUSH
2496: LD_INT 1
2498: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
2499: LD_ADDR_VAR 0 2
2503: PUSH
2504: LD_INT 22
2506: PUSH
2507: LD_INT 1
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: PUSH
2514: LD_INT 30
2516: PUSH
2517: LD_INT 32
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: PPUSH
2528: CALL_OW 69
2532: PUSH
2533: FOR_IN
2534: IFFALSE 2589
// PlaceWeaponTurret ( i , [ us_machine_gun , us_light_gun , us_gatling_gun , us_double_gun , us_radar , us_light_gun , us_gatling_gun ] [ rand ( 1 , 7 ) ] ) ;
2536: LD_VAR 0 2
2540: PPUSH
2541: LD_INT 2
2543: PUSH
2544: LD_INT 3
2546: PUSH
2547: LD_INT 4
2549: PUSH
2550: LD_INT 5
2552: PUSH
2553: LD_INT 11
2555: PUSH
2556: LD_INT 3
2558: PUSH
2559: LD_INT 4
2561: PUSH
2562: EMPTY
2563: LIST
2564: LIST
2565: LIST
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: PUSH
2571: LD_INT 1
2573: PPUSH
2574: LD_INT 7
2576: PPUSH
2577: CALL_OW 12
2581: ARRAY
2582: PPUSH
2583: CALL_OW 431
2587: GO 2533
2589: POP
2590: POP
// hc_name :=  ;
2591: LD_ADDR_OWVAR 26
2595: PUSH
2596: LD_STRING 
2598: ST_TO_ADDR
// hc_gallery :=  ;
2599: LD_ADDR_OWVAR 33
2603: PUSH
2604: LD_STRING 
2606: ST_TO_ADDR
// for i = 1 to [ 8 , 7 , 7 ] [ Difficulty ] do
2607: LD_ADDR_VAR 0 2
2611: PUSH
2612: DOUBLE
2613: LD_INT 1
2615: DEC
2616: ST_TO_ADDR
2617: LD_INT 8
2619: PUSH
2620: LD_INT 7
2622: PUSH
2623: LD_INT 7
2625: PUSH
2626: EMPTY
2627: LIST
2628: LIST
2629: LIST
2630: PUSH
2631: LD_OWVAR 67
2635: ARRAY
2636: PUSH
2637: FOR_TO
2638: IFFALSE 2696
// begin PrepareSoldier ( 1 , game_skill ) ;
2640: LD_INT 1
2642: PPUSH
2643: LD_EXP 38
2647: PPUSH
2648: CALL_OW 381
// un := CreateHuman ;
2652: LD_ADDR_VAR 0 4
2656: PUSH
2657: CALL_OW 44
2661: ST_TO_ADDR
// filter := filter ^ un ;
2662: LD_ADDR_VAR 0 3
2666: PUSH
2667: LD_VAR 0 3
2671: PUSH
2672: LD_VAR 0 4
2676: ADD
2677: ST_TO_ADDR
// soldiers := soldiers ^ un ;
2678: LD_ADDR_VAR 0 5
2682: PUSH
2683: LD_VAR 0 5
2687: PUSH
2688: LD_VAR 0 4
2692: ADD
2693: ST_TO_ADDR
// end ;
2694: GO 2637
2696: POP
2697: POP
// for i = 1 to 3 do
2698: LD_ADDR_VAR 0 2
2702: PUSH
2703: DOUBLE
2704: LD_INT 1
2706: DEC
2707: ST_TO_ADDR
2708: LD_INT 3
2710: PUSH
2711: FOR_TO
2712: IFFALSE 2766
// begin PrepareEngineer ( 0 , game_skill ) ;
2714: LD_INT 0
2716: PPUSH
2717: LD_EXP 38
2721: PPUSH
2722: CALL_OW 382
// un := CreateHuman ;
2726: LD_ADDR_VAR 0 4
2730: PUSH
2731: CALL_OW 44
2735: ST_TO_ADDR
// filter := filter ^ un ;
2736: LD_ADDR_VAR 0 3
2740: PUSH
2741: LD_VAR 0 3
2745: PUSH
2746: LD_VAR 0 4
2750: ADD
2751: ST_TO_ADDR
// PlaceHumanInUnit ( un , BetaB ) ;
2752: LD_VAR 0 4
2756: PPUSH
2757: LD_INT 3
2759: PPUSH
2760: CALL_OW 52
// end ;
2764: GO 2711
2766: POP
2767: POP
// for i = 1 to 4 do
2768: LD_ADDR_VAR 0 2
2772: PUSH
2773: DOUBLE
2774: LD_INT 1
2776: DEC
2777: ST_TO_ADDR
2778: LD_INT 4
2780: PUSH
2781: FOR_TO
2782: IFFALSE 2836
// begin PrepareMechanic ( 0 , game_skill ) ;
2784: LD_INT 0
2786: PPUSH
2787: LD_EXP 38
2791: PPUSH
2792: CALL_OW 383
// un := CreateHuman ;
2796: LD_ADDR_VAR 0 4
2800: PUSH
2801: CALL_OW 44
2805: ST_TO_ADDR
// filter := filter ^ un ;
2806: LD_ADDR_VAR 0 3
2810: PUSH
2811: LD_VAR 0 3
2815: PUSH
2816: LD_VAR 0 4
2820: ADD
2821: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmFac ) ;
2822: LD_VAR 0 4
2826: PPUSH
2827: LD_INT 8
2829: PPUSH
2830: CALL_OW 52
// end ;
2834: GO 2781
2836: POP
2837: POP
// for i = 1 to 3 do
2838: LD_ADDR_VAR 0 2
2842: PUSH
2843: DOUBLE
2844: LD_INT 1
2846: DEC
2847: ST_TO_ADDR
2848: LD_INT 3
2850: PUSH
2851: FOR_TO
2852: IFFALSE 2906
// begin PrepareScientist ( 0 , game_skill ) ;
2854: LD_INT 0
2856: PPUSH
2857: LD_EXP 38
2861: PPUSH
2862: CALL_OW 384
// un := CreateHuman ;
2866: LD_ADDR_VAR 0 4
2870: PUSH
2871: CALL_OW 44
2875: ST_TO_ADDR
// filter := filter ^ un ;
2876: LD_ADDR_VAR 0 3
2880: PUSH
2881: LD_VAR 0 3
2885: PUSH
2886: LD_VAR 0 4
2890: ADD
2891: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmLab ) ;
2892: LD_VAR 0 4
2896: PPUSH
2897: LD_INT 14
2899: PPUSH
2900: CALL_OW 52
// end ;
2904: GO 2851
2906: POP
2907: POP
// for i = 1 to soldiers do
2908: LD_ADDR_VAR 0 2
2912: PUSH
2913: DOUBLE
2914: LD_INT 1
2916: DEC
2917: ST_TO_ADDR
2918: LD_VAR 0 5
2922: PUSH
2923: FOR_TO
2924: IFFALSE 2949
// PlaceUnitArea ( soldiers [ i ] , spawn_area , false ) ;
2926: LD_VAR 0 5
2930: PUSH
2931: LD_VAR 0 2
2935: ARRAY
2936: PPUSH
2937: LD_INT 1
2939: PPUSH
2940: LD_INT 0
2942: PPUSH
2943: CALL_OW 49
2947: GO 2923
2949: POP
2950: POP
// PlaceUnitXY ( Brighton , 51 , 43 , false ) ;
2951: LD_EXP 8
2955: PPUSH
2956: LD_INT 51
2958: PPUSH
2959: LD_INT 43
2961: PPUSH
2962: LD_INT 0
2964: PPUSH
2965: CALL_OW 48
// PlaceUnitXY ( Palmer , 55 , 58 , false ) ;
2969: LD_EXP 9
2973: PPUSH
2974: LD_INT 55
2976: PPUSH
2977: LD_INT 58
2979: PPUSH
2980: LD_INT 0
2982: PPUSH
2983: CALL_OW 48
// PlaceUnitXY ( Megan , 39 , 36 , false ) ;
2987: LD_EXP 10
2991: PPUSH
2992: LD_INT 39
2994: PPUSH
2995: LD_INT 36
2997: PPUSH
2998: LD_INT 0
3000: PPUSH
3001: CALL_OW 48
// BetaSquad := filter diff 0 ;
3005: LD_ADDR_EXP 11
3009: PUSH
3010: LD_VAR 0 3
3014: PUSH
3015: LD_INT 0
3017: DIFF
3018: ST_TO_ADDR
// end ;
3019: LD_VAR 0 1
3023: RET
// export Yashin , Popov , Gaydar , Sevi ; export RUArmada ; export function PrepareRUArmada ; var i , vehicle , soldiers , un , vehs ; begin
3024: LD_INT 0
3026: PPUSH
3027: PPUSH
3028: PPUSH
3029: PPUSH
3030: PPUSH
3031: PPUSH
// uc_side := 6 ;
3032: LD_ADDR_OWVAR 20
3036: PUSH
3037: LD_INT 6
3039: ST_TO_ADDR
// uc_nation := nation_russian ;
3040: LD_ADDR_OWVAR 21
3044: PUSH
3045: LD_INT 3
3047: ST_TO_ADDR
// soldiers := [ ] ;
3048: LD_ADDR_VAR 0 4
3052: PUSH
3053: EMPTY
3054: ST_TO_ADDR
// vehs := [ ] ;
3055: LD_ADDR_VAR 0 6
3059: PUSH
3060: EMPTY
3061: ST_TO_ADDR
// RUArmada := [ ] ;
3062: LD_ADDR_EXP 16
3066: PUSH
3067: EMPTY
3068: ST_TO_ADDR
// Yashin := NewCharacter ( Yashin ) ;
3069: LD_ADDR_EXP 12
3073: PUSH
3074: LD_STRING Yashin
3076: PPUSH
3077: CALL_OW 25
3081: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
3082: LD_ADDR_EXP 13
3086: PUSH
3087: LD_STRING Popov
3089: PPUSH
3090: CALL_OW 25
3094: ST_TO_ADDR
// Gaydar := NewCharacter ( Gaydar ) ;
3095: LD_ADDR_EXP 14
3099: PUSH
3100: LD_STRING Gaydar
3102: PPUSH
3103: CALL_OW 25
3107: ST_TO_ADDR
// Sevi := NewCharacter ( Vsevolod ) ;
3108: LD_ADDR_EXP 15
3112: PUSH
3113: LD_STRING Vsevolod
3115: PPUSH
3116: CALL_OW 25
3120: ST_TO_ADDR
// for i = 1 to 16 do
3121: LD_ADDR_VAR 0 2
3125: PUSH
3126: DOUBLE
3127: LD_INT 1
3129: DEC
3130: ST_TO_ADDR
3131: LD_INT 16
3133: PUSH
3134: FOR_TO
3135: IFFALSE 3177
// begin PrepareSoldier ( 0 , game_eskill ) ;
3137: LD_INT 0
3139: PPUSH
3140: LD_EXP 39
3144: PPUSH
3145: CALL_OW 381
// un := CreateHuman ;
3149: LD_ADDR_VAR 0 5
3153: PUSH
3154: CALL_OW 44
3158: ST_TO_ADDR
// soldiers := soldiers ^ un ;
3159: LD_ADDR_VAR 0 4
3163: PUSH
3164: LD_VAR 0 4
3168: PUSH
3169: LD_VAR 0 5
3173: ADD
3174: ST_TO_ADDR
// end ;
3175: GO 3134
3177: POP
3178: POP
// soldiers := Yashin ^ Popov ^ Gaydar ^ Sevi ^ soldiers ;
3179: LD_ADDR_VAR 0 4
3183: PUSH
3184: LD_EXP 12
3188: PUSH
3189: LD_EXP 13
3193: ADD
3194: PUSH
3195: LD_EXP 14
3199: ADD
3200: PUSH
3201: LD_EXP 15
3205: ADD
3206: PUSH
3207: LD_VAR 0 4
3211: ADD
3212: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_heavy_gun , 100 ) ;
3213: LD_INT 24
3215: PPUSH
3216: LD_INT 3
3218: PPUSH
3219: LD_INT 1
3221: PPUSH
3222: LD_INT 46
3224: PPUSH
3225: LD_INT 100
3227: PPUSH
3228: CALL 16799 0 5
// for i = 1 to 8 do
3232: LD_ADDR_VAR 0 2
3236: PUSH
3237: DOUBLE
3238: LD_INT 1
3240: DEC
3241: ST_TO_ADDR
3242: LD_INT 8
3244: PUSH
3245: FOR_TO
3246: IFFALSE 3329
// begin vehicle := CreateVehicle ;
3248: LD_ADDR_VAR 0 3
3252: PUSH
3253: CALL_OW 45
3257: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3258: LD_VAR 0 4
3262: PUSH
3263: LD_INT 1
3265: ARRAY
3266: PPUSH
3267: LD_VAR 0 3
3271: PPUSH
3272: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3276: LD_ADDR_VAR 0 4
3280: PUSH
3281: LD_VAR 0 4
3285: PUSH
3286: LD_VAR 0 4
3290: PUSH
3291: LD_INT 1
3293: ARRAY
3294: DIFF
3295: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3296: LD_VAR 0 3
3300: PPUSH
3301: LD_INT 5
3303: PPUSH
3304: LD_INT 0
3306: PPUSH
3307: CALL_OW 49
// vehs := vehs ^ vehicle ;
3311: LD_ADDR_VAR 0 6
3315: PUSH
3316: LD_VAR 0 6
3320: PUSH
3321: LD_VAR 0 3
3325: ADD
3326: ST_TO_ADDR
// end ;
3327: GO 3245
3329: POP
3330: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_gatling_gun , 100 ) ;
3331: LD_INT 24
3333: PPUSH
3334: LD_INT 3
3336: PPUSH
3337: LD_INT 1
3339: PPUSH
3340: LD_INT 43
3342: PPUSH
3343: LD_INT 100
3345: PPUSH
3346: CALL 16799 0 5
// for i = 1 to 8 do
3350: LD_ADDR_VAR 0 2
3354: PUSH
3355: DOUBLE
3356: LD_INT 1
3358: DEC
3359: ST_TO_ADDR
3360: LD_INT 8
3362: PUSH
3363: FOR_TO
3364: IFFALSE 3447
// begin vehicle := CreateVehicle ;
3366: LD_ADDR_VAR 0 3
3370: PUSH
3371: CALL_OW 45
3375: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3376: LD_VAR 0 4
3380: PUSH
3381: LD_INT 1
3383: ARRAY
3384: PPUSH
3385: LD_VAR 0 3
3389: PPUSH
3390: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3394: LD_ADDR_VAR 0 4
3398: PUSH
3399: LD_VAR 0 4
3403: PUSH
3404: LD_VAR 0 4
3408: PUSH
3409: LD_INT 1
3411: ARRAY
3412: DIFF
3413: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3414: LD_VAR 0 3
3418: PPUSH
3419: LD_INT 5
3421: PPUSH
3422: LD_INT 0
3424: PPUSH
3425: CALL_OW 49
// vehs := vehs ^ vehicle ;
3429: LD_ADDR_VAR 0 6
3433: PUSH
3434: LD_VAR 0 6
3438: PUSH
3439: LD_VAR 0 3
3443: ADD
3444: ST_TO_ADDR
// end ;
3445: GO 3363
3447: POP
3448: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_gun , 100 ) ;
3449: LD_INT 22
3451: PPUSH
3452: LD_INT 3
3454: PPUSH
3455: LD_INT 1
3457: PPUSH
3458: LD_INT 44
3460: PPUSH
3461: LD_INT 100
3463: PPUSH
3464: CALL 16799 0 5
// for i = 1 to 4 do
3468: LD_ADDR_VAR 0 2
3472: PUSH
3473: DOUBLE
3474: LD_INT 1
3476: DEC
3477: ST_TO_ADDR
3478: LD_INT 4
3480: PUSH
3481: FOR_TO
3482: IFFALSE 3565
// begin vehicle := CreateVehicle ;
3484: LD_ADDR_VAR 0 3
3488: PUSH
3489: CALL_OW 45
3493: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3494: LD_VAR 0 4
3498: PUSH
3499: LD_INT 1
3501: ARRAY
3502: PPUSH
3503: LD_VAR 0 3
3507: PPUSH
3508: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3512: LD_ADDR_VAR 0 4
3516: PUSH
3517: LD_VAR 0 4
3521: PUSH
3522: LD_VAR 0 4
3526: PUSH
3527: LD_INT 1
3529: ARRAY
3530: DIFF
3531: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3532: LD_VAR 0 3
3536: PPUSH
3537: LD_INT 5
3539: PPUSH
3540: LD_INT 0
3542: PPUSH
3543: CALL_OW 49
// vehs := vehs ^ vehicle ;
3547: LD_ADDR_VAR 0 6
3551: PUSH
3552: LD_VAR 0 6
3556: PUSH
3557: LD_VAR 0 3
3561: ADD
3562: ST_TO_ADDR
// end ;
3563: GO 3481
3565: POP
3566: POP
// RUArmada := vehs ;
3567: LD_ADDR_EXP 16
3571: PUSH
3572: LD_VAR 0 6
3576: ST_TO_ADDR
// SetMark ( [ IsInUnit ( Yashin ) , IsInUnit ( Popov ) , IsInUnit ( Gaydar ) , IsInUnit ( Sevi ) ] , - 6 ) ;
3577: LD_EXP 12
3581: PPUSH
3582: CALL_OW 310
3586: PUSH
3587: LD_EXP 13
3591: PPUSH
3592: CALL_OW 310
3596: PUSH
3597: LD_EXP 14
3601: PPUSH
3602: CALL_OW 310
3606: PUSH
3607: LD_EXP 15
3611: PPUSH
3612: CALL_OW 310
3616: PUSH
3617: EMPTY
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: PPUSH
3623: LD_INT 6
3625: NEG
3626: PPUSH
3627: CALL_OW 242
// end ;
3631: LD_VAR 0 1
3635: RET
// export Bulldozers ; export function PrepareRUBulldozers ; var i , vehicle ; begin
3636: LD_INT 0
3638: PPUSH
3639: PPUSH
3640: PPUSH
// uc_side := 6 ;
3641: LD_ADDR_OWVAR 20
3645: PUSH
3646: LD_INT 6
3648: ST_TO_ADDR
// uc_nation := nation_russian ;
3649: LD_ADDR_OWVAR 21
3653: PUSH
3654: LD_INT 3
3656: ST_TO_ADDR
// Bulldozers := [ ] ;
3657: LD_ADDR_EXP 17
3661: PUSH
3662: EMPTY
3663: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_bulldozer , 100 ) ;
3664: LD_INT 24
3666: PPUSH
3667: LD_INT 3
3669: PPUSH
3670: LD_INT 3
3672: PPUSH
3673: LD_INT 53
3675: PPUSH
3676: LD_INT 100
3678: PPUSH
3679: CALL 16799 0 5
// for i = 1 to 2 do
3683: LD_ADDR_VAR 0 2
3687: PUSH
3688: DOUBLE
3689: LD_INT 1
3691: DEC
3692: ST_TO_ADDR
3693: LD_INT 2
3695: PUSH
3696: FOR_TO
3697: IFFALSE 3742
// begin vehicle := CreateVehicle ;
3699: LD_ADDR_VAR 0 3
3703: PUSH
3704: CALL_OW 45
3708: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3709: LD_VAR 0 3
3713: PPUSH
3714: LD_INT 5
3716: PPUSH
3717: LD_INT 0
3719: PPUSH
3720: CALL_OW 49
// Bulldozers := Bulldozers ^ vehicle ;
3724: LD_ADDR_EXP 17
3728: PUSH
3729: LD_EXP 17
3733: PUSH
3734: LD_VAR 0 3
3738: ADD
3739: ST_TO_ADDR
// end ;
3740: GO 3696
3742: POP
3743: POP
// end ;
3744: LD_VAR 0 1
3748: RET
// export Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ; export function PrepareRUBase ; var i , filter , un ; begin
3749: LD_INT 0
3751: PPUSH
3752: PPUSH
3753: PPUSH
3754: PPUSH
// uc_side := 3 ;
3755: LD_ADDR_OWVAR 20
3759: PUSH
3760: LD_INT 3
3762: ST_TO_ADDR
// uc_nation := nation_russian ;
3763: LD_ADDR_OWVAR 21
3767: PUSH
3768: LD_INT 3
3770: ST_TO_ADDR
// hc_name :=  ;
3771: LD_ADDR_OWVAR 26
3775: PUSH
3776: LD_STRING 
3778: ST_TO_ADDR
// hc_gallery :=  ;
3779: LD_ADDR_OWVAR 33
3783: PUSH
3784: LD_STRING 
3786: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
3787: LD_ADDR_EXP 18
3791: PUSH
3792: LD_STRING Burlak
3794: PPUSH
3795: CALL_OW 25
3799: ST_TO_ADDR
// Gleb := NewCharacter ( Gleb ) ;
3800: LD_ADDR_EXP 19
3804: PUSH
3805: LD_STRING Gleb
3807: PPUSH
3808: CALL_OW 25
3812: ST_TO_ADDR
// Furmanov := NewCharacter ( Furmanov ) ;
3813: LD_ADDR_EXP 20
3817: PUSH
3818: LD_STRING Furmanov
3820: PPUSH
3821: CALL_OW 25
3825: ST_TO_ADDR
// Titov := NewCharacter ( Titov ) ;
3826: LD_ADDR_EXP 21
3830: PUSH
3831: LD_STRING Titov
3833: PPUSH
3834: CALL_OW 25
3838: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
3839: LD_ADDR_EXP 22
3843: PUSH
3844: LD_STRING Scholtze
3846: PPUSH
3847: CALL_OW 25
3851: ST_TO_ADDR
// Dolgov := NewCharacter ( Dolgov ) ;
3852: LD_ADDR_EXP 23
3856: PUSH
3857: LD_STRING Dolgov
3859: PPUSH
3860: CALL_OW 25
3864: ST_TO_ADDR
// Kapitsova := NewCharacter ( Kapitsova ) ;
3865: LD_ADDR_EXP 24
3869: PUSH
3870: LD_STRING Kapitsova
3872: PPUSH
3873: CALL_OW 25
3877: ST_TO_ADDR
// Karamazov := NewCharacter ( Karamazov ) ;
3878: LD_ADDR_EXP 25
3882: PUSH
3883: LD_STRING Karamazov
3885: PPUSH
3886: CALL_OW 25
3890: ST_TO_ADDR
// Kirlenkova := NewCharacter ( Kirlenkova ) ;
3891: LD_ADDR_EXP 26
3895: PUSH
3896: LD_STRING Kirlenkova
3898: PPUSH
3899: CALL_OW 25
3903: ST_TO_ADDR
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
3904: LD_ADDR_EXP 27
3908: PUSH
3909: LD_STRING Kovalyuk
3911: PPUSH
3912: CALL_OW 25
3916: ST_TO_ADDR
// Kozlov := NewCharacter ( Kozlov ) ;
3917: LD_ADDR_EXP 28
3921: PUSH
3922: LD_STRING Kozlov
3924: PPUSH
3925: CALL_OW 25
3929: ST_TO_ADDR
// Kuzmov := NewCharacter ( Kuzmov ) ;
3930: LD_ADDR_EXP 29
3934: PUSH
3935: LD_STRING Kuzmov
3937: PPUSH
3938: CALL_OW 25
3942: ST_TO_ADDR
// Lipshchin := NewCharacter ( Lipshchin ) ;
3943: LD_ADDR_EXP 30
3947: PUSH
3948: LD_STRING Lipshchin
3950: PPUSH
3951: CALL_OW 25
3955: ST_TO_ADDR
// Oblukov := NewCharacter ( Oblukov ) ;
3956: LD_ADDR_EXP 31
3960: PUSH
3961: LD_STRING Oblukov
3963: PPUSH
3964: CALL_OW 25
3968: ST_TO_ADDR
// Xavier2 := NewCharacter ( Xavier2 ) ;
3969: LD_ADDR_EXP 32
3973: PUSH
3974: LD_STRING Xavier2
3976: PPUSH
3977: CALL_OW 25
3981: ST_TO_ADDR
// Gnyevko := NewCharacter ( Gnyevko ) ;
3982: LD_ADDR_EXP 33
3986: PUSH
3987: LD_STRING Gnyevko
3989: PPUSH
3990: CALL_OW 25
3994: ST_TO_ADDR
// Belkov := NewCharacter ( Belkov ) ;
3995: LD_ADDR_EXP 34
3999: PUSH
4000: LD_STRING Belkov
4002: PPUSH
4003: CALL_OW 25
4007: ST_TO_ADDR
// filter := [ Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ] ;
4008: LD_ADDR_VAR 0 3
4012: PUSH
4013: LD_EXP 18
4017: PUSH
4018: LD_EXP 19
4022: PUSH
4023: LD_EXP 20
4027: PUSH
4028: LD_EXP 21
4032: PUSH
4033: LD_EXP 22
4037: PUSH
4038: LD_EXP 23
4042: PUSH
4043: LD_EXP 24
4047: PUSH
4048: LD_EXP 25
4052: PUSH
4053: LD_EXP 26
4057: PUSH
4058: LD_EXP 27
4062: PUSH
4063: LD_EXP 28
4067: PUSH
4068: LD_EXP 29
4072: PUSH
4073: LD_EXP 30
4077: PUSH
4078: LD_EXP 31
4082: PUSH
4083: LD_EXP 32
4087: PUSH
4088: LD_EXP 33
4092: PUSH
4093: LD_EXP 34
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: ST_TO_ADDR
// for i = 1 to filter do
4117: LD_ADDR_VAR 0 2
4121: PUSH
4122: DOUBLE
4123: LD_INT 1
4125: DEC
4126: ST_TO_ADDR
4127: LD_VAR 0 3
4131: PUSH
4132: FOR_TO
4133: IFFALSE 4158
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
4135: LD_VAR 0 3
4139: PUSH
4140: LD_VAR 0 2
4144: ARRAY
4145: PPUSH
4146: LD_INT 6
4148: PPUSH
4149: LD_INT 0
4151: PPUSH
4152: CALL_OW 49
4156: GO 4132
4158: POP
4159: POP
// end ;
4160: LD_VAR 0 1
4164: RET
// export RU_SecondPersonnel ; export function PrepareRUBase_v2 ; var i , filter , un ; begin
4165: LD_INT 0
4167: PPUSH
4168: PPUSH
4169: PPUSH
4170: PPUSH
// uc_side := 3 ;
4171: LD_ADDR_OWVAR 20
4175: PUSH
4176: LD_INT 3
4178: ST_TO_ADDR
// uc_nation := nation_russian ;
4179: LD_ADDR_OWVAR 21
4183: PUSH
4184: LD_INT 3
4186: ST_TO_ADDR
// hc_name :=  ;
4187: LD_ADDR_OWVAR 26
4191: PUSH
4192: LD_STRING 
4194: ST_TO_ADDR
// hc_gallery :=  ;
4195: LD_ADDR_OWVAR 33
4199: PUSH
4200: LD_STRING 
4202: ST_TO_ADDR
// for i = 1 to 8 do
4203: LD_ADDR_VAR 0 2
4207: PUSH
4208: DOUBLE
4209: LD_INT 1
4211: DEC
4212: ST_TO_ADDR
4213: LD_INT 8
4215: PUSH
4216: FOR_TO
4217: IFFALSE 4259
// begin PrepareSoldier ( 0 , game_eskill ) ;
4219: LD_INT 0
4221: PPUSH
4222: LD_EXP 39
4226: PPUSH
4227: CALL_OW 381
// un := CreateHuman ;
4231: LD_ADDR_VAR 0 4
4235: PUSH
4236: CALL_OW 44
4240: ST_TO_ADDR
// filter := filter ^ un ;
4241: LD_ADDR_VAR 0 3
4245: PUSH
4246: LD_VAR 0 3
4250: PUSH
4251: LD_VAR 0 4
4255: ADD
4256: ST_TO_ADDR
// end ;
4257: GO 4216
4259: POP
4260: POP
// for i = 1 to 4 do
4261: LD_ADDR_VAR 0 2
4265: PUSH
4266: DOUBLE
4267: LD_INT 1
4269: DEC
4270: ST_TO_ADDR
4271: LD_INT 4
4273: PUSH
4274: FOR_TO
4275: IFFALSE 4317
// begin PrepareEngineer ( 0 , game_eskill ) ;
4277: LD_INT 0
4279: PPUSH
4280: LD_EXP 39
4284: PPUSH
4285: CALL_OW 382
// un := CreateHuman ;
4289: LD_ADDR_VAR 0 4
4293: PUSH
4294: CALL_OW 44
4298: ST_TO_ADDR
// filter := filter ^ un ;
4299: LD_ADDR_VAR 0 3
4303: PUSH
4304: LD_VAR 0 3
4308: PUSH
4309: LD_VAR 0 4
4313: ADD
4314: ST_TO_ADDR
// end ;
4315: GO 4274
4317: POP
4318: POP
// for i = 1 to 6 do
4319: LD_ADDR_VAR 0 2
4323: PUSH
4324: DOUBLE
4325: LD_INT 1
4327: DEC
4328: ST_TO_ADDR
4329: LD_INT 6
4331: PUSH
4332: FOR_TO
4333: IFFALSE 4375
// begin PrepareMechanic ( 0 , game_eskill ) ;
4335: LD_INT 0
4337: PPUSH
4338: LD_EXP 39
4342: PPUSH
4343: CALL_OW 383
// un := CreateHuman ;
4347: LD_ADDR_VAR 0 4
4351: PUSH
4352: CALL_OW 44
4356: ST_TO_ADDR
// filter := filter ^ un ;
4357: LD_ADDR_VAR 0 3
4361: PUSH
4362: LD_VAR 0 3
4366: PUSH
4367: LD_VAR 0 4
4371: ADD
4372: ST_TO_ADDR
// end ;
4373: GO 4332
4375: POP
4376: POP
// for i = 1 to 4 do
4377: LD_ADDR_VAR 0 2
4381: PUSH
4382: DOUBLE
4383: LD_INT 1
4385: DEC
4386: ST_TO_ADDR
4387: LD_INT 4
4389: PUSH
4390: FOR_TO
4391: IFFALSE 4433
// begin PrepareScientist ( 0 , game_eskill ) ;
4393: LD_INT 0
4395: PPUSH
4396: LD_EXP 39
4400: PPUSH
4401: CALL_OW 384
// un := CreateHuman ;
4405: LD_ADDR_VAR 0 4
4409: PUSH
4410: CALL_OW 44
4414: ST_TO_ADDR
// filter := filter ^ un ;
4415: LD_ADDR_VAR 0 3
4419: PUSH
4420: LD_VAR 0 3
4424: PUSH
4425: LD_VAR 0 4
4429: ADD
4430: ST_TO_ADDR
// end ;
4431: GO 4390
4433: POP
4434: POP
// for i = 1 to filter do
4435: LD_ADDR_VAR 0 2
4439: PUSH
4440: DOUBLE
4441: LD_INT 1
4443: DEC
4444: ST_TO_ADDR
4445: LD_VAR 0 3
4449: PUSH
4450: FOR_TO
4451: IFFALSE 4476
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
4453: LD_VAR 0 3
4457: PUSH
4458: LD_VAR 0 2
4462: ARRAY
4463: PPUSH
4464: LD_INT 6
4466: PPUSH
4467: LD_INT 0
4469: PPUSH
4470: CALL_OW 49
4474: GO 4450
4476: POP
4477: POP
// RU_SecondPersonnel := filter ;
4478: LD_ADDR_EXP 35
4482: PUSH
4483: LD_VAR 0 3
4487: ST_TO_ADDR
// end ;
4488: LD_VAR 0 1
4492: RET
// export JMM ; export function JMMReinforcement ; var i , soldiers , un , vehs , vehicle , mechs ; begin
4493: LD_INT 0
4495: PPUSH
4496: PPUSH
4497: PPUSH
4498: PPUSH
4499: PPUSH
4500: PPUSH
4501: PPUSH
// uc_side := 1 ;
4502: LD_ADDR_OWVAR 20
4506: PUSH
4507: LD_INT 1
4509: ST_TO_ADDR
// uc_nation := nation_american ;
4510: LD_ADDR_OWVAR 21
4514: PUSH
4515: LD_INT 1
4517: ST_TO_ADDR
// JMM := NewCharacter ( JMM ) ;
4518: LD_ADDR_EXP 36
4522: PUSH
4523: LD_STRING JMM
4525: PPUSH
4526: CALL_OW 25
4530: ST_TO_ADDR
// PlaceUnitArea ( JMM , JMMArrivalArea , false ) ;
4531: LD_EXP 36
4535: PPUSH
4536: LD_INT 7
4538: PPUSH
4539: LD_INT 0
4541: PPUSH
4542: CALL_OW 49
// mechs := [ ] ;
4546: LD_ADDR_VAR 0 7
4550: PUSH
4551: EMPTY
4552: ST_TO_ADDR
// for i = 1 to 4 do
4553: LD_ADDR_VAR 0 2
4557: PUSH
4558: DOUBLE
4559: LD_INT 1
4561: DEC
4562: ST_TO_ADDR
4563: LD_INT 4
4565: PUSH
4566: FOR_TO
4567: IFFALSE 4628
// begin PrepareSoldier ( 0 , game_skill + 1 ) ;
4569: LD_INT 0
4571: PPUSH
4572: LD_EXP 38
4576: PUSH
4577: LD_INT 1
4579: PLUS
4580: PPUSH
4581: CALL_OW 381
// un := CreateHuman ;
4585: LD_ADDR_VAR 0 4
4589: PUSH
4590: CALL_OW 44
4594: ST_TO_ADDR
// soldiers := soldiers ^ un ;
4595: LD_ADDR_VAR 0 3
4599: PUSH
4600: LD_VAR 0 3
4604: PUSH
4605: LD_VAR 0 4
4609: ADD
4610: ST_TO_ADDR
// PlaceUnitArea ( un , JMMArrivalArea , false ) ;
4611: LD_VAR 0 4
4615: PPUSH
4616: LD_INT 7
4618: PPUSH
4619: LD_INT 0
4621: PPUSH
4622: CALL_OW 49
// end ;
4626: GO 4566
4628: POP
4629: POP
// for i = 1 to 7 do
4630: LD_ADDR_VAR 0 2
4634: PUSH
4635: DOUBLE
4636: LD_INT 1
4638: DEC
4639: ST_TO_ADDR
4640: LD_INT 7
4642: PUSH
4643: FOR_TO
4644: IFFALSE 4690
// begin PrepareMechanic ( 0 , game_skill + 1 ) ;
4646: LD_INT 0
4648: PPUSH
4649: LD_EXP 38
4653: PUSH
4654: LD_INT 1
4656: PLUS
4657: PPUSH
4658: CALL_OW 383
// un := CreateHuman ;
4662: LD_ADDR_VAR 0 4
4666: PUSH
4667: CALL_OW 44
4671: ST_TO_ADDR
// mechs := mechs ^ un ;
4672: LD_ADDR_VAR 0 7
4676: PUSH
4677: LD_VAR 0 7
4681: PUSH
4682: LD_VAR 0 4
4686: ADD
4687: ST_TO_ADDR
// end ;
4688: GO 4643
4690: POP
4691: POP
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , us_double_gun , 100 ) ;
4692: LD_INT 3
4694: PPUSH
4695: LD_INT 3
4697: PPUSH
4698: LD_INT 1
4700: PPUSH
4701: LD_INT 5
4703: PPUSH
4704: LD_INT 100
4706: PPUSH
4707: CALL 16799 0 5
// for i = 1 to 7 do
4711: LD_ADDR_VAR 0 2
4715: PUSH
4716: DOUBLE
4717: LD_INT 1
4719: DEC
4720: ST_TO_ADDR
4721: LD_INT 7
4723: PUSH
4724: FOR_TO
4725: IFFALSE 4808
// begin vehicle := CreateVehicle ;
4727: LD_ADDR_VAR 0 6
4731: PUSH
4732: CALL_OW 45
4736: ST_TO_ADDR
// PlaceHumanInUnit ( mechs [ 1 ] , vehicle ) ;
4737: LD_VAR 0 7
4741: PUSH
4742: LD_INT 1
4744: ARRAY
4745: PPUSH
4746: LD_VAR 0 6
4750: PPUSH
4751: CALL_OW 52
// mechs := mechs diff mechs [ 1 ] ;
4755: LD_ADDR_VAR 0 7
4759: PUSH
4760: LD_VAR 0 7
4764: PUSH
4765: LD_VAR 0 7
4769: PUSH
4770: LD_INT 1
4772: ARRAY
4773: DIFF
4774: ST_TO_ADDR
// PlaceUnitArea ( vehicle , JMMArrivalArea , false ) ;
4775: LD_VAR 0 6
4779: PPUSH
4780: LD_INT 7
4782: PPUSH
4783: LD_INT 0
4785: PPUSH
4786: CALL_OW 49
// vehs := vehs ^ vehicle ;
4790: LD_ADDR_VAR 0 5
4794: PUSH
4795: LD_VAR 0 5
4799: PUSH
4800: LD_VAR 0 6
4804: ADD
4805: ST_TO_ADDR
// end ;
4806: GO 4724
4808: POP
4809: POP
// end ; end_of_file
4810: LD_VAR 0 1
4814: RET
// export game_diff ; export game_skill , game_eskill ; export jmmArrival , ruArrival ; export function GameType ; begin
4815: LD_INT 0
4817: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
4818: LD_ADDR_OWVAR 67
4822: PUSH
4823: LD_INT 0
4825: PPUSH
4826: CALL_OW 426
4830: ST_TO_ADDR
// game_diff := Difficulty ;
4831: LD_ADDR_EXP 37
4835: PUSH
4836: LD_OWVAR 67
4840: ST_TO_ADDR
// game_skill := [ 8 , 7 , 6 ] [ game_diff ] ;
4841: LD_ADDR_EXP 38
4845: PUSH
4846: LD_INT 8
4848: PUSH
4849: LD_INT 7
4851: PUSH
4852: LD_INT 6
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: LIST
4859: PUSH
4860: LD_EXP 37
4864: ARRAY
4865: ST_TO_ADDR
// game_eskill := [ 6 , 7 , 8 ] [ game_diff ] ;
4866: LD_ADDR_EXP 39
4870: PUSH
4871: LD_INT 6
4873: PUSH
4874: LD_INT 7
4876: PUSH
4877: LD_INT 8
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: LIST
4884: PUSH
4885: LD_EXP 37
4889: ARRAY
4890: ST_TO_ADDR
// ruArrival := [ 20 20$00 , 15 15$00 , 10 10$00 ] [ game_diff ] ;
4891: LD_ADDR_EXP 41
4895: PUSH
4896: LD_INT 42000
4898: PUSH
4899: LD_INT 31500
4901: PUSH
4902: LD_INT 21000
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: LIST
4909: PUSH
4910: LD_EXP 37
4914: ARRAY
4915: ST_TO_ADDR
// jmmArrival := [ 40 40$00 , 50 50$00 , 60 60$00 ] [ game_diff ] ;
4916: LD_ADDR_EXP 40
4920: PUSH
4921: LD_INT 84000
4923: PUSH
4924: LD_INT 105000
4926: PUSH
4927: LD_INT 126000
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: LIST
4934: PUSH
4935: LD_EXP 37
4939: ARRAY
4940: ST_TO_ADDR
// end ; end_of_file
4941: LD_VAR 0 1
4945: RET
// export function CustomEvent ( event ) ; begin
4946: LD_INT 0
4948: PPUSH
// end ;
4949: LD_VAR 0 2
4953: RET
// export function CustomInitMacro ( ) ; begin
4954: LD_INT 0
4956: PPUSH
// MC_SetScanArea ( 1 , RU_Base_Area ) ;
4957: LD_INT 1
4959: PPUSH
4960: LD_INT 3
4962: PPUSH
4963: CALL 77212 0 2
// MC_SetParkingArea ( 1 , RU_Base_Parking ) ;
4967: LD_INT 1
4969: PPUSH
4970: LD_INT 4
4972: PPUSH
4973: CALL 77156 0 2
// MC_SetDepositsXY ( 1 , [ [ 136 , 130 , 0 ] , [ 145 , 123 , 0 ] , ] ) ;
4977: LD_INT 1
4979: PPUSH
4980: LD_INT 136
4982: PUSH
4983: LD_INT 130
4985: PUSH
4986: LD_INT 0
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: LIST
4993: PUSH
4994: LD_INT 145
4996: PUSH
4997: LD_INT 123
4999: PUSH
5000: LD_INT 0
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: LIST
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PPUSH
5012: CALL 76278 0 2
// MC_SetAllowedTurretWeapons ( 1 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
5016: LD_INT 1
5018: PPUSH
5019: LD_INT 43
5021: PUSH
5022: LD_INT 46
5024: PUSH
5025: LD_INT 45
5027: PUSH
5028: EMPTY
5029: LIST
5030: LIST
5031: LIST
5032: PPUSH
5033: CALL 77044 0 2
// MC_SetCratesArea ( 1 , RU_Base_Area ) ;
5037: LD_INT 1
5039: PPUSH
5040: LD_INT 3
5042: PPUSH
5043: CALL 76726 0 2
// MC_SetTame ( 1 , RU_Base_Area ) ;
5047: LD_INT 1
5049: PPUSH
5050: LD_INT 3
5052: PPUSH
5053: CALL 76457 0 2
// MC_SetDefenderLimit ( 1 , 8 ) ;
5057: LD_INT 1
5059: PPUSH
5060: LD_INT 8
5062: PPUSH
5063: CALL 76139 0 2
// MC_SetProduceList ( 1 , [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] ] ) ;
5067: LD_INT 1
5069: PPUSH
5070: LD_INT 22
5072: PUSH
5073: LD_INT 1
5075: PUSH
5076: LD_INT 3
5078: PUSH
5079: LD_INT 43
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: PUSH
5088: LD_INT 22
5090: PUSH
5091: LD_INT 1
5093: PUSH
5094: LD_INT 3
5096: PUSH
5097: LD_INT 44
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: PUSH
5106: LD_INT 22
5108: PUSH
5109: LD_INT 1
5111: PUSH
5112: LD_INT 3
5114: PUSH
5115: LD_INT 45
5117: PUSH
5118: EMPTY
5119: LIST
5120: LIST
5121: LIST
5122: LIST
5123: PUSH
5124: LD_INT 24
5126: PUSH
5127: LD_INT 1
5129: PUSH
5130: LD_INT 3
5132: PUSH
5133: LD_INT 43
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: PUSH
5142: LD_INT 24
5144: PUSH
5145: LD_INT 1
5147: PUSH
5148: LD_INT 3
5150: PUSH
5151: LD_INT 43
5153: PUSH
5154: EMPTY
5155: LIST
5156: LIST
5157: LIST
5158: LIST
5159: PUSH
5160: LD_INT 24
5162: PUSH
5163: LD_INT 1
5165: PUSH
5166: LD_INT 3
5168: PUSH
5169: LD_INT 46
5171: PUSH
5172: EMPTY
5173: LIST
5174: LIST
5175: LIST
5176: LIST
5177: PUSH
5178: LD_INT 22
5180: PUSH
5181: LD_INT 1
5183: PUSH
5184: LD_INT 3
5186: PUSH
5187: LD_INT 43
5189: PUSH
5190: EMPTY
5191: LIST
5192: LIST
5193: LIST
5194: LIST
5195: PUSH
5196: LD_INT 22
5198: PUSH
5199: LD_INT 1
5201: PUSH
5202: LD_INT 3
5204: PUSH
5205: LD_INT 44
5207: PUSH
5208: EMPTY
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: PUSH
5214: EMPTY
5215: LIST
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: PPUSH
5224: CALL 75954 0 2
// MC_SetBuildingList ( 1 , [ [ b_depot , 127 , 125 , 5 ] , [ b_lab , 124 , 132 , 0 ] , [ b_oil_mine , 136 , 130 , 1 ] , [ b_armoury , 118 , 114 , 2 ] , [ b_oil_mine , 145 , 123 , 1 ] , [ b_oil_power , 150 , 135 , 1 ] , [ b_oil_power , 140 , 134 , 2 ] , [ b_oil_power , 137 , 121 , 5 ] , [ b_workshop , 155 , 130 , 0 ] , [ b_bunker , 155 , 130 , 0 ] , [ b_bunker , 130 , 114 , 3 ] , [ b_bunker , 142 , 115 , 3 ] , [ b_bunker , 153 , 120 , 3 ] , ] ) ;
5228: LD_INT 1
5230: PPUSH
5231: LD_INT 0
5233: PUSH
5234: LD_INT 127
5236: PUSH
5237: LD_INT 125
5239: PUSH
5240: LD_INT 5
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: LIST
5247: LIST
5248: PUSH
5249: LD_INT 6
5251: PUSH
5252: LD_INT 124
5254: PUSH
5255: LD_INT 132
5257: PUSH
5258: LD_INT 0
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: LIST
5265: LIST
5266: PUSH
5267: LD_INT 29
5269: PUSH
5270: LD_INT 136
5272: PUSH
5273: LD_INT 130
5275: PUSH
5276: LD_INT 1
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: LIST
5283: LIST
5284: PUSH
5285: LD_INT 4
5287: PUSH
5288: LD_INT 118
5290: PUSH
5291: LD_INT 114
5293: PUSH
5294: LD_INT 2
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: PUSH
5303: LD_INT 29
5305: PUSH
5306: LD_INT 145
5308: PUSH
5309: LD_INT 123
5311: PUSH
5312: LD_INT 1
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: PUSH
5321: LD_INT 26
5323: PUSH
5324: LD_INT 150
5326: PUSH
5327: LD_INT 135
5329: PUSH
5330: LD_INT 1
5332: PUSH
5333: EMPTY
5334: LIST
5335: LIST
5336: LIST
5337: LIST
5338: PUSH
5339: LD_INT 26
5341: PUSH
5342: LD_INT 140
5344: PUSH
5345: LD_INT 134
5347: PUSH
5348: LD_INT 2
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: LIST
5355: LIST
5356: PUSH
5357: LD_INT 26
5359: PUSH
5360: LD_INT 137
5362: PUSH
5363: LD_INT 121
5365: PUSH
5366: LD_INT 5
5368: PUSH
5369: EMPTY
5370: LIST
5371: LIST
5372: LIST
5373: LIST
5374: PUSH
5375: LD_INT 2
5377: PUSH
5378: LD_INT 155
5380: PUSH
5381: LD_INT 130
5383: PUSH
5384: LD_INT 0
5386: PUSH
5387: EMPTY
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: PUSH
5393: LD_INT 32
5395: PUSH
5396: LD_INT 155
5398: PUSH
5399: LD_INT 130
5401: PUSH
5402: LD_INT 0
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: LIST
5409: LIST
5410: PUSH
5411: LD_INT 32
5413: PUSH
5414: LD_INT 130
5416: PUSH
5417: LD_INT 114
5419: PUSH
5420: LD_INT 3
5422: PUSH
5423: EMPTY
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: PUSH
5429: LD_INT 32
5431: PUSH
5432: LD_INT 142
5434: PUSH
5435: LD_INT 115
5437: PUSH
5438: LD_INT 3
5440: PUSH
5441: EMPTY
5442: LIST
5443: LIST
5444: LIST
5445: LIST
5446: PUSH
5447: LD_INT 32
5449: PUSH
5450: LD_INT 153
5452: PUSH
5453: LD_INT 120
5455: PUSH
5456: LD_INT 3
5458: PUSH
5459: EMPTY
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: LIST
5469: LIST
5470: LIST
5471: LIST
5472: LIST
5473: LIST
5474: LIST
5475: LIST
5476: LIST
5477: LIST
5478: LIST
5479: PPUSH
5480: CALL 75846 0 2
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_computer ] ) ;
5484: LD_INT 1
5486: PPUSH
5487: LD_INT 10
5489: PUSH
5490: LD_INT 12
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: PPUSH
5497: CALL 76633 0 2
// MC_SetFactoryExtension ( 1 , 155 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
5501: LD_INT 1
5503: PPUSH
5504: LD_INT 155
5506: PPUSH
5507: LD_INT 130
5509: PPUSH
5510: LD_INT 0
5512: PPUSH
5513: LD_INT 24
5515: PUSH
5516: LD_INT 16
5518: PUSH
5519: LD_INT 17
5521: PUSH
5522: LD_INT 18
5524: PUSH
5525: LD_INT 21
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: LIST
5532: LIST
5533: LIST
5534: PPUSH
5535: CALL 76838 0 5
// MC_SetScanArea ( 2 , RU_Base_Area ) ;
5539: LD_INT 2
5541: PPUSH
5542: LD_INT 3
5544: PPUSH
5545: CALL 77212 0 2
// MC_SetParkingArea ( 2 , RU_Base_Parking ) ;
5549: LD_INT 2
5551: PPUSH
5552: LD_INT 4
5554: PPUSH
5555: CALL 77156 0 2
// MC_SetDepositsXY ( 2 , [ [ 84 , 125 , 1 ] , ] ) ;
5559: LD_INT 2
5561: PPUSH
5562: LD_INT 84
5564: PUSH
5565: LD_INT 125
5567: PUSH
5568: LD_INT 1
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: LIST
5575: PUSH
5576: EMPTY
5577: LIST
5578: PPUSH
5579: CALL 76278 0 2
// MC_SetAllowedTurretWeapons ( 2 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
5583: LD_INT 2
5585: PPUSH
5586: LD_INT 43
5588: PUSH
5589: LD_INT 46
5591: PUSH
5592: LD_INT 45
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: LIST
5599: PPUSH
5600: CALL 77044 0 2
// MC_SetCratesArea ( 2 , RU_Base_Area ) ;
5604: LD_INT 2
5606: PPUSH
5607: LD_INT 3
5609: PPUSH
5610: CALL 76726 0 2
// MC_SetTame ( 2 , RU_Base_Area ) ;
5614: LD_INT 2
5616: PPUSH
5617: LD_INT 3
5619: PPUSH
5620: CALL 76457 0 2
// MC_SetDefenderLimit ( 2 , 8 ) ;
5624: LD_INT 2
5626: PPUSH
5627: LD_INT 8
5629: PPUSH
5630: CALL 76139 0 2
// MC_SetProduceList ( 2 , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] ] ) ;
5634: LD_INT 2
5636: PPUSH
5637: LD_INT 22
5639: PUSH
5640: LD_INT 3
5642: PUSH
5643: LD_INT 3
5645: PUSH
5646: LD_INT 43
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: LIST
5653: LIST
5654: PUSH
5655: LD_INT 22
5657: PUSH
5658: LD_INT 3
5660: PUSH
5661: LD_INT 3
5663: PUSH
5664: LD_INT 44
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: LIST
5671: LIST
5672: PUSH
5673: LD_INT 22
5675: PUSH
5676: LD_INT 3
5678: PUSH
5679: LD_INT 3
5681: PUSH
5682: LD_INT 45
5684: PUSH
5685: EMPTY
5686: LIST
5687: LIST
5688: LIST
5689: LIST
5690: PUSH
5691: LD_INT 24
5693: PUSH
5694: LD_INT 3
5696: PUSH
5697: LD_INT 3
5699: PUSH
5700: LD_INT 43
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: PUSH
5709: LD_INT 24
5711: PUSH
5712: LD_INT 3
5714: PUSH
5715: LD_INT 3
5717: PUSH
5718: LD_INT 43
5720: PUSH
5721: EMPTY
5722: LIST
5723: LIST
5724: LIST
5725: LIST
5726: PUSH
5727: LD_INT 24
5729: PUSH
5730: LD_INT 3
5732: PUSH
5733: LD_INT 3
5735: PUSH
5736: LD_INT 46
5738: PUSH
5739: EMPTY
5740: LIST
5741: LIST
5742: LIST
5743: LIST
5744: PUSH
5745: LD_INT 22
5747: PUSH
5748: LD_INT 3
5750: PUSH
5751: LD_INT 3
5753: PUSH
5754: LD_INT 43
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: LIST
5761: LIST
5762: PUSH
5763: LD_INT 22
5765: PUSH
5766: LD_INT 3
5768: PUSH
5769: LD_INT 3
5771: PUSH
5772: LD_INT 44
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: LIST
5779: LIST
5780: PUSH
5781: EMPTY
5782: LIST
5783: LIST
5784: LIST
5785: LIST
5786: LIST
5787: LIST
5788: LIST
5789: LIST
5790: PPUSH
5791: CALL 75954 0 2
// MC_SetBuildingList ( 2 , [ [ b_depot , 96 , 125 , 0 ] , [ b_lab , 74 , 122 , 1 ] , [ b_siberite_mine , 84 , 125 , 1 ] , [ b_siberite_power , 86 , 128 , 1 ] , [ b_siberite_power , 85 , 130 , 2 ] , [ b_siberite_power , 88 , 132 , 5 ] , [ b_workshop , 106 , 130 , 0 ] , [ b_armoury , 99 , 114 , 3 ] , [ b_bunker , 72 , 112 , 2 ] , [ b_bunker , 78 , 110 , 3 ] , [ b_bunker , 84 , 110 , 2 ] , [ b_bunker , 105 , 117 , 3 ] , ] ) ;
5795: LD_INT 2
5797: PPUSH
5798: LD_INT 0
5800: PUSH
5801: LD_INT 96
5803: PUSH
5804: LD_INT 125
5806: PUSH
5807: LD_INT 0
5809: PUSH
5810: EMPTY
5811: LIST
5812: LIST
5813: LIST
5814: LIST
5815: PUSH
5816: LD_INT 6
5818: PUSH
5819: LD_INT 74
5821: PUSH
5822: LD_INT 122
5824: PUSH
5825: LD_INT 1
5827: PUSH
5828: EMPTY
5829: LIST
5830: LIST
5831: LIST
5832: LIST
5833: PUSH
5834: LD_INT 30
5836: PUSH
5837: LD_INT 84
5839: PUSH
5840: LD_INT 125
5842: PUSH
5843: LD_INT 1
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: LIST
5850: LIST
5851: PUSH
5852: LD_INT 28
5854: PUSH
5855: LD_INT 86
5857: PUSH
5858: LD_INT 128
5860: PUSH
5861: LD_INT 1
5863: PUSH
5864: EMPTY
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: PUSH
5870: LD_INT 28
5872: PUSH
5873: LD_INT 85
5875: PUSH
5876: LD_INT 130
5878: PUSH
5879: LD_INT 2
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: PUSH
5888: LD_INT 28
5890: PUSH
5891: LD_INT 88
5893: PUSH
5894: LD_INT 132
5896: PUSH
5897: LD_INT 5
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: PUSH
5906: LD_INT 2
5908: PUSH
5909: LD_INT 106
5911: PUSH
5912: LD_INT 130
5914: PUSH
5915: LD_INT 0
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: PUSH
5924: LD_INT 4
5926: PUSH
5927: LD_INT 99
5929: PUSH
5930: LD_INT 114
5932: PUSH
5933: LD_INT 3
5935: PUSH
5936: EMPTY
5937: LIST
5938: LIST
5939: LIST
5940: LIST
5941: PUSH
5942: LD_INT 32
5944: PUSH
5945: LD_INT 72
5947: PUSH
5948: LD_INT 112
5950: PUSH
5951: LD_INT 2
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: LIST
5958: LIST
5959: PUSH
5960: LD_INT 32
5962: PUSH
5963: LD_INT 78
5965: PUSH
5966: LD_INT 110
5968: PUSH
5969: LD_INT 3
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: PUSH
5978: LD_INT 32
5980: PUSH
5981: LD_INT 84
5983: PUSH
5984: LD_INT 110
5986: PUSH
5987: LD_INT 2
5989: PUSH
5990: EMPTY
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: PUSH
5996: LD_INT 32
5998: PUSH
5999: LD_INT 105
6001: PUSH
6002: LD_INT 117
6004: PUSH
6005: LD_INT 3
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: PUSH
6014: EMPTY
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: LIST
6027: PPUSH
6028: CALL 75846 0 2
// MC_SetLabKind ( 2 , [ b_lab_spacetime , b_lab_siberium ] ) ;
6032: LD_INT 2
6034: PPUSH
6035: LD_INT 14
6037: PUSH
6038: LD_INT 11
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: PPUSH
6045: CALL 76633 0 2
// MC_SetFactoryExtension ( 2 , 106 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
6049: LD_INT 2
6051: PPUSH
6052: LD_INT 106
6054: PPUSH
6055: LD_INT 130
6057: PPUSH
6058: LD_INT 0
6060: PPUSH
6061: LD_INT 24
6063: PUSH
6064: LD_INT 16
6066: PUSH
6067: LD_INT 17
6069: PUSH
6070: LD_INT 18
6072: PUSH
6073: LD_INT 21
6075: PUSH
6076: EMPTY
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: PPUSH
6083: CALL 76838 0 5
// end ;
6087: LD_VAR 0 1
6091: RET
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
6092: LD_INT 22
6094: PUSH
6095: LD_INT 3
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: PUSH
6102: LD_INT 30
6104: PUSH
6105: LD_INT 3
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: PPUSH
6116: CALL_OW 69
6120: IFFALSE 6976
6122: GO 6124
6124: DISABLE
6125: LD_INT 0
6127: PPUSH
6128: PPUSH
6129: PPUSH
6130: PPUSH
6131: PPUSH
6132: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
6133: LD_INT 6300
6135: PUSH
6136: LD_INT 4200
6138: PUSH
6139: LD_INT 2100
6141: PUSH
6142: EMPTY
6143: LIST
6144: LIST
6145: LIST
6146: PUSH
6147: LD_OWVAR 67
6151: ARRAY
6152: PPUSH
6153: CALL_OW 67
// base := 2 ;
6157: LD_ADDR_VAR 0 2
6161: PUSH
6162: LD_INT 2
6164: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
6165: LD_INT 22
6167: PUSH
6168: LD_INT 3
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PUSH
6175: LD_INT 30
6177: PUSH
6178: LD_INT 3
6180: PUSH
6181: EMPTY
6182: LIST
6183: LIST
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: PPUSH
6189: CALL_OW 69
6193: NOT
6194: IFFALSE 6198
// continue ;
6196: GO 6133
// case Rand ( 1 , 3 ) of 1 :
6198: LD_INT 1
6200: PPUSH
6201: LD_INT 3
6203: PPUSH
6204: CALL_OW 12
6208: PUSH
6209: LD_INT 1
6211: DOUBLE
6212: EQUAL
6213: IFTRUE 6217
6215: GO 6393
6217: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6218: LD_ADDR_VAR 0 3
6222: PUSH
6223: LD_INT 22
6225: PUSH
6226: LD_INT 3
6228: PUSH
6229: LD_INT 3
6231: PUSH
6232: LD_INT 43
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: PUSH
6241: LD_INT 24
6243: PUSH
6244: LD_INT 3
6246: PUSH
6247: LD_INT 3
6249: PUSH
6250: LD_INT 46
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: PUSH
6259: LD_INT 24
6261: PUSH
6262: LD_INT 3
6264: PUSH
6265: LD_INT 3
6267: PUSH
6268: LD_INT 43
6270: PUSH
6271: EMPTY
6272: LIST
6273: LIST
6274: LIST
6275: LIST
6276: PUSH
6277: LD_INT 24
6279: PUSH
6280: LD_INT 3
6282: PUSH
6283: LD_INT 3
6285: PUSH
6286: LD_INT 46
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: PUSH
6295: LD_INT 22
6297: PUSH
6298: LD_INT 3
6300: PUSH
6301: LD_INT 3
6303: PUSH
6304: LD_INT 45
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: PUSH
6313: LD_INT 22
6315: PUSH
6316: LD_INT 3
6318: PUSH
6319: LD_INT 3
6321: PUSH
6322: LD_INT 43
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: LIST
6329: LIST
6330: PUSH
6331: LD_INT 24
6333: PUSH
6334: LD_INT 3
6336: PUSH
6337: LD_INT 3
6339: PUSH
6340: LD_INT 46
6342: PUSH
6343: EMPTY
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: PUSH
6349: LD_INT 22
6351: PUSH
6352: LD_INT 3
6354: PUSH
6355: LD_INT 3
6357: PUSH
6358: LD_INT 45
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
6377: LD_VAR 0 2
6381: PPUSH
6382: LD_VAR 0 3
6386: PPUSH
6387: CALL 76002 0 2
// end ; 2 :
6391: GO 6724
6393: LD_INT 2
6395: DOUBLE
6396: EQUAL
6397: IFTRUE 6401
6399: GO 6539
6401: POP
// begin tmp := [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6402: LD_ADDR_VAR 0 3
6406: PUSH
6407: LD_INT 24
6409: PUSH
6410: LD_INT 3
6412: PUSH
6413: LD_INT 3
6415: PUSH
6416: LD_INT 43
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: PUSH
6425: LD_INT 24
6427: PUSH
6428: LD_INT 3
6430: PUSH
6431: LD_INT 3
6433: PUSH
6434: LD_INT 46
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: PUSH
6443: LD_INT 24
6445: PUSH
6446: LD_INT 3
6448: PUSH
6449: LD_INT 3
6451: PUSH
6452: LD_INT 43
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: PUSH
6461: LD_INT 24
6463: PUSH
6464: LD_INT 3
6466: PUSH
6467: LD_INT 3
6469: PUSH
6470: LD_INT 46
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: LIST
6477: LIST
6478: PUSH
6479: LD_INT 22
6481: PUSH
6482: LD_INT 3
6484: PUSH
6485: LD_INT 3
6487: PUSH
6488: LD_INT 45
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: LIST
6495: LIST
6496: PUSH
6497: LD_INT 22
6499: PUSH
6500: LD_INT 3
6502: PUSH
6503: LD_INT 3
6505: PUSH
6506: LD_INT 45
6508: PUSH
6509: EMPTY
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
6523: LD_VAR 0 2
6527: PPUSH
6528: LD_VAR 0 3
6532: PPUSH
6533: CALL 76002 0 2
// end ; 3 :
6537: GO 6724
6539: LD_INT 3
6541: DOUBLE
6542: EQUAL
6543: IFTRUE 6547
6545: GO 6723
6547: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6548: LD_ADDR_VAR 0 3
6552: PUSH
6553: LD_INT 22
6555: PUSH
6556: LD_INT 3
6558: PUSH
6559: LD_INT 3
6561: PUSH
6562: LD_INT 43
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: PUSH
6571: LD_INT 24
6573: PUSH
6574: LD_INT 3
6576: PUSH
6577: LD_INT 3
6579: PUSH
6580: LD_INT 46
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 22
6591: PUSH
6592: LD_INT 3
6594: PUSH
6595: LD_INT 3
6597: PUSH
6598: LD_INT 43
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: PUSH
6607: LD_INT 24
6609: PUSH
6610: LD_INT 3
6612: PUSH
6613: LD_INT 3
6615: PUSH
6616: LD_INT 46
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: PUSH
6625: LD_INT 22
6627: PUSH
6628: LD_INT 3
6630: PUSH
6631: LD_INT 3
6633: PUSH
6634: LD_INT 45
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: PUSH
6643: LD_INT 22
6645: PUSH
6646: LD_INT 3
6648: PUSH
6649: LD_INT 3
6651: PUSH
6652: LD_INT 43
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: PUSH
6661: LD_INT 24
6663: PUSH
6664: LD_INT 3
6666: PUSH
6667: LD_INT 3
6669: PUSH
6670: LD_INT 46
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: PUSH
6679: LD_INT 22
6681: PUSH
6682: LD_INT 3
6684: PUSH
6685: LD_INT 3
6687: PUSH
6688: LD_INT 45
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: PUSH
6697: EMPTY
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
6707: LD_VAR 0 2
6711: PPUSH
6712: LD_VAR 0 3
6716: PPUSH
6717: CALL 76002 0 2
// end ; end ;
6721: GO 6724
6723: POP
// repeat wait ( 0 0$1 ) ;
6724: LD_INT 35
6726: PPUSH
6727: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
6731: LD_VAR 0 2
6735: PPUSH
6736: CALL 76350 0 1
6740: PUSH
6741: LD_INT 0
6743: EQUAL
6744: IFFALSE 6724
// wait ( 0 0$30 ) ;
6746: LD_INT 1050
6748: PPUSH
6749: CALL_OW 67
// _target := [ [ 86 , 77 ] , [ 63 , 38 ] ] ;
6753: LD_ADDR_VAR 0 5
6757: PUSH
6758: LD_INT 86
6760: PUSH
6761: LD_INT 77
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: PUSH
6768: LD_INT 63
6770: PUSH
6771: LD_INT 38
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
6782: LD_ADDR_VAR 0 4
6786: PUSH
6787: LD_INT 0
6789: PUSH
6790: LD_INT 0
6792: PUSH
6793: LD_INT 0
6795: PUSH
6796: LD_INT 1
6798: PUSH
6799: LD_INT 0
6801: PUSH
6802: LD_INT 0
6804: PUSH
6805: LD_INT 0
6807: PUSH
6808: LD_INT 0
6810: PUSH
6811: LD_INT 1
6813: PUSH
6814: LD_INT 0
6816: PUSH
6817: EMPTY
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
6829: LD_ADDR_VAR 0 6
6833: PUSH
6834: LD_EXP 71
6838: PUSH
6839: LD_VAR 0 2
6843: ARRAY
6844: PUSH
6845: LD_EXP 74
6849: PUSH
6850: LD_VAR 0 2
6854: ARRAY
6855: DIFF
6856: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
6857: LD_ADDR_EXP 71
6861: PUSH
6862: LD_EXP 71
6866: PPUSH
6867: LD_VAR 0 2
6871: PPUSH
6872: LD_EXP 71
6876: PUSH
6877: LD_VAR 0 2
6881: ARRAY
6882: PUSH
6883: LD_VAR 0 6
6887: DIFF
6888: PPUSH
6889: CALL_OW 1
6893: ST_TO_ADDR
// if not attackers then
6894: LD_VAR 0 6
6898: NOT
6899: IFFALSE 6903
// continue ;
6901: GO 6133
// repeat wait ( 0 0$1 ) ;
6903: LD_INT 35
6905: PPUSH
6906: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
6910: LD_VAR 0 6
6914: PPUSH
6915: LD_INT 60
6917: PUSH
6918: EMPTY
6919: LIST
6920: PPUSH
6921: CALL_OW 72
6925: NOT
6926: IFFALSE 6903
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
6928: LD_VAR 0 2
6932: PPUSH
6933: LD_VAR 0 6
6937: PPUSH
6938: LD_VAR 0 5
6942: PPUSH
6943: LD_VAR 0 4
6947: PPUSH
6948: CALL 76187 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
6952: LD_EXP 52
6956: PUSH
6957: LD_VAR 0 2
6961: ARRAY
6962: PPUSH
6963: LD_INT 50
6965: PUSH
6966: EMPTY
6967: LIST
6968: PPUSH
6969: CALL_OW 72
6973: NOT
6974: IFFALSE 6133
// end ;
6976: PPOPN 6
6978: END
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
6979: LD_INT 22
6981: PUSH
6982: LD_INT 3
6984: PUSH
6985: EMPTY
6986: LIST
6987: LIST
6988: PUSH
6989: LD_INT 30
6991: PUSH
6992: LD_INT 3
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PPUSH
7003: CALL_OW 69
7007: IFFALSE 7863
7009: GO 7011
7011: DISABLE
7012: LD_INT 0
7014: PPUSH
7015: PPUSH
7016: PPUSH
7017: PPUSH
7018: PPUSH
7019: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
7020: LD_INT 6300
7022: PUSH
7023: LD_INT 4200
7025: PUSH
7026: LD_INT 2100
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: LIST
7033: PUSH
7034: LD_OWVAR 67
7038: ARRAY
7039: PPUSH
7040: CALL_OW 67
// base := 1 ;
7044: LD_ADDR_VAR 0 2
7048: PUSH
7049: LD_INT 1
7051: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
7052: LD_INT 22
7054: PUSH
7055: LD_INT 3
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: PUSH
7062: LD_INT 30
7064: PUSH
7065: LD_INT 3
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PPUSH
7076: CALL_OW 69
7080: NOT
7081: IFFALSE 7085
// continue ;
7083: GO 7020
// case Rand ( 1 , 3 ) of 1 :
7085: LD_INT 1
7087: PPUSH
7088: LD_INT 3
7090: PPUSH
7091: CALL_OW 12
7095: PUSH
7096: LD_INT 1
7098: DOUBLE
7099: EQUAL
7100: IFTRUE 7104
7102: GO 7280
7104: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7105: LD_ADDR_VAR 0 3
7109: PUSH
7110: LD_INT 22
7112: PUSH
7113: LD_INT 1
7115: PUSH
7116: LD_INT 3
7118: PUSH
7119: LD_INT 43
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: PUSH
7128: LD_INT 24
7130: PUSH
7131: LD_INT 1
7133: PUSH
7134: LD_INT 3
7136: PUSH
7137: LD_INT 46
7139: PUSH
7140: EMPTY
7141: LIST
7142: LIST
7143: LIST
7144: LIST
7145: PUSH
7146: LD_INT 24
7148: PUSH
7149: LD_INT 1
7151: PUSH
7152: LD_INT 3
7154: PUSH
7155: LD_INT 43
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: PUSH
7164: LD_INT 24
7166: PUSH
7167: LD_INT 1
7169: PUSH
7170: LD_INT 3
7172: PUSH
7173: LD_INT 46
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: PUSH
7182: LD_INT 22
7184: PUSH
7185: LD_INT 1
7187: PUSH
7188: LD_INT 3
7190: PUSH
7191: LD_INT 45
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: PUSH
7200: LD_INT 22
7202: PUSH
7203: LD_INT 1
7205: PUSH
7206: LD_INT 3
7208: PUSH
7209: LD_INT 43
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: PUSH
7218: LD_INT 24
7220: PUSH
7221: LD_INT 1
7223: PUSH
7224: LD_INT 3
7226: PUSH
7227: LD_INT 46
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: PUSH
7236: LD_INT 22
7238: PUSH
7239: LD_INT 1
7241: PUSH
7242: LD_INT 3
7244: PUSH
7245: LD_INT 45
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7264: LD_VAR 0 2
7268: PPUSH
7269: LD_VAR 0 3
7273: PPUSH
7274: CALL 76002 0 2
// end ; 2 :
7278: GO 7611
7280: LD_INT 2
7282: DOUBLE
7283: EQUAL
7284: IFTRUE 7288
7286: GO 7426
7288: POP
// begin tmp := [ [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7289: LD_ADDR_VAR 0 3
7293: PUSH
7294: LD_INT 24
7296: PUSH
7297: LD_INT 1
7299: PUSH
7300: LD_INT 3
7302: PUSH
7303: LD_INT 43
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: PUSH
7312: LD_INT 24
7314: PUSH
7315: LD_INT 1
7317: PUSH
7318: LD_INT 3
7320: PUSH
7321: LD_INT 46
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: LIST
7328: LIST
7329: PUSH
7330: LD_INT 24
7332: PUSH
7333: LD_INT 1
7335: PUSH
7336: LD_INT 3
7338: PUSH
7339: LD_INT 43
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: PUSH
7348: LD_INT 24
7350: PUSH
7351: LD_INT 1
7353: PUSH
7354: LD_INT 3
7356: PUSH
7357: LD_INT 46
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: LIST
7364: LIST
7365: PUSH
7366: LD_INT 22
7368: PUSH
7369: LD_INT 1
7371: PUSH
7372: LD_INT 3
7374: PUSH
7375: LD_INT 45
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: PUSH
7384: LD_INT 22
7386: PUSH
7387: LD_INT 1
7389: PUSH
7390: LD_INT 3
7392: PUSH
7393: LD_INT 45
7395: PUSH
7396: EMPTY
7397: LIST
7398: LIST
7399: LIST
7400: LIST
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7410: LD_VAR 0 2
7414: PPUSH
7415: LD_VAR 0 3
7419: PPUSH
7420: CALL 76002 0 2
// end ; 3 :
7424: GO 7611
7426: LD_INT 3
7428: DOUBLE
7429: EQUAL
7430: IFTRUE 7434
7432: GO 7610
7434: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7435: LD_ADDR_VAR 0 3
7439: PUSH
7440: LD_INT 22
7442: PUSH
7443: LD_INT 1
7445: PUSH
7446: LD_INT 3
7448: PUSH
7449: LD_INT 43
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: PUSH
7458: LD_INT 24
7460: PUSH
7461: LD_INT 1
7463: PUSH
7464: LD_INT 3
7466: PUSH
7467: LD_INT 46
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: PUSH
7476: LD_INT 22
7478: PUSH
7479: LD_INT 1
7481: PUSH
7482: LD_INT 3
7484: PUSH
7485: LD_INT 43
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: PUSH
7494: LD_INT 24
7496: PUSH
7497: LD_INT 1
7499: PUSH
7500: LD_INT 3
7502: PUSH
7503: LD_INT 46
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: LIST
7510: LIST
7511: PUSH
7512: LD_INT 22
7514: PUSH
7515: LD_INT 1
7517: PUSH
7518: LD_INT 3
7520: PUSH
7521: LD_INT 45
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: PUSH
7530: LD_INT 22
7532: PUSH
7533: LD_INT 1
7535: PUSH
7536: LD_INT 3
7538: PUSH
7539: LD_INT 43
7541: PUSH
7542: EMPTY
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: PUSH
7548: LD_INT 24
7550: PUSH
7551: LD_INT 1
7553: PUSH
7554: LD_INT 3
7556: PUSH
7557: LD_INT 46
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: PUSH
7566: LD_INT 22
7568: PUSH
7569: LD_INT 1
7571: PUSH
7572: LD_INT 3
7574: PUSH
7575: LD_INT 45
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7594: LD_VAR 0 2
7598: PPUSH
7599: LD_VAR 0 3
7603: PPUSH
7604: CALL 76002 0 2
// end ; end ;
7608: GO 7611
7610: POP
// repeat wait ( 0 0$1 ) ;
7611: LD_INT 35
7613: PPUSH
7614: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
7618: LD_VAR 0 2
7622: PPUSH
7623: CALL 76350 0 1
7627: PUSH
7628: LD_INT 0
7630: EQUAL
7631: IFFALSE 7611
// wait ( 0 0$30 ) ;
7633: LD_INT 1050
7635: PPUSH
7636: CALL_OW 67
// _target := [ [ 144 , 65 ] , [ 63 , 38 ] ] ;
7640: LD_ADDR_VAR 0 5
7644: PUSH
7645: LD_INT 144
7647: PUSH
7648: LD_INT 65
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: LD_INT 63
7657: PUSH
7658: LD_INT 38
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
7669: LD_ADDR_VAR 0 4
7673: PUSH
7674: LD_INT 0
7676: PUSH
7677: LD_INT 0
7679: PUSH
7680: LD_INT 0
7682: PUSH
7683: LD_INT 1
7685: PUSH
7686: LD_INT 0
7688: PUSH
7689: LD_INT 0
7691: PUSH
7692: LD_INT 0
7694: PUSH
7695: LD_INT 0
7697: PUSH
7698: LD_INT 1
7700: PUSH
7701: LD_INT 0
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
7716: LD_ADDR_VAR 0 6
7720: PUSH
7721: LD_EXP 71
7725: PUSH
7726: LD_VAR 0 2
7730: ARRAY
7731: PUSH
7732: LD_EXP 74
7736: PUSH
7737: LD_VAR 0 2
7741: ARRAY
7742: DIFF
7743: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
7744: LD_ADDR_EXP 71
7748: PUSH
7749: LD_EXP 71
7753: PPUSH
7754: LD_VAR 0 2
7758: PPUSH
7759: LD_EXP 71
7763: PUSH
7764: LD_VAR 0 2
7768: ARRAY
7769: PUSH
7770: LD_VAR 0 6
7774: DIFF
7775: PPUSH
7776: CALL_OW 1
7780: ST_TO_ADDR
// if not attackers then
7781: LD_VAR 0 6
7785: NOT
7786: IFFALSE 7790
// continue ;
7788: GO 7020
// repeat wait ( 0 0$1 ) ;
7790: LD_INT 35
7792: PPUSH
7793: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
7797: LD_VAR 0 6
7801: PPUSH
7802: LD_INT 60
7804: PUSH
7805: EMPTY
7806: LIST
7807: PPUSH
7808: CALL_OW 72
7812: NOT
7813: IFFALSE 7790
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
7815: LD_VAR 0 2
7819: PPUSH
7820: LD_VAR 0 6
7824: PPUSH
7825: LD_VAR 0 5
7829: PPUSH
7830: LD_VAR 0 4
7834: PPUSH
7835: CALL 76187 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
7839: LD_EXP 52
7843: PUSH
7844: LD_VAR 0 2
7848: ARRAY
7849: PPUSH
7850: LD_INT 50
7852: PUSH
7853: EMPTY
7854: LIST
7855: PPUSH
7856: CALL_OW 72
7860: NOT
7861: IFFALSE 7020
// end ;
7863: PPOPN 6
7865: END
// export RussiansDefeated ; every 0 0$1 trigger FirstAssaultRepelled and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
7866: LD_EXP 3
7870: PUSH
7871: LD_INT 22
7873: PUSH
7874: LD_INT 3
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: PUSH
7881: LD_INT 21
7883: PUSH
7884: LD_INT 1
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: PPUSH
7895: CALL_OW 69
7899: PUSH
7900: LD_INT 0
7902: EQUAL
7903: AND
7904: IFFALSE 7917
7906: GO 7908
7908: DISABLE
// begin RussiansDefeated := true ;
7909: LD_ADDR_EXP 42
7913: PUSH
7914: LD_INT 1
7916: ST_TO_ADDR
// end ;
7917: END
// every 0 0$1 trigger FirstAssaultRepelled and not JMM_Arrived do var i , un , filter , soldiers , bazookas , vehs , vehicle , medics , squad , attackers , _target , flags ;
7918: LD_EXP 3
7922: PUSH
7923: LD_EXP 5
7927: NOT
7928: AND
7929: IFFALSE 8902
7931: GO 7933
7933: DISABLE
7934: LD_INT 0
7936: PPUSH
7937: PPUSH
7938: PPUSH
7939: PPUSH
7940: PPUSH
7941: PPUSH
7942: PPUSH
7943: PPUSH
7944: PPUSH
7945: PPUSH
7946: PPUSH
7947: PPUSH
// begin wait ( [ Rand ( 5 5$00 , 6 6$30 ) , Rand ( 4 4$30 , 5 5$30 ) , Rand ( 4 4$00 , 5 5$00 ) ] [ Difficulty ] ) ;
7948: LD_INT 10500
7950: PPUSH
7951: LD_INT 13650
7953: PPUSH
7954: CALL_OW 12
7958: PUSH
7959: LD_INT 9450
7961: PPUSH
7962: LD_INT 11550
7964: PPUSH
7965: CALL_OW 12
7969: PUSH
7970: LD_INT 8400
7972: PPUSH
7973: LD_INT 10500
7975: PPUSH
7976: CALL_OW 12
7980: PUSH
7981: EMPTY
7982: LIST
7983: LIST
7984: LIST
7985: PUSH
7986: LD_OWVAR 67
7990: ARRAY
7991: PPUSH
7992: CALL_OW 67
// filter := [ ] ;
7996: LD_ADDR_VAR 0 3
8000: PUSH
8001: EMPTY
8002: ST_TO_ADDR
// soldiers := [ Rand ( 2 , 3 ) , Rand ( 3 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
8003: LD_ADDR_VAR 0 4
8007: PUSH
8008: LD_INT 2
8010: PPUSH
8011: LD_INT 3
8013: PPUSH
8014: CALL_OW 12
8018: PUSH
8019: LD_INT 3
8021: PPUSH
8022: LD_INT 4
8024: PPUSH
8025: CALL_OW 12
8029: PUSH
8030: LD_INT 3
8032: PPUSH
8033: LD_INT 5
8035: PPUSH
8036: CALL_OW 12
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: LIST
8045: PUSH
8046: LD_OWVAR 67
8050: ARRAY
8051: ST_TO_ADDR
// bazookas := [ 1 , Rand ( 1 , 2 ) , Rand ( 2 , 3 ) ] [ Difficulty ] ;
8052: LD_ADDR_VAR 0 5
8056: PUSH
8057: LD_INT 1
8059: PUSH
8060: LD_INT 1
8062: PPUSH
8063: LD_INT 2
8065: PPUSH
8066: CALL_OW 12
8070: PUSH
8071: LD_INT 2
8073: PPUSH
8074: LD_INT 3
8076: PPUSH
8077: CALL_OW 12
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: LIST
8086: PUSH
8087: LD_OWVAR 67
8091: ARRAY
8092: ST_TO_ADDR
// vehs := [ Rand ( 2 , 3 ) , Rand ( 2 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
8093: LD_ADDR_VAR 0 6
8097: PUSH
8098: LD_INT 2
8100: PPUSH
8101: LD_INT 3
8103: PPUSH
8104: CALL_OW 12
8108: PUSH
8109: LD_INT 2
8111: PPUSH
8112: LD_INT 4
8114: PPUSH
8115: CALL_OW 12
8119: PUSH
8120: LD_INT 3
8122: PPUSH
8123: LD_INT 5
8125: PPUSH
8126: CALL_OW 12
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: LIST
8135: PUSH
8136: LD_OWVAR 67
8140: ARRAY
8141: ST_TO_ADDR
// medics := [ 1 , 2 , 2 ] [ Difficulty ] ;
8142: LD_ADDR_VAR 0 8
8146: PUSH
8147: LD_INT 1
8149: PUSH
8150: LD_INT 2
8152: PUSH
8153: LD_INT 2
8155: PUSH
8156: EMPTY
8157: LIST
8158: LIST
8159: LIST
8160: PUSH
8161: LD_OWVAR 67
8165: ARRAY
8166: ST_TO_ADDR
// uc_side := 3 ;
8167: LD_ADDR_OWVAR 20
8171: PUSH
8172: LD_INT 3
8174: ST_TO_ADDR
// uc_nation := nation_russian ;
8175: LD_ADDR_OWVAR 21
8179: PUSH
8180: LD_INT 3
8182: ST_TO_ADDR
// for i = 1 to soldiers do
8183: LD_ADDR_VAR 0 1
8187: PUSH
8188: DOUBLE
8189: LD_INT 1
8191: DEC
8192: ST_TO_ADDR
8193: LD_VAR 0 4
8197: PUSH
8198: FOR_TO
8199: IFFALSE 8241
// begin PrepareSoldier ( 0 , game_eskill ) ;
8201: LD_INT 0
8203: PPUSH
8204: LD_EXP 39
8208: PPUSH
8209: CALL_OW 381
// un := CreateHuman ;
8213: LD_ADDR_VAR 0 2
8217: PUSH
8218: CALL_OW 44
8222: ST_TO_ADDR
// filter := filter ^ un ;
8223: LD_ADDR_VAR 0 3
8227: PUSH
8228: LD_VAR 0 3
8232: PUSH
8233: LD_VAR 0 2
8237: ADD
8238: ST_TO_ADDR
// end ;
8239: GO 8198
8241: POP
8242: POP
// for i = 1 to bazookas do
8243: LD_ADDR_VAR 0 1
8247: PUSH
8248: DOUBLE
8249: LD_INT 1
8251: DEC
8252: ST_TO_ADDR
8253: LD_VAR 0 5
8257: PUSH
8258: FOR_TO
8259: IFFALSE 8309
// begin PrepareSoldier ( 0 , game_eskill ) ;
8261: LD_INT 0
8263: PPUSH
8264: LD_EXP 39
8268: PPUSH
8269: CALL_OW 381
// hc_class := class_bazooker ;
8273: LD_ADDR_OWVAR 28
8277: PUSH
8278: LD_INT 9
8280: ST_TO_ADDR
// un := CreateHuman ;
8281: LD_ADDR_VAR 0 2
8285: PUSH
8286: CALL_OW 44
8290: ST_TO_ADDR
// filter := filter ^ un ;
8291: LD_ADDR_VAR 0 3
8295: PUSH
8296: LD_VAR 0 3
8300: PUSH
8301: LD_VAR 0 2
8305: ADD
8306: ST_TO_ADDR
// end ;
8307: GO 8258
8309: POP
8310: POP
// for i = 1 to medics do
8311: LD_ADDR_VAR 0 1
8315: PUSH
8316: DOUBLE
8317: LD_INT 1
8319: DEC
8320: ST_TO_ADDR
8321: LD_VAR 0 8
8325: PUSH
8326: FOR_TO
8327: IFFALSE 8369
// begin PrepareScientist ( 0 , game_eskill ) ;
8329: LD_INT 0
8331: PPUSH
8332: LD_EXP 39
8336: PPUSH
8337: CALL_OW 384
// un := CreateHuman ;
8341: LD_ADDR_VAR 0 2
8345: PUSH
8346: CALL_OW 44
8350: ST_TO_ADDR
// filter := filter ^ un ;
8351: LD_ADDR_VAR 0 3
8355: PUSH
8356: LD_VAR 0 3
8360: PUSH
8361: LD_VAR 0 2
8365: ADD
8366: ST_TO_ADDR
// end ;
8367: GO 8326
8369: POP
8370: POP
// for i = 1 to vehs do
8371: LD_ADDR_VAR 0 1
8375: PUSH
8376: DOUBLE
8377: LD_INT 1
8379: DEC
8380: ST_TO_ADDR
8381: LD_VAR 0 6
8385: PUSH
8386: FOR_TO
8387: IFFALSE 8579
// begin case Rand ( 1 , 5 ) of 1 :
8389: LD_INT 1
8391: PPUSH
8392: LD_INT 5
8394: PPUSH
8395: CALL_OW 12
8399: PUSH
8400: LD_INT 1
8402: DOUBLE
8403: EQUAL
8404: IFTRUE 8408
8406: GO 8430
8408: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 2 :
8409: LD_INT 22
8411: PPUSH
8412: LD_INT 3
8414: PPUSH
8415: LD_INT 3
8417: PPUSH
8418: LD_INT 43
8420: PPUSH
8421: LD_INT 100
8423: PPUSH
8424: CALL 16799 0 5
8428: GO 8551
8430: LD_INT 2
8432: DOUBLE
8433: EQUAL
8434: IFTRUE 8438
8436: GO 8460
8438: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gun , 100 ) ; 3 :
8439: LD_INT 22
8441: PPUSH
8442: LD_INT 3
8444: PPUSH
8445: LD_INT 3
8447: PPUSH
8448: LD_INT 44
8450: PPUSH
8451: LD_INT 100
8453: PPUSH
8454: CALL 16799 0 5
8458: GO 8551
8460: LD_INT 3
8462: DOUBLE
8463: EQUAL
8464: IFTRUE 8468
8466: GO 8490
8468: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher , 100 ) ; 4 :
8469: LD_INT 22
8471: PPUSH
8472: LD_INT 3
8474: PPUSH
8475: LD_INT 3
8477: PPUSH
8478: LD_INT 45
8480: PPUSH
8481: LD_INT 100
8483: PPUSH
8484: CALL 16799 0 5
8488: GO 8551
8490: LD_INT 4
8492: DOUBLE
8493: EQUAL
8494: IFTRUE 8498
8496: GO 8520
8498: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 5 :
8499: LD_INT 24
8501: PPUSH
8502: LD_INT 3
8504: PPUSH
8505: LD_INT 3
8507: PPUSH
8508: LD_INT 43
8510: PPUSH
8511: LD_INT 100
8513: PPUSH
8514: CALL 16799 0 5
8518: GO 8551
8520: LD_INT 5
8522: DOUBLE
8523: EQUAL
8524: IFTRUE 8528
8526: GO 8550
8528: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun , 100 ) ; end ;
8529: LD_INT 24
8531: PPUSH
8532: LD_INT 3
8534: PPUSH
8535: LD_INT 3
8537: PPUSH
8538: LD_INT 46
8540: PPUSH
8541: LD_INT 100
8543: PPUSH
8544: CALL 16799 0 5
8548: GO 8551
8550: POP
// vehicle := CreateVehicle ;
8551: LD_ADDR_VAR 0 7
8555: PUSH
8556: CALL_OW 45
8560: ST_TO_ADDR
// filter := filter ^ vehicle ;
8561: LD_ADDR_VAR 0 3
8565: PUSH
8566: LD_VAR 0 3
8570: PUSH
8571: LD_VAR 0 7
8575: ADD
8576: ST_TO_ADDR
// end ;
8577: GO 8386
8579: POP
8580: POP
// for i = 1 to filter do
8581: LD_ADDR_VAR 0 1
8585: PUSH
8586: DOUBLE
8587: LD_INT 1
8589: DEC
8590: ST_TO_ADDR
8591: LD_VAR 0 3
8595: PUSH
8596: FOR_TO
8597: IFFALSE 8622
// PlaceUnitArea ( filter [ i ] , RUAttackSpawn1 , false ) ;
8599: LD_VAR 0 3
8603: PUSH
8604: LD_VAR 0 1
8608: ARRAY
8609: PPUSH
8610: LD_INT 14
8612: PPUSH
8613: LD_INT 0
8615: PPUSH
8616: CALL_OW 49
8620: GO 8596
8622: POP
8623: POP
// case Rand ( 1 , 3 ) of 1 :
8624: LD_INT 1
8626: PPUSH
8627: LD_INT 3
8629: PPUSH
8630: CALL_OW 12
8634: PUSH
8635: LD_INT 1
8637: DOUBLE
8638: EQUAL
8639: IFTRUE 8643
8641: GO 8697
8643: POP
// _target := [ [ 165 , 114 ] , [ 104 , 108 ] , [ 86 , 77 ] , [ 63 , 38 ] ] ; 2 :
8644: LD_ADDR_VAR 0 11
8648: PUSH
8649: LD_INT 165
8651: PUSH
8652: LD_INT 114
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: PUSH
8659: LD_INT 104
8661: PUSH
8662: LD_INT 108
8664: PUSH
8665: EMPTY
8666: LIST
8667: LIST
8668: PUSH
8669: LD_INT 86
8671: PUSH
8672: LD_INT 77
8674: PUSH
8675: EMPTY
8676: LIST
8677: LIST
8678: PUSH
8679: LD_INT 63
8681: PUSH
8682: LD_INT 38
8684: PUSH
8685: EMPTY
8686: LIST
8687: LIST
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: ST_TO_ADDR
8695: GO 8822
8697: LD_INT 2
8699: DOUBLE
8700: EQUAL
8701: IFTRUE 8705
8703: GO 8759
8705: POP
// _target := [ [ 165 , 114 ] , [ 146 , 71 ] , [ 112 , 41 ] , [ 63 , 38 ] ] ; 3 :
8706: LD_ADDR_VAR 0 11
8710: PUSH
8711: LD_INT 165
8713: PUSH
8714: LD_INT 114
8716: PUSH
8717: EMPTY
8718: LIST
8719: LIST
8720: PUSH
8721: LD_INT 146
8723: PUSH
8724: LD_INT 71
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PUSH
8731: LD_INT 112
8733: PUSH
8734: LD_INT 41
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: PUSH
8741: LD_INT 63
8743: PUSH
8744: LD_INT 38
8746: PUSH
8747: EMPTY
8748: LIST
8749: LIST
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: ST_TO_ADDR
8757: GO 8822
8759: LD_INT 3
8761: DOUBLE
8762: EQUAL
8763: IFTRUE 8767
8765: GO 8821
8767: POP
// _target := [ [ 165 , 114 ] , [ 63 , 99 ] , [ 55 , 77 ] , [ 63 , 38 ] ] ; end ;
8768: LD_ADDR_VAR 0 11
8772: PUSH
8773: LD_INT 165
8775: PUSH
8776: LD_INT 114
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: PUSH
8783: LD_INT 63
8785: PUSH
8786: LD_INT 99
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PUSH
8793: LD_INT 55
8795: PUSH
8796: LD_INT 77
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: PUSH
8803: LD_INT 63
8805: PUSH
8806: LD_INT 38
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: ST_TO_ADDR
8819: GO 8822
8821: POP
// attackers := filter ;
8822: LD_ADDR_VAR 0 10
8826: PUSH
8827: LD_VAR 0 3
8831: ST_TO_ADDR
// flags := [ 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 ] ;
8832: LD_ADDR_VAR 0 12
8836: PUSH
8837: LD_INT 0
8839: PUSH
8840: LD_INT 1
8842: PUSH
8843: LD_INT 0
8845: PUSH
8846: LD_INT 1
8848: PUSH
8849: LD_INT 1
8851: PUSH
8852: LD_INT 0
8854: PUSH
8855: LD_INT 0
8857: PUSH
8858: LD_INT 0
8860: PUSH
8861: LD_INT 1
8863: PUSH
8864: LD_INT 1
8866: PUSH
8867: EMPTY
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: ST_TO_ADDR
// MC_PrepareAttack ( 1 , attackers , _target , flags ) ;
8879: LD_INT 1
8881: PPUSH
8882: LD_VAR 0 10
8886: PPUSH
8887: LD_VAR 0 11
8891: PPUSH
8892: LD_VAR 0 12
8896: PPUSH
8897: CALL 76187 0 4
// enable ;
8901: ENABLE
// end ; end_of_file
8902: PPOPN 12
8904: END
// export Losses ; on UnitDestroyed ( un ) do begin if un = Brighton then
8905: LD_VAR 0 1
8909: PUSH
8910: LD_EXP 8
8914: EQUAL
8915: IFFALSE 8931
// begin wait ( 0 0$1 ) ;
8917: LD_INT 35
8919: PPUSH
8920: CALL_OW 67
// YouLost ( Brighton ) ;
8924: LD_STRING Brighton
8926: PPUSH
8927: CALL_OW 104
// end ; if un = JMM then
8931: LD_VAR 0 1
8935: PUSH
8936: LD_EXP 36
8940: EQUAL
8941: IFFALSE 8957
// begin wait ( 0 0$1 ) ;
8943: LD_INT 35
8945: PPUSH
8946: CALL_OW 67
// YouLost ( JMM ) ;
8950: LD_STRING JMM
8952: PPUSH
8953: CALL_OW 104
// end ; if un = Megan then
8957: LD_VAR 0 1
8961: PUSH
8962: LD_EXP 10
8966: EQUAL
8967: IFFALSE 8981
// begin Say ( Brighton , DBrighton-MeganDeath ) ;
8969: LD_EXP 8
8973: PPUSH
8974: LD_STRING DBrighton-MeganDeath
8976: PPUSH
8977: CALL_OW 88
// end ; if un = Palmer then
8981: LD_VAR 0 1
8985: PUSH
8986: LD_EXP 9
8990: EQUAL
8991: IFFALSE 9005
// begin Say ( Brighton , DBrighton-PalmerDeath ) ;
8993: LD_EXP 8
8997: PPUSH
8998: LD_STRING DBrighton-PalmerDeath
9000: PPUSH
9001: CALL_OW 88
// end ; if un = Burlak then
9005: LD_VAR 0 1
9009: PUSH
9010: LD_EXP 18
9014: EQUAL
9015: IFFALSE 9047
// begin if JMM_Arrived then
9017: LD_EXP 5
9021: IFFALSE 9035
// Say ( JMM , DJMM-BurlakDead ) ;
9023: LD_EXP 36
9027: PPUSH
9028: LD_STRING DJMM-BurlakDead
9030: PPUSH
9031: CALL_OW 88
// Say ( Palmer , DSol-BurlakDead ) ;
9035: LD_EXP 9
9039: PPUSH
9040: LD_STRING DSol-BurlakDead
9042: PPUSH
9043: CALL_OW 88
// end ; if un = BetaA or un = BetaB then
9047: LD_VAR 0 1
9051: PUSH
9052: LD_INT 1
9054: EQUAL
9055: PUSH
9056: LD_VAR 0 1
9060: PUSH
9061: LD_INT 3
9063: EQUAL
9064: OR
9065: IFFALSE 9081
// begin wait ( 0 0$1 ) ;
9067: LD_INT 35
9069: PPUSH
9070: CALL_OW 67
// YouLost ( Depot ) ;
9074: LD_STRING Depot
9076: PPUSH
9077: CALL_OW 104
// end ; if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
9081: LD_VAR 0 1
9085: PPUSH
9086: CALL_OW 255
9090: PUSH
9091: LD_INT 1
9093: EQUAL
9094: PUSH
9095: LD_VAR 0 1
9099: PPUSH
9100: CALL_OW 247
9104: PUSH
9105: LD_INT 1
9107: EQUAL
9108: AND
9109: IFFALSE 9125
// Losses := Losses + 1 ;
9111: LD_ADDR_EXP 43
9115: PUSH
9116: LD_EXP 43
9120: PUSH
9121: LD_INT 1
9123: PLUS
9124: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
9125: LD_VAR 0 1
9129: PPUSH
9130: CALL 79331 0 1
// end ;
9134: PPOPN 1
9136: END
// on UnitGoesToRed ( un ) do begin if un = Yashin then
9137: LD_VAR 0 1
9141: PUSH
9142: LD_EXP 12
9146: EQUAL
9147: IFFALSE 9161
// ForceSay ( Yashin , DDeath-Yas-3 ) ;
9149: LD_EXP 12
9153: PPUSH
9154: LD_STRING DDeath-Yas-3
9156: PPUSH
9157: CALL_OW 91
// if un = Popov then
9161: LD_VAR 0 1
9165: PUSH
9166: LD_EXP 13
9170: EQUAL
9171: IFFALSE 9185
// ForceSay ( Popov , DDeath-Pop-3 ) ;
9173: LD_EXP 13
9177: PPUSH
9178: LD_STRING DDeath-Pop-3
9180: PPUSH
9181: CALL_OW 91
// if un = Gaydar then
9185: LD_VAR 0 1
9189: PUSH
9190: LD_EXP 14
9194: EQUAL
9195: IFFALSE 9209
// ForceSay ( Gaydar , DDeath-Gay-3 ) ;
9197: LD_EXP 14
9201: PPUSH
9202: LD_STRING DDeath-Gay-3
9204: PPUSH
9205: CALL_OW 91
// if un = Sevi then
9209: LD_VAR 0 1
9213: PUSH
9214: LD_EXP 15
9218: EQUAL
9219: IFFALSE 9233
// ForceSay ( Sevi , DDeath-Vse-3 ) ;
9221: LD_EXP 15
9225: PPUSH
9226: LD_STRING DDeath-Vse-3
9228: PPUSH
9229: CALL_OW 91
// end ;
9233: PPOPN 1
9235: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_laser then
9236: LD_VAR 0 1
9240: PUSH
9241: LD_INT 10
9243: EQUAL
9244: IFFALSE 9282
// begin Say ( Brighton , DBrighton-C1 ) ;
9246: LD_EXP 8
9250: PPUSH
9251: LD_STRING DBrighton-C1
9253: PPUSH
9254: CALL_OW 88
// Say ( Megan , DMegan-C1 ) ;
9258: LD_EXP 10
9262: PPUSH
9263: LD_STRING DMegan-C1
9265: PPUSH
9266: CALL_OW 88
// Say ( Brighton , DBrighton-C2 ) ;
9270: LD_EXP 8
9274: PPUSH
9275: LD_STRING DBrighton-C2
9277: PPUSH
9278: CALL_OW 88
// end ; MCE_ResearchComplete ( tech , lab ) ;
9282: LD_VAR 0 1
9286: PPUSH
9287: LD_VAR 0 2
9291: PPUSH
9292: CALL 79027 0 2
// end ;
9296: PPOPN 2
9298: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
9299: LD_VAR 0 1
9303: PPUSH
9304: LD_VAR 0 2
9308: PPUSH
9309: CALL 81386 0 2
// end ;
9313: PPOPN 2
9315: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
9316: LD_VAR 0 1
9320: PPUSH
9321: CALL 80454 0 1
// end ;
9325: PPOPN 1
9327: END
// export RUFirstDepot ; on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 then
9328: LD_VAR 0 1
9332: PPUSH
9333: CALL_OW 266
9337: PUSH
9338: LD_INT 0
9340: EQUAL
9341: PUSH
9342: LD_VAR 0 1
9346: PPUSH
9347: CALL_OW 255
9351: PUSH
9352: LD_INT 3
9354: EQUAL
9355: AND
9356: IFFALSE 9418
// begin SetResourceType ( GetBase ( b ) , mat_cans , 10000 ) ;
9358: LD_VAR 0 1
9362: PPUSH
9363: CALL_OW 274
9367: PPUSH
9368: LD_INT 1
9370: PPUSH
9371: LD_INT 10000
9373: PPUSH
9374: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 250 ) ;
9378: LD_VAR 0 1
9382: PPUSH
9383: CALL_OW 274
9387: PPUSH
9388: LD_INT 2
9390: PPUSH
9391: LD_INT 250
9393: PPUSH
9394: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_siberit , 100 ) ;
9398: LD_VAR 0 1
9402: PPUSH
9403: CALL_OW 274
9407: PPUSH
9408: LD_INT 3
9410: PPUSH
9411: LD_INT 100
9413: PPUSH
9414: CALL_OW 277
// end ; MCE_BuildingComplete ( b ) ;
9418: LD_VAR 0 1
9422: PPUSH
9423: CALL 80695 0 1
// end ;
9427: PPOPN 1
9429: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
9430: LD_VAR 0 1
9434: PPUSH
9435: LD_VAR 0 2
9439: PPUSH
9440: LD_VAR 0 3
9444: PPUSH
9445: LD_VAR 0 4
9449: PPUSH
9450: LD_VAR 0 5
9454: PPUSH
9455: CALL 78647 0 5
// end ;
9459: PPOPN 5
9461: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
9462: LD_VAR 0 1
9466: PPUSH
9467: LD_VAR 0 2
9471: PPUSH
9472: CALL 78243 0 2
// end ;
9476: PPOPN 2
9478: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
9479: LD_VAR 0 1
9483: PPUSH
9484: LD_VAR 0 2
9488: PPUSH
9489: LD_VAR 0 3
9493: PPUSH
9494: LD_VAR 0 4
9498: PPUSH
9499: CALL 78081 0 4
// end ;
9503: PPOPN 4
9505: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
9506: LD_VAR 0 1
9510: PPUSH
9511: LD_VAR 0 2
9515: PPUSH
9516: LD_VAR 0 3
9520: PPUSH
9521: CALL 77856 0 3
// end ;
9525: PPOPN 3
9527: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
9528: LD_VAR 0 1
9532: PPUSH
9533: LD_VAR 0 2
9537: PPUSH
9538: CALL 77741 0 2
// end ;
9542: PPOPN 2
9544: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
9545: LD_VAR 0 1
9549: PPUSH
9550: LD_VAR 0 2
9554: PPUSH
9555: CALL 81647 0 2
// end ;
9559: PPOPN 2
9561: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin if GetSide ( driver ) = 6 then
9562: LD_VAR 0 1
9566: PPUSH
9567: CALL_OW 255
9571: PUSH
9572: LD_INT 6
9574: EQUAL
9575: IFFALSE 9670
// if AssaultStarted then
9577: LD_EXP 7
9581: IFFALSE 9655
// case Rand ( 1 , 4 ) of 1 .. 3 :
9583: LD_INT 1
9585: PPUSH
9586: LD_INT 4
9588: PPUSH
9589: CALL_OW 12
9593: PUSH
9594: LD_INT 1
9596: DOUBLE
9597: GREATEREQUAL
9598: IFFALSE 9606
9600: LD_INT 3
9602: DOUBLE
9603: LESSEQUAL
9604: IFTRUE 9608
9606: GO 9626
9608: POP
// ComAgressiveMove ( driver , 67 , 37 ) ; 4 :
9609: LD_VAR 0 1
9613: PPUSH
9614: LD_INT 67
9616: PPUSH
9617: LD_INT 37
9619: PPUSH
9620: CALL_OW 114
9624: GO 9653
9626: LD_INT 4
9628: DOUBLE
9629: EQUAL
9630: IFTRUE 9634
9632: GO 9652
9634: POP
// ComMoveXY ( driver , 120 , 131 ) ; end else
9635: LD_VAR 0 1
9639: PPUSH
9640: LD_INT 120
9642: PPUSH
9643: LD_INT 131
9645: PPUSH
9646: CALL_OW 111
9650: GO 9653
9652: POP
9653: GO 9670
// ComMoveXY ( driver , 120 , 131 ) ;
9655: LD_VAR 0 1
9659: PPUSH
9660: LD_INT 120
9662: PPUSH
9663: LD_INT 131
9665: PPUSH
9666: CALL_OW 111
// MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
9670: LD_VAR 0 1
9674: PPUSH
9675: LD_VAR 0 2
9679: PPUSH
9680: LD_VAR 0 3
9684: PPUSH
9685: LD_VAR 0 4
9689: PPUSH
9690: CALL 81863 0 4
// end ;
9694: PPOPN 4
9696: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
9697: LD_VAR 0 1
9701: PPUSH
9702: LD_VAR 0 2
9706: PPUSH
9707: CALL 77550 0 2
// end ; end_of_file
9711: PPOPN 2
9713: END
// every 0 0$1 trigger JMM_Arrived and RussiansDefeated do
9714: LD_EXP 5
9718: PUSH
9719: LD_EXP 42
9723: AND
9724: IFFALSE 9905
9726: GO 9728
9728: DISABLE
// begin wait ( 0 0$2 ) ;
9729: LD_INT 70
9731: PPUSH
9732: CALL_OW 67
// Say ( Brighton , DBrighton-G1 ) ;
9736: LD_EXP 8
9740: PPUSH
9741: LD_STRING DBrighton-G1
9743: PPUSH
9744: CALL_OW 88
// if Losses < 1 then
9748: LD_EXP 43
9752: PUSH
9753: LD_INT 1
9755: LESS
9756: IFFALSE 9770
// AddMedal ( Losses , 1 ) else
9758: LD_STRING Losses
9760: PPUSH
9761: LD_INT 1
9763: PPUSH
9764: CALL_OW 101
9768: GO 9803
// if Losses < 5 then
9770: LD_EXP 43
9774: PUSH
9775: LD_INT 5
9777: LESS
9778: IFFALSE 9792
// AddMedal ( Losses , 2 ) else
9780: LD_STRING Losses
9782: PPUSH
9783: LD_INT 2
9785: PPUSH
9786: CALL_OW 101
9790: GO 9803
// AddMedal ( Losses , - 1 ) ;
9792: LD_STRING Losses
9794: PPUSH
9795: LD_INT 1
9797: NEG
9798: PPUSH
9799: CALL_OW 101
// if LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
9803: LD_EXP 6
9807: PUSH
9808: LD_INT 10
9810: PPUSH
9811: LD_INT 1
9813: PPUSH
9814: CALL_OW 321
9818: PUSH
9819: LD_INT 2
9821: EQUAL
9822: AND
9823: IFFALSE 9837
// AddMedal ( Laser , 1 ) else
9825: LD_STRING Laser
9827: PPUSH
9828: LD_INT 1
9830: PPUSH
9831: CALL_OW 101
9835: GO 9884
// if not LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
9837: LD_EXP 6
9841: NOT
9842: PUSH
9843: LD_INT 10
9845: PPUSH
9846: LD_INT 1
9848: PPUSH
9849: CALL_OW 321
9853: PUSH
9854: LD_INT 2
9856: EQUAL
9857: AND
9858: IFFALSE 9873
// AddMedal ( Laser , - 1 ) else
9860: LD_STRING Laser
9862: PPUSH
9863: LD_INT 1
9865: NEG
9866: PPUSH
9867: CALL_OW 101
9871: GO 9884
// AddMedal ( Laser , - 2 ) ;
9873: LD_STRING Laser
9875: PPUSH
9876: LD_INT 2
9878: NEG
9879: PPUSH
9880: CALL_OW 101
// AddMedal ( med3 , 1 ) ;
9884: LD_STRING med3
9886: PPUSH
9887: LD_INT 1
9889: PPUSH
9890: CALL_OW 101
// GiveMedals ( BaseMain ) ;
9894: LD_STRING BaseMain
9896: PPUSH
9897: CALL_OW 102
// YouWin ;
9901: CALL_OW 103
// end ; end_of_file
9905: END
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
9906: LD_INT 0
9908: PPUSH
9909: PPUSH
// area = ListEnvironmentArea ( area ) ;
9910: LD_ADDR_VAR 0 2
9914: PUSH
9915: LD_VAR 0 2
9919: PPUSH
9920: CALL_OW 353
9924: ST_TO_ADDR
// if bulldozer > 0 then
9925: LD_VAR 0 1
9929: PUSH
9930: LD_INT 0
9932: GREATER
9933: IFFALSE 10044
// for i = area downto 1 do
9935: LD_ADDR_VAR 0 4
9939: PUSH
9940: DOUBLE
9941: LD_VAR 0 2
9945: INC
9946: ST_TO_ADDR
9947: LD_INT 1
9949: PUSH
9950: FOR_DOWNTO
9951: IFFALSE 10042
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
9953: LD_VAR 0 2
9957: PUSH
9958: LD_VAR 0 4
9962: ARRAY
9963: PUSH
9964: LD_INT 1
9966: ARRAY
9967: PPUSH
9968: LD_VAR 0 2
9972: PUSH
9973: LD_VAR 0 4
9977: ARRAY
9978: PUSH
9979: LD_INT 2
9981: ARRAY
9982: PPUSH
9983: CALL_OW 351
9987: IFFALSE 10040
// if not HasTask ( bulldozer ) then
9989: LD_VAR 0 1
9993: PPUSH
9994: CALL_OW 314
9998: NOT
9999: IFFALSE 10040
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
10001: LD_VAR 0 1
10005: PPUSH
10006: LD_VAR 0 2
10010: PUSH
10011: LD_VAR 0 4
10015: ARRAY
10016: PUSH
10017: LD_INT 1
10019: ARRAY
10020: PPUSH
10021: LD_VAR 0 2
10025: PUSH
10026: LD_VAR 0 4
10030: ARRAY
10031: PUSH
10032: LD_INT 2
10034: ARRAY
10035: PPUSH
10036: CALL_OW 171
10040: GO 9950
10042: POP
10043: POP
// end ;
10044: LD_VAR 0 3
10048: RET
// export function ComMeeting ( team , area ) ; var i , tmp ; begin
10049: LD_INT 0
10051: PPUSH
10052: PPUSH
10053: PPUSH
// tmp := AreaToList ( area , 0 ) ;
10054: LD_ADDR_VAR 0 5
10058: PUSH
10059: LD_VAR 0 2
10063: PPUSH
10064: LD_INT 0
10066: PPUSH
10067: CALL_OW 517
10071: ST_TO_ADDR
// for i = 1 to team do
10072: LD_ADDR_VAR 0 4
10076: PUSH
10077: DOUBLE
10078: LD_INT 1
10080: DEC
10081: ST_TO_ADDR
10082: LD_VAR 0 1
10086: PUSH
10087: FOR_TO
10088: IFFALSE 10189
// begin if IsInUnit ( team [ i ] ) then
10090: LD_VAR 0 1
10094: PUSH
10095: LD_VAR 0 4
10099: ARRAY
10100: PPUSH
10101: CALL_OW 310
10105: IFFALSE 10122
// ComExitBuilding ( team [ i ] ) ;
10107: LD_VAR 0 1
10111: PUSH
10112: LD_VAR 0 4
10116: ARRAY
10117: PPUSH
10118: CALL_OW 122
// AddComMoveXY ( team [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
10122: LD_VAR 0 1
10126: PUSH
10127: LD_VAR 0 4
10131: ARRAY
10132: PPUSH
10133: LD_VAR 0 5
10137: PUSH
10138: LD_INT 1
10140: ARRAY
10141: PUSH
10142: LD_VAR 0 4
10146: ARRAY
10147: PPUSH
10148: LD_VAR 0 5
10152: PUSH
10153: LD_INT 2
10155: ARRAY
10156: PUSH
10157: LD_VAR 0 4
10161: ARRAY
10162: PPUSH
10163: CALL_OW 171
// AddComTurnUnit ( team [ i ] , Brighton ) ;
10167: LD_VAR 0 1
10171: PUSH
10172: LD_VAR 0 4
10176: ARRAY
10177: PPUSH
10178: LD_EXP 8
10182: PPUSH
10183: CALL_OW 179
// end ;
10187: GO 10087
10189: POP
10190: POP
// end ; end_of_file
10191: LD_VAR 0 3
10195: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
10196: LD_INT 0
10198: PPUSH
10199: PPUSH
// if exist_mode then
10200: LD_VAR 0 2
10204: IFFALSE 10229
// unit := CreateCharacter ( prefix & ident ) else
10206: LD_ADDR_VAR 0 5
10210: PUSH
10211: LD_VAR 0 3
10215: PUSH
10216: LD_VAR 0 1
10220: STR
10221: PPUSH
10222: CALL_OW 34
10226: ST_TO_ADDR
10227: GO 10244
// unit := NewCharacter ( ident ) ;
10229: LD_ADDR_VAR 0 5
10233: PUSH
10234: LD_VAR 0 1
10238: PPUSH
10239: CALL_OW 25
10243: ST_TO_ADDR
// result := unit ;
10244: LD_ADDR_VAR 0 4
10248: PUSH
10249: LD_VAR 0 5
10253: ST_TO_ADDR
// end ;
10254: LD_VAR 0 4
10258: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10259: LD_INT 0
10261: PPUSH
10262: PPUSH
// if not side or not nation then
10263: LD_VAR 0 1
10267: NOT
10268: PUSH
10269: LD_VAR 0 2
10273: NOT
10274: OR
10275: IFFALSE 10279
// exit ;
10277: GO 10915
// case nation of nation_american :
10279: LD_VAR 0 2
10283: PUSH
10284: LD_INT 1
10286: DOUBLE
10287: EQUAL
10288: IFTRUE 10292
10290: GO 10462
10292: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ; nation_arabian :
10293: LD_ADDR_VAR 0 4
10297: PUSH
10298: LD_INT 35
10300: PUSH
10301: LD_INT 45
10303: PUSH
10304: LD_INT 46
10306: PUSH
10307: LD_INT 47
10309: PUSH
10310: LD_INT 1
10312: PUSH
10313: LD_INT 2
10315: PUSH
10316: LD_INT 6
10318: PUSH
10319: LD_INT 15
10321: PUSH
10322: LD_INT 16
10324: PUSH
10325: LD_INT 7
10327: PUSH
10328: LD_INT 12
10330: PUSH
10331: LD_INT 13
10333: PUSH
10334: LD_INT 10
10336: PUSH
10337: LD_INT 14
10339: PUSH
10340: LD_INT 20
10342: PUSH
10343: LD_INT 21
10345: PUSH
10346: LD_INT 22
10348: PUSH
10349: LD_INT 25
10351: PUSH
10352: LD_INT 32
10354: PUSH
10355: LD_INT 27
10357: PUSH
10358: LD_INT 36
10360: PUSH
10361: LD_INT 69
10363: PUSH
10364: LD_INT 39
10366: PUSH
10367: LD_INT 34
10369: PUSH
10370: LD_INT 40
10372: PUSH
10373: LD_INT 48
10375: PUSH
10376: LD_INT 49
10378: PUSH
10379: LD_INT 50
10381: PUSH
10382: LD_INT 51
10384: PUSH
10385: LD_INT 52
10387: PUSH
10388: LD_INT 53
10390: PUSH
10391: LD_INT 54
10393: PUSH
10394: LD_INT 55
10396: PUSH
10397: LD_INT 56
10399: PUSH
10400: LD_INT 57
10402: PUSH
10403: LD_INT 58
10405: PUSH
10406: LD_INT 59
10408: PUSH
10409: LD_INT 60
10411: PUSH
10412: LD_INT 61
10414: PUSH
10415: LD_INT 62
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: ST_TO_ADDR
10460: GO 10839
10462: LD_INT 2
10464: DOUBLE
10465: EQUAL
10466: IFTRUE 10470
10468: GO 10648
10470: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
10471: LD_ADDR_VAR 0 4
10475: PUSH
10476: LD_INT 35
10478: PUSH
10479: LD_INT 45
10481: PUSH
10482: LD_INT 46
10484: PUSH
10485: LD_INT 47
10487: PUSH
10488: LD_INT 70
10490: PUSH
10491: LD_INT 1
10493: PUSH
10494: LD_INT 11
10496: PUSH
10497: LD_INT 3
10499: PUSH
10500: LD_INT 4
10502: PUSH
10503: LD_INT 5
10505: PUSH
10506: LD_INT 6
10508: PUSH
10509: LD_INT 15
10511: PUSH
10512: LD_INT 18
10514: PUSH
10515: LD_INT 7
10517: PUSH
10518: LD_INT 17
10520: PUSH
10521: LD_INT 8
10523: PUSH
10524: LD_INT 20
10526: PUSH
10527: LD_INT 21
10529: PUSH
10530: LD_INT 22
10532: PUSH
10533: LD_INT 72
10535: PUSH
10536: LD_INT 26
10538: PUSH
10539: LD_INT 69
10541: PUSH
10542: LD_INT 39
10544: PUSH
10545: LD_INT 40
10547: PUSH
10548: LD_INT 41
10550: PUSH
10551: LD_INT 42
10553: PUSH
10554: LD_INT 43
10556: PUSH
10557: LD_INT 48
10559: PUSH
10560: LD_INT 49
10562: PUSH
10563: LD_INT 50
10565: PUSH
10566: LD_INT 51
10568: PUSH
10569: LD_INT 52
10571: PUSH
10572: LD_INT 53
10574: PUSH
10575: LD_INT 54
10577: PUSH
10578: LD_INT 55
10580: PUSH
10581: LD_INT 56
10583: PUSH
10584: LD_INT 60
10586: PUSH
10587: LD_INT 61
10589: PUSH
10590: LD_INT 62
10592: PUSH
10593: LD_INT 66
10595: PUSH
10596: LD_INT 67
10598: PUSH
10599: LD_INT 68
10601: PUSH
10602: EMPTY
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: ST_TO_ADDR
10646: GO 10839
10648: LD_INT 3
10650: DOUBLE
10651: EQUAL
10652: IFTRUE 10656
10654: GO 10838
10656: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
10657: LD_ADDR_VAR 0 4
10661: PUSH
10662: LD_INT 46
10664: PUSH
10665: LD_INT 47
10667: PUSH
10668: LD_INT 1
10670: PUSH
10671: LD_INT 2
10673: PUSH
10674: LD_INT 11
10676: PUSH
10677: LD_INT 9
10679: PUSH
10680: LD_INT 20
10682: PUSH
10683: LD_INT 19
10685: PUSH
10686: LD_INT 21
10688: PUSH
10689: LD_INT 24
10691: PUSH
10692: LD_INT 22
10694: PUSH
10695: LD_INT 25
10697: PUSH
10698: LD_INT 28
10700: PUSH
10701: LD_INT 29
10703: PUSH
10704: LD_INT 30
10706: PUSH
10707: LD_INT 31
10709: PUSH
10710: LD_INT 37
10712: PUSH
10713: LD_INT 38
10715: PUSH
10716: LD_INT 32
10718: PUSH
10719: LD_INT 27
10721: PUSH
10722: LD_INT 33
10724: PUSH
10725: LD_INT 69
10727: PUSH
10728: LD_INT 39
10730: PUSH
10731: LD_INT 34
10733: PUSH
10734: LD_INT 40
10736: PUSH
10737: LD_INT 71
10739: PUSH
10740: LD_INT 23
10742: PUSH
10743: LD_INT 44
10745: PUSH
10746: LD_INT 48
10748: PUSH
10749: LD_INT 49
10751: PUSH
10752: LD_INT 50
10754: PUSH
10755: LD_INT 51
10757: PUSH
10758: LD_INT 52
10760: PUSH
10761: LD_INT 53
10763: PUSH
10764: LD_INT 54
10766: PUSH
10767: LD_INT 55
10769: PUSH
10770: LD_INT 56
10772: PUSH
10773: LD_INT 57
10775: PUSH
10776: LD_INT 58
10778: PUSH
10779: LD_INT 59
10781: PUSH
10782: LD_INT 63
10784: PUSH
10785: LD_INT 64
10787: PUSH
10788: LD_INT 65
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: ST_TO_ADDR
10836: GO 10839
10838: POP
// if state > - 1 and state < 3 then
10839: LD_VAR 0 3
10843: PUSH
10844: LD_INT 1
10846: NEG
10847: GREATER
10848: PUSH
10849: LD_VAR 0 3
10853: PUSH
10854: LD_INT 3
10856: LESS
10857: AND
10858: IFFALSE 10915
// for i in result do
10860: LD_ADDR_VAR 0 5
10864: PUSH
10865: LD_VAR 0 4
10869: PUSH
10870: FOR_IN
10871: IFFALSE 10913
// if GetTech ( i , side ) <> state then
10873: LD_VAR 0 5
10877: PPUSH
10878: LD_VAR 0 1
10882: PPUSH
10883: CALL_OW 321
10887: PUSH
10888: LD_VAR 0 3
10892: NONEQUAL
10893: IFFALSE 10911
// result := result diff i ;
10895: LD_ADDR_VAR 0 4
10899: PUSH
10900: LD_VAR 0 4
10904: PUSH
10905: LD_VAR 0 5
10909: DIFF
10910: ST_TO_ADDR
10911: GO 10870
10913: POP
10914: POP
// end ;
10915: LD_VAR 0 4
10919: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
10920: LD_INT 0
10922: PPUSH
10923: PPUSH
10924: PPUSH
// result := true ;
10925: LD_ADDR_VAR 0 3
10929: PUSH
10930: LD_INT 1
10932: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
10933: LD_ADDR_VAR 0 5
10937: PUSH
10938: LD_VAR 0 2
10942: PPUSH
10943: CALL_OW 480
10947: ST_TO_ADDR
// if not tmp then
10948: LD_VAR 0 5
10952: NOT
10953: IFFALSE 10957
// exit ;
10955: GO 11006
// for i in tmp do
10957: LD_ADDR_VAR 0 4
10961: PUSH
10962: LD_VAR 0 5
10966: PUSH
10967: FOR_IN
10968: IFFALSE 11004
// if GetTech ( i , side ) <> state_researched then
10970: LD_VAR 0 4
10974: PPUSH
10975: LD_VAR 0 1
10979: PPUSH
10980: CALL_OW 321
10984: PUSH
10985: LD_INT 2
10987: NONEQUAL
10988: IFFALSE 11002
// begin result := false ;
10990: LD_ADDR_VAR 0 3
10994: PUSH
10995: LD_INT 0
10997: ST_TO_ADDR
// exit ;
10998: POP
10999: POP
11000: GO 11006
// end ;
11002: GO 10967
11004: POP
11005: POP
// end ;
11006: LD_VAR 0 3
11010: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11011: LD_INT 0
11013: PPUSH
11014: PPUSH
11015: PPUSH
11016: PPUSH
11017: PPUSH
11018: PPUSH
11019: PPUSH
11020: PPUSH
11021: PPUSH
11022: PPUSH
11023: PPUSH
11024: PPUSH
11025: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11026: LD_VAR 0 1
11030: NOT
11031: PUSH
11032: LD_VAR 0 1
11036: PPUSH
11037: CALL_OW 257
11041: PUSH
11042: LD_INT 9
11044: NONEQUAL
11045: OR
11046: IFFALSE 11050
// exit ;
11048: GO 11623
// side := GetSide ( unit ) ;
11050: LD_ADDR_VAR 0 9
11054: PUSH
11055: LD_VAR 0 1
11059: PPUSH
11060: CALL_OW 255
11064: ST_TO_ADDR
// tech_space := tech_spacanom ;
11065: LD_ADDR_VAR 0 12
11069: PUSH
11070: LD_INT 29
11072: ST_TO_ADDR
// tech_time := tech_taurad ;
11073: LD_ADDR_VAR 0 13
11077: PUSH
11078: LD_INT 28
11080: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11081: LD_ADDR_VAR 0 11
11085: PUSH
11086: LD_VAR 0 1
11090: PPUSH
11091: CALL_OW 310
11095: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11096: LD_VAR 0 11
11100: PPUSH
11101: CALL_OW 247
11105: PUSH
11106: LD_INT 2
11108: EQUAL
11109: IFFALSE 11113
// exit ;
11111: GO 11623
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11113: LD_ADDR_VAR 0 8
11117: PUSH
11118: LD_INT 81
11120: PUSH
11121: LD_VAR 0 9
11125: PUSH
11126: EMPTY
11127: LIST
11128: LIST
11129: PUSH
11130: LD_INT 3
11132: PUSH
11133: LD_INT 21
11135: PUSH
11136: LD_INT 3
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: PPUSH
11151: CALL_OW 69
11155: ST_TO_ADDR
// if not tmp then
11156: LD_VAR 0 8
11160: NOT
11161: IFFALSE 11165
// exit ;
11163: GO 11623
// if in_unit then
11165: LD_VAR 0 11
11169: IFFALSE 11193
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11171: LD_ADDR_VAR 0 10
11175: PUSH
11176: LD_VAR 0 8
11180: PPUSH
11181: LD_VAR 0 11
11185: PPUSH
11186: CALL_OW 74
11190: ST_TO_ADDR
11191: GO 11213
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11193: LD_ADDR_VAR 0 10
11197: PUSH
11198: LD_VAR 0 8
11202: PPUSH
11203: LD_VAR 0 1
11207: PPUSH
11208: CALL_OW 74
11212: ST_TO_ADDR
// if not enemy then
11213: LD_VAR 0 10
11217: NOT
11218: IFFALSE 11222
// exit ;
11220: GO 11623
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11222: LD_VAR 0 11
11226: PUSH
11227: LD_VAR 0 11
11231: PPUSH
11232: LD_VAR 0 10
11236: PPUSH
11237: CALL_OW 296
11241: PUSH
11242: LD_INT 13
11244: GREATER
11245: AND
11246: PUSH
11247: LD_VAR 0 1
11251: PPUSH
11252: LD_VAR 0 10
11256: PPUSH
11257: CALL_OW 296
11261: PUSH
11262: LD_INT 12
11264: GREATER
11265: OR
11266: IFFALSE 11270
// exit ;
11268: GO 11623
// missile := [ 1 ] ;
11270: LD_ADDR_VAR 0 14
11274: PUSH
11275: LD_INT 1
11277: PUSH
11278: EMPTY
11279: LIST
11280: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11281: LD_VAR 0 9
11285: PPUSH
11286: LD_VAR 0 12
11290: PPUSH
11291: CALL_OW 325
11295: IFFALSE 11324
// missile := Insert ( missile , missile + 1 , 2 ) ;
11297: LD_ADDR_VAR 0 14
11301: PUSH
11302: LD_VAR 0 14
11306: PPUSH
11307: LD_VAR 0 14
11311: PUSH
11312: LD_INT 1
11314: PLUS
11315: PPUSH
11316: LD_INT 2
11318: PPUSH
11319: CALL_OW 2
11323: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11324: LD_VAR 0 9
11328: PPUSH
11329: LD_VAR 0 13
11333: PPUSH
11334: CALL_OW 325
11338: PUSH
11339: LD_VAR 0 10
11343: PPUSH
11344: CALL_OW 255
11348: PPUSH
11349: LD_VAR 0 13
11353: PPUSH
11354: CALL_OW 325
11358: NOT
11359: AND
11360: IFFALSE 11389
// missile := Insert ( missile , missile + 1 , 3 ) ;
11362: LD_ADDR_VAR 0 14
11366: PUSH
11367: LD_VAR 0 14
11371: PPUSH
11372: LD_VAR 0 14
11376: PUSH
11377: LD_INT 1
11379: PLUS
11380: PPUSH
11381: LD_INT 3
11383: PPUSH
11384: CALL_OW 2
11388: ST_TO_ADDR
// if missile < 2 then
11389: LD_VAR 0 14
11393: PUSH
11394: LD_INT 2
11396: LESS
11397: IFFALSE 11401
// exit ;
11399: GO 11623
// x := GetX ( enemy ) ;
11401: LD_ADDR_VAR 0 4
11405: PUSH
11406: LD_VAR 0 10
11410: PPUSH
11411: CALL_OW 250
11415: ST_TO_ADDR
// y := GetY ( enemy ) ;
11416: LD_ADDR_VAR 0 5
11420: PUSH
11421: LD_VAR 0 10
11425: PPUSH
11426: CALL_OW 251
11430: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11431: LD_ADDR_VAR 0 6
11435: PUSH
11436: LD_VAR 0 4
11440: PUSH
11441: LD_INT 1
11443: NEG
11444: PPUSH
11445: LD_INT 1
11447: PPUSH
11448: CALL_OW 12
11452: PLUS
11453: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11454: LD_ADDR_VAR 0 7
11458: PUSH
11459: LD_VAR 0 5
11463: PUSH
11464: LD_INT 1
11466: NEG
11467: PPUSH
11468: LD_INT 1
11470: PPUSH
11471: CALL_OW 12
11475: PLUS
11476: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11477: LD_VAR 0 6
11481: PPUSH
11482: LD_VAR 0 7
11486: PPUSH
11487: CALL_OW 488
11491: NOT
11492: IFFALSE 11514
// begin _x := x ;
11494: LD_ADDR_VAR 0 6
11498: PUSH
11499: LD_VAR 0 4
11503: ST_TO_ADDR
// _y := y ;
11504: LD_ADDR_VAR 0 7
11508: PUSH
11509: LD_VAR 0 5
11513: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11514: LD_ADDR_VAR 0 3
11518: PUSH
11519: LD_INT 1
11521: PPUSH
11522: LD_VAR 0 14
11526: PPUSH
11527: CALL_OW 12
11531: ST_TO_ADDR
// case i of 1 :
11532: LD_VAR 0 3
11536: PUSH
11537: LD_INT 1
11539: DOUBLE
11540: EQUAL
11541: IFTRUE 11545
11543: GO 11562
11545: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11546: LD_VAR 0 1
11550: PPUSH
11551: LD_VAR 0 10
11555: PPUSH
11556: CALL_OW 115
11560: GO 11623
11562: LD_INT 2
11564: DOUBLE
11565: EQUAL
11566: IFTRUE 11570
11568: GO 11592
11570: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11571: LD_VAR 0 1
11575: PPUSH
11576: LD_VAR 0 6
11580: PPUSH
11581: LD_VAR 0 7
11585: PPUSH
11586: CALL_OW 153
11590: GO 11623
11592: LD_INT 3
11594: DOUBLE
11595: EQUAL
11596: IFTRUE 11600
11598: GO 11622
11600: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
11601: LD_VAR 0 1
11605: PPUSH
11606: LD_VAR 0 6
11610: PPUSH
11611: LD_VAR 0 7
11615: PPUSH
11616: CALL_OW 154
11620: GO 11623
11622: POP
// end ;
11623: LD_VAR 0 2
11627: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
11628: LD_INT 0
11630: PPUSH
11631: PPUSH
11632: PPUSH
11633: PPUSH
11634: PPUSH
11635: PPUSH
// if not unit or not building then
11636: LD_VAR 0 1
11640: NOT
11641: PUSH
11642: LD_VAR 0 2
11646: NOT
11647: OR
11648: IFFALSE 11652
// exit ;
11650: GO 11810
// x := GetX ( building ) ;
11652: LD_ADDR_VAR 0 5
11656: PUSH
11657: LD_VAR 0 2
11661: PPUSH
11662: CALL_OW 250
11666: ST_TO_ADDR
// y := GetY ( building ) ;
11667: LD_ADDR_VAR 0 6
11671: PUSH
11672: LD_VAR 0 2
11676: PPUSH
11677: CALL_OW 251
11681: ST_TO_ADDR
// for i = 0 to 5 do
11682: LD_ADDR_VAR 0 4
11686: PUSH
11687: DOUBLE
11688: LD_INT 0
11690: DEC
11691: ST_TO_ADDR
11692: LD_INT 5
11694: PUSH
11695: FOR_TO
11696: IFFALSE 11808
// begin _x := ShiftX ( x , i , 3 ) ;
11698: LD_ADDR_VAR 0 7
11702: PUSH
11703: LD_VAR 0 5
11707: PPUSH
11708: LD_VAR 0 4
11712: PPUSH
11713: LD_INT 3
11715: PPUSH
11716: CALL_OW 272
11720: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11721: LD_ADDR_VAR 0 8
11725: PUSH
11726: LD_VAR 0 6
11730: PPUSH
11731: LD_VAR 0 4
11735: PPUSH
11736: LD_INT 3
11738: PPUSH
11739: CALL_OW 273
11743: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11744: LD_VAR 0 7
11748: PPUSH
11749: LD_VAR 0 8
11753: PPUSH
11754: CALL_OW 488
11758: NOT
11759: IFFALSE 11763
// continue ;
11761: GO 11695
// if HexInfo ( _x , _y ) = 0 then
11763: LD_VAR 0 7
11767: PPUSH
11768: LD_VAR 0 8
11772: PPUSH
11773: CALL_OW 428
11777: PUSH
11778: LD_INT 0
11780: EQUAL
11781: IFFALSE 11806
// begin ComMoveXY ( unit , _x , _y ) ;
11783: LD_VAR 0 1
11787: PPUSH
11788: LD_VAR 0 7
11792: PPUSH
11793: LD_VAR 0 8
11797: PPUSH
11798: CALL_OW 111
// exit ;
11802: POP
11803: POP
11804: GO 11810
// end ; end ;
11806: GO 11695
11808: POP
11809: POP
// end ;
11810: LD_VAR 0 3
11814: RET
// export function ScanBase ( side , base_area ) ; begin
11815: LD_INT 0
11817: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11818: LD_ADDR_VAR 0 3
11822: PUSH
11823: LD_VAR 0 2
11827: PPUSH
11828: LD_INT 81
11830: PUSH
11831: LD_VAR 0 1
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: PPUSH
11840: CALL_OW 70
11844: ST_TO_ADDR
// end ;
11845: LD_VAR 0 3
11849: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
11850: LD_INT 0
11852: PPUSH
11853: PPUSH
11854: PPUSH
11855: PPUSH
11856: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
11857: LD_VAR 0 1
11861: NOT
11862: PUSH
11863: LD_EXP 52
11867: PUSH
11868: LD_VAR 0 1
11872: ARRAY
11873: NOT
11874: OR
11875: PUSH
11876: LD_VAR 0 2
11880: NOT
11881: OR
11882: PUSH
11883: LD_VAR 0 3
11887: NOT
11888: OR
11889: IFFALSE 11893
// exit ;
11891: GO 12343
// side := mc_sides [ base ] ;
11893: LD_ADDR_VAR 0 6
11897: PUSH
11898: LD_EXP 78
11902: PUSH
11903: LD_VAR 0 1
11907: ARRAY
11908: ST_TO_ADDR
// if not side then
11909: LD_VAR 0 6
11913: NOT
11914: IFFALSE 11918
// exit ;
11916: GO 12343
// for i in solds do
11918: LD_ADDR_VAR 0 7
11922: PUSH
11923: LD_VAR 0 2
11927: PUSH
11928: FOR_IN
11929: IFFALSE 11990
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
11931: LD_VAR 0 7
11935: PPUSH
11936: CALL_OW 310
11940: PPUSH
11941: CALL_OW 266
11945: PUSH
11946: LD_INT 32
11948: PUSH
11949: LD_INT 31
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: IN
11956: IFFALSE 11976
// solds := solds diff i else
11958: LD_ADDR_VAR 0 2
11962: PUSH
11963: LD_VAR 0 2
11967: PUSH
11968: LD_VAR 0 7
11972: DIFF
11973: ST_TO_ADDR
11974: GO 11988
// SetTag ( i , 18 ) ;
11976: LD_VAR 0 7
11980: PPUSH
11981: LD_INT 18
11983: PPUSH
11984: CALL_OW 109
11988: GO 11928
11990: POP
11991: POP
// if not solds then
11992: LD_VAR 0 2
11996: NOT
11997: IFFALSE 12001
// exit ;
11999: GO 12343
// repeat wait ( 0 0$1 ) ;
12001: LD_INT 35
12003: PPUSH
12004: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
12008: LD_ADDR_VAR 0 5
12012: PUSH
12013: LD_VAR 0 6
12017: PPUSH
12018: LD_VAR 0 3
12022: PPUSH
12023: CALL 11815 0 2
12027: ST_TO_ADDR
// if not enemy or enemy > 3 or mc_defender [ base ] then
12028: LD_VAR 0 5
12032: NOT
12033: PUSH
12034: LD_VAR 0 5
12038: PUSH
12039: LD_INT 3
12041: GREATER
12042: OR
12043: PUSH
12044: LD_EXP 74
12048: PUSH
12049: LD_VAR 0 1
12053: ARRAY
12054: OR
12055: IFFALSE 12096
// begin for i in solds do
12057: LD_ADDR_VAR 0 7
12061: PUSH
12062: LD_VAR 0 2
12066: PUSH
12067: FOR_IN
12068: IFFALSE 12092
// if HasTask ( i ) then
12070: LD_VAR 0 7
12074: PPUSH
12075: CALL_OW 314
12079: IFFALSE 12090
// ComStop ( i ) ;
12081: LD_VAR 0 7
12085: PPUSH
12086: CALL_OW 141
12090: GO 12067
12092: POP
12093: POP
// break ;
12094: GO 12331
// end ; for i in solds do
12096: LD_ADDR_VAR 0 7
12100: PUSH
12101: LD_VAR 0 2
12105: PUSH
12106: FOR_IN
12107: IFFALSE 12323
// begin if IsInUnit ( i ) then
12109: LD_VAR 0 7
12113: PPUSH
12114: CALL_OW 310
12118: IFFALSE 12129
// ComExitBuilding ( i ) ;
12120: LD_VAR 0 7
12124: PPUSH
12125: CALL_OW 122
// if GetLives ( i ) > 333 then
12129: LD_VAR 0 7
12133: PPUSH
12134: CALL_OW 256
12138: PUSH
12139: LD_INT 333
12141: GREATER
12142: IFFALSE 12170
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
12144: LD_VAR 0 7
12148: PPUSH
12149: LD_VAR 0 5
12153: PPUSH
12154: LD_VAR 0 7
12158: PPUSH
12159: CALL_OW 74
12163: PPUSH
12164: CALL_OW 115
12168: GO 12321
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
12170: LD_ADDR_VAR 0 8
12174: PUSH
12175: LD_EXP 52
12179: PUSH
12180: LD_VAR 0 1
12184: ARRAY
12185: PPUSH
12186: LD_INT 2
12188: PUSH
12189: LD_INT 30
12191: PUSH
12192: LD_INT 0
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: PUSH
12199: LD_INT 30
12201: PUSH
12202: LD_INT 1
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: PUSH
12209: LD_INT 30
12211: PUSH
12212: LD_INT 6
12214: PUSH
12215: EMPTY
12216: LIST
12217: LIST
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: PPUSH
12225: CALL_OW 72
12229: PPUSH
12230: LD_VAR 0 7
12234: PPUSH
12235: CALL_OW 74
12239: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
12240: LD_VAR 0 7
12244: PPUSH
12245: LD_VAR 0 8
12249: PPUSH
12250: CALL_OW 250
12254: PPUSH
12255: LD_INT 3
12257: PPUSH
12258: LD_INT 5
12260: PPUSH
12261: CALL_OW 272
12265: PPUSH
12266: LD_VAR 0 8
12270: PPUSH
12271: CALL_OW 251
12275: PPUSH
12276: LD_INT 3
12278: PPUSH
12279: LD_INT 5
12281: PPUSH
12282: CALL_OW 273
12286: PPUSH
12287: CALL_OW 111
// SetTag ( i , 0 ) ;
12291: LD_VAR 0 7
12295: PPUSH
12296: LD_INT 0
12298: PPUSH
12299: CALL_OW 109
// solds := solds diff i ;
12303: LD_ADDR_VAR 0 2
12307: PUSH
12308: LD_VAR 0 2
12312: PUSH
12313: LD_VAR 0 7
12317: DIFF
12318: ST_TO_ADDR
// continue ;
12319: GO 12106
// end ; end ;
12321: GO 12106
12323: POP
12324: POP
// until solds ;
12325: LD_VAR 0 2
12329: IFFALSE 12001
// MC_Reset ( base , 18 ) ;
12331: LD_VAR 0 1
12335: PPUSH
12336: LD_INT 18
12338: PPUSH
12339: CALL 56859 0 2
// end ;
12343: LD_VAR 0 4
12347: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
12348: LD_INT 0
12350: PPUSH
12351: PPUSH
12352: PPUSH
12353: PPUSH
12354: PPUSH
12355: PPUSH
12356: PPUSH
12357: PPUSH
12358: PPUSH
12359: PPUSH
12360: PPUSH
12361: PPUSH
12362: PPUSH
12363: PPUSH
12364: PPUSH
12365: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
12366: LD_ADDR_VAR 0 12
12370: PUSH
12371: LD_EXP 52
12375: PUSH
12376: LD_VAR 0 1
12380: ARRAY
12381: PPUSH
12382: LD_INT 25
12384: PUSH
12385: LD_INT 3
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: PPUSH
12392: CALL_OW 72
12396: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
12397: LD_ADDR_VAR 0 8
12401: PUSH
12402: LD_EXP 52
12406: PUSH
12407: LD_VAR 0 1
12411: ARRAY
12412: PPUSH
12413: LD_INT 2
12415: PUSH
12416: LD_INT 25
12418: PUSH
12419: LD_INT 1
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: PUSH
12426: LD_INT 25
12428: PUSH
12429: LD_INT 5
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: PUSH
12436: LD_INT 25
12438: PUSH
12439: LD_INT 8
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: PUSH
12446: LD_INT 25
12448: PUSH
12449: LD_INT 9
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: PPUSH
12463: CALL_OW 72
12467: ST_TO_ADDR
// if not defenders and not solds then
12468: LD_VAR 0 2
12472: NOT
12473: PUSH
12474: LD_VAR 0 8
12478: NOT
12479: AND
12480: IFFALSE 12484
// exit ;
12482: GO 13813
// depot_under_attack := false ;
12484: LD_ADDR_VAR 0 16
12488: PUSH
12489: LD_INT 0
12491: ST_TO_ADDR
// sold_defenders := [ ] ;
12492: LD_ADDR_VAR 0 17
12496: PUSH
12497: EMPTY
12498: ST_TO_ADDR
// if mechs then
12499: LD_VAR 0 12
12503: IFFALSE 12632
// for i in defenders do
12505: LD_ADDR_VAR 0 5
12509: PUSH
12510: LD_VAR 0 2
12514: PUSH
12515: FOR_IN
12516: IFFALSE 12630
// begin SetTag ( i , 20 ) ;
12518: LD_VAR 0 5
12522: PPUSH
12523: LD_INT 20
12525: PPUSH
12526: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
12530: LD_VAR 0 5
12534: PPUSH
12535: CALL_OW 263
12539: PUSH
12540: LD_INT 1
12542: EQUAL
12543: PUSH
12544: LD_VAR 0 5
12548: PPUSH
12549: CALL_OW 311
12553: NOT
12554: AND
12555: PUSH
12556: LD_VAR 0 12
12560: AND
12561: IFFALSE 12628
// begin un := mechs [ 1 ] ;
12563: LD_ADDR_VAR 0 10
12567: PUSH
12568: LD_VAR 0 12
12572: PUSH
12573: LD_INT 1
12575: ARRAY
12576: ST_TO_ADDR
// ComExitBuilding ( un ) ;
12577: LD_VAR 0 10
12581: PPUSH
12582: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
12586: LD_VAR 0 10
12590: PPUSH
12591: LD_VAR 0 5
12595: PPUSH
12596: CALL_OW 180
// SetTag ( un , 19 ) ;
12600: LD_VAR 0 10
12604: PPUSH
12605: LD_INT 19
12607: PPUSH
12608: CALL_OW 109
// mechs := mechs diff un ;
12612: LD_ADDR_VAR 0 12
12616: PUSH
12617: LD_VAR 0 12
12621: PUSH
12622: LD_VAR 0 10
12626: DIFF
12627: ST_TO_ADDR
// end ; end ;
12628: GO 12515
12630: POP
12631: POP
// if solds then
12632: LD_VAR 0 8
12636: IFFALSE 12695
// for i in solds do
12638: LD_ADDR_VAR 0 5
12642: PUSH
12643: LD_VAR 0 8
12647: PUSH
12648: FOR_IN
12649: IFFALSE 12693
// if not GetTag ( i ) then
12651: LD_VAR 0 5
12655: PPUSH
12656: CALL_OW 110
12660: NOT
12661: IFFALSE 12691
// begin defenders := defenders union i ;
12663: LD_ADDR_VAR 0 2
12667: PUSH
12668: LD_VAR 0 2
12672: PUSH
12673: LD_VAR 0 5
12677: UNION
12678: ST_TO_ADDR
// SetTag ( i , 18 ) ;
12679: LD_VAR 0 5
12683: PPUSH
12684: LD_INT 18
12686: PPUSH
12687: CALL_OW 109
// end ;
12691: GO 12648
12693: POP
12694: POP
// repeat wait ( 0 0$1 ) ;
12695: LD_INT 35
12697: PPUSH
12698: CALL_OW 67
// enemy := mc_scan [ base ] ;
12702: LD_ADDR_VAR 0 3
12706: PUSH
12707: LD_EXP 75
12711: PUSH
12712: LD_VAR 0 1
12716: ARRAY
12717: ST_TO_ADDR
// for i in defenders do
12718: LD_ADDR_VAR 0 5
12722: PUSH
12723: LD_VAR 0 2
12727: PUSH
12728: FOR_IN
12729: IFFALSE 13414
// begin e := NearestUnitToUnit ( enemy , i ) ;
12731: LD_ADDR_VAR 0 13
12735: PUSH
12736: LD_VAR 0 3
12740: PPUSH
12741: LD_VAR 0 5
12745: PPUSH
12746: CALL_OW 74
12750: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
12751: LD_ADDR_VAR 0 16
12755: PUSH
12756: LD_EXP 52
12760: PUSH
12761: LD_VAR 0 1
12765: ARRAY
12766: PPUSH
12767: LD_INT 2
12769: PUSH
12770: LD_INT 30
12772: PUSH
12773: LD_INT 0
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: PUSH
12780: LD_INT 30
12782: PUSH
12783: LD_INT 1
12785: PUSH
12786: EMPTY
12787: LIST
12788: LIST
12789: PUSH
12790: EMPTY
12791: LIST
12792: LIST
12793: LIST
12794: PPUSH
12795: CALL_OW 72
12799: NOT
12800: PUSH
12801: LD_EXP 52
12805: PUSH
12806: LD_VAR 0 1
12810: ARRAY
12811: PPUSH
12812: LD_INT 2
12814: PUSH
12815: LD_INT 30
12817: PUSH
12818: LD_INT 0
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: PUSH
12825: LD_INT 30
12827: PUSH
12828: LD_INT 1
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: PUSH
12835: EMPTY
12836: LIST
12837: LIST
12838: LIST
12839: PPUSH
12840: CALL_OW 72
12844: PPUSH
12845: CALL_OW 256
12849: PUSH
12850: LD_INT 600
12852: LESS
12853: OR
12854: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
12855: LD_VAR 0 5
12859: PPUSH
12860: CALL_OW 247
12864: PUSH
12865: LD_INT 2
12867: DOUBLE
12868: EQUAL
12869: IFTRUE 12873
12871: GO 13120
12873: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
12874: LD_VAR 0 5
12878: PPUSH
12879: CALL_OW 256
12883: PUSH
12884: LD_INT 650
12886: GREATER
12887: PUSH
12888: LD_VAR 0 5
12892: PPUSH
12893: LD_VAR 0 13
12897: PPUSH
12898: CALL_OW 296
12902: PUSH
12903: LD_INT 40
12905: LESS
12906: AND
12907: IFFALSE 12925
// ComAttackUnit ( i , e ) else
12909: LD_VAR 0 5
12913: PPUSH
12914: LD_VAR 0 13
12918: PPUSH
12919: CALL_OW 115
12923: GO 13003
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
12925: LD_VAR 0 5
12929: PPUSH
12930: LD_VAR 0 13
12934: PPUSH
12935: CALL_OW 296
12939: PUSH
12940: LD_INT 30
12942: GREATEREQUAL
12943: PUSH
12944: LD_VAR 0 5
12948: PPUSH
12949: CALL_OW 256
12953: PUSH
12954: LD_INT 650
12956: LESSEQUAL
12957: OR
12958: PUSH
12959: LD_VAR 0 5
12963: PPUSH
12964: LD_EXP 76
12968: PUSH
12969: LD_VAR 0 1
12973: ARRAY
12974: PPUSH
12975: CALL_OW 308
12979: NOT
12980: AND
12981: IFFALSE 13003
// ComMoveToArea ( i , mc_parking [ base ] ) ;
12983: LD_VAR 0 5
12987: PPUSH
12988: LD_EXP 76
12992: PUSH
12993: LD_VAR 0 1
12997: ARRAY
12998: PPUSH
12999: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
13003: LD_VAR 0 5
13007: PPUSH
13008: CALL_OW 256
13012: PUSH
13013: LD_INT 998
13015: LESS
13016: PUSH
13017: LD_VAR 0 5
13021: PPUSH
13022: CALL_OW 263
13026: PUSH
13027: LD_INT 1
13029: EQUAL
13030: AND
13031: PUSH
13032: LD_VAR 0 5
13036: PPUSH
13037: CALL_OW 311
13041: AND
13042: PUSH
13043: LD_VAR 0 5
13047: PPUSH
13048: LD_EXP 76
13052: PUSH
13053: LD_VAR 0 1
13057: ARRAY
13058: PPUSH
13059: CALL_OW 308
13063: AND
13064: IFFALSE 13118
// begin mech := IsDrivenBy ( i ) ;
13066: LD_ADDR_VAR 0 9
13070: PUSH
13071: LD_VAR 0 5
13075: PPUSH
13076: CALL_OW 311
13080: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
13081: LD_VAR 0 9
13085: PPUSH
13086: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
13090: LD_VAR 0 9
13094: PPUSH
13095: LD_VAR 0 5
13099: PPUSH
13100: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
13104: LD_VAR 0 9
13108: PPUSH
13109: LD_VAR 0 5
13113: PPUSH
13114: CALL_OW 180
// end ; end ; unit_human :
13118: GO 13385
13120: LD_INT 1
13122: DOUBLE
13123: EQUAL
13124: IFTRUE 13128
13126: GO 13384
13128: POP
// begin b := IsInUnit ( i ) ;
13129: LD_ADDR_VAR 0 18
13133: PUSH
13134: LD_VAR 0 5
13138: PPUSH
13139: CALL_OW 310
13143: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
13144: LD_ADDR_VAR 0 19
13148: PUSH
13149: LD_VAR 0 18
13153: NOT
13154: PUSH
13155: LD_VAR 0 18
13159: PPUSH
13160: CALL_OW 266
13164: PUSH
13165: LD_INT 32
13167: PUSH
13168: LD_INT 31
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: IN
13175: OR
13176: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
13177: LD_VAR 0 16
13181: PUSH
13182: LD_VAR 0 2
13186: PPUSH
13187: LD_INT 21
13189: PUSH
13190: LD_INT 2
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: PPUSH
13197: CALL_OW 72
13201: PUSH
13202: LD_INT 1
13204: LESSEQUAL
13205: OR
13206: PUSH
13207: LD_VAR 0 19
13211: AND
13212: PUSH
13213: LD_VAR 0 5
13217: PUSH
13218: LD_VAR 0 17
13222: IN
13223: NOT
13224: AND
13225: IFFALSE 13318
// begin if b then
13227: LD_VAR 0 18
13231: IFFALSE 13280
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
13233: LD_VAR 0 18
13237: PPUSH
13238: LD_VAR 0 3
13242: PPUSH
13243: LD_VAR 0 18
13247: PPUSH
13248: CALL_OW 74
13252: PPUSH
13253: CALL_OW 296
13257: PUSH
13258: LD_INT 10
13260: LESS
13261: PUSH
13262: LD_VAR 0 18
13266: PPUSH
13267: CALL_OW 461
13271: PUSH
13272: LD_INT 7
13274: NONEQUAL
13275: AND
13276: IFFALSE 13280
// continue ;
13278: GO 12728
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
13280: LD_ADDR_VAR 0 17
13284: PUSH
13285: LD_VAR 0 17
13289: PPUSH
13290: LD_VAR 0 17
13294: PUSH
13295: LD_INT 1
13297: PLUS
13298: PPUSH
13299: LD_VAR 0 5
13303: PPUSH
13304: CALL_OW 1
13308: ST_TO_ADDR
// ComExitBuilding ( i ) ;
13309: LD_VAR 0 5
13313: PPUSH
13314: CALL_OW 122
// end ; if sold_defenders then
13318: LD_VAR 0 17
13322: IFFALSE 13382
// if i in sold_defenders then
13324: LD_VAR 0 5
13328: PUSH
13329: LD_VAR 0 17
13333: IN
13334: IFFALSE 13382
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
13336: LD_VAR 0 5
13340: PPUSH
13341: CALL_OW 314
13345: NOT
13346: PUSH
13347: LD_VAR 0 5
13351: PPUSH
13352: LD_VAR 0 13
13356: PPUSH
13357: CALL_OW 296
13361: PUSH
13362: LD_INT 30
13364: LESS
13365: AND
13366: IFFALSE 13382
// ComAttackUnit ( i , e ) ;
13368: LD_VAR 0 5
13372: PPUSH
13373: LD_VAR 0 13
13377: PPUSH
13378: CALL_OW 115
// end ; end ; end ;
13382: GO 13385
13384: POP
// if IsDead ( i ) then
13385: LD_VAR 0 5
13389: PPUSH
13390: CALL_OW 301
13394: IFFALSE 13412
// defenders := defenders diff i ;
13396: LD_ADDR_VAR 0 2
13400: PUSH
13401: LD_VAR 0 2
13405: PUSH
13406: LD_VAR 0 5
13410: DIFF
13411: ST_TO_ADDR
// end ;
13412: GO 12728
13414: POP
13415: POP
// until not enemy or not defenders ;
13416: LD_VAR 0 3
13420: NOT
13421: PUSH
13422: LD_VAR 0 2
13426: NOT
13427: OR
13428: IFFALSE 12695
// MC_Reset ( base , 18 ) ;
13430: LD_VAR 0 1
13434: PPUSH
13435: LD_INT 18
13437: PPUSH
13438: CALL 56859 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
13442: LD_ADDR_VAR 0 2
13446: PUSH
13447: LD_VAR 0 2
13451: PUSH
13452: LD_VAR 0 2
13456: PPUSH
13457: LD_INT 2
13459: PUSH
13460: LD_INT 25
13462: PUSH
13463: LD_INT 1
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: PUSH
13470: LD_INT 25
13472: PUSH
13473: LD_INT 5
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PUSH
13480: LD_INT 25
13482: PUSH
13483: LD_INT 8
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: PUSH
13490: LD_INT 25
13492: PUSH
13493: LD_INT 9
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: PPUSH
13507: CALL_OW 72
13511: DIFF
13512: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
13513: LD_VAR 0 3
13517: NOT
13518: PUSH
13519: LD_VAR 0 2
13523: PPUSH
13524: LD_INT 21
13526: PUSH
13527: LD_INT 2
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PPUSH
13534: CALL_OW 72
13538: AND
13539: IFFALSE 13801
// begin tmp := FilterByTag ( defenders , 19 ) ;
13541: LD_ADDR_VAR 0 11
13545: PUSH
13546: LD_VAR 0 2
13550: PPUSH
13551: LD_INT 19
13553: PPUSH
13554: CALL 50157 0 2
13558: ST_TO_ADDR
// if tmp then
13559: LD_VAR 0 11
13563: IFFALSE 13633
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
13565: LD_ADDR_VAR 0 11
13569: PUSH
13570: LD_VAR 0 11
13574: PPUSH
13575: LD_INT 25
13577: PUSH
13578: LD_INT 3
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: PPUSH
13585: CALL_OW 72
13589: ST_TO_ADDR
// if tmp then
13590: LD_VAR 0 11
13594: IFFALSE 13633
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
13596: LD_ADDR_EXP 64
13600: PUSH
13601: LD_EXP 64
13605: PPUSH
13606: LD_VAR 0 1
13610: PPUSH
13611: LD_EXP 64
13615: PUSH
13616: LD_VAR 0 1
13620: ARRAY
13621: PUSH
13622: LD_VAR 0 11
13626: UNION
13627: PPUSH
13628: CALL_OW 1
13632: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
13633: LD_VAR 0 1
13637: PPUSH
13638: LD_INT 19
13640: PPUSH
13641: CALL 56859 0 2
// repeat wait ( 0 0$1 ) ;
13645: LD_INT 35
13647: PPUSH
13648: CALL_OW 67
// for i in defenders do
13652: LD_ADDR_VAR 0 5
13656: PUSH
13657: LD_VAR 0 2
13661: PUSH
13662: FOR_IN
13663: IFFALSE 13752
// begin if not IsInArea ( i , mc_parking [ base ] ) then
13665: LD_VAR 0 5
13669: PPUSH
13670: LD_EXP 76
13674: PUSH
13675: LD_VAR 0 1
13679: ARRAY
13680: PPUSH
13681: CALL_OW 308
13685: NOT
13686: IFFALSE 13710
// ComMoveToArea ( i , mc_parking [ base ] ) else
13688: LD_VAR 0 5
13692: PPUSH
13693: LD_EXP 76
13697: PUSH
13698: LD_VAR 0 1
13702: ARRAY
13703: PPUSH
13704: CALL_OW 113
13708: GO 13750
// if GetControl ( i ) = control_manual then
13710: LD_VAR 0 5
13714: PPUSH
13715: CALL_OW 263
13719: PUSH
13720: LD_INT 1
13722: EQUAL
13723: IFFALSE 13750
// if IsDrivenBy ( i ) then
13725: LD_VAR 0 5
13729: PPUSH
13730: CALL_OW 311
13734: IFFALSE 13750
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
13736: LD_VAR 0 5
13740: PPUSH
13741: CALL_OW 311
13745: PPUSH
13746: CALL_OW 121
// end ;
13750: GO 13662
13752: POP
13753: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
13754: LD_VAR 0 2
13758: PPUSH
13759: LD_INT 95
13761: PUSH
13762: LD_EXP 76
13766: PUSH
13767: LD_VAR 0 1
13771: ARRAY
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: PPUSH
13777: CALL_OW 72
13781: PUSH
13782: LD_VAR 0 2
13786: EQUAL
13787: PUSH
13788: LD_EXP 75
13792: PUSH
13793: LD_VAR 0 1
13797: ARRAY
13798: OR
13799: IFFALSE 13645
// end ; MC_Reset ( base , 20 ) ;
13801: LD_VAR 0 1
13805: PPUSH
13806: LD_INT 20
13808: PPUSH
13809: CALL 56859 0 2
// end ;
13813: LD_VAR 0 4
13817: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
13818: LD_INT 0
13820: PPUSH
13821: PPUSH
13822: PPUSH
13823: PPUSH
// result := false ;
13824: LD_ADDR_VAR 0 2
13828: PUSH
13829: LD_INT 0
13831: ST_TO_ADDR
// side := GetSide ( unit ) ;
13832: LD_ADDR_VAR 0 3
13836: PUSH
13837: LD_VAR 0 1
13841: PPUSH
13842: CALL_OW 255
13846: ST_TO_ADDR
// nat := GetNation ( unit ) ;
13847: LD_ADDR_VAR 0 4
13851: PUSH
13852: LD_VAR 0 1
13856: PPUSH
13857: CALL_OW 248
13861: ST_TO_ADDR
// case nat of 1 :
13862: LD_VAR 0 4
13866: PUSH
13867: LD_INT 1
13869: DOUBLE
13870: EQUAL
13871: IFTRUE 13875
13873: GO 13886
13875: POP
// tech := tech_lassight ; 2 :
13876: LD_ADDR_VAR 0 5
13880: PUSH
13881: LD_INT 12
13883: ST_TO_ADDR
13884: GO 13925
13886: LD_INT 2
13888: DOUBLE
13889: EQUAL
13890: IFTRUE 13894
13892: GO 13905
13894: POP
// tech := tech_mortar ; 3 :
13895: LD_ADDR_VAR 0 5
13899: PUSH
13900: LD_INT 41
13902: ST_TO_ADDR
13903: GO 13925
13905: LD_INT 3
13907: DOUBLE
13908: EQUAL
13909: IFTRUE 13913
13911: GO 13924
13913: POP
// tech := tech_bazooka ; end ;
13914: LD_ADDR_VAR 0 5
13918: PUSH
13919: LD_INT 44
13921: ST_TO_ADDR
13922: GO 13925
13924: POP
// if Researched ( side , tech ) then
13925: LD_VAR 0 3
13929: PPUSH
13930: LD_VAR 0 5
13934: PPUSH
13935: CALL_OW 325
13939: IFFALSE 13966
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
13941: LD_ADDR_VAR 0 2
13945: PUSH
13946: LD_INT 5
13948: PUSH
13949: LD_INT 8
13951: PUSH
13952: LD_INT 9
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: LIST
13959: PUSH
13960: LD_VAR 0 4
13964: ARRAY
13965: ST_TO_ADDR
// end ;
13966: LD_VAR 0 2
13970: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
13971: LD_INT 0
13973: PPUSH
13974: PPUSH
13975: PPUSH
// if not mines then
13976: LD_VAR 0 2
13980: NOT
13981: IFFALSE 13985
// exit ;
13983: GO 14129
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13985: LD_ADDR_VAR 0 5
13989: PUSH
13990: LD_INT 81
13992: PUSH
13993: LD_VAR 0 1
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: PUSH
14002: LD_INT 3
14004: PUSH
14005: LD_INT 21
14007: PUSH
14008: LD_INT 3
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: PPUSH
14023: CALL_OW 69
14027: ST_TO_ADDR
// for i in mines do
14028: LD_ADDR_VAR 0 4
14032: PUSH
14033: LD_VAR 0 2
14037: PUSH
14038: FOR_IN
14039: IFFALSE 14127
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
14041: LD_VAR 0 4
14045: PUSH
14046: LD_INT 1
14048: ARRAY
14049: PPUSH
14050: LD_VAR 0 4
14054: PUSH
14055: LD_INT 2
14057: ARRAY
14058: PPUSH
14059: CALL_OW 458
14063: NOT
14064: IFFALSE 14068
// continue ;
14066: GO 14038
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
14068: LD_VAR 0 4
14072: PUSH
14073: LD_INT 1
14075: ARRAY
14076: PPUSH
14077: LD_VAR 0 4
14081: PUSH
14082: LD_INT 2
14084: ARRAY
14085: PPUSH
14086: CALL_OW 428
14090: PUSH
14091: LD_VAR 0 5
14095: IN
14096: IFFALSE 14125
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
14098: LD_VAR 0 4
14102: PUSH
14103: LD_INT 1
14105: ARRAY
14106: PPUSH
14107: LD_VAR 0 4
14111: PUSH
14112: LD_INT 2
14114: ARRAY
14115: PPUSH
14116: LD_VAR 0 1
14120: PPUSH
14121: CALL_OW 456
// end ;
14125: GO 14038
14127: POP
14128: POP
// end ;
14129: LD_VAR 0 3
14133: RET
// export function Count ( array ) ; var i ; begin
14134: LD_INT 0
14136: PPUSH
14137: PPUSH
// result := 0 ;
14138: LD_ADDR_VAR 0 2
14142: PUSH
14143: LD_INT 0
14145: ST_TO_ADDR
// for i in array do
14146: LD_ADDR_VAR 0 3
14150: PUSH
14151: LD_VAR 0 1
14155: PUSH
14156: FOR_IN
14157: IFFALSE 14181
// if i then
14159: LD_VAR 0 3
14163: IFFALSE 14179
// result := result + 1 ;
14165: LD_ADDR_VAR 0 2
14169: PUSH
14170: LD_VAR 0 2
14174: PUSH
14175: LD_INT 1
14177: PLUS
14178: ST_TO_ADDR
14179: GO 14156
14181: POP
14182: POP
// end ;
14183: LD_VAR 0 2
14187: RET
// export function IsEmpty ( building ) ; begin
14188: LD_INT 0
14190: PPUSH
// if not building then
14191: LD_VAR 0 1
14195: NOT
14196: IFFALSE 14200
// exit ;
14198: GO 14243
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
14200: LD_ADDR_VAR 0 2
14204: PUSH
14205: LD_VAR 0 1
14209: PUSH
14210: LD_INT 22
14212: PUSH
14213: LD_VAR 0 1
14217: PPUSH
14218: CALL_OW 255
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: PUSH
14227: LD_INT 58
14229: PUSH
14230: EMPTY
14231: LIST
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: PPUSH
14237: CALL_OW 69
14241: IN
14242: ST_TO_ADDR
// end ;
14243: LD_VAR 0 2
14247: RET
// export function IsNotFull ( building ) ; begin
14248: LD_INT 0
14250: PPUSH
// if not building then
14251: LD_VAR 0 1
14255: NOT
14256: IFFALSE 14260
// exit ;
14258: GO 14279
// result := UnitsInside ( building ) < 6 ;
14260: LD_ADDR_VAR 0 2
14264: PUSH
14265: LD_VAR 0 1
14269: PPUSH
14270: CALL_OW 313
14274: PUSH
14275: LD_INT 6
14277: LESS
14278: ST_TO_ADDR
// end ;
14279: LD_VAR 0 2
14283: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
14284: LD_INT 0
14286: PPUSH
14287: PPUSH
14288: PPUSH
14289: PPUSH
// tmp := [ ] ;
14290: LD_ADDR_VAR 0 3
14294: PUSH
14295: EMPTY
14296: ST_TO_ADDR
// list := [ ] ;
14297: LD_ADDR_VAR 0 5
14301: PUSH
14302: EMPTY
14303: ST_TO_ADDR
// for i = 16 to 25 do
14304: LD_ADDR_VAR 0 4
14308: PUSH
14309: DOUBLE
14310: LD_INT 16
14312: DEC
14313: ST_TO_ADDR
14314: LD_INT 25
14316: PUSH
14317: FOR_TO
14318: IFFALSE 14391
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
14320: LD_ADDR_VAR 0 3
14324: PUSH
14325: LD_VAR 0 3
14329: PUSH
14330: LD_INT 22
14332: PUSH
14333: LD_VAR 0 1
14337: PPUSH
14338: CALL_OW 255
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: PUSH
14347: LD_INT 91
14349: PUSH
14350: LD_VAR 0 1
14354: PUSH
14355: LD_INT 6
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: LIST
14362: PUSH
14363: LD_INT 30
14365: PUSH
14366: LD_VAR 0 4
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: LIST
14379: PUSH
14380: EMPTY
14381: LIST
14382: PPUSH
14383: CALL_OW 69
14387: ADD
14388: ST_TO_ADDR
14389: GO 14317
14391: POP
14392: POP
// for i = 1 to tmp do
14393: LD_ADDR_VAR 0 4
14397: PUSH
14398: DOUBLE
14399: LD_INT 1
14401: DEC
14402: ST_TO_ADDR
14403: LD_VAR 0 3
14407: PUSH
14408: FOR_TO
14409: IFFALSE 14497
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
14411: LD_ADDR_VAR 0 5
14415: PUSH
14416: LD_VAR 0 5
14420: PUSH
14421: LD_VAR 0 3
14425: PUSH
14426: LD_VAR 0 4
14430: ARRAY
14431: PPUSH
14432: CALL_OW 266
14436: PUSH
14437: LD_VAR 0 3
14441: PUSH
14442: LD_VAR 0 4
14446: ARRAY
14447: PPUSH
14448: CALL_OW 250
14452: PUSH
14453: LD_VAR 0 3
14457: PUSH
14458: LD_VAR 0 4
14462: ARRAY
14463: PPUSH
14464: CALL_OW 251
14468: PUSH
14469: LD_VAR 0 3
14473: PUSH
14474: LD_VAR 0 4
14478: ARRAY
14479: PPUSH
14480: CALL_OW 254
14484: PUSH
14485: EMPTY
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: PUSH
14491: EMPTY
14492: LIST
14493: ADD
14494: ST_TO_ADDR
14495: GO 14408
14497: POP
14498: POP
// result := list ;
14499: LD_ADDR_VAR 0 2
14503: PUSH
14504: LD_VAR 0 5
14508: ST_TO_ADDR
// end ;
14509: LD_VAR 0 2
14513: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
14514: LD_INT 0
14516: PPUSH
14517: PPUSH
14518: PPUSH
14519: PPUSH
14520: PPUSH
14521: PPUSH
14522: PPUSH
// if not factory then
14523: LD_VAR 0 1
14527: NOT
14528: IFFALSE 14532
// exit ;
14530: GO 15064
// if control = control_apeman then
14532: LD_VAR 0 4
14536: PUSH
14537: LD_INT 5
14539: EQUAL
14540: IFFALSE 14649
// begin tmp := UnitsInside ( factory ) ;
14542: LD_ADDR_VAR 0 8
14546: PUSH
14547: LD_VAR 0 1
14551: PPUSH
14552: CALL_OW 313
14556: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
14557: LD_VAR 0 8
14561: PPUSH
14562: LD_INT 25
14564: PUSH
14565: LD_INT 12
14567: PUSH
14568: EMPTY
14569: LIST
14570: LIST
14571: PPUSH
14572: CALL_OW 72
14576: NOT
14577: IFFALSE 14587
// control := control_manual ;
14579: LD_ADDR_VAR 0 4
14583: PUSH
14584: LD_INT 1
14586: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
14587: LD_ADDR_VAR 0 8
14591: PUSH
14592: LD_VAR 0 1
14596: PPUSH
14597: CALL 14284 0 1
14601: ST_TO_ADDR
// if tmp then
14602: LD_VAR 0 8
14606: IFFALSE 14649
// begin for i in tmp do
14608: LD_ADDR_VAR 0 7
14612: PUSH
14613: LD_VAR 0 8
14617: PUSH
14618: FOR_IN
14619: IFFALSE 14647
// if i [ 1 ] = b_ext_radar then
14621: LD_VAR 0 7
14625: PUSH
14626: LD_INT 1
14628: ARRAY
14629: PUSH
14630: LD_INT 20
14632: EQUAL
14633: IFFALSE 14645
// begin control := control_remote ;
14635: LD_ADDR_VAR 0 4
14639: PUSH
14640: LD_INT 2
14642: ST_TO_ADDR
// break ;
14643: GO 14647
// end ;
14645: GO 14618
14647: POP
14648: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
14649: LD_VAR 0 1
14653: PPUSH
14654: LD_VAR 0 2
14658: PPUSH
14659: LD_VAR 0 3
14663: PPUSH
14664: LD_VAR 0 4
14668: PPUSH
14669: LD_VAR 0 5
14673: PPUSH
14674: CALL_OW 448
14678: IFFALSE 14713
// begin result := [ chassis , engine , control , weapon ] ;
14680: LD_ADDR_VAR 0 6
14684: PUSH
14685: LD_VAR 0 2
14689: PUSH
14690: LD_VAR 0 3
14694: PUSH
14695: LD_VAR 0 4
14699: PUSH
14700: LD_VAR 0 5
14704: PUSH
14705: EMPTY
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: ST_TO_ADDR
// exit ;
14711: GO 15064
// end ; _chassis := AvailableChassisList ( factory ) ;
14713: LD_ADDR_VAR 0 9
14717: PUSH
14718: LD_VAR 0 1
14722: PPUSH
14723: CALL_OW 475
14727: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
14728: LD_ADDR_VAR 0 11
14732: PUSH
14733: LD_VAR 0 1
14737: PPUSH
14738: CALL_OW 476
14742: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
14743: LD_ADDR_VAR 0 12
14747: PUSH
14748: LD_VAR 0 1
14752: PPUSH
14753: CALL_OW 477
14757: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
14758: LD_ADDR_VAR 0 10
14762: PUSH
14763: LD_VAR 0 1
14767: PPUSH
14768: CALL_OW 478
14772: ST_TO_ADDR
// if not chassis in _chassis then
14773: LD_VAR 0 2
14777: PUSH
14778: LD_VAR 0 9
14782: IN
14783: NOT
14784: IFFALSE 14810
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
14786: LD_ADDR_VAR 0 2
14790: PUSH
14791: LD_VAR 0 9
14795: PUSH
14796: LD_INT 1
14798: PPUSH
14799: LD_VAR 0 9
14803: PPUSH
14804: CALL_OW 12
14808: ARRAY
14809: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
14810: LD_VAR 0 2
14814: PPUSH
14815: LD_VAR 0 3
14819: PPUSH
14820: CALL 15069 0 2
14824: NOT
14825: IFFALSE 14884
// repeat engine := _engine [ 1 ] ;
14827: LD_ADDR_VAR 0 3
14831: PUSH
14832: LD_VAR 0 11
14836: PUSH
14837: LD_INT 1
14839: ARRAY
14840: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
14841: LD_ADDR_VAR 0 11
14845: PUSH
14846: LD_VAR 0 11
14850: PPUSH
14851: LD_INT 1
14853: PPUSH
14854: CALL_OW 3
14858: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
14859: LD_VAR 0 2
14863: PPUSH
14864: LD_VAR 0 3
14868: PPUSH
14869: CALL 15069 0 2
14873: PUSH
14874: LD_VAR 0 11
14878: PUSH
14879: EMPTY
14880: EQUAL
14881: OR
14882: IFFALSE 14827
// if not control in _control then
14884: LD_VAR 0 4
14888: PUSH
14889: LD_VAR 0 12
14893: IN
14894: NOT
14895: IFFALSE 14921
// control := _control [ rand ( 1 , _control ) ] ;
14897: LD_ADDR_VAR 0 4
14901: PUSH
14902: LD_VAR 0 12
14906: PUSH
14907: LD_INT 1
14909: PPUSH
14910: LD_VAR 0 12
14914: PPUSH
14915: CALL_OW 12
14919: ARRAY
14920: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
14921: LD_VAR 0 2
14925: PPUSH
14926: LD_VAR 0 5
14930: PPUSH
14931: CALL 15289 0 2
14935: NOT
14936: IFFALSE 14995
// repeat weapon := _weapon [ 1 ] ;
14938: LD_ADDR_VAR 0 5
14942: PUSH
14943: LD_VAR 0 10
14947: PUSH
14948: LD_INT 1
14950: ARRAY
14951: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
14952: LD_ADDR_VAR 0 10
14956: PUSH
14957: LD_VAR 0 10
14961: PPUSH
14962: LD_INT 1
14964: PPUSH
14965: CALL_OW 3
14969: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
14970: LD_VAR 0 2
14974: PPUSH
14975: LD_VAR 0 5
14979: PPUSH
14980: CALL 15289 0 2
14984: PUSH
14985: LD_VAR 0 10
14989: PUSH
14990: EMPTY
14991: EQUAL
14992: OR
14993: IFFALSE 14938
// result := [ ] ;
14995: LD_ADDR_VAR 0 6
14999: PUSH
15000: EMPTY
15001: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15002: LD_VAR 0 1
15006: PPUSH
15007: LD_VAR 0 2
15011: PPUSH
15012: LD_VAR 0 3
15016: PPUSH
15017: LD_VAR 0 4
15021: PPUSH
15022: LD_VAR 0 5
15026: PPUSH
15027: CALL_OW 448
15031: IFFALSE 15064
// result := [ chassis , engine , control , weapon ] ;
15033: LD_ADDR_VAR 0 6
15037: PUSH
15038: LD_VAR 0 2
15042: PUSH
15043: LD_VAR 0 3
15047: PUSH
15048: LD_VAR 0 4
15052: PUSH
15053: LD_VAR 0 5
15057: PUSH
15058: EMPTY
15059: LIST
15060: LIST
15061: LIST
15062: LIST
15063: ST_TO_ADDR
// end ;
15064: LD_VAR 0 6
15068: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
15069: LD_INT 0
15071: PPUSH
// if not chassis or not engine then
15072: LD_VAR 0 1
15076: NOT
15077: PUSH
15078: LD_VAR 0 2
15082: NOT
15083: OR
15084: IFFALSE 15088
// exit ;
15086: GO 15284
// case engine of engine_solar :
15088: LD_VAR 0 2
15092: PUSH
15093: LD_INT 2
15095: DOUBLE
15096: EQUAL
15097: IFTRUE 15101
15099: GO 15139
15101: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
15102: LD_ADDR_VAR 0 3
15106: PUSH
15107: LD_INT 11
15109: PUSH
15110: LD_INT 12
15112: PUSH
15113: LD_INT 13
15115: PUSH
15116: LD_INT 14
15118: PUSH
15119: LD_INT 1
15121: PUSH
15122: LD_INT 2
15124: PUSH
15125: LD_INT 3
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: ST_TO_ADDR
15137: GO 15268
15139: LD_INT 1
15141: DOUBLE
15142: EQUAL
15143: IFTRUE 15147
15145: GO 15209
15147: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
15148: LD_ADDR_VAR 0 3
15152: PUSH
15153: LD_INT 11
15155: PUSH
15156: LD_INT 12
15158: PUSH
15159: LD_INT 13
15161: PUSH
15162: LD_INT 14
15164: PUSH
15165: LD_INT 1
15167: PUSH
15168: LD_INT 2
15170: PUSH
15171: LD_INT 3
15173: PUSH
15174: LD_INT 4
15176: PUSH
15177: LD_INT 5
15179: PUSH
15180: LD_INT 21
15182: PUSH
15183: LD_INT 23
15185: PUSH
15186: LD_INT 22
15188: PUSH
15189: LD_INT 24
15191: PUSH
15192: EMPTY
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: ST_TO_ADDR
15207: GO 15268
15209: LD_INT 3
15211: DOUBLE
15212: EQUAL
15213: IFTRUE 15217
15215: GO 15267
15217: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15218: LD_ADDR_VAR 0 3
15222: PUSH
15223: LD_INT 13
15225: PUSH
15226: LD_INT 14
15228: PUSH
15229: LD_INT 2
15231: PUSH
15232: LD_INT 3
15234: PUSH
15235: LD_INT 4
15237: PUSH
15238: LD_INT 5
15240: PUSH
15241: LD_INT 21
15243: PUSH
15244: LD_INT 22
15246: PUSH
15247: LD_INT 23
15249: PUSH
15250: LD_INT 24
15252: PUSH
15253: EMPTY
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: ST_TO_ADDR
15265: GO 15268
15267: POP
// result := ( chassis in result ) ;
15268: LD_ADDR_VAR 0 3
15272: PUSH
15273: LD_VAR 0 1
15277: PUSH
15278: LD_VAR 0 3
15282: IN
15283: ST_TO_ADDR
// end ;
15284: LD_VAR 0 3
15288: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
15289: LD_INT 0
15291: PPUSH
// if not chassis or not weapon then
15292: LD_VAR 0 1
15296: NOT
15297: PUSH
15298: LD_VAR 0 2
15302: NOT
15303: OR
15304: IFFALSE 15308
// exit ;
15306: GO 16334
// case weapon of us_machine_gun :
15308: LD_VAR 0 2
15312: PUSH
15313: LD_INT 2
15315: DOUBLE
15316: EQUAL
15317: IFTRUE 15321
15319: GO 15351
15321: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
15322: LD_ADDR_VAR 0 3
15326: PUSH
15327: LD_INT 1
15329: PUSH
15330: LD_INT 2
15332: PUSH
15333: LD_INT 3
15335: PUSH
15336: LD_INT 4
15338: PUSH
15339: LD_INT 5
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: ST_TO_ADDR
15349: GO 16318
15351: LD_INT 3
15353: DOUBLE
15354: EQUAL
15355: IFTRUE 15359
15357: GO 15389
15359: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
15360: LD_ADDR_VAR 0 3
15364: PUSH
15365: LD_INT 1
15367: PUSH
15368: LD_INT 2
15370: PUSH
15371: LD_INT 3
15373: PUSH
15374: LD_INT 4
15376: PUSH
15377: LD_INT 5
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: ST_TO_ADDR
15387: GO 16318
15389: LD_INT 11
15391: DOUBLE
15392: EQUAL
15393: IFTRUE 15397
15395: GO 15427
15397: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
15398: LD_ADDR_VAR 0 3
15402: PUSH
15403: LD_INT 1
15405: PUSH
15406: LD_INT 2
15408: PUSH
15409: LD_INT 3
15411: PUSH
15412: LD_INT 4
15414: PUSH
15415: LD_INT 5
15417: PUSH
15418: EMPTY
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: ST_TO_ADDR
15425: GO 16318
15427: LD_INT 4
15429: DOUBLE
15430: EQUAL
15431: IFTRUE 15435
15433: GO 15461
15435: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
15436: LD_ADDR_VAR 0 3
15440: PUSH
15441: LD_INT 2
15443: PUSH
15444: LD_INT 3
15446: PUSH
15447: LD_INT 4
15449: PUSH
15450: LD_INT 5
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: ST_TO_ADDR
15459: GO 16318
15461: LD_INT 5
15463: DOUBLE
15464: EQUAL
15465: IFTRUE 15469
15467: GO 15495
15469: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
15470: LD_ADDR_VAR 0 3
15474: PUSH
15475: LD_INT 2
15477: PUSH
15478: LD_INT 3
15480: PUSH
15481: LD_INT 4
15483: PUSH
15484: LD_INT 5
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: ST_TO_ADDR
15493: GO 16318
15495: LD_INT 9
15497: DOUBLE
15498: EQUAL
15499: IFTRUE 15503
15501: GO 15529
15503: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
15504: LD_ADDR_VAR 0 3
15508: PUSH
15509: LD_INT 2
15511: PUSH
15512: LD_INT 3
15514: PUSH
15515: LD_INT 4
15517: PUSH
15518: LD_INT 5
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: ST_TO_ADDR
15527: GO 16318
15529: LD_INT 7
15531: DOUBLE
15532: EQUAL
15533: IFTRUE 15537
15535: GO 15563
15537: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
15538: LD_ADDR_VAR 0 3
15542: PUSH
15543: LD_INT 2
15545: PUSH
15546: LD_INT 3
15548: PUSH
15549: LD_INT 4
15551: PUSH
15552: LD_INT 5
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: ST_TO_ADDR
15561: GO 16318
15563: LD_INT 12
15565: DOUBLE
15566: EQUAL
15567: IFTRUE 15571
15569: GO 15597
15571: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
15572: LD_ADDR_VAR 0 3
15576: PUSH
15577: LD_INT 2
15579: PUSH
15580: LD_INT 3
15582: PUSH
15583: LD_INT 4
15585: PUSH
15586: LD_INT 5
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: ST_TO_ADDR
15595: GO 16318
15597: LD_INT 13
15599: DOUBLE
15600: EQUAL
15601: IFTRUE 15605
15603: GO 15631
15605: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
15606: LD_ADDR_VAR 0 3
15610: PUSH
15611: LD_INT 2
15613: PUSH
15614: LD_INT 3
15616: PUSH
15617: LD_INT 4
15619: PUSH
15620: LD_INT 5
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: ST_TO_ADDR
15629: GO 16318
15631: LD_INT 14
15633: DOUBLE
15634: EQUAL
15635: IFTRUE 15639
15637: GO 15657
15639: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
15640: LD_ADDR_VAR 0 3
15644: PUSH
15645: LD_INT 4
15647: PUSH
15648: LD_INT 5
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: ST_TO_ADDR
15655: GO 16318
15657: LD_INT 6
15659: DOUBLE
15660: EQUAL
15661: IFTRUE 15665
15663: GO 15683
15665: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
15666: LD_ADDR_VAR 0 3
15670: PUSH
15671: LD_INT 4
15673: PUSH
15674: LD_INT 5
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: ST_TO_ADDR
15681: GO 16318
15683: LD_INT 10
15685: DOUBLE
15686: EQUAL
15687: IFTRUE 15691
15689: GO 15709
15691: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
15692: LD_ADDR_VAR 0 3
15696: PUSH
15697: LD_INT 4
15699: PUSH
15700: LD_INT 5
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: ST_TO_ADDR
15707: GO 16318
15709: LD_INT 22
15711: DOUBLE
15712: EQUAL
15713: IFTRUE 15717
15715: GO 15743
15717: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
15718: LD_ADDR_VAR 0 3
15722: PUSH
15723: LD_INT 11
15725: PUSH
15726: LD_INT 12
15728: PUSH
15729: LD_INT 13
15731: PUSH
15732: LD_INT 14
15734: PUSH
15735: EMPTY
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: ST_TO_ADDR
15741: GO 16318
15743: LD_INT 23
15745: DOUBLE
15746: EQUAL
15747: IFTRUE 15751
15749: GO 15777
15751: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
15752: LD_ADDR_VAR 0 3
15756: PUSH
15757: LD_INT 11
15759: PUSH
15760: LD_INT 12
15762: PUSH
15763: LD_INT 13
15765: PUSH
15766: LD_INT 14
15768: PUSH
15769: EMPTY
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: ST_TO_ADDR
15775: GO 16318
15777: LD_INT 24
15779: DOUBLE
15780: EQUAL
15781: IFTRUE 15785
15783: GO 15811
15785: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
15786: LD_ADDR_VAR 0 3
15790: PUSH
15791: LD_INT 11
15793: PUSH
15794: LD_INT 12
15796: PUSH
15797: LD_INT 13
15799: PUSH
15800: LD_INT 14
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: ST_TO_ADDR
15809: GO 16318
15811: LD_INT 30
15813: DOUBLE
15814: EQUAL
15815: IFTRUE 15819
15817: GO 15845
15819: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
15820: LD_ADDR_VAR 0 3
15824: PUSH
15825: LD_INT 11
15827: PUSH
15828: LD_INT 12
15830: PUSH
15831: LD_INT 13
15833: PUSH
15834: LD_INT 14
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: ST_TO_ADDR
15843: GO 16318
15845: LD_INT 25
15847: DOUBLE
15848: EQUAL
15849: IFTRUE 15853
15851: GO 15871
15853: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
15854: LD_ADDR_VAR 0 3
15858: PUSH
15859: LD_INT 13
15861: PUSH
15862: LD_INT 14
15864: PUSH
15865: EMPTY
15866: LIST
15867: LIST
15868: ST_TO_ADDR
15869: GO 16318
15871: LD_INT 27
15873: DOUBLE
15874: EQUAL
15875: IFTRUE 15879
15877: GO 15897
15879: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
15880: LD_ADDR_VAR 0 3
15884: PUSH
15885: LD_INT 13
15887: PUSH
15888: LD_INT 14
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: ST_TO_ADDR
15895: GO 16318
15897: LD_INT 28
15899: DOUBLE
15900: EQUAL
15901: IFTRUE 15905
15903: GO 15923
15905: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
15906: LD_ADDR_VAR 0 3
15910: PUSH
15911: LD_INT 13
15913: PUSH
15914: LD_INT 14
15916: PUSH
15917: EMPTY
15918: LIST
15919: LIST
15920: ST_TO_ADDR
15921: GO 16318
15923: LD_INT 29
15925: DOUBLE
15926: EQUAL
15927: IFTRUE 15931
15929: GO 15949
15931: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
15932: LD_ADDR_VAR 0 3
15936: PUSH
15937: LD_INT 13
15939: PUSH
15940: LD_INT 14
15942: PUSH
15943: EMPTY
15944: LIST
15945: LIST
15946: ST_TO_ADDR
15947: GO 16318
15949: LD_INT 31
15951: DOUBLE
15952: EQUAL
15953: IFTRUE 15957
15955: GO 15975
15957: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
15958: LD_ADDR_VAR 0 3
15962: PUSH
15963: LD_INT 13
15965: PUSH
15966: LD_INT 14
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: ST_TO_ADDR
15973: GO 16318
15975: LD_INT 26
15977: DOUBLE
15978: EQUAL
15979: IFTRUE 15983
15981: GO 16001
15983: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
15984: LD_ADDR_VAR 0 3
15988: PUSH
15989: LD_INT 13
15991: PUSH
15992: LD_INT 14
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: ST_TO_ADDR
15999: GO 16318
16001: LD_INT 42
16003: DOUBLE
16004: EQUAL
16005: IFTRUE 16009
16007: GO 16035
16009: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
16010: LD_ADDR_VAR 0 3
16014: PUSH
16015: LD_INT 21
16017: PUSH
16018: LD_INT 22
16020: PUSH
16021: LD_INT 23
16023: PUSH
16024: LD_INT 24
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: ST_TO_ADDR
16033: GO 16318
16035: LD_INT 43
16037: DOUBLE
16038: EQUAL
16039: IFTRUE 16043
16041: GO 16069
16043: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
16044: LD_ADDR_VAR 0 3
16048: PUSH
16049: LD_INT 21
16051: PUSH
16052: LD_INT 22
16054: PUSH
16055: LD_INT 23
16057: PUSH
16058: LD_INT 24
16060: PUSH
16061: EMPTY
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: ST_TO_ADDR
16067: GO 16318
16069: LD_INT 44
16071: DOUBLE
16072: EQUAL
16073: IFTRUE 16077
16075: GO 16103
16077: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
16078: LD_ADDR_VAR 0 3
16082: PUSH
16083: LD_INT 21
16085: PUSH
16086: LD_INT 22
16088: PUSH
16089: LD_INT 23
16091: PUSH
16092: LD_INT 24
16094: PUSH
16095: EMPTY
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: ST_TO_ADDR
16101: GO 16318
16103: LD_INT 45
16105: DOUBLE
16106: EQUAL
16107: IFTRUE 16111
16109: GO 16137
16111: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
16112: LD_ADDR_VAR 0 3
16116: PUSH
16117: LD_INT 21
16119: PUSH
16120: LD_INT 22
16122: PUSH
16123: LD_INT 23
16125: PUSH
16126: LD_INT 24
16128: PUSH
16129: EMPTY
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: ST_TO_ADDR
16135: GO 16318
16137: LD_INT 49
16139: DOUBLE
16140: EQUAL
16141: IFTRUE 16145
16143: GO 16171
16145: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
16146: LD_ADDR_VAR 0 3
16150: PUSH
16151: LD_INT 21
16153: PUSH
16154: LD_INT 22
16156: PUSH
16157: LD_INT 23
16159: PUSH
16160: LD_INT 24
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: ST_TO_ADDR
16169: GO 16318
16171: LD_INT 51
16173: DOUBLE
16174: EQUAL
16175: IFTRUE 16179
16177: GO 16205
16179: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
16180: LD_ADDR_VAR 0 3
16184: PUSH
16185: LD_INT 21
16187: PUSH
16188: LD_INT 22
16190: PUSH
16191: LD_INT 23
16193: PUSH
16194: LD_INT 24
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: ST_TO_ADDR
16203: GO 16318
16205: LD_INT 52
16207: DOUBLE
16208: EQUAL
16209: IFTRUE 16213
16211: GO 16239
16213: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
16214: LD_ADDR_VAR 0 3
16218: PUSH
16219: LD_INT 21
16221: PUSH
16222: LD_INT 22
16224: PUSH
16225: LD_INT 23
16227: PUSH
16228: LD_INT 24
16230: PUSH
16231: EMPTY
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: ST_TO_ADDR
16237: GO 16318
16239: LD_INT 53
16241: DOUBLE
16242: EQUAL
16243: IFTRUE 16247
16245: GO 16265
16247: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
16248: LD_ADDR_VAR 0 3
16252: PUSH
16253: LD_INT 23
16255: PUSH
16256: LD_INT 24
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: ST_TO_ADDR
16263: GO 16318
16265: LD_INT 46
16267: DOUBLE
16268: EQUAL
16269: IFTRUE 16273
16271: GO 16291
16273: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
16274: LD_ADDR_VAR 0 3
16278: PUSH
16279: LD_INT 23
16281: PUSH
16282: LD_INT 24
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: ST_TO_ADDR
16289: GO 16318
16291: LD_INT 47
16293: DOUBLE
16294: EQUAL
16295: IFTRUE 16299
16297: GO 16317
16299: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16300: LD_ADDR_VAR 0 3
16304: PUSH
16305: LD_INT 23
16307: PUSH
16308: LD_INT 24
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: ST_TO_ADDR
16315: GO 16318
16317: POP
// result := ( chassis in result ) ;
16318: LD_ADDR_VAR 0 3
16322: PUSH
16323: LD_VAR 0 1
16327: PUSH
16328: LD_VAR 0 3
16332: IN
16333: ST_TO_ADDR
// end ;
16334: LD_VAR 0 3
16338: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
16339: LD_INT 0
16341: PPUSH
16342: PPUSH
16343: PPUSH
16344: PPUSH
16345: PPUSH
16346: PPUSH
16347: PPUSH
// result := array ;
16348: LD_ADDR_VAR 0 5
16352: PUSH
16353: LD_VAR 0 1
16357: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
16358: LD_VAR 0 1
16362: NOT
16363: PUSH
16364: LD_VAR 0 2
16368: NOT
16369: OR
16370: PUSH
16371: LD_VAR 0 3
16375: NOT
16376: OR
16377: PUSH
16378: LD_VAR 0 2
16382: PUSH
16383: LD_VAR 0 1
16387: GREATER
16388: OR
16389: PUSH
16390: LD_VAR 0 3
16394: PUSH
16395: LD_VAR 0 1
16399: GREATER
16400: OR
16401: IFFALSE 16405
// exit ;
16403: GO 16701
// if direction then
16405: LD_VAR 0 4
16409: IFFALSE 16473
// begin d := 1 ;
16411: LD_ADDR_VAR 0 9
16415: PUSH
16416: LD_INT 1
16418: ST_TO_ADDR
// if i_from > i_to then
16419: LD_VAR 0 2
16423: PUSH
16424: LD_VAR 0 3
16428: GREATER
16429: IFFALSE 16455
// length := ( array - i_from ) + i_to else
16431: LD_ADDR_VAR 0 11
16435: PUSH
16436: LD_VAR 0 1
16440: PUSH
16441: LD_VAR 0 2
16445: MINUS
16446: PUSH
16447: LD_VAR 0 3
16451: PLUS
16452: ST_TO_ADDR
16453: GO 16471
// length := i_to - i_from ;
16455: LD_ADDR_VAR 0 11
16459: PUSH
16460: LD_VAR 0 3
16464: PUSH
16465: LD_VAR 0 2
16469: MINUS
16470: ST_TO_ADDR
// end else
16471: GO 16534
// begin d := - 1 ;
16473: LD_ADDR_VAR 0 9
16477: PUSH
16478: LD_INT 1
16480: NEG
16481: ST_TO_ADDR
// if i_from > i_to then
16482: LD_VAR 0 2
16486: PUSH
16487: LD_VAR 0 3
16491: GREATER
16492: IFFALSE 16512
// length := i_from - i_to else
16494: LD_ADDR_VAR 0 11
16498: PUSH
16499: LD_VAR 0 2
16503: PUSH
16504: LD_VAR 0 3
16508: MINUS
16509: ST_TO_ADDR
16510: GO 16534
// length := ( array - i_to ) + i_from ;
16512: LD_ADDR_VAR 0 11
16516: PUSH
16517: LD_VAR 0 1
16521: PUSH
16522: LD_VAR 0 3
16526: MINUS
16527: PUSH
16528: LD_VAR 0 2
16532: PLUS
16533: ST_TO_ADDR
// end ; if not length then
16534: LD_VAR 0 11
16538: NOT
16539: IFFALSE 16543
// exit ;
16541: GO 16701
// tmp := array ;
16543: LD_ADDR_VAR 0 10
16547: PUSH
16548: LD_VAR 0 1
16552: ST_TO_ADDR
// for i = 1 to length do
16553: LD_ADDR_VAR 0 6
16557: PUSH
16558: DOUBLE
16559: LD_INT 1
16561: DEC
16562: ST_TO_ADDR
16563: LD_VAR 0 11
16567: PUSH
16568: FOR_TO
16569: IFFALSE 16689
// begin for j = 1 to array do
16571: LD_ADDR_VAR 0 7
16575: PUSH
16576: DOUBLE
16577: LD_INT 1
16579: DEC
16580: ST_TO_ADDR
16581: LD_VAR 0 1
16585: PUSH
16586: FOR_TO
16587: IFFALSE 16675
// begin k := j + d ;
16589: LD_ADDR_VAR 0 8
16593: PUSH
16594: LD_VAR 0 7
16598: PUSH
16599: LD_VAR 0 9
16603: PLUS
16604: ST_TO_ADDR
// if k > array then
16605: LD_VAR 0 8
16609: PUSH
16610: LD_VAR 0 1
16614: GREATER
16615: IFFALSE 16625
// k := 1 ;
16617: LD_ADDR_VAR 0 8
16621: PUSH
16622: LD_INT 1
16624: ST_TO_ADDR
// if not k then
16625: LD_VAR 0 8
16629: NOT
16630: IFFALSE 16642
// k := array ;
16632: LD_ADDR_VAR 0 8
16636: PUSH
16637: LD_VAR 0 1
16641: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
16642: LD_ADDR_VAR 0 10
16646: PUSH
16647: LD_VAR 0 10
16651: PPUSH
16652: LD_VAR 0 8
16656: PPUSH
16657: LD_VAR 0 1
16661: PUSH
16662: LD_VAR 0 7
16666: ARRAY
16667: PPUSH
16668: CALL_OW 1
16672: ST_TO_ADDR
// end ;
16673: GO 16586
16675: POP
16676: POP
// array := tmp ;
16677: LD_ADDR_VAR 0 1
16681: PUSH
16682: LD_VAR 0 10
16686: ST_TO_ADDR
// end ;
16687: GO 16568
16689: POP
16690: POP
// result := array ;
16691: LD_ADDR_VAR 0 5
16695: PUSH
16696: LD_VAR 0 1
16700: ST_TO_ADDR
// end ;
16701: LD_VAR 0 5
16705: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
16706: LD_INT 0
16708: PPUSH
16709: PPUSH
// result := 0 ;
16710: LD_ADDR_VAR 0 3
16714: PUSH
16715: LD_INT 0
16717: ST_TO_ADDR
// if not array or not value in array then
16718: LD_VAR 0 1
16722: NOT
16723: PUSH
16724: LD_VAR 0 2
16728: PUSH
16729: LD_VAR 0 1
16733: IN
16734: NOT
16735: OR
16736: IFFALSE 16740
// exit ;
16738: GO 16794
// for i = 1 to array do
16740: LD_ADDR_VAR 0 4
16744: PUSH
16745: DOUBLE
16746: LD_INT 1
16748: DEC
16749: ST_TO_ADDR
16750: LD_VAR 0 1
16754: PUSH
16755: FOR_TO
16756: IFFALSE 16792
// if value = array [ i ] then
16758: LD_VAR 0 2
16762: PUSH
16763: LD_VAR 0 1
16767: PUSH
16768: LD_VAR 0 4
16772: ARRAY
16773: EQUAL
16774: IFFALSE 16790
// begin result := i ;
16776: LD_ADDR_VAR 0 3
16780: PUSH
16781: LD_VAR 0 4
16785: ST_TO_ADDR
// exit ;
16786: POP
16787: POP
16788: GO 16794
// end ;
16790: GO 16755
16792: POP
16793: POP
// end ;
16794: LD_VAR 0 3
16798: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
16799: LD_INT 0
16801: PPUSH
// vc_chassis := chassis ;
16802: LD_ADDR_OWVAR 37
16806: PUSH
16807: LD_VAR 0 1
16811: ST_TO_ADDR
// vc_engine := engine ;
16812: LD_ADDR_OWVAR 39
16816: PUSH
16817: LD_VAR 0 2
16821: ST_TO_ADDR
// vc_control := control ;
16822: LD_ADDR_OWVAR 38
16826: PUSH
16827: LD_VAR 0 3
16831: ST_TO_ADDR
// vc_weapon := weapon ;
16832: LD_ADDR_OWVAR 40
16836: PUSH
16837: LD_VAR 0 4
16841: ST_TO_ADDR
// vc_fuel_battery := fuel ;
16842: LD_ADDR_OWVAR 41
16846: PUSH
16847: LD_VAR 0 5
16851: ST_TO_ADDR
// end ;
16852: LD_VAR 0 6
16856: RET
// export function WantPlant ( unit ) ; var task ; begin
16857: LD_INT 0
16859: PPUSH
16860: PPUSH
// result := false ;
16861: LD_ADDR_VAR 0 2
16865: PUSH
16866: LD_INT 0
16868: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
16869: LD_ADDR_VAR 0 3
16873: PUSH
16874: LD_VAR 0 1
16878: PPUSH
16879: CALL_OW 437
16883: ST_TO_ADDR
// if task then
16884: LD_VAR 0 3
16888: IFFALSE 16916
// if task [ 1 ] [ 1 ] = p then
16890: LD_VAR 0 3
16894: PUSH
16895: LD_INT 1
16897: ARRAY
16898: PUSH
16899: LD_INT 1
16901: ARRAY
16902: PUSH
16903: LD_STRING p
16905: EQUAL
16906: IFFALSE 16916
// result := true ;
16908: LD_ADDR_VAR 0 2
16912: PUSH
16913: LD_INT 1
16915: ST_TO_ADDR
// end ;
16916: LD_VAR 0 2
16920: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
16921: LD_INT 0
16923: PPUSH
16924: PPUSH
16925: PPUSH
16926: PPUSH
// if pos < 1 then
16927: LD_VAR 0 2
16931: PUSH
16932: LD_INT 1
16934: LESS
16935: IFFALSE 16939
// exit ;
16937: GO 17242
// if pos = 1 then
16939: LD_VAR 0 2
16943: PUSH
16944: LD_INT 1
16946: EQUAL
16947: IFFALSE 16980
// result := Replace ( arr , pos [ 1 ] , value ) else
16949: LD_ADDR_VAR 0 4
16953: PUSH
16954: LD_VAR 0 1
16958: PPUSH
16959: LD_VAR 0 2
16963: PUSH
16964: LD_INT 1
16966: ARRAY
16967: PPUSH
16968: LD_VAR 0 3
16972: PPUSH
16973: CALL_OW 1
16977: ST_TO_ADDR
16978: GO 17242
// begin tmp := arr ;
16980: LD_ADDR_VAR 0 6
16984: PUSH
16985: LD_VAR 0 1
16989: ST_TO_ADDR
// s_arr := [ tmp ] ;
16990: LD_ADDR_VAR 0 7
16994: PUSH
16995: LD_VAR 0 6
16999: PUSH
17000: EMPTY
17001: LIST
17002: ST_TO_ADDR
// for i = 1 to pos - 1 do
17003: LD_ADDR_VAR 0 5
17007: PUSH
17008: DOUBLE
17009: LD_INT 1
17011: DEC
17012: ST_TO_ADDR
17013: LD_VAR 0 2
17017: PUSH
17018: LD_INT 1
17020: MINUS
17021: PUSH
17022: FOR_TO
17023: IFFALSE 17068
// begin tmp := tmp [ pos [ i ] ] ;
17025: LD_ADDR_VAR 0 6
17029: PUSH
17030: LD_VAR 0 6
17034: PUSH
17035: LD_VAR 0 2
17039: PUSH
17040: LD_VAR 0 5
17044: ARRAY
17045: ARRAY
17046: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
17047: LD_ADDR_VAR 0 7
17051: PUSH
17052: LD_VAR 0 7
17056: PUSH
17057: LD_VAR 0 6
17061: PUSH
17062: EMPTY
17063: LIST
17064: ADD
17065: ST_TO_ADDR
// end ;
17066: GO 17022
17068: POP
17069: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
17070: LD_ADDR_VAR 0 6
17074: PUSH
17075: LD_VAR 0 6
17079: PPUSH
17080: LD_VAR 0 2
17084: PUSH
17085: LD_VAR 0 2
17089: ARRAY
17090: PPUSH
17091: LD_VAR 0 3
17095: PPUSH
17096: CALL_OW 1
17100: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
17101: LD_ADDR_VAR 0 7
17105: PUSH
17106: LD_VAR 0 7
17110: PPUSH
17111: LD_VAR 0 7
17115: PPUSH
17116: LD_VAR 0 6
17120: PPUSH
17121: CALL_OW 1
17125: ST_TO_ADDR
// for i = s_arr downto 2 do
17126: LD_ADDR_VAR 0 5
17130: PUSH
17131: DOUBLE
17132: LD_VAR 0 7
17136: INC
17137: ST_TO_ADDR
17138: LD_INT 2
17140: PUSH
17141: FOR_DOWNTO
17142: IFFALSE 17226
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
17144: LD_ADDR_VAR 0 6
17148: PUSH
17149: LD_VAR 0 7
17153: PUSH
17154: LD_VAR 0 5
17158: PUSH
17159: LD_INT 1
17161: MINUS
17162: ARRAY
17163: PPUSH
17164: LD_VAR 0 2
17168: PUSH
17169: LD_VAR 0 5
17173: PUSH
17174: LD_INT 1
17176: MINUS
17177: ARRAY
17178: PPUSH
17179: LD_VAR 0 7
17183: PUSH
17184: LD_VAR 0 5
17188: ARRAY
17189: PPUSH
17190: CALL_OW 1
17194: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
17195: LD_ADDR_VAR 0 7
17199: PUSH
17200: LD_VAR 0 7
17204: PPUSH
17205: LD_VAR 0 5
17209: PUSH
17210: LD_INT 1
17212: MINUS
17213: PPUSH
17214: LD_VAR 0 6
17218: PPUSH
17219: CALL_OW 1
17223: ST_TO_ADDR
// end ;
17224: GO 17141
17226: POP
17227: POP
// result := s_arr [ 1 ] ;
17228: LD_ADDR_VAR 0 4
17232: PUSH
17233: LD_VAR 0 7
17237: PUSH
17238: LD_INT 1
17240: ARRAY
17241: ST_TO_ADDR
// end ; end ;
17242: LD_VAR 0 4
17246: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
17247: LD_INT 0
17249: PPUSH
17250: PPUSH
// if not list then
17251: LD_VAR 0 1
17255: NOT
17256: IFFALSE 17260
// exit ;
17258: GO 17351
// i := list [ pos1 ] ;
17260: LD_ADDR_VAR 0 5
17264: PUSH
17265: LD_VAR 0 1
17269: PUSH
17270: LD_VAR 0 2
17274: ARRAY
17275: ST_TO_ADDR
// if not i then
17276: LD_VAR 0 5
17280: NOT
17281: IFFALSE 17285
// exit ;
17283: GO 17351
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
17285: LD_ADDR_VAR 0 1
17289: PUSH
17290: LD_VAR 0 1
17294: PPUSH
17295: LD_VAR 0 2
17299: PPUSH
17300: LD_VAR 0 1
17304: PUSH
17305: LD_VAR 0 3
17309: ARRAY
17310: PPUSH
17311: CALL_OW 1
17315: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
17316: LD_ADDR_VAR 0 1
17320: PUSH
17321: LD_VAR 0 1
17325: PPUSH
17326: LD_VAR 0 3
17330: PPUSH
17331: LD_VAR 0 5
17335: PPUSH
17336: CALL_OW 1
17340: ST_TO_ADDR
// result := list ;
17341: LD_ADDR_VAR 0 4
17345: PUSH
17346: LD_VAR 0 1
17350: ST_TO_ADDR
// end ;
17351: LD_VAR 0 4
17355: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
17356: LD_INT 0
17358: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
17359: LD_ADDR_VAR 0 5
17363: PUSH
17364: LD_VAR 0 1
17368: PPUSH
17369: CALL_OW 250
17373: PPUSH
17374: LD_VAR 0 1
17378: PPUSH
17379: CALL_OW 251
17383: PPUSH
17384: LD_VAR 0 2
17388: PPUSH
17389: LD_VAR 0 3
17393: PPUSH
17394: LD_VAR 0 4
17398: PPUSH
17399: CALL 17409 0 5
17403: ST_TO_ADDR
// end ;
17404: LD_VAR 0 5
17408: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
17409: LD_INT 0
17411: PPUSH
17412: PPUSH
17413: PPUSH
17414: PPUSH
// if not list then
17415: LD_VAR 0 3
17419: NOT
17420: IFFALSE 17424
// exit ;
17422: GO 17812
// result := [ ] ;
17424: LD_ADDR_VAR 0 6
17428: PUSH
17429: EMPTY
17430: ST_TO_ADDR
// for i in list do
17431: LD_ADDR_VAR 0 7
17435: PUSH
17436: LD_VAR 0 3
17440: PUSH
17441: FOR_IN
17442: IFFALSE 17644
// begin tmp := GetDistUnitXY ( i , x , y ) ;
17444: LD_ADDR_VAR 0 9
17448: PUSH
17449: LD_VAR 0 7
17453: PPUSH
17454: LD_VAR 0 1
17458: PPUSH
17459: LD_VAR 0 2
17463: PPUSH
17464: CALL_OW 297
17468: ST_TO_ADDR
// if not result then
17469: LD_VAR 0 6
17473: NOT
17474: IFFALSE 17500
// result := [ [ i , tmp ] ] else
17476: LD_ADDR_VAR 0 6
17480: PUSH
17481: LD_VAR 0 7
17485: PUSH
17486: LD_VAR 0 9
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: PUSH
17495: EMPTY
17496: LIST
17497: ST_TO_ADDR
17498: GO 17642
// begin if result [ result ] [ 2 ] < tmp then
17500: LD_VAR 0 6
17504: PUSH
17505: LD_VAR 0 6
17509: ARRAY
17510: PUSH
17511: LD_INT 2
17513: ARRAY
17514: PUSH
17515: LD_VAR 0 9
17519: LESS
17520: IFFALSE 17562
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
17522: LD_ADDR_VAR 0 6
17526: PUSH
17527: LD_VAR 0 6
17531: PPUSH
17532: LD_VAR 0 6
17536: PUSH
17537: LD_INT 1
17539: PLUS
17540: PPUSH
17541: LD_VAR 0 7
17545: PUSH
17546: LD_VAR 0 9
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: PPUSH
17555: CALL_OW 2
17559: ST_TO_ADDR
17560: GO 17642
// for j = 1 to result do
17562: LD_ADDR_VAR 0 8
17566: PUSH
17567: DOUBLE
17568: LD_INT 1
17570: DEC
17571: ST_TO_ADDR
17572: LD_VAR 0 6
17576: PUSH
17577: FOR_TO
17578: IFFALSE 17640
// begin if tmp < result [ j ] [ 2 ] then
17580: LD_VAR 0 9
17584: PUSH
17585: LD_VAR 0 6
17589: PUSH
17590: LD_VAR 0 8
17594: ARRAY
17595: PUSH
17596: LD_INT 2
17598: ARRAY
17599: LESS
17600: IFFALSE 17638
// begin result := Insert ( result , j , [ i , tmp ] ) ;
17602: LD_ADDR_VAR 0 6
17606: PUSH
17607: LD_VAR 0 6
17611: PPUSH
17612: LD_VAR 0 8
17616: PPUSH
17617: LD_VAR 0 7
17621: PUSH
17622: LD_VAR 0 9
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: PPUSH
17631: CALL_OW 2
17635: ST_TO_ADDR
// break ;
17636: GO 17640
// end ; end ;
17638: GO 17577
17640: POP
17641: POP
// end ; end ;
17642: GO 17441
17644: POP
17645: POP
// if result and not asc then
17646: LD_VAR 0 6
17650: PUSH
17651: LD_VAR 0 4
17655: NOT
17656: AND
17657: IFFALSE 17732
// begin tmp := result ;
17659: LD_ADDR_VAR 0 9
17663: PUSH
17664: LD_VAR 0 6
17668: ST_TO_ADDR
// for i = tmp downto 1 do
17669: LD_ADDR_VAR 0 7
17673: PUSH
17674: DOUBLE
17675: LD_VAR 0 9
17679: INC
17680: ST_TO_ADDR
17681: LD_INT 1
17683: PUSH
17684: FOR_DOWNTO
17685: IFFALSE 17730
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
17687: LD_ADDR_VAR 0 6
17691: PUSH
17692: LD_VAR 0 6
17696: PPUSH
17697: LD_VAR 0 9
17701: PUSH
17702: LD_VAR 0 7
17706: MINUS
17707: PUSH
17708: LD_INT 1
17710: PLUS
17711: PPUSH
17712: LD_VAR 0 9
17716: PUSH
17717: LD_VAR 0 7
17721: ARRAY
17722: PPUSH
17723: CALL_OW 1
17727: ST_TO_ADDR
17728: GO 17684
17730: POP
17731: POP
// end ; tmp := [ ] ;
17732: LD_ADDR_VAR 0 9
17736: PUSH
17737: EMPTY
17738: ST_TO_ADDR
// if mode then
17739: LD_VAR 0 5
17743: IFFALSE 17812
// begin for i = 1 to result do
17745: LD_ADDR_VAR 0 7
17749: PUSH
17750: DOUBLE
17751: LD_INT 1
17753: DEC
17754: ST_TO_ADDR
17755: LD_VAR 0 6
17759: PUSH
17760: FOR_TO
17761: IFFALSE 17800
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
17763: LD_ADDR_VAR 0 9
17767: PUSH
17768: LD_VAR 0 9
17772: PPUSH
17773: LD_VAR 0 7
17777: PPUSH
17778: LD_VAR 0 6
17782: PUSH
17783: LD_VAR 0 7
17787: ARRAY
17788: PUSH
17789: LD_INT 1
17791: ARRAY
17792: PPUSH
17793: CALL_OW 1
17797: ST_TO_ADDR
17798: GO 17760
17800: POP
17801: POP
// result := tmp ;
17802: LD_ADDR_VAR 0 6
17806: PUSH
17807: LD_VAR 0 9
17811: ST_TO_ADDR
// end ; end ;
17812: LD_VAR 0 6
17816: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
17817: LD_INT 0
17819: PPUSH
17820: PPUSH
17821: PPUSH
17822: PPUSH
17823: PPUSH
17824: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
17825: LD_ADDR_VAR 0 5
17829: PUSH
17830: LD_INT 0
17832: PUSH
17833: LD_INT 0
17835: PUSH
17836: LD_INT 0
17838: PUSH
17839: EMPTY
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: ST_TO_ADDR
// if not x or not y then
17847: LD_VAR 0 2
17851: NOT
17852: PUSH
17853: LD_VAR 0 3
17857: NOT
17858: OR
17859: IFFALSE 17863
// exit ;
17861: GO 19509
// if not range then
17863: LD_VAR 0 4
17867: NOT
17868: IFFALSE 17878
// range := 10 ;
17870: LD_ADDR_VAR 0 4
17874: PUSH
17875: LD_INT 10
17877: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17878: LD_ADDR_VAR 0 8
17882: PUSH
17883: LD_INT 81
17885: PUSH
17886: LD_VAR 0 1
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PUSH
17895: LD_INT 92
17897: PUSH
17898: LD_VAR 0 2
17902: PUSH
17903: LD_VAR 0 3
17907: PUSH
17908: LD_VAR 0 4
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: PUSH
17919: LD_INT 3
17921: PUSH
17922: LD_INT 21
17924: PUSH
17925: LD_INT 3
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: LIST
17940: PPUSH
17941: CALL_OW 69
17945: ST_TO_ADDR
// if not tmp then
17946: LD_VAR 0 8
17950: NOT
17951: IFFALSE 17955
// exit ;
17953: GO 19509
// for i in tmp do
17955: LD_ADDR_VAR 0 6
17959: PUSH
17960: LD_VAR 0 8
17964: PUSH
17965: FOR_IN
17966: IFFALSE 19484
// begin points := [ 0 , 0 , 0 ] ;
17968: LD_ADDR_VAR 0 9
17972: PUSH
17973: LD_INT 0
17975: PUSH
17976: LD_INT 0
17978: PUSH
17979: LD_INT 0
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: LIST
17986: ST_TO_ADDR
// bpoints := 1 ;
17987: LD_ADDR_VAR 0 10
17991: PUSH
17992: LD_INT 1
17994: ST_TO_ADDR
// case GetType ( i ) of unit_human :
17995: LD_VAR 0 6
17999: PPUSH
18000: CALL_OW 247
18004: PUSH
18005: LD_INT 1
18007: DOUBLE
18008: EQUAL
18009: IFTRUE 18013
18011: GO 18591
18013: POP
// begin if GetClass ( i ) = 1 then
18014: LD_VAR 0 6
18018: PPUSH
18019: CALL_OW 257
18023: PUSH
18024: LD_INT 1
18026: EQUAL
18027: IFFALSE 18048
// points := [ 10 , 5 , 3 ] ;
18029: LD_ADDR_VAR 0 9
18033: PUSH
18034: LD_INT 10
18036: PUSH
18037: LD_INT 5
18039: PUSH
18040: LD_INT 3
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: LIST
18047: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
18048: LD_VAR 0 6
18052: PPUSH
18053: CALL_OW 257
18057: PUSH
18058: LD_INT 2
18060: PUSH
18061: LD_INT 3
18063: PUSH
18064: LD_INT 4
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: LIST
18071: IN
18072: IFFALSE 18093
// points := [ 3 , 2 , 1 ] ;
18074: LD_ADDR_VAR 0 9
18078: PUSH
18079: LD_INT 3
18081: PUSH
18082: LD_INT 2
18084: PUSH
18085: LD_INT 1
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: LIST
18092: ST_TO_ADDR
// if GetClass ( i ) = 5 then
18093: LD_VAR 0 6
18097: PPUSH
18098: CALL_OW 257
18102: PUSH
18103: LD_INT 5
18105: EQUAL
18106: IFFALSE 18127
// points := [ 130 , 5 , 2 ] ;
18108: LD_ADDR_VAR 0 9
18112: PUSH
18113: LD_INT 130
18115: PUSH
18116: LD_INT 5
18118: PUSH
18119: LD_INT 2
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: LIST
18126: ST_TO_ADDR
// if GetClass ( i ) = 8 then
18127: LD_VAR 0 6
18131: PPUSH
18132: CALL_OW 257
18136: PUSH
18137: LD_INT 8
18139: EQUAL
18140: IFFALSE 18161
// points := [ 35 , 35 , 30 ] ;
18142: LD_ADDR_VAR 0 9
18146: PUSH
18147: LD_INT 35
18149: PUSH
18150: LD_INT 35
18152: PUSH
18153: LD_INT 30
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: LIST
18160: ST_TO_ADDR
// if GetClass ( i ) = 9 then
18161: LD_VAR 0 6
18165: PPUSH
18166: CALL_OW 257
18170: PUSH
18171: LD_INT 9
18173: EQUAL
18174: IFFALSE 18195
// points := [ 20 , 55 , 40 ] ;
18176: LD_ADDR_VAR 0 9
18180: PUSH
18181: LD_INT 20
18183: PUSH
18184: LD_INT 55
18186: PUSH
18187: LD_INT 40
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: LIST
18194: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
18195: LD_VAR 0 6
18199: PPUSH
18200: CALL_OW 257
18204: PUSH
18205: LD_INT 12
18207: PUSH
18208: LD_INT 16
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: IN
18215: IFFALSE 18236
// points := [ 5 , 3 , 2 ] ;
18217: LD_ADDR_VAR 0 9
18221: PUSH
18222: LD_INT 5
18224: PUSH
18225: LD_INT 3
18227: PUSH
18228: LD_INT 2
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: LIST
18235: ST_TO_ADDR
// if GetClass ( i ) = 17 then
18236: LD_VAR 0 6
18240: PPUSH
18241: CALL_OW 257
18245: PUSH
18246: LD_INT 17
18248: EQUAL
18249: IFFALSE 18270
// points := [ 100 , 50 , 75 ] ;
18251: LD_ADDR_VAR 0 9
18255: PUSH
18256: LD_INT 100
18258: PUSH
18259: LD_INT 50
18261: PUSH
18262: LD_INT 75
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: LIST
18269: ST_TO_ADDR
// if GetClass ( i ) = 15 then
18270: LD_VAR 0 6
18274: PPUSH
18275: CALL_OW 257
18279: PUSH
18280: LD_INT 15
18282: EQUAL
18283: IFFALSE 18304
// points := [ 10 , 5 , 3 ] ;
18285: LD_ADDR_VAR 0 9
18289: PUSH
18290: LD_INT 10
18292: PUSH
18293: LD_INT 5
18295: PUSH
18296: LD_INT 3
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: LIST
18303: ST_TO_ADDR
// if GetClass ( i ) = 14 then
18304: LD_VAR 0 6
18308: PPUSH
18309: CALL_OW 257
18313: PUSH
18314: LD_INT 14
18316: EQUAL
18317: IFFALSE 18338
// points := [ 10 , 0 , 0 ] ;
18319: LD_ADDR_VAR 0 9
18323: PUSH
18324: LD_INT 10
18326: PUSH
18327: LD_INT 0
18329: PUSH
18330: LD_INT 0
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: LIST
18337: ST_TO_ADDR
// if GetClass ( i ) = 11 then
18338: LD_VAR 0 6
18342: PPUSH
18343: CALL_OW 257
18347: PUSH
18348: LD_INT 11
18350: EQUAL
18351: IFFALSE 18372
// points := [ 30 , 10 , 5 ] ;
18353: LD_ADDR_VAR 0 9
18357: PUSH
18358: LD_INT 30
18360: PUSH
18361: LD_INT 10
18363: PUSH
18364: LD_INT 5
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: LIST
18371: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
18372: LD_VAR 0 1
18376: PPUSH
18377: LD_INT 5
18379: PPUSH
18380: CALL_OW 321
18384: PUSH
18385: LD_INT 2
18387: EQUAL
18388: IFFALSE 18405
// bpoints := bpoints * 1.8 ;
18390: LD_ADDR_VAR 0 10
18394: PUSH
18395: LD_VAR 0 10
18399: PUSH
18400: LD_REAL  1.80000000000000E+0000
18403: MUL
18404: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
18405: LD_VAR 0 6
18409: PPUSH
18410: CALL_OW 257
18414: PUSH
18415: LD_INT 1
18417: PUSH
18418: LD_INT 2
18420: PUSH
18421: LD_INT 3
18423: PUSH
18424: LD_INT 4
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: IN
18433: PUSH
18434: LD_VAR 0 1
18438: PPUSH
18439: LD_INT 51
18441: PPUSH
18442: CALL_OW 321
18446: PUSH
18447: LD_INT 2
18449: EQUAL
18450: AND
18451: IFFALSE 18468
// bpoints := bpoints * 1.2 ;
18453: LD_ADDR_VAR 0 10
18457: PUSH
18458: LD_VAR 0 10
18462: PUSH
18463: LD_REAL  1.20000000000000E+0000
18466: MUL
18467: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
18468: LD_VAR 0 6
18472: PPUSH
18473: CALL_OW 257
18477: PUSH
18478: LD_INT 5
18480: PUSH
18481: LD_INT 7
18483: PUSH
18484: LD_INT 9
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: LIST
18491: IN
18492: PUSH
18493: LD_VAR 0 1
18497: PPUSH
18498: LD_INT 52
18500: PPUSH
18501: CALL_OW 321
18505: PUSH
18506: LD_INT 2
18508: EQUAL
18509: AND
18510: IFFALSE 18527
// bpoints := bpoints * 1.5 ;
18512: LD_ADDR_VAR 0 10
18516: PUSH
18517: LD_VAR 0 10
18521: PUSH
18522: LD_REAL  1.50000000000000E+0000
18525: MUL
18526: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
18527: LD_VAR 0 1
18531: PPUSH
18532: LD_INT 66
18534: PPUSH
18535: CALL_OW 321
18539: PUSH
18540: LD_INT 2
18542: EQUAL
18543: IFFALSE 18560
// bpoints := bpoints * 1.1 ;
18545: LD_ADDR_VAR 0 10
18549: PUSH
18550: LD_VAR 0 10
18554: PUSH
18555: LD_REAL  1.10000000000000E+0000
18558: MUL
18559: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
18560: LD_ADDR_VAR 0 10
18564: PUSH
18565: LD_VAR 0 10
18569: PUSH
18570: LD_VAR 0 6
18574: PPUSH
18575: LD_INT 1
18577: PPUSH
18578: CALL_OW 259
18582: PUSH
18583: LD_REAL  1.15000000000000E+0000
18586: MUL
18587: MUL
18588: ST_TO_ADDR
// end ; unit_vehicle :
18589: GO 19413
18591: LD_INT 2
18593: DOUBLE
18594: EQUAL
18595: IFTRUE 18599
18597: GO 19401
18599: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
18600: LD_VAR 0 6
18604: PPUSH
18605: CALL_OW 264
18609: PUSH
18610: LD_INT 2
18612: PUSH
18613: LD_INT 42
18615: PUSH
18616: LD_INT 24
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: LIST
18623: IN
18624: IFFALSE 18645
// points := [ 25 , 5 , 3 ] ;
18626: LD_ADDR_VAR 0 9
18630: PUSH
18631: LD_INT 25
18633: PUSH
18634: LD_INT 5
18636: PUSH
18637: LD_INT 3
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: LIST
18644: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
18645: LD_VAR 0 6
18649: PPUSH
18650: CALL_OW 264
18654: PUSH
18655: LD_INT 4
18657: PUSH
18658: LD_INT 43
18660: PUSH
18661: LD_INT 25
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: LIST
18668: IN
18669: IFFALSE 18690
// points := [ 40 , 15 , 5 ] ;
18671: LD_ADDR_VAR 0 9
18675: PUSH
18676: LD_INT 40
18678: PUSH
18679: LD_INT 15
18681: PUSH
18682: LD_INT 5
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: LIST
18689: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
18690: LD_VAR 0 6
18694: PPUSH
18695: CALL_OW 264
18699: PUSH
18700: LD_INT 3
18702: PUSH
18703: LD_INT 23
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: IN
18710: IFFALSE 18731
// points := [ 7 , 25 , 8 ] ;
18712: LD_ADDR_VAR 0 9
18716: PUSH
18717: LD_INT 7
18719: PUSH
18720: LD_INT 25
18722: PUSH
18723: LD_INT 8
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: LIST
18730: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
18731: LD_VAR 0 6
18735: PPUSH
18736: CALL_OW 264
18740: PUSH
18741: LD_INT 5
18743: PUSH
18744: LD_INT 27
18746: PUSH
18747: LD_INT 44
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: LIST
18754: IN
18755: IFFALSE 18776
// points := [ 14 , 50 , 16 ] ;
18757: LD_ADDR_VAR 0 9
18761: PUSH
18762: LD_INT 14
18764: PUSH
18765: LD_INT 50
18767: PUSH
18768: LD_INT 16
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: LIST
18775: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
18776: LD_VAR 0 6
18780: PPUSH
18781: CALL_OW 264
18785: PUSH
18786: LD_INT 6
18788: PUSH
18789: LD_INT 46
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: IN
18796: IFFALSE 18817
// points := [ 32 , 120 , 70 ] ;
18798: LD_ADDR_VAR 0 9
18802: PUSH
18803: LD_INT 32
18805: PUSH
18806: LD_INT 120
18808: PUSH
18809: LD_INT 70
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: LIST
18816: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
18817: LD_VAR 0 6
18821: PPUSH
18822: CALL_OW 264
18826: PUSH
18827: LD_INT 7
18829: PUSH
18830: LD_INT 28
18832: PUSH
18833: LD_INT 45
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: LIST
18840: IN
18841: IFFALSE 18862
// points := [ 35 , 20 , 45 ] ;
18843: LD_ADDR_VAR 0 9
18847: PUSH
18848: LD_INT 35
18850: PUSH
18851: LD_INT 20
18853: PUSH
18854: LD_INT 45
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: LIST
18861: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
18862: LD_VAR 0 6
18866: PPUSH
18867: CALL_OW 264
18871: PUSH
18872: LD_INT 47
18874: PUSH
18875: EMPTY
18876: LIST
18877: IN
18878: IFFALSE 18899
// points := [ 67 , 45 , 75 ] ;
18880: LD_ADDR_VAR 0 9
18884: PUSH
18885: LD_INT 67
18887: PUSH
18888: LD_INT 45
18890: PUSH
18891: LD_INT 75
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: LIST
18898: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
18899: LD_VAR 0 6
18903: PPUSH
18904: CALL_OW 264
18908: PUSH
18909: LD_INT 26
18911: PUSH
18912: EMPTY
18913: LIST
18914: IN
18915: IFFALSE 18936
// points := [ 120 , 30 , 80 ] ;
18917: LD_ADDR_VAR 0 9
18921: PUSH
18922: LD_INT 120
18924: PUSH
18925: LD_INT 30
18927: PUSH
18928: LD_INT 80
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: LIST
18935: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
18936: LD_VAR 0 6
18940: PPUSH
18941: CALL_OW 264
18945: PUSH
18946: LD_INT 22
18948: PUSH
18949: EMPTY
18950: LIST
18951: IN
18952: IFFALSE 18973
// points := [ 40 , 1 , 1 ] ;
18954: LD_ADDR_VAR 0 9
18958: PUSH
18959: LD_INT 40
18961: PUSH
18962: LD_INT 1
18964: PUSH
18965: LD_INT 1
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: LIST
18972: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
18973: LD_VAR 0 6
18977: PPUSH
18978: CALL_OW 264
18982: PUSH
18983: LD_INT 29
18985: PUSH
18986: EMPTY
18987: LIST
18988: IN
18989: IFFALSE 19010
// points := [ 70 , 200 , 400 ] ;
18991: LD_ADDR_VAR 0 9
18995: PUSH
18996: LD_INT 70
18998: PUSH
18999: LD_INT 200
19001: PUSH
19002: LD_INT 400
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: LIST
19009: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
19010: LD_VAR 0 6
19014: PPUSH
19015: CALL_OW 264
19019: PUSH
19020: LD_INT 14
19022: PUSH
19023: LD_INT 53
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: IN
19030: IFFALSE 19051
// points := [ 40 , 10 , 20 ] ;
19032: LD_ADDR_VAR 0 9
19036: PUSH
19037: LD_INT 40
19039: PUSH
19040: LD_INT 10
19042: PUSH
19043: LD_INT 20
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: LIST
19050: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
19051: LD_VAR 0 6
19055: PPUSH
19056: CALL_OW 264
19060: PUSH
19061: LD_INT 9
19063: PUSH
19064: EMPTY
19065: LIST
19066: IN
19067: IFFALSE 19088
// points := [ 5 , 70 , 20 ] ;
19069: LD_ADDR_VAR 0 9
19073: PUSH
19074: LD_INT 5
19076: PUSH
19077: LD_INT 70
19079: PUSH
19080: LD_INT 20
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: LIST
19087: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
19088: LD_VAR 0 6
19092: PPUSH
19093: CALL_OW 264
19097: PUSH
19098: LD_INT 10
19100: PUSH
19101: EMPTY
19102: LIST
19103: IN
19104: IFFALSE 19125
// points := [ 35 , 110 , 70 ] ;
19106: LD_ADDR_VAR 0 9
19110: PUSH
19111: LD_INT 35
19113: PUSH
19114: LD_INT 110
19116: PUSH
19117: LD_INT 70
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: LIST
19124: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
19125: LD_VAR 0 6
19129: PPUSH
19130: CALL_OW 265
19134: PUSH
19135: LD_INT 25
19137: EQUAL
19138: IFFALSE 19159
// points := [ 80 , 65 , 100 ] ;
19140: LD_ADDR_VAR 0 9
19144: PUSH
19145: LD_INT 80
19147: PUSH
19148: LD_INT 65
19150: PUSH
19151: LD_INT 100
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: LIST
19158: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
19159: LD_VAR 0 6
19163: PPUSH
19164: CALL_OW 263
19168: PUSH
19169: LD_INT 1
19171: EQUAL
19172: IFFALSE 19207
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
19174: LD_ADDR_VAR 0 10
19178: PUSH
19179: LD_VAR 0 10
19183: PUSH
19184: LD_VAR 0 6
19188: PPUSH
19189: CALL_OW 311
19193: PPUSH
19194: LD_INT 3
19196: PPUSH
19197: CALL_OW 259
19201: PUSH
19202: LD_INT 4
19204: MUL
19205: MUL
19206: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
19207: LD_VAR 0 6
19211: PPUSH
19212: CALL_OW 263
19216: PUSH
19217: LD_INT 2
19219: EQUAL
19220: IFFALSE 19271
// begin j := IsControledBy ( i ) ;
19222: LD_ADDR_VAR 0 7
19226: PUSH
19227: LD_VAR 0 6
19231: PPUSH
19232: CALL_OW 312
19236: ST_TO_ADDR
// if j then
19237: LD_VAR 0 7
19241: IFFALSE 19271
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
19243: LD_ADDR_VAR 0 10
19247: PUSH
19248: LD_VAR 0 10
19252: PUSH
19253: LD_VAR 0 7
19257: PPUSH
19258: LD_INT 3
19260: PPUSH
19261: CALL_OW 259
19265: PUSH
19266: LD_INT 3
19268: MUL
19269: MUL
19270: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
19271: LD_VAR 0 6
19275: PPUSH
19276: CALL_OW 264
19280: PUSH
19281: LD_INT 5
19283: PUSH
19284: LD_INT 6
19286: PUSH
19287: LD_INT 46
19289: PUSH
19290: LD_INT 44
19292: PUSH
19293: LD_INT 47
19295: PUSH
19296: LD_INT 45
19298: PUSH
19299: LD_INT 28
19301: PUSH
19302: LD_INT 7
19304: PUSH
19305: LD_INT 27
19307: PUSH
19308: LD_INT 29
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: IN
19323: PUSH
19324: LD_VAR 0 1
19328: PPUSH
19329: LD_INT 52
19331: PPUSH
19332: CALL_OW 321
19336: PUSH
19337: LD_INT 2
19339: EQUAL
19340: AND
19341: IFFALSE 19358
// bpoints := bpoints * 1.2 ;
19343: LD_ADDR_VAR 0 10
19347: PUSH
19348: LD_VAR 0 10
19352: PUSH
19353: LD_REAL  1.20000000000000E+0000
19356: MUL
19357: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
19358: LD_VAR 0 6
19362: PPUSH
19363: CALL_OW 264
19367: PUSH
19368: LD_INT 6
19370: PUSH
19371: LD_INT 46
19373: PUSH
19374: LD_INT 47
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: LIST
19381: IN
19382: IFFALSE 19399
// bpoints := bpoints * 1.2 ;
19384: LD_ADDR_VAR 0 10
19388: PUSH
19389: LD_VAR 0 10
19393: PUSH
19394: LD_REAL  1.20000000000000E+0000
19397: MUL
19398: ST_TO_ADDR
// end ; unit_building :
19399: GO 19413
19401: LD_INT 3
19403: DOUBLE
19404: EQUAL
19405: IFTRUE 19409
19407: GO 19412
19409: POP
// ; end ;
19410: GO 19413
19412: POP
// for j = 1 to 3 do
19413: LD_ADDR_VAR 0 7
19417: PUSH
19418: DOUBLE
19419: LD_INT 1
19421: DEC
19422: ST_TO_ADDR
19423: LD_INT 3
19425: PUSH
19426: FOR_TO
19427: IFFALSE 19480
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
19429: LD_ADDR_VAR 0 5
19433: PUSH
19434: LD_VAR 0 5
19438: PPUSH
19439: LD_VAR 0 7
19443: PPUSH
19444: LD_VAR 0 5
19448: PUSH
19449: LD_VAR 0 7
19453: ARRAY
19454: PUSH
19455: LD_VAR 0 9
19459: PUSH
19460: LD_VAR 0 7
19464: ARRAY
19465: PUSH
19466: LD_VAR 0 10
19470: MUL
19471: PLUS
19472: PPUSH
19473: CALL_OW 1
19477: ST_TO_ADDR
19478: GO 19426
19480: POP
19481: POP
// end ;
19482: GO 17965
19484: POP
19485: POP
// result := Replace ( result , 4 , tmp ) ;
19486: LD_ADDR_VAR 0 5
19490: PUSH
19491: LD_VAR 0 5
19495: PPUSH
19496: LD_INT 4
19498: PPUSH
19499: LD_VAR 0 8
19503: PPUSH
19504: CALL_OW 1
19508: ST_TO_ADDR
// end ;
19509: LD_VAR 0 5
19513: RET
// export function DangerAtRange ( unit , range ) ; begin
19514: LD_INT 0
19516: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
19517: LD_ADDR_VAR 0 3
19521: PUSH
19522: LD_VAR 0 1
19526: PPUSH
19527: CALL_OW 255
19531: PPUSH
19532: LD_VAR 0 1
19536: PPUSH
19537: CALL_OW 250
19541: PPUSH
19542: LD_VAR 0 1
19546: PPUSH
19547: CALL_OW 251
19551: PPUSH
19552: LD_VAR 0 2
19556: PPUSH
19557: CALL 17817 0 4
19561: ST_TO_ADDR
// end ;
19562: LD_VAR 0 3
19566: RET
// export function DangerInArea ( side , area ) ; begin
19567: LD_INT 0
19569: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
19570: LD_ADDR_VAR 0 3
19574: PUSH
19575: LD_VAR 0 2
19579: PPUSH
19580: LD_INT 81
19582: PUSH
19583: LD_VAR 0 1
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PPUSH
19592: CALL_OW 70
19596: ST_TO_ADDR
// end ;
19597: LD_VAR 0 3
19601: RET
// export function IsExtension ( b ) ; begin
19602: LD_INT 0
19604: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
19605: LD_ADDR_VAR 0 2
19609: PUSH
19610: LD_VAR 0 1
19614: PUSH
19615: LD_INT 23
19617: PUSH
19618: LD_INT 20
19620: PUSH
19621: LD_INT 22
19623: PUSH
19624: LD_INT 17
19626: PUSH
19627: LD_INT 24
19629: PUSH
19630: LD_INT 21
19632: PUSH
19633: LD_INT 19
19635: PUSH
19636: LD_INT 16
19638: PUSH
19639: LD_INT 25
19641: PUSH
19642: LD_INT 18
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: IN
19657: ST_TO_ADDR
// end ;
19658: LD_VAR 0 2
19662: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
19663: LD_INT 0
19665: PPUSH
19666: PPUSH
19667: PPUSH
// result := [ ] ;
19668: LD_ADDR_VAR 0 3
19672: PUSH
19673: EMPTY
19674: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
19675: LD_ADDR_VAR 0 4
19679: PUSH
19680: LD_VAR 0 2
19684: PPUSH
19685: LD_INT 21
19687: PUSH
19688: LD_INT 3
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PPUSH
19695: CALL_OW 70
19699: ST_TO_ADDR
// if not tmp then
19700: LD_VAR 0 4
19704: NOT
19705: IFFALSE 19709
// exit ;
19707: GO 19767
// for i in tmp do
19709: LD_ADDR_VAR 0 5
19713: PUSH
19714: LD_VAR 0 4
19718: PUSH
19719: FOR_IN
19720: IFFALSE 19755
// if GetBase ( i ) <> base then
19722: LD_VAR 0 5
19726: PPUSH
19727: CALL_OW 274
19731: PUSH
19732: LD_VAR 0 1
19736: NONEQUAL
19737: IFFALSE 19753
// ComLinkToBase ( base , i ) ;
19739: LD_VAR 0 1
19743: PPUSH
19744: LD_VAR 0 5
19748: PPUSH
19749: CALL_OW 169
19753: GO 19719
19755: POP
19756: POP
// result := tmp ;
19757: LD_ADDR_VAR 0 3
19761: PUSH
19762: LD_VAR 0 4
19766: ST_TO_ADDR
// end ;
19767: LD_VAR 0 3
19771: RET
// export function ComComplete ( unit , b ) ; var i ; begin
19772: LD_INT 0
19774: PPUSH
19775: PPUSH
// if BuildingStatus ( b ) = bs_build then
19776: LD_VAR 0 2
19780: PPUSH
19781: CALL_OW 461
19785: PUSH
19786: LD_INT 1
19788: EQUAL
19789: IFFALSE 19849
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
19791: LD_VAR 0 1
19795: PPUSH
19796: LD_STRING h
19798: PUSH
19799: LD_VAR 0 2
19803: PPUSH
19804: CALL_OW 250
19808: PUSH
19809: LD_VAR 0 2
19813: PPUSH
19814: CALL_OW 251
19818: PUSH
19819: LD_VAR 0 2
19823: PUSH
19824: LD_INT 0
19826: PUSH
19827: LD_INT 0
19829: PUSH
19830: LD_INT 0
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: PUSH
19842: EMPTY
19843: LIST
19844: PPUSH
19845: CALL_OW 446
// end ;
19849: LD_VAR 0 3
19853: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
19854: LD_INT 0
19856: PPUSH
19857: PPUSH
19858: PPUSH
19859: PPUSH
19860: PPUSH
19861: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
19862: LD_VAR 0 1
19866: NOT
19867: PUSH
19868: LD_VAR 0 1
19872: PPUSH
19873: CALL_OW 263
19877: PUSH
19878: LD_INT 2
19880: EQUAL
19881: NOT
19882: OR
19883: IFFALSE 19887
// exit ;
19885: GO 20203
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
19887: LD_ADDR_VAR 0 6
19891: PUSH
19892: LD_INT 22
19894: PUSH
19895: LD_VAR 0 1
19899: PPUSH
19900: CALL_OW 255
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PUSH
19909: LD_INT 2
19911: PUSH
19912: LD_INT 30
19914: PUSH
19915: LD_INT 36
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: LD_INT 34
19924: PUSH
19925: LD_INT 31
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: LIST
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PPUSH
19941: CALL_OW 69
19945: ST_TO_ADDR
// if not tmp then
19946: LD_VAR 0 6
19950: NOT
19951: IFFALSE 19955
// exit ;
19953: GO 20203
// result := [ ] ;
19955: LD_ADDR_VAR 0 2
19959: PUSH
19960: EMPTY
19961: ST_TO_ADDR
// for i in tmp do
19962: LD_ADDR_VAR 0 3
19966: PUSH
19967: LD_VAR 0 6
19971: PUSH
19972: FOR_IN
19973: IFFALSE 20044
// begin t := UnitsInside ( i ) ;
19975: LD_ADDR_VAR 0 4
19979: PUSH
19980: LD_VAR 0 3
19984: PPUSH
19985: CALL_OW 313
19989: ST_TO_ADDR
// if t then
19990: LD_VAR 0 4
19994: IFFALSE 20042
// for j in t do
19996: LD_ADDR_VAR 0 7
20000: PUSH
20001: LD_VAR 0 4
20005: PUSH
20006: FOR_IN
20007: IFFALSE 20040
// result := Insert ( result , result + 1 , j ) ;
20009: LD_ADDR_VAR 0 2
20013: PUSH
20014: LD_VAR 0 2
20018: PPUSH
20019: LD_VAR 0 2
20023: PUSH
20024: LD_INT 1
20026: PLUS
20027: PPUSH
20028: LD_VAR 0 7
20032: PPUSH
20033: CALL_OW 2
20037: ST_TO_ADDR
20038: GO 20006
20040: POP
20041: POP
// end ;
20042: GO 19972
20044: POP
20045: POP
// if not result then
20046: LD_VAR 0 2
20050: NOT
20051: IFFALSE 20055
// exit ;
20053: GO 20203
// mech := result [ 1 ] ;
20055: LD_ADDR_VAR 0 5
20059: PUSH
20060: LD_VAR 0 2
20064: PUSH
20065: LD_INT 1
20067: ARRAY
20068: ST_TO_ADDR
// if result > 1 then
20069: LD_VAR 0 2
20073: PUSH
20074: LD_INT 1
20076: GREATER
20077: IFFALSE 20189
// for i = 2 to result do
20079: LD_ADDR_VAR 0 3
20083: PUSH
20084: DOUBLE
20085: LD_INT 2
20087: DEC
20088: ST_TO_ADDR
20089: LD_VAR 0 2
20093: PUSH
20094: FOR_TO
20095: IFFALSE 20187
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
20097: LD_ADDR_VAR 0 4
20101: PUSH
20102: LD_VAR 0 2
20106: PUSH
20107: LD_VAR 0 3
20111: ARRAY
20112: PPUSH
20113: LD_INT 3
20115: PPUSH
20116: CALL_OW 259
20120: PUSH
20121: LD_VAR 0 2
20125: PUSH
20126: LD_VAR 0 3
20130: ARRAY
20131: PPUSH
20132: CALL_OW 432
20136: MINUS
20137: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
20138: LD_VAR 0 4
20142: PUSH
20143: LD_VAR 0 5
20147: PPUSH
20148: LD_INT 3
20150: PPUSH
20151: CALL_OW 259
20155: PUSH
20156: LD_VAR 0 5
20160: PPUSH
20161: CALL_OW 432
20165: MINUS
20166: GREATEREQUAL
20167: IFFALSE 20185
// mech := result [ i ] ;
20169: LD_ADDR_VAR 0 5
20173: PUSH
20174: LD_VAR 0 2
20178: PUSH
20179: LD_VAR 0 3
20183: ARRAY
20184: ST_TO_ADDR
// end ;
20185: GO 20094
20187: POP
20188: POP
// ComLinkTo ( vehicle , mech ) ;
20189: LD_VAR 0 1
20193: PPUSH
20194: LD_VAR 0 5
20198: PPUSH
20199: CALL_OW 135
// end ;
20203: LD_VAR 0 2
20207: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
20208: LD_INT 0
20210: PPUSH
20211: PPUSH
20212: PPUSH
20213: PPUSH
20214: PPUSH
20215: PPUSH
20216: PPUSH
20217: PPUSH
20218: PPUSH
20219: PPUSH
20220: PPUSH
20221: PPUSH
20222: PPUSH
// result := [ ] ;
20223: LD_ADDR_VAR 0 7
20227: PUSH
20228: EMPTY
20229: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
20230: LD_VAR 0 1
20234: PPUSH
20235: CALL_OW 266
20239: PUSH
20240: LD_INT 0
20242: PUSH
20243: LD_INT 1
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: IN
20250: NOT
20251: IFFALSE 20255
// exit ;
20253: GO 21886
// if name then
20255: LD_VAR 0 3
20259: IFFALSE 20275
// SetBName ( base_dep , name ) ;
20261: LD_VAR 0 1
20265: PPUSH
20266: LD_VAR 0 3
20270: PPUSH
20271: CALL_OW 500
// base := GetBase ( base_dep ) ;
20275: LD_ADDR_VAR 0 15
20279: PUSH
20280: LD_VAR 0 1
20284: PPUSH
20285: CALL_OW 274
20289: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
20290: LD_ADDR_VAR 0 16
20294: PUSH
20295: LD_VAR 0 1
20299: PPUSH
20300: CALL_OW 255
20304: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
20305: LD_ADDR_VAR 0 17
20309: PUSH
20310: LD_VAR 0 1
20314: PPUSH
20315: CALL_OW 248
20319: ST_TO_ADDR
// if sources then
20320: LD_VAR 0 5
20324: IFFALSE 20371
// for i = 1 to 3 do
20326: LD_ADDR_VAR 0 8
20330: PUSH
20331: DOUBLE
20332: LD_INT 1
20334: DEC
20335: ST_TO_ADDR
20336: LD_INT 3
20338: PUSH
20339: FOR_TO
20340: IFFALSE 20369
// AddResourceType ( base , i , sources [ i ] ) ;
20342: LD_VAR 0 15
20346: PPUSH
20347: LD_VAR 0 8
20351: PPUSH
20352: LD_VAR 0 5
20356: PUSH
20357: LD_VAR 0 8
20361: ARRAY
20362: PPUSH
20363: CALL_OW 276
20367: GO 20339
20369: POP
20370: POP
// buildings := GetBaseBuildings ( base , area ) ;
20371: LD_ADDR_VAR 0 18
20375: PUSH
20376: LD_VAR 0 15
20380: PPUSH
20381: LD_VAR 0 2
20385: PPUSH
20386: CALL 19663 0 2
20390: ST_TO_ADDR
// InitHc ;
20391: CALL_OW 19
// InitUc ;
20395: CALL_OW 18
// uc_side := side ;
20399: LD_ADDR_OWVAR 20
20403: PUSH
20404: LD_VAR 0 16
20408: ST_TO_ADDR
// uc_nation := nation ;
20409: LD_ADDR_OWVAR 21
20413: PUSH
20414: LD_VAR 0 17
20418: ST_TO_ADDR
// if buildings then
20419: LD_VAR 0 18
20423: IFFALSE 21745
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
20425: LD_ADDR_VAR 0 19
20429: PUSH
20430: LD_VAR 0 18
20434: PPUSH
20435: LD_INT 2
20437: PUSH
20438: LD_INT 30
20440: PUSH
20441: LD_INT 29
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: LD_INT 30
20450: PUSH
20451: LD_INT 30
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: LIST
20462: PPUSH
20463: CALL_OW 72
20467: ST_TO_ADDR
// if tmp then
20468: LD_VAR 0 19
20472: IFFALSE 20520
// for i in tmp do
20474: LD_ADDR_VAR 0 8
20478: PUSH
20479: LD_VAR 0 19
20483: PUSH
20484: FOR_IN
20485: IFFALSE 20518
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
20487: LD_VAR 0 8
20491: PPUSH
20492: CALL_OW 250
20496: PPUSH
20497: LD_VAR 0 8
20501: PPUSH
20502: CALL_OW 251
20506: PPUSH
20507: LD_VAR 0 16
20511: PPUSH
20512: CALL_OW 441
20516: GO 20484
20518: POP
20519: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
20520: LD_VAR 0 18
20524: PPUSH
20525: LD_INT 2
20527: PUSH
20528: LD_INT 30
20530: PUSH
20531: LD_INT 32
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: PUSH
20538: LD_INT 30
20540: PUSH
20541: LD_INT 33
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: LIST
20552: PPUSH
20553: CALL_OW 72
20557: IFFALSE 20645
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
20559: LD_ADDR_VAR 0 8
20563: PUSH
20564: LD_VAR 0 18
20568: PPUSH
20569: LD_INT 2
20571: PUSH
20572: LD_INT 30
20574: PUSH
20575: LD_INT 32
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: PUSH
20582: LD_INT 30
20584: PUSH
20585: LD_INT 33
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: LIST
20596: PPUSH
20597: CALL_OW 72
20601: PUSH
20602: FOR_IN
20603: IFFALSE 20643
// begin if not GetBWeapon ( i ) then
20605: LD_VAR 0 8
20609: PPUSH
20610: CALL_OW 269
20614: NOT
20615: IFFALSE 20641
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
20617: LD_VAR 0 8
20621: PPUSH
20622: LD_VAR 0 8
20626: PPUSH
20627: LD_VAR 0 2
20631: PPUSH
20632: CALL 21891 0 2
20636: PPUSH
20637: CALL_OW 431
// end ;
20641: GO 20602
20643: POP
20644: POP
// end ; for i = 1 to personel do
20645: LD_ADDR_VAR 0 8
20649: PUSH
20650: DOUBLE
20651: LD_INT 1
20653: DEC
20654: ST_TO_ADDR
20655: LD_VAR 0 6
20659: PUSH
20660: FOR_TO
20661: IFFALSE 21725
// begin if i > 4 then
20663: LD_VAR 0 8
20667: PUSH
20668: LD_INT 4
20670: GREATER
20671: IFFALSE 20675
// break ;
20673: GO 21725
// case i of 1 :
20675: LD_VAR 0 8
20679: PUSH
20680: LD_INT 1
20682: DOUBLE
20683: EQUAL
20684: IFTRUE 20688
20686: GO 20768
20688: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
20689: LD_ADDR_VAR 0 12
20693: PUSH
20694: LD_VAR 0 18
20698: PPUSH
20699: LD_INT 22
20701: PUSH
20702: LD_VAR 0 16
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PUSH
20711: LD_INT 58
20713: PUSH
20714: EMPTY
20715: LIST
20716: PUSH
20717: LD_INT 2
20719: PUSH
20720: LD_INT 30
20722: PUSH
20723: LD_INT 32
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 30
20732: PUSH
20733: LD_INT 4
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PUSH
20740: LD_INT 30
20742: PUSH
20743: LD_INT 5
20745: PUSH
20746: EMPTY
20747: LIST
20748: LIST
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: LIST
20760: PPUSH
20761: CALL_OW 72
20765: ST_TO_ADDR
20766: GO 20990
20768: LD_INT 2
20770: DOUBLE
20771: EQUAL
20772: IFTRUE 20776
20774: GO 20838
20776: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
20777: LD_ADDR_VAR 0 12
20781: PUSH
20782: LD_VAR 0 18
20786: PPUSH
20787: LD_INT 22
20789: PUSH
20790: LD_VAR 0 16
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: PUSH
20799: LD_INT 2
20801: PUSH
20802: LD_INT 30
20804: PUSH
20805: LD_INT 0
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: PUSH
20812: LD_INT 30
20814: PUSH
20815: LD_INT 1
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: LIST
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PPUSH
20831: CALL_OW 72
20835: ST_TO_ADDR
20836: GO 20990
20838: LD_INT 3
20840: DOUBLE
20841: EQUAL
20842: IFTRUE 20846
20844: GO 20908
20846: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
20847: LD_ADDR_VAR 0 12
20851: PUSH
20852: LD_VAR 0 18
20856: PPUSH
20857: LD_INT 22
20859: PUSH
20860: LD_VAR 0 16
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PUSH
20869: LD_INT 2
20871: PUSH
20872: LD_INT 30
20874: PUSH
20875: LD_INT 2
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: LD_INT 30
20884: PUSH
20885: LD_INT 3
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: LIST
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PPUSH
20901: CALL_OW 72
20905: ST_TO_ADDR
20906: GO 20990
20908: LD_INT 4
20910: DOUBLE
20911: EQUAL
20912: IFTRUE 20916
20914: GO 20989
20916: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
20917: LD_ADDR_VAR 0 12
20921: PUSH
20922: LD_VAR 0 18
20926: PPUSH
20927: LD_INT 22
20929: PUSH
20930: LD_VAR 0 16
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PUSH
20939: LD_INT 2
20941: PUSH
20942: LD_INT 30
20944: PUSH
20945: LD_INT 6
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: PUSH
20952: LD_INT 30
20954: PUSH
20955: LD_INT 7
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: PUSH
20962: LD_INT 30
20964: PUSH
20965: LD_INT 8
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PPUSH
20982: CALL_OW 72
20986: ST_TO_ADDR
20987: GO 20990
20989: POP
// if i = 1 then
20990: LD_VAR 0 8
20994: PUSH
20995: LD_INT 1
20997: EQUAL
20998: IFFALSE 21109
// begin tmp := [ ] ;
21000: LD_ADDR_VAR 0 19
21004: PUSH
21005: EMPTY
21006: ST_TO_ADDR
// for j in f do
21007: LD_ADDR_VAR 0 9
21011: PUSH
21012: LD_VAR 0 12
21016: PUSH
21017: FOR_IN
21018: IFFALSE 21091
// if GetBType ( j ) = b_bunker then
21020: LD_VAR 0 9
21024: PPUSH
21025: CALL_OW 266
21029: PUSH
21030: LD_INT 32
21032: EQUAL
21033: IFFALSE 21060
// tmp := Insert ( tmp , 1 , j ) else
21035: LD_ADDR_VAR 0 19
21039: PUSH
21040: LD_VAR 0 19
21044: PPUSH
21045: LD_INT 1
21047: PPUSH
21048: LD_VAR 0 9
21052: PPUSH
21053: CALL_OW 2
21057: ST_TO_ADDR
21058: GO 21089
// tmp := Insert ( tmp , tmp + 1 , j ) ;
21060: LD_ADDR_VAR 0 19
21064: PUSH
21065: LD_VAR 0 19
21069: PPUSH
21070: LD_VAR 0 19
21074: PUSH
21075: LD_INT 1
21077: PLUS
21078: PPUSH
21079: LD_VAR 0 9
21083: PPUSH
21084: CALL_OW 2
21088: ST_TO_ADDR
21089: GO 21017
21091: POP
21092: POP
// if tmp then
21093: LD_VAR 0 19
21097: IFFALSE 21109
// f := tmp ;
21099: LD_ADDR_VAR 0 12
21103: PUSH
21104: LD_VAR 0 19
21108: ST_TO_ADDR
// end ; x := personel [ i ] ;
21109: LD_ADDR_VAR 0 13
21113: PUSH
21114: LD_VAR 0 6
21118: PUSH
21119: LD_VAR 0 8
21123: ARRAY
21124: ST_TO_ADDR
// if x = - 1 then
21125: LD_VAR 0 13
21129: PUSH
21130: LD_INT 1
21132: NEG
21133: EQUAL
21134: IFFALSE 21343
// begin for j in f do
21136: LD_ADDR_VAR 0 9
21140: PUSH
21141: LD_VAR 0 12
21145: PUSH
21146: FOR_IN
21147: IFFALSE 21339
// repeat InitHc ;
21149: CALL_OW 19
// if GetBType ( j ) = b_barracks then
21153: LD_VAR 0 9
21157: PPUSH
21158: CALL_OW 266
21162: PUSH
21163: LD_INT 5
21165: EQUAL
21166: IFFALSE 21236
// begin if UnitsInside ( j ) < 3 then
21168: LD_VAR 0 9
21172: PPUSH
21173: CALL_OW 313
21177: PUSH
21178: LD_INT 3
21180: LESS
21181: IFFALSE 21217
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21183: LD_INT 0
21185: PPUSH
21186: LD_INT 5
21188: PUSH
21189: LD_INT 8
21191: PUSH
21192: LD_INT 9
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: LIST
21199: PUSH
21200: LD_VAR 0 17
21204: ARRAY
21205: PPUSH
21206: LD_VAR 0 4
21210: PPUSH
21211: CALL_OW 380
21215: GO 21234
// PrepareHuman ( false , i , skill ) ;
21217: LD_INT 0
21219: PPUSH
21220: LD_VAR 0 8
21224: PPUSH
21225: LD_VAR 0 4
21229: PPUSH
21230: CALL_OW 380
// end else
21234: GO 21253
// PrepareHuman ( false , i , skill ) ;
21236: LD_INT 0
21238: PPUSH
21239: LD_VAR 0 8
21243: PPUSH
21244: LD_VAR 0 4
21248: PPUSH
21249: CALL_OW 380
// un := CreateHuman ;
21253: LD_ADDR_VAR 0 14
21257: PUSH
21258: CALL_OW 44
21262: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21263: LD_ADDR_VAR 0 7
21267: PUSH
21268: LD_VAR 0 7
21272: PPUSH
21273: LD_INT 1
21275: PPUSH
21276: LD_VAR 0 14
21280: PPUSH
21281: CALL_OW 2
21285: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
21286: LD_VAR 0 14
21290: PPUSH
21291: LD_VAR 0 9
21295: PPUSH
21296: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
21300: LD_VAR 0 9
21304: PPUSH
21305: CALL_OW 313
21309: PUSH
21310: LD_INT 6
21312: EQUAL
21313: PUSH
21314: LD_VAR 0 9
21318: PPUSH
21319: CALL_OW 266
21323: PUSH
21324: LD_INT 32
21326: PUSH
21327: LD_INT 31
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: IN
21334: OR
21335: IFFALSE 21149
21337: GO 21146
21339: POP
21340: POP
// end else
21341: GO 21723
// for j = 1 to x do
21343: LD_ADDR_VAR 0 9
21347: PUSH
21348: DOUBLE
21349: LD_INT 1
21351: DEC
21352: ST_TO_ADDR
21353: LD_VAR 0 13
21357: PUSH
21358: FOR_TO
21359: IFFALSE 21721
// begin InitHc ;
21361: CALL_OW 19
// if not f then
21365: LD_VAR 0 12
21369: NOT
21370: IFFALSE 21459
// begin PrepareHuman ( false , i , skill ) ;
21372: LD_INT 0
21374: PPUSH
21375: LD_VAR 0 8
21379: PPUSH
21380: LD_VAR 0 4
21384: PPUSH
21385: CALL_OW 380
// un := CreateHuman ;
21389: LD_ADDR_VAR 0 14
21393: PUSH
21394: CALL_OW 44
21398: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21399: LD_ADDR_VAR 0 7
21403: PUSH
21404: LD_VAR 0 7
21408: PPUSH
21409: LD_INT 1
21411: PPUSH
21412: LD_VAR 0 14
21416: PPUSH
21417: CALL_OW 2
21421: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21422: LD_VAR 0 14
21426: PPUSH
21427: LD_VAR 0 1
21431: PPUSH
21432: CALL_OW 250
21436: PPUSH
21437: LD_VAR 0 1
21441: PPUSH
21442: CALL_OW 251
21446: PPUSH
21447: LD_INT 10
21449: PPUSH
21450: LD_INT 0
21452: PPUSH
21453: CALL_OW 50
// continue ;
21457: GO 21358
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
21459: LD_VAR 0 12
21463: PUSH
21464: LD_INT 1
21466: ARRAY
21467: PPUSH
21468: CALL_OW 313
21472: PUSH
21473: LD_VAR 0 12
21477: PUSH
21478: LD_INT 1
21480: ARRAY
21481: PPUSH
21482: CALL_OW 266
21486: PUSH
21487: LD_INT 32
21489: PUSH
21490: LD_INT 31
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: IN
21497: AND
21498: PUSH
21499: LD_VAR 0 12
21503: PUSH
21504: LD_INT 1
21506: ARRAY
21507: PPUSH
21508: CALL_OW 313
21512: PUSH
21513: LD_INT 6
21515: EQUAL
21516: OR
21517: IFFALSE 21537
// f := Delete ( f , 1 ) ;
21519: LD_ADDR_VAR 0 12
21523: PUSH
21524: LD_VAR 0 12
21528: PPUSH
21529: LD_INT 1
21531: PPUSH
21532: CALL_OW 3
21536: ST_TO_ADDR
// if not f then
21537: LD_VAR 0 12
21541: NOT
21542: IFFALSE 21560
// begin x := x + 2 ;
21544: LD_ADDR_VAR 0 13
21548: PUSH
21549: LD_VAR 0 13
21553: PUSH
21554: LD_INT 2
21556: PLUS
21557: ST_TO_ADDR
// continue ;
21558: GO 21358
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
21560: LD_VAR 0 12
21564: PUSH
21565: LD_INT 1
21567: ARRAY
21568: PPUSH
21569: CALL_OW 266
21573: PUSH
21574: LD_INT 5
21576: EQUAL
21577: IFFALSE 21651
// begin if UnitsInside ( f [ 1 ] ) < 3 then
21579: LD_VAR 0 12
21583: PUSH
21584: LD_INT 1
21586: ARRAY
21587: PPUSH
21588: CALL_OW 313
21592: PUSH
21593: LD_INT 3
21595: LESS
21596: IFFALSE 21632
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21598: LD_INT 0
21600: PPUSH
21601: LD_INT 5
21603: PUSH
21604: LD_INT 8
21606: PUSH
21607: LD_INT 9
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: LIST
21614: PUSH
21615: LD_VAR 0 17
21619: ARRAY
21620: PPUSH
21621: LD_VAR 0 4
21625: PPUSH
21626: CALL_OW 380
21630: GO 21649
// PrepareHuman ( false , i , skill ) ;
21632: LD_INT 0
21634: PPUSH
21635: LD_VAR 0 8
21639: PPUSH
21640: LD_VAR 0 4
21644: PPUSH
21645: CALL_OW 380
// end else
21649: GO 21668
// PrepareHuman ( false , i , skill ) ;
21651: LD_INT 0
21653: PPUSH
21654: LD_VAR 0 8
21658: PPUSH
21659: LD_VAR 0 4
21663: PPUSH
21664: CALL_OW 380
// un := CreateHuman ;
21668: LD_ADDR_VAR 0 14
21672: PUSH
21673: CALL_OW 44
21677: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21678: LD_ADDR_VAR 0 7
21682: PUSH
21683: LD_VAR 0 7
21687: PPUSH
21688: LD_INT 1
21690: PPUSH
21691: LD_VAR 0 14
21695: PPUSH
21696: CALL_OW 2
21700: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
21701: LD_VAR 0 14
21705: PPUSH
21706: LD_VAR 0 12
21710: PUSH
21711: LD_INT 1
21713: ARRAY
21714: PPUSH
21715: CALL_OW 52
// end ;
21719: GO 21358
21721: POP
21722: POP
// end ;
21723: GO 20660
21725: POP
21726: POP
// result := result ^ buildings ;
21727: LD_ADDR_VAR 0 7
21731: PUSH
21732: LD_VAR 0 7
21736: PUSH
21737: LD_VAR 0 18
21741: ADD
21742: ST_TO_ADDR
// end else
21743: GO 21886
// begin for i = 1 to personel do
21745: LD_ADDR_VAR 0 8
21749: PUSH
21750: DOUBLE
21751: LD_INT 1
21753: DEC
21754: ST_TO_ADDR
21755: LD_VAR 0 6
21759: PUSH
21760: FOR_TO
21761: IFFALSE 21884
// begin if i > 4 then
21763: LD_VAR 0 8
21767: PUSH
21768: LD_INT 4
21770: GREATER
21771: IFFALSE 21775
// break ;
21773: GO 21884
// x := personel [ i ] ;
21775: LD_ADDR_VAR 0 13
21779: PUSH
21780: LD_VAR 0 6
21784: PUSH
21785: LD_VAR 0 8
21789: ARRAY
21790: ST_TO_ADDR
// if x = - 1 then
21791: LD_VAR 0 13
21795: PUSH
21796: LD_INT 1
21798: NEG
21799: EQUAL
21800: IFFALSE 21804
// continue ;
21802: GO 21760
// PrepareHuman ( false , i , skill ) ;
21804: LD_INT 0
21806: PPUSH
21807: LD_VAR 0 8
21811: PPUSH
21812: LD_VAR 0 4
21816: PPUSH
21817: CALL_OW 380
// un := CreateHuman ;
21821: LD_ADDR_VAR 0 14
21825: PUSH
21826: CALL_OW 44
21830: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21831: LD_VAR 0 14
21835: PPUSH
21836: LD_VAR 0 1
21840: PPUSH
21841: CALL_OW 250
21845: PPUSH
21846: LD_VAR 0 1
21850: PPUSH
21851: CALL_OW 251
21855: PPUSH
21856: LD_INT 10
21858: PPUSH
21859: LD_INT 0
21861: PPUSH
21862: CALL_OW 50
// result := result ^ un ;
21866: LD_ADDR_VAR 0 7
21870: PUSH
21871: LD_VAR 0 7
21875: PUSH
21876: LD_VAR 0 14
21880: ADD
21881: ST_TO_ADDR
// end ;
21882: GO 21760
21884: POP
21885: POP
// end ; end ;
21886: LD_VAR 0 7
21890: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
21891: LD_INT 0
21893: PPUSH
21894: PPUSH
21895: PPUSH
21896: PPUSH
21897: PPUSH
21898: PPUSH
21899: PPUSH
21900: PPUSH
21901: PPUSH
21902: PPUSH
21903: PPUSH
21904: PPUSH
21905: PPUSH
21906: PPUSH
21907: PPUSH
21908: PPUSH
// result := false ;
21909: LD_ADDR_VAR 0 3
21913: PUSH
21914: LD_INT 0
21916: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
21917: LD_VAR 0 1
21921: NOT
21922: PUSH
21923: LD_VAR 0 1
21927: PPUSH
21928: CALL_OW 266
21932: PUSH
21933: LD_INT 32
21935: PUSH
21936: LD_INT 33
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: IN
21943: NOT
21944: OR
21945: IFFALSE 21949
// exit ;
21947: GO 23085
// nat := GetNation ( tower ) ;
21949: LD_ADDR_VAR 0 12
21953: PUSH
21954: LD_VAR 0 1
21958: PPUSH
21959: CALL_OW 248
21963: ST_TO_ADDR
// side := GetSide ( tower ) ;
21964: LD_ADDR_VAR 0 16
21968: PUSH
21969: LD_VAR 0 1
21973: PPUSH
21974: CALL_OW 255
21978: ST_TO_ADDR
// x := GetX ( tower ) ;
21979: LD_ADDR_VAR 0 10
21983: PUSH
21984: LD_VAR 0 1
21988: PPUSH
21989: CALL_OW 250
21993: ST_TO_ADDR
// y := GetY ( tower ) ;
21994: LD_ADDR_VAR 0 11
21998: PUSH
21999: LD_VAR 0 1
22003: PPUSH
22004: CALL_OW 251
22008: ST_TO_ADDR
// if not x or not y then
22009: LD_VAR 0 10
22013: NOT
22014: PUSH
22015: LD_VAR 0 11
22019: NOT
22020: OR
22021: IFFALSE 22025
// exit ;
22023: GO 23085
// weapon := 0 ;
22025: LD_ADDR_VAR 0 18
22029: PUSH
22030: LD_INT 0
22032: ST_TO_ADDR
// fac_list := [ ] ;
22033: LD_ADDR_VAR 0 17
22037: PUSH
22038: EMPTY
22039: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
22040: LD_ADDR_VAR 0 6
22044: PUSH
22045: LD_VAR 0 1
22049: PPUSH
22050: CALL_OW 274
22054: PPUSH
22055: LD_VAR 0 2
22059: PPUSH
22060: CALL 19663 0 2
22064: PPUSH
22065: LD_INT 30
22067: PUSH
22068: LD_INT 3
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PPUSH
22075: CALL_OW 72
22079: ST_TO_ADDR
// if not factories then
22080: LD_VAR 0 6
22084: NOT
22085: IFFALSE 22089
// exit ;
22087: GO 23085
// for i in factories do
22089: LD_ADDR_VAR 0 8
22093: PUSH
22094: LD_VAR 0 6
22098: PUSH
22099: FOR_IN
22100: IFFALSE 22125
// fac_list := fac_list union AvailableWeaponList ( i ) ;
22102: LD_ADDR_VAR 0 17
22106: PUSH
22107: LD_VAR 0 17
22111: PUSH
22112: LD_VAR 0 8
22116: PPUSH
22117: CALL_OW 478
22121: UNION
22122: ST_TO_ADDR
22123: GO 22099
22125: POP
22126: POP
// if not fac_list then
22127: LD_VAR 0 17
22131: NOT
22132: IFFALSE 22136
// exit ;
22134: GO 23085
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
22136: LD_ADDR_VAR 0 5
22140: PUSH
22141: LD_INT 4
22143: PUSH
22144: LD_INT 5
22146: PUSH
22147: LD_INT 9
22149: PUSH
22150: LD_INT 10
22152: PUSH
22153: LD_INT 6
22155: PUSH
22156: LD_INT 7
22158: PUSH
22159: LD_INT 11
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: PUSH
22171: LD_INT 27
22173: PUSH
22174: LD_INT 28
22176: PUSH
22177: LD_INT 26
22179: PUSH
22180: LD_INT 30
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: PUSH
22189: LD_INT 43
22191: PUSH
22192: LD_INT 44
22194: PUSH
22195: LD_INT 46
22197: PUSH
22198: LD_INT 45
22200: PUSH
22201: LD_INT 47
22203: PUSH
22204: LD_INT 49
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: LIST
22219: PUSH
22220: LD_VAR 0 12
22224: ARRAY
22225: ST_TO_ADDR
// for i in list do
22226: LD_ADDR_VAR 0 8
22230: PUSH
22231: LD_VAR 0 5
22235: PUSH
22236: FOR_IN
22237: IFFALSE 22270
// if not i in fac_list then
22239: LD_VAR 0 8
22243: PUSH
22244: LD_VAR 0 17
22248: IN
22249: NOT
22250: IFFALSE 22268
// list := list diff i ;
22252: LD_ADDR_VAR 0 5
22256: PUSH
22257: LD_VAR 0 5
22261: PUSH
22262: LD_VAR 0 8
22266: DIFF
22267: ST_TO_ADDR
22268: GO 22236
22270: POP
22271: POP
// if not list then
22272: LD_VAR 0 5
22276: NOT
22277: IFFALSE 22281
// exit ;
22279: GO 23085
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
22281: LD_VAR 0 12
22285: PUSH
22286: LD_INT 3
22288: EQUAL
22289: PUSH
22290: LD_INT 49
22292: PUSH
22293: LD_VAR 0 5
22297: IN
22298: AND
22299: PUSH
22300: LD_INT 31
22302: PPUSH
22303: LD_VAR 0 16
22307: PPUSH
22308: CALL_OW 321
22312: PUSH
22313: LD_INT 2
22315: EQUAL
22316: AND
22317: IFFALSE 22377
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
22319: LD_INT 22
22321: PUSH
22322: LD_VAR 0 16
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PUSH
22331: LD_INT 35
22333: PUSH
22334: LD_INT 49
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: PUSH
22341: LD_INT 91
22343: PUSH
22344: LD_VAR 0 1
22348: PUSH
22349: LD_INT 10
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: LIST
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: LIST
22361: PPUSH
22362: CALL_OW 69
22366: NOT
22367: IFFALSE 22377
// weapon := ru_time_lapser ;
22369: LD_ADDR_VAR 0 18
22373: PUSH
22374: LD_INT 49
22376: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
22377: LD_VAR 0 12
22381: PUSH
22382: LD_INT 1
22384: PUSH
22385: LD_INT 2
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: IN
22392: PUSH
22393: LD_INT 11
22395: PUSH
22396: LD_VAR 0 5
22400: IN
22401: PUSH
22402: LD_INT 30
22404: PUSH
22405: LD_VAR 0 5
22409: IN
22410: OR
22411: AND
22412: PUSH
22413: LD_INT 6
22415: PPUSH
22416: LD_VAR 0 16
22420: PPUSH
22421: CALL_OW 321
22425: PUSH
22426: LD_INT 2
22428: EQUAL
22429: AND
22430: IFFALSE 22595
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
22432: LD_INT 22
22434: PUSH
22435: LD_VAR 0 16
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: PUSH
22444: LD_INT 2
22446: PUSH
22447: LD_INT 35
22449: PUSH
22450: LD_INT 11
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: PUSH
22457: LD_INT 35
22459: PUSH
22460: LD_INT 30
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: LIST
22471: PUSH
22472: LD_INT 91
22474: PUSH
22475: LD_VAR 0 1
22479: PUSH
22480: LD_INT 18
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: LIST
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: LIST
22492: PPUSH
22493: CALL_OW 69
22497: NOT
22498: PUSH
22499: LD_INT 22
22501: PUSH
22502: LD_VAR 0 16
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: PUSH
22511: LD_INT 2
22513: PUSH
22514: LD_INT 30
22516: PUSH
22517: LD_INT 32
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: PUSH
22524: LD_INT 30
22526: PUSH
22527: LD_INT 33
22529: PUSH
22530: EMPTY
22531: LIST
22532: LIST
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 91
22541: PUSH
22542: LD_VAR 0 1
22546: PUSH
22547: LD_INT 12
22549: PUSH
22550: EMPTY
22551: LIST
22552: LIST
22553: LIST
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: LIST
22559: PUSH
22560: EMPTY
22561: LIST
22562: PPUSH
22563: CALL_OW 69
22567: PUSH
22568: LD_INT 2
22570: GREATER
22571: AND
22572: IFFALSE 22595
// weapon := [ us_radar , ar_radar ] [ nat ] ;
22574: LD_ADDR_VAR 0 18
22578: PUSH
22579: LD_INT 11
22581: PUSH
22582: LD_INT 30
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: LD_VAR 0 12
22593: ARRAY
22594: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
22595: LD_VAR 0 18
22599: NOT
22600: PUSH
22601: LD_INT 40
22603: PPUSH
22604: LD_VAR 0 16
22608: PPUSH
22609: CALL_OW 321
22613: PUSH
22614: LD_INT 2
22616: EQUAL
22617: AND
22618: PUSH
22619: LD_INT 7
22621: PUSH
22622: LD_VAR 0 5
22626: IN
22627: PUSH
22628: LD_INT 28
22630: PUSH
22631: LD_VAR 0 5
22635: IN
22636: OR
22637: PUSH
22638: LD_INT 45
22640: PUSH
22641: LD_VAR 0 5
22645: IN
22646: OR
22647: AND
22648: IFFALSE 22902
// begin hex := GetHexInfo ( x , y ) ;
22650: LD_ADDR_VAR 0 4
22654: PUSH
22655: LD_VAR 0 10
22659: PPUSH
22660: LD_VAR 0 11
22664: PPUSH
22665: CALL_OW 546
22669: ST_TO_ADDR
// if hex [ 1 ] then
22670: LD_VAR 0 4
22674: PUSH
22675: LD_INT 1
22677: ARRAY
22678: IFFALSE 22682
// exit ;
22680: GO 23085
// height := hex [ 2 ] ;
22682: LD_ADDR_VAR 0 15
22686: PUSH
22687: LD_VAR 0 4
22691: PUSH
22692: LD_INT 2
22694: ARRAY
22695: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
22696: LD_ADDR_VAR 0 14
22700: PUSH
22701: LD_INT 0
22703: PUSH
22704: LD_INT 2
22706: PUSH
22707: LD_INT 3
22709: PUSH
22710: LD_INT 5
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: ST_TO_ADDR
// for i in tmp do
22719: LD_ADDR_VAR 0 8
22723: PUSH
22724: LD_VAR 0 14
22728: PUSH
22729: FOR_IN
22730: IFFALSE 22900
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
22732: LD_ADDR_VAR 0 9
22736: PUSH
22737: LD_VAR 0 10
22741: PPUSH
22742: LD_VAR 0 8
22746: PPUSH
22747: LD_INT 5
22749: PPUSH
22750: CALL_OW 272
22754: PUSH
22755: LD_VAR 0 11
22759: PPUSH
22760: LD_VAR 0 8
22764: PPUSH
22765: LD_INT 5
22767: PPUSH
22768: CALL_OW 273
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
22777: LD_VAR 0 9
22781: PUSH
22782: LD_INT 1
22784: ARRAY
22785: PPUSH
22786: LD_VAR 0 9
22790: PUSH
22791: LD_INT 2
22793: ARRAY
22794: PPUSH
22795: CALL_OW 488
22799: IFFALSE 22898
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
22801: LD_ADDR_VAR 0 4
22805: PUSH
22806: LD_VAR 0 9
22810: PUSH
22811: LD_INT 1
22813: ARRAY
22814: PPUSH
22815: LD_VAR 0 9
22819: PUSH
22820: LD_INT 2
22822: ARRAY
22823: PPUSH
22824: CALL_OW 546
22828: ST_TO_ADDR
// if hex [ 1 ] then
22829: LD_VAR 0 4
22833: PUSH
22834: LD_INT 1
22836: ARRAY
22837: IFFALSE 22841
// continue ;
22839: GO 22729
// h := hex [ 2 ] ;
22841: LD_ADDR_VAR 0 13
22845: PUSH
22846: LD_VAR 0 4
22850: PUSH
22851: LD_INT 2
22853: ARRAY
22854: ST_TO_ADDR
// if h + 7 < height then
22855: LD_VAR 0 13
22859: PUSH
22860: LD_INT 7
22862: PLUS
22863: PUSH
22864: LD_VAR 0 15
22868: LESS
22869: IFFALSE 22898
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
22871: LD_ADDR_VAR 0 18
22875: PUSH
22876: LD_INT 7
22878: PUSH
22879: LD_INT 28
22881: PUSH
22882: LD_INT 45
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: LIST
22889: PUSH
22890: LD_VAR 0 12
22894: ARRAY
22895: ST_TO_ADDR
// break ;
22896: GO 22900
// end ; end ; end ;
22898: GO 22729
22900: POP
22901: POP
// end ; if not weapon then
22902: LD_VAR 0 18
22906: NOT
22907: IFFALSE 22967
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
22909: LD_ADDR_VAR 0 5
22913: PUSH
22914: LD_VAR 0 5
22918: PUSH
22919: LD_INT 11
22921: PUSH
22922: LD_INT 30
22924: PUSH
22925: LD_INT 49
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: LIST
22932: DIFF
22933: ST_TO_ADDR
// if not list then
22934: LD_VAR 0 5
22938: NOT
22939: IFFALSE 22943
// exit ;
22941: GO 23085
// weapon := list [ rand ( 1 , list ) ] ;
22943: LD_ADDR_VAR 0 18
22947: PUSH
22948: LD_VAR 0 5
22952: PUSH
22953: LD_INT 1
22955: PPUSH
22956: LD_VAR 0 5
22960: PPUSH
22961: CALL_OW 12
22965: ARRAY
22966: ST_TO_ADDR
// end ; if weapon then
22967: LD_VAR 0 18
22971: IFFALSE 23085
// begin tmp := CostOfWeapon ( weapon ) ;
22973: LD_ADDR_VAR 0 14
22977: PUSH
22978: LD_VAR 0 18
22982: PPUSH
22983: CALL_OW 451
22987: ST_TO_ADDR
// j := GetBase ( tower ) ;
22988: LD_ADDR_VAR 0 9
22992: PUSH
22993: LD_VAR 0 1
22997: PPUSH
22998: CALL_OW 274
23002: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
23003: LD_VAR 0 9
23007: PPUSH
23008: LD_INT 1
23010: PPUSH
23011: CALL_OW 275
23015: PUSH
23016: LD_VAR 0 14
23020: PUSH
23021: LD_INT 1
23023: ARRAY
23024: GREATEREQUAL
23025: PUSH
23026: LD_VAR 0 9
23030: PPUSH
23031: LD_INT 2
23033: PPUSH
23034: CALL_OW 275
23038: PUSH
23039: LD_VAR 0 14
23043: PUSH
23044: LD_INT 2
23046: ARRAY
23047: GREATEREQUAL
23048: AND
23049: PUSH
23050: LD_VAR 0 9
23054: PPUSH
23055: LD_INT 3
23057: PPUSH
23058: CALL_OW 275
23062: PUSH
23063: LD_VAR 0 14
23067: PUSH
23068: LD_INT 3
23070: ARRAY
23071: GREATEREQUAL
23072: AND
23073: IFFALSE 23085
// result := weapon ;
23075: LD_ADDR_VAR 0 3
23079: PUSH
23080: LD_VAR 0 18
23084: ST_TO_ADDR
// end ; end ;
23085: LD_VAR 0 3
23089: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
23090: LD_INT 0
23092: PPUSH
23093: PPUSH
// result := true ;
23094: LD_ADDR_VAR 0 3
23098: PUSH
23099: LD_INT 1
23101: ST_TO_ADDR
// if array1 = array2 then
23102: LD_VAR 0 1
23106: PUSH
23107: LD_VAR 0 2
23111: EQUAL
23112: IFFALSE 23172
// begin for i = 1 to array1 do
23114: LD_ADDR_VAR 0 4
23118: PUSH
23119: DOUBLE
23120: LD_INT 1
23122: DEC
23123: ST_TO_ADDR
23124: LD_VAR 0 1
23128: PUSH
23129: FOR_TO
23130: IFFALSE 23168
// if array1 [ i ] <> array2 [ i ] then
23132: LD_VAR 0 1
23136: PUSH
23137: LD_VAR 0 4
23141: ARRAY
23142: PUSH
23143: LD_VAR 0 2
23147: PUSH
23148: LD_VAR 0 4
23152: ARRAY
23153: NONEQUAL
23154: IFFALSE 23166
// begin result := false ;
23156: LD_ADDR_VAR 0 3
23160: PUSH
23161: LD_INT 0
23163: ST_TO_ADDR
// break ;
23164: GO 23168
// end ;
23166: GO 23129
23168: POP
23169: POP
// end else
23170: GO 23180
// result := false ;
23172: LD_ADDR_VAR 0 3
23176: PUSH
23177: LD_INT 0
23179: ST_TO_ADDR
// end ;
23180: LD_VAR 0 3
23184: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
23185: LD_INT 0
23187: PPUSH
23188: PPUSH
23189: PPUSH
// pom := GetBase ( fac ) ;
23190: LD_ADDR_VAR 0 5
23194: PUSH
23195: LD_VAR 0 1
23199: PPUSH
23200: CALL_OW 274
23204: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
23205: LD_ADDR_VAR 0 4
23209: PUSH
23210: LD_VAR 0 2
23214: PUSH
23215: LD_INT 1
23217: ARRAY
23218: PPUSH
23219: LD_VAR 0 2
23223: PUSH
23224: LD_INT 2
23226: ARRAY
23227: PPUSH
23228: LD_VAR 0 2
23232: PUSH
23233: LD_INT 3
23235: ARRAY
23236: PPUSH
23237: LD_VAR 0 2
23241: PUSH
23242: LD_INT 4
23244: ARRAY
23245: PPUSH
23246: CALL_OW 449
23250: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23251: LD_ADDR_VAR 0 3
23255: PUSH
23256: LD_VAR 0 5
23260: PPUSH
23261: LD_INT 1
23263: PPUSH
23264: CALL_OW 275
23268: PUSH
23269: LD_VAR 0 4
23273: PUSH
23274: LD_INT 1
23276: ARRAY
23277: GREATEREQUAL
23278: PUSH
23279: LD_VAR 0 5
23283: PPUSH
23284: LD_INT 2
23286: PPUSH
23287: CALL_OW 275
23291: PUSH
23292: LD_VAR 0 4
23296: PUSH
23297: LD_INT 2
23299: ARRAY
23300: GREATEREQUAL
23301: AND
23302: PUSH
23303: LD_VAR 0 5
23307: PPUSH
23308: LD_INT 3
23310: PPUSH
23311: CALL_OW 275
23315: PUSH
23316: LD_VAR 0 4
23320: PUSH
23321: LD_INT 3
23323: ARRAY
23324: GREATEREQUAL
23325: AND
23326: ST_TO_ADDR
// end ;
23327: LD_VAR 0 3
23331: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
23332: LD_INT 0
23334: PPUSH
23335: PPUSH
23336: PPUSH
23337: PPUSH
// pom := GetBase ( building ) ;
23338: LD_ADDR_VAR 0 3
23342: PUSH
23343: LD_VAR 0 1
23347: PPUSH
23348: CALL_OW 274
23352: ST_TO_ADDR
// if not pom then
23353: LD_VAR 0 3
23357: NOT
23358: IFFALSE 23362
// exit ;
23360: GO 23532
// btype := GetBType ( building ) ;
23362: LD_ADDR_VAR 0 5
23366: PUSH
23367: LD_VAR 0 1
23371: PPUSH
23372: CALL_OW 266
23376: ST_TO_ADDR
// if btype = b_armoury then
23377: LD_VAR 0 5
23381: PUSH
23382: LD_INT 4
23384: EQUAL
23385: IFFALSE 23395
// btype := b_barracks ;
23387: LD_ADDR_VAR 0 5
23391: PUSH
23392: LD_INT 5
23394: ST_TO_ADDR
// if btype = b_depot then
23395: LD_VAR 0 5
23399: PUSH
23400: LD_INT 0
23402: EQUAL
23403: IFFALSE 23413
// btype := b_warehouse ;
23405: LD_ADDR_VAR 0 5
23409: PUSH
23410: LD_INT 1
23412: ST_TO_ADDR
// if btype = b_workshop then
23413: LD_VAR 0 5
23417: PUSH
23418: LD_INT 2
23420: EQUAL
23421: IFFALSE 23431
// btype := b_factory ;
23423: LD_ADDR_VAR 0 5
23427: PUSH
23428: LD_INT 3
23430: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23431: LD_ADDR_VAR 0 4
23435: PUSH
23436: LD_VAR 0 5
23440: PPUSH
23441: LD_VAR 0 1
23445: PPUSH
23446: CALL_OW 248
23450: PPUSH
23451: CALL_OW 450
23455: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23456: LD_ADDR_VAR 0 2
23460: PUSH
23461: LD_VAR 0 3
23465: PPUSH
23466: LD_INT 1
23468: PPUSH
23469: CALL_OW 275
23473: PUSH
23474: LD_VAR 0 4
23478: PUSH
23479: LD_INT 1
23481: ARRAY
23482: GREATEREQUAL
23483: PUSH
23484: LD_VAR 0 3
23488: PPUSH
23489: LD_INT 2
23491: PPUSH
23492: CALL_OW 275
23496: PUSH
23497: LD_VAR 0 4
23501: PUSH
23502: LD_INT 2
23504: ARRAY
23505: GREATEREQUAL
23506: AND
23507: PUSH
23508: LD_VAR 0 3
23512: PPUSH
23513: LD_INT 3
23515: PPUSH
23516: CALL_OW 275
23520: PUSH
23521: LD_VAR 0 4
23525: PUSH
23526: LD_INT 3
23528: ARRAY
23529: GREATEREQUAL
23530: AND
23531: ST_TO_ADDR
// end ;
23532: LD_VAR 0 2
23536: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
23537: LD_INT 0
23539: PPUSH
23540: PPUSH
23541: PPUSH
// pom := GetBase ( building ) ;
23542: LD_ADDR_VAR 0 4
23546: PUSH
23547: LD_VAR 0 1
23551: PPUSH
23552: CALL_OW 274
23556: ST_TO_ADDR
// if not pom then
23557: LD_VAR 0 4
23561: NOT
23562: IFFALSE 23566
// exit ;
23564: GO 23667
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23566: LD_ADDR_VAR 0 5
23570: PUSH
23571: LD_VAR 0 2
23575: PPUSH
23576: LD_VAR 0 1
23580: PPUSH
23581: CALL_OW 248
23585: PPUSH
23586: CALL_OW 450
23590: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23591: LD_ADDR_VAR 0 3
23595: PUSH
23596: LD_VAR 0 4
23600: PPUSH
23601: LD_INT 1
23603: PPUSH
23604: CALL_OW 275
23608: PUSH
23609: LD_VAR 0 5
23613: PUSH
23614: LD_INT 1
23616: ARRAY
23617: GREATEREQUAL
23618: PUSH
23619: LD_VAR 0 4
23623: PPUSH
23624: LD_INT 2
23626: PPUSH
23627: CALL_OW 275
23631: PUSH
23632: LD_VAR 0 5
23636: PUSH
23637: LD_INT 2
23639: ARRAY
23640: GREATEREQUAL
23641: AND
23642: PUSH
23643: LD_VAR 0 4
23647: PPUSH
23648: LD_INT 3
23650: PPUSH
23651: CALL_OW 275
23655: PUSH
23656: LD_VAR 0 5
23660: PUSH
23661: LD_INT 3
23663: ARRAY
23664: GREATEREQUAL
23665: AND
23666: ST_TO_ADDR
// end ;
23667: LD_VAR 0 3
23671: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
23672: LD_INT 0
23674: PPUSH
23675: PPUSH
23676: PPUSH
23677: PPUSH
23678: PPUSH
23679: PPUSH
23680: PPUSH
23681: PPUSH
23682: PPUSH
23683: PPUSH
// result := false ;
23684: LD_ADDR_VAR 0 6
23688: PUSH
23689: LD_INT 0
23691: ST_TO_ADDR
// if not base or not btype or not x or not y then
23692: LD_VAR 0 1
23696: NOT
23697: PUSH
23698: LD_VAR 0 2
23702: NOT
23703: OR
23704: PUSH
23705: LD_VAR 0 3
23709: NOT
23710: OR
23711: PUSH
23712: LD_VAR 0 4
23716: NOT
23717: OR
23718: IFFALSE 23722
// exit ;
23720: GO 24313
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
23722: LD_ADDR_VAR 0 12
23726: PUSH
23727: LD_VAR 0 2
23731: PPUSH
23732: LD_VAR 0 3
23736: PPUSH
23737: LD_VAR 0 4
23741: PPUSH
23742: LD_VAR 0 5
23746: PPUSH
23747: LD_VAR 0 1
23751: PUSH
23752: LD_INT 1
23754: ARRAY
23755: PPUSH
23756: CALL_OW 248
23760: PPUSH
23761: LD_INT 0
23763: PPUSH
23764: CALL 25150 0 6
23768: ST_TO_ADDR
// if not hexes then
23769: LD_VAR 0 12
23773: NOT
23774: IFFALSE 23778
// exit ;
23776: GO 24313
// for i = 1 to hexes do
23778: LD_ADDR_VAR 0 7
23782: PUSH
23783: DOUBLE
23784: LD_INT 1
23786: DEC
23787: ST_TO_ADDR
23788: LD_VAR 0 12
23792: PUSH
23793: FOR_TO
23794: IFFALSE 24311
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23796: LD_ADDR_VAR 0 11
23800: PUSH
23801: LD_VAR 0 12
23805: PUSH
23806: LD_VAR 0 7
23810: ARRAY
23811: PUSH
23812: LD_INT 1
23814: ARRAY
23815: PPUSH
23816: LD_VAR 0 12
23820: PUSH
23821: LD_VAR 0 7
23825: ARRAY
23826: PUSH
23827: LD_INT 2
23829: ARRAY
23830: PPUSH
23831: CALL_OW 428
23835: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
23836: LD_VAR 0 12
23840: PUSH
23841: LD_VAR 0 7
23845: ARRAY
23846: PUSH
23847: LD_INT 1
23849: ARRAY
23850: PPUSH
23851: LD_VAR 0 12
23855: PUSH
23856: LD_VAR 0 7
23860: ARRAY
23861: PUSH
23862: LD_INT 2
23864: ARRAY
23865: PPUSH
23866: CALL_OW 351
23870: PUSH
23871: LD_VAR 0 12
23875: PUSH
23876: LD_VAR 0 7
23880: ARRAY
23881: PUSH
23882: LD_INT 1
23884: ARRAY
23885: PPUSH
23886: LD_VAR 0 12
23890: PUSH
23891: LD_VAR 0 7
23895: ARRAY
23896: PUSH
23897: LD_INT 2
23899: ARRAY
23900: PPUSH
23901: CALL_OW 488
23905: NOT
23906: OR
23907: PUSH
23908: LD_VAR 0 11
23912: PPUSH
23913: CALL_OW 247
23917: PUSH
23918: LD_INT 3
23920: EQUAL
23921: OR
23922: IFFALSE 23928
// exit ;
23924: POP
23925: POP
23926: GO 24313
// if not tmp then
23928: LD_VAR 0 11
23932: NOT
23933: IFFALSE 23937
// continue ;
23935: GO 23793
// result := true ;
23937: LD_ADDR_VAR 0 6
23941: PUSH
23942: LD_INT 1
23944: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23945: LD_ADDR_VAR 0 15
23949: PUSH
23950: LD_INT 22
23952: PUSH
23953: LD_VAR 0 11
23957: PPUSH
23958: CALL_OW 255
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: LD_INT 2
23969: PUSH
23970: LD_INT 30
23972: PUSH
23973: LD_INT 0
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 30
23982: PUSH
23983: LD_INT 1
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: LIST
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: PPUSH
23999: CALL_OW 69
24003: ST_TO_ADDR
// if dep then
24004: LD_VAR 0 15
24008: IFFALSE 24144
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
24010: LD_ADDR_VAR 0 14
24014: PUSH
24015: LD_VAR 0 15
24019: PUSH
24020: LD_INT 1
24022: ARRAY
24023: PPUSH
24024: CALL_OW 250
24028: PPUSH
24029: LD_VAR 0 15
24033: PUSH
24034: LD_INT 1
24036: ARRAY
24037: PPUSH
24038: CALL_OW 254
24042: PPUSH
24043: LD_INT 5
24045: PPUSH
24046: CALL_OW 272
24050: PUSH
24051: LD_VAR 0 15
24055: PUSH
24056: LD_INT 1
24058: ARRAY
24059: PPUSH
24060: CALL_OW 251
24064: PPUSH
24065: LD_VAR 0 15
24069: PUSH
24070: LD_INT 1
24072: ARRAY
24073: PPUSH
24074: CALL_OW 254
24078: PPUSH
24079: LD_INT 5
24081: PPUSH
24082: CALL_OW 273
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
24091: LD_VAR 0 14
24095: PUSH
24096: LD_INT 1
24098: ARRAY
24099: PPUSH
24100: LD_VAR 0 14
24104: PUSH
24105: LD_INT 2
24107: ARRAY
24108: PPUSH
24109: CALL_OW 488
24113: IFFALSE 24144
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
24115: LD_VAR 0 11
24119: PPUSH
24120: LD_VAR 0 14
24124: PUSH
24125: LD_INT 1
24127: ARRAY
24128: PPUSH
24129: LD_VAR 0 14
24133: PUSH
24134: LD_INT 2
24136: ARRAY
24137: PPUSH
24138: CALL_OW 111
// continue ;
24142: GO 23793
// end ; end ; r := GetDir ( tmp ) ;
24144: LD_ADDR_VAR 0 13
24148: PUSH
24149: LD_VAR 0 11
24153: PPUSH
24154: CALL_OW 254
24158: ST_TO_ADDR
// if r = 5 then
24159: LD_VAR 0 13
24163: PUSH
24164: LD_INT 5
24166: EQUAL
24167: IFFALSE 24177
// r := 0 ;
24169: LD_ADDR_VAR 0 13
24173: PUSH
24174: LD_INT 0
24176: ST_TO_ADDR
// for j = r to 5 do
24177: LD_ADDR_VAR 0 8
24181: PUSH
24182: DOUBLE
24183: LD_VAR 0 13
24187: DEC
24188: ST_TO_ADDR
24189: LD_INT 5
24191: PUSH
24192: FOR_TO
24193: IFFALSE 24307
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
24195: LD_ADDR_VAR 0 9
24199: PUSH
24200: LD_VAR 0 11
24204: PPUSH
24205: CALL_OW 250
24209: PPUSH
24210: LD_VAR 0 8
24214: PPUSH
24215: LD_INT 2
24217: PPUSH
24218: CALL_OW 272
24222: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
24223: LD_ADDR_VAR 0 10
24227: PUSH
24228: LD_VAR 0 11
24232: PPUSH
24233: CALL_OW 251
24237: PPUSH
24238: LD_VAR 0 8
24242: PPUSH
24243: LD_INT 2
24245: PPUSH
24246: CALL_OW 273
24250: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
24251: LD_VAR 0 9
24255: PPUSH
24256: LD_VAR 0 10
24260: PPUSH
24261: CALL_OW 488
24265: PUSH
24266: LD_VAR 0 9
24270: PPUSH
24271: LD_VAR 0 10
24275: PPUSH
24276: CALL_OW 428
24280: NOT
24281: AND
24282: IFFALSE 24305
// begin ComMoveXY ( tmp , _x , _y ) ;
24284: LD_VAR 0 11
24288: PPUSH
24289: LD_VAR 0 9
24293: PPUSH
24294: LD_VAR 0 10
24298: PPUSH
24299: CALL_OW 111
// break ;
24303: GO 24307
// end ; end ;
24305: GO 24192
24307: POP
24308: POP
// end ;
24309: GO 23793
24311: POP
24312: POP
// end ;
24313: LD_VAR 0 6
24317: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
24318: LD_INT 0
24320: PPUSH
24321: PPUSH
24322: PPUSH
24323: PPUSH
24324: PPUSH
24325: PPUSH
24326: PPUSH
24327: PPUSH
24328: PPUSH
24329: PPUSH
// result := false ;
24330: LD_ADDR_VAR 0 6
24334: PUSH
24335: LD_INT 0
24337: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
24338: LD_VAR 0 1
24342: NOT
24343: PUSH
24344: LD_VAR 0 1
24348: PPUSH
24349: CALL_OW 266
24353: PUSH
24354: LD_INT 0
24356: PUSH
24357: LD_INT 1
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: IN
24364: NOT
24365: OR
24366: PUSH
24367: LD_VAR 0 2
24371: NOT
24372: OR
24373: PUSH
24374: LD_VAR 0 5
24378: PUSH
24379: LD_INT 0
24381: PUSH
24382: LD_INT 1
24384: PUSH
24385: LD_INT 2
24387: PUSH
24388: LD_INT 3
24390: PUSH
24391: LD_INT 4
24393: PUSH
24394: LD_INT 5
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: IN
24405: NOT
24406: OR
24407: PUSH
24408: LD_VAR 0 3
24412: PPUSH
24413: LD_VAR 0 4
24417: PPUSH
24418: CALL_OW 488
24422: NOT
24423: OR
24424: IFFALSE 24428
// exit ;
24426: GO 25145
// pom := GetBase ( depot ) ;
24428: LD_ADDR_VAR 0 10
24432: PUSH
24433: LD_VAR 0 1
24437: PPUSH
24438: CALL_OW 274
24442: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
24443: LD_ADDR_VAR 0 11
24447: PUSH
24448: LD_VAR 0 2
24452: PPUSH
24453: LD_VAR 0 1
24457: PPUSH
24458: CALL_OW 248
24462: PPUSH
24463: CALL_OW 450
24467: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
24468: LD_VAR 0 10
24472: PPUSH
24473: LD_INT 1
24475: PPUSH
24476: CALL_OW 275
24480: PUSH
24481: LD_VAR 0 11
24485: PUSH
24486: LD_INT 1
24488: ARRAY
24489: GREATEREQUAL
24490: PUSH
24491: LD_VAR 0 10
24495: PPUSH
24496: LD_INT 2
24498: PPUSH
24499: CALL_OW 275
24503: PUSH
24504: LD_VAR 0 11
24508: PUSH
24509: LD_INT 2
24511: ARRAY
24512: GREATEREQUAL
24513: AND
24514: PUSH
24515: LD_VAR 0 10
24519: PPUSH
24520: LD_INT 3
24522: PPUSH
24523: CALL_OW 275
24527: PUSH
24528: LD_VAR 0 11
24532: PUSH
24533: LD_INT 3
24535: ARRAY
24536: GREATEREQUAL
24537: AND
24538: NOT
24539: IFFALSE 24543
// exit ;
24541: GO 25145
// if GetBType ( depot ) = b_depot then
24543: LD_VAR 0 1
24547: PPUSH
24548: CALL_OW 266
24552: PUSH
24553: LD_INT 0
24555: EQUAL
24556: IFFALSE 24568
// dist := 28 else
24558: LD_ADDR_VAR 0 14
24562: PUSH
24563: LD_INT 28
24565: ST_TO_ADDR
24566: GO 24576
// dist := 36 ;
24568: LD_ADDR_VAR 0 14
24572: PUSH
24573: LD_INT 36
24575: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
24576: LD_VAR 0 1
24580: PPUSH
24581: LD_VAR 0 3
24585: PPUSH
24586: LD_VAR 0 4
24590: PPUSH
24591: CALL_OW 297
24595: PUSH
24596: LD_VAR 0 14
24600: GREATER
24601: IFFALSE 24605
// exit ;
24603: GO 25145
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
24605: LD_ADDR_VAR 0 12
24609: PUSH
24610: LD_VAR 0 2
24614: PPUSH
24615: LD_VAR 0 3
24619: PPUSH
24620: LD_VAR 0 4
24624: PPUSH
24625: LD_VAR 0 5
24629: PPUSH
24630: LD_VAR 0 1
24634: PPUSH
24635: CALL_OW 248
24639: PPUSH
24640: LD_INT 0
24642: PPUSH
24643: CALL 25150 0 6
24647: ST_TO_ADDR
// if not hexes then
24648: LD_VAR 0 12
24652: NOT
24653: IFFALSE 24657
// exit ;
24655: GO 25145
// hex := GetHexInfo ( x , y ) ;
24657: LD_ADDR_VAR 0 15
24661: PUSH
24662: LD_VAR 0 3
24666: PPUSH
24667: LD_VAR 0 4
24671: PPUSH
24672: CALL_OW 546
24676: ST_TO_ADDR
// if hex [ 1 ] then
24677: LD_VAR 0 15
24681: PUSH
24682: LD_INT 1
24684: ARRAY
24685: IFFALSE 24689
// exit ;
24687: GO 25145
// height := hex [ 2 ] ;
24689: LD_ADDR_VAR 0 13
24693: PUSH
24694: LD_VAR 0 15
24698: PUSH
24699: LD_INT 2
24701: ARRAY
24702: ST_TO_ADDR
// for i = 1 to hexes do
24703: LD_ADDR_VAR 0 7
24707: PUSH
24708: DOUBLE
24709: LD_INT 1
24711: DEC
24712: ST_TO_ADDR
24713: LD_VAR 0 12
24717: PUSH
24718: FOR_TO
24719: IFFALSE 25049
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
24721: LD_VAR 0 12
24725: PUSH
24726: LD_VAR 0 7
24730: ARRAY
24731: PUSH
24732: LD_INT 1
24734: ARRAY
24735: PPUSH
24736: LD_VAR 0 12
24740: PUSH
24741: LD_VAR 0 7
24745: ARRAY
24746: PUSH
24747: LD_INT 2
24749: ARRAY
24750: PPUSH
24751: CALL_OW 488
24755: NOT
24756: PUSH
24757: LD_VAR 0 12
24761: PUSH
24762: LD_VAR 0 7
24766: ARRAY
24767: PUSH
24768: LD_INT 1
24770: ARRAY
24771: PPUSH
24772: LD_VAR 0 12
24776: PUSH
24777: LD_VAR 0 7
24781: ARRAY
24782: PUSH
24783: LD_INT 2
24785: ARRAY
24786: PPUSH
24787: CALL_OW 428
24791: PUSH
24792: LD_INT 0
24794: GREATER
24795: OR
24796: PUSH
24797: LD_VAR 0 12
24801: PUSH
24802: LD_VAR 0 7
24806: ARRAY
24807: PUSH
24808: LD_INT 1
24810: ARRAY
24811: PPUSH
24812: LD_VAR 0 12
24816: PUSH
24817: LD_VAR 0 7
24821: ARRAY
24822: PUSH
24823: LD_INT 2
24825: ARRAY
24826: PPUSH
24827: CALL_OW 351
24831: OR
24832: IFFALSE 24838
// exit ;
24834: POP
24835: POP
24836: GO 25145
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24838: LD_ADDR_VAR 0 8
24842: PUSH
24843: LD_VAR 0 12
24847: PUSH
24848: LD_VAR 0 7
24852: ARRAY
24853: PUSH
24854: LD_INT 1
24856: ARRAY
24857: PPUSH
24858: LD_VAR 0 12
24862: PUSH
24863: LD_VAR 0 7
24867: ARRAY
24868: PUSH
24869: LD_INT 2
24871: ARRAY
24872: PPUSH
24873: CALL_OW 546
24877: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
24878: LD_VAR 0 8
24882: PUSH
24883: LD_INT 1
24885: ARRAY
24886: PUSH
24887: LD_VAR 0 8
24891: PUSH
24892: LD_INT 2
24894: ARRAY
24895: PUSH
24896: LD_VAR 0 13
24900: PUSH
24901: LD_INT 2
24903: PLUS
24904: GREATER
24905: OR
24906: PUSH
24907: LD_VAR 0 8
24911: PUSH
24912: LD_INT 2
24914: ARRAY
24915: PUSH
24916: LD_VAR 0 13
24920: PUSH
24921: LD_INT 2
24923: MINUS
24924: LESS
24925: OR
24926: PUSH
24927: LD_VAR 0 8
24931: PUSH
24932: LD_INT 3
24934: ARRAY
24935: PUSH
24936: LD_INT 0
24938: PUSH
24939: LD_INT 8
24941: PUSH
24942: LD_INT 9
24944: PUSH
24945: LD_INT 10
24947: PUSH
24948: LD_INT 11
24950: PUSH
24951: LD_INT 12
24953: PUSH
24954: LD_INT 13
24956: PUSH
24957: LD_INT 16
24959: PUSH
24960: LD_INT 17
24962: PUSH
24963: LD_INT 18
24965: PUSH
24966: LD_INT 19
24968: PUSH
24969: LD_INT 20
24971: PUSH
24972: LD_INT 21
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: IN
24990: NOT
24991: OR
24992: PUSH
24993: LD_VAR 0 8
24997: PUSH
24998: LD_INT 5
25000: ARRAY
25001: NOT
25002: OR
25003: PUSH
25004: LD_VAR 0 8
25008: PUSH
25009: LD_INT 6
25011: ARRAY
25012: PUSH
25013: LD_INT 1
25015: PUSH
25016: LD_INT 2
25018: PUSH
25019: LD_INT 7
25021: PUSH
25022: LD_INT 9
25024: PUSH
25025: LD_INT 10
25027: PUSH
25028: LD_INT 11
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: IN
25039: NOT
25040: OR
25041: IFFALSE 25047
// exit ;
25043: POP
25044: POP
25045: GO 25145
// end ;
25047: GO 24718
25049: POP
25050: POP
// side := GetSide ( depot ) ;
25051: LD_ADDR_VAR 0 9
25055: PUSH
25056: LD_VAR 0 1
25060: PPUSH
25061: CALL_OW 255
25065: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
25066: LD_VAR 0 9
25070: PPUSH
25071: LD_VAR 0 3
25075: PPUSH
25076: LD_VAR 0 4
25080: PPUSH
25081: LD_INT 20
25083: PPUSH
25084: CALL 17817 0 4
25088: PUSH
25089: LD_INT 4
25091: ARRAY
25092: IFFALSE 25096
// exit ;
25094: GO 25145
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
25096: LD_VAR 0 2
25100: PUSH
25101: LD_INT 29
25103: PUSH
25104: LD_INT 30
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: IN
25111: PUSH
25112: LD_VAR 0 3
25116: PPUSH
25117: LD_VAR 0 4
25121: PPUSH
25122: LD_VAR 0 9
25126: PPUSH
25127: CALL_OW 440
25131: NOT
25132: AND
25133: IFFALSE 25137
// exit ;
25135: GO 25145
// result := true ;
25137: LD_ADDR_VAR 0 6
25141: PUSH
25142: LD_INT 1
25144: ST_TO_ADDR
// end ;
25145: LD_VAR 0 6
25149: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
25150: LD_INT 0
25152: PPUSH
25153: PPUSH
25154: PPUSH
25155: PPUSH
25156: PPUSH
25157: PPUSH
25158: PPUSH
25159: PPUSH
25160: PPUSH
25161: PPUSH
25162: PPUSH
25163: PPUSH
25164: PPUSH
25165: PPUSH
25166: PPUSH
25167: PPUSH
25168: PPUSH
25169: PPUSH
25170: PPUSH
25171: PPUSH
25172: PPUSH
25173: PPUSH
25174: PPUSH
25175: PPUSH
25176: PPUSH
25177: PPUSH
25178: PPUSH
25179: PPUSH
25180: PPUSH
25181: PPUSH
25182: PPUSH
25183: PPUSH
25184: PPUSH
25185: PPUSH
25186: PPUSH
25187: PPUSH
25188: PPUSH
25189: PPUSH
25190: PPUSH
25191: PPUSH
25192: PPUSH
25193: PPUSH
25194: PPUSH
25195: PPUSH
25196: PPUSH
25197: PPUSH
25198: PPUSH
25199: PPUSH
25200: PPUSH
25201: PPUSH
25202: PPUSH
25203: PPUSH
25204: PPUSH
25205: PPUSH
25206: PPUSH
25207: PPUSH
25208: PPUSH
25209: PPUSH
// result = [ ] ;
25210: LD_ADDR_VAR 0 7
25214: PUSH
25215: EMPTY
25216: ST_TO_ADDR
// temp_list = [ ] ;
25217: LD_ADDR_VAR 0 9
25221: PUSH
25222: EMPTY
25223: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
25224: LD_VAR 0 4
25228: PUSH
25229: LD_INT 0
25231: PUSH
25232: LD_INT 1
25234: PUSH
25235: LD_INT 2
25237: PUSH
25238: LD_INT 3
25240: PUSH
25241: LD_INT 4
25243: PUSH
25244: LD_INT 5
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: IN
25255: NOT
25256: PUSH
25257: LD_VAR 0 1
25261: PUSH
25262: LD_INT 0
25264: PUSH
25265: LD_INT 1
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: IN
25272: PUSH
25273: LD_VAR 0 5
25277: PUSH
25278: LD_INT 1
25280: PUSH
25281: LD_INT 2
25283: PUSH
25284: LD_INT 3
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: LIST
25291: IN
25292: NOT
25293: AND
25294: OR
25295: IFFALSE 25299
// exit ;
25297: GO 43684
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
25299: LD_VAR 0 1
25303: PUSH
25304: LD_INT 6
25306: PUSH
25307: LD_INT 7
25309: PUSH
25310: LD_INT 8
25312: PUSH
25313: LD_INT 13
25315: PUSH
25316: LD_INT 12
25318: PUSH
25319: LD_INT 15
25321: PUSH
25322: LD_INT 11
25324: PUSH
25325: LD_INT 14
25327: PUSH
25328: LD_INT 10
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: IN
25342: IFFALSE 25352
// btype = b_lab ;
25344: LD_ADDR_VAR 0 1
25348: PUSH
25349: LD_INT 6
25351: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
25352: LD_VAR 0 6
25356: PUSH
25357: LD_INT 0
25359: PUSH
25360: LD_INT 1
25362: PUSH
25363: LD_INT 2
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: LIST
25370: IN
25371: NOT
25372: PUSH
25373: LD_VAR 0 1
25377: PUSH
25378: LD_INT 0
25380: PUSH
25381: LD_INT 1
25383: PUSH
25384: LD_INT 2
25386: PUSH
25387: LD_INT 3
25389: PUSH
25390: LD_INT 6
25392: PUSH
25393: LD_INT 36
25395: PUSH
25396: LD_INT 4
25398: PUSH
25399: LD_INT 5
25401: PUSH
25402: LD_INT 31
25404: PUSH
25405: LD_INT 32
25407: PUSH
25408: LD_INT 33
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: IN
25424: NOT
25425: PUSH
25426: LD_VAR 0 6
25430: PUSH
25431: LD_INT 1
25433: EQUAL
25434: AND
25435: OR
25436: PUSH
25437: LD_VAR 0 1
25441: PUSH
25442: LD_INT 2
25444: PUSH
25445: LD_INT 3
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: IN
25452: NOT
25453: PUSH
25454: LD_VAR 0 6
25458: PUSH
25459: LD_INT 2
25461: EQUAL
25462: AND
25463: OR
25464: IFFALSE 25474
// mode = 0 ;
25466: LD_ADDR_VAR 0 6
25470: PUSH
25471: LD_INT 0
25473: ST_TO_ADDR
// case mode of 0 :
25474: LD_VAR 0 6
25478: PUSH
25479: LD_INT 0
25481: DOUBLE
25482: EQUAL
25483: IFTRUE 25487
25485: GO 36940
25487: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25488: LD_ADDR_VAR 0 11
25492: PUSH
25493: LD_INT 0
25495: PUSH
25496: LD_INT 0
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 0
25505: PUSH
25506: LD_INT 1
25508: NEG
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: LD_INT 1
25516: PUSH
25517: LD_INT 0
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 1
25526: PUSH
25527: LD_INT 1
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 0
25536: PUSH
25537: LD_INT 1
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: LD_INT 1
25546: NEG
25547: PUSH
25548: LD_INT 0
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 1
25557: NEG
25558: PUSH
25559: LD_INT 1
25561: NEG
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 1
25569: NEG
25570: PUSH
25571: LD_INT 2
25573: NEG
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 0
25581: PUSH
25582: LD_INT 2
25584: NEG
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: PUSH
25590: LD_INT 1
25592: PUSH
25593: LD_INT 1
25595: NEG
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: LD_INT 1
25603: PUSH
25604: LD_INT 2
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 0
25613: PUSH
25614: LD_INT 2
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: PUSH
25621: LD_INT 1
25623: NEG
25624: PUSH
25625: LD_INT 1
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: LD_INT 1
25634: PUSH
25635: LD_INT 3
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: PUSH
25642: LD_INT 0
25644: PUSH
25645: LD_INT 3
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 1
25654: NEG
25655: PUSH
25656: LD_INT 2
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25681: LD_ADDR_VAR 0 12
25685: PUSH
25686: LD_INT 0
25688: PUSH
25689: LD_INT 0
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 0
25698: PUSH
25699: LD_INT 1
25701: NEG
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 1
25709: PUSH
25710: LD_INT 0
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 1
25719: PUSH
25720: LD_INT 1
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: LD_INT 0
25729: PUSH
25730: LD_INT 1
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: LD_INT 1
25739: NEG
25740: PUSH
25741: LD_INT 0
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PUSH
25748: LD_INT 1
25750: NEG
25751: PUSH
25752: LD_INT 1
25754: NEG
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 1
25762: PUSH
25763: LD_INT 1
25765: NEG
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 2
25773: PUSH
25774: LD_INT 0
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 2
25783: PUSH
25784: LD_INT 1
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: LD_INT 1
25793: NEG
25794: PUSH
25795: LD_INT 1
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 2
25804: NEG
25805: PUSH
25806: LD_INT 0
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 2
25815: NEG
25816: PUSH
25817: LD_INT 1
25819: NEG
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: PUSH
25825: LD_INT 2
25827: NEG
25828: PUSH
25829: LD_INT 1
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: PUSH
25836: LD_INT 3
25838: NEG
25839: PUSH
25840: LD_INT 0
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 3
25849: NEG
25850: PUSH
25851: LD_INT 1
25853: NEG
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25877: LD_ADDR_VAR 0 13
25881: PUSH
25882: LD_INT 0
25884: PUSH
25885: LD_INT 0
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 0
25894: PUSH
25895: LD_INT 1
25897: NEG
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 1
25905: PUSH
25906: LD_INT 0
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 1
25915: PUSH
25916: LD_INT 1
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: LD_INT 0
25925: PUSH
25926: LD_INT 1
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PUSH
25933: LD_INT 1
25935: NEG
25936: PUSH
25937: LD_INT 0
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: LD_INT 1
25946: NEG
25947: PUSH
25948: LD_INT 1
25950: NEG
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: LD_INT 1
25958: NEG
25959: PUSH
25960: LD_INT 2
25962: NEG
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 2
25970: PUSH
25971: LD_INT 1
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 2
25980: PUSH
25981: LD_INT 2
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 1
25990: PUSH
25991: LD_INT 2
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: PUSH
25998: LD_INT 2
26000: NEG
26001: PUSH
26002: LD_INT 1
26004: NEG
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 2
26012: NEG
26013: PUSH
26014: LD_INT 2
26016: NEG
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PUSH
26022: LD_INT 2
26024: NEG
26025: PUSH
26026: LD_INT 3
26028: NEG
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PUSH
26034: LD_INT 3
26036: NEG
26037: PUSH
26038: LD_INT 2
26040: NEG
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 3
26048: NEG
26049: PUSH
26050: LD_INT 3
26052: NEG
26053: PUSH
26054: EMPTY
26055: LIST
26056: LIST
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26076: LD_ADDR_VAR 0 14
26080: PUSH
26081: LD_INT 0
26083: PUSH
26084: LD_INT 0
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: LD_INT 0
26093: PUSH
26094: LD_INT 1
26096: NEG
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: LD_INT 1
26104: PUSH
26105: LD_INT 0
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: PUSH
26112: LD_INT 1
26114: PUSH
26115: LD_INT 1
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: PUSH
26122: LD_INT 0
26124: PUSH
26125: LD_INT 1
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PUSH
26132: LD_INT 1
26134: NEG
26135: PUSH
26136: LD_INT 0
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 1
26145: NEG
26146: PUSH
26147: LD_INT 1
26149: NEG
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 1
26157: NEG
26158: PUSH
26159: LD_INT 2
26161: NEG
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: LD_INT 0
26169: PUSH
26170: LD_INT 2
26172: NEG
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: PUSH
26178: LD_INT 1
26180: PUSH
26181: LD_INT 1
26183: NEG
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 1
26191: PUSH
26192: LD_INT 2
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: LD_INT 0
26201: PUSH
26202: LD_INT 2
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PUSH
26209: LD_INT 1
26211: NEG
26212: PUSH
26213: LD_INT 1
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: LD_INT 1
26222: NEG
26223: PUSH
26224: LD_INT 3
26226: NEG
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 0
26234: PUSH
26235: LD_INT 3
26237: NEG
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 1
26245: PUSH
26246: LD_INT 2
26248: NEG
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26272: LD_ADDR_VAR 0 15
26276: PUSH
26277: LD_INT 0
26279: PUSH
26280: LD_INT 0
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: LD_INT 0
26289: PUSH
26290: LD_INT 1
26292: NEG
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: LD_INT 1
26300: PUSH
26301: LD_INT 0
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PUSH
26308: LD_INT 1
26310: PUSH
26311: LD_INT 1
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: PUSH
26318: LD_INT 0
26320: PUSH
26321: LD_INT 1
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: PUSH
26328: LD_INT 1
26330: NEG
26331: PUSH
26332: LD_INT 0
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 1
26341: NEG
26342: PUSH
26343: LD_INT 1
26345: NEG
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 1
26353: PUSH
26354: LD_INT 1
26356: NEG
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 2
26364: PUSH
26365: LD_INT 0
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: LD_INT 2
26374: PUSH
26375: LD_INT 1
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 1
26384: NEG
26385: PUSH
26386: LD_INT 1
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 2
26395: NEG
26396: PUSH
26397: LD_INT 0
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 2
26406: NEG
26407: PUSH
26408: LD_INT 1
26410: NEG
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 2
26418: PUSH
26419: LD_INT 1
26421: NEG
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 3
26429: PUSH
26430: LD_INT 0
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 3
26439: PUSH
26440: LD_INT 1
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26465: LD_ADDR_VAR 0 16
26469: PUSH
26470: LD_INT 0
26472: PUSH
26473: LD_INT 0
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 0
26482: PUSH
26483: LD_INT 1
26485: NEG
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: PUSH
26491: LD_INT 1
26493: PUSH
26494: LD_INT 0
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 1
26503: PUSH
26504: LD_INT 1
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PUSH
26511: LD_INT 0
26513: PUSH
26514: LD_INT 1
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 1
26523: NEG
26524: PUSH
26525: LD_INT 0
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 1
26534: NEG
26535: PUSH
26536: LD_INT 1
26538: NEG
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: LD_INT 1
26546: NEG
26547: PUSH
26548: LD_INT 2
26550: NEG
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: LD_INT 2
26558: PUSH
26559: LD_INT 1
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 2
26568: PUSH
26569: LD_INT 2
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: LD_INT 1
26578: PUSH
26579: LD_INT 2
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: PUSH
26586: LD_INT 2
26588: NEG
26589: PUSH
26590: LD_INT 1
26592: NEG
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 2
26600: NEG
26601: PUSH
26602: LD_INT 2
26604: NEG
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 3
26612: PUSH
26613: LD_INT 2
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 3
26622: PUSH
26623: LD_INT 3
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: LD_INT 2
26632: PUSH
26633: LD_INT 3
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26658: LD_ADDR_VAR 0 17
26662: PUSH
26663: LD_INT 0
26665: PUSH
26666: LD_INT 0
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 0
26675: PUSH
26676: LD_INT 1
26678: NEG
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: LD_INT 1
26686: PUSH
26687: LD_INT 0
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: LD_INT 1
26696: PUSH
26697: LD_INT 1
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 0
26706: PUSH
26707: LD_INT 1
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PUSH
26714: LD_INT 1
26716: NEG
26717: PUSH
26718: LD_INT 0
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: PUSH
26725: LD_INT 1
26727: NEG
26728: PUSH
26729: LD_INT 1
26731: NEG
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 1
26739: NEG
26740: PUSH
26741: LD_INT 2
26743: NEG
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: LD_INT 0
26751: PUSH
26752: LD_INT 2
26754: NEG
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 1
26762: PUSH
26763: LD_INT 1
26765: NEG
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 2
26773: PUSH
26774: LD_INT 0
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 2
26783: PUSH
26784: LD_INT 1
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: LD_INT 2
26793: PUSH
26794: LD_INT 2
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 1
26803: PUSH
26804: LD_INT 2
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 0
26813: PUSH
26814: LD_INT 2
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: LD_INT 1
26823: NEG
26824: PUSH
26825: LD_INT 1
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: PUSH
26832: LD_INT 2
26834: NEG
26835: PUSH
26836: LD_INT 0
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: LD_INT 2
26845: NEG
26846: PUSH
26847: LD_INT 1
26849: NEG
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 2
26857: NEG
26858: PUSH
26859: LD_INT 2
26861: NEG
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26888: LD_ADDR_VAR 0 18
26892: PUSH
26893: LD_INT 0
26895: PUSH
26896: LD_INT 0
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 0
26905: PUSH
26906: LD_INT 1
26908: NEG
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: LD_INT 1
26916: PUSH
26917: LD_INT 0
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: PUSH
26924: LD_INT 1
26926: PUSH
26927: LD_INT 1
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PUSH
26934: LD_INT 0
26936: PUSH
26937: LD_INT 1
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: PUSH
26944: LD_INT 1
26946: NEG
26947: PUSH
26948: LD_INT 0
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: LD_INT 1
26957: NEG
26958: PUSH
26959: LD_INT 1
26961: NEG
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 1
26969: NEG
26970: PUSH
26971: LD_INT 2
26973: NEG
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 0
26981: PUSH
26982: LD_INT 2
26984: NEG
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: PUSH
26990: LD_INT 1
26992: PUSH
26993: LD_INT 1
26995: NEG
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 2
27003: PUSH
27004: LD_INT 0
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 2
27013: PUSH
27014: LD_INT 1
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 2
27023: PUSH
27024: LD_INT 2
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 1
27033: PUSH
27034: LD_INT 2
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: LD_INT 0
27043: PUSH
27044: LD_INT 2
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 1
27053: NEG
27054: PUSH
27055: LD_INT 1
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: LD_INT 2
27064: NEG
27065: PUSH
27066: LD_INT 0
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PUSH
27073: LD_INT 2
27075: NEG
27076: PUSH
27077: LD_INT 1
27079: NEG
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 2
27087: NEG
27088: PUSH
27089: LD_INT 2
27091: NEG
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27118: LD_ADDR_VAR 0 19
27122: PUSH
27123: LD_INT 0
27125: PUSH
27126: LD_INT 0
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 0
27135: PUSH
27136: LD_INT 1
27138: NEG
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: LD_INT 1
27146: PUSH
27147: LD_INT 0
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: LD_INT 1
27156: PUSH
27157: LD_INT 1
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: LD_INT 0
27166: PUSH
27167: LD_INT 1
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: LD_INT 1
27176: NEG
27177: PUSH
27178: LD_INT 0
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 1
27187: NEG
27188: PUSH
27189: LD_INT 1
27191: NEG
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 1
27199: NEG
27200: PUSH
27201: LD_INT 2
27203: NEG
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 0
27211: PUSH
27212: LD_INT 2
27214: NEG
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: PUSH
27220: LD_INT 1
27222: PUSH
27223: LD_INT 1
27225: NEG
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 2
27233: PUSH
27234: LD_INT 0
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: LD_INT 2
27243: PUSH
27244: LD_INT 1
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: LD_INT 2
27253: PUSH
27254: LD_INT 2
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: LD_INT 1
27263: PUSH
27264: LD_INT 2
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PUSH
27271: LD_INT 0
27273: PUSH
27274: LD_INT 2
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: LD_INT 1
27283: NEG
27284: PUSH
27285: LD_INT 1
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: LD_INT 2
27294: NEG
27295: PUSH
27296: LD_INT 0
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: LD_INT 2
27305: NEG
27306: PUSH
27307: LD_INT 1
27309: NEG
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 2
27317: NEG
27318: PUSH
27319: LD_INT 2
27321: NEG
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27348: LD_ADDR_VAR 0 20
27352: PUSH
27353: LD_INT 0
27355: PUSH
27356: LD_INT 0
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: LD_INT 0
27365: PUSH
27366: LD_INT 1
27368: NEG
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: LD_INT 1
27376: PUSH
27377: LD_INT 0
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 1
27386: PUSH
27387: LD_INT 1
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: PUSH
27394: LD_INT 0
27396: PUSH
27397: LD_INT 1
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: PUSH
27404: LD_INT 1
27406: NEG
27407: PUSH
27408: LD_INT 0
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: PUSH
27415: LD_INT 1
27417: NEG
27418: PUSH
27419: LD_INT 1
27421: NEG
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: PUSH
27427: LD_INT 1
27429: NEG
27430: PUSH
27431: LD_INT 2
27433: NEG
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: LD_INT 0
27441: PUSH
27442: LD_INT 2
27444: NEG
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: LD_INT 1
27452: PUSH
27453: LD_INT 1
27455: NEG
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: LD_INT 2
27463: PUSH
27464: LD_INT 0
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 2
27473: PUSH
27474: LD_INT 1
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: LD_INT 2
27483: PUSH
27484: LD_INT 2
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: PUSH
27491: LD_INT 1
27493: PUSH
27494: LD_INT 2
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: PUSH
27501: LD_INT 0
27503: PUSH
27504: LD_INT 2
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 1
27513: NEG
27514: PUSH
27515: LD_INT 1
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: PUSH
27522: LD_INT 2
27524: NEG
27525: PUSH
27526: LD_INT 0
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: PUSH
27533: LD_INT 2
27535: NEG
27536: PUSH
27537: LD_INT 1
27539: NEG
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 2
27547: NEG
27548: PUSH
27549: LD_INT 2
27551: NEG
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27578: LD_ADDR_VAR 0 21
27582: PUSH
27583: LD_INT 0
27585: PUSH
27586: LD_INT 0
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 0
27595: PUSH
27596: LD_INT 1
27598: NEG
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PUSH
27604: LD_INT 1
27606: PUSH
27607: LD_INT 0
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PUSH
27614: LD_INT 1
27616: PUSH
27617: LD_INT 1
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: PUSH
27624: LD_INT 0
27626: PUSH
27627: LD_INT 1
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PUSH
27634: LD_INT 1
27636: NEG
27637: PUSH
27638: LD_INT 0
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: LD_INT 1
27647: NEG
27648: PUSH
27649: LD_INT 1
27651: NEG
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: PUSH
27657: LD_INT 1
27659: NEG
27660: PUSH
27661: LD_INT 2
27663: NEG
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PUSH
27669: LD_INT 0
27671: PUSH
27672: LD_INT 2
27674: NEG
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PUSH
27680: LD_INT 1
27682: PUSH
27683: LD_INT 1
27685: NEG
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 2
27693: PUSH
27694: LD_INT 0
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 2
27703: PUSH
27704: LD_INT 1
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: LD_INT 2
27713: PUSH
27714: LD_INT 2
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: LD_INT 1
27723: PUSH
27724: LD_INT 2
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: LD_INT 0
27733: PUSH
27734: LD_INT 2
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: PUSH
27741: LD_INT 1
27743: NEG
27744: PUSH
27745: LD_INT 1
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PUSH
27752: LD_INT 2
27754: NEG
27755: PUSH
27756: LD_INT 0
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: LD_INT 2
27765: NEG
27766: PUSH
27767: LD_INT 1
27769: NEG
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 2
27777: NEG
27778: PUSH
27779: LD_INT 2
27781: NEG
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27808: LD_ADDR_VAR 0 22
27812: PUSH
27813: LD_INT 0
27815: PUSH
27816: LD_INT 0
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PUSH
27823: LD_INT 0
27825: PUSH
27826: LD_INT 1
27828: NEG
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: LD_INT 1
27836: PUSH
27837: LD_INT 0
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 1
27846: PUSH
27847: LD_INT 1
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 0
27856: PUSH
27857: LD_INT 1
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 1
27866: NEG
27867: PUSH
27868: LD_INT 0
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: LD_INT 1
27877: NEG
27878: PUSH
27879: LD_INT 1
27881: NEG
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: PUSH
27887: LD_INT 1
27889: NEG
27890: PUSH
27891: LD_INT 2
27893: NEG
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: LD_INT 0
27901: PUSH
27902: LD_INT 2
27904: NEG
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: LD_INT 1
27912: PUSH
27913: LD_INT 1
27915: NEG
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 2
27923: PUSH
27924: LD_INT 0
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 2
27933: PUSH
27934: LD_INT 1
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 2
27943: PUSH
27944: LD_INT 2
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: PUSH
27951: LD_INT 1
27953: PUSH
27954: LD_INT 2
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: LD_INT 0
27963: PUSH
27964: LD_INT 2
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: LD_INT 1
27973: NEG
27974: PUSH
27975: LD_INT 1
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: PUSH
27982: LD_INT 2
27984: NEG
27985: PUSH
27986: LD_INT 0
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 2
27995: NEG
27996: PUSH
27997: LD_INT 1
27999: NEG
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 2
28007: NEG
28008: PUSH
28009: LD_INT 2
28011: NEG
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28038: LD_ADDR_VAR 0 23
28042: PUSH
28043: LD_INT 0
28045: PUSH
28046: LD_INT 0
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_INT 0
28055: PUSH
28056: LD_INT 1
28058: NEG
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PUSH
28064: LD_INT 1
28066: PUSH
28067: LD_INT 0
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 1
28076: PUSH
28077: LD_INT 1
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: LD_INT 0
28086: PUSH
28087: LD_INT 1
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: LD_INT 1
28096: NEG
28097: PUSH
28098: LD_INT 0
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: PUSH
28105: LD_INT 1
28107: NEG
28108: PUSH
28109: LD_INT 1
28111: NEG
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: LD_INT 1
28119: NEG
28120: PUSH
28121: LD_INT 2
28123: NEG
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 0
28131: PUSH
28132: LD_INT 2
28134: NEG
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PUSH
28140: LD_INT 1
28142: PUSH
28143: LD_INT 1
28145: NEG
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: LD_INT 2
28153: PUSH
28154: LD_INT 0
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 2
28163: PUSH
28164: LD_INT 1
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: LD_INT 2
28173: PUSH
28174: LD_INT 2
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: LD_INT 1
28183: PUSH
28184: LD_INT 2
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PUSH
28191: LD_INT 0
28193: PUSH
28194: LD_INT 2
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: LD_INT 1
28203: NEG
28204: PUSH
28205: LD_INT 1
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: PUSH
28212: LD_INT 2
28214: NEG
28215: PUSH
28216: LD_INT 0
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: LD_INT 2
28225: NEG
28226: PUSH
28227: LD_INT 1
28229: NEG
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 2
28237: NEG
28238: PUSH
28239: LD_INT 2
28241: NEG
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 2
28249: NEG
28250: PUSH
28251: LD_INT 3
28253: NEG
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 1
28261: NEG
28262: PUSH
28263: LD_INT 3
28265: NEG
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 1
28273: PUSH
28274: LD_INT 2
28276: NEG
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: PUSH
28282: LD_INT 2
28284: PUSH
28285: LD_INT 1
28287: NEG
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: LIST
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
28318: LD_ADDR_VAR 0 24
28322: PUSH
28323: LD_INT 0
28325: PUSH
28326: LD_INT 0
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 0
28335: PUSH
28336: LD_INT 1
28338: NEG
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 1
28346: PUSH
28347: LD_INT 0
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: LD_INT 1
28356: PUSH
28357: LD_INT 1
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 0
28366: PUSH
28367: LD_INT 1
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: LD_INT 1
28376: NEG
28377: PUSH
28378: LD_INT 0
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 1
28387: NEG
28388: PUSH
28389: LD_INT 1
28391: NEG
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 1
28399: NEG
28400: PUSH
28401: LD_INT 2
28403: NEG
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: LD_INT 0
28411: PUSH
28412: LD_INT 2
28414: NEG
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 1
28422: PUSH
28423: LD_INT 1
28425: NEG
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 2
28433: PUSH
28434: LD_INT 0
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 2
28443: PUSH
28444: LD_INT 1
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 2
28453: PUSH
28454: LD_INT 2
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 1
28463: PUSH
28464: LD_INT 2
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 0
28473: PUSH
28474: LD_INT 2
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 1
28483: NEG
28484: PUSH
28485: LD_INT 1
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 2
28494: NEG
28495: PUSH
28496: LD_INT 0
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 2
28505: NEG
28506: PUSH
28507: LD_INT 1
28509: NEG
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 2
28517: NEG
28518: PUSH
28519: LD_INT 2
28521: NEG
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: LD_INT 1
28529: PUSH
28530: LD_INT 2
28532: NEG
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 2
28540: PUSH
28541: LD_INT 1
28543: NEG
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 3
28551: PUSH
28552: LD_INT 1
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: PUSH
28559: LD_INT 3
28561: PUSH
28562: LD_INT 2
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
28594: LD_ADDR_VAR 0 25
28598: PUSH
28599: LD_INT 0
28601: PUSH
28602: LD_INT 0
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 0
28611: PUSH
28612: LD_INT 1
28614: NEG
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: PUSH
28620: LD_INT 1
28622: PUSH
28623: LD_INT 0
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PUSH
28630: LD_INT 1
28632: PUSH
28633: LD_INT 1
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 0
28642: PUSH
28643: LD_INT 1
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 1
28652: NEG
28653: PUSH
28654: LD_INT 0
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: LD_INT 1
28663: NEG
28664: PUSH
28665: LD_INT 1
28667: NEG
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: LD_INT 1
28675: NEG
28676: PUSH
28677: LD_INT 2
28679: NEG
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 0
28687: PUSH
28688: LD_INT 2
28690: NEG
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 1
28698: PUSH
28699: LD_INT 1
28701: NEG
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_INT 2
28709: PUSH
28710: LD_INT 0
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: LD_INT 2
28719: PUSH
28720: LD_INT 1
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 2
28729: PUSH
28730: LD_INT 2
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 1
28739: PUSH
28740: LD_INT 2
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 0
28749: PUSH
28750: LD_INT 2
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 1
28759: NEG
28760: PUSH
28761: LD_INT 1
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: LD_INT 2
28770: NEG
28771: PUSH
28772: LD_INT 0
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: LD_INT 2
28781: NEG
28782: PUSH
28783: LD_INT 1
28785: NEG
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 2
28793: NEG
28794: PUSH
28795: LD_INT 2
28797: NEG
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 3
28805: PUSH
28806: LD_INT 1
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 3
28815: PUSH
28816: LD_INT 2
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 2
28825: PUSH
28826: LD_INT 3
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: LD_INT 1
28835: PUSH
28836: LD_INT 3
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28868: LD_ADDR_VAR 0 26
28872: PUSH
28873: LD_INT 0
28875: PUSH
28876: LD_INT 0
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PUSH
28883: LD_INT 0
28885: PUSH
28886: LD_INT 1
28888: NEG
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: LD_INT 1
28896: PUSH
28897: LD_INT 0
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: PUSH
28904: LD_INT 1
28906: PUSH
28907: LD_INT 1
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: PUSH
28914: LD_INT 0
28916: PUSH
28917: LD_INT 1
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 1
28926: NEG
28927: PUSH
28928: LD_INT 0
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: LD_INT 1
28937: NEG
28938: PUSH
28939: LD_INT 1
28941: NEG
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 1
28949: NEG
28950: PUSH
28951: LD_INT 2
28953: NEG
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 0
28961: PUSH
28962: LD_INT 2
28964: NEG
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 1
28972: PUSH
28973: LD_INT 1
28975: NEG
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 2
28983: PUSH
28984: LD_INT 0
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 2
28993: PUSH
28994: LD_INT 1
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: LD_INT 2
29003: PUSH
29004: LD_INT 2
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 1
29013: PUSH
29014: LD_INT 2
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: LD_INT 0
29023: PUSH
29024: LD_INT 2
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: LD_INT 1
29033: NEG
29034: PUSH
29035: LD_INT 1
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: LD_INT 2
29044: NEG
29045: PUSH
29046: LD_INT 0
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: LD_INT 2
29055: NEG
29056: PUSH
29057: LD_INT 1
29059: NEG
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: LD_INT 2
29067: NEG
29068: PUSH
29069: LD_INT 2
29071: NEG
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 2
29079: PUSH
29080: LD_INT 3
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 1
29089: PUSH
29090: LD_INT 3
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: LD_INT 1
29099: NEG
29100: PUSH
29101: LD_INT 2
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 2
29110: NEG
29111: PUSH
29112: LD_INT 1
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29144: LD_ADDR_VAR 0 27
29148: PUSH
29149: LD_INT 0
29151: PUSH
29152: LD_INT 0
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 0
29161: PUSH
29162: LD_INT 1
29164: NEG
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: LD_INT 1
29172: PUSH
29173: LD_INT 0
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 1
29182: PUSH
29183: LD_INT 1
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: LD_INT 0
29192: PUSH
29193: LD_INT 1
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: LD_INT 1
29202: NEG
29203: PUSH
29204: LD_INT 0
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 1
29213: NEG
29214: PUSH
29215: LD_INT 1
29217: NEG
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: LD_INT 1
29225: NEG
29226: PUSH
29227: LD_INT 2
29229: NEG
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: LD_INT 0
29237: PUSH
29238: LD_INT 2
29240: NEG
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 1
29248: PUSH
29249: LD_INT 1
29251: NEG
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: LD_INT 2
29259: PUSH
29260: LD_INT 0
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 2
29269: PUSH
29270: LD_INT 1
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 2
29279: PUSH
29280: LD_INT 2
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 1
29289: PUSH
29290: LD_INT 2
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PUSH
29297: LD_INT 0
29299: PUSH
29300: LD_INT 2
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: LD_INT 1
29309: NEG
29310: PUSH
29311: LD_INT 1
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 2
29320: NEG
29321: PUSH
29322: LD_INT 0
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 2
29331: NEG
29332: PUSH
29333: LD_INT 1
29335: NEG
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 2
29343: NEG
29344: PUSH
29345: LD_INT 2
29347: NEG
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 1
29355: NEG
29356: PUSH
29357: LD_INT 2
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: LD_INT 2
29366: NEG
29367: PUSH
29368: LD_INT 1
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: LD_INT 3
29377: NEG
29378: PUSH
29379: LD_INT 1
29381: NEG
29382: PUSH
29383: EMPTY
29384: LIST
29385: LIST
29386: PUSH
29387: LD_INT 3
29389: NEG
29390: PUSH
29391: LD_INT 2
29393: NEG
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: LIST
29423: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29424: LD_ADDR_VAR 0 28
29428: PUSH
29429: LD_INT 0
29431: PUSH
29432: LD_INT 0
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: LD_INT 0
29441: PUSH
29442: LD_INT 1
29444: NEG
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 1
29452: PUSH
29453: LD_INT 0
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 1
29462: PUSH
29463: LD_INT 1
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 0
29472: PUSH
29473: LD_INT 1
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: LD_INT 1
29482: NEG
29483: PUSH
29484: LD_INT 0
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 1
29493: NEG
29494: PUSH
29495: LD_INT 1
29497: NEG
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 1
29505: NEG
29506: PUSH
29507: LD_INT 2
29509: NEG
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: LD_INT 0
29517: PUSH
29518: LD_INT 2
29520: NEG
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: LD_INT 1
29528: PUSH
29529: LD_INT 1
29531: NEG
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 2
29539: PUSH
29540: LD_INT 0
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 2
29549: PUSH
29550: LD_INT 1
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 2
29559: PUSH
29560: LD_INT 2
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: LD_INT 1
29569: PUSH
29570: LD_INT 2
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: LD_INT 0
29579: PUSH
29580: LD_INT 2
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 1
29589: NEG
29590: PUSH
29591: LD_INT 1
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: LD_INT 2
29600: NEG
29601: PUSH
29602: LD_INT 0
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 2
29611: NEG
29612: PUSH
29613: LD_INT 1
29615: NEG
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 2
29623: NEG
29624: PUSH
29625: LD_INT 2
29627: NEG
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 2
29635: NEG
29636: PUSH
29637: LD_INT 3
29639: NEG
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 1
29647: NEG
29648: PUSH
29649: LD_INT 3
29651: NEG
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 3
29659: NEG
29660: PUSH
29661: LD_INT 1
29663: NEG
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: LD_INT 3
29671: NEG
29672: PUSH
29673: LD_INT 2
29675: NEG
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: LIST
29697: LIST
29698: LIST
29699: LIST
29700: LIST
29701: LIST
29702: LIST
29703: LIST
29704: LIST
29705: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29706: LD_ADDR_VAR 0 29
29710: PUSH
29711: LD_INT 0
29713: PUSH
29714: LD_INT 0
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 0
29723: PUSH
29724: LD_INT 1
29726: NEG
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: LD_INT 1
29734: PUSH
29735: LD_INT 0
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PUSH
29742: LD_INT 1
29744: PUSH
29745: LD_INT 1
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 0
29754: PUSH
29755: LD_INT 1
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PUSH
29762: LD_INT 1
29764: NEG
29765: PUSH
29766: LD_INT 0
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 1
29775: NEG
29776: PUSH
29777: LD_INT 1
29779: NEG
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 1
29787: NEG
29788: PUSH
29789: LD_INT 2
29791: NEG
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 0
29799: PUSH
29800: LD_INT 2
29802: NEG
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 1
29810: PUSH
29811: LD_INT 1
29813: NEG
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 2
29821: PUSH
29822: LD_INT 0
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 2
29831: PUSH
29832: LD_INT 1
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 1
29841: PUSH
29842: LD_INT 2
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: PUSH
29849: LD_INT 0
29851: PUSH
29852: LD_INT 2
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: PUSH
29859: LD_INT 1
29861: NEG
29862: PUSH
29863: LD_INT 1
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: LD_INT 2
29872: NEG
29873: PUSH
29874: LD_INT 1
29876: NEG
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: LD_INT 2
29884: NEG
29885: PUSH
29886: LD_INT 2
29888: NEG
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 2
29896: NEG
29897: PUSH
29898: LD_INT 3
29900: NEG
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 2
29908: PUSH
29909: LD_INT 1
29911: NEG
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: LD_INT 3
29919: PUSH
29920: LD_INT 1
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 1
29929: PUSH
29930: LD_INT 3
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 1
29939: NEG
29940: PUSH
29941: LD_INT 2
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 3
29950: NEG
29951: PUSH
29952: LD_INT 2
29954: NEG
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29985: LD_ADDR_VAR 0 30
29989: PUSH
29990: LD_INT 0
29992: PUSH
29993: LD_INT 0
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: PUSH
30000: LD_INT 0
30002: PUSH
30003: LD_INT 1
30005: NEG
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: PUSH
30011: LD_INT 1
30013: PUSH
30014: LD_INT 0
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: LD_INT 1
30023: PUSH
30024: LD_INT 1
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PUSH
30031: LD_INT 0
30033: PUSH
30034: LD_INT 1
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: LD_INT 1
30043: NEG
30044: PUSH
30045: LD_INT 0
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: LD_INT 1
30054: NEG
30055: PUSH
30056: LD_INT 1
30058: NEG
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 1
30066: NEG
30067: PUSH
30068: LD_INT 2
30070: NEG
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 0
30078: PUSH
30079: LD_INT 2
30081: NEG
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 1
30089: PUSH
30090: LD_INT 1
30092: NEG
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: LD_INT 2
30100: PUSH
30101: LD_INT 0
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 2
30110: PUSH
30111: LD_INT 1
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 2
30120: PUSH
30121: LD_INT 2
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: LD_INT 1
30130: PUSH
30131: LD_INT 2
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: LD_INT 1
30140: NEG
30141: PUSH
30142: LD_INT 1
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PUSH
30149: LD_INT 2
30151: NEG
30152: PUSH
30153: LD_INT 0
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 2
30162: NEG
30163: PUSH
30164: LD_INT 1
30166: NEG
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 1
30174: NEG
30175: PUSH
30176: LD_INT 3
30178: NEG
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 1
30186: PUSH
30187: LD_INT 2
30189: NEG
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: LD_INT 3
30197: PUSH
30198: LD_INT 2
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: LD_INT 2
30207: PUSH
30208: LD_INT 3
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: LD_INT 2
30217: NEG
30218: PUSH
30219: LD_INT 1
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: LD_INT 3
30228: NEG
30229: PUSH
30230: LD_INT 1
30232: NEG
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30263: LD_ADDR_VAR 0 31
30267: PUSH
30268: LD_INT 0
30270: PUSH
30271: LD_INT 0
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 0
30280: PUSH
30281: LD_INT 1
30283: NEG
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 1
30291: PUSH
30292: LD_INT 0
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 1
30301: PUSH
30302: LD_INT 1
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 0
30311: PUSH
30312: LD_INT 1
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 1
30321: NEG
30322: PUSH
30323: LD_INT 0
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 1
30332: NEG
30333: PUSH
30334: LD_INT 1
30336: NEG
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: LD_INT 1
30344: NEG
30345: PUSH
30346: LD_INT 2
30348: NEG
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 1
30356: PUSH
30357: LD_INT 1
30359: NEG
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 2
30367: PUSH
30368: LD_INT 0
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 2
30377: PUSH
30378: LD_INT 1
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 2
30387: PUSH
30388: LD_INT 2
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 1
30397: PUSH
30398: LD_INT 2
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 0
30407: PUSH
30408: LD_INT 2
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 1
30417: NEG
30418: PUSH
30419: LD_INT 1
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: LD_INT 2
30428: NEG
30429: PUSH
30430: LD_INT 1
30432: NEG
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: LD_INT 2
30440: NEG
30441: PUSH
30442: LD_INT 2
30444: NEG
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: LD_INT 2
30452: NEG
30453: PUSH
30454: LD_INT 3
30456: NEG
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 2
30464: PUSH
30465: LD_INT 1
30467: NEG
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 3
30475: PUSH
30476: LD_INT 1
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: LD_INT 1
30485: PUSH
30486: LD_INT 3
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 1
30495: NEG
30496: PUSH
30497: LD_INT 2
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 3
30506: NEG
30507: PUSH
30508: LD_INT 2
30510: NEG
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30541: LD_ADDR_VAR 0 32
30545: PUSH
30546: LD_INT 0
30548: PUSH
30549: LD_INT 0
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 0
30558: PUSH
30559: LD_INT 1
30561: NEG
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 1
30569: PUSH
30570: LD_INT 0
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 1
30579: PUSH
30580: LD_INT 1
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 0
30589: PUSH
30590: LD_INT 1
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 1
30599: NEG
30600: PUSH
30601: LD_INT 0
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: LD_INT 1
30610: NEG
30611: PUSH
30612: LD_INT 1
30614: NEG
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 1
30622: NEG
30623: PUSH
30624: LD_INT 2
30626: NEG
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 0
30634: PUSH
30635: LD_INT 2
30637: NEG
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: LD_INT 1
30645: PUSH
30646: LD_INT 1
30648: NEG
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 2
30656: PUSH
30657: LD_INT 1
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 2
30666: PUSH
30667: LD_INT 2
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 1
30676: PUSH
30677: LD_INT 2
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: PUSH
30684: LD_INT 0
30686: PUSH
30687: LD_INT 2
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 1
30696: NEG
30697: PUSH
30698: LD_INT 1
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: LD_INT 2
30707: NEG
30708: PUSH
30709: LD_INT 0
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: PUSH
30716: LD_INT 2
30718: NEG
30719: PUSH
30720: LD_INT 1
30722: NEG
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 1
30730: NEG
30731: PUSH
30732: LD_INT 3
30734: NEG
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: LD_INT 1
30742: PUSH
30743: LD_INT 2
30745: NEG
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: LD_INT 3
30753: PUSH
30754: LD_INT 2
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 2
30763: PUSH
30764: LD_INT 3
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 2
30773: NEG
30774: PUSH
30775: LD_INT 1
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 3
30784: NEG
30785: PUSH
30786: LD_INT 1
30788: NEG
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30819: LD_ADDR_VAR 0 33
30823: PUSH
30824: LD_INT 0
30826: PUSH
30827: LD_INT 0
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: LD_INT 0
30836: PUSH
30837: LD_INT 1
30839: NEG
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 1
30847: PUSH
30848: LD_INT 0
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 1
30857: PUSH
30858: LD_INT 1
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 0
30867: PUSH
30868: LD_INT 1
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: LD_INT 1
30877: NEG
30878: PUSH
30879: LD_INT 0
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PUSH
30886: LD_INT 1
30888: NEG
30889: PUSH
30890: LD_INT 1
30892: NEG
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 1
30900: NEG
30901: PUSH
30902: LD_INT 2
30904: NEG
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 1
30912: PUSH
30913: LD_INT 1
30915: NEG
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 2
30923: PUSH
30924: LD_INT 0
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 2
30933: PUSH
30934: LD_INT 1
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: LD_INT 1
30943: PUSH
30944: LD_INT 2
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 0
30953: PUSH
30954: LD_INT 2
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: LD_INT 1
30963: NEG
30964: PUSH
30965: LD_INT 1
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 2
30974: NEG
30975: PUSH
30976: LD_INT 0
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 2
30985: NEG
30986: PUSH
30987: LD_INT 1
30989: NEG
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 2
30997: NEG
30998: PUSH
30999: LD_INT 2
31001: NEG
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 2
31009: NEG
31010: PUSH
31011: LD_INT 3
31013: NEG
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 2
31021: PUSH
31022: LD_INT 1
31024: NEG
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 3
31032: PUSH
31033: LD_INT 1
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 1
31042: PUSH
31043: LD_INT 3
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 1
31052: NEG
31053: PUSH
31054: LD_INT 2
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 3
31063: NEG
31064: PUSH
31065: LD_INT 2
31067: NEG
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31098: LD_ADDR_VAR 0 34
31102: PUSH
31103: LD_INT 0
31105: PUSH
31106: LD_INT 0
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 0
31115: PUSH
31116: LD_INT 1
31118: NEG
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 1
31126: PUSH
31127: LD_INT 0
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 1
31136: PUSH
31137: LD_INT 1
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 0
31146: PUSH
31147: LD_INT 1
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 1
31156: NEG
31157: PUSH
31158: LD_INT 0
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 1
31167: NEG
31168: PUSH
31169: LD_INT 1
31171: NEG
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: LD_INT 1
31179: NEG
31180: PUSH
31181: LD_INT 2
31183: NEG
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PUSH
31189: LD_INT 0
31191: PUSH
31192: LD_INT 2
31194: NEG
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 1
31202: PUSH
31203: LD_INT 1
31205: NEG
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 2
31213: PUSH
31214: LD_INT 1
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 2
31223: PUSH
31224: LD_INT 2
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 1
31233: PUSH
31234: LD_INT 2
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 1
31243: NEG
31244: PUSH
31245: LD_INT 1
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: LD_INT 2
31254: NEG
31255: PUSH
31256: LD_INT 0
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 2
31265: NEG
31266: PUSH
31267: LD_INT 1
31269: NEG
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: LD_INT 2
31277: NEG
31278: PUSH
31279: LD_INT 2
31281: NEG
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PUSH
31287: LD_INT 1
31289: NEG
31290: PUSH
31291: LD_INT 3
31293: NEG
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 1
31301: PUSH
31302: LD_INT 2
31304: NEG
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 3
31312: PUSH
31313: LD_INT 2
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 2
31322: PUSH
31323: LD_INT 3
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: LD_INT 2
31332: NEG
31333: PUSH
31334: LD_INT 1
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: LD_INT 3
31343: NEG
31344: PUSH
31345: LD_INT 1
31347: NEG
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31378: LD_ADDR_VAR 0 35
31382: PUSH
31383: LD_INT 0
31385: PUSH
31386: LD_INT 0
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: LD_INT 0
31395: PUSH
31396: LD_INT 1
31398: NEG
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PUSH
31404: LD_INT 1
31406: PUSH
31407: LD_INT 0
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 1
31416: PUSH
31417: LD_INT 1
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 0
31426: PUSH
31427: LD_INT 1
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 1
31436: NEG
31437: PUSH
31438: LD_INT 0
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 1
31447: NEG
31448: PUSH
31449: LD_INT 1
31451: NEG
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 2
31459: PUSH
31460: LD_INT 1
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 2
31469: NEG
31470: PUSH
31471: LD_INT 1
31473: NEG
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31490: LD_ADDR_VAR 0 36
31494: PUSH
31495: LD_INT 0
31497: PUSH
31498: LD_INT 0
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 0
31507: PUSH
31508: LD_INT 1
31510: NEG
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 1
31518: PUSH
31519: LD_INT 0
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 1
31528: PUSH
31529: LD_INT 1
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 0
31538: PUSH
31539: LD_INT 1
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 1
31548: NEG
31549: PUSH
31550: LD_INT 0
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 1
31559: NEG
31560: PUSH
31561: LD_INT 1
31563: NEG
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 1
31571: NEG
31572: PUSH
31573: LD_INT 2
31575: NEG
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: PUSH
31581: LD_INT 1
31583: PUSH
31584: LD_INT 2
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31602: LD_ADDR_VAR 0 37
31606: PUSH
31607: LD_INT 0
31609: PUSH
31610: LD_INT 0
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 0
31619: PUSH
31620: LD_INT 1
31622: NEG
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 1
31630: PUSH
31631: LD_INT 0
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 1
31640: PUSH
31641: LD_INT 1
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: LD_INT 0
31650: PUSH
31651: LD_INT 1
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 1
31660: NEG
31661: PUSH
31662: LD_INT 0
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 1
31671: NEG
31672: PUSH
31673: LD_INT 1
31675: NEG
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 1
31683: PUSH
31684: LD_INT 1
31686: NEG
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 1
31694: NEG
31695: PUSH
31696: LD_INT 1
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31714: LD_ADDR_VAR 0 38
31718: PUSH
31719: LD_INT 0
31721: PUSH
31722: LD_INT 0
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 0
31731: PUSH
31732: LD_INT 1
31734: NEG
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 1
31742: PUSH
31743: LD_INT 0
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: LD_INT 1
31752: PUSH
31753: LD_INT 1
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: LD_INT 0
31762: PUSH
31763: LD_INT 1
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 1
31772: NEG
31773: PUSH
31774: LD_INT 0
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 1
31783: NEG
31784: PUSH
31785: LD_INT 1
31787: NEG
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: LD_INT 2
31795: PUSH
31796: LD_INT 1
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 2
31805: NEG
31806: PUSH
31807: LD_INT 1
31809: NEG
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31826: LD_ADDR_VAR 0 39
31830: PUSH
31831: LD_INT 0
31833: PUSH
31834: LD_INT 0
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 0
31843: PUSH
31844: LD_INT 1
31846: NEG
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 1
31854: PUSH
31855: LD_INT 0
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 1
31864: PUSH
31865: LD_INT 1
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: LD_INT 0
31874: PUSH
31875: LD_INT 1
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 1
31884: NEG
31885: PUSH
31886: LD_INT 0
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 1
31895: NEG
31896: PUSH
31897: LD_INT 1
31899: NEG
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 1
31907: NEG
31908: PUSH
31909: LD_INT 2
31911: NEG
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 1
31919: PUSH
31920: LD_INT 2
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31938: LD_ADDR_VAR 0 40
31942: PUSH
31943: LD_INT 0
31945: PUSH
31946: LD_INT 0
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 0
31955: PUSH
31956: LD_INT 1
31958: NEG
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 1
31966: PUSH
31967: LD_INT 0
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 1
31976: PUSH
31977: LD_INT 1
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 0
31986: PUSH
31987: LD_INT 1
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: LD_INT 1
31996: NEG
31997: PUSH
31998: LD_INT 0
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 1
32007: NEG
32008: PUSH
32009: LD_INT 1
32011: NEG
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 1
32019: PUSH
32020: LD_INT 1
32022: NEG
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 1
32030: NEG
32031: PUSH
32032: LD_INT 1
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32050: LD_ADDR_VAR 0 41
32054: PUSH
32055: LD_INT 0
32057: PUSH
32058: LD_INT 0
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: PUSH
32065: LD_INT 0
32067: PUSH
32068: LD_INT 1
32070: NEG
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 1
32078: PUSH
32079: LD_INT 0
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 1
32088: PUSH
32089: LD_INT 1
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 0
32098: PUSH
32099: LD_INT 1
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 1
32108: NEG
32109: PUSH
32110: LD_INT 0
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 1
32119: NEG
32120: PUSH
32121: LD_INT 1
32123: NEG
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 1
32131: NEG
32132: PUSH
32133: LD_INT 2
32135: NEG
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: LD_INT 1
32143: PUSH
32144: LD_INT 1
32146: NEG
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 2
32154: PUSH
32155: LD_INT 0
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 2
32164: PUSH
32165: LD_INT 1
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: PUSH
32172: LD_INT 2
32174: PUSH
32175: LD_INT 2
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: PUSH
32182: LD_INT 1
32184: PUSH
32185: LD_INT 2
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: PUSH
32192: LD_INT 1
32194: NEG
32195: PUSH
32196: LD_INT 1
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 2
32205: NEG
32206: PUSH
32207: LD_INT 0
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 2
32216: NEG
32217: PUSH
32218: LD_INT 1
32220: NEG
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 2
32228: NEG
32229: PUSH
32230: LD_INT 2
32232: NEG
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 2
32240: NEG
32241: PUSH
32242: LD_INT 3
32244: NEG
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 2
32252: PUSH
32253: LD_INT 1
32255: NEG
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 3
32263: PUSH
32264: LD_INT 0
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 3
32273: PUSH
32274: LD_INT 1
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 3
32283: PUSH
32284: LD_INT 2
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 3
32293: PUSH
32294: LD_INT 3
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 2
32303: PUSH
32304: LD_INT 3
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: LD_INT 2
32313: NEG
32314: PUSH
32315: LD_INT 1
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 3
32324: NEG
32325: PUSH
32326: LD_INT 0
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 3
32335: NEG
32336: PUSH
32337: LD_INT 1
32339: NEG
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 3
32347: NEG
32348: PUSH
32349: LD_INT 2
32351: NEG
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 3
32359: NEG
32360: PUSH
32361: LD_INT 3
32363: NEG
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32400: LD_ADDR_VAR 0 42
32404: PUSH
32405: LD_INT 0
32407: PUSH
32408: LD_INT 0
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 0
32417: PUSH
32418: LD_INT 1
32420: NEG
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 1
32428: PUSH
32429: LD_INT 0
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 1
32438: PUSH
32439: LD_INT 1
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 0
32448: PUSH
32449: LD_INT 1
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 1
32458: NEG
32459: PUSH
32460: LD_INT 0
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 1
32469: NEG
32470: PUSH
32471: LD_INT 1
32473: NEG
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 1
32481: NEG
32482: PUSH
32483: LD_INT 2
32485: NEG
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 0
32493: PUSH
32494: LD_INT 2
32496: NEG
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 1
32504: PUSH
32505: LD_INT 1
32507: NEG
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: LD_INT 2
32515: PUSH
32516: LD_INT 1
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 2
32525: PUSH
32526: LD_INT 2
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 1
32535: PUSH
32536: LD_INT 2
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 0
32545: PUSH
32546: LD_INT 2
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 1
32555: NEG
32556: PUSH
32557: LD_INT 1
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 2
32566: NEG
32567: PUSH
32568: LD_INT 1
32570: NEG
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 2
32578: NEG
32579: PUSH
32580: LD_INT 2
32582: NEG
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 2
32590: NEG
32591: PUSH
32592: LD_INT 3
32594: NEG
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 1
32602: NEG
32603: PUSH
32604: LD_INT 3
32606: NEG
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 0
32614: PUSH
32615: LD_INT 3
32617: NEG
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 1
32625: PUSH
32626: LD_INT 2
32628: NEG
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 3
32636: PUSH
32637: LD_INT 2
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 3
32646: PUSH
32647: LD_INT 3
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 2
32656: PUSH
32657: LD_INT 3
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 1
32666: PUSH
32667: LD_INT 3
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: LD_INT 0
32676: PUSH
32677: LD_INT 3
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 1
32686: NEG
32687: PUSH
32688: LD_INT 2
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 3
32697: NEG
32698: PUSH
32699: LD_INT 2
32701: NEG
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 3
32709: NEG
32710: PUSH
32711: LD_INT 3
32713: NEG
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32750: LD_ADDR_VAR 0 43
32754: PUSH
32755: LD_INT 0
32757: PUSH
32758: LD_INT 0
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: PUSH
32765: LD_INT 0
32767: PUSH
32768: LD_INT 1
32770: NEG
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 1
32778: PUSH
32779: LD_INT 0
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 1
32788: PUSH
32789: LD_INT 1
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 0
32798: PUSH
32799: LD_INT 1
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: LD_INT 1
32808: NEG
32809: PUSH
32810: LD_INT 0
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 1
32819: NEG
32820: PUSH
32821: LD_INT 1
32823: NEG
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 1
32831: NEG
32832: PUSH
32833: LD_INT 2
32835: NEG
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 0
32843: PUSH
32844: LD_INT 2
32846: NEG
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 1
32854: PUSH
32855: LD_INT 1
32857: NEG
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 2
32865: PUSH
32866: LD_INT 0
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: LD_INT 2
32875: PUSH
32876: LD_INT 1
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: LD_INT 1
32885: PUSH
32886: LD_INT 2
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PUSH
32893: LD_INT 0
32895: PUSH
32896: LD_INT 2
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: LD_INT 1
32905: NEG
32906: PUSH
32907: LD_INT 1
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 2
32916: NEG
32917: PUSH
32918: LD_INT 0
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 2
32927: NEG
32928: PUSH
32929: LD_INT 1
32931: NEG
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 1
32939: NEG
32940: PUSH
32941: LD_INT 3
32943: NEG
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 0
32951: PUSH
32952: LD_INT 3
32954: NEG
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 1
32962: PUSH
32963: LD_INT 2
32965: NEG
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 2
32973: PUSH
32974: LD_INT 1
32976: NEG
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 3
32984: PUSH
32985: LD_INT 0
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 3
32994: PUSH
32995: LD_INT 1
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 1
33004: PUSH
33005: LD_INT 3
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 0
33014: PUSH
33015: LD_INT 3
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 1
33024: NEG
33025: PUSH
33026: LD_INT 2
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 2
33035: NEG
33036: PUSH
33037: LD_INT 1
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 3
33046: NEG
33047: PUSH
33048: LD_INT 0
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: LD_INT 3
33057: NEG
33058: PUSH
33059: LD_INT 1
33061: NEG
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33098: LD_ADDR_VAR 0 44
33102: PUSH
33103: LD_INT 0
33105: PUSH
33106: LD_INT 0
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 0
33115: PUSH
33116: LD_INT 1
33118: NEG
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 1
33126: PUSH
33127: LD_INT 0
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 1
33136: PUSH
33137: LD_INT 1
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 0
33146: PUSH
33147: LD_INT 1
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 1
33156: NEG
33157: PUSH
33158: LD_INT 0
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 1
33167: NEG
33168: PUSH
33169: LD_INT 1
33171: NEG
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 1
33179: NEG
33180: PUSH
33181: LD_INT 2
33183: NEG
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 1
33191: PUSH
33192: LD_INT 1
33194: NEG
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 2
33202: PUSH
33203: LD_INT 0
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: PUSH
33210: LD_INT 2
33212: PUSH
33213: LD_INT 1
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: LD_INT 2
33222: PUSH
33223: LD_INT 2
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: LD_INT 1
33232: PUSH
33233: LD_INT 2
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 1
33242: NEG
33243: PUSH
33244: LD_INT 1
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 2
33253: NEG
33254: PUSH
33255: LD_INT 0
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 2
33264: NEG
33265: PUSH
33266: LD_INT 1
33268: NEG
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 2
33276: NEG
33277: PUSH
33278: LD_INT 2
33280: NEG
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 2
33288: NEG
33289: PUSH
33290: LD_INT 3
33292: NEG
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PUSH
33298: LD_INT 2
33300: PUSH
33301: LD_INT 1
33303: NEG
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 3
33311: PUSH
33312: LD_INT 0
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 3
33321: PUSH
33322: LD_INT 1
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 3
33331: PUSH
33332: LD_INT 2
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 3
33341: PUSH
33342: LD_INT 3
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 2
33351: PUSH
33352: LD_INT 3
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: LD_INT 2
33361: NEG
33362: PUSH
33363: LD_INT 1
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 3
33372: NEG
33373: PUSH
33374: LD_INT 0
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 3
33383: NEG
33384: PUSH
33385: LD_INT 1
33387: NEG
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 3
33395: NEG
33396: PUSH
33397: LD_INT 2
33399: NEG
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 3
33407: NEG
33408: PUSH
33409: LD_INT 3
33411: NEG
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33448: LD_ADDR_VAR 0 45
33452: PUSH
33453: LD_INT 0
33455: PUSH
33456: LD_INT 0
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 0
33465: PUSH
33466: LD_INT 1
33468: NEG
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 1
33476: PUSH
33477: LD_INT 0
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: LD_INT 1
33486: PUSH
33487: LD_INT 1
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 0
33496: PUSH
33497: LD_INT 1
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 1
33506: NEG
33507: PUSH
33508: LD_INT 0
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: LD_INT 1
33517: NEG
33518: PUSH
33519: LD_INT 1
33521: NEG
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: PUSH
33527: LD_INT 1
33529: NEG
33530: PUSH
33531: LD_INT 2
33533: NEG
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 0
33541: PUSH
33542: LD_INT 2
33544: NEG
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: PUSH
33550: LD_INT 1
33552: PUSH
33553: LD_INT 1
33555: NEG
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: PUSH
33561: LD_INT 2
33563: PUSH
33564: LD_INT 1
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 2
33573: PUSH
33574: LD_INT 2
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 1
33583: PUSH
33584: LD_INT 2
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 0
33593: PUSH
33594: LD_INT 2
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 1
33603: NEG
33604: PUSH
33605: LD_INT 1
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 2
33614: NEG
33615: PUSH
33616: LD_INT 1
33618: NEG
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 2
33626: NEG
33627: PUSH
33628: LD_INT 2
33630: NEG
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: LD_INT 2
33638: NEG
33639: PUSH
33640: LD_INT 3
33642: NEG
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 1
33650: NEG
33651: PUSH
33652: LD_INT 3
33654: NEG
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 0
33662: PUSH
33663: LD_INT 3
33665: NEG
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 1
33673: PUSH
33674: LD_INT 2
33676: NEG
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: LD_INT 3
33684: PUSH
33685: LD_INT 2
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: LD_INT 3
33694: PUSH
33695: LD_INT 3
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: LD_INT 2
33704: PUSH
33705: LD_INT 3
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 1
33714: PUSH
33715: LD_INT 3
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 0
33724: PUSH
33725: LD_INT 3
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: LD_INT 1
33734: NEG
33735: PUSH
33736: LD_INT 2
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 3
33745: NEG
33746: PUSH
33747: LD_INT 2
33749: NEG
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 3
33757: NEG
33758: PUSH
33759: LD_INT 3
33761: NEG
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33798: LD_ADDR_VAR 0 46
33802: PUSH
33803: LD_INT 0
33805: PUSH
33806: LD_INT 0
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: PUSH
33813: LD_INT 0
33815: PUSH
33816: LD_INT 1
33818: NEG
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 1
33826: PUSH
33827: LD_INT 0
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 1
33836: PUSH
33837: LD_INT 1
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 0
33846: PUSH
33847: LD_INT 1
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 1
33856: NEG
33857: PUSH
33858: LD_INT 0
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 1
33867: NEG
33868: PUSH
33869: LD_INT 1
33871: NEG
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 1
33879: NEG
33880: PUSH
33881: LD_INT 2
33883: NEG
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 0
33891: PUSH
33892: LD_INT 2
33894: NEG
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: LD_INT 1
33902: PUSH
33903: LD_INT 1
33905: NEG
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 2
33913: PUSH
33914: LD_INT 0
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 2
33923: PUSH
33924: LD_INT 1
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 1
33933: PUSH
33934: LD_INT 2
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 0
33943: PUSH
33944: LD_INT 2
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 1
33953: NEG
33954: PUSH
33955: LD_INT 1
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 2
33964: NEG
33965: PUSH
33966: LD_INT 0
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 2
33975: NEG
33976: PUSH
33977: LD_INT 1
33979: NEG
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 1
33987: NEG
33988: PUSH
33989: LD_INT 3
33991: NEG
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: PUSH
33997: LD_INT 0
33999: PUSH
34000: LD_INT 3
34002: NEG
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: PUSH
34008: LD_INT 1
34010: PUSH
34011: LD_INT 2
34013: NEG
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 2
34021: PUSH
34022: LD_INT 1
34024: NEG
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 3
34032: PUSH
34033: LD_INT 0
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 3
34042: PUSH
34043: LD_INT 1
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 1
34052: PUSH
34053: LD_INT 3
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 0
34062: PUSH
34063: LD_INT 3
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 1
34072: NEG
34073: PUSH
34074: LD_INT 2
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 2
34083: NEG
34084: PUSH
34085: LD_INT 1
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 3
34094: NEG
34095: PUSH
34096: LD_INT 0
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 3
34105: NEG
34106: PUSH
34107: LD_INT 1
34109: NEG
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34146: LD_ADDR_VAR 0 47
34150: PUSH
34151: LD_INT 0
34153: PUSH
34154: LD_INT 0
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 0
34163: PUSH
34164: LD_INT 1
34166: NEG
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 1
34174: PUSH
34175: LD_INT 0
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 1
34184: PUSH
34185: LD_INT 1
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 0
34194: PUSH
34195: LD_INT 1
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 1
34204: NEG
34205: PUSH
34206: LD_INT 0
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: LD_INT 1
34215: NEG
34216: PUSH
34217: LD_INT 1
34219: NEG
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 1
34227: NEG
34228: PUSH
34229: LD_INT 2
34231: NEG
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 0
34239: PUSH
34240: LD_INT 2
34242: NEG
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_INT 1
34250: PUSH
34251: LD_INT 1
34253: NEG
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PUSH
34259: LD_INT 2
34261: NEG
34262: PUSH
34263: LD_INT 1
34265: NEG
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 2
34273: NEG
34274: PUSH
34275: LD_INT 2
34277: NEG
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
34297: LD_ADDR_VAR 0 48
34301: PUSH
34302: LD_INT 0
34304: PUSH
34305: LD_INT 0
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 0
34314: PUSH
34315: LD_INT 1
34317: NEG
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: LD_INT 1
34325: PUSH
34326: LD_INT 0
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 1
34335: PUSH
34336: LD_INT 1
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: PUSH
34343: LD_INT 0
34345: PUSH
34346: LD_INT 1
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 1
34355: NEG
34356: PUSH
34357: LD_INT 0
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 1
34366: NEG
34367: PUSH
34368: LD_INT 1
34370: NEG
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 1
34378: NEG
34379: PUSH
34380: LD_INT 2
34382: NEG
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 0
34390: PUSH
34391: LD_INT 2
34393: NEG
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 1
34401: PUSH
34402: LD_INT 1
34404: NEG
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 2
34412: PUSH
34413: LD_INT 0
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: PUSH
34420: LD_INT 2
34422: PUSH
34423: LD_INT 1
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
34444: LD_ADDR_VAR 0 49
34448: PUSH
34449: LD_INT 0
34451: PUSH
34452: LD_INT 0
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 0
34461: PUSH
34462: LD_INT 1
34464: NEG
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 1
34472: PUSH
34473: LD_INT 0
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 1
34482: PUSH
34483: LD_INT 1
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 0
34492: PUSH
34493: LD_INT 1
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 1
34502: NEG
34503: PUSH
34504: LD_INT 0
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 1
34513: NEG
34514: PUSH
34515: LD_INT 1
34517: NEG
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PUSH
34523: LD_INT 1
34525: PUSH
34526: LD_INT 1
34528: NEG
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 2
34536: PUSH
34537: LD_INT 0
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 2
34546: PUSH
34547: LD_INT 1
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 2
34556: PUSH
34557: LD_INT 2
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: LD_INT 1
34566: PUSH
34567: LD_INT 2
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34588: LD_ADDR_VAR 0 50
34592: PUSH
34593: LD_INT 0
34595: PUSH
34596: LD_INT 0
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 0
34605: PUSH
34606: LD_INT 1
34608: NEG
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PUSH
34614: LD_INT 1
34616: PUSH
34617: LD_INT 0
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 1
34626: PUSH
34627: LD_INT 1
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: LD_INT 0
34636: PUSH
34637: LD_INT 1
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 1
34646: NEG
34647: PUSH
34648: LD_INT 0
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: LD_INT 1
34657: NEG
34658: PUSH
34659: LD_INT 1
34661: NEG
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 2
34669: PUSH
34670: LD_INT 1
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 2
34679: PUSH
34680: LD_INT 2
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 1
34689: PUSH
34690: LD_INT 2
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 0
34699: PUSH
34700: LD_INT 2
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: LD_INT 1
34709: NEG
34710: PUSH
34711: LD_INT 1
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34732: LD_ADDR_VAR 0 51
34736: PUSH
34737: LD_INT 0
34739: PUSH
34740: LD_INT 0
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 0
34749: PUSH
34750: LD_INT 1
34752: NEG
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 1
34760: PUSH
34761: LD_INT 0
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 1
34770: PUSH
34771: LD_INT 1
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 0
34780: PUSH
34781: LD_INT 1
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PUSH
34788: LD_INT 1
34790: NEG
34791: PUSH
34792: LD_INT 0
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 1
34801: NEG
34802: PUSH
34803: LD_INT 1
34805: NEG
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: LD_INT 1
34813: PUSH
34814: LD_INT 2
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: PUSH
34821: LD_INT 0
34823: PUSH
34824: LD_INT 2
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 1
34833: NEG
34834: PUSH
34835: LD_INT 1
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: LD_INT 2
34844: NEG
34845: PUSH
34846: LD_INT 0
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 2
34855: NEG
34856: PUSH
34857: LD_INT 1
34859: NEG
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34879: LD_ADDR_VAR 0 52
34883: PUSH
34884: LD_INT 0
34886: PUSH
34887: LD_INT 0
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 0
34896: PUSH
34897: LD_INT 1
34899: NEG
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 1
34907: PUSH
34908: LD_INT 0
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 1
34917: PUSH
34918: LD_INT 1
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: LD_INT 0
34927: PUSH
34928: LD_INT 1
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 1
34937: NEG
34938: PUSH
34939: LD_INT 0
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 1
34948: NEG
34949: PUSH
34950: LD_INT 1
34952: NEG
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 1
34960: NEG
34961: PUSH
34962: LD_INT 2
34964: NEG
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: LD_INT 1
34972: NEG
34973: PUSH
34974: LD_INT 1
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 2
34983: NEG
34984: PUSH
34985: LD_INT 0
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 2
34994: NEG
34995: PUSH
34996: LD_INT 1
34998: NEG
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 2
35006: NEG
35007: PUSH
35008: LD_INT 2
35010: NEG
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35030: LD_ADDR_VAR 0 53
35034: PUSH
35035: LD_INT 0
35037: PUSH
35038: LD_INT 0
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 0
35047: PUSH
35048: LD_INT 1
35050: NEG
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 1
35058: PUSH
35059: LD_INT 0
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: LD_INT 1
35068: PUSH
35069: LD_INT 1
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: PUSH
35076: LD_INT 0
35078: PUSH
35079: LD_INT 1
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: PUSH
35086: LD_INT 1
35088: NEG
35089: PUSH
35090: LD_INT 0
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 1
35099: NEG
35100: PUSH
35101: LD_INT 1
35103: NEG
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 1
35111: NEG
35112: PUSH
35113: LD_INT 2
35115: NEG
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 0
35123: PUSH
35124: LD_INT 2
35126: NEG
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 1
35134: PUSH
35135: LD_INT 1
35137: NEG
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 2
35145: PUSH
35146: LD_INT 0
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 2
35155: PUSH
35156: LD_INT 1
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 2
35165: PUSH
35166: LD_INT 2
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 1
35175: PUSH
35176: LD_INT 2
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_INT 0
35185: PUSH
35186: LD_INT 2
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: LD_INT 1
35195: NEG
35196: PUSH
35197: LD_INT 1
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 2
35206: NEG
35207: PUSH
35208: LD_INT 0
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 2
35217: NEG
35218: PUSH
35219: LD_INT 1
35221: NEG
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: LD_INT 2
35229: NEG
35230: PUSH
35231: LD_INT 2
35233: NEG
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35260: LD_ADDR_VAR 0 54
35264: PUSH
35265: LD_INT 0
35267: PUSH
35268: LD_INT 0
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: LD_INT 0
35277: PUSH
35278: LD_INT 1
35280: NEG
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: PUSH
35286: LD_INT 1
35288: PUSH
35289: LD_INT 0
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 1
35298: PUSH
35299: LD_INT 1
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: LD_INT 0
35308: PUSH
35309: LD_INT 1
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 1
35318: NEG
35319: PUSH
35320: LD_INT 0
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: LD_INT 1
35329: NEG
35330: PUSH
35331: LD_INT 1
35333: NEG
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 1
35341: NEG
35342: PUSH
35343: LD_INT 2
35345: NEG
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: LD_INT 0
35353: PUSH
35354: LD_INT 2
35356: NEG
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 1
35364: PUSH
35365: LD_INT 1
35367: NEG
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 2
35375: PUSH
35376: LD_INT 0
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: LD_INT 2
35385: PUSH
35386: LD_INT 1
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 2
35395: PUSH
35396: LD_INT 2
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 1
35405: PUSH
35406: LD_INT 2
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 0
35415: PUSH
35416: LD_INT 2
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 1
35425: NEG
35426: PUSH
35427: LD_INT 1
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 2
35436: NEG
35437: PUSH
35438: LD_INT 0
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 2
35447: NEG
35448: PUSH
35449: LD_INT 1
35451: NEG
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 2
35459: NEG
35460: PUSH
35461: LD_INT 2
35463: NEG
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35490: LD_ADDR_VAR 0 55
35494: PUSH
35495: LD_INT 0
35497: PUSH
35498: LD_INT 0
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 0
35507: PUSH
35508: LD_INT 1
35510: NEG
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 1
35518: PUSH
35519: LD_INT 0
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: PUSH
35526: LD_INT 1
35528: PUSH
35529: LD_INT 1
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: PUSH
35536: LD_INT 0
35538: PUSH
35539: LD_INT 1
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PUSH
35546: LD_INT 1
35548: NEG
35549: PUSH
35550: LD_INT 0
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PUSH
35557: LD_INT 1
35559: NEG
35560: PUSH
35561: LD_INT 1
35563: NEG
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 1
35571: NEG
35572: PUSH
35573: LD_INT 2
35575: NEG
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 0
35583: PUSH
35584: LD_INT 2
35586: NEG
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 1
35594: PUSH
35595: LD_INT 1
35597: NEG
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 2
35605: PUSH
35606: LD_INT 0
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 2
35615: PUSH
35616: LD_INT 1
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_INT 2
35625: PUSH
35626: LD_INT 2
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: LD_INT 1
35635: PUSH
35636: LD_INT 2
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: PUSH
35643: LD_INT 0
35645: PUSH
35646: LD_INT 2
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: LD_INT 1
35655: NEG
35656: PUSH
35657: LD_INT 1
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: PUSH
35664: LD_INT 2
35666: NEG
35667: PUSH
35668: LD_INT 0
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: PUSH
35675: LD_INT 2
35677: NEG
35678: PUSH
35679: LD_INT 1
35681: NEG
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 2
35689: NEG
35690: PUSH
35691: LD_INT 2
35693: NEG
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35720: LD_ADDR_VAR 0 56
35724: PUSH
35725: LD_INT 0
35727: PUSH
35728: LD_INT 0
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 0
35737: PUSH
35738: LD_INT 1
35740: NEG
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: PUSH
35746: LD_INT 1
35748: PUSH
35749: LD_INT 0
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 1
35758: PUSH
35759: LD_INT 1
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 0
35768: PUSH
35769: LD_INT 1
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 1
35778: NEG
35779: PUSH
35780: LD_INT 0
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 1
35789: NEG
35790: PUSH
35791: LD_INT 1
35793: NEG
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 1
35801: NEG
35802: PUSH
35803: LD_INT 2
35805: NEG
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 0
35813: PUSH
35814: LD_INT 2
35816: NEG
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 1
35824: PUSH
35825: LD_INT 1
35827: NEG
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 2
35835: PUSH
35836: LD_INT 0
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: LD_INT 2
35845: PUSH
35846: LD_INT 1
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: LD_INT 2
35855: PUSH
35856: LD_INT 2
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PUSH
35863: LD_INT 1
35865: PUSH
35866: LD_INT 2
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 0
35875: PUSH
35876: LD_INT 2
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 1
35885: NEG
35886: PUSH
35887: LD_INT 1
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 2
35896: NEG
35897: PUSH
35898: LD_INT 0
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 2
35907: NEG
35908: PUSH
35909: LD_INT 1
35911: NEG
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 2
35919: NEG
35920: PUSH
35921: LD_INT 2
35923: NEG
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35950: LD_ADDR_VAR 0 57
35954: PUSH
35955: LD_INT 0
35957: PUSH
35958: LD_INT 0
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: PUSH
35965: LD_INT 0
35967: PUSH
35968: LD_INT 1
35970: NEG
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 1
35978: PUSH
35979: LD_INT 0
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 1
35988: PUSH
35989: LD_INT 1
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 0
35998: PUSH
35999: LD_INT 1
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 1
36008: NEG
36009: PUSH
36010: LD_INT 0
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 1
36019: NEG
36020: PUSH
36021: LD_INT 1
36023: NEG
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PUSH
36029: LD_INT 1
36031: NEG
36032: PUSH
36033: LD_INT 2
36035: NEG
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 0
36043: PUSH
36044: LD_INT 2
36046: NEG
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 1
36054: PUSH
36055: LD_INT 1
36057: NEG
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 2
36065: PUSH
36066: LD_INT 0
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 2
36075: PUSH
36076: LD_INT 1
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 2
36085: PUSH
36086: LD_INT 2
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: PUSH
36093: LD_INT 1
36095: PUSH
36096: LD_INT 2
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 0
36105: PUSH
36106: LD_INT 2
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: LD_INT 1
36115: NEG
36116: PUSH
36117: LD_INT 1
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PUSH
36124: LD_INT 2
36126: NEG
36127: PUSH
36128: LD_INT 0
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PUSH
36135: LD_INT 2
36137: NEG
36138: PUSH
36139: LD_INT 1
36141: NEG
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PUSH
36147: LD_INT 2
36149: NEG
36150: PUSH
36151: LD_INT 2
36153: NEG
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36180: LD_ADDR_VAR 0 58
36184: PUSH
36185: LD_INT 0
36187: PUSH
36188: LD_INT 0
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: LD_INT 0
36197: PUSH
36198: LD_INT 1
36200: NEG
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 1
36208: PUSH
36209: LD_INT 0
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 1
36218: PUSH
36219: LD_INT 1
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: LD_INT 0
36228: PUSH
36229: LD_INT 1
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 1
36238: NEG
36239: PUSH
36240: LD_INT 0
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: PUSH
36247: LD_INT 1
36249: NEG
36250: PUSH
36251: LD_INT 1
36253: NEG
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: PUSH
36259: LD_INT 1
36261: NEG
36262: PUSH
36263: LD_INT 2
36265: NEG
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 0
36273: PUSH
36274: LD_INT 2
36276: NEG
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 1
36284: PUSH
36285: LD_INT 1
36287: NEG
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: LD_INT 2
36295: PUSH
36296: LD_INT 0
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 2
36305: PUSH
36306: LD_INT 1
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 2
36315: PUSH
36316: LD_INT 2
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PUSH
36323: LD_INT 1
36325: PUSH
36326: LD_INT 2
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 0
36335: PUSH
36336: LD_INT 2
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 1
36345: NEG
36346: PUSH
36347: LD_INT 1
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 2
36356: NEG
36357: PUSH
36358: LD_INT 0
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 2
36367: NEG
36368: PUSH
36369: LD_INT 1
36371: NEG
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 2
36379: NEG
36380: PUSH
36381: LD_INT 2
36383: NEG
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36410: LD_ADDR_VAR 0 59
36414: PUSH
36415: LD_INT 0
36417: PUSH
36418: LD_INT 0
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: LD_INT 0
36427: PUSH
36428: LD_INT 1
36430: NEG
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: LD_INT 1
36438: PUSH
36439: LD_INT 0
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 1
36448: PUSH
36449: LD_INT 1
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: LD_INT 0
36458: PUSH
36459: LD_INT 1
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: LD_INT 1
36468: NEG
36469: PUSH
36470: LD_INT 0
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: PUSH
36477: LD_INT 1
36479: NEG
36480: PUSH
36481: LD_INT 1
36483: NEG
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36498: LD_ADDR_VAR 0 60
36502: PUSH
36503: LD_INT 0
36505: PUSH
36506: LD_INT 0
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: LD_INT 0
36515: PUSH
36516: LD_INT 1
36518: NEG
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: PUSH
36524: LD_INT 1
36526: PUSH
36527: LD_INT 0
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: PUSH
36534: LD_INT 1
36536: PUSH
36537: LD_INT 1
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: LD_INT 0
36546: PUSH
36547: LD_INT 1
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 1
36556: NEG
36557: PUSH
36558: LD_INT 0
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 1
36567: NEG
36568: PUSH
36569: LD_INT 1
36571: NEG
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36586: LD_ADDR_VAR 0 61
36590: PUSH
36591: LD_INT 0
36593: PUSH
36594: LD_INT 0
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PUSH
36601: LD_INT 0
36603: PUSH
36604: LD_INT 1
36606: NEG
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 1
36614: PUSH
36615: LD_INT 0
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 1
36624: PUSH
36625: LD_INT 1
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 0
36634: PUSH
36635: LD_INT 1
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 1
36644: NEG
36645: PUSH
36646: LD_INT 0
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 1
36655: NEG
36656: PUSH
36657: LD_INT 1
36659: NEG
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36674: LD_ADDR_VAR 0 62
36678: PUSH
36679: LD_INT 0
36681: PUSH
36682: LD_INT 0
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: LD_INT 0
36691: PUSH
36692: LD_INT 1
36694: NEG
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: PUSH
36700: LD_INT 1
36702: PUSH
36703: LD_INT 0
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: LD_INT 1
36712: PUSH
36713: LD_INT 1
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 0
36722: PUSH
36723: LD_INT 1
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 1
36732: NEG
36733: PUSH
36734: LD_INT 0
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 1
36743: NEG
36744: PUSH
36745: LD_INT 1
36747: NEG
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36762: LD_ADDR_VAR 0 63
36766: PUSH
36767: LD_INT 0
36769: PUSH
36770: LD_INT 0
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_INT 0
36779: PUSH
36780: LD_INT 1
36782: NEG
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: LD_INT 1
36790: PUSH
36791: LD_INT 0
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: LD_INT 1
36800: PUSH
36801: LD_INT 1
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 0
36810: PUSH
36811: LD_INT 1
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 1
36820: NEG
36821: PUSH
36822: LD_INT 0
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: PUSH
36829: LD_INT 1
36831: NEG
36832: PUSH
36833: LD_INT 1
36835: NEG
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: LIST
36849: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36850: LD_ADDR_VAR 0 64
36854: PUSH
36855: LD_INT 0
36857: PUSH
36858: LD_INT 0
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: PUSH
36865: LD_INT 0
36867: PUSH
36868: LD_INT 1
36870: NEG
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PUSH
36876: LD_INT 1
36878: PUSH
36879: LD_INT 0
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: LD_INT 1
36888: PUSH
36889: LD_INT 1
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: LD_INT 0
36898: PUSH
36899: LD_INT 1
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 1
36908: NEG
36909: PUSH
36910: LD_INT 0
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 1
36919: NEG
36920: PUSH
36921: LD_INT 1
36923: NEG
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: ST_TO_ADDR
// end ; 1 :
36938: GO 42835
36940: LD_INT 1
36942: DOUBLE
36943: EQUAL
36944: IFTRUE 36948
36946: GO 39571
36948: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36949: LD_ADDR_VAR 0 11
36953: PUSH
36954: LD_INT 1
36956: NEG
36957: PUSH
36958: LD_INT 3
36960: NEG
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 0
36968: PUSH
36969: LD_INT 3
36971: NEG
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 1
36979: PUSH
36980: LD_INT 2
36982: NEG
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: LIST
36992: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36993: LD_ADDR_VAR 0 12
36997: PUSH
36998: LD_INT 2
37000: PUSH
37001: LD_INT 1
37003: NEG
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: LD_INT 3
37011: PUSH
37012: LD_INT 0
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: LD_INT 3
37021: PUSH
37022: LD_INT 1
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: LIST
37033: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37034: LD_ADDR_VAR 0 13
37038: PUSH
37039: LD_INT 3
37041: PUSH
37042: LD_INT 2
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: LD_INT 3
37051: PUSH
37052: LD_INT 3
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PUSH
37059: LD_INT 2
37061: PUSH
37062: LD_INT 3
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: LIST
37073: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37074: LD_ADDR_VAR 0 14
37078: PUSH
37079: LD_INT 1
37081: PUSH
37082: LD_INT 3
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: LD_INT 0
37091: PUSH
37092: LD_INT 3
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PUSH
37099: LD_INT 1
37101: NEG
37102: PUSH
37103: LD_INT 2
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: LIST
37114: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37115: LD_ADDR_VAR 0 15
37119: PUSH
37120: LD_INT 2
37122: NEG
37123: PUSH
37124: LD_INT 1
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 3
37133: NEG
37134: PUSH
37135: LD_INT 0
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 3
37144: NEG
37145: PUSH
37146: LD_INT 1
37148: NEG
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: LIST
37158: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37159: LD_ADDR_VAR 0 16
37163: PUSH
37164: LD_INT 2
37166: NEG
37167: PUSH
37168: LD_INT 3
37170: NEG
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 3
37178: NEG
37179: PUSH
37180: LD_INT 2
37182: NEG
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 3
37190: NEG
37191: PUSH
37192: LD_INT 3
37194: NEG
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: LIST
37204: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37205: LD_ADDR_VAR 0 17
37209: PUSH
37210: LD_INT 1
37212: NEG
37213: PUSH
37214: LD_INT 3
37216: NEG
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 0
37224: PUSH
37225: LD_INT 3
37227: NEG
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 1
37235: PUSH
37236: LD_INT 2
37238: NEG
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: LIST
37248: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37249: LD_ADDR_VAR 0 18
37253: PUSH
37254: LD_INT 2
37256: PUSH
37257: LD_INT 1
37259: NEG
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 3
37267: PUSH
37268: LD_INT 0
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 3
37277: PUSH
37278: LD_INT 1
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: LIST
37289: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37290: LD_ADDR_VAR 0 19
37294: PUSH
37295: LD_INT 3
37297: PUSH
37298: LD_INT 2
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 3
37307: PUSH
37308: LD_INT 3
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 2
37317: PUSH
37318: LD_INT 3
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: LIST
37329: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37330: LD_ADDR_VAR 0 20
37334: PUSH
37335: LD_INT 1
37337: PUSH
37338: LD_INT 3
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: LD_INT 0
37347: PUSH
37348: LD_INT 3
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 1
37357: NEG
37358: PUSH
37359: LD_INT 2
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: LIST
37370: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37371: LD_ADDR_VAR 0 21
37375: PUSH
37376: LD_INT 2
37378: NEG
37379: PUSH
37380: LD_INT 1
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 3
37389: NEG
37390: PUSH
37391: LD_INT 0
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: PUSH
37398: LD_INT 3
37400: NEG
37401: PUSH
37402: LD_INT 1
37404: NEG
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: LIST
37414: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37415: LD_ADDR_VAR 0 22
37419: PUSH
37420: LD_INT 2
37422: NEG
37423: PUSH
37424: LD_INT 3
37426: NEG
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 3
37434: NEG
37435: PUSH
37436: LD_INT 2
37438: NEG
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 3
37446: NEG
37447: PUSH
37448: LD_INT 3
37450: NEG
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: LIST
37460: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
37461: LD_ADDR_VAR 0 23
37465: PUSH
37466: LD_INT 0
37468: PUSH
37469: LD_INT 3
37471: NEG
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 1
37479: NEG
37480: PUSH
37481: LD_INT 4
37483: NEG
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PUSH
37489: LD_INT 1
37491: PUSH
37492: LD_INT 3
37494: NEG
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: LIST
37504: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
37505: LD_ADDR_VAR 0 24
37509: PUSH
37510: LD_INT 3
37512: PUSH
37513: LD_INT 0
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 3
37522: PUSH
37523: LD_INT 1
37525: NEG
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: LD_INT 4
37533: PUSH
37534: LD_INT 1
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: LIST
37545: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
37546: LD_ADDR_VAR 0 25
37550: PUSH
37551: LD_INT 3
37553: PUSH
37554: LD_INT 3
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 4
37563: PUSH
37564: LD_INT 3
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 3
37573: PUSH
37574: LD_INT 4
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: LIST
37585: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
37586: LD_ADDR_VAR 0 26
37590: PUSH
37591: LD_INT 0
37593: PUSH
37594: LD_INT 3
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 1
37603: PUSH
37604: LD_INT 4
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 1
37613: NEG
37614: PUSH
37615: LD_INT 3
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: LIST
37626: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
37627: LD_ADDR_VAR 0 27
37631: PUSH
37632: LD_INT 3
37634: NEG
37635: PUSH
37636: LD_INT 0
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 3
37645: NEG
37646: PUSH
37647: LD_INT 1
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 4
37656: NEG
37657: PUSH
37658: LD_INT 1
37660: NEG
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: LIST
37670: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
37671: LD_ADDR_VAR 0 28
37675: PUSH
37676: LD_INT 3
37678: NEG
37679: PUSH
37680: LD_INT 3
37682: NEG
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 3
37690: NEG
37691: PUSH
37692: LD_INT 4
37694: NEG
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 4
37702: NEG
37703: PUSH
37704: LD_INT 3
37706: NEG
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: LIST
37716: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
37717: LD_ADDR_VAR 0 29
37721: PUSH
37722: LD_INT 1
37724: NEG
37725: PUSH
37726: LD_INT 3
37728: NEG
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 0
37736: PUSH
37737: LD_INT 3
37739: NEG
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 1
37747: PUSH
37748: LD_INT 2
37750: NEG
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 1
37758: NEG
37759: PUSH
37760: LD_INT 4
37762: NEG
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 0
37770: PUSH
37771: LD_INT 4
37773: NEG
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: LD_INT 1
37781: PUSH
37782: LD_INT 3
37784: NEG
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 1
37792: NEG
37793: PUSH
37794: LD_INT 5
37796: NEG
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 0
37804: PUSH
37805: LD_INT 5
37807: NEG
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 1
37815: PUSH
37816: LD_INT 4
37818: NEG
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 1
37826: NEG
37827: PUSH
37828: LD_INT 6
37830: NEG
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 0
37838: PUSH
37839: LD_INT 6
37841: NEG
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 1
37849: PUSH
37850: LD_INT 5
37852: NEG
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
37872: LD_ADDR_VAR 0 30
37876: PUSH
37877: LD_INT 2
37879: PUSH
37880: LD_INT 1
37882: NEG
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: LD_INT 3
37890: PUSH
37891: LD_INT 0
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: LD_INT 3
37900: PUSH
37901: LD_INT 1
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PUSH
37908: LD_INT 3
37910: PUSH
37911: LD_INT 1
37913: NEG
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 4
37921: PUSH
37922: LD_INT 0
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: PUSH
37929: LD_INT 4
37931: PUSH
37932: LD_INT 1
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 4
37941: PUSH
37942: LD_INT 1
37944: NEG
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 5
37952: PUSH
37953: LD_INT 0
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 5
37962: PUSH
37963: LD_INT 1
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 5
37972: PUSH
37973: LD_INT 1
37975: NEG
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 6
37983: PUSH
37984: LD_INT 0
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 6
37993: PUSH
37994: LD_INT 1
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
38015: LD_ADDR_VAR 0 31
38019: PUSH
38020: LD_INT 3
38022: PUSH
38023: LD_INT 2
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 3
38032: PUSH
38033: LD_INT 3
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 2
38042: PUSH
38043: LD_INT 3
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 4
38052: PUSH
38053: LD_INT 3
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 4
38062: PUSH
38063: LD_INT 4
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 3
38072: PUSH
38073: LD_INT 4
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 5
38082: PUSH
38083: LD_INT 4
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 5
38092: PUSH
38093: LD_INT 5
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 4
38102: PUSH
38103: LD_INT 5
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 6
38112: PUSH
38113: LD_INT 5
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PUSH
38120: LD_INT 6
38122: PUSH
38123: LD_INT 6
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: PUSH
38130: LD_INT 5
38132: PUSH
38133: LD_INT 6
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
38154: LD_ADDR_VAR 0 32
38158: PUSH
38159: LD_INT 1
38161: PUSH
38162: LD_INT 3
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 0
38171: PUSH
38172: LD_INT 3
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 1
38181: NEG
38182: PUSH
38183: LD_INT 2
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 1
38192: PUSH
38193: LD_INT 4
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 0
38202: PUSH
38203: LD_INT 4
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 1
38212: NEG
38213: PUSH
38214: LD_INT 3
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 1
38223: PUSH
38224: LD_INT 5
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 0
38233: PUSH
38234: LD_INT 5
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 1
38243: NEG
38244: PUSH
38245: LD_INT 4
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PUSH
38252: LD_INT 1
38254: PUSH
38255: LD_INT 6
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 0
38264: PUSH
38265: LD_INT 6
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 1
38274: NEG
38275: PUSH
38276: LD_INT 5
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
38297: LD_ADDR_VAR 0 33
38301: PUSH
38302: LD_INT 2
38304: NEG
38305: PUSH
38306: LD_INT 1
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 3
38315: NEG
38316: PUSH
38317: LD_INT 0
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 3
38326: NEG
38327: PUSH
38328: LD_INT 1
38330: NEG
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 3
38338: NEG
38339: PUSH
38340: LD_INT 1
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 4
38349: NEG
38350: PUSH
38351: LD_INT 0
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 4
38360: NEG
38361: PUSH
38362: LD_INT 1
38364: NEG
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 4
38372: NEG
38373: PUSH
38374: LD_INT 1
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 5
38383: NEG
38384: PUSH
38385: LD_INT 0
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PUSH
38392: LD_INT 5
38394: NEG
38395: PUSH
38396: LD_INT 1
38398: NEG
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 5
38406: NEG
38407: PUSH
38408: LD_INT 1
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 6
38417: NEG
38418: PUSH
38419: LD_INT 0
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 6
38428: NEG
38429: PUSH
38430: LD_INT 1
38432: NEG
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
38452: LD_ADDR_VAR 0 34
38456: PUSH
38457: LD_INT 2
38459: NEG
38460: PUSH
38461: LD_INT 3
38463: NEG
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: LD_INT 3
38471: NEG
38472: PUSH
38473: LD_INT 2
38475: NEG
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: LD_INT 3
38483: NEG
38484: PUSH
38485: LD_INT 3
38487: NEG
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 3
38495: NEG
38496: PUSH
38497: LD_INT 4
38499: NEG
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 4
38507: NEG
38508: PUSH
38509: LD_INT 3
38511: NEG
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 4
38519: NEG
38520: PUSH
38521: LD_INT 4
38523: NEG
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 4
38531: NEG
38532: PUSH
38533: LD_INT 5
38535: NEG
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 5
38543: NEG
38544: PUSH
38545: LD_INT 4
38547: NEG
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 5
38555: NEG
38556: PUSH
38557: LD_INT 5
38559: NEG
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 5
38567: NEG
38568: PUSH
38569: LD_INT 6
38571: NEG
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: LD_INT 6
38579: NEG
38580: PUSH
38581: LD_INT 5
38583: NEG
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 6
38591: NEG
38592: PUSH
38593: LD_INT 6
38595: NEG
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
38615: LD_ADDR_VAR 0 41
38619: PUSH
38620: LD_INT 0
38622: PUSH
38623: LD_INT 2
38625: NEG
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 1
38633: NEG
38634: PUSH
38635: LD_INT 3
38637: NEG
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 1
38645: PUSH
38646: LD_INT 2
38648: NEG
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: LIST
38658: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
38659: LD_ADDR_VAR 0 42
38663: PUSH
38664: LD_INT 2
38666: PUSH
38667: LD_INT 0
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 2
38676: PUSH
38677: LD_INT 1
38679: NEG
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 3
38687: PUSH
38688: LD_INT 1
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: LIST
38699: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
38700: LD_ADDR_VAR 0 43
38704: PUSH
38705: LD_INT 2
38707: PUSH
38708: LD_INT 2
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 3
38717: PUSH
38718: LD_INT 2
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 2
38727: PUSH
38728: LD_INT 3
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: LIST
38739: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
38740: LD_ADDR_VAR 0 44
38744: PUSH
38745: LD_INT 0
38747: PUSH
38748: LD_INT 2
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: LD_INT 1
38757: PUSH
38758: LD_INT 3
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 1
38767: NEG
38768: PUSH
38769: LD_INT 2
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: LIST
38780: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38781: LD_ADDR_VAR 0 45
38785: PUSH
38786: LD_INT 2
38788: NEG
38789: PUSH
38790: LD_INT 0
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 2
38799: NEG
38800: PUSH
38801: LD_INT 1
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 3
38810: NEG
38811: PUSH
38812: LD_INT 1
38814: NEG
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: LIST
38824: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38825: LD_ADDR_VAR 0 46
38829: PUSH
38830: LD_INT 2
38832: NEG
38833: PUSH
38834: LD_INT 2
38836: NEG
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: LD_INT 2
38844: NEG
38845: PUSH
38846: LD_INT 3
38848: NEG
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: LD_INT 3
38856: NEG
38857: PUSH
38858: LD_INT 2
38860: NEG
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: LIST
38870: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
38871: LD_ADDR_VAR 0 47
38875: PUSH
38876: LD_INT 2
38878: NEG
38879: PUSH
38880: LD_INT 3
38882: NEG
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: LD_INT 1
38890: NEG
38891: PUSH
38892: LD_INT 3
38894: NEG
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38904: LD_ADDR_VAR 0 48
38908: PUSH
38909: LD_INT 1
38911: PUSH
38912: LD_INT 2
38914: NEG
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 2
38922: PUSH
38923: LD_INT 1
38925: NEG
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
38935: LD_ADDR_VAR 0 49
38939: PUSH
38940: LD_INT 3
38942: PUSH
38943: LD_INT 1
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 3
38952: PUSH
38953: LD_INT 2
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
38964: LD_ADDR_VAR 0 50
38968: PUSH
38969: LD_INT 2
38971: PUSH
38972: LD_INT 3
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 1
38981: PUSH
38982: LD_INT 3
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38993: LD_ADDR_VAR 0 51
38997: PUSH
38998: LD_INT 1
39000: NEG
39001: PUSH
39002: LD_INT 2
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 2
39011: NEG
39012: PUSH
39013: LD_INT 1
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39024: LD_ADDR_VAR 0 52
39028: PUSH
39029: LD_INT 3
39031: NEG
39032: PUSH
39033: LD_INT 1
39035: NEG
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 3
39043: NEG
39044: PUSH
39045: LD_INT 2
39047: NEG
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39057: LD_ADDR_VAR 0 53
39061: PUSH
39062: LD_INT 1
39064: NEG
39065: PUSH
39066: LD_INT 3
39068: NEG
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 0
39076: PUSH
39077: LD_INT 3
39079: NEG
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: PUSH
39085: LD_INT 1
39087: PUSH
39088: LD_INT 2
39090: NEG
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: LIST
39100: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39101: LD_ADDR_VAR 0 54
39105: PUSH
39106: LD_INT 2
39108: PUSH
39109: LD_INT 1
39111: NEG
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 3
39119: PUSH
39120: LD_INT 0
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 3
39129: PUSH
39130: LD_INT 1
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: LIST
39141: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39142: LD_ADDR_VAR 0 55
39146: PUSH
39147: LD_INT 3
39149: PUSH
39150: LD_INT 2
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 3
39159: PUSH
39160: LD_INT 3
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 2
39169: PUSH
39170: LD_INT 3
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: LIST
39181: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39182: LD_ADDR_VAR 0 56
39186: PUSH
39187: LD_INT 1
39189: PUSH
39190: LD_INT 3
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 0
39199: PUSH
39200: LD_INT 3
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 1
39209: NEG
39210: PUSH
39211: LD_INT 2
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: LIST
39222: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39223: LD_ADDR_VAR 0 57
39227: PUSH
39228: LD_INT 2
39230: NEG
39231: PUSH
39232: LD_INT 1
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 3
39241: NEG
39242: PUSH
39243: LD_INT 0
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 3
39252: NEG
39253: PUSH
39254: LD_INT 1
39256: NEG
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: LIST
39266: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39267: LD_ADDR_VAR 0 58
39271: PUSH
39272: LD_INT 2
39274: NEG
39275: PUSH
39276: LD_INT 3
39278: NEG
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 3
39286: NEG
39287: PUSH
39288: LD_INT 2
39290: NEG
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 3
39298: NEG
39299: PUSH
39300: LD_INT 3
39302: NEG
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: LIST
39312: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
39313: LD_ADDR_VAR 0 59
39317: PUSH
39318: LD_INT 1
39320: NEG
39321: PUSH
39322: LD_INT 2
39324: NEG
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 0
39332: PUSH
39333: LD_INT 2
39335: NEG
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 1
39343: PUSH
39344: LD_INT 1
39346: NEG
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: LIST
39356: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39357: LD_ADDR_VAR 0 60
39361: PUSH
39362: LD_INT 1
39364: PUSH
39365: LD_INT 1
39367: NEG
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 2
39375: PUSH
39376: LD_INT 0
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 2
39385: PUSH
39386: LD_INT 1
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: LIST
39397: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39398: LD_ADDR_VAR 0 61
39402: PUSH
39403: LD_INT 2
39405: PUSH
39406: LD_INT 1
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 2
39415: PUSH
39416: LD_INT 2
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: PUSH
39423: LD_INT 1
39425: PUSH
39426: LD_INT 2
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: LIST
39437: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39438: LD_ADDR_VAR 0 62
39442: PUSH
39443: LD_INT 1
39445: PUSH
39446: LD_INT 2
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 0
39455: PUSH
39456: LD_INT 2
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 1
39465: NEG
39466: PUSH
39467: LD_INT 1
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: LIST
39478: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39479: LD_ADDR_VAR 0 63
39483: PUSH
39484: LD_INT 1
39486: NEG
39487: PUSH
39488: LD_INT 1
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 2
39497: NEG
39498: PUSH
39499: LD_INT 0
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 2
39508: NEG
39509: PUSH
39510: LD_INT 1
39512: NEG
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: LIST
39522: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39523: LD_ADDR_VAR 0 64
39527: PUSH
39528: LD_INT 1
39530: NEG
39531: PUSH
39532: LD_INT 2
39534: NEG
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 2
39542: NEG
39543: PUSH
39544: LD_INT 1
39546: NEG
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 2
39554: NEG
39555: PUSH
39556: LD_INT 2
39558: NEG
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: LIST
39568: ST_TO_ADDR
// end ; 2 :
39569: GO 42835
39571: LD_INT 2
39573: DOUBLE
39574: EQUAL
39575: IFTRUE 39579
39577: GO 42834
39579: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
39580: LD_ADDR_VAR 0 29
39584: PUSH
39585: LD_INT 4
39587: PUSH
39588: LD_INT 0
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 4
39597: PUSH
39598: LD_INT 1
39600: NEG
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 5
39608: PUSH
39609: LD_INT 0
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 5
39618: PUSH
39619: LD_INT 1
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 4
39628: PUSH
39629: LD_INT 1
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 3
39638: PUSH
39639: LD_INT 0
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 3
39648: PUSH
39649: LD_INT 1
39651: NEG
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 3
39659: PUSH
39660: LD_INT 2
39662: NEG
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 5
39670: PUSH
39671: LD_INT 2
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 3
39680: PUSH
39681: LD_INT 3
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 3
39690: PUSH
39691: LD_INT 2
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 4
39700: PUSH
39701: LD_INT 3
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 4
39710: PUSH
39711: LD_INT 4
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 3
39720: PUSH
39721: LD_INT 4
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 2
39730: PUSH
39731: LD_INT 3
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 2
39740: PUSH
39741: LD_INT 2
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 4
39750: PUSH
39751: LD_INT 2
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 2
39760: PUSH
39761: LD_INT 4
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 0
39770: PUSH
39771: LD_INT 4
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 0
39780: PUSH
39781: LD_INT 3
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 1
39790: PUSH
39791: LD_INT 4
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 1
39800: PUSH
39801: LD_INT 5
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 0
39810: PUSH
39811: LD_INT 5
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 1
39820: NEG
39821: PUSH
39822: LD_INT 4
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 1
39831: NEG
39832: PUSH
39833: LD_INT 3
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 2
39842: PUSH
39843: LD_INT 5
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 2
39852: NEG
39853: PUSH
39854: LD_INT 3
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 3
39863: NEG
39864: PUSH
39865: LD_INT 0
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 3
39874: NEG
39875: PUSH
39876: LD_INT 1
39878: NEG
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 2
39886: NEG
39887: PUSH
39888: LD_INT 0
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 2
39897: NEG
39898: PUSH
39899: LD_INT 1
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 3
39908: NEG
39909: PUSH
39910: LD_INT 1
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 4
39919: NEG
39920: PUSH
39921: LD_INT 0
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 4
39930: NEG
39931: PUSH
39932: LD_INT 1
39934: NEG
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 4
39942: NEG
39943: PUSH
39944: LD_INT 2
39946: NEG
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 2
39954: NEG
39955: PUSH
39956: LD_INT 2
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 4
39965: NEG
39966: PUSH
39967: LD_INT 4
39969: NEG
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 4
39977: NEG
39978: PUSH
39979: LD_INT 5
39981: NEG
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 3
39989: NEG
39990: PUSH
39991: LD_INT 4
39993: NEG
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 3
40001: NEG
40002: PUSH
40003: LD_INT 3
40005: NEG
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 4
40013: NEG
40014: PUSH
40015: LD_INT 3
40017: NEG
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 5
40025: NEG
40026: PUSH
40027: LD_INT 4
40029: NEG
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 5
40037: NEG
40038: PUSH
40039: LD_INT 5
40041: NEG
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 3
40049: NEG
40050: PUSH
40051: LD_INT 5
40053: NEG
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 5
40061: NEG
40062: PUSH
40063: LD_INT 3
40065: NEG
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
40118: LD_ADDR_VAR 0 30
40122: PUSH
40123: LD_INT 4
40125: PUSH
40126: LD_INT 4
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 4
40135: PUSH
40136: LD_INT 3
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 5
40145: PUSH
40146: LD_INT 4
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 5
40155: PUSH
40156: LD_INT 5
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 4
40165: PUSH
40166: LD_INT 5
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 3
40175: PUSH
40176: LD_INT 4
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 3
40185: PUSH
40186: LD_INT 3
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 5
40195: PUSH
40196: LD_INT 3
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 3
40205: PUSH
40206: LD_INT 5
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 0
40215: PUSH
40216: LD_INT 3
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 0
40225: PUSH
40226: LD_INT 2
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 1
40235: PUSH
40236: LD_INT 3
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 1
40245: PUSH
40246: LD_INT 4
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 0
40255: PUSH
40256: LD_INT 4
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 1
40265: NEG
40266: PUSH
40267: LD_INT 3
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 1
40276: NEG
40277: PUSH
40278: LD_INT 2
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 2
40287: PUSH
40288: LD_INT 4
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 2
40297: NEG
40298: PUSH
40299: LD_INT 2
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 4
40308: NEG
40309: PUSH
40310: LD_INT 0
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 4
40319: NEG
40320: PUSH
40321: LD_INT 1
40323: NEG
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 3
40331: NEG
40332: PUSH
40333: LD_INT 0
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 3
40342: NEG
40343: PUSH
40344: LD_INT 1
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 4
40353: NEG
40354: PUSH
40355: LD_INT 1
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 5
40364: NEG
40365: PUSH
40366: LD_INT 0
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 5
40375: NEG
40376: PUSH
40377: LD_INT 1
40379: NEG
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 5
40387: NEG
40388: PUSH
40389: LD_INT 2
40391: NEG
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 3
40399: NEG
40400: PUSH
40401: LD_INT 2
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: PUSH
40408: LD_INT 3
40410: NEG
40411: PUSH
40412: LD_INT 3
40414: NEG
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 3
40422: NEG
40423: PUSH
40424: LD_INT 4
40426: NEG
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 2
40434: NEG
40435: PUSH
40436: LD_INT 3
40438: NEG
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 2
40446: NEG
40447: PUSH
40448: LD_INT 2
40450: NEG
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 3
40458: NEG
40459: PUSH
40460: LD_INT 2
40462: NEG
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 4
40470: NEG
40471: PUSH
40472: LD_INT 3
40474: NEG
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 4
40482: NEG
40483: PUSH
40484: LD_INT 4
40486: NEG
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 2
40494: NEG
40495: PUSH
40496: LD_INT 4
40498: NEG
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 4
40506: NEG
40507: PUSH
40508: LD_INT 2
40510: NEG
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 0
40518: PUSH
40519: LD_INT 4
40521: NEG
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 0
40529: PUSH
40530: LD_INT 5
40532: NEG
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 1
40540: PUSH
40541: LD_INT 4
40543: NEG
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 1
40551: PUSH
40552: LD_INT 3
40554: NEG
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 0
40562: PUSH
40563: LD_INT 3
40565: NEG
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PUSH
40571: LD_INT 1
40573: NEG
40574: PUSH
40575: LD_INT 4
40577: NEG
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 1
40585: NEG
40586: PUSH
40587: LD_INT 5
40589: NEG
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 2
40597: PUSH
40598: LD_INT 3
40600: NEG
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 2
40608: NEG
40609: PUSH
40610: LD_INT 5
40612: NEG
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
40665: LD_ADDR_VAR 0 31
40669: PUSH
40670: LD_INT 0
40672: PUSH
40673: LD_INT 4
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 0
40682: PUSH
40683: LD_INT 3
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 1
40692: PUSH
40693: LD_INT 4
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 1
40702: PUSH
40703: LD_INT 5
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 0
40712: PUSH
40713: LD_INT 5
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 1
40722: NEG
40723: PUSH
40724: LD_INT 4
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 1
40733: NEG
40734: PUSH
40735: LD_INT 3
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 2
40744: PUSH
40745: LD_INT 5
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 2
40754: NEG
40755: PUSH
40756: LD_INT 3
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 3
40765: NEG
40766: PUSH
40767: LD_INT 0
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 3
40776: NEG
40777: PUSH
40778: LD_INT 1
40780: NEG
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 2
40788: NEG
40789: PUSH
40790: LD_INT 0
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 2
40799: NEG
40800: PUSH
40801: LD_INT 1
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 3
40810: NEG
40811: PUSH
40812: LD_INT 1
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 4
40821: NEG
40822: PUSH
40823: LD_INT 0
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 4
40832: NEG
40833: PUSH
40834: LD_INT 1
40836: NEG
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 4
40844: NEG
40845: PUSH
40846: LD_INT 2
40848: NEG
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 2
40856: NEG
40857: PUSH
40858: LD_INT 2
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 4
40867: NEG
40868: PUSH
40869: LD_INT 4
40871: NEG
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 4
40879: NEG
40880: PUSH
40881: LD_INT 5
40883: NEG
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 3
40891: NEG
40892: PUSH
40893: LD_INT 4
40895: NEG
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 3
40903: NEG
40904: PUSH
40905: LD_INT 3
40907: NEG
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 4
40915: NEG
40916: PUSH
40917: LD_INT 3
40919: NEG
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 5
40927: NEG
40928: PUSH
40929: LD_INT 4
40931: NEG
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 5
40939: NEG
40940: PUSH
40941: LD_INT 5
40943: NEG
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 3
40951: NEG
40952: PUSH
40953: LD_INT 5
40955: NEG
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 5
40963: NEG
40964: PUSH
40965: LD_INT 3
40967: NEG
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 0
40975: PUSH
40976: LD_INT 3
40978: NEG
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 0
40986: PUSH
40987: LD_INT 4
40989: NEG
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 1
40997: PUSH
40998: LD_INT 3
41000: NEG
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 1
41008: PUSH
41009: LD_INT 2
41011: NEG
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 0
41019: PUSH
41020: LD_INT 2
41022: NEG
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 1
41030: NEG
41031: PUSH
41032: LD_INT 3
41034: NEG
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 1
41042: NEG
41043: PUSH
41044: LD_INT 4
41046: NEG
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 2
41054: PUSH
41055: LD_INT 2
41057: NEG
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 2
41065: NEG
41066: PUSH
41067: LD_INT 4
41069: NEG
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 4
41077: PUSH
41078: LD_INT 0
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 4
41087: PUSH
41088: LD_INT 1
41090: NEG
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 5
41098: PUSH
41099: LD_INT 0
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 5
41108: PUSH
41109: LD_INT 1
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 4
41118: PUSH
41119: LD_INT 1
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 3
41128: PUSH
41129: LD_INT 0
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 3
41138: PUSH
41139: LD_INT 1
41141: NEG
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 3
41149: PUSH
41150: LD_INT 2
41152: NEG
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 5
41160: PUSH
41161: LD_INT 2
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
41215: LD_ADDR_VAR 0 32
41219: PUSH
41220: LD_INT 4
41222: NEG
41223: PUSH
41224: LD_INT 0
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 4
41233: NEG
41234: PUSH
41235: LD_INT 1
41237: NEG
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 3
41245: NEG
41246: PUSH
41247: LD_INT 0
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 3
41256: NEG
41257: PUSH
41258: LD_INT 1
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 4
41267: NEG
41268: PUSH
41269: LD_INT 1
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 5
41278: NEG
41279: PUSH
41280: LD_INT 0
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 5
41289: NEG
41290: PUSH
41291: LD_INT 1
41293: NEG
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 5
41301: NEG
41302: PUSH
41303: LD_INT 2
41305: NEG
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 3
41313: NEG
41314: PUSH
41315: LD_INT 2
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 3
41324: NEG
41325: PUSH
41326: LD_INT 3
41328: NEG
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 3
41336: NEG
41337: PUSH
41338: LD_INT 4
41340: NEG
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 2
41348: NEG
41349: PUSH
41350: LD_INT 3
41352: NEG
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 2
41360: NEG
41361: PUSH
41362: LD_INT 2
41364: NEG
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 3
41372: NEG
41373: PUSH
41374: LD_INT 2
41376: NEG
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 4
41384: NEG
41385: PUSH
41386: LD_INT 3
41388: NEG
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 4
41396: NEG
41397: PUSH
41398: LD_INT 4
41400: NEG
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 2
41408: NEG
41409: PUSH
41410: LD_INT 4
41412: NEG
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 4
41420: NEG
41421: PUSH
41422: LD_INT 2
41424: NEG
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 0
41432: PUSH
41433: LD_INT 4
41435: NEG
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 0
41443: PUSH
41444: LD_INT 5
41446: NEG
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 1
41454: PUSH
41455: LD_INT 4
41457: NEG
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: LD_INT 3
41468: NEG
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 0
41476: PUSH
41477: LD_INT 3
41479: NEG
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 1
41487: NEG
41488: PUSH
41489: LD_INT 4
41491: NEG
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 1
41499: NEG
41500: PUSH
41501: LD_INT 5
41503: NEG
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 2
41511: PUSH
41512: LD_INT 3
41514: NEG
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 2
41522: NEG
41523: PUSH
41524: LD_INT 5
41526: NEG
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 3
41534: PUSH
41535: LD_INT 0
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 3
41544: PUSH
41545: LD_INT 1
41547: NEG
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 4
41555: PUSH
41556: LD_INT 0
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 4
41565: PUSH
41566: LD_INT 1
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 3
41575: PUSH
41576: LD_INT 1
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 2
41585: PUSH
41586: LD_INT 0
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 2
41595: PUSH
41596: LD_INT 1
41598: NEG
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 2
41606: PUSH
41607: LD_INT 2
41609: NEG
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 4
41617: PUSH
41618: LD_INT 2
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 4
41627: PUSH
41628: LD_INT 4
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 4
41637: PUSH
41638: LD_INT 3
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 5
41647: PUSH
41648: LD_INT 4
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 5
41657: PUSH
41658: LD_INT 5
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 4
41667: PUSH
41668: LD_INT 5
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 3
41677: PUSH
41678: LD_INT 4
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 3
41687: PUSH
41688: LD_INT 3
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 5
41697: PUSH
41698: LD_INT 3
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 3
41707: PUSH
41708: LD_INT 5
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
41762: LD_ADDR_VAR 0 33
41766: PUSH
41767: LD_INT 4
41769: NEG
41770: PUSH
41771: LD_INT 4
41773: NEG
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 4
41781: NEG
41782: PUSH
41783: LD_INT 5
41785: NEG
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 3
41793: NEG
41794: PUSH
41795: LD_INT 4
41797: NEG
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: LD_INT 3
41805: NEG
41806: PUSH
41807: LD_INT 3
41809: NEG
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 4
41817: NEG
41818: PUSH
41819: LD_INT 3
41821: NEG
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 5
41829: NEG
41830: PUSH
41831: LD_INT 4
41833: NEG
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 5
41841: NEG
41842: PUSH
41843: LD_INT 5
41845: NEG
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 3
41853: NEG
41854: PUSH
41855: LD_INT 5
41857: NEG
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 5
41865: NEG
41866: PUSH
41867: LD_INT 3
41869: NEG
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 0
41877: PUSH
41878: LD_INT 3
41880: NEG
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 0
41888: PUSH
41889: LD_INT 4
41891: NEG
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 1
41899: PUSH
41900: LD_INT 3
41902: NEG
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 1
41910: PUSH
41911: LD_INT 2
41913: NEG
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 0
41921: PUSH
41922: LD_INT 2
41924: NEG
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 1
41932: NEG
41933: PUSH
41934: LD_INT 3
41936: NEG
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 1
41944: NEG
41945: PUSH
41946: LD_INT 4
41948: NEG
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 2
41956: PUSH
41957: LD_INT 2
41959: NEG
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 2
41967: NEG
41968: PUSH
41969: LD_INT 4
41971: NEG
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 4
41979: PUSH
41980: LD_INT 0
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 4
41989: PUSH
41990: LD_INT 1
41992: NEG
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 5
42000: PUSH
42001: LD_INT 0
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 5
42010: PUSH
42011: LD_INT 1
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 4
42020: PUSH
42021: LD_INT 1
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 3
42030: PUSH
42031: LD_INT 0
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 3
42040: PUSH
42041: LD_INT 1
42043: NEG
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 3
42051: PUSH
42052: LD_INT 2
42054: NEG
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 5
42062: PUSH
42063: LD_INT 2
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 3
42072: PUSH
42073: LD_INT 3
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 3
42082: PUSH
42083: LD_INT 2
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: PUSH
42090: LD_INT 4
42092: PUSH
42093: LD_INT 3
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 4
42102: PUSH
42103: LD_INT 4
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 3
42112: PUSH
42113: LD_INT 4
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 2
42122: PUSH
42123: LD_INT 3
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 2
42132: PUSH
42133: LD_INT 2
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 4
42142: PUSH
42143: LD_INT 2
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 2
42152: PUSH
42153: LD_INT 4
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 0
42162: PUSH
42163: LD_INT 4
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 0
42172: PUSH
42173: LD_INT 3
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 1
42182: PUSH
42183: LD_INT 4
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 1
42192: PUSH
42193: LD_INT 5
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 0
42202: PUSH
42203: LD_INT 5
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 1
42212: NEG
42213: PUSH
42214: LD_INT 4
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 1
42223: NEG
42224: PUSH
42225: LD_INT 3
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 2
42234: PUSH
42235: LD_INT 5
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 2
42244: NEG
42245: PUSH
42246: LD_INT 3
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
42300: LD_ADDR_VAR 0 34
42304: PUSH
42305: LD_INT 0
42307: PUSH
42308: LD_INT 4
42310: NEG
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 0
42318: PUSH
42319: LD_INT 5
42321: NEG
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 1
42329: PUSH
42330: LD_INT 4
42332: NEG
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 1
42340: PUSH
42341: LD_INT 3
42343: NEG
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 0
42351: PUSH
42352: LD_INT 3
42354: NEG
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 1
42362: NEG
42363: PUSH
42364: LD_INT 4
42366: NEG
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 1
42374: NEG
42375: PUSH
42376: LD_INT 5
42378: NEG
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 2
42386: PUSH
42387: LD_INT 3
42389: NEG
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 2
42397: NEG
42398: PUSH
42399: LD_INT 5
42401: NEG
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 3
42409: PUSH
42410: LD_INT 0
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 3
42419: PUSH
42420: LD_INT 1
42422: NEG
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 4
42430: PUSH
42431: LD_INT 0
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 4
42440: PUSH
42441: LD_INT 1
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 3
42450: PUSH
42451: LD_INT 1
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 2
42460: PUSH
42461: LD_INT 0
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 2
42470: PUSH
42471: LD_INT 1
42473: NEG
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 2
42481: PUSH
42482: LD_INT 2
42484: NEG
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 4
42492: PUSH
42493: LD_INT 2
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 4
42502: PUSH
42503: LD_INT 4
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 4
42512: PUSH
42513: LD_INT 3
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 5
42522: PUSH
42523: LD_INT 4
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 5
42532: PUSH
42533: LD_INT 5
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 4
42542: PUSH
42543: LD_INT 5
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 3
42552: PUSH
42553: LD_INT 4
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 3
42562: PUSH
42563: LD_INT 3
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 5
42572: PUSH
42573: LD_INT 3
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 3
42582: PUSH
42583: LD_INT 5
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 0
42592: PUSH
42593: LD_INT 3
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 0
42602: PUSH
42603: LD_INT 2
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 1
42612: PUSH
42613: LD_INT 3
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 1
42622: PUSH
42623: LD_INT 4
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 0
42632: PUSH
42633: LD_INT 4
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 1
42642: NEG
42643: PUSH
42644: LD_INT 3
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 1
42653: NEG
42654: PUSH
42655: LD_INT 2
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 2
42664: PUSH
42665: LD_INT 4
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 2
42674: NEG
42675: PUSH
42676: LD_INT 2
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 4
42685: NEG
42686: PUSH
42687: LD_INT 0
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 4
42696: NEG
42697: PUSH
42698: LD_INT 1
42700: NEG
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 3
42708: NEG
42709: PUSH
42710: LD_INT 0
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 3
42719: NEG
42720: PUSH
42721: LD_INT 1
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 4
42730: NEG
42731: PUSH
42732: LD_INT 1
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 5
42741: NEG
42742: PUSH
42743: LD_INT 0
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 5
42752: NEG
42753: PUSH
42754: LD_INT 1
42756: NEG
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: LD_INT 5
42764: NEG
42765: PUSH
42766: LD_INT 2
42768: NEG
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 3
42776: NEG
42777: PUSH
42778: LD_INT 2
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: ST_TO_ADDR
// end ; end ;
42832: GO 42835
42834: POP
// case btype of b_depot , b_warehouse :
42835: LD_VAR 0 1
42839: PUSH
42840: LD_INT 0
42842: DOUBLE
42843: EQUAL
42844: IFTRUE 42854
42846: LD_INT 1
42848: DOUBLE
42849: EQUAL
42850: IFTRUE 42854
42852: GO 43055
42854: POP
// case nation of nation_american :
42855: LD_VAR 0 5
42859: PUSH
42860: LD_INT 1
42862: DOUBLE
42863: EQUAL
42864: IFTRUE 42868
42866: GO 42924
42868: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
42869: LD_ADDR_VAR 0 9
42873: PUSH
42874: LD_VAR 0 11
42878: PUSH
42879: LD_VAR 0 12
42883: PUSH
42884: LD_VAR 0 13
42888: PUSH
42889: LD_VAR 0 14
42893: PUSH
42894: LD_VAR 0 15
42898: PUSH
42899: LD_VAR 0 16
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: PUSH
42912: LD_VAR 0 4
42916: PUSH
42917: LD_INT 1
42919: PLUS
42920: ARRAY
42921: ST_TO_ADDR
42922: GO 43053
42924: LD_INT 2
42926: DOUBLE
42927: EQUAL
42928: IFTRUE 42932
42930: GO 42988
42932: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
42933: LD_ADDR_VAR 0 9
42937: PUSH
42938: LD_VAR 0 17
42942: PUSH
42943: LD_VAR 0 18
42947: PUSH
42948: LD_VAR 0 19
42952: PUSH
42953: LD_VAR 0 20
42957: PUSH
42958: LD_VAR 0 21
42962: PUSH
42963: LD_VAR 0 22
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: PUSH
42976: LD_VAR 0 4
42980: PUSH
42981: LD_INT 1
42983: PLUS
42984: ARRAY
42985: ST_TO_ADDR
42986: GO 43053
42988: LD_INT 3
42990: DOUBLE
42991: EQUAL
42992: IFTRUE 42996
42994: GO 43052
42996: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
42997: LD_ADDR_VAR 0 9
43001: PUSH
43002: LD_VAR 0 23
43006: PUSH
43007: LD_VAR 0 24
43011: PUSH
43012: LD_VAR 0 25
43016: PUSH
43017: LD_VAR 0 26
43021: PUSH
43022: LD_VAR 0 27
43026: PUSH
43027: LD_VAR 0 28
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: PUSH
43040: LD_VAR 0 4
43044: PUSH
43045: LD_INT 1
43047: PLUS
43048: ARRAY
43049: ST_TO_ADDR
43050: GO 43053
43052: POP
43053: GO 43602
43055: LD_INT 2
43057: DOUBLE
43058: EQUAL
43059: IFTRUE 43069
43061: LD_INT 3
43063: DOUBLE
43064: EQUAL
43065: IFTRUE 43069
43067: GO 43125
43069: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
43070: LD_ADDR_VAR 0 9
43074: PUSH
43075: LD_VAR 0 29
43079: PUSH
43080: LD_VAR 0 30
43084: PUSH
43085: LD_VAR 0 31
43089: PUSH
43090: LD_VAR 0 32
43094: PUSH
43095: LD_VAR 0 33
43099: PUSH
43100: LD_VAR 0 34
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: PUSH
43113: LD_VAR 0 4
43117: PUSH
43118: LD_INT 1
43120: PLUS
43121: ARRAY
43122: ST_TO_ADDR
43123: GO 43602
43125: LD_INT 16
43127: DOUBLE
43128: EQUAL
43129: IFTRUE 43181
43131: LD_INT 17
43133: DOUBLE
43134: EQUAL
43135: IFTRUE 43181
43137: LD_INT 18
43139: DOUBLE
43140: EQUAL
43141: IFTRUE 43181
43143: LD_INT 19
43145: DOUBLE
43146: EQUAL
43147: IFTRUE 43181
43149: LD_INT 20
43151: DOUBLE
43152: EQUAL
43153: IFTRUE 43181
43155: LD_INT 21
43157: DOUBLE
43158: EQUAL
43159: IFTRUE 43181
43161: LD_INT 23
43163: DOUBLE
43164: EQUAL
43165: IFTRUE 43181
43167: LD_INT 24
43169: DOUBLE
43170: EQUAL
43171: IFTRUE 43181
43173: LD_INT 25
43175: DOUBLE
43176: EQUAL
43177: IFTRUE 43181
43179: GO 43237
43181: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
43182: LD_ADDR_VAR 0 9
43186: PUSH
43187: LD_VAR 0 35
43191: PUSH
43192: LD_VAR 0 36
43196: PUSH
43197: LD_VAR 0 37
43201: PUSH
43202: LD_VAR 0 38
43206: PUSH
43207: LD_VAR 0 39
43211: PUSH
43212: LD_VAR 0 40
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: PUSH
43225: LD_VAR 0 4
43229: PUSH
43230: LD_INT 1
43232: PLUS
43233: ARRAY
43234: ST_TO_ADDR
43235: GO 43602
43237: LD_INT 6
43239: DOUBLE
43240: EQUAL
43241: IFTRUE 43293
43243: LD_INT 7
43245: DOUBLE
43246: EQUAL
43247: IFTRUE 43293
43249: LD_INT 8
43251: DOUBLE
43252: EQUAL
43253: IFTRUE 43293
43255: LD_INT 13
43257: DOUBLE
43258: EQUAL
43259: IFTRUE 43293
43261: LD_INT 12
43263: DOUBLE
43264: EQUAL
43265: IFTRUE 43293
43267: LD_INT 15
43269: DOUBLE
43270: EQUAL
43271: IFTRUE 43293
43273: LD_INT 11
43275: DOUBLE
43276: EQUAL
43277: IFTRUE 43293
43279: LD_INT 14
43281: DOUBLE
43282: EQUAL
43283: IFTRUE 43293
43285: LD_INT 10
43287: DOUBLE
43288: EQUAL
43289: IFTRUE 43293
43291: GO 43349
43293: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
43294: LD_ADDR_VAR 0 9
43298: PUSH
43299: LD_VAR 0 41
43303: PUSH
43304: LD_VAR 0 42
43308: PUSH
43309: LD_VAR 0 43
43313: PUSH
43314: LD_VAR 0 44
43318: PUSH
43319: LD_VAR 0 45
43323: PUSH
43324: LD_VAR 0 46
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: PUSH
43337: LD_VAR 0 4
43341: PUSH
43342: LD_INT 1
43344: PLUS
43345: ARRAY
43346: ST_TO_ADDR
43347: GO 43602
43349: LD_INT 36
43351: DOUBLE
43352: EQUAL
43353: IFTRUE 43357
43355: GO 43413
43357: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
43358: LD_ADDR_VAR 0 9
43362: PUSH
43363: LD_VAR 0 47
43367: PUSH
43368: LD_VAR 0 48
43372: PUSH
43373: LD_VAR 0 49
43377: PUSH
43378: LD_VAR 0 50
43382: PUSH
43383: LD_VAR 0 51
43387: PUSH
43388: LD_VAR 0 52
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: PUSH
43401: LD_VAR 0 4
43405: PUSH
43406: LD_INT 1
43408: PLUS
43409: ARRAY
43410: ST_TO_ADDR
43411: GO 43602
43413: LD_INT 4
43415: DOUBLE
43416: EQUAL
43417: IFTRUE 43439
43419: LD_INT 5
43421: DOUBLE
43422: EQUAL
43423: IFTRUE 43439
43425: LD_INT 34
43427: DOUBLE
43428: EQUAL
43429: IFTRUE 43439
43431: LD_INT 37
43433: DOUBLE
43434: EQUAL
43435: IFTRUE 43439
43437: GO 43495
43439: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
43440: LD_ADDR_VAR 0 9
43444: PUSH
43445: LD_VAR 0 53
43449: PUSH
43450: LD_VAR 0 54
43454: PUSH
43455: LD_VAR 0 55
43459: PUSH
43460: LD_VAR 0 56
43464: PUSH
43465: LD_VAR 0 57
43469: PUSH
43470: LD_VAR 0 58
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: PUSH
43483: LD_VAR 0 4
43487: PUSH
43488: LD_INT 1
43490: PLUS
43491: ARRAY
43492: ST_TO_ADDR
43493: GO 43602
43495: LD_INT 31
43497: DOUBLE
43498: EQUAL
43499: IFTRUE 43545
43501: LD_INT 32
43503: DOUBLE
43504: EQUAL
43505: IFTRUE 43545
43507: LD_INT 33
43509: DOUBLE
43510: EQUAL
43511: IFTRUE 43545
43513: LD_INT 27
43515: DOUBLE
43516: EQUAL
43517: IFTRUE 43545
43519: LD_INT 26
43521: DOUBLE
43522: EQUAL
43523: IFTRUE 43545
43525: LD_INT 28
43527: DOUBLE
43528: EQUAL
43529: IFTRUE 43545
43531: LD_INT 29
43533: DOUBLE
43534: EQUAL
43535: IFTRUE 43545
43537: LD_INT 30
43539: DOUBLE
43540: EQUAL
43541: IFTRUE 43545
43543: GO 43601
43545: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
43546: LD_ADDR_VAR 0 9
43550: PUSH
43551: LD_VAR 0 59
43555: PUSH
43556: LD_VAR 0 60
43560: PUSH
43561: LD_VAR 0 61
43565: PUSH
43566: LD_VAR 0 62
43570: PUSH
43571: LD_VAR 0 63
43575: PUSH
43576: LD_VAR 0 64
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: PUSH
43589: LD_VAR 0 4
43593: PUSH
43594: LD_INT 1
43596: PLUS
43597: ARRAY
43598: ST_TO_ADDR
43599: GO 43602
43601: POP
// temp_list2 = [ ] ;
43602: LD_ADDR_VAR 0 10
43606: PUSH
43607: EMPTY
43608: ST_TO_ADDR
// for i in temp_list do
43609: LD_ADDR_VAR 0 8
43613: PUSH
43614: LD_VAR 0 9
43618: PUSH
43619: FOR_IN
43620: IFFALSE 43672
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
43622: LD_ADDR_VAR 0 10
43626: PUSH
43627: LD_VAR 0 10
43631: PUSH
43632: LD_VAR 0 8
43636: PUSH
43637: LD_INT 1
43639: ARRAY
43640: PUSH
43641: LD_VAR 0 2
43645: PLUS
43646: PUSH
43647: LD_VAR 0 8
43651: PUSH
43652: LD_INT 2
43654: ARRAY
43655: PUSH
43656: LD_VAR 0 3
43660: PLUS
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: EMPTY
43667: LIST
43668: ADD
43669: ST_TO_ADDR
43670: GO 43619
43672: POP
43673: POP
// result = temp_list2 ;
43674: LD_ADDR_VAR 0 7
43678: PUSH
43679: LD_VAR 0 10
43683: ST_TO_ADDR
// end ;
43684: LD_VAR 0 7
43688: RET
// export function EnemyInRange ( unit , dist ) ; begin
43689: LD_INT 0
43691: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
43692: LD_ADDR_VAR 0 3
43696: PUSH
43697: LD_VAR 0 1
43701: PPUSH
43702: CALL_OW 255
43706: PPUSH
43707: LD_VAR 0 1
43711: PPUSH
43712: CALL_OW 250
43716: PPUSH
43717: LD_VAR 0 1
43721: PPUSH
43722: CALL_OW 251
43726: PPUSH
43727: LD_VAR 0 2
43731: PPUSH
43732: CALL 17817 0 4
43736: PUSH
43737: LD_INT 4
43739: ARRAY
43740: ST_TO_ADDR
// end ;
43741: LD_VAR 0 3
43745: RET
// export function PlayerSeeMe ( unit ) ; begin
43746: LD_INT 0
43748: PPUSH
// result := See ( your_side , unit ) ;
43749: LD_ADDR_VAR 0 2
43753: PUSH
43754: LD_OWVAR 2
43758: PPUSH
43759: LD_VAR 0 1
43763: PPUSH
43764: CALL_OW 292
43768: ST_TO_ADDR
// end ;
43769: LD_VAR 0 2
43773: RET
// export function ReverseDir ( unit ) ; begin
43774: LD_INT 0
43776: PPUSH
// if not unit then
43777: LD_VAR 0 1
43781: NOT
43782: IFFALSE 43786
// exit ;
43784: GO 43832
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
43786: LD_ADDR_VAR 0 2
43790: PUSH
43791: LD_INT 3
43793: PUSH
43794: LD_INT 4
43796: PUSH
43797: LD_INT 5
43799: PUSH
43800: LD_INT 0
43802: PUSH
43803: LD_INT 1
43805: PUSH
43806: LD_INT 2
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: PUSH
43817: LD_VAR 0 1
43821: PPUSH
43822: CALL_OW 254
43826: PUSH
43827: LD_INT 1
43829: PLUS
43830: ARRAY
43831: ST_TO_ADDR
// end ;
43832: LD_VAR 0 2
43836: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
43837: LD_INT 0
43839: PPUSH
43840: PPUSH
43841: PPUSH
43842: PPUSH
43843: PPUSH
// if not hexes then
43844: LD_VAR 0 2
43848: NOT
43849: IFFALSE 43853
// exit ;
43851: GO 44001
// dist := 9999 ;
43853: LD_ADDR_VAR 0 5
43857: PUSH
43858: LD_INT 9999
43860: ST_TO_ADDR
// for i = 1 to hexes do
43861: LD_ADDR_VAR 0 4
43865: PUSH
43866: DOUBLE
43867: LD_INT 1
43869: DEC
43870: ST_TO_ADDR
43871: LD_VAR 0 2
43875: PUSH
43876: FOR_TO
43877: IFFALSE 43989
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
43879: LD_VAR 0 1
43883: PPUSH
43884: LD_VAR 0 2
43888: PUSH
43889: LD_VAR 0 4
43893: ARRAY
43894: PUSH
43895: LD_INT 1
43897: ARRAY
43898: PPUSH
43899: LD_VAR 0 2
43903: PUSH
43904: LD_VAR 0 4
43908: ARRAY
43909: PUSH
43910: LD_INT 2
43912: ARRAY
43913: PPUSH
43914: CALL_OW 297
43918: PUSH
43919: LD_VAR 0 5
43923: LESS
43924: IFFALSE 43987
// begin hex := hexes [ i ] ;
43926: LD_ADDR_VAR 0 7
43930: PUSH
43931: LD_VAR 0 2
43935: PUSH
43936: LD_VAR 0 4
43940: ARRAY
43941: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43942: LD_ADDR_VAR 0 5
43946: PUSH
43947: LD_VAR 0 1
43951: PPUSH
43952: LD_VAR 0 2
43956: PUSH
43957: LD_VAR 0 4
43961: ARRAY
43962: PUSH
43963: LD_INT 1
43965: ARRAY
43966: PPUSH
43967: LD_VAR 0 2
43971: PUSH
43972: LD_VAR 0 4
43976: ARRAY
43977: PUSH
43978: LD_INT 2
43980: ARRAY
43981: PPUSH
43982: CALL_OW 297
43986: ST_TO_ADDR
// end ; end ;
43987: GO 43876
43989: POP
43990: POP
// result := hex ;
43991: LD_ADDR_VAR 0 3
43995: PUSH
43996: LD_VAR 0 7
44000: ST_TO_ADDR
// end ;
44001: LD_VAR 0 3
44005: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
44006: LD_INT 0
44008: PPUSH
44009: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
44010: LD_VAR 0 1
44014: NOT
44015: PUSH
44016: LD_VAR 0 1
44020: PUSH
44021: LD_INT 21
44023: PUSH
44024: LD_INT 2
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 23
44033: PUSH
44034: LD_INT 2
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PPUSH
44045: CALL_OW 69
44049: IN
44050: NOT
44051: OR
44052: IFFALSE 44056
// exit ;
44054: GO 44103
// for i = 1 to 3 do
44056: LD_ADDR_VAR 0 3
44060: PUSH
44061: DOUBLE
44062: LD_INT 1
44064: DEC
44065: ST_TO_ADDR
44066: LD_INT 3
44068: PUSH
44069: FOR_TO
44070: IFFALSE 44101
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
44072: LD_VAR 0 1
44076: PPUSH
44077: CALL_OW 250
44081: PPUSH
44082: LD_VAR 0 1
44086: PPUSH
44087: CALL_OW 251
44091: PPUSH
44092: LD_INT 1
44094: PPUSH
44095: CALL_OW 453
44099: GO 44069
44101: POP
44102: POP
// end ;
44103: LD_VAR 0 2
44107: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
44108: LD_INT 0
44110: PPUSH
44111: PPUSH
44112: PPUSH
44113: PPUSH
44114: PPUSH
44115: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
44116: LD_VAR 0 1
44120: NOT
44121: PUSH
44122: LD_VAR 0 2
44126: NOT
44127: OR
44128: PUSH
44129: LD_VAR 0 1
44133: PPUSH
44134: CALL_OW 314
44138: OR
44139: IFFALSE 44143
// exit ;
44141: GO 44584
// x := GetX ( enemy_unit ) ;
44143: LD_ADDR_VAR 0 7
44147: PUSH
44148: LD_VAR 0 2
44152: PPUSH
44153: CALL_OW 250
44157: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
44158: LD_ADDR_VAR 0 8
44162: PUSH
44163: LD_VAR 0 2
44167: PPUSH
44168: CALL_OW 251
44172: ST_TO_ADDR
// if not x or not y then
44173: LD_VAR 0 7
44177: NOT
44178: PUSH
44179: LD_VAR 0 8
44183: NOT
44184: OR
44185: IFFALSE 44189
// exit ;
44187: GO 44584
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
44189: LD_ADDR_VAR 0 6
44193: PUSH
44194: LD_VAR 0 7
44198: PPUSH
44199: LD_INT 0
44201: PPUSH
44202: LD_INT 4
44204: PPUSH
44205: CALL_OW 272
44209: PUSH
44210: LD_VAR 0 8
44214: PPUSH
44215: LD_INT 0
44217: PPUSH
44218: LD_INT 4
44220: PPUSH
44221: CALL_OW 273
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_VAR 0 7
44234: PPUSH
44235: LD_INT 1
44237: PPUSH
44238: LD_INT 4
44240: PPUSH
44241: CALL_OW 272
44245: PUSH
44246: LD_VAR 0 8
44250: PPUSH
44251: LD_INT 1
44253: PPUSH
44254: LD_INT 4
44256: PPUSH
44257: CALL_OW 273
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_VAR 0 7
44270: PPUSH
44271: LD_INT 2
44273: PPUSH
44274: LD_INT 4
44276: PPUSH
44277: CALL_OW 272
44281: PUSH
44282: LD_VAR 0 8
44286: PPUSH
44287: LD_INT 2
44289: PPUSH
44290: LD_INT 4
44292: PPUSH
44293: CALL_OW 273
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_VAR 0 7
44306: PPUSH
44307: LD_INT 3
44309: PPUSH
44310: LD_INT 4
44312: PPUSH
44313: CALL_OW 272
44317: PUSH
44318: LD_VAR 0 8
44322: PPUSH
44323: LD_INT 3
44325: PPUSH
44326: LD_INT 4
44328: PPUSH
44329: CALL_OW 273
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_VAR 0 7
44342: PPUSH
44343: LD_INT 4
44345: PPUSH
44346: LD_INT 4
44348: PPUSH
44349: CALL_OW 272
44353: PUSH
44354: LD_VAR 0 8
44358: PPUSH
44359: LD_INT 4
44361: PPUSH
44362: LD_INT 4
44364: PPUSH
44365: CALL_OW 273
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_VAR 0 7
44378: PPUSH
44379: LD_INT 5
44381: PPUSH
44382: LD_INT 4
44384: PPUSH
44385: CALL_OW 272
44389: PUSH
44390: LD_VAR 0 8
44394: PPUSH
44395: LD_INT 5
44397: PPUSH
44398: LD_INT 4
44400: PPUSH
44401: CALL_OW 273
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: ST_TO_ADDR
// for i = tmp downto 1 do
44418: LD_ADDR_VAR 0 4
44422: PUSH
44423: DOUBLE
44424: LD_VAR 0 6
44428: INC
44429: ST_TO_ADDR
44430: LD_INT 1
44432: PUSH
44433: FOR_DOWNTO
44434: IFFALSE 44535
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
44436: LD_VAR 0 6
44440: PUSH
44441: LD_VAR 0 4
44445: ARRAY
44446: PUSH
44447: LD_INT 1
44449: ARRAY
44450: PPUSH
44451: LD_VAR 0 6
44455: PUSH
44456: LD_VAR 0 4
44460: ARRAY
44461: PUSH
44462: LD_INT 2
44464: ARRAY
44465: PPUSH
44466: CALL_OW 488
44470: NOT
44471: PUSH
44472: LD_VAR 0 6
44476: PUSH
44477: LD_VAR 0 4
44481: ARRAY
44482: PUSH
44483: LD_INT 1
44485: ARRAY
44486: PPUSH
44487: LD_VAR 0 6
44491: PUSH
44492: LD_VAR 0 4
44496: ARRAY
44497: PUSH
44498: LD_INT 2
44500: ARRAY
44501: PPUSH
44502: CALL_OW 428
44506: PUSH
44507: LD_INT 0
44509: NONEQUAL
44510: OR
44511: IFFALSE 44533
// tmp := Delete ( tmp , i ) ;
44513: LD_ADDR_VAR 0 6
44517: PUSH
44518: LD_VAR 0 6
44522: PPUSH
44523: LD_VAR 0 4
44527: PPUSH
44528: CALL_OW 3
44532: ST_TO_ADDR
44533: GO 44433
44535: POP
44536: POP
// j := GetClosestHex ( unit , tmp ) ;
44537: LD_ADDR_VAR 0 5
44541: PUSH
44542: LD_VAR 0 1
44546: PPUSH
44547: LD_VAR 0 6
44551: PPUSH
44552: CALL 43837 0 2
44556: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
44557: LD_VAR 0 1
44561: PPUSH
44562: LD_VAR 0 5
44566: PUSH
44567: LD_INT 1
44569: ARRAY
44570: PPUSH
44571: LD_VAR 0 5
44575: PUSH
44576: LD_INT 2
44578: ARRAY
44579: PPUSH
44580: CALL_OW 111
// end ;
44584: LD_VAR 0 3
44588: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
44589: LD_INT 0
44591: PPUSH
44592: PPUSH
44593: PPUSH
// uc_side = 0 ;
44594: LD_ADDR_OWVAR 20
44598: PUSH
44599: LD_INT 0
44601: ST_TO_ADDR
// uc_nation = 0 ;
44602: LD_ADDR_OWVAR 21
44606: PUSH
44607: LD_INT 0
44609: ST_TO_ADDR
// InitHc ;
44610: CALL_OW 19
// InitVc ;
44614: CALL_OW 20
// if mastodonts then
44618: LD_VAR 0 6
44622: IFFALSE 44689
// for i = 1 to mastodonts do
44624: LD_ADDR_VAR 0 11
44628: PUSH
44629: DOUBLE
44630: LD_INT 1
44632: DEC
44633: ST_TO_ADDR
44634: LD_VAR 0 6
44638: PUSH
44639: FOR_TO
44640: IFFALSE 44687
// begin vc_chassis := 31 ;
44642: LD_ADDR_OWVAR 37
44646: PUSH
44647: LD_INT 31
44649: ST_TO_ADDR
// vc_control := control_rider ;
44650: LD_ADDR_OWVAR 38
44654: PUSH
44655: LD_INT 4
44657: ST_TO_ADDR
// animal := CreateVehicle ;
44658: LD_ADDR_VAR 0 12
44662: PUSH
44663: CALL_OW 45
44667: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44668: LD_VAR 0 12
44672: PPUSH
44673: LD_VAR 0 8
44677: PPUSH
44678: LD_INT 0
44680: PPUSH
44681: CALL 51434 0 3
// end ;
44685: GO 44639
44687: POP
44688: POP
// if horses then
44689: LD_VAR 0 5
44693: IFFALSE 44760
// for i = 1 to horses do
44695: LD_ADDR_VAR 0 11
44699: PUSH
44700: DOUBLE
44701: LD_INT 1
44703: DEC
44704: ST_TO_ADDR
44705: LD_VAR 0 5
44709: PUSH
44710: FOR_TO
44711: IFFALSE 44758
// begin hc_class := 21 ;
44713: LD_ADDR_OWVAR 28
44717: PUSH
44718: LD_INT 21
44720: ST_TO_ADDR
// hc_gallery :=  ;
44721: LD_ADDR_OWVAR 33
44725: PUSH
44726: LD_STRING 
44728: ST_TO_ADDR
// animal := CreateHuman ;
44729: LD_ADDR_VAR 0 12
44733: PUSH
44734: CALL_OW 44
44738: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44739: LD_VAR 0 12
44743: PPUSH
44744: LD_VAR 0 8
44748: PPUSH
44749: LD_INT 0
44751: PPUSH
44752: CALL 51434 0 3
// end ;
44756: GO 44710
44758: POP
44759: POP
// if birds then
44760: LD_VAR 0 1
44764: IFFALSE 44831
// for i = 1 to birds do
44766: LD_ADDR_VAR 0 11
44770: PUSH
44771: DOUBLE
44772: LD_INT 1
44774: DEC
44775: ST_TO_ADDR
44776: LD_VAR 0 1
44780: PUSH
44781: FOR_TO
44782: IFFALSE 44829
// begin hc_class = 18 ;
44784: LD_ADDR_OWVAR 28
44788: PUSH
44789: LD_INT 18
44791: ST_TO_ADDR
// hc_gallery =  ;
44792: LD_ADDR_OWVAR 33
44796: PUSH
44797: LD_STRING 
44799: ST_TO_ADDR
// animal := CreateHuman ;
44800: LD_ADDR_VAR 0 12
44804: PUSH
44805: CALL_OW 44
44809: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44810: LD_VAR 0 12
44814: PPUSH
44815: LD_VAR 0 8
44819: PPUSH
44820: LD_INT 0
44822: PPUSH
44823: CALL 51434 0 3
// end ;
44827: GO 44781
44829: POP
44830: POP
// if tigers then
44831: LD_VAR 0 2
44835: IFFALSE 44919
// for i = 1 to tigers do
44837: LD_ADDR_VAR 0 11
44841: PUSH
44842: DOUBLE
44843: LD_INT 1
44845: DEC
44846: ST_TO_ADDR
44847: LD_VAR 0 2
44851: PUSH
44852: FOR_TO
44853: IFFALSE 44917
// begin hc_class = class_tiger ;
44855: LD_ADDR_OWVAR 28
44859: PUSH
44860: LD_INT 14
44862: ST_TO_ADDR
// hc_gallery =  ;
44863: LD_ADDR_OWVAR 33
44867: PUSH
44868: LD_STRING 
44870: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
44871: LD_ADDR_OWVAR 35
44875: PUSH
44876: LD_INT 7
44878: NEG
44879: PPUSH
44880: LD_INT 7
44882: PPUSH
44883: CALL_OW 12
44887: ST_TO_ADDR
// animal := CreateHuman ;
44888: LD_ADDR_VAR 0 12
44892: PUSH
44893: CALL_OW 44
44897: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44898: LD_VAR 0 12
44902: PPUSH
44903: LD_VAR 0 8
44907: PPUSH
44908: LD_INT 0
44910: PPUSH
44911: CALL 51434 0 3
// end ;
44915: GO 44852
44917: POP
44918: POP
// if apemans then
44919: LD_VAR 0 3
44923: IFFALSE 45046
// for i = 1 to apemans do
44925: LD_ADDR_VAR 0 11
44929: PUSH
44930: DOUBLE
44931: LD_INT 1
44933: DEC
44934: ST_TO_ADDR
44935: LD_VAR 0 3
44939: PUSH
44940: FOR_TO
44941: IFFALSE 45044
// begin hc_class = class_apeman ;
44943: LD_ADDR_OWVAR 28
44947: PUSH
44948: LD_INT 12
44950: ST_TO_ADDR
// hc_gallery =  ;
44951: LD_ADDR_OWVAR 33
44955: PUSH
44956: LD_STRING 
44958: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
44959: LD_ADDR_OWVAR 35
44963: PUSH
44964: LD_INT 5
44966: NEG
44967: PPUSH
44968: LD_INT 5
44970: PPUSH
44971: CALL_OW 12
44975: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
44976: LD_ADDR_OWVAR 31
44980: PUSH
44981: LD_INT 1
44983: PPUSH
44984: LD_INT 3
44986: PPUSH
44987: CALL_OW 12
44991: PUSH
44992: LD_INT 1
44994: PPUSH
44995: LD_INT 3
44997: PPUSH
44998: CALL_OW 12
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: LD_INT 0
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: ST_TO_ADDR
// animal := CreateHuman ;
45015: LD_ADDR_VAR 0 12
45019: PUSH
45020: CALL_OW 44
45024: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45025: LD_VAR 0 12
45029: PPUSH
45030: LD_VAR 0 8
45034: PPUSH
45035: LD_INT 0
45037: PPUSH
45038: CALL 51434 0 3
// end ;
45042: GO 44940
45044: POP
45045: POP
// if enchidnas then
45046: LD_VAR 0 4
45050: IFFALSE 45117
// for i = 1 to enchidnas do
45052: LD_ADDR_VAR 0 11
45056: PUSH
45057: DOUBLE
45058: LD_INT 1
45060: DEC
45061: ST_TO_ADDR
45062: LD_VAR 0 4
45066: PUSH
45067: FOR_TO
45068: IFFALSE 45115
// begin hc_class = 13 ;
45070: LD_ADDR_OWVAR 28
45074: PUSH
45075: LD_INT 13
45077: ST_TO_ADDR
// hc_gallery =  ;
45078: LD_ADDR_OWVAR 33
45082: PUSH
45083: LD_STRING 
45085: ST_TO_ADDR
// animal := CreateHuman ;
45086: LD_ADDR_VAR 0 12
45090: PUSH
45091: CALL_OW 44
45095: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45096: LD_VAR 0 12
45100: PPUSH
45101: LD_VAR 0 8
45105: PPUSH
45106: LD_INT 0
45108: PPUSH
45109: CALL 51434 0 3
// end ;
45113: GO 45067
45115: POP
45116: POP
// if fishes then
45117: LD_VAR 0 7
45121: IFFALSE 45188
// for i = 1 to fishes do
45123: LD_ADDR_VAR 0 11
45127: PUSH
45128: DOUBLE
45129: LD_INT 1
45131: DEC
45132: ST_TO_ADDR
45133: LD_VAR 0 7
45137: PUSH
45138: FOR_TO
45139: IFFALSE 45186
// begin hc_class = 20 ;
45141: LD_ADDR_OWVAR 28
45145: PUSH
45146: LD_INT 20
45148: ST_TO_ADDR
// hc_gallery =  ;
45149: LD_ADDR_OWVAR 33
45153: PUSH
45154: LD_STRING 
45156: ST_TO_ADDR
// animal := CreateHuman ;
45157: LD_ADDR_VAR 0 12
45161: PUSH
45162: CALL_OW 44
45166: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
45167: LD_VAR 0 12
45171: PPUSH
45172: LD_VAR 0 9
45176: PPUSH
45177: LD_INT 0
45179: PPUSH
45180: CALL 51434 0 3
// end ;
45184: GO 45138
45186: POP
45187: POP
// end ;
45188: LD_VAR 0 10
45192: RET
// export function WantHeal ( sci , unit ) ; begin
45193: LD_INT 0
45195: PPUSH
// if GetTaskList ( sci ) > 0 then
45196: LD_VAR 0 1
45200: PPUSH
45201: CALL_OW 437
45205: PUSH
45206: LD_INT 0
45208: GREATER
45209: IFFALSE 45279
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45211: LD_VAR 0 1
45215: PPUSH
45216: CALL_OW 437
45220: PUSH
45221: LD_INT 1
45223: ARRAY
45224: PUSH
45225: LD_INT 1
45227: ARRAY
45228: PUSH
45229: LD_STRING l
45231: EQUAL
45232: PUSH
45233: LD_VAR 0 1
45237: PPUSH
45238: CALL_OW 437
45242: PUSH
45243: LD_INT 1
45245: ARRAY
45246: PUSH
45247: LD_INT 4
45249: ARRAY
45250: PUSH
45251: LD_VAR 0 2
45255: EQUAL
45256: AND
45257: IFFALSE 45269
// result := true else
45259: LD_ADDR_VAR 0 3
45263: PUSH
45264: LD_INT 1
45266: ST_TO_ADDR
45267: GO 45277
// result := false ;
45269: LD_ADDR_VAR 0 3
45273: PUSH
45274: LD_INT 0
45276: ST_TO_ADDR
// end else
45277: GO 45287
// result := false ;
45279: LD_ADDR_VAR 0 3
45283: PUSH
45284: LD_INT 0
45286: ST_TO_ADDR
// end ;
45287: LD_VAR 0 3
45291: RET
// export function HealTarget ( sci ) ; begin
45292: LD_INT 0
45294: PPUSH
// if not sci then
45295: LD_VAR 0 1
45299: NOT
45300: IFFALSE 45304
// exit ;
45302: GO 45369
// result := 0 ;
45304: LD_ADDR_VAR 0 2
45308: PUSH
45309: LD_INT 0
45311: ST_TO_ADDR
// if GetTaskList ( sci ) then
45312: LD_VAR 0 1
45316: PPUSH
45317: CALL_OW 437
45321: IFFALSE 45369
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45323: LD_VAR 0 1
45327: PPUSH
45328: CALL_OW 437
45332: PUSH
45333: LD_INT 1
45335: ARRAY
45336: PUSH
45337: LD_INT 1
45339: ARRAY
45340: PUSH
45341: LD_STRING l
45343: EQUAL
45344: IFFALSE 45369
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45346: LD_ADDR_VAR 0 2
45350: PUSH
45351: LD_VAR 0 1
45355: PPUSH
45356: CALL_OW 437
45360: PUSH
45361: LD_INT 1
45363: ARRAY
45364: PUSH
45365: LD_INT 4
45367: ARRAY
45368: ST_TO_ADDR
// end ;
45369: LD_VAR 0 2
45373: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
45374: LD_INT 0
45376: PPUSH
45377: PPUSH
45378: PPUSH
45379: PPUSH
45380: PPUSH
45381: PPUSH
45382: PPUSH
45383: PPUSH
45384: PPUSH
45385: PPUSH
45386: PPUSH
45387: PPUSH
45388: PPUSH
45389: PPUSH
45390: PPUSH
45391: PPUSH
45392: PPUSH
45393: PPUSH
45394: PPUSH
45395: PPUSH
45396: PPUSH
45397: PPUSH
45398: PPUSH
45399: PPUSH
45400: PPUSH
45401: PPUSH
45402: PPUSH
45403: PPUSH
45404: PPUSH
45405: PPUSH
45406: PPUSH
45407: PPUSH
45408: PPUSH
45409: PPUSH
// if not list then
45410: LD_VAR 0 1
45414: NOT
45415: IFFALSE 45419
// exit ;
45417: GO 50045
// base := list [ 1 ] ;
45419: LD_ADDR_VAR 0 3
45423: PUSH
45424: LD_VAR 0 1
45428: PUSH
45429: LD_INT 1
45431: ARRAY
45432: ST_TO_ADDR
// group := list [ 2 ] ;
45433: LD_ADDR_VAR 0 4
45437: PUSH
45438: LD_VAR 0 1
45442: PUSH
45443: LD_INT 2
45445: ARRAY
45446: ST_TO_ADDR
// path := list [ 3 ] ;
45447: LD_ADDR_VAR 0 5
45451: PUSH
45452: LD_VAR 0 1
45456: PUSH
45457: LD_INT 3
45459: ARRAY
45460: ST_TO_ADDR
// flags := list [ 4 ] ;
45461: LD_ADDR_VAR 0 6
45465: PUSH
45466: LD_VAR 0 1
45470: PUSH
45471: LD_INT 4
45473: ARRAY
45474: ST_TO_ADDR
// mined := [ ] ;
45475: LD_ADDR_VAR 0 27
45479: PUSH
45480: EMPTY
45481: ST_TO_ADDR
// bombed := [ ] ;
45482: LD_ADDR_VAR 0 28
45486: PUSH
45487: EMPTY
45488: ST_TO_ADDR
// healers := [ ] ;
45489: LD_ADDR_VAR 0 31
45493: PUSH
45494: EMPTY
45495: ST_TO_ADDR
// to_heal := [ ] ;
45496: LD_ADDR_VAR 0 30
45500: PUSH
45501: EMPTY
45502: ST_TO_ADDR
// repairs := [ ] ;
45503: LD_ADDR_VAR 0 33
45507: PUSH
45508: EMPTY
45509: ST_TO_ADDR
// to_repair := [ ] ;
45510: LD_ADDR_VAR 0 32
45514: PUSH
45515: EMPTY
45516: ST_TO_ADDR
// if not group or not path then
45517: LD_VAR 0 4
45521: NOT
45522: PUSH
45523: LD_VAR 0 5
45527: NOT
45528: OR
45529: IFFALSE 45533
// exit ;
45531: GO 50045
// side := GetSide ( group [ 1 ] ) ;
45533: LD_ADDR_VAR 0 35
45537: PUSH
45538: LD_VAR 0 4
45542: PUSH
45543: LD_INT 1
45545: ARRAY
45546: PPUSH
45547: CALL_OW 255
45551: ST_TO_ADDR
// if flags then
45552: LD_VAR 0 6
45556: IFFALSE 45700
// begin f_ignore_area := flags [ 1 ] ;
45558: LD_ADDR_VAR 0 17
45562: PUSH
45563: LD_VAR 0 6
45567: PUSH
45568: LD_INT 1
45570: ARRAY
45571: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
45572: LD_ADDR_VAR 0 18
45576: PUSH
45577: LD_VAR 0 6
45581: PUSH
45582: LD_INT 2
45584: ARRAY
45585: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
45586: LD_ADDR_VAR 0 19
45590: PUSH
45591: LD_VAR 0 6
45595: PUSH
45596: LD_INT 3
45598: ARRAY
45599: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
45600: LD_ADDR_VAR 0 20
45604: PUSH
45605: LD_VAR 0 6
45609: PUSH
45610: LD_INT 4
45612: ARRAY
45613: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
45614: LD_ADDR_VAR 0 21
45618: PUSH
45619: LD_VAR 0 6
45623: PUSH
45624: LD_INT 5
45626: ARRAY
45627: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
45628: LD_ADDR_VAR 0 22
45632: PUSH
45633: LD_VAR 0 6
45637: PUSH
45638: LD_INT 6
45640: ARRAY
45641: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
45642: LD_ADDR_VAR 0 23
45646: PUSH
45647: LD_VAR 0 6
45651: PUSH
45652: LD_INT 7
45654: ARRAY
45655: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
45656: LD_ADDR_VAR 0 24
45660: PUSH
45661: LD_VAR 0 6
45665: PUSH
45666: LD_INT 8
45668: ARRAY
45669: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
45670: LD_ADDR_VAR 0 25
45674: PUSH
45675: LD_VAR 0 6
45679: PUSH
45680: LD_INT 9
45682: ARRAY
45683: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
45684: LD_ADDR_VAR 0 26
45688: PUSH
45689: LD_VAR 0 6
45693: PUSH
45694: LD_INT 10
45696: ARRAY
45697: ST_TO_ADDR
// end else
45698: GO 45780
// begin f_ignore_area := false ;
45700: LD_ADDR_VAR 0 17
45704: PUSH
45705: LD_INT 0
45707: ST_TO_ADDR
// f_capture := false ;
45708: LD_ADDR_VAR 0 18
45712: PUSH
45713: LD_INT 0
45715: ST_TO_ADDR
// f_ignore_civ := false ;
45716: LD_ADDR_VAR 0 19
45720: PUSH
45721: LD_INT 0
45723: ST_TO_ADDR
// f_murder := false ;
45724: LD_ADDR_VAR 0 20
45728: PUSH
45729: LD_INT 0
45731: ST_TO_ADDR
// f_mines := false ;
45732: LD_ADDR_VAR 0 21
45736: PUSH
45737: LD_INT 0
45739: ST_TO_ADDR
// f_repair := false ;
45740: LD_ADDR_VAR 0 22
45744: PUSH
45745: LD_INT 0
45747: ST_TO_ADDR
// f_heal := false ;
45748: LD_ADDR_VAR 0 23
45752: PUSH
45753: LD_INT 0
45755: ST_TO_ADDR
// f_spacetime := false ;
45756: LD_ADDR_VAR 0 24
45760: PUSH
45761: LD_INT 0
45763: ST_TO_ADDR
// f_attack_depot := false ;
45764: LD_ADDR_VAR 0 25
45768: PUSH
45769: LD_INT 0
45771: ST_TO_ADDR
// f_crawl := false ;
45772: LD_ADDR_VAR 0 26
45776: PUSH
45777: LD_INT 0
45779: ST_TO_ADDR
// end ; if f_heal then
45780: LD_VAR 0 23
45784: IFFALSE 45811
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
45786: LD_ADDR_VAR 0 31
45790: PUSH
45791: LD_VAR 0 4
45795: PPUSH
45796: LD_INT 25
45798: PUSH
45799: LD_INT 4
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PPUSH
45806: CALL_OW 72
45810: ST_TO_ADDR
// if f_repair then
45811: LD_VAR 0 22
45815: IFFALSE 45842
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
45817: LD_ADDR_VAR 0 33
45821: PUSH
45822: LD_VAR 0 4
45826: PPUSH
45827: LD_INT 25
45829: PUSH
45830: LD_INT 3
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PPUSH
45837: CALL_OW 72
45841: ST_TO_ADDR
// units_path := [ ] ;
45842: LD_ADDR_VAR 0 16
45846: PUSH
45847: EMPTY
45848: ST_TO_ADDR
// for i = 1 to group do
45849: LD_ADDR_VAR 0 7
45853: PUSH
45854: DOUBLE
45855: LD_INT 1
45857: DEC
45858: ST_TO_ADDR
45859: LD_VAR 0 4
45863: PUSH
45864: FOR_TO
45865: IFFALSE 45894
// units_path := Replace ( units_path , i , path ) ;
45867: LD_ADDR_VAR 0 16
45871: PUSH
45872: LD_VAR 0 16
45876: PPUSH
45877: LD_VAR 0 7
45881: PPUSH
45882: LD_VAR 0 5
45886: PPUSH
45887: CALL_OW 1
45891: ST_TO_ADDR
45892: GO 45864
45894: POP
45895: POP
// repeat for i = group downto 1 do
45896: LD_ADDR_VAR 0 7
45900: PUSH
45901: DOUBLE
45902: LD_VAR 0 4
45906: INC
45907: ST_TO_ADDR
45908: LD_INT 1
45910: PUSH
45911: FOR_DOWNTO
45912: IFFALSE 50008
// begin wait ( 5 ) ;
45914: LD_INT 5
45916: PPUSH
45917: CALL_OW 67
// tmp := [ ] ;
45921: LD_ADDR_VAR 0 14
45925: PUSH
45926: EMPTY
45927: ST_TO_ADDR
// attacking := false ;
45928: LD_ADDR_VAR 0 29
45932: PUSH
45933: LD_INT 0
45935: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
45936: LD_VAR 0 4
45940: PUSH
45941: LD_VAR 0 7
45945: ARRAY
45946: PPUSH
45947: CALL_OW 301
45951: PUSH
45952: LD_VAR 0 4
45956: PUSH
45957: LD_VAR 0 7
45961: ARRAY
45962: NOT
45963: OR
45964: IFFALSE 46073
// begin if GetType ( group [ i ] ) = unit_human then
45966: LD_VAR 0 4
45970: PUSH
45971: LD_VAR 0 7
45975: ARRAY
45976: PPUSH
45977: CALL_OW 247
45981: PUSH
45982: LD_INT 1
45984: EQUAL
45985: IFFALSE 46031
// begin to_heal := to_heal diff group [ i ] ;
45987: LD_ADDR_VAR 0 30
45991: PUSH
45992: LD_VAR 0 30
45996: PUSH
45997: LD_VAR 0 4
46001: PUSH
46002: LD_VAR 0 7
46006: ARRAY
46007: DIFF
46008: ST_TO_ADDR
// healers := healers diff group [ i ] ;
46009: LD_ADDR_VAR 0 31
46013: PUSH
46014: LD_VAR 0 31
46018: PUSH
46019: LD_VAR 0 4
46023: PUSH
46024: LD_VAR 0 7
46028: ARRAY
46029: DIFF
46030: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
46031: LD_ADDR_VAR 0 4
46035: PUSH
46036: LD_VAR 0 4
46040: PPUSH
46041: LD_VAR 0 7
46045: PPUSH
46046: CALL_OW 3
46050: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
46051: LD_ADDR_VAR 0 16
46055: PUSH
46056: LD_VAR 0 16
46060: PPUSH
46061: LD_VAR 0 7
46065: PPUSH
46066: CALL_OW 3
46070: ST_TO_ADDR
// continue ;
46071: GO 45911
// end ; if f_repair then
46073: LD_VAR 0 22
46077: IFFALSE 46566
// begin if GetType ( group [ i ] ) = unit_vehicle then
46079: LD_VAR 0 4
46083: PUSH
46084: LD_VAR 0 7
46088: ARRAY
46089: PPUSH
46090: CALL_OW 247
46094: PUSH
46095: LD_INT 2
46097: EQUAL
46098: IFFALSE 46288
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
46100: LD_VAR 0 4
46104: PUSH
46105: LD_VAR 0 7
46109: ARRAY
46110: PPUSH
46111: CALL_OW 256
46115: PUSH
46116: LD_INT 700
46118: LESS
46119: PUSH
46120: LD_VAR 0 4
46124: PUSH
46125: LD_VAR 0 7
46129: ARRAY
46130: PUSH
46131: LD_VAR 0 32
46135: IN
46136: NOT
46137: AND
46138: IFFALSE 46162
// to_repair := to_repair union group [ i ] ;
46140: LD_ADDR_VAR 0 32
46144: PUSH
46145: LD_VAR 0 32
46149: PUSH
46150: LD_VAR 0 4
46154: PUSH
46155: LD_VAR 0 7
46159: ARRAY
46160: UNION
46161: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
46162: LD_VAR 0 4
46166: PUSH
46167: LD_VAR 0 7
46171: ARRAY
46172: PPUSH
46173: CALL_OW 256
46177: PUSH
46178: LD_INT 1000
46180: EQUAL
46181: PUSH
46182: LD_VAR 0 4
46186: PUSH
46187: LD_VAR 0 7
46191: ARRAY
46192: PUSH
46193: LD_VAR 0 32
46197: IN
46198: AND
46199: IFFALSE 46223
// to_repair := to_repair diff group [ i ] ;
46201: LD_ADDR_VAR 0 32
46205: PUSH
46206: LD_VAR 0 32
46210: PUSH
46211: LD_VAR 0 4
46215: PUSH
46216: LD_VAR 0 7
46220: ARRAY
46221: DIFF
46222: ST_TO_ADDR
// if group [ i ] in to_repair then
46223: LD_VAR 0 4
46227: PUSH
46228: LD_VAR 0 7
46232: ARRAY
46233: PUSH
46234: LD_VAR 0 32
46238: IN
46239: IFFALSE 46286
// begin if not IsInArea ( group [ i ] , f_repair ) then
46241: LD_VAR 0 4
46245: PUSH
46246: LD_VAR 0 7
46250: ARRAY
46251: PPUSH
46252: LD_VAR 0 22
46256: PPUSH
46257: CALL_OW 308
46261: NOT
46262: IFFALSE 46284
// ComMoveToArea ( group [ i ] , f_repair ) ;
46264: LD_VAR 0 4
46268: PUSH
46269: LD_VAR 0 7
46273: ARRAY
46274: PPUSH
46275: LD_VAR 0 22
46279: PPUSH
46280: CALL_OW 113
// continue ;
46284: GO 45911
// end ; end else
46286: GO 46566
// if group [ i ] in repairs then
46288: LD_VAR 0 4
46292: PUSH
46293: LD_VAR 0 7
46297: ARRAY
46298: PUSH
46299: LD_VAR 0 33
46303: IN
46304: IFFALSE 46566
// begin if IsInUnit ( group [ i ] ) then
46306: LD_VAR 0 4
46310: PUSH
46311: LD_VAR 0 7
46315: ARRAY
46316: PPUSH
46317: CALL_OW 310
46321: IFFALSE 46389
// begin z := IsInUnit ( group [ i ] ) ;
46323: LD_ADDR_VAR 0 13
46327: PUSH
46328: LD_VAR 0 4
46332: PUSH
46333: LD_VAR 0 7
46337: ARRAY
46338: PPUSH
46339: CALL_OW 310
46343: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
46344: LD_VAR 0 13
46348: PUSH
46349: LD_VAR 0 32
46353: IN
46354: PUSH
46355: LD_VAR 0 13
46359: PPUSH
46360: LD_VAR 0 22
46364: PPUSH
46365: CALL_OW 308
46369: AND
46370: IFFALSE 46387
// ComExitVehicle ( group [ i ] ) ;
46372: LD_VAR 0 4
46376: PUSH
46377: LD_VAR 0 7
46381: ARRAY
46382: PPUSH
46383: CALL_OW 121
// end else
46387: GO 46566
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
46389: LD_ADDR_VAR 0 13
46393: PUSH
46394: LD_VAR 0 4
46398: PPUSH
46399: LD_INT 95
46401: PUSH
46402: LD_VAR 0 22
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 58
46413: PUSH
46414: EMPTY
46415: LIST
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PPUSH
46421: CALL_OW 72
46425: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
46426: LD_VAR 0 4
46430: PUSH
46431: LD_VAR 0 7
46435: ARRAY
46436: PPUSH
46437: CALL_OW 314
46441: NOT
46442: IFFALSE 46564
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
46444: LD_ADDR_VAR 0 10
46448: PUSH
46449: LD_VAR 0 13
46453: PPUSH
46454: LD_VAR 0 4
46458: PUSH
46459: LD_VAR 0 7
46463: ARRAY
46464: PPUSH
46465: CALL_OW 74
46469: ST_TO_ADDR
// if not x then
46470: LD_VAR 0 10
46474: NOT
46475: IFFALSE 46479
// continue ;
46477: GO 45911
// if GetLives ( x ) < 1000 then
46479: LD_VAR 0 10
46483: PPUSH
46484: CALL_OW 256
46488: PUSH
46489: LD_INT 1000
46491: LESS
46492: IFFALSE 46516
// ComRepairVehicle ( group [ i ] , x ) else
46494: LD_VAR 0 4
46498: PUSH
46499: LD_VAR 0 7
46503: ARRAY
46504: PPUSH
46505: LD_VAR 0 10
46509: PPUSH
46510: CALL_OW 129
46514: GO 46564
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
46516: LD_VAR 0 23
46520: PUSH
46521: LD_VAR 0 4
46525: PUSH
46526: LD_VAR 0 7
46530: ARRAY
46531: PPUSH
46532: CALL_OW 256
46536: PUSH
46537: LD_INT 1000
46539: LESS
46540: AND
46541: NOT
46542: IFFALSE 46564
// ComEnterUnit ( group [ i ] , x ) ;
46544: LD_VAR 0 4
46548: PUSH
46549: LD_VAR 0 7
46553: ARRAY
46554: PPUSH
46555: LD_VAR 0 10
46559: PPUSH
46560: CALL_OW 120
// end ; continue ;
46564: GO 45911
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
46566: LD_VAR 0 23
46570: PUSH
46571: LD_VAR 0 4
46575: PUSH
46576: LD_VAR 0 7
46580: ARRAY
46581: PPUSH
46582: CALL_OW 247
46586: PUSH
46587: LD_INT 1
46589: EQUAL
46590: AND
46591: IFFALSE 47069
// begin if group [ i ] in healers then
46593: LD_VAR 0 4
46597: PUSH
46598: LD_VAR 0 7
46602: ARRAY
46603: PUSH
46604: LD_VAR 0 31
46608: IN
46609: IFFALSE 46882
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
46611: LD_VAR 0 4
46615: PUSH
46616: LD_VAR 0 7
46620: ARRAY
46621: PPUSH
46622: LD_VAR 0 23
46626: PPUSH
46627: CALL_OW 308
46631: NOT
46632: PUSH
46633: LD_VAR 0 4
46637: PUSH
46638: LD_VAR 0 7
46642: ARRAY
46643: PPUSH
46644: CALL_OW 314
46648: NOT
46649: AND
46650: IFFALSE 46674
// ComMoveToArea ( group [ i ] , f_heal ) else
46652: LD_VAR 0 4
46656: PUSH
46657: LD_VAR 0 7
46661: ARRAY
46662: PPUSH
46663: LD_VAR 0 23
46667: PPUSH
46668: CALL_OW 113
46672: GO 46880
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
46674: LD_VAR 0 4
46678: PUSH
46679: LD_VAR 0 7
46683: ARRAY
46684: PPUSH
46685: CALL 45292 0 1
46689: PPUSH
46690: CALL_OW 256
46694: PUSH
46695: LD_INT 1000
46697: EQUAL
46698: IFFALSE 46717
// ComStop ( group [ i ] ) else
46700: LD_VAR 0 4
46704: PUSH
46705: LD_VAR 0 7
46709: ARRAY
46710: PPUSH
46711: CALL_OW 141
46715: GO 46880
// if not HasTask ( group [ i ] ) and to_heal then
46717: LD_VAR 0 4
46721: PUSH
46722: LD_VAR 0 7
46726: ARRAY
46727: PPUSH
46728: CALL_OW 314
46732: NOT
46733: PUSH
46734: LD_VAR 0 30
46738: AND
46739: IFFALSE 46880
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
46741: LD_ADDR_VAR 0 13
46745: PUSH
46746: LD_VAR 0 30
46750: PPUSH
46751: LD_INT 3
46753: PUSH
46754: LD_INT 54
46756: PUSH
46757: EMPTY
46758: LIST
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PPUSH
46764: CALL_OW 72
46768: PPUSH
46769: LD_VAR 0 4
46773: PUSH
46774: LD_VAR 0 7
46778: ARRAY
46779: PPUSH
46780: CALL_OW 74
46784: ST_TO_ADDR
// if z then
46785: LD_VAR 0 13
46789: IFFALSE 46880
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
46791: LD_INT 91
46793: PUSH
46794: LD_VAR 0 13
46798: PUSH
46799: LD_INT 10
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 81
46809: PUSH
46810: LD_VAR 0 13
46814: PPUSH
46815: CALL_OW 255
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PPUSH
46828: CALL_OW 69
46832: PUSH
46833: LD_INT 0
46835: EQUAL
46836: IFFALSE 46860
// ComHeal ( group [ i ] , z ) else
46838: LD_VAR 0 4
46842: PUSH
46843: LD_VAR 0 7
46847: ARRAY
46848: PPUSH
46849: LD_VAR 0 13
46853: PPUSH
46854: CALL_OW 128
46858: GO 46880
// ComMoveToArea ( group [ i ] , f_heal ) ;
46860: LD_VAR 0 4
46864: PUSH
46865: LD_VAR 0 7
46869: ARRAY
46870: PPUSH
46871: LD_VAR 0 23
46875: PPUSH
46876: CALL_OW 113
// end ; continue ;
46880: GO 45911
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
46882: LD_VAR 0 4
46886: PUSH
46887: LD_VAR 0 7
46891: ARRAY
46892: PPUSH
46893: CALL_OW 256
46897: PUSH
46898: LD_INT 700
46900: LESS
46901: PUSH
46902: LD_VAR 0 4
46906: PUSH
46907: LD_VAR 0 7
46911: ARRAY
46912: PUSH
46913: LD_VAR 0 30
46917: IN
46918: NOT
46919: AND
46920: IFFALSE 46944
// to_heal := to_heal union group [ i ] ;
46922: LD_ADDR_VAR 0 30
46926: PUSH
46927: LD_VAR 0 30
46931: PUSH
46932: LD_VAR 0 4
46936: PUSH
46937: LD_VAR 0 7
46941: ARRAY
46942: UNION
46943: ST_TO_ADDR
// if group [ i ] in to_heal then
46944: LD_VAR 0 4
46948: PUSH
46949: LD_VAR 0 7
46953: ARRAY
46954: PUSH
46955: LD_VAR 0 30
46959: IN
46960: IFFALSE 47069
// begin if GetLives ( group [ i ] ) = 1000 then
46962: LD_VAR 0 4
46966: PUSH
46967: LD_VAR 0 7
46971: ARRAY
46972: PPUSH
46973: CALL_OW 256
46977: PUSH
46978: LD_INT 1000
46980: EQUAL
46981: IFFALSE 47007
// to_heal := to_heal diff group [ i ] else
46983: LD_ADDR_VAR 0 30
46987: PUSH
46988: LD_VAR 0 30
46992: PUSH
46993: LD_VAR 0 4
46997: PUSH
46998: LD_VAR 0 7
47002: ARRAY
47003: DIFF
47004: ST_TO_ADDR
47005: GO 47069
// begin if not IsInArea ( group [ i ] , to_heal ) then
47007: LD_VAR 0 4
47011: PUSH
47012: LD_VAR 0 7
47016: ARRAY
47017: PPUSH
47018: LD_VAR 0 30
47022: PPUSH
47023: CALL_OW 308
47027: NOT
47028: IFFALSE 47052
// ComMoveToArea ( group [ i ] , f_heal ) else
47030: LD_VAR 0 4
47034: PUSH
47035: LD_VAR 0 7
47039: ARRAY
47040: PPUSH
47041: LD_VAR 0 23
47045: PPUSH
47046: CALL_OW 113
47050: GO 47067
// ComHold ( group [ i ] ) ;
47052: LD_VAR 0 4
47056: PUSH
47057: LD_VAR 0 7
47061: ARRAY
47062: PPUSH
47063: CALL_OW 140
// continue ;
47067: GO 45911
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
47069: LD_VAR 0 4
47073: PUSH
47074: LD_VAR 0 7
47078: ARRAY
47079: PPUSH
47080: LD_INT 10
47082: PPUSH
47083: CALL 43689 0 2
47087: NOT
47088: PUSH
47089: LD_VAR 0 16
47093: PUSH
47094: LD_VAR 0 7
47098: ARRAY
47099: PUSH
47100: EMPTY
47101: EQUAL
47102: NOT
47103: AND
47104: IFFALSE 47370
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
47106: LD_VAR 0 4
47110: PUSH
47111: LD_VAR 0 7
47115: ARRAY
47116: PPUSH
47117: CALL_OW 262
47121: PUSH
47122: LD_INT 1
47124: PUSH
47125: LD_INT 2
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: IN
47132: IFFALSE 47173
// if GetFuel ( group [ i ] ) < 10 then
47134: LD_VAR 0 4
47138: PUSH
47139: LD_VAR 0 7
47143: ARRAY
47144: PPUSH
47145: CALL_OW 261
47149: PUSH
47150: LD_INT 10
47152: LESS
47153: IFFALSE 47173
// SetFuel ( group [ i ] , 12 ) ;
47155: LD_VAR 0 4
47159: PUSH
47160: LD_VAR 0 7
47164: ARRAY
47165: PPUSH
47166: LD_INT 12
47168: PPUSH
47169: CALL_OW 240
// if units_path [ i ] then
47173: LD_VAR 0 16
47177: PUSH
47178: LD_VAR 0 7
47182: ARRAY
47183: IFFALSE 47368
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
47185: LD_VAR 0 4
47189: PUSH
47190: LD_VAR 0 7
47194: ARRAY
47195: PPUSH
47196: LD_VAR 0 16
47200: PUSH
47201: LD_VAR 0 7
47205: ARRAY
47206: PUSH
47207: LD_INT 1
47209: ARRAY
47210: PUSH
47211: LD_INT 1
47213: ARRAY
47214: PPUSH
47215: LD_VAR 0 16
47219: PUSH
47220: LD_VAR 0 7
47224: ARRAY
47225: PUSH
47226: LD_INT 1
47228: ARRAY
47229: PUSH
47230: LD_INT 2
47232: ARRAY
47233: PPUSH
47234: CALL_OW 297
47238: PUSH
47239: LD_INT 6
47241: GREATER
47242: IFFALSE 47317
// begin if not HasTask ( group [ i ] ) then
47244: LD_VAR 0 4
47248: PUSH
47249: LD_VAR 0 7
47253: ARRAY
47254: PPUSH
47255: CALL_OW 314
47259: NOT
47260: IFFALSE 47315
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
47262: LD_VAR 0 4
47266: PUSH
47267: LD_VAR 0 7
47271: ARRAY
47272: PPUSH
47273: LD_VAR 0 16
47277: PUSH
47278: LD_VAR 0 7
47282: ARRAY
47283: PUSH
47284: LD_INT 1
47286: ARRAY
47287: PUSH
47288: LD_INT 1
47290: ARRAY
47291: PPUSH
47292: LD_VAR 0 16
47296: PUSH
47297: LD_VAR 0 7
47301: ARRAY
47302: PUSH
47303: LD_INT 1
47305: ARRAY
47306: PUSH
47307: LD_INT 2
47309: ARRAY
47310: PPUSH
47311: CALL_OW 114
// end else
47315: GO 47368
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
47317: LD_ADDR_VAR 0 15
47321: PUSH
47322: LD_VAR 0 16
47326: PUSH
47327: LD_VAR 0 7
47331: ARRAY
47332: PPUSH
47333: LD_INT 1
47335: PPUSH
47336: CALL_OW 3
47340: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
47341: LD_ADDR_VAR 0 16
47345: PUSH
47346: LD_VAR 0 16
47350: PPUSH
47351: LD_VAR 0 7
47355: PPUSH
47356: LD_VAR 0 15
47360: PPUSH
47361: CALL_OW 1
47365: ST_TO_ADDR
// continue ;
47366: GO 45911
// end ; end ; end else
47368: GO 50006
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
47370: LD_ADDR_VAR 0 14
47374: PUSH
47375: LD_INT 81
47377: PUSH
47378: LD_VAR 0 4
47382: PUSH
47383: LD_VAR 0 7
47387: ARRAY
47388: PPUSH
47389: CALL_OW 255
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PPUSH
47398: CALL_OW 69
47402: ST_TO_ADDR
// if not tmp then
47403: LD_VAR 0 14
47407: NOT
47408: IFFALSE 47412
// continue ;
47410: GO 45911
// if f_ignore_area then
47412: LD_VAR 0 17
47416: IFFALSE 47504
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
47418: LD_ADDR_VAR 0 15
47422: PUSH
47423: LD_VAR 0 14
47427: PPUSH
47428: LD_INT 3
47430: PUSH
47431: LD_INT 92
47433: PUSH
47434: LD_VAR 0 17
47438: PUSH
47439: LD_INT 1
47441: ARRAY
47442: PUSH
47443: LD_VAR 0 17
47447: PUSH
47448: LD_INT 2
47450: ARRAY
47451: PUSH
47452: LD_VAR 0 17
47456: PUSH
47457: LD_INT 3
47459: ARRAY
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PPUSH
47471: CALL_OW 72
47475: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
47476: LD_VAR 0 14
47480: PUSH
47481: LD_VAR 0 15
47485: DIFF
47486: IFFALSE 47504
// tmp := tmp diff tmp2 ;
47488: LD_ADDR_VAR 0 14
47492: PUSH
47493: LD_VAR 0 14
47497: PUSH
47498: LD_VAR 0 15
47502: DIFF
47503: ST_TO_ADDR
// end ; if not f_murder then
47504: LD_VAR 0 20
47508: NOT
47509: IFFALSE 47567
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
47511: LD_ADDR_VAR 0 15
47515: PUSH
47516: LD_VAR 0 14
47520: PPUSH
47521: LD_INT 3
47523: PUSH
47524: LD_INT 50
47526: PUSH
47527: EMPTY
47528: LIST
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PPUSH
47534: CALL_OW 72
47538: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
47539: LD_VAR 0 14
47543: PUSH
47544: LD_VAR 0 15
47548: DIFF
47549: IFFALSE 47567
// tmp := tmp diff tmp2 ;
47551: LD_ADDR_VAR 0 14
47555: PUSH
47556: LD_VAR 0 14
47560: PUSH
47561: LD_VAR 0 15
47565: DIFF
47566: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
47567: LD_ADDR_VAR 0 14
47571: PUSH
47572: LD_VAR 0 4
47576: PUSH
47577: LD_VAR 0 7
47581: ARRAY
47582: PPUSH
47583: LD_VAR 0 14
47587: PPUSH
47588: LD_INT 1
47590: PPUSH
47591: LD_INT 1
47593: PPUSH
47594: CALL 17356 0 4
47598: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
47599: LD_VAR 0 4
47603: PUSH
47604: LD_VAR 0 7
47608: ARRAY
47609: PPUSH
47610: CALL_OW 257
47614: PUSH
47615: LD_INT 1
47617: EQUAL
47618: IFFALSE 48066
// begin if WantPlant ( group [ i ] ) then
47620: LD_VAR 0 4
47624: PUSH
47625: LD_VAR 0 7
47629: ARRAY
47630: PPUSH
47631: CALL 16857 0 1
47635: IFFALSE 47639
// continue ;
47637: GO 45911
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
47639: LD_VAR 0 18
47643: PUSH
47644: LD_VAR 0 4
47648: PUSH
47649: LD_VAR 0 7
47653: ARRAY
47654: PPUSH
47655: CALL_OW 310
47659: NOT
47660: AND
47661: PUSH
47662: LD_VAR 0 14
47666: PUSH
47667: LD_INT 1
47669: ARRAY
47670: PUSH
47671: LD_VAR 0 14
47675: PPUSH
47676: LD_INT 21
47678: PUSH
47679: LD_INT 2
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 58
47688: PUSH
47689: EMPTY
47690: LIST
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PPUSH
47696: CALL_OW 72
47700: IN
47701: AND
47702: IFFALSE 47738
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
47704: LD_VAR 0 4
47708: PUSH
47709: LD_VAR 0 7
47713: ARRAY
47714: PPUSH
47715: LD_VAR 0 14
47719: PUSH
47720: LD_INT 1
47722: ARRAY
47723: PPUSH
47724: CALL_OW 120
// attacking := true ;
47728: LD_ADDR_VAR 0 29
47732: PUSH
47733: LD_INT 1
47735: ST_TO_ADDR
// continue ;
47736: GO 45911
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
47738: LD_VAR 0 26
47742: PUSH
47743: LD_VAR 0 4
47747: PUSH
47748: LD_VAR 0 7
47752: ARRAY
47753: PPUSH
47754: CALL_OW 257
47758: PUSH
47759: LD_INT 1
47761: EQUAL
47762: AND
47763: PUSH
47764: LD_VAR 0 4
47768: PUSH
47769: LD_VAR 0 7
47773: ARRAY
47774: PPUSH
47775: CALL_OW 256
47779: PUSH
47780: LD_INT 800
47782: LESS
47783: AND
47784: PUSH
47785: LD_VAR 0 4
47789: PUSH
47790: LD_VAR 0 7
47794: ARRAY
47795: PPUSH
47796: CALL_OW 318
47800: NOT
47801: AND
47802: IFFALSE 47819
// ComCrawl ( group [ i ] ) ;
47804: LD_VAR 0 4
47808: PUSH
47809: LD_VAR 0 7
47813: ARRAY
47814: PPUSH
47815: CALL_OW 137
// if f_mines then
47819: LD_VAR 0 21
47823: IFFALSE 48066
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
47825: LD_VAR 0 14
47829: PUSH
47830: LD_INT 1
47832: ARRAY
47833: PPUSH
47834: CALL_OW 247
47838: PUSH
47839: LD_INT 3
47841: EQUAL
47842: PUSH
47843: LD_VAR 0 14
47847: PUSH
47848: LD_INT 1
47850: ARRAY
47851: PUSH
47852: LD_VAR 0 27
47856: IN
47857: NOT
47858: AND
47859: IFFALSE 48066
// begin x := GetX ( tmp [ 1 ] ) ;
47861: LD_ADDR_VAR 0 10
47865: PUSH
47866: LD_VAR 0 14
47870: PUSH
47871: LD_INT 1
47873: ARRAY
47874: PPUSH
47875: CALL_OW 250
47879: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
47880: LD_ADDR_VAR 0 11
47884: PUSH
47885: LD_VAR 0 14
47889: PUSH
47890: LD_INT 1
47892: ARRAY
47893: PPUSH
47894: CALL_OW 251
47898: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
47899: LD_ADDR_VAR 0 12
47903: PUSH
47904: LD_VAR 0 4
47908: PUSH
47909: LD_VAR 0 7
47913: ARRAY
47914: PPUSH
47915: CALL 43774 0 1
47919: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
47920: LD_VAR 0 4
47924: PUSH
47925: LD_VAR 0 7
47929: ARRAY
47930: PPUSH
47931: LD_VAR 0 10
47935: PPUSH
47936: LD_VAR 0 11
47940: PPUSH
47941: LD_VAR 0 14
47945: PUSH
47946: LD_INT 1
47948: ARRAY
47949: PPUSH
47950: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
47954: LD_VAR 0 4
47958: PUSH
47959: LD_VAR 0 7
47963: ARRAY
47964: PPUSH
47965: LD_VAR 0 10
47969: PPUSH
47970: LD_VAR 0 12
47974: PPUSH
47975: LD_INT 7
47977: PPUSH
47978: CALL_OW 272
47982: PPUSH
47983: LD_VAR 0 11
47987: PPUSH
47988: LD_VAR 0 12
47992: PPUSH
47993: LD_INT 7
47995: PPUSH
47996: CALL_OW 273
48000: PPUSH
48001: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
48005: LD_VAR 0 4
48009: PUSH
48010: LD_VAR 0 7
48014: ARRAY
48015: PPUSH
48016: LD_INT 71
48018: PPUSH
48019: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
48023: LD_ADDR_VAR 0 27
48027: PUSH
48028: LD_VAR 0 27
48032: PPUSH
48033: LD_VAR 0 27
48037: PUSH
48038: LD_INT 1
48040: PLUS
48041: PPUSH
48042: LD_VAR 0 14
48046: PUSH
48047: LD_INT 1
48049: ARRAY
48050: PPUSH
48051: CALL_OW 1
48055: ST_TO_ADDR
// attacking := true ;
48056: LD_ADDR_VAR 0 29
48060: PUSH
48061: LD_INT 1
48063: ST_TO_ADDR
// continue ;
48064: GO 45911
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
48066: LD_VAR 0 4
48070: PUSH
48071: LD_VAR 0 7
48075: ARRAY
48076: PPUSH
48077: CALL_OW 257
48081: PUSH
48082: LD_INT 17
48084: EQUAL
48085: PUSH
48086: LD_VAR 0 4
48090: PUSH
48091: LD_VAR 0 7
48095: ARRAY
48096: PPUSH
48097: CALL_OW 110
48101: PUSH
48102: LD_INT 71
48104: EQUAL
48105: NOT
48106: AND
48107: IFFALSE 48253
// begin attacking := false ;
48109: LD_ADDR_VAR 0 29
48113: PUSH
48114: LD_INT 0
48116: ST_TO_ADDR
// k := 5 ;
48117: LD_ADDR_VAR 0 9
48121: PUSH
48122: LD_INT 5
48124: ST_TO_ADDR
// if tmp < k then
48125: LD_VAR 0 14
48129: PUSH
48130: LD_VAR 0 9
48134: LESS
48135: IFFALSE 48147
// k := tmp ;
48137: LD_ADDR_VAR 0 9
48141: PUSH
48142: LD_VAR 0 14
48146: ST_TO_ADDR
// for j = 1 to k do
48147: LD_ADDR_VAR 0 8
48151: PUSH
48152: DOUBLE
48153: LD_INT 1
48155: DEC
48156: ST_TO_ADDR
48157: LD_VAR 0 9
48161: PUSH
48162: FOR_TO
48163: IFFALSE 48251
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
48165: LD_VAR 0 14
48169: PUSH
48170: LD_VAR 0 8
48174: ARRAY
48175: PUSH
48176: LD_VAR 0 14
48180: PPUSH
48181: LD_INT 58
48183: PUSH
48184: EMPTY
48185: LIST
48186: PPUSH
48187: CALL_OW 72
48191: IN
48192: NOT
48193: IFFALSE 48249
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
48195: LD_VAR 0 4
48199: PUSH
48200: LD_VAR 0 7
48204: ARRAY
48205: PPUSH
48206: LD_VAR 0 14
48210: PUSH
48211: LD_VAR 0 8
48215: ARRAY
48216: PPUSH
48217: CALL_OW 115
// attacking := true ;
48221: LD_ADDR_VAR 0 29
48225: PUSH
48226: LD_INT 1
48228: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
48229: LD_VAR 0 4
48233: PUSH
48234: LD_VAR 0 7
48238: ARRAY
48239: PPUSH
48240: LD_INT 71
48242: PPUSH
48243: CALL_OW 109
// continue ;
48247: GO 48162
// end ; end ;
48249: GO 48162
48251: POP
48252: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
48253: LD_VAR 0 4
48257: PUSH
48258: LD_VAR 0 7
48262: ARRAY
48263: PPUSH
48264: CALL_OW 257
48268: PUSH
48269: LD_INT 8
48271: EQUAL
48272: PUSH
48273: LD_VAR 0 4
48277: PUSH
48278: LD_VAR 0 7
48282: ARRAY
48283: PPUSH
48284: CALL_OW 264
48288: PUSH
48289: LD_INT 28
48291: PUSH
48292: LD_INT 45
48294: PUSH
48295: LD_INT 7
48297: PUSH
48298: LD_INT 47
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: IN
48307: OR
48308: IFFALSE 48538
// begin attacking := false ;
48310: LD_ADDR_VAR 0 29
48314: PUSH
48315: LD_INT 0
48317: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
48318: LD_VAR 0 14
48322: PUSH
48323: LD_INT 1
48325: ARRAY
48326: PPUSH
48327: CALL_OW 266
48331: PUSH
48332: LD_INT 32
48334: PUSH
48335: LD_INT 31
48337: PUSH
48338: LD_INT 33
48340: PUSH
48341: LD_INT 4
48343: PUSH
48344: LD_INT 5
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: IN
48354: IFFALSE 48538
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
48356: LD_ADDR_VAR 0 9
48360: PUSH
48361: LD_VAR 0 14
48365: PUSH
48366: LD_INT 1
48368: ARRAY
48369: PPUSH
48370: CALL_OW 266
48374: PPUSH
48375: LD_VAR 0 14
48379: PUSH
48380: LD_INT 1
48382: ARRAY
48383: PPUSH
48384: CALL_OW 250
48388: PPUSH
48389: LD_VAR 0 14
48393: PUSH
48394: LD_INT 1
48396: ARRAY
48397: PPUSH
48398: CALL_OW 251
48402: PPUSH
48403: LD_VAR 0 14
48407: PUSH
48408: LD_INT 1
48410: ARRAY
48411: PPUSH
48412: CALL_OW 254
48416: PPUSH
48417: LD_VAR 0 14
48421: PUSH
48422: LD_INT 1
48424: ARRAY
48425: PPUSH
48426: CALL_OW 248
48430: PPUSH
48431: LD_INT 0
48433: PPUSH
48434: CALL 25150 0 6
48438: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
48439: LD_ADDR_VAR 0 8
48443: PUSH
48444: LD_VAR 0 4
48448: PUSH
48449: LD_VAR 0 7
48453: ARRAY
48454: PPUSH
48455: LD_VAR 0 9
48459: PPUSH
48460: CALL 43837 0 2
48464: ST_TO_ADDR
// if j then
48465: LD_VAR 0 8
48469: IFFALSE 48538
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48471: LD_VAR 0 8
48475: PUSH
48476: LD_INT 1
48478: ARRAY
48479: PPUSH
48480: LD_VAR 0 8
48484: PUSH
48485: LD_INT 2
48487: ARRAY
48488: PPUSH
48489: CALL_OW 488
48493: IFFALSE 48538
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
48495: LD_VAR 0 4
48499: PUSH
48500: LD_VAR 0 7
48504: ARRAY
48505: PPUSH
48506: LD_VAR 0 8
48510: PUSH
48511: LD_INT 1
48513: ARRAY
48514: PPUSH
48515: LD_VAR 0 8
48519: PUSH
48520: LD_INT 2
48522: ARRAY
48523: PPUSH
48524: CALL_OW 116
// attacking := true ;
48528: LD_ADDR_VAR 0 29
48532: PUSH
48533: LD_INT 1
48535: ST_TO_ADDR
// continue ;
48536: GO 45911
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
48538: LD_VAR 0 4
48542: PUSH
48543: LD_VAR 0 7
48547: ARRAY
48548: PPUSH
48549: CALL_OW 265
48553: PUSH
48554: LD_INT 11
48556: EQUAL
48557: IFFALSE 48835
// begin k := 10 ;
48559: LD_ADDR_VAR 0 9
48563: PUSH
48564: LD_INT 10
48566: ST_TO_ADDR
// x := 0 ;
48567: LD_ADDR_VAR 0 10
48571: PUSH
48572: LD_INT 0
48574: ST_TO_ADDR
// if tmp < k then
48575: LD_VAR 0 14
48579: PUSH
48580: LD_VAR 0 9
48584: LESS
48585: IFFALSE 48597
// k := tmp ;
48587: LD_ADDR_VAR 0 9
48591: PUSH
48592: LD_VAR 0 14
48596: ST_TO_ADDR
// for j = k downto 1 do
48597: LD_ADDR_VAR 0 8
48601: PUSH
48602: DOUBLE
48603: LD_VAR 0 9
48607: INC
48608: ST_TO_ADDR
48609: LD_INT 1
48611: PUSH
48612: FOR_DOWNTO
48613: IFFALSE 48688
// begin if GetType ( tmp [ j ] ) = unit_human then
48615: LD_VAR 0 14
48619: PUSH
48620: LD_VAR 0 8
48624: ARRAY
48625: PPUSH
48626: CALL_OW 247
48630: PUSH
48631: LD_INT 1
48633: EQUAL
48634: IFFALSE 48686
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
48636: LD_VAR 0 4
48640: PUSH
48641: LD_VAR 0 7
48645: ARRAY
48646: PPUSH
48647: LD_VAR 0 14
48651: PUSH
48652: LD_VAR 0 8
48656: ARRAY
48657: PPUSH
48658: CALL 44108 0 2
// x := tmp [ j ] ;
48662: LD_ADDR_VAR 0 10
48666: PUSH
48667: LD_VAR 0 14
48671: PUSH
48672: LD_VAR 0 8
48676: ARRAY
48677: ST_TO_ADDR
// attacking := true ;
48678: LD_ADDR_VAR 0 29
48682: PUSH
48683: LD_INT 1
48685: ST_TO_ADDR
// end ; end ;
48686: GO 48612
48688: POP
48689: POP
// if not x then
48690: LD_VAR 0 10
48694: NOT
48695: IFFALSE 48835
// begin attacking := true ;
48697: LD_ADDR_VAR 0 29
48701: PUSH
48702: LD_INT 1
48704: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
48705: LD_VAR 0 4
48709: PUSH
48710: LD_VAR 0 7
48714: ARRAY
48715: PPUSH
48716: CALL_OW 250
48720: PPUSH
48721: LD_VAR 0 4
48725: PUSH
48726: LD_VAR 0 7
48730: ARRAY
48731: PPUSH
48732: CALL_OW 251
48736: PPUSH
48737: CALL_OW 546
48741: PUSH
48742: LD_INT 2
48744: ARRAY
48745: PUSH
48746: LD_VAR 0 14
48750: PUSH
48751: LD_INT 1
48753: ARRAY
48754: PPUSH
48755: CALL_OW 250
48759: PPUSH
48760: LD_VAR 0 14
48764: PUSH
48765: LD_INT 1
48767: ARRAY
48768: PPUSH
48769: CALL_OW 251
48773: PPUSH
48774: CALL_OW 546
48778: PUSH
48779: LD_INT 2
48781: ARRAY
48782: EQUAL
48783: IFFALSE 48811
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
48785: LD_VAR 0 4
48789: PUSH
48790: LD_VAR 0 7
48794: ARRAY
48795: PPUSH
48796: LD_VAR 0 14
48800: PUSH
48801: LD_INT 1
48803: ARRAY
48804: PPUSH
48805: CALL 44108 0 2
48809: GO 48835
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
48811: LD_VAR 0 4
48815: PUSH
48816: LD_VAR 0 7
48820: ARRAY
48821: PPUSH
48822: LD_VAR 0 14
48826: PUSH
48827: LD_INT 1
48829: ARRAY
48830: PPUSH
48831: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
48835: LD_VAR 0 4
48839: PUSH
48840: LD_VAR 0 7
48844: ARRAY
48845: PPUSH
48846: CALL_OW 264
48850: PUSH
48851: LD_INT 29
48853: EQUAL
48854: IFFALSE 49220
// begin if WantsToAttack ( group [ i ] ) in bombed then
48856: LD_VAR 0 4
48860: PUSH
48861: LD_VAR 0 7
48865: ARRAY
48866: PPUSH
48867: CALL_OW 319
48871: PUSH
48872: LD_VAR 0 28
48876: IN
48877: IFFALSE 48881
// continue ;
48879: GO 45911
// k := 8 ;
48881: LD_ADDR_VAR 0 9
48885: PUSH
48886: LD_INT 8
48888: ST_TO_ADDR
// x := 0 ;
48889: LD_ADDR_VAR 0 10
48893: PUSH
48894: LD_INT 0
48896: ST_TO_ADDR
// if tmp < k then
48897: LD_VAR 0 14
48901: PUSH
48902: LD_VAR 0 9
48906: LESS
48907: IFFALSE 48919
// k := tmp ;
48909: LD_ADDR_VAR 0 9
48913: PUSH
48914: LD_VAR 0 14
48918: ST_TO_ADDR
// for j = 1 to k do
48919: LD_ADDR_VAR 0 8
48923: PUSH
48924: DOUBLE
48925: LD_INT 1
48927: DEC
48928: ST_TO_ADDR
48929: LD_VAR 0 9
48933: PUSH
48934: FOR_TO
48935: IFFALSE 49067
// begin if GetType ( tmp [ j ] ) = unit_building then
48937: LD_VAR 0 14
48941: PUSH
48942: LD_VAR 0 8
48946: ARRAY
48947: PPUSH
48948: CALL_OW 247
48952: PUSH
48953: LD_INT 3
48955: EQUAL
48956: IFFALSE 49065
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
48958: LD_VAR 0 14
48962: PUSH
48963: LD_VAR 0 8
48967: ARRAY
48968: PUSH
48969: LD_VAR 0 28
48973: IN
48974: NOT
48975: PUSH
48976: LD_VAR 0 14
48980: PUSH
48981: LD_VAR 0 8
48985: ARRAY
48986: PPUSH
48987: CALL_OW 313
48991: AND
48992: IFFALSE 49065
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
48994: LD_VAR 0 4
48998: PUSH
48999: LD_VAR 0 7
49003: ARRAY
49004: PPUSH
49005: LD_VAR 0 14
49009: PUSH
49010: LD_VAR 0 8
49014: ARRAY
49015: PPUSH
49016: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
49020: LD_ADDR_VAR 0 28
49024: PUSH
49025: LD_VAR 0 28
49029: PPUSH
49030: LD_VAR 0 28
49034: PUSH
49035: LD_INT 1
49037: PLUS
49038: PPUSH
49039: LD_VAR 0 14
49043: PUSH
49044: LD_VAR 0 8
49048: ARRAY
49049: PPUSH
49050: CALL_OW 1
49054: ST_TO_ADDR
// attacking := true ;
49055: LD_ADDR_VAR 0 29
49059: PUSH
49060: LD_INT 1
49062: ST_TO_ADDR
// break ;
49063: GO 49067
// end ; end ;
49065: GO 48934
49067: POP
49068: POP
// if not attacking and f_attack_depot then
49069: LD_VAR 0 29
49073: NOT
49074: PUSH
49075: LD_VAR 0 25
49079: AND
49080: IFFALSE 49175
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
49082: LD_ADDR_VAR 0 13
49086: PUSH
49087: LD_VAR 0 14
49091: PPUSH
49092: LD_INT 2
49094: PUSH
49095: LD_INT 30
49097: PUSH
49098: LD_INT 0
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 30
49107: PUSH
49108: LD_INT 1
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: LIST
49119: PPUSH
49120: CALL_OW 72
49124: ST_TO_ADDR
// if z then
49125: LD_VAR 0 13
49129: IFFALSE 49175
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
49131: LD_VAR 0 4
49135: PUSH
49136: LD_VAR 0 7
49140: ARRAY
49141: PPUSH
49142: LD_VAR 0 13
49146: PPUSH
49147: LD_VAR 0 4
49151: PUSH
49152: LD_VAR 0 7
49156: ARRAY
49157: PPUSH
49158: CALL_OW 74
49162: PPUSH
49163: CALL_OW 115
// attacking := true ;
49167: LD_ADDR_VAR 0 29
49171: PUSH
49172: LD_INT 1
49174: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
49175: LD_VAR 0 4
49179: PUSH
49180: LD_VAR 0 7
49184: ARRAY
49185: PPUSH
49186: CALL_OW 256
49190: PUSH
49191: LD_INT 500
49193: LESS
49194: IFFALSE 49220
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
49196: LD_VAR 0 4
49200: PUSH
49201: LD_VAR 0 7
49205: ARRAY
49206: PPUSH
49207: LD_VAR 0 14
49211: PUSH
49212: LD_INT 1
49214: ARRAY
49215: PPUSH
49216: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
49220: LD_VAR 0 4
49224: PUSH
49225: LD_VAR 0 7
49229: ARRAY
49230: PPUSH
49231: CALL_OW 264
49235: PUSH
49236: LD_INT 49
49238: EQUAL
49239: IFFALSE 49360
// begin if not HasTask ( group [ i ] ) then
49241: LD_VAR 0 4
49245: PUSH
49246: LD_VAR 0 7
49250: ARRAY
49251: PPUSH
49252: CALL_OW 314
49256: NOT
49257: IFFALSE 49360
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
49259: LD_ADDR_VAR 0 9
49263: PUSH
49264: LD_INT 81
49266: PUSH
49267: LD_VAR 0 4
49271: PUSH
49272: LD_VAR 0 7
49276: ARRAY
49277: PPUSH
49278: CALL_OW 255
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PPUSH
49287: CALL_OW 69
49291: PPUSH
49292: LD_VAR 0 4
49296: PUSH
49297: LD_VAR 0 7
49301: ARRAY
49302: PPUSH
49303: CALL_OW 74
49307: ST_TO_ADDR
// if k then
49308: LD_VAR 0 9
49312: IFFALSE 49360
// if GetDistUnits ( group [ i ] , k ) > 10 then
49314: LD_VAR 0 4
49318: PUSH
49319: LD_VAR 0 7
49323: ARRAY
49324: PPUSH
49325: LD_VAR 0 9
49329: PPUSH
49330: CALL_OW 296
49334: PUSH
49335: LD_INT 10
49337: GREATER
49338: IFFALSE 49360
// ComMoveUnit ( group [ i ] , k ) ;
49340: LD_VAR 0 4
49344: PUSH
49345: LD_VAR 0 7
49349: ARRAY
49350: PPUSH
49351: LD_VAR 0 9
49355: PPUSH
49356: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49360: LD_VAR 0 4
49364: PUSH
49365: LD_VAR 0 7
49369: ARRAY
49370: PPUSH
49371: CALL_OW 256
49375: PUSH
49376: LD_INT 250
49378: LESS
49379: PUSH
49380: LD_VAR 0 4
49384: PUSH
49385: LD_VAR 0 7
49389: ARRAY
49390: PUSH
49391: LD_INT 21
49393: PUSH
49394: LD_INT 2
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 23
49403: PUSH
49404: LD_INT 2
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PPUSH
49415: CALL_OW 69
49419: IN
49420: AND
49421: IFFALSE 49546
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
49423: LD_ADDR_VAR 0 9
49427: PUSH
49428: LD_OWVAR 3
49432: PUSH
49433: LD_VAR 0 4
49437: PUSH
49438: LD_VAR 0 7
49442: ARRAY
49443: DIFF
49444: PPUSH
49445: LD_VAR 0 4
49449: PUSH
49450: LD_VAR 0 7
49454: ARRAY
49455: PPUSH
49456: CALL_OW 74
49460: ST_TO_ADDR
// if not k then
49461: LD_VAR 0 9
49465: NOT
49466: IFFALSE 49470
// continue ;
49468: GO 45911
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
49470: LD_VAR 0 9
49474: PUSH
49475: LD_INT 81
49477: PUSH
49478: LD_VAR 0 4
49482: PUSH
49483: LD_VAR 0 7
49487: ARRAY
49488: PPUSH
49489: CALL_OW 255
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PPUSH
49498: CALL_OW 69
49502: IN
49503: PUSH
49504: LD_VAR 0 9
49508: PPUSH
49509: LD_VAR 0 4
49513: PUSH
49514: LD_VAR 0 7
49518: ARRAY
49519: PPUSH
49520: CALL_OW 296
49524: PUSH
49525: LD_INT 5
49527: LESS
49528: AND
49529: IFFALSE 49546
// ComAutodestruct ( group [ i ] ) ;
49531: LD_VAR 0 4
49535: PUSH
49536: LD_VAR 0 7
49540: ARRAY
49541: PPUSH
49542: CALL 44006 0 1
// end ; if f_attack_depot then
49546: LD_VAR 0 25
49550: IFFALSE 49662
// begin k := 6 ;
49552: LD_ADDR_VAR 0 9
49556: PUSH
49557: LD_INT 6
49559: ST_TO_ADDR
// if tmp < k then
49560: LD_VAR 0 14
49564: PUSH
49565: LD_VAR 0 9
49569: LESS
49570: IFFALSE 49582
// k := tmp ;
49572: LD_ADDR_VAR 0 9
49576: PUSH
49577: LD_VAR 0 14
49581: ST_TO_ADDR
// for j = 1 to k do
49582: LD_ADDR_VAR 0 8
49586: PUSH
49587: DOUBLE
49588: LD_INT 1
49590: DEC
49591: ST_TO_ADDR
49592: LD_VAR 0 9
49596: PUSH
49597: FOR_TO
49598: IFFALSE 49660
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
49600: LD_VAR 0 8
49604: PPUSH
49605: CALL_OW 266
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: LD_INT 1
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: IN
49620: IFFALSE 49658
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
49622: LD_VAR 0 4
49626: PUSH
49627: LD_VAR 0 7
49631: ARRAY
49632: PPUSH
49633: LD_VAR 0 14
49637: PUSH
49638: LD_VAR 0 8
49642: ARRAY
49643: PPUSH
49644: CALL_OW 115
// attacking := true ;
49648: LD_ADDR_VAR 0 29
49652: PUSH
49653: LD_INT 1
49655: ST_TO_ADDR
// break ;
49656: GO 49660
// end ;
49658: GO 49597
49660: POP
49661: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
49662: LD_VAR 0 4
49666: PUSH
49667: LD_VAR 0 7
49671: ARRAY
49672: PPUSH
49673: CALL_OW 302
49677: PUSH
49678: LD_VAR 0 29
49682: NOT
49683: AND
49684: IFFALSE 50006
// begin if GetTag ( group [ i ] ) = 71 then
49686: LD_VAR 0 4
49690: PUSH
49691: LD_VAR 0 7
49695: ARRAY
49696: PPUSH
49697: CALL_OW 110
49701: PUSH
49702: LD_INT 71
49704: EQUAL
49705: IFFALSE 49746
// begin if HasTask ( group [ i ] ) then
49707: LD_VAR 0 4
49711: PUSH
49712: LD_VAR 0 7
49716: ARRAY
49717: PPUSH
49718: CALL_OW 314
49722: IFFALSE 49728
// continue else
49724: GO 45911
49726: GO 49746
// SetTag ( group [ i ] , 0 ) ;
49728: LD_VAR 0 4
49732: PUSH
49733: LD_VAR 0 7
49737: ARRAY
49738: PPUSH
49739: LD_INT 0
49741: PPUSH
49742: CALL_OW 109
// end ; k := 8 ;
49746: LD_ADDR_VAR 0 9
49750: PUSH
49751: LD_INT 8
49753: ST_TO_ADDR
// x := 0 ;
49754: LD_ADDR_VAR 0 10
49758: PUSH
49759: LD_INT 0
49761: ST_TO_ADDR
// if tmp < k then
49762: LD_VAR 0 14
49766: PUSH
49767: LD_VAR 0 9
49771: LESS
49772: IFFALSE 49784
// k := tmp ;
49774: LD_ADDR_VAR 0 9
49778: PUSH
49779: LD_VAR 0 14
49783: ST_TO_ADDR
// for j = 1 to k do
49784: LD_ADDR_VAR 0 8
49788: PUSH
49789: DOUBLE
49790: LD_INT 1
49792: DEC
49793: ST_TO_ADDR
49794: LD_VAR 0 9
49798: PUSH
49799: FOR_TO
49800: IFFALSE 49898
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
49802: LD_VAR 0 14
49806: PUSH
49807: LD_VAR 0 8
49811: ARRAY
49812: PPUSH
49813: CALL_OW 247
49817: PUSH
49818: LD_INT 1
49820: EQUAL
49821: PUSH
49822: LD_VAR 0 14
49826: PUSH
49827: LD_VAR 0 8
49831: ARRAY
49832: PPUSH
49833: CALL_OW 256
49837: PUSH
49838: LD_INT 250
49840: LESS
49841: PUSH
49842: LD_VAR 0 20
49846: AND
49847: PUSH
49848: LD_VAR 0 20
49852: NOT
49853: PUSH
49854: LD_VAR 0 14
49858: PUSH
49859: LD_VAR 0 8
49863: ARRAY
49864: PPUSH
49865: CALL_OW 256
49869: PUSH
49870: LD_INT 250
49872: GREATEREQUAL
49873: AND
49874: OR
49875: AND
49876: IFFALSE 49896
// begin x := tmp [ j ] ;
49878: LD_ADDR_VAR 0 10
49882: PUSH
49883: LD_VAR 0 14
49887: PUSH
49888: LD_VAR 0 8
49892: ARRAY
49893: ST_TO_ADDR
// break ;
49894: GO 49898
// end ;
49896: GO 49799
49898: POP
49899: POP
// if x then
49900: LD_VAR 0 10
49904: IFFALSE 49928
// ComAttackUnit ( group [ i ] , x ) else
49906: LD_VAR 0 4
49910: PUSH
49911: LD_VAR 0 7
49915: ARRAY
49916: PPUSH
49917: LD_VAR 0 10
49921: PPUSH
49922: CALL_OW 115
49926: GO 49952
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
49928: LD_VAR 0 4
49932: PUSH
49933: LD_VAR 0 7
49937: ARRAY
49938: PPUSH
49939: LD_VAR 0 14
49943: PUSH
49944: LD_INT 1
49946: ARRAY
49947: PPUSH
49948: CALL_OW 115
// if not HasTask ( group [ i ] ) then
49952: LD_VAR 0 4
49956: PUSH
49957: LD_VAR 0 7
49961: ARRAY
49962: PPUSH
49963: CALL_OW 314
49967: NOT
49968: IFFALSE 50006
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
49970: LD_VAR 0 4
49974: PUSH
49975: LD_VAR 0 7
49979: ARRAY
49980: PPUSH
49981: LD_VAR 0 14
49985: PPUSH
49986: LD_VAR 0 4
49990: PUSH
49991: LD_VAR 0 7
49995: ARRAY
49996: PPUSH
49997: CALL_OW 74
50001: PPUSH
50002: CALL_OW 115
// end ; end ; end ;
50006: GO 45911
50008: POP
50009: POP
// wait ( 0 0$1 ) ;
50010: LD_INT 35
50012: PPUSH
50013: CALL_OW 67
// until group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
50017: LD_VAR 0 4
50021: PUSH
50022: EMPTY
50023: EQUAL
50024: PUSH
50025: LD_INT 81
50027: PUSH
50028: LD_VAR 0 35
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PPUSH
50037: CALL_OW 69
50041: NOT
50042: OR
50043: IFFALSE 45896
// end ;
50045: LD_VAR 0 2
50049: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50050: LD_INT 0
50052: PPUSH
50053: PPUSH
50054: PPUSH
50055: PPUSH
// if not base_units then
50056: LD_VAR 0 1
50060: NOT
50061: IFFALSE 50065
// exit ;
50063: GO 50152
// result := false ;
50065: LD_ADDR_VAR 0 2
50069: PUSH
50070: LD_INT 0
50072: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50073: LD_ADDR_VAR 0 5
50077: PUSH
50078: LD_VAR 0 1
50082: PPUSH
50083: LD_INT 21
50085: PUSH
50086: LD_INT 3
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PPUSH
50093: CALL_OW 72
50097: ST_TO_ADDR
// if not tmp then
50098: LD_VAR 0 5
50102: NOT
50103: IFFALSE 50107
// exit ;
50105: GO 50152
// for i in tmp do
50107: LD_ADDR_VAR 0 3
50111: PUSH
50112: LD_VAR 0 5
50116: PUSH
50117: FOR_IN
50118: IFFALSE 50150
// begin result := EnemyInRange ( i , 22 ) ;
50120: LD_ADDR_VAR 0 2
50124: PUSH
50125: LD_VAR 0 3
50129: PPUSH
50130: LD_INT 22
50132: PPUSH
50133: CALL 43689 0 2
50137: ST_TO_ADDR
// if result then
50138: LD_VAR 0 2
50142: IFFALSE 50148
// exit ;
50144: POP
50145: POP
50146: GO 50152
// end ;
50148: GO 50117
50150: POP
50151: POP
// end ;
50152: LD_VAR 0 2
50156: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
50157: LD_INT 0
50159: PPUSH
50160: PPUSH
// if not units then
50161: LD_VAR 0 1
50165: NOT
50166: IFFALSE 50170
// exit ;
50168: GO 50240
// result := [ ] ;
50170: LD_ADDR_VAR 0 3
50174: PUSH
50175: EMPTY
50176: ST_TO_ADDR
// for i in units do
50177: LD_ADDR_VAR 0 4
50181: PUSH
50182: LD_VAR 0 1
50186: PUSH
50187: FOR_IN
50188: IFFALSE 50238
// if GetTag ( i ) = tag then
50190: LD_VAR 0 4
50194: PPUSH
50195: CALL_OW 110
50199: PUSH
50200: LD_VAR 0 2
50204: EQUAL
50205: IFFALSE 50236
// result := Insert ( result , result + 1 , i ) ;
50207: LD_ADDR_VAR 0 3
50211: PUSH
50212: LD_VAR 0 3
50216: PPUSH
50217: LD_VAR 0 3
50221: PUSH
50222: LD_INT 1
50224: PLUS
50225: PPUSH
50226: LD_VAR 0 4
50230: PPUSH
50231: CALL_OW 2
50235: ST_TO_ADDR
50236: GO 50187
50238: POP
50239: POP
// end ;
50240: LD_VAR 0 3
50244: RET
// export function IsDriver ( un ) ; begin
50245: LD_INT 0
50247: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50248: LD_ADDR_VAR 0 2
50252: PUSH
50253: LD_VAR 0 1
50257: PUSH
50258: LD_INT 55
50260: PUSH
50261: EMPTY
50262: LIST
50263: PPUSH
50264: CALL_OW 69
50268: IN
50269: ST_TO_ADDR
// end ;
50270: LD_VAR 0 2
50274: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50275: LD_INT 0
50277: PPUSH
50278: PPUSH
// list := [ ] ;
50279: LD_ADDR_VAR 0 5
50283: PUSH
50284: EMPTY
50285: ST_TO_ADDR
// case d of 0 :
50286: LD_VAR 0 3
50290: PUSH
50291: LD_INT 0
50293: DOUBLE
50294: EQUAL
50295: IFTRUE 50299
50297: GO 50432
50299: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50300: LD_ADDR_VAR 0 5
50304: PUSH
50305: LD_VAR 0 1
50309: PUSH
50310: LD_INT 4
50312: MINUS
50313: PUSH
50314: LD_VAR 0 2
50318: PUSH
50319: LD_INT 4
50321: MINUS
50322: PUSH
50323: LD_INT 2
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: LIST
50330: PUSH
50331: LD_VAR 0 1
50335: PUSH
50336: LD_INT 3
50338: MINUS
50339: PUSH
50340: LD_VAR 0 2
50344: PUSH
50345: LD_INT 1
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: LIST
50352: PUSH
50353: LD_VAR 0 1
50357: PUSH
50358: LD_INT 4
50360: PLUS
50361: PUSH
50362: LD_VAR 0 2
50366: PUSH
50367: LD_INT 4
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: LIST
50374: PUSH
50375: LD_VAR 0 1
50379: PUSH
50380: LD_INT 3
50382: PLUS
50383: PUSH
50384: LD_VAR 0 2
50388: PUSH
50389: LD_INT 3
50391: PLUS
50392: PUSH
50393: LD_INT 5
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: LIST
50400: PUSH
50401: LD_VAR 0 1
50405: PUSH
50406: LD_VAR 0 2
50410: PUSH
50411: LD_INT 4
50413: PLUS
50414: PUSH
50415: LD_INT 0
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: LIST
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: ST_TO_ADDR
// end ; 1 :
50430: GO 51130
50432: LD_INT 1
50434: DOUBLE
50435: EQUAL
50436: IFTRUE 50440
50438: GO 50573
50440: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
50441: LD_ADDR_VAR 0 5
50445: PUSH
50446: LD_VAR 0 1
50450: PUSH
50451: LD_VAR 0 2
50455: PUSH
50456: LD_INT 4
50458: MINUS
50459: PUSH
50460: LD_INT 3
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: LIST
50467: PUSH
50468: LD_VAR 0 1
50472: PUSH
50473: LD_INT 3
50475: MINUS
50476: PUSH
50477: LD_VAR 0 2
50481: PUSH
50482: LD_INT 3
50484: MINUS
50485: PUSH
50486: LD_INT 2
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: LIST
50493: PUSH
50494: LD_VAR 0 1
50498: PUSH
50499: LD_INT 4
50501: MINUS
50502: PUSH
50503: LD_VAR 0 2
50507: PUSH
50508: LD_INT 1
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: LIST
50515: PUSH
50516: LD_VAR 0 1
50520: PUSH
50521: LD_VAR 0 2
50525: PUSH
50526: LD_INT 3
50528: PLUS
50529: PUSH
50530: LD_INT 0
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: LIST
50537: PUSH
50538: LD_VAR 0 1
50542: PUSH
50543: LD_INT 4
50545: PLUS
50546: PUSH
50547: LD_VAR 0 2
50551: PUSH
50552: LD_INT 4
50554: PLUS
50555: PUSH
50556: LD_INT 5
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: LIST
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: ST_TO_ADDR
// end ; 2 :
50571: GO 51130
50573: LD_INT 2
50575: DOUBLE
50576: EQUAL
50577: IFTRUE 50581
50579: GO 50710
50581: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
50582: LD_ADDR_VAR 0 5
50586: PUSH
50587: LD_VAR 0 1
50591: PUSH
50592: LD_VAR 0 2
50596: PUSH
50597: LD_INT 3
50599: MINUS
50600: PUSH
50601: LD_INT 3
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: LIST
50608: PUSH
50609: LD_VAR 0 1
50613: PUSH
50614: LD_INT 4
50616: PLUS
50617: PUSH
50618: LD_VAR 0 2
50622: PUSH
50623: LD_INT 4
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: LIST
50630: PUSH
50631: LD_VAR 0 1
50635: PUSH
50636: LD_VAR 0 2
50640: PUSH
50641: LD_INT 4
50643: PLUS
50644: PUSH
50645: LD_INT 0
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: LIST
50652: PUSH
50653: LD_VAR 0 1
50657: PUSH
50658: LD_INT 3
50660: MINUS
50661: PUSH
50662: LD_VAR 0 2
50666: PUSH
50667: LD_INT 1
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: LIST
50674: PUSH
50675: LD_VAR 0 1
50679: PUSH
50680: LD_INT 4
50682: MINUS
50683: PUSH
50684: LD_VAR 0 2
50688: PUSH
50689: LD_INT 4
50691: MINUS
50692: PUSH
50693: LD_INT 2
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: LIST
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: ST_TO_ADDR
// end ; 3 :
50708: GO 51130
50710: LD_INT 3
50712: DOUBLE
50713: EQUAL
50714: IFTRUE 50718
50716: GO 50851
50718: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
50719: LD_ADDR_VAR 0 5
50723: PUSH
50724: LD_VAR 0 1
50728: PUSH
50729: LD_INT 3
50731: PLUS
50732: PUSH
50733: LD_VAR 0 2
50737: PUSH
50738: LD_INT 4
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: LIST
50745: PUSH
50746: LD_VAR 0 1
50750: PUSH
50751: LD_INT 4
50753: PLUS
50754: PUSH
50755: LD_VAR 0 2
50759: PUSH
50760: LD_INT 4
50762: PLUS
50763: PUSH
50764: LD_INT 5
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: LIST
50771: PUSH
50772: LD_VAR 0 1
50776: PUSH
50777: LD_INT 4
50779: MINUS
50780: PUSH
50781: LD_VAR 0 2
50785: PUSH
50786: LD_INT 1
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: LIST
50793: PUSH
50794: LD_VAR 0 1
50798: PUSH
50799: LD_VAR 0 2
50803: PUSH
50804: LD_INT 4
50806: MINUS
50807: PUSH
50808: LD_INT 3
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: LIST
50815: PUSH
50816: LD_VAR 0 1
50820: PUSH
50821: LD_INT 3
50823: MINUS
50824: PUSH
50825: LD_VAR 0 2
50829: PUSH
50830: LD_INT 3
50832: MINUS
50833: PUSH
50834: LD_INT 2
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: LIST
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: ST_TO_ADDR
// end ; 4 :
50849: GO 51130
50851: LD_INT 4
50853: DOUBLE
50854: EQUAL
50855: IFTRUE 50859
50857: GO 50992
50859: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
50860: LD_ADDR_VAR 0 5
50864: PUSH
50865: LD_VAR 0 1
50869: PUSH
50870: LD_VAR 0 2
50874: PUSH
50875: LD_INT 4
50877: PLUS
50878: PUSH
50879: LD_INT 0
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: LIST
50886: PUSH
50887: LD_VAR 0 1
50891: PUSH
50892: LD_INT 3
50894: PLUS
50895: PUSH
50896: LD_VAR 0 2
50900: PUSH
50901: LD_INT 3
50903: PLUS
50904: PUSH
50905: LD_INT 5
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: LIST
50912: PUSH
50913: LD_VAR 0 1
50917: PUSH
50918: LD_INT 4
50920: PLUS
50921: PUSH
50922: LD_VAR 0 2
50926: PUSH
50927: LD_INT 4
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: LIST
50934: PUSH
50935: LD_VAR 0 1
50939: PUSH
50940: LD_VAR 0 2
50944: PUSH
50945: LD_INT 3
50947: MINUS
50948: PUSH
50949: LD_INT 3
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: LIST
50956: PUSH
50957: LD_VAR 0 1
50961: PUSH
50962: LD_INT 4
50964: MINUS
50965: PUSH
50966: LD_VAR 0 2
50970: PUSH
50971: LD_INT 4
50973: MINUS
50974: PUSH
50975: LD_INT 2
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: LIST
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: ST_TO_ADDR
// end ; 5 :
50990: GO 51130
50992: LD_INT 5
50994: DOUBLE
50995: EQUAL
50996: IFTRUE 51000
50998: GO 51129
51000: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51001: LD_ADDR_VAR 0 5
51005: PUSH
51006: LD_VAR 0 1
51010: PUSH
51011: LD_INT 4
51013: MINUS
51014: PUSH
51015: LD_VAR 0 2
51019: PUSH
51020: LD_INT 1
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: LIST
51027: PUSH
51028: LD_VAR 0 1
51032: PUSH
51033: LD_VAR 0 2
51037: PUSH
51038: LD_INT 4
51040: MINUS
51041: PUSH
51042: LD_INT 3
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: LIST
51049: PUSH
51050: LD_VAR 0 1
51054: PUSH
51055: LD_INT 4
51057: PLUS
51058: PUSH
51059: LD_VAR 0 2
51063: PUSH
51064: LD_INT 4
51066: PLUS
51067: PUSH
51068: LD_INT 5
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: LIST
51075: PUSH
51076: LD_VAR 0 1
51080: PUSH
51081: LD_INT 3
51083: PLUS
51084: PUSH
51085: LD_VAR 0 2
51089: PUSH
51090: LD_INT 4
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: LIST
51097: PUSH
51098: LD_VAR 0 1
51102: PUSH
51103: LD_VAR 0 2
51107: PUSH
51108: LD_INT 3
51110: PLUS
51111: PUSH
51112: LD_INT 0
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: LIST
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: ST_TO_ADDR
// end ; end ;
51127: GO 51130
51129: POP
// result := list ;
51130: LD_ADDR_VAR 0 4
51134: PUSH
51135: LD_VAR 0 5
51139: ST_TO_ADDR
// end ;
51140: LD_VAR 0 4
51144: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51145: LD_INT 0
51147: PPUSH
51148: PPUSH
51149: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51150: LD_VAR 0 1
51154: NOT
51155: PUSH
51156: LD_VAR 0 2
51160: PUSH
51161: LD_INT 1
51163: PUSH
51164: LD_INT 2
51166: PUSH
51167: LD_INT 3
51169: PUSH
51170: LD_INT 4
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: IN
51179: NOT
51180: OR
51181: IFFALSE 51185
// exit ;
51183: GO 51277
// tmp := [ ] ;
51185: LD_ADDR_VAR 0 5
51189: PUSH
51190: EMPTY
51191: ST_TO_ADDR
// for i in units do
51192: LD_ADDR_VAR 0 4
51196: PUSH
51197: LD_VAR 0 1
51201: PUSH
51202: FOR_IN
51203: IFFALSE 51246
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
51205: LD_ADDR_VAR 0 5
51209: PUSH
51210: LD_VAR 0 5
51214: PPUSH
51215: LD_VAR 0 5
51219: PUSH
51220: LD_INT 1
51222: PLUS
51223: PPUSH
51224: LD_VAR 0 4
51228: PPUSH
51229: LD_VAR 0 2
51233: PPUSH
51234: CALL_OW 259
51238: PPUSH
51239: CALL_OW 2
51243: ST_TO_ADDR
51244: GO 51202
51246: POP
51247: POP
// if not tmp then
51248: LD_VAR 0 5
51252: NOT
51253: IFFALSE 51257
// exit ;
51255: GO 51277
// result := SortListByListDesc ( units , tmp ) ;
51257: LD_ADDR_VAR 0 3
51261: PUSH
51262: LD_VAR 0 1
51266: PPUSH
51267: LD_VAR 0 5
51271: PPUSH
51272: CALL_OW 77
51276: ST_TO_ADDR
// end ;
51277: LD_VAR 0 3
51281: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51282: LD_INT 0
51284: PPUSH
51285: PPUSH
51286: PPUSH
// x := GetX ( building ) ;
51287: LD_ADDR_VAR 0 4
51291: PUSH
51292: LD_VAR 0 2
51296: PPUSH
51297: CALL_OW 250
51301: ST_TO_ADDR
// y := GetY ( building ) ;
51302: LD_ADDR_VAR 0 5
51306: PUSH
51307: LD_VAR 0 2
51311: PPUSH
51312: CALL_OW 251
51316: ST_TO_ADDR
// if GetTaskList ( unit ) then
51317: LD_VAR 0 1
51321: PPUSH
51322: CALL_OW 437
51326: IFFALSE 51421
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51328: LD_STRING e
51330: PUSH
51331: LD_VAR 0 1
51335: PPUSH
51336: CALL_OW 437
51340: PUSH
51341: LD_INT 1
51343: ARRAY
51344: PUSH
51345: LD_INT 1
51347: ARRAY
51348: EQUAL
51349: PUSH
51350: LD_VAR 0 4
51354: PUSH
51355: LD_VAR 0 1
51359: PPUSH
51360: CALL_OW 437
51364: PUSH
51365: LD_INT 1
51367: ARRAY
51368: PUSH
51369: LD_INT 2
51371: ARRAY
51372: EQUAL
51373: AND
51374: PUSH
51375: LD_VAR 0 5
51379: PUSH
51380: LD_VAR 0 1
51384: PPUSH
51385: CALL_OW 437
51389: PUSH
51390: LD_INT 1
51392: ARRAY
51393: PUSH
51394: LD_INT 3
51396: ARRAY
51397: EQUAL
51398: AND
51399: IFFALSE 51411
// result := true else
51401: LD_ADDR_VAR 0 3
51405: PUSH
51406: LD_INT 1
51408: ST_TO_ADDR
51409: GO 51419
// result := false ;
51411: LD_ADDR_VAR 0 3
51415: PUSH
51416: LD_INT 0
51418: ST_TO_ADDR
// end else
51419: GO 51429
// result := false ;
51421: LD_ADDR_VAR 0 3
51425: PUSH
51426: LD_INT 0
51428: ST_TO_ADDR
// end ;
51429: LD_VAR 0 3
51433: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
51434: LD_INT 0
51436: PPUSH
51437: PPUSH
51438: PPUSH
51439: PPUSH
// if not unit or not area then
51440: LD_VAR 0 1
51444: NOT
51445: PUSH
51446: LD_VAR 0 2
51450: NOT
51451: OR
51452: IFFALSE 51456
// exit ;
51454: GO 51620
// tmp := AreaToList ( area , i ) ;
51456: LD_ADDR_VAR 0 6
51460: PUSH
51461: LD_VAR 0 2
51465: PPUSH
51466: LD_VAR 0 5
51470: PPUSH
51471: CALL_OW 517
51475: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
51476: LD_ADDR_VAR 0 5
51480: PUSH
51481: DOUBLE
51482: LD_INT 1
51484: DEC
51485: ST_TO_ADDR
51486: LD_VAR 0 6
51490: PUSH
51491: LD_INT 1
51493: ARRAY
51494: PUSH
51495: FOR_TO
51496: IFFALSE 51618
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
51498: LD_ADDR_VAR 0 7
51502: PUSH
51503: LD_VAR 0 6
51507: PUSH
51508: LD_INT 1
51510: ARRAY
51511: PUSH
51512: LD_VAR 0 5
51516: ARRAY
51517: PUSH
51518: LD_VAR 0 6
51522: PUSH
51523: LD_INT 2
51525: ARRAY
51526: PUSH
51527: LD_VAR 0 5
51531: ARRAY
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
51537: LD_VAR 0 7
51541: PUSH
51542: LD_INT 1
51544: ARRAY
51545: PPUSH
51546: LD_VAR 0 7
51550: PUSH
51551: LD_INT 2
51553: ARRAY
51554: PPUSH
51555: CALL_OW 428
51559: PUSH
51560: LD_INT 0
51562: EQUAL
51563: IFFALSE 51616
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
51565: LD_VAR 0 1
51569: PPUSH
51570: LD_VAR 0 7
51574: PUSH
51575: LD_INT 1
51577: ARRAY
51578: PPUSH
51579: LD_VAR 0 7
51583: PUSH
51584: LD_INT 2
51586: ARRAY
51587: PPUSH
51588: LD_VAR 0 3
51592: PPUSH
51593: CALL_OW 48
// result := IsPlaced ( unit ) ;
51597: LD_ADDR_VAR 0 4
51601: PUSH
51602: LD_VAR 0 1
51606: PPUSH
51607: CALL_OW 305
51611: ST_TO_ADDR
// exit ;
51612: POP
51613: POP
51614: GO 51620
// end ; end ;
51616: GO 51495
51618: POP
51619: POP
// end ;
51620: LD_VAR 0 4
51624: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
51625: LD_INT 0
51627: PPUSH
51628: PPUSH
51629: PPUSH
// if not side or side > 8 then
51630: LD_VAR 0 1
51634: NOT
51635: PUSH
51636: LD_VAR 0 1
51640: PUSH
51641: LD_INT 8
51643: GREATER
51644: OR
51645: IFFALSE 51649
// exit ;
51647: GO 51836
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
51649: LD_ADDR_VAR 0 4
51653: PUSH
51654: LD_INT 22
51656: PUSH
51657: LD_VAR 0 1
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 21
51668: PUSH
51669: LD_INT 3
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PPUSH
51680: CALL_OW 69
51684: ST_TO_ADDR
// if not tmp then
51685: LD_VAR 0 4
51689: NOT
51690: IFFALSE 51694
// exit ;
51692: GO 51836
// enable_addtolog := true ;
51694: LD_ADDR_OWVAR 81
51698: PUSH
51699: LD_INT 1
51701: ST_TO_ADDR
// AddToLog ( [ ) ;
51702: LD_STRING [
51704: PPUSH
51705: CALL_OW 561
// for i in tmp do
51709: LD_ADDR_VAR 0 3
51713: PUSH
51714: LD_VAR 0 4
51718: PUSH
51719: FOR_IN
51720: IFFALSE 51827
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
51722: LD_STRING [
51724: PUSH
51725: LD_VAR 0 3
51729: PPUSH
51730: CALL_OW 266
51734: STR
51735: PUSH
51736: LD_STRING , 
51738: STR
51739: PUSH
51740: LD_VAR 0 3
51744: PPUSH
51745: CALL_OW 250
51749: STR
51750: PUSH
51751: LD_STRING , 
51753: STR
51754: PUSH
51755: LD_VAR 0 3
51759: PPUSH
51760: CALL_OW 251
51764: STR
51765: PUSH
51766: LD_STRING , 
51768: STR
51769: PUSH
51770: LD_VAR 0 3
51774: PPUSH
51775: CALL_OW 254
51779: STR
51780: PUSH
51781: LD_STRING , 
51783: STR
51784: PUSH
51785: LD_VAR 0 3
51789: PPUSH
51790: LD_INT 1
51792: PPUSH
51793: CALL_OW 268
51797: STR
51798: PUSH
51799: LD_STRING , 
51801: STR
51802: PUSH
51803: LD_VAR 0 3
51807: PPUSH
51808: LD_INT 2
51810: PPUSH
51811: CALL_OW 268
51815: STR
51816: PUSH
51817: LD_STRING ],
51819: STR
51820: PPUSH
51821: CALL_OW 561
// end ;
51825: GO 51719
51827: POP
51828: POP
// AddToLog ( ]; ) ;
51829: LD_STRING ];
51831: PPUSH
51832: CALL_OW 561
// end ;
51836: LD_VAR 0 2
51840: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
51841: LD_INT 0
51843: PPUSH
51844: PPUSH
51845: PPUSH
51846: PPUSH
51847: PPUSH
// if not area or not rate or not max then
51848: LD_VAR 0 1
51852: NOT
51853: PUSH
51854: LD_VAR 0 2
51858: NOT
51859: OR
51860: PUSH
51861: LD_VAR 0 4
51865: NOT
51866: OR
51867: IFFALSE 51871
// exit ;
51869: GO 52063
// while 1 do
51871: LD_INT 1
51873: IFFALSE 52063
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
51875: LD_ADDR_VAR 0 9
51879: PUSH
51880: LD_VAR 0 1
51884: PPUSH
51885: LD_INT 1
51887: PPUSH
51888: CALL_OW 287
51892: PUSH
51893: LD_INT 10
51895: MUL
51896: ST_TO_ADDR
// r := rate / 10 ;
51897: LD_ADDR_VAR 0 7
51901: PUSH
51902: LD_VAR 0 2
51906: PUSH
51907: LD_INT 10
51909: DIVREAL
51910: ST_TO_ADDR
// time := 1 1$00 ;
51911: LD_ADDR_VAR 0 8
51915: PUSH
51916: LD_INT 2100
51918: ST_TO_ADDR
// if amount < min then
51919: LD_VAR 0 9
51923: PUSH
51924: LD_VAR 0 3
51928: LESS
51929: IFFALSE 51947
// r := r * 2 else
51931: LD_ADDR_VAR 0 7
51935: PUSH
51936: LD_VAR 0 7
51940: PUSH
51941: LD_INT 2
51943: MUL
51944: ST_TO_ADDR
51945: GO 51973
// if amount > max then
51947: LD_VAR 0 9
51951: PUSH
51952: LD_VAR 0 4
51956: GREATER
51957: IFFALSE 51973
// r := r / 2 ;
51959: LD_ADDR_VAR 0 7
51963: PUSH
51964: LD_VAR 0 7
51968: PUSH
51969: LD_INT 2
51971: DIVREAL
51972: ST_TO_ADDR
// time := time / r ;
51973: LD_ADDR_VAR 0 8
51977: PUSH
51978: LD_VAR 0 8
51982: PUSH
51983: LD_VAR 0 7
51987: DIVREAL
51988: ST_TO_ADDR
// if time < 0 then
51989: LD_VAR 0 8
51993: PUSH
51994: LD_INT 0
51996: LESS
51997: IFFALSE 52014
// time := time * - 1 ;
51999: LD_ADDR_VAR 0 8
52003: PUSH
52004: LD_VAR 0 8
52008: PUSH
52009: LD_INT 1
52011: NEG
52012: MUL
52013: ST_TO_ADDR
// wait ( time ) ;
52014: LD_VAR 0 8
52018: PPUSH
52019: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
52023: LD_INT 35
52025: PPUSH
52026: LD_INT 875
52028: PPUSH
52029: CALL_OW 12
52033: PPUSH
52034: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52038: LD_INT 1
52040: PPUSH
52041: LD_INT 5
52043: PPUSH
52044: CALL_OW 12
52048: PPUSH
52049: LD_VAR 0 1
52053: PPUSH
52054: LD_INT 1
52056: PPUSH
52057: CALL_OW 55
// end ;
52061: GO 51871
// end ;
52063: LD_VAR 0 5
52067: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52068: LD_INT 0
52070: PPUSH
52071: PPUSH
52072: PPUSH
52073: PPUSH
52074: PPUSH
52075: PPUSH
52076: PPUSH
52077: PPUSH
// if not turrets or not factories then
52078: LD_VAR 0 1
52082: NOT
52083: PUSH
52084: LD_VAR 0 2
52088: NOT
52089: OR
52090: IFFALSE 52094
// exit ;
52092: GO 52401
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52094: LD_ADDR_VAR 0 10
52098: PUSH
52099: LD_INT 5
52101: PUSH
52102: LD_INT 6
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 2
52111: PUSH
52112: LD_INT 4
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 3
52121: PUSH
52122: LD_INT 5
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 24
52136: PUSH
52137: LD_INT 25
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 23
52146: PUSH
52147: LD_INT 27
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 42
52160: PUSH
52161: LD_INT 43
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 44
52170: PUSH
52171: LD_INT 46
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 45
52180: PUSH
52181: LD_INT 47
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: LIST
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: LIST
52197: ST_TO_ADDR
// result := [ ] ;
52198: LD_ADDR_VAR 0 3
52202: PUSH
52203: EMPTY
52204: ST_TO_ADDR
// for i in turrets do
52205: LD_ADDR_VAR 0 4
52209: PUSH
52210: LD_VAR 0 1
52214: PUSH
52215: FOR_IN
52216: IFFALSE 52399
// begin nat := GetNation ( i ) ;
52218: LD_ADDR_VAR 0 7
52222: PUSH
52223: LD_VAR 0 4
52227: PPUSH
52228: CALL_OW 248
52232: ST_TO_ADDR
// weapon := 0 ;
52233: LD_ADDR_VAR 0 8
52237: PUSH
52238: LD_INT 0
52240: ST_TO_ADDR
// if not nat then
52241: LD_VAR 0 7
52245: NOT
52246: IFFALSE 52250
// continue ;
52248: GO 52215
// for j in list [ nat ] do
52250: LD_ADDR_VAR 0 5
52254: PUSH
52255: LD_VAR 0 10
52259: PUSH
52260: LD_VAR 0 7
52264: ARRAY
52265: PUSH
52266: FOR_IN
52267: IFFALSE 52308
// if GetBWeapon ( i ) = j [ 1 ] then
52269: LD_VAR 0 4
52273: PPUSH
52274: CALL_OW 269
52278: PUSH
52279: LD_VAR 0 5
52283: PUSH
52284: LD_INT 1
52286: ARRAY
52287: EQUAL
52288: IFFALSE 52306
// begin weapon := j [ 2 ] ;
52290: LD_ADDR_VAR 0 8
52294: PUSH
52295: LD_VAR 0 5
52299: PUSH
52300: LD_INT 2
52302: ARRAY
52303: ST_TO_ADDR
// break ;
52304: GO 52308
// end ;
52306: GO 52266
52308: POP
52309: POP
// if not weapon then
52310: LD_VAR 0 8
52314: NOT
52315: IFFALSE 52319
// continue ;
52317: GO 52215
// for k in factories do
52319: LD_ADDR_VAR 0 6
52323: PUSH
52324: LD_VAR 0 2
52328: PUSH
52329: FOR_IN
52330: IFFALSE 52395
// begin weapons := AvailableWeaponList ( k ) ;
52332: LD_ADDR_VAR 0 9
52336: PUSH
52337: LD_VAR 0 6
52341: PPUSH
52342: CALL_OW 478
52346: ST_TO_ADDR
// if not weapons then
52347: LD_VAR 0 9
52351: NOT
52352: IFFALSE 52356
// continue ;
52354: GO 52329
// if weapon in weapons then
52356: LD_VAR 0 8
52360: PUSH
52361: LD_VAR 0 9
52365: IN
52366: IFFALSE 52393
// begin result := [ i , weapon ] ;
52368: LD_ADDR_VAR 0 3
52372: PUSH
52373: LD_VAR 0 4
52377: PUSH
52378: LD_VAR 0 8
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: ST_TO_ADDR
// exit ;
52387: POP
52388: POP
52389: POP
52390: POP
52391: GO 52401
// end ; end ;
52393: GO 52329
52395: POP
52396: POP
// end ;
52397: GO 52215
52399: POP
52400: POP
// end ;
52401: LD_VAR 0 3
52405: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
52406: LD_INT 0
52408: PPUSH
// if not side or side > 8 then
52409: LD_VAR 0 3
52413: NOT
52414: PUSH
52415: LD_VAR 0 3
52419: PUSH
52420: LD_INT 8
52422: GREATER
52423: OR
52424: IFFALSE 52428
// exit ;
52426: GO 52487
// if not range then
52428: LD_VAR 0 4
52432: NOT
52433: IFFALSE 52444
// range := - 12 ;
52435: LD_ADDR_VAR 0 4
52439: PUSH
52440: LD_INT 12
52442: NEG
52443: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
52444: LD_VAR 0 1
52448: PPUSH
52449: LD_VAR 0 2
52453: PPUSH
52454: LD_VAR 0 3
52458: PPUSH
52459: LD_VAR 0 4
52463: PPUSH
52464: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
52468: LD_VAR 0 1
52472: PPUSH
52473: LD_VAR 0 2
52477: PPUSH
52478: LD_VAR 0 3
52482: PPUSH
52483: CALL_OW 331
// end ;
52487: LD_VAR 0 5
52491: RET
// export function Video ( mode ) ; begin
52492: LD_INT 0
52494: PPUSH
// ingame_video = mode ;
52495: LD_ADDR_OWVAR 52
52499: PUSH
52500: LD_VAR 0 1
52504: ST_TO_ADDR
// interface_hidden = mode ;
52505: LD_ADDR_OWVAR 54
52509: PUSH
52510: LD_VAR 0 1
52514: ST_TO_ADDR
// end ;
52515: LD_VAR 0 2
52519: RET
// export function Join ( array , element ) ; begin
52520: LD_INT 0
52522: PPUSH
// result := array ^ element ;
52523: LD_ADDR_VAR 0 3
52527: PUSH
52528: LD_VAR 0 1
52532: PUSH
52533: LD_VAR 0 2
52537: ADD
52538: ST_TO_ADDR
// end ;
52539: LD_VAR 0 3
52543: RET
// export function JoinUnion ( array , element ) ; begin
52544: LD_INT 0
52546: PPUSH
// result := array union element ;
52547: LD_ADDR_VAR 0 3
52551: PUSH
52552: LD_VAR 0 1
52556: PUSH
52557: LD_VAR 0 2
52561: UNION
52562: ST_TO_ADDR
// end ;
52563: LD_VAR 0 3
52567: RET
// export function GetBehemoths ( side ) ; begin
52568: LD_INT 0
52570: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
52571: LD_ADDR_VAR 0 2
52575: PUSH
52576: LD_INT 22
52578: PUSH
52579: LD_VAR 0 1
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 31
52590: PUSH
52591: LD_INT 25
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PPUSH
52602: CALL_OW 69
52606: ST_TO_ADDR
// end ;
52607: LD_VAR 0 2
52611: RET
// export function Shuffle ( array ) ; var i , index ; begin
52612: LD_INT 0
52614: PPUSH
52615: PPUSH
52616: PPUSH
// result := [ ] ;
52617: LD_ADDR_VAR 0 2
52621: PUSH
52622: EMPTY
52623: ST_TO_ADDR
// if not array then
52624: LD_VAR 0 1
52628: NOT
52629: IFFALSE 52633
// exit ;
52631: GO 52732
// Randomize ;
52633: CALL_OW 10
// for i = array downto 1 do
52637: LD_ADDR_VAR 0 3
52641: PUSH
52642: DOUBLE
52643: LD_VAR 0 1
52647: INC
52648: ST_TO_ADDR
52649: LD_INT 1
52651: PUSH
52652: FOR_DOWNTO
52653: IFFALSE 52730
// begin index := rand ( 1 , array ) ;
52655: LD_ADDR_VAR 0 4
52659: PUSH
52660: LD_INT 1
52662: PPUSH
52663: LD_VAR 0 1
52667: PPUSH
52668: CALL_OW 12
52672: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
52673: LD_ADDR_VAR 0 2
52677: PUSH
52678: LD_VAR 0 2
52682: PPUSH
52683: LD_VAR 0 2
52687: PUSH
52688: LD_INT 1
52690: PLUS
52691: PPUSH
52692: LD_VAR 0 1
52696: PUSH
52697: LD_VAR 0 4
52701: ARRAY
52702: PPUSH
52703: CALL_OW 2
52707: ST_TO_ADDR
// array := Delete ( array , index ) ;
52708: LD_ADDR_VAR 0 1
52712: PUSH
52713: LD_VAR 0 1
52717: PPUSH
52718: LD_VAR 0 4
52722: PPUSH
52723: CALL_OW 3
52727: ST_TO_ADDR
// end ;
52728: GO 52652
52730: POP
52731: POP
// end ; end_of_file
52732: LD_VAR 0 2
52736: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
52737: GO 52739
52739: DISABLE
// begin ru_radar := 98 ;
52740: LD_ADDR_EXP 45
52744: PUSH
52745: LD_INT 98
52747: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
52748: LD_ADDR_EXP 46
52752: PUSH
52753: LD_INT 89
52755: ST_TO_ADDR
// us_hack := 99 ;
52756: LD_ADDR_EXP 47
52760: PUSH
52761: LD_INT 99
52763: ST_TO_ADDR
// us_artillery := 97 ;
52764: LD_ADDR_EXP 48
52768: PUSH
52769: LD_INT 97
52771: ST_TO_ADDR
// ar_bio_bomb := 91 ;
52772: LD_ADDR_EXP 49
52776: PUSH
52777: LD_INT 91
52779: ST_TO_ADDR
// end ; end_of_file
52780: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
52781: LD_INT 0
52783: PPUSH
52784: PPUSH
// skirmish := false ;
52785: LD_ADDR_EXP 50
52789: PUSH
52790: LD_INT 0
52792: ST_TO_ADDR
// debug_mc := false ;
52793: LD_ADDR_EXP 51
52797: PUSH
52798: LD_INT 0
52800: ST_TO_ADDR
// mc_bases := [ ] ;
52801: LD_ADDR_EXP 52
52805: PUSH
52806: EMPTY
52807: ST_TO_ADDR
// mc_sides := [ ] ;
52808: LD_ADDR_EXP 78
52812: PUSH
52813: EMPTY
52814: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
52815: LD_ADDR_EXP 53
52819: PUSH
52820: EMPTY
52821: ST_TO_ADDR
// mc_building_repairs := [ ] ;
52822: LD_ADDR_EXP 54
52826: PUSH
52827: EMPTY
52828: ST_TO_ADDR
// mc_need_heal := [ ] ;
52829: LD_ADDR_EXP 55
52833: PUSH
52834: EMPTY
52835: ST_TO_ADDR
// mc_healers := [ ] ;
52836: LD_ADDR_EXP 56
52840: PUSH
52841: EMPTY
52842: ST_TO_ADDR
// mc_build_list := [ ] ;
52843: LD_ADDR_EXP 57
52847: PUSH
52848: EMPTY
52849: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
52850: LD_ADDR_EXP 84
52854: PUSH
52855: EMPTY
52856: ST_TO_ADDR
// mc_builders := [ ] ;
52857: LD_ADDR_EXP 58
52861: PUSH
52862: EMPTY
52863: ST_TO_ADDR
// mc_construct_list := [ ] ;
52864: LD_ADDR_EXP 59
52868: PUSH
52869: EMPTY
52870: ST_TO_ADDR
// mc_turret_list := [ ] ;
52871: LD_ADDR_EXP 60
52875: PUSH
52876: EMPTY
52877: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
52878: LD_ADDR_EXP 61
52882: PUSH
52883: EMPTY
52884: ST_TO_ADDR
// mc_miners := [ ] ;
52885: LD_ADDR_EXP 66
52889: PUSH
52890: EMPTY
52891: ST_TO_ADDR
// mc_mines := [ ] ;
52892: LD_ADDR_EXP 65
52896: PUSH
52897: EMPTY
52898: ST_TO_ADDR
// mc_minefields := [ ] ;
52899: LD_ADDR_EXP 67
52903: PUSH
52904: EMPTY
52905: ST_TO_ADDR
// mc_crates := [ ] ;
52906: LD_ADDR_EXP 68
52910: PUSH
52911: EMPTY
52912: ST_TO_ADDR
// mc_crates_collector := [ ] ;
52913: LD_ADDR_EXP 69
52917: PUSH
52918: EMPTY
52919: ST_TO_ADDR
// mc_crates_area := [ ] ;
52920: LD_ADDR_EXP 70
52924: PUSH
52925: EMPTY
52926: ST_TO_ADDR
// mc_vehicles := [ ] ;
52927: LD_ADDR_EXP 71
52931: PUSH
52932: EMPTY
52933: ST_TO_ADDR
// mc_attack := [ ] ;
52934: LD_ADDR_EXP 72
52938: PUSH
52939: EMPTY
52940: ST_TO_ADDR
// mc_produce := [ ] ;
52941: LD_ADDR_EXP 73
52945: PUSH
52946: EMPTY
52947: ST_TO_ADDR
// mc_defender := [ ] ;
52948: LD_ADDR_EXP 74
52952: PUSH
52953: EMPTY
52954: ST_TO_ADDR
// mc_parking := [ ] ;
52955: LD_ADDR_EXP 76
52959: PUSH
52960: EMPTY
52961: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
52962: LD_ADDR_EXP 62
52966: PUSH
52967: EMPTY
52968: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
52969: LD_ADDR_EXP 64
52973: PUSH
52974: EMPTY
52975: ST_TO_ADDR
// mc_scan := [ ] ;
52976: LD_ADDR_EXP 75
52980: PUSH
52981: EMPTY
52982: ST_TO_ADDR
// mc_scan_area := [ ] ;
52983: LD_ADDR_EXP 77
52987: PUSH
52988: EMPTY
52989: ST_TO_ADDR
// mc_tech := [ ] ;
52990: LD_ADDR_EXP 79
52994: PUSH
52995: EMPTY
52996: ST_TO_ADDR
// mc_class := [ ] ;
52997: LD_ADDR_EXP 93
53001: PUSH
53002: EMPTY
53003: ST_TO_ADDR
// mc_class_case_use := [ ] ;
53004: LD_ADDR_EXP 94
53008: PUSH
53009: EMPTY
53010: ST_TO_ADDR
// end ;
53011: LD_VAR 0 1
53015: RET
// export function MC_Kill ( base ) ; begin
53016: LD_INT 0
53018: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
53019: LD_ADDR_EXP 52
53023: PUSH
53024: LD_EXP 52
53028: PPUSH
53029: LD_VAR 0 1
53033: PPUSH
53034: EMPTY
53035: PPUSH
53036: CALL_OW 1
53040: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
53041: LD_ADDR_EXP 53
53045: PUSH
53046: LD_EXP 53
53050: PPUSH
53051: LD_VAR 0 1
53055: PPUSH
53056: EMPTY
53057: PPUSH
53058: CALL_OW 1
53062: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
53063: LD_ADDR_EXP 54
53067: PUSH
53068: LD_EXP 54
53072: PPUSH
53073: LD_VAR 0 1
53077: PPUSH
53078: EMPTY
53079: PPUSH
53080: CALL_OW 1
53084: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
53085: LD_ADDR_EXP 55
53089: PUSH
53090: LD_EXP 55
53094: PPUSH
53095: LD_VAR 0 1
53099: PPUSH
53100: EMPTY
53101: PPUSH
53102: CALL_OW 1
53106: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
53107: LD_ADDR_EXP 56
53111: PUSH
53112: LD_EXP 56
53116: PPUSH
53117: LD_VAR 0 1
53121: PPUSH
53122: EMPTY
53123: PPUSH
53124: CALL_OW 1
53128: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
53129: LD_ADDR_EXP 57
53133: PUSH
53134: LD_EXP 57
53138: PPUSH
53139: LD_VAR 0 1
53143: PPUSH
53144: EMPTY
53145: PPUSH
53146: CALL_OW 1
53150: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
53151: LD_ADDR_EXP 58
53155: PUSH
53156: LD_EXP 58
53160: PPUSH
53161: LD_VAR 0 1
53165: PPUSH
53166: EMPTY
53167: PPUSH
53168: CALL_OW 1
53172: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
53173: LD_ADDR_EXP 59
53177: PUSH
53178: LD_EXP 59
53182: PPUSH
53183: LD_VAR 0 1
53187: PPUSH
53188: EMPTY
53189: PPUSH
53190: CALL_OW 1
53194: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
53195: LD_ADDR_EXP 60
53199: PUSH
53200: LD_EXP 60
53204: PPUSH
53205: LD_VAR 0 1
53209: PPUSH
53210: EMPTY
53211: PPUSH
53212: CALL_OW 1
53216: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
53217: LD_ADDR_EXP 61
53221: PUSH
53222: LD_EXP 61
53226: PPUSH
53227: LD_VAR 0 1
53231: PPUSH
53232: EMPTY
53233: PPUSH
53234: CALL_OW 1
53238: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
53239: LD_ADDR_EXP 62
53243: PUSH
53244: LD_EXP 62
53248: PPUSH
53249: LD_VAR 0 1
53253: PPUSH
53254: EMPTY
53255: PPUSH
53256: CALL_OW 1
53260: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
53261: LD_ADDR_EXP 63
53265: PUSH
53266: LD_EXP 63
53270: PPUSH
53271: LD_VAR 0 1
53275: PPUSH
53276: LD_INT 0
53278: PPUSH
53279: CALL_OW 1
53283: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
53284: LD_ADDR_EXP 64
53288: PUSH
53289: LD_EXP 64
53293: PPUSH
53294: LD_VAR 0 1
53298: PPUSH
53299: EMPTY
53300: PPUSH
53301: CALL_OW 1
53305: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
53306: LD_ADDR_EXP 65
53310: PUSH
53311: LD_EXP 65
53315: PPUSH
53316: LD_VAR 0 1
53320: PPUSH
53321: EMPTY
53322: PPUSH
53323: CALL_OW 1
53327: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
53328: LD_ADDR_EXP 66
53332: PUSH
53333: LD_EXP 66
53337: PPUSH
53338: LD_VAR 0 1
53342: PPUSH
53343: EMPTY
53344: PPUSH
53345: CALL_OW 1
53349: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
53350: LD_ADDR_EXP 67
53354: PUSH
53355: LD_EXP 67
53359: PPUSH
53360: LD_VAR 0 1
53364: PPUSH
53365: EMPTY
53366: PPUSH
53367: CALL_OW 1
53371: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
53372: LD_ADDR_EXP 68
53376: PUSH
53377: LD_EXP 68
53381: PPUSH
53382: LD_VAR 0 1
53386: PPUSH
53387: EMPTY
53388: PPUSH
53389: CALL_OW 1
53393: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
53394: LD_ADDR_EXP 69
53398: PUSH
53399: LD_EXP 69
53403: PPUSH
53404: LD_VAR 0 1
53408: PPUSH
53409: EMPTY
53410: PPUSH
53411: CALL_OW 1
53415: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
53416: LD_ADDR_EXP 70
53420: PUSH
53421: LD_EXP 70
53425: PPUSH
53426: LD_VAR 0 1
53430: PPUSH
53431: EMPTY
53432: PPUSH
53433: CALL_OW 1
53437: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
53438: LD_ADDR_EXP 71
53442: PUSH
53443: LD_EXP 71
53447: PPUSH
53448: LD_VAR 0 1
53452: PPUSH
53453: EMPTY
53454: PPUSH
53455: CALL_OW 1
53459: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
53460: LD_ADDR_EXP 72
53464: PUSH
53465: LD_EXP 72
53469: PPUSH
53470: LD_VAR 0 1
53474: PPUSH
53475: EMPTY
53476: PPUSH
53477: CALL_OW 1
53481: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
53482: LD_ADDR_EXP 73
53486: PUSH
53487: LD_EXP 73
53491: PPUSH
53492: LD_VAR 0 1
53496: PPUSH
53497: EMPTY
53498: PPUSH
53499: CALL_OW 1
53503: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
53504: LD_ADDR_EXP 74
53508: PUSH
53509: LD_EXP 74
53513: PPUSH
53514: LD_VAR 0 1
53518: PPUSH
53519: EMPTY
53520: PPUSH
53521: CALL_OW 1
53525: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
53526: LD_ADDR_EXP 75
53530: PUSH
53531: LD_EXP 75
53535: PPUSH
53536: LD_VAR 0 1
53540: PPUSH
53541: EMPTY
53542: PPUSH
53543: CALL_OW 1
53547: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
53548: LD_ADDR_EXP 76
53552: PUSH
53553: LD_EXP 76
53557: PPUSH
53558: LD_VAR 0 1
53562: PPUSH
53563: EMPTY
53564: PPUSH
53565: CALL_OW 1
53569: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
53570: LD_ADDR_EXP 77
53574: PUSH
53575: LD_EXP 77
53579: PPUSH
53580: LD_VAR 0 1
53584: PPUSH
53585: EMPTY
53586: PPUSH
53587: CALL_OW 1
53591: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
53592: LD_ADDR_EXP 79
53596: PUSH
53597: LD_EXP 79
53601: PPUSH
53602: LD_VAR 0 1
53606: PPUSH
53607: EMPTY
53608: PPUSH
53609: CALL_OW 1
53613: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
53614: LD_ADDR_EXP 81
53618: PUSH
53619: LD_EXP 81
53623: PPUSH
53624: LD_VAR 0 1
53628: PPUSH
53629: EMPTY
53630: PPUSH
53631: CALL_OW 1
53635: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
53636: LD_ADDR_EXP 82
53640: PUSH
53641: LD_EXP 82
53645: PPUSH
53646: LD_VAR 0 1
53650: PPUSH
53651: EMPTY
53652: PPUSH
53653: CALL_OW 1
53657: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
53658: LD_ADDR_EXP 83
53662: PUSH
53663: LD_EXP 83
53667: PPUSH
53668: LD_VAR 0 1
53672: PPUSH
53673: EMPTY
53674: PPUSH
53675: CALL_OW 1
53679: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
53680: LD_ADDR_EXP 84
53684: PUSH
53685: LD_EXP 84
53689: PPUSH
53690: LD_VAR 0 1
53694: PPUSH
53695: EMPTY
53696: PPUSH
53697: CALL_OW 1
53701: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
53702: LD_ADDR_EXP 85
53706: PUSH
53707: LD_EXP 85
53711: PPUSH
53712: LD_VAR 0 1
53716: PPUSH
53717: EMPTY
53718: PPUSH
53719: CALL_OW 1
53723: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
53724: LD_ADDR_EXP 86
53728: PUSH
53729: LD_EXP 86
53733: PPUSH
53734: LD_VAR 0 1
53738: PPUSH
53739: EMPTY
53740: PPUSH
53741: CALL_OW 1
53745: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
53746: LD_ADDR_EXP 87
53750: PUSH
53751: LD_EXP 87
53755: PPUSH
53756: LD_VAR 0 1
53760: PPUSH
53761: EMPTY
53762: PPUSH
53763: CALL_OW 1
53767: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
53768: LD_ADDR_EXP 88
53772: PUSH
53773: LD_EXP 88
53777: PPUSH
53778: LD_VAR 0 1
53782: PPUSH
53783: EMPTY
53784: PPUSH
53785: CALL_OW 1
53789: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
53790: LD_ADDR_EXP 89
53794: PUSH
53795: LD_EXP 89
53799: PPUSH
53800: LD_VAR 0 1
53804: PPUSH
53805: EMPTY
53806: PPUSH
53807: CALL_OW 1
53811: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
53812: LD_ADDR_EXP 90
53816: PUSH
53817: LD_EXP 90
53821: PPUSH
53822: LD_VAR 0 1
53826: PPUSH
53827: EMPTY
53828: PPUSH
53829: CALL_OW 1
53833: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
53834: LD_ADDR_EXP 91
53838: PUSH
53839: LD_EXP 91
53843: PPUSH
53844: LD_VAR 0 1
53848: PPUSH
53849: EMPTY
53850: PPUSH
53851: CALL_OW 1
53855: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
53856: LD_ADDR_EXP 92
53860: PUSH
53861: LD_EXP 92
53865: PPUSH
53866: LD_VAR 0 1
53870: PPUSH
53871: EMPTY
53872: PPUSH
53873: CALL_OW 1
53877: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
53878: LD_ADDR_EXP 93
53882: PUSH
53883: LD_EXP 93
53887: PPUSH
53888: LD_VAR 0 1
53892: PPUSH
53893: EMPTY
53894: PPUSH
53895: CALL_OW 1
53899: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
53900: LD_ADDR_EXP 94
53904: PUSH
53905: LD_EXP 94
53909: PPUSH
53910: LD_VAR 0 1
53914: PPUSH
53915: LD_INT 0
53917: PPUSH
53918: CALL_OW 1
53922: ST_TO_ADDR
// end ;
53923: LD_VAR 0 2
53927: RET
// export function MC_Add ( side , units ) ; var base ; begin
53928: LD_INT 0
53930: PPUSH
53931: PPUSH
// base := mc_bases + 1 ;
53932: LD_ADDR_VAR 0 4
53936: PUSH
53937: LD_EXP 52
53941: PUSH
53942: LD_INT 1
53944: PLUS
53945: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
53946: LD_ADDR_EXP 78
53950: PUSH
53951: LD_EXP 78
53955: PPUSH
53956: LD_VAR 0 4
53960: PPUSH
53961: LD_VAR 0 1
53965: PPUSH
53966: CALL_OW 1
53970: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
53971: LD_ADDR_EXP 52
53975: PUSH
53976: LD_EXP 52
53980: PPUSH
53981: LD_VAR 0 4
53985: PPUSH
53986: LD_VAR 0 2
53990: PPUSH
53991: CALL_OW 1
53995: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
53996: LD_ADDR_EXP 53
54000: PUSH
54001: LD_EXP 53
54005: PPUSH
54006: LD_VAR 0 4
54010: PPUSH
54011: EMPTY
54012: PPUSH
54013: CALL_OW 1
54017: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
54018: LD_ADDR_EXP 54
54022: PUSH
54023: LD_EXP 54
54027: PPUSH
54028: LD_VAR 0 4
54032: PPUSH
54033: EMPTY
54034: PPUSH
54035: CALL_OW 1
54039: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
54040: LD_ADDR_EXP 55
54044: PUSH
54045: LD_EXP 55
54049: PPUSH
54050: LD_VAR 0 4
54054: PPUSH
54055: EMPTY
54056: PPUSH
54057: CALL_OW 1
54061: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
54062: LD_ADDR_EXP 56
54066: PUSH
54067: LD_EXP 56
54071: PPUSH
54072: LD_VAR 0 4
54076: PPUSH
54077: EMPTY
54078: PPUSH
54079: CALL_OW 1
54083: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
54084: LD_ADDR_EXP 57
54088: PUSH
54089: LD_EXP 57
54093: PPUSH
54094: LD_VAR 0 4
54098: PPUSH
54099: EMPTY
54100: PPUSH
54101: CALL_OW 1
54105: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
54106: LD_ADDR_EXP 58
54110: PUSH
54111: LD_EXP 58
54115: PPUSH
54116: LD_VAR 0 4
54120: PPUSH
54121: EMPTY
54122: PPUSH
54123: CALL_OW 1
54127: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
54128: LD_ADDR_EXP 59
54132: PUSH
54133: LD_EXP 59
54137: PPUSH
54138: LD_VAR 0 4
54142: PPUSH
54143: EMPTY
54144: PPUSH
54145: CALL_OW 1
54149: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
54150: LD_ADDR_EXP 60
54154: PUSH
54155: LD_EXP 60
54159: PPUSH
54160: LD_VAR 0 4
54164: PPUSH
54165: EMPTY
54166: PPUSH
54167: CALL_OW 1
54171: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
54172: LD_ADDR_EXP 61
54176: PUSH
54177: LD_EXP 61
54181: PPUSH
54182: LD_VAR 0 4
54186: PPUSH
54187: EMPTY
54188: PPUSH
54189: CALL_OW 1
54193: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
54194: LD_ADDR_EXP 62
54198: PUSH
54199: LD_EXP 62
54203: PPUSH
54204: LD_VAR 0 4
54208: PPUSH
54209: EMPTY
54210: PPUSH
54211: CALL_OW 1
54215: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
54216: LD_ADDR_EXP 63
54220: PUSH
54221: LD_EXP 63
54225: PPUSH
54226: LD_VAR 0 4
54230: PPUSH
54231: LD_INT 0
54233: PPUSH
54234: CALL_OW 1
54238: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
54239: LD_ADDR_EXP 64
54243: PUSH
54244: LD_EXP 64
54248: PPUSH
54249: LD_VAR 0 4
54253: PPUSH
54254: EMPTY
54255: PPUSH
54256: CALL_OW 1
54260: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
54261: LD_ADDR_EXP 65
54265: PUSH
54266: LD_EXP 65
54270: PPUSH
54271: LD_VAR 0 4
54275: PPUSH
54276: EMPTY
54277: PPUSH
54278: CALL_OW 1
54282: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
54283: LD_ADDR_EXP 66
54287: PUSH
54288: LD_EXP 66
54292: PPUSH
54293: LD_VAR 0 4
54297: PPUSH
54298: EMPTY
54299: PPUSH
54300: CALL_OW 1
54304: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
54305: LD_ADDR_EXP 67
54309: PUSH
54310: LD_EXP 67
54314: PPUSH
54315: LD_VAR 0 4
54319: PPUSH
54320: EMPTY
54321: PPUSH
54322: CALL_OW 1
54326: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
54327: LD_ADDR_EXP 68
54331: PUSH
54332: LD_EXP 68
54336: PPUSH
54337: LD_VAR 0 4
54341: PPUSH
54342: EMPTY
54343: PPUSH
54344: CALL_OW 1
54348: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
54349: LD_ADDR_EXP 69
54353: PUSH
54354: LD_EXP 69
54358: PPUSH
54359: LD_VAR 0 4
54363: PPUSH
54364: EMPTY
54365: PPUSH
54366: CALL_OW 1
54370: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
54371: LD_ADDR_EXP 70
54375: PUSH
54376: LD_EXP 70
54380: PPUSH
54381: LD_VAR 0 4
54385: PPUSH
54386: EMPTY
54387: PPUSH
54388: CALL_OW 1
54392: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
54393: LD_ADDR_EXP 71
54397: PUSH
54398: LD_EXP 71
54402: PPUSH
54403: LD_VAR 0 4
54407: PPUSH
54408: EMPTY
54409: PPUSH
54410: CALL_OW 1
54414: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
54415: LD_ADDR_EXP 72
54419: PUSH
54420: LD_EXP 72
54424: PPUSH
54425: LD_VAR 0 4
54429: PPUSH
54430: EMPTY
54431: PPUSH
54432: CALL_OW 1
54436: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
54437: LD_ADDR_EXP 73
54441: PUSH
54442: LD_EXP 73
54446: PPUSH
54447: LD_VAR 0 4
54451: PPUSH
54452: EMPTY
54453: PPUSH
54454: CALL_OW 1
54458: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
54459: LD_ADDR_EXP 74
54463: PUSH
54464: LD_EXP 74
54468: PPUSH
54469: LD_VAR 0 4
54473: PPUSH
54474: EMPTY
54475: PPUSH
54476: CALL_OW 1
54480: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
54481: LD_ADDR_EXP 75
54485: PUSH
54486: LD_EXP 75
54490: PPUSH
54491: LD_VAR 0 4
54495: PPUSH
54496: EMPTY
54497: PPUSH
54498: CALL_OW 1
54502: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
54503: LD_ADDR_EXP 76
54507: PUSH
54508: LD_EXP 76
54512: PPUSH
54513: LD_VAR 0 4
54517: PPUSH
54518: EMPTY
54519: PPUSH
54520: CALL_OW 1
54524: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
54525: LD_ADDR_EXP 77
54529: PUSH
54530: LD_EXP 77
54534: PPUSH
54535: LD_VAR 0 4
54539: PPUSH
54540: EMPTY
54541: PPUSH
54542: CALL_OW 1
54546: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
54547: LD_ADDR_EXP 79
54551: PUSH
54552: LD_EXP 79
54556: PPUSH
54557: LD_VAR 0 4
54561: PPUSH
54562: EMPTY
54563: PPUSH
54564: CALL_OW 1
54568: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
54569: LD_ADDR_EXP 81
54573: PUSH
54574: LD_EXP 81
54578: PPUSH
54579: LD_VAR 0 4
54583: PPUSH
54584: EMPTY
54585: PPUSH
54586: CALL_OW 1
54590: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
54591: LD_ADDR_EXP 82
54595: PUSH
54596: LD_EXP 82
54600: PPUSH
54601: LD_VAR 0 4
54605: PPUSH
54606: EMPTY
54607: PPUSH
54608: CALL_OW 1
54612: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
54613: LD_ADDR_EXP 83
54617: PUSH
54618: LD_EXP 83
54622: PPUSH
54623: LD_VAR 0 4
54627: PPUSH
54628: EMPTY
54629: PPUSH
54630: CALL_OW 1
54634: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
54635: LD_ADDR_EXP 84
54639: PUSH
54640: LD_EXP 84
54644: PPUSH
54645: LD_VAR 0 4
54649: PPUSH
54650: EMPTY
54651: PPUSH
54652: CALL_OW 1
54656: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
54657: LD_ADDR_EXP 85
54661: PUSH
54662: LD_EXP 85
54666: PPUSH
54667: LD_VAR 0 4
54671: PPUSH
54672: EMPTY
54673: PPUSH
54674: CALL_OW 1
54678: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
54679: LD_ADDR_EXP 86
54683: PUSH
54684: LD_EXP 86
54688: PPUSH
54689: LD_VAR 0 4
54693: PPUSH
54694: EMPTY
54695: PPUSH
54696: CALL_OW 1
54700: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
54701: LD_ADDR_EXP 87
54705: PUSH
54706: LD_EXP 87
54710: PPUSH
54711: LD_VAR 0 4
54715: PPUSH
54716: EMPTY
54717: PPUSH
54718: CALL_OW 1
54722: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
54723: LD_ADDR_EXP 88
54727: PUSH
54728: LD_EXP 88
54732: PPUSH
54733: LD_VAR 0 4
54737: PPUSH
54738: EMPTY
54739: PPUSH
54740: CALL_OW 1
54744: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
54745: LD_ADDR_EXP 89
54749: PUSH
54750: LD_EXP 89
54754: PPUSH
54755: LD_VAR 0 4
54759: PPUSH
54760: EMPTY
54761: PPUSH
54762: CALL_OW 1
54766: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
54767: LD_ADDR_EXP 90
54771: PUSH
54772: LD_EXP 90
54776: PPUSH
54777: LD_VAR 0 4
54781: PPUSH
54782: EMPTY
54783: PPUSH
54784: CALL_OW 1
54788: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
54789: LD_ADDR_EXP 91
54793: PUSH
54794: LD_EXP 91
54798: PPUSH
54799: LD_VAR 0 4
54803: PPUSH
54804: EMPTY
54805: PPUSH
54806: CALL_OW 1
54810: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
54811: LD_ADDR_EXP 92
54815: PUSH
54816: LD_EXP 92
54820: PPUSH
54821: LD_VAR 0 4
54825: PPUSH
54826: EMPTY
54827: PPUSH
54828: CALL_OW 1
54832: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
54833: LD_ADDR_EXP 93
54837: PUSH
54838: LD_EXP 93
54842: PPUSH
54843: LD_VAR 0 4
54847: PPUSH
54848: EMPTY
54849: PPUSH
54850: CALL_OW 1
54854: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
54855: LD_ADDR_EXP 94
54859: PUSH
54860: LD_EXP 94
54864: PPUSH
54865: LD_VAR 0 4
54869: PPUSH
54870: LD_INT 0
54872: PPUSH
54873: CALL_OW 1
54877: ST_TO_ADDR
// result := base ;
54878: LD_ADDR_VAR 0 3
54882: PUSH
54883: LD_VAR 0 4
54887: ST_TO_ADDR
// end ;
54888: LD_VAR 0 3
54892: RET
// export function MC_Start ( ) ; var i ; begin
54893: LD_INT 0
54895: PPUSH
54896: PPUSH
// for i = 1 to mc_bases do
54897: LD_ADDR_VAR 0 2
54901: PUSH
54902: DOUBLE
54903: LD_INT 1
54905: DEC
54906: ST_TO_ADDR
54907: LD_EXP 52
54911: PUSH
54912: FOR_TO
54913: IFFALSE 55990
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
54915: LD_ADDR_EXP 52
54919: PUSH
54920: LD_EXP 52
54924: PPUSH
54925: LD_VAR 0 2
54929: PPUSH
54930: LD_EXP 52
54934: PUSH
54935: LD_VAR 0 2
54939: ARRAY
54940: PUSH
54941: LD_INT 0
54943: DIFF
54944: PPUSH
54945: CALL_OW 1
54949: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
54950: LD_ADDR_EXP 53
54954: PUSH
54955: LD_EXP 53
54959: PPUSH
54960: LD_VAR 0 2
54964: PPUSH
54965: EMPTY
54966: PPUSH
54967: CALL_OW 1
54971: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
54972: LD_ADDR_EXP 54
54976: PUSH
54977: LD_EXP 54
54981: PPUSH
54982: LD_VAR 0 2
54986: PPUSH
54987: EMPTY
54988: PPUSH
54989: CALL_OW 1
54993: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
54994: LD_ADDR_EXP 55
54998: PUSH
54999: LD_EXP 55
55003: PPUSH
55004: LD_VAR 0 2
55008: PPUSH
55009: EMPTY
55010: PPUSH
55011: CALL_OW 1
55015: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
55016: LD_ADDR_EXP 56
55020: PUSH
55021: LD_EXP 56
55025: PPUSH
55026: LD_VAR 0 2
55030: PPUSH
55031: EMPTY
55032: PUSH
55033: EMPTY
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PPUSH
55039: CALL_OW 1
55043: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
55044: LD_ADDR_EXP 57
55048: PUSH
55049: LD_EXP 57
55053: PPUSH
55054: LD_VAR 0 2
55058: PPUSH
55059: EMPTY
55060: PPUSH
55061: CALL_OW 1
55065: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
55066: LD_ADDR_EXP 84
55070: PUSH
55071: LD_EXP 84
55075: PPUSH
55076: LD_VAR 0 2
55080: PPUSH
55081: EMPTY
55082: PPUSH
55083: CALL_OW 1
55087: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
55088: LD_ADDR_EXP 58
55092: PUSH
55093: LD_EXP 58
55097: PPUSH
55098: LD_VAR 0 2
55102: PPUSH
55103: EMPTY
55104: PPUSH
55105: CALL_OW 1
55109: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
55110: LD_ADDR_EXP 59
55114: PUSH
55115: LD_EXP 59
55119: PPUSH
55120: LD_VAR 0 2
55124: PPUSH
55125: EMPTY
55126: PPUSH
55127: CALL_OW 1
55131: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
55132: LD_ADDR_EXP 60
55136: PUSH
55137: LD_EXP 60
55141: PPUSH
55142: LD_VAR 0 2
55146: PPUSH
55147: LD_EXP 52
55151: PUSH
55152: LD_VAR 0 2
55156: ARRAY
55157: PPUSH
55158: LD_INT 2
55160: PUSH
55161: LD_INT 30
55163: PUSH
55164: LD_INT 32
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 30
55173: PUSH
55174: LD_INT 33
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: LIST
55185: PPUSH
55186: CALL_OW 72
55190: PPUSH
55191: CALL_OW 1
55195: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
55196: LD_ADDR_EXP 61
55200: PUSH
55201: LD_EXP 61
55205: PPUSH
55206: LD_VAR 0 2
55210: PPUSH
55211: LD_EXP 52
55215: PUSH
55216: LD_VAR 0 2
55220: ARRAY
55221: PPUSH
55222: LD_INT 2
55224: PUSH
55225: LD_INT 30
55227: PUSH
55228: LD_INT 32
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 30
55237: PUSH
55238: LD_INT 31
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 58
55252: PUSH
55253: EMPTY
55254: LIST
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PPUSH
55260: CALL_OW 72
55264: PPUSH
55265: CALL_OW 1
55269: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
55270: LD_ADDR_EXP 62
55274: PUSH
55275: LD_EXP 62
55279: PPUSH
55280: LD_VAR 0 2
55284: PPUSH
55285: EMPTY
55286: PPUSH
55287: CALL_OW 1
55291: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
55292: LD_ADDR_EXP 66
55296: PUSH
55297: LD_EXP 66
55301: PPUSH
55302: LD_VAR 0 2
55306: PPUSH
55307: EMPTY
55308: PPUSH
55309: CALL_OW 1
55313: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
55314: LD_ADDR_EXP 65
55318: PUSH
55319: LD_EXP 65
55323: PPUSH
55324: LD_VAR 0 2
55328: PPUSH
55329: EMPTY
55330: PPUSH
55331: CALL_OW 1
55335: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
55336: LD_ADDR_EXP 67
55340: PUSH
55341: LD_EXP 67
55345: PPUSH
55346: LD_VAR 0 2
55350: PPUSH
55351: EMPTY
55352: PPUSH
55353: CALL_OW 1
55357: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
55358: LD_ADDR_EXP 68
55362: PUSH
55363: LD_EXP 68
55367: PPUSH
55368: LD_VAR 0 2
55372: PPUSH
55373: EMPTY
55374: PPUSH
55375: CALL_OW 1
55379: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
55380: LD_ADDR_EXP 69
55384: PUSH
55385: LD_EXP 69
55389: PPUSH
55390: LD_VAR 0 2
55394: PPUSH
55395: EMPTY
55396: PPUSH
55397: CALL_OW 1
55401: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
55402: LD_ADDR_EXP 70
55406: PUSH
55407: LD_EXP 70
55411: PPUSH
55412: LD_VAR 0 2
55416: PPUSH
55417: EMPTY
55418: PPUSH
55419: CALL_OW 1
55423: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
55424: LD_ADDR_EXP 71
55428: PUSH
55429: LD_EXP 71
55433: PPUSH
55434: LD_VAR 0 2
55438: PPUSH
55439: EMPTY
55440: PPUSH
55441: CALL_OW 1
55445: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
55446: LD_ADDR_EXP 72
55450: PUSH
55451: LD_EXP 72
55455: PPUSH
55456: LD_VAR 0 2
55460: PPUSH
55461: EMPTY
55462: PPUSH
55463: CALL_OW 1
55467: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
55468: LD_ADDR_EXP 73
55472: PUSH
55473: LD_EXP 73
55477: PPUSH
55478: LD_VAR 0 2
55482: PPUSH
55483: EMPTY
55484: PPUSH
55485: CALL_OW 1
55489: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
55490: LD_ADDR_EXP 74
55494: PUSH
55495: LD_EXP 74
55499: PPUSH
55500: LD_VAR 0 2
55504: PPUSH
55505: EMPTY
55506: PPUSH
55507: CALL_OW 1
55511: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
55512: LD_ADDR_EXP 63
55516: PUSH
55517: LD_EXP 63
55521: PPUSH
55522: LD_VAR 0 2
55526: PPUSH
55527: LD_INT 0
55529: PPUSH
55530: CALL_OW 1
55534: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
55535: LD_ADDR_EXP 76
55539: PUSH
55540: LD_EXP 76
55544: PPUSH
55545: LD_VAR 0 2
55549: PPUSH
55550: LD_INT 0
55552: PPUSH
55553: CALL_OW 1
55557: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
55558: LD_ADDR_EXP 64
55562: PUSH
55563: LD_EXP 64
55567: PPUSH
55568: LD_VAR 0 2
55572: PPUSH
55573: EMPTY
55574: PPUSH
55575: CALL_OW 1
55579: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
55580: LD_ADDR_EXP 75
55584: PUSH
55585: LD_EXP 75
55589: PPUSH
55590: LD_VAR 0 2
55594: PPUSH
55595: LD_INT 0
55597: PPUSH
55598: CALL_OW 1
55602: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
55603: LD_ADDR_EXP 77
55607: PUSH
55608: LD_EXP 77
55612: PPUSH
55613: LD_VAR 0 2
55617: PPUSH
55618: EMPTY
55619: PPUSH
55620: CALL_OW 1
55624: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
55625: LD_ADDR_EXP 80
55629: PUSH
55630: LD_EXP 80
55634: PPUSH
55635: LD_VAR 0 2
55639: PPUSH
55640: LD_INT 0
55642: PPUSH
55643: CALL_OW 1
55647: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
55648: LD_ADDR_EXP 81
55652: PUSH
55653: LD_EXP 81
55657: PPUSH
55658: LD_VAR 0 2
55662: PPUSH
55663: EMPTY
55664: PPUSH
55665: CALL_OW 1
55669: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
55670: LD_ADDR_EXP 82
55674: PUSH
55675: LD_EXP 82
55679: PPUSH
55680: LD_VAR 0 2
55684: PPUSH
55685: EMPTY
55686: PPUSH
55687: CALL_OW 1
55691: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
55692: LD_ADDR_EXP 83
55696: PUSH
55697: LD_EXP 83
55701: PPUSH
55702: LD_VAR 0 2
55706: PPUSH
55707: EMPTY
55708: PPUSH
55709: CALL_OW 1
55713: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
55714: LD_ADDR_EXP 85
55718: PUSH
55719: LD_EXP 85
55723: PPUSH
55724: LD_VAR 0 2
55728: PPUSH
55729: LD_EXP 52
55733: PUSH
55734: LD_VAR 0 2
55738: ARRAY
55739: PPUSH
55740: LD_INT 2
55742: PUSH
55743: LD_INT 30
55745: PUSH
55746: LD_INT 6
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 30
55755: PUSH
55756: LD_INT 7
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 30
55765: PUSH
55766: LD_INT 8
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: PPUSH
55779: CALL_OW 72
55783: PPUSH
55784: CALL_OW 1
55788: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
55789: LD_ADDR_EXP 86
55793: PUSH
55794: LD_EXP 86
55798: PPUSH
55799: LD_VAR 0 2
55803: PPUSH
55804: EMPTY
55805: PPUSH
55806: CALL_OW 1
55810: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
55811: LD_ADDR_EXP 87
55815: PUSH
55816: LD_EXP 87
55820: PPUSH
55821: LD_VAR 0 2
55825: PPUSH
55826: EMPTY
55827: PPUSH
55828: CALL_OW 1
55832: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
55833: LD_ADDR_EXP 88
55837: PUSH
55838: LD_EXP 88
55842: PPUSH
55843: LD_VAR 0 2
55847: PPUSH
55848: EMPTY
55849: PPUSH
55850: CALL_OW 1
55854: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
55855: LD_ADDR_EXP 89
55859: PUSH
55860: LD_EXP 89
55864: PPUSH
55865: LD_VAR 0 2
55869: PPUSH
55870: EMPTY
55871: PPUSH
55872: CALL_OW 1
55876: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
55877: LD_ADDR_EXP 90
55881: PUSH
55882: LD_EXP 90
55886: PPUSH
55887: LD_VAR 0 2
55891: PPUSH
55892: EMPTY
55893: PPUSH
55894: CALL_OW 1
55898: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
55899: LD_ADDR_EXP 91
55903: PUSH
55904: LD_EXP 91
55908: PPUSH
55909: LD_VAR 0 2
55913: PPUSH
55914: EMPTY
55915: PPUSH
55916: CALL_OW 1
55920: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
55921: LD_ADDR_EXP 92
55925: PUSH
55926: LD_EXP 92
55930: PPUSH
55931: LD_VAR 0 2
55935: PPUSH
55936: EMPTY
55937: PPUSH
55938: CALL_OW 1
55942: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
55943: LD_ADDR_EXP 93
55947: PUSH
55948: LD_EXP 93
55952: PPUSH
55953: LD_VAR 0 2
55957: PPUSH
55958: EMPTY
55959: PPUSH
55960: CALL_OW 1
55964: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
55965: LD_ADDR_EXP 94
55969: PUSH
55970: LD_EXP 94
55974: PPUSH
55975: LD_VAR 0 2
55979: PPUSH
55980: LD_INT 0
55982: PPUSH
55983: CALL_OW 1
55987: ST_TO_ADDR
// end ;
55988: GO 54912
55990: POP
55991: POP
// MC_InitSides ( ) ;
55992: CALL 56278 0 0
// MC_InitResearch ( ) ;
55996: CALL 56017 0 0
// CustomInitMacro ( ) ;
56000: CALL 4954 0 0
// skirmish := true ;
56004: LD_ADDR_EXP 50
56008: PUSH
56009: LD_INT 1
56011: ST_TO_ADDR
// end ;
56012: LD_VAR 0 1
56016: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
56017: LD_INT 0
56019: PPUSH
56020: PPUSH
56021: PPUSH
56022: PPUSH
56023: PPUSH
56024: PPUSH
// if not mc_bases then
56025: LD_EXP 52
56029: NOT
56030: IFFALSE 56034
// exit ;
56032: GO 56273
// for i = 1 to 8 do
56034: LD_ADDR_VAR 0 2
56038: PUSH
56039: DOUBLE
56040: LD_INT 1
56042: DEC
56043: ST_TO_ADDR
56044: LD_INT 8
56046: PUSH
56047: FOR_TO
56048: IFFALSE 56074
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
56050: LD_ADDR_EXP 79
56054: PUSH
56055: LD_EXP 79
56059: PPUSH
56060: LD_VAR 0 2
56064: PPUSH
56065: EMPTY
56066: PPUSH
56067: CALL_OW 1
56071: ST_TO_ADDR
56072: GO 56047
56074: POP
56075: POP
// tmp := [ ] ;
56076: LD_ADDR_VAR 0 5
56080: PUSH
56081: EMPTY
56082: ST_TO_ADDR
// for i = 1 to mc_sides do
56083: LD_ADDR_VAR 0 2
56087: PUSH
56088: DOUBLE
56089: LD_INT 1
56091: DEC
56092: ST_TO_ADDR
56093: LD_EXP 78
56097: PUSH
56098: FOR_TO
56099: IFFALSE 56157
// if not mc_sides [ i ] in tmp then
56101: LD_EXP 78
56105: PUSH
56106: LD_VAR 0 2
56110: ARRAY
56111: PUSH
56112: LD_VAR 0 5
56116: IN
56117: NOT
56118: IFFALSE 56155
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
56120: LD_ADDR_VAR 0 5
56124: PUSH
56125: LD_VAR 0 5
56129: PPUSH
56130: LD_VAR 0 5
56134: PUSH
56135: LD_INT 1
56137: PLUS
56138: PPUSH
56139: LD_EXP 78
56143: PUSH
56144: LD_VAR 0 2
56148: ARRAY
56149: PPUSH
56150: CALL_OW 2
56154: ST_TO_ADDR
56155: GO 56098
56157: POP
56158: POP
// if not tmp then
56159: LD_VAR 0 5
56163: NOT
56164: IFFALSE 56168
// exit ;
56166: GO 56273
// for j in tmp do
56168: LD_ADDR_VAR 0 3
56172: PUSH
56173: LD_VAR 0 5
56177: PUSH
56178: FOR_IN
56179: IFFALSE 56271
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
56181: LD_ADDR_VAR 0 6
56185: PUSH
56186: LD_INT 22
56188: PUSH
56189: LD_VAR 0 3
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PPUSH
56198: CALL_OW 69
56202: ST_TO_ADDR
// if not un then
56203: LD_VAR 0 6
56207: NOT
56208: IFFALSE 56212
// continue ;
56210: GO 56178
// nation := GetNation ( un [ 1 ] ) ;
56212: LD_ADDR_VAR 0 4
56216: PUSH
56217: LD_VAR 0 6
56221: PUSH
56222: LD_INT 1
56224: ARRAY
56225: PPUSH
56226: CALL_OW 248
56230: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
56231: LD_ADDR_EXP 79
56235: PUSH
56236: LD_EXP 79
56240: PPUSH
56241: LD_VAR 0 3
56245: PPUSH
56246: LD_VAR 0 3
56250: PPUSH
56251: LD_VAR 0 4
56255: PPUSH
56256: LD_INT 1
56258: PPUSH
56259: CALL 10259 0 3
56263: PPUSH
56264: CALL_OW 1
56268: ST_TO_ADDR
// end ;
56269: GO 56178
56271: POP
56272: POP
// end ;
56273: LD_VAR 0 1
56277: RET
// export function MC_InitSides ( ) ; var i ; begin
56278: LD_INT 0
56280: PPUSH
56281: PPUSH
// if not mc_bases then
56282: LD_EXP 52
56286: NOT
56287: IFFALSE 56291
// exit ;
56289: GO 56365
// for i = 1 to mc_bases do
56291: LD_ADDR_VAR 0 2
56295: PUSH
56296: DOUBLE
56297: LD_INT 1
56299: DEC
56300: ST_TO_ADDR
56301: LD_EXP 52
56305: PUSH
56306: FOR_TO
56307: IFFALSE 56363
// if mc_bases [ i ] then
56309: LD_EXP 52
56313: PUSH
56314: LD_VAR 0 2
56318: ARRAY
56319: IFFALSE 56361
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
56321: LD_ADDR_EXP 78
56325: PUSH
56326: LD_EXP 78
56330: PPUSH
56331: LD_VAR 0 2
56335: PPUSH
56336: LD_EXP 52
56340: PUSH
56341: LD_VAR 0 2
56345: ARRAY
56346: PUSH
56347: LD_INT 1
56349: ARRAY
56350: PPUSH
56351: CALL_OW 255
56355: PPUSH
56356: CALL_OW 1
56360: ST_TO_ADDR
56361: GO 56306
56363: POP
56364: POP
// end ;
56365: LD_VAR 0 1
56369: RET
// every 0 0$01 trigger skirmish do
56370: LD_EXP 50
56374: IFFALSE 56528
56376: GO 56378
56378: DISABLE
// begin enable ;
56379: ENABLE
// MC_CheckBuildings ( ) ;
56380: CALL 61017 0 0
// MC_CheckPeopleLife ( ) ;
56384: CALL 61142 0 0
// RaiseSailEvent ( 100 ) ;
56388: LD_INT 100
56390: PPUSH
56391: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
56395: LD_INT 103
56397: PPUSH
56398: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
56402: LD_INT 104
56404: PPUSH
56405: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
56409: LD_INT 105
56411: PPUSH
56412: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
56416: LD_INT 106
56418: PPUSH
56419: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
56423: LD_INT 107
56425: PPUSH
56426: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
56430: LD_INT 108
56432: PPUSH
56433: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
56437: LD_INT 109
56439: PPUSH
56440: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
56444: LD_INT 110
56446: PPUSH
56447: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
56451: LD_INT 111
56453: PPUSH
56454: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
56458: LD_INT 112
56460: PPUSH
56461: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
56465: LD_INT 113
56467: PPUSH
56468: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
56472: LD_INT 120
56474: PPUSH
56475: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
56479: LD_INT 121
56481: PPUSH
56482: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
56486: LD_INT 122
56488: PPUSH
56489: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
56493: LD_INT 123
56495: PPUSH
56496: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
56500: LD_INT 124
56502: PPUSH
56503: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
56507: LD_INT 125
56509: PPUSH
56510: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
56514: LD_INT 126
56516: PPUSH
56517: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
56521: LD_INT 200
56523: PPUSH
56524: CALL_OW 427
// end ;
56528: END
// on SailEvent ( event ) do begin if event < 100 then
56529: LD_VAR 0 1
56533: PUSH
56534: LD_INT 100
56536: LESS
56537: IFFALSE 56548
// CustomEvent ( event ) ;
56539: LD_VAR 0 1
56543: PPUSH
56544: CALL 4946 0 1
// if event = 100 then
56548: LD_VAR 0 1
56552: PUSH
56553: LD_INT 100
56555: EQUAL
56556: IFFALSE 56562
// MC_ClassManager ( ) ;
56558: CALL 56954 0 0
// if event = 101 then
56562: LD_VAR 0 1
56566: PUSH
56567: LD_INT 101
56569: EQUAL
56570: IFFALSE 56576
// MC_RepairBuildings ( ) ;
56572: CALL 61738 0 0
// if event = 102 then
56576: LD_VAR 0 1
56580: PUSH
56581: LD_INT 102
56583: EQUAL
56584: IFFALSE 56590
// MC_Heal ( ) ;
56586: CALL 62144 0 0
// if event = 103 then
56590: LD_VAR 0 1
56594: PUSH
56595: LD_INT 103
56597: EQUAL
56598: IFFALSE 56604
// MC_Build ( ) ;
56600: CALL 62566 0 0
// if event = 104 then
56604: LD_VAR 0 1
56608: PUSH
56609: LD_INT 104
56611: EQUAL
56612: IFFALSE 56618
// MC_TurretWeapon ( ) ;
56614: CALL 64179 0 0
// if event = 105 then
56618: LD_VAR 0 1
56622: PUSH
56623: LD_INT 105
56625: EQUAL
56626: IFFALSE 56632
// MC_BuildUpgrade ( ) ;
56628: CALL 63730 0 0
// if event = 106 then
56632: LD_VAR 0 1
56636: PUSH
56637: LD_INT 106
56639: EQUAL
56640: IFFALSE 56646
// MC_PlantMines ( ) ;
56642: CALL 64609 0 0
// if event = 107 then
56646: LD_VAR 0 1
56650: PUSH
56651: LD_INT 107
56653: EQUAL
56654: IFFALSE 56660
// MC_CollectCrates ( ) ;
56656: CALL 65643 0 0
// if event = 108 then
56660: LD_VAR 0 1
56664: PUSH
56665: LD_INT 108
56667: EQUAL
56668: IFFALSE 56674
// MC_LinkRemoteControl ( ) ;
56670: CALL 67400 0 0
// if event = 109 then
56674: LD_VAR 0 1
56678: PUSH
56679: LD_INT 109
56681: EQUAL
56682: IFFALSE 56688
// MC_ProduceVehicle ( ) ;
56684: CALL 67581 0 0
// if event = 110 then
56688: LD_VAR 0 1
56692: PUSH
56693: LD_INT 110
56695: EQUAL
56696: IFFALSE 56702
// MC_SendAttack ( ) ;
56698: CALL 68062 0 0
// if event = 111 then
56702: LD_VAR 0 1
56706: PUSH
56707: LD_INT 111
56709: EQUAL
56710: IFFALSE 56716
// MC_Defend ( ) ;
56712: CALL 68170 0 0
// if event = 112 then
56716: LD_VAR 0 1
56720: PUSH
56721: LD_INT 112
56723: EQUAL
56724: IFFALSE 56730
// MC_Research ( ) ;
56726: CALL 68775 0 0
// if event = 113 then
56730: LD_VAR 0 1
56734: PUSH
56735: LD_INT 113
56737: EQUAL
56738: IFFALSE 56744
// MC_MinesTrigger ( ) ;
56740: CALL 69889 0 0
// if event = 120 then
56744: LD_VAR 0 1
56748: PUSH
56749: LD_INT 120
56751: EQUAL
56752: IFFALSE 56758
// MC_RepairVehicle ( ) ;
56754: CALL 69988 0 0
// if event = 121 then
56758: LD_VAR 0 1
56762: PUSH
56763: LD_INT 121
56765: EQUAL
56766: IFFALSE 56772
// MC_TameApe ( ) ;
56768: CALL 70695 0 0
// if event = 122 then
56772: LD_VAR 0 1
56776: PUSH
56777: LD_INT 122
56779: EQUAL
56780: IFFALSE 56786
// MC_ChangeApeClass ( ) ;
56782: CALL 71524 0 0
// if event = 123 then
56786: LD_VAR 0 1
56790: PUSH
56791: LD_INT 123
56793: EQUAL
56794: IFFALSE 56800
// MC_Bazooka ( ) ;
56796: CALL 72174 0 0
// if event = 124 then
56800: LD_VAR 0 1
56804: PUSH
56805: LD_INT 124
56807: EQUAL
56808: IFFALSE 56814
// MC_TeleportExit ( ) ;
56810: CALL 72372 0 0
// if event = 125 then
56814: LD_VAR 0 1
56818: PUSH
56819: LD_INT 125
56821: EQUAL
56822: IFFALSE 56828
// MC_Deposits ( ) ;
56824: CALL 73019 0 0
// if event = 126 then
56828: LD_VAR 0 1
56832: PUSH
56833: LD_INT 126
56835: EQUAL
56836: IFFALSE 56842
// MC_RemoteDriver ( ) ;
56838: CALL 73644 0 0
// if event = 200 then
56842: LD_VAR 0 1
56846: PUSH
56847: LD_INT 200
56849: EQUAL
56850: IFFALSE 56856
// MC_Idle ( ) ;
56852: CALL 75377 0 0
// end ;
56856: PPOPN 1
56858: END
// export function MC_Reset ( base , tag ) ; var i ; begin
56859: LD_INT 0
56861: PPUSH
56862: PPUSH
// if not mc_bases [ base ] or not tag then
56863: LD_EXP 52
56867: PUSH
56868: LD_VAR 0 1
56872: ARRAY
56873: NOT
56874: PUSH
56875: LD_VAR 0 2
56879: NOT
56880: OR
56881: IFFALSE 56885
// exit ;
56883: GO 56949
// for i in mc_bases [ base ] union mc_ape [ base ] do
56885: LD_ADDR_VAR 0 4
56889: PUSH
56890: LD_EXP 52
56894: PUSH
56895: LD_VAR 0 1
56899: ARRAY
56900: PUSH
56901: LD_EXP 81
56905: PUSH
56906: LD_VAR 0 1
56910: ARRAY
56911: UNION
56912: PUSH
56913: FOR_IN
56914: IFFALSE 56947
// if GetTag ( i ) = tag then
56916: LD_VAR 0 4
56920: PPUSH
56921: CALL_OW 110
56925: PUSH
56926: LD_VAR 0 2
56930: EQUAL
56931: IFFALSE 56945
// SetTag ( i , 0 ) ;
56933: LD_VAR 0 4
56937: PPUSH
56938: LD_INT 0
56940: PPUSH
56941: CALL_OW 109
56945: GO 56913
56947: POP
56948: POP
// end ;
56949: LD_VAR 0 3
56953: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
56954: LD_INT 0
56956: PPUSH
56957: PPUSH
56958: PPUSH
56959: PPUSH
56960: PPUSH
56961: PPUSH
56962: PPUSH
56963: PPUSH
// if not mc_bases then
56964: LD_EXP 52
56968: NOT
56969: IFFALSE 56973
// exit ;
56971: GO 57431
// for i = 1 to mc_bases do
56973: LD_ADDR_VAR 0 2
56977: PUSH
56978: DOUBLE
56979: LD_INT 1
56981: DEC
56982: ST_TO_ADDR
56983: LD_EXP 52
56987: PUSH
56988: FOR_TO
56989: IFFALSE 57429
// begin tmp := MC_ClassCheckReq ( i ) ;
56991: LD_ADDR_VAR 0 4
56995: PUSH
56996: LD_VAR 0 2
57000: PPUSH
57001: CALL 57436 0 1
57005: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
57006: LD_ADDR_EXP 93
57010: PUSH
57011: LD_EXP 93
57015: PPUSH
57016: LD_VAR 0 2
57020: PPUSH
57021: LD_VAR 0 4
57025: PPUSH
57026: CALL_OW 1
57030: ST_TO_ADDR
// if not tmp then
57031: LD_VAR 0 4
57035: NOT
57036: IFFALSE 57040
// continue ;
57038: GO 56988
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
57040: LD_ADDR_VAR 0 6
57044: PUSH
57045: LD_EXP 52
57049: PUSH
57050: LD_VAR 0 2
57054: ARRAY
57055: PPUSH
57056: LD_INT 2
57058: PUSH
57059: LD_INT 30
57061: PUSH
57062: LD_INT 4
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 30
57071: PUSH
57072: LD_INT 5
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: LIST
57083: PPUSH
57084: CALL_OW 72
57088: PUSH
57089: LD_EXP 52
57093: PUSH
57094: LD_VAR 0 2
57098: ARRAY
57099: PPUSH
57100: LD_INT 2
57102: PUSH
57103: LD_INT 30
57105: PUSH
57106: LD_INT 0
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 30
57115: PUSH
57116: LD_INT 1
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: LIST
57127: PPUSH
57128: CALL_OW 72
57132: PUSH
57133: LD_EXP 52
57137: PUSH
57138: LD_VAR 0 2
57142: ARRAY
57143: PPUSH
57144: LD_INT 30
57146: PUSH
57147: LD_INT 3
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PPUSH
57154: CALL_OW 72
57158: PUSH
57159: LD_EXP 52
57163: PUSH
57164: LD_VAR 0 2
57168: ARRAY
57169: PPUSH
57170: LD_INT 2
57172: PUSH
57173: LD_INT 30
57175: PUSH
57176: LD_INT 6
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 30
57185: PUSH
57186: LD_INT 7
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 30
57195: PUSH
57196: LD_INT 8
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: PPUSH
57209: CALL_OW 72
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: ST_TO_ADDR
// for j = 1 to 4 do
57220: LD_ADDR_VAR 0 3
57224: PUSH
57225: DOUBLE
57226: LD_INT 1
57228: DEC
57229: ST_TO_ADDR
57230: LD_INT 4
57232: PUSH
57233: FOR_TO
57234: IFFALSE 57425
// begin if not tmp [ j ] then
57236: LD_VAR 0 4
57240: PUSH
57241: LD_VAR 0 3
57245: ARRAY
57246: NOT
57247: IFFALSE 57251
// continue ;
57249: GO 57233
// for p in tmp [ j ] do
57251: LD_ADDR_VAR 0 5
57255: PUSH
57256: LD_VAR 0 4
57260: PUSH
57261: LD_VAR 0 3
57265: ARRAY
57266: PUSH
57267: FOR_IN
57268: IFFALSE 57421
// begin if not b [ j ] then
57270: LD_VAR 0 6
57274: PUSH
57275: LD_VAR 0 3
57279: ARRAY
57280: NOT
57281: IFFALSE 57285
// break ;
57283: GO 57421
// e := 0 ;
57285: LD_ADDR_VAR 0 7
57289: PUSH
57290: LD_INT 0
57292: ST_TO_ADDR
// for k in b [ j ] do
57293: LD_ADDR_VAR 0 8
57297: PUSH
57298: LD_VAR 0 6
57302: PUSH
57303: LD_VAR 0 3
57307: ARRAY
57308: PUSH
57309: FOR_IN
57310: IFFALSE 57337
// if IsNotFull ( k ) then
57312: LD_VAR 0 8
57316: PPUSH
57317: CALL 14248 0 1
57321: IFFALSE 57335
// begin e := k ;
57323: LD_ADDR_VAR 0 7
57327: PUSH
57328: LD_VAR 0 8
57332: ST_TO_ADDR
// break ;
57333: GO 57337
// end ;
57335: GO 57309
57337: POP
57338: POP
// if e and not UnitGoingToBuilding ( p , e ) then
57339: LD_VAR 0 7
57343: PUSH
57344: LD_VAR 0 5
57348: PPUSH
57349: LD_VAR 0 7
57353: PPUSH
57354: CALL 51282 0 2
57358: NOT
57359: AND
57360: IFFALSE 57419
// begin if IsInUnit ( p ) then
57362: LD_VAR 0 5
57366: PPUSH
57367: CALL_OW 310
57371: IFFALSE 57382
// ComExitBuilding ( p ) ;
57373: LD_VAR 0 5
57377: PPUSH
57378: CALL_OW 122
// ComEnterUnit ( p , e ) ;
57382: LD_VAR 0 5
57386: PPUSH
57387: LD_VAR 0 7
57391: PPUSH
57392: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
57396: LD_VAR 0 5
57400: PPUSH
57401: LD_VAR 0 3
57405: PPUSH
57406: CALL_OW 183
// AddComExitBuilding ( p ) ;
57410: LD_VAR 0 5
57414: PPUSH
57415: CALL_OW 182
// end ; end ;
57419: GO 57267
57421: POP
57422: POP
// end ;
57423: GO 57233
57425: POP
57426: POP
// end ;
57427: GO 56988
57429: POP
57430: POP
// end ;
57431: LD_VAR 0 1
57435: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
57436: LD_INT 0
57438: PPUSH
57439: PPUSH
57440: PPUSH
57441: PPUSH
57442: PPUSH
57443: PPUSH
57444: PPUSH
57445: PPUSH
57446: PPUSH
57447: PPUSH
57448: PPUSH
57449: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
57450: LD_VAR 0 1
57454: NOT
57455: PUSH
57456: LD_EXP 52
57460: PUSH
57461: LD_VAR 0 1
57465: ARRAY
57466: NOT
57467: OR
57468: PUSH
57469: LD_EXP 52
57473: PUSH
57474: LD_VAR 0 1
57478: ARRAY
57479: PPUSH
57480: LD_INT 2
57482: PUSH
57483: LD_INT 30
57485: PUSH
57486: LD_INT 0
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 30
57495: PUSH
57496: LD_INT 1
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: LIST
57507: PPUSH
57508: CALL_OW 72
57512: NOT
57513: OR
57514: IFFALSE 57518
// exit ;
57516: GO 61012
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
57518: LD_ADDR_VAR 0 4
57522: PUSH
57523: LD_EXP 52
57527: PUSH
57528: LD_VAR 0 1
57532: ARRAY
57533: PPUSH
57534: LD_INT 2
57536: PUSH
57537: LD_INT 25
57539: PUSH
57540: LD_INT 1
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 25
57549: PUSH
57550: LD_INT 2
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 25
57559: PUSH
57560: LD_INT 3
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 25
57569: PUSH
57570: LD_INT 4
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 25
57579: PUSH
57580: LD_INT 5
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 25
57589: PUSH
57590: LD_INT 8
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 25
57599: PUSH
57600: LD_INT 9
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: PPUSH
57617: CALL_OW 72
57621: ST_TO_ADDR
// for i in tmp do
57622: LD_ADDR_VAR 0 3
57626: PUSH
57627: LD_VAR 0 4
57631: PUSH
57632: FOR_IN
57633: IFFALSE 57664
// if GetTag ( i ) then
57635: LD_VAR 0 3
57639: PPUSH
57640: CALL_OW 110
57644: IFFALSE 57662
// tmp := tmp diff i ;
57646: LD_ADDR_VAR 0 4
57650: PUSH
57651: LD_VAR 0 4
57655: PUSH
57656: LD_VAR 0 3
57660: DIFF
57661: ST_TO_ADDR
57662: GO 57632
57664: POP
57665: POP
// if not tmp then
57666: LD_VAR 0 4
57670: NOT
57671: IFFALSE 57675
// exit ;
57673: GO 61012
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
57675: LD_ADDR_VAR 0 5
57679: PUSH
57680: LD_EXP 52
57684: PUSH
57685: LD_VAR 0 1
57689: ARRAY
57690: PPUSH
57691: LD_INT 2
57693: PUSH
57694: LD_INT 25
57696: PUSH
57697: LD_INT 1
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 25
57706: PUSH
57707: LD_INT 5
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 25
57716: PUSH
57717: LD_INT 8
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 25
57726: PUSH
57727: LD_INT 9
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: PPUSH
57741: CALL_OW 72
57745: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
57746: LD_ADDR_VAR 0 6
57750: PUSH
57751: LD_EXP 52
57755: PUSH
57756: LD_VAR 0 1
57760: ARRAY
57761: PPUSH
57762: LD_INT 25
57764: PUSH
57765: LD_INT 2
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PPUSH
57772: CALL_OW 72
57776: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
57777: LD_ADDR_VAR 0 7
57781: PUSH
57782: LD_EXP 52
57786: PUSH
57787: LD_VAR 0 1
57791: ARRAY
57792: PPUSH
57793: LD_INT 25
57795: PUSH
57796: LD_INT 3
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PPUSH
57803: CALL_OW 72
57807: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
57808: LD_ADDR_VAR 0 8
57812: PUSH
57813: LD_EXP 52
57817: PUSH
57818: LD_VAR 0 1
57822: ARRAY
57823: PPUSH
57824: LD_INT 25
57826: PUSH
57827: LD_INT 4
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 24
57836: PUSH
57837: LD_INT 251
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PPUSH
57848: CALL_OW 72
57852: ST_TO_ADDR
// if mc_scan [ base ] then
57853: LD_EXP 75
57857: PUSH
57858: LD_VAR 0 1
57862: ARRAY
57863: IFFALSE 58324
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
57865: LD_ADDR_EXP 94
57869: PUSH
57870: LD_EXP 94
57874: PPUSH
57875: LD_VAR 0 1
57879: PPUSH
57880: LD_INT 4
57882: PPUSH
57883: CALL_OW 1
57887: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
57888: LD_ADDR_VAR 0 12
57892: PUSH
57893: LD_EXP 52
57897: PUSH
57898: LD_VAR 0 1
57902: ARRAY
57903: PPUSH
57904: LD_INT 2
57906: PUSH
57907: LD_INT 30
57909: PUSH
57910: LD_INT 4
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 30
57919: PUSH
57920: LD_INT 5
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: LIST
57931: PPUSH
57932: CALL_OW 72
57936: ST_TO_ADDR
// if not b then
57937: LD_VAR 0 12
57941: NOT
57942: IFFALSE 57946
// exit ;
57944: GO 61012
// p := [ ] ;
57946: LD_ADDR_VAR 0 11
57950: PUSH
57951: EMPTY
57952: ST_TO_ADDR
// if sci >= 2 then
57953: LD_VAR 0 8
57957: PUSH
57958: LD_INT 2
57960: GREATEREQUAL
57961: IFFALSE 57992
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
57963: LD_ADDR_VAR 0 8
57967: PUSH
57968: LD_VAR 0 8
57972: PUSH
57973: LD_INT 1
57975: ARRAY
57976: PUSH
57977: LD_VAR 0 8
57981: PUSH
57982: LD_INT 2
57984: ARRAY
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: ST_TO_ADDR
57990: GO 58053
// if sci = 1 then
57992: LD_VAR 0 8
57996: PUSH
57997: LD_INT 1
57999: EQUAL
58000: IFFALSE 58021
// sci := [ sci [ 1 ] ] else
58002: LD_ADDR_VAR 0 8
58006: PUSH
58007: LD_VAR 0 8
58011: PUSH
58012: LD_INT 1
58014: ARRAY
58015: PUSH
58016: EMPTY
58017: LIST
58018: ST_TO_ADDR
58019: GO 58053
// if sci = 0 then
58021: LD_VAR 0 8
58025: PUSH
58026: LD_INT 0
58028: EQUAL
58029: IFFALSE 58053
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
58031: LD_ADDR_VAR 0 11
58035: PUSH
58036: LD_VAR 0 4
58040: PPUSH
58041: LD_INT 4
58043: PPUSH
58044: CALL 51145 0 2
58048: PUSH
58049: LD_INT 1
58051: ARRAY
58052: ST_TO_ADDR
// if eng > 4 then
58053: LD_VAR 0 6
58057: PUSH
58058: LD_INT 4
58060: GREATER
58061: IFFALSE 58107
// for i = eng downto 4 do
58063: LD_ADDR_VAR 0 3
58067: PUSH
58068: DOUBLE
58069: LD_VAR 0 6
58073: INC
58074: ST_TO_ADDR
58075: LD_INT 4
58077: PUSH
58078: FOR_DOWNTO
58079: IFFALSE 58105
// eng := eng diff eng [ i ] ;
58081: LD_ADDR_VAR 0 6
58085: PUSH
58086: LD_VAR 0 6
58090: PUSH
58091: LD_VAR 0 6
58095: PUSH
58096: LD_VAR 0 3
58100: ARRAY
58101: DIFF
58102: ST_TO_ADDR
58103: GO 58078
58105: POP
58106: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
58107: LD_ADDR_VAR 0 4
58111: PUSH
58112: LD_VAR 0 4
58116: PUSH
58117: LD_VAR 0 5
58121: PUSH
58122: LD_VAR 0 6
58126: UNION
58127: PUSH
58128: LD_VAR 0 7
58132: UNION
58133: PUSH
58134: LD_VAR 0 8
58138: UNION
58139: DIFF
58140: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
58141: LD_ADDR_VAR 0 13
58145: PUSH
58146: LD_EXP 52
58150: PUSH
58151: LD_VAR 0 1
58155: ARRAY
58156: PPUSH
58157: LD_INT 2
58159: PUSH
58160: LD_INT 30
58162: PUSH
58163: LD_INT 32
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 30
58172: PUSH
58173: LD_INT 31
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: LIST
58184: PPUSH
58185: CALL_OW 72
58189: PUSH
58190: LD_EXP 52
58194: PUSH
58195: LD_VAR 0 1
58199: ARRAY
58200: PPUSH
58201: LD_INT 2
58203: PUSH
58204: LD_INT 30
58206: PUSH
58207: LD_INT 4
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 30
58216: PUSH
58217: LD_INT 5
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: LIST
58228: PPUSH
58229: CALL_OW 72
58233: PUSH
58234: LD_INT 6
58236: MUL
58237: PLUS
58238: ST_TO_ADDR
// if bcount < tmp then
58239: LD_VAR 0 13
58243: PUSH
58244: LD_VAR 0 4
58248: LESS
58249: IFFALSE 58295
// for i = tmp downto bcount do
58251: LD_ADDR_VAR 0 3
58255: PUSH
58256: DOUBLE
58257: LD_VAR 0 4
58261: INC
58262: ST_TO_ADDR
58263: LD_VAR 0 13
58267: PUSH
58268: FOR_DOWNTO
58269: IFFALSE 58293
// tmp := Delete ( tmp , tmp ) ;
58271: LD_ADDR_VAR 0 4
58275: PUSH
58276: LD_VAR 0 4
58280: PPUSH
58281: LD_VAR 0 4
58285: PPUSH
58286: CALL_OW 3
58290: ST_TO_ADDR
58291: GO 58268
58293: POP
58294: POP
// result := [ tmp , 0 , 0 , p ] ;
58295: LD_ADDR_VAR 0 2
58299: PUSH
58300: LD_VAR 0 4
58304: PUSH
58305: LD_INT 0
58307: PUSH
58308: LD_INT 0
58310: PUSH
58311: LD_VAR 0 11
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: ST_TO_ADDR
// exit ;
58322: GO 61012
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
58324: LD_EXP 52
58328: PUSH
58329: LD_VAR 0 1
58333: ARRAY
58334: PPUSH
58335: LD_INT 2
58337: PUSH
58338: LD_INT 30
58340: PUSH
58341: LD_INT 6
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 30
58350: PUSH
58351: LD_INT 7
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 30
58360: PUSH
58361: LD_INT 8
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: PPUSH
58374: CALL_OW 72
58378: NOT
58379: PUSH
58380: LD_EXP 52
58384: PUSH
58385: LD_VAR 0 1
58389: ARRAY
58390: PPUSH
58391: LD_INT 30
58393: PUSH
58394: LD_INT 3
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PPUSH
58401: CALL_OW 72
58405: NOT
58406: AND
58407: IFFALSE 58479
// begin if eng = tmp then
58409: LD_VAR 0 6
58413: PUSH
58414: LD_VAR 0 4
58418: EQUAL
58419: IFFALSE 58423
// exit ;
58421: GO 61012
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
58423: LD_ADDR_EXP 94
58427: PUSH
58428: LD_EXP 94
58432: PPUSH
58433: LD_VAR 0 1
58437: PPUSH
58438: LD_INT 1
58440: PPUSH
58441: CALL_OW 1
58445: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
58446: LD_ADDR_VAR 0 2
58450: PUSH
58451: LD_INT 0
58453: PUSH
58454: LD_VAR 0 4
58458: PUSH
58459: LD_VAR 0 6
58463: DIFF
58464: PUSH
58465: LD_INT 0
58467: PUSH
58468: LD_INT 0
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: ST_TO_ADDR
// exit ;
58477: GO 61012
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
58479: LD_EXP 79
58483: PUSH
58484: LD_EXP 78
58488: PUSH
58489: LD_VAR 0 1
58493: ARRAY
58494: ARRAY
58495: PUSH
58496: LD_EXP 52
58500: PUSH
58501: LD_VAR 0 1
58505: ARRAY
58506: PPUSH
58507: LD_INT 2
58509: PUSH
58510: LD_INT 30
58512: PUSH
58513: LD_INT 6
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 30
58522: PUSH
58523: LD_INT 7
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 30
58532: PUSH
58533: LD_INT 8
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: PPUSH
58546: CALL_OW 72
58550: AND
58551: PUSH
58552: LD_EXP 52
58556: PUSH
58557: LD_VAR 0 1
58561: ARRAY
58562: PPUSH
58563: LD_INT 30
58565: PUSH
58566: LD_INT 3
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PPUSH
58573: CALL_OW 72
58577: NOT
58578: AND
58579: IFFALSE 58793
// begin if sci >= 6 then
58581: LD_VAR 0 8
58585: PUSH
58586: LD_INT 6
58588: GREATEREQUAL
58589: IFFALSE 58593
// exit ;
58591: GO 61012
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
58593: LD_ADDR_EXP 94
58597: PUSH
58598: LD_EXP 94
58602: PPUSH
58603: LD_VAR 0 1
58607: PPUSH
58608: LD_INT 2
58610: PPUSH
58611: CALL_OW 1
58615: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
58616: LD_ADDR_VAR 0 9
58620: PUSH
58621: LD_VAR 0 4
58625: PUSH
58626: LD_VAR 0 8
58630: DIFF
58631: PPUSH
58632: LD_INT 4
58634: PPUSH
58635: CALL 51145 0 2
58639: ST_TO_ADDR
// p := [ ] ;
58640: LD_ADDR_VAR 0 11
58644: PUSH
58645: EMPTY
58646: ST_TO_ADDR
// if sci < 6 and sort > 6 then
58647: LD_VAR 0 8
58651: PUSH
58652: LD_INT 6
58654: LESS
58655: PUSH
58656: LD_VAR 0 9
58660: PUSH
58661: LD_INT 6
58663: GREATER
58664: AND
58665: IFFALSE 58746
// begin for i = 1 to 6 - sci do
58667: LD_ADDR_VAR 0 3
58671: PUSH
58672: DOUBLE
58673: LD_INT 1
58675: DEC
58676: ST_TO_ADDR
58677: LD_INT 6
58679: PUSH
58680: LD_VAR 0 8
58684: MINUS
58685: PUSH
58686: FOR_TO
58687: IFFALSE 58742
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
58689: LD_ADDR_VAR 0 11
58693: PUSH
58694: LD_VAR 0 11
58698: PPUSH
58699: LD_VAR 0 11
58703: PUSH
58704: LD_INT 1
58706: PLUS
58707: PPUSH
58708: LD_VAR 0 9
58712: PUSH
58713: LD_INT 1
58715: ARRAY
58716: PPUSH
58717: CALL_OW 2
58721: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
58722: LD_ADDR_VAR 0 9
58726: PUSH
58727: LD_VAR 0 9
58731: PPUSH
58732: LD_INT 1
58734: PPUSH
58735: CALL_OW 3
58739: ST_TO_ADDR
// end ;
58740: GO 58686
58742: POP
58743: POP
// end else
58744: GO 58766
// if sort then
58746: LD_VAR 0 9
58750: IFFALSE 58766
// p := sort [ 1 ] ;
58752: LD_ADDR_VAR 0 11
58756: PUSH
58757: LD_VAR 0 9
58761: PUSH
58762: LD_INT 1
58764: ARRAY
58765: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
58766: LD_ADDR_VAR 0 2
58770: PUSH
58771: LD_INT 0
58773: PUSH
58774: LD_INT 0
58776: PUSH
58777: LD_INT 0
58779: PUSH
58780: LD_VAR 0 11
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: ST_TO_ADDR
// exit ;
58791: GO 61012
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
58793: LD_EXP 79
58797: PUSH
58798: LD_EXP 78
58802: PUSH
58803: LD_VAR 0 1
58807: ARRAY
58808: ARRAY
58809: PUSH
58810: LD_EXP 52
58814: PUSH
58815: LD_VAR 0 1
58819: ARRAY
58820: PPUSH
58821: LD_INT 2
58823: PUSH
58824: LD_INT 30
58826: PUSH
58827: LD_INT 6
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 30
58836: PUSH
58837: LD_INT 7
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 30
58846: PUSH
58847: LD_INT 8
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: PPUSH
58860: CALL_OW 72
58864: AND
58865: PUSH
58866: LD_EXP 52
58870: PUSH
58871: LD_VAR 0 1
58875: ARRAY
58876: PPUSH
58877: LD_INT 30
58879: PUSH
58880: LD_INT 3
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PPUSH
58887: CALL_OW 72
58891: AND
58892: IFFALSE 59626
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
58894: LD_ADDR_EXP 94
58898: PUSH
58899: LD_EXP 94
58903: PPUSH
58904: LD_VAR 0 1
58908: PPUSH
58909: LD_INT 3
58911: PPUSH
58912: CALL_OW 1
58916: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
58917: LD_ADDR_VAR 0 2
58921: PUSH
58922: LD_INT 0
58924: PUSH
58925: LD_INT 0
58927: PUSH
58928: LD_INT 0
58930: PUSH
58931: LD_INT 0
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: ST_TO_ADDR
// if not eng then
58940: LD_VAR 0 6
58944: NOT
58945: IFFALSE 59008
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
58947: LD_ADDR_VAR 0 11
58951: PUSH
58952: LD_VAR 0 4
58956: PPUSH
58957: LD_INT 2
58959: PPUSH
58960: CALL 51145 0 2
58964: PUSH
58965: LD_INT 1
58967: ARRAY
58968: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
58969: LD_ADDR_VAR 0 2
58973: PUSH
58974: LD_VAR 0 2
58978: PPUSH
58979: LD_INT 2
58981: PPUSH
58982: LD_VAR 0 11
58986: PPUSH
58987: CALL_OW 1
58991: ST_TO_ADDR
// tmp := tmp diff p ;
58992: LD_ADDR_VAR 0 4
58996: PUSH
58997: LD_VAR 0 4
59001: PUSH
59002: LD_VAR 0 11
59006: DIFF
59007: ST_TO_ADDR
// end ; if tmp and sci < 6 then
59008: LD_VAR 0 4
59012: PUSH
59013: LD_VAR 0 8
59017: PUSH
59018: LD_INT 6
59020: LESS
59021: AND
59022: IFFALSE 59210
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
59024: LD_ADDR_VAR 0 9
59028: PUSH
59029: LD_VAR 0 4
59033: PUSH
59034: LD_VAR 0 8
59038: PUSH
59039: LD_VAR 0 7
59043: UNION
59044: DIFF
59045: PPUSH
59046: LD_INT 4
59048: PPUSH
59049: CALL 51145 0 2
59053: ST_TO_ADDR
// p := [ ] ;
59054: LD_ADDR_VAR 0 11
59058: PUSH
59059: EMPTY
59060: ST_TO_ADDR
// if sort then
59061: LD_VAR 0 9
59065: IFFALSE 59181
// for i = 1 to 6 - sci do
59067: LD_ADDR_VAR 0 3
59071: PUSH
59072: DOUBLE
59073: LD_INT 1
59075: DEC
59076: ST_TO_ADDR
59077: LD_INT 6
59079: PUSH
59080: LD_VAR 0 8
59084: MINUS
59085: PUSH
59086: FOR_TO
59087: IFFALSE 59179
// begin if i = sort then
59089: LD_VAR 0 3
59093: PUSH
59094: LD_VAR 0 9
59098: EQUAL
59099: IFFALSE 59103
// break ;
59101: GO 59179
// if GetClass ( i ) = 4 then
59103: LD_VAR 0 3
59107: PPUSH
59108: CALL_OW 257
59112: PUSH
59113: LD_INT 4
59115: EQUAL
59116: IFFALSE 59120
// continue ;
59118: GO 59086
// p := Insert ( p , p + 1 , sort [ i ] ) ;
59120: LD_ADDR_VAR 0 11
59124: PUSH
59125: LD_VAR 0 11
59129: PPUSH
59130: LD_VAR 0 11
59134: PUSH
59135: LD_INT 1
59137: PLUS
59138: PPUSH
59139: LD_VAR 0 9
59143: PUSH
59144: LD_VAR 0 3
59148: ARRAY
59149: PPUSH
59150: CALL_OW 2
59154: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
59155: LD_ADDR_VAR 0 4
59159: PUSH
59160: LD_VAR 0 4
59164: PUSH
59165: LD_VAR 0 9
59169: PUSH
59170: LD_VAR 0 3
59174: ARRAY
59175: DIFF
59176: ST_TO_ADDR
// end ;
59177: GO 59086
59179: POP
59180: POP
// if p then
59181: LD_VAR 0 11
59185: IFFALSE 59210
// result := Replace ( result , 4 , p ) ;
59187: LD_ADDR_VAR 0 2
59191: PUSH
59192: LD_VAR 0 2
59196: PPUSH
59197: LD_INT 4
59199: PPUSH
59200: LD_VAR 0 11
59204: PPUSH
59205: CALL_OW 1
59209: ST_TO_ADDR
// end ; if tmp and mech < 6 then
59210: LD_VAR 0 4
59214: PUSH
59215: LD_VAR 0 7
59219: PUSH
59220: LD_INT 6
59222: LESS
59223: AND
59224: IFFALSE 59412
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
59226: LD_ADDR_VAR 0 9
59230: PUSH
59231: LD_VAR 0 4
59235: PUSH
59236: LD_VAR 0 8
59240: PUSH
59241: LD_VAR 0 7
59245: UNION
59246: DIFF
59247: PPUSH
59248: LD_INT 3
59250: PPUSH
59251: CALL 51145 0 2
59255: ST_TO_ADDR
// p := [ ] ;
59256: LD_ADDR_VAR 0 11
59260: PUSH
59261: EMPTY
59262: ST_TO_ADDR
// if sort then
59263: LD_VAR 0 9
59267: IFFALSE 59383
// for i = 1 to 6 - mech do
59269: LD_ADDR_VAR 0 3
59273: PUSH
59274: DOUBLE
59275: LD_INT 1
59277: DEC
59278: ST_TO_ADDR
59279: LD_INT 6
59281: PUSH
59282: LD_VAR 0 7
59286: MINUS
59287: PUSH
59288: FOR_TO
59289: IFFALSE 59381
// begin if i = sort then
59291: LD_VAR 0 3
59295: PUSH
59296: LD_VAR 0 9
59300: EQUAL
59301: IFFALSE 59305
// break ;
59303: GO 59381
// if GetClass ( i ) = 3 then
59305: LD_VAR 0 3
59309: PPUSH
59310: CALL_OW 257
59314: PUSH
59315: LD_INT 3
59317: EQUAL
59318: IFFALSE 59322
// continue ;
59320: GO 59288
// p := Insert ( p , p + 1 , sort [ i ] ) ;
59322: LD_ADDR_VAR 0 11
59326: PUSH
59327: LD_VAR 0 11
59331: PPUSH
59332: LD_VAR 0 11
59336: PUSH
59337: LD_INT 1
59339: PLUS
59340: PPUSH
59341: LD_VAR 0 9
59345: PUSH
59346: LD_VAR 0 3
59350: ARRAY
59351: PPUSH
59352: CALL_OW 2
59356: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
59357: LD_ADDR_VAR 0 4
59361: PUSH
59362: LD_VAR 0 4
59366: PUSH
59367: LD_VAR 0 9
59371: PUSH
59372: LD_VAR 0 3
59376: ARRAY
59377: DIFF
59378: ST_TO_ADDR
// end ;
59379: GO 59288
59381: POP
59382: POP
// if p then
59383: LD_VAR 0 11
59387: IFFALSE 59412
// result := Replace ( result , 3 , p ) ;
59389: LD_ADDR_VAR 0 2
59393: PUSH
59394: LD_VAR 0 2
59398: PPUSH
59399: LD_INT 3
59401: PPUSH
59402: LD_VAR 0 11
59406: PPUSH
59407: CALL_OW 1
59411: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
59412: LD_VAR 0 4
59416: PUSH
59417: LD_INT 6
59419: GREATER
59420: PUSH
59421: LD_VAR 0 6
59425: PUSH
59426: LD_INT 6
59428: LESS
59429: AND
59430: IFFALSE 59624
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
59432: LD_ADDR_VAR 0 9
59436: PUSH
59437: LD_VAR 0 4
59441: PUSH
59442: LD_VAR 0 8
59446: PUSH
59447: LD_VAR 0 7
59451: UNION
59452: PUSH
59453: LD_VAR 0 6
59457: UNION
59458: DIFF
59459: PPUSH
59460: LD_INT 2
59462: PPUSH
59463: CALL 51145 0 2
59467: ST_TO_ADDR
// p := [ ] ;
59468: LD_ADDR_VAR 0 11
59472: PUSH
59473: EMPTY
59474: ST_TO_ADDR
// if sort then
59475: LD_VAR 0 9
59479: IFFALSE 59595
// for i = 1 to 6 - eng do
59481: LD_ADDR_VAR 0 3
59485: PUSH
59486: DOUBLE
59487: LD_INT 1
59489: DEC
59490: ST_TO_ADDR
59491: LD_INT 6
59493: PUSH
59494: LD_VAR 0 6
59498: MINUS
59499: PUSH
59500: FOR_TO
59501: IFFALSE 59593
// begin if i = sort then
59503: LD_VAR 0 3
59507: PUSH
59508: LD_VAR 0 9
59512: EQUAL
59513: IFFALSE 59517
// break ;
59515: GO 59593
// if GetClass ( i ) = 2 then
59517: LD_VAR 0 3
59521: PPUSH
59522: CALL_OW 257
59526: PUSH
59527: LD_INT 2
59529: EQUAL
59530: IFFALSE 59534
// continue ;
59532: GO 59500
// p := Insert ( p , p + 1 , sort [ i ] ) ;
59534: LD_ADDR_VAR 0 11
59538: PUSH
59539: LD_VAR 0 11
59543: PPUSH
59544: LD_VAR 0 11
59548: PUSH
59549: LD_INT 1
59551: PLUS
59552: PPUSH
59553: LD_VAR 0 9
59557: PUSH
59558: LD_VAR 0 3
59562: ARRAY
59563: PPUSH
59564: CALL_OW 2
59568: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
59569: LD_ADDR_VAR 0 4
59573: PUSH
59574: LD_VAR 0 4
59578: PUSH
59579: LD_VAR 0 9
59583: PUSH
59584: LD_VAR 0 3
59588: ARRAY
59589: DIFF
59590: ST_TO_ADDR
// end ;
59591: GO 59500
59593: POP
59594: POP
// if p then
59595: LD_VAR 0 11
59599: IFFALSE 59624
// result := Replace ( result , 2 , p ) ;
59601: LD_ADDR_VAR 0 2
59605: PUSH
59606: LD_VAR 0 2
59610: PPUSH
59611: LD_INT 2
59613: PPUSH
59614: LD_VAR 0 11
59618: PPUSH
59619: CALL_OW 1
59623: ST_TO_ADDR
// end ; exit ;
59624: GO 61012
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
59626: LD_EXP 79
59630: PUSH
59631: LD_EXP 78
59635: PUSH
59636: LD_VAR 0 1
59640: ARRAY
59641: ARRAY
59642: NOT
59643: PUSH
59644: LD_EXP 52
59648: PUSH
59649: LD_VAR 0 1
59653: ARRAY
59654: PPUSH
59655: LD_INT 30
59657: PUSH
59658: LD_INT 3
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PPUSH
59665: CALL_OW 72
59669: AND
59670: PUSH
59671: LD_EXP 57
59675: PUSH
59676: LD_VAR 0 1
59680: ARRAY
59681: AND
59682: IFFALSE 60290
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
59684: LD_ADDR_EXP 94
59688: PUSH
59689: LD_EXP 94
59693: PPUSH
59694: LD_VAR 0 1
59698: PPUSH
59699: LD_INT 5
59701: PPUSH
59702: CALL_OW 1
59706: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
59707: LD_ADDR_VAR 0 2
59711: PUSH
59712: LD_INT 0
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: LD_INT 0
59720: PUSH
59721: LD_INT 0
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: ST_TO_ADDR
// if sci > 1 then
59730: LD_VAR 0 8
59734: PUSH
59735: LD_INT 1
59737: GREATER
59738: IFFALSE 59766
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
59740: LD_ADDR_VAR 0 4
59744: PUSH
59745: LD_VAR 0 4
59749: PUSH
59750: LD_VAR 0 8
59754: PUSH
59755: LD_VAR 0 8
59759: PUSH
59760: LD_INT 1
59762: ARRAY
59763: DIFF
59764: DIFF
59765: ST_TO_ADDR
// if tmp and not sci then
59766: LD_VAR 0 4
59770: PUSH
59771: LD_VAR 0 8
59775: NOT
59776: AND
59777: IFFALSE 59846
// begin sort := SortBySkill ( tmp , 4 ) ;
59779: LD_ADDR_VAR 0 9
59783: PUSH
59784: LD_VAR 0 4
59788: PPUSH
59789: LD_INT 4
59791: PPUSH
59792: CALL 51145 0 2
59796: ST_TO_ADDR
// if sort then
59797: LD_VAR 0 9
59801: IFFALSE 59817
// p := sort [ 1 ] ;
59803: LD_ADDR_VAR 0 11
59807: PUSH
59808: LD_VAR 0 9
59812: PUSH
59813: LD_INT 1
59815: ARRAY
59816: ST_TO_ADDR
// if p then
59817: LD_VAR 0 11
59821: IFFALSE 59846
// result := Replace ( result , 4 , p ) ;
59823: LD_ADDR_VAR 0 2
59827: PUSH
59828: LD_VAR 0 2
59832: PPUSH
59833: LD_INT 4
59835: PPUSH
59836: LD_VAR 0 11
59840: PPUSH
59841: CALL_OW 1
59845: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
59846: LD_ADDR_VAR 0 4
59850: PUSH
59851: LD_VAR 0 4
59855: PUSH
59856: LD_VAR 0 7
59860: DIFF
59861: ST_TO_ADDR
// if tmp and mech < 6 then
59862: LD_VAR 0 4
59866: PUSH
59867: LD_VAR 0 7
59871: PUSH
59872: LD_INT 6
59874: LESS
59875: AND
59876: IFFALSE 60064
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
59878: LD_ADDR_VAR 0 9
59882: PUSH
59883: LD_VAR 0 4
59887: PUSH
59888: LD_VAR 0 8
59892: PUSH
59893: LD_VAR 0 7
59897: UNION
59898: DIFF
59899: PPUSH
59900: LD_INT 3
59902: PPUSH
59903: CALL 51145 0 2
59907: ST_TO_ADDR
// p := [ ] ;
59908: LD_ADDR_VAR 0 11
59912: PUSH
59913: EMPTY
59914: ST_TO_ADDR
// if sort then
59915: LD_VAR 0 9
59919: IFFALSE 60035
// for i = 1 to 6 - mech do
59921: LD_ADDR_VAR 0 3
59925: PUSH
59926: DOUBLE
59927: LD_INT 1
59929: DEC
59930: ST_TO_ADDR
59931: LD_INT 6
59933: PUSH
59934: LD_VAR 0 7
59938: MINUS
59939: PUSH
59940: FOR_TO
59941: IFFALSE 60033
// begin if i = sort then
59943: LD_VAR 0 3
59947: PUSH
59948: LD_VAR 0 9
59952: EQUAL
59953: IFFALSE 59957
// break ;
59955: GO 60033
// if GetClass ( i ) = 3 then
59957: LD_VAR 0 3
59961: PPUSH
59962: CALL_OW 257
59966: PUSH
59967: LD_INT 3
59969: EQUAL
59970: IFFALSE 59974
// continue ;
59972: GO 59940
// p := Insert ( p , p + 1 , sort [ i ] ) ;
59974: LD_ADDR_VAR 0 11
59978: PUSH
59979: LD_VAR 0 11
59983: PPUSH
59984: LD_VAR 0 11
59988: PUSH
59989: LD_INT 1
59991: PLUS
59992: PPUSH
59993: LD_VAR 0 9
59997: PUSH
59998: LD_VAR 0 3
60002: ARRAY
60003: PPUSH
60004: CALL_OW 2
60008: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
60009: LD_ADDR_VAR 0 4
60013: PUSH
60014: LD_VAR 0 4
60018: PUSH
60019: LD_VAR 0 9
60023: PUSH
60024: LD_VAR 0 3
60028: ARRAY
60029: DIFF
60030: ST_TO_ADDR
// end ;
60031: GO 59940
60033: POP
60034: POP
// if p then
60035: LD_VAR 0 11
60039: IFFALSE 60064
// result := Replace ( result , 3 , p ) ;
60041: LD_ADDR_VAR 0 2
60045: PUSH
60046: LD_VAR 0 2
60050: PPUSH
60051: LD_INT 3
60053: PPUSH
60054: LD_VAR 0 11
60058: PPUSH
60059: CALL_OW 1
60063: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
60064: LD_ADDR_VAR 0 4
60068: PUSH
60069: LD_VAR 0 4
60073: PUSH
60074: LD_VAR 0 6
60078: DIFF
60079: ST_TO_ADDR
// if tmp and eng < 6 then
60080: LD_VAR 0 4
60084: PUSH
60085: LD_VAR 0 6
60089: PUSH
60090: LD_INT 6
60092: LESS
60093: AND
60094: IFFALSE 60288
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
60096: LD_ADDR_VAR 0 9
60100: PUSH
60101: LD_VAR 0 4
60105: PUSH
60106: LD_VAR 0 8
60110: PUSH
60111: LD_VAR 0 7
60115: UNION
60116: PUSH
60117: LD_VAR 0 6
60121: UNION
60122: DIFF
60123: PPUSH
60124: LD_INT 2
60126: PPUSH
60127: CALL 51145 0 2
60131: ST_TO_ADDR
// p := [ ] ;
60132: LD_ADDR_VAR 0 11
60136: PUSH
60137: EMPTY
60138: ST_TO_ADDR
// if sort then
60139: LD_VAR 0 9
60143: IFFALSE 60259
// for i = 1 to 6 - eng do
60145: LD_ADDR_VAR 0 3
60149: PUSH
60150: DOUBLE
60151: LD_INT 1
60153: DEC
60154: ST_TO_ADDR
60155: LD_INT 6
60157: PUSH
60158: LD_VAR 0 6
60162: MINUS
60163: PUSH
60164: FOR_TO
60165: IFFALSE 60257
// begin if i = sort then
60167: LD_VAR 0 3
60171: PUSH
60172: LD_VAR 0 9
60176: EQUAL
60177: IFFALSE 60181
// break ;
60179: GO 60257
// if GetClass ( i ) = 2 then
60181: LD_VAR 0 3
60185: PPUSH
60186: CALL_OW 257
60190: PUSH
60191: LD_INT 2
60193: EQUAL
60194: IFFALSE 60198
// continue ;
60196: GO 60164
// p := Insert ( p , p + 1 , sort [ i ] ) ;
60198: LD_ADDR_VAR 0 11
60202: PUSH
60203: LD_VAR 0 11
60207: PPUSH
60208: LD_VAR 0 11
60212: PUSH
60213: LD_INT 1
60215: PLUS
60216: PPUSH
60217: LD_VAR 0 9
60221: PUSH
60222: LD_VAR 0 3
60226: ARRAY
60227: PPUSH
60228: CALL_OW 2
60232: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
60233: LD_ADDR_VAR 0 4
60237: PUSH
60238: LD_VAR 0 4
60242: PUSH
60243: LD_VAR 0 9
60247: PUSH
60248: LD_VAR 0 3
60252: ARRAY
60253: DIFF
60254: ST_TO_ADDR
// end ;
60255: GO 60164
60257: POP
60258: POP
// if p then
60259: LD_VAR 0 11
60263: IFFALSE 60288
// result := Replace ( result , 2 , p ) ;
60265: LD_ADDR_VAR 0 2
60269: PUSH
60270: LD_VAR 0 2
60274: PPUSH
60275: LD_INT 2
60277: PPUSH
60278: LD_VAR 0 11
60282: PPUSH
60283: CALL_OW 1
60287: ST_TO_ADDR
// end ; exit ;
60288: GO 61012
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
60290: LD_EXP 79
60294: PUSH
60295: LD_EXP 78
60299: PUSH
60300: LD_VAR 0 1
60304: ARRAY
60305: ARRAY
60306: NOT
60307: PUSH
60308: LD_EXP 52
60312: PUSH
60313: LD_VAR 0 1
60317: ARRAY
60318: PPUSH
60319: LD_INT 30
60321: PUSH
60322: LD_INT 3
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PPUSH
60329: CALL_OW 72
60333: AND
60334: PUSH
60335: LD_EXP 57
60339: PUSH
60340: LD_VAR 0 1
60344: ARRAY
60345: NOT
60346: AND
60347: IFFALSE 61012
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
60349: LD_ADDR_EXP 94
60353: PUSH
60354: LD_EXP 94
60358: PPUSH
60359: LD_VAR 0 1
60363: PPUSH
60364: LD_INT 6
60366: PPUSH
60367: CALL_OW 1
60371: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
60372: LD_ADDR_VAR 0 2
60376: PUSH
60377: LD_INT 0
60379: PUSH
60380: LD_INT 0
60382: PUSH
60383: LD_INT 0
60385: PUSH
60386: LD_INT 0
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: ST_TO_ADDR
// if sci >= 1 then
60395: LD_VAR 0 8
60399: PUSH
60400: LD_INT 1
60402: GREATEREQUAL
60403: IFFALSE 60425
// tmp := tmp diff sci [ 1 ] ;
60405: LD_ADDR_VAR 0 4
60409: PUSH
60410: LD_VAR 0 4
60414: PUSH
60415: LD_VAR 0 8
60419: PUSH
60420: LD_INT 1
60422: ARRAY
60423: DIFF
60424: ST_TO_ADDR
// if tmp and not sci then
60425: LD_VAR 0 4
60429: PUSH
60430: LD_VAR 0 8
60434: NOT
60435: AND
60436: IFFALSE 60505
// begin sort := SortBySkill ( tmp , 4 ) ;
60438: LD_ADDR_VAR 0 9
60442: PUSH
60443: LD_VAR 0 4
60447: PPUSH
60448: LD_INT 4
60450: PPUSH
60451: CALL 51145 0 2
60455: ST_TO_ADDR
// if sort then
60456: LD_VAR 0 9
60460: IFFALSE 60476
// p := sort [ 1 ] ;
60462: LD_ADDR_VAR 0 11
60466: PUSH
60467: LD_VAR 0 9
60471: PUSH
60472: LD_INT 1
60474: ARRAY
60475: ST_TO_ADDR
// if p then
60476: LD_VAR 0 11
60480: IFFALSE 60505
// result := Replace ( result , 4 , p ) ;
60482: LD_ADDR_VAR 0 2
60486: PUSH
60487: LD_VAR 0 2
60491: PPUSH
60492: LD_INT 4
60494: PPUSH
60495: LD_VAR 0 11
60499: PPUSH
60500: CALL_OW 1
60504: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
60505: LD_ADDR_VAR 0 4
60509: PUSH
60510: LD_VAR 0 4
60514: PUSH
60515: LD_VAR 0 7
60519: DIFF
60520: ST_TO_ADDR
// if tmp and mech < 6 then
60521: LD_VAR 0 4
60525: PUSH
60526: LD_VAR 0 7
60530: PUSH
60531: LD_INT 6
60533: LESS
60534: AND
60535: IFFALSE 60717
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
60537: LD_ADDR_VAR 0 9
60541: PUSH
60542: LD_VAR 0 4
60546: PUSH
60547: LD_VAR 0 7
60551: DIFF
60552: PPUSH
60553: LD_INT 3
60555: PPUSH
60556: CALL 51145 0 2
60560: ST_TO_ADDR
// p := [ ] ;
60561: LD_ADDR_VAR 0 11
60565: PUSH
60566: EMPTY
60567: ST_TO_ADDR
// if sort then
60568: LD_VAR 0 9
60572: IFFALSE 60688
// for i = 1 to 6 - mech do
60574: LD_ADDR_VAR 0 3
60578: PUSH
60579: DOUBLE
60580: LD_INT 1
60582: DEC
60583: ST_TO_ADDR
60584: LD_INT 6
60586: PUSH
60587: LD_VAR 0 7
60591: MINUS
60592: PUSH
60593: FOR_TO
60594: IFFALSE 60686
// begin if i = sort then
60596: LD_VAR 0 3
60600: PUSH
60601: LD_VAR 0 9
60605: EQUAL
60606: IFFALSE 60610
// break ;
60608: GO 60686
// if GetClass ( i ) = 3 then
60610: LD_VAR 0 3
60614: PPUSH
60615: CALL_OW 257
60619: PUSH
60620: LD_INT 3
60622: EQUAL
60623: IFFALSE 60627
// continue ;
60625: GO 60593
// p := Insert ( p , p + 1 , sort [ i ] ) ;
60627: LD_ADDR_VAR 0 11
60631: PUSH
60632: LD_VAR 0 11
60636: PPUSH
60637: LD_VAR 0 11
60641: PUSH
60642: LD_INT 1
60644: PLUS
60645: PPUSH
60646: LD_VAR 0 9
60650: PUSH
60651: LD_VAR 0 3
60655: ARRAY
60656: PPUSH
60657: CALL_OW 2
60661: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
60662: LD_ADDR_VAR 0 4
60666: PUSH
60667: LD_VAR 0 4
60671: PUSH
60672: LD_VAR 0 9
60676: PUSH
60677: LD_VAR 0 3
60681: ARRAY
60682: DIFF
60683: ST_TO_ADDR
// end ;
60684: GO 60593
60686: POP
60687: POP
// if p then
60688: LD_VAR 0 11
60692: IFFALSE 60717
// result := Replace ( result , 3 , p ) ;
60694: LD_ADDR_VAR 0 2
60698: PUSH
60699: LD_VAR 0 2
60703: PPUSH
60704: LD_INT 3
60706: PPUSH
60707: LD_VAR 0 11
60711: PPUSH
60712: CALL_OW 1
60716: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
60717: LD_ADDR_VAR 0 4
60721: PUSH
60722: LD_VAR 0 4
60726: PUSH
60727: LD_VAR 0 6
60731: DIFF
60732: ST_TO_ADDR
// if tmp and eng < 4 then
60733: LD_VAR 0 4
60737: PUSH
60738: LD_VAR 0 6
60742: PUSH
60743: LD_INT 4
60745: LESS
60746: AND
60747: IFFALSE 60937
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
60749: LD_ADDR_VAR 0 9
60753: PUSH
60754: LD_VAR 0 4
60758: PUSH
60759: LD_VAR 0 7
60763: PUSH
60764: LD_VAR 0 6
60768: UNION
60769: DIFF
60770: PPUSH
60771: LD_INT 2
60773: PPUSH
60774: CALL 51145 0 2
60778: ST_TO_ADDR
// p := [ ] ;
60779: LD_ADDR_VAR 0 11
60783: PUSH
60784: EMPTY
60785: ST_TO_ADDR
// if sort then
60786: LD_VAR 0 9
60790: IFFALSE 60906
// for i = 1 to 4 - eng do
60792: LD_ADDR_VAR 0 3
60796: PUSH
60797: DOUBLE
60798: LD_INT 1
60800: DEC
60801: ST_TO_ADDR
60802: LD_INT 4
60804: PUSH
60805: LD_VAR 0 6
60809: MINUS
60810: PUSH
60811: FOR_TO
60812: IFFALSE 60904
// begin if i = sort then
60814: LD_VAR 0 3
60818: PUSH
60819: LD_VAR 0 9
60823: EQUAL
60824: IFFALSE 60828
// break ;
60826: GO 60904
// if GetClass ( i ) = 2 then
60828: LD_VAR 0 3
60832: PPUSH
60833: CALL_OW 257
60837: PUSH
60838: LD_INT 2
60840: EQUAL
60841: IFFALSE 60845
// continue ;
60843: GO 60811
// p := Insert ( p , p + 1 , sort [ i ] ) ;
60845: LD_ADDR_VAR 0 11
60849: PUSH
60850: LD_VAR 0 11
60854: PPUSH
60855: LD_VAR 0 11
60859: PUSH
60860: LD_INT 1
60862: PLUS
60863: PPUSH
60864: LD_VAR 0 9
60868: PUSH
60869: LD_VAR 0 3
60873: ARRAY
60874: PPUSH
60875: CALL_OW 2
60879: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
60880: LD_ADDR_VAR 0 4
60884: PUSH
60885: LD_VAR 0 4
60889: PUSH
60890: LD_VAR 0 9
60894: PUSH
60895: LD_VAR 0 3
60899: ARRAY
60900: DIFF
60901: ST_TO_ADDR
// end ;
60902: GO 60811
60904: POP
60905: POP
// if p then
60906: LD_VAR 0 11
60910: IFFALSE 60935
// result := Replace ( result , 2 , p ) ;
60912: LD_ADDR_VAR 0 2
60916: PUSH
60917: LD_VAR 0 2
60921: PPUSH
60922: LD_INT 2
60924: PPUSH
60925: LD_VAR 0 11
60929: PPUSH
60930: CALL_OW 1
60934: ST_TO_ADDR
// end else
60935: GO 60981
// for i = eng downto 5 do
60937: LD_ADDR_VAR 0 3
60941: PUSH
60942: DOUBLE
60943: LD_VAR 0 6
60947: INC
60948: ST_TO_ADDR
60949: LD_INT 5
60951: PUSH
60952: FOR_DOWNTO
60953: IFFALSE 60979
// tmp := tmp union eng [ i ] ;
60955: LD_ADDR_VAR 0 4
60959: PUSH
60960: LD_VAR 0 4
60964: PUSH
60965: LD_VAR 0 6
60969: PUSH
60970: LD_VAR 0 3
60974: ARRAY
60975: UNION
60976: ST_TO_ADDR
60977: GO 60952
60979: POP
60980: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
60981: LD_ADDR_VAR 0 2
60985: PUSH
60986: LD_VAR 0 2
60990: PPUSH
60991: LD_INT 1
60993: PPUSH
60994: LD_VAR 0 4
60998: PUSH
60999: LD_VAR 0 5
61003: DIFF
61004: PPUSH
61005: CALL_OW 1
61009: ST_TO_ADDR
// exit ;
61010: GO 61012
// end ; end ;
61012: LD_VAR 0 2
61016: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
61017: LD_INT 0
61019: PPUSH
61020: PPUSH
61021: PPUSH
// if not mc_bases then
61022: LD_EXP 52
61026: NOT
61027: IFFALSE 61031
// exit ;
61029: GO 61137
// for i = 1 to mc_bases do
61031: LD_ADDR_VAR 0 2
61035: PUSH
61036: DOUBLE
61037: LD_INT 1
61039: DEC
61040: ST_TO_ADDR
61041: LD_EXP 52
61045: PUSH
61046: FOR_TO
61047: IFFALSE 61128
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
61049: LD_ADDR_VAR 0 3
61053: PUSH
61054: LD_EXP 52
61058: PUSH
61059: LD_VAR 0 2
61063: ARRAY
61064: PPUSH
61065: LD_INT 21
61067: PUSH
61068: LD_INT 3
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 3
61077: PUSH
61078: LD_INT 24
61080: PUSH
61081: LD_INT 1000
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PPUSH
61096: CALL_OW 72
61100: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
61101: LD_ADDR_EXP 53
61105: PUSH
61106: LD_EXP 53
61110: PPUSH
61111: LD_VAR 0 2
61115: PPUSH
61116: LD_VAR 0 3
61120: PPUSH
61121: CALL_OW 1
61125: ST_TO_ADDR
// end ;
61126: GO 61046
61128: POP
61129: POP
// RaiseSailEvent ( 101 ) ;
61130: LD_INT 101
61132: PPUSH
61133: CALL_OW 427
// end ;
61137: LD_VAR 0 1
61141: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
61142: LD_INT 0
61144: PPUSH
61145: PPUSH
61146: PPUSH
61147: PPUSH
61148: PPUSH
61149: PPUSH
61150: PPUSH
// if not mc_bases then
61151: LD_EXP 52
61155: NOT
61156: IFFALSE 61160
// exit ;
61158: GO 61733
// for i = 1 to mc_bases do
61160: LD_ADDR_VAR 0 2
61164: PUSH
61165: DOUBLE
61166: LD_INT 1
61168: DEC
61169: ST_TO_ADDR
61170: LD_EXP 52
61174: PUSH
61175: FOR_TO
61176: IFFALSE 61724
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
61178: LD_ADDR_VAR 0 5
61182: PUSH
61183: LD_EXP 52
61187: PUSH
61188: LD_VAR 0 2
61192: ARRAY
61193: PUSH
61194: LD_EXP 81
61198: PUSH
61199: LD_VAR 0 2
61203: ARRAY
61204: UNION
61205: PPUSH
61206: LD_INT 21
61208: PUSH
61209: LD_INT 1
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 1
61218: PUSH
61219: LD_INT 3
61221: PUSH
61222: LD_INT 54
61224: PUSH
61225: EMPTY
61226: LIST
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 3
61234: PUSH
61235: LD_INT 24
61237: PUSH
61238: LD_INT 800
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: LIST
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PPUSH
61258: CALL_OW 72
61262: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
61263: LD_ADDR_VAR 0 6
61267: PUSH
61268: LD_EXP 52
61272: PUSH
61273: LD_VAR 0 2
61277: ARRAY
61278: PPUSH
61279: LD_INT 21
61281: PUSH
61282: LD_INT 1
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 1
61291: PUSH
61292: LD_INT 3
61294: PUSH
61295: LD_INT 54
61297: PUSH
61298: EMPTY
61299: LIST
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 3
61307: PUSH
61308: LD_INT 24
61310: PUSH
61311: LD_INT 250
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: LIST
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PPUSH
61331: CALL_OW 72
61335: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
61336: LD_ADDR_VAR 0 7
61340: PUSH
61341: LD_VAR 0 5
61345: PUSH
61346: LD_VAR 0 6
61350: DIFF
61351: ST_TO_ADDR
// if not need_heal_1 then
61352: LD_VAR 0 6
61356: NOT
61357: IFFALSE 61390
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
61359: LD_ADDR_EXP 55
61363: PUSH
61364: LD_EXP 55
61368: PPUSH
61369: LD_VAR 0 2
61373: PUSH
61374: LD_INT 1
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PPUSH
61381: EMPTY
61382: PPUSH
61383: CALL 16921 0 3
61387: ST_TO_ADDR
61388: GO 61460
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
61390: LD_ADDR_EXP 55
61394: PUSH
61395: LD_EXP 55
61399: PPUSH
61400: LD_VAR 0 2
61404: PUSH
61405: LD_INT 1
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PPUSH
61412: LD_EXP 55
61416: PUSH
61417: LD_VAR 0 2
61421: ARRAY
61422: PUSH
61423: LD_INT 1
61425: ARRAY
61426: PPUSH
61427: LD_INT 3
61429: PUSH
61430: LD_INT 24
61432: PUSH
61433: LD_INT 1000
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PPUSH
61444: CALL_OW 72
61448: PUSH
61449: LD_VAR 0 6
61453: UNION
61454: PPUSH
61455: CALL 16921 0 3
61459: ST_TO_ADDR
// if not need_heal_2 then
61460: LD_VAR 0 7
61464: NOT
61465: IFFALSE 61498
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
61467: LD_ADDR_EXP 55
61471: PUSH
61472: LD_EXP 55
61476: PPUSH
61477: LD_VAR 0 2
61481: PUSH
61482: LD_INT 2
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PPUSH
61489: EMPTY
61490: PPUSH
61491: CALL 16921 0 3
61495: ST_TO_ADDR
61496: GO 61530
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
61498: LD_ADDR_EXP 55
61502: PUSH
61503: LD_EXP 55
61507: PPUSH
61508: LD_VAR 0 2
61512: PUSH
61513: LD_INT 2
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PPUSH
61520: LD_VAR 0 7
61524: PPUSH
61525: CALL 16921 0 3
61529: ST_TO_ADDR
// if need_heal_2 then
61530: LD_VAR 0 7
61534: IFFALSE 61706
// for j in need_heal_2 do
61536: LD_ADDR_VAR 0 3
61540: PUSH
61541: LD_VAR 0 7
61545: PUSH
61546: FOR_IN
61547: IFFALSE 61704
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
61549: LD_ADDR_VAR 0 5
61553: PUSH
61554: LD_EXP 52
61558: PUSH
61559: LD_VAR 0 2
61563: ARRAY
61564: PPUSH
61565: LD_INT 2
61567: PUSH
61568: LD_INT 30
61570: PUSH
61571: LD_INT 6
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 30
61580: PUSH
61581: LD_INT 7
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 30
61590: PUSH
61591: LD_INT 8
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 30
61600: PUSH
61601: LD_INT 0
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 30
61610: PUSH
61611: LD_INT 1
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 25
61620: PUSH
61621: LD_INT 4
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: PPUSH
61637: CALL_OW 72
61641: ST_TO_ADDR
// if tmp then
61642: LD_VAR 0 5
61646: IFFALSE 61702
// begin k := NearestUnitToUnit ( tmp , j ) ;
61648: LD_ADDR_VAR 0 4
61652: PUSH
61653: LD_VAR 0 5
61657: PPUSH
61658: LD_VAR 0 3
61662: PPUSH
61663: CALL_OW 74
61667: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
61668: LD_VAR 0 3
61672: PPUSH
61673: LD_VAR 0 4
61677: PPUSH
61678: CALL_OW 296
61682: PUSH
61683: LD_INT 7
61685: GREATER
61686: IFFALSE 61702
// ComMoveUnit ( j , k ) ;
61688: LD_VAR 0 3
61692: PPUSH
61693: LD_VAR 0 4
61697: PPUSH
61698: CALL_OW 112
// end ; end ;
61702: GO 61546
61704: POP
61705: POP
// if not need_heal_1 and not need_heal_2 then
61706: LD_VAR 0 6
61710: NOT
61711: PUSH
61712: LD_VAR 0 7
61716: NOT
61717: AND
61718: IFFALSE 61722
// continue ;
61720: GO 61175
// end ;
61722: GO 61175
61724: POP
61725: POP
// RaiseSailEvent ( 102 ) ;
61726: LD_INT 102
61728: PPUSH
61729: CALL_OW 427
// end ;
61733: LD_VAR 0 1
61737: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
61738: LD_INT 0
61740: PPUSH
61741: PPUSH
61742: PPUSH
61743: PPUSH
61744: PPUSH
// if not mc_bases then
61745: LD_EXP 52
61749: NOT
61750: IFFALSE 61754
// exit ;
61752: GO 62139
// for i = 1 to mc_bases do
61754: LD_ADDR_VAR 0 2
61758: PUSH
61759: DOUBLE
61760: LD_INT 1
61762: DEC
61763: ST_TO_ADDR
61764: LD_EXP 52
61768: PUSH
61769: FOR_TO
61770: IFFALSE 62137
// begin if not mc_building_need_repair [ i ] then
61772: LD_EXP 53
61776: PUSH
61777: LD_VAR 0 2
61781: ARRAY
61782: NOT
61783: IFFALSE 61821
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
61785: LD_ADDR_EXP 54
61789: PUSH
61790: LD_EXP 54
61794: PPUSH
61795: LD_VAR 0 2
61799: PPUSH
61800: EMPTY
61801: PPUSH
61802: CALL_OW 1
61806: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
61807: LD_VAR 0 2
61811: PPUSH
61812: LD_INT 101
61814: PPUSH
61815: CALL 56859 0 2
// continue ;
61819: GO 61769
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
61821: LD_ADDR_EXP 58
61825: PUSH
61826: LD_EXP 58
61830: PPUSH
61831: LD_VAR 0 2
61835: PPUSH
61836: EMPTY
61837: PPUSH
61838: CALL_OW 1
61842: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
61843: LD_VAR 0 2
61847: PPUSH
61848: LD_INT 103
61850: PPUSH
61851: CALL 56859 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
61855: LD_ADDR_VAR 0 5
61859: PUSH
61860: LD_EXP 52
61864: PUSH
61865: LD_VAR 0 2
61869: ARRAY
61870: PUSH
61871: LD_EXP 81
61875: PUSH
61876: LD_VAR 0 2
61880: ARRAY
61881: UNION
61882: PPUSH
61883: LD_INT 2
61885: PUSH
61886: LD_INT 25
61888: PUSH
61889: LD_INT 2
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 25
61898: PUSH
61899: LD_INT 16
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: LIST
61910: PUSH
61911: EMPTY
61912: LIST
61913: PPUSH
61914: CALL_OW 72
61918: ST_TO_ADDR
// if not tmp then
61919: LD_VAR 0 5
61923: NOT
61924: IFFALSE 61928
// continue ;
61926: GO 61769
// for j in tmp do
61928: LD_ADDR_VAR 0 3
61932: PUSH
61933: LD_VAR 0 5
61937: PUSH
61938: FOR_IN
61939: IFFALSE 62133
// begin if mc_need_heal [ i ] then
61941: LD_EXP 55
61945: PUSH
61946: LD_VAR 0 2
61950: ARRAY
61951: IFFALSE 61999
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
61953: LD_VAR 0 3
61957: PUSH
61958: LD_EXP 55
61962: PUSH
61963: LD_VAR 0 2
61967: ARRAY
61968: PUSH
61969: LD_INT 1
61971: ARRAY
61972: IN
61973: PUSH
61974: LD_VAR 0 3
61978: PUSH
61979: LD_EXP 55
61983: PUSH
61984: LD_VAR 0 2
61988: ARRAY
61989: PUSH
61990: LD_INT 2
61992: ARRAY
61993: IN
61994: OR
61995: IFFALSE 61999
// continue ;
61997: GO 61938
// if IsInUnit ( j ) then
61999: LD_VAR 0 3
62003: PPUSH
62004: CALL_OW 310
62008: IFFALSE 62019
// ComExitBuilding ( j ) ;
62010: LD_VAR 0 3
62014: PPUSH
62015: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
62019: LD_VAR 0 3
62023: PUSH
62024: LD_EXP 54
62028: PUSH
62029: LD_VAR 0 2
62033: ARRAY
62034: IN
62035: NOT
62036: IFFALSE 62094
// begin SetTag ( j , 101 ) ;
62038: LD_VAR 0 3
62042: PPUSH
62043: LD_INT 101
62045: PPUSH
62046: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
62050: LD_ADDR_EXP 54
62054: PUSH
62055: LD_EXP 54
62059: PPUSH
62060: LD_VAR 0 2
62064: PUSH
62065: LD_EXP 54
62069: PUSH
62070: LD_VAR 0 2
62074: ARRAY
62075: PUSH
62076: LD_INT 1
62078: PLUS
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PPUSH
62084: LD_VAR 0 3
62088: PPUSH
62089: CALL 16921 0 3
62093: ST_TO_ADDR
// end ; wait ( 1 ) ;
62094: LD_INT 1
62096: PPUSH
62097: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
62101: LD_VAR 0 3
62105: PPUSH
62106: LD_EXP 53
62110: PUSH
62111: LD_VAR 0 2
62115: ARRAY
62116: PPUSH
62117: LD_VAR 0 3
62121: PPUSH
62122: CALL_OW 74
62126: PPUSH
62127: CALL_OW 130
// end ;
62131: GO 61938
62133: POP
62134: POP
// end ;
62135: GO 61769
62137: POP
62138: POP
// end ;
62139: LD_VAR 0 1
62143: RET
// export function MC_Heal ; var i , j , tmp ; begin
62144: LD_INT 0
62146: PPUSH
62147: PPUSH
62148: PPUSH
62149: PPUSH
// if not mc_bases then
62150: LD_EXP 52
62154: NOT
62155: IFFALSE 62159
// exit ;
62157: GO 62561
// for i = 1 to mc_bases do
62159: LD_ADDR_VAR 0 2
62163: PUSH
62164: DOUBLE
62165: LD_INT 1
62167: DEC
62168: ST_TO_ADDR
62169: LD_EXP 52
62173: PUSH
62174: FOR_TO
62175: IFFALSE 62559
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
62177: LD_EXP 55
62181: PUSH
62182: LD_VAR 0 2
62186: ARRAY
62187: PUSH
62188: LD_INT 1
62190: ARRAY
62191: NOT
62192: PUSH
62193: LD_EXP 55
62197: PUSH
62198: LD_VAR 0 2
62202: ARRAY
62203: PUSH
62204: LD_INT 2
62206: ARRAY
62207: NOT
62208: AND
62209: IFFALSE 62247
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
62211: LD_ADDR_EXP 56
62215: PUSH
62216: LD_EXP 56
62220: PPUSH
62221: LD_VAR 0 2
62225: PPUSH
62226: EMPTY
62227: PPUSH
62228: CALL_OW 1
62232: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
62233: LD_VAR 0 2
62237: PPUSH
62238: LD_INT 102
62240: PPUSH
62241: CALL 56859 0 2
// continue ;
62245: GO 62174
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
62247: LD_ADDR_VAR 0 4
62251: PUSH
62252: LD_EXP 52
62256: PUSH
62257: LD_VAR 0 2
62261: ARRAY
62262: PPUSH
62263: LD_INT 25
62265: PUSH
62266: LD_INT 4
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PPUSH
62273: CALL_OW 72
62277: ST_TO_ADDR
// if not tmp then
62278: LD_VAR 0 4
62282: NOT
62283: IFFALSE 62287
// continue ;
62285: GO 62174
// if mc_taming [ i ] then
62287: LD_EXP 83
62291: PUSH
62292: LD_VAR 0 2
62296: ARRAY
62297: IFFALSE 62321
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
62299: LD_ADDR_EXP 83
62303: PUSH
62304: LD_EXP 83
62308: PPUSH
62309: LD_VAR 0 2
62313: PPUSH
62314: EMPTY
62315: PPUSH
62316: CALL_OW 1
62320: ST_TO_ADDR
// for j in tmp do
62321: LD_ADDR_VAR 0 3
62325: PUSH
62326: LD_VAR 0 4
62330: PUSH
62331: FOR_IN
62332: IFFALSE 62555
// begin if IsInUnit ( j ) then
62334: LD_VAR 0 3
62338: PPUSH
62339: CALL_OW 310
62343: IFFALSE 62354
// ComExitBuilding ( j ) ;
62345: LD_VAR 0 3
62349: PPUSH
62350: CALL_OW 122
// if not j in mc_healers [ i ] then
62354: LD_VAR 0 3
62358: PUSH
62359: LD_EXP 56
62363: PUSH
62364: LD_VAR 0 2
62368: ARRAY
62369: IN
62370: NOT
62371: IFFALSE 62417
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
62373: LD_ADDR_EXP 56
62377: PUSH
62378: LD_EXP 56
62382: PPUSH
62383: LD_VAR 0 2
62387: PUSH
62388: LD_EXP 56
62392: PUSH
62393: LD_VAR 0 2
62397: ARRAY
62398: PUSH
62399: LD_INT 1
62401: PLUS
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PPUSH
62407: LD_VAR 0 3
62411: PPUSH
62412: CALL 16921 0 3
62416: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
62417: LD_VAR 0 3
62421: PPUSH
62422: CALL_OW 110
62426: PUSH
62427: LD_INT 102
62429: NONEQUAL
62430: IFFALSE 62444
// SetTag ( j , 102 ) ;
62432: LD_VAR 0 3
62436: PPUSH
62437: LD_INT 102
62439: PPUSH
62440: CALL_OW 109
// Wait ( 3 ) ;
62444: LD_INT 3
62446: PPUSH
62447: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
62451: LD_EXP 55
62455: PUSH
62456: LD_VAR 0 2
62460: ARRAY
62461: PUSH
62462: LD_INT 1
62464: ARRAY
62465: IFFALSE 62497
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
62467: LD_VAR 0 3
62471: PPUSH
62472: LD_EXP 55
62476: PUSH
62477: LD_VAR 0 2
62481: ARRAY
62482: PUSH
62483: LD_INT 1
62485: ARRAY
62486: PUSH
62487: LD_INT 1
62489: ARRAY
62490: PPUSH
62491: CALL_OW 128
62495: GO 62553
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
62497: LD_VAR 0 3
62501: PPUSH
62502: CALL_OW 314
62506: NOT
62507: PUSH
62508: LD_EXP 55
62512: PUSH
62513: LD_VAR 0 2
62517: ARRAY
62518: PUSH
62519: LD_INT 2
62521: ARRAY
62522: AND
62523: IFFALSE 62553
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
62525: LD_VAR 0 3
62529: PPUSH
62530: LD_EXP 55
62534: PUSH
62535: LD_VAR 0 2
62539: ARRAY
62540: PUSH
62541: LD_INT 2
62543: ARRAY
62544: PUSH
62545: LD_INT 1
62547: ARRAY
62548: PPUSH
62549: CALL_OW 128
// end ;
62553: GO 62331
62555: POP
62556: POP
// end ;
62557: GO 62174
62559: POP
62560: POP
// end ;
62561: LD_VAR 0 1
62565: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
62566: LD_INT 0
62568: PPUSH
62569: PPUSH
62570: PPUSH
62571: PPUSH
62572: PPUSH
// if not mc_bases then
62573: LD_EXP 52
62577: NOT
62578: IFFALSE 62582
// exit ;
62580: GO 63725
// for i = 1 to mc_bases do
62582: LD_ADDR_VAR 0 2
62586: PUSH
62587: DOUBLE
62588: LD_INT 1
62590: DEC
62591: ST_TO_ADDR
62592: LD_EXP 52
62596: PUSH
62597: FOR_TO
62598: IFFALSE 63723
// begin if mc_scan [ i ] then
62600: LD_EXP 75
62604: PUSH
62605: LD_VAR 0 2
62609: ARRAY
62610: IFFALSE 62614
// continue ;
62612: GO 62597
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
62614: LD_EXP 57
62618: PUSH
62619: LD_VAR 0 2
62623: ARRAY
62624: NOT
62625: PUSH
62626: LD_EXP 59
62630: PUSH
62631: LD_VAR 0 2
62635: ARRAY
62636: NOT
62637: AND
62638: PUSH
62639: LD_EXP 58
62643: PUSH
62644: LD_VAR 0 2
62648: ARRAY
62649: AND
62650: IFFALSE 62688
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
62652: LD_ADDR_EXP 58
62656: PUSH
62657: LD_EXP 58
62661: PPUSH
62662: LD_VAR 0 2
62666: PPUSH
62667: EMPTY
62668: PPUSH
62669: CALL_OW 1
62673: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
62674: LD_VAR 0 2
62678: PPUSH
62679: LD_INT 103
62681: PPUSH
62682: CALL 56859 0 2
// continue ;
62686: GO 62597
// end ; if mc_construct_list [ i ] then
62688: LD_EXP 59
62692: PUSH
62693: LD_VAR 0 2
62697: ARRAY
62698: IFFALSE 62918
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
62700: LD_ADDR_VAR 0 4
62704: PUSH
62705: LD_EXP 52
62709: PUSH
62710: LD_VAR 0 2
62714: ARRAY
62715: PPUSH
62716: LD_INT 25
62718: PUSH
62719: LD_INT 2
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PPUSH
62726: CALL_OW 72
62730: PUSH
62731: LD_EXP 54
62735: PUSH
62736: LD_VAR 0 2
62740: ARRAY
62741: DIFF
62742: ST_TO_ADDR
// if not tmp then
62743: LD_VAR 0 4
62747: NOT
62748: IFFALSE 62752
// continue ;
62750: GO 62597
// for j in tmp do
62752: LD_ADDR_VAR 0 3
62756: PUSH
62757: LD_VAR 0 4
62761: PUSH
62762: FOR_IN
62763: IFFALSE 62914
// begin if not mc_builders [ i ] then
62765: LD_EXP 58
62769: PUSH
62770: LD_VAR 0 2
62774: ARRAY
62775: NOT
62776: IFFALSE 62834
// begin SetTag ( j , 103 ) ;
62778: LD_VAR 0 3
62782: PPUSH
62783: LD_INT 103
62785: PPUSH
62786: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
62790: LD_ADDR_EXP 58
62794: PUSH
62795: LD_EXP 58
62799: PPUSH
62800: LD_VAR 0 2
62804: PUSH
62805: LD_EXP 58
62809: PUSH
62810: LD_VAR 0 2
62814: ARRAY
62815: PUSH
62816: LD_INT 1
62818: PLUS
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PPUSH
62824: LD_VAR 0 3
62828: PPUSH
62829: CALL 16921 0 3
62833: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
62834: LD_VAR 0 3
62838: PPUSH
62839: CALL_OW 310
62843: IFFALSE 62854
// ComExitBuilding ( j ) ;
62845: LD_VAR 0 3
62849: PPUSH
62850: CALL_OW 122
// wait ( 3 ) ;
62854: LD_INT 3
62856: PPUSH
62857: CALL_OW 67
// if not mc_construct_list [ i ] then
62861: LD_EXP 59
62865: PUSH
62866: LD_VAR 0 2
62870: ARRAY
62871: NOT
62872: IFFALSE 62876
// break ;
62874: GO 62914
// if not HasTask ( j ) then
62876: LD_VAR 0 3
62880: PPUSH
62881: CALL_OW 314
62885: NOT
62886: IFFALSE 62912
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
62888: LD_VAR 0 3
62892: PPUSH
62893: LD_EXP 59
62897: PUSH
62898: LD_VAR 0 2
62902: ARRAY
62903: PUSH
62904: LD_INT 1
62906: ARRAY
62907: PPUSH
62908: CALL 19772 0 2
// end ;
62912: GO 62762
62914: POP
62915: POP
// end else
62916: GO 63721
// if mc_build_list [ i ] then
62918: LD_EXP 57
62922: PUSH
62923: LD_VAR 0 2
62927: ARRAY
62928: IFFALSE 63721
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
62930: LD_ADDR_VAR 0 5
62934: PUSH
62935: LD_EXP 52
62939: PUSH
62940: LD_VAR 0 2
62944: ARRAY
62945: PPUSH
62946: LD_INT 2
62948: PUSH
62949: LD_INT 30
62951: PUSH
62952: LD_INT 0
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 30
62961: PUSH
62962: LD_INT 1
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: LIST
62973: PPUSH
62974: CALL_OW 72
62978: ST_TO_ADDR
// if depot then
62979: LD_VAR 0 5
62983: IFFALSE 63001
// depot := depot [ 1 ] else
62985: LD_ADDR_VAR 0 5
62989: PUSH
62990: LD_VAR 0 5
62994: PUSH
62995: LD_INT 1
62997: ARRAY
62998: ST_TO_ADDR
62999: GO 63009
// depot := 0 ;
63001: LD_ADDR_VAR 0 5
63005: PUSH
63006: LD_INT 0
63008: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
63009: LD_EXP 57
63013: PUSH
63014: LD_VAR 0 2
63018: ARRAY
63019: PUSH
63020: LD_INT 1
63022: ARRAY
63023: PUSH
63024: LD_INT 1
63026: ARRAY
63027: PPUSH
63028: CALL 19602 0 1
63032: PUSH
63033: LD_EXP 52
63037: PUSH
63038: LD_VAR 0 2
63042: ARRAY
63043: PPUSH
63044: LD_INT 2
63046: PUSH
63047: LD_INT 30
63049: PUSH
63050: LD_INT 2
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 30
63059: PUSH
63060: LD_INT 3
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: LIST
63071: PPUSH
63072: CALL_OW 72
63076: NOT
63077: AND
63078: IFFALSE 63183
// begin for j = 1 to mc_build_list [ i ] do
63080: LD_ADDR_VAR 0 3
63084: PUSH
63085: DOUBLE
63086: LD_INT 1
63088: DEC
63089: ST_TO_ADDR
63090: LD_EXP 57
63094: PUSH
63095: LD_VAR 0 2
63099: ARRAY
63100: PUSH
63101: FOR_TO
63102: IFFALSE 63181
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
63104: LD_EXP 57
63108: PUSH
63109: LD_VAR 0 2
63113: ARRAY
63114: PUSH
63115: LD_VAR 0 3
63119: ARRAY
63120: PUSH
63121: LD_INT 1
63123: ARRAY
63124: PUSH
63125: LD_INT 2
63127: EQUAL
63128: IFFALSE 63179
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
63130: LD_ADDR_EXP 57
63134: PUSH
63135: LD_EXP 57
63139: PPUSH
63140: LD_VAR 0 2
63144: PPUSH
63145: LD_EXP 57
63149: PUSH
63150: LD_VAR 0 2
63154: ARRAY
63155: PPUSH
63156: LD_VAR 0 3
63160: PPUSH
63161: LD_INT 1
63163: PPUSH
63164: LD_INT 0
63166: PPUSH
63167: CALL 16339 0 4
63171: PPUSH
63172: CALL_OW 1
63176: ST_TO_ADDR
// break ;
63177: GO 63181
// end ;
63179: GO 63101
63181: POP
63182: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
63183: LD_EXP 57
63187: PUSH
63188: LD_VAR 0 2
63192: ARRAY
63193: PUSH
63194: LD_INT 1
63196: ARRAY
63197: PUSH
63198: LD_INT 1
63200: ARRAY
63201: PUSH
63202: LD_INT 0
63204: EQUAL
63205: PUSH
63206: LD_VAR 0 5
63210: PUSH
63211: LD_VAR 0 5
63215: PPUSH
63216: LD_EXP 57
63220: PUSH
63221: LD_VAR 0 2
63225: ARRAY
63226: PUSH
63227: LD_INT 1
63229: ARRAY
63230: PUSH
63231: LD_INT 1
63233: ARRAY
63234: PPUSH
63235: LD_EXP 57
63239: PUSH
63240: LD_VAR 0 2
63244: ARRAY
63245: PUSH
63246: LD_INT 1
63248: ARRAY
63249: PUSH
63250: LD_INT 2
63252: ARRAY
63253: PPUSH
63254: LD_EXP 57
63258: PUSH
63259: LD_VAR 0 2
63263: ARRAY
63264: PUSH
63265: LD_INT 1
63267: ARRAY
63268: PUSH
63269: LD_INT 3
63271: ARRAY
63272: PPUSH
63273: LD_EXP 57
63277: PUSH
63278: LD_VAR 0 2
63282: ARRAY
63283: PUSH
63284: LD_INT 1
63286: ARRAY
63287: PUSH
63288: LD_INT 4
63290: ARRAY
63291: PPUSH
63292: CALL 24318 0 5
63296: AND
63297: OR
63298: IFFALSE 63579
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
63300: LD_ADDR_VAR 0 4
63304: PUSH
63305: LD_EXP 52
63309: PUSH
63310: LD_VAR 0 2
63314: ARRAY
63315: PPUSH
63316: LD_INT 25
63318: PUSH
63319: LD_INT 2
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PPUSH
63326: CALL_OW 72
63330: PUSH
63331: LD_EXP 54
63335: PUSH
63336: LD_VAR 0 2
63340: ARRAY
63341: DIFF
63342: ST_TO_ADDR
// if not tmp then
63343: LD_VAR 0 4
63347: NOT
63348: IFFALSE 63352
// continue ;
63350: GO 62597
// for j in tmp do
63352: LD_ADDR_VAR 0 3
63356: PUSH
63357: LD_VAR 0 4
63361: PUSH
63362: FOR_IN
63363: IFFALSE 63575
// begin if not mc_builders [ i ] then
63365: LD_EXP 58
63369: PUSH
63370: LD_VAR 0 2
63374: ARRAY
63375: NOT
63376: IFFALSE 63434
// begin SetTag ( j , 103 ) ;
63378: LD_VAR 0 3
63382: PPUSH
63383: LD_INT 103
63385: PPUSH
63386: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
63390: LD_ADDR_EXP 58
63394: PUSH
63395: LD_EXP 58
63399: PPUSH
63400: LD_VAR 0 2
63404: PUSH
63405: LD_EXP 58
63409: PUSH
63410: LD_VAR 0 2
63414: ARRAY
63415: PUSH
63416: LD_INT 1
63418: PLUS
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PPUSH
63424: LD_VAR 0 3
63428: PPUSH
63429: CALL 16921 0 3
63433: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
63434: LD_VAR 0 3
63438: PPUSH
63439: CALL_OW 310
63443: IFFALSE 63454
// ComExitBuilding ( j ) ;
63445: LD_VAR 0 3
63449: PPUSH
63450: CALL_OW 122
// wait ( 3 ) ;
63454: LD_INT 3
63456: PPUSH
63457: CALL_OW 67
// if not mc_build_list [ i ] then
63461: LD_EXP 57
63465: PUSH
63466: LD_VAR 0 2
63470: ARRAY
63471: NOT
63472: IFFALSE 63476
// break ;
63474: GO 63575
// if not HasTask ( j ) then
63476: LD_VAR 0 3
63480: PPUSH
63481: CALL_OW 314
63485: NOT
63486: IFFALSE 63573
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
63488: LD_VAR 0 3
63492: PPUSH
63493: LD_EXP 57
63497: PUSH
63498: LD_VAR 0 2
63502: ARRAY
63503: PUSH
63504: LD_INT 1
63506: ARRAY
63507: PUSH
63508: LD_INT 1
63510: ARRAY
63511: PPUSH
63512: LD_EXP 57
63516: PUSH
63517: LD_VAR 0 2
63521: ARRAY
63522: PUSH
63523: LD_INT 1
63525: ARRAY
63526: PUSH
63527: LD_INT 2
63529: ARRAY
63530: PPUSH
63531: LD_EXP 57
63535: PUSH
63536: LD_VAR 0 2
63540: ARRAY
63541: PUSH
63542: LD_INT 1
63544: ARRAY
63545: PUSH
63546: LD_INT 3
63548: ARRAY
63549: PPUSH
63550: LD_EXP 57
63554: PUSH
63555: LD_VAR 0 2
63559: ARRAY
63560: PUSH
63561: LD_INT 1
63563: ARRAY
63564: PUSH
63565: LD_INT 4
63567: ARRAY
63568: PPUSH
63569: CALL_OW 145
// end ;
63573: GO 63362
63575: POP
63576: POP
// end else
63577: GO 63721
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
63579: LD_EXP 52
63583: PUSH
63584: LD_VAR 0 2
63588: ARRAY
63589: PPUSH
63590: LD_EXP 57
63594: PUSH
63595: LD_VAR 0 2
63599: ARRAY
63600: PUSH
63601: LD_INT 1
63603: ARRAY
63604: PUSH
63605: LD_INT 1
63607: ARRAY
63608: PPUSH
63609: LD_EXP 57
63613: PUSH
63614: LD_VAR 0 2
63618: ARRAY
63619: PUSH
63620: LD_INT 1
63622: ARRAY
63623: PUSH
63624: LD_INT 2
63626: ARRAY
63627: PPUSH
63628: LD_EXP 57
63632: PUSH
63633: LD_VAR 0 2
63637: ARRAY
63638: PUSH
63639: LD_INT 1
63641: ARRAY
63642: PUSH
63643: LD_INT 3
63645: ARRAY
63646: PPUSH
63647: LD_EXP 57
63651: PUSH
63652: LD_VAR 0 2
63656: ARRAY
63657: PUSH
63658: LD_INT 1
63660: ARRAY
63661: PUSH
63662: LD_INT 4
63664: ARRAY
63665: PPUSH
63666: CALL 23672 0 5
63670: NOT
63671: IFFALSE 63721
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
63673: LD_ADDR_EXP 57
63677: PUSH
63678: LD_EXP 57
63682: PPUSH
63683: LD_VAR 0 2
63687: PPUSH
63688: LD_EXP 57
63692: PUSH
63693: LD_VAR 0 2
63697: ARRAY
63698: PPUSH
63699: LD_INT 1
63701: PPUSH
63702: LD_INT 1
63704: NEG
63705: PPUSH
63706: LD_INT 0
63708: PPUSH
63709: CALL 16339 0 4
63713: PPUSH
63714: CALL_OW 1
63718: ST_TO_ADDR
// continue ;
63719: GO 62597
// end ; end ; end ;
63721: GO 62597
63723: POP
63724: POP
// end ;
63725: LD_VAR 0 1
63729: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
63730: LD_INT 0
63732: PPUSH
63733: PPUSH
63734: PPUSH
63735: PPUSH
63736: PPUSH
63737: PPUSH
// if not mc_bases then
63738: LD_EXP 52
63742: NOT
63743: IFFALSE 63747
// exit ;
63745: GO 64174
// for i = 1 to mc_bases do
63747: LD_ADDR_VAR 0 2
63751: PUSH
63752: DOUBLE
63753: LD_INT 1
63755: DEC
63756: ST_TO_ADDR
63757: LD_EXP 52
63761: PUSH
63762: FOR_TO
63763: IFFALSE 64172
// begin tmp := mc_build_upgrade [ i ] ;
63765: LD_ADDR_VAR 0 4
63769: PUSH
63770: LD_EXP 84
63774: PUSH
63775: LD_VAR 0 2
63779: ARRAY
63780: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
63781: LD_ADDR_VAR 0 6
63785: PUSH
63786: LD_EXP 85
63790: PUSH
63791: LD_VAR 0 2
63795: ARRAY
63796: PPUSH
63797: LD_INT 2
63799: PUSH
63800: LD_INT 30
63802: PUSH
63803: LD_INT 6
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 30
63812: PUSH
63813: LD_INT 7
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: LIST
63824: PPUSH
63825: CALL_OW 72
63829: ST_TO_ADDR
// if not tmp and not lab then
63830: LD_VAR 0 4
63834: NOT
63835: PUSH
63836: LD_VAR 0 6
63840: NOT
63841: AND
63842: IFFALSE 63846
// continue ;
63844: GO 63762
// if tmp then
63846: LD_VAR 0 4
63850: IFFALSE 63970
// for j in tmp do
63852: LD_ADDR_VAR 0 3
63856: PUSH
63857: LD_VAR 0 4
63861: PUSH
63862: FOR_IN
63863: IFFALSE 63968
// begin if UpgradeCost ( j ) then
63865: LD_VAR 0 3
63869: PPUSH
63870: CALL 23332 0 1
63874: IFFALSE 63966
// begin ComUpgrade ( j ) ;
63876: LD_VAR 0 3
63880: PPUSH
63881: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
63885: LD_ADDR_EXP 84
63889: PUSH
63890: LD_EXP 84
63894: PPUSH
63895: LD_VAR 0 2
63899: PPUSH
63900: LD_EXP 84
63904: PUSH
63905: LD_VAR 0 2
63909: ARRAY
63910: PUSH
63911: LD_VAR 0 3
63915: DIFF
63916: PPUSH
63917: CALL_OW 1
63921: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
63922: LD_ADDR_EXP 59
63926: PUSH
63927: LD_EXP 59
63931: PPUSH
63932: LD_VAR 0 2
63936: PUSH
63937: LD_EXP 59
63941: PUSH
63942: LD_VAR 0 2
63946: ARRAY
63947: PUSH
63948: LD_INT 1
63950: PLUS
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PPUSH
63956: LD_VAR 0 3
63960: PPUSH
63961: CALL 16921 0 3
63965: ST_TO_ADDR
// end ; end ;
63966: GO 63862
63968: POP
63969: POP
// if not lab or not mc_lab_upgrade [ i ] then
63970: LD_VAR 0 6
63974: NOT
63975: PUSH
63976: LD_EXP 86
63980: PUSH
63981: LD_VAR 0 2
63985: ARRAY
63986: NOT
63987: OR
63988: IFFALSE 63992
// continue ;
63990: GO 63762
// for j in lab do
63992: LD_ADDR_VAR 0 3
63996: PUSH
63997: LD_VAR 0 6
64001: PUSH
64002: FOR_IN
64003: IFFALSE 64168
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
64005: LD_VAR 0 3
64009: PPUSH
64010: CALL_OW 266
64014: PUSH
64015: LD_INT 6
64017: PUSH
64018: LD_INT 7
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: IN
64025: PUSH
64026: LD_VAR 0 3
64030: PPUSH
64031: CALL_OW 461
64035: PUSH
64036: LD_INT 1
64038: NONEQUAL
64039: AND
64040: IFFALSE 64166
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
64042: LD_VAR 0 3
64046: PPUSH
64047: LD_EXP 86
64051: PUSH
64052: LD_VAR 0 2
64056: ARRAY
64057: PUSH
64058: LD_INT 1
64060: ARRAY
64061: PPUSH
64062: CALL 23537 0 2
64066: IFFALSE 64166
// begin ComCancel ( j ) ;
64068: LD_VAR 0 3
64072: PPUSH
64073: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
64077: LD_VAR 0 3
64081: PPUSH
64082: LD_EXP 86
64086: PUSH
64087: LD_VAR 0 2
64091: ARRAY
64092: PUSH
64093: LD_INT 1
64095: ARRAY
64096: PPUSH
64097: CALL_OW 207
// if not j in mc_construct_list [ i ] then
64101: LD_VAR 0 3
64105: PUSH
64106: LD_EXP 59
64110: PUSH
64111: LD_VAR 0 2
64115: ARRAY
64116: IN
64117: NOT
64118: IFFALSE 64164
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
64120: LD_ADDR_EXP 59
64124: PUSH
64125: LD_EXP 59
64129: PPUSH
64130: LD_VAR 0 2
64134: PUSH
64135: LD_EXP 59
64139: PUSH
64140: LD_VAR 0 2
64144: ARRAY
64145: PUSH
64146: LD_INT 1
64148: PLUS
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PPUSH
64154: LD_VAR 0 3
64158: PPUSH
64159: CALL 16921 0 3
64163: ST_TO_ADDR
// break ;
64164: GO 64168
// end ; end ; end ;
64166: GO 64002
64168: POP
64169: POP
// end ;
64170: GO 63762
64172: POP
64173: POP
// end ;
64174: LD_VAR 0 1
64178: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
64179: LD_INT 0
64181: PPUSH
64182: PPUSH
64183: PPUSH
64184: PPUSH
64185: PPUSH
64186: PPUSH
64187: PPUSH
64188: PPUSH
64189: PPUSH
// if not mc_bases then
64190: LD_EXP 52
64194: NOT
64195: IFFALSE 64199
// exit ;
64197: GO 64604
// for i = 1 to mc_bases do
64199: LD_ADDR_VAR 0 2
64203: PUSH
64204: DOUBLE
64205: LD_INT 1
64207: DEC
64208: ST_TO_ADDR
64209: LD_EXP 52
64213: PUSH
64214: FOR_TO
64215: IFFALSE 64602
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
64217: LD_EXP 60
64221: PUSH
64222: LD_VAR 0 2
64226: ARRAY
64227: NOT
64228: PUSH
64229: LD_EXP 52
64233: PUSH
64234: LD_VAR 0 2
64238: ARRAY
64239: PPUSH
64240: LD_INT 30
64242: PUSH
64243: LD_INT 3
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PPUSH
64250: CALL_OW 72
64254: NOT
64255: OR
64256: IFFALSE 64260
// continue ;
64258: GO 64214
// busy := false ;
64260: LD_ADDR_VAR 0 8
64264: PUSH
64265: LD_INT 0
64267: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
64268: LD_ADDR_VAR 0 4
64272: PUSH
64273: LD_EXP 52
64277: PUSH
64278: LD_VAR 0 2
64282: ARRAY
64283: PPUSH
64284: LD_INT 30
64286: PUSH
64287: LD_INT 3
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PPUSH
64294: CALL_OW 72
64298: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
64299: LD_ADDR_VAR 0 6
64303: PUSH
64304: LD_EXP 60
64308: PUSH
64309: LD_VAR 0 2
64313: ARRAY
64314: PPUSH
64315: LD_INT 2
64317: PUSH
64318: LD_INT 30
64320: PUSH
64321: LD_INT 32
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 30
64330: PUSH
64331: LD_INT 33
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: LIST
64342: PPUSH
64343: CALL_OW 72
64347: ST_TO_ADDR
// if not t then
64348: LD_VAR 0 6
64352: NOT
64353: IFFALSE 64357
// continue ;
64355: GO 64214
// for j in tmp do
64357: LD_ADDR_VAR 0 3
64361: PUSH
64362: LD_VAR 0 4
64366: PUSH
64367: FOR_IN
64368: IFFALSE 64398
// if not BuildingStatus ( j ) = bs_idle then
64370: LD_VAR 0 3
64374: PPUSH
64375: CALL_OW 461
64379: PUSH
64380: LD_INT 2
64382: EQUAL
64383: NOT
64384: IFFALSE 64396
// begin busy := true ;
64386: LD_ADDR_VAR 0 8
64390: PUSH
64391: LD_INT 1
64393: ST_TO_ADDR
// break ;
64394: GO 64398
// end ;
64396: GO 64367
64398: POP
64399: POP
// if busy then
64400: LD_VAR 0 8
64404: IFFALSE 64408
// continue ;
64406: GO 64214
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
64408: LD_ADDR_VAR 0 7
64412: PUSH
64413: LD_VAR 0 6
64417: PPUSH
64418: LD_INT 35
64420: PUSH
64421: LD_INT 0
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: PPUSH
64428: CALL_OW 72
64432: ST_TO_ADDR
// if tw then
64433: LD_VAR 0 7
64437: IFFALSE 64514
// begin tw := tw [ 1 ] ;
64439: LD_ADDR_VAR 0 7
64443: PUSH
64444: LD_VAR 0 7
64448: PUSH
64449: LD_INT 1
64451: ARRAY
64452: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
64453: LD_ADDR_VAR 0 9
64457: PUSH
64458: LD_VAR 0 7
64462: PPUSH
64463: LD_EXP 77
64467: PUSH
64468: LD_VAR 0 2
64472: ARRAY
64473: PPUSH
64474: CALL 21891 0 2
64478: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
64479: LD_EXP 91
64483: PUSH
64484: LD_VAR 0 2
64488: ARRAY
64489: IFFALSE 64512
// if not weapon in mc_allowed_tower_weapons [ i ] then
64491: LD_VAR 0 9
64495: PUSH
64496: LD_EXP 91
64500: PUSH
64501: LD_VAR 0 2
64505: ARRAY
64506: IN
64507: NOT
64508: IFFALSE 64512
// continue ;
64510: GO 64214
// end else
64512: GO 64577
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
64514: LD_ADDR_VAR 0 5
64518: PUSH
64519: LD_EXP 60
64523: PUSH
64524: LD_VAR 0 2
64528: ARRAY
64529: PPUSH
64530: LD_VAR 0 4
64534: PPUSH
64535: CALL 52068 0 2
64539: ST_TO_ADDR
// if not tmp2 then
64540: LD_VAR 0 5
64544: NOT
64545: IFFALSE 64549
// continue ;
64547: GO 64214
// tw := tmp2 [ 1 ] ;
64549: LD_ADDR_VAR 0 7
64553: PUSH
64554: LD_VAR 0 5
64558: PUSH
64559: LD_INT 1
64561: ARRAY
64562: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
64563: LD_ADDR_VAR 0 9
64567: PUSH
64568: LD_VAR 0 5
64572: PUSH
64573: LD_INT 2
64575: ARRAY
64576: ST_TO_ADDR
// end ; if not weapon then
64577: LD_VAR 0 9
64581: NOT
64582: IFFALSE 64586
// continue ;
64584: GO 64214
// ComPlaceWeapon ( tw , weapon ) ;
64586: LD_VAR 0 7
64590: PPUSH
64591: LD_VAR 0 9
64595: PPUSH
64596: CALL_OW 148
// end ;
64600: GO 64214
64602: POP
64603: POP
// end ;
64604: LD_VAR 0 1
64608: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
64609: LD_INT 0
64611: PPUSH
64612: PPUSH
64613: PPUSH
64614: PPUSH
64615: PPUSH
64616: PPUSH
// if not mc_bases then
64617: LD_EXP 52
64621: NOT
64622: IFFALSE 64626
// exit ;
64624: GO 65638
// for i = 1 to mc_bases do
64626: LD_ADDR_VAR 0 2
64630: PUSH
64631: DOUBLE
64632: LD_INT 1
64634: DEC
64635: ST_TO_ADDR
64636: LD_EXP 52
64640: PUSH
64641: FOR_TO
64642: IFFALSE 65636
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
64644: LD_EXP 65
64648: PUSH
64649: LD_VAR 0 2
64653: ARRAY
64654: NOT
64655: PUSH
64656: LD_EXP 65
64660: PUSH
64661: LD_VAR 0 2
64665: ARRAY
64666: PUSH
64667: LD_EXP 66
64671: PUSH
64672: LD_VAR 0 2
64676: ARRAY
64677: EQUAL
64678: OR
64679: IFFALSE 64683
// continue ;
64681: GO 64641
// if mc_miners [ i ] then
64683: LD_EXP 66
64687: PUSH
64688: LD_VAR 0 2
64692: ARRAY
64693: IFFALSE 65323
// begin k := 1 ;
64695: LD_ADDR_VAR 0 4
64699: PUSH
64700: LD_INT 1
64702: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
64703: LD_ADDR_VAR 0 3
64707: PUSH
64708: DOUBLE
64709: LD_EXP 66
64713: PUSH
64714: LD_VAR 0 2
64718: ARRAY
64719: INC
64720: ST_TO_ADDR
64721: LD_INT 1
64723: PUSH
64724: FOR_DOWNTO
64725: IFFALSE 65321
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
64727: LD_EXP 66
64731: PUSH
64732: LD_VAR 0 2
64736: ARRAY
64737: PUSH
64738: LD_VAR 0 3
64742: ARRAY
64743: PPUSH
64744: CALL_OW 301
64748: PUSH
64749: LD_EXP 66
64753: PUSH
64754: LD_VAR 0 2
64758: ARRAY
64759: PUSH
64760: LD_VAR 0 3
64764: ARRAY
64765: PPUSH
64766: CALL_OW 257
64770: PUSH
64771: LD_INT 1
64773: NONEQUAL
64774: OR
64775: IFFALSE 64838
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
64777: LD_ADDR_VAR 0 5
64781: PUSH
64782: LD_EXP 66
64786: PUSH
64787: LD_VAR 0 2
64791: ARRAY
64792: PUSH
64793: LD_EXP 66
64797: PUSH
64798: LD_VAR 0 2
64802: ARRAY
64803: PUSH
64804: LD_VAR 0 3
64808: ARRAY
64809: DIFF
64810: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
64811: LD_ADDR_EXP 66
64815: PUSH
64816: LD_EXP 66
64820: PPUSH
64821: LD_VAR 0 2
64825: PPUSH
64826: LD_VAR 0 5
64830: PPUSH
64831: CALL_OW 1
64835: ST_TO_ADDR
// continue ;
64836: GO 64724
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
64838: LD_EXP 66
64842: PUSH
64843: LD_VAR 0 2
64847: ARRAY
64848: PUSH
64849: LD_VAR 0 3
64853: ARRAY
64854: PPUSH
64855: CALL 16857 0 1
64859: PUSH
64860: LD_EXP 66
64864: PUSH
64865: LD_VAR 0 2
64869: ARRAY
64870: PUSH
64871: LD_VAR 0 3
64875: ARRAY
64876: PPUSH
64877: CALL_OW 255
64881: PPUSH
64882: LD_EXP 65
64886: PUSH
64887: LD_VAR 0 2
64891: ARRAY
64892: PUSH
64893: LD_VAR 0 4
64897: ARRAY
64898: PUSH
64899: LD_INT 1
64901: ARRAY
64902: PPUSH
64903: LD_EXP 65
64907: PUSH
64908: LD_VAR 0 2
64912: ARRAY
64913: PUSH
64914: LD_VAR 0 4
64918: ARRAY
64919: PUSH
64920: LD_INT 2
64922: ARRAY
64923: PPUSH
64924: LD_INT 15
64926: PPUSH
64927: CALL 17817 0 4
64931: PUSH
64932: LD_INT 4
64934: ARRAY
64935: PUSH
64936: LD_EXP 66
64940: PUSH
64941: LD_VAR 0 2
64945: ARRAY
64946: PUSH
64947: LD_VAR 0 3
64951: ARRAY
64952: PPUSH
64953: LD_INT 10
64955: PPUSH
64956: CALL 19514 0 2
64960: PUSH
64961: LD_INT 4
64963: ARRAY
64964: OR
64965: AND
64966: IFFALSE 64989
// ComStop ( mc_miners [ i ] [ j ] ) ;
64968: LD_EXP 66
64972: PUSH
64973: LD_VAR 0 2
64977: ARRAY
64978: PUSH
64979: LD_VAR 0 3
64983: ARRAY
64984: PPUSH
64985: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
64989: LD_EXP 66
64993: PUSH
64994: LD_VAR 0 2
64998: ARRAY
64999: PUSH
65000: LD_VAR 0 3
65004: ARRAY
65005: PPUSH
65006: CALL_OW 257
65010: PUSH
65011: LD_INT 1
65013: EQUAL
65014: PUSH
65015: LD_EXP 66
65019: PUSH
65020: LD_VAR 0 2
65024: ARRAY
65025: PUSH
65026: LD_VAR 0 3
65030: ARRAY
65031: PPUSH
65032: CALL_OW 459
65036: NOT
65037: AND
65038: PUSH
65039: LD_EXP 66
65043: PUSH
65044: LD_VAR 0 2
65048: ARRAY
65049: PUSH
65050: LD_VAR 0 3
65054: ARRAY
65055: PPUSH
65056: CALL_OW 255
65060: PPUSH
65061: LD_EXP 65
65065: PUSH
65066: LD_VAR 0 2
65070: ARRAY
65071: PUSH
65072: LD_VAR 0 4
65076: ARRAY
65077: PUSH
65078: LD_INT 1
65080: ARRAY
65081: PPUSH
65082: LD_EXP 65
65086: PUSH
65087: LD_VAR 0 2
65091: ARRAY
65092: PUSH
65093: LD_VAR 0 4
65097: ARRAY
65098: PUSH
65099: LD_INT 2
65101: ARRAY
65102: PPUSH
65103: LD_INT 15
65105: PPUSH
65106: CALL 17817 0 4
65110: PUSH
65111: LD_INT 4
65113: ARRAY
65114: PUSH
65115: LD_INT 0
65117: EQUAL
65118: AND
65119: PUSH
65120: LD_EXP 66
65124: PUSH
65125: LD_VAR 0 2
65129: ARRAY
65130: PUSH
65131: LD_VAR 0 3
65135: ARRAY
65136: PPUSH
65137: CALL_OW 314
65141: NOT
65142: AND
65143: IFFALSE 65319
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
65145: LD_EXP 66
65149: PUSH
65150: LD_VAR 0 2
65154: ARRAY
65155: PUSH
65156: LD_VAR 0 3
65160: ARRAY
65161: PPUSH
65162: CALL_OW 310
65166: IFFALSE 65189
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
65168: LD_EXP 66
65172: PUSH
65173: LD_VAR 0 2
65177: ARRAY
65178: PUSH
65179: LD_VAR 0 3
65183: ARRAY
65184: PPUSH
65185: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
65189: LD_EXP 66
65193: PUSH
65194: LD_VAR 0 2
65198: ARRAY
65199: PUSH
65200: LD_VAR 0 3
65204: ARRAY
65205: PPUSH
65206: CALL_OW 314
65210: NOT
65211: IFFALSE 65279
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
65213: LD_EXP 66
65217: PUSH
65218: LD_VAR 0 2
65222: ARRAY
65223: PUSH
65224: LD_VAR 0 3
65228: ARRAY
65229: PPUSH
65230: LD_EXP 65
65234: PUSH
65235: LD_VAR 0 2
65239: ARRAY
65240: PUSH
65241: LD_VAR 0 4
65245: ARRAY
65246: PUSH
65247: LD_INT 1
65249: ARRAY
65250: PPUSH
65251: LD_EXP 65
65255: PUSH
65256: LD_VAR 0 2
65260: ARRAY
65261: PUSH
65262: LD_VAR 0 4
65266: ARRAY
65267: PUSH
65268: LD_INT 2
65270: ARRAY
65271: PPUSH
65272: LD_INT 0
65274: PPUSH
65275: CALL_OW 193
// k := k + 1 ;
65279: LD_ADDR_VAR 0 4
65283: PUSH
65284: LD_VAR 0 4
65288: PUSH
65289: LD_INT 1
65291: PLUS
65292: ST_TO_ADDR
// if k > mc_mines [ i ] then
65293: LD_VAR 0 4
65297: PUSH
65298: LD_EXP 65
65302: PUSH
65303: LD_VAR 0 2
65307: ARRAY
65308: GREATER
65309: IFFALSE 65319
// k := 1 ;
65311: LD_ADDR_VAR 0 4
65315: PUSH
65316: LD_INT 1
65318: ST_TO_ADDR
// end ; end ;
65319: GO 64724
65321: POP
65322: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
65323: LD_ADDR_VAR 0 5
65327: PUSH
65328: LD_EXP 52
65332: PUSH
65333: LD_VAR 0 2
65337: ARRAY
65338: PPUSH
65339: LD_INT 2
65341: PUSH
65342: LD_INT 30
65344: PUSH
65345: LD_INT 4
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 30
65354: PUSH
65355: LD_INT 5
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: LD_INT 30
65364: PUSH
65365: LD_INT 32
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: LIST
65376: LIST
65377: PPUSH
65378: CALL_OW 72
65382: ST_TO_ADDR
// if not tmp then
65383: LD_VAR 0 5
65387: NOT
65388: IFFALSE 65392
// continue ;
65390: GO 64641
// list := [ ] ;
65392: LD_ADDR_VAR 0 6
65396: PUSH
65397: EMPTY
65398: ST_TO_ADDR
// for j in tmp do
65399: LD_ADDR_VAR 0 3
65403: PUSH
65404: LD_VAR 0 5
65408: PUSH
65409: FOR_IN
65410: IFFALSE 65479
// begin for k in UnitsInside ( j ) do
65412: LD_ADDR_VAR 0 4
65416: PUSH
65417: LD_VAR 0 3
65421: PPUSH
65422: CALL_OW 313
65426: PUSH
65427: FOR_IN
65428: IFFALSE 65475
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
65430: LD_VAR 0 4
65434: PPUSH
65435: CALL_OW 257
65439: PUSH
65440: LD_INT 1
65442: EQUAL
65443: PUSH
65444: LD_VAR 0 4
65448: PPUSH
65449: CALL_OW 459
65453: NOT
65454: AND
65455: IFFALSE 65473
// list := list ^ k ;
65457: LD_ADDR_VAR 0 6
65461: PUSH
65462: LD_VAR 0 6
65466: PUSH
65467: LD_VAR 0 4
65471: ADD
65472: ST_TO_ADDR
65473: GO 65427
65475: POP
65476: POP
// end ;
65477: GO 65409
65479: POP
65480: POP
// list := list diff mc_miners [ i ] ;
65481: LD_ADDR_VAR 0 6
65485: PUSH
65486: LD_VAR 0 6
65490: PUSH
65491: LD_EXP 66
65495: PUSH
65496: LD_VAR 0 2
65500: ARRAY
65501: DIFF
65502: ST_TO_ADDR
// if not list then
65503: LD_VAR 0 6
65507: NOT
65508: IFFALSE 65512
// continue ;
65510: GO 64641
// k := mc_mines [ i ] - mc_miners [ i ] ;
65512: LD_ADDR_VAR 0 4
65516: PUSH
65517: LD_EXP 65
65521: PUSH
65522: LD_VAR 0 2
65526: ARRAY
65527: PUSH
65528: LD_EXP 66
65532: PUSH
65533: LD_VAR 0 2
65537: ARRAY
65538: MINUS
65539: ST_TO_ADDR
// if k > list then
65540: LD_VAR 0 4
65544: PUSH
65545: LD_VAR 0 6
65549: GREATER
65550: IFFALSE 65562
// k := list ;
65552: LD_ADDR_VAR 0 4
65556: PUSH
65557: LD_VAR 0 6
65561: ST_TO_ADDR
// for j = 1 to k do
65562: LD_ADDR_VAR 0 3
65566: PUSH
65567: DOUBLE
65568: LD_INT 1
65570: DEC
65571: ST_TO_ADDR
65572: LD_VAR 0 4
65576: PUSH
65577: FOR_TO
65578: IFFALSE 65632
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
65580: LD_ADDR_EXP 66
65584: PUSH
65585: LD_EXP 66
65589: PPUSH
65590: LD_VAR 0 2
65594: PUSH
65595: LD_EXP 66
65599: PUSH
65600: LD_VAR 0 2
65604: ARRAY
65605: PUSH
65606: LD_INT 1
65608: PLUS
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PPUSH
65614: LD_VAR 0 6
65618: PUSH
65619: LD_VAR 0 3
65623: ARRAY
65624: PPUSH
65625: CALL 16921 0 3
65629: ST_TO_ADDR
65630: GO 65577
65632: POP
65633: POP
// end ;
65634: GO 64641
65636: POP
65637: POP
// end ;
65638: LD_VAR 0 1
65642: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
65643: LD_INT 0
65645: PPUSH
65646: PPUSH
65647: PPUSH
65648: PPUSH
65649: PPUSH
65650: PPUSH
65651: PPUSH
65652: PPUSH
65653: PPUSH
65654: PPUSH
// if not mc_bases then
65655: LD_EXP 52
65659: NOT
65660: IFFALSE 65664
// exit ;
65662: GO 67395
// for i = 1 to mc_bases do
65664: LD_ADDR_VAR 0 2
65668: PUSH
65669: DOUBLE
65670: LD_INT 1
65672: DEC
65673: ST_TO_ADDR
65674: LD_EXP 52
65678: PUSH
65679: FOR_TO
65680: IFFALSE 67393
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
65682: LD_EXP 52
65686: PUSH
65687: LD_VAR 0 2
65691: ARRAY
65692: NOT
65693: PUSH
65694: LD_EXP 59
65698: PUSH
65699: LD_VAR 0 2
65703: ARRAY
65704: OR
65705: IFFALSE 65709
// continue ;
65707: GO 65679
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
65709: LD_EXP 68
65713: PUSH
65714: LD_VAR 0 2
65718: ARRAY
65719: NOT
65720: PUSH
65721: LD_EXP 69
65725: PUSH
65726: LD_VAR 0 2
65730: ARRAY
65731: AND
65732: IFFALSE 65770
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
65734: LD_ADDR_EXP 69
65738: PUSH
65739: LD_EXP 69
65743: PPUSH
65744: LD_VAR 0 2
65748: PPUSH
65749: EMPTY
65750: PPUSH
65751: CALL_OW 1
65755: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
65756: LD_VAR 0 2
65760: PPUSH
65761: LD_INT 107
65763: PPUSH
65764: CALL 56859 0 2
// continue ;
65768: GO 65679
// end ; target := [ ] ;
65770: LD_ADDR_VAR 0 6
65774: PUSH
65775: EMPTY
65776: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
65777: LD_ADDR_VAR 0 3
65781: PUSH
65782: DOUBLE
65783: LD_EXP 68
65787: PUSH
65788: LD_VAR 0 2
65792: ARRAY
65793: INC
65794: ST_TO_ADDR
65795: LD_INT 1
65797: PUSH
65798: FOR_DOWNTO
65799: IFFALSE 66059
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
65801: LD_EXP 68
65805: PUSH
65806: LD_VAR 0 2
65810: ARRAY
65811: PUSH
65812: LD_VAR 0 3
65816: ARRAY
65817: PUSH
65818: LD_INT 2
65820: ARRAY
65821: PPUSH
65822: LD_EXP 68
65826: PUSH
65827: LD_VAR 0 2
65831: ARRAY
65832: PUSH
65833: LD_VAR 0 3
65837: ARRAY
65838: PUSH
65839: LD_INT 3
65841: ARRAY
65842: PPUSH
65843: CALL_OW 488
65847: PUSH
65848: LD_EXP 68
65852: PUSH
65853: LD_VAR 0 2
65857: ARRAY
65858: PUSH
65859: LD_VAR 0 3
65863: ARRAY
65864: PUSH
65865: LD_INT 2
65867: ARRAY
65868: PPUSH
65869: LD_EXP 68
65873: PUSH
65874: LD_VAR 0 2
65878: ARRAY
65879: PUSH
65880: LD_VAR 0 3
65884: ARRAY
65885: PUSH
65886: LD_INT 3
65888: ARRAY
65889: PPUSH
65890: CALL_OW 284
65894: PUSH
65895: LD_INT 0
65897: EQUAL
65898: AND
65899: IFFALSE 65954
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
65901: LD_ADDR_VAR 0 5
65905: PUSH
65906: LD_EXP 68
65910: PUSH
65911: LD_VAR 0 2
65915: ARRAY
65916: PPUSH
65917: LD_VAR 0 3
65921: PPUSH
65922: CALL_OW 3
65926: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
65927: LD_ADDR_EXP 68
65931: PUSH
65932: LD_EXP 68
65936: PPUSH
65937: LD_VAR 0 2
65941: PPUSH
65942: LD_VAR 0 5
65946: PPUSH
65947: CALL_OW 1
65951: ST_TO_ADDR
// continue ;
65952: GO 65798
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
65954: LD_EXP 52
65958: PUSH
65959: LD_VAR 0 2
65963: ARRAY
65964: PUSH
65965: LD_INT 1
65967: ARRAY
65968: PPUSH
65969: CALL_OW 255
65973: PPUSH
65974: LD_EXP 68
65978: PUSH
65979: LD_VAR 0 2
65983: ARRAY
65984: PUSH
65985: LD_VAR 0 3
65989: ARRAY
65990: PUSH
65991: LD_INT 2
65993: ARRAY
65994: PPUSH
65995: LD_EXP 68
65999: PUSH
66000: LD_VAR 0 2
66004: ARRAY
66005: PUSH
66006: LD_VAR 0 3
66010: ARRAY
66011: PUSH
66012: LD_INT 3
66014: ARRAY
66015: PPUSH
66016: LD_INT 30
66018: PPUSH
66019: CALL 17817 0 4
66023: PUSH
66024: LD_INT 4
66026: ARRAY
66027: PUSH
66028: LD_INT 0
66030: EQUAL
66031: IFFALSE 66057
// begin target := mc_crates [ i ] [ j ] ;
66033: LD_ADDR_VAR 0 6
66037: PUSH
66038: LD_EXP 68
66042: PUSH
66043: LD_VAR 0 2
66047: ARRAY
66048: PUSH
66049: LD_VAR 0 3
66053: ARRAY
66054: ST_TO_ADDR
// break ;
66055: GO 66059
// end ; end ;
66057: GO 65798
66059: POP
66060: POP
// if not target then
66061: LD_VAR 0 6
66065: NOT
66066: IFFALSE 66070
// continue ;
66068: GO 65679
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
66070: LD_ADDR_VAR 0 7
66074: PUSH
66075: LD_EXP 71
66079: PUSH
66080: LD_VAR 0 2
66084: ARRAY
66085: PPUSH
66086: LD_INT 2
66088: PUSH
66089: LD_INT 3
66091: PUSH
66092: LD_INT 58
66094: PUSH
66095: EMPTY
66096: LIST
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: LD_INT 61
66104: PUSH
66105: EMPTY
66106: LIST
66107: PUSH
66108: LD_INT 33
66110: PUSH
66111: LD_INT 5
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: LD_INT 33
66120: PUSH
66121: LD_INT 3
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: PUSH
66135: LD_INT 2
66137: PUSH
66138: LD_INT 34
66140: PUSH
66141: LD_INT 32
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 34
66150: PUSH
66151: LD_INT 51
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 34
66160: PUSH
66161: LD_INT 12
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PPUSH
66178: CALL_OW 72
66182: ST_TO_ADDR
// if not cargo then
66183: LD_VAR 0 7
66187: NOT
66188: IFFALSE 66831
// begin if mc_crates_collector [ i ] < 5 then
66190: LD_EXP 69
66194: PUSH
66195: LD_VAR 0 2
66199: ARRAY
66200: PUSH
66201: LD_INT 5
66203: LESS
66204: IFFALSE 66570
// begin if mc_ape [ i ] then
66206: LD_EXP 81
66210: PUSH
66211: LD_VAR 0 2
66215: ARRAY
66216: IFFALSE 66263
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
66218: LD_ADDR_VAR 0 5
66222: PUSH
66223: LD_EXP 81
66227: PUSH
66228: LD_VAR 0 2
66232: ARRAY
66233: PPUSH
66234: LD_INT 25
66236: PUSH
66237: LD_INT 16
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: LD_INT 24
66246: PUSH
66247: LD_INT 750
66249: PUSH
66250: EMPTY
66251: LIST
66252: LIST
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PPUSH
66258: CALL_OW 72
66262: ST_TO_ADDR
// if not tmp then
66263: LD_VAR 0 5
66267: NOT
66268: IFFALSE 66315
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
66270: LD_ADDR_VAR 0 5
66274: PUSH
66275: LD_EXP 52
66279: PUSH
66280: LD_VAR 0 2
66284: ARRAY
66285: PPUSH
66286: LD_INT 25
66288: PUSH
66289: LD_INT 2
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: LD_INT 24
66298: PUSH
66299: LD_INT 750
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PPUSH
66310: CALL_OW 72
66314: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
66315: LD_EXP 81
66319: PUSH
66320: LD_VAR 0 2
66324: ARRAY
66325: PUSH
66326: LD_EXP 52
66330: PUSH
66331: LD_VAR 0 2
66335: ARRAY
66336: PPUSH
66337: LD_INT 25
66339: PUSH
66340: LD_INT 2
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: LD_INT 24
66349: PUSH
66350: LD_INT 750
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: PPUSH
66361: CALL_OW 72
66365: AND
66366: PUSH
66367: LD_VAR 0 5
66371: PUSH
66372: LD_INT 5
66374: LESS
66375: AND
66376: IFFALSE 66458
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
66378: LD_ADDR_VAR 0 3
66382: PUSH
66383: LD_EXP 52
66387: PUSH
66388: LD_VAR 0 2
66392: ARRAY
66393: PPUSH
66394: LD_INT 25
66396: PUSH
66397: LD_INT 2
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: LD_INT 24
66406: PUSH
66407: LD_INT 750
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: EMPTY
66415: LIST
66416: LIST
66417: PPUSH
66418: CALL_OW 72
66422: PUSH
66423: FOR_IN
66424: IFFALSE 66456
// begin tmp := tmp union j ;
66426: LD_ADDR_VAR 0 5
66430: PUSH
66431: LD_VAR 0 5
66435: PUSH
66436: LD_VAR 0 3
66440: UNION
66441: ST_TO_ADDR
// if tmp >= 5 then
66442: LD_VAR 0 5
66446: PUSH
66447: LD_INT 5
66449: GREATEREQUAL
66450: IFFALSE 66454
// break ;
66452: GO 66456
// end ;
66454: GO 66423
66456: POP
66457: POP
// end ; if not tmp then
66458: LD_VAR 0 5
66462: NOT
66463: IFFALSE 66467
// continue ;
66465: GO 65679
// for j in tmp do
66467: LD_ADDR_VAR 0 3
66471: PUSH
66472: LD_VAR 0 5
66476: PUSH
66477: FOR_IN
66478: IFFALSE 66568
// if not GetTag ( j ) then
66480: LD_VAR 0 3
66484: PPUSH
66485: CALL_OW 110
66489: NOT
66490: IFFALSE 66566
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
66492: LD_ADDR_EXP 69
66496: PUSH
66497: LD_EXP 69
66501: PPUSH
66502: LD_VAR 0 2
66506: PUSH
66507: LD_EXP 69
66511: PUSH
66512: LD_VAR 0 2
66516: ARRAY
66517: PUSH
66518: LD_INT 1
66520: PLUS
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: PPUSH
66526: LD_VAR 0 3
66530: PPUSH
66531: CALL 16921 0 3
66535: ST_TO_ADDR
// SetTag ( j , 107 ) ;
66536: LD_VAR 0 3
66540: PPUSH
66541: LD_INT 107
66543: PPUSH
66544: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
66548: LD_EXP 69
66552: PUSH
66553: LD_VAR 0 2
66557: ARRAY
66558: PUSH
66559: LD_INT 5
66561: GREATEREQUAL
66562: IFFALSE 66566
// break ;
66564: GO 66568
// end ;
66566: GO 66477
66568: POP
66569: POP
// end ; if mc_crates_collector [ i ] and target then
66570: LD_EXP 69
66574: PUSH
66575: LD_VAR 0 2
66579: ARRAY
66580: PUSH
66581: LD_VAR 0 6
66585: AND
66586: IFFALSE 66829
// begin if mc_crates_collector [ i ] < target [ 1 ] then
66588: LD_EXP 69
66592: PUSH
66593: LD_VAR 0 2
66597: ARRAY
66598: PUSH
66599: LD_VAR 0 6
66603: PUSH
66604: LD_INT 1
66606: ARRAY
66607: LESS
66608: IFFALSE 66628
// tmp := mc_crates_collector [ i ] else
66610: LD_ADDR_VAR 0 5
66614: PUSH
66615: LD_EXP 69
66619: PUSH
66620: LD_VAR 0 2
66624: ARRAY
66625: ST_TO_ADDR
66626: GO 66642
// tmp := target [ 1 ] ;
66628: LD_ADDR_VAR 0 5
66632: PUSH
66633: LD_VAR 0 6
66637: PUSH
66638: LD_INT 1
66640: ARRAY
66641: ST_TO_ADDR
// k := 0 ;
66642: LD_ADDR_VAR 0 4
66646: PUSH
66647: LD_INT 0
66649: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
66650: LD_ADDR_VAR 0 3
66654: PUSH
66655: LD_EXP 69
66659: PUSH
66660: LD_VAR 0 2
66664: ARRAY
66665: PUSH
66666: FOR_IN
66667: IFFALSE 66827
// begin k := k + 1 ;
66669: LD_ADDR_VAR 0 4
66673: PUSH
66674: LD_VAR 0 4
66678: PUSH
66679: LD_INT 1
66681: PLUS
66682: ST_TO_ADDR
// if k > tmp then
66683: LD_VAR 0 4
66687: PUSH
66688: LD_VAR 0 5
66692: GREATER
66693: IFFALSE 66697
// break ;
66695: GO 66827
// if not GetClass ( j ) in [ 2 , 16 ] then
66697: LD_VAR 0 3
66701: PPUSH
66702: CALL_OW 257
66706: PUSH
66707: LD_INT 2
66709: PUSH
66710: LD_INT 16
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: IN
66717: NOT
66718: IFFALSE 66771
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
66720: LD_ADDR_EXP 69
66724: PUSH
66725: LD_EXP 69
66729: PPUSH
66730: LD_VAR 0 2
66734: PPUSH
66735: LD_EXP 69
66739: PUSH
66740: LD_VAR 0 2
66744: ARRAY
66745: PUSH
66746: LD_VAR 0 3
66750: DIFF
66751: PPUSH
66752: CALL_OW 1
66756: ST_TO_ADDR
// SetTag ( j , 0 ) ;
66757: LD_VAR 0 3
66761: PPUSH
66762: LD_INT 0
66764: PPUSH
66765: CALL_OW 109
// continue ;
66769: GO 66666
// end ; if IsInUnit ( j ) then
66771: LD_VAR 0 3
66775: PPUSH
66776: CALL_OW 310
66780: IFFALSE 66791
// ComExitBuilding ( j ) ;
66782: LD_VAR 0 3
66786: PPUSH
66787: CALL_OW 122
// wait ( 3 ) ;
66791: LD_INT 3
66793: PPUSH
66794: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
66798: LD_VAR 0 3
66802: PPUSH
66803: LD_VAR 0 6
66807: PUSH
66808: LD_INT 2
66810: ARRAY
66811: PPUSH
66812: LD_VAR 0 6
66816: PUSH
66817: LD_INT 3
66819: ARRAY
66820: PPUSH
66821: CALL_OW 117
// end ;
66825: GO 66666
66827: POP
66828: POP
// end ; end else
66829: GO 67391
// begin for j in cargo do
66831: LD_ADDR_VAR 0 3
66835: PUSH
66836: LD_VAR 0 7
66840: PUSH
66841: FOR_IN
66842: IFFALSE 67389
// begin if GetTag ( j ) <> 0 then
66844: LD_VAR 0 3
66848: PPUSH
66849: CALL_OW 110
66853: PUSH
66854: LD_INT 0
66856: NONEQUAL
66857: IFFALSE 66861
// continue ;
66859: GO 66841
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
66861: LD_VAR 0 3
66865: PPUSH
66866: CALL_OW 256
66870: PUSH
66871: LD_INT 1000
66873: LESS
66874: PUSH
66875: LD_VAR 0 3
66879: PPUSH
66880: LD_EXP 76
66884: PUSH
66885: LD_VAR 0 2
66889: ARRAY
66890: PPUSH
66891: CALL_OW 308
66895: NOT
66896: AND
66897: IFFALSE 66919
// ComMoveToArea ( j , mc_parking [ i ] ) ;
66899: LD_VAR 0 3
66903: PPUSH
66904: LD_EXP 76
66908: PUSH
66909: LD_VAR 0 2
66913: ARRAY
66914: PPUSH
66915: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
66919: LD_VAR 0 3
66923: PPUSH
66924: CALL_OW 256
66928: PUSH
66929: LD_INT 1000
66931: LESS
66932: PUSH
66933: LD_VAR 0 3
66937: PPUSH
66938: LD_EXP 76
66942: PUSH
66943: LD_VAR 0 2
66947: ARRAY
66948: PPUSH
66949: CALL_OW 308
66953: AND
66954: IFFALSE 66958
// continue ;
66956: GO 66841
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
66958: LD_VAR 0 3
66962: PPUSH
66963: CALL_OW 262
66967: PUSH
66968: LD_INT 2
66970: EQUAL
66971: PUSH
66972: LD_VAR 0 3
66976: PPUSH
66977: CALL_OW 261
66981: PUSH
66982: LD_INT 15
66984: LESS
66985: AND
66986: IFFALSE 66990
// continue ;
66988: GO 66841
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
66990: LD_VAR 0 3
66994: PPUSH
66995: CALL_OW 262
66999: PUSH
67000: LD_INT 1
67002: EQUAL
67003: PUSH
67004: LD_VAR 0 3
67008: PPUSH
67009: CALL_OW 261
67013: PUSH
67014: LD_INT 10
67016: LESS
67017: AND
67018: IFFALSE 67328
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
67020: LD_ADDR_VAR 0 8
67024: PUSH
67025: LD_EXP 52
67029: PUSH
67030: LD_VAR 0 2
67034: ARRAY
67035: PPUSH
67036: LD_INT 2
67038: PUSH
67039: LD_INT 30
67041: PUSH
67042: LD_INT 0
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 30
67051: PUSH
67052: LD_INT 1
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: LIST
67063: PPUSH
67064: CALL_OW 72
67068: ST_TO_ADDR
// if not depot then
67069: LD_VAR 0 8
67073: NOT
67074: IFFALSE 67078
// continue ;
67076: GO 66841
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
67078: LD_VAR 0 3
67082: PPUSH
67083: LD_VAR 0 8
67087: PPUSH
67088: LD_VAR 0 3
67092: PPUSH
67093: CALL_OW 74
67097: PPUSH
67098: CALL_OW 296
67102: PUSH
67103: LD_INT 6
67105: LESS
67106: IFFALSE 67122
// SetFuel ( j , 100 ) else
67108: LD_VAR 0 3
67112: PPUSH
67113: LD_INT 100
67115: PPUSH
67116: CALL_OW 240
67120: GO 67328
// if GetFuel ( j ) = 0 then
67122: LD_VAR 0 3
67126: PPUSH
67127: CALL_OW 261
67131: PUSH
67132: LD_INT 0
67134: EQUAL
67135: IFFALSE 67328
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
67137: LD_ADDR_EXP 71
67141: PUSH
67142: LD_EXP 71
67146: PPUSH
67147: LD_VAR 0 2
67151: PPUSH
67152: LD_EXP 71
67156: PUSH
67157: LD_VAR 0 2
67161: ARRAY
67162: PUSH
67163: LD_VAR 0 3
67167: DIFF
67168: PPUSH
67169: CALL_OW 1
67173: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
67174: LD_VAR 0 3
67178: PPUSH
67179: CALL_OW 263
67183: PUSH
67184: LD_INT 1
67186: EQUAL
67187: IFFALSE 67203
// ComExitVehicle ( IsInUnit ( j ) ) ;
67189: LD_VAR 0 3
67193: PPUSH
67194: CALL_OW 310
67198: PPUSH
67199: CALL_OW 121
// if GetControl ( j ) = control_remote then
67203: LD_VAR 0 3
67207: PPUSH
67208: CALL_OW 263
67212: PUSH
67213: LD_INT 2
67215: EQUAL
67216: IFFALSE 67227
// ComUnlink ( j ) ;
67218: LD_VAR 0 3
67222: PPUSH
67223: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
67227: LD_ADDR_VAR 0 9
67231: PUSH
67232: LD_VAR 0 2
67236: PPUSH
67237: LD_INT 3
67239: PPUSH
67240: CALL 76374 0 2
67244: ST_TO_ADDR
// if fac then
67245: LD_VAR 0 9
67249: IFFALSE 67326
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
67251: LD_ADDR_VAR 0 10
67255: PUSH
67256: LD_VAR 0 9
67260: PPUSH
67261: LD_VAR 0 3
67265: PPUSH
67266: CALL_OW 265
67270: PPUSH
67271: LD_VAR 0 3
67275: PPUSH
67276: CALL_OW 262
67280: PPUSH
67281: LD_VAR 0 3
67285: PPUSH
67286: CALL_OW 263
67290: PPUSH
67291: LD_VAR 0 3
67295: PPUSH
67296: CALL_OW 264
67300: PPUSH
67301: CALL 14514 0 5
67305: ST_TO_ADDR
// if components then
67306: LD_VAR 0 10
67310: IFFALSE 67326
// MC_InsertProduceList ( i , components ) ;
67312: LD_VAR 0 2
67316: PPUSH
67317: LD_VAR 0 10
67321: PPUSH
67322: CALL 76002 0 2
// end ; continue ;
67326: GO 66841
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
67328: LD_VAR 0 3
67332: PPUSH
67333: LD_INT 1
67335: PPUSH
67336: CALL_OW 289
67340: PUSH
67341: LD_INT 100
67343: LESS
67344: PUSH
67345: LD_VAR 0 3
67349: PPUSH
67350: CALL_OW 314
67354: NOT
67355: AND
67356: IFFALSE 67385
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
67358: LD_VAR 0 3
67362: PPUSH
67363: LD_VAR 0 6
67367: PUSH
67368: LD_INT 2
67370: ARRAY
67371: PPUSH
67372: LD_VAR 0 6
67376: PUSH
67377: LD_INT 3
67379: ARRAY
67380: PPUSH
67381: CALL_OW 117
// break ;
67385: GO 67389
// end ;
67387: GO 66841
67389: POP
67390: POP
// end ; end ;
67391: GO 65679
67393: POP
67394: POP
// end ;
67395: LD_VAR 0 1
67399: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
67400: LD_INT 0
67402: PPUSH
67403: PPUSH
67404: PPUSH
67405: PPUSH
// if not mc_bases then
67406: LD_EXP 52
67410: NOT
67411: IFFALSE 67415
// exit ;
67413: GO 67576
// for i = 1 to mc_bases do
67415: LD_ADDR_VAR 0 2
67419: PUSH
67420: DOUBLE
67421: LD_INT 1
67423: DEC
67424: ST_TO_ADDR
67425: LD_EXP 52
67429: PUSH
67430: FOR_TO
67431: IFFALSE 67574
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
67433: LD_ADDR_VAR 0 4
67437: PUSH
67438: LD_EXP 71
67442: PUSH
67443: LD_VAR 0 2
67447: ARRAY
67448: PUSH
67449: LD_EXP 74
67453: PUSH
67454: LD_VAR 0 2
67458: ARRAY
67459: UNION
67460: PPUSH
67461: LD_INT 33
67463: PUSH
67464: LD_INT 2
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: PPUSH
67471: CALL_OW 72
67475: ST_TO_ADDR
// if tmp then
67476: LD_VAR 0 4
67480: IFFALSE 67572
// for j in tmp do
67482: LD_ADDR_VAR 0 3
67486: PUSH
67487: LD_VAR 0 4
67491: PUSH
67492: FOR_IN
67493: IFFALSE 67570
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
67495: LD_VAR 0 3
67499: PPUSH
67500: CALL_OW 312
67504: NOT
67505: PUSH
67506: LD_VAR 0 3
67510: PPUSH
67511: CALL_OW 256
67515: PUSH
67516: LD_INT 250
67518: GREATEREQUAL
67519: AND
67520: IFFALSE 67533
// Connect ( j ) else
67522: LD_VAR 0 3
67526: PPUSH
67527: CALL 19854 0 1
67531: GO 67568
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
67533: LD_VAR 0 3
67537: PPUSH
67538: CALL_OW 256
67542: PUSH
67543: LD_INT 250
67545: LESS
67546: PUSH
67547: LD_VAR 0 3
67551: PPUSH
67552: CALL_OW 312
67556: AND
67557: IFFALSE 67568
// ComUnlink ( j ) ;
67559: LD_VAR 0 3
67563: PPUSH
67564: CALL_OW 136
67568: GO 67492
67570: POP
67571: POP
// end ;
67572: GO 67430
67574: POP
67575: POP
// end ;
67576: LD_VAR 0 1
67580: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
67581: LD_INT 0
67583: PPUSH
67584: PPUSH
67585: PPUSH
67586: PPUSH
67587: PPUSH
// if not mc_bases then
67588: LD_EXP 52
67592: NOT
67593: IFFALSE 67597
// exit ;
67595: GO 68057
// for i = 1 to mc_bases do
67597: LD_ADDR_VAR 0 2
67601: PUSH
67602: DOUBLE
67603: LD_INT 1
67605: DEC
67606: ST_TO_ADDR
67607: LD_EXP 52
67611: PUSH
67612: FOR_TO
67613: IFFALSE 68055
// begin if not mc_produce [ i ] then
67615: LD_EXP 73
67619: PUSH
67620: LD_VAR 0 2
67624: ARRAY
67625: NOT
67626: IFFALSE 67630
// continue ;
67628: GO 67612
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
67630: LD_ADDR_VAR 0 5
67634: PUSH
67635: LD_EXP 52
67639: PUSH
67640: LD_VAR 0 2
67644: ARRAY
67645: PPUSH
67646: LD_INT 30
67648: PUSH
67649: LD_INT 3
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PPUSH
67656: CALL_OW 72
67660: ST_TO_ADDR
// if not fac then
67661: LD_VAR 0 5
67665: NOT
67666: IFFALSE 67670
// continue ;
67668: GO 67612
// for j in fac do
67670: LD_ADDR_VAR 0 3
67674: PUSH
67675: LD_VAR 0 5
67679: PUSH
67680: FOR_IN
67681: IFFALSE 68051
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
67683: LD_VAR 0 3
67687: PPUSH
67688: CALL_OW 461
67692: PUSH
67693: LD_INT 2
67695: NONEQUAL
67696: PUSH
67697: LD_VAR 0 3
67701: PPUSH
67702: LD_INT 15
67704: PPUSH
67705: CALL 19514 0 2
67709: PUSH
67710: LD_INT 4
67712: ARRAY
67713: OR
67714: PUSH
67715: LD_VAR 0 3
67719: PPUSH
67720: CALL_OW 313
67724: PUSH
67725: LD_INT 0
67727: EQUAL
67728: OR
67729: IFFALSE 67733
// continue ;
67731: GO 67680
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
67733: LD_VAR 0 3
67737: PPUSH
67738: LD_EXP 73
67742: PUSH
67743: LD_VAR 0 2
67747: ARRAY
67748: PUSH
67749: LD_INT 1
67751: ARRAY
67752: PUSH
67753: LD_INT 1
67755: ARRAY
67756: PPUSH
67757: LD_EXP 73
67761: PUSH
67762: LD_VAR 0 2
67766: ARRAY
67767: PUSH
67768: LD_INT 1
67770: ARRAY
67771: PUSH
67772: LD_INT 2
67774: ARRAY
67775: PPUSH
67776: LD_EXP 73
67780: PUSH
67781: LD_VAR 0 2
67785: ARRAY
67786: PUSH
67787: LD_INT 1
67789: ARRAY
67790: PUSH
67791: LD_INT 3
67793: ARRAY
67794: PPUSH
67795: LD_EXP 73
67799: PUSH
67800: LD_VAR 0 2
67804: ARRAY
67805: PUSH
67806: LD_INT 1
67808: ARRAY
67809: PUSH
67810: LD_INT 4
67812: ARRAY
67813: PPUSH
67814: CALL_OW 448
67818: PUSH
67819: LD_VAR 0 3
67823: PPUSH
67824: LD_EXP 73
67828: PUSH
67829: LD_VAR 0 2
67833: ARRAY
67834: PUSH
67835: LD_INT 1
67837: ARRAY
67838: PUSH
67839: LD_INT 1
67841: ARRAY
67842: PUSH
67843: LD_EXP 73
67847: PUSH
67848: LD_VAR 0 2
67852: ARRAY
67853: PUSH
67854: LD_INT 1
67856: ARRAY
67857: PUSH
67858: LD_INT 2
67860: ARRAY
67861: PUSH
67862: LD_EXP 73
67866: PUSH
67867: LD_VAR 0 2
67871: ARRAY
67872: PUSH
67873: LD_INT 1
67875: ARRAY
67876: PUSH
67877: LD_INT 3
67879: ARRAY
67880: PUSH
67881: LD_EXP 73
67885: PUSH
67886: LD_VAR 0 2
67890: ARRAY
67891: PUSH
67892: LD_INT 1
67894: ARRAY
67895: PUSH
67896: LD_INT 4
67898: ARRAY
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: LIST
67904: LIST
67905: PPUSH
67906: CALL 23185 0 2
67910: AND
67911: IFFALSE 68049
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
67913: LD_VAR 0 3
67917: PPUSH
67918: LD_EXP 73
67922: PUSH
67923: LD_VAR 0 2
67927: ARRAY
67928: PUSH
67929: LD_INT 1
67931: ARRAY
67932: PUSH
67933: LD_INT 1
67935: ARRAY
67936: PPUSH
67937: LD_EXP 73
67941: PUSH
67942: LD_VAR 0 2
67946: ARRAY
67947: PUSH
67948: LD_INT 1
67950: ARRAY
67951: PUSH
67952: LD_INT 2
67954: ARRAY
67955: PPUSH
67956: LD_EXP 73
67960: PUSH
67961: LD_VAR 0 2
67965: ARRAY
67966: PUSH
67967: LD_INT 1
67969: ARRAY
67970: PUSH
67971: LD_INT 3
67973: ARRAY
67974: PPUSH
67975: LD_EXP 73
67979: PUSH
67980: LD_VAR 0 2
67984: ARRAY
67985: PUSH
67986: LD_INT 1
67988: ARRAY
67989: PUSH
67990: LD_INT 4
67992: ARRAY
67993: PPUSH
67994: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
67998: LD_ADDR_VAR 0 4
68002: PUSH
68003: LD_EXP 73
68007: PUSH
68008: LD_VAR 0 2
68012: ARRAY
68013: PPUSH
68014: LD_INT 1
68016: PPUSH
68017: CALL_OW 3
68021: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
68022: LD_ADDR_EXP 73
68026: PUSH
68027: LD_EXP 73
68031: PPUSH
68032: LD_VAR 0 2
68036: PPUSH
68037: LD_VAR 0 4
68041: PPUSH
68042: CALL_OW 1
68046: ST_TO_ADDR
// break ;
68047: GO 68051
// end ; end ;
68049: GO 67680
68051: POP
68052: POP
// end ;
68053: GO 67612
68055: POP
68056: POP
// end ;
68057: LD_VAR 0 1
68061: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
68062: LD_INT 0
68064: PPUSH
68065: PPUSH
68066: PPUSH
// if not mc_bases then
68067: LD_EXP 52
68071: NOT
68072: IFFALSE 68076
// exit ;
68074: GO 68165
// for i = 1 to mc_bases do
68076: LD_ADDR_VAR 0 2
68080: PUSH
68081: DOUBLE
68082: LD_INT 1
68084: DEC
68085: ST_TO_ADDR
68086: LD_EXP 52
68090: PUSH
68091: FOR_TO
68092: IFFALSE 68163
// begin if mc_attack [ i ] then
68094: LD_EXP 72
68098: PUSH
68099: LD_VAR 0 2
68103: ARRAY
68104: IFFALSE 68161
// begin tmp := mc_attack [ i ] [ 1 ] ;
68106: LD_ADDR_VAR 0 3
68110: PUSH
68111: LD_EXP 72
68115: PUSH
68116: LD_VAR 0 2
68120: ARRAY
68121: PUSH
68122: LD_INT 1
68124: ARRAY
68125: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
68126: LD_ADDR_EXP 72
68130: PUSH
68131: LD_EXP 72
68135: PPUSH
68136: LD_VAR 0 2
68140: PPUSH
68141: EMPTY
68142: PPUSH
68143: CALL_OW 1
68147: ST_TO_ADDR
// Attack ( tmp ) ;
68148: LD_VAR 0 3
68152: PPUSH
68153: CALL 45374 0 1
// exit ;
68157: POP
68158: POP
68159: GO 68165
// end ; end ;
68161: GO 68091
68163: POP
68164: POP
// end ;
68165: LD_VAR 0 1
68169: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
68170: LD_INT 0
68172: PPUSH
68173: PPUSH
68174: PPUSH
68175: PPUSH
68176: PPUSH
68177: PPUSH
68178: PPUSH
// if not mc_bases then
68179: LD_EXP 52
68183: NOT
68184: IFFALSE 68188
// exit ;
68186: GO 68770
// for i = 1 to mc_bases do
68188: LD_ADDR_VAR 0 2
68192: PUSH
68193: DOUBLE
68194: LD_INT 1
68196: DEC
68197: ST_TO_ADDR
68198: LD_EXP 52
68202: PUSH
68203: FOR_TO
68204: IFFALSE 68768
// begin if not mc_bases [ i ] then
68206: LD_EXP 52
68210: PUSH
68211: LD_VAR 0 2
68215: ARRAY
68216: NOT
68217: IFFALSE 68221
// continue ;
68219: GO 68203
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
68221: LD_ADDR_VAR 0 7
68225: PUSH
68226: LD_EXP 52
68230: PUSH
68231: LD_VAR 0 2
68235: ARRAY
68236: PUSH
68237: LD_INT 1
68239: ARRAY
68240: PPUSH
68241: CALL 13818 0 1
68245: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
68246: LD_ADDR_EXP 75
68250: PUSH
68251: LD_EXP 75
68255: PPUSH
68256: LD_VAR 0 2
68260: PPUSH
68261: LD_EXP 52
68265: PUSH
68266: LD_VAR 0 2
68270: ARRAY
68271: PUSH
68272: LD_INT 1
68274: ARRAY
68275: PPUSH
68276: CALL_OW 255
68280: PPUSH
68281: LD_EXP 77
68285: PUSH
68286: LD_VAR 0 2
68290: ARRAY
68291: PPUSH
68292: CALL 11815 0 2
68296: PPUSH
68297: CALL_OW 1
68301: ST_TO_ADDR
// if not mc_scan [ i ] then
68302: LD_EXP 75
68306: PUSH
68307: LD_VAR 0 2
68311: ARRAY
68312: NOT
68313: IFFALSE 68468
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
68315: LD_ADDR_VAR 0 4
68319: PUSH
68320: LD_EXP 52
68324: PUSH
68325: LD_VAR 0 2
68329: ARRAY
68330: PPUSH
68331: LD_INT 2
68333: PUSH
68334: LD_INT 25
68336: PUSH
68337: LD_INT 5
68339: PUSH
68340: EMPTY
68341: LIST
68342: LIST
68343: PUSH
68344: LD_INT 25
68346: PUSH
68347: LD_INT 8
68349: PUSH
68350: EMPTY
68351: LIST
68352: LIST
68353: PUSH
68354: LD_INT 25
68356: PUSH
68357: LD_INT 9
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: PPUSH
68370: CALL_OW 72
68374: ST_TO_ADDR
// if not tmp then
68375: LD_VAR 0 4
68379: NOT
68380: IFFALSE 68384
// continue ;
68382: GO 68203
// for j in tmp do
68384: LD_ADDR_VAR 0 3
68388: PUSH
68389: LD_VAR 0 4
68393: PUSH
68394: FOR_IN
68395: IFFALSE 68466
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
68397: LD_VAR 0 3
68401: PPUSH
68402: CALL_OW 310
68406: PPUSH
68407: CALL_OW 266
68411: PUSH
68412: LD_INT 5
68414: EQUAL
68415: PUSH
68416: LD_VAR 0 3
68420: PPUSH
68421: CALL_OW 257
68425: PUSH
68426: LD_INT 1
68428: EQUAL
68429: AND
68430: PUSH
68431: LD_VAR 0 3
68435: PPUSH
68436: CALL_OW 459
68440: NOT
68441: AND
68442: PUSH
68443: LD_VAR 0 7
68447: AND
68448: IFFALSE 68464
// ComChangeProfession ( j , class ) ;
68450: LD_VAR 0 3
68454: PPUSH
68455: LD_VAR 0 7
68459: PPUSH
68460: CALL_OW 123
68464: GO 68394
68466: POP
68467: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
68468: LD_EXP 75
68472: PUSH
68473: LD_VAR 0 2
68477: ARRAY
68478: PUSH
68479: LD_EXP 74
68483: PUSH
68484: LD_VAR 0 2
68488: ARRAY
68489: NOT
68490: AND
68491: PUSH
68492: LD_EXP 52
68496: PUSH
68497: LD_VAR 0 2
68501: ARRAY
68502: PPUSH
68503: LD_INT 30
68505: PUSH
68506: LD_INT 32
68508: PUSH
68509: EMPTY
68510: LIST
68511: LIST
68512: PPUSH
68513: CALL_OW 72
68517: NOT
68518: AND
68519: PUSH
68520: LD_EXP 52
68524: PUSH
68525: LD_VAR 0 2
68529: ARRAY
68530: PPUSH
68531: LD_INT 2
68533: PUSH
68534: LD_INT 30
68536: PUSH
68537: LD_INT 4
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: LD_INT 30
68546: PUSH
68547: LD_INT 5
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: PUSH
68554: EMPTY
68555: LIST
68556: LIST
68557: LIST
68558: PPUSH
68559: CALL_OW 72
68563: NOT
68564: AND
68565: IFFALSE 68697
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
68567: LD_ADDR_VAR 0 4
68571: PUSH
68572: LD_EXP 52
68576: PUSH
68577: LD_VAR 0 2
68581: ARRAY
68582: PPUSH
68583: LD_INT 2
68585: PUSH
68586: LD_INT 25
68588: PUSH
68589: LD_INT 1
68591: PUSH
68592: EMPTY
68593: LIST
68594: LIST
68595: PUSH
68596: LD_INT 25
68598: PUSH
68599: LD_INT 5
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: LD_INT 25
68608: PUSH
68609: LD_INT 8
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: PUSH
68616: LD_INT 25
68618: PUSH
68619: LD_INT 9
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: LIST
68630: LIST
68631: LIST
68632: PPUSH
68633: CALL_OW 72
68637: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
68638: LD_ADDR_VAR 0 4
68642: PUSH
68643: LD_VAR 0 4
68647: PUSH
68648: LD_VAR 0 4
68652: PPUSH
68653: LD_INT 18
68655: PPUSH
68656: CALL 50157 0 2
68660: DIFF
68661: ST_TO_ADDR
// if tmp then
68662: LD_VAR 0 4
68666: IFFALSE 68697
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
68668: LD_VAR 0 2
68672: PPUSH
68673: LD_VAR 0 4
68677: PPUSH
68678: LD_EXP 77
68682: PUSH
68683: LD_VAR 0 2
68687: ARRAY
68688: PPUSH
68689: CALL 11850 0 3
// exit ;
68693: POP
68694: POP
68695: GO 68770
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
68697: LD_EXP 75
68701: PUSH
68702: LD_VAR 0 2
68706: ARRAY
68707: PUSH
68708: LD_EXP 74
68712: PUSH
68713: LD_VAR 0 2
68717: ARRAY
68718: AND
68719: IFFALSE 68766
// begin tmp := mc_defender [ i ] ;
68721: LD_ADDR_VAR 0 4
68725: PUSH
68726: LD_EXP 74
68730: PUSH
68731: LD_VAR 0 2
68735: ARRAY
68736: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
68737: LD_VAR 0 2
68741: PPUSH
68742: LD_VAR 0 4
68746: PPUSH
68747: LD_EXP 75
68751: PUSH
68752: LD_VAR 0 2
68756: ARRAY
68757: PPUSH
68758: CALL 12348 0 3
// exit ;
68762: POP
68763: POP
68764: GO 68770
// end ; end ;
68766: GO 68203
68768: POP
68769: POP
// end ;
68770: LD_VAR 0 1
68774: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
68775: LD_INT 0
68777: PPUSH
68778: PPUSH
68779: PPUSH
68780: PPUSH
68781: PPUSH
68782: PPUSH
68783: PPUSH
68784: PPUSH
68785: PPUSH
68786: PPUSH
68787: PPUSH
// if not mc_bases then
68788: LD_EXP 52
68792: NOT
68793: IFFALSE 68797
// exit ;
68795: GO 69884
// for i = 1 to mc_bases do
68797: LD_ADDR_VAR 0 2
68801: PUSH
68802: DOUBLE
68803: LD_INT 1
68805: DEC
68806: ST_TO_ADDR
68807: LD_EXP 52
68811: PUSH
68812: FOR_TO
68813: IFFALSE 69882
// begin tmp := mc_lab [ i ] ;
68815: LD_ADDR_VAR 0 6
68819: PUSH
68820: LD_EXP 85
68824: PUSH
68825: LD_VAR 0 2
68829: ARRAY
68830: ST_TO_ADDR
// if not tmp then
68831: LD_VAR 0 6
68835: NOT
68836: IFFALSE 68840
// continue ;
68838: GO 68812
// idle_lab := 0 ;
68840: LD_ADDR_VAR 0 11
68844: PUSH
68845: LD_INT 0
68847: ST_TO_ADDR
// for j in tmp do
68848: LD_ADDR_VAR 0 3
68852: PUSH
68853: LD_VAR 0 6
68857: PUSH
68858: FOR_IN
68859: IFFALSE 69878
// begin researching := false ;
68861: LD_ADDR_VAR 0 10
68865: PUSH
68866: LD_INT 0
68868: ST_TO_ADDR
// side := GetSide ( j ) ;
68869: LD_ADDR_VAR 0 4
68873: PUSH
68874: LD_VAR 0 3
68878: PPUSH
68879: CALL_OW 255
68883: ST_TO_ADDR
// if not mc_tech [ side ] then
68884: LD_EXP 79
68888: PUSH
68889: LD_VAR 0 4
68893: ARRAY
68894: NOT
68895: IFFALSE 68899
// continue ;
68897: GO 68858
// if BuildingStatus ( j ) = bs_idle then
68899: LD_VAR 0 3
68903: PPUSH
68904: CALL_OW 461
68908: PUSH
68909: LD_INT 2
68911: EQUAL
68912: IFFALSE 69100
// begin if idle_lab and UnitsInside ( j ) < 6 then
68914: LD_VAR 0 11
68918: PUSH
68919: LD_VAR 0 3
68923: PPUSH
68924: CALL_OW 313
68928: PUSH
68929: LD_INT 6
68931: LESS
68932: AND
68933: IFFALSE 69004
// begin tmp2 := UnitsInside ( idle_lab ) ;
68935: LD_ADDR_VAR 0 9
68939: PUSH
68940: LD_VAR 0 11
68944: PPUSH
68945: CALL_OW 313
68949: ST_TO_ADDR
// if tmp2 then
68950: LD_VAR 0 9
68954: IFFALSE 68996
// for x in tmp2 do
68956: LD_ADDR_VAR 0 7
68960: PUSH
68961: LD_VAR 0 9
68965: PUSH
68966: FOR_IN
68967: IFFALSE 68994
// begin ComExitBuilding ( x ) ;
68969: LD_VAR 0 7
68973: PPUSH
68974: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
68978: LD_VAR 0 7
68982: PPUSH
68983: LD_VAR 0 3
68987: PPUSH
68988: CALL_OW 180
// end ;
68992: GO 68966
68994: POP
68995: POP
// idle_lab := 0 ;
68996: LD_ADDR_VAR 0 11
69000: PUSH
69001: LD_INT 0
69003: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
69004: LD_ADDR_VAR 0 5
69008: PUSH
69009: LD_EXP 79
69013: PUSH
69014: LD_VAR 0 4
69018: ARRAY
69019: PUSH
69020: FOR_IN
69021: IFFALSE 69081
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
69023: LD_VAR 0 3
69027: PPUSH
69028: LD_VAR 0 5
69032: PPUSH
69033: CALL_OW 430
69037: PUSH
69038: LD_VAR 0 4
69042: PPUSH
69043: LD_VAR 0 5
69047: PPUSH
69048: CALL 10920 0 2
69052: AND
69053: IFFALSE 69079
// begin researching := true ;
69055: LD_ADDR_VAR 0 10
69059: PUSH
69060: LD_INT 1
69062: ST_TO_ADDR
// ComResearch ( j , t ) ;
69063: LD_VAR 0 3
69067: PPUSH
69068: LD_VAR 0 5
69072: PPUSH
69073: CALL_OW 124
// break ;
69077: GO 69081
// end ;
69079: GO 69020
69081: POP
69082: POP
// if not researching then
69083: LD_VAR 0 10
69087: NOT
69088: IFFALSE 69100
// idle_lab := j ;
69090: LD_ADDR_VAR 0 11
69094: PUSH
69095: LD_VAR 0 3
69099: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
69100: LD_VAR 0 3
69104: PPUSH
69105: CALL_OW 461
69109: PUSH
69110: LD_INT 10
69112: EQUAL
69113: IFFALSE 69701
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
69115: LD_EXP 81
69119: PUSH
69120: LD_VAR 0 2
69124: ARRAY
69125: NOT
69126: PUSH
69127: LD_EXP 82
69131: PUSH
69132: LD_VAR 0 2
69136: ARRAY
69137: NOT
69138: AND
69139: PUSH
69140: LD_EXP 79
69144: PUSH
69145: LD_VAR 0 4
69149: ARRAY
69150: PUSH
69151: LD_INT 1
69153: GREATER
69154: AND
69155: IFFALSE 69286
// begin ComCancel ( j ) ;
69157: LD_VAR 0 3
69161: PPUSH
69162: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
69166: LD_ADDR_EXP 79
69170: PUSH
69171: LD_EXP 79
69175: PPUSH
69176: LD_VAR 0 4
69180: PPUSH
69181: LD_EXP 79
69185: PUSH
69186: LD_VAR 0 4
69190: ARRAY
69191: PPUSH
69192: LD_EXP 79
69196: PUSH
69197: LD_VAR 0 4
69201: ARRAY
69202: PUSH
69203: LD_INT 1
69205: MINUS
69206: PPUSH
69207: LD_EXP 79
69211: PUSH
69212: LD_VAR 0 4
69216: ARRAY
69217: PPUSH
69218: LD_INT 0
69220: PPUSH
69221: CALL 16339 0 4
69225: PPUSH
69226: CALL_OW 1
69230: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
69231: LD_ADDR_EXP 79
69235: PUSH
69236: LD_EXP 79
69240: PPUSH
69241: LD_VAR 0 4
69245: PPUSH
69246: LD_EXP 79
69250: PUSH
69251: LD_VAR 0 4
69255: ARRAY
69256: PPUSH
69257: LD_EXP 79
69261: PUSH
69262: LD_VAR 0 4
69266: ARRAY
69267: PPUSH
69268: LD_INT 1
69270: PPUSH
69271: LD_INT 0
69273: PPUSH
69274: CALL 16339 0 4
69278: PPUSH
69279: CALL_OW 1
69283: ST_TO_ADDR
// continue ;
69284: GO 68858
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
69286: LD_EXP 81
69290: PUSH
69291: LD_VAR 0 2
69295: ARRAY
69296: PUSH
69297: LD_EXP 82
69301: PUSH
69302: LD_VAR 0 2
69306: ARRAY
69307: NOT
69308: AND
69309: IFFALSE 69436
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
69311: LD_ADDR_EXP 82
69315: PUSH
69316: LD_EXP 82
69320: PPUSH
69321: LD_VAR 0 2
69325: PUSH
69326: LD_EXP 82
69330: PUSH
69331: LD_VAR 0 2
69335: ARRAY
69336: PUSH
69337: LD_INT 1
69339: PLUS
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: PPUSH
69345: LD_EXP 81
69349: PUSH
69350: LD_VAR 0 2
69354: ARRAY
69355: PUSH
69356: LD_INT 1
69358: ARRAY
69359: PPUSH
69360: CALL 16921 0 3
69364: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
69365: LD_EXP 81
69369: PUSH
69370: LD_VAR 0 2
69374: ARRAY
69375: PUSH
69376: LD_INT 1
69378: ARRAY
69379: PPUSH
69380: LD_INT 112
69382: PPUSH
69383: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
69387: LD_ADDR_VAR 0 9
69391: PUSH
69392: LD_EXP 81
69396: PUSH
69397: LD_VAR 0 2
69401: ARRAY
69402: PPUSH
69403: LD_INT 1
69405: PPUSH
69406: CALL_OW 3
69410: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
69411: LD_ADDR_EXP 81
69415: PUSH
69416: LD_EXP 81
69420: PPUSH
69421: LD_VAR 0 2
69425: PPUSH
69426: LD_VAR 0 9
69430: PPUSH
69431: CALL_OW 1
69435: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
69436: LD_EXP 81
69440: PUSH
69441: LD_VAR 0 2
69445: ARRAY
69446: PUSH
69447: LD_EXP 82
69451: PUSH
69452: LD_VAR 0 2
69456: ARRAY
69457: AND
69458: PUSH
69459: LD_EXP 82
69463: PUSH
69464: LD_VAR 0 2
69468: ARRAY
69469: PUSH
69470: LD_INT 1
69472: ARRAY
69473: PPUSH
69474: CALL_OW 310
69478: NOT
69479: AND
69480: PUSH
69481: LD_VAR 0 3
69485: PPUSH
69486: CALL_OW 313
69490: PUSH
69491: LD_INT 6
69493: EQUAL
69494: AND
69495: IFFALSE 69551
// begin tmp2 := UnitsInside ( j ) ;
69497: LD_ADDR_VAR 0 9
69501: PUSH
69502: LD_VAR 0 3
69506: PPUSH
69507: CALL_OW 313
69511: ST_TO_ADDR
// if tmp2 = 6 then
69512: LD_VAR 0 9
69516: PUSH
69517: LD_INT 6
69519: EQUAL
69520: IFFALSE 69551
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
69522: LD_VAR 0 9
69526: PUSH
69527: LD_INT 1
69529: ARRAY
69530: PPUSH
69531: LD_INT 112
69533: PPUSH
69534: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
69538: LD_VAR 0 9
69542: PUSH
69543: LD_INT 1
69545: ARRAY
69546: PPUSH
69547: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
69551: LD_EXP 82
69555: PUSH
69556: LD_VAR 0 2
69560: ARRAY
69561: PUSH
69562: LD_EXP 82
69566: PUSH
69567: LD_VAR 0 2
69571: ARRAY
69572: PUSH
69573: LD_INT 1
69575: ARRAY
69576: PPUSH
69577: CALL_OW 314
69581: NOT
69582: AND
69583: PUSH
69584: LD_EXP 82
69588: PUSH
69589: LD_VAR 0 2
69593: ARRAY
69594: PUSH
69595: LD_INT 1
69597: ARRAY
69598: PPUSH
69599: CALL_OW 310
69603: NOT
69604: AND
69605: IFFALSE 69631
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
69607: LD_EXP 82
69611: PUSH
69612: LD_VAR 0 2
69616: ARRAY
69617: PUSH
69618: LD_INT 1
69620: ARRAY
69621: PPUSH
69622: LD_VAR 0 3
69626: PPUSH
69627: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
69631: LD_EXP 82
69635: PUSH
69636: LD_VAR 0 2
69640: ARRAY
69641: PUSH
69642: LD_INT 1
69644: ARRAY
69645: PPUSH
69646: CALL_OW 310
69650: PUSH
69651: LD_EXP 82
69655: PUSH
69656: LD_VAR 0 2
69660: ARRAY
69661: PUSH
69662: LD_INT 1
69664: ARRAY
69665: PPUSH
69666: CALL_OW 310
69670: PPUSH
69671: CALL_OW 461
69675: PUSH
69676: LD_INT 3
69678: NONEQUAL
69679: AND
69680: IFFALSE 69701
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
69682: LD_EXP 82
69686: PUSH
69687: LD_VAR 0 2
69691: ARRAY
69692: PUSH
69693: LD_INT 1
69695: ARRAY
69696: PPUSH
69697: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
69701: LD_VAR 0 3
69705: PPUSH
69706: CALL_OW 461
69710: PUSH
69711: LD_INT 6
69713: EQUAL
69714: PUSH
69715: LD_VAR 0 6
69719: PUSH
69720: LD_INT 1
69722: GREATER
69723: AND
69724: IFFALSE 69876
// begin sci := [ ] ;
69726: LD_ADDR_VAR 0 8
69730: PUSH
69731: EMPTY
69732: ST_TO_ADDR
// for x in ( tmp diff j ) do
69733: LD_ADDR_VAR 0 7
69737: PUSH
69738: LD_VAR 0 6
69742: PUSH
69743: LD_VAR 0 3
69747: DIFF
69748: PUSH
69749: FOR_IN
69750: IFFALSE 69802
// begin if sci = 6 then
69752: LD_VAR 0 8
69756: PUSH
69757: LD_INT 6
69759: EQUAL
69760: IFFALSE 69764
// break ;
69762: GO 69802
// if BuildingStatus ( x ) = bs_idle then
69764: LD_VAR 0 7
69768: PPUSH
69769: CALL_OW 461
69773: PUSH
69774: LD_INT 2
69776: EQUAL
69777: IFFALSE 69800
// sci := sci ^ UnitsInside ( x ) ;
69779: LD_ADDR_VAR 0 8
69783: PUSH
69784: LD_VAR 0 8
69788: PUSH
69789: LD_VAR 0 7
69793: PPUSH
69794: CALL_OW 313
69798: ADD
69799: ST_TO_ADDR
// end ;
69800: GO 69749
69802: POP
69803: POP
// if not sci then
69804: LD_VAR 0 8
69808: NOT
69809: IFFALSE 69813
// continue ;
69811: GO 68858
// for x in sci do
69813: LD_ADDR_VAR 0 7
69817: PUSH
69818: LD_VAR 0 8
69822: PUSH
69823: FOR_IN
69824: IFFALSE 69874
// if IsInUnit ( x ) and not HasTask ( x ) then
69826: LD_VAR 0 7
69830: PPUSH
69831: CALL_OW 310
69835: PUSH
69836: LD_VAR 0 7
69840: PPUSH
69841: CALL_OW 314
69845: NOT
69846: AND
69847: IFFALSE 69872
// begin ComExitBuilding ( x ) ;
69849: LD_VAR 0 7
69853: PPUSH
69854: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
69858: LD_VAR 0 7
69862: PPUSH
69863: LD_VAR 0 3
69867: PPUSH
69868: CALL_OW 180
// end ;
69872: GO 69823
69874: POP
69875: POP
// end ; end ;
69876: GO 68858
69878: POP
69879: POP
// end ;
69880: GO 68812
69882: POP
69883: POP
// end ;
69884: LD_VAR 0 1
69888: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
69889: LD_INT 0
69891: PPUSH
69892: PPUSH
// if not mc_bases then
69893: LD_EXP 52
69897: NOT
69898: IFFALSE 69902
// exit ;
69900: GO 69983
// for i = 1 to mc_bases do
69902: LD_ADDR_VAR 0 2
69906: PUSH
69907: DOUBLE
69908: LD_INT 1
69910: DEC
69911: ST_TO_ADDR
69912: LD_EXP 52
69916: PUSH
69917: FOR_TO
69918: IFFALSE 69981
// if mc_mines [ i ] and mc_miners [ i ] then
69920: LD_EXP 65
69924: PUSH
69925: LD_VAR 0 2
69929: ARRAY
69930: PUSH
69931: LD_EXP 66
69935: PUSH
69936: LD_VAR 0 2
69940: ARRAY
69941: AND
69942: IFFALSE 69979
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
69944: LD_EXP 66
69948: PUSH
69949: LD_VAR 0 2
69953: ARRAY
69954: PUSH
69955: LD_INT 1
69957: ARRAY
69958: PPUSH
69959: CALL_OW 255
69963: PPUSH
69964: LD_EXP 65
69968: PUSH
69969: LD_VAR 0 2
69973: ARRAY
69974: PPUSH
69975: CALL 13971 0 2
69979: GO 69917
69981: POP
69982: POP
// end ;
69983: LD_VAR 0 1
69987: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
69988: LD_INT 0
69990: PPUSH
69991: PPUSH
69992: PPUSH
69993: PPUSH
69994: PPUSH
69995: PPUSH
69996: PPUSH
69997: PPUSH
// if not mc_bases or not mc_parking then
69998: LD_EXP 52
70002: NOT
70003: PUSH
70004: LD_EXP 76
70008: NOT
70009: OR
70010: IFFALSE 70014
// exit ;
70012: GO 70690
// for i = 1 to mc_bases do
70014: LD_ADDR_VAR 0 2
70018: PUSH
70019: DOUBLE
70020: LD_INT 1
70022: DEC
70023: ST_TO_ADDR
70024: LD_EXP 52
70028: PUSH
70029: FOR_TO
70030: IFFALSE 70688
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
70032: LD_EXP 52
70036: PUSH
70037: LD_VAR 0 2
70041: ARRAY
70042: NOT
70043: PUSH
70044: LD_EXP 76
70048: PUSH
70049: LD_VAR 0 2
70053: ARRAY
70054: NOT
70055: OR
70056: IFFALSE 70060
// continue ;
70058: GO 70029
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
70060: LD_ADDR_VAR 0 5
70064: PUSH
70065: LD_EXP 52
70069: PUSH
70070: LD_VAR 0 2
70074: ARRAY
70075: PUSH
70076: LD_INT 1
70078: ARRAY
70079: PPUSH
70080: CALL_OW 255
70084: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
70085: LD_ADDR_VAR 0 6
70089: PUSH
70090: LD_EXP 52
70094: PUSH
70095: LD_VAR 0 2
70099: ARRAY
70100: PPUSH
70101: LD_INT 30
70103: PUSH
70104: LD_INT 3
70106: PUSH
70107: EMPTY
70108: LIST
70109: LIST
70110: PPUSH
70111: CALL_OW 72
70115: ST_TO_ADDR
// if not fac then
70116: LD_VAR 0 6
70120: NOT
70121: IFFALSE 70172
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
70123: LD_ADDR_VAR 0 6
70127: PUSH
70128: LD_EXP 52
70132: PUSH
70133: LD_VAR 0 2
70137: ARRAY
70138: PPUSH
70139: LD_INT 2
70141: PUSH
70142: LD_INT 30
70144: PUSH
70145: LD_INT 0
70147: PUSH
70148: EMPTY
70149: LIST
70150: LIST
70151: PUSH
70152: LD_INT 30
70154: PUSH
70155: LD_INT 1
70157: PUSH
70158: EMPTY
70159: LIST
70160: LIST
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: LIST
70166: PPUSH
70167: CALL_OW 72
70171: ST_TO_ADDR
// if not fac then
70172: LD_VAR 0 6
70176: NOT
70177: IFFALSE 70181
// continue ;
70179: GO 70029
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
70181: LD_ADDR_VAR 0 7
70185: PUSH
70186: LD_EXP 76
70190: PUSH
70191: LD_VAR 0 2
70195: ARRAY
70196: PPUSH
70197: LD_INT 22
70199: PUSH
70200: LD_VAR 0 5
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: PUSH
70209: LD_INT 21
70211: PUSH
70212: LD_INT 2
70214: PUSH
70215: EMPTY
70216: LIST
70217: LIST
70218: PUSH
70219: LD_INT 3
70221: PUSH
70222: LD_INT 24
70224: PUSH
70225: LD_INT 1000
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: PUSH
70232: EMPTY
70233: LIST
70234: LIST
70235: PUSH
70236: EMPTY
70237: LIST
70238: LIST
70239: LIST
70240: PPUSH
70241: CALL_OW 70
70245: PUSH
70246: LD_INT 22
70248: PUSH
70249: LD_VAR 0 5
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: PUSH
70258: LD_INT 91
70260: PUSH
70261: LD_VAR 0 6
70265: PUSH
70266: LD_INT 1
70268: ARRAY
70269: PUSH
70270: LD_INT 25
70272: PUSH
70273: EMPTY
70274: LIST
70275: LIST
70276: LIST
70277: PUSH
70278: LD_INT 21
70280: PUSH
70281: LD_INT 2
70283: PUSH
70284: EMPTY
70285: LIST
70286: LIST
70287: PUSH
70288: LD_INT 3
70290: PUSH
70291: LD_INT 24
70293: PUSH
70294: LD_INT 1000
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: PUSH
70301: EMPTY
70302: LIST
70303: LIST
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: PPUSH
70311: CALL_OW 69
70315: UNION
70316: ST_TO_ADDR
// if not vehs then
70317: LD_VAR 0 7
70321: NOT
70322: IFFALSE 70348
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
70324: LD_ADDR_EXP 64
70328: PUSH
70329: LD_EXP 64
70333: PPUSH
70334: LD_VAR 0 2
70338: PPUSH
70339: EMPTY
70340: PPUSH
70341: CALL_OW 1
70345: ST_TO_ADDR
// continue ;
70346: GO 70029
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
70348: LD_ADDR_VAR 0 8
70352: PUSH
70353: LD_EXP 52
70357: PUSH
70358: LD_VAR 0 2
70362: ARRAY
70363: PPUSH
70364: LD_INT 30
70366: PUSH
70367: LD_INT 3
70369: PUSH
70370: EMPTY
70371: LIST
70372: LIST
70373: PPUSH
70374: CALL_OW 72
70378: ST_TO_ADDR
// if tmp then
70379: LD_VAR 0 8
70383: IFFALSE 70486
// begin for j in tmp do
70385: LD_ADDR_VAR 0 3
70389: PUSH
70390: LD_VAR 0 8
70394: PUSH
70395: FOR_IN
70396: IFFALSE 70484
// for k in UnitsInside ( j ) do
70398: LD_ADDR_VAR 0 4
70402: PUSH
70403: LD_VAR 0 3
70407: PPUSH
70408: CALL_OW 313
70412: PUSH
70413: FOR_IN
70414: IFFALSE 70480
// if k then
70416: LD_VAR 0 4
70420: IFFALSE 70478
// if not k in mc_repair_vehicle [ i ] then
70422: LD_VAR 0 4
70426: PUSH
70427: LD_EXP 64
70431: PUSH
70432: LD_VAR 0 2
70436: ARRAY
70437: IN
70438: NOT
70439: IFFALSE 70478
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
70441: LD_ADDR_EXP 64
70445: PUSH
70446: LD_EXP 64
70450: PPUSH
70451: LD_VAR 0 2
70455: PPUSH
70456: LD_EXP 64
70460: PUSH
70461: LD_VAR 0 2
70465: ARRAY
70466: PUSH
70467: LD_VAR 0 4
70471: UNION
70472: PPUSH
70473: CALL_OW 1
70477: ST_TO_ADDR
70478: GO 70413
70480: POP
70481: POP
70482: GO 70395
70484: POP
70485: POP
// end ; if not mc_repair_vehicle [ i ] then
70486: LD_EXP 64
70490: PUSH
70491: LD_VAR 0 2
70495: ARRAY
70496: NOT
70497: IFFALSE 70501
// continue ;
70499: GO 70029
// for j in mc_repair_vehicle [ i ] do
70501: LD_ADDR_VAR 0 3
70505: PUSH
70506: LD_EXP 64
70510: PUSH
70511: LD_VAR 0 2
70515: ARRAY
70516: PUSH
70517: FOR_IN
70518: IFFALSE 70684
// begin if GetClass ( j ) <> 3 then
70520: LD_VAR 0 3
70524: PPUSH
70525: CALL_OW 257
70529: PUSH
70530: LD_INT 3
70532: NONEQUAL
70533: IFFALSE 70574
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
70535: LD_ADDR_EXP 64
70539: PUSH
70540: LD_EXP 64
70544: PPUSH
70545: LD_VAR 0 2
70549: PPUSH
70550: LD_EXP 64
70554: PUSH
70555: LD_VAR 0 2
70559: ARRAY
70560: PUSH
70561: LD_VAR 0 3
70565: DIFF
70566: PPUSH
70567: CALL_OW 1
70571: ST_TO_ADDR
// continue ;
70572: GO 70517
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
70574: LD_VAR 0 3
70578: PPUSH
70579: CALL_OW 311
70583: NOT
70584: PUSH
70585: LD_VAR 0 3
70589: PUSH
70590: LD_EXP 55
70594: PUSH
70595: LD_VAR 0 2
70599: ARRAY
70600: PUSH
70601: LD_INT 1
70603: ARRAY
70604: IN
70605: NOT
70606: AND
70607: PUSH
70608: LD_VAR 0 3
70612: PUSH
70613: LD_EXP 55
70617: PUSH
70618: LD_VAR 0 2
70622: ARRAY
70623: PUSH
70624: LD_INT 2
70626: ARRAY
70627: IN
70628: NOT
70629: AND
70630: IFFALSE 70682
// begin if IsInUnit ( j ) then
70632: LD_VAR 0 3
70636: PPUSH
70637: CALL_OW 310
70641: IFFALSE 70652
// ComExitBuilding ( j ) ;
70643: LD_VAR 0 3
70647: PPUSH
70648: CALL_OW 122
// if not HasTask ( j ) then
70652: LD_VAR 0 3
70656: PPUSH
70657: CALL_OW 314
70661: NOT
70662: IFFALSE 70682
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
70664: LD_VAR 0 3
70668: PPUSH
70669: LD_VAR 0 7
70673: PUSH
70674: LD_INT 1
70676: ARRAY
70677: PPUSH
70678: CALL_OW 189
// end ; end ;
70682: GO 70517
70684: POP
70685: POP
// end ;
70686: GO 70029
70688: POP
70689: POP
// end ;
70690: LD_VAR 0 1
70694: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
70695: LD_INT 0
70697: PPUSH
70698: PPUSH
70699: PPUSH
70700: PPUSH
70701: PPUSH
70702: PPUSH
70703: PPUSH
70704: PPUSH
70705: PPUSH
70706: PPUSH
70707: PPUSH
// if not mc_bases then
70708: LD_EXP 52
70712: NOT
70713: IFFALSE 70717
// exit ;
70715: GO 71519
// for i = 1 to mc_bases do
70717: LD_ADDR_VAR 0 2
70721: PUSH
70722: DOUBLE
70723: LD_INT 1
70725: DEC
70726: ST_TO_ADDR
70727: LD_EXP 52
70731: PUSH
70732: FOR_TO
70733: IFFALSE 71517
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
70735: LD_EXP 80
70739: PUSH
70740: LD_VAR 0 2
70744: ARRAY
70745: NOT
70746: PUSH
70747: LD_EXP 55
70751: PUSH
70752: LD_VAR 0 2
70756: ARRAY
70757: PUSH
70758: LD_INT 1
70760: ARRAY
70761: OR
70762: PUSH
70763: LD_EXP 55
70767: PUSH
70768: LD_VAR 0 2
70772: ARRAY
70773: PUSH
70774: LD_INT 2
70776: ARRAY
70777: OR
70778: PUSH
70779: LD_EXP 78
70783: PUSH
70784: LD_VAR 0 2
70788: ARRAY
70789: PPUSH
70790: LD_INT 1
70792: PPUSH
70793: CALL_OW 325
70797: NOT
70798: OR
70799: PUSH
70800: LD_EXP 75
70804: PUSH
70805: LD_VAR 0 2
70809: ARRAY
70810: OR
70811: IFFALSE 70815
// continue ;
70813: GO 70732
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
70815: LD_ADDR_VAR 0 8
70819: PUSH
70820: LD_EXP 52
70824: PUSH
70825: LD_VAR 0 2
70829: ARRAY
70830: PPUSH
70831: LD_INT 25
70833: PUSH
70834: LD_INT 4
70836: PUSH
70837: EMPTY
70838: LIST
70839: LIST
70840: PUSH
70841: LD_INT 50
70843: PUSH
70844: EMPTY
70845: LIST
70846: PUSH
70847: LD_INT 3
70849: PUSH
70850: LD_INT 60
70852: PUSH
70853: EMPTY
70854: LIST
70855: PUSH
70856: EMPTY
70857: LIST
70858: LIST
70859: PUSH
70860: EMPTY
70861: LIST
70862: LIST
70863: LIST
70864: PPUSH
70865: CALL_OW 72
70869: PUSH
70870: LD_EXP 56
70874: PUSH
70875: LD_VAR 0 2
70879: ARRAY
70880: DIFF
70881: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
70882: LD_ADDR_VAR 0 9
70886: PUSH
70887: LD_EXP 52
70891: PUSH
70892: LD_VAR 0 2
70896: ARRAY
70897: PPUSH
70898: LD_INT 2
70900: PUSH
70901: LD_INT 30
70903: PUSH
70904: LD_INT 0
70906: PUSH
70907: EMPTY
70908: LIST
70909: LIST
70910: PUSH
70911: LD_INT 30
70913: PUSH
70914: LD_INT 1
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: PUSH
70921: EMPTY
70922: LIST
70923: LIST
70924: LIST
70925: PPUSH
70926: CALL_OW 72
70930: ST_TO_ADDR
// if not tmp or not dep then
70931: LD_VAR 0 8
70935: NOT
70936: PUSH
70937: LD_VAR 0 9
70941: NOT
70942: OR
70943: IFFALSE 70947
// continue ;
70945: GO 70732
// side := GetSide ( tmp [ 1 ] ) ;
70947: LD_ADDR_VAR 0 11
70951: PUSH
70952: LD_VAR 0 8
70956: PUSH
70957: LD_INT 1
70959: ARRAY
70960: PPUSH
70961: CALL_OW 255
70965: ST_TO_ADDR
// dep := dep [ 1 ] ;
70966: LD_ADDR_VAR 0 9
70970: PUSH
70971: LD_VAR 0 9
70975: PUSH
70976: LD_INT 1
70978: ARRAY
70979: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
70980: LD_ADDR_VAR 0 7
70984: PUSH
70985: LD_EXP 80
70989: PUSH
70990: LD_VAR 0 2
70994: ARRAY
70995: PPUSH
70996: LD_INT 22
70998: PUSH
70999: LD_INT 0
71001: PUSH
71002: EMPTY
71003: LIST
71004: LIST
71005: PUSH
71006: LD_INT 25
71008: PUSH
71009: LD_INT 12
71011: PUSH
71012: EMPTY
71013: LIST
71014: LIST
71015: PUSH
71016: EMPTY
71017: LIST
71018: LIST
71019: PPUSH
71020: CALL_OW 70
71024: PUSH
71025: LD_INT 22
71027: PUSH
71028: LD_INT 0
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: PUSH
71035: LD_INT 25
71037: PUSH
71038: LD_INT 12
71040: PUSH
71041: EMPTY
71042: LIST
71043: LIST
71044: PUSH
71045: LD_INT 91
71047: PUSH
71048: LD_VAR 0 9
71052: PUSH
71053: LD_INT 20
71055: PUSH
71056: EMPTY
71057: LIST
71058: LIST
71059: LIST
71060: PUSH
71061: EMPTY
71062: LIST
71063: LIST
71064: LIST
71065: PPUSH
71066: CALL_OW 69
71070: UNION
71071: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
71072: LD_ADDR_VAR 0 10
71076: PUSH
71077: LD_EXP 80
71081: PUSH
71082: LD_VAR 0 2
71086: ARRAY
71087: PPUSH
71088: LD_INT 81
71090: PUSH
71091: LD_VAR 0 11
71095: PUSH
71096: EMPTY
71097: LIST
71098: LIST
71099: PPUSH
71100: CALL_OW 70
71104: ST_TO_ADDR
// if not apes or danger_at_area then
71105: LD_VAR 0 7
71109: NOT
71110: PUSH
71111: LD_VAR 0 10
71115: OR
71116: IFFALSE 71166
// begin if mc_taming [ i ] then
71118: LD_EXP 83
71122: PUSH
71123: LD_VAR 0 2
71127: ARRAY
71128: IFFALSE 71164
// begin MC_Reset ( i , 121 ) ;
71130: LD_VAR 0 2
71134: PPUSH
71135: LD_INT 121
71137: PPUSH
71138: CALL 56859 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
71142: LD_ADDR_EXP 83
71146: PUSH
71147: LD_EXP 83
71151: PPUSH
71152: LD_VAR 0 2
71156: PPUSH
71157: EMPTY
71158: PPUSH
71159: CALL_OW 1
71163: ST_TO_ADDR
// end ; continue ;
71164: GO 70732
// end ; for j in tmp do
71166: LD_ADDR_VAR 0 3
71170: PUSH
71171: LD_VAR 0 8
71175: PUSH
71176: FOR_IN
71177: IFFALSE 71513
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
71179: LD_VAR 0 3
71183: PUSH
71184: LD_EXP 83
71188: PUSH
71189: LD_VAR 0 2
71193: ARRAY
71194: IN
71195: NOT
71196: PUSH
71197: LD_EXP 83
71201: PUSH
71202: LD_VAR 0 2
71206: ARRAY
71207: PUSH
71208: LD_INT 3
71210: LESS
71211: AND
71212: IFFALSE 71270
// begin SetTag ( j , 121 ) ;
71214: LD_VAR 0 3
71218: PPUSH
71219: LD_INT 121
71221: PPUSH
71222: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
71226: LD_ADDR_EXP 83
71230: PUSH
71231: LD_EXP 83
71235: PPUSH
71236: LD_VAR 0 2
71240: PUSH
71241: LD_EXP 83
71245: PUSH
71246: LD_VAR 0 2
71250: ARRAY
71251: PUSH
71252: LD_INT 1
71254: PLUS
71255: PUSH
71256: EMPTY
71257: LIST
71258: LIST
71259: PPUSH
71260: LD_VAR 0 3
71264: PPUSH
71265: CALL 16921 0 3
71269: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
71270: LD_VAR 0 3
71274: PUSH
71275: LD_EXP 83
71279: PUSH
71280: LD_VAR 0 2
71284: ARRAY
71285: IN
71286: IFFALSE 71511
// begin if GetClass ( j ) <> 4 then
71288: LD_VAR 0 3
71292: PPUSH
71293: CALL_OW 257
71297: PUSH
71298: LD_INT 4
71300: NONEQUAL
71301: IFFALSE 71354
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
71303: LD_ADDR_EXP 83
71307: PUSH
71308: LD_EXP 83
71312: PPUSH
71313: LD_VAR 0 2
71317: PPUSH
71318: LD_EXP 83
71322: PUSH
71323: LD_VAR 0 2
71327: ARRAY
71328: PUSH
71329: LD_VAR 0 3
71333: DIFF
71334: PPUSH
71335: CALL_OW 1
71339: ST_TO_ADDR
// SetTag ( j , 0 ) ;
71340: LD_VAR 0 3
71344: PPUSH
71345: LD_INT 0
71347: PPUSH
71348: CALL_OW 109
// continue ;
71352: GO 71176
// end ; if IsInUnit ( j ) then
71354: LD_VAR 0 3
71358: PPUSH
71359: CALL_OW 310
71363: IFFALSE 71374
// ComExitBuilding ( j ) ;
71365: LD_VAR 0 3
71369: PPUSH
71370: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
71374: LD_ADDR_VAR 0 6
71378: PUSH
71379: LD_VAR 0 7
71383: PPUSH
71384: LD_VAR 0 3
71388: PPUSH
71389: CALL_OW 74
71393: ST_TO_ADDR
// if not ape then
71394: LD_VAR 0 6
71398: NOT
71399: IFFALSE 71403
// break ;
71401: GO 71513
// x := GetX ( ape ) ;
71403: LD_ADDR_VAR 0 4
71407: PUSH
71408: LD_VAR 0 6
71412: PPUSH
71413: CALL_OW 250
71417: ST_TO_ADDR
// y := GetY ( ape ) ;
71418: LD_ADDR_VAR 0 5
71422: PUSH
71423: LD_VAR 0 6
71427: PPUSH
71428: CALL_OW 251
71432: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
71433: LD_VAR 0 4
71437: PPUSH
71438: LD_VAR 0 5
71442: PPUSH
71443: CALL_OW 488
71447: NOT
71448: PUSH
71449: LD_VAR 0 11
71453: PPUSH
71454: LD_VAR 0 4
71458: PPUSH
71459: LD_VAR 0 5
71463: PPUSH
71464: LD_INT 20
71466: PPUSH
71467: CALL 17817 0 4
71471: PUSH
71472: LD_INT 4
71474: ARRAY
71475: OR
71476: IFFALSE 71480
// break ;
71478: GO 71513
// if not HasTask ( j ) then
71480: LD_VAR 0 3
71484: PPUSH
71485: CALL_OW 314
71489: NOT
71490: IFFALSE 71511
// ComTameXY ( j , x , y ) ;
71492: LD_VAR 0 3
71496: PPUSH
71497: LD_VAR 0 4
71501: PPUSH
71502: LD_VAR 0 5
71506: PPUSH
71507: CALL_OW 131
// end ; end ;
71511: GO 71176
71513: POP
71514: POP
// end ;
71515: GO 70732
71517: POP
71518: POP
// end ;
71519: LD_VAR 0 1
71523: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
71524: LD_INT 0
71526: PPUSH
71527: PPUSH
71528: PPUSH
71529: PPUSH
71530: PPUSH
71531: PPUSH
71532: PPUSH
71533: PPUSH
// if not mc_bases then
71534: LD_EXP 52
71538: NOT
71539: IFFALSE 71543
// exit ;
71541: GO 72169
// for i = 1 to mc_bases do
71543: LD_ADDR_VAR 0 2
71547: PUSH
71548: DOUBLE
71549: LD_INT 1
71551: DEC
71552: ST_TO_ADDR
71553: LD_EXP 52
71557: PUSH
71558: FOR_TO
71559: IFFALSE 72167
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
71561: LD_EXP 81
71565: PUSH
71566: LD_VAR 0 2
71570: ARRAY
71571: NOT
71572: PUSH
71573: LD_EXP 81
71577: PUSH
71578: LD_VAR 0 2
71582: ARRAY
71583: PPUSH
71584: LD_INT 25
71586: PUSH
71587: LD_INT 12
71589: PUSH
71590: EMPTY
71591: LIST
71592: LIST
71593: PPUSH
71594: CALL_OW 72
71598: NOT
71599: OR
71600: IFFALSE 71604
// continue ;
71602: GO 71558
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
71604: LD_ADDR_VAR 0 5
71608: PUSH
71609: LD_EXP 81
71613: PUSH
71614: LD_VAR 0 2
71618: ARRAY
71619: PUSH
71620: LD_INT 1
71622: ARRAY
71623: PPUSH
71624: CALL_OW 255
71628: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
71629: LD_VAR 0 5
71633: PPUSH
71634: LD_INT 2
71636: PPUSH
71637: CALL_OW 325
71641: IFFALSE 71894
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
71643: LD_ADDR_VAR 0 4
71647: PUSH
71648: LD_EXP 81
71652: PUSH
71653: LD_VAR 0 2
71657: ARRAY
71658: PPUSH
71659: LD_INT 25
71661: PUSH
71662: LD_INT 16
71664: PUSH
71665: EMPTY
71666: LIST
71667: LIST
71668: PPUSH
71669: CALL_OW 72
71673: ST_TO_ADDR
// if tmp < 6 then
71674: LD_VAR 0 4
71678: PUSH
71679: LD_INT 6
71681: LESS
71682: IFFALSE 71894
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
71684: LD_ADDR_VAR 0 6
71688: PUSH
71689: LD_EXP 52
71693: PUSH
71694: LD_VAR 0 2
71698: ARRAY
71699: PPUSH
71700: LD_INT 2
71702: PUSH
71703: LD_INT 30
71705: PUSH
71706: LD_INT 0
71708: PUSH
71709: EMPTY
71710: LIST
71711: LIST
71712: PUSH
71713: LD_INT 30
71715: PUSH
71716: LD_INT 1
71718: PUSH
71719: EMPTY
71720: LIST
71721: LIST
71722: PUSH
71723: EMPTY
71724: LIST
71725: LIST
71726: LIST
71727: PPUSH
71728: CALL_OW 72
71732: ST_TO_ADDR
// if depot then
71733: LD_VAR 0 6
71737: IFFALSE 71894
// begin selected := 0 ;
71739: LD_ADDR_VAR 0 7
71743: PUSH
71744: LD_INT 0
71746: ST_TO_ADDR
// for j in depot do
71747: LD_ADDR_VAR 0 3
71751: PUSH
71752: LD_VAR 0 6
71756: PUSH
71757: FOR_IN
71758: IFFALSE 71789
// begin if UnitsInside ( j ) < 6 then
71760: LD_VAR 0 3
71764: PPUSH
71765: CALL_OW 313
71769: PUSH
71770: LD_INT 6
71772: LESS
71773: IFFALSE 71787
// begin selected := j ;
71775: LD_ADDR_VAR 0 7
71779: PUSH
71780: LD_VAR 0 3
71784: ST_TO_ADDR
// break ;
71785: GO 71789
// end ; end ;
71787: GO 71757
71789: POP
71790: POP
// if selected then
71791: LD_VAR 0 7
71795: IFFALSE 71894
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
71797: LD_ADDR_VAR 0 3
71801: PUSH
71802: LD_EXP 81
71806: PUSH
71807: LD_VAR 0 2
71811: ARRAY
71812: PPUSH
71813: LD_INT 25
71815: PUSH
71816: LD_INT 12
71818: PUSH
71819: EMPTY
71820: LIST
71821: LIST
71822: PPUSH
71823: CALL_OW 72
71827: PUSH
71828: FOR_IN
71829: IFFALSE 71892
// if not HasTask ( j ) then
71831: LD_VAR 0 3
71835: PPUSH
71836: CALL_OW 314
71840: NOT
71841: IFFALSE 71890
// begin if not IsInUnit ( j ) then
71843: LD_VAR 0 3
71847: PPUSH
71848: CALL_OW 310
71852: NOT
71853: IFFALSE 71869
// ComEnterUnit ( j , selected ) ;
71855: LD_VAR 0 3
71859: PPUSH
71860: LD_VAR 0 7
71864: PPUSH
71865: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
71869: LD_VAR 0 3
71873: PPUSH
71874: LD_INT 16
71876: PPUSH
71877: CALL_OW 183
// AddComExitBuilding ( j ) ;
71881: LD_VAR 0 3
71885: PPUSH
71886: CALL_OW 182
// end ;
71890: GO 71828
71892: POP
71893: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
71894: LD_VAR 0 5
71898: PPUSH
71899: LD_INT 11
71901: PPUSH
71902: CALL_OW 325
71906: IFFALSE 72165
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
71908: LD_ADDR_VAR 0 4
71912: PUSH
71913: LD_EXP 81
71917: PUSH
71918: LD_VAR 0 2
71922: ARRAY
71923: PPUSH
71924: LD_INT 25
71926: PUSH
71927: LD_INT 16
71929: PUSH
71930: EMPTY
71931: LIST
71932: LIST
71933: PPUSH
71934: CALL_OW 72
71938: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
71939: LD_VAR 0 4
71943: PUSH
71944: LD_INT 6
71946: GREATEREQUAL
71947: PUSH
71948: LD_VAR 0 5
71952: PPUSH
71953: LD_INT 2
71955: PPUSH
71956: CALL_OW 325
71960: NOT
71961: OR
71962: IFFALSE 72165
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
71964: LD_ADDR_VAR 0 8
71968: PUSH
71969: LD_EXP 52
71973: PUSH
71974: LD_VAR 0 2
71978: ARRAY
71979: PPUSH
71980: LD_INT 2
71982: PUSH
71983: LD_INT 30
71985: PUSH
71986: LD_INT 4
71988: PUSH
71989: EMPTY
71990: LIST
71991: LIST
71992: PUSH
71993: LD_INT 30
71995: PUSH
71996: LD_INT 5
71998: PUSH
71999: EMPTY
72000: LIST
72001: LIST
72002: PUSH
72003: EMPTY
72004: LIST
72005: LIST
72006: LIST
72007: PPUSH
72008: CALL_OW 72
72012: ST_TO_ADDR
// if barracks then
72013: LD_VAR 0 8
72017: IFFALSE 72165
// begin selected := 0 ;
72019: LD_ADDR_VAR 0 7
72023: PUSH
72024: LD_INT 0
72026: ST_TO_ADDR
// for j in barracks do
72027: LD_ADDR_VAR 0 3
72031: PUSH
72032: LD_VAR 0 8
72036: PUSH
72037: FOR_IN
72038: IFFALSE 72069
// begin if UnitsInside ( j ) < 6 then
72040: LD_VAR 0 3
72044: PPUSH
72045: CALL_OW 313
72049: PUSH
72050: LD_INT 6
72052: LESS
72053: IFFALSE 72067
// begin selected := j ;
72055: LD_ADDR_VAR 0 7
72059: PUSH
72060: LD_VAR 0 3
72064: ST_TO_ADDR
// break ;
72065: GO 72069
// end ; end ;
72067: GO 72037
72069: POP
72070: POP
// if selected then
72071: LD_VAR 0 7
72075: IFFALSE 72165
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
72077: LD_ADDR_VAR 0 3
72081: PUSH
72082: LD_EXP 81
72086: PUSH
72087: LD_VAR 0 2
72091: ARRAY
72092: PPUSH
72093: LD_INT 25
72095: PUSH
72096: LD_INT 12
72098: PUSH
72099: EMPTY
72100: LIST
72101: LIST
72102: PPUSH
72103: CALL_OW 72
72107: PUSH
72108: FOR_IN
72109: IFFALSE 72163
// if not IsInUnit ( j ) and not HasTask ( j ) then
72111: LD_VAR 0 3
72115: PPUSH
72116: CALL_OW 310
72120: NOT
72121: PUSH
72122: LD_VAR 0 3
72126: PPUSH
72127: CALL_OW 314
72131: NOT
72132: AND
72133: IFFALSE 72161
// begin ComEnterUnit ( j , selected ) ;
72135: LD_VAR 0 3
72139: PPUSH
72140: LD_VAR 0 7
72144: PPUSH
72145: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
72149: LD_VAR 0 3
72153: PPUSH
72154: LD_INT 15
72156: PPUSH
72157: CALL_OW 183
// end ;
72161: GO 72108
72163: POP
72164: POP
// end ; end ; end ; end ; end ;
72165: GO 71558
72167: POP
72168: POP
// end ;
72169: LD_VAR 0 1
72173: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
72174: LD_INT 0
72176: PPUSH
72177: PPUSH
72178: PPUSH
72179: PPUSH
// if not mc_bases then
72180: LD_EXP 52
72184: NOT
72185: IFFALSE 72189
// exit ;
72187: GO 72367
// for i = 1 to mc_bases do
72189: LD_ADDR_VAR 0 2
72193: PUSH
72194: DOUBLE
72195: LD_INT 1
72197: DEC
72198: ST_TO_ADDR
72199: LD_EXP 52
72203: PUSH
72204: FOR_TO
72205: IFFALSE 72365
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
72207: LD_ADDR_VAR 0 4
72211: PUSH
72212: LD_EXP 52
72216: PUSH
72217: LD_VAR 0 2
72221: ARRAY
72222: PPUSH
72223: LD_INT 25
72225: PUSH
72226: LD_INT 9
72228: PUSH
72229: EMPTY
72230: LIST
72231: LIST
72232: PPUSH
72233: CALL_OW 72
72237: ST_TO_ADDR
// if not tmp then
72238: LD_VAR 0 4
72242: NOT
72243: IFFALSE 72247
// continue ;
72245: GO 72204
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
72247: LD_EXP 78
72251: PUSH
72252: LD_VAR 0 2
72256: ARRAY
72257: PPUSH
72258: LD_INT 29
72260: PPUSH
72261: CALL_OW 325
72265: NOT
72266: PUSH
72267: LD_EXP 78
72271: PUSH
72272: LD_VAR 0 2
72276: ARRAY
72277: PPUSH
72278: LD_INT 28
72280: PPUSH
72281: CALL_OW 325
72285: NOT
72286: AND
72287: IFFALSE 72291
// continue ;
72289: GO 72204
// for j in tmp do
72291: LD_ADDR_VAR 0 3
72295: PUSH
72296: LD_VAR 0 4
72300: PUSH
72301: FOR_IN
72302: IFFALSE 72361
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
72304: LD_VAR 0 3
72308: PUSH
72309: LD_EXP 55
72313: PUSH
72314: LD_VAR 0 2
72318: ARRAY
72319: PUSH
72320: LD_INT 1
72322: ARRAY
72323: IN
72324: NOT
72325: PUSH
72326: LD_VAR 0 3
72330: PUSH
72331: LD_EXP 55
72335: PUSH
72336: LD_VAR 0 2
72340: ARRAY
72341: PUSH
72342: LD_INT 2
72344: ARRAY
72345: IN
72346: NOT
72347: AND
72348: IFFALSE 72359
// ComSpaceTimeShoot ( j ) ;
72350: LD_VAR 0 3
72354: PPUSH
72355: CALL 11011 0 1
72359: GO 72301
72361: POP
72362: POP
// end ;
72363: GO 72204
72365: POP
72366: POP
// end ;
72367: LD_VAR 0 1
72371: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
72372: LD_INT 0
72374: PPUSH
72375: PPUSH
72376: PPUSH
72377: PPUSH
72378: PPUSH
72379: PPUSH
72380: PPUSH
72381: PPUSH
72382: PPUSH
// if not mc_bases then
72383: LD_EXP 52
72387: NOT
72388: IFFALSE 72392
// exit ;
72390: GO 73014
// for i = 1 to mc_bases do
72392: LD_ADDR_VAR 0 2
72396: PUSH
72397: DOUBLE
72398: LD_INT 1
72400: DEC
72401: ST_TO_ADDR
72402: LD_EXP 52
72406: PUSH
72407: FOR_TO
72408: IFFALSE 73012
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
72410: LD_EXP 87
72414: PUSH
72415: LD_VAR 0 2
72419: ARRAY
72420: NOT
72421: PUSH
72422: LD_INT 38
72424: PPUSH
72425: LD_EXP 78
72429: PUSH
72430: LD_VAR 0 2
72434: ARRAY
72435: PPUSH
72436: CALL_OW 321
72440: PUSH
72441: LD_INT 2
72443: NONEQUAL
72444: OR
72445: IFFALSE 72449
// continue ;
72447: GO 72407
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
72449: LD_ADDR_VAR 0 8
72453: PUSH
72454: LD_EXP 52
72458: PUSH
72459: LD_VAR 0 2
72463: ARRAY
72464: PPUSH
72465: LD_INT 30
72467: PUSH
72468: LD_INT 34
72470: PUSH
72471: EMPTY
72472: LIST
72473: LIST
72474: PPUSH
72475: CALL_OW 72
72479: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
72480: LD_ADDR_VAR 0 9
72484: PUSH
72485: LD_EXP 52
72489: PUSH
72490: LD_VAR 0 2
72494: ARRAY
72495: PPUSH
72496: LD_INT 25
72498: PUSH
72499: LD_INT 4
72501: PUSH
72502: EMPTY
72503: LIST
72504: LIST
72505: PPUSH
72506: CALL_OW 72
72510: PPUSH
72511: LD_INT 0
72513: PPUSH
72514: CALL 50157 0 2
72518: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
72519: LD_VAR 0 9
72523: NOT
72524: PUSH
72525: LD_VAR 0 8
72529: NOT
72530: OR
72531: PUSH
72532: LD_EXP 52
72536: PUSH
72537: LD_VAR 0 2
72541: ARRAY
72542: PPUSH
72543: LD_INT 124
72545: PPUSH
72546: CALL 50157 0 2
72550: OR
72551: IFFALSE 72555
// continue ;
72553: GO 72407
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
72555: LD_EXP 88
72559: PUSH
72560: LD_VAR 0 2
72564: ARRAY
72565: PUSH
72566: LD_EXP 87
72570: PUSH
72571: LD_VAR 0 2
72575: ARRAY
72576: LESS
72577: PUSH
72578: LD_EXP 88
72582: PUSH
72583: LD_VAR 0 2
72587: ARRAY
72588: PUSH
72589: LD_VAR 0 8
72593: LESS
72594: AND
72595: IFFALSE 73010
// begin tmp := sci [ 1 ] ;
72597: LD_ADDR_VAR 0 7
72601: PUSH
72602: LD_VAR 0 9
72606: PUSH
72607: LD_INT 1
72609: ARRAY
72610: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
72611: LD_VAR 0 7
72615: PPUSH
72616: LD_INT 124
72618: PPUSH
72619: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
72623: LD_ADDR_VAR 0 3
72627: PUSH
72628: DOUBLE
72629: LD_EXP 87
72633: PUSH
72634: LD_VAR 0 2
72638: ARRAY
72639: INC
72640: ST_TO_ADDR
72641: LD_EXP 87
72645: PUSH
72646: LD_VAR 0 2
72650: ARRAY
72651: PUSH
72652: FOR_DOWNTO
72653: IFFALSE 72996
// begin if IsInUnit ( tmp ) then
72655: LD_VAR 0 7
72659: PPUSH
72660: CALL_OW 310
72664: IFFALSE 72675
// ComExitBuilding ( tmp ) ;
72666: LD_VAR 0 7
72670: PPUSH
72671: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
72675: LD_INT 35
72677: PPUSH
72678: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
72682: LD_VAR 0 7
72686: PPUSH
72687: CALL_OW 310
72691: NOT
72692: PUSH
72693: LD_VAR 0 7
72697: PPUSH
72698: CALL_OW 314
72702: NOT
72703: AND
72704: IFFALSE 72675
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
72706: LD_ADDR_VAR 0 6
72710: PUSH
72711: LD_VAR 0 7
72715: PPUSH
72716: CALL_OW 250
72720: PUSH
72721: LD_VAR 0 7
72725: PPUSH
72726: CALL_OW 251
72730: PUSH
72731: EMPTY
72732: LIST
72733: LIST
72734: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
72735: LD_INT 35
72737: PPUSH
72738: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
72742: LD_ADDR_VAR 0 4
72746: PUSH
72747: LD_EXP 87
72751: PUSH
72752: LD_VAR 0 2
72756: ARRAY
72757: PUSH
72758: LD_VAR 0 3
72762: ARRAY
72763: PUSH
72764: LD_INT 1
72766: ARRAY
72767: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
72768: LD_ADDR_VAR 0 5
72772: PUSH
72773: LD_EXP 87
72777: PUSH
72778: LD_VAR 0 2
72782: ARRAY
72783: PUSH
72784: LD_VAR 0 3
72788: ARRAY
72789: PUSH
72790: LD_INT 2
72792: ARRAY
72793: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
72794: LD_VAR 0 7
72798: PPUSH
72799: LD_INT 10
72801: PPUSH
72802: CALL 19514 0 2
72806: PUSH
72807: LD_INT 4
72809: ARRAY
72810: IFFALSE 72848
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
72812: LD_VAR 0 7
72816: PPUSH
72817: LD_VAR 0 6
72821: PUSH
72822: LD_INT 1
72824: ARRAY
72825: PPUSH
72826: LD_VAR 0 6
72830: PUSH
72831: LD_INT 2
72833: ARRAY
72834: PPUSH
72835: CALL_OW 111
// wait ( 0 0$10 ) ;
72839: LD_INT 350
72841: PPUSH
72842: CALL_OW 67
// end else
72846: GO 72874
// begin ComMoveXY ( tmp , x , y ) ;
72848: LD_VAR 0 7
72852: PPUSH
72853: LD_VAR 0 4
72857: PPUSH
72858: LD_VAR 0 5
72862: PPUSH
72863: CALL_OW 111
// wait ( 0 0$3 ) ;
72867: LD_INT 105
72869: PPUSH
72870: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
72874: LD_VAR 0 7
72878: PPUSH
72879: LD_VAR 0 4
72883: PPUSH
72884: LD_VAR 0 5
72888: PPUSH
72889: CALL_OW 307
72893: IFFALSE 72735
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
72895: LD_VAR 0 7
72899: PPUSH
72900: LD_VAR 0 4
72904: PPUSH
72905: LD_VAR 0 5
72909: PPUSH
72910: LD_VAR 0 8
72914: PUSH
72915: LD_VAR 0 3
72919: ARRAY
72920: PPUSH
72921: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
72925: LD_INT 35
72927: PPUSH
72928: CALL_OW 67
// until not HasTask ( tmp ) ;
72932: LD_VAR 0 7
72936: PPUSH
72937: CALL_OW 314
72941: NOT
72942: IFFALSE 72925
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
72944: LD_ADDR_EXP 88
72948: PUSH
72949: LD_EXP 88
72953: PPUSH
72954: LD_VAR 0 2
72958: PUSH
72959: LD_EXP 88
72963: PUSH
72964: LD_VAR 0 2
72968: ARRAY
72969: PUSH
72970: LD_INT 1
72972: PLUS
72973: PUSH
72974: EMPTY
72975: LIST
72976: LIST
72977: PPUSH
72978: LD_VAR 0 8
72982: PUSH
72983: LD_VAR 0 3
72987: ARRAY
72988: PPUSH
72989: CALL 16921 0 3
72993: ST_TO_ADDR
// end ;
72994: GO 72652
72996: POP
72997: POP
// MC_Reset ( i , 124 ) ;
72998: LD_VAR 0 2
73002: PPUSH
73003: LD_INT 124
73005: PPUSH
73006: CALL 56859 0 2
// end ; end ;
73010: GO 72407
73012: POP
73013: POP
// end ;
73014: LD_VAR 0 1
73018: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
73019: LD_INT 0
73021: PPUSH
73022: PPUSH
73023: PPUSH
// if not mc_bases then
73024: LD_EXP 52
73028: NOT
73029: IFFALSE 73033
// exit ;
73031: GO 73639
// for i = 1 to mc_bases do
73033: LD_ADDR_VAR 0 2
73037: PUSH
73038: DOUBLE
73039: LD_INT 1
73041: DEC
73042: ST_TO_ADDR
73043: LD_EXP 52
73047: PUSH
73048: FOR_TO
73049: IFFALSE 73637
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
73051: LD_ADDR_VAR 0 3
73055: PUSH
73056: LD_EXP 52
73060: PUSH
73061: LD_VAR 0 2
73065: ARRAY
73066: PPUSH
73067: LD_INT 25
73069: PUSH
73070: LD_INT 4
73072: PUSH
73073: EMPTY
73074: LIST
73075: LIST
73076: PPUSH
73077: CALL_OW 72
73081: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
73082: LD_VAR 0 3
73086: NOT
73087: PUSH
73088: LD_EXP 89
73092: PUSH
73093: LD_VAR 0 2
73097: ARRAY
73098: NOT
73099: OR
73100: PUSH
73101: LD_EXP 52
73105: PUSH
73106: LD_VAR 0 2
73110: ARRAY
73111: PPUSH
73112: LD_INT 2
73114: PUSH
73115: LD_INT 30
73117: PUSH
73118: LD_INT 0
73120: PUSH
73121: EMPTY
73122: LIST
73123: LIST
73124: PUSH
73125: LD_INT 30
73127: PUSH
73128: LD_INT 1
73130: PUSH
73131: EMPTY
73132: LIST
73133: LIST
73134: PUSH
73135: EMPTY
73136: LIST
73137: LIST
73138: LIST
73139: PPUSH
73140: CALL_OW 72
73144: NOT
73145: OR
73146: IFFALSE 73196
// begin if mc_deposits_finder [ i ] then
73148: LD_EXP 90
73152: PUSH
73153: LD_VAR 0 2
73157: ARRAY
73158: IFFALSE 73194
// begin MC_Reset ( i , 125 ) ;
73160: LD_VAR 0 2
73164: PPUSH
73165: LD_INT 125
73167: PPUSH
73168: CALL 56859 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
73172: LD_ADDR_EXP 90
73176: PUSH
73177: LD_EXP 90
73181: PPUSH
73182: LD_VAR 0 2
73186: PPUSH
73187: EMPTY
73188: PPUSH
73189: CALL_OW 1
73193: ST_TO_ADDR
// end ; continue ;
73194: GO 73048
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
73196: LD_EXP 89
73200: PUSH
73201: LD_VAR 0 2
73205: ARRAY
73206: PUSH
73207: LD_INT 1
73209: ARRAY
73210: PUSH
73211: LD_INT 3
73213: ARRAY
73214: PUSH
73215: LD_INT 1
73217: EQUAL
73218: PUSH
73219: LD_INT 20
73221: PPUSH
73222: LD_EXP 78
73226: PUSH
73227: LD_VAR 0 2
73231: ARRAY
73232: PPUSH
73233: CALL_OW 321
73237: PUSH
73238: LD_INT 2
73240: NONEQUAL
73241: AND
73242: IFFALSE 73292
// begin if mc_deposits_finder [ i ] then
73244: LD_EXP 90
73248: PUSH
73249: LD_VAR 0 2
73253: ARRAY
73254: IFFALSE 73290
// begin MC_Reset ( i , 125 ) ;
73256: LD_VAR 0 2
73260: PPUSH
73261: LD_INT 125
73263: PPUSH
73264: CALL 56859 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
73268: LD_ADDR_EXP 90
73272: PUSH
73273: LD_EXP 90
73277: PPUSH
73278: LD_VAR 0 2
73282: PPUSH
73283: EMPTY
73284: PPUSH
73285: CALL_OW 1
73289: ST_TO_ADDR
// end ; continue ;
73290: GO 73048
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
73292: LD_EXP 89
73296: PUSH
73297: LD_VAR 0 2
73301: ARRAY
73302: PUSH
73303: LD_INT 1
73305: ARRAY
73306: PUSH
73307: LD_INT 1
73309: ARRAY
73310: PPUSH
73311: LD_EXP 89
73315: PUSH
73316: LD_VAR 0 2
73320: ARRAY
73321: PUSH
73322: LD_INT 1
73324: ARRAY
73325: PUSH
73326: LD_INT 2
73328: ARRAY
73329: PPUSH
73330: LD_EXP 78
73334: PUSH
73335: LD_VAR 0 2
73339: ARRAY
73340: PPUSH
73341: CALL_OW 440
73345: IFFALSE 73388
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
73347: LD_ADDR_EXP 89
73351: PUSH
73352: LD_EXP 89
73356: PPUSH
73357: LD_VAR 0 2
73361: PPUSH
73362: LD_EXP 89
73366: PUSH
73367: LD_VAR 0 2
73371: ARRAY
73372: PPUSH
73373: LD_INT 1
73375: PPUSH
73376: CALL_OW 3
73380: PPUSH
73381: CALL_OW 1
73385: ST_TO_ADDR
73386: GO 73635
// begin if not mc_deposits_finder [ i ] then
73388: LD_EXP 90
73392: PUSH
73393: LD_VAR 0 2
73397: ARRAY
73398: NOT
73399: IFFALSE 73451
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
73401: LD_ADDR_EXP 90
73405: PUSH
73406: LD_EXP 90
73410: PPUSH
73411: LD_VAR 0 2
73415: PPUSH
73416: LD_VAR 0 3
73420: PUSH
73421: LD_INT 1
73423: ARRAY
73424: PUSH
73425: EMPTY
73426: LIST
73427: PPUSH
73428: CALL_OW 1
73432: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
73433: LD_VAR 0 3
73437: PUSH
73438: LD_INT 1
73440: ARRAY
73441: PPUSH
73442: LD_INT 125
73444: PPUSH
73445: CALL_OW 109
// end else
73449: GO 73635
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
73451: LD_EXP 90
73455: PUSH
73456: LD_VAR 0 2
73460: ARRAY
73461: PUSH
73462: LD_INT 1
73464: ARRAY
73465: PPUSH
73466: CALL_OW 310
73470: IFFALSE 73493
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
73472: LD_EXP 90
73476: PUSH
73477: LD_VAR 0 2
73481: ARRAY
73482: PUSH
73483: LD_INT 1
73485: ARRAY
73486: PPUSH
73487: CALL_OW 122
73491: GO 73635
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
73493: LD_EXP 90
73497: PUSH
73498: LD_VAR 0 2
73502: ARRAY
73503: PUSH
73504: LD_INT 1
73506: ARRAY
73507: PPUSH
73508: CALL_OW 314
73512: NOT
73513: PUSH
73514: LD_EXP 90
73518: PUSH
73519: LD_VAR 0 2
73523: ARRAY
73524: PUSH
73525: LD_INT 1
73527: ARRAY
73528: PPUSH
73529: LD_EXP 89
73533: PUSH
73534: LD_VAR 0 2
73538: ARRAY
73539: PUSH
73540: LD_INT 1
73542: ARRAY
73543: PUSH
73544: LD_INT 1
73546: ARRAY
73547: PPUSH
73548: LD_EXP 89
73552: PUSH
73553: LD_VAR 0 2
73557: ARRAY
73558: PUSH
73559: LD_INT 1
73561: ARRAY
73562: PUSH
73563: LD_INT 2
73565: ARRAY
73566: PPUSH
73567: CALL_OW 297
73571: PUSH
73572: LD_INT 6
73574: GREATER
73575: AND
73576: IFFALSE 73635
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
73578: LD_EXP 90
73582: PUSH
73583: LD_VAR 0 2
73587: ARRAY
73588: PUSH
73589: LD_INT 1
73591: ARRAY
73592: PPUSH
73593: LD_EXP 89
73597: PUSH
73598: LD_VAR 0 2
73602: ARRAY
73603: PUSH
73604: LD_INT 1
73606: ARRAY
73607: PUSH
73608: LD_INT 1
73610: ARRAY
73611: PPUSH
73612: LD_EXP 89
73616: PUSH
73617: LD_VAR 0 2
73621: ARRAY
73622: PUSH
73623: LD_INT 1
73625: ARRAY
73626: PUSH
73627: LD_INT 2
73629: ARRAY
73630: PPUSH
73631: CALL_OW 111
// end ; end ; end ;
73635: GO 73048
73637: POP
73638: POP
// end ;
73639: LD_VAR 0 1
73643: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
73644: LD_INT 0
73646: PPUSH
73647: PPUSH
73648: PPUSH
73649: PPUSH
73650: PPUSH
73651: PPUSH
73652: PPUSH
73653: PPUSH
73654: PPUSH
73655: PPUSH
73656: PPUSH
// if not mc_bases then
73657: LD_EXP 52
73661: NOT
73662: IFFALSE 73666
// exit ;
73664: GO 74390
// for i = 1 to mc_bases do
73666: LD_ADDR_VAR 0 2
73670: PUSH
73671: DOUBLE
73672: LD_INT 1
73674: DEC
73675: ST_TO_ADDR
73676: LD_EXP 52
73680: PUSH
73681: FOR_TO
73682: IFFALSE 74388
// begin if not mc_bases [ i ] then
73684: LD_EXP 52
73688: PUSH
73689: LD_VAR 0 2
73693: ARRAY
73694: NOT
73695: IFFALSE 73699
// continue ;
73697: GO 73681
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
73699: LD_ADDR_VAR 0 7
73703: PUSH
73704: LD_EXP 52
73708: PUSH
73709: LD_VAR 0 2
73713: ARRAY
73714: PUSH
73715: LD_INT 1
73717: ARRAY
73718: PPUSH
73719: CALL_OW 248
73723: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
73724: LD_VAR 0 7
73728: PUSH
73729: LD_INT 3
73731: EQUAL
73732: PUSH
73733: LD_EXP 71
73737: PUSH
73738: LD_VAR 0 2
73742: ARRAY
73743: PUSH
73744: LD_EXP 74
73748: PUSH
73749: LD_VAR 0 2
73753: ARRAY
73754: UNION
73755: PPUSH
73756: LD_INT 33
73758: PUSH
73759: LD_INT 2
73761: PUSH
73762: EMPTY
73763: LIST
73764: LIST
73765: PPUSH
73766: CALL_OW 72
73770: NOT
73771: OR
73772: IFFALSE 73776
// continue ;
73774: GO 73681
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
73776: LD_ADDR_VAR 0 9
73780: PUSH
73781: LD_EXP 52
73785: PUSH
73786: LD_VAR 0 2
73790: ARRAY
73791: PPUSH
73792: LD_INT 30
73794: PUSH
73795: LD_INT 36
73797: PUSH
73798: EMPTY
73799: LIST
73800: LIST
73801: PPUSH
73802: CALL_OW 72
73806: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
73807: LD_ADDR_VAR 0 10
73811: PUSH
73812: LD_EXP 71
73816: PUSH
73817: LD_VAR 0 2
73821: ARRAY
73822: PPUSH
73823: LD_INT 34
73825: PUSH
73826: LD_INT 31
73828: PUSH
73829: EMPTY
73830: LIST
73831: LIST
73832: PPUSH
73833: CALL_OW 72
73837: ST_TO_ADDR
// if not cts and not mcts then
73838: LD_VAR 0 9
73842: NOT
73843: PUSH
73844: LD_VAR 0 10
73848: NOT
73849: AND
73850: IFFALSE 73854
// continue ;
73852: GO 73681
// x := cts ;
73854: LD_ADDR_VAR 0 11
73858: PUSH
73859: LD_VAR 0 9
73863: ST_TO_ADDR
// if not x then
73864: LD_VAR 0 11
73868: NOT
73869: IFFALSE 73881
// x := mcts ;
73871: LD_ADDR_VAR 0 11
73875: PUSH
73876: LD_VAR 0 10
73880: ST_TO_ADDR
// if mc_remote_driver [ i ] then
73881: LD_EXP 92
73885: PUSH
73886: LD_VAR 0 2
73890: ARRAY
73891: IFFALSE 74160
// for j in mc_remote_driver [ i ] do
73893: LD_ADDR_VAR 0 3
73897: PUSH
73898: LD_EXP 92
73902: PUSH
73903: LD_VAR 0 2
73907: ARRAY
73908: PUSH
73909: FOR_IN
73910: IFFALSE 74158
// begin if GetClass ( j ) <> 3 then
73912: LD_VAR 0 3
73916: PPUSH
73917: CALL_OW 257
73921: PUSH
73922: LD_INT 3
73924: NONEQUAL
73925: IFFALSE 73978
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
73927: LD_ADDR_EXP 92
73931: PUSH
73932: LD_EXP 92
73936: PPUSH
73937: LD_VAR 0 2
73941: PPUSH
73942: LD_EXP 92
73946: PUSH
73947: LD_VAR 0 2
73951: ARRAY
73952: PUSH
73953: LD_VAR 0 3
73957: DIFF
73958: PPUSH
73959: CALL_OW 1
73963: ST_TO_ADDR
// SetTag ( j , 0 ) ;
73964: LD_VAR 0 3
73968: PPUSH
73969: LD_INT 0
73971: PPUSH
73972: CALL_OW 109
// continue ;
73976: GO 73909
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
73978: LD_VAR 0 3
73982: PPUSH
73983: CALL_OW 310
73987: NOT
73988: PUSH
73989: LD_VAR 0 3
73993: PPUSH
73994: CALL_OW 310
73998: PPUSH
73999: CALL_OW 266
74003: PUSH
74004: LD_INT 36
74006: NONEQUAL
74007: PUSH
74008: LD_VAR 0 3
74012: PPUSH
74013: CALL 50245 0 1
74017: NOT
74018: AND
74019: OR
74020: IFFALSE 74156
// begin if IsInUnit ( j ) then
74022: LD_VAR 0 3
74026: PPUSH
74027: CALL_OW 310
74031: IFFALSE 74042
// ComExitBuilding ( j ) ;
74033: LD_VAR 0 3
74037: PPUSH
74038: CALL_OW 122
// ct := 0 ;
74042: LD_ADDR_VAR 0 8
74046: PUSH
74047: LD_INT 0
74049: ST_TO_ADDR
// for k in x do
74050: LD_ADDR_VAR 0 4
74054: PUSH
74055: LD_VAR 0 11
74059: PUSH
74060: FOR_IN
74061: IFFALSE 74134
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
74063: LD_VAR 0 4
74067: PPUSH
74068: CALL_OW 264
74072: PUSH
74073: LD_INT 31
74075: EQUAL
74076: PUSH
74077: LD_VAR 0 4
74081: PPUSH
74082: CALL_OW 311
74086: NOT
74087: AND
74088: PUSH
74089: LD_VAR 0 4
74093: PPUSH
74094: CALL_OW 266
74098: PUSH
74099: LD_INT 36
74101: EQUAL
74102: PUSH
74103: LD_VAR 0 4
74107: PPUSH
74108: CALL_OW 313
74112: PUSH
74113: LD_INT 3
74115: LESS
74116: AND
74117: OR
74118: IFFALSE 74132
// begin ct := k ;
74120: LD_ADDR_VAR 0 8
74124: PUSH
74125: LD_VAR 0 4
74129: ST_TO_ADDR
// break ;
74130: GO 74134
// end ;
74132: GO 74060
74134: POP
74135: POP
// if ct then
74136: LD_VAR 0 8
74140: IFFALSE 74156
// ComEnterUnit ( j , ct ) ;
74142: LD_VAR 0 3
74146: PPUSH
74147: LD_VAR 0 8
74151: PPUSH
74152: CALL_OW 120
// end ; end ;
74156: GO 73909
74158: POP
74159: POP
// places := 0 ;
74160: LD_ADDR_VAR 0 5
74164: PUSH
74165: LD_INT 0
74167: ST_TO_ADDR
// for j = 1 to x do
74168: LD_ADDR_VAR 0 3
74172: PUSH
74173: DOUBLE
74174: LD_INT 1
74176: DEC
74177: ST_TO_ADDR
74178: LD_VAR 0 11
74182: PUSH
74183: FOR_TO
74184: IFFALSE 74239
// if GetWeapon ( x [ j ] ) = ar_control_tower then
74186: LD_VAR 0 11
74190: PUSH
74191: LD_VAR 0 3
74195: ARRAY
74196: PPUSH
74197: CALL_OW 264
74201: PUSH
74202: LD_INT 31
74204: EQUAL
74205: IFFALSE 74223
// places := places + 1 else
74207: LD_ADDR_VAR 0 5
74211: PUSH
74212: LD_VAR 0 5
74216: PUSH
74217: LD_INT 1
74219: PLUS
74220: ST_TO_ADDR
74221: GO 74237
// places := places + 3 ;
74223: LD_ADDR_VAR 0 5
74227: PUSH
74228: LD_VAR 0 5
74232: PUSH
74233: LD_INT 3
74235: PLUS
74236: ST_TO_ADDR
74237: GO 74183
74239: POP
74240: POP
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
74241: LD_ADDR_VAR 0 6
74245: PUSH
74246: LD_EXP 52
74250: PUSH
74251: LD_VAR 0 2
74255: ARRAY
74256: PPUSH
74257: LD_INT 25
74259: PUSH
74260: LD_INT 3
74262: PUSH
74263: EMPTY
74264: LIST
74265: LIST
74266: PPUSH
74267: CALL_OW 72
74271: PUSH
74272: LD_EXP 92
74276: PUSH
74277: LD_VAR 0 2
74281: ARRAY
74282: DIFF
74283: PPUSH
74284: LD_INT 3
74286: PPUSH
74287: CALL 51145 0 2
74291: ST_TO_ADDR
// if not tmp then
74292: LD_VAR 0 6
74296: NOT
74297: IFFALSE 74301
// continue ;
74299: GO 73681
// places := places - mc_remote_driver [ i ] ;
74301: LD_ADDR_VAR 0 5
74305: PUSH
74306: LD_VAR 0 5
74310: PUSH
74311: LD_EXP 92
74315: PUSH
74316: LD_VAR 0 2
74320: ARRAY
74321: MINUS
74322: ST_TO_ADDR
// if places then
74323: LD_VAR 0 5
74327: IFFALSE 74386
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
74329: LD_ADDR_EXP 92
74333: PUSH
74334: LD_EXP 92
74338: PPUSH
74339: LD_VAR 0 2
74343: PPUSH
74344: LD_EXP 92
74348: PUSH
74349: LD_VAR 0 2
74353: ARRAY
74354: PUSH
74355: LD_VAR 0 6
74359: PUSH
74360: LD_INT 1
74362: ARRAY
74363: UNION
74364: PPUSH
74365: CALL_OW 1
74369: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
74370: LD_VAR 0 6
74374: PUSH
74375: LD_INT 1
74377: ARRAY
74378: PPUSH
74379: LD_INT 126
74381: PPUSH
74382: CALL_OW 109
// end ; end ;
74386: GO 73681
74388: POP
74389: POP
// end ;
74390: LD_VAR 0 1
74394: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
74395: LD_INT 0
74397: PPUSH
74398: PPUSH
74399: PPUSH
74400: PPUSH
74401: PPUSH
74402: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
74403: LD_VAR 0 1
74407: NOT
74408: PUSH
74409: LD_VAR 0 2
74413: NOT
74414: OR
74415: PUSH
74416: LD_VAR 0 3
74420: NOT
74421: OR
74422: PUSH
74423: LD_VAR 0 4
74427: PUSH
74428: LD_INT 1
74430: PUSH
74431: LD_INT 2
74433: PUSH
74434: LD_INT 3
74436: PUSH
74437: LD_INT 4
74439: PUSH
74440: LD_INT 5
74442: PUSH
74443: LD_INT 8
74445: PUSH
74446: LD_INT 9
74448: PUSH
74449: LD_INT 15
74451: PUSH
74452: LD_INT 16
74454: PUSH
74455: EMPTY
74456: LIST
74457: LIST
74458: LIST
74459: LIST
74460: LIST
74461: LIST
74462: LIST
74463: LIST
74464: LIST
74465: IN
74466: NOT
74467: OR
74468: IFFALSE 74472
// exit ;
74470: GO 75372
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
74472: LD_ADDR_VAR 0 2
74476: PUSH
74477: LD_VAR 0 2
74481: PPUSH
74482: LD_INT 21
74484: PUSH
74485: LD_INT 3
74487: PUSH
74488: EMPTY
74489: LIST
74490: LIST
74491: PUSH
74492: LD_INT 24
74494: PUSH
74495: LD_INT 250
74497: PUSH
74498: EMPTY
74499: LIST
74500: LIST
74501: PUSH
74502: EMPTY
74503: LIST
74504: LIST
74505: PPUSH
74506: CALL_OW 72
74510: ST_TO_ADDR
// case class of 1 , 15 :
74511: LD_VAR 0 4
74515: PUSH
74516: LD_INT 1
74518: DOUBLE
74519: EQUAL
74520: IFTRUE 74530
74522: LD_INT 15
74524: DOUBLE
74525: EQUAL
74526: IFTRUE 74530
74528: GO 74615
74530: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
74531: LD_ADDR_VAR 0 8
74535: PUSH
74536: LD_VAR 0 2
74540: PPUSH
74541: LD_INT 2
74543: PUSH
74544: LD_INT 30
74546: PUSH
74547: LD_INT 32
74549: PUSH
74550: EMPTY
74551: LIST
74552: LIST
74553: PUSH
74554: LD_INT 30
74556: PUSH
74557: LD_INT 31
74559: PUSH
74560: EMPTY
74561: LIST
74562: LIST
74563: PUSH
74564: EMPTY
74565: LIST
74566: LIST
74567: LIST
74568: PPUSH
74569: CALL_OW 72
74573: PUSH
74574: LD_VAR 0 2
74578: PPUSH
74579: LD_INT 2
74581: PUSH
74582: LD_INT 30
74584: PUSH
74585: LD_INT 4
74587: PUSH
74588: EMPTY
74589: LIST
74590: LIST
74591: PUSH
74592: LD_INT 30
74594: PUSH
74595: LD_INT 5
74597: PUSH
74598: EMPTY
74599: LIST
74600: LIST
74601: PUSH
74602: EMPTY
74603: LIST
74604: LIST
74605: LIST
74606: PPUSH
74607: CALL_OW 72
74611: ADD
74612: ST_TO_ADDR
74613: GO 74861
74615: LD_INT 2
74617: DOUBLE
74618: EQUAL
74619: IFTRUE 74629
74621: LD_INT 16
74623: DOUBLE
74624: EQUAL
74625: IFTRUE 74629
74627: GO 74675
74629: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
74630: LD_ADDR_VAR 0 8
74634: PUSH
74635: LD_VAR 0 2
74639: PPUSH
74640: LD_INT 2
74642: PUSH
74643: LD_INT 30
74645: PUSH
74646: LD_INT 0
74648: PUSH
74649: EMPTY
74650: LIST
74651: LIST
74652: PUSH
74653: LD_INT 30
74655: PUSH
74656: LD_INT 1
74658: PUSH
74659: EMPTY
74660: LIST
74661: LIST
74662: PUSH
74663: EMPTY
74664: LIST
74665: LIST
74666: LIST
74667: PPUSH
74668: CALL_OW 72
74672: ST_TO_ADDR
74673: GO 74861
74675: LD_INT 3
74677: DOUBLE
74678: EQUAL
74679: IFTRUE 74683
74681: GO 74729
74683: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
74684: LD_ADDR_VAR 0 8
74688: PUSH
74689: LD_VAR 0 2
74693: PPUSH
74694: LD_INT 2
74696: PUSH
74697: LD_INT 30
74699: PUSH
74700: LD_INT 2
74702: PUSH
74703: EMPTY
74704: LIST
74705: LIST
74706: PUSH
74707: LD_INT 30
74709: PUSH
74710: LD_INT 3
74712: PUSH
74713: EMPTY
74714: LIST
74715: LIST
74716: PUSH
74717: EMPTY
74718: LIST
74719: LIST
74720: LIST
74721: PPUSH
74722: CALL_OW 72
74726: ST_TO_ADDR
74727: GO 74861
74729: LD_INT 4
74731: DOUBLE
74732: EQUAL
74733: IFTRUE 74737
74735: GO 74794
74737: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
74738: LD_ADDR_VAR 0 8
74742: PUSH
74743: LD_VAR 0 2
74747: PPUSH
74748: LD_INT 2
74750: PUSH
74751: LD_INT 30
74753: PUSH
74754: LD_INT 6
74756: PUSH
74757: EMPTY
74758: LIST
74759: LIST
74760: PUSH
74761: LD_INT 30
74763: PUSH
74764: LD_INT 7
74766: PUSH
74767: EMPTY
74768: LIST
74769: LIST
74770: PUSH
74771: LD_INT 30
74773: PUSH
74774: LD_INT 8
74776: PUSH
74777: EMPTY
74778: LIST
74779: LIST
74780: PUSH
74781: EMPTY
74782: LIST
74783: LIST
74784: LIST
74785: LIST
74786: PPUSH
74787: CALL_OW 72
74791: ST_TO_ADDR
74792: GO 74861
74794: LD_INT 5
74796: DOUBLE
74797: EQUAL
74798: IFTRUE 74814
74800: LD_INT 8
74802: DOUBLE
74803: EQUAL
74804: IFTRUE 74814
74806: LD_INT 9
74808: DOUBLE
74809: EQUAL
74810: IFTRUE 74814
74812: GO 74860
74814: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
74815: LD_ADDR_VAR 0 8
74819: PUSH
74820: LD_VAR 0 2
74824: PPUSH
74825: LD_INT 2
74827: PUSH
74828: LD_INT 30
74830: PUSH
74831: LD_INT 4
74833: PUSH
74834: EMPTY
74835: LIST
74836: LIST
74837: PUSH
74838: LD_INT 30
74840: PUSH
74841: LD_INT 5
74843: PUSH
74844: EMPTY
74845: LIST
74846: LIST
74847: PUSH
74848: EMPTY
74849: LIST
74850: LIST
74851: LIST
74852: PPUSH
74853: CALL_OW 72
74857: ST_TO_ADDR
74858: GO 74861
74860: POP
// if not tmp then
74861: LD_VAR 0 8
74865: NOT
74866: IFFALSE 74870
// exit ;
74868: GO 75372
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
74870: LD_VAR 0 4
74874: PUSH
74875: LD_INT 1
74877: PUSH
74878: LD_INT 15
74880: PUSH
74881: EMPTY
74882: LIST
74883: LIST
74884: IN
74885: PUSH
74886: LD_EXP 61
74890: PUSH
74891: LD_VAR 0 1
74895: ARRAY
74896: AND
74897: IFFALSE 75053
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
74899: LD_ADDR_VAR 0 9
74903: PUSH
74904: LD_EXP 61
74908: PUSH
74909: LD_VAR 0 1
74913: ARRAY
74914: PUSH
74915: LD_INT 1
74917: ARRAY
74918: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
74919: LD_VAR 0 9
74923: PUSH
74924: LD_EXP 62
74928: PUSH
74929: LD_VAR 0 1
74933: ARRAY
74934: IN
74935: NOT
74936: IFFALSE 75051
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
74938: LD_ADDR_EXP 62
74942: PUSH
74943: LD_EXP 62
74947: PPUSH
74948: LD_VAR 0 1
74952: PUSH
74953: LD_EXP 62
74957: PUSH
74958: LD_VAR 0 1
74962: ARRAY
74963: PUSH
74964: LD_INT 1
74966: PLUS
74967: PUSH
74968: EMPTY
74969: LIST
74970: LIST
74971: PPUSH
74972: LD_VAR 0 9
74976: PPUSH
74977: CALL 16921 0 3
74981: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
74982: LD_ADDR_EXP 61
74986: PUSH
74987: LD_EXP 61
74991: PPUSH
74992: LD_VAR 0 1
74996: PPUSH
74997: LD_EXP 61
75001: PUSH
75002: LD_VAR 0 1
75006: ARRAY
75007: PUSH
75008: LD_VAR 0 9
75012: DIFF
75013: PPUSH
75014: CALL_OW 1
75018: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
75019: LD_VAR 0 3
75023: PPUSH
75024: LD_EXP 62
75028: PUSH
75029: LD_VAR 0 1
75033: ARRAY
75034: PUSH
75035: LD_EXP 62
75039: PUSH
75040: LD_VAR 0 1
75044: ARRAY
75045: ARRAY
75046: PPUSH
75047: CALL_OW 120
// end ; exit ;
75051: GO 75372
// end ; if tmp > 1 then
75053: LD_VAR 0 8
75057: PUSH
75058: LD_INT 1
75060: GREATER
75061: IFFALSE 75165
// for i = 2 to tmp do
75063: LD_ADDR_VAR 0 6
75067: PUSH
75068: DOUBLE
75069: LD_INT 2
75071: DEC
75072: ST_TO_ADDR
75073: LD_VAR 0 8
75077: PUSH
75078: FOR_TO
75079: IFFALSE 75163
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
75081: LD_VAR 0 8
75085: PUSH
75086: LD_VAR 0 6
75090: ARRAY
75091: PPUSH
75092: CALL_OW 461
75096: PUSH
75097: LD_INT 6
75099: EQUAL
75100: IFFALSE 75161
// begin x := tmp [ i ] ;
75102: LD_ADDR_VAR 0 9
75106: PUSH
75107: LD_VAR 0 8
75111: PUSH
75112: LD_VAR 0 6
75116: ARRAY
75117: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
75118: LD_ADDR_VAR 0 8
75122: PUSH
75123: LD_VAR 0 8
75127: PPUSH
75128: LD_VAR 0 6
75132: PPUSH
75133: CALL_OW 3
75137: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
75138: LD_ADDR_VAR 0 8
75142: PUSH
75143: LD_VAR 0 8
75147: PPUSH
75148: LD_INT 1
75150: PPUSH
75151: LD_VAR 0 9
75155: PPUSH
75156: CALL_OW 2
75160: ST_TO_ADDR
// end ;
75161: GO 75078
75163: POP
75164: POP
// for i in tmp do
75165: LD_ADDR_VAR 0 6
75169: PUSH
75170: LD_VAR 0 8
75174: PUSH
75175: FOR_IN
75176: IFFALSE 75245
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
75178: LD_VAR 0 6
75182: PPUSH
75183: CALL_OW 313
75187: PUSH
75188: LD_INT 6
75190: LESS
75191: PUSH
75192: LD_VAR 0 6
75196: PPUSH
75197: CALL_OW 266
75201: PUSH
75202: LD_INT 31
75204: PUSH
75205: LD_INT 32
75207: PUSH
75208: EMPTY
75209: LIST
75210: LIST
75211: IN
75212: NOT
75213: AND
75214: PUSH
75215: LD_VAR 0 6
75219: PPUSH
75220: CALL_OW 313
75224: PUSH
75225: LD_INT 0
75227: EQUAL
75228: OR
75229: IFFALSE 75243
// begin j := i ;
75231: LD_ADDR_VAR 0 7
75235: PUSH
75236: LD_VAR 0 6
75240: ST_TO_ADDR
// break ;
75241: GO 75245
// end ; end ;
75243: GO 75175
75245: POP
75246: POP
// if j then
75247: LD_VAR 0 7
75251: IFFALSE 75269
// ComEnterUnit ( unit , j ) else
75253: LD_VAR 0 3
75257: PPUSH
75258: LD_VAR 0 7
75262: PPUSH
75263: CALL_OW 120
75267: GO 75372
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
75269: LD_ADDR_VAR 0 10
75273: PUSH
75274: LD_VAR 0 2
75278: PPUSH
75279: LD_INT 2
75281: PUSH
75282: LD_INT 30
75284: PUSH
75285: LD_INT 0
75287: PUSH
75288: EMPTY
75289: LIST
75290: LIST
75291: PUSH
75292: LD_INT 30
75294: PUSH
75295: LD_INT 1
75297: PUSH
75298: EMPTY
75299: LIST
75300: LIST
75301: PUSH
75302: EMPTY
75303: LIST
75304: LIST
75305: LIST
75306: PPUSH
75307: CALL_OW 72
75311: ST_TO_ADDR
// if depot then
75312: LD_VAR 0 10
75316: IFFALSE 75372
// begin depot := NearestUnitToUnit ( depot , unit ) ;
75318: LD_ADDR_VAR 0 10
75322: PUSH
75323: LD_VAR 0 10
75327: PPUSH
75328: LD_VAR 0 3
75332: PPUSH
75333: CALL_OW 74
75337: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
75338: LD_VAR 0 3
75342: PPUSH
75343: LD_VAR 0 10
75347: PPUSH
75348: CALL_OW 296
75352: PUSH
75353: LD_INT 10
75355: GREATER
75356: IFFALSE 75372
// ComStandNearbyBuilding ( unit , depot ) ;
75358: LD_VAR 0 3
75362: PPUSH
75363: LD_VAR 0 10
75367: PPUSH
75368: CALL 11628 0 2
// end ; end ; end ;
75372: LD_VAR 0 5
75376: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
75377: LD_INT 0
75379: PPUSH
75380: PPUSH
75381: PPUSH
75382: PPUSH
// if not mc_bases then
75383: LD_EXP 52
75387: NOT
75388: IFFALSE 75392
// exit ;
75390: GO 75631
// for i = 1 to mc_bases do
75392: LD_ADDR_VAR 0 2
75396: PUSH
75397: DOUBLE
75398: LD_INT 1
75400: DEC
75401: ST_TO_ADDR
75402: LD_EXP 52
75406: PUSH
75407: FOR_TO
75408: IFFALSE 75629
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
75410: LD_ADDR_VAR 0 4
75414: PUSH
75415: LD_EXP 52
75419: PUSH
75420: LD_VAR 0 2
75424: ARRAY
75425: PPUSH
75426: LD_INT 21
75428: PUSH
75429: LD_INT 1
75431: PUSH
75432: EMPTY
75433: LIST
75434: LIST
75435: PPUSH
75436: CALL_OW 72
75440: PUSH
75441: LD_EXP 81
75445: PUSH
75446: LD_VAR 0 2
75450: ARRAY
75451: UNION
75452: ST_TO_ADDR
// if not tmp then
75453: LD_VAR 0 4
75457: NOT
75458: IFFALSE 75462
// continue ;
75460: GO 75407
// for j in tmp do
75462: LD_ADDR_VAR 0 3
75466: PUSH
75467: LD_VAR 0 4
75471: PUSH
75472: FOR_IN
75473: IFFALSE 75625
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
75475: LD_VAR 0 3
75479: PPUSH
75480: CALL_OW 110
75484: NOT
75485: PUSH
75486: LD_VAR 0 3
75490: PPUSH
75491: CALL_OW 314
75495: NOT
75496: AND
75497: PUSH
75498: LD_VAR 0 3
75502: PPUSH
75503: CALL_OW 311
75507: NOT
75508: AND
75509: PUSH
75510: LD_VAR 0 3
75514: PPUSH
75515: CALL_OW 310
75519: NOT
75520: AND
75521: PUSH
75522: LD_VAR 0 3
75526: PUSH
75527: LD_EXP 55
75531: PUSH
75532: LD_VAR 0 2
75536: ARRAY
75537: PUSH
75538: LD_INT 1
75540: ARRAY
75541: IN
75542: NOT
75543: AND
75544: PUSH
75545: LD_VAR 0 3
75549: PUSH
75550: LD_EXP 55
75554: PUSH
75555: LD_VAR 0 2
75559: ARRAY
75560: PUSH
75561: LD_INT 2
75563: ARRAY
75564: IN
75565: NOT
75566: AND
75567: PUSH
75568: LD_VAR 0 3
75572: PUSH
75573: LD_EXP 64
75577: PUSH
75578: LD_VAR 0 2
75582: ARRAY
75583: IN
75584: NOT
75585: AND
75586: IFFALSE 75623
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
75588: LD_VAR 0 2
75592: PPUSH
75593: LD_EXP 52
75597: PUSH
75598: LD_VAR 0 2
75602: ARRAY
75603: PPUSH
75604: LD_VAR 0 3
75608: PPUSH
75609: LD_VAR 0 3
75613: PPUSH
75614: CALL_OW 257
75618: PPUSH
75619: CALL 74395 0 4
// end ;
75623: GO 75472
75625: POP
75626: POP
// end ;
75627: GO 75407
75629: POP
75630: POP
// end ;
75631: LD_VAR 0 1
75635: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
75636: LD_INT 0
75638: PPUSH
75639: PPUSH
75640: PPUSH
75641: PPUSH
75642: PPUSH
75643: PPUSH
// if not mc_bases [ base ] then
75644: LD_EXP 52
75648: PUSH
75649: LD_VAR 0 1
75653: ARRAY
75654: NOT
75655: IFFALSE 75659
// exit ;
75657: GO 75841
// tmp := [ ] ;
75659: LD_ADDR_VAR 0 6
75663: PUSH
75664: EMPTY
75665: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
75666: LD_ADDR_VAR 0 7
75670: PUSH
75671: LD_VAR 0 3
75675: PPUSH
75676: LD_INT 0
75678: PPUSH
75679: CALL_OW 517
75683: ST_TO_ADDR
// if not list then
75684: LD_VAR 0 7
75688: NOT
75689: IFFALSE 75693
// exit ;
75691: GO 75841
// for i = 1 to amount do
75693: LD_ADDR_VAR 0 5
75697: PUSH
75698: DOUBLE
75699: LD_INT 1
75701: DEC
75702: ST_TO_ADDR
75703: LD_VAR 0 2
75707: PUSH
75708: FOR_TO
75709: IFFALSE 75789
// begin x := rand ( 1 , list [ 1 ] ) ;
75711: LD_ADDR_VAR 0 8
75715: PUSH
75716: LD_INT 1
75718: PPUSH
75719: LD_VAR 0 7
75723: PUSH
75724: LD_INT 1
75726: ARRAY
75727: PPUSH
75728: CALL_OW 12
75732: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
75733: LD_ADDR_VAR 0 6
75737: PUSH
75738: LD_VAR 0 6
75742: PPUSH
75743: LD_VAR 0 5
75747: PPUSH
75748: LD_VAR 0 7
75752: PUSH
75753: LD_INT 1
75755: ARRAY
75756: PUSH
75757: LD_VAR 0 8
75761: ARRAY
75762: PUSH
75763: LD_VAR 0 7
75767: PUSH
75768: LD_INT 2
75770: ARRAY
75771: PUSH
75772: LD_VAR 0 8
75776: ARRAY
75777: PUSH
75778: EMPTY
75779: LIST
75780: LIST
75781: PPUSH
75782: CALL_OW 1
75786: ST_TO_ADDR
// end ;
75787: GO 75708
75789: POP
75790: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
75791: LD_ADDR_EXP 65
75795: PUSH
75796: LD_EXP 65
75800: PPUSH
75801: LD_VAR 0 1
75805: PPUSH
75806: LD_VAR 0 6
75810: PPUSH
75811: CALL_OW 1
75815: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
75816: LD_ADDR_EXP 67
75820: PUSH
75821: LD_EXP 67
75825: PPUSH
75826: LD_VAR 0 1
75830: PPUSH
75831: LD_VAR 0 3
75835: PPUSH
75836: CALL_OW 1
75840: ST_TO_ADDR
// end ;
75841: LD_VAR 0 4
75845: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
75846: LD_INT 0
75848: PPUSH
// if not mc_bases [ base ] then
75849: LD_EXP 52
75853: PUSH
75854: LD_VAR 0 1
75858: ARRAY
75859: NOT
75860: IFFALSE 75864
// exit ;
75862: GO 75889
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
75864: LD_ADDR_EXP 57
75868: PUSH
75869: LD_EXP 57
75873: PPUSH
75874: LD_VAR 0 1
75878: PPUSH
75879: LD_VAR 0 2
75883: PPUSH
75884: CALL_OW 1
75888: ST_TO_ADDR
// end ;
75889: LD_VAR 0 3
75893: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
75894: LD_INT 0
75896: PPUSH
// if not mc_bases [ base ] then
75897: LD_EXP 52
75901: PUSH
75902: LD_VAR 0 1
75906: ARRAY
75907: NOT
75908: IFFALSE 75912
// exit ;
75910: GO 75949
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
75912: LD_ADDR_EXP 57
75916: PUSH
75917: LD_EXP 57
75921: PPUSH
75922: LD_VAR 0 1
75926: PPUSH
75927: LD_EXP 57
75931: PUSH
75932: LD_VAR 0 1
75936: ARRAY
75937: PUSH
75938: LD_VAR 0 2
75942: UNION
75943: PPUSH
75944: CALL_OW 1
75948: ST_TO_ADDR
// end ;
75949: LD_VAR 0 3
75953: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
75954: LD_INT 0
75956: PPUSH
// if not mc_bases [ base ] then
75957: LD_EXP 52
75961: PUSH
75962: LD_VAR 0 1
75966: ARRAY
75967: NOT
75968: IFFALSE 75972
// exit ;
75970: GO 75997
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
75972: LD_ADDR_EXP 73
75976: PUSH
75977: LD_EXP 73
75981: PPUSH
75982: LD_VAR 0 1
75986: PPUSH
75987: LD_VAR 0 2
75991: PPUSH
75992: CALL_OW 1
75996: ST_TO_ADDR
// end ;
75997: LD_VAR 0 3
76001: RET
// export function MC_InsertProduceList ( base , components ) ; begin
76002: LD_INT 0
76004: PPUSH
// if not mc_bases [ base ] then
76005: LD_EXP 52
76009: PUSH
76010: LD_VAR 0 1
76014: ARRAY
76015: NOT
76016: IFFALSE 76020
// exit ;
76018: GO 76057
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
76020: LD_ADDR_EXP 73
76024: PUSH
76025: LD_EXP 73
76029: PPUSH
76030: LD_VAR 0 1
76034: PPUSH
76035: LD_EXP 73
76039: PUSH
76040: LD_VAR 0 1
76044: ARRAY
76045: PUSH
76046: LD_VAR 0 2
76050: ADD
76051: PPUSH
76052: CALL_OW 1
76056: ST_TO_ADDR
// end ;
76057: LD_VAR 0 3
76061: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
76062: LD_INT 0
76064: PPUSH
// if not mc_bases [ base ] then
76065: LD_EXP 52
76069: PUSH
76070: LD_VAR 0 1
76074: ARRAY
76075: NOT
76076: IFFALSE 76080
// exit ;
76078: GO 76134
// mc_defender := Replace ( mc_defender , base , deflist ) ;
76080: LD_ADDR_EXP 74
76084: PUSH
76085: LD_EXP 74
76089: PPUSH
76090: LD_VAR 0 1
76094: PPUSH
76095: LD_VAR 0 2
76099: PPUSH
76100: CALL_OW 1
76104: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
76105: LD_ADDR_EXP 63
76109: PUSH
76110: LD_EXP 63
76114: PPUSH
76115: LD_VAR 0 1
76119: PPUSH
76120: LD_VAR 0 2
76124: PUSH
76125: LD_INT 0
76127: PLUS
76128: PPUSH
76129: CALL_OW 1
76133: ST_TO_ADDR
// end ;
76134: LD_VAR 0 3
76138: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
76139: LD_INT 0
76141: PPUSH
// if not mc_bases [ base ] then
76142: LD_EXP 52
76146: PUSH
76147: LD_VAR 0 1
76151: ARRAY
76152: NOT
76153: IFFALSE 76157
// exit ;
76155: GO 76182
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
76157: LD_ADDR_EXP 63
76161: PUSH
76162: LD_EXP 63
76166: PPUSH
76167: LD_VAR 0 1
76171: PPUSH
76172: LD_VAR 0 2
76176: PPUSH
76177: CALL_OW 1
76181: ST_TO_ADDR
// end ;
76182: LD_VAR 0 3
76186: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
76187: LD_INT 0
76189: PPUSH
76190: PPUSH
76191: PPUSH
76192: PPUSH
// if not mc_bases [ base ] then
76193: LD_EXP 52
76197: PUSH
76198: LD_VAR 0 1
76202: ARRAY
76203: NOT
76204: IFFALSE 76208
// exit ;
76206: GO 76273
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
76208: LD_ADDR_EXP 72
76212: PUSH
76213: LD_EXP 72
76217: PPUSH
76218: LD_VAR 0 1
76222: PUSH
76223: LD_EXP 72
76227: PUSH
76228: LD_VAR 0 1
76232: ARRAY
76233: PUSH
76234: LD_INT 1
76236: PLUS
76237: PUSH
76238: EMPTY
76239: LIST
76240: LIST
76241: PPUSH
76242: LD_VAR 0 1
76246: PUSH
76247: LD_VAR 0 2
76251: PUSH
76252: LD_VAR 0 3
76256: PUSH
76257: LD_VAR 0 4
76261: PUSH
76262: EMPTY
76263: LIST
76264: LIST
76265: LIST
76266: LIST
76267: PPUSH
76268: CALL 16921 0 3
76272: ST_TO_ADDR
// end ;
76273: LD_VAR 0 5
76277: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
76278: LD_INT 0
76280: PPUSH
// if not mc_bases [ base ] then
76281: LD_EXP 52
76285: PUSH
76286: LD_VAR 0 1
76290: ARRAY
76291: NOT
76292: IFFALSE 76296
// exit ;
76294: GO 76321
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
76296: LD_ADDR_EXP 89
76300: PUSH
76301: LD_EXP 89
76305: PPUSH
76306: LD_VAR 0 1
76310: PPUSH
76311: LD_VAR 0 2
76315: PPUSH
76316: CALL_OW 1
76320: ST_TO_ADDR
// end ;
76321: LD_VAR 0 3
76325: RET
// export function MC_GetMinesField ( base ) ; begin
76326: LD_INT 0
76328: PPUSH
// result := mc_mines [ base ] ;
76329: LD_ADDR_VAR 0 2
76333: PUSH
76334: LD_EXP 65
76338: PUSH
76339: LD_VAR 0 1
76343: ARRAY
76344: ST_TO_ADDR
// end ;
76345: LD_VAR 0 2
76349: RET
// export function MC_GetProduceList ( base ) ; begin
76350: LD_INT 0
76352: PPUSH
// result := mc_produce [ base ] ;
76353: LD_ADDR_VAR 0 2
76357: PUSH
76358: LD_EXP 73
76362: PUSH
76363: LD_VAR 0 1
76367: ARRAY
76368: ST_TO_ADDR
// end ;
76369: LD_VAR 0 2
76373: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
76374: LD_INT 0
76376: PPUSH
76377: PPUSH
// if not mc_bases then
76378: LD_EXP 52
76382: NOT
76383: IFFALSE 76387
// exit ;
76385: GO 76452
// if mc_bases [ base ] then
76387: LD_EXP 52
76391: PUSH
76392: LD_VAR 0 1
76396: ARRAY
76397: IFFALSE 76452
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
76399: LD_ADDR_VAR 0 3
76403: PUSH
76404: LD_EXP 52
76408: PUSH
76409: LD_VAR 0 1
76413: ARRAY
76414: PPUSH
76415: LD_INT 30
76417: PUSH
76418: LD_VAR 0 2
76422: PUSH
76423: EMPTY
76424: LIST
76425: LIST
76426: PPUSH
76427: CALL_OW 72
76431: ST_TO_ADDR
// if result then
76432: LD_VAR 0 3
76436: IFFALSE 76452
// result := result [ 1 ] ;
76438: LD_ADDR_VAR 0 3
76442: PUSH
76443: LD_VAR 0 3
76447: PUSH
76448: LD_INT 1
76450: ARRAY
76451: ST_TO_ADDR
// end ; end ;
76452: LD_VAR 0 3
76456: RET
// export function MC_SetTame ( base , area ) ; begin
76457: LD_INT 0
76459: PPUSH
// if not mc_bases or not base then
76460: LD_EXP 52
76464: NOT
76465: PUSH
76466: LD_VAR 0 1
76470: NOT
76471: OR
76472: IFFALSE 76476
// exit ;
76474: GO 76501
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
76476: LD_ADDR_EXP 80
76480: PUSH
76481: LD_EXP 80
76485: PPUSH
76486: LD_VAR 0 1
76490: PPUSH
76491: LD_VAR 0 2
76495: PPUSH
76496: CALL_OW 1
76500: ST_TO_ADDR
// end ;
76501: LD_VAR 0 3
76505: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
76506: LD_INT 0
76508: PPUSH
76509: PPUSH
// if not mc_bases or not base then
76510: LD_EXP 52
76514: NOT
76515: PUSH
76516: LD_VAR 0 1
76520: NOT
76521: OR
76522: IFFALSE 76526
// exit ;
76524: GO 76628
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
76526: LD_ADDR_VAR 0 4
76530: PUSH
76531: LD_EXP 52
76535: PUSH
76536: LD_VAR 0 1
76540: ARRAY
76541: PPUSH
76542: LD_INT 30
76544: PUSH
76545: LD_VAR 0 2
76549: PUSH
76550: EMPTY
76551: LIST
76552: LIST
76553: PPUSH
76554: CALL_OW 72
76558: ST_TO_ADDR
// if not tmp then
76559: LD_VAR 0 4
76563: NOT
76564: IFFALSE 76568
// exit ;
76566: GO 76628
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
76568: LD_ADDR_EXP 84
76572: PUSH
76573: LD_EXP 84
76577: PPUSH
76578: LD_VAR 0 1
76582: PPUSH
76583: LD_EXP 84
76587: PUSH
76588: LD_VAR 0 1
76592: ARRAY
76593: PPUSH
76594: LD_EXP 84
76598: PUSH
76599: LD_VAR 0 1
76603: ARRAY
76604: PUSH
76605: LD_INT 1
76607: PLUS
76608: PPUSH
76609: LD_VAR 0 4
76613: PUSH
76614: LD_INT 1
76616: ARRAY
76617: PPUSH
76618: CALL_OW 2
76622: PPUSH
76623: CALL_OW 1
76627: ST_TO_ADDR
// end ;
76628: LD_VAR 0 3
76632: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
76633: LD_INT 0
76635: PPUSH
76636: PPUSH
// if not mc_bases or not base or not kinds then
76637: LD_EXP 52
76641: NOT
76642: PUSH
76643: LD_VAR 0 1
76647: NOT
76648: OR
76649: PUSH
76650: LD_VAR 0 2
76654: NOT
76655: OR
76656: IFFALSE 76660
// exit ;
76658: GO 76721
// for i in kinds do
76660: LD_ADDR_VAR 0 4
76664: PUSH
76665: LD_VAR 0 2
76669: PUSH
76670: FOR_IN
76671: IFFALSE 76719
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
76673: LD_ADDR_EXP 86
76677: PUSH
76678: LD_EXP 86
76682: PPUSH
76683: LD_VAR 0 1
76687: PUSH
76688: LD_EXP 86
76692: PUSH
76693: LD_VAR 0 1
76697: ARRAY
76698: PUSH
76699: LD_INT 1
76701: PLUS
76702: PUSH
76703: EMPTY
76704: LIST
76705: LIST
76706: PPUSH
76707: LD_VAR 0 4
76711: PPUSH
76712: CALL 16921 0 3
76716: ST_TO_ADDR
76717: GO 76670
76719: POP
76720: POP
// end ;
76721: LD_VAR 0 3
76725: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
76726: LD_INT 0
76728: PPUSH
// if not mc_bases or not base or not areas then
76729: LD_EXP 52
76733: NOT
76734: PUSH
76735: LD_VAR 0 1
76739: NOT
76740: OR
76741: PUSH
76742: LD_VAR 0 2
76746: NOT
76747: OR
76748: IFFALSE 76752
// exit ;
76750: GO 76777
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
76752: LD_ADDR_EXP 70
76756: PUSH
76757: LD_EXP 70
76761: PPUSH
76762: LD_VAR 0 1
76766: PPUSH
76767: LD_VAR 0 2
76771: PPUSH
76772: CALL_OW 1
76776: ST_TO_ADDR
// end ;
76777: LD_VAR 0 3
76781: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
76782: LD_INT 0
76784: PPUSH
// if not mc_bases or not base or not teleports_exit then
76785: LD_EXP 52
76789: NOT
76790: PUSH
76791: LD_VAR 0 1
76795: NOT
76796: OR
76797: PUSH
76798: LD_VAR 0 2
76802: NOT
76803: OR
76804: IFFALSE 76808
// exit ;
76806: GO 76833
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
76808: LD_ADDR_EXP 87
76812: PUSH
76813: LD_EXP 87
76817: PPUSH
76818: LD_VAR 0 1
76822: PPUSH
76823: LD_VAR 0 2
76827: PPUSH
76828: CALL_OW 1
76832: ST_TO_ADDR
// end ;
76833: LD_VAR 0 3
76837: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
76838: LD_INT 0
76840: PPUSH
76841: PPUSH
76842: PPUSH
// if not mc_bases or not base or not ext_list then
76843: LD_EXP 52
76847: NOT
76848: PUSH
76849: LD_VAR 0 1
76853: NOT
76854: OR
76855: PUSH
76856: LD_VAR 0 5
76860: NOT
76861: OR
76862: IFFALSE 76866
// exit ;
76864: GO 77039
// tmp := GetFacExtXYD ( x , y , d ) ;
76866: LD_ADDR_VAR 0 8
76870: PUSH
76871: LD_VAR 0 2
76875: PPUSH
76876: LD_VAR 0 3
76880: PPUSH
76881: LD_VAR 0 4
76885: PPUSH
76886: CALL 50275 0 3
76890: ST_TO_ADDR
// if not tmp then
76891: LD_VAR 0 8
76895: NOT
76896: IFFALSE 76900
// exit ;
76898: GO 77039
// for i in tmp do
76900: LD_ADDR_VAR 0 7
76904: PUSH
76905: LD_VAR 0 8
76909: PUSH
76910: FOR_IN
76911: IFFALSE 77037
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
76913: LD_ADDR_EXP 57
76917: PUSH
76918: LD_EXP 57
76922: PPUSH
76923: LD_VAR 0 1
76927: PPUSH
76928: LD_EXP 57
76932: PUSH
76933: LD_VAR 0 1
76937: ARRAY
76938: PPUSH
76939: LD_EXP 57
76943: PUSH
76944: LD_VAR 0 1
76948: ARRAY
76949: PUSH
76950: LD_INT 1
76952: PLUS
76953: PPUSH
76954: LD_VAR 0 5
76958: PUSH
76959: LD_INT 1
76961: ARRAY
76962: PUSH
76963: LD_VAR 0 7
76967: PUSH
76968: LD_INT 1
76970: ARRAY
76971: PUSH
76972: LD_VAR 0 7
76976: PUSH
76977: LD_INT 2
76979: ARRAY
76980: PUSH
76981: LD_VAR 0 7
76985: PUSH
76986: LD_INT 3
76988: ARRAY
76989: PUSH
76990: EMPTY
76991: LIST
76992: LIST
76993: LIST
76994: LIST
76995: PPUSH
76996: CALL_OW 2
77000: PPUSH
77001: CALL_OW 1
77005: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
77006: LD_ADDR_VAR 0 5
77010: PUSH
77011: LD_VAR 0 5
77015: PPUSH
77016: LD_INT 1
77018: PPUSH
77019: CALL_OW 3
77023: ST_TO_ADDR
// if not ext_list then
77024: LD_VAR 0 5
77028: NOT
77029: IFFALSE 77035
// exit ;
77031: POP
77032: POP
77033: GO 77039
// end ;
77035: GO 76910
77037: POP
77038: POP
// end ;
77039: LD_VAR 0 6
77043: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
77044: LD_INT 0
77046: PPUSH
// if not mc_bases or not base or not weapon_list then
77047: LD_EXP 52
77051: NOT
77052: PUSH
77053: LD_VAR 0 1
77057: NOT
77058: OR
77059: PUSH
77060: LD_VAR 0 2
77064: NOT
77065: OR
77066: IFFALSE 77070
// exit ;
77068: GO 77095
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
77070: LD_ADDR_EXP 91
77074: PUSH
77075: LD_EXP 91
77079: PPUSH
77080: LD_VAR 0 1
77084: PPUSH
77085: LD_VAR 0 2
77089: PPUSH
77090: CALL_OW 1
77094: ST_TO_ADDR
// end ;
77095: LD_VAR 0 3
77099: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
77100: LD_INT 0
77102: PPUSH
// if not mc_bases or not base or not tech_list then
77103: LD_EXP 52
77107: NOT
77108: PUSH
77109: LD_VAR 0 1
77113: NOT
77114: OR
77115: PUSH
77116: LD_VAR 0 2
77120: NOT
77121: OR
77122: IFFALSE 77126
// exit ;
77124: GO 77151
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
77126: LD_ADDR_EXP 79
77130: PUSH
77131: LD_EXP 79
77135: PPUSH
77136: LD_VAR 0 1
77140: PPUSH
77141: LD_VAR 0 2
77145: PPUSH
77146: CALL_OW 1
77150: ST_TO_ADDR
// end ;
77151: LD_VAR 0 3
77155: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
77156: LD_INT 0
77158: PPUSH
// if not mc_bases or not parking_area or not base then
77159: LD_EXP 52
77163: NOT
77164: PUSH
77165: LD_VAR 0 2
77169: NOT
77170: OR
77171: PUSH
77172: LD_VAR 0 1
77176: NOT
77177: OR
77178: IFFALSE 77182
// exit ;
77180: GO 77207
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
77182: LD_ADDR_EXP 76
77186: PUSH
77187: LD_EXP 76
77191: PPUSH
77192: LD_VAR 0 1
77196: PPUSH
77197: LD_VAR 0 2
77201: PPUSH
77202: CALL_OW 1
77206: ST_TO_ADDR
// end ;
77207: LD_VAR 0 3
77211: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
77212: LD_INT 0
77214: PPUSH
// if not mc_bases or not base or not scan_area then
77215: LD_EXP 52
77219: NOT
77220: PUSH
77221: LD_VAR 0 1
77225: NOT
77226: OR
77227: PUSH
77228: LD_VAR 0 2
77232: NOT
77233: OR
77234: IFFALSE 77238
// exit ;
77236: GO 77263
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
77238: LD_ADDR_EXP 77
77242: PUSH
77243: LD_EXP 77
77247: PPUSH
77248: LD_VAR 0 1
77252: PPUSH
77253: LD_VAR 0 2
77257: PPUSH
77258: CALL_OW 1
77262: ST_TO_ADDR
// end ;
77263: LD_VAR 0 3
77267: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
77268: LD_INT 0
77270: PPUSH
77271: PPUSH
// if not mc_bases or not base then
77272: LD_EXP 52
77276: NOT
77277: PUSH
77278: LD_VAR 0 1
77282: NOT
77283: OR
77284: IFFALSE 77288
// exit ;
77286: GO 77352
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
77288: LD_ADDR_VAR 0 3
77292: PUSH
77293: LD_INT 1
77295: PUSH
77296: LD_INT 2
77298: PUSH
77299: LD_INT 3
77301: PUSH
77302: LD_INT 4
77304: PUSH
77305: LD_INT 11
77307: PUSH
77308: EMPTY
77309: LIST
77310: LIST
77311: LIST
77312: LIST
77313: LIST
77314: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
77315: LD_ADDR_EXP 79
77319: PUSH
77320: LD_EXP 79
77324: PPUSH
77325: LD_VAR 0 1
77329: PPUSH
77330: LD_EXP 79
77334: PUSH
77335: LD_VAR 0 1
77339: ARRAY
77340: PUSH
77341: LD_VAR 0 3
77345: DIFF
77346: PPUSH
77347: CALL_OW 1
77351: ST_TO_ADDR
// end ;
77352: LD_VAR 0 2
77356: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
77357: LD_INT 0
77359: PPUSH
// result := mc_vehicles [ base ] ;
77360: LD_ADDR_VAR 0 3
77364: PUSH
77365: LD_EXP 71
77369: PUSH
77370: LD_VAR 0 1
77374: ARRAY
77375: ST_TO_ADDR
// if onlyCombat then
77376: LD_VAR 0 2
77380: IFFALSE 77545
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
77382: LD_ADDR_VAR 0 3
77386: PUSH
77387: LD_VAR 0 3
77391: PUSH
77392: LD_VAR 0 3
77396: PPUSH
77397: LD_INT 2
77399: PUSH
77400: LD_INT 34
77402: PUSH
77403: LD_INT 12
77405: PUSH
77406: EMPTY
77407: LIST
77408: LIST
77409: PUSH
77410: LD_INT 34
77412: PUSH
77413: LD_INT 51
77415: PUSH
77416: EMPTY
77417: LIST
77418: LIST
77419: PUSH
77420: LD_INT 34
77422: PUSH
77423: LD_EXP 46
77427: PUSH
77428: EMPTY
77429: LIST
77430: LIST
77431: PUSH
77432: LD_INT 34
77434: PUSH
77435: LD_INT 32
77437: PUSH
77438: EMPTY
77439: LIST
77440: LIST
77441: PUSH
77442: LD_INT 34
77444: PUSH
77445: LD_INT 13
77447: PUSH
77448: EMPTY
77449: LIST
77450: LIST
77451: PUSH
77452: LD_INT 34
77454: PUSH
77455: LD_INT 52
77457: PUSH
77458: EMPTY
77459: LIST
77460: LIST
77461: PUSH
77462: LD_INT 34
77464: PUSH
77465: LD_INT 14
77467: PUSH
77468: EMPTY
77469: LIST
77470: LIST
77471: PUSH
77472: LD_INT 34
77474: PUSH
77475: LD_INT 53
77477: PUSH
77478: EMPTY
77479: LIST
77480: LIST
77481: PUSH
77482: LD_INT 34
77484: PUSH
77485: LD_EXP 45
77489: PUSH
77490: EMPTY
77491: LIST
77492: LIST
77493: PUSH
77494: LD_INT 34
77496: PUSH
77497: LD_INT 31
77499: PUSH
77500: EMPTY
77501: LIST
77502: LIST
77503: PUSH
77504: LD_INT 34
77506: PUSH
77507: LD_INT 48
77509: PUSH
77510: EMPTY
77511: LIST
77512: LIST
77513: PUSH
77514: LD_INT 34
77516: PUSH
77517: LD_INT 8
77519: PUSH
77520: EMPTY
77521: LIST
77522: LIST
77523: PUSH
77524: EMPTY
77525: LIST
77526: LIST
77527: LIST
77528: LIST
77529: LIST
77530: LIST
77531: LIST
77532: LIST
77533: LIST
77534: LIST
77535: LIST
77536: LIST
77537: LIST
77538: PPUSH
77539: CALL_OW 72
77543: DIFF
77544: ST_TO_ADDR
// end ; end_of_file
77545: LD_VAR 0 3
77549: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
77550: LD_INT 0
77552: PPUSH
77553: PPUSH
77554: PPUSH
// if not mc_bases or not skirmish then
77555: LD_EXP 52
77559: NOT
77560: PUSH
77561: LD_EXP 50
77565: NOT
77566: OR
77567: IFFALSE 77571
// exit ;
77569: GO 77736
// for i = 1 to mc_bases do
77571: LD_ADDR_VAR 0 4
77575: PUSH
77576: DOUBLE
77577: LD_INT 1
77579: DEC
77580: ST_TO_ADDR
77581: LD_EXP 52
77585: PUSH
77586: FOR_TO
77587: IFFALSE 77734
// begin if sci in mc_bases [ i ] then
77589: LD_VAR 0 2
77593: PUSH
77594: LD_EXP 52
77598: PUSH
77599: LD_VAR 0 4
77603: ARRAY
77604: IN
77605: IFFALSE 77732
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
77607: LD_ADDR_EXP 81
77611: PUSH
77612: LD_EXP 81
77616: PPUSH
77617: LD_VAR 0 4
77621: PUSH
77622: LD_EXP 81
77626: PUSH
77627: LD_VAR 0 4
77631: ARRAY
77632: PUSH
77633: LD_INT 1
77635: PLUS
77636: PUSH
77637: EMPTY
77638: LIST
77639: LIST
77640: PPUSH
77641: LD_VAR 0 1
77645: PPUSH
77646: CALL 16921 0 3
77650: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
77651: LD_ADDR_VAR 0 5
77655: PUSH
77656: LD_EXP 52
77660: PUSH
77661: LD_VAR 0 4
77665: ARRAY
77666: PPUSH
77667: LD_INT 2
77669: PUSH
77670: LD_INT 30
77672: PUSH
77673: LD_INT 0
77675: PUSH
77676: EMPTY
77677: LIST
77678: LIST
77679: PUSH
77680: LD_INT 30
77682: PUSH
77683: LD_INT 1
77685: PUSH
77686: EMPTY
77687: LIST
77688: LIST
77689: PUSH
77690: EMPTY
77691: LIST
77692: LIST
77693: LIST
77694: PPUSH
77695: CALL_OW 72
77699: PPUSH
77700: LD_VAR 0 1
77704: PPUSH
77705: CALL_OW 74
77709: ST_TO_ADDR
// if tmp then
77710: LD_VAR 0 5
77714: IFFALSE 77730
// ComStandNearbyBuilding ( ape , tmp ) ;
77716: LD_VAR 0 1
77720: PPUSH
77721: LD_VAR 0 5
77725: PPUSH
77726: CALL 11628 0 2
// break ;
77730: GO 77734
// end ; end ;
77732: GO 77586
77734: POP
77735: POP
// end ;
77736: LD_VAR 0 3
77740: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
77741: LD_INT 0
77743: PPUSH
77744: PPUSH
77745: PPUSH
// if not mc_bases or not skirmish then
77746: LD_EXP 52
77750: NOT
77751: PUSH
77752: LD_EXP 50
77756: NOT
77757: OR
77758: IFFALSE 77762
// exit ;
77760: GO 77851
// for i = 1 to mc_bases do
77762: LD_ADDR_VAR 0 4
77766: PUSH
77767: DOUBLE
77768: LD_INT 1
77770: DEC
77771: ST_TO_ADDR
77772: LD_EXP 52
77776: PUSH
77777: FOR_TO
77778: IFFALSE 77849
// begin if building in mc_busy_turret_list [ i ] then
77780: LD_VAR 0 1
77784: PUSH
77785: LD_EXP 62
77789: PUSH
77790: LD_VAR 0 4
77794: ARRAY
77795: IN
77796: IFFALSE 77847
// begin tmp := mc_busy_turret_list [ i ] diff building ;
77798: LD_ADDR_VAR 0 5
77802: PUSH
77803: LD_EXP 62
77807: PUSH
77808: LD_VAR 0 4
77812: ARRAY
77813: PUSH
77814: LD_VAR 0 1
77818: DIFF
77819: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
77820: LD_ADDR_EXP 62
77824: PUSH
77825: LD_EXP 62
77829: PPUSH
77830: LD_VAR 0 4
77834: PPUSH
77835: LD_VAR 0 5
77839: PPUSH
77840: CALL_OW 1
77844: ST_TO_ADDR
// break ;
77845: GO 77849
// end ; end ;
77847: GO 77777
77849: POP
77850: POP
// end ;
77851: LD_VAR 0 3
77855: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
77856: LD_INT 0
77858: PPUSH
77859: PPUSH
77860: PPUSH
// if not mc_bases or not skirmish then
77861: LD_EXP 52
77865: NOT
77866: PUSH
77867: LD_EXP 50
77871: NOT
77872: OR
77873: IFFALSE 77877
// exit ;
77875: GO 78076
// for i = 1 to mc_bases do
77877: LD_ADDR_VAR 0 5
77881: PUSH
77882: DOUBLE
77883: LD_INT 1
77885: DEC
77886: ST_TO_ADDR
77887: LD_EXP 52
77891: PUSH
77892: FOR_TO
77893: IFFALSE 78074
// if building in mc_bases [ i ] then
77895: LD_VAR 0 1
77899: PUSH
77900: LD_EXP 52
77904: PUSH
77905: LD_VAR 0 5
77909: ARRAY
77910: IN
77911: IFFALSE 78072
// begin tmp := mc_bases [ i ] diff building ;
77913: LD_ADDR_VAR 0 6
77917: PUSH
77918: LD_EXP 52
77922: PUSH
77923: LD_VAR 0 5
77927: ARRAY
77928: PUSH
77929: LD_VAR 0 1
77933: DIFF
77934: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
77935: LD_ADDR_EXP 52
77939: PUSH
77940: LD_EXP 52
77944: PPUSH
77945: LD_VAR 0 5
77949: PPUSH
77950: LD_VAR 0 6
77954: PPUSH
77955: CALL_OW 1
77959: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
77960: LD_VAR 0 1
77964: PUSH
77965: LD_EXP 60
77969: PUSH
77970: LD_VAR 0 5
77974: ARRAY
77975: IN
77976: IFFALSE 78015
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
77978: LD_ADDR_EXP 60
77982: PUSH
77983: LD_EXP 60
77987: PPUSH
77988: LD_VAR 0 5
77992: PPUSH
77993: LD_EXP 60
77997: PUSH
77998: LD_VAR 0 5
78002: ARRAY
78003: PUSH
78004: LD_VAR 0 1
78008: DIFF
78009: PPUSH
78010: CALL_OW 1
78014: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
78015: LD_VAR 0 1
78019: PUSH
78020: LD_EXP 61
78024: PUSH
78025: LD_VAR 0 5
78029: ARRAY
78030: IN
78031: IFFALSE 78070
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
78033: LD_ADDR_EXP 61
78037: PUSH
78038: LD_EXP 61
78042: PPUSH
78043: LD_VAR 0 5
78047: PPUSH
78048: LD_EXP 61
78052: PUSH
78053: LD_VAR 0 5
78057: ARRAY
78058: PUSH
78059: LD_VAR 0 1
78063: DIFF
78064: PPUSH
78065: CALL_OW 1
78069: ST_TO_ADDR
// break ;
78070: GO 78074
// end ;
78072: GO 77892
78074: POP
78075: POP
// end ;
78076: LD_VAR 0 4
78080: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
78081: LD_INT 0
78083: PPUSH
78084: PPUSH
78085: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
78086: LD_EXP 52
78090: NOT
78091: PUSH
78092: LD_EXP 50
78096: NOT
78097: OR
78098: PUSH
78099: LD_VAR 0 3
78103: PUSH
78104: LD_EXP 78
78108: IN
78109: NOT
78110: OR
78111: IFFALSE 78115
// exit ;
78113: GO 78238
// for i = 1 to mc_vehicles do
78115: LD_ADDR_VAR 0 6
78119: PUSH
78120: DOUBLE
78121: LD_INT 1
78123: DEC
78124: ST_TO_ADDR
78125: LD_EXP 71
78129: PUSH
78130: FOR_TO
78131: IFFALSE 78236
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
78133: LD_VAR 0 2
78137: PUSH
78138: LD_EXP 71
78142: PUSH
78143: LD_VAR 0 6
78147: ARRAY
78148: IN
78149: PUSH
78150: LD_VAR 0 1
78154: PUSH
78155: LD_EXP 71
78159: PUSH
78160: LD_VAR 0 6
78164: ARRAY
78165: IN
78166: OR
78167: IFFALSE 78234
// begin tmp := mc_vehicles [ i ] diff old ;
78169: LD_ADDR_VAR 0 7
78173: PUSH
78174: LD_EXP 71
78178: PUSH
78179: LD_VAR 0 6
78183: ARRAY
78184: PUSH
78185: LD_VAR 0 2
78189: DIFF
78190: ST_TO_ADDR
// tmp := tmp diff new ;
78191: LD_ADDR_VAR 0 7
78195: PUSH
78196: LD_VAR 0 7
78200: PUSH
78201: LD_VAR 0 1
78205: DIFF
78206: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
78207: LD_ADDR_EXP 71
78211: PUSH
78212: LD_EXP 71
78216: PPUSH
78217: LD_VAR 0 6
78221: PPUSH
78222: LD_VAR 0 7
78226: PPUSH
78227: CALL_OW 1
78231: ST_TO_ADDR
// break ;
78232: GO 78236
// end ;
78234: GO 78130
78236: POP
78237: POP
// end ;
78238: LD_VAR 0 5
78242: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
78243: LD_INT 0
78245: PPUSH
78246: PPUSH
78247: PPUSH
78248: PPUSH
// if not mc_bases or not skirmish then
78249: LD_EXP 52
78253: NOT
78254: PUSH
78255: LD_EXP 50
78259: NOT
78260: OR
78261: IFFALSE 78265
// exit ;
78263: GO 78642
// side := GetSide ( vehicle ) ;
78265: LD_ADDR_VAR 0 5
78269: PUSH
78270: LD_VAR 0 1
78274: PPUSH
78275: CALL_OW 255
78279: ST_TO_ADDR
// for i = 1 to mc_bases do
78280: LD_ADDR_VAR 0 4
78284: PUSH
78285: DOUBLE
78286: LD_INT 1
78288: DEC
78289: ST_TO_ADDR
78290: LD_EXP 52
78294: PUSH
78295: FOR_TO
78296: IFFALSE 78640
// begin if factory in mc_bases [ i ] then
78298: LD_VAR 0 2
78302: PUSH
78303: LD_EXP 52
78307: PUSH
78308: LD_VAR 0 4
78312: ARRAY
78313: IN
78314: IFFALSE 78638
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
78316: LD_EXP 74
78320: PUSH
78321: LD_VAR 0 4
78325: ARRAY
78326: PUSH
78327: LD_EXP 63
78331: PUSH
78332: LD_VAR 0 4
78336: ARRAY
78337: LESS
78338: PUSH
78339: LD_VAR 0 1
78343: PPUSH
78344: CALL_OW 264
78348: PUSH
78349: LD_INT 31
78351: PUSH
78352: LD_INT 32
78354: PUSH
78355: LD_INT 51
78357: PUSH
78358: LD_EXP 46
78362: PUSH
78363: LD_INT 12
78365: PUSH
78366: LD_INT 30
78368: PUSH
78369: LD_EXP 45
78373: PUSH
78374: LD_INT 11
78376: PUSH
78377: LD_INT 53
78379: PUSH
78380: LD_INT 14
78382: PUSH
78383: LD_EXP 49
78387: PUSH
78388: LD_INT 29
78390: PUSH
78391: LD_EXP 47
78395: PUSH
78396: LD_INT 13
78398: PUSH
78399: LD_INT 52
78401: PUSH
78402: LD_INT 48
78404: PUSH
78405: LD_INT 8
78407: PUSH
78408: EMPTY
78409: LIST
78410: LIST
78411: LIST
78412: LIST
78413: LIST
78414: LIST
78415: LIST
78416: LIST
78417: LIST
78418: LIST
78419: LIST
78420: LIST
78421: LIST
78422: LIST
78423: LIST
78424: LIST
78425: LIST
78426: IN
78427: NOT
78428: AND
78429: IFFALSE 78477
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
78431: LD_ADDR_EXP 74
78435: PUSH
78436: LD_EXP 74
78440: PPUSH
78441: LD_VAR 0 4
78445: PUSH
78446: LD_EXP 74
78450: PUSH
78451: LD_VAR 0 4
78455: ARRAY
78456: PUSH
78457: LD_INT 1
78459: PLUS
78460: PUSH
78461: EMPTY
78462: LIST
78463: LIST
78464: PPUSH
78465: LD_VAR 0 1
78469: PPUSH
78470: CALL 16921 0 3
78474: ST_TO_ADDR
78475: GO 78521
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
78477: LD_ADDR_EXP 71
78481: PUSH
78482: LD_EXP 71
78486: PPUSH
78487: LD_VAR 0 4
78491: PUSH
78492: LD_EXP 71
78496: PUSH
78497: LD_VAR 0 4
78501: ARRAY
78502: PUSH
78503: LD_INT 1
78505: PLUS
78506: PUSH
78507: EMPTY
78508: LIST
78509: LIST
78510: PPUSH
78511: LD_VAR 0 1
78515: PPUSH
78516: CALL 16921 0 3
78520: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
78521: LD_VAR 0 1
78525: PPUSH
78526: CALL_OW 263
78530: PUSH
78531: LD_INT 2
78533: EQUAL
78534: IFFALSE 78554
// begin repeat wait ( 0 0$1 ) ;
78536: LD_INT 35
78538: PPUSH
78539: CALL_OW 67
// until IsControledBy ( vehicle ) ;
78543: LD_VAR 0 1
78547: PPUSH
78548: CALL_OW 312
78552: IFFALSE 78536
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
78554: LD_VAR 0 1
78558: PPUSH
78559: LD_EXP 76
78563: PUSH
78564: LD_VAR 0 4
78568: ARRAY
78569: PPUSH
78570: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
78574: LD_VAR 0 1
78578: PPUSH
78579: CALL_OW 263
78583: PUSH
78584: LD_INT 1
78586: NONEQUAL
78587: IFFALSE 78591
// break ;
78589: GO 78640
// repeat wait ( 0 0$1 ) ;
78591: LD_INT 35
78593: PPUSH
78594: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
78598: LD_VAR 0 1
78602: PPUSH
78603: LD_EXP 76
78607: PUSH
78608: LD_VAR 0 4
78612: ARRAY
78613: PPUSH
78614: CALL_OW 308
78618: IFFALSE 78591
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
78620: LD_VAR 0 1
78624: PPUSH
78625: CALL_OW 311
78629: PPUSH
78630: CALL_OW 121
// exit ;
78634: POP
78635: POP
78636: GO 78642
// end ; end ;
78638: GO 78295
78640: POP
78641: POP
// end ;
78642: LD_VAR 0 3
78646: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
78647: LD_INT 0
78649: PPUSH
78650: PPUSH
78651: PPUSH
78652: PPUSH
// if not mc_bases or not skirmish then
78653: LD_EXP 52
78657: NOT
78658: PUSH
78659: LD_EXP 50
78663: NOT
78664: OR
78665: IFFALSE 78669
// exit ;
78667: GO 79022
// repeat wait ( 0 0$1 ) ;
78669: LD_INT 35
78671: PPUSH
78672: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
78676: LD_VAR 0 2
78680: PPUSH
78681: LD_VAR 0 3
78685: PPUSH
78686: CALL_OW 284
78690: IFFALSE 78669
// if GetResourceTypeXY ( x , y ) = mat_artefact then
78692: LD_VAR 0 2
78696: PPUSH
78697: LD_VAR 0 3
78701: PPUSH
78702: CALL_OW 283
78706: PUSH
78707: LD_INT 4
78709: EQUAL
78710: IFFALSE 78714
// exit ;
78712: GO 79022
// for i = 1 to mc_bases do
78714: LD_ADDR_VAR 0 7
78718: PUSH
78719: DOUBLE
78720: LD_INT 1
78722: DEC
78723: ST_TO_ADDR
78724: LD_EXP 52
78728: PUSH
78729: FOR_TO
78730: IFFALSE 79020
// begin if mc_crates_area [ i ] then
78732: LD_EXP 70
78736: PUSH
78737: LD_VAR 0 7
78741: ARRAY
78742: IFFALSE 78853
// for j in mc_crates_area [ i ] do
78744: LD_ADDR_VAR 0 8
78748: PUSH
78749: LD_EXP 70
78753: PUSH
78754: LD_VAR 0 7
78758: ARRAY
78759: PUSH
78760: FOR_IN
78761: IFFALSE 78851
// if InArea ( x , y , j ) then
78763: LD_VAR 0 2
78767: PPUSH
78768: LD_VAR 0 3
78772: PPUSH
78773: LD_VAR 0 8
78777: PPUSH
78778: CALL_OW 309
78782: IFFALSE 78849
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
78784: LD_ADDR_EXP 68
78788: PUSH
78789: LD_EXP 68
78793: PPUSH
78794: LD_VAR 0 7
78798: PUSH
78799: LD_EXP 68
78803: PUSH
78804: LD_VAR 0 7
78808: ARRAY
78809: PUSH
78810: LD_INT 1
78812: PLUS
78813: PUSH
78814: EMPTY
78815: LIST
78816: LIST
78817: PPUSH
78818: LD_VAR 0 4
78822: PUSH
78823: LD_VAR 0 2
78827: PUSH
78828: LD_VAR 0 3
78832: PUSH
78833: EMPTY
78834: LIST
78835: LIST
78836: LIST
78837: PPUSH
78838: CALL 16921 0 3
78842: ST_TO_ADDR
// exit ;
78843: POP
78844: POP
78845: POP
78846: POP
78847: GO 79022
// end ;
78849: GO 78760
78851: POP
78852: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
78853: LD_ADDR_VAR 0 9
78857: PUSH
78858: LD_EXP 52
78862: PUSH
78863: LD_VAR 0 7
78867: ARRAY
78868: PPUSH
78869: LD_INT 2
78871: PUSH
78872: LD_INT 30
78874: PUSH
78875: LD_INT 0
78877: PUSH
78878: EMPTY
78879: LIST
78880: LIST
78881: PUSH
78882: LD_INT 30
78884: PUSH
78885: LD_INT 1
78887: PUSH
78888: EMPTY
78889: LIST
78890: LIST
78891: PUSH
78892: EMPTY
78893: LIST
78894: LIST
78895: LIST
78896: PPUSH
78897: CALL_OW 72
78901: ST_TO_ADDR
// if not depot then
78902: LD_VAR 0 9
78906: NOT
78907: IFFALSE 78911
// continue ;
78909: GO 78729
// for j in depot do
78911: LD_ADDR_VAR 0 8
78915: PUSH
78916: LD_VAR 0 9
78920: PUSH
78921: FOR_IN
78922: IFFALSE 79016
// if GetDistUnitXY ( j , x , y ) < 30 then
78924: LD_VAR 0 8
78928: PPUSH
78929: LD_VAR 0 2
78933: PPUSH
78934: LD_VAR 0 3
78938: PPUSH
78939: CALL_OW 297
78943: PUSH
78944: LD_INT 30
78946: LESS
78947: IFFALSE 79014
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
78949: LD_ADDR_EXP 68
78953: PUSH
78954: LD_EXP 68
78958: PPUSH
78959: LD_VAR 0 7
78963: PUSH
78964: LD_EXP 68
78968: PUSH
78969: LD_VAR 0 7
78973: ARRAY
78974: PUSH
78975: LD_INT 1
78977: PLUS
78978: PUSH
78979: EMPTY
78980: LIST
78981: LIST
78982: PPUSH
78983: LD_VAR 0 4
78987: PUSH
78988: LD_VAR 0 2
78992: PUSH
78993: LD_VAR 0 3
78997: PUSH
78998: EMPTY
78999: LIST
79000: LIST
79001: LIST
79002: PPUSH
79003: CALL 16921 0 3
79007: ST_TO_ADDR
// exit ;
79008: POP
79009: POP
79010: POP
79011: POP
79012: GO 79022
// end ;
79014: GO 78921
79016: POP
79017: POP
// end ;
79018: GO 78729
79020: POP
79021: POP
// end ;
79022: LD_VAR 0 6
79026: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
79027: LD_INT 0
79029: PPUSH
79030: PPUSH
79031: PPUSH
79032: PPUSH
// if not mc_bases or not skirmish then
79033: LD_EXP 52
79037: NOT
79038: PUSH
79039: LD_EXP 50
79043: NOT
79044: OR
79045: IFFALSE 79049
// exit ;
79047: GO 79326
// side := GetSide ( lab ) ;
79049: LD_ADDR_VAR 0 4
79053: PUSH
79054: LD_VAR 0 2
79058: PPUSH
79059: CALL_OW 255
79063: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
79064: LD_VAR 0 4
79068: PUSH
79069: LD_EXP 78
79073: IN
79074: NOT
79075: PUSH
79076: LD_EXP 79
79080: NOT
79081: OR
79082: PUSH
79083: LD_EXP 52
79087: NOT
79088: OR
79089: IFFALSE 79093
// exit ;
79091: GO 79326
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
79093: LD_ADDR_EXP 79
79097: PUSH
79098: LD_EXP 79
79102: PPUSH
79103: LD_VAR 0 4
79107: PPUSH
79108: LD_EXP 79
79112: PUSH
79113: LD_VAR 0 4
79117: ARRAY
79118: PUSH
79119: LD_VAR 0 1
79123: DIFF
79124: PPUSH
79125: CALL_OW 1
79129: ST_TO_ADDR
// for i = 1 to mc_bases do
79130: LD_ADDR_VAR 0 5
79134: PUSH
79135: DOUBLE
79136: LD_INT 1
79138: DEC
79139: ST_TO_ADDR
79140: LD_EXP 52
79144: PUSH
79145: FOR_TO
79146: IFFALSE 79324
// begin if lab in mc_bases [ i ] then
79148: LD_VAR 0 2
79152: PUSH
79153: LD_EXP 52
79157: PUSH
79158: LD_VAR 0 5
79162: ARRAY
79163: IN
79164: IFFALSE 79322
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
79166: LD_VAR 0 1
79170: PUSH
79171: LD_INT 11
79173: PUSH
79174: LD_INT 4
79176: PUSH
79177: LD_INT 3
79179: PUSH
79180: LD_INT 2
79182: PUSH
79183: EMPTY
79184: LIST
79185: LIST
79186: LIST
79187: LIST
79188: IN
79189: PUSH
79190: LD_EXP 82
79194: PUSH
79195: LD_VAR 0 5
79199: ARRAY
79200: AND
79201: IFFALSE 79322
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
79203: LD_ADDR_VAR 0 6
79207: PUSH
79208: LD_EXP 82
79212: PUSH
79213: LD_VAR 0 5
79217: ARRAY
79218: PUSH
79219: LD_INT 1
79221: ARRAY
79222: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
79223: LD_ADDR_EXP 82
79227: PUSH
79228: LD_EXP 82
79232: PPUSH
79233: LD_VAR 0 5
79237: PPUSH
79238: EMPTY
79239: PPUSH
79240: CALL_OW 1
79244: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
79245: LD_VAR 0 6
79249: PPUSH
79250: LD_INT 0
79252: PPUSH
79253: CALL_OW 109
// ComExitBuilding ( tmp ) ;
79257: LD_VAR 0 6
79261: PPUSH
79262: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
79266: LD_ADDR_EXP 81
79270: PUSH
79271: LD_EXP 81
79275: PPUSH
79276: LD_VAR 0 5
79280: PPUSH
79281: LD_EXP 81
79285: PUSH
79286: LD_VAR 0 5
79290: ARRAY
79291: PPUSH
79292: LD_INT 1
79294: PPUSH
79295: LD_VAR 0 6
79299: PPUSH
79300: CALL_OW 2
79304: PPUSH
79305: CALL_OW 1
79309: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
79310: LD_VAR 0 5
79314: PPUSH
79315: LD_INT 112
79317: PPUSH
79318: CALL 56859 0 2
// end ; end ; end ;
79322: GO 79145
79324: POP
79325: POP
// end ;
79326: LD_VAR 0 3
79330: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
79331: LD_INT 0
79333: PPUSH
79334: PPUSH
79335: PPUSH
79336: PPUSH
79337: PPUSH
79338: PPUSH
79339: PPUSH
79340: PPUSH
// if not mc_bases or not skirmish then
79341: LD_EXP 52
79345: NOT
79346: PUSH
79347: LD_EXP 50
79351: NOT
79352: OR
79353: IFFALSE 79357
// exit ;
79355: GO 80449
// for i = 1 to mc_bases do
79357: LD_ADDR_VAR 0 3
79361: PUSH
79362: DOUBLE
79363: LD_INT 1
79365: DEC
79366: ST_TO_ADDR
79367: LD_EXP 52
79371: PUSH
79372: FOR_TO
79373: IFFALSE 80447
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
79375: LD_VAR 0 1
79379: PUSH
79380: LD_EXP 52
79384: PUSH
79385: LD_VAR 0 3
79389: ARRAY
79390: IN
79391: PUSH
79392: LD_VAR 0 1
79396: PUSH
79397: LD_EXP 59
79401: PUSH
79402: LD_VAR 0 3
79406: ARRAY
79407: IN
79408: OR
79409: PUSH
79410: LD_VAR 0 1
79414: PUSH
79415: LD_EXP 74
79419: PUSH
79420: LD_VAR 0 3
79424: ARRAY
79425: IN
79426: OR
79427: PUSH
79428: LD_VAR 0 1
79432: PUSH
79433: LD_EXP 71
79437: PUSH
79438: LD_VAR 0 3
79442: ARRAY
79443: IN
79444: OR
79445: PUSH
79446: LD_VAR 0 1
79450: PUSH
79451: LD_EXP 81
79455: PUSH
79456: LD_VAR 0 3
79460: ARRAY
79461: IN
79462: OR
79463: PUSH
79464: LD_VAR 0 1
79468: PUSH
79469: LD_EXP 82
79473: PUSH
79474: LD_VAR 0 3
79478: ARRAY
79479: IN
79480: OR
79481: IFFALSE 80445
// begin if un in mc_ape [ i ] then
79483: LD_VAR 0 1
79487: PUSH
79488: LD_EXP 81
79492: PUSH
79493: LD_VAR 0 3
79497: ARRAY
79498: IN
79499: IFFALSE 79538
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
79501: LD_ADDR_EXP 81
79505: PUSH
79506: LD_EXP 81
79510: PPUSH
79511: LD_VAR 0 3
79515: PPUSH
79516: LD_EXP 81
79520: PUSH
79521: LD_VAR 0 3
79525: ARRAY
79526: PUSH
79527: LD_VAR 0 1
79531: DIFF
79532: PPUSH
79533: CALL_OW 1
79537: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
79538: LD_VAR 0 1
79542: PUSH
79543: LD_EXP 82
79547: PUSH
79548: LD_VAR 0 3
79552: ARRAY
79553: IN
79554: IFFALSE 79578
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
79556: LD_ADDR_EXP 82
79560: PUSH
79561: LD_EXP 82
79565: PPUSH
79566: LD_VAR 0 3
79570: PPUSH
79571: EMPTY
79572: PPUSH
79573: CALL_OW 1
79577: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] ) then
79578: LD_VAR 0 1
79582: PPUSH
79583: CALL_OW 247
79587: PUSH
79588: LD_INT 2
79590: EQUAL
79591: PUSH
79592: LD_VAR 0 1
79596: PPUSH
79597: CALL_OW 110
79601: PUSH
79602: LD_INT 20
79604: EQUAL
79605: PUSH
79606: LD_VAR 0 1
79610: PUSH
79611: LD_EXP 74
79615: PUSH
79616: LD_VAR 0 3
79620: ARRAY
79621: IN
79622: OR
79623: AND
79624: IFFALSE 79785
// begin if un in mc_defender [ i ] then
79626: LD_VAR 0 1
79630: PUSH
79631: LD_EXP 74
79635: PUSH
79636: LD_VAR 0 3
79640: ARRAY
79641: IN
79642: IFFALSE 79681
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
79644: LD_ADDR_EXP 74
79648: PUSH
79649: LD_EXP 74
79653: PPUSH
79654: LD_VAR 0 3
79658: PPUSH
79659: LD_EXP 74
79663: PUSH
79664: LD_VAR 0 3
79668: ARRAY
79669: PUSH
79670: LD_VAR 0 1
79674: DIFF
79675: PPUSH
79676: CALL_OW 1
79680: ST_TO_ADDR
// fac := MC_GetBuilding ( i , b_factory ) ;
79681: LD_ADDR_VAR 0 8
79685: PUSH
79686: LD_VAR 0 3
79690: PPUSH
79691: LD_INT 3
79693: PPUSH
79694: CALL 76374 0 2
79698: ST_TO_ADDR
// if fac then
79699: LD_VAR 0 8
79703: IFFALSE 79785
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
79705: LD_ADDR_VAR 0 9
79709: PUSH
79710: LD_VAR 0 8
79714: PPUSH
79715: LD_VAR 0 1
79719: PPUSH
79720: CALL_OW 265
79724: PPUSH
79725: LD_VAR 0 1
79729: PPUSH
79730: CALL_OW 262
79734: PPUSH
79735: LD_VAR 0 1
79739: PPUSH
79740: CALL_OW 263
79744: PPUSH
79745: LD_VAR 0 1
79749: PPUSH
79750: CALL_OW 264
79754: PPUSH
79755: CALL 14514 0 5
79759: ST_TO_ADDR
// if components then
79760: LD_VAR 0 9
79764: IFFALSE 79783
// MC_InsertProduceList ( i , [ components ] ) ;
79766: LD_VAR 0 3
79770: PPUSH
79771: LD_VAR 0 9
79775: PUSH
79776: EMPTY
79777: LIST
79778: PPUSH
79779: CALL 76002 0 2
// break ;
79783: GO 80447
// end ; end ; if GetType ( un ) = unit_building then
79785: LD_VAR 0 1
79789: PPUSH
79790: CALL_OW 247
79794: PUSH
79795: LD_INT 3
79797: EQUAL
79798: IFFALSE 80113
// begin btype := GetBType ( un ) ;
79800: LD_ADDR_VAR 0 5
79804: PUSH
79805: LD_VAR 0 1
79809: PPUSH
79810: CALL_OW 266
79814: ST_TO_ADDR
// if btype = b_warehouse then
79815: LD_VAR 0 5
79819: PUSH
79820: LD_INT 1
79822: EQUAL
79823: IFFALSE 79841
// begin btype := b_depot ;
79825: LD_ADDR_VAR 0 5
79829: PUSH
79830: LD_INT 0
79832: ST_TO_ADDR
// pos := 1 ;
79833: LD_ADDR_VAR 0 6
79837: PUSH
79838: LD_INT 1
79840: ST_TO_ADDR
// end ; if btype = b_factory then
79841: LD_VAR 0 5
79845: PUSH
79846: LD_INT 3
79848: EQUAL
79849: IFFALSE 79867
// begin btype := b_workshop ;
79851: LD_ADDR_VAR 0 5
79855: PUSH
79856: LD_INT 2
79858: ST_TO_ADDR
// pos := 1 ;
79859: LD_ADDR_VAR 0 6
79863: PUSH
79864: LD_INT 1
79866: ST_TO_ADDR
// end ; if btype = b_barracks then
79867: LD_VAR 0 5
79871: PUSH
79872: LD_INT 5
79874: EQUAL
79875: IFFALSE 79885
// btype := b_armoury ;
79877: LD_ADDR_VAR 0 5
79881: PUSH
79882: LD_INT 4
79884: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
79885: LD_VAR 0 5
79889: PUSH
79890: LD_INT 7
79892: PUSH
79893: LD_INT 8
79895: PUSH
79896: EMPTY
79897: LIST
79898: LIST
79899: IN
79900: IFFALSE 79910
// btype := b_lab ;
79902: LD_ADDR_VAR 0 5
79906: PUSH
79907: LD_INT 6
79909: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
79910: LD_ADDR_EXP 57
79914: PUSH
79915: LD_EXP 57
79919: PPUSH
79920: LD_VAR 0 3
79924: PUSH
79925: LD_EXP 57
79929: PUSH
79930: LD_VAR 0 3
79934: ARRAY
79935: PUSH
79936: LD_INT 1
79938: PLUS
79939: PUSH
79940: EMPTY
79941: LIST
79942: LIST
79943: PPUSH
79944: LD_VAR 0 5
79948: PUSH
79949: LD_VAR 0 1
79953: PPUSH
79954: CALL_OW 250
79958: PUSH
79959: LD_VAR 0 1
79963: PPUSH
79964: CALL_OW 251
79968: PUSH
79969: LD_VAR 0 1
79973: PPUSH
79974: CALL_OW 254
79978: PUSH
79979: EMPTY
79980: LIST
79981: LIST
79982: LIST
79983: LIST
79984: PPUSH
79985: CALL 16921 0 3
79989: ST_TO_ADDR
// if pos = 1 then
79990: LD_VAR 0 6
79994: PUSH
79995: LD_INT 1
79997: EQUAL
79998: IFFALSE 80113
// begin tmp := mc_build_list [ i ] ;
80000: LD_ADDR_VAR 0 7
80004: PUSH
80005: LD_EXP 57
80009: PUSH
80010: LD_VAR 0 3
80014: ARRAY
80015: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
80016: LD_VAR 0 7
80020: PPUSH
80021: LD_INT 2
80023: PUSH
80024: LD_INT 30
80026: PUSH
80027: LD_INT 0
80029: PUSH
80030: EMPTY
80031: LIST
80032: LIST
80033: PUSH
80034: LD_INT 30
80036: PUSH
80037: LD_INT 1
80039: PUSH
80040: EMPTY
80041: LIST
80042: LIST
80043: PUSH
80044: EMPTY
80045: LIST
80046: LIST
80047: LIST
80048: PPUSH
80049: CALL_OW 72
80053: IFFALSE 80063
// pos := 2 ;
80055: LD_ADDR_VAR 0 6
80059: PUSH
80060: LD_INT 2
80062: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
80063: LD_ADDR_VAR 0 7
80067: PUSH
80068: LD_VAR 0 7
80072: PPUSH
80073: LD_VAR 0 6
80077: PPUSH
80078: LD_VAR 0 7
80082: PPUSH
80083: CALL 17247 0 3
80087: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
80088: LD_ADDR_EXP 57
80092: PUSH
80093: LD_EXP 57
80097: PPUSH
80098: LD_VAR 0 3
80102: PPUSH
80103: LD_VAR 0 7
80107: PPUSH
80108: CALL_OW 1
80112: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
80113: LD_VAR 0 1
80117: PUSH
80118: LD_EXP 52
80122: PUSH
80123: LD_VAR 0 3
80127: ARRAY
80128: IN
80129: IFFALSE 80168
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
80131: LD_ADDR_EXP 52
80135: PUSH
80136: LD_EXP 52
80140: PPUSH
80141: LD_VAR 0 3
80145: PPUSH
80146: LD_EXP 52
80150: PUSH
80151: LD_VAR 0 3
80155: ARRAY
80156: PUSH
80157: LD_VAR 0 1
80161: DIFF
80162: PPUSH
80163: CALL_OW 1
80167: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
80168: LD_VAR 0 1
80172: PUSH
80173: LD_EXP 59
80177: PUSH
80178: LD_VAR 0 3
80182: ARRAY
80183: IN
80184: IFFALSE 80223
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
80186: LD_ADDR_EXP 59
80190: PUSH
80191: LD_EXP 59
80195: PPUSH
80196: LD_VAR 0 3
80200: PPUSH
80201: LD_EXP 59
80205: PUSH
80206: LD_VAR 0 3
80210: ARRAY
80211: PUSH
80212: LD_VAR 0 1
80216: DIFF
80217: PPUSH
80218: CALL_OW 1
80222: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
80223: LD_VAR 0 1
80227: PUSH
80228: LD_EXP 71
80232: PUSH
80233: LD_VAR 0 3
80237: ARRAY
80238: IN
80239: IFFALSE 80278
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
80241: LD_ADDR_EXP 71
80245: PUSH
80246: LD_EXP 71
80250: PPUSH
80251: LD_VAR 0 3
80255: PPUSH
80256: LD_EXP 71
80260: PUSH
80261: LD_VAR 0 3
80265: ARRAY
80266: PUSH
80267: LD_VAR 0 1
80271: DIFF
80272: PPUSH
80273: CALL_OW 1
80277: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
80278: LD_VAR 0 1
80282: PUSH
80283: LD_EXP 74
80287: PUSH
80288: LD_VAR 0 3
80292: ARRAY
80293: IN
80294: IFFALSE 80333
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
80296: LD_ADDR_EXP 74
80300: PUSH
80301: LD_EXP 74
80305: PPUSH
80306: LD_VAR 0 3
80310: PPUSH
80311: LD_EXP 74
80315: PUSH
80316: LD_VAR 0 3
80320: ARRAY
80321: PUSH
80322: LD_VAR 0 1
80326: DIFF
80327: PPUSH
80328: CALL_OW 1
80332: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
80333: LD_VAR 0 1
80337: PUSH
80338: LD_EXP 61
80342: PUSH
80343: LD_VAR 0 3
80347: ARRAY
80348: IN
80349: IFFALSE 80388
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
80351: LD_ADDR_EXP 61
80355: PUSH
80356: LD_EXP 61
80360: PPUSH
80361: LD_VAR 0 3
80365: PPUSH
80366: LD_EXP 61
80370: PUSH
80371: LD_VAR 0 3
80375: ARRAY
80376: PUSH
80377: LD_VAR 0 1
80381: DIFF
80382: PPUSH
80383: CALL_OW 1
80387: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
80388: LD_VAR 0 1
80392: PUSH
80393: LD_EXP 60
80397: PUSH
80398: LD_VAR 0 3
80402: ARRAY
80403: IN
80404: IFFALSE 80443
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
80406: LD_ADDR_EXP 60
80410: PUSH
80411: LD_EXP 60
80415: PPUSH
80416: LD_VAR 0 3
80420: PPUSH
80421: LD_EXP 60
80425: PUSH
80426: LD_VAR 0 3
80430: ARRAY
80431: PUSH
80432: LD_VAR 0 1
80436: DIFF
80437: PPUSH
80438: CALL_OW 1
80442: ST_TO_ADDR
// end ; break ;
80443: GO 80447
// end ;
80445: GO 79372
80447: POP
80448: POP
// end ;
80449: LD_VAR 0 2
80453: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
80454: LD_INT 0
80456: PPUSH
80457: PPUSH
80458: PPUSH
// if not mc_bases or not skirmish then
80459: LD_EXP 52
80463: NOT
80464: PUSH
80465: LD_EXP 50
80469: NOT
80470: OR
80471: IFFALSE 80475
// exit ;
80473: GO 80690
// for i = 1 to mc_bases do
80475: LD_ADDR_VAR 0 3
80479: PUSH
80480: DOUBLE
80481: LD_INT 1
80483: DEC
80484: ST_TO_ADDR
80485: LD_EXP 52
80489: PUSH
80490: FOR_TO
80491: IFFALSE 80688
// begin if building in mc_construct_list [ i ] then
80493: LD_VAR 0 1
80497: PUSH
80498: LD_EXP 59
80502: PUSH
80503: LD_VAR 0 3
80507: ARRAY
80508: IN
80509: IFFALSE 80686
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
80511: LD_ADDR_EXP 59
80515: PUSH
80516: LD_EXP 59
80520: PPUSH
80521: LD_VAR 0 3
80525: PPUSH
80526: LD_EXP 59
80530: PUSH
80531: LD_VAR 0 3
80535: ARRAY
80536: PUSH
80537: LD_VAR 0 1
80541: DIFF
80542: PPUSH
80543: CALL_OW 1
80547: ST_TO_ADDR
// if building in mc_lab [ i ] then
80548: LD_VAR 0 1
80552: PUSH
80553: LD_EXP 85
80557: PUSH
80558: LD_VAR 0 3
80562: ARRAY
80563: IN
80564: IFFALSE 80619
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
80566: LD_ADDR_EXP 86
80570: PUSH
80571: LD_EXP 86
80575: PPUSH
80576: LD_VAR 0 3
80580: PPUSH
80581: LD_EXP 86
80585: PUSH
80586: LD_VAR 0 3
80590: ARRAY
80591: PPUSH
80592: LD_INT 1
80594: PPUSH
80595: LD_EXP 86
80599: PUSH
80600: LD_VAR 0 3
80604: ARRAY
80605: PPUSH
80606: LD_INT 0
80608: PPUSH
80609: CALL 16339 0 4
80613: PPUSH
80614: CALL_OW 1
80618: ST_TO_ADDR
// if not building in mc_bases [ i ] then
80619: LD_VAR 0 1
80623: PUSH
80624: LD_EXP 52
80628: PUSH
80629: LD_VAR 0 3
80633: ARRAY
80634: IN
80635: NOT
80636: IFFALSE 80682
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
80638: LD_ADDR_EXP 52
80642: PUSH
80643: LD_EXP 52
80647: PPUSH
80648: LD_VAR 0 3
80652: PUSH
80653: LD_EXP 52
80657: PUSH
80658: LD_VAR 0 3
80662: ARRAY
80663: PUSH
80664: LD_INT 1
80666: PLUS
80667: PUSH
80668: EMPTY
80669: LIST
80670: LIST
80671: PPUSH
80672: LD_VAR 0 1
80676: PPUSH
80677: CALL 16921 0 3
80681: ST_TO_ADDR
// exit ;
80682: POP
80683: POP
80684: GO 80690
// end ; end ;
80686: GO 80490
80688: POP
80689: POP
// end ;
80690: LD_VAR 0 2
80694: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
80695: LD_INT 0
80697: PPUSH
80698: PPUSH
80699: PPUSH
80700: PPUSH
80701: PPUSH
80702: PPUSH
80703: PPUSH
// if not mc_bases or not skirmish then
80704: LD_EXP 52
80708: NOT
80709: PUSH
80710: LD_EXP 50
80714: NOT
80715: OR
80716: IFFALSE 80720
// exit ;
80718: GO 81381
// for i = 1 to mc_bases do
80720: LD_ADDR_VAR 0 3
80724: PUSH
80725: DOUBLE
80726: LD_INT 1
80728: DEC
80729: ST_TO_ADDR
80730: LD_EXP 52
80734: PUSH
80735: FOR_TO
80736: IFFALSE 81379
// begin if building in mc_construct_list [ i ] then
80738: LD_VAR 0 1
80742: PUSH
80743: LD_EXP 59
80747: PUSH
80748: LD_VAR 0 3
80752: ARRAY
80753: IN
80754: IFFALSE 81377
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
80756: LD_ADDR_EXP 59
80760: PUSH
80761: LD_EXP 59
80765: PPUSH
80766: LD_VAR 0 3
80770: PPUSH
80771: LD_EXP 59
80775: PUSH
80776: LD_VAR 0 3
80780: ARRAY
80781: PUSH
80782: LD_VAR 0 1
80786: DIFF
80787: PPUSH
80788: CALL_OW 1
80792: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
80793: LD_ADDR_EXP 52
80797: PUSH
80798: LD_EXP 52
80802: PPUSH
80803: LD_VAR 0 3
80807: PUSH
80808: LD_EXP 52
80812: PUSH
80813: LD_VAR 0 3
80817: ARRAY
80818: PUSH
80819: LD_INT 1
80821: PLUS
80822: PUSH
80823: EMPTY
80824: LIST
80825: LIST
80826: PPUSH
80827: LD_VAR 0 1
80831: PPUSH
80832: CALL 16921 0 3
80836: ST_TO_ADDR
// btype := GetBType ( building ) ;
80837: LD_ADDR_VAR 0 5
80841: PUSH
80842: LD_VAR 0 1
80846: PPUSH
80847: CALL_OW 266
80851: ST_TO_ADDR
// side := GetSide ( building ) ;
80852: LD_ADDR_VAR 0 8
80856: PUSH
80857: LD_VAR 0 1
80861: PPUSH
80862: CALL_OW 255
80866: ST_TO_ADDR
// if btype = b_lab then
80867: LD_VAR 0 5
80871: PUSH
80872: LD_INT 6
80874: EQUAL
80875: IFFALSE 80925
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
80877: LD_ADDR_EXP 85
80881: PUSH
80882: LD_EXP 85
80886: PPUSH
80887: LD_VAR 0 3
80891: PUSH
80892: LD_EXP 85
80896: PUSH
80897: LD_VAR 0 3
80901: ARRAY
80902: PUSH
80903: LD_INT 1
80905: PLUS
80906: PUSH
80907: EMPTY
80908: LIST
80909: LIST
80910: PPUSH
80911: LD_VAR 0 1
80915: PPUSH
80916: CALL 16921 0 3
80920: ST_TO_ADDR
// exit ;
80921: POP
80922: POP
80923: GO 81381
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
80925: LD_VAR 0 5
80929: PUSH
80930: LD_INT 0
80932: PUSH
80933: LD_INT 2
80935: PUSH
80936: LD_INT 4
80938: PUSH
80939: EMPTY
80940: LIST
80941: LIST
80942: LIST
80943: IN
80944: IFFALSE 81068
// begin if btype = b_armoury then
80946: LD_VAR 0 5
80950: PUSH
80951: LD_INT 4
80953: EQUAL
80954: IFFALSE 80964
// btype := b_barracks ;
80956: LD_ADDR_VAR 0 5
80960: PUSH
80961: LD_INT 5
80963: ST_TO_ADDR
// if btype = b_depot then
80964: LD_VAR 0 5
80968: PUSH
80969: LD_INT 0
80971: EQUAL
80972: IFFALSE 80982
// btype := b_warehouse ;
80974: LD_ADDR_VAR 0 5
80978: PUSH
80979: LD_INT 1
80981: ST_TO_ADDR
// if btype = b_workshop then
80982: LD_VAR 0 5
80986: PUSH
80987: LD_INT 2
80989: EQUAL
80990: IFFALSE 81000
// btype := b_factory ;
80992: LD_ADDR_VAR 0 5
80996: PUSH
80997: LD_INT 3
80999: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
81000: LD_VAR 0 5
81004: PPUSH
81005: LD_VAR 0 8
81009: PPUSH
81010: CALL_OW 323
81014: PUSH
81015: LD_INT 1
81017: EQUAL
81018: IFFALSE 81064
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
81020: LD_ADDR_EXP 84
81024: PUSH
81025: LD_EXP 84
81029: PPUSH
81030: LD_VAR 0 3
81034: PUSH
81035: LD_EXP 84
81039: PUSH
81040: LD_VAR 0 3
81044: ARRAY
81045: PUSH
81046: LD_INT 1
81048: PLUS
81049: PUSH
81050: EMPTY
81051: LIST
81052: LIST
81053: PPUSH
81054: LD_VAR 0 1
81058: PPUSH
81059: CALL 16921 0 3
81063: ST_TO_ADDR
// exit ;
81064: POP
81065: POP
81066: GO 81381
// end ; if btype in [ b_bunker , b_turret ] then
81068: LD_VAR 0 5
81072: PUSH
81073: LD_INT 32
81075: PUSH
81076: LD_INT 33
81078: PUSH
81079: EMPTY
81080: LIST
81081: LIST
81082: IN
81083: IFFALSE 81373
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
81085: LD_ADDR_EXP 60
81089: PUSH
81090: LD_EXP 60
81094: PPUSH
81095: LD_VAR 0 3
81099: PUSH
81100: LD_EXP 60
81104: PUSH
81105: LD_VAR 0 3
81109: ARRAY
81110: PUSH
81111: LD_INT 1
81113: PLUS
81114: PUSH
81115: EMPTY
81116: LIST
81117: LIST
81118: PPUSH
81119: LD_VAR 0 1
81123: PPUSH
81124: CALL 16921 0 3
81128: ST_TO_ADDR
// if btype = b_bunker then
81129: LD_VAR 0 5
81133: PUSH
81134: LD_INT 32
81136: EQUAL
81137: IFFALSE 81373
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
81139: LD_ADDR_EXP 61
81143: PUSH
81144: LD_EXP 61
81148: PPUSH
81149: LD_VAR 0 3
81153: PUSH
81154: LD_EXP 61
81158: PUSH
81159: LD_VAR 0 3
81163: ARRAY
81164: PUSH
81165: LD_INT 1
81167: PLUS
81168: PUSH
81169: EMPTY
81170: LIST
81171: LIST
81172: PPUSH
81173: LD_VAR 0 1
81177: PPUSH
81178: CALL 16921 0 3
81182: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
81183: LD_ADDR_VAR 0 6
81187: PUSH
81188: LD_EXP 52
81192: PUSH
81193: LD_VAR 0 3
81197: ARRAY
81198: PPUSH
81199: LD_INT 25
81201: PUSH
81202: LD_INT 1
81204: PUSH
81205: EMPTY
81206: LIST
81207: LIST
81208: PUSH
81209: LD_INT 3
81211: PUSH
81212: LD_INT 54
81214: PUSH
81215: EMPTY
81216: LIST
81217: PUSH
81218: EMPTY
81219: LIST
81220: LIST
81221: PUSH
81222: EMPTY
81223: LIST
81224: LIST
81225: PPUSH
81226: CALL_OW 72
81230: ST_TO_ADDR
// if tmp then
81231: LD_VAR 0 6
81235: IFFALSE 81241
// exit ;
81237: POP
81238: POP
81239: GO 81381
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
81241: LD_ADDR_VAR 0 6
81245: PUSH
81246: LD_EXP 52
81250: PUSH
81251: LD_VAR 0 3
81255: ARRAY
81256: PPUSH
81257: LD_INT 2
81259: PUSH
81260: LD_INT 30
81262: PUSH
81263: LD_INT 4
81265: PUSH
81266: EMPTY
81267: LIST
81268: LIST
81269: PUSH
81270: LD_INT 30
81272: PUSH
81273: LD_INT 5
81275: PUSH
81276: EMPTY
81277: LIST
81278: LIST
81279: PUSH
81280: EMPTY
81281: LIST
81282: LIST
81283: LIST
81284: PPUSH
81285: CALL_OW 72
81289: ST_TO_ADDR
// if not tmp then
81290: LD_VAR 0 6
81294: NOT
81295: IFFALSE 81301
// exit ;
81297: POP
81298: POP
81299: GO 81381
// for j in tmp do
81301: LD_ADDR_VAR 0 4
81305: PUSH
81306: LD_VAR 0 6
81310: PUSH
81311: FOR_IN
81312: IFFALSE 81371
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
81314: LD_ADDR_VAR 0 7
81318: PUSH
81319: LD_VAR 0 4
81323: PPUSH
81324: CALL_OW 313
81328: PPUSH
81329: LD_INT 25
81331: PUSH
81332: LD_INT 1
81334: PUSH
81335: EMPTY
81336: LIST
81337: LIST
81338: PPUSH
81339: CALL_OW 72
81343: ST_TO_ADDR
// if units then
81344: LD_VAR 0 7
81348: IFFALSE 81369
// begin ComExitBuilding ( units [ 1 ] ) ;
81350: LD_VAR 0 7
81354: PUSH
81355: LD_INT 1
81357: ARRAY
81358: PPUSH
81359: CALL_OW 122
// exit ;
81363: POP
81364: POP
81365: POP
81366: POP
81367: GO 81381
// end ; end ;
81369: GO 81311
81371: POP
81372: POP
// end ; end ; exit ;
81373: POP
81374: POP
81375: GO 81381
// end ; end ;
81377: GO 80735
81379: POP
81380: POP
// end ;
81381: LD_VAR 0 2
81385: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
81386: LD_INT 0
81388: PPUSH
81389: PPUSH
81390: PPUSH
81391: PPUSH
81392: PPUSH
81393: PPUSH
81394: PPUSH
// if not mc_bases or not skirmish then
81395: LD_EXP 52
81399: NOT
81400: PUSH
81401: LD_EXP 50
81405: NOT
81406: OR
81407: IFFALSE 81411
// exit ;
81409: GO 81642
// btype := GetBType ( building ) ;
81411: LD_ADDR_VAR 0 6
81415: PUSH
81416: LD_VAR 0 1
81420: PPUSH
81421: CALL_OW 266
81425: ST_TO_ADDR
// x := GetX ( building ) ;
81426: LD_ADDR_VAR 0 7
81430: PUSH
81431: LD_VAR 0 1
81435: PPUSH
81436: CALL_OW 250
81440: ST_TO_ADDR
// y := GetY ( building ) ;
81441: LD_ADDR_VAR 0 8
81445: PUSH
81446: LD_VAR 0 1
81450: PPUSH
81451: CALL_OW 251
81455: ST_TO_ADDR
// d := GetDir ( building ) ;
81456: LD_ADDR_VAR 0 9
81460: PUSH
81461: LD_VAR 0 1
81465: PPUSH
81466: CALL_OW 254
81470: ST_TO_ADDR
// for i = 1 to mc_bases do
81471: LD_ADDR_VAR 0 4
81475: PUSH
81476: DOUBLE
81477: LD_INT 1
81479: DEC
81480: ST_TO_ADDR
81481: LD_EXP 52
81485: PUSH
81486: FOR_TO
81487: IFFALSE 81640
// begin if not mc_build_list [ i ] then
81489: LD_EXP 57
81493: PUSH
81494: LD_VAR 0 4
81498: ARRAY
81499: NOT
81500: IFFALSE 81504
// continue ;
81502: GO 81486
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
81504: LD_VAR 0 6
81508: PUSH
81509: LD_VAR 0 7
81513: PUSH
81514: LD_VAR 0 8
81518: PUSH
81519: LD_VAR 0 9
81523: PUSH
81524: EMPTY
81525: LIST
81526: LIST
81527: LIST
81528: LIST
81529: PPUSH
81530: LD_EXP 57
81534: PUSH
81535: LD_VAR 0 4
81539: ARRAY
81540: PUSH
81541: LD_INT 1
81543: ARRAY
81544: PPUSH
81545: CALL 23090 0 2
81549: IFFALSE 81638
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
81551: LD_ADDR_EXP 57
81555: PUSH
81556: LD_EXP 57
81560: PPUSH
81561: LD_VAR 0 4
81565: PPUSH
81566: LD_EXP 57
81570: PUSH
81571: LD_VAR 0 4
81575: ARRAY
81576: PPUSH
81577: LD_INT 1
81579: PPUSH
81580: CALL_OW 3
81584: PPUSH
81585: CALL_OW 1
81589: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
81590: LD_ADDR_EXP 59
81594: PUSH
81595: LD_EXP 59
81599: PPUSH
81600: LD_VAR 0 4
81604: PUSH
81605: LD_EXP 59
81609: PUSH
81610: LD_VAR 0 4
81614: ARRAY
81615: PUSH
81616: LD_INT 1
81618: PLUS
81619: PUSH
81620: EMPTY
81621: LIST
81622: LIST
81623: PPUSH
81624: LD_VAR 0 1
81628: PPUSH
81629: CALL 16921 0 3
81633: ST_TO_ADDR
// exit ;
81634: POP
81635: POP
81636: GO 81642
// end ; end ;
81638: GO 81486
81640: POP
81641: POP
// end ;
81642: LD_VAR 0 3
81646: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
81647: LD_INT 0
81649: PPUSH
81650: PPUSH
81651: PPUSH
// if not mc_bases or not skirmish then
81652: LD_EXP 52
81656: NOT
81657: PUSH
81658: LD_EXP 50
81662: NOT
81663: OR
81664: IFFALSE 81668
// exit ;
81666: GO 81858
// for i = 1 to mc_bases do
81668: LD_ADDR_VAR 0 4
81672: PUSH
81673: DOUBLE
81674: LD_INT 1
81676: DEC
81677: ST_TO_ADDR
81678: LD_EXP 52
81682: PUSH
81683: FOR_TO
81684: IFFALSE 81771
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
81686: LD_VAR 0 1
81690: PUSH
81691: LD_EXP 60
81695: PUSH
81696: LD_VAR 0 4
81700: ARRAY
81701: IN
81702: PUSH
81703: LD_VAR 0 1
81707: PUSH
81708: LD_EXP 61
81712: PUSH
81713: LD_VAR 0 4
81717: ARRAY
81718: IN
81719: NOT
81720: AND
81721: IFFALSE 81769
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
81723: LD_ADDR_EXP 61
81727: PUSH
81728: LD_EXP 61
81732: PPUSH
81733: LD_VAR 0 4
81737: PUSH
81738: LD_EXP 61
81742: PUSH
81743: LD_VAR 0 4
81747: ARRAY
81748: PUSH
81749: LD_INT 1
81751: PLUS
81752: PUSH
81753: EMPTY
81754: LIST
81755: LIST
81756: PPUSH
81757: LD_VAR 0 1
81761: PPUSH
81762: CALL 16921 0 3
81766: ST_TO_ADDR
// break ;
81767: GO 81771
// end ; end ;
81769: GO 81683
81771: POP
81772: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
81773: LD_VAR 0 1
81777: PPUSH
81778: CALL_OW 257
81782: PUSH
81783: LD_EXP 78
81787: IN
81788: PUSH
81789: LD_VAR 0 1
81793: PPUSH
81794: CALL_OW 266
81798: PUSH
81799: LD_INT 5
81801: EQUAL
81802: AND
81803: PUSH
81804: LD_VAR 0 2
81808: PPUSH
81809: CALL_OW 110
81813: PUSH
81814: LD_INT 18
81816: NONEQUAL
81817: AND
81818: IFFALSE 81858
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
81820: LD_VAR 0 2
81824: PPUSH
81825: CALL_OW 257
81829: PUSH
81830: LD_INT 5
81832: PUSH
81833: LD_INT 8
81835: PUSH
81836: LD_INT 9
81838: PUSH
81839: EMPTY
81840: LIST
81841: LIST
81842: LIST
81843: IN
81844: IFFALSE 81858
// SetClass ( unit , 1 ) ;
81846: LD_VAR 0 2
81850: PPUSH
81851: LD_INT 1
81853: PPUSH
81854: CALL_OW 336
// end ;
81858: LD_VAR 0 3
81862: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
81863: LD_INT 0
81865: PPUSH
81866: PPUSH
// if not mc_bases or not skirmish then
81867: LD_EXP 52
81871: NOT
81872: PUSH
81873: LD_EXP 50
81877: NOT
81878: OR
81879: IFFALSE 81883
// exit ;
81881: GO 81999
// if GetLives ( abandoned_vehicle ) > 250 then
81883: LD_VAR 0 2
81887: PPUSH
81888: CALL_OW 256
81892: PUSH
81893: LD_INT 250
81895: GREATER
81896: IFFALSE 81900
// exit ;
81898: GO 81999
// for i = 1 to mc_bases do
81900: LD_ADDR_VAR 0 6
81904: PUSH
81905: DOUBLE
81906: LD_INT 1
81908: DEC
81909: ST_TO_ADDR
81910: LD_EXP 52
81914: PUSH
81915: FOR_TO
81916: IFFALSE 81997
// begin if driver in mc_bases [ i ] then
81918: LD_VAR 0 1
81922: PUSH
81923: LD_EXP 52
81927: PUSH
81928: LD_VAR 0 6
81932: ARRAY
81933: IN
81934: IFFALSE 81995
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
81936: LD_VAR 0 1
81940: PPUSH
81941: LD_EXP 52
81945: PUSH
81946: LD_VAR 0 6
81950: ARRAY
81951: PPUSH
81952: LD_INT 2
81954: PUSH
81955: LD_INT 30
81957: PUSH
81958: LD_INT 0
81960: PUSH
81961: EMPTY
81962: LIST
81963: LIST
81964: PUSH
81965: LD_INT 30
81967: PUSH
81968: LD_INT 1
81970: PUSH
81971: EMPTY
81972: LIST
81973: LIST
81974: PUSH
81975: EMPTY
81976: LIST
81977: LIST
81978: LIST
81979: PPUSH
81980: CALL_OW 72
81984: PUSH
81985: LD_INT 1
81987: ARRAY
81988: PPUSH
81989: CALL_OW 112
// break ;
81993: GO 81997
// end ; end ;
81995: GO 81915
81997: POP
81998: POP
// end ;
81999: LD_VAR 0 5
82003: RET
