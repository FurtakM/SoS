// export MissionStart ; starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RevealFogArea ( 1 , BetaArea ) ;
  11: LD_INT 1
  13: PPUSH
  14: LD_INT 8
  16: PPUSH
  17: CALL_OW 332
// GameType ;
  21: CALL 5179 0 0
// SetBName ( BetaA , beta ) ;
  25: LD_INT 1
  27: PPUSH
  28: LD_STRING beta
  30: PPUSH
  31: CALL_OW 500
// SetBName ( BetaB , beta ) ;
  35: LD_INT 3
  37: PPUSH
  38: LD_STRING beta
  40: PPUSH
  41: CALL_OW 500
// PrepareHeroes ;
  45: CALL 2342 0 0
// PrepareBeta ;
  49: CALL 2731 0 0
// InGameOn ;
  53: CALL_OW 8
// CenterNowOnUnits ( Brighton ) ;
  57: LD_EXP 8
  61: PPUSH
  62: CALL_OW 87
// ComMoveXY ( Megan , 50 , 42 ) ;
  66: LD_EXP 10
  70: PPUSH
  71: LD_INT 50
  73: PPUSH
  74: LD_INT 42
  76: PPUSH
  77: CALL_OW 111
// repeat wait ( 0 0$1 ) until GetDistUnits ( Megan , Brighton ) < 3 ;
  81: LD_INT 35
  83: PPUSH
  84: CALL_OW 67
  88: LD_EXP 10
  92: PPUSH
  93: LD_EXP 8
  97: PPUSH
  98: CALL_OW 296
 102: PUSH
 103: LD_INT 3
 105: LESS
 106: IFFALSE 81
// ComTurnUnit ( Megan , Brighton ) ;
 108: LD_EXP 10
 112: PPUSH
 113: LD_EXP 8
 117: PPUSH
 118: CALL_OW 119
// Say ( Megan , DMegan-1a ) ;
 122: LD_EXP 10
 126: PPUSH
 127: LD_STRING DMegan-1a
 129: PPUSH
 130: CALL_OW 88
// wait ( 0 0$0.3 ) ;
 134: LD_INT 10
 136: PPUSH
 137: CALL_OW 67
// ComTurnUnit ( Brighton , Megan ) ;
 141: LD_EXP 8
 145: PPUSH
 146: LD_EXP 10
 150: PPUSH
 151: CALL_OW 119
// Say ( Brighton , DBrighton-1a ) ;
 155: LD_EXP 8
 159: PPUSH
 160: LD_STRING DBrighton-1a
 162: PPUSH
 163: CALL_OW 88
// Say ( Megan , DMegan-2a ) ;
 167: LD_EXP 10
 171: PPUSH
 172: LD_STRING DMegan-2a
 174: PPUSH
 175: CALL_OW 88
// Say ( Brighton , DBrighton-2a ) ;
 179: LD_EXP 8
 183: PPUSH
 184: LD_STRING DBrighton-2a
 186: PPUSH
 187: CALL_OW 88
// Say ( Megan , DMegan-3a ) ;
 191: LD_EXP 10
 195: PPUSH
 196: LD_STRING DMegan-3a
 198: PPUSH
 199: CALL_OW 88
// Say ( Brighton , DBrighton-3a ) ;
 203: LD_EXP 8
 207: PPUSH
 208: LD_STRING DBrighton-3a
 210: PPUSH
 211: CALL_OW 88
// Say ( Megan , DMegan-4a ) ;
 215: LD_EXP 10
 219: PPUSH
 220: LD_STRING DMegan-4a
 222: PPUSH
 223: CALL_OW 88
// ComMoveXY ( Megan , 40 , 37 ) ;
 227: LD_EXP 10
 231: PPUSH
 232: LD_INT 40
 234: PPUSH
 235: LD_INT 37
 237: PPUSH
 238: CALL_OW 111
// AddComTurnUnit ( Megan , Brighton ) ;
 242: LD_EXP 10
 246: PPUSH
 247: LD_EXP 8
 251: PPUSH
 252: CALL_OW 179
// ComMoveXY ( Palmer , 50 , 42 ) ;
 256: LD_EXP 9
 260: PPUSH
 261: LD_INT 50
 263: PPUSH
 264: LD_INT 42
 266: PPUSH
 267: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 271: LD_INT 35
 273: PPUSH
 274: CALL_OW 67
// until GetDistUnits ( Brighton , Palmer ) < 6 ;
 278: LD_EXP 8
 282: PPUSH
 283: LD_EXP 9
 287: PPUSH
 288: CALL_OW 296
 292: PUSH
 293: LD_INT 6
 295: LESS
 296: IFFALSE 271
// ComTurnUnit ( Brighton , Palmer ) ;
 298: LD_EXP 8
 302: PPUSH
 303: LD_EXP 9
 307: PPUSH
 308: CALL_OW 119
// ComTurnUnit ( Palmer , Brighton ) ;
 312: LD_EXP 9
 316: PPUSH
 317: LD_EXP 8
 321: PPUSH
 322: CALL_OW 119
// Say ( Megan , DMegan-5a ) ;
 326: LD_EXP 10
 330: PPUSH
 331: LD_STRING DMegan-5a
 333: PPUSH
 334: CALL_OW 88
// Say ( Palmer , DPalmer-1 ) ;
 338: LD_EXP 9
 342: PPUSH
 343: LD_STRING DPalmer-1
 345: PPUSH
 346: CALL_OW 88
// Say ( Brighton , DBrighton-1 ) ;
 350: LD_EXP 8
 354: PPUSH
 355: LD_STRING DBrighton-1
 357: PPUSH
 358: CALL_OW 88
// Say ( Palmer , DPalmer-2 ) ;
 362: LD_EXP 9
 366: PPUSH
 367: LD_STRING DPalmer-2
 369: PPUSH
 370: CALL_OW 88
// Say ( Brighton , DBrighton-2 ) ;
 374: LD_EXP 8
 378: PPUSH
 379: LD_STRING DBrighton-2
 381: PPUSH
 382: CALL_OW 88
// Say ( Palmer , DPalmer-3 ) ;
 386: LD_EXP 9
 390: PPUSH
 391: LD_STRING DPalmer-3
 393: PPUSH
 394: CALL_OW 88
// Say ( Brighton , DBrighton-3 ) ;
 398: LD_EXP 8
 402: PPUSH
 403: LD_STRING DBrighton-3
 405: PPUSH
 406: CALL_OW 88
// Say ( Palmer , DPalmer-4 ) ;
 410: LD_EXP 9
 414: PPUSH
 415: LD_STRING DPalmer-4
 417: PPUSH
 418: CALL_OW 88
// ComEnterUnit ( Palmer , AmTower ) ;
 422: LD_EXP 9
 426: PPUSH
 427: LD_INT 6
 429: PPUSH
 430: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
 434: LD_INT 35
 436: PPUSH
 437: CALL_OW 67
// until IsInUnit ( Palmer ) = AmTower ;
 441: LD_EXP 9
 445: PPUSH
 446: CALL_OW 310
 450: PUSH
 451: LD_INT 6
 453: EQUAL
 454: IFFALSE 434
// SayRadio ( Palmer , DPalmer-5 ) ;
 456: LD_EXP 9
 460: PPUSH
 461: LD_STRING DPalmer-5
 463: PPUSH
 464: CALL_OW 94
// ComMoveXY ( Brighton , 59 , 36 ) ;
 468: LD_EXP 8
 472: PPUSH
 473: LD_INT 59
 475: PPUSH
 476: LD_INT 36
 478: PPUSH
 479: CALL_OW 111
// ComMoveXY ( Megan , 60 , 35 ) ;
 483: LD_EXP 10
 487: PPUSH
 488: LD_INT 60
 490: PPUSH
 491: LD_INT 35
 493: PPUSH
 494: CALL_OW 111
// ComMoveXY ( Palmer , 60 , 34 ) ;
 498: LD_EXP 9
 502: PPUSH
 503: LD_INT 60
 505: PPUSH
 506: LD_INT 34
 508: PPUSH
 509: CALL_OW 111
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 513: LD_EXP 8
 517: PPUSH
 518: LD_INT 99
 520: PPUSH
 521: LD_INT 37
 523: PPUSH
 524: CALL_OW 178
// AddComTurnUnit ( Megan , Brighton ) ;
 528: LD_EXP 10
 532: PPUSH
 533: LD_EXP 8
 537: PPUSH
 538: CALL_OW 179
// AddComTurnUnit ( Palmer , Brighton ) ;
 542: LD_EXP 9
 546: PPUSH
 547: LD_EXP 8
 551: PPUSH
 552: CALL_OW 179
// CenterOnXY ( 64 , 40 ) ;
 556: LD_INT 64
 558: PPUSH
 559: LD_INT 40
 561: PPUSH
 562: CALL_OW 84
// ComMeeting ( BetaSquad , SpotArea ) ;
 566: LD_EXP 11
 570: PPUSH
 571: LD_INT 13
 573: PPUSH
 574: CALL 10556 0 2
// wait ( 0 0$30 ) ;
 578: LD_INT 1050
 580: PPUSH
 581: CALL_OW 67
// Say ( Brighton , DBrighton-4 ) ;
 585: LD_EXP 8
 589: PPUSH
 590: LD_STRING DBrighton-4
 592: PPUSH
 593: CALL_OW 88
// Say ( Brighton , DBrighton-5 ) ;
 597: LD_EXP 8
 601: PPUSH
 602: LD_STRING DBrighton-5
 604: PPUSH
 605: CALL_OW 88
// AddComTurnUnit ( Brighton , Megan ) ;
 609: LD_EXP 8
 613: PPUSH
 614: LD_EXP 10
 618: PPUSH
 619: CALL_OW 179
// Say ( Brighton , DBrighton-6 ) ;
 623: LD_EXP 8
 627: PPUSH
 628: LD_STRING DBrighton-6
 630: PPUSH
 631: CALL_OW 88
// Say ( Megan , DMegan-1 ) ;
 635: LD_EXP 10
 639: PPUSH
 640: LD_STRING DMegan-1
 642: PPUSH
 643: CALL_OW 88
// Say ( Brighton , DBrighton-7 ) ;
 647: LD_EXP 8
 651: PPUSH
 652: LD_STRING DBrighton-7
 654: PPUSH
 655: CALL_OW 88
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 659: LD_EXP 8
 663: PPUSH
 664: LD_INT 99
 666: PPUSH
 667: LD_INT 37
 669: PPUSH
 670: CALL_OW 178
// Say ( Brighton , DBrighton-8 ) ;
 674: LD_EXP 8
 678: PPUSH
 679: LD_STRING DBrighton-8
 681: PPUSH
 682: CALL_OW 88
// ChangeMissionObjectives ( C1 ) ;
 686: LD_STRING C1
 688: PPUSH
 689: CALL_OW 337
// InGameOff ;
 693: CALL_OW 9
// SaveForQuickRestart ;
 697: CALL_OW 22
// MissionStart := true ;
 701: LD_ADDR_EXP 1
 705: PUSH
 706: LD_INT 1
 708: ST_TO_ADDR
// music_nat := 1 ;
 709: LD_ADDR_OWVAR 71
 713: PUSH
 714: LD_INT 1
 716: ST_TO_ADDR
// end ;
 717: END
// export ArmadaArrived , FirstAssaultRepelled ; export RuSpeaker ; every 0 0$1 trigger MissionStart do var tmp , i ;
 718: LD_EXP 1
 722: IFFALSE 1917
 724: GO 726
 726: DISABLE
 727: LD_INT 0
 729: PPUSH
 730: PPUSH
// begin wait ( ruArrival ) ;
 731: LD_EXP 41
 735: PPUSH
 736: CALL_OW 67
// PrepareRUArmada ;
 740: CALL 3313 0 0
// wait ( 0 0$3 ) ;
 744: LD_INT 105
 746: PPUSH
 747: CALL_OW 67
// tmp := AreaToList ( RUArrivalParkingArea , 0 ) ;
 751: LD_ADDR_VAR 0 1
 755: PUSH
 756: LD_INT 15
 758: PPUSH
 759: LD_INT 0
 761: PPUSH
 762: CALL_OW 517
 766: ST_TO_ADDR
// for i = 1 to RUArmada do
 767: LD_ADDR_VAR 0 2
 771: PUSH
 772: DOUBLE
 773: LD_INT 1
 775: DEC
 776: ST_TO_ADDR
 777: LD_EXP 16
 781: PUSH
 782: FOR_TO
 783: IFFALSE 832
// ComMoveXY ( RUArmada [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
 785: LD_EXP 16
 789: PUSH
 790: LD_VAR 0 2
 794: ARRAY
 795: PPUSH
 796: LD_VAR 0 1
 800: PUSH
 801: LD_INT 1
 803: ARRAY
 804: PUSH
 805: LD_VAR 0 2
 809: ARRAY
 810: PPUSH
 811: LD_VAR 0 1
 815: PUSH
 816: LD_INT 2
 818: ARRAY
 819: PUSH
 820: LD_VAR 0 2
 824: ARRAY
 825: PPUSH
 826: CALL_OW 111
 830: GO 782
 832: POP
 833: POP
// ArmadaArrived := true ;
 834: LD_ADDR_EXP 2
 838: PUSH
 839: LD_INT 1
 841: ST_TO_ADDR
// Say ( Palmer , DPalmer-A1 ) ;
 842: LD_EXP 9
 846: PPUSH
 847: LD_STRING DPalmer-A1
 849: PPUSH
 850: CALL_OW 88
// Say ( Brighton , DBrighton-A1 ) ;
 854: LD_EXP 8
 858: PPUSH
 859: LD_STRING DBrighton-A1
 861: PPUSH
 862: CALL_OW 88
// wait ( 0 0$20 ) ;
 866: LD_INT 700
 868: PPUSH
 869: CALL_OW 67
// PrepareRUBase ;
 873: CALL 4038 0 0
// PrepareRUBase_v2 ;
 877: CALL 4454 0 0
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
 881: LD_ADDR_EXP 52
 885: PUSH
 886: LD_EXP 52
 890: PPUSH
 891: LD_INT 1
 893: PPUSH
 894: LD_INT 22
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PPUSH
 904: CALL_OW 69
 908: PPUSH
 909: CALL_OW 1
 913: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , RU_SecondPersonnel ) ;
 914: LD_ADDR_EXP 52
 918: PUSH
 919: LD_EXP 52
 923: PPUSH
 924: LD_INT 2
 926: PPUSH
 927: LD_EXP 35
 931: PPUSH
 932: CALL_OW 1
 936: ST_TO_ADDR
// MC_Start ( ) ;
 937: CALL 55418 0 0
// wait ( 0 0$30 ) ;
 941: LD_INT 1050
 943: PPUSH
 944: CALL_OW 67
// PrepareRUBulldozers ;
 948: CALL 3925 0 0
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
 952: LD_EXP 17
 956: PUSH
 957: LD_INT 1
 959: ARRAY
 960: PPUSH
 961: LD_INT 9
 963: PPUSH
 964: CALL 10413 0 2
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
 968: LD_EXP 17
 972: PUSH
 973: LD_INT 2
 975: ARRAY
 976: PPUSH
 977: LD_INT 11
 979: PPUSH
 980: CALL 10413 0 2
// DoNotAttack ( 1 , Bulldozers [ 1 ] ) ;
 984: LD_INT 1
 986: PPUSH
 987: LD_EXP 17
 991: PUSH
 992: LD_INT 1
 994: ARRAY
 995: PPUSH
 996: CALL_OW 471
// DoNotAttack ( 1 , Bulldozers [ 2 ] ) ;
1000: LD_INT 1
1002: PPUSH
1003: LD_EXP 17
1007: PUSH
1008: LD_INT 2
1010: ARRAY
1011: PPUSH
1012: CALL_OW 471
// wait ( 0 0$30 ) ;
1016: LD_INT 1050
1018: PPUSH
1019: CALL_OW 67
// InGameOn ;
1023: CALL_OW 8
// PlaceSeeing ( 95 , 93 , 1 , - 30 ) ;
1027: LD_INT 95
1029: PPUSH
1030: LD_INT 93
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_INT 30
1038: NEG
1039: PPUSH
1040: CALL_OW 330
// ComMoveXY ( FilterUnitsInArea ( US_BackOffArea , [ f_side , 1 ] ) , 63 , 39 ) ;
1044: LD_INT 10
1046: PPUSH
1047: LD_INT 22
1049: PUSH
1050: LD_INT 1
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: PPUSH
1057: CALL_OW 70
1061: PPUSH
1062: LD_INT 63
1064: PPUSH
1065: LD_INT 39
1067: PPUSH
1068: CALL_OW 111
// CenterOnXY ( 95 , 93 ) ;
1072: LD_INT 95
1074: PPUSH
1075: LD_INT 93
1077: PPUSH
1078: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
1082: LD_INT 35
1084: PPUSH
1085: CALL_OW 67
// if not HasTask ( Bulldozers [ 1 ] ) then
1089: LD_EXP 17
1093: PUSH
1094: LD_INT 1
1096: ARRAY
1097: PPUSH
1098: CALL_OW 314
1102: NOT
1103: IFFALSE 1121
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
1105: LD_EXP 17
1109: PUSH
1110: LD_INT 1
1112: ARRAY
1113: PPUSH
1114: LD_INT 9
1116: PPUSH
1117: CALL 10413 0 2
// if not HasTask ( Bulldozers [ 2 ] ) then
1121: LD_EXP 17
1125: PUSH
1126: LD_INT 2
1128: ARRAY
1129: PPUSH
1130: CALL_OW 314
1134: NOT
1135: IFFALSE 1153
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
1137: LD_EXP 17
1141: PUSH
1142: LD_INT 2
1144: ARRAY
1145: PPUSH
1146: LD_INT 11
1148: PPUSH
1149: CALL 10413 0 2
// until ListEnvironmentArea ( BulldozerArea ) < 2 or ListEnvironmentArea ( BulldozerArea2 ) < 2 or IsDead ( Bulldozers [ 1 ] ) ;
1153: LD_INT 9
1155: PPUSH
1156: CALL_OW 353
1160: PUSH
1161: LD_INT 2
1163: LESS
1164: PUSH
1165: LD_INT 11
1167: PPUSH
1168: CALL_OW 353
1172: PUSH
1173: LD_INT 2
1175: LESS
1176: OR
1177: PUSH
1178: LD_EXP 17
1182: PUSH
1183: LD_INT 1
1185: ARRAY
1186: PPUSH
1187: CALL_OW 301
1191: OR
1192: IFFALSE 1082
// if UnitFilter ( Bulldozers , [ f_ok ] ) then
1194: LD_EXP 17
1198: PPUSH
1199: LD_INT 50
1201: PUSH
1202: EMPTY
1203: LIST
1204: PPUSH
1205: CALL_OW 72
1209: IFFALSE 1262
// begin wait ( 0 0$10 ) ;
1211: LD_INT 350
1213: PPUSH
1214: CALL_OW 67
// ComMoveXY ( Bulldozers , 120 , 131 ) ;
1218: LD_EXP 17
1222: PPUSH
1223: LD_INT 120
1225: PPUSH
1226: LD_INT 131
1228: PPUSH
1229: CALL_OW 111
// for i in Bulldozers do
1233: LD_ADDR_VAR 0 2
1237: PUSH
1238: LD_EXP 17
1242: PUSH
1243: FOR_IN
1244: IFFALSE 1260
// NormalAttack ( 1 , i ) ;
1246: LD_INT 1
1248: PPUSH
1249: LD_VAR 0 2
1253: PPUSH
1254: CALL_OW 472
1258: GO 1243
1260: POP
1261: POP
// end ; wait ( 0 0$10 ) ;
1262: LD_INT 350
1264: PPUSH
1265: CALL_OW 67
// RemoveSeeing ( 95 , 93 , 1 ) ;
1269: LD_INT 95
1271: PPUSH
1272: LD_INT 93
1274: PPUSH
1275: LD_INT 1
1277: PPUSH
1278: CALL_OW 331
// Say ( Yashin , DDeath-Yas-1 ) ;
1282: LD_EXP 12
1286: PPUSH
1287: LD_STRING DDeath-Yas-1
1289: PPUSH
1290: CALL_OW 88
// SayEffect ( DRuSol-A1 ) ;
1294: LD_STRING DRuSol-A1
1296: PPUSH
1297: CALL_OW 96
// wait ( 0 0$2 ) ;
1301: LD_INT 70
1303: PPUSH
1304: CALL_OW 67
// InGameOff ;
1308: CALL_OW 9
// ComMoveXY ( RUArmada , 66 , 40 ) ;
1312: LD_EXP 16
1316: PPUSH
1317: LD_INT 66
1319: PPUSH
1320: LD_INT 40
1322: PPUSH
1323: CALL_OW 111
// wait ( 0 0$2 ) ;
1327: LD_INT 70
1329: PPUSH
1330: CALL_OW 67
// Say ( Gaydar , DDeath-Gay-2 ) ;
1334: LD_EXP 14
1338: PPUSH
1339: LD_STRING DDeath-Gay-2
1341: PPUSH
1342: CALL_OW 88
// wait ( 0 0$20 ) ;
1346: LD_INT 700
1348: PPUSH
1349: CALL_OW 67
// AssaultStarted := true ;
1353: LD_ADDR_EXP 7
1357: PUSH
1358: LD_INT 1
1360: ST_TO_ADDR
// Say ( Popov , DDeath-Pop-1 ) ;
1361: LD_EXP 13
1365: PPUSH
1366: LD_STRING DDeath-Pop-1
1368: PPUSH
1369: CALL_OW 88
// Say ( Gaydar , DDeath-Gay-1 ) ;
1373: LD_EXP 14
1377: PPUSH
1378: LD_STRING DDeath-Gay-1
1380: PPUSH
1381: CALL_OW 88
// wait ( 0 0$5 ) ;
1385: LD_INT 175
1387: PPUSH
1388: CALL_OW 67
// Say ( Sevi , DDeath-Vse-1 ) ;
1392: LD_EXP 15
1396: PPUSH
1397: LD_STRING DDeath-Vse-1
1399: PPUSH
1400: CALL_OW 88
// PriorityAttack ( 6 , BetaA ) ;
1404: LD_INT 6
1406: PPUSH
1407: LD_INT 1
1409: PPUSH
1410: CALL_OW 470
// PriorityAttack ( 6 , BetaB ) ;
1414: LD_INT 6
1416: PPUSH
1417: LD_INT 3
1419: PPUSH
1420: CALL_OW 470
// repeat for i in RuArmada do
1424: LD_ADDR_VAR 0 2
1428: PUSH
1429: LD_EXP 16
1433: PUSH
1434: FOR_IN
1435: IFFALSE 1485
// if not HasTask ( i ) then
1437: LD_VAR 0 2
1441: PPUSH
1442: CALL_OW 314
1446: NOT
1447: IFFALSE 1483
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
1449: LD_VAR 0 2
1453: PPUSH
1454: LD_INT 22
1456: PUSH
1457: LD_INT 1
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: PPUSH
1464: CALL_OW 69
1468: PPUSH
1469: LD_VAR 0 2
1473: PPUSH
1474: CALL_OW 74
1478: PPUSH
1479: CALL_OW 115
1483: GO 1434
1485: POP
1486: POP
// wait ( 0 0$1 ) until FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_type , unit_human ] ] ) < 10 and IsDead ( Yashin ) and IsDead ( Popov ) and IsDead ( Gaydar ) and IsDead ( Sevi ) ;
1487: LD_INT 35
1489: PPUSH
1490: CALL_OW 67
1494: LD_INT 1
1496: PUSH
1497: LD_INT 22
1499: PUSH
1500: LD_INT 6
1502: PUSH
1503: EMPTY
1504: LIST
1505: LIST
1506: PUSH
1507: LD_INT 21
1509: PUSH
1510: LD_INT 1
1512: PUSH
1513: EMPTY
1514: LIST
1515: LIST
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: LIST
1521: PPUSH
1522: CALL_OW 69
1526: PUSH
1527: LD_INT 10
1529: LESS
1530: PUSH
1531: LD_EXP 12
1535: PPUSH
1536: CALL_OW 301
1540: AND
1541: PUSH
1542: LD_EXP 13
1546: PPUSH
1547: CALL_OW 301
1551: AND
1552: PUSH
1553: LD_EXP 14
1557: PPUSH
1558: CALL_OW 301
1562: AND
1563: PUSH
1564: LD_EXP 15
1568: PPUSH
1569: CALL_OW 301
1573: AND
1574: IFFALSE 1424
// AssaultStarted := false ;
1576: LD_ADDR_EXP 7
1580: PUSH
1581: LD_INT 0
1583: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ f_side , 6 ] ) , 120 , 131 ) ;
1584: LD_INT 22
1586: PUSH
1587: LD_INT 6
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: PPUSH
1594: CALL_OW 69
1598: PPUSH
1599: LD_INT 120
1601: PPUSH
1602: LD_INT 131
1604: PPUSH
1605: CALL_OW 111
// RuSpeaker := FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_sex , sex_male ] , [ f_type , unit_human ] , [ f_lives , 500 ] ] ) ;
1609: LD_ADDR_EXP 4
1613: PUSH
1614: LD_INT 1
1616: PUSH
1617: LD_INT 22
1619: PUSH
1620: LD_INT 6
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 26
1629: PUSH
1630: LD_INT 1
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: PUSH
1637: LD_INT 21
1639: PUSH
1640: LD_INT 1
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: PUSH
1647: LD_INT 24
1649: PUSH
1650: LD_INT 500
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: PPUSH
1664: CALL_OW 69
1668: ST_TO_ADDR
// if RuSpeaker then
1669: LD_EXP 4
1673: IFFALSE 1691
// Say ( RuSpeaker [ 1 ] , DRuSol-A2 ) ;
1675: LD_EXP 4
1679: PUSH
1680: LD_INT 1
1682: ARRAY
1683: PPUSH
1684: LD_STRING DRuSol-A2
1686: PPUSH
1687: CALL_OW 88
// wait ( 0 0$30 ) ;
1691: LD_INT 1050
1693: PPUSH
1694: CALL_OW 67
// DialogueOn ;
1698: CALL_OW 6
// Say ( Brighton , DBrighton-B1 ) ;
1702: LD_EXP 8
1706: PPUSH
1707: LD_STRING DBrighton-B1
1709: PPUSH
1710: CALL_OW 88
// Say ( Palmer , DPalmer-B1 ) ;
1714: LD_EXP 9
1718: PPUSH
1719: LD_STRING DPalmer-B1
1721: PPUSH
1722: CALL_OW 88
// Say ( Brighton , DBrighton-B2 ) ;
1726: LD_EXP 8
1730: PPUSH
1731: LD_STRING DBrighton-B2
1733: PPUSH
1734: CALL_OW 88
// SayRadio ( Burlak , DBurlak-B1 ) ;
1738: LD_EXP 18
1742: PPUSH
1743: LD_STRING DBurlak-B1
1745: PPUSH
1746: CALL_OW 94
// Say ( Brighton , DBrighton-B3 ) ;
1750: LD_EXP 8
1754: PPUSH
1755: LD_STRING DBrighton-B3
1757: PPUSH
1758: CALL_OW 88
// Say ( Palmer , DPalmer-B2 ) ;
1762: LD_EXP 9
1766: PPUSH
1767: LD_STRING DPalmer-B2
1769: PPUSH
1770: CALL_OW 88
// Say ( Brighton , DBrighton-B4 ) ;
1774: LD_EXP 8
1778: PPUSH
1779: LD_STRING DBrighton-B4
1781: PPUSH
1782: CALL_OW 88
// Say ( Brighton , DBrighton-B5 ) ;
1786: LD_EXP 8
1790: PPUSH
1791: LD_STRING DBrighton-B5
1793: PPUSH
1794: CALL_OW 88
// DialogueOff ;
1798: CALL_OW 7
// ChangeMissionObjectives ( C2 ) ;
1802: LD_STRING C2
1804: PPUSH
1805: CALL_OW 337
// FirstAssaultRepelled := true ;
1809: LD_ADDR_EXP 3
1813: PUSH
1814: LD_INT 1
1816: ST_TO_ADDR
// RemoveUnit ( Bulldozers [ 1 ] ) ;
1817: LD_EXP 17
1821: PUSH
1822: LD_INT 1
1824: ARRAY
1825: PPUSH
1826: CALL_OW 64
// RemoveUnit ( Bulldozers [ 2 ] ) ;
1830: LD_EXP 17
1834: PUSH
1835: LD_INT 2
1837: ARRAY
1838: PPUSH
1839: CALL_OW 64
// AddComExitVehicle ( FilterAllUnits ( [ f_side , 6 ] ) ) ;
1843: LD_INT 22
1845: PUSH
1846: LD_INT 6
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PPUSH
1853: CALL_OW 69
1857: PPUSH
1858: CALL_OW 181
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
1862: LD_INT 22
1864: PUSH
1865: LD_INT 6
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: PPUSH
1872: CALL_OW 69
1876: PPUSH
1877: LD_INT 3
1879: PPUSH
1880: CALL_OW 235
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
1884: LD_ADDR_EXP 52
1888: PUSH
1889: LD_EXP 52
1893: PPUSH
1894: LD_INT 1
1896: PPUSH
1897: LD_INT 22
1899: PUSH
1900: LD_INT 3
1902: PUSH
1903: EMPTY
1904: LIST
1905: LIST
1906: PPUSH
1907: CALL_OW 69
1911: PPUSH
1912: CALL_OW 1
1916: ST_TO_ADDR
// end ;
1917: PPOPN 2
1919: END
// every 0 0$1 trigger FirstAssaultRepelled and jmmArrival > 0 0$00 do
1920: LD_EXP 3
1924: PUSH
1925: LD_EXP 40
1929: PUSH
1930: LD_INT 0
1932: GREATER
1933: AND
1934: IFFALSE 1954
1936: GO 1938
1938: DISABLE
// begin enable ;
1939: ENABLE
// jmmArrival := jmmArrival - 0 0$01 ;
1940: LD_ADDR_EXP 40
1944: PUSH
1945: LD_EXP 40
1949: PUSH
1950: LD_INT 35
1952: MINUS
1953: ST_TO_ADDR
// end ;
1954: END
// export JMM_Arrived ; every 0 0$1 trigger jmmArrival = 0 0$00 do
1955: LD_EXP 40
1959: PUSH
1960: LD_INT 0
1962: EQUAL
1963: IFFALSE 2048
1965: GO 1967
1967: DISABLE
// begin JMMReinforcement ;
1968: CALL 4782 0 0
// DialogueOn ;
1972: CALL_OW 6
// CenterOnUnits ( JMM ) ;
1976: LD_EXP 36
1980: PPUSH
1981: CALL_OW 85
// Say ( JMM , DJMM-F1 ) ;
1985: LD_EXP 36
1989: PPUSH
1990: LD_STRING DJMM-F1
1992: PPUSH
1993: CALL_OW 88
// if RussiansDefeated then
1997: LD_EXP 42
2001: IFFALSE 2017
// Say ( Brighton , DBrighton-F1a ) else
2003: LD_EXP 8
2007: PPUSH
2008: LD_STRING DBrighton-F1a
2010: PPUSH
2011: CALL_OW 88
2015: GO 2036
// begin Say ( Brighton , DBrighton-F1 ) ;
2017: LD_EXP 8
2021: PPUSH
2022: LD_STRING DBrighton-F1
2024: PPUSH
2025: CALL_OW 88
// ChangeMissionObjectives ( C3 ) ;
2029: LD_STRING C3
2031: PPUSH
2032: CALL_OW 337
// end ; DialogueOff ;
2036: CALL_OW 7
// JMM_Arrived := true ;
2040: LD_ADDR_EXP 5
2044: PUSH
2045: LD_INT 1
2047: ST_TO_ADDR
// end ;
2048: END
// every 0 0$1 trigger JMM_Arrived and See ( 1 , Burlak ) do
2049: LD_EXP 5
2053: PUSH
2054: LD_INT 1
2056: PPUSH
2057: LD_EXP 18
2061: PPUSH
2062: CALL_OW 292
2066: AND
2067: IFFALSE 2096
2069: GO 2071
2071: DISABLE
// begin Say ( Burlak , DBurlak ) ;
2072: LD_EXP 18
2076: PPUSH
2077: LD_STRING DBurlak
2079: PPUSH
2080: CALL_OW 88
// Say ( JMM , DJMM ) ;
2084: LD_EXP 36
2088: PPUSH
2089: LD_STRING DJMM
2091: PPUSH
2092: CALL_OW 88
// end ;
2096: END
// export LaserBuilt ; every 0 0$1 trigger FilterAllUnits ( [ f_and , [ f_side , 1 ] , [ f_or , [ f_weapon , us_laser ] , [ f_bweapon , us_laser ] ] ] ) > 1 do
2097: LD_INT 1
2099: PUSH
2100: LD_INT 22
2102: PUSH
2103: LD_INT 1
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: PUSH
2110: LD_INT 2
2112: PUSH
2113: LD_INT 34
2115: PUSH
2116: LD_INT 9
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: PUSH
2123: LD_INT 35
2125: PUSH
2126: LD_INT 9
2128: PUSH
2129: EMPTY
2130: LIST
2131: LIST
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: LIST
2137: PUSH
2138: EMPTY
2139: LIST
2140: LIST
2141: LIST
2142: PPUSH
2143: CALL_OW 69
2147: PUSH
2148: LD_INT 1
2150: GREATER
2151: IFFALSE 2164
2153: GO 2155
2155: DISABLE
// begin LaserBuilt := true ;
2156: LD_ADDR_EXP 6
2160: PUSH
2161: LD_INT 1
2163: ST_TO_ADDR
// end ;
2164: END
// export AssaultStarted ; every 0 0$1 trigger AssaultStarted and See ( 6 , NearestUnitToUnit ( FilterAllUnits ( [ f_and , [ [ f_side , 1 ] , [ f_bweapon , us_laser ] ] ] ) , IsInUnit ( Sevi ) ) ) do
2165: LD_EXP 7
2169: PUSH
2170: LD_INT 6
2172: PPUSH
2173: LD_INT 1
2175: PUSH
2176: LD_INT 22
2178: PUSH
2179: LD_INT 1
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: PUSH
2186: LD_INT 35
2188: PUSH
2189: LD_INT 9
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: PUSH
2196: EMPTY
2197: LIST
2198: LIST
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: PPUSH
2204: CALL_OW 69
2208: PPUSH
2209: LD_EXP 15
2213: PPUSH
2214: CALL_OW 310
2218: PPUSH
2219: CALL_OW 74
2223: PPUSH
2224: CALL_OW 292
2228: AND
2229: IFFALSE 2265
2231: GO 2233
2233: DISABLE
// begin wait ( 0 0$5 ) ;
2234: LD_INT 175
2236: PPUSH
2237: CALL_OW 67
// Say ( Sevi , DDeath-Vse-2 ) ;
2241: LD_EXP 15
2245: PPUSH
2246: LD_STRING DDeath-Vse-2
2248: PPUSH
2249: CALL_OW 88
// Say ( Yashin , DDeath-Yas-2 ) ;
2253: LD_EXP 12
2257: PPUSH
2258: LD_STRING DDeath-Yas-2
2260: PPUSH
2261: CALL_OW 88
// end ;
2265: END
// every 0 0$1 trigger AssaultStarted do
2266: LD_EXP 7
2270: IFFALSE 2294
2272: GO 2274
2274: DISABLE
// begin wait ( 0 0$20 ) ;
2275: LD_INT 700
2277: PPUSH
2278: CALL_OW 67
// Say ( Popov , DDeath-Pop-2 ) ;
2282: LD_EXP 13
2286: PPUSH
2287: LD_STRING DDeath-Pop-2
2289: PPUSH
2290: CALL_OW 88
// end ;
2294: END
// every 0 0$1 trigger MissionStart do
2295: LD_EXP 1
2299: IFFALSE 2341
2301: GO 2303
2303: DISABLE
// begin wait ( rand ( 0 0$50 , 2 2$20 ) ) ;
2304: LD_INT 1750
2306: PPUSH
2307: LD_INT 4900
2309: PPUSH
2310: CALL_OW 12
2314: PPUSH
2315: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
2319: LD_INT 2
2321: PPUSH
2322: LD_INT 5
2324: PPUSH
2325: CALL_OW 12
2329: PPUSH
2330: LD_INT 12
2332: PPUSH
2333: LD_INT 1
2335: PPUSH
2336: CALL_OW 55
// enable ;
2340: ENABLE
// end ; end_of_file
2341: END
// export Brighton , Palmer , Megan ; export BetaSquad ; export function PrepareHeroes ; begin
2342: LD_INT 0
2344: PPUSH
// uc_side := 1 ;
2345: LD_ADDR_OWVAR 20
2349: PUSH
2350: LD_INT 1
2352: ST_TO_ADDR
// hc_class = class_soldier ;
2353: LD_ADDR_OWVAR 28
2357: PUSH
2358: LD_INT 1
2360: ST_TO_ADDR
// uc_nation := nation_american ;
2361: LD_ADDR_OWVAR 21
2365: PUSH
2366: LD_INT 1
2368: ST_TO_ADDR
// hc_sex = sex_male ;
2369: LD_ADDR_OWVAR 27
2373: PUSH
2374: LD_INT 1
2376: ST_TO_ADDR
// hc_importance = 110 ;
2377: LD_ADDR_OWVAR 32
2381: PUSH
2382: LD_INT 110
2384: ST_TO_ADDR
// hc_basic_skills = [ 5 , 4 , 5 , 3 ] ;
2385: LD_ADDR_OWVAR 30
2389: PUSH
2390: LD_INT 5
2392: PUSH
2393: LD_INT 4
2395: PUSH
2396: LD_INT 5
2398: PUSH
2399: LD_INT 3
2401: PUSH
2402: EMPTY
2403: LIST
2404: LIST
2405: LIST
2406: LIST
2407: ST_TO_ADDR
// hc_skills = [ 9 , 6 , 7 , 6 ] ;
2408: LD_ADDR_OWVAR 31
2412: PUSH
2413: LD_INT 9
2415: PUSH
2416: LD_INT 6
2418: PUSH
2419: LD_INT 7
2421: PUSH
2422: LD_INT 6
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: ST_TO_ADDR
// hc_attr = [ 12 , 10 ] ;
2431: LD_ADDR_OWVAR 29
2435: PUSH
2436: LD_INT 12
2438: PUSH
2439: LD_INT 10
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: ST_TO_ADDR
// hc_name := Gerard Brighton ;
2446: LD_ADDR_OWVAR 26
2450: PUSH
2451: LD_STRING Gerard Brighton
2453: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2454: LD_ADDR_OWVAR 33
2458: PUSH
2459: LD_STRING Beta_Skirmish
2461: ST_TO_ADDR
// hc_face_number := 1 ;
2462: LD_ADDR_OWVAR 34
2466: PUSH
2467: LD_INT 1
2469: ST_TO_ADDR
// Brighton := CreateHuman ;
2470: LD_ADDR_EXP 8
2474: PUSH
2475: CALL_OW 44
2479: ST_TO_ADDR
// uc_nation := nation_american ;
2480: LD_ADDR_OWVAR 21
2484: PUSH
2485: LD_INT 1
2487: ST_TO_ADDR
// hc_importance = 80 ;
2488: LD_ADDR_OWVAR 32
2492: PUSH
2493: LD_INT 80
2495: ST_TO_ADDR
// hc_sex = sex_male ;
2496: LD_ADDR_OWVAR 27
2500: PUSH
2501: LD_INT 1
2503: ST_TO_ADDR
// hc_basic_skills = [ 5 , 5 , 3 , 1 ] ;
2504: LD_ADDR_OWVAR 30
2508: PUSH
2509: LD_INT 5
2511: PUSH
2512: LD_INT 5
2514: PUSH
2515: LD_INT 3
2517: PUSH
2518: LD_INT 1
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: LIST
2525: LIST
2526: ST_TO_ADDR
// hc_skills = [ 7 , 6 , 5 , 3 ] ;
2527: LD_ADDR_OWVAR 31
2531: PUSH
2532: LD_INT 7
2534: PUSH
2535: LD_INT 6
2537: PUSH
2538: LD_INT 5
2540: PUSH
2541: LD_INT 3
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: LIST
2548: LIST
2549: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2550: LD_ADDR_OWVAR 29
2554: PUSH
2555: LD_INT 10
2557: PUSH
2558: LD_INT 10
2560: PUSH
2561: EMPTY
2562: LIST
2563: LIST
2564: ST_TO_ADDR
// hc_name := Brian Palmer ;
2565: LD_ADDR_OWVAR 26
2569: PUSH
2570: LD_STRING Brian Palmer
2572: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2573: LD_ADDR_OWVAR 33
2577: PUSH
2578: LD_STRING Beta_Skirmish
2580: ST_TO_ADDR
// hc_face_number := 3 ;
2581: LD_ADDR_OWVAR 34
2585: PUSH
2586: LD_INT 3
2588: ST_TO_ADDR
// Palmer := CreateHuman ;
2589: LD_ADDR_EXP 9
2593: PUSH
2594: CALL_OW 44
2598: ST_TO_ADDR
// hc_class = class_scientistic ;
2599: LD_ADDR_OWVAR 28
2603: PUSH
2604: LD_INT 4
2606: ST_TO_ADDR
// uc_nation := nation_american ;
2607: LD_ADDR_OWVAR 21
2611: PUSH
2612: LD_INT 1
2614: ST_TO_ADDR
// hc_importance = 70 ;
2615: LD_ADDR_OWVAR 32
2619: PUSH
2620: LD_INT 70
2622: ST_TO_ADDR
// hc_sex = sex_female ;
2623: LD_ADDR_OWVAR 27
2627: PUSH
2628: LD_INT 2
2630: ST_TO_ADDR
// hc_basic_skills = [ 3 , 2 , 4 , 6 ] ;
2631: LD_ADDR_OWVAR 30
2635: PUSH
2636: LD_INT 3
2638: PUSH
2639: LD_INT 2
2641: PUSH
2642: LD_INT 4
2644: PUSH
2645: LD_INT 6
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: LIST
2652: LIST
2653: ST_TO_ADDR
// hc_skills = [ 4 , 2 , 5 , 8 ] ;
2654: LD_ADDR_OWVAR 31
2658: PUSH
2659: LD_INT 4
2661: PUSH
2662: LD_INT 2
2664: PUSH
2665: LD_INT 5
2667: PUSH
2668: LD_INT 8
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: LIST
2675: LIST
2676: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2677: LD_ADDR_OWVAR 29
2681: PUSH
2682: LD_INT 10
2684: PUSH
2685: LD_INT 10
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: ST_TO_ADDR
// hc_name := Megan Armitage ;
2692: LD_ADDR_OWVAR 26
2696: PUSH
2697: LD_STRING Megan Armitage
2699: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2700: LD_ADDR_OWVAR 33
2704: PUSH
2705: LD_STRING Beta_Skirmish
2707: ST_TO_ADDR
// hc_face_number := 4 ;
2708: LD_ADDR_OWVAR 34
2712: PUSH
2713: LD_INT 4
2715: ST_TO_ADDR
// Megan := CreateHuman ;
2716: LD_ADDR_EXP 10
2720: PUSH
2721: CALL_OW 44
2725: ST_TO_ADDR
// end ;
2726: LD_VAR 0 1
2730: RET
// export function PrepareBeta ; var i , filter , un , soldiers ; begin
2731: LD_INT 0
2733: PPUSH
2734: PPUSH
2735: PPUSH
2736: PPUSH
2737: PPUSH
// uc_side := 1 ;
2738: LD_ADDR_OWVAR 20
2742: PUSH
2743: LD_INT 1
2745: ST_TO_ADDR
// uc_nation := nation_american ;
2746: LD_ADDR_OWVAR 21
2750: PUSH
2751: LD_INT 1
2753: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
2754: LD_ADDR_VAR 0 2
2758: PUSH
2759: LD_INT 22
2761: PUSH
2762: LD_INT 1
2764: PUSH
2765: EMPTY
2766: LIST
2767: LIST
2768: PUSH
2769: LD_INT 30
2771: PUSH
2772: LD_INT 32
2774: PUSH
2775: EMPTY
2776: LIST
2777: LIST
2778: PUSH
2779: EMPTY
2780: LIST
2781: LIST
2782: PPUSH
2783: CALL_OW 69
2787: PUSH
2788: FOR_IN
2789: IFFALSE 2844
// PlaceWeaponTurret ( i , [ us_machine_gun , us_light_gun , us_gatling_gun , us_double_gun , us_radar , us_light_gun , us_gatling_gun ] [ rand ( 1 , 7 ) ] ) ;
2791: LD_VAR 0 2
2795: PPUSH
2796: LD_INT 2
2798: PUSH
2799: LD_INT 3
2801: PUSH
2802: LD_INT 4
2804: PUSH
2805: LD_INT 5
2807: PUSH
2808: LD_INT 11
2810: PUSH
2811: LD_INT 3
2813: PUSH
2814: LD_INT 4
2816: PUSH
2817: EMPTY
2818: LIST
2819: LIST
2820: LIST
2821: LIST
2822: LIST
2823: LIST
2824: LIST
2825: PUSH
2826: LD_INT 1
2828: PPUSH
2829: LD_INT 7
2831: PPUSH
2832: CALL_OW 12
2836: ARRAY
2837: PPUSH
2838: CALL_OW 431
2842: GO 2788
2844: POP
2845: POP
// hc_name :=  ;
2846: LD_ADDR_OWVAR 26
2850: PUSH
2851: LD_STRING 
2853: ST_TO_ADDR
// hc_gallery :=  ;
2854: LD_ADDR_OWVAR 33
2858: PUSH
2859: LD_STRING 
2861: ST_TO_ADDR
// for i = 1 to [ 7 , 6 , 5 ] [ Difficulty ] do
2862: LD_ADDR_VAR 0 2
2866: PUSH
2867: DOUBLE
2868: LD_INT 1
2870: DEC
2871: ST_TO_ADDR
2872: LD_INT 7
2874: PUSH
2875: LD_INT 6
2877: PUSH
2878: LD_INT 5
2880: PUSH
2881: EMPTY
2882: LIST
2883: LIST
2884: LIST
2885: PUSH
2886: LD_OWVAR 67
2890: ARRAY
2891: PUSH
2892: FOR_TO
2893: IFFALSE 2951
// begin PrepareSoldier ( 1 , game_skill ) ;
2895: LD_INT 1
2897: PPUSH
2898: LD_EXP 38
2902: PPUSH
2903: CALL_OW 381
// un := CreateHuman ;
2907: LD_ADDR_VAR 0 4
2911: PUSH
2912: CALL_OW 44
2916: ST_TO_ADDR
// filter := filter ^ un ;
2917: LD_ADDR_VAR 0 3
2921: PUSH
2922: LD_VAR 0 3
2926: PUSH
2927: LD_VAR 0 4
2931: ADD
2932: ST_TO_ADDR
// soldiers := soldiers ^ un ;
2933: LD_ADDR_VAR 0 5
2937: PUSH
2938: LD_VAR 0 5
2942: PUSH
2943: LD_VAR 0 4
2947: ADD
2948: ST_TO_ADDR
// end ;
2949: GO 2892
2951: POP
2952: POP
// for i = 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
2953: LD_ADDR_VAR 0 2
2957: PUSH
2958: DOUBLE
2959: LD_INT 1
2961: DEC
2962: ST_TO_ADDR
2963: LD_INT 3
2965: PUSH
2966: LD_INT 2
2968: PUSH
2969: LD_INT 2
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: LIST
2976: PUSH
2977: LD_OWVAR 67
2981: ARRAY
2982: PUSH
2983: FOR_TO
2984: IFFALSE 3038
// begin PrepareEngineer ( 0 , game_skill ) ;
2986: LD_INT 0
2988: PPUSH
2989: LD_EXP 38
2993: PPUSH
2994: CALL_OW 382
// un := CreateHuman ;
2998: LD_ADDR_VAR 0 4
3002: PUSH
3003: CALL_OW 44
3007: ST_TO_ADDR
// filter := filter ^ un ;
3008: LD_ADDR_VAR 0 3
3012: PUSH
3013: LD_VAR 0 3
3017: PUSH
3018: LD_VAR 0 4
3022: ADD
3023: ST_TO_ADDR
// PlaceHumanInUnit ( un , BetaB ) ;
3024: LD_VAR 0 4
3028: PPUSH
3029: LD_INT 3
3031: PPUSH
3032: CALL_OW 52
// end ;
3036: GO 2983
3038: POP
3039: POP
// for i = 1 to [ 4 , 4 , 3 ] [ Difficulty ] do
3040: LD_ADDR_VAR 0 2
3044: PUSH
3045: DOUBLE
3046: LD_INT 1
3048: DEC
3049: ST_TO_ADDR
3050: LD_INT 4
3052: PUSH
3053: LD_INT 4
3055: PUSH
3056: LD_INT 3
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: LIST
3063: PUSH
3064: LD_OWVAR 67
3068: ARRAY
3069: PUSH
3070: FOR_TO
3071: IFFALSE 3125
// begin PrepareMechanic ( 0 , game_skill ) ;
3073: LD_INT 0
3075: PPUSH
3076: LD_EXP 38
3080: PPUSH
3081: CALL_OW 383
// un := CreateHuman ;
3085: LD_ADDR_VAR 0 4
3089: PUSH
3090: CALL_OW 44
3094: ST_TO_ADDR
// filter := filter ^ un ;
3095: LD_ADDR_VAR 0 3
3099: PUSH
3100: LD_VAR 0 3
3104: PUSH
3105: LD_VAR 0 4
3109: ADD
3110: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmFac ) ;
3111: LD_VAR 0 4
3115: PPUSH
3116: LD_INT 8
3118: PPUSH
3119: CALL_OW 52
// end ;
3123: GO 3070
3125: POP
3126: POP
// for i = 1 to 3 do
3127: LD_ADDR_VAR 0 2
3131: PUSH
3132: DOUBLE
3133: LD_INT 1
3135: DEC
3136: ST_TO_ADDR
3137: LD_INT 3
3139: PUSH
3140: FOR_TO
3141: IFFALSE 3195
// begin PrepareScientist ( 0 , game_skill ) ;
3143: LD_INT 0
3145: PPUSH
3146: LD_EXP 38
3150: PPUSH
3151: CALL_OW 384
// un := CreateHuman ;
3155: LD_ADDR_VAR 0 4
3159: PUSH
3160: CALL_OW 44
3164: ST_TO_ADDR
// filter := filter ^ un ;
3165: LD_ADDR_VAR 0 3
3169: PUSH
3170: LD_VAR 0 3
3174: PUSH
3175: LD_VAR 0 4
3179: ADD
3180: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmLab ) ;
3181: LD_VAR 0 4
3185: PPUSH
3186: LD_INT 14
3188: PPUSH
3189: CALL_OW 52
// end ;
3193: GO 3140
3195: POP
3196: POP
// for i = 1 to soldiers do
3197: LD_ADDR_VAR 0 2
3201: PUSH
3202: DOUBLE
3203: LD_INT 1
3205: DEC
3206: ST_TO_ADDR
3207: LD_VAR 0 5
3211: PUSH
3212: FOR_TO
3213: IFFALSE 3238
// PlaceUnitArea ( soldiers [ i ] , spawn_area , false ) ;
3215: LD_VAR 0 5
3219: PUSH
3220: LD_VAR 0 2
3224: ARRAY
3225: PPUSH
3226: LD_INT 1
3228: PPUSH
3229: LD_INT 0
3231: PPUSH
3232: CALL_OW 49
3236: GO 3212
3238: POP
3239: POP
// PlaceUnitXY ( Brighton , 51 , 43 , false ) ;
3240: LD_EXP 8
3244: PPUSH
3245: LD_INT 51
3247: PPUSH
3248: LD_INT 43
3250: PPUSH
3251: LD_INT 0
3253: PPUSH
3254: CALL_OW 48
// PlaceUnitXY ( Palmer , 55 , 58 , false ) ;
3258: LD_EXP 9
3262: PPUSH
3263: LD_INT 55
3265: PPUSH
3266: LD_INT 58
3268: PPUSH
3269: LD_INT 0
3271: PPUSH
3272: CALL_OW 48
// PlaceUnitXY ( Megan , 39 , 36 , false ) ;
3276: LD_EXP 10
3280: PPUSH
3281: LD_INT 39
3283: PPUSH
3284: LD_INT 36
3286: PPUSH
3287: LD_INT 0
3289: PPUSH
3290: CALL_OW 48
// BetaSquad := filter diff 0 ;
3294: LD_ADDR_EXP 11
3298: PUSH
3299: LD_VAR 0 3
3303: PUSH
3304: LD_INT 0
3306: DIFF
3307: ST_TO_ADDR
// end ;
3308: LD_VAR 0 1
3312: RET
// export Yashin , Popov , Gaydar , Sevi ; export RUArmada ; export function PrepareRUArmada ; var i , vehicle , soldiers , un , vehs ; begin
3313: LD_INT 0
3315: PPUSH
3316: PPUSH
3317: PPUSH
3318: PPUSH
3319: PPUSH
3320: PPUSH
// uc_side := 6 ;
3321: LD_ADDR_OWVAR 20
3325: PUSH
3326: LD_INT 6
3328: ST_TO_ADDR
// uc_nation := nation_russian ;
3329: LD_ADDR_OWVAR 21
3333: PUSH
3334: LD_INT 3
3336: ST_TO_ADDR
// soldiers := [ ] ;
3337: LD_ADDR_VAR 0 4
3341: PUSH
3342: EMPTY
3343: ST_TO_ADDR
// vehs := [ ] ;
3344: LD_ADDR_VAR 0 6
3348: PUSH
3349: EMPTY
3350: ST_TO_ADDR
// RUArmada := [ ] ;
3351: LD_ADDR_EXP 16
3355: PUSH
3356: EMPTY
3357: ST_TO_ADDR
// Yashin := NewCharacter ( Yashin ) ;
3358: LD_ADDR_EXP 12
3362: PUSH
3363: LD_STRING Yashin
3365: PPUSH
3366: CALL_OW 25
3370: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
3371: LD_ADDR_EXP 13
3375: PUSH
3376: LD_STRING Popov
3378: PPUSH
3379: CALL_OW 25
3383: ST_TO_ADDR
// Gaydar := NewCharacter ( Gaydar ) ;
3384: LD_ADDR_EXP 14
3388: PUSH
3389: LD_STRING Gaydar
3391: PPUSH
3392: CALL_OW 25
3396: ST_TO_ADDR
// Sevi := NewCharacter ( Vsevolod ) ;
3397: LD_ADDR_EXP 15
3401: PUSH
3402: LD_STRING Vsevolod
3404: PPUSH
3405: CALL_OW 25
3409: ST_TO_ADDR
// for i = 1 to 16 do
3410: LD_ADDR_VAR 0 2
3414: PUSH
3415: DOUBLE
3416: LD_INT 1
3418: DEC
3419: ST_TO_ADDR
3420: LD_INT 16
3422: PUSH
3423: FOR_TO
3424: IFFALSE 3466
// begin PrepareSoldier ( 0 , game_eskill ) ;
3426: LD_INT 0
3428: PPUSH
3429: LD_EXP 39
3433: PPUSH
3434: CALL_OW 381
// un := CreateHuman ;
3438: LD_ADDR_VAR 0 5
3442: PUSH
3443: CALL_OW 44
3447: ST_TO_ADDR
// soldiers := soldiers ^ un ;
3448: LD_ADDR_VAR 0 4
3452: PUSH
3453: LD_VAR 0 4
3457: PUSH
3458: LD_VAR 0 5
3462: ADD
3463: ST_TO_ADDR
// end ;
3464: GO 3423
3466: POP
3467: POP
// soldiers := Yashin ^ Popov ^ Gaydar ^ Sevi ^ soldiers ;
3468: LD_ADDR_VAR 0 4
3472: PUSH
3473: LD_EXP 12
3477: PUSH
3478: LD_EXP 13
3482: ADD
3483: PUSH
3484: LD_EXP 14
3488: ADD
3489: PUSH
3490: LD_EXP 15
3494: ADD
3495: PUSH
3496: LD_VAR 0 4
3500: ADD
3501: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_heavy_gun , 100 ) ;
3502: LD_INT 24
3504: PPUSH
3505: LD_INT 3
3507: PPUSH
3508: LD_INT 1
3510: PPUSH
3511: LD_INT 46
3513: PPUSH
3514: LD_INT 100
3516: PPUSH
3517: CALL 17306 0 5
// for i = 1 to 8 do
3521: LD_ADDR_VAR 0 2
3525: PUSH
3526: DOUBLE
3527: LD_INT 1
3529: DEC
3530: ST_TO_ADDR
3531: LD_INT 8
3533: PUSH
3534: FOR_TO
3535: IFFALSE 3618
// begin vehicle := CreateVehicle ;
3537: LD_ADDR_VAR 0 3
3541: PUSH
3542: CALL_OW 45
3546: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3547: LD_VAR 0 4
3551: PUSH
3552: LD_INT 1
3554: ARRAY
3555: PPUSH
3556: LD_VAR 0 3
3560: PPUSH
3561: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3565: LD_ADDR_VAR 0 4
3569: PUSH
3570: LD_VAR 0 4
3574: PUSH
3575: LD_VAR 0 4
3579: PUSH
3580: LD_INT 1
3582: ARRAY
3583: DIFF
3584: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3585: LD_VAR 0 3
3589: PPUSH
3590: LD_INT 5
3592: PPUSH
3593: LD_INT 0
3595: PPUSH
3596: CALL_OW 49
// vehs := vehs ^ vehicle ;
3600: LD_ADDR_VAR 0 6
3604: PUSH
3605: LD_VAR 0 6
3609: PUSH
3610: LD_VAR 0 3
3614: ADD
3615: ST_TO_ADDR
// end ;
3616: GO 3534
3618: POP
3619: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_gatling_gun , 100 ) ;
3620: LD_INT 24
3622: PPUSH
3623: LD_INT 3
3625: PPUSH
3626: LD_INT 1
3628: PPUSH
3629: LD_INT 43
3631: PPUSH
3632: LD_INT 100
3634: PPUSH
3635: CALL 17306 0 5
// for i = 1 to 8 do
3639: LD_ADDR_VAR 0 2
3643: PUSH
3644: DOUBLE
3645: LD_INT 1
3647: DEC
3648: ST_TO_ADDR
3649: LD_INT 8
3651: PUSH
3652: FOR_TO
3653: IFFALSE 3736
// begin vehicle := CreateVehicle ;
3655: LD_ADDR_VAR 0 3
3659: PUSH
3660: CALL_OW 45
3664: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3665: LD_VAR 0 4
3669: PUSH
3670: LD_INT 1
3672: ARRAY
3673: PPUSH
3674: LD_VAR 0 3
3678: PPUSH
3679: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3683: LD_ADDR_VAR 0 4
3687: PUSH
3688: LD_VAR 0 4
3692: PUSH
3693: LD_VAR 0 4
3697: PUSH
3698: LD_INT 1
3700: ARRAY
3701: DIFF
3702: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3703: LD_VAR 0 3
3707: PPUSH
3708: LD_INT 5
3710: PPUSH
3711: LD_INT 0
3713: PPUSH
3714: CALL_OW 49
// vehs := vehs ^ vehicle ;
3718: LD_ADDR_VAR 0 6
3722: PUSH
3723: LD_VAR 0 6
3727: PUSH
3728: LD_VAR 0 3
3732: ADD
3733: ST_TO_ADDR
// end ;
3734: GO 3652
3736: POP
3737: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_gun , 100 ) ;
3738: LD_INT 22
3740: PPUSH
3741: LD_INT 3
3743: PPUSH
3744: LD_INT 1
3746: PPUSH
3747: LD_INT 44
3749: PPUSH
3750: LD_INT 100
3752: PPUSH
3753: CALL 17306 0 5
// for i = 1 to 4 do
3757: LD_ADDR_VAR 0 2
3761: PUSH
3762: DOUBLE
3763: LD_INT 1
3765: DEC
3766: ST_TO_ADDR
3767: LD_INT 4
3769: PUSH
3770: FOR_TO
3771: IFFALSE 3854
// begin vehicle := CreateVehicle ;
3773: LD_ADDR_VAR 0 3
3777: PUSH
3778: CALL_OW 45
3782: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3783: LD_VAR 0 4
3787: PUSH
3788: LD_INT 1
3790: ARRAY
3791: PPUSH
3792: LD_VAR 0 3
3796: PPUSH
3797: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3801: LD_ADDR_VAR 0 4
3805: PUSH
3806: LD_VAR 0 4
3810: PUSH
3811: LD_VAR 0 4
3815: PUSH
3816: LD_INT 1
3818: ARRAY
3819: DIFF
3820: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3821: LD_VAR 0 3
3825: PPUSH
3826: LD_INT 5
3828: PPUSH
3829: LD_INT 0
3831: PPUSH
3832: CALL_OW 49
// vehs := vehs ^ vehicle ;
3836: LD_ADDR_VAR 0 6
3840: PUSH
3841: LD_VAR 0 6
3845: PUSH
3846: LD_VAR 0 3
3850: ADD
3851: ST_TO_ADDR
// end ;
3852: GO 3770
3854: POP
3855: POP
// RUArmada := vehs ;
3856: LD_ADDR_EXP 16
3860: PUSH
3861: LD_VAR 0 6
3865: ST_TO_ADDR
// SetMark ( [ IsInUnit ( Yashin ) , IsInUnit ( Popov ) , IsInUnit ( Gaydar ) , IsInUnit ( Sevi ) ] , - 6 ) ;
3866: LD_EXP 12
3870: PPUSH
3871: CALL_OW 310
3875: PUSH
3876: LD_EXP 13
3880: PPUSH
3881: CALL_OW 310
3885: PUSH
3886: LD_EXP 14
3890: PPUSH
3891: CALL_OW 310
3895: PUSH
3896: LD_EXP 15
3900: PPUSH
3901: CALL_OW 310
3905: PUSH
3906: EMPTY
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: PPUSH
3912: LD_INT 6
3914: NEG
3915: PPUSH
3916: CALL_OW 242
// end ;
3920: LD_VAR 0 1
3924: RET
// export Bulldozers ; export function PrepareRUBulldozers ; var i , vehicle ; begin
3925: LD_INT 0
3927: PPUSH
3928: PPUSH
3929: PPUSH
// uc_side := 6 ;
3930: LD_ADDR_OWVAR 20
3934: PUSH
3935: LD_INT 6
3937: ST_TO_ADDR
// uc_nation := nation_russian ;
3938: LD_ADDR_OWVAR 21
3942: PUSH
3943: LD_INT 3
3945: ST_TO_ADDR
// Bulldozers := [ ] ;
3946: LD_ADDR_EXP 17
3950: PUSH
3951: EMPTY
3952: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_bulldozer , 100 ) ;
3953: LD_INT 24
3955: PPUSH
3956: LD_INT 3
3958: PPUSH
3959: LD_INT 3
3961: PPUSH
3962: LD_INT 53
3964: PPUSH
3965: LD_INT 100
3967: PPUSH
3968: CALL 17306 0 5
// for i = 1 to 2 do
3972: LD_ADDR_VAR 0 2
3976: PUSH
3977: DOUBLE
3978: LD_INT 1
3980: DEC
3981: ST_TO_ADDR
3982: LD_INT 2
3984: PUSH
3985: FOR_TO
3986: IFFALSE 4031
// begin vehicle := CreateVehicle ;
3988: LD_ADDR_VAR 0 3
3992: PUSH
3993: CALL_OW 45
3997: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3998: LD_VAR 0 3
4002: PPUSH
4003: LD_INT 5
4005: PPUSH
4006: LD_INT 0
4008: PPUSH
4009: CALL_OW 49
// Bulldozers := Bulldozers ^ vehicle ;
4013: LD_ADDR_EXP 17
4017: PUSH
4018: LD_EXP 17
4022: PUSH
4023: LD_VAR 0 3
4027: ADD
4028: ST_TO_ADDR
// end ;
4029: GO 3985
4031: POP
4032: POP
// end ;
4033: LD_VAR 0 1
4037: RET
// export Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ; export function PrepareRUBase ; var i , filter , un ; begin
4038: LD_INT 0
4040: PPUSH
4041: PPUSH
4042: PPUSH
4043: PPUSH
// uc_side := 3 ;
4044: LD_ADDR_OWVAR 20
4048: PUSH
4049: LD_INT 3
4051: ST_TO_ADDR
// uc_nation := nation_russian ;
4052: LD_ADDR_OWVAR 21
4056: PUSH
4057: LD_INT 3
4059: ST_TO_ADDR
// hc_name :=  ;
4060: LD_ADDR_OWVAR 26
4064: PUSH
4065: LD_STRING 
4067: ST_TO_ADDR
// hc_gallery :=  ;
4068: LD_ADDR_OWVAR 33
4072: PUSH
4073: LD_STRING 
4075: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
4076: LD_ADDR_EXP 18
4080: PUSH
4081: LD_STRING Burlak
4083: PPUSH
4084: CALL_OW 25
4088: ST_TO_ADDR
// Gleb := NewCharacter ( Gleb ) ;
4089: LD_ADDR_EXP 19
4093: PUSH
4094: LD_STRING Gleb
4096: PPUSH
4097: CALL_OW 25
4101: ST_TO_ADDR
// Furmanov := NewCharacter ( Furmanov ) ;
4102: LD_ADDR_EXP 20
4106: PUSH
4107: LD_STRING Furmanov
4109: PPUSH
4110: CALL_OW 25
4114: ST_TO_ADDR
// Titov := NewCharacter ( Titov ) ;
4115: LD_ADDR_EXP 21
4119: PUSH
4120: LD_STRING Titov
4122: PPUSH
4123: CALL_OW 25
4127: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
4128: LD_ADDR_EXP 22
4132: PUSH
4133: LD_STRING Scholtze
4135: PPUSH
4136: CALL_OW 25
4140: ST_TO_ADDR
// Dolgov := NewCharacter ( Dolgov ) ;
4141: LD_ADDR_EXP 23
4145: PUSH
4146: LD_STRING Dolgov
4148: PPUSH
4149: CALL_OW 25
4153: ST_TO_ADDR
// Kapitsova := NewCharacter ( Kapitsova ) ;
4154: LD_ADDR_EXP 24
4158: PUSH
4159: LD_STRING Kapitsova
4161: PPUSH
4162: CALL_OW 25
4166: ST_TO_ADDR
// Karamazov := NewCharacter ( Karamazov ) ;
4167: LD_ADDR_EXP 25
4171: PUSH
4172: LD_STRING Karamazov
4174: PPUSH
4175: CALL_OW 25
4179: ST_TO_ADDR
// Kirlenkova := NewCharacter ( Kirlenkova ) ;
4180: LD_ADDR_EXP 26
4184: PUSH
4185: LD_STRING Kirlenkova
4187: PPUSH
4188: CALL_OW 25
4192: ST_TO_ADDR
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
4193: LD_ADDR_EXP 27
4197: PUSH
4198: LD_STRING Kovalyuk
4200: PPUSH
4201: CALL_OW 25
4205: ST_TO_ADDR
// Kozlov := NewCharacter ( Kozlov ) ;
4206: LD_ADDR_EXP 28
4210: PUSH
4211: LD_STRING Kozlov
4213: PPUSH
4214: CALL_OW 25
4218: ST_TO_ADDR
// Kuzmov := NewCharacter ( Kuzmov ) ;
4219: LD_ADDR_EXP 29
4223: PUSH
4224: LD_STRING Kuzmov
4226: PPUSH
4227: CALL_OW 25
4231: ST_TO_ADDR
// Lipshchin := NewCharacter ( Lipshchin ) ;
4232: LD_ADDR_EXP 30
4236: PUSH
4237: LD_STRING Lipshchin
4239: PPUSH
4240: CALL_OW 25
4244: ST_TO_ADDR
// Oblukov := NewCharacter ( Oblukov ) ;
4245: LD_ADDR_EXP 31
4249: PUSH
4250: LD_STRING Oblukov
4252: PPUSH
4253: CALL_OW 25
4257: ST_TO_ADDR
// Xavier2 := NewCharacter ( Xavier2 ) ;
4258: LD_ADDR_EXP 32
4262: PUSH
4263: LD_STRING Xavier2
4265: PPUSH
4266: CALL_OW 25
4270: ST_TO_ADDR
// Gnyevko := NewCharacter ( Gnyevko ) ;
4271: LD_ADDR_EXP 33
4275: PUSH
4276: LD_STRING Gnyevko
4278: PPUSH
4279: CALL_OW 25
4283: ST_TO_ADDR
// Belkov := NewCharacter ( Belkov ) ;
4284: LD_ADDR_EXP 34
4288: PUSH
4289: LD_STRING Belkov
4291: PPUSH
4292: CALL_OW 25
4296: ST_TO_ADDR
// filter := [ Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ] ;
4297: LD_ADDR_VAR 0 3
4301: PUSH
4302: LD_EXP 18
4306: PUSH
4307: LD_EXP 19
4311: PUSH
4312: LD_EXP 20
4316: PUSH
4317: LD_EXP 21
4321: PUSH
4322: LD_EXP 22
4326: PUSH
4327: LD_EXP 23
4331: PUSH
4332: LD_EXP 24
4336: PUSH
4337: LD_EXP 25
4341: PUSH
4342: LD_EXP 26
4346: PUSH
4347: LD_EXP 27
4351: PUSH
4352: LD_EXP 28
4356: PUSH
4357: LD_EXP 29
4361: PUSH
4362: LD_EXP 30
4366: PUSH
4367: LD_EXP 31
4371: PUSH
4372: LD_EXP 32
4376: PUSH
4377: LD_EXP 33
4381: PUSH
4382: LD_EXP 34
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: ST_TO_ADDR
// for i = 1 to filter do
4406: LD_ADDR_VAR 0 2
4410: PUSH
4411: DOUBLE
4412: LD_INT 1
4414: DEC
4415: ST_TO_ADDR
4416: LD_VAR 0 3
4420: PUSH
4421: FOR_TO
4422: IFFALSE 4447
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
4424: LD_VAR 0 3
4428: PUSH
4429: LD_VAR 0 2
4433: ARRAY
4434: PPUSH
4435: LD_INT 6
4437: PPUSH
4438: LD_INT 0
4440: PPUSH
4441: CALL_OW 49
4445: GO 4421
4447: POP
4448: POP
// end ;
4449: LD_VAR 0 1
4453: RET
// export RU_SecondPersonnel ; export function PrepareRUBase_v2 ; var i , filter , un ; begin
4454: LD_INT 0
4456: PPUSH
4457: PPUSH
4458: PPUSH
4459: PPUSH
// uc_side := 3 ;
4460: LD_ADDR_OWVAR 20
4464: PUSH
4465: LD_INT 3
4467: ST_TO_ADDR
// uc_nation := nation_russian ;
4468: LD_ADDR_OWVAR 21
4472: PUSH
4473: LD_INT 3
4475: ST_TO_ADDR
// hc_name :=  ;
4476: LD_ADDR_OWVAR 26
4480: PUSH
4481: LD_STRING 
4483: ST_TO_ADDR
// hc_gallery :=  ;
4484: LD_ADDR_OWVAR 33
4488: PUSH
4489: LD_STRING 
4491: ST_TO_ADDR
// for i = 1 to 8 do
4492: LD_ADDR_VAR 0 2
4496: PUSH
4497: DOUBLE
4498: LD_INT 1
4500: DEC
4501: ST_TO_ADDR
4502: LD_INT 8
4504: PUSH
4505: FOR_TO
4506: IFFALSE 4548
// begin PrepareSoldier ( 0 , game_eskill ) ;
4508: LD_INT 0
4510: PPUSH
4511: LD_EXP 39
4515: PPUSH
4516: CALL_OW 381
// un := CreateHuman ;
4520: LD_ADDR_VAR 0 4
4524: PUSH
4525: CALL_OW 44
4529: ST_TO_ADDR
// filter := filter ^ un ;
4530: LD_ADDR_VAR 0 3
4534: PUSH
4535: LD_VAR 0 3
4539: PUSH
4540: LD_VAR 0 4
4544: ADD
4545: ST_TO_ADDR
// end ;
4546: GO 4505
4548: POP
4549: POP
// for i = 1 to 4 do
4550: LD_ADDR_VAR 0 2
4554: PUSH
4555: DOUBLE
4556: LD_INT 1
4558: DEC
4559: ST_TO_ADDR
4560: LD_INT 4
4562: PUSH
4563: FOR_TO
4564: IFFALSE 4606
// begin PrepareEngineer ( 0 , game_eskill ) ;
4566: LD_INT 0
4568: PPUSH
4569: LD_EXP 39
4573: PPUSH
4574: CALL_OW 382
// un := CreateHuman ;
4578: LD_ADDR_VAR 0 4
4582: PUSH
4583: CALL_OW 44
4587: ST_TO_ADDR
// filter := filter ^ un ;
4588: LD_ADDR_VAR 0 3
4592: PUSH
4593: LD_VAR 0 3
4597: PUSH
4598: LD_VAR 0 4
4602: ADD
4603: ST_TO_ADDR
// end ;
4604: GO 4563
4606: POP
4607: POP
// for i = 1 to 6 do
4608: LD_ADDR_VAR 0 2
4612: PUSH
4613: DOUBLE
4614: LD_INT 1
4616: DEC
4617: ST_TO_ADDR
4618: LD_INT 6
4620: PUSH
4621: FOR_TO
4622: IFFALSE 4664
// begin PrepareMechanic ( 0 , game_eskill ) ;
4624: LD_INT 0
4626: PPUSH
4627: LD_EXP 39
4631: PPUSH
4632: CALL_OW 383
// un := CreateHuman ;
4636: LD_ADDR_VAR 0 4
4640: PUSH
4641: CALL_OW 44
4645: ST_TO_ADDR
// filter := filter ^ un ;
4646: LD_ADDR_VAR 0 3
4650: PUSH
4651: LD_VAR 0 3
4655: PUSH
4656: LD_VAR 0 4
4660: ADD
4661: ST_TO_ADDR
// end ;
4662: GO 4621
4664: POP
4665: POP
// for i = 1 to 4 do
4666: LD_ADDR_VAR 0 2
4670: PUSH
4671: DOUBLE
4672: LD_INT 1
4674: DEC
4675: ST_TO_ADDR
4676: LD_INT 4
4678: PUSH
4679: FOR_TO
4680: IFFALSE 4722
// begin PrepareScientist ( 0 , game_eskill ) ;
4682: LD_INT 0
4684: PPUSH
4685: LD_EXP 39
4689: PPUSH
4690: CALL_OW 384
// un := CreateHuman ;
4694: LD_ADDR_VAR 0 4
4698: PUSH
4699: CALL_OW 44
4703: ST_TO_ADDR
// filter := filter ^ un ;
4704: LD_ADDR_VAR 0 3
4708: PUSH
4709: LD_VAR 0 3
4713: PUSH
4714: LD_VAR 0 4
4718: ADD
4719: ST_TO_ADDR
// end ;
4720: GO 4679
4722: POP
4723: POP
// for i = 1 to filter do
4724: LD_ADDR_VAR 0 2
4728: PUSH
4729: DOUBLE
4730: LD_INT 1
4732: DEC
4733: ST_TO_ADDR
4734: LD_VAR 0 3
4738: PUSH
4739: FOR_TO
4740: IFFALSE 4765
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
4742: LD_VAR 0 3
4746: PUSH
4747: LD_VAR 0 2
4751: ARRAY
4752: PPUSH
4753: LD_INT 6
4755: PPUSH
4756: LD_INT 0
4758: PPUSH
4759: CALL_OW 49
4763: GO 4739
4765: POP
4766: POP
// RU_SecondPersonnel := filter ;
4767: LD_ADDR_EXP 35
4771: PUSH
4772: LD_VAR 0 3
4776: ST_TO_ADDR
// end ;
4777: LD_VAR 0 1
4781: RET
// export JMM ; export function JMMReinforcement ; var i , soldiers , un , vehs , vehicle , mechs ; begin
4782: LD_INT 0
4784: PPUSH
4785: PPUSH
4786: PPUSH
4787: PPUSH
4788: PPUSH
4789: PPUSH
4790: PPUSH
// uc_side := 1 ;
4791: LD_ADDR_OWVAR 20
4795: PUSH
4796: LD_INT 1
4798: ST_TO_ADDR
// uc_nation := nation_american ;
4799: LD_ADDR_OWVAR 21
4803: PUSH
4804: LD_INT 1
4806: ST_TO_ADDR
// JMM := NewCharacter ( JMM ) ;
4807: LD_ADDR_EXP 36
4811: PUSH
4812: LD_STRING JMM
4814: PPUSH
4815: CALL_OW 25
4819: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
4820: LD_EXP 36
4824: PPUSH
4825: LD_INT 1
4827: PPUSH
4828: CALL_OW 233
// PlaceUnitArea ( JMM , JMMArrivalArea , false ) ;
4832: LD_EXP 36
4836: PPUSH
4837: LD_INT 7
4839: PPUSH
4840: LD_INT 0
4842: PPUSH
4843: CALL_OW 49
// mechs := [ ] ;
4847: LD_ADDR_VAR 0 7
4851: PUSH
4852: EMPTY
4853: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
4854: LD_ADDR_VAR 0 2
4858: PUSH
4859: DOUBLE
4860: LD_INT 1
4862: DEC
4863: ST_TO_ADDR
4864: LD_INT 4
4866: PUSH
4867: LD_INT 3
4869: PUSH
4870: LD_INT 3
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: LIST
4877: PUSH
4878: LD_OWVAR 67
4882: ARRAY
4883: PUSH
4884: FOR_TO
4885: IFFALSE 4946
// begin PrepareSoldier ( 0 , game_skill + 1 ) ;
4887: LD_INT 0
4889: PPUSH
4890: LD_EXP 38
4894: PUSH
4895: LD_INT 1
4897: PLUS
4898: PPUSH
4899: CALL_OW 381
// un := CreateHuman ;
4903: LD_ADDR_VAR 0 4
4907: PUSH
4908: CALL_OW 44
4912: ST_TO_ADDR
// soldiers := soldiers ^ un ;
4913: LD_ADDR_VAR 0 3
4917: PUSH
4918: LD_VAR 0 3
4922: PUSH
4923: LD_VAR 0 4
4927: ADD
4928: ST_TO_ADDR
// PlaceUnitArea ( un , JMMArrivalArea , false ) ;
4929: LD_VAR 0 4
4933: PPUSH
4934: LD_INT 7
4936: PPUSH
4937: LD_INT 0
4939: PPUSH
4940: CALL_OW 49
// end ;
4944: GO 4884
4946: POP
4947: POP
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
4948: LD_ADDR_VAR 0 2
4952: PUSH
4953: DOUBLE
4954: LD_INT 1
4956: DEC
4957: ST_TO_ADDR
4958: LD_INT 7
4960: PUSH
4961: LD_INT 6
4963: PUSH
4964: LD_INT 4
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: LIST
4971: PUSH
4972: LD_OWVAR 67
4976: ARRAY
4977: PUSH
4978: FOR_TO
4979: IFFALSE 5025
// begin PrepareMechanic ( 0 , game_skill + 1 ) ;
4981: LD_INT 0
4983: PPUSH
4984: LD_EXP 38
4988: PUSH
4989: LD_INT 1
4991: PLUS
4992: PPUSH
4993: CALL_OW 383
// un := CreateHuman ;
4997: LD_ADDR_VAR 0 4
5001: PUSH
5002: CALL_OW 44
5006: ST_TO_ADDR
// mechs := mechs ^ un ;
5007: LD_ADDR_VAR 0 7
5011: PUSH
5012: LD_VAR 0 7
5016: PUSH
5017: LD_VAR 0 4
5021: ADD
5022: ST_TO_ADDR
// end ;
5023: GO 4978
5025: POP
5026: POP
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , us_double_gun , 100 ) ;
5027: LD_INT 3
5029: PPUSH
5030: LD_INT 3
5032: PPUSH
5033: LD_INT 1
5035: PPUSH
5036: LD_INT 5
5038: PPUSH
5039: LD_INT 100
5041: PPUSH
5042: CALL 17306 0 5
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
5046: LD_ADDR_VAR 0 2
5050: PUSH
5051: DOUBLE
5052: LD_INT 1
5054: DEC
5055: ST_TO_ADDR
5056: LD_INT 7
5058: PUSH
5059: LD_INT 6
5061: PUSH
5062: LD_INT 4
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: LIST
5069: PUSH
5070: LD_OWVAR 67
5074: ARRAY
5075: PUSH
5076: FOR_TO
5077: IFFALSE 5172
// begin vehicle := CreateVehicle ;
5079: LD_ADDR_VAR 0 6
5083: PUSH
5084: CALL_OW 45
5088: ST_TO_ADDR
// PlaceHumanInUnit ( mechs [ 1 ] , vehicle ) ;
5089: LD_VAR 0 7
5093: PUSH
5094: LD_INT 1
5096: ARRAY
5097: PPUSH
5098: LD_VAR 0 6
5102: PPUSH
5103: CALL_OW 52
// mechs := mechs diff mechs [ 1 ] ;
5107: LD_ADDR_VAR 0 7
5111: PUSH
5112: LD_VAR 0 7
5116: PUSH
5117: LD_VAR 0 7
5121: PUSH
5122: LD_INT 1
5124: ARRAY
5125: DIFF
5126: ST_TO_ADDR
// SetDir ( vehicle , 1 ) ;
5127: LD_VAR 0 6
5131: PPUSH
5132: LD_INT 1
5134: PPUSH
5135: CALL_OW 233
// PlaceUnitArea ( vehicle , JMMArrivalArea , false ) ;
5139: LD_VAR 0 6
5143: PPUSH
5144: LD_INT 7
5146: PPUSH
5147: LD_INT 0
5149: PPUSH
5150: CALL_OW 49
// vehs := vehs ^ vehicle ;
5154: LD_ADDR_VAR 0 5
5158: PUSH
5159: LD_VAR 0 5
5163: PUSH
5164: LD_VAR 0 6
5168: ADD
5169: ST_TO_ADDR
// end ;
5170: GO 5076
5172: POP
5173: POP
// end ; end_of_file
5174: LD_VAR 0 1
5178: RET
// export game_diff ; export game_skill , game_eskill ; export jmmArrival , ruArrival ; export function GameType ; begin
5179: LD_INT 0
5181: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
5182: LD_ADDR_OWVAR 67
5186: PUSH
5187: LD_INT 0
5189: PPUSH
5190: CALL_OW 426
5194: ST_TO_ADDR
// game_diff := Difficulty ;
5195: LD_ADDR_EXP 37
5199: PUSH
5200: LD_OWVAR 67
5204: ST_TO_ADDR
// game_skill := [ 7 , 6 , 6 ] [ game_diff ] ;
5205: LD_ADDR_EXP 38
5209: PUSH
5210: LD_INT 7
5212: PUSH
5213: LD_INT 6
5215: PUSH
5216: LD_INT 6
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: LIST
5223: PUSH
5224: LD_EXP 37
5228: ARRAY
5229: ST_TO_ADDR
// game_eskill := [ 6 , 7 , 8 ] [ game_diff ] ;
5230: LD_ADDR_EXP 39
5234: PUSH
5235: LD_INT 6
5237: PUSH
5238: LD_INT 7
5240: PUSH
5241: LD_INT 8
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: LIST
5248: PUSH
5249: LD_EXP 37
5253: ARRAY
5254: ST_TO_ADDR
// ruArrival := [ 3 3$00 , 2 2$30 , 2 2$00 ] [ game_diff ] ;
5255: LD_ADDR_EXP 41
5259: PUSH
5260: LD_INT 6300
5262: PUSH
5263: LD_INT 5250
5265: PUSH
5266: LD_INT 4200
5268: PUSH
5269: EMPTY
5270: LIST
5271: LIST
5272: LIST
5273: PUSH
5274: LD_EXP 37
5278: ARRAY
5279: ST_TO_ADDR
// jmmArrival := [ 35 35$00 , 45 45$00 , 55 55$00 ] [ game_diff ] ;
5280: LD_ADDR_EXP 40
5284: PUSH
5285: LD_INT 73500
5287: PUSH
5288: LD_INT 94500
5290: PUSH
5291: LD_INT 115500
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: LIST
5298: PUSH
5299: LD_EXP 37
5303: ARRAY
5304: ST_TO_ADDR
// end ; end_of_file
5305: LD_VAR 0 1
5309: RET
// export function CustomEvent ( event ) ; begin
5310: LD_INT 0
5312: PPUSH
// end ;
5313: LD_VAR 0 2
5317: RET
// export function CustomInitMacro ( ) ; begin
5318: LD_INT 0
5320: PPUSH
// MC_SetScanArea ( 1 , RU_Base_Area ) ;
5321: LD_INT 1
5323: PPUSH
5324: LD_INT 3
5326: PPUSH
5327: CALL 77737 0 2
// MC_SetParkingArea ( 1 , RU_Base_Parking ) ;
5331: LD_INT 1
5333: PPUSH
5334: LD_INT 4
5336: PPUSH
5337: CALL 77681 0 2
// MC_SetDepositsXY ( 1 , [ [ 136 , 130 , 0 ] , [ 145 , 123 , 0 ] , ] ) ;
5341: LD_INT 1
5343: PPUSH
5344: LD_INT 136
5346: PUSH
5347: LD_INT 130
5349: PUSH
5350: LD_INT 0
5352: PUSH
5353: EMPTY
5354: LIST
5355: LIST
5356: LIST
5357: PUSH
5358: LD_INT 145
5360: PUSH
5361: LD_INT 123
5363: PUSH
5364: LD_INT 0
5366: PUSH
5367: EMPTY
5368: LIST
5369: LIST
5370: LIST
5371: PUSH
5372: EMPTY
5373: LIST
5374: LIST
5375: PPUSH
5376: CALL 76803 0 2
// MC_SetAllowedTurretWeapons ( 1 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
5380: LD_INT 1
5382: PPUSH
5383: LD_INT 43
5385: PUSH
5386: LD_INT 46
5388: PUSH
5389: LD_INT 45
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: LIST
5396: PPUSH
5397: CALL 77569 0 2
// MC_SetCratesArea ( 1 , RU_Base_Area ) ;
5401: LD_INT 1
5403: PPUSH
5404: LD_INT 3
5406: PPUSH
5407: CALL 77251 0 2
// MC_SetTame ( 1 , RU_Base_Area ) ;
5411: LD_INT 1
5413: PPUSH
5414: LD_INT 3
5416: PPUSH
5417: CALL 76982 0 2
// MC_SetDefenderLimit ( 1 , 8 ) ;
5421: LD_INT 1
5423: PPUSH
5424: LD_INT 8
5426: PPUSH
5427: CALL 76664 0 2
// MC_SetProduceList ( 1 , [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] ] ) ;
5431: LD_INT 1
5433: PPUSH
5434: LD_INT 22
5436: PUSH
5437: LD_INT 1
5439: PUSH
5440: LD_INT 3
5442: PUSH
5443: LD_INT 43
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: LIST
5450: LIST
5451: PUSH
5452: LD_INT 22
5454: PUSH
5455: LD_INT 1
5457: PUSH
5458: LD_INT 3
5460: PUSH
5461: LD_INT 44
5463: PUSH
5464: EMPTY
5465: LIST
5466: LIST
5467: LIST
5468: LIST
5469: PUSH
5470: LD_INT 22
5472: PUSH
5473: LD_INT 1
5475: PUSH
5476: LD_INT 3
5478: PUSH
5479: LD_INT 45
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: LIST
5486: LIST
5487: PUSH
5488: LD_INT 24
5490: PUSH
5491: LD_INT 1
5493: PUSH
5494: LD_INT 3
5496: PUSH
5497: LD_INT 43
5499: PUSH
5500: EMPTY
5501: LIST
5502: LIST
5503: LIST
5504: LIST
5505: PUSH
5506: LD_INT 24
5508: PUSH
5509: LD_INT 1
5511: PUSH
5512: LD_INT 3
5514: PUSH
5515: LD_INT 43
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: LIST
5522: LIST
5523: PUSH
5524: LD_INT 24
5526: PUSH
5527: LD_INT 1
5529: PUSH
5530: LD_INT 3
5532: PUSH
5533: LD_INT 46
5535: PUSH
5536: EMPTY
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: PUSH
5542: LD_INT 22
5544: PUSH
5545: LD_INT 1
5547: PUSH
5548: LD_INT 3
5550: PUSH
5551: LD_INT 43
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: PUSH
5560: LD_INT 22
5562: PUSH
5563: LD_INT 1
5565: PUSH
5566: LD_INT 3
5568: PUSH
5569: LD_INT 44
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: PUSH
5578: EMPTY
5579: LIST
5580: LIST
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: LIST
5586: LIST
5587: PPUSH
5588: CALL 76479 0 2
// MC_SetBuildingList ( 1 , [ [ b_depot , 127 , 125 , 5 ] , [ b_lab , 124 , 132 , 0 ] , [ b_oil_mine , 136 , 130 , 1 ] , [ b_armoury , 118 , 114 , 2 ] , [ b_oil_mine , 145 , 123 , 1 ] , [ b_oil_power , 150 , 135 , 1 ] , [ b_oil_power , 140 , 134 , 2 ] , [ b_oil_power , 137 , 121 , 5 ] , [ b_workshop , 155 , 130 , 0 ] , [ b_bunker , 155 , 130 , 0 ] , [ b_bunker , 130 , 114 , 3 ] , [ b_bunker , 142 , 115 , 3 ] , [ b_bunker , 153 , 120 , 3 ] , ] ) ;
5592: LD_INT 1
5594: PPUSH
5595: LD_INT 0
5597: PUSH
5598: LD_INT 127
5600: PUSH
5601: LD_INT 125
5603: PUSH
5604: LD_INT 5
5606: PUSH
5607: EMPTY
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: PUSH
5613: LD_INT 6
5615: PUSH
5616: LD_INT 124
5618: PUSH
5619: LD_INT 132
5621: PUSH
5622: LD_INT 0
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: PUSH
5631: LD_INT 29
5633: PUSH
5634: LD_INT 136
5636: PUSH
5637: LD_INT 130
5639: PUSH
5640: LD_INT 1
5642: PUSH
5643: EMPTY
5644: LIST
5645: LIST
5646: LIST
5647: LIST
5648: PUSH
5649: LD_INT 4
5651: PUSH
5652: LD_INT 118
5654: PUSH
5655: LD_INT 114
5657: PUSH
5658: LD_INT 2
5660: PUSH
5661: EMPTY
5662: LIST
5663: LIST
5664: LIST
5665: LIST
5666: PUSH
5667: LD_INT 29
5669: PUSH
5670: LD_INT 145
5672: PUSH
5673: LD_INT 123
5675: PUSH
5676: LD_INT 1
5678: PUSH
5679: EMPTY
5680: LIST
5681: LIST
5682: LIST
5683: LIST
5684: PUSH
5685: LD_INT 26
5687: PUSH
5688: LD_INT 150
5690: PUSH
5691: LD_INT 135
5693: PUSH
5694: LD_INT 1
5696: PUSH
5697: EMPTY
5698: LIST
5699: LIST
5700: LIST
5701: LIST
5702: PUSH
5703: LD_INT 26
5705: PUSH
5706: LD_INT 140
5708: PUSH
5709: LD_INT 134
5711: PUSH
5712: LD_INT 2
5714: PUSH
5715: EMPTY
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: PUSH
5721: LD_INT 26
5723: PUSH
5724: LD_INT 137
5726: PUSH
5727: LD_INT 121
5729: PUSH
5730: LD_INT 5
5732: PUSH
5733: EMPTY
5734: LIST
5735: LIST
5736: LIST
5737: LIST
5738: PUSH
5739: LD_INT 2
5741: PUSH
5742: LD_INT 155
5744: PUSH
5745: LD_INT 130
5747: PUSH
5748: LD_INT 0
5750: PUSH
5751: EMPTY
5752: LIST
5753: LIST
5754: LIST
5755: LIST
5756: PUSH
5757: LD_INT 32
5759: PUSH
5760: LD_INT 155
5762: PUSH
5763: LD_INT 130
5765: PUSH
5766: LD_INT 0
5768: PUSH
5769: EMPTY
5770: LIST
5771: LIST
5772: LIST
5773: LIST
5774: PUSH
5775: LD_INT 32
5777: PUSH
5778: LD_INT 130
5780: PUSH
5781: LD_INT 114
5783: PUSH
5784: LD_INT 3
5786: PUSH
5787: EMPTY
5788: LIST
5789: LIST
5790: LIST
5791: LIST
5792: PUSH
5793: LD_INT 32
5795: PUSH
5796: LD_INT 142
5798: PUSH
5799: LD_INT 115
5801: PUSH
5802: LD_INT 3
5804: PUSH
5805: EMPTY
5806: LIST
5807: LIST
5808: LIST
5809: LIST
5810: PUSH
5811: LD_INT 32
5813: PUSH
5814: LD_INT 153
5816: PUSH
5817: LD_INT 120
5819: PUSH
5820: LD_INT 3
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: LIST
5827: LIST
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: LIST
5833: LIST
5834: LIST
5835: LIST
5836: LIST
5837: LIST
5838: LIST
5839: LIST
5840: LIST
5841: LIST
5842: LIST
5843: PPUSH
5844: CALL 76371 0 2
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_computer ] ) ;
5848: LD_INT 1
5850: PPUSH
5851: LD_INT 10
5853: PUSH
5854: LD_INT 12
5856: PUSH
5857: EMPTY
5858: LIST
5859: LIST
5860: PPUSH
5861: CALL 77158 0 2
// MC_SetFactoryExtension ( 1 , 155 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
5865: LD_INT 1
5867: PPUSH
5868: LD_INT 155
5870: PPUSH
5871: LD_INT 130
5873: PPUSH
5874: LD_INT 0
5876: PPUSH
5877: LD_INT 24
5879: PUSH
5880: LD_INT 16
5882: PUSH
5883: LD_INT 17
5885: PUSH
5886: LD_INT 18
5888: PUSH
5889: LD_INT 21
5891: PUSH
5892: EMPTY
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: PPUSH
5899: CALL 77363 0 5
// MC_SetScanArea ( 2 , RU_Base_Area ) ;
5903: LD_INT 2
5905: PPUSH
5906: LD_INT 3
5908: PPUSH
5909: CALL 77737 0 2
// MC_SetParkingArea ( 2 , RU_Base_Parking ) ;
5913: LD_INT 2
5915: PPUSH
5916: LD_INT 4
5918: PPUSH
5919: CALL 77681 0 2
// MC_SetDepositsXY ( 2 , [ [ 84 , 125 , 1 ] , ] ) ;
5923: LD_INT 2
5925: PPUSH
5926: LD_INT 84
5928: PUSH
5929: LD_INT 125
5931: PUSH
5932: LD_INT 1
5934: PUSH
5935: EMPTY
5936: LIST
5937: LIST
5938: LIST
5939: PUSH
5940: EMPTY
5941: LIST
5942: PPUSH
5943: CALL 76803 0 2
// MC_SetAllowedTurretWeapons ( 2 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
5947: LD_INT 2
5949: PPUSH
5950: LD_INT 43
5952: PUSH
5953: LD_INT 46
5955: PUSH
5956: LD_INT 45
5958: PUSH
5959: EMPTY
5960: LIST
5961: LIST
5962: LIST
5963: PPUSH
5964: CALL 77569 0 2
// MC_SetCratesArea ( 2 , RU_Base_Area ) ;
5968: LD_INT 2
5970: PPUSH
5971: LD_INT 3
5973: PPUSH
5974: CALL 77251 0 2
// MC_SetTame ( 2 , RU_Base_Area ) ;
5978: LD_INT 2
5980: PPUSH
5981: LD_INT 3
5983: PPUSH
5984: CALL 76982 0 2
// MC_SetDefenderLimit ( 2 , 8 ) ;
5988: LD_INT 2
5990: PPUSH
5991: LD_INT 8
5993: PPUSH
5994: CALL 76664 0 2
// MC_SetProduceList ( 2 , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] ] ) ;
5998: LD_INT 2
6000: PPUSH
6001: LD_INT 22
6003: PUSH
6004: LD_INT 3
6006: PUSH
6007: LD_INT 3
6009: PUSH
6010: LD_INT 43
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: PUSH
6019: LD_INT 22
6021: PUSH
6022: LD_INT 3
6024: PUSH
6025: LD_INT 3
6027: PUSH
6028: LD_INT 44
6030: PUSH
6031: EMPTY
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: PUSH
6037: LD_INT 22
6039: PUSH
6040: LD_INT 3
6042: PUSH
6043: LD_INT 3
6045: PUSH
6046: LD_INT 45
6048: PUSH
6049: EMPTY
6050: LIST
6051: LIST
6052: LIST
6053: LIST
6054: PUSH
6055: LD_INT 24
6057: PUSH
6058: LD_INT 3
6060: PUSH
6061: LD_INT 3
6063: PUSH
6064: LD_INT 43
6066: PUSH
6067: EMPTY
6068: LIST
6069: LIST
6070: LIST
6071: LIST
6072: PUSH
6073: LD_INT 24
6075: PUSH
6076: LD_INT 3
6078: PUSH
6079: LD_INT 3
6081: PUSH
6082: LD_INT 43
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: PUSH
6091: LD_INT 24
6093: PUSH
6094: LD_INT 3
6096: PUSH
6097: LD_INT 3
6099: PUSH
6100: LD_INT 46
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: PUSH
6109: LD_INT 22
6111: PUSH
6112: LD_INT 3
6114: PUSH
6115: LD_INT 3
6117: PUSH
6118: LD_INT 43
6120: PUSH
6121: EMPTY
6122: LIST
6123: LIST
6124: LIST
6125: LIST
6126: PUSH
6127: LD_INT 22
6129: PUSH
6130: LD_INT 3
6132: PUSH
6133: LD_INT 3
6135: PUSH
6136: LD_INT 44
6138: PUSH
6139: EMPTY
6140: LIST
6141: LIST
6142: LIST
6143: LIST
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: PPUSH
6155: CALL 76479 0 2
// MC_SetBuildingList ( 2 , [ [ b_depot , 96 , 125 , 0 ] , [ b_lab , 74 , 122 , 1 ] , [ b_siberite_mine , 84 , 125 , 1 ] , [ b_siberite_power , 86 , 128 , 1 ] , [ b_siberite_power , 85 , 130 , 2 ] , [ b_siberite_power , 88 , 132 , 5 ] , [ b_workshop , 106 , 130 , 0 ] , [ b_armoury , 99 , 114 , 3 ] , [ b_bunker , 72 , 112 , 2 ] , [ b_bunker , 78 , 110 , 3 ] , [ b_bunker , 84 , 110 , 2 ] , [ b_bunker , 105 , 117 , 3 ] , ] ) ;
6159: LD_INT 2
6161: PPUSH
6162: LD_INT 0
6164: PUSH
6165: LD_INT 96
6167: PUSH
6168: LD_INT 125
6170: PUSH
6171: LD_INT 0
6173: PUSH
6174: EMPTY
6175: LIST
6176: LIST
6177: LIST
6178: LIST
6179: PUSH
6180: LD_INT 6
6182: PUSH
6183: LD_INT 74
6185: PUSH
6186: LD_INT 122
6188: PUSH
6189: LD_INT 1
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: PUSH
6198: LD_INT 30
6200: PUSH
6201: LD_INT 84
6203: PUSH
6204: LD_INT 125
6206: PUSH
6207: LD_INT 1
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: LIST
6214: LIST
6215: PUSH
6216: LD_INT 28
6218: PUSH
6219: LD_INT 86
6221: PUSH
6222: LD_INT 128
6224: PUSH
6225: LD_INT 1
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: PUSH
6234: LD_INT 28
6236: PUSH
6237: LD_INT 85
6239: PUSH
6240: LD_INT 130
6242: PUSH
6243: LD_INT 2
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: LIST
6250: LIST
6251: PUSH
6252: LD_INT 28
6254: PUSH
6255: LD_INT 88
6257: PUSH
6258: LD_INT 132
6260: PUSH
6261: LD_INT 5
6263: PUSH
6264: EMPTY
6265: LIST
6266: LIST
6267: LIST
6268: LIST
6269: PUSH
6270: LD_INT 2
6272: PUSH
6273: LD_INT 106
6275: PUSH
6276: LD_INT 130
6278: PUSH
6279: LD_INT 0
6281: PUSH
6282: EMPTY
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: PUSH
6288: LD_INT 4
6290: PUSH
6291: LD_INT 99
6293: PUSH
6294: LD_INT 114
6296: PUSH
6297: LD_INT 3
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: PUSH
6306: LD_INT 32
6308: PUSH
6309: LD_INT 72
6311: PUSH
6312: LD_INT 112
6314: PUSH
6315: LD_INT 2
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: PUSH
6324: LD_INT 32
6326: PUSH
6327: LD_INT 78
6329: PUSH
6330: LD_INT 110
6332: PUSH
6333: LD_INT 3
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: PUSH
6342: LD_INT 32
6344: PUSH
6345: LD_INT 84
6347: PUSH
6348: LD_INT 110
6350: PUSH
6351: LD_INT 2
6353: PUSH
6354: EMPTY
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 32
6362: PUSH
6363: LD_INT 105
6365: PUSH
6366: LD_INT 117
6368: PUSH
6369: LD_INT 3
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: PPUSH
6392: CALL 76371 0 2
// MC_SetLabKind ( 2 , [ b_lab_spacetime , b_lab_siberium ] ) ;
6396: LD_INT 2
6398: PPUSH
6399: LD_INT 14
6401: PUSH
6402: LD_INT 11
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PPUSH
6409: CALL 77158 0 2
// MC_SetFactoryExtension ( 2 , 106 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
6413: LD_INT 2
6415: PPUSH
6416: LD_INT 106
6418: PPUSH
6419: LD_INT 130
6421: PPUSH
6422: LD_INT 0
6424: PPUSH
6425: LD_INT 24
6427: PUSH
6428: LD_INT 16
6430: PUSH
6431: LD_INT 17
6433: PUSH
6434: LD_INT 18
6436: PUSH
6437: LD_INT 21
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: PPUSH
6447: CALL 77363 0 5
// end ;
6451: LD_VAR 0 1
6455: RET
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
6456: LD_INT 22
6458: PUSH
6459: LD_INT 3
6461: PUSH
6462: EMPTY
6463: LIST
6464: LIST
6465: PUSH
6466: LD_INT 30
6468: PUSH
6469: LD_INT 3
6471: PUSH
6472: EMPTY
6473: LIST
6474: LIST
6475: PUSH
6476: EMPTY
6477: LIST
6478: LIST
6479: PPUSH
6480: CALL_OW 69
6484: IFFALSE 7340
6486: GO 6488
6488: DISABLE
6489: LD_INT 0
6491: PPUSH
6492: PPUSH
6493: PPUSH
6494: PPUSH
6495: PPUSH
6496: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
6497: LD_INT 6300
6499: PUSH
6500: LD_INT 4200
6502: PUSH
6503: LD_INT 2100
6505: PUSH
6506: EMPTY
6507: LIST
6508: LIST
6509: LIST
6510: PUSH
6511: LD_OWVAR 67
6515: ARRAY
6516: PPUSH
6517: CALL_OW 67
// base := 2 ;
6521: LD_ADDR_VAR 0 2
6525: PUSH
6526: LD_INT 2
6528: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
6529: LD_INT 22
6531: PUSH
6532: LD_INT 3
6534: PUSH
6535: EMPTY
6536: LIST
6537: LIST
6538: PUSH
6539: LD_INT 30
6541: PUSH
6542: LD_INT 3
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: PUSH
6549: EMPTY
6550: LIST
6551: LIST
6552: PPUSH
6553: CALL_OW 69
6557: NOT
6558: IFFALSE 6562
// continue ;
6560: GO 6497
// case Rand ( 1 , 3 ) of 1 :
6562: LD_INT 1
6564: PPUSH
6565: LD_INT 3
6567: PPUSH
6568: CALL_OW 12
6572: PUSH
6573: LD_INT 1
6575: DOUBLE
6576: EQUAL
6577: IFTRUE 6581
6579: GO 6757
6581: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6582: LD_ADDR_VAR 0 3
6586: PUSH
6587: LD_INT 22
6589: PUSH
6590: LD_INT 3
6592: PUSH
6593: LD_INT 3
6595: PUSH
6596: LD_INT 43
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: PUSH
6605: LD_INT 24
6607: PUSH
6608: LD_INT 3
6610: PUSH
6611: LD_INT 3
6613: PUSH
6614: LD_INT 46
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: PUSH
6623: LD_INT 24
6625: PUSH
6626: LD_INT 3
6628: PUSH
6629: LD_INT 3
6631: PUSH
6632: LD_INT 43
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: PUSH
6641: LD_INT 24
6643: PUSH
6644: LD_INT 3
6646: PUSH
6647: LD_INT 3
6649: PUSH
6650: LD_INT 46
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: PUSH
6659: LD_INT 22
6661: PUSH
6662: LD_INT 3
6664: PUSH
6665: LD_INT 3
6667: PUSH
6668: LD_INT 45
6670: PUSH
6671: EMPTY
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: PUSH
6677: LD_INT 22
6679: PUSH
6680: LD_INT 3
6682: PUSH
6683: LD_INT 3
6685: PUSH
6686: LD_INT 43
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: PUSH
6695: LD_INT 24
6697: PUSH
6698: LD_INT 3
6700: PUSH
6701: LD_INT 3
6703: PUSH
6704: LD_INT 46
6706: PUSH
6707: EMPTY
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: PUSH
6713: LD_INT 22
6715: PUSH
6716: LD_INT 3
6718: PUSH
6719: LD_INT 3
6721: PUSH
6722: LD_INT 45
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
6741: LD_VAR 0 2
6745: PPUSH
6746: LD_VAR 0 3
6750: PPUSH
6751: CALL 76527 0 2
// end ; 2 :
6755: GO 7088
6757: LD_INT 2
6759: DOUBLE
6760: EQUAL
6761: IFTRUE 6765
6763: GO 6903
6765: POP
// begin tmp := [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6766: LD_ADDR_VAR 0 3
6770: PUSH
6771: LD_INT 24
6773: PUSH
6774: LD_INT 3
6776: PUSH
6777: LD_INT 3
6779: PUSH
6780: LD_INT 43
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: PUSH
6789: LD_INT 24
6791: PUSH
6792: LD_INT 3
6794: PUSH
6795: LD_INT 3
6797: PUSH
6798: LD_INT 46
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: PUSH
6807: LD_INT 24
6809: PUSH
6810: LD_INT 3
6812: PUSH
6813: LD_INT 3
6815: PUSH
6816: LD_INT 43
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: PUSH
6825: LD_INT 24
6827: PUSH
6828: LD_INT 3
6830: PUSH
6831: LD_INT 3
6833: PUSH
6834: LD_INT 46
6836: PUSH
6837: EMPTY
6838: LIST
6839: LIST
6840: LIST
6841: LIST
6842: PUSH
6843: LD_INT 22
6845: PUSH
6846: LD_INT 3
6848: PUSH
6849: LD_INT 3
6851: PUSH
6852: LD_INT 45
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: PUSH
6861: LD_INT 22
6863: PUSH
6864: LD_INT 3
6866: PUSH
6867: LD_INT 3
6869: PUSH
6870: LD_INT 45
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
6887: LD_VAR 0 2
6891: PPUSH
6892: LD_VAR 0 3
6896: PPUSH
6897: CALL 76527 0 2
// end ; 3 :
6901: GO 7088
6903: LD_INT 3
6905: DOUBLE
6906: EQUAL
6907: IFTRUE 6911
6909: GO 7087
6911: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6912: LD_ADDR_VAR 0 3
6916: PUSH
6917: LD_INT 22
6919: PUSH
6920: LD_INT 3
6922: PUSH
6923: LD_INT 3
6925: PUSH
6926: LD_INT 43
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: PUSH
6935: LD_INT 24
6937: PUSH
6938: LD_INT 3
6940: PUSH
6941: LD_INT 3
6943: PUSH
6944: LD_INT 46
6946: PUSH
6947: EMPTY
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: PUSH
6953: LD_INT 22
6955: PUSH
6956: LD_INT 3
6958: PUSH
6959: LD_INT 3
6961: PUSH
6962: LD_INT 43
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: PUSH
6971: LD_INT 24
6973: PUSH
6974: LD_INT 3
6976: PUSH
6977: LD_INT 3
6979: PUSH
6980: LD_INT 46
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: PUSH
6989: LD_INT 22
6991: PUSH
6992: LD_INT 3
6994: PUSH
6995: LD_INT 3
6997: PUSH
6998: LD_INT 45
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: PUSH
7007: LD_INT 22
7009: PUSH
7010: LD_INT 3
7012: PUSH
7013: LD_INT 3
7015: PUSH
7016: LD_INT 43
7018: PUSH
7019: EMPTY
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: PUSH
7025: LD_INT 24
7027: PUSH
7028: LD_INT 3
7030: PUSH
7031: LD_INT 3
7033: PUSH
7034: LD_INT 46
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: PUSH
7043: LD_INT 22
7045: PUSH
7046: LD_INT 3
7048: PUSH
7049: LD_INT 3
7051: PUSH
7052: LD_INT 45
7054: PUSH
7055: EMPTY
7056: LIST
7057: LIST
7058: LIST
7059: LIST
7060: PUSH
7061: EMPTY
7062: LIST
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7071: LD_VAR 0 2
7075: PPUSH
7076: LD_VAR 0 3
7080: PPUSH
7081: CALL 76527 0 2
// end ; end ;
7085: GO 7088
7087: POP
// repeat wait ( 0 0$1 ) ;
7088: LD_INT 35
7090: PPUSH
7091: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
7095: LD_VAR 0 2
7099: PPUSH
7100: CALL 76875 0 1
7104: PUSH
7105: LD_INT 0
7107: EQUAL
7108: IFFALSE 7088
// wait ( 0 0$30 ) ;
7110: LD_INT 1050
7112: PPUSH
7113: CALL_OW 67
// _target := [ [ 86 , 77 ] , [ 63 , 38 ] ] ;
7117: LD_ADDR_VAR 0 5
7121: PUSH
7122: LD_INT 86
7124: PUSH
7125: LD_INT 77
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: PUSH
7132: LD_INT 63
7134: PUSH
7135: LD_INT 38
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
7146: LD_ADDR_VAR 0 4
7150: PUSH
7151: LD_INT 0
7153: PUSH
7154: LD_INT 0
7156: PUSH
7157: LD_INT 0
7159: PUSH
7160: LD_INT 1
7162: PUSH
7163: LD_INT 0
7165: PUSH
7166: LD_INT 0
7168: PUSH
7169: LD_INT 0
7171: PUSH
7172: LD_INT 0
7174: PUSH
7175: LD_INT 1
7177: PUSH
7178: LD_INT 0
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
7193: LD_ADDR_VAR 0 6
7197: PUSH
7198: LD_EXP 71
7202: PUSH
7203: LD_VAR 0 2
7207: ARRAY
7208: PUSH
7209: LD_EXP 74
7213: PUSH
7214: LD_VAR 0 2
7218: ARRAY
7219: DIFF
7220: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
7221: LD_ADDR_EXP 71
7225: PUSH
7226: LD_EXP 71
7230: PPUSH
7231: LD_VAR 0 2
7235: PPUSH
7236: LD_EXP 71
7240: PUSH
7241: LD_VAR 0 2
7245: ARRAY
7246: PUSH
7247: LD_VAR 0 6
7251: DIFF
7252: PPUSH
7253: CALL_OW 1
7257: ST_TO_ADDR
// if not attackers then
7258: LD_VAR 0 6
7262: NOT
7263: IFFALSE 7267
// continue ;
7265: GO 6497
// repeat wait ( 0 0$1 ) ;
7267: LD_INT 35
7269: PPUSH
7270: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
7274: LD_VAR 0 6
7278: PPUSH
7279: LD_INT 60
7281: PUSH
7282: EMPTY
7283: LIST
7284: PPUSH
7285: CALL_OW 72
7289: NOT
7290: IFFALSE 7267
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
7292: LD_VAR 0 2
7296: PPUSH
7297: LD_VAR 0 6
7301: PPUSH
7302: LD_VAR 0 5
7306: PPUSH
7307: LD_VAR 0 4
7311: PPUSH
7312: CALL 76712 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
7316: LD_EXP 52
7320: PUSH
7321: LD_VAR 0 2
7325: ARRAY
7326: PPUSH
7327: LD_INT 50
7329: PUSH
7330: EMPTY
7331: LIST
7332: PPUSH
7333: CALL_OW 72
7337: NOT
7338: IFFALSE 6497
// end ;
7340: PPOPN 6
7342: END
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
7343: LD_INT 22
7345: PUSH
7346: LD_INT 3
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: PUSH
7353: LD_INT 30
7355: PUSH
7356: LD_INT 3
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: PPUSH
7367: CALL_OW 69
7371: IFFALSE 8268
7373: GO 7375
7375: DISABLE
7376: LD_INT 0
7378: PPUSH
7379: PPUSH
7380: PPUSH
7381: PPUSH
7382: PPUSH
7383: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
7384: LD_INT 6300
7386: PUSH
7387: LD_INT 4200
7389: PUSH
7390: LD_INT 2100
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: LIST
7397: PUSH
7398: LD_OWVAR 67
7402: ARRAY
7403: PPUSH
7404: CALL_OW 67
// base := 1 ;
7408: LD_ADDR_VAR 0 2
7412: PUSH
7413: LD_INT 1
7415: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
7416: LD_INT 22
7418: PUSH
7419: LD_INT 3
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: PUSH
7426: LD_INT 30
7428: PUSH
7429: LD_INT 3
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: PPUSH
7440: CALL_OW 69
7444: NOT
7445: IFFALSE 7449
// continue ;
7447: GO 7384
// case Rand ( 1 , 3 ) of 1 :
7449: LD_INT 1
7451: PPUSH
7452: LD_INT 3
7454: PPUSH
7455: CALL_OW 12
7459: PUSH
7460: LD_INT 1
7462: DOUBLE
7463: EQUAL
7464: IFTRUE 7468
7466: GO 7644
7468: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7469: LD_ADDR_VAR 0 3
7473: PUSH
7474: LD_INT 22
7476: PUSH
7477: LD_INT 1
7479: PUSH
7480: LD_INT 3
7482: PUSH
7483: LD_INT 43
7485: PUSH
7486: EMPTY
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: PUSH
7492: LD_INT 24
7494: PUSH
7495: LD_INT 1
7497: PUSH
7498: LD_INT 3
7500: PUSH
7501: LD_INT 46
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: PUSH
7510: LD_INT 24
7512: PUSH
7513: LD_INT 1
7515: PUSH
7516: LD_INT 3
7518: PUSH
7519: LD_INT 43
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: PUSH
7528: LD_INT 24
7530: PUSH
7531: LD_INT 1
7533: PUSH
7534: LD_INT 3
7536: PUSH
7537: LD_INT 46
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: PUSH
7546: LD_INT 22
7548: PUSH
7549: LD_INT 1
7551: PUSH
7552: LD_INT 3
7554: PUSH
7555: LD_INT 45
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: PUSH
7564: LD_INT 22
7566: PUSH
7567: LD_INT 1
7569: PUSH
7570: LD_INT 3
7572: PUSH
7573: LD_INT 43
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: PUSH
7582: LD_INT 24
7584: PUSH
7585: LD_INT 1
7587: PUSH
7588: LD_INT 3
7590: PUSH
7591: LD_INT 46
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: PUSH
7600: LD_INT 22
7602: PUSH
7603: LD_INT 1
7605: PUSH
7606: LD_INT 3
7608: PUSH
7609: LD_INT 45
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7628: LD_VAR 0 2
7632: PPUSH
7633: LD_VAR 0 3
7637: PPUSH
7638: CALL 76527 0 2
// end ; 2 :
7642: GO 8013
7644: LD_INT 2
7646: DOUBLE
7647: EQUAL
7648: IFTRUE 7652
7650: GO 7828
7652: POP
// begin tmp := [ [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7653: LD_ADDR_VAR 0 3
7657: PUSH
7658: LD_INT 24
7660: PUSH
7661: LD_INT 1
7663: PUSH
7664: LD_INT 3
7666: PUSH
7667: LD_INT 43
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: PUSH
7676: LD_INT 24
7678: PUSH
7679: LD_INT 1
7681: PUSH
7682: LD_INT 3
7684: PUSH
7685: LD_INT 46
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: PUSH
7694: LD_INT 24
7696: PUSH
7697: LD_INT 1
7699: PUSH
7700: LD_INT 3
7702: PUSH
7703: LD_INT 43
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: PUSH
7712: LD_INT 24
7714: PUSH
7715: LD_INT 1
7717: PUSH
7718: LD_INT 3
7720: PUSH
7721: LD_INT 46
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: PUSH
7730: LD_INT 22
7732: PUSH
7733: LD_INT 1
7735: PUSH
7736: LD_INT 3
7738: PUSH
7739: LD_INT 45
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: PUSH
7748: LD_INT 22
7750: PUSH
7751: LD_INT 1
7753: PUSH
7754: LD_INT 3
7756: PUSH
7757: LD_INT 45
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: PUSH
7766: LD_INT 22
7768: PUSH
7769: LD_INT 1
7771: PUSH
7772: LD_INT 3
7774: PUSH
7775: LD_INT 45
7777: PUSH
7778: EMPTY
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: PUSH
7784: LD_INT 22
7786: PUSH
7787: LD_INT 1
7789: PUSH
7790: LD_INT 3
7792: PUSH
7793: LD_INT 45
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7812: LD_VAR 0 2
7816: PPUSH
7817: LD_VAR 0 3
7821: PPUSH
7822: CALL 76527 0 2
// end ; 3 :
7826: GO 8013
7828: LD_INT 3
7830: DOUBLE
7831: EQUAL
7832: IFTRUE 7836
7834: GO 8012
7836: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7837: LD_ADDR_VAR 0 3
7841: PUSH
7842: LD_INT 22
7844: PUSH
7845: LD_INT 1
7847: PUSH
7848: LD_INT 3
7850: PUSH
7851: LD_INT 43
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: PUSH
7860: LD_INT 24
7862: PUSH
7863: LD_INT 1
7865: PUSH
7866: LD_INT 3
7868: PUSH
7869: LD_INT 46
7871: PUSH
7872: EMPTY
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: PUSH
7878: LD_INT 22
7880: PUSH
7881: LD_INT 1
7883: PUSH
7884: LD_INT 3
7886: PUSH
7887: LD_INT 43
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: PUSH
7896: LD_INT 24
7898: PUSH
7899: LD_INT 1
7901: PUSH
7902: LD_INT 3
7904: PUSH
7905: LD_INT 46
7907: PUSH
7908: EMPTY
7909: LIST
7910: LIST
7911: LIST
7912: LIST
7913: PUSH
7914: LD_INT 22
7916: PUSH
7917: LD_INT 1
7919: PUSH
7920: LD_INT 3
7922: PUSH
7923: LD_INT 45
7925: PUSH
7926: EMPTY
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: PUSH
7932: LD_INT 22
7934: PUSH
7935: LD_INT 1
7937: PUSH
7938: LD_INT 3
7940: PUSH
7941: LD_INT 43
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: LIST
7948: LIST
7949: PUSH
7950: LD_INT 24
7952: PUSH
7953: LD_INT 1
7955: PUSH
7956: LD_INT 3
7958: PUSH
7959: LD_INT 46
7961: PUSH
7962: EMPTY
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: PUSH
7968: LD_INT 22
7970: PUSH
7971: LD_INT 1
7973: PUSH
7974: LD_INT 3
7976: PUSH
7977: LD_INT 45
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7996: LD_VAR 0 2
8000: PPUSH
8001: LD_VAR 0 3
8005: PPUSH
8006: CALL 76527 0 2
// end ; end ;
8010: GO 8013
8012: POP
// repeat wait ( 0 0$1 ) ;
8013: LD_INT 35
8015: PPUSH
8016: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 8 ;
8020: LD_VAR 0 2
8024: PPUSH
8025: LD_INT 1
8027: PPUSH
8028: CALL 77882 0 2
8032: PUSH
8033: LD_INT 8
8035: GREATEREQUAL
8036: IFFALSE 8013
// wait ( 0 0$30 ) ;
8038: LD_INT 1050
8040: PPUSH
8041: CALL_OW 67
// _target := [ [ 144 , 65 ] , [ 63 , 38 ] ] ;
8045: LD_ADDR_VAR 0 5
8049: PUSH
8050: LD_INT 144
8052: PUSH
8053: LD_INT 65
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: PUSH
8060: LD_INT 63
8062: PUSH
8063: LD_INT 38
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
8074: LD_ADDR_VAR 0 4
8078: PUSH
8079: LD_INT 0
8081: PUSH
8082: LD_INT 0
8084: PUSH
8085: LD_INT 0
8087: PUSH
8088: LD_INT 1
8090: PUSH
8091: LD_INT 0
8093: PUSH
8094: LD_INT 0
8096: PUSH
8097: LD_INT 0
8099: PUSH
8100: LD_INT 0
8102: PUSH
8103: LD_INT 1
8105: PUSH
8106: LD_INT 0
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: LIST
8120: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
8121: LD_ADDR_VAR 0 6
8125: PUSH
8126: LD_EXP 71
8130: PUSH
8131: LD_VAR 0 2
8135: ARRAY
8136: PUSH
8137: LD_EXP 74
8141: PUSH
8142: LD_VAR 0 2
8146: ARRAY
8147: DIFF
8148: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
8149: LD_ADDR_EXP 71
8153: PUSH
8154: LD_EXP 71
8158: PPUSH
8159: LD_VAR 0 2
8163: PPUSH
8164: LD_EXP 71
8168: PUSH
8169: LD_VAR 0 2
8173: ARRAY
8174: PUSH
8175: LD_VAR 0 6
8179: DIFF
8180: PPUSH
8181: CALL_OW 1
8185: ST_TO_ADDR
// if not attackers then
8186: LD_VAR 0 6
8190: NOT
8191: IFFALSE 8195
// continue ;
8193: GO 7384
// repeat wait ( 0 0$1 ) ;
8195: LD_INT 35
8197: PPUSH
8198: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
8202: LD_VAR 0 6
8206: PPUSH
8207: LD_INT 60
8209: PUSH
8210: EMPTY
8211: LIST
8212: PPUSH
8213: CALL_OW 72
8217: NOT
8218: IFFALSE 8195
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
8220: LD_VAR 0 2
8224: PPUSH
8225: LD_VAR 0 6
8229: PPUSH
8230: LD_VAR 0 5
8234: PPUSH
8235: LD_VAR 0 4
8239: PPUSH
8240: CALL 76712 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
8244: LD_EXP 52
8248: PUSH
8249: LD_VAR 0 2
8253: ARRAY
8254: PPUSH
8255: LD_INT 50
8257: PUSH
8258: EMPTY
8259: LIST
8260: PPUSH
8261: CALL_OW 72
8265: NOT
8266: IFFALSE 7384
// end ;
8268: PPOPN 6
8270: END
// export RussiansDefeated ; every 0 0$1 trigger FirstAssaultRepelled and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
8271: LD_EXP 3
8275: PUSH
8276: LD_INT 22
8278: PUSH
8279: LD_INT 3
8281: PUSH
8282: EMPTY
8283: LIST
8284: LIST
8285: PUSH
8286: LD_INT 21
8288: PUSH
8289: LD_INT 1
8291: PUSH
8292: EMPTY
8293: LIST
8294: LIST
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: PPUSH
8300: CALL_OW 69
8304: PUSH
8305: LD_INT 0
8307: EQUAL
8308: AND
8309: IFFALSE 8322
8311: GO 8313
8313: DISABLE
// begin RussiansDefeated := true ;
8314: LD_ADDR_EXP 42
8318: PUSH
8319: LD_INT 1
8321: ST_TO_ADDR
// end ;
8322: END
// every 0 0$1 trigger FirstAssaultRepelled and not JMM_Arrived do var i , un , filter , soldiers , bazookas , vehs , vehicle , medics , squad , attackers , _target , flags ;
8323: LD_EXP 3
8327: PUSH
8328: LD_EXP 5
8332: NOT
8333: AND
8334: IFFALSE 9307
8336: GO 8338
8338: DISABLE
8339: LD_INT 0
8341: PPUSH
8342: PPUSH
8343: PPUSH
8344: PPUSH
8345: PPUSH
8346: PPUSH
8347: PPUSH
8348: PPUSH
8349: PPUSH
8350: PPUSH
8351: PPUSH
8352: PPUSH
// begin wait ( [ Rand ( 5 5$00 , 6 6$30 ) , Rand ( 4 4$30 , 5 5$30 ) , Rand ( 4 4$00 , 5 5$00 ) ] [ Difficulty ] ) ;
8353: LD_INT 10500
8355: PPUSH
8356: LD_INT 13650
8358: PPUSH
8359: CALL_OW 12
8363: PUSH
8364: LD_INT 9450
8366: PPUSH
8367: LD_INT 11550
8369: PPUSH
8370: CALL_OW 12
8374: PUSH
8375: LD_INT 8400
8377: PPUSH
8378: LD_INT 10500
8380: PPUSH
8381: CALL_OW 12
8385: PUSH
8386: EMPTY
8387: LIST
8388: LIST
8389: LIST
8390: PUSH
8391: LD_OWVAR 67
8395: ARRAY
8396: PPUSH
8397: CALL_OW 67
// filter := [ ] ;
8401: LD_ADDR_VAR 0 3
8405: PUSH
8406: EMPTY
8407: ST_TO_ADDR
// soldiers := [ Rand ( 2 , 3 ) , Rand ( 3 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
8408: LD_ADDR_VAR 0 4
8412: PUSH
8413: LD_INT 2
8415: PPUSH
8416: LD_INT 3
8418: PPUSH
8419: CALL_OW 12
8423: PUSH
8424: LD_INT 3
8426: PPUSH
8427: LD_INT 4
8429: PPUSH
8430: CALL_OW 12
8434: PUSH
8435: LD_INT 3
8437: PPUSH
8438: LD_INT 5
8440: PPUSH
8441: CALL_OW 12
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: LIST
8450: PUSH
8451: LD_OWVAR 67
8455: ARRAY
8456: ST_TO_ADDR
// bazookas := [ 1 , Rand ( 1 , 2 ) , Rand ( 2 , 3 ) ] [ Difficulty ] ;
8457: LD_ADDR_VAR 0 5
8461: PUSH
8462: LD_INT 1
8464: PUSH
8465: LD_INT 1
8467: PPUSH
8468: LD_INT 2
8470: PPUSH
8471: CALL_OW 12
8475: PUSH
8476: LD_INT 2
8478: PPUSH
8479: LD_INT 3
8481: PPUSH
8482: CALL_OW 12
8486: PUSH
8487: EMPTY
8488: LIST
8489: LIST
8490: LIST
8491: PUSH
8492: LD_OWVAR 67
8496: ARRAY
8497: ST_TO_ADDR
// vehs := [ Rand ( 2 , 3 ) , Rand ( 2 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
8498: LD_ADDR_VAR 0 6
8502: PUSH
8503: LD_INT 2
8505: PPUSH
8506: LD_INT 3
8508: PPUSH
8509: CALL_OW 12
8513: PUSH
8514: LD_INT 2
8516: PPUSH
8517: LD_INT 4
8519: PPUSH
8520: CALL_OW 12
8524: PUSH
8525: LD_INT 3
8527: PPUSH
8528: LD_INT 5
8530: PPUSH
8531: CALL_OW 12
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: LIST
8540: PUSH
8541: LD_OWVAR 67
8545: ARRAY
8546: ST_TO_ADDR
// medics := [ 1 , 2 , 2 ] [ Difficulty ] ;
8547: LD_ADDR_VAR 0 8
8551: PUSH
8552: LD_INT 1
8554: PUSH
8555: LD_INT 2
8557: PUSH
8558: LD_INT 2
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: LIST
8565: PUSH
8566: LD_OWVAR 67
8570: ARRAY
8571: ST_TO_ADDR
// uc_side := 3 ;
8572: LD_ADDR_OWVAR 20
8576: PUSH
8577: LD_INT 3
8579: ST_TO_ADDR
// uc_nation := nation_russian ;
8580: LD_ADDR_OWVAR 21
8584: PUSH
8585: LD_INT 3
8587: ST_TO_ADDR
// for i = 1 to soldiers do
8588: LD_ADDR_VAR 0 1
8592: PUSH
8593: DOUBLE
8594: LD_INT 1
8596: DEC
8597: ST_TO_ADDR
8598: LD_VAR 0 4
8602: PUSH
8603: FOR_TO
8604: IFFALSE 8646
// begin PrepareSoldier ( 0 , game_eskill ) ;
8606: LD_INT 0
8608: PPUSH
8609: LD_EXP 39
8613: PPUSH
8614: CALL_OW 381
// un := CreateHuman ;
8618: LD_ADDR_VAR 0 2
8622: PUSH
8623: CALL_OW 44
8627: ST_TO_ADDR
// filter := filter ^ un ;
8628: LD_ADDR_VAR 0 3
8632: PUSH
8633: LD_VAR 0 3
8637: PUSH
8638: LD_VAR 0 2
8642: ADD
8643: ST_TO_ADDR
// end ;
8644: GO 8603
8646: POP
8647: POP
// for i = 1 to bazookas do
8648: LD_ADDR_VAR 0 1
8652: PUSH
8653: DOUBLE
8654: LD_INT 1
8656: DEC
8657: ST_TO_ADDR
8658: LD_VAR 0 5
8662: PUSH
8663: FOR_TO
8664: IFFALSE 8714
// begin PrepareSoldier ( 0 , game_eskill ) ;
8666: LD_INT 0
8668: PPUSH
8669: LD_EXP 39
8673: PPUSH
8674: CALL_OW 381
// hc_class := class_bazooker ;
8678: LD_ADDR_OWVAR 28
8682: PUSH
8683: LD_INT 9
8685: ST_TO_ADDR
// un := CreateHuman ;
8686: LD_ADDR_VAR 0 2
8690: PUSH
8691: CALL_OW 44
8695: ST_TO_ADDR
// filter := filter ^ un ;
8696: LD_ADDR_VAR 0 3
8700: PUSH
8701: LD_VAR 0 3
8705: PUSH
8706: LD_VAR 0 2
8710: ADD
8711: ST_TO_ADDR
// end ;
8712: GO 8663
8714: POP
8715: POP
// for i = 1 to medics do
8716: LD_ADDR_VAR 0 1
8720: PUSH
8721: DOUBLE
8722: LD_INT 1
8724: DEC
8725: ST_TO_ADDR
8726: LD_VAR 0 8
8730: PUSH
8731: FOR_TO
8732: IFFALSE 8774
// begin PrepareScientist ( 0 , game_eskill ) ;
8734: LD_INT 0
8736: PPUSH
8737: LD_EXP 39
8741: PPUSH
8742: CALL_OW 384
// un := CreateHuman ;
8746: LD_ADDR_VAR 0 2
8750: PUSH
8751: CALL_OW 44
8755: ST_TO_ADDR
// filter := filter ^ un ;
8756: LD_ADDR_VAR 0 3
8760: PUSH
8761: LD_VAR 0 3
8765: PUSH
8766: LD_VAR 0 2
8770: ADD
8771: ST_TO_ADDR
// end ;
8772: GO 8731
8774: POP
8775: POP
// for i = 1 to vehs do
8776: LD_ADDR_VAR 0 1
8780: PUSH
8781: DOUBLE
8782: LD_INT 1
8784: DEC
8785: ST_TO_ADDR
8786: LD_VAR 0 6
8790: PUSH
8791: FOR_TO
8792: IFFALSE 8984
// begin case Rand ( 1 , 5 ) of 1 :
8794: LD_INT 1
8796: PPUSH
8797: LD_INT 5
8799: PPUSH
8800: CALL_OW 12
8804: PUSH
8805: LD_INT 1
8807: DOUBLE
8808: EQUAL
8809: IFTRUE 8813
8811: GO 8835
8813: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 2 :
8814: LD_INT 22
8816: PPUSH
8817: LD_INT 3
8819: PPUSH
8820: LD_INT 3
8822: PPUSH
8823: LD_INT 43
8825: PPUSH
8826: LD_INT 100
8828: PPUSH
8829: CALL 17306 0 5
8833: GO 8956
8835: LD_INT 2
8837: DOUBLE
8838: EQUAL
8839: IFTRUE 8843
8841: GO 8865
8843: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gun , 100 ) ; 3 :
8844: LD_INT 22
8846: PPUSH
8847: LD_INT 3
8849: PPUSH
8850: LD_INT 3
8852: PPUSH
8853: LD_INT 44
8855: PPUSH
8856: LD_INT 100
8858: PPUSH
8859: CALL 17306 0 5
8863: GO 8956
8865: LD_INT 3
8867: DOUBLE
8868: EQUAL
8869: IFTRUE 8873
8871: GO 8895
8873: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher , 100 ) ; 4 :
8874: LD_INT 22
8876: PPUSH
8877: LD_INT 3
8879: PPUSH
8880: LD_INT 3
8882: PPUSH
8883: LD_INT 45
8885: PPUSH
8886: LD_INT 100
8888: PPUSH
8889: CALL 17306 0 5
8893: GO 8956
8895: LD_INT 4
8897: DOUBLE
8898: EQUAL
8899: IFTRUE 8903
8901: GO 8925
8903: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 5 :
8904: LD_INT 24
8906: PPUSH
8907: LD_INT 3
8909: PPUSH
8910: LD_INT 3
8912: PPUSH
8913: LD_INT 43
8915: PPUSH
8916: LD_INT 100
8918: PPUSH
8919: CALL 17306 0 5
8923: GO 8956
8925: LD_INT 5
8927: DOUBLE
8928: EQUAL
8929: IFTRUE 8933
8931: GO 8955
8933: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun , 100 ) ; end ;
8934: LD_INT 24
8936: PPUSH
8937: LD_INT 3
8939: PPUSH
8940: LD_INT 3
8942: PPUSH
8943: LD_INT 46
8945: PPUSH
8946: LD_INT 100
8948: PPUSH
8949: CALL 17306 0 5
8953: GO 8956
8955: POP
// vehicle := CreateVehicle ;
8956: LD_ADDR_VAR 0 7
8960: PUSH
8961: CALL_OW 45
8965: ST_TO_ADDR
// filter := filter ^ vehicle ;
8966: LD_ADDR_VAR 0 3
8970: PUSH
8971: LD_VAR 0 3
8975: PUSH
8976: LD_VAR 0 7
8980: ADD
8981: ST_TO_ADDR
// end ;
8982: GO 8791
8984: POP
8985: POP
// for i = 1 to filter do
8986: LD_ADDR_VAR 0 1
8990: PUSH
8991: DOUBLE
8992: LD_INT 1
8994: DEC
8995: ST_TO_ADDR
8996: LD_VAR 0 3
9000: PUSH
9001: FOR_TO
9002: IFFALSE 9027
// PlaceUnitArea ( filter [ i ] , RUAttackSpawn1 , false ) ;
9004: LD_VAR 0 3
9008: PUSH
9009: LD_VAR 0 1
9013: ARRAY
9014: PPUSH
9015: LD_INT 14
9017: PPUSH
9018: LD_INT 0
9020: PPUSH
9021: CALL_OW 49
9025: GO 9001
9027: POP
9028: POP
// case Rand ( 1 , 3 ) of 1 :
9029: LD_INT 1
9031: PPUSH
9032: LD_INT 3
9034: PPUSH
9035: CALL_OW 12
9039: PUSH
9040: LD_INT 1
9042: DOUBLE
9043: EQUAL
9044: IFTRUE 9048
9046: GO 9102
9048: POP
// _target := [ [ 165 , 114 ] , [ 104 , 108 ] , [ 86 , 77 ] , [ 63 , 38 ] ] ; 2 :
9049: LD_ADDR_VAR 0 11
9053: PUSH
9054: LD_INT 165
9056: PUSH
9057: LD_INT 114
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: PUSH
9064: LD_INT 104
9066: PUSH
9067: LD_INT 108
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: PUSH
9074: LD_INT 86
9076: PUSH
9077: LD_INT 77
9079: PUSH
9080: EMPTY
9081: LIST
9082: LIST
9083: PUSH
9084: LD_INT 63
9086: PUSH
9087: LD_INT 38
9089: PUSH
9090: EMPTY
9091: LIST
9092: LIST
9093: PUSH
9094: EMPTY
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: ST_TO_ADDR
9100: GO 9227
9102: LD_INT 2
9104: DOUBLE
9105: EQUAL
9106: IFTRUE 9110
9108: GO 9164
9110: POP
// _target := [ [ 165 , 114 ] , [ 146 , 71 ] , [ 112 , 41 ] , [ 63 , 38 ] ] ; 3 :
9111: LD_ADDR_VAR 0 11
9115: PUSH
9116: LD_INT 165
9118: PUSH
9119: LD_INT 114
9121: PUSH
9122: EMPTY
9123: LIST
9124: LIST
9125: PUSH
9126: LD_INT 146
9128: PUSH
9129: LD_INT 71
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: PUSH
9136: LD_INT 112
9138: PUSH
9139: LD_INT 41
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: PUSH
9146: LD_INT 63
9148: PUSH
9149: LD_INT 38
9151: PUSH
9152: EMPTY
9153: LIST
9154: LIST
9155: PUSH
9156: EMPTY
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: ST_TO_ADDR
9162: GO 9227
9164: LD_INT 3
9166: DOUBLE
9167: EQUAL
9168: IFTRUE 9172
9170: GO 9226
9172: POP
// _target := [ [ 165 , 114 ] , [ 63 , 99 ] , [ 55 , 77 ] , [ 63 , 38 ] ] ; end ;
9173: LD_ADDR_VAR 0 11
9177: PUSH
9178: LD_INT 165
9180: PUSH
9181: LD_INT 114
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: PUSH
9188: LD_INT 63
9190: PUSH
9191: LD_INT 99
9193: PUSH
9194: EMPTY
9195: LIST
9196: LIST
9197: PUSH
9198: LD_INT 55
9200: PUSH
9201: LD_INT 77
9203: PUSH
9204: EMPTY
9205: LIST
9206: LIST
9207: PUSH
9208: LD_INT 63
9210: PUSH
9211: LD_INT 38
9213: PUSH
9214: EMPTY
9215: LIST
9216: LIST
9217: PUSH
9218: EMPTY
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: ST_TO_ADDR
9224: GO 9227
9226: POP
// attackers := filter ;
9227: LD_ADDR_VAR 0 10
9231: PUSH
9232: LD_VAR 0 3
9236: ST_TO_ADDR
// flags := [ 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 ] ;
9237: LD_ADDR_VAR 0 12
9241: PUSH
9242: LD_INT 0
9244: PUSH
9245: LD_INT 1
9247: PUSH
9248: LD_INT 0
9250: PUSH
9251: LD_INT 1
9253: PUSH
9254: LD_INT 1
9256: PUSH
9257: LD_INT 0
9259: PUSH
9260: LD_INT 0
9262: PUSH
9263: LD_INT 0
9265: PUSH
9266: LD_INT 1
9268: PUSH
9269: LD_INT 1
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: ST_TO_ADDR
// MC_PrepareAttack ( 1 , attackers , _target , flags ) ;
9284: LD_INT 1
9286: PPUSH
9287: LD_VAR 0 10
9291: PPUSH
9292: LD_VAR 0 11
9296: PPUSH
9297: LD_VAR 0 12
9301: PPUSH
9302: CALL 76712 0 4
// enable ;
9306: ENABLE
// end ;
9307: PPOPN 12
9309: END
// every 0 0$1 do var i , tmp ;
9310: GO 9312
9312: DISABLE
9313: LD_INT 0
9315: PPUSH
9316: PPUSH
// begin enable ;
9317: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
9318: LD_ADDR_VAR 0 2
9322: PUSH
9323: LD_INT 3
9325: PUSH
9326: LD_INT 22
9328: PUSH
9329: LD_INT 1
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: PUSH
9340: LD_INT 32
9342: PUSH
9343: LD_INT 1
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: PUSH
9350: EMPTY
9351: LIST
9352: LIST
9353: PPUSH
9354: CALL_OW 69
9358: ST_TO_ADDR
// if tmp then
9359: LD_VAR 0 2
9363: IFFALSE 9409
// for i in tmp do
9365: LD_ADDR_VAR 0 1
9369: PUSH
9370: LD_VAR 0 2
9374: PUSH
9375: FOR_IN
9376: IFFALSE 9407
// if GetFuel ( i ) < 3 then
9378: LD_VAR 0 1
9382: PPUSH
9383: CALL_OW 261
9387: PUSH
9388: LD_INT 3
9390: LESS
9391: IFFALSE 9405
// SetFuel ( i , 3 ) ;
9393: LD_VAR 0 1
9397: PPUSH
9398: LD_INT 3
9400: PPUSH
9401: CALL_OW 240
9405: GO 9375
9407: POP
9408: POP
// end ; end_of_file
9409: PPOPN 2
9411: END
// export Losses ; on UnitDestroyed ( un ) do begin if un = Brighton then
9412: LD_VAR 0 1
9416: PUSH
9417: LD_EXP 8
9421: EQUAL
9422: IFFALSE 9438
// begin wait ( 0 0$1 ) ;
9424: LD_INT 35
9426: PPUSH
9427: CALL_OW 67
// YouLost ( Brighton ) ;
9431: LD_STRING Brighton
9433: PPUSH
9434: CALL_OW 104
// end ; if un = JMM then
9438: LD_VAR 0 1
9442: PUSH
9443: LD_EXP 36
9447: EQUAL
9448: IFFALSE 9464
// begin wait ( 0 0$1 ) ;
9450: LD_INT 35
9452: PPUSH
9453: CALL_OW 67
// YouLost ( JMM ) ;
9457: LD_STRING JMM
9459: PPUSH
9460: CALL_OW 104
// end ; if un = Megan then
9464: LD_VAR 0 1
9468: PUSH
9469: LD_EXP 10
9473: EQUAL
9474: IFFALSE 9488
// begin Say ( Brighton , DBrighton-MeganDeath ) ;
9476: LD_EXP 8
9480: PPUSH
9481: LD_STRING DBrighton-MeganDeath
9483: PPUSH
9484: CALL_OW 88
// end ; if un = Palmer then
9488: LD_VAR 0 1
9492: PUSH
9493: LD_EXP 9
9497: EQUAL
9498: IFFALSE 9512
// begin Say ( Brighton , DBrighton-PalmerDeath ) ;
9500: LD_EXP 8
9504: PPUSH
9505: LD_STRING DBrighton-PalmerDeath
9507: PPUSH
9508: CALL_OW 88
// end ; if un = Burlak then
9512: LD_VAR 0 1
9516: PUSH
9517: LD_EXP 18
9521: EQUAL
9522: IFFALSE 9554
// begin if JMM_Arrived then
9524: LD_EXP 5
9528: IFFALSE 9542
// Say ( JMM , DJMM-BurlakDead ) ;
9530: LD_EXP 36
9534: PPUSH
9535: LD_STRING DJMM-BurlakDead
9537: PPUSH
9538: CALL_OW 88
// Say ( Palmer , DSol-BurlakDead ) ;
9542: LD_EXP 9
9546: PPUSH
9547: LD_STRING DSol-BurlakDead
9549: PPUSH
9550: CALL_OW 88
// end ; if un = BetaA or un = BetaB then
9554: LD_VAR 0 1
9558: PUSH
9559: LD_INT 1
9561: EQUAL
9562: PUSH
9563: LD_VAR 0 1
9567: PUSH
9568: LD_INT 3
9570: EQUAL
9571: OR
9572: IFFALSE 9588
// begin wait ( 0 0$1 ) ;
9574: LD_INT 35
9576: PPUSH
9577: CALL_OW 67
// YouLost ( Depot ) ;
9581: LD_STRING Depot
9583: PPUSH
9584: CALL_OW 104
// end ; if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
9588: LD_VAR 0 1
9592: PPUSH
9593: CALL_OW 255
9597: PUSH
9598: LD_INT 1
9600: EQUAL
9601: PUSH
9602: LD_VAR 0 1
9606: PPUSH
9607: CALL_OW 247
9611: PUSH
9612: LD_INT 1
9614: EQUAL
9615: AND
9616: IFFALSE 9632
// Losses := Losses + 1 ;
9618: LD_ADDR_EXP 43
9622: PUSH
9623: LD_EXP 43
9627: PUSH
9628: LD_INT 1
9630: PLUS
9631: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
9632: LD_VAR 0 1
9636: PPUSH
9637: CALL 79856 0 1
// end ;
9641: PPOPN 1
9643: END
// on UnitGoesToRed ( un ) do begin if un = Yashin then
9644: LD_VAR 0 1
9648: PUSH
9649: LD_EXP 12
9653: EQUAL
9654: IFFALSE 9668
// ForceSay ( Yashin , DDeath-Yas-3 ) ;
9656: LD_EXP 12
9660: PPUSH
9661: LD_STRING DDeath-Yas-3
9663: PPUSH
9664: CALL_OW 91
// if un = Popov then
9668: LD_VAR 0 1
9672: PUSH
9673: LD_EXP 13
9677: EQUAL
9678: IFFALSE 9692
// ForceSay ( Popov , DDeath-Pop-3 ) ;
9680: LD_EXP 13
9684: PPUSH
9685: LD_STRING DDeath-Pop-3
9687: PPUSH
9688: CALL_OW 91
// if un = Gaydar then
9692: LD_VAR 0 1
9696: PUSH
9697: LD_EXP 14
9701: EQUAL
9702: IFFALSE 9716
// ForceSay ( Gaydar , DDeath-Gay-3 ) ;
9704: LD_EXP 14
9708: PPUSH
9709: LD_STRING DDeath-Gay-3
9711: PPUSH
9712: CALL_OW 91
// if un = Sevi then
9716: LD_VAR 0 1
9720: PUSH
9721: LD_EXP 15
9725: EQUAL
9726: IFFALSE 9740
// ForceSay ( Sevi , DDeath-Vse-3 ) ;
9728: LD_EXP 15
9732: PPUSH
9733: LD_STRING DDeath-Vse-3
9735: PPUSH
9736: CALL_OW 91
// end ;
9740: PPOPN 1
9742: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_laser then
9743: LD_VAR 0 1
9747: PUSH
9748: LD_INT 10
9750: EQUAL
9751: IFFALSE 9789
// begin Say ( Brighton , DBrighton-C1 ) ;
9753: LD_EXP 8
9757: PPUSH
9758: LD_STRING DBrighton-C1
9760: PPUSH
9761: CALL_OW 88
// Say ( Megan , DMegan-C1 ) ;
9765: LD_EXP 10
9769: PPUSH
9770: LD_STRING DMegan-C1
9772: PPUSH
9773: CALL_OW 88
// Say ( Brighton , DBrighton-C2 ) ;
9777: LD_EXP 8
9781: PPUSH
9782: LD_STRING DBrighton-C2
9784: PPUSH
9785: CALL_OW 88
// end ; MCE_ResearchComplete ( tech , lab ) ;
9789: LD_VAR 0 1
9793: PPUSH
9794: LD_VAR 0 2
9798: PPUSH
9799: CALL 79552 0 2
// end ;
9803: PPOPN 2
9805: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
9806: LD_VAR 0 1
9810: PPUSH
9811: LD_VAR 0 2
9815: PPUSH
9816: CALL 81911 0 2
// end ;
9820: PPOPN 2
9822: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
9823: LD_VAR 0 1
9827: PPUSH
9828: CALL 80979 0 1
// end ;
9832: PPOPN 1
9834: END
// export RUFirstDepot ; on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 then
9835: LD_VAR 0 1
9839: PPUSH
9840: CALL_OW 266
9844: PUSH
9845: LD_INT 0
9847: EQUAL
9848: PUSH
9849: LD_VAR 0 1
9853: PPUSH
9854: CALL_OW 255
9858: PUSH
9859: LD_INT 3
9861: EQUAL
9862: AND
9863: IFFALSE 9925
// begin SetResourceType ( GetBase ( b ) , mat_cans , 10000 ) ;
9865: LD_VAR 0 1
9869: PPUSH
9870: CALL_OW 274
9874: PPUSH
9875: LD_INT 1
9877: PPUSH
9878: LD_INT 10000
9880: PPUSH
9881: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 250 ) ;
9885: LD_VAR 0 1
9889: PPUSH
9890: CALL_OW 274
9894: PPUSH
9895: LD_INT 2
9897: PPUSH
9898: LD_INT 250
9900: PPUSH
9901: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_siberit , 100 ) ;
9905: LD_VAR 0 1
9909: PPUSH
9910: CALL_OW 274
9914: PPUSH
9915: LD_INT 3
9917: PPUSH
9918: LD_INT 100
9920: PPUSH
9921: CALL_OW 277
// end ; MCE_BuildingComplete ( b ) ;
9925: LD_VAR 0 1
9929: PPUSH
9930: CALL 81220 0 1
// end ;
9934: PPOPN 1
9936: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
9937: LD_VAR 0 1
9941: PPUSH
9942: LD_VAR 0 2
9946: PPUSH
9947: LD_VAR 0 3
9951: PPUSH
9952: LD_VAR 0 4
9956: PPUSH
9957: LD_VAR 0 5
9961: PPUSH
9962: CALL 79172 0 5
// end ;
9966: PPOPN 5
9968: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
9969: LD_VAR 0 1
9973: PPUSH
9974: LD_VAR 0 2
9978: PPUSH
9979: CALL 78768 0 2
// end ;
9983: PPOPN 2
9985: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
9986: LD_VAR 0 1
9990: PPUSH
9991: LD_VAR 0 2
9995: PPUSH
9996: LD_VAR 0 3
10000: PPUSH
10001: LD_VAR 0 4
10005: PPUSH
10006: CALL 78606 0 4
// end ;
10010: PPOPN 4
10012: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
10013: LD_VAR 0 1
10017: PPUSH
10018: LD_VAR 0 2
10022: PPUSH
10023: LD_VAR 0 3
10027: PPUSH
10028: CALL 78381 0 3
// end ;
10032: PPOPN 3
10034: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
10035: LD_VAR 0 1
10039: PPUSH
10040: LD_VAR 0 2
10044: PPUSH
10045: CALL 78266 0 2
// end ;
10049: PPOPN 2
10051: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
10052: LD_VAR 0 1
10056: PPUSH
10057: LD_VAR 0 2
10061: PPUSH
10062: CALL 82172 0 2
// end ;
10066: PPOPN 2
10068: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin if GetSide ( driver ) = 6 then
10069: LD_VAR 0 1
10073: PPUSH
10074: CALL_OW 255
10078: PUSH
10079: LD_INT 6
10081: EQUAL
10082: IFFALSE 10177
// if AssaultStarted then
10084: LD_EXP 7
10088: IFFALSE 10162
// case Rand ( 1 , 4 ) of 1 .. 3 :
10090: LD_INT 1
10092: PPUSH
10093: LD_INT 4
10095: PPUSH
10096: CALL_OW 12
10100: PUSH
10101: LD_INT 1
10103: DOUBLE
10104: GREATEREQUAL
10105: IFFALSE 10113
10107: LD_INT 3
10109: DOUBLE
10110: LESSEQUAL
10111: IFTRUE 10115
10113: GO 10133
10115: POP
// ComAgressiveMove ( driver , 67 , 37 ) ; 4 :
10116: LD_VAR 0 1
10120: PPUSH
10121: LD_INT 67
10123: PPUSH
10124: LD_INT 37
10126: PPUSH
10127: CALL_OW 114
10131: GO 10160
10133: LD_INT 4
10135: DOUBLE
10136: EQUAL
10137: IFTRUE 10141
10139: GO 10159
10141: POP
// ComMoveXY ( driver , 120 , 131 ) ; end else
10142: LD_VAR 0 1
10146: PPUSH
10147: LD_INT 120
10149: PPUSH
10150: LD_INT 131
10152: PPUSH
10153: CALL_OW 111
10157: GO 10160
10159: POP
10160: GO 10177
// ComMoveXY ( driver , 120 , 131 ) ;
10162: LD_VAR 0 1
10166: PPUSH
10167: LD_INT 120
10169: PPUSH
10170: LD_INT 131
10172: PPUSH
10173: CALL_OW 111
// MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
10177: LD_VAR 0 1
10181: PPUSH
10182: LD_VAR 0 2
10186: PPUSH
10187: LD_VAR 0 3
10191: PPUSH
10192: LD_VAR 0 4
10196: PPUSH
10197: CALL 82388 0 4
// end ;
10201: PPOPN 4
10203: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
10204: LD_VAR 0 1
10208: PPUSH
10209: LD_VAR 0 2
10213: PPUSH
10214: CALL 78075 0 2
// end ; end_of_file
10218: PPOPN 2
10220: END
// every 0 0$1 trigger JMM_Arrived and RussiansDefeated do
10221: LD_EXP 5
10225: PUSH
10226: LD_EXP 42
10230: AND
10231: IFFALSE 10412
10233: GO 10235
10235: DISABLE
// begin wait ( 0 0$2 ) ;
10236: LD_INT 70
10238: PPUSH
10239: CALL_OW 67
// Say ( Brighton , DBrighton-G1 ) ;
10243: LD_EXP 8
10247: PPUSH
10248: LD_STRING DBrighton-G1
10250: PPUSH
10251: CALL_OW 88
// if Losses < 1 then
10255: LD_EXP 43
10259: PUSH
10260: LD_INT 1
10262: LESS
10263: IFFALSE 10277
// AddMedal ( Losses , 1 ) else
10265: LD_STRING Losses
10267: PPUSH
10268: LD_INT 1
10270: PPUSH
10271: CALL_OW 101
10275: GO 10310
// if Losses < 5 then
10277: LD_EXP 43
10281: PUSH
10282: LD_INT 5
10284: LESS
10285: IFFALSE 10299
// AddMedal ( Losses , 2 ) else
10287: LD_STRING Losses
10289: PPUSH
10290: LD_INT 2
10292: PPUSH
10293: CALL_OW 101
10297: GO 10310
// AddMedal ( Losses , - 1 ) ;
10299: LD_STRING Losses
10301: PPUSH
10302: LD_INT 1
10304: NEG
10305: PPUSH
10306: CALL_OW 101
// if LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
10310: LD_EXP 6
10314: PUSH
10315: LD_INT 10
10317: PPUSH
10318: LD_INT 1
10320: PPUSH
10321: CALL_OW 321
10325: PUSH
10326: LD_INT 2
10328: EQUAL
10329: AND
10330: IFFALSE 10344
// AddMedal ( Laser , 1 ) else
10332: LD_STRING Laser
10334: PPUSH
10335: LD_INT 1
10337: PPUSH
10338: CALL_OW 101
10342: GO 10391
// if not LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
10344: LD_EXP 6
10348: NOT
10349: PUSH
10350: LD_INT 10
10352: PPUSH
10353: LD_INT 1
10355: PPUSH
10356: CALL_OW 321
10360: PUSH
10361: LD_INT 2
10363: EQUAL
10364: AND
10365: IFFALSE 10380
// AddMedal ( Laser , - 1 ) else
10367: LD_STRING Laser
10369: PPUSH
10370: LD_INT 1
10372: NEG
10373: PPUSH
10374: CALL_OW 101
10378: GO 10391
// AddMedal ( Laser , - 2 ) ;
10380: LD_STRING Laser
10382: PPUSH
10383: LD_INT 2
10385: NEG
10386: PPUSH
10387: CALL_OW 101
// AddMedal ( med3 , 1 ) ;
10391: LD_STRING med3
10393: PPUSH
10394: LD_INT 1
10396: PPUSH
10397: CALL_OW 101
// GiveMedals ( BaseMain ) ;
10401: LD_STRING BaseMain
10403: PPUSH
10404: CALL_OW 102
// YouWin ;
10408: CALL_OW 103
// end ; end_of_file
10412: END
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
10413: LD_INT 0
10415: PPUSH
10416: PPUSH
// area = ListEnvironmentArea ( area ) ;
10417: LD_ADDR_VAR 0 2
10421: PUSH
10422: LD_VAR 0 2
10426: PPUSH
10427: CALL_OW 353
10431: ST_TO_ADDR
// if bulldozer > 0 then
10432: LD_VAR 0 1
10436: PUSH
10437: LD_INT 0
10439: GREATER
10440: IFFALSE 10551
// for i = area downto 1 do
10442: LD_ADDR_VAR 0 4
10446: PUSH
10447: DOUBLE
10448: LD_VAR 0 2
10452: INC
10453: ST_TO_ADDR
10454: LD_INT 1
10456: PUSH
10457: FOR_DOWNTO
10458: IFFALSE 10549
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
10460: LD_VAR 0 2
10464: PUSH
10465: LD_VAR 0 4
10469: ARRAY
10470: PUSH
10471: LD_INT 1
10473: ARRAY
10474: PPUSH
10475: LD_VAR 0 2
10479: PUSH
10480: LD_VAR 0 4
10484: ARRAY
10485: PUSH
10486: LD_INT 2
10488: ARRAY
10489: PPUSH
10490: CALL_OW 351
10494: IFFALSE 10547
// if not HasTask ( bulldozer ) then
10496: LD_VAR 0 1
10500: PPUSH
10501: CALL_OW 314
10505: NOT
10506: IFFALSE 10547
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
10508: LD_VAR 0 1
10512: PPUSH
10513: LD_VAR 0 2
10517: PUSH
10518: LD_VAR 0 4
10522: ARRAY
10523: PUSH
10524: LD_INT 1
10526: ARRAY
10527: PPUSH
10528: LD_VAR 0 2
10532: PUSH
10533: LD_VAR 0 4
10537: ARRAY
10538: PUSH
10539: LD_INT 2
10541: ARRAY
10542: PPUSH
10543: CALL_OW 171
10547: GO 10457
10549: POP
10550: POP
// end ;
10551: LD_VAR 0 3
10555: RET
// export function ComMeeting ( team , area ) ; var i , tmp ; begin
10556: LD_INT 0
10558: PPUSH
10559: PPUSH
10560: PPUSH
// tmp := AreaToList ( area , 0 ) ;
10561: LD_ADDR_VAR 0 5
10565: PUSH
10566: LD_VAR 0 2
10570: PPUSH
10571: LD_INT 0
10573: PPUSH
10574: CALL_OW 517
10578: ST_TO_ADDR
// for i = 1 to team do
10579: LD_ADDR_VAR 0 4
10583: PUSH
10584: DOUBLE
10585: LD_INT 1
10587: DEC
10588: ST_TO_ADDR
10589: LD_VAR 0 1
10593: PUSH
10594: FOR_TO
10595: IFFALSE 10696
// begin if IsInUnit ( team [ i ] ) then
10597: LD_VAR 0 1
10601: PUSH
10602: LD_VAR 0 4
10606: ARRAY
10607: PPUSH
10608: CALL_OW 310
10612: IFFALSE 10629
// ComExitBuilding ( team [ i ] ) ;
10614: LD_VAR 0 1
10618: PUSH
10619: LD_VAR 0 4
10623: ARRAY
10624: PPUSH
10625: CALL_OW 122
// AddComMoveXY ( team [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
10629: LD_VAR 0 1
10633: PUSH
10634: LD_VAR 0 4
10638: ARRAY
10639: PPUSH
10640: LD_VAR 0 5
10644: PUSH
10645: LD_INT 1
10647: ARRAY
10648: PUSH
10649: LD_VAR 0 4
10653: ARRAY
10654: PPUSH
10655: LD_VAR 0 5
10659: PUSH
10660: LD_INT 2
10662: ARRAY
10663: PUSH
10664: LD_VAR 0 4
10668: ARRAY
10669: PPUSH
10670: CALL_OW 171
// AddComTurnUnit ( team [ i ] , Brighton ) ;
10674: LD_VAR 0 1
10678: PUSH
10679: LD_VAR 0 4
10683: ARRAY
10684: PPUSH
10685: LD_EXP 8
10689: PPUSH
10690: CALL_OW 179
// end ;
10694: GO 10594
10696: POP
10697: POP
// end ; end_of_file
10698: LD_VAR 0 3
10702: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
10703: LD_INT 0
10705: PPUSH
10706: PPUSH
// if exist_mode then
10707: LD_VAR 0 2
10711: IFFALSE 10736
// unit := CreateCharacter ( prefix & ident ) else
10713: LD_ADDR_VAR 0 5
10717: PUSH
10718: LD_VAR 0 3
10722: PUSH
10723: LD_VAR 0 1
10727: STR
10728: PPUSH
10729: CALL_OW 34
10733: ST_TO_ADDR
10734: GO 10751
// unit := NewCharacter ( ident ) ;
10736: LD_ADDR_VAR 0 5
10740: PUSH
10741: LD_VAR 0 1
10745: PPUSH
10746: CALL_OW 25
10750: ST_TO_ADDR
// result := unit ;
10751: LD_ADDR_VAR 0 4
10755: PUSH
10756: LD_VAR 0 5
10760: ST_TO_ADDR
// end ;
10761: LD_VAR 0 4
10765: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10766: LD_INT 0
10768: PPUSH
10769: PPUSH
// if not side or not nation then
10770: LD_VAR 0 1
10774: NOT
10775: PUSH
10776: LD_VAR 0 2
10780: NOT
10781: OR
10782: IFFALSE 10786
// exit ;
10784: GO 11422
// case nation of nation_american :
10786: LD_VAR 0 2
10790: PUSH
10791: LD_INT 1
10793: DOUBLE
10794: EQUAL
10795: IFTRUE 10799
10797: GO 10969
10799: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ; nation_arabian :
10800: LD_ADDR_VAR 0 4
10804: PUSH
10805: LD_INT 35
10807: PUSH
10808: LD_INT 45
10810: PUSH
10811: LD_INT 46
10813: PUSH
10814: LD_INT 47
10816: PUSH
10817: LD_INT 1
10819: PUSH
10820: LD_INT 2
10822: PUSH
10823: LD_INT 6
10825: PUSH
10826: LD_INT 15
10828: PUSH
10829: LD_INT 16
10831: PUSH
10832: LD_INT 7
10834: PUSH
10835: LD_INT 12
10837: PUSH
10838: LD_INT 13
10840: PUSH
10841: LD_INT 10
10843: PUSH
10844: LD_INT 14
10846: PUSH
10847: LD_INT 20
10849: PUSH
10850: LD_INT 21
10852: PUSH
10853: LD_INT 22
10855: PUSH
10856: LD_INT 25
10858: PUSH
10859: LD_INT 32
10861: PUSH
10862: LD_INT 27
10864: PUSH
10865: LD_INT 36
10867: PUSH
10868: LD_INT 69
10870: PUSH
10871: LD_INT 39
10873: PUSH
10874: LD_INT 34
10876: PUSH
10877: LD_INT 40
10879: PUSH
10880: LD_INT 48
10882: PUSH
10883: LD_INT 49
10885: PUSH
10886: LD_INT 50
10888: PUSH
10889: LD_INT 51
10891: PUSH
10892: LD_INT 52
10894: PUSH
10895: LD_INT 53
10897: PUSH
10898: LD_INT 54
10900: PUSH
10901: LD_INT 55
10903: PUSH
10904: LD_INT 56
10906: PUSH
10907: LD_INT 57
10909: PUSH
10910: LD_INT 58
10912: PUSH
10913: LD_INT 59
10915: PUSH
10916: LD_INT 60
10918: PUSH
10919: LD_INT 61
10921: PUSH
10922: LD_INT 62
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: ST_TO_ADDR
10967: GO 11346
10969: LD_INT 2
10971: DOUBLE
10972: EQUAL
10973: IFTRUE 10977
10975: GO 11155
10977: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
10978: LD_ADDR_VAR 0 4
10982: PUSH
10983: LD_INT 35
10985: PUSH
10986: LD_INT 45
10988: PUSH
10989: LD_INT 46
10991: PUSH
10992: LD_INT 47
10994: PUSH
10995: LD_INT 70
10997: PUSH
10998: LD_INT 1
11000: PUSH
11001: LD_INT 11
11003: PUSH
11004: LD_INT 3
11006: PUSH
11007: LD_INT 4
11009: PUSH
11010: LD_INT 5
11012: PUSH
11013: LD_INT 6
11015: PUSH
11016: LD_INT 15
11018: PUSH
11019: LD_INT 18
11021: PUSH
11022: LD_INT 7
11024: PUSH
11025: LD_INT 17
11027: PUSH
11028: LD_INT 8
11030: PUSH
11031: LD_INT 20
11033: PUSH
11034: LD_INT 21
11036: PUSH
11037: LD_INT 22
11039: PUSH
11040: LD_INT 72
11042: PUSH
11043: LD_INT 26
11045: PUSH
11046: LD_INT 69
11048: PUSH
11049: LD_INT 39
11051: PUSH
11052: LD_INT 40
11054: PUSH
11055: LD_INT 41
11057: PUSH
11058: LD_INT 42
11060: PUSH
11061: LD_INT 43
11063: PUSH
11064: LD_INT 48
11066: PUSH
11067: LD_INT 49
11069: PUSH
11070: LD_INT 50
11072: PUSH
11073: LD_INT 51
11075: PUSH
11076: LD_INT 52
11078: PUSH
11079: LD_INT 53
11081: PUSH
11082: LD_INT 54
11084: PUSH
11085: LD_INT 55
11087: PUSH
11088: LD_INT 56
11090: PUSH
11091: LD_INT 60
11093: PUSH
11094: LD_INT 61
11096: PUSH
11097: LD_INT 62
11099: PUSH
11100: LD_INT 66
11102: PUSH
11103: LD_INT 67
11105: PUSH
11106: LD_INT 68
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: ST_TO_ADDR
11153: GO 11346
11155: LD_INT 3
11157: DOUBLE
11158: EQUAL
11159: IFTRUE 11163
11161: GO 11345
11163: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
11164: LD_ADDR_VAR 0 4
11168: PUSH
11169: LD_INT 46
11171: PUSH
11172: LD_INT 47
11174: PUSH
11175: LD_INT 1
11177: PUSH
11178: LD_INT 2
11180: PUSH
11181: LD_INT 11
11183: PUSH
11184: LD_INT 9
11186: PUSH
11187: LD_INT 20
11189: PUSH
11190: LD_INT 19
11192: PUSH
11193: LD_INT 21
11195: PUSH
11196: LD_INT 24
11198: PUSH
11199: LD_INT 22
11201: PUSH
11202: LD_INT 25
11204: PUSH
11205: LD_INT 28
11207: PUSH
11208: LD_INT 29
11210: PUSH
11211: LD_INT 30
11213: PUSH
11214: LD_INT 31
11216: PUSH
11217: LD_INT 37
11219: PUSH
11220: LD_INT 38
11222: PUSH
11223: LD_INT 32
11225: PUSH
11226: LD_INT 27
11228: PUSH
11229: LD_INT 33
11231: PUSH
11232: LD_INT 69
11234: PUSH
11235: LD_INT 39
11237: PUSH
11238: LD_INT 34
11240: PUSH
11241: LD_INT 40
11243: PUSH
11244: LD_INT 71
11246: PUSH
11247: LD_INT 23
11249: PUSH
11250: LD_INT 44
11252: PUSH
11253: LD_INT 48
11255: PUSH
11256: LD_INT 49
11258: PUSH
11259: LD_INT 50
11261: PUSH
11262: LD_INT 51
11264: PUSH
11265: LD_INT 52
11267: PUSH
11268: LD_INT 53
11270: PUSH
11271: LD_INT 54
11273: PUSH
11274: LD_INT 55
11276: PUSH
11277: LD_INT 56
11279: PUSH
11280: LD_INT 57
11282: PUSH
11283: LD_INT 58
11285: PUSH
11286: LD_INT 59
11288: PUSH
11289: LD_INT 63
11291: PUSH
11292: LD_INT 64
11294: PUSH
11295: LD_INT 65
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: ST_TO_ADDR
11343: GO 11346
11345: POP
// if state > - 1 and state < 3 then
11346: LD_VAR 0 3
11350: PUSH
11351: LD_INT 1
11353: NEG
11354: GREATER
11355: PUSH
11356: LD_VAR 0 3
11360: PUSH
11361: LD_INT 3
11363: LESS
11364: AND
11365: IFFALSE 11422
// for i in result do
11367: LD_ADDR_VAR 0 5
11371: PUSH
11372: LD_VAR 0 4
11376: PUSH
11377: FOR_IN
11378: IFFALSE 11420
// if GetTech ( i , side ) <> state then
11380: LD_VAR 0 5
11384: PPUSH
11385: LD_VAR 0 1
11389: PPUSH
11390: CALL_OW 321
11394: PUSH
11395: LD_VAR 0 3
11399: NONEQUAL
11400: IFFALSE 11418
// result := result diff i ;
11402: LD_ADDR_VAR 0 4
11406: PUSH
11407: LD_VAR 0 4
11411: PUSH
11412: LD_VAR 0 5
11416: DIFF
11417: ST_TO_ADDR
11418: GO 11377
11420: POP
11421: POP
// end ;
11422: LD_VAR 0 4
11426: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
11427: LD_INT 0
11429: PPUSH
11430: PPUSH
11431: PPUSH
// result := true ;
11432: LD_ADDR_VAR 0 3
11436: PUSH
11437: LD_INT 1
11439: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
11440: LD_ADDR_VAR 0 5
11444: PUSH
11445: LD_VAR 0 2
11449: PPUSH
11450: CALL_OW 480
11454: ST_TO_ADDR
// if not tmp then
11455: LD_VAR 0 5
11459: NOT
11460: IFFALSE 11464
// exit ;
11462: GO 11513
// for i in tmp do
11464: LD_ADDR_VAR 0 4
11468: PUSH
11469: LD_VAR 0 5
11473: PUSH
11474: FOR_IN
11475: IFFALSE 11511
// if GetTech ( i , side ) <> state_researched then
11477: LD_VAR 0 4
11481: PPUSH
11482: LD_VAR 0 1
11486: PPUSH
11487: CALL_OW 321
11491: PUSH
11492: LD_INT 2
11494: NONEQUAL
11495: IFFALSE 11509
// begin result := false ;
11497: LD_ADDR_VAR 0 3
11501: PUSH
11502: LD_INT 0
11504: ST_TO_ADDR
// exit ;
11505: POP
11506: POP
11507: GO 11513
// end ;
11509: GO 11474
11511: POP
11512: POP
// end ;
11513: LD_VAR 0 3
11517: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11518: LD_INT 0
11520: PPUSH
11521: PPUSH
11522: PPUSH
11523: PPUSH
11524: PPUSH
11525: PPUSH
11526: PPUSH
11527: PPUSH
11528: PPUSH
11529: PPUSH
11530: PPUSH
11531: PPUSH
11532: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11533: LD_VAR 0 1
11537: NOT
11538: PUSH
11539: LD_VAR 0 1
11543: PPUSH
11544: CALL_OW 257
11548: PUSH
11549: LD_INT 9
11551: NONEQUAL
11552: OR
11553: IFFALSE 11557
// exit ;
11555: GO 12130
// side := GetSide ( unit ) ;
11557: LD_ADDR_VAR 0 9
11561: PUSH
11562: LD_VAR 0 1
11566: PPUSH
11567: CALL_OW 255
11571: ST_TO_ADDR
// tech_space := tech_spacanom ;
11572: LD_ADDR_VAR 0 12
11576: PUSH
11577: LD_INT 29
11579: ST_TO_ADDR
// tech_time := tech_taurad ;
11580: LD_ADDR_VAR 0 13
11584: PUSH
11585: LD_INT 28
11587: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11588: LD_ADDR_VAR 0 11
11592: PUSH
11593: LD_VAR 0 1
11597: PPUSH
11598: CALL_OW 310
11602: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11603: LD_VAR 0 11
11607: PPUSH
11608: CALL_OW 247
11612: PUSH
11613: LD_INT 2
11615: EQUAL
11616: IFFALSE 11620
// exit ;
11618: GO 12130
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11620: LD_ADDR_VAR 0 8
11624: PUSH
11625: LD_INT 81
11627: PUSH
11628: LD_VAR 0 9
11632: PUSH
11633: EMPTY
11634: LIST
11635: LIST
11636: PUSH
11637: LD_INT 3
11639: PUSH
11640: LD_INT 21
11642: PUSH
11643: LD_INT 3
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: PPUSH
11658: CALL_OW 69
11662: ST_TO_ADDR
// if not tmp then
11663: LD_VAR 0 8
11667: NOT
11668: IFFALSE 11672
// exit ;
11670: GO 12130
// if in_unit then
11672: LD_VAR 0 11
11676: IFFALSE 11700
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11678: LD_ADDR_VAR 0 10
11682: PUSH
11683: LD_VAR 0 8
11687: PPUSH
11688: LD_VAR 0 11
11692: PPUSH
11693: CALL_OW 74
11697: ST_TO_ADDR
11698: GO 11720
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11700: LD_ADDR_VAR 0 10
11704: PUSH
11705: LD_VAR 0 8
11709: PPUSH
11710: LD_VAR 0 1
11714: PPUSH
11715: CALL_OW 74
11719: ST_TO_ADDR
// if not enemy then
11720: LD_VAR 0 10
11724: NOT
11725: IFFALSE 11729
// exit ;
11727: GO 12130
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11729: LD_VAR 0 11
11733: PUSH
11734: LD_VAR 0 11
11738: PPUSH
11739: LD_VAR 0 10
11743: PPUSH
11744: CALL_OW 296
11748: PUSH
11749: LD_INT 13
11751: GREATER
11752: AND
11753: PUSH
11754: LD_VAR 0 1
11758: PPUSH
11759: LD_VAR 0 10
11763: PPUSH
11764: CALL_OW 296
11768: PUSH
11769: LD_INT 12
11771: GREATER
11772: OR
11773: IFFALSE 11777
// exit ;
11775: GO 12130
// missile := [ 1 ] ;
11777: LD_ADDR_VAR 0 14
11781: PUSH
11782: LD_INT 1
11784: PUSH
11785: EMPTY
11786: LIST
11787: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11788: LD_VAR 0 9
11792: PPUSH
11793: LD_VAR 0 12
11797: PPUSH
11798: CALL_OW 325
11802: IFFALSE 11831
// missile := Insert ( missile , missile + 1 , 2 ) ;
11804: LD_ADDR_VAR 0 14
11808: PUSH
11809: LD_VAR 0 14
11813: PPUSH
11814: LD_VAR 0 14
11818: PUSH
11819: LD_INT 1
11821: PLUS
11822: PPUSH
11823: LD_INT 2
11825: PPUSH
11826: CALL_OW 2
11830: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11831: LD_VAR 0 9
11835: PPUSH
11836: LD_VAR 0 13
11840: PPUSH
11841: CALL_OW 325
11845: PUSH
11846: LD_VAR 0 10
11850: PPUSH
11851: CALL_OW 255
11855: PPUSH
11856: LD_VAR 0 13
11860: PPUSH
11861: CALL_OW 325
11865: NOT
11866: AND
11867: IFFALSE 11896
// missile := Insert ( missile , missile + 1 , 3 ) ;
11869: LD_ADDR_VAR 0 14
11873: PUSH
11874: LD_VAR 0 14
11878: PPUSH
11879: LD_VAR 0 14
11883: PUSH
11884: LD_INT 1
11886: PLUS
11887: PPUSH
11888: LD_INT 3
11890: PPUSH
11891: CALL_OW 2
11895: ST_TO_ADDR
// if missile < 2 then
11896: LD_VAR 0 14
11900: PUSH
11901: LD_INT 2
11903: LESS
11904: IFFALSE 11908
// exit ;
11906: GO 12130
// x := GetX ( enemy ) ;
11908: LD_ADDR_VAR 0 4
11912: PUSH
11913: LD_VAR 0 10
11917: PPUSH
11918: CALL_OW 250
11922: ST_TO_ADDR
// y := GetY ( enemy ) ;
11923: LD_ADDR_VAR 0 5
11927: PUSH
11928: LD_VAR 0 10
11932: PPUSH
11933: CALL_OW 251
11937: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11938: LD_ADDR_VAR 0 6
11942: PUSH
11943: LD_VAR 0 4
11947: PUSH
11948: LD_INT 1
11950: NEG
11951: PPUSH
11952: LD_INT 1
11954: PPUSH
11955: CALL_OW 12
11959: PLUS
11960: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11961: LD_ADDR_VAR 0 7
11965: PUSH
11966: LD_VAR 0 5
11970: PUSH
11971: LD_INT 1
11973: NEG
11974: PPUSH
11975: LD_INT 1
11977: PPUSH
11978: CALL_OW 12
11982: PLUS
11983: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11984: LD_VAR 0 6
11988: PPUSH
11989: LD_VAR 0 7
11993: PPUSH
11994: CALL_OW 488
11998: NOT
11999: IFFALSE 12021
// begin _x := x ;
12001: LD_ADDR_VAR 0 6
12005: PUSH
12006: LD_VAR 0 4
12010: ST_TO_ADDR
// _y := y ;
12011: LD_ADDR_VAR 0 7
12015: PUSH
12016: LD_VAR 0 5
12020: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
12021: LD_ADDR_VAR 0 3
12025: PUSH
12026: LD_INT 1
12028: PPUSH
12029: LD_VAR 0 14
12033: PPUSH
12034: CALL_OW 12
12038: ST_TO_ADDR
// case i of 1 :
12039: LD_VAR 0 3
12043: PUSH
12044: LD_INT 1
12046: DOUBLE
12047: EQUAL
12048: IFTRUE 12052
12050: GO 12069
12052: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
12053: LD_VAR 0 1
12057: PPUSH
12058: LD_VAR 0 10
12062: PPUSH
12063: CALL_OW 115
12067: GO 12130
12069: LD_INT 2
12071: DOUBLE
12072: EQUAL
12073: IFTRUE 12077
12075: GO 12099
12077: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
12078: LD_VAR 0 1
12082: PPUSH
12083: LD_VAR 0 6
12087: PPUSH
12088: LD_VAR 0 7
12092: PPUSH
12093: CALL_OW 153
12097: GO 12130
12099: LD_INT 3
12101: DOUBLE
12102: EQUAL
12103: IFTRUE 12107
12105: GO 12129
12107: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
12108: LD_VAR 0 1
12112: PPUSH
12113: LD_VAR 0 6
12117: PPUSH
12118: LD_VAR 0 7
12122: PPUSH
12123: CALL_OW 154
12127: GO 12130
12129: POP
// end ;
12130: LD_VAR 0 2
12134: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
12135: LD_INT 0
12137: PPUSH
12138: PPUSH
12139: PPUSH
12140: PPUSH
12141: PPUSH
12142: PPUSH
// if not unit or not building then
12143: LD_VAR 0 1
12147: NOT
12148: PUSH
12149: LD_VAR 0 2
12153: NOT
12154: OR
12155: IFFALSE 12159
// exit ;
12157: GO 12317
// x := GetX ( building ) ;
12159: LD_ADDR_VAR 0 5
12163: PUSH
12164: LD_VAR 0 2
12168: PPUSH
12169: CALL_OW 250
12173: ST_TO_ADDR
// y := GetY ( building ) ;
12174: LD_ADDR_VAR 0 6
12178: PUSH
12179: LD_VAR 0 2
12183: PPUSH
12184: CALL_OW 251
12188: ST_TO_ADDR
// for i = 0 to 5 do
12189: LD_ADDR_VAR 0 4
12193: PUSH
12194: DOUBLE
12195: LD_INT 0
12197: DEC
12198: ST_TO_ADDR
12199: LD_INT 5
12201: PUSH
12202: FOR_TO
12203: IFFALSE 12315
// begin _x := ShiftX ( x , i , 3 ) ;
12205: LD_ADDR_VAR 0 7
12209: PUSH
12210: LD_VAR 0 5
12214: PPUSH
12215: LD_VAR 0 4
12219: PPUSH
12220: LD_INT 3
12222: PPUSH
12223: CALL_OW 272
12227: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
12228: LD_ADDR_VAR 0 8
12232: PUSH
12233: LD_VAR 0 6
12237: PPUSH
12238: LD_VAR 0 4
12242: PPUSH
12243: LD_INT 3
12245: PPUSH
12246: CALL_OW 273
12250: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12251: LD_VAR 0 7
12255: PPUSH
12256: LD_VAR 0 8
12260: PPUSH
12261: CALL_OW 488
12265: NOT
12266: IFFALSE 12270
// continue ;
12268: GO 12202
// if HexInfo ( _x , _y ) = 0 then
12270: LD_VAR 0 7
12274: PPUSH
12275: LD_VAR 0 8
12279: PPUSH
12280: CALL_OW 428
12284: PUSH
12285: LD_INT 0
12287: EQUAL
12288: IFFALSE 12313
// begin ComMoveXY ( unit , _x , _y ) ;
12290: LD_VAR 0 1
12294: PPUSH
12295: LD_VAR 0 7
12299: PPUSH
12300: LD_VAR 0 8
12304: PPUSH
12305: CALL_OW 111
// exit ;
12309: POP
12310: POP
12311: GO 12317
// end ; end ;
12313: GO 12202
12315: POP
12316: POP
// end ;
12317: LD_VAR 0 3
12321: RET
// export function ScanBase ( side , base_area ) ; begin
12322: LD_INT 0
12324: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
12325: LD_ADDR_VAR 0 3
12329: PUSH
12330: LD_VAR 0 2
12334: PPUSH
12335: LD_INT 81
12337: PUSH
12338: LD_VAR 0 1
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: PPUSH
12347: CALL_OW 70
12351: ST_TO_ADDR
// end ;
12352: LD_VAR 0 3
12356: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
12357: LD_INT 0
12359: PPUSH
12360: PPUSH
12361: PPUSH
12362: PPUSH
12363: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
12364: LD_VAR 0 1
12368: NOT
12369: PUSH
12370: LD_EXP 52
12374: PUSH
12375: LD_VAR 0 1
12379: ARRAY
12380: NOT
12381: OR
12382: PUSH
12383: LD_VAR 0 2
12387: NOT
12388: OR
12389: PUSH
12390: LD_VAR 0 3
12394: NOT
12395: OR
12396: IFFALSE 12400
// exit ;
12398: GO 12850
// side := mc_sides [ base ] ;
12400: LD_ADDR_VAR 0 6
12404: PUSH
12405: LD_EXP 78
12409: PUSH
12410: LD_VAR 0 1
12414: ARRAY
12415: ST_TO_ADDR
// if not side then
12416: LD_VAR 0 6
12420: NOT
12421: IFFALSE 12425
// exit ;
12423: GO 12850
// for i in solds do
12425: LD_ADDR_VAR 0 7
12429: PUSH
12430: LD_VAR 0 2
12434: PUSH
12435: FOR_IN
12436: IFFALSE 12497
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
12438: LD_VAR 0 7
12442: PPUSH
12443: CALL_OW 310
12447: PPUSH
12448: CALL_OW 266
12452: PUSH
12453: LD_INT 32
12455: PUSH
12456: LD_INT 31
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: IN
12463: IFFALSE 12483
// solds := solds diff i else
12465: LD_ADDR_VAR 0 2
12469: PUSH
12470: LD_VAR 0 2
12474: PUSH
12475: LD_VAR 0 7
12479: DIFF
12480: ST_TO_ADDR
12481: GO 12495
// SetTag ( i , 18 ) ;
12483: LD_VAR 0 7
12487: PPUSH
12488: LD_INT 18
12490: PPUSH
12491: CALL_OW 109
12495: GO 12435
12497: POP
12498: POP
// if not solds then
12499: LD_VAR 0 2
12503: NOT
12504: IFFALSE 12508
// exit ;
12506: GO 12850
// repeat wait ( 0 0$1 ) ;
12508: LD_INT 35
12510: PPUSH
12511: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
12515: LD_ADDR_VAR 0 5
12519: PUSH
12520: LD_VAR 0 6
12524: PPUSH
12525: LD_VAR 0 3
12529: PPUSH
12530: CALL 12322 0 2
12534: ST_TO_ADDR
// if not enemy or enemy > 3 or mc_defender [ base ] then
12535: LD_VAR 0 5
12539: NOT
12540: PUSH
12541: LD_VAR 0 5
12545: PUSH
12546: LD_INT 3
12548: GREATER
12549: OR
12550: PUSH
12551: LD_EXP 74
12555: PUSH
12556: LD_VAR 0 1
12560: ARRAY
12561: OR
12562: IFFALSE 12603
// begin for i in solds do
12564: LD_ADDR_VAR 0 7
12568: PUSH
12569: LD_VAR 0 2
12573: PUSH
12574: FOR_IN
12575: IFFALSE 12599
// if HasTask ( i ) then
12577: LD_VAR 0 7
12581: PPUSH
12582: CALL_OW 314
12586: IFFALSE 12597
// ComStop ( i ) ;
12588: LD_VAR 0 7
12592: PPUSH
12593: CALL_OW 141
12597: GO 12574
12599: POP
12600: POP
// break ;
12601: GO 12838
// end ; for i in solds do
12603: LD_ADDR_VAR 0 7
12607: PUSH
12608: LD_VAR 0 2
12612: PUSH
12613: FOR_IN
12614: IFFALSE 12830
// begin if IsInUnit ( i ) then
12616: LD_VAR 0 7
12620: PPUSH
12621: CALL_OW 310
12625: IFFALSE 12636
// ComExitBuilding ( i ) ;
12627: LD_VAR 0 7
12631: PPUSH
12632: CALL_OW 122
// if GetLives ( i ) > 333 then
12636: LD_VAR 0 7
12640: PPUSH
12641: CALL_OW 256
12645: PUSH
12646: LD_INT 333
12648: GREATER
12649: IFFALSE 12677
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
12651: LD_VAR 0 7
12655: PPUSH
12656: LD_VAR 0 5
12660: PPUSH
12661: LD_VAR 0 7
12665: PPUSH
12666: CALL_OW 74
12670: PPUSH
12671: CALL_OW 115
12675: GO 12828
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
12677: LD_ADDR_VAR 0 8
12681: PUSH
12682: LD_EXP 52
12686: PUSH
12687: LD_VAR 0 1
12691: ARRAY
12692: PPUSH
12693: LD_INT 2
12695: PUSH
12696: LD_INT 30
12698: PUSH
12699: LD_INT 0
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: PUSH
12706: LD_INT 30
12708: PUSH
12709: LD_INT 1
12711: PUSH
12712: EMPTY
12713: LIST
12714: LIST
12715: PUSH
12716: LD_INT 30
12718: PUSH
12719: LD_INT 6
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: PPUSH
12732: CALL_OW 72
12736: PPUSH
12737: LD_VAR 0 7
12741: PPUSH
12742: CALL_OW 74
12746: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
12747: LD_VAR 0 7
12751: PPUSH
12752: LD_VAR 0 8
12756: PPUSH
12757: CALL_OW 250
12761: PPUSH
12762: LD_INT 3
12764: PPUSH
12765: LD_INT 5
12767: PPUSH
12768: CALL_OW 272
12772: PPUSH
12773: LD_VAR 0 8
12777: PPUSH
12778: CALL_OW 251
12782: PPUSH
12783: LD_INT 3
12785: PPUSH
12786: LD_INT 5
12788: PPUSH
12789: CALL_OW 273
12793: PPUSH
12794: CALL_OW 111
// SetTag ( i , 0 ) ;
12798: LD_VAR 0 7
12802: PPUSH
12803: LD_INT 0
12805: PPUSH
12806: CALL_OW 109
// solds := solds diff i ;
12810: LD_ADDR_VAR 0 2
12814: PUSH
12815: LD_VAR 0 2
12819: PUSH
12820: LD_VAR 0 7
12824: DIFF
12825: ST_TO_ADDR
// continue ;
12826: GO 12613
// end ; end ;
12828: GO 12613
12830: POP
12831: POP
// until solds ;
12832: LD_VAR 0 2
12836: IFFALSE 12508
// MC_Reset ( base , 18 ) ;
12838: LD_VAR 0 1
12842: PPUSH
12843: LD_INT 18
12845: PPUSH
12846: CALL 57384 0 2
// end ;
12850: LD_VAR 0 4
12854: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
12855: LD_INT 0
12857: PPUSH
12858: PPUSH
12859: PPUSH
12860: PPUSH
12861: PPUSH
12862: PPUSH
12863: PPUSH
12864: PPUSH
12865: PPUSH
12866: PPUSH
12867: PPUSH
12868: PPUSH
12869: PPUSH
12870: PPUSH
12871: PPUSH
12872: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
12873: LD_ADDR_VAR 0 12
12877: PUSH
12878: LD_EXP 52
12882: PUSH
12883: LD_VAR 0 1
12887: ARRAY
12888: PPUSH
12889: LD_INT 25
12891: PUSH
12892: LD_INT 3
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: PPUSH
12899: CALL_OW 72
12903: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
12904: LD_ADDR_VAR 0 8
12908: PUSH
12909: LD_EXP 52
12913: PUSH
12914: LD_VAR 0 1
12918: ARRAY
12919: PPUSH
12920: LD_INT 2
12922: PUSH
12923: LD_INT 25
12925: PUSH
12926: LD_INT 1
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: PUSH
12933: LD_INT 25
12935: PUSH
12936: LD_INT 5
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: PUSH
12943: LD_INT 25
12945: PUSH
12946: LD_INT 8
12948: PUSH
12949: EMPTY
12950: LIST
12951: LIST
12952: PUSH
12953: LD_INT 25
12955: PUSH
12956: LD_INT 9
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: PPUSH
12970: CALL_OW 72
12974: ST_TO_ADDR
// if not defenders and not solds then
12975: LD_VAR 0 2
12979: NOT
12980: PUSH
12981: LD_VAR 0 8
12985: NOT
12986: AND
12987: IFFALSE 12991
// exit ;
12989: GO 14320
// depot_under_attack := false ;
12991: LD_ADDR_VAR 0 16
12995: PUSH
12996: LD_INT 0
12998: ST_TO_ADDR
// sold_defenders := [ ] ;
12999: LD_ADDR_VAR 0 17
13003: PUSH
13004: EMPTY
13005: ST_TO_ADDR
// if mechs then
13006: LD_VAR 0 12
13010: IFFALSE 13139
// for i in defenders do
13012: LD_ADDR_VAR 0 5
13016: PUSH
13017: LD_VAR 0 2
13021: PUSH
13022: FOR_IN
13023: IFFALSE 13137
// begin SetTag ( i , 20 ) ;
13025: LD_VAR 0 5
13029: PPUSH
13030: LD_INT 20
13032: PPUSH
13033: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
13037: LD_VAR 0 5
13041: PPUSH
13042: CALL_OW 263
13046: PUSH
13047: LD_INT 1
13049: EQUAL
13050: PUSH
13051: LD_VAR 0 5
13055: PPUSH
13056: CALL_OW 311
13060: NOT
13061: AND
13062: PUSH
13063: LD_VAR 0 12
13067: AND
13068: IFFALSE 13135
// begin un := mechs [ 1 ] ;
13070: LD_ADDR_VAR 0 10
13074: PUSH
13075: LD_VAR 0 12
13079: PUSH
13080: LD_INT 1
13082: ARRAY
13083: ST_TO_ADDR
// ComExitBuilding ( un ) ;
13084: LD_VAR 0 10
13088: PPUSH
13089: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
13093: LD_VAR 0 10
13097: PPUSH
13098: LD_VAR 0 5
13102: PPUSH
13103: CALL_OW 180
// SetTag ( un , 19 ) ;
13107: LD_VAR 0 10
13111: PPUSH
13112: LD_INT 19
13114: PPUSH
13115: CALL_OW 109
// mechs := mechs diff un ;
13119: LD_ADDR_VAR 0 12
13123: PUSH
13124: LD_VAR 0 12
13128: PUSH
13129: LD_VAR 0 10
13133: DIFF
13134: ST_TO_ADDR
// end ; end ;
13135: GO 13022
13137: POP
13138: POP
// if solds then
13139: LD_VAR 0 8
13143: IFFALSE 13202
// for i in solds do
13145: LD_ADDR_VAR 0 5
13149: PUSH
13150: LD_VAR 0 8
13154: PUSH
13155: FOR_IN
13156: IFFALSE 13200
// if not GetTag ( i ) then
13158: LD_VAR 0 5
13162: PPUSH
13163: CALL_OW 110
13167: NOT
13168: IFFALSE 13198
// begin defenders := defenders union i ;
13170: LD_ADDR_VAR 0 2
13174: PUSH
13175: LD_VAR 0 2
13179: PUSH
13180: LD_VAR 0 5
13184: UNION
13185: ST_TO_ADDR
// SetTag ( i , 18 ) ;
13186: LD_VAR 0 5
13190: PPUSH
13191: LD_INT 18
13193: PPUSH
13194: CALL_OW 109
// end ;
13198: GO 13155
13200: POP
13201: POP
// repeat wait ( 0 0$1 ) ;
13202: LD_INT 35
13204: PPUSH
13205: CALL_OW 67
// enemy := mc_scan [ base ] ;
13209: LD_ADDR_VAR 0 3
13213: PUSH
13214: LD_EXP 75
13218: PUSH
13219: LD_VAR 0 1
13223: ARRAY
13224: ST_TO_ADDR
// for i in defenders do
13225: LD_ADDR_VAR 0 5
13229: PUSH
13230: LD_VAR 0 2
13234: PUSH
13235: FOR_IN
13236: IFFALSE 13921
// begin e := NearestUnitToUnit ( enemy , i ) ;
13238: LD_ADDR_VAR 0 13
13242: PUSH
13243: LD_VAR 0 3
13247: PPUSH
13248: LD_VAR 0 5
13252: PPUSH
13253: CALL_OW 74
13257: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
13258: LD_ADDR_VAR 0 16
13262: PUSH
13263: LD_EXP 52
13267: PUSH
13268: LD_VAR 0 1
13272: ARRAY
13273: PPUSH
13274: LD_INT 2
13276: PUSH
13277: LD_INT 30
13279: PUSH
13280: LD_INT 0
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: PUSH
13287: LD_INT 30
13289: PUSH
13290: LD_INT 1
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: LIST
13301: PPUSH
13302: CALL_OW 72
13306: NOT
13307: PUSH
13308: LD_EXP 52
13312: PUSH
13313: LD_VAR 0 1
13317: ARRAY
13318: PPUSH
13319: LD_INT 2
13321: PUSH
13322: LD_INT 30
13324: PUSH
13325: LD_INT 0
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: PUSH
13332: LD_INT 30
13334: PUSH
13335: LD_INT 1
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: LIST
13346: PPUSH
13347: CALL_OW 72
13351: PPUSH
13352: CALL_OW 256
13356: PUSH
13357: LD_INT 600
13359: LESS
13360: OR
13361: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
13362: LD_VAR 0 5
13366: PPUSH
13367: CALL_OW 247
13371: PUSH
13372: LD_INT 2
13374: DOUBLE
13375: EQUAL
13376: IFTRUE 13380
13378: GO 13627
13380: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
13381: LD_VAR 0 5
13385: PPUSH
13386: CALL_OW 256
13390: PUSH
13391: LD_INT 650
13393: GREATER
13394: PUSH
13395: LD_VAR 0 5
13399: PPUSH
13400: LD_VAR 0 13
13404: PPUSH
13405: CALL_OW 296
13409: PUSH
13410: LD_INT 40
13412: LESS
13413: AND
13414: IFFALSE 13432
// ComAttackUnit ( i , e ) else
13416: LD_VAR 0 5
13420: PPUSH
13421: LD_VAR 0 13
13425: PPUSH
13426: CALL_OW 115
13430: GO 13510
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
13432: LD_VAR 0 5
13436: PPUSH
13437: LD_VAR 0 13
13441: PPUSH
13442: CALL_OW 296
13446: PUSH
13447: LD_INT 30
13449: GREATEREQUAL
13450: PUSH
13451: LD_VAR 0 5
13455: PPUSH
13456: CALL_OW 256
13460: PUSH
13461: LD_INT 650
13463: LESSEQUAL
13464: OR
13465: PUSH
13466: LD_VAR 0 5
13470: PPUSH
13471: LD_EXP 76
13475: PUSH
13476: LD_VAR 0 1
13480: ARRAY
13481: PPUSH
13482: CALL_OW 308
13486: NOT
13487: AND
13488: IFFALSE 13510
// ComMoveToArea ( i , mc_parking [ base ] ) ;
13490: LD_VAR 0 5
13494: PPUSH
13495: LD_EXP 76
13499: PUSH
13500: LD_VAR 0 1
13504: ARRAY
13505: PPUSH
13506: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
13510: LD_VAR 0 5
13514: PPUSH
13515: CALL_OW 256
13519: PUSH
13520: LD_INT 998
13522: LESS
13523: PUSH
13524: LD_VAR 0 5
13528: PPUSH
13529: CALL_OW 263
13533: PUSH
13534: LD_INT 1
13536: EQUAL
13537: AND
13538: PUSH
13539: LD_VAR 0 5
13543: PPUSH
13544: CALL_OW 311
13548: AND
13549: PUSH
13550: LD_VAR 0 5
13554: PPUSH
13555: LD_EXP 76
13559: PUSH
13560: LD_VAR 0 1
13564: ARRAY
13565: PPUSH
13566: CALL_OW 308
13570: AND
13571: IFFALSE 13625
// begin mech := IsDrivenBy ( i ) ;
13573: LD_ADDR_VAR 0 9
13577: PUSH
13578: LD_VAR 0 5
13582: PPUSH
13583: CALL_OW 311
13587: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
13588: LD_VAR 0 9
13592: PPUSH
13593: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
13597: LD_VAR 0 9
13601: PPUSH
13602: LD_VAR 0 5
13606: PPUSH
13607: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
13611: LD_VAR 0 9
13615: PPUSH
13616: LD_VAR 0 5
13620: PPUSH
13621: CALL_OW 180
// end ; end ; unit_human :
13625: GO 13892
13627: LD_INT 1
13629: DOUBLE
13630: EQUAL
13631: IFTRUE 13635
13633: GO 13891
13635: POP
// begin b := IsInUnit ( i ) ;
13636: LD_ADDR_VAR 0 18
13640: PUSH
13641: LD_VAR 0 5
13645: PPUSH
13646: CALL_OW 310
13650: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
13651: LD_ADDR_VAR 0 19
13655: PUSH
13656: LD_VAR 0 18
13660: NOT
13661: PUSH
13662: LD_VAR 0 18
13666: PPUSH
13667: CALL_OW 266
13671: PUSH
13672: LD_INT 32
13674: PUSH
13675: LD_INT 31
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: IN
13682: OR
13683: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
13684: LD_VAR 0 16
13688: PUSH
13689: LD_VAR 0 2
13693: PPUSH
13694: LD_INT 21
13696: PUSH
13697: LD_INT 2
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: PPUSH
13704: CALL_OW 72
13708: PUSH
13709: LD_INT 1
13711: LESSEQUAL
13712: OR
13713: PUSH
13714: LD_VAR 0 19
13718: AND
13719: PUSH
13720: LD_VAR 0 5
13724: PUSH
13725: LD_VAR 0 17
13729: IN
13730: NOT
13731: AND
13732: IFFALSE 13825
// begin if b then
13734: LD_VAR 0 18
13738: IFFALSE 13787
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
13740: LD_VAR 0 18
13744: PPUSH
13745: LD_VAR 0 3
13749: PPUSH
13750: LD_VAR 0 18
13754: PPUSH
13755: CALL_OW 74
13759: PPUSH
13760: CALL_OW 296
13764: PUSH
13765: LD_INT 10
13767: LESS
13768: PUSH
13769: LD_VAR 0 18
13773: PPUSH
13774: CALL_OW 461
13778: PUSH
13779: LD_INT 7
13781: NONEQUAL
13782: AND
13783: IFFALSE 13787
// continue ;
13785: GO 13235
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
13787: LD_ADDR_VAR 0 17
13791: PUSH
13792: LD_VAR 0 17
13796: PPUSH
13797: LD_VAR 0 17
13801: PUSH
13802: LD_INT 1
13804: PLUS
13805: PPUSH
13806: LD_VAR 0 5
13810: PPUSH
13811: CALL_OW 1
13815: ST_TO_ADDR
// ComExitBuilding ( i ) ;
13816: LD_VAR 0 5
13820: PPUSH
13821: CALL_OW 122
// end ; if sold_defenders then
13825: LD_VAR 0 17
13829: IFFALSE 13889
// if i in sold_defenders then
13831: LD_VAR 0 5
13835: PUSH
13836: LD_VAR 0 17
13840: IN
13841: IFFALSE 13889
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
13843: LD_VAR 0 5
13847: PPUSH
13848: CALL_OW 314
13852: NOT
13853: PUSH
13854: LD_VAR 0 5
13858: PPUSH
13859: LD_VAR 0 13
13863: PPUSH
13864: CALL_OW 296
13868: PUSH
13869: LD_INT 30
13871: LESS
13872: AND
13873: IFFALSE 13889
// ComAttackUnit ( i , e ) ;
13875: LD_VAR 0 5
13879: PPUSH
13880: LD_VAR 0 13
13884: PPUSH
13885: CALL_OW 115
// end ; end ; end ;
13889: GO 13892
13891: POP
// if IsDead ( i ) then
13892: LD_VAR 0 5
13896: PPUSH
13897: CALL_OW 301
13901: IFFALSE 13919
// defenders := defenders diff i ;
13903: LD_ADDR_VAR 0 2
13907: PUSH
13908: LD_VAR 0 2
13912: PUSH
13913: LD_VAR 0 5
13917: DIFF
13918: ST_TO_ADDR
// end ;
13919: GO 13235
13921: POP
13922: POP
// until not enemy or not defenders ;
13923: LD_VAR 0 3
13927: NOT
13928: PUSH
13929: LD_VAR 0 2
13933: NOT
13934: OR
13935: IFFALSE 13202
// MC_Reset ( base , 18 ) ;
13937: LD_VAR 0 1
13941: PPUSH
13942: LD_INT 18
13944: PPUSH
13945: CALL 57384 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
13949: LD_ADDR_VAR 0 2
13953: PUSH
13954: LD_VAR 0 2
13958: PUSH
13959: LD_VAR 0 2
13963: PPUSH
13964: LD_INT 2
13966: PUSH
13967: LD_INT 25
13969: PUSH
13970: LD_INT 1
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: PUSH
13977: LD_INT 25
13979: PUSH
13980: LD_INT 5
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: PUSH
13987: LD_INT 25
13989: PUSH
13990: LD_INT 8
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: PUSH
13997: LD_INT 25
13999: PUSH
14000: LD_INT 9
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: PUSH
14007: EMPTY
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: PPUSH
14014: CALL_OW 72
14018: DIFF
14019: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
14020: LD_VAR 0 3
14024: NOT
14025: PUSH
14026: LD_VAR 0 2
14030: PPUSH
14031: LD_INT 21
14033: PUSH
14034: LD_INT 2
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: PPUSH
14041: CALL_OW 72
14045: AND
14046: IFFALSE 14308
// begin tmp := FilterByTag ( defenders , 19 ) ;
14048: LD_ADDR_VAR 0 11
14052: PUSH
14053: LD_VAR 0 2
14057: PPUSH
14058: LD_INT 19
14060: PPUSH
14061: CALL 50682 0 2
14065: ST_TO_ADDR
// if tmp then
14066: LD_VAR 0 11
14070: IFFALSE 14140
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
14072: LD_ADDR_VAR 0 11
14076: PUSH
14077: LD_VAR 0 11
14081: PPUSH
14082: LD_INT 25
14084: PUSH
14085: LD_INT 3
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: PPUSH
14092: CALL_OW 72
14096: ST_TO_ADDR
// if tmp then
14097: LD_VAR 0 11
14101: IFFALSE 14140
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
14103: LD_ADDR_EXP 64
14107: PUSH
14108: LD_EXP 64
14112: PPUSH
14113: LD_VAR 0 1
14117: PPUSH
14118: LD_EXP 64
14122: PUSH
14123: LD_VAR 0 1
14127: ARRAY
14128: PUSH
14129: LD_VAR 0 11
14133: UNION
14134: PPUSH
14135: CALL_OW 1
14139: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
14140: LD_VAR 0 1
14144: PPUSH
14145: LD_INT 19
14147: PPUSH
14148: CALL 57384 0 2
// repeat wait ( 0 0$1 ) ;
14152: LD_INT 35
14154: PPUSH
14155: CALL_OW 67
// for i in defenders do
14159: LD_ADDR_VAR 0 5
14163: PUSH
14164: LD_VAR 0 2
14168: PUSH
14169: FOR_IN
14170: IFFALSE 14259
// begin if not IsInArea ( i , mc_parking [ base ] ) then
14172: LD_VAR 0 5
14176: PPUSH
14177: LD_EXP 76
14181: PUSH
14182: LD_VAR 0 1
14186: ARRAY
14187: PPUSH
14188: CALL_OW 308
14192: NOT
14193: IFFALSE 14217
// ComMoveToArea ( i , mc_parking [ base ] ) else
14195: LD_VAR 0 5
14199: PPUSH
14200: LD_EXP 76
14204: PUSH
14205: LD_VAR 0 1
14209: ARRAY
14210: PPUSH
14211: CALL_OW 113
14215: GO 14257
// if GetControl ( i ) = control_manual then
14217: LD_VAR 0 5
14221: PPUSH
14222: CALL_OW 263
14226: PUSH
14227: LD_INT 1
14229: EQUAL
14230: IFFALSE 14257
// if IsDrivenBy ( i ) then
14232: LD_VAR 0 5
14236: PPUSH
14237: CALL_OW 311
14241: IFFALSE 14257
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
14243: LD_VAR 0 5
14247: PPUSH
14248: CALL_OW 311
14252: PPUSH
14253: CALL_OW 121
// end ;
14257: GO 14169
14259: POP
14260: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
14261: LD_VAR 0 2
14265: PPUSH
14266: LD_INT 95
14268: PUSH
14269: LD_EXP 76
14273: PUSH
14274: LD_VAR 0 1
14278: ARRAY
14279: PUSH
14280: EMPTY
14281: LIST
14282: LIST
14283: PPUSH
14284: CALL_OW 72
14288: PUSH
14289: LD_VAR 0 2
14293: EQUAL
14294: PUSH
14295: LD_EXP 75
14299: PUSH
14300: LD_VAR 0 1
14304: ARRAY
14305: OR
14306: IFFALSE 14152
// end ; MC_Reset ( base , 20 ) ;
14308: LD_VAR 0 1
14312: PPUSH
14313: LD_INT 20
14315: PPUSH
14316: CALL 57384 0 2
// end ;
14320: LD_VAR 0 4
14324: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
14325: LD_INT 0
14327: PPUSH
14328: PPUSH
14329: PPUSH
14330: PPUSH
// result := false ;
14331: LD_ADDR_VAR 0 2
14335: PUSH
14336: LD_INT 0
14338: ST_TO_ADDR
// side := GetSide ( unit ) ;
14339: LD_ADDR_VAR 0 3
14343: PUSH
14344: LD_VAR 0 1
14348: PPUSH
14349: CALL_OW 255
14353: ST_TO_ADDR
// nat := GetNation ( unit ) ;
14354: LD_ADDR_VAR 0 4
14358: PUSH
14359: LD_VAR 0 1
14363: PPUSH
14364: CALL_OW 248
14368: ST_TO_ADDR
// case nat of 1 :
14369: LD_VAR 0 4
14373: PUSH
14374: LD_INT 1
14376: DOUBLE
14377: EQUAL
14378: IFTRUE 14382
14380: GO 14393
14382: POP
// tech := tech_lassight ; 2 :
14383: LD_ADDR_VAR 0 5
14387: PUSH
14388: LD_INT 12
14390: ST_TO_ADDR
14391: GO 14432
14393: LD_INT 2
14395: DOUBLE
14396: EQUAL
14397: IFTRUE 14401
14399: GO 14412
14401: POP
// tech := tech_mortar ; 3 :
14402: LD_ADDR_VAR 0 5
14406: PUSH
14407: LD_INT 41
14409: ST_TO_ADDR
14410: GO 14432
14412: LD_INT 3
14414: DOUBLE
14415: EQUAL
14416: IFTRUE 14420
14418: GO 14431
14420: POP
// tech := tech_bazooka ; end ;
14421: LD_ADDR_VAR 0 5
14425: PUSH
14426: LD_INT 44
14428: ST_TO_ADDR
14429: GO 14432
14431: POP
// if Researched ( side , tech ) then
14432: LD_VAR 0 3
14436: PPUSH
14437: LD_VAR 0 5
14441: PPUSH
14442: CALL_OW 325
14446: IFFALSE 14473
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
14448: LD_ADDR_VAR 0 2
14452: PUSH
14453: LD_INT 5
14455: PUSH
14456: LD_INT 8
14458: PUSH
14459: LD_INT 9
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: LIST
14466: PUSH
14467: LD_VAR 0 4
14471: ARRAY
14472: ST_TO_ADDR
// end ;
14473: LD_VAR 0 2
14477: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
14478: LD_INT 0
14480: PPUSH
14481: PPUSH
14482: PPUSH
// if not mines then
14483: LD_VAR 0 2
14487: NOT
14488: IFFALSE 14492
// exit ;
14490: GO 14636
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14492: LD_ADDR_VAR 0 5
14496: PUSH
14497: LD_INT 81
14499: PUSH
14500: LD_VAR 0 1
14504: PUSH
14505: EMPTY
14506: LIST
14507: LIST
14508: PUSH
14509: LD_INT 3
14511: PUSH
14512: LD_INT 21
14514: PUSH
14515: LD_INT 3
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: PUSH
14522: EMPTY
14523: LIST
14524: LIST
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: PPUSH
14530: CALL_OW 69
14534: ST_TO_ADDR
// for i in mines do
14535: LD_ADDR_VAR 0 4
14539: PUSH
14540: LD_VAR 0 2
14544: PUSH
14545: FOR_IN
14546: IFFALSE 14634
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
14548: LD_VAR 0 4
14552: PUSH
14553: LD_INT 1
14555: ARRAY
14556: PPUSH
14557: LD_VAR 0 4
14561: PUSH
14562: LD_INT 2
14564: ARRAY
14565: PPUSH
14566: CALL_OW 458
14570: NOT
14571: IFFALSE 14575
// continue ;
14573: GO 14545
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
14575: LD_VAR 0 4
14579: PUSH
14580: LD_INT 1
14582: ARRAY
14583: PPUSH
14584: LD_VAR 0 4
14588: PUSH
14589: LD_INT 2
14591: ARRAY
14592: PPUSH
14593: CALL_OW 428
14597: PUSH
14598: LD_VAR 0 5
14602: IN
14603: IFFALSE 14632
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
14605: LD_VAR 0 4
14609: PUSH
14610: LD_INT 1
14612: ARRAY
14613: PPUSH
14614: LD_VAR 0 4
14618: PUSH
14619: LD_INT 2
14621: ARRAY
14622: PPUSH
14623: LD_VAR 0 1
14627: PPUSH
14628: CALL_OW 456
// end ;
14632: GO 14545
14634: POP
14635: POP
// end ;
14636: LD_VAR 0 3
14640: RET
// export function Count ( array ) ; var i ; begin
14641: LD_INT 0
14643: PPUSH
14644: PPUSH
// result := 0 ;
14645: LD_ADDR_VAR 0 2
14649: PUSH
14650: LD_INT 0
14652: ST_TO_ADDR
// for i in array do
14653: LD_ADDR_VAR 0 3
14657: PUSH
14658: LD_VAR 0 1
14662: PUSH
14663: FOR_IN
14664: IFFALSE 14688
// if i then
14666: LD_VAR 0 3
14670: IFFALSE 14686
// result := result + 1 ;
14672: LD_ADDR_VAR 0 2
14676: PUSH
14677: LD_VAR 0 2
14681: PUSH
14682: LD_INT 1
14684: PLUS
14685: ST_TO_ADDR
14686: GO 14663
14688: POP
14689: POP
// end ;
14690: LD_VAR 0 2
14694: RET
// export function IsEmpty ( building ) ; begin
14695: LD_INT 0
14697: PPUSH
// if not building then
14698: LD_VAR 0 1
14702: NOT
14703: IFFALSE 14707
// exit ;
14705: GO 14750
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
14707: LD_ADDR_VAR 0 2
14711: PUSH
14712: LD_VAR 0 1
14716: PUSH
14717: LD_INT 22
14719: PUSH
14720: LD_VAR 0 1
14724: PPUSH
14725: CALL_OW 255
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: PUSH
14734: LD_INT 58
14736: PUSH
14737: EMPTY
14738: LIST
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: PPUSH
14744: CALL_OW 69
14748: IN
14749: ST_TO_ADDR
// end ;
14750: LD_VAR 0 2
14754: RET
// export function IsNotFull ( building ) ; begin
14755: LD_INT 0
14757: PPUSH
// if not building then
14758: LD_VAR 0 1
14762: NOT
14763: IFFALSE 14767
// exit ;
14765: GO 14786
// result := UnitsInside ( building ) < 6 ;
14767: LD_ADDR_VAR 0 2
14771: PUSH
14772: LD_VAR 0 1
14776: PPUSH
14777: CALL_OW 313
14781: PUSH
14782: LD_INT 6
14784: LESS
14785: ST_TO_ADDR
// end ;
14786: LD_VAR 0 2
14790: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
14791: LD_INT 0
14793: PPUSH
14794: PPUSH
14795: PPUSH
14796: PPUSH
// tmp := [ ] ;
14797: LD_ADDR_VAR 0 3
14801: PUSH
14802: EMPTY
14803: ST_TO_ADDR
// list := [ ] ;
14804: LD_ADDR_VAR 0 5
14808: PUSH
14809: EMPTY
14810: ST_TO_ADDR
// for i = 16 to 25 do
14811: LD_ADDR_VAR 0 4
14815: PUSH
14816: DOUBLE
14817: LD_INT 16
14819: DEC
14820: ST_TO_ADDR
14821: LD_INT 25
14823: PUSH
14824: FOR_TO
14825: IFFALSE 14898
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
14827: LD_ADDR_VAR 0 3
14831: PUSH
14832: LD_VAR 0 3
14836: PUSH
14837: LD_INT 22
14839: PUSH
14840: LD_VAR 0 1
14844: PPUSH
14845: CALL_OW 255
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: PUSH
14854: LD_INT 91
14856: PUSH
14857: LD_VAR 0 1
14861: PUSH
14862: LD_INT 6
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: LIST
14869: PUSH
14870: LD_INT 30
14872: PUSH
14873: LD_VAR 0 4
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: LIST
14886: PUSH
14887: EMPTY
14888: LIST
14889: PPUSH
14890: CALL_OW 69
14894: ADD
14895: ST_TO_ADDR
14896: GO 14824
14898: POP
14899: POP
// for i = 1 to tmp do
14900: LD_ADDR_VAR 0 4
14904: PUSH
14905: DOUBLE
14906: LD_INT 1
14908: DEC
14909: ST_TO_ADDR
14910: LD_VAR 0 3
14914: PUSH
14915: FOR_TO
14916: IFFALSE 15004
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
14918: LD_ADDR_VAR 0 5
14922: PUSH
14923: LD_VAR 0 5
14927: PUSH
14928: LD_VAR 0 3
14932: PUSH
14933: LD_VAR 0 4
14937: ARRAY
14938: PPUSH
14939: CALL_OW 266
14943: PUSH
14944: LD_VAR 0 3
14948: PUSH
14949: LD_VAR 0 4
14953: ARRAY
14954: PPUSH
14955: CALL_OW 250
14959: PUSH
14960: LD_VAR 0 3
14964: PUSH
14965: LD_VAR 0 4
14969: ARRAY
14970: PPUSH
14971: CALL_OW 251
14975: PUSH
14976: LD_VAR 0 3
14980: PUSH
14981: LD_VAR 0 4
14985: ARRAY
14986: PPUSH
14987: CALL_OW 254
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: PUSH
14998: EMPTY
14999: LIST
15000: ADD
15001: ST_TO_ADDR
15002: GO 14915
15004: POP
15005: POP
// result := list ;
15006: LD_ADDR_VAR 0 2
15010: PUSH
15011: LD_VAR 0 5
15015: ST_TO_ADDR
// end ;
15016: LD_VAR 0 2
15020: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
15021: LD_INT 0
15023: PPUSH
15024: PPUSH
15025: PPUSH
15026: PPUSH
15027: PPUSH
15028: PPUSH
15029: PPUSH
// if not factory then
15030: LD_VAR 0 1
15034: NOT
15035: IFFALSE 15039
// exit ;
15037: GO 15571
// if control = control_apeman then
15039: LD_VAR 0 4
15043: PUSH
15044: LD_INT 5
15046: EQUAL
15047: IFFALSE 15156
// begin tmp := UnitsInside ( factory ) ;
15049: LD_ADDR_VAR 0 8
15053: PUSH
15054: LD_VAR 0 1
15058: PPUSH
15059: CALL_OW 313
15063: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
15064: LD_VAR 0 8
15068: PPUSH
15069: LD_INT 25
15071: PUSH
15072: LD_INT 12
15074: PUSH
15075: EMPTY
15076: LIST
15077: LIST
15078: PPUSH
15079: CALL_OW 72
15083: NOT
15084: IFFALSE 15094
// control := control_manual ;
15086: LD_ADDR_VAR 0 4
15090: PUSH
15091: LD_INT 1
15093: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
15094: LD_ADDR_VAR 0 8
15098: PUSH
15099: LD_VAR 0 1
15103: PPUSH
15104: CALL 14791 0 1
15108: ST_TO_ADDR
// if tmp then
15109: LD_VAR 0 8
15113: IFFALSE 15156
// begin for i in tmp do
15115: LD_ADDR_VAR 0 7
15119: PUSH
15120: LD_VAR 0 8
15124: PUSH
15125: FOR_IN
15126: IFFALSE 15154
// if i [ 1 ] = b_ext_radar then
15128: LD_VAR 0 7
15132: PUSH
15133: LD_INT 1
15135: ARRAY
15136: PUSH
15137: LD_INT 20
15139: EQUAL
15140: IFFALSE 15152
// begin control := control_remote ;
15142: LD_ADDR_VAR 0 4
15146: PUSH
15147: LD_INT 2
15149: ST_TO_ADDR
// break ;
15150: GO 15154
// end ;
15152: GO 15125
15154: POP
15155: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15156: LD_VAR 0 1
15160: PPUSH
15161: LD_VAR 0 2
15165: PPUSH
15166: LD_VAR 0 3
15170: PPUSH
15171: LD_VAR 0 4
15175: PPUSH
15176: LD_VAR 0 5
15180: PPUSH
15181: CALL_OW 448
15185: IFFALSE 15220
// begin result := [ chassis , engine , control , weapon ] ;
15187: LD_ADDR_VAR 0 6
15191: PUSH
15192: LD_VAR 0 2
15196: PUSH
15197: LD_VAR 0 3
15201: PUSH
15202: LD_VAR 0 4
15206: PUSH
15207: LD_VAR 0 5
15211: PUSH
15212: EMPTY
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: ST_TO_ADDR
// exit ;
15218: GO 15571
// end ; _chassis := AvailableChassisList ( factory ) ;
15220: LD_ADDR_VAR 0 9
15224: PUSH
15225: LD_VAR 0 1
15229: PPUSH
15230: CALL_OW 475
15234: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
15235: LD_ADDR_VAR 0 11
15239: PUSH
15240: LD_VAR 0 1
15244: PPUSH
15245: CALL_OW 476
15249: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
15250: LD_ADDR_VAR 0 12
15254: PUSH
15255: LD_VAR 0 1
15259: PPUSH
15260: CALL_OW 477
15264: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
15265: LD_ADDR_VAR 0 10
15269: PUSH
15270: LD_VAR 0 1
15274: PPUSH
15275: CALL_OW 478
15279: ST_TO_ADDR
// if not chassis in _chassis then
15280: LD_VAR 0 2
15284: PUSH
15285: LD_VAR 0 9
15289: IN
15290: NOT
15291: IFFALSE 15317
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
15293: LD_ADDR_VAR 0 2
15297: PUSH
15298: LD_VAR 0 9
15302: PUSH
15303: LD_INT 1
15305: PPUSH
15306: LD_VAR 0 9
15310: PPUSH
15311: CALL_OW 12
15315: ARRAY
15316: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
15317: LD_VAR 0 2
15321: PPUSH
15322: LD_VAR 0 3
15326: PPUSH
15327: CALL 15576 0 2
15331: NOT
15332: IFFALSE 15391
// repeat engine := _engine [ 1 ] ;
15334: LD_ADDR_VAR 0 3
15338: PUSH
15339: LD_VAR 0 11
15343: PUSH
15344: LD_INT 1
15346: ARRAY
15347: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
15348: LD_ADDR_VAR 0 11
15352: PUSH
15353: LD_VAR 0 11
15357: PPUSH
15358: LD_INT 1
15360: PPUSH
15361: CALL_OW 3
15365: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
15366: LD_VAR 0 2
15370: PPUSH
15371: LD_VAR 0 3
15375: PPUSH
15376: CALL 15576 0 2
15380: PUSH
15381: LD_VAR 0 11
15385: PUSH
15386: EMPTY
15387: EQUAL
15388: OR
15389: IFFALSE 15334
// if not control in _control then
15391: LD_VAR 0 4
15395: PUSH
15396: LD_VAR 0 12
15400: IN
15401: NOT
15402: IFFALSE 15428
// control := _control [ rand ( 1 , _control ) ] ;
15404: LD_ADDR_VAR 0 4
15408: PUSH
15409: LD_VAR 0 12
15413: PUSH
15414: LD_INT 1
15416: PPUSH
15417: LD_VAR 0 12
15421: PPUSH
15422: CALL_OW 12
15426: ARRAY
15427: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
15428: LD_VAR 0 2
15432: PPUSH
15433: LD_VAR 0 5
15437: PPUSH
15438: CALL 15796 0 2
15442: NOT
15443: IFFALSE 15502
// repeat weapon := _weapon [ 1 ] ;
15445: LD_ADDR_VAR 0 5
15449: PUSH
15450: LD_VAR 0 10
15454: PUSH
15455: LD_INT 1
15457: ARRAY
15458: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
15459: LD_ADDR_VAR 0 10
15463: PUSH
15464: LD_VAR 0 10
15468: PPUSH
15469: LD_INT 1
15471: PPUSH
15472: CALL_OW 3
15476: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
15477: LD_VAR 0 2
15481: PPUSH
15482: LD_VAR 0 5
15486: PPUSH
15487: CALL 15796 0 2
15491: PUSH
15492: LD_VAR 0 10
15496: PUSH
15497: EMPTY
15498: EQUAL
15499: OR
15500: IFFALSE 15445
// result := [ ] ;
15502: LD_ADDR_VAR 0 6
15506: PUSH
15507: EMPTY
15508: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15509: LD_VAR 0 1
15513: PPUSH
15514: LD_VAR 0 2
15518: PPUSH
15519: LD_VAR 0 3
15523: PPUSH
15524: LD_VAR 0 4
15528: PPUSH
15529: LD_VAR 0 5
15533: PPUSH
15534: CALL_OW 448
15538: IFFALSE 15571
// result := [ chassis , engine , control , weapon ] ;
15540: LD_ADDR_VAR 0 6
15544: PUSH
15545: LD_VAR 0 2
15549: PUSH
15550: LD_VAR 0 3
15554: PUSH
15555: LD_VAR 0 4
15559: PUSH
15560: LD_VAR 0 5
15564: PUSH
15565: EMPTY
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: ST_TO_ADDR
// end ;
15571: LD_VAR 0 6
15575: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
15576: LD_INT 0
15578: PPUSH
// if not chassis or not engine then
15579: LD_VAR 0 1
15583: NOT
15584: PUSH
15585: LD_VAR 0 2
15589: NOT
15590: OR
15591: IFFALSE 15595
// exit ;
15593: GO 15791
// case engine of engine_solar :
15595: LD_VAR 0 2
15599: PUSH
15600: LD_INT 2
15602: DOUBLE
15603: EQUAL
15604: IFTRUE 15608
15606: GO 15646
15608: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
15609: LD_ADDR_VAR 0 3
15613: PUSH
15614: LD_INT 11
15616: PUSH
15617: LD_INT 12
15619: PUSH
15620: LD_INT 13
15622: PUSH
15623: LD_INT 14
15625: PUSH
15626: LD_INT 1
15628: PUSH
15629: LD_INT 2
15631: PUSH
15632: LD_INT 3
15634: PUSH
15635: EMPTY
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: ST_TO_ADDR
15644: GO 15775
15646: LD_INT 1
15648: DOUBLE
15649: EQUAL
15650: IFTRUE 15654
15652: GO 15716
15654: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
15655: LD_ADDR_VAR 0 3
15659: PUSH
15660: LD_INT 11
15662: PUSH
15663: LD_INT 12
15665: PUSH
15666: LD_INT 13
15668: PUSH
15669: LD_INT 14
15671: PUSH
15672: LD_INT 1
15674: PUSH
15675: LD_INT 2
15677: PUSH
15678: LD_INT 3
15680: PUSH
15681: LD_INT 4
15683: PUSH
15684: LD_INT 5
15686: PUSH
15687: LD_INT 21
15689: PUSH
15690: LD_INT 23
15692: PUSH
15693: LD_INT 22
15695: PUSH
15696: LD_INT 24
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: ST_TO_ADDR
15714: GO 15775
15716: LD_INT 3
15718: DOUBLE
15719: EQUAL
15720: IFTRUE 15724
15722: GO 15774
15724: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15725: LD_ADDR_VAR 0 3
15729: PUSH
15730: LD_INT 13
15732: PUSH
15733: LD_INT 14
15735: PUSH
15736: LD_INT 2
15738: PUSH
15739: LD_INT 3
15741: PUSH
15742: LD_INT 4
15744: PUSH
15745: LD_INT 5
15747: PUSH
15748: LD_INT 21
15750: PUSH
15751: LD_INT 22
15753: PUSH
15754: LD_INT 23
15756: PUSH
15757: LD_INT 24
15759: PUSH
15760: EMPTY
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: ST_TO_ADDR
15772: GO 15775
15774: POP
// result := ( chassis in result ) ;
15775: LD_ADDR_VAR 0 3
15779: PUSH
15780: LD_VAR 0 1
15784: PUSH
15785: LD_VAR 0 3
15789: IN
15790: ST_TO_ADDR
// end ;
15791: LD_VAR 0 3
15795: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
15796: LD_INT 0
15798: PPUSH
// if not chassis or not weapon then
15799: LD_VAR 0 1
15803: NOT
15804: PUSH
15805: LD_VAR 0 2
15809: NOT
15810: OR
15811: IFFALSE 15815
// exit ;
15813: GO 16841
// case weapon of us_machine_gun :
15815: LD_VAR 0 2
15819: PUSH
15820: LD_INT 2
15822: DOUBLE
15823: EQUAL
15824: IFTRUE 15828
15826: GO 15858
15828: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
15829: LD_ADDR_VAR 0 3
15833: PUSH
15834: LD_INT 1
15836: PUSH
15837: LD_INT 2
15839: PUSH
15840: LD_INT 3
15842: PUSH
15843: LD_INT 4
15845: PUSH
15846: LD_INT 5
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: ST_TO_ADDR
15856: GO 16825
15858: LD_INT 3
15860: DOUBLE
15861: EQUAL
15862: IFTRUE 15866
15864: GO 15896
15866: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
15867: LD_ADDR_VAR 0 3
15871: PUSH
15872: LD_INT 1
15874: PUSH
15875: LD_INT 2
15877: PUSH
15878: LD_INT 3
15880: PUSH
15881: LD_INT 4
15883: PUSH
15884: LD_INT 5
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: ST_TO_ADDR
15894: GO 16825
15896: LD_INT 11
15898: DOUBLE
15899: EQUAL
15900: IFTRUE 15904
15902: GO 15934
15904: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
15905: LD_ADDR_VAR 0 3
15909: PUSH
15910: LD_INT 1
15912: PUSH
15913: LD_INT 2
15915: PUSH
15916: LD_INT 3
15918: PUSH
15919: LD_INT 4
15921: PUSH
15922: LD_INT 5
15924: PUSH
15925: EMPTY
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: ST_TO_ADDR
15932: GO 16825
15934: LD_INT 4
15936: DOUBLE
15937: EQUAL
15938: IFTRUE 15942
15940: GO 15968
15942: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
15943: LD_ADDR_VAR 0 3
15947: PUSH
15948: LD_INT 2
15950: PUSH
15951: LD_INT 3
15953: PUSH
15954: LD_INT 4
15956: PUSH
15957: LD_INT 5
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: ST_TO_ADDR
15966: GO 16825
15968: LD_INT 5
15970: DOUBLE
15971: EQUAL
15972: IFTRUE 15976
15974: GO 16002
15976: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
15977: LD_ADDR_VAR 0 3
15981: PUSH
15982: LD_INT 2
15984: PUSH
15985: LD_INT 3
15987: PUSH
15988: LD_INT 4
15990: PUSH
15991: LD_INT 5
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: ST_TO_ADDR
16000: GO 16825
16002: LD_INT 9
16004: DOUBLE
16005: EQUAL
16006: IFTRUE 16010
16008: GO 16036
16010: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
16011: LD_ADDR_VAR 0 3
16015: PUSH
16016: LD_INT 2
16018: PUSH
16019: LD_INT 3
16021: PUSH
16022: LD_INT 4
16024: PUSH
16025: LD_INT 5
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: ST_TO_ADDR
16034: GO 16825
16036: LD_INT 7
16038: DOUBLE
16039: EQUAL
16040: IFTRUE 16044
16042: GO 16070
16044: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
16045: LD_ADDR_VAR 0 3
16049: PUSH
16050: LD_INT 2
16052: PUSH
16053: LD_INT 3
16055: PUSH
16056: LD_INT 4
16058: PUSH
16059: LD_INT 5
16061: PUSH
16062: EMPTY
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: ST_TO_ADDR
16068: GO 16825
16070: LD_INT 12
16072: DOUBLE
16073: EQUAL
16074: IFTRUE 16078
16076: GO 16104
16078: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
16079: LD_ADDR_VAR 0 3
16083: PUSH
16084: LD_INT 2
16086: PUSH
16087: LD_INT 3
16089: PUSH
16090: LD_INT 4
16092: PUSH
16093: LD_INT 5
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: ST_TO_ADDR
16102: GO 16825
16104: LD_INT 13
16106: DOUBLE
16107: EQUAL
16108: IFTRUE 16112
16110: GO 16138
16112: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
16113: LD_ADDR_VAR 0 3
16117: PUSH
16118: LD_INT 2
16120: PUSH
16121: LD_INT 3
16123: PUSH
16124: LD_INT 4
16126: PUSH
16127: LD_INT 5
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: ST_TO_ADDR
16136: GO 16825
16138: LD_INT 14
16140: DOUBLE
16141: EQUAL
16142: IFTRUE 16146
16144: GO 16164
16146: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
16147: LD_ADDR_VAR 0 3
16151: PUSH
16152: LD_INT 4
16154: PUSH
16155: LD_INT 5
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: ST_TO_ADDR
16162: GO 16825
16164: LD_INT 6
16166: DOUBLE
16167: EQUAL
16168: IFTRUE 16172
16170: GO 16190
16172: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
16173: LD_ADDR_VAR 0 3
16177: PUSH
16178: LD_INT 4
16180: PUSH
16181: LD_INT 5
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: ST_TO_ADDR
16188: GO 16825
16190: LD_INT 10
16192: DOUBLE
16193: EQUAL
16194: IFTRUE 16198
16196: GO 16216
16198: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
16199: LD_ADDR_VAR 0 3
16203: PUSH
16204: LD_INT 4
16206: PUSH
16207: LD_INT 5
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: ST_TO_ADDR
16214: GO 16825
16216: LD_INT 22
16218: DOUBLE
16219: EQUAL
16220: IFTRUE 16224
16222: GO 16250
16224: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
16225: LD_ADDR_VAR 0 3
16229: PUSH
16230: LD_INT 11
16232: PUSH
16233: LD_INT 12
16235: PUSH
16236: LD_INT 13
16238: PUSH
16239: LD_INT 14
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: ST_TO_ADDR
16248: GO 16825
16250: LD_INT 23
16252: DOUBLE
16253: EQUAL
16254: IFTRUE 16258
16256: GO 16284
16258: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
16259: LD_ADDR_VAR 0 3
16263: PUSH
16264: LD_INT 11
16266: PUSH
16267: LD_INT 12
16269: PUSH
16270: LD_INT 13
16272: PUSH
16273: LD_INT 14
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: ST_TO_ADDR
16282: GO 16825
16284: LD_INT 24
16286: DOUBLE
16287: EQUAL
16288: IFTRUE 16292
16290: GO 16318
16292: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
16293: LD_ADDR_VAR 0 3
16297: PUSH
16298: LD_INT 11
16300: PUSH
16301: LD_INT 12
16303: PUSH
16304: LD_INT 13
16306: PUSH
16307: LD_INT 14
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: ST_TO_ADDR
16316: GO 16825
16318: LD_INT 30
16320: DOUBLE
16321: EQUAL
16322: IFTRUE 16326
16324: GO 16352
16326: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
16327: LD_ADDR_VAR 0 3
16331: PUSH
16332: LD_INT 11
16334: PUSH
16335: LD_INT 12
16337: PUSH
16338: LD_INT 13
16340: PUSH
16341: LD_INT 14
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: ST_TO_ADDR
16350: GO 16825
16352: LD_INT 25
16354: DOUBLE
16355: EQUAL
16356: IFTRUE 16360
16358: GO 16378
16360: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
16361: LD_ADDR_VAR 0 3
16365: PUSH
16366: LD_INT 13
16368: PUSH
16369: LD_INT 14
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: ST_TO_ADDR
16376: GO 16825
16378: LD_INT 27
16380: DOUBLE
16381: EQUAL
16382: IFTRUE 16386
16384: GO 16404
16386: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
16387: LD_ADDR_VAR 0 3
16391: PUSH
16392: LD_INT 13
16394: PUSH
16395: LD_INT 14
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: ST_TO_ADDR
16402: GO 16825
16404: LD_INT 28
16406: DOUBLE
16407: EQUAL
16408: IFTRUE 16412
16410: GO 16430
16412: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
16413: LD_ADDR_VAR 0 3
16417: PUSH
16418: LD_INT 13
16420: PUSH
16421: LD_INT 14
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: ST_TO_ADDR
16428: GO 16825
16430: LD_INT 29
16432: DOUBLE
16433: EQUAL
16434: IFTRUE 16438
16436: GO 16456
16438: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
16439: LD_ADDR_VAR 0 3
16443: PUSH
16444: LD_INT 13
16446: PUSH
16447: LD_INT 14
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: ST_TO_ADDR
16454: GO 16825
16456: LD_INT 31
16458: DOUBLE
16459: EQUAL
16460: IFTRUE 16464
16462: GO 16482
16464: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
16465: LD_ADDR_VAR 0 3
16469: PUSH
16470: LD_INT 13
16472: PUSH
16473: LD_INT 14
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: ST_TO_ADDR
16480: GO 16825
16482: LD_INT 26
16484: DOUBLE
16485: EQUAL
16486: IFTRUE 16490
16488: GO 16508
16490: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
16491: LD_ADDR_VAR 0 3
16495: PUSH
16496: LD_INT 13
16498: PUSH
16499: LD_INT 14
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: ST_TO_ADDR
16506: GO 16825
16508: LD_INT 42
16510: DOUBLE
16511: EQUAL
16512: IFTRUE 16516
16514: GO 16542
16516: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
16517: LD_ADDR_VAR 0 3
16521: PUSH
16522: LD_INT 21
16524: PUSH
16525: LD_INT 22
16527: PUSH
16528: LD_INT 23
16530: PUSH
16531: LD_INT 24
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: ST_TO_ADDR
16540: GO 16825
16542: LD_INT 43
16544: DOUBLE
16545: EQUAL
16546: IFTRUE 16550
16548: GO 16576
16550: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
16551: LD_ADDR_VAR 0 3
16555: PUSH
16556: LD_INT 21
16558: PUSH
16559: LD_INT 22
16561: PUSH
16562: LD_INT 23
16564: PUSH
16565: LD_INT 24
16567: PUSH
16568: EMPTY
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: ST_TO_ADDR
16574: GO 16825
16576: LD_INT 44
16578: DOUBLE
16579: EQUAL
16580: IFTRUE 16584
16582: GO 16610
16584: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
16585: LD_ADDR_VAR 0 3
16589: PUSH
16590: LD_INT 21
16592: PUSH
16593: LD_INT 22
16595: PUSH
16596: LD_INT 23
16598: PUSH
16599: LD_INT 24
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: ST_TO_ADDR
16608: GO 16825
16610: LD_INT 45
16612: DOUBLE
16613: EQUAL
16614: IFTRUE 16618
16616: GO 16644
16618: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
16619: LD_ADDR_VAR 0 3
16623: PUSH
16624: LD_INT 21
16626: PUSH
16627: LD_INT 22
16629: PUSH
16630: LD_INT 23
16632: PUSH
16633: LD_INT 24
16635: PUSH
16636: EMPTY
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: ST_TO_ADDR
16642: GO 16825
16644: LD_INT 49
16646: DOUBLE
16647: EQUAL
16648: IFTRUE 16652
16650: GO 16678
16652: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
16653: LD_ADDR_VAR 0 3
16657: PUSH
16658: LD_INT 21
16660: PUSH
16661: LD_INT 22
16663: PUSH
16664: LD_INT 23
16666: PUSH
16667: LD_INT 24
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: ST_TO_ADDR
16676: GO 16825
16678: LD_INT 51
16680: DOUBLE
16681: EQUAL
16682: IFTRUE 16686
16684: GO 16712
16686: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
16687: LD_ADDR_VAR 0 3
16691: PUSH
16692: LD_INT 21
16694: PUSH
16695: LD_INT 22
16697: PUSH
16698: LD_INT 23
16700: PUSH
16701: LD_INT 24
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: ST_TO_ADDR
16710: GO 16825
16712: LD_INT 52
16714: DOUBLE
16715: EQUAL
16716: IFTRUE 16720
16718: GO 16746
16720: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
16721: LD_ADDR_VAR 0 3
16725: PUSH
16726: LD_INT 21
16728: PUSH
16729: LD_INT 22
16731: PUSH
16732: LD_INT 23
16734: PUSH
16735: LD_INT 24
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: ST_TO_ADDR
16744: GO 16825
16746: LD_INT 53
16748: DOUBLE
16749: EQUAL
16750: IFTRUE 16754
16752: GO 16772
16754: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
16755: LD_ADDR_VAR 0 3
16759: PUSH
16760: LD_INT 23
16762: PUSH
16763: LD_INT 24
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: ST_TO_ADDR
16770: GO 16825
16772: LD_INT 46
16774: DOUBLE
16775: EQUAL
16776: IFTRUE 16780
16778: GO 16798
16780: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
16781: LD_ADDR_VAR 0 3
16785: PUSH
16786: LD_INT 23
16788: PUSH
16789: LD_INT 24
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: ST_TO_ADDR
16796: GO 16825
16798: LD_INT 47
16800: DOUBLE
16801: EQUAL
16802: IFTRUE 16806
16804: GO 16824
16806: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16807: LD_ADDR_VAR 0 3
16811: PUSH
16812: LD_INT 23
16814: PUSH
16815: LD_INT 24
16817: PUSH
16818: EMPTY
16819: LIST
16820: LIST
16821: ST_TO_ADDR
16822: GO 16825
16824: POP
// result := ( chassis in result ) ;
16825: LD_ADDR_VAR 0 3
16829: PUSH
16830: LD_VAR 0 1
16834: PUSH
16835: LD_VAR 0 3
16839: IN
16840: ST_TO_ADDR
// end ;
16841: LD_VAR 0 3
16845: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
16846: LD_INT 0
16848: PPUSH
16849: PPUSH
16850: PPUSH
16851: PPUSH
16852: PPUSH
16853: PPUSH
16854: PPUSH
// result := array ;
16855: LD_ADDR_VAR 0 5
16859: PUSH
16860: LD_VAR 0 1
16864: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
16865: LD_VAR 0 1
16869: NOT
16870: PUSH
16871: LD_VAR 0 2
16875: NOT
16876: OR
16877: PUSH
16878: LD_VAR 0 3
16882: NOT
16883: OR
16884: PUSH
16885: LD_VAR 0 2
16889: PUSH
16890: LD_VAR 0 1
16894: GREATER
16895: OR
16896: PUSH
16897: LD_VAR 0 3
16901: PUSH
16902: LD_VAR 0 1
16906: GREATER
16907: OR
16908: IFFALSE 16912
// exit ;
16910: GO 17208
// if direction then
16912: LD_VAR 0 4
16916: IFFALSE 16980
// begin d := 1 ;
16918: LD_ADDR_VAR 0 9
16922: PUSH
16923: LD_INT 1
16925: ST_TO_ADDR
// if i_from > i_to then
16926: LD_VAR 0 2
16930: PUSH
16931: LD_VAR 0 3
16935: GREATER
16936: IFFALSE 16962
// length := ( array - i_from ) + i_to else
16938: LD_ADDR_VAR 0 11
16942: PUSH
16943: LD_VAR 0 1
16947: PUSH
16948: LD_VAR 0 2
16952: MINUS
16953: PUSH
16954: LD_VAR 0 3
16958: PLUS
16959: ST_TO_ADDR
16960: GO 16978
// length := i_to - i_from ;
16962: LD_ADDR_VAR 0 11
16966: PUSH
16967: LD_VAR 0 3
16971: PUSH
16972: LD_VAR 0 2
16976: MINUS
16977: ST_TO_ADDR
// end else
16978: GO 17041
// begin d := - 1 ;
16980: LD_ADDR_VAR 0 9
16984: PUSH
16985: LD_INT 1
16987: NEG
16988: ST_TO_ADDR
// if i_from > i_to then
16989: LD_VAR 0 2
16993: PUSH
16994: LD_VAR 0 3
16998: GREATER
16999: IFFALSE 17019
// length := i_from - i_to else
17001: LD_ADDR_VAR 0 11
17005: PUSH
17006: LD_VAR 0 2
17010: PUSH
17011: LD_VAR 0 3
17015: MINUS
17016: ST_TO_ADDR
17017: GO 17041
// length := ( array - i_to ) + i_from ;
17019: LD_ADDR_VAR 0 11
17023: PUSH
17024: LD_VAR 0 1
17028: PUSH
17029: LD_VAR 0 3
17033: MINUS
17034: PUSH
17035: LD_VAR 0 2
17039: PLUS
17040: ST_TO_ADDR
// end ; if not length then
17041: LD_VAR 0 11
17045: NOT
17046: IFFALSE 17050
// exit ;
17048: GO 17208
// tmp := array ;
17050: LD_ADDR_VAR 0 10
17054: PUSH
17055: LD_VAR 0 1
17059: ST_TO_ADDR
// for i = 1 to length do
17060: LD_ADDR_VAR 0 6
17064: PUSH
17065: DOUBLE
17066: LD_INT 1
17068: DEC
17069: ST_TO_ADDR
17070: LD_VAR 0 11
17074: PUSH
17075: FOR_TO
17076: IFFALSE 17196
// begin for j = 1 to array do
17078: LD_ADDR_VAR 0 7
17082: PUSH
17083: DOUBLE
17084: LD_INT 1
17086: DEC
17087: ST_TO_ADDR
17088: LD_VAR 0 1
17092: PUSH
17093: FOR_TO
17094: IFFALSE 17182
// begin k := j + d ;
17096: LD_ADDR_VAR 0 8
17100: PUSH
17101: LD_VAR 0 7
17105: PUSH
17106: LD_VAR 0 9
17110: PLUS
17111: ST_TO_ADDR
// if k > array then
17112: LD_VAR 0 8
17116: PUSH
17117: LD_VAR 0 1
17121: GREATER
17122: IFFALSE 17132
// k := 1 ;
17124: LD_ADDR_VAR 0 8
17128: PUSH
17129: LD_INT 1
17131: ST_TO_ADDR
// if not k then
17132: LD_VAR 0 8
17136: NOT
17137: IFFALSE 17149
// k := array ;
17139: LD_ADDR_VAR 0 8
17143: PUSH
17144: LD_VAR 0 1
17148: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
17149: LD_ADDR_VAR 0 10
17153: PUSH
17154: LD_VAR 0 10
17158: PPUSH
17159: LD_VAR 0 8
17163: PPUSH
17164: LD_VAR 0 1
17168: PUSH
17169: LD_VAR 0 7
17173: ARRAY
17174: PPUSH
17175: CALL_OW 1
17179: ST_TO_ADDR
// end ;
17180: GO 17093
17182: POP
17183: POP
// array := tmp ;
17184: LD_ADDR_VAR 0 1
17188: PUSH
17189: LD_VAR 0 10
17193: ST_TO_ADDR
// end ;
17194: GO 17075
17196: POP
17197: POP
// result := array ;
17198: LD_ADDR_VAR 0 5
17202: PUSH
17203: LD_VAR 0 1
17207: ST_TO_ADDR
// end ;
17208: LD_VAR 0 5
17212: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
17213: LD_INT 0
17215: PPUSH
17216: PPUSH
// result := 0 ;
17217: LD_ADDR_VAR 0 3
17221: PUSH
17222: LD_INT 0
17224: ST_TO_ADDR
// if not array or not value in array then
17225: LD_VAR 0 1
17229: NOT
17230: PUSH
17231: LD_VAR 0 2
17235: PUSH
17236: LD_VAR 0 1
17240: IN
17241: NOT
17242: OR
17243: IFFALSE 17247
// exit ;
17245: GO 17301
// for i = 1 to array do
17247: LD_ADDR_VAR 0 4
17251: PUSH
17252: DOUBLE
17253: LD_INT 1
17255: DEC
17256: ST_TO_ADDR
17257: LD_VAR 0 1
17261: PUSH
17262: FOR_TO
17263: IFFALSE 17299
// if value = array [ i ] then
17265: LD_VAR 0 2
17269: PUSH
17270: LD_VAR 0 1
17274: PUSH
17275: LD_VAR 0 4
17279: ARRAY
17280: EQUAL
17281: IFFALSE 17297
// begin result := i ;
17283: LD_ADDR_VAR 0 3
17287: PUSH
17288: LD_VAR 0 4
17292: ST_TO_ADDR
// exit ;
17293: POP
17294: POP
17295: GO 17301
// end ;
17297: GO 17262
17299: POP
17300: POP
// end ;
17301: LD_VAR 0 3
17305: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
17306: LD_INT 0
17308: PPUSH
// vc_chassis := chassis ;
17309: LD_ADDR_OWVAR 37
17313: PUSH
17314: LD_VAR 0 1
17318: ST_TO_ADDR
// vc_engine := engine ;
17319: LD_ADDR_OWVAR 39
17323: PUSH
17324: LD_VAR 0 2
17328: ST_TO_ADDR
// vc_control := control ;
17329: LD_ADDR_OWVAR 38
17333: PUSH
17334: LD_VAR 0 3
17338: ST_TO_ADDR
// vc_weapon := weapon ;
17339: LD_ADDR_OWVAR 40
17343: PUSH
17344: LD_VAR 0 4
17348: ST_TO_ADDR
// vc_fuel_battery := fuel ;
17349: LD_ADDR_OWVAR 41
17353: PUSH
17354: LD_VAR 0 5
17358: ST_TO_ADDR
// end ;
17359: LD_VAR 0 6
17363: RET
// export function WantPlant ( unit ) ; var task ; begin
17364: LD_INT 0
17366: PPUSH
17367: PPUSH
// result := false ;
17368: LD_ADDR_VAR 0 2
17372: PUSH
17373: LD_INT 0
17375: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
17376: LD_ADDR_VAR 0 3
17380: PUSH
17381: LD_VAR 0 1
17385: PPUSH
17386: CALL_OW 437
17390: ST_TO_ADDR
// if task then
17391: LD_VAR 0 3
17395: IFFALSE 17423
// if task [ 1 ] [ 1 ] = p then
17397: LD_VAR 0 3
17401: PUSH
17402: LD_INT 1
17404: ARRAY
17405: PUSH
17406: LD_INT 1
17408: ARRAY
17409: PUSH
17410: LD_STRING p
17412: EQUAL
17413: IFFALSE 17423
// result := true ;
17415: LD_ADDR_VAR 0 2
17419: PUSH
17420: LD_INT 1
17422: ST_TO_ADDR
// end ;
17423: LD_VAR 0 2
17427: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
17428: LD_INT 0
17430: PPUSH
17431: PPUSH
17432: PPUSH
17433: PPUSH
// if pos < 1 then
17434: LD_VAR 0 2
17438: PUSH
17439: LD_INT 1
17441: LESS
17442: IFFALSE 17446
// exit ;
17444: GO 17749
// if pos = 1 then
17446: LD_VAR 0 2
17450: PUSH
17451: LD_INT 1
17453: EQUAL
17454: IFFALSE 17487
// result := Replace ( arr , pos [ 1 ] , value ) else
17456: LD_ADDR_VAR 0 4
17460: PUSH
17461: LD_VAR 0 1
17465: PPUSH
17466: LD_VAR 0 2
17470: PUSH
17471: LD_INT 1
17473: ARRAY
17474: PPUSH
17475: LD_VAR 0 3
17479: PPUSH
17480: CALL_OW 1
17484: ST_TO_ADDR
17485: GO 17749
// begin tmp := arr ;
17487: LD_ADDR_VAR 0 6
17491: PUSH
17492: LD_VAR 0 1
17496: ST_TO_ADDR
// s_arr := [ tmp ] ;
17497: LD_ADDR_VAR 0 7
17501: PUSH
17502: LD_VAR 0 6
17506: PUSH
17507: EMPTY
17508: LIST
17509: ST_TO_ADDR
// for i = 1 to pos - 1 do
17510: LD_ADDR_VAR 0 5
17514: PUSH
17515: DOUBLE
17516: LD_INT 1
17518: DEC
17519: ST_TO_ADDR
17520: LD_VAR 0 2
17524: PUSH
17525: LD_INT 1
17527: MINUS
17528: PUSH
17529: FOR_TO
17530: IFFALSE 17575
// begin tmp := tmp [ pos [ i ] ] ;
17532: LD_ADDR_VAR 0 6
17536: PUSH
17537: LD_VAR 0 6
17541: PUSH
17542: LD_VAR 0 2
17546: PUSH
17547: LD_VAR 0 5
17551: ARRAY
17552: ARRAY
17553: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
17554: LD_ADDR_VAR 0 7
17558: PUSH
17559: LD_VAR 0 7
17563: PUSH
17564: LD_VAR 0 6
17568: PUSH
17569: EMPTY
17570: LIST
17571: ADD
17572: ST_TO_ADDR
// end ;
17573: GO 17529
17575: POP
17576: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
17577: LD_ADDR_VAR 0 6
17581: PUSH
17582: LD_VAR 0 6
17586: PPUSH
17587: LD_VAR 0 2
17591: PUSH
17592: LD_VAR 0 2
17596: ARRAY
17597: PPUSH
17598: LD_VAR 0 3
17602: PPUSH
17603: CALL_OW 1
17607: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
17608: LD_ADDR_VAR 0 7
17612: PUSH
17613: LD_VAR 0 7
17617: PPUSH
17618: LD_VAR 0 7
17622: PPUSH
17623: LD_VAR 0 6
17627: PPUSH
17628: CALL_OW 1
17632: ST_TO_ADDR
// for i = s_arr downto 2 do
17633: LD_ADDR_VAR 0 5
17637: PUSH
17638: DOUBLE
17639: LD_VAR 0 7
17643: INC
17644: ST_TO_ADDR
17645: LD_INT 2
17647: PUSH
17648: FOR_DOWNTO
17649: IFFALSE 17733
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
17651: LD_ADDR_VAR 0 6
17655: PUSH
17656: LD_VAR 0 7
17660: PUSH
17661: LD_VAR 0 5
17665: PUSH
17666: LD_INT 1
17668: MINUS
17669: ARRAY
17670: PPUSH
17671: LD_VAR 0 2
17675: PUSH
17676: LD_VAR 0 5
17680: PUSH
17681: LD_INT 1
17683: MINUS
17684: ARRAY
17685: PPUSH
17686: LD_VAR 0 7
17690: PUSH
17691: LD_VAR 0 5
17695: ARRAY
17696: PPUSH
17697: CALL_OW 1
17701: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
17702: LD_ADDR_VAR 0 7
17706: PUSH
17707: LD_VAR 0 7
17711: PPUSH
17712: LD_VAR 0 5
17716: PUSH
17717: LD_INT 1
17719: MINUS
17720: PPUSH
17721: LD_VAR 0 6
17725: PPUSH
17726: CALL_OW 1
17730: ST_TO_ADDR
// end ;
17731: GO 17648
17733: POP
17734: POP
// result := s_arr [ 1 ] ;
17735: LD_ADDR_VAR 0 4
17739: PUSH
17740: LD_VAR 0 7
17744: PUSH
17745: LD_INT 1
17747: ARRAY
17748: ST_TO_ADDR
// end ; end ;
17749: LD_VAR 0 4
17753: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
17754: LD_INT 0
17756: PPUSH
17757: PPUSH
// if not list then
17758: LD_VAR 0 1
17762: NOT
17763: IFFALSE 17767
// exit ;
17765: GO 17858
// i := list [ pos1 ] ;
17767: LD_ADDR_VAR 0 5
17771: PUSH
17772: LD_VAR 0 1
17776: PUSH
17777: LD_VAR 0 2
17781: ARRAY
17782: ST_TO_ADDR
// if not i then
17783: LD_VAR 0 5
17787: NOT
17788: IFFALSE 17792
// exit ;
17790: GO 17858
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
17792: LD_ADDR_VAR 0 1
17796: PUSH
17797: LD_VAR 0 1
17801: PPUSH
17802: LD_VAR 0 2
17806: PPUSH
17807: LD_VAR 0 1
17811: PUSH
17812: LD_VAR 0 3
17816: ARRAY
17817: PPUSH
17818: CALL_OW 1
17822: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
17823: LD_ADDR_VAR 0 1
17827: PUSH
17828: LD_VAR 0 1
17832: PPUSH
17833: LD_VAR 0 3
17837: PPUSH
17838: LD_VAR 0 5
17842: PPUSH
17843: CALL_OW 1
17847: ST_TO_ADDR
// result := list ;
17848: LD_ADDR_VAR 0 4
17852: PUSH
17853: LD_VAR 0 1
17857: ST_TO_ADDR
// end ;
17858: LD_VAR 0 4
17862: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
17863: LD_INT 0
17865: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
17866: LD_ADDR_VAR 0 5
17870: PUSH
17871: LD_VAR 0 1
17875: PPUSH
17876: CALL_OW 250
17880: PPUSH
17881: LD_VAR 0 1
17885: PPUSH
17886: CALL_OW 251
17890: PPUSH
17891: LD_VAR 0 2
17895: PPUSH
17896: LD_VAR 0 3
17900: PPUSH
17901: LD_VAR 0 4
17905: PPUSH
17906: CALL 17916 0 5
17910: ST_TO_ADDR
// end ;
17911: LD_VAR 0 5
17915: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
17916: LD_INT 0
17918: PPUSH
17919: PPUSH
17920: PPUSH
17921: PPUSH
// if not list then
17922: LD_VAR 0 3
17926: NOT
17927: IFFALSE 17931
// exit ;
17929: GO 18319
// result := [ ] ;
17931: LD_ADDR_VAR 0 6
17935: PUSH
17936: EMPTY
17937: ST_TO_ADDR
// for i in list do
17938: LD_ADDR_VAR 0 7
17942: PUSH
17943: LD_VAR 0 3
17947: PUSH
17948: FOR_IN
17949: IFFALSE 18151
// begin tmp := GetDistUnitXY ( i , x , y ) ;
17951: LD_ADDR_VAR 0 9
17955: PUSH
17956: LD_VAR 0 7
17960: PPUSH
17961: LD_VAR 0 1
17965: PPUSH
17966: LD_VAR 0 2
17970: PPUSH
17971: CALL_OW 297
17975: ST_TO_ADDR
// if not result then
17976: LD_VAR 0 6
17980: NOT
17981: IFFALSE 18007
// result := [ [ i , tmp ] ] else
17983: LD_ADDR_VAR 0 6
17987: PUSH
17988: LD_VAR 0 7
17992: PUSH
17993: LD_VAR 0 9
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: EMPTY
18003: LIST
18004: ST_TO_ADDR
18005: GO 18149
// begin if result [ result ] [ 2 ] < tmp then
18007: LD_VAR 0 6
18011: PUSH
18012: LD_VAR 0 6
18016: ARRAY
18017: PUSH
18018: LD_INT 2
18020: ARRAY
18021: PUSH
18022: LD_VAR 0 9
18026: LESS
18027: IFFALSE 18069
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
18029: LD_ADDR_VAR 0 6
18033: PUSH
18034: LD_VAR 0 6
18038: PPUSH
18039: LD_VAR 0 6
18043: PUSH
18044: LD_INT 1
18046: PLUS
18047: PPUSH
18048: LD_VAR 0 7
18052: PUSH
18053: LD_VAR 0 9
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PPUSH
18062: CALL_OW 2
18066: ST_TO_ADDR
18067: GO 18149
// for j = 1 to result do
18069: LD_ADDR_VAR 0 8
18073: PUSH
18074: DOUBLE
18075: LD_INT 1
18077: DEC
18078: ST_TO_ADDR
18079: LD_VAR 0 6
18083: PUSH
18084: FOR_TO
18085: IFFALSE 18147
// begin if tmp < result [ j ] [ 2 ] then
18087: LD_VAR 0 9
18091: PUSH
18092: LD_VAR 0 6
18096: PUSH
18097: LD_VAR 0 8
18101: ARRAY
18102: PUSH
18103: LD_INT 2
18105: ARRAY
18106: LESS
18107: IFFALSE 18145
// begin result := Insert ( result , j , [ i , tmp ] ) ;
18109: LD_ADDR_VAR 0 6
18113: PUSH
18114: LD_VAR 0 6
18118: PPUSH
18119: LD_VAR 0 8
18123: PPUSH
18124: LD_VAR 0 7
18128: PUSH
18129: LD_VAR 0 9
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: PPUSH
18138: CALL_OW 2
18142: ST_TO_ADDR
// break ;
18143: GO 18147
// end ; end ;
18145: GO 18084
18147: POP
18148: POP
// end ; end ;
18149: GO 17948
18151: POP
18152: POP
// if result and not asc then
18153: LD_VAR 0 6
18157: PUSH
18158: LD_VAR 0 4
18162: NOT
18163: AND
18164: IFFALSE 18239
// begin tmp := result ;
18166: LD_ADDR_VAR 0 9
18170: PUSH
18171: LD_VAR 0 6
18175: ST_TO_ADDR
// for i = tmp downto 1 do
18176: LD_ADDR_VAR 0 7
18180: PUSH
18181: DOUBLE
18182: LD_VAR 0 9
18186: INC
18187: ST_TO_ADDR
18188: LD_INT 1
18190: PUSH
18191: FOR_DOWNTO
18192: IFFALSE 18237
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
18194: LD_ADDR_VAR 0 6
18198: PUSH
18199: LD_VAR 0 6
18203: PPUSH
18204: LD_VAR 0 9
18208: PUSH
18209: LD_VAR 0 7
18213: MINUS
18214: PUSH
18215: LD_INT 1
18217: PLUS
18218: PPUSH
18219: LD_VAR 0 9
18223: PUSH
18224: LD_VAR 0 7
18228: ARRAY
18229: PPUSH
18230: CALL_OW 1
18234: ST_TO_ADDR
18235: GO 18191
18237: POP
18238: POP
// end ; tmp := [ ] ;
18239: LD_ADDR_VAR 0 9
18243: PUSH
18244: EMPTY
18245: ST_TO_ADDR
// if mode then
18246: LD_VAR 0 5
18250: IFFALSE 18319
// begin for i = 1 to result do
18252: LD_ADDR_VAR 0 7
18256: PUSH
18257: DOUBLE
18258: LD_INT 1
18260: DEC
18261: ST_TO_ADDR
18262: LD_VAR 0 6
18266: PUSH
18267: FOR_TO
18268: IFFALSE 18307
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
18270: LD_ADDR_VAR 0 9
18274: PUSH
18275: LD_VAR 0 9
18279: PPUSH
18280: LD_VAR 0 7
18284: PPUSH
18285: LD_VAR 0 6
18289: PUSH
18290: LD_VAR 0 7
18294: ARRAY
18295: PUSH
18296: LD_INT 1
18298: ARRAY
18299: PPUSH
18300: CALL_OW 1
18304: ST_TO_ADDR
18305: GO 18267
18307: POP
18308: POP
// result := tmp ;
18309: LD_ADDR_VAR 0 6
18313: PUSH
18314: LD_VAR 0 9
18318: ST_TO_ADDR
// end ; end ;
18319: LD_VAR 0 6
18323: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
18324: LD_INT 0
18326: PPUSH
18327: PPUSH
18328: PPUSH
18329: PPUSH
18330: PPUSH
18331: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
18332: LD_ADDR_VAR 0 5
18336: PUSH
18337: LD_INT 0
18339: PUSH
18340: LD_INT 0
18342: PUSH
18343: LD_INT 0
18345: PUSH
18346: EMPTY
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: ST_TO_ADDR
// if not x or not y then
18354: LD_VAR 0 2
18358: NOT
18359: PUSH
18360: LD_VAR 0 3
18364: NOT
18365: OR
18366: IFFALSE 18370
// exit ;
18368: GO 20016
// if not range then
18370: LD_VAR 0 4
18374: NOT
18375: IFFALSE 18385
// range := 10 ;
18377: LD_ADDR_VAR 0 4
18381: PUSH
18382: LD_INT 10
18384: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18385: LD_ADDR_VAR 0 8
18389: PUSH
18390: LD_INT 81
18392: PUSH
18393: LD_VAR 0 1
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: LD_INT 92
18404: PUSH
18405: LD_VAR 0 2
18409: PUSH
18410: LD_VAR 0 3
18414: PUSH
18415: LD_VAR 0 4
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: PUSH
18426: LD_INT 3
18428: PUSH
18429: LD_INT 21
18431: PUSH
18432: LD_INT 3
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: LIST
18447: PPUSH
18448: CALL_OW 69
18452: ST_TO_ADDR
// if not tmp then
18453: LD_VAR 0 8
18457: NOT
18458: IFFALSE 18462
// exit ;
18460: GO 20016
// for i in tmp do
18462: LD_ADDR_VAR 0 6
18466: PUSH
18467: LD_VAR 0 8
18471: PUSH
18472: FOR_IN
18473: IFFALSE 19991
// begin points := [ 0 , 0 , 0 ] ;
18475: LD_ADDR_VAR 0 9
18479: PUSH
18480: LD_INT 0
18482: PUSH
18483: LD_INT 0
18485: PUSH
18486: LD_INT 0
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: LIST
18493: ST_TO_ADDR
// bpoints := 1 ;
18494: LD_ADDR_VAR 0 10
18498: PUSH
18499: LD_INT 1
18501: ST_TO_ADDR
// case GetType ( i ) of unit_human :
18502: LD_VAR 0 6
18506: PPUSH
18507: CALL_OW 247
18511: PUSH
18512: LD_INT 1
18514: DOUBLE
18515: EQUAL
18516: IFTRUE 18520
18518: GO 19098
18520: POP
// begin if GetClass ( i ) = 1 then
18521: LD_VAR 0 6
18525: PPUSH
18526: CALL_OW 257
18530: PUSH
18531: LD_INT 1
18533: EQUAL
18534: IFFALSE 18555
// points := [ 10 , 5 , 3 ] ;
18536: LD_ADDR_VAR 0 9
18540: PUSH
18541: LD_INT 10
18543: PUSH
18544: LD_INT 5
18546: PUSH
18547: LD_INT 3
18549: PUSH
18550: EMPTY
18551: LIST
18552: LIST
18553: LIST
18554: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
18555: LD_VAR 0 6
18559: PPUSH
18560: CALL_OW 257
18564: PUSH
18565: LD_INT 2
18567: PUSH
18568: LD_INT 3
18570: PUSH
18571: LD_INT 4
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: LIST
18578: IN
18579: IFFALSE 18600
// points := [ 3 , 2 , 1 ] ;
18581: LD_ADDR_VAR 0 9
18585: PUSH
18586: LD_INT 3
18588: PUSH
18589: LD_INT 2
18591: PUSH
18592: LD_INT 1
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: LIST
18599: ST_TO_ADDR
// if GetClass ( i ) = 5 then
18600: LD_VAR 0 6
18604: PPUSH
18605: CALL_OW 257
18609: PUSH
18610: LD_INT 5
18612: EQUAL
18613: IFFALSE 18634
// points := [ 130 , 5 , 2 ] ;
18615: LD_ADDR_VAR 0 9
18619: PUSH
18620: LD_INT 130
18622: PUSH
18623: LD_INT 5
18625: PUSH
18626: LD_INT 2
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: LIST
18633: ST_TO_ADDR
// if GetClass ( i ) = 8 then
18634: LD_VAR 0 6
18638: PPUSH
18639: CALL_OW 257
18643: PUSH
18644: LD_INT 8
18646: EQUAL
18647: IFFALSE 18668
// points := [ 35 , 35 , 30 ] ;
18649: LD_ADDR_VAR 0 9
18653: PUSH
18654: LD_INT 35
18656: PUSH
18657: LD_INT 35
18659: PUSH
18660: LD_INT 30
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: LIST
18667: ST_TO_ADDR
// if GetClass ( i ) = 9 then
18668: LD_VAR 0 6
18672: PPUSH
18673: CALL_OW 257
18677: PUSH
18678: LD_INT 9
18680: EQUAL
18681: IFFALSE 18702
// points := [ 20 , 55 , 40 ] ;
18683: LD_ADDR_VAR 0 9
18687: PUSH
18688: LD_INT 20
18690: PUSH
18691: LD_INT 55
18693: PUSH
18694: LD_INT 40
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: LIST
18701: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
18702: LD_VAR 0 6
18706: PPUSH
18707: CALL_OW 257
18711: PUSH
18712: LD_INT 12
18714: PUSH
18715: LD_INT 16
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: IN
18722: IFFALSE 18743
// points := [ 5 , 3 , 2 ] ;
18724: LD_ADDR_VAR 0 9
18728: PUSH
18729: LD_INT 5
18731: PUSH
18732: LD_INT 3
18734: PUSH
18735: LD_INT 2
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: LIST
18742: ST_TO_ADDR
// if GetClass ( i ) = 17 then
18743: LD_VAR 0 6
18747: PPUSH
18748: CALL_OW 257
18752: PUSH
18753: LD_INT 17
18755: EQUAL
18756: IFFALSE 18777
// points := [ 100 , 50 , 75 ] ;
18758: LD_ADDR_VAR 0 9
18762: PUSH
18763: LD_INT 100
18765: PUSH
18766: LD_INT 50
18768: PUSH
18769: LD_INT 75
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: LIST
18776: ST_TO_ADDR
// if GetClass ( i ) = 15 then
18777: LD_VAR 0 6
18781: PPUSH
18782: CALL_OW 257
18786: PUSH
18787: LD_INT 15
18789: EQUAL
18790: IFFALSE 18811
// points := [ 10 , 5 , 3 ] ;
18792: LD_ADDR_VAR 0 9
18796: PUSH
18797: LD_INT 10
18799: PUSH
18800: LD_INT 5
18802: PUSH
18803: LD_INT 3
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: LIST
18810: ST_TO_ADDR
// if GetClass ( i ) = 14 then
18811: LD_VAR 0 6
18815: PPUSH
18816: CALL_OW 257
18820: PUSH
18821: LD_INT 14
18823: EQUAL
18824: IFFALSE 18845
// points := [ 10 , 0 , 0 ] ;
18826: LD_ADDR_VAR 0 9
18830: PUSH
18831: LD_INT 10
18833: PUSH
18834: LD_INT 0
18836: PUSH
18837: LD_INT 0
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: LIST
18844: ST_TO_ADDR
// if GetClass ( i ) = 11 then
18845: LD_VAR 0 6
18849: PPUSH
18850: CALL_OW 257
18854: PUSH
18855: LD_INT 11
18857: EQUAL
18858: IFFALSE 18879
// points := [ 30 , 10 , 5 ] ;
18860: LD_ADDR_VAR 0 9
18864: PUSH
18865: LD_INT 30
18867: PUSH
18868: LD_INT 10
18870: PUSH
18871: LD_INT 5
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: LIST
18878: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
18879: LD_VAR 0 1
18883: PPUSH
18884: LD_INT 5
18886: PPUSH
18887: CALL_OW 321
18891: PUSH
18892: LD_INT 2
18894: EQUAL
18895: IFFALSE 18912
// bpoints := bpoints * 1.8 ;
18897: LD_ADDR_VAR 0 10
18901: PUSH
18902: LD_VAR 0 10
18906: PUSH
18907: LD_REAL  1.80000000000000E+0000
18910: MUL
18911: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
18912: LD_VAR 0 6
18916: PPUSH
18917: CALL_OW 257
18921: PUSH
18922: LD_INT 1
18924: PUSH
18925: LD_INT 2
18927: PUSH
18928: LD_INT 3
18930: PUSH
18931: LD_INT 4
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: IN
18940: PUSH
18941: LD_VAR 0 1
18945: PPUSH
18946: LD_INT 51
18948: PPUSH
18949: CALL_OW 321
18953: PUSH
18954: LD_INT 2
18956: EQUAL
18957: AND
18958: IFFALSE 18975
// bpoints := bpoints * 1.2 ;
18960: LD_ADDR_VAR 0 10
18964: PUSH
18965: LD_VAR 0 10
18969: PUSH
18970: LD_REAL  1.20000000000000E+0000
18973: MUL
18974: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
18975: LD_VAR 0 6
18979: PPUSH
18980: CALL_OW 257
18984: PUSH
18985: LD_INT 5
18987: PUSH
18988: LD_INT 7
18990: PUSH
18991: LD_INT 9
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: LIST
18998: IN
18999: PUSH
19000: LD_VAR 0 1
19004: PPUSH
19005: LD_INT 52
19007: PPUSH
19008: CALL_OW 321
19012: PUSH
19013: LD_INT 2
19015: EQUAL
19016: AND
19017: IFFALSE 19034
// bpoints := bpoints * 1.5 ;
19019: LD_ADDR_VAR 0 10
19023: PUSH
19024: LD_VAR 0 10
19028: PUSH
19029: LD_REAL  1.50000000000000E+0000
19032: MUL
19033: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
19034: LD_VAR 0 1
19038: PPUSH
19039: LD_INT 66
19041: PPUSH
19042: CALL_OW 321
19046: PUSH
19047: LD_INT 2
19049: EQUAL
19050: IFFALSE 19067
// bpoints := bpoints * 1.1 ;
19052: LD_ADDR_VAR 0 10
19056: PUSH
19057: LD_VAR 0 10
19061: PUSH
19062: LD_REAL  1.10000000000000E+0000
19065: MUL
19066: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
19067: LD_ADDR_VAR 0 10
19071: PUSH
19072: LD_VAR 0 10
19076: PUSH
19077: LD_VAR 0 6
19081: PPUSH
19082: LD_INT 1
19084: PPUSH
19085: CALL_OW 259
19089: PUSH
19090: LD_REAL  1.15000000000000E+0000
19093: MUL
19094: MUL
19095: ST_TO_ADDR
// end ; unit_vehicle :
19096: GO 19920
19098: LD_INT 2
19100: DOUBLE
19101: EQUAL
19102: IFTRUE 19106
19104: GO 19908
19106: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
19107: LD_VAR 0 6
19111: PPUSH
19112: CALL_OW 264
19116: PUSH
19117: LD_INT 2
19119: PUSH
19120: LD_INT 42
19122: PUSH
19123: LD_INT 24
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: LIST
19130: IN
19131: IFFALSE 19152
// points := [ 25 , 5 , 3 ] ;
19133: LD_ADDR_VAR 0 9
19137: PUSH
19138: LD_INT 25
19140: PUSH
19141: LD_INT 5
19143: PUSH
19144: LD_INT 3
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: LIST
19151: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
19152: LD_VAR 0 6
19156: PPUSH
19157: CALL_OW 264
19161: PUSH
19162: LD_INT 4
19164: PUSH
19165: LD_INT 43
19167: PUSH
19168: LD_INT 25
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: LIST
19175: IN
19176: IFFALSE 19197
// points := [ 40 , 15 , 5 ] ;
19178: LD_ADDR_VAR 0 9
19182: PUSH
19183: LD_INT 40
19185: PUSH
19186: LD_INT 15
19188: PUSH
19189: LD_INT 5
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: LIST
19196: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
19197: LD_VAR 0 6
19201: PPUSH
19202: CALL_OW 264
19206: PUSH
19207: LD_INT 3
19209: PUSH
19210: LD_INT 23
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: IN
19217: IFFALSE 19238
// points := [ 7 , 25 , 8 ] ;
19219: LD_ADDR_VAR 0 9
19223: PUSH
19224: LD_INT 7
19226: PUSH
19227: LD_INT 25
19229: PUSH
19230: LD_INT 8
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: LIST
19237: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
19238: LD_VAR 0 6
19242: PPUSH
19243: CALL_OW 264
19247: PUSH
19248: LD_INT 5
19250: PUSH
19251: LD_INT 27
19253: PUSH
19254: LD_INT 44
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: LIST
19261: IN
19262: IFFALSE 19283
// points := [ 14 , 50 , 16 ] ;
19264: LD_ADDR_VAR 0 9
19268: PUSH
19269: LD_INT 14
19271: PUSH
19272: LD_INT 50
19274: PUSH
19275: LD_INT 16
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: LIST
19282: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
19283: LD_VAR 0 6
19287: PPUSH
19288: CALL_OW 264
19292: PUSH
19293: LD_INT 6
19295: PUSH
19296: LD_INT 46
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: IN
19303: IFFALSE 19324
// points := [ 32 , 120 , 70 ] ;
19305: LD_ADDR_VAR 0 9
19309: PUSH
19310: LD_INT 32
19312: PUSH
19313: LD_INT 120
19315: PUSH
19316: LD_INT 70
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: LIST
19323: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
19324: LD_VAR 0 6
19328: PPUSH
19329: CALL_OW 264
19333: PUSH
19334: LD_INT 7
19336: PUSH
19337: LD_INT 28
19339: PUSH
19340: LD_INT 45
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: LIST
19347: IN
19348: IFFALSE 19369
// points := [ 35 , 20 , 45 ] ;
19350: LD_ADDR_VAR 0 9
19354: PUSH
19355: LD_INT 35
19357: PUSH
19358: LD_INT 20
19360: PUSH
19361: LD_INT 45
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: LIST
19368: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
19369: LD_VAR 0 6
19373: PPUSH
19374: CALL_OW 264
19378: PUSH
19379: LD_INT 47
19381: PUSH
19382: EMPTY
19383: LIST
19384: IN
19385: IFFALSE 19406
// points := [ 67 , 45 , 75 ] ;
19387: LD_ADDR_VAR 0 9
19391: PUSH
19392: LD_INT 67
19394: PUSH
19395: LD_INT 45
19397: PUSH
19398: LD_INT 75
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: LIST
19405: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
19406: LD_VAR 0 6
19410: PPUSH
19411: CALL_OW 264
19415: PUSH
19416: LD_INT 26
19418: PUSH
19419: EMPTY
19420: LIST
19421: IN
19422: IFFALSE 19443
// points := [ 120 , 30 , 80 ] ;
19424: LD_ADDR_VAR 0 9
19428: PUSH
19429: LD_INT 120
19431: PUSH
19432: LD_INT 30
19434: PUSH
19435: LD_INT 80
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: LIST
19442: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
19443: LD_VAR 0 6
19447: PPUSH
19448: CALL_OW 264
19452: PUSH
19453: LD_INT 22
19455: PUSH
19456: EMPTY
19457: LIST
19458: IN
19459: IFFALSE 19480
// points := [ 40 , 1 , 1 ] ;
19461: LD_ADDR_VAR 0 9
19465: PUSH
19466: LD_INT 40
19468: PUSH
19469: LD_INT 1
19471: PUSH
19472: LD_INT 1
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: LIST
19479: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
19480: LD_VAR 0 6
19484: PPUSH
19485: CALL_OW 264
19489: PUSH
19490: LD_INT 29
19492: PUSH
19493: EMPTY
19494: LIST
19495: IN
19496: IFFALSE 19517
// points := [ 70 , 200 , 400 ] ;
19498: LD_ADDR_VAR 0 9
19502: PUSH
19503: LD_INT 70
19505: PUSH
19506: LD_INT 200
19508: PUSH
19509: LD_INT 400
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: LIST
19516: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
19517: LD_VAR 0 6
19521: PPUSH
19522: CALL_OW 264
19526: PUSH
19527: LD_INT 14
19529: PUSH
19530: LD_INT 53
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: IN
19537: IFFALSE 19558
// points := [ 40 , 10 , 20 ] ;
19539: LD_ADDR_VAR 0 9
19543: PUSH
19544: LD_INT 40
19546: PUSH
19547: LD_INT 10
19549: PUSH
19550: LD_INT 20
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: LIST
19557: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
19558: LD_VAR 0 6
19562: PPUSH
19563: CALL_OW 264
19567: PUSH
19568: LD_INT 9
19570: PUSH
19571: EMPTY
19572: LIST
19573: IN
19574: IFFALSE 19595
// points := [ 5 , 70 , 20 ] ;
19576: LD_ADDR_VAR 0 9
19580: PUSH
19581: LD_INT 5
19583: PUSH
19584: LD_INT 70
19586: PUSH
19587: LD_INT 20
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: LIST
19594: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
19595: LD_VAR 0 6
19599: PPUSH
19600: CALL_OW 264
19604: PUSH
19605: LD_INT 10
19607: PUSH
19608: EMPTY
19609: LIST
19610: IN
19611: IFFALSE 19632
// points := [ 35 , 110 , 70 ] ;
19613: LD_ADDR_VAR 0 9
19617: PUSH
19618: LD_INT 35
19620: PUSH
19621: LD_INT 110
19623: PUSH
19624: LD_INT 70
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: LIST
19631: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
19632: LD_VAR 0 6
19636: PPUSH
19637: CALL_OW 265
19641: PUSH
19642: LD_INT 25
19644: EQUAL
19645: IFFALSE 19666
// points := [ 80 , 65 , 100 ] ;
19647: LD_ADDR_VAR 0 9
19651: PUSH
19652: LD_INT 80
19654: PUSH
19655: LD_INT 65
19657: PUSH
19658: LD_INT 100
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: LIST
19665: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
19666: LD_VAR 0 6
19670: PPUSH
19671: CALL_OW 263
19675: PUSH
19676: LD_INT 1
19678: EQUAL
19679: IFFALSE 19714
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
19681: LD_ADDR_VAR 0 10
19685: PUSH
19686: LD_VAR 0 10
19690: PUSH
19691: LD_VAR 0 6
19695: PPUSH
19696: CALL_OW 311
19700: PPUSH
19701: LD_INT 3
19703: PPUSH
19704: CALL_OW 259
19708: PUSH
19709: LD_INT 4
19711: MUL
19712: MUL
19713: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
19714: LD_VAR 0 6
19718: PPUSH
19719: CALL_OW 263
19723: PUSH
19724: LD_INT 2
19726: EQUAL
19727: IFFALSE 19778
// begin j := IsControledBy ( i ) ;
19729: LD_ADDR_VAR 0 7
19733: PUSH
19734: LD_VAR 0 6
19738: PPUSH
19739: CALL_OW 312
19743: ST_TO_ADDR
// if j then
19744: LD_VAR 0 7
19748: IFFALSE 19778
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
19750: LD_ADDR_VAR 0 10
19754: PUSH
19755: LD_VAR 0 10
19759: PUSH
19760: LD_VAR 0 7
19764: PPUSH
19765: LD_INT 3
19767: PPUSH
19768: CALL_OW 259
19772: PUSH
19773: LD_INT 3
19775: MUL
19776: MUL
19777: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
19778: LD_VAR 0 6
19782: PPUSH
19783: CALL_OW 264
19787: PUSH
19788: LD_INT 5
19790: PUSH
19791: LD_INT 6
19793: PUSH
19794: LD_INT 46
19796: PUSH
19797: LD_INT 44
19799: PUSH
19800: LD_INT 47
19802: PUSH
19803: LD_INT 45
19805: PUSH
19806: LD_INT 28
19808: PUSH
19809: LD_INT 7
19811: PUSH
19812: LD_INT 27
19814: PUSH
19815: LD_INT 29
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: IN
19830: PUSH
19831: LD_VAR 0 1
19835: PPUSH
19836: LD_INT 52
19838: PPUSH
19839: CALL_OW 321
19843: PUSH
19844: LD_INT 2
19846: EQUAL
19847: AND
19848: IFFALSE 19865
// bpoints := bpoints * 1.2 ;
19850: LD_ADDR_VAR 0 10
19854: PUSH
19855: LD_VAR 0 10
19859: PUSH
19860: LD_REAL  1.20000000000000E+0000
19863: MUL
19864: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
19865: LD_VAR 0 6
19869: PPUSH
19870: CALL_OW 264
19874: PUSH
19875: LD_INT 6
19877: PUSH
19878: LD_INT 46
19880: PUSH
19881: LD_INT 47
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: LIST
19888: IN
19889: IFFALSE 19906
// bpoints := bpoints * 1.2 ;
19891: LD_ADDR_VAR 0 10
19895: PUSH
19896: LD_VAR 0 10
19900: PUSH
19901: LD_REAL  1.20000000000000E+0000
19904: MUL
19905: ST_TO_ADDR
// end ; unit_building :
19906: GO 19920
19908: LD_INT 3
19910: DOUBLE
19911: EQUAL
19912: IFTRUE 19916
19914: GO 19919
19916: POP
// ; end ;
19917: GO 19920
19919: POP
// for j = 1 to 3 do
19920: LD_ADDR_VAR 0 7
19924: PUSH
19925: DOUBLE
19926: LD_INT 1
19928: DEC
19929: ST_TO_ADDR
19930: LD_INT 3
19932: PUSH
19933: FOR_TO
19934: IFFALSE 19987
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
19936: LD_ADDR_VAR 0 5
19940: PUSH
19941: LD_VAR 0 5
19945: PPUSH
19946: LD_VAR 0 7
19950: PPUSH
19951: LD_VAR 0 5
19955: PUSH
19956: LD_VAR 0 7
19960: ARRAY
19961: PUSH
19962: LD_VAR 0 9
19966: PUSH
19967: LD_VAR 0 7
19971: ARRAY
19972: PUSH
19973: LD_VAR 0 10
19977: MUL
19978: PLUS
19979: PPUSH
19980: CALL_OW 1
19984: ST_TO_ADDR
19985: GO 19933
19987: POP
19988: POP
// end ;
19989: GO 18472
19991: POP
19992: POP
// result := Replace ( result , 4 , tmp ) ;
19993: LD_ADDR_VAR 0 5
19997: PUSH
19998: LD_VAR 0 5
20002: PPUSH
20003: LD_INT 4
20005: PPUSH
20006: LD_VAR 0 8
20010: PPUSH
20011: CALL_OW 1
20015: ST_TO_ADDR
// end ;
20016: LD_VAR 0 5
20020: RET
// export function DangerAtRange ( unit , range ) ; begin
20021: LD_INT 0
20023: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
20024: LD_ADDR_VAR 0 3
20028: PUSH
20029: LD_VAR 0 1
20033: PPUSH
20034: CALL_OW 255
20038: PPUSH
20039: LD_VAR 0 1
20043: PPUSH
20044: CALL_OW 250
20048: PPUSH
20049: LD_VAR 0 1
20053: PPUSH
20054: CALL_OW 251
20058: PPUSH
20059: LD_VAR 0 2
20063: PPUSH
20064: CALL 18324 0 4
20068: ST_TO_ADDR
// end ;
20069: LD_VAR 0 3
20073: RET
// export function DangerInArea ( side , area ) ; begin
20074: LD_INT 0
20076: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
20077: LD_ADDR_VAR 0 3
20081: PUSH
20082: LD_VAR 0 2
20086: PPUSH
20087: LD_INT 81
20089: PUSH
20090: LD_VAR 0 1
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PPUSH
20099: CALL_OW 70
20103: ST_TO_ADDR
// end ;
20104: LD_VAR 0 3
20108: RET
// export function IsExtension ( b ) ; begin
20109: LD_INT 0
20111: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
20112: LD_ADDR_VAR 0 2
20116: PUSH
20117: LD_VAR 0 1
20121: PUSH
20122: LD_INT 23
20124: PUSH
20125: LD_INT 20
20127: PUSH
20128: LD_INT 22
20130: PUSH
20131: LD_INT 17
20133: PUSH
20134: LD_INT 24
20136: PUSH
20137: LD_INT 21
20139: PUSH
20140: LD_INT 19
20142: PUSH
20143: LD_INT 16
20145: PUSH
20146: LD_INT 25
20148: PUSH
20149: LD_INT 18
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: IN
20164: ST_TO_ADDR
// end ;
20165: LD_VAR 0 2
20169: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
20170: LD_INT 0
20172: PPUSH
20173: PPUSH
20174: PPUSH
// result := [ ] ;
20175: LD_ADDR_VAR 0 3
20179: PUSH
20180: EMPTY
20181: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
20182: LD_ADDR_VAR 0 4
20186: PUSH
20187: LD_VAR 0 2
20191: PPUSH
20192: LD_INT 21
20194: PUSH
20195: LD_INT 3
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: PPUSH
20202: CALL_OW 70
20206: ST_TO_ADDR
// if not tmp then
20207: LD_VAR 0 4
20211: NOT
20212: IFFALSE 20216
// exit ;
20214: GO 20274
// for i in tmp do
20216: LD_ADDR_VAR 0 5
20220: PUSH
20221: LD_VAR 0 4
20225: PUSH
20226: FOR_IN
20227: IFFALSE 20262
// if GetBase ( i ) <> base then
20229: LD_VAR 0 5
20233: PPUSH
20234: CALL_OW 274
20238: PUSH
20239: LD_VAR 0 1
20243: NONEQUAL
20244: IFFALSE 20260
// ComLinkToBase ( base , i ) ;
20246: LD_VAR 0 1
20250: PPUSH
20251: LD_VAR 0 5
20255: PPUSH
20256: CALL_OW 169
20260: GO 20226
20262: POP
20263: POP
// result := tmp ;
20264: LD_ADDR_VAR 0 3
20268: PUSH
20269: LD_VAR 0 4
20273: ST_TO_ADDR
// end ;
20274: LD_VAR 0 3
20278: RET
// export function ComComplete ( unit , b ) ; var i ; begin
20279: LD_INT 0
20281: PPUSH
20282: PPUSH
// if BuildingStatus ( b ) = bs_build then
20283: LD_VAR 0 2
20287: PPUSH
20288: CALL_OW 461
20292: PUSH
20293: LD_INT 1
20295: EQUAL
20296: IFFALSE 20356
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
20298: LD_VAR 0 1
20302: PPUSH
20303: LD_STRING h
20305: PUSH
20306: LD_VAR 0 2
20310: PPUSH
20311: CALL_OW 250
20315: PUSH
20316: LD_VAR 0 2
20320: PPUSH
20321: CALL_OW 251
20325: PUSH
20326: LD_VAR 0 2
20330: PUSH
20331: LD_INT 0
20333: PUSH
20334: LD_INT 0
20336: PUSH
20337: LD_INT 0
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: PUSH
20349: EMPTY
20350: LIST
20351: PPUSH
20352: CALL_OW 446
// end ;
20356: LD_VAR 0 3
20360: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
20361: LD_INT 0
20363: PPUSH
20364: PPUSH
20365: PPUSH
20366: PPUSH
20367: PPUSH
20368: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
20369: LD_VAR 0 1
20373: NOT
20374: PUSH
20375: LD_VAR 0 1
20379: PPUSH
20380: CALL_OW 263
20384: PUSH
20385: LD_INT 2
20387: EQUAL
20388: NOT
20389: OR
20390: IFFALSE 20394
// exit ;
20392: GO 20710
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
20394: LD_ADDR_VAR 0 6
20398: PUSH
20399: LD_INT 22
20401: PUSH
20402: LD_VAR 0 1
20406: PPUSH
20407: CALL_OW 255
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: PUSH
20416: LD_INT 2
20418: PUSH
20419: LD_INT 30
20421: PUSH
20422: LD_INT 36
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: PUSH
20429: LD_INT 34
20431: PUSH
20432: LD_INT 31
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: LIST
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PPUSH
20448: CALL_OW 69
20452: ST_TO_ADDR
// if not tmp then
20453: LD_VAR 0 6
20457: NOT
20458: IFFALSE 20462
// exit ;
20460: GO 20710
// result := [ ] ;
20462: LD_ADDR_VAR 0 2
20466: PUSH
20467: EMPTY
20468: ST_TO_ADDR
// for i in tmp do
20469: LD_ADDR_VAR 0 3
20473: PUSH
20474: LD_VAR 0 6
20478: PUSH
20479: FOR_IN
20480: IFFALSE 20551
// begin t := UnitsInside ( i ) ;
20482: LD_ADDR_VAR 0 4
20486: PUSH
20487: LD_VAR 0 3
20491: PPUSH
20492: CALL_OW 313
20496: ST_TO_ADDR
// if t then
20497: LD_VAR 0 4
20501: IFFALSE 20549
// for j in t do
20503: LD_ADDR_VAR 0 7
20507: PUSH
20508: LD_VAR 0 4
20512: PUSH
20513: FOR_IN
20514: IFFALSE 20547
// result := Insert ( result , result + 1 , j ) ;
20516: LD_ADDR_VAR 0 2
20520: PUSH
20521: LD_VAR 0 2
20525: PPUSH
20526: LD_VAR 0 2
20530: PUSH
20531: LD_INT 1
20533: PLUS
20534: PPUSH
20535: LD_VAR 0 7
20539: PPUSH
20540: CALL_OW 2
20544: ST_TO_ADDR
20545: GO 20513
20547: POP
20548: POP
// end ;
20549: GO 20479
20551: POP
20552: POP
// if not result then
20553: LD_VAR 0 2
20557: NOT
20558: IFFALSE 20562
// exit ;
20560: GO 20710
// mech := result [ 1 ] ;
20562: LD_ADDR_VAR 0 5
20566: PUSH
20567: LD_VAR 0 2
20571: PUSH
20572: LD_INT 1
20574: ARRAY
20575: ST_TO_ADDR
// if result > 1 then
20576: LD_VAR 0 2
20580: PUSH
20581: LD_INT 1
20583: GREATER
20584: IFFALSE 20696
// for i = 2 to result do
20586: LD_ADDR_VAR 0 3
20590: PUSH
20591: DOUBLE
20592: LD_INT 2
20594: DEC
20595: ST_TO_ADDR
20596: LD_VAR 0 2
20600: PUSH
20601: FOR_TO
20602: IFFALSE 20694
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
20604: LD_ADDR_VAR 0 4
20608: PUSH
20609: LD_VAR 0 2
20613: PUSH
20614: LD_VAR 0 3
20618: ARRAY
20619: PPUSH
20620: LD_INT 3
20622: PPUSH
20623: CALL_OW 259
20627: PUSH
20628: LD_VAR 0 2
20632: PUSH
20633: LD_VAR 0 3
20637: ARRAY
20638: PPUSH
20639: CALL_OW 432
20643: MINUS
20644: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
20645: LD_VAR 0 4
20649: PUSH
20650: LD_VAR 0 5
20654: PPUSH
20655: LD_INT 3
20657: PPUSH
20658: CALL_OW 259
20662: PUSH
20663: LD_VAR 0 5
20667: PPUSH
20668: CALL_OW 432
20672: MINUS
20673: GREATEREQUAL
20674: IFFALSE 20692
// mech := result [ i ] ;
20676: LD_ADDR_VAR 0 5
20680: PUSH
20681: LD_VAR 0 2
20685: PUSH
20686: LD_VAR 0 3
20690: ARRAY
20691: ST_TO_ADDR
// end ;
20692: GO 20601
20694: POP
20695: POP
// ComLinkTo ( vehicle , mech ) ;
20696: LD_VAR 0 1
20700: PPUSH
20701: LD_VAR 0 5
20705: PPUSH
20706: CALL_OW 135
// end ;
20710: LD_VAR 0 2
20714: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
20715: LD_INT 0
20717: PPUSH
20718: PPUSH
20719: PPUSH
20720: PPUSH
20721: PPUSH
20722: PPUSH
20723: PPUSH
20724: PPUSH
20725: PPUSH
20726: PPUSH
20727: PPUSH
20728: PPUSH
20729: PPUSH
// result := [ ] ;
20730: LD_ADDR_VAR 0 7
20734: PUSH
20735: EMPTY
20736: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
20737: LD_VAR 0 1
20741: PPUSH
20742: CALL_OW 266
20746: PUSH
20747: LD_INT 0
20749: PUSH
20750: LD_INT 1
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: IN
20757: NOT
20758: IFFALSE 20762
// exit ;
20760: GO 22393
// if name then
20762: LD_VAR 0 3
20766: IFFALSE 20782
// SetBName ( base_dep , name ) ;
20768: LD_VAR 0 1
20772: PPUSH
20773: LD_VAR 0 3
20777: PPUSH
20778: CALL_OW 500
// base := GetBase ( base_dep ) ;
20782: LD_ADDR_VAR 0 15
20786: PUSH
20787: LD_VAR 0 1
20791: PPUSH
20792: CALL_OW 274
20796: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
20797: LD_ADDR_VAR 0 16
20801: PUSH
20802: LD_VAR 0 1
20806: PPUSH
20807: CALL_OW 255
20811: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
20812: LD_ADDR_VAR 0 17
20816: PUSH
20817: LD_VAR 0 1
20821: PPUSH
20822: CALL_OW 248
20826: ST_TO_ADDR
// if sources then
20827: LD_VAR 0 5
20831: IFFALSE 20878
// for i = 1 to 3 do
20833: LD_ADDR_VAR 0 8
20837: PUSH
20838: DOUBLE
20839: LD_INT 1
20841: DEC
20842: ST_TO_ADDR
20843: LD_INT 3
20845: PUSH
20846: FOR_TO
20847: IFFALSE 20876
// AddResourceType ( base , i , sources [ i ] ) ;
20849: LD_VAR 0 15
20853: PPUSH
20854: LD_VAR 0 8
20858: PPUSH
20859: LD_VAR 0 5
20863: PUSH
20864: LD_VAR 0 8
20868: ARRAY
20869: PPUSH
20870: CALL_OW 276
20874: GO 20846
20876: POP
20877: POP
// buildings := GetBaseBuildings ( base , area ) ;
20878: LD_ADDR_VAR 0 18
20882: PUSH
20883: LD_VAR 0 15
20887: PPUSH
20888: LD_VAR 0 2
20892: PPUSH
20893: CALL 20170 0 2
20897: ST_TO_ADDR
// InitHc ;
20898: CALL_OW 19
// InitUc ;
20902: CALL_OW 18
// uc_side := side ;
20906: LD_ADDR_OWVAR 20
20910: PUSH
20911: LD_VAR 0 16
20915: ST_TO_ADDR
// uc_nation := nation ;
20916: LD_ADDR_OWVAR 21
20920: PUSH
20921: LD_VAR 0 17
20925: ST_TO_ADDR
// if buildings then
20926: LD_VAR 0 18
20930: IFFALSE 22252
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
20932: LD_ADDR_VAR 0 19
20936: PUSH
20937: LD_VAR 0 18
20941: PPUSH
20942: LD_INT 2
20944: PUSH
20945: LD_INT 30
20947: PUSH
20948: LD_INT 29
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: PUSH
20955: LD_INT 30
20957: PUSH
20958: LD_INT 30
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: LIST
20969: PPUSH
20970: CALL_OW 72
20974: ST_TO_ADDR
// if tmp then
20975: LD_VAR 0 19
20979: IFFALSE 21027
// for i in tmp do
20981: LD_ADDR_VAR 0 8
20985: PUSH
20986: LD_VAR 0 19
20990: PUSH
20991: FOR_IN
20992: IFFALSE 21025
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
20994: LD_VAR 0 8
20998: PPUSH
20999: CALL_OW 250
21003: PPUSH
21004: LD_VAR 0 8
21008: PPUSH
21009: CALL_OW 251
21013: PPUSH
21014: LD_VAR 0 16
21018: PPUSH
21019: CALL_OW 441
21023: GO 20991
21025: POP
21026: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
21027: LD_VAR 0 18
21031: PPUSH
21032: LD_INT 2
21034: PUSH
21035: LD_INT 30
21037: PUSH
21038: LD_INT 32
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: PUSH
21045: LD_INT 30
21047: PUSH
21048: LD_INT 33
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: LIST
21059: PPUSH
21060: CALL_OW 72
21064: IFFALSE 21152
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
21066: LD_ADDR_VAR 0 8
21070: PUSH
21071: LD_VAR 0 18
21075: PPUSH
21076: LD_INT 2
21078: PUSH
21079: LD_INT 30
21081: PUSH
21082: LD_INT 32
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: PUSH
21089: LD_INT 30
21091: PUSH
21092: LD_INT 33
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: LIST
21103: PPUSH
21104: CALL_OW 72
21108: PUSH
21109: FOR_IN
21110: IFFALSE 21150
// begin if not GetBWeapon ( i ) then
21112: LD_VAR 0 8
21116: PPUSH
21117: CALL_OW 269
21121: NOT
21122: IFFALSE 21148
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
21124: LD_VAR 0 8
21128: PPUSH
21129: LD_VAR 0 8
21133: PPUSH
21134: LD_VAR 0 2
21138: PPUSH
21139: CALL 22398 0 2
21143: PPUSH
21144: CALL_OW 431
// end ;
21148: GO 21109
21150: POP
21151: POP
// end ; for i = 1 to personel do
21152: LD_ADDR_VAR 0 8
21156: PUSH
21157: DOUBLE
21158: LD_INT 1
21160: DEC
21161: ST_TO_ADDR
21162: LD_VAR 0 6
21166: PUSH
21167: FOR_TO
21168: IFFALSE 22232
// begin if i > 4 then
21170: LD_VAR 0 8
21174: PUSH
21175: LD_INT 4
21177: GREATER
21178: IFFALSE 21182
// break ;
21180: GO 22232
// case i of 1 :
21182: LD_VAR 0 8
21186: PUSH
21187: LD_INT 1
21189: DOUBLE
21190: EQUAL
21191: IFTRUE 21195
21193: GO 21275
21195: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
21196: LD_ADDR_VAR 0 12
21200: PUSH
21201: LD_VAR 0 18
21205: PPUSH
21206: LD_INT 22
21208: PUSH
21209: LD_VAR 0 16
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: PUSH
21218: LD_INT 58
21220: PUSH
21221: EMPTY
21222: LIST
21223: PUSH
21224: LD_INT 2
21226: PUSH
21227: LD_INT 30
21229: PUSH
21230: LD_INT 32
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: LD_INT 30
21239: PUSH
21240: LD_INT 4
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: PUSH
21247: LD_INT 30
21249: PUSH
21250: LD_INT 5
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: PUSH
21257: EMPTY
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: LIST
21267: PPUSH
21268: CALL_OW 72
21272: ST_TO_ADDR
21273: GO 21497
21275: LD_INT 2
21277: DOUBLE
21278: EQUAL
21279: IFTRUE 21283
21281: GO 21345
21283: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
21284: LD_ADDR_VAR 0 12
21288: PUSH
21289: LD_VAR 0 18
21293: PPUSH
21294: LD_INT 22
21296: PUSH
21297: LD_VAR 0 16
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: LD_INT 2
21308: PUSH
21309: LD_INT 30
21311: PUSH
21312: LD_INT 0
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: PUSH
21319: LD_INT 30
21321: PUSH
21322: LD_INT 1
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: LIST
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PPUSH
21338: CALL_OW 72
21342: ST_TO_ADDR
21343: GO 21497
21345: LD_INT 3
21347: DOUBLE
21348: EQUAL
21349: IFTRUE 21353
21351: GO 21415
21353: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
21354: LD_ADDR_VAR 0 12
21358: PUSH
21359: LD_VAR 0 18
21363: PPUSH
21364: LD_INT 22
21366: PUSH
21367: LD_VAR 0 16
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: PUSH
21376: LD_INT 2
21378: PUSH
21379: LD_INT 30
21381: PUSH
21382: LD_INT 2
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: LD_INT 30
21391: PUSH
21392: LD_INT 3
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: LIST
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PPUSH
21408: CALL_OW 72
21412: ST_TO_ADDR
21413: GO 21497
21415: LD_INT 4
21417: DOUBLE
21418: EQUAL
21419: IFTRUE 21423
21421: GO 21496
21423: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
21424: LD_ADDR_VAR 0 12
21428: PUSH
21429: LD_VAR 0 18
21433: PPUSH
21434: LD_INT 22
21436: PUSH
21437: LD_VAR 0 16
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PUSH
21446: LD_INT 2
21448: PUSH
21449: LD_INT 30
21451: PUSH
21452: LD_INT 6
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PUSH
21459: LD_INT 30
21461: PUSH
21462: LD_INT 7
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 30
21471: PUSH
21472: LD_INT 8
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PPUSH
21489: CALL_OW 72
21493: ST_TO_ADDR
21494: GO 21497
21496: POP
// if i = 1 then
21497: LD_VAR 0 8
21501: PUSH
21502: LD_INT 1
21504: EQUAL
21505: IFFALSE 21616
// begin tmp := [ ] ;
21507: LD_ADDR_VAR 0 19
21511: PUSH
21512: EMPTY
21513: ST_TO_ADDR
// for j in f do
21514: LD_ADDR_VAR 0 9
21518: PUSH
21519: LD_VAR 0 12
21523: PUSH
21524: FOR_IN
21525: IFFALSE 21598
// if GetBType ( j ) = b_bunker then
21527: LD_VAR 0 9
21531: PPUSH
21532: CALL_OW 266
21536: PUSH
21537: LD_INT 32
21539: EQUAL
21540: IFFALSE 21567
// tmp := Insert ( tmp , 1 , j ) else
21542: LD_ADDR_VAR 0 19
21546: PUSH
21547: LD_VAR 0 19
21551: PPUSH
21552: LD_INT 1
21554: PPUSH
21555: LD_VAR 0 9
21559: PPUSH
21560: CALL_OW 2
21564: ST_TO_ADDR
21565: GO 21596
// tmp := Insert ( tmp , tmp + 1 , j ) ;
21567: LD_ADDR_VAR 0 19
21571: PUSH
21572: LD_VAR 0 19
21576: PPUSH
21577: LD_VAR 0 19
21581: PUSH
21582: LD_INT 1
21584: PLUS
21585: PPUSH
21586: LD_VAR 0 9
21590: PPUSH
21591: CALL_OW 2
21595: ST_TO_ADDR
21596: GO 21524
21598: POP
21599: POP
// if tmp then
21600: LD_VAR 0 19
21604: IFFALSE 21616
// f := tmp ;
21606: LD_ADDR_VAR 0 12
21610: PUSH
21611: LD_VAR 0 19
21615: ST_TO_ADDR
// end ; x := personel [ i ] ;
21616: LD_ADDR_VAR 0 13
21620: PUSH
21621: LD_VAR 0 6
21625: PUSH
21626: LD_VAR 0 8
21630: ARRAY
21631: ST_TO_ADDR
// if x = - 1 then
21632: LD_VAR 0 13
21636: PUSH
21637: LD_INT 1
21639: NEG
21640: EQUAL
21641: IFFALSE 21850
// begin for j in f do
21643: LD_ADDR_VAR 0 9
21647: PUSH
21648: LD_VAR 0 12
21652: PUSH
21653: FOR_IN
21654: IFFALSE 21846
// repeat InitHc ;
21656: CALL_OW 19
// if GetBType ( j ) = b_barracks then
21660: LD_VAR 0 9
21664: PPUSH
21665: CALL_OW 266
21669: PUSH
21670: LD_INT 5
21672: EQUAL
21673: IFFALSE 21743
// begin if UnitsInside ( j ) < 3 then
21675: LD_VAR 0 9
21679: PPUSH
21680: CALL_OW 313
21684: PUSH
21685: LD_INT 3
21687: LESS
21688: IFFALSE 21724
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21690: LD_INT 0
21692: PPUSH
21693: LD_INT 5
21695: PUSH
21696: LD_INT 8
21698: PUSH
21699: LD_INT 9
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: LIST
21706: PUSH
21707: LD_VAR 0 17
21711: ARRAY
21712: PPUSH
21713: LD_VAR 0 4
21717: PPUSH
21718: CALL_OW 380
21722: GO 21741
// PrepareHuman ( false , i , skill ) ;
21724: LD_INT 0
21726: PPUSH
21727: LD_VAR 0 8
21731: PPUSH
21732: LD_VAR 0 4
21736: PPUSH
21737: CALL_OW 380
// end else
21741: GO 21760
// PrepareHuman ( false , i , skill ) ;
21743: LD_INT 0
21745: PPUSH
21746: LD_VAR 0 8
21750: PPUSH
21751: LD_VAR 0 4
21755: PPUSH
21756: CALL_OW 380
// un := CreateHuman ;
21760: LD_ADDR_VAR 0 14
21764: PUSH
21765: CALL_OW 44
21769: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21770: LD_ADDR_VAR 0 7
21774: PUSH
21775: LD_VAR 0 7
21779: PPUSH
21780: LD_INT 1
21782: PPUSH
21783: LD_VAR 0 14
21787: PPUSH
21788: CALL_OW 2
21792: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
21793: LD_VAR 0 14
21797: PPUSH
21798: LD_VAR 0 9
21802: PPUSH
21803: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
21807: LD_VAR 0 9
21811: PPUSH
21812: CALL_OW 313
21816: PUSH
21817: LD_INT 6
21819: EQUAL
21820: PUSH
21821: LD_VAR 0 9
21825: PPUSH
21826: CALL_OW 266
21830: PUSH
21831: LD_INT 32
21833: PUSH
21834: LD_INT 31
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: IN
21841: OR
21842: IFFALSE 21656
21844: GO 21653
21846: POP
21847: POP
// end else
21848: GO 22230
// for j = 1 to x do
21850: LD_ADDR_VAR 0 9
21854: PUSH
21855: DOUBLE
21856: LD_INT 1
21858: DEC
21859: ST_TO_ADDR
21860: LD_VAR 0 13
21864: PUSH
21865: FOR_TO
21866: IFFALSE 22228
// begin InitHc ;
21868: CALL_OW 19
// if not f then
21872: LD_VAR 0 12
21876: NOT
21877: IFFALSE 21966
// begin PrepareHuman ( false , i , skill ) ;
21879: LD_INT 0
21881: PPUSH
21882: LD_VAR 0 8
21886: PPUSH
21887: LD_VAR 0 4
21891: PPUSH
21892: CALL_OW 380
// un := CreateHuman ;
21896: LD_ADDR_VAR 0 14
21900: PUSH
21901: CALL_OW 44
21905: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21906: LD_ADDR_VAR 0 7
21910: PUSH
21911: LD_VAR 0 7
21915: PPUSH
21916: LD_INT 1
21918: PPUSH
21919: LD_VAR 0 14
21923: PPUSH
21924: CALL_OW 2
21928: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21929: LD_VAR 0 14
21933: PPUSH
21934: LD_VAR 0 1
21938: PPUSH
21939: CALL_OW 250
21943: PPUSH
21944: LD_VAR 0 1
21948: PPUSH
21949: CALL_OW 251
21953: PPUSH
21954: LD_INT 10
21956: PPUSH
21957: LD_INT 0
21959: PPUSH
21960: CALL_OW 50
// continue ;
21964: GO 21865
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
21966: LD_VAR 0 12
21970: PUSH
21971: LD_INT 1
21973: ARRAY
21974: PPUSH
21975: CALL_OW 313
21979: PUSH
21980: LD_VAR 0 12
21984: PUSH
21985: LD_INT 1
21987: ARRAY
21988: PPUSH
21989: CALL_OW 266
21993: PUSH
21994: LD_INT 32
21996: PUSH
21997: LD_INT 31
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: IN
22004: AND
22005: PUSH
22006: LD_VAR 0 12
22010: PUSH
22011: LD_INT 1
22013: ARRAY
22014: PPUSH
22015: CALL_OW 313
22019: PUSH
22020: LD_INT 6
22022: EQUAL
22023: OR
22024: IFFALSE 22044
// f := Delete ( f , 1 ) ;
22026: LD_ADDR_VAR 0 12
22030: PUSH
22031: LD_VAR 0 12
22035: PPUSH
22036: LD_INT 1
22038: PPUSH
22039: CALL_OW 3
22043: ST_TO_ADDR
// if not f then
22044: LD_VAR 0 12
22048: NOT
22049: IFFALSE 22067
// begin x := x + 2 ;
22051: LD_ADDR_VAR 0 13
22055: PUSH
22056: LD_VAR 0 13
22060: PUSH
22061: LD_INT 2
22063: PLUS
22064: ST_TO_ADDR
// continue ;
22065: GO 21865
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
22067: LD_VAR 0 12
22071: PUSH
22072: LD_INT 1
22074: ARRAY
22075: PPUSH
22076: CALL_OW 266
22080: PUSH
22081: LD_INT 5
22083: EQUAL
22084: IFFALSE 22158
// begin if UnitsInside ( f [ 1 ] ) < 3 then
22086: LD_VAR 0 12
22090: PUSH
22091: LD_INT 1
22093: ARRAY
22094: PPUSH
22095: CALL_OW 313
22099: PUSH
22100: LD_INT 3
22102: LESS
22103: IFFALSE 22139
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22105: LD_INT 0
22107: PPUSH
22108: LD_INT 5
22110: PUSH
22111: LD_INT 8
22113: PUSH
22114: LD_INT 9
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: LIST
22121: PUSH
22122: LD_VAR 0 17
22126: ARRAY
22127: PPUSH
22128: LD_VAR 0 4
22132: PPUSH
22133: CALL_OW 380
22137: GO 22156
// PrepareHuman ( false , i , skill ) ;
22139: LD_INT 0
22141: PPUSH
22142: LD_VAR 0 8
22146: PPUSH
22147: LD_VAR 0 4
22151: PPUSH
22152: CALL_OW 380
// end else
22156: GO 22175
// PrepareHuman ( false , i , skill ) ;
22158: LD_INT 0
22160: PPUSH
22161: LD_VAR 0 8
22165: PPUSH
22166: LD_VAR 0 4
22170: PPUSH
22171: CALL_OW 380
// un := CreateHuman ;
22175: LD_ADDR_VAR 0 14
22179: PUSH
22180: CALL_OW 44
22184: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22185: LD_ADDR_VAR 0 7
22189: PUSH
22190: LD_VAR 0 7
22194: PPUSH
22195: LD_INT 1
22197: PPUSH
22198: LD_VAR 0 14
22202: PPUSH
22203: CALL_OW 2
22207: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
22208: LD_VAR 0 14
22212: PPUSH
22213: LD_VAR 0 12
22217: PUSH
22218: LD_INT 1
22220: ARRAY
22221: PPUSH
22222: CALL_OW 52
// end ;
22226: GO 21865
22228: POP
22229: POP
// end ;
22230: GO 21167
22232: POP
22233: POP
// result := result ^ buildings ;
22234: LD_ADDR_VAR 0 7
22238: PUSH
22239: LD_VAR 0 7
22243: PUSH
22244: LD_VAR 0 18
22248: ADD
22249: ST_TO_ADDR
// end else
22250: GO 22393
// begin for i = 1 to personel do
22252: LD_ADDR_VAR 0 8
22256: PUSH
22257: DOUBLE
22258: LD_INT 1
22260: DEC
22261: ST_TO_ADDR
22262: LD_VAR 0 6
22266: PUSH
22267: FOR_TO
22268: IFFALSE 22391
// begin if i > 4 then
22270: LD_VAR 0 8
22274: PUSH
22275: LD_INT 4
22277: GREATER
22278: IFFALSE 22282
// break ;
22280: GO 22391
// x := personel [ i ] ;
22282: LD_ADDR_VAR 0 13
22286: PUSH
22287: LD_VAR 0 6
22291: PUSH
22292: LD_VAR 0 8
22296: ARRAY
22297: ST_TO_ADDR
// if x = - 1 then
22298: LD_VAR 0 13
22302: PUSH
22303: LD_INT 1
22305: NEG
22306: EQUAL
22307: IFFALSE 22311
// continue ;
22309: GO 22267
// PrepareHuman ( false , i , skill ) ;
22311: LD_INT 0
22313: PPUSH
22314: LD_VAR 0 8
22318: PPUSH
22319: LD_VAR 0 4
22323: PPUSH
22324: CALL_OW 380
// un := CreateHuman ;
22328: LD_ADDR_VAR 0 14
22332: PUSH
22333: CALL_OW 44
22337: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22338: LD_VAR 0 14
22342: PPUSH
22343: LD_VAR 0 1
22347: PPUSH
22348: CALL_OW 250
22352: PPUSH
22353: LD_VAR 0 1
22357: PPUSH
22358: CALL_OW 251
22362: PPUSH
22363: LD_INT 10
22365: PPUSH
22366: LD_INT 0
22368: PPUSH
22369: CALL_OW 50
// result := result ^ un ;
22373: LD_ADDR_VAR 0 7
22377: PUSH
22378: LD_VAR 0 7
22382: PUSH
22383: LD_VAR 0 14
22387: ADD
22388: ST_TO_ADDR
// end ;
22389: GO 22267
22391: POP
22392: POP
// end ; end ;
22393: LD_VAR 0 7
22397: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
22398: LD_INT 0
22400: PPUSH
22401: PPUSH
22402: PPUSH
22403: PPUSH
22404: PPUSH
22405: PPUSH
22406: PPUSH
22407: PPUSH
22408: PPUSH
22409: PPUSH
22410: PPUSH
22411: PPUSH
22412: PPUSH
22413: PPUSH
22414: PPUSH
22415: PPUSH
// result := false ;
22416: LD_ADDR_VAR 0 3
22420: PUSH
22421: LD_INT 0
22423: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
22424: LD_VAR 0 1
22428: NOT
22429: PUSH
22430: LD_VAR 0 1
22434: PPUSH
22435: CALL_OW 266
22439: PUSH
22440: LD_INT 32
22442: PUSH
22443: LD_INT 33
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: IN
22450: NOT
22451: OR
22452: IFFALSE 22456
// exit ;
22454: GO 23592
// nat := GetNation ( tower ) ;
22456: LD_ADDR_VAR 0 12
22460: PUSH
22461: LD_VAR 0 1
22465: PPUSH
22466: CALL_OW 248
22470: ST_TO_ADDR
// side := GetSide ( tower ) ;
22471: LD_ADDR_VAR 0 16
22475: PUSH
22476: LD_VAR 0 1
22480: PPUSH
22481: CALL_OW 255
22485: ST_TO_ADDR
// x := GetX ( tower ) ;
22486: LD_ADDR_VAR 0 10
22490: PUSH
22491: LD_VAR 0 1
22495: PPUSH
22496: CALL_OW 250
22500: ST_TO_ADDR
// y := GetY ( tower ) ;
22501: LD_ADDR_VAR 0 11
22505: PUSH
22506: LD_VAR 0 1
22510: PPUSH
22511: CALL_OW 251
22515: ST_TO_ADDR
// if not x or not y then
22516: LD_VAR 0 10
22520: NOT
22521: PUSH
22522: LD_VAR 0 11
22526: NOT
22527: OR
22528: IFFALSE 22532
// exit ;
22530: GO 23592
// weapon := 0 ;
22532: LD_ADDR_VAR 0 18
22536: PUSH
22537: LD_INT 0
22539: ST_TO_ADDR
// fac_list := [ ] ;
22540: LD_ADDR_VAR 0 17
22544: PUSH
22545: EMPTY
22546: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
22547: LD_ADDR_VAR 0 6
22551: PUSH
22552: LD_VAR 0 1
22556: PPUSH
22557: CALL_OW 274
22561: PPUSH
22562: LD_VAR 0 2
22566: PPUSH
22567: CALL 20170 0 2
22571: PPUSH
22572: LD_INT 30
22574: PUSH
22575: LD_INT 3
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PPUSH
22582: CALL_OW 72
22586: ST_TO_ADDR
// if not factories then
22587: LD_VAR 0 6
22591: NOT
22592: IFFALSE 22596
// exit ;
22594: GO 23592
// for i in factories do
22596: LD_ADDR_VAR 0 8
22600: PUSH
22601: LD_VAR 0 6
22605: PUSH
22606: FOR_IN
22607: IFFALSE 22632
// fac_list := fac_list union AvailableWeaponList ( i ) ;
22609: LD_ADDR_VAR 0 17
22613: PUSH
22614: LD_VAR 0 17
22618: PUSH
22619: LD_VAR 0 8
22623: PPUSH
22624: CALL_OW 478
22628: UNION
22629: ST_TO_ADDR
22630: GO 22606
22632: POP
22633: POP
// if not fac_list then
22634: LD_VAR 0 17
22638: NOT
22639: IFFALSE 22643
// exit ;
22641: GO 23592
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
22643: LD_ADDR_VAR 0 5
22647: PUSH
22648: LD_INT 4
22650: PUSH
22651: LD_INT 5
22653: PUSH
22654: LD_INT 9
22656: PUSH
22657: LD_INT 10
22659: PUSH
22660: LD_INT 6
22662: PUSH
22663: LD_INT 7
22665: PUSH
22666: LD_INT 11
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: PUSH
22678: LD_INT 27
22680: PUSH
22681: LD_INT 28
22683: PUSH
22684: LD_INT 26
22686: PUSH
22687: LD_INT 30
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: PUSH
22696: LD_INT 43
22698: PUSH
22699: LD_INT 44
22701: PUSH
22702: LD_INT 46
22704: PUSH
22705: LD_INT 45
22707: PUSH
22708: LD_INT 47
22710: PUSH
22711: LD_INT 49
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: LIST
22726: PUSH
22727: LD_VAR 0 12
22731: ARRAY
22732: ST_TO_ADDR
// for i in list do
22733: LD_ADDR_VAR 0 8
22737: PUSH
22738: LD_VAR 0 5
22742: PUSH
22743: FOR_IN
22744: IFFALSE 22777
// if not i in fac_list then
22746: LD_VAR 0 8
22750: PUSH
22751: LD_VAR 0 17
22755: IN
22756: NOT
22757: IFFALSE 22775
// list := list diff i ;
22759: LD_ADDR_VAR 0 5
22763: PUSH
22764: LD_VAR 0 5
22768: PUSH
22769: LD_VAR 0 8
22773: DIFF
22774: ST_TO_ADDR
22775: GO 22743
22777: POP
22778: POP
// if not list then
22779: LD_VAR 0 5
22783: NOT
22784: IFFALSE 22788
// exit ;
22786: GO 23592
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
22788: LD_VAR 0 12
22792: PUSH
22793: LD_INT 3
22795: EQUAL
22796: PUSH
22797: LD_INT 49
22799: PUSH
22800: LD_VAR 0 5
22804: IN
22805: AND
22806: PUSH
22807: LD_INT 31
22809: PPUSH
22810: LD_VAR 0 16
22814: PPUSH
22815: CALL_OW 321
22819: PUSH
22820: LD_INT 2
22822: EQUAL
22823: AND
22824: IFFALSE 22884
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
22826: LD_INT 22
22828: PUSH
22829: LD_VAR 0 16
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 35
22840: PUSH
22841: LD_INT 49
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: PUSH
22848: LD_INT 91
22850: PUSH
22851: LD_VAR 0 1
22855: PUSH
22856: LD_INT 10
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: LIST
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: LIST
22868: PPUSH
22869: CALL_OW 69
22873: NOT
22874: IFFALSE 22884
// weapon := ru_time_lapser ;
22876: LD_ADDR_VAR 0 18
22880: PUSH
22881: LD_INT 49
22883: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
22884: LD_VAR 0 12
22888: PUSH
22889: LD_INT 1
22891: PUSH
22892: LD_INT 2
22894: PUSH
22895: EMPTY
22896: LIST
22897: LIST
22898: IN
22899: PUSH
22900: LD_INT 11
22902: PUSH
22903: LD_VAR 0 5
22907: IN
22908: PUSH
22909: LD_INT 30
22911: PUSH
22912: LD_VAR 0 5
22916: IN
22917: OR
22918: AND
22919: PUSH
22920: LD_INT 6
22922: PPUSH
22923: LD_VAR 0 16
22927: PPUSH
22928: CALL_OW 321
22932: PUSH
22933: LD_INT 2
22935: EQUAL
22936: AND
22937: IFFALSE 23102
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
22939: LD_INT 22
22941: PUSH
22942: LD_VAR 0 16
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: PUSH
22951: LD_INT 2
22953: PUSH
22954: LD_INT 35
22956: PUSH
22957: LD_INT 11
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: PUSH
22964: LD_INT 35
22966: PUSH
22967: LD_INT 30
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 91
22981: PUSH
22982: LD_VAR 0 1
22986: PUSH
22987: LD_INT 18
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: LIST
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: LIST
22999: PPUSH
23000: CALL_OW 69
23004: NOT
23005: PUSH
23006: LD_INT 22
23008: PUSH
23009: LD_VAR 0 16
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: LD_INT 2
23020: PUSH
23021: LD_INT 30
23023: PUSH
23024: LD_INT 32
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PUSH
23031: LD_INT 30
23033: PUSH
23034: LD_INT 33
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: LIST
23045: PUSH
23046: LD_INT 91
23048: PUSH
23049: LD_VAR 0 1
23053: PUSH
23054: LD_INT 12
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: LIST
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: LIST
23066: PUSH
23067: EMPTY
23068: LIST
23069: PPUSH
23070: CALL_OW 69
23074: PUSH
23075: LD_INT 2
23077: GREATER
23078: AND
23079: IFFALSE 23102
// weapon := [ us_radar , ar_radar ] [ nat ] ;
23081: LD_ADDR_VAR 0 18
23085: PUSH
23086: LD_INT 11
23088: PUSH
23089: LD_INT 30
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PUSH
23096: LD_VAR 0 12
23100: ARRAY
23101: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
23102: LD_VAR 0 18
23106: NOT
23107: PUSH
23108: LD_INT 40
23110: PPUSH
23111: LD_VAR 0 16
23115: PPUSH
23116: CALL_OW 321
23120: PUSH
23121: LD_INT 2
23123: EQUAL
23124: AND
23125: PUSH
23126: LD_INT 7
23128: PUSH
23129: LD_VAR 0 5
23133: IN
23134: PUSH
23135: LD_INT 28
23137: PUSH
23138: LD_VAR 0 5
23142: IN
23143: OR
23144: PUSH
23145: LD_INT 45
23147: PUSH
23148: LD_VAR 0 5
23152: IN
23153: OR
23154: AND
23155: IFFALSE 23409
// begin hex := GetHexInfo ( x , y ) ;
23157: LD_ADDR_VAR 0 4
23161: PUSH
23162: LD_VAR 0 10
23166: PPUSH
23167: LD_VAR 0 11
23171: PPUSH
23172: CALL_OW 546
23176: ST_TO_ADDR
// if hex [ 1 ] then
23177: LD_VAR 0 4
23181: PUSH
23182: LD_INT 1
23184: ARRAY
23185: IFFALSE 23189
// exit ;
23187: GO 23592
// height := hex [ 2 ] ;
23189: LD_ADDR_VAR 0 15
23193: PUSH
23194: LD_VAR 0 4
23198: PUSH
23199: LD_INT 2
23201: ARRAY
23202: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
23203: LD_ADDR_VAR 0 14
23207: PUSH
23208: LD_INT 0
23210: PUSH
23211: LD_INT 2
23213: PUSH
23214: LD_INT 3
23216: PUSH
23217: LD_INT 5
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: ST_TO_ADDR
// for i in tmp do
23226: LD_ADDR_VAR 0 8
23230: PUSH
23231: LD_VAR 0 14
23235: PUSH
23236: FOR_IN
23237: IFFALSE 23407
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
23239: LD_ADDR_VAR 0 9
23243: PUSH
23244: LD_VAR 0 10
23248: PPUSH
23249: LD_VAR 0 8
23253: PPUSH
23254: LD_INT 5
23256: PPUSH
23257: CALL_OW 272
23261: PUSH
23262: LD_VAR 0 11
23266: PPUSH
23267: LD_VAR 0 8
23271: PPUSH
23272: LD_INT 5
23274: PPUSH
23275: CALL_OW 273
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
23284: LD_VAR 0 9
23288: PUSH
23289: LD_INT 1
23291: ARRAY
23292: PPUSH
23293: LD_VAR 0 9
23297: PUSH
23298: LD_INT 2
23300: ARRAY
23301: PPUSH
23302: CALL_OW 488
23306: IFFALSE 23405
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
23308: LD_ADDR_VAR 0 4
23312: PUSH
23313: LD_VAR 0 9
23317: PUSH
23318: LD_INT 1
23320: ARRAY
23321: PPUSH
23322: LD_VAR 0 9
23326: PUSH
23327: LD_INT 2
23329: ARRAY
23330: PPUSH
23331: CALL_OW 546
23335: ST_TO_ADDR
// if hex [ 1 ] then
23336: LD_VAR 0 4
23340: PUSH
23341: LD_INT 1
23343: ARRAY
23344: IFFALSE 23348
// continue ;
23346: GO 23236
// h := hex [ 2 ] ;
23348: LD_ADDR_VAR 0 13
23352: PUSH
23353: LD_VAR 0 4
23357: PUSH
23358: LD_INT 2
23360: ARRAY
23361: ST_TO_ADDR
// if h + 7 < height then
23362: LD_VAR 0 13
23366: PUSH
23367: LD_INT 7
23369: PLUS
23370: PUSH
23371: LD_VAR 0 15
23375: LESS
23376: IFFALSE 23405
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
23378: LD_ADDR_VAR 0 18
23382: PUSH
23383: LD_INT 7
23385: PUSH
23386: LD_INT 28
23388: PUSH
23389: LD_INT 45
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: LIST
23396: PUSH
23397: LD_VAR 0 12
23401: ARRAY
23402: ST_TO_ADDR
// break ;
23403: GO 23407
// end ; end ; end ;
23405: GO 23236
23407: POP
23408: POP
// end ; if not weapon then
23409: LD_VAR 0 18
23413: NOT
23414: IFFALSE 23474
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
23416: LD_ADDR_VAR 0 5
23420: PUSH
23421: LD_VAR 0 5
23425: PUSH
23426: LD_INT 11
23428: PUSH
23429: LD_INT 30
23431: PUSH
23432: LD_INT 49
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: LIST
23439: DIFF
23440: ST_TO_ADDR
// if not list then
23441: LD_VAR 0 5
23445: NOT
23446: IFFALSE 23450
// exit ;
23448: GO 23592
// weapon := list [ rand ( 1 , list ) ] ;
23450: LD_ADDR_VAR 0 18
23454: PUSH
23455: LD_VAR 0 5
23459: PUSH
23460: LD_INT 1
23462: PPUSH
23463: LD_VAR 0 5
23467: PPUSH
23468: CALL_OW 12
23472: ARRAY
23473: ST_TO_ADDR
// end ; if weapon then
23474: LD_VAR 0 18
23478: IFFALSE 23592
// begin tmp := CostOfWeapon ( weapon ) ;
23480: LD_ADDR_VAR 0 14
23484: PUSH
23485: LD_VAR 0 18
23489: PPUSH
23490: CALL_OW 451
23494: ST_TO_ADDR
// j := GetBase ( tower ) ;
23495: LD_ADDR_VAR 0 9
23499: PUSH
23500: LD_VAR 0 1
23504: PPUSH
23505: CALL_OW 274
23509: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
23510: LD_VAR 0 9
23514: PPUSH
23515: LD_INT 1
23517: PPUSH
23518: CALL_OW 275
23522: PUSH
23523: LD_VAR 0 14
23527: PUSH
23528: LD_INT 1
23530: ARRAY
23531: GREATEREQUAL
23532: PUSH
23533: LD_VAR 0 9
23537: PPUSH
23538: LD_INT 2
23540: PPUSH
23541: CALL_OW 275
23545: PUSH
23546: LD_VAR 0 14
23550: PUSH
23551: LD_INT 2
23553: ARRAY
23554: GREATEREQUAL
23555: AND
23556: PUSH
23557: LD_VAR 0 9
23561: PPUSH
23562: LD_INT 3
23564: PPUSH
23565: CALL_OW 275
23569: PUSH
23570: LD_VAR 0 14
23574: PUSH
23575: LD_INT 3
23577: ARRAY
23578: GREATEREQUAL
23579: AND
23580: IFFALSE 23592
// result := weapon ;
23582: LD_ADDR_VAR 0 3
23586: PUSH
23587: LD_VAR 0 18
23591: ST_TO_ADDR
// end ; end ;
23592: LD_VAR 0 3
23596: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
23597: LD_INT 0
23599: PPUSH
23600: PPUSH
// result := true ;
23601: LD_ADDR_VAR 0 3
23605: PUSH
23606: LD_INT 1
23608: ST_TO_ADDR
// if array1 = array2 then
23609: LD_VAR 0 1
23613: PUSH
23614: LD_VAR 0 2
23618: EQUAL
23619: IFFALSE 23679
// begin for i = 1 to array1 do
23621: LD_ADDR_VAR 0 4
23625: PUSH
23626: DOUBLE
23627: LD_INT 1
23629: DEC
23630: ST_TO_ADDR
23631: LD_VAR 0 1
23635: PUSH
23636: FOR_TO
23637: IFFALSE 23675
// if array1 [ i ] <> array2 [ i ] then
23639: LD_VAR 0 1
23643: PUSH
23644: LD_VAR 0 4
23648: ARRAY
23649: PUSH
23650: LD_VAR 0 2
23654: PUSH
23655: LD_VAR 0 4
23659: ARRAY
23660: NONEQUAL
23661: IFFALSE 23673
// begin result := false ;
23663: LD_ADDR_VAR 0 3
23667: PUSH
23668: LD_INT 0
23670: ST_TO_ADDR
// break ;
23671: GO 23675
// end ;
23673: GO 23636
23675: POP
23676: POP
// end else
23677: GO 23687
// result := false ;
23679: LD_ADDR_VAR 0 3
23683: PUSH
23684: LD_INT 0
23686: ST_TO_ADDR
// end ;
23687: LD_VAR 0 3
23691: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
23692: LD_INT 0
23694: PPUSH
23695: PPUSH
23696: PPUSH
// pom := GetBase ( fac ) ;
23697: LD_ADDR_VAR 0 5
23701: PUSH
23702: LD_VAR 0 1
23706: PPUSH
23707: CALL_OW 274
23711: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
23712: LD_ADDR_VAR 0 4
23716: PUSH
23717: LD_VAR 0 2
23721: PUSH
23722: LD_INT 1
23724: ARRAY
23725: PPUSH
23726: LD_VAR 0 2
23730: PUSH
23731: LD_INT 2
23733: ARRAY
23734: PPUSH
23735: LD_VAR 0 2
23739: PUSH
23740: LD_INT 3
23742: ARRAY
23743: PPUSH
23744: LD_VAR 0 2
23748: PUSH
23749: LD_INT 4
23751: ARRAY
23752: PPUSH
23753: CALL_OW 449
23757: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23758: LD_ADDR_VAR 0 3
23762: PUSH
23763: LD_VAR 0 5
23767: PPUSH
23768: LD_INT 1
23770: PPUSH
23771: CALL_OW 275
23775: PUSH
23776: LD_VAR 0 4
23780: PUSH
23781: LD_INT 1
23783: ARRAY
23784: GREATEREQUAL
23785: PUSH
23786: LD_VAR 0 5
23790: PPUSH
23791: LD_INT 2
23793: PPUSH
23794: CALL_OW 275
23798: PUSH
23799: LD_VAR 0 4
23803: PUSH
23804: LD_INT 2
23806: ARRAY
23807: GREATEREQUAL
23808: AND
23809: PUSH
23810: LD_VAR 0 5
23814: PPUSH
23815: LD_INT 3
23817: PPUSH
23818: CALL_OW 275
23822: PUSH
23823: LD_VAR 0 4
23827: PUSH
23828: LD_INT 3
23830: ARRAY
23831: GREATEREQUAL
23832: AND
23833: ST_TO_ADDR
// end ;
23834: LD_VAR 0 3
23838: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
23839: LD_INT 0
23841: PPUSH
23842: PPUSH
23843: PPUSH
23844: PPUSH
// pom := GetBase ( building ) ;
23845: LD_ADDR_VAR 0 3
23849: PUSH
23850: LD_VAR 0 1
23854: PPUSH
23855: CALL_OW 274
23859: ST_TO_ADDR
// if not pom then
23860: LD_VAR 0 3
23864: NOT
23865: IFFALSE 23869
// exit ;
23867: GO 24039
// btype := GetBType ( building ) ;
23869: LD_ADDR_VAR 0 5
23873: PUSH
23874: LD_VAR 0 1
23878: PPUSH
23879: CALL_OW 266
23883: ST_TO_ADDR
// if btype = b_armoury then
23884: LD_VAR 0 5
23888: PUSH
23889: LD_INT 4
23891: EQUAL
23892: IFFALSE 23902
// btype := b_barracks ;
23894: LD_ADDR_VAR 0 5
23898: PUSH
23899: LD_INT 5
23901: ST_TO_ADDR
// if btype = b_depot then
23902: LD_VAR 0 5
23906: PUSH
23907: LD_INT 0
23909: EQUAL
23910: IFFALSE 23920
// btype := b_warehouse ;
23912: LD_ADDR_VAR 0 5
23916: PUSH
23917: LD_INT 1
23919: ST_TO_ADDR
// if btype = b_workshop then
23920: LD_VAR 0 5
23924: PUSH
23925: LD_INT 2
23927: EQUAL
23928: IFFALSE 23938
// btype := b_factory ;
23930: LD_ADDR_VAR 0 5
23934: PUSH
23935: LD_INT 3
23937: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23938: LD_ADDR_VAR 0 4
23942: PUSH
23943: LD_VAR 0 5
23947: PPUSH
23948: LD_VAR 0 1
23952: PPUSH
23953: CALL_OW 248
23957: PPUSH
23958: CALL_OW 450
23962: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23963: LD_ADDR_VAR 0 2
23967: PUSH
23968: LD_VAR 0 3
23972: PPUSH
23973: LD_INT 1
23975: PPUSH
23976: CALL_OW 275
23980: PUSH
23981: LD_VAR 0 4
23985: PUSH
23986: LD_INT 1
23988: ARRAY
23989: GREATEREQUAL
23990: PUSH
23991: LD_VAR 0 3
23995: PPUSH
23996: LD_INT 2
23998: PPUSH
23999: CALL_OW 275
24003: PUSH
24004: LD_VAR 0 4
24008: PUSH
24009: LD_INT 2
24011: ARRAY
24012: GREATEREQUAL
24013: AND
24014: PUSH
24015: LD_VAR 0 3
24019: PPUSH
24020: LD_INT 3
24022: PPUSH
24023: CALL_OW 275
24027: PUSH
24028: LD_VAR 0 4
24032: PUSH
24033: LD_INT 3
24035: ARRAY
24036: GREATEREQUAL
24037: AND
24038: ST_TO_ADDR
// end ;
24039: LD_VAR 0 2
24043: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
24044: LD_INT 0
24046: PPUSH
24047: PPUSH
24048: PPUSH
// pom := GetBase ( building ) ;
24049: LD_ADDR_VAR 0 4
24053: PUSH
24054: LD_VAR 0 1
24058: PPUSH
24059: CALL_OW 274
24063: ST_TO_ADDR
// if not pom then
24064: LD_VAR 0 4
24068: NOT
24069: IFFALSE 24073
// exit ;
24071: GO 24174
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24073: LD_ADDR_VAR 0 5
24077: PUSH
24078: LD_VAR 0 2
24082: PPUSH
24083: LD_VAR 0 1
24087: PPUSH
24088: CALL_OW 248
24092: PPUSH
24093: CALL_OW 450
24097: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24098: LD_ADDR_VAR 0 3
24102: PUSH
24103: LD_VAR 0 4
24107: PPUSH
24108: LD_INT 1
24110: PPUSH
24111: CALL_OW 275
24115: PUSH
24116: LD_VAR 0 5
24120: PUSH
24121: LD_INT 1
24123: ARRAY
24124: GREATEREQUAL
24125: PUSH
24126: LD_VAR 0 4
24130: PPUSH
24131: LD_INT 2
24133: PPUSH
24134: CALL_OW 275
24138: PUSH
24139: LD_VAR 0 5
24143: PUSH
24144: LD_INT 2
24146: ARRAY
24147: GREATEREQUAL
24148: AND
24149: PUSH
24150: LD_VAR 0 4
24154: PPUSH
24155: LD_INT 3
24157: PPUSH
24158: CALL_OW 275
24162: PUSH
24163: LD_VAR 0 5
24167: PUSH
24168: LD_INT 3
24170: ARRAY
24171: GREATEREQUAL
24172: AND
24173: ST_TO_ADDR
// end ;
24174: LD_VAR 0 3
24178: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
24179: LD_INT 0
24181: PPUSH
24182: PPUSH
24183: PPUSH
24184: PPUSH
24185: PPUSH
24186: PPUSH
24187: PPUSH
24188: PPUSH
24189: PPUSH
24190: PPUSH
// result := false ;
24191: LD_ADDR_VAR 0 6
24195: PUSH
24196: LD_INT 0
24198: ST_TO_ADDR
// if not base or not btype or not x or not y then
24199: LD_VAR 0 1
24203: NOT
24204: PUSH
24205: LD_VAR 0 2
24209: NOT
24210: OR
24211: PUSH
24212: LD_VAR 0 3
24216: NOT
24217: OR
24218: PUSH
24219: LD_VAR 0 4
24223: NOT
24224: OR
24225: IFFALSE 24229
// exit ;
24227: GO 24838
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
24229: LD_ADDR_VAR 0 12
24233: PUSH
24234: LD_VAR 0 2
24238: PPUSH
24239: LD_VAR 0 3
24243: PPUSH
24244: LD_VAR 0 4
24248: PPUSH
24249: LD_VAR 0 5
24253: PPUSH
24254: LD_VAR 0 1
24258: PUSH
24259: LD_INT 1
24261: ARRAY
24262: PPUSH
24263: CALL_OW 248
24267: PPUSH
24268: LD_INT 0
24270: PPUSH
24271: CALL 25675 0 6
24275: ST_TO_ADDR
// if not hexes then
24276: LD_VAR 0 12
24280: NOT
24281: IFFALSE 24285
// exit ;
24283: GO 24838
// for i = 1 to hexes do
24285: LD_ADDR_VAR 0 7
24289: PUSH
24290: DOUBLE
24291: LD_INT 1
24293: DEC
24294: ST_TO_ADDR
24295: LD_VAR 0 12
24299: PUSH
24300: FOR_TO
24301: IFFALSE 24836
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24303: LD_ADDR_VAR 0 11
24307: PUSH
24308: LD_VAR 0 12
24312: PUSH
24313: LD_VAR 0 7
24317: ARRAY
24318: PUSH
24319: LD_INT 1
24321: ARRAY
24322: PPUSH
24323: LD_VAR 0 12
24327: PUSH
24328: LD_VAR 0 7
24332: ARRAY
24333: PUSH
24334: LD_INT 2
24336: ARRAY
24337: PPUSH
24338: CALL_OW 428
24342: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
24343: LD_VAR 0 12
24347: PUSH
24348: LD_VAR 0 7
24352: ARRAY
24353: PUSH
24354: LD_INT 1
24356: ARRAY
24357: PPUSH
24358: LD_VAR 0 12
24362: PUSH
24363: LD_VAR 0 7
24367: ARRAY
24368: PUSH
24369: LD_INT 2
24371: ARRAY
24372: PPUSH
24373: CALL_OW 351
24377: PUSH
24378: LD_VAR 0 12
24382: PUSH
24383: LD_VAR 0 7
24387: ARRAY
24388: PUSH
24389: LD_INT 1
24391: ARRAY
24392: PPUSH
24393: LD_VAR 0 12
24397: PUSH
24398: LD_VAR 0 7
24402: ARRAY
24403: PUSH
24404: LD_INT 2
24406: ARRAY
24407: PPUSH
24408: CALL_OW 488
24412: NOT
24413: OR
24414: PUSH
24415: LD_VAR 0 11
24419: PPUSH
24420: CALL_OW 247
24424: PUSH
24425: LD_INT 3
24427: EQUAL
24428: OR
24429: IFFALSE 24435
// exit ;
24431: POP
24432: POP
24433: GO 24838
// if not tmp or not tmp in base then
24435: LD_VAR 0 11
24439: NOT
24440: PUSH
24441: LD_VAR 0 11
24445: PUSH
24446: LD_VAR 0 1
24450: IN
24451: NOT
24452: OR
24453: IFFALSE 24457
// continue ;
24455: GO 24300
// result := true ;
24457: LD_ADDR_VAR 0 6
24461: PUSH
24462: LD_INT 1
24464: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24465: LD_ADDR_VAR 0 15
24469: PUSH
24470: LD_VAR 0 1
24474: PPUSH
24475: LD_INT 22
24477: PUSH
24478: LD_VAR 0 11
24482: PPUSH
24483: CALL_OW 255
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: LD_INT 2
24494: PUSH
24495: LD_INT 30
24497: PUSH
24498: LD_INT 0
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: PUSH
24505: LD_INT 30
24507: PUSH
24508: LD_INT 1
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: LIST
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PPUSH
24524: CALL_OW 72
24528: ST_TO_ADDR
// if dep then
24529: LD_VAR 0 15
24533: IFFALSE 24669
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
24535: LD_ADDR_VAR 0 14
24539: PUSH
24540: LD_VAR 0 15
24544: PUSH
24545: LD_INT 1
24547: ARRAY
24548: PPUSH
24549: CALL_OW 250
24553: PPUSH
24554: LD_VAR 0 15
24558: PUSH
24559: LD_INT 1
24561: ARRAY
24562: PPUSH
24563: CALL_OW 254
24567: PPUSH
24568: LD_INT 5
24570: PPUSH
24571: CALL_OW 272
24575: PUSH
24576: LD_VAR 0 15
24580: PUSH
24581: LD_INT 1
24583: ARRAY
24584: PPUSH
24585: CALL_OW 251
24589: PPUSH
24590: LD_VAR 0 15
24594: PUSH
24595: LD_INT 1
24597: ARRAY
24598: PPUSH
24599: CALL_OW 254
24603: PPUSH
24604: LD_INT 5
24606: PPUSH
24607: CALL_OW 273
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
24616: LD_VAR 0 14
24620: PUSH
24621: LD_INT 1
24623: ARRAY
24624: PPUSH
24625: LD_VAR 0 14
24629: PUSH
24630: LD_INT 2
24632: ARRAY
24633: PPUSH
24634: CALL_OW 488
24638: IFFALSE 24669
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
24640: LD_VAR 0 11
24644: PPUSH
24645: LD_VAR 0 14
24649: PUSH
24650: LD_INT 1
24652: ARRAY
24653: PPUSH
24654: LD_VAR 0 14
24658: PUSH
24659: LD_INT 2
24661: ARRAY
24662: PPUSH
24663: CALL_OW 111
// continue ;
24667: GO 24300
// end ; end ; r := GetDir ( tmp ) ;
24669: LD_ADDR_VAR 0 13
24673: PUSH
24674: LD_VAR 0 11
24678: PPUSH
24679: CALL_OW 254
24683: ST_TO_ADDR
// if r = 5 then
24684: LD_VAR 0 13
24688: PUSH
24689: LD_INT 5
24691: EQUAL
24692: IFFALSE 24702
// r := 0 ;
24694: LD_ADDR_VAR 0 13
24698: PUSH
24699: LD_INT 0
24701: ST_TO_ADDR
// for j = r to 5 do
24702: LD_ADDR_VAR 0 8
24706: PUSH
24707: DOUBLE
24708: LD_VAR 0 13
24712: DEC
24713: ST_TO_ADDR
24714: LD_INT 5
24716: PUSH
24717: FOR_TO
24718: IFFALSE 24832
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
24720: LD_ADDR_VAR 0 9
24724: PUSH
24725: LD_VAR 0 11
24729: PPUSH
24730: CALL_OW 250
24734: PPUSH
24735: LD_VAR 0 8
24739: PPUSH
24740: LD_INT 2
24742: PPUSH
24743: CALL_OW 272
24747: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
24748: LD_ADDR_VAR 0 10
24752: PUSH
24753: LD_VAR 0 11
24757: PPUSH
24758: CALL_OW 251
24762: PPUSH
24763: LD_VAR 0 8
24767: PPUSH
24768: LD_INT 2
24770: PPUSH
24771: CALL_OW 273
24775: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
24776: LD_VAR 0 9
24780: PPUSH
24781: LD_VAR 0 10
24785: PPUSH
24786: CALL_OW 488
24790: PUSH
24791: LD_VAR 0 9
24795: PPUSH
24796: LD_VAR 0 10
24800: PPUSH
24801: CALL_OW 428
24805: NOT
24806: AND
24807: IFFALSE 24830
// begin ComMoveXY ( tmp , _x , _y ) ;
24809: LD_VAR 0 11
24813: PPUSH
24814: LD_VAR 0 9
24818: PPUSH
24819: LD_VAR 0 10
24823: PPUSH
24824: CALL_OW 111
// break ;
24828: GO 24832
// end ; end ;
24830: GO 24717
24832: POP
24833: POP
// end ;
24834: GO 24300
24836: POP
24837: POP
// end ;
24838: LD_VAR 0 6
24842: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
24843: LD_INT 0
24845: PPUSH
24846: PPUSH
24847: PPUSH
24848: PPUSH
24849: PPUSH
24850: PPUSH
24851: PPUSH
24852: PPUSH
24853: PPUSH
24854: PPUSH
// result := false ;
24855: LD_ADDR_VAR 0 6
24859: PUSH
24860: LD_INT 0
24862: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
24863: LD_VAR 0 1
24867: NOT
24868: PUSH
24869: LD_VAR 0 1
24873: PPUSH
24874: CALL_OW 266
24878: PUSH
24879: LD_INT 0
24881: PUSH
24882: LD_INT 1
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: IN
24889: NOT
24890: OR
24891: PUSH
24892: LD_VAR 0 2
24896: NOT
24897: OR
24898: PUSH
24899: LD_VAR 0 5
24903: PUSH
24904: LD_INT 0
24906: PUSH
24907: LD_INT 1
24909: PUSH
24910: LD_INT 2
24912: PUSH
24913: LD_INT 3
24915: PUSH
24916: LD_INT 4
24918: PUSH
24919: LD_INT 5
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: IN
24930: NOT
24931: OR
24932: PUSH
24933: LD_VAR 0 3
24937: PPUSH
24938: LD_VAR 0 4
24942: PPUSH
24943: CALL_OW 488
24947: NOT
24948: OR
24949: IFFALSE 24953
// exit ;
24951: GO 25670
// pom := GetBase ( depot ) ;
24953: LD_ADDR_VAR 0 10
24957: PUSH
24958: LD_VAR 0 1
24962: PPUSH
24963: CALL_OW 274
24967: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
24968: LD_ADDR_VAR 0 11
24972: PUSH
24973: LD_VAR 0 2
24977: PPUSH
24978: LD_VAR 0 1
24982: PPUSH
24983: CALL_OW 248
24987: PPUSH
24988: CALL_OW 450
24992: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
24993: LD_VAR 0 10
24997: PPUSH
24998: LD_INT 1
25000: PPUSH
25001: CALL_OW 275
25005: PUSH
25006: LD_VAR 0 11
25010: PUSH
25011: LD_INT 1
25013: ARRAY
25014: GREATEREQUAL
25015: PUSH
25016: LD_VAR 0 10
25020: PPUSH
25021: LD_INT 2
25023: PPUSH
25024: CALL_OW 275
25028: PUSH
25029: LD_VAR 0 11
25033: PUSH
25034: LD_INT 2
25036: ARRAY
25037: GREATEREQUAL
25038: AND
25039: PUSH
25040: LD_VAR 0 10
25044: PPUSH
25045: LD_INT 3
25047: PPUSH
25048: CALL_OW 275
25052: PUSH
25053: LD_VAR 0 11
25057: PUSH
25058: LD_INT 3
25060: ARRAY
25061: GREATEREQUAL
25062: AND
25063: NOT
25064: IFFALSE 25068
// exit ;
25066: GO 25670
// if GetBType ( depot ) = b_depot then
25068: LD_VAR 0 1
25072: PPUSH
25073: CALL_OW 266
25077: PUSH
25078: LD_INT 0
25080: EQUAL
25081: IFFALSE 25093
// dist := 28 else
25083: LD_ADDR_VAR 0 14
25087: PUSH
25088: LD_INT 28
25090: ST_TO_ADDR
25091: GO 25101
// dist := 36 ;
25093: LD_ADDR_VAR 0 14
25097: PUSH
25098: LD_INT 36
25100: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
25101: LD_VAR 0 1
25105: PPUSH
25106: LD_VAR 0 3
25110: PPUSH
25111: LD_VAR 0 4
25115: PPUSH
25116: CALL_OW 297
25120: PUSH
25121: LD_VAR 0 14
25125: GREATER
25126: IFFALSE 25130
// exit ;
25128: GO 25670
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
25130: LD_ADDR_VAR 0 12
25134: PUSH
25135: LD_VAR 0 2
25139: PPUSH
25140: LD_VAR 0 3
25144: PPUSH
25145: LD_VAR 0 4
25149: PPUSH
25150: LD_VAR 0 5
25154: PPUSH
25155: LD_VAR 0 1
25159: PPUSH
25160: CALL_OW 248
25164: PPUSH
25165: LD_INT 0
25167: PPUSH
25168: CALL 25675 0 6
25172: ST_TO_ADDR
// if not hexes then
25173: LD_VAR 0 12
25177: NOT
25178: IFFALSE 25182
// exit ;
25180: GO 25670
// hex := GetHexInfo ( x , y ) ;
25182: LD_ADDR_VAR 0 15
25186: PUSH
25187: LD_VAR 0 3
25191: PPUSH
25192: LD_VAR 0 4
25196: PPUSH
25197: CALL_OW 546
25201: ST_TO_ADDR
// if hex [ 1 ] then
25202: LD_VAR 0 15
25206: PUSH
25207: LD_INT 1
25209: ARRAY
25210: IFFALSE 25214
// exit ;
25212: GO 25670
// height := hex [ 2 ] ;
25214: LD_ADDR_VAR 0 13
25218: PUSH
25219: LD_VAR 0 15
25223: PUSH
25224: LD_INT 2
25226: ARRAY
25227: ST_TO_ADDR
// for i = 1 to hexes do
25228: LD_ADDR_VAR 0 7
25232: PUSH
25233: DOUBLE
25234: LD_INT 1
25236: DEC
25237: ST_TO_ADDR
25238: LD_VAR 0 12
25242: PUSH
25243: FOR_TO
25244: IFFALSE 25574
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
25246: LD_VAR 0 12
25250: PUSH
25251: LD_VAR 0 7
25255: ARRAY
25256: PUSH
25257: LD_INT 1
25259: ARRAY
25260: PPUSH
25261: LD_VAR 0 12
25265: PUSH
25266: LD_VAR 0 7
25270: ARRAY
25271: PUSH
25272: LD_INT 2
25274: ARRAY
25275: PPUSH
25276: CALL_OW 488
25280: NOT
25281: PUSH
25282: LD_VAR 0 12
25286: PUSH
25287: LD_VAR 0 7
25291: ARRAY
25292: PUSH
25293: LD_INT 1
25295: ARRAY
25296: PPUSH
25297: LD_VAR 0 12
25301: PUSH
25302: LD_VAR 0 7
25306: ARRAY
25307: PUSH
25308: LD_INT 2
25310: ARRAY
25311: PPUSH
25312: CALL_OW 428
25316: PUSH
25317: LD_INT 0
25319: GREATER
25320: OR
25321: PUSH
25322: LD_VAR 0 12
25326: PUSH
25327: LD_VAR 0 7
25331: ARRAY
25332: PUSH
25333: LD_INT 1
25335: ARRAY
25336: PPUSH
25337: LD_VAR 0 12
25341: PUSH
25342: LD_VAR 0 7
25346: ARRAY
25347: PUSH
25348: LD_INT 2
25350: ARRAY
25351: PPUSH
25352: CALL_OW 351
25356: OR
25357: IFFALSE 25363
// exit ;
25359: POP
25360: POP
25361: GO 25670
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25363: LD_ADDR_VAR 0 8
25367: PUSH
25368: LD_VAR 0 12
25372: PUSH
25373: LD_VAR 0 7
25377: ARRAY
25378: PUSH
25379: LD_INT 1
25381: ARRAY
25382: PPUSH
25383: LD_VAR 0 12
25387: PUSH
25388: LD_VAR 0 7
25392: ARRAY
25393: PUSH
25394: LD_INT 2
25396: ARRAY
25397: PPUSH
25398: CALL_OW 546
25402: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
25403: LD_VAR 0 8
25407: PUSH
25408: LD_INT 1
25410: ARRAY
25411: PUSH
25412: LD_VAR 0 8
25416: PUSH
25417: LD_INT 2
25419: ARRAY
25420: PUSH
25421: LD_VAR 0 13
25425: PUSH
25426: LD_INT 2
25428: PLUS
25429: GREATER
25430: OR
25431: PUSH
25432: LD_VAR 0 8
25436: PUSH
25437: LD_INT 2
25439: ARRAY
25440: PUSH
25441: LD_VAR 0 13
25445: PUSH
25446: LD_INT 2
25448: MINUS
25449: LESS
25450: OR
25451: PUSH
25452: LD_VAR 0 8
25456: PUSH
25457: LD_INT 3
25459: ARRAY
25460: PUSH
25461: LD_INT 0
25463: PUSH
25464: LD_INT 8
25466: PUSH
25467: LD_INT 9
25469: PUSH
25470: LD_INT 10
25472: PUSH
25473: LD_INT 11
25475: PUSH
25476: LD_INT 12
25478: PUSH
25479: LD_INT 13
25481: PUSH
25482: LD_INT 16
25484: PUSH
25485: LD_INT 17
25487: PUSH
25488: LD_INT 18
25490: PUSH
25491: LD_INT 19
25493: PUSH
25494: LD_INT 20
25496: PUSH
25497: LD_INT 21
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: IN
25515: NOT
25516: OR
25517: PUSH
25518: LD_VAR 0 8
25522: PUSH
25523: LD_INT 5
25525: ARRAY
25526: NOT
25527: OR
25528: PUSH
25529: LD_VAR 0 8
25533: PUSH
25534: LD_INT 6
25536: ARRAY
25537: PUSH
25538: LD_INT 1
25540: PUSH
25541: LD_INT 2
25543: PUSH
25544: LD_INT 7
25546: PUSH
25547: LD_INT 9
25549: PUSH
25550: LD_INT 10
25552: PUSH
25553: LD_INT 11
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: IN
25564: NOT
25565: OR
25566: IFFALSE 25572
// exit ;
25568: POP
25569: POP
25570: GO 25670
// end ;
25572: GO 25243
25574: POP
25575: POP
// side := GetSide ( depot ) ;
25576: LD_ADDR_VAR 0 9
25580: PUSH
25581: LD_VAR 0 1
25585: PPUSH
25586: CALL_OW 255
25590: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
25591: LD_VAR 0 9
25595: PPUSH
25596: LD_VAR 0 3
25600: PPUSH
25601: LD_VAR 0 4
25605: PPUSH
25606: LD_INT 20
25608: PPUSH
25609: CALL 18324 0 4
25613: PUSH
25614: LD_INT 4
25616: ARRAY
25617: IFFALSE 25621
// exit ;
25619: GO 25670
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
25621: LD_VAR 0 2
25625: PUSH
25626: LD_INT 29
25628: PUSH
25629: LD_INT 30
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: IN
25636: PUSH
25637: LD_VAR 0 3
25641: PPUSH
25642: LD_VAR 0 4
25646: PPUSH
25647: LD_VAR 0 9
25651: PPUSH
25652: CALL_OW 440
25656: NOT
25657: AND
25658: IFFALSE 25662
// exit ;
25660: GO 25670
// result := true ;
25662: LD_ADDR_VAR 0 6
25666: PUSH
25667: LD_INT 1
25669: ST_TO_ADDR
// end ;
25670: LD_VAR 0 6
25674: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
25675: LD_INT 0
25677: PPUSH
25678: PPUSH
25679: PPUSH
25680: PPUSH
25681: PPUSH
25682: PPUSH
25683: PPUSH
25684: PPUSH
25685: PPUSH
25686: PPUSH
25687: PPUSH
25688: PPUSH
25689: PPUSH
25690: PPUSH
25691: PPUSH
25692: PPUSH
25693: PPUSH
25694: PPUSH
25695: PPUSH
25696: PPUSH
25697: PPUSH
25698: PPUSH
25699: PPUSH
25700: PPUSH
25701: PPUSH
25702: PPUSH
25703: PPUSH
25704: PPUSH
25705: PPUSH
25706: PPUSH
25707: PPUSH
25708: PPUSH
25709: PPUSH
25710: PPUSH
25711: PPUSH
25712: PPUSH
25713: PPUSH
25714: PPUSH
25715: PPUSH
25716: PPUSH
25717: PPUSH
25718: PPUSH
25719: PPUSH
25720: PPUSH
25721: PPUSH
25722: PPUSH
25723: PPUSH
25724: PPUSH
25725: PPUSH
25726: PPUSH
25727: PPUSH
25728: PPUSH
25729: PPUSH
25730: PPUSH
25731: PPUSH
25732: PPUSH
25733: PPUSH
25734: PPUSH
// result = [ ] ;
25735: LD_ADDR_VAR 0 7
25739: PUSH
25740: EMPTY
25741: ST_TO_ADDR
// temp_list = [ ] ;
25742: LD_ADDR_VAR 0 9
25746: PUSH
25747: EMPTY
25748: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
25749: LD_VAR 0 4
25753: PUSH
25754: LD_INT 0
25756: PUSH
25757: LD_INT 1
25759: PUSH
25760: LD_INT 2
25762: PUSH
25763: LD_INT 3
25765: PUSH
25766: LD_INT 4
25768: PUSH
25769: LD_INT 5
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: IN
25780: NOT
25781: PUSH
25782: LD_VAR 0 1
25786: PUSH
25787: LD_INT 0
25789: PUSH
25790: LD_INT 1
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: IN
25797: PUSH
25798: LD_VAR 0 5
25802: PUSH
25803: LD_INT 1
25805: PUSH
25806: LD_INT 2
25808: PUSH
25809: LD_INT 3
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: LIST
25816: IN
25817: NOT
25818: AND
25819: OR
25820: IFFALSE 25824
// exit ;
25822: GO 44209
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
25824: LD_VAR 0 1
25828: PUSH
25829: LD_INT 6
25831: PUSH
25832: LD_INT 7
25834: PUSH
25835: LD_INT 8
25837: PUSH
25838: LD_INT 13
25840: PUSH
25841: LD_INT 12
25843: PUSH
25844: LD_INT 15
25846: PUSH
25847: LD_INT 11
25849: PUSH
25850: LD_INT 14
25852: PUSH
25853: LD_INT 10
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: IN
25867: IFFALSE 25877
// btype = b_lab ;
25869: LD_ADDR_VAR 0 1
25873: PUSH
25874: LD_INT 6
25876: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
25877: LD_VAR 0 6
25881: PUSH
25882: LD_INT 0
25884: PUSH
25885: LD_INT 1
25887: PUSH
25888: LD_INT 2
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: LIST
25895: IN
25896: NOT
25897: PUSH
25898: LD_VAR 0 1
25902: PUSH
25903: LD_INT 0
25905: PUSH
25906: LD_INT 1
25908: PUSH
25909: LD_INT 2
25911: PUSH
25912: LD_INT 3
25914: PUSH
25915: LD_INT 6
25917: PUSH
25918: LD_INT 36
25920: PUSH
25921: LD_INT 4
25923: PUSH
25924: LD_INT 5
25926: PUSH
25927: LD_INT 31
25929: PUSH
25930: LD_INT 32
25932: PUSH
25933: LD_INT 33
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: IN
25949: NOT
25950: PUSH
25951: LD_VAR 0 6
25955: PUSH
25956: LD_INT 1
25958: EQUAL
25959: AND
25960: OR
25961: PUSH
25962: LD_VAR 0 1
25966: PUSH
25967: LD_INT 2
25969: PUSH
25970: LD_INT 3
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: IN
25977: NOT
25978: PUSH
25979: LD_VAR 0 6
25983: PUSH
25984: LD_INT 2
25986: EQUAL
25987: AND
25988: OR
25989: IFFALSE 25999
// mode = 0 ;
25991: LD_ADDR_VAR 0 6
25995: PUSH
25996: LD_INT 0
25998: ST_TO_ADDR
// case mode of 0 :
25999: LD_VAR 0 6
26003: PUSH
26004: LD_INT 0
26006: DOUBLE
26007: EQUAL
26008: IFTRUE 26012
26010: GO 37465
26012: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26013: LD_ADDR_VAR 0 11
26017: PUSH
26018: LD_INT 0
26020: PUSH
26021: LD_INT 0
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 0
26030: PUSH
26031: LD_INT 1
26033: NEG
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 1
26041: PUSH
26042: LD_INT 0
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 1
26051: PUSH
26052: LD_INT 1
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 0
26061: PUSH
26062: LD_INT 1
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 1
26071: NEG
26072: PUSH
26073: LD_INT 0
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 1
26082: NEG
26083: PUSH
26084: LD_INT 1
26086: NEG
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 1
26094: NEG
26095: PUSH
26096: LD_INT 2
26098: NEG
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PUSH
26104: LD_INT 0
26106: PUSH
26107: LD_INT 2
26109: NEG
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PUSH
26115: LD_INT 1
26117: PUSH
26118: LD_INT 1
26120: NEG
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 1
26128: PUSH
26129: LD_INT 2
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: LD_INT 0
26138: PUSH
26139: LD_INT 2
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: LD_INT 1
26148: NEG
26149: PUSH
26150: LD_INT 1
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PUSH
26157: LD_INT 1
26159: PUSH
26160: LD_INT 3
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: LD_INT 0
26169: PUSH
26170: LD_INT 3
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 1
26179: NEG
26180: PUSH
26181: LD_INT 2
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: LIST
26205: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26206: LD_ADDR_VAR 0 12
26210: PUSH
26211: LD_INT 0
26213: PUSH
26214: LD_INT 0
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: LD_INT 0
26223: PUSH
26224: LD_INT 1
26226: NEG
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 1
26234: PUSH
26235: LD_INT 0
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: LD_INT 1
26244: PUSH
26245: LD_INT 1
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 0
26254: PUSH
26255: LD_INT 1
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: LD_INT 1
26264: NEG
26265: PUSH
26266: LD_INT 0
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: LD_INT 1
26275: NEG
26276: PUSH
26277: LD_INT 1
26279: NEG
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 1
26287: PUSH
26288: LD_INT 1
26290: NEG
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 2
26298: PUSH
26299: LD_INT 0
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PUSH
26306: LD_INT 2
26308: PUSH
26309: LD_INT 1
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: PUSH
26316: LD_INT 1
26318: NEG
26319: PUSH
26320: LD_INT 1
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 2
26329: NEG
26330: PUSH
26331: LD_INT 0
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 2
26340: NEG
26341: PUSH
26342: LD_INT 1
26344: NEG
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 2
26352: NEG
26353: PUSH
26354: LD_INT 1
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 3
26363: NEG
26364: PUSH
26365: LD_INT 0
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: LD_INT 3
26374: NEG
26375: PUSH
26376: LD_INT 1
26378: NEG
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26402: LD_ADDR_VAR 0 13
26406: PUSH
26407: LD_INT 0
26409: PUSH
26410: LD_INT 0
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 0
26419: PUSH
26420: LD_INT 1
26422: NEG
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 1
26430: PUSH
26431: LD_INT 0
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 1
26440: PUSH
26441: LD_INT 1
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 0
26450: PUSH
26451: LD_INT 1
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 1
26460: NEG
26461: PUSH
26462: LD_INT 0
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: LD_INT 1
26471: NEG
26472: PUSH
26473: LD_INT 1
26475: NEG
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 1
26483: NEG
26484: PUSH
26485: LD_INT 2
26487: NEG
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 2
26495: PUSH
26496: LD_INT 1
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: LD_INT 2
26505: PUSH
26506: LD_INT 2
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: LD_INT 1
26515: PUSH
26516: LD_INT 2
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: LD_INT 2
26525: NEG
26526: PUSH
26527: LD_INT 1
26529: NEG
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 2
26537: NEG
26538: PUSH
26539: LD_INT 2
26541: NEG
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PUSH
26547: LD_INT 2
26549: NEG
26550: PUSH
26551: LD_INT 3
26553: NEG
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 3
26561: NEG
26562: PUSH
26563: LD_INT 2
26565: NEG
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 3
26573: NEG
26574: PUSH
26575: LD_INT 3
26577: NEG
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26601: LD_ADDR_VAR 0 14
26605: PUSH
26606: LD_INT 0
26608: PUSH
26609: LD_INT 0
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: LD_INT 0
26618: PUSH
26619: LD_INT 1
26621: NEG
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: PUSH
26627: LD_INT 1
26629: PUSH
26630: LD_INT 0
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: LD_INT 1
26639: PUSH
26640: LD_INT 1
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 0
26649: PUSH
26650: LD_INT 1
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: PUSH
26657: LD_INT 1
26659: NEG
26660: PUSH
26661: LD_INT 0
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 1
26670: NEG
26671: PUSH
26672: LD_INT 1
26674: NEG
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 1
26682: NEG
26683: PUSH
26684: LD_INT 2
26686: NEG
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 0
26694: PUSH
26695: LD_INT 2
26697: NEG
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 1
26705: PUSH
26706: LD_INT 1
26708: NEG
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PUSH
26714: LD_INT 1
26716: PUSH
26717: LD_INT 2
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: PUSH
26724: LD_INT 0
26726: PUSH
26727: LD_INT 2
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 1
26736: NEG
26737: PUSH
26738: LD_INT 1
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: PUSH
26745: LD_INT 1
26747: NEG
26748: PUSH
26749: LD_INT 3
26751: NEG
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 0
26759: PUSH
26760: LD_INT 3
26762: NEG
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: PUSH
26768: LD_INT 1
26770: PUSH
26771: LD_INT 2
26773: NEG
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26797: LD_ADDR_VAR 0 15
26801: PUSH
26802: LD_INT 0
26804: PUSH
26805: LD_INT 0
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 0
26814: PUSH
26815: LD_INT 1
26817: NEG
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 1
26825: PUSH
26826: LD_INT 0
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 1
26835: PUSH
26836: LD_INT 1
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: LD_INT 0
26845: PUSH
26846: LD_INT 1
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: LD_INT 1
26855: NEG
26856: PUSH
26857: LD_INT 0
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: LD_INT 1
26866: NEG
26867: PUSH
26868: LD_INT 1
26870: NEG
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: LD_INT 1
26878: PUSH
26879: LD_INT 1
26881: NEG
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 2
26889: PUSH
26890: LD_INT 0
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 2
26899: PUSH
26900: LD_INT 1
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 1
26909: NEG
26910: PUSH
26911: LD_INT 1
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 2
26920: NEG
26921: PUSH
26922: LD_INT 0
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: PUSH
26929: LD_INT 2
26931: NEG
26932: PUSH
26933: LD_INT 1
26935: NEG
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 2
26943: PUSH
26944: LD_INT 1
26946: NEG
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 3
26954: PUSH
26955: LD_INT 0
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 3
26964: PUSH
26965: LD_INT 1
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26990: LD_ADDR_VAR 0 16
26994: PUSH
26995: LD_INT 0
26997: PUSH
26998: LD_INT 0
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 0
27007: PUSH
27008: LD_INT 1
27010: NEG
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 1
27018: PUSH
27019: LD_INT 0
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 1
27028: PUSH
27029: LD_INT 1
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: LD_INT 0
27038: PUSH
27039: LD_INT 1
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 1
27048: NEG
27049: PUSH
27050: LD_INT 0
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: LD_INT 1
27059: NEG
27060: PUSH
27061: LD_INT 1
27063: NEG
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: PUSH
27069: LD_INT 1
27071: NEG
27072: PUSH
27073: LD_INT 2
27075: NEG
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: PUSH
27081: LD_INT 2
27083: PUSH
27084: LD_INT 1
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: LD_INT 2
27093: PUSH
27094: LD_INT 2
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: LD_INT 1
27103: PUSH
27104: LD_INT 2
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 2
27113: NEG
27114: PUSH
27115: LD_INT 1
27117: NEG
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 2
27125: NEG
27126: PUSH
27127: LD_INT 2
27129: NEG
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 3
27137: PUSH
27138: LD_INT 2
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: LD_INT 3
27147: PUSH
27148: LD_INT 3
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 2
27157: PUSH
27158: LD_INT 3
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27183: LD_ADDR_VAR 0 17
27187: PUSH
27188: LD_INT 0
27190: PUSH
27191: LD_INT 0
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: LD_INT 0
27200: PUSH
27201: LD_INT 1
27203: NEG
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 1
27211: PUSH
27212: LD_INT 0
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 1
27221: PUSH
27222: LD_INT 1
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: LD_INT 0
27231: PUSH
27232: LD_INT 1
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: PUSH
27239: LD_INT 1
27241: NEG
27242: PUSH
27243: LD_INT 0
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PUSH
27250: LD_INT 1
27252: NEG
27253: PUSH
27254: LD_INT 1
27256: NEG
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 1
27264: NEG
27265: PUSH
27266: LD_INT 2
27268: NEG
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: LD_INT 0
27276: PUSH
27277: LD_INT 2
27279: NEG
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: LD_INT 1
27287: PUSH
27288: LD_INT 1
27290: NEG
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 2
27298: PUSH
27299: LD_INT 0
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 2
27308: PUSH
27309: LD_INT 1
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: LD_INT 2
27318: PUSH
27319: LD_INT 2
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 1
27328: PUSH
27329: LD_INT 2
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 0
27338: PUSH
27339: LD_INT 2
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 1
27348: NEG
27349: PUSH
27350: LD_INT 1
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 2
27359: NEG
27360: PUSH
27361: LD_INT 0
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: LD_INT 2
27370: NEG
27371: PUSH
27372: LD_INT 1
27374: NEG
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 2
27382: NEG
27383: PUSH
27384: LD_INT 2
27386: NEG
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27413: LD_ADDR_VAR 0 18
27417: PUSH
27418: LD_INT 0
27420: PUSH
27421: LD_INT 0
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: LD_INT 0
27430: PUSH
27431: LD_INT 1
27433: NEG
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: LD_INT 1
27441: PUSH
27442: LD_INT 0
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 1
27451: PUSH
27452: LD_INT 1
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: LD_INT 0
27461: PUSH
27462: LD_INT 1
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: LD_INT 1
27471: NEG
27472: PUSH
27473: LD_INT 0
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PUSH
27480: LD_INT 1
27482: NEG
27483: PUSH
27484: LD_INT 1
27486: NEG
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: LD_INT 1
27494: NEG
27495: PUSH
27496: LD_INT 2
27498: NEG
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 0
27506: PUSH
27507: LD_INT 2
27509: NEG
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PUSH
27515: LD_INT 1
27517: PUSH
27518: LD_INT 1
27520: NEG
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 2
27528: PUSH
27529: LD_INT 0
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: PUSH
27536: LD_INT 2
27538: PUSH
27539: LD_INT 1
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: PUSH
27546: LD_INT 2
27548: PUSH
27549: LD_INT 2
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: LD_INT 1
27558: PUSH
27559: LD_INT 2
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 0
27568: PUSH
27569: LD_INT 2
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: LD_INT 1
27578: NEG
27579: PUSH
27580: LD_INT 1
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 2
27589: NEG
27590: PUSH
27591: LD_INT 0
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 2
27600: NEG
27601: PUSH
27602: LD_INT 1
27604: NEG
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 2
27612: NEG
27613: PUSH
27614: LD_INT 2
27616: NEG
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27643: LD_ADDR_VAR 0 19
27647: PUSH
27648: LD_INT 0
27650: PUSH
27651: LD_INT 0
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: PUSH
27658: LD_INT 0
27660: PUSH
27661: LD_INT 1
27663: NEG
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PUSH
27669: LD_INT 1
27671: PUSH
27672: LD_INT 0
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 1
27681: PUSH
27682: LD_INT 1
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 0
27691: PUSH
27692: LD_INT 1
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: LD_INT 1
27701: NEG
27702: PUSH
27703: LD_INT 0
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: PUSH
27710: LD_INT 1
27712: NEG
27713: PUSH
27714: LD_INT 1
27716: NEG
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PUSH
27722: LD_INT 1
27724: NEG
27725: PUSH
27726: LD_INT 2
27728: NEG
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PUSH
27734: LD_INT 0
27736: PUSH
27737: LD_INT 2
27739: NEG
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 1
27747: PUSH
27748: LD_INT 1
27750: NEG
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 2
27758: PUSH
27759: LD_INT 0
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 2
27768: PUSH
27769: LD_INT 1
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 2
27778: PUSH
27779: LD_INT 2
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 1
27788: PUSH
27789: LD_INT 2
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 0
27798: PUSH
27799: LD_INT 2
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PUSH
27806: LD_INT 1
27808: NEG
27809: PUSH
27810: LD_INT 1
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 2
27819: NEG
27820: PUSH
27821: LD_INT 0
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 2
27830: NEG
27831: PUSH
27832: LD_INT 1
27834: NEG
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PUSH
27840: LD_INT 2
27842: NEG
27843: PUSH
27844: LD_INT 2
27846: NEG
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27873: LD_ADDR_VAR 0 20
27877: PUSH
27878: LD_INT 0
27880: PUSH
27881: LD_INT 0
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: LD_INT 0
27890: PUSH
27891: LD_INT 1
27893: NEG
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: LD_INT 1
27901: PUSH
27902: LD_INT 0
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 1
27911: PUSH
27912: LD_INT 1
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: LD_INT 0
27921: PUSH
27922: LD_INT 1
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: LD_INT 1
27931: NEG
27932: PUSH
27933: LD_INT 0
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: LD_INT 1
27942: NEG
27943: PUSH
27944: LD_INT 1
27946: NEG
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 1
27954: NEG
27955: PUSH
27956: LD_INT 2
27958: NEG
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 0
27966: PUSH
27967: LD_INT 2
27969: NEG
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: LD_INT 1
27977: PUSH
27978: LD_INT 1
27980: NEG
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: LD_INT 2
27988: PUSH
27989: LD_INT 0
27991: PUSH
27992: EMPTY
27993: LIST
27994: LIST
27995: PUSH
27996: LD_INT 2
27998: PUSH
27999: LD_INT 1
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: PUSH
28006: LD_INT 2
28008: PUSH
28009: LD_INT 2
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 1
28018: PUSH
28019: LD_INT 2
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 0
28028: PUSH
28029: LD_INT 2
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 1
28038: NEG
28039: PUSH
28040: LD_INT 1
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 2
28049: NEG
28050: PUSH
28051: LD_INT 0
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PUSH
28058: LD_INT 2
28060: NEG
28061: PUSH
28062: LD_INT 1
28064: NEG
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 2
28072: NEG
28073: PUSH
28074: LD_INT 2
28076: NEG
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28103: LD_ADDR_VAR 0 21
28107: PUSH
28108: LD_INT 0
28110: PUSH
28111: LD_INT 0
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: PUSH
28118: LD_INT 0
28120: PUSH
28121: LD_INT 1
28123: NEG
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 1
28131: PUSH
28132: LD_INT 0
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_INT 1
28141: PUSH
28142: LD_INT 1
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 0
28151: PUSH
28152: LD_INT 1
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: LD_INT 1
28161: NEG
28162: PUSH
28163: LD_INT 0
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: LD_INT 1
28172: NEG
28173: PUSH
28174: LD_INT 1
28176: NEG
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 1
28184: NEG
28185: PUSH
28186: LD_INT 2
28188: NEG
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 0
28196: PUSH
28197: LD_INT 2
28199: NEG
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 1
28207: PUSH
28208: LD_INT 1
28210: NEG
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 2
28218: PUSH
28219: LD_INT 0
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: LD_INT 2
28228: PUSH
28229: LD_INT 1
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: PUSH
28236: LD_INT 2
28238: PUSH
28239: LD_INT 2
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: PUSH
28246: LD_INT 1
28248: PUSH
28249: LD_INT 2
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 0
28258: PUSH
28259: LD_INT 2
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 1
28268: NEG
28269: PUSH
28270: LD_INT 1
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 2
28279: NEG
28280: PUSH
28281: LD_INT 0
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 2
28290: NEG
28291: PUSH
28292: LD_INT 1
28294: NEG
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 2
28302: NEG
28303: PUSH
28304: LD_INT 2
28306: NEG
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28333: LD_ADDR_VAR 0 22
28337: PUSH
28338: LD_INT 0
28340: PUSH
28341: LD_INT 0
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 0
28350: PUSH
28351: LD_INT 1
28353: NEG
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 1
28361: PUSH
28362: LD_INT 0
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: LD_INT 1
28371: PUSH
28372: LD_INT 1
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: LD_INT 0
28381: PUSH
28382: LD_INT 1
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 1
28391: NEG
28392: PUSH
28393: LD_INT 0
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PUSH
28400: LD_INT 1
28402: NEG
28403: PUSH
28404: LD_INT 1
28406: NEG
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 1
28414: NEG
28415: PUSH
28416: LD_INT 2
28418: NEG
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 0
28426: PUSH
28427: LD_INT 2
28429: NEG
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: LD_INT 1
28437: PUSH
28438: LD_INT 1
28440: NEG
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PUSH
28446: LD_INT 2
28448: PUSH
28449: LD_INT 0
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PUSH
28456: LD_INT 2
28458: PUSH
28459: LD_INT 1
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PUSH
28466: LD_INT 2
28468: PUSH
28469: LD_INT 2
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 1
28478: PUSH
28479: LD_INT 2
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 0
28488: PUSH
28489: LD_INT 2
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: LD_INT 1
28498: NEG
28499: PUSH
28500: LD_INT 1
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: LD_INT 2
28509: NEG
28510: PUSH
28511: LD_INT 0
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: LD_INT 2
28520: NEG
28521: PUSH
28522: LD_INT 1
28524: NEG
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 2
28532: NEG
28533: PUSH
28534: LD_INT 2
28536: NEG
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: LIST
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28563: LD_ADDR_VAR 0 23
28567: PUSH
28568: LD_INT 0
28570: PUSH
28571: LD_INT 0
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PUSH
28578: LD_INT 0
28580: PUSH
28581: LD_INT 1
28583: NEG
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: LD_INT 1
28591: PUSH
28592: LD_INT 0
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: LD_INT 1
28601: PUSH
28602: LD_INT 1
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 0
28611: PUSH
28612: LD_INT 1
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 1
28621: NEG
28622: PUSH
28623: LD_INT 0
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PUSH
28630: LD_INT 1
28632: NEG
28633: PUSH
28634: LD_INT 1
28636: NEG
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 1
28644: NEG
28645: PUSH
28646: LD_INT 2
28648: NEG
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: LD_INT 0
28656: PUSH
28657: LD_INT 2
28659: NEG
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 1
28667: PUSH
28668: LD_INT 1
28670: NEG
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: PUSH
28676: LD_INT 2
28678: PUSH
28679: LD_INT 0
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: PUSH
28686: LD_INT 2
28688: PUSH
28689: LD_INT 1
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 2
28698: PUSH
28699: LD_INT 2
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PUSH
28706: LD_INT 1
28708: PUSH
28709: LD_INT 2
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 0
28718: PUSH
28719: LD_INT 2
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: PUSH
28726: LD_INT 1
28728: NEG
28729: PUSH
28730: LD_INT 1
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 2
28739: NEG
28740: PUSH
28741: LD_INT 0
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 2
28750: NEG
28751: PUSH
28752: LD_INT 1
28754: NEG
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 2
28762: NEG
28763: PUSH
28764: LD_INT 2
28766: NEG
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 2
28774: NEG
28775: PUSH
28776: LD_INT 3
28778: NEG
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 1
28786: NEG
28787: PUSH
28788: LD_INT 3
28790: NEG
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: LD_INT 1
28798: PUSH
28799: LD_INT 2
28801: NEG
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: LD_INT 2
28809: PUSH
28810: LD_INT 1
28812: NEG
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
28843: LD_ADDR_VAR 0 24
28847: PUSH
28848: LD_INT 0
28850: PUSH
28851: LD_INT 0
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 0
28860: PUSH
28861: LD_INT 1
28863: NEG
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: LD_INT 1
28871: PUSH
28872: LD_INT 0
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 1
28881: PUSH
28882: LD_INT 1
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 0
28891: PUSH
28892: LD_INT 1
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 1
28901: NEG
28902: PUSH
28903: LD_INT 0
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: LD_INT 1
28912: NEG
28913: PUSH
28914: LD_INT 1
28916: NEG
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 1
28924: NEG
28925: PUSH
28926: LD_INT 2
28928: NEG
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: LD_INT 0
28936: PUSH
28937: LD_INT 2
28939: NEG
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 1
28947: PUSH
28948: LD_INT 1
28950: NEG
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PUSH
28956: LD_INT 2
28958: PUSH
28959: LD_INT 0
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: PUSH
28966: LD_INT 2
28968: PUSH
28969: LD_INT 1
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 2
28978: PUSH
28979: LD_INT 2
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 1
28988: PUSH
28989: LD_INT 2
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 0
28998: PUSH
28999: LD_INT 2
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 1
29008: NEG
29009: PUSH
29010: LD_INT 1
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 2
29019: NEG
29020: PUSH
29021: LD_INT 0
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 2
29030: NEG
29031: PUSH
29032: LD_INT 1
29034: NEG
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 2
29042: NEG
29043: PUSH
29044: LD_INT 2
29046: NEG
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 1
29054: PUSH
29055: LD_INT 2
29057: NEG
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PUSH
29063: LD_INT 2
29065: PUSH
29066: LD_INT 1
29068: NEG
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: LD_INT 3
29076: PUSH
29077: LD_INT 1
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: LD_INT 3
29086: PUSH
29087: LD_INT 2
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
29119: LD_ADDR_VAR 0 25
29123: PUSH
29124: LD_INT 0
29126: PUSH
29127: LD_INT 0
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: LD_INT 0
29136: PUSH
29137: LD_INT 1
29139: NEG
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PUSH
29145: LD_INT 1
29147: PUSH
29148: LD_INT 0
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PUSH
29155: LD_INT 1
29157: PUSH
29158: LD_INT 1
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: LD_INT 0
29167: PUSH
29168: LD_INT 1
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: LD_INT 1
29177: NEG
29178: PUSH
29179: LD_INT 0
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 1
29188: NEG
29189: PUSH
29190: LD_INT 1
29192: NEG
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PUSH
29198: LD_INT 1
29200: NEG
29201: PUSH
29202: LD_INT 2
29204: NEG
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: LD_INT 0
29212: PUSH
29213: LD_INT 2
29215: NEG
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PUSH
29221: LD_INT 1
29223: PUSH
29224: LD_INT 1
29226: NEG
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: LD_INT 2
29234: PUSH
29235: LD_INT 0
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: LD_INT 2
29244: PUSH
29245: LD_INT 1
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 2
29254: PUSH
29255: LD_INT 2
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PUSH
29262: LD_INT 1
29264: PUSH
29265: LD_INT 2
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 0
29274: PUSH
29275: LD_INT 2
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PUSH
29282: LD_INT 1
29284: NEG
29285: PUSH
29286: LD_INT 1
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 2
29295: NEG
29296: PUSH
29297: LD_INT 0
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 2
29306: NEG
29307: PUSH
29308: LD_INT 1
29310: NEG
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: LD_INT 2
29318: NEG
29319: PUSH
29320: LD_INT 2
29322: NEG
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 3
29330: PUSH
29331: LD_INT 1
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 3
29340: PUSH
29341: LD_INT 2
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: LD_INT 2
29350: PUSH
29351: LD_INT 3
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 1
29360: PUSH
29361: LD_INT 3
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29393: LD_ADDR_VAR 0 26
29397: PUSH
29398: LD_INT 0
29400: PUSH
29401: LD_INT 0
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PUSH
29408: LD_INT 0
29410: PUSH
29411: LD_INT 1
29413: NEG
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 1
29421: PUSH
29422: LD_INT 0
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 1
29431: PUSH
29432: LD_INT 1
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: LD_INT 0
29441: PUSH
29442: LD_INT 1
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: LD_INT 1
29451: NEG
29452: PUSH
29453: LD_INT 0
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 1
29462: NEG
29463: PUSH
29464: LD_INT 1
29466: NEG
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 1
29474: NEG
29475: PUSH
29476: LD_INT 2
29478: NEG
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 0
29486: PUSH
29487: LD_INT 2
29489: NEG
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: LD_INT 1
29497: PUSH
29498: LD_INT 1
29500: NEG
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: LD_INT 2
29508: PUSH
29509: LD_INT 0
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: LD_INT 2
29518: PUSH
29519: LD_INT 1
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: LD_INT 2
29528: PUSH
29529: LD_INT 2
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: PUSH
29536: LD_INT 1
29538: PUSH
29539: LD_INT 2
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: PUSH
29546: LD_INT 0
29548: PUSH
29549: LD_INT 2
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: LD_INT 1
29558: NEG
29559: PUSH
29560: LD_INT 1
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: LD_INT 2
29569: NEG
29570: PUSH
29571: LD_INT 0
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PUSH
29578: LD_INT 2
29580: NEG
29581: PUSH
29582: LD_INT 1
29584: NEG
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: LD_INT 2
29592: NEG
29593: PUSH
29594: LD_INT 2
29596: NEG
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 2
29604: PUSH
29605: LD_INT 3
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: LD_INT 1
29614: PUSH
29615: LD_INT 3
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: LD_INT 1
29624: NEG
29625: PUSH
29626: LD_INT 2
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 2
29635: NEG
29636: PUSH
29637: LD_INT 1
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29669: LD_ADDR_VAR 0 27
29673: PUSH
29674: LD_INT 0
29676: PUSH
29677: LD_INT 0
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 0
29686: PUSH
29687: LD_INT 1
29689: NEG
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 1
29697: PUSH
29698: LD_INT 0
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 1
29707: PUSH
29708: LD_INT 1
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 0
29717: PUSH
29718: LD_INT 1
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 1
29727: NEG
29728: PUSH
29729: LD_INT 0
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: LD_INT 1
29738: NEG
29739: PUSH
29740: LD_INT 1
29742: NEG
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: LD_INT 1
29750: NEG
29751: PUSH
29752: LD_INT 2
29754: NEG
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 0
29762: PUSH
29763: LD_INT 2
29765: NEG
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 1
29773: PUSH
29774: LD_INT 1
29776: NEG
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 2
29784: PUSH
29785: LD_INT 0
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: LD_INT 2
29794: PUSH
29795: LD_INT 1
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: LD_INT 2
29804: PUSH
29805: LD_INT 2
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 1
29814: PUSH
29815: LD_INT 2
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: PUSH
29822: LD_INT 0
29824: PUSH
29825: LD_INT 2
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: LD_INT 1
29834: NEG
29835: PUSH
29836: LD_INT 1
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: PUSH
29843: LD_INT 2
29845: NEG
29846: PUSH
29847: LD_INT 0
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 2
29856: NEG
29857: PUSH
29858: LD_INT 1
29860: NEG
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: LD_INT 2
29868: NEG
29869: PUSH
29870: LD_INT 2
29872: NEG
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 1
29880: NEG
29881: PUSH
29882: LD_INT 2
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 2
29891: NEG
29892: PUSH
29893: LD_INT 1
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 3
29902: NEG
29903: PUSH
29904: LD_INT 1
29906: NEG
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 3
29914: NEG
29915: PUSH
29916: LD_INT 2
29918: NEG
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: LIST
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29949: LD_ADDR_VAR 0 28
29953: PUSH
29954: LD_INT 0
29956: PUSH
29957: LD_INT 0
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 0
29966: PUSH
29967: LD_INT 1
29969: NEG
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 1
29977: PUSH
29978: LD_INT 0
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 1
29987: PUSH
29988: LD_INT 1
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: LD_INT 0
29997: PUSH
29998: LD_INT 1
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: LD_INT 1
30007: NEG
30008: PUSH
30009: LD_INT 0
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 1
30018: NEG
30019: PUSH
30020: LD_INT 1
30022: NEG
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 1
30030: NEG
30031: PUSH
30032: LD_INT 2
30034: NEG
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 0
30042: PUSH
30043: LD_INT 2
30045: NEG
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PUSH
30051: LD_INT 1
30053: PUSH
30054: LD_INT 1
30056: NEG
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: LD_INT 2
30064: PUSH
30065: LD_INT 0
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: LD_INT 2
30074: PUSH
30075: LD_INT 1
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 2
30084: PUSH
30085: LD_INT 2
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 1
30094: PUSH
30095: LD_INT 2
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 0
30104: PUSH
30105: LD_INT 2
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 1
30114: NEG
30115: PUSH
30116: LD_INT 1
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 2
30125: NEG
30126: PUSH
30127: LD_INT 0
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 2
30136: NEG
30137: PUSH
30138: LD_INT 1
30140: NEG
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 2
30148: NEG
30149: PUSH
30150: LD_INT 2
30152: NEG
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PUSH
30158: LD_INT 2
30160: NEG
30161: PUSH
30162: LD_INT 3
30164: NEG
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 1
30172: NEG
30173: PUSH
30174: LD_INT 3
30176: NEG
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 3
30184: NEG
30185: PUSH
30186: LD_INT 1
30188: NEG
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 3
30196: NEG
30197: PUSH
30198: LD_INT 2
30200: NEG
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30231: LD_ADDR_VAR 0 29
30235: PUSH
30236: LD_INT 0
30238: PUSH
30239: LD_INT 0
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 0
30248: PUSH
30249: LD_INT 1
30251: NEG
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 1
30259: PUSH
30260: LD_INT 0
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PUSH
30267: LD_INT 1
30269: PUSH
30270: LD_INT 1
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 0
30279: PUSH
30280: LD_INT 1
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 1
30289: NEG
30290: PUSH
30291: LD_INT 0
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 1
30300: NEG
30301: PUSH
30302: LD_INT 1
30304: NEG
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 1
30312: NEG
30313: PUSH
30314: LD_INT 2
30316: NEG
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 0
30324: PUSH
30325: LD_INT 2
30327: NEG
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PUSH
30333: LD_INT 1
30335: PUSH
30336: LD_INT 1
30338: NEG
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 2
30346: PUSH
30347: LD_INT 0
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 2
30356: PUSH
30357: LD_INT 1
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 1
30366: PUSH
30367: LD_INT 2
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 0
30376: PUSH
30377: LD_INT 2
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 1
30386: NEG
30387: PUSH
30388: LD_INT 1
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 2
30397: NEG
30398: PUSH
30399: LD_INT 1
30401: NEG
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 2
30409: NEG
30410: PUSH
30411: LD_INT 2
30413: NEG
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 2
30421: NEG
30422: PUSH
30423: LD_INT 3
30425: NEG
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 2
30433: PUSH
30434: LD_INT 1
30436: NEG
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 3
30444: PUSH
30445: LD_INT 1
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 1
30454: PUSH
30455: LD_INT 3
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 1
30464: NEG
30465: PUSH
30466: LD_INT 2
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 3
30475: NEG
30476: PUSH
30477: LD_INT 2
30479: NEG
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30510: LD_ADDR_VAR 0 30
30514: PUSH
30515: LD_INT 0
30517: PUSH
30518: LD_INT 0
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: LD_INT 0
30527: PUSH
30528: LD_INT 1
30530: NEG
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 1
30538: PUSH
30539: LD_INT 0
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 1
30548: PUSH
30549: LD_INT 1
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 0
30558: PUSH
30559: LD_INT 1
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 1
30568: NEG
30569: PUSH
30570: LD_INT 0
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 1
30579: NEG
30580: PUSH
30581: LD_INT 1
30583: NEG
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 1
30591: NEG
30592: PUSH
30593: LD_INT 2
30595: NEG
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: LD_INT 0
30603: PUSH
30604: LD_INT 2
30606: NEG
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: LD_INT 1
30614: PUSH
30615: LD_INT 1
30617: NEG
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: LD_INT 2
30625: PUSH
30626: LD_INT 0
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: LD_INT 2
30635: PUSH
30636: LD_INT 1
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: LD_INT 2
30645: PUSH
30646: LD_INT 2
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 1
30655: PUSH
30656: LD_INT 2
30658: PUSH
30659: EMPTY
30660: LIST
30661: LIST
30662: PUSH
30663: LD_INT 1
30665: NEG
30666: PUSH
30667: LD_INT 1
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 2
30676: NEG
30677: PUSH
30678: LD_INT 0
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 2
30687: NEG
30688: PUSH
30689: LD_INT 1
30691: NEG
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 1
30699: NEG
30700: PUSH
30701: LD_INT 3
30703: NEG
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: LD_INT 1
30711: PUSH
30712: LD_INT 2
30714: NEG
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 3
30722: PUSH
30723: LD_INT 2
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: LD_INT 2
30732: PUSH
30733: LD_INT 3
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: LD_INT 2
30742: NEG
30743: PUSH
30744: LD_INT 1
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: LD_INT 3
30753: NEG
30754: PUSH
30755: LD_INT 1
30757: NEG
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30788: LD_ADDR_VAR 0 31
30792: PUSH
30793: LD_INT 0
30795: PUSH
30796: LD_INT 0
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 0
30805: PUSH
30806: LD_INT 1
30808: NEG
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: PUSH
30814: LD_INT 1
30816: PUSH
30817: LD_INT 0
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 1
30826: PUSH
30827: LD_INT 1
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: LD_INT 0
30836: PUSH
30837: LD_INT 1
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 1
30846: NEG
30847: PUSH
30848: LD_INT 0
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 1
30857: NEG
30858: PUSH
30859: LD_INT 1
30861: NEG
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 1
30869: NEG
30870: PUSH
30871: LD_INT 2
30873: NEG
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 1
30881: PUSH
30882: LD_INT 1
30884: NEG
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: LD_INT 2
30892: PUSH
30893: LD_INT 0
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 2
30902: PUSH
30903: LD_INT 1
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 2
30912: PUSH
30913: LD_INT 2
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PUSH
30920: LD_INT 1
30922: PUSH
30923: LD_INT 2
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: LD_INT 0
30932: PUSH
30933: LD_INT 2
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 1
30942: NEG
30943: PUSH
30944: LD_INT 1
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 2
30953: NEG
30954: PUSH
30955: LD_INT 1
30957: NEG
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 2
30965: NEG
30966: PUSH
30967: LD_INT 2
30969: NEG
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 2
30977: NEG
30978: PUSH
30979: LD_INT 3
30981: NEG
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 2
30989: PUSH
30990: LD_INT 1
30992: NEG
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 3
31000: PUSH
31001: LD_INT 1
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 1
31010: PUSH
31011: LD_INT 3
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 1
31020: NEG
31021: PUSH
31022: LD_INT 2
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 3
31031: NEG
31032: PUSH
31033: LD_INT 2
31035: NEG
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31066: LD_ADDR_VAR 0 32
31070: PUSH
31071: LD_INT 0
31073: PUSH
31074: LD_INT 0
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 0
31083: PUSH
31084: LD_INT 1
31086: NEG
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 1
31094: PUSH
31095: LD_INT 0
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: LD_INT 1
31104: PUSH
31105: LD_INT 1
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 0
31114: PUSH
31115: LD_INT 1
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: LD_INT 1
31124: NEG
31125: PUSH
31126: LD_INT 0
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 1
31135: NEG
31136: PUSH
31137: LD_INT 1
31139: NEG
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 1
31147: NEG
31148: PUSH
31149: LD_INT 2
31151: NEG
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 0
31159: PUSH
31160: LD_INT 2
31162: NEG
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 1
31170: PUSH
31171: LD_INT 1
31173: NEG
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 2
31181: PUSH
31182: LD_INT 1
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PUSH
31189: LD_INT 2
31191: PUSH
31192: LD_INT 2
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 1
31201: PUSH
31202: LD_INT 2
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PUSH
31209: LD_INT 0
31211: PUSH
31212: LD_INT 2
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 1
31221: NEG
31222: PUSH
31223: LD_INT 1
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 2
31232: NEG
31233: PUSH
31234: LD_INT 0
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 2
31243: NEG
31244: PUSH
31245: LD_INT 1
31247: NEG
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 1
31255: NEG
31256: PUSH
31257: LD_INT 3
31259: NEG
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: LD_INT 1
31267: PUSH
31268: LD_INT 2
31270: NEG
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 3
31278: PUSH
31279: LD_INT 2
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 2
31288: PUSH
31289: LD_INT 3
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 2
31298: NEG
31299: PUSH
31300: LD_INT 1
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 3
31309: NEG
31310: PUSH
31311: LD_INT 1
31313: NEG
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31344: LD_ADDR_VAR 0 33
31348: PUSH
31349: LD_INT 0
31351: PUSH
31352: LD_INT 0
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 0
31361: PUSH
31362: LD_INT 1
31364: NEG
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 1
31372: PUSH
31373: LD_INT 0
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 1
31382: PUSH
31383: LD_INT 1
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 0
31392: PUSH
31393: LD_INT 1
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: LD_INT 1
31402: NEG
31403: PUSH
31404: LD_INT 0
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 1
31413: NEG
31414: PUSH
31415: LD_INT 1
31417: NEG
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 1
31425: NEG
31426: PUSH
31427: LD_INT 2
31429: NEG
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 1
31437: PUSH
31438: LD_INT 1
31440: NEG
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 2
31448: PUSH
31449: LD_INT 0
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 2
31458: PUSH
31459: LD_INT 1
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 1
31468: PUSH
31469: LD_INT 2
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: LD_INT 0
31478: PUSH
31479: LD_INT 2
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 1
31488: NEG
31489: PUSH
31490: LD_INT 1
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 2
31499: NEG
31500: PUSH
31501: LD_INT 0
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 2
31510: NEG
31511: PUSH
31512: LD_INT 1
31514: NEG
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 2
31522: NEG
31523: PUSH
31524: LD_INT 2
31526: NEG
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 2
31534: NEG
31535: PUSH
31536: LD_INT 3
31538: NEG
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 2
31546: PUSH
31547: LD_INT 1
31549: NEG
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 3
31557: PUSH
31558: LD_INT 1
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: LD_INT 1
31567: PUSH
31568: LD_INT 3
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 1
31577: NEG
31578: PUSH
31579: LD_INT 2
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 3
31588: NEG
31589: PUSH
31590: LD_INT 2
31592: NEG
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31623: LD_ADDR_VAR 0 34
31627: PUSH
31628: LD_INT 0
31630: PUSH
31631: LD_INT 0
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 0
31640: PUSH
31641: LD_INT 1
31643: NEG
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 1
31651: PUSH
31652: LD_INT 0
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 1
31661: PUSH
31662: LD_INT 1
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 0
31671: PUSH
31672: LD_INT 1
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 1
31681: NEG
31682: PUSH
31683: LD_INT 0
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 1
31692: NEG
31693: PUSH
31694: LD_INT 1
31696: NEG
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 1
31704: NEG
31705: PUSH
31706: LD_INT 2
31708: NEG
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: LD_INT 0
31716: PUSH
31717: LD_INT 2
31719: NEG
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 1
31727: PUSH
31728: LD_INT 1
31730: NEG
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 2
31738: PUSH
31739: LD_INT 1
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 2
31748: PUSH
31749: LD_INT 2
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_INT 1
31758: PUSH
31759: LD_INT 2
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_INT 1
31768: NEG
31769: PUSH
31770: LD_INT 1
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: LD_INT 2
31779: NEG
31780: PUSH
31781: LD_INT 0
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 2
31790: NEG
31791: PUSH
31792: LD_INT 1
31794: NEG
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 2
31802: NEG
31803: PUSH
31804: LD_INT 2
31806: NEG
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PUSH
31812: LD_INT 1
31814: NEG
31815: PUSH
31816: LD_INT 3
31818: NEG
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 1
31826: PUSH
31827: LD_INT 2
31829: NEG
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: LD_INT 3
31837: PUSH
31838: LD_INT 2
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 2
31847: PUSH
31848: LD_INT 3
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 2
31857: NEG
31858: PUSH
31859: LD_INT 1
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 3
31868: NEG
31869: PUSH
31870: LD_INT 1
31872: NEG
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31903: LD_ADDR_VAR 0 35
31907: PUSH
31908: LD_INT 0
31910: PUSH
31911: LD_INT 0
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 0
31920: PUSH
31921: LD_INT 1
31923: NEG
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 1
31931: PUSH
31932: LD_INT 0
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 1
31941: PUSH
31942: LD_INT 1
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 0
31951: PUSH
31952: LD_INT 1
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 1
31961: NEG
31962: PUSH
31963: LD_INT 0
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 1
31972: NEG
31973: PUSH
31974: LD_INT 1
31976: NEG
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 2
31984: PUSH
31985: LD_INT 1
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 2
31994: NEG
31995: PUSH
31996: LD_INT 1
31998: NEG
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32015: LD_ADDR_VAR 0 36
32019: PUSH
32020: LD_INT 0
32022: PUSH
32023: LD_INT 0
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 0
32032: PUSH
32033: LD_INT 1
32035: NEG
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 1
32043: PUSH
32044: LD_INT 0
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 1
32053: PUSH
32054: LD_INT 1
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 0
32063: PUSH
32064: LD_INT 1
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 1
32073: NEG
32074: PUSH
32075: LD_INT 0
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 1
32084: NEG
32085: PUSH
32086: LD_INT 1
32088: NEG
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 1
32096: NEG
32097: PUSH
32098: LD_INT 2
32100: NEG
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 1
32108: PUSH
32109: LD_INT 2
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32127: LD_ADDR_VAR 0 37
32131: PUSH
32132: LD_INT 0
32134: PUSH
32135: LD_INT 0
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 0
32144: PUSH
32145: LD_INT 1
32147: NEG
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 1
32155: PUSH
32156: LD_INT 0
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 1
32165: PUSH
32166: LD_INT 1
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 0
32175: PUSH
32176: LD_INT 1
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 1
32185: NEG
32186: PUSH
32187: LD_INT 0
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 1
32196: NEG
32197: PUSH
32198: LD_INT 1
32200: NEG
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 1
32208: PUSH
32209: LD_INT 1
32211: NEG
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: LD_INT 1
32219: NEG
32220: PUSH
32221: LD_INT 1
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32239: LD_ADDR_VAR 0 38
32243: PUSH
32244: LD_INT 0
32246: PUSH
32247: LD_INT 0
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 0
32256: PUSH
32257: LD_INT 1
32259: NEG
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 1
32267: PUSH
32268: LD_INT 0
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 1
32277: PUSH
32278: LD_INT 1
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 0
32287: PUSH
32288: LD_INT 1
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 1
32297: NEG
32298: PUSH
32299: LD_INT 0
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 1
32308: NEG
32309: PUSH
32310: LD_INT 1
32312: NEG
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 2
32320: PUSH
32321: LD_INT 1
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 2
32330: NEG
32331: PUSH
32332: LD_INT 1
32334: NEG
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32351: LD_ADDR_VAR 0 39
32355: PUSH
32356: LD_INT 0
32358: PUSH
32359: LD_INT 0
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: LD_INT 0
32368: PUSH
32369: LD_INT 1
32371: NEG
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 1
32379: PUSH
32380: LD_INT 0
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 1
32389: PUSH
32390: LD_INT 1
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 0
32399: PUSH
32400: LD_INT 1
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 1
32409: NEG
32410: PUSH
32411: LD_INT 0
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 1
32420: NEG
32421: PUSH
32422: LD_INT 1
32424: NEG
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 1
32432: NEG
32433: PUSH
32434: LD_INT 2
32436: NEG
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: LD_INT 1
32444: PUSH
32445: LD_INT 2
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32463: LD_ADDR_VAR 0 40
32467: PUSH
32468: LD_INT 0
32470: PUSH
32471: LD_INT 0
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 0
32480: PUSH
32481: LD_INT 1
32483: NEG
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: LD_INT 1
32491: PUSH
32492: LD_INT 0
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 1
32501: PUSH
32502: LD_INT 1
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 0
32511: PUSH
32512: LD_INT 1
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 1
32521: NEG
32522: PUSH
32523: LD_INT 0
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: LD_INT 1
32532: NEG
32533: PUSH
32534: LD_INT 1
32536: NEG
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: LD_INT 1
32544: PUSH
32545: LD_INT 1
32547: NEG
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 1
32555: NEG
32556: PUSH
32557: LD_INT 1
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32575: LD_ADDR_VAR 0 41
32579: PUSH
32580: LD_INT 0
32582: PUSH
32583: LD_INT 0
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 0
32592: PUSH
32593: LD_INT 1
32595: NEG
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 1
32603: PUSH
32604: LD_INT 0
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 1
32613: PUSH
32614: LD_INT 1
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 0
32623: PUSH
32624: LD_INT 1
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 1
32633: NEG
32634: PUSH
32635: LD_INT 0
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 1
32644: NEG
32645: PUSH
32646: LD_INT 1
32648: NEG
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 1
32656: NEG
32657: PUSH
32658: LD_INT 2
32660: NEG
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 1
32668: PUSH
32669: LD_INT 1
32671: NEG
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: PUSH
32677: LD_INT 2
32679: PUSH
32680: LD_INT 0
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: PUSH
32687: LD_INT 2
32689: PUSH
32690: LD_INT 1
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 2
32699: PUSH
32700: LD_INT 2
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 1
32709: PUSH
32710: LD_INT 2
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 1
32719: NEG
32720: PUSH
32721: LD_INT 1
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 2
32730: NEG
32731: PUSH
32732: LD_INT 0
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 2
32741: NEG
32742: PUSH
32743: LD_INT 1
32745: NEG
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 2
32753: NEG
32754: PUSH
32755: LD_INT 2
32757: NEG
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 2
32765: NEG
32766: PUSH
32767: LD_INT 3
32769: NEG
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 2
32777: PUSH
32778: LD_INT 1
32780: NEG
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 3
32788: PUSH
32789: LD_INT 0
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 3
32798: PUSH
32799: LD_INT 1
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: LD_INT 3
32808: PUSH
32809: LD_INT 2
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 3
32818: PUSH
32819: LD_INT 3
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 2
32828: PUSH
32829: LD_INT 3
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 2
32838: NEG
32839: PUSH
32840: LD_INT 1
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 3
32849: NEG
32850: PUSH
32851: LD_INT 0
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 3
32860: NEG
32861: PUSH
32862: LD_INT 1
32864: NEG
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 3
32872: NEG
32873: PUSH
32874: LD_INT 2
32876: NEG
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 3
32884: NEG
32885: PUSH
32886: LD_INT 3
32888: NEG
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32925: LD_ADDR_VAR 0 42
32929: PUSH
32930: LD_INT 0
32932: PUSH
32933: LD_INT 0
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 0
32942: PUSH
32943: LD_INT 1
32945: NEG
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: LD_INT 1
32953: PUSH
32954: LD_INT 0
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 1
32963: PUSH
32964: LD_INT 1
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 0
32973: PUSH
32974: LD_INT 1
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 1
32983: NEG
32984: PUSH
32985: LD_INT 0
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 1
32994: NEG
32995: PUSH
32996: LD_INT 1
32998: NEG
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 1
33006: NEG
33007: PUSH
33008: LD_INT 2
33010: NEG
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: PUSH
33016: LD_INT 0
33018: PUSH
33019: LD_INT 2
33021: NEG
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 1
33029: PUSH
33030: LD_INT 1
33032: NEG
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 2
33040: PUSH
33041: LD_INT 1
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 2
33050: PUSH
33051: LD_INT 2
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 1
33060: PUSH
33061: LD_INT 2
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: PUSH
33068: LD_INT 0
33070: PUSH
33071: LD_INT 2
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 1
33080: NEG
33081: PUSH
33082: LD_INT 1
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 2
33091: NEG
33092: PUSH
33093: LD_INT 1
33095: NEG
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 2
33103: NEG
33104: PUSH
33105: LD_INT 2
33107: NEG
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 2
33115: NEG
33116: PUSH
33117: LD_INT 3
33119: NEG
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 1
33127: NEG
33128: PUSH
33129: LD_INT 3
33131: NEG
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_INT 0
33139: PUSH
33140: LD_INT 3
33142: NEG
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: LD_INT 1
33150: PUSH
33151: LD_INT 2
33153: NEG
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 3
33161: PUSH
33162: LD_INT 2
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 3
33171: PUSH
33172: LD_INT 3
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 2
33181: PUSH
33182: LD_INT 3
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 1
33191: PUSH
33192: LD_INT 3
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: PUSH
33199: LD_INT 0
33201: PUSH
33202: LD_INT 3
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 1
33211: NEG
33212: PUSH
33213: LD_INT 2
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: LD_INT 3
33222: NEG
33223: PUSH
33224: LD_INT 2
33226: NEG
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PUSH
33232: LD_INT 3
33234: NEG
33235: PUSH
33236: LD_INT 3
33238: NEG
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33275: LD_ADDR_VAR 0 43
33279: PUSH
33280: LD_INT 0
33282: PUSH
33283: LD_INT 0
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 0
33292: PUSH
33293: LD_INT 1
33295: NEG
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 1
33303: PUSH
33304: LD_INT 0
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 1
33313: PUSH
33314: LD_INT 1
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 0
33323: PUSH
33324: LD_INT 1
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 1
33333: NEG
33334: PUSH
33335: LD_INT 0
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 1
33344: NEG
33345: PUSH
33346: LD_INT 1
33348: NEG
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 1
33356: NEG
33357: PUSH
33358: LD_INT 2
33360: NEG
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: LD_INT 0
33368: PUSH
33369: LD_INT 2
33371: NEG
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 1
33379: PUSH
33380: LD_INT 1
33382: NEG
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 2
33390: PUSH
33391: LD_INT 0
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 2
33400: PUSH
33401: LD_INT 1
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 1
33410: PUSH
33411: LD_INT 2
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 0
33420: PUSH
33421: LD_INT 2
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 1
33430: NEG
33431: PUSH
33432: LD_INT 1
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 2
33441: NEG
33442: PUSH
33443: LD_INT 0
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PUSH
33450: LD_INT 2
33452: NEG
33453: PUSH
33454: LD_INT 1
33456: NEG
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 1
33464: NEG
33465: PUSH
33466: LD_INT 3
33468: NEG
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 0
33476: PUSH
33477: LD_INT 3
33479: NEG
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: LD_INT 1
33487: PUSH
33488: LD_INT 2
33490: NEG
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PUSH
33496: LD_INT 2
33498: PUSH
33499: LD_INT 1
33501: NEG
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PUSH
33507: LD_INT 3
33509: PUSH
33510: LD_INT 0
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: PUSH
33517: LD_INT 3
33519: PUSH
33520: LD_INT 1
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: PUSH
33527: LD_INT 1
33529: PUSH
33530: LD_INT 3
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 0
33539: PUSH
33540: LD_INT 3
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 1
33549: NEG
33550: PUSH
33551: LD_INT 2
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 2
33560: NEG
33561: PUSH
33562: LD_INT 1
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 3
33571: NEG
33572: PUSH
33573: LD_INT 0
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 3
33582: NEG
33583: PUSH
33584: LD_INT 1
33586: NEG
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33623: LD_ADDR_VAR 0 44
33627: PUSH
33628: LD_INT 0
33630: PUSH
33631: LD_INT 0
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 0
33640: PUSH
33641: LD_INT 1
33643: NEG
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 1
33651: PUSH
33652: LD_INT 0
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 1
33661: PUSH
33662: LD_INT 1
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: LD_INT 0
33671: PUSH
33672: LD_INT 1
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 1
33681: NEG
33682: PUSH
33683: LD_INT 0
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PUSH
33690: LD_INT 1
33692: NEG
33693: PUSH
33694: LD_INT 1
33696: NEG
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: LD_INT 1
33704: NEG
33705: PUSH
33706: LD_INT 2
33708: NEG
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 1
33716: PUSH
33717: LD_INT 1
33719: NEG
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 2
33727: PUSH
33728: LD_INT 0
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 2
33737: PUSH
33738: LD_INT 1
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 2
33747: PUSH
33748: LD_INT 2
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 1
33757: PUSH
33758: LD_INT 2
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 1
33767: NEG
33768: PUSH
33769: LD_INT 1
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 2
33778: NEG
33779: PUSH
33780: LD_INT 0
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 2
33789: NEG
33790: PUSH
33791: LD_INT 1
33793: NEG
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 2
33801: NEG
33802: PUSH
33803: LD_INT 2
33805: NEG
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 2
33813: NEG
33814: PUSH
33815: LD_INT 3
33817: NEG
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 2
33825: PUSH
33826: LD_INT 1
33828: NEG
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 3
33836: PUSH
33837: LD_INT 0
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 3
33846: PUSH
33847: LD_INT 1
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 3
33856: PUSH
33857: LD_INT 2
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 3
33866: PUSH
33867: LD_INT 3
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 2
33876: PUSH
33877: LD_INT 3
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: LD_INT 2
33886: NEG
33887: PUSH
33888: LD_INT 1
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PUSH
33895: LD_INT 3
33897: NEG
33898: PUSH
33899: LD_INT 0
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: LD_INT 3
33908: NEG
33909: PUSH
33910: LD_INT 1
33912: NEG
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 3
33920: NEG
33921: PUSH
33922: LD_INT 2
33924: NEG
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 3
33932: NEG
33933: PUSH
33934: LD_INT 3
33936: NEG
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33973: LD_ADDR_VAR 0 45
33977: PUSH
33978: LD_INT 0
33980: PUSH
33981: LD_INT 0
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: LD_INT 0
33990: PUSH
33991: LD_INT 1
33993: NEG
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 1
34001: PUSH
34002: LD_INT 0
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 1
34011: PUSH
34012: LD_INT 1
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 0
34021: PUSH
34022: LD_INT 1
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 1
34031: NEG
34032: PUSH
34033: LD_INT 0
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 1
34042: NEG
34043: PUSH
34044: LD_INT 1
34046: NEG
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 1
34054: NEG
34055: PUSH
34056: LD_INT 2
34058: NEG
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 0
34066: PUSH
34067: LD_INT 2
34069: NEG
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 1
34077: PUSH
34078: LD_INT 1
34080: NEG
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 2
34088: PUSH
34089: LD_INT 1
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 2
34098: PUSH
34099: LD_INT 2
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 1
34108: PUSH
34109: LD_INT 2
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 0
34118: PUSH
34119: LD_INT 2
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: PUSH
34126: LD_INT 1
34128: NEG
34129: PUSH
34130: LD_INT 1
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 2
34139: NEG
34140: PUSH
34141: LD_INT 1
34143: NEG
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 2
34151: NEG
34152: PUSH
34153: LD_INT 2
34155: NEG
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 2
34163: NEG
34164: PUSH
34165: LD_INT 3
34167: NEG
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: LD_INT 1
34175: NEG
34176: PUSH
34177: LD_INT 3
34179: NEG
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: PUSH
34185: LD_INT 0
34187: PUSH
34188: LD_INT 3
34190: NEG
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: LD_INT 1
34198: PUSH
34199: LD_INT 2
34201: NEG
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: LD_INT 3
34209: PUSH
34210: LD_INT 2
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 3
34219: PUSH
34220: LD_INT 3
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: LD_INT 2
34229: PUSH
34230: LD_INT 3
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 1
34239: PUSH
34240: LD_INT 3
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 0
34249: PUSH
34250: LD_INT 3
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 1
34259: NEG
34260: PUSH
34261: LD_INT 2
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 3
34270: NEG
34271: PUSH
34272: LD_INT 2
34274: NEG
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 3
34282: NEG
34283: PUSH
34284: LD_INT 3
34286: NEG
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34323: LD_ADDR_VAR 0 46
34327: PUSH
34328: LD_INT 0
34330: PUSH
34331: LD_INT 0
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 0
34340: PUSH
34341: LD_INT 1
34343: NEG
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 1
34351: PUSH
34352: LD_INT 0
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 1
34361: PUSH
34362: LD_INT 1
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 0
34371: PUSH
34372: LD_INT 1
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 1
34381: NEG
34382: PUSH
34383: LD_INT 0
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 1
34392: NEG
34393: PUSH
34394: LD_INT 1
34396: NEG
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 1
34404: NEG
34405: PUSH
34406: LD_INT 2
34408: NEG
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 0
34416: PUSH
34417: LD_INT 2
34419: NEG
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 1
34427: PUSH
34428: LD_INT 1
34430: NEG
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 2
34438: PUSH
34439: LD_INT 0
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 2
34448: PUSH
34449: LD_INT 1
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 1
34458: PUSH
34459: LD_INT 2
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 0
34468: PUSH
34469: LD_INT 2
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 1
34478: NEG
34479: PUSH
34480: LD_INT 1
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 2
34489: NEG
34490: PUSH
34491: LD_INT 0
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 2
34500: NEG
34501: PUSH
34502: LD_INT 1
34504: NEG
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 1
34512: NEG
34513: PUSH
34514: LD_INT 3
34516: NEG
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: LD_INT 0
34524: PUSH
34525: LD_INT 3
34527: NEG
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: PUSH
34533: LD_INT 1
34535: PUSH
34536: LD_INT 2
34538: NEG
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 2
34546: PUSH
34547: LD_INT 1
34549: NEG
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 3
34557: PUSH
34558: LD_INT 0
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 3
34567: PUSH
34568: LD_INT 1
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: LD_INT 1
34577: PUSH
34578: LD_INT 3
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 0
34587: PUSH
34588: LD_INT 3
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 1
34597: NEG
34598: PUSH
34599: LD_INT 2
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: LD_INT 2
34608: NEG
34609: PUSH
34610: LD_INT 1
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 3
34619: NEG
34620: PUSH
34621: LD_INT 0
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 3
34630: NEG
34631: PUSH
34632: LD_INT 1
34634: NEG
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: LIST
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34671: LD_ADDR_VAR 0 47
34675: PUSH
34676: LD_INT 0
34678: PUSH
34679: LD_INT 0
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: LD_INT 0
34688: PUSH
34689: LD_INT 1
34691: NEG
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 1
34699: PUSH
34700: LD_INT 0
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: LD_INT 1
34709: PUSH
34710: LD_INT 1
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: PUSH
34717: LD_INT 0
34719: PUSH
34720: LD_INT 1
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 1
34729: NEG
34730: PUSH
34731: LD_INT 0
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 1
34740: NEG
34741: PUSH
34742: LD_INT 1
34744: NEG
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 1
34752: NEG
34753: PUSH
34754: LD_INT 2
34756: NEG
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 0
34764: PUSH
34765: LD_INT 2
34767: NEG
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 1
34775: PUSH
34776: LD_INT 1
34778: NEG
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 2
34786: NEG
34787: PUSH
34788: LD_INT 1
34790: NEG
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 2
34798: NEG
34799: PUSH
34800: LD_INT 2
34802: NEG
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
34822: LD_ADDR_VAR 0 48
34826: PUSH
34827: LD_INT 0
34829: PUSH
34830: LD_INT 0
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 0
34839: PUSH
34840: LD_INT 1
34842: NEG
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 1
34850: PUSH
34851: LD_INT 0
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: LD_INT 1
34860: PUSH
34861: LD_INT 1
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 0
34870: PUSH
34871: LD_INT 1
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 1
34880: NEG
34881: PUSH
34882: LD_INT 0
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 1
34891: NEG
34892: PUSH
34893: LD_INT 1
34895: NEG
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 1
34903: NEG
34904: PUSH
34905: LD_INT 2
34907: NEG
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 0
34915: PUSH
34916: LD_INT 2
34918: NEG
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 1
34926: PUSH
34927: LD_INT 1
34929: NEG
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 2
34937: PUSH
34938: LD_INT 0
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 2
34947: PUSH
34948: LD_INT 1
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
34969: LD_ADDR_VAR 0 49
34973: PUSH
34974: LD_INT 0
34976: PUSH
34977: LD_INT 0
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 0
34986: PUSH
34987: LD_INT 1
34989: NEG
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 1
34997: PUSH
34998: LD_INT 0
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 1
35007: PUSH
35008: LD_INT 1
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 0
35017: PUSH
35018: LD_INT 1
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 1
35027: NEG
35028: PUSH
35029: LD_INT 0
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 1
35038: NEG
35039: PUSH
35040: LD_INT 1
35042: NEG
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 1
35050: PUSH
35051: LD_INT 1
35053: NEG
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 2
35061: PUSH
35062: LD_INT 0
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 2
35071: PUSH
35072: LD_INT 1
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 2
35081: PUSH
35082: LD_INT 2
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 1
35091: PUSH
35092: LD_INT 2
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35113: LD_ADDR_VAR 0 50
35117: PUSH
35118: LD_INT 0
35120: PUSH
35121: LD_INT 0
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 0
35130: PUSH
35131: LD_INT 1
35133: NEG
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 1
35141: PUSH
35142: LD_INT 0
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: LD_INT 1
35151: PUSH
35152: LD_INT 1
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 0
35161: PUSH
35162: LD_INT 1
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 1
35171: NEG
35172: PUSH
35173: LD_INT 0
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 1
35182: NEG
35183: PUSH
35184: LD_INT 1
35186: NEG
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: LD_INT 2
35194: PUSH
35195: LD_INT 1
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 2
35204: PUSH
35205: LD_INT 2
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 1
35214: PUSH
35215: LD_INT 2
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: LD_INT 0
35224: PUSH
35225: LD_INT 2
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 1
35234: NEG
35235: PUSH
35236: LD_INT 1
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: LIST
35255: LIST
35256: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35257: LD_ADDR_VAR 0 51
35261: PUSH
35262: LD_INT 0
35264: PUSH
35265: LD_INT 0
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 0
35274: PUSH
35275: LD_INT 1
35277: NEG
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 1
35285: PUSH
35286: LD_INT 0
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 1
35295: PUSH
35296: LD_INT 1
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 0
35305: PUSH
35306: LD_INT 1
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 1
35315: NEG
35316: PUSH
35317: LD_INT 0
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: PUSH
35324: LD_INT 1
35326: NEG
35327: PUSH
35328: LD_INT 1
35330: NEG
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PUSH
35336: LD_INT 1
35338: PUSH
35339: LD_INT 2
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: PUSH
35346: LD_INT 0
35348: PUSH
35349: LD_INT 2
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PUSH
35356: LD_INT 1
35358: NEG
35359: PUSH
35360: LD_INT 1
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 2
35369: NEG
35370: PUSH
35371: LD_INT 0
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: PUSH
35378: LD_INT 2
35380: NEG
35381: PUSH
35382: LD_INT 1
35384: NEG
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35404: LD_ADDR_VAR 0 52
35408: PUSH
35409: LD_INT 0
35411: PUSH
35412: LD_INT 0
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_INT 0
35421: PUSH
35422: LD_INT 1
35424: NEG
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 1
35432: PUSH
35433: LD_INT 0
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 1
35442: PUSH
35443: LD_INT 1
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 0
35452: PUSH
35453: LD_INT 1
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 1
35462: NEG
35463: PUSH
35464: LD_INT 0
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 1
35473: NEG
35474: PUSH
35475: LD_INT 1
35477: NEG
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 1
35485: NEG
35486: PUSH
35487: LD_INT 2
35489: NEG
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: LD_INT 1
35497: NEG
35498: PUSH
35499: LD_INT 1
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 2
35508: NEG
35509: PUSH
35510: LD_INT 0
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: LD_INT 2
35519: NEG
35520: PUSH
35521: LD_INT 1
35523: NEG
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 2
35531: NEG
35532: PUSH
35533: LD_INT 2
35535: NEG
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35555: LD_ADDR_VAR 0 53
35559: PUSH
35560: LD_INT 0
35562: PUSH
35563: LD_INT 0
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 0
35572: PUSH
35573: LD_INT 1
35575: NEG
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 1
35583: PUSH
35584: LD_INT 0
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 1
35593: PUSH
35594: LD_INT 1
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 0
35603: PUSH
35604: LD_INT 1
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 1
35613: NEG
35614: PUSH
35615: LD_INT 0
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: PUSH
35622: LD_INT 1
35624: NEG
35625: PUSH
35626: LD_INT 1
35628: NEG
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: LD_INT 1
35636: NEG
35637: PUSH
35638: LD_INT 2
35640: NEG
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 0
35648: PUSH
35649: LD_INT 2
35651: NEG
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 1
35659: PUSH
35660: LD_INT 1
35662: NEG
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 2
35670: PUSH
35671: LD_INT 0
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 2
35680: PUSH
35681: LD_INT 1
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PUSH
35688: LD_INT 2
35690: PUSH
35691: LD_INT 2
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 1
35700: PUSH
35701: LD_INT 2
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: LD_INT 0
35710: PUSH
35711: LD_INT 2
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: LD_INT 1
35720: NEG
35721: PUSH
35722: LD_INT 1
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 2
35731: NEG
35732: PUSH
35733: LD_INT 0
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 2
35742: NEG
35743: PUSH
35744: LD_INT 1
35746: NEG
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 2
35754: NEG
35755: PUSH
35756: LD_INT 2
35758: NEG
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35785: LD_ADDR_VAR 0 54
35789: PUSH
35790: LD_INT 0
35792: PUSH
35793: LD_INT 0
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 0
35802: PUSH
35803: LD_INT 1
35805: NEG
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 1
35813: PUSH
35814: LD_INT 0
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 1
35823: PUSH
35824: LD_INT 1
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 0
35833: PUSH
35834: LD_INT 1
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 1
35843: NEG
35844: PUSH
35845: LD_INT 0
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 1
35854: NEG
35855: PUSH
35856: LD_INT 1
35858: NEG
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 1
35866: NEG
35867: PUSH
35868: LD_INT 2
35870: NEG
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 0
35878: PUSH
35879: LD_INT 2
35881: NEG
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 1
35889: PUSH
35890: LD_INT 1
35892: NEG
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 2
35900: PUSH
35901: LD_INT 0
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 2
35910: PUSH
35911: LD_INT 1
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 2
35920: PUSH
35921: LD_INT 2
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: LD_INT 1
35930: PUSH
35931: LD_INT 2
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 0
35940: PUSH
35941: LD_INT 2
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 1
35950: NEG
35951: PUSH
35952: LD_INT 1
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 2
35961: NEG
35962: PUSH
35963: LD_INT 0
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: LD_INT 2
35972: NEG
35973: PUSH
35974: LD_INT 1
35976: NEG
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: LD_INT 2
35984: NEG
35985: PUSH
35986: LD_INT 2
35988: NEG
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36015: LD_ADDR_VAR 0 55
36019: PUSH
36020: LD_INT 0
36022: PUSH
36023: LD_INT 0
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PUSH
36030: LD_INT 0
36032: PUSH
36033: LD_INT 1
36035: NEG
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 1
36043: PUSH
36044: LD_INT 0
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 1
36053: PUSH
36054: LD_INT 1
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 0
36063: PUSH
36064: LD_INT 1
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 1
36073: NEG
36074: PUSH
36075: LD_INT 0
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 1
36084: NEG
36085: PUSH
36086: LD_INT 1
36088: NEG
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 1
36096: NEG
36097: PUSH
36098: LD_INT 2
36100: NEG
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 0
36108: PUSH
36109: LD_INT 2
36111: NEG
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 1
36119: PUSH
36120: LD_INT 1
36122: NEG
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 2
36130: PUSH
36131: LD_INT 0
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 2
36140: PUSH
36141: LD_INT 1
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 2
36150: PUSH
36151: LD_INT 2
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 1
36160: PUSH
36161: LD_INT 2
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 0
36170: PUSH
36171: LD_INT 2
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 1
36180: NEG
36181: PUSH
36182: LD_INT 1
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 2
36191: NEG
36192: PUSH
36193: LD_INT 0
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: PUSH
36200: LD_INT 2
36202: NEG
36203: PUSH
36204: LD_INT 1
36206: NEG
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 2
36214: NEG
36215: PUSH
36216: LD_INT 2
36218: NEG
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36245: LD_ADDR_VAR 0 56
36249: PUSH
36250: LD_INT 0
36252: PUSH
36253: LD_INT 0
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 0
36262: PUSH
36263: LD_INT 1
36265: NEG
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 1
36273: PUSH
36274: LD_INT 0
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 1
36283: PUSH
36284: LD_INT 1
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: LD_INT 0
36293: PUSH
36294: LD_INT 1
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: LD_INT 1
36303: NEG
36304: PUSH
36305: LD_INT 0
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 1
36314: NEG
36315: PUSH
36316: LD_INT 1
36318: NEG
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 1
36326: NEG
36327: PUSH
36328: LD_INT 2
36330: NEG
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 0
36338: PUSH
36339: LD_INT 2
36341: NEG
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 1
36349: PUSH
36350: LD_INT 1
36352: NEG
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 2
36360: PUSH
36361: LD_INT 0
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 2
36370: PUSH
36371: LD_INT 1
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 2
36380: PUSH
36381: LD_INT 2
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 1
36390: PUSH
36391: LD_INT 2
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 0
36400: PUSH
36401: LD_INT 2
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PUSH
36408: LD_INT 1
36410: NEG
36411: PUSH
36412: LD_INT 1
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 2
36421: NEG
36422: PUSH
36423: LD_INT 0
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 2
36432: NEG
36433: PUSH
36434: LD_INT 1
36436: NEG
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 2
36444: NEG
36445: PUSH
36446: LD_INT 2
36448: NEG
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36475: LD_ADDR_VAR 0 57
36479: PUSH
36480: LD_INT 0
36482: PUSH
36483: LD_INT 0
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 0
36492: PUSH
36493: LD_INT 1
36495: NEG
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: LD_INT 1
36503: PUSH
36504: LD_INT 0
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 1
36513: PUSH
36514: LD_INT 1
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 0
36523: PUSH
36524: LD_INT 1
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 1
36533: NEG
36534: PUSH
36535: LD_INT 0
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: LD_INT 1
36544: NEG
36545: PUSH
36546: LD_INT 1
36548: NEG
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 1
36556: NEG
36557: PUSH
36558: LD_INT 2
36560: NEG
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 0
36568: PUSH
36569: LD_INT 2
36571: NEG
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 1
36579: PUSH
36580: LD_INT 1
36582: NEG
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 2
36590: PUSH
36591: LD_INT 0
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 2
36600: PUSH
36601: LD_INT 1
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PUSH
36608: LD_INT 2
36610: PUSH
36611: LD_INT 2
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 1
36620: PUSH
36621: LD_INT 2
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 0
36630: PUSH
36631: LD_INT 2
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 1
36640: NEG
36641: PUSH
36642: LD_INT 1
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 2
36651: NEG
36652: PUSH
36653: LD_INT 0
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: PUSH
36660: LD_INT 2
36662: NEG
36663: PUSH
36664: LD_INT 1
36666: NEG
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 2
36674: NEG
36675: PUSH
36676: LD_INT 2
36678: NEG
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36705: LD_ADDR_VAR 0 58
36709: PUSH
36710: LD_INT 0
36712: PUSH
36713: LD_INT 0
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 0
36722: PUSH
36723: LD_INT 1
36725: NEG
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PUSH
36731: LD_INT 1
36733: PUSH
36734: LD_INT 0
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 1
36743: PUSH
36744: LD_INT 1
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: LD_INT 0
36753: PUSH
36754: LD_INT 1
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 1
36763: NEG
36764: PUSH
36765: LD_INT 0
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 1
36774: NEG
36775: PUSH
36776: LD_INT 1
36778: NEG
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 1
36786: NEG
36787: PUSH
36788: LD_INT 2
36790: NEG
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 0
36798: PUSH
36799: LD_INT 2
36801: NEG
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 1
36809: PUSH
36810: LD_INT 1
36812: NEG
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 2
36820: PUSH
36821: LD_INT 0
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 2
36830: PUSH
36831: LD_INT 1
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 2
36840: PUSH
36841: LD_INT 2
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 1
36850: PUSH
36851: LD_INT 2
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 0
36860: PUSH
36861: LD_INT 2
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 1
36870: NEG
36871: PUSH
36872: LD_INT 1
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 2
36881: NEG
36882: PUSH
36883: LD_INT 0
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: LD_INT 2
36892: NEG
36893: PUSH
36894: LD_INT 1
36896: NEG
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 2
36904: NEG
36905: PUSH
36906: LD_INT 2
36908: NEG
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36935: LD_ADDR_VAR 0 59
36939: PUSH
36940: LD_INT 0
36942: PUSH
36943: LD_INT 0
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 0
36952: PUSH
36953: LD_INT 1
36955: NEG
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 1
36963: PUSH
36964: LD_INT 0
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 1
36973: PUSH
36974: LD_INT 1
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 0
36983: PUSH
36984: LD_INT 1
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 1
36993: NEG
36994: PUSH
36995: LD_INT 0
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: LD_INT 1
37004: NEG
37005: PUSH
37006: LD_INT 1
37008: NEG
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37023: LD_ADDR_VAR 0 60
37027: PUSH
37028: LD_INT 0
37030: PUSH
37031: LD_INT 0
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 0
37040: PUSH
37041: LD_INT 1
37043: NEG
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: LD_INT 1
37051: PUSH
37052: LD_INT 0
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PUSH
37059: LD_INT 1
37061: PUSH
37062: LD_INT 1
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 0
37071: PUSH
37072: LD_INT 1
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 1
37081: NEG
37082: PUSH
37083: LD_INT 0
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 1
37092: NEG
37093: PUSH
37094: LD_INT 1
37096: NEG
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37111: LD_ADDR_VAR 0 61
37115: PUSH
37116: LD_INT 0
37118: PUSH
37119: LD_INT 0
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 0
37128: PUSH
37129: LD_INT 1
37131: NEG
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 1
37139: PUSH
37140: LD_INT 0
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 1
37149: PUSH
37150: LD_INT 1
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: LD_INT 0
37159: PUSH
37160: LD_INT 1
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 1
37169: NEG
37170: PUSH
37171: LD_INT 0
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PUSH
37178: LD_INT 1
37180: NEG
37181: PUSH
37182: LD_INT 1
37184: NEG
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37199: LD_ADDR_VAR 0 62
37203: PUSH
37204: LD_INT 0
37206: PUSH
37207: LD_INT 0
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 0
37216: PUSH
37217: LD_INT 1
37219: NEG
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 1
37227: PUSH
37228: LD_INT 0
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 1
37237: PUSH
37238: LD_INT 1
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 0
37247: PUSH
37248: LD_INT 1
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 1
37257: NEG
37258: PUSH
37259: LD_INT 0
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PUSH
37266: LD_INT 1
37268: NEG
37269: PUSH
37270: LD_INT 1
37272: NEG
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37287: LD_ADDR_VAR 0 63
37291: PUSH
37292: LD_INT 0
37294: PUSH
37295: LD_INT 0
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 0
37304: PUSH
37305: LD_INT 1
37307: NEG
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 1
37315: PUSH
37316: LD_INT 0
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PUSH
37323: LD_INT 1
37325: PUSH
37326: LD_INT 1
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: LD_INT 0
37335: PUSH
37336: LD_INT 1
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 1
37345: NEG
37346: PUSH
37347: LD_INT 0
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 1
37356: NEG
37357: PUSH
37358: LD_INT 1
37360: NEG
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37375: LD_ADDR_VAR 0 64
37379: PUSH
37380: LD_INT 0
37382: PUSH
37383: LD_INT 0
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 0
37392: PUSH
37393: LD_INT 1
37395: NEG
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: LD_INT 1
37403: PUSH
37404: LD_INT 0
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 1
37413: PUSH
37414: LD_INT 1
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 0
37423: PUSH
37424: LD_INT 1
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 1
37433: NEG
37434: PUSH
37435: LD_INT 0
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 1
37444: NEG
37445: PUSH
37446: LD_INT 1
37448: NEG
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: ST_TO_ADDR
// end ; 1 :
37463: GO 43360
37465: LD_INT 1
37467: DOUBLE
37468: EQUAL
37469: IFTRUE 37473
37471: GO 40096
37473: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37474: LD_ADDR_VAR 0 11
37478: PUSH
37479: LD_INT 1
37481: NEG
37482: PUSH
37483: LD_INT 3
37485: NEG
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 0
37493: PUSH
37494: LD_INT 3
37496: NEG
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 1
37504: PUSH
37505: LD_INT 2
37507: NEG
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: LIST
37517: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37518: LD_ADDR_VAR 0 12
37522: PUSH
37523: LD_INT 2
37525: PUSH
37526: LD_INT 1
37528: NEG
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 3
37536: PUSH
37537: LD_INT 0
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 3
37546: PUSH
37547: LD_INT 1
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: LIST
37558: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37559: LD_ADDR_VAR 0 13
37563: PUSH
37564: LD_INT 3
37566: PUSH
37567: LD_INT 2
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 3
37576: PUSH
37577: LD_INT 3
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 2
37586: PUSH
37587: LD_INT 3
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: LIST
37598: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37599: LD_ADDR_VAR 0 14
37603: PUSH
37604: LD_INT 1
37606: PUSH
37607: LD_INT 3
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 0
37616: PUSH
37617: LD_INT 3
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 1
37626: NEG
37627: PUSH
37628: LD_INT 2
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: LIST
37639: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37640: LD_ADDR_VAR 0 15
37644: PUSH
37645: LD_INT 2
37647: NEG
37648: PUSH
37649: LD_INT 1
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 3
37658: NEG
37659: PUSH
37660: LD_INT 0
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 3
37669: NEG
37670: PUSH
37671: LD_INT 1
37673: NEG
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: LIST
37683: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37684: LD_ADDR_VAR 0 16
37688: PUSH
37689: LD_INT 2
37691: NEG
37692: PUSH
37693: LD_INT 3
37695: NEG
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 3
37703: NEG
37704: PUSH
37705: LD_INT 2
37707: NEG
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 3
37715: NEG
37716: PUSH
37717: LD_INT 3
37719: NEG
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: LIST
37729: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37730: LD_ADDR_VAR 0 17
37734: PUSH
37735: LD_INT 1
37737: NEG
37738: PUSH
37739: LD_INT 3
37741: NEG
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 0
37749: PUSH
37750: LD_INT 3
37752: NEG
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 1
37760: PUSH
37761: LD_INT 2
37763: NEG
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: LIST
37773: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37774: LD_ADDR_VAR 0 18
37778: PUSH
37779: LD_INT 2
37781: PUSH
37782: LD_INT 1
37784: NEG
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 3
37792: PUSH
37793: LD_INT 0
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 3
37802: PUSH
37803: LD_INT 1
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: LIST
37814: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37815: LD_ADDR_VAR 0 19
37819: PUSH
37820: LD_INT 3
37822: PUSH
37823: LD_INT 2
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 3
37832: PUSH
37833: LD_INT 3
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 2
37842: PUSH
37843: LD_INT 3
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: LIST
37854: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37855: LD_ADDR_VAR 0 20
37859: PUSH
37860: LD_INT 1
37862: PUSH
37863: LD_INT 3
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: LD_INT 0
37872: PUSH
37873: LD_INT 3
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: PUSH
37880: LD_INT 1
37882: NEG
37883: PUSH
37884: LD_INT 2
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: LIST
37895: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37896: LD_ADDR_VAR 0 21
37900: PUSH
37901: LD_INT 2
37903: NEG
37904: PUSH
37905: LD_INT 1
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: LD_INT 3
37914: NEG
37915: PUSH
37916: LD_INT 0
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 3
37925: NEG
37926: PUSH
37927: LD_INT 1
37929: NEG
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: LIST
37939: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37940: LD_ADDR_VAR 0 22
37944: PUSH
37945: LD_INT 2
37947: NEG
37948: PUSH
37949: LD_INT 3
37951: NEG
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 3
37959: NEG
37960: PUSH
37961: LD_INT 2
37963: NEG
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 3
37971: NEG
37972: PUSH
37973: LD_INT 3
37975: NEG
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: LIST
37985: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
37986: LD_ADDR_VAR 0 23
37990: PUSH
37991: LD_INT 0
37993: PUSH
37994: LD_INT 3
37996: NEG
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 1
38004: NEG
38005: PUSH
38006: LD_INT 4
38008: NEG
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 1
38016: PUSH
38017: LD_INT 3
38019: NEG
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: LIST
38029: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
38030: LD_ADDR_VAR 0 24
38034: PUSH
38035: LD_INT 3
38037: PUSH
38038: LD_INT 0
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 3
38047: PUSH
38048: LD_INT 1
38050: NEG
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: LD_INT 4
38058: PUSH
38059: LD_INT 1
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: LIST
38070: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
38071: LD_ADDR_VAR 0 25
38075: PUSH
38076: LD_INT 3
38078: PUSH
38079: LD_INT 3
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: LD_INT 4
38088: PUSH
38089: LD_INT 3
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 3
38098: PUSH
38099: LD_INT 4
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: LIST
38110: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
38111: LD_ADDR_VAR 0 26
38115: PUSH
38116: LD_INT 0
38118: PUSH
38119: LD_INT 3
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 1
38128: PUSH
38129: LD_INT 4
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 1
38138: NEG
38139: PUSH
38140: LD_INT 3
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: LIST
38151: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
38152: LD_ADDR_VAR 0 27
38156: PUSH
38157: LD_INT 3
38159: NEG
38160: PUSH
38161: LD_INT 0
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 3
38170: NEG
38171: PUSH
38172: LD_INT 1
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 4
38181: NEG
38182: PUSH
38183: LD_INT 1
38185: NEG
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: LIST
38195: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
38196: LD_ADDR_VAR 0 28
38200: PUSH
38201: LD_INT 3
38203: NEG
38204: PUSH
38205: LD_INT 3
38207: NEG
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 3
38215: NEG
38216: PUSH
38217: LD_INT 4
38219: NEG
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 4
38227: NEG
38228: PUSH
38229: LD_INT 3
38231: NEG
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: LIST
38241: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
38242: LD_ADDR_VAR 0 29
38246: PUSH
38247: LD_INT 1
38249: NEG
38250: PUSH
38251: LD_INT 3
38253: NEG
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 0
38261: PUSH
38262: LD_INT 3
38264: NEG
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 1
38272: PUSH
38273: LD_INT 2
38275: NEG
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 1
38283: NEG
38284: PUSH
38285: LD_INT 4
38287: NEG
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 0
38295: PUSH
38296: LD_INT 4
38298: NEG
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 1
38306: PUSH
38307: LD_INT 3
38309: NEG
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: LD_INT 1
38317: NEG
38318: PUSH
38319: LD_INT 5
38321: NEG
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 0
38329: PUSH
38330: LD_INT 5
38332: NEG
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 1
38340: PUSH
38341: LD_INT 4
38343: NEG
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 1
38351: NEG
38352: PUSH
38353: LD_INT 6
38355: NEG
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 0
38363: PUSH
38364: LD_INT 6
38366: NEG
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: PUSH
38372: LD_INT 1
38374: PUSH
38375: LD_INT 5
38377: NEG
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
38397: LD_ADDR_VAR 0 30
38401: PUSH
38402: LD_INT 2
38404: PUSH
38405: LD_INT 1
38407: NEG
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 3
38415: PUSH
38416: LD_INT 0
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 3
38425: PUSH
38426: LD_INT 1
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 3
38435: PUSH
38436: LD_INT 1
38438: NEG
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 4
38446: PUSH
38447: LD_INT 0
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 4
38456: PUSH
38457: LD_INT 1
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: LD_INT 4
38466: PUSH
38467: LD_INT 1
38469: NEG
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 5
38477: PUSH
38478: LD_INT 0
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 5
38487: PUSH
38488: LD_INT 1
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: PUSH
38495: LD_INT 5
38497: PUSH
38498: LD_INT 1
38500: NEG
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: LD_INT 6
38508: PUSH
38509: LD_INT 0
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 6
38518: PUSH
38519: LD_INT 1
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
38540: LD_ADDR_VAR 0 31
38544: PUSH
38545: LD_INT 3
38547: PUSH
38548: LD_INT 2
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 3
38557: PUSH
38558: LD_INT 3
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 2
38567: PUSH
38568: LD_INT 3
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 4
38577: PUSH
38578: LD_INT 3
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 4
38587: PUSH
38588: LD_INT 4
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: LD_INT 3
38597: PUSH
38598: LD_INT 4
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PUSH
38605: LD_INT 5
38607: PUSH
38608: LD_INT 4
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 5
38617: PUSH
38618: LD_INT 5
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 4
38627: PUSH
38628: LD_INT 5
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 6
38637: PUSH
38638: LD_INT 5
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 6
38647: PUSH
38648: LD_INT 6
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: LD_INT 5
38657: PUSH
38658: LD_INT 6
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
38679: LD_ADDR_VAR 0 32
38683: PUSH
38684: LD_INT 1
38686: PUSH
38687: LD_INT 3
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 0
38696: PUSH
38697: LD_INT 3
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 1
38706: NEG
38707: PUSH
38708: LD_INT 2
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 1
38717: PUSH
38718: LD_INT 4
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 0
38727: PUSH
38728: LD_INT 4
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 1
38737: NEG
38738: PUSH
38739: LD_INT 3
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 1
38748: PUSH
38749: LD_INT 5
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 0
38758: PUSH
38759: LD_INT 5
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 1
38768: NEG
38769: PUSH
38770: LD_INT 4
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 1
38779: PUSH
38780: LD_INT 6
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: LD_INT 0
38789: PUSH
38790: LD_INT 6
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 1
38799: NEG
38800: PUSH
38801: LD_INT 5
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
38822: LD_ADDR_VAR 0 33
38826: PUSH
38827: LD_INT 2
38829: NEG
38830: PUSH
38831: LD_INT 1
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 3
38840: NEG
38841: PUSH
38842: LD_INT 0
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 3
38851: NEG
38852: PUSH
38853: LD_INT 1
38855: NEG
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 3
38863: NEG
38864: PUSH
38865: LD_INT 1
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 4
38874: NEG
38875: PUSH
38876: LD_INT 0
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 4
38885: NEG
38886: PUSH
38887: LD_INT 1
38889: NEG
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 4
38897: NEG
38898: PUSH
38899: LD_INT 1
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 5
38908: NEG
38909: PUSH
38910: LD_INT 0
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 5
38919: NEG
38920: PUSH
38921: LD_INT 1
38923: NEG
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 5
38931: NEG
38932: PUSH
38933: LD_INT 1
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 6
38942: NEG
38943: PUSH
38944: LD_INT 0
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 6
38953: NEG
38954: PUSH
38955: LD_INT 1
38957: NEG
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
38977: LD_ADDR_VAR 0 34
38981: PUSH
38982: LD_INT 2
38984: NEG
38985: PUSH
38986: LD_INT 3
38988: NEG
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: LD_INT 3
38996: NEG
38997: PUSH
38998: LD_INT 2
39000: NEG
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 3
39008: NEG
39009: PUSH
39010: LD_INT 3
39012: NEG
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 3
39020: NEG
39021: PUSH
39022: LD_INT 4
39024: NEG
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 4
39032: NEG
39033: PUSH
39034: LD_INT 3
39036: NEG
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 4
39044: NEG
39045: PUSH
39046: LD_INT 4
39048: NEG
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 4
39056: NEG
39057: PUSH
39058: LD_INT 5
39060: NEG
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 5
39068: NEG
39069: PUSH
39070: LD_INT 4
39072: NEG
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 5
39080: NEG
39081: PUSH
39082: LD_INT 5
39084: NEG
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 5
39092: NEG
39093: PUSH
39094: LD_INT 6
39096: NEG
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 6
39104: NEG
39105: PUSH
39106: LD_INT 5
39108: NEG
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 6
39116: NEG
39117: PUSH
39118: LD_INT 6
39120: NEG
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
39140: LD_ADDR_VAR 0 41
39144: PUSH
39145: LD_INT 0
39147: PUSH
39148: LD_INT 2
39150: NEG
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 1
39158: NEG
39159: PUSH
39160: LD_INT 3
39162: NEG
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 1
39170: PUSH
39171: LD_INT 2
39173: NEG
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: LIST
39183: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
39184: LD_ADDR_VAR 0 42
39188: PUSH
39189: LD_INT 2
39191: PUSH
39192: LD_INT 0
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 2
39201: PUSH
39202: LD_INT 1
39204: NEG
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 3
39212: PUSH
39213: LD_INT 1
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: LIST
39224: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
39225: LD_ADDR_VAR 0 43
39229: PUSH
39230: LD_INT 2
39232: PUSH
39233: LD_INT 2
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 3
39242: PUSH
39243: LD_INT 2
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 2
39252: PUSH
39253: LD_INT 3
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: LIST
39264: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
39265: LD_ADDR_VAR 0 44
39269: PUSH
39270: LD_INT 0
39272: PUSH
39273: LD_INT 2
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 1
39282: PUSH
39283: LD_INT 3
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 1
39292: NEG
39293: PUSH
39294: LD_INT 2
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: LIST
39305: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39306: LD_ADDR_VAR 0 45
39310: PUSH
39311: LD_INT 2
39313: NEG
39314: PUSH
39315: LD_INT 0
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 2
39324: NEG
39325: PUSH
39326: LD_INT 1
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 3
39335: NEG
39336: PUSH
39337: LD_INT 1
39339: NEG
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: LIST
39349: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
39350: LD_ADDR_VAR 0 46
39354: PUSH
39355: LD_INT 2
39357: NEG
39358: PUSH
39359: LD_INT 2
39361: NEG
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 2
39369: NEG
39370: PUSH
39371: LD_INT 3
39373: NEG
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 3
39381: NEG
39382: PUSH
39383: LD_INT 2
39385: NEG
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: LIST
39395: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
39396: LD_ADDR_VAR 0 47
39400: PUSH
39401: LD_INT 2
39403: NEG
39404: PUSH
39405: LD_INT 3
39407: NEG
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 1
39415: NEG
39416: PUSH
39417: LD_INT 3
39419: NEG
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39429: LD_ADDR_VAR 0 48
39433: PUSH
39434: LD_INT 1
39436: PUSH
39437: LD_INT 2
39439: NEG
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 2
39447: PUSH
39448: LD_INT 1
39450: NEG
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
39460: LD_ADDR_VAR 0 49
39464: PUSH
39465: LD_INT 3
39467: PUSH
39468: LD_INT 1
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 3
39477: PUSH
39478: LD_INT 2
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
39489: LD_ADDR_VAR 0 50
39493: PUSH
39494: LD_INT 2
39496: PUSH
39497: LD_INT 3
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 1
39506: PUSH
39507: LD_INT 3
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39518: LD_ADDR_VAR 0 51
39522: PUSH
39523: LD_INT 1
39525: NEG
39526: PUSH
39527: LD_INT 2
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 2
39536: NEG
39537: PUSH
39538: LD_INT 1
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39549: LD_ADDR_VAR 0 52
39553: PUSH
39554: LD_INT 3
39556: NEG
39557: PUSH
39558: LD_INT 1
39560: NEG
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 3
39568: NEG
39569: PUSH
39570: LD_INT 2
39572: NEG
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39582: LD_ADDR_VAR 0 53
39586: PUSH
39587: LD_INT 1
39589: NEG
39590: PUSH
39591: LD_INT 3
39593: NEG
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 0
39601: PUSH
39602: LD_INT 3
39604: NEG
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 1
39612: PUSH
39613: LD_INT 2
39615: NEG
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: LIST
39625: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39626: LD_ADDR_VAR 0 54
39630: PUSH
39631: LD_INT 2
39633: PUSH
39634: LD_INT 1
39636: NEG
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 3
39644: PUSH
39645: LD_INT 0
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 3
39654: PUSH
39655: LD_INT 1
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: LIST
39666: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39667: LD_ADDR_VAR 0 55
39671: PUSH
39672: LD_INT 3
39674: PUSH
39675: LD_INT 2
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 3
39684: PUSH
39685: LD_INT 3
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_INT 2
39694: PUSH
39695: LD_INT 3
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: LIST
39706: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39707: LD_ADDR_VAR 0 56
39711: PUSH
39712: LD_INT 1
39714: PUSH
39715: LD_INT 3
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 0
39724: PUSH
39725: LD_INT 3
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 1
39734: NEG
39735: PUSH
39736: LD_INT 2
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: LIST
39747: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39748: LD_ADDR_VAR 0 57
39752: PUSH
39753: LD_INT 2
39755: NEG
39756: PUSH
39757: LD_INT 1
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 3
39766: NEG
39767: PUSH
39768: LD_INT 0
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 3
39777: NEG
39778: PUSH
39779: LD_INT 1
39781: NEG
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: LIST
39791: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39792: LD_ADDR_VAR 0 58
39796: PUSH
39797: LD_INT 2
39799: NEG
39800: PUSH
39801: LD_INT 3
39803: NEG
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 3
39811: NEG
39812: PUSH
39813: LD_INT 2
39815: NEG
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 3
39823: NEG
39824: PUSH
39825: LD_INT 3
39827: NEG
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: LIST
39837: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
39838: LD_ADDR_VAR 0 59
39842: PUSH
39843: LD_INT 1
39845: NEG
39846: PUSH
39847: LD_INT 2
39849: NEG
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 0
39857: PUSH
39858: LD_INT 2
39860: NEG
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 1
39868: PUSH
39869: LD_INT 1
39871: NEG
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: LIST
39881: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39882: LD_ADDR_VAR 0 60
39886: PUSH
39887: LD_INT 1
39889: PUSH
39890: LD_INT 1
39892: NEG
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 2
39900: PUSH
39901: LD_INT 0
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 2
39910: PUSH
39911: LD_INT 1
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: LIST
39922: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39923: LD_ADDR_VAR 0 61
39927: PUSH
39928: LD_INT 2
39930: PUSH
39931: LD_INT 1
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 2
39940: PUSH
39941: LD_INT 2
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: LD_INT 1
39950: PUSH
39951: LD_INT 2
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: LIST
39962: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39963: LD_ADDR_VAR 0 62
39967: PUSH
39968: LD_INT 1
39970: PUSH
39971: LD_INT 2
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 0
39980: PUSH
39981: LD_INT 2
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 1
39990: NEG
39991: PUSH
39992: LD_INT 1
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: LIST
40003: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40004: LD_ADDR_VAR 0 63
40008: PUSH
40009: LD_INT 1
40011: NEG
40012: PUSH
40013: LD_INT 1
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 2
40022: NEG
40023: PUSH
40024: LD_INT 0
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 2
40033: NEG
40034: PUSH
40035: LD_INT 1
40037: NEG
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: LIST
40047: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40048: LD_ADDR_VAR 0 64
40052: PUSH
40053: LD_INT 1
40055: NEG
40056: PUSH
40057: LD_INT 2
40059: NEG
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 2
40067: NEG
40068: PUSH
40069: LD_INT 1
40071: NEG
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 2
40079: NEG
40080: PUSH
40081: LD_INT 2
40083: NEG
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: LIST
40093: ST_TO_ADDR
// end ; 2 :
40094: GO 43360
40096: LD_INT 2
40098: DOUBLE
40099: EQUAL
40100: IFTRUE 40104
40102: GO 43359
40104: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
40105: LD_ADDR_VAR 0 29
40109: PUSH
40110: LD_INT 4
40112: PUSH
40113: LD_INT 0
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 4
40122: PUSH
40123: LD_INT 1
40125: NEG
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 5
40133: PUSH
40134: LD_INT 0
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 5
40143: PUSH
40144: LD_INT 1
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 4
40153: PUSH
40154: LD_INT 1
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 3
40163: PUSH
40164: LD_INT 0
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 3
40173: PUSH
40174: LD_INT 1
40176: NEG
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 3
40184: PUSH
40185: LD_INT 2
40187: NEG
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 5
40195: PUSH
40196: LD_INT 2
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 3
40205: PUSH
40206: LD_INT 3
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 3
40215: PUSH
40216: LD_INT 2
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 4
40225: PUSH
40226: LD_INT 3
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 4
40235: PUSH
40236: LD_INT 4
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 3
40245: PUSH
40246: LD_INT 4
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 2
40255: PUSH
40256: LD_INT 3
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 2
40265: PUSH
40266: LD_INT 2
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 4
40275: PUSH
40276: LD_INT 2
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 2
40285: PUSH
40286: LD_INT 4
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 0
40295: PUSH
40296: LD_INT 4
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 0
40305: PUSH
40306: LD_INT 3
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 1
40315: PUSH
40316: LD_INT 4
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 1
40325: PUSH
40326: LD_INT 5
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 0
40335: PUSH
40336: LD_INT 5
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 1
40345: NEG
40346: PUSH
40347: LD_INT 4
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 1
40356: NEG
40357: PUSH
40358: LD_INT 3
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 2
40367: PUSH
40368: LD_INT 5
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 2
40377: NEG
40378: PUSH
40379: LD_INT 3
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 3
40388: NEG
40389: PUSH
40390: LD_INT 0
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 3
40399: NEG
40400: PUSH
40401: LD_INT 1
40403: NEG
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 2
40411: NEG
40412: PUSH
40413: LD_INT 0
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 2
40422: NEG
40423: PUSH
40424: LD_INT 1
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 3
40433: NEG
40434: PUSH
40435: LD_INT 1
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 4
40444: NEG
40445: PUSH
40446: LD_INT 0
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 4
40455: NEG
40456: PUSH
40457: LD_INT 1
40459: NEG
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 4
40467: NEG
40468: PUSH
40469: LD_INT 2
40471: NEG
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 2
40479: NEG
40480: PUSH
40481: LD_INT 2
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 4
40490: NEG
40491: PUSH
40492: LD_INT 4
40494: NEG
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 4
40502: NEG
40503: PUSH
40504: LD_INT 5
40506: NEG
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 3
40514: NEG
40515: PUSH
40516: LD_INT 4
40518: NEG
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 3
40526: NEG
40527: PUSH
40528: LD_INT 3
40530: NEG
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 4
40538: NEG
40539: PUSH
40540: LD_INT 3
40542: NEG
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 5
40550: NEG
40551: PUSH
40552: LD_INT 4
40554: NEG
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 5
40562: NEG
40563: PUSH
40564: LD_INT 5
40566: NEG
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 3
40574: NEG
40575: PUSH
40576: LD_INT 5
40578: NEG
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 5
40586: NEG
40587: PUSH
40588: LD_INT 3
40590: NEG
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
40643: LD_ADDR_VAR 0 30
40647: PUSH
40648: LD_INT 4
40650: PUSH
40651: LD_INT 4
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 4
40660: PUSH
40661: LD_INT 3
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 5
40670: PUSH
40671: LD_INT 4
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 5
40680: PUSH
40681: LD_INT 5
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 4
40690: PUSH
40691: LD_INT 5
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 3
40700: PUSH
40701: LD_INT 4
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 3
40710: PUSH
40711: LD_INT 3
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 5
40720: PUSH
40721: LD_INT 3
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 3
40730: PUSH
40731: LD_INT 5
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 0
40740: PUSH
40741: LD_INT 3
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 0
40750: PUSH
40751: LD_INT 2
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 1
40760: PUSH
40761: LD_INT 3
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 1
40770: PUSH
40771: LD_INT 4
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 0
40780: PUSH
40781: LD_INT 4
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 1
40790: NEG
40791: PUSH
40792: LD_INT 3
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 1
40801: NEG
40802: PUSH
40803: LD_INT 2
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 2
40812: PUSH
40813: LD_INT 4
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 2
40822: NEG
40823: PUSH
40824: LD_INT 2
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 4
40833: NEG
40834: PUSH
40835: LD_INT 0
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 4
40844: NEG
40845: PUSH
40846: LD_INT 1
40848: NEG
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 3
40856: NEG
40857: PUSH
40858: LD_INT 0
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 3
40867: NEG
40868: PUSH
40869: LD_INT 1
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 4
40878: NEG
40879: PUSH
40880: LD_INT 1
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 5
40889: NEG
40890: PUSH
40891: LD_INT 0
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 5
40900: NEG
40901: PUSH
40902: LD_INT 1
40904: NEG
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 5
40912: NEG
40913: PUSH
40914: LD_INT 2
40916: NEG
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 3
40924: NEG
40925: PUSH
40926: LD_INT 2
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 3
40935: NEG
40936: PUSH
40937: LD_INT 3
40939: NEG
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 3
40947: NEG
40948: PUSH
40949: LD_INT 4
40951: NEG
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 2
40959: NEG
40960: PUSH
40961: LD_INT 3
40963: NEG
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 2
40971: NEG
40972: PUSH
40973: LD_INT 2
40975: NEG
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 3
40983: NEG
40984: PUSH
40985: LD_INT 2
40987: NEG
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 4
40995: NEG
40996: PUSH
40997: LD_INT 3
40999: NEG
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 4
41007: NEG
41008: PUSH
41009: LD_INT 4
41011: NEG
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 2
41019: NEG
41020: PUSH
41021: LD_INT 4
41023: NEG
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 4
41031: NEG
41032: PUSH
41033: LD_INT 2
41035: NEG
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 0
41043: PUSH
41044: LD_INT 4
41046: NEG
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 0
41054: PUSH
41055: LD_INT 5
41057: NEG
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 1
41065: PUSH
41066: LD_INT 4
41068: NEG
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 1
41076: PUSH
41077: LD_INT 3
41079: NEG
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 0
41087: PUSH
41088: LD_INT 3
41090: NEG
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 1
41098: NEG
41099: PUSH
41100: LD_INT 4
41102: NEG
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 1
41110: NEG
41111: PUSH
41112: LD_INT 5
41114: NEG
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 2
41122: PUSH
41123: LD_INT 3
41125: NEG
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 2
41133: NEG
41134: PUSH
41135: LD_INT 5
41137: NEG
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
41190: LD_ADDR_VAR 0 31
41194: PUSH
41195: LD_INT 0
41197: PUSH
41198: LD_INT 4
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 0
41207: PUSH
41208: LD_INT 3
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 1
41217: PUSH
41218: LD_INT 4
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 1
41227: PUSH
41228: LD_INT 5
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 0
41237: PUSH
41238: LD_INT 5
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 1
41247: NEG
41248: PUSH
41249: LD_INT 4
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 1
41258: NEG
41259: PUSH
41260: LD_INT 3
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 2
41269: PUSH
41270: LD_INT 5
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 2
41279: NEG
41280: PUSH
41281: LD_INT 3
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 3
41290: NEG
41291: PUSH
41292: LD_INT 0
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 3
41301: NEG
41302: PUSH
41303: LD_INT 1
41305: NEG
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 2
41313: NEG
41314: PUSH
41315: LD_INT 0
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 2
41324: NEG
41325: PUSH
41326: LD_INT 1
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 3
41335: NEG
41336: PUSH
41337: LD_INT 1
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 4
41346: NEG
41347: PUSH
41348: LD_INT 0
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 4
41357: NEG
41358: PUSH
41359: LD_INT 1
41361: NEG
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 4
41369: NEG
41370: PUSH
41371: LD_INT 2
41373: NEG
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 2
41381: NEG
41382: PUSH
41383: LD_INT 2
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 4
41392: NEG
41393: PUSH
41394: LD_INT 4
41396: NEG
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 4
41404: NEG
41405: PUSH
41406: LD_INT 5
41408: NEG
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 3
41416: NEG
41417: PUSH
41418: LD_INT 4
41420: NEG
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 3
41428: NEG
41429: PUSH
41430: LD_INT 3
41432: NEG
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 4
41440: NEG
41441: PUSH
41442: LD_INT 3
41444: NEG
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 5
41452: NEG
41453: PUSH
41454: LD_INT 4
41456: NEG
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 5
41464: NEG
41465: PUSH
41466: LD_INT 5
41468: NEG
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 3
41476: NEG
41477: PUSH
41478: LD_INT 5
41480: NEG
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 5
41488: NEG
41489: PUSH
41490: LD_INT 3
41492: NEG
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 0
41500: PUSH
41501: LD_INT 3
41503: NEG
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 0
41511: PUSH
41512: LD_INT 4
41514: NEG
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 1
41522: PUSH
41523: LD_INT 3
41525: NEG
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 1
41533: PUSH
41534: LD_INT 2
41536: NEG
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 0
41544: PUSH
41545: LD_INT 2
41547: NEG
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 1
41555: NEG
41556: PUSH
41557: LD_INT 3
41559: NEG
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 1
41567: NEG
41568: PUSH
41569: LD_INT 4
41571: NEG
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 2
41579: PUSH
41580: LD_INT 2
41582: NEG
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 2
41590: NEG
41591: PUSH
41592: LD_INT 4
41594: NEG
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 4
41602: PUSH
41603: LD_INT 0
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 4
41612: PUSH
41613: LD_INT 1
41615: NEG
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 5
41623: PUSH
41624: LD_INT 0
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 5
41633: PUSH
41634: LD_INT 1
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 4
41643: PUSH
41644: LD_INT 1
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 3
41653: PUSH
41654: LD_INT 0
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 3
41663: PUSH
41664: LD_INT 1
41666: NEG
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 3
41674: PUSH
41675: LD_INT 2
41677: NEG
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 5
41685: PUSH
41686: LD_INT 2
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
41740: LD_ADDR_VAR 0 32
41744: PUSH
41745: LD_INT 4
41747: NEG
41748: PUSH
41749: LD_INT 0
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 4
41758: NEG
41759: PUSH
41760: LD_INT 1
41762: NEG
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 3
41770: NEG
41771: PUSH
41772: LD_INT 0
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 3
41781: NEG
41782: PUSH
41783: LD_INT 1
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 4
41792: NEG
41793: PUSH
41794: LD_INT 1
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 5
41803: NEG
41804: PUSH
41805: LD_INT 0
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 5
41814: NEG
41815: PUSH
41816: LD_INT 1
41818: NEG
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 5
41826: NEG
41827: PUSH
41828: LD_INT 2
41830: NEG
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 3
41838: NEG
41839: PUSH
41840: LD_INT 2
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 3
41849: NEG
41850: PUSH
41851: LD_INT 3
41853: NEG
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 3
41861: NEG
41862: PUSH
41863: LD_INT 4
41865: NEG
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 2
41873: NEG
41874: PUSH
41875: LD_INT 3
41877: NEG
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 2
41885: NEG
41886: PUSH
41887: LD_INT 2
41889: NEG
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 3
41897: NEG
41898: PUSH
41899: LD_INT 2
41901: NEG
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 4
41909: NEG
41910: PUSH
41911: LD_INT 3
41913: NEG
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 4
41921: NEG
41922: PUSH
41923: LD_INT 4
41925: NEG
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 2
41933: NEG
41934: PUSH
41935: LD_INT 4
41937: NEG
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 4
41945: NEG
41946: PUSH
41947: LD_INT 2
41949: NEG
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 0
41957: PUSH
41958: LD_INT 4
41960: NEG
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 0
41968: PUSH
41969: LD_INT 5
41971: NEG
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 1
41979: PUSH
41980: LD_INT 4
41982: NEG
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 1
41990: PUSH
41991: LD_INT 3
41993: NEG
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 0
42001: PUSH
42002: LD_INT 3
42004: NEG
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 1
42012: NEG
42013: PUSH
42014: LD_INT 4
42016: NEG
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: LD_INT 5
42028: NEG
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 2
42036: PUSH
42037: LD_INT 3
42039: NEG
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: LD_INT 2
42047: NEG
42048: PUSH
42049: LD_INT 5
42051: NEG
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 3
42059: PUSH
42060: LD_INT 0
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 3
42069: PUSH
42070: LD_INT 1
42072: NEG
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 4
42080: PUSH
42081: LD_INT 0
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 4
42090: PUSH
42091: LD_INT 1
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 3
42100: PUSH
42101: LD_INT 1
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 2
42110: PUSH
42111: LD_INT 0
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 2
42120: PUSH
42121: LD_INT 1
42123: NEG
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 2
42131: PUSH
42132: LD_INT 2
42134: NEG
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 4
42142: PUSH
42143: LD_INT 2
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 4
42152: PUSH
42153: LD_INT 4
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 4
42162: PUSH
42163: LD_INT 3
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 5
42172: PUSH
42173: LD_INT 4
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 5
42182: PUSH
42183: LD_INT 5
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 4
42192: PUSH
42193: LD_INT 5
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 3
42202: PUSH
42203: LD_INT 4
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 3
42212: PUSH
42213: LD_INT 3
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 5
42222: PUSH
42223: LD_INT 3
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 3
42232: PUSH
42233: LD_INT 5
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
42287: LD_ADDR_VAR 0 33
42291: PUSH
42292: LD_INT 4
42294: NEG
42295: PUSH
42296: LD_INT 4
42298: NEG
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 4
42306: NEG
42307: PUSH
42308: LD_INT 5
42310: NEG
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 3
42318: NEG
42319: PUSH
42320: LD_INT 4
42322: NEG
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 3
42330: NEG
42331: PUSH
42332: LD_INT 3
42334: NEG
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 4
42342: NEG
42343: PUSH
42344: LD_INT 3
42346: NEG
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 5
42354: NEG
42355: PUSH
42356: LD_INT 4
42358: NEG
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 5
42366: NEG
42367: PUSH
42368: LD_INT 5
42370: NEG
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 3
42378: NEG
42379: PUSH
42380: LD_INT 5
42382: NEG
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 5
42390: NEG
42391: PUSH
42392: LD_INT 3
42394: NEG
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 0
42402: PUSH
42403: LD_INT 3
42405: NEG
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 0
42413: PUSH
42414: LD_INT 4
42416: NEG
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 1
42424: PUSH
42425: LD_INT 3
42427: NEG
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 1
42435: PUSH
42436: LD_INT 2
42438: NEG
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 0
42446: PUSH
42447: LD_INT 2
42449: NEG
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 1
42457: NEG
42458: PUSH
42459: LD_INT 3
42461: NEG
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 1
42469: NEG
42470: PUSH
42471: LD_INT 4
42473: NEG
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 2
42481: PUSH
42482: LD_INT 2
42484: NEG
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 2
42492: NEG
42493: PUSH
42494: LD_INT 4
42496: NEG
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 4
42504: PUSH
42505: LD_INT 0
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 4
42514: PUSH
42515: LD_INT 1
42517: NEG
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 5
42525: PUSH
42526: LD_INT 0
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 5
42535: PUSH
42536: LD_INT 1
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 4
42545: PUSH
42546: LD_INT 1
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 3
42555: PUSH
42556: LD_INT 0
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 3
42565: PUSH
42566: LD_INT 1
42568: NEG
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 3
42576: PUSH
42577: LD_INT 2
42579: NEG
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 5
42587: PUSH
42588: LD_INT 2
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 3
42597: PUSH
42598: LD_INT 3
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 3
42607: PUSH
42608: LD_INT 2
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 4
42617: PUSH
42618: LD_INT 3
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 4
42627: PUSH
42628: LD_INT 4
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 3
42637: PUSH
42638: LD_INT 4
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 2
42647: PUSH
42648: LD_INT 3
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 2
42657: PUSH
42658: LD_INT 2
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 4
42667: PUSH
42668: LD_INT 2
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 2
42677: PUSH
42678: LD_INT 4
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 0
42687: PUSH
42688: LD_INT 4
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 0
42697: PUSH
42698: LD_INT 3
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 1
42707: PUSH
42708: LD_INT 4
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 1
42717: PUSH
42718: LD_INT 5
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 0
42727: PUSH
42728: LD_INT 5
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 1
42737: NEG
42738: PUSH
42739: LD_INT 4
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 1
42748: NEG
42749: PUSH
42750: LD_INT 3
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 2
42759: PUSH
42760: LD_INT 5
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 2
42769: NEG
42770: PUSH
42771: LD_INT 3
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
42825: LD_ADDR_VAR 0 34
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: LD_INT 4
42835: NEG
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 0
42843: PUSH
42844: LD_INT 5
42846: NEG
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 1
42854: PUSH
42855: LD_INT 4
42857: NEG
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 1
42865: PUSH
42866: LD_INT 3
42868: NEG
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 0
42876: PUSH
42877: LD_INT 3
42879: NEG
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 1
42887: NEG
42888: PUSH
42889: LD_INT 4
42891: NEG
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 1
42899: NEG
42900: PUSH
42901: LD_INT 5
42903: NEG
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 2
42911: PUSH
42912: LD_INT 3
42914: NEG
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 2
42922: NEG
42923: PUSH
42924: LD_INT 5
42926: NEG
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 3
42934: PUSH
42935: LD_INT 0
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 3
42944: PUSH
42945: LD_INT 1
42947: NEG
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 4
42955: PUSH
42956: LD_INT 0
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 4
42965: PUSH
42966: LD_INT 1
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 3
42975: PUSH
42976: LD_INT 1
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 2
42985: PUSH
42986: LD_INT 0
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 2
42995: PUSH
42996: LD_INT 1
42998: NEG
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 2
43006: PUSH
43007: LD_INT 2
43009: NEG
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 4
43017: PUSH
43018: LD_INT 2
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 4
43027: PUSH
43028: LD_INT 4
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 4
43037: PUSH
43038: LD_INT 3
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 5
43047: PUSH
43048: LD_INT 4
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 5
43057: PUSH
43058: LD_INT 5
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 4
43067: PUSH
43068: LD_INT 5
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 3
43077: PUSH
43078: LD_INT 4
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 3
43087: PUSH
43088: LD_INT 3
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 5
43097: PUSH
43098: LD_INT 3
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 3
43107: PUSH
43108: LD_INT 5
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 0
43117: PUSH
43118: LD_INT 3
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 0
43127: PUSH
43128: LD_INT 2
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 1
43137: PUSH
43138: LD_INT 3
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 1
43147: PUSH
43148: LD_INT 4
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 0
43157: PUSH
43158: LD_INT 4
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 1
43167: NEG
43168: PUSH
43169: LD_INT 3
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 1
43178: NEG
43179: PUSH
43180: LD_INT 2
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 2
43189: PUSH
43190: LD_INT 4
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 2
43199: NEG
43200: PUSH
43201: LD_INT 2
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 4
43210: NEG
43211: PUSH
43212: LD_INT 0
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 4
43221: NEG
43222: PUSH
43223: LD_INT 1
43225: NEG
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 3
43233: NEG
43234: PUSH
43235: LD_INT 0
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 3
43244: NEG
43245: PUSH
43246: LD_INT 1
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 4
43255: NEG
43256: PUSH
43257: LD_INT 1
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 5
43266: NEG
43267: PUSH
43268: LD_INT 0
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 5
43277: NEG
43278: PUSH
43279: LD_INT 1
43281: NEG
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 5
43289: NEG
43290: PUSH
43291: LD_INT 2
43293: NEG
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 3
43301: NEG
43302: PUSH
43303: LD_INT 2
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: ST_TO_ADDR
// end ; end ;
43357: GO 43360
43359: POP
// case btype of b_depot , b_warehouse :
43360: LD_VAR 0 1
43364: PUSH
43365: LD_INT 0
43367: DOUBLE
43368: EQUAL
43369: IFTRUE 43379
43371: LD_INT 1
43373: DOUBLE
43374: EQUAL
43375: IFTRUE 43379
43377: GO 43580
43379: POP
// case nation of nation_american :
43380: LD_VAR 0 5
43384: PUSH
43385: LD_INT 1
43387: DOUBLE
43388: EQUAL
43389: IFTRUE 43393
43391: GO 43449
43393: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
43394: LD_ADDR_VAR 0 9
43398: PUSH
43399: LD_VAR 0 11
43403: PUSH
43404: LD_VAR 0 12
43408: PUSH
43409: LD_VAR 0 13
43413: PUSH
43414: LD_VAR 0 14
43418: PUSH
43419: LD_VAR 0 15
43423: PUSH
43424: LD_VAR 0 16
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: PUSH
43437: LD_VAR 0 4
43441: PUSH
43442: LD_INT 1
43444: PLUS
43445: ARRAY
43446: ST_TO_ADDR
43447: GO 43578
43449: LD_INT 2
43451: DOUBLE
43452: EQUAL
43453: IFTRUE 43457
43455: GO 43513
43457: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
43458: LD_ADDR_VAR 0 9
43462: PUSH
43463: LD_VAR 0 17
43467: PUSH
43468: LD_VAR 0 18
43472: PUSH
43473: LD_VAR 0 19
43477: PUSH
43478: LD_VAR 0 20
43482: PUSH
43483: LD_VAR 0 21
43487: PUSH
43488: LD_VAR 0 22
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: PUSH
43501: LD_VAR 0 4
43505: PUSH
43506: LD_INT 1
43508: PLUS
43509: ARRAY
43510: ST_TO_ADDR
43511: GO 43578
43513: LD_INT 3
43515: DOUBLE
43516: EQUAL
43517: IFTRUE 43521
43519: GO 43577
43521: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
43522: LD_ADDR_VAR 0 9
43526: PUSH
43527: LD_VAR 0 23
43531: PUSH
43532: LD_VAR 0 24
43536: PUSH
43537: LD_VAR 0 25
43541: PUSH
43542: LD_VAR 0 26
43546: PUSH
43547: LD_VAR 0 27
43551: PUSH
43552: LD_VAR 0 28
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: PUSH
43565: LD_VAR 0 4
43569: PUSH
43570: LD_INT 1
43572: PLUS
43573: ARRAY
43574: ST_TO_ADDR
43575: GO 43578
43577: POP
43578: GO 44127
43580: LD_INT 2
43582: DOUBLE
43583: EQUAL
43584: IFTRUE 43594
43586: LD_INT 3
43588: DOUBLE
43589: EQUAL
43590: IFTRUE 43594
43592: GO 43650
43594: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
43595: LD_ADDR_VAR 0 9
43599: PUSH
43600: LD_VAR 0 29
43604: PUSH
43605: LD_VAR 0 30
43609: PUSH
43610: LD_VAR 0 31
43614: PUSH
43615: LD_VAR 0 32
43619: PUSH
43620: LD_VAR 0 33
43624: PUSH
43625: LD_VAR 0 34
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: PUSH
43638: LD_VAR 0 4
43642: PUSH
43643: LD_INT 1
43645: PLUS
43646: ARRAY
43647: ST_TO_ADDR
43648: GO 44127
43650: LD_INT 16
43652: DOUBLE
43653: EQUAL
43654: IFTRUE 43706
43656: LD_INT 17
43658: DOUBLE
43659: EQUAL
43660: IFTRUE 43706
43662: LD_INT 18
43664: DOUBLE
43665: EQUAL
43666: IFTRUE 43706
43668: LD_INT 19
43670: DOUBLE
43671: EQUAL
43672: IFTRUE 43706
43674: LD_INT 20
43676: DOUBLE
43677: EQUAL
43678: IFTRUE 43706
43680: LD_INT 21
43682: DOUBLE
43683: EQUAL
43684: IFTRUE 43706
43686: LD_INT 23
43688: DOUBLE
43689: EQUAL
43690: IFTRUE 43706
43692: LD_INT 24
43694: DOUBLE
43695: EQUAL
43696: IFTRUE 43706
43698: LD_INT 25
43700: DOUBLE
43701: EQUAL
43702: IFTRUE 43706
43704: GO 43762
43706: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
43707: LD_ADDR_VAR 0 9
43711: PUSH
43712: LD_VAR 0 35
43716: PUSH
43717: LD_VAR 0 36
43721: PUSH
43722: LD_VAR 0 37
43726: PUSH
43727: LD_VAR 0 38
43731: PUSH
43732: LD_VAR 0 39
43736: PUSH
43737: LD_VAR 0 40
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: PUSH
43750: LD_VAR 0 4
43754: PUSH
43755: LD_INT 1
43757: PLUS
43758: ARRAY
43759: ST_TO_ADDR
43760: GO 44127
43762: LD_INT 6
43764: DOUBLE
43765: EQUAL
43766: IFTRUE 43818
43768: LD_INT 7
43770: DOUBLE
43771: EQUAL
43772: IFTRUE 43818
43774: LD_INT 8
43776: DOUBLE
43777: EQUAL
43778: IFTRUE 43818
43780: LD_INT 13
43782: DOUBLE
43783: EQUAL
43784: IFTRUE 43818
43786: LD_INT 12
43788: DOUBLE
43789: EQUAL
43790: IFTRUE 43818
43792: LD_INT 15
43794: DOUBLE
43795: EQUAL
43796: IFTRUE 43818
43798: LD_INT 11
43800: DOUBLE
43801: EQUAL
43802: IFTRUE 43818
43804: LD_INT 14
43806: DOUBLE
43807: EQUAL
43808: IFTRUE 43818
43810: LD_INT 10
43812: DOUBLE
43813: EQUAL
43814: IFTRUE 43818
43816: GO 43874
43818: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
43819: LD_ADDR_VAR 0 9
43823: PUSH
43824: LD_VAR 0 41
43828: PUSH
43829: LD_VAR 0 42
43833: PUSH
43834: LD_VAR 0 43
43838: PUSH
43839: LD_VAR 0 44
43843: PUSH
43844: LD_VAR 0 45
43848: PUSH
43849: LD_VAR 0 46
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: PUSH
43862: LD_VAR 0 4
43866: PUSH
43867: LD_INT 1
43869: PLUS
43870: ARRAY
43871: ST_TO_ADDR
43872: GO 44127
43874: LD_INT 36
43876: DOUBLE
43877: EQUAL
43878: IFTRUE 43882
43880: GO 43938
43882: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
43883: LD_ADDR_VAR 0 9
43887: PUSH
43888: LD_VAR 0 47
43892: PUSH
43893: LD_VAR 0 48
43897: PUSH
43898: LD_VAR 0 49
43902: PUSH
43903: LD_VAR 0 50
43907: PUSH
43908: LD_VAR 0 51
43912: PUSH
43913: LD_VAR 0 52
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: PUSH
43926: LD_VAR 0 4
43930: PUSH
43931: LD_INT 1
43933: PLUS
43934: ARRAY
43935: ST_TO_ADDR
43936: GO 44127
43938: LD_INT 4
43940: DOUBLE
43941: EQUAL
43942: IFTRUE 43964
43944: LD_INT 5
43946: DOUBLE
43947: EQUAL
43948: IFTRUE 43964
43950: LD_INT 34
43952: DOUBLE
43953: EQUAL
43954: IFTRUE 43964
43956: LD_INT 37
43958: DOUBLE
43959: EQUAL
43960: IFTRUE 43964
43962: GO 44020
43964: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
43965: LD_ADDR_VAR 0 9
43969: PUSH
43970: LD_VAR 0 53
43974: PUSH
43975: LD_VAR 0 54
43979: PUSH
43980: LD_VAR 0 55
43984: PUSH
43985: LD_VAR 0 56
43989: PUSH
43990: LD_VAR 0 57
43994: PUSH
43995: LD_VAR 0 58
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: PUSH
44008: LD_VAR 0 4
44012: PUSH
44013: LD_INT 1
44015: PLUS
44016: ARRAY
44017: ST_TO_ADDR
44018: GO 44127
44020: LD_INT 31
44022: DOUBLE
44023: EQUAL
44024: IFTRUE 44070
44026: LD_INT 32
44028: DOUBLE
44029: EQUAL
44030: IFTRUE 44070
44032: LD_INT 33
44034: DOUBLE
44035: EQUAL
44036: IFTRUE 44070
44038: LD_INT 27
44040: DOUBLE
44041: EQUAL
44042: IFTRUE 44070
44044: LD_INT 26
44046: DOUBLE
44047: EQUAL
44048: IFTRUE 44070
44050: LD_INT 28
44052: DOUBLE
44053: EQUAL
44054: IFTRUE 44070
44056: LD_INT 29
44058: DOUBLE
44059: EQUAL
44060: IFTRUE 44070
44062: LD_INT 30
44064: DOUBLE
44065: EQUAL
44066: IFTRUE 44070
44068: GO 44126
44070: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
44071: LD_ADDR_VAR 0 9
44075: PUSH
44076: LD_VAR 0 59
44080: PUSH
44081: LD_VAR 0 60
44085: PUSH
44086: LD_VAR 0 61
44090: PUSH
44091: LD_VAR 0 62
44095: PUSH
44096: LD_VAR 0 63
44100: PUSH
44101: LD_VAR 0 64
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: PUSH
44114: LD_VAR 0 4
44118: PUSH
44119: LD_INT 1
44121: PLUS
44122: ARRAY
44123: ST_TO_ADDR
44124: GO 44127
44126: POP
// temp_list2 = [ ] ;
44127: LD_ADDR_VAR 0 10
44131: PUSH
44132: EMPTY
44133: ST_TO_ADDR
// for i in temp_list do
44134: LD_ADDR_VAR 0 8
44138: PUSH
44139: LD_VAR 0 9
44143: PUSH
44144: FOR_IN
44145: IFFALSE 44197
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
44147: LD_ADDR_VAR 0 10
44151: PUSH
44152: LD_VAR 0 10
44156: PUSH
44157: LD_VAR 0 8
44161: PUSH
44162: LD_INT 1
44164: ARRAY
44165: PUSH
44166: LD_VAR 0 2
44170: PLUS
44171: PUSH
44172: LD_VAR 0 8
44176: PUSH
44177: LD_INT 2
44179: ARRAY
44180: PUSH
44181: LD_VAR 0 3
44185: PLUS
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: EMPTY
44192: LIST
44193: ADD
44194: ST_TO_ADDR
44195: GO 44144
44197: POP
44198: POP
// result = temp_list2 ;
44199: LD_ADDR_VAR 0 7
44203: PUSH
44204: LD_VAR 0 10
44208: ST_TO_ADDR
// end ;
44209: LD_VAR 0 7
44213: RET
// export function EnemyInRange ( unit , dist ) ; begin
44214: LD_INT 0
44216: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
44217: LD_ADDR_VAR 0 3
44221: PUSH
44222: LD_VAR 0 1
44226: PPUSH
44227: CALL_OW 255
44231: PPUSH
44232: LD_VAR 0 1
44236: PPUSH
44237: CALL_OW 250
44241: PPUSH
44242: LD_VAR 0 1
44246: PPUSH
44247: CALL_OW 251
44251: PPUSH
44252: LD_VAR 0 2
44256: PPUSH
44257: CALL 18324 0 4
44261: PUSH
44262: LD_INT 4
44264: ARRAY
44265: ST_TO_ADDR
// end ;
44266: LD_VAR 0 3
44270: RET
// export function PlayerSeeMe ( unit ) ; begin
44271: LD_INT 0
44273: PPUSH
// result := See ( your_side , unit ) ;
44274: LD_ADDR_VAR 0 2
44278: PUSH
44279: LD_OWVAR 2
44283: PPUSH
44284: LD_VAR 0 1
44288: PPUSH
44289: CALL_OW 292
44293: ST_TO_ADDR
// end ;
44294: LD_VAR 0 2
44298: RET
// export function ReverseDir ( unit ) ; begin
44299: LD_INT 0
44301: PPUSH
// if not unit then
44302: LD_VAR 0 1
44306: NOT
44307: IFFALSE 44311
// exit ;
44309: GO 44357
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
44311: LD_ADDR_VAR 0 2
44315: PUSH
44316: LD_INT 3
44318: PUSH
44319: LD_INT 4
44321: PUSH
44322: LD_INT 5
44324: PUSH
44325: LD_INT 0
44327: PUSH
44328: LD_INT 1
44330: PUSH
44331: LD_INT 2
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: PUSH
44342: LD_VAR 0 1
44346: PPUSH
44347: CALL_OW 254
44351: PUSH
44352: LD_INT 1
44354: PLUS
44355: ARRAY
44356: ST_TO_ADDR
// end ;
44357: LD_VAR 0 2
44361: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
44362: LD_INT 0
44364: PPUSH
44365: PPUSH
44366: PPUSH
44367: PPUSH
44368: PPUSH
// if not hexes then
44369: LD_VAR 0 2
44373: NOT
44374: IFFALSE 44378
// exit ;
44376: GO 44526
// dist := 9999 ;
44378: LD_ADDR_VAR 0 5
44382: PUSH
44383: LD_INT 9999
44385: ST_TO_ADDR
// for i = 1 to hexes do
44386: LD_ADDR_VAR 0 4
44390: PUSH
44391: DOUBLE
44392: LD_INT 1
44394: DEC
44395: ST_TO_ADDR
44396: LD_VAR 0 2
44400: PUSH
44401: FOR_TO
44402: IFFALSE 44514
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
44404: LD_VAR 0 1
44408: PPUSH
44409: LD_VAR 0 2
44413: PUSH
44414: LD_VAR 0 4
44418: ARRAY
44419: PUSH
44420: LD_INT 1
44422: ARRAY
44423: PPUSH
44424: LD_VAR 0 2
44428: PUSH
44429: LD_VAR 0 4
44433: ARRAY
44434: PUSH
44435: LD_INT 2
44437: ARRAY
44438: PPUSH
44439: CALL_OW 297
44443: PUSH
44444: LD_VAR 0 5
44448: LESS
44449: IFFALSE 44512
// begin hex := hexes [ i ] ;
44451: LD_ADDR_VAR 0 7
44455: PUSH
44456: LD_VAR 0 2
44460: PUSH
44461: LD_VAR 0 4
44465: ARRAY
44466: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44467: LD_ADDR_VAR 0 5
44471: PUSH
44472: LD_VAR 0 1
44476: PPUSH
44477: LD_VAR 0 2
44481: PUSH
44482: LD_VAR 0 4
44486: ARRAY
44487: PUSH
44488: LD_INT 1
44490: ARRAY
44491: PPUSH
44492: LD_VAR 0 2
44496: PUSH
44497: LD_VAR 0 4
44501: ARRAY
44502: PUSH
44503: LD_INT 2
44505: ARRAY
44506: PPUSH
44507: CALL_OW 297
44511: ST_TO_ADDR
// end ; end ;
44512: GO 44401
44514: POP
44515: POP
// result := hex ;
44516: LD_ADDR_VAR 0 3
44520: PUSH
44521: LD_VAR 0 7
44525: ST_TO_ADDR
// end ;
44526: LD_VAR 0 3
44530: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
44531: LD_INT 0
44533: PPUSH
44534: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
44535: LD_VAR 0 1
44539: NOT
44540: PUSH
44541: LD_VAR 0 1
44545: PUSH
44546: LD_INT 21
44548: PUSH
44549: LD_INT 2
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 23
44558: PUSH
44559: LD_INT 2
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PPUSH
44570: CALL_OW 69
44574: IN
44575: NOT
44576: OR
44577: IFFALSE 44581
// exit ;
44579: GO 44628
// for i = 1 to 3 do
44581: LD_ADDR_VAR 0 3
44585: PUSH
44586: DOUBLE
44587: LD_INT 1
44589: DEC
44590: ST_TO_ADDR
44591: LD_INT 3
44593: PUSH
44594: FOR_TO
44595: IFFALSE 44626
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
44597: LD_VAR 0 1
44601: PPUSH
44602: CALL_OW 250
44606: PPUSH
44607: LD_VAR 0 1
44611: PPUSH
44612: CALL_OW 251
44616: PPUSH
44617: LD_INT 1
44619: PPUSH
44620: CALL_OW 453
44624: GO 44594
44626: POP
44627: POP
// end ;
44628: LD_VAR 0 2
44632: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
44633: LD_INT 0
44635: PPUSH
44636: PPUSH
44637: PPUSH
44638: PPUSH
44639: PPUSH
44640: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
44641: LD_VAR 0 1
44645: NOT
44646: PUSH
44647: LD_VAR 0 2
44651: NOT
44652: OR
44653: PUSH
44654: LD_VAR 0 1
44658: PPUSH
44659: CALL_OW 314
44663: OR
44664: IFFALSE 44668
// exit ;
44666: GO 45109
// x := GetX ( enemy_unit ) ;
44668: LD_ADDR_VAR 0 7
44672: PUSH
44673: LD_VAR 0 2
44677: PPUSH
44678: CALL_OW 250
44682: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
44683: LD_ADDR_VAR 0 8
44687: PUSH
44688: LD_VAR 0 2
44692: PPUSH
44693: CALL_OW 251
44697: ST_TO_ADDR
// if not x or not y then
44698: LD_VAR 0 7
44702: NOT
44703: PUSH
44704: LD_VAR 0 8
44708: NOT
44709: OR
44710: IFFALSE 44714
// exit ;
44712: GO 45109
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
44714: LD_ADDR_VAR 0 6
44718: PUSH
44719: LD_VAR 0 7
44723: PPUSH
44724: LD_INT 0
44726: PPUSH
44727: LD_INT 4
44729: PPUSH
44730: CALL_OW 272
44734: PUSH
44735: LD_VAR 0 8
44739: PPUSH
44740: LD_INT 0
44742: PPUSH
44743: LD_INT 4
44745: PPUSH
44746: CALL_OW 273
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_VAR 0 7
44759: PPUSH
44760: LD_INT 1
44762: PPUSH
44763: LD_INT 4
44765: PPUSH
44766: CALL_OW 272
44770: PUSH
44771: LD_VAR 0 8
44775: PPUSH
44776: LD_INT 1
44778: PPUSH
44779: LD_INT 4
44781: PPUSH
44782: CALL_OW 273
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_VAR 0 7
44795: PPUSH
44796: LD_INT 2
44798: PPUSH
44799: LD_INT 4
44801: PPUSH
44802: CALL_OW 272
44806: PUSH
44807: LD_VAR 0 8
44811: PPUSH
44812: LD_INT 2
44814: PPUSH
44815: LD_INT 4
44817: PPUSH
44818: CALL_OW 273
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_VAR 0 7
44831: PPUSH
44832: LD_INT 3
44834: PPUSH
44835: LD_INT 4
44837: PPUSH
44838: CALL_OW 272
44842: PUSH
44843: LD_VAR 0 8
44847: PPUSH
44848: LD_INT 3
44850: PPUSH
44851: LD_INT 4
44853: PPUSH
44854: CALL_OW 273
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_VAR 0 7
44867: PPUSH
44868: LD_INT 4
44870: PPUSH
44871: LD_INT 4
44873: PPUSH
44874: CALL_OW 272
44878: PUSH
44879: LD_VAR 0 8
44883: PPUSH
44884: LD_INT 4
44886: PPUSH
44887: LD_INT 4
44889: PPUSH
44890: CALL_OW 273
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_VAR 0 7
44903: PPUSH
44904: LD_INT 5
44906: PPUSH
44907: LD_INT 4
44909: PPUSH
44910: CALL_OW 272
44914: PUSH
44915: LD_VAR 0 8
44919: PPUSH
44920: LD_INT 5
44922: PPUSH
44923: LD_INT 4
44925: PPUSH
44926: CALL_OW 273
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: ST_TO_ADDR
// for i = tmp downto 1 do
44943: LD_ADDR_VAR 0 4
44947: PUSH
44948: DOUBLE
44949: LD_VAR 0 6
44953: INC
44954: ST_TO_ADDR
44955: LD_INT 1
44957: PUSH
44958: FOR_DOWNTO
44959: IFFALSE 45060
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
44961: LD_VAR 0 6
44965: PUSH
44966: LD_VAR 0 4
44970: ARRAY
44971: PUSH
44972: LD_INT 1
44974: ARRAY
44975: PPUSH
44976: LD_VAR 0 6
44980: PUSH
44981: LD_VAR 0 4
44985: ARRAY
44986: PUSH
44987: LD_INT 2
44989: ARRAY
44990: PPUSH
44991: CALL_OW 488
44995: NOT
44996: PUSH
44997: LD_VAR 0 6
45001: PUSH
45002: LD_VAR 0 4
45006: ARRAY
45007: PUSH
45008: LD_INT 1
45010: ARRAY
45011: PPUSH
45012: LD_VAR 0 6
45016: PUSH
45017: LD_VAR 0 4
45021: ARRAY
45022: PUSH
45023: LD_INT 2
45025: ARRAY
45026: PPUSH
45027: CALL_OW 428
45031: PUSH
45032: LD_INT 0
45034: NONEQUAL
45035: OR
45036: IFFALSE 45058
// tmp := Delete ( tmp , i ) ;
45038: LD_ADDR_VAR 0 6
45042: PUSH
45043: LD_VAR 0 6
45047: PPUSH
45048: LD_VAR 0 4
45052: PPUSH
45053: CALL_OW 3
45057: ST_TO_ADDR
45058: GO 44958
45060: POP
45061: POP
// j := GetClosestHex ( unit , tmp ) ;
45062: LD_ADDR_VAR 0 5
45066: PUSH
45067: LD_VAR 0 1
45071: PPUSH
45072: LD_VAR 0 6
45076: PPUSH
45077: CALL 44362 0 2
45081: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
45082: LD_VAR 0 1
45086: PPUSH
45087: LD_VAR 0 5
45091: PUSH
45092: LD_INT 1
45094: ARRAY
45095: PPUSH
45096: LD_VAR 0 5
45100: PUSH
45101: LD_INT 2
45103: ARRAY
45104: PPUSH
45105: CALL_OW 111
// end ;
45109: LD_VAR 0 3
45113: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
45114: LD_INT 0
45116: PPUSH
45117: PPUSH
45118: PPUSH
// uc_side = 0 ;
45119: LD_ADDR_OWVAR 20
45123: PUSH
45124: LD_INT 0
45126: ST_TO_ADDR
// uc_nation = 0 ;
45127: LD_ADDR_OWVAR 21
45131: PUSH
45132: LD_INT 0
45134: ST_TO_ADDR
// InitHc ;
45135: CALL_OW 19
// InitVc ;
45139: CALL_OW 20
// if mastodonts then
45143: LD_VAR 0 6
45147: IFFALSE 45214
// for i = 1 to mastodonts do
45149: LD_ADDR_VAR 0 11
45153: PUSH
45154: DOUBLE
45155: LD_INT 1
45157: DEC
45158: ST_TO_ADDR
45159: LD_VAR 0 6
45163: PUSH
45164: FOR_TO
45165: IFFALSE 45212
// begin vc_chassis := 31 ;
45167: LD_ADDR_OWVAR 37
45171: PUSH
45172: LD_INT 31
45174: ST_TO_ADDR
// vc_control := control_rider ;
45175: LD_ADDR_OWVAR 38
45179: PUSH
45180: LD_INT 4
45182: ST_TO_ADDR
// animal := CreateVehicle ;
45183: LD_ADDR_VAR 0 12
45187: PUSH
45188: CALL_OW 45
45192: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45193: LD_VAR 0 12
45197: PPUSH
45198: LD_VAR 0 8
45202: PPUSH
45203: LD_INT 0
45205: PPUSH
45206: CALL 51959 0 3
// end ;
45210: GO 45164
45212: POP
45213: POP
// if horses then
45214: LD_VAR 0 5
45218: IFFALSE 45285
// for i = 1 to horses do
45220: LD_ADDR_VAR 0 11
45224: PUSH
45225: DOUBLE
45226: LD_INT 1
45228: DEC
45229: ST_TO_ADDR
45230: LD_VAR 0 5
45234: PUSH
45235: FOR_TO
45236: IFFALSE 45283
// begin hc_class := 21 ;
45238: LD_ADDR_OWVAR 28
45242: PUSH
45243: LD_INT 21
45245: ST_TO_ADDR
// hc_gallery :=  ;
45246: LD_ADDR_OWVAR 33
45250: PUSH
45251: LD_STRING 
45253: ST_TO_ADDR
// animal := CreateHuman ;
45254: LD_ADDR_VAR 0 12
45258: PUSH
45259: CALL_OW 44
45263: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45264: LD_VAR 0 12
45268: PPUSH
45269: LD_VAR 0 8
45273: PPUSH
45274: LD_INT 0
45276: PPUSH
45277: CALL 51959 0 3
// end ;
45281: GO 45235
45283: POP
45284: POP
// if birds then
45285: LD_VAR 0 1
45289: IFFALSE 45356
// for i = 1 to birds do
45291: LD_ADDR_VAR 0 11
45295: PUSH
45296: DOUBLE
45297: LD_INT 1
45299: DEC
45300: ST_TO_ADDR
45301: LD_VAR 0 1
45305: PUSH
45306: FOR_TO
45307: IFFALSE 45354
// begin hc_class = 18 ;
45309: LD_ADDR_OWVAR 28
45313: PUSH
45314: LD_INT 18
45316: ST_TO_ADDR
// hc_gallery =  ;
45317: LD_ADDR_OWVAR 33
45321: PUSH
45322: LD_STRING 
45324: ST_TO_ADDR
// animal := CreateHuman ;
45325: LD_ADDR_VAR 0 12
45329: PUSH
45330: CALL_OW 44
45334: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45335: LD_VAR 0 12
45339: PPUSH
45340: LD_VAR 0 8
45344: PPUSH
45345: LD_INT 0
45347: PPUSH
45348: CALL 51959 0 3
// end ;
45352: GO 45306
45354: POP
45355: POP
// if tigers then
45356: LD_VAR 0 2
45360: IFFALSE 45444
// for i = 1 to tigers do
45362: LD_ADDR_VAR 0 11
45366: PUSH
45367: DOUBLE
45368: LD_INT 1
45370: DEC
45371: ST_TO_ADDR
45372: LD_VAR 0 2
45376: PUSH
45377: FOR_TO
45378: IFFALSE 45442
// begin hc_class = class_tiger ;
45380: LD_ADDR_OWVAR 28
45384: PUSH
45385: LD_INT 14
45387: ST_TO_ADDR
// hc_gallery =  ;
45388: LD_ADDR_OWVAR 33
45392: PUSH
45393: LD_STRING 
45395: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
45396: LD_ADDR_OWVAR 35
45400: PUSH
45401: LD_INT 7
45403: NEG
45404: PPUSH
45405: LD_INT 7
45407: PPUSH
45408: CALL_OW 12
45412: ST_TO_ADDR
// animal := CreateHuman ;
45413: LD_ADDR_VAR 0 12
45417: PUSH
45418: CALL_OW 44
45422: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45423: LD_VAR 0 12
45427: PPUSH
45428: LD_VAR 0 8
45432: PPUSH
45433: LD_INT 0
45435: PPUSH
45436: CALL 51959 0 3
// end ;
45440: GO 45377
45442: POP
45443: POP
// if apemans then
45444: LD_VAR 0 3
45448: IFFALSE 45571
// for i = 1 to apemans do
45450: LD_ADDR_VAR 0 11
45454: PUSH
45455: DOUBLE
45456: LD_INT 1
45458: DEC
45459: ST_TO_ADDR
45460: LD_VAR 0 3
45464: PUSH
45465: FOR_TO
45466: IFFALSE 45569
// begin hc_class = class_apeman ;
45468: LD_ADDR_OWVAR 28
45472: PUSH
45473: LD_INT 12
45475: ST_TO_ADDR
// hc_gallery =  ;
45476: LD_ADDR_OWVAR 33
45480: PUSH
45481: LD_STRING 
45483: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
45484: LD_ADDR_OWVAR 35
45488: PUSH
45489: LD_INT 5
45491: NEG
45492: PPUSH
45493: LD_INT 5
45495: PPUSH
45496: CALL_OW 12
45500: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45501: LD_ADDR_OWVAR 31
45505: PUSH
45506: LD_INT 1
45508: PPUSH
45509: LD_INT 3
45511: PPUSH
45512: CALL_OW 12
45516: PUSH
45517: LD_INT 1
45519: PPUSH
45520: LD_INT 3
45522: PPUSH
45523: CALL_OW 12
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: LD_INT 0
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: ST_TO_ADDR
// animal := CreateHuman ;
45540: LD_ADDR_VAR 0 12
45544: PUSH
45545: CALL_OW 44
45549: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45550: LD_VAR 0 12
45554: PPUSH
45555: LD_VAR 0 8
45559: PPUSH
45560: LD_INT 0
45562: PPUSH
45563: CALL 51959 0 3
// end ;
45567: GO 45465
45569: POP
45570: POP
// if enchidnas then
45571: LD_VAR 0 4
45575: IFFALSE 45642
// for i = 1 to enchidnas do
45577: LD_ADDR_VAR 0 11
45581: PUSH
45582: DOUBLE
45583: LD_INT 1
45585: DEC
45586: ST_TO_ADDR
45587: LD_VAR 0 4
45591: PUSH
45592: FOR_TO
45593: IFFALSE 45640
// begin hc_class = 13 ;
45595: LD_ADDR_OWVAR 28
45599: PUSH
45600: LD_INT 13
45602: ST_TO_ADDR
// hc_gallery =  ;
45603: LD_ADDR_OWVAR 33
45607: PUSH
45608: LD_STRING 
45610: ST_TO_ADDR
// animal := CreateHuman ;
45611: LD_ADDR_VAR 0 12
45615: PUSH
45616: CALL_OW 44
45620: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45621: LD_VAR 0 12
45625: PPUSH
45626: LD_VAR 0 8
45630: PPUSH
45631: LD_INT 0
45633: PPUSH
45634: CALL 51959 0 3
// end ;
45638: GO 45592
45640: POP
45641: POP
// if fishes then
45642: LD_VAR 0 7
45646: IFFALSE 45713
// for i = 1 to fishes do
45648: LD_ADDR_VAR 0 11
45652: PUSH
45653: DOUBLE
45654: LD_INT 1
45656: DEC
45657: ST_TO_ADDR
45658: LD_VAR 0 7
45662: PUSH
45663: FOR_TO
45664: IFFALSE 45711
// begin hc_class = 20 ;
45666: LD_ADDR_OWVAR 28
45670: PUSH
45671: LD_INT 20
45673: ST_TO_ADDR
// hc_gallery =  ;
45674: LD_ADDR_OWVAR 33
45678: PUSH
45679: LD_STRING 
45681: ST_TO_ADDR
// animal := CreateHuman ;
45682: LD_ADDR_VAR 0 12
45686: PUSH
45687: CALL_OW 44
45691: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
45692: LD_VAR 0 12
45696: PPUSH
45697: LD_VAR 0 9
45701: PPUSH
45702: LD_INT 0
45704: PPUSH
45705: CALL 51959 0 3
// end ;
45709: GO 45663
45711: POP
45712: POP
// end ;
45713: LD_VAR 0 10
45717: RET
// export function WantHeal ( sci , unit ) ; begin
45718: LD_INT 0
45720: PPUSH
// if GetTaskList ( sci ) > 0 then
45721: LD_VAR 0 1
45725: PPUSH
45726: CALL_OW 437
45730: PUSH
45731: LD_INT 0
45733: GREATER
45734: IFFALSE 45804
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45736: LD_VAR 0 1
45740: PPUSH
45741: CALL_OW 437
45745: PUSH
45746: LD_INT 1
45748: ARRAY
45749: PUSH
45750: LD_INT 1
45752: ARRAY
45753: PUSH
45754: LD_STRING l
45756: EQUAL
45757: PUSH
45758: LD_VAR 0 1
45762: PPUSH
45763: CALL_OW 437
45767: PUSH
45768: LD_INT 1
45770: ARRAY
45771: PUSH
45772: LD_INT 4
45774: ARRAY
45775: PUSH
45776: LD_VAR 0 2
45780: EQUAL
45781: AND
45782: IFFALSE 45794
// result := true else
45784: LD_ADDR_VAR 0 3
45788: PUSH
45789: LD_INT 1
45791: ST_TO_ADDR
45792: GO 45802
// result := false ;
45794: LD_ADDR_VAR 0 3
45798: PUSH
45799: LD_INT 0
45801: ST_TO_ADDR
// end else
45802: GO 45812
// result := false ;
45804: LD_ADDR_VAR 0 3
45808: PUSH
45809: LD_INT 0
45811: ST_TO_ADDR
// end ;
45812: LD_VAR 0 3
45816: RET
// export function HealTarget ( sci ) ; begin
45817: LD_INT 0
45819: PPUSH
// if not sci then
45820: LD_VAR 0 1
45824: NOT
45825: IFFALSE 45829
// exit ;
45827: GO 45894
// result := 0 ;
45829: LD_ADDR_VAR 0 2
45833: PUSH
45834: LD_INT 0
45836: ST_TO_ADDR
// if GetTaskList ( sci ) then
45837: LD_VAR 0 1
45841: PPUSH
45842: CALL_OW 437
45846: IFFALSE 45894
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45848: LD_VAR 0 1
45852: PPUSH
45853: CALL_OW 437
45857: PUSH
45858: LD_INT 1
45860: ARRAY
45861: PUSH
45862: LD_INT 1
45864: ARRAY
45865: PUSH
45866: LD_STRING l
45868: EQUAL
45869: IFFALSE 45894
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45871: LD_ADDR_VAR 0 2
45875: PUSH
45876: LD_VAR 0 1
45880: PPUSH
45881: CALL_OW 437
45885: PUSH
45886: LD_INT 1
45888: ARRAY
45889: PUSH
45890: LD_INT 4
45892: ARRAY
45893: ST_TO_ADDR
// end ;
45894: LD_VAR 0 2
45898: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
45899: LD_INT 0
45901: PPUSH
45902: PPUSH
45903: PPUSH
45904: PPUSH
45905: PPUSH
45906: PPUSH
45907: PPUSH
45908: PPUSH
45909: PPUSH
45910: PPUSH
45911: PPUSH
45912: PPUSH
45913: PPUSH
45914: PPUSH
45915: PPUSH
45916: PPUSH
45917: PPUSH
45918: PPUSH
45919: PPUSH
45920: PPUSH
45921: PPUSH
45922: PPUSH
45923: PPUSH
45924: PPUSH
45925: PPUSH
45926: PPUSH
45927: PPUSH
45928: PPUSH
45929: PPUSH
45930: PPUSH
45931: PPUSH
45932: PPUSH
45933: PPUSH
45934: PPUSH
// if not list then
45935: LD_VAR 0 1
45939: NOT
45940: IFFALSE 45944
// exit ;
45942: GO 50570
// base := list [ 1 ] ;
45944: LD_ADDR_VAR 0 3
45948: PUSH
45949: LD_VAR 0 1
45953: PUSH
45954: LD_INT 1
45956: ARRAY
45957: ST_TO_ADDR
// group := list [ 2 ] ;
45958: LD_ADDR_VAR 0 4
45962: PUSH
45963: LD_VAR 0 1
45967: PUSH
45968: LD_INT 2
45970: ARRAY
45971: ST_TO_ADDR
// path := list [ 3 ] ;
45972: LD_ADDR_VAR 0 5
45976: PUSH
45977: LD_VAR 0 1
45981: PUSH
45982: LD_INT 3
45984: ARRAY
45985: ST_TO_ADDR
// flags := list [ 4 ] ;
45986: LD_ADDR_VAR 0 6
45990: PUSH
45991: LD_VAR 0 1
45995: PUSH
45996: LD_INT 4
45998: ARRAY
45999: ST_TO_ADDR
// mined := [ ] ;
46000: LD_ADDR_VAR 0 27
46004: PUSH
46005: EMPTY
46006: ST_TO_ADDR
// bombed := [ ] ;
46007: LD_ADDR_VAR 0 28
46011: PUSH
46012: EMPTY
46013: ST_TO_ADDR
// healers := [ ] ;
46014: LD_ADDR_VAR 0 31
46018: PUSH
46019: EMPTY
46020: ST_TO_ADDR
// to_heal := [ ] ;
46021: LD_ADDR_VAR 0 30
46025: PUSH
46026: EMPTY
46027: ST_TO_ADDR
// repairs := [ ] ;
46028: LD_ADDR_VAR 0 33
46032: PUSH
46033: EMPTY
46034: ST_TO_ADDR
// to_repair := [ ] ;
46035: LD_ADDR_VAR 0 32
46039: PUSH
46040: EMPTY
46041: ST_TO_ADDR
// if not group or not path then
46042: LD_VAR 0 4
46046: NOT
46047: PUSH
46048: LD_VAR 0 5
46052: NOT
46053: OR
46054: IFFALSE 46058
// exit ;
46056: GO 50570
// side := GetSide ( group [ 1 ] ) ;
46058: LD_ADDR_VAR 0 35
46062: PUSH
46063: LD_VAR 0 4
46067: PUSH
46068: LD_INT 1
46070: ARRAY
46071: PPUSH
46072: CALL_OW 255
46076: ST_TO_ADDR
// if flags then
46077: LD_VAR 0 6
46081: IFFALSE 46225
// begin f_ignore_area := flags [ 1 ] ;
46083: LD_ADDR_VAR 0 17
46087: PUSH
46088: LD_VAR 0 6
46092: PUSH
46093: LD_INT 1
46095: ARRAY
46096: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
46097: LD_ADDR_VAR 0 18
46101: PUSH
46102: LD_VAR 0 6
46106: PUSH
46107: LD_INT 2
46109: ARRAY
46110: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
46111: LD_ADDR_VAR 0 19
46115: PUSH
46116: LD_VAR 0 6
46120: PUSH
46121: LD_INT 3
46123: ARRAY
46124: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
46125: LD_ADDR_VAR 0 20
46129: PUSH
46130: LD_VAR 0 6
46134: PUSH
46135: LD_INT 4
46137: ARRAY
46138: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
46139: LD_ADDR_VAR 0 21
46143: PUSH
46144: LD_VAR 0 6
46148: PUSH
46149: LD_INT 5
46151: ARRAY
46152: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
46153: LD_ADDR_VAR 0 22
46157: PUSH
46158: LD_VAR 0 6
46162: PUSH
46163: LD_INT 6
46165: ARRAY
46166: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
46167: LD_ADDR_VAR 0 23
46171: PUSH
46172: LD_VAR 0 6
46176: PUSH
46177: LD_INT 7
46179: ARRAY
46180: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
46181: LD_ADDR_VAR 0 24
46185: PUSH
46186: LD_VAR 0 6
46190: PUSH
46191: LD_INT 8
46193: ARRAY
46194: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
46195: LD_ADDR_VAR 0 25
46199: PUSH
46200: LD_VAR 0 6
46204: PUSH
46205: LD_INT 9
46207: ARRAY
46208: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
46209: LD_ADDR_VAR 0 26
46213: PUSH
46214: LD_VAR 0 6
46218: PUSH
46219: LD_INT 10
46221: ARRAY
46222: ST_TO_ADDR
// end else
46223: GO 46305
// begin f_ignore_area := false ;
46225: LD_ADDR_VAR 0 17
46229: PUSH
46230: LD_INT 0
46232: ST_TO_ADDR
// f_capture := false ;
46233: LD_ADDR_VAR 0 18
46237: PUSH
46238: LD_INT 0
46240: ST_TO_ADDR
// f_ignore_civ := false ;
46241: LD_ADDR_VAR 0 19
46245: PUSH
46246: LD_INT 0
46248: ST_TO_ADDR
// f_murder := false ;
46249: LD_ADDR_VAR 0 20
46253: PUSH
46254: LD_INT 0
46256: ST_TO_ADDR
// f_mines := false ;
46257: LD_ADDR_VAR 0 21
46261: PUSH
46262: LD_INT 0
46264: ST_TO_ADDR
// f_repair := false ;
46265: LD_ADDR_VAR 0 22
46269: PUSH
46270: LD_INT 0
46272: ST_TO_ADDR
// f_heal := false ;
46273: LD_ADDR_VAR 0 23
46277: PUSH
46278: LD_INT 0
46280: ST_TO_ADDR
// f_spacetime := false ;
46281: LD_ADDR_VAR 0 24
46285: PUSH
46286: LD_INT 0
46288: ST_TO_ADDR
// f_attack_depot := false ;
46289: LD_ADDR_VAR 0 25
46293: PUSH
46294: LD_INT 0
46296: ST_TO_ADDR
// f_crawl := false ;
46297: LD_ADDR_VAR 0 26
46301: PUSH
46302: LD_INT 0
46304: ST_TO_ADDR
// end ; if f_heal then
46305: LD_VAR 0 23
46309: IFFALSE 46336
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
46311: LD_ADDR_VAR 0 31
46315: PUSH
46316: LD_VAR 0 4
46320: PPUSH
46321: LD_INT 25
46323: PUSH
46324: LD_INT 4
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PPUSH
46331: CALL_OW 72
46335: ST_TO_ADDR
// if f_repair then
46336: LD_VAR 0 22
46340: IFFALSE 46367
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
46342: LD_ADDR_VAR 0 33
46346: PUSH
46347: LD_VAR 0 4
46351: PPUSH
46352: LD_INT 25
46354: PUSH
46355: LD_INT 3
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PPUSH
46362: CALL_OW 72
46366: ST_TO_ADDR
// units_path := [ ] ;
46367: LD_ADDR_VAR 0 16
46371: PUSH
46372: EMPTY
46373: ST_TO_ADDR
// for i = 1 to group do
46374: LD_ADDR_VAR 0 7
46378: PUSH
46379: DOUBLE
46380: LD_INT 1
46382: DEC
46383: ST_TO_ADDR
46384: LD_VAR 0 4
46388: PUSH
46389: FOR_TO
46390: IFFALSE 46419
// units_path := Replace ( units_path , i , path ) ;
46392: LD_ADDR_VAR 0 16
46396: PUSH
46397: LD_VAR 0 16
46401: PPUSH
46402: LD_VAR 0 7
46406: PPUSH
46407: LD_VAR 0 5
46411: PPUSH
46412: CALL_OW 1
46416: ST_TO_ADDR
46417: GO 46389
46419: POP
46420: POP
// repeat for i = group downto 1 do
46421: LD_ADDR_VAR 0 7
46425: PUSH
46426: DOUBLE
46427: LD_VAR 0 4
46431: INC
46432: ST_TO_ADDR
46433: LD_INT 1
46435: PUSH
46436: FOR_DOWNTO
46437: IFFALSE 50533
// begin wait ( 5 ) ;
46439: LD_INT 5
46441: PPUSH
46442: CALL_OW 67
// tmp := [ ] ;
46446: LD_ADDR_VAR 0 14
46450: PUSH
46451: EMPTY
46452: ST_TO_ADDR
// attacking := false ;
46453: LD_ADDR_VAR 0 29
46457: PUSH
46458: LD_INT 0
46460: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
46461: LD_VAR 0 4
46465: PUSH
46466: LD_VAR 0 7
46470: ARRAY
46471: PPUSH
46472: CALL_OW 301
46476: PUSH
46477: LD_VAR 0 4
46481: PUSH
46482: LD_VAR 0 7
46486: ARRAY
46487: NOT
46488: OR
46489: IFFALSE 46598
// begin if GetType ( group [ i ] ) = unit_human then
46491: LD_VAR 0 4
46495: PUSH
46496: LD_VAR 0 7
46500: ARRAY
46501: PPUSH
46502: CALL_OW 247
46506: PUSH
46507: LD_INT 1
46509: EQUAL
46510: IFFALSE 46556
// begin to_heal := to_heal diff group [ i ] ;
46512: LD_ADDR_VAR 0 30
46516: PUSH
46517: LD_VAR 0 30
46521: PUSH
46522: LD_VAR 0 4
46526: PUSH
46527: LD_VAR 0 7
46531: ARRAY
46532: DIFF
46533: ST_TO_ADDR
// healers := healers diff group [ i ] ;
46534: LD_ADDR_VAR 0 31
46538: PUSH
46539: LD_VAR 0 31
46543: PUSH
46544: LD_VAR 0 4
46548: PUSH
46549: LD_VAR 0 7
46553: ARRAY
46554: DIFF
46555: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
46556: LD_ADDR_VAR 0 4
46560: PUSH
46561: LD_VAR 0 4
46565: PPUSH
46566: LD_VAR 0 7
46570: PPUSH
46571: CALL_OW 3
46575: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
46576: LD_ADDR_VAR 0 16
46580: PUSH
46581: LD_VAR 0 16
46585: PPUSH
46586: LD_VAR 0 7
46590: PPUSH
46591: CALL_OW 3
46595: ST_TO_ADDR
// continue ;
46596: GO 46436
// end ; if f_repair then
46598: LD_VAR 0 22
46602: IFFALSE 47091
// begin if GetType ( group [ i ] ) = unit_vehicle then
46604: LD_VAR 0 4
46608: PUSH
46609: LD_VAR 0 7
46613: ARRAY
46614: PPUSH
46615: CALL_OW 247
46619: PUSH
46620: LD_INT 2
46622: EQUAL
46623: IFFALSE 46813
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
46625: LD_VAR 0 4
46629: PUSH
46630: LD_VAR 0 7
46634: ARRAY
46635: PPUSH
46636: CALL_OW 256
46640: PUSH
46641: LD_INT 700
46643: LESS
46644: PUSH
46645: LD_VAR 0 4
46649: PUSH
46650: LD_VAR 0 7
46654: ARRAY
46655: PUSH
46656: LD_VAR 0 32
46660: IN
46661: NOT
46662: AND
46663: IFFALSE 46687
// to_repair := to_repair union group [ i ] ;
46665: LD_ADDR_VAR 0 32
46669: PUSH
46670: LD_VAR 0 32
46674: PUSH
46675: LD_VAR 0 4
46679: PUSH
46680: LD_VAR 0 7
46684: ARRAY
46685: UNION
46686: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
46687: LD_VAR 0 4
46691: PUSH
46692: LD_VAR 0 7
46696: ARRAY
46697: PPUSH
46698: CALL_OW 256
46702: PUSH
46703: LD_INT 1000
46705: EQUAL
46706: PUSH
46707: LD_VAR 0 4
46711: PUSH
46712: LD_VAR 0 7
46716: ARRAY
46717: PUSH
46718: LD_VAR 0 32
46722: IN
46723: AND
46724: IFFALSE 46748
// to_repair := to_repair diff group [ i ] ;
46726: LD_ADDR_VAR 0 32
46730: PUSH
46731: LD_VAR 0 32
46735: PUSH
46736: LD_VAR 0 4
46740: PUSH
46741: LD_VAR 0 7
46745: ARRAY
46746: DIFF
46747: ST_TO_ADDR
// if group [ i ] in to_repair then
46748: LD_VAR 0 4
46752: PUSH
46753: LD_VAR 0 7
46757: ARRAY
46758: PUSH
46759: LD_VAR 0 32
46763: IN
46764: IFFALSE 46811
// begin if not IsInArea ( group [ i ] , f_repair ) then
46766: LD_VAR 0 4
46770: PUSH
46771: LD_VAR 0 7
46775: ARRAY
46776: PPUSH
46777: LD_VAR 0 22
46781: PPUSH
46782: CALL_OW 308
46786: NOT
46787: IFFALSE 46809
// ComMoveToArea ( group [ i ] , f_repair ) ;
46789: LD_VAR 0 4
46793: PUSH
46794: LD_VAR 0 7
46798: ARRAY
46799: PPUSH
46800: LD_VAR 0 22
46804: PPUSH
46805: CALL_OW 113
// continue ;
46809: GO 46436
// end ; end else
46811: GO 47091
// if group [ i ] in repairs then
46813: LD_VAR 0 4
46817: PUSH
46818: LD_VAR 0 7
46822: ARRAY
46823: PUSH
46824: LD_VAR 0 33
46828: IN
46829: IFFALSE 47091
// begin if IsInUnit ( group [ i ] ) then
46831: LD_VAR 0 4
46835: PUSH
46836: LD_VAR 0 7
46840: ARRAY
46841: PPUSH
46842: CALL_OW 310
46846: IFFALSE 46914
// begin z := IsInUnit ( group [ i ] ) ;
46848: LD_ADDR_VAR 0 13
46852: PUSH
46853: LD_VAR 0 4
46857: PUSH
46858: LD_VAR 0 7
46862: ARRAY
46863: PPUSH
46864: CALL_OW 310
46868: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
46869: LD_VAR 0 13
46873: PUSH
46874: LD_VAR 0 32
46878: IN
46879: PUSH
46880: LD_VAR 0 13
46884: PPUSH
46885: LD_VAR 0 22
46889: PPUSH
46890: CALL_OW 308
46894: AND
46895: IFFALSE 46912
// ComExitVehicle ( group [ i ] ) ;
46897: LD_VAR 0 4
46901: PUSH
46902: LD_VAR 0 7
46906: ARRAY
46907: PPUSH
46908: CALL_OW 121
// end else
46912: GO 47091
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
46914: LD_ADDR_VAR 0 13
46918: PUSH
46919: LD_VAR 0 4
46923: PPUSH
46924: LD_INT 95
46926: PUSH
46927: LD_VAR 0 22
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 58
46938: PUSH
46939: EMPTY
46940: LIST
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PPUSH
46946: CALL_OW 72
46950: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
46951: LD_VAR 0 4
46955: PUSH
46956: LD_VAR 0 7
46960: ARRAY
46961: PPUSH
46962: CALL_OW 314
46966: NOT
46967: IFFALSE 47089
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
46969: LD_ADDR_VAR 0 10
46973: PUSH
46974: LD_VAR 0 13
46978: PPUSH
46979: LD_VAR 0 4
46983: PUSH
46984: LD_VAR 0 7
46988: ARRAY
46989: PPUSH
46990: CALL_OW 74
46994: ST_TO_ADDR
// if not x then
46995: LD_VAR 0 10
46999: NOT
47000: IFFALSE 47004
// continue ;
47002: GO 46436
// if GetLives ( x ) < 1000 then
47004: LD_VAR 0 10
47008: PPUSH
47009: CALL_OW 256
47013: PUSH
47014: LD_INT 1000
47016: LESS
47017: IFFALSE 47041
// ComRepairVehicle ( group [ i ] , x ) else
47019: LD_VAR 0 4
47023: PUSH
47024: LD_VAR 0 7
47028: ARRAY
47029: PPUSH
47030: LD_VAR 0 10
47034: PPUSH
47035: CALL_OW 129
47039: GO 47089
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
47041: LD_VAR 0 23
47045: PUSH
47046: LD_VAR 0 4
47050: PUSH
47051: LD_VAR 0 7
47055: ARRAY
47056: PPUSH
47057: CALL_OW 256
47061: PUSH
47062: LD_INT 1000
47064: LESS
47065: AND
47066: NOT
47067: IFFALSE 47089
// ComEnterUnit ( group [ i ] , x ) ;
47069: LD_VAR 0 4
47073: PUSH
47074: LD_VAR 0 7
47078: ARRAY
47079: PPUSH
47080: LD_VAR 0 10
47084: PPUSH
47085: CALL_OW 120
// end ; continue ;
47089: GO 46436
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
47091: LD_VAR 0 23
47095: PUSH
47096: LD_VAR 0 4
47100: PUSH
47101: LD_VAR 0 7
47105: ARRAY
47106: PPUSH
47107: CALL_OW 247
47111: PUSH
47112: LD_INT 1
47114: EQUAL
47115: AND
47116: IFFALSE 47594
// begin if group [ i ] in healers then
47118: LD_VAR 0 4
47122: PUSH
47123: LD_VAR 0 7
47127: ARRAY
47128: PUSH
47129: LD_VAR 0 31
47133: IN
47134: IFFALSE 47407
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
47136: LD_VAR 0 4
47140: PUSH
47141: LD_VAR 0 7
47145: ARRAY
47146: PPUSH
47147: LD_VAR 0 23
47151: PPUSH
47152: CALL_OW 308
47156: NOT
47157: PUSH
47158: LD_VAR 0 4
47162: PUSH
47163: LD_VAR 0 7
47167: ARRAY
47168: PPUSH
47169: CALL_OW 314
47173: NOT
47174: AND
47175: IFFALSE 47199
// ComMoveToArea ( group [ i ] , f_heal ) else
47177: LD_VAR 0 4
47181: PUSH
47182: LD_VAR 0 7
47186: ARRAY
47187: PPUSH
47188: LD_VAR 0 23
47192: PPUSH
47193: CALL_OW 113
47197: GO 47405
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
47199: LD_VAR 0 4
47203: PUSH
47204: LD_VAR 0 7
47208: ARRAY
47209: PPUSH
47210: CALL 45817 0 1
47214: PPUSH
47215: CALL_OW 256
47219: PUSH
47220: LD_INT 1000
47222: EQUAL
47223: IFFALSE 47242
// ComStop ( group [ i ] ) else
47225: LD_VAR 0 4
47229: PUSH
47230: LD_VAR 0 7
47234: ARRAY
47235: PPUSH
47236: CALL_OW 141
47240: GO 47405
// if not HasTask ( group [ i ] ) and to_heal then
47242: LD_VAR 0 4
47246: PUSH
47247: LD_VAR 0 7
47251: ARRAY
47252: PPUSH
47253: CALL_OW 314
47257: NOT
47258: PUSH
47259: LD_VAR 0 30
47263: AND
47264: IFFALSE 47405
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
47266: LD_ADDR_VAR 0 13
47270: PUSH
47271: LD_VAR 0 30
47275: PPUSH
47276: LD_INT 3
47278: PUSH
47279: LD_INT 54
47281: PUSH
47282: EMPTY
47283: LIST
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PPUSH
47289: CALL_OW 72
47293: PPUSH
47294: LD_VAR 0 4
47298: PUSH
47299: LD_VAR 0 7
47303: ARRAY
47304: PPUSH
47305: CALL_OW 74
47309: ST_TO_ADDR
// if z then
47310: LD_VAR 0 13
47314: IFFALSE 47405
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
47316: LD_INT 91
47318: PUSH
47319: LD_VAR 0 13
47323: PUSH
47324: LD_INT 10
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 81
47334: PUSH
47335: LD_VAR 0 13
47339: PPUSH
47340: CALL_OW 255
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PPUSH
47353: CALL_OW 69
47357: PUSH
47358: LD_INT 0
47360: EQUAL
47361: IFFALSE 47385
// ComHeal ( group [ i ] , z ) else
47363: LD_VAR 0 4
47367: PUSH
47368: LD_VAR 0 7
47372: ARRAY
47373: PPUSH
47374: LD_VAR 0 13
47378: PPUSH
47379: CALL_OW 128
47383: GO 47405
// ComMoveToArea ( group [ i ] , f_heal ) ;
47385: LD_VAR 0 4
47389: PUSH
47390: LD_VAR 0 7
47394: ARRAY
47395: PPUSH
47396: LD_VAR 0 23
47400: PPUSH
47401: CALL_OW 113
// end ; continue ;
47405: GO 46436
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
47407: LD_VAR 0 4
47411: PUSH
47412: LD_VAR 0 7
47416: ARRAY
47417: PPUSH
47418: CALL_OW 256
47422: PUSH
47423: LD_INT 700
47425: LESS
47426: PUSH
47427: LD_VAR 0 4
47431: PUSH
47432: LD_VAR 0 7
47436: ARRAY
47437: PUSH
47438: LD_VAR 0 30
47442: IN
47443: NOT
47444: AND
47445: IFFALSE 47469
// to_heal := to_heal union group [ i ] ;
47447: LD_ADDR_VAR 0 30
47451: PUSH
47452: LD_VAR 0 30
47456: PUSH
47457: LD_VAR 0 4
47461: PUSH
47462: LD_VAR 0 7
47466: ARRAY
47467: UNION
47468: ST_TO_ADDR
// if group [ i ] in to_heal then
47469: LD_VAR 0 4
47473: PUSH
47474: LD_VAR 0 7
47478: ARRAY
47479: PUSH
47480: LD_VAR 0 30
47484: IN
47485: IFFALSE 47594
// begin if GetLives ( group [ i ] ) = 1000 then
47487: LD_VAR 0 4
47491: PUSH
47492: LD_VAR 0 7
47496: ARRAY
47497: PPUSH
47498: CALL_OW 256
47502: PUSH
47503: LD_INT 1000
47505: EQUAL
47506: IFFALSE 47532
// to_heal := to_heal diff group [ i ] else
47508: LD_ADDR_VAR 0 30
47512: PUSH
47513: LD_VAR 0 30
47517: PUSH
47518: LD_VAR 0 4
47522: PUSH
47523: LD_VAR 0 7
47527: ARRAY
47528: DIFF
47529: ST_TO_ADDR
47530: GO 47594
// begin if not IsInArea ( group [ i ] , to_heal ) then
47532: LD_VAR 0 4
47536: PUSH
47537: LD_VAR 0 7
47541: ARRAY
47542: PPUSH
47543: LD_VAR 0 30
47547: PPUSH
47548: CALL_OW 308
47552: NOT
47553: IFFALSE 47577
// ComMoveToArea ( group [ i ] , f_heal ) else
47555: LD_VAR 0 4
47559: PUSH
47560: LD_VAR 0 7
47564: ARRAY
47565: PPUSH
47566: LD_VAR 0 23
47570: PPUSH
47571: CALL_OW 113
47575: GO 47592
// ComHold ( group [ i ] ) ;
47577: LD_VAR 0 4
47581: PUSH
47582: LD_VAR 0 7
47586: ARRAY
47587: PPUSH
47588: CALL_OW 140
// continue ;
47592: GO 46436
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
47594: LD_VAR 0 4
47598: PUSH
47599: LD_VAR 0 7
47603: ARRAY
47604: PPUSH
47605: LD_INT 10
47607: PPUSH
47608: CALL 44214 0 2
47612: NOT
47613: PUSH
47614: LD_VAR 0 16
47618: PUSH
47619: LD_VAR 0 7
47623: ARRAY
47624: PUSH
47625: EMPTY
47626: EQUAL
47627: NOT
47628: AND
47629: IFFALSE 47895
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
47631: LD_VAR 0 4
47635: PUSH
47636: LD_VAR 0 7
47640: ARRAY
47641: PPUSH
47642: CALL_OW 262
47646: PUSH
47647: LD_INT 1
47649: PUSH
47650: LD_INT 2
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: IN
47657: IFFALSE 47698
// if GetFuel ( group [ i ] ) < 10 then
47659: LD_VAR 0 4
47663: PUSH
47664: LD_VAR 0 7
47668: ARRAY
47669: PPUSH
47670: CALL_OW 261
47674: PUSH
47675: LD_INT 10
47677: LESS
47678: IFFALSE 47698
// SetFuel ( group [ i ] , 12 ) ;
47680: LD_VAR 0 4
47684: PUSH
47685: LD_VAR 0 7
47689: ARRAY
47690: PPUSH
47691: LD_INT 12
47693: PPUSH
47694: CALL_OW 240
// if units_path [ i ] then
47698: LD_VAR 0 16
47702: PUSH
47703: LD_VAR 0 7
47707: ARRAY
47708: IFFALSE 47893
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
47710: LD_VAR 0 4
47714: PUSH
47715: LD_VAR 0 7
47719: ARRAY
47720: PPUSH
47721: LD_VAR 0 16
47725: PUSH
47726: LD_VAR 0 7
47730: ARRAY
47731: PUSH
47732: LD_INT 1
47734: ARRAY
47735: PUSH
47736: LD_INT 1
47738: ARRAY
47739: PPUSH
47740: LD_VAR 0 16
47744: PUSH
47745: LD_VAR 0 7
47749: ARRAY
47750: PUSH
47751: LD_INT 1
47753: ARRAY
47754: PUSH
47755: LD_INT 2
47757: ARRAY
47758: PPUSH
47759: CALL_OW 297
47763: PUSH
47764: LD_INT 6
47766: GREATER
47767: IFFALSE 47842
// begin if not HasTask ( group [ i ] ) then
47769: LD_VAR 0 4
47773: PUSH
47774: LD_VAR 0 7
47778: ARRAY
47779: PPUSH
47780: CALL_OW 314
47784: NOT
47785: IFFALSE 47840
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
47787: LD_VAR 0 4
47791: PUSH
47792: LD_VAR 0 7
47796: ARRAY
47797: PPUSH
47798: LD_VAR 0 16
47802: PUSH
47803: LD_VAR 0 7
47807: ARRAY
47808: PUSH
47809: LD_INT 1
47811: ARRAY
47812: PUSH
47813: LD_INT 1
47815: ARRAY
47816: PPUSH
47817: LD_VAR 0 16
47821: PUSH
47822: LD_VAR 0 7
47826: ARRAY
47827: PUSH
47828: LD_INT 1
47830: ARRAY
47831: PUSH
47832: LD_INT 2
47834: ARRAY
47835: PPUSH
47836: CALL_OW 114
// end else
47840: GO 47893
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
47842: LD_ADDR_VAR 0 15
47846: PUSH
47847: LD_VAR 0 16
47851: PUSH
47852: LD_VAR 0 7
47856: ARRAY
47857: PPUSH
47858: LD_INT 1
47860: PPUSH
47861: CALL_OW 3
47865: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
47866: LD_ADDR_VAR 0 16
47870: PUSH
47871: LD_VAR 0 16
47875: PPUSH
47876: LD_VAR 0 7
47880: PPUSH
47881: LD_VAR 0 15
47885: PPUSH
47886: CALL_OW 1
47890: ST_TO_ADDR
// continue ;
47891: GO 46436
// end ; end ; end else
47893: GO 50531
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
47895: LD_ADDR_VAR 0 14
47899: PUSH
47900: LD_INT 81
47902: PUSH
47903: LD_VAR 0 4
47907: PUSH
47908: LD_VAR 0 7
47912: ARRAY
47913: PPUSH
47914: CALL_OW 255
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PPUSH
47923: CALL_OW 69
47927: ST_TO_ADDR
// if not tmp then
47928: LD_VAR 0 14
47932: NOT
47933: IFFALSE 47937
// continue ;
47935: GO 46436
// if f_ignore_area then
47937: LD_VAR 0 17
47941: IFFALSE 48029
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
47943: LD_ADDR_VAR 0 15
47947: PUSH
47948: LD_VAR 0 14
47952: PPUSH
47953: LD_INT 3
47955: PUSH
47956: LD_INT 92
47958: PUSH
47959: LD_VAR 0 17
47963: PUSH
47964: LD_INT 1
47966: ARRAY
47967: PUSH
47968: LD_VAR 0 17
47972: PUSH
47973: LD_INT 2
47975: ARRAY
47976: PUSH
47977: LD_VAR 0 17
47981: PUSH
47982: LD_INT 3
47984: ARRAY
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PPUSH
47996: CALL_OW 72
48000: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
48001: LD_VAR 0 14
48005: PUSH
48006: LD_VAR 0 15
48010: DIFF
48011: IFFALSE 48029
// tmp := tmp diff tmp2 ;
48013: LD_ADDR_VAR 0 14
48017: PUSH
48018: LD_VAR 0 14
48022: PUSH
48023: LD_VAR 0 15
48027: DIFF
48028: ST_TO_ADDR
// end ; if not f_murder then
48029: LD_VAR 0 20
48033: NOT
48034: IFFALSE 48092
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
48036: LD_ADDR_VAR 0 15
48040: PUSH
48041: LD_VAR 0 14
48045: PPUSH
48046: LD_INT 3
48048: PUSH
48049: LD_INT 50
48051: PUSH
48052: EMPTY
48053: LIST
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PPUSH
48059: CALL_OW 72
48063: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
48064: LD_VAR 0 14
48068: PUSH
48069: LD_VAR 0 15
48073: DIFF
48074: IFFALSE 48092
// tmp := tmp diff tmp2 ;
48076: LD_ADDR_VAR 0 14
48080: PUSH
48081: LD_VAR 0 14
48085: PUSH
48086: LD_VAR 0 15
48090: DIFF
48091: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
48092: LD_ADDR_VAR 0 14
48096: PUSH
48097: LD_VAR 0 4
48101: PUSH
48102: LD_VAR 0 7
48106: ARRAY
48107: PPUSH
48108: LD_VAR 0 14
48112: PPUSH
48113: LD_INT 1
48115: PPUSH
48116: LD_INT 1
48118: PPUSH
48119: CALL 17863 0 4
48123: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
48124: LD_VAR 0 4
48128: PUSH
48129: LD_VAR 0 7
48133: ARRAY
48134: PPUSH
48135: CALL_OW 257
48139: PUSH
48140: LD_INT 1
48142: EQUAL
48143: IFFALSE 48591
// begin if WantPlant ( group [ i ] ) then
48145: LD_VAR 0 4
48149: PUSH
48150: LD_VAR 0 7
48154: ARRAY
48155: PPUSH
48156: CALL 17364 0 1
48160: IFFALSE 48164
// continue ;
48162: GO 46436
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
48164: LD_VAR 0 18
48168: PUSH
48169: LD_VAR 0 4
48173: PUSH
48174: LD_VAR 0 7
48178: ARRAY
48179: PPUSH
48180: CALL_OW 310
48184: NOT
48185: AND
48186: PUSH
48187: LD_VAR 0 14
48191: PUSH
48192: LD_INT 1
48194: ARRAY
48195: PUSH
48196: LD_VAR 0 14
48200: PPUSH
48201: LD_INT 21
48203: PUSH
48204: LD_INT 2
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 58
48213: PUSH
48214: EMPTY
48215: LIST
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PPUSH
48221: CALL_OW 72
48225: IN
48226: AND
48227: IFFALSE 48263
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
48229: LD_VAR 0 4
48233: PUSH
48234: LD_VAR 0 7
48238: ARRAY
48239: PPUSH
48240: LD_VAR 0 14
48244: PUSH
48245: LD_INT 1
48247: ARRAY
48248: PPUSH
48249: CALL_OW 120
// attacking := true ;
48253: LD_ADDR_VAR 0 29
48257: PUSH
48258: LD_INT 1
48260: ST_TO_ADDR
// continue ;
48261: GO 46436
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
48263: LD_VAR 0 26
48267: PUSH
48268: LD_VAR 0 4
48272: PUSH
48273: LD_VAR 0 7
48277: ARRAY
48278: PPUSH
48279: CALL_OW 257
48283: PUSH
48284: LD_INT 1
48286: EQUAL
48287: AND
48288: PUSH
48289: LD_VAR 0 4
48293: PUSH
48294: LD_VAR 0 7
48298: ARRAY
48299: PPUSH
48300: CALL_OW 256
48304: PUSH
48305: LD_INT 800
48307: LESS
48308: AND
48309: PUSH
48310: LD_VAR 0 4
48314: PUSH
48315: LD_VAR 0 7
48319: ARRAY
48320: PPUSH
48321: CALL_OW 318
48325: NOT
48326: AND
48327: IFFALSE 48344
// ComCrawl ( group [ i ] ) ;
48329: LD_VAR 0 4
48333: PUSH
48334: LD_VAR 0 7
48338: ARRAY
48339: PPUSH
48340: CALL_OW 137
// if f_mines then
48344: LD_VAR 0 21
48348: IFFALSE 48591
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
48350: LD_VAR 0 14
48354: PUSH
48355: LD_INT 1
48357: ARRAY
48358: PPUSH
48359: CALL_OW 247
48363: PUSH
48364: LD_INT 3
48366: EQUAL
48367: PUSH
48368: LD_VAR 0 14
48372: PUSH
48373: LD_INT 1
48375: ARRAY
48376: PUSH
48377: LD_VAR 0 27
48381: IN
48382: NOT
48383: AND
48384: IFFALSE 48591
// begin x := GetX ( tmp [ 1 ] ) ;
48386: LD_ADDR_VAR 0 10
48390: PUSH
48391: LD_VAR 0 14
48395: PUSH
48396: LD_INT 1
48398: ARRAY
48399: PPUSH
48400: CALL_OW 250
48404: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
48405: LD_ADDR_VAR 0 11
48409: PUSH
48410: LD_VAR 0 14
48414: PUSH
48415: LD_INT 1
48417: ARRAY
48418: PPUSH
48419: CALL_OW 251
48423: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
48424: LD_ADDR_VAR 0 12
48428: PUSH
48429: LD_VAR 0 4
48433: PUSH
48434: LD_VAR 0 7
48438: ARRAY
48439: PPUSH
48440: CALL 44299 0 1
48444: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
48445: LD_VAR 0 4
48449: PUSH
48450: LD_VAR 0 7
48454: ARRAY
48455: PPUSH
48456: LD_VAR 0 10
48460: PPUSH
48461: LD_VAR 0 11
48465: PPUSH
48466: LD_VAR 0 14
48470: PUSH
48471: LD_INT 1
48473: ARRAY
48474: PPUSH
48475: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
48479: LD_VAR 0 4
48483: PUSH
48484: LD_VAR 0 7
48488: ARRAY
48489: PPUSH
48490: LD_VAR 0 10
48494: PPUSH
48495: LD_VAR 0 12
48499: PPUSH
48500: LD_INT 7
48502: PPUSH
48503: CALL_OW 272
48507: PPUSH
48508: LD_VAR 0 11
48512: PPUSH
48513: LD_VAR 0 12
48517: PPUSH
48518: LD_INT 7
48520: PPUSH
48521: CALL_OW 273
48525: PPUSH
48526: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
48530: LD_VAR 0 4
48534: PUSH
48535: LD_VAR 0 7
48539: ARRAY
48540: PPUSH
48541: LD_INT 71
48543: PPUSH
48544: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
48548: LD_ADDR_VAR 0 27
48552: PUSH
48553: LD_VAR 0 27
48557: PPUSH
48558: LD_VAR 0 27
48562: PUSH
48563: LD_INT 1
48565: PLUS
48566: PPUSH
48567: LD_VAR 0 14
48571: PUSH
48572: LD_INT 1
48574: ARRAY
48575: PPUSH
48576: CALL_OW 1
48580: ST_TO_ADDR
// attacking := true ;
48581: LD_ADDR_VAR 0 29
48585: PUSH
48586: LD_INT 1
48588: ST_TO_ADDR
// continue ;
48589: GO 46436
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
48591: LD_VAR 0 4
48595: PUSH
48596: LD_VAR 0 7
48600: ARRAY
48601: PPUSH
48602: CALL_OW 257
48606: PUSH
48607: LD_INT 17
48609: EQUAL
48610: PUSH
48611: LD_VAR 0 4
48615: PUSH
48616: LD_VAR 0 7
48620: ARRAY
48621: PPUSH
48622: CALL_OW 110
48626: PUSH
48627: LD_INT 71
48629: EQUAL
48630: NOT
48631: AND
48632: IFFALSE 48778
// begin attacking := false ;
48634: LD_ADDR_VAR 0 29
48638: PUSH
48639: LD_INT 0
48641: ST_TO_ADDR
// k := 5 ;
48642: LD_ADDR_VAR 0 9
48646: PUSH
48647: LD_INT 5
48649: ST_TO_ADDR
// if tmp < k then
48650: LD_VAR 0 14
48654: PUSH
48655: LD_VAR 0 9
48659: LESS
48660: IFFALSE 48672
// k := tmp ;
48662: LD_ADDR_VAR 0 9
48666: PUSH
48667: LD_VAR 0 14
48671: ST_TO_ADDR
// for j = 1 to k do
48672: LD_ADDR_VAR 0 8
48676: PUSH
48677: DOUBLE
48678: LD_INT 1
48680: DEC
48681: ST_TO_ADDR
48682: LD_VAR 0 9
48686: PUSH
48687: FOR_TO
48688: IFFALSE 48776
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
48690: LD_VAR 0 14
48694: PUSH
48695: LD_VAR 0 8
48699: ARRAY
48700: PUSH
48701: LD_VAR 0 14
48705: PPUSH
48706: LD_INT 58
48708: PUSH
48709: EMPTY
48710: LIST
48711: PPUSH
48712: CALL_OW 72
48716: IN
48717: NOT
48718: IFFALSE 48774
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
48720: LD_VAR 0 4
48724: PUSH
48725: LD_VAR 0 7
48729: ARRAY
48730: PPUSH
48731: LD_VAR 0 14
48735: PUSH
48736: LD_VAR 0 8
48740: ARRAY
48741: PPUSH
48742: CALL_OW 115
// attacking := true ;
48746: LD_ADDR_VAR 0 29
48750: PUSH
48751: LD_INT 1
48753: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
48754: LD_VAR 0 4
48758: PUSH
48759: LD_VAR 0 7
48763: ARRAY
48764: PPUSH
48765: LD_INT 71
48767: PPUSH
48768: CALL_OW 109
// continue ;
48772: GO 48687
// end ; end ;
48774: GO 48687
48776: POP
48777: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
48778: LD_VAR 0 4
48782: PUSH
48783: LD_VAR 0 7
48787: ARRAY
48788: PPUSH
48789: CALL_OW 257
48793: PUSH
48794: LD_INT 8
48796: EQUAL
48797: PUSH
48798: LD_VAR 0 4
48802: PUSH
48803: LD_VAR 0 7
48807: ARRAY
48808: PPUSH
48809: CALL_OW 264
48813: PUSH
48814: LD_INT 28
48816: PUSH
48817: LD_INT 45
48819: PUSH
48820: LD_INT 7
48822: PUSH
48823: LD_INT 47
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: IN
48832: OR
48833: IFFALSE 49063
// begin attacking := false ;
48835: LD_ADDR_VAR 0 29
48839: PUSH
48840: LD_INT 0
48842: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
48843: LD_VAR 0 14
48847: PUSH
48848: LD_INT 1
48850: ARRAY
48851: PPUSH
48852: CALL_OW 266
48856: PUSH
48857: LD_INT 32
48859: PUSH
48860: LD_INT 31
48862: PUSH
48863: LD_INT 33
48865: PUSH
48866: LD_INT 4
48868: PUSH
48869: LD_INT 5
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: IN
48879: IFFALSE 49063
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
48881: LD_ADDR_VAR 0 9
48885: PUSH
48886: LD_VAR 0 14
48890: PUSH
48891: LD_INT 1
48893: ARRAY
48894: PPUSH
48895: CALL_OW 266
48899: PPUSH
48900: LD_VAR 0 14
48904: PUSH
48905: LD_INT 1
48907: ARRAY
48908: PPUSH
48909: CALL_OW 250
48913: PPUSH
48914: LD_VAR 0 14
48918: PUSH
48919: LD_INT 1
48921: ARRAY
48922: PPUSH
48923: CALL_OW 251
48927: PPUSH
48928: LD_VAR 0 14
48932: PUSH
48933: LD_INT 1
48935: ARRAY
48936: PPUSH
48937: CALL_OW 254
48941: PPUSH
48942: LD_VAR 0 14
48946: PUSH
48947: LD_INT 1
48949: ARRAY
48950: PPUSH
48951: CALL_OW 248
48955: PPUSH
48956: LD_INT 0
48958: PPUSH
48959: CALL 25675 0 6
48963: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
48964: LD_ADDR_VAR 0 8
48968: PUSH
48969: LD_VAR 0 4
48973: PUSH
48974: LD_VAR 0 7
48978: ARRAY
48979: PPUSH
48980: LD_VAR 0 9
48984: PPUSH
48985: CALL 44362 0 2
48989: ST_TO_ADDR
// if j then
48990: LD_VAR 0 8
48994: IFFALSE 49063
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48996: LD_VAR 0 8
49000: PUSH
49001: LD_INT 1
49003: ARRAY
49004: PPUSH
49005: LD_VAR 0 8
49009: PUSH
49010: LD_INT 2
49012: ARRAY
49013: PPUSH
49014: CALL_OW 488
49018: IFFALSE 49063
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
49020: LD_VAR 0 4
49024: PUSH
49025: LD_VAR 0 7
49029: ARRAY
49030: PPUSH
49031: LD_VAR 0 8
49035: PUSH
49036: LD_INT 1
49038: ARRAY
49039: PPUSH
49040: LD_VAR 0 8
49044: PUSH
49045: LD_INT 2
49047: ARRAY
49048: PPUSH
49049: CALL_OW 116
// attacking := true ;
49053: LD_ADDR_VAR 0 29
49057: PUSH
49058: LD_INT 1
49060: ST_TO_ADDR
// continue ;
49061: GO 46436
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
49063: LD_VAR 0 4
49067: PUSH
49068: LD_VAR 0 7
49072: ARRAY
49073: PPUSH
49074: CALL_OW 265
49078: PUSH
49079: LD_INT 11
49081: EQUAL
49082: IFFALSE 49360
// begin k := 10 ;
49084: LD_ADDR_VAR 0 9
49088: PUSH
49089: LD_INT 10
49091: ST_TO_ADDR
// x := 0 ;
49092: LD_ADDR_VAR 0 10
49096: PUSH
49097: LD_INT 0
49099: ST_TO_ADDR
// if tmp < k then
49100: LD_VAR 0 14
49104: PUSH
49105: LD_VAR 0 9
49109: LESS
49110: IFFALSE 49122
// k := tmp ;
49112: LD_ADDR_VAR 0 9
49116: PUSH
49117: LD_VAR 0 14
49121: ST_TO_ADDR
// for j = k downto 1 do
49122: LD_ADDR_VAR 0 8
49126: PUSH
49127: DOUBLE
49128: LD_VAR 0 9
49132: INC
49133: ST_TO_ADDR
49134: LD_INT 1
49136: PUSH
49137: FOR_DOWNTO
49138: IFFALSE 49213
// begin if GetType ( tmp [ j ] ) = unit_human then
49140: LD_VAR 0 14
49144: PUSH
49145: LD_VAR 0 8
49149: ARRAY
49150: PPUSH
49151: CALL_OW 247
49155: PUSH
49156: LD_INT 1
49158: EQUAL
49159: IFFALSE 49211
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
49161: LD_VAR 0 4
49165: PUSH
49166: LD_VAR 0 7
49170: ARRAY
49171: PPUSH
49172: LD_VAR 0 14
49176: PUSH
49177: LD_VAR 0 8
49181: ARRAY
49182: PPUSH
49183: CALL 44633 0 2
// x := tmp [ j ] ;
49187: LD_ADDR_VAR 0 10
49191: PUSH
49192: LD_VAR 0 14
49196: PUSH
49197: LD_VAR 0 8
49201: ARRAY
49202: ST_TO_ADDR
// attacking := true ;
49203: LD_ADDR_VAR 0 29
49207: PUSH
49208: LD_INT 1
49210: ST_TO_ADDR
// end ; end ;
49211: GO 49137
49213: POP
49214: POP
// if not x then
49215: LD_VAR 0 10
49219: NOT
49220: IFFALSE 49360
// begin attacking := true ;
49222: LD_ADDR_VAR 0 29
49226: PUSH
49227: LD_INT 1
49229: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
49230: LD_VAR 0 4
49234: PUSH
49235: LD_VAR 0 7
49239: ARRAY
49240: PPUSH
49241: CALL_OW 250
49245: PPUSH
49246: LD_VAR 0 4
49250: PUSH
49251: LD_VAR 0 7
49255: ARRAY
49256: PPUSH
49257: CALL_OW 251
49261: PPUSH
49262: CALL_OW 546
49266: PUSH
49267: LD_INT 2
49269: ARRAY
49270: PUSH
49271: LD_VAR 0 14
49275: PUSH
49276: LD_INT 1
49278: ARRAY
49279: PPUSH
49280: CALL_OW 250
49284: PPUSH
49285: LD_VAR 0 14
49289: PUSH
49290: LD_INT 1
49292: ARRAY
49293: PPUSH
49294: CALL_OW 251
49298: PPUSH
49299: CALL_OW 546
49303: PUSH
49304: LD_INT 2
49306: ARRAY
49307: EQUAL
49308: IFFALSE 49336
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
49310: LD_VAR 0 4
49314: PUSH
49315: LD_VAR 0 7
49319: ARRAY
49320: PPUSH
49321: LD_VAR 0 14
49325: PUSH
49326: LD_INT 1
49328: ARRAY
49329: PPUSH
49330: CALL 44633 0 2
49334: GO 49360
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
49336: LD_VAR 0 4
49340: PUSH
49341: LD_VAR 0 7
49345: ARRAY
49346: PPUSH
49347: LD_VAR 0 14
49351: PUSH
49352: LD_INT 1
49354: ARRAY
49355: PPUSH
49356: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
49360: LD_VAR 0 4
49364: PUSH
49365: LD_VAR 0 7
49369: ARRAY
49370: PPUSH
49371: CALL_OW 264
49375: PUSH
49376: LD_INT 29
49378: EQUAL
49379: IFFALSE 49745
// begin if WantsToAttack ( group [ i ] ) in bombed then
49381: LD_VAR 0 4
49385: PUSH
49386: LD_VAR 0 7
49390: ARRAY
49391: PPUSH
49392: CALL_OW 319
49396: PUSH
49397: LD_VAR 0 28
49401: IN
49402: IFFALSE 49406
// continue ;
49404: GO 46436
// k := 8 ;
49406: LD_ADDR_VAR 0 9
49410: PUSH
49411: LD_INT 8
49413: ST_TO_ADDR
// x := 0 ;
49414: LD_ADDR_VAR 0 10
49418: PUSH
49419: LD_INT 0
49421: ST_TO_ADDR
// if tmp < k then
49422: LD_VAR 0 14
49426: PUSH
49427: LD_VAR 0 9
49431: LESS
49432: IFFALSE 49444
// k := tmp ;
49434: LD_ADDR_VAR 0 9
49438: PUSH
49439: LD_VAR 0 14
49443: ST_TO_ADDR
// for j = 1 to k do
49444: LD_ADDR_VAR 0 8
49448: PUSH
49449: DOUBLE
49450: LD_INT 1
49452: DEC
49453: ST_TO_ADDR
49454: LD_VAR 0 9
49458: PUSH
49459: FOR_TO
49460: IFFALSE 49592
// begin if GetType ( tmp [ j ] ) = unit_building then
49462: LD_VAR 0 14
49466: PUSH
49467: LD_VAR 0 8
49471: ARRAY
49472: PPUSH
49473: CALL_OW 247
49477: PUSH
49478: LD_INT 3
49480: EQUAL
49481: IFFALSE 49590
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
49483: LD_VAR 0 14
49487: PUSH
49488: LD_VAR 0 8
49492: ARRAY
49493: PUSH
49494: LD_VAR 0 28
49498: IN
49499: NOT
49500: PUSH
49501: LD_VAR 0 14
49505: PUSH
49506: LD_VAR 0 8
49510: ARRAY
49511: PPUSH
49512: CALL_OW 313
49516: AND
49517: IFFALSE 49590
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
49519: LD_VAR 0 4
49523: PUSH
49524: LD_VAR 0 7
49528: ARRAY
49529: PPUSH
49530: LD_VAR 0 14
49534: PUSH
49535: LD_VAR 0 8
49539: ARRAY
49540: PPUSH
49541: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
49545: LD_ADDR_VAR 0 28
49549: PUSH
49550: LD_VAR 0 28
49554: PPUSH
49555: LD_VAR 0 28
49559: PUSH
49560: LD_INT 1
49562: PLUS
49563: PPUSH
49564: LD_VAR 0 14
49568: PUSH
49569: LD_VAR 0 8
49573: ARRAY
49574: PPUSH
49575: CALL_OW 1
49579: ST_TO_ADDR
// attacking := true ;
49580: LD_ADDR_VAR 0 29
49584: PUSH
49585: LD_INT 1
49587: ST_TO_ADDR
// break ;
49588: GO 49592
// end ; end ;
49590: GO 49459
49592: POP
49593: POP
// if not attacking and f_attack_depot then
49594: LD_VAR 0 29
49598: NOT
49599: PUSH
49600: LD_VAR 0 25
49604: AND
49605: IFFALSE 49700
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
49607: LD_ADDR_VAR 0 13
49611: PUSH
49612: LD_VAR 0 14
49616: PPUSH
49617: LD_INT 2
49619: PUSH
49620: LD_INT 30
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 30
49632: PUSH
49633: LD_INT 1
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: LIST
49644: PPUSH
49645: CALL_OW 72
49649: ST_TO_ADDR
// if z then
49650: LD_VAR 0 13
49654: IFFALSE 49700
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
49656: LD_VAR 0 4
49660: PUSH
49661: LD_VAR 0 7
49665: ARRAY
49666: PPUSH
49667: LD_VAR 0 13
49671: PPUSH
49672: LD_VAR 0 4
49676: PUSH
49677: LD_VAR 0 7
49681: ARRAY
49682: PPUSH
49683: CALL_OW 74
49687: PPUSH
49688: CALL_OW 115
// attacking := true ;
49692: LD_ADDR_VAR 0 29
49696: PUSH
49697: LD_INT 1
49699: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
49700: LD_VAR 0 4
49704: PUSH
49705: LD_VAR 0 7
49709: ARRAY
49710: PPUSH
49711: CALL_OW 256
49715: PUSH
49716: LD_INT 500
49718: LESS
49719: IFFALSE 49745
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
49721: LD_VAR 0 4
49725: PUSH
49726: LD_VAR 0 7
49730: ARRAY
49731: PPUSH
49732: LD_VAR 0 14
49736: PUSH
49737: LD_INT 1
49739: ARRAY
49740: PPUSH
49741: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
49745: LD_VAR 0 4
49749: PUSH
49750: LD_VAR 0 7
49754: ARRAY
49755: PPUSH
49756: CALL_OW 264
49760: PUSH
49761: LD_INT 49
49763: EQUAL
49764: IFFALSE 49885
// begin if not HasTask ( group [ i ] ) then
49766: LD_VAR 0 4
49770: PUSH
49771: LD_VAR 0 7
49775: ARRAY
49776: PPUSH
49777: CALL_OW 314
49781: NOT
49782: IFFALSE 49885
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
49784: LD_ADDR_VAR 0 9
49788: PUSH
49789: LD_INT 81
49791: PUSH
49792: LD_VAR 0 4
49796: PUSH
49797: LD_VAR 0 7
49801: ARRAY
49802: PPUSH
49803: CALL_OW 255
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PPUSH
49812: CALL_OW 69
49816: PPUSH
49817: LD_VAR 0 4
49821: PUSH
49822: LD_VAR 0 7
49826: ARRAY
49827: PPUSH
49828: CALL_OW 74
49832: ST_TO_ADDR
// if k then
49833: LD_VAR 0 9
49837: IFFALSE 49885
// if GetDistUnits ( group [ i ] , k ) > 10 then
49839: LD_VAR 0 4
49843: PUSH
49844: LD_VAR 0 7
49848: ARRAY
49849: PPUSH
49850: LD_VAR 0 9
49854: PPUSH
49855: CALL_OW 296
49859: PUSH
49860: LD_INT 10
49862: GREATER
49863: IFFALSE 49885
// ComMoveUnit ( group [ i ] , k ) ;
49865: LD_VAR 0 4
49869: PUSH
49870: LD_VAR 0 7
49874: ARRAY
49875: PPUSH
49876: LD_VAR 0 9
49880: PPUSH
49881: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49885: LD_VAR 0 4
49889: PUSH
49890: LD_VAR 0 7
49894: ARRAY
49895: PPUSH
49896: CALL_OW 256
49900: PUSH
49901: LD_INT 250
49903: LESS
49904: PUSH
49905: LD_VAR 0 4
49909: PUSH
49910: LD_VAR 0 7
49914: ARRAY
49915: PUSH
49916: LD_INT 21
49918: PUSH
49919: LD_INT 2
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 23
49928: PUSH
49929: LD_INT 2
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PPUSH
49940: CALL_OW 69
49944: IN
49945: AND
49946: IFFALSE 50071
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
49948: LD_ADDR_VAR 0 9
49952: PUSH
49953: LD_OWVAR 3
49957: PUSH
49958: LD_VAR 0 4
49962: PUSH
49963: LD_VAR 0 7
49967: ARRAY
49968: DIFF
49969: PPUSH
49970: LD_VAR 0 4
49974: PUSH
49975: LD_VAR 0 7
49979: ARRAY
49980: PPUSH
49981: CALL_OW 74
49985: ST_TO_ADDR
// if not k then
49986: LD_VAR 0 9
49990: NOT
49991: IFFALSE 49995
// continue ;
49993: GO 46436
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
49995: LD_VAR 0 9
49999: PUSH
50000: LD_INT 81
50002: PUSH
50003: LD_VAR 0 4
50007: PUSH
50008: LD_VAR 0 7
50012: ARRAY
50013: PPUSH
50014: CALL_OW 255
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PPUSH
50023: CALL_OW 69
50027: IN
50028: PUSH
50029: LD_VAR 0 9
50033: PPUSH
50034: LD_VAR 0 4
50038: PUSH
50039: LD_VAR 0 7
50043: ARRAY
50044: PPUSH
50045: CALL_OW 296
50049: PUSH
50050: LD_INT 5
50052: LESS
50053: AND
50054: IFFALSE 50071
// ComAutodestruct ( group [ i ] ) ;
50056: LD_VAR 0 4
50060: PUSH
50061: LD_VAR 0 7
50065: ARRAY
50066: PPUSH
50067: CALL 44531 0 1
// end ; if f_attack_depot then
50071: LD_VAR 0 25
50075: IFFALSE 50187
// begin k := 6 ;
50077: LD_ADDR_VAR 0 9
50081: PUSH
50082: LD_INT 6
50084: ST_TO_ADDR
// if tmp < k then
50085: LD_VAR 0 14
50089: PUSH
50090: LD_VAR 0 9
50094: LESS
50095: IFFALSE 50107
// k := tmp ;
50097: LD_ADDR_VAR 0 9
50101: PUSH
50102: LD_VAR 0 14
50106: ST_TO_ADDR
// for j = 1 to k do
50107: LD_ADDR_VAR 0 8
50111: PUSH
50112: DOUBLE
50113: LD_INT 1
50115: DEC
50116: ST_TO_ADDR
50117: LD_VAR 0 9
50121: PUSH
50122: FOR_TO
50123: IFFALSE 50185
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
50125: LD_VAR 0 8
50129: PPUSH
50130: CALL_OW 266
50134: PUSH
50135: LD_INT 0
50137: PUSH
50138: LD_INT 1
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: IN
50145: IFFALSE 50183
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
50147: LD_VAR 0 4
50151: PUSH
50152: LD_VAR 0 7
50156: ARRAY
50157: PPUSH
50158: LD_VAR 0 14
50162: PUSH
50163: LD_VAR 0 8
50167: ARRAY
50168: PPUSH
50169: CALL_OW 115
// attacking := true ;
50173: LD_ADDR_VAR 0 29
50177: PUSH
50178: LD_INT 1
50180: ST_TO_ADDR
// break ;
50181: GO 50185
// end ;
50183: GO 50122
50185: POP
50186: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
50187: LD_VAR 0 4
50191: PUSH
50192: LD_VAR 0 7
50196: ARRAY
50197: PPUSH
50198: CALL_OW 302
50202: PUSH
50203: LD_VAR 0 29
50207: NOT
50208: AND
50209: IFFALSE 50531
// begin if GetTag ( group [ i ] ) = 71 then
50211: LD_VAR 0 4
50215: PUSH
50216: LD_VAR 0 7
50220: ARRAY
50221: PPUSH
50222: CALL_OW 110
50226: PUSH
50227: LD_INT 71
50229: EQUAL
50230: IFFALSE 50271
// begin if HasTask ( group [ i ] ) then
50232: LD_VAR 0 4
50236: PUSH
50237: LD_VAR 0 7
50241: ARRAY
50242: PPUSH
50243: CALL_OW 314
50247: IFFALSE 50253
// continue else
50249: GO 46436
50251: GO 50271
// SetTag ( group [ i ] , 0 ) ;
50253: LD_VAR 0 4
50257: PUSH
50258: LD_VAR 0 7
50262: ARRAY
50263: PPUSH
50264: LD_INT 0
50266: PPUSH
50267: CALL_OW 109
// end ; k := 8 ;
50271: LD_ADDR_VAR 0 9
50275: PUSH
50276: LD_INT 8
50278: ST_TO_ADDR
// x := 0 ;
50279: LD_ADDR_VAR 0 10
50283: PUSH
50284: LD_INT 0
50286: ST_TO_ADDR
// if tmp < k then
50287: LD_VAR 0 14
50291: PUSH
50292: LD_VAR 0 9
50296: LESS
50297: IFFALSE 50309
// k := tmp ;
50299: LD_ADDR_VAR 0 9
50303: PUSH
50304: LD_VAR 0 14
50308: ST_TO_ADDR
// for j = 1 to k do
50309: LD_ADDR_VAR 0 8
50313: PUSH
50314: DOUBLE
50315: LD_INT 1
50317: DEC
50318: ST_TO_ADDR
50319: LD_VAR 0 9
50323: PUSH
50324: FOR_TO
50325: IFFALSE 50423
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
50327: LD_VAR 0 14
50331: PUSH
50332: LD_VAR 0 8
50336: ARRAY
50337: PPUSH
50338: CALL_OW 247
50342: PUSH
50343: LD_INT 1
50345: EQUAL
50346: PUSH
50347: LD_VAR 0 14
50351: PUSH
50352: LD_VAR 0 8
50356: ARRAY
50357: PPUSH
50358: CALL_OW 256
50362: PUSH
50363: LD_INT 250
50365: LESS
50366: PUSH
50367: LD_VAR 0 20
50371: AND
50372: PUSH
50373: LD_VAR 0 20
50377: NOT
50378: PUSH
50379: LD_VAR 0 14
50383: PUSH
50384: LD_VAR 0 8
50388: ARRAY
50389: PPUSH
50390: CALL_OW 256
50394: PUSH
50395: LD_INT 250
50397: GREATEREQUAL
50398: AND
50399: OR
50400: AND
50401: IFFALSE 50421
// begin x := tmp [ j ] ;
50403: LD_ADDR_VAR 0 10
50407: PUSH
50408: LD_VAR 0 14
50412: PUSH
50413: LD_VAR 0 8
50417: ARRAY
50418: ST_TO_ADDR
// break ;
50419: GO 50423
// end ;
50421: GO 50324
50423: POP
50424: POP
// if x then
50425: LD_VAR 0 10
50429: IFFALSE 50453
// ComAttackUnit ( group [ i ] , x ) else
50431: LD_VAR 0 4
50435: PUSH
50436: LD_VAR 0 7
50440: ARRAY
50441: PPUSH
50442: LD_VAR 0 10
50446: PPUSH
50447: CALL_OW 115
50451: GO 50477
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
50453: LD_VAR 0 4
50457: PUSH
50458: LD_VAR 0 7
50462: ARRAY
50463: PPUSH
50464: LD_VAR 0 14
50468: PUSH
50469: LD_INT 1
50471: ARRAY
50472: PPUSH
50473: CALL_OW 115
// if not HasTask ( group [ i ] ) then
50477: LD_VAR 0 4
50481: PUSH
50482: LD_VAR 0 7
50486: ARRAY
50487: PPUSH
50488: CALL_OW 314
50492: NOT
50493: IFFALSE 50531
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
50495: LD_VAR 0 4
50499: PUSH
50500: LD_VAR 0 7
50504: ARRAY
50505: PPUSH
50506: LD_VAR 0 14
50510: PPUSH
50511: LD_VAR 0 4
50515: PUSH
50516: LD_VAR 0 7
50520: ARRAY
50521: PPUSH
50522: CALL_OW 74
50526: PPUSH
50527: CALL_OW 115
// end ; end ; end ;
50531: GO 46436
50533: POP
50534: POP
// wait ( 0 0$1 ) ;
50535: LD_INT 35
50537: PPUSH
50538: CALL_OW 67
// until group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
50542: LD_VAR 0 4
50546: PUSH
50547: EMPTY
50548: EQUAL
50549: PUSH
50550: LD_INT 81
50552: PUSH
50553: LD_VAR 0 35
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PPUSH
50562: CALL_OW 69
50566: NOT
50567: OR
50568: IFFALSE 46421
// end ;
50570: LD_VAR 0 2
50574: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50575: LD_INT 0
50577: PPUSH
50578: PPUSH
50579: PPUSH
50580: PPUSH
// if not base_units then
50581: LD_VAR 0 1
50585: NOT
50586: IFFALSE 50590
// exit ;
50588: GO 50677
// result := false ;
50590: LD_ADDR_VAR 0 2
50594: PUSH
50595: LD_INT 0
50597: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50598: LD_ADDR_VAR 0 5
50602: PUSH
50603: LD_VAR 0 1
50607: PPUSH
50608: LD_INT 21
50610: PUSH
50611: LD_INT 3
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PPUSH
50618: CALL_OW 72
50622: ST_TO_ADDR
// if not tmp then
50623: LD_VAR 0 5
50627: NOT
50628: IFFALSE 50632
// exit ;
50630: GO 50677
// for i in tmp do
50632: LD_ADDR_VAR 0 3
50636: PUSH
50637: LD_VAR 0 5
50641: PUSH
50642: FOR_IN
50643: IFFALSE 50675
// begin result := EnemyInRange ( i , 22 ) ;
50645: LD_ADDR_VAR 0 2
50649: PUSH
50650: LD_VAR 0 3
50654: PPUSH
50655: LD_INT 22
50657: PPUSH
50658: CALL 44214 0 2
50662: ST_TO_ADDR
// if result then
50663: LD_VAR 0 2
50667: IFFALSE 50673
// exit ;
50669: POP
50670: POP
50671: GO 50677
// end ;
50673: GO 50642
50675: POP
50676: POP
// end ;
50677: LD_VAR 0 2
50681: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
50682: LD_INT 0
50684: PPUSH
50685: PPUSH
// if not units then
50686: LD_VAR 0 1
50690: NOT
50691: IFFALSE 50695
// exit ;
50693: GO 50765
// result := [ ] ;
50695: LD_ADDR_VAR 0 3
50699: PUSH
50700: EMPTY
50701: ST_TO_ADDR
// for i in units do
50702: LD_ADDR_VAR 0 4
50706: PUSH
50707: LD_VAR 0 1
50711: PUSH
50712: FOR_IN
50713: IFFALSE 50763
// if GetTag ( i ) = tag then
50715: LD_VAR 0 4
50719: PPUSH
50720: CALL_OW 110
50724: PUSH
50725: LD_VAR 0 2
50729: EQUAL
50730: IFFALSE 50761
// result := Insert ( result , result + 1 , i ) ;
50732: LD_ADDR_VAR 0 3
50736: PUSH
50737: LD_VAR 0 3
50741: PPUSH
50742: LD_VAR 0 3
50746: PUSH
50747: LD_INT 1
50749: PLUS
50750: PPUSH
50751: LD_VAR 0 4
50755: PPUSH
50756: CALL_OW 2
50760: ST_TO_ADDR
50761: GO 50712
50763: POP
50764: POP
// end ;
50765: LD_VAR 0 3
50769: RET
// export function IsDriver ( un ) ; begin
50770: LD_INT 0
50772: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50773: LD_ADDR_VAR 0 2
50777: PUSH
50778: LD_VAR 0 1
50782: PUSH
50783: LD_INT 55
50785: PUSH
50786: EMPTY
50787: LIST
50788: PPUSH
50789: CALL_OW 69
50793: IN
50794: ST_TO_ADDR
// end ;
50795: LD_VAR 0 2
50799: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50800: LD_INT 0
50802: PPUSH
50803: PPUSH
// list := [ ] ;
50804: LD_ADDR_VAR 0 5
50808: PUSH
50809: EMPTY
50810: ST_TO_ADDR
// case d of 0 :
50811: LD_VAR 0 3
50815: PUSH
50816: LD_INT 0
50818: DOUBLE
50819: EQUAL
50820: IFTRUE 50824
50822: GO 50957
50824: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50825: LD_ADDR_VAR 0 5
50829: PUSH
50830: LD_VAR 0 1
50834: PUSH
50835: LD_INT 4
50837: MINUS
50838: PUSH
50839: LD_VAR 0 2
50843: PUSH
50844: LD_INT 4
50846: MINUS
50847: PUSH
50848: LD_INT 2
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: LIST
50855: PUSH
50856: LD_VAR 0 1
50860: PUSH
50861: LD_INT 3
50863: MINUS
50864: PUSH
50865: LD_VAR 0 2
50869: PUSH
50870: LD_INT 1
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: LIST
50877: PUSH
50878: LD_VAR 0 1
50882: PUSH
50883: LD_INT 4
50885: PLUS
50886: PUSH
50887: LD_VAR 0 2
50891: PUSH
50892: LD_INT 4
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: LIST
50899: PUSH
50900: LD_VAR 0 1
50904: PUSH
50905: LD_INT 3
50907: PLUS
50908: PUSH
50909: LD_VAR 0 2
50913: PUSH
50914: LD_INT 3
50916: PLUS
50917: PUSH
50918: LD_INT 5
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: LIST
50925: PUSH
50926: LD_VAR 0 1
50930: PUSH
50931: LD_VAR 0 2
50935: PUSH
50936: LD_INT 4
50938: PLUS
50939: PUSH
50940: LD_INT 0
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: LIST
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: ST_TO_ADDR
// end ; 1 :
50955: GO 51655
50957: LD_INT 1
50959: DOUBLE
50960: EQUAL
50961: IFTRUE 50965
50963: GO 51098
50965: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
50966: LD_ADDR_VAR 0 5
50970: PUSH
50971: LD_VAR 0 1
50975: PUSH
50976: LD_VAR 0 2
50980: PUSH
50981: LD_INT 4
50983: MINUS
50984: PUSH
50985: LD_INT 3
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: LIST
50992: PUSH
50993: LD_VAR 0 1
50997: PUSH
50998: LD_INT 3
51000: MINUS
51001: PUSH
51002: LD_VAR 0 2
51006: PUSH
51007: LD_INT 3
51009: MINUS
51010: PUSH
51011: LD_INT 2
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: LIST
51018: PUSH
51019: LD_VAR 0 1
51023: PUSH
51024: LD_INT 4
51026: MINUS
51027: PUSH
51028: LD_VAR 0 2
51032: PUSH
51033: LD_INT 1
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: LIST
51040: PUSH
51041: LD_VAR 0 1
51045: PUSH
51046: LD_VAR 0 2
51050: PUSH
51051: LD_INT 3
51053: PLUS
51054: PUSH
51055: LD_INT 0
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: LIST
51062: PUSH
51063: LD_VAR 0 1
51067: PUSH
51068: LD_INT 4
51070: PLUS
51071: PUSH
51072: LD_VAR 0 2
51076: PUSH
51077: LD_INT 4
51079: PLUS
51080: PUSH
51081: LD_INT 5
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: LIST
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: ST_TO_ADDR
// end ; 2 :
51096: GO 51655
51098: LD_INT 2
51100: DOUBLE
51101: EQUAL
51102: IFTRUE 51106
51104: GO 51235
51106: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51107: LD_ADDR_VAR 0 5
51111: PUSH
51112: LD_VAR 0 1
51116: PUSH
51117: LD_VAR 0 2
51121: PUSH
51122: LD_INT 3
51124: MINUS
51125: PUSH
51126: LD_INT 3
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: LIST
51133: PUSH
51134: LD_VAR 0 1
51138: PUSH
51139: LD_INT 4
51141: PLUS
51142: PUSH
51143: LD_VAR 0 2
51147: PUSH
51148: LD_INT 4
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: LIST
51155: PUSH
51156: LD_VAR 0 1
51160: PUSH
51161: LD_VAR 0 2
51165: PUSH
51166: LD_INT 4
51168: PLUS
51169: PUSH
51170: LD_INT 0
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: LIST
51177: PUSH
51178: LD_VAR 0 1
51182: PUSH
51183: LD_INT 3
51185: MINUS
51186: PUSH
51187: LD_VAR 0 2
51191: PUSH
51192: LD_INT 1
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: LIST
51199: PUSH
51200: LD_VAR 0 1
51204: PUSH
51205: LD_INT 4
51207: MINUS
51208: PUSH
51209: LD_VAR 0 2
51213: PUSH
51214: LD_INT 4
51216: MINUS
51217: PUSH
51218: LD_INT 2
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: LIST
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: ST_TO_ADDR
// end ; 3 :
51233: GO 51655
51235: LD_INT 3
51237: DOUBLE
51238: EQUAL
51239: IFTRUE 51243
51241: GO 51376
51243: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51244: LD_ADDR_VAR 0 5
51248: PUSH
51249: LD_VAR 0 1
51253: PUSH
51254: LD_INT 3
51256: PLUS
51257: PUSH
51258: LD_VAR 0 2
51262: PUSH
51263: LD_INT 4
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: LIST
51270: PUSH
51271: LD_VAR 0 1
51275: PUSH
51276: LD_INT 4
51278: PLUS
51279: PUSH
51280: LD_VAR 0 2
51284: PUSH
51285: LD_INT 4
51287: PLUS
51288: PUSH
51289: LD_INT 5
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: LIST
51296: PUSH
51297: LD_VAR 0 1
51301: PUSH
51302: LD_INT 4
51304: MINUS
51305: PUSH
51306: LD_VAR 0 2
51310: PUSH
51311: LD_INT 1
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: LIST
51318: PUSH
51319: LD_VAR 0 1
51323: PUSH
51324: LD_VAR 0 2
51328: PUSH
51329: LD_INT 4
51331: MINUS
51332: PUSH
51333: LD_INT 3
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: LIST
51340: PUSH
51341: LD_VAR 0 1
51345: PUSH
51346: LD_INT 3
51348: MINUS
51349: PUSH
51350: LD_VAR 0 2
51354: PUSH
51355: LD_INT 3
51357: MINUS
51358: PUSH
51359: LD_INT 2
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: LIST
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: ST_TO_ADDR
// end ; 4 :
51374: GO 51655
51376: LD_INT 4
51378: DOUBLE
51379: EQUAL
51380: IFTRUE 51384
51382: GO 51517
51384: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51385: LD_ADDR_VAR 0 5
51389: PUSH
51390: LD_VAR 0 1
51394: PUSH
51395: LD_VAR 0 2
51399: PUSH
51400: LD_INT 4
51402: PLUS
51403: PUSH
51404: LD_INT 0
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: LIST
51411: PUSH
51412: LD_VAR 0 1
51416: PUSH
51417: LD_INT 3
51419: PLUS
51420: PUSH
51421: LD_VAR 0 2
51425: PUSH
51426: LD_INT 3
51428: PLUS
51429: PUSH
51430: LD_INT 5
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: LIST
51437: PUSH
51438: LD_VAR 0 1
51442: PUSH
51443: LD_INT 4
51445: PLUS
51446: PUSH
51447: LD_VAR 0 2
51451: PUSH
51452: LD_INT 4
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: LIST
51459: PUSH
51460: LD_VAR 0 1
51464: PUSH
51465: LD_VAR 0 2
51469: PUSH
51470: LD_INT 3
51472: MINUS
51473: PUSH
51474: LD_INT 3
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: LIST
51481: PUSH
51482: LD_VAR 0 1
51486: PUSH
51487: LD_INT 4
51489: MINUS
51490: PUSH
51491: LD_VAR 0 2
51495: PUSH
51496: LD_INT 4
51498: MINUS
51499: PUSH
51500: LD_INT 2
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: LIST
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: ST_TO_ADDR
// end ; 5 :
51515: GO 51655
51517: LD_INT 5
51519: DOUBLE
51520: EQUAL
51521: IFTRUE 51525
51523: GO 51654
51525: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51526: LD_ADDR_VAR 0 5
51530: PUSH
51531: LD_VAR 0 1
51535: PUSH
51536: LD_INT 4
51538: MINUS
51539: PUSH
51540: LD_VAR 0 2
51544: PUSH
51545: LD_INT 1
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: LIST
51552: PUSH
51553: LD_VAR 0 1
51557: PUSH
51558: LD_VAR 0 2
51562: PUSH
51563: LD_INT 4
51565: MINUS
51566: PUSH
51567: LD_INT 3
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: LIST
51574: PUSH
51575: LD_VAR 0 1
51579: PUSH
51580: LD_INT 4
51582: PLUS
51583: PUSH
51584: LD_VAR 0 2
51588: PUSH
51589: LD_INT 4
51591: PLUS
51592: PUSH
51593: LD_INT 5
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: LIST
51600: PUSH
51601: LD_VAR 0 1
51605: PUSH
51606: LD_INT 3
51608: PLUS
51609: PUSH
51610: LD_VAR 0 2
51614: PUSH
51615: LD_INT 4
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: LIST
51622: PUSH
51623: LD_VAR 0 1
51627: PUSH
51628: LD_VAR 0 2
51632: PUSH
51633: LD_INT 3
51635: PLUS
51636: PUSH
51637: LD_INT 0
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: LIST
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: ST_TO_ADDR
// end ; end ;
51652: GO 51655
51654: POP
// result := list ;
51655: LD_ADDR_VAR 0 4
51659: PUSH
51660: LD_VAR 0 5
51664: ST_TO_ADDR
// end ;
51665: LD_VAR 0 4
51669: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51670: LD_INT 0
51672: PPUSH
51673: PPUSH
51674: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51675: LD_VAR 0 1
51679: NOT
51680: PUSH
51681: LD_VAR 0 2
51685: PUSH
51686: LD_INT 1
51688: PUSH
51689: LD_INT 2
51691: PUSH
51692: LD_INT 3
51694: PUSH
51695: LD_INT 4
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: IN
51704: NOT
51705: OR
51706: IFFALSE 51710
// exit ;
51708: GO 51802
// tmp := [ ] ;
51710: LD_ADDR_VAR 0 5
51714: PUSH
51715: EMPTY
51716: ST_TO_ADDR
// for i in units do
51717: LD_ADDR_VAR 0 4
51721: PUSH
51722: LD_VAR 0 1
51726: PUSH
51727: FOR_IN
51728: IFFALSE 51771
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
51730: LD_ADDR_VAR 0 5
51734: PUSH
51735: LD_VAR 0 5
51739: PPUSH
51740: LD_VAR 0 5
51744: PUSH
51745: LD_INT 1
51747: PLUS
51748: PPUSH
51749: LD_VAR 0 4
51753: PPUSH
51754: LD_VAR 0 2
51758: PPUSH
51759: CALL_OW 259
51763: PPUSH
51764: CALL_OW 2
51768: ST_TO_ADDR
51769: GO 51727
51771: POP
51772: POP
// if not tmp then
51773: LD_VAR 0 5
51777: NOT
51778: IFFALSE 51782
// exit ;
51780: GO 51802
// result := SortListByListDesc ( units , tmp ) ;
51782: LD_ADDR_VAR 0 3
51786: PUSH
51787: LD_VAR 0 1
51791: PPUSH
51792: LD_VAR 0 5
51796: PPUSH
51797: CALL_OW 77
51801: ST_TO_ADDR
// end ;
51802: LD_VAR 0 3
51806: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51807: LD_INT 0
51809: PPUSH
51810: PPUSH
51811: PPUSH
// x := GetX ( building ) ;
51812: LD_ADDR_VAR 0 4
51816: PUSH
51817: LD_VAR 0 2
51821: PPUSH
51822: CALL_OW 250
51826: ST_TO_ADDR
// y := GetY ( building ) ;
51827: LD_ADDR_VAR 0 5
51831: PUSH
51832: LD_VAR 0 2
51836: PPUSH
51837: CALL_OW 251
51841: ST_TO_ADDR
// if GetTaskList ( unit ) then
51842: LD_VAR 0 1
51846: PPUSH
51847: CALL_OW 437
51851: IFFALSE 51946
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51853: LD_STRING e
51855: PUSH
51856: LD_VAR 0 1
51860: PPUSH
51861: CALL_OW 437
51865: PUSH
51866: LD_INT 1
51868: ARRAY
51869: PUSH
51870: LD_INT 1
51872: ARRAY
51873: EQUAL
51874: PUSH
51875: LD_VAR 0 4
51879: PUSH
51880: LD_VAR 0 1
51884: PPUSH
51885: CALL_OW 437
51889: PUSH
51890: LD_INT 1
51892: ARRAY
51893: PUSH
51894: LD_INT 2
51896: ARRAY
51897: EQUAL
51898: AND
51899: PUSH
51900: LD_VAR 0 5
51904: PUSH
51905: LD_VAR 0 1
51909: PPUSH
51910: CALL_OW 437
51914: PUSH
51915: LD_INT 1
51917: ARRAY
51918: PUSH
51919: LD_INT 3
51921: ARRAY
51922: EQUAL
51923: AND
51924: IFFALSE 51936
// result := true else
51926: LD_ADDR_VAR 0 3
51930: PUSH
51931: LD_INT 1
51933: ST_TO_ADDR
51934: GO 51944
// result := false ;
51936: LD_ADDR_VAR 0 3
51940: PUSH
51941: LD_INT 0
51943: ST_TO_ADDR
// end else
51944: GO 51954
// result := false ;
51946: LD_ADDR_VAR 0 3
51950: PUSH
51951: LD_INT 0
51953: ST_TO_ADDR
// end ;
51954: LD_VAR 0 3
51958: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
51959: LD_INT 0
51961: PPUSH
51962: PPUSH
51963: PPUSH
51964: PPUSH
// if not unit or not area then
51965: LD_VAR 0 1
51969: NOT
51970: PUSH
51971: LD_VAR 0 2
51975: NOT
51976: OR
51977: IFFALSE 51981
// exit ;
51979: GO 52145
// tmp := AreaToList ( area , i ) ;
51981: LD_ADDR_VAR 0 6
51985: PUSH
51986: LD_VAR 0 2
51990: PPUSH
51991: LD_VAR 0 5
51995: PPUSH
51996: CALL_OW 517
52000: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52001: LD_ADDR_VAR 0 5
52005: PUSH
52006: DOUBLE
52007: LD_INT 1
52009: DEC
52010: ST_TO_ADDR
52011: LD_VAR 0 6
52015: PUSH
52016: LD_INT 1
52018: ARRAY
52019: PUSH
52020: FOR_TO
52021: IFFALSE 52143
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52023: LD_ADDR_VAR 0 7
52027: PUSH
52028: LD_VAR 0 6
52032: PUSH
52033: LD_INT 1
52035: ARRAY
52036: PUSH
52037: LD_VAR 0 5
52041: ARRAY
52042: PUSH
52043: LD_VAR 0 6
52047: PUSH
52048: LD_INT 2
52050: ARRAY
52051: PUSH
52052: LD_VAR 0 5
52056: ARRAY
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
52062: LD_VAR 0 7
52066: PUSH
52067: LD_INT 1
52069: ARRAY
52070: PPUSH
52071: LD_VAR 0 7
52075: PUSH
52076: LD_INT 2
52078: ARRAY
52079: PPUSH
52080: CALL_OW 428
52084: PUSH
52085: LD_INT 0
52087: EQUAL
52088: IFFALSE 52141
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52090: LD_VAR 0 1
52094: PPUSH
52095: LD_VAR 0 7
52099: PUSH
52100: LD_INT 1
52102: ARRAY
52103: PPUSH
52104: LD_VAR 0 7
52108: PUSH
52109: LD_INT 2
52111: ARRAY
52112: PPUSH
52113: LD_VAR 0 3
52117: PPUSH
52118: CALL_OW 48
// result := IsPlaced ( unit ) ;
52122: LD_ADDR_VAR 0 4
52126: PUSH
52127: LD_VAR 0 1
52131: PPUSH
52132: CALL_OW 305
52136: ST_TO_ADDR
// exit ;
52137: POP
52138: POP
52139: GO 52145
// end ; end ;
52141: GO 52020
52143: POP
52144: POP
// end ;
52145: LD_VAR 0 4
52149: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52150: LD_INT 0
52152: PPUSH
52153: PPUSH
52154: PPUSH
// if not side or side > 8 then
52155: LD_VAR 0 1
52159: NOT
52160: PUSH
52161: LD_VAR 0 1
52165: PUSH
52166: LD_INT 8
52168: GREATER
52169: OR
52170: IFFALSE 52174
// exit ;
52172: GO 52361
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52174: LD_ADDR_VAR 0 4
52178: PUSH
52179: LD_INT 22
52181: PUSH
52182: LD_VAR 0 1
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 21
52193: PUSH
52194: LD_INT 3
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PPUSH
52205: CALL_OW 69
52209: ST_TO_ADDR
// if not tmp then
52210: LD_VAR 0 4
52214: NOT
52215: IFFALSE 52219
// exit ;
52217: GO 52361
// enable_addtolog := true ;
52219: LD_ADDR_OWVAR 81
52223: PUSH
52224: LD_INT 1
52226: ST_TO_ADDR
// AddToLog ( [ ) ;
52227: LD_STRING [
52229: PPUSH
52230: CALL_OW 561
// for i in tmp do
52234: LD_ADDR_VAR 0 3
52238: PUSH
52239: LD_VAR 0 4
52243: PUSH
52244: FOR_IN
52245: IFFALSE 52352
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52247: LD_STRING [
52249: PUSH
52250: LD_VAR 0 3
52254: PPUSH
52255: CALL_OW 266
52259: STR
52260: PUSH
52261: LD_STRING , 
52263: STR
52264: PUSH
52265: LD_VAR 0 3
52269: PPUSH
52270: CALL_OW 250
52274: STR
52275: PUSH
52276: LD_STRING , 
52278: STR
52279: PUSH
52280: LD_VAR 0 3
52284: PPUSH
52285: CALL_OW 251
52289: STR
52290: PUSH
52291: LD_STRING , 
52293: STR
52294: PUSH
52295: LD_VAR 0 3
52299: PPUSH
52300: CALL_OW 254
52304: STR
52305: PUSH
52306: LD_STRING , 
52308: STR
52309: PUSH
52310: LD_VAR 0 3
52314: PPUSH
52315: LD_INT 1
52317: PPUSH
52318: CALL_OW 268
52322: STR
52323: PUSH
52324: LD_STRING , 
52326: STR
52327: PUSH
52328: LD_VAR 0 3
52332: PPUSH
52333: LD_INT 2
52335: PPUSH
52336: CALL_OW 268
52340: STR
52341: PUSH
52342: LD_STRING ],
52344: STR
52345: PPUSH
52346: CALL_OW 561
// end ;
52350: GO 52244
52352: POP
52353: POP
// AddToLog ( ]; ) ;
52354: LD_STRING ];
52356: PPUSH
52357: CALL_OW 561
// end ;
52361: LD_VAR 0 2
52365: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52366: LD_INT 0
52368: PPUSH
52369: PPUSH
52370: PPUSH
52371: PPUSH
52372: PPUSH
// if not area or not rate or not max then
52373: LD_VAR 0 1
52377: NOT
52378: PUSH
52379: LD_VAR 0 2
52383: NOT
52384: OR
52385: PUSH
52386: LD_VAR 0 4
52390: NOT
52391: OR
52392: IFFALSE 52396
// exit ;
52394: GO 52588
// while 1 do
52396: LD_INT 1
52398: IFFALSE 52588
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52400: LD_ADDR_VAR 0 9
52404: PUSH
52405: LD_VAR 0 1
52409: PPUSH
52410: LD_INT 1
52412: PPUSH
52413: CALL_OW 287
52417: PUSH
52418: LD_INT 10
52420: MUL
52421: ST_TO_ADDR
// r := rate / 10 ;
52422: LD_ADDR_VAR 0 7
52426: PUSH
52427: LD_VAR 0 2
52431: PUSH
52432: LD_INT 10
52434: DIVREAL
52435: ST_TO_ADDR
// time := 1 1$00 ;
52436: LD_ADDR_VAR 0 8
52440: PUSH
52441: LD_INT 2100
52443: ST_TO_ADDR
// if amount < min then
52444: LD_VAR 0 9
52448: PUSH
52449: LD_VAR 0 3
52453: LESS
52454: IFFALSE 52472
// r := r * 2 else
52456: LD_ADDR_VAR 0 7
52460: PUSH
52461: LD_VAR 0 7
52465: PUSH
52466: LD_INT 2
52468: MUL
52469: ST_TO_ADDR
52470: GO 52498
// if amount > max then
52472: LD_VAR 0 9
52476: PUSH
52477: LD_VAR 0 4
52481: GREATER
52482: IFFALSE 52498
// r := r / 2 ;
52484: LD_ADDR_VAR 0 7
52488: PUSH
52489: LD_VAR 0 7
52493: PUSH
52494: LD_INT 2
52496: DIVREAL
52497: ST_TO_ADDR
// time := time / r ;
52498: LD_ADDR_VAR 0 8
52502: PUSH
52503: LD_VAR 0 8
52507: PUSH
52508: LD_VAR 0 7
52512: DIVREAL
52513: ST_TO_ADDR
// if time < 0 then
52514: LD_VAR 0 8
52518: PUSH
52519: LD_INT 0
52521: LESS
52522: IFFALSE 52539
// time := time * - 1 ;
52524: LD_ADDR_VAR 0 8
52528: PUSH
52529: LD_VAR 0 8
52533: PUSH
52534: LD_INT 1
52536: NEG
52537: MUL
52538: ST_TO_ADDR
// wait ( time ) ;
52539: LD_VAR 0 8
52543: PPUSH
52544: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
52548: LD_INT 35
52550: PPUSH
52551: LD_INT 875
52553: PPUSH
52554: CALL_OW 12
52558: PPUSH
52559: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52563: LD_INT 1
52565: PPUSH
52566: LD_INT 5
52568: PPUSH
52569: CALL_OW 12
52573: PPUSH
52574: LD_VAR 0 1
52578: PPUSH
52579: LD_INT 1
52581: PPUSH
52582: CALL_OW 55
// end ;
52586: GO 52396
// end ;
52588: LD_VAR 0 5
52592: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52593: LD_INT 0
52595: PPUSH
52596: PPUSH
52597: PPUSH
52598: PPUSH
52599: PPUSH
52600: PPUSH
52601: PPUSH
52602: PPUSH
// if not turrets or not factories then
52603: LD_VAR 0 1
52607: NOT
52608: PUSH
52609: LD_VAR 0 2
52613: NOT
52614: OR
52615: IFFALSE 52619
// exit ;
52617: GO 52926
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52619: LD_ADDR_VAR 0 10
52623: PUSH
52624: LD_INT 5
52626: PUSH
52627: LD_INT 6
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 2
52636: PUSH
52637: LD_INT 4
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 3
52646: PUSH
52647: LD_INT 5
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 24
52661: PUSH
52662: LD_INT 25
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 23
52671: PUSH
52672: LD_INT 27
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 42
52685: PUSH
52686: LD_INT 43
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 44
52695: PUSH
52696: LD_INT 46
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 45
52705: PUSH
52706: LD_INT 47
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: LIST
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: LIST
52722: ST_TO_ADDR
// result := [ ] ;
52723: LD_ADDR_VAR 0 3
52727: PUSH
52728: EMPTY
52729: ST_TO_ADDR
// for i in turrets do
52730: LD_ADDR_VAR 0 4
52734: PUSH
52735: LD_VAR 0 1
52739: PUSH
52740: FOR_IN
52741: IFFALSE 52924
// begin nat := GetNation ( i ) ;
52743: LD_ADDR_VAR 0 7
52747: PUSH
52748: LD_VAR 0 4
52752: PPUSH
52753: CALL_OW 248
52757: ST_TO_ADDR
// weapon := 0 ;
52758: LD_ADDR_VAR 0 8
52762: PUSH
52763: LD_INT 0
52765: ST_TO_ADDR
// if not nat then
52766: LD_VAR 0 7
52770: NOT
52771: IFFALSE 52775
// continue ;
52773: GO 52740
// for j in list [ nat ] do
52775: LD_ADDR_VAR 0 5
52779: PUSH
52780: LD_VAR 0 10
52784: PUSH
52785: LD_VAR 0 7
52789: ARRAY
52790: PUSH
52791: FOR_IN
52792: IFFALSE 52833
// if GetBWeapon ( i ) = j [ 1 ] then
52794: LD_VAR 0 4
52798: PPUSH
52799: CALL_OW 269
52803: PUSH
52804: LD_VAR 0 5
52808: PUSH
52809: LD_INT 1
52811: ARRAY
52812: EQUAL
52813: IFFALSE 52831
// begin weapon := j [ 2 ] ;
52815: LD_ADDR_VAR 0 8
52819: PUSH
52820: LD_VAR 0 5
52824: PUSH
52825: LD_INT 2
52827: ARRAY
52828: ST_TO_ADDR
// break ;
52829: GO 52833
// end ;
52831: GO 52791
52833: POP
52834: POP
// if not weapon then
52835: LD_VAR 0 8
52839: NOT
52840: IFFALSE 52844
// continue ;
52842: GO 52740
// for k in factories do
52844: LD_ADDR_VAR 0 6
52848: PUSH
52849: LD_VAR 0 2
52853: PUSH
52854: FOR_IN
52855: IFFALSE 52920
// begin weapons := AvailableWeaponList ( k ) ;
52857: LD_ADDR_VAR 0 9
52861: PUSH
52862: LD_VAR 0 6
52866: PPUSH
52867: CALL_OW 478
52871: ST_TO_ADDR
// if not weapons then
52872: LD_VAR 0 9
52876: NOT
52877: IFFALSE 52881
// continue ;
52879: GO 52854
// if weapon in weapons then
52881: LD_VAR 0 8
52885: PUSH
52886: LD_VAR 0 9
52890: IN
52891: IFFALSE 52918
// begin result := [ i , weapon ] ;
52893: LD_ADDR_VAR 0 3
52897: PUSH
52898: LD_VAR 0 4
52902: PUSH
52903: LD_VAR 0 8
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: ST_TO_ADDR
// exit ;
52912: POP
52913: POP
52914: POP
52915: POP
52916: GO 52926
// end ; end ;
52918: GO 52854
52920: POP
52921: POP
// end ;
52922: GO 52740
52924: POP
52925: POP
// end ;
52926: LD_VAR 0 3
52930: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
52931: LD_INT 0
52933: PPUSH
// if not side or side > 8 then
52934: LD_VAR 0 3
52938: NOT
52939: PUSH
52940: LD_VAR 0 3
52944: PUSH
52945: LD_INT 8
52947: GREATER
52948: OR
52949: IFFALSE 52953
// exit ;
52951: GO 53012
// if not range then
52953: LD_VAR 0 4
52957: NOT
52958: IFFALSE 52969
// range := - 12 ;
52960: LD_ADDR_VAR 0 4
52964: PUSH
52965: LD_INT 12
52967: NEG
52968: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
52969: LD_VAR 0 1
52973: PPUSH
52974: LD_VAR 0 2
52978: PPUSH
52979: LD_VAR 0 3
52983: PPUSH
52984: LD_VAR 0 4
52988: PPUSH
52989: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
52993: LD_VAR 0 1
52997: PPUSH
52998: LD_VAR 0 2
53002: PPUSH
53003: LD_VAR 0 3
53007: PPUSH
53008: CALL_OW 331
// end ;
53012: LD_VAR 0 5
53016: RET
// export function Video ( mode ) ; begin
53017: LD_INT 0
53019: PPUSH
// ingame_video = mode ;
53020: LD_ADDR_OWVAR 52
53024: PUSH
53025: LD_VAR 0 1
53029: ST_TO_ADDR
// interface_hidden = mode ;
53030: LD_ADDR_OWVAR 54
53034: PUSH
53035: LD_VAR 0 1
53039: ST_TO_ADDR
// end ;
53040: LD_VAR 0 2
53044: RET
// export function Join ( array , element ) ; begin
53045: LD_INT 0
53047: PPUSH
// result := array ^ element ;
53048: LD_ADDR_VAR 0 3
53052: PUSH
53053: LD_VAR 0 1
53057: PUSH
53058: LD_VAR 0 2
53062: ADD
53063: ST_TO_ADDR
// end ;
53064: LD_VAR 0 3
53068: RET
// export function JoinUnion ( array , element ) ; begin
53069: LD_INT 0
53071: PPUSH
// result := array union element ;
53072: LD_ADDR_VAR 0 3
53076: PUSH
53077: LD_VAR 0 1
53081: PUSH
53082: LD_VAR 0 2
53086: UNION
53087: ST_TO_ADDR
// end ;
53088: LD_VAR 0 3
53092: RET
// export function GetBehemoths ( side ) ; begin
53093: LD_INT 0
53095: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
53096: LD_ADDR_VAR 0 2
53100: PUSH
53101: LD_INT 22
53103: PUSH
53104: LD_VAR 0 1
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 31
53115: PUSH
53116: LD_INT 25
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PPUSH
53127: CALL_OW 69
53131: ST_TO_ADDR
// end ;
53132: LD_VAR 0 2
53136: RET
// export function Shuffle ( array ) ; var i , index ; begin
53137: LD_INT 0
53139: PPUSH
53140: PPUSH
53141: PPUSH
// result := [ ] ;
53142: LD_ADDR_VAR 0 2
53146: PUSH
53147: EMPTY
53148: ST_TO_ADDR
// if not array then
53149: LD_VAR 0 1
53153: NOT
53154: IFFALSE 53158
// exit ;
53156: GO 53257
// Randomize ;
53158: CALL_OW 10
// for i = array downto 1 do
53162: LD_ADDR_VAR 0 3
53166: PUSH
53167: DOUBLE
53168: LD_VAR 0 1
53172: INC
53173: ST_TO_ADDR
53174: LD_INT 1
53176: PUSH
53177: FOR_DOWNTO
53178: IFFALSE 53255
// begin index := rand ( 1 , array ) ;
53180: LD_ADDR_VAR 0 4
53184: PUSH
53185: LD_INT 1
53187: PPUSH
53188: LD_VAR 0 1
53192: PPUSH
53193: CALL_OW 12
53197: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53198: LD_ADDR_VAR 0 2
53202: PUSH
53203: LD_VAR 0 2
53207: PPUSH
53208: LD_VAR 0 2
53212: PUSH
53213: LD_INT 1
53215: PLUS
53216: PPUSH
53217: LD_VAR 0 1
53221: PUSH
53222: LD_VAR 0 4
53226: ARRAY
53227: PPUSH
53228: CALL_OW 2
53232: ST_TO_ADDR
// array := Delete ( array , index ) ;
53233: LD_ADDR_VAR 0 1
53237: PUSH
53238: LD_VAR 0 1
53242: PPUSH
53243: LD_VAR 0 4
53247: PPUSH
53248: CALL_OW 3
53252: ST_TO_ADDR
// end ;
53253: GO 53177
53255: POP
53256: POP
// end ; end_of_file
53257: LD_VAR 0 2
53261: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
53262: GO 53264
53264: DISABLE
// begin ru_radar := 98 ;
53265: LD_ADDR_EXP 45
53269: PUSH
53270: LD_INT 98
53272: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
53273: LD_ADDR_EXP 46
53277: PUSH
53278: LD_INT 89
53280: ST_TO_ADDR
// us_hack := 99 ;
53281: LD_ADDR_EXP 47
53285: PUSH
53286: LD_INT 99
53288: ST_TO_ADDR
// us_artillery := 97 ;
53289: LD_ADDR_EXP 48
53293: PUSH
53294: LD_INT 97
53296: ST_TO_ADDR
// ar_bio_bomb := 91 ;
53297: LD_ADDR_EXP 49
53301: PUSH
53302: LD_INT 91
53304: ST_TO_ADDR
// end ; end_of_file
53305: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
53306: LD_INT 0
53308: PPUSH
53309: PPUSH
// skirmish := false ;
53310: LD_ADDR_EXP 50
53314: PUSH
53315: LD_INT 0
53317: ST_TO_ADDR
// debug_mc := false ;
53318: LD_ADDR_EXP 51
53322: PUSH
53323: LD_INT 0
53325: ST_TO_ADDR
// mc_bases := [ ] ;
53326: LD_ADDR_EXP 52
53330: PUSH
53331: EMPTY
53332: ST_TO_ADDR
// mc_sides := [ ] ;
53333: LD_ADDR_EXP 78
53337: PUSH
53338: EMPTY
53339: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
53340: LD_ADDR_EXP 53
53344: PUSH
53345: EMPTY
53346: ST_TO_ADDR
// mc_building_repairs := [ ] ;
53347: LD_ADDR_EXP 54
53351: PUSH
53352: EMPTY
53353: ST_TO_ADDR
// mc_need_heal := [ ] ;
53354: LD_ADDR_EXP 55
53358: PUSH
53359: EMPTY
53360: ST_TO_ADDR
// mc_healers := [ ] ;
53361: LD_ADDR_EXP 56
53365: PUSH
53366: EMPTY
53367: ST_TO_ADDR
// mc_build_list := [ ] ;
53368: LD_ADDR_EXP 57
53372: PUSH
53373: EMPTY
53374: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
53375: LD_ADDR_EXP 84
53379: PUSH
53380: EMPTY
53381: ST_TO_ADDR
// mc_builders := [ ] ;
53382: LD_ADDR_EXP 58
53386: PUSH
53387: EMPTY
53388: ST_TO_ADDR
// mc_construct_list := [ ] ;
53389: LD_ADDR_EXP 59
53393: PUSH
53394: EMPTY
53395: ST_TO_ADDR
// mc_turret_list := [ ] ;
53396: LD_ADDR_EXP 60
53400: PUSH
53401: EMPTY
53402: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
53403: LD_ADDR_EXP 61
53407: PUSH
53408: EMPTY
53409: ST_TO_ADDR
// mc_miners := [ ] ;
53410: LD_ADDR_EXP 66
53414: PUSH
53415: EMPTY
53416: ST_TO_ADDR
// mc_mines := [ ] ;
53417: LD_ADDR_EXP 65
53421: PUSH
53422: EMPTY
53423: ST_TO_ADDR
// mc_minefields := [ ] ;
53424: LD_ADDR_EXP 67
53428: PUSH
53429: EMPTY
53430: ST_TO_ADDR
// mc_crates := [ ] ;
53431: LD_ADDR_EXP 68
53435: PUSH
53436: EMPTY
53437: ST_TO_ADDR
// mc_crates_collector := [ ] ;
53438: LD_ADDR_EXP 69
53442: PUSH
53443: EMPTY
53444: ST_TO_ADDR
// mc_crates_area := [ ] ;
53445: LD_ADDR_EXP 70
53449: PUSH
53450: EMPTY
53451: ST_TO_ADDR
// mc_vehicles := [ ] ;
53452: LD_ADDR_EXP 71
53456: PUSH
53457: EMPTY
53458: ST_TO_ADDR
// mc_attack := [ ] ;
53459: LD_ADDR_EXP 72
53463: PUSH
53464: EMPTY
53465: ST_TO_ADDR
// mc_produce := [ ] ;
53466: LD_ADDR_EXP 73
53470: PUSH
53471: EMPTY
53472: ST_TO_ADDR
// mc_defender := [ ] ;
53473: LD_ADDR_EXP 74
53477: PUSH
53478: EMPTY
53479: ST_TO_ADDR
// mc_parking := [ ] ;
53480: LD_ADDR_EXP 76
53484: PUSH
53485: EMPTY
53486: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
53487: LD_ADDR_EXP 62
53491: PUSH
53492: EMPTY
53493: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
53494: LD_ADDR_EXP 64
53498: PUSH
53499: EMPTY
53500: ST_TO_ADDR
// mc_scan := [ ] ;
53501: LD_ADDR_EXP 75
53505: PUSH
53506: EMPTY
53507: ST_TO_ADDR
// mc_scan_area := [ ] ;
53508: LD_ADDR_EXP 77
53512: PUSH
53513: EMPTY
53514: ST_TO_ADDR
// mc_tech := [ ] ;
53515: LD_ADDR_EXP 79
53519: PUSH
53520: EMPTY
53521: ST_TO_ADDR
// mc_class := [ ] ;
53522: LD_ADDR_EXP 93
53526: PUSH
53527: EMPTY
53528: ST_TO_ADDR
// mc_class_case_use := [ ] ;
53529: LD_ADDR_EXP 94
53533: PUSH
53534: EMPTY
53535: ST_TO_ADDR
// end ;
53536: LD_VAR 0 1
53540: RET
// export function MC_Kill ( base ) ; begin
53541: LD_INT 0
53543: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
53544: LD_ADDR_EXP 52
53548: PUSH
53549: LD_EXP 52
53553: PPUSH
53554: LD_VAR 0 1
53558: PPUSH
53559: EMPTY
53560: PPUSH
53561: CALL_OW 1
53565: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
53566: LD_ADDR_EXP 53
53570: PUSH
53571: LD_EXP 53
53575: PPUSH
53576: LD_VAR 0 1
53580: PPUSH
53581: EMPTY
53582: PPUSH
53583: CALL_OW 1
53587: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
53588: LD_ADDR_EXP 54
53592: PUSH
53593: LD_EXP 54
53597: PPUSH
53598: LD_VAR 0 1
53602: PPUSH
53603: EMPTY
53604: PPUSH
53605: CALL_OW 1
53609: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
53610: LD_ADDR_EXP 55
53614: PUSH
53615: LD_EXP 55
53619: PPUSH
53620: LD_VAR 0 1
53624: PPUSH
53625: EMPTY
53626: PPUSH
53627: CALL_OW 1
53631: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
53632: LD_ADDR_EXP 56
53636: PUSH
53637: LD_EXP 56
53641: PPUSH
53642: LD_VAR 0 1
53646: PPUSH
53647: EMPTY
53648: PPUSH
53649: CALL_OW 1
53653: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
53654: LD_ADDR_EXP 57
53658: PUSH
53659: LD_EXP 57
53663: PPUSH
53664: LD_VAR 0 1
53668: PPUSH
53669: EMPTY
53670: PPUSH
53671: CALL_OW 1
53675: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
53676: LD_ADDR_EXP 58
53680: PUSH
53681: LD_EXP 58
53685: PPUSH
53686: LD_VAR 0 1
53690: PPUSH
53691: EMPTY
53692: PPUSH
53693: CALL_OW 1
53697: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
53698: LD_ADDR_EXP 59
53702: PUSH
53703: LD_EXP 59
53707: PPUSH
53708: LD_VAR 0 1
53712: PPUSH
53713: EMPTY
53714: PPUSH
53715: CALL_OW 1
53719: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
53720: LD_ADDR_EXP 60
53724: PUSH
53725: LD_EXP 60
53729: PPUSH
53730: LD_VAR 0 1
53734: PPUSH
53735: EMPTY
53736: PPUSH
53737: CALL_OW 1
53741: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
53742: LD_ADDR_EXP 61
53746: PUSH
53747: LD_EXP 61
53751: PPUSH
53752: LD_VAR 0 1
53756: PPUSH
53757: EMPTY
53758: PPUSH
53759: CALL_OW 1
53763: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
53764: LD_ADDR_EXP 62
53768: PUSH
53769: LD_EXP 62
53773: PPUSH
53774: LD_VAR 0 1
53778: PPUSH
53779: EMPTY
53780: PPUSH
53781: CALL_OW 1
53785: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
53786: LD_ADDR_EXP 63
53790: PUSH
53791: LD_EXP 63
53795: PPUSH
53796: LD_VAR 0 1
53800: PPUSH
53801: LD_INT 0
53803: PPUSH
53804: CALL_OW 1
53808: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
53809: LD_ADDR_EXP 64
53813: PUSH
53814: LD_EXP 64
53818: PPUSH
53819: LD_VAR 0 1
53823: PPUSH
53824: EMPTY
53825: PPUSH
53826: CALL_OW 1
53830: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
53831: LD_ADDR_EXP 65
53835: PUSH
53836: LD_EXP 65
53840: PPUSH
53841: LD_VAR 0 1
53845: PPUSH
53846: EMPTY
53847: PPUSH
53848: CALL_OW 1
53852: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
53853: LD_ADDR_EXP 66
53857: PUSH
53858: LD_EXP 66
53862: PPUSH
53863: LD_VAR 0 1
53867: PPUSH
53868: EMPTY
53869: PPUSH
53870: CALL_OW 1
53874: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
53875: LD_ADDR_EXP 67
53879: PUSH
53880: LD_EXP 67
53884: PPUSH
53885: LD_VAR 0 1
53889: PPUSH
53890: EMPTY
53891: PPUSH
53892: CALL_OW 1
53896: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
53897: LD_ADDR_EXP 68
53901: PUSH
53902: LD_EXP 68
53906: PPUSH
53907: LD_VAR 0 1
53911: PPUSH
53912: EMPTY
53913: PPUSH
53914: CALL_OW 1
53918: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
53919: LD_ADDR_EXP 69
53923: PUSH
53924: LD_EXP 69
53928: PPUSH
53929: LD_VAR 0 1
53933: PPUSH
53934: EMPTY
53935: PPUSH
53936: CALL_OW 1
53940: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
53941: LD_ADDR_EXP 70
53945: PUSH
53946: LD_EXP 70
53950: PPUSH
53951: LD_VAR 0 1
53955: PPUSH
53956: EMPTY
53957: PPUSH
53958: CALL_OW 1
53962: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
53963: LD_ADDR_EXP 71
53967: PUSH
53968: LD_EXP 71
53972: PPUSH
53973: LD_VAR 0 1
53977: PPUSH
53978: EMPTY
53979: PPUSH
53980: CALL_OW 1
53984: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
53985: LD_ADDR_EXP 72
53989: PUSH
53990: LD_EXP 72
53994: PPUSH
53995: LD_VAR 0 1
53999: PPUSH
54000: EMPTY
54001: PPUSH
54002: CALL_OW 1
54006: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
54007: LD_ADDR_EXP 73
54011: PUSH
54012: LD_EXP 73
54016: PPUSH
54017: LD_VAR 0 1
54021: PPUSH
54022: EMPTY
54023: PPUSH
54024: CALL_OW 1
54028: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
54029: LD_ADDR_EXP 74
54033: PUSH
54034: LD_EXP 74
54038: PPUSH
54039: LD_VAR 0 1
54043: PPUSH
54044: EMPTY
54045: PPUSH
54046: CALL_OW 1
54050: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
54051: LD_ADDR_EXP 75
54055: PUSH
54056: LD_EXP 75
54060: PPUSH
54061: LD_VAR 0 1
54065: PPUSH
54066: EMPTY
54067: PPUSH
54068: CALL_OW 1
54072: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
54073: LD_ADDR_EXP 76
54077: PUSH
54078: LD_EXP 76
54082: PPUSH
54083: LD_VAR 0 1
54087: PPUSH
54088: EMPTY
54089: PPUSH
54090: CALL_OW 1
54094: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
54095: LD_ADDR_EXP 77
54099: PUSH
54100: LD_EXP 77
54104: PPUSH
54105: LD_VAR 0 1
54109: PPUSH
54110: EMPTY
54111: PPUSH
54112: CALL_OW 1
54116: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
54117: LD_ADDR_EXP 79
54121: PUSH
54122: LD_EXP 79
54126: PPUSH
54127: LD_VAR 0 1
54131: PPUSH
54132: EMPTY
54133: PPUSH
54134: CALL_OW 1
54138: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
54139: LD_ADDR_EXP 81
54143: PUSH
54144: LD_EXP 81
54148: PPUSH
54149: LD_VAR 0 1
54153: PPUSH
54154: EMPTY
54155: PPUSH
54156: CALL_OW 1
54160: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
54161: LD_ADDR_EXP 82
54165: PUSH
54166: LD_EXP 82
54170: PPUSH
54171: LD_VAR 0 1
54175: PPUSH
54176: EMPTY
54177: PPUSH
54178: CALL_OW 1
54182: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
54183: LD_ADDR_EXP 83
54187: PUSH
54188: LD_EXP 83
54192: PPUSH
54193: LD_VAR 0 1
54197: PPUSH
54198: EMPTY
54199: PPUSH
54200: CALL_OW 1
54204: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
54205: LD_ADDR_EXP 84
54209: PUSH
54210: LD_EXP 84
54214: PPUSH
54215: LD_VAR 0 1
54219: PPUSH
54220: EMPTY
54221: PPUSH
54222: CALL_OW 1
54226: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
54227: LD_ADDR_EXP 85
54231: PUSH
54232: LD_EXP 85
54236: PPUSH
54237: LD_VAR 0 1
54241: PPUSH
54242: EMPTY
54243: PPUSH
54244: CALL_OW 1
54248: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
54249: LD_ADDR_EXP 86
54253: PUSH
54254: LD_EXP 86
54258: PPUSH
54259: LD_VAR 0 1
54263: PPUSH
54264: EMPTY
54265: PPUSH
54266: CALL_OW 1
54270: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
54271: LD_ADDR_EXP 87
54275: PUSH
54276: LD_EXP 87
54280: PPUSH
54281: LD_VAR 0 1
54285: PPUSH
54286: EMPTY
54287: PPUSH
54288: CALL_OW 1
54292: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
54293: LD_ADDR_EXP 88
54297: PUSH
54298: LD_EXP 88
54302: PPUSH
54303: LD_VAR 0 1
54307: PPUSH
54308: EMPTY
54309: PPUSH
54310: CALL_OW 1
54314: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
54315: LD_ADDR_EXP 89
54319: PUSH
54320: LD_EXP 89
54324: PPUSH
54325: LD_VAR 0 1
54329: PPUSH
54330: EMPTY
54331: PPUSH
54332: CALL_OW 1
54336: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
54337: LD_ADDR_EXP 90
54341: PUSH
54342: LD_EXP 90
54346: PPUSH
54347: LD_VAR 0 1
54351: PPUSH
54352: EMPTY
54353: PPUSH
54354: CALL_OW 1
54358: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
54359: LD_ADDR_EXP 91
54363: PUSH
54364: LD_EXP 91
54368: PPUSH
54369: LD_VAR 0 1
54373: PPUSH
54374: EMPTY
54375: PPUSH
54376: CALL_OW 1
54380: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
54381: LD_ADDR_EXP 92
54385: PUSH
54386: LD_EXP 92
54390: PPUSH
54391: LD_VAR 0 1
54395: PPUSH
54396: EMPTY
54397: PPUSH
54398: CALL_OW 1
54402: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
54403: LD_ADDR_EXP 93
54407: PUSH
54408: LD_EXP 93
54412: PPUSH
54413: LD_VAR 0 1
54417: PPUSH
54418: EMPTY
54419: PPUSH
54420: CALL_OW 1
54424: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
54425: LD_ADDR_EXP 94
54429: PUSH
54430: LD_EXP 94
54434: PPUSH
54435: LD_VAR 0 1
54439: PPUSH
54440: LD_INT 0
54442: PPUSH
54443: CALL_OW 1
54447: ST_TO_ADDR
// end ;
54448: LD_VAR 0 2
54452: RET
// export function MC_Add ( side , units ) ; var base ; begin
54453: LD_INT 0
54455: PPUSH
54456: PPUSH
// base := mc_bases + 1 ;
54457: LD_ADDR_VAR 0 4
54461: PUSH
54462: LD_EXP 52
54466: PUSH
54467: LD_INT 1
54469: PLUS
54470: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
54471: LD_ADDR_EXP 78
54475: PUSH
54476: LD_EXP 78
54480: PPUSH
54481: LD_VAR 0 4
54485: PPUSH
54486: LD_VAR 0 1
54490: PPUSH
54491: CALL_OW 1
54495: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
54496: LD_ADDR_EXP 52
54500: PUSH
54501: LD_EXP 52
54505: PPUSH
54506: LD_VAR 0 4
54510: PPUSH
54511: LD_VAR 0 2
54515: PPUSH
54516: CALL_OW 1
54520: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
54521: LD_ADDR_EXP 53
54525: PUSH
54526: LD_EXP 53
54530: PPUSH
54531: LD_VAR 0 4
54535: PPUSH
54536: EMPTY
54537: PPUSH
54538: CALL_OW 1
54542: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
54543: LD_ADDR_EXP 54
54547: PUSH
54548: LD_EXP 54
54552: PPUSH
54553: LD_VAR 0 4
54557: PPUSH
54558: EMPTY
54559: PPUSH
54560: CALL_OW 1
54564: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
54565: LD_ADDR_EXP 55
54569: PUSH
54570: LD_EXP 55
54574: PPUSH
54575: LD_VAR 0 4
54579: PPUSH
54580: EMPTY
54581: PPUSH
54582: CALL_OW 1
54586: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
54587: LD_ADDR_EXP 56
54591: PUSH
54592: LD_EXP 56
54596: PPUSH
54597: LD_VAR 0 4
54601: PPUSH
54602: EMPTY
54603: PPUSH
54604: CALL_OW 1
54608: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
54609: LD_ADDR_EXP 57
54613: PUSH
54614: LD_EXP 57
54618: PPUSH
54619: LD_VAR 0 4
54623: PPUSH
54624: EMPTY
54625: PPUSH
54626: CALL_OW 1
54630: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
54631: LD_ADDR_EXP 58
54635: PUSH
54636: LD_EXP 58
54640: PPUSH
54641: LD_VAR 0 4
54645: PPUSH
54646: EMPTY
54647: PPUSH
54648: CALL_OW 1
54652: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
54653: LD_ADDR_EXP 59
54657: PUSH
54658: LD_EXP 59
54662: PPUSH
54663: LD_VAR 0 4
54667: PPUSH
54668: EMPTY
54669: PPUSH
54670: CALL_OW 1
54674: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
54675: LD_ADDR_EXP 60
54679: PUSH
54680: LD_EXP 60
54684: PPUSH
54685: LD_VAR 0 4
54689: PPUSH
54690: EMPTY
54691: PPUSH
54692: CALL_OW 1
54696: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
54697: LD_ADDR_EXP 61
54701: PUSH
54702: LD_EXP 61
54706: PPUSH
54707: LD_VAR 0 4
54711: PPUSH
54712: EMPTY
54713: PPUSH
54714: CALL_OW 1
54718: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
54719: LD_ADDR_EXP 62
54723: PUSH
54724: LD_EXP 62
54728: PPUSH
54729: LD_VAR 0 4
54733: PPUSH
54734: EMPTY
54735: PPUSH
54736: CALL_OW 1
54740: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
54741: LD_ADDR_EXP 63
54745: PUSH
54746: LD_EXP 63
54750: PPUSH
54751: LD_VAR 0 4
54755: PPUSH
54756: LD_INT 0
54758: PPUSH
54759: CALL_OW 1
54763: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
54764: LD_ADDR_EXP 64
54768: PUSH
54769: LD_EXP 64
54773: PPUSH
54774: LD_VAR 0 4
54778: PPUSH
54779: EMPTY
54780: PPUSH
54781: CALL_OW 1
54785: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
54786: LD_ADDR_EXP 65
54790: PUSH
54791: LD_EXP 65
54795: PPUSH
54796: LD_VAR 0 4
54800: PPUSH
54801: EMPTY
54802: PPUSH
54803: CALL_OW 1
54807: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
54808: LD_ADDR_EXP 66
54812: PUSH
54813: LD_EXP 66
54817: PPUSH
54818: LD_VAR 0 4
54822: PPUSH
54823: EMPTY
54824: PPUSH
54825: CALL_OW 1
54829: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
54830: LD_ADDR_EXP 67
54834: PUSH
54835: LD_EXP 67
54839: PPUSH
54840: LD_VAR 0 4
54844: PPUSH
54845: EMPTY
54846: PPUSH
54847: CALL_OW 1
54851: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
54852: LD_ADDR_EXP 68
54856: PUSH
54857: LD_EXP 68
54861: PPUSH
54862: LD_VAR 0 4
54866: PPUSH
54867: EMPTY
54868: PPUSH
54869: CALL_OW 1
54873: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
54874: LD_ADDR_EXP 69
54878: PUSH
54879: LD_EXP 69
54883: PPUSH
54884: LD_VAR 0 4
54888: PPUSH
54889: EMPTY
54890: PPUSH
54891: CALL_OW 1
54895: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
54896: LD_ADDR_EXP 70
54900: PUSH
54901: LD_EXP 70
54905: PPUSH
54906: LD_VAR 0 4
54910: PPUSH
54911: EMPTY
54912: PPUSH
54913: CALL_OW 1
54917: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
54918: LD_ADDR_EXP 71
54922: PUSH
54923: LD_EXP 71
54927: PPUSH
54928: LD_VAR 0 4
54932: PPUSH
54933: EMPTY
54934: PPUSH
54935: CALL_OW 1
54939: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
54940: LD_ADDR_EXP 72
54944: PUSH
54945: LD_EXP 72
54949: PPUSH
54950: LD_VAR 0 4
54954: PPUSH
54955: EMPTY
54956: PPUSH
54957: CALL_OW 1
54961: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
54962: LD_ADDR_EXP 73
54966: PUSH
54967: LD_EXP 73
54971: PPUSH
54972: LD_VAR 0 4
54976: PPUSH
54977: EMPTY
54978: PPUSH
54979: CALL_OW 1
54983: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
54984: LD_ADDR_EXP 74
54988: PUSH
54989: LD_EXP 74
54993: PPUSH
54994: LD_VAR 0 4
54998: PPUSH
54999: EMPTY
55000: PPUSH
55001: CALL_OW 1
55005: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
55006: LD_ADDR_EXP 75
55010: PUSH
55011: LD_EXP 75
55015: PPUSH
55016: LD_VAR 0 4
55020: PPUSH
55021: EMPTY
55022: PPUSH
55023: CALL_OW 1
55027: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
55028: LD_ADDR_EXP 76
55032: PUSH
55033: LD_EXP 76
55037: PPUSH
55038: LD_VAR 0 4
55042: PPUSH
55043: EMPTY
55044: PPUSH
55045: CALL_OW 1
55049: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
55050: LD_ADDR_EXP 77
55054: PUSH
55055: LD_EXP 77
55059: PPUSH
55060: LD_VAR 0 4
55064: PPUSH
55065: EMPTY
55066: PPUSH
55067: CALL_OW 1
55071: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
55072: LD_ADDR_EXP 79
55076: PUSH
55077: LD_EXP 79
55081: PPUSH
55082: LD_VAR 0 4
55086: PPUSH
55087: EMPTY
55088: PPUSH
55089: CALL_OW 1
55093: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
55094: LD_ADDR_EXP 81
55098: PUSH
55099: LD_EXP 81
55103: PPUSH
55104: LD_VAR 0 4
55108: PPUSH
55109: EMPTY
55110: PPUSH
55111: CALL_OW 1
55115: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
55116: LD_ADDR_EXP 82
55120: PUSH
55121: LD_EXP 82
55125: PPUSH
55126: LD_VAR 0 4
55130: PPUSH
55131: EMPTY
55132: PPUSH
55133: CALL_OW 1
55137: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
55138: LD_ADDR_EXP 83
55142: PUSH
55143: LD_EXP 83
55147: PPUSH
55148: LD_VAR 0 4
55152: PPUSH
55153: EMPTY
55154: PPUSH
55155: CALL_OW 1
55159: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
55160: LD_ADDR_EXP 84
55164: PUSH
55165: LD_EXP 84
55169: PPUSH
55170: LD_VAR 0 4
55174: PPUSH
55175: EMPTY
55176: PPUSH
55177: CALL_OW 1
55181: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
55182: LD_ADDR_EXP 85
55186: PUSH
55187: LD_EXP 85
55191: PPUSH
55192: LD_VAR 0 4
55196: PPUSH
55197: EMPTY
55198: PPUSH
55199: CALL_OW 1
55203: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
55204: LD_ADDR_EXP 86
55208: PUSH
55209: LD_EXP 86
55213: PPUSH
55214: LD_VAR 0 4
55218: PPUSH
55219: EMPTY
55220: PPUSH
55221: CALL_OW 1
55225: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
55226: LD_ADDR_EXP 87
55230: PUSH
55231: LD_EXP 87
55235: PPUSH
55236: LD_VAR 0 4
55240: PPUSH
55241: EMPTY
55242: PPUSH
55243: CALL_OW 1
55247: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
55248: LD_ADDR_EXP 88
55252: PUSH
55253: LD_EXP 88
55257: PPUSH
55258: LD_VAR 0 4
55262: PPUSH
55263: EMPTY
55264: PPUSH
55265: CALL_OW 1
55269: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
55270: LD_ADDR_EXP 89
55274: PUSH
55275: LD_EXP 89
55279: PPUSH
55280: LD_VAR 0 4
55284: PPUSH
55285: EMPTY
55286: PPUSH
55287: CALL_OW 1
55291: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
55292: LD_ADDR_EXP 90
55296: PUSH
55297: LD_EXP 90
55301: PPUSH
55302: LD_VAR 0 4
55306: PPUSH
55307: EMPTY
55308: PPUSH
55309: CALL_OW 1
55313: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
55314: LD_ADDR_EXP 91
55318: PUSH
55319: LD_EXP 91
55323: PPUSH
55324: LD_VAR 0 4
55328: PPUSH
55329: EMPTY
55330: PPUSH
55331: CALL_OW 1
55335: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
55336: LD_ADDR_EXP 92
55340: PUSH
55341: LD_EXP 92
55345: PPUSH
55346: LD_VAR 0 4
55350: PPUSH
55351: EMPTY
55352: PPUSH
55353: CALL_OW 1
55357: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
55358: LD_ADDR_EXP 93
55362: PUSH
55363: LD_EXP 93
55367: PPUSH
55368: LD_VAR 0 4
55372: PPUSH
55373: EMPTY
55374: PPUSH
55375: CALL_OW 1
55379: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
55380: LD_ADDR_EXP 94
55384: PUSH
55385: LD_EXP 94
55389: PPUSH
55390: LD_VAR 0 4
55394: PPUSH
55395: LD_INT 0
55397: PPUSH
55398: CALL_OW 1
55402: ST_TO_ADDR
// result := base ;
55403: LD_ADDR_VAR 0 3
55407: PUSH
55408: LD_VAR 0 4
55412: ST_TO_ADDR
// end ;
55413: LD_VAR 0 3
55417: RET
// export function MC_Start ( ) ; var i ; begin
55418: LD_INT 0
55420: PPUSH
55421: PPUSH
// for i = 1 to mc_bases do
55422: LD_ADDR_VAR 0 2
55426: PUSH
55427: DOUBLE
55428: LD_INT 1
55430: DEC
55431: ST_TO_ADDR
55432: LD_EXP 52
55436: PUSH
55437: FOR_TO
55438: IFFALSE 56515
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
55440: LD_ADDR_EXP 52
55444: PUSH
55445: LD_EXP 52
55449: PPUSH
55450: LD_VAR 0 2
55454: PPUSH
55455: LD_EXP 52
55459: PUSH
55460: LD_VAR 0 2
55464: ARRAY
55465: PUSH
55466: LD_INT 0
55468: DIFF
55469: PPUSH
55470: CALL_OW 1
55474: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
55475: LD_ADDR_EXP 53
55479: PUSH
55480: LD_EXP 53
55484: PPUSH
55485: LD_VAR 0 2
55489: PPUSH
55490: EMPTY
55491: PPUSH
55492: CALL_OW 1
55496: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
55497: LD_ADDR_EXP 54
55501: PUSH
55502: LD_EXP 54
55506: PPUSH
55507: LD_VAR 0 2
55511: PPUSH
55512: EMPTY
55513: PPUSH
55514: CALL_OW 1
55518: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
55519: LD_ADDR_EXP 55
55523: PUSH
55524: LD_EXP 55
55528: PPUSH
55529: LD_VAR 0 2
55533: PPUSH
55534: EMPTY
55535: PPUSH
55536: CALL_OW 1
55540: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
55541: LD_ADDR_EXP 56
55545: PUSH
55546: LD_EXP 56
55550: PPUSH
55551: LD_VAR 0 2
55555: PPUSH
55556: EMPTY
55557: PUSH
55558: EMPTY
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PPUSH
55564: CALL_OW 1
55568: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
55569: LD_ADDR_EXP 57
55573: PUSH
55574: LD_EXP 57
55578: PPUSH
55579: LD_VAR 0 2
55583: PPUSH
55584: EMPTY
55585: PPUSH
55586: CALL_OW 1
55590: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
55591: LD_ADDR_EXP 84
55595: PUSH
55596: LD_EXP 84
55600: PPUSH
55601: LD_VAR 0 2
55605: PPUSH
55606: EMPTY
55607: PPUSH
55608: CALL_OW 1
55612: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
55613: LD_ADDR_EXP 58
55617: PUSH
55618: LD_EXP 58
55622: PPUSH
55623: LD_VAR 0 2
55627: PPUSH
55628: EMPTY
55629: PPUSH
55630: CALL_OW 1
55634: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
55635: LD_ADDR_EXP 59
55639: PUSH
55640: LD_EXP 59
55644: PPUSH
55645: LD_VAR 0 2
55649: PPUSH
55650: EMPTY
55651: PPUSH
55652: CALL_OW 1
55656: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
55657: LD_ADDR_EXP 60
55661: PUSH
55662: LD_EXP 60
55666: PPUSH
55667: LD_VAR 0 2
55671: PPUSH
55672: LD_EXP 52
55676: PUSH
55677: LD_VAR 0 2
55681: ARRAY
55682: PPUSH
55683: LD_INT 2
55685: PUSH
55686: LD_INT 30
55688: PUSH
55689: LD_INT 32
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 30
55698: PUSH
55699: LD_INT 33
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: LIST
55710: PPUSH
55711: CALL_OW 72
55715: PPUSH
55716: CALL_OW 1
55720: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
55721: LD_ADDR_EXP 61
55725: PUSH
55726: LD_EXP 61
55730: PPUSH
55731: LD_VAR 0 2
55735: PPUSH
55736: LD_EXP 52
55740: PUSH
55741: LD_VAR 0 2
55745: ARRAY
55746: PPUSH
55747: LD_INT 2
55749: PUSH
55750: LD_INT 30
55752: PUSH
55753: LD_INT 32
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 30
55762: PUSH
55763: LD_INT 31
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 58
55777: PUSH
55778: EMPTY
55779: LIST
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PPUSH
55785: CALL_OW 72
55789: PPUSH
55790: CALL_OW 1
55794: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
55795: LD_ADDR_EXP 62
55799: PUSH
55800: LD_EXP 62
55804: PPUSH
55805: LD_VAR 0 2
55809: PPUSH
55810: EMPTY
55811: PPUSH
55812: CALL_OW 1
55816: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
55817: LD_ADDR_EXP 66
55821: PUSH
55822: LD_EXP 66
55826: PPUSH
55827: LD_VAR 0 2
55831: PPUSH
55832: EMPTY
55833: PPUSH
55834: CALL_OW 1
55838: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
55839: LD_ADDR_EXP 65
55843: PUSH
55844: LD_EXP 65
55848: PPUSH
55849: LD_VAR 0 2
55853: PPUSH
55854: EMPTY
55855: PPUSH
55856: CALL_OW 1
55860: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
55861: LD_ADDR_EXP 67
55865: PUSH
55866: LD_EXP 67
55870: PPUSH
55871: LD_VAR 0 2
55875: PPUSH
55876: EMPTY
55877: PPUSH
55878: CALL_OW 1
55882: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
55883: LD_ADDR_EXP 68
55887: PUSH
55888: LD_EXP 68
55892: PPUSH
55893: LD_VAR 0 2
55897: PPUSH
55898: EMPTY
55899: PPUSH
55900: CALL_OW 1
55904: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
55905: LD_ADDR_EXP 69
55909: PUSH
55910: LD_EXP 69
55914: PPUSH
55915: LD_VAR 0 2
55919: PPUSH
55920: EMPTY
55921: PPUSH
55922: CALL_OW 1
55926: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
55927: LD_ADDR_EXP 70
55931: PUSH
55932: LD_EXP 70
55936: PPUSH
55937: LD_VAR 0 2
55941: PPUSH
55942: EMPTY
55943: PPUSH
55944: CALL_OW 1
55948: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
55949: LD_ADDR_EXP 71
55953: PUSH
55954: LD_EXP 71
55958: PPUSH
55959: LD_VAR 0 2
55963: PPUSH
55964: EMPTY
55965: PPUSH
55966: CALL_OW 1
55970: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
55971: LD_ADDR_EXP 72
55975: PUSH
55976: LD_EXP 72
55980: PPUSH
55981: LD_VAR 0 2
55985: PPUSH
55986: EMPTY
55987: PPUSH
55988: CALL_OW 1
55992: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
55993: LD_ADDR_EXP 73
55997: PUSH
55998: LD_EXP 73
56002: PPUSH
56003: LD_VAR 0 2
56007: PPUSH
56008: EMPTY
56009: PPUSH
56010: CALL_OW 1
56014: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
56015: LD_ADDR_EXP 74
56019: PUSH
56020: LD_EXP 74
56024: PPUSH
56025: LD_VAR 0 2
56029: PPUSH
56030: EMPTY
56031: PPUSH
56032: CALL_OW 1
56036: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
56037: LD_ADDR_EXP 63
56041: PUSH
56042: LD_EXP 63
56046: PPUSH
56047: LD_VAR 0 2
56051: PPUSH
56052: LD_INT 0
56054: PPUSH
56055: CALL_OW 1
56059: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
56060: LD_ADDR_EXP 76
56064: PUSH
56065: LD_EXP 76
56069: PPUSH
56070: LD_VAR 0 2
56074: PPUSH
56075: LD_INT 0
56077: PPUSH
56078: CALL_OW 1
56082: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
56083: LD_ADDR_EXP 64
56087: PUSH
56088: LD_EXP 64
56092: PPUSH
56093: LD_VAR 0 2
56097: PPUSH
56098: EMPTY
56099: PPUSH
56100: CALL_OW 1
56104: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
56105: LD_ADDR_EXP 75
56109: PUSH
56110: LD_EXP 75
56114: PPUSH
56115: LD_VAR 0 2
56119: PPUSH
56120: LD_INT 0
56122: PPUSH
56123: CALL_OW 1
56127: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
56128: LD_ADDR_EXP 77
56132: PUSH
56133: LD_EXP 77
56137: PPUSH
56138: LD_VAR 0 2
56142: PPUSH
56143: EMPTY
56144: PPUSH
56145: CALL_OW 1
56149: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
56150: LD_ADDR_EXP 80
56154: PUSH
56155: LD_EXP 80
56159: PPUSH
56160: LD_VAR 0 2
56164: PPUSH
56165: LD_INT 0
56167: PPUSH
56168: CALL_OW 1
56172: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
56173: LD_ADDR_EXP 81
56177: PUSH
56178: LD_EXP 81
56182: PPUSH
56183: LD_VAR 0 2
56187: PPUSH
56188: EMPTY
56189: PPUSH
56190: CALL_OW 1
56194: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
56195: LD_ADDR_EXP 82
56199: PUSH
56200: LD_EXP 82
56204: PPUSH
56205: LD_VAR 0 2
56209: PPUSH
56210: EMPTY
56211: PPUSH
56212: CALL_OW 1
56216: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
56217: LD_ADDR_EXP 83
56221: PUSH
56222: LD_EXP 83
56226: PPUSH
56227: LD_VAR 0 2
56231: PPUSH
56232: EMPTY
56233: PPUSH
56234: CALL_OW 1
56238: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
56239: LD_ADDR_EXP 85
56243: PUSH
56244: LD_EXP 85
56248: PPUSH
56249: LD_VAR 0 2
56253: PPUSH
56254: LD_EXP 52
56258: PUSH
56259: LD_VAR 0 2
56263: ARRAY
56264: PPUSH
56265: LD_INT 2
56267: PUSH
56268: LD_INT 30
56270: PUSH
56271: LD_INT 6
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 30
56280: PUSH
56281: LD_INT 7
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 30
56290: PUSH
56291: LD_INT 8
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: PPUSH
56304: CALL_OW 72
56308: PPUSH
56309: CALL_OW 1
56313: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
56314: LD_ADDR_EXP 86
56318: PUSH
56319: LD_EXP 86
56323: PPUSH
56324: LD_VAR 0 2
56328: PPUSH
56329: EMPTY
56330: PPUSH
56331: CALL_OW 1
56335: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
56336: LD_ADDR_EXP 87
56340: PUSH
56341: LD_EXP 87
56345: PPUSH
56346: LD_VAR 0 2
56350: PPUSH
56351: EMPTY
56352: PPUSH
56353: CALL_OW 1
56357: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
56358: LD_ADDR_EXP 88
56362: PUSH
56363: LD_EXP 88
56367: PPUSH
56368: LD_VAR 0 2
56372: PPUSH
56373: EMPTY
56374: PPUSH
56375: CALL_OW 1
56379: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
56380: LD_ADDR_EXP 89
56384: PUSH
56385: LD_EXP 89
56389: PPUSH
56390: LD_VAR 0 2
56394: PPUSH
56395: EMPTY
56396: PPUSH
56397: CALL_OW 1
56401: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
56402: LD_ADDR_EXP 90
56406: PUSH
56407: LD_EXP 90
56411: PPUSH
56412: LD_VAR 0 2
56416: PPUSH
56417: EMPTY
56418: PPUSH
56419: CALL_OW 1
56423: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
56424: LD_ADDR_EXP 91
56428: PUSH
56429: LD_EXP 91
56433: PPUSH
56434: LD_VAR 0 2
56438: PPUSH
56439: EMPTY
56440: PPUSH
56441: CALL_OW 1
56445: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
56446: LD_ADDR_EXP 92
56450: PUSH
56451: LD_EXP 92
56455: PPUSH
56456: LD_VAR 0 2
56460: PPUSH
56461: EMPTY
56462: PPUSH
56463: CALL_OW 1
56467: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
56468: LD_ADDR_EXP 93
56472: PUSH
56473: LD_EXP 93
56477: PPUSH
56478: LD_VAR 0 2
56482: PPUSH
56483: EMPTY
56484: PPUSH
56485: CALL_OW 1
56489: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
56490: LD_ADDR_EXP 94
56494: PUSH
56495: LD_EXP 94
56499: PPUSH
56500: LD_VAR 0 2
56504: PPUSH
56505: LD_INT 0
56507: PPUSH
56508: CALL_OW 1
56512: ST_TO_ADDR
// end ;
56513: GO 55437
56515: POP
56516: POP
// MC_InitSides ( ) ;
56517: CALL 56803 0 0
// MC_InitResearch ( ) ;
56521: CALL 56542 0 0
// CustomInitMacro ( ) ;
56525: CALL 5318 0 0
// skirmish := true ;
56529: LD_ADDR_EXP 50
56533: PUSH
56534: LD_INT 1
56536: ST_TO_ADDR
// end ;
56537: LD_VAR 0 1
56541: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
56542: LD_INT 0
56544: PPUSH
56545: PPUSH
56546: PPUSH
56547: PPUSH
56548: PPUSH
56549: PPUSH
// if not mc_bases then
56550: LD_EXP 52
56554: NOT
56555: IFFALSE 56559
// exit ;
56557: GO 56798
// for i = 1 to 8 do
56559: LD_ADDR_VAR 0 2
56563: PUSH
56564: DOUBLE
56565: LD_INT 1
56567: DEC
56568: ST_TO_ADDR
56569: LD_INT 8
56571: PUSH
56572: FOR_TO
56573: IFFALSE 56599
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
56575: LD_ADDR_EXP 79
56579: PUSH
56580: LD_EXP 79
56584: PPUSH
56585: LD_VAR 0 2
56589: PPUSH
56590: EMPTY
56591: PPUSH
56592: CALL_OW 1
56596: ST_TO_ADDR
56597: GO 56572
56599: POP
56600: POP
// tmp := [ ] ;
56601: LD_ADDR_VAR 0 5
56605: PUSH
56606: EMPTY
56607: ST_TO_ADDR
// for i = 1 to mc_sides do
56608: LD_ADDR_VAR 0 2
56612: PUSH
56613: DOUBLE
56614: LD_INT 1
56616: DEC
56617: ST_TO_ADDR
56618: LD_EXP 78
56622: PUSH
56623: FOR_TO
56624: IFFALSE 56682
// if not mc_sides [ i ] in tmp then
56626: LD_EXP 78
56630: PUSH
56631: LD_VAR 0 2
56635: ARRAY
56636: PUSH
56637: LD_VAR 0 5
56641: IN
56642: NOT
56643: IFFALSE 56680
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
56645: LD_ADDR_VAR 0 5
56649: PUSH
56650: LD_VAR 0 5
56654: PPUSH
56655: LD_VAR 0 5
56659: PUSH
56660: LD_INT 1
56662: PLUS
56663: PPUSH
56664: LD_EXP 78
56668: PUSH
56669: LD_VAR 0 2
56673: ARRAY
56674: PPUSH
56675: CALL_OW 2
56679: ST_TO_ADDR
56680: GO 56623
56682: POP
56683: POP
// if not tmp then
56684: LD_VAR 0 5
56688: NOT
56689: IFFALSE 56693
// exit ;
56691: GO 56798
// for j in tmp do
56693: LD_ADDR_VAR 0 3
56697: PUSH
56698: LD_VAR 0 5
56702: PUSH
56703: FOR_IN
56704: IFFALSE 56796
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
56706: LD_ADDR_VAR 0 6
56710: PUSH
56711: LD_INT 22
56713: PUSH
56714: LD_VAR 0 3
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PPUSH
56723: CALL_OW 69
56727: ST_TO_ADDR
// if not un then
56728: LD_VAR 0 6
56732: NOT
56733: IFFALSE 56737
// continue ;
56735: GO 56703
// nation := GetNation ( un [ 1 ] ) ;
56737: LD_ADDR_VAR 0 4
56741: PUSH
56742: LD_VAR 0 6
56746: PUSH
56747: LD_INT 1
56749: ARRAY
56750: PPUSH
56751: CALL_OW 248
56755: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
56756: LD_ADDR_EXP 79
56760: PUSH
56761: LD_EXP 79
56765: PPUSH
56766: LD_VAR 0 3
56770: PPUSH
56771: LD_VAR 0 3
56775: PPUSH
56776: LD_VAR 0 4
56780: PPUSH
56781: LD_INT 1
56783: PPUSH
56784: CALL 10766 0 3
56788: PPUSH
56789: CALL_OW 1
56793: ST_TO_ADDR
// end ;
56794: GO 56703
56796: POP
56797: POP
// end ;
56798: LD_VAR 0 1
56802: RET
// export function MC_InitSides ( ) ; var i ; begin
56803: LD_INT 0
56805: PPUSH
56806: PPUSH
// if not mc_bases then
56807: LD_EXP 52
56811: NOT
56812: IFFALSE 56816
// exit ;
56814: GO 56890
// for i = 1 to mc_bases do
56816: LD_ADDR_VAR 0 2
56820: PUSH
56821: DOUBLE
56822: LD_INT 1
56824: DEC
56825: ST_TO_ADDR
56826: LD_EXP 52
56830: PUSH
56831: FOR_TO
56832: IFFALSE 56888
// if mc_bases [ i ] then
56834: LD_EXP 52
56838: PUSH
56839: LD_VAR 0 2
56843: ARRAY
56844: IFFALSE 56886
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
56846: LD_ADDR_EXP 78
56850: PUSH
56851: LD_EXP 78
56855: PPUSH
56856: LD_VAR 0 2
56860: PPUSH
56861: LD_EXP 52
56865: PUSH
56866: LD_VAR 0 2
56870: ARRAY
56871: PUSH
56872: LD_INT 1
56874: ARRAY
56875: PPUSH
56876: CALL_OW 255
56880: PPUSH
56881: CALL_OW 1
56885: ST_TO_ADDR
56886: GO 56831
56888: POP
56889: POP
// end ;
56890: LD_VAR 0 1
56894: RET
// every 0 0$01 trigger skirmish do
56895: LD_EXP 50
56899: IFFALSE 57053
56901: GO 56903
56903: DISABLE
// begin enable ;
56904: ENABLE
// MC_CheckBuildings ( ) ;
56905: CALL 61542 0 0
// MC_CheckPeopleLife ( ) ;
56909: CALL 61667 0 0
// RaiseSailEvent ( 100 ) ;
56913: LD_INT 100
56915: PPUSH
56916: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
56920: LD_INT 103
56922: PPUSH
56923: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
56927: LD_INT 104
56929: PPUSH
56930: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
56934: LD_INT 105
56936: PPUSH
56937: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
56941: LD_INT 106
56943: PPUSH
56944: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
56948: LD_INT 107
56950: PPUSH
56951: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
56955: LD_INT 108
56957: PPUSH
56958: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
56962: LD_INT 109
56964: PPUSH
56965: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
56969: LD_INT 110
56971: PPUSH
56972: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
56976: LD_INT 111
56978: PPUSH
56979: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
56983: LD_INT 112
56985: PPUSH
56986: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
56990: LD_INT 113
56992: PPUSH
56993: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
56997: LD_INT 120
56999: PPUSH
57000: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
57004: LD_INT 121
57006: PPUSH
57007: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
57011: LD_INT 122
57013: PPUSH
57014: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
57018: LD_INT 123
57020: PPUSH
57021: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
57025: LD_INT 124
57027: PPUSH
57028: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
57032: LD_INT 125
57034: PPUSH
57035: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
57039: LD_INT 126
57041: PPUSH
57042: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
57046: LD_INT 200
57048: PPUSH
57049: CALL_OW 427
// end ;
57053: END
// on SailEvent ( event ) do begin if event < 100 then
57054: LD_VAR 0 1
57058: PUSH
57059: LD_INT 100
57061: LESS
57062: IFFALSE 57073
// CustomEvent ( event ) ;
57064: LD_VAR 0 1
57068: PPUSH
57069: CALL 5310 0 1
// if event = 100 then
57073: LD_VAR 0 1
57077: PUSH
57078: LD_INT 100
57080: EQUAL
57081: IFFALSE 57087
// MC_ClassManager ( ) ;
57083: CALL 57479 0 0
// if event = 101 then
57087: LD_VAR 0 1
57091: PUSH
57092: LD_INT 101
57094: EQUAL
57095: IFFALSE 57101
// MC_RepairBuildings ( ) ;
57097: CALL 62263 0 0
// if event = 102 then
57101: LD_VAR 0 1
57105: PUSH
57106: LD_INT 102
57108: EQUAL
57109: IFFALSE 57115
// MC_Heal ( ) ;
57111: CALL 62669 0 0
// if event = 103 then
57115: LD_VAR 0 1
57119: PUSH
57120: LD_INT 103
57122: EQUAL
57123: IFFALSE 57129
// MC_Build ( ) ;
57125: CALL 63091 0 0
// if event = 104 then
57129: LD_VAR 0 1
57133: PUSH
57134: LD_INT 104
57136: EQUAL
57137: IFFALSE 57143
// MC_TurretWeapon ( ) ;
57139: CALL 64704 0 0
// if event = 105 then
57143: LD_VAR 0 1
57147: PUSH
57148: LD_INT 105
57150: EQUAL
57151: IFFALSE 57157
// MC_BuildUpgrade ( ) ;
57153: CALL 64255 0 0
// if event = 106 then
57157: LD_VAR 0 1
57161: PUSH
57162: LD_INT 106
57164: EQUAL
57165: IFFALSE 57171
// MC_PlantMines ( ) ;
57167: CALL 65134 0 0
// if event = 107 then
57171: LD_VAR 0 1
57175: PUSH
57176: LD_INT 107
57178: EQUAL
57179: IFFALSE 57185
// MC_CollectCrates ( ) ;
57181: CALL 66168 0 0
// if event = 108 then
57185: LD_VAR 0 1
57189: PUSH
57190: LD_INT 108
57192: EQUAL
57193: IFFALSE 57199
// MC_LinkRemoteControl ( ) ;
57195: CALL 67925 0 0
// if event = 109 then
57199: LD_VAR 0 1
57203: PUSH
57204: LD_INT 109
57206: EQUAL
57207: IFFALSE 57213
// MC_ProduceVehicle ( ) ;
57209: CALL 68106 0 0
// if event = 110 then
57213: LD_VAR 0 1
57217: PUSH
57218: LD_INT 110
57220: EQUAL
57221: IFFALSE 57227
// MC_SendAttack ( ) ;
57223: CALL 68587 0 0
// if event = 111 then
57227: LD_VAR 0 1
57231: PUSH
57232: LD_INT 111
57234: EQUAL
57235: IFFALSE 57241
// MC_Defend ( ) ;
57237: CALL 68695 0 0
// if event = 112 then
57241: LD_VAR 0 1
57245: PUSH
57246: LD_INT 112
57248: EQUAL
57249: IFFALSE 57255
// MC_Research ( ) ;
57251: CALL 69300 0 0
// if event = 113 then
57255: LD_VAR 0 1
57259: PUSH
57260: LD_INT 113
57262: EQUAL
57263: IFFALSE 57269
// MC_MinesTrigger ( ) ;
57265: CALL 70414 0 0
// if event = 120 then
57269: LD_VAR 0 1
57273: PUSH
57274: LD_INT 120
57276: EQUAL
57277: IFFALSE 57283
// MC_RepairVehicle ( ) ;
57279: CALL 70513 0 0
// if event = 121 then
57283: LD_VAR 0 1
57287: PUSH
57288: LD_INT 121
57290: EQUAL
57291: IFFALSE 57297
// MC_TameApe ( ) ;
57293: CALL 71220 0 0
// if event = 122 then
57297: LD_VAR 0 1
57301: PUSH
57302: LD_INT 122
57304: EQUAL
57305: IFFALSE 57311
// MC_ChangeApeClass ( ) ;
57307: CALL 72049 0 0
// if event = 123 then
57311: LD_VAR 0 1
57315: PUSH
57316: LD_INT 123
57318: EQUAL
57319: IFFALSE 57325
// MC_Bazooka ( ) ;
57321: CALL 72699 0 0
// if event = 124 then
57325: LD_VAR 0 1
57329: PUSH
57330: LD_INT 124
57332: EQUAL
57333: IFFALSE 57339
// MC_TeleportExit ( ) ;
57335: CALL 72897 0 0
// if event = 125 then
57339: LD_VAR 0 1
57343: PUSH
57344: LD_INT 125
57346: EQUAL
57347: IFFALSE 57353
// MC_Deposits ( ) ;
57349: CALL 73544 0 0
// if event = 126 then
57353: LD_VAR 0 1
57357: PUSH
57358: LD_INT 126
57360: EQUAL
57361: IFFALSE 57367
// MC_RemoteDriver ( ) ;
57363: CALL 74169 0 0
// if event = 200 then
57367: LD_VAR 0 1
57371: PUSH
57372: LD_INT 200
57374: EQUAL
57375: IFFALSE 57381
// MC_Idle ( ) ;
57377: CALL 75902 0 0
// end ;
57381: PPOPN 1
57383: END
// export function MC_Reset ( base , tag ) ; var i ; begin
57384: LD_INT 0
57386: PPUSH
57387: PPUSH
// if not mc_bases [ base ] or not tag then
57388: LD_EXP 52
57392: PUSH
57393: LD_VAR 0 1
57397: ARRAY
57398: NOT
57399: PUSH
57400: LD_VAR 0 2
57404: NOT
57405: OR
57406: IFFALSE 57410
// exit ;
57408: GO 57474
// for i in mc_bases [ base ] union mc_ape [ base ] do
57410: LD_ADDR_VAR 0 4
57414: PUSH
57415: LD_EXP 52
57419: PUSH
57420: LD_VAR 0 1
57424: ARRAY
57425: PUSH
57426: LD_EXP 81
57430: PUSH
57431: LD_VAR 0 1
57435: ARRAY
57436: UNION
57437: PUSH
57438: FOR_IN
57439: IFFALSE 57472
// if GetTag ( i ) = tag then
57441: LD_VAR 0 4
57445: PPUSH
57446: CALL_OW 110
57450: PUSH
57451: LD_VAR 0 2
57455: EQUAL
57456: IFFALSE 57470
// SetTag ( i , 0 ) ;
57458: LD_VAR 0 4
57462: PPUSH
57463: LD_INT 0
57465: PPUSH
57466: CALL_OW 109
57470: GO 57438
57472: POP
57473: POP
// end ;
57474: LD_VAR 0 3
57478: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
57479: LD_INT 0
57481: PPUSH
57482: PPUSH
57483: PPUSH
57484: PPUSH
57485: PPUSH
57486: PPUSH
57487: PPUSH
57488: PPUSH
// if not mc_bases then
57489: LD_EXP 52
57493: NOT
57494: IFFALSE 57498
// exit ;
57496: GO 57956
// for i = 1 to mc_bases do
57498: LD_ADDR_VAR 0 2
57502: PUSH
57503: DOUBLE
57504: LD_INT 1
57506: DEC
57507: ST_TO_ADDR
57508: LD_EXP 52
57512: PUSH
57513: FOR_TO
57514: IFFALSE 57954
// begin tmp := MC_ClassCheckReq ( i ) ;
57516: LD_ADDR_VAR 0 4
57520: PUSH
57521: LD_VAR 0 2
57525: PPUSH
57526: CALL 57961 0 1
57530: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
57531: LD_ADDR_EXP 93
57535: PUSH
57536: LD_EXP 93
57540: PPUSH
57541: LD_VAR 0 2
57545: PPUSH
57546: LD_VAR 0 4
57550: PPUSH
57551: CALL_OW 1
57555: ST_TO_ADDR
// if not tmp then
57556: LD_VAR 0 4
57560: NOT
57561: IFFALSE 57565
// continue ;
57563: GO 57513
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
57565: LD_ADDR_VAR 0 6
57569: PUSH
57570: LD_EXP 52
57574: PUSH
57575: LD_VAR 0 2
57579: ARRAY
57580: PPUSH
57581: LD_INT 2
57583: PUSH
57584: LD_INT 30
57586: PUSH
57587: LD_INT 4
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 30
57596: PUSH
57597: LD_INT 5
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: LIST
57608: PPUSH
57609: CALL_OW 72
57613: PUSH
57614: LD_EXP 52
57618: PUSH
57619: LD_VAR 0 2
57623: ARRAY
57624: PPUSH
57625: LD_INT 2
57627: PUSH
57628: LD_INT 30
57630: PUSH
57631: LD_INT 0
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 30
57640: PUSH
57641: LD_INT 1
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: LIST
57652: PPUSH
57653: CALL_OW 72
57657: PUSH
57658: LD_EXP 52
57662: PUSH
57663: LD_VAR 0 2
57667: ARRAY
57668: PPUSH
57669: LD_INT 30
57671: PUSH
57672: LD_INT 3
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PPUSH
57679: CALL_OW 72
57683: PUSH
57684: LD_EXP 52
57688: PUSH
57689: LD_VAR 0 2
57693: ARRAY
57694: PPUSH
57695: LD_INT 2
57697: PUSH
57698: LD_INT 30
57700: PUSH
57701: LD_INT 6
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 30
57710: PUSH
57711: LD_INT 7
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 30
57720: PUSH
57721: LD_INT 8
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: PPUSH
57734: CALL_OW 72
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: ST_TO_ADDR
// for j = 1 to 4 do
57745: LD_ADDR_VAR 0 3
57749: PUSH
57750: DOUBLE
57751: LD_INT 1
57753: DEC
57754: ST_TO_ADDR
57755: LD_INT 4
57757: PUSH
57758: FOR_TO
57759: IFFALSE 57950
// begin if not tmp [ j ] then
57761: LD_VAR 0 4
57765: PUSH
57766: LD_VAR 0 3
57770: ARRAY
57771: NOT
57772: IFFALSE 57776
// continue ;
57774: GO 57758
// for p in tmp [ j ] do
57776: LD_ADDR_VAR 0 5
57780: PUSH
57781: LD_VAR 0 4
57785: PUSH
57786: LD_VAR 0 3
57790: ARRAY
57791: PUSH
57792: FOR_IN
57793: IFFALSE 57946
// begin if not b [ j ] then
57795: LD_VAR 0 6
57799: PUSH
57800: LD_VAR 0 3
57804: ARRAY
57805: NOT
57806: IFFALSE 57810
// break ;
57808: GO 57946
// e := 0 ;
57810: LD_ADDR_VAR 0 7
57814: PUSH
57815: LD_INT 0
57817: ST_TO_ADDR
// for k in b [ j ] do
57818: LD_ADDR_VAR 0 8
57822: PUSH
57823: LD_VAR 0 6
57827: PUSH
57828: LD_VAR 0 3
57832: ARRAY
57833: PUSH
57834: FOR_IN
57835: IFFALSE 57862
// if IsNotFull ( k ) then
57837: LD_VAR 0 8
57841: PPUSH
57842: CALL 14755 0 1
57846: IFFALSE 57860
// begin e := k ;
57848: LD_ADDR_VAR 0 7
57852: PUSH
57853: LD_VAR 0 8
57857: ST_TO_ADDR
// break ;
57858: GO 57862
// end ;
57860: GO 57834
57862: POP
57863: POP
// if e and not UnitGoingToBuilding ( p , e ) then
57864: LD_VAR 0 7
57868: PUSH
57869: LD_VAR 0 5
57873: PPUSH
57874: LD_VAR 0 7
57878: PPUSH
57879: CALL 51807 0 2
57883: NOT
57884: AND
57885: IFFALSE 57944
// begin if IsInUnit ( p ) then
57887: LD_VAR 0 5
57891: PPUSH
57892: CALL_OW 310
57896: IFFALSE 57907
// ComExitBuilding ( p ) ;
57898: LD_VAR 0 5
57902: PPUSH
57903: CALL_OW 122
// ComEnterUnit ( p , e ) ;
57907: LD_VAR 0 5
57911: PPUSH
57912: LD_VAR 0 7
57916: PPUSH
57917: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
57921: LD_VAR 0 5
57925: PPUSH
57926: LD_VAR 0 3
57930: PPUSH
57931: CALL_OW 183
// AddComExitBuilding ( p ) ;
57935: LD_VAR 0 5
57939: PPUSH
57940: CALL_OW 182
// end ; end ;
57944: GO 57792
57946: POP
57947: POP
// end ;
57948: GO 57758
57950: POP
57951: POP
// end ;
57952: GO 57513
57954: POP
57955: POP
// end ;
57956: LD_VAR 0 1
57960: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
57961: LD_INT 0
57963: PPUSH
57964: PPUSH
57965: PPUSH
57966: PPUSH
57967: PPUSH
57968: PPUSH
57969: PPUSH
57970: PPUSH
57971: PPUSH
57972: PPUSH
57973: PPUSH
57974: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
57975: LD_VAR 0 1
57979: NOT
57980: PUSH
57981: LD_EXP 52
57985: PUSH
57986: LD_VAR 0 1
57990: ARRAY
57991: NOT
57992: OR
57993: PUSH
57994: LD_EXP 52
57998: PUSH
57999: LD_VAR 0 1
58003: ARRAY
58004: PPUSH
58005: LD_INT 2
58007: PUSH
58008: LD_INT 30
58010: PUSH
58011: LD_INT 0
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 30
58020: PUSH
58021: LD_INT 1
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: LIST
58032: PPUSH
58033: CALL_OW 72
58037: NOT
58038: OR
58039: IFFALSE 58043
// exit ;
58041: GO 61537
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
58043: LD_ADDR_VAR 0 4
58047: PUSH
58048: LD_EXP 52
58052: PUSH
58053: LD_VAR 0 1
58057: ARRAY
58058: PPUSH
58059: LD_INT 2
58061: PUSH
58062: LD_INT 25
58064: PUSH
58065: LD_INT 1
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 25
58074: PUSH
58075: LD_INT 2
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 25
58084: PUSH
58085: LD_INT 3
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 25
58094: PUSH
58095: LD_INT 4
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 25
58104: PUSH
58105: LD_INT 5
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 25
58114: PUSH
58115: LD_INT 8
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 25
58124: PUSH
58125: LD_INT 9
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: PPUSH
58142: CALL_OW 72
58146: ST_TO_ADDR
// for i in tmp do
58147: LD_ADDR_VAR 0 3
58151: PUSH
58152: LD_VAR 0 4
58156: PUSH
58157: FOR_IN
58158: IFFALSE 58189
// if GetTag ( i ) then
58160: LD_VAR 0 3
58164: PPUSH
58165: CALL_OW 110
58169: IFFALSE 58187
// tmp := tmp diff i ;
58171: LD_ADDR_VAR 0 4
58175: PUSH
58176: LD_VAR 0 4
58180: PUSH
58181: LD_VAR 0 3
58185: DIFF
58186: ST_TO_ADDR
58187: GO 58157
58189: POP
58190: POP
// if not tmp then
58191: LD_VAR 0 4
58195: NOT
58196: IFFALSE 58200
// exit ;
58198: GO 61537
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
58200: LD_ADDR_VAR 0 5
58204: PUSH
58205: LD_EXP 52
58209: PUSH
58210: LD_VAR 0 1
58214: ARRAY
58215: PPUSH
58216: LD_INT 2
58218: PUSH
58219: LD_INT 25
58221: PUSH
58222: LD_INT 1
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 25
58231: PUSH
58232: LD_INT 5
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 25
58241: PUSH
58242: LD_INT 8
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 25
58251: PUSH
58252: LD_INT 9
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: PPUSH
58266: CALL_OW 72
58270: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
58271: LD_ADDR_VAR 0 6
58275: PUSH
58276: LD_EXP 52
58280: PUSH
58281: LD_VAR 0 1
58285: ARRAY
58286: PPUSH
58287: LD_INT 25
58289: PUSH
58290: LD_INT 2
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PPUSH
58297: CALL_OW 72
58301: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
58302: LD_ADDR_VAR 0 7
58306: PUSH
58307: LD_EXP 52
58311: PUSH
58312: LD_VAR 0 1
58316: ARRAY
58317: PPUSH
58318: LD_INT 25
58320: PUSH
58321: LD_INT 3
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PPUSH
58328: CALL_OW 72
58332: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
58333: LD_ADDR_VAR 0 8
58337: PUSH
58338: LD_EXP 52
58342: PUSH
58343: LD_VAR 0 1
58347: ARRAY
58348: PPUSH
58349: LD_INT 25
58351: PUSH
58352: LD_INT 4
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 24
58361: PUSH
58362: LD_INT 251
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PPUSH
58373: CALL_OW 72
58377: ST_TO_ADDR
// if mc_scan [ base ] then
58378: LD_EXP 75
58382: PUSH
58383: LD_VAR 0 1
58387: ARRAY
58388: IFFALSE 58849
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
58390: LD_ADDR_EXP 94
58394: PUSH
58395: LD_EXP 94
58399: PPUSH
58400: LD_VAR 0 1
58404: PPUSH
58405: LD_INT 4
58407: PPUSH
58408: CALL_OW 1
58412: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
58413: LD_ADDR_VAR 0 12
58417: PUSH
58418: LD_EXP 52
58422: PUSH
58423: LD_VAR 0 1
58427: ARRAY
58428: PPUSH
58429: LD_INT 2
58431: PUSH
58432: LD_INT 30
58434: PUSH
58435: LD_INT 4
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 30
58444: PUSH
58445: LD_INT 5
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: LIST
58456: PPUSH
58457: CALL_OW 72
58461: ST_TO_ADDR
// if not b then
58462: LD_VAR 0 12
58466: NOT
58467: IFFALSE 58471
// exit ;
58469: GO 61537
// p := [ ] ;
58471: LD_ADDR_VAR 0 11
58475: PUSH
58476: EMPTY
58477: ST_TO_ADDR
// if sci >= 2 then
58478: LD_VAR 0 8
58482: PUSH
58483: LD_INT 2
58485: GREATEREQUAL
58486: IFFALSE 58517
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
58488: LD_ADDR_VAR 0 8
58492: PUSH
58493: LD_VAR 0 8
58497: PUSH
58498: LD_INT 1
58500: ARRAY
58501: PUSH
58502: LD_VAR 0 8
58506: PUSH
58507: LD_INT 2
58509: ARRAY
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: ST_TO_ADDR
58515: GO 58578
// if sci = 1 then
58517: LD_VAR 0 8
58521: PUSH
58522: LD_INT 1
58524: EQUAL
58525: IFFALSE 58546
// sci := [ sci [ 1 ] ] else
58527: LD_ADDR_VAR 0 8
58531: PUSH
58532: LD_VAR 0 8
58536: PUSH
58537: LD_INT 1
58539: ARRAY
58540: PUSH
58541: EMPTY
58542: LIST
58543: ST_TO_ADDR
58544: GO 58578
// if sci = 0 then
58546: LD_VAR 0 8
58550: PUSH
58551: LD_INT 0
58553: EQUAL
58554: IFFALSE 58578
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
58556: LD_ADDR_VAR 0 11
58560: PUSH
58561: LD_VAR 0 4
58565: PPUSH
58566: LD_INT 4
58568: PPUSH
58569: CALL 51670 0 2
58573: PUSH
58574: LD_INT 1
58576: ARRAY
58577: ST_TO_ADDR
// if eng > 4 then
58578: LD_VAR 0 6
58582: PUSH
58583: LD_INT 4
58585: GREATER
58586: IFFALSE 58632
// for i = eng downto 4 do
58588: LD_ADDR_VAR 0 3
58592: PUSH
58593: DOUBLE
58594: LD_VAR 0 6
58598: INC
58599: ST_TO_ADDR
58600: LD_INT 4
58602: PUSH
58603: FOR_DOWNTO
58604: IFFALSE 58630
// eng := eng diff eng [ i ] ;
58606: LD_ADDR_VAR 0 6
58610: PUSH
58611: LD_VAR 0 6
58615: PUSH
58616: LD_VAR 0 6
58620: PUSH
58621: LD_VAR 0 3
58625: ARRAY
58626: DIFF
58627: ST_TO_ADDR
58628: GO 58603
58630: POP
58631: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
58632: LD_ADDR_VAR 0 4
58636: PUSH
58637: LD_VAR 0 4
58641: PUSH
58642: LD_VAR 0 5
58646: PUSH
58647: LD_VAR 0 6
58651: UNION
58652: PUSH
58653: LD_VAR 0 7
58657: UNION
58658: PUSH
58659: LD_VAR 0 8
58663: UNION
58664: DIFF
58665: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
58666: LD_ADDR_VAR 0 13
58670: PUSH
58671: LD_EXP 52
58675: PUSH
58676: LD_VAR 0 1
58680: ARRAY
58681: PPUSH
58682: LD_INT 2
58684: PUSH
58685: LD_INT 30
58687: PUSH
58688: LD_INT 32
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 30
58697: PUSH
58698: LD_INT 31
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: LIST
58709: PPUSH
58710: CALL_OW 72
58714: PUSH
58715: LD_EXP 52
58719: PUSH
58720: LD_VAR 0 1
58724: ARRAY
58725: PPUSH
58726: LD_INT 2
58728: PUSH
58729: LD_INT 30
58731: PUSH
58732: LD_INT 4
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 30
58741: PUSH
58742: LD_INT 5
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: LIST
58753: PPUSH
58754: CALL_OW 72
58758: PUSH
58759: LD_INT 6
58761: MUL
58762: PLUS
58763: ST_TO_ADDR
// if bcount < tmp then
58764: LD_VAR 0 13
58768: PUSH
58769: LD_VAR 0 4
58773: LESS
58774: IFFALSE 58820
// for i = tmp downto bcount do
58776: LD_ADDR_VAR 0 3
58780: PUSH
58781: DOUBLE
58782: LD_VAR 0 4
58786: INC
58787: ST_TO_ADDR
58788: LD_VAR 0 13
58792: PUSH
58793: FOR_DOWNTO
58794: IFFALSE 58818
// tmp := Delete ( tmp , tmp ) ;
58796: LD_ADDR_VAR 0 4
58800: PUSH
58801: LD_VAR 0 4
58805: PPUSH
58806: LD_VAR 0 4
58810: PPUSH
58811: CALL_OW 3
58815: ST_TO_ADDR
58816: GO 58793
58818: POP
58819: POP
// result := [ tmp , 0 , 0 , p ] ;
58820: LD_ADDR_VAR 0 2
58824: PUSH
58825: LD_VAR 0 4
58829: PUSH
58830: LD_INT 0
58832: PUSH
58833: LD_INT 0
58835: PUSH
58836: LD_VAR 0 11
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: ST_TO_ADDR
// exit ;
58847: GO 61537
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
58849: LD_EXP 52
58853: PUSH
58854: LD_VAR 0 1
58858: ARRAY
58859: PPUSH
58860: LD_INT 2
58862: PUSH
58863: LD_INT 30
58865: PUSH
58866: LD_INT 6
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 30
58875: PUSH
58876: LD_INT 7
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 30
58885: PUSH
58886: LD_INT 8
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: PPUSH
58899: CALL_OW 72
58903: NOT
58904: PUSH
58905: LD_EXP 52
58909: PUSH
58910: LD_VAR 0 1
58914: ARRAY
58915: PPUSH
58916: LD_INT 30
58918: PUSH
58919: LD_INT 3
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PPUSH
58926: CALL_OW 72
58930: NOT
58931: AND
58932: IFFALSE 59004
// begin if eng = tmp then
58934: LD_VAR 0 6
58938: PUSH
58939: LD_VAR 0 4
58943: EQUAL
58944: IFFALSE 58948
// exit ;
58946: GO 61537
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
58948: LD_ADDR_EXP 94
58952: PUSH
58953: LD_EXP 94
58957: PPUSH
58958: LD_VAR 0 1
58962: PPUSH
58963: LD_INT 1
58965: PPUSH
58966: CALL_OW 1
58970: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
58971: LD_ADDR_VAR 0 2
58975: PUSH
58976: LD_INT 0
58978: PUSH
58979: LD_VAR 0 4
58983: PUSH
58984: LD_VAR 0 6
58988: DIFF
58989: PUSH
58990: LD_INT 0
58992: PUSH
58993: LD_INT 0
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: ST_TO_ADDR
// exit ;
59002: GO 61537
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
59004: LD_EXP 79
59008: PUSH
59009: LD_EXP 78
59013: PUSH
59014: LD_VAR 0 1
59018: ARRAY
59019: ARRAY
59020: PUSH
59021: LD_EXP 52
59025: PUSH
59026: LD_VAR 0 1
59030: ARRAY
59031: PPUSH
59032: LD_INT 2
59034: PUSH
59035: LD_INT 30
59037: PUSH
59038: LD_INT 6
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 30
59047: PUSH
59048: LD_INT 7
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 30
59057: PUSH
59058: LD_INT 8
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: PPUSH
59071: CALL_OW 72
59075: AND
59076: PUSH
59077: LD_EXP 52
59081: PUSH
59082: LD_VAR 0 1
59086: ARRAY
59087: PPUSH
59088: LD_INT 30
59090: PUSH
59091: LD_INT 3
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PPUSH
59098: CALL_OW 72
59102: NOT
59103: AND
59104: IFFALSE 59318
// begin if sci >= 6 then
59106: LD_VAR 0 8
59110: PUSH
59111: LD_INT 6
59113: GREATEREQUAL
59114: IFFALSE 59118
// exit ;
59116: GO 61537
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
59118: LD_ADDR_EXP 94
59122: PUSH
59123: LD_EXP 94
59127: PPUSH
59128: LD_VAR 0 1
59132: PPUSH
59133: LD_INT 2
59135: PPUSH
59136: CALL_OW 1
59140: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
59141: LD_ADDR_VAR 0 9
59145: PUSH
59146: LD_VAR 0 4
59150: PUSH
59151: LD_VAR 0 8
59155: DIFF
59156: PPUSH
59157: LD_INT 4
59159: PPUSH
59160: CALL 51670 0 2
59164: ST_TO_ADDR
// p := [ ] ;
59165: LD_ADDR_VAR 0 11
59169: PUSH
59170: EMPTY
59171: ST_TO_ADDR
// if sci < 6 and sort > 6 then
59172: LD_VAR 0 8
59176: PUSH
59177: LD_INT 6
59179: LESS
59180: PUSH
59181: LD_VAR 0 9
59185: PUSH
59186: LD_INT 6
59188: GREATER
59189: AND
59190: IFFALSE 59271
// begin for i = 1 to 6 - sci do
59192: LD_ADDR_VAR 0 3
59196: PUSH
59197: DOUBLE
59198: LD_INT 1
59200: DEC
59201: ST_TO_ADDR
59202: LD_INT 6
59204: PUSH
59205: LD_VAR 0 8
59209: MINUS
59210: PUSH
59211: FOR_TO
59212: IFFALSE 59267
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
59214: LD_ADDR_VAR 0 11
59218: PUSH
59219: LD_VAR 0 11
59223: PPUSH
59224: LD_VAR 0 11
59228: PUSH
59229: LD_INT 1
59231: PLUS
59232: PPUSH
59233: LD_VAR 0 9
59237: PUSH
59238: LD_INT 1
59240: ARRAY
59241: PPUSH
59242: CALL_OW 2
59246: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
59247: LD_ADDR_VAR 0 9
59251: PUSH
59252: LD_VAR 0 9
59256: PPUSH
59257: LD_INT 1
59259: PPUSH
59260: CALL_OW 3
59264: ST_TO_ADDR
// end ;
59265: GO 59211
59267: POP
59268: POP
// end else
59269: GO 59291
// if sort then
59271: LD_VAR 0 9
59275: IFFALSE 59291
// p := sort [ 1 ] ;
59277: LD_ADDR_VAR 0 11
59281: PUSH
59282: LD_VAR 0 9
59286: PUSH
59287: LD_INT 1
59289: ARRAY
59290: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
59291: LD_ADDR_VAR 0 2
59295: PUSH
59296: LD_INT 0
59298: PUSH
59299: LD_INT 0
59301: PUSH
59302: LD_INT 0
59304: PUSH
59305: LD_VAR 0 11
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: ST_TO_ADDR
// exit ;
59316: GO 61537
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
59318: LD_EXP 79
59322: PUSH
59323: LD_EXP 78
59327: PUSH
59328: LD_VAR 0 1
59332: ARRAY
59333: ARRAY
59334: PUSH
59335: LD_EXP 52
59339: PUSH
59340: LD_VAR 0 1
59344: ARRAY
59345: PPUSH
59346: LD_INT 2
59348: PUSH
59349: LD_INT 30
59351: PUSH
59352: LD_INT 6
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 30
59361: PUSH
59362: LD_INT 7
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 30
59371: PUSH
59372: LD_INT 8
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: PPUSH
59385: CALL_OW 72
59389: AND
59390: PUSH
59391: LD_EXP 52
59395: PUSH
59396: LD_VAR 0 1
59400: ARRAY
59401: PPUSH
59402: LD_INT 30
59404: PUSH
59405: LD_INT 3
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PPUSH
59412: CALL_OW 72
59416: AND
59417: IFFALSE 60151
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
59419: LD_ADDR_EXP 94
59423: PUSH
59424: LD_EXP 94
59428: PPUSH
59429: LD_VAR 0 1
59433: PPUSH
59434: LD_INT 3
59436: PPUSH
59437: CALL_OW 1
59441: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
59442: LD_ADDR_VAR 0 2
59446: PUSH
59447: LD_INT 0
59449: PUSH
59450: LD_INT 0
59452: PUSH
59453: LD_INT 0
59455: PUSH
59456: LD_INT 0
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: ST_TO_ADDR
// if not eng then
59465: LD_VAR 0 6
59469: NOT
59470: IFFALSE 59533
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
59472: LD_ADDR_VAR 0 11
59476: PUSH
59477: LD_VAR 0 4
59481: PPUSH
59482: LD_INT 2
59484: PPUSH
59485: CALL 51670 0 2
59489: PUSH
59490: LD_INT 1
59492: ARRAY
59493: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
59494: LD_ADDR_VAR 0 2
59498: PUSH
59499: LD_VAR 0 2
59503: PPUSH
59504: LD_INT 2
59506: PPUSH
59507: LD_VAR 0 11
59511: PPUSH
59512: CALL_OW 1
59516: ST_TO_ADDR
// tmp := tmp diff p ;
59517: LD_ADDR_VAR 0 4
59521: PUSH
59522: LD_VAR 0 4
59526: PUSH
59527: LD_VAR 0 11
59531: DIFF
59532: ST_TO_ADDR
// end ; if tmp and sci < 6 then
59533: LD_VAR 0 4
59537: PUSH
59538: LD_VAR 0 8
59542: PUSH
59543: LD_INT 6
59545: LESS
59546: AND
59547: IFFALSE 59735
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
59549: LD_ADDR_VAR 0 9
59553: PUSH
59554: LD_VAR 0 4
59558: PUSH
59559: LD_VAR 0 8
59563: PUSH
59564: LD_VAR 0 7
59568: UNION
59569: DIFF
59570: PPUSH
59571: LD_INT 4
59573: PPUSH
59574: CALL 51670 0 2
59578: ST_TO_ADDR
// p := [ ] ;
59579: LD_ADDR_VAR 0 11
59583: PUSH
59584: EMPTY
59585: ST_TO_ADDR
// if sort then
59586: LD_VAR 0 9
59590: IFFALSE 59706
// for i = 1 to 6 - sci do
59592: LD_ADDR_VAR 0 3
59596: PUSH
59597: DOUBLE
59598: LD_INT 1
59600: DEC
59601: ST_TO_ADDR
59602: LD_INT 6
59604: PUSH
59605: LD_VAR 0 8
59609: MINUS
59610: PUSH
59611: FOR_TO
59612: IFFALSE 59704
// begin if i = sort then
59614: LD_VAR 0 3
59618: PUSH
59619: LD_VAR 0 9
59623: EQUAL
59624: IFFALSE 59628
// break ;
59626: GO 59704
// if GetClass ( i ) = 4 then
59628: LD_VAR 0 3
59632: PPUSH
59633: CALL_OW 257
59637: PUSH
59638: LD_INT 4
59640: EQUAL
59641: IFFALSE 59645
// continue ;
59643: GO 59611
// p := Insert ( p , p + 1 , sort [ i ] ) ;
59645: LD_ADDR_VAR 0 11
59649: PUSH
59650: LD_VAR 0 11
59654: PPUSH
59655: LD_VAR 0 11
59659: PUSH
59660: LD_INT 1
59662: PLUS
59663: PPUSH
59664: LD_VAR 0 9
59668: PUSH
59669: LD_VAR 0 3
59673: ARRAY
59674: PPUSH
59675: CALL_OW 2
59679: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
59680: LD_ADDR_VAR 0 4
59684: PUSH
59685: LD_VAR 0 4
59689: PUSH
59690: LD_VAR 0 9
59694: PUSH
59695: LD_VAR 0 3
59699: ARRAY
59700: DIFF
59701: ST_TO_ADDR
// end ;
59702: GO 59611
59704: POP
59705: POP
// if p then
59706: LD_VAR 0 11
59710: IFFALSE 59735
// result := Replace ( result , 4 , p ) ;
59712: LD_ADDR_VAR 0 2
59716: PUSH
59717: LD_VAR 0 2
59721: PPUSH
59722: LD_INT 4
59724: PPUSH
59725: LD_VAR 0 11
59729: PPUSH
59730: CALL_OW 1
59734: ST_TO_ADDR
// end ; if tmp and mech < 6 then
59735: LD_VAR 0 4
59739: PUSH
59740: LD_VAR 0 7
59744: PUSH
59745: LD_INT 6
59747: LESS
59748: AND
59749: IFFALSE 59937
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
59751: LD_ADDR_VAR 0 9
59755: PUSH
59756: LD_VAR 0 4
59760: PUSH
59761: LD_VAR 0 8
59765: PUSH
59766: LD_VAR 0 7
59770: UNION
59771: DIFF
59772: PPUSH
59773: LD_INT 3
59775: PPUSH
59776: CALL 51670 0 2
59780: ST_TO_ADDR
// p := [ ] ;
59781: LD_ADDR_VAR 0 11
59785: PUSH
59786: EMPTY
59787: ST_TO_ADDR
// if sort then
59788: LD_VAR 0 9
59792: IFFALSE 59908
// for i = 1 to 6 - mech do
59794: LD_ADDR_VAR 0 3
59798: PUSH
59799: DOUBLE
59800: LD_INT 1
59802: DEC
59803: ST_TO_ADDR
59804: LD_INT 6
59806: PUSH
59807: LD_VAR 0 7
59811: MINUS
59812: PUSH
59813: FOR_TO
59814: IFFALSE 59906
// begin if i = sort then
59816: LD_VAR 0 3
59820: PUSH
59821: LD_VAR 0 9
59825: EQUAL
59826: IFFALSE 59830
// break ;
59828: GO 59906
// if GetClass ( i ) = 3 then
59830: LD_VAR 0 3
59834: PPUSH
59835: CALL_OW 257
59839: PUSH
59840: LD_INT 3
59842: EQUAL
59843: IFFALSE 59847
// continue ;
59845: GO 59813
// p := Insert ( p , p + 1 , sort [ i ] ) ;
59847: LD_ADDR_VAR 0 11
59851: PUSH
59852: LD_VAR 0 11
59856: PPUSH
59857: LD_VAR 0 11
59861: PUSH
59862: LD_INT 1
59864: PLUS
59865: PPUSH
59866: LD_VAR 0 9
59870: PUSH
59871: LD_VAR 0 3
59875: ARRAY
59876: PPUSH
59877: CALL_OW 2
59881: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
59882: LD_ADDR_VAR 0 4
59886: PUSH
59887: LD_VAR 0 4
59891: PUSH
59892: LD_VAR 0 9
59896: PUSH
59897: LD_VAR 0 3
59901: ARRAY
59902: DIFF
59903: ST_TO_ADDR
// end ;
59904: GO 59813
59906: POP
59907: POP
// if p then
59908: LD_VAR 0 11
59912: IFFALSE 59937
// result := Replace ( result , 3 , p ) ;
59914: LD_ADDR_VAR 0 2
59918: PUSH
59919: LD_VAR 0 2
59923: PPUSH
59924: LD_INT 3
59926: PPUSH
59927: LD_VAR 0 11
59931: PPUSH
59932: CALL_OW 1
59936: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
59937: LD_VAR 0 4
59941: PUSH
59942: LD_INT 6
59944: GREATER
59945: PUSH
59946: LD_VAR 0 6
59950: PUSH
59951: LD_INT 6
59953: LESS
59954: AND
59955: IFFALSE 60149
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
59957: LD_ADDR_VAR 0 9
59961: PUSH
59962: LD_VAR 0 4
59966: PUSH
59967: LD_VAR 0 8
59971: PUSH
59972: LD_VAR 0 7
59976: UNION
59977: PUSH
59978: LD_VAR 0 6
59982: UNION
59983: DIFF
59984: PPUSH
59985: LD_INT 2
59987: PPUSH
59988: CALL 51670 0 2
59992: ST_TO_ADDR
// p := [ ] ;
59993: LD_ADDR_VAR 0 11
59997: PUSH
59998: EMPTY
59999: ST_TO_ADDR
// if sort then
60000: LD_VAR 0 9
60004: IFFALSE 60120
// for i = 1 to 6 - eng do
60006: LD_ADDR_VAR 0 3
60010: PUSH
60011: DOUBLE
60012: LD_INT 1
60014: DEC
60015: ST_TO_ADDR
60016: LD_INT 6
60018: PUSH
60019: LD_VAR 0 6
60023: MINUS
60024: PUSH
60025: FOR_TO
60026: IFFALSE 60118
// begin if i = sort then
60028: LD_VAR 0 3
60032: PUSH
60033: LD_VAR 0 9
60037: EQUAL
60038: IFFALSE 60042
// break ;
60040: GO 60118
// if GetClass ( i ) = 2 then
60042: LD_VAR 0 3
60046: PPUSH
60047: CALL_OW 257
60051: PUSH
60052: LD_INT 2
60054: EQUAL
60055: IFFALSE 60059
// continue ;
60057: GO 60025
// p := Insert ( p , p + 1 , sort [ i ] ) ;
60059: LD_ADDR_VAR 0 11
60063: PUSH
60064: LD_VAR 0 11
60068: PPUSH
60069: LD_VAR 0 11
60073: PUSH
60074: LD_INT 1
60076: PLUS
60077: PPUSH
60078: LD_VAR 0 9
60082: PUSH
60083: LD_VAR 0 3
60087: ARRAY
60088: PPUSH
60089: CALL_OW 2
60093: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
60094: LD_ADDR_VAR 0 4
60098: PUSH
60099: LD_VAR 0 4
60103: PUSH
60104: LD_VAR 0 9
60108: PUSH
60109: LD_VAR 0 3
60113: ARRAY
60114: DIFF
60115: ST_TO_ADDR
// end ;
60116: GO 60025
60118: POP
60119: POP
// if p then
60120: LD_VAR 0 11
60124: IFFALSE 60149
// result := Replace ( result , 2 , p ) ;
60126: LD_ADDR_VAR 0 2
60130: PUSH
60131: LD_VAR 0 2
60135: PPUSH
60136: LD_INT 2
60138: PPUSH
60139: LD_VAR 0 11
60143: PPUSH
60144: CALL_OW 1
60148: ST_TO_ADDR
// end ; exit ;
60149: GO 61537
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
60151: LD_EXP 79
60155: PUSH
60156: LD_EXP 78
60160: PUSH
60161: LD_VAR 0 1
60165: ARRAY
60166: ARRAY
60167: NOT
60168: PUSH
60169: LD_EXP 52
60173: PUSH
60174: LD_VAR 0 1
60178: ARRAY
60179: PPUSH
60180: LD_INT 30
60182: PUSH
60183: LD_INT 3
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PPUSH
60190: CALL_OW 72
60194: AND
60195: PUSH
60196: LD_EXP 57
60200: PUSH
60201: LD_VAR 0 1
60205: ARRAY
60206: AND
60207: IFFALSE 60815
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
60209: LD_ADDR_EXP 94
60213: PUSH
60214: LD_EXP 94
60218: PPUSH
60219: LD_VAR 0 1
60223: PPUSH
60224: LD_INT 5
60226: PPUSH
60227: CALL_OW 1
60231: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
60232: LD_ADDR_VAR 0 2
60236: PUSH
60237: LD_INT 0
60239: PUSH
60240: LD_INT 0
60242: PUSH
60243: LD_INT 0
60245: PUSH
60246: LD_INT 0
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: ST_TO_ADDR
// if sci > 1 then
60255: LD_VAR 0 8
60259: PUSH
60260: LD_INT 1
60262: GREATER
60263: IFFALSE 60291
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
60265: LD_ADDR_VAR 0 4
60269: PUSH
60270: LD_VAR 0 4
60274: PUSH
60275: LD_VAR 0 8
60279: PUSH
60280: LD_VAR 0 8
60284: PUSH
60285: LD_INT 1
60287: ARRAY
60288: DIFF
60289: DIFF
60290: ST_TO_ADDR
// if tmp and not sci then
60291: LD_VAR 0 4
60295: PUSH
60296: LD_VAR 0 8
60300: NOT
60301: AND
60302: IFFALSE 60371
// begin sort := SortBySkill ( tmp , 4 ) ;
60304: LD_ADDR_VAR 0 9
60308: PUSH
60309: LD_VAR 0 4
60313: PPUSH
60314: LD_INT 4
60316: PPUSH
60317: CALL 51670 0 2
60321: ST_TO_ADDR
// if sort then
60322: LD_VAR 0 9
60326: IFFALSE 60342
// p := sort [ 1 ] ;
60328: LD_ADDR_VAR 0 11
60332: PUSH
60333: LD_VAR 0 9
60337: PUSH
60338: LD_INT 1
60340: ARRAY
60341: ST_TO_ADDR
// if p then
60342: LD_VAR 0 11
60346: IFFALSE 60371
// result := Replace ( result , 4 , p ) ;
60348: LD_ADDR_VAR 0 2
60352: PUSH
60353: LD_VAR 0 2
60357: PPUSH
60358: LD_INT 4
60360: PPUSH
60361: LD_VAR 0 11
60365: PPUSH
60366: CALL_OW 1
60370: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
60371: LD_ADDR_VAR 0 4
60375: PUSH
60376: LD_VAR 0 4
60380: PUSH
60381: LD_VAR 0 7
60385: DIFF
60386: ST_TO_ADDR
// if tmp and mech < 6 then
60387: LD_VAR 0 4
60391: PUSH
60392: LD_VAR 0 7
60396: PUSH
60397: LD_INT 6
60399: LESS
60400: AND
60401: IFFALSE 60589
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
60403: LD_ADDR_VAR 0 9
60407: PUSH
60408: LD_VAR 0 4
60412: PUSH
60413: LD_VAR 0 8
60417: PUSH
60418: LD_VAR 0 7
60422: UNION
60423: DIFF
60424: PPUSH
60425: LD_INT 3
60427: PPUSH
60428: CALL 51670 0 2
60432: ST_TO_ADDR
// p := [ ] ;
60433: LD_ADDR_VAR 0 11
60437: PUSH
60438: EMPTY
60439: ST_TO_ADDR
// if sort then
60440: LD_VAR 0 9
60444: IFFALSE 60560
// for i = 1 to 6 - mech do
60446: LD_ADDR_VAR 0 3
60450: PUSH
60451: DOUBLE
60452: LD_INT 1
60454: DEC
60455: ST_TO_ADDR
60456: LD_INT 6
60458: PUSH
60459: LD_VAR 0 7
60463: MINUS
60464: PUSH
60465: FOR_TO
60466: IFFALSE 60558
// begin if i = sort then
60468: LD_VAR 0 3
60472: PUSH
60473: LD_VAR 0 9
60477: EQUAL
60478: IFFALSE 60482
// break ;
60480: GO 60558
// if GetClass ( i ) = 3 then
60482: LD_VAR 0 3
60486: PPUSH
60487: CALL_OW 257
60491: PUSH
60492: LD_INT 3
60494: EQUAL
60495: IFFALSE 60499
// continue ;
60497: GO 60465
// p := Insert ( p , p + 1 , sort [ i ] ) ;
60499: LD_ADDR_VAR 0 11
60503: PUSH
60504: LD_VAR 0 11
60508: PPUSH
60509: LD_VAR 0 11
60513: PUSH
60514: LD_INT 1
60516: PLUS
60517: PPUSH
60518: LD_VAR 0 9
60522: PUSH
60523: LD_VAR 0 3
60527: ARRAY
60528: PPUSH
60529: CALL_OW 2
60533: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
60534: LD_ADDR_VAR 0 4
60538: PUSH
60539: LD_VAR 0 4
60543: PUSH
60544: LD_VAR 0 9
60548: PUSH
60549: LD_VAR 0 3
60553: ARRAY
60554: DIFF
60555: ST_TO_ADDR
// end ;
60556: GO 60465
60558: POP
60559: POP
// if p then
60560: LD_VAR 0 11
60564: IFFALSE 60589
// result := Replace ( result , 3 , p ) ;
60566: LD_ADDR_VAR 0 2
60570: PUSH
60571: LD_VAR 0 2
60575: PPUSH
60576: LD_INT 3
60578: PPUSH
60579: LD_VAR 0 11
60583: PPUSH
60584: CALL_OW 1
60588: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
60589: LD_ADDR_VAR 0 4
60593: PUSH
60594: LD_VAR 0 4
60598: PUSH
60599: LD_VAR 0 6
60603: DIFF
60604: ST_TO_ADDR
// if tmp and eng < 6 then
60605: LD_VAR 0 4
60609: PUSH
60610: LD_VAR 0 6
60614: PUSH
60615: LD_INT 6
60617: LESS
60618: AND
60619: IFFALSE 60813
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
60621: LD_ADDR_VAR 0 9
60625: PUSH
60626: LD_VAR 0 4
60630: PUSH
60631: LD_VAR 0 8
60635: PUSH
60636: LD_VAR 0 7
60640: UNION
60641: PUSH
60642: LD_VAR 0 6
60646: UNION
60647: DIFF
60648: PPUSH
60649: LD_INT 2
60651: PPUSH
60652: CALL 51670 0 2
60656: ST_TO_ADDR
// p := [ ] ;
60657: LD_ADDR_VAR 0 11
60661: PUSH
60662: EMPTY
60663: ST_TO_ADDR
// if sort then
60664: LD_VAR 0 9
60668: IFFALSE 60784
// for i = 1 to 6 - eng do
60670: LD_ADDR_VAR 0 3
60674: PUSH
60675: DOUBLE
60676: LD_INT 1
60678: DEC
60679: ST_TO_ADDR
60680: LD_INT 6
60682: PUSH
60683: LD_VAR 0 6
60687: MINUS
60688: PUSH
60689: FOR_TO
60690: IFFALSE 60782
// begin if i = sort then
60692: LD_VAR 0 3
60696: PUSH
60697: LD_VAR 0 9
60701: EQUAL
60702: IFFALSE 60706
// break ;
60704: GO 60782
// if GetClass ( i ) = 2 then
60706: LD_VAR 0 3
60710: PPUSH
60711: CALL_OW 257
60715: PUSH
60716: LD_INT 2
60718: EQUAL
60719: IFFALSE 60723
// continue ;
60721: GO 60689
// p := Insert ( p , p + 1 , sort [ i ] ) ;
60723: LD_ADDR_VAR 0 11
60727: PUSH
60728: LD_VAR 0 11
60732: PPUSH
60733: LD_VAR 0 11
60737: PUSH
60738: LD_INT 1
60740: PLUS
60741: PPUSH
60742: LD_VAR 0 9
60746: PUSH
60747: LD_VAR 0 3
60751: ARRAY
60752: PPUSH
60753: CALL_OW 2
60757: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
60758: LD_ADDR_VAR 0 4
60762: PUSH
60763: LD_VAR 0 4
60767: PUSH
60768: LD_VAR 0 9
60772: PUSH
60773: LD_VAR 0 3
60777: ARRAY
60778: DIFF
60779: ST_TO_ADDR
// end ;
60780: GO 60689
60782: POP
60783: POP
// if p then
60784: LD_VAR 0 11
60788: IFFALSE 60813
// result := Replace ( result , 2 , p ) ;
60790: LD_ADDR_VAR 0 2
60794: PUSH
60795: LD_VAR 0 2
60799: PPUSH
60800: LD_INT 2
60802: PPUSH
60803: LD_VAR 0 11
60807: PPUSH
60808: CALL_OW 1
60812: ST_TO_ADDR
// end ; exit ;
60813: GO 61537
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
60815: LD_EXP 79
60819: PUSH
60820: LD_EXP 78
60824: PUSH
60825: LD_VAR 0 1
60829: ARRAY
60830: ARRAY
60831: NOT
60832: PUSH
60833: LD_EXP 52
60837: PUSH
60838: LD_VAR 0 1
60842: ARRAY
60843: PPUSH
60844: LD_INT 30
60846: PUSH
60847: LD_INT 3
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PPUSH
60854: CALL_OW 72
60858: AND
60859: PUSH
60860: LD_EXP 57
60864: PUSH
60865: LD_VAR 0 1
60869: ARRAY
60870: NOT
60871: AND
60872: IFFALSE 61537
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
60874: LD_ADDR_EXP 94
60878: PUSH
60879: LD_EXP 94
60883: PPUSH
60884: LD_VAR 0 1
60888: PPUSH
60889: LD_INT 6
60891: PPUSH
60892: CALL_OW 1
60896: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
60897: LD_ADDR_VAR 0 2
60901: PUSH
60902: LD_INT 0
60904: PUSH
60905: LD_INT 0
60907: PUSH
60908: LD_INT 0
60910: PUSH
60911: LD_INT 0
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: ST_TO_ADDR
// if sci >= 1 then
60920: LD_VAR 0 8
60924: PUSH
60925: LD_INT 1
60927: GREATEREQUAL
60928: IFFALSE 60950
// tmp := tmp diff sci [ 1 ] ;
60930: LD_ADDR_VAR 0 4
60934: PUSH
60935: LD_VAR 0 4
60939: PUSH
60940: LD_VAR 0 8
60944: PUSH
60945: LD_INT 1
60947: ARRAY
60948: DIFF
60949: ST_TO_ADDR
// if tmp and not sci then
60950: LD_VAR 0 4
60954: PUSH
60955: LD_VAR 0 8
60959: NOT
60960: AND
60961: IFFALSE 61030
// begin sort := SortBySkill ( tmp , 4 ) ;
60963: LD_ADDR_VAR 0 9
60967: PUSH
60968: LD_VAR 0 4
60972: PPUSH
60973: LD_INT 4
60975: PPUSH
60976: CALL 51670 0 2
60980: ST_TO_ADDR
// if sort then
60981: LD_VAR 0 9
60985: IFFALSE 61001
// p := sort [ 1 ] ;
60987: LD_ADDR_VAR 0 11
60991: PUSH
60992: LD_VAR 0 9
60996: PUSH
60997: LD_INT 1
60999: ARRAY
61000: ST_TO_ADDR
// if p then
61001: LD_VAR 0 11
61005: IFFALSE 61030
// result := Replace ( result , 4 , p ) ;
61007: LD_ADDR_VAR 0 2
61011: PUSH
61012: LD_VAR 0 2
61016: PPUSH
61017: LD_INT 4
61019: PPUSH
61020: LD_VAR 0 11
61024: PPUSH
61025: CALL_OW 1
61029: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
61030: LD_ADDR_VAR 0 4
61034: PUSH
61035: LD_VAR 0 4
61039: PUSH
61040: LD_VAR 0 7
61044: DIFF
61045: ST_TO_ADDR
// if tmp and mech < 6 then
61046: LD_VAR 0 4
61050: PUSH
61051: LD_VAR 0 7
61055: PUSH
61056: LD_INT 6
61058: LESS
61059: AND
61060: IFFALSE 61242
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
61062: LD_ADDR_VAR 0 9
61066: PUSH
61067: LD_VAR 0 4
61071: PUSH
61072: LD_VAR 0 7
61076: DIFF
61077: PPUSH
61078: LD_INT 3
61080: PPUSH
61081: CALL 51670 0 2
61085: ST_TO_ADDR
// p := [ ] ;
61086: LD_ADDR_VAR 0 11
61090: PUSH
61091: EMPTY
61092: ST_TO_ADDR
// if sort then
61093: LD_VAR 0 9
61097: IFFALSE 61213
// for i = 1 to 6 - mech do
61099: LD_ADDR_VAR 0 3
61103: PUSH
61104: DOUBLE
61105: LD_INT 1
61107: DEC
61108: ST_TO_ADDR
61109: LD_INT 6
61111: PUSH
61112: LD_VAR 0 7
61116: MINUS
61117: PUSH
61118: FOR_TO
61119: IFFALSE 61211
// begin if i = sort then
61121: LD_VAR 0 3
61125: PUSH
61126: LD_VAR 0 9
61130: EQUAL
61131: IFFALSE 61135
// break ;
61133: GO 61211
// if GetClass ( i ) = 3 then
61135: LD_VAR 0 3
61139: PPUSH
61140: CALL_OW 257
61144: PUSH
61145: LD_INT 3
61147: EQUAL
61148: IFFALSE 61152
// continue ;
61150: GO 61118
// p := Insert ( p , p + 1 , sort [ i ] ) ;
61152: LD_ADDR_VAR 0 11
61156: PUSH
61157: LD_VAR 0 11
61161: PPUSH
61162: LD_VAR 0 11
61166: PUSH
61167: LD_INT 1
61169: PLUS
61170: PPUSH
61171: LD_VAR 0 9
61175: PUSH
61176: LD_VAR 0 3
61180: ARRAY
61181: PPUSH
61182: CALL_OW 2
61186: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
61187: LD_ADDR_VAR 0 4
61191: PUSH
61192: LD_VAR 0 4
61196: PUSH
61197: LD_VAR 0 9
61201: PUSH
61202: LD_VAR 0 3
61206: ARRAY
61207: DIFF
61208: ST_TO_ADDR
// end ;
61209: GO 61118
61211: POP
61212: POP
// if p then
61213: LD_VAR 0 11
61217: IFFALSE 61242
// result := Replace ( result , 3 , p ) ;
61219: LD_ADDR_VAR 0 2
61223: PUSH
61224: LD_VAR 0 2
61228: PPUSH
61229: LD_INT 3
61231: PPUSH
61232: LD_VAR 0 11
61236: PPUSH
61237: CALL_OW 1
61241: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
61242: LD_ADDR_VAR 0 4
61246: PUSH
61247: LD_VAR 0 4
61251: PUSH
61252: LD_VAR 0 6
61256: DIFF
61257: ST_TO_ADDR
// if tmp and eng < 4 then
61258: LD_VAR 0 4
61262: PUSH
61263: LD_VAR 0 6
61267: PUSH
61268: LD_INT 4
61270: LESS
61271: AND
61272: IFFALSE 61462
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
61274: LD_ADDR_VAR 0 9
61278: PUSH
61279: LD_VAR 0 4
61283: PUSH
61284: LD_VAR 0 7
61288: PUSH
61289: LD_VAR 0 6
61293: UNION
61294: DIFF
61295: PPUSH
61296: LD_INT 2
61298: PPUSH
61299: CALL 51670 0 2
61303: ST_TO_ADDR
// p := [ ] ;
61304: LD_ADDR_VAR 0 11
61308: PUSH
61309: EMPTY
61310: ST_TO_ADDR
// if sort then
61311: LD_VAR 0 9
61315: IFFALSE 61431
// for i = 1 to 4 - eng do
61317: LD_ADDR_VAR 0 3
61321: PUSH
61322: DOUBLE
61323: LD_INT 1
61325: DEC
61326: ST_TO_ADDR
61327: LD_INT 4
61329: PUSH
61330: LD_VAR 0 6
61334: MINUS
61335: PUSH
61336: FOR_TO
61337: IFFALSE 61429
// begin if i = sort then
61339: LD_VAR 0 3
61343: PUSH
61344: LD_VAR 0 9
61348: EQUAL
61349: IFFALSE 61353
// break ;
61351: GO 61429
// if GetClass ( i ) = 2 then
61353: LD_VAR 0 3
61357: PPUSH
61358: CALL_OW 257
61362: PUSH
61363: LD_INT 2
61365: EQUAL
61366: IFFALSE 61370
// continue ;
61368: GO 61336
// p := Insert ( p , p + 1 , sort [ i ] ) ;
61370: LD_ADDR_VAR 0 11
61374: PUSH
61375: LD_VAR 0 11
61379: PPUSH
61380: LD_VAR 0 11
61384: PUSH
61385: LD_INT 1
61387: PLUS
61388: PPUSH
61389: LD_VAR 0 9
61393: PUSH
61394: LD_VAR 0 3
61398: ARRAY
61399: PPUSH
61400: CALL_OW 2
61404: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
61405: LD_ADDR_VAR 0 4
61409: PUSH
61410: LD_VAR 0 4
61414: PUSH
61415: LD_VAR 0 9
61419: PUSH
61420: LD_VAR 0 3
61424: ARRAY
61425: DIFF
61426: ST_TO_ADDR
// end ;
61427: GO 61336
61429: POP
61430: POP
// if p then
61431: LD_VAR 0 11
61435: IFFALSE 61460
// result := Replace ( result , 2 , p ) ;
61437: LD_ADDR_VAR 0 2
61441: PUSH
61442: LD_VAR 0 2
61446: PPUSH
61447: LD_INT 2
61449: PPUSH
61450: LD_VAR 0 11
61454: PPUSH
61455: CALL_OW 1
61459: ST_TO_ADDR
// end else
61460: GO 61506
// for i = eng downto 5 do
61462: LD_ADDR_VAR 0 3
61466: PUSH
61467: DOUBLE
61468: LD_VAR 0 6
61472: INC
61473: ST_TO_ADDR
61474: LD_INT 5
61476: PUSH
61477: FOR_DOWNTO
61478: IFFALSE 61504
// tmp := tmp union eng [ i ] ;
61480: LD_ADDR_VAR 0 4
61484: PUSH
61485: LD_VAR 0 4
61489: PUSH
61490: LD_VAR 0 6
61494: PUSH
61495: LD_VAR 0 3
61499: ARRAY
61500: UNION
61501: ST_TO_ADDR
61502: GO 61477
61504: POP
61505: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
61506: LD_ADDR_VAR 0 2
61510: PUSH
61511: LD_VAR 0 2
61515: PPUSH
61516: LD_INT 1
61518: PPUSH
61519: LD_VAR 0 4
61523: PUSH
61524: LD_VAR 0 5
61528: DIFF
61529: PPUSH
61530: CALL_OW 1
61534: ST_TO_ADDR
// exit ;
61535: GO 61537
// end ; end ;
61537: LD_VAR 0 2
61541: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
61542: LD_INT 0
61544: PPUSH
61545: PPUSH
61546: PPUSH
// if not mc_bases then
61547: LD_EXP 52
61551: NOT
61552: IFFALSE 61556
// exit ;
61554: GO 61662
// for i = 1 to mc_bases do
61556: LD_ADDR_VAR 0 2
61560: PUSH
61561: DOUBLE
61562: LD_INT 1
61564: DEC
61565: ST_TO_ADDR
61566: LD_EXP 52
61570: PUSH
61571: FOR_TO
61572: IFFALSE 61653
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
61574: LD_ADDR_VAR 0 3
61578: PUSH
61579: LD_EXP 52
61583: PUSH
61584: LD_VAR 0 2
61588: ARRAY
61589: PPUSH
61590: LD_INT 21
61592: PUSH
61593: LD_INT 3
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 3
61602: PUSH
61603: LD_INT 24
61605: PUSH
61606: LD_INT 1000
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PPUSH
61621: CALL_OW 72
61625: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
61626: LD_ADDR_EXP 53
61630: PUSH
61631: LD_EXP 53
61635: PPUSH
61636: LD_VAR 0 2
61640: PPUSH
61641: LD_VAR 0 3
61645: PPUSH
61646: CALL_OW 1
61650: ST_TO_ADDR
// end ;
61651: GO 61571
61653: POP
61654: POP
// RaiseSailEvent ( 101 ) ;
61655: LD_INT 101
61657: PPUSH
61658: CALL_OW 427
// end ;
61662: LD_VAR 0 1
61666: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
61667: LD_INT 0
61669: PPUSH
61670: PPUSH
61671: PPUSH
61672: PPUSH
61673: PPUSH
61674: PPUSH
61675: PPUSH
// if not mc_bases then
61676: LD_EXP 52
61680: NOT
61681: IFFALSE 61685
// exit ;
61683: GO 62258
// for i = 1 to mc_bases do
61685: LD_ADDR_VAR 0 2
61689: PUSH
61690: DOUBLE
61691: LD_INT 1
61693: DEC
61694: ST_TO_ADDR
61695: LD_EXP 52
61699: PUSH
61700: FOR_TO
61701: IFFALSE 62249
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
61703: LD_ADDR_VAR 0 5
61707: PUSH
61708: LD_EXP 52
61712: PUSH
61713: LD_VAR 0 2
61717: ARRAY
61718: PUSH
61719: LD_EXP 81
61723: PUSH
61724: LD_VAR 0 2
61728: ARRAY
61729: UNION
61730: PPUSH
61731: LD_INT 21
61733: PUSH
61734: LD_INT 1
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 1
61743: PUSH
61744: LD_INT 3
61746: PUSH
61747: LD_INT 54
61749: PUSH
61750: EMPTY
61751: LIST
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 3
61759: PUSH
61760: LD_INT 24
61762: PUSH
61763: LD_INT 800
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: LIST
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PPUSH
61783: CALL_OW 72
61787: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
61788: LD_ADDR_VAR 0 6
61792: PUSH
61793: LD_EXP 52
61797: PUSH
61798: LD_VAR 0 2
61802: ARRAY
61803: PPUSH
61804: LD_INT 21
61806: PUSH
61807: LD_INT 1
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 1
61816: PUSH
61817: LD_INT 3
61819: PUSH
61820: LD_INT 54
61822: PUSH
61823: EMPTY
61824: LIST
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 3
61832: PUSH
61833: LD_INT 24
61835: PUSH
61836: LD_INT 250
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: LIST
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PPUSH
61856: CALL_OW 72
61860: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
61861: LD_ADDR_VAR 0 7
61865: PUSH
61866: LD_VAR 0 5
61870: PUSH
61871: LD_VAR 0 6
61875: DIFF
61876: ST_TO_ADDR
// if not need_heal_1 then
61877: LD_VAR 0 6
61881: NOT
61882: IFFALSE 61915
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
61884: LD_ADDR_EXP 55
61888: PUSH
61889: LD_EXP 55
61893: PPUSH
61894: LD_VAR 0 2
61898: PUSH
61899: LD_INT 1
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PPUSH
61906: EMPTY
61907: PPUSH
61908: CALL 17428 0 3
61912: ST_TO_ADDR
61913: GO 61985
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
61915: LD_ADDR_EXP 55
61919: PUSH
61920: LD_EXP 55
61924: PPUSH
61925: LD_VAR 0 2
61929: PUSH
61930: LD_INT 1
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PPUSH
61937: LD_EXP 55
61941: PUSH
61942: LD_VAR 0 2
61946: ARRAY
61947: PUSH
61948: LD_INT 1
61950: ARRAY
61951: PPUSH
61952: LD_INT 3
61954: PUSH
61955: LD_INT 24
61957: PUSH
61958: LD_INT 1000
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PPUSH
61969: CALL_OW 72
61973: PUSH
61974: LD_VAR 0 6
61978: UNION
61979: PPUSH
61980: CALL 17428 0 3
61984: ST_TO_ADDR
// if not need_heal_2 then
61985: LD_VAR 0 7
61989: NOT
61990: IFFALSE 62023
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
61992: LD_ADDR_EXP 55
61996: PUSH
61997: LD_EXP 55
62001: PPUSH
62002: LD_VAR 0 2
62006: PUSH
62007: LD_INT 2
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PPUSH
62014: EMPTY
62015: PPUSH
62016: CALL 17428 0 3
62020: ST_TO_ADDR
62021: GO 62055
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
62023: LD_ADDR_EXP 55
62027: PUSH
62028: LD_EXP 55
62032: PPUSH
62033: LD_VAR 0 2
62037: PUSH
62038: LD_INT 2
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PPUSH
62045: LD_VAR 0 7
62049: PPUSH
62050: CALL 17428 0 3
62054: ST_TO_ADDR
// if need_heal_2 then
62055: LD_VAR 0 7
62059: IFFALSE 62231
// for j in need_heal_2 do
62061: LD_ADDR_VAR 0 3
62065: PUSH
62066: LD_VAR 0 7
62070: PUSH
62071: FOR_IN
62072: IFFALSE 62229
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
62074: LD_ADDR_VAR 0 5
62078: PUSH
62079: LD_EXP 52
62083: PUSH
62084: LD_VAR 0 2
62088: ARRAY
62089: PPUSH
62090: LD_INT 2
62092: PUSH
62093: LD_INT 30
62095: PUSH
62096: LD_INT 6
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 30
62105: PUSH
62106: LD_INT 7
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 30
62115: PUSH
62116: LD_INT 8
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 30
62125: PUSH
62126: LD_INT 0
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 30
62135: PUSH
62136: LD_INT 1
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 25
62145: PUSH
62146: LD_INT 4
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: PPUSH
62162: CALL_OW 72
62166: ST_TO_ADDR
// if tmp then
62167: LD_VAR 0 5
62171: IFFALSE 62227
// begin k := NearestUnitToUnit ( tmp , j ) ;
62173: LD_ADDR_VAR 0 4
62177: PUSH
62178: LD_VAR 0 5
62182: PPUSH
62183: LD_VAR 0 3
62187: PPUSH
62188: CALL_OW 74
62192: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
62193: LD_VAR 0 3
62197: PPUSH
62198: LD_VAR 0 4
62202: PPUSH
62203: CALL_OW 296
62207: PUSH
62208: LD_INT 7
62210: GREATER
62211: IFFALSE 62227
// ComMoveUnit ( j , k ) ;
62213: LD_VAR 0 3
62217: PPUSH
62218: LD_VAR 0 4
62222: PPUSH
62223: CALL_OW 112
// end ; end ;
62227: GO 62071
62229: POP
62230: POP
// if not need_heal_1 and not need_heal_2 then
62231: LD_VAR 0 6
62235: NOT
62236: PUSH
62237: LD_VAR 0 7
62241: NOT
62242: AND
62243: IFFALSE 62247
// continue ;
62245: GO 61700
// end ;
62247: GO 61700
62249: POP
62250: POP
// RaiseSailEvent ( 102 ) ;
62251: LD_INT 102
62253: PPUSH
62254: CALL_OW 427
// end ;
62258: LD_VAR 0 1
62262: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
62263: LD_INT 0
62265: PPUSH
62266: PPUSH
62267: PPUSH
62268: PPUSH
62269: PPUSH
// if not mc_bases then
62270: LD_EXP 52
62274: NOT
62275: IFFALSE 62279
// exit ;
62277: GO 62664
// for i = 1 to mc_bases do
62279: LD_ADDR_VAR 0 2
62283: PUSH
62284: DOUBLE
62285: LD_INT 1
62287: DEC
62288: ST_TO_ADDR
62289: LD_EXP 52
62293: PUSH
62294: FOR_TO
62295: IFFALSE 62662
// begin if not mc_building_need_repair [ i ] then
62297: LD_EXP 53
62301: PUSH
62302: LD_VAR 0 2
62306: ARRAY
62307: NOT
62308: IFFALSE 62346
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
62310: LD_ADDR_EXP 54
62314: PUSH
62315: LD_EXP 54
62319: PPUSH
62320: LD_VAR 0 2
62324: PPUSH
62325: EMPTY
62326: PPUSH
62327: CALL_OW 1
62331: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
62332: LD_VAR 0 2
62336: PPUSH
62337: LD_INT 101
62339: PPUSH
62340: CALL 57384 0 2
// continue ;
62344: GO 62294
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
62346: LD_ADDR_EXP 58
62350: PUSH
62351: LD_EXP 58
62355: PPUSH
62356: LD_VAR 0 2
62360: PPUSH
62361: EMPTY
62362: PPUSH
62363: CALL_OW 1
62367: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
62368: LD_VAR 0 2
62372: PPUSH
62373: LD_INT 103
62375: PPUSH
62376: CALL 57384 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
62380: LD_ADDR_VAR 0 5
62384: PUSH
62385: LD_EXP 52
62389: PUSH
62390: LD_VAR 0 2
62394: ARRAY
62395: PUSH
62396: LD_EXP 81
62400: PUSH
62401: LD_VAR 0 2
62405: ARRAY
62406: UNION
62407: PPUSH
62408: LD_INT 2
62410: PUSH
62411: LD_INT 25
62413: PUSH
62414: LD_INT 2
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 25
62423: PUSH
62424: LD_INT 16
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: LIST
62435: PUSH
62436: EMPTY
62437: LIST
62438: PPUSH
62439: CALL_OW 72
62443: ST_TO_ADDR
// if not tmp then
62444: LD_VAR 0 5
62448: NOT
62449: IFFALSE 62453
// continue ;
62451: GO 62294
// for j in tmp do
62453: LD_ADDR_VAR 0 3
62457: PUSH
62458: LD_VAR 0 5
62462: PUSH
62463: FOR_IN
62464: IFFALSE 62658
// begin if mc_need_heal [ i ] then
62466: LD_EXP 55
62470: PUSH
62471: LD_VAR 0 2
62475: ARRAY
62476: IFFALSE 62524
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
62478: LD_VAR 0 3
62482: PUSH
62483: LD_EXP 55
62487: PUSH
62488: LD_VAR 0 2
62492: ARRAY
62493: PUSH
62494: LD_INT 1
62496: ARRAY
62497: IN
62498: PUSH
62499: LD_VAR 0 3
62503: PUSH
62504: LD_EXP 55
62508: PUSH
62509: LD_VAR 0 2
62513: ARRAY
62514: PUSH
62515: LD_INT 2
62517: ARRAY
62518: IN
62519: OR
62520: IFFALSE 62524
// continue ;
62522: GO 62463
// if IsInUnit ( j ) then
62524: LD_VAR 0 3
62528: PPUSH
62529: CALL_OW 310
62533: IFFALSE 62544
// ComExitBuilding ( j ) ;
62535: LD_VAR 0 3
62539: PPUSH
62540: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
62544: LD_VAR 0 3
62548: PUSH
62549: LD_EXP 54
62553: PUSH
62554: LD_VAR 0 2
62558: ARRAY
62559: IN
62560: NOT
62561: IFFALSE 62619
// begin SetTag ( j , 101 ) ;
62563: LD_VAR 0 3
62567: PPUSH
62568: LD_INT 101
62570: PPUSH
62571: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
62575: LD_ADDR_EXP 54
62579: PUSH
62580: LD_EXP 54
62584: PPUSH
62585: LD_VAR 0 2
62589: PUSH
62590: LD_EXP 54
62594: PUSH
62595: LD_VAR 0 2
62599: ARRAY
62600: PUSH
62601: LD_INT 1
62603: PLUS
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PPUSH
62609: LD_VAR 0 3
62613: PPUSH
62614: CALL 17428 0 3
62618: ST_TO_ADDR
// end ; wait ( 1 ) ;
62619: LD_INT 1
62621: PPUSH
62622: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
62626: LD_VAR 0 3
62630: PPUSH
62631: LD_EXP 53
62635: PUSH
62636: LD_VAR 0 2
62640: ARRAY
62641: PPUSH
62642: LD_VAR 0 3
62646: PPUSH
62647: CALL_OW 74
62651: PPUSH
62652: CALL_OW 130
// end ;
62656: GO 62463
62658: POP
62659: POP
// end ;
62660: GO 62294
62662: POP
62663: POP
// end ;
62664: LD_VAR 0 1
62668: RET
// export function MC_Heal ; var i , j , tmp ; begin
62669: LD_INT 0
62671: PPUSH
62672: PPUSH
62673: PPUSH
62674: PPUSH
// if not mc_bases then
62675: LD_EXP 52
62679: NOT
62680: IFFALSE 62684
// exit ;
62682: GO 63086
// for i = 1 to mc_bases do
62684: LD_ADDR_VAR 0 2
62688: PUSH
62689: DOUBLE
62690: LD_INT 1
62692: DEC
62693: ST_TO_ADDR
62694: LD_EXP 52
62698: PUSH
62699: FOR_TO
62700: IFFALSE 63084
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
62702: LD_EXP 55
62706: PUSH
62707: LD_VAR 0 2
62711: ARRAY
62712: PUSH
62713: LD_INT 1
62715: ARRAY
62716: NOT
62717: PUSH
62718: LD_EXP 55
62722: PUSH
62723: LD_VAR 0 2
62727: ARRAY
62728: PUSH
62729: LD_INT 2
62731: ARRAY
62732: NOT
62733: AND
62734: IFFALSE 62772
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
62736: LD_ADDR_EXP 56
62740: PUSH
62741: LD_EXP 56
62745: PPUSH
62746: LD_VAR 0 2
62750: PPUSH
62751: EMPTY
62752: PPUSH
62753: CALL_OW 1
62757: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
62758: LD_VAR 0 2
62762: PPUSH
62763: LD_INT 102
62765: PPUSH
62766: CALL 57384 0 2
// continue ;
62770: GO 62699
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
62772: LD_ADDR_VAR 0 4
62776: PUSH
62777: LD_EXP 52
62781: PUSH
62782: LD_VAR 0 2
62786: ARRAY
62787: PPUSH
62788: LD_INT 25
62790: PUSH
62791: LD_INT 4
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PPUSH
62798: CALL_OW 72
62802: ST_TO_ADDR
// if not tmp then
62803: LD_VAR 0 4
62807: NOT
62808: IFFALSE 62812
// continue ;
62810: GO 62699
// if mc_taming [ i ] then
62812: LD_EXP 83
62816: PUSH
62817: LD_VAR 0 2
62821: ARRAY
62822: IFFALSE 62846
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
62824: LD_ADDR_EXP 83
62828: PUSH
62829: LD_EXP 83
62833: PPUSH
62834: LD_VAR 0 2
62838: PPUSH
62839: EMPTY
62840: PPUSH
62841: CALL_OW 1
62845: ST_TO_ADDR
// for j in tmp do
62846: LD_ADDR_VAR 0 3
62850: PUSH
62851: LD_VAR 0 4
62855: PUSH
62856: FOR_IN
62857: IFFALSE 63080
// begin if IsInUnit ( j ) then
62859: LD_VAR 0 3
62863: PPUSH
62864: CALL_OW 310
62868: IFFALSE 62879
// ComExitBuilding ( j ) ;
62870: LD_VAR 0 3
62874: PPUSH
62875: CALL_OW 122
// if not j in mc_healers [ i ] then
62879: LD_VAR 0 3
62883: PUSH
62884: LD_EXP 56
62888: PUSH
62889: LD_VAR 0 2
62893: ARRAY
62894: IN
62895: NOT
62896: IFFALSE 62942
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
62898: LD_ADDR_EXP 56
62902: PUSH
62903: LD_EXP 56
62907: PPUSH
62908: LD_VAR 0 2
62912: PUSH
62913: LD_EXP 56
62917: PUSH
62918: LD_VAR 0 2
62922: ARRAY
62923: PUSH
62924: LD_INT 1
62926: PLUS
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PPUSH
62932: LD_VAR 0 3
62936: PPUSH
62937: CALL 17428 0 3
62941: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
62942: LD_VAR 0 3
62946: PPUSH
62947: CALL_OW 110
62951: PUSH
62952: LD_INT 102
62954: NONEQUAL
62955: IFFALSE 62969
// SetTag ( j , 102 ) ;
62957: LD_VAR 0 3
62961: PPUSH
62962: LD_INT 102
62964: PPUSH
62965: CALL_OW 109
// Wait ( 3 ) ;
62969: LD_INT 3
62971: PPUSH
62972: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
62976: LD_EXP 55
62980: PUSH
62981: LD_VAR 0 2
62985: ARRAY
62986: PUSH
62987: LD_INT 1
62989: ARRAY
62990: IFFALSE 63022
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
62992: LD_VAR 0 3
62996: PPUSH
62997: LD_EXP 55
63001: PUSH
63002: LD_VAR 0 2
63006: ARRAY
63007: PUSH
63008: LD_INT 1
63010: ARRAY
63011: PUSH
63012: LD_INT 1
63014: ARRAY
63015: PPUSH
63016: CALL_OW 128
63020: GO 63078
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
63022: LD_VAR 0 3
63026: PPUSH
63027: CALL_OW 314
63031: NOT
63032: PUSH
63033: LD_EXP 55
63037: PUSH
63038: LD_VAR 0 2
63042: ARRAY
63043: PUSH
63044: LD_INT 2
63046: ARRAY
63047: AND
63048: IFFALSE 63078
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
63050: LD_VAR 0 3
63054: PPUSH
63055: LD_EXP 55
63059: PUSH
63060: LD_VAR 0 2
63064: ARRAY
63065: PUSH
63066: LD_INT 2
63068: ARRAY
63069: PUSH
63070: LD_INT 1
63072: ARRAY
63073: PPUSH
63074: CALL_OW 128
// end ;
63078: GO 62856
63080: POP
63081: POP
// end ;
63082: GO 62699
63084: POP
63085: POP
// end ;
63086: LD_VAR 0 1
63090: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
63091: LD_INT 0
63093: PPUSH
63094: PPUSH
63095: PPUSH
63096: PPUSH
63097: PPUSH
// if not mc_bases then
63098: LD_EXP 52
63102: NOT
63103: IFFALSE 63107
// exit ;
63105: GO 64250
// for i = 1 to mc_bases do
63107: LD_ADDR_VAR 0 2
63111: PUSH
63112: DOUBLE
63113: LD_INT 1
63115: DEC
63116: ST_TO_ADDR
63117: LD_EXP 52
63121: PUSH
63122: FOR_TO
63123: IFFALSE 64248
// begin if mc_scan [ i ] then
63125: LD_EXP 75
63129: PUSH
63130: LD_VAR 0 2
63134: ARRAY
63135: IFFALSE 63139
// continue ;
63137: GO 63122
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
63139: LD_EXP 57
63143: PUSH
63144: LD_VAR 0 2
63148: ARRAY
63149: NOT
63150: PUSH
63151: LD_EXP 59
63155: PUSH
63156: LD_VAR 0 2
63160: ARRAY
63161: NOT
63162: AND
63163: PUSH
63164: LD_EXP 58
63168: PUSH
63169: LD_VAR 0 2
63173: ARRAY
63174: AND
63175: IFFALSE 63213
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
63177: LD_ADDR_EXP 58
63181: PUSH
63182: LD_EXP 58
63186: PPUSH
63187: LD_VAR 0 2
63191: PPUSH
63192: EMPTY
63193: PPUSH
63194: CALL_OW 1
63198: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
63199: LD_VAR 0 2
63203: PPUSH
63204: LD_INT 103
63206: PPUSH
63207: CALL 57384 0 2
// continue ;
63211: GO 63122
// end ; if mc_construct_list [ i ] then
63213: LD_EXP 59
63217: PUSH
63218: LD_VAR 0 2
63222: ARRAY
63223: IFFALSE 63443
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
63225: LD_ADDR_VAR 0 4
63229: PUSH
63230: LD_EXP 52
63234: PUSH
63235: LD_VAR 0 2
63239: ARRAY
63240: PPUSH
63241: LD_INT 25
63243: PUSH
63244: LD_INT 2
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PPUSH
63251: CALL_OW 72
63255: PUSH
63256: LD_EXP 54
63260: PUSH
63261: LD_VAR 0 2
63265: ARRAY
63266: DIFF
63267: ST_TO_ADDR
// if not tmp then
63268: LD_VAR 0 4
63272: NOT
63273: IFFALSE 63277
// continue ;
63275: GO 63122
// for j in tmp do
63277: LD_ADDR_VAR 0 3
63281: PUSH
63282: LD_VAR 0 4
63286: PUSH
63287: FOR_IN
63288: IFFALSE 63439
// begin if not mc_builders [ i ] then
63290: LD_EXP 58
63294: PUSH
63295: LD_VAR 0 2
63299: ARRAY
63300: NOT
63301: IFFALSE 63359
// begin SetTag ( j , 103 ) ;
63303: LD_VAR 0 3
63307: PPUSH
63308: LD_INT 103
63310: PPUSH
63311: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
63315: LD_ADDR_EXP 58
63319: PUSH
63320: LD_EXP 58
63324: PPUSH
63325: LD_VAR 0 2
63329: PUSH
63330: LD_EXP 58
63334: PUSH
63335: LD_VAR 0 2
63339: ARRAY
63340: PUSH
63341: LD_INT 1
63343: PLUS
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PPUSH
63349: LD_VAR 0 3
63353: PPUSH
63354: CALL 17428 0 3
63358: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
63359: LD_VAR 0 3
63363: PPUSH
63364: CALL_OW 310
63368: IFFALSE 63379
// ComExitBuilding ( j ) ;
63370: LD_VAR 0 3
63374: PPUSH
63375: CALL_OW 122
// wait ( 3 ) ;
63379: LD_INT 3
63381: PPUSH
63382: CALL_OW 67
// if not mc_construct_list [ i ] then
63386: LD_EXP 59
63390: PUSH
63391: LD_VAR 0 2
63395: ARRAY
63396: NOT
63397: IFFALSE 63401
// break ;
63399: GO 63439
// if not HasTask ( j ) then
63401: LD_VAR 0 3
63405: PPUSH
63406: CALL_OW 314
63410: NOT
63411: IFFALSE 63437
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
63413: LD_VAR 0 3
63417: PPUSH
63418: LD_EXP 59
63422: PUSH
63423: LD_VAR 0 2
63427: ARRAY
63428: PUSH
63429: LD_INT 1
63431: ARRAY
63432: PPUSH
63433: CALL 20279 0 2
// end ;
63437: GO 63287
63439: POP
63440: POP
// end else
63441: GO 64246
// if mc_build_list [ i ] then
63443: LD_EXP 57
63447: PUSH
63448: LD_VAR 0 2
63452: ARRAY
63453: IFFALSE 64246
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
63455: LD_ADDR_VAR 0 5
63459: PUSH
63460: LD_EXP 52
63464: PUSH
63465: LD_VAR 0 2
63469: ARRAY
63470: PPUSH
63471: LD_INT 2
63473: PUSH
63474: LD_INT 30
63476: PUSH
63477: LD_INT 0
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 30
63486: PUSH
63487: LD_INT 1
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: LIST
63498: PPUSH
63499: CALL_OW 72
63503: ST_TO_ADDR
// if depot then
63504: LD_VAR 0 5
63508: IFFALSE 63526
// depot := depot [ 1 ] else
63510: LD_ADDR_VAR 0 5
63514: PUSH
63515: LD_VAR 0 5
63519: PUSH
63520: LD_INT 1
63522: ARRAY
63523: ST_TO_ADDR
63524: GO 63534
// depot := 0 ;
63526: LD_ADDR_VAR 0 5
63530: PUSH
63531: LD_INT 0
63533: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
63534: LD_EXP 57
63538: PUSH
63539: LD_VAR 0 2
63543: ARRAY
63544: PUSH
63545: LD_INT 1
63547: ARRAY
63548: PUSH
63549: LD_INT 1
63551: ARRAY
63552: PPUSH
63553: CALL 20109 0 1
63557: PUSH
63558: LD_EXP 52
63562: PUSH
63563: LD_VAR 0 2
63567: ARRAY
63568: PPUSH
63569: LD_INT 2
63571: PUSH
63572: LD_INT 30
63574: PUSH
63575: LD_INT 2
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 30
63584: PUSH
63585: LD_INT 3
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: LIST
63596: PPUSH
63597: CALL_OW 72
63601: NOT
63602: AND
63603: IFFALSE 63708
// begin for j = 1 to mc_build_list [ i ] do
63605: LD_ADDR_VAR 0 3
63609: PUSH
63610: DOUBLE
63611: LD_INT 1
63613: DEC
63614: ST_TO_ADDR
63615: LD_EXP 57
63619: PUSH
63620: LD_VAR 0 2
63624: ARRAY
63625: PUSH
63626: FOR_TO
63627: IFFALSE 63706
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
63629: LD_EXP 57
63633: PUSH
63634: LD_VAR 0 2
63638: ARRAY
63639: PUSH
63640: LD_VAR 0 3
63644: ARRAY
63645: PUSH
63646: LD_INT 1
63648: ARRAY
63649: PUSH
63650: LD_INT 2
63652: EQUAL
63653: IFFALSE 63704
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
63655: LD_ADDR_EXP 57
63659: PUSH
63660: LD_EXP 57
63664: PPUSH
63665: LD_VAR 0 2
63669: PPUSH
63670: LD_EXP 57
63674: PUSH
63675: LD_VAR 0 2
63679: ARRAY
63680: PPUSH
63681: LD_VAR 0 3
63685: PPUSH
63686: LD_INT 1
63688: PPUSH
63689: LD_INT 0
63691: PPUSH
63692: CALL 16846 0 4
63696: PPUSH
63697: CALL_OW 1
63701: ST_TO_ADDR
// break ;
63702: GO 63706
// end ;
63704: GO 63626
63706: POP
63707: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
63708: LD_EXP 57
63712: PUSH
63713: LD_VAR 0 2
63717: ARRAY
63718: PUSH
63719: LD_INT 1
63721: ARRAY
63722: PUSH
63723: LD_INT 1
63725: ARRAY
63726: PUSH
63727: LD_INT 0
63729: EQUAL
63730: PUSH
63731: LD_VAR 0 5
63735: PUSH
63736: LD_VAR 0 5
63740: PPUSH
63741: LD_EXP 57
63745: PUSH
63746: LD_VAR 0 2
63750: ARRAY
63751: PUSH
63752: LD_INT 1
63754: ARRAY
63755: PUSH
63756: LD_INT 1
63758: ARRAY
63759: PPUSH
63760: LD_EXP 57
63764: PUSH
63765: LD_VAR 0 2
63769: ARRAY
63770: PUSH
63771: LD_INT 1
63773: ARRAY
63774: PUSH
63775: LD_INT 2
63777: ARRAY
63778: PPUSH
63779: LD_EXP 57
63783: PUSH
63784: LD_VAR 0 2
63788: ARRAY
63789: PUSH
63790: LD_INT 1
63792: ARRAY
63793: PUSH
63794: LD_INT 3
63796: ARRAY
63797: PPUSH
63798: LD_EXP 57
63802: PUSH
63803: LD_VAR 0 2
63807: ARRAY
63808: PUSH
63809: LD_INT 1
63811: ARRAY
63812: PUSH
63813: LD_INT 4
63815: ARRAY
63816: PPUSH
63817: CALL 24843 0 5
63821: AND
63822: OR
63823: IFFALSE 64104
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
63825: LD_ADDR_VAR 0 4
63829: PUSH
63830: LD_EXP 52
63834: PUSH
63835: LD_VAR 0 2
63839: ARRAY
63840: PPUSH
63841: LD_INT 25
63843: PUSH
63844: LD_INT 2
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PPUSH
63851: CALL_OW 72
63855: PUSH
63856: LD_EXP 54
63860: PUSH
63861: LD_VAR 0 2
63865: ARRAY
63866: DIFF
63867: ST_TO_ADDR
// if not tmp then
63868: LD_VAR 0 4
63872: NOT
63873: IFFALSE 63877
// continue ;
63875: GO 63122
// for j in tmp do
63877: LD_ADDR_VAR 0 3
63881: PUSH
63882: LD_VAR 0 4
63886: PUSH
63887: FOR_IN
63888: IFFALSE 64100
// begin if not mc_builders [ i ] then
63890: LD_EXP 58
63894: PUSH
63895: LD_VAR 0 2
63899: ARRAY
63900: NOT
63901: IFFALSE 63959
// begin SetTag ( j , 103 ) ;
63903: LD_VAR 0 3
63907: PPUSH
63908: LD_INT 103
63910: PPUSH
63911: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
63915: LD_ADDR_EXP 58
63919: PUSH
63920: LD_EXP 58
63924: PPUSH
63925: LD_VAR 0 2
63929: PUSH
63930: LD_EXP 58
63934: PUSH
63935: LD_VAR 0 2
63939: ARRAY
63940: PUSH
63941: LD_INT 1
63943: PLUS
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PPUSH
63949: LD_VAR 0 3
63953: PPUSH
63954: CALL 17428 0 3
63958: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
63959: LD_VAR 0 3
63963: PPUSH
63964: CALL_OW 310
63968: IFFALSE 63979
// ComExitBuilding ( j ) ;
63970: LD_VAR 0 3
63974: PPUSH
63975: CALL_OW 122
// wait ( 3 ) ;
63979: LD_INT 3
63981: PPUSH
63982: CALL_OW 67
// if not mc_build_list [ i ] then
63986: LD_EXP 57
63990: PUSH
63991: LD_VAR 0 2
63995: ARRAY
63996: NOT
63997: IFFALSE 64001
// break ;
63999: GO 64100
// if not HasTask ( j ) then
64001: LD_VAR 0 3
64005: PPUSH
64006: CALL_OW 314
64010: NOT
64011: IFFALSE 64098
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
64013: LD_VAR 0 3
64017: PPUSH
64018: LD_EXP 57
64022: PUSH
64023: LD_VAR 0 2
64027: ARRAY
64028: PUSH
64029: LD_INT 1
64031: ARRAY
64032: PUSH
64033: LD_INT 1
64035: ARRAY
64036: PPUSH
64037: LD_EXP 57
64041: PUSH
64042: LD_VAR 0 2
64046: ARRAY
64047: PUSH
64048: LD_INT 1
64050: ARRAY
64051: PUSH
64052: LD_INT 2
64054: ARRAY
64055: PPUSH
64056: LD_EXP 57
64060: PUSH
64061: LD_VAR 0 2
64065: ARRAY
64066: PUSH
64067: LD_INT 1
64069: ARRAY
64070: PUSH
64071: LD_INT 3
64073: ARRAY
64074: PPUSH
64075: LD_EXP 57
64079: PUSH
64080: LD_VAR 0 2
64084: ARRAY
64085: PUSH
64086: LD_INT 1
64088: ARRAY
64089: PUSH
64090: LD_INT 4
64092: ARRAY
64093: PPUSH
64094: CALL_OW 145
// end ;
64098: GO 63887
64100: POP
64101: POP
// end else
64102: GO 64246
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
64104: LD_EXP 52
64108: PUSH
64109: LD_VAR 0 2
64113: ARRAY
64114: PPUSH
64115: LD_EXP 57
64119: PUSH
64120: LD_VAR 0 2
64124: ARRAY
64125: PUSH
64126: LD_INT 1
64128: ARRAY
64129: PUSH
64130: LD_INT 1
64132: ARRAY
64133: PPUSH
64134: LD_EXP 57
64138: PUSH
64139: LD_VAR 0 2
64143: ARRAY
64144: PUSH
64145: LD_INT 1
64147: ARRAY
64148: PUSH
64149: LD_INT 2
64151: ARRAY
64152: PPUSH
64153: LD_EXP 57
64157: PUSH
64158: LD_VAR 0 2
64162: ARRAY
64163: PUSH
64164: LD_INT 1
64166: ARRAY
64167: PUSH
64168: LD_INT 3
64170: ARRAY
64171: PPUSH
64172: LD_EXP 57
64176: PUSH
64177: LD_VAR 0 2
64181: ARRAY
64182: PUSH
64183: LD_INT 1
64185: ARRAY
64186: PUSH
64187: LD_INT 4
64189: ARRAY
64190: PPUSH
64191: CALL 24179 0 5
64195: NOT
64196: IFFALSE 64246
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
64198: LD_ADDR_EXP 57
64202: PUSH
64203: LD_EXP 57
64207: PPUSH
64208: LD_VAR 0 2
64212: PPUSH
64213: LD_EXP 57
64217: PUSH
64218: LD_VAR 0 2
64222: ARRAY
64223: PPUSH
64224: LD_INT 1
64226: PPUSH
64227: LD_INT 1
64229: NEG
64230: PPUSH
64231: LD_INT 0
64233: PPUSH
64234: CALL 16846 0 4
64238: PPUSH
64239: CALL_OW 1
64243: ST_TO_ADDR
// continue ;
64244: GO 63122
// end ; end ; end ;
64246: GO 63122
64248: POP
64249: POP
// end ;
64250: LD_VAR 0 1
64254: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
64255: LD_INT 0
64257: PPUSH
64258: PPUSH
64259: PPUSH
64260: PPUSH
64261: PPUSH
64262: PPUSH
// if not mc_bases then
64263: LD_EXP 52
64267: NOT
64268: IFFALSE 64272
// exit ;
64270: GO 64699
// for i = 1 to mc_bases do
64272: LD_ADDR_VAR 0 2
64276: PUSH
64277: DOUBLE
64278: LD_INT 1
64280: DEC
64281: ST_TO_ADDR
64282: LD_EXP 52
64286: PUSH
64287: FOR_TO
64288: IFFALSE 64697
// begin tmp := mc_build_upgrade [ i ] ;
64290: LD_ADDR_VAR 0 4
64294: PUSH
64295: LD_EXP 84
64299: PUSH
64300: LD_VAR 0 2
64304: ARRAY
64305: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
64306: LD_ADDR_VAR 0 6
64310: PUSH
64311: LD_EXP 85
64315: PUSH
64316: LD_VAR 0 2
64320: ARRAY
64321: PPUSH
64322: LD_INT 2
64324: PUSH
64325: LD_INT 30
64327: PUSH
64328: LD_INT 6
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 30
64337: PUSH
64338: LD_INT 7
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: LIST
64349: PPUSH
64350: CALL_OW 72
64354: ST_TO_ADDR
// if not tmp and not lab then
64355: LD_VAR 0 4
64359: NOT
64360: PUSH
64361: LD_VAR 0 6
64365: NOT
64366: AND
64367: IFFALSE 64371
// continue ;
64369: GO 64287
// if tmp then
64371: LD_VAR 0 4
64375: IFFALSE 64495
// for j in tmp do
64377: LD_ADDR_VAR 0 3
64381: PUSH
64382: LD_VAR 0 4
64386: PUSH
64387: FOR_IN
64388: IFFALSE 64493
// begin if UpgradeCost ( j ) then
64390: LD_VAR 0 3
64394: PPUSH
64395: CALL 23839 0 1
64399: IFFALSE 64491
// begin ComUpgrade ( j ) ;
64401: LD_VAR 0 3
64405: PPUSH
64406: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
64410: LD_ADDR_EXP 84
64414: PUSH
64415: LD_EXP 84
64419: PPUSH
64420: LD_VAR 0 2
64424: PPUSH
64425: LD_EXP 84
64429: PUSH
64430: LD_VAR 0 2
64434: ARRAY
64435: PUSH
64436: LD_VAR 0 3
64440: DIFF
64441: PPUSH
64442: CALL_OW 1
64446: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
64447: LD_ADDR_EXP 59
64451: PUSH
64452: LD_EXP 59
64456: PPUSH
64457: LD_VAR 0 2
64461: PUSH
64462: LD_EXP 59
64466: PUSH
64467: LD_VAR 0 2
64471: ARRAY
64472: PUSH
64473: LD_INT 1
64475: PLUS
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PPUSH
64481: LD_VAR 0 3
64485: PPUSH
64486: CALL 17428 0 3
64490: ST_TO_ADDR
// end ; end ;
64491: GO 64387
64493: POP
64494: POP
// if not lab or not mc_lab_upgrade [ i ] then
64495: LD_VAR 0 6
64499: NOT
64500: PUSH
64501: LD_EXP 86
64505: PUSH
64506: LD_VAR 0 2
64510: ARRAY
64511: NOT
64512: OR
64513: IFFALSE 64517
// continue ;
64515: GO 64287
// for j in lab do
64517: LD_ADDR_VAR 0 3
64521: PUSH
64522: LD_VAR 0 6
64526: PUSH
64527: FOR_IN
64528: IFFALSE 64693
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
64530: LD_VAR 0 3
64534: PPUSH
64535: CALL_OW 266
64539: PUSH
64540: LD_INT 6
64542: PUSH
64543: LD_INT 7
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: IN
64550: PUSH
64551: LD_VAR 0 3
64555: PPUSH
64556: CALL_OW 461
64560: PUSH
64561: LD_INT 1
64563: NONEQUAL
64564: AND
64565: IFFALSE 64691
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
64567: LD_VAR 0 3
64571: PPUSH
64572: LD_EXP 86
64576: PUSH
64577: LD_VAR 0 2
64581: ARRAY
64582: PUSH
64583: LD_INT 1
64585: ARRAY
64586: PPUSH
64587: CALL 24044 0 2
64591: IFFALSE 64691
// begin ComCancel ( j ) ;
64593: LD_VAR 0 3
64597: PPUSH
64598: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
64602: LD_VAR 0 3
64606: PPUSH
64607: LD_EXP 86
64611: PUSH
64612: LD_VAR 0 2
64616: ARRAY
64617: PUSH
64618: LD_INT 1
64620: ARRAY
64621: PPUSH
64622: CALL_OW 207
// if not j in mc_construct_list [ i ] then
64626: LD_VAR 0 3
64630: PUSH
64631: LD_EXP 59
64635: PUSH
64636: LD_VAR 0 2
64640: ARRAY
64641: IN
64642: NOT
64643: IFFALSE 64689
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
64645: LD_ADDR_EXP 59
64649: PUSH
64650: LD_EXP 59
64654: PPUSH
64655: LD_VAR 0 2
64659: PUSH
64660: LD_EXP 59
64664: PUSH
64665: LD_VAR 0 2
64669: ARRAY
64670: PUSH
64671: LD_INT 1
64673: PLUS
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PPUSH
64679: LD_VAR 0 3
64683: PPUSH
64684: CALL 17428 0 3
64688: ST_TO_ADDR
// break ;
64689: GO 64693
// end ; end ; end ;
64691: GO 64527
64693: POP
64694: POP
// end ;
64695: GO 64287
64697: POP
64698: POP
// end ;
64699: LD_VAR 0 1
64703: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
64704: LD_INT 0
64706: PPUSH
64707: PPUSH
64708: PPUSH
64709: PPUSH
64710: PPUSH
64711: PPUSH
64712: PPUSH
64713: PPUSH
64714: PPUSH
// if not mc_bases then
64715: LD_EXP 52
64719: NOT
64720: IFFALSE 64724
// exit ;
64722: GO 65129
// for i = 1 to mc_bases do
64724: LD_ADDR_VAR 0 2
64728: PUSH
64729: DOUBLE
64730: LD_INT 1
64732: DEC
64733: ST_TO_ADDR
64734: LD_EXP 52
64738: PUSH
64739: FOR_TO
64740: IFFALSE 65127
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
64742: LD_EXP 60
64746: PUSH
64747: LD_VAR 0 2
64751: ARRAY
64752: NOT
64753: PUSH
64754: LD_EXP 52
64758: PUSH
64759: LD_VAR 0 2
64763: ARRAY
64764: PPUSH
64765: LD_INT 30
64767: PUSH
64768: LD_INT 3
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: PPUSH
64775: CALL_OW 72
64779: NOT
64780: OR
64781: IFFALSE 64785
// continue ;
64783: GO 64739
// busy := false ;
64785: LD_ADDR_VAR 0 8
64789: PUSH
64790: LD_INT 0
64792: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
64793: LD_ADDR_VAR 0 4
64797: PUSH
64798: LD_EXP 52
64802: PUSH
64803: LD_VAR 0 2
64807: ARRAY
64808: PPUSH
64809: LD_INT 30
64811: PUSH
64812: LD_INT 3
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PPUSH
64819: CALL_OW 72
64823: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
64824: LD_ADDR_VAR 0 6
64828: PUSH
64829: LD_EXP 60
64833: PUSH
64834: LD_VAR 0 2
64838: ARRAY
64839: PPUSH
64840: LD_INT 2
64842: PUSH
64843: LD_INT 30
64845: PUSH
64846: LD_INT 32
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 30
64855: PUSH
64856: LD_INT 33
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: LIST
64867: PPUSH
64868: CALL_OW 72
64872: ST_TO_ADDR
// if not t then
64873: LD_VAR 0 6
64877: NOT
64878: IFFALSE 64882
// continue ;
64880: GO 64739
// for j in tmp do
64882: LD_ADDR_VAR 0 3
64886: PUSH
64887: LD_VAR 0 4
64891: PUSH
64892: FOR_IN
64893: IFFALSE 64923
// if not BuildingStatus ( j ) = bs_idle then
64895: LD_VAR 0 3
64899: PPUSH
64900: CALL_OW 461
64904: PUSH
64905: LD_INT 2
64907: EQUAL
64908: NOT
64909: IFFALSE 64921
// begin busy := true ;
64911: LD_ADDR_VAR 0 8
64915: PUSH
64916: LD_INT 1
64918: ST_TO_ADDR
// break ;
64919: GO 64923
// end ;
64921: GO 64892
64923: POP
64924: POP
// if busy then
64925: LD_VAR 0 8
64929: IFFALSE 64933
// continue ;
64931: GO 64739
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
64933: LD_ADDR_VAR 0 7
64937: PUSH
64938: LD_VAR 0 6
64942: PPUSH
64943: LD_INT 35
64945: PUSH
64946: LD_INT 0
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PPUSH
64953: CALL_OW 72
64957: ST_TO_ADDR
// if tw then
64958: LD_VAR 0 7
64962: IFFALSE 65039
// begin tw := tw [ 1 ] ;
64964: LD_ADDR_VAR 0 7
64968: PUSH
64969: LD_VAR 0 7
64973: PUSH
64974: LD_INT 1
64976: ARRAY
64977: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
64978: LD_ADDR_VAR 0 9
64982: PUSH
64983: LD_VAR 0 7
64987: PPUSH
64988: LD_EXP 77
64992: PUSH
64993: LD_VAR 0 2
64997: ARRAY
64998: PPUSH
64999: CALL 22398 0 2
65003: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
65004: LD_EXP 91
65008: PUSH
65009: LD_VAR 0 2
65013: ARRAY
65014: IFFALSE 65037
// if not weapon in mc_allowed_tower_weapons [ i ] then
65016: LD_VAR 0 9
65020: PUSH
65021: LD_EXP 91
65025: PUSH
65026: LD_VAR 0 2
65030: ARRAY
65031: IN
65032: NOT
65033: IFFALSE 65037
// continue ;
65035: GO 64739
// end else
65037: GO 65102
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
65039: LD_ADDR_VAR 0 5
65043: PUSH
65044: LD_EXP 60
65048: PUSH
65049: LD_VAR 0 2
65053: ARRAY
65054: PPUSH
65055: LD_VAR 0 4
65059: PPUSH
65060: CALL 52593 0 2
65064: ST_TO_ADDR
// if not tmp2 then
65065: LD_VAR 0 5
65069: NOT
65070: IFFALSE 65074
// continue ;
65072: GO 64739
// tw := tmp2 [ 1 ] ;
65074: LD_ADDR_VAR 0 7
65078: PUSH
65079: LD_VAR 0 5
65083: PUSH
65084: LD_INT 1
65086: ARRAY
65087: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
65088: LD_ADDR_VAR 0 9
65092: PUSH
65093: LD_VAR 0 5
65097: PUSH
65098: LD_INT 2
65100: ARRAY
65101: ST_TO_ADDR
// end ; if not weapon then
65102: LD_VAR 0 9
65106: NOT
65107: IFFALSE 65111
// continue ;
65109: GO 64739
// ComPlaceWeapon ( tw , weapon ) ;
65111: LD_VAR 0 7
65115: PPUSH
65116: LD_VAR 0 9
65120: PPUSH
65121: CALL_OW 148
// end ;
65125: GO 64739
65127: POP
65128: POP
// end ;
65129: LD_VAR 0 1
65133: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
65134: LD_INT 0
65136: PPUSH
65137: PPUSH
65138: PPUSH
65139: PPUSH
65140: PPUSH
65141: PPUSH
// if not mc_bases then
65142: LD_EXP 52
65146: NOT
65147: IFFALSE 65151
// exit ;
65149: GO 66163
// for i = 1 to mc_bases do
65151: LD_ADDR_VAR 0 2
65155: PUSH
65156: DOUBLE
65157: LD_INT 1
65159: DEC
65160: ST_TO_ADDR
65161: LD_EXP 52
65165: PUSH
65166: FOR_TO
65167: IFFALSE 66161
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
65169: LD_EXP 65
65173: PUSH
65174: LD_VAR 0 2
65178: ARRAY
65179: NOT
65180: PUSH
65181: LD_EXP 65
65185: PUSH
65186: LD_VAR 0 2
65190: ARRAY
65191: PUSH
65192: LD_EXP 66
65196: PUSH
65197: LD_VAR 0 2
65201: ARRAY
65202: EQUAL
65203: OR
65204: IFFALSE 65208
// continue ;
65206: GO 65166
// if mc_miners [ i ] then
65208: LD_EXP 66
65212: PUSH
65213: LD_VAR 0 2
65217: ARRAY
65218: IFFALSE 65848
// begin k := 1 ;
65220: LD_ADDR_VAR 0 4
65224: PUSH
65225: LD_INT 1
65227: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
65228: LD_ADDR_VAR 0 3
65232: PUSH
65233: DOUBLE
65234: LD_EXP 66
65238: PUSH
65239: LD_VAR 0 2
65243: ARRAY
65244: INC
65245: ST_TO_ADDR
65246: LD_INT 1
65248: PUSH
65249: FOR_DOWNTO
65250: IFFALSE 65846
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
65252: LD_EXP 66
65256: PUSH
65257: LD_VAR 0 2
65261: ARRAY
65262: PUSH
65263: LD_VAR 0 3
65267: ARRAY
65268: PPUSH
65269: CALL_OW 301
65273: PUSH
65274: LD_EXP 66
65278: PUSH
65279: LD_VAR 0 2
65283: ARRAY
65284: PUSH
65285: LD_VAR 0 3
65289: ARRAY
65290: PPUSH
65291: CALL_OW 257
65295: PUSH
65296: LD_INT 1
65298: NONEQUAL
65299: OR
65300: IFFALSE 65363
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
65302: LD_ADDR_VAR 0 5
65306: PUSH
65307: LD_EXP 66
65311: PUSH
65312: LD_VAR 0 2
65316: ARRAY
65317: PUSH
65318: LD_EXP 66
65322: PUSH
65323: LD_VAR 0 2
65327: ARRAY
65328: PUSH
65329: LD_VAR 0 3
65333: ARRAY
65334: DIFF
65335: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
65336: LD_ADDR_EXP 66
65340: PUSH
65341: LD_EXP 66
65345: PPUSH
65346: LD_VAR 0 2
65350: PPUSH
65351: LD_VAR 0 5
65355: PPUSH
65356: CALL_OW 1
65360: ST_TO_ADDR
// continue ;
65361: GO 65249
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
65363: LD_EXP 66
65367: PUSH
65368: LD_VAR 0 2
65372: ARRAY
65373: PUSH
65374: LD_VAR 0 3
65378: ARRAY
65379: PPUSH
65380: CALL 17364 0 1
65384: PUSH
65385: LD_EXP 66
65389: PUSH
65390: LD_VAR 0 2
65394: ARRAY
65395: PUSH
65396: LD_VAR 0 3
65400: ARRAY
65401: PPUSH
65402: CALL_OW 255
65406: PPUSH
65407: LD_EXP 65
65411: PUSH
65412: LD_VAR 0 2
65416: ARRAY
65417: PUSH
65418: LD_VAR 0 4
65422: ARRAY
65423: PUSH
65424: LD_INT 1
65426: ARRAY
65427: PPUSH
65428: LD_EXP 65
65432: PUSH
65433: LD_VAR 0 2
65437: ARRAY
65438: PUSH
65439: LD_VAR 0 4
65443: ARRAY
65444: PUSH
65445: LD_INT 2
65447: ARRAY
65448: PPUSH
65449: LD_INT 15
65451: PPUSH
65452: CALL 18324 0 4
65456: PUSH
65457: LD_INT 4
65459: ARRAY
65460: PUSH
65461: LD_EXP 66
65465: PUSH
65466: LD_VAR 0 2
65470: ARRAY
65471: PUSH
65472: LD_VAR 0 3
65476: ARRAY
65477: PPUSH
65478: LD_INT 10
65480: PPUSH
65481: CALL 20021 0 2
65485: PUSH
65486: LD_INT 4
65488: ARRAY
65489: OR
65490: AND
65491: IFFALSE 65514
// ComStop ( mc_miners [ i ] [ j ] ) ;
65493: LD_EXP 66
65497: PUSH
65498: LD_VAR 0 2
65502: ARRAY
65503: PUSH
65504: LD_VAR 0 3
65508: ARRAY
65509: PPUSH
65510: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
65514: LD_EXP 66
65518: PUSH
65519: LD_VAR 0 2
65523: ARRAY
65524: PUSH
65525: LD_VAR 0 3
65529: ARRAY
65530: PPUSH
65531: CALL_OW 257
65535: PUSH
65536: LD_INT 1
65538: EQUAL
65539: PUSH
65540: LD_EXP 66
65544: PUSH
65545: LD_VAR 0 2
65549: ARRAY
65550: PUSH
65551: LD_VAR 0 3
65555: ARRAY
65556: PPUSH
65557: CALL_OW 459
65561: NOT
65562: AND
65563: PUSH
65564: LD_EXP 66
65568: PUSH
65569: LD_VAR 0 2
65573: ARRAY
65574: PUSH
65575: LD_VAR 0 3
65579: ARRAY
65580: PPUSH
65581: CALL_OW 255
65585: PPUSH
65586: LD_EXP 65
65590: PUSH
65591: LD_VAR 0 2
65595: ARRAY
65596: PUSH
65597: LD_VAR 0 4
65601: ARRAY
65602: PUSH
65603: LD_INT 1
65605: ARRAY
65606: PPUSH
65607: LD_EXP 65
65611: PUSH
65612: LD_VAR 0 2
65616: ARRAY
65617: PUSH
65618: LD_VAR 0 4
65622: ARRAY
65623: PUSH
65624: LD_INT 2
65626: ARRAY
65627: PPUSH
65628: LD_INT 15
65630: PPUSH
65631: CALL 18324 0 4
65635: PUSH
65636: LD_INT 4
65638: ARRAY
65639: PUSH
65640: LD_INT 0
65642: EQUAL
65643: AND
65644: PUSH
65645: LD_EXP 66
65649: PUSH
65650: LD_VAR 0 2
65654: ARRAY
65655: PUSH
65656: LD_VAR 0 3
65660: ARRAY
65661: PPUSH
65662: CALL_OW 314
65666: NOT
65667: AND
65668: IFFALSE 65844
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
65670: LD_EXP 66
65674: PUSH
65675: LD_VAR 0 2
65679: ARRAY
65680: PUSH
65681: LD_VAR 0 3
65685: ARRAY
65686: PPUSH
65687: CALL_OW 310
65691: IFFALSE 65714
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
65693: LD_EXP 66
65697: PUSH
65698: LD_VAR 0 2
65702: ARRAY
65703: PUSH
65704: LD_VAR 0 3
65708: ARRAY
65709: PPUSH
65710: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
65714: LD_EXP 66
65718: PUSH
65719: LD_VAR 0 2
65723: ARRAY
65724: PUSH
65725: LD_VAR 0 3
65729: ARRAY
65730: PPUSH
65731: CALL_OW 314
65735: NOT
65736: IFFALSE 65804
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
65738: LD_EXP 66
65742: PUSH
65743: LD_VAR 0 2
65747: ARRAY
65748: PUSH
65749: LD_VAR 0 3
65753: ARRAY
65754: PPUSH
65755: LD_EXP 65
65759: PUSH
65760: LD_VAR 0 2
65764: ARRAY
65765: PUSH
65766: LD_VAR 0 4
65770: ARRAY
65771: PUSH
65772: LD_INT 1
65774: ARRAY
65775: PPUSH
65776: LD_EXP 65
65780: PUSH
65781: LD_VAR 0 2
65785: ARRAY
65786: PUSH
65787: LD_VAR 0 4
65791: ARRAY
65792: PUSH
65793: LD_INT 2
65795: ARRAY
65796: PPUSH
65797: LD_INT 0
65799: PPUSH
65800: CALL_OW 193
// k := k + 1 ;
65804: LD_ADDR_VAR 0 4
65808: PUSH
65809: LD_VAR 0 4
65813: PUSH
65814: LD_INT 1
65816: PLUS
65817: ST_TO_ADDR
// if k > mc_mines [ i ] then
65818: LD_VAR 0 4
65822: PUSH
65823: LD_EXP 65
65827: PUSH
65828: LD_VAR 0 2
65832: ARRAY
65833: GREATER
65834: IFFALSE 65844
// k := 1 ;
65836: LD_ADDR_VAR 0 4
65840: PUSH
65841: LD_INT 1
65843: ST_TO_ADDR
// end ; end ;
65844: GO 65249
65846: POP
65847: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
65848: LD_ADDR_VAR 0 5
65852: PUSH
65853: LD_EXP 52
65857: PUSH
65858: LD_VAR 0 2
65862: ARRAY
65863: PPUSH
65864: LD_INT 2
65866: PUSH
65867: LD_INT 30
65869: PUSH
65870: LD_INT 4
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 30
65879: PUSH
65880: LD_INT 5
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: PUSH
65887: LD_INT 30
65889: PUSH
65890: LD_INT 32
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: PPUSH
65903: CALL_OW 72
65907: ST_TO_ADDR
// if not tmp then
65908: LD_VAR 0 5
65912: NOT
65913: IFFALSE 65917
// continue ;
65915: GO 65166
// list := [ ] ;
65917: LD_ADDR_VAR 0 6
65921: PUSH
65922: EMPTY
65923: ST_TO_ADDR
// for j in tmp do
65924: LD_ADDR_VAR 0 3
65928: PUSH
65929: LD_VAR 0 5
65933: PUSH
65934: FOR_IN
65935: IFFALSE 66004
// begin for k in UnitsInside ( j ) do
65937: LD_ADDR_VAR 0 4
65941: PUSH
65942: LD_VAR 0 3
65946: PPUSH
65947: CALL_OW 313
65951: PUSH
65952: FOR_IN
65953: IFFALSE 66000
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
65955: LD_VAR 0 4
65959: PPUSH
65960: CALL_OW 257
65964: PUSH
65965: LD_INT 1
65967: EQUAL
65968: PUSH
65969: LD_VAR 0 4
65973: PPUSH
65974: CALL_OW 459
65978: NOT
65979: AND
65980: IFFALSE 65998
// list := list ^ k ;
65982: LD_ADDR_VAR 0 6
65986: PUSH
65987: LD_VAR 0 6
65991: PUSH
65992: LD_VAR 0 4
65996: ADD
65997: ST_TO_ADDR
65998: GO 65952
66000: POP
66001: POP
// end ;
66002: GO 65934
66004: POP
66005: POP
// list := list diff mc_miners [ i ] ;
66006: LD_ADDR_VAR 0 6
66010: PUSH
66011: LD_VAR 0 6
66015: PUSH
66016: LD_EXP 66
66020: PUSH
66021: LD_VAR 0 2
66025: ARRAY
66026: DIFF
66027: ST_TO_ADDR
// if not list then
66028: LD_VAR 0 6
66032: NOT
66033: IFFALSE 66037
// continue ;
66035: GO 65166
// k := mc_mines [ i ] - mc_miners [ i ] ;
66037: LD_ADDR_VAR 0 4
66041: PUSH
66042: LD_EXP 65
66046: PUSH
66047: LD_VAR 0 2
66051: ARRAY
66052: PUSH
66053: LD_EXP 66
66057: PUSH
66058: LD_VAR 0 2
66062: ARRAY
66063: MINUS
66064: ST_TO_ADDR
// if k > list then
66065: LD_VAR 0 4
66069: PUSH
66070: LD_VAR 0 6
66074: GREATER
66075: IFFALSE 66087
// k := list ;
66077: LD_ADDR_VAR 0 4
66081: PUSH
66082: LD_VAR 0 6
66086: ST_TO_ADDR
// for j = 1 to k do
66087: LD_ADDR_VAR 0 3
66091: PUSH
66092: DOUBLE
66093: LD_INT 1
66095: DEC
66096: ST_TO_ADDR
66097: LD_VAR 0 4
66101: PUSH
66102: FOR_TO
66103: IFFALSE 66157
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
66105: LD_ADDR_EXP 66
66109: PUSH
66110: LD_EXP 66
66114: PPUSH
66115: LD_VAR 0 2
66119: PUSH
66120: LD_EXP 66
66124: PUSH
66125: LD_VAR 0 2
66129: ARRAY
66130: PUSH
66131: LD_INT 1
66133: PLUS
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PPUSH
66139: LD_VAR 0 6
66143: PUSH
66144: LD_VAR 0 3
66148: ARRAY
66149: PPUSH
66150: CALL 17428 0 3
66154: ST_TO_ADDR
66155: GO 66102
66157: POP
66158: POP
// end ;
66159: GO 65166
66161: POP
66162: POP
// end ;
66163: LD_VAR 0 1
66167: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
66168: LD_INT 0
66170: PPUSH
66171: PPUSH
66172: PPUSH
66173: PPUSH
66174: PPUSH
66175: PPUSH
66176: PPUSH
66177: PPUSH
66178: PPUSH
66179: PPUSH
// if not mc_bases then
66180: LD_EXP 52
66184: NOT
66185: IFFALSE 66189
// exit ;
66187: GO 67920
// for i = 1 to mc_bases do
66189: LD_ADDR_VAR 0 2
66193: PUSH
66194: DOUBLE
66195: LD_INT 1
66197: DEC
66198: ST_TO_ADDR
66199: LD_EXP 52
66203: PUSH
66204: FOR_TO
66205: IFFALSE 67918
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
66207: LD_EXP 52
66211: PUSH
66212: LD_VAR 0 2
66216: ARRAY
66217: NOT
66218: PUSH
66219: LD_EXP 59
66223: PUSH
66224: LD_VAR 0 2
66228: ARRAY
66229: OR
66230: IFFALSE 66234
// continue ;
66232: GO 66204
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
66234: LD_EXP 68
66238: PUSH
66239: LD_VAR 0 2
66243: ARRAY
66244: NOT
66245: PUSH
66246: LD_EXP 69
66250: PUSH
66251: LD_VAR 0 2
66255: ARRAY
66256: AND
66257: IFFALSE 66295
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
66259: LD_ADDR_EXP 69
66263: PUSH
66264: LD_EXP 69
66268: PPUSH
66269: LD_VAR 0 2
66273: PPUSH
66274: EMPTY
66275: PPUSH
66276: CALL_OW 1
66280: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
66281: LD_VAR 0 2
66285: PPUSH
66286: LD_INT 107
66288: PPUSH
66289: CALL 57384 0 2
// continue ;
66293: GO 66204
// end ; target := [ ] ;
66295: LD_ADDR_VAR 0 6
66299: PUSH
66300: EMPTY
66301: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
66302: LD_ADDR_VAR 0 3
66306: PUSH
66307: DOUBLE
66308: LD_EXP 68
66312: PUSH
66313: LD_VAR 0 2
66317: ARRAY
66318: INC
66319: ST_TO_ADDR
66320: LD_INT 1
66322: PUSH
66323: FOR_DOWNTO
66324: IFFALSE 66584
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
66326: LD_EXP 68
66330: PUSH
66331: LD_VAR 0 2
66335: ARRAY
66336: PUSH
66337: LD_VAR 0 3
66341: ARRAY
66342: PUSH
66343: LD_INT 2
66345: ARRAY
66346: PPUSH
66347: LD_EXP 68
66351: PUSH
66352: LD_VAR 0 2
66356: ARRAY
66357: PUSH
66358: LD_VAR 0 3
66362: ARRAY
66363: PUSH
66364: LD_INT 3
66366: ARRAY
66367: PPUSH
66368: CALL_OW 488
66372: PUSH
66373: LD_EXP 68
66377: PUSH
66378: LD_VAR 0 2
66382: ARRAY
66383: PUSH
66384: LD_VAR 0 3
66388: ARRAY
66389: PUSH
66390: LD_INT 2
66392: ARRAY
66393: PPUSH
66394: LD_EXP 68
66398: PUSH
66399: LD_VAR 0 2
66403: ARRAY
66404: PUSH
66405: LD_VAR 0 3
66409: ARRAY
66410: PUSH
66411: LD_INT 3
66413: ARRAY
66414: PPUSH
66415: CALL_OW 284
66419: PUSH
66420: LD_INT 0
66422: EQUAL
66423: AND
66424: IFFALSE 66479
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
66426: LD_ADDR_VAR 0 5
66430: PUSH
66431: LD_EXP 68
66435: PUSH
66436: LD_VAR 0 2
66440: ARRAY
66441: PPUSH
66442: LD_VAR 0 3
66446: PPUSH
66447: CALL_OW 3
66451: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
66452: LD_ADDR_EXP 68
66456: PUSH
66457: LD_EXP 68
66461: PPUSH
66462: LD_VAR 0 2
66466: PPUSH
66467: LD_VAR 0 5
66471: PPUSH
66472: CALL_OW 1
66476: ST_TO_ADDR
// continue ;
66477: GO 66323
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
66479: LD_EXP 52
66483: PUSH
66484: LD_VAR 0 2
66488: ARRAY
66489: PUSH
66490: LD_INT 1
66492: ARRAY
66493: PPUSH
66494: CALL_OW 255
66498: PPUSH
66499: LD_EXP 68
66503: PUSH
66504: LD_VAR 0 2
66508: ARRAY
66509: PUSH
66510: LD_VAR 0 3
66514: ARRAY
66515: PUSH
66516: LD_INT 2
66518: ARRAY
66519: PPUSH
66520: LD_EXP 68
66524: PUSH
66525: LD_VAR 0 2
66529: ARRAY
66530: PUSH
66531: LD_VAR 0 3
66535: ARRAY
66536: PUSH
66537: LD_INT 3
66539: ARRAY
66540: PPUSH
66541: LD_INT 30
66543: PPUSH
66544: CALL 18324 0 4
66548: PUSH
66549: LD_INT 4
66551: ARRAY
66552: PUSH
66553: LD_INT 0
66555: EQUAL
66556: IFFALSE 66582
// begin target := mc_crates [ i ] [ j ] ;
66558: LD_ADDR_VAR 0 6
66562: PUSH
66563: LD_EXP 68
66567: PUSH
66568: LD_VAR 0 2
66572: ARRAY
66573: PUSH
66574: LD_VAR 0 3
66578: ARRAY
66579: ST_TO_ADDR
// break ;
66580: GO 66584
// end ; end ;
66582: GO 66323
66584: POP
66585: POP
// if not target then
66586: LD_VAR 0 6
66590: NOT
66591: IFFALSE 66595
// continue ;
66593: GO 66204
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
66595: LD_ADDR_VAR 0 7
66599: PUSH
66600: LD_EXP 71
66604: PUSH
66605: LD_VAR 0 2
66609: ARRAY
66610: PPUSH
66611: LD_INT 2
66613: PUSH
66614: LD_INT 3
66616: PUSH
66617: LD_INT 58
66619: PUSH
66620: EMPTY
66621: LIST
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 61
66629: PUSH
66630: EMPTY
66631: LIST
66632: PUSH
66633: LD_INT 33
66635: PUSH
66636: LD_INT 5
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: LD_INT 33
66645: PUSH
66646: LD_INT 3
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: PUSH
66660: LD_INT 2
66662: PUSH
66663: LD_INT 34
66665: PUSH
66666: LD_INT 32
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 34
66675: PUSH
66676: LD_INT 51
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: LD_INT 34
66685: PUSH
66686: LD_INT 12
66688: PUSH
66689: EMPTY
66690: LIST
66691: LIST
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: LIST
66697: LIST
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: PPUSH
66703: CALL_OW 72
66707: ST_TO_ADDR
// if not cargo then
66708: LD_VAR 0 7
66712: NOT
66713: IFFALSE 67356
// begin if mc_crates_collector [ i ] < 5 then
66715: LD_EXP 69
66719: PUSH
66720: LD_VAR 0 2
66724: ARRAY
66725: PUSH
66726: LD_INT 5
66728: LESS
66729: IFFALSE 67095
// begin if mc_ape [ i ] then
66731: LD_EXP 81
66735: PUSH
66736: LD_VAR 0 2
66740: ARRAY
66741: IFFALSE 66788
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
66743: LD_ADDR_VAR 0 5
66747: PUSH
66748: LD_EXP 81
66752: PUSH
66753: LD_VAR 0 2
66757: ARRAY
66758: PPUSH
66759: LD_INT 25
66761: PUSH
66762: LD_INT 16
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PUSH
66769: LD_INT 24
66771: PUSH
66772: LD_INT 750
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: EMPTY
66780: LIST
66781: LIST
66782: PPUSH
66783: CALL_OW 72
66787: ST_TO_ADDR
// if not tmp then
66788: LD_VAR 0 5
66792: NOT
66793: IFFALSE 66840
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
66795: LD_ADDR_VAR 0 5
66799: PUSH
66800: LD_EXP 52
66804: PUSH
66805: LD_VAR 0 2
66809: ARRAY
66810: PPUSH
66811: LD_INT 25
66813: PUSH
66814: LD_INT 2
66816: PUSH
66817: EMPTY
66818: LIST
66819: LIST
66820: PUSH
66821: LD_INT 24
66823: PUSH
66824: LD_INT 750
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: PUSH
66831: EMPTY
66832: LIST
66833: LIST
66834: PPUSH
66835: CALL_OW 72
66839: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
66840: LD_EXP 81
66844: PUSH
66845: LD_VAR 0 2
66849: ARRAY
66850: PUSH
66851: LD_EXP 52
66855: PUSH
66856: LD_VAR 0 2
66860: ARRAY
66861: PPUSH
66862: LD_INT 25
66864: PUSH
66865: LD_INT 2
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 24
66874: PUSH
66875: LD_INT 750
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PPUSH
66886: CALL_OW 72
66890: AND
66891: PUSH
66892: LD_VAR 0 5
66896: PUSH
66897: LD_INT 5
66899: LESS
66900: AND
66901: IFFALSE 66983
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
66903: LD_ADDR_VAR 0 3
66907: PUSH
66908: LD_EXP 52
66912: PUSH
66913: LD_VAR 0 2
66917: ARRAY
66918: PPUSH
66919: LD_INT 25
66921: PUSH
66922: LD_INT 2
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: LD_INT 24
66931: PUSH
66932: LD_INT 750
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: PPUSH
66943: CALL_OW 72
66947: PUSH
66948: FOR_IN
66949: IFFALSE 66981
// begin tmp := tmp union j ;
66951: LD_ADDR_VAR 0 5
66955: PUSH
66956: LD_VAR 0 5
66960: PUSH
66961: LD_VAR 0 3
66965: UNION
66966: ST_TO_ADDR
// if tmp >= 5 then
66967: LD_VAR 0 5
66971: PUSH
66972: LD_INT 5
66974: GREATEREQUAL
66975: IFFALSE 66979
// break ;
66977: GO 66981
// end ;
66979: GO 66948
66981: POP
66982: POP
// end ; if not tmp then
66983: LD_VAR 0 5
66987: NOT
66988: IFFALSE 66992
// continue ;
66990: GO 66204
// for j in tmp do
66992: LD_ADDR_VAR 0 3
66996: PUSH
66997: LD_VAR 0 5
67001: PUSH
67002: FOR_IN
67003: IFFALSE 67093
// if not GetTag ( j ) then
67005: LD_VAR 0 3
67009: PPUSH
67010: CALL_OW 110
67014: NOT
67015: IFFALSE 67091
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
67017: LD_ADDR_EXP 69
67021: PUSH
67022: LD_EXP 69
67026: PPUSH
67027: LD_VAR 0 2
67031: PUSH
67032: LD_EXP 69
67036: PUSH
67037: LD_VAR 0 2
67041: ARRAY
67042: PUSH
67043: LD_INT 1
67045: PLUS
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PPUSH
67051: LD_VAR 0 3
67055: PPUSH
67056: CALL 17428 0 3
67060: ST_TO_ADDR
// SetTag ( j , 107 ) ;
67061: LD_VAR 0 3
67065: PPUSH
67066: LD_INT 107
67068: PPUSH
67069: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
67073: LD_EXP 69
67077: PUSH
67078: LD_VAR 0 2
67082: ARRAY
67083: PUSH
67084: LD_INT 5
67086: GREATEREQUAL
67087: IFFALSE 67091
// break ;
67089: GO 67093
// end ;
67091: GO 67002
67093: POP
67094: POP
// end ; if mc_crates_collector [ i ] and target then
67095: LD_EXP 69
67099: PUSH
67100: LD_VAR 0 2
67104: ARRAY
67105: PUSH
67106: LD_VAR 0 6
67110: AND
67111: IFFALSE 67354
// begin if mc_crates_collector [ i ] < target [ 1 ] then
67113: LD_EXP 69
67117: PUSH
67118: LD_VAR 0 2
67122: ARRAY
67123: PUSH
67124: LD_VAR 0 6
67128: PUSH
67129: LD_INT 1
67131: ARRAY
67132: LESS
67133: IFFALSE 67153
// tmp := mc_crates_collector [ i ] else
67135: LD_ADDR_VAR 0 5
67139: PUSH
67140: LD_EXP 69
67144: PUSH
67145: LD_VAR 0 2
67149: ARRAY
67150: ST_TO_ADDR
67151: GO 67167
// tmp := target [ 1 ] ;
67153: LD_ADDR_VAR 0 5
67157: PUSH
67158: LD_VAR 0 6
67162: PUSH
67163: LD_INT 1
67165: ARRAY
67166: ST_TO_ADDR
// k := 0 ;
67167: LD_ADDR_VAR 0 4
67171: PUSH
67172: LD_INT 0
67174: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
67175: LD_ADDR_VAR 0 3
67179: PUSH
67180: LD_EXP 69
67184: PUSH
67185: LD_VAR 0 2
67189: ARRAY
67190: PUSH
67191: FOR_IN
67192: IFFALSE 67352
// begin k := k + 1 ;
67194: LD_ADDR_VAR 0 4
67198: PUSH
67199: LD_VAR 0 4
67203: PUSH
67204: LD_INT 1
67206: PLUS
67207: ST_TO_ADDR
// if k > tmp then
67208: LD_VAR 0 4
67212: PUSH
67213: LD_VAR 0 5
67217: GREATER
67218: IFFALSE 67222
// break ;
67220: GO 67352
// if not GetClass ( j ) in [ 2 , 16 ] then
67222: LD_VAR 0 3
67226: PPUSH
67227: CALL_OW 257
67231: PUSH
67232: LD_INT 2
67234: PUSH
67235: LD_INT 16
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: IN
67242: NOT
67243: IFFALSE 67296
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
67245: LD_ADDR_EXP 69
67249: PUSH
67250: LD_EXP 69
67254: PPUSH
67255: LD_VAR 0 2
67259: PPUSH
67260: LD_EXP 69
67264: PUSH
67265: LD_VAR 0 2
67269: ARRAY
67270: PUSH
67271: LD_VAR 0 3
67275: DIFF
67276: PPUSH
67277: CALL_OW 1
67281: ST_TO_ADDR
// SetTag ( j , 0 ) ;
67282: LD_VAR 0 3
67286: PPUSH
67287: LD_INT 0
67289: PPUSH
67290: CALL_OW 109
// continue ;
67294: GO 67191
// end ; if IsInUnit ( j ) then
67296: LD_VAR 0 3
67300: PPUSH
67301: CALL_OW 310
67305: IFFALSE 67316
// ComExitBuilding ( j ) ;
67307: LD_VAR 0 3
67311: PPUSH
67312: CALL_OW 122
// wait ( 3 ) ;
67316: LD_INT 3
67318: PPUSH
67319: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
67323: LD_VAR 0 3
67327: PPUSH
67328: LD_VAR 0 6
67332: PUSH
67333: LD_INT 2
67335: ARRAY
67336: PPUSH
67337: LD_VAR 0 6
67341: PUSH
67342: LD_INT 3
67344: ARRAY
67345: PPUSH
67346: CALL_OW 117
// end ;
67350: GO 67191
67352: POP
67353: POP
// end ; end else
67354: GO 67916
// begin for j in cargo do
67356: LD_ADDR_VAR 0 3
67360: PUSH
67361: LD_VAR 0 7
67365: PUSH
67366: FOR_IN
67367: IFFALSE 67914
// begin if GetTag ( j ) <> 0 then
67369: LD_VAR 0 3
67373: PPUSH
67374: CALL_OW 110
67378: PUSH
67379: LD_INT 0
67381: NONEQUAL
67382: IFFALSE 67386
// continue ;
67384: GO 67366
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
67386: LD_VAR 0 3
67390: PPUSH
67391: CALL_OW 256
67395: PUSH
67396: LD_INT 1000
67398: LESS
67399: PUSH
67400: LD_VAR 0 3
67404: PPUSH
67405: LD_EXP 76
67409: PUSH
67410: LD_VAR 0 2
67414: ARRAY
67415: PPUSH
67416: CALL_OW 308
67420: NOT
67421: AND
67422: IFFALSE 67444
// ComMoveToArea ( j , mc_parking [ i ] ) ;
67424: LD_VAR 0 3
67428: PPUSH
67429: LD_EXP 76
67433: PUSH
67434: LD_VAR 0 2
67438: ARRAY
67439: PPUSH
67440: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
67444: LD_VAR 0 3
67448: PPUSH
67449: CALL_OW 256
67453: PUSH
67454: LD_INT 1000
67456: LESS
67457: PUSH
67458: LD_VAR 0 3
67462: PPUSH
67463: LD_EXP 76
67467: PUSH
67468: LD_VAR 0 2
67472: ARRAY
67473: PPUSH
67474: CALL_OW 308
67478: AND
67479: IFFALSE 67483
// continue ;
67481: GO 67366
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
67483: LD_VAR 0 3
67487: PPUSH
67488: CALL_OW 262
67492: PUSH
67493: LD_INT 2
67495: EQUAL
67496: PUSH
67497: LD_VAR 0 3
67501: PPUSH
67502: CALL_OW 261
67506: PUSH
67507: LD_INT 15
67509: LESS
67510: AND
67511: IFFALSE 67515
// continue ;
67513: GO 67366
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
67515: LD_VAR 0 3
67519: PPUSH
67520: CALL_OW 262
67524: PUSH
67525: LD_INT 1
67527: EQUAL
67528: PUSH
67529: LD_VAR 0 3
67533: PPUSH
67534: CALL_OW 261
67538: PUSH
67539: LD_INT 10
67541: LESS
67542: AND
67543: IFFALSE 67853
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
67545: LD_ADDR_VAR 0 8
67549: PUSH
67550: LD_EXP 52
67554: PUSH
67555: LD_VAR 0 2
67559: ARRAY
67560: PPUSH
67561: LD_INT 2
67563: PUSH
67564: LD_INT 30
67566: PUSH
67567: LD_INT 0
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: LD_INT 30
67576: PUSH
67577: LD_INT 1
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: PUSH
67584: EMPTY
67585: LIST
67586: LIST
67587: LIST
67588: PPUSH
67589: CALL_OW 72
67593: ST_TO_ADDR
// if not depot then
67594: LD_VAR 0 8
67598: NOT
67599: IFFALSE 67603
// continue ;
67601: GO 67366
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
67603: LD_VAR 0 3
67607: PPUSH
67608: LD_VAR 0 8
67612: PPUSH
67613: LD_VAR 0 3
67617: PPUSH
67618: CALL_OW 74
67622: PPUSH
67623: CALL_OW 296
67627: PUSH
67628: LD_INT 6
67630: LESS
67631: IFFALSE 67647
// SetFuel ( j , 100 ) else
67633: LD_VAR 0 3
67637: PPUSH
67638: LD_INT 100
67640: PPUSH
67641: CALL_OW 240
67645: GO 67853
// if GetFuel ( j ) = 0 then
67647: LD_VAR 0 3
67651: PPUSH
67652: CALL_OW 261
67656: PUSH
67657: LD_INT 0
67659: EQUAL
67660: IFFALSE 67853
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
67662: LD_ADDR_EXP 71
67666: PUSH
67667: LD_EXP 71
67671: PPUSH
67672: LD_VAR 0 2
67676: PPUSH
67677: LD_EXP 71
67681: PUSH
67682: LD_VAR 0 2
67686: ARRAY
67687: PUSH
67688: LD_VAR 0 3
67692: DIFF
67693: PPUSH
67694: CALL_OW 1
67698: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
67699: LD_VAR 0 3
67703: PPUSH
67704: CALL_OW 263
67708: PUSH
67709: LD_INT 1
67711: EQUAL
67712: IFFALSE 67728
// ComExitVehicle ( IsInUnit ( j ) ) ;
67714: LD_VAR 0 3
67718: PPUSH
67719: CALL_OW 310
67723: PPUSH
67724: CALL_OW 121
// if GetControl ( j ) = control_remote then
67728: LD_VAR 0 3
67732: PPUSH
67733: CALL_OW 263
67737: PUSH
67738: LD_INT 2
67740: EQUAL
67741: IFFALSE 67752
// ComUnlink ( j ) ;
67743: LD_VAR 0 3
67747: PPUSH
67748: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
67752: LD_ADDR_VAR 0 9
67756: PUSH
67757: LD_VAR 0 2
67761: PPUSH
67762: LD_INT 3
67764: PPUSH
67765: CALL 76899 0 2
67769: ST_TO_ADDR
// if fac then
67770: LD_VAR 0 9
67774: IFFALSE 67851
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
67776: LD_ADDR_VAR 0 10
67780: PUSH
67781: LD_VAR 0 9
67785: PPUSH
67786: LD_VAR 0 3
67790: PPUSH
67791: CALL_OW 265
67795: PPUSH
67796: LD_VAR 0 3
67800: PPUSH
67801: CALL_OW 262
67805: PPUSH
67806: LD_VAR 0 3
67810: PPUSH
67811: CALL_OW 263
67815: PPUSH
67816: LD_VAR 0 3
67820: PPUSH
67821: CALL_OW 264
67825: PPUSH
67826: CALL 15021 0 5
67830: ST_TO_ADDR
// if components then
67831: LD_VAR 0 10
67835: IFFALSE 67851
// MC_InsertProduceList ( i , components ) ;
67837: LD_VAR 0 2
67841: PPUSH
67842: LD_VAR 0 10
67846: PPUSH
67847: CALL 76527 0 2
// end ; continue ;
67851: GO 67366
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
67853: LD_VAR 0 3
67857: PPUSH
67858: LD_INT 1
67860: PPUSH
67861: CALL_OW 289
67865: PUSH
67866: LD_INT 100
67868: LESS
67869: PUSH
67870: LD_VAR 0 3
67874: PPUSH
67875: CALL_OW 314
67879: NOT
67880: AND
67881: IFFALSE 67910
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
67883: LD_VAR 0 3
67887: PPUSH
67888: LD_VAR 0 6
67892: PUSH
67893: LD_INT 2
67895: ARRAY
67896: PPUSH
67897: LD_VAR 0 6
67901: PUSH
67902: LD_INT 3
67904: ARRAY
67905: PPUSH
67906: CALL_OW 117
// break ;
67910: GO 67914
// end ;
67912: GO 67366
67914: POP
67915: POP
// end ; end ;
67916: GO 66204
67918: POP
67919: POP
// end ;
67920: LD_VAR 0 1
67924: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
67925: LD_INT 0
67927: PPUSH
67928: PPUSH
67929: PPUSH
67930: PPUSH
// if not mc_bases then
67931: LD_EXP 52
67935: NOT
67936: IFFALSE 67940
// exit ;
67938: GO 68101
// for i = 1 to mc_bases do
67940: LD_ADDR_VAR 0 2
67944: PUSH
67945: DOUBLE
67946: LD_INT 1
67948: DEC
67949: ST_TO_ADDR
67950: LD_EXP 52
67954: PUSH
67955: FOR_TO
67956: IFFALSE 68099
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
67958: LD_ADDR_VAR 0 4
67962: PUSH
67963: LD_EXP 71
67967: PUSH
67968: LD_VAR 0 2
67972: ARRAY
67973: PUSH
67974: LD_EXP 74
67978: PUSH
67979: LD_VAR 0 2
67983: ARRAY
67984: UNION
67985: PPUSH
67986: LD_INT 33
67988: PUSH
67989: LD_INT 2
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: PPUSH
67996: CALL_OW 72
68000: ST_TO_ADDR
// if tmp then
68001: LD_VAR 0 4
68005: IFFALSE 68097
// for j in tmp do
68007: LD_ADDR_VAR 0 3
68011: PUSH
68012: LD_VAR 0 4
68016: PUSH
68017: FOR_IN
68018: IFFALSE 68095
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
68020: LD_VAR 0 3
68024: PPUSH
68025: CALL_OW 312
68029: NOT
68030: PUSH
68031: LD_VAR 0 3
68035: PPUSH
68036: CALL_OW 256
68040: PUSH
68041: LD_INT 250
68043: GREATEREQUAL
68044: AND
68045: IFFALSE 68058
// Connect ( j ) else
68047: LD_VAR 0 3
68051: PPUSH
68052: CALL 20361 0 1
68056: GO 68093
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
68058: LD_VAR 0 3
68062: PPUSH
68063: CALL_OW 256
68067: PUSH
68068: LD_INT 250
68070: LESS
68071: PUSH
68072: LD_VAR 0 3
68076: PPUSH
68077: CALL_OW 312
68081: AND
68082: IFFALSE 68093
// ComUnlink ( j ) ;
68084: LD_VAR 0 3
68088: PPUSH
68089: CALL_OW 136
68093: GO 68017
68095: POP
68096: POP
// end ;
68097: GO 67955
68099: POP
68100: POP
// end ;
68101: LD_VAR 0 1
68105: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
68106: LD_INT 0
68108: PPUSH
68109: PPUSH
68110: PPUSH
68111: PPUSH
68112: PPUSH
// if not mc_bases then
68113: LD_EXP 52
68117: NOT
68118: IFFALSE 68122
// exit ;
68120: GO 68582
// for i = 1 to mc_bases do
68122: LD_ADDR_VAR 0 2
68126: PUSH
68127: DOUBLE
68128: LD_INT 1
68130: DEC
68131: ST_TO_ADDR
68132: LD_EXP 52
68136: PUSH
68137: FOR_TO
68138: IFFALSE 68580
// begin if not mc_produce [ i ] then
68140: LD_EXP 73
68144: PUSH
68145: LD_VAR 0 2
68149: ARRAY
68150: NOT
68151: IFFALSE 68155
// continue ;
68153: GO 68137
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
68155: LD_ADDR_VAR 0 5
68159: PUSH
68160: LD_EXP 52
68164: PUSH
68165: LD_VAR 0 2
68169: ARRAY
68170: PPUSH
68171: LD_INT 30
68173: PUSH
68174: LD_INT 3
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: PPUSH
68181: CALL_OW 72
68185: ST_TO_ADDR
// if not fac then
68186: LD_VAR 0 5
68190: NOT
68191: IFFALSE 68195
// continue ;
68193: GO 68137
// for j in fac do
68195: LD_ADDR_VAR 0 3
68199: PUSH
68200: LD_VAR 0 5
68204: PUSH
68205: FOR_IN
68206: IFFALSE 68576
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
68208: LD_VAR 0 3
68212: PPUSH
68213: CALL_OW 461
68217: PUSH
68218: LD_INT 2
68220: NONEQUAL
68221: PUSH
68222: LD_VAR 0 3
68226: PPUSH
68227: LD_INT 15
68229: PPUSH
68230: CALL 20021 0 2
68234: PUSH
68235: LD_INT 4
68237: ARRAY
68238: OR
68239: PUSH
68240: LD_VAR 0 3
68244: PPUSH
68245: CALL_OW 313
68249: PUSH
68250: LD_INT 0
68252: EQUAL
68253: OR
68254: IFFALSE 68258
// continue ;
68256: GO 68205
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
68258: LD_VAR 0 3
68262: PPUSH
68263: LD_EXP 73
68267: PUSH
68268: LD_VAR 0 2
68272: ARRAY
68273: PUSH
68274: LD_INT 1
68276: ARRAY
68277: PUSH
68278: LD_INT 1
68280: ARRAY
68281: PPUSH
68282: LD_EXP 73
68286: PUSH
68287: LD_VAR 0 2
68291: ARRAY
68292: PUSH
68293: LD_INT 1
68295: ARRAY
68296: PUSH
68297: LD_INT 2
68299: ARRAY
68300: PPUSH
68301: LD_EXP 73
68305: PUSH
68306: LD_VAR 0 2
68310: ARRAY
68311: PUSH
68312: LD_INT 1
68314: ARRAY
68315: PUSH
68316: LD_INT 3
68318: ARRAY
68319: PPUSH
68320: LD_EXP 73
68324: PUSH
68325: LD_VAR 0 2
68329: ARRAY
68330: PUSH
68331: LD_INT 1
68333: ARRAY
68334: PUSH
68335: LD_INT 4
68337: ARRAY
68338: PPUSH
68339: CALL_OW 448
68343: PUSH
68344: LD_VAR 0 3
68348: PPUSH
68349: LD_EXP 73
68353: PUSH
68354: LD_VAR 0 2
68358: ARRAY
68359: PUSH
68360: LD_INT 1
68362: ARRAY
68363: PUSH
68364: LD_INT 1
68366: ARRAY
68367: PUSH
68368: LD_EXP 73
68372: PUSH
68373: LD_VAR 0 2
68377: ARRAY
68378: PUSH
68379: LD_INT 1
68381: ARRAY
68382: PUSH
68383: LD_INT 2
68385: ARRAY
68386: PUSH
68387: LD_EXP 73
68391: PUSH
68392: LD_VAR 0 2
68396: ARRAY
68397: PUSH
68398: LD_INT 1
68400: ARRAY
68401: PUSH
68402: LD_INT 3
68404: ARRAY
68405: PUSH
68406: LD_EXP 73
68410: PUSH
68411: LD_VAR 0 2
68415: ARRAY
68416: PUSH
68417: LD_INT 1
68419: ARRAY
68420: PUSH
68421: LD_INT 4
68423: ARRAY
68424: PUSH
68425: EMPTY
68426: LIST
68427: LIST
68428: LIST
68429: LIST
68430: PPUSH
68431: CALL 23692 0 2
68435: AND
68436: IFFALSE 68574
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
68438: LD_VAR 0 3
68442: PPUSH
68443: LD_EXP 73
68447: PUSH
68448: LD_VAR 0 2
68452: ARRAY
68453: PUSH
68454: LD_INT 1
68456: ARRAY
68457: PUSH
68458: LD_INT 1
68460: ARRAY
68461: PPUSH
68462: LD_EXP 73
68466: PUSH
68467: LD_VAR 0 2
68471: ARRAY
68472: PUSH
68473: LD_INT 1
68475: ARRAY
68476: PUSH
68477: LD_INT 2
68479: ARRAY
68480: PPUSH
68481: LD_EXP 73
68485: PUSH
68486: LD_VAR 0 2
68490: ARRAY
68491: PUSH
68492: LD_INT 1
68494: ARRAY
68495: PUSH
68496: LD_INT 3
68498: ARRAY
68499: PPUSH
68500: LD_EXP 73
68504: PUSH
68505: LD_VAR 0 2
68509: ARRAY
68510: PUSH
68511: LD_INT 1
68513: ARRAY
68514: PUSH
68515: LD_INT 4
68517: ARRAY
68518: PPUSH
68519: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
68523: LD_ADDR_VAR 0 4
68527: PUSH
68528: LD_EXP 73
68532: PUSH
68533: LD_VAR 0 2
68537: ARRAY
68538: PPUSH
68539: LD_INT 1
68541: PPUSH
68542: CALL_OW 3
68546: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
68547: LD_ADDR_EXP 73
68551: PUSH
68552: LD_EXP 73
68556: PPUSH
68557: LD_VAR 0 2
68561: PPUSH
68562: LD_VAR 0 4
68566: PPUSH
68567: CALL_OW 1
68571: ST_TO_ADDR
// break ;
68572: GO 68576
// end ; end ;
68574: GO 68205
68576: POP
68577: POP
// end ;
68578: GO 68137
68580: POP
68581: POP
// end ;
68582: LD_VAR 0 1
68586: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
68587: LD_INT 0
68589: PPUSH
68590: PPUSH
68591: PPUSH
// if not mc_bases then
68592: LD_EXP 52
68596: NOT
68597: IFFALSE 68601
// exit ;
68599: GO 68690
// for i = 1 to mc_bases do
68601: LD_ADDR_VAR 0 2
68605: PUSH
68606: DOUBLE
68607: LD_INT 1
68609: DEC
68610: ST_TO_ADDR
68611: LD_EXP 52
68615: PUSH
68616: FOR_TO
68617: IFFALSE 68688
// begin if mc_attack [ i ] then
68619: LD_EXP 72
68623: PUSH
68624: LD_VAR 0 2
68628: ARRAY
68629: IFFALSE 68686
// begin tmp := mc_attack [ i ] [ 1 ] ;
68631: LD_ADDR_VAR 0 3
68635: PUSH
68636: LD_EXP 72
68640: PUSH
68641: LD_VAR 0 2
68645: ARRAY
68646: PUSH
68647: LD_INT 1
68649: ARRAY
68650: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
68651: LD_ADDR_EXP 72
68655: PUSH
68656: LD_EXP 72
68660: PPUSH
68661: LD_VAR 0 2
68665: PPUSH
68666: EMPTY
68667: PPUSH
68668: CALL_OW 1
68672: ST_TO_ADDR
// Attack ( tmp ) ;
68673: LD_VAR 0 3
68677: PPUSH
68678: CALL 45899 0 1
// exit ;
68682: POP
68683: POP
68684: GO 68690
// end ; end ;
68686: GO 68616
68688: POP
68689: POP
// end ;
68690: LD_VAR 0 1
68694: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
68695: LD_INT 0
68697: PPUSH
68698: PPUSH
68699: PPUSH
68700: PPUSH
68701: PPUSH
68702: PPUSH
68703: PPUSH
// if not mc_bases then
68704: LD_EXP 52
68708: NOT
68709: IFFALSE 68713
// exit ;
68711: GO 69295
// for i = 1 to mc_bases do
68713: LD_ADDR_VAR 0 2
68717: PUSH
68718: DOUBLE
68719: LD_INT 1
68721: DEC
68722: ST_TO_ADDR
68723: LD_EXP 52
68727: PUSH
68728: FOR_TO
68729: IFFALSE 69293
// begin if not mc_bases [ i ] then
68731: LD_EXP 52
68735: PUSH
68736: LD_VAR 0 2
68740: ARRAY
68741: NOT
68742: IFFALSE 68746
// continue ;
68744: GO 68728
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
68746: LD_ADDR_VAR 0 7
68750: PUSH
68751: LD_EXP 52
68755: PUSH
68756: LD_VAR 0 2
68760: ARRAY
68761: PUSH
68762: LD_INT 1
68764: ARRAY
68765: PPUSH
68766: CALL 14325 0 1
68770: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
68771: LD_ADDR_EXP 75
68775: PUSH
68776: LD_EXP 75
68780: PPUSH
68781: LD_VAR 0 2
68785: PPUSH
68786: LD_EXP 52
68790: PUSH
68791: LD_VAR 0 2
68795: ARRAY
68796: PUSH
68797: LD_INT 1
68799: ARRAY
68800: PPUSH
68801: CALL_OW 255
68805: PPUSH
68806: LD_EXP 77
68810: PUSH
68811: LD_VAR 0 2
68815: ARRAY
68816: PPUSH
68817: CALL 12322 0 2
68821: PPUSH
68822: CALL_OW 1
68826: ST_TO_ADDR
// if not mc_scan [ i ] then
68827: LD_EXP 75
68831: PUSH
68832: LD_VAR 0 2
68836: ARRAY
68837: NOT
68838: IFFALSE 68993
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
68840: LD_ADDR_VAR 0 4
68844: PUSH
68845: LD_EXP 52
68849: PUSH
68850: LD_VAR 0 2
68854: ARRAY
68855: PPUSH
68856: LD_INT 2
68858: PUSH
68859: LD_INT 25
68861: PUSH
68862: LD_INT 5
68864: PUSH
68865: EMPTY
68866: LIST
68867: LIST
68868: PUSH
68869: LD_INT 25
68871: PUSH
68872: LD_INT 8
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: PUSH
68879: LD_INT 25
68881: PUSH
68882: LD_INT 9
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PUSH
68889: EMPTY
68890: LIST
68891: LIST
68892: LIST
68893: LIST
68894: PPUSH
68895: CALL_OW 72
68899: ST_TO_ADDR
// if not tmp then
68900: LD_VAR 0 4
68904: NOT
68905: IFFALSE 68909
// continue ;
68907: GO 68728
// for j in tmp do
68909: LD_ADDR_VAR 0 3
68913: PUSH
68914: LD_VAR 0 4
68918: PUSH
68919: FOR_IN
68920: IFFALSE 68991
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
68922: LD_VAR 0 3
68926: PPUSH
68927: CALL_OW 310
68931: PPUSH
68932: CALL_OW 266
68936: PUSH
68937: LD_INT 5
68939: EQUAL
68940: PUSH
68941: LD_VAR 0 3
68945: PPUSH
68946: CALL_OW 257
68950: PUSH
68951: LD_INT 1
68953: EQUAL
68954: AND
68955: PUSH
68956: LD_VAR 0 3
68960: PPUSH
68961: CALL_OW 459
68965: NOT
68966: AND
68967: PUSH
68968: LD_VAR 0 7
68972: AND
68973: IFFALSE 68989
// ComChangeProfession ( j , class ) ;
68975: LD_VAR 0 3
68979: PPUSH
68980: LD_VAR 0 7
68984: PPUSH
68985: CALL_OW 123
68989: GO 68919
68991: POP
68992: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
68993: LD_EXP 75
68997: PUSH
68998: LD_VAR 0 2
69002: ARRAY
69003: PUSH
69004: LD_EXP 74
69008: PUSH
69009: LD_VAR 0 2
69013: ARRAY
69014: NOT
69015: AND
69016: PUSH
69017: LD_EXP 52
69021: PUSH
69022: LD_VAR 0 2
69026: ARRAY
69027: PPUSH
69028: LD_INT 30
69030: PUSH
69031: LD_INT 32
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PPUSH
69038: CALL_OW 72
69042: NOT
69043: AND
69044: PUSH
69045: LD_EXP 52
69049: PUSH
69050: LD_VAR 0 2
69054: ARRAY
69055: PPUSH
69056: LD_INT 2
69058: PUSH
69059: LD_INT 30
69061: PUSH
69062: LD_INT 4
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PUSH
69069: LD_INT 30
69071: PUSH
69072: LD_INT 5
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: PUSH
69079: EMPTY
69080: LIST
69081: LIST
69082: LIST
69083: PPUSH
69084: CALL_OW 72
69088: NOT
69089: AND
69090: IFFALSE 69222
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
69092: LD_ADDR_VAR 0 4
69096: PUSH
69097: LD_EXP 52
69101: PUSH
69102: LD_VAR 0 2
69106: ARRAY
69107: PPUSH
69108: LD_INT 2
69110: PUSH
69111: LD_INT 25
69113: PUSH
69114: LD_INT 1
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: PUSH
69121: LD_INT 25
69123: PUSH
69124: LD_INT 5
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: PUSH
69131: LD_INT 25
69133: PUSH
69134: LD_INT 8
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: PUSH
69141: LD_INT 25
69143: PUSH
69144: LD_INT 9
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: LIST
69155: LIST
69156: LIST
69157: PPUSH
69158: CALL_OW 72
69162: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
69163: LD_ADDR_VAR 0 4
69167: PUSH
69168: LD_VAR 0 4
69172: PUSH
69173: LD_VAR 0 4
69177: PPUSH
69178: LD_INT 18
69180: PPUSH
69181: CALL 50682 0 2
69185: DIFF
69186: ST_TO_ADDR
// if tmp then
69187: LD_VAR 0 4
69191: IFFALSE 69222
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
69193: LD_VAR 0 2
69197: PPUSH
69198: LD_VAR 0 4
69202: PPUSH
69203: LD_EXP 77
69207: PUSH
69208: LD_VAR 0 2
69212: ARRAY
69213: PPUSH
69214: CALL 12357 0 3
// exit ;
69218: POP
69219: POP
69220: GO 69295
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
69222: LD_EXP 75
69226: PUSH
69227: LD_VAR 0 2
69231: ARRAY
69232: PUSH
69233: LD_EXP 74
69237: PUSH
69238: LD_VAR 0 2
69242: ARRAY
69243: AND
69244: IFFALSE 69291
// begin tmp := mc_defender [ i ] ;
69246: LD_ADDR_VAR 0 4
69250: PUSH
69251: LD_EXP 74
69255: PUSH
69256: LD_VAR 0 2
69260: ARRAY
69261: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
69262: LD_VAR 0 2
69266: PPUSH
69267: LD_VAR 0 4
69271: PPUSH
69272: LD_EXP 75
69276: PUSH
69277: LD_VAR 0 2
69281: ARRAY
69282: PPUSH
69283: CALL 12855 0 3
// exit ;
69287: POP
69288: POP
69289: GO 69295
// end ; end ;
69291: GO 68728
69293: POP
69294: POP
// end ;
69295: LD_VAR 0 1
69299: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
69300: LD_INT 0
69302: PPUSH
69303: PPUSH
69304: PPUSH
69305: PPUSH
69306: PPUSH
69307: PPUSH
69308: PPUSH
69309: PPUSH
69310: PPUSH
69311: PPUSH
69312: PPUSH
// if not mc_bases then
69313: LD_EXP 52
69317: NOT
69318: IFFALSE 69322
// exit ;
69320: GO 70409
// for i = 1 to mc_bases do
69322: LD_ADDR_VAR 0 2
69326: PUSH
69327: DOUBLE
69328: LD_INT 1
69330: DEC
69331: ST_TO_ADDR
69332: LD_EXP 52
69336: PUSH
69337: FOR_TO
69338: IFFALSE 70407
// begin tmp := mc_lab [ i ] ;
69340: LD_ADDR_VAR 0 6
69344: PUSH
69345: LD_EXP 85
69349: PUSH
69350: LD_VAR 0 2
69354: ARRAY
69355: ST_TO_ADDR
// if not tmp then
69356: LD_VAR 0 6
69360: NOT
69361: IFFALSE 69365
// continue ;
69363: GO 69337
// idle_lab := 0 ;
69365: LD_ADDR_VAR 0 11
69369: PUSH
69370: LD_INT 0
69372: ST_TO_ADDR
// for j in tmp do
69373: LD_ADDR_VAR 0 3
69377: PUSH
69378: LD_VAR 0 6
69382: PUSH
69383: FOR_IN
69384: IFFALSE 70403
// begin researching := false ;
69386: LD_ADDR_VAR 0 10
69390: PUSH
69391: LD_INT 0
69393: ST_TO_ADDR
// side := GetSide ( j ) ;
69394: LD_ADDR_VAR 0 4
69398: PUSH
69399: LD_VAR 0 3
69403: PPUSH
69404: CALL_OW 255
69408: ST_TO_ADDR
// if not mc_tech [ side ] then
69409: LD_EXP 79
69413: PUSH
69414: LD_VAR 0 4
69418: ARRAY
69419: NOT
69420: IFFALSE 69424
// continue ;
69422: GO 69383
// if BuildingStatus ( j ) = bs_idle then
69424: LD_VAR 0 3
69428: PPUSH
69429: CALL_OW 461
69433: PUSH
69434: LD_INT 2
69436: EQUAL
69437: IFFALSE 69625
// begin if idle_lab and UnitsInside ( j ) < 6 then
69439: LD_VAR 0 11
69443: PUSH
69444: LD_VAR 0 3
69448: PPUSH
69449: CALL_OW 313
69453: PUSH
69454: LD_INT 6
69456: LESS
69457: AND
69458: IFFALSE 69529
// begin tmp2 := UnitsInside ( idle_lab ) ;
69460: LD_ADDR_VAR 0 9
69464: PUSH
69465: LD_VAR 0 11
69469: PPUSH
69470: CALL_OW 313
69474: ST_TO_ADDR
// if tmp2 then
69475: LD_VAR 0 9
69479: IFFALSE 69521
// for x in tmp2 do
69481: LD_ADDR_VAR 0 7
69485: PUSH
69486: LD_VAR 0 9
69490: PUSH
69491: FOR_IN
69492: IFFALSE 69519
// begin ComExitBuilding ( x ) ;
69494: LD_VAR 0 7
69498: PPUSH
69499: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
69503: LD_VAR 0 7
69507: PPUSH
69508: LD_VAR 0 3
69512: PPUSH
69513: CALL_OW 180
// end ;
69517: GO 69491
69519: POP
69520: POP
// idle_lab := 0 ;
69521: LD_ADDR_VAR 0 11
69525: PUSH
69526: LD_INT 0
69528: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
69529: LD_ADDR_VAR 0 5
69533: PUSH
69534: LD_EXP 79
69538: PUSH
69539: LD_VAR 0 4
69543: ARRAY
69544: PUSH
69545: FOR_IN
69546: IFFALSE 69606
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
69548: LD_VAR 0 3
69552: PPUSH
69553: LD_VAR 0 5
69557: PPUSH
69558: CALL_OW 430
69562: PUSH
69563: LD_VAR 0 4
69567: PPUSH
69568: LD_VAR 0 5
69572: PPUSH
69573: CALL 11427 0 2
69577: AND
69578: IFFALSE 69604
// begin researching := true ;
69580: LD_ADDR_VAR 0 10
69584: PUSH
69585: LD_INT 1
69587: ST_TO_ADDR
// ComResearch ( j , t ) ;
69588: LD_VAR 0 3
69592: PPUSH
69593: LD_VAR 0 5
69597: PPUSH
69598: CALL_OW 124
// break ;
69602: GO 69606
// end ;
69604: GO 69545
69606: POP
69607: POP
// if not researching then
69608: LD_VAR 0 10
69612: NOT
69613: IFFALSE 69625
// idle_lab := j ;
69615: LD_ADDR_VAR 0 11
69619: PUSH
69620: LD_VAR 0 3
69624: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
69625: LD_VAR 0 3
69629: PPUSH
69630: CALL_OW 461
69634: PUSH
69635: LD_INT 10
69637: EQUAL
69638: IFFALSE 70226
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
69640: LD_EXP 81
69644: PUSH
69645: LD_VAR 0 2
69649: ARRAY
69650: NOT
69651: PUSH
69652: LD_EXP 82
69656: PUSH
69657: LD_VAR 0 2
69661: ARRAY
69662: NOT
69663: AND
69664: PUSH
69665: LD_EXP 79
69669: PUSH
69670: LD_VAR 0 4
69674: ARRAY
69675: PUSH
69676: LD_INT 1
69678: GREATER
69679: AND
69680: IFFALSE 69811
// begin ComCancel ( j ) ;
69682: LD_VAR 0 3
69686: PPUSH
69687: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
69691: LD_ADDR_EXP 79
69695: PUSH
69696: LD_EXP 79
69700: PPUSH
69701: LD_VAR 0 4
69705: PPUSH
69706: LD_EXP 79
69710: PUSH
69711: LD_VAR 0 4
69715: ARRAY
69716: PPUSH
69717: LD_EXP 79
69721: PUSH
69722: LD_VAR 0 4
69726: ARRAY
69727: PUSH
69728: LD_INT 1
69730: MINUS
69731: PPUSH
69732: LD_EXP 79
69736: PUSH
69737: LD_VAR 0 4
69741: ARRAY
69742: PPUSH
69743: LD_INT 0
69745: PPUSH
69746: CALL 16846 0 4
69750: PPUSH
69751: CALL_OW 1
69755: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
69756: LD_ADDR_EXP 79
69760: PUSH
69761: LD_EXP 79
69765: PPUSH
69766: LD_VAR 0 4
69770: PPUSH
69771: LD_EXP 79
69775: PUSH
69776: LD_VAR 0 4
69780: ARRAY
69781: PPUSH
69782: LD_EXP 79
69786: PUSH
69787: LD_VAR 0 4
69791: ARRAY
69792: PPUSH
69793: LD_INT 1
69795: PPUSH
69796: LD_INT 0
69798: PPUSH
69799: CALL 16846 0 4
69803: PPUSH
69804: CALL_OW 1
69808: ST_TO_ADDR
// continue ;
69809: GO 69383
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
69811: LD_EXP 81
69815: PUSH
69816: LD_VAR 0 2
69820: ARRAY
69821: PUSH
69822: LD_EXP 82
69826: PUSH
69827: LD_VAR 0 2
69831: ARRAY
69832: NOT
69833: AND
69834: IFFALSE 69961
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
69836: LD_ADDR_EXP 82
69840: PUSH
69841: LD_EXP 82
69845: PPUSH
69846: LD_VAR 0 2
69850: PUSH
69851: LD_EXP 82
69855: PUSH
69856: LD_VAR 0 2
69860: ARRAY
69861: PUSH
69862: LD_INT 1
69864: PLUS
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: PPUSH
69870: LD_EXP 81
69874: PUSH
69875: LD_VAR 0 2
69879: ARRAY
69880: PUSH
69881: LD_INT 1
69883: ARRAY
69884: PPUSH
69885: CALL 17428 0 3
69889: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
69890: LD_EXP 81
69894: PUSH
69895: LD_VAR 0 2
69899: ARRAY
69900: PUSH
69901: LD_INT 1
69903: ARRAY
69904: PPUSH
69905: LD_INT 112
69907: PPUSH
69908: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
69912: LD_ADDR_VAR 0 9
69916: PUSH
69917: LD_EXP 81
69921: PUSH
69922: LD_VAR 0 2
69926: ARRAY
69927: PPUSH
69928: LD_INT 1
69930: PPUSH
69931: CALL_OW 3
69935: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
69936: LD_ADDR_EXP 81
69940: PUSH
69941: LD_EXP 81
69945: PPUSH
69946: LD_VAR 0 2
69950: PPUSH
69951: LD_VAR 0 9
69955: PPUSH
69956: CALL_OW 1
69960: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
69961: LD_EXP 81
69965: PUSH
69966: LD_VAR 0 2
69970: ARRAY
69971: PUSH
69972: LD_EXP 82
69976: PUSH
69977: LD_VAR 0 2
69981: ARRAY
69982: AND
69983: PUSH
69984: LD_EXP 82
69988: PUSH
69989: LD_VAR 0 2
69993: ARRAY
69994: PUSH
69995: LD_INT 1
69997: ARRAY
69998: PPUSH
69999: CALL_OW 310
70003: NOT
70004: AND
70005: PUSH
70006: LD_VAR 0 3
70010: PPUSH
70011: CALL_OW 313
70015: PUSH
70016: LD_INT 6
70018: EQUAL
70019: AND
70020: IFFALSE 70076
// begin tmp2 := UnitsInside ( j ) ;
70022: LD_ADDR_VAR 0 9
70026: PUSH
70027: LD_VAR 0 3
70031: PPUSH
70032: CALL_OW 313
70036: ST_TO_ADDR
// if tmp2 = 6 then
70037: LD_VAR 0 9
70041: PUSH
70042: LD_INT 6
70044: EQUAL
70045: IFFALSE 70076
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
70047: LD_VAR 0 9
70051: PUSH
70052: LD_INT 1
70054: ARRAY
70055: PPUSH
70056: LD_INT 112
70058: PPUSH
70059: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
70063: LD_VAR 0 9
70067: PUSH
70068: LD_INT 1
70070: ARRAY
70071: PPUSH
70072: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
70076: LD_EXP 82
70080: PUSH
70081: LD_VAR 0 2
70085: ARRAY
70086: PUSH
70087: LD_EXP 82
70091: PUSH
70092: LD_VAR 0 2
70096: ARRAY
70097: PUSH
70098: LD_INT 1
70100: ARRAY
70101: PPUSH
70102: CALL_OW 314
70106: NOT
70107: AND
70108: PUSH
70109: LD_EXP 82
70113: PUSH
70114: LD_VAR 0 2
70118: ARRAY
70119: PUSH
70120: LD_INT 1
70122: ARRAY
70123: PPUSH
70124: CALL_OW 310
70128: NOT
70129: AND
70130: IFFALSE 70156
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
70132: LD_EXP 82
70136: PUSH
70137: LD_VAR 0 2
70141: ARRAY
70142: PUSH
70143: LD_INT 1
70145: ARRAY
70146: PPUSH
70147: LD_VAR 0 3
70151: PPUSH
70152: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
70156: LD_EXP 82
70160: PUSH
70161: LD_VAR 0 2
70165: ARRAY
70166: PUSH
70167: LD_INT 1
70169: ARRAY
70170: PPUSH
70171: CALL_OW 310
70175: PUSH
70176: LD_EXP 82
70180: PUSH
70181: LD_VAR 0 2
70185: ARRAY
70186: PUSH
70187: LD_INT 1
70189: ARRAY
70190: PPUSH
70191: CALL_OW 310
70195: PPUSH
70196: CALL_OW 461
70200: PUSH
70201: LD_INT 3
70203: NONEQUAL
70204: AND
70205: IFFALSE 70226
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
70207: LD_EXP 82
70211: PUSH
70212: LD_VAR 0 2
70216: ARRAY
70217: PUSH
70218: LD_INT 1
70220: ARRAY
70221: PPUSH
70222: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
70226: LD_VAR 0 3
70230: PPUSH
70231: CALL_OW 461
70235: PUSH
70236: LD_INT 6
70238: EQUAL
70239: PUSH
70240: LD_VAR 0 6
70244: PUSH
70245: LD_INT 1
70247: GREATER
70248: AND
70249: IFFALSE 70401
// begin sci := [ ] ;
70251: LD_ADDR_VAR 0 8
70255: PUSH
70256: EMPTY
70257: ST_TO_ADDR
// for x in ( tmp diff j ) do
70258: LD_ADDR_VAR 0 7
70262: PUSH
70263: LD_VAR 0 6
70267: PUSH
70268: LD_VAR 0 3
70272: DIFF
70273: PUSH
70274: FOR_IN
70275: IFFALSE 70327
// begin if sci = 6 then
70277: LD_VAR 0 8
70281: PUSH
70282: LD_INT 6
70284: EQUAL
70285: IFFALSE 70289
// break ;
70287: GO 70327
// if BuildingStatus ( x ) = bs_idle then
70289: LD_VAR 0 7
70293: PPUSH
70294: CALL_OW 461
70298: PUSH
70299: LD_INT 2
70301: EQUAL
70302: IFFALSE 70325
// sci := sci ^ UnitsInside ( x ) ;
70304: LD_ADDR_VAR 0 8
70308: PUSH
70309: LD_VAR 0 8
70313: PUSH
70314: LD_VAR 0 7
70318: PPUSH
70319: CALL_OW 313
70323: ADD
70324: ST_TO_ADDR
// end ;
70325: GO 70274
70327: POP
70328: POP
// if not sci then
70329: LD_VAR 0 8
70333: NOT
70334: IFFALSE 70338
// continue ;
70336: GO 69383
// for x in sci do
70338: LD_ADDR_VAR 0 7
70342: PUSH
70343: LD_VAR 0 8
70347: PUSH
70348: FOR_IN
70349: IFFALSE 70399
// if IsInUnit ( x ) and not HasTask ( x ) then
70351: LD_VAR 0 7
70355: PPUSH
70356: CALL_OW 310
70360: PUSH
70361: LD_VAR 0 7
70365: PPUSH
70366: CALL_OW 314
70370: NOT
70371: AND
70372: IFFALSE 70397
// begin ComExitBuilding ( x ) ;
70374: LD_VAR 0 7
70378: PPUSH
70379: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
70383: LD_VAR 0 7
70387: PPUSH
70388: LD_VAR 0 3
70392: PPUSH
70393: CALL_OW 180
// end ;
70397: GO 70348
70399: POP
70400: POP
// end ; end ;
70401: GO 69383
70403: POP
70404: POP
// end ;
70405: GO 69337
70407: POP
70408: POP
// end ;
70409: LD_VAR 0 1
70413: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
70414: LD_INT 0
70416: PPUSH
70417: PPUSH
// if not mc_bases then
70418: LD_EXP 52
70422: NOT
70423: IFFALSE 70427
// exit ;
70425: GO 70508
// for i = 1 to mc_bases do
70427: LD_ADDR_VAR 0 2
70431: PUSH
70432: DOUBLE
70433: LD_INT 1
70435: DEC
70436: ST_TO_ADDR
70437: LD_EXP 52
70441: PUSH
70442: FOR_TO
70443: IFFALSE 70506
// if mc_mines [ i ] and mc_miners [ i ] then
70445: LD_EXP 65
70449: PUSH
70450: LD_VAR 0 2
70454: ARRAY
70455: PUSH
70456: LD_EXP 66
70460: PUSH
70461: LD_VAR 0 2
70465: ARRAY
70466: AND
70467: IFFALSE 70504
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
70469: LD_EXP 66
70473: PUSH
70474: LD_VAR 0 2
70478: ARRAY
70479: PUSH
70480: LD_INT 1
70482: ARRAY
70483: PPUSH
70484: CALL_OW 255
70488: PPUSH
70489: LD_EXP 65
70493: PUSH
70494: LD_VAR 0 2
70498: ARRAY
70499: PPUSH
70500: CALL 14478 0 2
70504: GO 70442
70506: POP
70507: POP
// end ;
70508: LD_VAR 0 1
70512: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
70513: LD_INT 0
70515: PPUSH
70516: PPUSH
70517: PPUSH
70518: PPUSH
70519: PPUSH
70520: PPUSH
70521: PPUSH
70522: PPUSH
// if not mc_bases or not mc_parking then
70523: LD_EXP 52
70527: NOT
70528: PUSH
70529: LD_EXP 76
70533: NOT
70534: OR
70535: IFFALSE 70539
// exit ;
70537: GO 71215
// for i = 1 to mc_bases do
70539: LD_ADDR_VAR 0 2
70543: PUSH
70544: DOUBLE
70545: LD_INT 1
70547: DEC
70548: ST_TO_ADDR
70549: LD_EXP 52
70553: PUSH
70554: FOR_TO
70555: IFFALSE 71213
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
70557: LD_EXP 52
70561: PUSH
70562: LD_VAR 0 2
70566: ARRAY
70567: NOT
70568: PUSH
70569: LD_EXP 76
70573: PUSH
70574: LD_VAR 0 2
70578: ARRAY
70579: NOT
70580: OR
70581: IFFALSE 70585
// continue ;
70583: GO 70554
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
70585: LD_ADDR_VAR 0 5
70589: PUSH
70590: LD_EXP 52
70594: PUSH
70595: LD_VAR 0 2
70599: ARRAY
70600: PUSH
70601: LD_INT 1
70603: ARRAY
70604: PPUSH
70605: CALL_OW 255
70609: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
70610: LD_ADDR_VAR 0 6
70614: PUSH
70615: LD_EXP 52
70619: PUSH
70620: LD_VAR 0 2
70624: ARRAY
70625: PPUSH
70626: LD_INT 30
70628: PUSH
70629: LD_INT 3
70631: PUSH
70632: EMPTY
70633: LIST
70634: LIST
70635: PPUSH
70636: CALL_OW 72
70640: ST_TO_ADDR
// if not fac then
70641: LD_VAR 0 6
70645: NOT
70646: IFFALSE 70697
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
70648: LD_ADDR_VAR 0 6
70652: PUSH
70653: LD_EXP 52
70657: PUSH
70658: LD_VAR 0 2
70662: ARRAY
70663: PPUSH
70664: LD_INT 2
70666: PUSH
70667: LD_INT 30
70669: PUSH
70670: LD_INT 0
70672: PUSH
70673: EMPTY
70674: LIST
70675: LIST
70676: PUSH
70677: LD_INT 30
70679: PUSH
70680: LD_INT 1
70682: PUSH
70683: EMPTY
70684: LIST
70685: LIST
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: LIST
70691: PPUSH
70692: CALL_OW 72
70696: ST_TO_ADDR
// if not fac then
70697: LD_VAR 0 6
70701: NOT
70702: IFFALSE 70706
// continue ;
70704: GO 70554
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
70706: LD_ADDR_VAR 0 7
70710: PUSH
70711: LD_EXP 76
70715: PUSH
70716: LD_VAR 0 2
70720: ARRAY
70721: PPUSH
70722: LD_INT 22
70724: PUSH
70725: LD_VAR 0 5
70729: PUSH
70730: EMPTY
70731: LIST
70732: LIST
70733: PUSH
70734: LD_INT 21
70736: PUSH
70737: LD_INT 2
70739: PUSH
70740: EMPTY
70741: LIST
70742: LIST
70743: PUSH
70744: LD_INT 3
70746: PUSH
70747: LD_INT 24
70749: PUSH
70750: LD_INT 1000
70752: PUSH
70753: EMPTY
70754: LIST
70755: LIST
70756: PUSH
70757: EMPTY
70758: LIST
70759: LIST
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: LIST
70765: PPUSH
70766: CALL_OW 70
70770: PUSH
70771: LD_INT 22
70773: PUSH
70774: LD_VAR 0 5
70778: PUSH
70779: EMPTY
70780: LIST
70781: LIST
70782: PUSH
70783: LD_INT 91
70785: PUSH
70786: LD_VAR 0 6
70790: PUSH
70791: LD_INT 1
70793: ARRAY
70794: PUSH
70795: LD_INT 25
70797: PUSH
70798: EMPTY
70799: LIST
70800: LIST
70801: LIST
70802: PUSH
70803: LD_INT 21
70805: PUSH
70806: LD_INT 2
70808: PUSH
70809: EMPTY
70810: LIST
70811: LIST
70812: PUSH
70813: LD_INT 3
70815: PUSH
70816: LD_INT 24
70818: PUSH
70819: LD_INT 1000
70821: PUSH
70822: EMPTY
70823: LIST
70824: LIST
70825: PUSH
70826: EMPTY
70827: LIST
70828: LIST
70829: PUSH
70830: EMPTY
70831: LIST
70832: LIST
70833: LIST
70834: LIST
70835: PPUSH
70836: CALL_OW 69
70840: UNION
70841: ST_TO_ADDR
// if not vehs then
70842: LD_VAR 0 7
70846: NOT
70847: IFFALSE 70873
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
70849: LD_ADDR_EXP 64
70853: PUSH
70854: LD_EXP 64
70858: PPUSH
70859: LD_VAR 0 2
70863: PPUSH
70864: EMPTY
70865: PPUSH
70866: CALL_OW 1
70870: ST_TO_ADDR
// continue ;
70871: GO 70554
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
70873: LD_ADDR_VAR 0 8
70877: PUSH
70878: LD_EXP 52
70882: PUSH
70883: LD_VAR 0 2
70887: ARRAY
70888: PPUSH
70889: LD_INT 30
70891: PUSH
70892: LD_INT 3
70894: PUSH
70895: EMPTY
70896: LIST
70897: LIST
70898: PPUSH
70899: CALL_OW 72
70903: ST_TO_ADDR
// if tmp then
70904: LD_VAR 0 8
70908: IFFALSE 71011
// begin for j in tmp do
70910: LD_ADDR_VAR 0 3
70914: PUSH
70915: LD_VAR 0 8
70919: PUSH
70920: FOR_IN
70921: IFFALSE 71009
// for k in UnitsInside ( j ) do
70923: LD_ADDR_VAR 0 4
70927: PUSH
70928: LD_VAR 0 3
70932: PPUSH
70933: CALL_OW 313
70937: PUSH
70938: FOR_IN
70939: IFFALSE 71005
// if k then
70941: LD_VAR 0 4
70945: IFFALSE 71003
// if not k in mc_repair_vehicle [ i ] then
70947: LD_VAR 0 4
70951: PUSH
70952: LD_EXP 64
70956: PUSH
70957: LD_VAR 0 2
70961: ARRAY
70962: IN
70963: NOT
70964: IFFALSE 71003
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
70966: LD_ADDR_EXP 64
70970: PUSH
70971: LD_EXP 64
70975: PPUSH
70976: LD_VAR 0 2
70980: PPUSH
70981: LD_EXP 64
70985: PUSH
70986: LD_VAR 0 2
70990: ARRAY
70991: PUSH
70992: LD_VAR 0 4
70996: UNION
70997: PPUSH
70998: CALL_OW 1
71002: ST_TO_ADDR
71003: GO 70938
71005: POP
71006: POP
71007: GO 70920
71009: POP
71010: POP
// end ; if not mc_repair_vehicle [ i ] then
71011: LD_EXP 64
71015: PUSH
71016: LD_VAR 0 2
71020: ARRAY
71021: NOT
71022: IFFALSE 71026
// continue ;
71024: GO 70554
// for j in mc_repair_vehicle [ i ] do
71026: LD_ADDR_VAR 0 3
71030: PUSH
71031: LD_EXP 64
71035: PUSH
71036: LD_VAR 0 2
71040: ARRAY
71041: PUSH
71042: FOR_IN
71043: IFFALSE 71209
// begin if GetClass ( j ) <> 3 then
71045: LD_VAR 0 3
71049: PPUSH
71050: CALL_OW 257
71054: PUSH
71055: LD_INT 3
71057: NONEQUAL
71058: IFFALSE 71099
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
71060: LD_ADDR_EXP 64
71064: PUSH
71065: LD_EXP 64
71069: PPUSH
71070: LD_VAR 0 2
71074: PPUSH
71075: LD_EXP 64
71079: PUSH
71080: LD_VAR 0 2
71084: ARRAY
71085: PUSH
71086: LD_VAR 0 3
71090: DIFF
71091: PPUSH
71092: CALL_OW 1
71096: ST_TO_ADDR
// continue ;
71097: GO 71042
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
71099: LD_VAR 0 3
71103: PPUSH
71104: CALL_OW 311
71108: NOT
71109: PUSH
71110: LD_VAR 0 3
71114: PUSH
71115: LD_EXP 55
71119: PUSH
71120: LD_VAR 0 2
71124: ARRAY
71125: PUSH
71126: LD_INT 1
71128: ARRAY
71129: IN
71130: NOT
71131: AND
71132: PUSH
71133: LD_VAR 0 3
71137: PUSH
71138: LD_EXP 55
71142: PUSH
71143: LD_VAR 0 2
71147: ARRAY
71148: PUSH
71149: LD_INT 2
71151: ARRAY
71152: IN
71153: NOT
71154: AND
71155: IFFALSE 71207
// begin if IsInUnit ( j ) then
71157: LD_VAR 0 3
71161: PPUSH
71162: CALL_OW 310
71166: IFFALSE 71177
// ComExitBuilding ( j ) ;
71168: LD_VAR 0 3
71172: PPUSH
71173: CALL_OW 122
// if not HasTask ( j ) then
71177: LD_VAR 0 3
71181: PPUSH
71182: CALL_OW 314
71186: NOT
71187: IFFALSE 71207
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
71189: LD_VAR 0 3
71193: PPUSH
71194: LD_VAR 0 7
71198: PUSH
71199: LD_INT 1
71201: ARRAY
71202: PPUSH
71203: CALL_OW 189
// end ; end ;
71207: GO 71042
71209: POP
71210: POP
// end ;
71211: GO 70554
71213: POP
71214: POP
// end ;
71215: LD_VAR 0 1
71219: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
71220: LD_INT 0
71222: PPUSH
71223: PPUSH
71224: PPUSH
71225: PPUSH
71226: PPUSH
71227: PPUSH
71228: PPUSH
71229: PPUSH
71230: PPUSH
71231: PPUSH
71232: PPUSH
// if not mc_bases then
71233: LD_EXP 52
71237: NOT
71238: IFFALSE 71242
// exit ;
71240: GO 72044
// for i = 1 to mc_bases do
71242: LD_ADDR_VAR 0 2
71246: PUSH
71247: DOUBLE
71248: LD_INT 1
71250: DEC
71251: ST_TO_ADDR
71252: LD_EXP 52
71256: PUSH
71257: FOR_TO
71258: IFFALSE 72042
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
71260: LD_EXP 80
71264: PUSH
71265: LD_VAR 0 2
71269: ARRAY
71270: NOT
71271: PUSH
71272: LD_EXP 55
71276: PUSH
71277: LD_VAR 0 2
71281: ARRAY
71282: PUSH
71283: LD_INT 1
71285: ARRAY
71286: OR
71287: PUSH
71288: LD_EXP 55
71292: PUSH
71293: LD_VAR 0 2
71297: ARRAY
71298: PUSH
71299: LD_INT 2
71301: ARRAY
71302: OR
71303: PUSH
71304: LD_EXP 78
71308: PUSH
71309: LD_VAR 0 2
71313: ARRAY
71314: PPUSH
71315: LD_INT 1
71317: PPUSH
71318: CALL_OW 325
71322: NOT
71323: OR
71324: PUSH
71325: LD_EXP 75
71329: PUSH
71330: LD_VAR 0 2
71334: ARRAY
71335: OR
71336: IFFALSE 71340
// continue ;
71338: GO 71257
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
71340: LD_ADDR_VAR 0 8
71344: PUSH
71345: LD_EXP 52
71349: PUSH
71350: LD_VAR 0 2
71354: ARRAY
71355: PPUSH
71356: LD_INT 25
71358: PUSH
71359: LD_INT 4
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: PUSH
71366: LD_INT 50
71368: PUSH
71369: EMPTY
71370: LIST
71371: PUSH
71372: LD_INT 3
71374: PUSH
71375: LD_INT 60
71377: PUSH
71378: EMPTY
71379: LIST
71380: PUSH
71381: EMPTY
71382: LIST
71383: LIST
71384: PUSH
71385: EMPTY
71386: LIST
71387: LIST
71388: LIST
71389: PPUSH
71390: CALL_OW 72
71394: PUSH
71395: LD_EXP 56
71399: PUSH
71400: LD_VAR 0 2
71404: ARRAY
71405: DIFF
71406: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
71407: LD_ADDR_VAR 0 9
71411: PUSH
71412: LD_EXP 52
71416: PUSH
71417: LD_VAR 0 2
71421: ARRAY
71422: PPUSH
71423: LD_INT 2
71425: PUSH
71426: LD_INT 30
71428: PUSH
71429: LD_INT 0
71431: PUSH
71432: EMPTY
71433: LIST
71434: LIST
71435: PUSH
71436: LD_INT 30
71438: PUSH
71439: LD_INT 1
71441: PUSH
71442: EMPTY
71443: LIST
71444: LIST
71445: PUSH
71446: EMPTY
71447: LIST
71448: LIST
71449: LIST
71450: PPUSH
71451: CALL_OW 72
71455: ST_TO_ADDR
// if not tmp or not dep then
71456: LD_VAR 0 8
71460: NOT
71461: PUSH
71462: LD_VAR 0 9
71466: NOT
71467: OR
71468: IFFALSE 71472
// continue ;
71470: GO 71257
// side := GetSide ( tmp [ 1 ] ) ;
71472: LD_ADDR_VAR 0 11
71476: PUSH
71477: LD_VAR 0 8
71481: PUSH
71482: LD_INT 1
71484: ARRAY
71485: PPUSH
71486: CALL_OW 255
71490: ST_TO_ADDR
// dep := dep [ 1 ] ;
71491: LD_ADDR_VAR 0 9
71495: PUSH
71496: LD_VAR 0 9
71500: PUSH
71501: LD_INT 1
71503: ARRAY
71504: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
71505: LD_ADDR_VAR 0 7
71509: PUSH
71510: LD_EXP 80
71514: PUSH
71515: LD_VAR 0 2
71519: ARRAY
71520: PPUSH
71521: LD_INT 22
71523: PUSH
71524: LD_INT 0
71526: PUSH
71527: EMPTY
71528: LIST
71529: LIST
71530: PUSH
71531: LD_INT 25
71533: PUSH
71534: LD_INT 12
71536: PUSH
71537: EMPTY
71538: LIST
71539: LIST
71540: PUSH
71541: EMPTY
71542: LIST
71543: LIST
71544: PPUSH
71545: CALL_OW 70
71549: PUSH
71550: LD_INT 22
71552: PUSH
71553: LD_INT 0
71555: PUSH
71556: EMPTY
71557: LIST
71558: LIST
71559: PUSH
71560: LD_INT 25
71562: PUSH
71563: LD_INT 12
71565: PUSH
71566: EMPTY
71567: LIST
71568: LIST
71569: PUSH
71570: LD_INT 91
71572: PUSH
71573: LD_VAR 0 9
71577: PUSH
71578: LD_INT 20
71580: PUSH
71581: EMPTY
71582: LIST
71583: LIST
71584: LIST
71585: PUSH
71586: EMPTY
71587: LIST
71588: LIST
71589: LIST
71590: PPUSH
71591: CALL_OW 69
71595: UNION
71596: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
71597: LD_ADDR_VAR 0 10
71601: PUSH
71602: LD_EXP 80
71606: PUSH
71607: LD_VAR 0 2
71611: ARRAY
71612: PPUSH
71613: LD_INT 81
71615: PUSH
71616: LD_VAR 0 11
71620: PUSH
71621: EMPTY
71622: LIST
71623: LIST
71624: PPUSH
71625: CALL_OW 70
71629: ST_TO_ADDR
// if not apes or danger_at_area then
71630: LD_VAR 0 7
71634: NOT
71635: PUSH
71636: LD_VAR 0 10
71640: OR
71641: IFFALSE 71691
// begin if mc_taming [ i ] then
71643: LD_EXP 83
71647: PUSH
71648: LD_VAR 0 2
71652: ARRAY
71653: IFFALSE 71689
// begin MC_Reset ( i , 121 ) ;
71655: LD_VAR 0 2
71659: PPUSH
71660: LD_INT 121
71662: PPUSH
71663: CALL 57384 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
71667: LD_ADDR_EXP 83
71671: PUSH
71672: LD_EXP 83
71676: PPUSH
71677: LD_VAR 0 2
71681: PPUSH
71682: EMPTY
71683: PPUSH
71684: CALL_OW 1
71688: ST_TO_ADDR
// end ; continue ;
71689: GO 71257
// end ; for j in tmp do
71691: LD_ADDR_VAR 0 3
71695: PUSH
71696: LD_VAR 0 8
71700: PUSH
71701: FOR_IN
71702: IFFALSE 72038
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
71704: LD_VAR 0 3
71708: PUSH
71709: LD_EXP 83
71713: PUSH
71714: LD_VAR 0 2
71718: ARRAY
71719: IN
71720: NOT
71721: PUSH
71722: LD_EXP 83
71726: PUSH
71727: LD_VAR 0 2
71731: ARRAY
71732: PUSH
71733: LD_INT 3
71735: LESS
71736: AND
71737: IFFALSE 71795
// begin SetTag ( j , 121 ) ;
71739: LD_VAR 0 3
71743: PPUSH
71744: LD_INT 121
71746: PPUSH
71747: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
71751: LD_ADDR_EXP 83
71755: PUSH
71756: LD_EXP 83
71760: PPUSH
71761: LD_VAR 0 2
71765: PUSH
71766: LD_EXP 83
71770: PUSH
71771: LD_VAR 0 2
71775: ARRAY
71776: PUSH
71777: LD_INT 1
71779: PLUS
71780: PUSH
71781: EMPTY
71782: LIST
71783: LIST
71784: PPUSH
71785: LD_VAR 0 3
71789: PPUSH
71790: CALL 17428 0 3
71794: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
71795: LD_VAR 0 3
71799: PUSH
71800: LD_EXP 83
71804: PUSH
71805: LD_VAR 0 2
71809: ARRAY
71810: IN
71811: IFFALSE 72036
// begin if GetClass ( j ) <> 4 then
71813: LD_VAR 0 3
71817: PPUSH
71818: CALL_OW 257
71822: PUSH
71823: LD_INT 4
71825: NONEQUAL
71826: IFFALSE 71879
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
71828: LD_ADDR_EXP 83
71832: PUSH
71833: LD_EXP 83
71837: PPUSH
71838: LD_VAR 0 2
71842: PPUSH
71843: LD_EXP 83
71847: PUSH
71848: LD_VAR 0 2
71852: ARRAY
71853: PUSH
71854: LD_VAR 0 3
71858: DIFF
71859: PPUSH
71860: CALL_OW 1
71864: ST_TO_ADDR
// SetTag ( j , 0 ) ;
71865: LD_VAR 0 3
71869: PPUSH
71870: LD_INT 0
71872: PPUSH
71873: CALL_OW 109
// continue ;
71877: GO 71701
// end ; if IsInUnit ( j ) then
71879: LD_VAR 0 3
71883: PPUSH
71884: CALL_OW 310
71888: IFFALSE 71899
// ComExitBuilding ( j ) ;
71890: LD_VAR 0 3
71894: PPUSH
71895: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
71899: LD_ADDR_VAR 0 6
71903: PUSH
71904: LD_VAR 0 7
71908: PPUSH
71909: LD_VAR 0 3
71913: PPUSH
71914: CALL_OW 74
71918: ST_TO_ADDR
// if not ape then
71919: LD_VAR 0 6
71923: NOT
71924: IFFALSE 71928
// break ;
71926: GO 72038
// x := GetX ( ape ) ;
71928: LD_ADDR_VAR 0 4
71932: PUSH
71933: LD_VAR 0 6
71937: PPUSH
71938: CALL_OW 250
71942: ST_TO_ADDR
// y := GetY ( ape ) ;
71943: LD_ADDR_VAR 0 5
71947: PUSH
71948: LD_VAR 0 6
71952: PPUSH
71953: CALL_OW 251
71957: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
71958: LD_VAR 0 4
71962: PPUSH
71963: LD_VAR 0 5
71967: PPUSH
71968: CALL_OW 488
71972: NOT
71973: PUSH
71974: LD_VAR 0 11
71978: PPUSH
71979: LD_VAR 0 4
71983: PPUSH
71984: LD_VAR 0 5
71988: PPUSH
71989: LD_INT 20
71991: PPUSH
71992: CALL 18324 0 4
71996: PUSH
71997: LD_INT 4
71999: ARRAY
72000: OR
72001: IFFALSE 72005
// break ;
72003: GO 72038
// if not HasTask ( j ) then
72005: LD_VAR 0 3
72009: PPUSH
72010: CALL_OW 314
72014: NOT
72015: IFFALSE 72036
// ComTameXY ( j , x , y ) ;
72017: LD_VAR 0 3
72021: PPUSH
72022: LD_VAR 0 4
72026: PPUSH
72027: LD_VAR 0 5
72031: PPUSH
72032: CALL_OW 131
// end ; end ;
72036: GO 71701
72038: POP
72039: POP
// end ;
72040: GO 71257
72042: POP
72043: POP
// end ;
72044: LD_VAR 0 1
72048: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
72049: LD_INT 0
72051: PPUSH
72052: PPUSH
72053: PPUSH
72054: PPUSH
72055: PPUSH
72056: PPUSH
72057: PPUSH
72058: PPUSH
// if not mc_bases then
72059: LD_EXP 52
72063: NOT
72064: IFFALSE 72068
// exit ;
72066: GO 72694
// for i = 1 to mc_bases do
72068: LD_ADDR_VAR 0 2
72072: PUSH
72073: DOUBLE
72074: LD_INT 1
72076: DEC
72077: ST_TO_ADDR
72078: LD_EXP 52
72082: PUSH
72083: FOR_TO
72084: IFFALSE 72692
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
72086: LD_EXP 81
72090: PUSH
72091: LD_VAR 0 2
72095: ARRAY
72096: NOT
72097: PUSH
72098: LD_EXP 81
72102: PUSH
72103: LD_VAR 0 2
72107: ARRAY
72108: PPUSH
72109: LD_INT 25
72111: PUSH
72112: LD_INT 12
72114: PUSH
72115: EMPTY
72116: LIST
72117: LIST
72118: PPUSH
72119: CALL_OW 72
72123: NOT
72124: OR
72125: IFFALSE 72129
// continue ;
72127: GO 72083
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
72129: LD_ADDR_VAR 0 5
72133: PUSH
72134: LD_EXP 81
72138: PUSH
72139: LD_VAR 0 2
72143: ARRAY
72144: PUSH
72145: LD_INT 1
72147: ARRAY
72148: PPUSH
72149: CALL_OW 255
72153: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
72154: LD_VAR 0 5
72158: PPUSH
72159: LD_INT 2
72161: PPUSH
72162: CALL_OW 325
72166: IFFALSE 72419
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
72168: LD_ADDR_VAR 0 4
72172: PUSH
72173: LD_EXP 81
72177: PUSH
72178: LD_VAR 0 2
72182: ARRAY
72183: PPUSH
72184: LD_INT 25
72186: PUSH
72187: LD_INT 16
72189: PUSH
72190: EMPTY
72191: LIST
72192: LIST
72193: PPUSH
72194: CALL_OW 72
72198: ST_TO_ADDR
// if tmp < 6 then
72199: LD_VAR 0 4
72203: PUSH
72204: LD_INT 6
72206: LESS
72207: IFFALSE 72419
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
72209: LD_ADDR_VAR 0 6
72213: PUSH
72214: LD_EXP 52
72218: PUSH
72219: LD_VAR 0 2
72223: ARRAY
72224: PPUSH
72225: LD_INT 2
72227: PUSH
72228: LD_INT 30
72230: PUSH
72231: LD_INT 0
72233: PUSH
72234: EMPTY
72235: LIST
72236: LIST
72237: PUSH
72238: LD_INT 30
72240: PUSH
72241: LD_INT 1
72243: PUSH
72244: EMPTY
72245: LIST
72246: LIST
72247: PUSH
72248: EMPTY
72249: LIST
72250: LIST
72251: LIST
72252: PPUSH
72253: CALL_OW 72
72257: ST_TO_ADDR
// if depot then
72258: LD_VAR 0 6
72262: IFFALSE 72419
// begin selected := 0 ;
72264: LD_ADDR_VAR 0 7
72268: PUSH
72269: LD_INT 0
72271: ST_TO_ADDR
// for j in depot do
72272: LD_ADDR_VAR 0 3
72276: PUSH
72277: LD_VAR 0 6
72281: PUSH
72282: FOR_IN
72283: IFFALSE 72314
// begin if UnitsInside ( j ) < 6 then
72285: LD_VAR 0 3
72289: PPUSH
72290: CALL_OW 313
72294: PUSH
72295: LD_INT 6
72297: LESS
72298: IFFALSE 72312
// begin selected := j ;
72300: LD_ADDR_VAR 0 7
72304: PUSH
72305: LD_VAR 0 3
72309: ST_TO_ADDR
// break ;
72310: GO 72314
// end ; end ;
72312: GO 72282
72314: POP
72315: POP
// if selected then
72316: LD_VAR 0 7
72320: IFFALSE 72419
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
72322: LD_ADDR_VAR 0 3
72326: PUSH
72327: LD_EXP 81
72331: PUSH
72332: LD_VAR 0 2
72336: ARRAY
72337: PPUSH
72338: LD_INT 25
72340: PUSH
72341: LD_INT 12
72343: PUSH
72344: EMPTY
72345: LIST
72346: LIST
72347: PPUSH
72348: CALL_OW 72
72352: PUSH
72353: FOR_IN
72354: IFFALSE 72417
// if not HasTask ( j ) then
72356: LD_VAR 0 3
72360: PPUSH
72361: CALL_OW 314
72365: NOT
72366: IFFALSE 72415
// begin if not IsInUnit ( j ) then
72368: LD_VAR 0 3
72372: PPUSH
72373: CALL_OW 310
72377: NOT
72378: IFFALSE 72394
// ComEnterUnit ( j , selected ) ;
72380: LD_VAR 0 3
72384: PPUSH
72385: LD_VAR 0 7
72389: PPUSH
72390: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
72394: LD_VAR 0 3
72398: PPUSH
72399: LD_INT 16
72401: PPUSH
72402: CALL_OW 183
// AddComExitBuilding ( j ) ;
72406: LD_VAR 0 3
72410: PPUSH
72411: CALL_OW 182
// end ;
72415: GO 72353
72417: POP
72418: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
72419: LD_VAR 0 5
72423: PPUSH
72424: LD_INT 11
72426: PPUSH
72427: CALL_OW 325
72431: IFFALSE 72690
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
72433: LD_ADDR_VAR 0 4
72437: PUSH
72438: LD_EXP 81
72442: PUSH
72443: LD_VAR 0 2
72447: ARRAY
72448: PPUSH
72449: LD_INT 25
72451: PUSH
72452: LD_INT 16
72454: PUSH
72455: EMPTY
72456: LIST
72457: LIST
72458: PPUSH
72459: CALL_OW 72
72463: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
72464: LD_VAR 0 4
72468: PUSH
72469: LD_INT 6
72471: GREATEREQUAL
72472: PUSH
72473: LD_VAR 0 5
72477: PPUSH
72478: LD_INT 2
72480: PPUSH
72481: CALL_OW 325
72485: NOT
72486: OR
72487: IFFALSE 72690
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
72489: LD_ADDR_VAR 0 8
72493: PUSH
72494: LD_EXP 52
72498: PUSH
72499: LD_VAR 0 2
72503: ARRAY
72504: PPUSH
72505: LD_INT 2
72507: PUSH
72508: LD_INT 30
72510: PUSH
72511: LD_INT 4
72513: PUSH
72514: EMPTY
72515: LIST
72516: LIST
72517: PUSH
72518: LD_INT 30
72520: PUSH
72521: LD_INT 5
72523: PUSH
72524: EMPTY
72525: LIST
72526: LIST
72527: PUSH
72528: EMPTY
72529: LIST
72530: LIST
72531: LIST
72532: PPUSH
72533: CALL_OW 72
72537: ST_TO_ADDR
// if barracks then
72538: LD_VAR 0 8
72542: IFFALSE 72690
// begin selected := 0 ;
72544: LD_ADDR_VAR 0 7
72548: PUSH
72549: LD_INT 0
72551: ST_TO_ADDR
// for j in barracks do
72552: LD_ADDR_VAR 0 3
72556: PUSH
72557: LD_VAR 0 8
72561: PUSH
72562: FOR_IN
72563: IFFALSE 72594
// begin if UnitsInside ( j ) < 6 then
72565: LD_VAR 0 3
72569: PPUSH
72570: CALL_OW 313
72574: PUSH
72575: LD_INT 6
72577: LESS
72578: IFFALSE 72592
// begin selected := j ;
72580: LD_ADDR_VAR 0 7
72584: PUSH
72585: LD_VAR 0 3
72589: ST_TO_ADDR
// break ;
72590: GO 72594
// end ; end ;
72592: GO 72562
72594: POP
72595: POP
// if selected then
72596: LD_VAR 0 7
72600: IFFALSE 72690
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
72602: LD_ADDR_VAR 0 3
72606: PUSH
72607: LD_EXP 81
72611: PUSH
72612: LD_VAR 0 2
72616: ARRAY
72617: PPUSH
72618: LD_INT 25
72620: PUSH
72621: LD_INT 12
72623: PUSH
72624: EMPTY
72625: LIST
72626: LIST
72627: PPUSH
72628: CALL_OW 72
72632: PUSH
72633: FOR_IN
72634: IFFALSE 72688
// if not IsInUnit ( j ) and not HasTask ( j ) then
72636: LD_VAR 0 3
72640: PPUSH
72641: CALL_OW 310
72645: NOT
72646: PUSH
72647: LD_VAR 0 3
72651: PPUSH
72652: CALL_OW 314
72656: NOT
72657: AND
72658: IFFALSE 72686
// begin ComEnterUnit ( j , selected ) ;
72660: LD_VAR 0 3
72664: PPUSH
72665: LD_VAR 0 7
72669: PPUSH
72670: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
72674: LD_VAR 0 3
72678: PPUSH
72679: LD_INT 15
72681: PPUSH
72682: CALL_OW 183
// end ;
72686: GO 72633
72688: POP
72689: POP
// end ; end ; end ; end ; end ;
72690: GO 72083
72692: POP
72693: POP
// end ;
72694: LD_VAR 0 1
72698: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
72699: LD_INT 0
72701: PPUSH
72702: PPUSH
72703: PPUSH
72704: PPUSH
// if not mc_bases then
72705: LD_EXP 52
72709: NOT
72710: IFFALSE 72714
// exit ;
72712: GO 72892
// for i = 1 to mc_bases do
72714: LD_ADDR_VAR 0 2
72718: PUSH
72719: DOUBLE
72720: LD_INT 1
72722: DEC
72723: ST_TO_ADDR
72724: LD_EXP 52
72728: PUSH
72729: FOR_TO
72730: IFFALSE 72890
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
72732: LD_ADDR_VAR 0 4
72736: PUSH
72737: LD_EXP 52
72741: PUSH
72742: LD_VAR 0 2
72746: ARRAY
72747: PPUSH
72748: LD_INT 25
72750: PUSH
72751: LD_INT 9
72753: PUSH
72754: EMPTY
72755: LIST
72756: LIST
72757: PPUSH
72758: CALL_OW 72
72762: ST_TO_ADDR
// if not tmp then
72763: LD_VAR 0 4
72767: NOT
72768: IFFALSE 72772
// continue ;
72770: GO 72729
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
72772: LD_EXP 78
72776: PUSH
72777: LD_VAR 0 2
72781: ARRAY
72782: PPUSH
72783: LD_INT 29
72785: PPUSH
72786: CALL_OW 325
72790: NOT
72791: PUSH
72792: LD_EXP 78
72796: PUSH
72797: LD_VAR 0 2
72801: ARRAY
72802: PPUSH
72803: LD_INT 28
72805: PPUSH
72806: CALL_OW 325
72810: NOT
72811: AND
72812: IFFALSE 72816
// continue ;
72814: GO 72729
// for j in tmp do
72816: LD_ADDR_VAR 0 3
72820: PUSH
72821: LD_VAR 0 4
72825: PUSH
72826: FOR_IN
72827: IFFALSE 72886
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
72829: LD_VAR 0 3
72833: PUSH
72834: LD_EXP 55
72838: PUSH
72839: LD_VAR 0 2
72843: ARRAY
72844: PUSH
72845: LD_INT 1
72847: ARRAY
72848: IN
72849: NOT
72850: PUSH
72851: LD_VAR 0 3
72855: PUSH
72856: LD_EXP 55
72860: PUSH
72861: LD_VAR 0 2
72865: ARRAY
72866: PUSH
72867: LD_INT 2
72869: ARRAY
72870: IN
72871: NOT
72872: AND
72873: IFFALSE 72884
// ComSpaceTimeShoot ( j ) ;
72875: LD_VAR 0 3
72879: PPUSH
72880: CALL 11518 0 1
72884: GO 72826
72886: POP
72887: POP
// end ;
72888: GO 72729
72890: POP
72891: POP
// end ;
72892: LD_VAR 0 1
72896: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
72897: LD_INT 0
72899: PPUSH
72900: PPUSH
72901: PPUSH
72902: PPUSH
72903: PPUSH
72904: PPUSH
72905: PPUSH
72906: PPUSH
72907: PPUSH
// if not mc_bases then
72908: LD_EXP 52
72912: NOT
72913: IFFALSE 72917
// exit ;
72915: GO 73539
// for i = 1 to mc_bases do
72917: LD_ADDR_VAR 0 2
72921: PUSH
72922: DOUBLE
72923: LD_INT 1
72925: DEC
72926: ST_TO_ADDR
72927: LD_EXP 52
72931: PUSH
72932: FOR_TO
72933: IFFALSE 73537
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
72935: LD_EXP 87
72939: PUSH
72940: LD_VAR 0 2
72944: ARRAY
72945: NOT
72946: PUSH
72947: LD_INT 38
72949: PPUSH
72950: LD_EXP 78
72954: PUSH
72955: LD_VAR 0 2
72959: ARRAY
72960: PPUSH
72961: CALL_OW 321
72965: PUSH
72966: LD_INT 2
72968: NONEQUAL
72969: OR
72970: IFFALSE 72974
// continue ;
72972: GO 72932
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
72974: LD_ADDR_VAR 0 8
72978: PUSH
72979: LD_EXP 52
72983: PUSH
72984: LD_VAR 0 2
72988: ARRAY
72989: PPUSH
72990: LD_INT 30
72992: PUSH
72993: LD_INT 34
72995: PUSH
72996: EMPTY
72997: LIST
72998: LIST
72999: PPUSH
73000: CALL_OW 72
73004: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
73005: LD_ADDR_VAR 0 9
73009: PUSH
73010: LD_EXP 52
73014: PUSH
73015: LD_VAR 0 2
73019: ARRAY
73020: PPUSH
73021: LD_INT 25
73023: PUSH
73024: LD_INT 4
73026: PUSH
73027: EMPTY
73028: LIST
73029: LIST
73030: PPUSH
73031: CALL_OW 72
73035: PPUSH
73036: LD_INT 0
73038: PPUSH
73039: CALL 50682 0 2
73043: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
73044: LD_VAR 0 9
73048: NOT
73049: PUSH
73050: LD_VAR 0 8
73054: NOT
73055: OR
73056: PUSH
73057: LD_EXP 52
73061: PUSH
73062: LD_VAR 0 2
73066: ARRAY
73067: PPUSH
73068: LD_INT 124
73070: PPUSH
73071: CALL 50682 0 2
73075: OR
73076: IFFALSE 73080
// continue ;
73078: GO 72932
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
73080: LD_EXP 88
73084: PUSH
73085: LD_VAR 0 2
73089: ARRAY
73090: PUSH
73091: LD_EXP 87
73095: PUSH
73096: LD_VAR 0 2
73100: ARRAY
73101: LESS
73102: PUSH
73103: LD_EXP 88
73107: PUSH
73108: LD_VAR 0 2
73112: ARRAY
73113: PUSH
73114: LD_VAR 0 8
73118: LESS
73119: AND
73120: IFFALSE 73535
// begin tmp := sci [ 1 ] ;
73122: LD_ADDR_VAR 0 7
73126: PUSH
73127: LD_VAR 0 9
73131: PUSH
73132: LD_INT 1
73134: ARRAY
73135: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
73136: LD_VAR 0 7
73140: PPUSH
73141: LD_INT 124
73143: PPUSH
73144: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
73148: LD_ADDR_VAR 0 3
73152: PUSH
73153: DOUBLE
73154: LD_EXP 87
73158: PUSH
73159: LD_VAR 0 2
73163: ARRAY
73164: INC
73165: ST_TO_ADDR
73166: LD_EXP 87
73170: PUSH
73171: LD_VAR 0 2
73175: ARRAY
73176: PUSH
73177: FOR_DOWNTO
73178: IFFALSE 73521
// begin if IsInUnit ( tmp ) then
73180: LD_VAR 0 7
73184: PPUSH
73185: CALL_OW 310
73189: IFFALSE 73200
// ComExitBuilding ( tmp ) ;
73191: LD_VAR 0 7
73195: PPUSH
73196: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
73200: LD_INT 35
73202: PPUSH
73203: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
73207: LD_VAR 0 7
73211: PPUSH
73212: CALL_OW 310
73216: NOT
73217: PUSH
73218: LD_VAR 0 7
73222: PPUSH
73223: CALL_OW 314
73227: NOT
73228: AND
73229: IFFALSE 73200
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
73231: LD_ADDR_VAR 0 6
73235: PUSH
73236: LD_VAR 0 7
73240: PPUSH
73241: CALL_OW 250
73245: PUSH
73246: LD_VAR 0 7
73250: PPUSH
73251: CALL_OW 251
73255: PUSH
73256: EMPTY
73257: LIST
73258: LIST
73259: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
73260: LD_INT 35
73262: PPUSH
73263: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
73267: LD_ADDR_VAR 0 4
73271: PUSH
73272: LD_EXP 87
73276: PUSH
73277: LD_VAR 0 2
73281: ARRAY
73282: PUSH
73283: LD_VAR 0 3
73287: ARRAY
73288: PUSH
73289: LD_INT 1
73291: ARRAY
73292: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
73293: LD_ADDR_VAR 0 5
73297: PUSH
73298: LD_EXP 87
73302: PUSH
73303: LD_VAR 0 2
73307: ARRAY
73308: PUSH
73309: LD_VAR 0 3
73313: ARRAY
73314: PUSH
73315: LD_INT 2
73317: ARRAY
73318: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
73319: LD_VAR 0 7
73323: PPUSH
73324: LD_INT 10
73326: PPUSH
73327: CALL 20021 0 2
73331: PUSH
73332: LD_INT 4
73334: ARRAY
73335: IFFALSE 73373
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
73337: LD_VAR 0 7
73341: PPUSH
73342: LD_VAR 0 6
73346: PUSH
73347: LD_INT 1
73349: ARRAY
73350: PPUSH
73351: LD_VAR 0 6
73355: PUSH
73356: LD_INT 2
73358: ARRAY
73359: PPUSH
73360: CALL_OW 111
// wait ( 0 0$10 ) ;
73364: LD_INT 350
73366: PPUSH
73367: CALL_OW 67
// end else
73371: GO 73399
// begin ComMoveXY ( tmp , x , y ) ;
73373: LD_VAR 0 7
73377: PPUSH
73378: LD_VAR 0 4
73382: PPUSH
73383: LD_VAR 0 5
73387: PPUSH
73388: CALL_OW 111
// wait ( 0 0$3 ) ;
73392: LD_INT 105
73394: PPUSH
73395: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
73399: LD_VAR 0 7
73403: PPUSH
73404: LD_VAR 0 4
73408: PPUSH
73409: LD_VAR 0 5
73413: PPUSH
73414: CALL_OW 307
73418: IFFALSE 73260
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
73420: LD_VAR 0 7
73424: PPUSH
73425: LD_VAR 0 4
73429: PPUSH
73430: LD_VAR 0 5
73434: PPUSH
73435: LD_VAR 0 8
73439: PUSH
73440: LD_VAR 0 3
73444: ARRAY
73445: PPUSH
73446: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
73450: LD_INT 35
73452: PPUSH
73453: CALL_OW 67
// until not HasTask ( tmp ) ;
73457: LD_VAR 0 7
73461: PPUSH
73462: CALL_OW 314
73466: NOT
73467: IFFALSE 73450
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
73469: LD_ADDR_EXP 88
73473: PUSH
73474: LD_EXP 88
73478: PPUSH
73479: LD_VAR 0 2
73483: PUSH
73484: LD_EXP 88
73488: PUSH
73489: LD_VAR 0 2
73493: ARRAY
73494: PUSH
73495: LD_INT 1
73497: PLUS
73498: PUSH
73499: EMPTY
73500: LIST
73501: LIST
73502: PPUSH
73503: LD_VAR 0 8
73507: PUSH
73508: LD_VAR 0 3
73512: ARRAY
73513: PPUSH
73514: CALL 17428 0 3
73518: ST_TO_ADDR
// end ;
73519: GO 73177
73521: POP
73522: POP
// MC_Reset ( i , 124 ) ;
73523: LD_VAR 0 2
73527: PPUSH
73528: LD_INT 124
73530: PPUSH
73531: CALL 57384 0 2
// end ; end ;
73535: GO 72932
73537: POP
73538: POP
// end ;
73539: LD_VAR 0 1
73543: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
73544: LD_INT 0
73546: PPUSH
73547: PPUSH
73548: PPUSH
// if not mc_bases then
73549: LD_EXP 52
73553: NOT
73554: IFFALSE 73558
// exit ;
73556: GO 74164
// for i = 1 to mc_bases do
73558: LD_ADDR_VAR 0 2
73562: PUSH
73563: DOUBLE
73564: LD_INT 1
73566: DEC
73567: ST_TO_ADDR
73568: LD_EXP 52
73572: PUSH
73573: FOR_TO
73574: IFFALSE 74162
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
73576: LD_ADDR_VAR 0 3
73580: PUSH
73581: LD_EXP 52
73585: PUSH
73586: LD_VAR 0 2
73590: ARRAY
73591: PPUSH
73592: LD_INT 25
73594: PUSH
73595: LD_INT 4
73597: PUSH
73598: EMPTY
73599: LIST
73600: LIST
73601: PPUSH
73602: CALL_OW 72
73606: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
73607: LD_VAR 0 3
73611: NOT
73612: PUSH
73613: LD_EXP 89
73617: PUSH
73618: LD_VAR 0 2
73622: ARRAY
73623: NOT
73624: OR
73625: PUSH
73626: LD_EXP 52
73630: PUSH
73631: LD_VAR 0 2
73635: ARRAY
73636: PPUSH
73637: LD_INT 2
73639: PUSH
73640: LD_INT 30
73642: PUSH
73643: LD_INT 0
73645: PUSH
73646: EMPTY
73647: LIST
73648: LIST
73649: PUSH
73650: LD_INT 30
73652: PUSH
73653: LD_INT 1
73655: PUSH
73656: EMPTY
73657: LIST
73658: LIST
73659: PUSH
73660: EMPTY
73661: LIST
73662: LIST
73663: LIST
73664: PPUSH
73665: CALL_OW 72
73669: NOT
73670: OR
73671: IFFALSE 73721
// begin if mc_deposits_finder [ i ] then
73673: LD_EXP 90
73677: PUSH
73678: LD_VAR 0 2
73682: ARRAY
73683: IFFALSE 73719
// begin MC_Reset ( i , 125 ) ;
73685: LD_VAR 0 2
73689: PPUSH
73690: LD_INT 125
73692: PPUSH
73693: CALL 57384 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
73697: LD_ADDR_EXP 90
73701: PUSH
73702: LD_EXP 90
73706: PPUSH
73707: LD_VAR 0 2
73711: PPUSH
73712: EMPTY
73713: PPUSH
73714: CALL_OW 1
73718: ST_TO_ADDR
// end ; continue ;
73719: GO 73573
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
73721: LD_EXP 89
73725: PUSH
73726: LD_VAR 0 2
73730: ARRAY
73731: PUSH
73732: LD_INT 1
73734: ARRAY
73735: PUSH
73736: LD_INT 3
73738: ARRAY
73739: PUSH
73740: LD_INT 1
73742: EQUAL
73743: PUSH
73744: LD_INT 20
73746: PPUSH
73747: LD_EXP 78
73751: PUSH
73752: LD_VAR 0 2
73756: ARRAY
73757: PPUSH
73758: CALL_OW 321
73762: PUSH
73763: LD_INT 2
73765: NONEQUAL
73766: AND
73767: IFFALSE 73817
// begin if mc_deposits_finder [ i ] then
73769: LD_EXP 90
73773: PUSH
73774: LD_VAR 0 2
73778: ARRAY
73779: IFFALSE 73815
// begin MC_Reset ( i , 125 ) ;
73781: LD_VAR 0 2
73785: PPUSH
73786: LD_INT 125
73788: PPUSH
73789: CALL 57384 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
73793: LD_ADDR_EXP 90
73797: PUSH
73798: LD_EXP 90
73802: PPUSH
73803: LD_VAR 0 2
73807: PPUSH
73808: EMPTY
73809: PPUSH
73810: CALL_OW 1
73814: ST_TO_ADDR
// end ; continue ;
73815: GO 73573
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
73817: LD_EXP 89
73821: PUSH
73822: LD_VAR 0 2
73826: ARRAY
73827: PUSH
73828: LD_INT 1
73830: ARRAY
73831: PUSH
73832: LD_INT 1
73834: ARRAY
73835: PPUSH
73836: LD_EXP 89
73840: PUSH
73841: LD_VAR 0 2
73845: ARRAY
73846: PUSH
73847: LD_INT 1
73849: ARRAY
73850: PUSH
73851: LD_INT 2
73853: ARRAY
73854: PPUSH
73855: LD_EXP 78
73859: PUSH
73860: LD_VAR 0 2
73864: ARRAY
73865: PPUSH
73866: CALL_OW 440
73870: IFFALSE 73913
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
73872: LD_ADDR_EXP 89
73876: PUSH
73877: LD_EXP 89
73881: PPUSH
73882: LD_VAR 0 2
73886: PPUSH
73887: LD_EXP 89
73891: PUSH
73892: LD_VAR 0 2
73896: ARRAY
73897: PPUSH
73898: LD_INT 1
73900: PPUSH
73901: CALL_OW 3
73905: PPUSH
73906: CALL_OW 1
73910: ST_TO_ADDR
73911: GO 74160
// begin if not mc_deposits_finder [ i ] then
73913: LD_EXP 90
73917: PUSH
73918: LD_VAR 0 2
73922: ARRAY
73923: NOT
73924: IFFALSE 73976
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
73926: LD_ADDR_EXP 90
73930: PUSH
73931: LD_EXP 90
73935: PPUSH
73936: LD_VAR 0 2
73940: PPUSH
73941: LD_VAR 0 3
73945: PUSH
73946: LD_INT 1
73948: ARRAY
73949: PUSH
73950: EMPTY
73951: LIST
73952: PPUSH
73953: CALL_OW 1
73957: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
73958: LD_VAR 0 3
73962: PUSH
73963: LD_INT 1
73965: ARRAY
73966: PPUSH
73967: LD_INT 125
73969: PPUSH
73970: CALL_OW 109
// end else
73974: GO 74160
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
73976: LD_EXP 90
73980: PUSH
73981: LD_VAR 0 2
73985: ARRAY
73986: PUSH
73987: LD_INT 1
73989: ARRAY
73990: PPUSH
73991: CALL_OW 310
73995: IFFALSE 74018
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
73997: LD_EXP 90
74001: PUSH
74002: LD_VAR 0 2
74006: ARRAY
74007: PUSH
74008: LD_INT 1
74010: ARRAY
74011: PPUSH
74012: CALL_OW 122
74016: GO 74160
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
74018: LD_EXP 90
74022: PUSH
74023: LD_VAR 0 2
74027: ARRAY
74028: PUSH
74029: LD_INT 1
74031: ARRAY
74032: PPUSH
74033: CALL_OW 314
74037: NOT
74038: PUSH
74039: LD_EXP 90
74043: PUSH
74044: LD_VAR 0 2
74048: ARRAY
74049: PUSH
74050: LD_INT 1
74052: ARRAY
74053: PPUSH
74054: LD_EXP 89
74058: PUSH
74059: LD_VAR 0 2
74063: ARRAY
74064: PUSH
74065: LD_INT 1
74067: ARRAY
74068: PUSH
74069: LD_INT 1
74071: ARRAY
74072: PPUSH
74073: LD_EXP 89
74077: PUSH
74078: LD_VAR 0 2
74082: ARRAY
74083: PUSH
74084: LD_INT 1
74086: ARRAY
74087: PUSH
74088: LD_INT 2
74090: ARRAY
74091: PPUSH
74092: CALL_OW 297
74096: PUSH
74097: LD_INT 6
74099: GREATER
74100: AND
74101: IFFALSE 74160
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
74103: LD_EXP 90
74107: PUSH
74108: LD_VAR 0 2
74112: ARRAY
74113: PUSH
74114: LD_INT 1
74116: ARRAY
74117: PPUSH
74118: LD_EXP 89
74122: PUSH
74123: LD_VAR 0 2
74127: ARRAY
74128: PUSH
74129: LD_INT 1
74131: ARRAY
74132: PUSH
74133: LD_INT 1
74135: ARRAY
74136: PPUSH
74137: LD_EXP 89
74141: PUSH
74142: LD_VAR 0 2
74146: ARRAY
74147: PUSH
74148: LD_INT 1
74150: ARRAY
74151: PUSH
74152: LD_INT 2
74154: ARRAY
74155: PPUSH
74156: CALL_OW 111
// end ; end ; end ;
74160: GO 73573
74162: POP
74163: POP
// end ;
74164: LD_VAR 0 1
74168: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
74169: LD_INT 0
74171: PPUSH
74172: PPUSH
74173: PPUSH
74174: PPUSH
74175: PPUSH
74176: PPUSH
74177: PPUSH
74178: PPUSH
74179: PPUSH
74180: PPUSH
74181: PPUSH
// if not mc_bases then
74182: LD_EXP 52
74186: NOT
74187: IFFALSE 74191
// exit ;
74189: GO 74915
// for i = 1 to mc_bases do
74191: LD_ADDR_VAR 0 2
74195: PUSH
74196: DOUBLE
74197: LD_INT 1
74199: DEC
74200: ST_TO_ADDR
74201: LD_EXP 52
74205: PUSH
74206: FOR_TO
74207: IFFALSE 74913
// begin if not mc_bases [ i ] then
74209: LD_EXP 52
74213: PUSH
74214: LD_VAR 0 2
74218: ARRAY
74219: NOT
74220: IFFALSE 74224
// continue ;
74222: GO 74206
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
74224: LD_ADDR_VAR 0 7
74228: PUSH
74229: LD_EXP 52
74233: PUSH
74234: LD_VAR 0 2
74238: ARRAY
74239: PUSH
74240: LD_INT 1
74242: ARRAY
74243: PPUSH
74244: CALL_OW 248
74248: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
74249: LD_VAR 0 7
74253: PUSH
74254: LD_INT 3
74256: EQUAL
74257: PUSH
74258: LD_EXP 71
74262: PUSH
74263: LD_VAR 0 2
74267: ARRAY
74268: PUSH
74269: LD_EXP 74
74273: PUSH
74274: LD_VAR 0 2
74278: ARRAY
74279: UNION
74280: PPUSH
74281: LD_INT 33
74283: PUSH
74284: LD_INT 2
74286: PUSH
74287: EMPTY
74288: LIST
74289: LIST
74290: PPUSH
74291: CALL_OW 72
74295: NOT
74296: OR
74297: IFFALSE 74301
// continue ;
74299: GO 74206
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
74301: LD_ADDR_VAR 0 9
74305: PUSH
74306: LD_EXP 52
74310: PUSH
74311: LD_VAR 0 2
74315: ARRAY
74316: PPUSH
74317: LD_INT 30
74319: PUSH
74320: LD_INT 36
74322: PUSH
74323: EMPTY
74324: LIST
74325: LIST
74326: PPUSH
74327: CALL_OW 72
74331: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
74332: LD_ADDR_VAR 0 10
74336: PUSH
74337: LD_EXP 71
74341: PUSH
74342: LD_VAR 0 2
74346: ARRAY
74347: PPUSH
74348: LD_INT 34
74350: PUSH
74351: LD_INT 31
74353: PUSH
74354: EMPTY
74355: LIST
74356: LIST
74357: PPUSH
74358: CALL_OW 72
74362: ST_TO_ADDR
// if not cts and not mcts then
74363: LD_VAR 0 9
74367: NOT
74368: PUSH
74369: LD_VAR 0 10
74373: NOT
74374: AND
74375: IFFALSE 74379
// continue ;
74377: GO 74206
// x := cts ;
74379: LD_ADDR_VAR 0 11
74383: PUSH
74384: LD_VAR 0 9
74388: ST_TO_ADDR
// if not x then
74389: LD_VAR 0 11
74393: NOT
74394: IFFALSE 74406
// x := mcts ;
74396: LD_ADDR_VAR 0 11
74400: PUSH
74401: LD_VAR 0 10
74405: ST_TO_ADDR
// if mc_remote_driver [ i ] then
74406: LD_EXP 92
74410: PUSH
74411: LD_VAR 0 2
74415: ARRAY
74416: IFFALSE 74685
// for j in mc_remote_driver [ i ] do
74418: LD_ADDR_VAR 0 3
74422: PUSH
74423: LD_EXP 92
74427: PUSH
74428: LD_VAR 0 2
74432: ARRAY
74433: PUSH
74434: FOR_IN
74435: IFFALSE 74683
// begin if GetClass ( j ) <> 3 then
74437: LD_VAR 0 3
74441: PPUSH
74442: CALL_OW 257
74446: PUSH
74447: LD_INT 3
74449: NONEQUAL
74450: IFFALSE 74503
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
74452: LD_ADDR_EXP 92
74456: PUSH
74457: LD_EXP 92
74461: PPUSH
74462: LD_VAR 0 2
74466: PPUSH
74467: LD_EXP 92
74471: PUSH
74472: LD_VAR 0 2
74476: ARRAY
74477: PUSH
74478: LD_VAR 0 3
74482: DIFF
74483: PPUSH
74484: CALL_OW 1
74488: ST_TO_ADDR
// SetTag ( j , 0 ) ;
74489: LD_VAR 0 3
74493: PPUSH
74494: LD_INT 0
74496: PPUSH
74497: CALL_OW 109
// continue ;
74501: GO 74434
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
74503: LD_VAR 0 3
74507: PPUSH
74508: CALL_OW 310
74512: NOT
74513: PUSH
74514: LD_VAR 0 3
74518: PPUSH
74519: CALL_OW 310
74523: PPUSH
74524: CALL_OW 266
74528: PUSH
74529: LD_INT 36
74531: NONEQUAL
74532: PUSH
74533: LD_VAR 0 3
74537: PPUSH
74538: CALL 50770 0 1
74542: NOT
74543: AND
74544: OR
74545: IFFALSE 74681
// begin if IsInUnit ( j ) then
74547: LD_VAR 0 3
74551: PPUSH
74552: CALL_OW 310
74556: IFFALSE 74567
// ComExitBuilding ( j ) ;
74558: LD_VAR 0 3
74562: PPUSH
74563: CALL_OW 122
// ct := 0 ;
74567: LD_ADDR_VAR 0 8
74571: PUSH
74572: LD_INT 0
74574: ST_TO_ADDR
// for k in x do
74575: LD_ADDR_VAR 0 4
74579: PUSH
74580: LD_VAR 0 11
74584: PUSH
74585: FOR_IN
74586: IFFALSE 74659
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
74588: LD_VAR 0 4
74592: PPUSH
74593: CALL_OW 264
74597: PUSH
74598: LD_INT 31
74600: EQUAL
74601: PUSH
74602: LD_VAR 0 4
74606: PPUSH
74607: CALL_OW 311
74611: NOT
74612: AND
74613: PUSH
74614: LD_VAR 0 4
74618: PPUSH
74619: CALL_OW 266
74623: PUSH
74624: LD_INT 36
74626: EQUAL
74627: PUSH
74628: LD_VAR 0 4
74632: PPUSH
74633: CALL_OW 313
74637: PUSH
74638: LD_INT 3
74640: LESS
74641: AND
74642: OR
74643: IFFALSE 74657
// begin ct := k ;
74645: LD_ADDR_VAR 0 8
74649: PUSH
74650: LD_VAR 0 4
74654: ST_TO_ADDR
// break ;
74655: GO 74659
// end ;
74657: GO 74585
74659: POP
74660: POP
// if ct then
74661: LD_VAR 0 8
74665: IFFALSE 74681
// ComEnterUnit ( j , ct ) ;
74667: LD_VAR 0 3
74671: PPUSH
74672: LD_VAR 0 8
74676: PPUSH
74677: CALL_OW 120
// end ; end ;
74681: GO 74434
74683: POP
74684: POP
// places := 0 ;
74685: LD_ADDR_VAR 0 5
74689: PUSH
74690: LD_INT 0
74692: ST_TO_ADDR
// for j = 1 to x do
74693: LD_ADDR_VAR 0 3
74697: PUSH
74698: DOUBLE
74699: LD_INT 1
74701: DEC
74702: ST_TO_ADDR
74703: LD_VAR 0 11
74707: PUSH
74708: FOR_TO
74709: IFFALSE 74764
// if GetWeapon ( x [ j ] ) = ar_control_tower then
74711: LD_VAR 0 11
74715: PUSH
74716: LD_VAR 0 3
74720: ARRAY
74721: PPUSH
74722: CALL_OW 264
74726: PUSH
74727: LD_INT 31
74729: EQUAL
74730: IFFALSE 74748
// places := places + 1 else
74732: LD_ADDR_VAR 0 5
74736: PUSH
74737: LD_VAR 0 5
74741: PUSH
74742: LD_INT 1
74744: PLUS
74745: ST_TO_ADDR
74746: GO 74762
// places := places + 3 ;
74748: LD_ADDR_VAR 0 5
74752: PUSH
74753: LD_VAR 0 5
74757: PUSH
74758: LD_INT 3
74760: PLUS
74761: ST_TO_ADDR
74762: GO 74708
74764: POP
74765: POP
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
74766: LD_ADDR_VAR 0 6
74770: PUSH
74771: LD_EXP 52
74775: PUSH
74776: LD_VAR 0 2
74780: ARRAY
74781: PPUSH
74782: LD_INT 25
74784: PUSH
74785: LD_INT 3
74787: PUSH
74788: EMPTY
74789: LIST
74790: LIST
74791: PPUSH
74792: CALL_OW 72
74796: PUSH
74797: LD_EXP 92
74801: PUSH
74802: LD_VAR 0 2
74806: ARRAY
74807: DIFF
74808: PPUSH
74809: LD_INT 3
74811: PPUSH
74812: CALL 51670 0 2
74816: ST_TO_ADDR
// if not tmp then
74817: LD_VAR 0 6
74821: NOT
74822: IFFALSE 74826
// continue ;
74824: GO 74206
// places := places - mc_remote_driver [ i ] ;
74826: LD_ADDR_VAR 0 5
74830: PUSH
74831: LD_VAR 0 5
74835: PUSH
74836: LD_EXP 92
74840: PUSH
74841: LD_VAR 0 2
74845: ARRAY
74846: MINUS
74847: ST_TO_ADDR
// if places then
74848: LD_VAR 0 5
74852: IFFALSE 74911
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
74854: LD_ADDR_EXP 92
74858: PUSH
74859: LD_EXP 92
74863: PPUSH
74864: LD_VAR 0 2
74868: PPUSH
74869: LD_EXP 92
74873: PUSH
74874: LD_VAR 0 2
74878: ARRAY
74879: PUSH
74880: LD_VAR 0 6
74884: PUSH
74885: LD_INT 1
74887: ARRAY
74888: UNION
74889: PPUSH
74890: CALL_OW 1
74894: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
74895: LD_VAR 0 6
74899: PUSH
74900: LD_INT 1
74902: ARRAY
74903: PPUSH
74904: LD_INT 126
74906: PPUSH
74907: CALL_OW 109
// end ; end ;
74911: GO 74206
74913: POP
74914: POP
// end ;
74915: LD_VAR 0 1
74919: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
74920: LD_INT 0
74922: PPUSH
74923: PPUSH
74924: PPUSH
74925: PPUSH
74926: PPUSH
74927: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
74928: LD_VAR 0 1
74932: NOT
74933: PUSH
74934: LD_VAR 0 2
74938: NOT
74939: OR
74940: PUSH
74941: LD_VAR 0 3
74945: NOT
74946: OR
74947: PUSH
74948: LD_VAR 0 4
74952: PUSH
74953: LD_INT 1
74955: PUSH
74956: LD_INT 2
74958: PUSH
74959: LD_INT 3
74961: PUSH
74962: LD_INT 4
74964: PUSH
74965: LD_INT 5
74967: PUSH
74968: LD_INT 8
74970: PUSH
74971: LD_INT 9
74973: PUSH
74974: LD_INT 15
74976: PUSH
74977: LD_INT 16
74979: PUSH
74980: EMPTY
74981: LIST
74982: LIST
74983: LIST
74984: LIST
74985: LIST
74986: LIST
74987: LIST
74988: LIST
74989: LIST
74990: IN
74991: NOT
74992: OR
74993: IFFALSE 74997
// exit ;
74995: GO 75897
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
74997: LD_ADDR_VAR 0 2
75001: PUSH
75002: LD_VAR 0 2
75006: PPUSH
75007: LD_INT 21
75009: PUSH
75010: LD_INT 3
75012: PUSH
75013: EMPTY
75014: LIST
75015: LIST
75016: PUSH
75017: LD_INT 24
75019: PUSH
75020: LD_INT 250
75022: PUSH
75023: EMPTY
75024: LIST
75025: LIST
75026: PUSH
75027: EMPTY
75028: LIST
75029: LIST
75030: PPUSH
75031: CALL_OW 72
75035: ST_TO_ADDR
// case class of 1 , 15 :
75036: LD_VAR 0 4
75040: PUSH
75041: LD_INT 1
75043: DOUBLE
75044: EQUAL
75045: IFTRUE 75055
75047: LD_INT 15
75049: DOUBLE
75050: EQUAL
75051: IFTRUE 75055
75053: GO 75140
75055: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
75056: LD_ADDR_VAR 0 8
75060: PUSH
75061: LD_VAR 0 2
75065: PPUSH
75066: LD_INT 2
75068: PUSH
75069: LD_INT 30
75071: PUSH
75072: LD_INT 32
75074: PUSH
75075: EMPTY
75076: LIST
75077: LIST
75078: PUSH
75079: LD_INT 30
75081: PUSH
75082: LD_INT 31
75084: PUSH
75085: EMPTY
75086: LIST
75087: LIST
75088: PUSH
75089: EMPTY
75090: LIST
75091: LIST
75092: LIST
75093: PPUSH
75094: CALL_OW 72
75098: PUSH
75099: LD_VAR 0 2
75103: PPUSH
75104: LD_INT 2
75106: PUSH
75107: LD_INT 30
75109: PUSH
75110: LD_INT 4
75112: PUSH
75113: EMPTY
75114: LIST
75115: LIST
75116: PUSH
75117: LD_INT 30
75119: PUSH
75120: LD_INT 5
75122: PUSH
75123: EMPTY
75124: LIST
75125: LIST
75126: PUSH
75127: EMPTY
75128: LIST
75129: LIST
75130: LIST
75131: PPUSH
75132: CALL_OW 72
75136: ADD
75137: ST_TO_ADDR
75138: GO 75386
75140: LD_INT 2
75142: DOUBLE
75143: EQUAL
75144: IFTRUE 75154
75146: LD_INT 16
75148: DOUBLE
75149: EQUAL
75150: IFTRUE 75154
75152: GO 75200
75154: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
75155: LD_ADDR_VAR 0 8
75159: PUSH
75160: LD_VAR 0 2
75164: PPUSH
75165: LD_INT 2
75167: PUSH
75168: LD_INT 30
75170: PUSH
75171: LD_INT 0
75173: PUSH
75174: EMPTY
75175: LIST
75176: LIST
75177: PUSH
75178: LD_INT 30
75180: PUSH
75181: LD_INT 1
75183: PUSH
75184: EMPTY
75185: LIST
75186: LIST
75187: PUSH
75188: EMPTY
75189: LIST
75190: LIST
75191: LIST
75192: PPUSH
75193: CALL_OW 72
75197: ST_TO_ADDR
75198: GO 75386
75200: LD_INT 3
75202: DOUBLE
75203: EQUAL
75204: IFTRUE 75208
75206: GO 75254
75208: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
75209: LD_ADDR_VAR 0 8
75213: PUSH
75214: LD_VAR 0 2
75218: PPUSH
75219: LD_INT 2
75221: PUSH
75222: LD_INT 30
75224: PUSH
75225: LD_INT 2
75227: PUSH
75228: EMPTY
75229: LIST
75230: LIST
75231: PUSH
75232: LD_INT 30
75234: PUSH
75235: LD_INT 3
75237: PUSH
75238: EMPTY
75239: LIST
75240: LIST
75241: PUSH
75242: EMPTY
75243: LIST
75244: LIST
75245: LIST
75246: PPUSH
75247: CALL_OW 72
75251: ST_TO_ADDR
75252: GO 75386
75254: LD_INT 4
75256: DOUBLE
75257: EQUAL
75258: IFTRUE 75262
75260: GO 75319
75262: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
75263: LD_ADDR_VAR 0 8
75267: PUSH
75268: LD_VAR 0 2
75272: PPUSH
75273: LD_INT 2
75275: PUSH
75276: LD_INT 30
75278: PUSH
75279: LD_INT 6
75281: PUSH
75282: EMPTY
75283: LIST
75284: LIST
75285: PUSH
75286: LD_INT 30
75288: PUSH
75289: LD_INT 7
75291: PUSH
75292: EMPTY
75293: LIST
75294: LIST
75295: PUSH
75296: LD_INT 30
75298: PUSH
75299: LD_INT 8
75301: PUSH
75302: EMPTY
75303: LIST
75304: LIST
75305: PUSH
75306: EMPTY
75307: LIST
75308: LIST
75309: LIST
75310: LIST
75311: PPUSH
75312: CALL_OW 72
75316: ST_TO_ADDR
75317: GO 75386
75319: LD_INT 5
75321: DOUBLE
75322: EQUAL
75323: IFTRUE 75339
75325: LD_INT 8
75327: DOUBLE
75328: EQUAL
75329: IFTRUE 75339
75331: LD_INT 9
75333: DOUBLE
75334: EQUAL
75335: IFTRUE 75339
75337: GO 75385
75339: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
75340: LD_ADDR_VAR 0 8
75344: PUSH
75345: LD_VAR 0 2
75349: PPUSH
75350: LD_INT 2
75352: PUSH
75353: LD_INT 30
75355: PUSH
75356: LD_INT 4
75358: PUSH
75359: EMPTY
75360: LIST
75361: LIST
75362: PUSH
75363: LD_INT 30
75365: PUSH
75366: LD_INT 5
75368: PUSH
75369: EMPTY
75370: LIST
75371: LIST
75372: PUSH
75373: EMPTY
75374: LIST
75375: LIST
75376: LIST
75377: PPUSH
75378: CALL_OW 72
75382: ST_TO_ADDR
75383: GO 75386
75385: POP
// if not tmp then
75386: LD_VAR 0 8
75390: NOT
75391: IFFALSE 75395
// exit ;
75393: GO 75897
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
75395: LD_VAR 0 4
75399: PUSH
75400: LD_INT 1
75402: PUSH
75403: LD_INT 15
75405: PUSH
75406: EMPTY
75407: LIST
75408: LIST
75409: IN
75410: PUSH
75411: LD_EXP 61
75415: PUSH
75416: LD_VAR 0 1
75420: ARRAY
75421: AND
75422: IFFALSE 75578
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
75424: LD_ADDR_VAR 0 9
75428: PUSH
75429: LD_EXP 61
75433: PUSH
75434: LD_VAR 0 1
75438: ARRAY
75439: PUSH
75440: LD_INT 1
75442: ARRAY
75443: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
75444: LD_VAR 0 9
75448: PUSH
75449: LD_EXP 62
75453: PUSH
75454: LD_VAR 0 1
75458: ARRAY
75459: IN
75460: NOT
75461: IFFALSE 75576
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
75463: LD_ADDR_EXP 62
75467: PUSH
75468: LD_EXP 62
75472: PPUSH
75473: LD_VAR 0 1
75477: PUSH
75478: LD_EXP 62
75482: PUSH
75483: LD_VAR 0 1
75487: ARRAY
75488: PUSH
75489: LD_INT 1
75491: PLUS
75492: PUSH
75493: EMPTY
75494: LIST
75495: LIST
75496: PPUSH
75497: LD_VAR 0 9
75501: PPUSH
75502: CALL 17428 0 3
75506: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
75507: LD_ADDR_EXP 61
75511: PUSH
75512: LD_EXP 61
75516: PPUSH
75517: LD_VAR 0 1
75521: PPUSH
75522: LD_EXP 61
75526: PUSH
75527: LD_VAR 0 1
75531: ARRAY
75532: PUSH
75533: LD_VAR 0 9
75537: DIFF
75538: PPUSH
75539: CALL_OW 1
75543: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
75544: LD_VAR 0 3
75548: PPUSH
75549: LD_EXP 62
75553: PUSH
75554: LD_VAR 0 1
75558: ARRAY
75559: PUSH
75560: LD_EXP 62
75564: PUSH
75565: LD_VAR 0 1
75569: ARRAY
75570: ARRAY
75571: PPUSH
75572: CALL_OW 120
// end ; exit ;
75576: GO 75897
// end ; if tmp > 1 then
75578: LD_VAR 0 8
75582: PUSH
75583: LD_INT 1
75585: GREATER
75586: IFFALSE 75690
// for i = 2 to tmp do
75588: LD_ADDR_VAR 0 6
75592: PUSH
75593: DOUBLE
75594: LD_INT 2
75596: DEC
75597: ST_TO_ADDR
75598: LD_VAR 0 8
75602: PUSH
75603: FOR_TO
75604: IFFALSE 75688
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
75606: LD_VAR 0 8
75610: PUSH
75611: LD_VAR 0 6
75615: ARRAY
75616: PPUSH
75617: CALL_OW 461
75621: PUSH
75622: LD_INT 6
75624: EQUAL
75625: IFFALSE 75686
// begin x := tmp [ i ] ;
75627: LD_ADDR_VAR 0 9
75631: PUSH
75632: LD_VAR 0 8
75636: PUSH
75637: LD_VAR 0 6
75641: ARRAY
75642: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
75643: LD_ADDR_VAR 0 8
75647: PUSH
75648: LD_VAR 0 8
75652: PPUSH
75653: LD_VAR 0 6
75657: PPUSH
75658: CALL_OW 3
75662: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
75663: LD_ADDR_VAR 0 8
75667: PUSH
75668: LD_VAR 0 8
75672: PPUSH
75673: LD_INT 1
75675: PPUSH
75676: LD_VAR 0 9
75680: PPUSH
75681: CALL_OW 2
75685: ST_TO_ADDR
// end ;
75686: GO 75603
75688: POP
75689: POP
// for i in tmp do
75690: LD_ADDR_VAR 0 6
75694: PUSH
75695: LD_VAR 0 8
75699: PUSH
75700: FOR_IN
75701: IFFALSE 75770
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
75703: LD_VAR 0 6
75707: PPUSH
75708: CALL_OW 313
75712: PUSH
75713: LD_INT 6
75715: LESS
75716: PUSH
75717: LD_VAR 0 6
75721: PPUSH
75722: CALL_OW 266
75726: PUSH
75727: LD_INT 31
75729: PUSH
75730: LD_INT 32
75732: PUSH
75733: EMPTY
75734: LIST
75735: LIST
75736: IN
75737: NOT
75738: AND
75739: PUSH
75740: LD_VAR 0 6
75744: PPUSH
75745: CALL_OW 313
75749: PUSH
75750: LD_INT 0
75752: EQUAL
75753: OR
75754: IFFALSE 75768
// begin j := i ;
75756: LD_ADDR_VAR 0 7
75760: PUSH
75761: LD_VAR 0 6
75765: ST_TO_ADDR
// break ;
75766: GO 75770
// end ; end ;
75768: GO 75700
75770: POP
75771: POP
// if j then
75772: LD_VAR 0 7
75776: IFFALSE 75794
// ComEnterUnit ( unit , j ) else
75778: LD_VAR 0 3
75782: PPUSH
75783: LD_VAR 0 7
75787: PPUSH
75788: CALL_OW 120
75792: GO 75897
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
75794: LD_ADDR_VAR 0 10
75798: PUSH
75799: LD_VAR 0 2
75803: PPUSH
75804: LD_INT 2
75806: PUSH
75807: LD_INT 30
75809: PUSH
75810: LD_INT 0
75812: PUSH
75813: EMPTY
75814: LIST
75815: LIST
75816: PUSH
75817: LD_INT 30
75819: PUSH
75820: LD_INT 1
75822: PUSH
75823: EMPTY
75824: LIST
75825: LIST
75826: PUSH
75827: EMPTY
75828: LIST
75829: LIST
75830: LIST
75831: PPUSH
75832: CALL_OW 72
75836: ST_TO_ADDR
// if depot then
75837: LD_VAR 0 10
75841: IFFALSE 75897
// begin depot := NearestUnitToUnit ( depot , unit ) ;
75843: LD_ADDR_VAR 0 10
75847: PUSH
75848: LD_VAR 0 10
75852: PPUSH
75853: LD_VAR 0 3
75857: PPUSH
75858: CALL_OW 74
75862: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
75863: LD_VAR 0 3
75867: PPUSH
75868: LD_VAR 0 10
75872: PPUSH
75873: CALL_OW 296
75877: PUSH
75878: LD_INT 10
75880: GREATER
75881: IFFALSE 75897
// ComStandNearbyBuilding ( unit , depot ) ;
75883: LD_VAR 0 3
75887: PPUSH
75888: LD_VAR 0 10
75892: PPUSH
75893: CALL 12135 0 2
// end ; end ; end ;
75897: LD_VAR 0 5
75901: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
75902: LD_INT 0
75904: PPUSH
75905: PPUSH
75906: PPUSH
75907: PPUSH
// if not mc_bases then
75908: LD_EXP 52
75912: NOT
75913: IFFALSE 75917
// exit ;
75915: GO 76156
// for i = 1 to mc_bases do
75917: LD_ADDR_VAR 0 2
75921: PUSH
75922: DOUBLE
75923: LD_INT 1
75925: DEC
75926: ST_TO_ADDR
75927: LD_EXP 52
75931: PUSH
75932: FOR_TO
75933: IFFALSE 76154
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
75935: LD_ADDR_VAR 0 4
75939: PUSH
75940: LD_EXP 52
75944: PUSH
75945: LD_VAR 0 2
75949: ARRAY
75950: PPUSH
75951: LD_INT 21
75953: PUSH
75954: LD_INT 1
75956: PUSH
75957: EMPTY
75958: LIST
75959: LIST
75960: PPUSH
75961: CALL_OW 72
75965: PUSH
75966: LD_EXP 81
75970: PUSH
75971: LD_VAR 0 2
75975: ARRAY
75976: UNION
75977: ST_TO_ADDR
// if not tmp then
75978: LD_VAR 0 4
75982: NOT
75983: IFFALSE 75987
// continue ;
75985: GO 75932
// for j in tmp do
75987: LD_ADDR_VAR 0 3
75991: PUSH
75992: LD_VAR 0 4
75996: PUSH
75997: FOR_IN
75998: IFFALSE 76150
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
76000: LD_VAR 0 3
76004: PPUSH
76005: CALL_OW 110
76009: NOT
76010: PUSH
76011: LD_VAR 0 3
76015: PPUSH
76016: CALL_OW 314
76020: NOT
76021: AND
76022: PUSH
76023: LD_VAR 0 3
76027: PPUSH
76028: CALL_OW 311
76032: NOT
76033: AND
76034: PUSH
76035: LD_VAR 0 3
76039: PPUSH
76040: CALL_OW 310
76044: NOT
76045: AND
76046: PUSH
76047: LD_VAR 0 3
76051: PUSH
76052: LD_EXP 55
76056: PUSH
76057: LD_VAR 0 2
76061: ARRAY
76062: PUSH
76063: LD_INT 1
76065: ARRAY
76066: IN
76067: NOT
76068: AND
76069: PUSH
76070: LD_VAR 0 3
76074: PUSH
76075: LD_EXP 55
76079: PUSH
76080: LD_VAR 0 2
76084: ARRAY
76085: PUSH
76086: LD_INT 2
76088: ARRAY
76089: IN
76090: NOT
76091: AND
76092: PUSH
76093: LD_VAR 0 3
76097: PUSH
76098: LD_EXP 64
76102: PUSH
76103: LD_VAR 0 2
76107: ARRAY
76108: IN
76109: NOT
76110: AND
76111: IFFALSE 76148
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
76113: LD_VAR 0 2
76117: PPUSH
76118: LD_EXP 52
76122: PUSH
76123: LD_VAR 0 2
76127: ARRAY
76128: PPUSH
76129: LD_VAR 0 3
76133: PPUSH
76134: LD_VAR 0 3
76138: PPUSH
76139: CALL_OW 257
76143: PPUSH
76144: CALL 74920 0 4
// end ;
76148: GO 75997
76150: POP
76151: POP
// end ;
76152: GO 75932
76154: POP
76155: POP
// end ;
76156: LD_VAR 0 1
76160: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
76161: LD_INT 0
76163: PPUSH
76164: PPUSH
76165: PPUSH
76166: PPUSH
76167: PPUSH
76168: PPUSH
// if not mc_bases [ base ] then
76169: LD_EXP 52
76173: PUSH
76174: LD_VAR 0 1
76178: ARRAY
76179: NOT
76180: IFFALSE 76184
// exit ;
76182: GO 76366
// tmp := [ ] ;
76184: LD_ADDR_VAR 0 6
76188: PUSH
76189: EMPTY
76190: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
76191: LD_ADDR_VAR 0 7
76195: PUSH
76196: LD_VAR 0 3
76200: PPUSH
76201: LD_INT 0
76203: PPUSH
76204: CALL_OW 517
76208: ST_TO_ADDR
// if not list then
76209: LD_VAR 0 7
76213: NOT
76214: IFFALSE 76218
// exit ;
76216: GO 76366
// for i = 1 to amount do
76218: LD_ADDR_VAR 0 5
76222: PUSH
76223: DOUBLE
76224: LD_INT 1
76226: DEC
76227: ST_TO_ADDR
76228: LD_VAR 0 2
76232: PUSH
76233: FOR_TO
76234: IFFALSE 76314
// begin x := rand ( 1 , list [ 1 ] ) ;
76236: LD_ADDR_VAR 0 8
76240: PUSH
76241: LD_INT 1
76243: PPUSH
76244: LD_VAR 0 7
76248: PUSH
76249: LD_INT 1
76251: ARRAY
76252: PPUSH
76253: CALL_OW 12
76257: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
76258: LD_ADDR_VAR 0 6
76262: PUSH
76263: LD_VAR 0 6
76267: PPUSH
76268: LD_VAR 0 5
76272: PPUSH
76273: LD_VAR 0 7
76277: PUSH
76278: LD_INT 1
76280: ARRAY
76281: PUSH
76282: LD_VAR 0 8
76286: ARRAY
76287: PUSH
76288: LD_VAR 0 7
76292: PUSH
76293: LD_INT 2
76295: ARRAY
76296: PUSH
76297: LD_VAR 0 8
76301: ARRAY
76302: PUSH
76303: EMPTY
76304: LIST
76305: LIST
76306: PPUSH
76307: CALL_OW 1
76311: ST_TO_ADDR
// end ;
76312: GO 76233
76314: POP
76315: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
76316: LD_ADDR_EXP 65
76320: PUSH
76321: LD_EXP 65
76325: PPUSH
76326: LD_VAR 0 1
76330: PPUSH
76331: LD_VAR 0 6
76335: PPUSH
76336: CALL_OW 1
76340: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
76341: LD_ADDR_EXP 67
76345: PUSH
76346: LD_EXP 67
76350: PPUSH
76351: LD_VAR 0 1
76355: PPUSH
76356: LD_VAR 0 3
76360: PPUSH
76361: CALL_OW 1
76365: ST_TO_ADDR
// end ;
76366: LD_VAR 0 4
76370: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
76371: LD_INT 0
76373: PPUSH
// if not mc_bases [ base ] then
76374: LD_EXP 52
76378: PUSH
76379: LD_VAR 0 1
76383: ARRAY
76384: NOT
76385: IFFALSE 76389
// exit ;
76387: GO 76414
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
76389: LD_ADDR_EXP 57
76393: PUSH
76394: LD_EXP 57
76398: PPUSH
76399: LD_VAR 0 1
76403: PPUSH
76404: LD_VAR 0 2
76408: PPUSH
76409: CALL_OW 1
76413: ST_TO_ADDR
// end ;
76414: LD_VAR 0 3
76418: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
76419: LD_INT 0
76421: PPUSH
// if not mc_bases [ base ] then
76422: LD_EXP 52
76426: PUSH
76427: LD_VAR 0 1
76431: ARRAY
76432: NOT
76433: IFFALSE 76437
// exit ;
76435: GO 76474
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
76437: LD_ADDR_EXP 57
76441: PUSH
76442: LD_EXP 57
76446: PPUSH
76447: LD_VAR 0 1
76451: PPUSH
76452: LD_EXP 57
76456: PUSH
76457: LD_VAR 0 1
76461: ARRAY
76462: PUSH
76463: LD_VAR 0 2
76467: UNION
76468: PPUSH
76469: CALL_OW 1
76473: ST_TO_ADDR
// end ;
76474: LD_VAR 0 3
76478: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
76479: LD_INT 0
76481: PPUSH
// if not mc_bases [ base ] then
76482: LD_EXP 52
76486: PUSH
76487: LD_VAR 0 1
76491: ARRAY
76492: NOT
76493: IFFALSE 76497
// exit ;
76495: GO 76522
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
76497: LD_ADDR_EXP 73
76501: PUSH
76502: LD_EXP 73
76506: PPUSH
76507: LD_VAR 0 1
76511: PPUSH
76512: LD_VAR 0 2
76516: PPUSH
76517: CALL_OW 1
76521: ST_TO_ADDR
// end ;
76522: LD_VAR 0 3
76526: RET
// export function MC_InsertProduceList ( base , components ) ; begin
76527: LD_INT 0
76529: PPUSH
// if not mc_bases [ base ] then
76530: LD_EXP 52
76534: PUSH
76535: LD_VAR 0 1
76539: ARRAY
76540: NOT
76541: IFFALSE 76545
// exit ;
76543: GO 76582
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
76545: LD_ADDR_EXP 73
76549: PUSH
76550: LD_EXP 73
76554: PPUSH
76555: LD_VAR 0 1
76559: PPUSH
76560: LD_EXP 73
76564: PUSH
76565: LD_VAR 0 1
76569: ARRAY
76570: PUSH
76571: LD_VAR 0 2
76575: ADD
76576: PPUSH
76577: CALL_OW 1
76581: ST_TO_ADDR
// end ;
76582: LD_VAR 0 3
76586: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
76587: LD_INT 0
76589: PPUSH
// if not mc_bases [ base ] then
76590: LD_EXP 52
76594: PUSH
76595: LD_VAR 0 1
76599: ARRAY
76600: NOT
76601: IFFALSE 76605
// exit ;
76603: GO 76659
// mc_defender := Replace ( mc_defender , base , deflist ) ;
76605: LD_ADDR_EXP 74
76609: PUSH
76610: LD_EXP 74
76614: PPUSH
76615: LD_VAR 0 1
76619: PPUSH
76620: LD_VAR 0 2
76624: PPUSH
76625: CALL_OW 1
76629: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
76630: LD_ADDR_EXP 63
76634: PUSH
76635: LD_EXP 63
76639: PPUSH
76640: LD_VAR 0 1
76644: PPUSH
76645: LD_VAR 0 2
76649: PUSH
76650: LD_INT 0
76652: PLUS
76653: PPUSH
76654: CALL_OW 1
76658: ST_TO_ADDR
// end ;
76659: LD_VAR 0 3
76663: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
76664: LD_INT 0
76666: PPUSH
// if not mc_bases [ base ] then
76667: LD_EXP 52
76671: PUSH
76672: LD_VAR 0 1
76676: ARRAY
76677: NOT
76678: IFFALSE 76682
// exit ;
76680: GO 76707
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
76682: LD_ADDR_EXP 63
76686: PUSH
76687: LD_EXP 63
76691: PPUSH
76692: LD_VAR 0 1
76696: PPUSH
76697: LD_VAR 0 2
76701: PPUSH
76702: CALL_OW 1
76706: ST_TO_ADDR
// end ;
76707: LD_VAR 0 3
76711: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
76712: LD_INT 0
76714: PPUSH
76715: PPUSH
76716: PPUSH
76717: PPUSH
// if not mc_bases [ base ] then
76718: LD_EXP 52
76722: PUSH
76723: LD_VAR 0 1
76727: ARRAY
76728: NOT
76729: IFFALSE 76733
// exit ;
76731: GO 76798
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
76733: LD_ADDR_EXP 72
76737: PUSH
76738: LD_EXP 72
76742: PPUSH
76743: LD_VAR 0 1
76747: PUSH
76748: LD_EXP 72
76752: PUSH
76753: LD_VAR 0 1
76757: ARRAY
76758: PUSH
76759: LD_INT 1
76761: PLUS
76762: PUSH
76763: EMPTY
76764: LIST
76765: LIST
76766: PPUSH
76767: LD_VAR 0 1
76771: PUSH
76772: LD_VAR 0 2
76776: PUSH
76777: LD_VAR 0 3
76781: PUSH
76782: LD_VAR 0 4
76786: PUSH
76787: EMPTY
76788: LIST
76789: LIST
76790: LIST
76791: LIST
76792: PPUSH
76793: CALL 17428 0 3
76797: ST_TO_ADDR
// end ;
76798: LD_VAR 0 5
76802: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
76803: LD_INT 0
76805: PPUSH
// if not mc_bases [ base ] then
76806: LD_EXP 52
76810: PUSH
76811: LD_VAR 0 1
76815: ARRAY
76816: NOT
76817: IFFALSE 76821
// exit ;
76819: GO 76846
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
76821: LD_ADDR_EXP 89
76825: PUSH
76826: LD_EXP 89
76830: PPUSH
76831: LD_VAR 0 1
76835: PPUSH
76836: LD_VAR 0 2
76840: PPUSH
76841: CALL_OW 1
76845: ST_TO_ADDR
// end ;
76846: LD_VAR 0 3
76850: RET
// export function MC_GetMinesField ( base ) ; begin
76851: LD_INT 0
76853: PPUSH
// result := mc_mines [ base ] ;
76854: LD_ADDR_VAR 0 2
76858: PUSH
76859: LD_EXP 65
76863: PUSH
76864: LD_VAR 0 1
76868: ARRAY
76869: ST_TO_ADDR
// end ;
76870: LD_VAR 0 2
76874: RET
// export function MC_GetProduceList ( base ) ; begin
76875: LD_INT 0
76877: PPUSH
// result := mc_produce [ base ] ;
76878: LD_ADDR_VAR 0 2
76882: PUSH
76883: LD_EXP 73
76887: PUSH
76888: LD_VAR 0 1
76892: ARRAY
76893: ST_TO_ADDR
// end ;
76894: LD_VAR 0 2
76898: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
76899: LD_INT 0
76901: PPUSH
76902: PPUSH
// if not mc_bases then
76903: LD_EXP 52
76907: NOT
76908: IFFALSE 76912
// exit ;
76910: GO 76977
// if mc_bases [ base ] then
76912: LD_EXP 52
76916: PUSH
76917: LD_VAR 0 1
76921: ARRAY
76922: IFFALSE 76977
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
76924: LD_ADDR_VAR 0 3
76928: PUSH
76929: LD_EXP 52
76933: PUSH
76934: LD_VAR 0 1
76938: ARRAY
76939: PPUSH
76940: LD_INT 30
76942: PUSH
76943: LD_VAR 0 2
76947: PUSH
76948: EMPTY
76949: LIST
76950: LIST
76951: PPUSH
76952: CALL_OW 72
76956: ST_TO_ADDR
// if result then
76957: LD_VAR 0 3
76961: IFFALSE 76977
// result := result [ 1 ] ;
76963: LD_ADDR_VAR 0 3
76967: PUSH
76968: LD_VAR 0 3
76972: PUSH
76973: LD_INT 1
76975: ARRAY
76976: ST_TO_ADDR
// end ; end ;
76977: LD_VAR 0 3
76981: RET
// export function MC_SetTame ( base , area ) ; begin
76982: LD_INT 0
76984: PPUSH
// if not mc_bases or not base then
76985: LD_EXP 52
76989: NOT
76990: PUSH
76991: LD_VAR 0 1
76995: NOT
76996: OR
76997: IFFALSE 77001
// exit ;
76999: GO 77026
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
77001: LD_ADDR_EXP 80
77005: PUSH
77006: LD_EXP 80
77010: PPUSH
77011: LD_VAR 0 1
77015: PPUSH
77016: LD_VAR 0 2
77020: PPUSH
77021: CALL_OW 1
77025: ST_TO_ADDR
// end ;
77026: LD_VAR 0 3
77030: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
77031: LD_INT 0
77033: PPUSH
77034: PPUSH
// if not mc_bases or not base then
77035: LD_EXP 52
77039: NOT
77040: PUSH
77041: LD_VAR 0 1
77045: NOT
77046: OR
77047: IFFALSE 77051
// exit ;
77049: GO 77153
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
77051: LD_ADDR_VAR 0 4
77055: PUSH
77056: LD_EXP 52
77060: PUSH
77061: LD_VAR 0 1
77065: ARRAY
77066: PPUSH
77067: LD_INT 30
77069: PUSH
77070: LD_VAR 0 2
77074: PUSH
77075: EMPTY
77076: LIST
77077: LIST
77078: PPUSH
77079: CALL_OW 72
77083: ST_TO_ADDR
// if not tmp then
77084: LD_VAR 0 4
77088: NOT
77089: IFFALSE 77093
// exit ;
77091: GO 77153
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
77093: LD_ADDR_EXP 84
77097: PUSH
77098: LD_EXP 84
77102: PPUSH
77103: LD_VAR 0 1
77107: PPUSH
77108: LD_EXP 84
77112: PUSH
77113: LD_VAR 0 1
77117: ARRAY
77118: PPUSH
77119: LD_EXP 84
77123: PUSH
77124: LD_VAR 0 1
77128: ARRAY
77129: PUSH
77130: LD_INT 1
77132: PLUS
77133: PPUSH
77134: LD_VAR 0 4
77138: PUSH
77139: LD_INT 1
77141: ARRAY
77142: PPUSH
77143: CALL_OW 2
77147: PPUSH
77148: CALL_OW 1
77152: ST_TO_ADDR
// end ;
77153: LD_VAR 0 3
77157: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
77158: LD_INT 0
77160: PPUSH
77161: PPUSH
// if not mc_bases or not base or not kinds then
77162: LD_EXP 52
77166: NOT
77167: PUSH
77168: LD_VAR 0 1
77172: NOT
77173: OR
77174: PUSH
77175: LD_VAR 0 2
77179: NOT
77180: OR
77181: IFFALSE 77185
// exit ;
77183: GO 77246
// for i in kinds do
77185: LD_ADDR_VAR 0 4
77189: PUSH
77190: LD_VAR 0 2
77194: PUSH
77195: FOR_IN
77196: IFFALSE 77244
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
77198: LD_ADDR_EXP 86
77202: PUSH
77203: LD_EXP 86
77207: PPUSH
77208: LD_VAR 0 1
77212: PUSH
77213: LD_EXP 86
77217: PUSH
77218: LD_VAR 0 1
77222: ARRAY
77223: PUSH
77224: LD_INT 1
77226: PLUS
77227: PUSH
77228: EMPTY
77229: LIST
77230: LIST
77231: PPUSH
77232: LD_VAR 0 4
77236: PPUSH
77237: CALL 17428 0 3
77241: ST_TO_ADDR
77242: GO 77195
77244: POP
77245: POP
// end ;
77246: LD_VAR 0 3
77250: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
77251: LD_INT 0
77253: PPUSH
// if not mc_bases or not base or not areas then
77254: LD_EXP 52
77258: NOT
77259: PUSH
77260: LD_VAR 0 1
77264: NOT
77265: OR
77266: PUSH
77267: LD_VAR 0 2
77271: NOT
77272: OR
77273: IFFALSE 77277
// exit ;
77275: GO 77302
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
77277: LD_ADDR_EXP 70
77281: PUSH
77282: LD_EXP 70
77286: PPUSH
77287: LD_VAR 0 1
77291: PPUSH
77292: LD_VAR 0 2
77296: PPUSH
77297: CALL_OW 1
77301: ST_TO_ADDR
// end ;
77302: LD_VAR 0 3
77306: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
77307: LD_INT 0
77309: PPUSH
// if not mc_bases or not base or not teleports_exit then
77310: LD_EXP 52
77314: NOT
77315: PUSH
77316: LD_VAR 0 1
77320: NOT
77321: OR
77322: PUSH
77323: LD_VAR 0 2
77327: NOT
77328: OR
77329: IFFALSE 77333
// exit ;
77331: GO 77358
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
77333: LD_ADDR_EXP 87
77337: PUSH
77338: LD_EXP 87
77342: PPUSH
77343: LD_VAR 0 1
77347: PPUSH
77348: LD_VAR 0 2
77352: PPUSH
77353: CALL_OW 1
77357: ST_TO_ADDR
// end ;
77358: LD_VAR 0 3
77362: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
77363: LD_INT 0
77365: PPUSH
77366: PPUSH
77367: PPUSH
// if not mc_bases or not base or not ext_list then
77368: LD_EXP 52
77372: NOT
77373: PUSH
77374: LD_VAR 0 1
77378: NOT
77379: OR
77380: PUSH
77381: LD_VAR 0 5
77385: NOT
77386: OR
77387: IFFALSE 77391
// exit ;
77389: GO 77564
// tmp := GetFacExtXYD ( x , y , d ) ;
77391: LD_ADDR_VAR 0 8
77395: PUSH
77396: LD_VAR 0 2
77400: PPUSH
77401: LD_VAR 0 3
77405: PPUSH
77406: LD_VAR 0 4
77410: PPUSH
77411: CALL 50800 0 3
77415: ST_TO_ADDR
// if not tmp then
77416: LD_VAR 0 8
77420: NOT
77421: IFFALSE 77425
// exit ;
77423: GO 77564
// for i in tmp do
77425: LD_ADDR_VAR 0 7
77429: PUSH
77430: LD_VAR 0 8
77434: PUSH
77435: FOR_IN
77436: IFFALSE 77562
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
77438: LD_ADDR_EXP 57
77442: PUSH
77443: LD_EXP 57
77447: PPUSH
77448: LD_VAR 0 1
77452: PPUSH
77453: LD_EXP 57
77457: PUSH
77458: LD_VAR 0 1
77462: ARRAY
77463: PPUSH
77464: LD_EXP 57
77468: PUSH
77469: LD_VAR 0 1
77473: ARRAY
77474: PUSH
77475: LD_INT 1
77477: PLUS
77478: PPUSH
77479: LD_VAR 0 5
77483: PUSH
77484: LD_INT 1
77486: ARRAY
77487: PUSH
77488: LD_VAR 0 7
77492: PUSH
77493: LD_INT 1
77495: ARRAY
77496: PUSH
77497: LD_VAR 0 7
77501: PUSH
77502: LD_INT 2
77504: ARRAY
77505: PUSH
77506: LD_VAR 0 7
77510: PUSH
77511: LD_INT 3
77513: ARRAY
77514: PUSH
77515: EMPTY
77516: LIST
77517: LIST
77518: LIST
77519: LIST
77520: PPUSH
77521: CALL_OW 2
77525: PPUSH
77526: CALL_OW 1
77530: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
77531: LD_ADDR_VAR 0 5
77535: PUSH
77536: LD_VAR 0 5
77540: PPUSH
77541: LD_INT 1
77543: PPUSH
77544: CALL_OW 3
77548: ST_TO_ADDR
// if not ext_list then
77549: LD_VAR 0 5
77553: NOT
77554: IFFALSE 77560
// exit ;
77556: POP
77557: POP
77558: GO 77564
// end ;
77560: GO 77435
77562: POP
77563: POP
// end ;
77564: LD_VAR 0 6
77568: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
77569: LD_INT 0
77571: PPUSH
// if not mc_bases or not base or not weapon_list then
77572: LD_EXP 52
77576: NOT
77577: PUSH
77578: LD_VAR 0 1
77582: NOT
77583: OR
77584: PUSH
77585: LD_VAR 0 2
77589: NOT
77590: OR
77591: IFFALSE 77595
// exit ;
77593: GO 77620
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
77595: LD_ADDR_EXP 91
77599: PUSH
77600: LD_EXP 91
77604: PPUSH
77605: LD_VAR 0 1
77609: PPUSH
77610: LD_VAR 0 2
77614: PPUSH
77615: CALL_OW 1
77619: ST_TO_ADDR
// end ;
77620: LD_VAR 0 3
77624: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
77625: LD_INT 0
77627: PPUSH
// if not mc_bases or not base or not tech_list then
77628: LD_EXP 52
77632: NOT
77633: PUSH
77634: LD_VAR 0 1
77638: NOT
77639: OR
77640: PUSH
77641: LD_VAR 0 2
77645: NOT
77646: OR
77647: IFFALSE 77651
// exit ;
77649: GO 77676
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
77651: LD_ADDR_EXP 79
77655: PUSH
77656: LD_EXP 79
77660: PPUSH
77661: LD_VAR 0 1
77665: PPUSH
77666: LD_VAR 0 2
77670: PPUSH
77671: CALL_OW 1
77675: ST_TO_ADDR
// end ;
77676: LD_VAR 0 3
77680: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
77681: LD_INT 0
77683: PPUSH
// if not mc_bases or not parking_area or not base then
77684: LD_EXP 52
77688: NOT
77689: PUSH
77690: LD_VAR 0 2
77694: NOT
77695: OR
77696: PUSH
77697: LD_VAR 0 1
77701: NOT
77702: OR
77703: IFFALSE 77707
// exit ;
77705: GO 77732
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
77707: LD_ADDR_EXP 76
77711: PUSH
77712: LD_EXP 76
77716: PPUSH
77717: LD_VAR 0 1
77721: PPUSH
77722: LD_VAR 0 2
77726: PPUSH
77727: CALL_OW 1
77731: ST_TO_ADDR
// end ;
77732: LD_VAR 0 3
77736: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
77737: LD_INT 0
77739: PPUSH
// if not mc_bases or not base or not scan_area then
77740: LD_EXP 52
77744: NOT
77745: PUSH
77746: LD_VAR 0 1
77750: NOT
77751: OR
77752: PUSH
77753: LD_VAR 0 2
77757: NOT
77758: OR
77759: IFFALSE 77763
// exit ;
77761: GO 77788
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
77763: LD_ADDR_EXP 77
77767: PUSH
77768: LD_EXP 77
77772: PPUSH
77773: LD_VAR 0 1
77777: PPUSH
77778: LD_VAR 0 2
77782: PPUSH
77783: CALL_OW 1
77787: ST_TO_ADDR
// end ;
77788: LD_VAR 0 3
77792: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
77793: LD_INT 0
77795: PPUSH
77796: PPUSH
// if not mc_bases or not base then
77797: LD_EXP 52
77801: NOT
77802: PUSH
77803: LD_VAR 0 1
77807: NOT
77808: OR
77809: IFFALSE 77813
// exit ;
77811: GO 77877
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
77813: LD_ADDR_VAR 0 3
77817: PUSH
77818: LD_INT 1
77820: PUSH
77821: LD_INT 2
77823: PUSH
77824: LD_INT 3
77826: PUSH
77827: LD_INT 4
77829: PUSH
77830: LD_INT 11
77832: PUSH
77833: EMPTY
77834: LIST
77835: LIST
77836: LIST
77837: LIST
77838: LIST
77839: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
77840: LD_ADDR_EXP 79
77844: PUSH
77845: LD_EXP 79
77849: PPUSH
77850: LD_VAR 0 1
77854: PPUSH
77855: LD_EXP 79
77859: PUSH
77860: LD_VAR 0 1
77864: ARRAY
77865: PUSH
77866: LD_VAR 0 3
77870: DIFF
77871: PPUSH
77872: CALL_OW 1
77876: ST_TO_ADDR
// end ;
77877: LD_VAR 0 2
77881: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
77882: LD_INT 0
77884: PPUSH
// result := mc_vehicles [ base ] ;
77885: LD_ADDR_VAR 0 3
77889: PUSH
77890: LD_EXP 71
77894: PUSH
77895: LD_VAR 0 1
77899: ARRAY
77900: ST_TO_ADDR
// if onlyCombat then
77901: LD_VAR 0 2
77905: IFFALSE 78070
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
77907: LD_ADDR_VAR 0 3
77911: PUSH
77912: LD_VAR 0 3
77916: PUSH
77917: LD_VAR 0 3
77921: PPUSH
77922: LD_INT 2
77924: PUSH
77925: LD_INT 34
77927: PUSH
77928: LD_INT 12
77930: PUSH
77931: EMPTY
77932: LIST
77933: LIST
77934: PUSH
77935: LD_INT 34
77937: PUSH
77938: LD_INT 51
77940: PUSH
77941: EMPTY
77942: LIST
77943: LIST
77944: PUSH
77945: LD_INT 34
77947: PUSH
77948: LD_EXP 46
77952: PUSH
77953: EMPTY
77954: LIST
77955: LIST
77956: PUSH
77957: LD_INT 34
77959: PUSH
77960: LD_INT 32
77962: PUSH
77963: EMPTY
77964: LIST
77965: LIST
77966: PUSH
77967: LD_INT 34
77969: PUSH
77970: LD_INT 13
77972: PUSH
77973: EMPTY
77974: LIST
77975: LIST
77976: PUSH
77977: LD_INT 34
77979: PUSH
77980: LD_INT 52
77982: PUSH
77983: EMPTY
77984: LIST
77985: LIST
77986: PUSH
77987: LD_INT 34
77989: PUSH
77990: LD_INT 14
77992: PUSH
77993: EMPTY
77994: LIST
77995: LIST
77996: PUSH
77997: LD_INT 34
77999: PUSH
78000: LD_INT 53
78002: PUSH
78003: EMPTY
78004: LIST
78005: LIST
78006: PUSH
78007: LD_INT 34
78009: PUSH
78010: LD_EXP 45
78014: PUSH
78015: EMPTY
78016: LIST
78017: LIST
78018: PUSH
78019: LD_INT 34
78021: PUSH
78022: LD_INT 31
78024: PUSH
78025: EMPTY
78026: LIST
78027: LIST
78028: PUSH
78029: LD_INT 34
78031: PUSH
78032: LD_INT 48
78034: PUSH
78035: EMPTY
78036: LIST
78037: LIST
78038: PUSH
78039: LD_INT 34
78041: PUSH
78042: LD_INT 8
78044: PUSH
78045: EMPTY
78046: LIST
78047: LIST
78048: PUSH
78049: EMPTY
78050: LIST
78051: LIST
78052: LIST
78053: LIST
78054: LIST
78055: LIST
78056: LIST
78057: LIST
78058: LIST
78059: LIST
78060: LIST
78061: LIST
78062: LIST
78063: PPUSH
78064: CALL_OW 72
78068: DIFF
78069: ST_TO_ADDR
// end ; end_of_file
78070: LD_VAR 0 3
78074: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
78075: LD_INT 0
78077: PPUSH
78078: PPUSH
78079: PPUSH
// if not mc_bases or not skirmish then
78080: LD_EXP 52
78084: NOT
78085: PUSH
78086: LD_EXP 50
78090: NOT
78091: OR
78092: IFFALSE 78096
// exit ;
78094: GO 78261
// for i = 1 to mc_bases do
78096: LD_ADDR_VAR 0 4
78100: PUSH
78101: DOUBLE
78102: LD_INT 1
78104: DEC
78105: ST_TO_ADDR
78106: LD_EXP 52
78110: PUSH
78111: FOR_TO
78112: IFFALSE 78259
// begin if sci in mc_bases [ i ] then
78114: LD_VAR 0 2
78118: PUSH
78119: LD_EXP 52
78123: PUSH
78124: LD_VAR 0 4
78128: ARRAY
78129: IN
78130: IFFALSE 78257
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
78132: LD_ADDR_EXP 81
78136: PUSH
78137: LD_EXP 81
78141: PPUSH
78142: LD_VAR 0 4
78146: PUSH
78147: LD_EXP 81
78151: PUSH
78152: LD_VAR 0 4
78156: ARRAY
78157: PUSH
78158: LD_INT 1
78160: PLUS
78161: PUSH
78162: EMPTY
78163: LIST
78164: LIST
78165: PPUSH
78166: LD_VAR 0 1
78170: PPUSH
78171: CALL 17428 0 3
78175: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
78176: LD_ADDR_VAR 0 5
78180: PUSH
78181: LD_EXP 52
78185: PUSH
78186: LD_VAR 0 4
78190: ARRAY
78191: PPUSH
78192: LD_INT 2
78194: PUSH
78195: LD_INT 30
78197: PUSH
78198: LD_INT 0
78200: PUSH
78201: EMPTY
78202: LIST
78203: LIST
78204: PUSH
78205: LD_INT 30
78207: PUSH
78208: LD_INT 1
78210: PUSH
78211: EMPTY
78212: LIST
78213: LIST
78214: PUSH
78215: EMPTY
78216: LIST
78217: LIST
78218: LIST
78219: PPUSH
78220: CALL_OW 72
78224: PPUSH
78225: LD_VAR 0 1
78229: PPUSH
78230: CALL_OW 74
78234: ST_TO_ADDR
// if tmp then
78235: LD_VAR 0 5
78239: IFFALSE 78255
// ComStandNearbyBuilding ( ape , tmp ) ;
78241: LD_VAR 0 1
78245: PPUSH
78246: LD_VAR 0 5
78250: PPUSH
78251: CALL 12135 0 2
// break ;
78255: GO 78259
// end ; end ;
78257: GO 78111
78259: POP
78260: POP
// end ;
78261: LD_VAR 0 3
78265: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
78266: LD_INT 0
78268: PPUSH
78269: PPUSH
78270: PPUSH
// if not mc_bases or not skirmish then
78271: LD_EXP 52
78275: NOT
78276: PUSH
78277: LD_EXP 50
78281: NOT
78282: OR
78283: IFFALSE 78287
// exit ;
78285: GO 78376
// for i = 1 to mc_bases do
78287: LD_ADDR_VAR 0 4
78291: PUSH
78292: DOUBLE
78293: LD_INT 1
78295: DEC
78296: ST_TO_ADDR
78297: LD_EXP 52
78301: PUSH
78302: FOR_TO
78303: IFFALSE 78374
// begin if building in mc_busy_turret_list [ i ] then
78305: LD_VAR 0 1
78309: PUSH
78310: LD_EXP 62
78314: PUSH
78315: LD_VAR 0 4
78319: ARRAY
78320: IN
78321: IFFALSE 78372
// begin tmp := mc_busy_turret_list [ i ] diff building ;
78323: LD_ADDR_VAR 0 5
78327: PUSH
78328: LD_EXP 62
78332: PUSH
78333: LD_VAR 0 4
78337: ARRAY
78338: PUSH
78339: LD_VAR 0 1
78343: DIFF
78344: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
78345: LD_ADDR_EXP 62
78349: PUSH
78350: LD_EXP 62
78354: PPUSH
78355: LD_VAR 0 4
78359: PPUSH
78360: LD_VAR 0 5
78364: PPUSH
78365: CALL_OW 1
78369: ST_TO_ADDR
// break ;
78370: GO 78374
// end ; end ;
78372: GO 78302
78374: POP
78375: POP
// end ;
78376: LD_VAR 0 3
78380: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
78381: LD_INT 0
78383: PPUSH
78384: PPUSH
78385: PPUSH
// if not mc_bases or not skirmish then
78386: LD_EXP 52
78390: NOT
78391: PUSH
78392: LD_EXP 50
78396: NOT
78397: OR
78398: IFFALSE 78402
// exit ;
78400: GO 78601
// for i = 1 to mc_bases do
78402: LD_ADDR_VAR 0 5
78406: PUSH
78407: DOUBLE
78408: LD_INT 1
78410: DEC
78411: ST_TO_ADDR
78412: LD_EXP 52
78416: PUSH
78417: FOR_TO
78418: IFFALSE 78599
// if building in mc_bases [ i ] then
78420: LD_VAR 0 1
78424: PUSH
78425: LD_EXP 52
78429: PUSH
78430: LD_VAR 0 5
78434: ARRAY
78435: IN
78436: IFFALSE 78597
// begin tmp := mc_bases [ i ] diff building ;
78438: LD_ADDR_VAR 0 6
78442: PUSH
78443: LD_EXP 52
78447: PUSH
78448: LD_VAR 0 5
78452: ARRAY
78453: PUSH
78454: LD_VAR 0 1
78458: DIFF
78459: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
78460: LD_ADDR_EXP 52
78464: PUSH
78465: LD_EXP 52
78469: PPUSH
78470: LD_VAR 0 5
78474: PPUSH
78475: LD_VAR 0 6
78479: PPUSH
78480: CALL_OW 1
78484: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
78485: LD_VAR 0 1
78489: PUSH
78490: LD_EXP 60
78494: PUSH
78495: LD_VAR 0 5
78499: ARRAY
78500: IN
78501: IFFALSE 78540
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
78503: LD_ADDR_EXP 60
78507: PUSH
78508: LD_EXP 60
78512: PPUSH
78513: LD_VAR 0 5
78517: PPUSH
78518: LD_EXP 60
78522: PUSH
78523: LD_VAR 0 5
78527: ARRAY
78528: PUSH
78529: LD_VAR 0 1
78533: DIFF
78534: PPUSH
78535: CALL_OW 1
78539: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
78540: LD_VAR 0 1
78544: PUSH
78545: LD_EXP 61
78549: PUSH
78550: LD_VAR 0 5
78554: ARRAY
78555: IN
78556: IFFALSE 78595
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
78558: LD_ADDR_EXP 61
78562: PUSH
78563: LD_EXP 61
78567: PPUSH
78568: LD_VAR 0 5
78572: PPUSH
78573: LD_EXP 61
78577: PUSH
78578: LD_VAR 0 5
78582: ARRAY
78583: PUSH
78584: LD_VAR 0 1
78588: DIFF
78589: PPUSH
78590: CALL_OW 1
78594: ST_TO_ADDR
// break ;
78595: GO 78599
// end ;
78597: GO 78417
78599: POP
78600: POP
// end ;
78601: LD_VAR 0 4
78605: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
78606: LD_INT 0
78608: PPUSH
78609: PPUSH
78610: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
78611: LD_EXP 52
78615: NOT
78616: PUSH
78617: LD_EXP 50
78621: NOT
78622: OR
78623: PUSH
78624: LD_VAR 0 3
78628: PUSH
78629: LD_EXP 78
78633: IN
78634: NOT
78635: OR
78636: IFFALSE 78640
// exit ;
78638: GO 78763
// for i = 1 to mc_vehicles do
78640: LD_ADDR_VAR 0 6
78644: PUSH
78645: DOUBLE
78646: LD_INT 1
78648: DEC
78649: ST_TO_ADDR
78650: LD_EXP 71
78654: PUSH
78655: FOR_TO
78656: IFFALSE 78761
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
78658: LD_VAR 0 2
78662: PUSH
78663: LD_EXP 71
78667: PUSH
78668: LD_VAR 0 6
78672: ARRAY
78673: IN
78674: PUSH
78675: LD_VAR 0 1
78679: PUSH
78680: LD_EXP 71
78684: PUSH
78685: LD_VAR 0 6
78689: ARRAY
78690: IN
78691: OR
78692: IFFALSE 78759
// begin tmp := mc_vehicles [ i ] diff old ;
78694: LD_ADDR_VAR 0 7
78698: PUSH
78699: LD_EXP 71
78703: PUSH
78704: LD_VAR 0 6
78708: ARRAY
78709: PUSH
78710: LD_VAR 0 2
78714: DIFF
78715: ST_TO_ADDR
// tmp := tmp diff new ;
78716: LD_ADDR_VAR 0 7
78720: PUSH
78721: LD_VAR 0 7
78725: PUSH
78726: LD_VAR 0 1
78730: DIFF
78731: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
78732: LD_ADDR_EXP 71
78736: PUSH
78737: LD_EXP 71
78741: PPUSH
78742: LD_VAR 0 6
78746: PPUSH
78747: LD_VAR 0 7
78751: PPUSH
78752: CALL_OW 1
78756: ST_TO_ADDR
// break ;
78757: GO 78761
// end ;
78759: GO 78655
78761: POP
78762: POP
// end ;
78763: LD_VAR 0 5
78767: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
78768: LD_INT 0
78770: PPUSH
78771: PPUSH
78772: PPUSH
78773: PPUSH
// if not mc_bases or not skirmish then
78774: LD_EXP 52
78778: NOT
78779: PUSH
78780: LD_EXP 50
78784: NOT
78785: OR
78786: IFFALSE 78790
// exit ;
78788: GO 79167
// side := GetSide ( vehicle ) ;
78790: LD_ADDR_VAR 0 5
78794: PUSH
78795: LD_VAR 0 1
78799: PPUSH
78800: CALL_OW 255
78804: ST_TO_ADDR
// for i = 1 to mc_bases do
78805: LD_ADDR_VAR 0 4
78809: PUSH
78810: DOUBLE
78811: LD_INT 1
78813: DEC
78814: ST_TO_ADDR
78815: LD_EXP 52
78819: PUSH
78820: FOR_TO
78821: IFFALSE 79165
// begin if factory in mc_bases [ i ] then
78823: LD_VAR 0 2
78827: PUSH
78828: LD_EXP 52
78832: PUSH
78833: LD_VAR 0 4
78837: ARRAY
78838: IN
78839: IFFALSE 79163
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
78841: LD_EXP 74
78845: PUSH
78846: LD_VAR 0 4
78850: ARRAY
78851: PUSH
78852: LD_EXP 63
78856: PUSH
78857: LD_VAR 0 4
78861: ARRAY
78862: LESS
78863: PUSH
78864: LD_VAR 0 1
78868: PPUSH
78869: CALL_OW 264
78873: PUSH
78874: LD_INT 31
78876: PUSH
78877: LD_INT 32
78879: PUSH
78880: LD_INT 51
78882: PUSH
78883: LD_EXP 46
78887: PUSH
78888: LD_INT 12
78890: PUSH
78891: LD_INT 30
78893: PUSH
78894: LD_EXP 45
78898: PUSH
78899: LD_INT 11
78901: PUSH
78902: LD_INT 53
78904: PUSH
78905: LD_INT 14
78907: PUSH
78908: LD_EXP 49
78912: PUSH
78913: LD_INT 29
78915: PUSH
78916: LD_EXP 47
78920: PUSH
78921: LD_INT 13
78923: PUSH
78924: LD_INT 52
78926: PUSH
78927: LD_INT 48
78929: PUSH
78930: LD_INT 8
78932: PUSH
78933: EMPTY
78934: LIST
78935: LIST
78936: LIST
78937: LIST
78938: LIST
78939: LIST
78940: LIST
78941: LIST
78942: LIST
78943: LIST
78944: LIST
78945: LIST
78946: LIST
78947: LIST
78948: LIST
78949: LIST
78950: LIST
78951: IN
78952: NOT
78953: AND
78954: IFFALSE 79002
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
78956: LD_ADDR_EXP 74
78960: PUSH
78961: LD_EXP 74
78965: PPUSH
78966: LD_VAR 0 4
78970: PUSH
78971: LD_EXP 74
78975: PUSH
78976: LD_VAR 0 4
78980: ARRAY
78981: PUSH
78982: LD_INT 1
78984: PLUS
78985: PUSH
78986: EMPTY
78987: LIST
78988: LIST
78989: PPUSH
78990: LD_VAR 0 1
78994: PPUSH
78995: CALL 17428 0 3
78999: ST_TO_ADDR
79000: GO 79046
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
79002: LD_ADDR_EXP 71
79006: PUSH
79007: LD_EXP 71
79011: PPUSH
79012: LD_VAR 0 4
79016: PUSH
79017: LD_EXP 71
79021: PUSH
79022: LD_VAR 0 4
79026: ARRAY
79027: PUSH
79028: LD_INT 1
79030: PLUS
79031: PUSH
79032: EMPTY
79033: LIST
79034: LIST
79035: PPUSH
79036: LD_VAR 0 1
79040: PPUSH
79041: CALL 17428 0 3
79045: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
79046: LD_VAR 0 1
79050: PPUSH
79051: CALL_OW 263
79055: PUSH
79056: LD_INT 2
79058: EQUAL
79059: IFFALSE 79079
// begin repeat wait ( 0 0$1 ) ;
79061: LD_INT 35
79063: PPUSH
79064: CALL_OW 67
// until IsControledBy ( vehicle ) ;
79068: LD_VAR 0 1
79072: PPUSH
79073: CALL_OW 312
79077: IFFALSE 79061
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
79079: LD_VAR 0 1
79083: PPUSH
79084: LD_EXP 76
79088: PUSH
79089: LD_VAR 0 4
79093: ARRAY
79094: PPUSH
79095: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
79099: LD_VAR 0 1
79103: PPUSH
79104: CALL_OW 263
79108: PUSH
79109: LD_INT 1
79111: NONEQUAL
79112: IFFALSE 79116
// break ;
79114: GO 79165
// repeat wait ( 0 0$1 ) ;
79116: LD_INT 35
79118: PPUSH
79119: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
79123: LD_VAR 0 1
79127: PPUSH
79128: LD_EXP 76
79132: PUSH
79133: LD_VAR 0 4
79137: ARRAY
79138: PPUSH
79139: CALL_OW 308
79143: IFFALSE 79116
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
79145: LD_VAR 0 1
79149: PPUSH
79150: CALL_OW 311
79154: PPUSH
79155: CALL_OW 121
// exit ;
79159: POP
79160: POP
79161: GO 79167
// end ; end ;
79163: GO 78820
79165: POP
79166: POP
// end ;
79167: LD_VAR 0 3
79171: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
79172: LD_INT 0
79174: PPUSH
79175: PPUSH
79176: PPUSH
79177: PPUSH
// if not mc_bases or not skirmish then
79178: LD_EXP 52
79182: NOT
79183: PUSH
79184: LD_EXP 50
79188: NOT
79189: OR
79190: IFFALSE 79194
// exit ;
79192: GO 79547
// repeat wait ( 0 0$1 ) ;
79194: LD_INT 35
79196: PPUSH
79197: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
79201: LD_VAR 0 2
79205: PPUSH
79206: LD_VAR 0 3
79210: PPUSH
79211: CALL_OW 284
79215: IFFALSE 79194
// if GetResourceTypeXY ( x , y ) = mat_artefact then
79217: LD_VAR 0 2
79221: PPUSH
79222: LD_VAR 0 3
79226: PPUSH
79227: CALL_OW 283
79231: PUSH
79232: LD_INT 4
79234: EQUAL
79235: IFFALSE 79239
// exit ;
79237: GO 79547
// for i = 1 to mc_bases do
79239: LD_ADDR_VAR 0 7
79243: PUSH
79244: DOUBLE
79245: LD_INT 1
79247: DEC
79248: ST_TO_ADDR
79249: LD_EXP 52
79253: PUSH
79254: FOR_TO
79255: IFFALSE 79545
// begin if mc_crates_area [ i ] then
79257: LD_EXP 70
79261: PUSH
79262: LD_VAR 0 7
79266: ARRAY
79267: IFFALSE 79378
// for j in mc_crates_area [ i ] do
79269: LD_ADDR_VAR 0 8
79273: PUSH
79274: LD_EXP 70
79278: PUSH
79279: LD_VAR 0 7
79283: ARRAY
79284: PUSH
79285: FOR_IN
79286: IFFALSE 79376
// if InArea ( x , y , j ) then
79288: LD_VAR 0 2
79292: PPUSH
79293: LD_VAR 0 3
79297: PPUSH
79298: LD_VAR 0 8
79302: PPUSH
79303: CALL_OW 309
79307: IFFALSE 79374
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
79309: LD_ADDR_EXP 68
79313: PUSH
79314: LD_EXP 68
79318: PPUSH
79319: LD_VAR 0 7
79323: PUSH
79324: LD_EXP 68
79328: PUSH
79329: LD_VAR 0 7
79333: ARRAY
79334: PUSH
79335: LD_INT 1
79337: PLUS
79338: PUSH
79339: EMPTY
79340: LIST
79341: LIST
79342: PPUSH
79343: LD_VAR 0 4
79347: PUSH
79348: LD_VAR 0 2
79352: PUSH
79353: LD_VAR 0 3
79357: PUSH
79358: EMPTY
79359: LIST
79360: LIST
79361: LIST
79362: PPUSH
79363: CALL 17428 0 3
79367: ST_TO_ADDR
// exit ;
79368: POP
79369: POP
79370: POP
79371: POP
79372: GO 79547
// end ;
79374: GO 79285
79376: POP
79377: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
79378: LD_ADDR_VAR 0 9
79382: PUSH
79383: LD_EXP 52
79387: PUSH
79388: LD_VAR 0 7
79392: ARRAY
79393: PPUSH
79394: LD_INT 2
79396: PUSH
79397: LD_INT 30
79399: PUSH
79400: LD_INT 0
79402: PUSH
79403: EMPTY
79404: LIST
79405: LIST
79406: PUSH
79407: LD_INT 30
79409: PUSH
79410: LD_INT 1
79412: PUSH
79413: EMPTY
79414: LIST
79415: LIST
79416: PUSH
79417: EMPTY
79418: LIST
79419: LIST
79420: LIST
79421: PPUSH
79422: CALL_OW 72
79426: ST_TO_ADDR
// if not depot then
79427: LD_VAR 0 9
79431: NOT
79432: IFFALSE 79436
// continue ;
79434: GO 79254
// for j in depot do
79436: LD_ADDR_VAR 0 8
79440: PUSH
79441: LD_VAR 0 9
79445: PUSH
79446: FOR_IN
79447: IFFALSE 79541
// if GetDistUnitXY ( j , x , y ) < 30 then
79449: LD_VAR 0 8
79453: PPUSH
79454: LD_VAR 0 2
79458: PPUSH
79459: LD_VAR 0 3
79463: PPUSH
79464: CALL_OW 297
79468: PUSH
79469: LD_INT 30
79471: LESS
79472: IFFALSE 79539
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
79474: LD_ADDR_EXP 68
79478: PUSH
79479: LD_EXP 68
79483: PPUSH
79484: LD_VAR 0 7
79488: PUSH
79489: LD_EXP 68
79493: PUSH
79494: LD_VAR 0 7
79498: ARRAY
79499: PUSH
79500: LD_INT 1
79502: PLUS
79503: PUSH
79504: EMPTY
79505: LIST
79506: LIST
79507: PPUSH
79508: LD_VAR 0 4
79512: PUSH
79513: LD_VAR 0 2
79517: PUSH
79518: LD_VAR 0 3
79522: PUSH
79523: EMPTY
79524: LIST
79525: LIST
79526: LIST
79527: PPUSH
79528: CALL 17428 0 3
79532: ST_TO_ADDR
// exit ;
79533: POP
79534: POP
79535: POP
79536: POP
79537: GO 79547
// end ;
79539: GO 79446
79541: POP
79542: POP
// end ;
79543: GO 79254
79545: POP
79546: POP
// end ;
79547: LD_VAR 0 6
79551: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
79552: LD_INT 0
79554: PPUSH
79555: PPUSH
79556: PPUSH
79557: PPUSH
// if not mc_bases or not skirmish then
79558: LD_EXP 52
79562: NOT
79563: PUSH
79564: LD_EXP 50
79568: NOT
79569: OR
79570: IFFALSE 79574
// exit ;
79572: GO 79851
// side := GetSide ( lab ) ;
79574: LD_ADDR_VAR 0 4
79578: PUSH
79579: LD_VAR 0 2
79583: PPUSH
79584: CALL_OW 255
79588: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
79589: LD_VAR 0 4
79593: PUSH
79594: LD_EXP 78
79598: IN
79599: NOT
79600: PUSH
79601: LD_EXP 79
79605: NOT
79606: OR
79607: PUSH
79608: LD_EXP 52
79612: NOT
79613: OR
79614: IFFALSE 79618
// exit ;
79616: GO 79851
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
79618: LD_ADDR_EXP 79
79622: PUSH
79623: LD_EXP 79
79627: PPUSH
79628: LD_VAR 0 4
79632: PPUSH
79633: LD_EXP 79
79637: PUSH
79638: LD_VAR 0 4
79642: ARRAY
79643: PUSH
79644: LD_VAR 0 1
79648: DIFF
79649: PPUSH
79650: CALL_OW 1
79654: ST_TO_ADDR
// for i = 1 to mc_bases do
79655: LD_ADDR_VAR 0 5
79659: PUSH
79660: DOUBLE
79661: LD_INT 1
79663: DEC
79664: ST_TO_ADDR
79665: LD_EXP 52
79669: PUSH
79670: FOR_TO
79671: IFFALSE 79849
// begin if lab in mc_bases [ i ] then
79673: LD_VAR 0 2
79677: PUSH
79678: LD_EXP 52
79682: PUSH
79683: LD_VAR 0 5
79687: ARRAY
79688: IN
79689: IFFALSE 79847
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
79691: LD_VAR 0 1
79695: PUSH
79696: LD_INT 11
79698: PUSH
79699: LD_INT 4
79701: PUSH
79702: LD_INT 3
79704: PUSH
79705: LD_INT 2
79707: PUSH
79708: EMPTY
79709: LIST
79710: LIST
79711: LIST
79712: LIST
79713: IN
79714: PUSH
79715: LD_EXP 82
79719: PUSH
79720: LD_VAR 0 5
79724: ARRAY
79725: AND
79726: IFFALSE 79847
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
79728: LD_ADDR_VAR 0 6
79732: PUSH
79733: LD_EXP 82
79737: PUSH
79738: LD_VAR 0 5
79742: ARRAY
79743: PUSH
79744: LD_INT 1
79746: ARRAY
79747: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
79748: LD_ADDR_EXP 82
79752: PUSH
79753: LD_EXP 82
79757: PPUSH
79758: LD_VAR 0 5
79762: PPUSH
79763: EMPTY
79764: PPUSH
79765: CALL_OW 1
79769: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
79770: LD_VAR 0 6
79774: PPUSH
79775: LD_INT 0
79777: PPUSH
79778: CALL_OW 109
// ComExitBuilding ( tmp ) ;
79782: LD_VAR 0 6
79786: PPUSH
79787: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
79791: LD_ADDR_EXP 81
79795: PUSH
79796: LD_EXP 81
79800: PPUSH
79801: LD_VAR 0 5
79805: PPUSH
79806: LD_EXP 81
79810: PUSH
79811: LD_VAR 0 5
79815: ARRAY
79816: PPUSH
79817: LD_INT 1
79819: PPUSH
79820: LD_VAR 0 6
79824: PPUSH
79825: CALL_OW 2
79829: PPUSH
79830: CALL_OW 1
79834: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
79835: LD_VAR 0 5
79839: PPUSH
79840: LD_INT 112
79842: PPUSH
79843: CALL 57384 0 2
// end ; end ; end ;
79847: GO 79670
79849: POP
79850: POP
// end ;
79851: LD_VAR 0 3
79855: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
79856: LD_INT 0
79858: PPUSH
79859: PPUSH
79860: PPUSH
79861: PPUSH
79862: PPUSH
79863: PPUSH
79864: PPUSH
79865: PPUSH
// if not mc_bases or not skirmish then
79866: LD_EXP 52
79870: NOT
79871: PUSH
79872: LD_EXP 50
79876: NOT
79877: OR
79878: IFFALSE 79882
// exit ;
79880: GO 80974
// for i = 1 to mc_bases do
79882: LD_ADDR_VAR 0 3
79886: PUSH
79887: DOUBLE
79888: LD_INT 1
79890: DEC
79891: ST_TO_ADDR
79892: LD_EXP 52
79896: PUSH
79897: FOR_TO
79898: IFFALSE 80972
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
79900: LD_VAR 0 1
79904: PUSH
79905: LD_EXP 52
79909: PUSH
79910: LD_VAR 0 3
79914: ARRAY
79915: IN
79916: PUSH
79917: LD_VAR 0 1
79921: PUSH
79922: LD_EXP 59
79926: PUSH
79927: LD_VAR 0 3
79931: ARRAY
79932: IN
79933: OR
79934: PUSH
79935: LD_VAR 0 1
79939: PUSH
79940: LD_EXP 74
79944: PUSH
79945: LD_VAR 0 3
79949: ARRAY
79950: IN
79951: OR
79952: PUSH
79953: LD_VAR 0 1
79957: PUSH
79958: LD_EXP 71
79962: PUSH
79963: LD_VAR 0 3
79967: ARRAY
79968: IN
79969: OR
79970: PUSH
79971: LD_VAR 0 1
79975: PUSH
79976: LD_EXP 81
79980: PUSH
79981: LD_VAR 0 3
79985: ARRAY
79986: IN
79987: OR
79988: PUSH
79989: LD_VAR 0 1
79993: PUSH
79994: LD_EXP 82
79998: PUSH
79999: LD_VAR 0 3
80003: ARRAY
80004: IN
80005: OR
80006: IFFALSE 80970
// begin if un in mc_ape [ i ] then
80008: LD_VAR 0 1
80012: PUSH
80013: LD_EXP 81
80017: PUSH
80018: LD_VAR 0 3
80022: ARRAY
80023: IN
80024: IFFALSE 80063
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
80026: LD_ADDR_EXP 81
80030: PUSH
80031: LD_EXP 81
80035: PPUSH
80036: LD_VAR 0 3
80040: PPUSH
80041: LD_EXP 81
80045: PUSH
80046: LD_VAR 0 3
80050: ARRAY
80051: PUSH
80052: LD_VAR 0 1
80056: DIFF
80057: PPUSH
80058: CALL_OW 1
80062: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
80063: LD_VAR 0 1
80067: PUSH
80068: LD_EXP 82
80072: PUSH
80073: LD_VAR 0 3
80077: ARRAY
80078: IN
80079: IFFALSE 80103
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
80081: LD_ADDR_EXP 82
80085: PUSH
80086: LD_EXP 82
80090: PPUSH
80091: LD_VAR 0 3
80095: PPUSH
80096: EMPTY
80097: PPUSH
80098: CALL_OW 1
80102: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] ) then
80103: LD_VAR 0 1
80107: PPUSH
80108: CALL_OW 247
80112: PUSH
80113: LD_INT 2
80115: EQUAL
80116: PUSH
80117: LD_VAR 0 1
80121: PPUSH
80122: CALL_OW 110
80126: PUSH
80127: LD_INT 20
80129: EQUAL
80130: PUSH
80131: LD_VAR 0 1
80135: PUSH
80136: LD_EXP 74
80140: PUSH
80141: LD_VAR 0 3
80145: ARRAY
80146: IN
80147: OR
80148: AND
80149: IFFALSE 80310
// begin if un in mc_defender [ i ] then
80151: LD_VAR 0 1
80155: PUSH
80156: LD_EXP 74
80160: PUSH
80161: LD_VAR 0 3
80165: ARRAY
80166: IN
80167: IFFALSE 80206
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
80169: LD_ADDR_EXP 74
80173: PUSH
80174: LD_EXP 74
80178: PPUSH
80179: LD_VAR 0 3
80183: PPUSH
80184: LD_EXP 74
80188: PUSH
80189: LD_VAR 0 3
80193: ARRAY
80194: PUSH
80195: LD_VAR 0 1
80199: DIFF
80200: PPUSH
80201: CALL_OW 1
80205: ST_TO_ADDR
// fac := MC_GetBuilding ( i , b_factory ) ;
80206: LD_ADDR_VAR 0 8
80210: PUSH
80211: LD_VAR 0 3
80215: PPUSH
80216: LD_INT 3
80218: PPUSH
80219: CALL 76899 0 2
80223: ST_TO_ADDR
// if fac then
80224: LD_VAR 0 8
80228: IFFALSE 80310
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
80230: LD_ADDR_VAR 0 9
80234: PUSH
80235: LD_VAR 0 8
80239: PPUSH
80240: LD_VAR 0 1
80244: PPUSH
80245: CALL_OW 265
80249: PPUSH
80250: LD_VAR 0 1
80254: PPUSH
80255: CALL_OW 262
80259: PPUSH
80260: LD_VAR 0 1
80264: PPUSH
80265: CALL_OW 263
80269: PPUSH
80270: LD_VAR 0 1
80274: PPUSH
80275: CALL_OW 264
80279: PPUSH
80280: CALL 15021 0 5
80284: ST_TO_ADDR
// if components then
80285: LD_VAR 0 9
80289: IFFALSE 80308
// MC_InsertProduceList ( i , [ components ] ) ;
80291: LD_VAR 0 3
80295: PPUSH
80296: LD_VAR 0 9
80300: PUSH
80301: EMPTY
80302: LIST
80303: PPUSH
80304: CALL 76527 0 2
// break ;
80308: GO 80972
// end ; end ; if GetType ( un ) = unit_building then
80310: LD_VAR 0 1
80314: PPUSH
80315: CALL_OW 247
80319: PUSH
80320: LD_INT 3
80322: EQUAL
80323: IFFALSE 80638
// begin btype := GetBType ( un ) ;
80325: LD_ADDR_VAR 0 5
80329: PUSH
80330: LD_VAR 0 1
80334: PPUSH
80335: CALL_OW 266
80339: ST_TO_ADDR
// if btype = b_warehouse then
80340: LD_VAR 0 5
80344: PUSH
80345: LD_INT 1
80347: EQUAL
80348: IFFALSE 80366
// begin btype := b_depot ;
80350: LD_ADDR_VAR 0 5
80354: PUSH
80355: LD_INT 0
80357: ST_TO_ADDR
// pos := 1 ;
80358: LD_ADDR_VAR 0 6
80362: PUSH
80363: LD_INT 1
80365: ST_TO_ADDR
// end ; if btype = b_factory then
80366: LD_VAR 0 5
80370: PUSH
80371: LD_INT 3
80373: EQUAL
80374: IFFALSE 80392
// begin btype := b_workshop ;
80376: LD_ADDR_VAR 0 5
80380: PUSH
80381: LD_INT 2
80383: ST_TO_ADDR
// pos := 1 ;
80384: LD_ADDR_VAR 0 6
80388: PUSH
80389: LD_INT 1
80391: ST_TO_ADDR
// end ; if btype = b_barracks then
80392: LD_VAR 0 5
80396: PUSH
80397: LD_INT 5
80399: EQUAL
80400: IFFALSE 80410
// btype := b_armoury ;
80402: LD_ADDR_VAR 0 5
80406: PUSH
80407: LD_INT 4
80409: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
80410: LD_VAR 0 5
80414: PUSH
80415: LD_INT 7
80417: PUSH
80418: LD_INT 8
80420: PUSH
80421: EMPTY
80422: LIST
80423: LIST
80424: IN
80425: IFFALSE 80435
// btype := b_lab ;
80427: LD_ADDR_VAR 0 5
80431: PUSH
80432: LD_INT 6
80434: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
80435: LD_ADDR_EXP 57
80439: PUSH
80440: LD_EXP 57
80444: PPUSH
80445: LD_VAR 0 3
80449: PUSH
80450: LD_EXP 57
80454: PUSH
80455: LD_VAR 0 3
80459: ARRAY
80460: PUSH
80461: LD_INT 1
80463: PLUS
80464: PUSH
80465: EMPTY
80466: LIST
80467: LIST
80468: PPUSH
80469: LD_VAR 0 5
80473: PUSH
80474: LD_VAR 0 1
80478: PPUSH
80479: CALL_OW 250
80483: PUSH
80484: LD_VAR 0 1
80488: PPUSH
80489: CALL_OW 251
80493: PUSH
80494: LD_VAR 0 1
80498: PPUSH
80499: CALL_OW 254
80503: PUSH
80504: EMPTY
80505: LIST
80506: LIST
80507: LIST
80508: LIST
80509: PPUSH
80510: CALL 17428 0 3
80514: ST_TO_ADDR
// if pos = 1 then
80515: LD_VAR 0 6
80519: PUSH
80520: LD_INT 1
80522: EQUAL
80523: IFFALSE 80638
// begin tmp := mc_build_list [ i ] ;
80525: LD_ADDR_VAR 0 7
80529: PUSH
80530: LD_EXP 57
80534: PUSH
80535: LD_VAR 0 3
80539: ARRAY
80540: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
80541: LD_VAR 0 7
80545: PPUSH
80546: LD_INT 2
80548: PUSH
80549: LD_INT 30
80551: PUSH
80552: LD_INT 0
80554: PUSH
80555: EMPTY
80556: LIST
80557: LIST
80558: PUSH
80559: LD_INT 30
80561: PUSH
80562: LD_INT 1
80564: PUSH
80565: EMPTY
80566: LIST
80567: LIST
80568: PUSH
80569: EMPTY
80570: LIST
80571: LIST
80572: LIST
80573: PPUSH
80574: CALL_OW 72
80578: IFFALSE 80588
// pos := 2 ;
80580: LD_ADDR_VAR 0 6
80584: PUSH
80585: LD_INT 2
80587: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
80588: LD_ADDR_VAR 0 7
80592: PUSH
80593: LD_VAR 0 7
80597: PPUSH
80598: LD_VAR 0 6
80602: PPUSH
80603: LD_VAR 0 7
80607: PPUSH
80608: CALL 17754 0 3
80612: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
80613: LD_ADDR_EXP 57
80617: PUSH
80618: LD_EXP 57
80622: PPUSH
80623: LD_VAR 0 3
80627: PPUSH
80628: LD_VAR 0 7
80632: PPUSH
80633: CALL_OW 1
80637: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
80638: LD_VAR 0 1
80642: PUSH
80643: LD_EXP 52
80647: PUSH
80648: LD_VAR 0 3
80652: ARRAY
80653: IN
80654: IFFALSE 80693
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
80656: LD_ADDR_EXP 52
80660: PUSH
80661: LD_EXP 52
80665: PPUSH
80666: LD_VAR 0 3
80670: PPUSH
80671: LD_EXP 52
80675: PUSH
80676: LD_VAR 0 3
80680: ARRAY
80681: PUSH
80682: LD_VAR 0 1
80686: DIFF
80687: PPUSH
80688: CALL_OW 1
80692: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
80693: LD_VAR 0 1
80697: PUSH
80698: LD_EXP 59
80702: PUSH
80703: LD_VAR 0 3
80707: ARRAY
80708: IN
80709: IFFALSE 80748
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
80711: LD_ADDR_EXP 59
80715: PUSH
80716: LD_EXP 59
80720: PPUSH
80721: LD_VAR 0 3
80725: PPUSH
80726: LD_EXP 59
80730: PUSH
80731: LD_VAR 0 3
80735: ARRAY
80736: PUSH
80737: LD_VAR 0 1
80741: DIFF
80742: PPUSH
80743: CALL_OW 1
80747: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
80748: LD_VAR 0 1
80752: PUSH
80753: LD_EXP 71
80757: PUSH
80758: LD_VAR 0 3
80762: ARRAY
80763: IN
80764: IFFALSE 80803
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
80766: LD_ADDR_EXP 71
80770: PUSH
80771: LD_EXP 71
80775: PPUSH
80776: LD_VAR 0 3
80780: PPUSH
80781: LD_EXP 71
80785: PUSH
80786: LD_VAR 0 3
80790: ARRAY
80791: PUSH
80792: LD_VAR 0 1
80796: DIFF
80797: PPUSH
80798: CALL_OW 1
80802: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
80803: LD_VAR 0 1
80807: PUSH
80808: LD_EXP 74
80812: PUSH
80813: LD_VAR 0 3
80817: ARRAY
80818: IN
80819: IFFALSE 80858
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
80821: LD_ADDR_EXP 74
80825: PUSH
80826: LD_EXP 74
80830: PPUSH
80831: LD_VAR 0 3
80835: PPUSH
80836: LD_EXP 74
80840: PUSH
80841: LD_VAR 0 3
80845: ARRAY
80846: PUSH
80847: LD_VAR 0 1
80851: DIFF
80852: PPUSH
80853: CALL_OW 1
80857: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
80858: LD_VAR 0 1
80862: PUSH
80863: LD_EXP 61
80867: PUSH
80868: LD_VAR 0 3
80872: ARRAY
80873: IN
80874: IFFALSE 80913
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
80876: LD_ADDR_EXP 61
80880: PUSH
80881: LD_EXP 61
80885: PPUSH
80886: LD_VAR 0 3
80890: PPUSH
80891: LD_EXP 61
80895: PUSH
80896: LD_VAR 0 3
80900: ARRAY
80901: PUSH
80902: LD_VAR 0 1
80906: DIFF
80907: PPUSH
80908: CALL_OW 1
80912: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
80913: LD_VAR 0 1
80917: PUSH
80918: LD_EXP 60
80922: PUSH
80923: LD_VAR 0 3
80927: ARRAY
80928: IN
80929: IFFALSE 80968
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
80931: LD_ADDR_EXP 60
80935: PUSH
80936: LD_EXP 60
80940: PPUSH
80941: LD_VAR 0 3
80945: PPUSH
80946: LD_EXP 60
80950: PUSH
80951: LD_VAR 0 3
80955: ARRAY
80956: PUSH
80957: LD_VAR 0 1
80961: DIFF
80962: PPUSH
80963: CALL_OW 1
80967: ST_TO_ADDR
// end ; break ;
80968: GO 80972
// end ;
80970: GO 79897
80972: POP
80973: POP
// end ;
80974: LD_VAR 0 2
80978: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
80979: LD_INT 0
80981: PPUSH
80982: PPUSH
80983: PPUSH
// if not mc_bases or not skirmish then
80984: LD_EXP 52
80988: NOT
80989: PUSH
80990: LD_EXP 50
80994: NOT
80995: OR
80996: IFFALSE 81000
// exit ;
80998: GO 81215
// for i = 1 to mc_bases do
81000: LD_ADDR_VAR 0 3
81004: PUSH
81005: DOUBLE
81006: LD_INT 1
81008: DEC
81009: ST_TO_ADDR
81010: LD_EXP 52
81014: PUSH
81015: FOR_TO
81016: IFFALSE 81213
// begin if building in mc_construct_list [ i ] then
81018: LD_VAR 0 1
81022: PUSH
81023: LD_EXP 59
81027: PUSH
81028: LD_VAR 0 3
81032: ARRAY
81033: IN
81034: IFFALSE 81211
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
81036: LD_ADDR_EXP 59
81040: PUSH
81041: LD_EXP 59
81045: PPUSH
81046: LD_VAR 0 3
81050: PPUSH
81051: LD_EXP 59
81055: PUSH
81056: LD_VAR 0 3
81060: ARRAY
81061: PUSH
81062: LD_VAR 0 1
81066: DIFF
81067: PPUSH
81068: CALL_OW 1
81072: ST_TO_ADDR
// if building in mc_lab [ i ] then
81073: LD_VAR 0 1
81077: PUSH
81078: LD_EXP 85
81082: PUSH
81083: LD_VAR 0 3
81087: ARRAY
81088: IN
81089: IFFALSE 81144
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
81091: LD_ADDR_EXP 86
81095: PUSH
81096: LD_EXP 86
81100: PPUSH
81101: LD_VAR 0 3
81105: PPUSH
81106: LD_EXP 86
81110: PUSH
81111: LD_VAR 0 3
81115: ARRAY
81116: PPUSH
81117: LD_INT 1
81119: PPUSH
81120: LD_EXP 86
81124: PUSH
81125: LD_VAR 0 3
81129: ARRAY
81130: PPUSH
81131: LD_INT 0
81133: PPUSH
81134: CALL 16846 0 4
81138: PPUSH
81139: CALL_OW 1
81143: ST_TO_ADDR
// if not building in mc_bases [ i ] then
81144: LD_VAR 0 1
81148: PUSH
81149: LD_EXP 52
81153: PUSH
81154: LD_VAR 0 3
81158: ARRAY
81159: IN
81160: NOT
81161: IFFALSE 81207
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
81163: LD_ADDR_EXP 52
81167: PUSH
81168: LD_EXP 52
81172: PPUSH
81173: LD_VAR 0 3
81177: PUSH
81178: LD_EXP 52
81182: PUSH
81183: LD_VAR 0 3
81187: ARRAY
81188: PUSH
81189: LD_INT 1
81191: PLUS
81192: PUSH
81193: EMPTY
81194: LIST
81195: LIST
81196: PPUSH
81197: LD_VAR 0 1
81201: PPUSH
81202: CALL 17428 0 3
81206: ST_TO_ADDR
// exit ;
81207: POP
81208: POP
81209: GO 81215
// end ; end ;
81211: GO 81015
81213: POP
81214: POP
// end ;
81215: LD_VAR 0 2
81219: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
81220: LD_INT 0
81222: PPUSH
81223: PPUSH
81224: PPUSH
81225: PPUSH
81226: PPUSH
81227: PPUSH
81228: PPUSH
// if not mc_bases or not skirmish then
81229: LD_EXP 52
81233: NOT
81234: PUSH
81235: LD_EXP 50
81239: NOT
81240: OR
81241: IFFALSE 81245
// exit ;
81243: GO 81906
// for i = 1 to mc_bases do
81245: LD_ADDR_VAR 0 3
81249: PUSH
81250: DOUBLE
81251: LD_INT 1
81253: DEC
81254: ST_TO_ADDR
81255: LD_EXP 52
81259: PUSH
81260: FOR_TO
81261: IFFALSE 81904
// begin if building in mc_construct_list [ i ] then
81263: LD_VAR 0 1
81267: PUSH
81268: LD_EXP 59
81272: PUSH
81273: LD_VAR 0 3
81277: ARRAY
81278: IN
81279: IFFALSE 81902
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
81281: LD_ADDR_EXP 59
81285: PUSH
81286: LD_EXP 59
81290: PPUSH
81291: LD_VAR 0 3
81295: PPUSH
81296: LD_EXP 59
81300: PUSH
81301: LD_VAR 0 3
81305: ARRAY
81306: PUSH
81307: LD_VAR 0 1
81311: DIFF
81312: PPUSH
81313: CALL_OW 1
81317: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
81318: LD_ADDR_EXP 52
81322: PUSH
81323: LD_EXP 52
81327: PPUSH
81328: LD_VAR 0 3
81332: PUSH
81333: LD_EXP 52
81337: PUSH
81338: LD_VAR 0 3
81342: ARRAY
81343: PUSH
81344: LD_INT 1
81346: PLUS
81347: PUSH
81348: EMPTY
81349: LIST
81350: LIST
81351: PPUSH
81352: LD_VAR 0 1
81356: PPUSH
81357: CALL 17428 0 3
81361: ST_TO_ADDR
// btype := GetBType ( building ) ;
81362: LD_ADDR_VAR 0 5
81366: PUSH
81367: LD_VAR 0 1
81371: PPUSH
81372: CALL_OW 266
81376: ST_TO_ADDR
// side := GetSide ( building ) ;
81377: LD_ADDR_VAR 0 8
81381: PUSH
81382: LD_VAR 0 1
81386: PPUSH
81387: CALL_OW 255
81391: ST_TO_ADDR
// if btype = b_lab then
81392: LD_VAR 0 5
81396: PUSH
81397: LD_INT 6
81399: EQUAL
81400: IFFALSE 81450
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
81402: LD_ADDR_EXP 85
81406: PUSH
81407: LD_EXP 85
81411: PPUSH
81412: LD_VAR 0 3
81416: PUSH
81417: LD_EXP 85
81421: PUSH
81422: LD_VAR 0 3
81426: ARRAY
81427: PUSH
81428: LD_INT 1
81430: PLUS
81431: PUSH
81432: EMPTY
81433: LIST
81434: LIST
81435: PPUSH
81436: LD_VAR 0 1
81440: PPUSH
81441: CALL 17428 0 3
81445: ST_TO_ADDR
// exit ;
81446: POP
81447: POP
81448: GO 81906
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
81450: LD_VAR 0 5
81454: PUSH
81455: LD_INT 0
81457: PUSH
81458: LD_INT 2
81460: PUSH
81461: LD_INT 4
81463: PUSH
81464: EMPTY
81465: LIST
81466: LIST
81467: LIST
81468: IN
81469: IFFALSE 81593
// begin if btype = b_armoury then
81471: LD_VAR 0 5
81475: PUSH
81476: LD_INT 4
81478: EQUAL
81479: IFFALSE 81489
// btype := b_barracks ;
81481: LD_ADDR_VAR 0 5
81485: PUSH
81486: LD_INT 5
81488: ST_TO_ADDR
// if btype = b_depot then
81489: LD_VAR 0 5
81493: PUSH
81494: LD_INT 0
81496: EQUAL
81497: IFFALSE 81507
// btype := b_warehouse ;
81499: LD_ADDR_VAR 0 5
81503: PUSH
81504: LD_INT 1
81506: ST_TO_ADDR
// if btype = b_workshop then
81507: LD_VAR 0 5
81511: PUSH
81512: LD_INT 2
81514: EQUAL
81515: IFFALSE 81525
// btype := b_factory ;
81517: LD_ADDR_VAR 0 5
81521: PUSH
81522: LD_INT 3
81524: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
81525: LD_VAR 0 5
81529: PPUSH
81530: LD_VAR 0 8
81534: PPUSH
81535: CALL_OW 323
81539: PUSH
81540: LD_INT 1
81542: EQUAL
81543: IFFALSE 81589
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
81545: LD_ADDR_EXP 84
81549: PUSH
81550: LD_EXP 84
81554: PPUSH
81555: LD_VAR 0 3
81559: PUSH
81560: LD_EXP 84
81564: PUSH
81565: LD_VAR 0 3
81569: ARRAY
81570: PUSH
81571: LD_INT 1
81573: PLUS
81574: PUSH
81575: EMPTY
81576: LIST
81577: LIST
81578: PPUSH
81579: LD_VAR 0 1
81583: PPUSH
81584: CALL 17428 0 3
81588: ST_TO_ADDR
// exit ;
81589: POP
81590: POP
81591: GO 81906
// end ; if btype in [ b_bunker , b_turret ] then
81593: LD_VAR 0 5
81597: PUSH
81598: LD_INT 32
81600: PUSH
81601: LD_INT 33
81603: PUSH
81604: EMPTY
81605: LIST
81606: LIST
81607: IN
81608: IFFALSE 81898
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
81610: LD_ADDR_EXP 60
81614: PUSH
81615: LD_EXP 60
81619: PPUSH
81620: LD_VAR 0 3
81624: PUSH
81625: LD_EXP 60
81629: PUSH
81630: LD_VAR 0 3
81634: ARRAY
81635: PUSH
81636: LD_INT 1
81638: PLUS
81639: PUSH
81640: EMPTY
81641: LIST
81642: LIST
81643: PPUSH
81644: LD_VAR 0 1
81648: PPUSH
81649: CALL 17428 0 3
81653: ST_TO_ADDR
// if btype = b_bunker then
81654: LD_VAR 0 5
81658: PUSH
81659: LD_INT 32
81661: EQUAL
81662: IFFALSE 81898
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
81664: LD_ADDR_EXP 61
81668: PUSH
81669: LD_EXP 61
81673: PPUSH
81674: LD_VAR 0 3
81678: PUSH
81679: LD_EXP 61
81683: PUSH
81684: LD_VAR 0 3
81688: ARRAY
81689: PUSH
81690: LD_INT 1
81692: PLUS
81693: PUSH
81694: EMPTY
81695: LIST
81696: LIST
81697: PPUSH
81698: LD_VAR 0 1
81702: PPUSH
81703: CALL 17428 0 3
81707: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
81708: LD_ADDR_VAR 0 6
81712: PUSH
81713: LD_EXP 52
81717: PUSH
81718: LD_VAR 0 3
81722: ARRAY
81723: PPUSH
81724: LD_INT 25
81726: PUSH
81727: LD_INT 1
81729: PUSH
81730: EMPTY
81731: LIST
81732: LIST
81733: PUSH
81734: LD_INT 3
81736: PUSH
81737: LD_INT 54
81739: PUSH
81740: EMPTY
81741: LIST
81742: PUSH
81743: EMPTY
81744: LIST
81745: LIST
81746: PUSH
81747: EMPTY
81748: LIST
81749: LIST
81750: PPUSH
81751: CALL_OW 72
81755: ST_TO_ADDR
// if tmp then
81756: LD_VAR 0 6
81760: IFFALSE 81766
// exit ;
81762: POP
81763: POP
81764: GO 81906
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
81766: LD_ADDR_VAR 0 6
81770: PUSH
81771: LD_EXP 52
81775: PUSH
81776: LD_VAR 0 3
81780: ARRAY
81781: PPUSH
81782: LD_INT 2
81784: PUSH
81785: LD_INT 30
81787: PUSH
81788: LD_INT 4
81790: PUSH
81791: EMPTY
81792: LIST
81793: LIST
81794: PUSH
81795: LD_INT 30
81797: PUSH
81798: LD_INT 5
81800: PUSH
81801: EMPTY
81802: LIST
81803: LIST
81804: PUSH
81805: EMPTY
81806: LIST
81807: LIST
81808: LIST
81809: PPUSH
81810: CALL_OW 72
81814: ST_TO_ADDR
// if not tmp then
81815: LD_VAR 0 6
81819: NOT
81820: IFFALSE 81826
// exit ;
81822: POP
81823: POP
81824: GO 81906
// for j in tmp do
81826: LD_ADDR_VAR 0 4
81830: PUSH
81831: LD_VAR 0 6
81835: PUSH
81836: FOR_IN
81837: IFFALSE 81896
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
81839: LD_ADDR_VAR 0 7
81843: PUSH
81844: LD_VAR 0 4
81848: PPUSH
81849: CALL_OW 313
81853: PPUSH
81854: LD_INT 25
81856: PUSH
81857: LD_INT 1
81859: PUSH
81860: EMPTY
81861: LIST
81862: LIST
81863: PPUSH
81864: CALL_OW 72
81868: ST_TO_ADDR
// if units then
81869: LD_VAR 0 7
81873: IFFALSE 81894
// begin ComExitBuilding ( units [ 1 ] ) ;
81875: LD_VAR 0 7
81879: PUSH
81880: LD_INT 1
81882: ARRAY
81883: PPUSH
81884: CALL_OW 122
// exit ;
81888: POP
81889: POP
81890: POP
81891: POP
81892: GO 81906
// end ; end ;
81894: GO 81836
81896: POP
81897: POP
// end ; end ; exit ;
81898: POP
81899: POP
81900: GO 81906
// end ; end ;
81902: GO 81260
81904: POP
81905: POP
// end ;
81906: LD_VAR 0 2
81910: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
81911: LD_INT 0
81913: PPUSH
81914: PPUSH
81915: PPUSH
81916: PPUSH
81917: PPUSH
81918: PPUSH
81919: PPUSH
// if not mc_bases or not skirmish then
81920: LD_EXP 52
81924: NOT
81925: PUSH
81926: LD_EXP 50
81930: NOT
81931: OR
81932: IFFALSE 81936
// exit ;
81934: GO 82167
// btype := GetBType ( building ) ;
81936: LD_ADDR_VAR 0 6
81940: PUSH
81941: LD_VAR 0 1
81945: PPUSH
81946: CALL_OW 266
81950: ST_TO_ADDR
// x := GetX ( building ) ;
81951: LD_ADDR_VAR 0 7
81955: PUSH
81956: LD_VAR 0 1
81960: PPUSH
81961: CALL_OW 250
81965: ST_TO_ADDR
// y := GetY ( building ) ;
81966: LD_ADDR_VAR 0 8
81970: PUSH
81971: LD_VAR 0 1
81975: PPUSH
81976: CALL_OW 251
81980: ST_TO_ADDR
// d := GetDir ( building ) ;
81981: LD_ADDR_VAR 0 9
81985: PUSH
81986: LD_VAR 0 1
81990: PPUSH
81991: CALL_OW 254
81995: ST_TO_ADDR
// for i = 1 to mc_bases do
81996: LD_ADDR_VAR 0 4
82000: PUSH
82001: DOUBLE
82002: LD_INT 1
82004: DEC
82005: ST_TO_ADDR
82006: LD_EXP 52
82010: PUSH
82011: FOR_TO
82012: IFFALSE 82165
// begin if not mc_build_list [ i ] then
82014: LD_EXP 57
82018: PUSH
82019: LD_VAR 0 4
82023: ARRAY
82024: NOT
82025: IFFALSE 82029
// continue ;
82027: GO 82011
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
82029: LD_VAR 0 6
82033: PUSH
82034: LD_VAR 0 7
82038: PUSH
82039: LD_VAR 0 8
82043: PUSH
82044: LD_VAR 0 9
82048: PUSH
82049: EMPTY
82050: LIST
82051: LIST
82052: LIST
82053: LIST
82054: PPUSH
82055: LD_EXP 57
82059: PUSH
82060: LD_VAR 0 4
82064: ARRAY
82065: PUSH
82066: LD_INT 1
82068: ARRAY
82069: PPUSH
82070: CALL 23597 0 2
82074: IFFALSE 82163
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
82076: LD_ADDR_EXP 57
82080: PUSH
82081: LD_EXP 57
82085: PPUSH
82086: LD_VAR 0 4
82090: PPUSH
82091: LD_EXP 57
82095: PUSH
82096: LD_VAR 0 4
82100: ARRAY
82101: PPUSH
82102: LD_INT 1
82104: PPUSH
82105: CALL_OW 3
82109: PPUSH
82110: CALL_OW 1
82114: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
82115: LD_ADDR_EXP 59
82119: PUSH
82120: LD_EXP 59
82124: PPUSH
82125: LD_VAR 0 4
82129: PUSH
82130: LD_EXP 59
82134: PUSH
82135: LD_VAR 0 4
82139: ARRAY
82140: PUSH
82141: LD_INT 1
82143: PLUS
82144: PUSH
82145: EMPTY
82146: LIST
82147: LIST
82148: PPUSH
82149: LD_VAR 0 1
82153: PPUSH
82154: CALL 17428 0 3
82158: ST_TO_ADDR
// exit ;
82159: POP
82160: POP
82161: GO 82167
// end ; end ;
82163: GO 82011
82165: POP
82166: POP
// end ;
82167: LD_VAR 0 3
82171: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
82172: LD_INT 0
82174: PPUSH
82175: PPUSH
82176: PPUSH
// if not mc_bases or not skirmish then
82177: LD_EXP 52
82181: NOT
82182: PUSH
82183: LD_EXP 50
82187: NOT
82188: OR
82189: IFFALSE 82193
// exit ;
82191: GO 82383
// for i = 1 to mc_bases do
82193: LD_ADDR_VAR 0 4
82197: PUSH
82198: DOUBLE
82199: LD_INT 1
82201: DEC
82202: ST_TO_ADDR
82203: LD_EXP 52
82207: PUSH
82208: FOR_TO
82209: IFFALSE 82296
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
82211: LD_VAR 0 1
82215: PUSH
82216: LD_EXP 60
82220: PUSH
82221: LD_VAR 0 4
82225: ARRAY
82226: IN
82227: PUSH
82228: LD_VAR 0 1
82232: PUSH
82233: LD_EXP 61
82237: PUSH
82238: LD_VAR 0 4
82242: ARRAY
82243: IN
82244: NOT
82245: AND
82246: IFFALSE 82294
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
82248: LD_ADDR_EXP 61
82252: PUSH
82253: LD_EXP 61
82257: PPUSH
82258: LD_VAR 0 4
82262: PUSH
82263: LD_EXP 61
82267: PUSH
82268: LD_VAR 0 4
82272: ARRAY
82273: PUSH
82274: LD_INT 1
82276: PLUS
82277: PUSH
82278: EMPTY
82279: LIST
82280: LIST
82281: PPUSH
82282: LD_VAR 0 1
82286: PPUSH
82287: CALL 17428 0 3
82291: ST_TO_ADDR
// break ;
82292: GO 82296
// end ; end ;
82294: GO 82208
82296: POP
82297: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
82298: LD_VAR 0 1
82302: PPUSH
82303: CALL_OW 257
82307: PUSH
82308: LD_EXP 78
82312: IN
82313: PUSH
82314: LD_VAR 0 1
82318: PPUSH
82319: CALL_OW 266
82323: PUSH
82324: LD_INT 5
82326: EQUAL
82327: AND
82328: PUSH
82329: LD_VAR 0 2
82333: PPUSH
82334: CALL_OW 110
82338: PUSH
82339: LD_INT 18
82341: NONEQUAL
82342: AND
82343: IFFALSE 82383
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
82345: LD_VAR 0 2
82349: PPUSH
82350: CALL_OW 257
82354: PUSH
82355: LD_INT 5
82357: PUSH
82358: LD_INT 8
82360: PUSH
82361: LD_INT 9
82363: PUSH
82364: EMPTY
82365: LIST
82366: LIST
82367: LIST
82368: IN
82369: IFFALSE 82383
// SetClass ( unit , 1 ) ;
82371: LD_VAR 0 2
82375: PPUSH
82376: LD_INT 1
82378: PPUSH
82379: CALL_OW 336
// end ;
82383: LD_VAR 0 3
82387: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
82388: LD_INT 0
82390: PPUSH
82391: PPUSH
// if not mc_bases or not skirmish then
82392: LD_EXP 52
82396: NOT
82397: PUSH
82398: LD_EXP 50
82402: NOT
82403: OR
82404: IFFALSE 82408
// exit ;
82406: GO 82524
// if GetLives ( abandoned_vehicle ) > 250 then
82408: LD_VAR 0 2
82412: PPUSH
82413: CALL_OW 256
82417: PUSH
82418: LD_INT 250
82420: GREATER
82421: IFFALSE 82425
// exit ;
82423: GO 82524
// for i = 1 to mc_bases do
82425: LD_ADDR_VAR 0 6
82429: PUSH
82430: DOUBLE
82431: LD_INT 1
82433: DEC
82434: ST_TO_ADDR
82435: LD_EXP 52
82439: PUSH
82440: FOR_TO
82441: IFFALSE 82522
// begin if driver in mc_bases [ i ] then
82443: LD_VAR 0 1
82447: PUSH
82448: LD_EXP 52
82452: PUSH
82453: LD_VAR 0 6
82457: ARRAY
82458: IN
82459: IFFALSE 82520
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
82461: LD_VAR 0 1
82465: PPUSH
82466: LD_EXP 52
82470: PUSH
82471: LD_VAR 0 6
82475: ARRAY
82476: PPUSH
82477: LD_INT 2
82479: PUSH
82480: LD_INT 30
82482: PUSH
82483: LD_INT 0
82485: PUSH
82486: EMPTY
82487: LIST
82488: LIST
82489: PUSH
82490: LD_INT 30
82492: PUSH
82493: LD_INT 1
82495: PUSH
82496: EMPTY
82497: LIST
82498: LIST
82499: PUSH
82500: EMPTY
82501: LIST
82502: LIST
82503: LIST
82504: PPUSH
82505: CALL_OW 72
82509: PUSH
82510: LD_INT 1
82512: ARRAY
82513: PPUSH
82514: CALL_OW 112
// break ;
82518: GO 82522
// end ; end ;
82520: GO 82440
82522: POP
82523: POP
// end ;
82524: LD_VAR 0 5
82528: RET
