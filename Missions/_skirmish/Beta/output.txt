// export MissionStart ; starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RevealFogArea ( 1 , BetaArea ) ;
  11: LD_INT 1
  13: PPUSH
  14: LD_INT 8
  16: PPUSH
  17: CALL_OW 332
// GameType ;
  21: CALL 5228 0 0
// SetBName ( BetaA , beta ) ;
  25: LD_INT 1
  27: PPUSH
  28: LD_STRING beta
  30: PPUSH
  31: CALL_OW 500
// SetBName ( BetaB , beta ) ;
  35: LD_INT 3
  37: PPUSH
  38: LD_STRING beta
  40: PPUSH
  41: CALL_OW 500
// PrepareHeroes ;
  45: CALL 2391 0 0
// PrepareBeta ;
  49: CALL 2780 0 0
// InGameOn ;
  53: CALL_OW 8
// CenterNowOnUnits ( Brighton ) ;
  57: LD_EXP 8
  61: PPUSH
  62: CALL_OW 87
// ComMoveXY ( Megan , 50 , 42 ) ;
  66: LD_EXP 10
  70: PPUSH
  71: LD_INT 50
  73: PPUSH
  74: LD_INT 42
  76: PPUSH
  77: CALL_OW 111
// repeat wait ( 0 0$1 ) until GetDistUnits ( Megan , Brighton ) < 3 ;
  81: LD_INT 35
  83: PPUSH
  84: CALL_OW 67
  88: LD_EXP 10
  92: PPUSH
  93: LD_EXP 8
  97: PPUSH
  98: CALL_OW 296
 102: PUSH
 103: LD_INT 3
 105: LESS
 106: IFFALSE 81
// ComTurnUnit ( Megan , Brighton ) ;
 108: LD_EXP 10
 112: PPUSH
 113: LD_EXP 8
 117: PPUSH
 118: CALL_OW 119
// Say ( Megan , DMegan-1a ) ;
 122: LD_EXP 10
 126: PPUSH
 127: LD_STRING DMegan-1a
 129: PPUSH
 130: CALL_OW 88
// wait ( 0 0$0.3 ) ;
 134: LD_INT 10
 136: PPUSH
 137: CALL_OW 67
// ComTurnUnit ( Brighton , Megan ) ;
 141: LD_EXP 8
 145: PPUSH
 146: LD_EXP 10
 150: PPUSH
 151: CALL_OW 119
// Say ( Brighton , DBrighton-1a ) ;
 155: LD_EXP 8
 159: PPUSH
 160: LD_STRING DBrighton-1a
 162: PPUSH
 163: CALL_OW 88
// Say ( Megan , DMegan-2a ) ;
 167: LD_EXP 10
 171: PPUSH
 172: LD_STRING DMegan-2a
 174: PPUSH
 175: CALL_OW 88
// Say ( Brighton , DBrighton-2a ) ;
 179: LD_EXP 8
 183: PPUSH
 184: LD_STRING DBrighton-2a
 186: PPUSH
 187: CALL_OW 88
// Say ( Megan , DMegan-3a ) ;
 191: LD_EXP 10
 195: PPUSH
 196: LD_STRING DMegan-3a
 198: PPUSH
 199: CALL_OW 88
// Say ( Brighton , DBrighton-3a ) ;
 203: LD_EXP 8
 207: PPUSH
 208: LD_STRING DBrighton-3a
 210: PPUSH
 211: CALL_OW 88
// Say ( Megan , DMegan-4a ) ;
 215: LD_EXP 10
 219: PPUSH
 220: LD_STRING DMegan-4a
 222: PPUSH
 223: CALL_OW 88
// ComMoveXY ( Megan , 40 , 37 ) ;
 227: LD_EXP 10
 231: PPUSH
 232: LD_INT 40
 234: PPUSH
 235: LD_INT 37
 237: PPUSH
 238: CALL_OW 111
// AddComTurnUnit ( Megan , Brighton ) ;
 242: LD_EXP 10
 246: PPUSH
 247: LD_EXP 8
 251: PPUSH
 252: CALL_OW 179
// ComMoveXY ( Palmer , 50 , 42 ) ;
 256: LD_EXP 9
 260: PPUSH
 261: LD_INT 50
 263: PPUSH
 264: LD_INT 42
 266: PPUSH
 267: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 271: LD_INT 35
 273: PPUSH
 274: CALL_OW 67
// until GetDistUnits ( Brighton , Palmer ) < 6 ;
 278: LD_EXP 8
 282: PPUSH
 283: LD_EXP 9
 287: PPUSH
 288: CALL_OW 296
 292: PUSH
 293: LD_INT 6
 295: LESS
 296: IFFALSE 271
// ComTurnUnit ( Brighton , Palmer ) ;
 298: LD_EXP 8
 302: PPUSH
 303: LD_EXP 9
 307: PPUSH
 308: CALL_OW 119
// ComTurnUnit ( Palmer , Brighton ) ;
 312: LD_EXP 9
 316: PPUSH
 317: LD_EXP 8
 321: PPUSH
 322: CALL_OW 119
// Say ( Megan , DMegan-5a ) ;
 326: LD_EXP 10
 330: PPUSH
 331: LD_STRING DMegan-5a
 333: PPUSH
 334: CALL_OW 88
// Say ( Palmer , DPalmer-1 ) ;
 338: LD_EXP 9
 342: PPUSH
 343: LD_STRING DPalmer-1
 345: PPUSH
 346: CALL_OW 88
// Say ( Brighton , DBrighton-1 ) ;
 350: LD_EXP 8
 354: PPUSH
 355: LD_STRING DBrighton-1
 357: PPUSH
 358: CALL_OW 88
// Say ( Palmer , DPalmer-2 ) ;
 362: LD_EXP 9
 366: PPUSH
 367: LD_STRING DPalmer-2
 369: PPUSH
 370: CALL_OW 88
// Say ( Brighton , DBrighton-2 ) ;
 374: LD_EXP 8
 378: PPUSH
 379: LD_STRING DBrighton-2
 381: PPUSH
 382: CALL_OW 88
// Say ( Palmer , DPalmer-3 ) ;
 386: LD_EXP 9
 390: PPUSH
 391: LD_STRING DPalmer-3
 393: PPUSH
 394: CALL_OW 88
// Say ( Brighton , DBrighton-3 ) ;
 398: LD_EXP 8
 402: PPUSH
 403: LD_STRING DBrighton-3
 405: PPUSH
 406: CALL_OW 88
// Say ( Palmer , DPalmer-4 ) ;
 410: LD_EXP 9
 414: PPUSH
 415: LD_STRING DPalmer-4
 417: PPUSH
 418: CALL_OW 88
// ComEnterUnit ( Palmer , AmTower ) ;
 422: LD_EXP 9
 426: PPUSH
 427: LD_INT 6
 429: PPUSH
 430: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
 434: LD_INT 35
 436: PPUSH
 437: CALL_OW 67
// until IsInUnit ( Palmer ) = AmTower ;
 441: LD_EXP 9
 445: PPUSH
 446: CALL_OW 310
 450: PUSH
 451: LD_INT 6
 453: EQUAL
 454: IFFALSE 434
// SayRadio ( Palmer , DPalmer-5 ) ;
 456: LD_EXP 9
 460: PPUSH
 461: LD_STRING DPalmer-5
 463: PPUSH
 464: CALL_OW 94
// ComMoveXY ( Brighton , 59 , 36 ) ;
 468: LD_EXP 8
 472: PPUSH
 473: LD_INT 59
 475: PPUSH
 476: LD_INT 36
 478: PPUSH
 479: CALL_OW 111
// ComMoveXY ( Megan , 60 , 35 ) ;
 483: LD_EXP 10
 487: PPUSH
 488: LD_INT 60
 490: PPUSH
 491: LD_INT 35
 493: PPUSH
 494: CALL_OW 111
// ComMoveXY ( Palmer , 60 , 34 ) ;
 498: LD_EXP 9
 502: PPUSH
 503: LD_INT 60
 505: PPUSH
 506: LD_INT 34
 508: PPUSH
 509: CALL_OW 111
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 513: LD_EXP 8
 517: PPUSH
 518: LD_INT 99
 520: PPUSH
 521: LD_INT 37
 523: PPUSH
 524: CALL_OW 178
// AddComTurnUnit ( Megan , Brighton ) ;
 528: LD_EXP 10
 532: PPUSH
 533: LD_EXP 8
 537: PPUSH
 538: CALL_OW 179
// AddComTurnUnit ( Palmer , Brighton ) ;
 542: LD_EXP 9
 546: PPUSH
 547: LD_EXP 8
 551: PPUSH
 552: CALL_OW 179
// CenterOnXY ( 64 , 40 ) ;
 556: LD_INT 64
 558: PPUSH
 559: LD_INT 40
 561: PPUSH
 562: CALL_OW 84
// ComMeeting ( BetaSquad , SpotArea ) ;
 566: LD_EXP 11
 570: PPUSH
 571: LD_INT 13
 573: PPUSH
 574: CALL 11035 0 2
// wait ( 0 0$30 ) ;
 578: LD_INT 1050
 580: PPUSH
 581: CALL_OW 67
// Say ( Brighton , DBrighton-4 ) ;
 585: LD_EXP 8
 589: PPUSH
 590: LD_STRING DBrighton-4
 592: PPUSH
 593: CALL_OW 88
// Say ( Brighton , DBrighton-5 ) ;
 597: LD_EXP 8
 601: PPUSH
 602: LD_STRING DBrighton-5
 604: PPUSH
 605: CALL_OW 88
// AddComTurnUnit ( Brighton , Megan ) ;
 609: LD_EXP 8
 613: PPUSH
 614: LD_EXP 10
 618: PPUSH
 619: CALL_OW 179
// Say ( Brighton , DBrighton-6 ) ;
 623: LD_EXP 8
 627: PPUSH
 628: LD_STRING DBrighton-6
 630: PPUSH
 631: CALL_OW 88
// Say ( Megan , DMegan-1 ) ;
 635: LD_EXP 10
 639: PPUSH
 640: LD_STRING DMegan-1
 642: PPUSH
 643: CALL_OW 88
// Say ( Brighton , DBrighton-7 ) ;
 647: LD_EXP 8
 651: PPUSH
 652: LD_STRING DBrighton-7
 654: PPUSH
 655: CALL_OW 88
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 659: LD_EXP 8
 663: PPUSH
 664: LD_INT 99
 666: PPUSH
 667: LD_INT 37
 669: PPUSH
 670: CALL_OW 178
// Say ( Brighton , DBrighton-8 ) ;
 674: LD_EXP 8
 678: PPUSH
 679: LD_STRING DBrighton-8
 681: PPUSH
 682: CALL_OW 88
// ChangeMissionObjectives ( C1 ) ;
 686: LD_STRING C1
 688: PPUSH
 689: CALL_OW 337
// InGameOff ;
 693: CALL_OW 9
// SaveForQuickRestart ;
 697: CALL_OW 22
// MissionStart := true ;
 701: LD_ADDR_EXP 1
 705: PUSH
 706: LD_INT 1
 708: ST_TO_ADDR
// music_nat := 1 ;
 709: LD_ADDR_OWVAR 71
 713: PUSH
 714: LD_INT 1
 716: ST_TO_ADDR
// end ;
 717: END
// export ArmadaArrived , FirstAssaultRepelled ; export RuSpeaker ; every 0 0$1 trigger MissionStart do var tmp , i ;
 718: LD_EXP 1
 722: IFFALSE 1917
 724: GO 726
 726: DISABLE
 727: LD_INT 0
 729: PPUSH
 730: PPUSH
// begin wait ( ruArrival ) ;
 731: LD_EXP 41
 735: PPUSH
 736: CALL_OW 67
// PrepareRUArmada ;
 740: CALL 3362 0 0
// wait ( 0 0$3 ) ;
 744: LD_INT 105
 746: PPUSH
 747: CALL_OW 67
// tmp := AreaToList ( RUArrivalParkingArea , 0 ) ;
 751: LD_ADDR_VAR 0 1
 755: PUSH
 756: LD_INT 15
 758: PPUSH
 759: LD_INT 0
 761: PPUSH
 762: CALL_OW 517
 766: ST_TO_ADDR
// for i = 1 to RUArmada do
 767: LD_ADDR_VAR 0 2
 771: PUSH
 772: DOUBLE
 773: LD_INT 1
 775: DEC
 776: ST_TO_ADDR
 777: LD_EXP 16
 781: PUSH
 782: FOR_TO
 783: IFFALSE 832
// ComMoveXY ( RUArmada [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
 785: LD_EXP 16
 789: PUSH
 790: LD_VAR 0 2
 794: ARRAY
 795: PPUSH
 796: LD_VAR 0 1
 800: PUSH
 801: LD_INT 1
 803: ARRAY
 804: PUSH
 805: LD_VAR 0 2
 809: ARRAY
 810: PPUSH
 811: LD_VAR 0 1
 815: PUSH
 816: LD_INT 2
 818: ARRAY
 819: PUSH
 820: LD_VAR 0 2
 824: ARRAY
 825: PPUSH
 826: CALL_OW 111
 830: GO 782
 832: POP
 833: POP
// ArmadaArrived := true ;
 834: LD_ADDR_EXP 2
 838: PUSH
 839: LD_INT 1
 841: ST_TO_ADDR
// Say ( Palmer , DPalmer-A1 ) ;
 842: LD_EXP 9
 846: PPUSH
 847: LD_STRING DPalmer-A1
 849: PPUSH
 850: CALL_OW 88
// Say ( Brighton , DBrighton-A1 ) ;
 854: LD_EXP 8
 858: PPUSH
 859: LD_STRING DBrighton-A1
 861: PPUSH
 862: CALL_OW 88
// wait ( 0 0$20 ) ;
 866: LD_INT 700
 868: PPUSH
 869: CALL_OW 67
// PrepareRUBase ;
 873: CALL 4087 0 0
// PrepareRUBase_v2 ;
 877: CALL 4503 0 0
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
 881: LD_ADDR_EXP 60
 885: PUSH
 886: LD_EXP 60
 890: PPUSH
 891: LD_INT 1
 893: PPUSH
 894: LD_INT 22
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PPUSH
 904: CALL_OW 69
 908: PPUSH
 909: CALL_OW 1
 913: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , RU_SecondPersonnel ) ;
 914: LD_ADDR_EXP 60
 918: PUSH
 919: LD_EXP 60
 923: PPUSH
 924: LD_INT 2
 926: PPUSH
 927: LD_EXP 35
 931: PPUSH
 932: CALL_OW 1
 936: ST_TO_ADDR
// MC_Start ( ) ;
 937: CALL 49574 0 0
// wait ( 0 0$30 ) ;
 941: LD_INT 1050
 943: PPUSH
 944: CALL_OW 67
// PrepareRUBulldozers ;
 948: CALL 3974 0 0
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
 952: LD_EXP 17
 956: PUSH
 957: LD_INT 1
 959: ARRAY
 960: PPUSH
 961: LD_INT 9
 963: PPUSH
 964: CALL 10892 0 2
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
 968: LD_EXP 17
 972: PUSH
 973: LD_INT 2
 975: ARRAY
 976: PPUSH
 977: LD_INT 11
 979: PPUSH
 980: CALL 10892 0 2
// DoNotAttack ( 1 , Bulldozers [ 1 ] ) ;
 984: LD_INT 1
 986: PPUSH
 987: LD_EXP 17
 991: PUSH
 992: LD_INT 1
 994: ARRAY
 995: PPUSH
 996: CALL_OW 471
// DoNotAttack ( 1 , Bulldozers [ 2 ] ) ;
1000: LD_INT 1
1002: PPUSH
1003: LD_EXP 17
1007: PUSH
1008: LD_INT 2
1010: ARRAY
1011: PPUSH
1012: CALL_OW 471
// wait ( 0 0$30 ) ;
1016: LD_INT 1050
1018: PPUSH
1019: CALL_OW 67
// InGameOn ;
1023: CALL_OW 8
// PlaceSeeing ( 95 , 93 , 1 , - 30 ) ;
1027: LD_INT 95
1029: PPUSH
1030: LD_INT 93
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_INT 30
1038: NEG
1039: PPUSH
1040: CALL_OW 330
// ComMoveXY ( FilterUnitsInArea ( US_BackOffArea , [ f_side , 1 ] ) , 63 , 39 ) ;
1044: LD_INT 10
1046: PPUSH
1047: LD_INT 22
1049: PUSH
1050: LD_INT 1
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: PPUSH
1057: CALL_OW 70
1061: PPUSH
1062: LD_INT 63
1064: PPUSH
1065: LD_INT 39
1067: PPUSH
1068: CALL_OW 111
// CenterOnXY ( 95 , 93 ) ;
1072: LD_INT 95
1074: PPUSH
1075: LD_INT 93
1077: PPUSH
1078: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
1082: LD_INT 35
1084: PPUSH
1085: CALL_OW 67
// if not HasTask ( Bulldozers [ 1 ] ) then
1089: LD_EXP 17
1093: PUSH
1094: LD_INT 1
1096: ARRAY
1097: PPUSH
1098: CALL_OW 314
1102: NOT
1103: IFFALSE 1121
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
1105: LD_EXP 17
1109: PUSH
1110: LD_INT 1
1112: ARRAY
1113: PPUSH
1114: LD_INT 9
1116: PPUSH
1117: CALL 10892 0 2
// if not HasTask ( Bulldozers [ 2 ] ) then
1121: LD_EXP 17
1125: PUSH
1126: LD_INT 2
1128: ARRAY
1129: PPUSH
1130: CALL_OW 314
1134: NOT
1135: IFFALSE 1153
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
1137: LD_EXP 17
1141: PUSH
1142: LD_INT 2
1144: ARRAY
1145: PPUSH
1146: LD_INT 11
1148: PPUSH
1149: CALL 10892 0 2
// until ListEnvironmentArea ( BulldozerArea ) < 2 or ListEnvironmentArea ( BulldozerArea2 ) < 2 or IsDead ( Bulldozers [ 1 ] ) ;
1153: LD_INT 9
1155: PPUSH
1156: CALL_OW 353
1160: PUSH
1161: LD_INT 2
1163: LESS
1164: PUSH
1165: LD_INT 11
1167: PPUSH
1168: CALL_OW 353
1172: PUSH
1173: LD_INT 2
1175: LESS
1176: OR
1177: PUSH
1178: LD_EXP 17
1182: PUSH
1183: LD_INT 1
1185: ARRAY
1186: PPUSH
1187: CALL_OW 301
1191: OR
1192: IFFALSE 1082
// if UnitFilter ( Bulldozers , [ f_ok ] ) then
1194: LD_EXP 17
1198: PPUSH
1199: LD_INT 50
1201: PUSH
1202: EMPTY
1203: LIST
1204: PPUSH
1205: CALL_OW 72
1209: IFFALSE 1262
// begin wait ( 0 0$10 ) ;
1211: LD_INT 350
1213: PPUSH
1214: CALL_OW 67
// ComMoveXY ( Bulldozers , 120 , 131 ) ;
1218: LD_EXP 17
1222: PPUSH
1223: LD_INT 120
1225: PPUSH
1226: LD_INT 131
1228: PPUSH
1229: CALL_OW 111
// for i in Bulldozers do
1233: LD_ADDR_VAR 0 2
1237: PUSH
1238: LD_EXP 17
1242: PUSH
1243: FOR_IN
1244: IFFALSE 1260
// NormalAttack ( 1 , i ) ;
1246: LD_INT 1
1248: PPUSH
1249: LD_VAR 0 2
1253: PPUSH
1254: CALL_OW 472
1258: GO 1243
1260: POP
1261: POP
// end ; wait ( 0 0$10 ) ;
1262: LD_INT 350
1264: PPUSH
1265: CALL_OW 67
// RemoveSeeing ( 95 , 93 , 1 ) ;
1269: LD_INT 95
1271: PPUSH
1272: LD_INT 93
1274: PPUSH
1275: LD_INT 1
1277: PPUSH
1278: CALL_OW 331
// Say ( Yashin , DDeath-Yas-1 ) ;
1282: LD_EXP 12
1286: PPUSH
1287: LD_STRING DDeath-Yas-1
1289: PPUSH
1290: CALL_OW 88
// SayEffect ( DRuSol-A1 ) ;
1294: LD_STRING DRuSol-A1
1296: PPUSH
1297: CALL_OW 96
// wait ( 0 0$2 ) ;
1301: LD_INT 70
1303: PPUSH
1304: CALL_OW 67
// InGameOff ;
1308: CALL_OW 9
// ComMoveXY ( RUArmada , 66 , 40 ) ;
1312: LD_EXP 16
1316: PPUSH
1317: LD_INT 66
1319: PPUSH
1320: LD_INT 40
1322: PPUSH
1323: CALL_OW 111
// wait ( 0 0$2 ) ;
1327: LD_INT 70
1329: PPUSH
1330: CALL_OW 67
// Say ( Gaydar , DDeath-Gay-2 ) ;
1334: LD_EXP 14
1338: PPUSH
1339: LD_STRING DDeath-Gay-2
1341: PPUSH
1342: CALL_OW 88
// wait ( 0 0$20 ) ;
1346: LD_INT 700
1348: PPUSH
1349: CALL_OW 67
// AssaultStarted := true ;
1353: LD_ADDR_EXP 7
1357: PUSH
1358: LD_INT 1
1360: ST_TO_ADDR
// Say ( Popov , DDeath-Pop-1 ) ;
1361: LD_EXP 13
1365: PPUSH
1366: LD_STRING DDeath-Pop-1
1368: PPUSH
1369: CALL_OW 88
// Say ( Gaydar , DDeath-Gay-1 ) ;
1373: LD_EXP 14
1377: PPUSH
1378: LD_STRING DDeath-Gay-1
1380: PPUSH
1381: CALL_OW 88
// wait ( 0 0$5 ) ;
1385: LD_INT 175
1387: PPUSH
1388: CALL_OW 67
// Say ( Sevi , DDeath-Vse-1 ) ;
1392: LD_EXP 15
1396: PPUSH
1397: LD_STRING DDeath-Vse-1
1399: PPUSH
1400: CALL_OW 88
// PriorityAttack ( 6 , BetaA ) ;
1404: LD_INT 6
1406: PPUSH
1407: LD_INT 1
1409: PPUSH
1410: CALL_OW 470
// PriorityAttack ( 6 , BetaB ) ;
1414: LD_INT 6
1416: PPUSH
1417: LD_INT 3
1419: PPUSH
1420: CALL_OW 470
// repeat for i in RuArmada do
1424: LD_ADDR_VAR 0 2
1428: PUSH
1429: LD_EXP 16
1433: PUSH
1434: FOR_IN
1435: IFFALSE 1485
// if not HasTask ( i ) then
1437: LD_VAR 0 2
1441: PPUSH
1442: CALL_OW 314
1446: NOT
1447: IFFALSE 1483
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
1449: LD_VAR 0 2
1453: PPUSH
1454: LD_INT 22
1456: PUSH
1457: LD_INT 1
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: PPUSH
1464: CALL_OW 69
1468: PPUSH
1469: LD_VAR 0 2
1473: PPUSH
1474: CALL_OW 74
1478: PPUSH
1479: CALL_OW 115
1483: GO 1434
1485: POP
1486: POP
// wait ( 0 0$1 ) until FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_type , unit_human ] ] ) < 10 and IsDead ( Yashin ) and IsDead ( Popov ) and IsDead ( Gaydar ) and IsDead ( Sevi ) ;
1487: LD_INT 35
1489: PPUSH
1490: CALL_OW 67
1494: LD_INT 1
1496: PUSH
1497: LD_INT 22
1499: PUSH
1500: LD_INT 6
1502: PUSH
1503: EMPTY
1504: LIST
1505: LIST
1506: PUSH
1507: LD_INT 21
1509: PUSH
1510: LD_INT 1
1512: PUSH
1513: EMPTY
1514: LIST
1515: LIST
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: LIST
1521: PPUSH
1522: CALL_OW 69
1526: PUSH
1527: LD_INT 10
1529: LESS
1530: PUSH
1531: LD_EXP 12
1535: PPUSH
1536: CALL_OW 301
1540: AND
1541: PUSH
1542: LD_EXP 13
1546: PPUSH
1547: CALL_OW 301
1551: AND
1552: PUSH
1553: LD_EXP 14
1557: PPUSH
1558: CALL_OW 301
1562: AND
1563: PUSH
1564: LD_EXP 15
1568: PPUSH
1569: CALL_OW 301
1573: AND
1574: IFFALSE 1424
// AssaultStarted := false ;
1576: LD_ADDR_EXP 7
1580: PUSH
1581: LD_INT 0
1583: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ f_side , 6 ] ) , 120 , 131 ) ;
1584: LD_INT 22
1586: PUSH
1587: LD_INT 6
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: PPUSH
1594: CALL_OW 69
1598: PPUSH
1599: LD_INT 120
1601: PPUSH
1602: LD_INT 131
1604: PPUSH
1605: CALL_OW 111
// RuSpeaker := FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_sex , sex_male ] , [ f_type , unit_human ] , [ f_lives , 500 ] ] ) ;
1609: LD_ADDR_EXP 4
1613: PUSH
1614: LD_INT 1
1616: PUSH
1617: LD_INT 22
1619: PUSH
1620: LD_INT 6
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 26
1629: PUSH
1630: LD_INT 1
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: PUSH
1637: LD_INT 21
1639: PUSH
1640: LD_INT 1
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: PUSH
1647: LD_INT 24
1649: PUSH
1650: LD_INT 500
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: PPUSH
1664: CALL_OW 69
1668: ST_TO_ADDR
// if RuSpeaker then
1669: LD_EXP 4
1673: IFFALSE 1691
// Say ( RuSpeaker [ 1 ] , DRuSol-A2 ) ;
1675: LD_EXP 4
1679: PUSH
1680: LD_INT 1
1682: ARRAY
1683: PPUSH
1684: LD_STRING DRuSol-A2
1686: PPUSH
1687: CALL_OW 88
// wait ( 0 0$30 ) ;
1691: LD_INT 1050
1693: PPUSH
1694: CALL_OW 67
// DialogueOn ;
1698: CALL_OW 6
// Say ( Brighton , DBrighton-B1 ) ;
1702: LD_EXP 8
1706: PPUSH
1707: LD_STRING DBrighton-B1
1709: PPUSH
1710: CALL_OW 88
// Say ( Palmer , DPalmer-B1 ) ;
1714: LD_EXP 9
1718: PPUSH
1719: LD_STRING DPalmer-B1
1721: PPUSH
1722: CALL_OW 88
// Say ( Brighton , DBrighton-B2 ) ;
1726: LD_EXP 8
1730: PPUSH
1731: LD_STRING DBrighton-B2
1733: PPUSH
1734: CALL_OW 88
// SayRadio ( Burlak , DBurlak-B1 ) ;
1738: LD_EXP 18
1742: PPUSH
1743: LD_STRING DBurlak-B1
1745: PPUSH
1746: CALL_OW 94
// Say ( Brighton , DBrighton-B3 ) ;
1750: LD_EXP 8
1754: PPUSH
1755: LD_STRING DBrighton-B3
1757: PPUSH
1758: CALL_OW 88
// Say ( Palmer , DPalmer-B2 ) ;
1762: LD_EXP 9
1766: PPUSH
1767: LD_STRING DPalmer-B2
1769: PPUSH
1770: CALL_OW 88
// Say ( Brighton , DBrighton-B4 ) ;
1774: LD_EXP 8
1778: PPUSH
1779: LD_STRING DBrighton-B4
1781: PPUSH
1782: CALL_OW 88
// Say ( Brighton , DBrighton-B5 ) ;
1786: LD_EXP 8
1790: PPUSH
1791: LD_STRING DBrighton-B5
1793: PPUSH
1794: CALL_OW 88
// DialogueOff ;
1798: CALL_OW 7
// ChangeMissionObjectives ( C2 ) ;
1802: LD_STRING C2
1804: PPUSH
1805: CALL_OW 337
// FirstAssaultRepelled := true ;
1809: LD_ADDR_EXP 3
1813: PUSH
1814: LD_INT 1
1816: ST_TO_ADDR
// RemoveUnit ( Bulldozers [ 1 ] ) ;
1817: LD_EXP 17
1821: PUSH
1822: LD_INT 1
1824: ARRAY
1825: PPUSH
1826: CALL_OW 64
// RemoveUnit ( Bulldozers [ 2 ] ) ;
1830: LD_EXP 17
1834: PUSH
1835: LD_INT 2
1837: ARRAY
1838: PPUSH
1839: CALL_OW 64
// AddComExitVehicle ( FilterAllUnits ( [ f_side , 6 ] ) ) ;
1843: LD_INT 22
1845: PUSH
1846: LD_INT 6
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PPUSH
1853: CALL_OW 69
1857: PPUSH
1858: CALL_OW 181
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
1862: LD_INT 22
1864: PUSH
1865: LD_INT 6
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: PPUSH
1872: CALL_OW 69
1876: PPUSH
1877: LD_INT 3
1879: PPUSH
1880: CALL_OW 235
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
1884: LD_ADDR_EXP 60
1888: PUSH
1889: LD_EXP 60
1893: PPUSH
1894: LD_INT 1
1896: PPUSH
1897: LD_INT 22
1899: PUSH
1900: LD_INT 3
1902: PUSH
1903: EMPTY
1904: LIST
1905: LIST
1906: PPUSH
1907: CALL_OW 69
1911: PPUSH
1912: CALL_OW 1
1916: ST_TO_ADDR
// end ;
1917: PPOPN 2
1919: END
// every 0 0$1 trigger FirstAssaultRepelled and jmmArrival > 0 0$00 do
1920: LD_EXP 3
1924: PUSH
1925: LD_EXP 40
1929: PUSH
1930: LD_INT 0
1932: GREATER
1933: AND
1934: IFFALSE 1954
1936: GO 1938
1938: DISABLE
// begin enable ;
1939: ENABLE
// jmmArrival := jmmArrival - 0 0$01 ;
1940: LD_ADDR_EXP 40
1944: PUSH
1945: LD_EXP 40
1949: PUSH
1950: LD_INT 35
1952: MINUS
1953: ST_TO_ADDR
// end ;
1954: END
// export JMM_Arrived ; every 0 0$1 trigger jmmArrival = 0 0$00 do
1955: LD_EXP 40
1959: PUSH
1960: LD_INT 0
1962: EQUAL
1963: IFFALSE 2069
1965: GO 1967
1967: DISABLE
// begin JMMReinforcement ;
1968: CALL 4831 0 0
// DialogueOn ;
1972: CALL_OW 6
// CenterOnUnits ( JMM ) ;
1976: LD_EXP 36
1980: PPUSH
1981: CALL_OW 85
// Say ( JMM , DJMM-F1 ) ;
1985: LD_EXP 36
1989: PPUSH
1990: LD_STRING DJMM-F1
1992: PPUSH
1993: CALL_OW 88
// if RussiansDefeated then
1997: LD_EXP 42
2001: IFFALSE 2027
// begin AddMedal ( Russians , 1 ) ;
2003: LD_STRING Russians
2005: PPUSH
2006: LD_INT 1
2008: PPUSH
2009: CALL_OW 101
// Say ( Brighton , DBrighton-F1a ) ;
2013: LD_EXP 8
2017: PPUSH
2018: LD_STRING DBrighton-F1a
2020: PPUSH
2021: CALL_OW 88
// end else
2025: GO 2057
// begin AddMedal ( Russians , - 1 ) ;
2027: LD_STRING Russians
2029: PPUSH
2030: LD_INT 1
2032: NEG
2033: PPUSH
2034: CALL_OW 101
// Say ( Brighton , DBrighton-F1 ) ;
2038: LD_EXP 8
2042: PPUSH
2043: LD_STRING DBrighton-F1
2045: PPUSH
2046: CALL_OW 88
// ChangeMissionObjectives ( C3 ) ;
2050: LD_STRING C3
2052: PPUSH
2053: CALL_OW 337
// end ; DialogueOff ;
2057: CALL_OW 7
// JMM_Arrived := true ;
2061: LD_ADDR_EXP 5
2065: PUSH
2066: LD_INT 1
2068: ST_TO_ADDR
// end ;
2069: END
// every 0 0$1 trigger JMM_Arrived and See ( 1 , Burlak ) do
2070: LD_EXP 5
2074: PUSH
2075: LD_INT 1
2077: PPUSH
2078: LD_EXP 18
2082: PPUSH
2083: CALL_OW 292
2087: AND
2088: IFFALSE 2117
2090: GO 2092
2092: DISABLE
// begin Say ( Burlak , DBurlak ) ;
2093: LD_EXP 18
2097: PPUSH
2098: LD_STRING DBurlak
2100: PPUSH
2101: CALL_OW 88
// Say ( JMM , DJMM ) ;
2105: LD_EXP 36
2109: PPUSH
2110: LD_STRING DJMM
2112: PPUSH
2113: CALL_OW 88
// end ;
2117: END
// export LaserBuilt ; every 0 0$1 trigger FilterAllUnits ( [ f_and , [ f_side , 1 ] , [ f_or , [ f_weapon , us_laser ] , [ f_bweapon , us_laser ] ] ] ) > 1 do
2118: LD_INT 1
2120: PUSH
2121: LD_INT 22
2123: PUSH
2124: LD_INT 1
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: PUSH
2131: LD_INT 2
2133: PUSH
2134: LD_INT 34
2136: PUSH
2137: LD_INT 9
2139: PUSH
2140: EMPTY
2141: LIST
2142: LIST
2143: PUSH
2144: LD_INT 35
2146: PUSH
2147: LD_INT 9
2149: PUSH
2150: EMPTY
2151: LIST
2152: LIST
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: LIST
2158: PUSH
2159: EMPTY
2160: LIST
2161: LIST
2162: LIST
2163: PPUSH
2164: CALL_OW 69
2168: PUSH
2169: LD_INT 1
2171: GREATER
2172: IFFALSE 2185
2174: GO 2176
2176: DISABLE
// begin LaserBuilt := true ;
2177: LD_ADDR_EXP 6
2181: PUSH
2182: LD_INT 1
2184: ST_TO_ADDR
// end ;
2185: END
// export AssaultStarted ; every 0 0$1 trigger AssaultStarted and See ( 6 , NearestUnitToUnit ( FilterAllUnits ( [ f_and , [ [ f_side , 1 ] , [ f_bweapon , us_laser ] ] ] ) , IsInUnit ( Sevi ) ) ) do
2186: LD_EXP 7
2190: PUSH
2191: LD_INT 6
2193: PPUSH
2194: LD_INT 1
2196: PUSH
2197: LD_INT 22
2199: PUSH
2200: LD_INT 1
2202: PUSH
2203: EMPTY
2204: LIST
2205: LIST
2206: PUSH
2207: LD_INT 35
2209: PUSH
2210: LD_INT 9
2212: PUSH
2213: EMPTY
2214: LIST
2215: LIST
2216: PUSH
2217: EMPTY
2218: LIST
2219: LIST
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: PPUSH
2225: CALL_OW 69
2229: PPUSH
2230: LD_EXP 15
2234: PPUSH
2235: CALL_OW 310
2239: PPUSH
2240: CALL_OW 74
2244: PPUSH
2245: CALL_OW 292
2249: AND
2250: IFFALSE 2286
2252: GO 2254
2254: DISABLE
// begin wait ( 0 0$5 ) ;
2255: LD_INT 175
2257: PPUSH
2258: CALL_OW 67
// Say ( Sevi , DDeath-Vse-2 ) ;
2262: LD_EXP 15
2266: PPUSH
2267: LD_STRING DDeath-Vse-2
2269: PPUSH
2270: CALL_OW 88
// Say ( Yashin , DDeath-Yas-2 ) ;
2274: LD_EXP 12
2278: PPUSH
2279: LD_STRING DDeath-Yas-2
2281: PPUSH
2282: CALL_OW 88
// end ;
2286: END
// every 0 0$1 trigger AssaultStarted do
2287: LD_EXP 7
2291: IFFALSE 2315
2293: GO 2295
2295: DISABLE
// begin wait ( 0 0$20 ) ;
2296: LD_INT 700
2298: PPUSH
2299: CALL_OW 67
// Say ( Popov , DDeath-Pop-2 ) ;
2303: LD_EXP 13
2307: PPUSH
2308: LD_STRING DDeath-Pop-2
2310: PPUSH
2311: CALL_OW 88
// end ;
2315: END
// every 0 0$1 trigger MissionStart do
2316: LD_EXP 1
2320: IFFALSE 2362
2322: GO 2324
2324: DISABLE
// begin wait ( rand ( 0 0$50 , 2 2$20 ) ) ;
2325: LD_INT 1750
2327: PPUSH
2328: LD_INT 4900
2330: PPUSH
2331: CALL_OW 12
2335: PPUSH
2336: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
2340: LD_INT 2
2342: PPUSH
2343: LD_INT 5
2345: PPUSH
2346: CALL_OW 12
2350: PPUSH
2351: LD_INT 12
2353: PPUSH
2354: LD_INT 1
2356: PPUSH
2357: CALL_OW 55
// enable ;
2361: ENABLE
// end ;
2362: END
// every 0 0$1 trigger MissionStart do
2363: LD_EXP 1
2367: IFFALSE 2390
2369: GO 2371
2371: DISABLE
// begin enable ;
2372: ENABLE
// display_Strings := [ #tick , tick ] ;
2373: LD_ADDR_OWVAR 47
2377: PUSH
2378: LD_STRING #tick
2380: PUSH
2381: LD_OWVAR 1
2385: PUSH
2386: EMPTY
2387: LIST
2388: LIST
2389: ST_TO_ADDR
// end ; end_of_file
2390: END
// export Brighton , Palmer , Megan ; export BetaSquad ; export function PrepareHeroes ; begin
2391: LD_INT 0
2393: PPUSH
// uc_side := 1 ;
2394: LD_ADDR_OWVAR 20
2398: PUSH
2399: LD_INT 1
2401: ST_TO_ADDR
// hc_class = class_soldier ;
2402: LD_ADDR_OWVAR 28
2406: PUSH
2407: LD_INT 1
2409: ST_TO_ADDR
// uc_nation := nation_american ;
2410: LD_ADDR_OWVAR 21
2414: PUSH
2415: LD_INT 1
2417: ST_TO_ADDR
// hc_sex = sex_male ;
2418: LD_ADDR_OWVAR 27
2422: PUSH
2423: LD_INT 1
2425: ST_TO_ADDR
// hc_importance = 110 ;
2426: LD_ADDR_OWVAR 32
2430: PUSH
2431: LD_INT 110
2433: ST_TO_ADDR
// hc_basic_skills = [ 5 , 4 , 5 , 3 ] ;
2434: LD_ADDR_OWVAR 30
2438: PUSH
2439: LD_INT 5
2441: PUSH
2442: LD_INT 4
2444: PUSH
2445: LD_INT 5
2447: PUSH
2448: LD_INT 3
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: LIST
2455: LIST
2456: ST_TO_ADDR
// hc_skills = [ 9 , 6 , 7 , 6 ] ;
2457: LD_ADDR_OWVAR 31
2461: PUSH
2462: LD_INT 9
2464: PUSH
2465: LD_INT 6
2467: PUSH
2468: LD_INT 7
2470: PUSH
2471: LD_INT 6
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: LIST
2478: LIST
2479: ST_TO_ADDR
// hc_attr = [ 12 , 10 ] ;
2480: LD_ADDR_OWVAR 29
2484: PUSH
2485: LD_INT 12
2487: PUSH
2488: LD_INT 10
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: ST_TO_ADDR
// hc_name := Gerard Brighton ;
2495: LD_ADDR_OWVAR 26
2499: PUSH
2500: LD_STRING Gerard Brighton
2502: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2503: LD_ADDR_OWVAR 33
2507: PUSH
2508: LD_STRING Beta_Skirmish
2510: ST_TO_ADDR
// hc_face_number := 1 ;
2511: LD_ADDR_OWVAR 34
2515: PUSH
2516: LD_INT 1
2518: ST_TO_ADDR
// Brighton := CreateHuman ;
2519: LD_ADDR_EXP 8
2523: PUSH
2524: CALL_OW 44
2528: ST_TO_ADDR
// uc_nation := nation_american ;
2529: LD_ADDR_OWVAR 21
2533: PUSH
2534: LD_INT 1
2536: ST_TO_ADDR
// hc_importance = 80 ;
2537: LD_ADDR_OWVAR 32
2541: PUSH
2542: LD_INT 80
2544: ST_TO_ADDR
// hc_sex = sex_male ;
2545: LD_ADDR_OWVAR 27
2549: PUSH
2550: LD_INT 1
2552: ST_TO_ADDR
// hc_basic_skills = [ 5 , 5 , 3 , 1 ] ;
2553: LD_ADDR_OWVAR 30
2557: PUSH
2558: LD_INT 5
2560: PUSH
2561: LD_INT 5
2563: PUSH
2564: LD_INT 3
2566: PUSH
2567: LD_INT 1
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: ST_TO_ADDR
// hc_skills = [ 7 , 6 , 5 , 3 ] ;
2576: LD_ADDR_OWVAR 31
2580: PUSH
2581: LD_INT 7
2583: PUSH
2584: LD_INT 6
2586: PUSH
2587: LD_INT 5
2589: PUSH
2590: LD_INT 3
2592: PUSH
2593: EMPTY
2594: LIST
2595: LIST
2596: LIST
2597: LIST
2598: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2599: LD_ADDR_OWVAR 29
2603: PUSH
2604: LD_INT 10
2606: PUSH
2607: LD_INT 10
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: ST_TO_ADDR
// hc_name := Brian Palmer ;
2614: LD_ADDR_OWVAR 26
2618: PUSH
2619: LD_STRING Brian Palmer
2621: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2622: LD_ADDR_OWVAR 33
2626: PUSH
2627: LD_STRING Beta_Skirmish
2629: ST_TO_ADDR
// hc_face_number := 3 ;
2630: LD_ADDR_OWVAR 34
2634: PUSH
2635: LD_INT 3
2637: ST_TO_ADDR
// Palmer := CreateHuman ;
2638: LD_ADDR_EXP 9
2642: PUSH
2643: CALL_OW 44
2647: ST_TO_ADDR
// hc_class = class_scientistic ;
2648: LD_ADDR_OWVAR 28
2652: PUSH
2653: LD_INT 4
2655: ST_TO_ADDR
// uc_nation := nation_american ;
2656: LD_ADDR_OWVAR 21
2660: PUSH
2661: LD_INT 1
2663: ST_TO_ADDR
// hc_importance = 70 ;
2664: LD_ADDR_OWVAR 32
2668: PUSH
2669: LD_INT 70
2671: ST_TO_ADDR
// hc_sex = sex_female ;
2672: LD_ADDR_OWVAR 27
2676: PUSH
2677: LD_INT 2
2679: ST_TO_ADDR
// hc_basic_skills = [ 3 , 2 , 4 , 6 ] ;
2680: LD_ADDR_OWVAR 30
2684: PUSH
2685: LD_INT 3
2687: PUSH
2688: LD_INT 2
2690: PUSH
2691: LD_INT 4
2693: PUSH
2694: LD_INT 6
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: LIST
2701: LIST
2702: ST_TO_ADDR
// hc_skills = [ 4 , 2 , 5 , 8 ] ;
2703: LD_ADDR_OWVAR 31
2707: PUSH
2708: LD_INT 4
2710: PUSH
2711: LD_INT 2
2713: PUSH
2714: LD_INT 5
2716: PUSH
2717: LD_INT 8
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: LIST
2724: LIST
2725: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2726: LD_ADDR_OWVAR 29
2730: PUSH
2731: LD_INT 10
2733: PUSH
2734: LD_INT 10
2736: PUSH
2737: EMPTY
2738: LIST
2739: LIST
2740: ST_TO_ADDR
// hc_name := Megan Armitage ;
2741: LD_ADDR_OWVAR 26
2745: PUSH
2746: LD_STRING Megan Armitage
2748: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2749: LD_ADDR_OWVAR 33
2753: PUSH
2754: LD_STRING Beta_Skirmish
2756: ST_TO_ADDR
// hc_face_number := 4 ;
2757: LD_ADDR_OWVAR 34
2761: PUSH
2762: LD_INT 4
2764: ST_TO_ADDR
// Megan := CreateHuman ;
2765: LD_ADDR_EXP 10
2769: PUSH
2770: CALL_OW 44
2774: ST_TO_ADDR
// end ;
2775: LD_VAR 0 1
2779: RET
// export function PrepareBeta ; var i , filter , un , soldiers ; begin
2780: LD_INT 0
2782: PPUSH
2783: PPUSH
2784: PPUSH
2785: PPUSH
2786: PPUSH
// uc_side := 1 ;
2787: LD_ADDR_OWVAR 20
2791: PUSH
2792: LD_INT 1
2794: ST_TO_ADDR
// uc_nation := nation_american ;
2795: LD_ADDR_OWVAR 21
2799: PUSH
2800: LD_INT 1
2802: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
2803: LD_ADDR_VAR 0 2
2807: PUSH
2808: LD_INT 22
2810: PUSH
2811: LD_INT 1
2813: PUSH
2814: EMPTY
2815: LIST
2816: LIST
2817: PUSH
2818: LD_INT 30
2820: PUSH
2821: LD_INT 32
2823: PUSH
2824: EMPTY
2825: LIST
2826: LIST
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PPUSH
2832: CALL_OW 69
2836: PUSH
2837: FOR_IN
2838: IFFALSE 2893
// PlaceWeaponTurret ( i , [ us_light_gun , us_light_gun , us_gatling_gun , us_double_gun , us_radar , us_light_gun , us_gatling_gun ] [ rand ( 1 , 7 ) ] ) ;
2840: LD_VAR 0 2
2844: PPUSH
2845: LD_INT 3
2847: PUSH
2848: LD_INT 3
2850: PUSH
2851: LD_INT 4
2853: PUSH
2854: LD_INT 5
2856: PUSH
2857: LD_INT 11
2859: PUSH
2860: LD_INT 3
2862: PUSH
2863: LD_INT 4
2865: PUSH
2866: EMPTY
2867: LIST
2868: LIST
2869: LIST
2870: LIST
2871: LIST
2872: LIST
2873: LIST
2874: PUSH
2875: LD_INT 1
2877: PPUSH
2878: LD_INT 7
2880: PPUSH
2881: CALL_OW 12
2885: ARRAY
2886: PPUSH
2887: CALL_OW 431
2891: GO 2837
2893: POP
2894: POP
// hc_name :=  ;
2895: LD_ADDR_OWVAR 26
2899: PUSH
2900: LD_STRING 
2902: ST_TO_ADDR
// hc_gallery :=  ;
2903: LD_ADDR_OWVAR 33
2907: PUSH
2908: LD_STRING 
2910: ST_TO_ADDR
// for i = 1 to [ 6 , 5 , 5 ] [ Difficulty ] do
2911: LD_ADDR_VAR 0 2
2915: PUSH
2916: DOUBLE
2917: LD_INT 1
2919: DEC
2920: ST_TO_ADDR
2921: LD_INT 6
2923: PUSH
2924: LD_INT 5
2926: PUSH
2927: LD_INT 5
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: LIST
2934: PUSH
2935: LD_OWVAR 67
2939: ARRAY
2940: PUSH
2941: FOR_TO
2942: IFFALSE 3000
// begin PrepareSoldier ( 1 , game_skill ) ;
2944: LD_INT 1
2946: PPUSH
2947: LD_EXP 38
2951: PPUSH
2952: CALL_OW 381
// un := CreateHuman ;
2956: LD_ADDR_VAR 0 4
2960: PUSH
2961: CALL_OW 44
2965: ST_TO_ADDR
// filter := filter ^ un ;
2966: LD_ADDR_VAR 0 3
2970: PUSH
2971: LD_VAR 0 3
2975: PUSH
2976: LD_VAR 0 4
2980: ADD
2981: ST_TO_ADDR
// soldiers := soldiers ^ un ;
2982: LD_ADDR_VAR 0 5
2986: PUSH
2987: LD_VAR 0 5
2991: PUSH
2992: LD_VAR 0 4
2996: ADD
2997: ST_TO_ADDR
// end ;
2998: GO 2941
3000: POP
3001: POP
// for i = 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
3002: LD_ADDR_VAR 0 2
3006: PUSH
3007: DOUBLE
3008: LD_INT 1
3010: DEC
3011: ST_TO_ADDR
3012: LD_INT 3
3014: PUSH
3015: LD_INT 2
3017: PUSH
3018: LD_INT 2
3020: PUSH
3021: EMPTY
3022: LIST
3023: LIST
3024: LIST
3025: PUSH
3026: LD_OWVAR 67
3030: ARRAY
3031: PUSH
3032: FOR_TO
3033: IFFALSE 3087
// begin PrepareEngineer ( 0 , game_skill ) ;
3035: LD_INT 0
3037: PPUSH
3038: LD_EXP 38
3042: PPUSH
3043: CALL_OW 382
// un := CreateHuman ;
3047: LD_ADDR_VAR 0 4
3051: PUSH
3052: CALL_OW 44
3056: ST_TO_ADDR
// filter := filter ^ un ;
3057: LD_ADDR_VAR 0 3
3061: PUSH
3062: LD_VAR 0 3
3066: PUSH
3067: LD_VAR 0 4
3071: ADD
3072: ST_TO_ADDR
// PlaceHumanInUnit ( un , BetaB ) ;
3073: LD_VAR 0 4
3077: PPUSH
3078: LD_INT 3
3080: PPUSH
3081: CALL_OW 52
// end ;
3085: GO 3032
3087: POP
3088: POP
// for i = 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
3089: LD_ADDR_VAR 0 2
3093: PUSH
3094: DOUBLE
3095: LD_INT 1
3097: DEC
3098: ST_TO_ADDR
3099: LD_INT 4
3101: PUSH
3102: LD_INT 3
3104: PUSH
3105: LD_INT 3
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: LIST
3112: PUSH
3113: LD_OWVAR 67
3117: ARRAY
3118: PUSH
3119: FOR_TO
3120: IFFALSE 3174
// begin PrepareMechanic ( 0 , game_skill ) ;
3122: LD_INT 0
3124: PPUSH
3125: LD_EXP 38
3129: PPUSH
3130: CALL_OW 383
// un := CreateHuman ;
3134: LD_ADDR_VAR 0 4
3138: PUSH
3139: CALL_OW 44
3143: ST_TO_ADDR
// filter := filter ^ un ;
3144: LD_ADDR_VAR 0 3
3148: PUSH
3149: LD_VAR 0 3
3153: PUSH
3154: LD_VAR 0 4
3158: ADD
3159: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmFac ) ;
3160: LD_VAR 0 4
3164: PPUSH
3165: LD_INT 8
3167: PPUSH
3168: CALL_OW 52
// end ;
3172: GO 3119
3174: POP
3175: POP
// for i = 1 to 2 do
3176: LD_ADDR_VAR 0 2
3180: PUSH
3181: DOUBLE
3182: LD_INT 1
3184: DEC
3185: ST_TO_ADDR
3186: LD_INT 2
3188: PUSH
3189: FOR_TO
3190: IFFALSE 3244
// begin PrepareScientist ( 0 , game_skill ) ;
3192: LD_INT 0
3194: PPUSH
3195: LD_EXP 38
3199: PPUSH
3200: CALL_OW 384
// un := CreateHuman ;
3204: LD_ADDR_VAR 0 4
3208: PUSH
3209: CALL_OW 44
3213: ST_TO_ADDR
// filter := filter ^ un ;
3214: LD_ADDR_VAR 0 3
3218: PUSH
3219: LD_VAR 0 3
3223: PUSH
3224: LD_VAR 0 4
3228: ADD
3229: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmLab ) ;
3230: LD_VAR 0 4
3234: PPUSH
3235: LD_INT 14
3237: PPUSH
3238: CALL_OW 52
// end ;
3242: GO 3189
3244: POP
3245: POP
// for i = 1 to soldiers do
3246: LD_ADDR_VAR 0 2
3250: PUSH
3251: DOUBLE
3252: LD_INT 1
3254: DEC
3255: ST_TO_ADDR
3256: LD_VAR 0 5
3260: PUSH
3261: FOR_TO
3262: IFFALSE 3287
// PlaceUnitArea ( soldiers [ i ] , spawn_area , false ) ;
3264: LD_VAR 0 5
3268: PUSH
3269: LD_VAR 0 2
3273: ARRAY
3274: PPUSH
3275: LD_INT 1
3277: PPUSH
3278: LD_INT 0
3280: PPUSH
3281: CALL_OW 49
3285: GO 3261
3287: POP
3288: POP
// PlaceUnitXY ( Brighton , 51 , 43 , false ) ;
3289: LD_EXP 8
3293: PPUSH
3294: LD_INT 51
3296: PPUSH
3297: LD_INT 43
3299: PPUSH
3300: LD_INT 0
3302: PPUSH
3303: CALL_OW 48
// PlaceUnitXY ( Palmer , 55 , 58 , false ) ;
3307: LD_EXP 9
3311: PPUSH
3312: LD_INT 55
3314: PPUSH
3315: LD_INT 58
3317: PPUSH
3318: LD_INT 0
3320: PPUSH
3321: CALL_OW 48
// PlaceUnitXY ( Megan , 39 , 36 , false ) ;
3325: LD_EXP 10
3329: PPUSH
3330: LD_INT 39
3332: PPUSH
3333: LD_INT 36
3335: PPUSH
3336: LD_INT 0
3338: PPUSH
3339: CALL_OW 48
// BetaSquad := filter diff 0 ;
3343: LD_ADDR_EXP 11
3347: PUSH
3348: LD_VAR 0 3
3352: PUSH
3353: LD_INT 0
3355: DIFF
3356: ST_TO_ADDR
// end ;
3357: LD_VAR 0 1
3361: RET
// export Yashin , Popov , Gaydar , Sevi ; export RUArmada ; export function PrepareRUArmada ; var i , vehicle , soldiers , un , vehs ; begin
3362: LD_INT 0
3364: PPUSH
3365: PPUSH
3366: PPUSH
3367: PPUSH
3368: PPUSH
3369: PPUSH
// uc_side := 6 ;
3370: LD_ADDR_OWVAR 20
3374: PUSH
3375: LD_INT 6
3377: ST_TO_ADDR
// uc_nation := nation_russian ;
3378: LD_ADDR_OWVAR 21
3382: PUSH
3383: LD_INT 3
3385: ST_TO_ADDR
// soldiers := [ ] ;
3386: LD_ADDR_VAR 0 4
3390: PUSH
3391: EMPTY
3392: ST_TO_ADDR
// vehs := [ ] ;
3393: LD_ADDR_VAR 0 6
3397: PUSH
3398: EMPTY
3399: ST_TO_ADDR
// RUArmada := [ ] ;
3400: LD_ADDR_EXP 16
3404: PUSH
3405: EMPTY
3406: ST_TO_ADDR
// Yashin := NewCharacter ( Yashin ) ;
3407: LD_ADDR_EXP 12
3411: PUSH
3412: LD_STRING Yashin
3414: PPUSH
3415: CALL_OW 25
3419: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
3420: LD_ADDR_EXP 13
3424: PUSH
3425: LD_STRING Popov
3427: PPUSH
3428: CALL_OW 25
3432: ST_TO_ADDR
// Gaydar := NewCharacter ( Gaydar ) ;
3433: LD_ADDR_EXP 14
3437: PUSH
3438: LD_STRING Gaydar
3440: PPUSH
3441: CALL_OW 25
3445: ST_TO_ADDR
// Sevi := NewCharacter ( Vsevolod ) ;
3446: LD_ADDR_EXP 15
3450: PUSH
3451: LD_STRING Vsevolod
3453: PPUSH
3454: CALL_OW 25
3458: ST_TO_ADDR
// for i = 1 to 16 do
3459: LD_ADDR_VAR 0 2
3463: PUSH
3464: DOUBLE
3465: LD_INT 1
3467: DEC
3468: ST_TO_ADDR
3469: LD_INT 16
3471: PUSH
3472: FOR_TO
3473: IFFALSE 3515
// begin PrepareSoldier ( 0 , game_eskill ) ;
3475: LD_INT 0
3477: PPUSH
3478: LD_EXP 39
3482: PPUSH
3483: CALL_OW 381
// un := CreateHuman ;
3487: LD_ADDR_VAR 0 5
3491: PUSH
3492: CALL_OW 44
3496: ST_TO_ADDR
// soldiers := soldiers ^ un ;
3497: LD_ADDR_VAR 0 4
3501: PUSH
3502: LD_VAR 0 4
3506: PUSH
3507: LD_VAR 0 5
3511: ADD
3512: ST_TO_ADDR
// end ;
3513: GO 3472
3515: POP
3516: POP
// soldiers := Yashin ^ Popov ^ Gaydar ^ Sevi ^ soldiers ;
3517: LD_ADDR_VAR 0 4
3521: PUSH
3522: LD_EXP 12
3526: PUSH
3527: LD_EXP 13
3531: ADD
3532: PUSH
3533: LD_EXP 14
3537: ADD
3538: PUSH
3539: LD_EXP 15
3543: ADD
3544: PUSH
3545: LD_VAR 0 4
3549: ADD
3550: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_heavy_gun , 100 ) ;
3551: LD_INT 24
3553: PPUSH
3554: LD_INT 3
3556: PPUSH
3557: LD_INT 1
3559: PPUSH
3560: LD_INT 46
3562: PPUSH
3563: LD_INT 100
3565: PPUSH
3566: CALL 16006 0 5
// for i = 1 to 8 do
3570: LD_ADDR_VAR 0 2
3574: PUSH
3575: DOUBLE
3576: LD_INT 1
3578: DEC
3579: ST_TO_ADDR
3580: LD_INT 8
3582: PUSH
3583: FOR_TO
3584: IFFALSE 3667
// begin vehicle := CreateVehicle ;
3586: LD_ADDR_VAR 0 3
3590: PUSH
3591: CALL_OW 45
3595: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3596: LD_VAR 0 4
3600: PUSH
3601: LD_INT 1
3603: ARRAY
3604: PPUSH
3605: LD_VAR 0 3
3609: PPUSH
3610: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3614: LD_ADDR_VAR 0 4
3618: PUSH
3619: LD_VAR 0 4
3623: PUSH
3624: LD_VAR 0 4
3628: PUSH
3629: LD_INT 1
3631: ARRAY
3632: DIFF
3633: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3634: LD_VAR 0 3
3638: PPUSH
3639: LD_INT 5
3641: PPUSH
3642: LD_INT 0
3644: PPUSH
3645: CALL_OW 49
// vehs := vehs ^ vehicle ;
3649: LD_ADDR_VAR 0 6
3653: PUSH
3654: LD_VAR 0 6
3658: PUSH
3659: LD_VAR 0 3
3663: ADD
3664: ST_TO_ADDR
// end ;
3665: GO 3583
3667: POP
3668: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_gatling_gun , 100 ) ;
3669: LD_INT 24
3671: PPUSH
3672: LD_INT 3
3674: PPUSH
3675: LD_INT 1
3677: PPUSH
3678: LD_INT 43
3680: PPUSH
3681: LD_INT 100
3683: PPUSH
3684: CALL 16006 0 5
// for i = 1 to 8 do
3688: LD_ADDR_VAR 0 2
3692: PUSH
3693: DOUBLE
3694: LD_INT 1
3696: DEC
3697: ST_TO_ADDR
3698: LD_INT 8
3700: PUSH
3701: FOR_TO
3702: IFFALSE 3785
// begin vehicle := CreateVehicle ;
3704: LD_ADDR_VAR 0 3
3708: PUSH
3709: CALL_OW 45
3713: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3714: LD_VAR 0 4
3718: PUSH
3719: LD_INT 1
3721: ARRAY
3722: PPUSH
3723: LD_VAR 0 3
3727: PPUSH
3728: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3732: LD_ADDR_VAR 0 4
3736: PUSH
3737: LD_VAR 0 4
3741: PUSH
3742: LD_VAR 0 4
3746: PUSH
3747: LD_INT 1
3749: ARRAY
3750: DIFF
3751: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3752: LD_VAR 0 3
3756: PPUSH
3757: LD_INT 5
3759: PPUSH
3760: LD_INT 0
3762: PPUSH
3763: CALL_OW 49
// vehs := vehs ^ vehicle ;
3767: LD_ADDR_VAR 0 6
3771: PUSH
3772: LD_VAR 0 6
3776: PUSH
3777: LD_VAR 0 3
3781: ADD
3782: ST_TO_ADDR
// end ;
3783: GO 3701
3785: POP
3786: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_gun , 100 ) ;
3787: LD_INT 22
3789: PPUSH
3790: LD_INT 3
3792: PPUSH
3793: LD_INT 1
3795: PPUSH
3796: LD_INT 44
3798: PPUSH
3799: LD_INT 100
3801: PPUSH
3802: CALL 16006 0 5
// for i = 1 to 4 do
3806: LD_ADDR_VAR 0 2
3810: PUSH
3811: DOUBLE
3812: LD_INT 1
3814: DEC
3815: ST_TO_ADDR
3816: LD_INT 4
3818: PUSH
3819: FOR_TO
3820: IFFALSE 3903
// begin vehicle := CreateVehicle ;
3822: LD_ADDR_VAR 0 3
3826: PUSH
3827: CALL_OW 45
3831: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3832: LD_VAR 0 4
3836: PUSH
3837: LD_INT 1
3839: ARRAY
3840: PPUSH
3841: LD_VAR 0 3
3845: PPUSH
3846: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3850: LD_ADDR_VAR 0 4
3854: PUSH
3855: LD_VAR 0 4
3859: PUSH
3860: LD_VAR 0 4
3864: PUSH
3865: LD_INT 1
3867: ARRAY
3868: DIFF
3869: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3870: LD_VAR 0 3
3874: PPUSH
3875: LD_INT 5
3877: PPUSH
3878: LD_INT 0
3880: PPUSH
3881: CALL_OW 49
// vehs := vehs ^ vehicle ;
3885: LD_ADDR_VAR 0 6
3889: PUSH
3890: LD_VAR 0 6
3894: PUSH
3895: LD_VAR 0 3
3899: ADD
3900: ST_TO_ADDR
// end ;
3901: GO 3819
3903: POP
3904: POP
// RUArmada := vehs ;
3905: LD_ADDR_EXP 16
3909: PUSH
3910: LD_VAR 0 6
3914: ST_TO_ADDR
// SetMark ( [ IsInUnit ( Yashin ) , IsInUnit ( Popov ) , IsInUnit ( Gaydar ) , IsInUnit ( Sevi ) ] , - 6 ) ;
3915: LD_EXP 12
3919: PPUSH
3920: CALL_OW 310
3924: PUSH
3925: LD_EXP 13
3929: PPUSH
3930: CALL_OW 310
3934: PUSH
3935: LD_EXP 14
3939: PPUSH
3940: CALL_OW 310
3944: PUSH
3945: LD_EXP 15
3949: PPUSH
3950: CALL_OW 310
3954: PUSH
3955: EMPTY
3956: LIST
3957: LIST
3958: LIST
3959: LIST
3960: PPUSH
3961: LD_INT 6
3963: NEG
3964: PPUSH
3965: CALL_OW 242
// end ;
3969: LD_VAR 0 1
3973: RET
// export Bulldozers ; export function PrepareRUBulldozers ; var i , vehicle ; begin
3974: LD_INT 0
3976: PPUSH
3977: PPUSH
3978: PPUSH
// uc_side := 6 ;
3979: LD_ADDR_OWVAR 20
3983: PUSH
3984: LD_INT 6
3986: ST_TO_ADDR
// uc_nation := nation_russian ;
3987: LD_ADDR_OWVAR 21
3991: PUSH
3992: LD_INT 3
3994: ST_TO_ADDR
// Bulldozers := [ ] ;
3995: LD_ADDR_EXP 17
3999: PUSH
4000: EMPTY
4001: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_bulldozer , 100 ) ;
4002: LD_INT 24
4004: PPUSH
4005: LD_INT 3
4007: PPUSH
4008: LD_INT 3
4010: PPUSH
4011: LD_INT 53
4013: PPUSH
4014: LD_INT 100
4016: PPUSH
4017: CALL 16006 0 5
// for i = 1 to 2 do
4021: LD_ADDR_VAR 0 2
4025: PUSH
4026: DOUBLE
4027: LD_INT 1
4029: DEC
4030: ST_TO_ADDR
4031: LD_INT 2
4033: PUSH
4034: FOR_TO
4035: IFFALSE 4080
// begin vehicle := CreateVehicle ;
4037: LD_ADDR_VAR 0 3
4041: PUSH
4042: CALL_OW 45
4046: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
4047: LD_VAR 0 3
4051: PPUSH
4052: LD_INT 5
4054: PPUSH
4055: LD_INT 0
4057: PPUSH
4058: CALL_OW 49
// Bulldozers := Bulldozers ^ vehicle ;
4062: LD_ADDR_EXP 17
4066: PUSH
4067: LD_EXP 17
4071: PUSH
4072: LD_VAR 0 3
4076: ADD
4077: ST_TO_ADDR
// end ;
4078: GO 4034
4080: POP
4081: POP
// end ;
4082: LD_VAR 0 1
4086: RET
// export Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ; export function PrepareRUBase ; var i , filter , un ; begin
4087: LD_INT 0
4089: PPUSH
4090: PPUSH
4091: PPUSH
4092: PPUSH
// uc_side := 3 ;
4093: LD_ADDR_OWVAR 20
4097: PUSH
4098: LD_INT 3
4100: ST_TO_ADDR
// uc_nation := nation_russian ;
4101: LD_ADDR_OWVAR 21
4105: PUSH
4106: LD_INT 3
4108: ST_TO_ADDR
// hc_name :=  ;
4109: LD_ADDR_OWVAR 26
4113: PUSH
4114: LD_STRING 
4116: ST_TO_ADDR
// hc_gallery :=  ;
4117: LD_ADDR_OWVAR 33
4121: PUSH
4122: LD_STRING 
4124: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
4125: LD_ADDR_EXP 18
4129: PUSH
4130: LD_STRING Burlak
4132: PPUSH
4133: CALL_OW 25
4137: ST_TO_ADDR
// Gleb := NewCharacter ( Gleb ) ;
4138: LD_ADDR_EXP 19
4142: PUSH
4143: LD_STRING Gleb
4145: PPUSH
4146: CALL_OW 25
4150: ST_TO_ADDR
// Furmanov := NewCharacter ( Furmanov ) ;
4151: LD_ADDR_EXP 20
4155: PUSH
4156: LD_STRING Furmanov
4158: PPUSH
4159: CALL_OW 25
4163: ST_TO_ADDR
// Titov := NewCharacter ( Titov ) ;
4164: LD_ADDR_EXP 21
4168: PUSH
4169: LD_STRING Titov
4171: PPUSH
4172: CALL_OW 25
4176: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
4177: LD_ADDR_EXP 22
4181: PUSH
4182: LD_STRING Scholtze
4184: PPUSH
4185: CALL_OW 25
4189: ST_TO_ADDR
// Dolgov := NewCharacter ( Dolgov ) ;
4190: LD_ADDR_EXP 23
4194: PUSH
4195: LD_STRING Dolgov
4197: PPUSH
4198: CALL_OW 25
4202: ST_TO_ADDR
// Kapitsova := NewCharacter ( Kapitsova ) ;
4203: LD_ADDR_EXP 24
4207: PUSH
4208: LD_STRING Kapitsova
4210: PPUSH
4211: CALL_OW 25
4215: ST_TO_ADDR
// Karamazov := NewCharacter ( Karamazov ) ;
4216: LD_ADDR_EXP 25
4220: PUSH
4221: LD_STRING Karamazov
4223: PPUSH
4224: CALL_OW 25
4228: ST_TO_ADDR
// Kirlenkova := NewCharacter ( Kirlenkova ) ;
4229: LD_ADDR_EXP 26
4233: PUSH
4234: LD_STRING Kirlenkova
4236: PPUSH
4237: CALL_OW 25
4241: ST_TO_ADDR
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
4242: LD_ADDR_EXP 27
4246: PUSH
4247: LD_STRING Kovalyuk
4249: PPUSH
4250: CALL_OW 25
4254: ST_TO_ADDR
// Kozlov := NewCharacter ( Kozlov ) ;
4255: LD_ADDR_EXP 28
4259: PUSH
4260: LD_STRING Kozlov
4262: PPUSH
4263: CALL_OW 25
4267: ST_TO_ADDR
// Kuzmov := NewCharacter ( Kuzmov ) ;
4268: LD_ADDR_EXP 29
4272: PUSH
4273: LD_STRING Kuzmov
4275: PPUSH
4276: CALL_OW 25
4280: ST_TO_ADDR
// Lipshchin := NewCharacter ( Lipshchin ) ;
4281: LD_ADDR_EXP 30
4285: PUSH
4286: LD_STRING Lipshchin
4288: PPUSH
4289: CALL_OW 25
4293: ST_TO_ADDR
// Oblukov := NewCharacter ( Oblukov ) ;
4294: LD_ADDR_EXP 31
4298: PUSH
4299: LD_STRING Oblukov
4301: PPUSH
4302: CALL_OW 25
4306: ST_TO_ADDR
// Xavier2 := NewCharacter ( Xavier2 ) ;
4307: LD_ADDR_EXP 32
4311: PUSH
4312: LD_STRING Xavier2
4314: PPUSH
4315: CALL_OW 25
4319: ST_TO_ADDR
// Gnyevko := NewCharacter ( Gnyevko ) ;
4320: LD_ADDR_EXP 33
4324: PUSH
4325: LD_STRING Gnyevko
4327: PPUSH
4328: CALL_OW 25
4332: ST_TO_ADDR
// Belkov := NewCharacter ( Belkov ) ;
4333: LD_ADDR_EXP 34
4337: PUSH
4338: LD_STRING Belkov
4340: PPUSH
4341: CALL_OW 25
4345: ST_TO_ADDR
// filter := [ Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ] ;
4346: LD_ADDR_VAR 0 3
4350: PUSH
4351: LD_EXP 18
4355: PUSH
4356: LD_EXP 19
4360: PUSH
4361: LD_EXP 20
4365: PUSH
4366: LD_EXP 21
4370: PUSH
4371: LD_EXP 22
4375: PUSH
4376: LD_EXP 23
4380: PUSH
4381: LD_EXP 24
4385: PUSH
4386: LD_EXP 25
4390: PUSH
4391: LD_EXP 26
4395: PUSH
4396: LD_EXP 27
4400: PUSH
4401: LD_EXP 28
4405: PUSH
4406: LD_EXP 29
4410: PUSH
4411: LD_EXP 30
4415: PUSH
4416: LD_EXP 31
4420: PUSH
4421: LD_EXP 32
4425: PUSH
4426: LD_EXP 33
4430: PUSH
4431: LD_EXP 34
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: LIST
4453: LIST
4454: ST_TO_ADDR
// for i = 1 to filter do
4455: LD_ADDR_VAR 0 2
4459: PUSH
4460: DOUBLE
4461: LD_INT 1
4463: DEC
4464: ST_TO_ADDR
4465: LD_VAR 0 3
4469: PUSH
4470: FOR_TO
4471: IFFALSE 4496
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
4473: LD_VAR 0 3
4477: PUSH
4478: LD_VAR 0 2
4482: ARRAY
4483: PPUSH
4484: LD_INT 6
4486: PPUSH
4487: LD_INT 0
4489: PPUSH
4490: CALL_OW 49
4494: GO 4470
4496: POP
4497: POP
// end ;
4498: LD_VAR 0 1
4502: RET
// export RU_SecondPersonnel ; export function PrepareRUBase_v2 ; var i , filter , un ; begin
4503: LD_INT 0
4505: PPUSH
4506: PPUSH
4507: PPUSH
4508: PPUSH
// uc_side := 3 ;
4509: LD_ADDR_OWVAR 20
4513: PUSH
4514: LD_INT 3
4516: ST_TO_ADDR
// uc_nation := nation_russian ;
4517: LD_ADDR_OWVAR 21
4521: PUSH
4522: LD_INT 3
4524: ST_TO_ADDR
// hc_name :=  ;
4525: LD_ADDR_OWVAR 26
4529: PUSH
4530: LD_STRING 
4532: ST_TO_ADDR
// hc_gallery :=  ;
4533: LD_ADDR_OWVAR 33
4537: PUSH
4538: LD_STRING 
4540: ST_TO_ADDR
// for i = 1 to 8 do
4541: LD_ADDR_VAR 0 2
4545: PUSH
4546: DOUBLE
4547: LD_INT 1
4549: DEC
4550: ST_TO_ADDR
4551: LD_INT 8
4553: PUSH
4554: FOR_TO
4555: IFFALSE 4597
// begin PrepareSoldier ( 0 , game_eskill ) ;
4557: LD_INT 0
4559: PPUSH
4560: LD_EXP 39
4564: PPUSH
4565: CALL_OW 381
// un := CreateHuman ;
4569: LD_ADDR_VAR 0 4
4573: PUSH
4574: CALL_OW 44
4578: ST_TO_ADDR
// filter := filter ^ un ;
4579: LD_ADDR_VAR 0 3
4583: PUSH
4584: LD_VAR 0 3
4588: PUSH
4589: LD_VAR 0 4
4593: ADD
4594: ST_TO_ADDR
// end ;
4595: GO 4554
4597: POP
4598: POP
// for i = 1 to 4 do
4599: LD_ADDR_VAR 0 2
4603: PUSH
4604: DOUBLE
4605: LD_INT 1
4607: DEC
4608: ST_TO_ADDR
4609: LD_INT 4
4611: PUSH
4612: FOR_TO
4613: IFFALSE 4655
// begin PrepareEngineer ( 0 , game_eskill ) ;
4615: LD_INT 0
4617: PPUSH
4618: LD_EXP 39
4622: PPUSH
4623: CALL_OW 382
// un := CreateHuman ;
4627: LD_ADDR_VAR 0 4
4631: PUSH
4632: CALL_OW 44
4636: ST_TO_ADDR
// filter := filter ^ un ;
4637: LD_ADDR_VAR 0 3
4641: PUSH
4642: LD_VAR 0 3
4646: PUSH
4647: LD_VAR 0 4
4651: ADD
4652: ST_TO_ADDR
// end ;
4653: GO 4612
4655: POP
4656: POP
// for i = 1 to 6 do
4657: LD_ADDR_VAR 0 2
4661: PUSH
4662: DOUBLE
4663: LD_INT 1
4665: DEC
4666: ST_TO_ADDR
4667: LD_INT 6
4669: PUSH
4670: FOR_TO
4671: IFFALSE 4713
// begin PrepareMechanic ( 0 , game_eskill ) ;
4673: LD_INT 0
4675: PPUSH
4676: LD_EXP 39
4680: PPUSH
4681: CALL_OW 383
// un := CreateHuman ;
4685: LD_ADDR_VAR 0 4
4689: PUSH
4690: CALL_OW 44
4694: ST_TO_ADDR
// filter := filter ^ un ;
4695: LD_ADDR_VAR 0 3
4699: PUSH
4700: LD_VAR 0 3
4704: PUSH
4705: LD_VAR 0 4
4709: ADD
4710: ST_TO_ADDR
// end ;
4711: GO 4670
4713: POP
4714: POP
// for i = 1 to 4 do
4715: LD_ADDR_VAR 0 2
4719: PUSH
4720: DOUBLE
4721: LD_INT 1
4723: DEC
4724: ST_TO_ADDR
4725: LD_INT 4
4727: PUSH
4728: FOR_TO
4729: IFFALSE 4771
// begin PrepareScientist ( 0 , game_eskill ) ;
4731: LD_INT 0
4733: PPUSH
4734: LD_EXP 39
4738: PPUSH
4739: CALL_OW 384
// un := CreateHuman ;
4743: LD_ADDR_VAR 0 4
4747: PUSH
4748: CALL_OW 44
4752: ST_TO_ADDR
// filter := filter ^ un ;
4753: LD_ADDR_VAR 0 3
4757: PUSH
4758: LD_VAR 0 3
4762: PUSH
4763: LD_VAR 0 4
4767: ADD
4768: ST_TO_ADDR
// end ;
4769: GO 4728
4771: POP
4772: POP
// for i = 1 to filter do
4773: LD_ADDR_VAR 0 2
4777: PUSH
4778: DOUBLE
4779: LD_INT 1
4781: DEC
4782: ST_TO_ADDR
4783: LD_VAR 0 3
4787: PUSH
4788: FOR_TO
4789: IFFALSE 4814
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
4791: LD_VAR 0 3
4795: PUSH
4796: LD_VAR 0 2
4800: ARRAY
4801: PPUSH
4802: LD_INT 6
4804: PPUSH
4805: LD_INT 0
4807: PPUSH
4808: CALL_OW 49
4812: GO 4788
4814: POP
4815: POP
// RU_SecondPersonnel := filter ;
4816: LD_ADDR_EXP 35
4820: PUSH
4821: LD_VAR 0 3
4825: ST_TO_ADDR
// end ;
4826: LD_VAR 0 1
4830: RET
// export JMM ; export function JMMReinforcement ; var i , soldiers , un , vehs , vehicle , mechs ; begin
4831: LD_INT 0
4833: PPUSH
4834: PPUSH
4835: PPUSH
4836: PPUSH
4837: PPUSH
4838: PPUSH
4839: PPUSH
// uc_side := 1 ;
4840: LD_ADDR_OWVAR 20
4844: PUSH
4845: LD_INT 1
4847: ST_TO_ADDR
// uc_nation := nation_american ;
4848: LD_ADDR_OWVAR 21
4852: PUSH
4853: LD_INT 1
4855: ST_TO_ADDR
// JMM := NewCharacter ( JMM ) ;
4856: LD_ADDR_EXP 36
4860: PUSH
4861: LD_STRING JMM
4863: PPUSH
4864: CALL_OW 25
4868: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
4869: LD_EXP 36
4873: PPUSH
4874: LD_INT 1
4876: PPUSH
4877: CALL_OW 233
// PlaceUnitArea ( JMM , JMMArrivalArea , false ) ;
4881: LD_EXP 36
4885: PPUSH
4886: LD_INT 7
4888: PPUSH
4889: LD_INT 0
4891: PPUSH
4892: CALL_OW 49
// mechs := [ ] ;
4896: LD_ADDR_VAR 0 7
4900: PUSH
4901: EMPTY
4902: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
4903: LD_ADDR_VAR 0 2
4907: PUSH
4908: DOUBLE
4909: LD_INT 1
4911: DEC
4912: ST_TO_ADDR
4913: LD_INT 4
4915: PUSH
4916: LD_INT 3
4918: PUSH
4919: LD_INT 3
4921: PUSH
4922: EMPTY
4923: LIST
4924: LIST
4925: LIST
4926: PUSH
4927: LD_OWVAR 67
4931: ARRAY
4932: PUSH
4933: FOR_TO
4934: IFFALSE 4995
// begin PrepareSoldier ( 0 , game_skill + 1 ) ;
4936: LD_INT 0
4938: PPUSH
4939: LD_EXP 38
4943: PUSH
4944: LD_INT 1
4946: PLUS
4947: PPUSH
4948: CALL_OW 381
// un := CreateHuman ;
4952: LD_ADDR_VAR 0 4
4956: PUSH
4957: CALL_OW 44
4961: ST_TO_ADDR
// soldiers := soldiers ^ un ;
4962: LD_ADDR_VAR 0 3
4966: PUSH
4967: LD_VAR 0 3
4971: PUSH
4972: LD_VAR 0 4
4976: ADD
4977: ST_TO_ADDR
// PlaceUnitArea ( un , JMMArrivalArea , false ) ;
4978: LD_VAR 0 4
4982: PPUSH
4983: LD_INT 7
4985: PPUSH
4986: LD_INT 0
4988: PPUSH
4989: CALL_OW 49
// end ;
4993: GO 4933
4995: POP
4996: POP
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
4997: LD_ADDR_VAR 0 2
5001: PUSH
5002: DOUBLE
5003: LD_INT 1
5005: DEC
5006: ST_TO_ADDR
5007: LD_INT 7
5009: PUSH
5010: LD_INT 6
5012: PUSH
5013: LD_INT 4
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: LIST
5020: PUSH
5021: LD_OWVAR 67
5025: ARRAY
5026: PUSH
5027: FOR_TO
5028: IFFALSE 5074
// begin PrepareMechanic ( 0 , game_skill + 1 ) ;
5030: LD_INT 0
5032: PPUSH
5033: LD_EXP 38
5037: PUSH
5038: LD_INT 1
5040: PLUS
5041: PPUSH
5042: CALL_OW 383
// un := CreateHuman ;
5046: LD_ADDR_VAR 0 4
5050: PUSH
5051: CALL_OW 44
5055: ST_TO_ADDR
// mechs := mechs ^ un ;
5056: LD_ADDR_VAR 0 7
5060: PUSH
5061: LD_VAR 0 7
5065: PUSH
5066: LD_VAR 0 4
5070: ADD
5071: ST_TO_ADDR
// end ;
5072: GO 5027
5074: POP
5075: POP
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , us_double_gun , 100 ) ;
5076: LD_INT 3
5078: PPUSH
5079: LD_INT 3
5081: PPUSH
5082: LD_INT 1
5084: PPUSH
5085: LD_INT 5
5087: PPUSH
5088: LD_INT 100
5090: PPUSH
5091: CALL 16006 0 5
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
5095: LD_ADDR_VAR 0 2
5099: PUSH
5100: DOUBLE
5101: LD_INT 1
5103: DEC
5104: ST_TO_ADDR
5105: LD_INT 7
5107: PUSH
5108: LD_INT 6
5110: PUSH
5111: LD_INT 4
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: LIST
5118: PUSH
5119: LD_OWVAR 67
5123: ARRAY
5124: PUSH
5125: FOR_TO
5126: IFFALSE 5221
// begin vehicle := CreateVehicle ;
5128: LD_ADDR_VAR 0 6
5132: PUSH
5133: CALL_OW 45
5137: ST_TO_ADDR
// PlaceHumanInUnit ( mechs [ 1 ] , vehicle ) ;
5138: LD_VAR 0 7
5142: PUSH
5143: LD_INT 1
5145: ARRAY
5146: PPUSH
5147: LD_VAR 0 6
5151: PPUSH
5152: CALL_OW 52
// mechs := mechs diff mechs [ 1 ] ;
5156: LD_ADDR_VAR 0 7
5160: PUSH
5161: LD_VAR 0 7
5165: PUSH
5166: LD_VAR 0 7
5170: PUSH
5171: LD_INT 1
5173: ARRAY
5174: DIFF
5175: ST_TO_ADDR
// SetDir ( vehicle , 1 ) ;
5176: LD_VAR 0 6
5180: PPUSH
5181: LD_INT 1
5183: PPUSH
5184: CALL_OW 233
// PlaceUnitArea ( vehicle , JMMArrivalArea , false ) ;
5188: LD_VAR 0 6
5192: PPUSH
5193: LD_INT 7
5195: PPUSH
5196: LD_INT 0
5198: PPUSH
5199: CALL_OW 49
// vehs := vehs ^ vehicle ;
5203: LD_ADDR_VAR 0 5
5207: PUSH
5208: LD_VAR 0 5
5212: PUSH
5213: LD_VAR 0 6
5217: ADD
5218: ST_TO_ADDR
// end ;
5219: GO 5125
5221: POP
5222: POP
// end ; end_of_file
5223: LD_VAR 0 1
5227: RET
// export game_diff ; export game_skill , game_eskill ; export jmmArrival , ruArrival ; export function GameType ; begin
5228: LD_INT 0
5230: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
5231: LD_ADDR_OWVAR 67
5235: PUSH
5236: LD_INT 0
5238: PPUSH
5239: CALL_OW 426
5243: ST_TO_ADDR
// game_diff := Difficulty ;
5244: LD_ADDR_EXP 37
5248: PUSH
5249: LD_OWVAR 67
5253: ST_TO_ADDR
// game_skill := [ 7 , 6 , 6 ] [ game_diff ] ;
5254: LD_ADDR_EXP 38
5258: PUSH
5259: LD_INT 7
5261: PUSH
5262: LD_INT 6
5264: PUSH
5265: LD_INT 6
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: LIST
5272: PUSH
5273: LD_EXP 37
5277: ARRAY
5278: ST_TO_ADDR
// game_eskill := [ 6 , 7 , 8 ] [ game_diff ] ;
5279: LD_ADDR_EXP 39
5283: PUSH
5284: LD_INT 6
5286: PUSH
5287: LD_INT 7
5289: PUSH
5290: LD_INT 8
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: LIST
5297: PUSH
5298: LD_EXP 37
5302: ARRAY
5303: ST_TO_ADDR
// ruArrival := [ 5 5$00 , 3 3$00 , 2 2$00 ] [ game_diff ] ;
5304: LD_ADDR_EXP 41
5308: PUSH
5309: LD_INT 10500
5311: PUSH
5312: LD_INT 6300
5314: PUSH
5315: LD_INT 4200
5317: PUSH
5318: EMPTY
5319: LIST
5320: LIST
5321: LIST
5322: PUSH
5323: LD_EXP 37
5327: ARRAY
5328: ST_TO_ADDR
// jmmArrival := [ 35 35$00 , 45 45$00 , 55 55$00 ] [ game_diff ] ;
5329: LD_ADDR_EXP 40
5333: PUSH
5334: LD_INT 73500
5336: PUSH
5337: LD_INT 94500
5339: PUSH
5340: LD_INT 115500
5342: PUSH
5343: EMPTY
5344: LIST
5345: LIST
5346: LIST
5347: PUSH
5348: LD_EXP 37
5352: ARRAY
5353: ST_TO_ADDR
// end ; end_of_file
5354: LD_VAR 0 1
5358: RET
// export function CustomEvent ( event ) ; begin
5359: LD_INT 0
5361: PPUSH
// end ;
5362: LD_VAR 0 2
5366: RET
// export function CustomInitMacro ( ) ; begin
5367: LD_INT 0
5369: PPUSH
// MC_SetScanArea ( 1 , RU_Base_Area ) ;
5370: LD_INT 1
5372: PPUSH
5373: LD_INT 3
5375: PPUSH
5376: CALL 72430 0 2
// MC_SetParkingArea ( 1 , RU_Base_Parking ) ;
5380: LD_INT 1
5382: PPUSH
5383: LD_INT 4
5385: PPUSH
5386: CALL 72374 0 2
// MC_SetDepositsXY ( 1 , [ [ 136 , 130 , 0 ] , [ 145 , 123 , 0 ] , ] ) ;
5390: LD_INT 1
5392: PPUSH
5393: LD_INT 136
5395: PUSH
5396: LD_INT 130
5398: PUSH
5399: LD_INT 0
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: LIST
5406: PUSH
5407: LD_INT 145
5409: PUSH
5410: LD_INT 123
5412: PUSH
5413: LD_INT 0
5415: PUSH
5416: EMPTY
5417: LIST
5418: LIST
5419: LIST
5420: PUSH
5421: EMPTY
5422: LIST
5423: LIST
5424: PPUSH
5425: CALL 71433 0 2
// MC_SetAllowedTurretWeapons ( 1 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
5429: LD_INT 1
5431: PPUSH
5432: LD_INT 43
5434: PUSH
5435: LD_INT 46
5437: PUSH
5438: LD_INT 45
5440: PUSH
5441: EMPTY
5442: LIST
5443: LIST
5444: LIST
5445: PPUSH
5446: CALL 72262 0 2
// MC_SetCratesArea ( 1 , RU_Base_Area ) ;
5450: LD_INT 1
5452: PPUSH
5453: LD_INT 3
5455: PPUSH
5456: CALL 71944 0 2
// MC_SetTame ( 1 , RU_Base_Area ) ;
5460: LD_INT 1
5462: PPUSH
5463: LD_INT 3
5465: PPUSH
5466: CALL 71675 0 2
// MC_SetDefenderLimit ( 1 , 8 ) ;
5470: LD_INT 1
5472: PPUSH
5473: LD_INT 8
5475: PPUSH
5476: CALL 71294 0 2
// MC_SetProduceList ( 1 , [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] ] ) ;
5480: LD_INT 1
5482: PPUSH
5483: LD_INT 22
5485: PUSH
5486: LD_INT 1
5488: PUSH
5489: LD_INT 3
5491: PUSH
5492: LD_INT 43
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: LIST
5499: LIST
5500: PUSH
5501: LD_INT 22
5503: PUSH
5504: LD_INT 1
5506: PUSH
5507: LD_INT 3
5509: PUSH
5510: LD_INT 44
5512: PUSH
5513: EMPTY
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: PUSH
5519: LD_INT 22
5521: PUSH
5522: LD_INT 1
5524: PUSH
5525: LD_INT 3
5527: PUSH
5528: LD_INT 45
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: PUSH
5537: LD_INT 24
5539: PUSH
5540: LD_INT 1
5542: PUSH
5543: LD_INT 3
5545: PUSH
5546: LD_INT 43
5548: PUSH
5549: EMPTY
5550: LIST
5551: LIST
5552: LIST
5553: LIST
5554: PUSH
5555: LD_INT 24
5557: PUSH
5558: LD_INT 1
5560: PUSH
5561: LD_INT 3
5563: PUSH
5564: LD_INT 43
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: PUSH
5573: LD_INT 24
5575: PUSH
5576: LD_INT 1
5578: PUSH
5579: LD_INT 3
5581: PUSH
5582: LD_INT 46
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: PUSH
5591: LD_INT 22
5593: PUSH
5594: LD_INT 1
5596: PUSH
5597: LD_INT 3
5599: PUSH
5600: LD_INT 43
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: PUSH
5609: LD_INT 22
5611: PUSH
5612: LD_INT 1
5614: PUSH
5615: LD_INT 3
5617: PUSH
5618: LD_INT 44
5620: PUSH
5621: EMPTY
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: PUSH
5627: EMPTY
5628: LIST
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: PPUSH
5637: CALL 71109 0 2
// MC_SetBuildingList ( 1 , [ [ b_depot , 127 , 125 , 5 ] , [ b_lab , 124 , 132 , 0 ] , [ b_oil_mine , 136 , 130 , 1 ] , [ b_armoury , 118 , 114 , 2 ] , [ b_oil_mine , 145 , 123 , 1 ] , [ b_oil_power , 150 , 135 , 1 ] , [ b_oil_power , 140 , 134 , 2 ] , [ b_oil_power , 137 , 121 , 5 ] , [ b_workshop , 155 , 130 , 0 ] , [ b_bunker , 155 , 130 , 0 ] , [ b_bunker , 130 , 114 , 3 ] , [ b_bunker , 142 , 115 , 3 ] , [ b_bunker , 153 , 120 , 3 ] , ] ) ;
5641: LD_INT 1
5643: PPUSH
5644: LD_INT 0
5646: PUSH
5647: LD_INT 127
5649: PUSH
5650: LD_INT 125
5652: PUSH
5653: LD_INT 5
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: LIST
5660: LIST
5661: PUSH
5662: LD_INT 6
5664: PUSH
5665: LD_INT 124
5667: PUSH
5668: LD_INT 132
5670: PUSH
5671: LD_INT 0
5673: PUSH
5674: EMPTY
5675: LIST
5676: LIST
5677: LIST
5678: LIST
5679: PUSH
5680: LD_INT 29
5682: PUSH
5683: LD_INT 136
5685: PUSH
5686: LD_INT 130
5688: PUSH
5689: LD_INT 1
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: PUSH
5698: LD_INT 4
5700: PUSH
5701: LD_INT 118
5703: PUSH
5704: LD_INT 114
5706: PUSH
5707: LD_INT 2
5709: PUSH
5710: EMPTY
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: PUSH
5716: LD_INT 29
5718: PUSH
5719: LD_INT 145
5721: PUSH
5722: LD_INT 123
5724: PUSH
5725: LD_INT 1
5727: PUSH
5728: EMPTY
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: PUSH
5734: LD_INT 26
5736: PUSH
5737: LD_INT 150
5739: PUSH
5740: LD_INT 135
5742: PUSH
5743: LD_INT 1
5745: PUSH
5746: EMPTY
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: PUSH
5752: LD_INT 26
5754: PUSH
5755: LD_INT 140
5757: PUSH
5758: LD_INT 134
5760: PUSH
5761: LD_INT 2
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: LIST
5768: LIST
5769: PUSH
5770: LD_INT 26
5772: PUSH
5773: LD_INT 137
5775: PUSH
5776: LD_INT 121
5778: PUSH
5779: LD_INT 5
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: LIST
5786: LIST
5787: PUSH
5788: LD_INT 2
5790: PUSH
5791: LD_INT 155
5793: PUSH
5794: LD_INT 130
5796: PUSH
5797: LD_INT 0
5799: PUSH
5800: EMPTY
5801: LIST
5802: LIST
5803: LIST
5804: LIST
5805: PUSH
5806: LD_INT 32
5808: PUSH
5809: LD_INT 155
5811: PUSH
5812: LD_INT 130
5814: PUSH
5815: LD_INT 0
5817: PUSH
5818: EMPTY
5819: LIST
5820: LIST
5821: LIST
5822: LIST
5823: PUSH
5824: LD_INT 32
5826: PUSH
5827: LD_INT 130
5829: PUSH
5830: LD_INT 114
5832: PUSH
5833: LD_INT 3
5835: PUSH
5836: EMPTY
5837: LIST
5838: LIST
5839: LIST
5840: LIST
5841: PUSH
5842: LD_INT 32
5844: PUSH
5845: LD_INT 142
5847: PUSH
5848: LD_INT 115
5850: PUSH
5851: LD_INT 3
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: PUSH
5860: LD_INT 32
5862: PUSH
5863: LD_INT 153
5865: PUSH
5866: LD_INT 120
5868: PUSH
5869: LD_INT 3
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: LIST
5876: LIST
5877: PUSH
5878: EMPTY
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: PPUSH
5893: CALL 71001 0 2
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_computer ] ) ;
5897: LD_INT 1
5899: PPUSH
5900: LD_INT 10
5902: PUSH
5903: LD_INT 12
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: PPUSH
5910: CALL 71851 0 2
// MC_SetFactoryExtension ( 1 , 155 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
5914: LD_INT 1
5916: PPUSH
5917: LD_INT 155
5919: PPUSH
5920: LD_INT 130
5922: PPUSH
5923: LD_INT 0
5925: PPUSH
5926: LD_INT 24
5928: PUSH
5929: LD_INT 16
5931: PUSH
5932: LD_INT 17
5934: PUSH
5935: LD_INT 18
5937: PUSH
5938: LD_INT 21
5940: PUSH
5941: EMPTY
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: PPUSH
5948: CALL 72056 0 5
// MC_SetScanArea ( 2 , RU_Base_Area ) ;
5952: LD_INT 2
5954: PPUSH
5955: LD_INT 3
5957: PPUSH
5958: CALL 72430 0 2
// MC_SetParkingArea ( 2 , RU_Base_Parking ) ;
5962: LD_INT 2
5964: PPUSH
5965: LD_INT 4
5967: PPUSH
5968: CALL 72374 0 2
// MC_SetDepositsXY ( 2 , [ [ 84 , 125 , 1 ] , ] ) ;
5972: LD_INT 2
5974: PPUSH
5975: LD_INT 84
5977: PUSH
5978: LD_INT 125
5980: PUSH
5981: LD_INT 1
5983: PUSH
5984: EMPTY
5985: LIST
5986: LIST
5987: LIST
5988: PUSH
5989: EMPTY
5990: LIST
5991: PPUSH
5992: CALL 71433 0 2
// MC_SetAllowedTurretWeapons ( 2 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
5996: LD_INT 2
5998: PPUSH
5999: LD_INT 43
6001: PUSH
6002: LD_INT 46
6004: PUSH
6005: LD_INT 45
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: LIST
6012: PPUSH
6013: CALL 72262 0 2
// MC_SetCratesArea ( 2 , RU_Base_Area ) ;
6017: LD_INT 2
6019: PPUSH
6020: LD_INT 3
6022: PPUSH
6023: CALL 71944 0 2
// MC_SetTame ( 2 , RU_Base_Area ) ;
6027: LD_INT 2
6029: PPUSH
6030: LD_INT 3
6032: PPUSH
6033: CALL 71675 0 2
// MC_SetDefenderLimit ( 2 , 8 ) ;
6037: LD_INT 2
6039: PPUSH
6040: LD_INT 8
6042: PPUSH
6043: CALL 71294 0 2
// MC_SetProduceList ( 2 , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] ] ) ;
6047: LD_INT 2
6049: PPUSH
6050: LD_INT 22
6052: PUSH
6053: LD_INT 3
6055: PUSH
6056: LD_INT 3
6058: PUSH
6059: LD_INT 43
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: LIST
6066: LIST
6067: PUSH
6068: LD_INT 22
6070: PUSH
6071: LD_INT 3
6073: PUSH
6074: LD_INT 3
6076: PUSH
6077: LD_INT 44
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: PUSH
6086: LD_INT 22
6088: PUSH
6089: LD_INT 3
6091: PUSH
6092: LD_INT 3
6094: PUSH
6095: LD_INT 45
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: PUSH
6104: LD_INT 24
6106: PUSH
6107: LD_INT 3
6109: PUSH
6110: LD_INT 3
6112: PUSH
6113: LD_INT 43
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: PUSH
6122: LD_INT 24
6124: PUSH
6125: LD_INT 3
6127: PUSH
6128: LD_INT 3
6130: PUSH
6131: LD_INT 43
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: PUSH
6140: LD_INT 24
6142: PUSH
6143: LD_INT 3
6145: PUSH
6146: LD_INT 3
6148: PUSH
6149: LD_INT 46
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: PUSH
6158: LD_INT 22
6160: PUSH
6161: LD_INT 3
6163: PUSH
6164: LD_INT 3
6166: PUSH
6167: LD_INT 43
6169: PUSH
6170: EMPTY
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 22
6178: PUSH
6179: LD_INT 3
6181: PUSH
6182: LD_INT 3
6184: PUSH
6185: LD_INT 44
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: PPUSH
6204: CALL 71109 0 2
// MC_SetBuildingList ( 2 , [ [ b_depot , 96 , 125 , 0 ] , [ b_lab , 74 , 122 , 1 ] , [ b_siberite_mine , 84 , 125 , 1 ] , [ b_siberite_power , 86 , 128 , 1 ] , [ b_siberite_power , 85 , 130 , 2 ] , [ b_siberite_power , 88 , 132 , 5 ] , [ b_workshop , 106 , 130 , 0 ] , [ b_armoury , 99 , 114 , 3 ] , [ b_bunker , 72 , 112 , 2 ] , [ b_bunker , 78 , 110 , 3 ] , [ b_bunker , 84 , 110 , 2 ] , [ b_bunker , 105 , 117 , 3 ] , ] ) ;
6208: LD_INT 2
6210: PPUSH
6211: LD_INT 0
6213: PUSH
6214: LD_INT 96
6216: PUSH
6217: LD_INT 125
6219: PUSH
6220: LD_INT 0
6222: PUSH
6223: EMPTY
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: PUSH
6229: LD_INT 6
6231: PUSH
6232: LD_INT 74
6234: PUSH
6235: LD_INT 122
6237: PUSH
6238: LD_INT 1
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: PUSH
6247: LD_INT 30
6249: PUSH
6250: LD_INT 84
6252: PUSH
6253: LD_INT 125
6255: PUSH
6256: LD_INT 1
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: PUSH
6265: LD_INT 28
6267: PUSH
6268: LD_INT 86
6270: PUSH
6271: LD_INT 128
6273: PUSH
6274: LD_INT 1
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: PUSH
6283: LD_INT 28
6285: PUSH
6286: LD_INT 85
6288: PUSH
6289: LD_INT 130
6291: PUSH
6292: LD_INT 2
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: PUSH
6301: LD_INT 28
6303: PUSH
6304: LD_INT 88
6306: PUSH
6307: LD_INT 132
6309: PUSH
6310: LD_INT 5
6312: PUSH
6313: EMPTY
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: PUSH
6319: LD_INT 2
6321: PUSH
6322: LD_INT 106
6324: PUSH
6325: LD_INT 130
6327: PUSH
6328: LD_INT 0
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: PUSH
6337: LD_INT 4
6339: PUSH
6340: LD_INT 99
6342: PUSH
6343: LD_INT 114
6345: PUSH
6346: LD_INT 3
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: PUSH
6355: LD_INT 32
6357: PUSH
6358: LD_INT 72
6360: PUSH
6361: LD_INT 112
6363: PUSH
6364: LD_INT 2
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: PUSH
6373: LD_INT 32
6375: PUSH
6376: LD_INT 78
6378: PUSH
6379: LD_INT 110
6381: PUSH
6382: LD_INT 3
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 32
6393: PUSH
6394: LD_INT 84
6396: PUSH
6397: LD_INT 110
6399: PUSH
6400: LD_INT 2
6402: PUSH
6403: EMPTY
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: PUSH
6409: LD_INT 32
6411: PUSH
6412: LD_INT 105
6414: PUSH
6415: LD_INT 117
6417: PUSH
6418: LD_INT 3
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: PPUSH
6441: CALL 71001 0 2
// MC_SetLabKind ( 2 , [ b_lab_spacetime , b_lab_siberium ] ) ;
6445: LD_INT 2
6447: PPUSH
6448: LD_INT 14
6450: PUSH
6451: LD_INT 11
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: PPUSH
6458: CALL 71851 0 2
// MC_SetFactoryExtension ( 2 , 106 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
6462: LD_INT 2
6464: PPUSH
6465: LD_INT 106
6467: PPUSH
6468: LD_INT 130
6470: PPUSH
6471: LD_INT 0
6473: PPUSH
6474: LD_INT 24
6476: PUSH
6477: LD_INT 16
6479: PUSH
6480: LD_INT 17
6482: PUSH
6483: LD_INT 18
6485: PUSH
6486: LD_INT 21
6488: PUSH
6489: EMPTY
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: LIST
6495: PPUSH
6496: CALL 72056 0 5
// end ;
6500: LD_VAR 0 1
6504: RET
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
6505: LD_INT 22
6507: PUSH
6508: LD_INT 3
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: PUSH
6515: LD_INT 30
6517: PUSH
6518: LD_INT 3
6520: PUSH
6521: EMPTY
6522: LIST
6523: LIST
6524: PUSH
6525: EMPTY
6526: LIST
6527: LIST
6528: PPUSH
6529: CALL_OW 69
6533: IFFALSE 7389
6535: GO 6537
6537: DISABLE
6538: LD_INT 0
6540: PPUSH
6541: PPUSH
6542: PPUSH
6543: PPUSH
6544: PPUSH
6545: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
6546: LD_INT 6300
6548: PUSH
6549: LD_INT 4200
6551: PUSH
6552: LD_INT 2100
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: LIST
6559: PUSH
6560: LD_OWVAR 67
6564: ARRAY
6565: PPUSH
6566: CALL_OW 67
// base := 2 ;
6570: LD_ADDR_VAR 0 2
6574: PUSH
6575: LD_INT 2
6577: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
6578: LD_INT 22
6580: PUSH
6581: LD_INT 3
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: PUSH
6588: LD_INT 30
6590: PUSH
6591: LD_INT 3
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: PPUSH
6602: CALL_OW 69
6606: NOT
6607: IFFALSE 6611
// continue ;
6609: GO 6546
// case Rand ( 1 , 3 ) of 1 :
6611: LD_INT 1
6613: PPUSH
6614: LD_INT 3
6616: PPUSH
6617: CALL_OW 12
6621: PUSH
6622: LD_INT 1
6624: DOUBLE
6625: EQUAL
6626: IFTRUE 6630
6628: GO 6806
6630: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6631: LD_ADDR_VAR 0 3
6635: PUSH
6636: LD_INT 22
6638: PUSH
6639: LD_INT 3
6641: PUSH
6642: LD_INT 3
6644: PUSH
6645: LD_INT 43
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: PUSH
6654: LD_INT 24
6656: PUSH
6657: LD_INT 3
6659: PUSH
6660: LD_INT 3
6662: PUSH
6663: LD_INT 46
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: PUSH
6672: LD_INT 24
6674: PUSH
6675: LD_INT 3
6677: PUSH
6678: LD_INT 3
6680: PUSH
6681: LD_INT 43
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: PUSH
6690: LD_INT 24
6692: PUSH
6693: LD_INT 3
6695: PUSH
6696: LD_INT 3
6698: PUSH
6699: LD_INT 46
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: PUSH
6708: LD_INT 22
6710: PUSH
6711: LD_INT 3
6713: PUSH
6714: LD_INT 3
6716: PUSH
6717: LD_INT 45
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: PUSH
6726: LD_INT 22
6728: PUSH
6729: LD_INT 3
6731: PUSH
6732: LD_INT 3
6734: PUSH
6735: LD_INT 43
6737: PUSH
6738: EMPTY
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: PUSH
6744: LD_INT 24
6746: PUSH
6747: LD_INT 3
6749: PUSH
6750: LD_INT 3
6752: PUSH
6753: LD_INT 46
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: PUSH
6762: LD_INT 22
6764: PUSH
6765: LD_INT 3
6767: PUSH
6768: LD_INT 3
6770: PUSH
6771: LD_INT 45
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
6790: LD_VAR 0 2
6794: PPUSH
6795: LD_VAR 0 3
6799: PPUSH
6800: CALL 71157 0 2
// end ; 2 :
6804: GO 7137
6806: LD_INT 2
6808: DOUBLE
6809: EQUAL
6810: IFTRUE 6814
6812: GO 6952
6814: POP
// begin tmp := [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6815: LD_ADDR_VAR 0 3
6819: PUSH
6820: LD_INT 24
6822: PUSH
6823: LD_INT 3
6825: PUSH
6826: LD_INT 3
6828: PUSH
6829: LD_INT 43
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: PUSH
6838: LD_INT 24
6840: PUSH
6841: LD_INT 3
6843: PUSH
6844: LD_INT 3
6846: PUSH
6847: LD_INT 46
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: PUSH
6856: LD_INT 24
6858: PUSH
6859: LD_INT 3
6861: PUSH
6862: LD_INT 3
6864: PUSH
6865: LD_INT 43
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: PUSH
6874: LD_INT 24
6876: PUSH
6877: LD_INT 3
6879: PUSH
6880: LD_INT 3
6882: PUSH
6883: LD_INT 46
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: PUSH
6892: LD_INT 22
6894: PUSH
6895: LD_INT 3
6897: PUSH
6898: LD_INT 3
6900: PUSH
6901: LD_INT 45
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: PUSH
6910: LD_INT 22
6912: PUSH
6913: LD_INT 3
6915: PUSH
6916: LD_INT 3
6918: PUSH
6919: LD_INT 45
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
6936: LD_VAR 0 2
6940: PPUSH
6941: LD_VAR 0 3
6945: PPUSH
6946: CALL 71157 0 2
// end ; 3 :
6950: GO 7137
6952: LD_INT 3
6954: DOUBLE
6955: EQUAL
6956: IFTRUE 6960
6958: GO 7136
6960: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6961: LD_ADDR_VAR 0 3
6965: PUSH
6966: LD_INT 22
6968: PUSH
6969: LD_INT 3
6971: PUSH
6972: LD_INT 3
6974: PUSH
6975: LD_INT 43
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 24
6986: PUSH
6987: LD_INT 3
6989: PUSH
6990: LD_INT 3
6992: PUSH
6993: LD_INT 46
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: PUSH
7002: LD_INT 22
7004: PUSH
7005: LD_INT 3
7007: PUSH
7008: LD_INT 3
7010: PUSH
7011: LD_INT 43
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: PUSH
7020: LD_INT 24
7022: PUSH
7023: LD_INT 3
7025: PUSH
7026: LD_INT 3
7028: PUSH
7029: LD_INT 46
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: PUSH
7038: LD_INT 22
7040: PUSH
7041: LD_INT 3
7043: PUSH
7044: LD_INT 3
7046: PUSH
7047: LD_INT 45
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: PUSH
7056: LD_INT 22
7058: PUSH
7059: LD_INT 3
7061: PUSH
7062: LD_INT 3
7064: PUSH
7065: LD_INT 43
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: PUSH
7074: LD_INT 24
7076: PUSH
7077: LD_INT 3
7079: PUSH
7080: LD_INT 3
7082: PUSH
7083: LD_INT 46
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: PUSH
7092: LD_INT 22
7094: PUSH
7095: LD_INT 3
7097: PUSH
7098: LD_INT 3
7100: PUSH
7101: LD_INT 45
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: LIST
7119: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7120: LD_VAR 0 2
7124: PPUSH
7125: LD_VAR 0 3
7129: PPUSH
7130: CALL 71157 0 2
// end ; end ;
7134: GO 7137
7136: POP
// repeat wait ( 0 0$1 ) ;
7137: LD_INT 35
7139: PPUSH
7140: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
7144: LD_VAR 0 2
7148: PPUSH
7149: CALL 71505 0 1
7153: PUSH
7154: LD_INT 0
7156: EQUAL
7157: IFFALSE 7137
// wait ( 0 0$30 ) ;
7159: LD_INT 1050
7161: PPUSH
7162: CALL_OW 67
// _target := [ [ 86 , 77 ] , [ 63 , 38 ] ] ;
7166: LD_ADDR_VAR 0 5
7170: PUSH
7171: LD_INT 86
7173: PUSH
7174: LD_INT 77
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PUSH
7181: LD_INT 63
7183: PUSH
7184: LD_INT 38
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
7195: LD_ADDR_VAR 0 4
7199: PUSH
7200: LD_INT 0
7202: PUSH
7203: LD_INT 0
7205: PUSH
7206: LD_INT 0
7208: PUSH
7209: LD_INT 1
7211: PUSH
7212: LD_INT 0
7214: PUSH
7215: LD_INT 0
7217: PUSH
7218: LD_INT 0
7220: PUSH
7221: LD_INT 0
7223: PUSH
7224: LD_INT 1
7226: PUSH
7227: LD_INT 0
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
7242: LD_ADDR_VAR 0 6
7246: PUSH
7247: LD_EXP 79
7251: PUSH
7252: LD_VAR 0 2
7256: ARRAY
7257: PUSH
7258: LD_EXP 82
7262: PUSH
7263: LD_VAR 0 2
7267: ARRAY
7268: DIFF
7269: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
7270: LD_ADDR_EXP 79
7274: PUSH
7275: LD_EXP 79
7279: PPUSH
7280: LD_VAR 0 2
7284: PPUSH
7285: LD_EXP 79
7289: PUSH
7290: LD_VAR 0 2
7294: ARRAY
7295: PUSH
7296: LD_VAR 0 6
7300: DIFF
7301: PPUSH
7302: CALL_OW 1
7306: ST_TO_ADDR
// if not attackers then
7307: LD_VAR 0 6
7311: NOT
7312: IFFALSE 7316
// continue ;
7314: GO 6546
// repeat wait ( 0 0$1 ) ;
7316: LD_INT 35
7318: PPUSH
7319: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
7323: LD_VAR 0 6
7327: PPUSH
7328: LD_INT 60
7330: PUSH
7331: EMPTY
7332: LIST
7333: PPUSH
7334: CALL_OW 72
7338: NOT
7339: IFFALSE 7316
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
7341: LD_VAR 0 2
7345: PPUSH
7346: LD_VAR 0 6
7350: PPUSH
7351: LD_VAR 0 5
7355: PPUSH
7356: LD_VAR 0 4
7360: PPUSH
7361: CALL 71342 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
7365: LD_EXP 60
7369: PUSH
7370: LD_VAR 0 2
7374: ARRAY
7375: PPUSH
7376: LD_INT 50
7378: PUSH
7379: EMPTY
7380: LIST
7381: PPUSH
7382: CALL_OW 72
7386: NOT
7387: IFFALSE 6546
// end ;
7389: PPOPN 6
7391: END
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
7392: LD_INT 22
7394: PUSH
7395: LD_INT 3
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PUSH
7402: LD_INT 30
7404: PUSH
7405: LD_INT 3
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: PPUSH
7416: CALL_OW 69
7420: IFFALSE 8317
7422: GO 7424
7424: DISABLE
7425: LD_INT 0
7427: PPUSH
7428: PPUSH
7429: PPUSH
7430: PPUSH
7431: PPUSH
7432: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
7433: LD_INT 6300
7435: PUSH
7436: LD_INT 4200
7438: PUSH
7439: LD_INT 2100
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: LIST
7446: PUSH
7447: LD_OWVAR 67
7451: ARRAY
7452: PPUSH
7453: CALL_OW 67
// base := 1 ;
7457: LD_ADDR_VAR 0 2
7461: PUSH
7462: LD_INT 1
7464: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
7465: LD_INT 22
7467: PUSH
7468: LD_INT 3
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: PUSH
7475: LD_INT 30
7477: PUSH
7478: LD_INT 3
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: PPUSH
7489: CALL_OW 69
7493: NOT
7494: IFFALSE 7498
// continue ;
7496: GO 7433
// case Rand ( 1 , 3 ) of 1 :
7498: LD_INT 1
7500: PPUSH
7501: LD_INT 3
7503: PPUSH
7504: CALL_OW 12
7508: PUSH
7509: LD_INT 1
7511: DOUBLE
7512: EQUAL
7513: IFTRUE 7517
7515: GO 7693
7517: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7518: LD_ADDR_VAR 0 3
7522: PUSH
7523: LD_INT 22
7525: PUSH
7526: LD_INT 1
7528: PUSH
7529: LD_INT 3
7531: PUSH
7532: LD_INT 43
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: PUSH
7541: LD_INT 24
7543: PUSH
7544: LD_INT 1
7546: PUSH
7547: LD_INT 3
7549: PUSH
7550: LD_INT 46
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: PUSH
7559: LD_INT 24
7561: PUSH
7562: LD_INT 1
7564: PUSH
7565: LD_INT 3
7567: PUSH
7568: LD_INT 43
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: PUSH
7577: LD_INT 24
7579: PUSH
7580: LD_INT 1
7582: PUSH
7583: LD_INT 3
7585: PUSH
7586: LD_INT 46
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: PUSH
7595: LD_INT 22
7597: PUSH
7598: LD_INT 1
7600: PUSH
7601: LD_INT 3
7603: PUSH
7604: LD_INT 45
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: PUSH
7613: LD_INT 22
7615: PUSH
7616: LD_INT 1
7618: PUSH
7619: LD_INT 3
7621: PUSH
7622: LD_INT 43
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: PUSH
7631: LD_INT 24
7633: PUSH
7634: LD_INT 1
7636: PUSH
7637: LD_INT 3
7639: PUSH
7640: LD_INT 46
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: PUSH
7649: LD_INT 22
7651: PUSH
7652: LD_INT 1
7654: PUSH
7655: LD_INT 3
7657: PUSH
7658: LD_INT 45
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7677: LD_VAR 0 2
7681: PPUSH
7682: LD_VAR 0 3
7686: PPUSH
7687: CALL 71157 0 2
// end ; 2 :
7691: GO 8062
7693: LD_INT 2
7695: DOUBLE
7696: EQUAL
7697: IFTRUE 7701
7699: GO 7877
7701: POP
// begin tmp := [ [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7702: LD_ADDR_VAR 0 3
7706: PUSH
7707: LD_INT 24
7709: PUSH
7710: LD_INT 1
7712: PUSH
7713: LD_INT 3
7715: PUSH
7716: LD_INT 43
7718: PUSH
7719: EMPTY
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: PUSH
7725: LD_INT 24
7727: PUSH
7728: LD_INT 1
7730: PUSH
7731: LD_INT 3
7733: PUSH
7734: LD_INT 46
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: PUSH
7743: LD_INT 24
7745: PUSH
7746: LD_INT 1
7748: PUSH
7749: LD_INT 3
7751: PUSH
7752: LD_INT 43
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: PUSH
7761: LD_INT 24
7763: PUSH
7764: LD_INT 1
7766: PUSH
7767: LD_INT 3
7769: PUSH
7770: LD_INT 46
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: PUSH
7779: LD_INT 22
7781: PUSH
7782: LD_INT 1
7784: PUSH
7785: LD_INT 3
7787: PUSH
7788: LD_INT 45
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: PUSH
7797: LD_INT 22
7799: PUSH
7800: LD_INT 1
7802: PUSH
7803: LD_INT 3
7805: PUSH
7806: LD_INT 45
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: PUSH
7815: LD_INT 22
7817: PUSH
7818: LD_INT 1
7820: PUSH
7821: LD_INT 3
7823: PUSH
7824: LD_INT 45
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: PUSH
7833: LD_INT 22
7835: PUSH
7836: LD_INT 1
7838: PUSH
7839: LD_INT 3
7841: PUSH
7842: LD_INT 45
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7861: LD_VAR 0 2
7865: PPUSH
7866: LD_VAR 0 3
7870: PPUSH
7871: CALL 71157 0 2
// end ; 3 :
7875: GO 8062
7877: LD_INT 3
7879: DOUBLE
7880: EQUAL
7881: IFTRUE 7885
7883: GO 8061
7885: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7886: LD_ADDR_VAR 0 3
7890: PUSH
7891: LD_INT 22
7893: PUSH
7894: LD_INT 1
7896: PUSH
7897: LD_INT 3
7899: PUSH
7900: LD_INT 43
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: PUSH
7909: LD_INT 24
7911: PUSH
7912: LD_INT 1
7914: PUSH
7915: LD_INT 3
7917: PUSH
7918: LD_INT 46
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: PUSH
7927: LD_INT 22
7929: PUSH
7930: LD_INT 1
7932: PUSH
7933: LD_INT 3
7935: PUSH
7936: LD_INT 43
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: PUSH
7945: LD_INT 24
7947: PUSH
7948: LD_INT 1
7950: PUSH
7951: LD_INT 3
7953: PUSH
7954: LD_INT 46
7956: PUSH
7957: EMPTY
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: PUSH
7963: LD_INT 22
7965: PUSH
7966: LD_INT 1
7968: PUSH
7969: LD_INT 3
7971: PUSH
7972: LD_INT 45
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 22
7983: PUSH
7984: LD_INT 1
7986: PUSH
7987: LD_INT 3
7989: PUSH
7990: LD_INT 43
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: PUSH
7999: LD_INT 24
8001: PUSH
8002: LD_INT 1
8004: PUSH
8005: LD_INT 3
8007: PUSH
8008: LD_INT 46
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: PUSH
8017: LD_INT 22
8019: PUSH
8020: LD_INT 1
8022: PUSH
8023: LD_INT 3
8025: PUSH
8026: LD_INT 45
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: PUSH
8035: EMPTY
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
8045: LD_VAR 0 2
8049: PPUSH
8050: LD_VAR 0 3
8054: PPUSH
8055: CALL 71157 0 2
// end ; end ;
8059: GO 8062
8061: POP
// repeat wait ( 0 0$1 ) ;
8062: LD_INT 35
8064: PPUSH
8065: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 8 ;
8069: LD_VAR 0 2
8073: PPUSH
8074: LD_INT 1
8076: PPUSH
8077: CALL 72575 0 2
8081: PUSH
8082: LD_INT 8
8084: GREATEREQUAL
8085: IFFALSE 8062
// wait ( 0 0$30 ) ;
8087: LD_INT 1050
8089: PPUSH
8090: CALL_OW 67
// _target := [ [ 144 , 65 ] , [ 63 , 38 ] ] ;
8094: LD_ADDR_VAR 0 5
8098: PUSH
8099: LD_INT 144
8101: PUSH
8102: LD_INT 65
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: PUSH
8109: LD_INT 63
8111: PUSH
8112: LD_INT 38
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
8123: LD_ADDR_VAR 0 4
8127: PUSH
8128: LD_INT 0
8130: PUSH
8131: LD_INT 0
8133: PUSH
8134: LD_INT 0
8136: PUSH
8137: LD_INT 1
8139: PUSH
8140: LD_INT 0
8142: PUSH
8143: LD_INT 0
8145: PUSH
8146: LD_INT 0
8148: PUSH
8149: LD_INT 0
8151: PUSH
8152: LD_INT 1
8154: PUSH
8155: LD_INT 0
8157: PUSH
8158: EMPTY
8159: LIST
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
8170: LD_ADDR_VAR 0 6
8174: PUSH
8175: LD_EXP 79
8179: PUSH
8180: LD_VAR 0 2
8184: ARRAY
8185: PUSH
8186: LD_EXP 82
8190: PUSH
8191: LD_VAR 0 2
8195: ARRAY
8196: DIFF
8197: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
8198: LD_ADDR_EXP 79
8202: PUSH
8203: LD_EXP 79
8207: PPUSH
8208: LD_VAR 0 2
8212: PPUSH
8213: LD_EXP 79
8217: PUSH
8218: LD_VAR 0 2
8222: ARRAY
8223: PUSH
8224: LD_VAR 0 6
8228: DIFF
8229: PPUSH
8230: CALL_OW 1
8234: ST_TO_ADDR
// if not attackers then
8235: LD_VAR 0 6
8239: NOT
8240: IFFALSE 8244
// continue ;
8242: GO 7433
// repeat wait ( 0 0$1 ) ;
8244: LD_INT 35
8246: PPUSH
8247: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
8251: LD_VAR 0 6
8255: PPUSH
8256: LD_INT 60
8258: PUSH
8259: EMPTY
8260: LIST
8261: PPUSH
8262: CALL_OW 72
8266: NOT
8267: IFFALSE 8244
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
8269: LD_VAR 0 2
8273: PPUSH
8274: LD_VAR 0 6
8278: PPUSH
8279: LD_VAR 0 5
8283: PPUSH
8284: LD_VAR 0 4
8288: PPUSH
8289: CALL 71342 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
8293: LD_EXP 60
8297: PUSH
8298: LD_VAR 0 2
8302: ARRAY
8303: PPUSH
8304: LD_INT 50
8306: PUSH
8307: EMPTY
8308: LIST
8309: PPUSH
8310: CALL_OW 72
8314: NOT
8315: IFFALSE 7433
// end ;
8317: PPOPN 6
8319: END
// export RussiansDefeated ; every 0 0$1 trigger FirstAssaultRepelled and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
8320: LD_EXP 3
8324: PUSH
8325: LD_INT 22
8327: PUSH
8328: LD_INT 3
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: PUSH
8335: LD_INT 21
8337: PUSH
8338: LD_INT 1
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PPUSH
8349: CALL_OW 69
8353: PUSH
8354: LD_INT 0
8356: EQUAL
8357: AND
8358: IFFALSE 8371
8360: GO 8362
8362: DISABLE
// begin RussiansDefeated := true ;
8363: LD_ADDR_EXP 42
8367: PUSH
8368: LD_INT 1
8370: ST_TO_ADDR
// end ;
8371: END
// every 0 0$1 trigger FirstAssaultRepelled and not JMM_Arrived do var i , un , filter , soldiers , bazookas , vehs , vehicle , medics , squad , attackers , _target , flags ;
8372: LD_EXP 3
8376: PUSH
8377: LD_EXP 5
8381: NOT
8382: AND
8383: IFFALSE 9356
8385: GO 8387
8387: DISABLE
8388: LD_INT 0
8390: PPUSH
8391: PPUSH
8392: PPUSH
8393: PPUSH
8394: PPUSH
8395: PPUSH
8396: PPUSH
8397: PPUSH
8398: PPUSH
8399: PPUSH
8400: PPUSH
8401: PPUSH
// begin wait ( [ Rand ( 5 5$00 , 6 6$30 ) , Rand ( 4 4$30 , 5 5$30 ) , Rand ( 4 4$00 , 5 5$00 ) ] [ Difficulty ] ) ;
8402: LD_INT 10500
8404: PPUSH
8405: LD_INT 13650
8407: PPUSH
8408: CALL_OW 12
8412: PUSH
8413: LD_INT 9450
8415: PPUSH
8416: LD_INT 11550
8418: PPUSH
8419: CALL_OW 12
8423: PUSH
8424: LD_INT 8400
8426: PPUSH
8427: LD_INT 10500
8429: PPUSH
8430: CALL_OW 12
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: LIST
8439: PUSH
8440: LD_OWVAR 67
8444: ARRAY
8445: PPUSH
8446: CALL_OW 67
// filter := [ ] ;
8450: LD_ADDR_VAR 0 3
8454: PUSH
8455: EMPTY
8456: ST_TO_ADDR
// soldiers := [ Rand ( 2 , 3 ) , Rand ( 3 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
8457: LD_ADDR_VAR 0 4
8461: PUSH
8462: LD_INT 2
8464: PPUSH
8465: LD_INT 3
8467: PPUSH
8468: CALL_OW 12
8472: PUSH
8473: LD_INT 3
8475: PPUSH
8476: LD_INT 4
8478: PPUSH
8479: CALL_OW 12
8483: PUSH
8484: LD_INT 3
8486: PPUSH
8487: LD_INT 5
8489: PPUSH
8490: CALL_OW 12
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: LIST
8499: PUSH
8500: LD_OWVAR 67
8504: ARRAY
8505: ST_TO_ADDR
// bazookas := [ 1 , Rand ( 1 , 2 ) , Rand ( 2 , 3 ) ] [ Difficulty ] ;
8506: LD_ADDR_VAR 0 5
8510: PUSH
8511: LD_INT 1
8513: PUSH
8514: LD_INT 1
8516: PPUSH
8517: LD_INT 2
8519: PPUSH
8520: CALL_OW 12
8524: PUSH
8525: LD_INT 2
8527: PPUSH
8528: LD_INT 3
8530: PPUSH
8531: CALL_OW 12
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: LIST
8540: PUSH
8541: LD_OWVAR 67
8545: ARRAY
8546: ST_TO_ADDR
// vehs := [ Rand ( 2 , 3 ) , Rand ( 2 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
8547: LD_ADDR_VAR 0 6
8551: PUSH
8552: LD_INT 2
8554: PPUSH
8555: LD_INT 3
8557: PPUSH
8558: CALL_OW 12
8562: PUSH
8563: LD_INT 2
8565: PPUSH
8566: LD_INT 4
8568: PPUSH
8569: CALL_OW 12
8573: PUSH
8574: LD_INT 3
8576: PPUSH
8577: LD_INT 5
8579: PPUSH
8580: CALL_OW 12
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: LIST
8589: PUSH
8590: LD_OWVAR 67
8594: ARRAY
8595: ST_TO_ADDR
// medics := [ 1 , 2 , 2 ] [ Difficulty ] ;
8596: LD_ADDR_VAR 0 8
8600: PUSH
8601: LD_INT 1
8603: PUSH
8604: LD_INT 2
8606: PUSH
8607: LD_INT 2
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: LIST
8614: PUSH
8615: LD_OWVAR 67
8619: ARRAY
8620: ST_TO_ADDR
// uc_side := 3 ;
8621: LD_ADDR_OWVAR 20
8625: PUSH
8626: LD_INT 3
8628: ST_TO_ADDR
// uc_nation := nation_russian ;
8629: LD_ADDR_OWVAR 21
8633: PUSH
8634: LD_INT 3
8636: ST_TO_ADDR
// for i = 1 to soldiers do
8637: LD_ADDR_VAR 0 1
8641: PUSH
8642: DOUBLE
8643: LD_INT 1
8645: DEC
8646: ST_TO_ADDR
8647: LD_VAR 0 4
8651: PUSH
8652: FOR_TO
8653: IFFALSE 8695
// begin PrepareSoldier ( 0 , game_eskill ) ;
8655: LD_INT 0
8657: PPUSH
8658: LD_EXP 39
8662: PPUSH
8663: CALL_OW 381
// un := CreateHuman ;
8667: LD_ADDR_VAR 0 2
8671: PUSH
8672: CALL_OW 44
8676: ST_TO_ADDR
// filter := filter ^ un ;
8677: LD_ADDR_VAR 0 3
8681: PUSH
8682: LD_VAR 0 3
8686: PUSH
8687: LD_VAR 0 2
8691: ADD
8692: ST_TO_ADDR
// end ;
8693: GO 8652
8695: POP
8696: POP
// for i = 1 to bazookas do
8697: LD_ADDR_VAR 0 1
8701: PUSH
8702: DOUBLE
8703: LD_INT 1
8705: DEC
8706: ST_TO_ADDR
8707: LD_VAR 0 5
8711: PUSH
8712: FOR_TO
8713: IFFALSE 8763
// begin PrepareSoldier ( 0 , game_eskill ) ;
8715: LD_INT 0
8717: PPUSH
8718: LD_EXP 39
8722: PPUSH
8723: CALL_OW 381
// hc_class := class_bazooker ;
8727: LD_ADDR_OWVAR 28
8731: PUSH
8732: LD_INT 9
8734: ST_TO_ADDR
// un := CreateHuman ;
8735: LD_ADDR_VAR 0 2
8739: PUSH
8740: CALL_OW 44
8744: ST_TO_ADDR
// filter := filter ^ un ;
8745: LD_ADDR_VAR 0 3
8749: PUSH
8750: LD_VAR 0 3
8754: PUSH
8755: LD_VAR 0 2
8759: ADD
8760: ST_TO_ADDR
// end ;
8761: GO 8712
8763: POP
8764: POP
// for i = 1 to medics do
8765: LD_ADDR_VAR 0 1
8769: PUSH
8770: DOUBLE
8771: LD_INT 1
8773: DEC
8774: ST_TO_ADDR
8775: LD_VAR 0 8
8779: PUSH
8780: FOR_TO
8781: IFFALSE 8823
// begin PrepareScientist ( 0 , game_eskill ) ;
8783: LD_INT 0
8785: PPUSH
8786: LD_EXP 39
8790: PPUSH
8791: CALL_OW 384
// un := CreateHuman ;
8795: LD_ADDR_VAR 0 2
8799: PUSH
8800: CALL_OW 44
8804: ST_TO_ADDR
// filter := filter ^ un ;
8805: LD_ADDR_VAR 0 3
8809: PUSH
8810: LD_VAR 0 3
8814: PUSH
8815: LD_VAR 0 2
8819: ADD
8820: ST_TO_ADDR
// end ;
8821: GO 8780
8823: POP
8824: POP
// for i = 1 to vehs do
8825: LD_ADDR_VAR 0 1
8829: PUSH
8830: DOUBLE
8831: LD_INT 1
8833: DEC
8834: ST_TO_ADDR
8835: LD_VAR 0 6
8839: PUSH
8840: FOR_TO
8841: IFFALSE 9033
// begin case Rand ( 1 , 5 ) of 1 :
8843: LD_INT 1
8845: PPUSH
8846: LD_INT 5
8848: PPUSH
8849: CALL_OW 12
8853: PUSH
8854: LD_INT 1
8856: DOUBLE
8857: EQUAL
8858: IFTRUE 8862
8860: GO 8884
8862: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 2 :
8863: LD_INT 22
8865: PPUSH
8866: LD_INT 3
8868: PPUSH
8869: LD_INT 3
8871: PPUSH
8872: LD_INT 43
8874: PPUSH
8875: LD_INT 100
8877: PPUSH
8878: CALL 16006 0 5
8882: GO 9005
8884: LD_INT 2
8886: DOUBLE
8887: EQUAL
8888: IFTRUE 8892
8890: GO 8914
8892: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gun , 100 ) ; 3 :
8893: LD_INT 22
8895: PPUSH
8896: LD_INT 3
8898: PPUSH
8899: LD_INT 3
8901: PPUSH
8902: LD_INT 44
8904: PPUSH
8905: LD_INT 100
8907: PPUSH
8908: CALL 16006 0 5
8912: GO 9005
8914: LD_INT 3
8916: DOUBLE
8917: EQUAL
8918: IFTRUE 8922
8920: GO 8944
8922: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher , 100 ) ; 4 :
8923: LD_INT 22
8925: PPUSH
8926: LD_INT 3
8928: PPUSH
8929: LD_INT 3
8931: PPUSH
8932: LD_INT 45
8934: PPUSH
8935: LD_INT 100
8937: PPUSH
8938: CALL 16006 0 5
8942: GO 9005
8944: LD_INT 4
8946: DOUBLE
8947: EQUAL
8948: IFTRUE 8952
8950: GO 8974
8952: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 5 :
8953: LD_INT 24
8955: PPUSH
8956: LD_INT 3
8958: PPUSH
8959: LD_INT 3
8961: PPUSH
8962: LD_INT 43
8964: PPUSH
8965: LD_INT 100
8967: PPUSH
8968: CALL 16006 0 5
8972: GO 9005
8974: LD_INT 5
8976: DOUBLE
8977: EQUAL
8978: IFTRUE 8982
8980: GO 9004
8982: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun , 100 ) ; end ;
8983: LD_INT 24
8985: PPUSH
8986: LD_INT 3
8988: PPUSH
8989: LD_INT 3
8991: PPUSH
8992: LD_INT 46
8994: PPUSH
8995: LD_INT 100
8997: PPUSH
8998: CALL 16006 0 5
9002: GO 9005
9004: POP
// vehicle := CreateVehicle ;
9005: LD_ADDR_VAR 0 7
9009: PUSH
9010: CALL_OW 45
9014: ST_TO_ADDR
// filter := filter ^ vehicle ;
9015: LD_ADDR_VAR 0 3
9019: PUSH
9020: LD_VAR 0 3
9024: PUSH
9025: LD_VAR 0 7
9029: ADD
9030: ST_TO_ADDR
// end ;
9031: GO 8840
9033: POP
9034: POP
// for i = 1 to filter do
9035: LD_ADDR_VAR 0 1
9039: PUSH
9040: DOUBLE
9041: LD_INT 1
9043: DEC
9044: ST_TO_ADDR
9045: LD_VAR 0 3
9049: PUSH
9050: FOR_TO
9051: IFFALSE 9076
// PlaceUnitArea ( filter [ i ] , RUAttackSpawn1 , false ) ;
9053: LD_VAR 0 3
9057: PUSH
9058: LD_VAR 0 1
9062: ARRAY
9063: PPUSH
9064: LD_INT 14
9066: PPUSH
9067: LD_INT 0
9069: PPUSH
9070: CALL_OW 49
9074: GO 9050
9076: POP
9077: POP
// case Rand ( 1 , 3 ) of 1 :
9078: LD_INT 1
9080: PPUSH
9081: LD_INT 3
9083: PPUSH
9084: CALL_OW 12
9088: PUSH
9089: LD_INT 1
9091: DOUBLE
9092: EQUAL
9093: IFTRUE 9097
9095: GO 9151
9097: POP
// _target := [ [ 165 , 114 ] , [ 104 , 108 ] , [ 86 , 77 ] , [ 63 , 38 ] ] ; 2 :
9098: LD_ADDR_VAR 0 11
9102: PUSH
9103: LD_INT 165
9105: PUSH
9106: LD_INT 114
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: PUSH
9113: LD_INT 104
9115: PUSH
9116: LD_INT 108
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: PUSH
9123: LD_INT 86
9125: PUSH
9126: LD_INT 77
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: PUSH
9133: LD_INT 63
9135: PUSH
9136: LD_INT 38
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: ST_TO_ADDR
9149: GO 9276
9151: LD_INT 2
9153: DOUBLE
9154: EQUAL
9155: IFTRUE 9159
9157: GO 9213
9159: POP
// _target := [ [ 165 , 114 ] , [ 146 , 71 ] , [ 112 , 41 ] , [ 63 , 38 ] ] ; 3 :
9160: LD_ADDR_VAR 0 11
9164: PUSH
9165: LD_INT 165
9167: PUSH
9168: LD_INT 114
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: PUSH
9175: LD_INT 146
9177: PUSH
9178: LD_INT 71
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: PUSH
9185: LD_INT 112
9187: PUSH
9188: LD_INT 41
9190: PUSH
9191: EMPTY
9192: LIST
9193: LIST
9194: PUSH
9195: LD_INT 63
9197: PUSH
9198: LD_INT 38
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: ST_TO_ADDR
9211: GO 9276
9213: LD_INT 3
9215: DOUBLE
9216: EQUAL
9217: IFTRUE 9221
9219: GO 9275
9221: POP
// _target := [ [ 165 , 114 ] , [ 63 , 99 ] , [ 55 , 77 ] , [ 63 , 38 ] ] ; end ;
9222: LD_ADDR_VAR 0 11
9226: PUSH
9227: LD_INT 165
9229: PUSH
9230: LD_INT 114
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: PUSH
9237: LD_INT 63
9239: PUSH
9240: LD_INT 99
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: PUSH
9247: LD_INT 55
9249: PUSH
9250: LD_INT 77
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: PUSH
9257: LD_INT 63
9259: PUSH
9260: LD_INT 38
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: ST_TO_ADDR
9273: GO 9276
9275: POP
// attackers := filter ;
9276: LD_ADDR_VAR 0 10
9280: PUSH
9281: LD_VAR 0 3
9285: ST_TO_ADDR
// flags := [ 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 ] ;
9286: LD_ADDR_VAR 0 12
9290: PUSH
9291: LD_INT 0
9293: PUSH
9294: LD_INT 1
9296: PUSH
9297: LD_INT 0
9299: PUSH
9300: LD_INT 1
9302: PUSH
9303: LD_INT 1
9305: PUSH
9306: LD_INT 0
9308: PUSH
9309: LD_INT 0
9311: PUSH
9312: LD_INT 0
9314: PUSH
9315: LD_INT 1
9317: PUSH
9318: LD_INT 1
9320: PUSH
9321: EMPTY
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: ST_TO_ADDR
// MC_PrepareAttack ( 1 , attackers , _target , flags ) ;
9333: LD_INT 1
9335: PPUSH
9336: LD_VAR 0 10
9340: PPUSH
9341: LD_VAR 0 11
9345: PPUSH
9346: LD_VAR 0 12
9350: PPUSH
9351: CALL 71342 0 4
// enable ;
9355: ENABLE
// end ;
9356: PPOPN 12
9358: END
// every 0 0$1 do var i , tmp ;
9359: GO 9361
9361: DISABLE
9362: LD_INT 0
9364: PPUSH
9365: PPUSH
// begin enable ;
9366: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
9367: LD_ADDR_VAR 0 2
9371: PUSH
9372: LD_INT 3
9374: PUSH
9375: LD_INT 22
9377: PUSH
9378: LD_INT 1
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: LD_INT 32
9391: PUSH
9392: LD_INT 1
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: PPUSH
9403: CALL_OW 69
9407: ST_TO_ADDR
// if tmp then
9408: LD_VAR 0 2
9412: IFFALSE 9458
// for i in tmp do
9414: LD_ADDR_VAR 0 1
9418: PUSH
9419: LD_VAR 0 2
9423: PUSH
9424: FOR_IN
9425: IFFALSE 9456
// if GetFuel ( i ) < 3 then
9427: LD_VAR 0 1
9431: PPUSH
9432: CALL_OW 261
9436: PUSH
9437: LD_INT 3
9439: LESS
9440: IFFALSE 9454
// SetFuel ( i , 3 ) ;
9442: LD_VAR 0 1
9446: PPUSH
9447: LD_INT 3
9449: PPUSH
9450: CALL_OW 240
9454: GO 9424
9456: POP
9457: POP
// end ;
9458: PPOPN 2
9460: END
// every 0 0$1 trigger ( FilterUnitsInArea ( RU_Base_Area , [ f_side , 1 ] ) and not JMMArrival ) or ( FilterUnitsInArea ( US_BackOffArea , [ f_side , 1 ] ) and not FirstAssaultRepelled ) do var i , veh , tmp ;
9461: LD_INT 3
9463: PPUSH
9464: LD_INT 22
9466: PUSH
9467: LD_INT 1
9469: PUSH
9470: EMPTY
9471: LIST
9472: LIST
9473: PPUSH
9474: CALL_OW 70
9478: PUSH
9479: LD_EXP 40
9483: NOT
9484: AND
9485: PUSH
9486: LD_INT 10
9488: PPUSH
9489: LD_INT 22
9491: PUSH
9492: LD_INT 1
9494: PUSH
9495: EMPTY
9496: LIST
9497: LIST
9498: PPUSH
9499: CALL_OW 70
9503: PUSH
9504: LD_EXP 3
9508: NOT
9509: AND
9510: OR
9511: IFFALSE 9525
9513: GO 9515
9515: DISABLE
9516: LD_INT 0
9518: PPUSH
9519: PPUSH
9520: PPUSH
// begin Antirush ;
9521: CALL 9528 0 0
// end ;
9525: PPOPN 3
9527: END
// export function Antirush ; var i , veh , tmp , num ; begin
9528: LD_INT 0
9530: PPUSH
9531: PPUSH
9532: PPUSH
9533: PPUSH
9534: PPUSH
// tmp := [ ] ;
9535: LD_ADDR_VAR 0 4
9539: PUSH
9540: EMPTY
9541: ST_TO_ADDR
// if not FirstAssaultRepelled then
9542: LD_EXP 3
9546: NOT
9547: IFFALSE 9559
// num := 18 else
9549: LD_ADDR_VAR 0 5
9553: PUSH
9554: LD_INT 18
9556: ST_TO_ADDR
9557: GO 9567
// num := 12 ;
9559: LD_ADDR_VAR 0 5
9563: PUSH
9564: LD_INT 12
9566: ST_TO_ADDR
// num := num - [ 4 , 2 , 0 ] [ Difficulty ] ;
9567: LD_ADDR_VAR 0 5
9571: PUSH
9572: LD_VAR 0 5
9576: PUSH
9577: LD_INT 4
9579: PUSH
9580: LD_INT 2
9582: PUSH
9583: LD_INT 0
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: LIST
9590: PUSH
9591: LD_OWVAR 67
9595: ARRAY
9596: MINUS
9597: ST_TO_ADDR
// for i := 1 to num do
9598: LD_ADDR_VAR 0 2
9602: PUSH
9603: DOUBLE
9604: LD_INT 1
9606: DEC
9607: ST_TO_ADDR
9608: LD_VAR 0 5
9612: PUSH
9613: FOR_TO
9614: IFFALSE 9753
// begin uc_side := 3 ;
9616: LD_ADDR_OWVAR 20
9620: PUSH
9621: LD_INT 3
9623: ST_TO_ADDR
// uc_nation := 3 ;
9624: LD_ADDR_OWVAR 21
9628: PUSH
9629: LD_INT 3
9631: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_siberite , control_computer , [ ru_heavy_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] , 100 ) ;
9632: LD_INT 23
9634: PPUSH
9635: LD_INT 3
9637: PPUSH
9638: LD_INT 3
9640: PPUSH
9641: LD_INT 46
9643: PUSH
9644: LD_INT 43
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: PUSH
9651: LD_INT 1
9653: PPUSH
9654: LD_INT 2
9656: PPUSH
9657: CALL_OW 12
9661: ARRAY
9662: PPUSH
9663: LD_INT 100
9665: PPUSH
9666: CALL 16006 0 5
// veh := CreateVehicle ;
9670: LD_ADDR_VAR 0 3
9674: PUSH
9675: CALL_OW 45
9679: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
9680: LD_VAR 0 3
9684: PPUSH
9685: LD_INT 5
9687: PPUSH
9688: CALL_OW 233
// PlaceUnitXYR ( veh , 199 , 135 , 3 , false ) ;
9692: LD_VAR 0 3
9696: PPUSH
9697: LD_INT 199
9699: PPUSH
9700: LD_INT 135
9702: PPUSH
9703: LD_INT 3
9705: PPUSH
9706: LD_INT 0
9708: PPUSH
9709: CALL_OW 50
// tmp := tmp ^ veh ;
9713: LD_ADDR_VAR 0 4
9717: PUSH
9718: LD_VAR 0 4
9722: PUSH
9723: LD_VAR 0 3
9727: ADD
9728: ST_TO_ADDR
// ComMoveXY ( veh , 173 , 118 ) ;
9729: LD_VAR 0 3
9733: PPUSH
9734: LD_INT 173
9736: PPUSH
9737: LD_INT 118
9739: PPUSH
9740: CALL_OW 111
// wait ( 0 0$2 ) ;
9744: LD_INT 70
9746: PPUSH
9747: CALL_OW 67
// end ;
9751: GO 9613
9753: POP
9754: POP
// repeat wait ( 0 0$1 ) ;
9755: LD_INT 35
9757: PPUSH
9758: CALL_OW 67
// for i in tmp do
9762: LD_ADDR_VAR 0 2
9766: PUSH
9767: LD_VAR 0 4
9771: PUSH
9772: FOR_IN
9773: IFFALSE 9840
// if IsDead ( i ) then
9775: LD_VAR 0 2
9779: PPUSH
9780: CALL_OW 301
9784: IFFALSE 9804
// tmp := tmp diff i else
9786: LD_ADDR_VAR 0 4
9790: PUSH
9791: LD_VAR 0 4
9795: PUSH
9796: LD_VAR 0 2
9800: DIFF
9801: ST_TO_ADDR
9802: GO 9838
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
9804: LD_VAR 0 2
9808: PPUSH
9809: LD_INT 22
9811: PUSH
9812: LD_INT 1
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: PPUSH
9819: CALL_OW 69
9823: PPUSH
9824: LD_VAR 0 2
9828: PPUSH
9829: CALL_OW 74
9833: PPUSH
9834: CALL_OW 115
9838: GO 9772
9840: POP
9841: POP
// until not tmp ;
9842: LD_VAR 0 4
9846: NOT
9847: IFFALSE 9755
// end ; end_of_file
9849: LD_VAR 0 1
9853: RET
// export Losses ; on UnitDestroyed ( un ) do begin if un = Brighton then
9854: LD_VAR 0 1
9858: PUSH
9859: LD_EXP 8
9863: EQUAL
9864: IFFALSE 9880
// begin wait ( 0 0$1 ) ;
9866: LD_INT 35
9868: PPUSH
9869: CALL_OW 67
// YouLost ( Brighton ) ;
9873: LD_STRING Brighton
9875: PPUSH
9876: CALL_OW 104
// end ; if un = JMM then
9880: LD_VAR 0 1
9884: PUSH
9885: LD_EXP 36
9889: EQUAL
9890: IFFALSE 9906
// begin wait ( 0 0$1 ) ;
9892: LD_INT 35
9894: PPUSH
9895: CALL_OW 67
// YouLost ( JMM ) ;
9899: LD_STRING JMM
9901: PPUSH
9902: CALL_OW 104
// end ; if un = Megan then
9906: LD_VAR 0 1
9910: PUSH
9911: LD_EXP 10
9915: EQUAL
9916: IFFALSE 9930
// begin Say ( Brighton , DBrighton-MeganDeath ) ;
9918: LD_EXP 8
9922: PPUSH
9923: LD_STRING DBrighton-MeganDeath
9925: PPUSH
9926: CALL_OW 88
// end ; if un = Palmer then
9930: LD_VAR 0 1
9934: PUSH
9935: LD_EXP 9
9939: EQUAL
9940: IFFALSE 9954
// begin Say ( Brighton , DBrighton-PalmerDeath ) ;
9942: LD_EXP 8
9946: PPUSH
9947: LD_STRING DBrighton-PalmerDeath
9949: PPUSH
9950: CALL_OW 88
// end ; if un = Burlak then
9954: LD_VAR 0 1
9958: PUSH
9959: LD_EXP 18
9963: EQUAL
9964: IFFALSE 9996
// begin if JMM_Arrived then
9966: LD_EXP 5
9970: IFFALSE 9984
// Say ( JMM , DJMM-BurlakDead ) ;
9972: LD_EXP 36
9976: PPUSH
9977: LD_STRING DJMM-BurlakDead
9979: PPUSH
9980: CALL_OW 88
// Say ( Palmer , DSol-BurlakDead ) ;
9984: LD_EXP 9
9988: PPUSH
9989: LD_STRING DSol-BurlakDead
9991: PPUSH
9992: CALL_OW 88
// end ; if un = BetaA or un = BetaB then
9996: LD_VAR 0 1
10000: PUSH
10001: LD_INT 1
10003: EQUAL
10004: PUSH
10005: LD_VAR 0 1
10009: PUSH
10010: LD_INT 3
10012: EQUAL
10013: OR
10014: IFFALSE 10030
// begin wait ( 0 0$1 ) ;
10016: LD_INT 35
10018: PPUSH
10019: CALL_OW 67
// YouLost ( Depot ) ;
10023: LD_STRING Depot
10025: PPUSH
10026: CALL_OW 104
// end ; if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
10030: LD_VAR 0 1
10034: PPUSH
10035: CALL_OW 255
10039: PUSH
10040: LD_INT 1
10042: EQUAL
10043: PUSH
10044: LD_VAR 0 1
10048: PPUSH
10049: CALL_OW 247
10053: PUSH
10054: LD_INT 1
10056: EQUAL
10057: AND
10058: IFFALSE 10074
// Losses := Losses + 1 ;
10060: LD_ADDR_EXP 43
10064: PUSH
10065: LD_EXP 43
10069: PUSH
10070: LD_INT 1
10072: PLUS
10073: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
10074: LD_VAR 0 1
10078: PPUSH
10079: CALL 74549 0 1
// end ;
10083: PPOPN 1
10085: END
// on UnitGoesToRed ( un ) do begin if un = Yashin then
10086: LD_VAR 0 1
10090: PUSH
10091: LD_EXP 12
10095: EQUAL
10096: IFFALSE 10110
// ForceSay ( Yashin , DDeath-Yas-3 ) ;
10098: LD_EXP 12
10102: PPUSH
10103: LD_STRING DDeath-Yas-3
10105: PPUSH
10106: CALL_OW 91
// if un = Popov then
10110: LD_VAR 0 1
10114: PUSH
10115: LD_EXP 13
10119: EQUAL
10120: IFFALSE 10134
// ForceSay ( Popov , DDeath-Pop-3 ) ;
10122: LD_EXP 13
10126: PPUSH
10127: LD_STRING DDeath-Pop-3
10129: PPUSH
10130: CALL_OW 91
// if un = Gaydar then
10134: LD_VAR 0 1
10138: PUSH
10139: LD_EXP 14
10143: EQUAL
10144: IFFALSE 10158
// ForceSay ( Gaydar , DDeath-Gay-3 ) ;
10146: LD_EXP 14
10150: PPUSH
10151: LD_STRING DDeath-Gay-3
10153: PPUSH
10154: CALL_OW 91
// if un = Sevi then
10158: LD_VAR 0 1
10162: PUSH
10163: LD_EXP 15
10167: EQUAL
10168: IFFALSE 10182
// ForceSay ( Sevi , DDeath-Vse-3 ) ;
10170: LD_EXP 15
10174: PPUSH
10175: LD_STRING DDeath-Vse-3
10177: PPUSH
10178: CALL_OW 91
// end ;
10182: PPOPN 1
10184: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_laser then
10185: LD_VAR 0 1
10189: PUSH
10190: LD_INT 10
10192: EQUAL
10193: IFFALSE 10231
// begin Say ( Brighton , DBrighton-C1 ) ;
10195: LD_EXP 8
10199: PPUSH
10200: LD_STRING DBrighton-C1
10202: PPUSH
10203: CALL_OW 88
// Say ( Megan , DMegan-C1 ) ;
10207: LD_EXP 10
10211: PPUSH
10212: LD_STRING DMegan-C1
10214: PPUSH
10215: CALL_OW 88
// Say ( Brighton , DBrighton-C2 ) ;
10219: LD_EXP 8
10223: PPUSH
10224: LD_STRING DBrighton-C2
10226: PPUSH
10227: CALL_OW 88
// end ; MCE_ResearchComplete ( tech , lab ) ;
10231: LD_VAR 0 1
10235: PPUSH
10236: LD_VAR 0 2
10240: PPUSH
10241: CALL 74245 0 2
// end ;
10245: PPOPN 2
10247: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
10248: LD_VAR 0 1
10252: PPUSH
10253: LD_VAR 0 2
10257: PPUSH
10258: CALL 76883 0 2
// end ;
10262: PPOPN 2
10264: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
10265: LD_VAR 0 1
10269: PPUSH
10270: CALL 75951 0 1
// end ;
10274: PPOPN 1
10276: END
// export RUFirstDepot ; on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 then
10277: LD_VAR 0 1
10281: PPUSH
10282: CALL_OW 266
10286: PUSH
10287: LD_INT 0
10289: EQUAL
10290: PUSH
10291: LD_VAR 0 1
10295: PPUSH
10296: CALL_OW 255
10300: PUSH
10301: LD_INT 3
10303: EQUAL
10304: AND
10305: IFFALSE 10367
// begin SetResourceType ( GetBase ( b ) , mat_cans , 10000 ) ;
10307: LD_VAR 0 1
10311: PPUSH
10312: CALL_OW 274
10316: PPUSH
10317: LD_INT 1
10319: PPUSH
10320: LD_INT 10000
10322: PPUSH
10323: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 250 ) ;
10327: LD_VAR 0 1
10331: PPUSH
10332: CALL_OW 274
10336: PPUSH
10337: LD_INT 2
10339: PPUSH
10340: LD_INT 250
10342: PPUSH
10343: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_siberit , 100 ) ;
10347: LD_VAR 0 1
10351: PPUSH
10352: CALL_OW 274
10356: PPUSH
10357: LD_INT 3
10359: PPUSH
10360: LD_INT 100
10362: PPUSH
10363: CALL_OW 277
// end ; MCE_BuildingComplete ( b ) ;
10367: LD_VAR 0 1
10371: PPUSH
10372: CALL 76192 0 1
// end ;
10376: PPOPN 1
10378: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
10379: LD_VAR 0 1
10383: PPUSH
10384: LD_VAR 0 2
10388: PPUSH
10389: LD_VAR 0 3
10393: PPUSH
10394: LD_VAR 0 4
10398: PPUSH
10399: LD_VAR 0 5
10403: PPUSH
10404: CALL 73865 0 5
// end ;
10408: PPOPN 5
10410: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
10411: LD_VAR 0 1
10415: PPUSH
10416: LD_VAR 0 2
10420: PPUSH
10421: CALL 73461 0 2
// end ;
10425: PPOPN 2
10427: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
10428: LD_VAR 0 1
10432: PPUSH
10433: LD_VAR 0 2
10437: PPUSH
10438: LD_VAR 0 3
10442: PPUSH
10443: LD_VAR 0 4
10447: PPUSH
10448: CALL 73299 0 4
// end ;
10452: PPOPN 4
10454: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
10455: LD_VAR 0 1
10459: PPUSH
10460: LD_VAR 0 2
10464: PPUSH
10465: LD_VAR 0 3
10469: PPUSH
10470: CALL 73074 0 3
// end ;
10474: PPOPN 3
10476: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
10477: LD_VAR 0 1
10481: PPUSH
10482: LD_VAR 0 2
10486: PPUSH
10487: CALL 72959 0 2
// end ;
10491: PPOPN 2
10493: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
10494: LD_VAR 0 1
10498: PPUSH
10499: LD_VAR 0 2
10503: PPUSH
10504: CALL 77144 0 2
// end ;
10508: PPOPN 2
10510: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin if GetSide ( driver ) = 6 then
10511: LD_VAR 0 1
10515: PPUSH
10516: CALL_OW 255
10520: PUSH
10521: LD_INT 6
10523: EQUAL
10524: IFFALSE 10654
// begin if driver in [ Yashin , Sevi , Gaydar , Popov ] then
10526: LD_VAR 0 1
10530: PUSH
10531: LD_EXP 12
10535: PUSH
10536: LD_EXP 15
10540: PUSH
10541: LD_EXP 14
10545: PUSH
10546: LD_EXP 13
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: IN
10557: IFFALSE 10561
// exit ;
10559: GO 10678
// if AssaultStarted then
10561: LD_EXP 7
10565: IFFALSE 10639
// case Rand ( 1 , 4 ) of 1 .. 3 :
10567: LD_INT 1
10569: PPUSH
10570: LD_INT 4
10572: PPUSH
10573: CALL_OW 12
10577: PUSH
10578: LD_INT 1
10580: DOUBLE
10581: GREATEREQUAL
10582: IFFALSE 10590
10584: LD_INT 3
10586: DOUBLE
10587: LESSEQUAL
10588: IFTRUE 10592
10590: GO 10610
10592: POP
// ComAgressiveMove ( driver , 67 , 37 ) ; 4 :
10593: LD_VAR 0 1
10597: PPUSH
10598: LD_INT 67
10600: PPUSH
10601: LD_INT 37
10603: PPUSH
10604: CALL_OW 114
10608: GO 10637
10610: LD_INT 4
10612: DOUBLE
10613: EQUAL
10614: IFTRUE 10618
10616: GO 10636
10618: POP
// ComMoveXY ( driver , 120 , 131 ) ; end else
10619: LD_VAR 0 1
10623: PPUSH
10624: LD_INT 120
10626: PPUSH
10627: LD_INT 131
10629: PPUSH
10630: CALL_OW 111
10634: GO 10637
10636: POP
10637: GO 10654
// ComMoveXY ( driver , 120 , 131 ) ;
10639: LD_VAR 0 1
10643: PPUSH
10644: LD_INT 120
10646: PPUSH
10647: LD_INT 131
10649: PPUSH
10650: CALL_OW 111
// end ; MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
10654: LD_VAR 0 1
10658: PPUSH
10659: LD_VAR 0 2
10663: PPUSH
10664: LD_VAR 0 3
10668: PPUSH
10669: LD_VAR 0 4
10673: PPUSH
10674: CALL 77360 0 4
// end ;
10678: PPOPN 4
10680: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
10681: LD_VAR 0 1
10685: PPUSH
10686: LD_VAR 0 2
10690: PPUSH
10691: CALL 72768 0 2
// end ;
10695: PPOPN 2
10697: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10698: LD_VAR 0 1
10702: PPUSH
10703: CALL 88628 0 1
// end ; end_of_file
10707: PPOPN 1
10709: END
// every 0 0$1 trigger JMM_Arrived and RussiansDefeated do
10710: LD_EXP 5
10714: PUSH
10715: LD_EXP 42
10719: AND
10720: IFFALSE 10891
10722: GO 10724
10724: DISABLE
// begin wait ( 0 0$2 ) ;
10725: LD_INT 70
10727: PPUSH
10728: CALL_OW 67
// Say ( Brighton , DBrighton-G1 ) ;
10732: LD_EXP 8
10736: PPUSH
10737: LD_STRING DBrighton-G1
10739: PPUSH
10740: CALL_OW 88
// if Losses < 1 then
10744: LD_EXP 43
10748: PUSH
10749: LD_INT 1
10751: LESS
10752: IFFALSE 10766
// AddMedal ( Losses , 1 ) else
10754: LD_STRING Losses
10756: PPUSH
10757: LD_INT 1
10759: PPUSH
10760: CALL_OW 101
10764: GO 10799
// if Losses < 5 then
10766: LD_EXP 43
10770: PUSH
10771: LD_INT 5
10773: LESS
10774: IFFALSE 10788
// AddMedal ( Losses , 2 ) else
10776: LD_STRING Losses
10778: PPUSH
10779: LD_INT 2
10781: PPUSH
10782: CALL_OW 101
10786: GO 10799
// AddMedal ( Losses , - 1 ) ;
10788: LD_STRING Losses
10790: PPUSH
10791: LD_INT 1
10793: NEG
10794: PPUSH
10795: CALL_OW 101
// if LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
10799: LD_EXP 6
10803: PUSH
10804: LD_INT 10
10806: PPUSH
10807: LD_INT 1
10809: PPUSH
10810: CALL_OW 321
10814: PUSH
10815: LD_INT 2
10817: EQUAL
10818: AND
10819: IFFALSE 10833
// AddMedal ( Laser , 1 ) else
10821: LD_STRING Laser
10823: PPUSH
10824: LD_INT 1
10826: PPUSH
10827: CALL_OW 101
10831: GO 10880
// if not LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
10833: LD_EXP 6
10837: NOT
10838: PUSH
10839: LD_INT 10
10841: PPUSH
10842: LD_INT 1
10844: PPUSH
10845: CALL_OW 321
10849: PUSH
10850: LD_INT 2
10852: EQUAL
10853: AND
10854: IFFALSE 10869
// AddMedal ( Laser , - 1 ) else
10856: LD_STRING Laser
10858: PPUSH
10859: LD_INT 1
10861: NEG
10862: PPUSH
10863: CALL_OW 101
10867: GO 10880
// AddMedal ( Laser , - 2 ) ;
10869: LD_STRING Laser
10871: PPUSH
10872: LD_INT 2
10874: NEG
10875: PPUSH
10876: CALL_OW 101
// GiveMedals ( BaseMain ) ;
10880: LD_STRING BaseMain
10882: PPUSH
10883: CALL_OW 102
// YouWin ;
10887: CALL_OW 103
// end ; end_of_file
10891: END
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
10892: LD_INT 0
10894: PPUSH
10895: PPUSH
// area = ListEnvironmentArea ( area ) ;
10896: LD_ADDR_VAR 0 2
10900: PUSH
10901: LD_VAR 0 2
10905: PPUSH
10906: CALL_OW 353
10910: ST_TO_ADDR
// if bulldozer > 0 then
10911: LD_VAR 0 1
10915: PUSH
10916: LD_INT 0
10918: GREATER
10919: IFFALSE 11030
// for i = area downto 1 do
10921: LD_ADDR_VAR 0 4
10925: PUSH
10926: DOUBLE
10927: LD_VAR 0 2
10931: INC
10932: ST_TO_ADDR
10933: LD_INT 1
10935: PUSH
10936: FOR_DOWNTO
10937: IFFALSE 11028
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
10939: LD_VAR 0 2
10943: PUSH
10944: LD_VAR 0 4
10948: ARRAY
10949: PUSH
10950: LD_INT 1
10952: ARRAY
10953: PPUSH
10954: LD_VAR 0 2
10958: PUSH
10959: LD_VAR 0 4
10963: ARRAY
10964: PUSH
10965: LD_INT 2
10967: ARRAY
10968: PPUSH
10969: CALL_OW 351
10973: IFFALSE 11026
// if not HasTask ( bulldozer ) then
10975: LD_VAR 0 1
10979: PPUSH
10980: CALL_OW 314
10984: NOT
10985: IFFALSE 11026
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
10987: LD_VAR 0 1
10991: PPUSH
10992: LD_VAR 0 2
10996: PUSH
10997: LD_VAR 0 4
11001: ARRAY
11002: PUSH
11003: LD_INT 1
11005: ARRAY
11006: PPUSH
11007: LD_VAR 0 2
11011: PUSH
11012: LD_VAR 0 4
11016: ARRAY
11017: PUSH
11018: LD_INT 2
11020: ARRAY
11021: PPUSH
11022: CALL_OW 171
11026: GO 10936
11028: POP
11029: POP
// end ;
11030: LD_VAR 0 3
11034: RET
// export function ComMeeting ( team , area ) ; var i , tmp ; begin
11035: LD_INT 0
11037: PPUSH
11038: PPUSH
11039: PPUSH
// tmp := AreaToList ( area , 0 ) ;
11040: LD_ADDR_VAR 0 5
11044: PUSH
11045: LD_VAR 0 2
11049: PPUSH
11050: LD_INT 0
11052: PPUSH
11053: CALL_OW 517
11057: ST_TO_ADDR
// for i = 1 to team do
11058: LD_ADDR_VAR 0 4
11062: PUSH
11063: DOUBLE
11064: LD_INT 1
11066: DEC
11067: ST_TO_ADDR
11068: LD_VAR 0 1
11072: PUSH
11073: FOR_TO
11074: IFFALSE 11175
// begin if IsInUnit ( team [ i ] ) then
11076: LD_VAR 0 1
11080: PUSH
11081: LD_VAR 0 4
11085: ARRAY
11086: PPUSH
11087: CALL_OW 310
11091: IFFALSE 11108
// ComExitBuilding ( team [ i ] ) ;
11093: LD_VAR 0 1
11097: PUSH
11098: LD_VAR 0 4
11102: ARRAY
11103: PPUSH
11104: CALL_OW 122
// AddComMoveXY ( team [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
11108: LD_VAR 0 1
11112: PUSH
11113: LD_VAR 0 4
11117: ARRAY
11118: PPUSH
11119: LD_VAR 0 5
11123: PUSH
11124: LD_INT 1
11126: ARRAY
11127: PUSH
11128: LD_VAR 0 4
11132: ARRAY
11133: PPUSH
11134: LD_VAR 0 5
11138: PUSH
11139: LD_INT 2
11141: ARRAY
11142: PUSH
11143: LD_VAR 0 4
11147: ARRAY
11148: PPUSH
11149: CALL_OW 171
// AddComTurnUnit ( team [ i ] , Brighton ) ;
11153: LD_VAR 0 1
11157: PUSH
11158: LD_VAR 0 4
11162: ARRAY
11163: PPUSH
11164: LD_EXP 8
11168: PPUSH
11169: CALL_OW 179
// end ;
11173: GO 11073
11175: POP
11176: POP
// end ; end_of_file
11177: LD_VAR 0 3
11181: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
11182: LD_INT 0
11184: PPUSH
11185: PPUSH
// if exist_mode then
11186: LD_VAR 0 2
11190: IFFALSE 11215
// unit := CreateCharacter ( prefix & ident ) else
11192: LD_ADDR_VAR 0 5
11196: PUSH
11197: LD_VAR 0 3
11201: PUSH
11202: LD_VAR 0 1
11206: STR
11207: PPUSH
11208: CALL_OW 34
11212: ST_TO_ADDR
11213: GO 11230
// unit := NewCharacter ( ident ) ;
11215: LD_ADDR_VAR 0 5
11219: PUSH
11220: LD_VAR 0 1
11224: PPUSH
11225: CALL_OW 25
11229: ST_TO_ADDR
// result := unit ;
11230: LD_ADDR_VAR 0 4
11234: PUSH
11235: LD_VAR 0 5
11239: ST_TO_ADDR
// end ;
11240: LD_VAR 0 4
11244: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
11245: LD_INT 0
11247: PPUSH
11248: PPUSH
// if not side or not nation then
11249: LD_VAR 0 1
11253: NOT
11254: PUSH
11255: LD_VAR 0 2
11259: NOT
11260: OR
11261: IFFALSE 11265
// exit ;
11263: GO 12029
// case nation of nation_american :
11265: LD_VAR 0 2
11269: PUSH
11270: LD_INT 1
11272: DOUBLE
11273: EQUAL
11274: IFTRUE 11278
11276: GO 11492
11278: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
11279: LD_ADDR_VAR 0 4
11283: PUSH
11284: LD_INT 35
11286: PUSH
11287: LD_INT 45
11289: PUSH
11290: LD_INT 46
11292: PUSH
11293: LD_INT 47
11295: PUSH
11296: LD_INT 82
11298: PUSH
11299: LD_INT 83
11301: PUSH
11302: LD_INT 84
11304: PUSH
11305: LD_INT 85
11307: PUSH
11308: LD_INT 86
11310: PUSH
11311: LD_INT 1
11313: PUSH
11314: LD_INT 2
11316: PUSH
11317: LD_INT 6
11319: PUSH
11320: LD_INT 15
11322: PUSH
11323: LD_INT 16
11325: PUSH
11326: LD_INT 7
11328: PUSH
11329: LD_INT 12
11331: PUSH
11332: LD_INT 13
11334: PUSH
11335: LD_INT 10
11337: PUSH
11338: LD_INT 14
11340: PUSH
11341: LD_INT 20
11343: PUSH
11344: LD_INT 21
11346: PUSH
11347: LD_INT 22
11349: PUSH
11350: LD_INT 25
11352: PUSH
11353: LD_INT 32
11355: PUSH
11356: LD_INT 27
11358: PUSH
11359: LD_INT 36
11361: PUSH
11362: LD_INT 69
11364: PUSH
11365: LD_INT 39
11367: PUSH
11368: LD_INT 34
11370: PUSH
11371: LD_INT 40
11373: PUSH
11374: LD_INT 48
11376: PUSH
11377: LD_INT 49
11379: PUSH
11380: LD_INT 50
11382: PUSH
11383: LD_INT 51
11385: PUSH
11386: LD_INT 52
11388: PUSH
11389: LD_INT 53
11391: PUSH
11392: LD_INT 54
11394: PUSH
11395: LD_INT 55
11397: PUSH
11398: LD_INT 56
11400: PUSH
11401: LD_INT 57
11403: PUSH
11404: LD_INT 58
11406: PUSH
11407: LD_INT 59
11409: PUSH
11410: LD_INT 60
11412: PUSH
11413: LD_INT 61
11415: PUSH
11416: LD_INT 62
11418: PUSH
11419: LD_INT 80
11421: PUSH
11422: LD_INT 82
11424: PUSH
11425: LD_INT 83
11427: PUSH
11428: LD_INT 84
11430: PUSH
11431: LD_INT 85
11433: PUSH
11434: LD_INT 86
11436: PUSH
11437: EMPTY
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: ST_TO_ADDR
11490: GO 11953
11492: LD_INT 2
11494: DOUBLE
11495: EQUAL
11496: IFTRUE 11500
11498: GO 11722
11500: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
11501: LD_ADDR_VAR 0 4
11505: PUSH
11506: LD_INT 35
11508: PUSH
11509: LD_INT 45
11511: PUSH
11512: LD_INT 46
11514: PUSH
11515: LD_INT 47
11517: PUSH
11518: LD_INT 82
11520: PUSH
11521: LD_INT 83
11523: PUSH
11524: LD_INT 84
11526: PUSH
11527: LD_INT 85
11529: PUSH
11530: LD_INT 87
11532: PUSH
11533: LD_INT 70
11535: PUSH
11536: LD_INT 1
11538: PUSH
11539: LD_INT 11
11541: PUSH
11542: LD_INT 3
11544: PUSH
11545: LD_INT 4
11547: PUSH
11548: LD_INT 5
11550: PUSH
11551: LD_INT 6
11553: PUSH
11554: LD_INT 15
11556: PUSH
11557: LD_INT 18
11559: PUSH
11560: LD_INT 7
11562: PUSH
11563: LD_INT 17
11565: PUSH
11566: LD_INT 8
11568: PUSH
11569: LD_INT 20
11571: PUSH
11572: LD_INT 21
11574: PUSH
11575: LD_INT 22
11577: PUSH
11578: LD_INT 72
11580: PUSH
11581: LD_INT 26
11583: PUSH
11584: LD_INT 69
11586: PUSH
11587: LD_INT 39
11589: PUSH
11590: LD_INT 40
11592: PUSH
11593: LD_INT 41
11595: PUSH
11596: LD_INT 42
11598: PUSH
11599: LD_INT 43
11601: PUSH
11602: LD_INT 48
11604: PUSH
11605: LD_INT 49
11607: PUSH
11608: LD_INT 50
11610: PUSH
11611: LD_INT 51
11613: PUSH
11614: LD_INT 52
11616: PUSH
11617: LD_INT 53
11619: PUSH
11620: LD_INT 54
11622: PUSH
11623: LD_INT 55
11625: PUSH
11626: LD_INT 56
11628: PUSH
11629: LD_INT 60
11631: PUSH
11632: LD_INT 61
11634: PUSH
11635: LD_INT 62
11637: PUSH
11638: LD_INT 66
11640: PUSH
11641: LD_INT 67
11643: PUSH
11644: LD_INT 68
11646: PUSH
11647: LD_INT 81
11649: PUSH
11650: LD_INT 82
11652: PUSH
11653: LD_INT 83
11655: PUSH
11656: LD_INT 84
11658: PUSH
11659: LD_INT 85
11661: PUSH
11662: LD_INT 87
11664: PUSH
11665: EMPTY
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: ST_TO_ADDR
11720: GO 11953
11722: LD_INT 3
11724: DOUBLE
11725: EQUAL
11726: IFTRUE 11730
11728: GO 11952
11730: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
11731: LD_ADDR_VAR 0 4
11735: PUSH
11736: LD_INT 46
11738: PUSH
11739: LD_INT 47
11741: PUSH
11742: LD_INT 1
11744: PUSH
11745: LD_INT 2
11747: PUSH
11748: LD_INT 82
11750: PUSH
11751: LD_INT 83
11753: PUSH
11754: LD_INT 84
11756: PUSH
11757: LD_INT 85
11759: PUSH
11760: LD_INT 86
11762: PUSH
11763: LD_INT 11
11765: PUSH
11766: LD_INT 9
11768: PUSH
11769: LD_INT 20
11771: PUSH
11772: LD_INT 19
11774: PUSH
11775: LD_INT 21
11777: PUSH
11778: LD_INT 24
11780: PUSH
11781: LD_INT 22
11783: PUSH
11784: LD_INT 25
11786: PUSH
11787: LD_INT 28
11789: PUSH
11790: LD_INT 29
11792: PUSH
11793: LD_INT 30
11795: PUSH
11796: LD_INT 31
11798: PUSH
11799: LD_INT 37
11801: PUSH
11802: LD_INT 38
11804: PUSH
11805: LD_INT 32
11807: PUSH
11808: LD_INT 27
11810: PUSH
11811: LD_INT 33
11813: PUSH
11814: LD_INT 69
11816: PUSH
11817: LD_INT 39
11819: PUSH
11820: LD_INT 34
11822: PUSH
11823: LD_INT 40
11825: PUSH
11826: LD_INT 71
11828: PUSH
11829: LD_INT 23
11831: PUSH
11832: LD_INT 44
11834: PUSH
11835: LD_INT 48
11837: PUSH
11838: LD_INT 49
11840: PUSH
11841: LD_INT 50
11843: PUSH
11844: LD_INT 51
11846: PUSH
11847: LD_INT 52
11849: PUSH
11850: LD_INT 53
11852: PUSH
11853: LD_INT 54
11855: PUSH
11856: LD_INT 55
11858: PUSH
11859: LD_INT 56
11861: PUSH
11862: LD_INT 57
11864: PUSH
11865: LD_INT 58
11867: PUSH
11868: LD_INT 59
11870: PUSH
11871: LD_INT 63
11873: PUSH
11874: LD_INT 64
11876: PUSH
11877: LD_INT 65
11879: PUSH
11880: LD_INT 82
11882: PUSH
11883: LD_INT 83
11885: PUSH
11886: LD_INT 84
11888: PUSH
11889: LD_INT 85
11891: PUSH
11892: LD_INT 86
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: ST_TO_ADDR
11950: GO 11953
11952: POP
// if state > - 1 and state < 3 then
11953: LD_VAR 0 3
11957: PUSH
11958: LD_INT 1
11960: NEG
11961: GREATER
11962: PUSH
11963: LD_VAR 0 3
11967: PUSH
11968: LD_INT 3
11970: LESS
11971: AND
11972: IFFALSE 12029
// for i in result do
11974: LD_ADDR_VAR 0 5
11978: PUSH
11979: LD_VAR 0 4
11983: PUSH
11984: FOR_IN
11985: IFFALSE 12027
// if GetTech ( i , side ) <> state then
11987: LD_VAR 0 5
11991: PPUSH
11992: LD_VAR 0 1
11996: PPUSH
11997: CALL_OW 321
12001: PUSH
12002: LD_VAR 0 3
12006: NONEQUAL
12007: IFFALSE 12025
// result := result diff i ;
12009: LD_ADDR_VAR 0 4
12013: PUSH
12014: LD_VAR 0 4
12018: PUSH
12019: LD_VAR 0 5
12023: DIFF
12024: ST_TO_ADDR
12025: GO 11984
12027: POP
12028: POP
// end ;
12029: LD_VAR 0 4
12033: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
12034: LD_INT 0
12036: PPUSH
12037: PPUSH
12038: PPUSH
// result := true ;
12039: LD_ADDR_VAR 0 3
12043: PUSH
12044: LD_INT 1
12046: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
12047: LD_ADDR_VAR 0 5
12051: PUSH
12052: LD_VAR 0 2
12056: PPUSH
12057: CALL_OW 480
12061: ST_TO_ADDR
// if not tmp then
12062: LD_VAR 0 5
12066: NOT
12067: IFFALSE 12071
// exit ;
12069: GO 12120
// for i in tmp do
12071: LD_ADDR_VAR 0 4
12075: PUSH
12076: LD_VAR 0 5
12080: PUSH
12081: FOR_IN
12082: IFFALSE 12118
// if GetTech ( i , side ) <> state_researched then
12084: LD_VAR 0 4
12088: PPUSH
12089: LD_VAR 0 1
12093: PPUSH
12094: CALL_OW 321
12098: PUSH
12099: LD_INT 2
12101: NONEQUAL
12102: IFFALSE 12116
// begin result := false ;
12104: LD_ADDR_VAR 0 3
12108: PUSH
12109: LD_INT 0
12111: ST_TO_ADDR
// exit ;
12112: POP
12113: POP
12114: GO 12120
// end ;
12116: GO 12081
12118: POP
12119: POP
// end ;
12120: LD_VAR 0 3
12124: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
12125: LD_INT 0
12127: PPUSH
12128: PPUSH
12129: PPUSH
12130: PPUSH
12131: PPUSH
12132: PPUSH
12133: PPUSH
12134: PPUSH
12135: PPUSH
12136: PPUSH
12137: PPUSH
12138: PPUSH
12139: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
12140: LD_VAR 0 1
12144: NOT
12145: PUSH
12146: LD_VAR 0 1
12150: PPUSH
12151: CALL_OW 257
12155: PUSH
12156: LD_INT 9
12158: NONEQUAL
12159: OR
12160: IFFALSE 12164
// exit ;
12162: GO 12737
// side := GetSide ( unit ) ;
12164: LD_ADDR_VAR 0 9
12168: PUSH
12169: LD_VAR 0 1
12173: PPUSH
12174: CALL_OW 255
12178: ST_TO_ADDR
// tech_space := tech_spacanom ;
12179: LD_ADDR_VAR 0 12
12183: PUSH
12184: LD_INT 29
12186: ST_TO_ADDR
// tech_time := tech_taurad ;
12187: LD_ADDR_VAR 0 13
12191: PUSH
12192: LD_INT 28
12194: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
12195: LD_ADDR_VAR 0 11
12199: PUSH
12200: LD_VAR 0 1
12204: PPUSH
12205: CALL_OW 310
12209: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
12210: LD_VAR 0 11
12214: PPUSH
12215: CALL_OW 247
12219: PUSH
12220: LD_INT 2
12222: EQUAL
12223: IFFALSE 12227
// exit ;
12225: GO 12737
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12227: LD_ADDR_VAR 0 8
12231: PUSH
12232: LD_INT 81
12234: PUSH
12235: LD_VAR 0 9
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PUSH
12244: LD_INT 3
12246: PUSH
12247: LD_INT 21
12249: PUSH
12250: LD_INT 3
12252: PUSH
12253: EMPTY
12254: LIST
12255: LIST
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: PPUSH
12265: CALL_OW 69
12269: ST_TO_ADDR
// if not tmp then
12270: LD_VAR 0 8
12274: NOT
12275: IFFALSE 12279
// exit ;
12277: GO 12737
// if in_unit then
12279: LD_VAR 0 11
12283: IFFALSE 12307
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
12285: LD_ADDR_VAR 0 10
12289: PUSH
12290: LD_VAR 0 8
12294: PPUSH
12295: LD_VAR 0 11
12299: PPUSH
12300: CALL_OW 74
12304: ST_TO_ADDR
12305: GO 12327
// enemy := NearestUnitToUnit ( tmp , unit ) ;
12307: LD_ADDR_VAR 0 10
12311: PUSH
12312: LD_VAR 0 8
12316: PPUSH
12317: LD_VAR 0 1
12321: PPUSH
12322: CALL_OW 74
12326: ST_TO_ADDR
// if not enemy then
12327: LD_VAR 0 10
12331: NOT
12332: IFFALSE 12336
// exit ;
12334: GO 12737
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
12336: LD_VAR 0 11
12340: PUSH
12341: LD_VAR 0 11
12345: PPUSH
12346: LD_VAR 0 10
12350: PPUSH
12351: CALL_OW 296
12355: PUSH
12356: LD_INT 13
12358: GREATER
12359: AND
12360: PUSH
12361: LD_VAR 0 1
12365: PPUSH
12366: LD_VAR 0 10
12370: PPUSH
12371: CALL_OW 296
12375: PUSH
12376: LD_INT 12
12378: GREATER
12379: OR
12380: IFFALSE 12384
// exit ;
12382: GO 12737
// missile := [ 1 ] ;
12384: LD_ADDR_VAR 0 14
12388: PUSH
12389: LD_INT 1
12391: PUSH
12392: EMPTY
12393: LIST
12394: ST_TO_ADDR
// if Researched ( side , tech_space ) then
12395: LD_VAR 0 9
12399: PPUSH
12400: LD_VAR 0 12
12404: PPUSH
12405: CALL_OW 325
12409: IFFALSE 12438
// missile := Insert ( missile , missile + 1 , 2 ) ;
12411: LD_ADDR_VAR 0 14
12415: PUSH
12416: LD_VAR 0 14
12420: PPUSH
12421: LD_VAR 0 14
12425: PUSH
12426: LD_INT 1
12428: PLUS
12429: PPUSH
12430: LD_INT 2
12432: PPUSH
12433: CALL_OW 2
12437: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
12438: LD_VAR 0 9
12442: PPUSH
12443: LD_VAR 0 13
12447: PPUSH
12448: CALL_OW 325
12452: PUSH
12453: LD_VAR 0 10
12457: PPUSH
12458: CALL_OW 255
12462: PPUSH
12463: LD_VAR 0 13
12467: PPUSH
12468: CALL_OW 325
12472: NOT
12473: AND
12474: IFFALSE 12503
// missile := Insert ( missile , missile + 1 , 3 ) ;
12476: LD_ADDR_VAR 0 14
12480: PUSH
12481: LD_VAR 0 14
12485: PPUSH
12486: LD_VAR 0 14
12490: PUSH
12491: LD_INT 1
12493: PLUS
12494: PPUSH
12495: LD_INT 3
12497: PPUSH
12498: CALL_OW 2
12502: ST_TO_ADDR
// if missile < 2 then
12503: LD_VAR 0 14
12507: PUSH
12508: LD_INT 2
12510: LESS
12511: IFFALSE 12515
// exit ;
12513: GO 12737
// x := GetX ( enemy ) ;
12515: LD_ADDR_VAR 0 4
12519: PUSH
12520: LD_VAR 0 10
12524: PPUSH
12525: CALL_OW 250
12529: ST_TO_ADDR
// y := GetY ( enemy ) ;
12530: LD_ADDR_VAR 0 5
12534: PUSH
12535: LD_VAR 0 10
12539: PPUSH
12540: CALL_OW 251
12544: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
12545: LD_ADDR_VAR 0 6
12549: PUSH
12550: LD_VAR 0 4
12554: PUSH
12555: LD_INT 1
12557: NEG
12558: PPUSH
12559: LD_INT 1
12561: PPUSH
12562: CALL_OW 12
12566: PLUS
12567: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
12568: LD_ADDR_VAR 0 7
12572: PUSH
12573: LD_VAR 0 5
12577: PUSH
12578: LD_INT 1
12580: NEG
12581: PPUSH
12582: LD_INT 1
12584: PPUSH
12585: CALL_OW 12
12589: PLUS
12590: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12591: LD_VAR 0 6
12595: PPUSH
12596: LD_VAR 0 7
12600: PPUSH
12601: CALL_OW 488
12605: NOT
12606: IFFALSE 12628
// begin _x := x ;
12608: LD_ADDR_VAR 0 6
12612: PUSH
12613: LD_VAR 0 4
12617: ST_TO_ADDR
// _y := y ;
12618: LD_ADDR_VAR 0 7
12622: PUSH
12623: LD_VAR 0 5
12627: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
12628: LD_ADDR_VAR 0 3
12632: PUSH
12633: LD_INT 1
12635: PPUSH
12636: LD_VAR 0 14
12640: PPUSH
12641: CALL_OW 12
12645: ST_TO_ADDR
// case i of 1 :
12646: LD_VAR 0 3
12650: PUSH
12651: LD_INT 1
12653: DOUBLE
12654: EQUAL
12655: IFTRUE 12659
12657: GO 12676
12659: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
12660: LD_VAR 0 1
12664: PPUSH
12665: LD_VAR 0 10
12669: PPUSH
12670: CALL_OW 115
12674: GO 12737
12676: LD_INT 2
12678: DOUBLE
12679: EQUAL
12680: IFTRUE 12684
12682: GO 12706
12684: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
12685: LD_VAR 0 1
12689: PPUSH
12690: LD_VAR 0 6
12694: PPUSH
12695: LD_VAR 0 7
12699: PPUSH
12700: CALL_OW 153
12704: GO 12737
12706: LD_INT 3
12708: DOUBLE
12709: EQUAL
12710: IFTRUE 12714
12712: GO 12736
12714: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
12715: LD_VAR 0 1
12719: PPUSH
12720: LD_VAR 0 6
12724: PPUSH
12725: LD_VAR 0 7
12729: PPUSH
12730: CALL_OW 154
12734: GO 12737
12736: POP
// end ;
12737: LD_VAR 0 2
12741: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
12742: LD_INT 0
12744: PPUSH
12745: PPUSH
12746: PPUSH
12747: PPUSH
12748: PPUSH
12749: PPUSH
// if not unit or not building then
12750: LD_VAR 0 1
12754: NOT
12755: PUSH
12756: LD_VAR 0 2
12760: NOT
12761: OR
12762: IFFALSE 12766
// exit ;
12764: GO 12924
// x := GetX ( building ) ;
12766: LD_ADDR_VAR 0 5
12770: PUSH
12771: LD_VAR 0 2
12775: PPUSH
12776: CALL_OW 250
12780: ST_TO_ADDR
// y := GetY ( building ) ;
12781: LD_ADDR_VAR 0 6
12785: PUSH
12786: LD_VAR 0 2
12790: PPUSH
12791: CALL_OW 251
12795: ST_TO_ADDR
// for i = 0 to 5 do
12796: LD_ADDR_VAR 0 4
12800: PUSH
12801: DOUBLE
12802: LD_INT 0
12804: DEC
12805: ST_TO_ADDR
12806: LD_INT 5
12808: PUSH
12809: FOR_TO
12810: IFFALSE 12922
// begin _x := ShiftX ( x , i , 3 ) ;
12812: LD_ADDR_VAR 0 7
12816: PUSH
12817: LD_VAR 0 5
12821: PPUSH
12822: LD_VAR 0 4
12826: PPUSH
12827: LD_INT 3
12829: PPUSH
12830: CALL_OW 272
12834: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
12835: LD_ADDR_VAR 0 8
12839: PUSH
12840: LD_VAR 0 6
12844: PPUSH
12845: LD_VAR 0 4
12849: PPUSH
12850: LD_INT 3
12852: PPUSH
12853: CALL_OW 273
12857: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12858: LD_VAR 0 7
12862: PPUSH
12863: LD_VAR 0 8
12867: PPUSH
12868: CALL_OW 488
12872: NOT
12873: IFFALSE 12877
// continue ;
12875: GO 12809
// if HexInfo ( _x , _y ) = 0 then
12877: LD_VAR 0 7
12881: PPUSH
12882: LD_VAR 0 8
12886: PPUSH
12887: CALL_OW 428
12891: PUSH
12892: LD_INT 0
12894: EQUAL
12895: IFFALSE 12920
// begin ComMoveXY ( unit , _x , _y ) ;
12897: LD_VAR 0 1
12901: PPUSH
12902: LD_VAR 0 7
12906: PPUSH
12907: LD_VAR 0 8
12911: PPUSH
12912: CALL_OW 111
// exit ;
12916: POP
12917: POP
12918: GO 12924
// end ; end ;
12920: GO 12809
12922: POP
12923: POP
// end ;
12924: LD_VAR 0 3
12928: RET
// export function ScanBase ( side , base_area ) ; begin
12929: LD_INT 0
12931: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
12932: LD_ADDR_VAR 0 3
12936: PUSH
12937: LD_VAR 0 2
12941: PPUSH
12942: LD_INT 81
12944: PUSH
12945: LD_VAR 0 1
12949: PUSH
12950: EMPTY
12951: LIST
12952: LIST
12953: PPUSH
12954: CALL_OW 70
12958: ST_TO_ADDR
// end ;
12959: LD_VAR 0 3
12963: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
12964: LD_INT 0
12966: PPUSH
12967: PPUSH
12968: PPUSH
12969: PPUSH
// result := false ;
12970: LD_ADDR_VAR 0 2
12974: PUSH
12975: LD_INT 0
12977: ST_TO_ADDR
// side := GetSide ( unit ) ;
12978: LD_ADDR_VAR 0 3
12982: PUSH
12983: LD_VAR 0 1
12987: PPUSH
12988: CALL_OW 255
12992: ST_TO_ADDR
// nat := GetNation ( unit ) ;
12993: LD_ADDR_VAR 0 4
12997: PUSH
12998: LD_VAR 0 1
13002: PPUSH
13003: CALL_OW 248
13007: ST_TO_ADDR
// case nat of 1 :
13008: LD_VAR 0 4
13012: PUSH
13013: LD_INT 1
13015: DOUBLE
13016: EQUAL
13017: IFTRUE 13021
13019: GO 13032
13021: POP
// tech := tech_lassight ; 2 :
13022: LD_ADDR_VAR 0 5
13026: PUSH
13027: LD_INT 12
13029: ST_TO_ADDR
13030: GO 13071
13032: LD_INT 2
13034: DOUBLE
13035: EQUAL
13036: IFTRUE 13040
13038: GO 13051
13040: POP
// tech := tech_mortar ; 3 :
13041: LD_ADDR_VAR 0 5
13045: PUSH
13046: LD_INT 41
13048: ST_TO_ADDR
13049: GO 13071
13051: LD_INT 3
13053: DOUBLE
13054: EQUAL
13055: IFTRUE 13059
13057: GO 13070
13059: POP
// tech := tech_bazooka ; end ;
13060: LD_ADDR_VAR 0 5
13064: PUSH
13065: LD_INT 44
13067: ST_TO_ADDR
13068: GO 13071
13070: POP
// if Researched ( side , tech ) then
13071: LD_VAR 0 3
13075: PPUSH
13076: LD_VAR 0 5
13080: PPUSH
13081: CALL_OW 325
13085: IFFALSE 13112
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
13087: LD_ADDR_VAR 0 2
13091: PUSH
13092: LD_INT 5
13094: PUSH
13095: LD_INT 8
13097: PUSH
13098: LD_INT 9
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: LIST
13105: PUSH
13106: LD_VAR 0 4
13110: ARRAY
13111: ST_TO_ADDR
// end ;
13112: LD_VAR 0 2
13116: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
13117: LD_INT 0
13119: PPUSH
13120: PPUSH
13121: PPUSH
// if not mines then
13122: LD_VAR 0 2
13126: NOT
13127: IFFALSE 13131
// exit ;
13129: GO 13275
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13131: LD_ADDR_VAR 0 5
13135: PUSH
13136: LD_INT 81
13138: PUSH
13139: LD_VAR 0 1
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: PUSH
13148: LD_INT 3
13150: PUSH
13151: LD_INT 21
13153: PUSH
13154: LD_INT 3
13156: PUSH
13157: EMPTY
13158: LIST
13159: LIST
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PPUSH
13169: CALL_OW 69
13173: ST_TO_ADDR
// for i in mines do
13174: LD_ADDR_VAR 0 4
13178: PUSH
13179: LD_VAR 0 2
13183: PUSH
13184: FOR_IN
13185: IFFALSE 13273
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
13187: LD_VAR 0 4
13191: PUSH
13192: LD_INT 1
13194: ARRAY
13195: PPUSH
13196: LD_VAR 0 4
13200: PUSH
13201: LD_INT 2
13203: ARRAY
13204: PPUSH
13205: CALL_OW 458
13209: NOT
13210: IFFALSE 13214
// continue ;
13212: GO 13184
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
13214: LD_VAR 0 4
13218: PUSH
13219: LD_INT 1
13221: ARRAY
13222: PPUSH
13223: LD_VAR 0 4
13227: PUSH
13228: LD_INT 2
13230: ARRAY
13231: PPUSH
13232: CALL_OW 428
13236: PUSH
13237: LD_VAR 0 5
13241: IN
13242: IFFALSE 13271
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
13244: LD_VAR 0 4
13248: PUSH
13249: LD_INT 1
13251: ARRAY
13252: PPUSH
13253: LD_VAR 0 4
13257: PUSH
13258: LD_INT 2
13260: ARRAY
13261: PPUSH
13262: LD_VAR 0 1
13266: PPUSH
13267: CALL_OW 456
// end ;
13271: GO 13184
13273: POP
13274: POP
// end ;
13275: LD_VAR 0 3
13279: RET
// export function Count ( array ) ; var i ; begin
13280: LD_INT 0
13282: PPUSH
13283: PPUSH
// result := 0 ;
13284: LD_ADDR_VAR 0 2
13288: PUSH
13289: LD_INT 0
13291: ST_TO_ADDR
// for i in array do
13292: LD_ADDR_VAR 0 3
13296: PUSH
13297: LD_VAR 0 1
13301: PUSH
13302: FOR_IN
13303: IFFALSE 13327
// if i then
13305: LD_VAR 0 3
13309: IFFALSE 13325
// result := result + 1 ;
13311: LD_ADDR_VAR 0 2
13315: PUSH
13316: LD_VAR 0 2
13320: PUSH
13321: LD_INT 1
13323: PLUS
13324: ST_TO_ADDR
13325: GO 13302
13327: POP
13328: POP
// end ;
13329: LD_VAR 0 2
13333: RET
// export function IsEmpty ( building ) ; begin
13334: LD_INT 0
13336: PPUSH
// if not building then
13337: LD_VAR 0 1
13341: NOT
13342: IFFALSE 13346
// exit ;
13344: GO 13389
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
13346: LD_ADDR_VAR 0 2
13350: PUSH
13351: LD_VAR 0 1
13355: PUSH
13356: LD_INT 22
13358: PUSH
13359: LD_VAR 0 1
13363: PPUSH
13364: CALL_OW 255
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: PUSH
13373: LD_INT 58
13375: PUSH
13376: EMPTY
13377: LIST
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: PPUSH
13383: CALL_OW 69
13387: IN
13388: ST_TO_ADDR
// end ;
13389: LD_VAR 0 2
13393: RET
// export function IsNotFull ( building ) ; begin
13394: LD_INT 0
13396: PPUSH
// if not building then
13397: LD_VAR 0 1
13401: NOT
13402: IFFALSE 13406
// exit ;
13404: GO 13425
// result := UnitsInside ( building ) < 6 ;
13406: LD_ADDR_VAR 0 2
13410: PUSH
13411: LD_VAR 0 1
13415: PPUSH
13416: CALL_OW 313
13420: PUSH
13421: LD_INT 6
13423: LESS
13424: ST_TO_ADDR
// end ;
13425: LD_VAR 0 2
13429: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
13430: LD_INT 0
13432: PPUSH
13433: PPUSH
13434: PPUSH
13435: PPUSH
// tmp := [ ] ;
13436: LD_ADDR_VAR 0 3
13440: PUSH
13441: EMPTY
13442: ST_TO_ADDR
// list := [ ] ;
13443: LD_ADDR_VAR 0 5
13447: PUSH
13448: EMPTY
13449: ST_TO_ADDR
// for i = 16 to 25 do
13450: LD_ADDR_VAR 0 4
13454: PUSH
13455: DOUBLE
13456: LD_INT 16
13458: DEC
13459: ST_TO_ADDR
13460: LD_INT 25
13462: PUSH
13463: FOR_TO
13464: IFFALSE 13537
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
13466: LD_ADDR_VAR 0 3
13470: PUSH
13471: LD_VAR 0 3
13475: PUSH
13476: LD_INT 22
13478: PUSH
13479: LD_VAR 0 1
13483: PPUSH
13484: CALL_OW 255
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: PUSH
13493: LD_INT 91
13495: PUSH
13496: LD_VAR 0 1
13500: PUSH
13501: LD_INT 6
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: LIST
13508: PUSH
13509: LD_INT 30
13511: PUSH
13512: LD_VAR 0 4
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: LIST
13525: PUSH
13526: EMPTY
13527: LIST
13528: PPUSH
13529: CALL_OW 69
13533: ADD
13534: ST_TO_ADDR
13535: GO 13463
13537: POP
13538: POP
// for i = 1 to tmp do
13539: LD_ADDR_VAR 0 4
13543: PUSH
13544: DOUBLE
13545: LD_INT 1
13547: DEC
13548: ST_TO_ADDR
13549: LD_VAR 0 3
13553: PUSH
13554: FOR_TO
13555: IFFALSE 13643
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
13557: LD_ADDR_VAR 0 5
13561: PUSH
13562: LD_VAR 0 5
13566: PUSH
13567: LD_VAR 0 3
13571: PUSH
13572: LD_VAR 0 4
13576: ARRAY
13577: PPUSH
13578: CALL_OW 266
13582: PUSH
13583: LD_VAR 0 3
13587: PUSH
13588: LD_VAR 0 4
13592: ARRAY
13593: PPUSH
13594: CALL_OW 250
13598: PUSH
13599: LD_VAR 0 3
13603: PUSH
13604: LD_VAR 0 4
13608: ARRAY
13609: PPUSH
13610: CALL_OW 251
13614: PUSH
13615: LD_VAR 0 3
13619: PUSH
13620: LD_VAR 0 4
13624: ARRAY
13625: PPUSH
13626: CALL_OW 254
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: PUSH
13637: EMPTY
13638: LIST
13639: ADD
13640: ST_TO_ADDR
13641: GO 13554
13643: POP
13644: POP
// result := list ;
13645: LD_ADDR_VAR 0 2
13649: PUSH
13650: LD_VAR 0 5
13654: ST_TO_ADDR
// end ;
13655: LD_VAR 0 2
13659: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
13660: LD_INT 0
13662: PPUSH
13663: PPUSH
13664: PPUSH
13665: PPUSH
13666: PPUSH
13667: PPUSH
13668: PPUSH
// if not factory then
13669: LD_VAR 0 1
13673: NOT
13674: IFFALSE 13678
// exit ;
13676: GO 14271
// if control = control_apeman then
13678: LD_VAR 0 4
13682: PUSH
13683: LD_INT 5
13685: EQUAL
13686: IFFALSE 13795
// begin tmp := UnitsInside ( factory ) ;
13688: LD_ADDR_VAR 0 8
13692: PUSH
13693: LD_VAR 0 1
13697: PPUSH
13698: CALL_OW 313
13702: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
13703: LD_VAR 0 8
13707: PPUSH
13708: LD_INT 25
13710: PUSH
13711: LD_INT 12
13713: PUSH
13714: EMPTY
13715: LIST
13716: LIST
13717: PPUSH
13718: CALL_OW 72
13722: NOT
13723: IFFALSE 13733
// control := control_manual ;
13725: LD_ADDR_VAR 0 4
13729: PUSH
13730: LD_INT 1
13732: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
13733: LD_ADDR_VAR 0 8
13737: PUSH
13738: LD_VAR 0 1
13742: PPUSH
13743: CALL 13430 0 1
13747: ST_TO_ADDR
// if tmp then
13748: LD_VAR 0 8
13752: IFFALSE 13795
// begin for i in tmp do
13754: LD_ADDR_VAR 0 7
13758: PUSH
13759: LD_VAR 0 8
13763: PUSH
13764: FOR_IN
13765: IFFALSE 13793
// if i [ 1 ] = b_ext_radio then
13767: LD_VAR 0 7
13771: PUSH
13772: LD_INT 1
13774: ARRAY
13775: PUSH
13776: LD_INT 22
13778: EQUAL
13779: IFFALSE 13791
// begin control := control_remote ;
13781: LD_ADDR_VAR 0 4
13785: PUSH
13786: LD_INT 2
13788: ST_TO_ADDR
// break ;
13789: GO 13793
// end ;
13791: GO 13764
13793: POP
13794: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13795: LD_VAR 0 1
13799: PPUSH
13800: LD_VAR 0 2
13804: PPUSH
13805: LD_VAR 0 3
13809: PPUSH
13810: LD_VAR 0 4
13814: PPUSH
13815: LD_VAR 0 5
13819: PPUSH
13820: CALL_OW 448
13824: IFFALSE 13859
// begin result := [ chassis , engine , control , weapon ] ;
13826: LD_ADDR_VAR 0 6
13830: PUSH
13831: LD_VAR 0 2
13835: PUSH
13836: LD_VAR 0 3
13840: PUSH
13841: LD_VAR 0 4
13845: PUSH
13846: LD_VAR 0 5
13850: PUSH
13851: EMPTY
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: ST_TO_ADDR
// exit ;
13857: GO 14271
// end ; _chassis := AvailableChassisList ( factory ) ;
13859: LD_ADDR_VAR 0 9
13863: PUSH
13864: LD_VAR 0 1
13868: PPUSH
13869: CALL_OW 475
13873: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
13874: LD_ADDR_VAR 0 11
13878: PUSH
13879: LD_VAR 0 1
13883: PPUSH
13884: CALL_OW 476
13888: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
13889: LD_ADDR_VAR 0 12
13893: PUSH
13894: LD_VAR 0 1
13898: PPUSH
13899: CALL_OW 477
13903: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
13904: LD_ADDR_VAR 0 10
13908: PUSH
13909: LD_VAR 0 1
13913: PPUSH
13914: CALL_OW 478
13918: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
13919: LD_VAR 0 9
13923: NOT
13924: PUSH
13925: LD_VAR 0 11
13929: NOT
13930: OR
13931: PUSH
13932: LD_VAR 0 12
13936: NOT
13937: OR
13938: PUSH
13939: LD_VAR 0 10
13943: NOT
13944: OR
13945: IFFALSE 13980
// begin result := [ chassis , engine , control , weapon ] ;
13947: LD_ADDR_VAR 0 6
13951: PUSH
13952: LD_VAR 0 2
13956: PUSH
13957: LD_VAR 0 3
13961: PUSH
13962: LD_VAR 0 4
13966: PUSH
13967: LD_VAR 0 5
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: ST_TO_ADDR
// exit ;
13978: GO 14271
// end ; if not chassis in _chassis then
13980: LD_VAR 0 2
13984: PUSH
13985: LD_VAR 0 9
13989: IN
13990: NOT
13991: IFFALSE 14017
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
13993: LD_ADDR_VAR 0 2
13997: PUSH
13998: LD_VAR 0 9
14002: PUSH
14003: LD_INT 1
14005: PPUSH
14006: LD_VAR 0 9
14010: PPUSH
14011: CALL_OW 12
14015: ARRAY
14016: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
14017: LD_VAR 0 2
14021: PPUSH
14022: LD_VAR 0 3
14026: PPUSH
14027: CALL 14276 0 2
14031: NOT
14032: IFFALSE 14091
// repeat engine := _engine [ 1 ] ;
14034: LD_ADDR_VAR 0 3
14038: PUSH
14039: LD_VAR 0 11
14043: PUSH
14044: LD_INT 1
14046: ARRAY
14047: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
14048: LD_ADDR_VAR 0 11
14052: PUSH
14053: LD_VAR 0 11
14057: PPUSH
14058: LD_INT 1
14060: PPUSH
14061: CALL_OW 3
14065: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
14066: LD_VAR 0 2
14070: PPUSH
14071: LD_VAR 0 3
14075: PPUSH
14076: CALL 14276 0 2
14080: PUSH
14081: LD_VAR 0 11
14085: PUSH
14086: EMPTY
14087: EQUAL
14088: OR
14089: IFFALSE 14034
// if not control in _control then
14091: LD_VAR 0 4
14095: PUSH
14096: LD_VAR 0 12
14100: IN
14101: NOT
14102: IFFALSE 14128
// control := _control [ rand ( 1 , _control ) ] ;
14104: LD_ADDR_VAR 0 4
14108: PUSH
14109: LD_VAR 0 12
14113: PUSH
14114: LD_INT 1
14116: PPUSH
14117: LD_VAR 0 12
14121: PPUSH
14122: CALL_OW 12
14126: ARRAY
14127: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
14128: LD_VAR 0 2
14132: PPUSH
14133: LD_VAR 0 5
14137: PPUSH
14138: CALL 14496 0 2
14142: NOT
14143: IFFALSE 14202
// repeat weapon := _weapon [ 1 ] ;
14145: LD_ADDR_VAR 0 5
14149: PUSH
14150: LD_VAR 0 10
14154: PUSH
14155: LD_INT 1
14157: ARRAY
14158: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
14159: LD_ADDR_VAR 0 10
14163: PUSH
14164: LD_VAR 0 10
14168: PPUSH
14169: LD_INT 1
14171: PPUSH
14172: CALL_OW 3
14176: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
14177: LD_VAR 0 2
14181: PPUSH
14182: LD_VAR 0 5
14186: PPUSH
14187: CALL 14496 0 2
14191: PUSH
14192: LD_VAR 0 10
14196: PUSH
14197: EMPTY
14198: EQUAL
14199: OR
14200: IFFALSE 14145
// result := [ ] ;
14202: LD_ADDR_VAR 0 6
14206: PUSH
14207: EMPTY
14208: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
14209: LD_VAR 0 1
14213: PPUSH
14214: LD_VAR 0 2
14218: PPUSH
14219: LD_VAR 0 3
14223: PPUSH
14224: LD_VAR 0 4
14228: PPUSH
14229: LD_VAR 0 5
14233: PPUSH
14234: CALL_OW 448
14238: IFFALSE 14271
// result := [ chassis , engine , control , weapon ] ;
14240: LD_ADDR_VAR 0 6
14244: PUSH
14245: LD_VAR 0 2
14249: PUSH
14250: LD_VAR 0 3
14254: PUSH
14255: LD_VAR 0 4
14259: PUSH
14260: LD_VAR 0 5
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: ST_TO_ADDR
// end ;
14271: LD_VAR 0 6
14275: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
14276: LD_INT 0
14278: PPUSH
// if not chassis or not engine then
14279: LD_VAR 0 1
14283: NOT
14284: PUSH
14285: LD_VAR 0 2
14289: NOT
14290: OR
14291: IFFALSE 14295
// exit ;
14293: GO 14491
// case engine of engine_solar :
14295: LD_VAR 0 2
14299: PUSH
14300: LD_INT 2
14302: DOUBLE
14303: EQUAL
14304: IFTRUE 14308
14306: GO 14346
14308: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
14309: LD_ADDR_VAR 0 3
14313: PUSH
14314: LD_INT 11
14316: PUSH
14317: LD_INT 12
14319: PUSH
14320: LD_INT 13
14322: PUSH
14323: LD_INT 14
14325: PUSH
14326: LD_INT 1
14328: PUSH
14329: LD_INT 2
14331: PUSH
14332: LD_INT 3
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: ST_TO_ADDR
14344: GO 14475
14346: LD_INT 1
14348: DOUBLE
14349: EQUAL
14350: IFTRUE 14354
14352: GO 14416
14354: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
14355: LD_ADDR_VAR 0 3
14359: PUSH
14360: LD_INT 11
14362: PUSH
14363: LD_INT 12
14365: PUSH
14366: LD_INT 13
14368: PUSH
14369: LD_INT 14
14371: PUSH
14372: LD_INT 1
14374: PUSH
14375: LD_INT 2
14377: PUSH
14378: LD_INT 3
14380: PUSH
14381: LD_INT 4
14383: PUSH
14384: LD_INT 5
14386: PUSH
14387: LD_INT 21
14389: PUSH
14390: LD_INT 23
14392: PUSH
14393: LD_INT 22
14395: PUSH
14396: LD_INT 24
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: ST_TO_ADDR
14414: GO 14475
14416: LD_INT 3
14418: DOUBLE
14419: EQUAL
14420: IFTRUE 14424
14422: GO 14474
14424: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14425: LD_ADDR_VAR 0 3
14429: PUSH
14430: LD_INT 13
14432: PUSH
14433: LD_INT 14
14435: PUSH
14436: LD_INT 2
14438: PUSH
14439: LD_INT 3
14441: PUSH
14442: LD_INT 4
14444: PUSH
14445: LD_INT 5
14447: PUSH
14448: LD_INT 21
14450: PUSH
14451: LD_INT 22
14453: PUSH
14454: LD_INT 23
14456: PUSH
14457: LD_INT 24
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: ST_TO_ADDR
14472: GO 14475
14474: POP
// result := ( chassis in result ) ;
14475: LD_ADDR_VAR 0 3
14479: PUSH
14480: LD_VAR 0 1
14484: PUSH
14485: LD_VAR 0 3
14489: IN
14490: ST_TO_ADDR
// end ;
14491: LD_VAR 0 3
14495: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
14496: LD_INT 0
14498: PPUSH
// if not chassis or not weapon then
14499: LD_VAR 0 1
14503: NOT
14504: PUSH
14505: LD_VAR 0 2
14509: NOT
14510: OR
14511: IFFALSE 14515
// exit ;
14513: GO 15541
// case weapon of us_machine_gun :
14515: LD_VAR 0 2
14519: PUSH
14520: LD_INT 2
14522: DOUBLE
14523: EQUAL
14524: IFTRUE 14528
14526: GO 14558
14528: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
14529: LD_ADDR_VAR 0 3
14533: PUSH
14534: LD_INT 1
14536: PUSH
14537: LD_INT 2
14539: PUSH
14540: LD_INT 3
14542: PUSH
14543: LD_INT 4
14545: PUSH
14546: LD_INT 5
14548: PUSH
14549: EMPTY
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: ST_TO_ADDR
14556: GO 15525
14558: LD_INT 3
14560: DOUBLE
14561: EQUAL
14562: IFTRUE 14566
14564: GO 14596
14566: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
14567: LD_ADDR_VAR 0 3
14571: PUSH
14572: LD_INT 1
14574: PUSH
14575: LD_INT 2
14577: PUSH
14578: LD_INT 3
14580: PUSH
14581: LD_INT 4
14583: PUSH
14584: LD_INT 5
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: ST_TO_ADDR
14594: GO 15525
14596: LD_INT 11
14598: DOUBLE
14599: EQUAL
14600: IFTRUE 14604
14602: GO 14634
14604: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
14605: LD_ADDR_VAR 0 3
14609: PUSH
14610: LD_INT 1
14612: PUSH
14613: LD_INT 2
14615: PUSH
14616: LD_INT 3
14618: PUSH
14619: LD_INT 4
14621: PUSH
14622: LD_INT 5
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: ST_TO_ADDR
14632: GO 15525
14634: LD_INT 4
14636: DOUBLE
14637: EQUAL
14638: IFTRUE 14642
14640: GO 14668
14642: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
14643: LD_ADDR_VAR 0 3
14647: PUSH
14648: LD_INT 2
14650: PUSH
14651: LD_INT 3
14653: PUSH
14654: LD_INT 4
14656: PUSH
14657: LD_INT 5
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: ST_TO_ADDR
14666: GO 15525
14668: LD_INT 5
14670: DOUBLE
14671: EQUAL
14672: IFTRUE 14676
14674: GO 14702
14676: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
14677: LD_ADDR_VAR 0 3
14681: PUSH
14682: LD_INT 2
14684: PUSH
14685: LD_INT 3
14687: PUSH
14688: LD_INT 4
14690: PUSH
14691: LD_INT 5
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: ST_TO_ADDR
14700: GO 15525
14702: LD_INT 9
14704: DOUBLE
14705: EQUAL
14706: IFTRUE 14710
14708: GO 14736
14710: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
14711: LD_ADDR_VAR 0 3
14715: PUSH
14716: LD_INT 2
14718: PUSH
14719: LD_INT 3
14721: PUSH
14722: LD_INT 4
14724: PUSH
14725: LD_INT 5
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: ST_TO_ADDR
14734: GO 15525
14736: LD_INT 7
14738: DOUBLE
14739: EQUAL
14740: IFTRUE 14744
14742: GO 14770
14744: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
14745: LD_ADDR_VAR 0 3
14749: PUSH
14750: LD_INT 2
14752: PUSH
14753: LD_INT 3
14755: PUSH
14756: LD_INT 4
14758: PUSH
14759: LD_INT 5
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: ST_TO_ADDR
14768: GO 15525
14770: LD_INT 12
14772: DOUBLE
14773: EQUAL
14774: IFTRUE 14778
14776: GO 14804
14778: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
14779: LD_ADDR_VAR 0 3
14783: PUSH
14784: LD_INT 2
14786: PUSH
14787: LD_INT 3
14789: PUSH
14790: LD_INT 4
14792: PUSH
14793: LD_INT 5
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: ST_TO_ADDR
14802: GO 15525
14804: LD_INT 13
14806: DOUBLE
14807: EQUAL
14808: IFTRUE 14812
14810: GO 14838
14812: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
14813: LD_ADDR_VAR 0 3
14817: PUSH
14818: LD_INT 2
14820: PUSH
14821: LD_INT 3
14823: PUSH
14824: LD_INT 4
14826: PUSH
14827: LD_INT 5
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: ST_TO_ADDR
14836: GO 15525
14838: LD_INT 14
14840: DOUBLE
14841: EQUAL
14842: IFTRUE 14846
14844: GO 14864
14846: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
14847: LD_ADDR_VAR 0 3
14851: PUSH
14852: LD_INT 4
14854: PUSH
14855: LD_INT 5
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: ST_TO_ADDR
14862: GO 15525
14864: LD_INT 6
14866: DOUBLE
14867: EQUAL
14868: IFTRUE 14872
14870: GO 14890
14872: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
14873: LD_ADDR_VAR 0 3
14877: PUSH
14878: LD_INT 4
14880: PUSH
14881: LD_INT 5
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: ST_TO_ADDR
14888: GO 15525
14890: LD_INT 10
14892: DOUBLE
14893: EQUAL
14894: IFTRUE 14898
14896: GO 14916
14898: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
14899: LD_ADDR_VAR 0 3
14903: PUSH
14904: LD_INT 4
14906: PUSH
14907: LD_INT 5
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: ST_TO_ADDR
14914: GO 15525
14916: LD_INT 22
14918: DOUBLE
14919: EQUAL
14920: IFTRUE 14924
14922: GO 14950
14924: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
14925: LD_ADDR_VAR 0 3
14929: PUSH
14930: LD_INT 11
14932: PUSH
14933: LD_INT 12
14935: PUSH
14936: LD_INT 13
14938: PUSH
14939: LD_INT 14
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: ST_TO_ADDR
14948: GO 15525
14950: LD_INT 23
14952: DOUBLE
14953: EQUAL
14954: IFTRUE 14958
14956: GO 14984
14958: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
14959: LD_ADDR_VAR 0 3
14963: PUSH
14964: LD_INT 11
14966: PUSH
14967: LD_INT 12
14969: PUSH
14970: LD_INT 13
14972: PUSH
14973: LD_INT 14
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: ST_TO_ADDR
14982: GO 15525
14984: LD_INT 24
14986: DOUBLE
14987: EQUAL
14988: IFTRUE 14992
14990: GO 15018
14992: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
14993: LD_ADDR_VAR 0 3
14997: PUSH
14998: LD_INT 11
15000: PUSH
15001: LD_INT 12
15003: PUSH
15004: LD_INT 13
15006: PUSH
15007: LD_INT 14
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: ST_TO_ADDR
15016: GO 15525
15018: LD_INT 30
15020: DOUBLE
15021: EQUAL
15022: IFTRUE 15026
15024: GO 15052
15026: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
15027: LD_ADDR_VAR 0 3
15031: PUSH
15032: LD_INT 11
15034: PUSH
15035: LD_INT 12
15037: PUSH
15038: LD_INT 13
15040: PUSH
15041: LD_INT 14
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: ST_TO_ADDR
15050: GO 15525
15052: LD_INT 25
15054: DOUBLE
15055: EQUAL
15056: IFTRUE 15060
15058: GO 15078
15060: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
15061: LD_ADDR_VAR 0 3
15065: PUSH
15066: LD_INT 13
15068: PUSH
15069: LD_INT 14
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: ST_TO_ADDR
15076: GO 15525
15078: LD_INT 27
15080: DOUBLE
15081: EQUAL
15082: IFTRUE 15086
15084: GO 15104
15086: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
15087: LD_ADDR_VAR 0 3
15091: PUSH
15092: LD_INT 13
15094: PUSH
15095: LD_INT 14
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: ST_TO_ADDR
15102: GO 15525
15104: LD_INT 28
15106: DOUBLE
15107: EQUAL
15108: IFTRUE 15112
15110: GO 15130
15112: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
15113: LD_ADDR_VAR 0 3
15117: PUSH
15118: LD_INT 13
15120: PUSH
15121: LD_INT 14
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: ST_TO_ADDR
15128: GO 15525
15130: LD_INT 29
15132: DOUBLE
15133: EQUAL
15134: IFTRUE 15138
15136: GO 15156
15138: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
15139: LD_ADDR_VAR 0 3
15143: PUSH
15144: LD_INT 13
15146: PUSH
15147: LD_INT 14
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: ST_TO_ADDR
15154: GO 15525
15156: LD_INT 31
15158: DOUBLE
15159: EQUAL
15160: IFTRUE 15164
15162: GO 15182
15164: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
15165: LD_ADDR_VAR 0 3
15169: PUSH
15170: LD_INT 13
15172: PUSH
15173: LD_INT 14
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: ST_TO_ADDR
15180: GO 15525
15182: LD_INT 26
15184: DOUBLE
15185: EQUAL
15186: IFTRUE 15190
15188: GO 15208
15190: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
15191: LD_ADDR_VAR 0 3
15195: PUSH
15196: LD_INT 13
15198: PUSH
15199: LD_INT 14
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: ST_TO_ADDR
15206: GO 15525
15208: LD_INT 42
15210: DOUBLE
15211: EQUAL
15212: IFTRUE 15216
15214: GO 15242
15216: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
15217: LD_ADDR_VAR 0 3
15221: PUSH
15222: LD_INT 21
15224: PUSH
15225: LD_INT 22
15227: PUSH
15228: LD_INT 23
15230: PUSH
15231: LD_INT 24
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: ST_TO_ADDR
15240: GO 15525
15242: LD_INT 43
15244: DOUBLE
15245: EQUAL
15246: IFTRUE 15250
15248: GO 15276
15250: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
15251: LD_ADDR_VAR 0 3
15255: PUSH
15256: LD_INT 21
15258: PUSH
15259: LD_INT 22
15261: PUSH
15262: LD_INT 23
15264: PUSH
15265: LD_INT 24
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: ST_TO_ADDR
15274: GO 15525
15276: LD_INT 44
15278: DOUBLE
15279: EQUAL
15280: IFTRUE 15284
15282: GO 15310
15284: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
15285: LD_ADDR_VAR 0 3
15289: PUSH
15290: LD_INT 21
15292: PUSH
15293: LD_INT 22
15295: PUSH
15296: LD_INT 23
15298: PUSH
15299: LD_INT 24
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: ST_TO_ADDR
15308: GO 15525
15310: LD_INT 45
15312: DOUBLE
15313: EQUAL
15314: IFTRUE 15318
15316: GO 15344
15318: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
15319: LD_ADDR_VAR 0 3
15323: PUSH
15324: LD_INT 21
15326: PUSH
15327: LD_INT 22
15329: PUSH
15330: LD_INT 23
15332: PUSH
15333: LD_INT 24
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: ST_TO_ADDR
15342: GO 15525
15344: LD_INT 49
15346: DOUBLE
15347: EQUAL
15348: IFTRUE 15352
15350: GO 15378
15352: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
15353: LD_ADDR_VAR 0 3
15357: PUSH
15358: LD_INT 21
15360: PUSH
15361: LD_INT 22
15363: PUSH
15364: LD_INT 23
15366: PUSH
15367: LD_INT 24
15369: PUSH
15370: EMPTY
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: ST_TO_ADDR
15376: GO 15525
15378: LD_INT 51
15380: DOUBLE
15381: EQUAL
15382: IFTRUE 15386
15384: GO 15412
15386: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
15387: LD_ADDR_VAR 0 3
15391: PUSH
15392: LD_INT 21
15394: PUSH
15395: LD_INT 22
15397: PUSH
15398: LD_INT 23
15400: PUSH
15401: LD_INT 24
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: ST_TO_ADDR
15410: GO 15525
15412: LD_INT 52
15414: DOUBLE
15415: EQUAL
15416: IFTRUE 15420
15418: GO 15446
15420: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
15421: LD_ADDR_VAR 0 3
15425: PUSH
15426: LD_INT 21
15428: PUSH
15429: LD_INT 22
15431: PUSH
15432: LD_INT 23
15434: PUSH
15435: LD_INT 24
15437: PUSH
15438: EMPTY
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: ST_TO_ADDR
15444: GO 15525
15446: LD_INT 53
15448: DOUBLE
15449: EQUAL
15450: IFTRUE 15454
15452: GO 15472
15454: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
15455: LD_ADDR_VAR 0 3
15459: PUSH
15460: LD_INT 23
15462: PUSH
15463: LD_INT 24
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: ST_TO_ADDR
15470: GO 15525
15472: LD_INT 46
15474: DOUBLE
15475: EQUAL
15476: IFTRUE 15480
15478: GO 15498
15480: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
15481: LD_ADDR_VAR 0 3
15485: PUSH
15486: LD_INT 23
15488: PUSH
15489: LD_INT 24
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: ST_TO_ADDR
15496: GO 15525
15498: LD_INT 47
15500: DOUBLE
15501: EQUAL
15502: IFTRUE 15506
15504: GO 15524
15506: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15507: LD_ADDR_VAR 0 3
15511: PUSH
15512: LD_INT 23
15514: PUSH
15515: LD_INT 24
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: ST_TO_ADDR
15522: GO 15525
15524: POP
// result := ( chassis in result ) ;
15525: LD_ADDR_VAR 0 3
15529: PUSH
15530: LD_VAR 0 1
15534: PUSH
15535: LD_VAR 0 3
15539: IN
15540: ST_TO_ADDR
// end ;
15541: LD_VAR 0 3
15545: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
15546: LD_INT 0
15548: PPUSH
15549: PPUSH
15550: PPUSH
15551: PPUSH
15552: PPUSH
15553: PPUSH
15554: PPUSH
// result := array ;
15555: LD_ADDR_VAR 0 5
15559: PUSH
15560: LD_VAR 0 1
15564: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
15565: LD_VAR 0 1
15569: NOT
15570: PUSH
15571: LD_VAR 0 2
15575: NOT
15576: OR
15577: PUSH
15578: LD_VAR 0 3
15582: NOT
15583: OR
15584: PUSH
15585: LD_VAR 0 2
15589: PUSH
15590: LD_VAR 0 1
15594: GREATER
15595: OR
15596: PUSH
15597: LD_VAR 0 3
15601: PUSH
15602: LD_VAR 0 1
15606: GREATER
15607: OR
15608: IFFALSE 15612
// exit ;
15610: GO 15908
// if direction then
15612: LD_VAR 0 4
15616: IFFALSE 15680
// begin d := 1 ;
15618: LD_ADDR_VAR 0 9
15622: PUSH
15623: LD_INT 1
15625: ST_TO_ADDR
// if i_from > i_to then
15626: LD_VAR 0 2
15630: PUSH
15631: LD_VAR 0 3
15635: GREATER
15636: IFFALSE 15662
// length := ( array - i_from ) + i_to else
15638: LD_ADDR_VAR 0 11
15642: PUSH
15643: LD_VAR 0 1
15647: PUSH
15648: LD_VAR 0 2
15652: MINUS
15653: PUSH
15654: LD_VAR 0 3
15658: PLUS
15659: ST_TO_ADDR
15660: GO 15678
// length := i_to - i_from ;
15662: LD_ADDR_VAR 0 11
15666: PUSH
15667: LD_VAR 0 3
15671: PUSH
15672: LD_VAR 0 2
15676: MINUS
15677: ST_TO_ADDR
// end else
15678: GO 15741
// begin d := - 1 ;
15680: LD_ADDR_VAR 0 9
15684: PUSH
15685: LD_INT 1
15687: NEG
15688: ST_TO_ADDR
// if i_from > i_to then
15689: LD_VAR 0 2
15693: PUSH
15694: LD_VAR 0 3
15698: GREATER
15699: IFFALSE 15719
// length := i_from - i_to else
15701: LD_ADDR_VAR 0 11
15705: PUSH
15706: LD_VAR 0 2
15710: PUSH
15711: LD_VAR 0 3
15715: MINUS
15716: ST_TO_ADDR
15717: GO 15741
// length := ( array - i_to ) + i_from ;
15719: LD_ADDR_VAR 0 11
15723: PUSH
15724: LD_VAR 0 1
15728: PUSH
15729: LD_VAR 0 3
15733: MINUS
15734: PUSH
15735: LD_VAR 0 2
15739: PLUS
15740: ST_TO_ADDR
// end ; if not length then
15741: LD_VAR 0 11
15745: NOT
15746: IFFALSE 15750
// exit ;
15748: GO 15908
// tmp := array ;
15750: LD_ADDR_VAR 0 10
15754: PUSH
15755: LD_VAR 0 1
15759: ST_TO_ADDR
// for i = 1 to length do
15760: LD_ADDR_VAR 0 6
15764: PUSH
15765: DOUBLE
15766: LD_INT 1
15768: DEC
15769: ST_TO_ADDR
15770: LD_VAR 0 11
15774: PUSH
15775: FOR_TO
15776: IFFALSE 15896
// begin for j = 1 to array do
15778: LD_ADDR_VAR 0 7
15782: PUSH
15783: DOUBLE
15784: LD_INT 1
15786: DEC
15787: ST_TO_ADDR
15788: LD_VAR 0 1
15792: PUSH
15793: FOR_TO
15794: IFFALSE 15882
// begin k := j + d ;
15796: LD_ADDR_VAR 0 8
15800: PUSH
15801: LD_VAR 0 7
15805: PUSH
15806: LD_VAR 0 9
15810: PLUS
15811: ST_TO_ADDR
// if k > array then
15812: LD_VAR 0 8
15816: PUSH
15817: LD_VAR 0 1
15821: GREATER
15822: IFFALSE 15832
// k := 1 ;
15824: LD_ADDR_VAR 0 8
15828: PUSH
15829: LD_INT 1
15831: ST_TO_ADDR
// if not k then
15832: LD_VAR 0 8
15836: NOT
15837: IFFALSE 15849
// k := array ;
15839: LD_ADDR_VAR 0 8
15843: PUSH
15844: LD_VAR 0 1
15848: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
15849: LD_ADDR_VAR 0 10
15853: PUSH
15854: LD_VAR 0 10
15858: PPUSH
15859: LD_VAR 0 8
15863: PPUSH
15864: LD_VAR 0 1
15868: PUSH
15869: LD_VAR 0 7
15873: ARRAY
15874: PPUSH
15875: CALL_OW 1
15879: ST_TO_ADDR
// end ;
15880: GO 15793
15882: POP
15883: POP
// array := tmp ;
15884: LD_ADDR_VAR 0 1
15888: PUSH
15889: LD_VAR 0 10
15893: ST_TO_ADDR
// end ;
15894: GO 15775
15896: POP
15897: POP
// result := array ;
15898: LD_ADDR_VAR 0 5
15902: PUSH
15903: LD_VAR 0 1
15907: ST_TO_ADDR
// end ;
15908: LD_VAR 0 5
15912: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
15913: LD_INT 0
15915: PPUSH
15916: PPUSH
// result := 0 ;
15917: LD_ADDR_VAR 0 3
15921: PUSH
15922: LD_INT 0
15924: ST_TO_ADDR
// if not array or not value in array then
15925: LD_VAR 0 1
15929: NOT
15930: PUSH
15931: LD_VAR 0 2
15935: PUSH
15936: LD_VAR 0 1
15940: IN
15941: NOT
15942: OR
15943: IFFALSE 15947
// exit ;
15945: GO 16001
// for i = 1 to array do
15947: LD_ADDR_VAR 0 4
15951: PUSH
15952: DOUBLE
15953: LD_INT 1
15955: DEC
15956: ST_TO_ADDR
15957: LD_VAR 0 1
15961: PUSH
15962: FOR_TO
15963: IFFALSE 15999
// if value = array [ i ] then
15965: LD_VAR 0 2
15969: PUSH
15970: LD_VAR 0 1
15974: PUSH
15975: LD_VAR 0 4
15979: ARRAY
15980: EQUAL
15981: IFFALSE 15997
// begin result := i ;
15983: LD_ADDR_VAR 0 3
15987: PUSH
15988: LD_VAR 0 4
15992: ST_TO_ADDR
// exit ;
15993: POP
15994: POP
15995: GO 16001
// end ;
15997: GO 15962
15999: POP
16000: POP
// end ;
16001: LD_VAR 0 3
16005: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
16006: LD_INT 0
16008: PPUSH
// vc_chassis := chassis ;
16009: LD_ADDR_OWVAR 37
16013: PUSH
16014: LD_VAR 0 1
16018: ST_TO_ADDR
// vc_engine := engine ;
16019: LD_ADDR_OWVAR 39
16023: PUSH
16024: LD_VAR 0 2
16028: ST_TO_ADDR
// vc_control := control ;
16029: LD_ADDR_OWVAR 38
16033: PUSH
16034: LD_VAR 0 3
16038: ST_TO_ADDR
// vc_weapon := weapon ;
16039: LD_ADDR_OWVAR 40
16043: PUSH
16044: LD_VAR 0 4
16048: ST_TO_ADDR
// vc_fuel_battery := fuel ;
16049: LD_ADDR_OWVAR 41
16053: PUSH
16054: LD_VAR 0 5
16058: ST_TO_ADDR
// end ;
16059: LD_VAR 0 6
16063: RET
// export function WantPlant ( unit ) ; var task ; begin
16064: LD_INT 0
16066: PPUSH
16067: PPUSH
// result := false ;
16068: LD_ADDR_VAR 0 2
16072: PUSH
16073: LD_INT 0
16075: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
16076: LD_ADDR_VAR 0 3
16080: PUSH
16081: LD_VAR 0 1
16085: PPUSH
16086: CALL_OW 437
16090: ST_TO_ADDR
// if task then
16091: LD_VAR 0 3
16095: IFFALSE 16123
// if task [ 1 ] [ 1 ] = p then
16097: LD_VAR 0 3
16101: PUSH
16102: LD_INT 1
16104: ARRAY
16105: PUSH
16106: LD_INT 1
16108: ARRAY
16109: PUSH
16110: LD_STRING p
16112: EQUAL
16113: IFFALSE 16123
// result := true ;
16115: LD_ADDR_VAR 0 2
16119: PUSH
16120: LD_INT 1
16122: ST_TO_ADDR
// end ;
16123: LD_VAR 0 2
16127: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
16128: LD_INT 0
16130: PPUSH
16131: PPUSH
16132: PPUSH
16133: PPUSH
// if pos < 1 then
16134: LD_VAR 0 2
16138: PUSH
16139: LD_INT 1
16141: LESS
16142: IFFALSE 16146
// exit ;
16144: GO 16449
// if pos = 1 then
16146: LD_VAR 0 2
16150: PUSH
16151: LD_INT 1
16153: EQUAL
16154: IFFALSE 16187
// result := Replace ( arr , pos [ 1 ] , value ) else
16156: LD_ADDR_VAR 0 4
16160: PUSH
16161: LD_VAR 0 1
16165: PPUSH
16166: LD_VAR 0 2
16170: PUSH
16171: LD_INT 1
16173: ARRAY
16174: PPUSH
16175: LD_VAR 0 3
16179: PPUSH
16180: CALL_OW 1
16184: ST_TO_ADDR
16185: GO 16449
// begin tmp := arr ;
16187: LD_ADDR_VAR 0 6
16191: PUSH
16192: LD_VAR 0 1
16196: ST_TO_ADDR
// s_arr := [ tmp ] ;
16197: LD_ADDR_VAR 0 7
16201: PUSH
16202: LD_VAR 0 6
16206: PUSH
16207: EMPTY
16208: LIST
16209: ST_TO_ADDR
// for i = 1 to pos - 1 do
16210: LD_ADDR_VAR 0 5
16214: PUSH
16215: DOUBLE
16216: LD_INT 1
16218: DEC
16219: ST_TO_ADDR
16220: LD_VAR 0 2
16224: PUSH
16225: LD_INT 1
16227: MINUS
16228: PUSH
16229: FOR_TO
16230: IFFALSE 16275
// begin tmp := tmp [ pos [ i ] ] ;
16232: LD_ADDR_VAR 0 6
16236: PUSH
16237: LD_VAR 0 6
16241: PUSH
16242: LD_VAR 0 2
16246: PUSH
16247: LD_VAR 0 5
16251: ARRAY
16252: ARRAY
16253: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
16254: LD_ADDR_VAR 0 7
16258: PUSH
16259: LD_VAR 0 7
16263: PUSH
16264: LD_VAR 0 6
16268: PUSH
16269: EMPTY
16270: LIST
16271: ADD
16272: ST_TO_ADDR
// end ;
16273: GO 16229
16275: POP
16276: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
16277: LD_ADDR_VAR 0 6
16281: PUSH
16282: LD_VAR 0 6
16286: PPUSH
16287: LD_VAR 0 2
16291: PUSH
16292: LD_VAR 0 2
16296: ARRAY
16297: PPUSH
16298: LD_VAR 0 3
16302: PPUSH
16303: CALL_OW 1
16307: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
16308: LD_ADDR_VAR 0 7
16312: PUSH
16313: LD_VAR 0 7
16317: PPUSH
16318: LD_VAR 0 7
16322: PPUSH
16323: LD_VAR 0 6
16327: PPUSH
16328: CALL_OW 1
16332: ST_TO_ADDR
// for i = s_arr downto 2 do
16333: LD_ADDR_VAR 0 5
16337: PUSH
16338: DOUBLE
16339: LD_VAR 0 7
16343: INC
16344: ST_TO_ADDR
16345: LD_INT 2
16347: PUSH
16348: FOR_DOWNTO
16349: IFFALSE 16433
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
16351: LD_ADDR_VAR 0 6
16355: PUSH
16356: LD_VAR 0 7
16360: PUSH
16361: LD_VAR 0 5
16365: PUSH
16366: LD_INT 1
16368: MINUS
16369: ARRAY
16370: PPUSH
16371: LD_VAR 0 2
16375: PUSH
16376: LD_VAR 0 5
16380: PUSH
16381: LD_INT 1
16383: MINUS
16384: ARRAY
16385: PPUSH
16386: LD_VAR 0 7
16390: PUSH
16391: LD_VAR 0 5
16395: ARRAY
16396: PPUSH
16397: CALL_OW 1
16401: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
16402: LD_ADDR_VAR 0 7
16406: PUSH
16407: LD_VAR 0 7
16411: PPUSH
16412: LD_VAR 0 5
16416: PUSH
16417: LD_INT 1
16419: MINUS
16420: PPUSH
16421: LD_VAR 0 6
16425: PPUSH
16426: CALL_OW 1
16430: ST_TO_ADDR
// end ;
16431: GO 16348
16433: POP
16434: POP
// result := s_arr [ 1 ] ;
16435: LD_ADDR_VAR 0 4
16439: PUSH
16440: LD_VAR 0 7
16444: PUSH
16445: LD_INT 1
16447: ARRAY
16448: ST_TO_ADDR
// end ; end ;
16449: LD_VAR 0 4
16453: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
16454: LD_INT 0
16456: PPUSH
16457: PPUSH
// if not list then
16458: LD_VAR 0 1
16462: NOT
16463: IFFALSE 16467
// exit ;
16465: GO 16558
// i := list [ pos1 ] ;
16467: LD_ADDR_VAR 0 5
16471: PUSH
16472: LD_VAR 0 1
16476: PUSH
16477: LD_VAR 0 2
16481: ARRAY
16482: ST_TO_ADDR
// if not i then
16483: LD_VAR 0 5
16487: NOT
16488: IFFALSE 16492
// exit ;
16490: GO 16558
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
16492: LD_ADDR_VAR 0 1
16496: PUSH
16497: LD_VAR 0 1
16501: PPUSH
16502: LD_VAR 0 2
16506: PPUSH
16507: LD_VAR 0 1
16511: PUSH
16512: LD_VAR 0 3
16516: ARRAY
16517: PPUSH
16518: CALL_OW 1
16522: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
16523: LD_ADDR_VAR 0 1
16527: PUSH
16528: LD_VAR 0 1
16532: PPUSH
16533: LD_VAR 0 3
16537: PPUSH
16538: LD_VAR 0 5
16542: PPUSH
16543: CALL_OW 1
16547: ST_TO_ADDR
// result := list ;
16548: LD_ADDR_VAR 0 4
16552: PUSH
16553: LD_VAR 0 1
16557: ST_TO_ADDR
// end ;
16558: LD_VAR 0 4
16562: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
16563: LD_INT 0
16565: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
16566: LD_ADDR_VAR 0 5
16570: PUSH
16571: LD_VAR 0 1
16575: PPUSH
16576: CALL_OW 250
16580: PPUSH
16581: LD_VAR 0 1
16585: PPUSH
16586: CALL_OW 251
16590: PPUSH
16591: LD_VAR 0 2
16595: PPUSH
16596: LD_VAR 0 3
16600: PPUSH
16601: LD_VAR 0 4
16605: PPUSH
16606: CALL 16616 0 5
16610: ST_TO_ADDR
// end ;
16611: LD_VAR 0 5
16615: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
16616: LD_INT 0
16618: PPUSH
16619: PPUSH
16620: PPUSH
16621: PPUSH
// if not list then
16622: LD_VAR 0 3
16626: NOT
16627: IFFALSE 16631
// exit ;
16629: GO 17019
// result := [ ] ;
16631: LD_ADDR_VAR 0 6
16635: PUSH
16636: EMPTY
16637: ST_TO_ADDR
// for i in list do
16638: LD_ADDR_VAR 0 7
16642: PUSH
16643: LD_VAR 0 3
16647: PUSH
16648: FOR_IN
16649: IFFALSE 16851
// begin tmp := GetDistUnitXY ( i , x , y ) ;
16651: LD_ADDR_VAR 0 9
16655: PUSH
16656: LD_VAR 0 7
16660: PPUSH
16661: LD_VAR 0 1
16665: PPUSH
16666: LD_VAR 0 2
16670: PPUSH
16671: CALL_OW 297
16675: ST_TO_ADDR
// if not result then
16676: LD_VAR 0 6
16680: NOT
16681: IFFALSE 16707
// result := [ [ i , tmp ] ] else
16683: LD_ADDR_VAR 0 6
16687: PUSH
16688: LD_VAR 0 7
16692: PUSH
16693: LD_VAR 0 9
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: PUSH
16702: EMPTY
16703: LIST
16704: ST_TO_ADDR
16705: GO 16849
// begin if result [ result ] [ 2 ] < tmp then
16707: LD_VAR 0 6
16711: PUSH
16712: LD_VAR 0 6
16716: ARRAY
16717: PUSH
16718: LD_INT 2
16720: ARRAY
16721: PUSH
16722: LD_VAR 0 9
16726: LESS
16727: IFFALSE 16769
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
16729: LD_ADDR_VAR 0 6
16733: PUSH
16734: LD_VAR 0 6
16738: PPUSH
16739: LD_VAR 0 6
16743: PUSH
16744: LD_INT 1
16746: PLUS
16747: PPUSH
16748: LD_VAR 0 7
16752: PUSH
16753: LD_VAR 0 9
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: PPUSH
16762: CALL_OW 2
16766: ST_TO_ADDR
16767: GO 16849
// for j = 1 to result do
16769: LD_ADDR_VAR 0 8
16773: PUSH
16774: DOUBLE
16775: LD_INT 1
16777: DEC
16778: ST_TO_ADDR
16779: LD_VAR 0 6
16783: PUSH
16784: FOR_TO
16785: IFFALSE 16847
// begin if tmp < result [ j ] [ 2 ] then
16787: LD_VAR 0 9
16791: PUSH
16792: LD_VAR 0 6
16796: PUSH
16797: LD_VAR 0 8
16801: ARRAY
16802: PUSH
16803: LD_INT 2
16805: ARRAY
16806: LESS
16807: IFFALSE 16845
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16809: LD_ADDR_VAR 0 6
16813: PUSH
16814: LD_VAR 0 6
16818: PPUSH
16819: LD_VAR 0 8
16823: PPUSH
16824: LD_VAR 0 7
16828: PUSH
16829: LD_VAR 0 9
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: PPUSH
16838: CALL_OW 2
16842: ST_TO_ADDR
// break ;
16843: GO 16847
// end ; end ;
16845: GO 16784
16847: POP
16848: POP
// end ; end ;
16849: GO 16648
16851: POP
16852: POP
// if result and not asc then
16853: LD_VAR 0 6
16857: PUSH
16858: LD_VAR 0 4
16862: NOT
16863: AND
16864: IFFALSE 16939
// begin tmp := result ;
16866: LD_ADDR_VAR 0 9
16870: PUSH
16871: LD_VAR 0 6
16875: ST_TO_ADDR
// for i = tmp downto 1 do
16876: LD_ADDR_VAR 0 7
16880: PUSH
16881: DOUBLE
16882: LD_VAR 0 9
16886: INC
16887: ST_TO_ADDR
16888: LD_INT 1
16890: PUSH
16891: FOR_DOWNTO
16892: IFFALSE 16937
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16894: LD_ADDR_VAR 0 6
16898: PUSH
16899: LD_VAR 0 6
16903: PPUSH
16904: LD_VAR 0 9
16908: PUSH
16909: LD_VAR 0 7
16913: MINUS
16914: PUSH
16915: LD_INT 1
16917: PLUS
16918: PPUSH
16919: LD_VAR 0 9
16923: PUSH
16924: LD_VAR 0 7
16928: ARRAY
16929: PPUSH
16930: CALL_OW 1
16934: ST_TO_ADDR
16935: GO 16891
16937: POP
16938: POP
// end ; tmp := [ ] ;
16939: LD_ADDR_VAR 0 9
16943: PUSH
16944: EMPTY
16945: ST_TO_ADDR
// if mode then
16946: LD_VAR 0 5
16950: IFFALSE 17019
// begin for i = 1 to result do
16952: LD_ADDR_VAR 0 7
16956: PUSH
16957: DOUBLE
16958: LD_INT 1
16960: DEC
16961: ST_TO_ADDR
16962: LD_VAR 0 6
16966: PUSH
16967: FOR_TO
16968: IFFALSE 17007
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
16970: LD_ADDR_VAR 0 9
16974: PUSH
16975: LD_VAR 0 9
16979: PPUSH
16980: LD_VAR 0 7
16984: PPUSH
16985: LD_VAR 0 6
16989: PUSH
16990: LD_VAR 0 7
16994: ARRAY
16995: PUSH
16996: LD_INT 1
16998: ARRAY
16999: PPUSH
17000: CALL_OW 1
17004: ST_TO_ADDR
17005: GO 16967
17007: POP
17008: POP
// result := tmp ;
17009: LD_ADDR_VAR 0 6
17013: PUSH
17014: LD_VAR 0 9
17018: ST_TO_ADDR
// end ; end ;
17019: LD_VAR 0 6
17023: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
17024: LD_INT 0
17026: PPUSH
17027: PPUSH
17028: PPUSH
17029: PPUSH
17030: PPUSH
17031: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
17032: LD_ADDR_VAR 0 5
17036: PUSH
17037: LD_INT 0
17039: PUSH
17040: LD_INT 0
17042: PUSH
17043: LD_INT 0
17045: PUSH
17046: EMPTY
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: ST_TO_ADDR
// if not x or not y then
17054: LD_VAR 0 2
17058: NOT
17059: PUSH
17060: LD_VAR 0 3
17064: NOT
17065: OR
17066: IFFALSE 17070
// exit ;
17068: GO 18716
// if not range then
17070: LD_VAR 0 4
17074: NOT
17075: IFFALSE 17085
// range := 10 ;
17077: LD_ADDR_VAR 0 4
17081: PUSH
17082: LD_INT 10
17084: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17085: LD_ADDR_VAR 0 8
17089: PUSH
17090: LD_INT 81
17092: PUSH
17093: LD_VAR 0 1
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: PUSH
17102: LD_INT 92
17104: PUSH
17105: LD_VAR 0 2
17109: PUSH
17110: LD_VAR 0 3
17114: PUSH
17115: LD_VAR 0 4
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: PUSH
17126: LD_INT 3
17128: PUSH
17129: LD_INT 21
17131: PUSH
17132: LD_INT 3
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: LIST
17147: PPUSH
17148: CALL_OW 69
17152: ST_TO_ADDR
// if not tmp then
17153: LD_VAR 0 8
17157: NOT
17158: IFFALSE 17162
// exit ;
17160: GO 18716
// for i in tmp do
17162: LD_ADDR_VAR 0 6
17166: PUSH
17167: LD_VAR 0 8
17171: PUSH
17172: FOR_IN
17173: IFFALSE 18691
// begin points := [ 0 , 0 , 0 ] ;
17175: LD_ADDR_VAR 0 9
17179: PUSH
17180: LD_INT 0
17182: PUSH
17183: LD_INT 0
17185: PUSH
17186: LD_INT 0
17188: PUSH
17189: EMPTY
17190: LIST
17191: LIST
17192: LIST
17193: ST_TO_ADDR
// bpoints := 1 ;
17194: LD_ADDR_VAR 0 10
17198: PUSH
17199: LD_INT 1
17201: ST_TO_ADDR
// case GetType ( i ) of unit_human :
17202: LD_VAR 0 6
17206: PPUSH
17207: CALL_OW 247
17211: PUSH
17212: LD_INT 1
17214: DOUBLE
17215: EQUAL
17216: IFTRUE 17220
17218: GO 17798
17220: POP
// begin if GetClass ( i ) = 1 then
17221: LD_VAR 0 6
17225: PPUSH
17226: CALL_OW 257
17230: PUSH
17231: LD_INT 1
17233: EQUAL
17234: IFFALSE 17255
// points := [ 10 , 5 , 3 ] ;
17236: LD_ADDR_VAR 0 9
17240: PUSH
17241: LD_INT 10
17243: PUSH
17244: LD_INT 5
17246: PUSH
17247: LD_INT 3
17249: PUSH
17250: EMPTY
17251: LIST
17252: LIST
17253: LIST
17254: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
17255: LD_VAR 0 6
17259: PPUSH
17260: CALL_OW 257
17264: PUSH
17265: LD_INT 2
17267: PUSH
17268: LD_INT 3
17270: PUSH
17271: LD_INT 4
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: LIST
17278: IN
17279: IFFALSE 17300
// points := [ 3 , 2 , 1 ] ;
17281: LD_ADDR_VAR 0 9
17285: PUSH
17286: LD_INT 3
17288: PUSH
17289: LD_INT 2
17291: PUSH
17292: LD_INT 1
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: LIST
17299: ST_TO_ADDR
// if GetClass ( i ) = 5 then
17300: LD_VAR 0 6
17304: PPUSH
17305: CALL_OW 257
17309: PUSH
17310: LD_INT 5
17312: EQUAL
17313: IFFALSE 17334
// points := [ 130 , 5 , 2 ] ;
17315: LD_ADDR_VAR 0 9
17319: PUSH
17320: LD_INT 130
17322: PUSH
17323: LD_INT 5
17325: PUSH
17326: LD_INT 2
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: LIST
17333: ST_TO_ADDR
// if GetClass ( i ) = 8 then
17334: LD_VAR 0 6
17338: PPUSH
17339: CALL_OW 257
17343: PUSH
17344: LD_INT 8
17346: EQUAL
17347: IFFALSE 17368
// points := [ 35 , 35 , 30 ] ;
17349: LD_ADDR_VAR 0 9
17353: PUSH
17354: LD_INT 35
17356: PUSH
17357: LD_INT 35
17359: PUSH
17360: LD_INT 30
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: LIST
17367: ST_TO_ADDR
// if GetClass ( i ) = 9 then
17368: LD_VAR 0 6
17372: PPUSH
17373: CALL_OW 257
17377: PUSH
17378: LD_INT 9
17380: EQUAL
17381: IFFALSE 17402
// points := [ 20 , 55 , 40 ] ;
17383: LD_ADDR_VAR 0 9
17387: PUSH
17388: LD_INT 20
17390: PUSH
17391: LD_INT 55
17393: PUSH
17394: LD_INT 40
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: LIST
17401: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
17402: LD_VAR 0 6
17406: PPUSH
17407: CALL_OW 257
17411: PUSH
17412: LD_INT 12
17414: PUSH
17415: LD_INT 16
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: IN
17422: IFFALSE 17443
// points := [ 5 , 3 , 2 ] ;
17424: LD_ADDR_VAR 0 9
17428: PUSH
17429: LD_INT 5
17431: PUSH
17432: LD_INT 3
17434: PUSH
17435: LD_INT 2
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: LIST
17442: ST_TO_ADDR
// if GetClass ( i ) = 17 then
17443: LD_VAR 0 6
17447: PPUSH
17448: CALL_OW 257
17452: PUSH
17453: LD_INT 17
17455: EQUAL
17456: IFFALSE 17477
// points := [ 100 , 50 , 75 ] ;
17458: LD_ADDR_VAR 0 9
17462: PUSH
17463: LD_INT 100
17465: PUSH
17466: LD_INT 50
17468: PUSH
17469: LD_INT 75
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: LIST
17476: ST_TO_ADDR
// if GetClass ( i ) = 15 then
17477: LD_VAR 0 6
17481: PPUSH
17482: CALL_OW 257
17486: PUSH
17487: LD_INT 15
17489: EQUAL
17490: IFFALSE 17511
// points := [ 10 , 5 , 3 ] ;
17492: LD_ADDR_VAR 0 9
17496: PUSH
17497: LD_INT 10
17499: PUSH
17500: LD_INT 5
17502: PUSH
17503: LD_INT 3
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: LIST
17510: ST_TO_ADDR
// if GetClass ( i ) = 14 then
17511: LD_VAR 0 6
17515: PPUSH
17516: CALL_OW 257
17520: PUSH
17521: LD_INT 14
17523: EQUAL
17524: IFFALSE 17545
// points := [ 10 , 0 , 0 ] ;
17526: LD_ADDR_VAR 0 9
17530: PUSH
17531: LD_INT 10
17533: PUSH
17534: LD_INT 0
17536: PUSH
17537: LD_INT 0
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: LIST
17544: ST_TO_ADDR
// if GetClass ( i ) = 11 then
17545: LD_VAR 0 6
17549: PPUSH
17550: CALL_OW 257
17554: PUSH
17555: LD_INT 11
17557: EQUAL
17558: IFFALSE 17579
// points := [ 30 , 10 , 5 ] ;
17560: LD_ADDR_VAR 0 9
17564: PUSH
17565: LD_INT 30
17567: PUSH
17568: LD_INT 10
17570: PUSH
17571: LD_INT 5
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: LIST
17578: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
17579: LD_VAR 0 1
17583: PPUSH
17584: LD_INT 5
17586: PPUSH
17587: CALL_OW 321
17591: PUSH
17592: LD_INT 2
17594: EQUAL
17595: IFFALSE 17612
// bpoints := bpoints * 1.8 ;
17597: LD_ADDR_VAR 0 10
17601: PUSH
17602: LD_VAR 0 10
17606: PUSH
17607: LD_REAL  1.80000000000000E+0000
17610: MUL
17611: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
17612: LD_VAR 0 6
17616: PPUSH
17617: CALL_OW 257
17621: PUSH
17622: LD_INT 1
17624: PUSH
17625: LD_INT 2
17627: PUSH
17628: LD_INT 3
17630: PUSH
17631: LD_INT 4
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: IN
17640: PUSH
17641: LD_VAR 0 1
17645: PPUSH
17646: LD_INT 51
17648: PPUSH
17649: CALL_OW 321
17653: PUSH
17654: LD_INT 2
17656: EQUAL
17657: AND
17658: IFFALSE 17675
// bpoints := bpoints * 1.2 ;
17660: LD_ADDR_VAR 0 10
17664: PUSH
17665: LD_VAR 0 10
17669: PUSH
17670: LD_REAL  1.20000000000000E+0000
17673: MUL
17674: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
17675: LD_VAR 0 6
17679: PPUSH
17680: CALL_OW 257
17684: PUSH
17685: LD_INT 5
17687: PUSH
17688: LD_INT 7
17690: PUSH
17691: LD_INT 9
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: LIST
17698: IN
17699: PUSH
17700: LD_VAR 0 1
17704: PPUSH
17705: LD_INT 52
17707: PPUSH
17708: CALL_OW 321
17712: PUSH
17713: LD_INT 2
17715: EQUAL
17716: AND
17717: IFFALSE 17734
// bpoints := bpoints * 1.5 ;
17719: LD_ADDR_VAR 0 10
17723: PUSH
17724: LD_VAR 0 10
17728: PUSH
17729: LD_REAL  1.50000000000000E+0000
17732: MUL
17733: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
17734: LD_VAR 0 1
17738: PPUSH
17739: LD_INT 66
17741: PPUSH
17742: CALL_OW 321
17746: PUSH
17747: LD_INT 2
17749: EQUAL
17750: IFFALSE 17767
// bpoints := bpoints * 1.1 ;
17752: LD_ADDR_VAR 0 10
17756: PUSH
17757: LD_VAR 0 10
17761: PUSH
17762: LD_REAL  1.10000000000000E+0000
17765: MUL
17766: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
17767: LD_ADDR_VAR 0 10
17771: PUSH
17772: LD_VAR 0 10
17776: PUSH
17777: LD_VAR 0 6
17781: PPUSH
17782: LD_INT 1
17784: PPUSH
17785: CALL_OW 259
17789: PUSH
17790: LD_REAL  1.15000000000000E+0000
17793: MUL
17794: MUL
17795: ST_TO_ADDR
// end ; unit_vehicle :
17796: GO 18620
17798: LD_INT 2
17800: DOUBLE
17801: EQUAL
17802: IFTRUE 17806
17804: GO 18608
17806: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
17807: LD_VAR 0 6
17811: PPUSH
17812: CALL_OW 264
17816: PUSH
17817: LD_INT 2
17819: PUSH
17820: LD_INT 42
17822: PUSH
17823: LD_INT 24
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: LIST
17830: IN
17831: IFFALSE 17852
// points := [ 25 , 5 , 3 ] ;
17833: LD_ADDR_VAR 0 9
17837: PUSH
17838: LD_INT 25
17840: PUSH
17841: LD_INT 5
17843: PUSH
17844: LD_INT 3
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: LIST
17851: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17852: LD_VAR 0 6
17856: PPUSH
17857: CALL_OW 264
17861: PUSH
17862: LD_INT 4
17864: PUSH
17865: LD_INT 43
17867: PUSH
17868: LD_INT 25
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: LIST
17875: IN
17876: IFFALSE 17897
// points := [ 40 , 15 , 5 ] ;
17878: LD_ADDR_VAR 0 9
17882: PUSH
17883: LD_INT 40
17885: PUSH
17886: LD_INT 15
17888: PUSH
17889: LD_INT 5
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: LIST
17896: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17897: LD_VAR 0 6
17901: PPUSH
17902: CALL_OW 264
17906: PUSH
17907: LD_INT 3
17909: PUSH
17910: LD_INT 23
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: IN
17917: IFFALSE 17938
// points := [ 7 , 25 , 8 ] ;
17919: LD_ADDR_VAR 0 9
17923: PUSH
17924: LD_INT 7
17926: PUSH
17927: LD_INT 25
17929: PUSH
17930: LD_INT 8
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: LIST
17937: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
17938: LD_VAR 0 6
17942: PPUSH
17943: CALL_OW 264
17947: PUSH
17948: LD_INT 5
17950: PUSH
17951: LD_INT 27
17953: PUSH
17954: LD_INT 44
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: LIST
17961: IN
17962: IFFALSE 17983
// points := [ 14 , 50 , 16 ] ;
17964: LD_ADDR_VAR 0 9
17968: PUSH
17969: LD_INT 14
17971: PUSH
17972: LD_INT 50
17974: PUSH
17975: LD_INT 16
17977: PUSH
17978: EMPTY
17979: LIST
17980: LIST
17981: LIST
17982: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
17983: LD_VAR 0 6
17987: PPUSH
17988: CALL_OW 264
17992: PUSH
17993: LD_INT 6
17995: PUSH
17996: LD_INT 46
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: IN
18003: IFFALSE 18024
// points := [ 32 , 120 , 70 ] ;
18005: LD_ADDR_VAR 0 9
18009: PUSH
18010: LD_INT 32
18012: PUSH
18013: LD_INT 120
18015: PUSH
18016: LD_INT 70
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: LIST
18023: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
18024: LD_VAR 0 6
18028: PPUSH
18029: CALL_OW 264
18033: PUSH
18034: LD_INT 7
18036: PUSH
18037: LD_INT 28
18039: PUSH
18040: LD_INT 45
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: LIST
18047: IN
18048: IFFALSE 18069
// points := [ 35 , 20 , 45 ] ;
18050: LD_ADDR_VAR 0 9
18054: PUSH
18055: LD_INT 35
18057: PUSH
18058: LD_INT 20
18060: PUSH
18061: LD_INT 45
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: LIST
18068: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
18069: LD_VAR 0 6
18073: PPUSH
18074: CALL_OW 264
18078: PUSH
18079: LD_INT 47
18081: PUSH
18082: EMPTY
18083: LIST
18084: IN
18085: IFFALSE 18106
// points := [ 67 , 45 , 75 ] ;
18087: LD_ADDR_VAR 0 9
18091: PUSH
18092: LD_INT 67
18094: PUSH
18095: LD_INT 45
18097: PUSH
18098: LD_INT 75
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: LIST
18105: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
18106: LD_VAR 0 6
18110: PPUSH
18111: CALL_OW 264
18115: PUSH
18116: LD_INT 26
18118: PUSH
18119: EMPTY
18120: LIST
18121: IN
18122: IFFALSE 18143
// points := [ 120 , 30 , 80 ] ;
18124: LD_ADDR_VAR 0 9
18128: PUSH
18129: LD_INT 120
18131: PUSH
18132: LD_INT 30
18134: PUSH
18135: LD_INT 80
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: LIST
18142: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
18143: LD_VAR 0 6
18147: PPUSH
18148: CALL_OW 264
18152: PUSH
18153: LD_INT 22
18155: PUSH
18156: EMPTY
18157: LIST
18158: IN
18159: IFFALSE 18180
// points := [ 40 , 1 , 1 ] ;
18161: LD_ADDR_VAR 0 9
18165: PUSH
18166: LD_INT 40
18168: PUSH
18169: LD_INT 1
18171: PUSH
18172: LD_INT 1
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: LIST
18179: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
18180: LD_VAR 0 6
18184: PPUSH
18185: CALL_OW 264
18189: PUSH
18190: LD_INT 29
18192: PUSH
18193: EMPTY
18194: LIST
18195: IN
18196: IFFALSE 18217
// points := [ 70 , 200 , 400 ] ;
18198: LD_ADDR_VAR 0 9
18202: PUSH
18203: LD_INT 70
18205: PUSH
18206: LD_INT 200
18208: PUSH
18209: LD_INT 400
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: LIST
18216: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
18217: LD_VAR 0 6
18221: PPUSH
18222: CALL_OW 264
18226: PUSH
18227: LD_INT 14
18229: PUSH
18230: LD_INT 53
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: IN
18237: IFFALSE 18258
// points := [ 40 , 10 , 20 ] ;
18239: LD_ADDR_VAR 0 9
18243: PUSH
18244: LD_INT 40
18246: PUSH
18247: LD_INT 10
18249: PUSH
18250: LD_INT 20
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: LIST
18257: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
18258: LD_VAR 0 6
18262: PPUSH
18263: CALL_OW 264
18267: PUSH
18268: LD_INT 9
18270: PUSH
18271: EMPTY
18272: LIST
18273: IN
18274: IFFALSE 18295
// points := [ 5 , 70 , 20 ] ;
18276: LD_ADDR_VAR 0 9
18280: PUSH
18281: LD_INT 5
18283: PUSH
18284: LD_INT 70
18286: PUSH
18287: LD_INT 20
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: LIST
18294: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
18295: LD_VAR 0 6
18299: PPUSH
18300: CALL_OW 264
18304: PUSH
18305: LD_INT 10
18307: PUSH
18308: EMPTY
18309: LIST
18310: IN
18311: IFFALSE 18332
// points := [ 35 , 110 , 70 ] ;
18313: LD_ADDR_VAR 0 9
18317: PUSH
18318: LD_INT 35
18320: PUSH
18321: LD_INT 110
18323: PUSH
18324: LD_INT 70
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: LIST
18331: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
18332: LD_VAR 0 6
18336: PPUSH
18337: CALL_OW 265
18341: PUSH
18342: LD_INT 25
18344: EQUAL
18345: IFFALSE 18366
// points := [ 80 , 65 , 100 ] ;
18347: LD_ADDR_VAR 0 9
18351: PUSH
18352: LD_INT 80
18354: PUSH
18355: LD_INT 65
18357: PUSH
18358: LD_INT 100
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: LIST
18365: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
18366: LD_VAR 0 6
18370: PPUSH
18371: CALL_OW 263
18375: PUSH
18376: LD_INT 1
18378: EQUAL
18379: IFFALSE 18414
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
18381: LD_ADDR_VAR 0 10
18385: PUSH
18386: LD_VAR 0 10
18390: PUSH
18391: LD_VAR 0 6
18395: PPUSH
18396: CALL_OW 311
18400: PPUSH
18401: LD_INT 3
18403: PPUSH
18404: CALL_OW 259
18408: PUSH
18409: LD_INT 4
18411: MUL
18412: MUL
18413: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
18414: LD_VAR 0 6
18418: PPUSH
18419: CALL_OW 263
18423: PUSH
18424: LD_INT 2
18426: EQUAL
18427: IFFALSE 18478
// begin j := IsControledBy ( i ) ;
18429: LD_ADDR_VAR 0 7
18433: PUSH
18434: LD_VAR 0 6
18438: PPUSH
18439: CALL_OW 312
18443: ST_TO_ADDR
// if j then
18444: LD_VAR 0 7
18448: IFFALSE 18478
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
18450: LD_ADDR_VAR 0 10
18454: PUSH
18455: LD_VAR 0 10
18459: PUSH
18460: LD_VAR 0 7
18464: PPUSH
18465: LD_INT 3
18467: PPUSH
18468: CALL_OW 259
18472: PUSH
18473: LD_INT 3
18475: MUL
18476: MUL
18477: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
18478: LD_VAR 0 6
18482: PPUSH
18483: CALL_OW 264
18487: PUSH
18488: LD_INT 5
18490: PUSH
18491: LD_INT 6
18493: PUSH
18494: LD_INT 46
18496: PUSH
18497: LD_INT 44
18499: PUSH
18500: LD_INT 47
18502: PUSH
18503: LD_INT 45
18505: PUSH
18506: LD_INT 28
18508: PUSH
18509: LD_INT 7
18511: PUSH
18512: LD_INT 27
18514: PUSH
18515: LD_INT 29
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: IN
18530: PUSH
18531: LD_VAR 0 1
18535: PPUSH
18536: LD_INT 52
18538: PPUSH
18539: CALL_OW 321
18543: PUSH
18544: LD_INT 2
18546: EQUAL
18547: AND
18548: IFFALSE 18565
// bpoints := bpoints * 1.2 ;
18550: LD_ADDR_VAR 0 10
18554: PUSH
18555: LD_VAR 0 10
18559: PUSH
18560: LD_REAL  1.20000000000000E+0000
18563: MUL
18564: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
18565: LD_VAR 0 6
18569: PPUSH
18570: CALL_OW 264
18574: PUSH
18575: LD_INT 6
18577: PUSH
18578: LD_INT 46
18580: PUSH
18581: LD_INT 47
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: LIST
18588: IN
18589: IFFALSE 18606
// bpoints := bpoints * 1.2 ;
18591: LD_ADDR_VAR 0 10
18595: PUSH
18596: LD_VAR 0 10
18600: PUSH
18601: LD_REAL  1.20000000000000E+0000
18604: MUL
18605: ST_TO_ADDR
// end ; unit_building :
18606: GO 18620
18608: LD_INT 3
18610: DOUBLE
18611: EQUAL
18612: IFTRUE 18616
18614: GO 18619
18616: POP
// ; end ;
18617: GO 18620
18619: POP
// for j = 1 to 3 do
18620: LD_ADDR_VAR 0 7
18624: PUSH
18625: DOUBLE
18626: LD_INT 1
18628: DEC
18629: ST_TO_ADDR
18630: LD_INT 3
18632: PUSH
18633: FOR_TO
18634: IFFALSE 18687
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
18636: LD_ADDR_VAR 0 5
18640: PUSH
18641: LD_VAR 0 5
18645: PPUSH
18646: LD_VAR 0 7
18650: PPUSH
18651: LD_VAR 0 5
18655: PUSH
18656: LD_VAR 0 7
18660: ARRAY
18661: PUSH
18662: LD_VAR 0 9
18666: PUSH
18667: LD_VAR 0 7
18671: ARRAY
18672: PUSH
18673: LD_VAR 0 10
18677: MUL
18678: PLUS
18679: PPUSH
18680: CALL_OW 1
18684: ST_TO_ADDR
18685: GO 18633
18687: POP
18688: POP
// end ;
18689: GO 17172
18691: POP
18692: POP
// result := Replace ( result , 4 , tmp ) ;
18693: LD_ADDR_VAR 0 5
18697: PUSH
18698: LD_VAR 0 5
18702: PPUSH
18703: LD_INT 4
18705: PPUSH
18706: LD_VAR 0 8
18710: PPUSH
18711: CALL_OW 1
18715: ST_TO_ADDR
// end ;
18716: LD_VAR 0 5
18720: RET
// export function DangerAtRange ( unit , range ) ; begin
18721: LD_INT 0
18723: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
18724: LD_ADDR_VAR 0 3
18728: PUSH
18729: LD_VAR 0 1
18733: PPUSH
18734: CALL_OW 255
18738: PPUSH
18739: LD_VAR 0 1
18743: PPUSH
18744: CALL_OW 250
18748: PPUSH
18749: LD_VAR 0 1
18753: PPUSH
18754: CALL_OW 251
18758: PPUSH
18759: LD_VAR 0 2
18763: PPUSH
18764: CALL 17024 0 4
18768: ST_TO_ADDR
// end ;
18769: LD_VAR 0 3
18773: RET
// export function DangerInArea ( side , area ) ; begin
18774: LD_INT 0
18776: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
18777: LD_ADDR_VAR 0 3
18781: PUSH
18782: LD_VAR 0 2
18786: PPUSH
18787: LD_INT 81
18789: PUSH
18790: LD_VAR 0 1
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PPUSH
18799: CALL_OW 70
18803: ST_TO_ADDR
// end ;
18804: LD_VAR 0 3
18808: RET
// export function IsExtension ( b ) ; begin
18809: LD_INT 0
18811: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
18812: LD_ADDR_VAR 0 2
18816: PUSH
18817: LD_VAR 0 1
18821: PUSH
18822: LD_INT 23
18824: PUSH
18825: LD_INT 20
18827: PUSH
18828: LD_INT 22
18830: PUSH
18831: LD_INT 17
18833: PUSH
18834: LD_INT 24
18836: PUSH
18837: LD_INT 21
18839: PUSH
18840: LD_INT 19
18842: PUSH
18843: LD_INT 16
18845: PUSH
18846: LD_INT 25
18848: PUSH
18849: LD_INT 18
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: IN
18864: ST_TO_ADDR
// end ;
18865: LD_VAR 0 2
18869: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
18870: LD_INT 0
18872: PPUSH
18873: PPUSH
18874: PPUSH
// result := [ ] ;
18875: LD_ADDR_VAR 0 3
18879: PUSH
18880: EMPTY
18881: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
18882: LD_ADDR_VAR 0 4
18886: PUSH
18887: LD_VAR 0 2
18891: PPUSH
18892: LD_INT 21
18894: PUSH
18895: LD_INT 3
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: PPUSH
18902: CALL_OW 70
18906: ST_TO_ADDR
// if not tmp then
18907: LD_VAR 0 4
18911: NOT
18912: IFFALSE 18916
// exit ;
18914: GO 18974
// for i in tmp do
18916: LD_ADDR_VAR 0 5
18920: PUSH
18921: LD_VAR 0 4
18925: PUSH
18926: FOR_IN
18927: IFFALSE 18962
// if GetBase ( i ) <> base then
18929: LD_VAR 0 5
18933: PPUSH
18934: CALL_OW 274
18938: PUSH
18939: LD_VAR 0 1
18943: NONEQUAL
18944: IFFALSE 18960
// ComLinkToBase ( base , i ) ;
18946: LD_VAR 0 1
18950: PPUSH
18951: LD_VAR 0 5
18955: PPUSH
18956: CALL_OW 169
18960: GO 18926
18962: POP
18963: POP
// result := tmp ;
18964: LD_ADDR_VAR 0 3
18968: PUSH
18969: LD_VAR 0 4
18973: ST_TO_ADDR
// end ;
18974: LD_VAR 0 3
18978: RET
// export function ComComplete ( unit , b ) ; var i ; begin
18979: LD_INT 0
18981: PPUSH
18982: PPUSH
// if BuildingStatus ( b ) = bs_build then
18983: LD_VAR 0 2
18987: PPUSH
18988: CALL_OW 461
18992: PUSH
18993: LD_INT 1
18995: EQUAL
18996: IFFALSE 19056
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18998: LD_VAR 0 1
19002: PPUSH
19003: LD_STRING h
19005: PUSH
19006: LD_VAR 0 2
19010: PPUSH
19011: CALL_OW 250
19015: PUSH
19016: LD_VAR 0 2
19020: PPUSH
19021: CALL_OW 251
19025: PUSH
19026: LD_VAR 0 2
19030: PUSH
19031: LD_INT 0
19033: PUSH
19034: LD_INT 0
19036: PUSH
19037: LD_INT 0
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: PUSH
19049: EMPTY
19050: LIST
19051: PPUSH
19052: CALL_OW 446
// end ;
19056: LD_VAR 0 3
19060: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
19061: LD_INT 0
19063: PPUSH
19064: PPUSH
19065: PPUSH
19066: PPUSH
19067: PPUSH
19068: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
19069: LD_VAR 0 1
19073: NOT
19074: PUSH
19075: LD_VAR 0 1
19079: PPUSH
19080: CALL_OW 263
19084: PUSH
19085: LD_INT 2
19087: EQUAL
19088: NOT
19089: OR
19090: IFFALSE 19094
// exit ;
19092: GO 19410
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
19094: LD_ADDR_VAR 0 6
19098: PUSH
19099: LD_INT 22
19101: PUSH
19102: LD_VAR 0 1
19106: PPUSH
19107: CALL_OW 255
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: PUSH
19116: LD_INT 2
19118: PUSH
19119: LD_INT 30
19121: PUSH
19122: LD_INT 36
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: LD_INT 34
19131: PUSH
19132: LD_INT 31
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: LIST
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PPUSH
19148: CALL_OW 69
19152: ST_TO_ADDR
// if not tmp then
19153: LD_VAR 0 6
19157: NOT
19158: IFFALSE 19162
// exit ;
19160: GO 19410
// result := [ ] ;
19162: LD_ADDR_VAR 0 2
19166: PUSH
19167: EMPTY
19168: ST_TO_ADDR
// for i in tmp do
19169: LD_ADDR_VAR 0 3
19173: PUSH
19174: LD_VAR 0 6
19178: PUSH
19179: FOR_IN
19180: IFFALSE 19251
// begin t := UnitsInside ( i ) ;
19182: LD_ADDR_VAR 0 4
19186: PUSH
19187: LD_VAR 0 3
19191: PPUSH
19192: CALL_OW 313
19196: ST_TO_ADDR
// if t then
19197: LD_VAR 0 4
19201: IFFALSE 19249
// for j in t do
19203: LD_ADDR_VAR 0 7
19207: PUSH
19208: LD_VAR 0 4
19212: PUSH
19213: FOR_IN
19214: IFFALSE 19247
// result := Insert ( result , result + 1 , j ) ;
19216: LD_ADDR_VAR 0 2
19220: PUSH
19221: LD_VAR 0 2
19225: PPUSH
19226: LD_VAR 0 2
19230: PUSH
19231: LD_INT 1
19233: PLUS
19234: PPUSH
19235: LD_VAR 0 7
19239: PPUSH
19240: CALL_OW 2
19244: ST_TO_ADDR
19245: GO 19213
19247: POP
19248: POP
// end ;
19249: GO 19179
19251: POP
19252: POP
// if not result then
19253: LD_VAR 0 2
19257: NOT
19258: IFFALSE 19262
// exit ;
19260: GO 19410
// mech := result [ 1 ] ;
19262: LD_ADDR_VAR 0 5
19266: PUSH
19267: LD_VAR 0 2
19271: PUSH
19272: LD_INT 1
19274: ARRAY
19275: ST_TO_ADDR
// if result > 1 then
19276: LD_VAR 0 2
19280: PUSH
19281: LD_INT 1
19283: GREATER
19284: IFFALSE 19396
// for i = 2 to result do
19286: LD_ADDR_VAR 0 3
19290: PUSH
19291: DOUBLE
19292: LD_INT 2
19294: DEC
19295: ST_TO_ADDR
19296: LD_VAR 0 2
19300: PUSH
19301: FOR_TO
19302: IFFALSE 19394
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
19304: LD_ADDR_VAR 0 4
19308: PUSH
19309: LD_VAR 0 2
19313: PUSH
19314: LD_VAR 0 3
19318: ARRAY
19319: PPUSH
19320: LD_INT 3
19322: PPUSH
19323: CALL_OW 259
19327: PUSH
19328: LD_VAR 0 2
19332: PUSH
19333: LD_VAR 0 3
19337: ARRAY
19338: PPUSH
19339: CALL_OW 432
19343: MINUS
19344: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
19345: LD_VAR 0 4
19349: PUSH
19350: LD_VAR 0 5
19354: PPUSH
19355: LD_INT 3
19357: PPUSH
19358: CALL_OW 259
19362: PUSH
19363: LD_VAR 0 5
19367: PPUSH
19368: CALL_OW 432
19372: MINUS
19373: GREATEREQUAL
19374: IFFALSE 19392
// mech := result [ i ] ;
19376: LD_ADDR_VAR 0 5
19380: PUSH
19381: LD_VAR 0 2
19385: PUSH
19386: LD_VAR 0 3
19390: ARRAY
19391: ST_TO_ADDR
// end ;
19392: GO 19301
19394: POP
19395: POP
// ComLinkTo ( vehicle , mech ) ;
19396: LD_VAR 0 1
19400: PPUSH
19401: LD_VAR 0 5
19405: PPUSH
19406: CALL_OW 135
// end ;
19410: LD_VAR 0 2
19414: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
19415: LD_INT 0
19417: PPUSH
19418: PPUSH
19419: PPUSH
19420: PPUSH
19421: PPUSH
19422: PPUSH
19423: PPUSH
19424: PPUSH
19425: PPUSH
19426: PPUSH
19427: PPUSH
19428: PPUSH
19429: PPUSH
// result := [ ] ;
19430: LD_ADDR_VAR 0 7
19434: PUSH
19435: EMPTY
19436: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
19437: LD_VAR 0 1
19441: PPUSH
19442: CALL_OW 266
19446: PUSH
19447: LD_INT 0
19449: PUSH
19450: LD_INT 1
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: IN
19457: NOT
19458: IFFALSE 19462
// exit ;
19460: GO 21093
// if name then
19462: LD_VAR 0 3
19466: IFFALSE 19482
// SetBName ( base_dep , name ) ;
19468: LD_VAR 0 1
19472: PPUSH
19473: LD_VAR 0 3
19477: PPUSH
19478: CALL_OW 500
// base := GetBase ( base_dep ) ;
19482: LD_ADDR_VAR 0 15
19486: PUSH
19487: LD_VAR 0 1
19491: PPUSH
19492: CALL_OW 274
19496: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
19497: LD_ADDR_VAR 0 16
19501: PUSH
19502: LD_VAR 0 1
19506: PPUSH
19507: CALL_OW 255
19511: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
19512: LD_ADDR_VAR 0 17
19516: PUSH
19517: LD_VAR 0 1
19521: PPUSH
19522: CALL_OW 248
19526: ST_TO_ADDR
// if sources then
19527: LD_VAR 0 5
19531: IFFALSE 19578
// for i = 1 to 3 do
19533: LD_ADDR_VAR 0 8
19537: PUSH
19538: DOUBLE
19539: LD_INT 1
19541: DEC
19542: ST_TO_ADDR
19543: LD_INT 3
19545: PUSH
19546: FOR_TO
19547: IFFALSE 19576
// AddResourceType ( base , i , sources [ i ] ) ;
19549: LD_VAR 0 15
19553: PPUSH
19554: LD_VAR 0 8
19558: PPUSH
19559: LD_VAR 0 5
19563: PUSH
19564: LD_VAR 0 8
19568: ARRAY
19569: PPUSH
19570: CALL_OW 276
19574: GO 19546
19576: POP
19577: POP
// buildings := GetBaseBuildings ( base , area ) ;
19578: LD_ADDR_VAR 0 18
19582: PUSH
19583: LD_VAR 0 15
19587: PPUSH
19588: LD_VAR 0 2
19592: PPUSH
19593: CALL 18870 0 2
19597: ST_TO_ADDR
// InitHc ;
19598: CALL_OW 19
// InitUc ;
19602: CALL_OW 18
// uc_side := side ;
19606: LD_ADDR_OWVAR 20
19610: PUSH
19611: LD_VAR 0 16
19615: ST_TO_ADDR
// uc_nation := nation ;
19616: LD_ADDR_OWVAR 21
19620: PUSH
19621: LD_VAR 0 17
19625: ST_TO_ADDR
// if buildings then
19626: LD_VAR 0 18
19630: IFFALSE 20952
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
19632: LD_ADDR_VAR 0 19
19636: PUSH
19637: LD_VAR 0 18
19641: PPUSH
19642: LD_INT 2
19644: PUSH
19645: LD_INT 30
19647: PUSH
19648: LD_INT 29
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: PUSH
19655: LD_INT 30
19657: PUSH
19658: LD_INT 30
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: LIST
19669: PPUSH
19670: CALL_OW 72
19674: ST_TO_ADDR
// if tmp then
19675: LD_VAR 0 19
19679: IFFALSE 19727
// for i in tmp do
19681: LD_ADDR_VAR 0 8
19685: PUSH
19686: LD_VAR 0 19
19690: PUSH
19691: FOR_IN
19692: IFFALSE 19725
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
19694: LD_VAR 0 8
19698: PPUSH
19699: CALL_OW 250
19703: PPUSH
19704: LD_VAR 0 8
19708: PPUSH
19709: CALL_OW 251
19713: PPUSH
19714: LD_VAR 0 16
19718: PPUSH
19719: CALL_OW 441
19723: GO 19691
19725: POP
19726: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
19727: LD_VAR 0 18
19731: PPUSH
19732: LD_INT 2
19734: PUSH
19735: LD_INT 30
19737: PUSH
19738: LD_INT 32
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: PUSH
19745: LD_INT 30
19747: PUSH
19748: LD_INT 33
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: LIST
19759: PPUSH
19760: CALL_OW 72
19764: IFFALSE 19852
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
19766: LD_ADDR_VAR 0 8
19770: PUSH
19771: LD_VAR 0 18
19775: PPUSH
19776: LD_INT 2
19778: PUSH
19779: LD_INT 30
19781: PUSH
19782: LD_INT 32
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PUSH
19789: LD_INT 30
19791: PUSH
19792: LD_INT 33
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: LIST
19803: PPUSH
19804: CALL_OW 72
19808: PUSH
19809: FOR_IN
19810: IFFALSE 19850
// begin if not GetBWeapon ( i ) then
19812: LD_VAR 0 8
19816: PPUSH
19817: CALL_OW 269
19821: NOT
19822: IFFALSE 19848
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
19824: LD_VAR 0 8
19828: PPUSH
19829: LD_VAR 0 8
19833: PPUSH
19834: LD_VAR 0 2
19838: PPUSH
19839: CALL 21098 0 2
19843: PPUSH
19844: CALL_OW 431
// end ;
19848: GO 19809
19850: POP
19851: POP
// end ; for i = 1 to personel do
19852: LD_ADDR_VAR 0 8
19856: PUSH
19857: DOUBLE
19858: LD_INT 1
19860: DEC
19861: ST_TO_ADDR
19862: LD_VAR 0 6
19866: PUSH
19867: FOR_TO
19868: IFFALSE 20932
// begin if i > 4 then
19870: LD_VAR 0 8
19874: PUSH
19875: LD_INT 4
19877: GREATER
19878: IFFALSE 19882
// break ;
19880: GO 20932
// case i of 1 :
19882: LD_VAR 0 8
19886: PUSH
19887: LD_INT 1
19889: DOUBLE
19890: EQUAL
19891: IFTRUE 19895
19893: GO 19975
19895: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
19896: LD_ADDR_VAR 0 12
19900: PUSH
19901: LD_VAR 0 18
19905: PPUSH
19906: LD_INT 22
19908: PUSH
19909: LD_VAR 0 16
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PUSH
19918: LD_INT 58
19920: PUSH
19921: EMPTY
19922: LIST
19923: PUSH
19924: LD_INT 2
19926: PUSH
19927: LD_INT 30
19929: PUSH
19930: LD_INT 32
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: LD_INT 30
19939: PUSH
19940: LD_INT 4
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: PUSH
19947: LD_INT 30
19949: PUSH
19950: LD_INT 5
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: LIST
19967: PPUSH
19968: CALL_OW 72
19972: ST_TO_ADDR
19973: GO 20197
19975: LD_INT 2
19977: DOUBLE
19978: EQUAL
19979: IFTRUE 19983
19981: GO 20045
19983: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19984: LD_ADDR_VAR 0 12
19988: PUSH
19989: LD_VAR 0 18
19993: PPUSH
19994: LD_INT 22
19996: PUSH
19997: LD_VAR 0 16
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PUSH
20006: LD_INT 2
20008: PUSH
20009: LD_INT 30
20011: PUSH
20012: LD_INT 0
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: PUSH
20019: LD_INT 30
20021: PUSH
20022: LD_INT 1
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: LIST
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PPUSH
20038: CALL_OW 72
20042: ST_TO_ADDR
20043: GO 20197
20045: LD_INT 3
20047: DOUBLE
20048: EQUAL
20049: IFTRUE 20053
20051: GO 20115
20053: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
20054: LD_ADDR_VAR 0 12
20058: PUSH
20059: LD_VAR 0 18
20063: PPUSH
20064: LD_INT 22
20066: PUSH
20067: LD_VAR 0 16
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 2
20078: PUSH
20079: LD_INT 30
20081: PUSH
20082: LD_INT 2
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: LD_INT 30
20091: PUSH
20092: LD_INT 3
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: LIST
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PPUSH
20108: CALL_OW 72
20112: ST_TO_ADDR
20113: GO 20197
20115: LD_INT 4
20117: DOUBLE
20118: EQUAL
20119: IFTRUE 20123
20121: GO 20196
20123: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
20124: LD_ADDR_VAR 0 12
20128: PUSH
20129: LD_VAR 0 18
20133: PPUSH
20134: LD_INT 22
20136: PUSH
20137: LD_VAR 0 16
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: LD_INT 2
20148: PUSH
20149: LD_INT 30
20151: PUSH
20152: LD_INT 6
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: PUSH
20159: LD_INT 30
20161: PUSH
20162: LD_INT 7
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: PUSH
20169: LD_INT 30
20171: PUSH
20172: LD_INT 8
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PPUSH
20189: CALL_OW 72
20193: ST_TO_ADDR
20194: GO 20197
20196: POP
// if i = 1 then
20197: LD_VAR 0 8
20201: PUSH
20202: LD_INT 1
20204: EQUAL
20205: IFFALSE 20316
// begin tmp := [ ] ;
20207: LD_ADDR_VAR 0 19
20211: PUSH
20212: EMPTY
20213: ST_TO_ADDR
// for j in f do
20214: LD_ADDR_VAR 0 9
20218: PUSH
20219: LD_VAR 0 12
20223: PUSH
20224: FOR_IN
20225: IFFALSE 20298
// if GetBType ( j ) = b_bunker then
20227: LD_VAR 0 9
20231: PPUSH
20232: CALL_OW 266
20236: PUSH
20237: LD_INT 32
20239: EQUAL
20240: IFFALSE 20267
// tmp := Insert ( tmp , 1 , j ) else
20242: LD_ADDR_VAR 0 19
20246: PUSH
20247: LD_VAR 0 19
20251: PPUSH
20252: LD_INT 1
20254: PPUSH
20255: LD_VAR 0 9
20259: PPUSH
20260: CALL_OW 2
20264: ST_TO_ADDR
20265: GO 20296
// tmp := Insert ( tmp , tmp + 1 , j ) ;
20267: LD_ADDR_VAR 0 19
20271: PUSH
20272: LD_VAR 0 19
20276: PPUSH
20277: LD_VAR 0 19
20281: PUSH
20282: LD_INT 1
20284: PLUS
20285: PPUSH
20286: LD_VAR 0 9
20290: PPUSH
20291: CALL_OW 2
20295: ST_TO_ADDR
20296: GO 20224
20298: POP
20299: POP
// if tmp then
20300: LD_VAR 0 19
20304: IFFALSE 20316
// f := tmp ;
20306: LD_ADDR_VAR 0 12
20310: PUSH
20311: LD_VAR 0 19
20315: ST_TO_ADDR
// end ; x := personel [ i ] ;
20316: LD_ADDR_VAR 0 13
20320: PUSH
20321: LD_VAR 0 6
20325: PUSH
20326: LD_VAR 0 8
20330: ARRAY
20331: ST_TO_ADDR
// if x = - 1 then
20332: LD_VAR 0 13
20336: PUSH
20337: LD_INT 1
20339: NEG
20340: EQUAL
20341: IFFALSE 20550
// begin for j in f do
20343: LD_ADDR_VAR 0 9
20347: PUSH
20348: LD_VAR 0 12
20352: PUSH
20353: FOR_IN
20354: IFFALSE 20546
// repeat InitHc ;
20356: CALL_OW 19
// if GetBType ( j ) = b_barracks then
20360: LD_VAR 0 9
20364: PPUSH
20365: CALL_OW 266
20369: PUSH
20370: LD_INT 5
20372: EQUAL
20373: IFFALSE 20443
// begin if UnitsInside ( j ) < 3 then
20375: LD_VAR 0 9
20379: PPUSH
20380: CALL_OW 313
20384: PUSH
20385: LD_INT 3
20387: LESS
20388: IFFALSE 20424
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20390: LD_INT 0
20392: PPUSH
20393: LD_INT 5
20395: PUSH
20396: LD_INT 8
20398: PUSH
20399: LD_INT 9
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: LIST
20406: PUSH
20407: LD_VAR 0 17
20411: ARRAY
20412: PPUSH
20413: LD_VAR 0 4
20417: PPUSH
20418: CALL_OW 380
20422: GO 20441
// PrepareHuman ( false , i , skill ) ;
20424: LD_INT 0
20426: PPUSH
20427: LD_VAR 0 8
20431: PPUSH
20432: LD_VAR 0 4
20436: PPUSH
20437: CALL_OW 380
// end else
20441: GO 20460
// PrepareHuman ( false , i , skill ) ;
20443: LD_INT 0
20445: PPUSH
20446: LD_VAR 0 8
20450: PPUSH
20451: LD_VAR 0 4
20455: PPUSH
20456: CALL_OW 380
// un := CreateHuman ;
20460: LD_ADDR_VAR 0 14
20464: PUSH
20465: CALL_OW 44
20469: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20470: LD_ADDR_VAR 0 7
20474: PUSH
20475: LD_VAR 0 7
20479: PPUSH
20480: LD_INT 1
20482: PPUSH
20483: LD_VAR 0 14
20487: PPUSH
20488: CALL_OW 2
20492: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
20493: LD_VAR 0 14
20497: PPUSH
20498: LD_VAR 0 9
20502: PPUSH
20503: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
20507: LD_VAR 0 9
20511: PPUSH
20512: CALL_OW 313
20516: PUSH
20517: LD_INT 6
20519: EQUAL
20520: PUSH
20521: LD_VAR 0 9
20525: PPUSH
20526: CALL_OW 266
20530: PUSH
20531: LD_INT 32
20533: PUSH
20534: LD_INT 31
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: IN
20541: OR
20542: IFFALSE 20356
20544: GO 20353
20546: POP
20547: POP
// end else
20548: GO 20930
// for j = 1 to x do
20550: LD_ADDR_VAR 0 9
20554: PUSH
20555: DOUBLE
20556: LD_INT 1
20558: DEC
20559: ST_TO_ADDR
20560: LD_VAR 0 13
20564: PUSH
20565: FOR_TO
20566: IFFALSE 20928
// begin InitHc ;
20568: CALL_OW 19
// if not f then
20572: LD_VAR 0 12
20576: NOT
20577: IFFALSE 20666
// begin PrepareHuman ( false , i , skill ) ;
20579: LD_INT 0
20581: PPUSH
20582: LD_VAR 0 8
20586: PPUSH
20587: LD_VAR 0 4
20591: PPUSH
20592: CALL_OW 380
// un := CreateHuman ;
20596: LD_ADDR_VAR 0 14
20600: PUSH
20601: CALL_OW 44
20605: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20606: LD_ADDR_VAR 0 7
20610: PUSH
20611: LD_VAR 0 7
20615: PPUSH
20616: LD_INT 1
20618: PPUSH
20619: LD_VAR 0 14
20623: PPUSH
20624: CALL_OW 2
20628: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20629: LD_VAR 0 14
20633: PPUSH
20634: LD_VAR 0 1
20638: PPUSH
20639: CALL_OW 250
20643: PPUSH
20644: LD_VAR 0 1
20648: PPUSH
20649: CALL_OW 251
20653: PPUSH
20654: LD_INT 10
20656: PPUSH
20657: LD_INT 0
20659: PPUSH
20660: CALL_OW 50
// continue ;
20664: GO 20565
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
20666: LD_VAR 0 12
20670: PUSH
20671: LD_INT 1
20673: ARRAY
20674: PPUSH
20675: CALL_OW 313
20679: PUSH
20680: LD_VAR 0 12
20684: PUSH
20685: LD_INT 1
20687: ARRAY
20688: PPUSH
20689: CALL_OW 266
20693: PUSH
20694: LD_INT 32
20696: PUSH
20697: LD_INT 31
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: IN
20704: AND
20705: PUSH
20706: LD_VAR 0 12
20710: PUSH
20711: LD_INT 1
20713: ARRAY
20714: PPUSH
20715: CALL_OW 313
20719: PUSH
20720: LD_INT 6
20722: EQUAL
20723: OR
20724: IFFALSE 20744
// f := Delete ( f , 1 ) ;
20726: LD_ADDR_VAR 0 12
20730: PUSH
20731: LD_VAR 0 12
20735: PPUSH
20736: LD_INT 1
20738: PPUSH
20739: CALL_OW 3
20743: ST_TO_ADDR
// if not f then
20744: LD_VAR 0 12
20748: NOT
20749: IFFALSE 20767
// begin x := x + 2 ;
20751: LD_ADDR_VAR 0 13
20755: PUSH
20756: LD_VAR 0 13
20760: PUSH
20761: LD_INT 2
20763: PLUS
20764: ST_TO_ADDR
// continue ;
20765: GO 20565
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
20767: LD_VAR 0 12
20771: PUSH
20772: LD_INT 1
20774: ARRAY
20775: PPUSH
20776: CALL_OW 266
20780: PUSH
20781: LD_INT 5
20783: EQUAL
20784: IFFALSE 20858
// begin if UnitsInside ( f [ 1 ] ) < 3 then
20786: LD_VAR 0 12
20790: PUSH
20791: LD_INT 1
20793: ARRAY
20794: PPUSH
20795: CALL_OW 313
20799: PUSH
20800: LD_INT 3
20802: LESS
20803: IFFALSE 20839
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20805: LD_INT 0
20807: PPUSH
20808: LD_INT 5
20810: PUSH
20811: LD_INT 8
20813: PUSH
20814: LD_INT 9
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: LIST
20821: PUSH
20822: LD_VAR 0 17
20826: ARRAY
20827: PPUSH
20828: LD_VAR 0 4
20832: PPUSH
20833: CALL_OW 380
20837: GO 20856
// PrepareHuman ( false , i , skill ) ;
20839: LD_INT 0
20841: PPUSH
20842: LD_VAR 0 8
20846: PPUSH
20847: LD_VAR 0 4
20851: PPUSH
20852: CALL_OW 380
// end else
20856: GO 20875
// PrepareHuman ( false , i , skill ) ;
20858: LD_INT 0
20860: PPUSH
20861: LD_VAR 0 8
20865: PPUSH
20866: LD_VAR 0 4
20870: PPUSH
20871: CALL_OW 380
// un := CreateHuman ;
20875: LD_ADDR_VAR 0 14
20879: PUSH
20880: CALL_OW 44
20884: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20885: LD_ADDR_VAR 0 7
20889: PUSH
20890: LD_VAR 0 7
20894: PPUSH
20895: LD_INT 1
20897: PPUSH
20898: LD_VAR 0 14
20902: PPUSH
20903: CALL_OW 2
20907: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
20908: LD_VAR 0 14
20912: PPUSH
20913: LD_VAR 0 12
20917: PUSH
20918: LD_INT 1
20920: ARRAY
20921: PPUSH
20922: CALL_OW 52
// end ;
20926: GO 20565
20928: POP
20929: POP
// end ;
20930: GO 19867
20932: POP
20933: POP
// result := result ^ buildings ;
20934: LD_ADDR_VAR 0 7
20938: PUSH
20939: LD_VAR 0 7
20943: PUSH
20944: LD_VAR 0 18
20948: ADD
20949: ST_TO_ADDR
// end else
20950: GO 21093
// begin for i = 1 to personel do
20952: LD_ADDR_VAR 0 8
20956: PUSH
20957: DOUBLE
20958: LD_INT 1
20960: DEC
20961: ST_TO_ADDR
20962: LD_VAR 0 6
20966: PUSH
20967: FOR_TO
20968: IFFALSE 21091
// begin if i > 4 then
20970: LD_VAR 0 8
20974: PUSH
20975: LD_INT 4
20977: GREATER
20978: IFFALSE 20982
// break ;
20980: GO 21091
// x := personel [ i ] ;
20982: LD_ADDR_VAR 0 13
20986: PUSH
20987: LD_VAR 0 6
20991: PUSH
20992: LD_VAR 0 8
20996: ARRAY
20997: ST_TO_ADDR
// if x = - 1 then
20998: LD_VAR 0 13
21002: PUSH
21003: LD_INT 1
21005: NEG
21006: EQUAL
21007: IFFALSE 21011
// continue ;
21009: GO 20967
// PrepareHuman ( false , i , skill ) ;
21011: LD_INT 0
21013: PPUSH
21014: LD_VAR 0 8
21018: PPUSH
21019: LD_VAR 0 4
21023: PPUSH
21024: CALL_OW 380
// un := CreateHuman ;
21028: LD_ADDR_VAR 0 14
21032: PUSH
21033: CALL_OW 44
21037: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21038: LD_VAR 0 14
21042: PPUSH
21043: LD_VAR 0 1
21047: PPUSH
21048: CALL_OW 250
21052: PPUSH
21053: LD_VAR 0 1
21057: PPUSH
21058: CALL_OW 251
21062: PPUSH
21063: LD_INT 10
21065: PPUSH
21066: LD_INT 0
21068: PPUSH
21069: CALL_OW 50
// result := result ^ un ;
21073: LD_ADDR_VAR 0 7
21077: PUSH
21078: LD_VAR 0 7
21082: PUSH
21083: LD_VAR 0 14
21087: ADD
21088: ST_TO_ADDR
// end ;
21089: GO 20967
21091: POP
21092: POP
// end ; end ;
21093: LD_VAR 0 7
21097: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
21098: LD_INT 0
21100: PPUSH
21101: PPUSH
21102: PPUSH
21103: PPUSH
21104: PPUSH
21105: PPUSH
21106: PPUSH
21107: PPUSH
21108: PPUSH
21109: PPUSH
21110: PPUSH
21111: PPUSH
21112: PPUSH
21113: PPUSH
21114: PPUSH
21115: PPUSH
// result := false ;
21116: LD_ADDR_VAR 0 3
21120: PUSH
21121: LD_INT 0
21123: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
21124: LD_VAR 0 1
21128: NOT
21129: PUSH
21130: LD_VAR 0 1
21134: PPUSH
21135: CALL_OW 266
21139: PUSH
21140: LD_INT 32
21142: PUSH
21143: LD_INT 33
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: IN
21150: NOT
21151: OR
21152: IFFALSE 21156
// exit ;
21154: GO 22292
// nat := GetNation ( tower ) ;
21156: LD_ADDR_VAR 0 12
21160: PUSH
21161: LD_VAR 0 1
21165: PPUSH
21166: CALL_OW 248
21170: ST_TO_ADDR
// side := GetSide ( tower ) ;
21171: LD_ADDR_VAR 0 16
21175: PUSH
21176: LD_VAR 0 1
21180: PPUSH
21181: CALL_OW 255
21185: ST_TO_ADDR
// x := GetX ( tower ) ;
21186: LD_ADDR_VAR 0 10
21190: PUSH
21191: LD_VAR 0 1
21195: PPUSH
21196: CALL_OW 250
21200: ST_TO_ADDR
// y := GetY ( tower ) ;
21201: LD_ADDR_VAR 0 11
21205: PUSH
21206: LD_VAR 0 1
21210: PPUSH
21211: CALL_OW 251
21215: ST_TO_ADDR
// if not x or not y then
21216: LD_VAR 0 10
21220: NOT
21221: PUSH
21222: LD_VAR 0 11
21226: NOT
21227: OR
21228: IFFALSE 21232
// exit ;
21230: GO 22292
// weapon := 0 ;
21232: LD_ADDR_VAR 0 18
21236: PUSH
21237: LD_INT 0
21239: ST_TO_ADDR
// fac_list := [ ] ;
21240: LD_ADDR_VAR 0 17
21244: PUSH
21245: EMPTY
21246: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
21247: LD_ADDR_VAR 0 6
21251: PUSH
21252: LD_VAR 0 1
21256: PPUSH
21257: CALL_OW 274
21261: PPUSH
21262: LD_VAR 0 2
21266: PPUSH
21267: CALL 18870 0 2
21271: PPUSH
21272: LD_INT 30
21274: PUSH
21275: LD_INT 3
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PPUSH
21282: CALL_OW 72
21286: ST_TO_ADDR
// if not factories then
21287: LD_VAR 0 6
21291: NOT
21292: IFFALSE 21296
// exit ;
21294: GO 22292
// for i in factories do
21296: LD_ADDR_VAR 0 8
21300: PUSH
21301: LD_VAR 0 6
21305: PUSH
21306: FOR_IN
21307: IFFALSE 21332
// fac_list := fac_list union AvailableWeaponList ( i ) ;
21309: LD_ADDR_VAR 0 17
21313: PUSH
21314: LD_VAR 0 17
21318: PUSH
21319: LD_VAR 0 8
21323: PPUSH
21324: CALL_OW 478
21328: UNION
21329: ST_TO_ADDR
21330: GO 21306
21332: POP
21333: POP
// if not fac_list then
21334: LD_VAR 0 17
21338: NOT
21339: IFFALSE 21343
// exit ;
21341: GO 22292
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
21343: LD_ADDR_VAR 0 5
21347: PUSH
21348: LD_INT 4
21350: PUSH
21351: LD_INT 5
21353: PUSH
21354: LD_INT 9
21356: PUSH
21357: LD_INT 10
21359: PUSH
21360: LD_INT 6
21362: PUSH
21363: LD_INT 7
21365: PUSH
21366: LD_INT 11
21368: PUSH
21369: EMPTY
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: PUSH
21378: LD_INT 27
21380: PUSH
21381: LD_INT 28
21383: PUSH
21384: LD_INT 26
21386: PUSH
21387: LD_INT 30
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: PUSH
21396: LD_INT 43
21398: PUSH
21399: LD_INT 44
21401: PUSH
21402: LD_INT 46
21404: PUSH
21405: LD_INT 45
21407: PUSH
21408: LD_INT 47
21410: PUSH
21411: LD_INT 49
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: LIST
21426: PUSH
21427: LD_VAR 0 12
21431: ARRAY
21432: ST_TO_ADDR
// for i in list do
21433: LD_ADDR_VAR 0 8
21437: PUSH
21438: LD_VAR 0 5
21442: PUSH
21443: FOR_IN
21444: IFFALSE 21477
// if not i in fac_list then
21446: LD_VAR 0 8
21450: PUSH
21451: LD_VAR 0 17
21455: IN
21456: NOT
21457: IFFALSE 21475
// list := list diff i ;
21459: LD_ADDR_VAR 0 5
21463: PUSH
21464: LD_VAR 0 5
21468: PUSH
21469: LD_VAR 0 8
21473: DIFF
21474: ST_TO_ADDR
21475: GO 21443
21477: POP
21478: POP
// if not list then
21479: LD_VAR 0 5
21483: NOT
21484: IFFALSE 21488
// exit ;
21486: GO 22292
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
21488: LD_VAR 0 12
21492: PUSH
21493: LD_INT 3
21495: EQUAL
21496: PUSH
21497: LD_INT 49
21499: PUSH
21500: LD_VAR 0 5
21504: IN
21505: AND
21506: PUSH
21507: LD_INT 31
21509: PPUSH
21510: LD_VAR 0 16
21514: PPUSH
21515: CALL_OW 321
21519: PUSH
21520: LD_INT 2
21522: EQUAL
21523: AND
21524: IFFALSE 21584
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
21526: LD_INT 22
21528: PUSH
21529: LD_VAR 0 16
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: PUSH
21538: LD_INT 35
21540: PUSH
21541: LD_INT 49
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: PUSH
21548: LD_INT 91
21550: PUSH
21551: LD_VAR 0 1
21555: PUSH
21556: LD_INT 10
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: LIST
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: LIST
21568: PPUSH
21569: CALL_OW 69
21573: NOT
21574: IFFALSE 21584
// weapon := ru_time_lapser ;
21576: LD_ADDR_VAR 0 18
21580: PUSH
21581: LD_INT 49
21583: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
21584: LD_VAR 0 12
21588: PUSH
21589: LD_INT 1
21591: PUSH
21592: LD_INT 2
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: IN
21599: PUSH
21600: LD_INT 11
21602: PUSH
21603: LD_VAR 0 5
21607: IN
21608: PUSH
21609: LD_INT 30
21611: PUSH
21612: LD_VAR 0 5
21616: IN
21617: OR
21618: AND
21619: PUSH
21620: LD_INT 6
21622: PPUSH
21623: LD_VAR 0 16
21627: PPUSH
21628: CALL_OW 321
21632: PUSH
21633: LD_INT 2
21635: EQUAL
21636: AND
21637: IFFALSE 21802
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
21639: LD_INT 22
21641: PUSH
21642: LD_VAR 0 16
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: LD_INT 2
21653: PUSH
21654: LD_INT 35
21656: PUSH
21657: LD_INT 11
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: PUSH
21664: LD_INT 35
21666: PUSH
21667: LD_INT 30
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: LIST
21678: PUSH
21679: LD_INT 91
21681: PUSH
21682: LD_VAR 0 1
21686: PUSH
21687: LD_INT 18
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: LIST
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: LIST
21699: PPUSH
21700: CALL_OW 69
21704: NOT
21705: PUSH
21706: LD_INT 22
21708: PUSH
21709: LD_VAR 0 16
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: PUSH
21718: LD_INT 2
21720: PUSH
21721: LD_INT 30
21723: PUSH
21724: LD_INT 32
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: PUSH
21731: LD_INT 30
21733: PUSH
21734: LD_INT 33
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: LIST
21745: PUSH
21746: LD_INT 91
21748: PUSH
21749: LD_VAR 0 1
21753: PUSH
21754: LD_INT 12
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: LIST
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: LIST
21766: PUSH
21767: EMPTY
21768: LIST
21769: PPUSH
21770: CALL_OW 69
21774: PUSH
21775: LD_INT 2
21777: GREATER
21778: AND
21779: IFFALSE 21802
// weapon := [ us_radar , ar_radar ] [ nat ] ;
21781: LD_ADDR_VAR 0 18
21785: PUSH
21786: LD_INT 11
21788: PUSH
21789: LD_INT 30
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: PUSH
21796: LD_VAR 0 12
21800: ARRAY
21801: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
21802: LD_VAR 0 18
21806: NOT
21807: PUSH
21808: LD_INT 40
21810: PPUSH
21811: LD_VAR 0 16
21815: PPUSH
21816: CALL_OW 321
21820: PUSH
21821: LD_INT 2
21823: EQUAL
21824: AND
21825: PUSH
21826: LD_INT 7
21828: PUSH
21829: LD_VAR 0 5
21833: IN
21834: PUSH
21835: LD_INT 28
21837: PUSH
21838: LD_VAR 0 5
21842: IN
21843: OR
21844: PUSH
21845: LD_INT 45
21847: PUSH
21848: LD_VAR 0 5
21852: IN
21853: OR
21854: AND
21855: IFFALSE 22109
// begin hex := GetHexInfo ( x , y ) ;
21857: LD_ADDR_VAR 0 4
21861: PUSH
21862: LD_VAR 0 10
21866: PPUSH
21867: LD_VAR 0 11
21871: PPUSH
21872: CALL_OW 546
21876: ST_TO_ADDR
// if hex [ 1 ] then
21877: LD_VAR 0 4
21881: PUSH
21882: LD_INT 1
21884: ARRAY
21885: IFFALSE 21889
// exit ;
21887: GO 22292
// height := hex [ 2 ] ;
21889: LD_ADDR_VAR 0 15
21893: PUSH
21894: LD_VAR 0 4
21898: PUSH
21899: LD_INT 2
21901: ARRAY
21902: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
21903: LD_ADDR_VAR 0 14
21907: PUSH
21908: LD_INT 0
21910: PUSH
21911: LD_INT 2
21913: PUSH
21914: LD_INT 3
21916: PUSH
21917: LD_INT 5
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: ST_TO_ADDR
// for i in tmp do
21926: LD_ADDR_VAR 0 8
21930: PUSH
21931: LD_VAR 0 14
21935: PUSH
21936: FOR_IN
21937: IFFALSE 22107
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
21939: LD_ADDR_VAR 0 9
21943: PUSH
21944: LD_VAR 0 10
21948: PPUSH
21949: LD_VAR 0 8
21953: PPUSH
21954: LD_INT 5
21956: PPUSH
21957: CALL_OW 272
21961: PUSH
21962: LD_VAR 0 11
21966: PPUSH
21967: LD_VAR 0 8
21971: PPUSH
21972: LD_INT 5
21974: PPUSH
21975: CALL_OW 273
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
21984: LD_VAR 0 9
21988: PUSH
21989: LD_INT 1
21991: ARRAY
21992: PPUSH
21993: LD_VAR 0 9
21997: PUSH
21998: LD_INT 2
22000: ARRAY
22001: PPUSH
22002: CALL_OW 488
22006: IFFALSE 22105
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
22008: LD_ADDR_VAR 0 4
22012: PUSH
22013: LD_VAR 0 9
22017: PUSH
22018: LD_INT 1
22020: ARRAY
22021: PPUSH
22022: LD_VAR 0 9
22026: PUSH
22027: LD_INT 2
22029: ARRAY
22030: PPUSH
22031: CALL_OW 546
22035: ST_TO_ADDR
// if hex [ 1 ] then
22036: LD_VAR 0 4
22040: PUSH
22041: LD_INT 1
22043: ARRAY
22044: IFFALSE 22048
// continue ;
22046: GO 21936
// h := hex [ 2 ] ;
22048: LD_ADDR_VAR 0 13
22052: PUSH
22053: LD_VAR 0 4
22057: PUSH
22058: LD_INT 2
22060: ARRAY
22061: ST_TO_ADDR
// if h + 7 < height then
22062: LD_VAR 0 13
22066: PUSH
22067: LD_INT 7
22069: PLUS
22070: PUSH
22071: LD_VAR 0 15
22075: LESS
22076: IFFALSE 22105
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
22078: LD_ADDR_VAR 0 18
22082: PUSH
22083: LD_INT 7
22085: PUSH
22086: LD_INT 28
22088: PUSH
22089: LD_INT 45
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: LIST
22096: PUSH
22097: LD_VAR 0 12
22101: ARRAY
22102: ST_TO_ADDR
// break ;
22103: GO 22107
// end ; end ; end ;
22105: GO 21936
22107: POP
22108: POP
// end ; if not weapon then
22109: LD_VAR 0 18
22113: NOT
22114: IFFALSE 22174
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
22116: LD_ADDR_VAR 0 5
22120: PUSH
22121: LD_VAR 0 5
22125: PUSH
22126: LD_INT 11
22128: PUSH
22129: LD_INT 30
22131: PUSH
22132: LD_INT 49
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: LIST
22139: DIFF
22140: ST_TO_ADDR
// if not list then
22141: LD_VAR 0 5
22145: NOT
22146: IFFALSE 22150
// exit ;
22148: GO 22292
// weapon := list [ rand ( 1 , list ) ] ;
22150: LD_ADDR_VAR 0 18
22154: PUSH
22155: LD_VAR 0 5
22159: PUSH
22160: LD_INT 1
22162: PPUSH
22163: LD_VAR 0 5
22167: PPUSH
22168: CALL_OW 12
22172: ARRAY
22173: ST_TO_ADDR
// end ; if weapon then
22174: LD_VAR 0 18
22178: IFFALSE 22292
// begin tmp := CostOfWeapon ( weapon ) ;
22180: LD_ADDR_VAR 0 14
22184: PUSH
22185: LD_VAR 0 18
22189: PPUSH
22190: CALL_OW 451
22194: ST_TO_ADDR
// j := GetBase ( tower ) ;
22195: LD_ADDR_VAR 0 9
22199: PUSH
22200: LD_VAR 0 1
22204: PPUSH
22205: CALL_OW 274
22209: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
22210: LD_VAR 0 9
22214: PPUSH
22215: LD_INT 1
22217: PPUSH
22218: CALL_OW 275
22222: PUSH
22223: LD_VAR 0 14
22227: PUSH
22228: LD_INT 1
22230: ARRAY
22231: GREATEREQUAL
22232: PUSH
22233: LD_VAR 0 9
22237: PPUSH
22238: LD_INT 2
22240: PPUSH
22241: CALL_OW 275
22245: PUSH
22246: LD_VAR 0 14
22250: PUSH
22251: LD_INT 2
22253: ARRAY
22254: GREATEREQUAL
22255: AND
22256: PUSH
22257: LD_VAR 0 9
22261: PPUSH
22262: LD_INT 3
22264: PPUSH
22265: CALL_OW 275
22269: PUSH
22270: LD_VAR 0 14
22274: PUSH
22275: LD_INT 3
22277: ARRAY
22278: GREATEREQUAL
22279: AND
22280: IFFALSE 22292
// result := weapon ;
22282: LD_ADDR_VAR 0 3
22286: PUSH
22287: LD_VAR 0 18
22291: ST_TO_ADDR
// end ; end ;
22292: LD_VAR 0 3
22296: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
22297: LD_INT 0
22299: PPUSH
22300: PPUSH
// result := true ;
22301: LD_ADDR_VAR 0 3
22305: PUSH
22306: LD_INT 1
22308: ST_TO_ADDR
// if array1 = array2 then
22309: LD_VAR 0 1
22313: PUSH
22314: LD_VAR 0 2
22318: EQUAL
22319: IFFALSE 22379
// begin for i = 1 to array1 do
22321: LD_ADDR_VAR 0 4
22325: PUSH
22326: DOUBLE
22327: LD_INT 1
22329: DEC
22330: ST_TO_ADDR
22331: LD_VAR 0 1
22335: PUSH
22336: FOR_TO
22337: IFFALSE 22375
// if array1 [ i ] <> array2 [ i ] then
22339: LD_VAR 0 1
22343: PUSH
22344: LD_VAR 0 4
22348: ARRAY
22349: PUSH
22350: LD_VAR 0 2
22354: PUSH
22355: LD_VAR 0 4
22359: ARRAY
22360: NONEQUAL
22361: IFFALSE 22373
// begin result := false ;
22363: LD_ADDR_VAR 0 3
22367: PUSH
22368: LD_INT 0
22370: ST_TO_ADDR
// break ;
22371: GO 22375
// end ;
22373: GO 22336
22375: POP
22376: POP
// end else
22377: GO 22387
// result := false ;
22379: LD_ADDR_VAR 0 3
22383: PUSH
22384: LD_INT 0
22386: ST_TO_ADDR
// end ;
22387: LD_VAR 0 3
22391: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
22392: LD_INT 0
22394: PPUSH
22395: PPUSH
22396: PPUSH
// pom := GetBase ( fac ) ;
22397: LD_ADDR_VAR 0 5
22401: PUSH
22402: LD_VAR 0 1
22406: PPUSH
22407: CALL_OW 274
22411: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
22412: LD_ADDR_VAR 0 4
22416: PUSH
22417: LD_VAR 0 2
22421: PUSH
22422: LD_INT 1
22424: ARRAY
22425: PPUSH
22426: LD_VAR 0 2
22430: PUSH
22431: LD_INT 2
22433: ARRAY
22434: PPUSH
22435: LD_VAR 0 2
22439: PUSH
22440: LD_INT 3
22442: ARRAY
22443: PPUSH
22444: LD_VAR 0 2
22448: PUSH
22449: LD_INT 4
22451: ARRAY
22452: PPUSH
22453: CALL_OW 449
22457: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22458: LD_ADDR_VAR 0 3
22462: PUSH
22463: LD_VAR 0 5
22467: PPUSH
22468: LD_INT 1
22470: PPUSH
22471: CALL_OW 275
22475: PUSH
22476: LD_VAR 0 4
22480: PUSH
22481: LD_INT 1
22483: ARRAY
22484: GREATEREQUAL
22485: PUSH
22486: LD_VAR 0 5
22490: PPUSH
22491: LD_INT 2
22493: PPUSH
22494: CALL_OW 275
22498: PUSH
22499: LD_VAR 0 4
22503: PUSH
22504: LD_INT 2
22506: ARRAY
22507: GREATEREQUAL
22508: AND
22509: PUSH
22510: LD_VAR 0 5
22514: PPUSH
22515: LD_INT 3
22517: PPUSH
22518: CALL_OW 275
22522: PUSH
22523: LD_VAR 0 4
22527: PUSH
22528: LD_INT 3
22530: ARRAY
22531: GREATEREQUAL
22532: AND
22533: ST_TO_ADDR
// end ;
22534: LD_VAR 0 3
22538: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
22539: LD_INT 0
22541: PPUSH
22542: PPUSH
22543: PPUSH
22544: PPUSH
// pom := GetBase ( building ) ;
22545: LD_ADDR_VAR 0 3
22549: PUSH
22550: LD_VAR 0 1
22554: PPUSH
22555: CALL_OW 274
22559: ST_TO_ADDR
// if not pom then
22560: LD_VAR 0 3
22564: NOT
22565: IFFALSE 22569
// exit ;
22567: GO 22739
// btype := GetBType ( building ) ;
22569: LD_ADDR_VAR 0 5
22573: PUSH
22574: LD_VAR 0 1
22578: PPUSH
22579: CALL_OW 266
22583: ST_TO_ADDR
// if btype = b_armoury then
22584: LD_VAR 0 5
22588: PUSH
22589: LD_INT 4
22591: EQUAL
22592: IFFALSE 22602
// btype := b_barracks ;
22594: LD_ADDR_VAR 0 5
22598: PUSH
22599: LD_INT 5
22601: ST_TO_ADDR
// if btype = b_depot then
22602: LD_VAR 0 5
22606: PUSH
22607: LD_INT 0
22609: EQUAL
22610: IFFALSE 22620
// btype := b_warehouse ;
22612: LD_ADDR_VAR 0 5
22616: PUSH
22617: LD_INT 1
22619: ST_TO_ADDR
// if btype = b_workshop then
22620: LD_VAR 0 5
22624: PUSH
22625: LD_INT 2
22627: EQUAL
22628: IFFALSE 22638
// btype := b_factory ;
22630: LD_ADDR_VAR 0 5
22634: PUSH
22635: LD_INT 3
22637: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22638: LD_ADDR_VAR 0 4
22642: PUSH
22643: LD_VAR 0 5
22647: PPUSH
22648: LD_VAR 0 1
22652: PPUSH
22653: CALL_OW 248
22657: PPUSH
22658: CALL_OW 450
22662: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22663: LD_ADDR_VAR 0 2
22667: PUSH
22668: LD_VAR 0 3
22672: PPUSH
22673: LD_INT 1
22675: PPUSH
22676: CALL_OW 275
22680: PUSH
22681: LD_VAR 0 4
22685: PUSH
22686: LD_INT 1
22688: ARRAY
22689: GREATEREQUAL
22690: PUSH
22691: LD_VAR 0 3
22695: PPUSH
22696: LD_INT 2
22698: PPUSH
22699: CALL_OW 275
22703: PUSH
22704: LD_VAR 0 4
22708: PUSH
22709: LD_INT 2
22711: ARRAY
22712: GREATEREQUAL
22713: AND
22714: PUSH
22715: LD_VAR 0 3
22719: PPUSH
22720: LD_INT 3
22722: PPUSH
22723: CALL_OW 275
22727: PUSH
22728: LD_VAR 0 4
22732: PUSH
22733: LD_INT 3
22735: ARRAY
22736: GREATEREQUAL
22737: AND
22738: ST_TO_ADDR
// end ;
22739: LD_VAR 0 2
22743: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
22744: LD_INT 0
22746: PPUSH
22747: PPUSH
22748: PPUSH
// pom := GetBase ( building ) ;
22749: LD_ADDR_VAR 0 4
22753: PUSH
22754: LD_VAR 0 1
22758: PPUSH
22759: CALL_OW 274
22763: ST_TO_ADDR
// if not pom then
22764: LD_VAR 0 4
22768: NOT
22769: IFFALSE 22773
// exit ;
22771: GO 22874
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22773: LD_ADDR_VAR 0 5
22777: PUSH
22778: LD_VAR 0 2
22782: PPUSH
22783: LD_VAR 0 1
22787: PPUSH
22788: CALL_OW 248
22792: PPUSH
22793: CALL_OW 450
22797: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22798: LD_ADDR_VAR 0 3
22802: PUSH
22803: LD_VAR 0 4
22807: PPUSH
22808: LD_INT 1
22810: PPUSH
22811: CALL_OW 275
22815: PUSH
22816: LD_VAR 0 5
22820: PUSH
22821: LD_INT 1
22823: ARRAY
22824: GREATEREQUAL
22825: PUSH
22826: LD_VAR 0 4
22830: PPUSH
22831: LD_INT 2
22833: PPUSH
22834: CALL_OW 275
22838: PUSH
22839: LD_VAR 0 5
22843: PUSH
22844: LD_INT 2
22846: ARRAY
22847: GREATEREQUAL
22848: AND
22849: PUSH
22850: LD_VAR 0 4
22854: PPUSH
22855: LD_INT 3
22857: PPUSH
22858: CALL_OW 275
22862: PUSH
22863: LD_VAR 0 5
22867: PUSH
22868: LD_INT 3
22870: ARRAY
22871: GREATEREQUAL
22872: AND
22873: ST_TO_ADDR
// end ;
22874: LD_VAR 0 3
22878: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
22879: LD_INT 0
22881: PPUSH
22882: PPUSH
22883: PPUSH
22884: PPUSH
22885: PPUSH
22886: PPUSH
22887: PPUSH
22888: PPUSH
22889: PPUSH
22890: PPUSH
// result := false ;
22891: LD_ADDR_VAR 0 6
22895: PUSH
22896: LD_INT 0
22898: ST_TO_ADDR
// if not base or not btype or not x or not y then
22899: LD_VAR 0 1
22903: NOT
22904: PUSH
22905: LD_VAR 0 2
22909: NOT
22910: OR
22911: PUSH
22912: LD_VAR 0 3
22916: NOT
22917: OR
22918: PUSH
22919: LD_VAR 0 4
22923: NOT
22924: OR
22925: IFFALSE 22929
// exit ;
22927: GO 23538
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
22929: LD_ADDR_VAR 0 12
22933: PUSH
22934: LD_VAR 0 2
22938: PPUSH
22939: LD_VAR 0 3
22943: PPUSH
22944: LD_VAR 0 4
22948: PPUSH
22949: LD_VAR 0 5
22953: PPUSH
22954: LD_VAR 0 1
22958: PUSH
22959: LD_INT 1
22961: ARRAY
22962: PPUSH
22963: CALL_OW 248
22967: PPUSH
22968: LD_INT 0
22970: PPUSH
22971: CALL 24375 0 6
22975: ST_TO_ADDR
// if not hexes then
22976: LD_VAR 0 12
22980: NOT
22981: IFFALSE 22985
// exit ;
22983: GO 23538
// for i = 1 to hexes do
22985: LD_ADDR_VAR 0 7
22989: PUSH
22990: DOUBLE
22991: LD_INT 1
22993: DEC
22994: ST_TO_ADDR
22995: LD_VAR 0 12
22999: PUSH
23000: FOR_TO
23001: IFFALSE 23536
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23003: LD_ADDR_VAR 0 11
23007: PUSH
23008: LD_VAR 0 12
23012: PUSH
23013: LD_VAR 0 7
23017: ARRAY
23018: PUSH
23019: LD_INT 1
23021: ARRAY
23022: PPUSH
23023: LD_VAR 0 12
23027: PUSH
23028: LD_VAR 0 7
23032: ARRAY
23033: PUSH
23034: LD_INT 2
23036: ARRAY
23037: PPUSH
23038: CALL_OW 428
23042: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
23043: LD_VAR 0 12
23047: PUSH
23048: LD_VAR 0 7
23052: ARRAY
23053: PUSH
23054: LD_INT 1
23056: ARRAY
23057: PPUSH
23058: LD_VAR 0 12
23062: PUSH
23063: LD_VAR 0 7
23067: ARRAY
23068: PUSH
23069: LD_INT 2
23071: ARRAY
23072: PPUSH
23073: CALL_OW 351
23077: PUSH
23078: LD_VAR 0 12
23082: PUSH
23083: LD_VAR 0 7
23087: ARRAY
23088: PUSH
23089: LD_INT 1
23091: ARRAY
23092: PPUSH
23093: LD_VAR 0 12
23097: PUSH
23098: LD_VAR 0 7
23102: ARRAY
23103: PUSH
23104: LD_INT 2
23106: ARRAY
23107: PPUSH
23108: CALL_OW 488
23112: NOT
23113: OR
23114: PUSH
23115: LD_VAR 0 11
23119: PPUSH
23120: CALL_OW 247
23124: PUSH
23125: LD_INT 3
23127: EQUAL
23128: OR
23129: IFFALSE 23135
// exit ;
23131: POP
23132: POP
23133: GO 23538
// if not tmp or not tmp in base then
23135: LD_VAR 0 11
23139: NOT
23140: PUSH
23141: LD_VAR 0 11
23145: PUSH
23146: LD_VAR 0 1
23150: IN
23151: NOT
23152: OR
23153: IFFALSE 23157
// continue ;
23155: GO 23000
// result := true ;
23157: LD_ADDR_VAR 0 6
23161: PUSH
23162: LD_INT 1
23164: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23165: LD_ADDR_VAR 0 15
23169: PUSH
23170: LD_VAR 0 1
23174: PPUSH
23175: LD_INT 22
23177: PUSH
23178: LD_VAR 0 11
23182: PPUSH
23183: CALL_OW 255
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: LD_INT 2
23194: PUSH
23195: LD_INT 30
23197: PUSH
23198: LD_INT 0
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 30
23207: PUSH
23208: LD_INT 1
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: LIST
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: PPUSH
23224: CALL_OW 72
23228: ST_TO_ADDR
// if dep then
23229: LD_VAR 0 15
23233: IFFALSE 23369
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
23235: LD_ADDR_VAR 0 14
23239: PUSH
23240: LD_VAR 0 15
23244: PUSH
23245: LD_INT 1
23247: ARRAY
23248: PPUSH
23249: CALL_OW 250
23253: PPUSH
23254: LD_VAR 0 15
23258: PUSH
23259: LD_INT 1
23261: ARRAY
23262: PPUSH
23263: CALL_OW 254
23267: PPUSH
23268: LD_INT 5
23270: PPUSH
23271: CALL_OW 272
23275: PUSH
23276: LD_VAR 0 15
23280: PUSH
23281: LD_INT 1
23283: ARRAY
23284: PPUSH
23285: CALL_OW 251
23289: PPUSH
23290: LD_VAR 0 15
23294: PUSH
23295: LD_INT 1
23297: ARRAY
23298: PPUSH
23299: CALL_OW 254
23303: PPUSH
23304: LD_INT 5
23306: PPUSH
23307: CALL_OW 273
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
23316: LD_VAR 0 14
23320: PUSH
23321: LD_INT 1
23323: ARRAY
23324: PPUSH
23325: LD_VAR 0 14
23329: PUSH
23330: LD_INT 2
23332: ARRAY
23333: PPUSH
23334: CALL_OW 488
23338: IFFALSE 23369
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
23340: LD_VAR 0 11
23344: PPUSH
23345: LD_VAR 0 14
23349: PUSH
23350: LD_INT 1
23352: ARRAY
23353: PPUSH
23354: LD_VAR 0 14
23358: PUSH
23359: LD_INT 2
23361: ARRAY
23362: PPUSH
23363: CALL_OW 111
// continue ;
23367: GO 23000
// end ; end ; r := GetDir ( tmp ) ;
23369: LD_ADDR_VAR 0 13
23373: PUSH
23374: LD_VAR 0 11
23378: PPUSH
23379: CALL_OW 254
23383: ST_TO_ADDR
// if r = 5 then
23384: LD_VAR 0 13
23388: PUSH
23389: LD_INT 5
23391: EQUAL
23392: IFFALSE 23402
// r := 0 ;
23394: LD_ADDR_VAR 0 13
23398: PUSH
23399: LD_INT 0
23401: ST_TO_ADDR
// for j = r to 5 do
23402: LD_ADDR_VAR 0 8
23406: PUSH
23407: DOUBLE
23408: LD_VAR 0 13
23412: DEC
23413: ST_TO_ADDR
23414: LD_INT 5
23416: PUSH
23417: FOR_TO
23418: IFFALSE 23532
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
23420: LD_ADDR_VAR 0 9
23424: PUSH
23425: LD_VAR 0 11
23429: PPUSH
23430: CALL_OW 250
23434: PPUSH
23435: LD_VAR 0 8
23439: PPUSH
23440: LD_INT 2
23442: PPUSH
23443: CALL_OW 272
23447: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
23448: LD_ADDR_VAR 0 10
23452: PUSH
23453: LD_VAR 0 11
23457: PPUSH
23458: CALL_OW 251
23462: PPUSH
23463: LD_VAR 0 8
23467: PPUSH
23468: LD_INT 2
23470: PPUSH
23471: CALL_OW 273
23475: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
23476: LD_VAR 0 9
23480: PPUSH
23481: LD_VAR 0 10
23485: PPUSH
23486: CALL_OW 488
23490: PUSH
23491: LD_VAR 0 9
23495: PPUSH
23496: LD_VAR 0 10
23500: PPUSH
23501: CALL_OW 428
23505: NOT
23506: AND
23507: IFFALSE 23530
// begin ComMoveXY ( tmp , _x , _y ) ;
23509: LD_VAR 0 11
23513: PPUSH
23514: LD_VAR 0 9
23518: PPUSH
23519: LD_VAR 0 10
23523: PPUSH
23524: CALL_OW 111
// break ;
23528: GO 23532
// end ; end ;
23530: GO 23417
23532: POP
23533: POP
// end ;
23534: GO 23000
23536: POP
23537: POP
// end ;
23538: LD_VAR 0 6
23542: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
23543: LD_INT 0
23545: PPUSH
23546: PPUSH
23547: PPUSH
23548: PPUSH
23549: PPUSH
23550: PPUSH
23551: PPUSH
23552: PPUSH
23553: PPUSH
23554: PPUSH
// result := false ;
23555: LD_ADDR_VAR 0 6
23559: PUSH
23560: LD_INT 0
23562: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
23563: LD_VAR 0 1
23567: NOT
23568: PUSH
23569: LD_VAR 0 1
23573: PPUSH
23574: CALL_OW 266
23578: PUSH
23579: LD_INT 0
23581: PUSH
23582: LD_INT 1
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: IN
23589: NOT
23590: OR
23591: PUSH
23592: LD_VAR 0 2
23596: NOT
23597: OR
23598: PUSH
23599: LD_VAR 0 5
23603: PUSH
23604: LD_INT 0
23606: PUSH
23607: LD_INT 1
23609: PUSH
23610: LD_INT 2
23612: PUSH
23613: LD_INT 3
23615: PUSH
23616: LD_INT 4
23618: PUSH
23619: LD_INT 5
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: IN
23630: NOT
23631: OR
23632: PUSH
23633: LD_VAR 0 3
23637: PPUSH
23638: LD_VAR 0 4
23642: PPUSH
23643: CALL_OW 488
23647: NOT
23648: OR
23649: IFFALSE 23653
// exit ;
23651: GO 24370
// pom := GetBase ( depot ) ;
23653: LD_ADDR_VAR 0 10
23657: PUSH
23658: LD_VAR 0 1
23662: PPUSH
23663: CALL_OW 274
23667: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
23668: LD_ADDR_VAR 0 11
23672: PUSH
23673: LD_VAR 0 2
23677: PPUSH
23678: LD_VAR 0 1
23682: PPUSH
23683: CALL_OW 248
23687: PPUSH
23688: CALL_OW 450
23692: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
23693: LD_VAR 0 10
23697: PPUSH
23698: LD_INT 1
23700: PPUSH
23701: CALL_OW 275
23705: PUSH
23706: LD_VAR 0 11
23710: PUSH
23711: LD_INT 1
23713: ARRAY
23714: GREATEREQUAL
23715: PUSH
23716: LD_VAR 0 10
23720: PPUSH
23721: LD_INT 2
23723: PPUSH
23724: CALL_OW 275
23728: PUSH
23729: LD_VAR 0 11
23733: PUSH
23734: LD_INT 2
23736: ARRAY
23737: GREATEREQUAL
23738: AND
23739: PUSH
23740: LD_VAR 0 10
23744: PPUSH
23745: LD_INT 3
23747: PPUSH
23748: CALL_OW 275
23752: PUSH
23753: LD_VAR 0 11
23757: PUSH
23758: LD_INT 3
23760: ARRAY
23761: GREATEREQUAL
23762: AND
23763: NOT
23764: IFFALSE 23768
// exit ;
23766: GO 24370
// if GetBType ( depot ) = b_depot then
23768: LD_VAR 0 1
23772: PPUSH
23773: CALL_OW 266
23777: PUSH
23778: LD_INT 0
23780: EQUAL
23781: IFFALSE 23793
// dist := 28 else
23783: LD_ADDR_VAR 0 14
23787: PUSH
23788: LD_INT 28
23790: ST_TO_ADDR
23791: GO 23801
// dist := 36 ;
23793: LD_ADDR_VAR 0 14
23797: PUSH
23798: LD_INT 36
23800: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
23801: LD_VAR 0 1
23805: PPUSH
23806: LD_VAR 0 3
23810: PPUSH
23811: LD_VAR 0 4
23815: PPUSH
23816: CALL_OW 297
23820: PUSH
23821: LD_VAR 0 14
23825: GREATER
23826: IFFALSE 23830
// exit ;
23828: GO 24370
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
23830: LD_ADDR_VAR 0 12
23834: PUSH
23835: LD_VAR 0 2
23839: PPUSH
23840: LD_VAR 0 3
23844: PPUSH
23845: LD_VAR 0 4
23849: PPUSH
23850: LD_VAR 0 5
23854: PPUSH
23855: LD_VAR 0 1
23859: PPUSH
23860: CALL_OW 248
23864: PPUSH
23865: LD_INT 0
23867: PPUSH
23868: CALL 24375 0 6
23872: ST_TO_ADDR
// if not hexes then
23873: LD_VAR 0 12
23877: NOT
23878: IFFALSE 23882
// exit ;
23880: GO 24370
// hex := GetHexInfo ( x , y ) ;
23882: LD_ADDR_VAR 0 15
23886: PUSH
23887: LD_VAR 0 3
23891: PPUSH
23892: LD_VAR 0 4
23896: PPUSH
23897: CALL_OW 546
23901: ST_TO_ADDR
// if hex [ 1 ] then
23902: LD_VAR 0 15
23906: PUSH
23907: LD_INT 1
23909: ARRAY
23910: IFFALSE 23914
// exit ;
23912: GO 24370
// height := hex [ 2 ] ;
23914: LD_ADDR_VAR 0 13
23918: PUSH
23919: LD_VAR 0 15
23923: PUSH
23924: LD_INT 2
23926: ARRAY
23927: ST_TO_ADDR
// for i = 1 to hexes do
23928: LD_ADDR_VAR 0 7
23932: PUSH
23933: DOUBLE
23934: LD_INT 1
23936: DEC
23937: ST_TO_ADDR
23938: LD_VAR 0 12
23942: PUSH
23943: FOR_TO
23944: IFFALSE 24274
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
23946: LD_VAR 0 12
23950: PUSH
23951: LD_VAR 0 7
23955: ARRAY
23956: PUSH
23957: LD_INT 1
23959: ARRAY
23960: PPUSH
23961: LD_VAR 0 12
23965: PUSH
23966: LD_VAR 0 7
23970: ARRAY
23971: PUSH
23972: LD_INT 2
23974: ARRAY
23975: PPUSH
23976: CALL_OW 488
23980: NOT
23981: PUSH
23982: LD_VAR 0 12
23986: PUSH
23987: LD_VAR 0 7
23991: ARRAY
23992: PUSH
23993: LD_INT 1
23995: ARRAY
23996: PPUSH
23997: LD_VAR 0 12
24001: PUSH
24002: LD_VAR 0 7
24006: ARRAY
24007: PUSH
24008: LD_INT 2
24010: ARRAY
24011: PPUSH
24012: CALL_OW 428
24016: PUSH
24017: LD_INT 0
24019: GREATER
24020: OR
24021: PUSH
24022: LD_VAR 0 12
24026: PUSH
24027: LD_VAR 0 7
24031: ARRAY
24032: PUSH
24033: LD_INT 1
24035: ARRAY
24036: PPUSH
24037: LD_VAR 0 12
24041: PUSH
24042: LD_VAR 0 7
24046: ARRAY
24047: PUSH
24048: LD_INT 2
24050: ARRAY
24051: PPUSH
24052: CALL_OW 351
24056: OR
24057: IFFALSE 24063
// exit ;
24059: POP
24060: POP
24061: GO 24370
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24063: LD_ADDR_VAR 0 8
24067: PUSH
24068: LD_VAR 0 12
24072: PUSH
24073: LD_VAR 0 7
24077: ARRAY
24078: PUSH
24079: LD_INT 1
24081: ARRAY
24082: PPUSH
24083: LD_VAR 0 12
24087: PUSH
24088: LD_VAR 0 7
24092: ARRAY
24093: PUSH
24094: LD_INT 2
24096: ARRAY
24097: PPUSH
24098: CALL_OW 546
24102: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
24103: LD_VAR 0 8
24107: PUSH
24108: LD_INT 1
24110: ARRAY
24111: PUSH
24112: LD_VAR 0 8
24116: PUSH
24117: LD_INT 2
24119: ARRAY
24120: PUSH
24121: LD_VAR 0 13
24125: PUSH
24126: LD_INT 2
24128: PLUS
24129: GREATER
24130: OR
24131: PUSH
24132: LD_VAR 0 8
24136: PUSH
24137: LD_INT 2
24139: ARRAY
24140: PUSH
24141: LD_VAR 0 13
24145: PUSH
24146: LD_INT 2
24148: MINUS
24149: LESS
24150: OR
24151: PUSH
24152: LD_VAR 0 8
24156: PUSH
24157: LD_INT 3
24159: ARRAY
24160: PUSH
24161: LD_INT 0
24163: PUSH
24164: LD_INT 8
24166: PUSH
24167: LD_INT 9
24169: PUSH
24170: LD_INT 10
24172: PUSH
24173: LD_INT 11
24175: PUSH
24176: LD_INT 12
24178: PUSH
24179: LD_INT 13
24181: PUSH
24182: LD_INT 16
24184: PUSH
24185: LD_INT 17
24187: PUSH
24188: LD_INT 18
24190: PUSH
24191: LD_INT 19
24193: PUSH
24194: LD_INT 20
24196: PUSH
24197: LD_INT 21
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: IN
24215: NOT
24216: OR
24217: PUSH
24218: LD_VAR 0 8
24222: PUSH
24223: LD_INT 5
24225: ARRAY
24226: NOT
24227: OR
24228: PUSH
24229: LD_VAR 0 8
24233: PUSH
24234: LD_INT 6
24236: ARRAY
24237: PUSH
24238: LD_INT 1
24240: PUSH
24241: LD_INT 2
24243: PUSH
24244: LD_INT 7
24246: PUSH
24247: LD_INT 9
24249: PUSH
24250: LD_INT 10
24252: PUSH
24253: LD_INT 11
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: IN
24264: NOT
24265: OR
24266: IFFALSE 24272
// exit ;
24268: POP
24269: POP
24270: GO 24370
// end ;
24272: GO 23943
24274: POP
24275: POP
// side := GetSide ( depot ) ;
24276: LD_ADDR_VAR 0 9
24280: PUSH
24281: LD_VAR 0 1
24285: PPUSH
24286: CALL_OW 255
24290: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
24291: LD_VAR 0 9
24295: PPUSH
24296: LD_VAR 0 3
24300: PPUSH
24301: LD_VAR 0 4
24305: PPUSH
24306: LD_INT 20
24308: PPUSH
24309: CALL 17024 0 4
24313: PUSH
24314: LD_INT 4
24316: ARRAY
24317: IFFALSE 24321
// exit ;
24319: GO 24370
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
24321: LD_VAR 0 2
24325: PUSH
24326: LD_INT 29
24328: PUSH
24329: LD_INT 30
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: IN
24336: PUSH
24337: LD_VAR 0 3
24341: PPUSH
24342: LD_VAR 0 4
24346: PPUSH
24347: LD_VAR 0 9
24351: PPUSH
24352: CALL_OW 440
24356: NOT
24357: AND
24358: IFFALSE 24362
// exit ;
24360: GO 24370
// result := true ;
24362: LD_ADDR_VAR 0 6
24366: PUSH
24367: LD_INT 1
24369: ST_TO_ADDR
// end ;
24370: LD_VAR 0 6
24374: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
24375: LD_INT 0
24377: PPUSH
24378: PPUSH
24379: PPUSH
24380: PPUSH
24381: PPUSH
24382: PPUSH
24383: PPUSH
24384: PPUSH
24385: PPUSH
24386: PPUSH
24387: PPUSH
24388: PPUSH
24389: PPUSH
24390: PPUSH
24391: PPUSH
24392: PPUSH
24393: PPUSH
24394: PPUSH
24395: PPUSH
24396: PPUSH
24397: PPUSH
24398: PPUSH
24399: PPUSH
24400: PPUSH
24401: PPUSH
24402: PPUSH
24403: PPUSH
24404: PPUSH
24405: PPUSH
24406: PPUSH
24407: PPUSH
24408: PPUSH
24409: PPUSH
24410: PPUSH
24411: PPUSH
24412: PPUSH
24413: PPUSH
24414: PPUSH
24415: PPUSH
24416: PPUSH
24417: PPUSH
24418: PPUSH
24419: PPUSH
24420: PPUSH
24421: PPUSH
24422: PPUSH
24423: PPUSH
24424: PPUSH
24425: PPUSH
24426: PPUSH
24427: PPUSH
24428: PPUSH
24429: PPUSH
24430: PPUSH
24431: PPUSH
24432: PPUSH
24433: PPUSH
24434: PPUSH
// result = [ ] ;
24435: LD_ADDR_VAR 0 7
24439: PUSH
24440: EMPTY
24441: ST_TO_ADDR
// temp_list = [ ] ;
24442: LD_ADDR_VAR 0 9
24446: PUSH
24447: EMPTY
24448: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
24449: LD_VAR 0 4
24453: PUSH
24454: LD_INT 0
24456: PUSH
24457: LD_INT 1
24459: PUSH
24460: LD_INT 2
24462: PUSH
24463: LD_INT 3
24465: PUSH
24466: LD_INT 4
24468: PUSH
24469: LD_INT 5
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: IN
24480: NOT
24481: PUSH
24482: LD_VAR 0 1
24486: PUSH
24487: LD_INT 0
24489: PUSH
24490: LD_INT 1
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: IN
24497: PUSH
24498: LD_VAR 0 5
24502: PUSH
24503: LD_INT 1
24505: PUSH
24506: LD_INT 2
24508: PUSH
24509: LD_INT 3
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: LIST
24516: IN
24517: NOT
24518: AND
24519: OR
24520: IFFALSE 24524
// exit ;
24522: GO 42915
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
24524: LD_VAR 0 1
24528: PUSH
24529: LD_INT 6
24531: PUSH
24532: LD_INT 7
24534: PUSH
24535: LD_INT 8
24537: PUSH
24538: LD_INT 13
24540: PUSH
24541: LD_INT 12
24543: PUSH
24544: LD_INT 15
24546: PUSH
24547: LD_INT 11
24549: PUSH
24550: LD_INT 14
24552: PUSH
24553: LD_INT 10
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: IN
24567: IFFALSE 24577
// btype = b_lab ;
24569: LD_ADDR_VAR 0 1
24573: PUSH
24574: LD_INT 6
24576: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
24577: LD_VAR 0 6
24581: PUSH
24582: LD_INT 0
24584: PUSH
24585: LD_INT 1
24587: PUSH
24588: LD_INT 2
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: LIST
24595: IN
24596: NOT
24597: PUSH
24598: LD_VAR 0 1
24602: PUSH
24603: LD_INT 0
24605: PUSH
24606: LD_INT 1
24608: PUSH
24609: LD_INT 2
24611: PUSH
24612: LD_INT 3
24614: PUSH
24615: LD_INT 6
24617: PUSH
24618: LD_INT 36
24620: PUSH
24621: LD_INT 4
24623: PUSH
24624: LD_INT 5
24626: PUSH
24627: LD_INT 31
24629: PUSH
24630: LD_INT 32
24632: PUSH
24633: LD_INT 33
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: IN
24649: NOT
24650: PUSH
24651: LD_VAR 0 6
24655: PUSH
24656: LD_INT 1
24658: EQUAL
24659: AND
24660: OR
24661: PUSH
24662: LD_VAR 0 1
24666: PUSH
24667: LD_INT 2
24669: PUSH
24670: LD_INT 3
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: IN
24677: NOT
24678: PUSH
24679: LD_VAR 0 6
24683: PUSH
24684: LD_INT 2
24686: EQUAL
24687: AND
24688: OR
24689: IFFALSE 24699
// mode = 0 ;
24691: LD_ADDR_VAR 0 6
24695: PUSH
24696: LD_INT 0
24698: ST_TO_ADDR
// case mode of 0 :
24699: LD_VAR 0 6
24703: PUSH
24704: LD_INT 0
24706: DOUBLE
24707: EQUAL
24708: IFTRUE 24712
24710: GO 36165
24712: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24713: LD_ADDR_VAR 0 11
24717: PUSH
24718: LD_INT 0
24720: PUSH
24721: LD_INT 0
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: LD_INT 0
24730: PUSH
24731: LD_INT 1
24733: NEG
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: LD_INT 1
24741: PUSH
24742: LD_INT 0
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PUSH
24749: LD_INT 1
24751: PUSH
24752: LD_INT 1
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: LD_INT 0
24761: PUSH
24762: LD_INT 1
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: PUSH
24769: LD_INT 1
24771: NEG
24772: PUSH
24773: LD_INT 0
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: LD_INT 1
24782: NEG
24783: PUSH
24784: LD_INT 1
24786: NEG
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: PUSH
24792: LD_INT 1
24794: NEG
24795: PUSH
24796: LD_INT 2
24798: NEG
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: PUSH
24804: LD_INT 0
24806: PUSH
24807: LD_INT 2
24809: NEG
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 1
24817: PUSH
24818: LD_INT 1
24820: NEG
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: LD_INT 1
24828: PUSH
24829: LD_INT 2
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: LD_INT 0
24838: PUSH
24839: LD_INT 2
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PUSH
24846: LD_INT 1
24848: NEG
24849: PUSH
24850: LD_INT 1
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 1
24859: PUSH
24860: LD_INT 3
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 0
24869: PUSH
24870: LD_INT 3
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 1
24879: NEG
24880: PUSH
24881: LD_INT 2
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24906: LD_ADDR_VAR 0 12
24910: PUSH
24911: LD_INT 0
24913: PUSH
24914: LD_INT 0
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: PUSH
24921: LD_INT 0
24923: PUSH
24924: LD_INT 1
24926: NEG
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 1
24934: PUSH
24935: LD_INT 0
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: LD_INT 1
24944: PUSH
24945: LD_INT 1
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 0
24954: PUSH
24955: LD_INT 1
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PUSH
24962: LD_INT 1
24964: NEG
24965: PUSH
24966: LD_INT 0
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 1
24975: NEG
24976: PUSH
24977: LD_INT 1
24979: NEG
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: LD_INT 1
24987: PUSH
24988: LD_INT 1
24990: NEG
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PUSH
24996: LD_INT 2
24998: PUSH
24999: LD_INT 0
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: LD_INT 2
25008: PUSH
25009: LD_INT 1
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: LD_INT 1
25018: NEG
25019: PUSH
25020: LD_INT 1
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: PUSH
25027: LD_INT 2
25029: NEG
25030: PUSH
25031: LD_INT 0
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: PUSH
25038: LD_INT 2
25040: NEG
25041: PUSH
25042: LD_INT 1
25044: NEG
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: LD_INT 2
25052: NEG
25053: PUSH
25054: LD_INT 1
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PUSH
25061: LD_INT 3
25063: NEG
25064: PUSH
25065: LD_INT 0
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: PUSH
25072: LD_INT 3
25074: NEG
25075: PUSH
25076: LD_INT 1
25078: NEG
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25102: LD_ADDR_VAR 0 13
25106: PUSH
25107: LD_INT 0
25109: PUSH
25110: LD_INT 0
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 0
25119: PUSH
25120: LD_INT 1
25122: NEG
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 1
25130: PUSH
25131: LD_INT 0
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 1
25140: PUSH
25141: LD_INT 1
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: LD_INT 0
25150: PUSH
25151: LD_INT 1
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 1
25160: NEG
25161: PUSH
25162: LD_INT 0
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 1
25171: NEG
25172: PUSH
25173: LD_INT 1
25175: NEG
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 1
25183: NEG
25184: PUSH
25185: LD_INT 2
25187: NEG
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PUSH
25193: LD_INT 2
25195: PUSH
25196: LD_INT 1
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: PUSH
25203: LD_INT 2
25205: PUSH
25206: LD_INT 2
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PUSH
25213: LD_INT 1
25215: PUSH
25216: LD_INT 2
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: LD_INT 2
25225: NEG
25226: PUSH
25227: LD_INT 1
25229: NEG
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: LD_INT 2
25237: NEG
25238: PUSH
25239: LD_INT 2
25241: NEG
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 2
25249: NEG
25250: PUSH
25251: LD_INT 3
25253: NEG
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 3
25261: NEG
25262: PUSH
25263: LD_INT 2
25265: NEG
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PUSH
25271: LD_INT 3
25273: NEG
25274: PUSH
25275: LD_INT 3
25277: NEG
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25301: LD_ADDR_VAR 0 14
25305: PUSH
25306: LD_INT 0
25308: PUSH
25309: LD_INT 0
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: PUSH
25316: LD_INT 0
25318: PUSH
25319: LD_INT 1
25321: NEG
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 1
25329: PUSH
25330: LD_INT 0
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PUSH
25337: LD_INT 1
25339: PUSH
25340: LD_INT 1
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 0
25349: PUSH
25350: LD_INT 1
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PUSH
25357: LD_INT 1
25359: NEG
25360: PUSH
25361: LD_INT 0
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 1
25370: NEG
25371: PUSH
25372: LD_INT 1
25374: NEG
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PUSH
25380: LD_INT 1
25382: NEG
25383: PUSH
25384: LD_INT 2
25386: NEG
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 0
25394: PUSH
25395: LD_INT 2
25397: NEG
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 1
25405: PUSH
25406: LD_INT 1
25408: NEG
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PUSH
25414: LD_INT 1
25416: PUSH
25417: LD_INT 2
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: LD_INT 0
25426: PUSH
25427: LD_INT 2
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PUSH
25434: LD_INT 1
25436: NEG
25437: PUSH
25438: LD_INT 1
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 1
25447: NEG
25448: PUSH
25449: LD_INT 3
25451: NEG
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: LD_INT 0
25459: PUSH
25460: LD_INT 3
25462: NEG
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 1
25470: PUSH
25471: LD_INT 2
25473: NEG
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25497: LD_ADDR_VAR 0 15
25501: PUSH
25502: LD_INT 0
25504: PUSH
25505: LD_INT 0
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: LD_INT 0
25514: PUSH
25515: LD_INT 1
25517: NEG
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 1
25525: PUSH
25526: LD_INT 0
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 1
25535: PUSH
25536: LD_INT 1
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 0
25545: PUSH
25546: LD_INT 1
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 1
25555: NEG
25556: PUSH
25557: LD_INT 0
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: LD_INT 1
25566: NEG
25567: PUSH
25568: LD_INT 1
25570: NEG
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 1
25578: PUSH
25579: LD_INT 1
25581: NEG
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 2
25589: PUSH
25590: LD_INT 0
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 2
25599: PUSH
25600: LD_INT 1
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: LD_INT 1
25609: NEG
25610: PUSH
25611: LD_INT 1
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PUSH
25618: LD_INT 2
25620: NEG
25621: PUSH
25622: LD_INT 0
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 2
25631: NEG
25632: PUSH
25633: LD_INT 1
25635: NEG
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: LD_INT 2
25643: PUSH
25644: LD_INT 1
25646: NEG
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 3
25654: PUSH
25655: LD_INT 0
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: LD_INT 3
25664: PUSH
25665: LD_INT 1
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25690: LD_ADDR_VAR 0 16
25694: PUSH
25695: LD_INT 0
25697: PUSH
25698: LD_INT 0
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: LD_INT 0
25707: PUSH
25708: LD_INT 1
25710: NEG
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 1
25718: PUSH
25719: LD_INT 0
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 1
25728: PUSH
25729: LD_INT 1
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 0
25738: PUSH
25739: LD_INT 1
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: LD_INT 1
25748: NEG
25749: PUSH
25750: LD_INT 0
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 1
25759: NEG
25760: PUSH
25761: LD_INT 1
25763: NEG
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 1
25771: NEG
25772: PUSH
25773: LD_INT 2
25775: NEG
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 2
25783: PUSH
25784: LD_INT 1
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: LD_INT 2
25793: PUSH
25794: LD_INT 2
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 1
25803: PUSH
25804: LD_INT 2
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 2
25813: NEG
25814: PUSH
25815: LD_INT 1
25817: NEG
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: LD_INT 2
25825: NEG
25826: PUSH
25827: LD_INT 2
25829: NEG
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: LD_INT 3
25837: PUSH
25838: LD_INT 2
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 3
25847: PUSH
25848: LD_INT 3
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 2
25857: PUSH
25858: LD_INT 3
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25883: LD_ADDR_VAR 0 17
25887: PUSH
25888: LD_INT 0
25890: PUSH
25891: LD_INT 0
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 0
25900: PUSH
25901: LD_INT 1
25903: NEG
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 1
25911: PUSH
25912: LD_INT 0
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: LD_INT 1
25921: PUSH
25922: LD_INT 1
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: LD_INT 0
25931: PUSH
25932: LD_INT 1
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 1
25941: NEG
25942: PUSH
25943: LD_INT 0
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: LD_INT 1
25952: NEG
25953: PUSH
25954: LD_INT 1
25956: NEG
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 1
25964: NEG
25965: PUSH
25966: LD_INT 2
25968: NEG
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: LD_INT 0
25976: PUSH
25977: LD_INT 2
25979: NEG
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 1
25987: PUSH
25988: LD_INT 1
25990: NEG
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 2
25998: PUSH
25999: LD_INT 0
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PUSH
26006: LD_INT 2
26008: PUSH
26009: LD_INT 1
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 2
26018: PUSH
26019: LD_INT 2
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 1
26028: PUSH
26029: LD_INT 2
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 0
26038: PUSH
26039: LD_INT 2
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 1
26048: NEG
26049: PUSH
26050: LD_INT 1
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 2
26059: NEG
26060: PUSH
26061: LD_INT 0
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 2
26070: NEG
26071: PUSH
26072: LD_INT 1
26074: NEG
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 2
26082: NEG
26083: PUSH
26084: LD_INT 2
26086: NEG
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26113: LD_ADDR_VAR 0 18
26117: PUSH
26118: LD_INT 0
26120: PUSH
26121: LD_INT 0
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 0
26130: PUSH
26131: LD_INT 1
26133: NEG
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 1
26141: PUSH
26142: LD_INT 0
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 1
26151: PUSH
26152: LD_INT 1
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: LD_INT 0
26161: PUSH
26162: LD_INT 1
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 1
26171: NEG
26172: PUSH
26173: LD_INT 0
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: PUSH
26180: LD_INT 1
26182: NEG
26183: PUSH
26184: LD_INT 1
26186: NEG
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 1
26194: NEG
26195: PUSH
26196: LD_INT 2
26198: NEG
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PUSH
26204: LD_INT 0
26206: PUSH
26207: LD_INT 2
26209: NEG
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 1
26217: PUSH
26218: LD_INT 1
26220: NEG
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 2
26228: PUSH
26229: LD_INT 0
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: LD_INT 2
26238: PUSH
26239: LD_INT 1
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 2
26248: PUSH
26249: LD_INT 2
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: LD_INT 1
26258: PUSH
26259: LD_INT 2
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 0
26268: PUSH
26269: LD_INT 2
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 1
26278: NEG
26279: PUSH
26280: LD_INT 1
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: LD_INT 2
26289: NEG
26290: PUSH
26291: LD_INT 0
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: LD_INT 2
26300: NEG
26301: PUSH
26302: LD_INT 1
26304: NEG
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: PUSH
26310: LD_INT 2
26312: NEG
26313: PUSH
26314: LD_INT 2
26316: NEG
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26343: LD_ADDR_VAR 0 19
26347: PUSH
26348: LD_INT 0
26350: PUSH
26351: LD_INT 0
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 0
26360: PUSH
26361: LD_INT 1
26363: NEG
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 1
26371: PUSH
26372: LD_INT 0
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PUSH
26379: LD_INT 1
26381: PUSH
26382: LD_INT 1
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 0
26391: PUSH
26392: LD_INT 1
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: LD_INT 1
26401: NEG
26402: PUSH
26403: LD_INT 0
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: LD_INT 1
26412: NEG
26413: PUSH
26414: LD_INT 1
26416: NEG
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PUSH
26422: LD_INT 1
26424: NEG
26425: PUSH
26426: LD_INT 2
26428: NEG
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: PUSH
26434: LD_INT 0
26436: PUSH
26437: LD_INT 2
26439: NEG
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 1
26447: PUSH
26448: LD_INT 1
26450: NEG
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 2
26458: PUSH
26459: LD_INT 0
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 2
26468: PUSH
26469: LD_INT 1
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 2
26478: PUSH
26479: LD_INT 2
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: PUSH
26486: LD_INT 1
26488: PUSH
26489: LD_INT 2
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: LD_INT 0
26498: PUSH
26499: LD_INT 2
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: PUSH
26506: LD_INT 1
26508: NEG
26509: PUSH
26510: LD_INT 1
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 2
26519: NEG
26520: PUSH
26521: LD_INT 0
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: LD_INT 2
26530: NEG
26531: PUSH
26532: LD_INT 1
26534: NEG
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: LD_INT 2
26542: NEG
26543: PUSH
26544: LD_INT 2
26546: NEG
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26573: LD_ADDR_VAR 0 20
26577: PUSH
26578: LD_INT 0
26580: PUSH
26581: LD_INT 0
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PUSH
26588: LD_INT 0
26590: PUSH
26591: LD_INT 1
26593: NEG
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: PUSH
26599: LD_INT 1
26601: PUSH
26602: LD_INT 0
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: LD_INT 1
26611: PUSH
26612: LD_INT 1
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 0
26621: PUSH
26622: LD_INT 1
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: LD_INT 1
26631: NEG
26632: PUSH
26633: LD_INT 0
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PUSH
26640: LD_INT 1
26642: NEG
26643: PUSH
26644: LD_INT 1
26646: NEG
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: LD_INT 1
26654: NEG
26655: PUSH
26656: LD_INT 2
26658: NEG
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 0
26666: PUSH
26667: LD_INT 2
26669: NEG
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 1
26677: PUSH
26678: LD_INT 1
26680: NEG
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 2
26688: PUSH
26689: LD_INT 0
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 2
26698: PUSH
26699: LD_INT 1
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 2
26708: PUSH
26709: LD_INT 2
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 1
26718: PUSH
26719: LD_INT 2
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: LD_INT 0
26728: PUSH
26729: LD_INT 2
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PUSH
26736: LD_INT 1
26738: NEG
26739: PUSH
26740: LD_INT 1
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: LD_INT 2
26749: NEG
26750: PUSH
26751: LD_INT 0
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: PUSH
26758: LD_INT 2
26760: NEG
26761: PUSH
26762: LD_INT 1
26764: NEG
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 2
26772: NEG
26773: PUSH
26774: LD_INT 2
26776: NEG
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26803: LD_ADDR_VAR 0 21
26807: PUSH
26808: LD_INT 0
26810: PUSH
26811: LD_INT 0
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 0
26820: PUSH
26821: LD_INT 1
26823: NEG
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 1
26831: PUSH
26832: LD_INT 0
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 1
26841: PUSH
26842: LD_INT 1
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 0
26851: PUSH
26852: LD_INT 1
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: LD_INT 1
26861: NEG
26862: PUSH
26863: LD_INT 0
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: LD_INT 1
26872: NEG
26873: PUSH
26874: LD_INT 1
26876: NEG
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PUSH
26882: LD_INT 1
26884: NEG
26885: PUSH
26886: LD_INT 2
26888: NEG
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PUSH
26894: LD_INT 0
26896: PUSH
26897: LD_INT 2
26899: NEG
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 1
26907: PUSH
26908: LD_INT 1
26910: NEG
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 2
26918: PUSH
26919: LD_INT 0
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: LD_INT 2
26928: PUSH
26929: LD_INT 1
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 2
26938: PUSH
26939: LD_INT 2
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: LD_INT 1
26948: PUSH
26949: LD_INT 2
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 0
26958: PUSH
26959: LD_INT 2
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: LD_INT 1
26968: NEG
26969: PUSH
26970: LD_INT 1
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 2
26979: NEG
26980: PUSH
26981: LD_INT 0
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: LD_INT 2
26990: NEG
26991: PUSH
26992: LD_INT 1
26994: NEG
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: PUSH
27000: LD_INT 2
27002: NEG
27003: PUSH
27004: LD_INT 2
27006: NEG
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27033: LD_ADDR_VAR 0 22
27037: PUSH
27038: LD_INT 0
27040: PUSH
27041: LD_INT 0
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: LD_INT 0
27050: PUSH
27051: LD_INT 1
27053: NEG
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: LD_INT 1
27061: PUSH
27062: LD_INT 0
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: PUSH
27069: LD_INT 1
27071: PUSH
27072: LD_INT 1
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 0
27081: PUSH
27082: LD_INT 1
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 1
27091: NEG
27092: PUSH
27093: LD_INT 0
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 1
27102: NEG
27103: PUSH
27104: LD_INT 1
27106: NEG
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PUSH
27112: LD_INT 1
27114: NEG
27115: PUSH
27116: LD_INT 2
27118: NEG
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: LD_INT 0
27126: PUSH
27127: LD_INT 2
27129: NEG
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 1
27137: PUSH
27138: LD_INT 1
27140: NEG
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: LD_INT 2
27148: PUSH
27149: LD_INT 0
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 2
27158: PUSH
27159: LD_INT 1
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 2
27168: PUSH
27169: LD_INT 2
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: LD_INT 1
27178: PUSH
27179: LD_INT 2
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: LD_INT 0
27188: PUSH
27189: LD_INT 2
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 1
27198: NEG
27199: PUSH
27200: LD_INT 1
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 2
27209: NEG
27210: PUSH
27211: LD_INT 0
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 2
27220: NEG
27221: PUSH
27222: LD_INT 1
27224: NEG
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: LD_INT 2
27232: NEG
27233: PUSH
27234: LD_INT 2
27236: NEG
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27263: LD_ADDR_VAR 0 23
27267: PUSH
27268: LD_INT 0
27270: PUSH
27271: LD_INT 0
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 0
27280: PUSH
27281: LD_INT 1
27283: NEG
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 1
27291: PUSH
27292: LD_INT 0
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 1
27301: PUSH
27302: LD_INT 1
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 0
27311: PUSH
27312: LD_INT 1
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 1
27321: NEG
27322: PUSH
27323: LD_INT 0
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PUSH
27330: LD_INT 1
27332: NEG
27333: PUSH
27334: LD_INT 1
27336: NEG
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: LD_INT 1
27344: NEG
27345: PUSH
27346: LD_INT 2
27348: NEG
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PUSH
27354: LD_INT 0
27356: PUSH
27357: LD_INT 2
27359: NEG
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: LD_INT 1
27367: PUSH
27368: LD_INT 1
27370: NEG
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 2
27378: PUSH
27379: LD_INT 0
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 2
27388: PUSH
27389: LD_INT 1
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 2
27398: PUSH
27399: LD_INT 2
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PUSH
27406: LD_INT 1
27408: PUSH
27409: LD_INT 2
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 0
27418: PUSH
27419: LD_INT 2
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: LD_INT 1
27428: NEG
27429: PUSH
27430: LD_INT 1
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 2
27439: NEG
27440: PUSH
27441: LD_INT 0
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: LD_INT 2
27450: NEG
27451: PUSH
27452: LD_INT 1
27454: NEG
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: LD_INT 2
27462: NEG
27463: PUSH
27464: LD_INT 2
27466: NEG
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: PUSH
27472: LD_INT 2
27474: NEG
27475: PUSH
27476: LD_INT 3
27478: NEG
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 1
27486: NEG
27487: PUSH
27488: LD_INT 3
27490: NEG
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: LD_INT 1
27498: PUSH
27499: LD_INT 2
27501: NEG
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PUSH
27507: LD_INT 2
27509: PUSH
27510: LD_INT 1
27512: NEG
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
27543: LD_ADDR_VAR 0 24
27547: PUSH
27548: LD_INT 0
27550: PUSH
27551: LD_INT 0
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 0
27560: PUSH
27561: LD_INT 1
27563: NEG
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: LD_INT 1
27571: PUSH
27572: LD_INT 0
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 1
27581: PUSH
27582: LD_INT 1
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 0
27591: PUSH
27592: LD_INT 1
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 1
27601: NEG
27602: PUSH
27603: LD_INT 0
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 1
27612: NEG
27613: PUSH
27614: LD_INT 1
27616: NEG
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: LD_INT 1
27624: NEG
27625: PUSH
27626: LD_INT 2
27628: NEG
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PUSH
27634: LD_INT 0
27636: PUSH
27637: LD_INT 2
27639: NEG
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: LD_INT 1
27647: PUSH
27648: LD_INT 1
27650: NEG
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PUSH
27656: LD_INT 2
27658: PUSH
27659: LD_INT 0
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 2
27668: PUSH
27669: LD_INT 1
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: LD_INT 2
27678: PUSH
27679: LD_INT 2
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: LD_INT 1
27688: PUSH
27689: LD_INT 2
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 0
27698: PUSH
27699: LD_INT 2
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: LD_INT 1
27708: NEG
27709: PUSH
27710: LD_INT 1
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: LD_INT 2
27719: NEG
27720: PUSH
27721: LD_INT 0
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: PUSH
27728: LD_INT 2
27730: NEG
27731: PUSH
27732: LD_INT 1
27734: NEG
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: PUSH
27740: LD_INT 2
27742: NEG
27743: PUSH
27744: LD_INT 2
27746: NEG
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PUSH
27752: LD_INT 1
27754: PUSH
27755: LD_INT 2
27757: NEG
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: LD_INT 2
27765: PUSH
27766: LD_INT 1
27768: NEG
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: LD_INT 3
27776: PUSH
27777: LD_INT 1
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 3
27786: PUSH
27787: LD_INT 2
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
27819: LD_ADDR_VAR 0 25
27823: PUSH
27824: LD_INT 0
27826: PUSH
27827: LD_INT 0
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: LD_INT 0
27836: PUSH
27837: LD_INT 1
27839: NEG
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 1
27847: PUSH
27848: LD_INT 0
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 1
27857: PUSH
27858: LD_INT 1
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: LD_INT 0
27867: PUSH
27868: LD_INT 1
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: LD_INT 1
27877: NEG
27878: PUSH
27879: LD_INT 0
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: PUSH
27886: LD_INT 1
27888: NEG
27889: PUSH
27890: LD_INT 1
27892: NEG
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: PUSH
27898: LD_INT 1
27900: NEG
27901: PUSH
27902: LD_INT 2
27904: NEG
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: LD_INT 0
27912: PUSH
27913: LD_INT 2
27915: NEG
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 1
27923: PUSH
27924: LD_INT 1
27926: NEG
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: LD_INT 2
27934: PUSH
27935: LD_INT 0
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: LD_INT 2
27944: PUSH
27945: LD_INT 1
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 2
27954: PUSH
27955: LD_INT 2
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 1
27964: PUSH
27965: LD_INT 2
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: LD_INT 0
27974: PUSH
27975: LD_INT 2
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: PUSH
27982: LD_INT 1
27984: NEG
27985: PUSH
27986: LD_INT 1
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 2
27995: NEG
27996: PUSH
27997: LD_INT 0
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: PUSH
28004: LD_INT 2
28006: NEG
28007: PUSH
28008: LD_INT 1
28010: NEG
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 2
28018: NEG
28019: PUSH
28020: LD_INT 2
28022: NEG
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: PUSH
28028: LD_INT 3
28030: PUSH
28031: LD_INT 1
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PUSH
28038: LD_INT 3
28040: PUSH
28041: LD_INT 2
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 2
28050: PUSH
28051: LD_INT 3
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PUSH
28058: LD_INT 1
28060: PUSH
28061: LD_INT 3
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28093: LD_ADDR_VAR 0 26
28097: PUSH
28098: LD_INT 0
28100: PUSH
28101: LD_INT 0
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: LD_INT 0
28110: PUSH
28111: LD_INT 1
28113: NEG
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 1
28121: PUSH
28122: LD_INT 0
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 1
28131: PUSH
28132: LD_INT 1
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_INT 0
28141: PUSH
28142: LD_INT 1
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 1
28151: NEG
28152: PUSH
28153: LD_INT 0
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: LD_INT 1
28162: NEG
28163: PUSH
28164: LD_INT 1
28166: NEG
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 1
28174: NEG
28175: PUSH
28176: LD_INT 2
28178: NEG
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 0
28186: PUSH
28187: LD_INT 2
28189: NEG
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PUSH
28195: LD_INT 1
28197: PUSH
28198: LD_INT 1
28200: NEG
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 2
28208: PUSH
28209: LD_INT 0
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 2
28218: PUSH
28219: LD_INT 1
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: LD_INT 2
28228: PUSH
28229: LD_INT 2
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: PUSH
28236: LD_INT 1
28238: PUSH
28239: LD_INT 2
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: PUSH
28246: LD_INT 0
28248: PUSH
28249: LD_INT 2
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 1
28258: NEG
28259: PUSH
28260: LD_INT 1
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 2
28269: NEG
28270: PUSH
28271: LD_INT 0
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: LD_INT 2
28280: NEG
28281: PUSH
28282: LD_INT 1
28284: NEG
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 2
28292: NEG
28293: PUSH
28294: LD_INT 2
28296: NEG
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: LD_INT 2
28304: PUSH
28305: LD_INT 3
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: LD_INT 1
28314: PUSH
28315: LD_INT 3
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: LD_INT 1
28324: NEG
28325: PUSH
28326: LD_INT 2
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 2
28335: NEG
28336: PUSH
28337: LD_INT 1
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: LIST
28358: LIST
28359: LIST
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28369: LD_ADDR_VAR 0 27
28373: PUSH
28374: LD_INT 0
28376: PUSH
28377: LD_INT 0
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 0
28386: PUSH
28387: LD_INT 1
28389: NEG
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 1
28397: PUSH
28398: LD_INT 0
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 1
28407: PUSH
28408: LD_INT 1
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PUSH
28415: LD_INT 0
28417: PUSH
28418: LD_INT 1
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 1
28427: NEG
28428: PUSH
28429: LD_INT 0
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: LD_INT 1
28438: NEG
28439: PUSH
28440: LD_INT 1
28442: NEG
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 1
28450: NEG
28451: PUSH
28452: LD_INT 2
28454: NEG
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: LD_INT 0
28462: PUSH
28463: LD_INT 2
28465: NEG
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 1
28473: PUSH
28474: LD_INT 1
28476: NEG
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: LD_INT 2
28484: PUSH
28485: LD_INT 0
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 2
28494: PUSH
28495: LD_INT 1
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PUSH
28502: LD_INT 2
28504: PUSH
28505: LD_INT 2
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: LD_INT 1
28514: PUSH
28515: LD_INT 2
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: LD_INT 0
28524: PUSH
28525: LD_INT 2
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 1
28534: NEG
28535: PUSH
28536: LD_INT 1
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 2
28545: NEG
28546: PUSH
28547: LD_INT 0
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: PUSH
28554: LD_INT 2
28556: NEG
28557: PUSH
28558: LD_INT 1
28560: NEG
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PUSH
28566: LD_INT 2
28568: NEG
28569: PUSH
28570: LD_INT 2
28572: NEG
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PUSH
28578: LD_INT 1
28580: NEG
28581: PUSH
28582: LD_INT 2
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: LD_INT 2
28591: NEG
28592: PUSH
28593: LD_INT 1
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PUSH
28600: LD_INT 3
28602: NEG
28603: PUSH
28604: LD_INT 1
28606: NEG
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: PUSH
28612: LD_INT 3
28614: NEG
28615: PUSH
28616: LD_INT 2
28618: NEG
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28649: LD_ADDR_VAR 0 28
28653: PUSH
28654: LD_INT 0
28656: PUSH
28657: LD_INT 0
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: LD_INT 0
28666: PUSH
28667: LD_INT 1
28669: NEG
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 1
28677: PUSH
28678: LD_INT 0
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 1
28687: PUSH
28688: LD_INT 1
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: LD_INT 0
28697: PUSH
28698: LD_INT 1
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 1
28707: NEG
28708: PUSH
28709: LD_INT 0
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 1
28718: NEG
28719: PUSH
28720: LD_INT 1
28722: NEG
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PUSH
28728: LD_INT 1
28730: NEG
28731: PUSH
28732: LD_INT 2
28734: NEG
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 0
28742: PUSH
28743: LD_INT 2
28745: NEG
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 1
28753: PUSH
28754: LD_INT 1
28756: NEG
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 2
28764: PUSH
28765: LD_INT 0
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 2
28774: PUSH
28775: LD_INT 1
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PUSH
28782: LD_INT 2
28784: PUSH
28785: LD_INT 2
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: LD_INT 1
28794: PUSH
28795: LD_INT 2
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: LD_INT 0
28804: PUSH
28805: LD_INT 2
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 1
28814: NEG
28815: PUSH
28816: LD_INT 1
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 2
28825: NEG
28826: PUSH
28827: LD_INT 0
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 2
28836: NEG
28837: PUSH
28838: LD_INT 1
28840: NEG
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 2
28848: NEG
28849: PUSH
28850: LD_INT 2
28852: NEG
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 2
28860: NEG
28861: PUSH
28862: LD_INT 3
28864: NEG
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 1
28872: NEG
28873: PUSH
28874: LD_INT 3
28876: NEG
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 3
28884: NEG
28885: PUSH
28886: LD_INT 1
28888: NEG
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: LD_INT 3
28896: NEG
28897: PUSH
28898: LD_INT 2
28900: NEG
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28931: LD_ADDR_VAR 0 29
28935: PUSH
28936: LD_INT 0
28938: PUSH
28939: LD_INT 0
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 0
28948: PUSH
28949: LD_INT 1
28951: NEG
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 1
28959: PUSH
28960: LD_INT 0
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 1
28969: PUSH
28970: LD_INT 1
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 0
28979: PUSH
28980: LD_INT 1
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 1
28989: NEG
28990: PUSH
28991: LD_INT 0
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 1
29000: NEG
29001: PUSH
29002: LD_INT 1
29004: NEG
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 1
29012: NEG
29013: PUSH
29014: LD_INT 2
29016: NEG
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: LD_INT 0
29024: PUSH
29025: LD_INT 2
29027: NEG
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: LD_INT 1
29035: PUSH
29036: LD_INT 1
29038: NEG
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 2
29046: PUSH
29047: LD_INT 0
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 2
29056: PUSH
29057: LD_INT 1
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 1
29066: PUSH
29067: LD_INT 2
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: LD_INT 0
29076: PUSH
29077: LD_INT 2
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: LD_INT 1
29086: NEG
29087: PUSH
29088: LD_INT 1
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PUSH
29095: LD_INT 2
29097: NEG
29098: PUSH
29099: LD_INT 1
29101: NEG
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: LD_INT 2
29109: NEG
29110: PUSH
29111: LD_INT 2
29113: NEG
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 2
29121: NEG
29122: PUSH
29123: LD_INT 3
29125: NEG
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 2
29133: PUSH
29134: LD_INT 1
29136: NEG
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 3
29144: PUSH
29145: LD_INT 1
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 1
29154: PUSH
29155: LD_INT 3
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 1
29164: NEG
29165: PUSH
29166: LD_INT 2
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 3
29175: NEG
29176: PUSH
29177: LD_INT 2
29179: NEG
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29210: LD_ADDR_VAR 0 30
29214: PUSH
29215: LD_INT 0
29217: PUSH
29218: LD_INT 0
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PUSH
29225: LD_INT 0
29227: PUSH
29228: LD_INT 1
29230: NEG
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: LD_INT 1
29238: PUSH
29239: LD_INT 0
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 1
29248: PUSH
29249: LD_INT 1
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 0
29258: PUSH
29259: LD_INT 1
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: LD_INT 1
29268: NEG
29269: PUSH
29270: LD_INT 0
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 1
29279: NEG
29280: PUSH
29281: LD_INT 1
29283: NEG
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: LD_INT 1
29291: NEG
29292: PUSH
29293: LD_INT 2
29295: NEG
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 0
29303: PUSH
29304: LD_INT 2
29306: NEG
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PUSH
29312: LD_INT 1
29314: PUSH
29315: LD_INT 1
29317: NEG
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PUSH
29323: LD_INT 2
29325: PUSH
29326: LD_INT 0
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 2
29335: PUSH
29336: LD_INT 1
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 2
29345: PUSH
29346: LD_INT 2
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 1
29355: PUSH
29356: LD_INT 2
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: LD_INT 1
29365: NEG
29366: PUSH
29367: LD_INT 1
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: PUSH
29374: LD_INT 2
29376: NEG
29377: PUSH
29378: LD_INT 0
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: LD_INT 2
29387: NEG
29388: PUSH
29389: LD_INT 1
29391: NEG
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_INT 1
29399: NEG
29400: PUSH
29401: LD_INT 3
29403: NEG
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 1
29411: PUSH
29412: LD_INT 2
29414: NEG
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: LD_INT 3
29422: PUSH
29423: LD_INT 2
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: LD_INT 2
29432: PUSH
29433: LD_INT 3
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 2
29442: NEG
29443: PUSH
29444: LD_INT 1
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: LD_INT 3
29453: NEG
29454: PUSH
29455: LD_INT 1
29457: NEG
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: LIST
29478: LIST
29479: LIST
29480: LIST
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29488: LD_ADDR_VAR 0 31
29492: PUSH
29493: LD_INT 0
29495: PUSH
29496: LD_INT 0
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 0
29505: PUSH
29506: LD_INT 1
29508: NEG
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 1
29516: PUSH
29517: LD_INT 0
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 1
29526: PUSH
29527: LD_INT 1
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 0
29536: PUSH
29537: LD_INT 1
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: LD_INT 1
29546: NEG
29547: PUSH
29548: LD_INT 0
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: LD_INT 1
29557: NEG
29558: PUSH
29559: LD_INT 1
29561: NEG
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: LD_INT 1
29569: NEG
29570: PUSH
29571: LD_INT 2
29573: NEG
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 1
29581: PUSH
29582: LD_INT 1
29584: NEG
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: LD_INT 2
29592: PUSH
29593: LD_INT 0
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: LD_INT 2
29602: PUSH
29603: LD_INT 1
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: LD_INT 2
29612: PUSH
29613: LD_INT 2
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 1
29622: PUSH
29623: LD_INT 2
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: LD_INT 0
29632: PUSH
29633: LD_INT 2
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 1
29642: NEG
29643: PUSH
29644: LD_INT 1
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 2
29653: NEG
29654: PUSH
29655: LD_INT 1
29657: NEG
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: LD_INT 2
29665: NEG
29666: PUSH
29667: LD_INT 2
29669: NEG
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: LD_INT 2
29677: NEG
29678: PUSH
29679: LD_INT 3
29681: NEG
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 2
29689: PUSH
29690: LD_INT 1
29692: NEG
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 3
29700: PUSH
29701: LD_INT 1
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 1
29710: PUSH
29711: LD_INT 3
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 1
29720: NEG
29721: PUSH
29722: LD_INT 2
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 3
29731: NEG
29732: PUSH
29733: LD_INT 2
29735: NEG
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: LIST
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29766: LD_ADDR_VAR 0 32
29770: PUSH
29771: LD_INT 0
29773: PUSH
29774: LD_INT 0
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 0
29783: PUSH
29784: LD_INT 1
29786: NEG
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: LD_INT 1
29794: PUSH
29795: LD_INT 0
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: LD_INT 1
29804: PUSH
29805: LD_INT 1
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 0
29814: PUSH
29815: LD_INT 1
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: PUSH
29822: LD_INT 1
29824: NEG
29825: PUSH
29826: LD_INT 0
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: LD_INT 1
29835: NEG
29836: PUSH
29837: LD_INT 1
29839: NEG
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 1
29847: NEG
29848: PUSH
29849: LD_INT 2
29851: NEG
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PUSH
29857: LD_INT 0
29859: PUSH
29860: LD_INT 2
29862: NEG
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 1
29870: PUSH
29871: LD_INT 1
29873: NEG
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: LD_INT 2
29881: PUSH
29882: LD_INT 1
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 2
29891: PUSH
29892: LD_INT 2
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 1
29901: PUSH
29902: LD_INT 2
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 0
29911: PUSH
29912: LD_INT 2
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: LD_INT 1
29921: NEG
29922: PUSH
29923: LD_INT 1
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: LD_INT 2
29932: NEG
29933: PUSH
29934: LD_INT 0
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 2
29943: NEG
29944: PUSH
29945: LD_INT 1
29947: NEG
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 1
29955: NEG
29956: PUSH
29957: LD_INT 3
29959: NEG
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 1
29967: PUSH
29968: LD_INT 2
29970: NEG
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 3
29978: PUSH
29979: LD_INT 2
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: LD_INT 2
29988: PUSH
29989: LD_INT 3
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 2
29998: NEG
29999: PUSH
30000: LD_INT 1
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: PUSH
30007: LD_INT 3
30009: NEG
30010: PUSH
30011: LD_INT 1
30013: NEG
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30044: LD_ADDR_VAR 0 33
30048: PUSH
30049: LD_INT 0
30051: PUSH
30052: LD_INT 0
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 0
30061: PUSH
30062: LD_INT 1
30064: NEG
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 1
30072: PUSH
30073: LD_INT 0
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 1
30082: PUSH
30083: LD_INT 1
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: LD_INT 0
30092: PUSH
30093: LD_INT 1
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: LD_INT 1
30102: NEG
30103: PUSH
30104: LD_INT 0
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: LD_INT 1
30113: NEG
30114: PUSH
30115: LD_INT 1
30117: NEG
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 1
30125: NEG
30126: PUSH
30127: LD_INT 2
30129: NEG
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 1
30137: PUSH
30138: LD_INT 1
30140: NEG
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 2
30148: PUSH
30149: LD_INT 0
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: LD_INT 2
30158: PUSH
30159: LD_INT 1
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 1
30168: PUSH
30169: LD_INT 2
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: LD_INT 0
30178: PUSH
30179: LD_INT 2
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 1
30188: NEG
30189: PUSH
30190: LD_INT 1
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 2
30199: NEG
30200: PUSH
30201: LD_INT 0
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 2
30210: NEG
30211: PUSH
30212: LD_INT 1
30214: NEG
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 2
30222: NEG
30223: PUSH
30224: LD_INT 2
30226: NEG
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 2
30234: NEG
30235: PUSH
30236: LD_INT 3
30238: NEG
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: LD_INT 2
30246: PUSH
30247: LD_INT 1
30249: NEG
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: LD_INT 3
30257: PUSH
30258: LD_INT 1
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 1
30267: PUSH
30268: LD_INT 3
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 1
30277: NEG
30278: PUSH
30279: LD_INT 2
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: LD_INT 3
30288: NEG
30289: PUSH
30290: LD_INT 2
30292: NEG
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30323: LD_ADDR_VAR 0 34
30327: PUSH
30328: LD_INT 0
30330: PUSH
30331: LD_INT 0
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PUSH
30338: LD_INT 0
30340: PUSH
30341: LD_INT 1
30343: NEG
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: LD_INT 1
30351: PUSH
30352: LD_INT 0
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 1
30361: PUSH
30362: LD_INT 1
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 0
30371: PUSH
30372: LD_INT 1
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 1
30381: NEG
30382: PUSH
30383: LD_INT 0
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: LD_INT 1
30392: NEG
30393: PUSH
30394: LD_INT 1
30396: NEG
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 1
30404: NEG
30405: PUSH
30406: LD_INT 2
30408: NEG
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: LD_INT 0
30416: PUSH
30417: LD_INT 2
30419: NEG
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: LD_INT 1
30427: PUSH
30428: LD_INT 1
30430: NEG
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 2
30438: PUSH
30439: LD_INT 1
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 2
30448: PUSH
30449: LD_INT 2
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 1
30458: PUSH
30459: LD_INT 2
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 1
30468: NEG
30469: PUSH
30470: LD_INT 1
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 2
30479: NEG
30480: PUSH
30481: LD_INT 0
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 2
30490: NEG
30491: PUSH
30492: LD_INT 1
30494: NEG
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 2
30502: NEG
30503: PUSH
30504: LD_INT 2
30506: NEG
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: LD_INT 1
30514: NEG
30515: PUSH
30516: LD_INT 3
30518: NEG
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 1
30526: PUSH
30527: LD_INT 2
30529: NEG
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 3
30537: PUSH
30538: LD_INT 2
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: LD_INT 2
30547: PUSH
30548: LD_INT 3
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 2
30557: NEG
30558: PUSH
30559: LD_INT 1
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 3
30568: NEG
30569: PUSH
30570: LD_INT 1
30572: NEG
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30603: LD_ADDR_VAR 0 35
30607: PUSH
30608: LD_INT 0
30610: PUSH
30611: LD_INT 0
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 0
30620: PUSH
30621: LD_INT 1
30623: NEG
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 1
30631: PUSH
30632: LD_INT 0
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 1
30641: PUSH
30642: LD_INT 1
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 0
30651: PUSH
30652: LD_INT 1
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 1
30661: NEG
30662: PUSH
30663: LD_INT 0
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 1
30672: NEG
30673: PUSH
30674: LD_INT 1
30676: NEG
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: LD_INT 2
30684: PUSH
30685: LD_INT 1
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 2
30694: NEG
30695: PUSH
30696: LD_INT 1
30698: NEG
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30715: LD_ADDR_VAR 0 36
30719: PUSH
30720: LD_INT 0
30722: PUSH
30723: LD_INT 0
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: LD_INT 0
30732: PUSH
30733: LD_INT 1
30735: NEG
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: PUSH
30741: LD_INT 1
30743: PUSH
30744: LD_INT 0
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: LD_INT 1
30753: PUSH
30754: LD_INT 1
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 0
30763: PUSH
30764: LD_INT 1
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 1
30773: NEG
30774: PUSH
30775: LD_INT 0
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 1
30784: NEG
30785: PUSH
30786: LD_INT 1
30788: NEG
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: LD_INT 1
30796: NEG
30797: PUSH
30798: LD_INT 2
30800: NEG
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 1
30808: PUSH
30809: LD_INT 2
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30827: LD_ADDR_VAR 0 37
30831: PUSH
30832: LD_INT 0
30834: PUSH
30835: LD_INT 0
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 0
30844: PUSH
30845: LD_INT 1
30847: NEG
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 1
30855: PUSH
30856: LD_INT 0
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 1
30865: PUSH
30866: LD_INT 1
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 0
30875: PUSH
30876: LD_INT 1
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 1
30885: NEG
30886: PUSH
30887: LD_INT 0
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 1
30896: NEG
30897: PUSH
30898: LD_INT 1
30900: NEG
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 1
30908: PUSH
30909: LD_INT 1
30911: NEG
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 1
30919: NEG
30920: PUSH
30921: LD_INT 1
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30939: LD_ADDR_VAR 0 38
30943: PUSH
30944: LD_INT 0
30946: PUSH
30947: LD_INT 0
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 0
30956: PUSH
30957: LD_INT 1
30959: NEG
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: LD_INT 1
30967: PUSH
30968: LD_INT 0
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 1
30977: PUSH
30978: LD_INT 1
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 0
30987: PUSH
30988: LD_INT 1
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 1
30997: NEG
30998: PUSH
30999: LD_INT 0
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: LD_INT 1
31008: NEG
31009: PUSH
31010: LD_INT 1
31012: NEG
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 2
31020: PUSH
31021: LD_INT 1
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 2
31030: NEG
31031: PUSH
31032: LD_INT 1
31034: NEG
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31051: LD_ADDR_VAR 0 39
31055: PUSH
31056: LD_INT 0
31058: PUSH
31059: LD_INT 0
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 0
31068: PUSH
31069: LD_INT 1
31071: NEG
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 1
31079: PUSH
31080: LD_INT 0
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: LD_INT 1
31089: PUSH
31090: LD_INT 1
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PUSH
31097: LD_INT 0
31099: PUSH
31100: LD_INT 1
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 1
31109: NEG
31110: PUSH
31111: LD_INT 0
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 1
31120: NEG
31121: PUSH
31122: LD_INT 1
31124: NEG
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 1
31132: NEG
31133: PUSH
31134: LD_INT 2
31136: NEG
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 1
31144: PUSH
31145: LD_INT 2
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31163: LD_ADDR_VAR 0 40
31167: PUSH
31168: LD_INT 0
31170: PUSH
31171: LD_INT 0
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 0
31180: PUSH
31181: LD_INT 1
31183: NEG
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PUSH
31189: LD_INT 1
31191: PUSH
31192: LD_INT 0
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 1
31201: PUSH
31202: LD_INT 1
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PUSH
31209: LD_INT 0
31211: PUSH
31212: LD_INT 1
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 1
31221: NEG
31222: PUSH
31223: LD_INT 0
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 1
31232: NEG
31233: PUSH
31234: LD_INT 1
31236: NEG
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 1
31244: PUSH
31245: LD_INT 1
31247: NEG
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 1
31255: NEG
31256: PUSH
31257: LD_INT 1
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31275: LD_ADDR_VAR 0 41
31279: PUSH
31280: LD_INT 0
31282: PUSH
31283: LD_INT 0
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 0
31292: PUSH
31293: LD_INT 1
31295: NEG
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 1
31303: PUSH
31304: LD_INT 0
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 1
31313: PUSH
31314: LD_INT 1
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 0
31323: PUSH
31324: LD_INT 1
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 1
31333: NEG
31334: PUSH
31335: LD_INT 0
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 1
31344: NEG
31345: PUSH
31346: LD_INT 1
31348: NEG
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 1
31356: NEG
31357: PUSH
31358: LD_INT 2
31360: NEG
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 1
31368: PUSH
31369: LD_INT 1
31371: NEG
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 2
31379: PUSH
31380: LD_INT 0
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 2
31389: PUSH
31390: LD_INT 1
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 2
31399: PUSH
31400: LD_INT 2
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 1
31409: PUSH
31410: LD_INT 2
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 1
31419: NEG
31420: PUSH
31421: LD_INT 1
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 2
31430: NEG
31431: PUSH
31432: LD_INT 0
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PUSH
31439: LD_INT 2
31441: NEG
31442: PUSH
31443: LD_INT 1
31445: NEG
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: LD_INT 2
31453: NEG
31454: PUSH
31455: LD_INT 2
31457: NEG
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 2
31465: NEG
31466: PUSH
31467: LD_INT 3
31469: NEG
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 2
31477: PUSH
31478: LD_INT 1
31480: NEG
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 3
31488: PUSH
31489: LD_INT 0
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: LD_INT 3
31498: PUSH
31499: LD_INT 1
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 3
31508: PUSH
31509: LD_INT 2
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 3
31518: PUSH
31519: LD_INT 3
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 2
31528: PUSH
31529: LD_INT 3
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 2
31538: NEG
31539: PUSH
31540: LD_INT 1
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: LD_INT 3
31549: NEG
31550: PUSH
31551: LD_INT 0
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 3
31560: NEG
31561: PUSH
31562: LD_INT 1
31564: NEG
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: LD_INT 3
31572: NEG
31573: PUSH
31574: LD_INT 2
31576: NEG
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 3
31584: NEG
31585: PUSH
31586: LD_INT 3
31588: NEG
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31625: LD_ADDR_VAR 0 42
31629: PUSH
31630: LD_INT 0
31632: PUSH
31633: LD_INT 0
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 0
31642: PUSH
31643: LD_INT 1
31645: NEG
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 1
31653: PUSH
31654: LD_INT 0
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 1
31663: PUSH
31664: LD_INT 1
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 0
31673: PUSH
31674: LD_INT 1
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 1
31683: NEG
31684: PUSH
31685: LD_INT 0
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 1
31694: NEG
31695: PUSH
31696: LD_INT 1
31698: NEG
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: LD_INT 1
31706: NEG
31707: PUSH
31708: LD_INT 2
31710: NEG
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 0
31718: PUSH
31719: LD_INT 2
31721: NEG
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: LD_INT 1
31729: PUSH
31730: LD_INT 1
31732: NEG
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: PUSH
31738: LD_INT 2
31740: PUSH
31741: LD_INT 1
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 2
31750: PUSH
31751: LD_INT 2
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 1
31760: PUSH
31761: LD_INT 2
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 0
31770: PUSH
31771: LD_INT 2
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 1
31780: NEG
31781: PUSH
31782: LD_INT 1
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 2
31791: NEG
31792: PUSH
31793: LD_INT 1
31795: NEG
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: LD_INT 2
31803: NEG
31804: PUSH
31805: LD_INT 2
31807: NEG
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: LD_INT 2
31815: NEG
31816: PUSH
31817: LD_INT 3
31819: NEG
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 1
31827: NEG
31828: PUSH
31829: LD_INT 3
31831: NEG
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 0
31839: PUSH
31840: LD_INT 3
31842: NEG
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 1
31850: PUSH
31851: LD_INT 2
31853: NEG
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 3
31861: PUSH
31862: LD_INT 2
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 3
31871: PUSH
31872: LD_INT 3
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 2
31881: PUSH
31882: LD_INT 3
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 1
31891: PUSH
31892: LD_INT 3
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 0
31901: PUSH
31902: LD_INT 3
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 1
31911: NEG
31912: PUSH
31913: LD_INT 2
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: PUSH
31920: LD_INT 3
31922: NEG
31923: PUSH
31924: LD_INT 2
31926: NEG
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 3
31934: NEG
31935: PUSH
31936: LD_INT 3
31938: NEG
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31975: LD_ADDR_VAR 0 43
31979: PUSH
31980: LD_INT 0
31982: PUSH
31983: LD_INT 0
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 0
31992: PUSH
31993: LD_INT 1
31995: NEG
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 1
32003: PUSH
32004: LD_INT 0
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 1
32013: PUSH
32014: LD_INT 1
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: LD_INT 0
32023: PUSH
32024: LD_INT 1
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 1
32033: NEG
32034: PUSH
32035: LD_INT 0
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: LD_INT 1
32044: NEG
32045: PUSH
32046: LD_INT 1
32048: NEG
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 1
32056: NEG
32057: PUSH
32058: LD_INT 2
32060: NEG
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 0
32068: PUSH
32069: LD_INT 2
32071: NEG
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 1
32079: PUSH
32080: LD_INT 1
32082: NEG
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 2
32090: PUSH
32091: LD_INT 0
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 2
32100: PUSH
32101: LD_INT 1
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 1
32110: PUSH
32111: LD_INT 2
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 0
32120: PUSH
32121: LD_INT 2
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 1
32130: NEG
32131: PUSH
32132: LD_INT 1
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 2
32141: NEG
32142: PUSH
32143: LD_INT 0
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 2
32152: NEG
32153: PUSH
32154: LD_INT 1
32156: NEG
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 1
32164: NEG
32165: PUSH
32166: LD_INT 3
32168: NEG
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 0
32176: PUSH
32177: LD_INT 3
32179: NEG
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 1
32187: PUSH
32188: LD_INT 2
32190: NEG
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 2
32198: PUSH
32199: LD_INT 1
32201: NEG
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 3
32209: PUSH
32210: LD_INT 0
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: LD_INT 3
32219: PUSH
32220: LD_INT 1
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 1
32229: PUSH
32230: LD_INT 3
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 0
32239: PUSH
32240: LD_INT 3
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 1
32249: NEG
32250: PUSH
32251: LD_INT 2
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 2
32260: NEG
32261: PUSH
32262: LD_INT 1
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 3
32271: NEG
32272: PUSH
32273: LD_INT 0
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 3
32282: NEG
32283: PUSH
32284: LD_INT 1
32286: NEG
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32323: LD_ADDR_VAR 0 44
32327: PUSH
32328: LD_INT 0
32330: PUSH
32331: LD_INT 0
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 0
32340: PUSH
32341: LD_INT 1
32343: NEG
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 1
32351: PUSH
32352: LD_INT 0
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: LD_INT 1
32361: PUSH
32362: LD_INT 1
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 0
32371: PUSH
32372: LD_INT 1
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 1
32381: NEG
32382: PUSH
32383: LD_INT 0
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 1
32392: NEG
32393: PUSH
32394: LD_INT 1
32396: NEG
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 1
32404: NEG
32405: PUSH
32406: LD_INT 2
32408: NEG
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 1
32416: PUSH
32417: LD_INT 1
32419: NEG
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 2
32427: PUSH
32428: LD_INT 0
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 2
32437: PUSH
32438: LD_INT 1
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 2
32447: PUSH
32448: LD_INT 2
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 1
32457: PUSH
32458: LD_INT 2
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 1
32467: NEG
32468: PUSH
32469: LD_INT 1
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 2
32478: NEG
32479: PUSH
32480: LD_INT 0
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 2
32489: NEG
32490: PUSH
32491: LD_INT 1
32493: NEG
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 2
32501: NEG
32502: PUSH
32503: LD_INT 2
32505: NEG
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 2
32513: NEG
32514: PUSH
32515: LD_INT 3
32517: NEG
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 2
32525: PUSH
32526: LD_INT 1
32528: NEG
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 3
32536: PUSH
32537: LD_INT 0
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 3
32546: PUSH
32547: LD_INT 1
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 3
32556: PUSH
32557: LD_INT 2
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 3
32566: PUSH
32567: LD_INT 3
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 2
32576: PUSH
32577: LD_INT 3
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 2
32586: NEG
32587: PUSH
32588: LD_INT 1
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 3
32597: NEG
32598: PUSH
32599: LD_INT 0
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 3
32608: NEG
32609: PUSH
32610: LD_INT 1
32612: NEG
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 3
32620: NEG
32621: PUSH
32622: LD_INT 2
32624: NEG
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PUSH
32630: LD_INT 3
32632: NEG
32633: PUSH
32634: LD_INT 3
32636: NEG
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32673: LD_ADDR_VAR 0 45
32677: PUSH
32678: LD_INT 0
32680: PUSH
32681: LD_INT 0
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 0
32690: PUSH
32691: LD_INT 1
32693: NEG
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 1
32701: PUSH
32702: LD_INT 0
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: LD_INT 1
32711: PUSH
32712: LD_INT 1
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: LD_INT 0
32721: PUSH
32722: LD_INT 1
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 1
32731: NEG
32732: PUSH
32733: LD_INT 0
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 1
32742: NEG
32743: PUSH
32744: LD_INT 1
32746: NEG
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 1
32754: NEG
32755: PUSH
32756: LD_INT 2
32758: NEG
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 0
32766: PUSH
32767: LD_INT 2
32769: NEG
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 1
32777: PUSH
32778: LD_INT 1
32780: NEG
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 2
32788: PUSH
32789: LD_INT 1
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 2
32798: PUSH
32799: LD_INT 2
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: LD_INT 1
32808: PUSH
32809: LD_INT 2
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 0
32818: PUSH
32819: LD_INT 2
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 1
32828: NEG
32829: PUSH
32830: LD_INT 1
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 2
32839: NEG
32840: PUSH
32841: LD_INT 1
32843: NEG
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 2
32851: NEG
32852: PUSH
32853: LD_INT 2
32855: NEG
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 2
32863: NEG
32864: PUSH
32865: LD_INT 3
32867: NEG
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: LD_INT 1
32875: NEG
32876: PUSH
32877: LD_INT 3
32879: NEG
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: PUSH
32885: LD_INT 0
32887: PUSH
32888: LD_INT 3
32890: NEG
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: LD_INT 1
32898: PUSH
32899: LD_INT 2
32901: NEG
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 3
32909: PUSH
32910: LD_INT 2
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 3
32919: PUSH
32920: LD_INT 3
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 2
32929: PUSH
32930: LD_INT 3
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 1
32939: PUSH
32940: LD_INT 3
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 0
32949: PUSH
32950: LD_INT 3
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 1
32959: NEG
32960: PUSH
32961: LD_INT 2
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 3
32970: NEG
32971: PUSH
32972: LD_INT 2
32974: NEG
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PUSH
32980: LD_INT 3
32982: NEG
32983: PUSH
32984: LD_INT 3
32986: NEG
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: LIST
33022: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33023: LD_ADDR_VAR 0 46
33027: PUSH
33028: LD_INT 0
33030: PUSH
33031: LD_INT 0
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 0
33040: PUSH
33041: LD_INT 1
33043: NEG
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 1
33051: PUSH
33052: LD_INT 0
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 1
33061: PUSH
33062: LD_INT 1
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: LD_INT 0
33071: PUSH
33072: LD_INT 1
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 1
33081: NEG
33082: PUSH
33083: LD_INT 0
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 1
33092: NEG
33093: PUSH
33094: LD_INT 1
33096: NEG
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: LD_INT 1
33104: NEG
33105: PUSH
33106: LD_INT 2
33108: NEG
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 0
33116: PUSH
33117: LD_INT 2
33119: NEG
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 1
33127: PUSH
33128: LD_INT 1
33130: NEG
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 2
33138: PUSH
33139: LD_INT 0
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 2
33148: PUSH
33149: LD_INT 1
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PUSH
33156: LD_INT 1
33158: PUSH
33159: LD_INT 2
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: PUSH
33166: LD_INT 0
33168: PUSH
33169: LD_INT 2
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 1
33178: NEG
33179: PUSH
33180: LD_INT 1
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: LD_INT 2
33189: NEG
33190: PUSH
33191: LD_INT 0
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 2
33200: NEG
33201: PUSH
33202: LD_INT 1
33204: NEG
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: PUSH
33210: LD_INT 1
33212: NEG
33213: PUSH
33214: LD_INT 3
33216: NEG
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: PUSH
33222: LD_INT 0
33224: PUSH
33225: LD_INT 3
33227: NEG
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 1
33235: PUSH
33236: LD_INT 2
33238: NEG
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 2
33246: PUSH
33247: LD_INT 1
33249: NEG
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 3
33257: PUSH
33258: LD_INT 0
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 3
33267: PUSH
33268: LD_INT 1
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 1
33277: PUSH
33278: LD_INT 3
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 0
33287: PUSH
33288: LD_INT 3
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 1
33297: NEG
33298: PUSH
33299: LD_INT 2
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 2
33308: NEG
33309: PUSH
33310: LD_INT 1
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 3
33319: NEG
33320: PUSH
33321: LD_INT 0
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 3
33330: NEG
33331: PUSH
33332: LD_INT 1
33334: NEG
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33371: LD_ADDR_VAR 0 47
33375: PUSH
33376: LD_INT 0
33378: PUSH
33379: LD_INT 0
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 0
33388: PUSH
33389: LD_INT 1
33391: NEG
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 1
33399: PUSH
33400: LD_INT 0
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 1
33409: PUSH
33410: LD_INT 1
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: LD_INT 0
33419: PUSH
33420: LD_INT 1
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 1
33429: NEG
33430: PUSH
33431: LD_INT 0
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 1
33440: NEG
33441: PUSH
33442: LD_INT 1
33444: NEG
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PUSH
33450: LD_INT 1
33452: NEG
33453: PUSH
33454: LD_INT 2
33456: NEG
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 0
33464: PUSH
33465: LD_INT 2
33467: NEG
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 1
33475: PUSH
33476: LD_INT 1
33478: NEG
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: LD_INT 2
33486: NEG
33487: PUSH
33488: LD_INT 1
33490: NEG
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PUSH
33496: LD_INT 2
33498: NEG
33499: PUSH
33500: LD_INT 2
33502: NEG
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33522: LD_ADDR_VAR 0 48
33526: PUSH
33527: LD_INT 0
33529: PUSH
33530: LD_INT 0
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 0
33539: PUSH
33540: LD_INT 1
33542: NEG
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: LD_INT 1
33550: PUSH
33551: LD_INT 0
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 1
33560: PUSH
33561: LD_INT 1
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 0
33570: PUSH
33571: LD_INT 1
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 1
33580: NEG
33581: PUSH
33582: LD_INT 0
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 1
33591: NEG
33592: PUSH
33593: LD_INT 1
33595: NEG
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 1
33603: NEG
33604: PUSH
33605: LD_INT 2
33607: NEG
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 0
33615: PUSH
33616: LD_INT 2
33618: NEG
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 1
33626: PUSH
33627: LD_INT 1
33629: NEG
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: LD_INT 2
33637: PUSH
33638: LD_INT 0
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 2
33647: PUSH
33648: LD_INT 1
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33669: LD_ADDR_VAR 0 49
33673: PUSH
33674: LD_INT 0
33676: PUSH
33677: LD_INT 0
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PUSH
33684: LD_INT 0
33686: PUSH
33687: LD_INT 1
33689: NEG
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 1
33697: PUSH
33698: LD_INT 0
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: LD_INT 1
33707: PUSH
33708: LD_INT 1
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 0
33717: PUSH
33718: LD_INT 1
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 1
33727: NEG
33728: PUSH
33729: LD_INT 0
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 1
33738: NEG
33739: PUSH
33740: LD_INT 1
33742: NEG
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 1
33750: PUSH
33751: LD_INT 1
33753: NEG
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 2
33761: PUSH
33762: LD_INT 0
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 2
33771: PUSH
33772: LD_INT 1
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 2
33781: PUSH
33782: LD_INT 2
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 1
33791: PUSH
33792: LD_INT 2
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33813: LD_ADDR_VAR 0 50
33817: PUSH
33818: LD_INT 0
33820: PUSH
33821: LD_INT 0
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 0
33830: PUSH
33831: LD_INT 1
33833: NEG
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 1
33841: PUSH
33842: LD_INT 0
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 1
33851: PUSH
33852: LD_INT 1
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: LD_INT 0
33861: PUSH
33862: LD_INT 1
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 1
33871: NEG
33872: PUSH
33873: LD_INT 0
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 1
33882: NEG
33883: PUSH
33884: LD_INT 1
33886: NEG
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 2
33894: PUSH
33895: LD_INT 1
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 2
33904: PUSH
33905: LD_INT 2
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: PUSH
33912: LD_INT 1
33914: PUSH
33915: LD_INT 2
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: LD_INT 0
33924: PUSH
33925: LD_INT 2
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: LD_INT 1
33934: NEG
33935: PUSH
33936: LD_INT 1
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33957: LD_ADDR_VAR 0 51
33961: PUSH
33962: LD_INT 0
33964: PUSH
33965: LD_INT 0
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: LD_INT 0
33974: PUSH
33975: LD_INT 1
33977: NEG
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 1
33985: PUSH
33986: LD_INT 0
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 1
33995: PUSH
33996: LD_INT 1
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 0
34005: PUSH
34006: LD_INT 1
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 1
34015: NEG
34016: PUSH
34017: LD_INT 0
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: LD_INT 1
34026: NEG
34027: PUSH
34028: LD_INT 1
34030: NEG
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 1
34038: PUSH
34039: LD_INT 2
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 0
34048: PUSH
34049: LD_INT 2
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 1
34058: NEG
34059: PUSH
34060: LD_INT 1
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 2
34069: NEG
34070: PUSH
34071: LD_INT 0
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 2
34080: NEG
34081: PUSH
34082: LD_INT 1
34084: NEG
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34104: LD_ADDR_VAR 0 52
34108: PUSH
34109: LD_INT 0
34111: PUSH
34112: LD_INT 0
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: LD_INT 0
34121: PUSH
34122: LD_INT 1
34124: NEG
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 1
34132: PUSH
34133: LD_INT 0
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 1
34142: PUSH
34143: LD_INT 1
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 0
34152: PUSH
34153: LD_INT 1
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 1
34162: NEG
34163: PUSH
34164: LD_INT 0
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 1
34173: NEG
34174: PUSH
34175: LD_INT 1
34177: NEG
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 1
34185: NEG
34186: PUSH
34187: LD_INT 2
34189: NEG
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: LD_INT 1
34197: NEG
34198: PUSH
34199: LD_INT 1
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 2
34208: NEG
34209: PUSH
34210: LD_INT 0
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 2
34219: NEG
34220: PUSH
34221: LD_INT 1
34223: NEG
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 2
34231: NEG
34232: PUSH
34233: LD_INT 2
34235: NEG
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34255: LD_ADDR_VAR 0 53
34259: PUSH
34260: LD_INT 0
34262: PUSH
34263: LD_INT 0
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: LD_INT 0
34272: PUSH
34273: LD_INT 1
34275: NEG
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 1
34283: PUSH
34284: LD_INT 0
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 1
34293: PUSH
34294: LD_INT 1
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 0
34303: PUSH
34304: LD_INT 1
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 1
34313: NEG
34314: PUSH
34315: LD_INT 0
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 1
34324: NEG
34325: PUSH
34326: LD_INT 1
34328: NEG
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 1
34336: NEG
34337: PUSH
34338: LD_INT 2
34340: NEG
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 0
34348: PUSH
34349: LD_INT 2
34351: NEG
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 1
34359: PUSH
34360: LD_INT 1
34362: NEG
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 2
34370: PUSH
34371: LD_INT 0
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 2
34380: PUSH
34381: LD_INT 1
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 2
34390: PUSH
34391: LD_INT 2
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 1
34400: PUSH
34401: LD_INT 2
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 0
34410: PUSH
34411: LD_INT 2
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 1
34420: NEG
34421: PUSH
34422: LD_INT 1
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 2
34431: NEG
34432: PUSH
34433: LD_INT 0
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 2
34442: NEG
34443: PUSH
34444: LD_INT 1
34446: NEG
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: LD_INT 2
34454: NEG
34455: PUSH
34456: LD_INT 2
34458: NEG
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34485: LD_ADDR_VAR 0 54
34489: PUSH
34490: LD_INT 0
34492: PUSH
34493: LD_INT 0
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 0
34502: PUSH
34503: LD_INT 1
34505: NEG
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 1
34513: PUSH
34514: LD_INT 0
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 1
34523: PUSH
34524: LD_INT 1
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 0
34533: PUSH
34534: LD_INT 1
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 1
34543: NEG
34544: PUSH
34545: LD_INT 0
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 1
34554: NEG
34555: PUSH
34556: LD_INT 1
34558: NEG
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: LD_INT 1
34566: NEG
34567: PUSH
34568: LD_INT 2
34570: NEG
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 0
34578: PUSH
34579: LD_INT 2
34581: NEG
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 1
34589: PUSH
34590: LD_INT 1
34592: NEG
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 2
34600: PUSH
34601: LD_INT 0
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 2
34610: PUSH
34611: LD_INT 1
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 2
34620: PUSH
34621: LD_INT 2
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 1
34630: PUSH
34631: LD_INT 2
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 0
34640: PUSH
34641: LD_INT 2
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 1
34650: NEG
34651: PUSH
34652: LD_INT 1
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 2
34661: NEG
34662: PUSH
34663: LD_INT 0
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 2
34672: NEG
34673: PUSH
34674: LD_INT 1
34676: NEG
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 2
34684: NEG
34685: PUSH
34686: LD_INT 2
34688: NEG
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34715: LD_ADDR_VAR 0 55
34719: PUSH
34720: LD_INT 0
34722: PUSH
34723: LD_INT 0
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 0
34732: PUSH
34733: LD_INT 1
34735: NEG
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 1
34743: PUSH
34744: LD_INT 0
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 1
34753: PUSH
34754: LD_INT 1
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 0
34763: PUSH
34764: LD_INT 1
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 1
34773: NEG
34774: PUSH
34775: LD_INT 0
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 1
34784: NEG
34785: PUSH
34786: LD_INT 1
34788: NEG
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 1
34796: NEG
34797: PUSH
34798: LD_INT 2
34800: NEG
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 0
34808: PUSH
34809: LD_INT 2
34811: NEG
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 1
34819: PUSH
34820: LD_INT 1
34822: NEG
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 2
34830: PUSH
34831: LD_INT 0
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: PUSH
34838: LD_INT 2
34840: PUSH
34841: LD_INT 1
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 2
34850: PUSH
34851: LD_INT 2
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: LD_INT 1
34860: PUSH
34861: LD_INT 2
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 0
34870: PUSH
34871: LD_INT 2
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 1
34880: NEG
34881: PUSH
34882: LD_INT 1
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 2
34891: NEG
34892: PUSH
34893: LD_INT 0
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PUSH
34900: LD_INT 2
34902: NEG
34903: PUSH
34904: LD_INT 1
34906: NEG
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 2
34914: NEG
34915: PUSH
34916: LD_INT 2
34918: NEG
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34945: LD_ADDR_VAR 0 56
34949: PUSH
34950: LD_INT 0
34952: PUSH
34953: LD_INT 0
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 0
34962: PUSH
34963: LD_INT 1
34965: NEG
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 1
34973: PUSH
34974: LD_INT 0
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 1
34983: PUSH
34984: LD_INT 1
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 0
34993: PUSH
34994: LD_INT 1
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 1
35003: NEG
35004: PUSH
35005: LD_INT 0
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 1
35014: NEG
35015: PUSH
35016: LD_INT 1
35018: NEG
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 1
35026: NEG
35027: PUSH
35028: LD_INT 2
35030: NEG
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 0
35038: PUSH
35039: LD_INT 2
35041: NEG
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: LD_INT 1
35049: PUSH
35050: LD_INT 1
35052: NEG
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 2
35060: PUSH
35061: LD_INT 0
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: LD_INT 2
35070: PUSH
35071: LD_INT 1
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 2
35080: PUSH
35081: LD_INT 2
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 1
35090: PUSH
35091: LD_INT 2
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: LD_INT 0
35100: PUSH
35101: LD_INT 2
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 1
35110: NEG
35111: PUSH
35112: LD_INT 1
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: LD_INT 2
35121: NEG
35122: PUSH
35123: LD_INT 0
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: PUSH
35130: LD_INT 2
35132: NEG
35133: PUSH
35134: LD_INT 1
35136: NEG
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: LD_INT 2
35144: NEG
35145: PUSH
35146: LD_INT 2
35148: NEG
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35175: LD_ADDR_VAR 0 57
35179: PUSH
35180: LD_INT 0
35182: PUSH
35183: LD_INT 0
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 0
35192: PUSH
35193: LD_INT 1
35195: NEG
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 1
35203: PUSH
35204: LD_INT 0
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 1
35213: PUSH
35214: LD_INT 1
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 0
35223: PUSH
35224: LD_INT 1
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 1
35233: NEG
35234: PUSH
35235: LD_INT 0
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 1
35244: NEG
35245: PUSH
35246: LD_INT 1
35248: NEG
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 1
35256: NEG
35257: PUSH
35258: LD_INT 2
35260: NEG
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 0
35268: PUSH
35269: LD_INT 2
35271: NEG
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: LD_INT 1
35279: PUSH
35280: LD_INT 1
35282: NEG
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 2
35290: PUSH
35291: LD_INT 0
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 2
35300: PUSH
35301: LD_INT 1
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 2
35310: PUSH
35311: LD_INT 2
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 1
35320: PUSH
35321: LD_INT 2
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 0
35330: PUSH
35331: LD_INT 2
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: LD_INT 1
35340: NEG
35341: PUSH
35342: LD_INT 1
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 2
35351: NEG
35352: PUSH
35353: LD_INT 0
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 2
35362: NEG
35363: PUSH
35364: LD_INT 1
35366: NEG
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 2
35374: NEG
35375: PUSH
35376: LD_INT 2
35378: NEG
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35405: LD_ADDR_VAR 0 58
35409: PUSH
35410: LD_INT 0
35412: PUSH
35413: LD_INT 0
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 0
35422: PUSH
35423: LD_INT 1
35425: NEG
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 1
35433: PUSH
35434: LD_INT 0
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: LD_INT 1
35443: PUSH
35444: LD_INT 1
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 0
35453: PUSH
35454: LD_INT 1
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 1
35463: NEG
35464: PUSH
35465: LD_INT 0
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 1
35474: NEG
35475: PUSH
35476: LD_INT 1
35478: NEG
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: LD_INT 1
35486: NEG
35487: PUSH
35488: LD_INT 2
35490: NEG
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 0
35498: PUSH
35499: LD_INT 2
35501: NEG
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_INT 1
35509: PUSH
35510: LD_INT 1
35512: NEG
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 2
35520: PUSH
35521: LD_INT 0
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 2
35530: PUSH
35531: LD_INT 1
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 2
35540: PUSH
35541: LD_INT 2
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: LD_INT 1
35550: PUSH
35551: LD_INT 2
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 0
35560: PUSH
35561: LD_INT 2
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 1
35570: NEG
35571: PUSH
35572: LD_INT 1
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 2
35581: NEG
35582: PUSH
35583: LD_INT 0
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 2
35592: NEG
35593: PUSH
35594: LD_INT 1
35596: NEG
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PUSH
35602: LD_INT 2
35604: NEG
35605: PUSH
35606: LD_INT 2
35608: NEG
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35635: LD_ADDR_VAR 0 59
35639: PUSH
35640: LD_INT 0
35642: PUSH
35643: LD_INT 0
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 0
35652: PUSH
35653: LD_INT 1
35655: NEG
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: LD_INT 1
35663: PUSH
35664: LD_INT 0
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: LD_INT 1
35673: PUSH
35674: LD_INT 1
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 0
35683: PUSH
35684: LD_INT 1
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 1
35693: NEG
35694: PUSH
35695: LD_INT 0
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 1
35704: NEG
35705: PUSH
35706: LD_INT 1
35708: NEG
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35723: LD_ADDR_VAR 0 60
35727: PUSH
35728: LD_INT 0
35730: PUSH
35731: LD_INT 0
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 0
35740: PUSH
35741: LD_INT 1
35743: NEG
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PUSH
35749: LD_INT 1
35751: PUSH
35752: LD_INT 0
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PUSH
35759: LD_INT 1
35761: PUSH
35762: LD_INT 1
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 0
35771: PUSH
35772: LD_INT 1
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 1
35781: NEG
35782: PUSH
35783: LD_INT 0
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 1
35792: NEG
35793: PUSH
35794: LD_INT 1
35796: NEG
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35811: LD_ADDR_VAR 0 61
35815: PUSH
35816: LD_INT 0
35818: PUSH
35819: LD_INT 0
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 0
35828: PUSH
35829: LD_INT 1
35831: NEG
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 1
35839: PUSH
35840: LD_INT 0
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 1
35849: PUSH
35850: LD_INT 1
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 0
35859: PUSH
35860: LD_INT 1
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 1
35869: NEG
35870: PUSH
35871: LD_INT 0
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 1
35880: NEG
35881: PUSH
35882: LD_INT 1
35884: NEG
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35899: LD_ADDR_VAR 0 62
35903: PUSH
35904: LD_INT 0
35906: PUSH
35907: LD_INT 0
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: LD_INT 0
35916: PUSH
35917: LD_INT 1
35919: NEG
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: LD_INT 1
35927: PUSH
35928: LD_INT 0
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: LD_INT 1
35937: PUSH
35938: LD_INT 1
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 0
35947: PUSH
35948: LD_INT 1
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: LD_INT 1
35957: NEG
35958: PUSH
35959: LD_INT 0
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 1
35968: NEG
35969: PUSH
35970: LD_INT 1
35972: NEG
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35987: LD_ADDR_VAR 0 63
35991: PUSH
35992: LD_INT 0
35994: PUSH
35995: LD_INT 0
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 0
36004: PUSH
36005: LD_INT 1
36007: NEG
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 1
36015: PUSH
36016: LD_INT 0
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 1
36025: PUSH
36026: LD_INT 1
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 0
36035: PUSH
36036: LD_INT 1
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: LD_INT 1
36045: NEG
36046: PUSH
36047: LD_INT 0
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: PUSH
36054: LD_INT 1
36056: NEG
36057: PUSH
36058: LD_INT 1
36060: NEG
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36075: LD_ADDR_VAR 0 64
36079: PUSH
36080: LD_INT 0
36082: PUSH
36083: LD_INT 0
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 0
36092: PUSH
36093: LD_INT 1
36095: NEG
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 1
36103: PUSH
36104: LD_INT 0
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 1
36113: PUSH
36114: LD_INT 1
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 0
36123: PUSH
36124: LD_INT 1
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 1
36133: NEG
36134: PUSH
36135: LD_INT 0
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 1
36144: NEG
36145: PUSH
36146: LD_INT 1
36148: NEG
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: ST_TO_ADDR
// end ; 1 :
36163: GO 42060
36165: LD_INT 1
36167: DOUBLE
36168: EQUAL
36169: IFTRUE 36173
36171: GO 38796
36173: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36174: LD_ADDR_VAR 0 11
36178: PUSH
36179: LD_INT 1
36181: NEG
36182: PUSH
36183: LD_INT 3
36185: NEG
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 0
36193: PUSH
36194: LD_INT 3
36196: NEG
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: LD_INT 1
36204: PUSH
36205: LD_INT 2
36207: NEG
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: LIST
36217: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36218: LD_ADDR_VAR 0 12
36222: PUSH
36223: LD_INT 2
36225: PUSH
36226: LD_INT 1
36228: NEG
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: LD_INT 3
36236: PUSH
36237: LD_INT 0
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 3
36246: PUSH
36247: LD_INT 1
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: LIST
36258: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36259: LD_ADDR_VAR 0 13
36263: PUSH
36264: LD_INT 3
36266: PUSH
36267: LD_INT 2
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 3
36276: PUSH
36277: LD_INT 3
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: LD_INT 2
36286: PUSH
36287: LD_INT 3
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: LIST
36298: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36299: LD_ADDR_VAR 0 14
36303: PUSH
36304: LD_INT 1
36306: PUSH
36307: LD_INT 3
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 0
36316: PUSH
36317: LD_INT 3
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 1
36326: NEG
36327: PUSH
36328: LD_INT 2
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: LIST
36339: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36340: LD_ADDR_VAR 0 15
36344: PUSH
36345: LD_INT 2
36347: NEG
36348: PUSH
36349: LD_INT 1
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 3
36358: NEG
36359: PUSH
36360: LD_INT 0
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 3
36369: NEG
36370: PUSH
36371: LD_INT 1
36373: NEG
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: LIST
36383: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36384: LD_ADDR_VAR 0 16
36388: PUSH
36389: LD_INT 2
36391: NEG
36392: PUSH
36393: LD_INT 3
36395: NEG
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 3
36403: NEG
36404: PUSH
36405: LD_INT 2
36407: NEG
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: LD_INT 3
36415: NEG
36416: PUSH
36417: LD_INT 3
36419: NEG
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: LIST
36429: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36430: LD_ADDR_VAR 0 17
36434: PUSH
36435: LD_INT 1
36437: NEG
36438: PUSH
36439: LD_INT 3
36441: NEG
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: LD_INT 0
36449: PUSH
36450: LD_INT 3
36452: NEG
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: LD_INT 1
36460: PUSH
36461: LD_INT 2
36463: NEG
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: LIST
36473: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36474: LD_ADDR_VAR 0 18
36478: PUSH
36479: LD_INT 2
36481: PUSH
36482: LD_INT 1
36484: NEG
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 3
36492: PUSH
36493: LD_INT 0
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 3
36502: PUSH
36503: LD_INT 1
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: LIST
36514: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36515: LD_ADDR_VAR 0 19
36519: PUSH
36520: LD_INT 3
36522: PUSH
36523: LD_INT 2
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 3
36532: PUSH
36533: LD_INT 3
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 2
36542: PUSH
36543: LD_INT 3
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: LIST
36554: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36555: LD_ADDR_VAR 0 20
36559: PUSH
36560: LD_INT 1
36562: PUSH
36563: LD_INT 3
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 0
36572: PUSH
36573: LD_INT 3
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 1
36582: NEG
36583: PUSH
36584: LD_INT 2
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: LIST
36595: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36596: LD_ADDR_VAR 0 21
36600: PUSH
36601: LD_INT 2
36603: NEG
36604: PUSH
36605: LD_INT 1
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 3
36614: NEG
36615: PUSH
36616: LD_INT 0
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_INT 3
36625: NEG
36626: PUSH
36627: LD_INT 1
36629: NEG
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: LIST
36639: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36640: LD_ADDR_VAR 0 22
36644: PUSH
36645: LD_INT 2
36647: NEG
36648: PUSH
36649: LD_INT 3
36651: NEG
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: LD_INT 3
36659: NEG
36660: PUSH
36661: LD_INT 2
36663: NEG
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 3
36671: NEG
36672: PUSH
36673: LD_INT 3
36675: NEG
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: LIST
36685: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
36686: LD_ADDR_VAR 0 23
36690: PUSH
36691: LD_INT 0
36693: PUSH
36694: LD_INT 3
36696: NEG
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 1
36704: NEG
36705: PUSH
36706: LD_INT 4
36708: NEG
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 1
36716: PUSH
36717: LD_INT 3
36719: NEG
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: LIST
36729: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
36730: LD_ADDR_VAR 0 24
36734: PUSH
36735: LD_INT 3
36737: PUSH
36738: LD_INT 0
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 3
36747: PUSH
36748: LD_INT 1
36750: NEG
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: LD_INT 4
36758: PUSH
36759: LD_INT 1
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: LIST
36770: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
36771: LD_ADDR_VAR 0 25
36775: PUSH
36776: LD_INT 3
36778: PUSH
36779: LD_INT 3
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: LD_INT 4
36788: PUSH
36789: LD_INT 3
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 3
36798: PUSH
36799: LD_INT 4
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: LIST
36810: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
36811: LD_ADDR_VAR 0 26
36815: PUSH
36816: LD_INT 0
36818: PUSH
36819: LD_INT 3
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 1
36828: PUSH
36829: LD_INT 4
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 1
36838: NEG
36839: PUSH
36840: LD_INT 3
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: LIST
36851: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
36852: LD_ADDR_VAR 0 27
36856: PUSH
36857: LD_INT 3
36859: NEG
36860: PUSH
36861: LD_INT 0
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 3
36870: NEG
36871: PUSH
36872: LD_INT 1
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 4
36881: NEG
36882: PUSH
36883: LD_INT 1
36885: NEG
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: LIST
36895: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
36896: LD_ADDR_VAR 0 28
36900: PUSH
36901: LD_INT 3
36903: NEG
36904: PUSH
36905: LD_INT 3
36907: NEG
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 3
36915: NEG
36916: PUSH
36917: LD_INT 4
36919: NEG
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 4
36927: NEG
36928: PUSH
36929: LD_INT 3
36931: NEG
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: LIST
36941: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
36942: LD_ADDR_VAR 0 29
36946: PUSH
36947: LD_INT 1
36949: NEG
36950: PUSH
36951: LD_INT 3
36953: NEG
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 0
36961: PUSH
36962: LD_INT 3
36964: NEG
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 1
36972: PUSH
36973: LD_INT 2
36975: NEG
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 1
36983: NEG
36984: PUSH
36985: LD_INT 4
36987: NEG
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 0
36995: PUSH
36996: LD_INT 4
36998: NEG
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: LD_INT 1
37006: PUSH
37007: LD_INT 3
37009: NEG
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: LD_INT 1
37017: NEG
37018: PUSH
37019: LD_INT 5
37021: NEG
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: LD_INT 0
37029: PUSH
37030: LD_INT 5
37032: NEG
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 1
37040: PUSH
37041: LD_INT 4
37043: NEG
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: LD_INT 1
37051: NEG
37052: PUSH
37053: LD_INT 6
37055: NEG
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 0
37063: PUSH
37064: LD_INT 6
37066: NEG
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: LD_INT 1
37074: PUSH
37075: LD_INT 5
37077: NEG
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
37097: LD_ADDR_VAR 0 30
37101: PUSH
37102: LD_INT 2
37104: PUSH
37105: LD_INT 1
37107: NEG
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 3
37115: PUSH
37116: LD_INT 0
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 3
37125: PUSH
37126: LD_INT 1
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 3
37135: PUSH
37136: LD_INT 1
37138: NEG
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: LD_INT 4
37146: PUSH
37147: LD_INT 0
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: LD_INT 4
37156: PUSH
37157: LD_INT 1
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 4
37166: PUSH
37167: LD_INT 1
37169: NEG
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: LD_INT 5
37177: PUSH
37178: LD_INT 0
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 5
37187: PUSH
37188: LD_INT 1
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 5
37197: PUSH
37198: LD_INT 1
37200: NEG
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 6
37208: PUSH
37209: LD_INT 0
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PUSH
37216: LD_INT 6
37218: PUSH
37219: LD_INT 1
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
37240: LD_ADDR_VAR 0 31
37244: PUSH
37245: LD_INT 3
37247: PUSH
37248: LD_INT 2
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 3
37257: PUSH
37258: LD_INT 3
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 2
37267: PUSH
37268: LD_INT 3
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 4
37277: PUSH
37278: LD_INT 3
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 4
37287: PUSH
37288: LD_INT 4
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 3
37297: PUSH
37298: LD_INT 4
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 5
37307: PUSH
37308: LD_INT 4
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 5
37317: PUSH
37318: LD_INT 5
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: LD_INT 4
37327: PUSH
37328: LD_INT 5
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 6
37337: PUSH
37338: LD_INT 5
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: LD_INT 6
37347: PUSH
37348: LD_INT 6
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 5
37357: PUSH
37358: LD_INT 6
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
37379: LD_ADDR_VAR 0 32
37383: PUSH
37384: LD_INT 1
37386: PUSH
37387: LD_INT 3
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 0
37396: PUSH
37397: LD_INT 3
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 1
37406: NEG
37407: PUSH
37408: LD_INT 2
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 1
37417: PUSH
37418: LD_INT 4
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 0
37427: PUSH
37428: LD_INT 4
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 1
37437: NEG
37438: PUSH
37439: LD_INT 3
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 1
37448: PUSH
37449: LD_INT 5
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 0
37458: PUSH
37459: LD_INT 5
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 1
37468: NEG
37469: PUSH
37470: LD_INT 4
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 1
37479: PUSH
37480: LD_INT 6
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 0
37489: PUSH
37490: LD_INT 6
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 1
37499: NEG
37500: PUSH
37501: LD_INT 5
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
37522: LD_ADDR_VAR 0 33
37526: PUSH
37527: LD_INT 2
37529: NEG
37530: PUSH
37531: LD_INT 1
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: LD_INT 3
37540: NEG
37541: PUSH
37542: LD_INT 0
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 3
37551: NEG
37552: PUSH
37553: LD_INT 1
37555: NEG
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 3
37563: NEG
37564: PUSH
37565: LD_INT 1
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 4
37574: NEG
37575: PUSH
37576: LD_INT 0
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 4
37585: NEG
37586: PUSH
37587: LD_INT 1
37589: NEG
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 4
37597: NEG
37598: PUSH
37599: LD_INT 1
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 5
37608: NEG
37609: PUSH
37610: LD_INT 0
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 5
37619: NEG
37620: PUSH
37621: LD_INT 1
37623: NEG
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 5
37631: NEG
37632: PUSH
37633: LD_INT 1
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PUSH
37640: LD_INT 6
37642: NEG
37643: PUSH
37644: LD_INT 0
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 6
37653: NEG
37654: PUSH
37655: LD_INT 1
37657: NEG
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
37677: LD_ADDR_VAR 0 34
37681: PUSH
37682: LD_INT 2
37684: NEG
37685: PUSH
37686: LD_INT 3
37688: NEG
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 3
37696: NEG
37697: PUSH
37698: LD_INT 2
37700: NEG
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 3
37708: NEG
37709: PUSH
37710: LD_INT 3
37712: NEG
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 3
37720: NEG
37721: PUSH
37722: LD_INT 4
37724: NEG
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 4
37732: NEG
37733: PUSH
37734: LD_INT 3
37736: NEG
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 4
37744: NEG
37745: PUSH
37746: LD_INT 4
37748: NEG
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 4
37756: NEG
37757: PUSH
37758: LD_INT 5
37760: NEG
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: LD_INT 5
37768: NEG
37769: PUSH
37770: LD_INT 4
37772: NEG
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 5
37780: NEG
37781: PUSH
37782: LD_INT 5
37784: NEG
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 5
37792: NEG
37793: PUSH
37794: LD_INT 6
37796: NEG
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 6
37804: NEG
37805: PUSH
37806: LD_INT 5
37808: NEG
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 6
37816: NEG
37817: PUSH
37818: LD_INT 6
37820: NEG
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
37840: LD_ADDR_VAR 0 41
37844: PUSH
37845: LD_INT 0
37847: PUSH
37848: LD_INT 2
37850: NEG
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 1
37858: NEG
37859: PUSH
37860: LD_INT 3
37862: NEG
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: LD_INT 1
37870: PUSH
37871: LD_INT 2
37873: NEG
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: LIST
37883: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
37884: LD_ADDR_VAR 0 42
37888: PUSH
37889: LD_INT 2
37891: PUSH
37892: LD_INT 0
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 2
37901: PUSH
37902: LD_INT 1
37904: NEG
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 3
37912: PUSH
37913: LD_INT 1
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: LIST
37924: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
37925: LD_ADDR_VAR 0 43
37929: PUSH
37930: LD_INT 2
37932: PUSH
37933: LD_INT 2
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 3
37942: PUSH
37943: LD_INT 2
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 2
37952: PUSH
37953: LD_INT 3
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: LIST
37964: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
37965: LD_ADDR_VAR 0 44
37969: PUSH
37970: LD_INT 0
37972: PUSH
37973: LD_INT 2
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 1
37982: PUSH
37983: LD_INT 3
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 1
37992: NEG
37993: PUSH
37994: LD_INT 2
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: LIST
38005: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38006: LD_ADDR_VAR 0 45
38010: PUSH
38011: LD_INT 2
38013: NEG
38014: PUSH
38015: LD_INT 0
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: LD_INT 2
38024: NEG
38025: PUSH
38026: LD_INT 1
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PUSH
38033: LD_INT 3
38035: NEG
38036: PUSH
38037: LD_INT 1
38039: NEG
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: LIST
38049: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38050: LD_ADDR_VAR 0 46
38054: PUSH
38055: LD_INT 2
38057: NEG
38058: PUSH
38059: LD_INT 2
38061: NEG
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 2
38069: NEG
38070: PUSH
38071: LD_INT 3
38073: NEG
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 3
38081: NEG
38082: PUSH
38083: LD_INT 2
38085: NEG
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: LIST
38095: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
38096: LD_ADDR_VAR 0 47
38100: PUSH
38101: LD_INT 2
38103: NEG
38104: PUSH
38105: LD_INT 3
38107: NEG
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 1
38115: NEG
38116: PUSH
38117: LD_INT 3
38119: NEG
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38129: LD_ADDR_VAR 0 48
38133: PUSH
38134: LD_INT 1
38136: PUSH
38137: LD_INT 2
38139: NEG
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 2
38147: PUSH
38148: LD_INT 1
38150: NEG
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
38160: LD_ADDR_VAR 0 49
38164: PUSH
38165: LD_INT 3
38167: PUSH
38168: LD_INT 1
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 3
38177: PUSH
38178: LD_INT 2
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
38189: LD_ADDR_VAR 0 50
38193: PUSH
38194: LD_INT 2
38196: PUSH
38197: LD_INT 3
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 1
38206: PUSH
38207: LD_INT 3
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38218: LD_ADDR_VAR 0 51
38222: PUSH
38223: LD_INT 1
38225: NEG
38226: PUSH
38227: LD_INT 2
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 2
38236: NEG
38237: PUSH
38238: LD_INT 1
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38249: LD_ADDR_VAR 0 52
38253: PUSH
38254: LD_INT 3
38256: NEG
38257: PUSH
38258: LD_INT 1
38260: NEG
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 3
38268: NEG
38269: PUSH
38270: LD_INT 2
38272: NEG
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38282: LD_ADDR_VAR 0 53
38286: PUSH
38287: LD_INT 1
38289: NEG
38290: PUSH
38291: LD_INT 3
38293: NEG
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 0
38301: PUSH
38302: LD_INT 3
38304: NEG
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 1
38312: PUSH
38313: LD_INT 2
38315: NEG
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: LIST
38325: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38326: LD_ADDR_VAR 0 54
38330: PUSH
38331: LD_INT 2
38333: PUSH
38334: LD_INT 1
38336: NEG
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 3
38344: PUSH
38345: LD_INT 0
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 3
38354: PUSH
38355: LD_INT 1
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: LIST
38366: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38367: LD_ADDR_VAR 0 55
38371: PUSH
38372: LD_INT 3
38374: PUSH
38375: LD_INT 2
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 3
38384: PUSH
38385: LD_INT 3
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PUSH
38392: LD_INT 2
38394: PUSH
38395: LD_INT 3
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: LIST
38406: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38407: LD_ADDR_VAR 0 56
38411: PUSH
38412: LD_INT 1
38414: PUSH
38415: LD_INT 3
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 0
38424: PUSH
38425: LD_INT 3
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 1
38434: NEG
38435: PUSH
38436: LD_INT 2
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: LIST
38447: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38448: LD_ADDR_VAR 0 57
38452: PUSH
38453: LD_INT 2
38455: NEG
38456: PUSH
38457: LD_INT 1
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: LD_INT 3
38466: NEG
38467: PUSH
38468: LD_INT 0
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 3
38477: NEG
38478: PUSH
38479: LD_INT 1
38481: NEG
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: LIST
38491: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38492: LD_ADDR_VAR 0 58
38496: PUSH
38497: LD_INT 2
38499: NEG
38500: PUSH
38501: LD_INT 3
38503: NEG
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 3
38511: NEG
38512: PUSH
38513: LD_INT 2
38515: NEG
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 3
38523: NEG
38524: PUSH
38525: LD_INT 3
38527: NEG
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: LIST
38537: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
38538: LD_ADDR_VAR 0 59
38542: PUSH
38543: LD_INT 1
38545: NEG
38546: PUSH
38547: LD_INT 2
38549: NEG
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 0
38557: PUSH
38558: LD_INT 2
38560: NEG
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 1
38568: PUSH
38569: LD_INT 1
38571: NEG
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: LIST
38581: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38582: LD_ADDR_VAR 0 60
38586: PUSH
38587: LD_INT 1
38589: PUSH
38590: LD_INT 1
38592: NEG
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 2
38600: PUSH
38601: LD_INT 0
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 2
38610: PUSH
38611: LD_INT 1
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: LIST
38622: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38623: LD_ADDR_VAR 0 61
38627: PUSH
38628: LD_INT 2
38630: PUSH
38631: LD_INT 1
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 2
38640: PUSH
38641: LD_INT 2
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 1
38650: PUSH
38651: LD_INT 2
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: LIST
38662: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38663: LD_ADDR_VAR 0 62
38667: PUSH
38668: LD_INT 1
38670: PUSH
38671: LD_INT 2
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 0
38680: PUSH
38681: LD_INT 2
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 1
38690: NEG
38691: PUSH
38692: LD_INT 1
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: LIST
38703: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38704: LD_ADDR_VAR 0 63
38708: PUSH
38709: LD_INT 1
38711: NEG
38712: PUSH
38713: LD_INT 1
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 2
38722: NEG
38723: PUSH
38724: LD_INT 0
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 2
38733: NEG
38734: PUSH
38735: LD_INT 1
38737: NEG
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: LIST
38747: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38748: LD_ADDR_VAR 0 64
38752: PUSH
38753: LD_INT 1
38755: NEG
38756: PUSH
38757: LD_INT 2
38759: NEG
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 2
38767: NEG
38768: PUSH
38769: LD_INT 1
38771: NEG
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 2
38779: NEG
38780: PUSH
38781: LD_INT 2
38783: NEG
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: LIST
38793: ST_TO_ADDR
// end ; 2 :
38794: GO 42060
38796: LD_INT 2
38798: DOUBLE
38799: EQUAL
38800: IFTRUE 38804
38802: GO 42059
38804: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
38805: LD_ADDR_VAR 0 29
38809: PUSH
38810: LD_INT 4
38812: PUSH
38813: LD_INT 0
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 4
38822: PUSH
38823: LD_INT 1
38825: NEG
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 5
38833: PUSH
38834: LD_INT 0
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 5
38843: PUSH
38844: LD_INT 1
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 4
38853: PUSH
38854: LD_INT 1
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 3
38863: PUSH
38864: LD_INT 0
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 3
38873: PUSH
38874: LD_INT 1
38876: NEG
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 3
38884: PUSH
38885: LD_INT 2
38887: NEG
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 5
38895: PUSH
38896: LD_INT 2
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 3
38905: PUSH
38906: LD_INT 3
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 3
38915: PUSH
38916: LD_INT 2
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 4
38925: PUSH
38926: LD_INT 3
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 4
38935: PUSH
38936: LD_INT 4
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 3
38945: PUSH
38946: LD_INT 4
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 2
38955: PUSH
38956: LD_INT 3
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 2
38965: PUSH
38966: LD_INT 2
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 4
38975: PUSH
38976: LD_INT 2
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 2
38985: PUSH
38986: LD_INT 4
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 0
38995: PUSH
38996: LD_INT 4
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 0
39005: PUSH
39006: LD_INT 3
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 1
39015: PUSH
39016: LD_INT 4
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 1
39025: PUSH
39026: LD_INT 5
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: LD_INT 0
39035: PUSH
39036: LD_INT 5
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 1
39045: NEG
39046: PUSH
39047: LD_INT 4
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 1
39056: NEG
39057: PUSH
39058: LD_INT 3
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 2
39067: PUSH
39068: LD_INT 5
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 2
39077: NEG
39078: PUSH
39079: LD_INT 3
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 3
39088: NEG
39089: PUSH
39090: LD_INT 0
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 3
39099: NEG
39100: PUSH
39101: LD_INT 1
39103: NEG
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 2
39111: NEG
39112: PUSH
39113: LD_INT 0
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 2
39122: NEG
39123: PUSH
39124: LD_INT 1
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 3
39133: NEG
39134: PUSH
39135: LD_INT 1
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 4
39144: NEG
39145: PUSH
39146: LD_INT 0
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 4
39155: NEG
39156: PUSH
39157: LD_INT 1
39159: NEG
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 4
39167: NEG
39168: PUSH
39169: LD_INT 2
39171: NEG
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 2
39179: NEG
39180: PUSH
39181: LD_INT 2
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 4
39190: NEG
39191: PUSH
39192: LD_INT 4
39194: NEG
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 4
39202: NEG
39203: PUSH
39204: LD_INT 5
39206: NEG
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 3
39214: NEG
39215: PUSH
39216: LD_INT 4
39218: NEG
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 3
39226: NEG
39227: PUSH
39228: LD_INT 3
39230: NEG
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 4
39238: NEG
39239: PUSH
39240: LD_INT 3
39242: NEG
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 5
39250: NEG
39251: PUSH
39252: LD_INT 4
39254: NEG
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 5
39262: NEG
39263: PUSH
39264: LD_INT 5
39266: NEG
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 3
39274: NEG
39275: PUSH
39276: LD_INT 5
39278: NEG
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 5
39286: NEG
39287: PUSH
39288: LD_INT 3
39290: NEG
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
39343: LD_ADDR_VAR 0 30
39347: PUSH
39348: LD_INT 4
39350: PUSH
39351: LD_INT 4
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 4
39360: PUSH
39361: LD_INT 3
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 5
39370: PUSH
39371: LD_INT 4
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 5
39380: PUSH
39381: LD_INT 5
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 4
39390: PUSH
39391: LD_INT 5
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 3
39400: PUSH
39401: LD_INT 4
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 3
39410: PUSH
39411: LD_INT 3
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 5
39420: PUSH
39421: LD_INT 3
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 3
39430: PUSH
39431: LD_INT 5
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 0
39440: PUSH
39441: LD_INT 3
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 0
39450: PUSH
39451: LD_INT 2
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 1
39460: PUSH
39461: LD_INT 3
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 1
39470: PUSH
39471: LD_INT 4
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 0
39480: PUSH
39481: LD_INT 4
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 1
39490: NEG
39491: PUSH
39492: LD_INT 3
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 1
39501: NEG
39502: PUSH
39503: LD_INT 2
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 2
39512: PUSH
39513: LD_INT 4
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 2
39522: NEG
39523: PUSH
39524: LD_INT 2
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 4
39533: NEG
39534: PUSH
39535: LD_INT 0
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 4
39544: NEG
39545: PUSH
39546: LD_INT 1
39548: NEG
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: LD_INT 3
39556: NEG
39557: PUSH
39558: LD_INT 0
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 3
39567: NEG
39568: PUSH
39569: LD_INT 1
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 4
39578: NEG
39579: PUSH
39580: LD_INT 1
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 5
39589: NEG
39590: PUSH
39591: LD_INT 0
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 5
39600: NEG
39601: PUSH
39602: LD_INT 1
39604: NEG
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 5
39612: NEG
39613: PUSH
39614: LD_INT 2
39616: NEG
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 3
39624: NEG
39625: PUSH
39626: LD_INT 2
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 3
39635: NEG
39636: PUSH
39637: LD_INT 3
39639: NEG
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 3
39647: NEG
39648: PUSH
39649: LD_INT 4
39651: NEG
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 2
39659: NEG
39660: PUSH
39661: LD_INT 3
39663: NEG
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 2
39671: NEG
39672: PUSH
39673: LD_INT 2
39675: NEG
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 3
39683: NEG
39684: PUSH
39685: LD_INT 2
39687: NEG
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 4
39695: NEG
39696: PUSH
39697: LD_INT 3
39699: NEG
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: LD_INT 4
39707: NEG
39708: PUSH
39709: LD_INT 4
39711: NEG
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 2
39719: NEG
39720: PUSH
39721: LD_INT 4
39723: NEG
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 4
39731: NEG
39732: PUSH
39733: LD_INT 2
39735: NEG
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 0
39743: PUSH
39744: LD_INT 4
39746: NEG
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 0
39754: PUSH
39755: LD_INT 5
39757: NEG
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 1
39765: PUSH
39766: LD_INT 4
39768: NEG
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 1
39776: PUSH
39777: LD_INT 3
39779: NEG
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 0
39787: PUSH
39788: LD_INT 3
39790: NEG
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 1
39798: NEG
39799: PUSH
39800: LD_INT 4
39802: NEG
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 1
39810: NEG
39811: PUSH
39812: LD_INT 5
39814: NEG
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 2
39822: PUSH
39823: LD_INT 3
39825: NEG
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 2
39833: NEG
39834: PUSH
39835: LD_INT 5
39837: NEG
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
39890: LD_ADDR_VAR 0 31
39894: PUSH
39895: LD_INT 0
39897: PUSH
39898: LD_INT 4
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 0
39907: PUSH
39908: LD_INT 3
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 1
39917: PUSH
39918: LD_INT 4
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 1
39927: PUSH
39928: LD_INT 5
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 0
39937: PUSH
39938: LD_INT 5
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 1
39947: NEG
39948: PUSH
39949: LD_INT 4
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 1
39958: NEG
39959: PUSH
39960: LD_INT 3
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 2
39969: PUSH
39970: LD_INT 5
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 2
39979: NEG
39980: PUSH
39981: LD_INT 3
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 3
39990: NEG
39991: PUSH
39992: LD_INT 0
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 3
40001: NEG
40002: PUSH
40003: LD_INT 1
40005: NEG
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 2
40013: NEG
40014: PUSH
40015: LD_INT 0
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 2
40024: NEG
40025: PUSH
40026: LD_INT 1
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 3
40035: NEG
40036: PUSH
40037: LD_INT 1
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 4
40046: NEG
40047: PUSH
40048: LD_INT 0
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 4
40057: NEG
40058: PUSH
40059: LD_INT 1
40061: NEG
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 4
40069: NEG
40070: PUSH
40071: LD_INT 2
40073: NEG
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 2
40081: NEG
40082: PUSH
40083: LD_INT 2
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 4
40092: NEG
40093: PUSH
40094: LD_INT 4
40096: NEG
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 4
40104: NEG
40105: PUSH
40106: LD_INT 5
40108: NEG
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 3
40116: NEG
40117: PUSH
40118: LD_INT 4
40120: NEG
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 3
40128: NEG
40129: PUSH
40130: LD_INT 3
40132: NEG
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 4
40140: NEG
40141: PUSH
40142: LD_INT 3
40144: NEG
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 5
40152: NEG
40153: PUSH
40154: LD_INT 4
40156: NEG
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 5
40164: NEG
40165: PUSH
40166: LD_INT 5
40168: NEG
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 3
40176: NEG
40177: PUSH
40178: LD_INT 5
40180: NEG
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 5
40188: NEG
40189: PUSH
40190: LD_INT 3
40192: NEG
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 0
40200: PUSH
40201: LD_INT 3
40203: NEG
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 0
40211: PUSH
40212: LD_INT 4
40214: NEG
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 1
40222: PUSH
40223: LD_INT 3
40225: NEG
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 1
40233: PUSH
40234: LD_INT 2
40236: NEG
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 0
40244: PUSH
40245: LD_INT 2
40247: NEG
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 1
40255: NEG
40256: PUSH
40257: LD_INT 3
40259: NEG
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 1
40267: NEG
40268: PUSH
40269: LD_INT 4
40271: NEG
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 2
40279: PUSH
40280: LD_INT 2
40282: NEG
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 2
40290: NEG
40291: PUSH
40292: LD_INT 4
40294: NEG
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 4
40302: PUSH
40303: LD_INT 0
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 4
40312: PUSH
40313: LD_INT 1
40315: NEG
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 5
40323: PUSH
40324: LD_INT 0
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 5
40333: PUSH
40334: LD_INT 1
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 4
40343: PUSH
40344: LD_INT 1
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 3
40353: PUSH
40354: LD_INT 0
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: LD_INT 3
40363: PUSH
40364: LD_INT 1
40366: NEG
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PUSH
40372: LD_INT 3
40374: PUSH
40375: LD_INT 2
40377: NEG
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 5
40385: PUSH
40386: LD_INT 2
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
40440: LD_ADDR_VAR 0 32
40444: PUSH
40445: LD_INT 4
40447: NEG
40448: PUSH
40449: LD_INT 0
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 4
40458: NEG
40459: PUSH
40460: LD_INT 1
40462: NEG
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 3
40470: NEG
40471: PUSH
40472: LD_INT 0
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 3
40481: NEG
40482: PUSH
40483: LD_INT 1
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 4
40492: NEG
40493: PUSH
40494: LD_INT 1
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 5
40503: NEG
40504: PUSH
40505: LD_INT 0
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 5
40514: NEG
40515: PUSH
40516: LD_INT 1
40518: NEG
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 5
40526: NEG
40527: PUSH
40528: LD_INT 2
40530: NEG
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 3
40538: NEG
40539: PUSH
40540: LD_INT 2
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 3
40549: NEG
40550: PUSH
40551: LD_INT 3
40553: NEG
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: LD_INT 3
40561: NEG
40562: PUSH
40563: LD_INT 4
40565: NEG
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PUSH
40571: LD_INT 2
40573: NEG
40574: PUSH
40575: LD_INT 3
40577: NEG
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 2
40585: NEG
40586: PUSH
40587: LD_INT 2
40589: NEG
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 3
40597: NEG
40598: PUSH
40599: LD_INT 2
40601: NEG
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 4
40609: NEG
40610: PUSH
40611: LD_INT 3
40613: NEG
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 4
40621: NEG
40622: PUSH
40623: LD_INT 4
40625: NEG
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 2
40633: NEG
40634: PUSH
40635: LD_INT 4
40637: NEG
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 4
40645: NEG
40646: PUSH
40647: LD_INT 2
40649: NEG
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: PUSH
40655: LD_INT 0
40657: PUSH
40658: LD_INT 4
40660: NEG
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 0
40668: PUSH
40669: LD_INT 5
40671: NEG
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 1
40679: PUSH
40680: LD_INT 4
40682: NEG
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 1
40690: PUSH
40691: LD_INT 3
40693: NEG
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 0
40701: PUSH
40702: LD_INT 3
40704: NEG
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 1
40712: NEG
40713: PUSH
40714: LD_INT 4
40716: NEG
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 1
40724: NEG
40725: PUSH
40726: LD_INT 5
40728: NEG
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 2
40736: PUSH
40737: LD_INT 3
40739: NEG
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 2
40747: NEG
40748: PUSH
40749: LD_INT 5
40751: NEG
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 3
40759: PUSH
40760: LD_INT 0
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 3
40769: PUSH
40770: LD_INT 1
40772: NEG
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 4
40780: PUSH
40781: LD_INT 0
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 4
40790: PUSH
40791: LD_INT 1
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 3
40800: PUSH
40801: LD_INT 1
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 2
40810: PUSH
40811: LD_INT 0
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 2
40820: PUSH
40821: LD_INT 1
40823: NEG
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 2
40831: PUSH
40832: LD_INT 2
40834: NEG
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 4
40842: PUSH
40843: LD_INT 2
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 4
40852: PUSH
40853: LD_INT 4
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 4
40862: PUSH
40863: LD_INT 3
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 5
40872: PUSH
40873: LD_INT 4
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 5
40882: PUSH
40883: LD_INT 5
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 4
40892: PUSH
40893: LD_INT 5
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 3
40902: PUSH
40903: LD_INT 4
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 3
40912: PUSH
40913: LD_INT 3
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 5
40922: PUSH
40923: LD_INT 3
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 3
40932: PUSH
40933: LD_INT 5
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
40987: LD_ADDR_VAR 0 33
40991: PUSH
40992: LD_INT 4
40994: NEG
40995: PUSH
40996: LD_INT 4
40998: NEG
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 4
41006: NEG
41007: PUSH
41008: LD_INT 5
41010: NEG
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 3
41018: NEG
41019: PUSH
41020: LD_INT 4
41022: NEG
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 3
41030: NEG
41031: PUSH
41032: LD_INT 3
41034: NEG
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 4
41042: NEG
41043: PUSH
41044: LD_INT 3
41046: NEG
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 5
41054: NEG
41055: PUSH
41056: LD_INT 4
41058: NEG
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 5
41066: NEG
41067: PUSH
41068: LD_INT 5
41070: NEG
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 3
41078: NEG
41079: PUSH
41080: LD_INT 5
41082: NEG
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 5
41090: NEG
41091: PUSH
41092: LD_INT 3
41094: NEG
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 0
41102: PUSH
41103: LD_INT 3
41105: NEG
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 0
41113: PUSH
41114: LD_INT 4
41116: NEG
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 1
41124: PUSH
41125: LD_INT 3
41127: NEG
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 1
41135: PUSH
41136: LD_INT 2
41138: NEG
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 0
41146: PUSH
41147: LD_INT 2
41149: NEG
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 1
41157: NEG
41158: PUSH
41159: LD_INT 3
41161: NEG
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 1
41169: NEG
41170: PUSH
41171: LD_INT 4
41173: NEG
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 2
41181: PUSH
41182: LD_INT 2
41184: NEG
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 2
41192: NEG
41193: PUSH
41194: LD_INT 4
41196: NEG
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 4
41204: PUSH
41205: LD_INT 0
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 4
41214: PUSH
41215: LD_INT 1
41217: NEG
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 5
41225: PUSH
41226: LD_INT 0
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 5
41235: PUSH
41236: LD_INT 1
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 4
41245: PUSH
41246: LD_INT 1
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 3
41255: PUSH
41256: LD_INT 0
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 3
41265: PUSH
41266: LD_INT 1
41268: NEG
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 3
41276: PUSH
41277: LD_INT 2
41279: NEG
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 5
41287: PUSH
41288: LD_INT 2
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 3
41297: PUSH
41298: LD_INT 3
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PUSH
41305: LD_INT 3
41307: PUSH
41308: LD_INT 2
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 4
41317: PUSH
41318: LD_INT 3
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 4
41327: PUSH
41328: LD_INT 4
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 3
41337: PUSH
41338: LD_INT 4
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 2
41347: PUSH
41348: LD_INT 3
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 2
41357: PUSH
41358: LD_INT 2
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 4
41367: PUSH
41368: LD_INT 2
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 2
41377: PUSH
41378: LD_INT 4
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 0
41387: PUSH
41388: LD_INT 4
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 0
41397: PUSH
41398: LD_INT 3
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 1
41407: PUSH
41408: LD_INT 4
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 1
41417: PUSH
41418: LD_INT 5
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 0
41427: PUSH
41428: LD_INT 5
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 1
41437: NEG
41438: PUSH
41439: LD_INT 4
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 1
41448: NEG
41449: PUSH
41450: LD_INT 3
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 2
41459: PUSH
41460: LD_INT 5
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 2
41469: NEG
41470: PUSH
41471: LD_INT 3
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
41525: LD_ADDR_VAR 0 34
41529: PUSH
41530: LD_INT 0
41532: PUSH
41533: LD_INT 4
41535: NEG
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 0
41543: PUSH
41544: LD_INT 5
41546: NEG
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 1
41554: PUSH
41555: LD_INT 4
41557: NEG
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 1
41565: PUSH
41566: LD_INT 3
41568: NEG
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 0
41576: PUSH
41577: LD_INT 3
41579: NEG
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 1
41587: NEG
41588: PUSH
41589: LD_INT 4
41591: NEG
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 1
41599: NEG
41600: PUSH
41601: LD_INT 5
41603: NEG
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PUSH
41609: LD_INT 2
41611: PUSH
41612: LD_INT 3
41614: NEG
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 2
41622: NEG
41623: PUSH
41624: LD_INT 5
41626: NEG
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 3
41634: PUSH
41635: LD_INT 0
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 3
41644: PUSH
41645: LD_INT 1
41647: NEG
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 4
41655: PUSH
41656: LD_INT 0
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 4
41665: PUSH
41666: LD_INT 1
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 3
41675: PUSH
41676: LD_INT 1
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 2
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 2
41695: PUSH
41696: LD_INT 1
41698: NEG
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 2
41706: PUSH
41707: LD_INT 2
41709: NEG
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 4
41717: PUSH
41718: LD_INT 2
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 4
41727: PUSH
41728: LD_INT 4
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 4
41737: PUSH
41738: LD_INT 3
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 5
41747: PUSH
41748: LD_INT 4
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 5
41757: PUSH
41758: LD_INT 5
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 4
41767: PUSH
41768: LD_INT 5
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 3
41777: PUSH
41778: LD_INT 4
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 3
41787: PUSH
41788: LD_INT 3
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 5
41797: PUSH
41798: LD_INT 3
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 3
41807: PUSH
41808: LD_INT 5
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 0
41817: PUSH
41818: LD_INT 3
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 0
41827: PUSH
41828: LD_INT 2
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 1
41837: PUSH
41838: LD_INT 3
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 1
41847: PUSH
41848: LD_INT 4
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 0
41857: PUSH
41858: LD_INT 4
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 1
41867: NEG
41868: PUSH
41869: LD_INT 3
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 1
41878: NEG
41879: PUSH
41880: LD_INT 2
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 2
41889: PUSH
41890: LD_INT 4
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 2
41899: NEG
41900: PUSH
41901: LD_INT 2
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 4
41910: NEG
41911: PUSH
41912: LD_INT 0
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 4
41921: NEG
41922: PUSH
41923: LD_INT 1
41925: NEG
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 3
41933: NEG
41934: PUSH
41935: LD_INT 0
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 3
41944: NEG
41945: PUSH
41946: LD_INT 1
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 4
41955: NEG
41956: PUSH
41957: LD_INT 1
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 5
41966: NEG
41967: PUSH
41968: LD_INT 0
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 5
41977: NEG
41978: PUSH
41979: LD_INT 1
41981: NEG
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 5
41989: NEG
41990: PUSH
41991: LD_INT 2
41993: NEG
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 3
42001: NEG
42002: PUSH
42003: LD_INT 2
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: ST_TO_ADDR
// end ; end ;
42057: GO 42060
42059: POP
// case btype of b_depot , b_warehouse :
42060: LD_VAR 0 1
42064: PUSH
42065: LD_INT 0
42067: DOUBLE
42068: EQUAL
42069: IFTRUE 42079
42071: LD_INT 1
42073: DOUBLE
42074: EQUAL
42075: IFTRUE 42079
42077: GO 42280
42079: POP
// case nation of nation_american :
42080: LD_VAR 0 5
42084: PUSH
42085: LD_INT 1
42087: DOUBLE
42088: EQUAL
42089: IFTRUE 42093
42091: GO 42149
42093: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
42094: LD_ADDR_VAR 0 9
42098: PUSH
42099: LD_VAR 0 11
42103: PUSH
42104: LD_VAR 0 12
42108: PUSH
42109: LD_VAR 0 13
42113: PUSH
42114: LD_VAR 0 14
42118: PUSH
42119: LD_VAR 0 15
42123: PUSH
42124: LD_VAR 0 16
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: PUSH
42137: LD_VAR 0 4
42141: PUSH
42142: LD_INT 1
42144: PLUS
42145: ARRAY
42146: ST_TO_ADDR
42147: GO 42278
42149: LD_INT 2
42151: DOUBLE
42152: EQUAL
42153: IFTRUE 42157
42155: GO 42213
42157: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
42158: LD_ADDR_VAR 0 9
42162: PUSH
42163: LD_VAR 0 17
42167: PUSH
42168: LD_VAR 0 18
42172: PUSH
42173: LD_VAR 0 19
42177: PUSH
42178: LD_VAR 0 20
42182: PUSH
42183: LD_VAR 0 21
42187: PUSH
42188: LD_VAR 0 22
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: PUSH
42201: LD_VAR 0 4
42205: PUSH
42206: LD_INT 1
42208: PLUS
42209: ARRAY
42210: ST_TO_ADDR
42211: GO 42278
42213: LD_INT 3
42215: DOUBLE
42216: EQUAL
42217: IFTRUE 42221
42219: GO 42277
42221: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
42222: LD_ADDR_VAR 0 9
42226: PUSH
42227: LD_VAR 0 23
42231: PUSH
42232: LD_VAR 0 24
42236: PUSH
42237: LD_VAR 0 25
42241: PUSH
42242: LD_VAR 0 26
42246: PUSH
42247: LD_VAR 0 27
42251: PUSH
42252: LD_VAR 0 28
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: PUSH
42265: LD_VAR 0 4
42269: PUSH
42270: LD_INT 1
42272: PLUS
42273: ARRAY
42274: ST_TO_ADDR
42275: GO 42278
42277: POP
42278: GO 42833
42280: LD_INT 2
42282: DOUBLE
42283: EQUAL
42284: IFTRUE 42294
42286: LD_INT 3
42288: DOUBLE
42289: EQUAL
42290: IFTRUE 42294
42292: GO 42350
42294: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
42295: LD_ADDR_VAR 0 9
42299: PUSH
42300: LD_VAR 0 29
42304: PUSH
42305: LD_VAR 0 30
42309: PUSH
42310: LD_VAR 0 31
42314: PUSH
42315: LD_VAR 0 32
42319: PUSH
42320: LD_VAR 0 33
42324: PUSH
42325: LD_VAR 0 34
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: PUSH
42338: LD_VAR 0 4
42342: PUSH
42343: LD_INT 1
42345: PLUS
42346: ARRAY
42347: ST_TO_ADDR
42348: GO 42833
42350: LD_INT 16
42352: DOUBLE
42353: EQUAL
42354: IFTRUE 42412
42356: LD_INT 17
42358: DOUBLE
42359: EQUAL
42360: IFTRUE 42412
42362: LD_INT 18
42364: DOUBLE
42365: EQUAL
42366: IFTRUE 42412
42368: LD_INT 19
42370: DOUBLE
42371: EQUAL
42372: IFTRUE 42412
42374: LD_INT 22
42376: DOUBLE
42377: EQUAL
42378: IFTRUE 42412
42380: LD_INT 20
42382: DOUBLE
42383: EQUAL
42384: IFTRUE 42412
42386: LD_INT 21
42388: DOUBLE
42389: EQUAL
42390: IFTRUE 42412
42392: LD_INT 23
42394: DOUBLE
42395: EQUAL
42396: IFTRUE 42412
42398: LD_INT 24
42400: DOUBLE
42401: EQUAL
42402: IFTRUE 42412
42404: LD_INT 25
42406: DOUBLE
42407: EQUAL
42408: IFTRUE 42412
42410: GO 42468
42412: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
42413: LD_ADDR_VAR 0 9
42417: PUSH
42418: LD_VAR 0 35
42422: PUSH
42423: LD_VAR 0 36
42427: PUSH
42428: LD_VAR 0 37
42432: PUSH
42433: LD_VAR 0 38
42437: PUSH
42438: LD_VAR 0 39
42442: PUSH
42443: LD_VAR 0 40
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: PUSH
42456: LD_VAR 0 4
42460: PUSH
42461: LD_INT 1
42463: PLUS
42464: ARRAY
42465: ST_TO_ADDR
42466: GO 42833
42468: LD_INT 6
42470: DOUBLE
42471: EQUAL
42472: IFTRUE 42524
42474: LD_INT 7
42476: DOUBLE
42477: EQUAL
42478: IFTRUE 42524
42480: LD_INT 8
42482: DOUBLE
42483: EQUAL
42484: IFTRUE 42524
42486: LD_INT 13
42488: DOUBLE
42489: EQUAL
42490: IFTRUE 42524
42492: LD_INT 12
42494: DOUBLE
42495: EQUAL
42496: IFTRUE 42524
42498: LD_INT 15
42500: DOUBLE
42501: EQUAL
42502: IFTRUE 42524
42504: LD_INT 11
42506: DOUBLE
42507: EQUAL
42508: IFTRUE 42524
42510: LD_INT 14
42512: DOUBLE
42513: EQUAL
42514: IFTRUE 42524
42516: LD_INT 10
42518: DOUBLE
42519: EQUAL
42520: IFTRUE 42524
42522: GO 42580
42524: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
42525: LD_ADDR_VAR 0 9
42529: PUSH
42530: LD_VAR 0 41
42534: PUSH
42535: LD_VAR 0 42
42539: PUSH
42540: LD_VAR 0 43
42544: PUSH
42545: LD_VAR 0 44
42549: PUSH
42550: LD_VAR 0 45
42554: PUSH
42555: LD_VAR 0 46
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: PUSH
42568: LD_VAR 0 4
42572: PUSH
42573: LD_INT 1
42575: PLUS
42576: ARRAY
42577: ST_TO_ADDR
42578: GO 42833
42580: LD_INT 36
42582: DOUBLE
42583: EQUAL
42584: IFTRUE 42588
42586: GO 42644
42588: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
42589: LD_ADDR_VAR 0 9
42593: PUSH
42594: LD_VAR 0 47
42598: PUSH
42599: LD_VAR 0 48
42603: PUSH
42604: LD_VAR 0 49
42608: PUSH
42609: LD_VAR 0 50
42613: PUSH
42614: LD_VAR 0 51
42618: PUSH
42619: LD_VAR 0 52
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: PUSH
42632: LD_VAR 0 4
42636: PUSH
42637: LD_INT 1
42639: PLUS
42640: ARRAY
42641: ST_TO_ADDR
42642: GO 42833
42644: LD_INT 4
42646: DOUBLE
42647: EQUAL
42648: IFTRUE 42670
42650: LD_INT 5
42652: DOUBLE
42653: EQUAL
42654: IFTRUE 42670
42656: LD_INT 34
42658: DOUBLE
42659: EQUAL
42660: IFTRUE 42670
42662: LD_INT 37
42664: DOUBLE
42665: EQUAL
42666: IFTRUE 42670
42668: GO 42726
42670: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
42671: LD_ADDR_VAR 0 9
42675: PUSH
42676: LD_VAR 0 53
42680: PUSH
42681: LD_VAR 0 54
42685: PUSH
42686: LD_VAR 0 55
42690: PUSH
42691: LD_VAR 0 56
42695: PUSH
42696: LD_VAR 0 57
42700: PUSH
42701: LD_VAR 0 58
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: PUSH
42714: LD_VAR 0 4
42718: PUSH
42719: LD_INT 1
42721: PLUS
42722: ARRAY
42723: ST_TO_ADDR
42724: GO 42833
42726: LD_INT 31
42728: DOUBLE
42729: EQUAL
42730: IFTRUE 42776
42732: LD_INT 32
42734: DOUBLE
42735: EQUAL
42736: IFTRUE 42776
42738: LD_INT 33
42740: DOUBLE
42741: EQUAL
42742: IFTRUE 42776
42744: LD_INT 27
42746: DOUBLE
42747: EQUAL
42748: IFTRUE 42776
42750: LD_INT 26
42752: DOUBLE
42753: EQUAL
42754: IFTRUE 42776
42756: LD_INT 28
42758: DOUBLE
42759: EQUAL
42760: IFTRUE 42776
42762: LD_INT 29
42764: DOUBLE
42765: EQUAL
42766: IFTRUE 42776
42768: LD_INT 30
42770: DOUBLE
42771: EQUAL
42772: IFTRUE 42776
42774: GO 42832
42776: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
42777: LD_ADDR_VAR 0 9
42781: PUSH
42782: LD_VAR 0 59
42786: PUSH
42787: LD_VAR 0 60
42791: PUSH
42792: LD_VAR 0 61
42796: PUSH
42797: LD_VAR 0 62
42801: PUSH
42802: LD_VAR 0 63
42806: PUSH
42807: LD_VAR 0 64
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: PUSH
42820: LD_VAR 0 4
42824: PUSH
42825: LD_INT 1
42827: PLUS
42828: ARRAY
42829: ST_TO_ADDR
42830: GO 42833
42832: POP
// temp_list2 = [ ] ;
42833: LD_ADDR_VAR 0 10
42837: PUSH
42838: EMPTY
42839: ST_TO_ADDR
// for i in temp_list do
42840: LD_ADDR_VAR 0 8
42844: PUSH
42845: LD_VAR 0 9
42849: PUSH
42850: FOR_IN
42851: IFFALSE 42903
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
42853: LD_ADDR_VAR 0 10
42857: PUSH
42858: LD_VAR 0 10
42862: PUSH
42863: LD_VAR 0 8
42867: PUSH
42868: LD_INT 1
42870: ARRAY
42871: PUSH
42872: LD_VAR 0 2
42876: PLUS
42877: PUSH
42878: LD_VAR 0 8
42882: PUSH
42883: LD_INT 2
42885: ARRAY
42886: PUSH
42887: LD_VAR 0 3
42891: PLUS
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: EMPTY
42898: LIST
42899: ADD
42900: ST_TO_ADDR
42901: GO 42850
42903: POP
42904: POP
// result = temp_list2 ;
42905: LD_ADDR_VAR 0 7
42909: PUSH
42910: LD_VAR 0 10
42914: ST_TO_ADDR
// end ;
42915: LD_VAR 0 7
42919: RET
// export function EnemyInRange ( unit , dist ) ; begin
42920: LD_INT 0
42922: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
42923: LD_ADDR_VAR 0 3
42927: PUSH
42928: LD_VAR 0 1
42932: PPUSH
42933: CALL_OW 255
42937: PPUSH
42938: LD_VAR 0 1
42942: PPUSH
42943: CALL_OW 250
42947: PPUSH
42948: LD_VAR 0 1
42952: PPUSH
42953: CALL_OW 251
42957: PPUSH
42958: LD_VAR 0 2
42962: PPUSH
42963: CALL 17024 0 4
42967: PUSH
42968: LD_INT 4
42970: ARRAY
42971: ST_TO_ADDR
// end ;
42972: LD_VAR 0 3
42976: RET
// export function PlayerSeeMe ( unit ) ; begin
42977: LD_INT 0
42979: PPUSH
// result := See ( your_side , unit ) ;
42980: LD_ADDR_VAR 0 2
42984: PUSH
42985: LD_OWVAR 2
42989: PPUSH
42990: LD_VAR 0 1
42994: PPUSH
42995: CALL_OW 292
42999: ST_TO_ADDR
// end ;
43000: LD_VAR 0 2
43004: RET
// export function ReverseDir ( unit ) ; begin
43005: LD_INT 0
43007: PPUSH
// if not unit then
43008: LD_VAR 0 1
43012: NOT
43013: IFFALSE 43017
// exit ;
43015: GO 43040
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
43017: LD_ADDR_VAR 0 2
43021: PUSH
43022: LD_VAR 0 1
43026: PPUSH
43027: CALL_OW 254
43031: PUSH
43032: LD_INT 3
43034: PLUS
43035: PUSH
43036: LD_INT 6
43038: MOD
43039: ST_TO_ADDR
// end ;
43040: LD_VAR 0 2
43044: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
43045: LD_INT 0
43047: PPUSH
43048: PPUSH
43049: PPUSH
43050: PPUSH
43051: PPUSH
// if not hexes then
43052: LD_VAR 0 2
43056: NOT
43057: IFFALSE 43061
// exit ;
43059: GO 43209
// dist := 9999 ;
43061: LD_ADDR_VAR 0 5
43065: PUSH
43066: LD_INT 9999
43068: ST_TO_ADDR
// for i = 1 to hexes do
43069: LD_ADDR_VAR 0 4
43073: PUSH
43074: DOUBLE
43075: LD_INT 1
43077: DEC
43078: ST_TO_ADDR
43079: LD_VAR 0 2
43083: PUSH
43084: FOR_TO
43085: IFFALSE 43197
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
43087: LD_VAR 0 1
43091: PPUSH
43092: LD_VAR 0 2
43096: PUSH
43097: LD_VAR 0 4
43101: ARRAY
43102: PUSH
43103: LD_INT 1
43105: ARRAY
43106: PPUSH
43107: LD_VAR 0 2
43111: PUSH
43112: LD_VAR 0 4
43116: ARRAY
43117: PUSH
43118: LD_INT 2
43120: ARRAY
43121: PPUSH
43122: CALL_OW 297
43126: PUSH
43127: LD_VAR 0 5
43131: LESS
43132: IFFALSE 43195
// begin hex := hexes [ i ] ;
43134: LD_ADDR_VAR 0 7
43138: PUSH
43139: LD_VAR 0 2
43143: PUSH
43144: LD_VAR 0 4
43148: ARRAY
43149: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43150: LD_ADDR_VAR 0 5
43154: PUSH
43155: LD_VAR 0 1
43159: PPUSH
43160: LD_VAR 0 2
43164: PUSH
43165: LD_VAR 0 4
43169: ARRAY
43170: PUSH
43171: LD_INT 1
43173: ARRAY
43174: PPUSH
43175: LD_VAR 0 2
43179: PUSH
43180: LD_VAR 0 4
43184: ARRAY
43185: PUSH
43186: LD_INT 2
43188: ARRAY
43189: PPUSH
43190: CALL_OW 297
43194: ST_TO_ADDR
// end ; end ;
43195: GO 43084
43197: POP
43198: POP
// result := hex ;
43199: LD_ADDR_VAR 0 3
43203: PUSH
43204: LD_VAR 0 7
43208: ST_TO_ADDR
// end ;
43209: LD_VAR 0 3
43213: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
43214: LD_INT 0
43216: PPUSH
43217: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
43218: LD_VAR 0 1
43222: NOT
43223: PUSH
43224: LD_VAR 0 1
43228: PUSH
43229: LD_INT 21
43231: PUSH
43232: LD_INT 2
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 23
43241: PUSH
43242: LD_INT 2
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PPUSH
43253: CALL_OW 69
43257: IN
43258: NOT
43259: OR
43260: IFFALSE 43264
// exit ;
43262: GO 43311
// for i = 1 to 3 do
43264: LD_ADDR_VAR 0 3
43268: PUSH
43269: DOUBLE
43270: LD_INT 1
43272: DEC
43273: ST_TO_ADDR
43274: LD_INT 3
43276: PUSH
43277: FOR_TO
43278: IFFALSE 43309
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
43280: LD_VAR 0 1
43284: PPUSH
43285: CALL_OW 250
43289: PPUSH
43290: LD_VAR 0 1
43294: PPUSH
43295: CALL_OW 251
43299: PPUSH
43300: LD_INT 1
43302: PPUSH
43303: CALL_OW 453
43307: GO 43277
43309: POP
43310: POP
// end ;
43311: LD_VAR 0 2
43315: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
43316: LD_INT 0
43318: PPUSH
43319: PPUSH
43320: PPUSH
43321: PPUSH
43322: PPUSH
43323: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
43324: LD_VAR 0 1
43328: NOT
43329: PUSH
43330: LD_VAR 0 2
43334: NOT
43335: OR
43336: PUSH
43337: LD_VAR 0 1
43341: PPUSH
43342: CALL_OW 314
43346: OR
43347: IFFALSE 43351
// exit ;
43349: GO 43792
// x := GetX ( enemy_unit ) ;
43351: LD_ADDR_VAR 0 7
43355: PUSH
43356: LD_VAR 0 2
43360: PPUSH
43361: CALL_OW 250
43365: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
43366: LD_ADDR_VAR 0 8
43370: PUSH
43371: LD_VAR 0 2
43375: PPUSH
43376: CALL_OW 251
43380: ST_TO_ADDR
// if not x or not y then
43381: LD_VAR 0 7
43385: NOT
43386: PUSH
43387: LD_VAR 0 8
43391: NOT
43392: OR
43393: IFFALSE 43397
// exit ;
43395: GO 43792
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
43397: LD_ADDR_VAR 0 6
43401: PUSH
43402: LD_VAR 0 7
43406: PPUSH
43407: LD_INT 0
43409: PPUSH
43410: LD_INT 4
43412: PPUSH
43413: CALL_OW 272
43417: PUSH
43418: LD_VAR 0 8
43422: PPUSH
43423: LD_INT 0
43425: PPUSH
43426: LD_INT 4
43428: PPUSH
43429: CALL_OW 273
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_VAR 0 7
43442: PPUSH
43443: LD_INT 1
43445: PPUSH
43446: LD_INT 4
43448: PPUSH
43449: CALL_OW 272
43453: PUSH
43454: LD_VAR 0 8
43458: PPUSH
43459: LD_INT 1
43461: PPUSH
43462: LD_INT 4
43464: PPUSH
43465: CALL_OW 273
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_VAR 0 7
43478: PPUSH
43479: LD_INT 2
43481: PPUSH
43482: LD_INT 4
43484: PPUSH
43485: CALL_OW 272
43489: PUSH
43490: LD_VAR 0 8
43494: PPUSH
43495: LD_INT 2
43497: PPUSH
43498: LD_INT 4
43500: PPUSH
43501: CALL_OW 273
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_VAR 0 7
43514: PPUSH
43515: LD_INT 3
43517: PPUSH
43518: LD_INT 4
43520: PPUSH
43521: CALL_OW 272
43525: PUSH
43526: LD_VAR 0 8
43530: PPUSH
43531: LD_INT 3
43533: PPUSH
43534: LD_INT 4
43536: PPUSH
43537: CALL_OW 273
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_VAR 0 7
43550: PPUSH
43551: LD_INT 4
43553: PPUSH
43554: LD_INT 4
43556: PPUSH
43557: CALL_OW 272
43561: PUSH
43562: LD_VAR 0 8
43566: PPUSH
43567: LD_INT 4
43569: PPUSH
43570: LD_INT 4
43572: PPUSH
43573: CALL_OW 273
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_VAR 0 7
43586: PPUSH
43587: LD_INT 5
43589: PPUSH
43590: LD_INT 4
43592: PPUSH
43593: CALL_OW 272
43597: PUSH
43598: LD_VAR 0 8
43602: PPUSH
43603: LD_INT 5
43605: PPUSH
43606: LD_INT 4
43608: PPUSH
43609: CALL_OW 273
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: ST_TO_ADDR
// for i = tmp downto 1 do
43626: LD_ADDR_VAR 0 4
43630: PUSH
43631: DOUBLE
43632: LD_VAR 0 6
43636: INC
43637: ST_TO_ADDR
43638: LD_INT 1
43640: PUSH
43641: FOR_DOWNTO
43642: IFFALSE 43743
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
43644: LD_VAR 0 6
43648: PUSH
43649: LD_VAR 0 4
43653: ARRAY
43654: PUSH
43655: LD_INT 1
43657: ARRAY
43658: PPUSH
43659: LD_VAR 0 6
43663: PUSH
43664: LD_VAR 0 4
43668: ARRAY
43669: PUSH
43670: LD_INT 2
43672: ARRAY
43673: PPUSH
43674: CALL_OW 488
43678: NOT
43679: PUSH
43680: LD_VAR 0 6
43684: PUSH
43685: LD_VAR 0 4
43689: ARRAY
43690: PUSH
43691: LD_INT 1
43693: ARRAY
43694: PPUSH
43695: LD_VAR 0 6
43699: PUSH
43700: LD_VAR 0 4
43704: ARRAY
43705: PUSH
43706: LD_INT 2
43708: ARRAY
43709: PPUSH
43710: CALL_OW 428
43714: PUSH
43715: LD_INT 0
43717: NONEQUAL
43718: OR
43719: IFFALSE 43741
// tmp := Delete ( tmp , i ) ;
43721: LD_ADDR_VAR 0 6
43725: PUSH
43726: LD_VAR 0 6
43730: PPUSH
43731: LD_VAR 0 4
43735: PPUSH
43736: CALL_OW 3
43740: ST_TO_ADDR
43741: GO 43641
43743: POP
43744: POP
// j := GetClosestHex ( unit , tmp ) ;
43745: LD_ADDR_VAR 0 5
43749: PUSH
43750: LD_VAR 0 1
43754: PPUSH
43755: LD_VAR 0 6
43759: PPUSH
43760: CALL 43045 0 2
43764: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
43765: LD_VAR 0 1
43769: PPUSH
43770: LD_VAR 0 5
43774: PUSH
43775: LD_INT 1
43777: ARRAY
43778: PPUSH
43779: LD_VAR 0 5
43783: PUSH
43784: LD_INT 2
43786: ARRAY
43787: PPUSH
43788: CALL_OW 111
// end ;
43792: LD_VAR 0 3
43796: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
43797: LD_INT 0
43799: PPUSH
43800: PPUSH
43801: PPUSH
// uc_side = 0 ;
43802: LD_ADDR_OWVAR 20
43806: PUSH
43807: LD_INT 0
43809: ST_TO_ADDR
// uc_nation = 0 ;
43810: LD_ADDR_OWVAR 21
43814: PUSH
43815: LD_INT 0
43817: ST_TO_ADDR
// InitHc ;
43818: CALL_OW 19
// InitVc ;
43822: CALL_OW 20
// if mastodonts then
43826: LD_VAR 0 6
43830: IFFALSE 43897
// for i = 1 to mastodonts do
43832: LD_ADDR_VAR 0 11
43836: PUSH
43837: DOUBLE
43838: LD_INT 1
43840: DEC
43841: ST_TO_ADDR
43842: LD_VAR 0 6
43846: PUSH
43847: FOR_TO
43848: IFFALSE 43895
// begin vc_chassis := 31 ;
43850: LD_ADDR_OWVAR 37
43854: PUSH
43855: LD_INT 31
43857: ST_TO_ADDR
// vc_control := control_rider ;
43858: LD_ADDR_OWVAR 38
43862: PUSH
43863: LD_INT 4
43865: ST_TO_ADDR
// animal := CreateVehicle ;
43866: LD_ADDR_VAR 0 12
43870: PUSH
43871: CALL_OW 45
43875: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43876: LD_VAR 0 12
43880: PPUSH
43881: LD_VAR 0 8
43885: PPUSH
43886: LD_INT 0
43888: PPUSH
43889: CALL 45966 0 3
// end ;
43893: GO 43847
43895: POP
43896: POP
// if horses then
43897: LD_VAR 0 5
43901: IFFALSE 43968
// for i = 1 to horses do
43903: LD_ADDR_VAR 0 11
43907: PUSH
43908: DOUBLE
43909: LD_INT 1
43911: DEC
43912: ST_TO_ADDR
43913: LD_VAR 0 5
43917: PUSH
43918: FOR_TO
43919: IFFALSE 43966
// begin hc_class := 21 ;
43921: LD_ADDR_OWVAR 28
43925: PUSH
43926: LD_INT 21
43928: ST_TO_ADDR
// hc_gallery :=  ;
43929: LD_ADDR_OWVAR 33
43933: PUSH
43934: LD_STRING 
43936: ST_TO_ADDR
// animal := CreateHuman ;
43937: LD_ADDR_VAR 0 12
43941: PUSH
43942: CALL_OW 44
43946: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43947: LD_VAR 0 12
43951: PPUSH
43952: LD_VAR 0 8
43956: PPUSH
43957: LD_INT 0
43959: PPUSH
43960: CALL 45966 0 3
// end ;
43964: GO 43918
43966: POP
43967: POP
// if birds then
43968: LD_VAR 0 1
43972: IFFALSE 44039
// for i = 1 to birds do
43974: LD_ADDR_VAR 0 11
43978: PUSH
43979: DOUBLE
43980: LD_INT 1
43982: DEC
43983: ST_TO_ADDR
43984: LD_VAR 0 1
43988: PUSH
43989: FOR_TO
43990: IFFALSE 44037
// begin hc_class = 18 ;
43992: LD_ADDR_OWVAR 28
43996: PUSH
43997: LD_INT 18
43999: ST_TO_ADDR
// hc_gallery =  ;
44000: LD_ADDR_OWVAR 33
44004: PUSH
44005: LD_STRING 
44007: ST_TO_ADDR
// animal := CreateHuman ;
44008: LD_ADDR_VAR 0 12
44012: PUSH
44013: CALL_OW 44
44017: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44018: LD_VAR 0 12
44022: PPUSH
44023: LD_VAR 0 8
44027: PPUSH
44028: LD_INT 0
44030: PPUSH
44031: CALL 45966 0 3
// end ;
44035: GO 43989
44037: POP
44038: POP
// if tigers then
44039: LD_VAR 0 2
44043: IFFALSE 44127
// for i = 1 to tigers do
44045: LD_ADDR_VAR 0 11
44049: PUSH
44050: DOUBLE
44051: LD_INT 1
44053: DEC
44054: ST_TO_ADDR
44055: LD_VAR 0 2
44059: PUSH
44060: FOR_TO
44061: IFFALSE 44125
// begin hc_class = class_tiger ;
44063: LD_ADDR_OWVAR 28
44067: PUSH
44068: LD_INT 14
44070: ST_TO_ADDR
// hc_gallery =  ;
44071: LD_ADDR_OWVAR 33
44075: PUSH
44076: LD_STRING 
44078: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
44079: LD_ADDR_OWVAR 35
44083: PUSH
44084: LD_INT 7
44086: NEG
44087: PPUSH
44088: LD_INT 7
44090: PPUSH
44091: CALL_OW 12
44095: ST_TO_ADDR
// animal := CreateHuman ;
44096: LD_ADDR_VAR 0 12
44100: PUSH
44101: CALL_OW 44
44105: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44106: LD_VAR 0 12
44110: PPUSH
44111: LD_VAR 0 8
44115: PPUSH
44116: LD_INT 0
44118: PPUSH
44119: CALL 45966 0 3
// end ;
44123: GO 44060
44125: POP
44126: POP
// if apemans then
44127: LD_VAR 0 3
44131: IFFALSE 44254
// for i = 1 to apemans do
44133: LD_ADDR_VAR 0 11
44137: PUSH
44138: DOUBLE
44139: LD_INT 1
44141: DEC
44142: ST_TO_ADDR
44143: LD_VAR 0 3
44147: PUSH
44148: FOR_TO
44149: IFFALSE 44252
// begin hc_class = class_apeman ;
44151: LD_ADDR_OWVAR 28
44155: PUSH
44156: LD_INT 12
44158: ST_TO_ADDR
// hc_gallery =  ;
44159: LD_ADDR_OWVAR 33
44163: PUSH
44164: LD_STRING 
44166: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
44167: LD_ADDR_OWVAR 35
44171: PUSH
44172: LD_INT 5
44174: NEG
44175: PPUSH
44176: LD_INT 5
44178: PPUSH
44179: CALL_OW 12
44183: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
44184: LD_ADDR_OWVAR 31
44188: PUSH
44189: LD_INT 1
44191: PPUSH
44192: LD_INT 3
44194: PPUSH
44195: CALL_OW 12
44199: PUSH
44200: LD_INT 1
44202: PPUSH
44203: LD_INT 3
44205: PPUSH
44206: CALL_OW 12
44210: PUSH
44211: LD_INT 0
44213: PUSH
44214: LD_INT 0
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: ST_TO_ADDR
// animal := CreateHuman ;
44223: LD_ADDR_VAR 0 12
44227: PUSH
44228: CALL_OW 44
44232: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44233: LD_VAR 0 12
44237: PPUSH
44238: LD_VAR 0 8
44242: PPUSH
44243: LD_INT 0
44245: PPUSH
44246: CALL 45966 0 3
// end ;
44250: GO 44148
44252: POP
44253: POP
// if enchidnas then
44254: LD_VAR 0 4
44258: IFFALSE 44325
// for i = 1 to enchidnas do
44260: LD_ADDR_VAR 0 11
44264: PUSH
44265: DOUBLE
44266: LD_INT 1
44268: DEC
44269: ST_TO_ADDR
44270: LD_VAR 0 4
44274: PUSH
44275: FOR_TO
44276: IFFALSE 44323
// begin hc_class = 13 ;
44278: LD_ADDR_OWVAR 28
44282: PUSH
44283: LD_INT 13
44285: ST_TO_ADDR
// hc_gallery =  ;
44286: LD_ADDR_OWVAR 33
44290: PUSH
44291: LD_STRING 
44293: ST_TO_ADDR
// animal := CreateHuman ;
44294: LD_ADDR_VAR 0 12
44298: PUSH
44299: CALL_OW 44
44303: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44304: LD_VAR 0 12
44308: PPUSH
44309: LD_VAR 0 8
44313: PPUSH
44314: LD_INT 0
44316: PPUSH
44317: CALL 45966 0 3
// end ;
44321: GO 44275
44323: POP
44324: POP
// if fishes then
44325: LD_VAR 0 7
44329: IFFALSE 44396
// for i = 1 to fishes do
44331: LD_ADDR_VAR 0 11
44335: PUSH
44336: DOUBLE
44337: LD_INT 1
44339: DEC
44340: ST_TO_ADDR
44341: LD_VAR 0 7
44345: PUSH
44346: FOR_TO
44347: IFFALSE 44394
// begin hc_class = 20 ;
44349: LD_ADDR_OWVAR 28
44353: PUSH
44354: LD_INT 20
44356: ST_TO_ADDR
// hc_gallery =  ;
44357: LD_ADDR_OWVAR 33
44361: PUSH
44362: LD_STRING 
44364: ST_TO_ADDR
// animal := CreateHuman ;
44365: LD_ADDR_VAR 0 12
44369: PUSH
44370: CALL_OW 44
44374: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
44375: LD_VAR 0 12
44379: PPUSH
44380: LD_VAR 0 9
44384: PPUSH
44385: LD_INT 0
44387: PPUSH
44388: CALL 45966 0 3
// end ;
44392: GO 44346
44394: POP
44395: POP
// end ;
44396: LD_VAR 0 10
44400: RET
// export function WantHeal ( sci , unit ) ; begin
44401: LD_INT 0
44403: PPUSH
// if GetTaskList ( sci ) > 0 then
44404: LD_VAR 0 1
44408: PPUSH
44409: CALL_OW 437
44413: PUSH
44414: LD_INT 0
44416: GREATER
44417: IFFALSE 44487
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
44419: LD_VAR 0 1
44423: PPUSH
44424: CALL_OW 437
44428: PUSH
44429: LD_INT 1
44431: ARRAY
44432: PUSH
44433: LD_INT 1
44435: ARRAY
44436: PUSH
44437: LD_STRING l
44439: EQUAL
44440: PUSH
44441: LD_VAR 0 1
44445: PPUSH
44446: CALL_OW 437
44450: PUSH
44451: LD_INT 1
44453: ARRAY
44454: PUSH
44455: LD_INT 4
44457: ARRAY
44458: PUSH
44459: LD_VAR 0 2
44463: EQUAL
44464: AND
44465: IFFALSE 44477
// result := true else
44467: LD_ADDR_VAR 0 3
44471: PUSH
44472: LD_INT 1
44474: ST_TO_ADDR
44475: GO 44485
// result := false ;
44477: LD_ADDR_VAR 0 3
44481: PUSH
44482: LD_INT 0
44484: ST_TO_ADDR
// end else
44485: GO 44495
// result := false ;
44487: LD_ADDR_VAR 0 3
44491: PUSH
44492: LD_INT 0
44494: ST_TO_ADDR
// end ;
44495: LD_VAR 0 3
44499: RET
// export function HealTarget ( sci ) ; begin
44500: LD_INT 0
44502: PPUSH
// if not sci then
44503: LD_VAR 0 1
44507: NOT
44508: IFFALSE 44512
// exit ;
44510: GO 44577
// result := 0 ;
44512: LD_ADDR_VAR 0 2
44516: PUSH
44517: LD_INT 0
44519: ST_TO_ADDR
// if GetTaskList ( sci ) then
44520: LD_VAR 0 1
44524: PPUSH
44525: CALL_OW 437
44529: IFFALSE 44577
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
44531: LD_VAR 0 1
44535: PPUSH
44536: CALL_OW 437
44540: PUSH
44541: LD_INT 1
44543: ARRAY
44544: PUSH
44545: LD_INT 1
44547: ARRAY
44548: PUSH
44549: LD_STRING l
44551: EQUAL
44552: IFFALSE 44577
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
44554: LD_ADDR_VAR 0 2
44558: PUSH
44559: LD_VAR 0 1
44563: PPUSH
44564: CALL_OW 437
44568: PUSH
44569: LD_INT 1
44571: ARRAY
44572: PUSH
44573: LD_INT 4
44575: ARRAY
44576: ST_TO_ADDR
// end ;
44577: LD_VAR 0 2
44581: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
44582: LD_INT 0
44584: PPUSH
44585: PPUSH
44586: PPUSH
44587: PPUSH
// if not base_units then
44588: LD_VAR 0 1
44592: NOT
44593: IFFALSE 44597
// exit ;
44595: GO 44684
// result := false ;
44597: LD_ADDR_VAR 0 2
44601: PUSH
44602: LD_INT 0
44604: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
44605: LD_ADDR_VAR 0 5
44609: PUSH
44610: LD_VAR 0 1
44614: PPUSH
44615: LD_INT 21
44617: PUSH
44618: LD_INT 3
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PPUSH
44625: CALL_OW 72
44629: ST_TO_ADDR
// if not tmp then
44630: LD_VAR 0 5
44634: NOT
44635: IFFALSE 44639
// exit ;
44637: GO 44684
// for i in tmp do
44639: LD_ADDR_VAR 0 3
44643: PUSH
44644: LD_VAR 0 5
44648: PUSH
44649: FOR_IN
44650: IFFALSE 44682
// begin result := EnemyInRange ( i , 22 ) ;
44652: LD_ADDR_VAR 0 2
44656: PUSH
44657: LD_VAR 0 3
44661: PPUSH
44662: LD_INT 22
44664: PPUSH
44665: CALL 42920 0 2
44669: ST_TO_ADDR
// if result then
44670: LD_VAR 0 2
44674: IFFALSE 44680
// exit ;
44676: POP
44677: POP
44678: GO 44684
// end ;
44680: GO 44649
44682: POP
44683: POP
// end ;
44684: LD_VAR 0 2
44688: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
44689: LD_INT 0
44691: PPUSH
44692: PPUSH
// if not units then
44693: LD_VAR 0 1
44697: NOT
44698: IFFALSE 44702
// exit ;
44700: GO 44772
// result := [ ] ;
44702: LD_ADDR_VAR 0 3
44706: PUSH
44707: EMPTY
44708: ST_TO_ADDR
// for i in units do
44709: LD_ADDR_VAR 0 4
44713: PUSH
44714: LD_VAR 0 1
44718: PUSH
44719: FOR_IN
44720: IFFALSE 44770
// if GetTag ( i ) = tag then
44722: LD_VAR 0 4
44726: PPUSH
44727: CALL_OW 110
44731: PUSH
44732: LD_VAR 0 2
44736: EQUAL
44737: IFFALSE 44768
// result := Insert ( result , result + 1 , i ) ;
44739: LD_ADDR_VAR 0 3
44743: PUSH
44744: LD_VAR 0 3
44748: PPUSH
44749: LD_VAR 0 3
44753: PUSH
44754: LD_INT 1
44756: PLUS
44757: PPUSH
44758: LD_VAR 0 4
44762: PPUSH
44763: CALL_OW 2
44767: ST_TO_ADDR
44768: GO 44719
44770: POP
44771: POP
// end ;
44772: LD_VAR 0 3
44776: RET
// export function IsDriver ( un ) ; begin
44777: LD_INT 0
44779: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
44780: LD_ADDR_VAR 0 2
44784: PUSH
44785: LD_VAR 0 1
44789: PUSH
44790: LD_INT 55
44792: PUSH
44793: EMPTY
44794: LIST
44795: PPUSH
44796: CALL_OW 69
44800: IN
44801: ST_TO_ADDR
// end ;
44802: LD_VAR 0 2
44806: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
44807: LD_INT 0
44809: PPUSH
44810: PPUSH
// list := [ ] ;
44811: LD_ADDR_VAR 0 5
44815: PUSH
44816: EMPTY
44817: ST_TO_ADDR
// case d of 0 :
44818: LD_VAR 0 3
44822: PUSH
44823: LD_INT 0
44825: DOUBLE
44826: EQUAL
44827: IFTRUE 44831
44829: GO 44964
44831: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
44832: LD_ADDR_VAR 0 5
44836: PUSH
44837: LD_VAR 0 1
44841: PUSH
44842: LD_INT 4
44844: MINUS
44845: PUSH
44846: LD_VAR 0 2
44850: PUSH
44851: LD_INT 4
44853: MINUS
44854: PUSH
44855: LD_INT 2
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: LIST
44862: PUSH
44863: LD_VAR 0 1
44867: PUSH
44868: LD_INT 3
44870: MINUS
44871: PUSH
44872: LD_VAR 0 2
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: LIST
44884: PUSH
44885: LD_VAR 0 1
44889: PUSH
44890: LD_INT 4
44892: PLUS
44893: PUSH
44894: LD_VAR 0 2
44898: PUSH
44899: LD_INT 4
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: LIST
44906: PUSH
44907: LD_VAR 0 1
44911: PUSH
44912: LD_INT 3
44914: PLUS
44915: PUSH
44916: LD_VAR 0 2
44920: PUSH
44921: LD_INT 3
44923: PLUS
44924: PUSH
44925: LD_INT 5
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: LIST
44932: PUSH
44933: LD_VAR 0 1
44937: PUSH
44938: LD_VAR 0 2
44942: PUSH
44943: LD_INT 4
44945: PLUS
44946: PUSH
44947: LD_INT 0
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: LIST
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: ST_TO_ADDR
// end ; 1 :
44962: GO 45662
44964: LD_INT 1
44966: DOUBLE
44967: EQUAL
44968: IFTRUE 44972
44970: GO 45105
44972: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
44973: LD_ADDR_VAR 0 5
44977: PUSH
44978: LD_VAR 0 1
44982: PUSH
44983: LD_VAR 0 2
44987: PUSH
44988: LD_INT 4
44990: MINUS
44991: PUSH
44992: LD_INT 3
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: LIST
44999: PUSH
45000: LD_VAR 0 1
45004: PUSH
45005: LD_INT 3
45007: MINUS
45008: PUSH
45009: LD_VAR 0 2
45013: PUSH
45014: LD_INT 3
45016: MINUS
45017: PUSH
45018: LD_INT 2
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: LIST
45025: PUSH
45026: LD_VAR 0 1
45030: PUSH
45031: LD_INT 4
45033: MINUS
45034: PUSH
45035: LD_VAR 0 2
45039: PUSH
45040: LD_INT 1
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: LIST
45047: PUSH
45048: LD_VAR 0 1
45052: PUSH
45053: LD_VAR 0 2
45057: PUSH
45058: LD_INT 3
45060: PLUS
45061: PUSH
45062: LD_INT 0
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: LIST
45069: PUSH
45070: LD_VAR 0 1
45074: PUSH
45075: LD_INT 4
45077: PLUS
45078: PUSH
45079: LD_VAR 0 2
45083: PUSH
45084: LD_INT 4
45086: PLUS
45087: PUSH
45088: LD_INT 5
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: LIST
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: ST_TO_ADDR
// end ; 2 :
45103: GO 45662
45105: LD_INT 2
45107: DOUBLE
45108: EQUAL
45109: IFTRUE 45113
45111: GO 45242
45113: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
45114: LD_ADDR_VAR 0 5
45118: PUSH
45119: LD_VAR 0 1
45123: PUSH
45124: LD_VAR 0 2
45128: PUSH
45129: LD_INT 3
45131: MINUS
45132: PUSH
45133: LD_INT 3
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: LIST
45140: PUSH
45141: LD_VAR 0 1
45145: PUSH
45146: LD_INT 4
45148: PLUS
45149: PUSH
45150: LD_VAR 0 2
45154: PUSH
45155: LD_INT 4
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: LIST
45162: PUSH
45163: LD_VAR 0 1
45167: PUSH
45168: LD_VAR 0 2
45172: PUSH
45173: LD_INT 4
45175: PLUS
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: LIST
45184: PUSH
45185: LD_VAR 0 1
45189: PUSH
45190: LD_INT 3
45192: MINUS
45193: PUSH
45194: LD_VAR 0 2
45198: PUSH
45199: LD_INT 1
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: LIST
45206: PUSH
45207: LD_VAR 0 1
45211: PUSH
45212: LD_INT 4
45214: MINUS
45215: PUSH
45216: LD_VAR 0 2
45220: PUSH
45221: LD_INT 4
45223: MINUS
45224: PUSH
45225: LD_INT 2
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: LIST
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: ST_TO_ADDR
// end ; 3 :
45240: GO 45662
45242: LD_INT 3
45244: DOUBLE
45245: EQUAL
45246: IFTRUE 45250
45248: GO 45383
45250: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
45251: LD_ADDR_VAR 0 5
45255: PUSH
45256: LD_VAR 0 1
45260: PUSH
45261: LD_INT 3
45263: PLUS
45264: PUSH
45265: LD_VAR 0 2
45269: PUSH
45270: LD_INT 4
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: LIST
45277: PUSH
45278: LD_VAR 0 1
45282: PUSH
45283: LD_INT 4
45285: PLUS
45286: PUSH
45287: LD_VAR 0 2
45291: PUSH
45292: LD_INT 4
45294: PLUS
45295: PUSH
45296: LD_INT 5
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: LIST
45303: PUSH
45304: LD_VAR 0 1
45308: PUSH
45309: LD_INT 4
45311: MINUS
45312: PUSH
45313: LD_VAR 0 2
45317: PUSH
45318: LD_INT 1
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: LIST
45325: PUSH
45326: LD_VAR 0 1
45330: PUSH
45331: LD_VAR 0 2
45335: PUSH
45336: LD_INT 4
45338: MINUS
45339: PUSH
45340: LD_INT 3
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: LIST
45347: PUSH
45348: LD_VAR 0 1
45352: PUSH
45353: LD_INT 3
45355: MINUS
45356: PUSH
45357: LD_VAR 0 2
45361: PUSH
45362: LD_INT 3
45364: MINUS
45365: PUSH
45366: LD_INT 2
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: LIST
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: ST_TO_ADDR
// end ; 4 :
45381: GO 45662
45383: LD_INT 4
45385: DOUBLE
45386: EQUAL
45387: IFTRUE 45391
45389: GO 45524
45391: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
45392: LD_ADDR_VAR 0 5
45396: PUSH
45397: LD_VAR 0 1
45401: PUSH
45402: LD_VAR 0 2
45406: PUSH
45407: LD_INT 4
45409: PLUS
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: LIST
45418: PUSH
45419: LD_VAR 0 1
45423: PUSH
45424: LD_INT 3
45426: PLUS
45427: PUSH
45428: LD_VAR 0 2
45432: PUSH
45433: LD_INT 3
45435: PLUS
45436: PUSH
45437: LD_INT 5
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: LIST
45444: PUSH
45445: LD_VAR 0 1
45449: PUSH
45450: LD_INT 4
45452: PLUS
45453: PUSH
45454: LD_VAR 0 2
45458: PUSH
45459: LD_INT 4
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: LIST
45466: PUSH
45467: LD_VAR 0 1
45471: PUSH
45472: LD_VAR 0 2
45476: PUSH
45477: LD_INT 3
45479: MINUS
45480: PUSH
45481: LD_INT 3
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: LIST
45488: PUSH
45489: LD_VAR 0 1
45493: PUSH
45494: LD_INT 4
45496: MINUS
45497: PUSH
45498: LD_VAR 0 2
45502: PUSH
45503: LD_INT 4
45505: MINUS
45506: PUSH
45507: LD_INT 2
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: LIST
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: ST_TO_ADDR
// end ; 5 :
45522: GO 45662
45524: LD_INT 5
45526: DOUBLE
45527: EQUAL
45528: IFTRUE 45532
45530: GO 45661
45532: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
45533: LD_ADDR_VAR 0 5
45537: PUSH
45538: LD_VAR 0 1
45542: PUSH
45543: LD_INT 4
45545: MINUS
45546: PUSH
45547: LD_VAR 0 2
45551: PUSH
45552: LD_INT 1
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: LIST
45559: PUSH
45560: LD_VAR 0 1
45564: PUSH
45565: LD_VAR 0 2
45569: PUSH
45570: LD_INT 4
45572: MINUS
45573: PUSH
45574: LD_INT 3
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: LIST
45581: PUSH
45582: LD_VAR 0 1
45586: PUSH
45587: LD_INT 4
45589: PLUS
45590: PUSH
45591: LD_VAR 0 2
45595: PUSH
45596: LD_INT 4
45598: PLUS
45599: PUSH
45600: LD_INT 5
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: LIST
45607: PUSH
45608: LD_VAR 0 1
45612: PUSH
45613: LD_INT 3
45615: PLUS
45616: PUSH
45617: LD_VAR 0 2
45621: PUSH
45622: LD_INT 4
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: LIST
45629: PUSH
45630: LD_VAR 0 1
45634: PUSH
45635: LD_VAR 0 2
45639: PUSH
45640: LD_INT 3
45642: PLUS
45643: PUSH
45644: LD_INT 0
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: LIST
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: ST_TO_ADDR
// end ; end ;
45659: GO 45662
45661: POP
// result := list ;
45662: LD_ADDR_VAR 0 4
45666: PUSH
45667: LD_VAR 0 5
45671: ST_TO_ADDR
// end ;
45672: LD_VAR 0 4
45676: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
45677: LD_INT 0
45679: PPUSH
45680: PPUSH
45681: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
45682: LD_VAR 0 1
45686: NOT
45687: PUSH
45688: LD_VAR 0 2
45692: PUSH
45693: LD_INT 1
45695: PUSH
45696: LD_INT 2
45698: PUSH
45699: LD_INT 3
45701: PUSH
45702: LD_INT 4
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: IN
45711: NOT
45712: OR
45713: IFFALSE 45717
// exit ;
45715: GO 45809
// tmp := [ ] ;
45717: LD_ADDR_VAR 0 5
45721: PUSH
45722: EMPTY
45723: ST_TO_ADDR
// for i in units do
45724: LD_ADDR_VAR 0 4
45728: PUSH
45729: LD_VAR 0 1
45733: PUSH
45734: FOR_IN
45735: IFFALSE 45778
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
45737: LD_ADDR_VAR 0 5
45741: PUSH
45742: LD_VAR 0 5
45746: PPUSH
45747: LD_VAR 0 5
45751: PUSH
45752: LD_INT 1
45754: PLUS
45755: PPUSH
45756: LD_VAR 0 4
45760: PPUSH
45761: LD_VAR 0 2
45765: PPUSH
45766: CALL_OW 259
45770: PPUSH
45771: CALL_OW 2
45775: ST_TO_ADDR
45776: GO 45734
45778: POP
45779: POP
// if not tmp then
45780: LD_VAR 0 5
45784: NOT
45785: IFFALSE 45789
// exit ;
45787: GO 45809
// result := SortListByListDesc ( units , tmp ) ;
45789: LD_ADDR_VAR 0 3
45793: PUSH
45794: LD_VAR 0 1
45798: PPUSH
45799: LD_VAR 0 5
45803: PPUSH
45804: CALL_OW 77
45808: ST_TO_ADDR
// end ;
45809: LD_VAR 0 3
45813: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
45814: LD_INT 0
45816: PPUSH
45817: PPUSH
45818: PPUSH
// x := GetX ( building ) ;
45819: LD_ADDR_VAR 0 4
45823: PUSH
45824: LD_VAR 0 2
45828: PPUSH
45829: CALL_OW 250
45833: ST_TO_ADDR
// y := GetY ( building ) ;
45834: LD_ADDR_VAR 0 5
45838: PUSH
45839: LD_VAR 0 2
45843: PPUSH
45844: CALL_OW 251
45848: ST_TO_ADDR
// if GetTaskList ( unit ) then
45849: LD_VAR 0 1
45853: PPUSH
45854: CALL_OW 437
45858: IFFALSE 45953
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45860: LD_STRING e
45862: PUSH
45863: LD_VAR 0 1
45867: PPUSH
45868: CALL_OW 437
45872: PUSH
45873: LD_INT 1
45875: ARRAY
45876: PUSH
45877: LD_INT 1
45879: ARRAY
45880: EQUAL
45881: PUSH
45882: LD_VAR 0 4
45886: PUSH
45887: LD_VAR 0 1
45891: PPUSH
45892: CALL_OW 437
45896: PUSH
45897: LD_INT 1
45899: ARRAY
45900: PUSH
45901: LD_INT 2
45903: ARRAY
45904: EQUAL
45905: AND
45906: PUSH
45907: LD_VAR 0 5
45911: PUSH
45912: LD_VAR 0 1
45916: PPUSH
45917: CALL_OW 437
45921: PUSH
45922: LD_INT 1
45924: ARRAY
45925: PUSH
45926: LD_INT 3
45928: ARRAY
45929: EQUAL
45930: AND
45931: IFFALSE 45943
// result := true else
45933: LD_ADDR_VAR 0 3
45937: PUSH
45938: LD_INT 1
45940: ST_TO_ADDR
45941: GO 45951
// result := false ;
45943: LD_ADDR_VAR 0 3
45947: PUSH
45948: LD_INT 0
45950: ST_TO_ADDR
// end else
45951: GO 45961
// result := false ;
45953: LD_ADDR_VAR 0 3
45957: PUSH
45958: LD_INT 0
45960: ST_TO_ADDR
// end ;
45961: LD_VAR 0 3
45965: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
45966: LD_INT 0
45968: PPUSH
45969: PPUSH
45970: PPUSH
45971: PPUSH
// if not unit or not area then
45972: LD_VAR 0 1
45976: NOT
45977: PUSH
45978: LD_VAR 0 2
45982: NOT
45983: OR
45984: IFFALSE 45988
// exit ;
45986: GO 46152
// tmp := AreaToList ( area , i ) ;
45988: LD_ADDR_VAR 0 6
45992: PUSH
45993: LD_VAR 0 2
45997: PPUSH
45998: LD_VAR 0 5
46002: PPUSH
46003: CALL_OW 517
46007: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
46008: LD_ADDR_VAR 0 5
46012: PUSH
46013: DOUBLE
46014: LD_INT 1
46016: DEC
46017: ST_TO_ADDR
46018: LD_VAR 0 6
46022: PUSH
46023: LD_INT 1
46025: ARRAY
46026: PUSH
46027: FOR_TO
46028: IFFALSE 46150
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
46030: LD_ADDR_VAR 0 7
46034: PUSH
46035: LD_VAR 0 6
46039: PUSH
46040: LD_INT 1
46042: ARRAY
46043: PUSH
46044: LD_VAR 0 5
46048: ARRAY
46049: PUSH
46050: LD_VAR 0 6
46054: PUSH
46055: LD_INT 2
46057: ARRAY
46058: PUSH
46059: LD_VAR 0 5
46063: ARRAY
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
46069: LD_VAR 0 7
46073: PUSH
46074: LD_INT 1
46076: ARRAY
46077: PPUSH
46078: LD_VAR 0 7
46082: PUSH
46083: LD_INT 2
46085: ARRAY
46086: PPUSH
46087: CALL_OW 428
46091: PUSH
46092: LD_INT 0
46094: EQUAL
46095: IFFALSE 46148
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
46097: LD_VAR 0 1
46101: PPUSH
46102: LD_VAR 0 7
46106: PUSH
46107: LD_INT 1
46109: ARRAY
46110: PPUSH
46111: LD_VAR 0 7
46115: PUSH
46116: LD_INT 2
46118: ARRAY
46119: PPUSH
46120: LD_VAR 0 3
46124: PPUSH
46125: CALL_OW 48
// result := IsPlaced ( unit ) ;
46129: LD_ADDR_VAR 0 4
46133: PUSH
46134: LD_VAR 0 1
46138: PPUSH
46139: CALL_OW 305
46143: ST_TO_ADDR
// exit ;
46144: POP
46145: POP
46146: GO 46152
// end ; end ;
46148: GO 46027
46150: POP
46151: POP
// end ;
46152: LD_VAR 0 4
46156: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
46157: LD_INT 0
46159: PPUSH
46160: PPUSH
46161: PPUSH
// if not side or side > 8 then
46162: LD_VAR 0 1
46166: NOT
46167: PUSH
46168: LD_VAR 0 1
46172: PUSH
46173: LD_INT 8
46175: GREATER
46176: OR
46177: IFFALSE 46181
// exit ;
46179: GO 46368
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
46181: LD_ADDR_VAR 0 4
46185: PUSH
46186: LD_INT 22
46188: PUSH
46189: LD_VAR 0 1
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 21
46200: PUSH
46201: LD_INT 3
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PPUSH
46212: CALL_OW 69
46216: ST_TO_ADDR
// if not tmp then
46217: LD_VAR 0 4
46221: NOT
46222: IFFALSE 46226
// exit ;
46224: GO 46368
// enable_addtolog := true ;
46226: LD_ADDR_OWVAR 81
46230: PUSH
46231: LD_INT 1
46233: ST_TO_ADDR
// AddToLog ( [ ) ;
46234: LD_STRING [
46236: PPUSH
46237: CALL_OW 561
// for i in tmp do
46241: LD_ADDR_VAR 0 3
46245: PUSH
46246: LD_VAR 0 4
46250: PUSH
46251: FOR_IN
46252: IFFALSE 46359
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
46254: LD_STRING [
46256: PUSH
46257: LD_VAR 0 3
46261: PPUSH
46262: CALL_OW 266
46266: STR
46267: PUSH
46268: LD_STRING , 
46270: STR
46271: PUSH
46272: LD_VAR 0 3
46276: PPUSH
46277: CALL_OW 250
46281: STR
46282: PUSH
46283: LD_STRING , 
46285: STR
46286: PUSH
46287: LD_VAR 0 3
46291: PPUSH
46292: CALL_OW 251
46296: STR
46297: PUSH
46298: LD_STRING , 
46300: STR
46301: PUSH
46302: LD_VAR 0 3
46306: PPUSH
46307: CALL_OW 254
46311: STR
46312: PUSH
46313: LD_STRING , 
46315: STR
46316: PUSH
46317: LD_VAR 0 3
46321: PPUSH
46322: LD_INT 1
46324: PPUSH
46325: CALL_OW 268
46329: STR
46330: PUSH
46331: LD_STRING , 
46333: STR
46334: PUSH
46335: LD_VAR 0 3
46339: PPUSH
46340: LD_INT 2
46342: PPUSH
46343: CALL_OW 268
46347: STR
46348: PUSH
46349: LD_STRING ],
46351: STR
46352: PPUSH
46353: CALL_OW 561
// end ;
46357: GO 46251
46359: POP
46360: POP
// AddToLog ( ]; ) ;
46361: LD_STRING ];
46363: PPUSH
46364: CALL_OW 561
// end ;
46368: LD_VAR 0 2
46372: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
46373: LD_INT 0
46375: PPUSH
46376: PPUSH
46377: PPUSH
46378: PPUSH
46379: PPUSH
// if not area or not rate or not max then
46380: LD_VAR 0 1
46384: NOT
46385: PUSH
46386: LD_VAR 0 2
46390: NOT
46391: OR
46392: PUSH
46393: LD_VAR 0 4
46397: NOT
46398: OR
46399: IFFALSE 46403
// exit ;
46401: GO 46595
// while 1 do
46403: LD_INT 1
46405: IFFALSE 46595
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
46407: LD_ADDR_VAR 0 9
46411: PUSH
46412: LD_VAR 0 1
46416: PPUSH
46417: LD_INT 1
46419: PPUSH
46420: CALL_OW 287
46424: PUSH
46425: LD_INT 10
46427: MUL
46428: ST_TO_ADDR
// r := rate / 10 ;
46429: LD_ADDR_VAR 0 7
46433: PUSH
46434: LD_VAR 0 2
46438: PUSH
46439: LD_INT 10
46441: DIVREAL
46442: ST_TO_ADDR
// time := 1 1$00 ;
46443: LD_ADDR_VAR 0 8
46447: PUSH
46448: LD_INT 2100
46450: ST_TO_ADDR
// if amount < min then
46451: LD_VAR 0 9
46455: PUSH
46456: LD_VAR 0 3
46460: LESS
46461: IFFALSE 46479
// r := r * 2 else
46463: LD_ADDR_VAR 0 7
46467: PUSH
46468: LD_VAR 0 7
46472: PUSH
46473: LD_INT 2
46475: MUL
46476: ST_TO_ADDR
46477: GO 46505
// if amount > max then
46479: LD_VAR 0 9
46483: PUSH
46484: LD_VAR 0 4
46488: GREATER
46489: IFFALSE 46505
// r := r / 2 ;
46491: LD_ADDR_VAR 0 7
46495: PUSH
46496: LD_VAR 0 7
46500: PUSH
46501: LD_INT 2
46503: DIVREAL
46504: ST_TO_ADDR
// time := time / r ;
46505: LD_ADDR_VAR 0 8
46509: PUSH
46510: LD_VAR 0 8
46514: PUSH
46515: LD_VAR 0 7
46519: DIVREAL
46520: ST_TO_ADDR
// if time < 0 then
46521: LD_VAR 0 8
46525: PUSH
46526: LD_INT 0
46528: LESS
46529: IFFALSE 46546
// time := time * - 1 ;
46531: LD_ADDR_VAR 0 8
46535: PUSH
46536: LD_VAR 0 8
46540: PUSH
46541: LD_INT 1
46543: NEG
46544: MUL
46545: ST_TO_ADDR
// wait ( time ) ;
46546: LD_VAR 0 8
46550: PPUSH
46551: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
46555: LD_INT 35
46557: PPUSH
46558: LD_INT 875
46560: PPUSH
46561: CALL_OW 12
46565: PPUSH
46566: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
46570: LD_INT 1
46572: PPUSH
46573: LD_INT 5
46575: PPUSH
46576: CALL_OW 12
46580: PPUSH
46581: LD_VAR 0 1
46585: PPUSH
46586: LD_INT 1
46588: PPUSH
46589: CALL_OW 55
// end ;
46593: GO 46403
// end ;
46595: LD_VAR 0 5
46599: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
46600: LD_INT 0
46602: PPUSH
46603: PPUSH
46604: PPUSH
46605: PPUSH
46606: PPUSH
46607: PPUSH
46608: PPUSH
46609: PPUSH
// if not turrets or not factories then
46610: LD_VAR 0 1
46614: NOT
46615: PUSH
46616: LD_VAR 0 2
46620: NOT
46621: OR
46622: IFFALSE 46626
// exit ;
46624: GO 46933
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
46626: LD_ADDR_VAR 0 10
46630: PUSH
46631: LD_INT 5
46633: PUSH
46634: LD_INT 6
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 2
46643: PUSH
46644: LD_INT 4
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 3
46653: PUSH
46654: LD_INT 5
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 24
46668: PUSH
46669: LD_INT 25
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 23
46678: PUSH
46679: LD_INT 27
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 42
46692: PUSH
46693: LD_INT 43
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 44
46702: PUSH
46703: LD_INT 46
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 45
46712: PUSH
46713: LD_INT 47
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: LIST
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: LIST
46729: ST_TO_ADDR
// result := [ ] ;
46730: LD_ADDR_VAR 0 3
46734: PUSH
46735: EMPTY
46736: ST_TO_ADDR
// for i in turrets do
46737: LD_ADDR_VAR 0 4
46741: PUSH
46742: LD_VAR 0 1
46746: PUSH
46747: FOR_IN
46748: IFFALSE 46931
// begin nat := GetNation ( i ) ;
46750: LD_ADDR_VAR 0 7
46754: PUSH
46755: LD_VAR 0 4
46759: PPUSH
46760: CALL_OW 248
46764: ST_TO_ADDR
// weapon := 0 ;
46765: LD_ADDR_VAR 0 8
46769: PUSH
46770: LD_INT 0
46772: ST_TO_ADDR
// if not nat then
46773: LD_VAR 0 7
46777: NOT
46778: IFFALSE 46782
// continue ;
46780: GO 46747
// for j in list [ nat ] do
46782: LD_ADDR_VAR 0 5
46786: PUSH
46787: LD_VAR 0 10
46791: PUSH
46792: LD_VAR 0 7
46796: ARRAY
46797: PUSH
46798: FOR_IN
46799: IFFALSE 46840
// if GetBWeapon ( i ) = j [ 1 ] then
46801: LD_VAR 0 4
46805: PPUSH
46806: CALL_OW 269
46810: PUSH
46811: LD_VAR 0 5
46815: PUSH
46816: LD_INT 1
46818: ARRAY
46819: EQUAL
46820: IFFALSE 46838
// begin weapon := j [ 2 ] ;
46822: LD_ADDR_VAR 0 8
46826: PUSH
46827: LD_VAR 0 5
46831: PUSH
46832: LD_INT 2
46834: ARRAY
46835: ST_TO_ADDR
// break ;
46836: GO 46840
// end ;
46838: GO 46798
46840: POP
46841: POP
// if not weapon then
46842: LD_VAR 0 8
46846: NOT
46847: IFFALSE 46851
// continue ;
46849: GO 46747
// for k in factories do
46851: LD_ADDR_VAR 0 6
46855: PUSH
46856: LD_VAR 0 2
46860: PUSH
46861: FOR_IN
46862: IFFALSE 46927
// begin weapons := AvailableWeaponList ( k ) ;
46864: LD_ADDR_VAR 0 9
46868: PUSH
46869: LD_VAR 0 6
46873: PPUSH
46874: CALL_OW 478
46878: ST_TO_ADDR
// if not weapons then
46879: LD_VAR 0 9
46883: NOT
46884: IFFALSE 46888
// continue ;
46886: GO 46861
// if weapon in weapons then
46888: LD_VAR 0 8
46892: PUSH
46893: LD_VAR 0 9
46897: IN
46898: IFFALSE 46925
// begin result := [ i , weapon ] ;
46900: LD_ADDR_VAR 0 3
46904: PUSH
46905: LD_VAR 0 4
46909: PUSH
46910: LD_VAR 0 8
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: ST_TO_ADDR
// exit ;
46919: POP
46920: POP
46921: POP
46922: POP
46923: GO 46933
// end ; end ;
46925: GO 46861
46927: POP
46928: POP
// end ;
46929: GO 46747
46931: POP
46932: POP
// end ;
46933: LD_VAR 0 3
46937: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
46938: LD_INT 0
46940: PPUSH
// if not side or side > 8 then
46941: LD_VAR 0 3
46945: NOT
46946: PUSH
46947: LD_VAR 0 3
46951: PUSH
46952: LD_INT 8
46954: GREATER
46955: OR
46956: IFFALSE 46960
// exit ;
46958: GO 47019
// if not range then
46960: LD_VAR 0 4
46964: NOT
46965: IFFALSE 46976
// range := - 12 ;
46967: LD_ADDR_VAR 0 4
46971: PUSH
46972: LD_INT 12
46974: NEG
46975: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
46976: LD_VAR 0 1
46980: PPUSH
46981: LD_VAR 0 2
46985: PPUSH
46986: LD_VAR 0 3
46990: PPUSH
46991: LD_VAR 0 4
46995: PPUSH
46996: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
47000: LD_VAR 0 1
47004: PPUSH
47005: LD_VAR 0 2
47009: PPUSH
47010: LD_VAR 0 3
47014: PPUSH
47015: CALL_OW 331
// end ;
47019: LD_VAR 0 5
47023: RET
// export function Video ( mode ) ; begin
47024: LD_INT 0
47026: PPUSH
// ingame_video = mode ;
47027: LD_ADDR_OWVAR 52
47031: PUSH
47032: LD_VAR 0 1
47036: ST_TO_ADDR
// interface_hidden = mode ;
47037: LD_ADDR_OWVAR 54
47041: PUSH
47042: LD_VAR 0 1
47046: ST_TO_ADDR
// end ;
47047: LD_VAR 0 2
47051: RET
// export function Join ( array , element ) ; begin
47052: LD_INT 0
47054: PPUSH
// result := array ^ element ;
47055: LD_ADDR_VAR 0 3
47059: PUSH
47060: LD_VAR 0 1
47064: PUSH
47065: LD_VAR 0 2
47069: ADD
47070: ST_TO_ADDR
// end ;
47071: LD_VAR 0 3
47075: RET
// export function JoinUnion ( array , element ) ; begin
47076: LD_INT 0
47078: PPUSH
// result := array union element ;
47079: LD_ADDR_VAR 0 3
47083: PUSH
47084: LD_VAR 0 1
47088: PUSH
47089: LD_VAR 0 2
47093: UNION
47094: ST_TO_ADDR
// end ;
47095: LD_VAR 0 3
47099: RET
// export function GetBehemoths ( side ) ; begin
47100: LD_INT 0
47102: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
47103: LD_ADDR_VAR 0 2
47107: PUSH
47108: LD_INT 22
47110: PUSH
47111: LD_VAR 0 1
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 31
47122: PUSH
47123: LD_INT 25
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PPUSH
47134: CALL_OW 69
47138: ST_TO_ADDR
// end ;
47139: LD_VAR 0 2
47143: RET
// export function Shuffle ( array ) ; var i , index ; begin
47144: LD_INT 0
47146: PPUSH
47147: PPUSH
47148: PPUSH
// result := [ ] ;
47149: LD_ADDR_VAR 0 2
47153: PUSH
47154: EMPTY
47155: ST_TO_ADDR
// if not array then
47156: LD_VAR 0 1
47160: NOT
47161: IFFALSE 47165
// exit ;
47163: GO 47264
// Randomize ;
47165: CALL_OW 10
// for i = array downto 1 do
47169: LD_ADDR_VAR 0 3
47173: PUSH
47174: DOUBLE
47175: LD_VAR 0 1
47179: INC
47180: ST_TO_ADDR
47181: LD_INT 1
47183: PUSH
47184: FOR_DOWNTO
47185: IFFALSE 47262
// begin index := rand ( 1 , array ) ;
47187: LD_ADDR_VAR 0 4
47191: PUSH
47192: LD_INT 1
47194: PPUSH
47195: LD_VAR 0 1
47199: PPUSH
47200: CALL_OW 12
47204: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
47205: LD_ADDR_VAR 0 2
47209: PUSH
47210: LD_VAR 0 2
47214: PPUSH
47215: LD_VAR 0 2
47219: PUSH
47220: LD_INT 1
47222: PLUS
47223: PPUSH
47224: LD_VAR 0 1
47228: PUSH
47229: LD_VAR 0 4
47233: ARRAY
47234: PPUSH
47235: CALL_OW 2
47239: ST_TO_ADDR
// array := Delete ( array , index ) ;
47240: LD_ADDR_VAR 0 1
47244: PUSH
47245: LD_VAR 0 1
47249: PPUSH
47250: LD_VAR 0 4
47254: PPUSH
47255: CALL_OW 3
47259: ST_TO_ADDR
// end ;
47260: GO 47184
47262: POP
47263: POP
// end ;
47264: LD_VAR 0 2
47268: RET
// export function GetBaseMaterials ( base ) ; begin
47269: LD_INT 0
47271: PPUSH
// result := [ 0 , 0 , 0 ] ;
47272: LD_ADDR_VAR 0 2
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: LD_INT 0
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: LIST
47290: ST_TO_ADDR
// if not base then
47291: LD_VAR 0 1
47295: NOT
47296: IFFALSE 47300
// exit ;
47298: GO 47349
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
47300: LD_ADDR_VAR 0 2
47304: PUSH
47305: LD_VAR 0 1
47309: PPUSH
47310: LD_INT 1
47312: PPUSH
47313: CALL_OW 275
47317: PUSH
47318: LD_VAR 0 1
47322: PPUSH
47323: LD_INT 2
47325: PPUSH
47326: CALL_OW 275
47330: PUSH
47331: LD_VAR 0 1
47335: PPUSH
47336: LD_INT 3
47338: PPUSH
47339: CALL_OW 275
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: LIST
47348: ST_TO_ADDR
// end ; end_of_file
47349: LD_VAR 0 2
47353: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
47354: GO 47356
47356: DISABLE
// begin ru_radar := 98 ;
47357: LD_ADDR_EXP 45
47361: PUSH
47362: LD_INT 98
47364: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
47365: LD_ADDR_EXP 46
47369: PUSH
47370: LD_INT 89
47372: ST_TO_ADDR
// us_hack := 99 ;
47373: LD_ADDR_EXP 47
47377: PUSH
47378: LD_INT 99
47380: ST_TO_ADDR
// us_artillery := 97 ;
47381: LD_ADDR_EXP 48
47385: PUSH
47386: LD_INT 97
47388: ST_TO_ADDR
// ar_bio_bomb := 91 ;
47389: LD_ADDR_EXP 49
47393: PUSH
47394: LD_INT 91
47396: ST_TO_ADDR
// tech_Artillery := 80 ;
47397: LD_ADDR_EXP 50
47401: PUSH
47402: LD_INT 80
47404: ST_TO_ADDR
// tech_RadMat := 81 ;
47405: LD_ADDR_EXP 51
47409: PUSH
47410: LD_INT 81
47412: ST_TO_ADDR
// tech_BasicTools := 82 ;
47413: LD_ADDR_EXP 52
47417: PUSH
47418: LD_INT 82
47420: ST_TO_ADDR
// tech_Cargo := 83 ;
47421: LD_ADDR_EXP 53
47425: PUSH
47426: LD_INT 83
47428: ST_TO_ADDR
// tech_Track := 84 ;
47429: LD_ADDR_EXP 54
47433: PUSH
47434: LD_INT 84
47436: ST_TO_ADDR
// tech_Crane := 85 ;
47437: LD_ADDR_EXP 55
47441: PUSH
47442: LD_INT 85
47444: ST_TO_ADDR
// tech_Bulldozer := 86 ;
47445: LD_ADDR_EXP 56
47449: PUSH
47450: LD_INT 86
47452: ST_TO_ADDR
// tech_Hovercraft := 87 ;
47453: LD_ADDR_EXP 57
47457: PUSH
47458: LD_INT 87
47460: ST_TO_ADDR
// end ; end_of_file
47461: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
47462: LD_INT 0
47464: PPUSH
47465: PPUSH
// skirmish := false ;
47466: LD_ADDR_EXP 58
47470: PUSH
47471: LD_INT 0
47473: ST_TO_ADDR
// debug_mc := false ;
47474: LD_ADDR_EXP 59
47478: PUSH
47479: LD_INT 0
47481: ST_TO_ADDR
// mc_bases := [ ] ;
47482: LD_ADDR_EXP 60
47486: PUSH
47487: EMPTY
47488: ST_TO_ADDR
// mc_sides := [ ] ;
47489: LD_ADDR_EXP 86
47493: PUSH
47494: EMPTY
47495: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
47496: LD_ADDR_EXP 61
47500: PUSH
47501: EMPTY
47502: ST_TO_ADDR
// mc_building_repairs := [ ] ;
47503: LD_ADDR_EXP 62
47507: PUSH
47508: EMPTY
47509: ST_TO_ADDR
// mc_need_heal := [ ] ;
47510: LD_ADDR_EXP 63
47514: PUSH
47515: EMPTY
47516: ST_TO_ADDR
// mc_healers := [ ] ;
47517: LD_ADDR_EXP 64
47521: PUSH
47522: EMPTY
47523: ST_TO_ADDR
// mc_build_list := [ ] ;
47524: LD_ADDR_EXP 65
47528: PUSH
47529: EMPTY
47530: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
47531: LD_ADDR_EXP 92
47535: PUSH
47536: EMPTY
47537: ST_TO_ADDR
// mc_builders := [ ] ;
47538: LD_ADDR_EXP 66
47542: PUSH
47543: EMPTY
47544: ST_TO_ADDR
// mc_construct_list := [ ] ;
47545: LD_ADDR_EXP 67
47549: PUSH
47550: EMPTY
47551: ST_TO_ADDR
// mc_turret_list := [ ] ;
47552: LD_ADDR_EXP 68
47556: PUSH
47557: EMPTY
47558: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
47559: LD_ADDR_EXP 69
47563: PUSH
47564: EMPTY
47565: ST_TO_ADDR
// mc_miners := [ ] ;
47566: LD_ADDR_EXP 74
47570: PUSH
47571: EMPTY
47572: ST_TO_ADDR
// mc_mines := [ ] ;
47573: LD_ADDR_EXP 73
47577: PUSH
47578: EMPTY
47579: ST_TO_ADDR
// mc_minefields := [ ] ;
47580: LD_ADDR_EXP 75
47584: PUSH
47585: EMPTY
47586: ST_TO_ADDR
// mc_crates := [ ] ;
47587: LD_ADDR_EXP 76
47591: PUSH
47592: EMPTY
47593: ST_TO_ADDR
// mc_crates_collector := [ ] ;
47594: LD_ADDR_EXP 77
47598: PUSH
47599: EMPTY
47600: ST_TO_ADDR
// mc_crates_area := [ ] ;
47601: LD_ADDR_EXP 78
47605: PUSH
47606: EMPTY
47607: ST_TO_ADDR
// mc_vehicles := [ ] ;
47608: LD_ADDR_EXP 79
47612: PUSH
47613: EMPTY
47614: ST_TO_ADDR
// mc_attack := [ ] ;
47615: LD_ADDR_EXP 80
47619: PUSH
47620: EMPTY
47621: ST_TO_ADDR
// mc_produce := [ ] ;
47622: LD_ADDR_EXP 81
47626: PUSH
47627: EMPTY
47628: ST_TO_ADDR
// mc_defender := [ ] ;
47629: LD_ADDR_EXP 82
47633: PUSH
47634: EMPTY
47635: ST_TO_ADDR
// mc_parking := [ ] ;
47636: LD_ADDR_EXP 84
47640: PUSH
47641: EMPTY
47642: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
47643: LD_ADDR_EXP 70
47647: PUSH
47648: EMPTY
47649: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
47650: LD_ADDR_EXP 72
47654: PUSH
47655: EMPTY
47656: ST_TO_ADDR
// mc_scan := [ ] ;
47657: LD_ADDR_EXP 83
47661: PUSH
47662: EMPTY
47663: ST_TO_ADDR
// mc_scan_area := [ ] ;
47664: LD_ADDR_EXP 85
47668: PUSH
47669: EMPTY
47670: ST_TO_ADDR
// mc_tech := [ ] ;
47671: LD_ADDR_EXP 87
47675: PUSH
47676: EMPTY
47677: ST_TO_ADDR
// mc_class := [ ] ;
47678: LD_ADDR_EXP 101
47682: PUSH
47683: EMPTY
47684: ST_TO_ADDR
// mc_class_case_use := [ ] ;
47685: LD_ADDR_EXP 102
47689: PUSH
47690: EMPTY
47691: ST_TO_ADDR
// end ;
47692: LD_VAR 0 1
47696: RET
// export function MC_Kill ( base ) ; begin
47697: LD_INT 0
47699: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
47700: LD_ADDR_EXP 60
47704: PUSH
47705: LD_EXP 60
47709: PPUSH
47710: LD_VAR 0 1
47714: PPUSH
47715: EMPTY
47716: PPUSH
47717: CALL_OW 1
47721: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
47722: LD_ADDR_EXP 61
47726: PUSH
47727: LD_EXP 61
47731: PPUSH
47732: LD_VAR 0 1
47736: PPUSH
47737: EMPTY
47738: PPUSH
47739: CALL_OW 1
47743: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
47744: LD_ADDR_EXP 62
47748: PUSH
47749: LD_EXP 62
47753: PPUSH
47754: LD_VAR 0 1
47758: PPUSH
47759: EMPTY
47760: PPUSH
47761: CALL_OW 1
47765: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
47766: LD_ADDR_EXP 63
47770: PUSH
47771: LD_EXP 63
47775: PPUSH
47776: LD_VAR 0 1
47780: PPUSH
47781: EMPTY
47782: PPUSH
47783: CALL_OW 1
47787: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
47788: LD_ADDR_EXP 64
47792: PUSH
47793: LD_EXP 64
47797: PPUSH
47798: LD_VAR 0 1
47802: PPUSH
47803: EMPTY
47804: PPUSH
47805: CALL_OW 1
47809: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
47810: LD_ADDR_EXP 65
47814: PUSH
47815: LD_EXP 65
47819: PPUSH
47820: LD_VAR 0 1
47824: PPUSH
47825: EMPTY
47826: PPUSH
47827: CALL_OW 1
47831: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
47832: LD_ADDR_EXP 66
47836: PUSH
47837: LD_EXP 66
47841: PPUSH
47842: LD_VAR 0 1
47846: PPUSH
47847: EMPTY
47848: PPUSH
47849: CALL_OW 1
47853: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
47854: LD_ADDR_EXP 67
47858: PUSH
47859: LD_EXP 67
47863: PPUSH
47864: LD_VAR 0 1
47868: PPUSH
47869: EMPTY
47870: PPUSH
47871: CALL_OW 1
47875: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
47876: LD_ADDR_EXP 68
47880: PUSH
47881: LD_EXP 68
47885: PPUSH
47886: LD_VAR 0 1
47890: PPUSH
47891: EMPTY
47892: PPUSH
47893: CALL_OW 1
47897: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
47898: LD_ADDR_EXP 69
47902: PUSH
47903: LD_EXP 69
47907: PPUSH
47908: LD_VAR 0 1
47912: PPUSH
47913: EMPTY
47914: PPUSH
47915: CALL_OW 1
47919: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
47920: LD_ADDR_EXP 70
47924: PUSH
47925: LD_EXP 70
47929: PPUSH
47930: LD_VAR 0 1
47934: PPUSH
47935: EMPTY
47936: PPUSH
47937: CALL_OW 1
47941: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
47942: LD_ADDR_EXP 71
47946: PUSH
47947: LD_EXP 71
47951: PPUSH
47952: LD_VAR 0 1
47956: PPUSH
47957: LD_INT 0
47959: PPUSH
47960: CALL_OW 1
47964: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
47965: LD_ADDR_EXP 72
47969: PUSH
47970: LD_EXP 72
47974: PPUSH
47975: LD_VAR 0 1
47979: PPUSH
47980: EMPTY
47981: PPUSH
47982: CALL_OW 1
47986: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
47987: LD_ADDR_EXP 73
47991: PUSH
47992: LD_EXP 73
47996: PPUSH
47997: LD_VAR 0 1
48001: PPUSH
48002: EMPTY
48003: PPUSH
48004: CALL_OW 1
48008: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
48009: LD_ADDR_EXP 74
48013: PUSH
48014: LD_EXP 74
48018: PPUSH
48019: LD_VAR 0 1
48023: PPUSH
48024: EMPTY
48025: PPUSH
48026: CALL_OW 1
48030: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
48031: LD_ADDR_EXP 75
48035: PUSH
48036: LD_EXP 75
48040: PPUSH
48041: LD_VAR 0 1
48045: PPUSH
48046: EMPTY
48047: PPUSH
48048: CALL_OW 1
48052: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
48053: LD_ADDR_EXP 76
48057: PUSH
48058: LD_EXP 76
48062: PPUSH
48063: LD_VAR 0 1
48067: PPUSH
48068: EMPTY
48069: PPUSH
48070: CALL_OW 1
48074: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
48075: LD_ADDR_EXP 77
48079: PUSH
48080: LD_EXP 77
48084: PPUSH
48085: LD_VAR 0 1
48089: PPUSH
48090: EMPTY
48091: PPUSH
48092: CALL_OW 1
48096: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
48097: LD_ADDR_EXP 78
48101: PUSH
48102: LD_EXP 78
48106: PPUSH
48107: LD_VAR 0 1
48111: PPUSH
48112: EMPTY
48113: PPUSH
48114: CALL_OW 1
48118: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
48119: LD_ADDR_EXP 79
48123: PUSH
48124: LD_EXP 79
48128: PPUSH
48129: LD_VAR 0 1
48133: PPUSH
48134: EMPTY
48135: PPUSH
48136: CALL_OW 1
48140: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
48141: LD_ADDR_EXP 80
48145: PUSH
48146: LD_EXP 80
48150: PPUSH
48151: LD_VAR 0 1
48155: PPUSH
48156: EMPTY
48157: PPUSH
48158: CALL_OW 1
48162: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
48163: LD_ADDR_EXP 81
48167: PUSH
48168: LD_EXP 81
48172: PPUSH
48173: LD_VAR 0 1
48177: PPUSH
48178: EMPTY
48179: PPUSH
48180: CALL_OW 1
48184: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
48185: LD_ADDR_EXP 82
48189: PUSH
48190: LD_EXP 82
48194: PPUSH
48195: LD_VAR 0 1
48199: PPUSH
48200: EMPTY
48201: PPUSH
48202: CALL_OW 1
48206: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
48207: LD_ADDR_EXP 83
48211: PUSH
48212: LD_EXP 83
48216: PPUSH
48217: LD_VAR 0 1
48221: PPUSH
48222: EMPTY
48223: PPUSH
48224: CALL_OW 1
48228: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
48229: LD_ADDR_EXP 84
48233: PUSH
48234: LD_EXP 84
48238: PPUSH
48239: LD_VAR 0 1
48243: PPUSH
48244: EMPTY
48245: PPUSH
48246: CALL_OW 1
48250: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
48251: LD_ADDR_EXP 85
48255: PUSH
48256: LD_EXP 85
48260: PPUSH
48261: LD_VAR 0 1
48265: PPUSH
48266: EMPTY
48267: PPUSH
48268: CALL_OW 1
48272: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
48273: LD_ADDR_EXP 87
48277: PUSH
48278: LD_EXP 87
48282: PPUSH
48283: LD_VAR 0 1
48287: PPUSH
48288: EMPTY
48289: PPUSH
48290: CALL_OW 1
48294: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
48295: LD_ADDR_EXP 89
48299: PUSH
48300: LD_EXP 89
48304: PPUSH
48305: LD_VAR 0 1
48309: PPUSH
48310: EMPTY
48311: PPUSH
48312: CALL_OW 1
48316: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
48317: LD_ADDR_EXP 90
48321: PUSH
48322: LD_EXP 90
48326: PPUSH
48327: LD_VAR 0 1
48331: PPUSH
48332: EMPTY
48333: PPUSH
48334: CALL_OW 1
48338: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
48339: LD_ADDR_EXP 91
48343: PUSH
48344: LD_EXP 91
48348: PPUSH
48349: LD_VAR 0 1
48353: PPUSH
48354: EMPTY
48355: PPUSH
48356: CALL_OW 1
48360: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
48361: LD_ADDR_EXP 92
48365: PUSH
48366: LD_EXP 92
48370: PPUSH
48371: LD_VAR 0 1
48375: PPUSH
48376: EMPTY
48377: PPUSH
48378: CALL_OW 1
48382: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
48383: LD_ADDR_EXP 93
48387: PUSH
48388: LD_EXP 93
48392: PPUSH
48393: LD_VAR 0 1
48397: PPUSH
48398: EMPTY
48399: PPUSH
48400: CALL_OW 1
48404: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
48405: LD_ADDR_EXP 94
48409: PUSH
48410: LD_EXP 94
48414: PPUSH
48415: LD_VAR 0 1
48419: PPUSH
48420: EMPTY
48421: PPUSH
48422: CALL_OW 1
48426: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
48427: LD_ADDR_EXP 95
48431: PUSH
48432: LD_EXP 95
48436: PPUSH
48437: LD_VAR 0 1
48441: PPUSH
48442: EMPTY
48443: PPUSH
48444: CALL_OW 1
48448: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
48449: LD_ADDR_EXP 96
48453: PUSH
48454: LD_EXP 96
48458: PPUSH
48459: LD_VAR 0 1
48463: PPUSH
48464: EMPTY
48465: PPUSH
48466: CALL_OW 1
48470: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
48471: LD_ADDR_EXP 97
48475: PUSH
48476: LD_EXP 97
48480: PPUSH
48481: LD_VAR 0 1
48485: PPUSH
48486: EMPTY
48487: PPUSH
48488: CALL_OW 1
48492: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
48493: LD_ADDR_EXP 98
48497: PUSH
48498: LD_EXP 98
48502: PPUSH
48503: LD_VAR 0 1
48507: PPUSH
48508: EMPTY
48509: PPUSH
48510: CALL_OW 1
48514: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
48515: LD_ADDR_EXP 99
48519: PUSH
48520: LD_EXP 99
48524: PPUSH
48525: LD_VAR 0 1
48529: PPUSH
48530: EMPTY
48531: PPUSH
48532: CALL_OW 1
48536: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
48537: LD_ADDR_EXP 100
48541: PUSH
48542: LD_EXP 100
48546: PPUSH
48547: LD_VAR 0 1
48551: PPUSH
48552: EMPTY
48553: PPUSH
48554: CALL_OW 1
48558: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
48559: LD_ADDR_EXP 101
48563: PUSH
48564: LD_EXP 101
48568: PPUSH
48569: LD_VAR 0 1
48573: PPUSH
48574: EMPTY
48575: PPUSH
48576: CALL_OW 1
48580: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
48581: LD_ADDR_EXP 102
48585: PUSH
48586: LD_EXP 102
48590: PPUSH
48591: LD_VAR 0 1
48595: PPUSH
48596: LD_INT 0
48598: PPUSH
48599: CALL_OW 1
48603: ST_TO_ADDR
// end ;
48604: LD_VAR 0 2
48608: RET
// export function MC_Add ( side , units ) ; var base ; begin
48609: LD_INT 0
48611: PPUSH
48612: PPUSH
// base := mc_bases + 1 ;
48613: LD_ADDR_VAR 0 4
48617: PUSH
48618: LD_EXP 60
48622: PUSH
48623: LD_INT 1
48625: PLUS
48626: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
48627: LD_ADDR_EXP 86
48631: PUSH
48632: LD_EXP 86
48636: PPUSH
48637: LD_VAR 0 4
48641: PPUSH
48642: LD_VAR 0 1
48646: PPUSH
48647: CALL_OW 1
48651: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
48652: LD_ADDR_EXP 60
48656: PUSH
48657: LD_EXP 60
48661: PPUSH
48662: LD_VAR 0 4
48666: PPUSH
48667: LD_VAR 0 2
48671: PPUSH
48672: CALL_OW 1
48676: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
48677: LD_ADDR_EXP 61
48681: PUSH
48682: LD_EXP 61
48686: PPUSH
48687: LD_VAR 0 4
48691: PPUSH
48692: EMPTY
48693: PPUSH
48694: CALL_OW 1
48698: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
48699: LD_ADDR_EXP 62
48703: PUSH
48704: LD_EXP 62
48708: PPUSH
48709: LD_VAR 0 4
48713: PPUSH
48714: EMPTY
48715: PPUSH
48716: CALL_OW 1
48720: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
48721: LD_ADDR_EXP 63
48725: PUSH
48726: LD_EXP 63
48730: PPUSH
48731: LD_VAR 0 4
48735: PPUSH
48736: EMPTY
48737: PPUSH
48738: CALL_OW 1
48742: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
48743: LD_ADDR_EXP 64
48747: PUSH
48748: LD_EXP 64
48752: PPUSH
48753: LD_VAR 0 4
48757: PPUSH
48758: EMPTY
48759: PPUSH
48760: CALL_OW 1
48764: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
48765: LD_ADDR_EXP 65
48769: PUSH
48770: LD_EXP 65
48774: PPUSH
48775: LD_VAR 0 4
48779: PPUSH
48780: EMPTY
48781: PPUSH
48782: CALL_OW 1
48786: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
48787: LD_ADDR_EXP 66
48791: PUSH
48792: LD_EXP 66
48796: PPUSH
48797: LD_VAR 0 4
48801: PPUSH
48802: EMPTY
48803: PPUSH
48804: CALL_OW 1
48808: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
48809: LD_ADDR_EXP 67
48813: PUSH
48814: LD_EXP 67
48818: PPUSH
48819: LD_VAR 0 4
48823: PPUSH
48824: EMPTY
48825: PPUSH
48826: CALL_OW 1
48830: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
48831: LD_ADDR_EXP 68
48835: PUSH
48836: LD_EXP 68
48840: PPUSH
48841: LD_VAR 0 4
48845: PPUSH
48846: EMPTY
48847: PPUSH
48848: CALL_OW 1
48852: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
48853: LD_ADDR_EXP 69
48857: PUSH
48858: LD_EXP 69
48862: PPUSH
48863: LD_VAR 0 4
48867: PPUSH
48868: EMPTY
48869: PPUSH
48870: CALL_OW 1
48874: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
48875: LD_ADDR_EXP 70
48879: PUSH
48880: LD_EXP 70
48884: PPUSH
48885: LD_VAR 0 4
48889: PPUSH
48890: EMPTY
48891: PPUSH
48892: CALL_OW 1
48896: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
48897: LD_ADDR_EXP 71
48901: PUSH
48902: LD_EXP 71
48906: PPUSH
48907: LD_VAR 0 4
48911: PPUSH
48912: LD_INT 0
48914: PPUSH
48915: CALL_OW 1
48919: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
48920: LD_ADDR_EXP 72
48924: PUSH
48925: LD_EXP 72
48929: PPUSH
48930: LD_VAR 0 4
48934: PPUSH
48935: EMPTY
48936: PPUSH
48937: CALL_OW 1
48941: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
48942: LD_ADDR_EXP 73
48946: PUSH
48947: LD_EXP 73
48951: PPUSH
48952: LD_VAR 0 4
48956: PPUSH
48957: EMPTY
48958: PPUSH
48959: CALL_OW 1
48963: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
48964: LD_ADDR_EXP 74
48968: PUSH
48969: LD_EXP 74
48973: PPUSH
48974: LD_VAR 0 4
48978: PPUSH
48979: EMPTY
48980: PPUSH
48981: CALL_OW 1
48985: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
48986: LD_ADDR_EXP 75
48990: PUSH
48991: LD_EXP 75
48995: PPUSH
48996: LD_VAR 0 4
49000: PPUSH
49001: EMPTY
49002: PPUSH
49003: CALL_OW 1
49007: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
49008: LD_ADDR_EXP 76
49012: PUSH
49013: LD_EXP 76
49017: PPUSH
49018: LD_VAR 0 4
49022: PPUSH
49023: EMPTY
49024: PPUSH
49025: CALL_OW 1
49029: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
49030: LD_ADDR_EXP 77
49034: PUSH
49035: LD_EXP 77
49039: PPUSH
49040: LD_VAR 0 4
49044: PPUSH
49045: EMPTY
49046: PPUSH
49047: CALL_OW 1
49051: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
49052: LD_ADDR_EXP 78
49056: PUSH
49057: LD_EXP 78
49061: PPUSH
49062: LD_VAR 0 4
49066: PPUSH
49067: EMPTY
49068: PPUSH
49069: CALL_OW 1
49073: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
49074: LD_ADDR_EXP 79
49078: PUSH
49079: LD_EXP 79
49083: PPUSH
49084: LD_VAR 0 4
49088: PPUSH
49089: EMPTY
49090: PPUSH
49091: CALL_OW 1
49095: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
49096: LD_ADDR_EXP 80
49100: PUSH
49101: LD_EXP 80
49105: PPUSH
49106: LD_VAR 0 4
49110: PPUSH
49111: EMPTY
49112: PPUSH
49113: CALL_OW 1
49117: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
49118: LD_ADDR_EXP 81
49122: PUSH
49123: LD_EXP 81
49127: PPUSH
49128: LD_VAR 0 4
49132: PPUSH
49133: EMPTY
49134: PPUSH
49135: CALL_OW 1
49139: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
49140: LD_ADDR_EXP 82
49144: PUSH
49145: LD_EXP 82
49149: PPUSH
49150: LD_VAR 0 4
49154: PPUSH
49155: EMPTY
49156: PPUSH
49157: CALL_OW 1
49161: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
49162: LD_ADDR_EXP 83
49166: PUSH
49167: LD_EXP 83
49171: PPUSH
49172: LD_VAR 0 4
49176: PPUSH
49177: EMPTY
49178: PPUSH
49179: CALL_OW 1
49183: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
49184: LD_ADDR_EXP 84
49188: PUSH
49189: LD_EXP 84
49193: PPUSH
49194: LD_VAR 0 4
49198: PPUSH
49199: EMPTY
49200: PPUSH
49201: CALL_OW 1
49205: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
49206: LD_ADDR_EXP 85
49210: PUSH
49211: LD_EXP 85
49215: PPUSH
49216: LD_VAR 0 4
49220: PPUSH
49221: EMPTY
49222: PPUSH
49223: CALL_OW 1
49227: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
49228: LD_ADDR_EXP 87
49232: PUSH
49233: LD_EXP 87
49237: PPUSH
49238: LD_VAR 0 4
49242: PPUSH
49243: EMPTY
49244: PPUSH
49245: CALL_OW 1
49249: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
49250: LD_ADDR_EXP 89
49254: PUSH
49255: LD_EXP 89
49259: PPUSH
49260: LD_VAR 0 4
49264: PPUSH
49265: EMPTY
49266: PPUSH
49267: CALL_OW 1
49271: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
49272: LD_ADDR_EXP 90
49276: PUSH
49277: LD_EXP 90
49281: PPUSH
49282: LD_VAR 0 4
49286: PPUSH
49287: EMPTY
49288: PPUSH
49289: CALL_OW 1
49293: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
49294: LD_ADDR_EXP 91
49298: PUSH
49299: LD_EXP 91
49303: PPUSH
49304: LD_VAR 0 4
49308: PPUSH
49309: EMPTY
49310: PPUSH
49311: CALL_OW 1
49315: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
49316: LD_ADDR_EXP 92
49320: PUSH
49321: LD_EXP 92
49325: PPUSH
49326: LD_VAR 0 4
49330: PPUSH
49331: EMPTY
49332: PPUSH
49333: CALL_OW 1
49337: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
49338: LD_ADDR_EXP 93
49342: PUSH
49343: LD_EXP 93
49347: PPUSH
49348: LD_VAR 0 4
49352: PPUSH
49353: EMPTY
49354: PPUSH
49355: CALL_OW 1
49359: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
49360: LD_ADDR_EXP 94
49364: PUSH
49365: LD_EXP 94
49369: PPUSH
49370: LD_VAR 0 4
49374: PPUSH
49375: EMPTY
49376: PPUSH
49377: CALL_OW 1
49381: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
49382: LD_ADDR_EXP 95
49386: PUSH
49387: LD_EXP 95
49391: PPUSH
49392: LD_VAR 0 4
49396: PPUSH
49397: EMPTY
49398: PPUSH
49399: CALL_OW 1
49403: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
49404: LD_ADDR_EXP 96
49408: PUSH
49409: LD_EXP 96
49413: PPUSH
49414: LD_VAR 0 4
49418: PPUSH
49419: EMPTY
49420: PPUSH
49421: CALL_OW 1
49425: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
49426: LD_ADDR_EXP 97
49430: PUSH
49431: LD_EXP 97
49435: PPUSH
49436: LD_VAR 0 4
49440: PPUSH
49441: EMPTY
49442: PPUSH
49443: CALL_OW 1
49447: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
49448: LD_ADDR_EXP 98
49452: PUSH
49453: LD_EXP 98
49457: PPUSH
49458: LD_VAR 0 4
49462: PPUSH
49463: EMPTY
49464: PPUSH
49465: CALL_OW 1
49469: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
49470: LD_ADDR_EXP 99
49474: PUSH
49475: LD_EXP 99
49479: PPUSH
49480: LD_VAR 0 4
49484: PPUSH
49485: EMPTY
49486: PPUSH
49487: CALL_OW 1
49491: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
49492: LD_ADDR_EXP 100
49496: PUSH
49497: LD_EXP 100
49501: PPUSH
49502: LD_VAR 0 4
49506: PPUSH
49507: EMPTY
49508: PPUSH
49509: CALL_OW 1
49513: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
49514: LD_ADDR_EXP 101
49518: PUSH
49519: LD_EXP 101
49523: PPUSH
49524: LD_VAR 0 4
49528: PPUSH
49529: EMPTY
49530: PPUSH
49531: CALL_OW 1
49535: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
49536: LD_ADDR_EXP 102
49540: PUSH
49541: LD_EXP 102
49545: PPUSH
49546: LD_VAR 0 4
49550: PPUSH
49551: LD_INT 0
49553: PPUSH
49554: CALL_OW 1
49558: ST_TO_ADDR
// result := base ;
49559: LD_ADDR_VAR 0 3
49563: PUSH
49564: LD_VAR 0 4
49568: ST_TO_ADDR
// end ;
49569: LD_VAR 0 3
49573: RET
// export function MC_Start ( ) ; var i ; begin
49574: LD_INT 0
49576: PPUSH
49577: PPUSH
// for i = 1 to mc_bases do
49578: LD_ADDR_VAR 0 2
49582: PUSH
49583: DOUBLE
49584: LD_INT 1
49586: DEC
49587: ST_TO_ADDR
49588: LD_EXP 60
49592: PUSH
49593: FOR_TO
49594: IFFALSE 50671
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
49596: LD_ADDR_EXP 60
49600: PUSH
49601: LD_EXP 60
49605: PPUSH
49606: LD_VAR 0 2
49610: PPUSH
49611: LD_EXP 60
49615: PUSH
49616: LD_VAR 0 2
49620: ARRAY
49621: PUSH
49622: LD_INT 0
49624: DIFF
49625: PPUSH
49626: CALL_OW 1
49630: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
49631: LD_ADDR_EXP 61
49635: PUSH
49636: LD_EXP 61
49640: PPUSH
49641: LD_VAR 0 2
49645: PPUSH
49646: EMPTY
49647: PPUSH
49648: CALL_OW 1
49652: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
49653: LD_ADDR_EXP 62
49657: PUSH
49658: LD_EXP 62
49662: PPUSH
49663: LD_VAR 0 2
49667: PPUSH
49668: EMPTY
49669: PPUSH
49670: CALL_OW 1
49674: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
49675: LD_ADDR_EXP 63
49679: PUSH
49680: LD_EXP 63
49684: PPUSH
49685: LD_VAR 0 2
49689: PPUSH
49690: EMPTY
49691: PPUSH
49692: CALL_OW 1
49696: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
49697: LD_ADDR_EXP 64
49701: PUSH
49702: LD_EXP 64
49706: PPUSH
49707: LD_VAR 0 2
49711: PPUSH
49712: EMPTY
49713: PUSH
49714: EMPTY
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PPUSH
49720: CALL_OW 1
49724: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
49725: LD_ADDR_EXP 65
49729: PUSH
49730: LD_EXP 65
49734: PPUSH
49735: LD_VAR 0 2
49739: PPUSH
49740: EMPTY
49741: PPUSH
49742: CALL_OW 1
49746: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
49747: LD_ADDR_EXP 92
49751: PUSH
49752: LD_EXP 92
49756: PPUSH
49757: LD_VAR 0 2
49761: PPUSH
49762: EMPTY
49763: PPUSH
49764: CALL_OW 1
49768: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
49769: LD_ADDR_EXP 66
49773: PUSH
49774: LD_EXP 66
49778: PPUSH
49779: LD_VAR 0 2
49783: PPUSH
49784: EMPTY
49785: PPUSH
49786: CALL_OW 1
49790: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
49791: LD_ADDR_EXP 67
49795: PUSH
49796: LD_EXP 67
49800: PPUSH
49801: LD_VAR 0 2
49805: PPUSH
49806: EMPTY
49807: PPUSH
49808: CALL_OW 1
49812: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
49813: LD_ADDR_EXP 68
49817: PUSH
49818: LD_EXP 68
49822: PPUSH
49823: LD_VAR 0 2
49827: PPUSH
49828: LD_EXP 60
49832: PUSH
49833: LD_VAR 0 2
49837: ARRAY
49838: PPUSH
49839: LD_INT 2
49841: PUSH
49842: LD_INT 30
49844: PUSH
49845: LD_INT 32
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 30
49854: PUSH
49855: LD_INT 33
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: LIST
49866: PPUSH
49867: CALL_OW 72
49871: PPUSH
49872: CALL_OW 1
49876: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
49877: LD_ADDR_EXP 69
49881: PUSH
49882: LD_EXP 69
49886: PPUSH
49887: LD_VAR 0 2
49891: PPUSH
49892: LD_EXP 60
49896: PUSH
49897: LD_VAR 0 2
49901: ARRAY
49902: PPUSH
49903: LD_INT 2
49905: PUSH
49906: LD_INT 30
49908: PUSH
49909: LD_INT 32
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 30
49918: PUSH
49919: LD_INT 31
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 58
49933: PUSH
49934: EMPTY
49935: LIST
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PPUSH
49941: CALL_OW 72
49945: PPUSH
49946: CALL_OW 1
49950: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
49951: LD_ADDR_EXP 70
49955: PUSH
49956: LD_EXP 70
49960: PPUSH
49961: LD_VAR 0 2
49965: PPUSH
49966: EMPTY
49967: PPUSH
49968: CALL_OW 1
49972: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
49973: LD_ADDR_EXP 74
49977: PUSH
49978: LD_EXP 74
49982: PPUSH
49983: LD_VAR 0 2
49987: PPUSH
49988: EMPTY
49989: PPUSH
49990: CALL_OW 1
49994: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
49995: LD_ADDR_EXP 73
49999: PUSH
50000: LD_EXP 73
50004: PPUSH
50005: LD_VAR 0 2
50009: PPUSH
50010: EMPTY
50011: PPUSH
50012: CALL_OW 1
50016: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
50017: LD_ADDR_EXP 75
50021: PUSH
50022: LD_EXP 75
50026: PPUSH
50027: LD_VAR 0 2
50031: PPUSH
50032: EMPTY
50033: PPUSH
50034: CALL_OW 1
50038: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
50039: LD_ADDR_EXP 76
50043: PUSH
50044: LD_EXP 76
50048: PPUSH
50049: LD_VAR 0 2
50053: PPUSH
50054: EMPTY
50055: PPUSH
50056: CALL_OW 1
50060: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
50061: LD_ADDR_EXP 77
50065: PUSH
50066: LD_EXP 77
50070: PPUSH
50071: LD_VAR 0 2
50075: PPUSH
50076: EMPTY
50077: PPUSH
50078: CALL_OW 1
50082: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
50083: LD_ADDR_EXP 78
50087: PUSH
50088: LD_EXP 78
50092: PPUSH
50093: LD_VAR 0 2
50097: PPUSH
50098: EMPTY
50099: PPUSH
50100: CALL_OW 1
50104: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
50105: LD_ADDR_EXP 79
50109: PUSH
50110: LD_EXP 79
50114: PPUSH
50115: LD_VAR 0 2
50119: PPUSH
50120: EMPTY
50121: PPUSH
50122: CALL_OW 1
50126: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
50127: LD_ADDR_EXP 80
50131: PUSH
50132: LD_EXP 80
50136: PPUSH
50137: LD_VAR 0 2
50141: PPUSH
50142: EMPTY
50143: PPUSH
50144: CALL_OW 1
50148: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
50149: LD_ADDR_EXP 81
50153: PUSH
50154: LD_EXP 81
50158: PPUSH
50159: LD_VAR 0 2
50163: PPUSH
50164: EMPTY
50165: PPUSH
50166: CALL_OW 1
50170: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
50171: LD_ADDR_EXP 82
50175: PUSH
50176: LD_EXP 82
50180: PPUSH
50181: LD_VAR 0 2
50185: PPUSH
50186: EMPTY
50187: PPUSH
50188: CALL_OW 1
50192: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
50193: LD_ADDR_EXP 71
50197: PUSH
50198: LD_EXP 71
50202: PPUSH
50203: LD_VAR 0 2
50207: PPUSH
50208: LD_INT 0
50210: PPUSH
50211: CALL_OW 1
50215: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
50216: LD_ADDR_EXP 84
50220: PUSH
50221: LD_EXP 84
50225: PPUSH
50226: LD_VAR 0 2
50230: PPUSH
50231: LD_INT 0
50233: PPUSH
50234: CALL_OW 1
50238: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
50239: LD_ADDR_EXP 72
50243: PUSH
50244: LD_EXP 72
50248: PPUSH
50249: LD_VAR 0 2
50253: PPUSH
50254: EMPTY
50255: PPUSH
50256: CALL_OW 1
50260: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
50261: LD_ADDR_EXP 83
50265: PUSH
50266: LD_EXP 83
50270: PPUSH
50271: LD_VAR 0 2
50275: PPUSH
50276: LD_INT 0
50278: PPUSH
50279: CALL_OW 1
50283: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
50284: LD_ADDR_EXP 85
50288: PUSH
50289: LD_EXP 85
50293: PPUSH
50294: LD_VAR 0 2
50298: PPUSH
50299: EMPTY
50300: PPUSH
50301: CALL_OW 1
50305: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
50306: LD_ADDR_EXP 88
50310: PUSH
50311: LD_EXP 88
50315: PPUSH
50316: LD_VAR 0 2
50320: PPUSH
50321: LD_INT 0
50323: PPUSH
50324: CALL_OW 1
50328: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
50329: LD_ADDR_EXP 89
50333: PUSH
50334: LD_EXP 89
50338: PPUSH
50339: LD_VAR 0 2
50343: PPUSH
50344: EMPTY
50345: PPUSH
50346: CALL_OW 1
50350: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
50351: LD_ADDR_EXP 90
50355: PUSH
50356: LD_EXP 90
50360: PPUSH
50361: LD_VAR 0 2
50365: PPUSH
50366: EMPTY
50367: PPUSH
50368: CALL_OW 1
50372: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
50373: LD_ADDR_EXP 91
50377: PUSH
50378: LD_EXP 91
50382: PPUSH
50383: LD_VAR 0 2
50387: PPUSH
50388: EMPTY
50389: PPUSH
50390: CALL_OW 1
50394: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
50395: LD_ADDR_EXP 93
50399: PUSH
50400: LD_EXP 93
50404: PPUSH
50405: LD_VAR 0 2
50409: PPUSH
50410: LD_EXP 60
50414: PUSH
50415: LD_VAR 0 2
50419: ARRAY
50420: PPUSH
50421: LD_INT 2
50423: PUSH
50424: LD_INT 30
50426: PUSH
50427: LD_INT 6
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 30
50436: PUSH
50437: LD_INT 7
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 30
50446: PUSH
50447: LD_INT 8
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: PPUSH
50460: CALL_OW 72
50464: PPUSH
50465: CALL_OW 1
50469: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
50470: LD_ADDR_EXP 94
50474: PUSH
50475: LD_EXP 94
50479: PPUSH
50480: LD_VAR 0 2
50484: PPUSH
50485: EMPTY
50486: PPUSH
50487: CALL_OW 1
50491: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
50492: LD_ADDR_EXP 95
50496: PUSH
50497: LD_EXP 95
50501: PPUSH
50502: LD_VAR 0 2
50506: PPUSH
50507: EMPTY
50508: PPUSH
50509: CALL_OW 1
50513: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
50514: LD_ADDR_EXP 96
50518: PUSH
50519: LD_EXP 96
50523: PPUSH
50524: LD_VAR 0 2
50528: PPUSH
50529: EMPTY
50530: PPUSH
50531: CALL_OW 1
50535: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
50536: LD_ADDR_EXP 97
50540: PUSH
50541: LD_EXP 97
50545: PPUSH
50546: LD_VAR 0 2
50550: PPUSH
50551: EMPTY
50552: PPUSH
50553: CALL_OW 1
50557: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
50558: LD_ADDR_EXP 98
50562: PUSH
50563: LD_EXP 98
50567: PPUSH
50568: LD_VAR 0 2
50572: PPUSH
50573: EMPTY
50574: PPUSH
50575: CALL_OW 1
50579: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
50580: LD_ADDR_EXP 99
50584: PUSH
50585: LD_EXP 99
50589: PPUSH
50590: LD_VAR 0 2
50594: PPUSH
50595: EMPTY
50596: PPUSH
50597: CALL_OW 1
50601: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
50602: LD_ADDR_EXP 100
50606: PUSH
50607: LD_EXP 100
50611: PPUSH
50612: LD_VAR 0 2
50616: PPUSH
50617: EMPTY
50618: PPUSH
50619: CALL_OW 1
50623: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
50624: LD_ADDR_EXP 101
50628: PUSH
50629: LD_EXP 101
50633: PPUSH
50634: LD_VAR 0 2
50638: PPUSH
50639: EMPTY
50640: PPUSH
50641: CALL_OW 1
50645: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
50646: LD_ADDR_EXP 102
50650: PUSH
50651: LD_EXP 102
50655: PPUSH
50656: LD_VAR 0 2
50660: PPUSH
50661: LD_INT 0
50663: PPUSH
50664: CALL_OW 1
50668: ST_TO_ADDR
// end ;
50669: GO 49593
50671: POP
50672: POP
// MC_InitSides ( ) ;
50673: CALL 50959 0 0
// MC_InitResearch ( ) ;
50677: CALL 50698 0 0
// CustomInitMacro ( ) ;
50681: CALL 5367 0 0
// skirmish := true ;
50685: LD_ADDR_EXP 58
50689: PUSH
50690: LD_INT 1
50692: ST_TO_ADDR
// end ;
50693: LD_VAR 0 1
50697: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
50698: LD_INT 0
50700: PPUSH
50701: PPUSH
50702: PPUSH
50703: PPUSH
50704: PPUSH
50705: PPUSH
// if not mc_bases then
50706: LD_EXP 60
50710: NOT
50711: IFFALSE 50715
// exit ;
50713: GO 50954
// for i = 1 to 8 do
50715: LD_ADDR_VAR 0 2
50719: PUSH
50720: DOUBLE
50721: LD_INT 1
50723: DEC
50724: ST_TO_ADDR
50725: LD_INT 8
50727: PUSH
50728: FOR_TO
50729: IFFALSE 50755
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
50731: LD_ADDR_EXP 87
50735: PUSH
50736: LD_EXP 87
50740: PPUSH
50741: LD_VAR 0 2
50745: PPUSH
50746: EMPTY
50747: PPUSH
50748: CALL_OW 1
50752: ST_TO_ADDR
50753: GO 50728
50755: POP
50756: POP
// tmp := [ ] ;
50757: LD_ADDR_VAR 0 5
50761: PUSH
50762: EMPTY
50763: ST_TO_ADDR
// for i = 1 to mc_sides do
50764: LD_ADDR_VAR 0 2
50768: PUSH
50769: DOUBLE
50770: LD_INT 1
50772: DEC
50773: ST_TO_ADDR
50774: LD_EXP 86
50778: PUSH
50779: FOR_TO
50780: IFFALSE 50838
// if not mc_sides [ i ] in tmp then
50782: LD_EXP 86
50786: PUSH
50787: LD_VAR 0 2
50791: ARRAY
50792: PUSH
50793: LD_VAR 0 5
50797: IN
50798: NOT
50799: IFFALSE 50836
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
50801: LD_ADDR_VAR 0 5
50805: PUSH
50806: LD_VAR 0 5
50810: PPUSH
50811: LD_VAR 0 5
50815: PUSH
50816: LD_INT 1
50818: PLUS
50819: PPUSH
50820: LD_EXP 86
50824: PUSH
50825: LD_VAR 0 2
50829: ARRAY
50830: PPUSH
50831: CALL_OW 2
50835: ST_TO_ADDR
50836: GO 50779
50838: POP
50839: POP
// if not tmp then
50840: LD_VAR 0 5
50844: NOT
50845: IFFALSE 50849
// exit ;
50847: GO 50954
// for j in tmp do
50849: LD_ADDR_VAR 0 3
50853: PUSH
50854: LD_VAR 0 5
50858: PUSH
50859: FOR_IN
50860: IFFALSE 50952
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
50862: LD_ADDR_VAR 0 6
50866: PUSH
50867: LD_INT 22
50869: PUSH
50870: LD_VAR 0 3
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PPUSH
50879: CALL_OW 69
50883: ST_TO_ADDR
// if not un then
50884: LD_VAR 0 6
50888: NOT
50889: IFFALSE 50893
// continue ;
50891: GO 50859
// nation := GetNation ( un [ 1 ] ) ;
50893: LD_ADDR_VAR 0 4
50897: PUSH
50898: LD_VAR 0 6
50902: PUSH
50903: LD_INT 1
50905: ARRAY
50906: PPUSH
50907: CALL_OW 248
50911: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
50912: LD_ADDR_EXP 87
50916: PUSH
50917: LD_EXP 87
50921: PPUSH
50922: LD_VAR 0 3
50926: PPUSH
50927: LD_VAR 0 3
50931: PPUSH
50932: LD_VAR 0 4
50936: PPUSH
50937: LD_INT 1
50939: PPUSH
50940: CALL 11245 0 3
50944: PPUSH
50945: CALL_OW 1
50949: ST_TO_ADDR
// end ;
50950: GO 50859
50952: POP
50953: POP
// end ;
50954: LD_VAR 0 1
50958: RET
// export function MC_InitSides ( ) ; var i ; begin
50959: LD_INT 0
50961: PPUSH
50962: PPUSH
// if not mc_bases then
50963: LD_EXP 60
50967: NOT
50968: IFFALSE 50972
// exit ;
50970: GO 51046
// for i = 1 to mc_bases do
50972: LD_ADDR_VAR 0 2
50976: PUSH
50977: DOUBLE
50978: LD_INT 1
50980: DEC
50981: ST_TO_ADDR
50982: LD_EXP 60
50986: PUSH
50987: FOR_TO
50988: IFFALSE 51044
// if mc_bases [ i ] then
50990: LD_EXP 60
50994: PUSH
50995: LD_VAR 0 2
50999: ARRAY
51000: IFFALSE 51042
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
51002: LD_ADDR_EXP 86
51006: PUSH
51007: LD_EXP 86
51011: PPUSH
51012: LD_VAR 0 2
51016: PPUSH
51017: LD_EXP 60
51021: PUSH
51022: LD_VAR 0 2
51026: ARRAY
51027: PUSH
51028: LD_INT 1
51030: ARRAY
51031: PPUSH
51032: CALL_OW 255
51036: PPUSH
51037: CALL_OW 1
51041: ST_TO_ADDR
51042: GO 50987
51044: POP
51045: POP
// end ;
51046: LD_VAR 0 1
51050: RET
// every 0 0$01 trigger skirmish do
51051: LD_EXP 58
51055: IFFALSE 51209
51057: GO 51059
51059: DISABLE
// begin enable ;
51060: ENABLE
// MC_CheckBuildings ( ) ;
51061: CALL 55707 0 0
// MC_CheckPeopleLife ( ) ;
51065: CALL 55832 0 0
// RaiseSailEvent ( 100 ) ;
51069: LD_INT 100
51071: PPUSH
51072: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
51076: LD_INT 103
51078: PPUSH
51079: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
51083: LD_INT 104
51085: PPUSH
51086: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
51090: LD_INT 105
51092: PPUSH
51093: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
51097: LD_INT 106
51099: PPUSH
51100: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
51104: LD_INT 107
51106: PPUSH
51107: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
51111: LD_INT 108
51113: PPUSH
51114: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
51118: LD_INT 109
51120: PPUSH
51121: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
51125: LD_INT 110
51127: PPUSH
51128: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
51132: LD_INT 111
51134: PPUSH
51135: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
51139: LD_INT 112
51141: PPUSH
51142: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
51146: LD_INT 113
51148: PPUSH
51149: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
51153: LD_INT 120
51155: PPUSH
51156: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
51160: LD_INT 121
51162: PPUSH
51163: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
51167: LD_INT 122
51169: PPUSH
51170: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
51174: LD_INT 123
51176: PPUSH
51177: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
51181: LD_INT 124
51183: PPUSH
51184: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
51188: LD_INT 125
51190: PPUSH
51191: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
51195: LD_INT 126
51197: PPUSH
51198: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
51202: LD_INT 200
51204: PPUSH
51205: CALL_OW 427
// end ;
51209: END
// on SailEvent ( event ) do begin if event < 100 then
51210: LD_VAR 0 1
51214: PUSH
51215: LD_INT 100
51217: LESS
51218: IFFALSE 51229
// CustomEvent ( event ) ;
51220: LD_VAR 0 1
51224: PPUSH
51225: CALL 5359 0 1
// if event = 100 then
51229: LD_VAR 0 1
51233: PUSH
51234: LD_INT 100
51236: EQUAL
51237: IFFALSE 51243
// MC_ClassManager ( ) ;
51239: CALL 51635 0 0
// if event = 101 then
51243: LD_VAR 0 1
51247: PUSH
51248: LD_INT 101
51250: EQUAL
51251: IFFALSE 51257
// MC_RepairBuildings ( ) ;
51253: CALL 56428 0 0
// if event = 102 then
51257: LD_VAR 0 1
51261: PUSH
51262: LD_INT 102
51264: EQUAL
51265: IFFALSE 51271
// MC_Heal ( ) ;
51267: CALL 57292 0 0
// if event = 103 then
51271: LD_VAR 0 1
51275: PUSH
51276: LD_INT 103
51278: EQUAL
51279: IFFALSE 51285
// MC_Build ( ) ;
51281: CALL 57714 0 0
// if event = 104 then
51285: LD_VAR 0 1
51289: PUSH
51290: LD_INT 104
51292: EQUAL
51293: IFFALSE 51299
// MC_TurretWeapon ( ) ;
51295: CALL 59327 0 0
// if event = 105 then
51299: LD_VAR 0 1
51303: PUSH
51304: LD_INT 105
51306: EQUAL
51307: IFFALSE 51313
// MC_BuildUpgrade ( ) ;
51309: CALL 58878 0 0
// if event = 106 then
51313: LD_VAR 0 1
51317: PUSH
51318: LD_INT 106
51320: EQUAL
51321: IFFALSE 51327
// MC_PlantMines ( ) ;
51323: CALL 59757 0 0
// if event = 107 then
51327: LD_VAR 0 1
51331: PUSH
51332: LD_INT 107
51334: EQUAL
51335: IFFALSE 51341
// MC_CollectCrates ( ) ;
51337: CALL 60555 0 0
// if event = 108 then
51341: LD_VAR 0 1
51345: PUSH
51346: LD_INT 108
51348: EQUAL
51349: IFFALSE 51355
// MC_LinkRemoteControl ( ) ;
51351: CALL 62331 0 0
// if event = 109 then
51355: LD_VAR 0 1
51359: PUSH
51360: LD_INT 109
51362: EQUAL
51363: IFFALSE 51369
// MC_ProduceVehicle ( ) ;
51365: CALL 62512 0 0
// if event = 110 then
51369: LD_VAR 0 1
51373: PUSH
51374: LD_INT 110
51376: EQUAL
51377: IFFALSE 51383
// MC_SendAttack ( ) ;
51379: CALL 62978 0 0
// if event = 111 then
51383: LD_VAR 0 1
51387: PUSH
51388: LD_INT 111
51390: EQUAL
51391: IFFALSE 51397
// MC_Defend ( ) ;
51393: CALL 63086 0 0
// if event = 112 then
51397: LD_VAR 0 1
51401: PUSH
51402: LD_INT 112
51404: EQUAL
51405: IFFALSE 51411
// MC_Research ( ) ;
51407: CALL 63691 0 0
// if event = 113 then
51411: LD_VAR 0 1
51415: PUSH
51416: LD_INT 113
51418: EQUAL
51419: IFFALSE 51425
// MC_MinesTrigger ( ) ;
51421: CALL 64805 0 0
// if event = 120 then
51425: LD_VAR 0 1
51429: PUSH
51430: LD_INT 120
51432: EQUAL
51433: IFFALSE 51439
// MC_RepairVehicle ( ) ;
51435: CALL 64904 0 0
// if event = 121 then
51439: LD_VAR 0 1
51443: PUSH
51444: LD_INT 121
51446: EQUAL
51447: IFFALSE 51453
// MC_TameApe ( ) ;
51449: CALL 65634 0 0
// if event = 122 then
51453: LD_VAR 0 1
51457: PUSH
51458: LD_INT 122
51460: EQUAL
51461: IFFALSE 51467
// MC_ChangeApeClass ( ) ;
51463: CALL 66463 0 0
// if event = 123 then
51467: LD_VAR 0 1
51471: PUSH
51472: LD_INT 123
51474: EQUAL
51475: IFFALSE 51481
// MC_Bazooka ( ) ;
51477: CALL 67113 0 0
// if event = 124 then
51481: LD_VAR 0 1
51485: PUSH
51486: LD_INT 124
51488: EQUAL
51489: IFFALSE 51495
// MC_TeleportExit ( ) ;
51491: CALL 67311 0 0
// if event = 125 then
51495: LD_VAR 0 1
51499: PUSH
51500: LD_INT 125
51502: EQUAL
51503: IFFALSE 51509
// MC_Deposits ( ) ;
51505: CALL 67958 0 0
// if event = 126 then
51509: LD_VAR 0 1
51513: PUSH
51514: LD_INT 126
51516: EQUAL
51517: IFFALSE 51523
// MC_RemoteDriver ( ) ;
51519: CALL 68583 0 0
// if event = 200 then
51523: LD_VAR 0 1
51527: PUSH
51528: LD_INT 200
51530: EQUAL
51531: IFFALSE 51537
// MC_Idle ( ) ;
51533: CALL 70532 0 0
// end ;
51537: PPOPN 1
51539: END
// export function MC_Reset ( base , tag ) ; var i ; begin
51540: LD_INT 0
51542: PPUSH
51543: PPUSH
// if not mc_bases [ base ] or not tag then
51544: LD_EXP 60
51548: PUSH
51549: LD_VAR 0 1
51553: ARRAY
51554: NOT
51555: PUSH
51556: LD_VAR 0 2
51560: NOT
51561: OR
51562: IFFALSE 51566
// exit ;
51564: GO 51630
// for i in mc_bases [ base ] union mc_ape [ base ] do
51566: LD_ADDR_VAR 0 4
51570: PUSH
51571: LD_EXP 60
51575: PUSH
51576: LD_VAR 0 1
51580: ARRAY
51581: PUSH
51582: LD_EXP 89
51586: PUSH
51587: LD_VAR 0 1
51591: ARRAY
51592: UNION
51593: PUSH
51594: FOR_IN
51595: IFFALSE 51628
// if GetTag ( i ) = tag then
51597: LD_VAR 0 4
51601: PPUSH
51602: CALL_OW 110
51606: PUSH
51607: LD_VAR 0 2
51611: EQUAL
51612: IFFALSE 51626
// SetTag ( i , 0 ) ;
51614: LD_VAR 0 4
51618: PPUSH
51619: LD_INT 0
51621: PPUSH
51622: CALL_OW 109
51626: GO 51594
51628: POP
51629: POP
// end ;
51630: LD_VAR 0 3
51634: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
51635: LD_INT 0
51637: PPUSH
51638: PPUSH
51639: PPUSH
51640: PPUSH
51641: PPUSH
51642: PPUSH
51643: PPUSH
51644: PPUSH
// if not mc_bases then
51645: LD_EXP 60
51649: NOT
51650: IFFALSE 51654
// exit ;
51652: GO 52112
// for i = 1 to mc_bases do
51654: LD_ADDR_VAR 0 2
51658: PUSH
51659: DOUBLE
51660: LD_INT 1
51662: DEC
51663: ST_TO_ADDR
51664: LD_EXP 60
51668: PUSH
51669: FOR_TO
51670: IFFALSE 52110
// begin tmp := MC_ClassCheckReq ( i ) ;
51672: LD_ADDR_VAR 0 4
51676: PUSH
51677: LD_VAR 0 2
51681: PPUSH
51682: CALL 52117 0 1
51686: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
51687: LD_ADDR_EXP 101
51691: PUSH
51692: LD_EXP 101
51696: PPUSH
51697: LD_VAR 0 2
51701: PPUSH
51702: LD_VAR 0 4
51706: PPUSH
51707: CALL_OW 1
51711: ST_TO_ADDR
// if not tmp then
51712: LD_VAR 0 4
51716: NOT
51717: IFFALSE 51721
// continue ;
51719: GO 51669
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
51721: LD_ADDR_VAR 0 6
51725: PUSH
51726: LD_EXP 60
51730: PUSH
51731: LD_VAR 0 2
51735: ARRAY
51736: PPUSH
51737: LD_INT 2
51739: PUSH
51740: LD_INT 30
51742: PUSH
51743: LD_INT 4
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 30
51752: PUSH
51753: LD_INT 5
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: LIST
51764: PPUSH
51765: CALL_OW 72
51769: PUSH
51770: LD_EXP 60
51774: PUSH
51775: LD_VAR 0 2
51779: ARRAY
51780: PPUSH
51781: LD_INT 2
51783: PUSH
51784: LD_INT 30
51786: PUSH
51787: LD_INT 0
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 30
51796: PUSH
51797: LD_INT 1
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: LIST
51808: PPUSH
51809: CALL_OW 72
51813: PUSH
51814: LD_EXP 60
51818: PUSH
51819: LD_VAR 0 2
51823: ARRAY
51824: PPUSH
51825: LD_INT 30
51827: PUSH
51828: LD_INT 3
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PPUSH
51835: CALL_OW 72
51839: PUSH
51840: LD_EXP 60
51844: PUSH
51845: LD_VAR 0 2
51849: ARRAY
51850: PPUSH
51851: LD_INT 2
51853: PUSH
51854: LD_INT 30
51856: PUSH
51857: LD_INT 6
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 30
51866: PUSH
51867: LD_INT 7
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 30
51876: PUSH
51877: LD_INT 8
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: PPUSH
51890: CALL_OW 72
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: ST_TO_ADDR
// for j = 1 to 4 do
51901: LD_ADDR_VAR 0 3
51905: PUSH
51906: DOUBLE
51907: LD_INT 1
51909: DEC
51910: ST_TO_ADDR
51911: LD_INT 4
51913: PUSH
51914: FOR_TO
51915: IFFALSE 52106
// begin if not tmp [ j ] then
51917: LD_VAR 0 4
51921: PUSH
51922: LD_VAR 0 3
51926: ARRAY
51927: NOT
51928: IFFALSE 51932
// continue ;
51930: GO 51914
// for p in tmp [ j ] do
51932: LD_ADDR_VAR 0 5
51936: PUSH
51937: LD_VAR 0 4
51941: PUSH
51942: LD_VAR 0 3
51946: ARRAY
51947: PUSH
51948: FOR_IN
51949: IFFALSE 52102
// begin if not b [ j ] then
51951: LD_VAR 0 6
51955: PUSH
51956: LD_VAR 0 3
51960: ARRAY
51961: NOT
51962: IFFALSE 51966
// break ;
51964: GO 52102
// e := 0 ;
51966: LD_ADDR_VAR 0 7
51970: PUSH
51971: LD_INT 0
51973: ST_TO_ADDR
// for k in b [ j ] do
51974: LD_ADDR_VAR 0 8
51978: PUSH
51979: LD_VAR 0 6
51983: PUSH
51984: LD_VAR 0 3
51988: ARRAY
51989: PUSH
51990: FOR_IN
51991: IFFALSE 52018
// if IsNotFull ( k ) then
51993: LD_VAR 0 8
51997: PPUSH
51998: CALL 13394 0 1
52002: IFFALSE 52016
// begin e := k ;
52004: LD_ADDR_VAR 0 7
52008: PUSH
52009: LD_VAR 0 8
52013: ST_TO_ADDR
// break ;
52014: GO 52018
// end ;
52016: GO 51990
52018: POP
52019: POP
// if e and not UnitGoingToBuilding ( p , e ) then
52020: LD_VAR 0 7
52024: PUSH
52025: LD_VAR 0 5
52029: PPUSH
52030: LD_VAR 0 7
52034: PPUSH
52035: CALL 45814 0 2
52039: NOT
52040: AND
52041: IFFALSE 52100
// begin if IsInUnit ( p ) then
52043: LD_VAR 0 5
52047: PPUSH
52048: CALL_OW 310
52052: IFFALSE 52063
// ComExitBuilding ( p ) ;
52054: LD_VAR 0 5
52058: PPUSH
52059: CALL_OW 122
// ComEnterUnit ( p , e ) ;
52063: LD_VAR 0 5
52067: PPUSH
52068: LD_VAR 0 7
52072: PPUSH
52073: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
52077: LD_VAR 0 5
52081: PPUSH
52082: LD_VAR 0 3
52086: PPUSH
52087: CALL_OW 183
// AddComExitBuilding ( p ) ;
52091: LD_VAR 0 5
52095: PPUSH
52096: CALL_OW 182
// end ; end ;
52100: GO 51948
52102: POP
52103: POP
// end ;
52104: GO 51914
52106: POP
52107: POP
// end ;
52108: GO 51669
52110: POP
52111: POP
// end ;
52112: LD_VAR 0 1
52116: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
52117: LD_INT 0
52119: PPUSH
52120: PPUSH
52121: PPUSH
52122: PPUSH
52123: PPUSH
52124: PPUSH
52125: PPUSH
52126: PPUSH
52127: PPUSH
52128: PPUSH
52129: PPUSH
52130: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
52131: LD_VAR 0 1
52135: NOT
52136: PUSH
52137: LD_EXP 60
52141: PUSH
52142: LD_VAR 0 1
52146: ARRAY
52147: NOT
52148: OR
52149: PUSH
52150: LD_EXP 60
52154: PUSH
52155: LD_VAR 0 1
52159: ARRAY
52160: PPUSH
52161: LD_INT 2
52163: PUSH
52164: LD_INT 30
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 30
52176: PUSH
52177: LD_INT 1
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: LIST
52188: PPUSH
52189: CALL_OW 72
52193: NOT
52194: OR
52195: IFFALSE 52199
// exit ;
52197: GO 55702
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
52199: LD_ADDR_VAR 0 4
52203: PUSH
52204: LD_EXP 60
52208: PUSH
52209: LD_VAR 0 1
52213: ARRAY
52214: PPUSH
52215: LD_INT 2
52217: PUSH
52218: LD_INT 25
52220: PUSH
52221: LD_INT 1
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 25
52230: PUSH
52231: LD_INT 2
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 25
52240: PUSH
52241: LD_INT 3
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 25
52250: PUSH
52251: LD_INT 4
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 25
52260: PUSH
52261: LD_INT 5
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 25
52270: PUSH
52271: LD_INT 8
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 25
52280: PUSH
52281: LD_INT 9
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: PPUSH
52298: CALL_OW 72
52302: ST_TO_ADDR
// if not tmp then
52303: LD_VAR 0 4
52307: NOT
52308: IFFALSE 52312
// exit ;
52310: GO 55702
// for i in tmp do
52312: LD_ADDR_VAR 0 3
52316: PUSH
52317: LD_VAR 0 4
52321: PUSH
52322: FOR_IN
52323: IFFALSE 52354
// if GetTag ( i ) then
52325: LD_VAR 0 3
52329: PPUSH
52330: CALL_OW 110
52334: IFFALSE 52352
// tmp := tmp diff i ;
52336: LD_ADDR_VAR 0 4
52340: PUSH
52341: LD_VAR 0 4
52345: PUSH
52346: LD_VAR 0 3
52350: DIFF
52351: ST_TO_ADDR
52352: GO 52322
52354: POP
52355: POP
// if not tmp then
52356: LD_VAR 0 4
52360: NOT
52361: IFFALSE 52365
// exit ;
52363: GO 55702
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
52365: LD_ADDR_VAR 0 5
52369: PUSH
52370: LD_EXP 60
52374: PUSH
52375: LD_VAR 0 1
52379: ARRAY
52380: PPUSH
52381: LD_INT 2
52383: PUSH
52384: LD_INT 25
52386: PUSH
52387: LD_INT 1
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 25
52396: PUSH
52397: LD_INT 5
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 25
52406: PUSH
52407: LD_INT 8
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 25
52416: PUSH
52417: LD_INT 9
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: PPUSH
52431: CALL_OW 72
52435: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
52436: LD_ADDR_VAR 0 6
52440: PUSH
52441: LD_EXP 60
52445: PUSH
52446: LD_VAR 0 1
52450: ARRAY
52451: PPUSH
52452: LD_INT 25
52454: PUSH
52455: LD_INT 2
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PPUSH
52462: CALL_OW 72
52466: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
52467: LD_ADDR_VAR 0 7
52471: PUSH
52472: LD_EXP 60
52476: PUSH
52477: LD_VAR 0 1
52481: ARRAY
52482: PPUSH
52483: LD_INT 25
52485: PUSH
52486: LD_INT 3
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PPUSH
52493: CALL_OW 72
52497: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
52498: LD_ADDR_VAR 0 8
52502: PUSH
52503: LD_EXP 60
52507: PUSH
52508: LD_VAR 0 1
52512: ARRAY
52513: PPUSH
52514: LD_INT 25
52516: PUSH
52517: LD_INT 4
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 24
52526: PUSH
52527: LD_INT 251
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PPUSH
52538: CALL_OW 72
52542: ST_TO_ADDR
// if mc_scan [ base ] then
52543: LD_EXP 83
52547: PUSH
52548: LD_VAR 0 1
52552: ARRAY
52553: IFFALSE 53014
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
52555: LD_ADDR_EXP 102
52559: PUSH
52560: LD_EXP 102
52564: PPUSH
52565: LD_VAR 0 1
52569: PPUSH
52570: LD_INT 4
52572: PPUSH
52573: CALL_OW 1
52577: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
52578: LD_ADDR_VAR 0 12
52582: PUSH
52583: LD_EXP 60
52587: PUSH
52588: LD_VAR 0 1
52592: ARRAY
52593: PPUSH
52594: LD_INT 2
52596: PUSH
52597: LD_INT 30
52599: PUSH
52600: LD_INT 4
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 30
52609: PUSH
52610: LD_INT 5
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: LIST
52621: PPUSH
52622: CALL_OW 72
52626: ST_TO_ADDR
// if not b then
52627: LD_VAR 0 12
52631: NOT
52632: IFFALSE 52636
// exit ;
52634: GO 55702
// p := [ ] ;
52636: LD_ADDR_VAR 0 11
52640: PUSH
52641: EMPTY
52642: ST_TO_ADDR
// if sci >= 2 then
52643: LD_VAR 0 8
52647: PUSH
52648: LD_INT 2
52650: GREATEREQUAL
52651: IFFALSE 52682
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
52653: LD_ADDR_VAR 0 8
52657: PUSH
52658: LD_VAR 0 8
52662: PUSH
52663: LD_INT 1
52665: ARRAY
52666: PUSH
52667: LD_VAR 0 8
52671: PUSH
52672: LD_INT 2
52674: ARRAY
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: ST_TO_ADDR
52680: GO 52743
// if sci = 1 then
52682: LD_VAR 0 8
52686: PUSH
52687: LD_INT 1
52689: EQUAL
52690: IFFALSE 52711
// sci := [ sci [ 1 ] ] else
52692: LD_ADDR_VAR 0 8
52696: PUSH
52697: LD_VAR 0 8
52701: PUSH
52702: LD_INT 1
52704: ARRAY
52705: PUSH
52706: EMPTY
52707: LIST
52708: ST_TO_ADDR
52709: GO 52743
// if sci = 0 then
52711: LD_VAR 0 8
52715: PUSH
52716: LD_INT 0
52718: EQUAL
52719: IFFALSE 52743
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
52721: LD_ADDR_VAR 0 11
52725: PUSH
52726: LD_VAR 0 4
52730: PPUSH
52731: LD_INT 4
52733: PPUSH
52734: CALL 45677 0 2
52738: PUSH
52739: LD_INT 1
52741: ARRAY
52742: ST_TO_ADDR
// if eng > 4 then
52743: LD_VAR 0 6
52747: PUSH
52748: LD_INT 4
52750: GREATER
52751: IFFALSE 52797
// for i = eng downto 4 do
52753: LD_ADDR_VAR 0 3
52757: PUSH
52758: DOUBLE
52759: LD_VAR 0 6
52763: INC
52764: ST_TO_ADDR
52765: LD_INT 4
52767: PUSH
52768: FOR_DOWNTO
52769: IFFALSE 52795
// eng := eng diff eng [ i ] ;
52771: LD_ADDR_VAR 0 6
52775: PUSH
52776: LD_VAR 0 6
52780: PUSH
52781: LD_VAR 0 6
52785: PUSH
52786: LD_VAR 0 3
52790: ARRAY
52791: DIFF
52792: ST_TO_ADDR
52793: GO 52768
52795: POP
52796: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
52797: LD_ADDR_VAR 0 4
52801: PUSH
52802: LD_VAR 0 4
52806: PUSH
52807: LD_VAR 0 5
52811: PUSH
52812: LD_VAR 0 6
52816: UNION
52817: PUSH
52818: LD_VAR 0 7
52822: UNION
52823: PUSH
52824: LD_VAR 0 8
52828: UNION
52829: DIFF
52830: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
52831: LD_ADDR_VAR 0 13
52835: PUSH
52836: LD_EXP 60
52840: PUSH
52841: LD_VAR 0 1
52845: ARRAY
52846: PPUSH
52847: LD_INT 2
52849: PUSH
52850: LD_INT 30
52852: PUSH
52853: LD_INT 32
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 30
52862: PUSH
52863: LD_INT 31
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: LIST
52874: PPUSH
52875: CALL_OW 72
52879: PUSH
52880: LD_EXP 60
52884: PUSH
52885: LD_VAR 0 1
52889: ARRAY
52890: PPUSH
52891: LD_INT 2
52893: PUSH
52894: LD_INT 30
52896: PUSH
52897: LD_INT 4
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 30
52906: PUSH
52907: LD_INT 5
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: LIST
52918: PPUSH
52919: CALL_OW 72
52923: PUSH
52924: LD_INT 6
52926: MUL
52927: PLUS
52928: ST_TO_ADDR
// if bcount < tmp then
52929: LD_VAR 0 13
52933: PUSH
52934: LD_VAR 0 4
52938: LESS
52939: IFFALSE 52985
// for i = tmp downto bcount do
52941: LD_ADDR_VAR 0 3
52945: PUSH
52946: DOUBLE
52947: LD_VAR 0 4
52951: INC
52952: ST_TO_ADDR
52953: LD_VAR 0 13
52957: PUSH
52958: FOR_DOWNTO
52959: IFFALSE 52983
// tmp := Delete ( tmp , tmp ) ;
52961: LD_ADDR_VAR 0 4
52965: PUSH
52966: LD_VAR 0 4
52970: PPUSH
52971: LD_VAR 0 4
52975: PPUSH
52976: CALL_OW 3
52980: ST_TO_ADDR
52981: GO 52958
52983: POP
52984: POP
// result := [ tmp , 0 , 0 , p ] ;
52985: LD_ADDR_VAR 0 2
52989: PUSH
52990: LD_VAR 0 4
52994: PUSH
52995: LD_INT 0
52997: PUSH
52998: LD_INT 0
53000: PUSH
53001: LD_VAR 0 11
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: ST_TO_ADDR
// exit ;
53012: GO 55702
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
53014: LD_EXP 60
53018: PUSH
53019: LD_VAR 0 1
53023: ARRAY
53024: PPUSH
53025: LD_INT 2
53027: PUSH
53028: LD_INT 30
53030: PUSH
53031: LD_INT 6
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 30
53040: PUSH
53041: LD_INT 7
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 30
53050: PUSH
53051: LD_INT 8
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: PPUSH
53064: CALL_OW 72
53068: NOT
53069: PUSH
53070: LD_EXP 60
53074: PUSH
53075: LD_VAR 0 1
53079: ARRAY
53080: PPUSH
53081: LD_INT 30
53083: PUSH
53084: LD_INT 3
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PPUSH
53091: CALL_OW 72
53095: NOT
53096: AND
53097: IFFALSE 53169
// begin if eng = tmp then
53099: LD_VAR 0 6
53103: PUSH
53104: LD_VAR 0 4
53108: EQUAL
53109: IFFALSE 53113
// exit ;
53111: GO 55702
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
53113: LD_ADDR_EXP 102
53117: PUSH
53118: LD_EXP 102
53122: PPUSH
53123: LD_VAR 0 1
53127: PPUSH
53128: LD_INT 1
53130: PPUSH
53131: CALL_OW 1
53135: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
53136: LD_ADDR_VAR 0 2
53140: PUSH
53141: LD_INT 0
53143: PUSH
53144: LD_VAR 0 4
53148: PUSH
53149: LD_VAR 0 6
53153: DIFF
53154: PUSH
53155: LD_INT 0
53157: PUSH
53158: LD_INT 0
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: ST_TO_ADDR
// exit ;
53167: GO 55702
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
53169: LD_EXP 87
53173: PUSH
53174: LD_EXP 86
53178: PUSH
53179: LD_VAR 0 1
53183: ARRAY
53184: ARRAY
53185: PUSH
53186: LD_EXP 60
53190: PUSH
53191: LD_VAR 0 1
53195: ARRAY
53196: PPUSH
53197: LD_INT 2
53199: PUSH
53200: LD_INT 30
53202: PUSH
53203: LD_INT 6
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 30
53212: PUSH
53213: LD_INT 7
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 30
53222: PUSH
53223: LD_INT 8
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: PPUSH
53236: CALL_OW 72
53240: AND
53241: PUSH
53242: LD_EXP 60
53246: PUSH
53247: LD_VAR 0 1
53251: ARRAY
53252: PPUSH
53253: LD_INT 30
53255: PUSH
53256: LD_INT 3
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PPUSH
53263: CALL_OW 72
53267: NOT
53268: AND
53269: IFFALSE 53483
// begin if sci >= 6 then
53271: LD_VAR 0 8
53275: PUSH
53276: LD_INT 6
53278: GREATEREQUAL
53279: IFFALSE 53283
// exit ;
53281: GO 55702
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
53283: LD_ADDR_EXP 102
53287: PUSH
53288: LD_EXP 102
53292: PPUSH
53293: LD_VAR 0 1
53297: PPUSH
53298: LD_INT 2
53300: PPUSH
53301: CALL_OW 1
53305: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
53306: LD_ADDR_VAR 0 9
53310: PUSH
53311: LD_VAR 0 4
53315: PUSH
53316: LD_VAR 0 8
53320: DIFF
53321: PPUSH
53322: LD_INT 4
53324: PPUSH
53325: CALL 45677 0 2
53329: ST_TO_ADDR
// p := [ ] ;
53330: LD_ADDR_VAR 0 11
53334: PUSH
53335: EMPTY
53336: ST_TO_ADDR
// if sci < 6 and sort > 6 then
53337: LD_VAR 0 8
53341: PUSH
53342: LD_INT 6
53344: LESS
53345: PUSH
53346: LD_VAR 0 9
53350: PUSH
53351: LD_INT 6
53353: GREATER
53354: AND
53355: IFFALSE 53436
// begin for i = 1 to 6 - sci do
53357: LD_ADDR_VAR 0 3
53361: PUSH
53362: DOUBLE
53363: LD_INT 1
53365: DEC
53366: ST_TO_ADDR
53367: LD_INT 6
53369: PUSH
53370: LD_VAR 0 8
53374: MINUS
53375: PUSH
53376: FOR_TO
53377: IFFALSE 53432
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
53379: LD_ADDR_VAR 0 11
53383: PUSH
53384: LD_VAR 0 11
53388: PPUSH
53389: LD_VAR 0 11
53393: PUSH
53394: LD_INT 1
53396: PLUS
53397: PPUSH
53398: LD_VAR 0 9
53402: PUSH
53403: LD_INT 1
53405: ARRAY
53406: PPUSH
53407: CALL_OW 2
53411: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
53412: LD_ADDR_VAR 0 9
53416: PUSH
53417: LD_VAR 0 9
53421: PPUSH
53422: LD_INT 1
53424: PPUSH
53425: CALL_OW 3
53429: ST_TO_ADDR
// end ;
53430: GO 53376
53432: POP
53433: POP
// end else
53434: GO 53456
// if sort then
53436: LD_VAR 0 9
53440: IFFALSE 53456
// p := sort [ 1 ] ;
53442: LD_ADDR_VAR 0 11
53446: PUSH
53447: LD_VAR 0 9
53451: PUSH
53452: LD_INT 1
53454: ARRAY
53455: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
53456: LD_ADDR_VAR 0 2
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: LD_INT 0
53469: PUSH
53470: LD_VAR 0 11
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: ST_TO_ADDR
// exit ;
53481: GO 55702
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
53483: LD_EXP 87
53487: PUSH
53488: LD_EXP 86
53492: PUSH
53493: LD_VAR 0 1
53497: ARRAY
53498: ARRAY
53499: PUSH
53500: LD_EXP 60
53504: PUSH
53505: LD_VAR 0 1
53509: ARRAY
53510: PPUSH
53511: LD_INT 2
53513: PUSH
53514: LD_INT 30
53516: PUSH
53517: LD_INT 6
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 30
53526: PUSH
53527: LD_INT 7
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 30
53536: PUSH
53537: LD_INT 8
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: PPUSH
53550: CALL_OW 72
53554: AND
53555: PUSH
53556: LD_EXP 60
53560: PUSH
53561: LD_VAR 0 1
53565: ARRAY
53566: PPUSH
53567: LD_INT 30
53569: PUSH
53570: LD_INT 3
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PPUSH
53577: CALL_OW 72
53581: AND
53582: IFFALSE 54316
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
53584: LD_ADDR_EXP 102
53588: PUSH
53589: LD_EXP 102
53593: PPUSH
53594: LD_VAR 0 1
53598: PPUSH
53599: LD_INT 3
53601: PPUSH
53602: CALL_OW 1
53606: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
53607: LD_ADDR_VAR 0 2
53611: PUSH
53612: LD_INT 0
53614: PUSH
53615: LD_INT 0
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: LD_INT 0
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: ST_TO_ADDR
// if not eng then
53630: LD_VAR 0 6
53634: NOT
53635: IFFALSE 53698
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
53637: LD_ADDR_VAR 0 11
53641: PUSH
53642: LD_VAR 0 4
53646: PPUSH
53647: LD_INT 2
53649: PPUSH
53650: CALL 45677 0 2
53654: PUSH
53655: LD_INT 1
53657: ARRAY
53658: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
53659: LD_ADDR_VAR 0 2
53663: PUSH
53664: LD_VAR 0 2
53668: PPUSH
53669: LD_INT 2
53671: PPUSH
53672: LD_VAR 0 11
53676: PPUSH
53677: CALL_OW 1
53681: ST_TO_ADDR
// tmp := tmp diff p ;
53682: LD_ADDR_VAR 0 4
53686: PUSH
53687: LD_VAR 0 4
53691: PUSH
53692: LD_VAR 0 11
53696: DIFF
53697: ST_TO_ADDR
// end ; if tmp and sci < 6 then
53698: LD_VAR 0 4
53702: PUSH
53703: LD_VAR 0 8
53707: PUSH
53708: LD_INT 6
53710: LESS
53711: AND
53712: IFFALSE 53900
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
53714: LD_ADDR_VAR 0 9
53718: PUSH
53719: LD_VAR 0 4
53723: PUSH
53724: LD_VAR 0 8
53728: PUSH
53729: LD_VAR 0 7
53733: UNION
53734: DIFF
53735: PPUSH
53736: LD_INT 4
53738: PPUSH
53739: CALL 45677 0 2
53743: ST_TO_ADDR
// p := [ ] ;
53744: LD_ADDR_VAR 0 11
53748: PUSH
53749: EMPTY
53750: ST_TO_ADDR
// if sort then
53751: LD_VAR 0 9
53755: IFFALSE 53871
// for i = 1 to 6 - sci do
53757: LD_ADDR_VAR 0 3
53761: PUSH
53762: DOUBLE
53763: LD_INT 1
53765: DEC
53766: ST_TO_ADDR
53767: LD_INT 6
53769: PUSH
53770: LD_VAR 0 8
53774: MINUS
53775: PUSH
53776: FOR_TO
53777: IFFALSE 53869
// begin if i = sort then
53779: LD_VAR 0 3
53783: PUSH
53784: LD_VAR 0 9
53788: EQUAL
53789: IFFALSE 53793
// break ;
53791: GO 53869
// if GetClass ( i ) = 4 then
53793: LD_VAR 0 3
53797: PPUSH
53798: CALL_OW 257
53802: PUSH
53803: LD_INT 4
53805: EQUAL
53806: IFFALSE 53810
// continue ;
53808: GO 53776
// p := Insert ( p , p + 1 , sort [ i ] ) ;
53810: LD_ADDR_VAR 0 11
53814: PUSH
53815: LD_VAR 0 11
53819: PPUSH
53820: LD_VAR 0 11
53824: PUSH
53825: LD_INT 1
53827: PLUS
53828: PPUSH
53829: LD_VAR 0 9
53833: PUSH
53834: LD_VAR 0 3
53838: ARRAY
53839: PPUSH
53840: CALL_OW 2
53844: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
53845: LD_ADDR_VAR 0 4
53849: PUSH
53850: LD_VAR 0 4
53854: PUSH
53855: LD_VAR 0 9
53859: PUSH
53860: LD_VAR 0 3
53864: ARRAY
53865: DIFF
53866: ST_TO_ADDR
// end ;
53867: GO 53776
53869: POP
53870: POP
// if p then
53871: LD_VAR 0 11
53875: IFFALSE 53900
// result := Replace ( result , 4 , p ) ;
53877: LD_ADDR_VAR 0 2
53881: PUSH
53882: LD_VAR 0 2
53886: PPUSH
53887: LD_INT 4
53889: PPUSH
53890: LD_VAR 0 11
53894: PPUSH
53895: CALL_OW 1
53899: ST_TO_ADDR
// end ; if tmp and mech < 6 then
53900: LD_VAR 0 4
53904: PUSH
53905: LD_VAR 0 7
53909: PUSH
53910: LD_INT 6
53912: LESS
53913: AND
53914: IFFALSE 54102
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
53916: LD_ADDR_VAR 0 9
53920: PUSH
53921: LD_VAR 0 4
53925: PUSH
53926: LD_VAR 0 8
53930: PUSH
53931: LD_VAR 0 7
53935: UNION
53936: DIFF
53937: PPUSH
53938: LD_INT 3
53940: PPUSH
53941: CALL 45677 0 2
53945: ST_TO_ADDR
// p := [ ] ;
53946: LD_ADDR_VAR 0 11
53950: PUSH
53951: EMPTY
53952: ST_TO_ADDR
// if sort then
53953: LD_VAR 0 9
53957: IFFALSE 54073
// for i = 1 to 6 - mech do
53959: LD_ADDR_VAR 0 3
53963: PUSH
53964: DOUBLE
53965: LD_INT 1
53967: DEC
53968: ST_TO_ADDR
53969: LD_INT 6
53971: PUSH
53972: LD_VAR 0 7
53976: MINUS
53977: PUSH
53978: FOR_TO
53979: IFFALSE 54071
// begin if i = sort then
53981: LD_VAR 0 3
53985: PUSH
53986: LD_VAR 0 9
53990: EQUAL
53991: IFFALSE 53995
// break ;
53993: GO 54071
// if GetClass ( i ) = 3 then
53995: LD_VAR 0 3
53999: PPUSH
54000: CALL_OW 257
54004: PUSH
54005: LD_INT 3
54007: EQUAL
54008: IFFALSE 54012
// continue ;
54010: GO 53978
// p := Insert ( p , p + 1 , sort [ i ] ) ;
54012: LD_ADDR_VAR 0 11
54016: PUSH
54017: LD_VAR 0 11
54021: PPUSH
54022: LD_VAR 0 11
54026: PUSH
54027: LD_INT 1
54029: PLUS
54030: PPUSH
54031: LD_VAR 0 9
54035: PUSH
54036: LD_VAR 0 3
54040: ARRAY
54041: PPUSH
54042: CALL_OW 2
54046: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
54047: LD_ADDR_VAR 0 4
54051: PUSH
54052: LD_VAR 0 4
54056: PUSH
54057: LD_VAR 0 9
54061: PUSH
54062: LD_VAR 0 3
54066: ARRAY
54067: DIFF
54068: ST_TO_ADDR
// end ;
54069: GO 53978
54071: POP
54072: POP
// if p then
54073: LD_VAR 0 11
54077: IFFALSE 54102
// result := Replace ( result , 3 , p ) ;
54079: LD_ADDR_VAR 0 2
54083: PUSH
54084: LD_VAR 0 2
54088: PPUSH
54089: LD_INT 3
54091: PPUSH
54092: LD_VAR 0 11
54096: PPUSH
54097: CALL_OW 1
54101: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
54102: LD_VAR 0 4
54106: PUSH
54107: LD_INT 6
54109: GREATER
54110: PUSH
54111: LD_VAR 0 6
54115: PUSH
54116: LD_INT 6
54118: LESS
54119: AND
54120: IFFALSE 54314
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
54122: LD_ADDR_VAR 0 9
54126: PUSH
54127: LD_VAR 0 4
54131: PUSH
54132: LD_VAR 0 8
54136: PUSH
54137: LD_VAR 0 7
54141: UNION
54142: PUSH
54143: LD_VAR 0 6
54147: UNION
54148: DIFF
54149: PPUSH
54150: LD_INT 2
54152: PPUSH
54153: CALL 45677 0 2
54157: ST_TO_ADDR
// p := [ ] ;
54158: LD_ADDR_VAR 0 11
54162: PUSH
54163: EMPTY
54164: ST_TO_ADDR
// if sort then
54165: LD_VAR 0 9
54169: IFFALSE 54285
// for i = 1 to 6 - eng do
54171: LD_ADDR_VAR 0 3
54175: PUSH
54176: DOUBLE
54177: LD_INT 1
54179: DEC
54180: ST_TO_ADDR
54181: LD_INT 6
54183: PUSH
54184: LD_VAR 0 6
54188: MINUS
54189: PUSH
54190: FOR_TO
54191: IFFALSE 54283
// begin if i = sort then
54193: LD_VAR 0 3
54197: PUSH
54198: LD_VAR 0 9
54202: EQUAL
54203: IFFALSE 54207
// break ;
54205: GO 54283
// if GetClass ( i ) = 2 then
54207: LD_VAR 0 3
54211: PPUSH
54212: CALL_OW 257
54216: PUSH
54217: LD_INT 2
54219: EQUAL
54220: IFFALSE 54224
// continue ;
54222: GO 54190
// p := Insert ( p , p + 1 , sort [ i ] ) ;
54224: LD_ADDR_VAR 0 11
54228: PUSH
54229: LD_VAR 0 11
54233: PPUSH
54234: LD_VAR 0 11
54238: PUSH
54239: LD_INT 1
54241: PLUS
54242: PPUSH
54243: LD_VAR 0 9
54247: PUSH
54248: LD_VAR 0 3
54252: ARRAY
54253: PPUSH
54254: CALL_OW 2
54258: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
54259: LD_ADDR_VAR 0 4
54263: PUSH
54264: LD_VAR 0 4
54268: PUSH
54269: LD_VAR 0 9
54273: PUSH
54274: LD_VAR 0 3
54278: ARRAY
54279: DIFF
54280: ST_TO_ADDR
// end ;
54281: GO 54190
54283: POP
54284: POP
// if p then
54285: LD_VAR 0 11
54289: IFFALSE 54314
// result := Replace ( result , 2 , p ) ;
54291: LD_ADDR_VAR 0 2
54295: PUSH
54296: LD_VAR 0 2
54300: PPUSH
54301: LD_INT 2
54303: PPUSH
54304: LD_VAR 0 11
54308: PPUSH
54309: CALL_OW 1
54313: ST_TO_ADDR
// end ; exit ;
54314: GO 55702
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
54316: LD_EXP 87
54320: PUSH
54321: LD_EXP 86
54325: PUSH
54326: LD_VAR 0 1
54330: ARRAY
54331: ARRAY
54332: NOT
54333: PUSH
54334: LD_EXP 60
54338: PUSH
54339: LD_VAR 0 1
54343: ARRAY
54344: PPUSH
54345: LD_INT 30
54347: PUSH
54348: LD_INT 3
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PPUSH
54355: CALL_OW 72
54359: AND
54360: PUSH
54361: LD_EXP 65
54365: PUSH
54366: LD_VAR 0 1
54370: ARRAY
54371: AND
54372: IFFALSE 54980
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
54374: LD_ADDR_EXP 102
54378: PUSH
54379: LD_EXP 102
54383: PPUSH
54384: LD_VAR 0 1
54388: PPUSH
54389: LD_INT 5
54391: PPUSH
54392: CALL_OW 1
54396: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
54397: LD_ADDR_VAR 0 2
54401: PUSH
54402: LD_INT 0
54404: PUSH
54405: LD_INT 0
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: LD_INT 0
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: ST_TO_ADDR
// if sci > 1 then
54420: LD_VAR 0 8
54424: PUSH
54425: LD_INT 1
54427: GREATER
54428: IFFALSE 54456
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
54430: LD_ADDR_VAR 0 4
54434: PUSH
54435: LD_VAR 0 4
54439: PUSH
54440: LD_VAR 0 8
54444: PUSH
54445: LD_VAR 0 8
54449: PUSH
54450: LD_INT 1
54452: ARRAY
54453: DIFF
54454: DIFF
54455: ST_TO_ADDR
// if tmp and not sci then
54456: LD_VAR 0 4
54460: PUSH
54461: LD_VAR 0 8
54465: NOT
54466: AND
54467: IFFALSE 54536
// begin sort := SortBySkill ( tmp , 4 ) ;
54469: LD_ADDR_VAR 0 9
54473: PUSH
54474: LD_VAR 0 4
54478: PPUSH
54479: LD_INT 4
54481: PPUSH
54482: CALL 45677 0 2
54486: ST_TO_ADDR
// if sort then
54487: LD_VAR 0 9
54491: IFFALSE 54507
// p := sort [ 1 ] ;
54493: LD_ADDR_VAR 0 11
54497: PUSH
54498: LD_VAR 0 9
54502: PUSH
54503: LD_INT 1
54505: ARRAY
54506: ST_TO_ADDR
// if p then
54507: LD_VAR 0 11
54511: IFFALSE 54536
// result := Replace ( result , 4 , p ) ;
54513: LD_ADDR_VAR 0 2
54517: PUSH
54518: LD_VAR 0 2
54522: PPUSH
54523: LD_INT 4
54525: PPUSH
54526: LD_VAR 0 11
54530: PPUSH
54531: CALL_OW 1
54535: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
54536: LD_ADDR_VAR 0 4
54540: PUSH
54541: LD_VAR 0 4
54545: PUSH
54546: LD_VAR 0 7
54550: DIFF
54551: ST_TO_ADDR
// if tmp and mech < 6 then
54552: LD_VAR 0 4
54556: PUSH
54557: LD_VAR 0 7
54561: PUSH
54562: LD_INT 6
54564: LESS
54565: AND
54566: IFFALSE 54754
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
54568: LD_ADDR_VAR 0 9
54572: PUSH
54573: LD_VAR 0 4
54577: PUSH
54578: LD_VAR 0 8
54582: PUSH
54583: LD_VAR 0 7
54587: UNION
54588: DIFF
54589: PPUSH
54590: LD_INT 3
54592: PPUSH
54593: CALL 45677 0 2
54597: ST_TO_ADDR
// p := [ ] ;
54598: LD_ADDR_VAR 0 11
54602: PUSH
54603: EMPTY
54604: ST_TO_ADDR
// if sort then
54605: LD_VAR 0 9
54609: IFFALSE 54725
// for i = 1 to 6 - mech do
54611: LD_ADDR_VAR 0 3
54615: PUSH
54616: DOUBLE
54617: LD_INT 1
54619: DEC
54620: ST_TO_ADDR
54621: LD_INT 6
54623: PUSH
54624: LD_VAR 0 7
54628: MINUS
54629: PUSH
54630: FOR_TO
54631: IFFALSE 54723
// begin if i = sort then
54633: LD_VAR 0 3
54637: PUSH
54638: LD_VAR 0 9
54642: EQUAL
54643: IFFALSE 54647
// break ;
54645: GO 54723
// if GetClass ( i ) = 3 then
54647: LD_VAR 0 3
54651: PPUSH
54652: CALL_OW 257
54656: PUSH
54657: LD_INT 3
54659: EQUAL
54660: IFFALSE 54664
// continue ;
54662: GO 54630
// p := Insert ( p , p + 1 , sort [ i ] ) ;
54664: LD_ADDR_VAR 0 11
54668: PUSH
54669: LD_VAR 0 11
54673: PPUSH
54674: LD_VAR 0 11
54678: PUSH
54679: LD_INT 1
54681: PLUS
54682: PPUSH
54683: LD_VAR 0 9
54687: PUSH
54688: LD_VAR 0 3
54692: ARRAY
54693: PPUSH
54694: CALL_OW 2
54698: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
54699: LD_ADDR_VAR 0 4
54703: PUSH
54704: LD_VAR 0 4
54708: PUSH
54709: LD_VAR 0 9
54713: PUSH
54714: LD_VAR 0 3
54718: ARRAY
54719: DIFF
54720: ST_TO_ADDR
// end ;
54721: GO 54630
54723: POP
54724: POP
// if p then
54725: LD_VAR 0 11
54729: IFFALSE 54754
// result := Replace ( result , 3 , p ) ;
54731: LD_ADDR_VAR 0 2
54735: PUSH
54736: LD_VAR 0 2
54740: PPUSH
54741: LD_INT 3
54743: PPUSH
54744: LD_VAR 0 11
54748: PPUSH
54749: CALL_OW 1
54753: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
54754: LD_ADDR_VAR 0 4
54758: PUSH
54759: LD_VAR 0 4
54763: PUSH
54764: LD_VAR 0 6
54768: DIFF
54769: ST_TO_ADDR
// if tmp and eng < 6 then
54770: LD_VAR 0 4
54774: PUSH
54775: LD_VAR 0 6
54779: PUSH
54780: LD_INT 6
54782: LESS
54783: AND
54784: IFFALSE 54978
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
54786: LD_ADDR_VAR 0 9
54790: PUSH
54791: LD_VAR 0 4
54795: PUSH
54796: LD_VAR 0 8
54800: PUSH
54801: LD_VAR 0 7
54805: UNION
54806: PUSH
54807: LD_VAR 0 6
54811: UNION
54812: DIFF
54813: PPUSH
54814: LD_INT 2
54816: PPUSH
54817: CALL 45677 0 2
54821: ST_TO_ADDR
// p := [ ] ;
54822: LD_ADDR_VAR 0 11
54826: PUSH
54827: EMPTY
54828: ST_TO_ADDR
// if sort then
54829: LD_VAR 0 9
54833: IFFALSE 54949
// for i = 1 to 6 - eng do
54835: LD_ADDR_VAR 0 3
54839: PUSH
54840: DOUBLE
54841: LD_INT 1
54843: DEC
54844: ST_TO_ADDR
54845: LD_INT 6
54847: PUSH
54848: LD_VAR 0 6
54852: MINUS
54853: PUSH
54854: FOR_TO
54855: IFFALSE 54947
// begin if i = sort then
54857: LD_VAR 0 3
54861: PUSH
54862: LD_VAR 0 9
54866: EQUAL
54867: IFFALSE 54871
// break ;
54869: GO 54947
// if GetClass ( i ) = 2 then
54871: LD_VAR 0 3
54875: PPUSH
54876: CALL_OW 257
54880: PUSH
54881: LD_INT 2
54883: EQUAL
54884: IFFALSE 54888
// continue ;
54886: GO 54854
// p := Insert ( p , p + 1 , sort [ i ] ) ;
54888: LD_ADDR_VAR 0 11
54892: PUSH
54893: LD_VAR 0 11
54897: PPUSH
54898: LD_VAR 0 11
54902: PUSH
54903: LD_INT 1
54905: PLUS
54906: PPUSH
54907: LD_VAR 0 9
54911: PUSH
54912: LD_VAR 0 3
54916: ARRAY
54917: PPUSH
54918: CALL_OW 2
54922: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
54923: LD_ADDR_VAR 0 4
54927: PUSH
54928: LD_VAR 0 4
54932: PUSH
54933: LD_VAR 0 9
54937: PUSH
54938: LD_VAR 0 3
54942: ARRAY
54943: DIFF
54944: ST_TO_ADDR
// end ;
54945: GO 54854
54947: POP
54948: POP
// if p then
54949: LD_VAR 0 11
54953: IFFALSE 54978
// result := Replace ( result , 2 , p ) ;
54955: LD_ADDR_VAR 0 2
54959: PUSH
54960: LD_VAR 0 2
54964: PPUSH
54965: LD_INT 2
54967: PPUSH
54968: LD_VAR 0 11
54972: PPUSH
54973: CALL_OW 1
54977: ST_TO_ADDR
// end ; exit ;
54978: GO 55702
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
54980: LD_EXP 87
54984: PUSH
54985: LD_EXP 86
54989: PUSH
54990: LD_VAR 0 1
54994: ARRAY
54995: ARRAY
54996: NOT
54997: PUSH
54998: LD_EXP 60
55002: PUSH
55003: LD_VAR 0 1
55007: ARRAY
55008: PPUSH
55009: LD_INT 30
55011: PUSH
55012: LD_INT 3
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PPUSH
55019: CALL_OW 72
55023: AND
55024: PUSH
55025: LD_EXP 65
55029: PUSH
55030: LD_VAR 0 1
55034: ARRAY
55035: NOT
55036: AND
55037: IFFALSE 55702
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
55039: LD_ADDR_EXP 102
55043: PUSH
55044: LD_EXP 102
55048: PPUSH
55049: LD_VAR 0 1
55053: PPUSH
55054: LD_INT 6
55056: PPUSH
55057: CALL_OW 1
55061: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
55062: LD_ADDR_VAR 0 2
55066: PUSH
55067: LD_INT 0
55069: PUSH
55070: LD_INT 0
55072: PUSH
55073: LD_INT 0
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: ST_TO_ADDR
// if sci >= 1 then
55085: LD_VAR 0 8
55089: PUSH
55090: LD_INT 1
55092: GREATEREQUAL
55093: IFFALSE 55115
// tmp := tmp diff sci [ 1 ] ;
55095: LD_ADDR_VAR 0 4
55099: PUSH
55100: LD_VAR 0 4
55104: PUSH
55105: LD_VAR 0 8
55109: PUSH
55110: LD_INT 1
55112: ARRAY
55113: DIFF
55114: ST_TO_ADDR
// if tmp and not sci then
55115: LD_VAR 0 4
55119: PUSH
55120: LD_VAR 0 8
55124: NOT
55125: AND
55126: IFFALSE 55195
// begin sort := SortBySkill ( tmp , 4 ) ;
55128: LD_ADDR_VAR 0 9
55132: PUSH
55133: LD_VAR 0 4
55137: PPUSH
55138: LD_INT 4
55140: PPUSH
55141: CALL 45677 0 2
55145: ST_TO_ADDR
// if sort then
55146: LD_VAR 0 9
55150: IFFALSE 55166
// p := sort [ 1 ] ;
55152: LD_ADDR_VAR 0 11
55156: PUSH
55157: LD_VAR 0 9
55161: PUSH
55162: LD_INT 1
55164: ARRAY
55165: ST_TO_ADDR
// if p then
55166: LD_VAR 0 11
55170: IFFALSE 55195
// result := Replace ( result , 4 , p ) ;
55172: LD_ADDR_VAR 0 2
55176: PUSH
55177: LD_VAR 0 2
55181: PPUSH
55182: LD_INT 4
55184: PPUSH
55185: LD_VAR 0 11
55189: PPUSH
55190: CALL_OW 1
55194: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
55195: LD_ADDR_VAR 0 4
55199: PUSH
55200: LD_VAR 0 4
55204: PUSH
55205: LD_VAR 0 7
55209: DIFF
55210: ST_TO_ADDR
// if tmp and mech < 6 then
55211: LD_VAR 0 4
55215: PUSH
55216: LD_VAR 0 7
55220: PUSH
55221: LD_INT 6
55223: LESS
55224: AND
55225: IFFALSE 55407
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
55227: LD_ADDR_VAR 0 9
55231: PUSH
55232: LD_VAR 0 4
55236: PUSH
55237: LD_VAR 0 7
55241: DIFF
55242: PPUSH
55243: LD_INT 3
55245: PPUSH
55246: CALL 45677 0 2
55250: ST_TO_ADDR
// p := [ ] ;
55251: LD_ADDR_VAR 0 11
55255: PUSH
55256: EMPTY
55257: ST_TO_ADDR
// if sort then
55258: LD_VAR 0 9
55262: IFFALSE 55378
// for i = 1 to 6 - mech do
55264: LD_ADDR_VAR 0 3
55268: PUSH
55269: DOUBLE
55270: LD_INT 1
55272: DEC
55273: ST_TO_ADDR
55274: LD_INT 6
55276: PUSH
55277: LD_VAR 0 7
55281: MINUS
55282: PUSH
55283: FOR_TO
55284: IFFALSE 55376
// begin if i = sort then
55286: LD_VAR 0 3
55290: PUSH
55291: LD_VAR 0 9
55295: EQUAL
55296: IFFALSE 55300
// break ;
55298: GO 55376
// if GetClass ( i ) = 3 then
55300: LD_VAR 0 3
55304: PPUSH
55305: CALL_OW 257
55309: PUSH
55310: LD_INT 3
55312: EQUAL
55313: IFFALSE 55317
// continue ;
55315: GO 55283
// p := Insert ( p , p + 1 , sort [ i ] ) ;
55317: LD_ADDR_VAR 0 11
55321: PUSH
55322: LD_VAR 0 11
55326: PPUSH
55327: LD_VAR 0 11
55331: PUSH
55332: LD_INT 1
55334: PLUS
55335: PPUSH
55336: LD_VAR 0 9
55340: PUSH
55341: LD_VAR 0 3
55345: ARRAY
55346: PPUSH
55347: CALL_OW 2
55351: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
55352: LD_ADDR_VAR 0 4
55356: PUSH
55357: LD_VAR 0 4
55361: PUSH
55362: LD_VAR 0 9
55366: PUSH
55367: LD_VAR 0 3
55371: ARRAY
55372: DIFF
55373: ST_TO_ADDR
// end ;
55374: GO 55283
55376: POP
55377: POP
// if p then
55378: LD_VAR 0 11
55382: IFFALSE 55407
// result := Replace ( result , 3 , p ) ;
55384: LD_ADDR_VAR 0 2
55388: PUSH
55389: LD_VAR 0 2
55393: PPUSH
55394: LD_INT 3
55396: PPUSH
55397: LD_VAR 0 11
55401: PPUSH
55402: CALL_OW 1
55406: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
55407: LD_ADDR_VAR 0 4
55411: PUSH
55412: LD_VAR 0 4
55416: PUSH
55417: LD_VAR 0 6
55421: DIFF
55422: ST_TO_ADDR
// if tmp and eng < 4 then
55423: LD_VAR 0 4
55427: PUSH
55428: LD_VAR 0 6
55432: PUSH
55433: LD_INT 4
55435: LESS
55436: AND
55437: IFFALSE 55627
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
55439: LD_ADDR_VAR 0 9
55443: PUSH
55444: LD_VAR 0 4
55448: PUSH
55449: LD_VAR 0 7
55453: PUSH
55454: LD_VAR 0 6
55458: UNION
55459: DIFF
55460: PPUSH
55461: LD_INT 2
55463: PPUSH
55464: CALL 45677 0 2
55468: ST_TO_ADDR
// p := [ ] ;
55469: LD_ADDR_VAR 0 11
55473: PUSH
55474: EMPTY
55475: ST_TO_ADDR
// if sort then
55476: LD_VAR 0 9
55480: IFFALSE 55596
// for i = 1 to 4 - eng do
55482: LD_ADDR_VAR 0 3
55486: PUSH
55487: DOUBLE
55488: LD_INT 1
55490: DEC
55491: ST_TO_ADDR
55492: LD_INT 4
55494: PUSH
55495: LD_VAR 0 6
55499: MINUS
55500: PUSH
55501: FOR_TO
55502: IFFALSE 55594
// begin if i = sort then
55504: LD_VAR 0 3
55508: PUSH
55509: LD_VAR 0 9
55513: EQUAL
55514: IFFALSE 55518
// break ;
55516: GO 55594
// if GetClass ( i ) = 2 then
55518: LD_VAR 0 3
55522: PPUSH
55523: CALL_OW 257
55527: PUSH
55528: LD_INT 2
55530: EQUAL
55531: IFFALSE 55535
// continue ;
55533: GO 55501
// p := Insert ( p , p + 1 , sort [ i ] ) ;
55535: LD_ADDR_VAR 0 11
55539: PUSH
55540: LD_VAR 0 11
55544: PPUSH
55545: LD_VAR 0 11
55549: PUSH
55550: LD_INT 1
55552: PLUS
55553: PPUSH
55554: LD_VAR 0 9
55558: PUSH
55559: LD_VAR 0 3
55563: ARRAY
55564: PPUSH
55565: CALL_OW 2
55569: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
55570: LD_ADDR_VAR 0 4
55574: PUSH
55575: LD_VAR 0 4
55579: PUSH
55580: LD_VAR 0 9
55584: PUSH
55585: LD_VAR 0 3
55589: ARRAY
55590: DIFF
55591: ST_TO_ADDR
// end ;
55592: GO 55501
55594: POP
55595: POP
// if p then
55596: LD_VAR 0 11
55600: IFFALSE 55625
// result := Replace ( result , 2 , p ) ;
55602: LD_ADDR_VAR 0 2
55606: PUSH
55607: LD_VAR 0 2
55611: PPUSH
55612: LD_INT 2
55614: PPUSH
55615: LD_VAR 0 11
55619: PPUSH
55620: CALL_OW 1
55624: ST_TO_ADDR
// end else
55625: GO 55671
// for i = eng downto 5 do
55627: LD_ADDR_VAR 0 3
55631: PUSH
55632: DOUBLE
55633: LD_VAR 0 6
55637: INC
55638: ST_TO_ADDR
55639: LD_INT 5
55641: PUSH
55642: FOR_DOWNTO
55643: IFFALSE 55669
// tmp := tmp union eng [ i ] ;
55645: LD_ADDR_VAR 0 4
55649: PUSH
55650: LD_VAR 0 4
55654: PUSH
55655: LD_VAR 0 6
55659: PUSH
55660: LD_VAR 0 3
55664: ARRAY
55665: UNION
55666: ST_TO_ADDR
55667: GO 55642
55669: POP
55670: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
55671: LD_ADDR_VAR 0 2
55675: PUSH
55676: LD_VAR 0 2
55680: PPUSH
55681: LD_INT 1
55683: PPUSH
55684: LD_VAR 0 4
55688: PUSH
55689: LD_VAR 0 5
55693: DIFF
55694: PPUSH
55695: CALL_OW 1
55699: ST_TO_ADDR
// exit ;
55700: GO 55702
// end ; end ;
55702: LD_VAR 0 2
55706: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
55707: LD_INT 0
55709: PPUSH
55710: PPUSH
55711: PPUSH
// if not mc_bases then
55712: LD_EXP 60
55716: NOT
55717: IFFALSE 55721
// exit ;
55719: GO 55827
// for i = 1 to mc_bases do
55721: LD_ADDR_VAR 0 2
55725: PUSH
55726: DOUBLE
55727: LD_INT 1
55729: DEC
55730: ST_TO_ADDR
55731: LD_EXP 60
55735: PUSH
55736: FOR_TO
55737: IFFALSE 55818
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
55739: LD_ADDR_VAR 0 3
55743: PUSH
55744: LD_EXP 60
55748: PUSH
55749: LD_VAR 0 2
55753: ARRAY
55754: PPUSH
55755: LD_INT 21
55757: PUSH
55758: LD_INT 3
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 3
55767: PUSH
55768: LD_INT 24
55770: PUSH
55771: LD_INT 1000
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PPUSH
55786: CALL_OW 72
55790: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
55791: LD_ADDR_EXP 61
55795: PUSH
55796: LD_EXP 61
55800: PPUSH
55801: LD_VAR 0 2
55805: PPUSH
55806: LD_VAR 0 3
55810: PPUSH
55811: CALL_OW 1
55815: ST_TO_ADDR
// end ;
55816: GO 55736
55818: POP
55819: POP
// RaiseSailEvent ( 101 ) ;
55820: LD_INT 101
55822: PPUSH
55823: CALL_OW 427
// end ;
55827: LD_VAR 0 1
55831: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
55832: LD_INT 0
55834: PPUSH
55835: PPUSH
55836: PPUSH
55837: PPUSH
55838: PPUSH
55839: PPUSH
55840: PPUSH
// if not mc_bases then
55841: LD_EXP 60
55845: NOT
55846: IFFALSE 55850
// exit ;
55848: GO 56423
// for i = 1 to mc_bases do
55850: LD_ADDR_VAR 0 2
55854: PUSH
55855: DOUBLE
55856: LD_INT 1
55858: DEC
55859: ST_TO_ADDR
55860: LD_EXP 60
55864: PUSH
55865: FOR_TO
55866: IFFALSE 56414
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
55868: LD_ADDR_VAR 0 5
55872: PUSH
55873: LD_EXP 60
55877: PUSH
55878: LD_VAR 0 2
55882: ARRAY
55883: PUSH
55884: LD_EXP 89
55888: PUSH
55889: LD_VAR 0 2
55893: ARRAY
55894: UNION
55895: PPUSH
55896: LD_INT 21
55898: PUSH
55899: LD_INT 1
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 1
55908: PUSH
55909: LD_INT 3
55911: PUSH
55912: LD_INT 54
55914: PUSH
55915: EMPTY
55916: LIST
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 3
55924: PUSH
55925: LD_INT 24
55927: PUSH
55928: LD_INT 800
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: LIST
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PPUSH
55948: CALL_OW 72
55952: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
55953: LD_ADDR_VAR 0 6
55957: PUSH
55958: LD_EXP 60
55962: PUSH
55963: LD_VAR 0 2
55967: ARRAY
55968: PPUSH
55969: LD_INT 21
55971: PUSH
55972: LD_INT 1
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 1
55981: PUSH
55982: LD_INT 3
55984: PUSH
55985: LD_INT 54
55987: PUSH
55988: EMPTY
55989: LIST
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 3
55997: PUSH
55998: LD_INT 24
56000: PUSH
56001: LD_INT 250
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: LIST
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PPUSH
56021: CALL_OW 72
56025: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
56026: LD_ADDR_VAR 0 7
56030: PUSH
56031: LD_VAR 0 5
56035: PUSH
56036: LD_VAR 0 6
56040: DIFF
56041: ST_TO_ADDR
// if not need_heal_1 then
56042: LD_VAR 0 6
56046: NOT
56047: IFFALSE 56080
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
56049: LD_ADDR_EXP 63
56053: PUSH
56054: LD_EXP 63
56058: PPUSH
56059: LD_VAR 0 2
56063: PUSH
56064: LD_INT 1
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PPUSH
56071: EMPTY
56072: PPUSH
56073: CALL 16128 0 3
56077: ST_TO_ADDR
56078: GO 56150
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
56080: LD_ADDR_EXP 63
56084: PUSH
56085: LD_EXP 63
56089: PPUSH
56090: LD_VAR 0 2
56094: PUSH
56095: LD_INT 1
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PPUSH
56102: LD_EXP 63
56106: PUSH
56107: LD_VAR 0 2
56111: ARRAY
56112: PUSH
56113: LD_INT 1
56115: ARRAY
56116: PPUSH
56117: LD_INT 3
56119: PUSH
56120: LD_INT 24
56122: PUSH
56123: LD_INT 1000
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PPUSH
56134: CALL_OW 72
56138: PUSH
56139: LD_VAR 0 6
56143: UNION
56144: PPUSH
56145: CALL 16128 0 3
56149: ST_TO_ADDR
// if not need_heal_2 then
56150: LD_VAR 0 7
56154: NOT
56155: IFFALSE 56188
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
56157: LD_ADDR_EXP 63
56161: PUSH
56162: LD_EXP 63
56166: PPUSH
56167: LD_VAR 0 2
56171: PUSH
56172: LD_INT 2
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PPUSH
56179: EMPTY
56180: PPUSH
56181: CALL 16128 0 3
56185: ST_TO_ADDR
56186: GO 56220
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
56188: LD_ADDR_EXP 63
56192: PUSH
56193: LD_EXP 63
56197: PPUSH
56198: LD_VAR 0 2
56202: PUSH
56203: LD_INT 2
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PPUSH
56210: LD_VAR 0 7
56214: PPUSH
56215: CALL 16128 0 3
56219: ST_TO_ADDR
// if need_heal_2 then
56220: LD_VAR 0 7
56224: IFFALSE 56396
// for j in need_heal_2 do
56226: LD_ADDR_VAR 0 3
56230: PUSH
56231: LD_VAR 0 7
56235: PUSH
56236: FOR_IN
56237: IFFALSE 56394
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
56239: LD_ADDR_VAR 0 5
56243: PUSH
56244: LD_EXP 60
56248: PUSH
56249: LD_VAR 0 2
56253: ARRAY
56254: PPUSH
56255: LD_INT 2
56257: PUSH
56258: LD_INT 30
56260: PUSH
56261: LD_INT 6
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 30
56270: PUSH
56271: LD_INT 7
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 30
56280: PUSH
56281: LD_INT 8
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 30
56290: PUSH
56291: LD_INT 0
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 30
56300: PUSH
56301: LD_INT 1
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 25
56310: PUSH
56311: LD_INT 4
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: PPUSH
56327: CALL_OW 72
56331: ST_TO_ADDR
// if tmp then
56332: LD_VAR 0 5
56336: IFFALSE 56392
// begin k := NearestUnitToUnit ( tmp , j ) ;
56338: LD_ADDR_VAR 0 4
56342: PUSH
56343: LD_VAR 0 5
56347: PPUSH
56348: LD_VAR 0 3
56352: PPUSH
56353: CALL_OW 74
56357: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
56358: LD_VAR 0 3
56362: PPUSH
56363: LD_VAR 0 4
56367: PPUSH
56368: CALL_OW 296
56372: PUSH
56373: LD_INT 7
56375: GREATER
56376: IFFALSE 56392
// ComMoveUnit ( j , k ) ;
56378: LD_VAR 0 3
56382: PPUSH
56383: LD_VAR 0 4
56387: PPUSH
56388: CALL_OW 112
// end ; end ;
56392: GO 56236
56394: POP
56395: POP
// if not need_heal_1 and not need_heal_2 then
56396: LD_VAR 0 6
56400: NOT
56401: PUSH
56402: LD_VAR 0 7
56406: NOT
56407: AND
56408: IFFALSE 56412
// continue ;
56410: GO 55865
// end ;
56412: GO 55865
56414: POP
56415: POP
// RaiseSailEvent ( 102 ) ;
56416: LD_INT 102
56418: PPUSH
56419: CALL_OW 427
// end ;
56423: LD_VAR 0 1
56427: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
56428: LD_INT 0
56430: PPUSH
56431: PPUSH
56432: PPUSH
56433: PPUSH
56434: PPUSH
56435: PPUSH
56436: PPUSH
56437: PPUSH
// if not mc_bases then
56438: LD_EXP 60
56442: NOT
56443: IFFALSE 56447
// exit ;
56445: GO 57287
// for i = 1 to mc_bases do
56447: LD_ADDR_VAR 0 2
56451: PUSH
56452: DOUBLE
56453: LD_INT 1
56455: DEC
56456: ST_TO_ADDR
56457: LD_EXP 60
56461: PUSH
56462: FOR_TO
56463: IFFALSE 57285
// begin if not mc_building_need_repair [ i ] then
56465: LD_EXP 61
56469: PUSH
56470: LD_VAR 0 2
56474: ARRAY
56475: NOT
56476: IFFALSE 56650
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
56478: LD_ADDR_VAR 0 6
56482: PUSH
56483: LD_EXP 79
56487: PUSH
56488: LD_VAR 0 2
56492: ARRAY
56493: PPUSH
56494: LD_INT 3
56496: PUSH
56497: LD_INT 24
56499: PUSH
56500: LD_INT 1000
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 2
56513: PUSH
56514: LD_INT 34
56516: PUSH
56517: LD_INT 13
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 34
56526: PUSH
56527: LD_INT 52
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: LIST
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PPUSH
56543: CALL_OW 72
56547: ST_TO_ADDR
// if cranes then
56548: LD_VAR 0 6
56552: IFFALSE 56614
// for j in cranes do
56554: LD_ADDR_VAR 0 3
56558: PUSH
56559: LD_VAR 0 6
56563: PUSH
56564: FOR_IN
56565: IFFALSE 56612
// if not IsInArea ( j , mc_parking [ i ] ) then
56567: LD_VAR 0 3
56571: PPUSH
56572: LD_EXP 84
56576: PUSH
56577: LD_VAR 0 2
56581: ARRAY
56582: PPUSH
56583: CALL_OW 308
56587: NOT
56588: IFFALSE 56610
// ComMoveToArea ( j , mc_parking [ i ] ) ;
56590: LD_VAR 0 3
56594: PPUSH
56595: LD_EXP 84
56599: PUSH
56600: LD_VAR 0 2
56604: ARRAY
56605: PPUSH
56606: CALL_OW 113
56610: GO 56564
56612: POP
56613: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
56614: LD_ADDR_EXP 62
56618: PUSH
56619: LD_EXP 62
56623: PPUSH
56624: LD_VAR 0 2
56628: PPUSH
56629: EMPTY
56630: PPUSH
56631: CALL_OW 1
56635: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
56636: LD_VAR 0 2
56640: PPUSH
56641: LD_INT 101
56643: PPUSH
56644: CALL 51540 0 2
// continue ;
56648: GO 56462
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
56650: LD_ADDR_EXP 66
56654: PUSH
56655: LD_EXP 66
56659: PPUSH
56660: LD_VAR 0 2
56664: PPUSH
56665: EMPTY
56666: PPUSH
56667: CALL_OW 1
56671: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
56672: LD_VAR 0 2
56676: PPUSH
56677: LD_INT 103
56679: PPUSH
56680: CALL 51540 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
56684: LD_ADDR_VAR 0 5
56688: PUSH
56689: LD_EXP 60
56693: PUSH
56694: LD_VAR 0 2
56698: ARRAY
56699: PUSH
56700: LD_EXP 89
56704: PUSH
56705: LD_VAR 0 2
56709: ARRAY
56710: UNION
56711: PPUSH
56712: LD_INT 2
56714: PUSH
56715: LD_INT 25
56717: PUSH
56718: LD_INT 2
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 25
56727: PUSH
56728: LD_INT 16
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: LIST
56739: PUSH
56740: EMPTY
56741: LIST
56742: PPUSH
56743: CALL_OW 72
56747: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
56748: LD_ADDR_VAR 0 6
56752: PUSH
56753: LD_EXP 79
56757: PUSH
56758: LD_VAR 0 2
56762: ARRAY
56763: PPUSH
56764: LD_INT 2
56766: PUSH
56767: LD_INT 34
56769: PUSH
56770: LD_INT 13
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 34
56779: PUSH
56780: LD_INT 52
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: LIST
56791: PPUSH
56792: CALL_OW 72
56796: ST_TO_ADDR
// if cranes then
56797: LD_VAR 0 6
56801: IFFALSE 56937
// begin for j in cranes do
56803: LD_ADDR_VAR 0 3
56807: PUSH
56808: LD_VAR 0 6
56812: PUSH
56813: FOR_IN
56814: IFFALSE 56935
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
56816: LD_VAR 0 3
56820: PPUSH
56821: CALL_OW 256
56825: PUSH
56826: LD_INT 500
56828: GREATEREQUAL
56829: PUSH
56830: LD_VAR 0 3
56834: PPUSH
56835: CALL_OW 314
56839: NOT
56840: AND
56841: IFFALSE 56875
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
56843: LD_VAR 0 3
56847: PPUSH
56848: LD_EXP 61
56852: PUSH
56853: LD_VAR 0 2
56857: ARRAY
56858: PPUSH
56859: LD_VAR 0 3
56863: PPUSH
56864: CALL_OW 74
56868: PPUSH
56869: CALL_OW 130
56873: GO 56933
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
56875: LD_VAR 0 3
56879: PPUSH
56880: CALL_OW 256
56884: PUSH
56885: LD_INT 500
56887: LESS
56888: PUSH
56889: LD_VAR 0 3
56893: PPUSH
56894: LD_EXP 84
56898: PUSH
56899: LD_VAR 0 2
56903: ARRAY
56904: PPUSH
56905: CALL_OW 308
56909: NOT
56910: AND
56911: IFFALSE 56933
// ComMoveToArea ( j , mc_parking [ i ] ) ;
56913: LD_VAR 0 3
56917: PPUSH
56918: LD_EXP 84
56922: PUSH
56923: LD_VAR 0 2
56927: ARRAY
56928: PPUSH
56929: CALL_OW 113
56933: GO 56813
56935: POP
56936: POP
// end ; if not tmp then
56937: LD_VAR 0 5
56941: NOT
56942: IFFALSE 56946
// continue ;
56944: GO 56462
// for j in tmp do
56946: LD_ADDR_VAR 0 3
56950: PUSH
56951: LD_VAR 0 5
56955: PUSH
56956: FOR_IN
56957: IFFALSE 57281
// begin if mc_need_heal [ i ] then
56959: LD_EXP 63
56963: PUSH
56964: LD_VAR 0 2
56968: ARRAY
56969: IFFALSE 57017
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
56971: LD_VAR 0 3
56975: PUSH
56976: LD_EXP 63
56980: PUSH
56981: LD_VAR 0 2
56985: ARRAY
56986: PUSH
56987: LD_INT 1
56989: ARRAY
56990: IN
56991: PUSH
56992: LD_VAR 0 3
56996: PUSH
56997: LD_EXP 63
57001: PUSH
57002: LD_VAR 0 2
57006: ARRAY
57007: PUSH
57008: LD_INT 2
57010: ARRAY
57011: IN
57012: OR
57013: IFFALSE 57017
// continue ;
57015: GO 56956
// if IsInUnit ( j ) then
57017: LD_VAR 0 3
57021: PPUSH
57022: CALL_OW 310
57026: IFFALSE 57037
// ComExitBuilding ( j ) ;
57028: LD_VAR 0 3
57032: PPUSH
57033: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
57037: LD_VAR 0 3
57041: PUSH
57042: LD_EXP 62
57046: PUSH
57047: LD_VAR 0 2
57051: ARRAY
57052: IN
57053: NOT
57054: IFFALSE 57112
// begin SetTag ( j , 101 ) ;
57056: LD_VAR 0 3
57060: PPUSH
57061: LD_INT 101
57063: PPUSH
57064: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
57068: LD_ADDR_EXP 62
57072: PUSH
57073: LD_EXP 62
57077: PPUSH
57078: LD_VAR 0 2
57082: PUSH
57083: LD_EXP 62
57087: PUSH
57088: LD_VAR 0 2
57092: ARRAY
57093: PUSH
57094: LD_INT 1
57096: PLUS
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PPUSH
57102: LD_VAR 0 3
57106: PPUSH
57107: CALL 16128 0 3
57111: ST_TO_ADDR
// end ; wait ( 1 ) ;
57112: LD_INT 1
57114: PPUSH
57115: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
57119: LD_ADDR_VAR 0 7
57123: PUSH
57124: LD_EXP 61
57128: PUSH
57129: LD_VAR 0 2
57133: ARRAY
57134: ST_TO_ADDR
// if mc_scan [ i ] then
57135: LD_EXP 83
57139: PUSH
57140: LD_VAR 0 2
57144: ARRAY
57145: IFFALSE 57214
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ] ) ;
57147: LD_ADDR_VAR 0 7
57151: PUSH
57152: LD_EXP 61
57156: PUSH
57157: LD_VAR 0 2
57161: ARRAY
57162: PPUSH
57163: LD_INT 3
57165: PUSH
57166: LD_INT 2
57168: PUSH
57169: LD_INT 30
57171: PUSH
57172: LD_INT 32
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 30
57181: PUSH
57182: LD_INT 33
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 30
57191: PUSH
57192: LD_INT 31
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PPUSH
57209: CALL_OW 72
57213: ST_TO_ADDR
// if not to_repair_tmp then
57214: LD_VAR 0 7
57218: NOT
57219: IFFALSE 57223
// continue ;
57221: GO 56956
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
57223: LD_ADDR_VAR 0 8
57227: PUSH
57228: LD_VAR 0 7
57232: PPUSH
57233: LD_VAR 0 3
57237: PPUSH
57238: CALL_OW 74
57242: ST_TO_ADDR
// if DangerAtRange ( to_repair , 14 ) [ 4 ] < 5 then
57243: LD_VAR 0 8
57247: PPUSH
57248: LD_INT 14
57250: PPUSH
57251: CALL 18721 0 2
57255: PUSH
57256: LD_INT 4
57258: ARRAY
57259: PUSH
57260: LD_INT 5
57262: LESS
57263: IFFALSE 57279
// ComRepairBuilding ( j , to_repair ) ;
57265: LD_VAR 0 3
57269: PPUSH
57270: LD_VAR 0 8
57274: PPUSH
57275: CALL_OW 130
// end ;
57279: GO 56956
57281: POP
57282: POP
// end ;
57283: GO 56462
57285: POP
57286: POP
// end ;
57287: LD_VAR 0 1
57291: RET
// export function MC_Heal ; var i , j , tmp ; begin
57292: LD_INT 0
57294: PPUSH
57295: PPUSH
57296: PPUSH
57297: PPUSH
// if not mc_bases then
57298: LD_EXP 60
57302: NOT
57303: IFFALSE 57307
// exit ;
57305: GO 57709
// for i = 1 to mc_bases do
57307: LD_ADDR_VAR 0 2
57311: PUSH
57312: DOUBLE
57313: LD_INT 1
57315: DEC
57316: ST_TO_ADDR
57317: LD_EXP 60
57321: PUSH
57322: FOR_TO
57323: IFFALSE 57707
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
57325: LD_EXP 63
57329: PUSH
57330: LD_VAR 0 2
57334: ARRAY
57335: PUSH
57336: LD_INT 1
57338: ARRAY
57339: NOT
57340: PUSH
57341: LD_EXP 63
57345: PUSH
57346: LD_VAR 0 2
57350: ARRAY
57351: PUSH
57352: LD_INT 2
57354: ARRAY
57355: NOT
57356: AND
57357: IFFALSE 57395
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
57359: LD_ADDR_EXP 64
57363: PUSH
57364: LD_EXP 64
57368: PPUSH
57369: LD_VAR 0 2
57373: PPUSH
57374: EMPTY
57375: PPUSH
57376: CALL_OW 1
57380: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
57381: LD_VAR 0 2
57385: PPUSH
57386: LD_INT 102
57388: PPUSH
57389: CALL 51540 0 2
// continue ;
57393: GO 57322
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
57395: LD_ADDR_VAR 0 4
57399: PUSH
57400: LD_EXP 60
57404: PUSH
57405: LD_VAR 0 2
57409: ARRAY
57410: PPUSH
57411: LD_INT 25
57413: PUSH
57414: LD_INT 4
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PPUSH
57421: CALL_OW 72
57425: ST_TO_ADDR
// if not tmp then
57426: LD_VAR 0 4
57430: NOT
57431: IFFALSE 57435
// continue ;
57433: GO 57322
// if mc_taming [ i ] then
57435: LD_EXP 91
57439: PUSH
57440: LD_VAR 0 2
57444: ARRAY
57445: IFFALSE 57469
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
57447: LD_ADDR_EXP 91
57451: PUSH
57452: LD_EXP 91
57456: PPUSH
57457: LD_VAR 0 2
57461: PPUSH
57462: EMPTY
57463: PPUSH
57464: CALL_OW 1
57468: ST_TO_ADDR
// for j in tmp do
57469: LD_ADDR_VAR 0 3
57473: PUSH
57474: LD_VAR 0 4
57478: PUSH
57479: FOR_IN
57480: IFFALSE 57703
// begin if IsInUnit ( j ) then
57482: LD_VAR 0 3
57486: PPUSH
57487: CALL_OW 310
57491: IFFALSE 57502
// ComExitBuilding ( j ) ;
57493: LD_VAR 0 3
57497: PPUSH
57498: CALL_OW 122
// if not j in mc_healers [ i ] then
57502: LD_VAR 0 3
57506: PUSH
57507: LD_EXP 64
57511: PUSH
57512: LD_VAR 0 2
57516: ARRAY
57517: IN
57518: NOT
57519: IFFALSE 57565
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
57521: LD_ADDR_EXP 64
57525: PUSH
57526: LD_EXP 64
57530: PPUSH
57531: LD_VAR 0 2
57535: PUSH
57536: LD_EXP 64
57540: PUSH
57541: LD_VAR 0 2
57545: ARRAY
57546: PUSH
57547: LD_INT 1
57549: PLUS
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PPUSH
57555: LD_VAR 0 3
57559: PPUSH
57560: CALL 16128 0 3
57564: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
57565: LD_VAR 0 3
57569: PPUSH
57570: CALL_OW 110
57574: PUSH
57575: LD_INT 102
57577: NONEQUAL
57578: IFFALSE 57592
// SetTag ( j , 102 ) ;
57580: LD_VAR 0 3
57584: PPUSH
57585: LD_INT 102
57587: PPUSH
57588: CALL_OW 109
// Wait ( 3 ) ;
57592: LD_INT 3
57594: PPUSH
57595: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
57599: LD_EXP 63
57603: PUSH
57604: LD_VAR 0 2
57608: ARRAY
57609: PUSH
57610: LD_INT 1
57612: ARRAY
57613: IFFALSE 57645
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
57615: LD_VAR 0 3
57619: PPUSH
57620: LD_EXP 63
57624: PUSH
57625: LD_VAR 0 2
57629: ARRAY
57630: PUSH
57631: LD_INT 1
57633: ARRAY
57634: PUSH
57635: LD_INT 1
57637: ARRAY
57638: PPUSH
57639: CALL_OW 128
57643: GO 57701
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
57645: LD_VAR 0 3
57649: PPUSH
57650: CALL_OW 314
57654: NOT
57655: PUSH
57656: LD_EXP 63
57660: PUSH
57661: LD_VAR 0 2
57665: ARRAY
57666: PUSH
57667: LD_INT 2
57669: ARRAY
57670: AND
57671: IFFALSE 57701
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
57673: LD_VAR 0 3
57677: PPUSH
57678: LD_EXP 63
57682: PUSH
57683: LD_VAR 0 2
57687: ARRAY
57688: PUSH
57689: LD_INT 2
57691: ARRAY
57692: PUSH
57693: LD_INT 1
57695: ARRAY
57696: PPUSH
57697: CALL_OW 128
// end ;
57701: GO 57479
57703: POP
57704: POP
// end ;
57705: GO 57322
57707: POP
57708: POP
// end ;
57709: LD_VAR 0 1
57713: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
57714: LD_INT 0
57716: PPUSH
57717: PPUSH
57718: PPUSH
57719: PPUSH
57720: PPUSH
// if not mc_bases then
57721: LD_EXP 60
57725: NOT
57726: IFFALSE 57730
// exit ;
57728: GO 58873
// for i = 1 to mc_bases do
57730: LD_ADDR_VAR 0 2
57734: PUSH
57735: DOUBLE
57736: LD_INT 1
57738: DEC
57739: ST_TO_ADDR
57740: LD_EXP 60
57744: PUSH
57745: FOR_TO
57746: IFFALSE 58871
// begin if mc_scan [ i ] then
57748: LD_EXP 83
57752: PUSH
57753: LD_VAR 0 2
57757: ARRAY
57758: IFFALSE 57762
// continue ;
57760: GO 57745
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
57762: LD_EXP 65
57766: PUSH
57767: LD_VAR 0 2
57771: ARRAY
57772: NOT
57773: PUSH
57774: LD_EXP 67
57778: PUSH
57779: LD_VAR 0 2
57783: ARRAY
57784: NOT
57785: AND
57786: PUSH
57787: LD_EXP 66
57791: PUSH
57792: LD_VAR 0 2
57796: ARRAY
57797: AND
57798: IFFALSE 57836
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
57800: LD_ADDR_EXP 66
57804: PUSH
57805: LD_EXP 66
57809: PPUSH
57810: LD_VAR 0 2
57814: PPUSH
57815: EMPTY
57816: PPUSH
57817: CALL_OW 1
57821: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
57822: LD_VAR 0 2
57826: PPUSH
57827: LD_INT 103
57829: PPUSH
57830: CALL 51540 0 2
// continue ;
57834: GO 57745
// end ; if mc_construct_list [ i ] then
57836: LD_EXP 67
57840: PUSH
57841: LD_VAR 0 2
57845: ARRAY
57846: IFFALSE 58066
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
57848: LD_ADDR_VAR 0 4
57852: PUSH
57853: LD_EXP 60
57857: PUSH
57858: LD_VAR 0 2
57862: ARRAY
57863: PPUSH
57864: LD_INT 25
57866: PUSH
57867: LD_INT 2
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PPUSH
57874: CALL_OW 72
57878: PUSH
57879: LD_EXP 62
57883: PUSH
57884: LD_VAR 0 2
57888: ARRAY
57889: DIFF
57890: ST_TO_ADDR
// if not tmp then
57891: LD_VAR 0 4
57895: NOT
57896: IFFALSE 57900
// continue ;
57898: GO 57745
// for j in tmp do
57900: LD_ADDR_VAR 0 3
57904: PUSH
57905: LD_VAR 0 4
57909: PUSH
57910: FOR_IN
57911: IFFALSE 58062
// begin if not mc_builders [ i ] then
57913: LD_EXP 66
57917: PUSH
57918: LD_VAR 0 2
57922: ARRAY
57923: NOT
57924: IFFALSE 57982
// begin SetTag ( j , 103 ) ;
57926: LD_VAR 0 3
57930: PPUSH
57931: LD_INT 103
57933: PPUSH
57934: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
57938: LD_ADDR_EXP 66
57942: PUSH
57943: LD_EXP 66
57947: PPUSH
57948: LD_VAR 0 2
57952: PUSH
57953: LD_EXP 66
57957: PUSH
57958: LD_VAR 0 2
57962: ARRAY
57963: PUSH
57964: LD_INT 1
57966: PLUS
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PPUSH
57972: LD_VAR 0 3
57976: PPUSH
57977: CALL 16128 0 3
57981: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
57982: LD_VAR 0 3
57986: PPUSH
57987: CALL_OW 310
57991: IFFALSE 58002
// ComExitBuilding ( j ) ;
57993: LD_VAR 0 3
57997: PPUSH
57998: CALL_OW 122
// wait ( 3 ) ;
58002: LD_INT 3
58004: PPUSH
58005: CALL_OW 67
// if not mc_construct_list [ i ] then
58009: LD_EXP 67
58013: PUSH
58014: LD_VAR 0 2
58018: ARRAY
58019: NOT
58020: IFFALSE 58024
// break ;
58022: GO 58062
// if not HasTask ( j ) then
58024: LD_VAR 0 3
58028: PPUSH
58029: CALL_OW 314
58033: NOT
58034: IFFALSE 58060
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
58036: LD_VAR 0 3
58040: PPUSH
58041: LD_EXP 67
58045: PUSH
58046: LD_VAR 0 2
58050: ARRAY
58051: PUSH
58052: LD_INT 1
58054: ARRAY
58055: PPUSH
58056: CALL 18979 0 2
// end ;
58060: GO 57910
58062: POP
58063: POP
// end else
58064: GO 58869
// if mc_build_list [ i ] then
58066: LD_EXP 65
58070: PUSH
58071: LD_VAR 0 2
58075: ARRAY
58076: IFFALSE 58869
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
58078: LD_ADDR_VAR 0 5
58082: PUSH
58083: LD_EXP 60
58087: PUSH
58088: LD_VAR 0 2
58092: ARRAY
58093: PPUSH
58094: LD_INT 2
58096: PUSH
58097: LD_INT 30
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 30
58109: PUSH
58110: LD_INT 1
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: LIST
58121: PPUSH
58122: CALL_OW 72
58126: ST_TO_ADDR
// if depot then
58127: LD_VAR 0 5
58131: IFFALSE 58149
// depot := depot [ 1 ] else
58133: LD_ADDR_VAR 0 5
58137: PUSH
58138: LD_VAR 0 5
58142: PUSH
58143: LD_INT 1
58145: ARRAY
58146: ST_TO_ADDR
58147: GO 58157
// depot := 0 ;
58149: LD_ADDR_VAR 0 5
58153: PUSH
58154: LD_INT 0
58156: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
58157: LD_EXP 65
58161: PUSH
58162: LD_VAR 0 2
58166: ARRAY
58167: PUSH
58168: LD_INT 1
58170: ARRAY
58171: PUSH
58172: LD_INT 1
58174: ARRAY
58175: PPUSH
58176: CALL 18809 0 1
58180: PUSH
58181: LD_EXP 60
58185: PUSH
58186: LD_VAR 0 2
58190: ARRAY
58191: PPUSH
58192: LD_INT 2
58194: PUSH
58195: LD_INT 30
58197: PUSH
58198: LD_INT 2
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 30
58207: PUSH
58208: LD_INT 3
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: LIST
58219: PPUSH
58220: CALL_OW 72
58224: NOT
58225: AND
58226: IFFALSE 58331
// begin for j = 1 to mc_build_list [ i ] do
58228: LD_ADDR_VAR 0 3
58232: PUSH
58233: DOUBLE
58234: LD_INT 1
58236: DEC
58237: ST_TO_ADDR
58238: LD_EXP 65
58242: PUSH
58243: LD_VAR 0 2
58247: ARRAY
58248: PUSH
58249: FOR_TO
58250: IFFALSE 58329
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
58252: LD_EXP 65
58256: PUSH
58257: LD_VAR 0 2
58261: ARRAY
58262: PUSH
58263: LD_VAR 0 3
58267: ARRAY
58268: PUSH
58269: LD_INT 1
58271: ARRAY
58272: PUSH
58273: LD_INT 2
58275: EQUAL
58276: IFFALSE 58327
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
58278: LD_ADDR_EXP 65
58282: PUSH
58283: LD_EXP 65
58287: PPUSH
58288: LD_VAR 0 2
58292: PPUSH
58293: LD_EXP 65
58297: PUSH
58298: LD_VAR 0 2
58302: ARRAY
58303: PPUSH
58304: LD_VAR 0 3
58308: PPUSH
58309: LD_INT 1
58311: PPUSH
58312: LD_INT 0
58314: PPUSH
58315: CALL 15546 0 4
58319: PPUSH
58320: CALL_OW 1
58324: ST_TO_ADDR
// break ;
58325: GO 58329
// end ;
58327: GO 58249
58329: POP
58330: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
58331: LD_EXP 65
58335: PUSH
58336: LD_VAR 0 2
58340: ARRAY
58341: PUSH
58342: LD_INT 1
58344: ARRAY
58345: PUSH
58346: LD_INT 1
58348: ARRAY
58349: PUSH
58350: LD_INT 0
58352: EQUAL
58353: PUSH
58354: LD_VAR 0 5
58358: PUSH
58359: LD_VAR 0 5
58363: PPUSH
58364: LD_EXP 65
58368: PUSH
58369: LD_VAR 0 2
58373: ARRAY
58374: PUSH
58375: LD_INT 1
58377: ARRAY
58378: PUSH
58379: LD_INT 1
58381: ARRAY
58382: PPUSH
58383: LD_EXP 65
58387: PUSH
58388: LD_VAR 0 2
58392: ARRAY
58393: PUSH
58394: LD_INT 1
58396: ARRAY
58397: PUSH
58398: LD_INT 2
58400: ARRAY
58401: PPUSH
58402: LD_EXP 65
58406: PUSH
58407: LD_VAR 0 2
58411: ARRAY
58412: PUSH
58413: LD_INT 1
58415: ARRAY
58416: PUSH
58417: LD_INT 3
58419: ARRAY
58420: PPUSH
58421: LD_EXP 65
58425: PUSH
58426: LD_VAR 0 2
58430: ARRAY
58431: PUSH
58432: LD_INT 1
58434: ARRAY
58435: PUSH
58436: LD_INT 4
58438: ARRAY
58439: PPUSH
58440: CALL 23543 0 5
58444: AND
58445: OR
58446: IFFALSE 58727
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
58448: LD_ADDR_VAR 0 4
58452: PUSH
58453: LD_EXP 60
58457: PUSH
58458: LD_VAR 0 2
58462: ARRAY
58463: PPUSH
58464: LD_INT 25
58466: PUSH
58467: LD_INT 2
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PPUSH
58474: CALL_OW 72
58478: PUSH
58479: LD_EXP 62
58483: PUSH
58484: LD_VAR 0 2
58488: ARRAY
58489: DIFF
58490: ST_TO_ADDR
// if not tmp then
58491: LD_VAR 0 4
58495: NOT
58496: IFFALSE 58500
// continue ;
58498: GO 57745
// for j in tmp do
58500: LD_ADDR_VAR 0 3
58504: PUSH
58505: LD_VAR 0 4
58509: PUSH
58510: FOR_IN
58511: IFFALSE 58723
// begin if not mc_builders [ i ] then
58513: LD_EXP 66
58517: PUSH
58518: LD_VAR 0 2
58522: ARRAY
58523: NOT
58524: IFFALSE 58582
// begin SetTag ( j , 103 ) ;
58526: LD_VAR 0 3
58530: PPUSH
58531: LD_INT 103
58533: PPUSH
58534: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
58538: LD_ADDR_EXP 66
58542: PUSH
58543: LD_EXP 66
58547: PPUSH
58548: LD_VAR 0 2
58552: PUSH
58553: LD_EXP 66
58557: PUSH
58558: LD_VAR 0 2
58562: ARRAY
58563: PUSH
58564: LD_INT 1
58566: PLUS
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PPUSH
58572: LD_VAR 0 3
58576: PPUSH
58577: CALL 16128 0 3
58581: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
58582: LD_VAR 0 3
58586: PPUSH
58587: CALL_OW 310
58591: IFFALSE 58602
// ComExitBuilding ( j ) ;
58593: LD_VAR 0 3
58597: PPUSH
58598: CALL_OW 122
// wait ( 3 ) ;
58602: LD_INT 3
58604: PPUSH
58605: CALL_OW 67
// if not mc_build_list [ i ] then
58609: LD_EXP 65
58613: PUSH
58614: LD_VAR 0 2
58618: ARRAY
58619: NOT
58620: IFFALSE 58624
// break ;
58622: GO 58723
// if not HasTask ( j ) then
58624: LD_VAR 0 3
58628: PPUSH
58629: CALL_OW 314
58633: NOT
58634: IFFALSE 58721
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
58636: LD_VAR 0 3
58640: PPUSH
58641: LD_EXP 65
58645: PUSH
58646: LD_VAR 0 2
58650: ARRAY
58651: PUSH
58652: LD_INT 1
58654: ARRAY
58655: PUSH
58656: LD_INT 1
58658: ARRAY
58659: PPUSH
58660: LD_EXP 65
58664: PUSH
58665: LD_VAR 0 2
58669: ARRAY
58670: PUSH
58671: LD_INT 1
58673: ARRAY
58674: PUSH
58675: LD_INT 2
58677: ARRAY
58678: PPUSH
58679: LD_EXP 65
58683: PUSH
58684: LD_VAR 0 2
58688: ARRAY
58689: PUSH
58690: LD_INT 1
58692: ARRAY
58693: PUSH
58694: LD_INT 3
58696: ARRAY
58697: PPUSH
58698: LD_EXP 65
58702: PUSH
58703: LD_VAR 0 2
58707: ARRAY
58708: PUSH
58709: LD_INT 1
58711: ARRAY
58712: PUSH
58713: LD_INT 4
58715: ARRAY
58716: PPUSH
58717: CALL_OW 145
// end ;
58721: GO 58510
58723: POP
58724: POP
// end else
58725: GO 58869
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
58727: LD_EXP 60
58731: PUSH
58732: LD_VAR 0 2
58736: ARRAY
58737: PPUSH
58738: LD_EXP 65
58742: PUSH
58743: LD_VAR 0 2
58747: ARRAY
58748: PUSH
58749: LD_INT 1
58751: ARRAY
58752: PUSH
58753: LD_INT 1
58755: ARRAY
58756: PPUSH
58757: LD_EXP 65
58761: PUSH
58762: LD_VAR 0 2
58766: ARRAY
58767: PUSH
58768: LD_INT 1
58770: ARRAY
58771: PUSH
58772: LD_INT 2
58774: ARRAY
58775: PPUSH
58776: LD_EXP 65
58780: PUSH
58781: LD_VAR 0 2
58785: ARRAY
58786: PUSH
58787: LD_INT 1
58789: ARRAY
58790: PUSH
58791: LD_INT 3
58793: ARRAY
58794: PPUSH
58795: LD_EXP 65
58799: PUSH
58800: LD_VAR 0 2
58804: ARRAY
58805: PUSH
58806: LD_INT 1
58808: ARRAY
58809: PUSH
58810: LD_INT 4
58812: ARRAY
58813: PPUSH
58814: CALL 22879 0 5
58818: NOT
58819: IFFALSE 58869
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
58821: LD_ADDR_EXP 65
58825: PUSH
58826: LD_EXP 65
58830: PPUSH
58831: LD_VAR 0 2
58835: PPUSH
58836: LD_EXP 65
58840: PUSH
58841: LD_VAR 0 2
58845: ARRAY
58846: PPUSH
58847: LD_INT 1
58849: PPUSH
58850: LD_INT 1
58852: NEG
58853: PPUSH
58854: LD_INT 0
58856: PPUSH
58857: CALL 15546 0 4
58861: PPUSH
58862: CALL_OW 1
58866: ST_TO_ADDR
// continue ;
58867: GO 57745
// end ; end ; end ;
58869: GO 57745
58871: POP
58872: POP
// end ;
58873: LD_VAR 0 1
58877: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
58878: LD_INT 0
58880: PPUSH
58881: PPUSH
58882: PPUSH
58883: PPUSH
58884: PPUSH
58885: PPUSH
// if not mc_bases then
58886: LD_EXP 60
58890: NOT
58891: IFFALSE 58895
// exit ;
58893: GO 59322
// for i = 1 to mc_bases do
58895: LD_ADDR_VAR 0 2
58899: PUSH
58900: DOUBLE
58901: LD_INT 1
58903: DEC
58904: ST_TO_ADDR
58905: LD_EXP 60
58909: PUSH
58910: FOR_TO
58911: IFFALSE 59320
// begin tmp := mc_build_upgrade [ i ] ;
58913: LD_ADDR_VAR 0 4
58917: PUSH
58918: LD_EXP 92
58922: PUSH
58923: LD_VAR 0 2
58927: ARRAY
58928: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
58929: LD_ADDR_VAR 0 6
58933: PUSH
58934: LD_EXP 93
58938: PUSH
58939: LD_VAR 0 2
58943: ARRAY
58944: PPUSH
58945: LD_INT 2
58947: PUSH
58948: LD_INT 30
58950: PUSH
58951: LD_INT 6
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 30
58960: PUSH
58961: LD_INT 7
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: LIST
58972: PPUSH
58973: CALL_OW 72
58977: ST_TO_ADDR
// if not tmp and not lab then
58978: LD_VAR 0 4
58982: NOT
58983: PUSH
58984: LD_VAR 0 6
58988: NOT
58989: AND
58990: IFFALSE 58994
// continue ;
58992: GO 58910
// if tmp then
58994: LD_VAR 0 4
58998: IFFALSE 59118
// for j in tmp do
59000: LD_ADDR_VAR 0 3
59004: PUSH
59005: LD_VAR 0 4
59009: PUSH
59010: FOR_IN
59011: IFFALSE 59116
// begin if UpgradeCost ( j ) then
59013: LD_VAR 0 3
59017: PPUSH
59018: CALL 22539 0 1
59022: IFFALSE 59114
// begin ComUpgrade ( j ) ;
59024: LD_VAR 0 3
59028: PPUSH
59029: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
59033: LD_ADDR_EXP 92
59037: PUSH
59038: LD_EXP 92
59042: PPUSH
59043: LD_VAR 0 2
59047: PPUSH
59048: LD_EXP 92
59052: PUSH
59053: LD_VAR 0 2
59057: ARRAY
59058: PUSH
59059: LD_VAR 0 3
59063: DIFF
59064: PPUSH
59065: CALL_OW 1
59069: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
59070: LD_ADDR_EXP 67
59074: PUSH
59075: LD_EXP 67
59079: PPUSH
59080: LD_VAR 0 2
59084: PUSH
59085: LD_EXP 67
59089: PUSH
59090: LD_VAR 0 2
59094: ARRAY
59095: PUSH
59096: LD_INT 1
59098: PLUS
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PPUSH
59104: LD_VAR 0 3
59108: PPUSH
59109: CALL 16128 0 3
59113: ST_TO_ADDR
// end ; end ;
59114: GO 59010
59116: POP
59117: POP
// if not lab or not mc_lab_upgrade [ i ] then
59118: LD_VAR 0 6
59122: NOT
59123: PUSH
59124: LD_EXP 94
59128: PUSH
59129: LD_VAR 0 2
59133: ARRAY
59134: NOT
59135: OR
59136: IFFALSE 59140
// continue ;
59138: GO 58910
// for j in lab do
59140: LD_ADDR_VAR 0 3
59144: PUSH
59145: LD_VAR 0 6
59149: PUSH
59150: FOR_IN
59151: IFFALSE 59316
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
59153: LD_VAR 0 3
59157: PPUSH
59158: CALL_OW 266
59162: PUSH
59163: LD_INT 6
59165: PUSH
59166: LD_INT 7
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: IN
59173: PUSH
59174: LD_VAR 0 3
59178: PPUSH
59179: CALL_OW 461
59183: PUSH
59184: LD_INT 1
59186: NONEQUAL
59187: AND
59188: IFFALSE 59314
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
59190: LD_VAR 0 3
59194: PPUSH
59195: LD_EXP 94
59199: PUSH
59200: LD_VAR 0 2
59204: ARRAY
59205: PUSH
59206: LD_INT 1
59208: ARRAY
59209: PPUSH
59210: CALL 22744 0 2
59214: IFFALSE 59314
// begin ComCancel ( j ) ;
59216: LD_VAR 0 3
59220: PPUSH
59221: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
59225: LD_VAR 0 3
59229: PPUSH
59230: LD_EXP 94
59234: PUSH
59235: LD_VAR 0 2
59239: ARRAY
59240: PUSH
59241: LD_INT 1
59243: ARRAY
59244: PPUSH
59245: CALL_OW 207
// if not j in mc_construct_list [ i ] then
59249: LD_VAR 0 3
59253: PUSH
59254: LD_EXP 67
59258: PUSH
59259: LD_VAR 0 2
59263: ARRAY
59264: IN
59265: NOT
59266: IFFALSE 59312
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
59268: LD_ADDR_EXP 67
59272: PUSH
59273: LD_EXP 67
59277: PPUSH
59278: LD_VAR 0 2
59282: PUSH
59283: LD_EXP 67
59287: PUSH
59288: LD_VAR 0 2
59292: ARRAY
59293: PUSH
59294: LD_INT 1
59296: PLUS
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PPUSH
59302: LD_VAR 0 3
59306: PPUSH
59307: CALL 16128 0 3
59311: ST_TO_ADDR
// break ;
59312: GO 59316
// end ; end ; end ;
59314: GO 59150
59316: POP
59317: POP
// end ;
59318: GO 58910
59320: POP
59321: POP
// end ;
59322: LD_VAR 0 1
59326: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
59327: LD_INT 0
59329: PPUSH
59330: PPUSH
59331: PPUSH
59332: PPUSH
59333: PPUSH
59334: PPUSH
59335: PPUSH
59336: PPUSH
59337: PPUSH
// if not mc_bases then
59338: LD_EXP 60
59342: NOT
59343: IFFALSE 59347
// exit ;
59345: GO 59752
// for i = 1 to mc_bases do
59347: LD_ADDR_VAR 0 2
59351: PUSH
59352: DOUBLE
59353: LD_INT 1
59355: DEC
59356: ST_TO_ADDR
59357: LD_EXP 60
59361: PUSH
59362: FOR_TO
59363: IFFALSE 59750
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
59365: LD_EXP 68
59369: PUSH
59370: LD_VAR 0 2
59374: ARRAY
59375: NOT
59376: PUSH
59377: LD_EXP 60
59381: PUSH
59382: LD_VAR 0 2
59386: ARRAY
59387: PPUSH
59388: LD_INT 30
59390: PUSH
59391: LD_INT 3
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PPUSH
59398: CALL_OW 72
59402: NOT
59403: OR
59404: IFFALSE 59408
// continue ;
59406: GO 59362
// busy := false ;
59408: LD_ADDR_VAR 0 8
59412: PUSH
59413: LD_INT 0
59415: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
59416: LD_ADDR_VAR 0 4
59420: PUSH
59421: LD_EXP 60
59425: PUSH
59426: LD_VAR 0 2
59430: ARRAY
59431: PPUSH
59432: LD_INT 30
59434: PUSH
59435: LD_INT 3
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PPUSH
59442: CALL_OW 72
59446: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
59447: LD_ADDR_VAR 0 6
59451: PUSH
59452: LD_EXP 68
59456: PUSH
59457: LD_VAR 0 2
59461: ARRAY
59462: PPUSH
59463: LD_INT 2
59465: PUSH
59466: LD_INT 30
59468: PUSH
59469: LD_INT 32
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 30
59478: PUSH
59479: LD_INT 33
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: LIST
59490: PPUSH
59491: CALL_OW 72
59495: ST_TO_ADDR
// if not t then
59496: LD_VAR 0 6
59500: NOT
59501: IFFALSE 59505
// continue ;
59503: GO 59362
// for j in tmp do
59505: LD_ADDR_VAR 0 3
59509: PUSH
59510: LD_VAR 0 4
59514: PUSH
59515: FOR_IN
59516: IFFALSE 59546
// if not BuildingStatus ( j ) = bs_idle then
59518: LD_VAR 0 3
59522: PPUSH
59523: CALL_OW 461
59527: PUSH
59528: LD_INT 2
59530: EQUAL
59531: NOT
59532: IFFALSE 59544
// begin busy := true ;
59534: LD_ADDR_VAR 0 8
59538: PUSH
59539: LD_INT 1
59541: ST_TO_ADDR
// break ;
59542: GO 59546
// end ;
59544: GO 59515
59546: POP
59547: POP
// if busy then
59548: LD_VAR 0 8
59552: IFFALSE 59556
// continue ;
59554: GO 59362
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
59556: LD_ADDR_VAR 0 7
59560: PUSH
59561: LD_VAR 0 6
59565: PPUSH
59566: LD_INT 35
59568: PUSH
59569: LD_INT 0
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PPUSH
59576: CALL_OW 72
59580: ST_TO_ADDR
// if tw then
59581: LD_VAR 0 7
59585: IFFALSE 59662
// begin tw := tw [ 1 ] ;
59587: LD_ADDR_VAR 0 7
59591: PUSH
59592: LD_VAR 0 7
59596: PUSH
59597: LD_INT 1
59599: ARRAY
59600: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
59601: LD_ADDR_VAR 0 9
59605: PUSH
59606: LD_VAR 0 7
59610: PPUSH
59611: LD_EXP 85
59615: PUSH
59616: LD_VAR 0 2
59620: ARRAY
59621: PPUSH
59622: CALL 21098 0 2
59626: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
59627: LD_EXP 99
59631: PUSH
59632: LD_VAR 0 2
59636: ARRAY
59637: IFFALSE 59660
// if not weapon in mc_allowed_tower_weapons [ i ] then
59639: LD_VAR 0 9
59643: PUSH
59644: LD_EXP 99
59648: PUSH
59649: LD_VAR 0 2
59653: ARRAY
59654: IN
59655: NOT
59656: IFFALSE 59660
// continue ;
59658: GO 59362
// end else
59660: GO 59725
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
59662: LD_ADDR_VAR 0 5
59666: PUSH
59667: LD_EXP 68
59671: PUSH
59672: LD_VAR 0 2
59676: ARRAY
59677: PPUSH
59678: LD_VAR 0 4
59682: PPUSH
59683: CALL 46600 0 2
59687: ST_TO_ADDR
// if not tmp2 then
59688: LD_VAR 0 5
59692: NOT
59693: IFFALSE 59697
// continue ;
59695: GO 59362
// tw := tmp2 [ 1 ] ;
59697: LD_ADDR_VAR 0 7
59701: PUSH
59702: LD_VAR 0 5
59706: PUSH
59707: LD_INT 1
59709: ARRAY
59710: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
59711: LD_ADDR_VAR 0 9
59715: PUSH
59716: LD_VAR 0 5
59720: PUSH
59721: LD_INT 2
59723: ARRAY
59724: ST_TO_ADDR
// end ; if not weapon then
59725: LD_VAR 0 9
59729: NOT
59730: IFFALSE 59734
// continue ;
59732: GO 59362
// ComPlaceWeapon ( tw , weapon ) ;
59734: LD_VAR 0 7
59738: PPUSH
59739: LD_VAR 0 9
59743: PPUSH
59744: CALL_OW 148
// end ;
59748: GO 59362
59750: POP
59751: POP
// end ;
59752: LD_VAR 0 1
59756: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
59757: LD_INT 0
59759: PPUSH
59760: PPUSH
59761: PPUSH
59762: PPUSH
59763: PPUSH
59764: PPUSH
// if not mc_bases then
59765: LD_EXP 60
59769: NOT
59770: IFFALSE 59774
// exit ;
59772: GO 60550
// for i = 1 to mc_bases do
59774: LD_ADDR_VAR 0 2
59778: PUSH
59779: DOUBLE
59780: LD_INT 1
59782: DEC
59783: ST_TO_ADDR
59784: LD_EXP 60
59788: PUSH
59789: FOR_TO
59790: IFFALSE 60548
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
59792: LD_EXP 73
59796: PUSH
59797: LD_VAR 0 2
59801: ARRAY
59802: NOT
59803: PUSH
59804: LD_EXP 73
59808: PUSH
59809: LD_VAR 0 2
59813: ARRAY
59814: PUSH
59815: LD_EXP 74
59819: PUSH
59820: LD_VAR 0 2
59824: ARRAY
59825: EQUAL
59826: OR
59827: PUSH
59828: LD_EXP 83
59832: PUSH
59833: LD_VAR 0 2
59837: ARRAY
59838: OR
59839: IFFALSE 59843
// continue ;
59841: GO 59789
// if mc_miners [ i ] then
59843: LD_EXP 74
59847: PUSH
59848: LD_VAR 0 2
59852: ARRAY
59853: IFFALSE 60235
// begin for j = mc_miners [ i ] downto 1 do
59855: LD_ADDR_VAR 0 3
59859: PUSH
59860: DOUBLE
59861: LD_EXP 74
59865: PUSH
59866: LD_VAR 0 2
59870: ARRAY
59871: INC
59872: ST_TO_ADDR
59873: LD_INT 1
59875: PUSH
59876: FOR_DOWNTO
59877: IFFALSE 60233
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
59879: LD_EXP 74
59883: PUSH
59884: LD_VAR 0 2
59888: ARRAY
59889: PUSH
59890: LD_VAR 0 3
59894: ARRAY
59895: PPUSH
59896: CALL_OW 301
59900: PUSH
59901: LD_EXP 74
59905: PUSH
59906: LD_VAR 0 2
59910: ARRAY
59911: PUSH
59912: LD_VAR 0 3
59916: ARRAY
59917: PPUSH
59918: CALL_OW 257
59922: PUSH
59923: LD_INT 1
59925: NONEQUAL
59926: OR
59927: IFFALSE 59990
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
59929: LD_ADDR_VAR 0 5
59933: PUSH
59934: LD_EXP 74
59938: PUSH
59939: LD_VAR 0 2
59943: ARRAY
59944: PUSH
59945: LD_EXP 74
59949: PUSH
59950: LD_VAR 0 2
59954: ARRAY
59955: PUSH
59956: LD_VAR 0 3
59960: ARRAY
59961: DIFF
59962: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
59963: LD_ADDR_EXP 74
59967: PUSH
59968: LD_EXP 74
59972: PPUSH
59973: LD_VAR 0 2
59977: PPUSH
59978: LD_VAR 0 5
59982: PPUSH
59983: CALL_OW 1
59987: ST_TO_ADDR
// continue ;
59988: GO 59876
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
59990: LD_EXP 74
59994: PUSH
59995: LD_VAR 0 2
59999: ARRAY
60000: PUSH
60001: LD_VAR 0 3
60005: ARRAY
60006: PPUSH
60007: CALL_OW 257
60011: PUSH
60012: LD_INT 1
60014: EQUAL
60015: PUSH
60016: LD_EXP 74
60020: PUSH
60021: LD_VAR 0 2
60025: ARRAY
60026: PUSH
60027: LD_VAR 0 3
60031: ARRAY
60032: PPUSH
60033: CALL_OW 459
60037: NOT
60038: AND
60039: PUSH
60040: LD_EXP 74
60044: PUSH
60045: LD_VAR 0 2
60049: ARRAY
60050: PUSH
60051: LD_VAR 0 3
60055: ARRAY
60056: PPUSH
60057: CALL_OW 314
60061: NOT
60062: AND
60063: IFFALSE 60231
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
60065: LD_EXP 74
60069: PUSH
60070: LD_VAR 0 2
60074: ARRAY
60075: PUSH
60076: LD_VAR 0 3
60080: ARRAY
60081: PPUSH
60082: CALL_OW 310
60086: IFFALSE 60109
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
60088: LD_EXP 74
60092: PUSH
60093: LD_VAR 0 2
60097: ARRAY
60098: PUSH
60099: LD_VAR 0 3
60103: ARRAY
60104: PPUSH
60105: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
60109: LD_EXP 74
60113: PUSH
60114: LD_VAR 0 2
60118: ARRAY
60119: PUSH
60120: LD_VAR 0 3
60124: ARRAY
60125: PPUSH
60126: CALL_OW 314
60130: NOT
60131: IFFALSE 60231
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
60133: LD_EXP 74
60137: PUSH
60138: LD_VAR 0 2
60142: ARRAY
60143: PUSH
60144: LD_VAR 0 3
60148: ARRAY
60149: PPUSH
60150: LD_EXP 73
60154: PUSH
60155: LD_VAR 0 2
60159: ARRAY
60160: PUSH
60161: LD_VAR 0 3
60165: PUSH
60166: LD_EXP 73
60170: PUSH
60171: LD_VAR 0 2
60175: ARRAY
60176: MOD
60177: PUSH
60178: LD_INT 1
60180: PLUS
60181: ARRAY
60182: PUSH
60183: LD_INT 1
60185: ARRAY
60186: PPUSH
60187: LD_EXP 73
60191: PUSH
60192: LD_VAR 0 2
60196: ARRAY
60197: PUSH
60198: LD_VAR 0 3
60202: PUSH
60203: LD_EXP 73
60207: PUSH
60208: LD_VAR 0 2
60212: ARRAY
60213: MOD
60214: PUSH
60215: LD_INT 1
60217: PLUS
60218: ARRAY
60219: PUSH
60220: LD_INT 2
60222: ARRAY
60223: PPUSH
60224: LD_INT 0
60226: PPUSH
60227: CALL_OW 193
// end ; end ;
60231: GO 59876
60233: POP
60234: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
60235: LD_ADDR_VAR 0 5
60239: PUSH
60240: LD_EXP 60
60244: PUSH
60245: LD_VAR 0 2
60249: ARRAY
60250: PPUSH
60251: LD_INT 2
60253: PUSH
60254: LD_INT 30
60256: PUSH
60257: LD_INT 4
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 30
60266: PUSH
60267: LD_INT 5
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 30
60276: PUSH
60277: LD_INT 32
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: PPUSH
60290: CALL_OW 72
60294: ST_TO_ADDR
// if not tmp then
60295: LD_VAR 0 5
60299: NOT
60300: IFFALSE 60304
// continue ;
60302: GO 59789
// list := [ ] ;
60304: LD_ADDR_VAR 0 6
60308: PUSH
60309: EMPTY
60310: ST_TO_ADDR
// for j in tmp do
60311: LD_ADDR_VAR 0 3
60315: PUSH
60316: LD_VAR 0 5
60320: PUSH
60321: FOR_IN
60322: IFFALSE 60391
// begin for k in UnitsInside ( j ) do
60324: LD_ADDR_VAR 0 4
60328: PUSH
60329: LD_VAR 0 3
60333: PPUSH
60334: CALL_OW 313
60338: PUSH
60339: FOR_IN
60340: IFFALSE 60387
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
60342: LD_VAR 0 4
60346: PPUSH
60347: CALL_OW 257
60351: PUSH
60352: LD_INT 1
60354: EQUAL
60355: PUSH
60356: LD_VAR 0 4
60360: PPUSH
60361: CALL_OW 459
60365: NOT
60366: AND
60367: IFFALSE 60385
// list := list ^ k ;
60369: LD_ADDR_VAR 0 6
60373: PUSH
60374: LD_VAR 0 6
60378: PUSH
60379: LD_VAR 0 4
60383: ADD
60384: ST_TO_ADDR
60385: GO 60339
60387: POP
60388: POP
// end ;
60389: GO 60321
60391: POP
60392: POP
// list := list diff mc_miners [ i ] ;
60393: LD_ADDR_VAR 0 6
60397: PUSH
60398: LD_VAR 0 6
60402: PUSH
60403: LD_EXP 74
60407: PUSH
60408: LD_VAR 0 2
60412: ARRAY
60413: DIFF
60414: ST_TO_ADDR
// if not list then
60415: LD_VAR 0 6
60419: NOT
60420: IFFALSE 60424
// continue ;
60422: GO 59789
// k := mc_mines [ i ] - mc_miners [ i ] ;
60424: LD_ADDR_VAR 0 4
60428: PUSH
60429: LD_EXP 73
60433: PUSH
60434: LD_VAR 0 2
60438: ARRAY
60439: PUSH
60440: LD_EXP 74
60444: PUSH
60445: LD_VAR 0 2
60449: ARRAY
60450: MINUS
60451: ST_TO_ADDR
// if k > list then
60452: LD_VAR 0 4
60456: PUSH
60457: LD_VAR 0 6
60461: GREATER
60462: IFFALSE 60474
// k := list ;
60464: LD_ADDR_VAR 0 4
60468: PUSH
60469: LD_VAR 0 6
60473: ST_TO_ADDR
// for j = 1 to k do
60474: LD_ADDR_VAR 0 3
60478: PUSH
60479: DOUBLE
60480: LD_INT 1
60482: DEC
60483: ST_TO_ADDR
60484: LD_VAR 0 4
60488: PUSH
60489: FOR_TO
60490: IFFALSE 60544
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
60492: LD_ADDR_EXP 74
60496: PUSH
60497: LD_EXP 74
60501: PPUSH
60502: LD_VAR 0 2
60506: PUSH
60507: LD_EXP 74
60511: PUSH
60512: LD_VAR 0 2
60516: ARRAY
60517: PUSH
60518: LD_INT 1
60520: PLUS
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PPUSH
60526: LD_VAR 0 6
60530: PUSH
60531: LD_VAR 0 3
60535: ARRAY
60536: PPUSH
60537: CALL 16128 0 3
60541: ST_TO_ADDR
60542: GO 60489
60544: POP
60545: POP
// end ;
60546: GO 59789
60548: POP
60549: POP
// end ;
60550: LD_VAR 0 1
60554: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
60555: LD_INT 0
60557: PPUSH
60558: PPUSH
60559: PPUSH
60560: PPUSH
60561: PPUSH
60562: PPUSH
60563: PPUSH
60564: PPUSH
60565: PPUSH
60566: PPUSH
// if not mc_bases then
60567: LD_EXP 60
60571: NOT
60572: IFFALSE 60576
// exit ;
60574: GO 62326
// for i = 1 to mc_bases do
60576: LD_ADDR_VAR 0 2
60580: PUSH
60581: DOUBLE
60582: LD_INT 1
60584: DEC
60585: ST_TO_ADDR
60586: LD_EXP 60
60590: PUSH
60591: FOR_TO
60592: IFFALSE 62324
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
60594: LD_EXP 60
60598: PUSH
60599: LD_VAR 0 2
60603: ARRAY
60604: NOT
60605: PUSH
60606: LD_EXP 67
60610: PUSH
60611: LD_VAR 0 2
60615: ARRAY
60616: OR
60617: IFFALSE 60621
// continue ;
60619: GO 60591
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
60621: LD_EXP 76
60625: PUSH
60626: LD_VAR 0 2
60630: ARRAY
60631: NOT
60632: PUSH
60633: LD_EXP 77
60637: PUSH
60638: LD_VAR 0 2
60642: ARRAY
60643: AND
60644: IFFALSE 60682
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
60646: LD_ADDR_EXP 77
60650: PUSH
60651: LD_EXP 77
60655: PPUSH
60656: LD_VAR 0 2
60660: PPUSH
60661: EMPTY
60662: PPUSH
60663: CALL_OW 1
60667: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
60668: LD_VAR 0 2
60672: PPUSH
60673: LD_INT 107
60675: PPUSH
60676: CALL 51540 0 2
// continue ;
60680: GO 60591
// end ; target := [ ] ;
60682: LD_ADDR_VAR 0 6
60686: PUSH
60687: EMPTY
60688: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
60689: LD_ADDR_VAR 0 3
60693: PUSH
60694: DOUBLE
60695: LD_EXP 76
60699: PUSH
60700: LD_VAR 0 2
60704: ARRAY
60705: INC
60706: ST_TO_ADDR
60707: LD_INT 1
60709: PUSH
60710: FOR_DOWNTO
60711: IFFALSE 60971
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
60713: LD_EXP 76
60717: PUSH
60718: LD_VAR 0 2
60722: ARRAY
60723: PUSH
60724: LD_VAR 0 3
60728: ARRAY
60729: PUSH
60730: LD_INT 2
60732: ARRAY
60733: PPUSH
60734: LD_EXP 76
60738: PUSH
60739: LD_VAR 0 2
60743: ARRAY
60744: PUSH
60745: LD_VAR 0 3
60749: ARRAY
60750: PUSH
60751: LD_INT 3
60753: ARRAY
60754: PPUSH
60755: CALL_OW 488
60759: PUSH
60760: LD_EXP 76
60764: PUSH
60765: LD_VAR 0 2
60769: ARRAY
60770: PUSH
60771: LD_VAR 0 3
60775: ARRAY
60776: PUSH
60777: LD_INT 2
60779: ARRAY
60780: PPUSH
60781: LD_EXP 76
60785: PUSH
60786: LD_VAR 0 2
60790: ARRAY
60791: PUSH
60792: LD_VAR 0 3
60796: ARRAY
60797: PUSH
60798: LD_INT 3
60800: ARRAY
60801: PPUSH
60802: CALL_OW 284
60806: PUSH
60807: LD_INT 0
60809: EQUAL
60810: AND
60811: IFFALSE 60866
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
60813: LD_ADDR_VAR 0 5
60817: PUSH
60818: LD_EXP 76
60822: PUSH
60823: LD_VAR 0 2
60827: ARRAY
60828: PPUSH
60829: LD_VAR 0 3
60833: PPUSH
60834: CALL_OW 3
60838: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
60839: LD_ADDR_EXP 76
60843: PUSH
60844: LD_EXP 76
60848: PPUSH
60849: LD_VAR 0 2
60853: PPUSH
60854: LD_VAR 0 5
60858: PPUSH
60859: CALL_OW 1
60863: ST_TO_ADDR
// continue ;
60864: GO 60710
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
60866: LD_EXP 60
60870: PUSH
60871: LD_VAR 0 2
60875: ARRAY
60876: PUSH
60877: LD_INT 1
60879: ARRAY
60880: PPUSH
60881: CALL_OW 255
60885: PPUSH
60886: LD_EXP 76
60890: PUSH
60891: LD_VAR 0 2
60895: ARRAY
60896: PUSH
60897: LD_VAR 0 3
60901: ARRAY
60902: PUSH
60903: LD_INT 2
60905: ARRAY
60906: PPUSH
60907: LD_EXP 76
60911: PUSH
60912: LD_VAR 0 2
60916: ARRAY
60917: PUSH
60918: LD_VAR 0 3
60922: ARRAY
60923: PUSH
60924: LD_INT 3
60926: ARRAY
60927: PPUSH
60928: LD_INT 30
60930: PPUSH
60931: CALL 17024 0 4
60935: PUSH
60936: LD_INT 4
60938: ARRAY
60939: PUSH
60940: LD_INT 0
60942: EQUAL
60943: IFFALSE 60969
// begin target := mc_crates [ i ] [ j ] ;
60945: LD_ADDR_VAR 0 6
60949: PUSH
60950: LD_EXP 76
60954: PUSH
60955: LD_VAR 0 2
60959: ARRAY
60960: PUSH
60961: LD_VAR 0 3
60965: ARRAY
60966: ST_TO_ADDR
// break ;
60967: GO 60971
// end ; end ;
60969: GO 60710
60971: POP
60972: POP
// if not target then
60973: LD_VAR 0 6
60977: NOT
60978: IFFALSE 60982
// continue ;
60980: GO 60591
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
60982: LD_ADDR_VAR 0 7
60986: PUSH
60987: LD_EXP 79
60991: PUSH
60992: LD_VAR 0 2
60996: ARRAY
60997: PPUSH
60998: LD_INT 2
61000: PUSH
61001: LD_INT 3
61003: PUSH
61004: LD_INT 58
61006: PUSH
61007: EMPTY
61008: LIST
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 61
61016: PUSH
61017: EMPTY
61018: LIST
61019: PUSH
61020: LD_INT 33
61022: PUSH
61023: LD_INT 5
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 33
61032: PUSH
61033: LD_INT 3
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 2
61049: PUSH
61050: LD_INT 34
61052: PUSH
61053: LD_INT 32
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 34
61062: PUSH
61063: LD_INT 51
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 34
61072: PUSH
61073: LD_INT 12
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PPUSH
61090: CALL_OW 72
61094: ST_TO_ADDR
// if not cargo then
61095: LD_VAR 0 7
61099: NOT
61100: IFFALSE 61743
// begin if mc_crates_collector [ i ] < 5 then
61102: LD_EXP 77
61106: PUSH
61107: LD_VAR 0 2
61111: ARRAY
61112: PUSH
61113: LD_INT 5
61115: LESS
61116: IFFALSE 61482
// begin if mc_ape [ i ] then
61118: LD_EXP 89
61122: PUSH
61123: LD_VAR 0 2
61127: ARRAY
61128: IFFALSE 61175
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
61130: LD_ADDR_VAR 0 5
61134: PUSH
61135: LD_EXP 89
61139: PUSH
61140: LD_VAR 0 2
61144: ARRAY
61145: PPUSH
61146: LD_INT 25
61148: PUSH
61149: LD_INT 16
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 24
61158: PUSH
61159: LD_INT 750
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PPUSH
61170: CALL_OW 72
61174: ST_TO_ADDR
// if not tmp then
61175: LD_VAR 0 5
61179: NOT
61180: IFFALSE 61227
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
61182: LD_ADDR_VAR 0 5
61186: PUSH
61187: LD_EXP 60
61191: PUSH
61192: LD_VAR 0 2
61196: ARRAY
61197: PPUSH
61198: LD_INT 25
61200: PUSH
61201: LD_INT 2
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 24
61210: PUSH
61211: LD_INT 750
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PPUSH
61222: CALL_OW 72
61226: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
61227: LD_EXP 89
61231: PUSH
61232: LD_VAR 0 2
61236: ARRAY
61237: PUSH
61238: LD_EXP 60
61242: PUSH
61243: LD_VAR 0 2
61247: ARRAY
61248: PPUSH
61249: LD_INT 25
61251: PUSH
61252: LD_INT 2
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 24
61261: PUSH
61262: LD_INT 750
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PPUSH
61273: CALL_OW 72
61277: AND
61278: PUSH
61279: LD_VAR 0 5
61283: PUSH
61284: LD_INT 5
61286: LESS
61287: AND
61288: IFFALSE 61370
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
61290: LD_ADDR_VAR 0 3
61294: PUSH
61295: LD_EXP 60
61299: PUSH
61300: LD_VAR 0 2
61304: ARRAY
61305: PPUSH
61306: LD_INT 25
61308: PUSH
61309: LD_INT 2
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 24
61318: PUSH
61319: LD_INT 750
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PPUSH
61330: CALL_OW 72
61334: PUSH
61335: FOR_IN
61336: IFFALSE 61368
// begin tmp := tmp union j ;
61338: LD_ADDR_VAR 0 5
61342: PUSH
61343: LD_VAR 0 5
61347: PUSH
61348: LD_VAR 0 3
61352: UNION
61353: ST_TO_ADDR
// if tmp >= 5 then
61354: LD_VAR 0 5
61358: PUSH
61359: LD_INT 5
61361: GREATEREQUAL
61362: IFFALSE 61366
// break ;
61364: GO 61368
// end ;
61366: GO 61335
61368: POP
61369: POP
// end ; if not tmp then
61370: LD_VAR 0 5
61374: NOT
61375: IFFALSE 61379
// continue ;
61377: GO 60591
// for j in tmp do
61379: LD_ADDR_VAR 0 3
61383: PUSH
61384: LD_VAR 0 5
61388: PUSH
61389: FOR_IN
61390: IFFALSE 61480
// if not GetTag ( j ) then
61392: LD_VAR 0 3
61396: PPUSH
61397: CALL_OW 110
61401: NOT
61402: IFFALSE 61478
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
61404: LD_ADDR_EXP 77
61408: PUSH
61409: LD_EXP 77
61413: PPUSH
61414: LD_VAR 0 2
61418: PUSH
61419: LD_EXP 77
61423: PUSH
61424: LD_VAR 0 2
61428: ARRAY
61429: PUSH
61430: LD_INT 1
61432: PLUS
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PPUSH
61438: LD_VAR 0 3
61442: PPUSH
61443: CALL 16128 0 3
61447: ST_TO_ADDR
// SetTag ( j , 107 ) ;
61448: LD_VAR 0 3
61452: PPUSH
61453: LD_INT 107
61455: PPUSH
61456: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
61460: LD_EXP 77
61464: PUSH
61465: LD_VAR 0 2
61469: ARRAY
61470: PUSH
61471: LD_INT 5
61473: GREATEREQUAL
61474: IFFALSE 61478
// break ;
61476: GO 61480
// end ;
61478: GO 61389
61480: POP
61481: POP
// end ; if mc_crates_collector [ i ] and target then
61482: LD_EXP 77
61486: PUSH
61487: LD_VAR 0 2
61491: ARRAY
61492: PUSH
61493: LD_VAR 0 6
61497: AND
61498: IFFALSE 61741
// begin if mc_crates_collector [ i ] < target [ 1 ] then
61500: LD_EXP 77
61504: PUSH
61505: LD_VAR 0 2
61509: ARRAY
61510: PUSH
61511: LD_VAR 0 6
61515: PUSH
61516: LD_INT 1
61518: ARRAY
61519: LESS
61520: IFFALSE 61540
// tmp := mc_crates_collector [ i ] else
61522: LD_ADDR_VAR 0 5
61526: PUSH
61527: LD_EXP 77
61531: PUSH
61532: LD_VAR 0 2
61536: ARRAY
61537: ST_TO_ADDR
61538: GO 61554
// tmp := target [ 1 ] ;
61540: LD_ADDR_VAR 0 5
61544: PUSH
61545: LD_VAR 0 6
61549: PUSH
61550: LD_INT 1
61552: ARRAY
61553: ST_TO_ADDR
// k := 0 ;
61554: LD_ADDR_VAR 0 4
61558: PUSH
61559: LD_INT 0
61561: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
61562: LD_ADDR_VAR 0 3
61566: PUSH
61567: LD_EXP 77
61571: PUSH
61572: LD_VAR 0 2
61576: ARRAY
61577: PUSH
61578: FOR_IN
61579: IFFALSE 61739
// begin k := k + 1 ;
61581: LD_ADDR_VAR 0 4
61585: PUSH
61586: LD_VAR 0 4
61590: PUSH
61591: LD_INT 1
61593: PLUS
61594: ST_TO_ADDR
// if k > tmp then
61595: LD_VAR 0 4
61599: PUSH
61600: LD_VAR 0 5
61604: GREATER
61605: IFFALSE 61609
// break ;
61607: GO 61739
// if not GetClass ( j ) in [ 2 , 16 ] then
61609: LD_VAR 0 3
61613: PPUSH
61614: CALL_OW 257
61618: PUSH
61619: LD_INT 2
61621: PUSH
61622: LD_INT 16
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: IN
61629: NOT
61630: IFFALSE 61683
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
61632: LD_ADDR_EXP 77
61636: PUSH
61637: LD_EXP 77
61641: PPUSH
61642: LD_VAR 0 2
61646: PPUSH
61647: LD_EXP 77
61651: PUSH
61652: LD_VAR 0 2
61656: ARRAY
61657: PUSH
61658: LD_VAR 0 3
61662: DIFF
61663: PPUSH
61664: CALL_OW 1
61668: ST_TO_ADDR
// SetTag ( j , 0 ) ;
61669: LD_VAR 0 3
61673: PPUSH
61674: LD_INT 0
61676: PPUSH
61677: CALL_OW 109
// continue ;
61681: GO 61578
// end ; if IsInUnit ( j ) then
61683: LD_VAR 0 3
61687: PPUSH
61688: CALL_OW 310
61692: IFFALSE 61703
// ComExitBuilding ( j ) ;
61694: LD_VAR 0 3
61698: PPUSH
61699: CALL_OW 122
// wait ( 3 ) ;
61703: LD_INT 3
61705: PPUSH
61706: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
61710: LD_VAR 0 3
61714: PPUSH
61715: LD_VAR 0 6
61719: PUSH
61720: LD_INT 2
61722: ARRAY
61723: PPUSH
61724: LD_VAR 0 6
61728: PUSH
61729: LD_INT 3
61731: ARRAY
61732: PPUSH
61733: CALL_OW 117
// end ;
61737: GO 61578
61739: POP
61740: POP
// end ; end else
61741: GO 62322
// begin for j in cargo do
61743: LD_ADDR_VAR 0 3
61747: PUSH
61748: LD_VAR 0 7
61752: PUSH
61753: FOR_IN
61754: IFFALSE 62320
// begin if GetTag ( j ) <> 0 then
61756: LD_VAR 0 3
61760: PPUSH
61761: CALL_OW 110
61765: PUSH
61766: LD_INT 0
61768: NONEQUAL
61769: IFFALSE 61773
// continue ;
61771: GO 61753
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
61773: LD_VAR 0 3
61777: PPUSH
61778: CALL_OW 256
61782: PUSH
61783: LD_INT 1000
61785: LESS
61786: PUSH
61787: LD_VAR 0 3
61791: PPUSH
61792: LD_EXP 84
61796: PUSH
61797: LD_VAR 0 2
61801: ARRAY
61802: PPUSH
61803: CALL_OW 308
61807: NOT
61808: AND
61809: IFFALSE 61831
// ComMoveToArea ( j , mc_parking [ i ] ) ;
61811: LD_VAR 0 3
61815: PPUSH
61816: LD_EXP 84
61820: PUSH
61821: LD_VAR 0 2
61825: ARRAY
61826: PPUSH
61827: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
61831: LD_VAR 0 3
61835: PPUSH
61836: CALL_OW 256
61840: PUSH
61841: LD_INT 1000
61843: LESS
61844: PUSH
61845: LD_VAR 0 3
61849: PPUSH
61850: LD_EXP 84
61854: PUSH
61855: LD_VAR 0 2
61859: ARRAY
61860: PPUSH
61861: CALL_OW 308
61865: AND
61866: IFFALSE 61870
// continue ;
61868: GO 61753
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
61870: LD_VAR 0 3
61874: PPUSH
61875: CALL_OW 262
61879: PUSH
61880: LD_INT 2
61882: EQUAL
61883: PUSH
61884: LD_VAR 0 3
61888: PPUSH
61889: CALL_OW 261
61893: PUSH
61894: LD_INT 15
61896: LESS
61897: AND
61898: IFFALSE 61902
// continue ;
61900: GO 61753
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
61902: LD_VAR 0 3
61906: PPUSH
61907: CALL_OW 262
61911: PUSH
61912: LD_INT 1
61914: EQUAL
61915: PUSH
61916: LD_VAR 0 3
61920: PPUSH
61921: CALL_OW 261
61925: PUSH
61926: LD_INT 10
61928: LESS
61929: AND
61930: IFFALSE 62259
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
61932: LD_ADDR_VAR 0 8
61936: PUSH
61937: LD_EXP 60
61941: PUSH
61942: LD_VAR 0 2
61946: ARRAY
61947: PPUSH
61948: LD_INT 2
61950: PUSH
61951: LD_INT 30
61953: PUSH
61954: LD_INT 0
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: LD_INT 30
61963: PUSH
61964: LD_INT 1
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: LIST
61975: PPUSH
61976: CALL_OW 72
61980: ST_TO_ADDR
// if not depot then
61981: LD_VAR 0 8
61985: NOT
61986: IFFALSE 61990
// continue ;
61988: GO 61753
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
61990: LD_VAR 0 3
61994: PPUSH
61995: LD_VAR 0 8
61999: PPUSH
62000: LD_VAR 0 3
62004: PPUSH
62005: CALL_OW 74
62009: PPUSH
62010: CALL_OW 296
62014: PUSH
62015: LD_INT 6
62017: LESS
62018: IFFALSE 62034
// SetFuel ( j , 100 ) else
62020: LD_VAR 0 3
62024: PPUSH
62025: LD_INT 100
62027: PPUSH
62028: CALL_OW 240
62032: GO 62259
// if GetFuel ( j ) = 0 then
62034: LD_VAR 0 3
62038: PPUSH
62039: CALL_OW 261
62043: PUSH
62044: LD_INT 0
62046: EQUAL
62047: IFFALSE 62259
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
62049: LD_ADDR_EXP 79
62053: PUSH
62054: LD_EXP 79
62058: PPUSH
62059: LD_VAR 0 2
62063: PPUSH
62064: LD_EXP 79
62068: PUSH
62069: LD_VAR 0 2
62073: ARRAY
62074: PUSH
62075: LD_VAR 0 3
62079: DIFF
62080: PPUSH
62081: CALL_OW 1
62085: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
62086: LD_VAR 0 3
62090: PPUSH
62091: CALL_OW 263
62095: PUSH
62096: LD_INT 1
62098: EQUAL
62099: IFFALSE 62115
// ComExitVehicle ( IsInUnit ( j ) ) ;
62101: LD_VAR 0 3
62105: PPUSH
62106: CALL_OW 310
62110: PPUSH
62111: CALL_OW 121
// if GetControl ( j ) = control_remote then
62115: LD_VAR 0 3
62119: PPUSH
62120: CALL_OW 263
62124: PUSH
62125: LD_INT 2
62127: EQUAL
62128: IFFALSE 62139
// ComUnlink ( j ) ;
62130: LD_VAR 0 3
62134: PPUSH
62135: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
62139: LD_ADDR_VAR 0 9
62143: PUSH
62144: LD_VAR 0 2
62148: PPUSH
62149: LD_INT 3
62151: PPUSH
62152: CALL 71612 0 2
62156: ST_TO_ADDR
// if fac then
62157: LD_VAR 0 9
62161: IFFALSE 62257
// begin for k in fac do
62163: LD_ADDR_VAR 0 4
62167: PUSH
62168: LD_VAR 0 9
62172: PUSH
62173: FOR_IN
62174: IFFALSE 62255
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
62176: LD_ADDR_VAR 0 10
62180: PUSH
62181: LD_VAR 0 9
62185: PPUSH
62186: LD_VAR 0 3
62190: PPUSH
62191: CALL_OW 265
62195: PPUSH
62196: LD_VAR 0 3
62200: PPUSH
62201: CALL_OW 262
62205: PPUSH
62206: LD_VAR 0 3
62210: PPUSH
62211: CALL_OW 263
62215: PPUSH
62216: LD_VAR 0 3
62220: PPUSH
62221: CALL_OW 264
62225: PPUSH
62226: CALL 13660 0 5
62230: ST_TO_ADDR
// if components then
62231: LD_VAR 0 10
62235: IFFALSE 62253
// begin MC_InsertProduceList ( i , components ) ;
62237: LD_VAR 0 2
62241: PPUSH
62242: LD_VAR 0 10
62246: PPUSH
62247: CALL 71157 0 2
// break ;
62251: GO 62255
// end ; end ;
62253: GO 62173
62255: POP
62256: POP
// end ; continue ;
62257: GO 61753
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
62259: LD_VAR 0 3
62263: PPUSH
62264: LD_INT 1
62266: PPUSH
62267: CALL_OW 289
62271: PUSH
62272: LD_INT 100
62274: LESS
62275: PUSH
62276: LD_VAR 0 3
62280: PPUSH
62281: CALL_OW 314
62285: NOT
62286: AND
62287: IFFALSE 62316
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
62289: LD_VAR 0 3
62293: PPUSH
62294: LD_VAR 0 6
62298: PUSH
62299: LD_INT 2
62301: ARRAY
62302: PPUSH
62303: LD_VAR 0 6
62307: PUSH
62308: LD_INT 3
62310: ARRAY
62311: PPUSH
62312: CALL_OW 117
// break ;
62316: GO 62320
// end ;
62318: GO 61753
62320: POP
62321: POP
// end ; end ;
62322: GO 60591
62324: POP
62325: POP
// end ;
62326: LD_VAR 0 1
62330: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
62331: LD_INT 0
62333: PPUSH
62334: PPUSH
62335: PPUSH
62336: PPUSH
// if not mc_bases then
62337: LD_EXP 60
62341: NOT
62342: IFFALSE 62346
// exit ;
62344: GO 62507
// for i = 1 to mc_bases do
62346: LD_ADDR_VAR 0 2
62350: PUSH
62351: DOUBLE
62352: LD_INT 1
62354: DEC
62355: ST_TO_ADDR
62356: LD_EXP 60
62360: PUSH
62361: FOR_TO
62362: IFFALSE 62505
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
62364: LD_ADDR_VAR 0 4
62368: PUSH
62369: LD_EXP 79
62373: PUSH
62374: LD_VAR 0 2
62378: ARRAY
62379: PUSH
62380: LD_EXP 82
62384: PUSH
62385: LD_VAR 0 2
62389: ARRAY
62390: UNION
62391: PPUSH
62392: LD_INT 33
62394: PUSH
62395: LD_INT 2
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PPUSH
62402: CALL_OW 72
62406: ST_TO_ADDR
// if tmp then
62407: LD_VAR 0 4
62411: IFFALSE 62503
// for j in tmp do
62413: LD_ADDR_VAR 0 3
62417: PUSH
62418: LD_VAR 0 4
62422: PUSH
62423: FOR_IN
62424: IFFALSE 62501
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
62426: LD_VAR 0 3
62430: PPUSH
62431: CALL_OW 312
62435: NOT
62436: PUSH
62437: LD_VAR 0 3
62441: PPUSH
62442: CALL_OW 256
62446: PUSH
62447: LD_INT 250
62449: GREATEREQUAL
62450: AND
62451: IFFALSE 62464
// Connect ( j ) else
62453: LD_VAR 0 3
62457: PPUSH
62458: CALL 19061 0 1
62462: GO 62499
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
62464: LD_VAR 0 3
62468: PPUSH
62469: CALL_OW 256
62473: PUSH
62474: LD_INT 250
62476: LESS
62477: PUSH
62478: LD_VAR 0 3
62482: PPUSH
62483: CALL_OW 312
62487: AND
62488: IFFALSE 62499
// ComUnlink ( j ) ;
62490: LD_VAR 0 3
62494: PPUSH
62495: CALL_OW 136
62499: GO 62423
62501: POP
62502: POP
// end ;
62503: GO 62361
62505: POP
62506: POP
// end ;
62507: LD_VAR 0 1
62511: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
62512: LD_INT 0
62514: PPUSH
62515: PPUSH
62516: PPUSH
62517: PPUSH
62518: PPUSH
// if not mc_bases then
62519: LD_EXP 60
62523: NOT
62524: IFFALSE 62528
// exit ;
62526: GO 62973
// for i = 1 to mc_bases do
62528: LD_ADDR_VAR 0 2
62532: PUSH
62533: DOUBLE
62534: LD_INT 1
62536: DEC
62537: ST_TO_ADDR
62538: LD_EXP 60
62542: PUSH
62543: FOR_TO
62544: IFFALSE 62971
// begin if not mc_produce [ i ] then
62546: LD_EXP 81
62550: PUSH
62551: LD_VAR 0 2
62555: ARRAY
62556: NOT
62557: IFFALSE 62561
// continue ;
62559: GO 62543
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
62561: LD_ADDR_VAR 0 5
62565: PUSH
62566: LD_EXP 60
62570: PUSH
62571: LD_VAR 0 2
62575: ARRAY
62576: PPUSH
62577: LD_INT 30
62579: PUSH
62580: LD_INT 3
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PPUSH
62587: CALL_OW 72
62591: ST_TO_ADDR
// if not fac then
62592: LD_VAR 0 5
62596: NOT
62597: IFFALSE 62601
// continue ;
62599: GO 62543
// for j in fac do
62601: LD_ADDR_VAR 0 3
62605: PUSH
62606: LD_VAR 0 5
62610: PUSH
62611: FOR_IN
62612: IFFALSE 62967
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
62614: LD_VAR 0 3
62618: PPUSH
62619: CALL_OW 461
62623: PUSH
62624: LD_INT 2
62626: NONEQUAL
62627: PUSH
62628: LD_VAR 0 3
62632: PPUSH
62633: LD_INT 15
62635: PPUSH
62636: CALL 18721 0 2
62640: PUSH
62641: LD_INT 4
62643: ARRAY
62644: OR
62645: IFFALSE 62649
// continue ;
62647: GO 62611
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
62649: LD_VAR 0 3
62653: PPUSH
62654: LD_EXP 81
62658: PUSH
62659: LD_VAR 0 2
62663: ARRAY
62664: PUSH
62665: LD_INT 1
62667: ARRAY
62668: PUSH
62669: LD_INT 1
62671: ARRAY
62672: PPUSH
62673: LD_EXP 81
62677: PUSH
62678: LD_VAR 0 2
62682: ARRAY
62683: PUSH
62684: LD_INT 1
62686: ARRAY
62687: PUSH
62688: LD_INT 2
62690: ARRAY
62691: PPUSH
62692: LD_EXP 81
62696: PUSH
62697: LD_VAR 0 2
62701: ARRAY
62702: PUSH
62703: LD_INT 1
62705: ARRAY
62706: PUSH
62707: LD_INT 3
62709: ARRAY
62710: PPUSH
62711: LD_EXP 81
62715: PUSH
62716: LD_VAR 0 2
62720: ARRAY
62721: PUSH
62722: LD_INT 1
62724: ARRAY
62725: PUSH
62726: LD_INT 4
62728: ARRAY
62729: PPUSH
62730: CALL_OW 448
62734: PUSH
62735: LD_VAR 0 3
62739: PPUSH
62740: LD_EXP 81
62744: PUSH
62745: LD_VAR 0 2
62749: ARRAY
62750: PUSH
62751: LD_INT 1
62753: ARRAY
62754: PUSH
62755: LD_INT 1
62757: ARRAY
62758: PUSH
62759: LD_EXP 81
62763: PUSH
62764: LD_VAR 0 2
62768: ARRAY
62769: PUSH
62770: LD_INT 1
62772: ARRAY
62773: PUSH
62774: LD_INT 2
62776: ARRAY
62777: PUSH
62778: LD_EXP 81
62782: PUSH
62783: LD_VAR 0 2
62787: ARRAY
62788: PUSH
62789: LD_INT 1
62791: ARRAY
62792: PUSH
62793: LD_INT 3
62795: ARRAY
62796: PUSH
62797: LD_EXP 81
62801: PUSH
62802: LD_VAR 0 2
62806: ARRAY
62807: PUSH
62808: LD_INT 1
62810: ARRAY
62811: PUSH
62812: LD_INT 4
62814: ARRAY
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: PPUSH
62822: CALL 22392 0 2
62826: AND
62827: IFFALSE 62965
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
62829: LD_VAR 0 3
62833: PPUSH
62834: LD_EXP 81
62838: PUSH
62839: LD_VAR 0 2
62843: ARRAY
62844: PUSH
62845: LD_INT 1
62847: ARRAY
62848: PUSH
62849: LD_INT 1
62851: ARRAY
62852: PPUSH
62853: LD_EXP 81
62857: PUSH
62858: LD_VAR 0 2
62862: ARRAY
62863: PUSH
62864: LD_INT 1
62866: ARRAY
62867: PUSH
62868: LD_INT 2
62870: ARRAY
62871: PPUSH
62872: LD_EXP 81
62876: PUSH
62877: LD_VAR 0 2
62881: ARRAY
62882: PUSH
62883: LD_INT 1
62885: ARRAY
62886: PUSH
62887: LD_INT 3
62889: ARRAY
62890: PPUSH
62891: LD_EXP 81
62895: PUSH
62896: LD_VAR 0 2
62900: ARRAY
62901: PUSH
62902: LD_INT 1
62904: ARRAY
62905: PUSH
62906: LD_INT 4
62908: ARRAY
62909: PPUSH
62910: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
62914: LD_ADDR_VAR 0 4
62918: PUSH
62919: LD_EXP 81
62923: PUSH
62924: LD_VAR 0 2
62928: ARRAY
62929: PPUSH
62930: LD_INT 1
62932: PPUSH
62933: CALL_OW 3
62937: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
62938: LD_ADDR_EXP 81
62942: PUSH
62943: LD_EXP 81
62947: PPUSH
62948: LD_VAR 0 2
62952: PPUSH
62953: LD_VAR 0 4
62957: PPUSH
62958: CALL_OW 1
62962: ST_TO_ADDR
// break ;
62963: GO 62967
// end ; end ;
62965: GO 62611
62967: POP
62968: POP
// end ;
62969: GO 62543
62971: POP
62972: POP
// end ;
62973: LD_VAR 0 1
62977: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
62978: LD_INT 0
62980: PPUSH
62981: PPUSH
62982: PPUSH
// if not mc_bases then
62983: LD_EXP 60
62987: NOT
62988: IFFALSE 62992
// exit ;
62990: GO 63081
// for i = 1 to mc_bases do
62992: LD_ADDR_VAR 0 2
62996: PUSH
62997: DOUBLE
62998: LD_INT 1
63000: DEC
63001: ST_TO_ADDR
63002: LD_EXP 60
63006: PUSH
63007: FOR_TO
63008: IFFALSE 63079
// begin if mc_attack [ i ] then
63010: LD_EXP 80
63014: PUSH
63015: LD_VAR 0 2
63019: ARRAY
63020: IFFALSE 63077
// begin tmp := mc_attack [ i ] [ 1 ] ;
63022: LD_ADDR_VAR 0 3
63026: PUSH
63027: LD_EXP 80
63031: PUSH
63032: LD_VAR 0 2
63036: ARRAY
63037: PUSH
63038: LD_INT 1
63040: ARRAY
63041: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
63042: LD_ADDR_EXP 80
63046: PUSH
63047: LD_EXP 80
63051: PPUSH
63052: LD_VAR 0 2
63056: PPUSH
63057: EMPTY
63058: PPUSH
63059: CALL_OW 1
63063: ST_TO_ADDR
// Attack ( tmp ) ;
63064: LD_VAR 0 3
63068: PPUSH
63069: CALL 89098 0 1
// exit ;
63073: POP
63074: POP
63075: GO 63081
// end ; end ;
63077: GO 63007
63079: POP
63080: POP
// end ;
63081: LD_VAR 0 1
63085: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
63086: LD_INT 0
63088: PPUSH
63089: PPUSH
63090: PPUSH
63091: PPUSH
63092: PPUSH
63093: PPUSH
63094: PPUSH
// if not mc_bases then
63095: LD_EXP 60
63099: NOT
63100: IFFALSE 63104
// exit ;
63102: GO 63686
// for i = 1 to mc_bases do
63104: LD_ADDR_VAR 0 2
63108: PUSH
63109: DOUBLE
63110: LD_INT 1
63112: DEC
63113: ST_TO_ADDR
63114: LD_EXP 60
63118: PUSH
63119: FOR_TO
63120: IFFALSE 63684
// begin if not mc_bases [ i ] then
63122: LD_EXP 60
63126: PUSH
63127: LD_VAR 0 2
63131: ARRAY
63132: NOT
63133: IFFALSE 63137
// continue ;
63135: GO 63119
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
63137: LD_ADDR_VAR 0 7
63141: PUSH
63142: LD_EXP 60
63146: PUSH
63147: LD_VAR 0 2
63151: ARRAY
63152: PUSH
63153: LD_INT 1
63155: ARRAY
63156: PPUSH
63157: CALL 12964 0 1
63161: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
63162: LD_ADDR_EXP 83
63166: PUSH
63167: LD_EXP 83
63171: PPUSH
63172: LD_VAR 0 2
63176: PPUSH
63177: LD_EXP 60
63181: PUSH
63182: LD_VAR 0 2
63186: ARRAY
63187: PUSH
63188: LD_INT 1
63190: ARRAY
63191: PPUSH
63192: CALL_OW 255
63196: PPUSH
63197: LD_EXP 85
63201: PUSH
63202: LD_VAR 0 2
63206: ARRAY
63207: PPUSH
63208: CALL 12929 0 2
63212: PPUSH
63213: CALL_OW 1
63217: ST_TO_ADDR
// if not mc_scan [ i ] then
63218: LD_EXP 83
63222: PUSH
63223: LD_VAR 0 2
63227: ARRAY
63228: NOT
63229: IFFALSE 63384
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
63231: LD_ADDR_VAR 0 4
63235: PUSH
63236: LD_EXP 60
63240: PUSH
63241: LD_VAR 0 2
63245: ARRAY
63246: PPUSH
63247: LD_INT 2
63249: PUSH
63250: LD_INT 25
63252: PUSH
63253: LD_INT 5
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 25
63262: PUSH
63263: LD_INT 8
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 25
63272: PUSH
63273: LD_INT 9
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: PPUSH
63286: CALL_OW 72
63290: ST_TO_ADDR
// if not tmp then
63291: LD_VAR 0 4
63295: NOT
63296: IFFALSE 63300
// continue ;
63298: GO 63119
// for j in tmp do
63300: LD_ADDR_VAR 0 3
63304: PUSH
63305: LD_VAR 0 4
63309: PUSH
63310: FOR_IN
63311: IFFALSE 63382
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
63313: LD_VAR 0 3
63317: PPUSH
63318: CALL_OW 310
63322: PPUSH
63323: CALL_OW 266
63327: PUSH
63328: LD_INT 5
63330: EQUAL
63331: PUSH
63332: LD_VAR 0 3
63336: PPUSH
63337: CALL_OW 257
63341: PUSH
63342: LD_INT 1
63344: EQUAL
63345: AND
63346: PUSH
63347: LD_VAR 0 3
63351: PPUSH
63352: CALL_OW 459
63356: NOT
63357: AND
63358: PUSH
63359: LD_VAR 0 7
63363: AND
63364: IFFALSE 63380
// ComChangeProfession ( j , class ) ;
63366: LD_VAR 0 3
63370: PPUSH
63371: LD_VAR 0 7
63375: PPUSH
63376: CALL_OW 123
63380: GO 63310
63382: POP
63383: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
63384: LD_EXP 83
63388: PUSH
63389: LD_VAR 0 2
63393: ARRAY
63394: PUSH
63395: LD_EXP 82
63399: PUSH
63400: LD_VAR 0 2
63404: ARRAY
63405: NOT
63406: AND
63407: PUSH
63408: LD_EXP 60
63412: PUSH
63413: LD_VAR 0 2
63417: ARRAY
63418: PPUSH
63419: LD_INT 30
63421: PUSH
63422: LD_INT 32
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: PPUSH
63429: CALL_OW 72
63433: NOT
63434: AND
63435: PUSH
63436: LD_EXP 60
63440: PUSH
63441: LD_VAR 0 2
63445: ARRAY
63446: PPUSH
63447: LD_INT 2
63449: PUSH
63450: LD_INT 30
63452: PUSH
63453: LD_INT 4
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 30
63462: PUSH
63463: LD_INT 5
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: LIST
63474: PPUSH
63475: CALL_OW 72
63479: NOT
63480: AND
63481: IFFALSE 63613
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
63483: LD_ADDR_VAR 0 4
63487: PUSH
63488: LD_EXP 60
63492: PUSH
63493: LD_VAR 0 2
63497: ARRAY
63498: PPUSH
63499: LD_INT 2
63501: PUSH
63502: LD_INT 25
63504: PUSH
63505: LD_INT 1
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: LD_INT 25
63514: PUSH
63515: LD_INT 5
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 25
63524: PUSH
63525: LD_INT 8
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 25
63534: PUSH
63535: LD_INT 9
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: PPUSH
63549: CALL_OW 72
63553: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
63554: LD_ADDR_VAR 0 4
63558: PUSH
63559: LD_VAR 0 4
63563: PUSH
63564: LD_VAR 0 4
63568: PPUSH
63569: LD_INT 18
63571: PPUSH
63572: CALL 44689 0 2
63576: DIFF
63577: ST_TO_ADDR
// if tmp then
63578: LD_VAR 0 4
63582: IFFALSE 63613
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
63584: LD_VAR 0 2
63588: PPUSH
63589: LD_VAR 0 4
63593: PPUSH
63594: LD_EXP 85
63598: PUSH
63599: LD_VAR 0 2
63603: ARRAY
63604: PPUSH
63605: CALL 93807 0 3
// exit ;
63609: POP
63610: POP
63611: GO 63686
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
63613: LD_EXP 83
63617: PUSH
63618: LD_VAR 0 2
63622: ARRAY
63623: PUSH
63624: LD_EXP 82
63628: PUSH
63629: LD_VAR 0 2
63633: ARRAY
63634: AND
63635: IFFALSE 63682
// begin tmp := mc_defender [ i ] ;
63637: LD_ADDR_VAR 0 4
63641: PUSH
63642: LD_EXP 82
63646: PUSH
63647: LD_VAR 0 2
63651: ARRAY
63652: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
63653: LD_VAR 0 2
63657: PPUSH
63658: LD_VAR 0 4
63662: PPUSH
63663: LD_EXP 83
63667: PUSH
63668: LD_VAR 0 2
63672: ARRAY
63673: PPUSH
63674: CALL 94368 0 3
// exit ;
63678: POP
63679: POP
63680: GO 63686
// end ; end ;
63682: GO 63119
63684: POP
63685: POP
// end ;
63686: LD_VAR 0 1
63690: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
63691: LD_INT 0
63693: PPUSH
63694: PPUSH
63695: PPUSH
63696: PPUSH
63697: PPUSH
63698: PPUSH
63699: PPUSH
63700: PPUSH
63701: PPUSH
63702: PPUSH
63703: PPUSH
// if not mc_bases then
63704: LD_EXP 60
63708: NOT
63709: IFFALSE 63713
// exit ;
63711: GO 64800
// for i = 1 to mc_bases do
63713: LD_ADDR_VAR 0 2
63717: PUSH
63718: DOUBLE
63719: LD_INT 1
63721: DEC
63722: ST_TO_ADDR
63723: LD_EXP 60
63727: PUSH
63728: FOR_TO
63729: IFFALSE 64798
// begin tmp := mc_lab [ i ] ;
63731: LD_ADDR_VAR 0 6
63735: PUSH
63736: LD_EXP 93
63740: PUSH
63741: LD_VAR 0 2
63745: ARRAY
63746: ST_TO_ADDR
// if not tmp then
63747: LD_VAR 0 6
63751: NOT
63752: IFFALSE 63756
// continue ;
63754: GO 63728
// idle_lab := 0 ;
63756: LD_ADDR_VAR 0 11
63760: PUSH
63761: LD_INT 0
63763: ST_TO_ADDR
// for j in tmp do
63764: LD_ADDR_VAR 0 3
63768: PUSH
63769: LD_VAR 0 6
63773: PUSH
63774: FOR_IN
63775: IFFALSE 64794
// begin researching := false ;
63777: LD_ADDR_VAR 0 10
63781: PUSH
63782: LD_INT 0
63784: ST_TO_ADDR
// side := GetSide ( j ) ;
63785: LD_ADDR_VAR 0 4
63789: PUSH
63790: LD_VAR 0 3
63794: PPUSH
63795: CALL_OW 255
63799: ST_TO_ADDR
// if not mc_tech [ side ] then
63800: LD_EXP 87
63804: PUSH
63805: LD_VAR 0 4
63809: ARRAY
63810: NOT
63811: IFFALSE 63815
// continue ;
63813: GO 63774
// if BuildingStatus ( j ) = bs_idle then
63815: LD_VAR 0 3
63819: PPUSH
63820: CALL_OW 461
63824: PUSH
63825: LD_INT 2
63827: EQUAL
63828: IFFALSE 64016
// begin if idle_lab and UnitsInside ( j ) < 6 then
63830: LD_VAR 0 11
63834: PUSH
63835: LD_VAR 0 3
63839: PPUSH
63840: CALL_OW 313
63844: PUSH
63845: LD_INT 6
63847: LESS
63848: AND
63849: IFFALSE 63920
// begin tmp2 := UnitsInside ( idle_lab ) ;
63851: LD_ADDR_VAR 0 9
63855: PUSH
63856: LD_VAR 0 11
63860: PPUSH
63861: CALL_OW 313
63865: ST_TO_ADDR
// if tmp2 then
63866: LD_VAR 0 9
63870: IFFALSE 63912
// for x in tmp2 do
63872: LD_ADDR_VAR 0 7
63876: PUSH
63877: LD_VAR 0 9
63881: PUSH
63882: FOR_IN
63883: IFFALSE 63910
// begin ComExitBuilding ( x ) ;
63885: LD_VAR 0 7
63889: PPUSH
63890: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
63894: LD_VAR 0 7
63898: PPUSH
63899: LD_VAR 0 3
63903: PPUSH
63904: CALL_OW 180
// end ;
63908: GO 63882
63910: POP
63911: POP
// idle_lab := 0 ;
63912: LD_ADDR_VAR 0 11
63916: PUSH
63917: LD_INT 0
63919: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
63920: LD_ADDR_VAR 0 5
63924: PUSH
63925: LD_EXP 87
63929: PUSH
63930: LD_VAR 0 4
63934: ARRAY
63935: PUSH
63936: FOR_IN
63937: IFFALSE 63997
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
63939: LD_VAR 0 3
63943: PPUSH
63944: LD_VAR 0 5
63948: PPUSH
63949: CALL_OW 430
63953: PUSH
63954: LD_VAR 0 4
63958: PPUSH
63959: LD_VAR 0 5
63963: PPUSH
63964: CALL 12034 0 2
63968: AND
63969: IFFALSE 63995
// begin researching := true ;
63971: LD_ADDR_VAR 0 10
63975: PUSH
63976: LD_INT 1
63978: ST_TO_ADDR
// ComResearch ( j , t ) ;
63979: LD_VAR 0 3
63983: PPUSH
63984: LD_VAR 0 5
63988: PPUSH
63989: CALL_OW 124
// break ;
63993: GO 63997
// end ;
63995: GO 63936
63997: POP
63998: POP
// if not researching then
63999: LD_VAR 0 10
64003: NOT
64004: IFFALSE 64016
// idle_lab := j ;
64006: LD_ADDR_VAR 0 11
64010: PUSH
64011: LD_VAR 0 3
64015: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
64016: LD_VAR 0 3
64020: PPUSH
64021: CALL_OW 461
64025: PUSH
64026: LD_INT 10
64028: EQUAL
64029: IFFALSE 64617
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
64031: LD_EXP 89
64035: PUSH
64036: LD_VAR 0 2
64040: ARRAY
64041: NOT
64042: PUSH
64043: LD_EXP 90
64047: PUSH
64048: LD_VAR 0 2
64052: ARRAY
64053: NOT
64054: AND
64055: PUSH
64056: LD_EXP 87
64060: PUSH
64061: LD_VAR 0 4
64065: ARRAY
64066: PUSH
64067: LD_INT 1
64069: GREATER
64070: AND
64071: IFFALSE 64202
// begin ComCancel ( j ) ;
64073: LD_VAR 0 3
64077: PPUSH
64078: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
64082: LD_ADDR_EXP 87
64086: PUSH
64087: LD_EXP 87
64091: PPUSH
64092: LD_VAR 0 4
64096: PPUSH
64097: LD_EXP 87
64101: PUSH
64102: LD_VAR 0 4
64106: ARRAY
64107: PPUSH
64108: LD_EXP 87
64112: PUSH
64113: LD_VAR 0 4
64117: ARRAY
64118: PUSH
64119: LD_INT 1
64121: MINUS
64122: PPUSH
64123: LD_EXP 87
64127: PUSH
64128: LD_VAR 0 4
64132: ARRAY
64133: PPUSH
64134: LD_INT 0
64136: PPUSH
64137: CALL 15546 0 4
64141: PPUSH
64142: CALL_OW 1
64146: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
64147: LD_ADDR_EXP 87
64151: PUSH
64152: LD_EXP 87
64156: PPUSH
64157: LD_VAR 0 4
64161: PPUSH
64162: LD_EXP 87
64166: PUSH
64167: LD_VAR 0 4
64171: ARRAY
64172: PPUSH
64173: LD_EXP 87
64177: PUSH
64178: LD_VAR 0 4
64182: ARRAY
64183: PPUSH
64184: LD_INT 1
64186: PPUSH
64187: LD_INT 0
64189: PPUSH
64190: CALL 15546 0 4
64194: PPUSH
64195: CALL_OW 1
64199: ST_TO_ADDR
// continue ;
64200: GO 63774
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
64202: LD_EXP 89
64206: PUSH
64207: LD_VAR 0 2
64211: ARRAY
64212: PUSH
64213: LD_EXP 90
64217: PUSH
64218: LD_VAR 0 2
64222: ARRAY
64223: NOT
64224: AND
64225: IFFALSE 64352
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
64227: LD_ADDR_EXP 90
64231: PUSH
64232: LD_EXP 90
64236: PPUSH
64237: LD_VAR 0 2
64241: PUSH
64242: LD_EXP 90
64246: PUSH
64247: LD_VAR 0 2
64251: ARRAY
64252: PUSH
64253: LD_INT 1
64255: PLUS
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PPUSH
64261: LD_EXP 89
64265: PUSH
64266: LD_VAR 0 2
64270: ARRAY
64271: PUSH
64272: LD_INT 1
64274: ARRAY
64275: PPUSH
64276: CALL 16128 0 3
64280: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
64281: LD_EXP 89
64285: PUSH
64286: LD_VAR 0 2
64290: ARRAY
64291: PUSH
64292: LD_INT 1
64294: ARRAY
64295: PPUSH
64296: LD_INT 112
64298: PPUSH
64299: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
64303: LD_ADDR_VAR 0 9
64307: PUSH
64308: LD_EXP 89
64312: PUSH
64313: LD_VAR 0 2
64317: ARRAY
64318: PPUSH
64319: LD_INT 1
64321: PPUSH
64322: CALL_OW 3
64326: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
64327: LD_ADDR_EXP 89
64331: PUSH
64332: LD_EXP 89
64336: PPUSH
64337: LD_VAR 0 2
64341: PPUSH
64342: LD_VAR 0 9
64346: PPUSH
64347: CALL_OW 1
64351: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
64352: LD_EXP 89
64356: PUSH
64357: LD_VAR 0 2
64361: ARRAY
64362: PUSH
64363: LD_EXP 90
64367: PUSH
64368: LD_VAR 0 2
64372: ARRAY
64373: AND
64374: PUSH
64375: LD_EXP 90
64379: PUSH
64380: LD_VAR 0 2
64384: ARRAY
64385: PUSH
64386: LD_INT 1
64388: ARRAY
64389: PPUSH
64390: CALL_OW 310
64394: NOT
64395: AND
64396: PUSH
64397: LD_VAR 0 3
64401: PPUSH
64402: CALL_OW 313
64406: PUSH
64407: LD_INT 6
64409: EQUAL
64410: AND
64411: IFFALSE 64467
// begin tmp2 := UnitsInside ( j ) ;
64413: LD_ADDR_VAR 0 9
64417: PUSH
64418: LD_VAR 0 3
64422: PPUSH
64423: CALL_OW 313
64427: ST_TO_ADDR
// if tmp2 = 6 then
64428: LD_VAR 0 9
64432: PUSH
64433: LD_INT 6
64435: EQUAL
64436: IFFALSE 64467
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
64438: LD_VAR 0 9
64442: PUSH
64443: LD_INT 1
64445: ARRAY
64446: PPUSH
64447: LD_INT 112
64449: PPUSH
64450: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
64454: LD_VAR 0 9
64458: PUSH
64459: LD_INT 1
64461: ARRAY
64462: PPUSH
64463: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
64467: LD_EXP 90
64471: PUSH
64472: LD_VAR 0 2
64476: ARRAY
64477: PUSH
64478: LD_EXP 90
64482: PUSH
64483: LD_VAR 0 2
64487: ARRAY
64488: PUSH
64489: LD_INT 1
64491: ARRAY
64492: PPUSH
64493: CALL_OW 314
64497: NOT
64498: AND
64499: PUSH
64500: LD_EXP 90
64504: PUSH
64505: LD_VAR 0 2
64509: ARRAY
64510: PUSH
64511: LD_INT 1
64513: ARRAY
64514: PPUSH
64515: CALL_OW 310
64519: NOT
64520: AND
64521: IFFALSE 64547
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
64523: LD_EXP 90
64527: PUSH
64528: LD_VAR 0 2
64532: ARRAY
64533: PUSH
64534: LD_INT 1
64536: ARRAY
64537: PPUSH
64538: LD_VAR 0 3
64542: PPUSH
64543: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
64547: LD_EXP 90
64551: PUSH
64552: LD_VAR 0 2
64556: ARRAY
64557: PUSH
64558: LD_INT 1
64560: ARRAY
64561: PPUSH
64562: CALL_OW 310
64566: PUSH
64567: LD_EXP 90
64571: PUSH
64572: LD_VAR 0 2
64576: ARRAY
64577: PUSH
64578: LD_INT 1
64580: ARRAY
64581: PPUSH
64582: CALL_OW 310
64586: PPUSH
64587: CALL_OW 461
64591: PUSH
64592: LD_INT 3
64594: NONEQUAL
64595: AND
64596: IFFALSE 64617
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
64598: LD_EXP 90
64602: PUSH
64603: LD_VAR 0 2
64607: ARRAY
64608: PUSH
64609: LD_INT 1
64611: ARRAY
64612: PPUSH
64613: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
64617: LD_VAR 0 3
64621: PPUSH
64622: CALL_OW 461
64626: PUSH
64627: LD_INT 6
64629: EQUAL
64630: PUSH
64631: LD_VAR 0 6
64635: PUSH
64636: LD_INT 1
64638: GREATER
64639: AND
64640: IFFALSE 64792
// begin sci := [ ] ;
64642: LD_ADDR_VAR 0 8
64646: PUSH
64647: EMPTY
64648: ST_TO_ADDR
// for x in ( tmp diff j ) do
64649: LD_ADDR_VAR 0 7
64653: PUSH
64654: LD_VAR 0 6
64658: PUSH
64659: LD_VAR 0 3
64663: DIFF
64664: PUSH
64665: FOR_IN
64666: IFFALSE 64718
// begin if sci = 6 then
64668: LD_VAR 0 8
64672: PUSH
64673: LD_INT 6
64675: EQUAL
64676: IFFALSE 64680
// break ;
64678: GO 64718
// if BuildingStatus ( x ) = bs_idle then
64680: LD_VAR 0 7
64684: PPUSH
64685: CALL_OW 461
64689: PUSH
64690: LD_INT 2
64692: EQUAL
64693: IFFALSE 64716
// sci := sci ^ UnitsInside ( x ) ;
64695: LD_ADDR_VAR 0 8
64699: PUSH
64700: LD_VAR 0 8
64704: PUSH
64705: LD_VAR 0 7
64709: PPUSH
64710: CALL_OW 313
64714: ADD
64715: ST_TO_ADDR
// end ;
64716: GO 64665
64718: POP
64719: POP
// if not sci then
64720: LD_VAR 0 8
64724: NOT
64725: IFFALSE 64729
// continue ;
64727: GO 63774
// for x in sci do
64729: LD_ADDR_VAR 0 7
64733: PUSH
64734: LD_VAR 0 8
64738: PUSH
64739: FOR_IN
64740: IFFALSE 64790
// if IsInUnit ( x ) and not HasTask ( x ) then
64742: LD_VAR 0 7
64746: PPUSH
64747: CALL_OW 310
64751: PUSH
64752: LD_VAR 0 7
64756: PPUSH
64757: CALL_OW 314
64761: NOT
64762: AND
64763: IFFALSE 64788
// begin ComExitBuilding ( x ) ;
64765: LD_VAR 0 7
64769: PPUSH
64770: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
64774: LD_VAR 0 7
64778: PPUSH
64779: LD_VAR 0 3
64783: PPUSH
64784: CALL_OW 180
// end ;
64788: GO 64739
64790: POP
64791: POP
// end ; end ;
64792: GO 63774
64794: POP
64795: POP
// end ;
64796: GO 63728
64798: POP
64799: POP
// end ;
64800: LD_VAR 0 1
64804: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
64805: LD_INT 0
64807: PPUSH
64808: PPUSH
// if not mc_bases then
64809: LD_EXP 60
64813: NOT
64814: IFFALSE 64818
// exit ;
64816: GO 64899
// for i = 1 to mc_bases do
64818: LD_ADDR_VAR 0 2
64822: PUSH
64823: DOUBLE
64824: LD_INT 1
64826: DEC
64827: ST_TO_ADDR
64828: LD_EXP 60
64832: PUSH
64833: FOR_TO
64834: IFFALSE 64897
// if mc_mines [ i ] and mc_miners [ i ] then
64836: LD_EXP 73
64840: PUSH
64841: LD_VAR 0 2
64845: ARRAY
64846: PUSH
64847: LD_EXP 74
64851: PUSH
64852: LD_VAR 0 2
64856: ARRAY
64857: AND
64858: IFFALSE 64895
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
64860: LD_EXP 74
64864: PUSH
64865: LD_VAR 0 2
64869: ARRAY
64870: PUSH
64871: LD_INT 1
64873: ARRAY
64874: PPUSH
64875: CALL_OW 255
64879: PPUSH
64880: LD_EXP 73
64884: PUSH
64885: LD_VAR 0 2
64889: ARRAY
64890: PPUSH
64891: CALL 13117 0 2
64895: GO 64833
64897: POP
64898: POP
// end ;
64899: LD_VAR 0 1
64903: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
64904: LD_INT 0
64906: PPUSH
64907: PPUSH
64908: PPUSH
64909: PPUSH
64910: PPUSH
64911: PPUSH
64912: PPUSH
64913: PPUSH
// if not mc_bases or not mc_parking then
64914: LD_EXP 60
64918: NOT
64919: PUSH
64920: LD_EXP 84
64924: NOT
64925: OR
64926: IFFALSE 64930
// exit ;
64928: GO 65629
// for i = 1 to mc_bases do
64930: LD_ADDR_VAR 0 2
64934: PUSH
64935: DOUBLE
64936: LD_INT 1
64938: DEC
64939: ST_TO_ADDR
64940: LD_EXP 60
64944: PUSH
64945: FOR_TO
64946: IFFALSE 65627
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
64948: LD_EXP 60
64952: PUSH
64953: LD_VAR 0 2
64957: ARRAY
64958: NOT
64959: PUSH
64960: LD_EXP 84
64964: PUSH
64965: LD_VAR 0 2
64969: ARRAY
64970: NOT
64971: OR
64972: IFFALSE 64976
// continue ;
64974: GO 64945
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
64976: LD_ADDR_VAR 0 5
64980: PUSH
64981: LD_EXP 60
64985: PUSH
64986: LD_VAR 0 2
64990: ARRAY
64991: PUSH
64992: LD_INT 1
64994: ARRAY
64995: PPUSH
64996: CALL_OW 255
65000: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
65001: LD_ADDR_VAR 0 6
65005: PUSH
65006: LD_EXP 60
65010: PUSH
65011: LD_VAR 0 2
65015: ARRAY
65016: PPUSH
65017: LD_INT 30
65019: PUSH
65020: LD_INT 3
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: PPUSH
65027: CALL_OW 72
65031: ST_TO_ADDR
// if not fac then
65032: LD_VAR 0 6
65036: NOT
65037: IFFALSE 65088
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
65039: LD_ADDR_VAR 0 6
65043: PUSH
65044: LD_EXP 60
65048: PUSH
65049: LD_VAR 0 2
65053: ARRAY
65054: PPUSH
65055: LD_INT 2
65057: PUSH
65058: LD_INT 30
65060: PUSH
65061: LD_INT 0
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: LD_INT 30
65070: PUSH
65071: LD_INT 1
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: LIST
65082: PPUSH
65083: CALL_OW 72
65087: ST_TO_ADDR
// if not fac then
65088: LD_VAR 0 6
65092: NOT
65093: IFFALSE 65097
// continue ;
65095: GO 64945
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
65097: LD_ADDR_VAR 0 7
65101: PUSH
65102: LD_EXP 84
65106: PUSH
65107: LD_VAR 0 2
65111: ARRAY
65112: PPUSH
65113: LD_INT 22
65115: PUSH
65116: LD_VAR 0 5
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: PUSH
65125: LD_INT 21
65127: PUSH
65128: LD_INT 2
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: LD_INT 3
65137: PUSH
65138: LD_INT 24
65140: PUSH
65141: LD_INT 1000
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: LIST
65156: PPUSH
65157: CALL_OW 70
65161: ST_TO_ADDR
// for j in fac do
65162: LD_ADDR_VAR 0 3
65166: PUSH
65167: LD_VAR 0 6
65171: PUSH
65172: FOR_IN
65173: IFFALSE 65254
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
65175: LD_ADDR_VAR 0 7
65179: PUSH
65180: LD_VAR 0 7
65184: PUSH
65185: LD_INT 22
65187: PUSH
65188: LD_VAR 0 5
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 91
65199: PUSH
65200: LD_VAR 0 3
65204: PUSH
65205: LD_INT 15
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 21
65215: PUSH
65216: LD_INT 2
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 3
65225: PUSH
65226: LD_INT 24
65228: PUSH
65229: LD_INT 1000
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: PPUSH
65246: CALL_OW 69
65250: UNION
65251: ST_TO_ADDR
65252: GO 65172
65254: POP
65255: POP
// if not vehs then
65256: LD_VAR 0 7
65260: NOT
65261: IFFALSE 65287
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
65263: LD_ADDR_EXP 72
65267: PUSH
65268: LD_EXP 72
65272: PPUSH
65273: LD_VAR 0 2
65277: PPUSH
65278: EMPTY
65279: PPUSH
65280: CALL_OW 1
65284: ST_TO_ADDR
// continue ;
65285: GO 64945
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
65287: LD_ADDR_VAR 0 8
65291: PUSH
65292: LD_EXP 60
65296: PUSH
65297: LD_VAR 0 2
65301: ARRAY
65302: PPUSH
65303: LD_INT 30
65305: PUSH
65306: LD_INT 3
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PPUSH
65313: CALL_OW 72
65317: ST_TO_ADDR
// if tmp then
65318: LD_VAR 0 8
65322: IFFALSE 65425
// begin for j in tmp do
65324: LD_ADDR_VAR 0 3
65328: PUSH
65329: LD_VAR 0 8
65333: PUSH
65334: FOR_IN
65335: IFFALSE 65423
// for k in UnitsInside ( j ) do
65337: LD_ADDR_VAR 0 4
65341: PUSH
65342: LD_VAR 0 3
65346: PPUSH
65347: CALL_OW 313
65351: PUSH
65352: FOR_IN
65353: IFFALSE 65419
// if k then
65355: LD_VAR 0 4
65359: IFFALSE 65417
// if not k in mc_repair_vehicle [ i ] then
65361: LD_VAR 0 4
65365: PUSH
65366: LD_EXP 72
65370: PUSH
65371: LD_VAR 0 2
65375: ARRAY
65376: IN
65377: NOT
65378: IFFALSE 65417
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
65380: LD_ADDR_EXP 72
65384: PUSH
65385: LD_EXP 72
65389: PPUSH
65390: LD_VAR 0 2
65394: PPUSH
65395: LD_EXP 72
65399: PUSH
65400: LD_VAR 0 2
65404: ARRAY
65405: PUSH
65406: LD_VAR 0 4
65410: UNION
65411: PPUSH
65412: CALL_OW 1
65416: ST_TO_ADDR
65417: GO 65352
65419: POP
65420: POP
65421: GO 65334
65423: POP
65424: POP
// end ; if not mc_repair_vehicle [ i ] then
65425: LD_EXP 72
65429: PUSH
65430: LD_VAR 0 2
65434: ARRAY
65435: NOT
65436: IFFALSE 65440
// continue ;
65438: GO 64945
// for j in mc_repair_vehicle [ i ] do
65440: LD_ADDR_VAR 0 3
65444: PUSH
65445: LD_EXP 72
65449: PUSH
65450: LD_VAR 0 2
65454: ARRAY
65455: PUSH
65456: FOR_IN
65457: IFFALSE 65623
// begin if GetClass ( j ) <> 3 then
65459: LD_VAR 0 3
65463: PPUSH
65464: CALL_OW 257
65468: PUSH
65469: LD_INT 3
65471: NONEQUAL
65472: IFFALSE 65513
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
65474: LD_ADDR_EXP 72
65478: PUSH
65479: LD_EXP 72
65483: PPUSH
65484: LD_VAR 0 2
65488: PPUSH
65489: LD_EXP 72
65493: PUSH
65494: LD_VAR 0 2
65498: ARRAY
65499: PUSH
65500: LD_VAR 0 3
65504: DIFF
65505: PPUSH
65506: CALL_OW 1
65510: ST_TO_ADDR
// continue ;
65511: GO 65456
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
65513: LD_VAR 0 3
65517: PPUSH
65518: CALL_OW 311
65522: NOT
65523: PUSH
65524: LD_VAR 0 3
65528: PUSH
65529: LD_EXP 63
65533: PUSH
65534: LD_VAR 0 2
65538: ARRAY
65539: PUSH
65540: LD_INT 1
65542: ARRAY
65543: IN
65544: NOT
65545: AND
65546: PUSH
65547: LD_VAR 0 3
65551: PUSH
65552: LD_EXP 63
65556: PUSH
65557: LD_VAR 0 2
65561: ARRAY
65562: PUSH
65563: LD_INT 2
65565: ARRAY
65566: IN
65567: NOT
65568: AND
65569: IFFALSE 65621
// begin if IsInUnit ( j ) then
65571: LD_VAR 0 3
65575: PPUSH
65576: CALL_OW 310
65580: IFFALSE 65591
// ComExitBuilding ( j ) ;
65582: LD_VAR 0 3
65586: PPUSH
65587: CALL_OW 122
// if not HasTask ( j ) then
65591: LD_VAR 0 3
65595: PPUSH
65596: CALL_OW 314
65600: NOT
65601: IFFALSE 65621
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
65603: LD_VAR 0 3
65607: PPUSH
65608: LD_VAR 0 7
65612: PUSH
65613: LD_INT 1
65615: ARRAY
65616: PPUSH
65617: CALL_OW 189
// end ; end ;
65621: GO 65456
65623: POP
65624: POP
// end ;
65625: GO 64945
65627: POP
65628: POP
// end ;
65629: LD_VAR 0 1
65633: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
65634: LD_INT 0
65636: PPUSH
65637: PPUSH
65638: PPUSH
65639: PPUSH
65640: PPUSH
65641: PPUSH
65642: PPUSH
65643: PPUSH
65644: PPUSH
65645: PPUSH
65646: PPUSH
// if not mc_bases then
65647: LD_EXP 60
65651: NOT
65652: IFFALSE 65656
// exit ;
65654: GO 66458
// for i = 1 to mc_bases do
65656: LD_ADDR_VAR 0 2
65660: PUSH
65661: DOUBLE
65662: LD_INT 1
65664: DEC
65665: ST_TO_ADDR
65666: LD_EXP 60
65670: PUSH
65671: FOR_TO
65672: IFFALSE 66456
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
65674: LD_EXP 88
65678: PUSH
65679: LD_VAR 0 2
65683: ARRAY
65684: NOT
65685: PUSH
65686: LD_EXP 63
65690: PUSH
65691: LD_VAR 0 2
65695: ARRAY
65696: PUSH
65697: LD_INT 1
65699: ARRAY
65700: OR
65701: PUSH
65702: LD_EXP 63
65706: PUSH
65707: LD_VAR 0 2
65711: ARRAY
65712: PUSH
65713: LD_INT 2
65715: ARRAY
65716: OR
65717: PUSH
65718: LD_EXP 86
65722: PUSH
65723: LD_VAR 0 2
65727: ARRAY
65728: PPUSH
65729: LD_INT 1
65731: PPUSH
65732: CALL_OW 325
65736: NOT
65737: OR
65738: PUSH
65739: LD_EXP 83
65743: PUSH
65744: LD_VAR 0 2
65748: ARRAY
65749: OR
65750: IFFALSE 65754
// continue ;
65752: GO 65671
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
65754: LD_ADDR_VAR 0 8
65758: PUSH
65759: LD_EXP 60
65763: PUSH
65764: LD_VAR 0 2
65768: ARRAY
65769: PPUSH
65770: LD_INT 25
65772: PUSH
65773: LD_INT 4
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: LD_INT 50
65782: PUSH
65783: EMPTY
65784: LIST
65785: PUSH
65786: LD_INT 3
65788: PUSH
65789: LD_INT 60
65791: PUSH
65792: EMPTY
65793: LIST
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: LIST
65803: PPUSH
65804: CALL_OW 72
65808: PUSH
65809: LD_EXP 64
65813: PUSH
65814: LD_VAR 0 2
65818: ARRAY
65819: DIFF
65820: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
65821: LD_ADDR_VAR 0 9
65825: PUSH
65826: LD_EXP 60
65830: PUSH
65831: LD_VAR 0 2
65835: ARRAY
65836: PPUSH
65837: LD_INT 2
65839: PUSH
65840: LD_INT 30
65842: PUSH
65843: LD_INT 0
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 30
65852: PUSH
65853: LD_INT 1
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: LIST
65864: PPUSH
65865: CALL_OW 72
65869: ST_TO_ADDR
// if not tmp or not dep then
65870: LD_VAR 0 8
65874: NOT
65875: PUSH
65876: LD_VAR 0 9
65880: NOT
65881: OR
65882: IFFALSE 65886
// continue ;
65884: GO 65671
// side := GetSide ( tmp [ 1 ] ) ;
65886: LD_ADDR_VAR 0 11
65890: PUSH
65891: LD_VAR 0 8
65895: PUSH
65896: LD_INT 1
65898: ARRAY
65899: PPUSH
65900: CALL_OW 255
65904: ST_TO_ADDR
// dep := dep [ 1 ] ;
65905: LD_ADDR_VAR 0 9
65909: PUSH
65910: LD_VAR 0 9
65914: PUSH
65915: LD_INT 1
65917: ARRAY
65918: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
65919: LD_ADDR_VAR 0 7
65923: PUSH
65924: LD_EXP 88
65928: PUSH
65929: LD_VAR 0 2
65933: ARRAY
65934: PPUSH
65935: LD_INT 22
65937: PUSH
65938: LD_INT 0
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: PUSH
65945: LD_INT 25
65947: PUSH
65948: LD_INT 12
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PPUSH
65959: CALL_OW 70
65963: PUSH
65964: LD_INT 22
65966: PUSH
65967: LD_INT 0
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 25
65976: PUSH
65977: LD_INT 12
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 91
65986: PUSH
65987: LD_VAR 0 9
65991: PUSH
65992: LD_INT 20
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: LIST
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: LIST
66004: PPUSH
66005: CALL_OW 69
66009: UNION
66010: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
66011: LD_ADDR_VAR 0 10
66015: PUSH
66016: LD_EXP 88
66020: PUSH
66021: LD_VAR 0 2
66025: ARRAY
66026: PPUSH
66027: LD_INT 81
66029: PUSH
66030: LD_VAR 0 11
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PPUSH
66039: CALL_OW 70
66043: ST_TO_ADDR
// if not apes or danger_at_area then
66044: LD_VAR 0 7
66048: NOT
66049: PUSH
66050: LD_VAR 0 10
66054: OR
66055: IFFALSE 66105
// begin if mc_taming [ i ] then
66057: LD_EXP 91
66061: PUSH
66062: LD_VAR 0 2
66066: ARRAY
66067: IFFALSE 66103
// begin MC_Reset ( i , 121 ) ;
66069: LD_VAR 0 2
66073: PPUSH
66074: LD_INT 121
66076: PPUSH
66077: CALL 51540 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
66081: LD_ADDR_EXP 91
66085: PUSH
66086: LD_EXP 91
66090: PPUSH
66091: LD_VAR 0 2
66095: PPUSH
66096: EMPTY
66097: PPUSH
66098: CALL_OW 1
66102: ST_TO_ADDR
// end ; continue ;
66103: GO 65671
// end ; for j in tmp do
66105: LD_ADDR_VAR 0 3
66109: PUSH
66110: LD_VAR 0 8
66114: PUSH
66115: FOR_IN
66116: IFFALSE 66452
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
66118: LD_VAR 0 3
66122: PUSH
66123: LD_EXP 91
66127: PUSH
66128: LD_VAR 0 2
66132: ARRAY
66133: IN
66134: NOT
66135: PUSH
66136: LD_EXP 91
66140: PUSH
66141: LD_VAR 0 2
66145: ARRAY
66146: PUSH
66147: LD_INT 3
66149: LESS
66150: AND
66151: IFFALSE 66209
// begin SetTag ( j , 121 ) ;
66153: LD_VAR 0 3
66157: PPUSH
66158: LD_INT 121
66160: PPUSH
66161: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
66165: LD_ADDR_EXP 91
66169: PUSH
66170: LD_EXP 91
66174: PPUSH
66175: LD_VAR 0 2
66179: PUSH
66180: LD_EXP 91
66184: PUSH
66185: LD_VAR 0 2
66189: ARRAY
66190: PUSH
66191: LD_INT 1
66193: PLUS
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PPUSH
66199: LD_VAR 0 3
66203: PPUSH
66204: CALL 16128 0 3
66208: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
66209: LD_VAR 0 3
66213: PUSH
66214: LD_EXP 91
66218: PUSH
66219: LD_VAR 0 2
66223: ARRAY
66224: IN
66225: IFFALSE 66450
// begin if GetClass ( j ) <> 4 then
66227: LD_VAR 0 3
66231: PPUSH
66232: CALL_OW 257
66236: PUSH
66237: LD_INT 4
66239: NONEQUAL
66240: IFFALSE 66293
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
66242: LD_ADDR_EXP 91
66246: PUSH
66247: LD_EXP 91
66251: PPUSH
66252: LD_VAR 0 2
66256: PPUSH
66257: LD_EXP 91
66261: PUSH
66262: LD_VAR 0 2
66266: ARRAY
66267: PUSH
66268: LD_VAR 0 3
66272: DIFF
66273: PPUSH
66274: CALL_OW 1
66278: ST_TO_ADDR
// SetTag ( j , 0 ) ;
66279: LD_VAR 0 3
66283: PPUSH
66284: LD_INT 0
66286: PPUSH
66287: CALL_OW 109
// continue ;
66291: GO 66115
// end ; if IsInUnit ( j ) then
66293: LD_VAR 0 3
66297: PPUSH
66298: CALL_OW 310
66302: IFFALSE 66313
// ComExitBuilding ( j ) ;
66304: LD_VAR 0 3
66308: PPUSH
66309: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
66313: LD_ADDR_VAR 0 6
66317: PUSH
66318: LD_VAR 0 7
66322: PPUSH
66323: LD_VAR 0 3
66327: PPUSH
66328: CALL_OW 74
66332: ST_TO_ADDR
// if not ape then
66333: LD_VAR 0 6
66337: NOT
66338: IFFALSE 66342
// break ;
66340: GO 66452
// x := GetX ( ape ) ;
66342: LD_ADDR_VAR 0 4
66346: PUSH
66347: LD_VAR 0 6
66351: PPUSH
66352: CALL_OW 250
66356: ST_TO_ADDR
// y := GetY ( ape ) ;
66357: LD_ADDR_VAR 0 5
66361: PUSH
66362: LD_VAR 0 6
66366: PPUSH
66367: CALL_OW 251
66371: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
66372: LD_VAR 0 4
66376: PPUSH
66377: LD_VAR 0 5
66381: PPUSH
66382: CALL_OW 488
66386: NOT
66387: PUSH
66388: LD_VAR 0 11
66392: PPUSH
66393: LD_VAR 0 4
66397: PPUSH
66398: LD_VAR 0 5
66402: PPUSH
66403: LD_INT 20
66405: PPUSH
66406: CALL 17024 0 4
66410: PUSH
66411: LD_INT 4
66413: ARRAY
66414: OR
66415: IFFALSE 66419
// break ;
66417: GO 66452
// if not HasTask ( j ) then
66419: LD_VAR 0 3
66423: PPUSH
66424: CALL_OW 314
66428: NOT
66429: IFFALSE 66450
// ComTameXY ( j , x , y ) ;
66431: LD_VAR 0 3
66435: PPUSH
66436: LD_VAR 0 4
66440: PPUSH
66441: LD_VAR 0 5
66445: PPUSH
66446: CALL_OW 131
// end ; end ;
66450: GO 66115
66452: POP
66453: POP
// end ;
66454: GO 65671
66456: POP
66457: POP
// end ;
66458: LD_VAR 0 1
66462: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
66463: LD_INT 0
66465: PPUSH
66466: PPUSH
66467: PPUSH
66468: PPUSH
66469: PPUSH
66470: PPUSH
66471: PPUSH
66472: PPUSH
// if not mc_bases then
66473: LD_EXP 60
66477: NOT
66478: IFFALSE 66482
// exit ;
66480: GO 67108
// for i = 1 to mc_bases do
66482: LD_ADDR_VAR 0 2
66486: PUSH
66487: DOUBLE
66488: LD_INT 1
66490: DEC
66491: ST_TO_ADDR
66492: LD_EXP 60
66496: PUSH
66497: FOR_TO
66498: IFFALSE 67106
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
66500: LD_EXP 89
66504: PUSH
66505: LD_VAR 0 2
66509: ARRAY
66510: NOT
66511: PUSH
66512: LD_EXP 89
66516: PUSH
66517: LD_VAR 0 2
66521: ARRAY
66522: PPUSH
66523: LD_INT 25
66525: PUSH
66526: LD_INT 12
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PPUSH
66533: CALL_OW 72
66537: NOT
66538: OR
66539: IFFALSE 66543
// continue ;
66541: GO 66497
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
66543: LD_ADDR_VAR 0 5
66547: PUSH
66548: LD_EXP 89
66552: PUSH
66553: LD_VAR 0 2
66557: ARRAY
66558: PUSH
66559: LD_INT 1
66561: ARRAY
66562: PPUSH
66563: CALL_OW 255
66567: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
66568: LD_VAR 0 5
66572: PPUSH
66573: LD_INT 2
66575: PPUSH
66576: CALL_OW 325
66580: IFFALSE 66833
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
66582: LD_ADDR_VAR 0 4
66586: PUSH
66587: LD_EXP 89
66591: PUSH
66592: LD_VAR 0 2
66596: ARRAY
66597: PPUSH
66598: LD_INT 25
66600: PUSH
66601: LD_INT 16
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PPUSH
66608: CALL_OW 72
66612: ST_TO_ADDR
// if tmp < 6 then
66613: LD_VAR 0 4
66617: PUSH
66618: LD_INT 6
66620: LESS
66621: IFFALSE 66833
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
66623: LD_ADDR_VAR 0 6
66627: PUSH
66628: LD_EXP 60
66632: PUSH
66633: LD_VAR 0 2
66637: ARRAY
66638: PPUSH
66639: LD_INT 2
66641: PUSH
66642: LD_INT 30
66644: PUSH
66645: LD_INT 0
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: PUSH
66652: LD_INT 30
66654: PUSH
66655: LD_INT 1
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: LIST
66666: PPUSH
66667: CALL_OW 72
66671: ST_TO_ADDR
// if depot then
66672: LD_VAR 0 6
66676: IFFALSE 66833
// begin selected := 0 ;
66678: LD_ADDR_VAR 0 7
66682: PUSH
66683: LD_INT 0
66685: ST_TO_ADDR
// for j in depot do
66686: LD_ADDR_VAR 0 3
66690: PUSH
66691: LD_VAR 0 6
66695: PUSH
66696: FOR_IN
66697: IFFALSE 66728
// begin if UnitsInside ( j ) < 6 then
66699: LD_VAR 0 3
66703: PPUSH
66704: CALL_OW 313
66708: PUSH
66709: LD_INT 6
66711: LESS
66712: IFFALSE 66726
// begin selected := j ;
66714: LD_ADDR_VAR 0 7
66718: PUSH
66719: LD_VAR 0 3
66723: ST_TO_ADDR
// break ;
66724: GO 66728
// end ; end ;
66726: GO 66696
66728: POP
66729: POP
// if selected then
66730: LD_VAR 0 7
66734: IFFALSE 66833
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
66736: LD_ADDR_VAR 0 3
66740: PUSH
66741: LD_EXP 89
66745: PUSH
66746: LD_VAR 0 2
66750: ARRAY
66751: PPUSH
66752: LD_INT 25
66754: PUSH
66755: LD_INT 12
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PPUSH
66762: CALL_OW 72
66766: PUSH
66767: FOR_IN
66768: IFFALSE 66831
// if not HasTask ( j ) then
66770: LD_VAR 0 3
66774: PPUSH
66775: CALL_OW 314
66779: NOT
66780: IFFALSE 66829
// begin if not IsInUnit ( j ) then
66782: LD_VAR 0 3
66786: PPUSH
66787: CALL_OW 310
66791: NOT
66792: IFFALSE 66808
// ComEnterUnit ( j , selected ) ;
66794: LD_VAR 0 3
66798: PPUSH
66799: LD_VAR 0 7
66803: PPUSH
66804: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
66808: LD_VAR 0 3
66812: PPUSH
66813: LD_INT 16
66815: PPUSH
66816: CALL_OW 183
// AddComExitBuilding ( j ) ;
66820: LD_VAR 0 3
66824: PPUSH
66825: CALL_OW 182
// end ;
66829: GO 66767
66831: POP
66832: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
66833: LD_VAR 0 5
66837: PPUSH
66838: LD_INT 11
66840: PPUSH
66841: CALL_OW 325
66845: IFFALSE 67104
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
66847: LD_ADDR_VAR 0 4
66851: PUSH
66852: LD_EXP 89
66856: PUSH
66857: LD_VAR 0 2
66861: ARRAY
66862: PPUSH
66863: LD_INT 25
66865: PUSH
66866: LD_INT 16
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PPUSH
66873: CALL_OW 72
66877: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
66878: LD_VAR 0 4
66882: PUSH
66883: LD_INT 6
66885: GREATEREQUAL
66886: PUSH
66887: LD_VAR 0 5
66891: PPUSH
66892: LD_INT 2
66894: PPUSH
66895: CALL_OW 325
66899: NOT
66900: OR
66901: IFFALSE 67104
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
66903: LD_ADDR_VAR 0 8
66907: PUSH
66908: LD_EXP 60
66912: PUSH
66913: LD_VAR 0 2
66917: ARRAY
66918: PPUSH
66919: LD_INT 2
66921: PUSH
66922: LD_INT 30
66924: PUSH
66925: LD_INT 4
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: PUSH
66932: LD_INT 30
66934: PUSH
66935: LD_INT 5
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: LIST
66946: PPUSH
66947: CALL_OW 72
66951: ST_TO_ADDR
// if barracks then
66952: LD_VAR 0 8
66956: IFFALSE 67104
// begin selected := 0 ;
66958: LD_ADDR_VAR 0 7
66962: PUSH
66963: LD_INT 0
66965: ST_TO_ADDR
// for j in barracks do
66966: LD_ADDR_VAR 0 3
66970: PUSH
66971: LD_VAR 0 8
66975: PUSH
66976: FOR_IN
66977: IFFALSE 67008
// begin if UnitsInside ( j ) < 6 then
66979: LD_VAR 0 3
66983: PPUSH
66984: CALL_OW 313
66988: PUSH
66989: LD_INT 6
66991: LESS
66992: IFFALSE 67006
// begin selected := j ;
66994: LD_ADDR_VAR 0 7
66998: PUSH
66999: LD_VAR 0 3
67003: ST_TO_ADDR
// break ;
67004: GO 67008
// end ; end ;
67006: GO 66976
67008: POP
67009: POP
// if selected then
67010: LD_VAR 0 7
67014: IFFALSE 67104
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
67016: LD_ADDR_VAR 0 3
67020: PUSH
67021: LD_EXP 89
67025: PUSH
67026: LD_VAR 0 2
67030: ARRAY
67031: PPUSH
67032: LD_INT 25
67034: PUSH
67035: LD_INT 12
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PPUSH
67042: CALL_OW 72
67046: PUSH
67047: FOR_IN
67048: IFFALSE 67102
// if not IsInUnit ( j ) and not HasTask ( j ) then
67050: LD_VAR 0 3
67054: PPUSH
67055: CALL_OW 310
67059: NOT
67060: PUSH
67061: LD_VAR 0 3
67065: PPUSH
67066: CALL_OW 314
67070: NOT
67071: AND
67072: IFFALSE 67100
// begin ComEnterUnit ( j , selected ) ;
67074: LD_VAR 0 3
67078: PPUSH
67079: LD_VAR 0 7
67083: PPUSH
67084: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
67088: LD_VAR 0 3
67092: PPUSH
67093: LD_INT 15
67095: PPUSH
67096: CALL_OW 183
// end ;
67100: GO 67047
67102: POP
67103: POP
// end ; end ; end ; end ; end ;
67104: GO 66497
67106: POP
67107: POP
// end ;
67108: LD_VAR 0 1
67112: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
67113: LD_INT 0
67115: PPUSH
67116: PPUSH
67117: PPUSH
67118: PPUSH
// if not mc_bases then
67119: LD_EXP 60
67123: NOT
67124: IFFALSE 67128
// exit ;
67126: GO 67306
// for i = 1 to mc_bases do
67128: LD_ADDR_VAR 0 2
67132: PUSH
67133: DOUBLE
67134: LD_INT 1
67136: DEC
67137: ST_TO_ADDR
67138: LD_EXP 60
67142: PUSH
67143: FOR_TO
67144: IFFALSE 67304
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
67146: LD_ADDR_VAR 0 4
67150: PUSH
67151: LD_EXP 60
67155: PUSH
67156: LD_VAR 0 2
67160: ARRAY
67161: PPUSH
67162: LD_INT 25
67164: PUSH
67165: LD_INT 9
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: PPUSH
67172: CALL_OW 72
67176: ST_TO_ADDR
// if not tmp then
67177: LD_VAR 0 4
67181: NOT
67182: IFFALSE 67186
// continue ;
67184: GO 67143
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
67186: LD_EXP 86
67190: PUSH
67191: LD_VAR 0 2
67195: ARRAY
67196: PPUSH
67197: LD_INT 29
67199: PPUSH
67200: CALL_OW 325
67204: NOT
67205: PUSH
67206: LD_EXP 86
67210: PUSH
67211: LD_VAR 0 2
67215: ARRAY
67216: PPUSH
67217: LD_INT 28
67219: PPUSH
67220: CALL_OW 325
67224: NOT
67225: AND
67226: IFFALSE 67230
// continue ;
67228: GO 67143
// for j in tmp do
67230: LD_ADDR_VAR 0 3
67234: PUSH
67235: LD_VAR 0 4
67239: PUSH
67240: FOR_IN
67241: IFFALSE 67300
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
67243: LD_VAR 0 3
67247: PUSH
67248: LD_EXP 63
67252: PUSH
67253: LD_VAR 0 2
67257: ARRAY
67258: PUSH
67259: LD_INT 1
67261: ARRAY
67262: IN
67263: NOT
67264: PUSH
67265: LD_VAR 0 3
67269: PUSH
67270: LD_EXP 63
67274: PUSH
67275: LD_VAR 0 2
67279: ARRAY
67280: PUSH
67281: LD_INT 2
67283: ARRAY
67284: IN
67285: NOT
67286: AND
67287: IFFALSE 67298
// ComSpaceTimeShoot ( j ) ;
67289: LD_VAR 0 3
67293: PPUSH
67294: CALL 12125 0 1
67298: GO 67240
67300: POP
67301: POP
// end ;
67302: GO 67143
67304: POP
67305: POP
// end ;
67306: LD_VAR 0 1
67310: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
67311: LD_INT 0
67313: PPUSH
67314: PPUSH
67315: PPUSH
67316: PPUSH
67317: PPUSH
67318: PPUSH
67319: PPUSH
67320: PPUSH
67321: PPUSH
// if not mc_bases then
67322: LD_EXP 60
67326: NOT
67327: IFFALSE 67331
// exit ;
67329: GO 67953
// for i = 1 to mc_bases do
67331: LD_ADDR_VAR 0 2
67335: PUSH
67336: DOUBLE
67337: LD_INT 1
67339: DEC
67340: ST_TO_ADDR
67341: LD_EXP 60
67345: PUSH
67346: FOR_TO
67347: IFFALSE 67951
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
67349: LD_EXP 95
67353: PUSH
67354: LD_VAR 0 2
67358: ARRAY
67359: NOT
67360: PUSH
67361: LD_INT 38
67363: PPUSH
67364: LD_EXP 86
67368: PUSH
67369: LD_VAR 0 2
67373: ARRAY
67374: PPUSH
67375: CALL_OW 321
67379: PUSH
67380: LD_INT 2
67382: NONEQUAL
67383: OR
67384: IFFALSE 67388
// continue ;
67386: GO 67346
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
67388: LD_ADDR_VAR 0 8
67392: PUSH
67393: LD_EXP 60
67397: PUSH
67398: LD_VAR 0 2
67402: ARRAY
67403: PPUSH
67404: LD_INT 30
67406: PUSH
67407: LD_INT 34
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: PPUSH
67414: CALL_OW 72
67418: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
67419: LD_ADDR_VAR 0 9
67423: PUSH
67424: LD_EXP 60
67428: PUSH
67429: LD_VAR 0 2
67433: ARRAY
67434: PPUSH
67435: LD_INT 25
67437: PUSH
67438: LD_INT 4
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PPUSH
67445: CALL_OW 72
67449: PPUSH
67450: LD_INT 0
67452: PPUSH
67453: CALL 44689 0 2
67457: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
67458: LD_VAR 0 9
67462: NOT
67463: PUSH
67464: LD_VAR 0 8
67468: NOT
67469: OR
67470: PUSH
67471: LD_EXP 60
67475: PUSH
67476: LD_VAR 0 2
67480: ARRAY
67481: PPUSH
67482: LD_INT 124
67484: PPUSH
67485: CALL 44689 0 2
67489: OR
67490: IFFALSE 67494
// continue ;
67492: GO 67346
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
67494: LD_EXP 96
67498: PUSH
67499: LD_VAR 0 2
67503: ARRAY
67504: PUSH
67505: LD_EXP 95
67509: PUSH
67510: LD_VAR 0 2
67514: ARRAY
67515: LESS
67516: PUSH
67517: LD_EXP 96
67521: PUSH
67522: LD_VAR 0 2
67526: ARRAY
67527: PUSH
67528: LD_VAR 0 8
67532: LESS
67533: AND
67534: IFFALSE 67949
// begin tmp := sci [ 1 ] ;
67536: LD_ADDR_VAR 0 7
67540: PUSH
67541: LD_VAR 0 9
67545: PUSH
67546: LD_INT 1
67548: ARRAY
67549: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
67550: LD_VAR 0 7
67554: PPUSH
67555: LD_INT 124
67557: PPUSH
67558: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
67562: LD_ADDR_VAR 0 3
67566: PUSH
67567: DOUBLE
67568: LD_EXP 95
67572: PUSH
67573: LD_VAR 0 2
67577: ARRAY
67578: INC
67579: ST_TO_ADDR
67580: LD_EXP 95
67584: PUSH
67585: LD_VAR 0 2
67589: ARRAY
67590: PUSH
67591: FOR_DOWNTO
67592: IFFALSE 67935
// begin if IsInUnit ( tmp ) then
67594: LD_VAR 0 7
67598: PPUSH
67599: CALL_OW 310
67603: IFFALSE 67614
// ComExitBuilding ( tmp ) ;
67605: LD_VAR 0 7
67609: PPUSH
67610: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
67614: LD_INT 35
67616: PPUSH
67617: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
67621: LD_VAR 0 7
67625: PPUSH
67626: CALL_OW 310
67630: NOT
67631: PUSH
67632: LD_VAR 0 7
67636: PPUSH
67637: CALL_OW 314
67641: NOT
67642: AND
67643: IFFALSE 67614
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
67645: LD_ADDR_VAR 0 6
67649: PUSH
67650: LD_VAR 0 7
67654: PPUSH
67655: CALL_OW 250
67659: PUSH
67660: LD_VAR 0 7
67664: PPUSH
67665: CALL_OW 251
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
67674: LD_INT 35
67676: PPUSH
67677: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
67681: LD_ADDR_VAR 0 4
67685: PUSH
67686: LD_EXP 95
67690: PUSH
67691: LD_VAR 0 2
67695: ARRAY
67696: PUSH
67697: LD_VAR 0 3
67701: ARRAY
67702: PUSH
67703: LD_INT 1
67705: ARRAY
67706: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
67707: LD_ADDR_VAR 0 5
67711: PUSH
67712: LD_EXP 95
67716: PUSH
67717: LD_VAR 0 2
67721: ARRAY
67722: PUSH
67723: LD_VAR 0 3
67727: ARRAY
67728: PUSH
67729: LD_INT 2
67731: ARRAY
67732: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
67733: LD_VAR 0 7
67737: PPUSH
67738: LD_INT 10
67740: PPUSH
67741: CALL 18721 0 2
67745: PUSH
67746: LD_INT 4
67748: ARRAY
67749: IFFALSE 67787
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
67751: LD_VAR 0 7
67755: PPUSH
67756: LD_VAR 0 6
67760: PUSH
67761: LD_INT 1
67763: ARRAY
67764: PPUSH
67765: LD_VAR 0 6
67769: PUSH
67770: LD_INT 2
67772: ARRAY
67773: PPUSH
67774: CALL_OW 111
// wait ( 0 0$10 ) ;
67778: LD_INT 350
67780: PPUSH
67781: CALL_OW 67
// end else
67785: GO 67813
// begin ComMoveXY ( tmp , x , y ) ;
67787: LD_VAR 0 7
67791: PPUSH
67792: LD_VAR 0 4
67796: PPUSH
67797: LD_VAR 0 5
67801: PPUSH
67802: CALL_OW 111
// wait ( 0 0$3 ) ;
67806: LD_INT 105
67808: PPUSH
67809: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
67813: LD_VAR 0 7
67817: PPUSH
67818: LD_VAR 0 4
67822: PPUSH
67823: LD_VAR 0 5
67827: PPUSH
67828: CALL_OW 307
67832: IFFALSE 67674
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
67834: LD_VAR 0 7
67838: PPUSH
67839: LD_VAR 0 4
67843: PPUSH
67844: LD_VAR 0 5
67848: PPUSH
67849: LD_VAR 0 8
67853: PUSH
67854: LD_VAR 0 3
67858: ARRAY
67859: PPUSH
67860: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
67864: LD_INT 35
67866: PPUSH
67867: CALL_OW 67
// until not HasTask ( tmp ) ;
67871: LD_VAR 0 7
67875: PPUSH
67876: CALL_OW 314
67880: NOT
67881: IFFALSE 67864
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
67883: LD_ADDR_EXP 96
67887: PUSH
67888: LD_EXP 96
67892: PPUSH
67893: LD_VAR 0 2
67897: PUSH
67898: LD_EXP 96
67902: PUSH
67903: LD_VAR 0 2
67907: ARRAY
67908: PUSH
67909: LD_INT 1
67911: PLUS
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: PPUSH
67917: LD_VAR 0 8
67921: PUSH
67922: LD_VAR 0 3
67926: ARRAY
67927: PPUSH
67928: CALL 16128 0 3
67932: ST_TO_ADDR
// end ;
67933: GO 67591
67935: POP
67936: POP
// MC_Reset ( i , 124 ) ;
67937: LD_VAR 0 2
67941: PPUSH
67942: LD_INT 124
67944: PPUSH
67945: CALL 51540 0 2
// end ; end ;
67949: GO 67346
67951: POP
67952: POP
// end ;
67953: LD_VAR 0 1
67957: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
67958: LD_INT 0
67960: PPUSH
67961: PPUSH
67962: PPUSH
// if not mc_bases then
67963: LD_EXP 60
67967: NOT
67968: IFFALSE 67972
// exit ;
67970: GO 68578
// for i = 1 to mc_bases do
67972: LD_ADDR_VAR 0 2
67976: PUSH
67977: DOUBLE
67978: LD_INT 1
67980: DEC
67981: ST_TO_ADDR
67982: LD_EXP 60
67986: PUSH
67987: FOR_TO
67988: IFFALSE 68576
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
67990: LD_ADDR_VAR 0 3
67994: PUSH
67995: LD_EXP 60
67999: PUSH
68000: LD_VAR 0 2
68004: ARRAY
68005: PPUSH
68006: LD_INT 25
68008: PUSH
68009: LD_INT 4
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: PPUSH
68016: CALL_OW 72
68020: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
68021: LD_VAR 0 3
68025: NOT
68026: PUSH
68027: LD_EXP 97
68031: PUSH
68032: LD_VAR 0 2
68036: ARRAY
68037: NOT
68038: OR
68039: PUSH
68040: LD_EXP 60
68044: PUSH
68045: LD_VAR 0 2
68049: ARRAY
68050: PPUSH
68051: LD_INT 2
68053: PUSH
68054: LD_INT 30
68056: PUSH
68057: LD_INT 0
68059: PUSH
68060: EMPTY
68061: LIST
68062: LIST
68063: PUSH
68064: LD_INT 30
68066: PUSH
68067: LD_INT 1
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: LIST
68078: PPUSH
68079: CALL_OW 72
68083: NOT
68084: OR
68085: IFFALSE 68135
// begin if mc_deposits_finder [ i ] then
68087: LD_EXP 98
68091: PUSH
68092: LD_VAR 0 2
68096: ARRAY
68097: IFFALSE 68133
// begin MC_Reset ( i , 125 ) ;
68099: LD_VAR 0 2
68103: PPUSH
68104: LD_INT 125
68106: PPUSH
68107: CALL 51540 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
68111: LD_ADDR_EXP 98
68115: PUSH
68116: LD_EXP 98
68120: PPUSH
68121: LD_VAR 0 2
68125: PPUSH
68126: EMPTY
68127: PPUSH
68128: CALL_OW 1
68132: ST_TO_ADDR
// end ; continue ;
68133: GO 67987
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
68135: LD_EXP 97
68139: PUSH
68140: LD_VAR 0 2
68144: ARRAY
68145: PUSH
68146: LD_INT 1
68148: ARRAY
68149: PUSH
68150: LD_INT 3
68152: ARRAY
68153: PUSH
68154: LD_INT 1
68156: EQUAL
68157: PUSH
68158: LD_INT 20
68160: PPUSH
68161: LD_EXP 86
68165: PUSH
68166: LD_VAR 0 2
68170: ARRAY
68171: PPUSH
68172: CALL_OW 321
68176: PUSH
68177: LD_INT 2
68179: NONEQUAL
68180: AND
68181: IFFALSE 68231
// begin if mc_deposits_finder [ i ] then
68183: LD_EXP 98
68187: PUSH
68188: LD_VAR 0 2
68192: ARRAY
68193: IFFALSE 68229
// begin MC_Reset ( i , 125 ) ;
68195: LD_VAR 0 2
68199: PPUSH
68200: LD_INT 125
68202: PPUSH
68203: CALL 51540 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
68207: LD_ADDR_EXP 98
68211: PUSH
68212: LD_EXP 98
68216: PPUSH
68217: LD_VAR 0 2
68221: PPUSH
68222: EMPTY
68223: PPUSH
68224: CALL_OW 1
68228: ST_TO_ADDR
// end ; continue ;
68229: GO 67987
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
68231: LD_EXP 97
68235: PUSH
68236: LD_VAR 0 2
68240: ARRAY
68241: PUSH
68242: LD_INT 1
68244: ARRAY
68245: PUSH
68246: LD_INT 1
68248: ARRAY
68249: PPUSH
68250: LD_EXP 97
68254: PUSH
68255: LD_VAR 0 2
68259: ARRAY
68260: PUSH
68261: LD_INT 1
68263: ARRAY
68264: PUSH
68265: LD_INT 2
68267: ARRAY
68268: PPUSH
68269: LD_EXP 86
68273: PUSH
68274: LD_VAR 0 2
68278: ARRAY
68279: PPUSH
68280: CALL_OW 440
68284: IFFALSE 68327
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
68286: LD_ADDR_EXP 97
68290: PUSH
68291: LD_EXP 97
68295: PPUSH
68296: LD_VAR 0 2
68300: PPUSH
68301: LD_EXP 97
68305: PUSH
68306: LD_VAR 0 2
68310: ARRAY
68311: PPUSH
68312: LD_INT 1
68314: PPUSH
68315: CALL_OW 3
68319: PPUSH
68320: CALL_OW 1
68324: ST_TO_ADDR
68325: GO 68574
// begin if not mc_deposits_finder [ i ] then
68327: LD_EXP 98
68331: PUSH
68332: LD_VAR 0 2
68336: ARRAY
68337: NOT
68338: IFFALSE 68390
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
68340: LD_ADDR_EXP 98
68344: PUSH
68345: LD_EXP 98
68349: PPUSH
68350: LD_VAR 0 2
68354: PPUSH
68355: LD_VAR 0 3
68359: PUSH
68360: LD_INT 1
68362: ARRAY
68363: PUSH
68364: EMPTY
68365: LIST
68366: PPUSH
68367: CALL_OW 1
68371: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
68372: LD_VAR 0 3
68376: PUSH
68377: LD_INT 1
68379: ARRAY
68380: PPUSH
68381: LD_INT 125
68383: PPUSH
68384: CALL_OW 109
// end else
68388: GO 68574
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
68390: LD_EXP 98
68394: PUSH
68395: LD_VAR 0 2
68399: ARRAY
68400: PUSH
68401: LD_INT 1
68403: ARRAY
68404: PPUSH
68405: CALL_OW 310
68409: IFFALSE 68432
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
68411: LD_EXP 98
68415: PUSH
68416: LD_VAR 0 2
68420: ARRAY
68421: PUSH
68422: LD_INT 1
68424: ARRAY
68425: PPUSH
68426: CALL_OW 122
68430: GO 68574
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
68432: LD_EXP 98
68436: PUSH
68437: LD_VAR 0 2
68441: ARRAY
68442: PUSH
68443: LD_INT 1
68445: ARRAY
68446: PPUSH
68447: CALL_OW 314
68451: NOT
68452: PUSH
68453: LD_EXP 98
68457: PUSH
68458: LD_VAR 0 2
68462: ARRAY
68463: PUSH
68464: LD_INT 1
68466: ARRAY
68467: PPUSH
68468: LD_EXP 97
68472: PUSH
68473: LD_VAR 0 2
68477: ARRAY
68478: PUSH
68479: LD_INT 1
68481: ARRAY
68482: PUSH
68483: LD_INT 1
68485: ARRAY
68486: PPUSH
68487: LD_EXP 97
68491: PUSH
68492: LD_VAR 0 2
68496: ARRAY
68497: PUSH
68498: LD_INT 1
68500: ARRAY
68501: PUSH
68502: LD_INT 2
68504: ARRAY
68505: PPUSH
68506: CALL_OW 297
68510: PUSH
68511: LD_INT 6
68513: GREATER
68514: AND
68515: IFFALSE 68574
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
68517: LD_EXP 98
68521: PUSH
68522: LD_VAR 0 2
68526: ARRAY
68527: PUSH
68528: LD_INT 1
68530: ARRAY
68531: PPUSH
68532: LD_EXP 97
68536: PUSH
68537: LD_VAR 0 2
68541: ARRAY
68542: PUSH
68543: LD_INT 1
68545: ARRAY
68546: PUSH
68547: LD_INT 1
68549: ARRAY
68550: PPUSH
68551: LD_EXP 97
68555: PUSH
68556: LD_VAR 0 2
68560: ARRAY
68561: PUSH
68562: LD_INT 1
68564: ARRAY
68565: PUSH
68566: LD_INT 2
68568: ARRAY
68569: PPUSH
68570: CALL_OW 111
// end ; end ; end ;
68574: GO 67987
68576: POP
68577: POP
// end ;
68578: LD_VAR 0 1
68582: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
68583: LD_INT 0
68585: PPUSH
68586: PPUSH
68587: PPUSH
68588: PPUSH
68589: PPUSH
68590: PPUSH
68591: PPUSH
68592: PPUSH
68593: PPUSH
68594: PPUSH
68595: PPUSH
// if not mc_bases then
68596: LD_EXP 60
68600: NOT
68601: IFFALSE 68605
// exit ;
68603: GO 69545
// for i = 1 to mc_bases do
68605: LD_ADDR_VAR 0 2
68609: PUSH
68610: DOUBLE
68611: LD_INT 1
68613: DEC
68614: ST_TO_ADDR
68615: LD_EXP 60
68619: PUSH
68620: FOR_TO
68621: IFFALSE 69543
// begin if not mc_bases [ i ] or mc_scan [ i ] then
68623: LD_EXP 60
68627: PUSH
68628: LD_VAR 0 2
68632: ARRAY
68633: NOT
68634: PUSH
68635: LD_EXP 83
68639: PUSH
68640: LD_VAR 0 2
68644: ARRAY
68645: OR
68646: IFFALSE 68650
// continue ;
68648: GO 68620
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
68650: LD_ADDR_VAR 0 7
68654: PUSH
68655: LD_EXP 60
68659: PUSH
68660: LD_VAR 0 2
68664: ARRAY
68665: PUSH
68666: LD_INT 1
68668: ARRAY
68669: PPUSH
68670: CALL_OW 248
68674: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
68675: LD_VAR 0 7
68679: PUSH
68680: LD_INT 3
68682: EQUAL
68683: PUSH
68684: LD_EXP 79
68688: PUSH
68689: LD_VAR 0 2
68693: ARRAY
68694: PUSH
68695: LD_EXP 82
68699: PUSH
68700: LD_VAR 0 2
68704: ARRAY
68705: UNION
68706: PPUSH
68707: LD_INT 33
68709: PUSH
68710: LD_INT 2
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: PPUSH
68717: CALL_OW 72
68721: NOT
68722: OR
68723: IFFALSE 68727
// continue ;
68725: GO 68620
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
68727: LD_ADDR_VAR 0 9
68731: PUSH
68732: LD_EXP 60
68736: PUSH
68737: LD_VAR 0 2
68741: ARRAY
68742: PPUSH
68743: LD_INT 30
68745: PUSH
68746: LD_INT 36
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: PPUSH
68753: CALL_OW 72
68757: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
68758: LD_ADDR_VAR 0 10
68762: PUSH
68763: LD_EXP 79
68767: PUSH
68768: LD_VAR 0 2
68772: ARRAY
68773: PPUSH
68774: LD_INT 34
68776: PUSH
68777: LD_INT 31
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: PPUSH
68784: CALL_OW 72
68788: ST_TO_ADDR
// if not cts and not mcts then
68789: LD_VAR 0 9
68793: NOT
68794: PUSH
68795: LD_VAR 0 10
68799: NOT
68800: AND
68801: IFFALSE 68805
// continue ;
68803: GO 68620
// x := cts ;
68805: LD_ADDR_VAR 0 11
68809: PUSH
68810: LD_VAR 0 9
68814: ST_TO_ADDR
// if not x then
68815: LD_VAR 0 11
68819: NOT
68820: IFFALSE 68832
// x := mcts ;
68822: LD_ADDR_VAR 0 11
68826: PUSH
68827: LD_VAR 0 10
68831: ST_TO_ADDR
// if not x then
68832: LD_VAR 0 11
68836: NOT
68837: IFFALSE 68841
// continue ;
68839: GO 68620
// if mc_remote_driver [ i ] then
68841: LD_EXP 100
68845: PUSH
68846: LD_VAR 0 2
68850: ARRAY
68851: IFFALSE 69238
// for j in mc_remote_driver [ i ] do
68853: LD_ADDR_VAR 0 3
68857: PUSH
68858: LD_EXP 100
68862: PUSH
68863: LD_VAR 0 2
68867: ARRAY
68868: PUSH
68869: FOR_IN
68870: IFFALSE 69236
// begin if GetClass ( j ) <> 3 then
68872: LD_VAR 0 3
68876: PPUSH
68877: CALL_OW 257
68881: PUSH
68882: LD_INT 3
68884: NONEQUAL
68885: IFFALSE 68938
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
68887: LD_ADDR_EXP 100
68891: PUSH
68892: LD_EXP 100
68896: PPUSH
68897: LD_VAR 0 2
68901: PPUSH
68902: LD_EXP 100
68906: PUSH
68907: LD_VAR 0 2
68911: ARRAY
68912: PUSH
68913: LD_VAR 0 3
68917: DIFF
68918: PPUSH
68919: CALL_OW 1
68923: ST_TO_ADDR
// SetTag ( j , 0 ) ;
68924: LD_VAR 0 3
68928: PPUSH
68929: LD_INT 0
68931: PPUSH
68932: CALL_OW 109
// continue ;
68936: GO 68869
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
68938: LD_EXP 79
68942: PUSH
68943: LD_VAR 0 2
68947: ARRAY
68948: PPUSH
68949: LD_INT 34
68951: PUSH
68952: LD_INT 31
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: PUSH
68959: LD_INT 58
68961: PUSH
68962: EMPTY
68963: LIST
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: PPUSH
68969: CALL_OW 72
68973: PUSH
68974: LD_VAR 0 3
68978: PPUSH
68979: CALL 44777 0 1
68983: NOT
68984: AND
68985: IFFALSE 69056
// begin if IsInUnit ( j ) then
68987: LD_VAR 0 3
68991: PPUSH
68992: CALL_OW 310
68996: IFFALSE 69007
// ComExitBuilding ( j ) ;
68998: LD_VAR 0 3
69002: PPUSH
69003: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
69007: LD_VAR 0 3
69011: PPUSH
69012: LD_EXP 79
69016: PUSH
69017: LD_VAR 0 2
69021: ARRAY
69022: PPUSH
69023: LD_INT 34
69025: PUSH
69026: LD_INT 31
69028: PUSH
69029: EMPTY
69030: LIST
69031: LIST
69032: PUSH
69033: LD_INT 58
69035: PUSH
69036: EMPTY
69037: LIST
69038: PUSH
69039: EMPTY
69040: LIST
69041: LIST
69042: PPUSH
69043: CALL_OW 72
69047: PUSH
69048: LD_INT 1
69050: ARRAY
69051: PPUSH
69052: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
69056: LD_VAR 0 3
69060: PPUSH
69061: CALL_OW 310
69065: NOT
69066: PUSH
69067: LD_VAR 0 3
69071: PPUSH
69072: CALL_OW 310
69076: PPUSH
69077: CALL_OW 266
69081: PUSH
69082: LD_INT 36
69084: NONEQUAL
69085: PUSH
69086: LD_VAR 0 3
69090: PPUSH
69091: CALL 44777 0 1
69095: NOT
69096: AND
69097: OR
69098: IFFALSE 69234
// begin if IsInUnit ( j ) then
69100: LD_VAR 0 3
69104: PPUSH
69105: CALL_OW 310
69109: IFFALSE 69120
// ComExitBuilding ( j ) ;
69111: LD_VAR 0 3
69115: PPUSH
69116: CALL_OW 122
// ct := 0 ;
69120: LD_ADDR_VAR 0 8
69124: PUSH
69125: LD_INT 0
69127: ST_TO_ADDR
// for k in x do
69128: LD_ADDR_VAR 0 4
69132: PUSH
69133: LD_VAR 0 11
69137: PUSH
69138: FOR_IN
69139: IFFALSE 69212
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
69141: LD_VAR 0 4
69145: PPUSH
69146: CALL_OW 264
69150: PUSH
69151: LD_INT 31
69153: EQUAL
69154: PUSH
69155: LD_VAR 0 4
69159: PPUSH
69160: CALL_OW 311
69164: NOT
69165: AND
69166: PUSH
69167: LD_VAR 0 4
69171: PPUSH
69172: CALL_OW 266
69176: PUSH
69177: LD_INT 36
69179: EQUAL
69180: PUSH
69181: LD_VAR 0 4
69185: PPUSH
69186: CALL_OW 313
69190: PUSH
69191: LD_INT 3
69193: LESS
69194: AND
69195: OR
69196: IFFALSE 69210
// begin ct := k ;
69198: LD_ADDR_VAR 0 8
69202: PUSH
69203: LD_VAR 0 4
69207: ST_TO_ADDR
// break ;
69208: GO 69212
// end ;
69210: GO 69138
69212: POP
69213: POP
// if ct then
69214: LD_VAR 0 8
69218: IFFALSE 69234
// ComEnterUnit ( j , ct ) ;
69220: LD_VAR 0 3
69224: PPUSH
69225: LD_VAR 0 8
69229: PPUSH
69230: CALL_OW 120
// end ; end ;
69234: GO 68869
69236: POP
69237: POP
// places := 0 ;
69238: LD_ADDR_VAR 0 5
69242: PUSH
69243: LD_INT 0
69245: ST_TO_ADDR
// for j = 1 to x do
69246: LD_ADDR_VAR 0 3
69250: PUSH
69251: DOUBLE
69252: LD_INT 1
69254: DEC
69255: ST_TO_ADDR
69256: LD_VAR 0 11
69260: PUSH
69261: FOR_TO
69262: IFFALSE 69338
// if GetWeapon ( x [ j ] ) = ar_control_tower then
69264: LD_VAR 0 11
69268: PUSH
69269: LD_VAR 0 3
69273: ARRAY
69274: PPUSH
69275: CALL_OW 264
69279: PUSH
69280: LD_INT 31
69282: EQUAL
69283: IFFALSE 69301
// places := places + 1 else
69285: LD_ADDR_VAR 0 5
69289: PUSH
69290: LD_VAR 0 5
69294: PUSH
69295: LD_INT 1
69297: PLUS
69298: ST_TO_ADDR
69299: GO 69336
// if GetBType ( x [ j ] ) = b_control_tower then
69301: LD_VAR 0 11
69305: PUSH
69306: LD_VAR 0 3
69310: ARRAY
69311: PPUSH
69312: CALL_OW 266
69316: PUSH
69317: LD_INT 36
69319: EQUAL
69320: IFFALSE 69336
// places := places + 3 ;
69322: LD_ADDR_VAR 0 5
69326: PUSH
69327: LD_VAR 0 5
69331: PUSH
69332: LD_INT 3
69334: PLUS
69335: ST_TO_ADDR
69336: GO 69261
69338: POP
69339: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
69340: LD_VAR 0 5
69344: PUSH
69345: LD_INT 0
69347: EQUAL
69348: PUSH
69349: LD_VAR 0 5
69353: PUSH
69354: LD_EXP 100
69358: PUSH
69359: LD_VAR 0 2
69363: ARRAY
69364: LESSEQUAL
69365: OR
69366: IFFALSE 69370
// continue ;
69368: GO 68620
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
69370: LD_ADDR_VAR 0 6
69374: PUSH
69375: LD_EXP 60
69379: PUSH
69380: LD_VAR 0 2
69384: ARRAY
69385: PPUSH
69386: LD_INT 25
69388: PUSH
69389: LD_INT 3
69391: PUSH
69392: EMPTY
69393: LIST
69394: LIST
69395: PPUSH
69396: CALL_OW 72
69400: PUSH
69401: LD_EXP 100
69405: PUSH
69406: LD_VAR 0 2
69410: ARRAY
69411: DIFF
69412: PPUSH
69413: LD_INT 3
69415: PPUSH
69416: CALL 45677 0 2
69420: ST_TO_ADDR
// for j in tmp do
69421: LD_ADDR_VAR 0 3
69425: PUSH
69426: LD_VAR 0 6
69430: PUSH
69431: FOR_IN
69432: IFFALSE 69467
// if GetTag ( j ) > 0 then
69434: LD_VAR 0 3
69438: PPUSH
69439: CALL_OW 110
69443: PUSH
69444: LD_INT 0
69446: GREATER
69447: IFFALSE 69465
// tmp := tmp diff j ;
69449: LD_ADDR_VAR 0 6
69453: PUSH
69454: LD_VAR 0 6
69458: PUSH
69459: LD_VAR 0 3
69463: DIFF
69464: ST_TO_ADDR
69465: GO 69431
69467: POP
69468: POP
// if not tmp then
69469: LD_VAR 0 6
69473: NOT
69474: IFFALSE 69478
// continue ;
69476: GO 68620
// if places then
69478: LD_VAR 0 5
69482: IFFALSE 69541
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
69484: LD_ADDR_EXP 100
69488: PUSH
69489: LD_EXP 100
69493: PPUSH
69494: LD_VAR 0 2
69498: PPUSH
69499: LD_EXP 100
69503: PUSH
69504: LD_VAR 0 2
69508: ARRAY
69509: PUSH
69510: LD_VAR 0 6
69514: PUSH
69515: LD_INT 1
69517: ARRAY
69518: UNION
69519: PPUSH
69520: CALL_OW 1
69524: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
69525: LD_VAR 0 6
69529: PUSH
69530: LD_INT 1
69532: ARRAY
69533: PPUSH
69534: LD_INT 126
69536: PPUSH
69537: CALL_OW 109
// end ; end ;
69541: GO 68620
69543: POP
69544: POP
// end ;
69545: LD_VAR 0 1
69549: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
69550: LD_INT 0
69552: PPUSH
69553: PPUSH
69554: PPUSH
69555: PPUSH
69556: PPUSH
69557: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
69558: LD_VAR 0 1
69562: NOT
69563: PUSH
69564: LD_VAR 0 2
69568: NOT
69569: OR
69570: PUSH
69571: LD_VAR 0 3
69575: NOT
69576: OR
69577: PUSH
69578: LD_VAR 0 4
69582: PUSH
69583: LD_INT 1
69585: PUSH
69586: LD_INT 2
69588: PUSH
69589: LD_INT 3
69591: PUSH
69592: LD_INT 4
69594: PUSH
69595: LD_INT 5
69597: PUSH
69598: LD_INT 8
69600: PUSH
69601: LD_INT 9
69603: PUSH
69604: LD_INT 15
69606: PUSH
69607: LD_INT 16
69609: PUSH
69610: EMPTY
69611: LIST
69612: LIST
69613: LIST
69614: LIST
69615: LIST
69616: LIST
69617: LIST
69618: LIST
69619: LIST
69620: IN
69621: NOT
69622: OR
69623: IFFALSE 69627
// exit ;
69625: GO 70527
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
69627: LD_ADDR_VAR 0 2
69631: PUSH
69632: LD_VAR 0 2
69636: PPUSH
69637: LD_INT 21
69639: PUSH
69640: LD_INT 3
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: PUSH
69647: LD_INT 24
69649: PUSH
69650: LD_INT 250
69652: PUSH
69653: EMPTY
69654: LIST
69655: LIST
69656: PUSH
69657: EMPTY
69658: LIST
69659: LIST
69660: PPUSH
69661: CALL_OW 72
69665: ST_TO_ADDR
// case class of 1 , 15 :
69666: LD_VAR 0 4
69670: PUSH
69671: LD_INT 1
69673: DOUBLE
69674: EQUAL
69675: IFTRUE 69685
69677: LD_INT 15
69679: DOUBLE
69680: EQUAL
69681: IFTRUE 69685
69683: GO 69770
69685: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
69686: LD_ADDR_VAR 0 8
69690: PUSH
69691: LD_VAR 0 2
69695: PPUSH
69696: LD_INT 2
69698: PUSH
69699: LD_INT 30
69701: PUSH
69702: LD_INT 32
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: PUSH
69709: LD_INT 30
69711: PUSH
69712: LD_INT 31
69714: PUSH
69715: EMPTY
69716: LIST
69717: LIST
69718: PUSH
69719: EMPTY
69720: LIST
69721: LIST
69722: LIST
69723: PPUSH
69724: CALL_OW 72
69728: PUSH
69729: LD_VAR 0 2
69733: PPUSH
69734: LD_INT 2
69736: PUSH
69737: LD_INT 30
69739: PUSH
69740: LD_INT 4
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: PUSH
69747: LD_INT 30
69749: PUSH
69750: LD_INT 5
69752: PUSH
69753: EMPTY
69754: LIST
69755: LIST
69756: PUSH
69757: EMPTY
69758: LIST
69759: LIST
69760: LIST
69761: PPUSH
69762: CALL_OW 72
69766: ADD
69767: ST_TO_ADDR
69768: GO 70016
69770: LD_INT 2
69772: DOUBLE
69773: EQUAL
69774: IFTRUE 69784
69776: LD_INT 16
69778: DOUBLE
69779: EQUAL
69780: IFTRUE 69784
69782: GO 69830
69784: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
69785: LD_ADDR_VAR 0 8
69789: PUSH
69790: LD_VAR 0 2
69794: PPUSH
69795: LD_INT 2
69797: PUSH
69798: LD_INT 30
69800: PUSH
69801: LD_INT 0
69803: PUSH
69804: EMPTY
69805: LIST
69806: LIST
69807: PUSH
69808: LD_INT 30
69810: PUSH
69811: LD_INT 1
69813: PUSH
69814: EMPTY
69815: LIST
69816: LIST
69817: PUSH
69818: EMPTY
69819: LIST
69820: LIST
69821: LIST
69822: PPUSH
69823: CALL_OW 72
69827: ST_TO_ADDR
69828: GO 70016
69830: LD_INT 3
69832: DOUBLE
69833: EQUAL
69834: IFTRUE 69838
69836: GO 69884
69838: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
69839: LD_ADDR_VAR 0 8
69843: PUSH
69844: LD_VAR 0 2
69848: PPUSH
69849: LD_INT 2
69851: PUSH
69852: LD_INT 30
69854: PUSH
69855: LD_INT 2
69857: PUSH
69858: EMPTY
69859: LIST
69860: LIST
69861: PUSH
69862: LD_INT 30
69864: PUSH
69865: LD_INT 3
69867: PUSH
69868: EMPTY
69869: LIST
69870: LIST
69871: PUSH
69872: EMPTY
69873: LIST
69874: LIST
69875: LIST
69876: PPUSH
69877: CALL_OW 72
69881: ST_TO_ADDR
69882: GO 70016
69884: LD_INT 4
69886: DOUBLE
69887: EQUAL
69888: IFTRUE 69892
69890: GO 69949
69892: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
69893: LD_ADDR_VAR 0 8
69897: PUSH
69898: LD_VAR 0 2
69902: PPUSH
69903: LD_INT 2
69905: PUSH
69906: LD_INT 30
69908: PUSH
69909: LD_INT 6
69911: PUSH
69912: EMPTY
69913: LIST
69914: LIST
69915: PUSH
69916: LD_INT 30
69918: PUSH
69919: LD_INT 7
69921: PUSH
69922: EMPTY
69923: LIST
69924: LIST
69925: PUSH
69926: LD_INT 30
69928: PUSH
69929: LD_INT 8
69931: PUSH
69932: EMPTY
69933: LIST
69934: LIST
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: LIST
69940: LIST
69941: PPUSH
69942: CALL_OW 72
69946: ST_TO_ADDR
69947: GO 70016
69949: LD_INT 5
69951: DOUBLE
69952: EQUAL
69953: IFTRUE 69969
69955: LD_INT 8
69957: DOUBLE
69958: EQUAL
69959: IFTRUE 69969
69961: LD_INT 9
69963: DOUBLE
69964: EQUAL
69965: IFTRUE 69969
69967: GO 70015
69969: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
69970: LD_ADDR_VAR 0 8
69974: PUSH
69975: LD_VAR 0 2
69979: PPUSH
69980: LD_INT 2
69982: PUSH
69983: LD_INT 30
69985: PUSH
69986: LD_INT 4
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: PUSH
69993: LD_INT 30
69995: PUSH
69996: LD_INT 5
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: LIST
70007: PPUSH
70008: CALL_OW 72
70012: ST_TO_ADDR
70013: GO 70016
70015: POP
// if not tmp then
70016: LD_VAR 0 8
70020: NOT
70021: IFFALSE 70025
// exit ;
70023: GO 70527
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
70025: LD_VAR 0 4
70029: PUSH
70030: LD_INT 1
70032: PUSH
70033: LD_INT 15
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: IN
70040: PUSH
70041: LD_EXP 69
70045: PUSH
70046: LD_VAR 0 1
70050: ARRAY
70051: AND
70052: IFFALSE 70208
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
70054: LD_ADDR_VAR 0 9
70058: PUSH
70059: LD_EXP 69
70063: PUSH
70064: LD_VAR 0 1
70068: ARRAY
70069: PUSH
70070: LD_INT 1
70072: ARRAY
70073: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
70074: LD_VAR 0 9
70078: PUSH
70079: LD_EXP 70
70083: PUSH
70084: LD_VAR 0 1
70088: ARRAY
70089: IN
70090: NOT
70091: IFFALSE 70206
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
70093: LD_ADDR_EXP 70
70097: PUSH
70098: LD_EXP 70
70102: PPUSH
70103: LD_VAR 0 1
70107: PUSH
70108: LD_EXP 70
70112: PUSH
70113: LD_VAR 0 1
70117: ARRAY
70118: PUSH
70119: LD_INT 1
70121: PLUS
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: PPUSH
70127: LD_VAR 0 9
70131: PPUSH
70132: CALL 16128 0 3
70136: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
70137: LD_ADDR_EXP 69
70141: PUSH
70142: LD_EXP 69
70146: PPUSH
70147: LD_VAR 0 1
70151: PPUSH
70152: LD_EXP 69
70156: PUSH
70157: LD_VAR 0 1
70161: ARRAY
70162: PUSH
70163: LD_VAR 0 9
70167: DIFF
70168: PPUSH
70169: CALL_OW 1
70173: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
70174: LD_VAR 0 3
70178: PPUSH
70179: LD_EXP 70
70183: PUSH
70184: LD_VAR 0 1
70188: ARRAY
70189: PUSH
70190: LD_EXP 70
70194: PUSH
70195: LD_VAR 0 1
70199: ARRAY
70200: ARRAY
70201: PPUSH
70202: CALL_OW 120
// end ; exit ;
70206: GO 70527
// end ; if tmp > 1 then
70208: LD_VAR 0 8
70212: PUSH
70213: LD_INT 1
70215: GREATER
70216: IFFALSE 70320
// for i = 2 to tmp do
70218: LD_ADDR_VAR 0 6
70222: PUSH
70223: DOUBLE
70224: LD_INT 2
70226: DEC
70227: ST_TO_ADDR
70228: LD_VAR 0 8
70232: PUSH
70233: FOR_TO
70234: IFFALSE 70318
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
70236: LD_VAR 0 8
70240: PUSH
70241: LD_VAR 0 6
70245: ARRAY
70246: PPUSH
70247: CALL_OW 461
70251: PUSH
70252: LD_INT 6
70254: EQUAL
70255: IFFALSE 70316
// begin x := tmp [ i ] ;
70257: LD_ADDR_VAR 0 9
70261: PUSH
70262: LD_VAR 0 8
70266: PUSH
70267: LD_VAR 0 6
70271: ARRAY
70272: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
70273: LD_ADDR_VAR 0 8
70277: PUSH
70278: LD_VAR 0 8
70282: PPUSH
70283: LD_VAR 0 6
70287: PPUSH
70288: CALL_OW 3
70292: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
70293: LD_ADDR_VAR 0 8
70297: PUSH
70298: LD_VAR 0 8
70302: PPUSH
70303: LD_INT 1
70305: PPUSH
70306: LD_VAR 0 9
70310: PPUSH
70311: CALL_OW 2
70315: ST_TO_ADDR
// end ;
70316: GO 70233
70318: POP
70319: POP
// for i in tmp do
70320: LD_ADDR_VAR 0 6
70324: PUSH
70325: LD_VAR 0 8
70329: PUSH
70330: FOR_IN
70331: IFFALSE 70400
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
70333: LD_VAR 0 6
70337: PPUSH
70338: CALL_OW 313
70342: PUSH
70343: LD_INT 6
70345: LESS
70346: PUSH
70347: LD_VAR 0 6
70351: PPUSH
70352: CALL_OW 266
70356: PUSH
70357: LD_INT 31
70359: PUSH
70360: LD_INT 32
70362: PUSH
70363: EMPTY
70364: LIST
70365: LIST
70366: IN
70367: NOT
70368: AND
70369: PUSH
70370: LD_VAR 0 6
70374: PPUSH
70375: CALL_OW 313
70379: PUSH
70380: LD_INT 0
70382: EQUAL
70383: OR
70384: IFFALSE 70398
// begin j := i ;
70386: LD_ADDR_VAR 0 7
70390: PUSH
70391: LD_VAR 0 6
70395: ST_TO_ADDR
// break ;
70396: GO 70400
// end ; end ;
70398: GO 70330
70400: POP
70401: POP
// if j then
70402: LD_VAR 0 7
70406: IFFALSE 70424
// ComEnterUnit ( unit , j ) else
70408: LD_VAR 0 3
70412: PPUSH
70413: LD_VAR 0 7
70417: PPUSH
70418: CALL_OW 120
70422: GO 70527
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
70424: LD_ADDR_VAR 0 10
70428: PUSH
70429: LD_VAR 0 2
70433: PPUSH
70434: LD_INT 2
70436: PUSH
70437: LD_INT 30
70439: PUSH
70440: LD_INT 0
70442: PUSH
70443: EMPTY
70444: LIST
70445: LIST
70446: PUSH
70447: LD_INT 30
70449: PUSH
70450: LD_INT 1
70452: PUSH
70453: EMPTY
70454: LIST
70455: LIST
70456: PUSH
70457: EMPTY
70458: LIST
70459: LIST
70460: LIST
70461: PPUSH
70462: CALL_OW 72
70466: ST_TO_ADDR
// if depot then
70467: LD_VAR 0 10
70471: IFFALSE 70527
// begin depot := NearestUnitToUnit ( depot , unit ) ;
70473: LD_ADDR_VAR 0 10
70477: PUSH
70478: LD_VAR 0 10
70482: PPUSH
70483: LD_VAR 0 3
70487: PPUSH
70488: CALL_OW 74
70492: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
70493: LD_VAR 0 3
70497: PPUSH
70498: LD_VAR 0 10
70502: PPUSH
70503: CALL_OW 296
70507: PUSH
70508: LD_INT 10
70510: GREATER
70511: IFFALSE 70527
// ComStandNearbyBuilding ( unit , depot ) ;
70513: LD_VAR 0 3
70517: PPUSH
70518: LD_VAR 0 10
70522: PPUSH
70523: CALL 12742 0 2
// end ; end ; end ;
70527: LD_VAR 0 5
70531: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
70532: LD_INT 0
70534: PPUSH
70535: PPUSH
70536: PPUSH
70537: PPUSH
// if not mc_bases then
70538: LD_EXP 60
70542: NOT
70543: IFFALSE 70547
// exit ;
70545: GO 70786
// for i = 1 to mc_bases do
70547: LD_ADDR_VAR 0 2
70551: PUSH
70552: DOUBLE
70553: LD_INT 1
70555: DEC
70556: ST_TO_ADDR
70557: LD_EXP 60
70561: PUSH
70562: FOR_TO
70563: IFFALSE 70784
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
70565: LD_ADDR_VAR 0 4
70569: PUSH
70570: LD_EXP 60
70574: PUSH
70575: LD_VAR 0 2
70579: ARRAY
70580: PPUSH
70581: LD_INT 21
70583: PUSH
70584: LD_INT 1
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: PPUSH
70591: CALL_OW 72
70595: PUSH
70596: LD_EXP 89
70600: PUSH
70601: LD_VAR 0 2
70605: ARRAY
70606: UNION
70607: ST_TO_ADDR
// if not tmp then
70608: LD_VAR 0 4
70612: NOT
70613: IFFALSE 70617
// continue ;
70615: GO 70562
// for j in tmp do
70617: LD_ADDR_VAR 0 3
70621: PUSH
70622: LD_VAR 0 4
70626: PUSH
70627: FOR_IN
70628: IFFALSE 70780
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
70630: LD_VAR 0 3
70634: PPUSH
70635: CALL_OW 110
70639: NOT
70640: PUSH
70641: LD_VAR 0 3
70645: PPUSH
70646: CALL_OW 314
70650: NOT
70651: AND
70652: PUSH
70653: LD_VAR 0 3
70657: PPUSH
70658: CALL_OW 311
70662: NOT
70663: AND
70664: PUSH
70665: LD_VAR 0 3
70669: PPUSH
70670: CALL_OW 310
70674: NOT
70675: AND
70676: PUSH
70677: LD_VAR 0 3
70681: PUSH
70682: LD_EXP 63
70686: PUSH
70687: LD_VAR 0 2
70691: ARRAY
70692: PUSH
70693: LD_INT 1
70695: ARRAY
70696: IN
70697: NOT
70698: AND
70699: PUSH
70700: LD_VAR 0 3
70704: PUSH
70705: LD_EXP 63
70709: PUSH
70710: LD_VAR 0 2
70714: ARRAY
70715: PUSH
70716: LD_INT 2
70718: ARRAY
70719: IN
70720: NOT
70721: AND
70722: PUSH
70723: LD_VAR 0 3
70727: PUSH
70728: LD_EXP 72
70732: PUSH
70733: LD_VAR 0 2
70737: ARRAY
70738: IN
70739: NOT
70740: AND
70741: IFFALSE 70778
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
70743: LD_VAR 0 2
70747: PPUSH
70748: LD_EXP 60
70752: PUSH
70753: LD_VAR 0 2
70757: ARRAY
70758: PPUSH
70759: LD_VAR 0 3
70763: PPUSH
70764: LD_VAR 0 3
70768: PPUSH
70769: CALL_OW 257
70773: PPUSH
70774: CALL 69550 0 4
// end ;
70778: GO 70627
70780: POP
70781: POP
// end ;
70782: GO 70562
70784: POP
70785: POP
// end ;
70786: LD_VAR 0 1
70790: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
70791: LD_INT 0
70793: PPUSH
70794: PPUSH
70795: PPUSH
70796: PPUSH
70797: PPUSH
70798: PPUSH
// if not mc_bases [ base ] then
70799: LD_EXP 60
70803: PUSH
70804: LD_VAR 0 1
70808: ARRAY
70809: NOT
70810: IFFALSE 70814
// exit ;
70812: GO 70996
// tmp := [ ] ;
70814: LD_ADDR_VAR 0 6
70818: PUSH
70819: EMPTY
70820: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
70821: LD_ADDR_VAR 0 7
70825: PUSH
70826: LD_VAR 0 3
70830: PPUSH
70831: LD_INT 0
70833: PPUSH
70834: CALL_OW 517
70838: ST_TO_ADDR
// if not list then
70839: LD_VAR 0 7
70843: NOT
70844: IFFALSE 70848
// exit ;
70846: GO 70996
// for i = 1 to amount do
70848: LD_ADDR_VAR 0 5
70852: PUSH
70853: DOUBLE
70854: LD_INT 1
70856: DEC
70857: ST_TO_ADDR
70858: LD_VAR 0 2
70862: PUSH
70863: FOR_TO
70864: IFFALSE 70944
// begin x := rand ( 1 , list [ 1 ] ) ;
70866: LD_ADDR_VAR 0 8
70870: PUSH
70871: LD_INT 1
70873: PPUSH
70874: LD_VAR 0 7
70878: PUSH
70879: LD_INT 1
70881: ARRAY
70882: PPUSH
70883: CALL_OW 12
70887: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
70888: LD_ADDR_VAR 0 6
70892: PUSH
70893: LD_VAR 0 6
70897: PPUSH
70898: LD_VAR 0 5
70902: PPUSH
70903: LD_VAR 0 7
70907: PUSH
70908: LD_INT 1
70910: ARRAY
70911: PUSH
70912: LD_VAR 0 8
70916: ARRAY
70917: PUSH
70918: LD_VAR 0 7
70922: PUSH
70923: LD_INT 2
70925: ARRAY
70926: PUSH
70927: LD_VAR 0 8
70931: ARRAY
70932: PUSH
70933: EMPTY
70934: LIST
70935: LIST
70936: PPUSH
70937: CALL_OW 1
70941: ST_TO_ADDR
// end ;
70942: GO 70863
70944: POP
70945: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
70946: LD_ADDR_EXP 73
70950: PUSH
70951: LD_EXP 73
70955: PPUSH
70956: LD_VAR 0 1
70960: PPUSH
70961: LD_VAR 0 6
70965: PPUSH
70966: CALL_OW 1
70970: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
70971: LD_ADDR_EXP 75
70975: PUSH
70976: LD_EXP 75
70980: PPUSH
70981: LD_VAR 0 1
70985: PPUSH
70986: LD_VAR 0 3
70990: PPUSH
70991: CALL_OW 1
70995: ST_TO_ADDR
// end ;
70996: LD_VAR 0 4
71000: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
71001: LD_INT 0
71003: PPUSH
// if not mc_bases [ base ] then
71004: LD_EXP 60
71008: PUSH
71009: LD_VAR 0 1
71013: ARRAY
71014: NOT
71015: IFFALSE 71019
// exit ;
71017: GO 71044
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
71019: LD_ADDR_EXP 65
71023: PUSH
71024: LD_EXP 65
71028: PPUSH
71029: LD_VAR 0 1
71033: PPUSH
71034: LD_VAR 0 2
71038: PPUSH
71039: CALL_OW 1
71043: ST_TO_ADDR
// end ;
71044: LD_VAR 0 3
71048: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
71049: LD_INT 0
71051: PPUSH
// if not mc_bases [ base ] then
71052: LD_EXP 60
71056: PUSH
71057: LD_VAR 0 1
71061: ARRAY
71062: NOT
71063: IFFALSE 71067
// exit ;
71065: GO 71104
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
71067: LD_ADDR_EXP 65
71071: PUSH
71072: LD_EXP 65
71076: PPUSH
71077: LD_VAR 0 1
71081: PPUSH
71082: LD_EXP 65
71086: PUSH
71087: LD_VAR 0 1
71091: ARRAY
71092: PUSH
71093: LD_VAR 0 2
71097: UNION
71098: PPUSH
71099: CALL_OW 1
71103: ST_TO_ADDR
// end ;
71104: LD_VAR 0 3
71108: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
71109: LD_INT 0
71111: PPUSH
// if not mc_bases [ base ] then
71112: LD_EXP 60
71116: PUSH
71117: LD_VAR 0 1
71121: ARRAY
71122: NOT
71123: IFFALSE 71127
// exit ;
71125: GO 71152
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
71127: LD_ADDR_EXP 81
71131: PUSH
71132: LD_EXP 81
71136: PPUSH
71137: LD_VAR 0 1
71141: PPUSH
71142: LD_VAR 0 2
71146: PPUSH
71147: CALL_OW 1
71151: ST_TO_ADDR
// end ;
71152: LD_VAR 0 3
71156: RET
// export function MC_InsertProduceList ( base , components ) ; begin
71157: LD_INT 0
71159: PPUSH
// if not mc_bases [ base ] then
71160: LD_EXP 60
71164: PUSH
71165: LD_VAR 0 1
71169: ARRAY
71170: NOT
71171: IFFALSE 71175
// exit ;
71173: GO 71212
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
71175: LD_ADDR_EXP 81
71179: PUSH
71180: LD_EXP 81
71184: PPUSH
71185: LD_VAR 0 1
71189: PPUSH
71190: LD_EXP 81
71194: PUSH
71195: LD_VAR 0 1
71199: ARRAY
71200: PUSH
71201: LD_VAR 0 2
71205: ADD
71206: PPUSH
71207: CALL_OW 1
71211: ST_TO_ADDR
// end ;
71212: LD_VAR 0 3
71216: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
71217: LD_INT 0
71219: PPUSH
// if not mc_bases [ base ] then
71220: LD_EXP 60
71224: PUSH
71225: LD_VAR 0 1
71229: ARRAY
71230: NOT
71231: IFFALSE 71235
// exit ;
71233: GO 71289
// mc_defender := Replace ( mc_defender , base , deflist ) ;
71235: LD_ADDR_EXP 82
71239: PUSH
71240: LD_EXP 82
71244: PPUSH
71245: LD_VAR 0 1
71249: PPUSH
71250: LD_VAR 0 2
71254: PPUSH
71255: CALL_OW 1
71259: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
71260: LD_ADDR_EXP 71
71264: PUSH
71265: LD_EXP 71
71269: PPUSH
71270: LD_VAR 0 1
71274: PPUSH
71275: LD_VAR 0 2
71279: PUSH
71280: LD_INT 0
71282: PLUS
71283: PPUSH
71284: CALL_OW 1
71288: ST_TO_ADDR
// end ;
71289: LD_VAR 0 3
71293: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
71294: LD_INT 0
71296: PPUSH
// if not mc_bases [ base ] then
71297: LD_EXP 60
71301: PUSH
71302: LD_VAR 0 1
71306: ARRAY
71307: NOT
71308: IFFALSE 71312
// exit ;
71310: GO 71337
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
71312: LD_ADDR_EXP 71
71316: PUSH
71317: LD_EXP 71
71321: PPUSH
71322: LD_VAR 0 1
71326: PPUSH
71327: LD_VAR 0 2
71331: PPUSH
71332: CALL_OW 1
71336: ST_TO_ADDR
// end ;
71337: LD_VAR 0 3
71341: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
71342: LD_INT 0
71344: PPUSH
71345: PPUSH
71346: PPUSH
71347: PPUSH
// if not mc_bases [ base ] then
71348: LD_EXP 60
71352: PUSH
71353: LD_VAR 0 1
71357: ARRAY
71358: NOT
71359: IFFALSE 71363
// exit ;
71361: GO 71428
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
71363: LD_ADDR_EXP 80
71367: PUSH
71368: LD_EXP 80
71372: PPUSH
71373: LD_VAR 0 1
71377: PUSH
71378: LD_EXP 80
71382: PUSH
71383: LD_VAR 0 1
71387: ARRAY
71388: PUSH
71389: LD_INT 1
71391: PLUS
71392: PUSH
71393: EMPTY
71394: LIST
71395: LIST
71396: PPUSH
71397: LD_VAR 0 1
71401: PUSH
71402: LD_VAR 0 2
71406: PUSH
71407: LD_VAR 0 3
71411: PUSH
71412: LD_VAR 0 4
71416: PUSH
71417: EMPTY
71418: LIST
71419: LIST
71420: LIST
71421: LIST
71422: PPUSH
71423: CALL 16128 0 3
71427: ST_TO_ADDR
// end ;
71428: LD_VAR 0 5
71432: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
71433: LD_INT 0
71435: PPUSH
// if not mc_bases [ base ] then
71436: LD_EXP 60
71440: PUSH
71441: LD_VAR 0 1
71445: ARRAY
71446: NOT
71447: IFFALSE 71451
// exit ;
71449: GO 71476
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
71451: LD_ADDR_EXP 97
71455: PUSH
71456: LD_EXP 97
71460: PPUSH
71461: LD_VAR 0 1
71465: PPUSH
71466: LD_VAR 0 2
71470: PPUSH
71471: CALL_OW 1
71475: ST_TO_ADDR
// end ;
71476: LD_VAR 0 3
71480: RET
// export function MC_GetMinesField ( base ) ; begin
71481: LD_INT 0
71483: PPUSH
// result := mc_mines [ base ] ;
71484: LD_ADDR_VAR 0 2
71488: PUSH
71489: LD_EXP 73
71493: PUSH
71494: LD_VAR 0 1
71498: ARRAY
71499: ST_TO_ADDR
// end ;
71500: LD_VAR 0 2
71504: RET
// export function MC_GetProduceList ( base ) ; begin
71505: LD_INT 0
71507: PPUSH
// result := mc_produce [ base ] ;
71508: LD_ADDR_VAR 0 2
71512: PUSH
71513: LD_EXP 81
71517: PUSH
71518: LD_VAR 0 1
71522: ARRAY
71523: ST_TO_ADDR
// end ;
71524: LD_VAR 0 2
71528: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
71529: LD_INT 0
71531: PPUSH
71532: PPUSH
// if not mc_bases then
71533: LD_EXP 60
71537: NOT
71538: IFFALSE 71542
// exit ;
71540: GO 71607
// if mc_bases [ base ] then
71542: LD_EXP 60
71546: PUSH
71547: LD_VAR 0 1
71551: ARRAY
71552: IFFALSE 71607
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
71554: LD_ADDR_VAR 0 3
71558: PUSH
71559: LD_EXP 60
71563: PUSH
71564: LD_VAR 0 1
71568: ARRAY
71569: PPUSH
71570: LD_INT 30
71572: PUSH
71573: LD_VAR 0 2
71577: PUSH
71578: EMPTY
71579: LIST
71580: LIST
71581: PPUSH
71582: CALL_OW 72
71586: ST_TO_ADDR
// if result then
71587: LD_VAR 0 3
71591: IFFALSE 71607
// result := result [ 1 ] ;
71593: LD_ADDR_VAR 0 3
71597: PUSH
71598: LD_VAR 0 3
71602: PUSH
71603: LD_INT 1
71605: ARRAY
71606: ST_TO_ADDR
// end ; end ;
71607: LD_VAR 0 3
71611: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
71612: LD_INT 0
71614: PPUSH
71615: PPUSH
// if not mc_bases then
71616: LD_EXP 60
71620: NOT
71621: IFFALSE 71625
// exit ;
71623: GO 71670
// if mc_bases [ base ] then
71625: LD_EXP 60
71629: PUSH
71630: LD_VAR 0 1
71634: ARRAY
71635: IFFALSE 71670
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
71637: LD_ADDR_VAR 0 3
71641: PUSH
71642: LD_EXP 60
71646: PUSH
71647: LD_VAR 0 1
71651: ARRAY
71652: PPUSH
71653: LD_INT 30
71655: PUSH
71656: LD_VAR 0 2
71660: PUSH
71661: EMPTY
71662: LIST
71663: LIST
71664: PPUSH
71665: CALL_OW 72
71669: ST_TO_ADDR
// end ;
71670: LD_VAR 0 3
71674: RET
// export function MC_SetTame ( base , area ) ; begin
71675: LD_INT 0
71677: PPUSH
// if not mc_bases or not base then
71678: LD_EXP 60
71682: NOT
71683: PUSH
71684: LD_VAR 0 1
71688: NOT
71689: OR
71690: IFFALSE 71694
// exit ;
71692: GO 71719
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
71694: LD_ADDR_EXP 88
71698: PUSH
71699: LD_EXP 88
71703: PPUSH
71704: LD_VAR 0 1
71708: PPUSH
71709: LD_VAR 0 2
71713: PPUSH
71714: CALL_OW 1
71718: ST_TO_ADDR
// end ;
71719: LD_VAR 0 3
71723: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
71724: LD_INT 0
71726: PPUSH
71727: PPUSH
// if not mc_bases or not base then
71728: LD_EXP 60
71732: NOT
71733: PUSH
71734: LD_VAR 0 1
71738: NOT
71739: OR
71740: IFFALSE 71744
// exit ;
71742: GO 71846
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
71744: LD_ADDR_VAR 0 4
71748: PUSH
71749: LD_EXP 60
71753: PUSH
71754: LD_VAR 0 1
71758: ARRAY
71759: PPUSH
71760: LD_INT 30
71762: PUSH
71763: LD_VAR 0 2
71767: PUSH
71768: EMPTY
71769: LIST
71770: LIST
71771: PPUSH
71772: CALL_OW 72
71776: ST_TO_ADDR
// if not tmp then
71777: LD_VAR 0 4
71781: NOT
71782: IFFALSE 71786
// exit ;
71784: GO 71846
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
71786: LD_ADDR_EXP 92
71790: PUSH
71791: LD_EXP 92
71795: PPUSH
71796: LD_VAR 0 1
71800: PPUSH
71801: LD_EXP 92
71805: PUSH
71806: LD_VAR 0 1
71810: ARRAY
71811: PPUSH
71812: LD_EXP 92
71816: PUSH
71817: LD_VAR 0 1
71821: ARRAY
71822: PUSH
71823: LD_INT 1
71825: PLUS
71826: PPUSH
71827: LD_VAR 0 4
71831: PUSH
71832: LD_INT 1
71834: ARRAY
71835: PPUSH
71836: CALL_OW 2
71840: PPUSH
71841: CALL_OW 1
71845: ST_TO_ADDR
// end ;
71846: LD_VAR 0 3
71850: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
71851: LD_INT 0
71853: PPUSH
71854: PPUSH
// if not mc_bases or not base or not kinds then
71855: LD_EXP 60
71859: NOT
71860: PUSH
71861: LD_VAR 0 1
71865: NOT
71866: OR
71867: PUSH
71868: LD_VAR 0 2
71872: NOT
71873: OR
71874: IFFALSE 71878
// exit ;
71876: GO 71939
// for i in kinds do
71878: LD_ADDR_VAR 0 4
71882: PUSH
71883: LD_VAR 0 2
71887: PUSH
71888: FOR_IN
71889: IFFALSE 71937
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
71891: LD_ADDR_EXP 94
71895: PUSH
71896: LD_EXP 94
71900: PPUSH
71901: LD_VAR 0 1
71905: PUSH
71906: LD_EXP 94
71910: PUSH
71911: LD_VAR 0 1
71915: ARRAY
71916: PUSH
71917: LD_INT 1
71919: PLUS
71920: PUSH
71921: EMPTY
71922: LIST
71923: LIST
71924: PPUSH
71925: LD_VAR 0 4
71929: PPUSH
71930: CALL 16128 0 3
71934: ST_TO_ADDR
71935: GO 71888
71937: POP
71938: POP
// end ;
71939: LD_VAR 0 3
71943: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
71944: LD_INT 0
71946: PPUSH
// if not mc_bases or not base or not areas then
71947: LD_EXP 60
71951: NOT
71952: PUSH
71953: LD_VAR 0 1
71957: NOT
71958: OR
71959: PUSH
71960: LD_VAR 0 2
71964: NOT
71965: OR
71966: IFFALSE 71970
// exit ;
71968: GO 71995
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
71970: LD_ADDR_EXP 78
71974: PUSH
71975: LD_EXP 78
71979: PPUSH
71980: LD_VAR 0 1
71984: PPUSH
71985: LD_VAR 0 2
71989: PPUSH
71990: CALL_OW 1
71994: ST_TO_ADDR
// end ;
71995: LD_VAR 0 3
71999: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
72000: LD_INT 0
72002: PPUSH
// if not mc_bases or not base or not teleports_exit then
72003: LD_EXP 60
72007: NOT
72008: PUSH
72009: LD_VAR 0 1
72013: NOT
72014: OR
72015: PUSH
72016: LD_VAR 0 2
72020: NOT
72021: OR
72022: IFFALSE 72026
// exit ;
72024: GO 72051
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
72026: LD_ADDR_EXP 95
72030: PUSH
72031: LD_EXP 95
72035: PPUSH
72036: LD_VAR 0 1
72040: PPUSH
72041: LD_VAR 0 2
72045: PPUSH
72046: CALL_OW 1
72050: ST_TO_ADDR
// end ;
72051: LD_VAR 0 3
72055: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
72056: LD_INT 0
72058: PPUSH
72059: PPUSH
72060: PPUSH
// if not mc_bases or not base or not ext_list then
72061: LD_EXP 60
72065: NOT
72066: PUSH
72067: LD_VAR 0 1
72071: NOT
72072: OR
72073: PUSH
72074: LD_VAR 0 5
72078: NOT
72079: OR
72080: IFFALSE 72084
// exit ;
72082: GO 72257
// tmp := GetFacExtXYD ( x , y , d ) ;
72084: LD_ADDR_VAR 0 8
72088: PUSH
72089: LD_VAR 0 2
72093: PPUSH
72094: LD_VAR 0 3
72098: PPUSH
72099: LD_VAR 0 4
72103: PPUSH
72104: CALL 44807 0 3
72108: ST_TO_ADDR
// if not tmp then
72109: LD_VAR 0 8
72113: NOT
72114: IFFALSE 72118
// exit ;
72116: GO 72257
// for i in tmp do
72118: LD_ADDR_VAR 0 7
72122: PUSH
72123: LD_VAR 0 8
72127: PUSH
72128: FOR_IN
72129: IFFALSE 72255
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
72131: LD_ADDR_EXP 65
72135: PUSH
72136: LD_EXP 65
72140: PPUSH
72141: LD_VAR 0 1
72145: PPUSH
72146: LD_EXP 65
72150: PUSH
72151: LD_VAR 0 1
72155: ARRAY
72156: PPUSH
72157: LD_EXP 65
72161: PUSH
72162: LD_VAR 0 1
72166: ARRAY
72167: PUSH
72168: LD_INT 1
72170: PLUS
72171: PPUSH
72172: LD_VAR 0 5
72176: PUSH
72177: LD_INT 1
72179: ARRAY
72180: PUSH
72181: LD_VAR 0 7
72185: PUSH
72186: LD_INT 1
72188: ARRAY
72189: PUSH
72190: LD_VAR 0 7
72194: PUSH
72195: LD_INT 2
72197: ARRAY
72198: PUSH
72199: LD_VAR 0 7
72203: PUSH
72204: LD_INT 3
72206: ARRAY
72207: PUSH
72208: EMPTY
72209: LIST
72210: LIST
72211: LIST
72212: LIST
72213: PPUSH
72214: CALL_OW 2
72218: PPUSH
72219: CALL_OW 1
72223: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
72224: LD_ADDR_VAR 0 5
72228: PUSH
72229: LD_VAR 0 5
72233: PPUSH
72234: LD_INT 1
72236: PPUSH
72237: CALL_OW 3
72241: ST_TO_ADDR
// if not ext_list then
72242: LD_VAR 0 5
72246: NOT
72247: IFFALSE 72253
// exit ;
72249: POP
72250: POP
72251: GO 72257
// end ;
72253: GO 72128
72255: POP
72256: POP
// end ;
72257: LD_VAR 0 6
72261: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
72262: LD_INT 0
72264: PPUSH
// if not mc_bases or not base or not weapon_list then
72265: LD_EXP 60
72269: NOT
72270: PUSH
72271: LD_VAR 0 1
72275: NOT
72276: OR
72277: PUSH
72278: LD_VAR 0 2
72282: NOT
72283: OR
72284: IFFALSE 72288
// exit ;
72286: GO 72313
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
72288: LD_ADDR_EXP 99
72292: PUSH
72293: LD_EXP 99
72297: PPUSH
72298: LD_VAR 0 1
72302: PPUSH
72303: LD_VAR 0 2
72307: PPUSH
72308: CALL_OW 1
72312: ST_TO_ADDR
// end ;
72313: LD_VAR 0 3
72317: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
72318: LD_INT 0
72320: PPUSH
// if not mc_bases or not base or not tech_list then
72321: LD_EXP 60
72325: NOT
72326: PUSH
72327: LD_VAR 0 1
72331: NOT
72332: OR
72333: PUSH
72334: LD_VAR 0 2
72338: NOT
72339: OR
72340: IFFALSE 72344
// exit ;
72342: GO 72369
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
72344: LD_ADDR_EXP 87
72348: PUSH
72349: LD_EXP 87
72353: PPUSH
72354: LD_VAR 0 1
72358: PPUSH
72359: LD_VAR 0 2
72363: PPUSH
72364: CALL_OW 1
72368: ST_TO_ADDR
// end ;
72369: LD_VAR 0 3
72373: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
72374: LD_INT 0
72376: PPUSH
// if not mc_bases or not parking_area or not base then
72377: LD_EXP 60
72381: NOT
72382: PUSH
72383: LD_VAR 0 2
72387: NOT
72388: OR
72389: PUSH
72390: LD_VAR 0 1
72394: NOT
72395: OR
72396: IFFALSE 72400
// exit ;
72398: GO 72425
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
72400: LD_ADDR_EXP 84
72404: PUSH
72405: LD_EXP 84
72409: PPUSH
72410: LD_VAR 0 1
72414: PPUSH
72415: LD_VAR 0 2
72419: PPUSH
72420: CALL_OW 1
72424: ST_TO_ADDR
// end ;
72425: LD_VAR 0 3
72429: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
72430: LD_INT 0
72432: PPUSH
// if not mc_bases or not base or not scan_area then
72433: LD_EXP 60
72437: NOT
72438: PUSH
72439: LD_VAR 0 1
72443: NOT
72444: OR
72445: PUSH
72446: LD_VAR 0 2
72450: NOT
72451: OR
72452: IFFALSE 72456
// exit ;
72454: GO 72481
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
72456: LD_ADDR_EXP 85
72460: PUSH
72461: LD_EXP 85
72465: PPUSH
72466: LD_VAR 0 1
72470: PPUSH
72471: LD_VAR 0 2
72475: PPUSH
72476: CALL_OW 1
72480: ST_TO_ADDR
// end ;
72481: LD_VAR 0 3
72485: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
72486: LD_INT 0
72488: PPUSH
72489: PPUSH
// if not mc_bases or not base then
72490: LD_EXP 60
72494: NOT
72495: PUSH
72496: LD_VAR 0 1
72500: NOT
72501: OR
72502: IFFALSE 72506
// exit ;
72504: GO 72570
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
72506: LD_ADDR_VAR 0 3
72510: PUSH
72511: LD_INT 1
72513: PUSH
72514: LD_INT 2
72516: PUSH
72517: LD_INT 3
72519: PUSH
72520: LD_INT 4
72522: PUSH
72523: LD_INT 11
72525: PUSH
72526: EMPTY
72527: LIST
72528: LIST
72529: LIST
72530: LIST
72531: LIST
72532: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
72533: LD_ADDR_EXP 87
72537: PUSH
72538: LD_EXP 87
72542: PPUSH
72543: LD_VAR 0 1
72547: PPUSH
72548: LD_EXP 87
72552: PUSH
72553: LD_VAR 0 1
72557: ARRAY
72558: PUSH
72559: LD_VAR 0 3
72563: DIFF
72564: PPUSH
72565: CALL_OW 1
72569: ST_TO_ADDR
// end ;
72570: LD_VAR 0 2
72574: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
72575: LD_INT 0
72577: PPUSH
// result := mc_vehicles [ base ] ;
72578: LD_ADDR_VAR 0 3
72582: PUSH
72583: LD_EXP 79
72587: PUSH
72588: LD_VAR 0 1
72592: ARRAY
72593: ST_TO_ADDR
// if onlyCombat then
72594: LD_VAR 0 2
72598: IFFALSE 72763
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
72600: LD_ADDR_VAR 0 3
72604: PUSH
72605: LD_VAR 0 3
72609: PUSH
72610: LD_VAR 0 3
72614: PPUSH
72615: LD_INT 2
72617: PUSH
72618: LD_INT 34
72620: PUSH
72621: LD_INT 12
72623: PUSH
72624: EMPTY
72625: LIST
72626: LIST
72627: PUSH
72628: LD_INT 34
72630: PUSH
72631: LD_INT 51
72633: PUSH
72634: EMPTY
72635: LIST
72636: LIST
72637: PUSH
72638: LD_INT 34
72640: PUSH
72641: LD_EXP 46
72645: PUSH
72646: EMPTY
72647: LIST
72648: LIST
72649: PUSH
72650: LD_INT 34
72652: PUSH
72653: LD_INT 32
72655: PUSH
72656: EMPTY
72657: LIST
72658: LIST
72659: PUSH
72660: LD_INT 34
72662: PUSH
72663: LD_INT 13
72665: PUSH
72666: EMPTY
72667: LIST
72668: LIST
72669: PUSH
72670: LD_INT 34
72672: PUSH
72673: LD_INT 52
72675: PUSH
72676: EMPTY
72677: LIST
72678: LIST
72679: PUSH
72680: LD_INT 34
72682: PUSH
72683: LD_INT 14
72685: PUSH
72686: EMPTY
72687: LIST
72688: LIST
72689: PUSH
72690: LD_INT 34
72692: PUSH
72693: LD_INT 53
72695: PUSH
72696: EMPTY
72697: LIST
72698: LIST
72699: PUSH
72700: LD_INT 34
72702: PUSH
72703: LD_EXP 45
72707: PUSH
72708: EMPTY
72709: LIST
72710: LIST
72711: PUSH
72712: LD_INT 34
72714: PUSH
72715: LD_INT 31
72717: PUSH
72718: EMPTY
72719: LIST
72720: LIST
72721: PUSH
72722: LD_INT 34
72724: PUSH
72725: LD_INT 48
72727: PUSH
72728: EMPTY
72729: LIST
72730: LIST
72731: PUSH
72732: LD_INT 34
72734: PUSH
72735: LD_INT 8
72737: PUSH
72738: EMPTY
72739: LIST
72740: LIST
72741: PUSH
72742: EMPTY
72743: LIST
72744: LIST
72745: LIST
72746: LIST
72747: LIST
72748: LIST
72749: LIST
72750: LIST
72751: LIST
72752: LIST
72753: LIST
72754: LIST
72755: LIST
72756: PPUSH
72757: CALL_OW 72
72761: DIFF
72762: ST_TO_ADDR
// end ; end_of_file
72763: LD_VAR 0 3
72767: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
72768: LD_INT 0
72770: PPUSH
72771: PPUSH
72772: PPUSH
// if not mc_bases or not skirmish then
72773: LD_EXP 60
72777: NOT
72778: PUSH
72779: LD_EXP 58
72783: NOT
72784: OR
72785: IFFALSE 72789
// exit ;
72787: GO 72954
// for i = 1 to mc_bases do
72789: LD_ADDR_VAR 0 4
72793: PUSH
72794: DOUBLE
72795: LD_INT 1
72797: DEC
72798: ST_TO_ADDR
72799: LD_EXP 60
72803: PUSH
72804: FOR_TO
72805: IFFALSE 72952
// begin if sci in mc_bases [ i ] then
72807: LD_VAR 0 2
72811: PUSH
72812: LD_EXP 60
72816: PUSH
72817: LD_VAR 0 4
72821: ARRAY
72822: IN
72823: IFFALSE 72950
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
72825: LD_ADDR_EXP 89
72829: PUSH
72830: LD_EXP 89
72834: PPUSH
72835: LD_VAR 0 4
72839: PUSH
72840: LD_EXP 89
72844: PUSH
72845: LD_VAR 0 4
72849: ARRAY
72850: PUSH
72851: LD_INT 1
72853: PLUS
72854: PUSH
72855: EMPTY
72856: LIST
72857: LIST
72858: PPUSH
72859: LD_VAR 0 1
72863: PPUSH
72864: CALL 16128 0 3
72868: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
72869: LD_ADDR_VAR 0 5
72873: PUSH
72874: LD_EXP 60
72878: PUSH
72879: LD_VAR 0 4
72883: ARRAY
72884: PPUSH
72885: LD_INT 2
72887: PUSH
72888: LD_INT 30
72890: PUSH
72891: LD_INT 0
72893: PUSH
72894: EMPTY
72895: LIST
72896: LIST
72897: PUSH
72898: LD_INT 30
72900: PUSH
72901: LD_INT 1
72903: PUSH
72904: EMPTY
72905: LIST
72906: LIST
72907: PUSH
72908: EMPTY
72909: LIST
72910: LIST
72911: LIST
72912: PPUSH
72913: CALL_OW 72
72917: PPUSH
72918: LD_VAR 0 1
72922: PPUSH
72923: CALL_OW 74
72927: ST_TO_ADDR
// if tmp then
72928: LD_VAR 0 5
72932: IFFALSE 72948
// ComStandNearbyBuilding ( ape , tmp ) ;
72934: LD_VAR 0 1
72938: PPUSH
72939: LD_VAR 0 5
72943: PPUSH
72944: CALL 12742 0 2
// break ;
72948: GO 72952
// end ; end ;
72950: GO 72804
72952: POP
72953: POP
// end ;
72954: LD_VAR 0 3
72958: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
72959: LD_INT 0
72961: PPUSH
72962: PPUSH
72963: PPUSH
// if not mc_bases or not skirmish then
72964: LD_EXP 60
72968: NOT
72969: PUSH
72970: LD_EXP 58
72974: NOT
72975: OR
72976: IFFALSE 72980
// exit ;
72978: GO 73069
// for i = 1 to mc_bases do
72980: LD_ADDR_VAR 0 4
72984: PUSH
72985: DOUBLE
72986: LD_INT 1
72988: DEC
72989: ST_TO_ADDR
72990: LD_EXP 60
72994: PUSH
72995: FOR_TO
72996: IFFALSE 73067
// begin if building in mc_busy_turret_list [ i ] then
72998: LD_VAR 0 1
73002: PUSH
73003: LD_EXP 70
73007: PUSH
73008: LD_VAR 0 4
73012: ARRAY
73013: IN
73014: IFFALSE 73065
// begin tmp := mc_busy_turret_list [ i ] diff building ;
73016: LD_ADDR_VAR 0 5
73020: PUSH
73021: LD_EXP 70
73025: PUSH
73026: LD_VAR 0 4
73030: ARRAY
73031: PUSH
73032: LD_VAR 0 1
73036: DIFF
73037: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
73038: LD_ADDR_EXP 70
73042: PUSH
73043: LD_EXP 70
73047: PPUSH
73048: LD_VAR 0 4
73052: PPUSH
73053: LD_VAR 0 5
73057: PPUSH
73058: CALL_OW 1
73062: ST_TO_ADDR
// break ;
73063: GO 73067
// end ; end ;
73065: GO 72995
73067: POP
73068: POP
// end ;
73069: LD_VAR 0 3
73073: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
73074: LD_INT 0
73076: PPUSH
73077: PPUSH
73078: PPUSH
// if not mc_bases or not skirmish then
73079: LD_EXP 60
73083: NOT
73084: PUSH
73085: LD_EXP 58
73089: NOT
73090: OR
73091: IFFALSE 73095
// exit ;
73093: GO 73294
// for i = 1 to mc_bases do
73095: LD_ADDR_VAR 0 5
73099: PUSH
73100: DOUBLE
73101: LD_INT 1
73103: DEC
73104: ST_TO_ADDR
73105: LD_EXP 60
73109: PUSH
73110: FOR_TO
73111: IFFALSE 73292
// if building in mc_bases [ i ] then
73113: LD_VAR 0 1
73117: PUSH
73118: LD_EXP 60
73122: PUSH
73123: LD_VAR 0 5
73127: ARRAY
73128: IN
73129: IFFALSE 73290
// begin tmp := mc_bases [ i ] diff building ;
73131: LD_ADDR_VAR 0 6
73135: PUSH
73136: LD_EXP 60
73140: PUSH
73141: LD_VAR 0 5
73145: ARRAY
73146: PUSH
73147: LD_VAR 0 1
73151: DIFF
73152: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
73153: LD_ADDR_EXP 60
73157: PUSH
73158: LD_EXP 60
73162: PPUSH
73163: LD_VAR 0 5
73167: PPUSH
73168: LD_VAR 0 6
73172: PPUSH
73173: CALL_OW 1
73177: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
73178: LD_VAR 0 1
73182: PUSH
73183: LD_EXP 68
73187: PUSH
73188: LD_VAR 0 5
73192: ARRAY
73193: IN
73194: IFFALSE 73233
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
73196: LD_ADDR_EXP 68
73200: PUSH
73201: LD_EXP 68
73205: PPUSH
73206: LD_VAR 0 5
73210: PPUSH
73211: LD_EXP 68
73215: PUSH
73216: LD_VAR 0 5
73220: ARRAY
73221: PUSH
73222: LD_VAR 0 1
73226: DIFF
73227: PPUSH
73228: CALL_OW 1
73232: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
73233: LD_VAR 0 1
73237: PUSH
73238: LD_EXP 69
73242: PUSH
73243: LD_VAR 0 5
73247: ARRAY
73248: IN
73249: IFFALSE 73288
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
73251: LD_ADDR_EXP 69
73255: PUSH
73256: LD_EXP 69
73260: PPUSH
73261: LD_VAR 0 5
73265: PPUSH
73266: LD_EXP 69
73270: PUSH
73271: LD_VAR 0 5
73275: ARRAY
73276: PUSH
73277: LD_VAR 0 1
73281: DIFF
73282: PPUSH
73283: CALL_OW 1
73287: ST_TO_ADDR
// break ;
73288: GO 73292
// end ;
73290: GO 73110
73292: POP
73293: POP
// end ;
73294: LD_VAR 0 4
73298: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
73299: LD_INT 0
73301: PPUSH
73302: PPUSH
73303: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
73304: LD_EXP 60
73308: NOT
73309: PUSH
73310: LD_EXP 58
73314: NOT
73315: OR
73316: PUSH
73317: LD_VAR 0 3
73321: PUSH
73322: LD_EXP 86
73326: IN
73327: NOT
73328: OR
73329: IFFALSE 73333
// exit ;
73331: GO 73456
// for i = 1 to mc_vehicles do
73333: LD_ADDR_VAR 0 6
73337: PUSH
73338: DOUBLE
73339: LD_INT 1
73341: DEC
73342: ST_TO_ADDR
73343: LD_EXP 79
73347: PUSH
73348: FOR_TO
73349: IFFALSE 73454
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
73351: LD_VAR 0 2
73355: PUSH
73356: LD_EXP 79
73360: PUSH
73361: LD_VAR 0 6
73365: ARRAY
73366: IN
73367: PUSH
73368: LD_VAR 0 1
73372: PUSH
73373: LD_EXP 79
73377: PUSH
73378: LD_VAR 0 6
73382: ARRAY
73383: IN
73384: OR
73385: IFFALSE 73452
// begin tmp := mc_vehicles [ i ] diff old ;
73387: LD_ADDR_VAR 0 7
73391: PUSH
73392: LD_EXP 79
73396: PUSH
73397: LD_VAR 0 6
73401: ARRAY
73402: PUSH
73403: LD_VAR 0 2
73407: DIFF
73408: ST_TO_ADDR
// tmp := tmp diff new ;
73409: LD_ADDR_VAR 0 7
73413: PUSH
73414: LD_VAR 0 7
73418: PUSH
73419: LD_VAR 0 1
73423: DIFF
73424: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
73425: LD_ADDR_EXP 79
73429: PUSH
73430: LD_EXP 79
73434: PPUSH
73435: LD_VAR 0 6
73439: PPUSH
73440: LD_VAR 0 7
73444: PPUSH
73445: CALL_OW 1
73449: ST_TO_ADDR
// break ;
73450: GO 73454
// end ;
73452: GO 73348
73454: POP
73455: POP
// end ;
73456: LD_VAR 0 5
73460: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
73461: LD_INT 0
73463: PPUSH
73464: PPUSH
73465: PPUSH
73466: PPUSH
// if not mc_bases or not skirmish then
73467: LD_EXP 60
73471: NOT
73472: PUSH
73473: LD_EXP 58
73477: NOT
73478: OR
73479: IFFALSE 73483
// exit ;
73481: GO 73860
// side := GetSide ( vehicle ) ;
73483: LD_ADDR_VAR 0 5
73487: PUSH
73488: LD_VAR 0 1
73492: PPUSH
73493: CALL_OW 255
73497: ST_TO_ADDR
// for i = 1 to mc_bases do
73498: LD_ADDR_VAR 0 4
73502: PUSH
73503: DOUBLE
73504: LD_INT 1
73506: DEC
73507: ST_TO_ADDR
73508: LD_EXP 60
73512: PUSH
73513: FOR_TO
73514: IFFALSE 73858
// begin if factory in mc_bases [ i ] then
73516: LD_VAR 0 2
73520: PUSH
73521: LD_EXP 60
73525: PUSH
73526: LD_VAR 0 4
73530: ARRAY
73531: IN
73532: IFFALSE 73856
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
73534: LD_EXP 82
73538: PUSH
73539: LD_VAR 0 4
73543: ARRAY
73544: PUSH
73545: LD_EXP 71
73549: PUSH
73550: LD_VAR 0 4
73554: ARRAY
73555: LESS
73556: PUSH
73557: LD_VAR 0 1
73561: PPUSH
73562: CALL_OW 264
73566: PUSH
73567: LD_INT 31
73569: PUSH
73570: LD_INT 32
73572: PUSH
73573: LD_INT 51
73575: PUSH
73576: LD_EXP 46
73580: PUSH
73581: LD_INT 12
73583: PUSH
73584: LD_INT 30
73586: PUSH
73587: LD_EXP 45
73591: PUSH
73592: LD_INT 11
73594: PUSH
73595: LD_INT 53
73597: PUSH
73598: LD_INT 14
73600: PUSH
73601: LD_EXP 49
73605: PUSH
73606: LD_INT 29
73608: PUSH
73609: LD_EXP 47
73613: PUSH
73614: LD_INT 13
73616: PUSH
73617: LD_INT 52
73619: PUSH
73620: LD_INT 48
73622: PUSH
73623: LD_INT 8
73625: PUSH
73626: EMPTY
73627: LIST
73628: LIST
73629: LIST
73630: LIST
73631: LIST
73632: LIST
73633: LIST
73634: LIST
73635: LIST
73636: LIST
73637: LIST
73638: LIST
73639: LIST
73640: LIST
73641: LIST
73642: LIST
73643: LIST
73644: IN
73645: NOT
73646: AND
73647: IFFALSE 73695
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
73649: LD_ADDR_EXP 82
73653: PUSH
73654: LD_EXP 82
73658: PPUSH
73659: LD_VAR 0 4
73663: PUSH
73664: LD_EXP 82
73668: PUSH
73669: LD_VAR 0 4
73673: ARRAY
73674: PUSH
73675: LD_INT 1
73677: PLUS
73678: PUSH
73679: EMPTY
73680: LIST
73681: LIST
73682: PPUSH
73683: LD_VAR 0 1
73687: PPUSH
73688: CALL 16128 0 3
73692: ST_TO_ADDR
73693: GO 73739
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
73695: LD_ADDR_EXP 79
73699: PUSH
73700: LD_EXP 79
73704: PPUSH
73705: LD_VAR 0 4
73709: PUSH
73710: LD_EXP 79
73714: PUSH
73715: LD_VAR 0 4
73719: ARRAY
73720: PUSH
73721: LD_INT 1
73723: PLUS
73724: PUSH
73725: EMPTY
73726: LIST
73727: LIST
73728: PPUSH
73729: LD_VAR 0 1
73733: PPUSH
73734: CALL 16128 0 3
73738: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
73739: LD_VAR 0 1
73743: PPUSH
73744: CALL_OW 263
73748: PUSH
73749: LD_INT 2
73751: EQUAL
73752: IFFALSE 73772
// begin repeat wait ( 0 0$1 ) ;
73754: LD_INT 35
73756: PPUSH
73757: CALL_OW 67
// until IsControledBy ( vehicle ) ;
73761: LD_VAR 0 1
73765: PPUSH
73766: CALL_OW 312
73770: IFFALSE 73754
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
73772: LD_VAR 0 1
73776: PPUSH
73777: LD_EXP 84
73781: PUSH
73782: LD_VAR 0 4
73786: ARRAY
73787: PPUSH
73788: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
73792: LD_VAR 0 1
73796: PPUSH
73797: CALL_OW 263
73801: PUSH
73802: LD_INT 1
73804: NONEQUAL
73805: IFFALSE 73809
// break ;
73807: GO 73858
// repeat wait ( 0 0$1 ) ;
73809: LD_INT 35
73811: PPUSH
73812: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
73816: LD_VAR 0 1
73820: PPUSH
73821: LD_EXP 84
73825: PUSH
73826: LD_VAR 0 4
73830: ARRAY
73831: PPUSH
73832: CALL_OW 308
73836: IFFALSE 73809
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
73838: LD_VAR 0 1
73842: PPUSH
73843: CALL_OW 311
73847: PPUSH
73848: CALL_OW 121
// exit ;
73852: POP
73853: POP
73854: GO 73860
// end ; end ;
73856: GO 73513
73858: POP
73859: POP
// end ;
73860: LD_VAR 0 3
73864: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
73865: LD_INT 0
73867: PPUSH
73868: PPUSH
73869: PPUSH
73870: PPUSH
// if not mc_bases or not skirmish then
73871: LD_EXP 60
73875: NOT
73876: PUSH
73877: LD_EXP 58
73881: NOT
73882: OR
73883: IFFALSE 73887
// exit ;
73885: GO 74240
// repeat wait ( 0 0$1 ) ;
73887: LD_INT 35
73889: PPUSH
73890: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
73894: LD_VAR 0 2
73898: PPUSH
73899: LD_VAR 0 3
73903: PPUSH
73904: CALL_OW 284
73908: IFFALSE 73887
// if GetResourceTypeXY ( x , y ) = mat_artefact then
73910: LD_VAR 0 2
73914: PPUSH
73915: LD_VAR 0 3
73919: PPUSH
73920: CALL_OW 283
73924: PUSH
73925: LD_INT 4
73927: EQUAL
73928: IFFALSE 73932
// exit ;
73930: GO 74240
// for i = 1 to mc_bases do
73932: LD_ADDR_VAR 0 7
73936: PUSH
73937: DOUBLE
73938: LD_INT 1
73940: DEC
73941: ST_TO_ADDR
73942: LD_EXP 60
73946: PUSH
73947: FOR_TO
73948: IFFALSE 74238
// begin if mc_crates_area [ i ] then
73950: LD_EXP 78
73954: PUSH
73955: LD_VAR 0 7
73959: ARRAY
73960: IFFALSE 74071
// for j in mc_crates_area [ i ] do
73962: LD_ADDR_VAR 0 8
73966: PUSH
73967: LD_EXP 78
73971: PUSH
73972: LD_VAR 0 7
73976: ARRAY
73977: PUSH
73978: FOR_IN
73979: IFFALSE 74069
// if InArea ( x , y , j ) then
73981: LD_VAR 0 2
73985: PPUSH
73986: LD_VAR 0 3
73990: PPUSH
73991: LD_VAR 0 8
73995: PPUSH
73996: CALL_OW 309
74000: IFFALSE 74067
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
74002: LD_ADDR_EXP 76
74006: PUSH
74007: LD_EXP 76
74011: PPUSH
74012: LD_VAR 0 7
74016: PUSH
74017: LD_EXP 76
74021: PUSH
74022: LD_VAR 0 7
74026: ARRAY
74027: PUSH
74028: LD_INT 1
74030: PLUS
74031: PUSH
74032: EMPTY
74033: LIST
74034: LIST
74035: PPUSH
74036: LD_VAR 0 4
74040: PUSH
74041: LD_VAR 0 2
74045: PUSH
74046: LD_VAR 0 3
74050: PUSH
74051: EMPTY
74052: LIST
74053: LIST
74054: LIST
74055: PPUSH
74056: CALL 16128 0 3
74060: ST_TO_ADDR
// exit ;
74061: POP
74062: POP
74063: POP
74064: POP
74065: GO 74240
// end ;
74067: GO 73978
74069: POP
74070: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
74071: LD_ADDR_VAR 0 9
74075: PUSH
74076: LD_EXP 60
74080: PUSH
74081: LD_VAR 0 7
74085: ARRAY
74086: PPUSH
74087: LD_INT 2
74089: PUSH
74090: LD_INT 30
74092: PUSH
74093: LD_INT 0
74095: PUSH
74096: EMPTY
74097: LIST
74098: LIST
74099: PUSH
74100: LD_INT 30
74102: PUSH
74103: LD_INT 1
74105: PUSH
74106: EMPTY
74107: LIST
74108: LIST
74109: PUSH
74110: EMPTY
74111: LIST
74112: LIST
74113: LIST
74114: PPUSH
74115: CALL_OW 72
74119: ST_TO_ADDR
// if not depot then
74120: LD_VAR 0 9
74124: NOT
74125: IFFALSE 74129
// continue ;
74127: GO 73947
// for j in depot do
74129: LD_ADDR_VAR 0 8
74133: PUSH
74134: LD_VAR 0 9
74138: PUSH
74139: FOR_IN
74140: IFFALSE 74234
// if GetDistUnitXY ( j , x , y ) < 30 then
74142: LD_VAR 0 8
74146: PPUSH
74147: LD_VAR 0 2
74151: PPUSH
74152: LD_VAR 0 3
74156: PPUSH
74157: CALL_OW 297
74161: PUSH
74162: LD_INT 30
74164: LESS
74165: IFFALSE 74232
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
74167: LD_ADDR_EXP 76
74171: PUSH
74172: LD_EXP 76
74176: PPUSH
74177: LD_VAR 0 7
74181: PUSH
74182: LD_EXP 76
74186: PUSH
74187: LD_VAR 0 7
74191: ARRAY
74192: PUSH
74193: LD_INT 1
74195: PLUS
74196: PUSH
74197: EMPTY
74198: LIST
74199: LIST
74200: PPUSH
74201: LD_VAR 0 4
74205: PUSH
74206: LD_VAR 0 2
74210: PUSH
74211: LD_VAR 0 3
74215: PUSH
74216: EMPTY
74217: LIST
74218: LIST
74219: LIST
74220: PPUSH
74221: CALL 16128 0 3
74225: ST_TO_ADDR
// exit ;
74226: POP
74227: POP
74228: POP
74229: POP
74230: GO 74240
// end ;
74232: GO 74139
74234: POP
74235: POP
// end ;
74236: GO 73947
74238: POP
74239: POP
// end ;
74240: LD_VAR 0 6
74244: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
74245: LD_INT 0
74247: PPUSH
74248: PPUSH
74249: PPUSH
74250: PPUSH
// if not mc_bases or not skirmish then
74251: LD_EXP 60
74255: NOT
74256: PUSH
74257: LD_EXP 58
74261: NOT
74262: OR
74263: IFFALSE 74267
// exit ;
74265: GO 74544
// side := GetSide ( lab ) ;
74267: LD_ADDR_VAR 0 4
74271: PUSH
74272: LD_VAR 0 2
74276: PPUSH
74277: CALL_OW 255
74281: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
74282: LD_VAR 0 4
74286: PUSH
74287: LD_EXP 86
74291: IN
74292: NOT
74293: PUSH
74294: LD_EXP 87
74298: NOT
74299: OR
74300: PUSH
74301: LD_EXP 60
74305: NOT
74306: OR
74307: IFFALSE 74311
// exit ;
74309: GO 74544
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
74311: LD_ADDR_EXP 87
74315: PUSH
74316: LD_EXP 87
74320: PPUSH
74321: LD_VAR 0 4
74325: PPUSH
74326: LD_EXP 87
74330: PUSH
74331: LD_VAR 0 4
74335: ARRAY
74336: PUSH
74337: LD_VAR 0 1
74341: DIFF
74342: PPUSH
74343: CALL_OW 1
74347: ST_TO_ADDR
// for i = 1 to mc_bases do
74348: LD_ADDR_VAR 0 5
74352: PUSH
74353: DOUBLE
74354: LD_INT 1
74356: DEC
74357: ST_TO_ADDR
74358: LD_EXP 60
74362: PUSH
74363: FOR_TO
74364: IFFALSE 74542
// begin if lab in mc_bases [ i ] then
74366: LD_VAR 0 2
74370: PUSH
74371: LD_EXP 60
74375: PUSH
74376: LD_VAR 0 5
74380: ARRAY
74381: IN
74382: IFFALSE 74540
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
74384: LD_VAR 0 1
74388: PUSH
74389: LD_INT 11
74391: PUSH
74392: LD_INT 4
74394: PUSH
74395: LD_INT 3
74397: PUSH
74398: LD_INT 2
74400: PUSH
74401: EMPTY
74402: LIST
74403: LIST
74404: LIST
74405: LIST
74406: IN
74407: PUSH
74408: LD_EXP 90
74412: PUSH
74413: LD_VAR 0 5
74417: ARRAY
74418: AND
74419: IFFALSE 74540
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
74421: LD_ADDR_VAR 0 6
74425: PUSH
74426: LD_EXP 90
74430: PUSH
74431: LD_VAR 0 5
74435: ARRAY
74436: PUSH
74437: LD_INT 1
74439: ARRAY
74440: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
74441: LD_ADDR_EXP 90
74445: PUSH
74446: LD_EXP 90
74450: PPUSH
74451: LD_VAR 0 5
74455: PPUSH
74456: EMPTY
74457: PPUSH
74458: CALL_OW 1
74462: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
74463: LD_VAR 0 6
74467: PPUSH
74468: LD_INT 0
74470: PPUSH
74471: CALL_OW 109
// ComExitBuilding ( tmp ) ;
74475: LD_VAR 0 6
74479: PPUSH
74480: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
74484: LD_ADDR_EXP 89
74488: PUSH
74489: LD_EXP 89
74493: PPUSH
74494: LD_VAR 0 5
74498: PPUSH
74499: LD_EXP 89
74503: PUSH
74504: LD_VAR 0 5
74508: ARRAY
74509: PPUSH
74510: LD_INT 1
74512: PPUSH
74513: LD_VAR 0 6
74517: PPUSH
74518: CALL_OW 2
74522: PPUSH
74523: CALL_OW 1
74527: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
74528: LD_VAR 0 5
74532: PPUSH
74533: LD_INT 112
74535: PPUSH
74536: CALL 51540 0 2
// end ; end ; end ;
74540: GO 74363
74542: POP
74543: POP
// end ;
74544: LD_VAR 0 3
74548: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
74549: LD_INT 0
74551: PPUSH
74552: PPUSH
74553: PPUSH
74554: PPUSH
74555: PPUSH
74556: PPUSH
74557: PPUSH
74558: PPUSH
// if not mc_bases or not skirmish then
74559: LD_EXP 60
74563: NOT
74564: PUSH
74565: LD_EXP 58
74569: NOT
74570: OR
74571: IFFALSE 74575
// exit ;
74573: GO 75946
// for i = 1 to mc_bases do
74575: LD_ADDR_VAR 0 3
74579: PUSH
74580: DOUBLE
74581: LD_INT 1
74583: DEC
74584: ST_TO_ADDR
74585: LD_EXP 60
74589: PUSH
74590: FOR_TO
74591: IFFALSE 75944
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
74593: LD_VAR 0 1
74597: PUSH
74598: LD_EXP 60
74602: PUSH
74603: LD_VAR 0 3
74607: ARRAY
74608: IN
74609: PUSH
74610: LD_VAR 0 1
74614: PUSH
74615: LD_EXP 67
74619: PUSH
74620: LD_VAR 0 3
74624: ARRAY
74625: IN
74626: OR
74627: PUSH
74628: LD_VAR 0 1
74632: PUSH
74633: LD_EXP 82
74637: PUSH
74638: LD_VAR 0 3
74642: ARRAY
74643: IN
74644: OR
74645: PUSH
74646: LD_VAR 0 1
74650: PUSH
74651: LD_EXP 79
74655: PUSH
74656: LD_VAR 0 3
74660: ARRAY
74661: IN
74662: OR
74663: PUSH
74664: LD_VAR 0 1
74668: PUSH
74669: LD_EXP 89
74673: PUSH
74674: LD_VAR 0 3
74678: ARRAY
74679: IN
74680: OR
74681: PUSH
74682: LD_VAR 0 1
74686: PUSH
74687: LD_EXP 90
74691: PUSH
74692: LD_VAR 0 3
74696: ARRAY
74697: IN
74698: OR
74699: IFFALSE 75942
// begin if un in mc_ape [ i ] then
74701: LD_VAR 0 1
74705: PUSH
74706: LD_EXP 89
74710: PUSH
74711: LD_VAR 0 3
74715: ARRAY
74716: IN
74717: IFFALSE 74756
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
74719: LD_ADDR_EXP 89
74723: PUSH
74724: LD_EXP 89
74728: PPUSH
74729: LD_VAR 0 3
74733: PPUSH
74734: LD_EXP 89
74738: PUSH
74739: LD_VAR 0 3
74743: ARRAY
74744: PUSH
74745: LD_VAR 0 1
74749: DIFF
74750: PPUSH
74751: CALL_OW 1
74755: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
74756: LD_VAR 0 1
74760: PUSH
74761: LD_EXP 90
74765: PUSH
74766: LD_VAR 0 3
74770: ARRAY
74771: IN
74772: IFFALSE 74796
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
74774: LD_ADDR_EXP 90
74778: PUSH
74779: LD_EXP 90
74783: PPUSH
74784: LD_VAR 0 3
74788: PPUSH
74789: EMPTY
74790: PPUSH
74791: CALL_OW 1
74795: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
74796: LD_VAR 0 1
74800: PPUSH
74801: CALL_OW 247
74805: PUSH
74806: LD_INT 2
74808: EQUAL
74809: PUSH
74810: LD_VAR 0 1
74814: PPUSH
74815: CALL_OW 110
74819: PUSH
74820: LD_INT 20
74822: EQUAL
74823: PUSH
74824: LD_VAR 0 1
74828: PUSH
74829: LD_EXP 82
74833: PUSH
74834: LD_VAR 0 3
74838: ARRAY
74839: IN
74840: OR
74841: PUSH
74842: LD_VAR 0 1
74846: PPUSH
74847: CALL_OW 264
74851: PUSH
74852: LD_INT 12
74854: PUSH
74855: LD_INT 51
74857: PUSH
74858: LD_EXP 46
74862: PUSH
74863: LD_INT 32
74865: PUSH
74866: LD_INT 13
74868: PUSH
74869: LD_INT 52
74871: PUSH
74872: LD_INT 31
74874: PUSH
74875: EMPTY
74876: LIST
74877: LIST
74878: LIST
74879: LIST
74880: LIST
74881: LIST
74882: LIST
74883: IN
74884: OR
74885: AND
74886: IFFALSE 75194
// begin if un in mc_defender [ i ] then
74888: LD_VAR 0 1
74892: PUSH
74893: LD_EXP 82
74897: PUSH
74898: LD_VAR 0 3
74902: ARRAY
74903: IN
74904: IFFALSE 74943
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
74906: LD_ADDR_EXP 82
74910: PUSH
74911: LD_EXP 82
74915: PPUSH
74916: LD_VAR 0 3
74920: PPUSH
74921: LD_EXP 82
74925: PUSH
74926: LD_VAR 0 3
74930: ARRAY
74931: PUSH
74932: LD_VAR 0 1
74936: DIFF
74937: PPUSH
74938: CALL_OW 1
74942: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
74943: LD_ADDR_VAR 0 8
74947: PUSH
74948: LD_VAR 0 3
74952: PPUSH
74953: LD_INT 3
74955: PPUSH
74956: CALL 71612 0 2
74960: ST_TO_ADDR
// if fac then
74961: LD_VAR 0 8
74965: IFFALSE 75194
// begin for j in fac do
74967: LD_ADDR_VAR 0 4
74971: PUSH
74972: LD_VAR 0 8
74976: PUSH
74977: FOR_IN
74978: IFFALSE 75192
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
74980: LD_ADDR_VAR 0 9
74984: PUSH
74985: LD_VAR 0 8
74989: PPUSH
74990: LD_VAR 0 1
74994: PPUSH
74995: CALL_OW 265
74999: PPUSH
75000: LD_VAR 0 1
75004: PPUSH
75005: CALL_OW 262
75009: PPUSH
75010: LD_VAR 0 1
75014: PPUSH
75015: CALL_OW 263
75019: PPUSH
75020: LD_VAR 0 1
75024: PPUSH
75025: CALL_OW 264
75029: PPUSH
75030: CALL 13660 0 5
75034: ST_TO_ADDR
// if components then
75035: LD_VAR 0 9
75039: IFFALSE 75190
// begin if GetWeapon ( un ) = ar_control_tower then
75041: LD_VAR 0 1
75045: PPUSH
75046: CALL_OW 264
75050: PUSH
75051: LD_INT 31
75053: EQUAL
75054: IFFALSE 75171
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
75056: LD_VAR 0 1
75060: PPUSH
75061: CALL_OW 311
75065: PPUSH
75066: LD_INT 0
75068: PPUSH
75069: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
75073: LD_ADDR_EXP 100
75077: PUSH
75078: LD_EXP 100
75082: PPUSH
75083: LD_VAR 0 3
75087: PPUSH
75088: LD_EXP 100
75092: PUSH
75093: LD_VAR 0 3
75097: ARRAY
75098: PUSH
75099: LD_VAR 0 1
75103: PPUSH
75104: CALL_OW 311
75108: DIFF
75109: PPUSH
75110: CALL_OW 1
75114: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
75115: LD_ADDR_VAR 0 7
75119: PUSH
75120: LD_EXP 81
75124: PUSH
75125: LD_VAR 0 3
75129: ARRAY
75130: PPUSH
75131: LD_INT 1
75133: PPUSH
75134: LD_VAR 0 9
75138: PPUSH
75139: CALL_OW 2
75143: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
75144: LD_ADDR_EXP 81
75148: PUSH
75149: LD_EXP 81
75153: PPUSH
75154: LD_VAR 0 3
75158: PPUSH
75159: LD_VAR 0 7
75163: PPUSH
75164: CALL_OW 1
75168: ST_TO_ADDR
// end else
75169: GO 75188
// MC_InsertProduceList ( i , [ components ] ) ;
75171: LD_VAR 0 3
75175: PPUSH
75176: LD_VAR 0 9
75180: PUSH
75181: EMPTY
75182: LIST
75183: PPUSH
75184: CALL 71157 0 2
// break ;
75188: GO 75192
// end ; end ;
75190: GO 74977
75192: POP
75193: POP
// end ; end ; if GetType ( un ) = unit_building then
75194: LD_VAR 0 1
75198: PPUSH
75199: CALL_OW 247
75203: PUSH
75204: LD_INT 3
75206: EQUAL
75207: IFFALSE 75610
// begin btype := GetBType ( un ) ;
75209: LD_ADDR_VAR 0 5
75213: PUSH
75214: LD_VAR 0 1
75218: PPUSH
75219: CALL_OW 266
75223: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
75224: LD_VAR 0 5
75228: PUSH
75229: LD_INT 29
75231: PUSH
75232: LD_INT 30
75234: PUSH
75235: EMPTY
75236: LIST
75237: LIST
75238: IN
75239: IFFALSE 75312
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
75241: LD_VAR 0 1
75245: PPUSH
75246: CALL_OW 250
75250: PPUSH
75251: LD_VAR 0 1
75255: PPUSH
75256: CALL_OW 251
75260: PPUSH
75261: LD_VAR 0 1
75265: PPUSH
75266: CALL_OW 255
75270: PPUSH
75271: CALL_OW 440
75275: NOT
75276: IFFALSE 75312
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
75278: LD_VAR 0 1
75282: PPUSH
75283: CALL_OW 250
75287: PPUSH
75288: LD_VAR 0 1
75292: PPUSH
75293: CALL_OW 251
75297: PPUSH
75298: LD_VAR 0 1
75302: PPUSH
75303: CALL_OW 255
75307: PPUSH
75308: CALL_OW 441
// end ; if btype = b_warehouse then
75312: LD_VAR 0 5
75316: PUSH
75317: LD_INT 1
75319: EQUAL
75320: IFFALSE 75338
// begin btype := b_depot ;
75322: LD_ADDR_VAR 0 5
75326: PUSH
75327: LD_INT 0
75329: ST_TO_ADDR
// pos := 1 ;
75330: LD_ADDR_VAR 0 6
75334: PUSH
75335: LD_INT 1
75337: ST_TO_ADDR
// end ; if btype = b_factory then
75338: LD_VAR 0 5
75342: PUSH
75343: LD_INT 3
75345: EQUAL
75346: IFFALSE 75364
// begin btype := b_workshop ;
75348: LD_ADDR_VAR 0 5
75352: PUSH
75353: LD_INT 2
75355: ST_TO_ADDR
// pos := 1 ;
75356: LD_ADDR_VAR 0 6
75360: PUSH
75361: LD_INT 1
75363: ST_TO_ADDR
// end ; if btype = b_barracks then
75364: LD_VAR 0 5
75368: PUSH
75369: LD_INT 5
75371: EQUAL
75372: IFFALSE 75382
// btype := b_armoury ;
75374: LD_ADDR_VAR 0 5
75378: PUSH
75379: LD_INT 4
75381: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
75382: LD_VAR 0 5
75386: PUSH
75387: LD_INT 7
75389: PUSH
75390: LD_INT 8
75392: PUSH
75393: EMPTY
75394: LIST
75395: LIST
75396: IN
75397: IFFALSE 75407
// btype := b_lab ;
75399: LD_ADDR_VAR 0 5
75403: PUSH
75404: LD_INT 6
75406: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
75407: LD_ADDR_EXP 65
75411: PUSH
75412: LD_EXP 65
75416: PPUSH
75417: LD_VAR 0 3
75421: PUSH
75422: LD_EXP 65
75426: PUSH
75427: LD_VAR 0 3
75431: ARRAY
75432: PUSH
75433: LD_INT 1
75435: PLUS
75436: PUSH
75437: EMPTY
75438: LIST
75439: LIST
75440: PPUSH
75441: LD_VAR 0 5
75445: PUSH
75446: LD_VAR 0 1
75450: PPUSH
75451: CALL_OW 250
75455: PUSH
75456: LD_VAR 0 1
75460: PPUSH
75461: CALL_OW 251
75465: PUSH
75466: LD_VAR 0 1
75470: PPUSH
75471: CALL_OW 254
75475: PUSH
75476: EMPTY
75477: LIST
75478: LIST
75479: LIST
75480: LIST
75481: PPUSH
75482: CALL 16128 0 3
75486: ST_TO_ADDR
// if pos = 1 then
75487: LD_VAR 0 6
75491: PUSH
75492: LD_INT 1
75494: EQUAL
75495: IFFALSE 75610
// begin tmp := mc_build_list [ i ] ;
75497: LD_ADDR_VAR 0 7
75501: PUSH
75502: LD_EXP 65
75506: PUSH
75507: LD_VAR 0 3
75511: ARRAY
75512: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
75513: LD_VAR 0 7
75517: PPUSH
75518: LD_INT 2
75520: PUSH
75521: LD_INT 30
75523: PUSH
75524: LD_INT 0
75526: PUSH
75527: EMPTY
75528: LIST
75529: LIST
75530: PUSH
75531: LD_INT 30
75533: PUSH
75534: LD_INT 1
75536: PUSH
75537: EMPTY
75538: LIST
75539: LIST
75540: PUSH
75541: EMPTY
75542: LIST
75543: LIST
75544: LIST
75545: PPUSH
75546: CALL_OW 72
75550: IFFALSE 75560
// pos := 2 ;
75552: LD_ADDR_VAR 0 6
75556: PUSH
75557: LD_INT 2
75559: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
75560: LD_ADDR_VAR 0 7
75564: PUSH
75565: LD_VAR 0 7
75569: PPUSH
75570: LD_VAR 0 6
75574: PPUSH
75575: LD_VAR 0 7
75579: PPUSH
75580: CALL 16454 0 3
75584: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
75585: LD_ADDR_EXP 65
75589: PUSH
75590: LD_EXP 65
75594: PPUSH
75595: LD_VAR 0 3
75599: PPUSH
75600: LD_VAR 0 7
75604: PPUSH
75605: CALL_OW 1
75609: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
75610: LD_VAR 0 1
75614: PUSH
75615: LD_EXP 60
75619: PUSH
75620: LD_VAR 0 3
75624: ARRAY
75625: IN
75626: IFFALSE 75665
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
75628: LD_ADDR_EXP 60
75632: PUSH
75633: LD_EXP 60
75637: PPUSH
75638: LD_VAR 0 3
75642: PPUSH
75643: LD_EXP 60
75647: PUSH
75648: LD_VAR 0 3
75652: ARRAY
75653: PUSH
75654: LD_VAR 0 1
75658: DIFF
75659: PPUSH
75660: CALL_OW 1
75664: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
75665: LD_VAR 0 1
75669: PUSH
75670: LD_EXP 67
75674: PUSH
75675: LD_VAR 0 3
75679: ARRAY
75680: IN
75681: IFFALSE 75720
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
75683: LD_ADDR_EXP 67
75687: PUSH
75688: LD_EXP 67
75692: PPUSH
75693: LD_VAR 0 3
75697: PPUSH
75698: LD_EXP 67
75702: PUSH
75703: LD_VAR 0 3
75707: ARRAY
75708: PUSH
75709: LD_VAR 0 1
75713: DIFF
75714: PPUSH
75715: CALL_OW 1
75719: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
75720: LD_VAR 0 1
75724: PUSH
75725: LD_EXP 79
75729: PUSH
75730: LD_VAR 0 3
75734: ARRAY
75735: IN
75736: IFFALSE 75775
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
75738: LD_ADDR_EXP 79
75742: PUSH
75743: LD_EXP 79
75747: PPUSH
75748: LD_VAR 0 3
75752: PPUSH
75753: LD_EXP 79
75757: PUSH
75758: LD_VAR 0 3
75762: ARRAY
75763: PUSH
75764: LD_VAR 0 1
75768: DIFF
75769: PPUSH
75770: CALL_OW 1
75774: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
75775: LD_VAR 0 1
75779: PUSH
75780: LD_EXP 82
75784: PUSH
75785: LD_VAR 0 3
75789: ARRAY
75790: IN
75791: IFFALSE 75830
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
75793: LD_ADDR_EXP 82
75797: PUSH
75798: LD_EXP 82
75802: PPUSH
75803: LD_VAR 0 3
75807: PPUSH
75808: LD_EXP 82
75812: PUSH
75813: LD_VAR 0 3
75817: ARRAY
75818: PUSH
75819: LD_VAR 0 1
75823: DIFF
75824: PPUSH
75825: CALL_OW 1
75829: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
75830: LD_VAR 0 1
75834: PUSH
75835: LD_EXP 69
75839: PUSH
75840: LD_VAR 0 3
75844: ARRAY
75845: IN
75846: IFFALSE 75885
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
75848: LD_ADDR_EXP 69
75852: PUSH
75853: LD_EXP 69
75857: PPUSH
75858: LD_VAR 0 3
75862: PPUSH
75863: LD_EXP 69
75867: PUSH
75868: LD_VAR 0 3
75872: ARRAY
75873: PUSH
75874: LD_VAR 0 1
75878: DIFF
75879: PPUSH
75880: CALL_OW 1
75884: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
75885: LD_VAR 0 1
75889: PUSH
75890: LD_EXP 68
75894: PUSH
75895: LD_VAR 0 3
75899: ARRAY
75900: IN
75901: IFFALSE 75940
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
75903: LD_ADDR_EXP 68
75907: PUSH
75908: LD_EXP 68
75912: PPUSH
75913: LD_VAR 0 3
75917: PPUSH
75918: LD_EXP 68
75922: PUSH
75923: LD_VAR 0 3
75927: ARRAY
75928: PUSH
75929: LD_VAR 0 1
75933: DIFF
75934: PPUSH
75935: CALL_OW 1
75939: ST_TO_ADDR
// end ; break ;
75940: GO 75944
// end ;
75942: GO 74590
75944: POP
75945: POP
// end ;
75946: LD_VAR 0 2
75950: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
75951: LD_INT 0
75953: PPUSH
75954: PPUSH
75955: PPUSH
// if not mc_bases or not skirmish then
75956: LD_EXP 60
75960: NOT
75961: PUSH
75962: LD_EXP 58
75966: NOT
75967: OR
75968: IFFALSE 75972
// exit ;
75970: GO 76187
// for i = 1 to mc_bases do
75972: LD_ADDR_VAR 0 3
75976: PUSH
75977: DOUBLE
75978: LD_INT 1
75980: DEC
75981: ST_TO_ADDR
75982: LD_EXP 60
75986: PUSH
75987: FOR_TO
75988: IFFALSE 76185
// begin if building in mc_construct_list [ i ] then
75990: LD_VAR 0 1
75994: PUSH
75995: LD_EXP 67
75999: PUSH
76000: LD_VAR 0 3
76004: ARRAY
76005: IN
76006: IFFALSE 76183
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
76008: LD_ADDR_EXP 67
76012: PUSH
76013: LD_EXP 67
76017: PPUSH
76018: LD_VAR 0 3
76022: PPUSH
76023: LD_EXP 67
76027: PUSH
76028: LD_VAR 0 3
76032: ARRAY
76033: PUSH
76034: LD_VAR 0 1
76038: DIFF
76039: PPUSH
76040: CALL_OW 1
76044: ST_TO_ADDR
// if building in mc_lab [ i ] then
76045: LD_VAR 0 1
76049: PUSH
76050: LD_EXP 93
76054: PUSH
76055: LD_VAR 0 3
76059: ARRAY
76060: IN
76061: IFFALSE 76116
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
76063: LD_ADDR_EXP 94
76067: PUSH
76068: LD_EXP 94
76072: PPUSH
76073: LD_VAR 0 3
76077: PPUSH
76078: LD_EXP 94
76082: PUSH
76083: LD_VAR 0 3
76087: ARRAY
76088: PPUSH
76089: LD_INT 1
76091: PPUSH
76092: LD_EXP 94
76096: PUSH
76097: LD_VAR 0 3
76101: ARRAY
76102: PPUSH
76103: LD_INT 0
76105: PPUSH
76106: CALL 15546 0 4
76110: PPUSH
76111: CALL_OW 1
76115: ST_TO_ADDR
// if not building in mc_bases [ i ] then
76116: LD_VAR 0 1
76120: PUSH
76121: LD_EXP 60
76125: PUSH
76126: LD_VAR 0 3
76130: ARRAY
76131: IN
76132: NOT
76133: IFFALSE 76179
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
76135: LD_ADDR_EXP 60
76139: PUSH
76140: LD_EXP 60
76144: PPUSH
76145: LD_VAR 0 3
76149: PUSH
76150: LD_EXP 60
76154: PUSH
76155: LD_VAR 0 3
76159: ARRAY
76160: PUSH
76161: LD_INT 1
76163: PLUS
76164: PUSH
76165: EMPTY
76166: LIST
76167: LIST
76168: PPUSH
76169: LD_VAR 0 1
76173: PPUSH
76174: CALL 16128 0 3
76178: ST_TO_ADDR
// exit ;
76179: POP
76180: POP
76181: GO 76187
// end ; end ;
76183: GO 75987
76185: POP
76186: POP
// end ;
76187: LD_VAR 0 2
76191: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
76192: LD_INT 0
76194: PPUSH
76195: PPUSH
76196: PPUSH
76197: PPUSH
76198: PPUSH
76199: PPUSH
76200: PPUSH
// if not mc_bases or not skirmish then
76201: LD_EXP 60
76205: NOT
76206: PUSH
76207: LD_EXP 58
76211: NOT
76212: OR
76213: IFFALSE 76217
// exit ;
76215: GO 76878
// for i = 1 to mc_bases do
76217: LD_ADDR_VAR 0 3
76221: PUSH
76222: DOUBLE
76223: LD_INT 1
76225: DEC
76226: ST_TO_ADDR
76227: LD_EXP 60
76231: PUSH
76232: FOR_TO
76233: IFFALSE 76876
// begin if building in mc_construct_list [ i ] then
76235: LD_VAR 0 1
76239: PUSH
76240: LD_EXP 67
76244: PUSH
76245: LD_VAR 0 3
76249: ARRAY
76250: IN
76251: IFFALSE 76874
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
76253: LD_ADDR_EXP 67
76257: PUSH
76258: LD_EXP 67
76262: PPUSH
76263: LD_VAR 0 3
76267: PPUSH
76268: LD_EXP 67
76272: PUSH
76273: LD_VAR 0 3
76277: ARRAY
76278: PUSH
76279: LD_VAR 0 1
76283: DIFF
76284: PPUSH
76285: CALL_OW 1
76289: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
76290: LD_ADDR_EXP 60
76294: PUSH
76295: LD_EXP 60
76299: PPUSH
76300: LD_VAR 0 3
76304: PUSH
76305: LD_EXP 60
76309: PUSH
76310: LD_VAR 0 3
76314: ARRAY
76315: PUSH
76316: LD_INT 1
76318: PLUS
76319: PUSH
76320: EMPTY
76321: LIST
76322: LIST
76323: PPUSH
76324: LD_VAR 0 1
76328: PPUSH
76329: CALL 16128 0 3
76333: ST_TO_ADDR
// btype := GetBType ( building ) ;
76334: LD_ADDR_VAR 0 5
76338: PUSH
76339: LD_VAR 0 1
76343: PPUSH
76344: CALL_OW 266
76348: ST_TO_ADDR
// side := GetSide ( building ) ;
76349: LD_ADDR_VAR 0 8
76353: PUSH
76354: LD_VAR 0 1
76358: PPUSH
76359: CALL_OW 255
76363: ST_TO_ADDR
// if btype = b_lab then
76364: LD_VAR 0 5
76368: PUSH
76369: LD_INT 6
76371: EQUAL
76372: IFFALSE 76422
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
76374: LD_ADDR_EXP 93
76378: PUSH
76379: LD_EXP 93
76383: PPUSH
76384: LD_VAR 0 3
76388: PUSH
76389: LD_EXP 93
76393: PUSH
76394: LD_VAR 0 3
76398: ARRAY
76399: PUSH
76400: LD_INT 1
76402: PLUS
76403: PUSH
76404: EMPTY
76405: LIST
76406: LIST
76407: PPUSH
76408: LD_VAR 0 1
76412: PPUSH
76413: CALL 16128 0 3
76417: ST_TO_ADDR
// exit ;
76418: POP
76419: POP
76420: GO 76878
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
76422: LD_VAR 0 5
76426: PUSH
76427: LD_INT 0
76429: PUSH
76430: LD_INT 2
76432: PUSH
76433: LD_INT 4
76435: PUSH
76436: EMPTY
76437: LIST
76438: LIST
76439: LIST
76440: IN
76441: IFFALSE 76565
// begin if btype = b_armoury then
76443: LD_VAR 0 5
76447: PUSH
76448: LD_INT 4
76450: EQUAL
76451: IFFALSE 76461
// btype := b_barracks ;
76453: LD_ADDR_VAR 0 5
76457: PUSH
76458: LD_INT 5
76460: ST_TO_ADDR
// if btype = b_depot then
76461: LD_VAR 0 5
76465: PUSH
76466: LD_INT 0
76468: EQUAL
76469: IFFALSE 76479
// btype := b_warehouse ;
76471: LD_ADDR_VAR 0 5
76475: PUSH
76476: LD_INT 1
76478: ST_TO_ADDR
// if btype = b_workshop then
76479: LD_VAR 0 5
76483: PUSH
76484: LD_INT 2
76486: EQUAL
76487: IFFALSE 76497
// btype := b_factory ;
76489: LD_ADDR_VAR 0 5
76493: PUSH
76494: LD_INT 3
76496: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
76497: LD_VAR 0 5
76501: PPUSH
76502: LD_VAR 0 8
76506: PPUSH
76507: CALL_OW 323
76511: PUSH
76512: LD_INT 1
76514: EQUAL
76515: IFFALSE 76561
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
76517: LD_ADDR_EXP 92
76521: PUSH
76522: LD_EXP 92
76526: PPUSH
76527: LD_VAR 0 3
76531: PUSH
76532: LD_EXP 92
76536: PUSH
76537: LD_VAR 0 3
76541: ARRAY
76542: PUSH
76543: LD_INT 1
76545: PLUS
76546: PUSH
76547: EMPTY
76548: LIST
76549: LIST
76550: PPUSH
76551: LD_VAR 0 1
76555: PPUSH
76556: CALL 16128 0 3
76560: ST_TO_ADDR
// exit ;
76561: POP
76562: POP
76563: GO 76878
// end ; if btype in [ b_bunker , b_turret ] then
76565: LD_VAR 0 5
76569: PUSH
76570: LD_INT 32
76572: PUSH
76573: LD_INT 33
76575: PUSH
76576: EMPTY
76577: LIST
76578: LIST
76579: IN
76580: IFFALSE 76870
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
76582: LD_ADDR_EXP 68
76586: PUSH
76587: LD_EXP 68
76591: PPUSH
76592: LD_VAR 0 3
76596: PUSH
76597: LD_EXP 68
76601: PUSH
76602: LD_VAR 0 3
76606: ARRAY
76607: PUSH
76608: LD_INT 1
76610: PLUS
76611: PUSH
76612: EMPTY
76613: LIST
76614: LIST
76615: PPUSH
76616: LD_VAR 0 1
76620: PPUSH
76621: CALL 16128 0 3
76625: ST_TO_ADDR
// if btype = b_bunker then
76626: LD_VAR 0 5
76630: PUSH
76631: LD_INT 32
76633: EQUAL
76634: IFFALSE 76870
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
76636: LD_ADDR_EXP 69
76640: PUSH
76641: LD_EXP 69
76645: PPUSH
76646: LD_VAR 0 3
76650: PUSH
76651: LD_EXP 69
76655: PUSH
76656: LD_VAR 0 3
76660: ARRAY
76661: PUSH
76662: LD_INT 1
76664: PLUS
76665: PUSH
76666: EMPTY
76667: LIST
76668: LIST
76669: PPUSH
76670: LD_VAR 0 1
76674: PPUSH
76675: CALL 16128 0 3
76679: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
76680: LD_ADDR_VAR 0 6
76684: PUSH
76685: LD_EXP 60
76689: PUSH
76690: LD_VAR 0 3
76694: ARRAY
76695: PPUSH
76696: LD_INT 25
76698: PUSH
76699: LD_INT 1
76701: PUSH
76702: EMPTY
76703: LIST
76704: LIST
76705: PUSH
76706: LD_INT 3
76708: PUSH
76709: LD_INT 54
76711: PUSH
76712: EMPTY
76713: LIST
76714: PUSH
76715: EMPTY
76716: LIST
76717: LIST
76718: PUSH
76719: EMPTY
76720: LIST
76721: LIST
76722: PPUSH
76723: CALL_OW 72
76727: ST_TO_ADDR
// if tmp then
76728: LD_VAR 0 6
76732: IFFALSE 76738
// exit ;
76734: POP
76735: POP
76736: GO 76878
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
76738: LD_ADDR_VAR 0 6
76742: PUSH
76743: LD_EXP 60
76747: PUSH
76748: LD_VAR 0 3
76752: ARRAY
76753: PPUSH
76754: LD_INT 2
76756: PUSH
76757: LD_INT 30
76759: PUSH
76760: LD_INT 4
76762: PUSH
76763: EMPTY
76764: LIST
76765: LIST
76766: PUSH
76767: LD_INT 30
76769: PUSH
76770: LD_INT 5
76772: PUSH
76773: EMPTY
76774: LIST
76775: LIST
76776: PUSH
76777: EMPTY
76778: LIST
76779: LIST
76780: LIST
76781: PPUSH
76782: CALL_OW 72
76786: ST_TO_ADDR
// if not tmp then
76787: LD_VAR 0 6
76791: NOT
76792: IFFALSE 76798
// exit ;
76794: POP
76795: POP
76796: GO 76878
// for j in tmp do
76798: LD_ADDR_VAR 0 4
76802: PUSH
76803: LD_VAR 0 6
76807: PUSH
76808: FOR_IN
76809: IFFALSE 76868
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
76811: LD_ADDR_VAR 0 7
76815: PUSH
76816: LD_VAR 0 4
76820: PPUSH
76821: CALL_OW 313
76825: PPUSH
76826: LD_INT 25
76828: PUSH
76829: LD_INT 1
76831: PUSH
76832: EMPTY
76833: LIST
76834: LIST
76835: PPUSH
76836: CALL_OW 72
76840: ST_TO_ADDR
// if units then
76841: LD_VAR 0 7
76845: IFFALSE 76866
// begin ComExitBuilding ( units [ 1 ] ) ;
76847: LD_VAR 0 7
76851: PUSH
76852: LD_INT 1
76854: ARRAY
76855: PPUSH
76856: CALL_OW 122
// exit ;
76860: POP
76861: POP
76862: POP
76863: POP
76864: GO 76878
// end ; end ;
76866: GO 76808
76868: POP
76869: POP
// end ; end ; exit ;
76870: POP
76871: POP
76872: GO 76878
// end ; end ;
76874: GO 76232
76876: POP
76877: POP
// end ;
76878: LD_VAR 0 2
76882: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
76883: LD_INT 0
76885: PPUSH
76886: PPUSH
76887: PPUSH
76888: PPUSH
76889: PPUSH
76890: PPUSH
76891: PPUSH
// if not mc_bases or not skirmish then
76892: LD_EXP 60
76896: NOT
76897: PUSH
76898: LD_EXP 58
76902: NOT
76903: OR
76904: IFFALSE 76908
// exit ;
76906: GO 77139
// btype := GetBType ( building ) ;
76908: LD_ADDR_VAR 0 6
76912: PUSH
76913: LD_VAR 0 1
76917: PPUSH
76918: CALL_OW 266
76922: ST_TO_ADDR
// x := GetX ( building ) ;
76923: LD_ADDR_VAR 0 7
76927: PUSH
76928: LD_VAR 0 1
76932: PPUSH
76933: CALL_OW 250
76937: ST_TO_ADDR
// y := GetY ( building ) ;
76938: LD_ADDR_VAR 0 8
76942: PUSH
76943: LD_VAR 0 1
76947: PPUSH
76948: CALL_OW 251
76952: ST_TO_ADDR
// d := GetDir ( building ) ;
76953: LD_ADDR_VAR 0 9
76957: PUSH
76958: LD_VAR 0 1
76962: PPUSH
76963: CALL_OW 254
76967: ST_TO_ADDR
// for i = 1 to mc_bases do
76968: LD_ADDR_VAR 0 4
76972: PUSH
76973: DOUBLE
76974: LD_INT 1
76976: DEC
76977: ST_TO_ADDR
76978: LD_EXP 60
76982: PUSH
76983: FOR_TO
76984: IFFALSE 77137
// begin if not mc_build_list [ i ] then
76986: LD_EXP 65
76990: PUSH
76991: LD_VAR 0 4
76995: ARRAY
76996: NOT
76997: IFFALSE 77001
// continue ;
76999: GO 76983
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
77001: LD_VAR 0 6
77005: PUSH
77006: LD_VAR 0 7
77010: PUSH
77011: LD_VAR 0 8
77015: PUSH
77016: LD_VAR 0 9
77020: PUSH
77021: EMPTY
77022: LIST
77023: LIST
77024: LIST
77025: LIST
77026: PPUSH
77027: LD_EXP 65
77031: PUSH
77032: LD_VAR 0 4
77036: ARRAY
77037: PUSH
77038: LD_INT 1
77040: ARRAY
77041: PPUSH
77042: CALL 22297 0 2
77046: IFFALSE 77135
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
77048: LD_ADDR_EXP 65
77052: PUSH
77053: LD_EXP 65
77057: PPUSH
77058: LD_VAR 0 4
77062: PPUSH
77063: LD_EXP 65
77067: PUSH
77068: LD_VAR 0 4
77072: ARRAY
77073: PPUSH
77074: LD_INT 1
77076: PPUSH
77077: CALL_OW 3
77081: PPUSH
77082: CALL_OW 1
77086: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
77087: LD_ADDR_EXP 67
77091: PUSH
77092: LD_EXP 67
77096: PPUSH
77097: LD_VAR 0 4
77101: PUSH
77102: LD_EXP 67
77106: PUSH
77107: LD_VAR 0 4
77111: ARRAY
77112: PUSH
77113: LD_INT 1
77115: PLUS
77116: PUSH
77117: EMPTY
77118: LIST
77119: LIST
77120: PPUSH
77121: LD_VAR 0 1
77125: PPUSH
77126: CALL 16128 0 3
77130: ST_TO_ADDR
// exit ;
77131: POP
77132: POP
77133: GO 77139
// end ; end ;
77135: GO 76983
77137: POP
77138: POP
// end ;
77139: LD_VAR 0 3
77143: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
77144: LD_INT 0
77146: PPUSH
77147: PPUSH
77148: PPUSH
// if not mc_bases or not skirmish then
77149: LD_EXP 60
77153: NOT
77154: PUSH
77155: LD_EXP 58
77159: NOT
77160: OR
77161: IFFALSE 77165
// exit ;
77163: GO 77355
// for i = 1 to mc_bases do
77165: LD_ADDR_VAR 0 4
77169: PUSH
77170: DOUBLE
77171: LD_INT 1
77173: DEC
77174: ST_TO_ADDR
77175: LD_EXP 60
77179: PUSH
77180: FOR_TO
77181: IFFALSE 77268
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
77183: LD_VAR 0 1
77187: PUSH
77188: LD_EXP 68
77192: PUSH
77193: LD_VAR 0 4
77197: ARRAY
77198: IN
77199: PUSH
77200: LD_VAR 0 1
77204: PUSH
77205: LD_EXP 69
77209: PUSH
77210: LD_VAR 0 4
77214: ARRAY
77215: IN
77216: NOT
77217: AND
77218: IFFALSE 77266
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
77220: LD_ADDR_EXP 69
77224: PUSH
77225: LD_EXP 69
77229: PPUSH
77230: LD_VAR 0 4
77234: PUSH
77235: LD_EXP 69
77239: PUSH
77240: LD_VAR 0 4
77244: ARRAY
77245: PUSH
77246: LD_INT 1
77248: PLUS
77249: PUSH
77250: EMPTY
77251: LIST
77252: LIST
77253: PPUSH
77254: LD_VAR 0 1
77258: PPUSH
77259: CALL 16128 0 3
77263: ST_TO_ADDR
// break ;
77264: GO 77268
// end ; end ;
77266: GO 77180
77268: POP
77269: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
77270: LD_VAR 0 1
77274: PPUSH
77275: CALL_OW 257
77279: PUSH
77280: LD_EXP 86
77284: IN
77285: PUSH
77286: LD_VAR 0 1
77290: PPUSH
77291: CALL_OW 266
77295: PUSH
77296: LD_INT 5
77298: EQUAL
77299: AND
77300: PUSH
77301: LD_VAR 0 2
77305: PPUSH
77306: CALL_OW 110
77310: PUSH
77311: LD_INT 18
77313: NONEQUAL
77314: AND
77315: IFFALSE 77355
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
77317: LD_VAR 0 2
77321: PPUSH
77322: CALL_OW 257
77326: PUSH
77327: LD_INT 5
77329: PUSH
77330: LD_INT 8
77332: PUSH
77333: LD_INT 9
77335: PUSH
77336: EMPTY
77337: LIST
77338: LIST
77339: LIST
77340: IN
77341: IFFALSE 77355
// SetClass ( unit , 1 ) ;
77343: LD_VAR 0 2
77347: PPUSH
77348: LD_INT 1
77350: PPUSH
77351: CALL_OW 336
// end ;
77355: LD_VAR 0 3
77359: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
77360: LD_INT 0
77362: PPUSH
77363: PPUSH
// if not mc_bases or not skirmish then
77364: LD_EXP 60
77368: NOT
77369: PUSH
77370: LD_EXP 58
77374: NOT
77375: OR
77376: IFFALSE 77380
// exit ;
77378: GO 77496
// if GetLives ( abandoned_vehicle ) > 250 then
77380: LD_VAR 0 2
77384: PPUSH
77385: CALL_OW 256
77389: PUSH
77390: LD_INT 250
77392: GREATER
77393: IFFALSE 77397
// exit ;
77395: GO 77496
// for i = 1 to mc_bases do
77397: LD_ADDR_VAR 0 6
77401: PUSH
77402: DOUBLE
77403: LD_INT 1
77405: DEC
77406: ST_TO_ADDR
77407: LD_EXP 60
77411: PUSH
77412: FOR_TO
77413: IFFALSE 77494
// begin if driver in mc_bases [ i ] then
77415: LD_VAR 0 1
77419: PUSH
77420: LD_EXP 60
77424: PUSH
77425: LD_VAR 0 6
77429: ARRAY
77430: IN
77431: IFFALSE 77492
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
77433: LD_VAR 0 1
77437: PPUSH
77438: LD_EXP 60
77442: PUSH
77443: LD_VAR 0 6
77447: ARRAY
77448: PPUSH
77449: LD_INT 2
77451: PUSH
77452: LD_INT 30
77454: PUSH
77455: LD_INT 0
77457: PUSH
77458: EMPTY
77459: LIST
77460: LIST
77461: PUSH
77462: LD_INT 30
77464: PUSH
77465: LD_INT 1
77467: PUSH
77468: EMPTY
77469: LIST
77470: LIST
77471: PUSH
77472: EMPTY
77473: LIST
77474: LIST
77475: LIST
77476: PPUSH
77477: CALL_OW 72
77481: PUSH
77482: LD_INT 1
77484: ARRAY
77485: PPUSH
77486: CALL_OW 112
// break ;
77490: GO 77494
// end ; end ;
77492: GO 77412
77494: POP
77495: POP
// end ; end_of_file end_of_file
77496: LD_VAR 0 5
77500: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
77501: GO 77503
77503: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
77504: LD_STRING initStreamRollete();
77506: PPUSH
77507: CALL_OW 559
// InitStreamMode ;
77511: CALL 77520 0 0
// DefineStreamItems ( ) ;
77515: CALL 77960 0 0
// end ;
77519: END
// function InitStreamMode ; begin
77520: LD_INT 0
77522: PPUSH
// streamModeActive := false ;
77523: LD_ADDR_EXP 103
77527: PUSH
77528: LD_INT 0
77530: ST_TO_ADDR
// normalCounter := 36 ;
77531: LD_ADDR_EXP 104
77535: PUSH
77536: LD_INT 36
77538: ST_TO_ADDR
// hardcoreCounter := 16 ;
77539: LD_ADDR_EXP 105
77543: PUSH
77544: LD_INT 16
77546: ST_TO_ADDR
// sRocket := false ;
77547: LD_ADDR_EXP 108
77551: PUSH
77552: LD_INT 0
77554: ST_TO_ADDR
// sSpeed := false ;
77555: LD_ADDR_EXP 107
77559: PUSH
77560: LD_INT 0
77562: ST_TO_ADDR
// sEngine := false ;
77563: LD_ADDR_EXP 109
77567: PUSH
77568: LD_INT 0
77570: ST_TO_ADDR
// sSpec := false ;
77571: LD_ADDR_EXP 106
77575: PUSH
77576: LD_INT 0
77578: ST_TO_ADDR
// sLevel := false ;
77579: LD_ADDR_EXP 110
77583: PUSH
77584: LD_INT 0
77586: ST_TO_ADDR
// sArmoury := false ;
77587: LD_ADDR_EXP 111
77591: PUSH
77592: LD_INT 0
77594: ST_TO_ADDR
// sRadar := false ;
77595: LD_ADDR_EXP 112
77599: PUSH
77600: LD_INT 0
77602: ST_TO_ADDR
// sBunker := false ;
77603: LD_ADDR_EXP 113
77607: PUSH
77608: LD_INT 0
77610: ST_TO_ADDR
// sHack := false ;
77611: LD_ADDR_EXP 114
77615: PUSH
77616: LD_INT 0
77618: ST_TO_ADDR
// sFire := false ;
77619: LD_ADDR_EXP 115
77623: PUSH
77624: LD_INT 0
77626: ST_TO_ADDR
// sRefresh := false ;
77627: LD_ADDR_EXP 116
77631: PUSH
77632: LD_INT 0
77634: ST_TO_ADDR
// sExp := false ;
77635: LD_ADDR_EXP 117
77639: PUSH
77640: LD_INT 0
77642: ST_TO_ADDR
// sDepot := false ;
77643: LD_ADDR_EXP 118
77647: PUSH
77648: LD_INT 0
77650: ST_TO_ADDR
// sFlag := false ;
77651: LD_ADDR_EXP 119
77655: PUSH
77656: LD_INT 0
77658: ST_TO_ADDR
// sKamikadze := false ;
77659: LD_ADDR_EXP 127
77663: PUSH
77664: LD_INT 0
77666: ST_TO_ADDR
// sTroll := false ;
77667: LD_ADDR_EXP 128
77671: PUSH
77672: LD_INT 0
77674: ST_TO_ADDR
// sSlow := false ;
77675: LD_ADDR_EXP 129
77679: PUSH
77680: LD_INT 0
77682: ST_TO_ADDR
// sLack := false ;
77683: LD_ADDR_EXP 130
77687: PUSH
77688: LD_INT 0
77690: ST_TO_ADDR
// sTank := false ;
77691: LD_ADDR_EXP 132
77695: PUSH
77696: LD_INT 0
77698: ST_TO_ADDR
// sRemote := false ;
77699: LD_ADDR_EXP 133
77703: PUSH
77704: LD_INT 0
77706: ST_TO_ADDR
// sPowell := false ;
77707: LD_ADDR_EXP 134
77711: PUSH
77712: LD_INT 0
77714: ST_TO_ADDR
// sTeleport := false ;
77715: LD_ADDR_EXP 137
77719: PUSH
77720: LD_INT 0
77722: ST_TO_ADDR
// sOilTower := false ;
77723: LD_ADDR_EXP 139
77727: PUSH
77728: LD_INT 0
77730: ST_TO_ADDR
// sShovel := false ;
77731: LD_ADDR_EXP 140
77735: PUSH
77736: LD_INT 0
77738: ST_TO_ADDR
// sSheik := false ;
77739: LD_ADDR_EXP 141
77743: PUSH
77744: LD_INT 0
77746: ST_TO_ADDR
// sEarthquake := false ;
77747: LD_ADDR_EXP 143
77751: PUSH
77752: LD_INT 0
77754: ST_TO_ADDR
// sAI := false ;
77755: LD_ADDR_EXP 144
77759: PUSH
77760: LD_INT 0
77762: ST_TO_ADDR
// sCargo := false ;
77763: LD_ADDR_EXP 147
77767: PUSH
77768: LD_INT 0
77770: ST_TO_ADDR
// sDLaser := false ;
77771: LD_ADDR_EXP 148
77775: PUSH
77776: LD_INT 0
77778: ST_TO_ADDR
// sExchange := false ;
77779: LD_ADDR_EXP 149
77783: PUSH
77784: LD_INT 0
77786: ST_TO_ADDR
// sFac := false ;
77787: LD_ADDR_EXP 150
77791: PUSH
77792: LD_INT 0
77794: ST_TO_ADDR
// sPower := false ;
77795: LD_ADDR_EXP 151
77799: PUSH
77800: LD_INT 0
77802: ST_TO_ADDR
// sRandom := false ;
77803: LD_ADDR_EXP 152
77807: PUSH
77808: LD_INT 0
77810: ST_TO_ADDR
// sShield := false ;
77811: LD_ADDR_EXP 153
77815: PUSH
77816: LD_INT 0
77818: ST_TO_ADDR
// sTime := false ;
77819: LD_ADDR_EXP 154
77823: PUSH
77824: LD_INT 0
77826: ST_TO_ADDR
// sTools := false ;
77827: LD_ADDR_EXP 155
77831: PUSH
77832: LD_INT 0
77834: ST_TO_ADDR
// sSold := false ;
77835: LD_ADDR_EXP 120
77839: PUSH
77840: LD_INT 0
77842: ST_TO_ADDR
// sDiff := false ;
77843: LD_ADDR_EXP 121
77847: PUSH
77848: LD_INT 0
77850: ST_TO_ADDR
// sFog := false ;
77851: LD_ADDR_EXP 124
77855: PUSH
77856: LD_INT 0
77858: ST_TO_ADDR
// sReset := false ;
77859: LD_ADDR_EXP 125
77863: PUSH
77864: LD_INT 0
77866: ST_TO_ADDR
// sSun := false ;
77867: LD_ADDR_EXP 126
77871: PUSH
77872: LD_INT 0
77874: ST_TO_ADDR
// sTiger := false ;
77875: LD_ADDR_EXP 122
77879: PUSH
77880: LD_INT 0
77882: ST_TO_ADDR
// sBomb := false ;
77883: LD_ADDR_EXP 123
77887: PUSH
77888: LD_INT 0
77890: ST_TO_ADDR
// sWound := false ;
77891: LD_ADDR_EXP 131
77895: PUSH
77896: LD_INT 0
77898: ST_TO_ADDR
// sBetray := false ;
77899: LD_ADDR_EXP 135
77903: PUSH
77904: LD_INT 0
77906: ST_TO_ADDR
// sContamin := false ;
77907: LD_ADDR_EXP 136
77911: PUSH
77912: LD_INT 0
77914: ST_TO_ADDR
// sOil := false ;
77915: LD_ADDR_EXP 138
77919: PUSH
77920: LD_INT 0
77922: ST_TO_ADDR
// sStu := false ;
77923: LD_ADDR_EXP 142
77927: PUSH
77928: LD_INT 0
77930: ST_TO_ADDR
// sBazooka := false ;
77931: LD_ADDR_EXP 145
77935: PUSH
77936: LD_INT 0
77938: ST_TO_ADDR
// sMortar := false ;
77939: LD_ADDR_EXP 146
77943: PUSH
77944: LD_INT 0
77946: ST_TO_ADDR
// sRanger := false ;
77947: LD_ADDR_EXP 156
77951: PUSH
77952: LD_INT 0
77954: ST_TO_ADDR
// end ;
77955: LD_VAR 0 1
77959: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
77960: LD_INT 0
77962: PPUSH
77963: PPUSH
77964: PPUSH
77965: PPUSH
77966: PPUSH
// result := [ ] ;
77967: LD_ADDR_VAR 0 1
77971: PUSH
77972: EMPTY
77973: ST_TO_ADDR
// if campaign_id = 1 then
77974: LD_OWVAR 69
77978: PUSH
77979: LD_INT 1
77981: EQUAL
77982: IFFALSE 80920
// begin case mission_number of 1 :
77984: LD_OWVAR 70
77988: PUSH
77989: LD_INT 1
77991: DOUBLE
77992: EQUAL
77993: IFTRUE 77997
77995: GO 78061
77997: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
77998: LD_ADDR_VAR 0 1
78002: PUSH
78003: LD_INT 2
78005: PUSH
78006: LD_INT 4
78008: PUSH
78009: LD_INT 11
78011: PUSH
78012: LD_INT 12
78014: PUSH
78015: LD_INT 15
78017: PUSH
78018: LD_INT 16
78020: PUSH
78021: LD_INT 22
78023: PUSH
78024: LD_INT 23
78026: PUSH
78027: LD_INT 26
78029: PUSH
78030: EMPTY
78031: LIST
78032: LIST
78033: LIST
78034: LIST
78035: LIST
78036: LIST
78037: LIST
78038: LIST
78039: LIST
78040: PUSH
78041: LD_INT 101
78043: PUSH
78044: LD_INT 102
78046: PUSH
78047: LD_INT 106
78049: PUSH
78050: EMPTY
78051: LIST
78052: LIST
78053: LIST
78054: PUSH
78055: EMPTY
78056: LIST
78057: LIST
78058: ST_TO_ADDR
78059: GO 80918
78061: LD_INT 2
78063: DOUBLE
78064: EQUAL
78065: IFTRUE 78069
78067: GO 78141
78069: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
78070: LD_ADDR_VAR 0 1
78074: PUSH
78075: LD_INT 2
78077: PUSH
78078: LD_INT 4
78080: PUSH
78081: LD_INT 11
78083: PUSH
78084: LD_INT 12
78086: PUSH
78087: LD_INT 15
78089: PUSH
78090: LD_INT 16
78092: PUSH
78093: LD_INT 22
78095: PUSH
78096: LD_INT 23
78098: PUSH
78099: LD_INT 26
78101: PUSH
78102: EMPTY
78103: LIST
78104: LIST
78105: LIST
78106: LIST
78107: LIST
78108: LIST
78109: LIST
78110: LIST
78111: LIST
78112: PUSH
78113: LD_INT 101
78115: PUSH
78116: LD_INT 102
78118: PUSH
78119: LD_INT 105
78121: PUSH
78122: LD_INT 106
78124: PUSH
78125: LD_INT 108
78127: PUSH
78128: EMPTY
78129: LIST
78130: LIST
78131: LIST
78132: LIST
78133: LIST
78134: PUSH
78135: EMPTY
78136: LIST
78137: LIST
78138: ST_TO_ADDR
78139: GO 80918
78141: LD_INT 3
78143: DOUBLE
78144: EQUAL
78145: IFTRUE 78149
78147: GO 78225
78149: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
78150: LD_ADDR_VAR 0 1
78154: PUSH
78155: LD_INT 2
78157: PUSH
78158: LD_INT 4
78160: PUSH
78161: LD_INT 5
78163: PUSH
78164: LD_INT 11
78166: PUSH
78167: LD_INT 12
78169: PUSH
78170: LD_INT 15
78172: PUSH
78173: LD_INT 16
78175: PUSH
78176: LD_INT 22
78178: PUSH
78179: LD_INT 26
78181: PUSH
78182: LD_INT 36
78184: PUSH
78185: EMPTY
78186: LIST
78187: LIST
78188: LIST
78189: LIST
78190: LIST
78191: LIST
78192: LIST
78193: LIST
78194: LIST
78195: LIST
78196: PUSH
78197: LD_INT 101
78199: PUSH
78200: LD_INT 102
78202: PUSH
78203: LD_INT 105
78205: PUSH
78206: LD_INT 106
78208: PUSH
78209: LD_INT 108
78211: PUSH
78212: EMPTY
78213: LIST
78214: LIST
78215: LIST
78216: LIST
78217: LIST
78218: PUSH
78219: EMPTY
78220: LIST
78221: LIST
78222: ST_TO_ADDR
78223: GO 80918
78225: LD_INT 4
78227: DOUBLE
78228: EQUAL
78229: IFTRUE 78233
78231: GO 78317
78233: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
78234: LD_ADDR_VAR 0 1
78238: PUSH
78239: LD_INT 2
78241: PUSH
78242: LD_INT 4
78244: PUSH
78245: LD_INT 5
78247: PUSH
78248: LD_INT 8
78250: PUSH
78251: LD_INT 11
78253: PUSH
78254: LD_INT 12
78256: PUSH
78257: LD_INT 15
78259: PUSH
78260: LD_INT 16
78262: PUSH
78263: LD_INT 22
78265: PUSH
78266: LD_INT 23
78268: PUSH
78269: LD_INT 26
78271: PUSH
78272: LD_INT 36
78274: PUSH
78275: EMPTY
78276: LIST
78277: LIST
78278: LIST
78279: LIST
78280: LIST
78281: LIST
78282: LIST
78283: LIST
78284: LIST
78285: LIST
78286: LIST
78287: LIST
78288: PUSH
78289: LD_INT 101
78291: PUSH
78292: LD_INT 102
78294: PUSH
78295: LD_INT 105
78297: PUSH
78298: LD_INT 106
78300: PUSH
78301: LD_INT 108
78303: PUSH
78304: EMPTY
78305: LIST
78306: LIST
78307: LIST
78308: LIST
78309: LIST
78310: PUSH
78311: EMPTY
78312: LIST
78313: LIST
78314: ST_TO_ADDR
78315: GO 80918
78317: LD_INT 5
78319: DOUBLE
78320: EQUAL
78321: IFTRUE 78325
78323: GO 78425
78325: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
78326: LD_ADDR_VAR 0 1
78330: PUSH
78331: LD_INT 2
78333: PUSH
78334: LD_INT 4
78336: PUSH
78337: LD_INT 5
78339: PUSH
78340: LD_INT 6
78342: PUSH
78343: LD_INT 8
78345: PUSH
78346: LD_INT 11
78348: PUSH
78349: LD_INT 12
78351: PUSH
78352: LD_INT 15
78354: PUSH
78355: LD_INT 16
78357: PUSH
78358: LD_INT 22
78360: PUSH
78361: LD_INT 23
78363: PUSH
78364: LD_INT 25
78366: PUSH
78367: LD_INT 26
78369: PUSH
78370: LD_INT 36
78372: PUSH
78373: EMPTY
78374: LIST
78375: LIST
78376: LIST
78377: LIST
78378: LIST
78379: LIST
78380: LIST
78381: LIST
78382: LIST
78383: LIST
78384: LIST
78385: LIST
78386: LIST
78387: LIST
78388: PUSH
78389: LD_INT 101
78391: PUSH
78392: LD_INT 102
78394: PUSH
78395: LD_INT 105
78397: PUSH
78398: LD_INT 106
78400: PUSH
78401: LD_INT 108
78403: PUSH
78404: LD_INT 109
78406: PUSH
78407: LD_INT 112
78409: PUSH
78410: EMPTY
78411: LIST
78412: LIST
78413: LIST
78414: LIST
78415: LIST
78416: LIST
78417: LIST
78418: PUSH
78419: EMPTY
78420: LIST
78421: LIST
78422: ST_TO_ADDR
78423: GO 80918
78425: LD_INT 6
78427: DOUBLE
78428: EQUAL
78429: IFTRUE 78433
78431: GO 78553
78433: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
78434: LD_ADDR_VAR 0 1
78438: PUSH
78439: LD_INT 2
78441: PUSH
78442: LD_INT 4
78444: PUSH
78445: LD_INT 5
78447: PUSH
78448: LD_INT 6
78450: PUSH
78451: LD_INT 8
78453: PUSH
78454: LD_INT 11
78456: PUSH
78457: LD_INT 12
78459: PUSH
78460: LD_INT 15
78462: PUSH
78463: LD_INT 16
78465: PUSH
78466: LD_INT 20
78468: PUSH
78469: LD_INT 21
78471: PUSH
78472: LD_INT 22
78474: PUSH
78475: LD_INT 23
78477: PUSH
78478: LD_INT 25
78480: PUSH
78481: LD_INT 26
78483: PUSH
78484: LD_INT 30
78486: PUSH
78487: LD_INT 31
78489: PUSH
78490: LD_INT 32
78492: PUSH
78493: LD_INT 36
78495: PUSH
78496: EMPTY
78497: LIST
78498: LIST
78499: LIST
78500: LIST
78501: LIST
78502: LIST
78503: LIST
78504: LIST
78505: LIST
78506: LIST
78507: LIST
78508: LIST
78509: LIST
78510: LIST
78511: LIST
78512: LIST
78513: LIST
78514: LIST
78515: LIST
78516: PUSH
78517: LD_INT 101
78519: PUSH
78520: LD_INT 102
78522: PUSH
78523: LD_INT 105
78525: PUSH
78526: LD_INT 106
78528: PUSH
78529: LD_INT 108
78531: PUSH
78532: LD_INT 109
78534: PUSH
78535: LD_INT 112
78537: PUSH
78538: EMPTY
78539: LIST
78540: LIST
78541: LIST
78542: LIST
78543: LIST
78544: LIST
78545: LIST
78546: PUSH
78547: EMPTY
78548: LIST
78549: LIST
78550: ST_TO_ADDR
78551: GO 80918
78553: LD_INT 7
78555: DOUBLE
78556: EQUAL
78557: IFTRUE 78561
78559: GO 78661
78561: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
78562: LD_ADDR_VAR 0 1
78566: PUSH
78567: LD_INT 2
78569: PUSH
78570: LD_INT 4
78572: PUSH
78573: LD_INT 5
78575: PUSH
78576: LD_INT 7
78578: PUSH
78579: LD_INT 11
78581: PUSH
78582: LD_INT 12
78584: PUSH
78585: LD_INT 15
78587: PUSH
78588: LD_INT 16
78590: PUSH
78591: LD_INT 20
78593: PUSH
78594: LD_INT 21
78596: PUSH
78597: LD_INT 22
78599: PUSH
78600: LD_INT 23
78602: PUSH
78603: LD_INT 25
78605: PUSH
78606: LD_INT 26
78608: PUSH
78609: EMPTY
78610: LIST
78611: LIST
78612: LIST
78613: LIST
78614: LIST
78615: LIST
78616: LIST
78617: LIST
78618: LIST
78619: LIST
78620: LIST
78621: LIST
78622: LIST
78623: LIST
78624: PUSH
78625: LD_INT 101
78627: PUSH
78628: LD_INT 102
78630: PUSH
78631: LD_INT 103
78633: PUSH
78634: LD_INT 105
78636: PUSH
78637: LD_INT 106
78639: PUSH
78640: LD_INT 108
78642: PUSH
78643: LD_INT 112
78645: PUSH
78646: EMPTY
78647: LIST
78648: LIST
78649: LIST
78650: LIST
78651: LIST
78652: LIST
78653: LIST
78654: PUSH
78655: EMPTY
78656: LIST
78657: LIST
78658: ST_TO_ADDR
78659: GO 80918
78661: LD_INT 8
78663: DOUBLE
78664: EQUAL
78665: IFTRUE 78669
78667: GO 78797
78669: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
78670: LD_ADDR_VAR 0 1
78674: PUSH
78675: LD_INT 2
78677: PUSH
78678: LD_INT 4
78680: PUSH
78681: LD_INT 5
78683: PUSH
78684: LD_INT 6
78686: PUSH
78687: LD_INT 7
78689: PUSH
78690: LD_INT 8
78692: PUSH
78693: LD_INT 11
78695: PUSH
78696: LD_INT 12
78698: PUSH
78699: LD_INT 15
78701: PUSH
78702: LD_INT 16
78704: PUSH
78705: LD_INT 20
78707: PUSH
78708: LD_INT 21
78710: PUSH
78711: LD_INT 22
78713: PUSH
78714: LD_INT 23
78716: PUSH
78717: LD_INT 25
78719: PUSH
78720: LD_INT 26
78722: PUSH
78723: LD_INT 30
78725: PUSH
78726: LD_INT 31
78728: PUSH
78729: LD_INT 32
78731: PUSH
78732: LD_INT 36
78734: PUSH
78735: EMPTY
78736: LIST
78737: LIST
78738: LIST
78739: LIST
78740: LIST
78741: LIST
78742: LIST
78743: LIST
78744: LIST
78745: LIST
78746: LIST
78747: LIST
78748: LIST
78749: LIST
78750: LIST
78751: LIST
78752: LIST
78753: LIST
78754: LIST
78755: LIST
78756: PUSH
78757: LD_INT 101
78759: PUSH
78760: LD_INT 102
78762: PUSH
78763: LD_INT 103
78765: PUSH
78766: LD_INT 105
78768: PUSH
78769: LD_INT 106
78771: PUSH
78772: LD_INT 108
78774: PUSH
78775: LD_INT 109
78777: PUSH
78778: LD_INT 112
78780: PUSH
78781: EMPTY
78782: LIST
78783: LIST
78784: LIST
78785: LIST
78786: LIST
78787: LIST
78788: LIST
78789: LIST
78790: PUSH
78791: EMPTY
78792: LIST
78793: LIST
78794: ST_TO_ADDR
78795: GO 80918
78797: LD_INT 9
78799: DOUBLE
78800: EQUAL
78801: IFTRUE 78805
78803: GO 78941
78805: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
78806: LD_ADDR_VAR 0 1
78810: PUSH
78811: LD_INT 2
78813: PUSH
78814: LD_INT 4
78816: PUSH
78817: LD_INT 5
78819: PUSH
78820: LD_INT 6
78822: PUSH
78823: LD_INT 7
78825: PUSH
78826: LD_INT 8
78828: PUSH
78829: LD_INT 11
78831: PUSH
78832: LD_INT 12
78834: PUSH
78835: LD_INT 15
78837: PUSH
78838: LD_INT 16
78840: PUSH
78841: LD_INT 20
78843: PUSH
78844: LD_INT 21
78846: PUSH
78847: LD_INT 22
78849: PUSH
78850: LD_INT 23
78852: PUSH
78853: LD_INT 25
78855: PUSH
78856: LD_INT 26
78858: PUSH
78859: LD_INT 28
78861: PUSH
78862: LD_INT 30
78864: PUSH
78865: LD_INT 31
78867: PUSH
78868: LD_INT 32
78870: PUSH
78871: LD_INT 36
78873: PUSH
78874: EMPTY
78875: LIST
78876: LIST
78877: LIST
78878: LIST
78879: LIST
78880: LIST
78881: LIST
78882: LIST
78883: LIST
78884: LIST
78885: LIST
78886: LIST
78887: LIST
78888: LIST
78889: LIST
78890: LIST
78891: LIST
78892: LIST
78893: LIST
78894: LIST
78895: LIST
78896: PUSH
78897: LD_INT 101
78899: PUSH
78900: LD_INT 102
78902: PUSH
78903: LD_INT 103
78905: PUSH
78906: LD_INT 105
78908: PUSH
78909: LD_INT 106
78911: PUSH
78912: LD_INT 108
78914: PUSH
78915: LD_INT 109
78917: PUSH
78918: LD_INT 112
78920: PUSH
78921: LD_INT 114
78923: PUSH
78924: EMPTY
78925: LIST
78926: LIST
78927: LIST
78928: LIST
78929: LIST
78930: LIST
78931: LIST
78932: LIST
78933: LIST
78934: PUSH
78935: EMPTY
78936: LIST
78937: LIST
78938: ST_TO_ADDR
78939: GO 80918
78941: LD_INT 10
78943: DOUBLE
78944: EQUAL
78945: IFTRUE 78949
78947: GO 79133
78949: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
78950: LD_ADDR_VAR 0 1
78954: PUSH
78955: LD_INT 2
78957: PUSH
78958: LD_INT 4
78960: PUSH
78961: LD_INT 5
78963: PUSH
78964: LD_INT 6
78966: PUSH
78967: LD_INT 7
78969: PUSH
78970: LD_INT 8
78972: PUSH
78973: LD_INT 9
78975: PUSH
78976: LD_INT 10
78978: PUSH
78979: LD_INT 11
78981: PUSH
78982: LD_INT 12
78984: PUSH
78985: LD_INT 13
78987: PUSH
78988: LD_INT 14
78990: PUSH
78991: LD_INT 15
78993: PUSH
78994: LD_INT 16
78996: PUSH
78997: LD_INT 17
78999: PUSH
79000: LD_INT 18
79002: PUSH
79003: LD_INT 19
79005: PUSH
79006: LD_INT 20
79008: PUSH
79009: LD_INT 21
79011: PUSH
79012: LD_INT 22
79014: PUSH
79015: LD_INT 23
79017: PUSH
79018: LD_INT 24
79020: PUSH
79021: LD_INT 25
79023: PUSH
79024: LD_INT 26
79026: PUSH
79027: LD_INT 28
79029: PUSH
79030: LD_INT 30
79032: PUSH
79033: LD_INT 31
79035: PUSH
79036: LD_INT 32
79038: PUSH
79039: LD_INT 36
79041: PUSH
79042: EMPTY
79043: LIST
79044: LIST
79045: LIST
79046: LIST
79047: LIST
79048: LIST
79049: LIST
79050: LIST
79051: LIST
79052: LIST
79053: LIST
79054: LIST
79055: LIST
79056: LIST
79057: LIST
79058: LIST
79059: LIST
79060: LIST
79061: LIST
79062: LIST
79063: LIST
79064: LIST
79065: LIST
79066: LIST
79067: LIST
79068: LIST
79069: LIST
79070: LIST
79071: LIST
79072: PUSH
79073: LD_INT 101
79075: PUSH
79076: LD_INT 102
79078: PUSH
79079: LD_INT 103
79081: PUSH
79082: LD_INT 104
79084: PUSH
79085: LD_INT 105
79087: PUSH
79088: LD_INT 106
79090: PUSH
79091: LD_INT 107
79093: PUSH
79094: LD_INT 108
79096: PUSH
79097: LD_INT 109
79099: PUSH
79100: LD_INT 110
79102: PUSH
79103: LD_INT 111
79105: PUSH
79106: LD_INT 112
79108: PUSH
79109: LD_INT 114
79111: PUSH
79112: EMPTY
79113: LIST
79114: LIST
79115: LIST
79116: LIST
79117: LIST
79118: LIST
79119: LIST
79120: LIST
79121: LIST
79122: LIST
79123: LIST
79124: LIST
79125: LIST
79126: PUSH
79127: EMPTY
79128: LIST
79129: LIST
79130: ST_TO_ADDR
79131: GO 80918
79133: LD_INT 11
79135: DOUBLE
79136: EQUAL
79137: IFTRUE 79141
79139: GO 79333
79141: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
79142: LD_ADDR_VAR 0 1
79146: PUSH
79147: LD_INT 2
79149: PUSH
79150: LD_INT 3
79152: PUSH
79153: LD_INT 4
79155: PUSH
79156: LD_INT 5
79158: PUSH
79159: LD_INT 6
79161: PUSH
79162: LD_INT 7
79164: PUSH
79165: LD_INT 8
79167: PUSH
79168: LD_INT 9
79170: PUSH
79171: LD_INT 10
79173: PUSH
79174: LD_INT 11
79176: PUSH
79177: LD_INT 12
79179: PUSH
79180: LD_INT 13
79182: PUSH
79183: LD_INT 14
79185: PUSH
79186: LD_INT 15
79188: PUSH
79189: LD_INT 16
79191: PUSH
79192: LD_INT 17
79194: PUSH
79195: LD_INT 18
79197: PUSH
79198: LD_INT 19
79200: PUSH
79201: LD_INT 20
79203: PUSH
79204: LD_INT 21
79206: PUSH
79207: LD_INT 22
79209: PUSH
79210: LD_INT 23
79212: PUSH
79213: LD_INT 24
79215: PUSH
79216: LD_INT 25
79218: PUSH
79219: LD_INT 26
79221: PUSH
79222: LD_INT 28
79224: PUSH
79225: LD_INT 30
79227: PUSH
79228: LD_INT 31
79230: PUSH
79231: LD_INT 32
79233: PUSH
79234: LD_INT 34
79236: PUSH
79237: LD_INT 36
79239: PUSH
79240: EMPTY
79241: LIST
79242: LIST
79243: LIST
79244: LIST
79245: LIST
79246: LIST
79247: LIST
79248: LIST
79249: LIST
79250: LIST
79251: LIST
79252: LIST
79253: LIST
79254: LIST
79255: LIST
79256: LIST
79257: LIST
79258: LIST
79259: LIST
79260: LIST
79261: LIST
79262: LIST
79263: LIST
79264: LIST
79265: LIST
79266: LIST
79267: LIST
79268: LIST
79269: LIST
79270: LIST
79271: LIST
79272: PUSH
79273: LD_INT 101
79275: PUSH
79276: LD_INT 102
79278: PUSH
79279: LD_INT 103
79281: PUSH
79282: LD_INT 104
79284: PUSH
79285: LD_INT 105
79287: PUSH
79288: LD_INT 106
79290: PUSH
79291: LD_INT 107
79293: PUSH
79294: LD_INT 108
79296: PUSH
79297: LD_INT 109
79299: PUSH
79300: LD_INT 110
79302: PUSH
79303: LD_INT 111
79305: PUSH
79306: LD_INT 112
79308: PUSH
79309: LD_INT 114
79311: PUSH
79312: EMPTY
79313: LIST
79314: LIST
79315: LIST
79316: LIST
79317: LIST
79318: LIST
79319: LIST
79320: LIST
79321: LIST
79322: LIST
79323: LIST
79324: LIST
79325: LIST
79326: PUSH
79327: EMPTY
79328: LIST
79329: LIST
79330: ST_TO_ADDR
79331: GO 80918
79333: LD_INT 12
79335: DOUBLE
79336: EQUAL
79337: IFTRUE 79341
79339: GO 79549
79341: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
79342: LD_ADDR_VAR 0 1
79346: PUSH
79347: LD_INT 1
79349: PUSH
79350: LD_INT 2
79352: PUSH
79353: LD_INT 3
79355: PUSH
79356: LD_INT 4
79358: PUSH
79359: LD_INT 5
79361: PUSH
79362: LD_INT 6
79364: PUSH
79365: LD_INT 7
79367: PUSH
79368: LD_INT 8
79370: PUSH
79371: LD_INT 9
79373: PUSH
79374: LD_INT 10
79376: PUSH
79377: LD_INT 11
79379: PUSH
79380: LD_INT 12
79382: PUSH
79383: LD_INT 13
79385: PUSH
79386: LD_INT 14
79388: PUSH
79389: LD_INT 15
79391: PUSH
79392: LD_INT 16
79394: PUSH
79395: LD_INT 17
79397: PUSH
79398: LD_INT 18
79400: PUSH
79401: LD_INT 19
79403: PUSH
79404: LD_INT 20
79406: PUSH
79407: LD_INT 21
79409: PUSH
79410: LD_INT 22
79412: PUSH
79413: LD_INT 23
79415: PUSH
79416: LD_INT 24
79418: PUSH
79419: LD_INT 25
79421: PUSH
79422: LD_INT 26
79424: PUSH
79425: LD_INT 27
79427: PUSH
79428: LD_INT 28
79430: PUSH
79431: LD_INT 30
79433: PUSH
79434: LD_INT 31
79436: PUSH
79437: LD_INT 32
79439: PUSH
79440: LD_INT 33
79442: PUSH
79443: LD_INT 34
79445: PUSH
79446: LD_INT 36
79448: PUSH
79449: EMPTY
79450: LIST
79451: LIST
79452: LIST
79453: LIST
79454: LIST
79455: LIST
79456: LIST
79457: LIST
79458: LIST
79459: LIST
79460: LIST
79461: LIST
79462: LIST
79463: LIST
79464: LIST
79465: LIST
79466: LIST
79467: LIST
79468: LIST
79469: LIST
79470: LIST
79471: LIST
79472: LIST
79473: LIST
79474: LIST
79475: LIST
79476: LIST
79477: LIST
79478: LIST
79479: LIST
79480: LIST
79481: LIST
79482: LIST
79483: LIST
79484: PUSH
79485: LD_INT 101
79487: PUSH
79488: LD_INT 102
79490: PUSH
79491: LD_INT 103
79493: PUSH
79494: LD_INT 104
79496: PUSH
79497: LD_INT 105
79499: PUSH
79500: LD_INT 106
79502: PUSH
79503: LD_INT 107
79505: PUSH
79506: LD_INT 108
79508: PUSH
79509: LD_INT 109
79511: PUSH
79512: LD_INT 110
79514: PUSH
79515: LD_INT 111
79517: PUSH
79518: LD_INT 112
79520: PUSH
79521: LD_INT 113
79523: PUSH
79524: LD_INT 114
79526: PUSH
79527: EMPTY
79528: LIST
79529: LIST
79530: LIST
79531: LIST
79532: LIST
79533: LIST
79534: LIST
79535: LIST
79536: LIST
79537: LIST
79538: LIST
79539: LIST
79540: LIST
79541: LIST
79542: PUSH
79543: EMPTY
79544: LIST
79545: LIST
79546: ST_TO_ADDR
79547: GO 80918
79549: LD_INT 13
79551: DOUBLE
79552: EQUAL
79553: IFTRUE 79557
79555: GO 79753
79557: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
79558: LD_ADDR_VAR 0 1
79562: PUSH
79563: LD_INT 1
79565: PUSH
79566: LD_INT 2
79568: PUSH
79569: LD_INT 3
79571: PUSH
79572: LD_INT 4
79574: PUSH
79575: LD_INT 5
79577: PUSH
79578: LD_INT 8
79580: PUSH
79581: LD_INT 9
79583: PUSH
79584: LD_INT 10
79586: PUSH
79587: LD_INT 11
79589: PUSH
79590: LD_INT 12
79592: PUSH
79593: LD_INT 14
79595: PUSH
79596: LD_INT 15
79598: PUSH
79599: LD_INT 16
79601: PUSH
79602: LD_INT 17
79604: PUSH
79605: LD_INT 18
79607: PUSH
79608: LD_INT 19
79610: PUSH
79611: LD_INT 20
79613: PUSH
79614: LD_INT 21
79616: PUSH
79617: LD_INT 22
79619: PUSH
79620: LD_INT 23
79622: PUSH
79623: LD_INT 24
79625: PUSH
79626: LD_INT 25
79628: PUSH
79629: LD_INT 26
79631: PUSH
79632: LD_INT 27
79634: PUSH
79635: LD_INT 28
79637: PUSH
79638: LD_INT 30
79640: PUSH
79641: LD_INT 31
79643: PUSH
79644: LD_INT 32
79646: PUSH
79647: LD_INT 33
79649: PUSH
79650: LD_INT 34
79652: PUSH
79653: LD_INT 36
79655: PUSH
79656: EMPTY
79657: LIST
79658: LIST
79659: LIST
79660: LIST
79661: LIST
79662: LIST
79663: LIST
79664: LIST
79665: LIST
79666: LIST
79667: LIST
79668: LIST
79669: LIST
79670: LIST
79671: LIST
79672: LIST
79673: LIST
79674: LIST
79675: LIST
79676: LIST
79677: LIST
79678: LIST
79679: LIST
79680: LIST
79681: LIST
79682: LIST
79683: LIST
79684: LIST
79685: LIST
79686: LIST
79687: LIST
79688: PUSH
79689: LD_INT 101
79691: PUSH
79692: LD_INT 102
79694: PUSH
79695: LD_INT 103
79697: PUSH
79698: LD_INT 104
79700: PUSH
79701: LD_INT 105
79703: PUSH
79704: LD_INT 106
79706: PUSH
79707: LD_INT 107
79709: PUSH
79710: LD_INT 108
79712: PUSH
79713: LD_INT 109
79715: PUSH
79716: LD_INT 110
79718: PUSH
79719: LD_INT 111
79721: PUSH
79722: LD_INT 112
79724: PUSH
79725: LD_INT 113
79727: PUSH
79728: LD_INT 114
79730: PUSH
79731: EMPTY
79732: LIST
79733: LIST
79734: LIST
79735: LIST
79736: LIST
79737: LIST
79738: LIST
79739: LIST
79740: LIST
79741: LIST
79742: LIST
79743: LIST
79744: LIST
79745: LIST
79746: PUSH
79747: EMPTY
79748: LIST
79749: LIST
79750: ST_TO_ADDR
79751: GO 80918
79753: LD_INT 14
79755: DOUBLE
79756: EQUAL
79757: IFTRUE 79761
79759: GO 79973
79761: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
79762: LD_ADDR_VAR 0 1
79766: PUSH
79767: LD_INT 1
79769: PUSH
79770: LD_INT 2
79772: PUSH
79773: LD_INT 3
79775: PUSH
79776: LD_INT 4
79778: PUSH
79779: LD_INT 5
79781: PUSH
79782: LD_INT 6
79784: PUSH
79785: LD_INT 7
79787: PUSH
79788: LD_INT 8
79790: PUSH
79791: LD_INT 9
79793: PUSH
79794: LD_INT 10
79796: PUSH
79797: LD_INT 11
79799: PUSH
79800: LD_INT 12
79802: PUSH
79803: LD_INT 13
79805: PUSH
79806: LD_INT 14
79808: PUSH
79809: LD_INT 15
79811: PUSH
79812: LD_INT 16
79814: PUSH
79815: LD_INT 17
79817: PUSH
79818: LD_INT 18
79820: PUSH
79821: LD_INT 19
79823: PUSH
79824: LD_INT 20
79826: PUSH
79827: LD_INT 21
79829: PUSH
79830: LD_INT 22
79832: PUSH
79833: LD_INT 23
79835: PUSH
79836: LD_INT 24
79838: PUSH
79839: LD_INT 25
79841: PUSH
79842: LD_INT 26
79844: PUSH
79845: LD_INT 27
79847: PUSH
79848: LD_INT 28
79850: PUSH
79851: LD_INT 29
79853: PUSH
79854: LD_INT 30
79856: PUSH
79857: LD_INT 31
79859: PUSH
79860: LD_INT 32
79862: PUSH
79863: LD_INT 33
79865: PUSH
79866: LD_INT 34
79868: PUSH
79869: LD_INT 36
79871: PUSH
79872: EMPTY
79873: LIST
79874: LIST
79875: LIST
79876: LIST
79877: LIST
79878: LIST
79879: LIST
79880: LIST
79881: LIST
79882: LIST
79883: LIST
79884: LIST
79885: LIST
79886: LIST
79887: LIST
79888: LIST
79889: LIST
79890: LIST
79891: LIST
79892: LIST
79893: LIST
79894: LIST
79895: LIST
79896: LIST
79897: LIST
79898: LIST
79899: LIST
79900: LIST
79901: LIST
79902: LIST
79903: LIST
79904: LIST
79905: LIST
79906: LIST
79907: LIST
79908: PUSH
79909: LD_INT 101
79911: PUSH
79912: LD_INT 102
79914: PUSH
79915: LD_INT 103
79917: PUSH
79918: LD_INT 104
79920: PUSH
79921: LD_INT 105
79923: PUSH
79924: LD_INT 106
79926: PUSH
79927: LD_INT 107
79929: PUSH
79930: LD_INT 108
79932: PUSH
79933: LD_INT 109
79935: PUSH
79936: LD_INT 110
79938: PUSH
79939: LD_INT 111
79941: PUSH
79942: LD_INT 112
79944: PUSH
79945: LD_INT 113
79947: PUSH
79948: LD_INT 114
79950: PUSH
79951: EMPTY
79952: LIST
79953: LIST
79954: LIST
79955: LIST
79956: LIST
79957: LIST
79958: LIST
79959: LIST
79960: LIST
79961: LIST
79962: LIST
79963: LIST
79964: LIST
79965: LIST
79966: PUSH
79967: EMPTY
79968: LIST
79969: LIST
79970: ST_TO_ADDR
79971: GO 80918
79973: LD_INT 15
79975: DOUBLE
79976: EQUAL
79977: IFTRUE 79981
79979: GO 80193
79981: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
79982: LD_ADDR_VAR 0 1
79986: PUSH
79987: LD_INT 1
79989: PUSH
79990: LD_INT 2
79992: PUSH
79993: LD_INT 3
79995: PUSH
79996: LD_INT 4
79998: PUSH
79999: LD_INT 5
80001: PUSH
80002: LD_INT 6
80004: PUSH
80005: LD_INT 7
80007: PUSH
80008: LD_INT 8
80010: PUSH
80011: LD_INT 9
80013: PUSH
80014: LD_INT 10
80016: PUSH
80017: LD_INT 11
80019: PUSH
80020: LD_INT 12
80022: PUSH
80023: LD_INT 13
80025: PUSH
80026: LD_INT 14
80028: PUSH
80029: LD_INT 15
80031: PUSH
80032: LD_INT 16
80034: PUSH
80035: LD_INT 17
80037: PUSH
80038: LD_INT 18
80040: PUSH
80041: LD_INT 19
80043: PUSH
80044: LD_INT 20
80046: PUSH
80047: LD_INT 21
80049: PUSH
80050: LD_INT 22
80052: PUSH
80053: LD_INT 23
80055: PUSH
80056: LD_INT 24
80058: PUSH
80059: LD_INT 25
80061: PUSH
80062: LD_INT 26
80064: PUSH
80065: LD_INT 27
80067: PUSH
80068: LD_INT 28
80070: PUSH
80071: LD_INT 29
80073: PUSH
80074: LD_INT 30
80076: PUSH
80077: LD_INT 31
80079: PUSH
80080: LD_INT 32
80082: PUSH
80083: LD_INT 33
80085: PUSH
80086: LD_INT 34
80088: PUSH
80089: LD_INT 36
80091: PUSH
80092: EMPTY
80093: LIST
80094: LIST
80095: LIST
80096: LIST
80097: LIST
80098: LIST
80099: LIST
80100: LIST
80101: LIST
80102: LIST
80103: LIST
80104: LIST
80105: LIST
80106: LIST
80107: LIST
80108: LIST
80109: LIST
80110: LIST
80111: LIST
80112: LIST
80113: LIST
80114: LIST
80115: LIST
80116: LIST
80117: LIST
80118: LIST
80119: LIST
80120: LIST
80121: LIST
80122: LIST
80123: LIST
80124: LIST
80125: LIST
80126: LIST
80127: LIST
80128: PUSH
80129: LD_INT 101
80131: PUSH
80132: LD_INT 102
80134: PUSH
80135: LD_INT 103
80137: PUSH
80138: LD_INT 104
80140: PUSH
80141: LD_INT 105
80143: PUSH
80144: LD_INT 106
80146: PUSH
80147: LD_INT 107
80149: PUSH
80150: LD_INT 108
80152: PUSH
80153: LD_INT 109
80155: PUSH
80156: LD_INT 110
80158: PUSH
80159: LD_INT 111
80161: PUSH
80162: LD_INT 112
80164: PUSH
80165: LD_INT 113
80167: PUSH
80168: LD_INT 114
80170: PUSH
80171: EMPTY
80172: LIST
80173: LIST
80174: LIST
80175: LIST
80176: LIST
80177: LIST
80178: LIST
80179: LIST
80180: LIST
80181: LIST
80182: LIST
80183: LIST
80184: LIST
80185: LIST
80186: PUSH
80187: EMPTY
80188: LIST
80189: LIST
80190: ST_TO_ADDR
80191: GO 80918
80193: LD_INT 16
80195: DOUBLE
80196: EQUAL
80197: IFTRUE 80201
80199: GO 80325
80201: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
80202: LD_ADDR_VAR 0 1
80206: PUSH
80207: LD_INT 2
80209: PUSH
80210: LD_INT 4
80212: PUSH
80213: LD_INT 5
80215: PUSH
80216: LD_INT 7
80218: PUSH
80219: LD_INT 11
80221: PUSH
80222: LD_INT 12
80224: PUSH
80225: LD_INT 15
80227: PUSH
80228: LD_INT 16
80230: PUSH
80231: LD_INT 20
80233: PUSH
80234: LD_INT 21
80236: PUSH
80237: LD_INT 22
80239: PUSH
80240: LD_INT 23
80242: PUSH
80243: LD_INT 25
80245: PUSH
80246: LD_INT 26
80248: PUSH
80249: LD_INT 30
80251: PUSH
80252: LD_INT 31
80254: PUSH
80255: LD_INT 32
80257: PUSH
80258: LD_INT 33
80260: PUSH
80261: LD_INT 34
80263: PUSH
80264: EMPTY
80265: LIST
80266: LIST
80267: LIST
80268: LIST
80269: LIST
80270: LIST
80271: LIST
80272: LIST
80273: LIST
80274: LIST
80275: LIST
80276: LIST
80277: LIST
80278: LIST
80279: LIST
80280: LIST
80281: LIST
80282: LIST
80283: LIST
80284: PUSH
80285: LD_INT 101
80287: PUSH
80288: LD_INT 102
80290: PUSH
80291: LD_INT 103
80293: PUSH
80294: LD_INT 106
80296: PUSH
80297: LD_INT 108
80299: PUSH
80300: LD_INT 112
80302: PUSH
80303: LD_INT 113
80305: PUSH
80306: LD_INT 114
80308: PUSH
80309: EMPTY
80310: LIST
80311: LIST
80312: LIST
80313: LIST
80314: LIST
80315: LIST
80316: LIST
80317: LIST
80318: PUSH
80319: EMPTY
80320: LIST
80321: LIST
80322: ST_TO_ADDR
80323: GO 80918
80325: LD_INT 17
80327: DOUBLE
80328: EQUAL
80329: IFTRUE 80333
80331: GO 80545
80333: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
80334: LD_ADDR_VAR 0 1
80338: PUSH
80339: LD_INT 1
80341: PUSH
80342: LD_INT 2
80344: PUSH
80345: LD_INT 3
80347: PUSH
80348: LD_INT 4
80350: PUSH
80351: LD_INT 5
80353: PUSH
80354: LD_INT 6
80356: PUSH
80357: LD_INT 7
80359: PUSH
80360: LD_INT 8
80362: PUSH
80363: LD_INT 9
80365: PUSH
80366: LD_INT 10
80368: PUSH
80369: LD_INT 11
80371: PUSH
80372: LD_INT 12
80374: PUSH
80375: LD_INT 13
80377: PUSH
80378: LD_INT 14
80380: PUSH
80381: LD_INT 15
80383: PUSH
80384: LD_INT 16
80386: PUSH
80387: LD_INT 17
80389: PUSH
80390: LD_INT 18
80392: PUSH
80393: LD_INT 19
80395: PUSH
80396: LD_INT 20
80398: PUSH
80399: LD_INT 21
80401: PUSH
80402: LD_INT 22
80404: PUSH
80405: LD_INT 23
80407: PUSH
80408: LD_INT 24
80410: PUSH
80411: LD_INT 25
80413: PUSH
80414: LD_INT 26
80416: PUSH
80417: LD_INT 27
80419: PUSH
80420: LD_INT 28
80422: PUSH
80423: LD_INT 29
80425: PUSH
80426: LD_INT 30
80428: PUSH
80429: LD_INT 31
80431: PUSH
80432: LD_INT 32
80434: PUSH
80435: LD_INT 33
80437: PUSH
80438: LD_INT 34
80440: PUSH
80441: LD_INT 36
80443: PUSH
80444: EMPTY
80445: LIST
80446: LIST
80447: LIST
80448: LIST
80449: LIST
80450: LIST
80451: LIST
80452: LIST
80453: LIST
80454: LIST
80455: LIST
80456: LIST
80457: LIST
80458: LIST
80459: LIST
80460: LIST
80461: LIST
80462: LIST
80463: LIST
80464: LIST
80465: LIST
80466: LIST
80467: LIST
80468: LIST
80469: LIST
80470: LIST
80471: LIST
80472: LIST
80473: LIST
80474: LIST
80475: LIST
80476: LIST
80477: LIST
80478: LIST
80479: LIST
80480: PUSH
80481: LD_INT 101
80483: PUSH
80484: LD_INT 102
80486: PUSH
80487: LD_INT 103
80489: PUSH
80490: LD_INT 104
80492: PUSH
80493: LD_INT 105
80495: PUSH
80496: LD_INT 106
80498: PUSH
80499: LD_INT 107
80501: PUSH
80502: LD_INT 108
80504: PUSH
80505: LD_INT 109
80507: PUSH
80508: LD_INT 110
80510: PUSH
80511: LD_INT 111
80513: PUSH
80514: LD_INT 112
80516: PUSH
80517: LD_INT 113
80519: PUSH
80520: LD_INT 114
80522: PUSH
80523: EMPTY
80524: LIST
80525: LIST
80526: LIST
80527: LIST
80528: LIST
80529: LIST
80530: LIST
80531: LIST
80532: LIST
80533: LIST
80534: LIST
80535: LIST
80536: LIST
80537: LIST
80538: PUSH
80539: EMPTY
80540: LIST
80541: LIST
80542: ST_TO_ADDR
80543: GO 80918
80545: LD_INT 18
80547: DOUBLE
80548: EQUAL
80549: IFTRUE 80553
80551: GO 80689
80553: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
80554: LD_ADDR_VAR 0 1
80558: PUSH
80559: LD_INT 2
80561: PUSH
80562: LD_INT 4
80564: PUSH
80565: LD_INT 5
80567: PUSH
80568: LD_INT 7
80570: PUSH
80571: LD_INT 11
80573: PUSH
80574: LD_INT 12
80576: PUSH
80577: LD_INT 15
80579: PUSH
80580: LD_INT 16
80582: PUSH
80583: LD_INT 20
80585: PUSH
80586: LD_INT 21
80588: PUSH
80589: LD_INT 22
80591: PUSH
80592: LD_INT 23
80594: PUSH
80595: LD_INT 25
80597: PUSH
80598: LD_INT 26
80600: PUSH
80601: LD_INT 30
80603: PUSH
80604: LD_INT 31
80606: PUSH
80607: LD_INT 32
80609: PUSH
80610: LD_INT 33
80612: PUSH
80613: LD_INT 34
80615: PUSH
80616: LD_INT 35
80618: PUSH
80619: LD_INT 36
80621: PUSH
80622: EMPTY
80623: LIST
80624: LIST
80625: LIST
80626: LIST
80627: LIST
80628: LIST
80629: LIST
80630: LIST
80631: LIST
80632: LIST
80633: LIST
80634: LIST
80635: LIST
80636: LIST
80637: LIST
80638: LIST
80639: LIST
80640: LIST
80641: LIST
80642: LIST
80643: LIST
80644: PUSH
80645: LD_INT 101
80647: PUSH
80648: LD_INT 102
80650: PUSH
80651: LD_INT 103
80653: PUSH
80654: LD_INT 106
80656: PUSH
80657: LD_INT 108
80659: PUSH
80660: LD_INT 112
80662: PUSH
80663: LD_INT 113
80665: PUSH
80666: LD_INT 114
80668: PUSH
80669: LD_INT 115
80671: PUSH
80672: EMPTY
80673: LIST
80674: LIST
80675: LIST
80676: LIST
80677: LIST
80678: LIST
80679: LIST
80680: LIST
80681: LIST
80682: PUSH
80683: EMPTY
80684: LIST
80685: LIST
80686: ST_TO_ADDR
80687: GO 80918
80689: LD_INT 19
80691: DOUBLE
80692: EQUAL
80693: IFTRUE 80697
80695: GO 80917
80697: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
80698: LD_ADDR_VAR 0 1
80702: PUSH
80703: LD_INT 1
80705: PUSH
80706: LD_INT 2
80708: PUSH
80709: LD_INT 3
80711: PUSH
80712: LD_INT 4
80714: PUSH
80715: LD_INT 5
80717: PUSH
80718: LD_INT 6
80720: PUSH
80721: LD_INT 7
80723: PUSH
80724: LD_INT 8
80726: PUSH
80727: LD_INT 9
80729: PUSH
80730: LD_INT 10
80732: PUSH
80733: LD_INT 11
80735: PUSH
80736: LD_INT 12
80738: PUSH
80739: LD_INT 13
80741: PUSH
80742: LD_INT 14
80744: PUSH
80745: LD_INT 15
80747: PUSH
80748: LD_INT 16
80750: PUSH
80751: LD_INT 17
80753: PUSH
80754: LD_INT 18
80756: PUSH
80757: LD_INT 19
80759: PUSH
80760: LD_INT 20
80762: PUSH
80763: LD_INT 21
80765: PUSH
80766: LD_INT 22
80768: PUSH
80769: LD_INT 23
80771: PUSH
80772: LD_INT 24
80774: PUSH
80775: LD_INT 25
80777: PUSH
80778: LD_INT 26
80780: PUSH
80781: LD_INT 27
80783: PUSH
80784: LD_INT 28
80786: PUSH
80787: LD_INT 29
80789: PUSH
80790: LD_INT 30
80792: PUSH
80793: LD_INT 31
80795: PUSH
80796: LD_INT 32
80798: PUSH
80799: LD_INT 33
80801: PUSH
80802: LD_INT 34
80804: PUSH
80805: LD_INT 35
80807: PUSH
80808: LD_INT 36
80810: PUSH
80811: EMPTY
80812: LIST
80813: LIST
80814: LIST
80815: LIST
80816: LIST
80817: LIST
80818: LIST
80819: LIST
80820: LIST
80821: LIST
80822: LIST
80823: LIST
80824: LIST
80825: LIST
80826: LIST
80827: LIST
80828: LIST
80829: LIST
80830: LIST
80831: LIST
80832: LIST
80833: LIST
80834: LIST
80835: LIST
80836: LIST
80837: LIST
80838: LIST
80839: LIST
80840: LIST
80841: LIST
80842: LIST
80843: LIST
80844: LIST
80845: LIST
80846: LIST
80847: LIST
80848: PUSH
80849: LD_INT 101
80851: PUSH
80852: LD_INT 102
80854: PUSH
80855: LD_INT 103
80857: PUSH
80858: LD_INT 104
80860: PUSH
80861: LD_INT 105
80863: PUSH
80864: LD_INT 106
80866: PUSH
80867: LD_INT 107
80869: PUSH
80870: LD_INT 108
80872: PUSH
80873: LD_INT 109
80875: PUSH
80876: LD_INT 110
80878: PUSH
80879: LD_INT 111
80881: PUSH
80882: LD_INT 112
80884: PUSH
80885: LD_INT 113
80887: PUSH
80888: LD_INT 114
80890: PUSH
80891: LD_INT 115
80893: PUSH
80894: EMPTY
80895: LIST
80896: LIST
80897: LIST
80898: LIST
80899: LIST
80900: LIST
80901: LIST
80902: LIST
80903: LIST
80904: LIST
80905: LIST
80906: LIST
80907: LIST
80908: LIST
80909: LIST
80910: PUSH
80911: EMPTY
80912: LIST
80913: LIST
80914: ST_TO_ADDR
80915: GO 80918
80917: POP
// end else
80918: GO 81137
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
80920: LD_ADDR_VAR 0 1
80924: PUSH
80925: LD_INT 1
80927: PUSH
80928: LD_INT 2
80930: PUSH
80931: LD_INT 3
80933: PUSH
80934: LD_INT 4
80936: PUSH
80937: LD_INT 5
80939: PUSH
80940: LD_INT 6
80942: PUSH
80943: LD_INT 7
80945: PUSH
80946: LD_INT 8
80948: PUSH
80949: LD_INT 9
80951: PUSH
80952: LD_INT 10
80954: PUSH
80955: LD_INT 11
80957: PUSH
80958: LD_INT 12
80960: PUSH
80961: LD_INT 13
80963: PUSH
80964: LD_INT 14
80966: PUSH
80967: LD_INT 15
80969: PUSH
80970: LD_INT 16
80972: PUSH
80973: LD_INT 17
80975: PUSH
80976: LD_INT 18
80978: PUSH
80979: LD_INT 19
80981: PUSH
80982: LD_INT 20
80984: PUSH
80985: LD_INT 21
80987: PUSH
80988: LD_INT 22
80990: PUSH
80991: LD_INT 23
80993: PUSH
80994: LD_INT 24
80996: PUSH
80997: LD_INT 25
80999: PUSH
81000: LD_INT 26
81002: PUSH
81003: LD_INT 27
81005: PUSH
81006: LD_INT 28
81008: PUSH
81009: LD_INT 29
81011: PUSH
81012: LD_INT 30
81014: PUSH
81015: LD_INT 31
81017: PUSH
81018: LD_INT 32
81020: PUSH
81021: LD_INT 33
81023: PUSH
81024: LD_INT 34
81026: PUSH
81027: LD_INT 35
81029: PUSH
81030: LD_INT 36
81032: PUSH
81033: EMPTY
81034: LIST
81035: LIST
81036: LIST
81037: LIST
81038: LIST
81039: LIST
81040: LIST
81041: LIST
81042: LIST
81043: LIST
81044: LIST
81045: LIST
81046: LIST
81047: LIST
81048: LIST
81049: LIST
81050: LIST
81051: LIST
81052: LIST
81053: LIST
81054: LIST
81055: LIST
81056: LIST
81057: LIST
81058: LIST
81059: LIST
81060: LIST
81061: LIST
81062: LIST
81063: LIST
81064: LIST
81065: LIST
81066: LIST
81067: LIST
81068: LIST
81069: LIST
81070: PUSH
81071: LD_INT 101
81073: PUSH
81074: LD_INT 102
81076: PUSH
81077: LD_INT 103
81079: PUSH
81080: LD_INT 104
81082: PUSH
81083: LD_INT 105
81085: PUSH
81086: LD_INT 106
81088: PUSH
81089: LD_INT 107
81091: PUSH
81092: LD_INT 108
81094: PUSH
81095: LD_INT 109
81097: PUSH
81098: LD_INT 110
81100: PUSH
81101: LD_INT 111
81103: PUSH
81104: LD_INT 112
81106: PUSH
81107: LD_INT 113
81109: PUSH
81110: LD_INT 114
81112: PUSH
81113: LD_INT 115
81115: PUSH
81116: EMPTY
81117: LIST
81118: LIST
81119: LIST
81120: LIST
81121: LIST
81122: LIST
81123: LIST
81124: LIST
81125: LIST
81126: LIST
81127: LIST
81128: LIST
81129: LIST
81130: LIST
81131: LIST
81132: PUSH
81133: EMPTY
81134: LIST
81135: LIST
81136: ST_TO_ADDR
// if result then
81137: LD_VAR 0 1
81141: IFFALSE 81430
// begin normal :=  ;
81143: LD_ADDR_VAR 0 3
81147: PUSH
81148: LD_STRING 
81150: ST_TO_ADDR
// hardcore :=  ;
81151: LD_ADDR_VAR 0 4
81155: PUSH
81156: LD_STRING 
81158: ST_TO_ADDR
// for i = 1 to normalCounter do
81159: LD_ADDR_VAR 0 5
81163: PUSH
81164: DOUBLE
81165: LD_INT 1
81167: DEC
81168: ST_TO_ADDR
81169: LD_EXP 104
81173: PUSH
81174: FOR_TO
81175: IFFALSE 81276
// begin tmp := 0 ;
81177: LD_ADDR_VAR 0 2
81181: PUSH
81182: LD_STRING 0
81184: ST_TO_ADDR
// if result [ 1 ] then
81185: LD_VAR 0 1
81189: PUSH
81190: LD_INT 1
81192: ARRAY
81193: IFFALSE 81258
// if result [ 1 ] [ 1 ] = i then
81195: LD_VAR 0 1
81199: PUSH
81200: LD_INT 1
81202: ARRAY
81203: PUSH
81204: LD_INT 1
81206: ARRAY
81207: PUSH
81208: LD_VAR 0 5
81212: EQUAL
81213: IFFALSE 81258
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
81215: LD_ADDR_VAR 0 1
81219: PUSH
81220: LD_VAR 0 1
81224: PPUSH
81225: LD_INT 1
81227: PPUSH
81228: LD_VAR 0 1
81232: PUSH
81233: LD_INT 1
81235: ARRAY
81236: PPUSH
81237: LD_INT 1
81239: PPUSH
81240: CALL_OW 3
81244: PPUSH
81245: CALL_OW 1
81249: ST_TO_ADDR
// tmp := 1 ;
81250: LD_ADDR_VAR 0 2
81254: PUSH
81255: LD_STRING 1
81257: ST_TO_ADDR
// end ; normal := normal & tmp ;
81258: LD_ADDR_VAR 0 3
81262: PUSH
81263: LD_VAR 0 3
81267: PUSH
81268: LD_VAR 0 2
81272: STR
81273: ST_TO_ADDR
// end ;
81274: GO 81174
81276: POP
81277: POP
// for i = 1 to hardcoreCounter do
81278: LD_ADDR_VAR 0 5
81282: PUSH
81283: DOUBLE
81284: LD_INT 1
81286: DEC
81287: ST_TO_ADDR
81288: LD_EXP 105
81292: PUSH
81293: FOR_TO
81294: IFFALSE 81399
// begin tmp := 0 ;
81296: LD_ADDR_VAR 0 2
81300: PUSH
81301: LD_STRING 0
81303: ST_TO_ADDR
// if result [ 2 ] then
81304: LD_VAR 0 1
81308: PUSH
81309: LD_INT 2
81311: ARRAY
81312: IFFALSE 81381
// if result [ 2 ] [ 1 ] = 100 + i then
81314: LD_VAR 0 1
81318: PUSH
81319: LD_INT 2
81321: ARRAY
81322: PUSH
81323: LD_INT 1
81325: ARRAY
81326: PUSH
81327: LD_INT 100
81329: PUSH
81330: LD_VAR 0 5
81334: PLUS
81335: EQUAL
81336: IFFALSE 81381
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
81338: LD_ADDR_VAR 0 1
81342: PUSH
81343: LD_VAR 0 1
81347: PPUSH
81348: LD_INT 2
81350: PPUSH
81351: LD_VAR 0 1
81355: PUSH
81356: LD_INT 2
81358: ARRAY
81359: PPUSH
81360: LD_INT 1
81362: PPUSH
81363: CALL_OW 3
81367: PPUSH
81368: CALL_OW 1
81372: ST_TO_ADDR
// tmp := 1 ;
81373: LD_ADDR_VAR 0 2
81377: PUSH
81378: LD_STRING 1
81380: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
81381: LD_ADDR_VAR 0 4
81385: PUSH
81386: LD_VAR 0 4
81390: PUSH
81391: LD_VAR 0 2
81395: STR
81396: ST_TO_ADDR
// end ;
81397: GO 81293
81399: POP
81400: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
81401: LD_STRING getStreamItemsFromMission("
81403: PUSH
81404: LD_VAR 0 3
81408: STR
81409: PUSH
81410: LD_STRING ","
81412: STR
81413: PUSH
81414: LD_VAR 0 4
81418: STR
81419: PUSH
81420: LD_STRING ")
81422: STR
81423: PPUSH
81424: CALL_OW 559
// end else
81428: GO 81437
// ToLua ( getStreamItemsFromMission("","") ) ;
81430: LD_STRING getStreamItemsFromMission("","")
81432: PPUSH
81433: CALL_OW 559
// end ;
81437: LD_VAR 0 1
81441: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
81442: LD_VAR 0 2
81446: PUSH
81447: LD_INT 100
81449: EQUAL
81450: IFFALSE 82399
// begin if not StreamModeActive then
81452: LD_EXP 103
81456: NOT
81457: IFFALSE 81467
// StreamModeActive := true ;
81459: LD_ADDR_EXP 103
81463: PUSH
81464: LD_INT 1
81466: ST_TO_ADDR
// if p3 = 0 then
81467: LD_VAR 0 3
81471: PUSH
81472: LD_INT 0
81474: EQUAL
81475: IFFALSE 81481
// InitStreamMode ;
81477: CALL 77520 0 0
// if p3 = 1 then
81481: LD_VAR 0 3
81485: PUSH
81486: LD_INT 1
81488: EQUAL
81489: IFFALSE 81499
// sRocket := true ;
81491: LD_ADDR_EXP 108
81495: PUSH
81496: LD_INT 1
81498: ST_TO_ADDR
// if p3 = 2 then
81499: LD_VAR 0 3
81503: PUSH
81504: LD_INT 2
81506: EQUAL
81507: IFFALSE 81517
// sSpeed := true ;
81509: LD_ADDR_EXP 107
81513: PUSH
81514: LD_INT 1
81516: ST_TO_ADDR
// if p3 = 3 then
81517: LD_VAR 0 3
81521: PUSH
81522: LD_INT 3
81524: EQUAL
81525: IFFALSE 81535
// sEngine := true ;
81527: LD_ADDR_EXP 109
81531: PUSH
81532: LD_INT 1
81534: ST_TO_ADDR
// if p3 = 4 then
81535: LD_VAR 0 3
81539: PUSH
81540: LD_INT 4
81542: EQUAL
81543: IFFALSE 81553
// sSpec := true ;
81545: LD_ADDR_EXP 106
81549: PUSH
81550: LD_INT 1
81552: ST_TO_ADDR
// if p3 = 5 then
81553: LD_VAR 0 3
81557: PUSH
81558: LD_INT 5
81560: EQUAL
81561: IFFALSE 81571
// sLevel := true ;
81563: LD_ADDR_EXP 110
81567: PUSH
81568: LD_INT 1
81570: ST_TO_ADDR
// if p3 = 6 then
81571: LD_VAR 0 3
81575: PUSH
81576: LD_INT 6
81578: EQUAL
81579: IFFALSE 81589
// sArmoury := true ;
81581: LD_ADDR_EXP 111
81585: PUSH
81586: LD_INT 1
81588: ST_TO_ADDR
// if p3 = 7 then
81589: LD_VAR 0 3
81593: PUSH
81594: LD_INT 7
81596: EQUAL
81597: IFFALSE 81607
// sRadar := true ;
81599: LD_ADDR_EXP 112
81603: PUSH
81604: LD_INT 1
81606: ST_TO_ADDR
// if p3 = 8 then
81607: LD_VAR 0 3
81611: PUSH
81612: LD_INT 8
81614: EQUAL
81615: IFFALSE 81625
// sBunker := true ;
81617: LD_ADDR_EXP 113
81621: PUSH
81622: LD_INT 1
81624: ST_TO_ADDR
// if p3 = 9 then
81625: LD_VAR 0 3
81629: PUSH
81630: LD_INT 9
81632: EQUAL
81633: IFFALSE 81643
// sHack := true ;
81635: LD_ADDR_EXP 114
81639: PUSH
81640: LD_INT 1
81642: ST_TO_ADDR
// if p3 = 10 then
81643: LD_VAR 0 3
81647: PUSH
81648: LD_INT 10
81650: EQUAL
81651: IFFALSE 81661
// sFire := true ;
81653: LD_ADDR_EXP 115
81657: PUSH
81658: LD_INT 1
81660: ST_TO_ADDR
// if p3 = 11 then
81661: LD_VAR 0 3
81665: PUSH
81666: LD_INT 11
81668: EQUAL
81669: IFFALSE 81679
// sRefresh := true ;
81671: LD_ADDR_EXP 116
81675: PUSH
81676: LD_INT 1
81678: ST_TO_ADDR
// if p3 = 12 then
81679: LD_VAR 0 3
81683: PUSH
81684: LD_INT 12
81686: EQUAL
81687: IFFALSE 81697
// sExp := true ;
81689: LD_ADDR_EXP 117
81693: PUSH
81694: LD_INT 1
81696: ST_TO_ADDR
// if p3 = 13 then
81697: LD_VAR 0 3
81701: PUSH
81702: LD_INT 13
81704: EQUAL
81705: IFFALSE 81715
// sDepot := true ;
81707: LD_ADDR_EXP 118
81711: PUSH
81712: LD_INT 1
81714: ST_TO_ADDR
// if p3 = 14 then
81715: LD_VAR 0 3
81719: PUSH
81720: LD_INT 14
81722: EQUAL
81723: IFFALSE 81733
// sFlag := true ;
81725: LD_ADDR_EXP 119
81729: PUSH
81730: LD_INT 1
81732: ST_TO_ADDR
// if p3 = 15 then
81733: LD_VAR 0 3
81737: PUSH
81738: LD_INT 15
81740: EQUAL
81741: IFFALSE 81751
// sKamikadze := true ;
81743: LD_ADDR_EXP 127
81747: PUSH
81748: LD_INT 1
81750: ST_TO_ADDR
// if p3 = 16 then
81751: LD_VAR 0 3
81755: PUSH
81756: LD_INT 16
81758: EQUAL
81759: IFFALSE 81769
// sTroll := true ;
81761: LD_ADDR_EXP 128
81765: PUSH
81766: LD_INT 1
81768: ST_TO_ADDR
// if p3 = 17 then
81769: LD_VAR 0 3
81773: PUSH
81774: LD_INT 17
81776: EQUAL
81777: IFFALSE 81787
// sSlow := true ;
81779: LD_ADDR_EXP 129
81783: PUSH
81784: LD_INT 1
81786: ST_TO_ADDR
// if p3 = 18 then
81787: LD_VAR 0 3
81791: PUSH
81792: LD_INT 18
81794: EQUAL
81795: IFFALSE 81805
// sLack := true ;
81797: LD_ADDR_EXP 130
81801: PUSH
81802: LD_INT 1
81804: ST_TO_ADDR
// if p3 = 19 then
81805: LD_VAR 0 3
81809: PUSH
81810: LD_INT 19
81812: EQUAL
81813: IFFALSE 81823
// sTank := true ;
81815: LD_ADDR_EXP 132
81819: PUSH
81820: LD_INT 1
81822: ST_TO_ADDR
// if p3 = 20 then
81823: LD_VAR 0 3
81827: PUSH
81828: LD_INT 20
81830: EQUAL
81831: IFFALSE 81841
// sRemote := true ;
81833: LD_ADDR_EXP 133
81837: PUSH
81838: LD_INT 1
81840: ST_TO_ADDR
// if p3 = 21 then
81841: LD_VAR 0 3
81845: PUSH
81846: LD_INT 21
81848: EQUAL
81849: IFFALSE 81859
// sPowell := true ;
81851: LD_ADDR_EXP 134
81855: PUSH
81856: LD_INT 1
81858: ST_TO_ADDR
// if p3 = 22 then
81859: LD_VAR 0 3
81863: PUSH
81864: LD_INT 22
81866: EQUAL
81867: IFFALSE 81877
// sTeleport := true ;
81869: LD_ADDR_EXP 137
81873: PUSH
81874: LD_INT 1
81876: ST_TO_ADDR
// if p3 = 23 then
81877: LD_VAR 0 3
81881: PUSH
81882: LD_INT 23
81884: EQUAL
81885: IFFALSE 81895
// sOilTower := true ;
81887: LD_ADDR_EXP 139
81891: PUSH
81892: LD_INT 1
81894: ST_TO_ADDR
// if p3 = 24 then
81895: LD_VAR 0 3
81899: PUSH
81900: LD_INT 24
81902: EQUAL
81903: IFFALSE 81913
// sShovel := true ;
81905: LD_ADDR_EXP 140
81909: PUSH
81910: LD_INT 1
81912: ST_TO_ADDR
// if p3 = 25 then
81913: LD_VAR 0 3
81917: PUSH
81918: LD_INT 25
81920: EQUAL
81921: IFFALSE 81931
// sSheik := true ;
81923: LD_ADDR_EXP 141
81927: PUSH
81928: LD_INT 1
81930: ST_TO_ADDR
// if p3 = 26 then
81931: LD_VAR 0 3
81935: PUSH
81936: LD_INT 26
81938: EQUAL
81939: IFFALSE 81949
// sEarthquake := true ;
81941: LD_ADDR_EXP 143
81945: PUSH
81946: LD_INT 1
81948: ST_TO_ADDR
// if p3 = 27 then
81949: LD_VAR 0 3
81953: PUSH
81954: LD_INT 27
81956: EQUAL
81957: IFFALSE 81967
// sAI := true ;
81959: LD_ADDR_EXP 144
81963: PUSH
81964: LD_INT 1
81966: ST_TO_ADDR
// if p3 = 28 then
81967: LD_VAR 0 3
81971: PUSH
81972: LD_INT 28
81974: EQUAL
81975: IFFALSE 81985
// sCargo := true ;
81977: LD_ADDR_EXP 147
81981: PUSH
81982: LD_INT 1
81984: ST_TO_ADDR
// if p3 = 29 then
81985: LD_VAR 0 3
81989: PUSH
81990: LD_INT 29
81992: EQUAL
81993: IFFALSE 82003
// sDLaser := true ;
81995: LD_ADDR_EXP 148
81999: PUSH
82000: LD_INT 1
82002: ST_TO_ADDR
// if p3 = 30 then
82003: LD_VAR 0 3
82007: PUSH
82008: LD_INT 30
82010: EQUAL
82011: IFFALSE 82021
// sExchange := true ;
82013: LD_ADDR_EXP 149
82017: PUSH
82018: LD_INT 1
82020: ST_TO_ADDR
// if p3 = 31 then
82021: LD_VAR 0 3
82025: PUSH
82026: LD_INT 31
82028: EQUAL
82029: IFFALSE 82039
// sFac := true ;
82031: LD_ADDR_EXP 150
82035: PUSH
82036: LD_INT 1
82038: ST_TO_ADDR
// if p3 = 32 then
82039: LD_VAR 0 3
82043: PUSH
82044: LD_INT 32
82046: EQUAL
82047: IFFALSE 82057
// sPower := true ;
82049: LD_ADDR_EXP 151
82053: PUSH
82054: LD_INT 1
82056: ST_TO_ADDR
// if p3 = 33 then
82057: LD_VAR 0 3
82061: PUSH
82062: LD_INT 33
82064: EQUAL
82065: IFFALSE 82075
// sRandom := true ;
82067: LD_ADDR_EXP 152
82071: PUSH
82072: LD_INT 1
82074: ST_TO_ADDR
// if p3 = 34 then
82075: LD_VAR 0 3
82079: PUSH
82080: LD_INT 34
82082: EQUAL
82083: IFFALSE 82093
// sShield := true ;
82085: LD_ADDR_EXP 153
82089: PUSH
82090: LD_INT 1
82092: ST_TO_ADDR
// if p3 = 35 then
82093: LD_VAR 0 3
82097: PUSH
82098: LD_INT 35
82100: EQUAL
82101: IFFALSE 82111
// sTime := true ;
82103: LD_ADDR_EXP 154
82107: PUSH
82108: LD_INT 1
82110: ST_TO_ADDR
// if p3 = 36 then
82111: LD_VAR 0 3
82115: PUSH
82116: LD_INT 36
82118: EQUAL
82119: IFFALSE 82129
// sTools := true ;
82121: LD_ADDR_EXP 155
82125: PUSH
82126: LD_INT 1
82128: ST_TO_ADDR
// if p3 = 101 then
82129: LD_VAR 0 3
82133: PUSH
82134: LD_INT 101
82136: EQUAL
82137: IFFALSE 82147
// sSold := true ;
82139: LD_ADDR_EXP 120
82143: PUSH
82144: LD_INT 1
82146: ST_TO_ADDR
// if p3 = 102 then
82147: LD_VAR 0 3
82151: PUSH
82152: LD_INT 102
82154: EQUAL
82155: IFFALSE 82165
// sDiff := true ;
82157: LD_ADDR_EXP 121
82161: PUSH
82162: LD_INT 1
82164: ST_TO_ADDR
// if p3 = 103 then
82165: LD_VAR 0 3
82169: PUSH
82170: LD_INT 103
82172: EQUAL
82173: IFFALSE 82183
// sFog := true ;
82175: LD_ADDR_EXP 124
82179: PUSH
82180: LD_INT 1
82182: ST_TO_ADDR
// if p3 = 104 then
82183: LD_VAR 0 3
82187: PUSH
82188: LD_INT 104
82190: EQUAL
82191: IFFALSE 82201
// sReset := true ;
82193: LD_ADDR_EXP 125
82197: PUSH
82198: LD_INT 1
82200: ST_TO_ADDR
// if p3 = 105 then
82201: LD_VAR 0 3
82205: PUSH
82206: LD_INT 105
82208: EQUAL
82209: IFFALSE 82219
// sSun := true ;
82211: LD_ADDR_EXP 126
82215: PUSH
82216: LD_INT 1
82218: ST_TO_ADDR
// if p3 = 106 then
82219: LD_VAR 0 3
82223: PUSH
82224: LD_INT 106
82226: EQUAL
82227: IFFALSE 82237
// sTiger := true ;
82229: LD_ADDR_EXP 122
82233: PUSH
82234: LD_INT 1
82236: ST_TO_ADDR
// if p3 = 107 then
82237: LD_VAR 0 3
82241: PUSH
82242: LD_INT 107
82244: EQUAL
82245: IFFALSE 82255
// sBomb := true ;
82247: LD_ADDR_EXP 123
82251: PUSH
82252: LD_INT 1
82254: ST_TO_ADDR
// if p3 = 108 then
82255: LD_VAR 0 3
82259: PUSH
82260: LD_INT 108
82262: EQUAL
82263: IFFALSE 82273
// sWound := true ;
82265: LD_ADDR_EXP 131
82269: PUSH
82270: LD_INT 1
82272: ST_TO_ADDR
// if p3 = 109 then
82273: LD_VAR 0 3
82277: PUSH
82278: LD_INT 109
82280: EQUAL
82281: IFFALSE 82291
// sBetray := true ;
82283: LD_ADDR_EXP 135
82287: PUSH
82288: LD_INT 1
82290: ST_TO_ADDR
// if p3 = 110 then
82291: LD_VAR 0 3
82295: PUSH
82296: LD_INT 110
82298: EQUAL
82299: IFFALSE 82309
// sContamin := true ;
82301: LD_ADDR_EXP 136
82305: PUSH
82306: LD_INT 1
82308: ST_TO_ADDR
// if p3 = 111 then
82309: LD_VAR 0 3
82313: PUSH
82314: LD_INT 111
82316: EQUAL
82317: IFFALSE 82327
// sOil := true ;
82319: LD_ADDR_EXP 138
82323: PUSH
82324: LD_INT 1
82326: ST_TO_ADDR
// if p3 = 112 then
82327: LD_VAR 0 3
82331: PUSH
82332: LD_INT 112
82334: EQUAL
82335: IFFALSE 82345
// sStu := true ;
82337: LD_ADDR_EXP 142
82341: PUSH
82342: LD_INT 1
82344: ST_TO_ADDR
// if p3 = 113 then
82345: LD_VAR 0 3
82349: PUSH
82350: LD_INT 113
82352: EQUAL
82353: IFFALSE 82363
// sBazooka := true ;
82355: LD_ADDR_EXP 145
82359: PUSH
82360: LD_INT 1
82362: ST_TO_ADDR
// if p3 = 114 then
82363: LD_VAR 0 3
82367: PUSH
82368: LD_INT 114
82370: EQUAL
82371: IFFALSE 82381
// sMortar := true ;
82373: LD_ADDR_EXP 146
82377: PUSH
82378: LD_INT 1
82380: ST_TO_ADDR
// if p3 = 115 then
82381: LD_VAR 0 3
82385: PUSH
82386: LD_INT 115
82388: EQUAL
82389: IFFALSE 82399
// sRanger := true ;
82391: LD_ADDR_EXP 156
82395: PUSH
82396: LD_INT 1
82398: ST_TO_ADDR
// end ; end ;
82399: PPOPN 6
82401: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
82402: LD_EXP 103
82406: PUSH
82407: LD_EXP 108
82411: AND
82412: IFFALSE 82536
82414: GO 82416
82416: DISABLE
82417: LD_INT 0
82419: PPUSH
82420: PPUSH
// begin enable ;
82421: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
82422: LD_ADDR_VAR 0 2
82426: PUSH
82427: LD_INT 22
82429: PUSH
82430: LD_OWVAR 2
82434: PUSH
82435: EMPTY
82436: LIST
82437: LIST
82438: PUSH
82439: LD_INT 2
82441: PUSH
82442: LD_INT 34
82444: PUSH
82445: LD_INT 7
82447: PUSH
82448: EMPTY
82449: LIST
82450: LIST
82451: PUSH
82452: LD_INT 34
82454: PUSH
82455: LD_INT 45
82457: PUSH
82458: EMPTY
82459: LIST
82460: LIST
82461: PUSH
82462: LD_INT 34
82464: PUSH
82465: LD_INT 28
82467: PUSH
82468: EMPTY
82469: LIST
82470: LIST
82471: PUSH
82472: LD_INT 34
82474: PUSH
82475: LD_INT 47
82477: PUSH
82478: EMPTY
82479: LIST
82480: LIST
82481: PUSH
82482: EMPTY
82483: LIST
82484: LIST
82485: LIST
82486: LIST
82487: LIST
82488: PUSH
82489: EMPTY
82490: LIST
82491: LIST
82492: PPUSH
82493: CALL_OW 69
82497: ST_TO_ADDR
// if not tmp then
82498: LD_VAR 0 2
82502: NOT
82503: IFFALSE 82507
// exit ;
82505: GO 82536
// for i in tmp do
82507: LD_ADDR_VAR 0 1
82511: PUSH
82512: LD_VAR 0 2
82516: PUSH
82517: FOR_IN
82518: IFFALSE 82534
// begin SetLives ( i , 0 ) ;
82520: LD_VAR 0 1
82524: PPUSH
82525: LD_INT 0
82527: PPUSH
82528: CALL_OW 234
// end ;
82532: GO 82517
82534: POP
82535: POP
// end ;
82536: PPOPN 2
82538: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
82539: LD_EXP 103
82543: PUSH
82544: LD_EXP 109
82548: AND
82549: IFFALSE 82633
82551: GO 82553
82553: DISABLE
82554: LD_INT 0
82556: PPUSH
82557: PPUSH
// begin enable ;
82558: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
82559: LD_ADDR_VAR 0 2
82563: PUSH
82564: LD_INT 22
82566: PUSH
82567: LD_OWVAR 2
82571: PUSH
82572: EMPTY
82573: LIST
82574: LIST
82575: PUSH
82576: LD_INT 32
82578: PUSH
82579: LD_INT 3
82581: PUSH
82582: EMPTY
82583: LIST
82584: LIST
82585: PUSH
82586: EMPTY
82587: LIST
82588: LIST
82589: PPUSH
82590: CALL_OW 69
82594: ST_TO_ADDR
// if not tmp then
82595: LD_VAR 0 2
82599: NOT
82600: IFFALSE 82604
// exit ;
82602: GO 82633
// for i in tmp do
82604: LD_ADDR_VAR 0 1
82608: PUSH
82609: LD_VAR 0 2
82613: PUSH
82614: FOR_IN
82615: IFFALSE 82631
// begin SetLives ( i , 0 ) ;
82617: LD_VAR 0 1
82621: PPUSH
82622: LD_INT 0
82624: PPUSH
82625: CALL_OW 234
// end ;
82629: GO 82614
82631: POP
82632: POP
// end ;
82633: PPOPN 2
82635: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
82636: LD_EXP 103
82640: PUSH
82641: LD_EXP 106
82645: AND
82646: IFFALSE 82739
82648: GO 82650
82650: DISABLE
82651: LD_INT 0
82653: PPUSH
// begin enable ;
82654: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
82655: LD_ADDR_VAR 0 1
82659: PUSH
82660: LD_INT 22
82662: PUSH
82663: LD_OWVAR 2
82667: PUSH
82668: EMPTY
82669: LIST
82670: LIST
82671: PUSH
82672: LD_INT 2
82674: PUSH
82675: LD_INT 25
82677: PUSH
82678: LD_INT 5
82680: PUSH
82681: EMPTY
82682: LIST
82683: LIST
82684: PUSH
82685: LD_INT 25
82687: PUSH
82688: LD_INT 9
82690: PUSH
82691: EMPTY
82692: LIST
82693: LIST
82694: PUSH
82695: LD_INT 25
82697: PUSH
82698: LD_INT 8
82700: PUSH
82701: EMPTY
82702: LIST
82703: LIST
82704: PUSH
82705: EMPTY
82706: LIST
82707: LIST
82708: LIST
82709: LIST
82710: PUSH
82711: EMPTY
82712: LIST
82713: LIST
82714: PPUSH
82715: CALL_OW 69
82719: PUSH
82720: FOR_IN
82721: IFFALSE 82737
// begin SetClass ( i , 1 ) ;
82723: LD_VAR 0 1
82727: PPUSH
82728: LD_INT 1
82730: PPUSH
82731: CALL_OW 336
// end ;
82735: GO 82720
82737: POP
82738: POP
// end ;
82739: PPOPN 1
82741: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
82742: LD_EXP 103
82746: PUSH
82747: LD_EXP 107
82751: AND
82752: PUSH
82753: LD_OWVAR 65
82757: PUSH
82758: LD_INT 7
82760: LESS
82761: AND
82762: IFFALSE 82776
82764: GO 82766
82766: DISABLE
// begin enable ;
82767: ENABLE
// game_speed := 7 ;
82768: LD_ADDR_OWVAR 65
82772: PUSH
82773: LD_INT 7
82775: ST_TO_ADDR
// end ;
82776: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
82777: LD_EXP 103
82781: PUSH
82782: LD_EXP 110
82786: AND
82787: IFFALSE 82989
82789: GO 82791
82791: DISABLE
82792: LD_INT 0
82794: PPUSH
82795: PPUSH
82796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
82797: LD_ADDR_VAR 0 3
82801: PUSH
82802: LD_INT 81
82804: PUSH
82805: LD_OWVAR 2
82809: PUSH
82810: EMPTY
82811: LIST
82812: LIST
82813: PUSH
82814: LD_INT 21
82816: PUSH
82817: LD_INT 1
82819: PUSH
82820: EMPTY
82821: LIST
82822: LIST
82823: PUSH
82824: EMPTY
82825: LIST
82826: LIST
82827: PPUSH
82828: CALL_OW 69
82832: ST_TO_ADDR
// if not tmp then
82833: LD_VAR 0 3
82837: NOT
82838: IFFALSE 82842
// exit ;
82840: GO 82989
// if tmp > 5 then
82842: LD_VAR 0 3
82846: PUSH
82847: LD_INT 5
82849: GREATER
82850: IFFALSE 82862
// k := 5 else
82852: LD_ADDR_VAR 0 2
82856: PUSH
82857: LD_INT 5
82859: ST_TO_ADDR
82860: GO 82872
// k := tmp ;
82862: LD_ADDR_VAR 0 2
82866: PUSH
82867: LD_VAR 0 3
82871: ST_TO_ADDR
// for i := 1 to k do
82872: LD_ADDR_VAR 0 1
82876: PUSH
82877: DOUBLE
82878: LD_INT 1
82880: DEC
82881: ST_TO_ADDR
82882: LD_VAR 0 2
82886: PUSH
82887: FOR_TO
82888: IFFALSE 82987
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
82890: LD_VAR 0 3
82894: PUSH
82895: LD_VAR 0 1
82899: ARRAY
82900: PPUSH
82901: LD_VAR 0 1
82905: PUSH
82906: LD_INT 4
82908: MOD
82909: PUSH
82910: LD_INT 1
82912: PLUS
82913: PPUSH
82914: CALL_OW 259
82918: PUSH
82919: LD_INT 10
82921: LESS
82922: IFFALSE 82985
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
82924: LD_VAR 0 3
82928: PUSH
82929: LD_VAR 0 1
82933: ARRAY
82934: PPUSH
82935: LD_VAR 0 1
82939: PUSH
82940: LD_INT 4
82942: MOD
82943: PUSH
82944: LD_INT 1
82946: PLUS
82947: PPUSH
82948: LD_VAR 0 3
82952: PUSH
82953: LD_VAR 0 1
82957: ARRAY
82958: PPUSH
82959: LD_VAR 0 1
82963: PUSH
82964: LD_INT 4
82966: MOD
82967: PUSH
82968: LD_INT 1
82970: PLUS
82971: PPUSH
82972: CALL_OW 259
82976: PUSH
82977: LD_INT 1
82979: PLUS
82980: PPUSH
82981: CALL_OW 237
82985: GO 82887
82987: POP
82988: POP
// end ;
82989: PPOPN 3
82991: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
82992: LD_EXP 103
82996: PUSH
82997: LD_EXP 111
83001: AND
83002: IFFALSE 83022
83004: GO 83006
83006: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
83007: LD_INT 4
83009: PPUSH
83010: LD_OWVAR 2
83014: PPUSH
83015: LD_INT 0
83017: PPUSH
83018: CALL_OW 324
83022: END
// every 0 0$1 trigger StreamModeActive and sShovel do
83023: LD_EXP 103
83027: PUSH
83028: LD_EXP 140
83032: AND
83033: IFFALSE 83053
83035: GO 83037
83037: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
83038: LD_INT 19
83040: PPUSH
83041: LD_OWVAR 2
83045: PPUSH
83046: LD_INT 0
83048: PPUSH
83049: CALL_OW 324
83053: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
83054: LD_EXP 103
83058: PUSH
83059: LD_EXP 112
83063: AND
83064: IFFALSE 83166
83066: GO 83068
83068: DISABLE
83069: LD_INT 0
83071: PPUSH
83072: PPUSH
// begin enable ;
83073: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
83074: LD_ADDR_VAR 0 2
83078: PUSH
83079: LD_INT 22
83081: PUSH
83082: LD_OWVAR 2
83086: PUSH
83087: EMPTY
83088: LIST
83089: LIST
83090: PUSH
83091: LD_INT 2
83093: PUSH
83094: LD_INT 34
83096: PUSH
83097: LD_INT 11
83099: PUSH
83100: EMPTY
83101: LIST
83102: LIST
83103: PUSH
83104: LD_INT 34
83106: PUSH
83107: LD_INT 30
83109: PUSH
83110: EMPTY
83111: LIST
83112: LIST
83113: PUSH
83114: EMPTY
83115: LIST
83116: LIST
83117: LIST
83118: PUSH
83119: EMPTY
83120: LIST
83121: LIST
83122: PPUSH
83123: CALL_OW 69
83127: ST_TO_ADDR
// if not tmp then
83128: LD_VAR 0 2
83132: NOT
83133: IFFALSE 83137
// exit ;
83135: GO 83166
// for i in tmp do
83137: LD_ADDR_VAR 0 1
83141: PUSH
83142: LD_VAR 0 2
83146: PUSH
83147: FOR_IN
83148: IFFALSE 83164
// begin SetLives ( i , 0 ) ;
83150: LD_VAR 0 1
83154: PPUSH
83155: LD_INT 0
83157: PPUSH
83158: CALL_OW 234
// end ;
83162: GO 83147
83164: POP
83165: POP
// end ;
83166: PPOPN 2
83168: END
// every 0 0$1 trigger StreamModeActive and sBunker do
83169: LD_EXP 103
83173: PUSH
83174: LD_EXP 113
83178: AND
83179: IFFALSE 83199
83181: GO 83183
83183: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
83184: LD_INT 32
83186: PPUSH
83187: LD_OWVAR 2
83191: PPUSH
83192: LD_INT 0
83194: PPUSH
83195: CALL_OW 324
83199: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
83200: LD_EXP 103
83204: PUSH
83205: LD_EXP 114
83209: AND
83210: IFFALSE 83391
83212: GO 83214
83214: DISABLE
83215: LD_INT 0
83217: PPUSH
83218: PPUSH
83219: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
83220: LD_ADDR_VAR 0 2
83224: PUSH
83225: LD_INT 22
83227: PUSH
83228: LD_OWVAR 2
83232: PUSH
83233: EMPTY
83234: LIST
83235: LIST
83236: PUSH
83237: LD_INT 33
83239: PUSH
83240: LD_INT 3
83242: PUSH
83243: EMPTY
83244: LIST
83245: LIST
83246: PUSH
83247: EMPTY
83248: LIST
83249: LIST
83250: PPUSH
83251: CALL_OW 69
83255: ST_TO_ADDR
// if not tmp then
83256: LD_VAR 0 2
83260: NOT
83261: IFFALSE 83265
// exit ;
83263: GO 83391
// side := 0 ;
83265: LD_ADDR_VAR 0 3
83269: PUSH
83270: LD_INT 0
83272: ST_TO_ADDR
// for i := 1 to 8 do
83273: LD_ADDR_VAR 0 1
83277: PUSH
83278: DOUBLE
83279: LD_INT 1
83281: DEC
83282: ST_TO_ADDR
83283: LD_INT 8
83285: PUSH
83286: FOR_TO
83287: IFFALSE 83335
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
83289: LD_OWVAR 2
83293: PUSH
83294: LD_VAR 0 1
83298: NONEQUAL
83299: PUSH
83300: LD_OWVAR 2
83304: PPUSH
83305: LD_VAR 0 1
83309: PPUSH
83310: CALL_OW 81
83314: PUSH
83315: LD_INT 2
83317: EQUAL
83318: AND
83319: IFFALSE 83333
// begin side := i ;
83321: LD_ADDR_VAR 0 3
83325: PUSH
83326: LD_VAR 0 1
83330: ST_TO_ADDR
// break ;
83331: GO 83335
// end ;
83333: GO 83286
83335: POP
83336: POP
// if not side then
83337: LD_VAR 0 3
83341: NOT
83342: IFFALSE 83346
// exit ;
83344: GO 83391
// for i := 1 to tmp do
83346: LD_ADDR_VAR 0 1
83350: PUSH
83351: DOUBLE
83352: LD_INT 1
83354: DEC
83355: ST_TO_ADDR
83356: LD_VAR 0 2
83360: PUSH
83361: FOR_TO
83362: IFFALSE 83389
// if Prob ( 60 ) then
83364: LD_INT 60
83366: PPUSH
83367: CALL_OW 13
83371: IFFALSE 83387
// SetSide ( i , side ) ;
83373: LD_VAR 0 1
83377: PPUSH
83378: LD_VAR 0 3
83382: PPUSH
83383: CALL_OW 235
83387: GO 83361
83389: POP
83390: POP
// end ;
83391: PPOPN 3
83393: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
83394: LD_EXP 103
83398: PUSH
83399: LD_EXP 116
83403: AND
83404: IFFALSE 83523
83406: GO 83408
83408: DISABLE
83409: LD_INT 0
83411: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
83412: LD_ADDR_VAR 0 1
83416: PUSH
83417: LD_INT 22
83419: PUSH
83420: LD_OWVAR 2
83424: PUSH
83425: EMPTY
83426: LIST
83427: LIST
83428: PUSH
83429: LD_INT 21
83431: PUSH
83432: LD_INT 1
83434: PUSH
83435: EMPTY
83436: LIST
83437: LIST
83438: PUSH
83439: LD_INT 3
83441: PUSH
83442: LD_INT 23
83444: PUSH
83445: LD_INT 0
83447: PUSH
83448: EMPTY
83449: LIST
83450: LIST
83451: PUSH
83452: EMPTY
83453: LIST
83454: LIST
83455: PUSH
83456: EMPTY
83457: LIST
83458: LIST
83459: LIST
83460: PPUSH
83461: CALL_OW 69
83465: PUSH
83466: FOR_IN
83467: IFFALSE 83521
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
83469: LD_VAR 0 1
83473: PPUSH
83474: CALL_OW 257
83478: PUSH
83479: LD_INT 1
83481: PUSH
83482: LD_INT 2
83484: PUSH
83485: LD_INT 3
83487: PUSH
83488: LD_INT 4
83490: PUSH
83491: EMPTY
83492: LIST
83493: LIST
83494: LIST
83495: LIST
83496: IN
83497: IFFALSE 83519
// SetClass ( un , rand ( 1 , 4 ) ) ;
83499: LD_VAR 0 1
83503: PPUSH
83504: LD_INT 1
83506: PPUSH
83507: LD_INT 4
83509: PPUSH
83510: CALL_OW 12
83514: PPUSH
83515: CALL_OW 336
83519: GO 83466
83521: POP
83522: POP
// end ;
83523: PPOPN 1
83525: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
83526: LD_EXP 103
83530: PUSH
83531: LD_EXP 115
83535: AND
83536: IFFALSE 83615
83538: GO 83540
83540: DISABLE
83541: LD_INT 0
83543: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
83544: LD_ADDR_VAR 0 1
83548: PUSH
83549: LD_INT 22
83551: PUSH
83552: LD_OWVAR 2
83556: PUSH
83557: EMPTY
83558: LIST
83559: LIST
83560: PUSH
83561: LD_INT 21
83563: PUSH
83564: LD_INT 3
83566: PUSH
83567: EMPTY
83568: LIST
83569: LIST
83570: PUSH
83571: EMPTY
83572: LIST
83573: LIST
83574: PPUSH
83575: CALL_OW 69
83579: ST_TO_ADDR
// if not tmp then
83580: LD_VAR 0 1
83584: NOT
83585: IFFALSE 83589
// exit ;
83587: GO 83615
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
83589: LD_VAR 0 1
83593: PUSH
83594: LD_INT 1
83596: PPUSH
83597: LD_VAR 0 1
83601: PPUSH
83602: CALL_OW 12
83606: ARRAY
83607: PPUSH
83608: LD_INT 100
83610: PPUSH
83611: CALL_OW 234
// end ;
83615: PPOPN 1
83617: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
83618: LD_EXP 103
83622: PUSH
83623: LD_EXP 117
83627: AND
83628: IFFALSE 83726
83630: GO 83632
83632: DISABLE
83633: LD_INT 0
83635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
83636: LD_ADDR_VAR 0 1
83640: PUSH
83641: LD_INT 22
83643: PUSH
83644: LD_OWVAR 2
83648: PUSH
83649: EMPTY
83650: LIST
83651: LIST
83652: PUSH
83653: LD_INT 21
83655: PUSH
83656: LD_INT 1
83658: PUSH
83659: EMPTY
83660: LIST
83661: LIST
83662: PUSH
83663: EMPTY
83664: LIST
83665: LIST
83666: PPUSH
83667: CALL_OW 69
83671: ST_TO_ADDR
// if not tmp then
83672: LD_VAR 0 1
83676: NOT
83677: IFFALSE 83681
// exit ;
83679: GO 83726
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
83681: LD_VAR 0 1
83685: PUSH
83686: LD_INT 1
83688: PPUSH
83689: LD_VAR 0 1
83693: PPUSH
83694: CALL_OW 12
83698: ARRAY
83699: PPUSH
83700: LD_INT 1
83702: PPUSH
83703: LD_INT 4
83705: PPUSH
83706: CALL_OW 12
83710: PPUSH
83711: LD_INT 3000
83713: PPUSH
83714: LD_INT 9000
83716: PPUSH
83717: CALL_OW 12
83721: PPUSH
83722: CALL_OW 492
// end ;
83726: PPOPN 1
83728: END
// every 0 0$1 trigger StreamModeActive and sDepot do
83729: LD_EXP 103
83733: PUSH
83734: LD_EXP 118
83738: AND
83739: IFFALSE 83759
83741: GO 83743
83743: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
83744: LD_INT 1
83746: PPUSH
83747: LD_OWVAR 2
83751: PPUSH
83752: LD_INT 0
83754: PPUSH
83755: CALL_OW 324
83759: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
83760: LD_EXP 103
83764: PUSH
83765: LD_EXP 119
83769: AND
83770: IFFALSE 83853
83772: GO 83774
83774: DISABLE
83775: LD_INT 0
83777: PPUSH
83778: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
83779: LD_ADDR_VAR 0 2
83783: PUSH
83784: LD_INT 22
83786: PUSH
83787: LD_OWVAR 2
83791: PUSH
83792: EMPTY
83793: LIST
83794: LIST
83795: PUSH
83796: LD_INT 21
83798: PUSH
83799: LD_INT 3
83801: PUSH
83802: EMPTY
83803: LIST
83804: LIST
83805: PUSH
83806: EMPTY
83807: LIST
83808: LIST
83809: PPUSH
83810: CALL_OW 69
83814: ST_TO_ADDR
// if not tmp then
83815: LD_VAR 0 2
83819: NOT
83820: IFFALSE 83824
// exit ;
83822: GO 83853
// for i in tmp do
83824: LD_ADDR_VAR 0 1
83828: PUSH
83829: LD_VAR 0 2
83833: PUSH
83834: FOR_IN
83835: IFFALSE 83851
// SetBLevel ( i , 10 ) ;
83837: LD_VAR 0 1
83841: PPUSH
83842: LD_INT 10
83844: PPUSH
83845: CALL_OW 241
83849: GO 83834
83851: POP
83852: POP
// end ;
83853: PPOPN 2
83855: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
83856: LD_EXP 103
83860: PUSH
83861: LD_EXP 120
83865: AND
83866: IFFALSE 83977
83868: GO 83870
83870: DISABLE
83871: LD_INT 0
83873: PPUSH
83874: PPUSH
83875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
83876: LD_ADDR_VAR 0 3
83880: PUSH
83881: LD_INT 22
83883: PUSH
83884: LD_OWVAR 2
83888: PUSH
83889: EMPTY
83890: LIST
83891: LIST
83892: PUSH
83893: LD_INT 25
83895: PUSH
83896: LD_INT 1
83898: PUSH
83899: EMPTY
83900: LIST
83901: LIST
83902: PUSH
83903: EMPTY
83904: LIST
83905: LIST
83906: PPUSH
83907: CALL_OW 69
83911: ST_TO_ADDR
// if not tmp then
83912: LD_VAR 0 3
83916: NOT
83917: IFFALSE 83921
// exit ;
83919: GO 83977
// un := tmp [ rand ( 1 , tmp ) ] ;
83921: LD_ADDR_VAR 0 2
83925: PUSH
83926: LD_VAR 0 3
83930: PUSH
83931: LD_INT 1
83933: PPUSH
83934: LD_VAR 0 3
83938: PPUSH
83939: CALL_OW 12
83943: ARRAY
83944: ST_TO_ADDR
// if Crawls ( un ) then
83945: LD_VAR 0 2
83949: PPUSH
83950: CALL_OW 318
83954: IFFALSE 83965
// ComWalk ( un ) ;
83956: LD_VAR 0 2
83960: PPUSH
83961: CALL_OW 138
// SetClass ( un , class_sniper ) ;
83965: LD_VAR 0 2
83969: PPUSH
83970: LD_INT 5
83972: PPUSH
83973: CALL_OW 336
// end ;
83977: PPOPN 3
83979: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
83980: LD_EXP 103
83984: PUSH
83985: LD_EXP 121
83989: AND
83990: PUSH
83991: LD_OWVAR 67
83995: PUSH
83996: LD_INT 3
83998: LESS
83999: AND
84000: IFFALSE 84019
84002: GO 84004
84004: DISABLE
// Difficulty := Difficulty + 1 ;
84005: LD_ADDR_OWVAR 67
84009: PUSH
84010: LD_OWVAR 67
84014: PUSH
84015: LD_INT 1
84017: PLUS
84018: ST_TO_ADDR
84019: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
84020: LD_EXP 103
84024: PUSH
84025: LD_EXP 122
84029: AND
84030: IFFALSE 84133
84032: GO 84034
84034: DISABLE
84035: LD_INT 0
84037: PPUSH
// begin for i := 1 to 5 do
84038: LD_ADDR_VAR 0 1
84042: PUSH
84043: DOUBLE
84044: LD_INT 1
84046: DEC
84047: ST_TO_ADDR
84048: LD_INT 5
84050: PUSH
84051: FOR_TO
84052: IFFALSE 84131
// begin uc_nation := nation_nature ;
84054: LD_ADDR_OWVAR 21
84058: PUSH
84059: LD_INT 0
84061: ST_TO_ADDR
// uc_side := 0 ;
84062: LD_ADDR_OWVAR 20
84066: PUSH
84067: LD_INT 0
84069: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
84070: LD_ADDR_OWVAR 29
84074: PUSH
84075: LD_INT 12
84077: PUSH
84078: LD_INT 12
84080: PUSH
84081: EMPTY
84082: LIST
84083: LIST
84084: ST_TO_ADDR
// hc_agressivity := 20 ;
84085: LD_ADDR_OWVAR 35
84089: PUSH
84090: LD_INT 20
84092: ST_TO_ADDR
// hc_class := class_tiger ;
84093: LD_ADDR_OWVAR 28
84097: PUSH
84098: LD_INT 14
84100: ST_TO_ADDR
// hc_gallery :=  ;
84101: LD_ADDR_OWVAR 33
84105: PUSH
84106: LD_STRING 
84108: ST_TO_ADDR
// hc_name :=  ;
84109: LD_ADDR_OWVAR 26
84113: PUSH
84114: LD_STRING 
84116: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
84117: CALL_OW 44
84121: PPUSH
84122: LD_INT 0
84124: PPUSH
84125: CALL_OW 51
// end ;
84129: GO 84051
84131: POP
84132: POP
// end ;
84133: PPOPN 1
84135: END
// every 0 0$1 trigger StreamModeActive and sBomb do
84136: LD_EXP 103
84140: PUSH
84141: LD_EXP 123
84145: AND
84146: IFFALSE 84155
84148: GO 84150
84150: DISABLE
// StreamSibBomb ;
84151: CALL 84156 0 0
84155: END
// export function StreamSibBomb ; var i , x , y ; begin
84156: LD_INT 0
84158: PPUSH
84159: PPUSH
84160: PPUSH
84161: PPUSH
// result := false ;
84162: LD_ADDR_VAR 0 1
84166: PUSH
84167: LD_INT 0
84169: ST_TO_ADDR
// for i := 1 to 16 do
84170: LD_ADDR_VAR 0 2
84174: PUSH
84175: DOUBLE
84176: LD_INT 1
84178: DEC
84179: ST_TO_ADDR
84180: LD_INT 16
84182: PUSH
84183: FOR_TO
84184: IFFALSE 84383
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
84186: LD_ADDR_VAR 0 3
84190: PUSH
84191: LD_INT 10
84193: PUSH
84194: LD_INT 20
84196: PUSH
84197: LD_INT 30
84199: PUSH
84200: LD_INT 40
84202: PUSH
84203: LD_INT 50
84205: PUSH
84206: LD_INT 60
84208: PUSH
84209: LD_INT 70
84211: PUSH
84212: LD_INT 80
84214: PUSH
84215: LD_INT 90
84217: PUSH
84218: LD_INT 100
84220: PUSH
84221: LD_INT 110
84223: PUSH
84224: LD_INT 120
84226: PUSH
84227: LD_INT 130
84229: PUSH
84230: LD_INT 140
84232: PUSH
84233: LD_INT 150
84235: PUSH
84236: EMPTY
84237: LIST
84238: LIST
84239: LIST
84240: LIST
84241: LIST
84242: LIST
84243: LIST
84244: LIST
84245: LIST
84246: LIST
84247: LIST
84248: LIST
84249: LIST
84250: LIST
84251: LIST
84252: PUSH
84253: LD_INT 1
84255: PPUSH
84256: LD_INT 15
84258: PPUSH
84259: CALL_OW 12
84263: ARRAY
84264: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
84265: LD_ADDR_VAR 0 4
84269: PUSH
84270: LD_INT 10
84272: PUSH
84273: LD_INT 20
84275: PUSH
84276: LD_INT 30
84278: PUSH
84279: LD_INT 40
84281: PUSH
84282: LD_INT 50
84284: PUSH
84285: LD_INT 60
84287: PUSH
84288: LD_INT 70
84290: PUSH
84291: LD_INT 80
84293: PUSH
84294: LD_INT 90
84296: PUSH
84297: LD_INT 100
84299: PUSH
84300: LD_INT 110
84302: PUSH
84303: LD_INT 120
84305: PUSH
84306: LD_INT 130
84308: PUSH
84309: LD_INT 140
84311: PUSH
84312: LD_INT 150
84314: PUSH
84315: EMPTY
84316: LIST
84317: LIST
84318: LIST
84319: LIST
84320: LIST
84321: LIST
84322: LIST
84323: LIST
84324: LIST
84325: LIST
84326: LIST
84327: LIST
84328: LIST
84329: LIST
84330: LIST
84331: PUSH
84332: LD_INT 1
84334: PPUSH
84335: LD_INT 15
84337: PPUSH
84338: CALL_OW 12
84342: ARRAY
84343: ST_TO_ADDR
// if ValidHex ( x , y ) then
84344: LD_VAR 0 3
84348: PPUSH
84349: LD_VAR 0 4
84353: PPUSH
84354: CALL_OW 488
84358: IFFALSE 84381
// begin result := [ x , y ] ;
84360: LD_ADDR_VAR 0 1
84364: PUSH
84365: LD_VAR 0 3
84369: PUSH
84370: LD_VAR 0 4
84374: PUSH
84375: EMPTY
84376: LIST
84377: LIST
84378: ST_TO_ADDR
// break ;
84379: GO 84383
// end ; end ;
84381: GO 84183
84383: POP
84384: POP
// if result then
84385: LD_VAR 0 1
84389: IFFALSE 84449
// begin ToLua ( playSibBomb() ) ;
84391: LD_STRING playSibBomb()
84393: PPUSH
84394: CALL_OW 559
// wait ( 0 0$14 ) ;
84398: LD_INT 490
84400: PPUSH
84401: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
84405: LD_VAR 0 1
84409: PUSH
84410: LD_INT 1
84412: ARRAY
84413: PPUSH
84414: LD_VAR 0 1
84418: PUSH
84419: LD_INT 2
84421: ARRAY
84422: PPUSH
84423: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
84427: LD_VAR 0 1
84431: PUSH
84432: LD_INT 1
84434: ARRAY
84435: PPUSH
84436: LD_VAR 0 1
84440: PUSH
84441: LD_INT 2
84443: ARRAY
84444: PPUSH
84445: CALL_OW 429
// end ; end ;
84449: LD_VAR 0 1
84453: RET
// every 0 0$1 trigger StreamModeActive and sReset do
84454: LD_EXP 103
84458: PUSH
84459: LD_EXP 125
84463: AND
84464: IFFALSE 84476
84466: GO 84468
84468: DISABLE
// YouLost (  ) ;
84469: LD_STRING 
84471: PPUSH
84472: CALL_OW 104
84476: END
// every 0 0$1 trigger StreamModeActive and sFog do
84477: LD_EXP 103
84481: PUSH
84482: LD_EXP 124
84486: AND
84487: IFFALSE 84501
84489: GO 84491
84491: DISABLE
// FogOff ( your_side ) ;
84492: LD_OWVAR 2
84496: PPUSH
84497: CALL_OW 344
84501: END
// every 0 0$1 trigger StreamModeActive and sSun do
84502: LD_EXP 103
84506: PUSH
84507: LD_EXP 126
84511: AND
84512: IFFALSE 84540
84514: GO 84516
84516: DISABLE
// begin solar_recharge_percent := 0 ;
84517: LD_ADDR_OWVAR 79
84521: PUSH
84522: LD_INT 0
84524: ST_TO_ADDR
// wait ( 5 5$00 ) ;
84525: LD_INT 10500
84527: PPUSH
84528: CALL_OW 67
// solar_recharge_percent := 100 ;
84532: LD_ADDR_OWVAR 79
84536: PUSH
84537: LD_INT 100
84539: ST_TO_ADDR
// end ;
84540: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
84541: LD_EXP 103
84545: PUSH
84546: LD_EXP 127
84550: AND
84551: IFFALSE 84790
84553: GO 84555
84555: DISABLE
84556: LD_INT 0
84558: PPUSH
84559: PPUSH
84560: PPUSH
// begin tmp := [ ] ;
84561: LD_ADDR_VAR 0 3
84565: PUSH
84566: EMPTY
84567: ST_TO_ADDR
// for i := 1 to 6 do
84568: LD_ADDR_VAR 0 1
84572: PUSH
84573: DOUBLE
84574: LD_INT 1
84576: DEC
84577: ST_TO_ADDR
84578: LD_INT 6
84580: PUSH
84581: FOR_TO
84582: IFFALSE 84687
// begin uc_nation := nation_nature ;
84584: LD_ADDR_OWVAR 21
84588: PUSH
84589: LD_INT 0
84591: ST_TO_ADDR
// uc_side := 0 ;
84592: LD_ADDR_OWVAR 20
84596: PUSH
84597: LD_INT 0
84599: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
84600: LD_ADDR_OWVAR 29
84604: PUSH
84605: LD_INT 12
84607: PUSH
84608: LD_INT 12
84610: PUSH
84611: EMPTY
84612: LIST
84613: LIST
84614: ST_TO_ADDR
// hc_agressivity := 20 ;
84615: LD_ADDR_OWVAR 35
84619: PUSH
84620: LD_INT 20
84622: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
84623: LD_ADDR_OWVAR 28
84627: PUSH
84628: LD_INT 17
84630: ST_TO_ADDR
// hc_gallery :=  ;
84631: LD_ADDR_OWVAR 33
84635: PUSH
84636: LD_STRING 
84638: ST_TO_ADDR
// hc_name :=  ;
84639: LD_ADDR_OWVAR 26
84643: PUSH
84644: LD_STRING 
84646: ST_TO_ADDR
// un := CreateHuman ;
84647: LD_ADDR_VAR 0 2
84651: PUSH
84652: CALL_OW 44
84656: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
84657: LD_VAR 0 2
84661: PPUSH
84662: LD_INT 1
84664: PPUSH
84665: CALL_OW 51
// tmp := tmp ^ un ;
84669: LD_ADDR_VAR 0 3
84673: PUSH
84674: LD_VAR 0 3
84678: PUSH
84679: LD_VAR 0 2
84683: ADD
84684: ST_TO_ADDR
// end ;
84685: GO 84581
84687: POP
84688: POP
// repeat wait ( 0 0$1 ) ;
84689: LD_INT 35
84691: PPUSH
84692: CALL_OW 67
// for un in tmp do
84696: LD_ADDR_VAR 0 2
84700: PUSH
84701: LD_VAR 0 3
84705: PUSH
84706: FOR_IN
84707: IFFALSE 84781
// begin if IsDead ( un ) then
84709: LD_VAR 0 2
84713: PPUSH
84714: CALL_OW 301
84718: IFFALSE 84738
// begin tmp := tmp diff un ;
84720: LD_ADDR_VAR 0 3
84724: PUSH
84725: LD_VAR 0 3
84729: PUSH
84730: LD_VAR 0 2
84734: DIFF
84735: ST_TO_ADDR
// continue ;
84736: GO 84706
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
84738: LD_VAR 0 2
84742: PPUSH
84743: LD_INT 3
84745: PUSH
84746: LD_INT 22
84748: PUSH
84749: LD_INT 0
84751: PUSH
84752: EMPTY
84753: LIST
84754: LIST
84755: PUSH
84756: EMPTY
84757: LIST
84758: LIST
84759: PPUSH
84760: CALL_OW 69
84764: PPUSH
84765: LD_VAR 0 2
84769: PPUSH
84770: CALL_OW 74
84774: PPUSH
84775: CALL_OW 115
// end ;
84779: GO 84706
84781: POP
84782: POP
// until not tmp ;
84783: LD_VAR 0 3
84787: NOT
84788: IFFALSE 84689
// end ;
84790: PPOPN 3
84792: END
// every 0 0$1 trigger StreamModeActive and sTroll do
84793: LD_EXP 103
84797: PUSH
84798: LD_EXP 128
84802: AND
84803: IFFALSE 84857
84805: GO 84807
84807: DISABLE
// begin ToLua ( displayTroll(); ) ;
84808: LD_STRING displayTroll();
84810: PPUSH
84811: CALL_OW 559
// wait ( 3 3$00 ) ;
84815: LD_INT 6300
84817: PPUSH
84818: CALL_OW 67
// ToLua ( hideTroll(); ) ;
84822: LD_STRING hideTroll();
84824: PPUSH
84825: CALL_OW 559
// wait ( 1 1$00 ) ;
84829: LD_INT 2100
84831: PPUSH
84832: CALL_OW 67
// ToLua ( displayTroll(); ) ;
84836: LD_STRING displayTroll();
84838: PPUSH
84839: CALL_OW 559
// wait ( 1 1$00 ) ;
84843: LD_INT 2100
84845: PPUSH
84846: CALL_OW 67
// ToLua ( hideTroll(); ) ;
84850: LD_STRING hideTroll();
84852: PPUSH
84853: CALL_OW 559
// end ;
84857: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
84858: LD_EXP 103
84862: PUSH
84863: LD_EXP 129
84867: AND
84868: IFFALSE 84931
84870: GO 84872
84872: DISABLE
84873: LD_INT 0
84875: PPUSH
// begin p := 0 ;
84876: LD_ADDR_VAR 0 1
84880: PUSH
84881: LD_INT 0
84883: ST_TO_ADDR
// repeat game_speed := 1 ;
84884: LD_ADDR_OWVAR 65
84888: PUSH
84889: LD_INT 1
84891: ST_TO_ADDR
// wait ( 0 0$1 ) ;
84892: LD_INT 35
84894: PPUSH
84895: CALL_OW 67
// p := p + 1 ;
84899: LD_ADDR_VAR 0 1
84903: PUSH
84904: LD_VAR 0 1
84908: PUSH
84909: LD_INT 1
84911: PLUS
84912: ST_TO_ADDR
// until p >= 60 ;
84913: LD_VAR 0 1
84917: PUSH
84918: LD_INT 60
84920: GREATEREQUAL
84921: IFFALSE 84884
// game_speed := 4 ;
84923: LD_ADDR_OWVAR 65
84927: PUSH
84928: LD_INT 4
84930: ST_TO_ADDR
// end ;
84931: PPOPN 1
84933: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
84934: LD_EXP 103
84938: PUSH
84939: LD_EXP 130
84943: AND
84944: IFFALSE 85090
84946: GO 84948
84948: DISABLE
84949: LD_INT 0
84951: PPUSH
84952: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
84953: LD_ADDR_VAR 0 1
84957: PUSH
84958: LD_INT 22
84960: PUSH
84961: LD_OWVAR 2
84965: PUSH
84966: EMPTY
84967: LIST
84968: LIST
84969: PUSH
84970: LD_INT 2
84972: PUSH
84973: LD_INT 30
84975: PUSH
84976: LD_INT 0
84978: PUSH
84979: EMPTY
84980: LIST
84981: LIST
84982: PUSH
84983: LD_INT 30
84985: PUSH
84986: LD_INT 1
84988: PUSH
84989: EMPTY
84990: LIST
84991: LIST
84992: PUSH
84993: EMPTY
84994: LIST
84995: LIST
84996: LIST
84997: PUSH
84998: EMPTY
84999: LIST
85000: LIST
85001: PPUSH
85002: CALL_OW 69
85006: ST_TO_ADDR
// if not depot then
85007: LD_VAR 0 1
85011: NOT
85012: IFFALSE 85016
// exit ;
85014: GO 85090
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
85016: LD_ADDR_VAR 0 2
85020: PUSH
85021: LD_VAR 0 1
85025: PUSH
85026: LD_INT 1
85028: PPUSH
85029: LD_VAR 0 1
85033: PPUSH
85034: CALL_OW 12
85038: ARRAY
85039: PPUSH
85040: CALL_OW 274
85044: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
85045: LD_VAR 0 2
85049: PPUSH
85050: LD_INT 1
85052: PPUSH
85053: LD_INT 0
85055: PPUSH
85056: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
85060: LD_VAR 0 2
85064: PPUSH
85065: LD_INT 2
85067: PPUSH
85068: LD_INT 0
85070: PPUSH
85071: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
85075: LD_VAR 0 2
85079: PPUSH
85080: LD_INT 3
85082: PPUSH
85083: LD_INT 0
85085: PPUSH
85086: CALL_OW 277
// end ;
85090: PPOPN 2
85092: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
85093: LD_EXP 103
85097: PUSH
85098: LD_EXP 131
85102: AND
85103: IFFALSE 85200
85105: GO 85107
85107: DISABLE
85108: LD_INT 0
85110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
85111: LD_ADDR_VAR 0 1
85115: PUSH
85116: LD_INT 22
85118: PUSH
85119: LD_OWVAR 2
85123: PUSH
85124: EMPTY
85125: LIST
85126: LIST
85127: PUSH
85128: LD_INT 21
85130: PUSH
85131: LD_INT 1
85133: PUSH
85134: EMPTY
85135: LIST
85136: LIST
85137: PUSH
85138: LD_INT 3
85140: PUSH
85141: LD_INT 23
85143: PUSH
85144: LD_INT 0
85146: PUSH
85147: EMPTY
85148: LIST
85149: LIST
85150: PUSH
85151: EMPTY
85152: LIST
85153: LIST
85154: PUSH
85155: EMPTY
85156: LIST
85157: LIST
85158: LIST
85159: PPUSH
85160: CALL_OW 69
85164: ST_TO_ADDR
// if not tmp then
85165: LD_VAR 0 1
85169: NOT
85170: IFFALSE 85174
// exit ;
85172: GO 85200
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
85174: LD_VAR 0 1
85178: PUSH
85179: LD_INT 1
85181: PPUSH
85182: LD_VAR 0 1
85186: PPUSH
85187: CALL_OW 12
85191: ARRAY
85192: PPUSH
85193: LD_INT 200
85195: PPUSH
85196: CALL_OW 234
// end ;
85200: PPOPN 1
85202: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
85203: LD_EXP 103
85207: PUSH
85208: LD_EXP 132
85212: AND
85213: IFFALSE 85292
85215: GO 85217
85217: DISABLE
85218: LD_INT 0
85220: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
85221: LD_ADDR_VAR 0 1
85225: PUSH
85226: LD_INT 22
85228: PUSH
85229: LD_OWVAR 2
85233: PUSH
85234: EMPTY
85235: LIST
85236: LIST
85237: PUSH
85238: LD_INT 21
85240: PUSH
85241: LD_INT 2
85243: PUSH
85244: EMPTY
85245: LIST
85246: LIST
85247: PUSH
85248: EMPTY
85249: LIST
85250: LIST
85251: PPUSH
85252: CALL_OW 69
85256: ST_TO_ADDR
// if not tmp then
85257: LD_VAR 0 1
85261: NOT
85262: IFFALSE 85266
// exit ;
85264: GO 85292
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
85266: LD_VAR 0 1
85270: PUSH
85271: LD_INT 1
85273: PPUSH
85274: LD_VAR 0 1
85278: PPUSH
85279: CALL_OW 12
85283: ARRAY
85284: PPUSH
85285: LD_INT 60
85287: PPUSH
85288: CALL_OW 234
// end ;
85292: PPOPN 1
85294: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
85295: LD_EXP 103
85299: PUSH
85300: LD_EXP 133
85304: AND
85305: IFFALSE 85404
85307: GO 85309
85309: DISABLE
85310: LD_INT 0
85312: PPUSH
85313: PPUSH
// begin enable ;
85314: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
85315: LD_ADDR_VAR 0 1
85319: PUSH
85320: LD_INT 22
85322: PUSH
85323: LD_OWVAR 2
85327: PUSH
85328: EMPTY
85329: LIST
85330: LIST
85331: PUSH
85332: LD_INT 61
85334: PUSH
85335: EMPTY
85336: LIST
85337: PUSH
85338: LD_INT 33
85340: PUSH
85341: LD_INT 2
85343: PUSH
85344: EMPTY
85345: LIST
85346: LIST
85347: PUSH
85348: EMPTY
85349: LIST
85350: LIST
85351: LIST
85352: PPUSH
85353: CALL_OW 69
85357: ST_TO_ADDR
// if not tmp then
85358: LD_VAR 0 1
85362: NOT
85363: IFFALSE 85367
// exit ;
85365: GO 85404
// for i in tmp do
85367: LD_ADDR_VAR 0 2
85371: PUSH
85372: LD_VAR 0 1
85376: PUSH
85377: FOR_IN
85378: IFFALSE 85402
// if IsControledBy ( i ) then
85380: LD_VAR 0 2
85384: PPUSH
85385: CALL_OW 312
85389: IFFALSE 85400
// ComUnlink ( i ) ;
85391: LD_VAR 0 2
85395: PPUSH
85396: CALL_OW 136
85400: GO 85377
85402: POP
85403: POP
// end ;
85404: PPOPN 2
85406: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
85407: LD_EXP 103
85411: PUSH
85412: LD_EXP 134
85416: AND
85417: IFFALSE 85557
85419: GO 85421
85421: DISABLE
85422: LD_INT 0
85424: PPUSH
85425: PPUSH
// begin ToLua ( displayPowell(); ) ;
85426: LD_STRING displayPowell();
85428: PPUSH
85429: CALL_OW 559
// uc_side := 0 ;
85433: LD_ADDR_OWVAR 20
85437: PUSH
85438: LD_INT 0
85440: ST_TO_ADDR
// uc_nation := 2 ;
85441: LD_ADDR_OWVAR 21
85445: PUSH
85446: LD_INT 2
85448: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
85449: LD_ADDR_OWVAR 37
85453: PUSH
85454: LD_INT 14
85456: ST_TO_ADDR
// vc_engine := engine_siberite ;
85457: LD_ADDR_OWVAR 39
85461: PUSH
85462: LD_INT 3
85464: ST_TO_ADDR
// vc_control := control_apeman ;
85465: LD_ADDR_OWVAR 38
85469: PUSH
85470: LD_INT 5
85472: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
85473: LD_ADDR_OWVAR 40
85477: PUSH
85478: LD_INT 29
85480: ST_TO_ADDR
// un := CreateVehicle ;
85481: LD_ADDR_VAR 0 2
85485: PUSH
85486: CALL_OW 45
85490: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
85491: LD_VAR 0 2
85495: PPUSH
85496: LD_INT 1
85498: PPUSH
85499: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
85503: LD_INT 35
85505: PPUSH
85506: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
85510: LD_VAR 0 2
85514: PPUSH
85515: LD_INT 22
85517: PUSH
85518: LD_OWVAR 2
85522: PUSH
85523: EMPTY
85524: LIST
85525: LIST
85526: PPUSH
85527: CALL_OW 69
85531: PPUSH
85532: LD_VAR 0 2
85536: PPUSH
85537: CALL_OW 74
85541: PPUSH
85542: CALL_OW 115
// until IsDead ( un ) ;
85546: LD_VAR 0 2
85550: PPUSH
85551: CALL_OW 301
85555: IFFALSE 85503
// end ;
85557: PPOPN 2
85559: END
// every 0 0$1 trigger StreamModeActive and sStu do
85560: LD_EXP 103
85564: PUSH
85565: LD_EXP 142
85569: AND
85570: IFFALSE 85586
85572: GO 85574
85574: DISABLE
// begin ToLua ( displayStucuk(); ) ;
85575: LD_STRING displayStucuk();
85577: PPUSH
85578: CALL_OW 559
// ResetFog ;
85582: CALL_OW 335
// end ;
85586: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
85587: LD_EXP 103
85591: PUSH
85592: LD_EXP 135
85596: AND
85597: IFFALSE 85738
85599: GO 85601
85601: DISABLE
85602: LD_INT 0
85604: PPUSH
85605: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
85606: LD_ADDR_VAR 0 2
85610: PUSH
85611: LD_INT 22
85613: PUSH
85614: LD_OWVAR 2
85618: PUSH
85619: EMPTY
85620: LIST
85621: LIST
85622: PUSH
85623: LD_INT 21
85625: PUSH
85626: LD_INT 1
85628: PUSH
85629: EMPTY
85630: LIST
85631: LIST
85632: PUSH
85633: EMPTY
85634: LIST
85635: LIST
85636: PPUSH
85637: CALL_OW 69
85641: ST_TO_ADDR
// if not tmp then
85642: LD_VAR 0 2
85646: NOT
85647: IFFALSE 85651
// exit ;
85649: GO 85738
// un := tmp [ rand ( 1 , tmp ) ] ;
85651: LD_ADDR_VAR 0 1
85655: PUSH
85656: LD_VAR 0 2
85660: PUSH
85661: LD_INT 1
85663: PPUSH
85664: LD_VAR 0 2
85668: PPUSH
85669: CALL_OW 12
85673: ARRAY
85674: ST_TO_ADDR
// SetSide ( un , 0 ) ;
85675: LD_VAR 0 1
85679: PPUSH
85680: LD_INT 0
85682: PPUSH
85683: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
85687: LD_VAR 0 1
85691: PPUSH
85692: LD_OWVAR 3
85696: PUSH
85697: LD_VAR 0 1
85701: DIFF
85702: PPUSH
85703: LD_VAR 0 1
85707: PPUSH
85708: CALL_OW 74
85712: PPUSH
85713: CALL_OW 115
// wait ( 0 0$20 ) ;
85717: LD_INT 700
85719: PPUSH
85720: CALL_OW 67
// SetSide ( un , your_side ) ;
85724: LD_VAR 0 1
85728: PPUSH
85729: LD_OWVAR 2
85733: PPUSH
85734: CALL_OW 235
// end ;
85738: PPOPN 2
85740: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
85741: LD_EXP 103
85745: PUSH
85746: LD_EXP 136
85750: AND
85751: IFFALSE 85857
85753: GO 85755
85755: DISABLE
85756: LD_INT 0
85758: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
85759: LD_ADDR_VAR 0 1
85763: PUSH
85764: LD_INT 22
85766: PUSH
85767: LD_OWVAR 2
85771: PUSH
85772: EMPTY
85773: LIST
85774: LIST
85775: PUSH
85776: LD_INT 2
85778: PUSH
85779: LD_INT 30
85781: PUSH
85782: LD_INT 0
85784: PUSH
85785: EMPTY
85786: LIST
85787: LIST
85788: PUSH
85789: LD_INT 30
85791: PUSH
85792: LD_INT 1
85794: PUSH
85795: EMPTY
85796: LIST
85797: LIST
85798: PUSH
85799: EMPTY
85800: LIST
85801: LIST
85802: LIST
85803: PUSH
85804: EMPTY
85805: LIST
85806: LIST
85807: PPUSH
85808: CALL_OW 69
85812: ST_TO_ADDR
// if not depot then
85813: LD_VAR 0 1
85817: NOT
85818: IFFALSE 85822
// exit ;
85820: GO 85857
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
85822: LD_VAR 0 1
85826: PUSH
85827: LD_INT 1
85829: ARRAY
85830: PPUSH
85831: CALL_OW 250
85835: PPUSH
85836: LD_VAR 0 1
85840: PUSH
85841: LD_INT 1
85843: ARRAY
85844: PPUSH
85845: CALL_OW 251
85849: PPUSH
85850: LD_INT 70
85852: PPUSH
85853: CALL_OW 495
// end ;
85857: PPOPN 1
85859: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
85860: LD_EXP 103
85864: PUSH
85865: LD_EXP 137
85869: AND
85870: IFFALSE 86081
85872: GO 85874
85874: DISABLE
85875: LD_INT 0
85877: PPUSH
85878: PPUSH
85879: PPUSH
85880: PPUSH
85881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
85882: LD_ADDR_VAR 0 5
85886: PUSH
85887: LD_INT 22
85889: PUSH
85890: LD_OWVAR 2
85894: PUSH
85895: EMPTY
85896: LIST
85897: LIST
85898: PUSH
85899: LD_INT 21
85901: PUSH
85902: LD_INT 1
85904: PUSH
85905: EMPTY
85906: LIST
85907: LIST
85908: PUSH
85909: EMPTY
85910: LIST
85911: LIST
85912: PPUSH
85913: CALL_OW 69
85917: ST_TO_ADDR
// if not tmp then
85918: LD_VAR 0 5
85922: NOT
85923: IFFALSE 85927
// exit ;
85925: GO 86081
// for i in tmp do
85927: LD_ADDR_VAR 0 1
85931: PUSH
85932: LD_VAR 0 5
85936: PUSH
85937: FOR_IN
85938: IFFALSE 86079
// begin d := rand ( 0 , 5 ) ;
85940: LD_ADDR_VAR 0 4
85944: PUSH
85945: LD_INT 0
85947: PPUSH
85948: LD_INT 5
85950: PPUSH
85951: CALL_OW 12
85955: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
85956: LD_ADDR_VAR 0 2
85960: PUSH
85961: LD_VAR 0 1
85965: PPUSH
85966: CALL_OW 250
85970: PPUSH
85971: LD_VAR 0 4
85975: PPUSH
85976: LD_INT 3
85978: PPUSH
85979: LD_INT 12
85981: PPUSH
85982: CALL_OW 12
85986: PPUSH
85987: CALL_OW 272
85991: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
85992: LD_ADDR_VAR 0 3
85996: PUSH
85997: LD_VAR 0 1
86001: PPUSH
86002: CALL_OW 251
86006: PPUSH
86007: LD_VAR 0 4
86011: PPUSH
86012: LD_INT 3
86014: PPUSH
86015: LD_INT 12
86017: PPUSH
86018: CALL_OW 12
86022: PPUSH
86023: CALL_OW 273
86027: ST_TO_ADDR
// if ValidHex ( x , y ) then
86028: LD_VAR 0 2
86032: PPUSH
86033: LD_VAR 0 3
86037: PPUSH
86038: CALL_OW 488
86042: IFFALSE 86077
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
86044: LD_VAR 0 1
86048: PPUSH
86049: LD_VAR 0 2
86053: PPUSH
86054: LD_VAR 0 3
86058: PPUSH
86059: LD_INT 3
86061: PPUSH
86062: LD_INT 6
86064: PPUSH
86065: CALL_OW 12
86069: PPUSH
86070: LD_INT 1
86072: PPUSH
86073: CALL_OW 483
// end ;
86077: GO 85937
86079: POP
86080: POP
// end ;
86081: PPOPN 5
86083: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
86084: LD_EXP 103
86088: PUSH
86089: LD_EXP 138
86093: AND
86094: IFFALSE 86188
86096: GO 86098
86098: DISABLE
86099: LD_INT 0
86101: PPUSH
86102: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
86103: LD_ADDR_VAR 0 2
86107: PUSH
86108: LD_INT 22
86110: PUSH
86111: LD_OWVAR 2
86115: PUSH
86116: EMPTY
86117: LIST
86118: LIST
86119: PUSH
86120: LD_INT 32
86122: PUSH
86123: LD_INT 1
86125: PUSH
86126: EMPTY
86127: LIST
86128: LIST
86129: PUSH
86130: LD_INT 21
86132: PUSH
86133: LD_INT 2
86135: PUSH
86136: EMPTY
86137: LIST
86138: LIST
86139: PUSH
86140: EMPTY
86141: LIST
86142: LIST
86143: LIST
86144: PPUSH
86145: CALL_OW 69
86149: ST_TO_ADDR
// if not tmp then
86150: LD_VAR 0 2
86154: NOT
86155: IFFALSE 86159
// exit ;
86157: GO 86188
// for i in tmp do
86159: LD_ADDR_VAR 0 1
86163: PUSH
86164: LD_VAR 0 2
86168: PUSH
86169: FOR_IN
86170: IFFALSE 86186
// SetFuel ( i , 0 ) ;
86172: LD_VAR 0 1
86176: PPUSH
86177: LD_INT 0
86179: PPUSH
86180: CALL_OW 240
86184: GO 86169
86186: POP
86187: POP
// end ;
86188: PPOPN 2
86190: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
86191: LD_EXP 103
86195: PUSH
86196: LD_EXP 139
86200: AND
86201: IFFALSE 86267
86203: GO 86205
86205: DISABLE
86206: LD_INT 0
86208: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
86209: LD_ADDR_VAR 0 1
86213: PUSH
86214: LD_INT 22
86216: PUSH
86217: LD_OWVAR 2
86221: PUSH
86222: EMPTY
86223: LIST
86224: LIST
86225: PUSH
86226: LD_INT 30
86228: PUSH
86229: LD_INT 29
86231: PUSH
86232: EMPTY
86233: LIST
86234: LIST
86235: PUSH
86236: EMPTY
86237: LIST
86238: LIST
86239: PPUSH
86240: CALL_OW 69
86244: ST_TO_ADDR
// if not tmp then
86245: LD_VAR 0 1
86249: NOT
86250: IFFALSE 86254
// exit ;
86252: GO 86267
// DestroyUnit ( tmp [ 1 ] ) ;
86254: LD_VAR 0 1
86258: PUSH
86259: LD_INT 1
86261: ARRAY
86262: PPUSH
86263: CALL_OW 65
// end ;
86267: PPOPN 1
86269: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
86270: LD_EXP 103
86274: PUSH
86275: LD_EXP 141
86279: AND
86280: IFFALSE 86409
86282: GO 86284
86284: DISABLE
86285: LD_INT 0
86287: PPUSH
// begin uc_side := 0 ;
86288: LD_ADDR_OWVAR 20
86292: PUSH
86293: LD_INT 0
86295: ST_TO_ADDR
// uc_nation := nation_arabian ;
86296: LD_ADDR_OWVAR 21
86300: PUSH
86301: LD_INT 2
86303: ST_TO_ADDR
// hc_gallery :=  ;
86304: LD_ADDR_OWVAR 33
86308: PUSH
86309: LD_STRING 
86311: ST_TO_ADDR
// hc_name :=  ;
86312: LD_ADDR_OWVAR 26
86316: PUSH
86317: LD_STRING 
86319: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
86320: LD_INT 1
86322: PPUSH
86323: LD_INT 11
86325: PPUSH
86326: LD_INT 10
86328: PPUSH
86329: CALL_OW 380
// un := CreateHuman ;
86333: LD_ADDR_VAR 0 1
86337: PUSH
86338: CALL_OW 44
86342: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
86343: LD_VAR 0 1
86347: PPUSH
86348: LD_INT 1
86350: PPUSH
86351: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
86355: LD_INT 35
86357: PPUSH
86358: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
86362: LD_VAR 0 1
86366: PPUSH
86367: LD_INT 22
86369: PUSH
86370: LD_OWVAR 2
86374: PUSH
86375: EMPTY
86376: LIST
86377: LIST
86378: PPUSH
86379: CALL_OW 69
86383: PPUSH
86384: LD_VAR 0 1
86388: PPUSH
86389: CALL_OW 74
86393: PPUSH
86394: CALL_OW 115
// until IsDead ( un ) ;
86398: LD_VAR 0 1
86402: PPUSH
86403: CALL_OW 301
86407: IFFALSE 86355
// end ;
86409: PPOPN 1
86411: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
86412: LD_EXP 103
86416: PUSH
86417: LD_EXP 143
86421: AND
86422: IFFALSE 86434
86424: GO 86426
86426: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
86427: LD_STRING earthquake(getX(game), 0, 32)
86429: PPUSH
86430: CALL_OW 559
86434: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
86435: LD_EXP 103
86439: PUSH
86440: LD_EXP 144
86444: AND
86445: IFFALSE 86536
86447: GO 86449
86449: DISABLE
86450: LD_INT 0
86452: PPUSH
// begin enable ;
86453: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
86454: LD_ADDR_VAR 0 1
86458: PUSH
86459: LD_INT 22
86461: PUSH
86462: LD_OWVAR 2
86466: PUSH
86467: EMPTY
86468: LIST
86469: LIST
86470: PUSH
86471: LD_INT 21
86473: PUSH
86474: LD_INT 2
86476: PUSH
86477: EMPTY
86478: LIST
86479: LIST
86480: PUSH
86481: LD_INT 33
86483: PUSH
86484: LD_INT 3
86486: PUSH
86487: EMPTY
86488: LIST
86489: LIST
86490: PUSH
86491: EMPTY
86492: LIST
86493: LIST
86494: LIST
86495: PPUSH
86496: CALL_OW 69
86500: ST_TO_ADDR
// if not tmp then
86501: LD_VAR 0 1
86505: NOT
86506: IFFALSE 86510
// exit ;
86508: GO 86536
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
86510: LD_VAR 0 1
86514: PUSH
86515: LD_INT 1
86517: PPUSH
86518: LD_VAR 0 1
86522: PPUSH
86523: CALL_OW 12
86527: ARRAY
86528: PPUSH
86529: LD_INT 1
86531: PPUSH
86532: CALL_OW 234
// end ;
86536: PPOPN 1
86538: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
86539: LD_EXP 103
86543: PUSH
86544: LD_EXP 145
86548: AND
86549: IFFALSE 86690
86551: GO 86553
86553: DISABLE
86554: LD_INT 0
86556: PPUSH
86557: PPUSH
86558: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
86559: LD_ADDR_VAR 0 3
86563: PUSH
86564: LD_INT 22
86566: PUSH
86567: LD_OWVAR 2
86571: PUSH
86572: EMPTY
86573: LIST
86574: LIST
86575: PUSH
86576: LD_INT 25
86578: PUSH
86579: LD_INT 1
86581: PUSH
86582: EMPTY
86583: LIST
86584: LIST
86585: PUSH
86586: EMPTY
86587: LIST
86588: LIST
86589: PPUSH
86590: CALL_OW 69
86594: ST_TO_ADDR
// if not tmp then
86595: LD_VAR 0 3
86599: NOT
86600: IFFALSE 86604
// exit ;
86602: GO 86690
// un := tmp [ rand ( 1 , tmp ) ] ;
86604: LD_ADDR_VAR 0 2
86608: PUSH
86609: LD_VAR 0 3
86613: PUSH
86614: LD_INT 1
86616: PPUSH
86617: LD_VAR 0 3
86621: PPUSH
86622: CALL_OW 12
86626: ARRAY
86627: ST_TO_ADDR
// if Crawls ( un ) then
86628: LD_VAR 0 2
86632: PPUSH
86633: CALL_OW 318
86637: IFFALSE 86648
// ComWalk ( un ) ;
86639: LD_VAR 0 2
86643: PPUSH
86644: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
86648: LD_VAR 0 2
86652: PPUSH
86653: LD_INT 9
86655: PPUSH
86656: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
86660: LD_INT 28
86662: PPUSH
86663: LD_OWVAR 2
86667: PPUSH
86668: LD_INT 2
86670: PPUSH
86671: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
86675: LD_INT 29
86677: PPUSH
86678: LD_OWVAR 2
86682: PPUSH
86683: LD_INT 2
86685: PPUSH
86686: CALL_OW 322
// end ;
86690: PPOPN 3
86692: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
86693: LD_EXP 103
86697: PUSH
86698: LD_EXP 146
86702: AND
86703: IFFALSE 86814
86705: GO 86707
86707: DISABLE
86708: LD_INT 0
86710: PPUSH
86711: PPUSH
86712: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
86713: LD_ADDR_VAR 0 3
86717: PUSH
86718: LD_INT 22
86720: PUSH
86721: LD_OWVAR 2
86725: PUSH
86726: EMPTY
86727: LIST
86728: LIST
86729: PUSH
86730: LD_INT 25
86732: PUSH
86733: LD_INT 1
86735: PUSH
86736: EMPTY
86737: LIST
86738: LIST
86739: PUSH
86740: EMPTY
86741: LIST
86742: LIST
86743: PPUSH
86744: CALL_OW 69
86748: ST_TO_ADDR
// if not tmp then
86749: LD_VAR 0 3
86753: NOT
86754: IFFALSE 86758
// exit ;
86756: GO 86814
// un := tmp [ rand ( 1 , tmp ) ] ;
86758: LD_ADDR_VAR 0 2
86762: PUSH
86763: LD_VAR 0 3
86767: PUSH
86768: LD_INT 1
86770: PPUSH
86771: LD_VAR 0 3
86775: PPUSH
86776: CALL_OW 12
86780: ARRAY
86781: ST_TO_ADDR
// if Crawls ( un ) then
86782: LD_VAR 0 2
86786: PPUSH
86787: CALL_OW 318
86791: IFFALSE 86802
// ComWalk ( un ) ;
86793: LD_VAR 0 2
86797: PPUSH
86798: CALL_OW 138
// SetClass ( un , class_mortar ) ;
86802: LD_VAR 0 2
86806: PPUSH
86807: LD_INT 8
86809: PPUSH
86810: CALL_OW 336
// end ;
86814: PPOPN 3
86816: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
86817: LD_EXP 103
86821: PUSH
86822: LD_EXP 147
86826: AND
86827: IFFALSE 86971
86829: GO 86831
86831: DISABLE
86832: LD_INT 0
86834: PPUSH
86835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
86836: LD_ADDR_VAR 0 2
86840: PUSH
86841: LD_INT 22
86843: PUSH
86844: LD_OWVAR 2
86848: PUSH
86849: EMPTY
86850: LIST
86851: LIST
86852: PUSH
86853: LD_INT 21
86855: PUSH
86856: LD_INT 2
86858: PUSH
86859: EMPTY
86860: LIST
86861: LIST
86862: PUSH
86863: LD_INT 2
86865: PUSH
86866: LD_INT 34
86868: PUSH
86869: LD_INT 12
86871: PUSH
86872: EMPTY
86873: LIST
86874: LIST
86875: PUSH
86876: LD_INT 34
86878: PUSH
86879: LD_INT 51
86881: PUSH
86882: EMPTY
86883: LIST
86884: LIST
86885: PUSH
86886: LD_INT 34
86888: PUSH
86889: LD_INT 32
86891: PUSH
86892: EMPTY
86893: LIST
86894: LIST
86895: PUSH
86896: EMPTY
86897: LIST
86898: LIST
86899: LIST
86900: LIST
86901: PUSH
86902: EMPTY
86903: LIST
86904: LIST
86905: LIST
86906: PPUSH
86907: CALL_OW 69
86911: ST_TO_ADDR
// if not tmp then
86912: LD_VAR 0 2
86916: NOT
86917: IFFALSE 86921
// exit ;
86919: GO 86971
// for i in tmp do
86921: LD_ADDR_VAR 0 1
86925: PUSH
86926: LD_VAR 0 2
86930: PUSH
86931: FOR_IN
86932: IFFALSE 86969
// if GetCargo ( i , mat_artifact ) = 0 then
86934: LD_VAR 0 1
86938: PPUSH
86939: LD_INT 4
86941: PPUSH
86942: CALL_OW 289
86946: PUSH
86947: LD_INT 0
86949: EQUAL
86950: IFFALSE 86967
// SetCargo ( i , mat_siberit , 100 ) ;
86952: LD_VAR 0 1
86956: PPUSH
86957: LD_INT 3
86959: PPUSH
86960: LD_INT 100
86962: PPUSH
86963: CALL_OW 290
86967: GO 86931
86969: POP
86970: POP
// end ;
86971: PPOPN 2
86973: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
86974: LD_EXP 103
86978: PUSH
86979: LD_EXP 148
86983: AND
86984: IFFALSE 87137
86986: GO 86988
86988: DISABLE
86989: LD_INT 0
86991: PPUSH
86992: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
86993: LD_ADDR_VAR 0 2
86997: PUSH
86998: LD_INT 22
87000: PUSH
87001: LD_OWVAR 2
87005: PUSH
87006: EMPTY
87007: LIST
87008: LIST
87009: PPUSH
87010: CALL_OW 69
87014: ST_TO_ADDR
// if not tmp then
87015: LD_VAR 0 2
87019: NOT
87020: IFFALSE 87024
// exit ;
87022: GO 87137
// for i := 1 to 2 do
87024: LD_ADDR_VAR 0 1
87028: PUSH
87029: DOUBLE
87030: LD_INT 1
87032: DEC
87033: ST_TO_ADDR
87034: LD_INT 2
87036: PUSH
87037: FOR_TO
87038: IFFALSE 87135
// begin uc_side := your_side ;
87040: LD_ADDR_OWVAR 20
87044: PUSH
87045: LD_OWVAR 2
87049: ST_TO_ADDR
// uc_nation := nation_american ;
87050: LD_ADDR_OWVAR 21
87054: PUSH
87055: LD_INT 1
87057: ST_TO_ADDR
// vc_chassis := us_morphling ;
87058: LD_ADDR_OWVAR 37
87062: PUSH
87063: LD_INT 5
87065: ST_TO_ADDR
// vc_engine := engine_siberite ;
87066: LD_ADDR_OWVAR 39
87070: PUSH
87071: LD_INT 3
87073: ST_TO_ADDR
// vc_control := control_computer ;
87074: LD_ADDR_OWVAR 38
87078: PUSH
87079: LD_INT 3
87081: ST_TO_ADDR
// vc_weapon := us_double_laser ;
87082: LD_ADDR_OWVAR 40
87086: PUSH
87087: LD_INT 10
87089: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
87090: CALL_OW 45
87094: PPUSH
87095: LD_VAR 0 2
87099: PUSH
87100: LD_INT 1
87102: ARRAY
87103: PPUSH
87104: CALL_OW 250
87108: PPUSH
87109: LD_VAR 0 2
87113: PUSH
87114: LD_INT 1
87116: ARRAY
87117: PPUSH
87118: CALL_OW 251
87122: PPUSH
87123: LD_INT 12
87125: PPUSH
87126: LD_INT 1
87128: PPUSH
87129: CALL_OW 50
// end ;
87133: GO 87037
87135: POP
87136: POP
// end ;
87137: PPOPN 2
87139: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
87140: LD_EXP 103
87144: PUSH
87145: LD_EXP 149
87149: AND
87150: IFFALSE 87372
87152: GO 87154
87154: DISABLE
87155: LD_INT 0
87157: PPUSH
87158: PPUSH
87159: PPUSH
87160: PPUSH
87161: PPUSH
87162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
87163: LD_ADDR_VAR 0 6
87167: PUSH
87168: LD_INT 22
87170: PUSH
87171: LD_OWVAR 2
87175: PUSH
87176: EMPTY
87177: LIST
87178: LIST
87179: PUSH
87180: LD_INT 21
87182: PUSH
87183: LD_INT 1
87185: PUSH
87186: EMPTY
87187: LIST
87188: LIST
87189: PUSH
87190: LD_INT 3
87192: PUSH
87193: LD_INT 23
87195: PUSH
87196: LD_INT 0
87198: PUSH
87199: EMPTY
87200: LIST
87201: LIST
87202: PUSH
87203: EMPTY
87204: LIST
87205: LIST
87206: PUSH
87207: EMPTY
87208: LIST
87209: LIST
87210: LIST
87211: PPUSH
87212: CALL_OW 69
87216: ST_TO_ADDR
// if not tmp then
87217: LD_VAR 0 6
87221: NOT
87222: IFFALSE 87226
// exit ;
87224: GO 87372
// s1 := rand ( 1 , 4 ) ;
87226: LD_ADDR_VAR 0 2
87230: PUSH
87231: LD_INT 1
87233: PPUSH
87234: LD_INT 4
87236: PPUSH
87237: CALL_OW 12
87241: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
87242: LD_ADDR_VAR 0 4
87246: PUSH
87247: LD_VAR 0 6
87251: PUSH
87252: LD_INT 1
87254: ARRAY
87255: PPUSH
87256: LD_VAR 0 2
87260: PPUSH
87261: CALL_OW 259
87265: ST_TO_ADDR
// if s1 = 1 then
87266: LD_VAR 0 2
87270: PUSH
87271: LD_INT 1
87273: EQUAL
87274: IFFALSE 87294
// s2 := rand ( 2 , 4 ) else
87276: LD_ADDR_VAR 0 3
87280: PUSH
87281: LD_INT 2
87283: PPUSH
87284: LD_INT 4
87286: PPUSH
87287: CALL_OW 12
87291: ST_TO_ADDR
87292: GO 87302
// s2 := 1 ;
87294: LD_ADDR_VAR 0 3
87298: PUSH
87299: LD_INT 1
87301: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
87302: LD_ADDR_VAR 0 5
87306: PUSH
87307: LD_VAR 0 6
87311: PUSH
87312: LD_INT 1
87314: ARRAY
87315: PPUSH
87316: LD_VAR 0 3
87320: PPUSH
87321: CALL_OW 259
87325: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
87326: LD_VAR 0 6
87330: PUSH
87331: LD_INT 1
87333: ARRAY
87334: PPUSH
87335: LD_VAR 0 2
87339: PPUSH
87340: LD_VAR 0 5
87344: PPUSH
87345: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
87349: LD_VAR 0 6
87353: PUSH
87354: LD_INT 1
87356: ARRAY
87357: PPUSH
87358: LD_VAR 0 3
87362: PPUSH
87363: LD_VAR 0 4
87367: PPUSH
87368: CALL_OW 237
// end ;
87372: PPOPN 6
87374: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
87375: LD_EXP 103
87379: PUSH
87380: LD_EXP 150
87384: AND
87385: IFFALSE 87464
87387: GO 87389
87389: DISABLE
87390: LD_INT 0
87392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
87393: LD_ADDR_VAR 0 1
87397: PUSH
87398: LD_INT 22
87400: PUSH
87401: LD_OWVAR 2
87405: PUSH
87406: EMPTY
87407: LIST
87408: LIST
87409: PUSH
87410: LD_INT 30
87412: PUSH
87413: LD_INT 3
87415: PUSH
87416: EMPTY
87417: LIST
87418: LIST
87419: PUSH
87420: EMPTY
87421: LIST
87422: LIST
87423: PPUSH
87424: CALL_OW 69
87428: ST_TO_ADDR
// if not tmp then
87429: LD_VAR 0 1
87433: NOT
87434: IFFALSE 87438
// exit ;
87436: GO 87464
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
87438: LD_VAR 0 1
87442: PUSH
87443: LD_INT 1
87445: PPUSH
87446: LD_VAR 0 1
87450: PPUSH
87451: CALL_OW 12
87455: ARRAY
87456: PPUSH
87457: LD_INT 1
87459: PPUSH
87460: CALL_OW 234
// end ;
87464: PPOPN 1
87466: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
87467: LD_EXP 103
87471: PUSH
87472: LD_EXP 151
87476: AND
87477: IFFALSE 87589
87479: GO 87481
87481: DISABLE
87482: LD_INT 0
87484: PPUSH
87485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
87486: LD_ADDR_VAR 0 2
87490: PUSH
87491: LD_INT 22
87493: PUSH
87494: LD_OWVAR 2
87498: PUSH
87499: EMPTY
87500: LIST
87501: LIST
87502: PUSH
87503: LD_INT 2
87505: PUSH
87506: LD_INT 30
87508: PUSH
87509: LD_INT 27
87511: PUSH
87512: EMPTY
87513: LIST
87514: LIST
87515: PUSH
87516: LD_INT 30
87518: PUSH
87519: LD_INT 26
87521: PUSH
87522: EMPTY
87523: LIST
87524: LIST
87525: PUSH
87526: LD_INT 30
87528: PUSH
87529: LD_INT 28
87531: PUSH
87532: EMPTY
87533: LIST
87534: LIST
87535: PUSH
87536: EMPTY
87537: LIST
87538: LIST
87539: LIST
87540: LIST
87541: PUSH
87542: EMPTY
87543: LIST
87544: LIST
87545: PPUSH
87546: CALL_OW 69
87550: ST_TO_ADDR
// if not tmp then
87551: LD_VAR 0 2
87555: NOT
87556: IFFALSE 87560
// exit ;
87558: GO 87589
// for i in tmp do
87560: LD_ADDR_VAR 0 1
87564: PUSH
87565: LD_VAR 0 2
87569: PUSH
87570: FOR_IN
87571: IFFALSE 87587
// SetLives ( i , 1 ) ;
87573: LD_VAR 0 1
87577: PPUSH
87578: LD_INT 1
87580: PPUSH
87581: CALL_OW 234
87585: GO 87570
87587: POP
87588: POP
// end ;
87589: PPOPN 2
87591: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
87592: LD_EXP 103
87596: PUSH
87597: LD_EXP 152
87601: AND
87602: IFFALSE 87876
87604: GO 87606
87606: DISABLE
87607: LD_INT 0
87609: PPUSH
87610: PPUSH
87611: PPUSH
// begin i := rand ( 1 , 7 ) ;
87612: LD_ADDR_VAR 0 1
87616: PUSH
87617: LD_INT 1
87619: PPUSH
87620: LD_INT 7
87622: PPUSH
87623: CALL_OW 12
87627: ST_TO_ADDR
// case i of 1 :
87628: LD_VAR 0 1
87632: PUSH
87633: LD_INT 1
87635: DOUBLE
87636: EQUAL
87637: IFTRUE 87641
87639: GO 87651
87641: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
87642: LD_STRING earthquake(getX(game), 0, 32)
87644: PPUSH
87645: CALL_OW 559
87649: GO 87876
87651: LD_INT 2
87653: DOUBLE
87654: EQUAL
87655: IFTRUE 87659
87657: GO 87673
87659: POP
// begin ToLua ( displayStucuk(); ) ;
87660: LD_STRING displayStucuk();
87662: PPUSH
87663: CALL_OW 559
// ResetFog ;
87667: CALL_OW 335
// end ; 3 :
87671: GO 87876
87673: LD_INT 3
87675: DOUBLE
87676: EQUAL
87677: IFTRUE 87681
87679: GO 87785
87681: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
87682: LD_ADDR_VAR 0 2
87686: PUSH
87687: LD_INT 22
87689: PUSH
87690: LD_OWVAR 2
87694: PUSH
87695: EMPTY
87696: LIST
87697: LIST
87698: PUSH
87699: LD_INT 25
87701: PUSH
87702: LD_INT 1
87704: PUSH
87705: EMPTY
87706: LIST
87707: LIST
87708: PUSH
87709: EMPTY
87710: LIST
87711: LIST
87712: PPUSH
87713: CALL_OW 69
87717: ST_TO_ADDR
// if not tmp then
87718: LD_VAR 0 2
87722: NOT
87723: IFFALSE 87727
// exit ;
87725: GO 87876
// un := tmp [ rand ( 1 , tmp ) ] ;
87727: LD_ADDR_VAR 0 3
87731: PUSH
87732: LD_VAR 0 2
87736: PUSH
87737: LD_INT 1
87739: PPUSH
87740: LD_VAR 0 2
87744: PPUSH
87745: CALL_OW 12
87749: ARRAY
87750: ST_TO_ADDR
// if Crawls ( un ) then
87751: LD_VAR 0 3
87755: PPUSH
87756: CALL_OW 318
87760: IFFALSE 87771
// ComWalk ( un ) ;
87762: LD_VAR 0 3
87766: PPUSH
87767: CALL_OW 138
// SetClass ( un , class_mortar ) ;
87771: LD_VAR 0 3
87775: PPUSH
87776: LD_INT 8
87778: PPUSH
87779: CALL_OW 336
// end ; 4 :
87783: GO 87876
87785: LD_INT 4
87787: DOUBLE
87788: EQUAL
87789: IFTRUE 87793
87791: GO 87854
87793: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
87794: LD_ADDR_VAR 0 2
87798: PUSH
87799: LD_INT 22
87801: PUSH
87802: LD_OWVAR 2
87806: PUSH
87807: EMPTY
87808: LIST
87809: LIST
87810: PUSH
87811: LD_INT 30
87813: PUSH
87814: LD_INT 29
87816: PUSH
87817: EMPTY
87818: LIST
87819: LIST
87820: PUSH
87821: EMPTY
87822: LIST
87823: LIST
87824: PPUSH
87825: CALL_OW 69
87829: ST_TO_ADDR
// if not tmp then
87830: LD_VAR 0 2
87834: NOT
87835: IFFALSE 87839
// exit ;
87837: GO 87876
// DestroyUnit ( tmp [ 1 ] ) ;
87839: LD_VAR 0 2
87843: PUSH
87844: LD_INT 1
87846: ARRAY
87847: PPUSH
87848: CALL_OW 65
// end ; 5 .. 7 :
87852: GO 87876
87854: LD_INT 5
87856: DOUBLE
87857: GREATEREQUAL
87858: IFFALSE 87866
87860: LD_INT 7
87862: DOUBLE
87863: LESSEQUAL
87864: IFTRUE 87868
87866: GO 87875
87868: POP
// StreamSibBomb ; end ;
87869: CALL 84156 0 0
87873: GO 87876
87875: POP
// end ;
87876: PPOPN 3
87878: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
87879: LD_EXP 103
87883: PUSH
87884: LD_EXP 153
87888: AND
87889: IFFALSE 88045
87891: GO 87893
87893: DISABLE
87894: LD_INT 0
87896: PPUSH
87897: PPUSH
87898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
87899: LD_ADDR_VAR 0 2
87903: PUSH
87904: LD_INT 81
87906: PUSH
87907: LD_OWVAR 2
87911: PUSH
87912: EMPTY
87913: LIST
87914: LIST
87915: PUSH
87916: LD_INT 2
87918: PUSH
87919: LD_INT 21
87921: PUSH
87922: LD_INT 1
87924: PUSH
87925: EMPTY
87926: LIST
87927: LIST
87928: PUSH
87929: LD_INT 21
87931: PUSH
87932: LD_INT 2
87934: PUSH
87935: EMPTY
87936: LIST
87937: LIST
87938: PUSH
87939: EMPTY
87940: LIST
87941: LIST
87942: LIST
87943: PUSH
87944: EMPTY
87945: LIST
87946: LIST
87947: PPUSH
87948: CALL_OW 69
87952: ST_TO_ADDR
// if not tmp then
87953: LD_VAR 0 2
87957: NOT
87958: IFFALSE 87962
// exit ;
87960: GO 88045
// p := 0 ;
87962: LD_ADDR_VAR 0 3
87966: PUSH
87967: LD_INT 0
87969: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
87970: LD_INT 35
87972: PPUSH
87973: CALL_OW 67
// p := p + 1 ;
87977: LD_ADDR_VAR 0 3
87981: PUSH
87982: LD_VAR 0 3
87986: PUSH
87987: LD_INT 1
87989: PLUS
87990: ST_TO_ADDR
// for i in tmp do
87991: LD_ADDR_VAR 0 1
87995: PUSH
87996: LD_VAR 0 2
88000: PUSH
88001: FOR_IN
88002: IFFALSE 88033
// if GetLives ( i ) < 1000 then
88004: LD_VAR 0 1
88008: PPUSH
88009: CALL_OW 256
88013: PUSH
88014: LD_INT 1000
88016: LESS
88017: IFFALSE 88031
// SetLives ( i , 1000 ) ;
88019: LD_VAR 0 1
88023: PPUSH
88024: LD_INT 1000
88026: PPUSH
88027: CALL_OW 234
88031: GO 88001
88033: POP
88034: POP
// until p > 20 ;
88035: LD_VAR 0 3
88039: PUSH
88040: LD_INT 20
88042: GREATER
88043: IFFALSE 87970
// end ;
88045: PPOPN 3
88047: END
// every 0 0$1 trigger StreamModeActive and sTime do
88048: LD_EXP 103
88052: PUSH
88053: LD_EXP 154
88057: AND
88058: IFFALSE 88093
88060: GO 88062
88062: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
88063: LD_INT 28
88065: PPUSH
88066: LD_OWVAR 2
88070: PPUSH
88071: LD_INT 2
88073: PPUSH
88074: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
88078: LD_INT 30
88080: PPUSH
88081: LD_OWVAR 2
88085: PPUSH
88086: LD_INT 2
88088: PPUSH
88089: CALL_OW 322
// end ;
88093: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
88094: LD_EXP 103
88098: PUSH
88099: LD_EXP 155
88103: AND
88104: IFFALSE 88225
88106: GO 88108
88108: DISABLE
88109: LD_INT 0
88111: PPUSH
88112: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
88113: LD_ADDR_VAR 0 2
88117: PUSH
88118: LD_INT 22
88120: PUSH
88121: LD_OWVAR 2
88125: PUSH
88126: EMPTY
88127: LIST
88128: LIST
88129: PUSH
88130: LD_INT 21
88132: PUSH
88133: LD_INT 1
88135: PUSH
88136: EMPTY
88137: LIST
88138: LIST
88139: PUSH
88140: LD_INT 3
88142: PUSH
88143: LD_INT 23
88145: PUSH
88146: LD_INT 0
88148: PUSH
88149: EMPTY
88150: LIST
88151: LIST
88152: PUSH
88153: EMPTY
88154: LIST
88155: LIST
88156: PUSH
88157: EMPTY
88158: LIST
88159: LIST
88160: LIST
88161: PPUSH
88162: CALL_OW 69
88166: ST_TO_ADDR
// if not tmp then
88167: LD_VAR 0 2
88171: NOT
88172: IFFALSE 88176
// exit ;
88174: GO 88225
// for i in tmp do
88176: LD_ADDR_VAR 0 1
88180: PUSH
88181: LD_VAR 0 2
88185: PUSH
88186: FOR_IN
88187: IFFALSE 88223
// begin if Crawls ( i ) then
88189: LD_VAR 0 1
88193: PPUSH
88194: CALL_OW 318
88198: IFFALSE 88209
// ComWalk ( i ) ;
88200: LD_VAR 0 1
88204: PPUSH
88205: CALL_OW 138
// SetClass ( i , 2 ) ;
88209: LD_VAR 0 1
88213: PPUSH
88214: LD_INT 2
88216: PPUSH
88217: CALL_OW 336
// end ;
88221: GO 88186
88223: POP
88224: POP
// end ;
88225: PPOPN 2
88227: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
88228: LD_EXP 103
88232: PUSH
88233: LD_EXP 156
88237: AND
88238: IFFALSE 88519
88240: GO 88242
88242: DISABLE
88243: LD_INT 0
88245: PPUSH
88246: PPUSH
88247: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
88248: LD_OWVAR 2
88252: PPUSH
88253: LD_INT 9
88255: PPUSH
88256: LD_INT 1
88258: PPUSH
88259: LD_INT 1
88261: PPUSH
88262: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
88266: LD_INT 9
88268: PPUSH
88269: LD_OWVAR 2
88273: PPUSH
88274: CALL_OW 343
// uc_side := 9 ;
88278: LD_ADDR_OWVAR 20
88282: PUSH
88283: LD_INT 9
88285: ST_TO_ADDR
// uc_nation := 2 ;
88286: LD_ADDR_OWVAR 21
88290: PUSH
88291: LD_INT 2
88293: ST_TO_ADDR
// hc_name := Dark Warrior ;
88294: LD_ADDR_OWVAR 26
88298: PUSH
88299: LD_STRING Dark Warrior
88301: ST_TO_ADDR
// hc_gallery :=  ;
88302: LD_ADDR_OWVAR 33
88306: PUSH
88307: LD_STRING 
88309: ST_TO_ADDR
// hc_noskilllimit := true ;
88310: LD_ADDR_OWVAR 76
88314: PUSH
88315: LD_INT 1
88317: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
88318: LD_ADDR_OWVAR 31
88322: PUSH
88323: LD_INT 30
88325: PUSH
88326: LD_INT 30
88328: PUSH
88329: LD_INT 30
88331: PUSH
88332: LD_INT 30
88334: PUSH
88335: EMPTY
88336: LIST
88337: LIST
88338: LIST
88339: LIST
88340: ST_TO_ADDR
// un := CreateHuman ;
88341: LD_ADDR_VAR 0 3
88345: PUSH
88346: CALL_OW 44
88350: ST_TO_ADDR
// hc_noskilllimit := false ;
88351: LD_ADDR_OWVAR 76
88355: PUSH
88356: LD_INT 0
88358: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
88359: LD_VAR 0 3
88363: PPUSH
88364: LD_INT 1
88366: PPUSH
88367: CALL_OW 51
// p := 0 ;
88371: LD_ADDR_VAR 0 2
88375: PUSH
88376: LD_INT 0
88378: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
88379: LD_INT 35
88381: PPUSH
88382: CALL_OW 67
// p := p + 1 ;
88386: LD_ADDR_VAR 0 2
88390: PUSH
88391: LD_VAR 0 2
88395: PUSH
88396: LD_INT 1
88398: PLUS
88399: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
88400: LD_VAR 0 3
88404: PPUSH
88405: CALL_OW 256
88409: PUSH
88410: LD_INT 1000
88412: LESS
88413: IFFALSE 88427
// SetLives ( un , 1000 ) ;
88415: LD_VAR 0 3
88419: PPUSH
88420: LD_INT 1000
88422: PPUSH
88423: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
88427: LD_VAR 0 3
88431: PPUSH
88432: LD_INT 81
88434: PUSH
88435: LD_OWVAR 2
88439: PUSH
88440: EMPTY
88441: LIST
88442: LIST
88443: PUSH
88444: LD_INT 91
88446: PUSH
88447: LD_VAR 0 3
88451: PUSH
88452: LD_INT 30
88454: PUSH
88455: EMPTY
88456: LIST
88457: LIST
88458: LIST
88459: PUSH
88460: EMPTY
88461: LIST
88462: LIST
88463: PPUSH
88464: CALL_OW 69
88468: PPUSH
88469: LD_VAR 0 3
88473: PPUSH
88474: CALL_OW 74
88478: PPUSH
88479: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
88483: LD_VAR 0 2
88487: PUSH
88488: LD_INT 60
88490: GREATER
88491: PUSH
88492: LD_VAR 0 3
88496: PPUSH
88497: CALL_OW 301
88501: OR
88502: IFFALSE 88379
// if un then
88504: LD_VAR 0 3
88508: IFFALSE 88519
// RemoveUnit ( un ) ;
88510: LD_VAR 0 3
88514: PPUSH
88515: CALL_OW 64
// end ; end_of_file
88519: PPOPN 3
88521: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
88522: LD_INT 0
88524: PPUSH
88525: PPUSH
88526: PPUSH
88527: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
88528: LD_VAR 0 1
88532: PPUSH
88533: CALL_OW 264
88537: PUSH
88538: LD_EXP 49
88542: EQUAL
88543: IFFALSE 88615
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
88545: LD_INT 68
88547: PPUSH
88548: LD_VAR 0 1
88552: PPUSH
88553: CALL_OW 255
88557: PPUSH
88558: CALL_OW 321
88562: PUSH
88563: LD_INT 2
88565: EQUAL
88566: IFFALSE 88578
// eff := 70 else
88568: LD_ADDR_VAR 0 4
88572: PUSH
88573: LD_INT 70
88575: ST_TO_ADDR
88576: GO 88586
// eff := 30 ;
88578: LD_ADDR_VAR 0 4
88582: PUSH
88583: LD_INT 30
88585: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
88586: LD_VAR 0 1
88590: PPUSH
88591: CALL_OW 250
88595: PPUSH
88596: LD_VAR 0 1
88600: PPUSH
88601: CALL_OW 251
88605: PPUSH
88606: LD_VAR 0 4
88610: PPUSH
88611: CALL_OW 495
// end ; end ;
88615: LD_VAR 0 2
88619: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
88620: LD_INT 0
88622: PPUSH
// end ;
88623: LD_VAR 0 4
88627: RET
// export function SOS_Command ( cmd ) ; begin
88628: LD_INT 0
88630: PPUSH
// end ;
88631: LD_VAR 0 2
88635: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
88636: LD_VAR 0 1
88640: PUSH
88641: LD_INT 255
88643: EQUAL
88644: PUSH
88645: LD_VAR 0 2
88649: PPUSH
88650: CALL_OW 264
88654: PUSH
88655: LD_INT 14
88657: PUSH
88658: LD_INT 53
88660: PUSH
88661: EMPTY
88662: LIST
88663: LIST
88664: IN
88665: AND
88666: PUSH
88667: LD_VAR 0 4
88671: PPUSH
88672: LD_VAR 0 5
88676: PPUSH
88677: CALL_OW 488
88681: AND
88682: IFFALSE 88706
// CutTreeXYR ( unit , x , y , 12 ) ;
88684: LD_VAR 0 2
88688: PPUSH
88689: LD_VAR 0 4
88693: PPUSH
88694: LD_VAR 0 5
88698: PPUSH
88699: LD_INT 12
88701: PPUSH
88702: CALL 88709 0 4
// end ;
88706: PPOPN 5
88708: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
88709: LD_INT 0
88711: PPUSH
88712: PPUSH
88713: PPUSH
88714: PPUSH
88715: PPUSH
88716: PPUSH
88717: PPUSH
88718: PPUSH
88719: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
88720: LD_VAR 0 1
88724: NOT
88725: PUSH
88726: LD_VAR 0 2
88730: PPUSH
88731: LD_VAR 0 3
88735: PPUSH
88736: CALL_OW 488
88740: NOT
88741: OR
88742: PUSH
88743: LD_VAR 0 4
88747: NOT
88748: OR
88749: IFFALSE 88753
// exit ;
88751: GO 89093
// list := [ ] ;
88753: LD_ADDR_VAR 0 13
88757: PUSH
88758: EMPTY
88759: ST_TO_ADDR
// if x - r < 0 then
88760: LD_VAR 0 2
88764: PUSH
88765: LD_VAR 0 4
88769: MINUS
88770: PUSH
88771: LD_INT 0
88773: LESS
88774: IFFALSE 88786
// min_x := 0 else
88776: LD_ADDR_VAR 0 7
88780: PUSH
88781: LD_INT 0
88783: ST_TO_ADDR
88784: GO 88802
// min_x := x - r ;
88786: LD_ADDR_VAR 0 7
88790: PUSH
88791: LD_VAR 0 2
88795: PUSH
88796: LD_VAR 0 4
88800: MINUS
88801: ST_TO_ADDR
// if y - r < 0 then
88802: LD_VAR 0 3
88806: PUSH
88807: LD_VAR 0 4
88811: MINUS
88812: PUSH
88813: LD_INT 0
88815: LESS
88816: IFFALSE 88828
// min_y := 0 else
88818: LD_ADDR_VAR 0 8
88822: PUSH
88823: LD_INT 0
88825: ST_TO_ADDR
88826: GO 88844
// min_y := y - r ;
88828: LD_ADDR_VAR 0 8
88832: PUSH
88833: LD_VAR 0 3
88837: PUSH
88838: LD_VAR 0 4
88842: MINUS
88843: ST_TO_ADDR
// max_x := x + r ;
88844: LD_ADDR_VAR 0 9
88848: PUSH
88849: LD_VAR 0 2
88853: PUSH
88854: LD_VAR 0 4
88858: PLUS
88859: ST_TO_ADDR
// max_y := y + r ;
88860: LD_ADDR_VAR 0 10
88864: PUSH
88865: LD_VAR 0 3
88869: PUSH
88870: LD_VAR 0 4
88874: PLUS
88875: ST_TO_ADDR
// for _x = min_x to max_x do
88876: LD_ADDR_VAR 0 11
88880: PUSH
88881: DOUBLE
88882: LD_VAR 0 7
88886: DEC
88887: ST_TO_ADDR
88888: LD_VAR 0 9
88892: PUSH
88893: FOR_TO
88894: IFFALSE 89011
// for _y = min_y to max_y do
88896: LD_ADDR_VAR 0 12
88900: PUSH
88901: DOUBLE
88902: LD_VAR 0 8
88906: DEC
88907: ST_TO_ADDR
88908: LD_VAR 0 10
88912: PUSH
88913: FOR_TO
88914: IFFALSE 89007
// begin if not ValidHex ( _x , _y ) then
88916: LD_VAR 0 11
88920: PPUSH
88921: LD_VAR 0 12
88925: PPUSH
88926: CALL_OW 488
88930: NOT
88931: IFFALSE 88935
// continue ;
88933: GO 88913
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
88935: LD_VAR 0 11
88939: PPUSH
88940: LD_VAR 0 12
88944: PPUSH
88945: CALL_OW 351
88949: PUSH
88950: LD_VAR 0 11
88954: PPUSH
88955: LD_VAR 0 12
88959: PPUSH
88960: CALL_OW 554
88964: AND
88965: IFFALSE 89005
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
88967: LD_ADDR_VAR 0 13
88971: PUSH
88972: LD_VAR 0 13
88976: PPUSH
88977: LD_VAR 0 13
88981: PUSH
88982: LD_INT 1
88984: PLUS
88985: PPUSH
88986: LD_VAR 0 11
88990: PUSH
88991: LD_VAR 0 12
88995: PUSH
88996: EMPTY
88997: LIST
88998: LIST
88999: PPUSH
89000: CALL_OW 2
89004: ST_TO_ADDR
// end ;
89005: GO 88913
89007: POP
89008: POP
89009: GO 88893
89011: POP
89012: POP
// if not list then
89013: LD_VAR 0 13
89017: NOT
89018: IFFALSE 89022
// exit ;
89020: GO 89093
// for i in list do
89022: LD_ADDR_VAR 0 6
89026: PUSH
89027: LD_VAR 0 13
89031: PUSH
89032: FOR_IN
89033: IFFALSE 89091
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
89035: LD_VAR 0 1
89039: PPUSH
89040: LD_STRING M
89042: PUSH
89043: LD_VAR 0 6
89047: PUSH
89048: LD_INT 1
89050: ARRAY
89051: PUSH
89052: LD_VAR 0 6
89056: PUSH
89057: LD_INT 2
89059: ARRAY
89060: PUSH
89061: LD_INT 0
89063: PUSH
89064: LD_INT 0
89066: PUSH
89067: LD_INT 0
89069: PUSH
89070: LD_INT 0
89072: PUSH
89073: EMPTY
89074: LIST
89075: LIST
89076: LIST
89077: LIST
89078: LIST
89079: LIST
89080: LIST
89081: PUSH
89082: EMPTY
89083: LIST
89084: PPUSH
89085: CALL_OW 447
89089: GO 89032
89091: POP
89092: POP
// end ; end_of_file
89093: LD_VAR 0 5
89097: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
89098: LD_INT 0
89100: PPUSH
89101: PPUSH
89102: PPUSH
89103: PPUSH
89104: PPUSH
89105: PPUSH
89106: PPUSH
89107: PPUSH
89108: PPUSH
89109: PPUSH
89110: PPUSH
89111: PPUSH
89112: PPUSH
89113: PPUSH
89114: PPUSH
89115: PPUSH
89116: PPUSH
89117: PPUSH
89118: PPUSH
89119: PPUSH
89120: PPUSH
89121: PPUSH
89122: PPUSH
89123: PPUSH
89124: PPUSH
89125: PPUSH
89126: PPUSH
89127: PPUSH
89128: PPUSH
89129: PPUSH
89130: PPUSH
89131: PPUSH
89132: PPUSH
89133: PPUSH
// if not list then
89134: LD_VAR 0 1
89138: NOT
89139: IFFALSE 89143
// exit ;
89141: GO 93802
// base := list [ 1 ] ;
89143: LD_ADDR_VAR 0 3
89147: PUSH
89148: LD_VAR 0 1
89152: PUSH
89153: LD_INT 1
89155: ARRAY
89156: ST_TO_ADDR
// group := list [ 2 ] ;
89157: LD_ADDR_VAR 0 4
89161: PUSH
89162: LD_VAR 0 1
89166: PUSH
89167: LD_INT 2
89169: ARRAY
89170: ST_TO_ADDR
// path := list [ 3 ] ;
89171: LD_ADDR_VAR 0 5
89175: PUSH
89176: LD_VAR 0 1
89180: PUSH
89181: LD_INT 3
89183: ARRAY
89184: ST_TO_ADDR
// flags := list [ 4 ] ;
89185: LD_ADDR_VAR 0 6
89189: PUSH
89190: LD_VAR 0 1
89194: PUSH
89195: LD_INT 4
89197: ARRAY
89198: ST_TO_ADDR
// mined := [ ] ;
89199: LD_ADDR_VAR 0 27
89203: PUSH
89204: EMPTY
89205: ST_TO_ADDR
// bombed := [ ] ;
89206: LD_ADDR_VAR 0 28
89210: PUSH
89211: EMPTY
89212: ST_TO_ADDR
// healers := [ ] ;
89213: LD_ADDR_VAR 0 31
89217: PUSH
89218: EMPTY
89219: ST_TO_ADDR
// to_heal := [ ] ;
89220: LD_ADDR_VAR 0 30
89224: PUSH
89225: EMPTY
89226: ST_TO_ADDR
// repairs := [ ] ;
89227: LD_ADDR_VAR 0 33
89231: PUSH
89232: EMPTY
89233: ST_TO_ADDR
// to_repair := [ ] ;
89234: LD_ADDR_VAR 0 32
89238: PUSH
89239: EMPTY
89240: ST_TO_ADDR
// if not group or not path then
89241: LD_VAR 0 4
89245: NOT
89246: PUSH
89247: LD_VAR 0 5
89251: NOT
89252: OR
89253: IFFALSE 89257
// exit ;
89255: GO 93802
// side := GetSide ( group [ 1 ] ) ;
89257: LD_ADDR_VAR 0 35
89261: PUSH
89262: LD_VAR 0 4
89266: PUSH
89267: LD_INT 1
89269: ARRAY
89270: PPUSH
89271: CALL_OW 255
89275: ST_TO_ADDR
// if flags then
89276: LD_VAR 0 6
89280: IFFALSE 89424
// begin f_ignore_area := flags [ 1 ] ;
89282: LD_ADDR_VAR 0 17
89286: PUSH
89287: LD_VAR 0 6
89291: PUSH
89292: LD_INT 1
89294: ARRAY
89295: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
89296: LD_ADDR_VAR 0 18
89300: PUSH
89301: LD_VAR 0 6
89305: PUSH
89306: LD_INT 2
89308: ARRAY
89309: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
89310: LD_ADDR_VAR 0 19
89314: PUSH
89315: LD_VAR 0 6
89319: PUSH
89320: LD_INT 3
89322: ARRAY
89323: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
89324: LD_ADDR_VAR 0 20
89328: PUSH
89329: LD_VAR 0 6
89333: PUSH
89334: LD_INT 4
89336: ARRAY
89337: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
89338: LD_ADDR_VAR 0 21
89342: PUSH
89343: LD_VAR 0 6
89347: PUSH
89348: LD_INT 5
89350: ARRAY
89351: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
89352: LD_ADDR_VAR 0 22
89356: PUSH
89357: LD_VAR 0 6
89361: PUSH
89362: LD_INT 6
89364: ARRAY
89365: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
89366: LD_ADDR_VAR 0 23
89370: PUSH
89371: LD_VAR 0 6
89375: PUSH
89376: LD_INT 7
89378: ARRAY
89379: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
89380: LD_ADDR_VAR 0 24
89384: PUSH
89385: LD_VAR 0 6
89389: PUSH
89390: LD_INT 8
89392: ARRAY
89393: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
89394: LD_ADDR_VAR 0 25
89398: PUSH
89399: LD_VAR 0 6
89403: PUSH
89404: LD_INT 9
89406: ARRAY
89407: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
89408: LD_ADDR_VAR 0 26
89412: PUSH
89413: LD_VAR 0 6
89417: PUSH
89418: LD_INT 10
89420: ARRAY
89421: ST_TO_ADDR
// end else
89422: GO 89504
// begin f_ignore_area := false ;
89424: LD_ADDR_VAR 0 17
89428: PUSH
89429: LD_INT 0
89431: ST_TO_ADDR
// f_capture := false ;
89432: LD_ADDR_VAR 0 18
89436: PUSH
89437: LD_INT 0
89439: ST_TO_ADDR
// f_ignore_civ := false ;
89440: LD_ADDR_VAR 0 19
89444: PUSH
89445: LD_INT 0
89447: ST_TO_ADDR
// f_murder := false ;
89448: LD_ADDR_VAR 0 20
89452: PUSH
89453: LD_INT 0
89455: ST_TO_ADDR
// f_mines := false ;
89456: LD_ADDR_VAR 0 21
89460: PUSH
89461: LD_INT 0
89463: ST_TO_ADDR
// f_repair := false ;
89464: LD_ADDR_VAR 0 22
89468: PUSH
89469: LD_INT 0
89471: ST_TO_ADDR
// f_heal := false ;
89472: LD_ADDR_VAR 0 23
89476: PUSH
89477: LD_INT 0
89479: ST_TO_ADDR
// f_spacetime := false ;
89480: LD_ADDR_VAR 0 24
89484: PUSH
89485: LD_INT 0
89487: ST_TO_ADDR
// f_attack_depot := false ;
89488: LD_ADDR_VAR 0 25
89492: PUSH
89493: LD_INT 0
89495: ST_TO_ADDR
// f_crawl := false ;
89496: LD_ADDR_VAR 0 26
89500: PUSH
89501: LD_INT 0
89503: ST_TO_ADDR
// end ; if f_heal then
89504: LD_VAR 0 23
89508: IFFALSE 89535
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
89510: LD_ADDR_VAR 0 31
89514: PUSH
89515: LD_VAR 0 4
89519: PPUSH
89520: LD_INT 25
89522: PUSH
89523: LD_INT 4
89525: PUSH
89526: EMPTY
89527: LIST
89528: LIST
89529: PPUSH
89530: CALL_OW 72
89534: ST_TO_ADDR
// if f_repair then
89535: LD_VAR 0 22
89539: IFFALSE 89566
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
89541: LD_ADDR_VAR 0 33
89545: PUSH
89546: LD_VAR 0 4
89550: PPUSH
89551: LD_INT 25
89553: PUSH
89554: LD_INT 3
89556: PUSH
89557: EMPTY
89558: LIST
89559: LIST
89560: PPUSH
89561: CALL_OW 72
89565: ST_TO_ADDR
// units_path := [ ] ;
89566: LD_ADDR_VAR 0 16
89570: PUSH
89571: EMPTY
89572: ST_TO_ADDR
// for i = 1 to group do
89573: LD_ADDR_VAR 0 7
89577: PUSH
89578: DOUBLE
89579: LD_INT 1
89581: DEC
89582: ST_TO_ADDR
89583: LD_VAR 0 4
89587: PUSH
89588: FOR_TO
89589: IFFALSE 89618
// units_path := Replace ( units_path , i , path ) ;
89591: LD_ADDR_VAR 0 16
89595: PUSH
89596: LD_VAR 0 16
89600: PPUSH
89601: LD_VAR 0 7
89605: PPUSH
89606: LD_VAR 0 5
89610: PPUSH
89611: CALL_OW 1
89615: ST_TO_ADDR
89616: GO 89588
89618: POP
89619: POP
// repeat for i = group downto 1 do
89620: LD_ADDR_VAR 0 7
89624: PUSH
89625: DOUBLE
89626: LD_VAR 0 4
89630: INC
89631: ST_TO_ADDR
89632: LD_INT 1
89634: PUSH
89635: FOR_DOWNTO
89636: IFFALSE 93758
// begin wait ( 5 ) ;
89638: LD_INT 5
89640: PPUSH
89641: CALL_OW 67
// tmp := [ ] ;
89645: LD_ADDR_VAR 0 14
89649: PUSH
89650: EMPTY
89651: ST_TO_ADDR
// attacking := false ;
89652: LD_ADDR_VAR 0 29
89656: PUSH
89657: LD_INT 0
89659: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
89660: LD_VAR 0 4
89664: PUSH
89665: LD_VAR 0 7
89669: ARRAY
89670: PPUSH
89671: CALL_OW 301
89675: PUSH
89676: LD_VAR 0 4
89680: PUSH
89681: LD_VAR 0 7
89685: ARRAY
89686: NOT
89687: OR
89688: IFFALSE 89797
// begin if GetType ( group [ i ] ) = unit_human then
89690: LD_VAR 0 4
89694: PUSH
89695: LD_VAR 0 7
89699: ARRAY
89700: PPUSH
89701: CALL_OW 247
89705: PUSH
89706: LD_INT 1
89708: EQUAL
89709: IFFALSE 89755
// begin to_heal := to_heal diff group [ i ] ;
89711: LD_ADDR_VAR 0 30
89715: PUSH
89716: LD_VAR 0 30
89720: PUSH
89721: LD_VAR 0 4
89725: PUSH
89726: LD_VAR 0 7
89730: ARRAY
89731: DIFF
89732: ST_TO_ADDR
// healers := healers diff group [ i ] ;
89733: LD_ADDR_VAR 0 31
89737: PUSH
89738: LD_VAR 0 31
89742: PUSH
89743: LD_VAR 0 4
89747: PUSH
89748: LD_VAR 0 7
89752: ARRAY
89753: DIFF
89754: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
89755: LD_ADDR_VAR 0 4
89759: PUSH
89760: LD_VAR 0 4
89764: PPUSH
89765: LD_VAR 0 7
89769: PPUSH
89770: CALL_OW 3
89774: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
89775: LD_ADDR_VAR 0 16
89779: PUSH
89780: LD_VAR 0 16
89784: PPUSH
89785: LD_VAR 0 7
89789: PPUSH
89790: CALL_OW 3
89794: ST_TO_ADDR
// continue ;
89795: GO 89635
// end ; if f_repair then
89797: LD_VAR 0 22
89801: IFFALSE 90290
// begin if GetType ( group [ i ] ) = unit_vehicle then
89803: LD_VAR 0 4
89807: PUSH
89808: LD_VAR 0 7
89812: ARRAY
89813: PPUSH
89814: CALL_OW 247
89818: PUSH
89819: LD_INT 2
89821: EQUAL
89822: IFFALSE 90012
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
89824: LD_VAR 0 4
89828: PUSH
89829: LD_VAR 0 7
89833: ARRAY
89834: PPUSH
89835: CALL_OW 256
89839: PUSH
89840: LD_INT 700
89842: LESS
89843: PUSH
89844: LD_VAR 0 4
89848: PUSH
89849: LD_VAR 0 7
89853: ARRAY
89854: PUSH
89855: LD_VAR 0 32
89859: IN
89860: NOT
89861: AND
89862: IFFALSE 89886
// to_repair := to_repair union group [ i ] ;
89864: LD_ADDR_VAR 0 32
89868: PUSH
89869: LD_VAR 0 32
89873: PUSH
89874: LD_VAR 0 4
89878: PUSH
89879: LD_VAR 0 7
89883: ARRAY
89884: UNION
89885: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
89886: LD_VAR 0 4
89890: PUSH
89891: LD_VAR 0 7
89895: ARRAY
89896: PPUSH
89897: CALL_OW 256
89901: PUSH
89902: LD_INT 1000
89904: EQUAL
89905: PUSH
89906: LD_VAR 0 4
89910: PUSH
89911: LD_VAR 0 7
89915: ARRAY
89916: PUSH
89917: LD_VAR 0 32
89921: IN
89922: AND
89923: IFFALSE 89947
// to_repair := to_repair diff group [ i ] ;
89925: LD_ADDR_VAR 0 32
89929: PUSH
89930: LD_VAR 0 32
89934: PUSH
89935: LD_VAR 0 4
89939: PUSH
89940: LD_VAR 0 7
89944: ARRAY
89945: DIFF
89946: ST_TO_ADDR
// if group [ i ] in to_repair then
89947: LD_VAR 0 4
89951: PUSH
89952: LD_VAR 0 7
89956: ARRAY
89957: PUSH
89958: LD_VAR 0 32
89962: IN
89963: IFFALSE 90010
// begin if not IsInArea ( group [ i ] , f_repair ) then
89965: LD_VAR 0 4
89969: PUSH
89970: LD_VAR 0 7
89974: ARRAY
89975: PPUSH
89976: LD_VAR 0 22
89980: PPUSH
89981: CALL_OW 308
89985: NOT
89986: IFFALSE 90008
// ComMoveToArea ( group [ i ] , f_repair ) ;
89988: LD_VAR 0 4
89992: PUSH
89993: LD_VAR 0 7
89997: ARRAY
89998: PPUSH
89999: LD_VAR 0 22
90003: PPUSH
90004: CALL_OW 113
// continue ;
90008: GO 89635
// end ; end else
90010: GO 90290
// if group [ i ] in repairs then
90012: LD_VAR 0 4
90016: PUSH
90017: LD_VAR 0 7
90021: ARRAY
90022: PUSH
90023: LD_VAR 0 33
90027: IN
90028: IFFALSE 90290
// begin if IsInUnit ( group [ i ] ) then
90030: LD_VAR 0 4
90034: PUSH
90035: LD_VAR 0 7
90039: ARRAY
90040: PPUSH
90041: CALL_OW 310
90045: IFFALSE 90113
// begin z := IsInUnit ( group [ i ] ) ;
90047: LD_ADDR_VAR 0 13
90051: PUSH
90052: LD_VAR 0 4
90056: PUSH
90057: LD_VAR 0 7
90061: ARRAY
90062: PPUSH
90063: CALL_OW 310
90067: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
90068: LD_VAR 0 13
90072: PUSH
90073: LD_VAR 0 32
90077: IN
90078: PUSH
90079: LD_VAR 0 13
90083: PPUSH
90084: LD_VAR 0 22
90088: PPUSH
90089: CALL_OW 308
90093: AND
90094: IFFALSE 90111
// ComExitVehicle ( group [ i ] ) ;
90096: LD_VAR 0 4
90100: PUSH
90101: LD_VAR 0 7
90105: ARRAY
90106: PPUSH
90107: CALL_OW 121
// end else
90111: GO 90290
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
90113: LD_ADDR_VAR 0 13
90117: PUSH
90118: LD_VAR 0 4
90122: PPUSH
90123: LD_INT 95
90125: PUSH
90126: LD_VAR 0 22
90130: PUSH
90131: EMPTY
90132: LIST
90133: LIST
90134: PUSH
90135: LD_INT 58
90137: PUSH
90138: EMPTY
90139: LIST
90140: PUSH
90141: EMPTY
90142: LIST
90143: LIST
90144: PPUSH
90145: CALL_OW 72
90149: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
90150: LD_VAR 0 4
90154: PUSH
90155: LD_VAR 0 7
90159: ARRAY
90160: PPUSH
90161: CALL_OW 314
90165: NOT
90166: IFFALSE 90288
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
90168: LD_ADDR_VAR 0 10
90172: PUSH
90173: LD_VAR 0 13
90177: PPUSH
90178: LD_VAR 0 4
90182: PUSH
90183: LD_VAR 0 7
90187: ARRAY
90188: PPUSH
90189: CALL_OW 74
90193: ST_TO_ADDR
// if not x then
90194: LD_VAR 0 10
90198: NOT
90199: IFFALSE 90203
// continue ;
90201: GO 89635
// if GetLives ( x ) < 1000 then
90203: LD_VAR 0 10
90207: PPUSH
90208: CALL_OW 256
90212: PUSH
90213: LD_INT 1000
90215: LESS
90216: IFFALSE 90240
// ComRepairVehicle ( group [ i ] , x ) else
90218: LD_VAR 0 4
90222: PUSH
90223: LD_VAR 0 7
90227: ARRAY
90228: PPUSH
90229: LD_VAR 0 10
90233: PPUSH
90234: CALL_OW 129
90238: GO 90288
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
90240: LD_VAR 0 23
90244: PUSH
90245: LD_VAR 0 4
90249: PUSH
90250: LD_VAR 0 7
90254: ARRAY
90255: PPUSH
90256: CALL_OW 256
90260: PUSH
90261: LD_INT 1000
90263: LESS
90264: AND
90265: NOT
90266: IFFALSE 90288
// ComEnterUnit ( group [ i ] , x ) ;
90268: LD_VAR 0 4
90272: PUSH
90273: LD_VAR 0 7
90277: ARRAY
90278: PPUSH
90279: LD_VAR 0 10
90283: PPUSH
90284: CALL_OW 120
// end ; continue ;
90288: GO 89635
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
90290: LD_VAR 0 23
90294: PUSH
90295: LD_VAR 0 4
90299: PUSH
90300: LD_VAR 0 7
90304: ARRAY
90305: PPUSH
90306: CALL_OW 247
90310: PUSH
90311: LD_INT 1
90313: EQUAL
90314: AND
90315: IFFALSE 90793
// begin if group [ i ] in healers then
90317: LD_VAR 0 4
90321: PUSH
90322: LD_VAR 0 7
90326: ARRAY
90327: PUSH
90328: LD_VAR 0 31
90332: IN
90333: IFFALSE 90606
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
90335: LD_VAR 0 4
90339: PUSH
90340: LD_VAR 0 7
90344: ARRAY
90345: PPUSH
90346: LD_VAR 0 23
90350: PPUSH
90351: CALL_OW 308
90355: NOT
90356: PUSH
90357: LD_VAR 0 4
90361: PUSH
90362: LD_VAR 0 7
90366: ARRAY
90367: PPUSH
90368: CALL_OW 314
90372: NOT
90373: AND
90374: IFFALSE 90398
// ComMoveToArea ( group [ i ] , f_heal ) else
90376: LD_VAR 0 4
90380: PUSH
90381: LD_VAR 0 7
90385: ARRAY
90386: PPUSH
90387: LD_VAR 0 23
90391: PPUSH
90392: CALL_OW 113
90396: GO 90604
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
90398: LD_VAR 0 4
90402: PUSH
90403: LD_VAR 0 7
90407: ARRAY
90408: PPUSH
90409: CALL 44500 0 1
90413: PPUSH
90414: CALL_OW 256
90418: PUSH
90419: LD_INT 1000
90421: EQUAL
90422: IFFALSE 90441
// ComStop ( group [ i ] ) else
90424: LD_VAR 0 4
90428: PUSH
90429: LD_VAR 0 7
90433: ARRAY
90434: PPUSH
90435: CALL_OW 141
90439: GO 90604
// if not HasTask ( group [ i ] ) and to_heal then
90441: LD_VAR 0 4
90445: PUSH
90446: LD_VAR 0 7
90450: ARRAY
90451: PPUSH
90452: CALL_OW 314
90456: NOT
90457: PUSH
90458: LD_VAR 0 30
90462: AND
90463: IFFALSE 90604
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
90465: LD_ADDR_VAR 0 13
90469: PUSH
90470: LD_VAR 0 30
90474: PPUSH
90475: LD_INT 3
90477: PUSH
90478: LD_INT 54
90480: PUSH
90481: EMPTY
90482: LIST
90483: PUSH
90484: EMPTY
90485: LIST
90486: LIST
90487: PPUSH
90488: CALL_OW 72
90492: PPUSH
90493: LD_VAR 0 4
90497: PUSH
90498: LD_VAR 0 7
90502: ARRAY
90503: PPUSH
90504: CALL_OW 74
90508: ST_TO_ADDR
// if z then
90509: LD_VAR 0 13
90513: IFFALSE 90604
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
90515: LD_INT 91
90517: PUSH
90518: LD_VAR 0 13
90522: PUSH
90523: LD_INT 10
90525: PUSH
90526: EMPTY
90527: LIST
90528: LIST
90529: LIST
90530: PUSH
90531: LD_INT 81
90533: PUSH
90534: LD_VAR 0 13
90538: PPUSH
90539: CALL_OW 255
90543: PUSH
90544: EMPTY
90545: LIST
90546: LIST
90547: PUSH
90548: EMPTY
90549: LIST
90550: LIST
90551: PPUSH
90552: CALL_OW 69
90556: PUSH
90557: LD_INT 0
90559: EQUAL
90560: IFFALSE 90584
// ComHeal ( group [ i ] , z ) else
90562: LD_VAR 0 4
90566: PUSH
90567: LD_VAR 0 7
90571: ARRAY
90572: PPUSH
90573: LD_VAR 0 13
90577: PPUSH
90578: CALL_OW 128
90582: GO 90604
// ComMoveToArea ( group [ i ] , f_heal ) ;
90584: LD_VAR 0 4
90588: PUSH
90589: LD_VAR 0 7
90593: ARRAY
90594: PPUSH
90595: LD_VAR 0 23
90599: PPUSH
90600: CALL_OW 113
// end ; continue ;
90604: GO 89635
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
90606: LD_VAR 0 4
90610: PUSH
90611: LD_VAR 0 7
90615: ARRAY
90616: PPUSH
90617: CALL_OW 256
90621: PUSH
90622: LD_INT 700
90624: LESS
90625: PUSH
90626: LD_VAR 0 4
90630: PUSH
90631: LD_VAR 0 7
90635: ARRAY
90636: PUSH
90637: LD_VAR 0 30
90641: IN
90642: NOT
90643: AND
90644: IFFALSE 90668
// to_heal := to_heal union group [ i ] ;
90646: LD_ADDR_VAR 0 30
90650: PUSH
90651: LD_VAR 0 30
90655: PUSH
90656: LD_VAR 0 4
90660: PUSH
90661: LD_VAR 0 7
90665: ARRAY
90666: UNION
90667: ST_TO_ADDR
// if group [ i ] in to_heal then
90668: LD_VAR 0 4
90672: PUSH
90673: LD_VAR 0 7
90677: ARRAY
90678: PUSH
90679: LD_VAR 0 30
90683: IN
90684: IFFALSE 90793
// begin if GetLives ( group [ i ] ) = 1000 then
90686: LD_VAR 0 4
90690: PUSH
90691: LD_VAR 0 7
90695: ARRAY
90696: PPUSH
90697: CALL_OW 256
90701: PUSH
90702: LD_INT 1000
90704: EQUAL
90705: IFFALSE 90731
// to_heal := to_heal diff group [ i ] else
90707: LD_ADDR_VAR 0 30
90711: PUSH
90712: LD_VAR 0 30
90716: PUSH
90717: LD_VAR 0 4
90721: PUSH
90722: LD_VAR 0 7
90726: ARRAY
90727: DIFF
90728: ST_TO_ADDR
90729: GO 90793
// begin if not IsInArea ( group [ i ] , to_heal ) then
90731: LD_VAR 0 4
90735: PUSH
90736: LD_VAR 0 7
90740: ARRAY
90741: PPUSH
90742: LD_VAR 0 30
90746: PPUSH
90747: CALL_OW 308
90751: NOT
90752: IFFALSE 90776
// ComMoveToArea ( group [ i ] , f_heal ) else
90754: LD_VAR 0 4
90758: PUSH
90759: LD_VAR 0 7
90763: ARRAY
90764: PPUSH
90765: LD_VAR 0 23
90769: PPUSH
90770: CALL_OW 113
90774: GO 90791
// ComHold ( group [ i ] ) ;
90776: LD_VAR 0 4
90780: PUSH
90781: LD_VAR 0 7
90785: ARRAY
90786: PPUSH
90787: CALL_OW 140
// continue ;
90791: GO 89635
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
90793: LD_VAR 0 4
90797: PUSH
90798: LD_VAR 0 7
90802: ARRAY
90803: PPUSH
90804: LD_INT 10
90806: PPUSH
90807: CALL 42920 0 2
90811: NOT
90812: PUSH
90813: LD_VAR 0 16
90817: PUSH
90818: LD_VAR 0 7
90822: ARRAY
90823: PUSH
90824: EMPTY
90825: EQUAL
90826: NOT
90827: AND
90828: IFFALSE 91094
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
90830: LD_VAR 0 4
90834: PUSH
90835: LD_VAR 0 7
90839: ARRAY
90840: PPUSH
90841: CALL_OW 262
90845: PUSH
90846: LD_INT 1
90848: PUSH
90849: LD_INT 2
90851: PUSH
90852: EMPTY
90853: LIST
90854: LIST
90855: IN
90856: IFFALSE 90897
// if GetFuel ( group [ i ] ) < 10 then
90858: LD_VAR 0 4
90862: PUSH
90863: LD_VAR 0 7
90867: ARRAY
90868: PPUSH
90869: CALL_OW 261
90873: PUSH
90874: LD_INT 10
90876: LESS
90877: IFFALSE 90897
// SetFuel ( group [ i ] , 12 ) ;
90879: LD_VAR 0 4
90883: PUSH
90884: LD_VAR 0 7
90888: ARRAY
90889: PPUSH
90890: LD_INT 12
90892: PPUSH
90893: CALL_OW 240
// if units_path [ i ] then
90897: LD_VAR 0 16
90901: PUSH
90902: LD_VAR 0 7
90906: ARRAY
90907: IFFALSE 91092
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
90909: LD_VAR 0 4
90913: PUSH
90914: LD_VAR 0 7
90918: ARRAY
90919: PPUSH
90920: LD_VAR 0 16
90924: PUSH
90925: LD_VAR 0 7
90929: ARRAY
90930: PUSH
90931: LD_INT 1
90933: ARRAY
90934: PUSH
90935: LD_INT 1
90937: ARRAY
90938: PPUSH
90939: LD_VAR 0 16
90943: PUSH
90944: LD_VAR 0 7
90948: ARRAY
90949: PUSH
90950: LD_INT 1
90952: ARRAY
90953: PUSH
90954: LD_INT 2
90956: ARRAY
90957: PPUSH
90958: CALL_OW 297
90962: PUSH
90963: LD_INT 6
90965: GREATER
90966: IFFALSE 91041
// begin if not HasTask ( group [ i ] ) then
90968: LD_VAR 0 4
90972: PUSH
90973: LD_VAR 0 7
90977: ARRAY
90978: PPUSH
90979: CALL_OW 314
90983: NOT
90984: IFFALSE 91039
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
90986: LD_VAR 0 4
90990: PUSH
90991: LD_VAR 0 7
90995: ARRAY
90996: PPUSH
90997: LD_VAR 0 16
91001: PUSH
91002: LD_VAR 0 7
91006: ARRAY
91007: PUSH
91008: LD_INT 1
91010: ARRAY
91011: PUSH
91012: LD_INT 1
91014: ARRAY
91015: PPUSH
91016: LD_VAR 0 16
91020: PUSH
91021: LD_VAR 0 7
91025: ARRAY
91026: PUSH
91027: LD_INT 1
91029: ARRAY
91030: PUSH
91031: LD_INT 2
91033: ARRAY
91034: PPUSH
91035: CALL_OW 114
// end else
91039: GO 91092
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
91041: LD_ADDR_VAR 0 15
91045: PUSH
91046: LD_VAR 0 16
91050: PUSH
91051: LD_VAR 0 7
91055: ARRAY
91056: PPUSH
91057: LD_INT 1
91059: PPUSH
91060: CALL_OW 3
91064: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
91065: LD_ADDR_VAR 0 16
91069: PUSH
91070: LD_VAR 0 16
91074: PPUSH
91075: LD_VAR 0 7
91079: PPUSH
91080: LD_VAR 0 15
91084: PPUSH
91085: CALL_OW 1
91089: ST_TO_ADDR
// continue ;
91090: GO 89635
// end ; end ; end else
91092: GO 93756
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
91094: LD_ADDR_VAR 0 14
91098: PUSH
91099: LD_INT 81
91101: PUSH
91102: LD_VAR 0 4
91106: PUSH
91107: LD_VAR 0 7
91111: ARRAY
91112: PPUSH
91113: CALL_OW 255
91117: PUSH
91118: EMPTY
91119: LIST
91120: LIST
91121: PPUSH
91122: CALL_OW 69
91126: ST_TO_ADDR
// if not tmp then
91127: LD_VAR 0 14
91131: NOT
91132: IFFALSE 91136
// continue ;
91134: GO 89635
// if f_ignore_area then
91136: LD_VAR 0 17
91140: IFFALSE 91228
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
91142: LD_ADDR_VAR 0 15
91146: PUSH
91147: LD_VAR 0 14
91151: PPUSH
91152: LD_INT 3
91154: PUSH
91155: LD_INT 92
91157: PUSH
91158: LD_VAR 0 17
91162: PUSH
91163: LD_INT 1
91165: ARRAY
91166: PUSH
91167: LD_VAR 0 17
91171: PUSH
91172: LD_INT 2
91174: ARRAY
91175: PUSH
91176: LD_VAR 0 17
91180: PUSH
91181: LD_INT 3
91183: ARRAY
91184: PUSH
91185: EMPTY
91186: LIST
91187: LIST
91188: LIST
91189: LIST
91190: PUSH
91191: EMPTY
91192: LIST
91193: LIST
91194: PPUSH
91195: CALL_OW 72
91199: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
91200: LD_VAR 0 14
91204: PUSH
91205: LD_VAR 0 15
91209: DIFF
91210: IFFALSE 91228
// tmp := tmp diff tmp2 ;
91212: LD_ADDR_VAR 0 14
91216: PUSH
91217: LD_VAR 0 14
91221: PUSH
91222: LD_VAR 0 15
91226: DIFF
91227: ST_TO_ADDR
// end ; if not f_murder then
91228: LD_VAR 0 20
91232: NOT
91233: IFFALSE 91291
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
91235: LD_ADDR_VAR 0 15
91239: PUSH
91240: LD_VAR 0 14
91244: PPUSH
91245: LD_INT 3
91247: PUSH
91248: LD_INT 50
91250: PUSH
91251: EMPTY
91252: LIST
91253: PUSH
91254: EMPTY
91255: LIST
91256: LIST
91257: PPUSH
91258: CALL_OW 72
91262: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
91263: LD_VAR 0 14
91267: PUSH
91268: LD_VAR 0 15
91272: DIFF
91273: IFFALSE 91291
// tmp := tmp diff tmp2 ;
91275: LD_ADDR_VAR 0 14
91279: PUSH
91280: LD_VAR 0 14
91284: PUSH
91285: LD_VAR 0 15
91289: DIFF
91290: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
91291: LD_ADDR_VAR 0 14
91295: PUSH
91296: LD_VAR 0 4
91300: PUSH
91301: LD_VAR 0 7
91305: ARRAY
91306: PPUSH
91307: LD_VAR 0 14
91311: PPUSH
91312: LD_INT 1
91314: PPUSH
91315: LD_INT 1
91317: PPUSH
91318: CALL 16563 0 4
91322: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
91323: LD_VAR 0 4
91327: PUSH
91328: LD_VAR 0 7
91332: ARRAY
91333: PPUSH
91334: CALL_OW 257
91338: PUSH
91339: LD_INT 1
91341: EQUAL
91342: IFFALSE 91790
// begin if WantPlant ( group [ i ] ) then
91344: LD_VAR 0 4
91348: PUSH
91349: LD_VAR 0 7
91353: ARRAY
91354: PPUSH
91355: CALL 16064 0 1
91359: IFFALSE 91363
// continue ;
91361: GO 89635
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
91363: LD_VAR 0 18
91367: PUSH
91368: LD_VAR 0 4
91372: PUSH
91373: LD_VAR 0 7
91377: ARRAY
91378: PPUSH
91379: CALL_OW 310
91383: NOT
91384: AND
91385: PUSH
91386: LD_VAR 0 14
91390: PUSH
91391: LD_INT 1
91393: ARRAY
91394: PUSH
91395: LD_VAR 0 14
91399: PPUSH
91400: LD_INT 21
91402: PUSH
91403: LD_INT 2
91405: PUSH
91406: EMPTY
91407: LIST
91408: LIST
91409: PUSH
91410: LD_INT 58
91412: PUSH
91413: EMPTY
91414: LIST
91415: PUSH
91416: EMPTY
91417: LIST
91418: LIST
91419: PPUSH
91420: CALL_OW 72
91424: IN
91425: AND
91426: IFFALSE 91462
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
91428: LD_VAR 0 4
91432: PUSH
91433: LD_VAR 0 7
91437: ARRAY
91438: PPUSH
91439: LD_VAR 0 14
91443: PUSH
91444: LD_INT 1
91446: ARRAY
91447: PPUSH
91448: CALL_OW 120
// attacking := true ;
91452: LD_ADDR_VAR 0 29
91456: PUSH
91457: LD_INT 1
91459: ST_TO_ADDR
// continue ;
91460: GO 89635
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
91462: LD_VAR 0 26
91466: PUSH
91467: LD_VAR 0 4
91471: PUSH
91472: LD_VAR 0 7
91476: ARRAY
91477: PPUSH
91478: CALL_OW 257
91482: PUSH
91483: LD_INT 1
91485: EQUAL
91486: AND
91487: PUSH
91488: LD_VAR 0 4
91492: PUSH
91493: LD_VAR 0 7
91497: ARRAY
91498: PPUSH
91499: CALL_OW 256
91503: PUSH
91504: LD_INT 800
91506: LESS
91507: AND
91508: PUSH
91509: LD_VAR 0 4
91513: PUSH
91514: LD_VAR 0 7
91518: ARRAY
91519: PPUSH
91520: CALL_OW 318
91524: NOT
91525: AND
91526: IFFALSE 91543
// ComCrawl ( group [ i ] ) ;
91528: LD_VAR 0 4
91532: PUSH
91533: LD_VAR 0 7
91537: ARRAY
91538: PPUSH
91539: CALL_OW 137
// if f_mines then
91543: LD_VAR 0 21
91547: IFFALSE 91790
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
91549: LD_VAR 0 14
91553: PUSH
91554: LD_INT 1
91556: ARRAY
91557: PPUSH
91558: CALL_OW 247
91562: PUSH
91563: LD_INT 3
91565: EQUAL
91566: PUSH
91567: LD_VAR 0 14
91571: PUSH
91572: LD_INT 1
91574: ARRAY
91575: PUSH
91576: LD_VAR 0 27
91580: IN
91581: NOT
91582: AND
91583: IFFALSE 91790
// begin x := GetX ( tmp [ 1 ] ) ;
91585: LD_ADDR_VAR 0 10
91589: PUSH
91590: LD_VAR 0 14
91594: PUSH
91595: LD_INT 1
91597: ARRAY
91598: PPUSH
91599: CALL_OW 250
91603: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
91604: LD_ADDR_VAR 0 11
91608: PUSH
91609: LD_VAR 0 14
91613: PUSH
91614: LD_INT 1
91616: ARRAY
91617: PPUSH
91618: CALL_OW 251
91622: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
91623: LD_ADDR_VAR 0 12
91627: PUSH
91628: LD_VAR 0 4
91632: PUSH
91633: LD_VAR 0 7
91637: ARRAY
91638: PPUSH
91639: CALL 43005 0 1
91643: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
91644: LD_VAR 0 4
91648: PUSH
91649: LD_VAR 0 7
91653: ARRAY
91654: PPUSH
91655: LD_VAR 0 10
91659: PPUSH
91660: LD_VAR 0 11
91664: PPUSH
91665: LD_VAR 0 14
91669: PUSH
91670: LD_INT 1
91672: ARRAY
91673: PPUSH
91674: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
91678: LD_VAR 0 4
91682: PUSH
91683: LD_VAR 0 7
91687: ARRAY
91688: PPUSH
91689: LD_VAR 0 10
91693: PPUSH
91694: LD_VAR 0 12
91698: PPUSH
91699: LD_INT 7
91701: PPUSH
91702: CALL_OW 272
91706: PPUSH
91707: LD_VAR 0 11
91711: PPUSH
91712: LD_VAR 0 12
91716: PPUSH
91717: LD_INT 7
91719: PPUSH
91720: CALL_OW 273
91724: PPUSH
91725: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
91729: LD_VAR 0 4
91733: PUSH
91734: LD_VAR 0 7
91738: ARRAY
91739: PPUSH
91740: LD_INT 71
91742: PPUSH
91743: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
91747: LD_ADDR_VAR 0 27
91751: PUSH
91752: LD_VAR 0 27
91756: PPUSH
91757: LD_VAR 0 27
91761: PUSH
91762: LD_INT 1
91764: PLUS
91765: PPUSH
91766: LD_VAR 0 14
91770: PUSH
91771: LD_INT 1
91773: ARRAY
91774: PPUSH
91775: CALL_OW 1
91779: ST_TO_ADDR
// attacking := true ;
91780: LD_ADDR_VAR 0 29
91784: PUSH
91785: LD_INT 1
91787: ST_TO_ADDR
// continue ;
91788: GO 89635
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
91790: LD_VAR 0 4
91794: PUSH
91795: LD_VAR 0 7
91799: ARRAY
91800: PPUSH
91801: CALL_OW 257
91805: PUSH
91806: LD_INT 17
91808: EQUAL
91809: PUSH
91810: LD_VAR 0 4
91814: PUSH
91815: LD_VAR 0 7
91819: ARRAY
91820: PPUSH
91821: CALL_OW 110
91825: PUSH
91826: LD_INT 71
91828: EQUAL
91829: NOT
91830: AND
91831: IFFALSE 91977
// begin attacking := false ;
91833: LD_ADDR_VAR 0 29
91837: PUSH
91838: LD_INT 0
91840: ST_TO_ADDR
// k := 5 ;
91841: LD_ADDR_VAR 0 9
91845: PUSH
91846: LD_INT 5
91848: ST_TO_ADDR
// if tmp < k then
91849: LD_VAR 0 14
91853: PUSH
91854: LD_VAR 0 9
91858: LESS
91859: IFFALSE 91871
// k := tmp ;
91861: LD_ADDR_VAR 0 9
91865: PUSH
91866: LD_VAR 0 14
91870: ST_TO_ADDR
// for j = 1 to k do
91871: LD_ADDR_VAR 0 8
91875: PUSH
91876: DOUBLE
91877: LD_INT 1
91879: DEC
91880: ST_TO_ADDR
91881: LD_VAR 0 9
91885: PUSH
91886: FOR_TO
91887: IFFALSE 91975
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
91889: LD_VAR 0 14
91893: PUSH
91894: LD_VAR 0 8
91898: ARRAY
91899: PUSH
91900: LD_VAR 0 14
91904: PPUSH
91905: LD_INT 58
91907: PUSH
91908: EMPTY
91909: LIST
91910: PPUSH
91911: CALL_OW 72
91915: IN
91916: NOT
91917: IFFALSE 91973
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
91919: LD_VAR 0 4
91923: PUSH
91924: LD_VAR 0 7
91928: ARRAY
91929: PPUSH
91930: LD_VAR 0 14
91934: PUSH
91935: LD_VAR 0 8
91939: ARRAY
91940: PPUSH
91941: CALL_OW 115
// attacking := true ;
91945: LD_ADDR_VAR 0 29
91949: PUSH
91950: LD_INT 1
91952: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
91953: LD_VAR 0 4
91957: PUSH
91958: LD_VAR 0 7
91962: ARRAY
91963: PPUSH
91964: LD_INT 71
91966: PPUSH
91967: CALL_OW 109
// continue ;
91971: GO 91886
// end ; end ;
91973: GO 91886
91975: POP
91976: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
91977: LD_VAR 0 4
91981: PUSH
91982: LD_VAR 0 7
91986: ARRAY
91987: PPUSH
91988: CALL_OW 257
91992: PUSH
91993: LD_INT 8
91995: EQUAL
91996: PUSH
91997: LD_VAR 0 4
92001: PUSH
92002: LD_VAR 0 7
92006: ARRAY
92007: PPUSH
92008: CALL_OW 264
92012: PUSH
92013: LD_INT 28
92015: PUSH
92016: LD_INT 45
92018: PUSH
92019: LD_INT 7
92021: PUSH
92022: LD_INT 47
92024: PUSH
92025: EMPTY
92026: LIST
92027: LIST
92028: LIST
92029: LIST
92030: IN
92031: OR
92032: IFFALSE 92288
// begin attacking := false ;
92034: LD_ADDR_VAR 0 29
92038: PUSH
92039: LD_INT 0
92041: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
92042: LD_VAR 0 14
92046: PUSH
92047: LD_INT 1
92049: ARRAY
92050: PPUSH
92051: CALL_OW 266
92055: PUSH
92056: LD_INT 32
92058: PUSH
92059: LD_INT 31
92061: PUSH
92062: LD_INT 33
92064: PUSH
92065: LD_INT 4
92067: PUSH
92068: LD_INT 5
92070: PUSH
92071: EMPTY
92072: LIST
92073: LIST
92074: LIST
92075: LIST
92076: LIST
92077: IN
92078: IFFALSE 92264
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
92080: LD_ADDR_VAR 0 9
92084: PUSH
92085: LD_VAR 0 14
92089: PUSH
92090: LD_INT 1
92092: ARRAY
92093: PPUSH
92094: CALL_OW 266
92098: PPUSH
92099: LD_VAR 0 14
92103: PUSH
92104: LD_INT 1
92106: ARRAY
92107: PPUSH
92108: CALL_OW 250
92112: PPUSH
92113: LD_VAR 0 14
92117: PUSH
92118: LD_INT 1
92120: ARRAY
92121: PPUSH
92122: CALL_OW 251
92126: PPUSH
92127: LD_VAR 0 14
92131: PUSH
92132: LD_INT 1
92134: ARRAY
92135: PPUSH
92136: CALL_OW 254
92140: PPUSH
92141: LD_VAR 0 14
92145: PUSH
92146: LD_INT 1
92148: ARRAY
92149: PPUSH
92150: CALL_OW 248
92154: PPUSH
92155: LD_INT 0
92157: PPUSH
92158: CALL 24375 0 6
92162: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
92163: LD_ADDR_VAR 0 8
92167: PUSH
92168: LD_VAR 0 4
92172: PUSH
92173: LD_VAR 0 7
92177: ARRAY
92178: PPUSH
92179: LD_VAR 0 9
92183: PPUSH
92184: CALL 43045 0 2
92188: ST_TO_ADDR
// if j then
92189: LD_VAR 0 8
92193: IFFALSE 92262
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
92195: LD_VAR 0 8
92199: PUSH
92200: LD_INT 1
92202: ARRAY
92203: PPUSH
92204: LD_VAR 0 8
92208: PUSH
92209: LD_INT 2
92211: ARRAY
92212: PPUSH
92213: CALL_OW 488
92217: IFFALSE 92262
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
92219: LD_VAR 0 4
92223: PUSH
92224: LD_VAR 0 7
92228: ARRAY
92229: PPUSH
92230: LD_VAR 0 8
92234: PUSH
92235: LD_INT 1
92237: ARRAY
92238: PPUSH
92239: LD_VAR 0 8
92243: PUSH
92244: LD_INT 2
92246: ARRAY
92247: PPUSH
92248: CALL_OW 116
// attacking := true ;
92252: LD_ADDR_VAR 0 29
92256: PUSH
92257: LD_INT 1
92259: ST_TO_ADDR
// continue ;
92260: GO 89635
// end ; end else
92262: GO 92288
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
92264: LD_VAR 0 4
92268: PUSH
92269: LD_VAR 0 7
92273: ARRAY
92274: PPUSH
92275: LD_VAR 0 14
92279: PUSH
92280: LD_INT 1
92282: ARRAY
92283: PPUSH
92284: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
92288: LD_VAR 0 4
92292: PUSH
92293: LD_VAR 0 7
92297: ARRAY
92298: PPUSH
92299: CALL_OW 265
92303: PUSH
92304: LD_INT 11
92306: EQUAL
92307: IFFALSE 92585
// begin k := 10 ;
92309: LD_ADDR_VAR 0 9
92313: PUSH
92314: LD_INT 10
92316: ST_TO_ADDR
// x := 0 ;
92317: LD_ADDR_VAR 0 10
92321: PUSH
92322: LD_INT 0
92324: ST_TO_ADDR
// if tmp < k then
92325: LD_VAR 0 14
92329: PUSH
92330: LD_VAR 0 9
92334: LESS
92335: IFFALSE 92347
// k := tmp ;
92337: LD_ADDR_VAR 0 9
92341: PUSH
92342: LD_VAR 0 14
92346: ST_TO_ADDR
// for j = k downto 1 do
92347: LD_ADDR_VAR 0 8
92351: PUSH
92352: DOUBLE
92353: LD_VAR 0 9
92357: INC
92358: ST_TO_ADDR
92359: LD_INT 1
92361: PUSH
92362: FOR_DOWNTO
92363: IFFALSE 92438
// begin if GetType ( tmp [ j ] ) = unit_human then
92365: LD_VAR 0 14
92369: PUSH
92370: LD_VAR 0 8
92374: ARRAY
92375: PPUSH
92376: CALL_OW 247
92380: PUSH
92381: LD_INT 1
92383: EQUAL
92384: IFFALSE 92436
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
92386: LD_VAR 0 4
92390: PUSH
92391: LD_VAR 0 7
92395: ARRAY
92396: PPUSH
92397: LD_VAR 0 14
92401: PUSH
92402: LD_VAR 0 8
92406: ARRAY
92407: PPUSH
92408: CALL 43316 0 2
// x := tmp [ j ] ;
92412: LD_ADDR_VAR 0 10
92416: PUSH
92417: LD_VAR 0 14
92421: PUSH
92422: LD_VAR 0 8
92426: ARRAY
92427: ST_TO_ADDR
// attacking := true ;
92428: LD_ADDR_VAR 0 29
92432: PUSH
92433: LD_INT 1
92435: ST_TO_ADDR
// end ; end ;
92436: GO 92362
92438: POP
92439: POP
// if not x then
92440: LD_VAR 0 10
92444: NOT
92445: IFFALSE 92585
// begin attacking := true ;
92447: LD_ADDR_VAR 0 29
92451: PUSH
92452: LD_INT 1
92454: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
92455: LD_VAR 0 4
92459: PUSH
92460: LD_VAR 0 7
92464: ARRAY
92465: PPUSH
92466: CALL_OW 250
92470: PPUSH
92471: LD_VAR 0 4
92475: PUSH
92476: LD_VAR 0 7
92480: ARRAY
92481: PPUSH
92482: CALL_OW 251
92486: PPUSH
92487: CALL_OW 546
92491: PUSH
92492: LD_INT 2
92494: ARRAY
92495: PUSH
92496: LD_VAR 0 14
92500: PUSH
92501: LD_INT 1
92503: ARRAY
92504: PPUSH
92505: CALL_OW 250
92509: PPUSH
92510: LD_VAR 0 14
92514: PUSH
92515: LD_INT 1
92517: ARRAY
92518: PPUSH
92519: CALL_OW 251
92523: PPUSH
92524: CALL_OW 546
92528: PUSH
92529: LD_INT 2
92531: ARRAY
92532: EQUAL
92533: IFFALSE 92561
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
92535: LD_VAR 0 4
92539: PUSH
92540: LD_VAR 0 7
92544: ARRAY
92545: PPUSH
92546: LD_VAR 0 14
92550: PUSH
92551: LD_INT 1
92553: ARRAY
92554: PPUSH
92555: CALL 43316 0 2
92559: GO 92585
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
92561: LD_VAR 0 4
92565: PUSH
92566: LD_VAR 0 7
92570: ARRAY
92571: PPUSH
92572: LD_VAR 0 14
92576: PUSH
92577: LD_INT 1
92579: ARRAY
92580: PPUSH
92581: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
92585: LD_VAR 0 4
92589: PUSH
92590: LD_VAR 0 7
92594: ARRAY
92595: PPUSH
92596: CALL_OW 264
92600: PUSH
92601: LD_INT 29
92603: EQUAL
92604: IFFALSE 92970
// begin if WantsToAttack ( group [ i ] ) in bombed then
92606: LD_VAR 0 4
92610: PUSH
92611: LD_VAR 0 7
92615: ARRAY
92616: PPUSH
92617: CALL_OW 319
92621: PUSH
92622: LD_VAR 0 28
92626: IN
92627: IFFALSE 92631
// continue ;
92629: GO 89635
// k := 8 ;
92631: LD_ADDR_VAR 0 9
92635: PUSH
92636: LD_INT 8
92638: ST_TO_ADDR
// x := 0 ;
92639: LD_ADDR_VAR 0 10
92643: PUSH
92644: LD_INT 0
92646: ST_TO_ADDR
// if tmp < k then
92647: LD_VAR 0 14
92651: PUSH
92652: LD_VAR 0 9
92656: LESS
92657: IFFALSE 92669
// k := tmp ;
92659: LD_ADDR_VAR 0 9
92663: PUSH
92664: LD_VAR 0 14
92668: ST_TO_ADDR
// for j = 1 to k do
92669: LD_ADDR_VAR 0 8
92673: PUSH
92674: DOUBLE
92675: LD_INT 1
92677: DEC
92678: ST_TO_ADDR
92679: LD_VAR 0 9
92683: PUSH
92684: FOR_TO
92685: IFFALSE 92817
// begin if GetType ( tmp [ j ] ) = unit_building then
92687: LD_VAR 0 14
92691: PUSH
92692: LD_VAR 0 8
92696: ARRAY
92697: PPUSH
92698: CALL_OW 247
92702: PUSH
92703: LD_INT 3
92705: EQUAL
92706: IFFALSE 92815
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
92708: LD_VAR 0 14
92712: PUSH
92713: LD_VAR 0 8
92717: ARRAY
92718: PUSH
92719: LD_VAR 0 28
92723: IN
92724: NOT
92725: PUSH
92726: LD_VAR 0 14
92730: PUSH
92731: LD_VAR 0 8
92735: ARRAY
92736: PPUSH
92737: CALL_OW 313
92741: AND
92742: IFFALSE 92815
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
92744: LD_VAR 0 4
92748: PUSH
92749: LD_VAR 0 7
92753: ARRAY
92754: PPUSH
92755: LD_VAR 0 14
92759: PUSH
92760: LD_VAR 0 8
92764: ARRAY
92765: PPUSH
92766: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
92770: LD_ADDR_VAR 0 28
92774: PUSH
92775: LD_VAR 0 28
92779: PPUSH
92780: LD_VAR 0 28
92784: PUSH
92785: LD_INT 1
92787: PLUS
92788: PPUSH
92789: LD_VAR 0 14
92793: PUSH
92794: LD_VAR 0 8
92798: ARRAY
92799: PPUSH
92800: CALL_OW 1
92804: ST_TO_ADDR
// attacking := true ;
92805: LD_ADDR_VAR 0 29
92809: PUSH
92810: LD_INT 1
92812: ST_TO_ADDR
// break ;
92813: GO 92817
// end ; end ;
92815: GO 92684
92817: POP
92818: POP
// if not attacking and f_attack_depot then
92819: LD_VAR 0 29
92823: NOT
92824: PUSH
92825: LD_VAR 0 25
92829: AND
92830: IFFALSE 92925
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
92832: LD_ADDR_VAR 0 13
92836: PUSH
92837: LD_VAR 0 14
92841: PPUSH
92842: LD_INT 2
92844: PUSH
92845: LD_INT 30
92847: PUSH
92848: LD_INT 0
92850: PUSH
92851: EMPTY
92852: LIST
92853: LIST
92854: PUSH
92855: LD_INT 30
92857: PUSH
92858: LD_INT 1
92860: PUSH
92861: EMPTY
92862: LIST
92863: LIST
92864: PUSH
92865: EMPTY
92866: LIST
92867: LIST
92868: LIST
92869: PPUSH
92870: CALL_OW 72
92874: ST_TO_ADDR
// if z then
92875: LD_VAR 0 13
92879: IFFALSE 92925
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
92881: LD_VAR 0 4
92885: PUSH
92886: LD_VAR 0 7
92890: ARRAY
92891: PPUSH
92892: LD_VAR 0 13
92896: PPUSH
92897: LD_VAR 0 4
92901: PUSH
92902: LD_VAR 0 7
92906: ARRAY
92907: PPUSH
92908: CALL_OW 74
92912: PPUSH
92913: CALL_OW 115
// attacking := true ;
92917: LD_ADDR_VAR 0 29
92921: PUSH
92922: LD_INT 1
92924: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
92925: LD_VAR 0 4
92929: PUSH
92930: LD_VAR 0 7
92934: ARRAY
92935: PPUSH
92936: CALL_OW 256
92940: PUSH
92941: LD_INT 500
92943: LESS
92944: IFFALSE 92970
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
92946: LD_VAR 0 4
92950: PUSH
92951: LD_VAR 0 7
92955: ARRAY
92956: PPUSH
92957: LD_VAR 0 14
92961: PUSH
92962: LD_INT 1
92964: ARRAY
92965: PPUSH
92966: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
92970: LD_VAR 0 4
92974: PUSH
92975: LD_VAR 0 7
92979: ARRAY
92980: PPUSH
92981: CALL_OW 264
92985: PUSH
92986: LD_INT 49
92988: EQUAL
92989: IFFALSE 93110
// begin if not HasTask ( group [ i ] ) then
92991: LD_VAR 0 4
92995: PUSH
92996: LD_VAR 0 7
93000: ARRAY
93001: PPUSH
93002: CALL_OW 314
93006: NOT
93007: IFFALSE 93110
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
93009: LD_ADDR_VAR 0 9
93013: PUSH
93014: LD_INT 81
93016: PUSH
93017: LD_VAR 0 4
93021: PUSH
93022: LD_VAR 0 7
93026: ARRAY
93027: PPUSH
93028: CALL_OW 255
93032: PUSH
93033: EMPTY
93034: LIST
93035: LIST
93036: PPUSH
93037: CALL_OW 69
93041: PPUSH
93042: LD_VAR 0 4
93046: PUSH
93047: LD_VAR 0 7
93051: ARRAY
93052: PPUSH
93053: CALL_OW 74
93057: ST_TO_ADDR
// if k then
93058: LD_VAR 0 9
93062: IFFALSE 93110
// if GetDistUnits ( group [ i ] , k ) > 10 then
93064: LD_VAR 0 4
93068: PUSH
93069: LD_VAR 0 7
93073: ARRAY
93074: PPUSH
93075: LD_VAR 0 9
93079: PPUSH
93080: CALL_OW 296
93084: PUSH
93085: LD_INT 10
93087: GREATER
93088: IFFALSE 93110
// ComMoveUnit ( group [ i ] , k ) ;
93090: LD_VAR 0 4
93094: PUSH
93095: LD_VAR 0 7
93099: ARRAY
93100: PPUSH
93101: LD_VAR 0 9
93105: PPUSH
93106: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
93110: LD_VAR 0 4
93114: PUSH
93115: LD_VAR 0 7
93119: ARRAY
93120: PPUSH
93121: CALL_OW 256
93125: PUSH
93126: LD_INT 250
93128: LESS
93129: PUSH
93130: LD_VAR 0 4
93134: PUSH
93135: LD_VAR 0 7
93139: ARRAY
93140: PUSH
93141: LD_INT 21
93143: PUSH
93144: LD_INT 2
93146: PUSH
93147: EMPTY
93148: LIST
93149: LIST
93150: PUSH
93151: LD_INT 23
93153: PUSH
93154: LD_INT 2
93156: PUSH
93157: EMPTY
93158: LIST
93159: LIST
93160: PUSH
93161: EMPTY
93162: LIST
93163: LIST
93164: PPUSH
93165: CALL_OW 69
93169: IN
93170: AND
93171: IFFALSE 93296
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
93173: LD_ADDR_VAR 0 9
93177: PUSH
93178: LD_OWVAR 3
93182: PUSH
93183: LD_VAR 0 4
93187: PUSH
93188: LD_VAR 0 7
93192: ARRAY
93193: DIFF
93194: PPUSH
93195: LD_VAR 0 4
93199: PUSH
93200: LD_VAR 0 7
93204: ARRAY
93205: PPUSH
93206: CALL_OW 74
93210: ST_TO_ADDR
// if not k then
93211: LD_VAR 0 9
93215: NOT
93216: IFFALSE 93220
// continue ;
93218: GO 89635
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
93220: LD_VAR 0 9
93224: PUSH
93225: LD_INT 81
93227: PUSH
93228: LD_VAR 0 4
93232: PUSH
93233: LD_VAR 0 7
93237: ARRAY
93238: PPUSH
93239: CALL_OW 255
93243: PUSH
93244: EMPTY
93245: LIST
93246: LIST
93247: PPUSH
93248: CALL_OW 69
93252: IN
93253: PUSH
93254: LD_VAR 0 9
93258: PPUSH
93259: LD_VAR 0 4
93263: PUSH
93264: LD_VAR 0 7
93268: ARRAY
93269: PPUSH
93270: CALL_OW 296
93274: PUSH
93275: LD_INT 5
93277: LESS
93278: AND
93279: IFFALSE 93296
// ComAutodestruct ( group [ i ] ) ;
93281: LD_VAR 0 4
93285: PUSH
93286: LD_VAR 0 7
93290: ARRAY
93291: PPUSH
93292: CALL 43214 0 1
// end ; if f_attack_depot then
93296: LD_VAR 0 25
93300: IFFALSE 93412
// begin k := 6 ;
93302: LD_ADDR_VAR 0 9
93306: PUSH
93307: LD_INT 6
93309: ST_TO_ADDR
// if tmp < k then
93310: LD_VAR 0 14
93314: PUSH
93315: LD_VAR 0 9
93319: LESS
93320: IFFALSE 93332
// k := tmp ;
93322: LD_ADDR_VAR 0 9
93326: PUSH
93327: LD_VAR 0 14
93331: ST_TO_ADDR
// for j = 1 to k do
93332: LD_ADDR_VAR 0 8
93336: PUSH
93337: DOUBLE
93338: LD_INT 1
93340: DEC
93341: ST_TO_ADDR
93342: LD_VAR 0 9
93346: PUSH
93347: FOR_TO
93348: IFFALSE 93410
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
93350: LD_VAR 0 8
93354: PPUSH
93355: CALL_OW 266
93359: PUSH
93360: LD_INT 0
93362: PUSH
93363: LD_INT 1
93365: PUSH
93366: EMPTY
93367: LIST
93368: LIST
93369: IN
93370: IFFALSE 93408
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
93372: LD_VAR 0 4
93376: PUSH
93377: LD_VAR 0 7
93381: ARRAY
93382: PPUSH
93383: LD_VAR 0 14
93387: PUSH
93388: LD_VAR 0 8
93392: ARRAY
93393: PPUSH
93394: CALL_OW 115
// attacking := true ;
93398: LD_ADDR_VAR 0 29
93402: PUSH
93403: LD_INT 1
93405: ST_TO_ADDR
// break ;
93406: GO 93410
// end ;
93408: GO 93347
93410: POP
93411: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
93412: LD_VAR 0 4
93416: PUSH
93417: LD_VAR 0 7
93421: ARRAY
93422: PPUSH
93423: CALL_OW 302
93427: PUSH
93428: LD_VAR 0 29
93432: NOT
93433: AND
93434: IFFALSE 93756
// begin if GetTag ( group [ i ] ) = 71 then
93436: LD_VAR 0 4
93440: PUSH
93441: LD_VAR 0 7
93445: ARRAY
93446: PPUSH
93447: CALL_OW 110
93451: PUSH
93452: LD_INT 71
93454: EQUAL
93455: IFFALSE 93496
// begin if HasTask ( group [ i ] ) then
93457: LD_VAR 0 4
93461: PUSH
93462: LD_VAR 0 7
93466: ARRAY
93467: PPUSH
93468: CALL_OW 314
93472: IFFALSE 93478
// continue else
93474: GO 89635
93476: GO 93496
// SetTag ( group [ i ] , 0 ) ;
93478: LD_VAR 0 4
93482: PUSH
93483: LD_VAR 0 7
93487: ARRAY
93488: PPUSH
93489: LD_INT 0
93491: PPUSH
93492: CALL_OW 109
// end ; k := 8 ;
93496: LD_ADDR_VAR 0 9
93500: PUSH
93501: LD_INT 8
93503: ST_TO_ADDR
// x := 0 ;
93504: LD_ADDR_VAR 0 10
93508: PUSH
93509: LD_INT 0
93511: ST_TO_ADDR
// if tmp < k then
93512: LD_VAR 0 14
93516: PUSH
93517: LD_VAR 0 9
93521: LESS
93522: IFFALSE 93534
// k := tmp ;
93524: LD_ADDR_VAR 0 9
93528: PUSH
93529: LD_VAR 0 14
93533: ST_TO_ADDR
// for j = 1 to k do
93534: LD_ADDR_VAR 0 8
93538: PUSH
93539: DOUBLE
93540: LD_INT 1
93542: DEC
93543: ST_TO_ADDR
93544: LD_VAR 0 9
93548: PUSH
93549: FOR_TO
93550: IFFALSE 93648
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
93552: LD_VAR 0 14
93556: PUSH
93557: LD_VAR 0 8
93561: ARRAY
93562: PPUSH
93563: CALL_OW 247
93567: PUSH
93568: LD_INT 1
93570: EQUAL
93571: PUSH
93572: LD_VAR 0 14
93576: PUSH
93577: LD_VAR 0 8
93581: ARRAY
93582: PPUSH
93583: CALL_OW 256
93587: PUSH
93588: LD_INT 250
93590: LESS
93591: PUSH
93592: LD_VAR 0 20
93596: AND
93597: PUSH
93598: LD_VAR 0 20
93602: NOT
93603: PUSH
93604: LD_VAR 0 14
93608: PUSH
93609: LD_VAR 0 8
93613: ARRAY
93614: PPUSH
93615: CALL_OW 256
93619: PUSH
93620: LD_INT 250
93622: GREATEREQUAL
93623: AND
93624: OR
93625: AND
93626: IFFALSE 93646
// begin x := tmp [ j ] ;
93628: LD_ADDR_VAR 0 10
93632: PUSH
93633: LD_VAR 0 14
93637: PUSH
93638: LD_VAR 0 8
93642: ARRAY
93643: ST_TO_ADDR
// break ;
93644: GO 93648
// end ;
93646: GO 93549
93648: POP
93649: POP
// if x then
93650: LD_VAR 0 10
93654: IFFALSE 93678
// ComAttackUnit ( group [ i ] , x ) else
93656: LD_VAR 0 4
93660: PUSH
93661: LD_VAR 0 7
93665: ARRAY
93666: PPUSH
93667: LD_VAR 0 10
93671: PPUSH
93672: CALL_OW 115
93676: GO 93702
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
93678: LD_VAR 0 4
93682: PUSH
93683: LD_VAR 0 7
93687: ARRAY
93688: PPUSH
93689: LD_VAR 0 14
93693: PUSH
93694: LD_INT 1
93696: ARRAY
93697: PPUSH
93698: CALL_OW 115
// if not HasTask ( group [ i ] ) then
93702: LD_VAR 0 4
93706: PUSH
93707: LD_VAR 0 7
93711: ARRAY
93712: PPUSH
93713: CALL_OW 314
93717: NOT
93718: IFFALSE 93756
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
93720: LD_VAR 0 4
93724: PUSH
93725: LD_VAR 0 7
93729: ARRAY
93730: PPUSH
93731: LD_VAR 0 14
93735: PPUSH
93736: LD_VAR 0 4
93740: PUSH
93741: LD_VAR 0 7
93745: ARRAY
93746: PPUSH
93747: CALL_OW 74
93751: PPUSH
93752: CALL_OW 115
// end ; end ; end ;
93756: GO 89635
93758: POP
93759: POP
// wait ( 0 0$2 ) ;
93760: LD_INT 70
93762: PPUSH
93763: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
93767: LD_VAR 0 4
93771: NOT
93772: PUSH
93773: LD_VAR 0 4
93777: PUSH
93778: EMPTY
93779: EQUAL
93780: OR
93781: PUSH
93782: LD_INT 81
93784: PUSH
93785: LD_VAR 0 35
93789: PUSH
93790: EMPTY
93791: LIST
93792: LIST
93793: PPUSH
93794: CALL_OW 69
93798: NOT
93799: OR
93800: IFFALSE 89620
// end ;
93802: LD_VAR 0 2
93806: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
93807: LD_INT 0
93809: PPUSH
93810: PPUSH
93811: PPUSH
93812: PPUSH
93813: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
93814: LD_VAR 0 1
93818: NOT
93819: PUSH
93820: LD_EXP 60
93824: PUSH
93825: LD_VAR 0 1
93829: ARRAY
93830: NOT
93831: OR
93832: PUSH
93833: LD_VAR 0 2
93837: NOT
93838: OR
93839: PUSH
93840: LD_VAR 0 3
93844: NOT
93845: OR
93846: IFFALSE 93850
// exit ;
93848: GO 94363
// side := mc_sides [ base ] ;
93850: LD_ADDR_VAR 0 6
93854: PUSH
93855: LD_EXP 86
93859: PUSH
93860: LD_VAR 0 1
93864: ARRAY
93865: ST_TO_ADDR
// if not side then
93866: LD_VAR 0 6
93870: NOT
93871: IFFALSE 93875
// exit ;
93873: GO 94363
// for i in solds do
93875: LD_ADDR_VAR 0 7
93879: PUSH
93880: LD_VAR 0 2
93884: PUSH
93885: FOR_IN
93886: IFFALSE 93947
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
93888: LD_VAR 0 7
93892: PPUSH
93893: CALL_OW 310
93897: PPUSH
93898: CALL_OW 266
93902: PUSH
93903: LD_INT 32
93905: PUSH
93906: LD_INT 31
93908: PUSH
93909: EMPTY
93910: LIST
93911: LIST
93912: IN
93913: IFFALSE 93933
// solds := solds diff i else
93915: LD_ADDR_VAR 0 2
93919: PUSH
93920: LD_VAR 0 2
93924: PUSH
93925: LD_VAR 0 7
93929: DIFF
93930: ST_TO_ADDR
93931: GO 93945
// SetTag ( i , 18 ) ;
93933: LD_VAR 0 7
93937: PPUSH
93938: LD_INT 18
93940: PPUSH
93941: CALL_OW 109
93945: GO 93885
93947: POP
93948: POP
// if not solds then
93949: LD_VAR 0 2
93953: NOT
93954: IFFALSE 93958
// exit ;
93956: GO 94363
// repeat wait ( 0 0$1 ) ;
93958: LD_INT 35
93960: PPUSH
93961: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
93965: LD_ADDR_VAR 0 5
93969: PUSH
93970: LD_VAR 0 6
93974: PPUSH
93975: LD_VAR 0 3
93979: PPUSH
93980: CALL 12929 0 2
93984: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
93985: LD_EXP 60
93989: PUSH
93990: LD_VAR 0 1
93994: ARRAY
93995: NOT
93996: PUSH
93997: LD_EXP 60
94001: PUSH
94002: LD_VAR 0 1
94006: ARRAY
94007: PUSH
94008: EMPTY
94009: EQUAL
94010: OR
94011: IFFALSE 94048
// begin for i in solds do
94013: LD_ADDR_VAR 0 7
94017: PUSH
94018: LD_VAR 0 2
94022: PUSH
94023: FOR_IN
94024: IFFALSE 94037
// ComStop ( i ) ;
94026: LD_VAR 0 7
94030: PPUSH
94031: CALL_OW 141
94035: GO 94023
94037: POP
94038: POP
// solds := [ ] ;
94039: LD_ADDR_VAR 0 2
94043: PUSH
94044: EMPTY
94045: ST_TO_ADDR
// exit ;
94046: GO 94363
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
94048: LD_VAR 0 5
94052: NOT
94053: PUSH
94054: LD_VAR 0 5
94058: PUSH
94059: LD_INT 3
94061: GREATER
94062: OR
94063: PUSH
94064: LD_EXP 82
94068: PUSH
94069: LD_VAR 0 1
94073: ARRAY
94074: OR
94075: IFFALSE 94116
// begin for i in solds do
94077: LD_ADDR_VAR 0 7
94081: PUSH
94082: LD_VAR 0 2
94086: PUSH
94087: FOR_IN
94088: IFFALSE 94112
// if HasTask ( i ) then
94090: LD_VAR 0 7
94094: PPUSH
94095: CALL_OW 314
94099: IFFALSE 94110
// ComStop ( i ) ;
94101: LD_VAR 0 7
94105: PPUSH
94106: CALL_OW 141
94110: GO 94087
94112: POP
94113: POP
// break ;
94114: GO 94351
// end ; for i in solds do
94116: LD_ADDR_VAR 0 7
94120: PUSH
94121: LD_VAR 0 2
94125: PUSH
94126: FOR_IN
94127: IFFALSE 94343
// begin if IsInUnit ( i ) then
94129: LD_VAR 0 7
94133: PPUSH
94134: CALL_OW 310
94138: IFFALSE 94149
// ComExitBuilding ( i ) ;
94140: LD_VAR 0 7
94144: PPUSH
94145: CALL_OW 122
// if GetLives ( i ) > 333 then
94149: LD_VAR 0 7
94153: PPUSH
94154: CALL_OW 256
94158: PUSH
94159: LD_INT 333
94161: GREATER
94162: IFFALSE 94190
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
94164: LD_VAR 0 7
94168: PPUSH
94169: LD_VAR 0 5
94173: PPUSH
94174: LD_VAR 0 7
94178: PPUSH
94179: CALL_OW 74
94183: PPUSH
94184: CALL_OW 115
94188: GO 94341
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
94190: LD_ADDR_VAR 0 8
94194: PUSH
94195: LD_EXP 60
94199: PUSH
94200: LD_VAR 0 1
94204: ARRAY
94205: PPUSH
94206: LD_INT 2
94208: PUSH
94209: LD_INT 30
94211: PUSH
94212: LD_INT 0
94214: PUSH
94215: EMPTY
94216: LIST
94217: LIST
94218: PUSH
94219: LD_INT 30
94221: PUSH
94222: LD_INT 1
94224: PUSH
94225: EMPTY
94226: LIST
94227: LIST
94228: PUSH
94229: LD_INT 30
94231: PUSH
94232: LD_INT 6
94234: PUSH
94235: EMPTY
94236: LIST
94237: LIST
94238: PUSH
94239: EMPTY
94240: LIST
94241: LIST
94242: LIST
94243: LIST
94244: PPUSH
94245: CALL_OW 72
94249: PPUSH
94250: LD_VAR 0 7
94254: PPUSH
94255: CALL_OW 74
94259: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
94260: LD_VAR 0 7
94264: PPUSH
94265: LD_VAR 0 8
94269: PPUSH
94270: CALL_OW 250
94274: PPUSH
94275: LD_INT 3
94277: PPUSH
94278: LD_INT 5
94280: PPUSH
94281: CALL_OW 272
94285: PPUSH
94286: LD_VAR 0 8
94290: PPUSH
94291: CALL_OW 251
94295: PPUSH
94296: LD_INT 3
94298: PPUSH
94299: LD_INT 5
94301: PPUSH
94302: CALL_OW 273
94306: PPUSH
94307: CALL_OW 111
// SetTag ( i , 0 ) ;
94311: LD_VAR 0 7
94315: PPUSH
94316: LD_INT 0
94318: PPUSH
94319: CALL_OW 109
// solds := solds diff i ;
94323: LD_ADDR_VAR 0 2
94327: PUSH
94328: LD_VAR 0 2
94332: PUSH
94333: LD_VAR 0 7
94337: DIFF
94338: ST_TO_ADDR
// continue ;
94339: GO 94126
// end ; end ;
94341: GO 94126
94343: POP
94344: POP
// until solds ;
94345: LD_VAR 0 2
94349: IFFALSE 93958
// MC_Reset ( base , 18 ) ;
94351: LD_VAR 0 1
94355: PPUSH
94356: LD_INT 18
94358: PPUSH
94359: CALL 51540 0 2
// end ;
94363: LD_VAR 0 4
94367: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
94368: LD_INT 0
94370: PPUSH
94371: PPUSH
94372: PPUSH
94373: PPUSH
94374: PPUSH
94375: PPUSH
94376: PPUSH
94377: PPUSH
94378: PPUSH
94379: PPUSH
94380: PPUSH
94381: PPUSH
94382: PPUSH
94383: PPUSH
94384: PPUSH
94385: PPUSH
94386: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
94387: LD_ADDR_VAR 0 13
94391: PUSH
94392: LD_EXP 60
94396: PUSH
94397: LD_VAR 0 1
94401: ARRAY
94402: PPUSH
94403: LD_INT 25
94405: PUSH
94406: LD_INT 3
94408: PUSH
94409: EMPTY
94410: LIST
94411: LIST
94412: PPUSH
94413: CALL_OW 72
94417: ST_TO_ADDR
// if mc_remote_driver [ base ] then
94418: LD_EXP 100
94422: PUSH
94423: LD_VAR 0 1
94427: ARRAY
94428: IFFALSE 94452
// mechs := mechs diff mc_remote_driver [ base ] ;
94430: LD_ADDR_VAR 0 13
94434: PUSH
94435: LD_VAR 0 13
94439: PUSH
94440: LD_EXP 100
94444: PUSH
94445: LD_VAR 0 1
94449: ARRAY
94450: DIFF
94451: ST_TO_ADDR
// for i in mechs do
94452: LD_ADDR_VAR 0 5
94456: PUSH
94457: LD_VAR 0 13
94461: PUSH
94462: FOR_IN
94463: IFFALSE 94498
// if GetTag ( i ) > 0 then
94465: LD_VAR 0 5
94469: PPUSH
94470: CALL_OW 110
94474: PUSH
94475: LD_INT 0
94477: GREATER
94478: IFFALSE 94496
// mechs := mechs diff i ;
94480: LD_ADDR_VAR 0 13
94484: PUSH
94485: LD_VAR 0 13
94489: PUSH
94490: LD_VAR 0 5
94494: DIFF
94495: ST_TO_ADDR
94496: GO 94462
94498: POP
94499: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
94500: LD_ADDR_VAR 0 9
94504: PUSH
94505: LD_EXP 60
94509: PUSH
94510: LD_VAR 0 1
94514: ARRAY
94515: PPUSH
94516: LD_INT 2
94518: PUSH
94519: LD_INT 25
94521: PUSH
94522: LD_INT 1
94524: PUSH
94525: EMPTY
94526: LIST
94527: LIST
94528: PUSH
94529: LD_INT 25
94531: PUSH
94532: LD_INT 5
94534: PUSH
94535: EMPTY
94536: LIST
94537: LIST
94538: PUSH
94539: LD_INT 25
94541: PUSH
94542: LD_INT 8
94544: PUSH
94545: EMPTY
94546: LIST
94547: LIST
94548: PUSH
94549: LD_INT 25
94551: PUSH
94552: LD_INT 9
94554: PUSH
94555: EMPTY
94556: LIST
94557: LIST
94558: PUSH
94559: EMPTY
94560: LIST
94561: LIST
94562: LIST
94563: LIST
94564: LIST
94565: PPUSH
94566: CALL_OW 72
94570: ST_TO_ADDR
// if not defenders and not solds then
94571: LD_VAR 0 2
94575: NOT
94576: PUSH
94577: LD_VAR 0 9
94581: NOT
94582: AND
94583: IFFALSE 94587
// exit ;
94585: GO 96213
// depot_under_attack := false ;
94587: LD_ADDR_VAR 0 17
94591: PUSH
94592: LD_INT 0
94594: ST_TO_ADDR
// sold_defenders := [ ] ;
94595: LD_ADDR_VAR 0 18
94599: PUSH
94600: EMPTY
94601: ST_TO_ADDR
// if mechs then
94602: LD_VAR 0 13
94606: IFFALSE 94735
// for i in defenders do
94608: LD_ADDR_VAR 0 5
94612: PUSH
94613: LD_VAR 0 2
94617: PUSH
94618: FOR_IN
94619: IFFALSE 94733
// begin SetTag ( i , 20 ) ;
94621: LD_VAR 0 5
94625: PPUSH
94626: LD_INT 20
94628: PPUSH
94629: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
94633: LD_VAR 0 5
94637: PPUSH
94638: CALL_OW 263
94642: PUSH
94643: LD_INT 1
94645: EQUAL
94646: PUSH
94647: LD_VAR 0 5
94651: PPUSH
94652: CALL_OW 311
94656: NOT
94657: AND
94658: PUSH
94659: LD_VAR 0 13
94663: AND
94664: IFFALSE 94731
// begin un := mechs [ 1 ] ;
94666: LD_ADDR_VAR 0 11
94670: PUSH
94671: LD_VAR 0 13
94675: PUSH
94676: LD_INT 1
94678: ARRAY
94679: ST_TO_ADDR
// ComExitBuilding ( un ) ;
94680: LD_VAR 0 11
94684: PPUSH
94685: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
94689: LD_VAR 0 11
94693: PPUSH
94694: LD_VAR 0 5
94698: PPUSH
94699: CALL_OW 180
// SetTag ( un , 19 ) ;
94703: LD_VAR 0 11
94707: PPUSH
94708: LD_INT 19
94710: PPUSH
94711: CALL_OW 109
// mechs := mechs diff un ;
94715: LD_ADDR_VAR 0 13
94719: PUSH
94720: LD_VAR 0 13
94724: PUSH
94725: LD_VAR 0 11
94729: DIFF
94730: ST_TO_ADDR
// end ; end ;
94731: GO 94618
94733: POP
94734: POP
// if solds then
94735: LD_VAR 0 9
94739: IFFALSE 94798
// for i in solds do
94741: LD_ADDR_VAR 0 5
94745: PUSH
94746: LD_VAR 0 9
94750: PUSH
94751: FOR_IN
94752: IFFALSE 94796
// if not GetTag ( i ) then
94754: LD_VAR 0 5
94758: PPUSH
94759: CALL_OW 110
94763: NOT
94764: IFFALSE 94794
// begin defenders := defenders union i ;
94766: LD_ADDR_VAR 0 2
94770: PUSH
94771: LD_VAR 0 2
94775: PUSH
94776: LD_VAR 0 5
94780: UNION
94781: ST_TO_ADDR
// SetTag ( i , 18 ) ;
94782: LD_VAR 0 5
94786: PPUSH
94787: LD_INT 18
94789: PPUSH
94790: CALL_OW 109
// end ;
94794: GO 94751
94796: POP
94797: POP
// repeat wait ( 0 0$1 ) ;
94798: LD_INT 35
94800: PPUSH
94801: CALL_OW 67
// enemy := mc_scan [ base ] ;
94805: LD_ADDR_VAR 0 3
94809: PUSH
94810: LD_EXP 83
94814: PUSH
94815: LD_VAR 0 1
94819: ARRAY
94820: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
94821: LD_EXP 60
94825: PUSH
94826: LD_VAR 0 1
94830: ARRAY
94831: NOT
94832: PUSH
94833: LD_EXP 60
94837: PUSH
94838: LD_VAR 0 1
94842: ARRAY
94843: PUSH
94844: EMPTY
94845: EQUAL
94846: OR
94847: IFFALSE 94884
// begin for i in defenders do
94849: LD_ADDR_VAR 0 5
94853: PUSH
94854: LD_VAR 0 2
94858: PUSH
94859: FOR_IN
94860: IFFALSE 94873
// ComStop ( i ) ;
94862: LD_VAR 0 5
94866: PPUSH
94867: CALL_OW 141
94871: GO 94859
94873: POP
94874: POP
// defenders := [ ] ;
94875: LD_ADDR_VAR 0 2
94879: PUSH
94880: EMPTY
94881: ST_TO_ADDR
// exit ;
94882: GO 96213
// end ; for i in defenders do
94884: LD_ADDR_VAR 0 5
94888: PUSH
94889: LD_VAR 0 2
94893: PUSH
94894: FOR_IN
94895: IFFALSE 95713
// begin e := NearestUnitToUnit ( enemy , i ) ;
94897: LD_ADDR_VAR 0 14
94901: PUSH
94902: LD_VAR 0 3
94906: PPUSH
94907: LD_VAR 0 5
94911: PPUSH
94912: CALL_OW 74
94916: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
94917: LD_ADDR_VAR 0 8
94921: PUSH
94922: LD_EXP 60
94926: PUSH
94927: LD_VAR 0 1
94931: ARRAY
94932: PPUSH
94933: LD_INT 2
94935: PUSH
94936: LD_INT 30
94938: PUSH
94939: LD_INT 0
94941: PUSH
94942: EMPTY
94943: LIST
94944: LIST
94945: PUSH
94946: LD_INT 30
94948: PUSH
94949: LD_INT 1
94951: PUSH
94952: EMPTY
94953: LIST
94954: LIST
94955: PUSH
94956: EMPTY
94957: LIST
94958: LIST
94959: LIST
94960: PPUSH
94961: CALL_OW 72
94965: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
94966: LD_ADDR_VAR 0 17
94970: PUSH
94971: LD_VAR 0 8
94975: NOT
94976: PUSH
94977: LD_VAR 0 8
94981: PPUSH
94982: LD_INT 3
94984: PUSH
94985: LD_INT 24
94987: PUSH
94988: LD_INT 600
94990: PUSH
94991: EMPTY
94992: LIST
94993: LIST
94994: PUSH
94995: EMPTY
94996: LIST
94997: LIST
94998: PPUSH
94999: CALL_OW 72
95003: OR
95004: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
95005: LD_VAR 0 5
95009: PPUSH
95010: CALL_OW 247
95014: PUSH
95015: LD_INT 2
95017: DOUBLE
95018: EQUAL
95019: IFTRUE 95023
95021: GO 95419
95023: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
95024: LD_VAR 0 5
95028: PPUSH
95029: CALL_OW 256
95033: PUSH
95034: LD_INT 650
95036: GREATER
95037: PUSH
95038: LD_VAR 0 5
95042: PPUSH
95043: LD_VAR 0 14
95047: PPUSH
95048: CALL_OW 296
95052: PUSH
95053: LD_INT 40
95055: LESS
95056: PUSH
95057: LD_VAR 0 14
95061: PPUSH
95062: LD_EXP 85
95066: PUSH
95067: LD_VAR 0 1
95071: ARRAY
95072: PPUSH
95073: CALL_OW 308
95077: OR
95078: AND
95079: IFFALSE 95201
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
95081: LD_VAR 0 5
95085: PPUSH
95086: CALL_OW 262
95090: PUSH
95091: LD_INT 1
95093: EQUAL
95094: PUSH
95095: LD_VAR 0 5
95099: PPUSH
95100: CALL_OW 261
95104: PUSH
95105: LD_INT 30
95107: LESS
95108: AND
95109: PUSH
95110: LD_VAR 0 8
95114: AND
95115: IFFALSE 95185
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
95117: LD_VAR 0 5
95121: PPUSH
95122: LD_VAR 0 8
95126: PPUSH
95127: LD_VAR 0 5
95131: PPUSH
95132: CALL_OW 74
95136: PPUSH
95137: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
95141: LD_VAR 0 5
95145: PPUSH
95146: LD_VAR 0 8
95150: PPUSH
95151: LD_VAR 0 5
95155: PPUSH
95156: CALL_OW 74
95160: PPUSH
95161: CALL_OW 296
95165: PUSH
95166: LD_INT 6
95168: LESS
95169: IFFALSE 95183
// SetFuel ( i , 100 ) ;
95171: LD_VAR 0 5
95175: PPUSH
95176: LD_INT 100
95178: PPUSH
95179: CALL_OW 240
// end else
95183: GO 95199
// ComAttackUnit ( i , e ) ;
95185: LD_VAR 0 5
95189: PPUSH
95190: LD_VAR 0 14
95194: PPUSH
95195: CALL_OW 115
// end else
95199: GO 95302
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
95201: LD_VAR 0 14
95205: PPUSH
95206: LD_EXP 85
95210: PUSH
95211: LD_VAR 0 1
95215: ARRAY
95216: PPUSH
95217: CALL_OW 308
95221: NOT
95222: PUSH
95223: LD_VAR 0 5
95227: PPUSH
95228: LD_VAR 0 14
95232: PPUSH
95233: CALL_OW 296
95237: PUSH
95238: LD_INT 40
95240: GREATEREQUAL
95241: AND
95242: PUSH
95243: LD_VAR 0 5
95247: PPUSH
95248: CALL_OW 256
95252: PUSH
95253: LD_INT 650
95255: LESSEQUAL
95256: OR
95257: PUSH
95258: LD_VAR 0 5
95262: PPUSH
95263: LD_EXP 84
95267: PUSH
95268: LD_VAR 0 1
95272: ARRAY
95273: PPUSH
95274: CALL_OW 308
95278: NOT
95279: AND
95280: IFFALSE 95302
// ComMoveToArea ( i , mc_parking [ base ] ) ;
95282: LD_VAR 0 5
95286: PPUSH
95287: LD_EXP 84
95291: PUSH
95292: LD_VAR 0 1
95296: ARRAY
95297: PPUSH
95298: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
95302: LD_VAR 0 5
95306: PPUSH
95307: CALL_OW 256
95311: PUSH
95312: LD_INT 998
95314: LESS
95315: PUSH
95316: LD_VAR 0 5
95320: PPUSH
95321: CALL_OW 263
95325: PUSH
95326: LD_INT 1
95328: EQUAL
95329: AND
95330: PUSH
95331: LD_VAR 0 5
95335: PPUSH
95336: CALL_OW 311
95340: AND
95341: PUSH
95342: LD_VAR 0 5
95346: PPUSH
95347: LD_EXP 84
95351: PUSH
95352: LD_VAR 0 1
95356: ARRAY
95357: PPUSH
95358: CALL_OW 308
95362: AND
95363: IFFALSE 95417
// begin mech := IsDrivenBy ( i ) ;
95365: LD_ADDR_VAR 0 10
95369: PUSH
95370: LD_VAR 0 5
95374: PPUSH
95375: CALL_OW 311
95379: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
95380: LD_VAR 0 10
95384: PPUSH
95385: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
95389: LD_VAR 0 10
95393: PPUSH
95394: LD_VAR 0 5
95398: PPUSH
95399: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
95403: LD_VAR 0 10
95407: PPUSH
95408: LD_VAR 0 5
95412: PPUSH
95413: CALL_OW 180
// end ; end ; unit_human :
95417: GO 95684
95419: LD_INT 1
95421: DOUBLE
95422: EQUAL
95423: IFTRUE 95427
95425: GO 95683
95427: POP
// begin b := IsInUnit ( i ) ;
95428: LD_ADDR_VAR 0 19
95432: PUSH
95433: LD_VAR 0 5
95437: PPUSH
95438: CALL_OW 310
95442: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
95443: LD_ADDR_VAR 0 20
95447: PUSH
95448: LD_VAR 0 19
95452: NOT
95453: PUSH
95454: LD_VAR 0 19
95458: PPUSH
95459: CALL_OW 266
95463: PUSH
95464: LD_INT 32
95466: PUSH
95467: LD_INT 31
95469: PUSH
95470: EMPTY
95471: LIST
95472: LIST
95473: IN
95474: OR
95475: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
95476: LD_VAR 0 17
95480: PUSH
95481: LD_VAR 0 2
95485: PPUSH
95486: LD_INT 21
95488: PUSH
95489: LD_INT 2
95491: PUSH
95492: EMPTY
95493: LIST
95494: LIST
95495: PPUSH
95496: CALL_OW 72
95500: PUSH
95501: LD_INT 1
95503: LESSEQUAL
95504: OR
95505: PUSH
95506: LD_VAR 0 20
95510: AND
95511: PUSH
95512: LD_VAR 0 5
95516: PUSH
95517: LD_VAR 0 18
95521: IN
95522: NOT
95523: AND
95524: IFFALSE 95617
// begin if b then
95526: LD_VAR 0 19
95530: IFFALSE 95579
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
95532: LD_VAR 0 19
95536: PPUSH
95537: LD_VAR 0 3
95541: PPUSH
95542: LD_VAR 0 19
95546: PPUSH
95547: CALL_OW 74
95551: PPUSH
95552: CALL_OW 296
95556: PUSH
95557: LD_INT 10
95559: LESS
95560: PUSH
95561: LD_VAR 0 19
95565: PPUSH
95566: CALL_OW 461
95570: PUSH
95571: LD_INT 7
95573: NONEQUAL
95574: AND
95575: IFFALSE 95579
// continue ;
95577: GO 94894
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
95579: LD_ADDR_VAR 0 18
95583: PUSH
95584: LD_VAR 0 18
95588: PPUSH
95589: LD_VAR 0 18
95593: PUSH
95594: LD_INT 1
95596: PLUS
95597: PPUSH
95598: LD_VAR 0 5
95602: PPUSH
95603: CALL_OW 1
95607: ST_TO_ADDR
// ComExitBuilding ( i ) ;
95608: LD_VAR 0 5
95612: PPUSH
95613: CALL_OW 122
// end ; if sold_defenders then
95617: LD_VAR 0 18
95621: IFFALSE 95681
// if i in sold_defenders then
95623: LD_VAR 0 5
95627: PUSH
95628: LD_VAR 0 18
95632: IN
95633: IFFALSE 95681
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
95635: LD_VAR 0 5
95639: PPUSH
95640: CALL_OW 314
95644: NOT
95645: PUSH
95646: LD_VAR 0 5
95650: PPUSH
95651: LD_VAR 0 14
95655: PPUSH
95656: CALL_OW 296
95660: PUSH
95661: LD_INT 30
95663: LESS
95664: AND
95665: IFFALSE 95681
// ComAttackUnit ( i , e ) ;
95667: LD_VAR 0 5
95671: PPUSH
95672: LD_VAR 0 14
95676: PPUSH
95677: CALL_OW 115
// end ; end ; end ;
95681: GO 95684
95683: POP
// if IsDead ( i ) then
95684: LD_VAR 0 5
95688: PPUSH
95689: CALL_OW 301
95693: IFFALSE 95711
// defenders := defenders diff i ;
95695: LD_ADDR_VAR 0 2
95699: PUSH
95700: LD_VAR 0 2
95704: PUSH
95705: LD_VAR 0 5
95709: DIFF
95710: ST_TO_ADDR
// end ;
95711: GO 94894
95713: POP
95714: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
95715: LD_VAR 0 3
95719: NOT
95720: PUSH
95721: LD_VAR 0 2
95725: NOT
95726: OR
95727: PUSH
95728: LD_EXP 60
95732: PUSH
95733: LD_VAR 0 1
95737: ARRAY
95738: NOT
95739: OR
95740: IFFALSE 94798
// MC_Reset ( base , 18 ) ;
95742: LD_VAR 0 1
95746: PPUSH
95747: LD_INT 18
95749: PPUSH
95750: CALL 51540 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
95754: LD_ADDR_VAR 0 2
95758: PUSH
95759: LD_VAR 0 2
95763: PUSH
95764: LD_VAR 0 2
95768: PPUSH
95769: LD_INT 2
95771: PUSH
95772: LD_INT 25
95774: PUSH
95775: LD_INT 1
95777: PUSH
95778: EMPTY
95779: LIST
95780: LIST
95781: PUSH
95782: LD_INT 25
95784: PUSH
95785: LD_INT 5
95787: PUSH
95788: EMPTY
95789: LIST
95790: LIST
95791: PUSH
95792: LD_INT 25
95794: PUSH
95795: LD_INT 8
95797: PUSH
95798: EMPTY
95799: LIST
95800: LIST
95801: PUSH
95802: LD_INT 25
95804: PUSH
95805: LD_INT 9
95807: PUSH
95808: EMPTY
95809: LIST
95810: LIST
95811: PUSH
95812: EMPTY
95813: LIST
95814: LIST
95815: LIST
95816: LIST
95817: LIST
95818: PPUSH
95819: CALL_OW 72
95823: DIFF
95824: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
95825: LD_VAR 0 3
95829: NOT
95830: PUSH
95831: LD_VAR 0 2
95835: PPUSH
95836: LD_INT 21
95838: PUSH
95839: LD_INT 2
95841: PUSH
95842: EMPTY
95843: LIST
95844: LIST
95845: PPUSH
95846: CALL_OW 72
95850: AND
95851: IFFALSE 96189
// begin tmp := FilterByTag ( defenders , 19 ) ;
95853: LD_ADDR_VAR 0 12
95857: PUSH
95858: LD_VAR 0 2
95862: PPUSH
95863: LD_INT 19
95865: PPUSH
95866: CALL 44689 0 2
95870: ST_TO_ADDR
// if tmp then
95871: LD_VAR 0 12
95875: IFFALSE 95945
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
95877: LD_ADDR_VAR 0 12
95881: PUSH
95882: LD_VAR 0 12
95886: PPUSH
95887: LD_INT 25
95889: PUSH
95890: LD_INT 3
95892: PUSH
95893: EMPTY
95894: LIST
95895: LIST
95896: PPUSH
95897: CALL_OW 72
95901: ST_TO_ADDR
// if tmp then
95902: LD_VAR 0 12
95906: IFFALSE 95945
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
95908: LD_ADDR_EXP 72
95912: PUSH
95913: LD_EXP 72
95917: PPUSH
95918: LD_VAR 0 1
95922: PPUSH
95923: LD_EXP 72
95927: PUSH
95928: LD_VAR 0 1
95932: ARRAY
95933: PUSH
95934: LD_VAR 0 12
95938: UNION
95939: PPUSH
95940: CALL_OW 1
95944: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
95945: LD_VAR 0 1
95949: PPUSH
95950: LD_INT 19
95952: PPUSH
95953: CALL 51540 0 2
// repeat wait ( 0 0$1 ) ;
95957: LD_INT 35
95959: PPUSH
95960: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
95964: LD_EXP 60
95968: PUSH
95969: LD_VAR 0 1
95973: ARRAY
95974: NOT
95975: PUSH
95976: LD_EXP 60
95980: PUSH
95981: LD_VAR 0 1
95985: ARRAY
95986: PUSH
95987: EMPTY
95988: EQUAL
95989: OR
95990: IFFALSE 96027
// begin for i in defenders do
95992: LD_ADDR_VAR 0 5
95996: PUSH
95997: LD_VAR 0 2
96001: PUSH
96002: FOR_IN
96003: IFFALSE 96016
// ComStop ( i ) ;
96005: LD_VAR 0 5
96009: PPUSH
96010: CALL_OW 141
96014: GO 96002
96016: POP
96017: POP
// defenders := [ ] ;
96018: LD_ADDR_VAR 0 2
96022: PUSH
96023: EMPTY
96024: ST_TO_ADDR
// exit ;
96025: GO 96213
// end ; for i in defenders do
96027: LD_ADDR_VAR 0 5
96031: PUSH
96032: LD_VAR 0 2
96036: PUSH
96037: FOR_IN
96038: IFFALSE 96127
// begin if not IsInArea ( i , mc_parking [ base ] ) then
96040: LD_VAR 0 5
96044: PPUSH
96045: LD_EXP 84
96049: PUSH
96050: LD_VAR 0 1
96054: ARRAY
96055: PPUSH
96056: CALL_OW 308
96060: NOT
96061: IFFALSE 96085
// ComMoveToArea ( i , mc_parking [ base ] ) else
96063: LD_VAR 0 5
96067: PPUSH
96068: LD_EXP 84
96072: PUSH
96073: LD_VAR 0 1
96077: ARRAY
96078: PPUSH
96079: CALL_OW 113
96083: GO 96125
// if GetControl ( i ) = control_manual then
96085: LD_VAR 0 5
96089: PPUSH
96090: CALL_OW 263
96094: PUSH
96095: LD_INT 1
96097: EQUAL
96098: IFFALSE 96125
// if IsDrivenBy ( i ) then
96100: LD_VAR 0 5
96104: PPUSH
96105: CALL_OW 311
96109: IFFALSE 96125
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
96111: LD_VAR 0 5
96115: PPUSH
96116: CALL_OW 311
96120: PPUSH
96121: CALL_OW 121
// end ;
96125: GO 96037
96127: POP
96128: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
96129: LD_VAR 0 2
96133: PPUSH
96134: LD_INT 95
96136: PUSH
96137: LD_EXP 84
96141: PUSH
96142: LD_VAR 0 1
96146: ARRAY
96147: PUSH
96148: EMPTY
96149: LIST
96150: LIST
96151: PPUSH
96152: CALL_OW 72
96156: PUSH
96157: LD_VAR 0 2
96161: EQUAL
96162: PUSH
96163: LD_EXP 83
96167: PUSH
96168: LD_VAR 0 1
96172: ARRAY
96173: OR
96174: PUSH
96175: LD_EXP 60
96179: PUSH
96180: LD_VAR 0 1
96184: ARRAY
96185: NOT
96186: OR
96187: IFFALSE 95957
// end ; MC_Reset ( base , 19 ) ;
96189: LD_VAR 0 1
96193: PPUSH
96194: LD_INT 19
96196: PPUSH
96197: CALL 51540 0 2
// MC_Reset ( base , 20 ) ;
96201: LD_VAR 0 1
96205: PPUSH
96206: LD_INT 20
96208: PPUSH
96209: CALL 51540 0 2
// end ;
96213: LD_VAR 0 4
96217: RET
