// export ru , ru2 , am ; export ams0 , ams1 , ams2 , ams3 , ams4 , ams5 , ams6 , ams7 , ams8 , ams9 , amsa , amsb , amsc ; export ams0_sk , ams1_sk , ams2_sk , ams3_sk , ams4_sk , ams5_sk , ams6_sk , ams7_sk , ams8_sk , ams9_sk , amsa_sk , amsb_sk , amsc_sk ; export ams_1 , ams_2 , ams_3 , ams_4 , ams_5 , ams_6 ; export ams_1_sk , ams_2_sk , ams_3_sk , ams_4_sk , ams_5_sk , ams_6_sk ; export amm0 , amm0_sk , amm1 , amm1_sk , amm2 , amm2_sk , amm3 , amm3_sk , amm4 , amm4_sk , amm5 , amm5_sk , amm6 , amm6_sk , amm7 , amm7_sk ; export amv1 , amv1_ch , amv1_wp , amv2 , amv2_ch , amv2_wp , amv3 , amv3_ch , amv3_wp , amv4 , amv4_ch , amv4_wp , amv5 , amv5_ch , amv5_wp , amv6 , amv6_ch , amv6_wp , amv7 , amv7_ch , amv7_wp ; export amsn0 , amsn0_sk , amsn1 , amsn1_sk ; export ame0 , ame0_sk , ame1 , ame1_sk , ame2 , ame2_sk , ame3 , ame3_sk , ame4 , ame4_sk , ame5 , ame5_sk ; export chcipli , telepused , zdrhame , rychlik ; var supply ; function setvars ; var tmp , tmp1 , tmp2 ; begin
   0: LD_INT 0
   2: PPUSH
   3: PPUSH
   4: PPUSH
   5: PPUSH
// ru = 3 ;
   6: LD_ADDR_EXP 1
  10: PUSH
  11: LD_INT 3
  13: ST_TO_ADDR
// ru2 = 6 ;
  14: LD_ADDR_EXP 2
  18: PUSH
  19: LD_INT 6
  21: ST_TO_ADDR
// am = 1 ;
  22: LD_ADDR_EXP 3
  26: PUSH
  27: LD_INT 1
  29: ST_TO_ADDR
// chcipli = 0 ;
  30: LD_ADDR_EXP 95
  34: PUSH
  35: LD_INT 0
  37: ST_TO_ADDR
// telepused = 0 ;
  38: LD_ADDR_EXP 96
  42: PUSH
  43: LD_INT 0
  45: ST_TO_ADDR
// supply = 19 ;
  46: LD_ADDR_LOC 1
  50: PUSH
  51: LD_INT 19
  53: ST_TO_ADDR
// lastsay = 0 ;
  54: LD_ADDR_EXP 124
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// nesahat = true ;
  62: LD_ADDR_EXP 125
  66: PUSH
  67: LD_INT 1
  69: ST_TO_ADDR
// rychlik = false ;
  70: LD_ADDR_EXP 98
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// zdrhame = 750 ;
  78: LD_ADDR_EXP 97
  82: PUSH
  83: LD_INT 750
  85: ST_TO_ADDR
// supply = [ 30 , 24 , 20 ] [ difficulty ] ;
  86: LD_ADDR_LOC 1
  90: PUSH
  91: LD_INT 30
  93: PUSH
  94: LD_INT 24
  96: PUSH
  97: LD_INT 20
  99: PUSH
 100: EMPTY
 101: LIST
 102: LIST
 103: LIST
 104: PUSH
 105: LD_OWVAR 67
 109: ARRAY
 110: ST_TO_ADDR
// ams0_sk = [ 3 , 5 , 7 ] [ difficulty ] ;
 111: LD_ADDR_EXP 17
 115: PUSH
 116: LD_INT 3
 118: PUSH
 119: LD_INT 5
 121: PUSH
 122: LD_INT 7
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_OWVAR 67
 134: ARRAY
 135: ST_TO_ADDR
// ams1_sk = [ 3 , 5 , 7 ] [ difficulty ] ;
 136: LD_ADDR_EXP 18
 140: PUSH
 141: LD_INT 3
 143: PUSH
 144: LD_INT 5
 146: PUSH
 147: LD_INT 7
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// ams2_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 161: LD_ADDR_EXP 19
 165: PUSH
 166: LD_INT 5
 168: PUSH
 169: LD_INT 7
 171: PUSH
 172: LD_INT 9
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_OWVAR 67
 184: ARRAY
 185: ST_TO_ADDR
// ams3_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 186: LD_ADDR_EXP 20
 190: PUSH
 191: LD_INT 5
 193: PUSH
 194: LD_INT 7
 196: PUSH
 197: LD_INT 9
 199: PUSH
 200: EMPTY
 201: LIST
 202: LIST
 203: LIST
 204: PUSH
 205: LD_OWVAR 67
 209: ARRAY
 210: ST_TO_ADDR
// ams4_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 211: LD_ADDR_EXP 21
 215: PUSH
 216: LD_INT 5
 218: PUSH
 219: LD_INT 7
 221: PUSH
 222: LD_INT 9
 224: PUSH
 225: EMPTY
 226: LIST
 227: LIST
 228: LIST
 229: PUSH
 230: LD_OWVAR 67
 234: ARRAY
 235: ST_TO_ADDR
// ams5_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 236: LD_ADDR_EXP 22
 240: PUSH
 241: LD_INT 5
 243: PUSH
 244: LD_INT 7
 246: PUSH
 247: LD_INT 9
 249: PUSH
 250: EMPTY
 251: LIST
 252: LIST
 253: LIST
 254: PUSH
 255: LD_OWVAR 67
 259: ARRAY
 260: ST_TO_ADDR
// ams6_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 261: LD_ADDR_EXP 23
 265: PUSH
 266: LD_INT 5
 268: PUSH
 269: LD_INT 7
 271: PUSH
 272: LD_INT 9
 274: PUSH
 275: EMPTY
 276: LIST
 277: LIST
 278: LIST
 279: PUSH
 280: LD_OWVAR 67
 284: ARRAY
 285: ST_TO_ADDR
// ams7_sk = [ 3 , 5 , 7 ] [ difficulty ] ;
 286: LD_ADDR_EXP 24
 290: PUSH
 291: LD_INT 3
 293: PUSH
 294: LD_INT 5
 296: PUSH
 297: LD_INT 7
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: PUSH
 305: LD_OWVAR 67
 309: ARRAY
 310: ST_TO_ADDR
// ams8_sk = [ 3 , 5 , 7 ] [ difficulty ] ;
 311: LD_ADDR_EXP 25
 315: PUSH
 316: LD_INT 3
 318: PUSH
 319: LD_INT 5
 321: PUSH
 322: LD_INT 7
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: LIST
 329: PUSH
 330: LD_OWVAR 67
 334: ARRAY
 335: ST_TO_ADDR
// ams9_sk = [ 3 , 5 , 7 ] [ difficulty ] ;
 336: LD_ADDR_EXP 26
 340: PUSH
 341: LD_INT 3
 343: PUSH
 344: LD_INT 5
 346: PUSH
 347: LD_INT 7
 349: PUSH
 350: EMPTY
 351: LIST
 352: LIST
 353: LIST
 354: PUSH
 355: LD_OWVAR 67
 359: ARRAY
 360: ST_TO_ADDR
// amsa_sk = [ 3 , 5 , 7 ] [ difficulty ] ;
 361: LD_ADDR_EXP 27
 365: PUSH
 366: LD_INT 3
 368: PUSH
 369: LD_INT 5
 371: PUSH
 372: LD_INT 7
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: LIST
 379: PUSH
 380: LD_OWVAR 67
 384: ARRAY
 385: ST_TO_ADDR
// amsb_sk = [ 3 , 5 , 7 ] [ difficulty ] ;
 386: LD_ADDR_EXP 28
 390: PUSH
 391: LD_INT 3
 393: PUSH
 394: LD_INT 5
 396: PUSH
 397: LD_INT 7
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: LIST
 404: PUSH
 405: LD_OWVAR 67
 409: ARRAY
 410: ST_TO_ADDR
// amsc_sk = [ 3 , 5 , 7 ] [ difficulty ] ;
 411: LD_ADDR_EXP 29
 415: PUSH
 416: LD_INT 3
 418: PUSH
 419: LD_INT 5
 421: PUSH
 422: LD_INT 7
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: LIST
 429: PUSH
 430: LD_OWVAR 67
 434: ARRAY
 435: ST_TO_ADDR
// ams_1_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 436: LD_ADDR_EXP 36
 440: PUSH
 441: LD_INT 5
 443: PUSH
 444: LD_INT 7
 446: PUSH
 447: LD_INT 9
 449: PUSH
 450: EMPTY
 451: LIST
 452: LIST
 453: LIST
 454: PUSH
 455: LD_OWVAR 67
 459: ARRAY
 460: ST_TO_ADDR
// ams_2_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 461: LD_ADDR_EXP 37
 465: PUSH
 466: LD_INT 5
 468: PUSH
 469: LD_INT 7
 471: PUSH
 472: LD_INT 9
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: LIST
 479: PUSH
 480: LD_OWVAR 67
 484: ARRAY
 485: ST_TO_ADDR
// ams_3_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 486: LD_ADDR_EXP 38
 490: PUSH
 491: LD_INT 5
 493: PUSH
 494: LD_INT 7
 496: PUSH
 497: LD_INT 9
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: LIST
 504: PUSH
 505: LD_OWVAR 67
 509: ARRAY
 510: ST_TO_ADDR
// ams_4_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 511: LD_ADDR_EXP 39
 515: PUSH
 516: LD_INT 5
 518: PUSH
 519: LD_INT 7
 521: PUSH
 522: LD_INT 9
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: PUSH
 530: LD_OWVAR 67
 534: ARRAY
 535: ST_TO_ADDR
// ams_5_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 536: LD_ADDR_EXP 40
 540: PUSH
 541: LD_INT 5
 543: PUSH
 544: LD_INT 7
 546: PUSH
 547: LD_INT 9
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: LIST
 554: PUSH
 555: LD_OWVAR 67
 559: ARRAY
 560: ST_TO_ADDR
// ams_6_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 561: LD_ADDR_EXP 41
 565: PUSH
 566: LD_INT 5
 568: PUSH
 569: LD_INT 7
 571: PUSH
 572: LD_INT 9
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: LIST
 579: PUSH
 580: LD_OWVAR 67
 584: ARRAY
 585: ST_TO_ADDR
// amm0_sk = [ 8 , 8 , 9 ] [ difficulty ] ;
 586: LD_ADDR_EXP 43
 590: PUSH
 591: LD_INT 8
 593: PUSH
 594: LD_INT 8
 596: PUSH
 597: LD_INT 9
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: LIST
 604: PUSH
 605: LD_OWVAR 67
 609: ARRAY
 610: ST_TO_ADDR
// amm1_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 611: LD_ADDR_EXP 45
 615: PUSH
 616: LD_INT 5
 618: PUSH
 619: LD_INT 7
 621: PUSH
 622: LD_INT 9
 624: PUSH
 625: EMPTY
 626: LIST
 627: LIST
 628: LIST
 629: PUSH
 630: LD_OWVAR 67
 634: ARRAY
 635: ST_TO_ADDR
// amm2_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 636: LD_ADDR_EXP 47
 640: PUSH
 641: LD_INT 5
 643: PUSH
 644: LD_INT 7
 646: PUSH
 647: LD_INT 9
 649: PUSH
 650: EMPTY
 651: LIST
 652: LIST
 653: LIST
 654: PUSH
 655: LD_OWVAR 67
 659: ARRAY
 660: ST_TO_ADDR
// amm3_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 661: LD_ADDR_EXP 49
 665: PUSH
 666: LD_INT 5
 668: PUSH
 669: LD_INT 7
 671: PUSH
 672: LD_INT 9
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: LIST
 679: PUSH
 680: LD_OWVAR 67
 684: ARRAY
 685: ST_TO_ADDR
// amm4_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 686: LD_ADDR_EXP 51
 690: PUSH
 691: LD_INT 5
 693: PUSH
 694: LD_INT 7
 696: PUSH
 697: LD_INT 9
 699: PUSH
 700: EMPTY
 701: LIST
 702: LIST
 703: LIST
 704: PUSH
 705: LD_OWVAR 67
 709: ARRAY
 710: ST_TO_ADDR
// amm5_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 711: LD_ADDR_EXP 53
 715: PUSH
 716: LD_INT 5
 718: PUSH
 719: LD_INT 7
 721: PUSH
 722: LD_INT 9
 724: PUSH
 725: EMPTY
 726: LIST
 727: LIST
 728: LIST
 729: PUSH
 730: LD_OWVAR 67
 734: ARRAY
 735: ST_TO_ADDR
// amm6_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 736: LD_ADDR_EXP 55
 740: PUSH
 741: LD_INT 5
 743: PUSH
 744: LD_INT 7
 746: PUSH
 747: LD_INT 9
 749: PUSH
 750: EMPTY
 751: LIST
 752: LIST
 753: LIST
 754: PUSH
 755: LD_OWVAR 67
 759: ARRAY
 760: ST_TO_ADDR
// amm7_sk = [ 5 , 7 , 9 ] [ difficulty ] ;
 761: LD_ADDR_EXP 57
 765: PUSH
 766: LD_INT 5
 768: PUSH
 769: LD_INT 7
 771: PUSH
 772: LD_INT 9
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: LIST
 779: PUSH
 780: LD_OWVAR 67
 784: ARRAY
 785: ST_TO_ADDR
// amv1_ch = [ us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] [ difficulty ] ;
 786: LD_ADDR_EXP 59
 790: PUSH
 791: LD_INT 3
 793: PUSH
 794: LD_INT 4
 796: PUSH
 797: LD_INT 4
 799: PUSH
 800: EMPTY
 801: LIST
 802: LIST
 803: LIST
 804: PUSH
 805: LD_OWVAR 67
 809: ARRAY
 810: ST_TO_ADDR
// amv1_wp = [ us_double_gun , us_heavy_gun , us_heavy_gun ] [ difficulty ] ;
 811: LD_ADDR_EXP 60
 815: PUSH
 816: LD_INT 5
 818: PUSH
 819: LD_INT 6
 821: PUSH
 822: LD_INT 6
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: LIST
 829: PUSH
 830: LD_OWVAR 67
 834: ARRAY
 835: ST_TO_ADDR
// amv2_ch = [ us_medium_tracked , us_medium_tracked , us_medium_tracked ] [ difficulty ] ;
 836: LD_ADDR_EXP 62
 840: PUSH
 841: LD_INT 3
 843: PUSH
 844: LD_INT 3
 846: PUSH
 847: LD_INT 3
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: LIST
 854: PUSH
 855: LD_OWVAR 67
 859: ARRAY
 860: ST_TO_ADDR
// amv2_wp = [ us_rocket_launcher , us_laser , us_laser ] [ difficulty ] ;
 861: LD_ADDR_EXP 63
 865: PUSH
 866: LD_INT 7
 868: PUSH
 869: LD_INT 9
 871: PUSH
 872: LD_INT 9
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: LIST
 879: PUSH
 880: LD_OWVAR 67
 884: ARRAY
 885: ST_TO_ADDR
// amv3_ch = [ us_medium_tracked , us_medium_tracked , us_medium_tracked ] [ difficulty ] ;
 886: LD_ADDR_EXP 65
 890: PUSH
 891: LD_INT 3
 893: PUSH
 894: LD_INT 3
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PUSH
 905: LD_OWVAR 67
 909: ARRAY
 910: ST_TO_ADDR
// amv3_wp = [ us_laser , us_laser , us_laser ] [ difficulty ] ;
 911: LD_ADDR_EXP 66
 915: PUSH
 916: LD_INT 9
 918: PUSH
 919: LD_INT 9
 921: PUSH
 922: LD_INT 9
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: LIST
 929: PUSH
 930: LD_OWVAR 67
 934: ARRAY
 935: ST_TO_ADDR
// amv4_ch = [ us_medium_tracked , us_medium_tracked , us_medium_tracked ] [ difficulty ] ;
 936: LD_ADDR_EXP 68
 940: PUSH
 941: LD_INT 3
 943: PUSH
 944: LD_INT 3
 946: PUSH
 947: LD_INT 3
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: LIST
 954: PUSH
 955: LD_OWVAR 67
 959: ARRAY
 960: ST_TO_ADDR
// amv4_wp = [ us_rocket_launcher , us_rocket_launcher , us_laser ] [ difficulty ] ;
 961: LD_ADDR_EXP 69
 965: PUSH
 966: LD_INT 7
 968: PUSH
 969: LD_INT 7
 971: PUSH
 972: LD_INT 9
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: LIST
 979: PUSH
 980: LD_OWVAR 67
 984: ARRAY
 985: ST_TO_ADDR
// amv5_ch = [ us_medium_tracked , us_medium_tracked , us_heavy_tracked ] [ difficulty ] ;
 986: LD_ADDR_EXP 71
 990: PUSH
 991: LD_INT 3
 993: PUSH
 994: LD_INT 3
 996: PUSH
 997: LD_INT 4
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: LIST
1004: PUSH
1005: LD_OWVAR 67
1009: ARRAY
1010: ST_TO_ADDR
// amv5_wp = [ us_machine_gun , us_gatling_gun , us_gatling_gun ] [ difficulty ] ;
1011: LD_ADDR_EXP 72
1015: PUSH
1016: LD_INT 2
1018: PUSH
1019: LD_INT 4
1021: PUSH
1022: LD_INT 4
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: PUSH
1030: LD_OWVAR 67
1034: ARRAY
1035: ST_TO_ADDR
// amv6_ch = [ us_medium_tracked , us_medium_tracked , us_morphling ] [ difficulty ] ;
1036: LD_ADDR_EXP 74
1040: PUSH
1041: LD_INT 3
1043: PUSH
1044: LD_INT 3
1046: PUSH
1047: LD_INT 5
1049: PUSH
1050: EMPTY
1051: LIST
1052: LIST
1053: LIST
1054: PUSH
1055: LD_OWVAR 67
1059: ARRAY
1060: ST_TO_ADDR
// amv6_wp = [ us_rocket_launcher , us_laser , us_laser ] [ difficulty ] ;
1061: LD_ADDR_EXP 75
1065: PUSH
1066: LD_INT 7
1068: PUSH
1069: LD_INT 9
1071: PUSH
1072: LD_INT 9
1074: PUSH
1075: EMPTY
1076: LIST
1077: LIST
1078: LIST
1079: PUSH
1080: LD_OWVAR 67
1084: ARRAY
1085: ST_TO_ADDR
// amv7_ch = [ us_medium_wheeled , us_medium_tracked , us_morphling ] [ difficulty ] ;
1086: LD_ADDR_EXP 77
1090: PUSH
1091: LD_INT 2
1093: PUSH
1094: LD_INT 3
1096: PUSH
1097: LD_INT 5
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: LIST
1104: PUSH
1105: LD_OWVAR 67
1109: ARRAY
1110: ST_TO_ADDR
// amv7_wp = [ us_gatling_gun , us_gatling_gun , us_gatling_gun ] [ difficulty ] ;
1111: LD_ADDR_EXP 78
1115: PUSH
1116: LD_INT 4
1118: PUSH
1119: LD_INT 4
1121: PUSH
1122: LD_INT 4
1124: PUSH
1125: EMPTY
1126: LIST
1127: LIST
1128: LIST
1129: PUSH
1130: LD_OWVAR 67
1134: ARRAY
1135: ST_TO_ADDR
// amsn0_sk = [ 4 , 7 , 9 ] [ difficulty ] ;
1136: LD_ADDR_EXP 80
1140: PUSH
1141: LD_INT 4
1143: PUSH
1144: LD_INT 7
1146: PUSH
1147: LD_INT 9
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: LIST
1154: PUSH
1155: LD_OWVAR 67
1159: ARRAY
1160: ST_TO_ADDR
// amsn1_sk = [ 4 , 6 , 8 ] [ difficulty ] ;
1161: LD_ADDR_EXP 82
1165: PUSH
1166: LD_INT 4
1168: PUSH
1169: LD_INT 6
1171: PUSH
1172: LD_INT 8
1174: PUSH
1175: EMPTY
1176: LIST
1177: LIST
1178: LIST
1179: PUSH
1180: LD_OWVAR 67
1184: ARRAY
1185: ST_TO_ADDR
// ame0_sk = [ 4 , 6 , 8 ] [ difficulty ] ;
1186: LD_ADDR_EXP 84
1190: PUSH
1191: LD_INT 4
1193: PUSH
1194: LD_INT 6
1196: PUSH
1197: LD_INT 8
1199: PUSH
1200: EMPTY
1201: LIST
1202: LIST
1203: LIST
1204: PUSH
1205: LD_OWVAR 67
1209: ARRAY
1210: ST_TO_ADDR
// ame1_sk = [ 4 , 6 , 8 ] [ difficulty ] ;
1211: LD_ADDR_EXP 86
1215: PUSH
1216: LD_INT 4
1218: PUSH
1219: LD_INT 6
1221: PUSH
1222: LD_INT 8
1224: PUSH
1225: EMPTY
1226: LIST
1227: LIST
1228: LIST
1229: PUSH
1230: LD_OWVAR 67
1234: ARRAY
1235: ST_TO_ADDR
// ame2_sk = [ 4 , 6 , 8 ] [ difficulty ] ;
1236: LD_ADDR_EXP 88
1240: PUSH
1241: LD_INT 4
1243: PUSH
1244: LD_INT 6
1246: PUSH
1247: LD_INT 8
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: LIST
1254: PUSH
1255: LD_OWVAR 67
1259: ARRAY
1260: ST_TO_ADDR
// ame3_sk = [ 4 , 6 , 8 ] [ difficulty ] ;
1261: LD_ADDR_EXP 90
1265: PUSH
1266: LD_INT 4
1268: PUSH
1269: LD_INT 6
1271: PUSH
1272: LD_INT 8
1274: PUSH
1275: EMPTY
1276: LIST
1277: LIST
1278: LIST
1279: PUSH
1280: LD_OWVAR 67
1284: ARRAY
1285: ST_TO_ADDR
// ame4_sk = [ 4 , 6 , 8 ] [ difficulty ] ;
1286: LD_ADDR_EXP 92
1290: PUSH
1291: LD_INT 4
1293: PUSH
1294: LD_INT 6
1296: PUSH
1297: LD_INT 8
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: LIST
1304: PUSH
1305: LD_OWVAR 67
1309: ARRAY
1310: ST_TO_ADDR
// ame5_sk = [ 4 , 6 , 8 ] [ difficulty ] ;
1311: LD_ADDR_EXP 94
1315: PUSH
1316: LD_INT 4
1318: PUSH
1319: LD_INT 6
1321: PUSH
1322: LD_INT 8
1324: PUSH
1325: EMPTY
1326: LIST
1327: LIST
1328: LIST
1329: PUSH
1330: LD_OWVAR 67
1334: ARRAY
1335: ST_TO_ADDR
// tmp2 = [ 4 , 6 , 8 ] [ difficulty ] ;
1336: LD_ADDR_VAR 0 4
1340: PUSH
1341: LD_INT 4
1343: PUSH
1344: LD_INT 6
1346: PUSH
1347: LD_INT 8
1349: PUSH
1350: EMPTY
1351: LIST
1352: LIST
1353: LIST
1354: PUSH
1355: LD_OWVAR 67
1359: ARRAY
1360: ST_TO_ADDR
// tmp = filterallunits ( [ [ f_side , am ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
1361: LD_ADDR_VAR 0 2
1365: PUSH
1366: LD_INT 22
1368: PUSH
1369: LD_EXP 3
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: PUSH
1378: LD_INT 2
1380: PUSH
1381: LD_INT 30
1383: PUSH
1384: LD_INT 32
1386: PUSH
1387: EMPTY
1388: LIST
1389: LIST
1390: PUSH
1391: LD_INT 30
1393: PUSH
1394: LD_INT 33
1396: PUSH
1397: EMPTY
1398: LIST
1399: LIST
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: LIST
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PPUSH
1410: CALL_OW 69
1414: ST_TO_ADDR
// for tmp1 in tmp do
1415: LD_ADDR_VAR 0 3
1419: PUSH
1420: LD_VAR 0 2
1424: PUSH
1425: FOR_IN
1426: IFFALSE 1447
// setblevel ( [ tmp1 ] , tmp2 ) ;
1428: LD_VAR 0 3
1432: PUSH
1433: EMPTY
1434: LIST
1435: PPUSH
1436: LD_VAR 0 4
1440: PPUSH
1441: CALL_OW 241
1445: GO 1425
1447: POP
1448: POP
// tmp = [ ambunk2 , ambunk3 , ambunk4 , ambunk5 , ambunk6 ] ;
1449: LD_ADDR_VAR 0 2
1453: PUSH
1454: LD_INT 15
1456: PUSH
1457: LD_INT 14
1459: PUSH
1460: LD_INT 6
1462: PUSH
1463: LD_INT 7
1465: PUSH
1466: LD_INT 13
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: LIST
1475: ST_TO_ADDR
// for tmp1 in tmp do
1476: LD_ADDR_VAR 0 3
1480: PUSH
1481: LD_VAR 0 2
1485: PUSH
1486: FOR_IN
1487: IFFALSE 1506
// setblevel ( [ tmp1 ] , 6 ) ;
1489: LD_VAR 0 3
1493: PUSH
1494: EMPTY
1495: LIST
1496: PPUSH
1497: LD_INT 6
1499: PPUSH
1500: CALL_OW 241
1504: GO 1486
1506: POP
1507: POP
// end ;
1508: LD_VAR 0 1
1512: RET
// export debug ; starting begin debug = false ;
1513: LD_ADDR_EXP 99
1517: PUSH
1518: LD_INT 0
1520: ST_TO_ADDR
// randomizeall ;
1521: CALL_OW 11
// disable ( 01 ) ;
1525: LD_INT 1
1527: DISABLE_MARKED
// disable ( 02 ) ;
1528: LD_INT 2
1530: DISABLE_MARKED
// disable ( 03 ) ;
1531: LD_INT 3
1533: DISABLE_MARKED
// disable ( 04 ) ;
1534: LD_INT 4
1536: DISABLE_MARKED
// disable ( 05 ) ;
1537: LD_INT 5
1539: DISABLE_MARKED
// disable ( 08 ) ;
1540: LD_INT 8
1542: DISABLE_MARKED
// disable ( 09 ) ;
1543: LD_INT 9
1545: DISABLE_MARKED
// disable ( 10 ) ;
1546: LD_INT 10
1548: DISABLE_MARKED
// setvars ;
1549: CALL 0 0 0
// prepare_americans ;
1553: CALL 12083 0 0
// prepare_russians ;
1557: CALL 2199 0 0
// end ;
1561: END
// on buildingcomplete ( un ) do var tmp ;
1562: LD_INT 0
1564: PPUSH
// if ( getside ( un ) = ru ) and ( getbtype ( un ) = b_lab ) then
1565: LD_VAR 0 1
1569: PPUSH
1570: CALL_OW 255
1574: PUSH
1575: LD_EXP 1
1579: EQUAL
1580: PUSH
1581: LD_VAR 0 1
1585: PPUSH
1586: CALL_OW 266
1590: PUSH
1591: LD_INT 6
1593: EQUAL
1594: AND
1595: IFFALSE 1771
// begin disable ;
1597: DISABLE
// dialogueon ;
1598: CALL_OW 6
// if isok ( kiril ) then
1602: LD_EXP 110
1606: PPUSH
1607: CALL_OW 302
1611: IFFALSE 1627
// say ( kiril , DTeleportStart-Kir-1 ) else
1613: LD_EXP 110
1617: PPUSH
1618: LD_STRING DTeleportStart-Kir-1
1620: PPUSH
1621: CALL_OW 88
1625: GO 1767
// if isok ( kapitsova ) then
1627: LD_EXP 111
1631: PPUSH
1632: CALL_OW 302
1636: IFFALSE 1652
// say ( kapitsova , DTeleportStart-Kap-1 ) else
1638: LD_EXP 111
1642: PPUSH
1643: LD_STRING DTeleportStart-Kap-1
1645: PPUSH
1646: CALL_OW 88
1650: GO 1767
// if isok ( petrosyan ) then
1652: LD_EXP 112
1656: PPUSH
1657: CALL_OW 302
1661: IFFALSE 1677
// say ( petrosyan , DTeleportStart-Pty-1 ) else
1663: LD_EXP 112
1667: PPUSH
1668: LD_STRING DTeleportStart-Pty-1
1670: PPUSH
1671: CALL_OW 88
1675: GO 1767
// if isok ( scholtze ) then
1677: LD_EXP 113
1681: PPUSH
1682: CALL_OW 302
1686: IFFALSE 1702
// say ( scholtze , DTeleportStart-Sch-1 ) else
1688: LD_EXP 113
1692: PPUSH
1693: LD_STRING DTeleportStart-Sch-1
1695: PPUSH
1696: CALL_OW 88
1700: GO 1767
// begin tmp = filterallunits ( [ [ f_side , ru ] , [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
1702: LD_ADDR_VAR 0 2
1706: PUSH
1707: LD_INT 22
1709: PUSH
1710: LD_EXP 1
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: PUSH
1719: LD_INT 25
1721: PUSH
1722: LD_INT 4
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: PUSH
1729: LD_INT 50
1731: PUSH
1732: EMPTY
1733: LIST
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: LIST
1739: PPUSH
1740: CALL_OW 69
1744: ST_TO_ADDR
// if tmp then
1745: LD_VAR 0 2
1749: IFFALSE 1767
// say ( tmp [ 1 ] , DTeleportStart-Rsol1-1 ) ;
1751: LD_VAR 0 2
1755: PUSH
1756: LD_INT 1
1758: ARRAY
1759: PPUSH
1760: LD_STRING DTeleportStart-Rsol1-1
1762: PPUSH
1763: CALL_OW 88
// end ; dialogueoff ;
1767: CALL_OW 7
// end ;
1771: PPOPN 2
1773: END
// on researchcomplete ( tech , lab ) do var tmp ;
1774: LD_INT 0
1776: PPUSH
// if tech = tech_targteleport then
1777: LD_VAR 0 1
1781: PUSH
1782: LD_INT 38
1784: EQUAL
1785: IFFALSE 1974
// begin dialogueon ;
1787: CALL_OW 6
// if isok ( kiril ) then
1791: LD_EXP 110
1795: PPUSH
1796: CALL_OW 302
1800: IFFALSE 1816
// say ( kiril , DTeleportEnd-Kir-1 ) else
1802: LD_EXP 110
1806: PPUSH
1807: LD_STRING DTeleportEnd-Kir-1
1809: PPUSH
1810: CALL_OW 88
1814: GO 1956
// if isok ( kapitsova ) then
1816: LD_EXP 111
1820: PPUSH
1821: CALL_OW 302
1825: IFFALSE 1841
// say ( kapitsova , DTeleportEnd-Kap-1 ) else
1827: LD_EXP 111
1831: PPUSH
1832: LD_STRING DTeleportEnd-Kap-1
1834: PPUSH
1835: CALL_OW 88
1839: GO 1956
// if isok ( petrosyan ) then
1841: LD_EXP 112
1845: PPUSH
1846: CALL_OW 302
1850: IFFALSE 1866
// say ( petrosyan , DTeleportEnd-Pty-1 ) else
1852: LD_EXP 112
1856: PPUSH
1857: LD_STRING DTeleportEnd-Pty-1
1859: PPUSH
1860: CALL_OW 88
1864: GO 1956
// if isok ( scholtze ) then
1866: LD_EXP 113
1870: PPUSH
1871: CALL_OW 302
1875: IFFALSE 1891
// say ( scholtze , DTeleportEnd-Sch-1 ) else
1877: LD_EXP 113
1881: PPUSH
1882: LD_STRING DTeleportEnd-Sch-1
1884: PPUSH
1885: CALL_OW 88
1889: GO 1956
// begin tmp = filterallunits ( [ [ f_side , ru ] , [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
1891: LD_ADDR_VAR 0 3
1895: PUSH
1896: LD_INT 22
1898: PUSH
1899: LD_EXP 1
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: PUSH
1908: LD_INT 25
1910: PUSH
1911: LD_INT 4
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: PUSH
1918: LD_INT 50
1920: PUSH
1921: EMPTY
1922: LIST
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: LIST
1928: PPUSH
1929: CALL_OW 69
1933: ST_TO_ADDR
// if tmp then
1934: LD_VAR 0 3
1938: IFFALSE 1956
// say ( tmp [ 1 ] , DTeleportEnd-Rsol1-1 ) ;
1940: LD_VAR 0 3
1944: PUSH
1945: LD_INT 1
1947: ARRAY
1948: PPUSH
1949: LD_STRING DTeleportEnd-Rsol1-1
1951: PPUSH
1952: CALL_OW 88
// end ; dialogueoff ;
1956: CALL_OW 7
// wait ( 0 0$2 ) ;
1960: LD_INT 70
1962: PPUSH
1963: CALL_OW 67
// hint ( Teleport ) ;
1967: LD_STRING Teleport
1969: PPUSH
1970: CALL_OW 339
// end ;
1974: PPOPN 3
1976: END
// every 1 1$0 + 0 0$15 do
1977: GO 1979
1979: DISABLE
// begin createcratesarea ( 5 , targetarea , true ) ;
1980: LD_INT 5
1982: PPUSH
1983: LD_INT 9
1985: PPUSH
1986: LD_INT 1
1988: PPUSH
1989: CALL_OW 55
// if supply < 10 then
1993: LD_LOC 1
1997: PUSH
1998: LD_INT 10
2000: LESS
2001: IFFALSE 2020
// begin supply = supply - 1 ;
2003: LD_ADDR_LOC 1
2007: PUSH
2008: LD_LOC 1
2012: PUSH
2013: LD_INT 1
2015: MINUS
2016: ST_TO_ADDR
// enable ;
2017: ENABLE
// end else
2018: GO 2023
// enable ( 04 ) ;
2020: LD_INT 4
2022: ENABLE_MARKED
// end ;
2023: END
// every 2 2$0 marked 04 do
2024: GO 2026
2026: DISABLE
// begin createcratesarea ( 5 , targetarea , true ) ;
2027: LD_INT 5
2029: PPUSH
2030: LD_INT 9
2032: PPUSH
2033: LD_INT 1
2035: PPUSH
2036: CALL_OW 55
// if supply then
2040: LD_LOC 1
2044: IFFALSE 2061
// begin supply = supply - 1 ;
2046: LD_ADDR_LOC 1
2050: PUSH
2051: LD_LOC 1
2055: PUSH
2056: LD_INT 1
2058: MINUS
2059: ST_TO_ADDR
// enable ;
2060: ENABLE
// end ; end ;
2061: END
// every 0 0$7 do
2062: GO 2064
2064: DISABLE
// begin randomize ;
2065: CALL_OW 10
// enable ;
2069: ENABLE
// end ; end_of_file
2070: END
// export vsevol , popov , gaydar , yashin , titov , belkov , kuzmov , gnyevko , kozlov , furmanov , kiril , kapitsova , petrosyan , scholtze , dolgov , kovalyuk , karamazov , petrovova , oblukov , burlak , platonov , jmm ; export masha ; var obeti , obeti2 , survivors , ostatni , nedoboje ; export vs ; function myisinarea ( list , area , x , y ) ; var tmp , tmp1 ; begin
2071: LD_INT 0
2073: PPUSH
2074: PPUSH
2075: PPUSH
// tmp1 = [ ] ;
2076: LD_ADDR_VAR 0 7
2080: PUSH
2081: EMPTY
2082: ST_TO_ADDR
// for tmp in list do
2083: LD_ADDR_VAR 0 6
2087: PUSH
2088: LD_VAR 0 1
2092: PUSH
2093: FOR_IN
2094: IFFALSE 2134
// if not isinarea ( tmp , area ) then
2096: LD_VAR 0 6
2100: PPUSH
2101: LD_VAR 0 2
2105: PPUSH
2106: CALL_OW 308
2110: NOT
2111: IFFALSE 2132
// begin tmp1 = tmp1 ^ [ tmp ] ;
2113: LD_ADDR_VAR 0 7
2117: PUSH
2118: LD_VAR 0 7
2122: PUSH
2123: LD_VAR 0 6
2127: PUSH
2128: EMPTY
2129: LIST
2130: ADD
2131: ST_TO_ADDR
// end ;
2132: GO 2093
2134: POP
2135: POP
// if tmp1 then
2136: LD_VAR 0 7
2140: IFFALSE 2186
// begin comstop ( list diff tmp1 ) ;
2142: LD_VAR 0 1
2146: PUSH
2147: LD_VAR 0 7
2151: DIFF
2152: PPUSH
2153: CALL_OW 141
// commovexy ( tmp1 , x , y ) ;
2157: LD_VAR 0 7
2161: PPUSH
2162: LD_VAR 0 3
2166: PPUSH
2167: LD_VAR 0 4
2171: PPUSH
2172: CALL_OW 111
// result = false ;
2176: LD_ADDR_VAR 0 5
2180: PUSH
2181: LD_INT 0
2183: ST_TO_ADDR
// end else
2184: GO 2194
// result = true ;
2186: LD_ADDR_VAR 0 5
2190: PUSH
2191: LD_INT 1
2193: ST_TO_ADDR
// end ;
2194: LD_VAR 0 5
2198: RET
// var vsevol_v , popov_v , gaydar_v , yashin_v , vehikly , vehiklyo , vehiklys ; export function prepare_russians ; var tmp , tmp2 , tmp3 , na , na2 , surv3 , veh ; begin
2199: LD_INT 0
2201: PPUSH
2202: PPUSH
2203: PPUSH
2204: PPUSH
2205: PPUSH
2206: PPUSH
2207: PPUSH
2208: PPUSH
// centernowonxy ( 99 , 102 ) ;
2209: LD_INT 99
2211: PPUSH
2212: LD_INT 102
2214: PPUSH
2215: CALL_OW 86
// na = 0 ;
2219: LD_ADDR_VAR 0 5
2223: PUSH
2224: LD_INT 0
2226: ST_TO_ADDR
// na2 = 0 ;
2227: LD_ADDR_VAR 0 6
2231: PUSH
2232: LD_INT 0
2234: ST_TO_ADDR
// uc_side = ru ;
2235: LD_ADDR_OWVAR 20
2239: PUSH
2240: LD_EXP 1
2244: ST_TO_ADDR
// if testcharacters ( Burlak ) then
2245: LD_STRING Burlak
2247: PPUSH
2248: CALL_OW 28
2252: IFFALSE 2290
// if checkcharacterset ( Burlak ) then
2254: LD_STRING Burlak
2256: PPUSH
2257: CALL_OW 29
2261: IFFALSE 2281
// burlak = createcharacterwithclass ( Burlak , class_engineer ) else
2263: LD_ADDR_EXP 119
2267: PUSH
2268: LD_STRING Burlak
2270: PPUSH
2271: LD_INT 2
2273: PPUSH
2274: CALL_OW 35
2278: ST_TO_ADDR
2279: GO 2288
// msg ( jakto ze Burlak je chciplej?! ) else
2281: LD_STRING jakto ze Burlak je chciplej?!
2283: PPUSH
2284: CALL_OW 100
2288: GO 2297
// msg ( neny Burlak ) ;
2290: LD_STRING neny Burlak
2292: PPUSH
2293: CALL_OW 100
// platonov = newcharacter ( Platonov ) ;
2297: LD_ADDR_EXP 120
2301: PUSH
2302: LD_STRING Platonov
2304: PPUSH
2305: CALL_OW 25
2309: ST_TO_ADDR
// if not platonov then
2310: LD_EXP 120
2314: NOT
2315: IFFALSE 2324
// msg ( neny Platonov ) ;
2317: LD_STRING neny Platonov
2319: PPUSH
2320: CALL_OW 100
// uc_side = am ;
2324: LD_ADDR_OWVAR 20
2328: PUSH
2329: LD_EXP 3
2333: ST_TO_ADDR
// jmm = newcharacter ( Macmillan ) ;
2334: LD_ADDR_EXP 121
2338: PUSH
2339: LD_STRING Macmillan
2341: PPUSH
2342: CALL_OW 25
2346: ST_TO_ADDR
// if not jmm then
2347: LD_EXP 121
2351: NOT
2352: IFFALSE 2361
// msg ( neny Macmillan ) ;
2354: LD_STRING neny Macmillan
2356: PPUSH
2357: CALL_OW 100
// uc_side = ru2 ;
2361: LD_ADDR_OWVAR 20
2365: PUSH
2366: LD_EXP 2
2370: ST_TO_ADDR
// vs = false ;
2371: LD_ADDR_EXP 123
2375: PUSH
2376: LD_INT 0
2378: ST_TO_ADDR
// if testcharacters ( Vsevolod ) then
2379: LD_STRING Vsevolod
2381: PPUSH
2382: CALL_OW 28
2386: IFFALSE 2452
// if checkcharacterset ( Vsevolod ) then
2388: LD_STRING Vsevolod
2390: PPUSH
2391: CALL_OW 29
2395: IFFALSE 2423
// begin vs = true ;
2397: LD_ADDR_EXP 123
2401: PUSH
2402: LD_INT 1
2404: ST_TO_ADDR
// vsevol = createcharacterwithclass ( Vsevolod , class_soldier ) ;
2405: LD_ADDR_EXP 100
2409: PUSH
2410: LD_STRING Vsevolod
2412: PPUSH
2413: LD_INT 1
2415: PPUSH
2416: CALL_OW 35
2420: ST_TO_ADDR
// end else
2421: GO 2450
// begin vsevol = newcharacter ( Stolypin ) ;
2423: LD_ADDR_EXP 100
2427: PUSH
2428: LD_STRING Stolypin
2430: PPUSH
2431: CALL_OW 25
2435: ST_TO_ADDR
// if not vsevol then
2436: LD_EXP 100
2440: NOT
2441: IFFALSE 2450
// msg ( neny Stolypin ) ;
2443: LD_STRING neny Stolypin
2445: PPUSH
2446: CALL_OW 100
// end else
2450: GO 2459
// msg ( neny Vsevolod ) ;
2452: LD_STRING neny Vsevolod
2454: PPUSH
2455: CALL_OW 100
// popov = newcharacter ( Popov ) ;
2459: LD_ADDR_EXP 101
2463: PUSH
2464: LD_STRING Popov
2466: PPUSH
2467: CALL_OW 25
2471: ST_TO_ADDR
// if not popov then
2472: LD_EXP 101
2476: NOT
2477: IFFALSE 2486
// msg ( neny Popov ) ;
2479: LD_STRING neny Popov
2481: PPUSH
2482: CALL_OW 100
// if testcharacters ( Gaydar ) then
2486: LD_STRING Gaydar
2488: PPUSH
2489: CALL_OW 28
2493: IFFALSE 2546
// if checkcharacterset ( Gaydar ) then
2495: LD_STRING Gaydar
2497: PPUSH
2498: CALL_OW 29
2502: IFFALSE 2522
// gaydar = createcharacterwithclass ( Gaydar , class_soldier ) else
2504: LD_ADDR_EXP 102
2508: PUSH
2509: LD_STRING Gaydar
2511: PPUSH
2512: LD_INT 1
2514: PPUSH
2515: CALL_OW 35
2519: ST_TO_ADDR
2520: GO 2544
// begin gaydar = 0 ;
2522: LD_ADDR_EXP 102
2526: PUSH
2527: LD_INT 0
2529: ST_TO_ADDR
// na2 = na2 + 1 ;
2530: LD_ADDR_VAR 0 6
2534: PUSH
2535: LD_VAR 0 6
2539: PUSH
2540: LD_INT 1
2542: PLUS
2543: ST_TO_ADDR
// end else
2544: GO 2553
// msg ( neny Gaydar ) ;
2546: LD_STRING neny Gaydar
2548: PPUSH
2549: CALL_OW 100
// yashin = newcharacter ( Yashin ) ;
2553: LD_ADDR_EXP 103
2557: PUSH
2558: LD_STRING Yashin
2560: PPUSH
2561: CALL_OW 25
2565: ST_TO_ADDR
// if not yashin then
2566: LD_EXP 103
2570: NOT
2571: IFFALSE 2580
// msg ( neny Yashin ) ;
2573: LD_STRING neny Yashin
2575: PPUSH
2576: CALL_OW 100
// if testcharacters ( Titov ) then
2580: LD_STRING Titov
2582: PPUSH
2583: CALL_OW 28
2587: IFFALSE 2640
// if checkcharacterset ( Titov ) then
2589: LD_STRING Titov
2591: PPUSH
2592: CALL_OW 29
2596: IFFALSE 2616
// titov = createcharacterwithclass ( Titov , class_soldier ) else
2598: LD_ADDR_EXP 104
2602: PUSH
2603: LD_STRING Titov
2605: PPUSH
2606: LD_INT 1
2608: PPUSH
2609: CALL_OW 35
2613: ST_TO_ADDR
2614: GO 2638
// begin titov = 0 ;
2616: LD_ADDR_EXP 104
2620: PUSH
2621: LD_INT 0
2623: ST_TO_ADDR
// na2 = na2 + 1 ;
2624: LD_ADDR_VAR 0 6
2628: PUSH
2629: LD_VAR 0 6
2633: PUSH
2634: LD_INT 1
2636: PLUS
2637: ST_TO_ADDR
// end else
2638: GO 2647
// msg ( neny Titov ) ;
2640: LD_STRING neny Titov
2642: PPUSH
2643: CALL_OW 100
// if testcharacters ( Belkov ) then
2647: LD_STRING Belkov
2649: PPUSH
2650: CALL_OW 28
2654: IFFALSE 2707
// if checkcharacterset ( Belkov ) then
2656: LD_STRING Belkov
2658: PPUSH
2659: CALL_OW 29
2663: IFFALSE 2683
// belkov = createcharacterwithclass ( Belkov , class_soldier ) else
2665: LD_ADDR_EXP 105
2669: PUSH
2670: LD_STRING Belkov
2672: PPUSH
2673: LD_INT 1
2675: PPUSH
2676: CALL_OW 35
2680: ST_TO_ADDR
2681: GO 2705
// begin belkov = 0 ;
2683: LD_ADDR_EXP 105
2687: PUSH
2688: LD_INT 0
2690: ST_TO_ADDR
// na2 = na2 + 1 ;
2691: LD_ADDR_VAR 0 6
2695: PUSH
2696: LD_VAR 0 6
2700: PUSH
2701: LD_INT 1
2703: PLUS
2704: ST_TO_ADDR
// end else
2705: GO 2714
// msg ( neny Belkov ) ;
2707: LD_STRING neny Belkov
2709: PPUSH
2710: CALL_OW 100
// if testcharacters ( Kuzmov ) then
2714: LD_STRING Kuzmov
2716: PPUSH
2717: CALL_OW 28
2721: IFFALSE 2774
// if checkcharacterset ( Kuzmov ) then
2723: LD_STRING Kuzmov
2725: PPUSH
2726: CALL_OW 29
2730: IFFALSE 2750
// kuzmov = createcharacterwithclass ( Kuzmov , class_soldier ) else
2732: LD_ADDR_EXP 106
2736: PUSH
2737: LD_STRING Kuzmov
2739: PPUSH
2740: LD_INT 1
2742: PPUSH
2743: CALL_OW 35
2747: ST_TO_ADDR
2748: GO 2772
// begin kuzmov = 0 ;
2750: LD_ADDR_EXP 106
2754: PUSH
2755: LD_INT 0
2757: ST_TO_ADDR
// na2 = na2 + 1 ;
2758: LD_ADDR_VAR 0 6
2762: PUSH
2763: LD_VAR 0 6
2767: PUSH
2768: LD_INT 1
2770: PLUS
2771: ST_TO_ADDR
// end else
2772: GO 2781
// msg ( neny Kuzmov ) ;
2774: LD_STRING neny Kuzmov
2776: PPUSH
2777: CALL_OW 100
// if testcharacters ( Gnyevko ) then
2781: LD_STRING Gnyevko
2783: PPUSH
2784: CALL_OW 28
2788: IFFALSE 2841
// if checkcharacterset ( Gnyevko ) then
2790: LD_STRING Gnyevko
2792: PPUSH
2793: CALL_OW 29
2797: IFFALSE 2817
// gnyevko = createcharacterwithclass ( Gnyevko , class_soldier ) else
2799: LD_ADDR_EXP 107
2803: PUSH
2804: LD_STRING Gnyevko
2806: PPUSH
2807: LD_INT 1
2809: PPUSH
2810: CALL_OW 35
2814: ST_TO_ADDR
2815: GO 2839
// begin gnyevko = 0 ;
2817: LD_ADDR_EXP 107
2821: PUSH
2822: LD_INT 0
2824: ST_TO_ADDR
// na2 = na2 + 1 ;
2825: LD_ADDR_VAR 0 6
2829: PUSH
2830: LD_VAR 0 6
2834: PUSH
2835: LD_INT 1
2837: PLUS
2838: ST_TO_ADDR
// end else
2839: GO 2848
// msg ( neny Gnyevko ) ;
2841: LD_STRING neny Gnyevko
2843: PPUSH
2844: CALL_OW 100
// if testcharacters ( Kozlov ) then
2848: LD_STRING Kozlov
2850: PPUSH
2851: CALL_OW 28
2855: IFFALSE 2908
// if checkcharacterset ( Kozlov ) then
2857: LD_STRING Kozlov
2859: PPUSH
2860: CALL_OW 29
2864: IFFALSE 2884
// kozlov = createcharacterwithclass ( Kozlov , class_soldier ) else
2866: LD_ADDR_EXP 108
2870: PUSH
2871: LD_STRING Kozlov
2873: PPUSH
2874: LD_INT 1
2876: PPUSH
2877: CALL_OW 35
2881: ST_TO_ADDR
2882: GO 2906
// begin kozlov = 0 ;
2884: LD_ADDR_EXP 108
2888: PUSH
2889: LD_INT 0
2891: ST_TO_ADDR
// na2 = na2 + 1 ;
2892: LD_ADDR_VAR 0 6
2896: PUSH
2897: LD_VAR 0 6
2901: PUSH
2902: LD_INT 1
2904: PLUS
2905: ST_TO_ADDR
// end else
2906: GO 2915
// msg ( neny Kozlov ) ;
2908: LD_STRING neny Kozlov
2910: PPUSH
2911: CALL_OW 100
// uc_side = ru ;
2915: LD_ADDR_OWVAR 20
2919: PUSH
2920: LD_EXP 1
2924: ST_TO_ADDR
// furmanov = newcharacter ( Furmanov ) ;
2925: LD_ADDR_EXP 109
2929: PUSH
2930: LD_STRING Furmanov
2932: PPUSH
2933: CALL_OW 25
2937: ST_TO_ADDR
// if not furmanov then
2938: LD_EXP 109
2942: NOT
2943: IFFALSE 2952
// msg ( neny Furmanov ) ;
2945: LD_STRING neny Furmanov
2947: PPUSH
2948: CALL_OW 100
// if testcharacters ( Kirilenkova ) then
2952: LD_STRING Kirilenkova
2954: PPUSH
2955: CALL_OW 28
2959: IFFALSE 3012
// if checkcharacterset ( Kirilenkova ) then
2961: LD_STRING Kirilenkova
2963: PPUSH
2964: CALL_OW 29
2968: IFFALSE 2988
// kiril = createcharacterwithclass ( Kirilenkova , class_scientistic ) else
2970: LD_ADDR_EXP 110
2974: PUSH
2975: LD_STRING Kirilenkova
2977: PPUSH
2978: LD_INT 4
2980: PPUSH
2981: CALL_OW 35
2985: ST_TO_ADDR
2986: GO 3010
// begin kiril = 0 ;
2988: LD_ADDR_EXP 110
2992: PUSH
2993: LD_INT 0
2995: ST_TO_ADDR
// na = na + 1 ;
2996: LD_ADDR_VAR 0 5
3000: PUSH
3001: LD_VAR 0 5
3005: PUSH
3006: LD_INT 1
3008: PLUS
3009: ST_TO_ADDR
// end else
3010: GO 3019
// msg ( neny Kirilenkova ) ;
3012: LD_STRING neny Kirilenkova
3014: PPUSH
3015: CALL_OW 100
// if testcharacters ( Kapitsova ) then
3019: LD_STRING Kapitsova
3021: PPUSH
3022: CALL_OW 28
3026: IFFALSE 3079
// if checkcharacterset ( Kapitsova ) then
3028: LD_STRING Kapitsova
3030: PPUSH
3031: CALL_OW 29
3035: IFFALSE 3055
// kapitsova = createcharacterwithclass ( Kapitsova , class_scientistic ) else
3037: LD_ADDR_EXP 111
3041: PUSH
3042: LD_STRING Kapitsova
3044: PPUSH
3045: LD_INT 4
3047: PPUSH
3048: CALL_OW 35
3052: ST_TO_ADDR
3053: GO 3077
// begin kapitsova = 0 ;
3055: LD_ADDR_EXP 111
3059: PUSH
3060: LD_INT 0
3062: ST_TO_ADDR
// na = na + 1 ;
3063: LD_ADDR_VAR 0 5
3067: PUSH
3068: LD_VAR 0 5
3072: PUSH
3073: LD_INT 1
3075: PLUS
3076: ST_TO_ADDR
// end else
3077: GO 3086
// msg ( neny Kapitsova ) ;
3079: LD_STRING neny Kapitsova
3081: PPUSH
3082: CALL_OW 100
// if testcharacters ( Petrosyan ) then
3086: LD_STRING Petrosyan
3088: PPUSH
3089: CALL_OW 28
3093: IFFALSE 3146
// if checkcharacterset ( Petrosyan ) then
3095: LD_STRING Petrosyan
3097: PPUSH
3098: CALL_OW 29
3102: IFFALSE 3122
// petrosyan = createcharacterwithclass ( Petrosyan , class_scientistic ) else
3104: LD_ADDR_EXP 112
3108: PUSH
3109: LD_STRING Petrosyan
3111: PPUSH
3112: LD_INT 4
3114: PPUSH
3115: CALL_OW 35
3119: ST_TO_ADDR
3120: GO 3144
// begin petrosyan = 0 ;
3122: LD_ADDR_EXP 112
3126: PUSH
3127: LD_INT 0
3129: ST_TO_ADDR
// na = na + 1 ;
3130: LD_ADDR_VAR 0 5
3134: PUSH
3135: LD_VAR 0 5
3139: PUSH
3140: LD_INT 1
3142: PLUS
3143: ST_TO_ADDR
// end else
3144: GO 3153
// msg ( neny Petrosyan ) ;
3146: LD_STRING neny Petrosyan
3148: PPUSH
3149: CALL_OW 100
// if testcharacters ( Scholtze ) then
3153: LD_STRING Scholtze
3155: PPUSH
3156: CALL_OW 28
3160: IFFALSE 3213
// if checkcharacterset ( Scholtze ) then
3162: LD_STRING Scholtze
3164: PPUSH
3165: CALL_OW 29
3169: IFFALSE 3189
// scholtze = createcharacterwithclass ( Scholtze , class_scientistic ) else
3171: LD_ADDR_EXP 113
3175: PUSH
3176: LD_STRING Scholtze
3178: PPUSH
3179: LD_INT 4
3181: PPUSH
3182: CALL_OW 35
3186: ST_TO_ADDR
3187: GO 3211
// begin scholtze = 0 ;
3189: LD_ADDR_EXP 113
3193: PUSH
3194: LD_INT 0
3196: ST_TO_ADDR
// na = na + 1 ;
3197: LD_ADDR_VAR 0 5
3201: PUSH
3202: LD_VAR 0 5
3206: PUSH
3207: LD_INT 1
3209: PLUS
3210: ST_TO_ADDR
// end else
3211: GO 3220
// msg ( neny Scholtze ) ;
3213: LD_STRING neny Scholtze
3215: PPUSH
3216: CALL_OW 100
// uc_side = ru2 ;
3220: LD_ADDR_OWVAR 20
3224: PUSH
3225: LD_EXP 2
3229: ST_TO_ADDR
// if testcharacters ( Dolgov ) then
3230: LD_STRING Dolgov
3232: PPUSH
3233: CALL_OW 28
3237: IFFALSE 3290
// if checkcharacterset ( Dolgov ) then
3239: LD_STRING Dolgov
3241: PPUSH
3242: CALL_OW 29
3246: IFFALSE 3266
// dolgov = createcharacterwithclass ( Dolgov , class_soldier ) else
3248: LD_ADDR_EXP 114
3252: PUSH
3253: LD_STRING Dolgov
3255: PPUSH
3256: LD_INT 1
3258: PPUSH
3259: CALL_OW 35
3263: ST_TO_ADDR
3264: GO 3288
// begin dolgov = 0 ;
3266: LD_ADDR_EXP 114
3270: PUSH
3271: LD_INT 0
3273: ST_TO_ADDR
// na2 = na2 + 1 ;
3274: LD_ADDR_VAR 0 6
3278: PUSH
3279: LD_VAR 0 6
3283: PUSH
3284: LD_INT 1
3286: PLUS
3287: ST_TO_ADDR
// end else
3288: GO 3297
// msg ( neny Dolgov ) ;
3290: LD_STRING neny Dolgov
3292: PPUSH
3293: CALL_OW 100
// if testcharacters ( Kovalyuk ) then
3297: LD_STRING Kovalyuk
3299: PPUSH
3300: CALL_OW 28
3304: IFFALSE 3357
// if checkcharacterset ( Kovalyuk ) then
3306: LD_STRING Kovalyuk
3308: PPUSH
3309: CALL_OW 29
3313: IFFALSE 3333
// kovalyuk = createcharacterwithclass ( Kovalyuk , class_soldier ) else
3315: LD_ADDR_EXP 115
3319: PUSH
3320: LD_STRING Kovalyuk
3322: PPUSH
3323: LD_INT 1
3325: PPUSH
3326: CALL_OW 35
3330: ST_TO_ADDR
3331: GO 3355
// begin kovalyuk = 0 ;
3333: LD_ADDR_EXP 115
3337: PUSH
3338: LD_INT 0
3340: ST_TO_ADDR
// na2 = na2 + 1 ;
3341: LD_ADDR_VAR 0 6
3345: PUSH
3346: LD_VAR 0 6
3350: PUSH
3351: LD_INT 1
3353: PLUS
3354: ST_TO_ADDR
// end else
3355: GO 3364
// msg ( neny Kovalyuk ) ;
3357: LD_STRING neny Kovalyuk
3359: PPUSH
3360: CALL_OW 100
// if testcharacters ( Karamazov ) then
3364: LD_STRING Karamazov
3366: PPUSH
3367: CALL_OW 28
3371: IFFALSE 3424
// if checkcharacterset ( Karamazov ) then
3373: LD_STRING Karamazov
3375: PPUSH
3376: CALL_OW 29
3380: IFFALSE 3400
// karamazov = createcharacterwithclass ( Karamazov , class_soldier ) else
3382: LD_ADDR_EXP 116
3386: PUSH
3387: LD_STRING Karamazov
3389: PPUSH
3390: LD_INT 1
3392: PPUSH
3393: CALL_OW 35
3397: ST_TO_ADDR
3398: GO 3422
// begin karamazov = 0 ;
3400: LD_ADDR_EXP 116
3404: PUSH
3405: LD_INT 0
3407: ST_TO_ADDR
// na2 = na2 + 1 ;
3408: LD_ADDR_VAR 0 6
3412: PUSH
3413: LD_VAR 0 6
3417: PUSH
3418: LD_INT 1
3420: PLUS
3421: ST_TO_ADDR
// end else
3422: GO 3431
// msg ( neny Karamazov ) ;
3424: LD_STRING neny Karamazov
3426: PPUSH
3427: CALL_OW 100
// if testcharacters ( Petrovova ) then
3431: LD_STRING Petrovova
3433: PPUSH
3434: CALL_OW 28
3438: IFFALSE 3491
// if checkcharacterset ( Petrovova ) then
3440: LD_STRING Petrovova
3442: PPUSH
3443: CALL_OW 29
3447: IFFALSE 3467
// petrovova = createcharacterwithclass ( Petrovova , class_soldier ) else
3449: LD_ADDR_EXP 117
3453: PUSH
3454: LD_STRING Petrovova
3456: PPUSH
3457: LD_INT 1
3459: PPUSH
3460: CALL_OW 35
3464: ST_TO_ADDR
3465: GO 3489
// begin petrovova = 0 ;
3467: LD_ADDR_EXP 117
3471: PUSH
3472: LD_INT 0
3474: ST_TO_ADDR
// na2 = na2 + 1 ;
3475: LD_ADDR_VAR 0 6
3479: PUSH
3480: LD_VAR 0 6
3484: PUSH
3485: LD_INT 1
3487: PLUS
3488: ST_TO_ADDR
// end else
3489: GO 3498
// msg ( neny Petrovova ) ;
3491: LD_STRING neny Petrovova
3493: PPUSH
3494: CALL_OW 100
// if testcharacters ( Oblukov ) then
3498: LD_STRING Oblukov
3500: PPUSH
3501: CALL_OW 28
3505: IFFALSE 3558
// if checkcharacterset ( Oblukov ) then
3507: LD_STRING Oblukov
3509: PPUSH
3510: CALL_OW 29
3514: IFFALSE 3534
// oblukov = createcharacterwithclass ( Oblukov , class_soldier ) else
3516: LD_ADDR_EXP 118
3520: PUSH
3521: LD_STRING Oblukov
3523: PPUSH
3524: LD_INT 1
3526: PPUSH
3527: CALL_OW 35
3531: ST_TO_ADDR
3532: GO 3556
// begin oblukov = 0 ;
3534: LD_ADDR_EXP 118
3538: PUSH
3539: LD_INT 0
3541: ST_TO_ADDR
// na2 = na2 + 1 ;
3542: LD_ADDR_VAR 0 6
3546: PUSH
3547: LD_VAR 0 6
3551: PUSH
3552: LD_INT 1
3554: PLUS
3555: ST_TO_ADDR
// end else
3556: GO 3565
// msg ( neny Oblukov ) ;
3558: LD_STRING neny Oblukov
3560: PPUSH
3561: CALL_OW 100
// uc_side := ru ;
3565: LD_ADDR_OWVAR 20
3569: PUSH
3570: LD_EXP 1
3574: ST_TO_ADDR
// if testcharacters ( survivors3 ) then
3575: LD_STRING survivors3
3577: PPUSH
3578: CALL_OW 28
3582: IFFALSE 3610
// if checkcharacterset ( survivors3 ) then
3584: LD_STRING survivors3
3586: PPUSH
3587: CALL_OW 29
3591: IFFALSE 3608
// surv3 = createcharacterset ( survivors3 ) else
3593: LD_ADDR_VAR 0 7
3597: PUSH
3598: LD_STRING survivors3
3600: PPUSH
3601: CALL_OW 31
3605: ST_TO_ADDR
3606: GO 3608
// else
3608: GO 3617
// msg ( neny survivors3 ) ;
3610: LD_STRING neny survivors3
3612: PPUSH
3613: CALL_OW 100
// uc_nation = nation_russian ;
3617: LD_ADDR_OWVAR 21
3621: PUSH
3622: LD_INT 3
3624: ST_TO_ADDR
// if not testvariable ( Masha ) then
3625: LD_STRING Masha
3627: PPUSH
3628: CALL_OW 27
3632: NOT
3633: IFFALSE 3642
// msg ( neny Masha ) ;
3635: LD_STRING neny Masha
3637: PPUSH
3638: CALL_OW 100
// veh = loadvariable ( Masha , [ ] ) ;
3642: LD_ADDR_VAR 0 8
3646: PUSH
3647: LD_STRING Masha
3649: PPUSH
3650: EMPTY
3651: PPUSH
3652: CALL_OW 30
3656: ST_TO_ADDR
// if veh then
3657: LD_VAR 0 8
3661: IFFALSE 3743
// begin vc_chassis = veh [ 1 ] ;
3663: LD_ADDR_OWVAR 37
3667: PUSH
3668: LD_VAR 0 8
3672: PUSH
3673: LD_INT 1
3675: ARRAY
3676: ST_TO_ADDR
// vc_engine = veh [ 2 ] ;
3677: LD_ADDR_OWVAR 39
3681: PUSH
3682: LD_VAR 0 8
3686: PUSH
3687: LD_INT 2
3689: ARRAY
3690: ST_TO_ADDR
// vc_control = veh [ 3 ] ;
3691: LD_ADDR_OWVAR 38
3695: PUSH
3696: LD_VAR 0 8
3700: PUSH
3701: LD_INT 3
3703: ARRAY
3704: ST_TO_ADDR
// vc_weapon = veh [ 4 ] ;
3705: LD_ADDR_OWVAR 40
3709: PUSH
3710: LD_VAR 0 8
3714: PUSH
3715: LD_INT 4
3717: ARRAY
3718: ST_TO_ADDR
// masha = createvehicle ;
3719: LD_ADDR_EXP 122
3723: PUSH
3724: CALL_OW 45
3728: ST_TO_ADDR
// setmark ( masha , 1 ) ;
3729: LD_EXP 122
3733: PPUSH
3734: LD_INT 1
3736: PPUSH
3737: CALL_OW 242
// end else
3741: GO 3751
// masha = 0 ;
3743: LD_ADDR_EXP 122
3747: PUSH
3748: LD_INT 0
3750: ST_TO_ADDR
// uc_side = ru2 ;
3751: LD_ADDR_OWVAR 20
3755: PUSH
3756: LD_EXP 2
3760: ST_TO_ADDR
// ostatni = [ ] ;
3761: LD_ADDR_LOC 5
3765: PUSH
3766: EMPTY
3767: ST_TO_ADDR
// tmp2 = na + na2 ;
3768: LD_ADDR_VAR 0 3
3772: PUSH
3773: LD_VAR 0 5
3777: PUSH
3778: LD_VAR 0 6
3782: PLUS
3783: ST_TO_ADDR
// for tmp = 1 to tmp2 do
3784: LD_ADDR_VAR 0 2
3788: PUSH
3789: DOUBLE
3790: LD_INT 1
3792: DEC
3793: ST_TO_ADDR
3794: LD_VAR 0 3
3798: PUSH
3799: FOR_TO
3800: IFFALSE 3852
// begin preparehuman ( rand ( 1 , 2 ) , rand ( 1 , 4 ) , 7 ) ;
3802: LD_INT 1
3804: PPUSH
3805: LD_INT 2
3807: PPUSH
3808: CALL_OW 12
3812: PPUSH
3813: LD_INT 1
3815: PPUSH
3816: LD_INT 4
3818: PPUSH
3819: CALL_OW 12
3823: PPUSH
3824: LD_INT 7
3826: PPUSH
3827: CALL_OW 380
// ostatni = ostatni ^ [ createhuman ] ;
3831: LD_ADDR_LOC 5
3835: PUSH
3836: LD_LOC 5
3840: PUSH
3841: CALL_OW 44
3845: PUSH
3846: EMPTY
3847: LIST
3848: ADD
3849: ST_TO_ADDR
// end ;
3850: GO 3799
3852: POP
3853: POP
// obeti = [ vsevol , popov , gaydar , yashin ] ;
3854: LD_ADDR_LOC 2
3858: PUSH
3859: LD_EXP 100
3863: PUSH
3864: LD_EXP 101
3868: PUSH
3869: LD_EXP 102
3873: PUSH
3874: LD_EXP 103
3878: PUSH
3879: EMPTY
3880: LIST
3881: LIST
3882: LIST
3883: LIST
3884: ST_TO_ADDR
// survivors = [ belkov , petrovova , titov , oblukov , kuzmov , gnyevko , kozlov ] diff [ 0 ] ;
3885: LD_ADDR_LOC 4
3889: PUSH
3890: LD_EXP 105
3894: PUSH
3895: LD_EXP 117
3899: PUSH
3900: LD_EXP 104
3904: PUSH
3905: LD_EXP 118
3909: PUSH
3910: LD_EXP 106
3914: PUSH
3915: LD_EXP 107
3919: PUSH
3920: LD_EXP 108
3924: PUSH
3925: EMPTY
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: PUSH
3934: LD_INT 0
3936: PUSH
3937: EMPTY
3938: LIST
3939: DIFF
3940: ST_TO_ADDR
// obeti2 = [ dolgov , kovalyuk , karamazov ] diff [ 0 ] ;
3941: LD_ADDR_LOC 3
3945: PUSH
3946: LD_EXP 114
3950: PUSH
3951: LD_EXP 115
3955: PUSH
3956: LD_EXP 116
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: LIST
3965: PUSH
3966: LD_INT 0
3968: PUSH
3969: EMPTY
3970: LIST
3971: DIFF
3972: ST_TO_ADDR
// nedoboje = [ kiril , kapitsova , petrosyan , scholtze , furmanov ] diff [ 0 ] ;
3973: LD_ADDR_LOC 6
3977: PUSH
3978: LD_EXP 110
3982: PUSH
3983: LD_EXP 111
3987: PUSH
3988: LD_EXP 112
3992: PUSH
3993: LD_EXP 113
3997: PUSH
3998: LD_EXP 109
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: PUSH
4010: LD_INT 0
4012: PUSH
4013: EMPTY
4014: LIST
4015: DIFF
4016: ST_TO_ADDR
// tmp2 = 7 - survivors ;
4017: LD_ADDR_VAR 0 3
4021: PUSH
4022: LD_INT 7
4024: PUSH
4025: LD_LOC 4
4029: MINUS
4030: ST_TO_ADDR
// for tmp = 1 to tmp2 do
4031: LD_ADDR_VAR 0 2
4035: PUSH
4036: DOUBLE
4037: LD_INT 1
4039: DEC
4040: ST_TO_ADDR
4041: LD_VAR 0 3
4045: PUSH
4046: FOR_TO
4047: IFFALSE 4166
// if surv3 then
4049: LD_VAR 0 7
4053: IFFALSE 4121
// begin survivors = survivors ^ [ surv3 [ 1 ] ] ;
4055: LD_ADDR_LOC 4
4059: PUSH
4060: LD_LOC 4
4064: PUSH
4065: LD_VAR 0 7
4069: PUSH
4070: LD_INT 1
4072: ARRAY
4073: PUSH
4074: EMPTY
4075: LIST
4076: ADD
4077: ST_TO_ADDR
// setside ( [ surv3 [ 1 ] ] , ru2 ) ;
4078: LD_VAR 0 7
4082: PUSH
4083: LD_INT 1
4085: ARRAY
4086: PUSH
4087: EMPTY
4088: LIST
4089: PPUSH
4090: LD_EXP 2
4094: PPUSH
4095: CALL_OW 235
// surv3 = surv3 diff surv3 [ 1 ] ;
4099: LD_ADDR_VAR 0 7
4103: PUSH
4104: LD_VAR 0 7
4108: PUSH
4109: LD_VAR 0 7
4113: PUSH
4114: LD_INT 1
4116: ARRAY
4117: DIFF
4118: ST_TO_ADDR
// end else
4119: GO 4164
// begin survivors = survivors ^ [ ostatni [ 1 ] ] ;
4121: LD_ADDR_LOC 4
4125: PUSH
4126: LD_LOC 4
4130: PUSH
4131: LD_LOC 5
4135: PUSH
4136: LD_INT 1
4138: ARRAY
4139: PUSH
4140: EMPTY
4141: LIST
4142: ADD
4143: ST_TO_ADDR
// ostatni = ostatni diff ostatni [ 1 ] ;
4144: LD_ADDR_LOC 5
4148: PUSH
4149: LD_LOC 5
4153: PUSH
4154: LD_LOC 5
4158: PUSH
4159: LD_INT 1
4161: ARRAY
4162: DIFF
4163: ST_TO_ADDR
// end ;
4164: GO 4046
4166: POP
4167: POP
// tmp2 = 3 - obeti2 ;
4168: LD_ADDR_VAR 0 3
4172: PUSH
4173: LD_INT 3
4175: PUSH
4176: LD_LOC 3
4180: MINUS
4181: ST_TO_ADDR
// for tmp = 1 to tmp2 do
4182: LD_ADDR_VAR 0 2
4186: PUSH
4187: DOUBLE
4188: LD_INT 1
4190: DEC
4191: ST_TO_ADDR
4192: LD_VAR 0 3
4196: PUSH
4197: FOR_TO
4198: IFFALSE 4245
// begin obeti2 = obeti2 ^ [ ostatni [ 1 ] ] ;
4200: LD_ADDR_LOC 3
4204: PUSH
4205: LD_LOC 3
4209: PUSH
4210: LD_LOC 5
4214: PUSH
4215: LD_INT 1
4217: ARRAY
4218: PUSH
4219: EMPTY
4220: LIST
4221: ADD
4222: ST_TO_ADDR
// ostatni = ostatni diff ostatni [ 1 ] ;
4223: LD_ADDR_LOC 5
4227: PUSH
4228: LD_LOC 5
4232: PUSH
4233: LD_LOC 5
4237: PUSH
4238: LD_INT 1
4240: ARRAY
4241: DIFF
4242: ST_TO_ADDR
// end ;
4243: GO 4197
4245: POP
4246: POP
// tmp2 = 5 - nedoboje ;
4247: LD_ADDR_VAR 0 3
4251: PUSH
4252: LD_INT 5
4254: PUSH
4255: LD_LOC 6
4259: MINUS
4260: ST_TO_ADDR
// for tmp = 1 to tmp2 do
4261: LD_ADDR_VAR 0 2
4265: PUSH
4266: DOUBLE
4267: LD_INT 1
4269: DEC
4270: ST_TO_ADDR
4271: LD_VAR 0 3
4275: PUSH
4276: FOR_TO
4277: IFFALSE 4396
// if surv3 then
4279: LD_VAR 0 7
4283: IFFALSE 4330
// begin nedoboje = nedoboje ^ [ surv3 [ 1 ] ] ;
4285: LD_ADDR_LOC 6
4289: PUSH
4290: LD_LOC 6
4294: PUSH
4295: LD_VAR 0 7
4299: PUSH
4300: LD_INT 1
4302: ARRAY
4303: PUSH
4304: EMPTY
4305: LIST
4306: ADD
4307: ST_TO_ADDR
// surv3 = surv3 diff surv3 [ 1 ] ;
4308: LD_ADDR_VAR 0 7
4312: PUSH
4313: LD_VAR 0 7
4317: PUSH
4318: LD_VAR 0 7
4322: PUSH
4323: LD_INT 1
4325: ARRAY
4326: DIFF
4327: ST_TO_ADDR
// end else
4328: GO 4394
// begin nedoboje = nedoboje ^ [ ostatni [ 1 ] ] ;
4330: LD_ADDR_LOC 6
4334: PUSH
4335: LD_LOC 6
4339: PUSH
4340: LD_LOC 5
4344: PUSH
4345: LD_INT 1
4347: ARRAY
4348: PUSH
4349: EMPTY
4350: LIST
4351: ADD
4352: ST_TO_ADDR
// setside ( [ ostatni [ 1 ] ] , ru ) ;
4353: LD_LOC 5
4357: PUSH
4358: LD_INT 1
4360: ARRAY
4361: PUSH
4362: EMPTY
4363: LIST
4364: PPUSH
4365: LD_EXP 1
4369: PPUSH
4370: CALL_OW 235
// ostatni = ostatni diff ostatni [ 1 ] ;
4374: LD_ADDR_LOC 5
4378: PUSH
4379: LD_LOC 5
4383: PUSH
4384: LD_LOC 5
4388: PUSH
4389: LD_INT 1
4391: ARRAY
4392: DIFF
4393: ST_TO_ADDR
// end ;
4394: GO 4276
4396: POP
4397: POP
// tmp3 = obeti ^ obeti2 ^ survivors ;
4398: LD_ADDR_VAR 0 4
4402: PUSH
4403: LD_LOC 2
4407: PUSH
4408: LD_LOC 3
4412: ADD
4413: PUSH
4414: LD_LOC 4
4418: ADD
4419: ST_TO_ADDR
// vehikly = [ ] ;
4420: LD_ADDR_LOC 11
4424: PUSH
4425: EMPTY
4426: ST_TO_ADDR
// vc_control = control_manual ;
4427: LD_ADDR_OWVAR 38
4431: PUSH
4432: LD_INT 1
4434: ST_TO_ADDR
// vc_engine = engine_siberite ;
4435: LD_ADDR_OWVAR 39
4439: PUSH
4440: LD_INT 3
4442: ST_TO_ADDR
// uc_side = ru ;
4443: LD_ADDR_OWVAR 20
4447: PUSH
4448: LD_EXP 1
4452: ST_TO_ADDR
// vc_weapon = ru_cargo_bay ;
4453: LD_ADDR_OWVAR 40
4457: PUSH
4458: LD_INT 51
4460: ST_TO_ADDR
// vc_chassis = ru_medium_wheeled ;
4461: LD_ADDR_OWVAR 37
4465: PUSH
4466: LD_INT 21
4468: ST_TO_ADDR
// for tmp = 1 to 3 do
4469: LD_ADDR_VAR 0 2
4473: PUSH
4474: DOUBLE
4475: LD_INT 1
4477: DEC
4478: ST_TO_ADDR
4479: LD_INT 3
4481: PUSH
4482: FOR_TO
4483: IFFALSE 4595
// begin tmp2 = createvehicle ;
4485: LD_ADDR_VAR 0 3
4489: PUSH
4490: CALL_OW 45
4494: ST_TO_ADDR
// if tmp = 1 then
4495: LD_VAR 0 2
4499: PUSH
4500: LD_INT 1
4502: EQUAL
4503: IFFALSE 4537
// begin setcargo ( tmp2 , mat_oil , 90 ) ;
4505: LD_VAR 0 3
4509: PPUSH
4510: LD_INT 2
4512: PPUSH
4513: LD_INT 90
4515: PPUSH
4516: CALL_OW 290
// addcargo ( tmp2 , mat_cans , 10 ) ;
4520: LD_VAR 0 3
4524: PPUSH
4525: LD_INT 1
4527: PPUSH
4528: LD_INT 10
4530: PPUSH
4531: CALL_OW 291
// end else
4535: GO 4552
// setcargo ( tmp2 , mat_cans , 100 ) ;
4537: LD_VAR 0 3
4541: PPUSH
4542: LD_INT 1
4544: PPUSH
4545: LD_INT 100
4547: PPUSH
4548: CALL_OW 290
// placehumaninunit ( nedoboje [ tmp ] , tmp2 ) ;
4552: LD_LOC 6
4556: PUSH
4557: LD_VAR 0 2
4561: ARRAY
4562: PPUSH
4563: LD_VAR 0 3
4567: PPUSH
4568: CALL_OW 52
// placeunitxyr ( tmp2 , 105 , 115 , 15 , false ) ;
4572: LD_VAR 0 3
4576: PPUSH
4577: LD_INT 105
4579: PPUSH
4580: LD_INT 115
4582: PPUSH
4583: LD_INT 15
4585: PPUSH
4586: LD_INT 0
4588: PPUSH
4589: CALL_OW 50
// end ;
4593: GO 4482
4595: POP
4596: POP
// placeunitxyr ( nedoboje [ 4 ] , 105 , 115 , 15 , false ) ;
4597: LD_LOC 6
4601: PUSH
4602: LD_INT 4
4604: ARRAY
4605: PPUSH
4606: LD_INT 105
4608: PPUSH
4609: LD_INT 115
4611: PPUSH
4612: LD_INT 15
4614: PPUSH
4615: LD_INT 0
4617: PPUSH
4618: CALL_OW 50
// placeunitxyr ( nedoboje [ 5 ] , 105 , 115 , 15 , false ) ;
4622: LD_LOC 6
4626: PUSH
4627: LD_INT 5
4629: ARRAY
4630: PPUSH
4631: LD_INT 105
4633: PPUSH
4634: LD_INT 115
4636: PPUSH
4637: LD_INT 15
4639: PPUSH
4640: LD_INT 0
4642: PPUSH
4643: CALL_OW 50
// if masha then
4647: LD_EXP 122
4651: IFFALSE 4690
// begin placehumaninunit ( burlak , masha ) ;
4653: LD_EXP 119
4657: PPUSH
4658: LD_EXP 122
4662: PPUSH
4663: CALL_OW 52
// placeunitxyr ( masha , 105 , 115 , 15 , false ) ;
4667: LD_EXP 122
4671: PPUSH
4672: LD_INT 105
4674: PPUSH
4675: LD_INT 115
4677: PPUSH
4678: LD_INT 15
4680: PPUSH
4681: LD_INT 0
4683: PPUSH
4684: CALL_OW 50
// end else
4688: GO 4711
// placeunitxyr ( burlak , 105 , 115 , 15 , false ) ;
4690: LD_EXP 119
4694: PPUSH
4695: LD_INT 105
4697: PPUSH
4698: LD_INT 115
4700: PPUSH
4701: LD_INT 15
4703: PPUSH
4704: LD_INT 0
4706: PPUSH
4707: CALL_OW 50
// uc_side = ru2 ;
4711: LD_ADDR_OWVAR 20
4715: PUSH
4716: LD_EXP 2
4720: ST_TO_ADDR
// tmp2 = [ [ ru_medium_tracked , ru_gatling_gun ] , [ ru_medium_tracked , ru_gatling_gun ] , [ ru_medium_tracked , ru_gatling_gun ] , [ ru_medium_tracked , ru_rocket_launcher ] , [ ru_medium_tracked , ru_rocket_launcher ] , [ ru_medium_tracked , ru_rocket_launcher ] , [ ru_medium_tracked , ru_gun ] , [ ru_medium_tracked , ru_gun ] , [ ru_medium_tracked , ru_gun ] , [ ru_medium_tracked , ru_gun ] , [ ru_medium_tracked , ru_rocket_launcher ] , [ ru_heavy_tracked , ru_heavy_gun ] , [ ru_heavy_tracked , ru_heavy_gun ] , [ ru_heavy_tracked , ru_heavy_gun ] ] ;
4721: LD_ADDR_VAR 0 3
4725: PUSH
4726: LD_INT 22
4728: PUSH
4729: LD_INT 43
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: PUSH
4736: LD_INT 22
4738: PUSH
4739: LD_INT 43
4741: PUSH
4742: EMPTY
4743: LIST
4744: LIST
4745: PUSH
4746: LD_INT 22
4748: PUSH
4749: LD_INT 43
4751: PUSH
4752: EMPTY
4753: LIST
4754: LIST
4755: PUSH
4756: LD_INT 22
4758: PUSH
4759: LD_INT 45
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: PUSH
4766: LD_INT 22
4768: PUSH
4769: LD_INT 45
4771: PUSH
4772: EMPTY
4773: LIST
4774: LIST
4775: PUSH
4776: LD_INT 22
4778: PUSH
4779: LD_INT 45
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: PUSH
4786: LD_INT 22
4788: PUSH
4789: LD_INT 44
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: LD_INT 22
4798: PUSH
4799: LD_INT 44
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PUSH
4806: LD_INT 22
4808: PUSH
4809: LD_INT 44
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 22
4818: PUSH
4819: LD_INT 44
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: LD_INT 22
4828: PUSH
4829: LD_INT 45
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 24
4838: PUSH
4839: LD_INT 46
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: LD_INT 24
4848: PUSH
4849: LD_INT 46
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: PUSH
4856: LD_INT 24
4858: PUSH
4859: LD_INT 46
4861: PUSH
4862: EMPTY
4863: LIST
4864: LIST
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: ST_TO_ADDR
// for tmp = 1 to 14 do
4882: LD_ADDR_VAR 0 2
4886: PUSH
4887: DOUBLE
4888: LD_INT 1
4890: DEC
4891: ST_TO_ADDR
4892: LD_INT 14
4894: PUSH
4895: FOR_TO
4896: IFFALSE 5012
// begin vc_weapon = tmp2 [ tmp ] [ 2 ] ;
4898: LD_ADDR_OWVAR 40
4902: PUSH
4903: LD_VAR 0 3
4907: PUSH
4908: LD_VAR 0 2
4912: ARRAY
4913: PUSH
4914: LD_INT 2
4916: ARRAY
4917: ST_TO_ADDR
// vc_chassis = tmp2 [ tmp ] [ 1 ] ;
4918: LD_ADDR_OWVAR 37
4922: PUSH
4923: LD_VAR 0 3
4927: PUSH
4928: LD_VAR 0 2
4932: ARRAY
4933: PUSH
4934: LD_INT 1
4936: ARRAY
4937: ST_TO_ADDR
// vehikly = vehikly ^ [ createvehicle ] ;
4938: LD_ADDR_LOC 11
4942: PUSH
4943: LD_LOC 11
4947: PUSH
4948: CALL_OW 45
4952: PUSH
4953: EMPTY
4954: LIST
4955: ADD
4956: ST_TO_ADDR
// placehumaninunit ( tmp3 [ tmp ] , vehikly [ tmp ] ) ;
4957: LD_VAR 0 4
4961: PUSH
4962: LD_VAR 0 2
4966: ARRAY
4967: PPUSH
4968: LD_LOC 11
4972: PUSH
4973: LD_VAR 0 2
4977: ARRAY
4978: PPUSH
4979: CALL_OW 52
// placeunitxyr ( vehikly [ tmp ] , 105 , 115 , 15 , false ) ;
4983: LD_LOC 11
4987: PUSH
4988: LD_VAR 0 2
4992: ARRAY
4993: PPUSH
4994: LD_INT 105
4996: PPUSH
4997: LD_INT 115
4999: PPUSH
5000: LD_INT 15
5002: PPUSH
5003: LD_INT 0
5005: PPUSH
5006: CALL_OW 50
// end ;
5010: GO 4895
5012: POP
5013: POP
// vehiklyo = vehikly [ 1 ] ^ vehikly [ 2 ] ^ vehikly [ 3 ] ^ vehikly [ 4 ] ^ vehikly [ 5 ] ^ vehikly [ 6 ] ^ vehikly [ 7 ] ;
5014: LD_ADDR_LOC 12
5018: PUSH
5019: LD_LOC 11
5023: PUSH
5024: LD_INT 1
5026: ARRAY
5027: PUSH
5028: LD_LOC 11
5032: PUSH
5033: LD_INT 2
5035: ARRAY
5036: ADD
5037: PUSH
5038: LD_LOC 11
5042: PUSH
5043: LD_INT 3
5045: ARRAY
5046: ADD
5047: PUSH
5048: LD_LOC 11
5052: PUSH
5053: LD_INT 4
5055: ARRAY
5056: ADD
5057: PUSH
5058: LD_LOC 11
5062: PUSH
5063: LD_INT 5
5065: ARRAY
5066: ADD
5067: PUSH
5068: LD_LOC 11
5072: PUSH
5073: LD_INT 6
5075: ARRAY
5076: ADD
5077: PUSH
5078: LD_LOC 11
5082: PUSH
5083: LD_INT 7
5085: ARRAY
5086: ADD
5087: ST_TO_ADDR
// vehiklys = vehikly [ 8 ] ^ vehikly [ 9 ] ^ vehikly [ 10 ] ^ vehikly [ 11 ] ^ vehikly [ 12 ] ^ vehikly [ 13 ] ^ vehikly [ 14 ] ;
5088: LD_ADDR_LOC 13
5092: PUSH
5093: LD_LOC 11
5097: PUSH
5098: LD_INT 8
5100: ARRAY
5101: PUSH
5102: LD_LOC 11
5106: PUSH
5107: LD_INT 9
5109: ARRAY
5110: ADD
5111: PUSH
5112: LD_LOC 11
5116: PUSH
5117: LD_INT 10
5119: ARRAY
5120: ADD
5121: PUSH
5122: LD_LOC 11
5126: PUSH
5127: LD_INT 11
5129: ARRAY
5130: ADD
5131: PUSH
5132: LD_LOC 11
5136: PUSH
5137: LD_INT 12
5139: ARRAY
5140: ADD
5141: PUSH
5142: LD_LOC 11
5146: PUSH
5147: LD_INT 13
5149: ARRAY
5150: ADD
5151: PUSH
5152: LD_LOC 11
5156: PUSH
5157: LD_INT 14
5159: ARRAY
5160: ADD
5161: ST_TO_ADDR
// tmp = game_speed ;
5162: LD_ADDR_VAR 0 2
5166: PUSH
5167: LD_OWVAR 65
5171: ST_TO_ADDR
// game_speed = 2 ;
5172: LD_ADDR_OWVAR 65
5176: PUSH
5177: LD_INT 2
5179: ST_TO_ADDR
// commovexy ( vehikly , 95 , 98 ) ;
5180: LD_LOC 11
5184: PPUSH
5185: LD_INT 95
5187: PPUSH
5188: LD_INT 98
5190: PPUSH
5191: CALL_OW 111
// ingameon ;
5195: CALL_OW 8
// wait ( 0 0$7 ) ;
5199: LD_INT 245
5201: PPUSH
5202: CALL_OW 67
// while not myisinarea ( vehikly , arrival , 95 , 98 ) do
5206: LD_LOC 11
5210: PPUSH
5211: LD_INT 4
5213: PPUSH
5214: LD_INT 95
5216: PPUSH
5217: LD_INT 98
5219: PPUSH
5220: CALL 2071 0 4
5224: NOT
5225: IFFALSE 5236
// wait ( 0 0$1 ) ;
5227: LD_INT 35
5229: PPUSH
5230: CALL_OW 67
5234: GO 5206
// vsevol_v = isinunit ( vsevol ) ;
5236: LD_ADDR_LOC 7
5240: PUSH
5241: LD_EXP 100
5245: PPUSH
5246: CALL_OW 310
5250: ST_TO_ADDR
// popov_v = isinunit ( popov ) ;
5251: LD_ADDR_LOC 8
5255: PUSH
5256: LD_EXP 101
5260: PPUSH
5261: CALL_OW 310
5265: ST_TO_ADDR
// gaydar_v = isinunit ( gaydar ) ;
5266: LD_ADDR_LOC 9
5270: PUSH
5271: LD_EXP 102
5275: PPUSH
5276: CALL_OW 310
5280: ST_TO_ADDR
// yashin_v = isinunit ( yashin ) ;
5281: LD_ADDR_LOC 10
5285: PUSH
5286: LD_EXP 103
5290: PPUSH
5291: CALL_OW 310
5295: ST_TO_ADDR
// comexitvehicle ( [ yashin , popov , gaydar , vsevol ] ) ;
5296: LD_EXP 103
5300: PUSH
5301: LD_EXP 101
5305: PUSH
5306: LD_EXP 102
5310: PUSH
5311: LD_EXP 100
5315: PUSH
5316: EMPTY
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: PPUSH
5322: CALL_OW 121
// wait ( 0 0$0.5 ) ;
5326: LD_INT 18
5328: PPUSH
5329: CALL_OW 67
// game_speed = tmp ;
5333: LD_ADDR_OWVAR 65
5337: PUSH
5338: LD_VAR 0 2
5342: ST_TO_ADDR
// centernowonunits ( [ burlak , yashin ] ) ;
5343: LD_EXP 119
5347: PUSH
5348: LD_EXP 103
5352: PUSH
5353: EMPTY
5354: LIST
5355: LIST
5356: PPUSH
5357: CALL_OW 87
// comstop ( vehikly ) ;
5361: LD_LOC 11
5365: PPUSH
5366: CALL_OW 141
// say ( yashin , DBetaStart-Yas-1 ) ;
5370: LD_EXP 103
5374: PPUSH
5375: LD_STRING DBetaStart-Yas-1
5377: PPUSH
5378: CALL_OW 88
// if vs then
5382: LD_EXP 123
5386: IFFALSE 5402
// say ( yashin , DBetaStart-Yas-1a ) else
5388: LD_EXP 103
5392: PPUSH
5393: LD_STRING DBetaStart-Yas-1a
5395: PPUSH
5396: CALL_OW 88
5400: GO 5414
// say ( yashin , DBetaStart-Yas-1b ) ;
5402: LD_EXP 103
5406: PPUSH
5407: LD_STRING DBetaStart-Yas-1b
5409: PPUSH
5410: CALL_OW 88
// say ( yashin , DBetaStart-Yas-1c ) ;
5414: LD_EXP 103
5418: PPUSH
5419: LD_STRING DBetaStart-Yas-1c
5421: PPUSH
5422: CALL_OW 88
// sayeffect ( DBetaStart-All-1 ) ;
5426: LD_STRING DBetaStart-All-1
5428: PPUSH
5429: CALL_OW 96
// while not myisinarea ( [ vsevol , popov , gaydar ] , arrival , 95 , 98 ) do
5433: LD_EXP 100
5437: PUSH
5438: LD_EXP 101
5442: PUSH
5443: LD_EXP 102
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: LIST
5452: PPUSH
5453: LD_INT 4
5455: PPUSH
5456: LD_INT 95
5458: PPUSH
5459: LD_INT 98
5461: PPUSH
5462: CALL 2071 0 4
5466: NOT
5467: IFFALSE 5478
// wait ( 0 0$0.5 ) ;
5469: LD_INT 18
5471: PPUSH
5472: CALL_OW 67
5476: GO 5433
// comremember ( [ vsevol , popov , gaydar ] ) ;
5478: LD_EXP 100
5482: PUSH
5483: LD_EXP 101
5487: PUSH
5488: LD_EXP 102
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: LIST
5497: PPUSH
5498: CALL_OW 143
// commovexy ( vsevol , 135 , 90 ) ;
5502: LD_EXP 100
5506: PPUSH
5507: LD_INT 135
5509: PPUSH
5510: LD_INT 90
5512: PPUSH
5513: CALL_OW 111
// addcommovexy ( vsevol , 130 , 66 ) ;
5517: LD_EXP 100
5521: PPUSH
5522: LD_INT 130
5524: PPUSH
5525: LD_INT 66
5527: PPUSH
5528: CALL_OW 171
// addcommovexy ( vsevol , 124 , 65 ) ;
5532: LD_EXP 100
5536: PPUSH
5537: LD_INT 124
5539: PPUSH
5540: LD_INT 65
5542: PPUSH
5543: CALL_OW 171
// addcomwait ( vsevol , 0 0$0.5 ) ;
5547: LD_EXP 100
5551: PPUSH
5552: LD_INT 18
5554: PPUSH
5555: CALL_OW 202
// addcommovexy ( vsevol , 131 , 73 ) ;
5559: LD_EXP 100
5563: PPUSH
5564: LD_INT 131
5566: PPUSH
5567: LD_INT 73
5569: PPUSH
5570: CALL_OW 171
// addcomwait ( vsevol , 2 2$15 ) ;
5574: LD_EXP 100
5578: PPUSH
5579: LD_INT 4725
5581: PPUSH
5582: CALL_OW 202
// addcomreturn ( vsevol ) ;
5586: LD_EXP 100
5590: PPUSH
5591: CALL_OW 204
// commovexy ( popov , 66 , 88 ) ;
5595: LD_EXP 101
5599: PPUSH
5600: LD_INT 66
5602: PPUSH
5603: LD_INT 88
5605: PPUSH
5606: CALL_OW 111
// addcommovexy ( popov , 44 , 62 ) ;
5610: LD_EXP 101
5614: PPUSH
5615: LD_INT 44
5617: PPUSH
5618: LD_INT 62
5620: PPUSH
5621: CALL_OW 171
// addcommovexy ( popov , 45 , 68 ) ;
5625: LD_EXP 101
5629: PPUSH
5630: LD_INT 45
5632: PPUSH
5633: LD_INT 68
5635: PPUSH
5636: CALL_OW 171
// addcomwait ( popov , 3 3$15 ) ;
5640: LD_EXP 101
5644: PPUSH
5645: LD_INT 6825
5647: PPUSH
5648: CALL_OW 202
// addcomreturn ( popov ) ;
5652: LD_EXP 101
5656: PPUSH
5657: CALL_OW 204
// commovexy ( gaydar , 83 , 72 ) ;
5661: LD_EXP 102
5665: PPUSH
5666: LD_INT 83
5668: PPUSH
5669: LD_INT 72
5671: PPUSH
5672: CALL_OW 111
// addcomreturn ( gaydar ) ;
5676: LD_EXP 102
5680: PPUSH
5681: CALL_OW 204
// wait ( 0 0$7 ) ;
5685: LD_INT 245
5687: PPUSH
5688: CALL_OW 67
// comstop ( vehikly ) ;
5692: LD_LOC 11
5696: PPUSH
5697: CALL_OW 141
// say ( yashin , DBetaStart-Yas-2 ) ;
5701: LD_EXP 103
5705: PPUSH
5706: LD_STRING DBetaStart-Yas-2
5708: PPUSH
5709: CALL_OW 88
// say ( yashin , DBetaStart-Yas-2a ) ;
5713: LD_EXP 103
5717: PPUSH
5718: LD_STRING DBetaStart-Yas-2a
5720: PPUSH
5721: CALL_OW 88
// say ( burlak , DBetaStart-Bur-2 ) ;
5725: LD_EXP 119
5729: PPUSH
5730: LD_STRING DBetaStart-Bur-2
5732: PPUSH
5733: CALL_OW 88
// ingameoff ;
5737: CALL_OW 9
// comhold ( filterallunits ( [ [ f_side , ru2 ] , [ f_type , unit_vehicle ] ] ) ) ;
5741: LD_INT 22
5743: PUSH
5744: LD_EXP 2
5748: PUSH
5749: EMPTY
5750: LIST
5751: LIST
5752: PUSH
5753: LD_INT 21
5755: PUSH
5756: LD_INT 2
5758: PUSH
5759: EMPTY
5760: LIST
5761: LIST
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PPUSH
5767: CALL_OW 69
5771: PPUSH
5772: CALL_OW 140
// saveforquickrestart ;
5776: CALL_OW 22
// wait ( 11 ) ;
5780: LD_INT 11
5782: PPUSH
5783: CALL_OW 67
// changemissionobjectives ( MStart ) ;
5787: LD_STRING MStart
5789: PPUSH
5790: CALL_OW 337
// wait ( 0 0$17 ) ;
5794: LD_INT 595
5796: PPUSH
5797: CALL_OW 67
// enable ( 01 ) ;
5801: LD_INT 1
5803: ENABLE_MARKED
// end ;
5804: LD_VAR 0 1
5808: RET
// var basedone ; every 0 0$1 trigger isinarea ( vsevol , arrival ) and isinarea ( popov , arrival ) and isinarea ( gaydar , arrival ) marked 01 do
5809: LD_EXP 100
5813: PPUSH
5814: LD_INT 4
5816: PPUSH
5817: CALL_OW 308
5821: PUSH
5822: LD_EXP 101
5826: PPUSH
5827: LD_INT 4
5829: PPUSH
5830: CALL_OW 308
5834: AND
5835: PUSH
5836: LD_EXP 102
5840: PPUSH
5841: LD_INT 4
5843: PPUSH
5844: CALL_OW 308
5848: AND
5849: IFFALSE 6287
5851: GO 5853
5853: DISABLE
// begin centernowonunits ( [ yashin , popov , vsevol , gaydar ] ) ;
5854: LD_EXP 103
5858: PUSH
5859: LD_EXP 101
5863: PUSH
5864: LD_EXP 100
5868: PUSH
5869: LD_EXP 102
5873: PUSH
5874: EMPTY
5875: LIST
5876: LIST
5877: LIST
5878: LIST
5879: PPUSH
5880: CALL_OW 87
// dialogueon ;
5884: CALL_OW 6
// say ( yashin , DBetaAttack-Yas-1 ) ;
5888: LD_EXP 103
5892: PPUSH
5893: LD_STRING DBetaAttack-Yas-1
5895: PPUSH
5896: CALL_OW 88
// centernowonxy ( 123 , 64 ) ;
5900: LD_INT 123
5902: PPUSH
5903: LD_INT 64
5905: PPUSH
5906: CALL_OW 86
// say ( vsevol , DBetaAttack-Vse-1 ) ;
5910: LD_EXP 100
5914: PPUSH
5915: LD_STRING DBetaAttack-Vse-1
5917: PPUSH
5918: CALL_OW 88
// centernowonxy ( 48 , 62 ) ;
5922: LD_INT 48
5924: PPUSH
5925: LD_INT 62
5927: PPUSH
5928: CALL_OW 86
// say ( popov , DBetaAttack-Pop-1 ) ;
5932: LD_EXP 101
5936: PPUSH
5937: LD_STRING DBetaAttack-Pop-1
5939: PPUSH
5940: CALL_OW 88
// centernowonxy ( 83 , 72 ) ;
5944: LD_INT 83
5946: PPUSH
5947: LD_INT 72
5949: PPUSH
5950: CALL_OW 86
// say ( gaydar , DBetaAttack-Gay-1 ) ;
5954: LD_EXP 102
5958: PPUSH
5959: LD_STRING DBetaAttack-Gay-1
5961: PPUSH
5962: CALL_OW 88
// say ( yashin , DBetaAttack-Yas-2 ) ;
5966: LD_EXP 103
5970: PPUSH
5971: LD_STRING DBetaAttack-Yas-2
5973: PPUSH
5974: CALL_OW 88
// basedone = false ;
5978: LD_ADDR_LOC 14
5982: PUSH
5983: LD_INT 0
5985: ST_TO_ADDR
// if filterallunits ( [ [ f_side , ru ] , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) and filterallunits ( [ [ f_side , ru ] , [ f_btype , b_factory ] ] ) then
5986: LD_INT 22
5988: PUSH
5989: LD_EXP 1
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: PUSH
5998: LD_INT 2
6000: PUSH
6001: LD_INT 30
6003: PUSH
6004: LD_INT 26
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: LD_INT 30
6013: PUSH
6014: LD_INT 28
6016: PUSH
6017: EMPTY
6018: LIST
6019: LIST
6020: PUSH
6021: EMPTY
6022: LIST
6023: LIST
6024: LIST
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: PPUSH
6030: CALL_OW 69
6034: PUSH
6035: LD_INT 22
6037: PUSH
6038: LD_EXP 1
6042: PUSH
6043: EMPTY
6044: LIST
6045: LIST
6046: PUSH
6047: LD_INT 30
6049: PUSH
6050: LD_INT 3
6052: PUSH
6053: EMPTY
6054: LIST
6055: LIST
6056: PUSH
6057: EMPTY
6058: LIST
6059: LIST
6060: PPUSH
6061: CALL_OW 69
6065: AND
6066: IFFALSE 6124
// begin say ( burlak , DBetaAttack-Bur-2 ) ;
6068: LD_EXP 119
6072: PPUSH
6073: LD_STRING DBetaAttack-Bur-2
6075: PPUSH
6076: CALL_OW 88
// say ( yashin , DBetaAttack-Yas-3 ) ;
6080: LD_EXP 103
6084: PPUSH
6085: LD_STRING DBetaAttack-Yas-3
6087: PPUSH
6088: CALL_OW 88
// changemissionobjectives ( MStarta ) ;
6092: LD_STRING MStarta
6094: PPUSH
6095: CALL_OW 337
// changemissionobjectives ( MfastOut ) ;
6099: LD_STRING MfastOut
6101: PPUSH
6102: CALL_OW 337
// basedone = true ;
6106: LD_ADDR_LOC 14
6110: PUSH
6111: LD_INT 1
6113: ST_TO_ADDR
// rychlik = true ;
6114: LD_ADDR_EXP 98
6118: PUSH
6119: LD_INT 1
6121: ST_TO_ADDR
// end else
6122: GO 6155
// begin say ( burlak , DBetaAttack-Bur-3 ) ;
6124: LD_EXP 119
6128: PPUSH
6129: LD_STRING DBetaAttack-Bur-3
6131: PPUSH
6132: CALL_OW 88
// say ( yashin , DBetaAttack-Yas-4 ) ;
6136: LD_EXP 103
6140: PPUSH
6141: LD_STRING DBetaAttack-Yas-4
6143: PPUSH
6144: CALL_OW 88
// changemissionobjectives ( MFastDel ) ;
6148: LD_STRING MFastDel
6150: PPUSH
6151: CALL_OW 337
// end ; say ( burlak , DBetaAttack-Bur-4 ) ;
6155: LD_EXP 119
6159: PPUSH
6160: LD_STRING DBetaAttack-Bur-4
6162: PPUSH
6163: CALL_OW 88
// say ( yashin , DBetaAttack-Yas-5 ) ;
6167: LD_EXP 103
6171: PPUSH
6172: LD_STRING DBetaAttack-Yas-5
6174: PPUSH
6175: CALL_OW 88
// if filterallunits ( [ [ f_side , ru ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) then
6179: LD_INT 22
6181: PUSH
6182: LD_EXP 1
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PUSH
6191: LD_INT 2
6193: PUSH
6194: LD_INT 30
6196: PUSH
6197: LD_INT 6
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PUSH
6204: LD_INT 30
6206: PUSH
6207: LD_INT 7
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PUSH
6214: LD_INT 30
6216: PUSH
6217: LD_INT 8
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: LIST
6228: LIST
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PPUSH
6234: CALL_OW 69
6238: IFFALSE 6264
// begin say ( burlak , DBetaAttack-Bur-5 ) ;
6240: LD_EXP 119
6244: PPUSH
6245: LD_STRING DBetaAttack-Bur-5
6247: PPUSH
6248: CALL_OW 88
// say ( yashin , DBetaAttack-Yas-6 ) ;
6252: LD_EXP 103
6256: PPUSH
6257: LD_STRING DBetaAttack-Yas-6
6259: PPUSH
6260: CALL_OW 88
// end ; say ( burlak , DBetaAttack-Bur-6 ) ;
6264: LD_EXP 119
6268: PPUSH
6269: LD_STRING DBetaAttack-Bur-6
6271: PPUSH
6272: CALL_OW 88
// dialogueoff ;
6276: CALL_OW 7
// changemissionobjectives ( MBull ) ;
6280: LD_STRING MBull
6282: PPUSH
6283: CALL_OW 337
// end ;
6287: END
// var lesnik ; function jevlese ; begin
6288: LD_INT 0
6290: PPUSH
// lesnik = filterunitsinarea ( les , [ [ f_side , ru ] , [ f_ok ] ] ) ;
6291: LD_ADDR_LOC 15
6295: PUSH
6296: LD_INT 5
6298: PPUSH
6299: LD_INT 22
6301: PUSH
6302: LD_EXP 1
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PUSH
6311: LD_INT 50
6313: PUSH
6314: EMPTY
6315: LIST
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: PPUSH
6321: CALL_OW 70
6325: ST_TO_ADDR
// result = 0 + lesnik ;
6326: LD_ADDR_VAR 0 1
6330: PUSH
6331: LD_INT 0
6333: PUSH
6334: LD_LOC 15
6338: PLUS
6339: ST_TO_ADDR
// end ;
6340: LD_VAR 0 1
6344: RET
// export lastsay ; every 0 0$1.1 trigger jevlese marked 06 do
6345: CALL 6288 0 0
6349: IFFALSE 6413
6351: GO 6353
6353: DISABLE
// begin enable ;
6354: ENABLE
// commovetoarea ( lesnik , targetarea ) ;
6355: LD_LOC 15
6359: PPUSH
6360: LD_INT 9
6362: PPUSH
6363: CALL_OW 113
// if ( tick - lastsay ) > ( 0 0$7 ) then
6367: LD_OWVAR 1
6371: PUSH
6372: LD_EXP 124
6376: MINUS
6377: PUSH
6378: LD_INT 245
6380: GREATER
6381: IFFALSE 6413
// begin dialogueon ;
6383: CALL_OW 6
// say ( yashin , DSpoil-Yas-1 ) ;
6387: LD_EXP 103
6391: PPUSH
6392: LD_STRING DSpoil-Yas-1
6394: PPUSH
6395: CALL_OW 88
// dialogueoff ;
6399: CALL_OW 7
// lastsay = tick ;
6403: LD_ADDR_EXP 124
6407: PUSH
6408: LD_OWVAR 1
6412: ST_TO_ADDR
// end ; end ;
6413: END
// var buldoz1 , buldoz2 ; function buldozery ; var buldoz ; begin
6414: LD_INT 0
6416: PPUSH
6417: PPUSH
// buldoz = filterallunits ( [ [ f_side , ru ] , [ f_weapon , ru_bulldozer ] ] ) ;
6418: LD_ADDR_VAR 0 2
6422: PUSH
6423: LD_INT 22
6425: PUSH
6426: LD_EXP 1
6430: PUSH
6431: EMPTY
6432: LIST
6433: LIST
6434: PUSH
6435: LD_INT 34
6437: PUSH
6438: LD_INT 53
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: PPUSH
6449: CALL_OW 69
6453: ST_TO_ADDR
// result = 0 + buldoz ;
6454: LD_ADDR_VAR 0 1
6458: PUSH
6459: LD_INT 0
6461: PUSH
6462: LD_VAR 0 2
6466: PLUS
6467: ST_TO_ADDR
// if result > 1 then
6468: LD_VAR 0 1
6472: PUSH
6473: LD_INT 1
6475: GREATER
6476: IFFALSE 6506
// begin buldoz1 = buldoz [ 1 ] ;
6478: LD_ADDR_LOC 16
6482: PUSH
6483: LD_VAR 0 2
6487: PUSH
6488: LD_INT 1
6490: ARRAY
6491: ST_TO_ADDR
// buldoz2 = buldoz [ 2 ] ;
6492: LD_ADDR_LOC 17
6496: PUSH
6497: LD_VAR 0 2
6501: PUSH
6502: LD_INT 2
6504: ARRAY
6505: ST_TO_ADDR
// end ; end ;
6506: LD_VAR 0 1
6510: RET
// function jsou_zpatky ; var tmp ; begin
6511: LD_INT 0
6513: PPUSH
6514: PPUSH
// result = true ;
6515: LD_ADDR_VAR 0 1
6519: PUSH
6520: LD_INT 1
6522: ST_TO_ADDR
// for tmp in survivors do
6523: LD_ADDR_VAR 0 2
6527: PUSH
6528: LD_LOC 4
6532: PUSH
6533: FOR_IN
6534: IFFALSE 6577
// if not isinarea ( tmp , uketar ) and not isdead ( tmp ) then
6536: LD_VAR 0 2
6540: PPUSH
6541: LD_INT 7
6543: PPUSH
6544: CALL_OW 308
6548: NOT
6549: PUSH
6550: LD_VAR 0 2
6554: PPUSH
6555: CALL_OW 301
6559: NOT
6560: AND
6561: IFFALSE 6575
// begin result = false ;
6563: LD_ADDR_VAR 0 1
6567: PUSH
6568: LD_INT 0
6570: ST_TO_ADDR
// exit ;
6571: POP
6572: POP
6573: GO 6579
// end ;
6575: GO 6533
6577: POP
6578: POP
// end ;
6579: LD_VAR 0 1
6583: RET
// var nenicit , poskoz ; every 0 0$0.3 marked 10 do var tmp ;
6584: GO 6586
6586: DISABLE
6587: LD_INT 0
6589: PPUSH
// begin if nenicit then
6590: LD_LOC 18
6594: IFFALSE 6597
// enable ;
6596: ENABLE
// for tmp in [ ambunk2 , ambunk3 , ambunk4 , ambunk5 , ambunk6 ] do
6597: LD_ADDR_VAR 0 1
6601: PUSH
6602: LD_INT 15
6604: PUSH
6605: LD_INT 14
6607: PUSH
6608: LD_INT 6
6610: PUSH
6611: LD_INT 7
6613: PUSH
6614: LD_INT 13
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: PUSH
6624: FOR_IN
6625: IFFALSE 6739
// if getlives ( tmp ) <= 500 then
6627: LD_VAR 0 1
6631: PPUSH
6632: CALL_OW 256
6636: PUSH
6637: LD_INT 500
6639: LESSEQUAL
6640: IFFALSE 6677
// begin donotattack ( ru2 , tmp ) ;
6642: LD_EXP 2
6646: PPUSH
6647: LD_VAR 0 1
6651: PPUSH
6652: CALL_OW 471
// poskoz = poskoz union [ tmp ] ;
6656: LD_ADDR_LOC 19
6660: PUSH
6661: LD_LOC 19
6665: PUSH
6666: LD_VAR 0 1
6670: PUSH
6671: EMPTY
6672: LIST
6673: UNION
6674: ST_TO_ADDR
// end else
6675: GO 6737
// if ( getlives ( tmp ) > 800 ) and ( tmp in poskoz ) then
6677: LD_VAR 0 1
6681: PPUSH
6682: CALL_OW 256
6686: PUSH
6687: LD_INT 800
6689: GREATER
6690: PUSH
6691: LD_VAR 0 1
6695: PUSH
6696: LD_LOC 19
6700: IN
6701: AND
6702: IFFALSE 6737
// begin poskoz = poskoz diff [ tmp ] ;
6704: LD_ADDR_LOC 19
6708: PUSH
6709: LD_LOC 19
6713: PUSH
6714: LD_VAR 0 1
6718: PUSH
6719: EMPTY
6720: LIST
6721: DIFF
6722: ST_TO_ADDR
// normalattack ( ru2 , tmp ) ;
6723: LD_EXP 2
6727: PPUSH
6728: LD_VAR 0 1
6732: PPUSH
6733: CALL_OW 472
// end ;
6737: GO 6624
6739: POP
6740: POP
// end ;
6741: PPOPN 1
6743: END
// var devet , dva , center_o ; every 0 0$0.9 trigger buldozery >= 2 do var popin , gayin , tmp , tmp2 , tspeed , oldbl1 , oldbl2 ;
6744: CALL 6414 0 0
6748: PUSH
6749: LD_INT 2
6751: GREATEREQUAL
6752: IFFALSE 9583
6754: GO 6756
6756: DISABLE
6757: LD_INT 0
6759: PPUSH
6760: PPUSH
6761: PPUSH
6762: PPUSH
6763: PPUSH
6764: PPUSH
6765: PPUSH
// begin changemissionobjectives ( MReady ) ;
6766: LD_STRING MReady
6768: PPUSH
6769: CALL_OW 337
// if not basedone then
6773: LD_LOC 14
6777: NOT
6778: IFFALSE 6787
// changemissionobjectives ( MStarta ) ;
6780: LD_STRING MStarta
6782: PPUSH
6783: CALL_OW 337
// popin = false ;
6787: LD_ADDR_VAR 0 1
6791: PUSH
6792: LD_INT 0
6794: ST_TO_ADDR
// gayin = false ;
6795: LD_ADDR_VAR 0 2
6799: PUSH
6800: LD_INT 0
6802: ST_TO_ADDR
// setside ( [ buldoz1 , buldoz2 ] , ru2 ) ;
6803: LD_LOC 16
6807: PUSH
6808: LD_LOC 17
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: PPUSH
6817: LD_EXP 2
6821: PPUSH
6822: CALL_OW 235
// if getcontrol ( buldoz1 ) = control_manual then
6826: LD_LOC 16
6830: PPUSH
6831: CALL_OW 263
6835: PUSH
6836: LD_INT 1
6838: EQUAL
6839: IFFALSE 6879
// begin comexitvehicle ( buldoz1 ) ;
6841: LD_LOC 16
6845: PPUSH
6846: CALL_OW 121
// wait ( 0 0$1 ) ;
6850: LD_INT 35
6852: PPUSH
6853: CALL_OW 67
// comenterunit ( popov , buldoz1 ) ;
6857: LD_EXP 101
6861: PPUSH
6862: LD_LOC 16
6866: PPUSH
6867: CALL_OW 120
// popin = true ;
6871: LD_ADDR_VAR 0 1
6875: PUSH
6876: LD_INT 1
6878: ST_TO_ADDR
// end ; if getcontrol ( buldoz2 ) = control_manual then
6879: LD_LOC 17
6883: PPUSH
6884: CALL_OW 263
6888: PUSH
6889: LD_INT 1
6891: EQUAL
6892: IFFALSE 6932
// begin comexitvehicle ( buldoz2 ) ;
6894: LD_LOC 17
6898: PPUSH
6899: CALL_OW 121
// wait ( 0 0$1 ) ;
6903: LD_INT 35
6905: PPUSH
6906: CALL_OW 67
// comenterunit ( gaydar , buldoz2 ) ;
6910: LD_EXP 102
6914: PPUSH
6915: LD_LOC 17
6919: PPUSH
6920: CALL_OW 120
// gayin = true ;
6924: LD_ADDR_VAR 0 2
6928: PUSH
6929: LD_INT 1
6931: ST_TO_ADDR
// end ; if popin then
6932: LD_VAR 0 1
6936: IFFALSE 6993
// while not isinunit ( popov ) do
6938: LD_EXP 101
6942: PPUSH
6943: CALL_OW 310
6947: NOT
6948: IFFALSE 6993
// begin if isdrivenby ( buldoz1 ) then
6950: LD_LOC 16
6954: PPUSH
6955: CALL_OW 311
6959: IFFALSE 6970
// comexitvehicle ( buldoz1 ) ;
6961: LD_LOC 16
6965: PPUSH
6966: CALL_OW 121
// wait ( 0 0$0.3 ) ;
6970: LD_INT 10
6972: PPUSH
6973: CALL_OW 67
// comenterunit ( popov , buldoz1 ) ;
6977: LD_EXP 101
6981: PPUSH
6982: LD_LOC 16
6986: PPUSH
6987: CALL_OW 120
// end ;
6991: GO 6938
// if gayin then
6993: LD_VAR 0 2
6997: IFFALSE 7054
// while not isinunit ( gaydar ) do
6999: LD_EXP 102
7003: PPUSH
7004: CALL_OW 310
7008: NOT
7009: IFFALSE 7054
// begin if isdrivenby ( buldoz2 ) then
7011: LD_LOC 17
7015: PPUSH
7016: CALL_OW 311
7020: IFFALSE 7031
// comexitvehicle ( buldoz2 ) ;
7022: LD_LOC 17
7026: PPUSH
7027: CALL_OW 121
// wait ( 0 0$0.3 ) ;
7031: LD_INT 10
7033: PPUSH
7034: CALL_OW 67
// comenterunit ( gaydar , buldoz2 ) ;
7038: LD_EXP 102
7042: PPUSH
7043: LD_LOC 17
7047: PPUSH
7048: CALL_OW 120
// end ;
7052: GO 6999
// setattitude ( ru2 , am , att_neutral , true ) ;
7054: LD_EXP 2
7058: PPUSH
7059: LD_EXP 3
7063: PPUSH
7064: LD_INT 0
7066: PPUSH
7067: LD_INT 1
7069: PPUSH
7070: CALL_OW 80
// centernowonunits ( [ buldoz1 , buldoz2 ] ) ;
7074: LD_LOC 16
7078: PUSH
7079: LD_LOC 17
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PPUSH
7088: CALL_OW 87
// center_buld = true ;
7092: LD_ADDR_LOC 23
7096: PUSH
7097: LD_INT 1
7099: ST_TO_ADDR
// enable ( 05 ) ;
7100: LD_INT 5
7102: ENABLE_MARKED
// comfree ( filterallunits ( [ [ f_side , ru2 ] , [ f_type , unit_vehicle ] ] ) ) ;
7103: LD_INT 22
7105: PUSH
7106: LD_EXP 2
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: PUSH
7115: LD_INT 21
7117: PUSH
7118: LD_INT 2
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: PPUSH
7129: CALL_OW 69
7133: PPUSH
7134: CALL_OW 139
// ingame_video = true ;
7138: LD_ADDR_OWVAR 52
7142: PUSH
7143: LD_INT 1
7145: ST_TO_ADDR
// interface_hidden = true ;
7146: LD_ADDR_OWVAR 54
7150: PUSH
7151: LD_INT 1
7153: ST_TO_ADDR
// disable ( 06 ) ;
7154: LD_INT 6
7156: DISABLE_MARKED
// commovexy ( buldoz1 , 87 , 86 ) ;
7157: LD_LOC 16
7161: PPUSH
7162: LD_INT 87
7164: PPUSH
7165: LD_INT 86
7167: PPUSH
7168: CALL_OW 111
// commovexy ( buldoz2 , 91 , 85 ) ;
7172: LD_LOC 17
7176: PPUSH
7177: LD_INT 91
7179: PPUSH
7180: LD_INT 85
7182: PPUSH
7183: CALL_OW 111
// commovexy ( buldoz2 , 91 , 84 ) ;
7187: LD_LOC 17
7191: PPUSH
7192: LD_INT 91
7194: PPUSH
7195: LD_INT 84
7197: PPUSH
7198: CALL_OW 111
// addcommovexy ( buldoz1 , 85 , 82 ) ;
7202: LD_LOC 16
7206: PPUSH
7207: LD_INT 85
7209: PPUSH
7210: LD_INT 82
7212: PPUSH
7213: CALL_OW 171
// addcommovexy ( buldoz2 , 89 , 81 ) ;
7217: LD_LOC 17
7221: PPUSH
7222: LD_INT 89
7224: PPUSH
7225: LD_INT 81
7227: PPUSH
7228: CALL_OW 171
// addcommovexy ( buldoz2 , 88 , 81 ) ;
7232: LD_LOC 17
7236: PPUSH
7237: LD_INT 88
7239: PPUSH
7240: LD_INT 81
7242: PPUSH
7243: CALL_OW 171
// addcommovexy ( buldoz1 , 83 , 78 ) ;
7247: LD_LOC 16
7251: PPUSH
7252: LD_INT 83
7254: PPUSH
7255: LD_INT 78
7257: PPUSH
7258: CALL_OW 171
// addcommovexy ( buldoz1 , 82 , 77 ) ;
7262: LD_LOC 16
7266: PPUSH
7267: LD_INT 82
7269: PPUSH
7270: LD_INT 77
7272: PPUSH
7273: CALL_OW 171
// addcommovexy ( buldoz1 , 82 , 76 ) ;
7277: LD_LOC 16
7281: PPUSH
7282: LD_INT 82
7284: PPUSH
7285: LD_INT 76
7287: PPUSH
7288: CALL_OW 171
// addcommovexy ( buldoz2 , 87 , 79 ) ;
7292: LD_LOC 17
7296: PPUSH
7297: LD_INT 87
7299: PPUSH
7300: LD_INT 79
7302: PPUSH
7303: CALL_OW 171
// addcommovexy ( buldoz1 , 81 , 74 ) ;
7307: LD_LOC 16
7311: PPUSH
7312: LD_INT 81
7314: PPUSH
7315: LD_INT 74
7317: PPUSH
7318: CALL_OW 171
// addcommovexy ( buldoz2 , 85 , 74 ) ;
7322: LD_LOC 17
7326: PPUSH
7327: LD_INT 85
7329: PPUSH
7330: LD_INT 74
7332: PPUSH
7333: CALL_OW 171
// addcommovexy ( buldoz1 , 79 , 69 ) ;
7337: LD_LOC 16
7341: PPUSH
7342: LD_INT 79
7344: PPUSH
7345: LD_INT 69
7347: PPUSH
7348: CALL_OW 171
// addcommovexy ( buldoz1 , 78 , 68 ) ;
7352: LD_LOC 16
7356: PPUSH
7357: LD_INT 78
7359: PPUSH
7360: LD_INT 68
7362: PPUSH
7363: CALL_OW 171
// addcommovexy ( buldoz1 , 79 , 67 ) ;
7367: LD_LOC 16
7371: PPUSH
7372: LD_INT 79
7374: PPUSH
7375: LD_INT 67
7377: PPUSH
7378: CALL_OW 171
// addcommovexy ( buldoz1 , 78 , 66 ) ;
7382: LD_LOC 16
7386: PPUSH
7387: LD_INT 78
7389: PPUSH
7390: LD_INT 66
7392: PPUSH
7393: CALL_OW 171
// addcommovexy ( buldoz2 , 83 , 70 ) ;
7397: LD_LOC 17
7401: PPUSH
7402: LD_INT 83
7404: PPUSH
7405: LD_INT 70
7407: PPUSH
7408: CALL_OW 171
// addcommovexy ( buldoz2 , 81 , 69 ) ;
7412: LD_LOC 17
7416: PPUSH
7417: LD_INT 81
7419: PPUSH
7420: LD_INT 69
7422: PPUSH
7423: CALL_OW 171
// addcommovexy ( buldoz2 , 80 , 66 ) ;
7427: LD_LOC 17
7431: PPUSH
7432: LD_INT 80
7434: PPUSH
7435: LD_INT 66
7437: PPUSH
7438: CALL_OW 171
// addcommovexy ( buldoz1 , 76 , 71 ) ;
7442: LD_LOC 16
7446: PPUSH
7447: LD_INT 76
7449: PPUSH
7450: LD_INT 71
7452: PPUSH
7453: CALL_OW 171
// addcommovexy ( buldoz2 , 86 , 71 ) ;
7457: LD_LOC 17
7461: PPUSH
7462: LD_INT 86
7464: PPUSH
7465: LD_INT 71
7467: PPUSH
7468: CALL_OW 171
// addcommovexy ( buldoz1 , 78 , 75 ) ;
7472: LD_LOC 16
7476: PPUSH
7477: LD_INT 78
7479: PPUSH
7480: LD_INT 75
7482: PPUSH
7483: CALL_OW 171
// addcommovexy ( buldoz2 , 88 , 73 ) ;
7487: LD_LOC 17
7491: PPUSH
7492: LD_INT 88
7494: PPUSH
7495: LD_INT 73
7497: PPUSH
7498: CALL_OW 171
// addcommovexy ( buldoz2 , 89 , 75 ) ;
7502: LD_LOC 17
7506: PPUSH
7507: LD_INT 89
7509: PPUSH
7510: LD_INT 75
7512: PPUSH
7513: CALL_OW 171
// addcommovexy ( buldoz1 , 80 , 78 ) ;
7517: LD_LOC 16
7521: PPUSH
7522: LD_INT 80
7524: PPUSH
7525: LD_INT 78
7527: PPUSH
7528: CALL_OW 171
// addcommovexy ( buldoz2 , 90 , 78 ) ;
7532: LD_LOC 17
7536: PPUSH
7537: LD_INT 90
7539: PPUSH
7540: LD_INT 78
7542: PPUSH
7543: CALL_OW 171
// addcommovexy ( buldoz1 , 81 , 81 ) ;
7547: LD_LOC 16
7551: PPUSH
7552: LD_INT 81
7554: PPUSH
7555: LD_INT 81
7557: PPUSH
7558: CALL_OW 171
// addcommovexy ( buldoz1 , 82 , 83 ) ;
7562: LD_LOC 16
7566: PPUSH
7567: LD_INT 82
7569: PPUSH
7570: LD_INT 83
7572: PPUSH
7573: CALL_OW 171
// addcommovexy ( buldoz1 , 83 , 84 ) ;
7577: LD_LOC 16
7581: PPUSH
7582: LD_INT 83
7584: PPUSH
7585: LD_INT 84
7587: PPUSH
7588: CALL_OW 171
// addcommovexy ( buldoz2 , 93 , 82 ) ;
7592: LD_LOC 17
7596: PPUSH
7597: LD_INT 93
7599: PPUSH
7600: LD_INT 82
7602: PPUSH
7603: CALL_OW 171
// addcommovexy ( buldoz1 , 81 , 84 ) ;
7607: LD_LOC 16
7611: PPUSH
7612: LD_INT 81
7614: PPUSH
7615: LD_INT 84
7617: PPUSH
7618: CALL_OW 171
// addcommovexy ( buldoz1 , 81 , 85 ) ;
7622: LD_LOC 16
7626: PPUSH
7627: LD_INT 81
7629: PPUSH
7630: LD_INT 85
7632: PPUSH
7633: CALL_OW 171
// addcommovexy ( buldoz2 , 95 , 85 ) ;
7637: LD_LOC 17
7641: PPUSH
7642: LD_INT 95
7644: PPUSH
7645: LD_INT 85
7647: PPUSH
7648: CALL_OW 171
// addcommovexy ( buldoz1 , 81 , 89 ) ;
7652: LD_LOC 16
7656: PPUSH
7657: LD_INT 81
7659: PPUSH
7660: LD_INT 89
7662: PPUSH
7663: CALL_OW 171
// addcommovexy ( buldoz2 , 104 , 89 ) ;
7667: LD_LOC 17
7671: PPUSH
7672: LD_INT 104
7674: PPUSH
7675: LD_INT 89
7677: PPUSH
7678: CALL_OW 171
// while not isinarea ( buldoz1 , les ) or not isinarea ( buldoz2 , les ) do
7682: LD_LOC 16
7686: PPUSH
7687: LD_INT 5
7689: PPUSH
7690: CALL_OW 308
7694: NOT
7695: PUSH
7696: LD_LOC 17
7700: PPUSH
7701: LD_INT 5
7703: PPUSH
7704: CALL_OW 308
7708: NOT
7709: OR
7710: IFFALSE 7721
// wait ( 0 0$5 ) ;
7712: LD_INT 175
7714: PPUSH
7715: CALL_OW 67
7719: GO 7682
// while not isinarea ( buldoz1 , bulcile ) or not isinarea ( buldoz2 , bulcile ) do
7721: LD_LOC 16
7725: PPUSH
7726: LD_INT 10
7728: PPUSH
7729: CALL_OW 308
7733: NOT
7734: PUSH
7735: LD_LOC 17
7739: PPUSH
7740: LD_INT 10
7742: PPUSH
7743: CALL_OW 308
7747: NOT
7748: OR
7749: IFFALSE 7812
// begin if isidle ( buldoz1 ) then
7751: LD_LOC 16
7755: PPUSH
7756: CALL_OW 316
7760: IFFALSE 7777
// commovexy ( buldoz1 , 82 , 89 ) ;
7762: LD_LOC 16
7766: PPUSH
7767: LD_INT 82
7769: PPUSH
7770: LD_INT 89
7772: PPUSH
7773: CALL_OW 111
// if isidle ( buldoz2 ) then
7777: LD_LOC 17
7781: PPUSH
7782: CALL_OW 316
7786: IFFALSE 7803
// commovexy ( buldoz2 , 104 , 89 ) ;
7788: LD_LOC 17
7792: PPUSH
7793: LD_INT 104
7795: PPUSH
7796: LD_INT 89
7798: PPUSH
7799: CALL_OW 111
// wait ( 0 0$1 ) ;
7803: LD_INT 35
7805: PPUSH
7806: CALL_OW 67
// end ;
7810: GO 7721
// disable ( 05 ) ;
7812: LD_INT 5
7814: DISABLE_MARKED
// center_buld = false ;
7815: LD_ADDR_LOC 23
7819: PUSH
7820: LD_INT 0
7822: ST_TO_ADDR
// center_o = true ;
7823: LD_ADDR_LOC 22
7827: PUSH
7828: LD_INT 1
7830: ST_TO_ADDR
// enable ( 08 ) ;
7831: LD_INT 8
7833: ENABLE_MARKED
// setattitude ( ru2 , am , att_enemy , true ) ;
7834: LD_EXP 2
7838: PPUSH
7839: LD_EXP 3
7843: PPUSH
7844: LD_INT 2
7846: PPUSH
7847: LD_INT 1
7849: PPUSH
7850: CALL_OW 80
// if popin then
7854: LD_VAR 0 1
7858: IFFALSE 7869
// comexitvehicle ( popov ) ;
7860: LD_EXP 101
7864: PPUSH
7865: CALL_OW 121
// if gayin then
7869: LD_VAR 0 2
7873: IFFALSE 7884
// comexitvehicle ( gaydar ) ;
7875: LD_EXP 102
7879: PPUSH
7880: CALL_OW 121
// while ( popin and isinunit ( popov ) ) or ( gayin and isinunit ( gaydar ) ) do
7884: LD_VAR 0 1
7888: PUSH
7889: LD_EXP 101
7893: PPUSH
7894: CALL_OW 310
7898: AND
7899: PUSH
7900: LD_VAR 0 2
7904: PUSH
7905: LD_EXP 102
7909: PPUSH
7910: CALL_OW 310
7914: AND
7915: OR
7916: IFFALSE 7927
// wait ( 0 0$0.5 ) ;
7918: LD_INT 18
7920: PPUSH
7921: CALL_OW 67
7925: GO 7884
// comenterunit ( vsevol , vsevol_v ) ;
7927: LD_EXP 100
7931: PPUSH
7932: LD_LOC 7
7936: PPUSH
7937: CALL_OW 120
// comenterunit ( popov , popov_v ) ;
7941: LD_EXP 101
7945: PPUSH
7946: LD_LOC 8
7950: PPUSH
7951: CALL_OW 120
// comenterunit ( gaydar , gaydar_v ) ;
7955: LD_EXP 102
7959: PPUSH
7960: LD_LOC 9
7964: PPUSH
7965: CALL_OW 120
// comenterunit ( yashin , yashin_v ) ;
7969: LD_EXP 103
7973: PPUSH
7974: LD_LOC 10
7978: PPUSH
7979: CALL_OW 120
// while not isinunit ( vsevol ) or not isinunit ( popov ) or not isinunit ( gaydar ) or not isinunit ( yashin ) do
7983: LD_EXP 100
7987: PPUSH
7988: CALL_OW 310
7992: NOT
7993: PUSH
7994: LD_EXP 101
7998: PPUSH
7999: CALL_OW 310
8003: NOT
8004: OR
8005: PUSH
8006: LD_EXP 102
8010: PPUSH
8011: CALL_OW 310
8015: NOT
8016: OR
8017: PUSH
8018: LD_EXP 103
8022: PPUSH
8023: CALL_OW 310
8027: NOT
8028: OR
8029: IFFALSE 8264
// begin wait ( 0 0$0.3 ) ;
8031: LD_INT 10
8033: PPUSH
8034: CALL_OW 67
// tmp = isinunit ( vsevol_v ) ;
8038: LD_ADDR_VAR 0 3
8042: PUSH
8043: LD_LOC 7
8047: PPUSH
8048: CALL_OW 310
8052: ST_TO_ADDR
// if tmp and tmp <> vsevol then
8053: LD_VAR 0 3
8057: PUSH
8058: LD_VAR 0 3
8062: PUSH
8063: LD_EXP 100
8067: NONEQUAL
8068: AND
8069: IFFALSE 8094
// begin comexitvehicle ( vsevol_v ) ;
8071: LD_LOC 7
8075: PPUSH
8076: CALL_OW 121
// comenterunit ( vsevol , vsevol_v ) ;
8080: LD_EXP 100
8084: PPUSH
8085: LD_LOC 7
8089: PPUSH
8090: CALL_OW 120
// end ; tmp = isinunit ( popov_v ) ;
8094: LD_ADDR_VAR 0 3
8098: PUSH
8099: LD_LOC 8
8103: PPUSH
8104: CALL_OW 310
8108: ST_TO_ADDR
// if tmp and tmp <> popov then
8109: LD_VAR 0 3
8113: PUSH
8114: LD_VAR 0 3
8118: PUSH
8119: LD_EXP 101
8123: NONEQUAL
8124: AND
8125: IFFALSE 8150
// begin comexitvehicle ( popov_v ) ;
8127: LD_LOC 8
8131: PPUSH
8132: CALL_OW 121
// comenterunit ( popov , popov_v ) ;
8136: LD_EXP 101
8140: PPUSH
8141: LD_LOC 8
8145: PPUSH
8146: CALL_OW 120
// end ; tmp = isinunit ( gaydar_v ) ;
8150: LD_ADDR_VAR 0 3
8154: PUSH
8155: LD_LOC 9
8159: PPUSH
8160: CALL_OW 310
8164: ST_TO_ADDR
// if tmp and tmp <> gaydar then
8165: LD_VAR 0 3
8169: PUSH
8170: LD_VAR 0 3
8174: PUSH
8175: LD_EXP 102
8179: NONEQUAL
8180: AND
8181: IFFALSE 8206
// begin comexitvehicle ( gaydar_v ) ;
8183: LD_LOC 9
8187: PPUSH
8188: CALL_OW 121
// comenterunit ( gaydar , gaydar_v ) ;
8192: LD_EXP 102
8196: PPUSH
8197: LD_LOC 9
8201: PPUSH
8202: CALL_OW 120
// end ; tmp = isinunit ( yashin_v ) ;
8206: LD_ADDR_VAR 0 3
8210: PUSH
8211: LD_LOC 10
8215: PPUSH
8216: CALL_OW 310
8220: ST_TO_ADDR
// if tmp and tmp <> yashin then
8221: LD_VAR 0 3
8225: PUSH
8226: LD_VAR 0 3
8230: PUSH
8231: LD_EXP 103
8235: NONEQUAL
8236: AND
8237: IFFALSE 8262
// begin comexitvehicle ( yashin_v ) ;
8239: LD_LOC 10
8243: PPUSH
8244: CALL_OW 121
// comenterunit ( yashin , yashin_v ) ;
8248: LD_EXP 103
8252: PPUSH
8253: LD_LOC 10
8257: PPUSH
8258: CALL_OW 120
// end ; end ;
8262: GO 7983
// for tmp in survivors do
8264: LD_ADDR_VAR 0 3
8268: PUSH
8269: LD_LOC 4
8273: PUSH
8274: FOR_IN
8275: IFFALSE 8293
// donotattack ( am , tmp ) ;
8277: LD_EXP 3
8281: PPUSH
8282: LD_VAR 0 3
8286: PPUSH
8287: CALL_OW 471
8291: GO 8274
8293: POP
8294: POP
// tspeed = game_speed ;
8295: LD_ADDR_VAR 0 5
8299: PUSH
8300: LD_OWVAR 65
8304: ST_TO_ADDR
// game_speed = 2 ;
8305: LD_ADDR_OWVAR 65
8309: PUSH
8310: LD_INT 2
8312: ST_TO_ADDR
// nesahat = false ;
8313: LD_ADDR_EXP 125
8317: PUSH
8318: LD_INT 0
8320: ST_TO_ADDR
// donotattack ( ru2 , ame1 ) ;
8321: LD_EXP 2
8325: PPUSH
8326: LD_EXP 85
8330: PPUSH
8331: CALL_OW 471
// donotattack ( ru2 , ame2 ) ;
8335: LD_EXP 2
8339: PPUSH
8340: LD_EXP 87
8344: PPUSH
8345: CALL_OW 471
// oldbl1 = getblevel ( ambunk3 ) ;
8349: LD_ADDR_VAR 0 6
8353: PUSH
8354: LD_INT 14
8356: PPUSH
8357: CALL_OW 267
8361: ST_TO_ADDR
// oldbl2 = getblevel ( ambunk5 ) ;
8362: LD_ADDR_VAR 0 7
8366: PUSH
8367: LD_INT 7
8369: PPUSH
8370: CALL_OW 267
8374: ST_TO_ADDR
// setblevel ( [ ambunk3 , ambunk5 ] , 10 ) ;
8375: LD_INT 14
8377: PUSH
8378: LD_INT 7
8380: PUSH
8381: EMPTY
8382: LIST
8383: LIST
8384: PPUSH
8385: LD_INT 10
8387: PPUSH
8388: CALL_OW 241
// nenicit = true ;
8392: LD_ADDR_LOC 18
8396: PUSH
8397: LD_INT 1
8399: ST_TO_ADDR
// poskoz = [ ] ;
8400: LD_ADDR_LOC 19
8404: PUSH
8405: EMPTY
8406: ST_TO_ADDR
// enable ( 10 ) ;
8407: LD_INT 10
8409: ENABLE_MARKED
// commovexy ( vehiklyo , 73 , 49 ) ;
8410: LD_LOC 12
8414: PPUSH
8415: LD_INT 73
8417: PPUSH
8418: LD_INT 49
8420: PPUSH
8421: CALL_OW 111
// wait ( 0 0$9 ) ;
8425: LD_INT 315
8427: PPUSH
8428: CALL_OW 67
// comagressivemove ( vehiklys , 74 , 54 ) ;
8432: LD_LOC 13
8436: PPUSH
8437: LD_INT 74
8439: PPUSH
8440: LD_INT 54
8442: PPUSH
8443: CALL_OW 114
// tmp2 = [ 1 , 2 , 3 , 4 ] ;
8447: LD_ADDR_VAR 0 4
8451: PUSH
8452: LD_INT 1
8454: PUSH
8455: LD_INT 2
8457: PUSH
8458: LD_INT 3
8460: PUSH
8461: LD_INT 4
8463: PUSH
8464: EMPTY
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: ST_TO_ADDR
// tmp = rand ( 1 , 4 ) ;
8470: LD_ADDR_VAR 0 3
8474: PUSH
8475: LD_INT 1
8477: PPUSH
8478: LD_INT 4
8480: PPUSH
8481: CALL_OW 12
8485: ST_TO_ADDR
// tmp2 = tmp2 diff [ tmp ] ;
8486: LD_ADDR_VAR 0 4
8490: PUSH
8491: LD_VAR 0 4
8495: PUSH
8496: LD_VAR 0 3
8500: PUSH
8501: EMPTY
8502: LIST
8503: DIFF
8504: ST_TO_ADDR
// case tmp of 1 :
8505: LD_VAR 0 3
8509: PUSH
8510: LD_INT 1
8512: DOUBLE
8513: EQUAL
8514: IFTRUE 8518
8516: GO 8533
8518: POP
// say ( vsevol , DDeath-Vse-1 ) ; 2 :
8519: LD_EXP 100
8523: PPUSH
8524: LD_STRING DDeath-Vse-1
8526: PPUSH
8527: CALL_OW 88
8531: GO 8603
8533: LD_INT 2
8535: DOUBLE
8536: EQUAL
8537: IFTRUE 8541
8539: GO 8556
8541: POP
// say ( yashin , DDeath-Yas-1 ) ; 3 :
8542: LD_EXP 103
8546: PPUSH
8547: LD_STRING DDeath-Yas-1
8549: PPUSH
8550: CALL_OW 88
8554: GO 8603
8556: LD_INT 3
8558: DOUBLE
8559: EQUAL
8560: IFTRUE 8564
8562: GO 8579
8564: POP
// say ( popov , DDeath-Pop-1 ) ; 4 :
8565: LD_EXP 101
8569: PPUSH
8570: LD_STRING DDeath-Pop-1
8572: PPUSH
8573: CALL_OW 88
8577: GO 8603
8579: LD_INT 4
8581: DOUBLE
8582: EQUAL
8583: IFTRUE 8587
8585: GO 8602
8587: POP
// say ( gaydar , DDeath-Gay-1 ) ; end ;
8588: LD_EXP 102
8592: PPUSH
8593: LD_STRING DDeath-Gay-1
8595: PPUSH
8596: CALL_OW 88
8600: GO 8603
8602: POP
// tmp = rand ( 1 , 3 ) ;
8603: LD_ADDR_VAR 0 3
8607: PUSH
8608: LD_INT 1
8610: PPUSH
8611: LD_INT 3
8613: PPUSH
8614: CALL_OW 12
8618: ST_TO_ADDR
// case tmp2 [ tmp ] of 1 :
8619: LD_VAR 0 4
8623: PUSH
8624: LD_VAR 0 3
8628: ARRAY
8629: PUSH
8630: LD_INT 1
8632: DOUBLE
8633: EQUAL
8634: IFTRUE 8638
8636: GO 8653
8638: POP
// say ( vsevol , DDeath-Vse-1 ) ; 2 :
8639: LD_EXP 100
8643: PPUSH
8644: LD_STRING DDeath-Vse-1
8646: PPUSH
8647: CALL_OW 88
8651: GO 8723
8653: LD_INT 2
8655: DOUBLE
8656: EQUAL
8657: IFTRUE 8661
8659: GO 8676
8661: POP
// say ( yashin , DDeath-Yas-1 ) ; 3 :
8662: LD_EXP 103
8666: PPUSH
8667: LD_STRING DDeath-Yas-1
8669: PPUSH
8670: CALL_OW 88
8674: GO 8723
8676: LD_INT 3
8678: DOUBLE
8679: EQUAL
8680: IFTRUE 8684
8682: GO 8699
8684: POP
// say ( popov , DDeath-Pop-1 ) ; 4 :
8685: LD_EXP 101
8689: PPUSH
8690: LD_STRING DDeath-Pop-1
8692: PPUSH
8693: CALL_OW 88
8697: GO 8723
8699: LD_INT 4
8701: DOUBLE
8702: EQUAL
8703: IFTRUE 8707
8705: GO 8722
8707: POP
// say ( gaydar , DDeath-Gay-1 ) ; end ;
8708: LD_EXP 102
8712: PPUSH
8713: LD_STRING DDeath-Gay-1
8715: PPUSH
8716: CALL_OW 88
8720: GO 8723
8722: POP
// zdrhaci = [ ] ;
8723: LD_ADDR_LOC 24
8727: PUSH
8728: EMPTY
8729: ST_TO_ADDR
// dva = true ;
8730: LD_ADDR_LOC 21
8734: PUSH
8735: LD_INT 1
8737: ST_TO_ADDR
// enable ( 02 ) ;
8738: LD_INT 2
8740: ENABLE_MARKED
// while filterunitsinarea ( attckar , [ [ f_side , ru2 ] ] ) < 1 do
8741: LD_INT 8
8743: PPUSH
8744: LD_INT 22
8746: PUSH
8747: LD_EXP 2
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: PUSH
8756: EMPTY
8757: LIST
8758: PPUSH
8759: CALL_OW 70
8763: PUSH
8764: LD_INT 1
8766: LESS
8767: IFFALSE 8778
// wait ( 0 0$0.3 ) ;
8769: LD_INT 10
8771: PPUSH
8772: CALL_OW 67
8776: GO 8741
// disable ( 08 ) ;
8778: LD_INT 8
8780: DISABLE_MARKED
// center_o = false ;
8781: LD_ADDR_LOC 22
8785: PUSH
8786: LD_INT 0
8788: ST_TO_ADDR
// centeronxy ( 74 , 51 ) ;
8789: LD_INT 74
8791: PPUSH
8792: LD_INT 51
8794: PPUSH
8795: CALL_OW 84
// while filterunitsinarea ( attckar , [ [ f_side , ru2 ] ] ) < 2 do
8799: LD_INT 8
8801: PPUSH
8802: LD_INT 22
8804: PUSH
8805: LD_EXP 2
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: PUSH
8814: EMPTY
8815: LIST
8816: PPUSH
8817: CALL_OW 70
8821: PUSH
8822: LD_INT 2
8824: LESS
8825: IFFALSE 8836
// wait ( 0 0$0.3 ) ;
8827: LD_INT 10
8829: PPUSH
8830: CALL_OW 67
8834: GO 8799
// tmp2 = [ 1 , 2 , 3 , 4 ] ;
8836: LD_ADDR_VAR 0 4
8840: PUSH
8841: LD_INT 1
8843: PUSH
8844: LD_INT 2
8846: PUSH
8847: LD_INT 3
8849: PUSH
8850: LD_INT 4
8852: PUSH
8853: EMPTY
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: ST_TO_ADDR
// tmp = rand ( 1 , 4 ) ;
8859: LD_ADDR_VAR 0 3
8863: PUSH
8864: LD_INT 1
8866: PPUSH
8867: LD_INT 4
8869: PPUSH
8870: CALL_OW 12
8874: ST_TO_ADDR
// tmp2 = tmp2 diff [ tmp ] ;
8875: LD_ADDR_VAR 0 4
8879: PUSH
8880: LD_VAR 0 4
8884: PUSH
8885: LD_VAR 0 3
8889: PUSH
8890: EMPTY
8891: LIST
8892: DIFF
8893: ST_TO_ADDR
// case tmp of 1 :
8894: LD_VAR 0 3
8898: PUSH
8899: LD_INT 1
8901: DOUBLE
8902: EQUAL
8903: IFTRUE 8907
8905: GO 8922
8907: POP
// say ( vsevol , DDeath-Vse-2 ) ; 2 :
8908: LD_EXP 100
8912: PPUSH
8913: LD_STRING DDeath-Vse-2
8915: PPUSH
8916: CALL_OW 88
8920: GO 8992
8922: LD_INT 2
8924: DOUBLE
8925: EQUAL
8926: IFTRUE 8930
8928: GO 8945
8930: POP
// say ( yashin , DDeath-Yas-2 ) ; 3 :
8931: LD_EXP 103
8935: PPUSH
8936: LD_STRING DDeath-Yas-2
8938: PPUSH
8939: CALL_OW 88
8943: GO 8992
8945: LD_INT 3
8947: DOUBLE
8948: EQUAL
8949: IFTRUE 8953
8951: GO 8968
8953: POP
// say ( popov , DDeath-Pop-2 ) ; 4 :
8954: LD_EXP 101
8958: PPUSH
8959: LD_STRING DDeath-Pop-2
8961: PPUSH
8962: CALL_OW 88
8966: GO 8992
8968: LD_INT 4
8970: DOUBLE
8971: EQUAL
8972: IFTRUE 8976
8974: GO 8991
8976: POP
// say ( gaydar , DDeath-Gay-2 ) ; end ;
8977: LD_EXP 102
8981: PPUSH
8982: LD_STRING DDeath-Gay-2
8984: PPUSH
8985: CALL_OW 88
8989: GO 8992
8991: POP
// tmp = rand ( 1 , 3 ) ;
8992: LD_ADDR_VAR 0 3
8996: PUSH
8997: LD_INT 1
8999: PPUSH
9000: LD_INT 3
9002: PPUSH
9003: CALL_OW 12
9007: ST_TO_ADDR
// case tmp2 [ tmp ] of 1 :
9008: LD_VAR 0 4
9012: PUSH
9013: LD_VAR 0 3
9017: ARRAY
9018: PUSH
9019: LD_INT 1
9021: DOUBLE
9022: EQUAL
9023: IFTRUE 9027
9025: GO 9042
9027: POP
// say ( vsevol , DDeath-Vse-2 ) ; 2 :
9028: LD_EXP 100
9032: PPUSH
9033: LD_STRING DDeath-Vse-2
9035: PPUSH
9036: CALL_OW 88
9040: GO 9112
9042: LD_INT 2
9044: DOUBLE
9045: EQUAL
9046: IFTRUE 9050
9048: GO 9065
9050: POP
// say ( yashin , DDeath-Yas-2 ) ; 3 :
9051: LD_EXP 103
9055: PPUSH
9056: LD_STRING DDeath-Yas-2
9058: PPUSH
9059: CALL_OW 88
9063: GO 9112
9065: LD_INT 3
9067: DOUBLE
9068: EQUAL
9069: IFTRUE 9073
9071: GO 9088
9073: POP
// say ( popov , DDeath-Pop-2 ) ; 4 :
9074: LD_EXP 101
9078: PPUSH
9079: LD_STRING DDeath-Pop-2
9081: PPUSH
9082: CALL_OW 88
9086: GO 9112
9088: LD_INT 4
9090: DOUBLE
9091: EQUAL
9092: IFTRUE 9096
9094: GO 9111
9096: POP
// say ( gaydar , DDeath-Gay-2 ) ; end ;
9097: LD_EXP 102
9101: PPUSH
9102: LD_STRING DDeath-Gay-2
9104: PPUSH
9105: CALL_OW 88
9109: GO 9112
9111: POP
// while not jsou_zpatky do
9112: CALL 6511 0 0
9116: NOT
9117: IFFALSE 9128
// wait ( 0 0$0.5 ) ;
9119: LD_INT 18
9121: PPUSH
9122: CALL_OW 67
9126: GO 9112
// nenicit = false ;
9128: LD_ADDR_LOC 18
9132: PUSH
9133: LD_INT 0
9135: ST_TO_ADDR
// disable ( 10 ) ;
9136: LD_INT 10
9138: DISABLE_MARKED
// disable ( 02 ) ;
9139: LD_INT 2
9141: DISABLE_MARKED
// dva = false ;
9142: LD_ADDR_LOC 21
9146: PUSH
9147: LD_INT 0
9149: ST_TO_ADDR
// disable ( 09 ) ;
9150: LD_INT 9
9152: DISABLE_MARKED
// devet = false ;
9153: LD_ADDR_LOC 20
9157: PUSH
9158: LD_INT 0
9160: ST_TO_ADDR
// setblevel ( [ ambunk3 ] , oldbl1 ) ;
9161: LD_INT 14
9163: PUSH
9164: EMPTY
9165: LIST
9166: PPUSH
9167: LD_VAR 0 6
9171: PPUSH
9172: CALL_OW 241
// setblevel ( [ ambunk5 ] , oldbl2 ) ;
9176: LD_INT 7
9178: PUSH
9179: EMPTY
9180: LIST
9181: PPUSH
9182: LD_VAR 0 7
9186: PPUSH
9187: CALL_OW 241
// game_speed = tspeed ;
9191: LD_ADDR_OWVAR 65
9195: PUSH
9196: LD_VAR 0 5
9200: ST_TO_ADDR
// centernowonxy ( 94 , 98 ) ;
9201: LD_INT 94
9203: PPUSH
9204: LD_INT 98
9206: PPUSH
9207: CALL_OW 86
// for tmp in survivors do
9211: LD_ADDR_VAR 0 3
9215: PUSH
9216: LD_LOC 4
9220: PUSH
9221: FOR_IN
9222: IFFALSE 9259
// if isinunit ( tmp ) then
9224: LD_VAR 0 3
9228: PPUSH
9229: CALL_OW 310
9233: IFFALSE 9257
// setside ( [ isinunit ( tmp ) ] , ru ) ;
9235: LD_VAR 0 3
9239: PPUSH
9240: CALL_OW 310
9244: PUSH
9245: EMPTY
9246: LIST
9247: PPUSH
9248: LD_EXP 1
9252: PPUSH
9253: CALL_OW 235
9257: GO 9221
9259: POP
9260: POP
// setside ( survivors , ru ) ;
9261: LD_LOC 4
9265: PPUSH
9266: LD_EXP 1
9270: PPUSH
9271: CALL_OW 235
// setside ( [ buldoz1 , buldoz2 ] , ru ) ;
9275: LD_LOC 16
9279: PUSH
9280: LD_LOC 17
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: PPUSH
9289: LD_EXP 1
9293: PPUSH
9294: CALL_OW 235
// for tmp in survivors do
9298: LD_ADDR_VAR 0 3
9302: PUSH
9303: LD_LOC 4
9307: PUSH
9308: FOR_IN
9309: IFFALSE 9327
// normalattack ( am , tmp ) ;
9311: LD_EXP 3
9315: PPUSH
9316: LD_VAR 0 3
9320: PPUSH
9321: CALL_OW 472
9325: GO 9308
9327: POP
9328: POP
// ingame_video = false ;
9329: LD_ADDR_OWVAR 52
9333: PUSH
9334: LD_INT 0
9336: ST_TO_ADDR
// interface_hidden = false ;
9337: LD_ADDR_OWVAR 54
9341: PUSH
9342: LD_INT 0
9344: ST_TO_ADDR
// dialogueon ;
9345: CALL_OW 6
// say ( burlak , DAftermath-Bur-1 ) ;
9349: LD_EXP 119
9353: PPUSH
9354: LD_STRING DAftermath-Bur-1
9356: PPUSH
9357: CALL_OW 88
// if isok ( titov ) then
9361: LD_EXP 104
9365: PPUSH
9366: CALL_OW 302
9370: IFFALSE 9384
// say ( titov , DAftermath-Tit-1 ) ;
9372: LD_EXP 104
9376: PPUSH
9377: LD_STRING DAftermath-Tit-1
9379: PPUSH
9380: CALL_OW 88
// if isok ( belkov ) then
9384: LD_EXP 105
9388: PPUSH
9389: CALL_OW 302
9393: IFFALSE 9407
// say ( belkov , DAftermath-Bel-1 ) ;
9395: LD_EXP 105
9399: PPUSH
9400: LD_STRING DAftermath-Bel-1
9402: PPUSH
9403: CALL_OW 88
// if isok ( kuzmov ) then
9407: LD_EXP 106
9411: PPUSH
9412: CALL_OW 302
9416: IFFALSE 9430
// say ( kuzmov , DAftermath-Kuz-1 ) ;
9418: LD_EXP 106
9422: PPUSH
9423: LD_STRING DAftermath-Kuz-1
9425: PPUSH
9426: CALL_OW 88
// if isok ( gnyevko ) then
9430: LD_EXP 107
9434: PPUSH
9435: CALL_OW 302
9439: IFFALSE 9453
// say ( gnyevko , DAftermath-Gny-1 ) ;
9441: LD_EXP 107
9445: PPUSH
9446: LD_STRING DAftermath-Gny-1
9448: PPUSH
9449: CALL_OW 88
// if isok ( belkov ) then
9453: LD_EXP 105
9457: PPUSH
9458: CALL_OW 302
9462: IFFALSE 9476
// say ( belkov , DAftermath-Bel-2 ) ;
9464: LD_EXP 105
9468: PPUSH
9469: LD_STRING DAftermath-Bel-2
9471: PPUSH
9472: CALL_OW 88
// if isok ( kozlov ) then
9476: LD_EXP 108
9480: PPUSH
9481: CALL_OW 302
9485: IFFALSE 9499
// say ( kozlov , DAftermath-Koz-2 ) ;
9487: LD_EXP 108
9491: PPUSH
9492: LD_STRING DAftermath-Koz-2
9494: PPUSH
9495: CALL_OW 88
// say ( furmanov , DAftermath-Fur-2 ) ;
9499: LD_EXP 109
9503: PPUSH
9504: LD_STRING DAftermath-Fur-2
9506: PPUSH
9507: CALL_OW 88
// say ( burlak , DAftermath-Bur-2 ) ;
9511: LD_EXP 119
9515: PPUSH
9516: LD_STRING DAftermath-Bur-2
9518: PPUSH
9519: CALL_OW 88
// say ( furmanov , DAftermath-Fur-3 ) ;
9523: LD_EXP 109
9527: PPUSH
9528: LD_STRING DAftermath-Fur-3
9530: PPUSH
9531: CALL_OW 88
// say ( burlak , DAftermath-Bur-3 ) ;
9535: LD_EXP 119
9539: PPUSH
9540: LD_STRING DAftermath-Bur-3
9542: PPUSH
9543: CALL_OW 88
// say ( burlak , DAftermath-Bur-3a ) ;
9547: LD_EXP 119
9551: PPUSH
9552: LD_STRING DAftermath-Bur-3a
9554: PPUSH
9555: CALL_OW 88
// dialogueoff ;
9559: CALL_OW 7
// changemissionobjectives ( MDest ) ;
9563: LD_STRING MDest
9565: PPUSH
9566: CALL_OW 337
// wait ( 0 0$15 ) ;
9570: LD_INT 525
9572: PPUSH
9573: CALL_OW 67
// enable ( 03 ) ;
9577: LD_INT 3
9579: ENABLE_MARKED
// disable ( 07 ) ;
9580: LD_INT 7
9582: DISABLE_MARKED
// end ;
9583: PPOPN 7
9585: END
// on vehiclecaptured ( new , old , origside , by ) marked 07 do var tmp ;
9586: LD_INT 0
9588: PPUSH
// case old of vsevol_v :
9589: LD_VAR 0 2
9593: PUSH
9594: LD_LOC 7
9598: DOUBLE
9599: EQUAL
9600: IFTRUE 9604
9602: GO 9782
9604: POP
// begin comexitvehicle ( new ) ;
9605: LD_VAR 0 1
9609: PPUSH
9610: CALL_OW 121
// setside ( new , ru2 ) ;
9614: LD_VAR 0 1
9618: PPUSH
9619: LD_EXP 2
9623: PPUSH
9624: CALL_OW 235
// for tmp = 1 to 0 + vehikly do
9628: LD_ADDR_VAR 0 5
9632: PUSH
9633: DOUBLE
9634: LD_INT 1
9636: DEC
9637: ST_TO_ADDR
9638: LD_INT 0
9640: PUSH
9641: LD_LOC 11
9645: PLUS
9646: PUSH
9647: FOR_TO
9648: IFFALSE 9672
// if vehikly [ tmp ] = vsevol_v then
9650: LD_LOC 11
9654: PUSH
9655: LD_VAR 0 5
9659: ARRAY
9660: PUSH
9661: LD_LOC 7
9665: EQUAL
9666: IFFALSE 9670
// break ;
9668: GO 9672
9670: GO 9647
9672: POP
9673: POP
// vehikly = replace ( vehikly , tmp , new ) ;
9674: LD_ADDR_LOC 11
9678: PUSH
9679: LD_LOC 11
9683: PPUSH
9684: LD_VAR 0 5
9688: PPUSH
9689: LD_VAR 0 1
9693: PPUSH
9694: CALL_OW 1
9698: ST_TO_ADDR
// for tmp = 1 to 0 + vehiklyo do
9699: LD_ADDR_VAR 0 5
9703: PUSH
9704: DOUBLE
9705: LD_INT 1
9707: DEC
9708: ST_TO_ADDR
9709: LD_INT 0
9711: PUSH
9712: LD_LOC 12
9716: PLUS
9717: PUSH
9718: FOR_TO
9719: IFFALSE 9743
// if vehiklyo [ tmp ] = vsevol_v then
9721: LD_LOC 12
9725: PUSH
9726: LD_VAR 0 5
9730: ARRAY
9731: PUSH
9732: LD_LOC 7
9736: EQUAL
9737: IFFALSE 9741
// break ;
9739: GO 9743
9741: GO 9718
9743: POP
9744: POP
// vehiklyo = replace ( vehiklyo , tmp , new ) ;
9745: LD_ADDR_LOC 12
9749: PUSH
9750: LD_LOC 12
9754: PPUSH
9755: LD_VAR 0 5
9759: PPUSH
9760: LD_VAR 0 1
9764: PPUSH
9765: CALL_OW 1
9769: ST_TO_ADDR
// vsevol_v = new ;
9770: LD_ADDR_LOC 7
9774: PUSH
9775: LD_VAR 0 1
9779: ST_TO_ADDR
// end ; yashin_v :
9780: GO 10393
9782: LD_LOC 10
9786: DOUBLE
9787: EQUAL
9788: IFTRUE 9792
9790: GO 9970
9792: POP
// begin comexitvehicle ( new ) ;
9793: LD_VAR 0 1
9797: PPUSH
9798: CALL_OW 121
// setside ( new , ru2 ) ;
9802: LD_VAR 0 1
9806: PPUSH
9807: LD_EXP 2
9811: PPUSH
9812: CALL_OW 235
// for tmp = 1 to 0 + vehikly do
9816: LD_ADDR_VAR 0 5
9820: PUSH
9821: DOUBLE
9822: LD_INT 1
9824: DEC
9825: ST_TO_ADDR
9826: LD_INT 0
9828: PUSH
9829: LD_LOC 11
9833: PLUS
9834: PUSH
9835: FOR_TO
9836: IFFALSE 9860
// if vehikly [ tmp ] = yashin_v then
9838: LD_LOC 11
9842: PUSH
9843: LD_VAR 0 5
9847: ARRAY
9848: PUSH
9849: LD_LOC 10
9853: EQUAL
9854: IFFALSE 9858
// break ;
9856: GO 9860
9858: GO 9835
9860: POP
9861: POP
// vehikly = replace ( vehikly , tmp , new ) ;
9862: LD_ADDR_LOC 11
9866: PUSH
9867: LD_LOC 11
9871: PPUSH
9872: LD_VAR 0 5
9876: PPUSH
9877: LD_VAR 0 1
9881: PPUSH
9882: CALL_OW 1
9886: ST_TO_ADDR
// for tmp = 1 to 0 + vehiklyo do
9887: LD_ADDR_VAR 0 5
9891: PUSH
9892: DOUBLE
9893: LD_INT 1
9895: DEC
9896: ST_TO_ADDR
9897: LD_INT 0
9899: PUSH
9900: LD_LOC 12
9904: PLUS
9905: PUSH
9906: FOR_TO
9907: IFFALSE 9931
// if vehiklyo [ tmp ] = yashin_v then
9909: LD_LOC 12
9913: PUSH
9914: LD_VAR 0 5
9918: ARRAY
9919: PUSH
9920: LD_LOC 10
9924: EQUAL
9925: IFFALSE 9929
// break ;
9927: GO 9931
9929: GO 9906
9931: POP
9932: POP
// vehiklyo = replace ( vehiklyo , tmp , new ) ;
9933: LD_ADDR_LOC 12
9937: PUSH
9938: LD_LOC 12
9942: PPUSH
9943: LD_VAR 0 5
9947: PPUSH
9948: LD_VAR 0 1
9952: PPUSH
9953: CALL_OW 1
9957: ST_TO_ADDR
// yashin_v = new ;
9958: LD_ADDR_LOC 10
9962: PUSH
9963: LD_VAR 0 1
9967: ST_TO_ADDR
// end ; popov_v :
9968: GO 10393
9970: LD_LOC 8
9974: DOUBLE
9975: EQUAL
9976: IFTRUE 9980
9978: GO 10158
9980: POP
// begin comexitvehicle ( new ) ;
9981: LD_VAR 0 1
9985: PPUSH
9986: CALL_OW 121
// setside ( new , ru2 ) ;
9990: LD_VAR 0 1
9994: PPUSH
9995: LD_EXP 2
9999: PPUSH
10000: CALL_OW 235
// for tmp = 1 to 0 + vehikly do
10004: LD_ADDR_VAR 0 5
10008: PUSH
10009: DOUBLE
10010: LD_INT 1
10012: DEC
10013: ST_TO_ADDR
10014: LD_INT 0
10016: PUSH
10017: LD_LOC 11
10021: PLUS
10022: PUSH
10023: FOR_TO
10024: IFFALSE 10048
// if vehikly [ tmp ] = popov_v then
10026: LD_LOC 11
10030: PUSH
10031: LD_VAR 0 5
10035: ARRAY
10036: PUSH
10037: LD_LOC 8
10041: EQUAL
10042: IFFALSE 10046
// break ;
10044: GO 10048
10046: GO 10023
10048: POP
10049: POP
// vehikly = replace ( vehikly , tmp , new ) ;
10050: LD_ADDR_LOC 11
10054: PUSH
10055: LD_LOC 11
10059: PPUSH
10060: LD_VAR 0 5
10064: PPUSH
10065: LD_VAR 0 1
10069: PPUSH
10070: CALL_OW 1
10074: ST_TO_ADDR
// for tmp = 1 to 0 + vehiklyo do
10075: LD_ADDR_VAR 0 5
10079: PUSH
10080: DOUBLE
10081: LD_INT 1
10083: DEC
10084: ST_TO_ADDR
10085: LD_INT 0
10087: PUSH
10088: LD_LOC 12
10092: PLUS
10093: PUSH
10094: FOR_TO
10095: IFFALSE 10119
// if vehiklyo [ tmp ] = popov_v then
10097: LD_LOC 12
10101: PUSH
10102: LD_VAR 0 5
10106: ARRAY
10107: PUSH
10108: LD_LOC 8
10112: EQUAL
10113: IFFALSE 10117
// break ;
10115: GO 10119
10117: GO 10094
10119: POP
10120: POP
// vehiklyo = replace ( vehiklyo , tmp , new ) ;
10121: LD_ADDR_LOC 12
10125: PUSH
10126: LD_LOC 12
10130: PPUSH
10131: LD_VAR 0 5
10135: PPUSH
10136: LD_VAR 0 1
10140: PPUSH
10141: CALL_OW 1
10145: ST_TO_ADDR
// popov_v = new ;
10146: LD_ADDR_LOC 8
10150: PUSH
10151: LD_VAR 0 1
10155: ST_TO_ADDR
// end ; gaydar_v :
10156: GO 10393
10158: LD_LOC 9
10162: DOUBLE
10163: EQUAL
10164: IFTRUE 10168
10166: GO 10346
10168: POP
// begin comexitvehicle ( new ) ;
10169: LD_VAR 0 1
10173: PPUSH
10174: CALL_OW 121
// setside ( new , ru2 ) ;
10178: LD_VAR 0 1
10182: PPUSH
10183: LD_EXP 2
10187: PPUSH
10188: CALL_OW 235
// for tmp = 1 to 0 + vehikly do
10192: LD_ADDR_VAR 0 5
10196: PUSH
10197: DOUBLE
10198: LD_INT 1
10200: DEC
10201: ST_TO_ADDR
10202: LD_INT 0
10204: PUSH
10205: LD_LOC 11
10209: PLUS
10210: PUSH
10211: FOR_TO
10212: IFFALSE 10236
// if vehikly [ tmp ] = gaydar_v then
10214: LD_LOC 11
10218: PUSH
10219: LD_VAR 0 5
10223: ARRAY
10224: PUSH
10225: LD_LOC 9
10229: EQUAL
10230: IFFALSE 10234
// break ;
10232: GO 10236
10234: GO 10211
10236: POP
10237: POP
// vehikly = replace ( vehikly , tmp , new ) ;
10238: LD_ADDR_LOC 11
10242: PUSH
10243: LD_LOC 11
10247: PPUSH
10248: LD_VAR 0 5
10252: PPUSH
10253: LD_VAR 0 1
10257: PPUSH
10258: CALL_OW 1
10262: ST_TO_ADDR
// for tmp = 1 to 0 + vehiklyo do
10263: LD_ADDR_VAR 0 5
10267: PUSH
10268: DOUBLE
10269: LD_INT 1
10271: DEC
10272: ST_TO_ADDR
10273: LD_INT 0
10275: PUSH
10276: LD_LOC 12
10280: PLUS
10281: PUSH
10282: FOR_TO
10283: IFFALSE 10307
// if vehiklyo [ tmp ] = gaydar_v then
10285: LD_LOC 12
10289: PUSH
10290: LD_VAR 0 5
10294: ARRAY
10295: PUSH
10296: LD_LOC 9
10300: EQUAL
10301: IFFALSE 10305
// break ;
10303: GO 10307
10305: GO 10282
10307: POP
10308: POP
// vehiklyo = replace ( vehiklyo , tmp , new ) ;
10309: LD_ADDR_LOC 12
10313: PUSH
10314: LD_LOC 12
10318: PPUSH
10319: LD_VAR 0 5
10323: PPUSH
10324: LD_VAR 0 1
10328: PPUSH
10329: CALL_OW 1
10333: ST_TO_ADDR
// gaydar_v = new ;
10334: LD_ADDR_LOC 9
10338: PUSH
10339: LD_VAR 0 1
10343: ST_TO_ADDR
// end ; buldoz1 :
10344: GO 10393
10346: LD_LOC 16
10350: DOUBLE
10351: EQUAL
10352: IFTRUE 10356
10354: GO 10369
10356: POP
// buldoz1 = new ; buldoz2 :
10357: LD_ADDR_LOC 16
10361: PUSH
10362: LD_VAR 0 1
10366: ST_TO_ADDR
10367: GO 10393
10369: LD_LOC 17
10373: DOUBLE
10374: EQUAL
10375: IFTRUE 10379
10377: GO 10392
10379: POP
// buldoz2 = new ; end ;
10380: LD_ADDR_LOC 17
10384: PUSH
10385: LD_VAR 0 1
10389: ST_TO_ADDR
10390: GO 10393
10392: POP
10393: PPOPN 5
10395: END
// var center_buld ; every 0 0$2 marked 05 do
10396: GO 10398
10398: DISABLE
// begin if center_buld then
10399: LD_LOC 23
10403: IFFALSE 10406
// enable ;
10405: ENABLE
// centeronunits ( [ buldoz1 , buldoz2 ] ) ;
10406: LD_LOC 16
10410: PUSH
10411: LD_LOC 17
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: PPUSH
10420: CALL_OW 85
// end ;
10424: END
// every 0 0$1 + 0 0$0.1 marked 08 do
10425: GO 10427
10427: DISABLE
// begin if center_o then
10428: LD_LOC 22
10432: IFFALSE 10435
// enable ;
10434: ENABLE
// centeronunits ( nearestunittoxy ( vehiklyo , 73 , 49 ) ) ;
10435: LD_LOC 12
10439: PPUSH
10440: LD_INT 73
10442: PPUSH
10443: LD_INT 49
10445: PPUSH
10446: CALL_OW 73
10450: PPUSH
10451: CALL_OW 85
// end ;
10455: END
// every 0 0$1 + 0 0$0.2 marked 09 do
10456: GO 10458
10458: DISABLE
// begin if devet then
10459: LD_LOC 20
10463: IFFALSE 10466
// enable ;
10465: ENABLE
// centeronunits ( nearestunittoxy ( vehiklys , 74 , 54 ) ) ;
10466: LD_LOC 13
10470: PPUSH
10471: LD_INT 74
10473: PPUSH
10474: LD_INT 54
10476: PPUSH
10477: CALL_OW 73
10481: PPUSH
10482: CALL_OW 85
// end ;
10486: END
// var zdrhaci ; every 0 0$0.1 marked 02 do var tmp ;
10487: GO 10489
10489: DISABLE
10490: LD_INT 0
10492: PPUSH
// begin if not dva then
10493: LD_LOC 21
10497: NOT
10498: IFFALSE 10502
// exit ;
10500: GO 10728
// for tmp in vehiklys do
10502: LD_ADDR_VAR 0 1
10506: PUSH
10507: LD_LOC 13
10511: PUSH
10512: FOR_IN
10513: IFFALSE 10596
// if ( getlives ( tmp ) < zdrhame ) and not ( tmp in zdrhaci ) then
10515: LD_VAR 0 1
10519: PPUSH
10520: CALL_OW 256
10524: PUSH
10525: LD_EXP 97
10529: LESS
10530: PUSH
10531: LD_VAR 0 1
10535: PUSH
10536: LD_LOC 24
10540: IN
10541: NOT
10542: AND
10543: IFFALSE 10594
// begin commovexy ( tmp , 88 , 86 ) ;
10545: LD_VAR 0 1
10549: PPUSH
10550: LD_INT 88
10552: PPUSH
10553: LD_INT 86
10555: PPUSH
10556: CALL_OW 111
// addcommovexy ( tmp , 97 , 99 ) ;
10560: LD_VAR 0 1
10564: PPUSH
10565: LD_INT 97
10567: PPUSH
10568: LD_INT 99
10570: PPUSH
10571: CALL_OW 171
// zdrhaci = zdrhaci ^ [ tmp ] ;
10575: LD_ADDR_LOC 24
10579: PUSH
10580: LD_LOC 24
10584: PUSH
10585: LD_VAR 0 1
10589: PUSH
10590: EMPTY
10591: LIST
10592: ADD
10593: ST_TO_ADDR
// end ;
10594: GO 10512
10596: POP
10597: POP
// for tmp in survivors do
10598: LD_ADDR_VAR 0 1
10602: PUSH
10603: LD_LOC 4
10607: PUSH
10608: FOR_IN
10609: IFFALSE 10687
// if not isinunit ( tmp ) and not ( tmp in zdrhaci ) then
10611: LD_VAR 0 1
10615: PPUSH
10616: CALL_OW 310
10620: NOT
10621: PUSH
10622: LD_VAR 0 1
10626: PUSH
10627: LD_LOC 24
10631: IN
10632: NOT
10633: AND
10634: IFFALSE 10685
// begin commovexy ( tmp , 88 , 86 ) ;
10636: LD_VAR 0 1
10640: PPUSH
10641: LD_INT 88
10643: PPUSH
10644: LD_INT 86
10646: PPUSH
10647: CALL_OW 111
// addcommovexy ( tmp , 97 , 99 ) ;
10651: LD_VAR 0 1
10655: PPUSH
10656: LD_INT 97
10658: PPUSH
10659: LD_INT 99
10661: PPUSH
10662: CALL_OW 171
// zdrhaci = zdrhaci ^ [ tmp ] ;
10666: LD_ADDR_LOC 24
10670: PUSH
10671: LD_LOC 24
10675: PUSH
10676: LD_VAR 0 1
10680: PUSH
10681: EMPTY
10682: LIST
10683: ADD
10684: ST_TO_ADDR
// end ;
10685: GO 10608
10687: POP
10688: POP
// if ( ( 0 + zdrhaci ) > 2 ) and not devet then
10689: LD_INT 0
10691: PUSH
10692: LD_LOC 24
10696: PLUS
10697: PUSH
10698: LD_INT 2
10700: GREATER
10701: PUSH
10702: LD_LOC 20
10706: NOT
10707: AND
10708: IFFALSE 10721
// begin devet = true ;
10710: LD_ADDR_LOC 20
10714: PUSH
10715: LD_INT 1
10717: ST_TO_ADDR
// enable ( 09 ) ;
10718: LD_INT 9
10720: ENABLE_MARKED
// end ; if dva then
10721: LD_LOC 21
10725: IFFALSE 10728
// enable ;
10727: ENABLE
// end ;
10728: PPOPN 1
10730: END
// export nesahat ; on unitgoestored ( un ) do case un of vsevol :
10731: LD_VAR 0 1
10735: PUSH
10736: LD_EXP 100
10740: DOUBLE
10741: EQUAL
10742: IFTRUE 10746
10744: GO 10807
10746: POP
// if vs then
10747: LD_EXP 123
10751: IFFALSE 10793
// begin forcesay ( vsevol , DDeath-Vse-3 ) ;
10753: LD_EXP 100
10757: PPUSH
10758: LD_STRING DDeath-Vse-3
10760: PPUSH
10761: CALL_OW 91
// say ( burlak , DDeath-Bur-3 ) ;
10765: LD_EXP 119
10769: PPUSH
10770: LD_STRING DDeath-Bur-3
10772: PPUSH
10773: CALL_OW 88
// priorityattack ( am , vsevol ) ;
10777: LD_EXP 3
10781: PPUSH
10782: LD_EXP 100
10786: PPUSH
10787: CALL_OW 470
// end else
10791: GO 10805
// forcesay ( vsevol , DDeath-Sto-3 ) ; yashin :
10793: LD_EXP 100
10797: PPUSH
10798: LD_STRING DDeath-Sto-3
10800: PPUSH
10801: CALL_OW 91
10805: GO 11267
10807: LD_EXP 103
10811: DOUBLE
10812: EQUAL
10813: IFTRUE 10817
10815: GO 10846
10817: POP
// begin forcesay ( yashin , DDeath-Yas-3 ) ;
10818: LD_EXP 103
10822: PPUSH
10823: LD_STRING DDeath-Yas-3
10825: PPUSH
10826: CALL_OW 91
// priorityattack ( am , yashin ) ;
10830: LD_EXP 3
10834: PPUSH
10835: LD_EXP 103
10839: PPUSH
10840: CALL_OW 470
// end ; popov :
10844: GO 11267
10846: LD_EXP 101
10850: DOUBLE
10851: EQUAL
10852: IFTRUE 10856
10854: GO 10885
10856: POP
// begin forcesay ( popov , DDeath-Pop-3 ) ;
10857: LD_EXP 101
10861: PPUSH
10862: LD_STRING DDeath-Pop-3
10864: PPUSH
10865: CALL_OW 91
// priorityattack ( am , popov ) ;
10869: LD_EXP 3
10873: PPUSH
10874: LD_EXP 101
10878: PPUSH
10879: CALL_OW 470
// end ; gaydar :
10883: GO 11267
10885: LD_EXP 102
10889: DOUBLE
10890: EQUAL
10891: IFTRUE 10895
10893: GO 10924
10895: POP
// begin forcesay ( gaydar , DDeath-Gay-3 ) ;
10896: LD_EXP 102
10900: PPUSH
10901: LD_STRING DDeath-Gay-3
10903: PPUSH
10904: CALL_OW 91
// priorityattack ( am , gaydar ) ;
10908: LD_EXP 3
10912: PPUSH
10913: LD_EXP 102
10917: PPUSH
10918: CALL_OW 470
// end ; else
10922: GO 11267
10924: POP
// if ( getside ( un ) = ru2 ) and nesahat then
10925: LD_VAR 0 1
10929: PPUSH
10930: CALL_OW 255
10934: PUSH
10935: LD_EXP 2
10939: EQUAL
10940: PUSH
10941: LD_EXP 125
10945: AND
10946: IFFALSE 10957
// youlost ( Mad ) else
10948: LD_STRING Mad
10950: PPUSH
10951: CALL_OW 104
10955: GO 11267
// if ( getside ( un ) = am ) then
10957: LD_VAR 0 1
10961: PPUSH
10962: CALL_OW 255
10966: PUSH
10967: LD_EXP 3
10971: EQUAL
10972: IFFALSE 11267
// case un of amv1 :
10974: LD_VAR 0 1
10978: PUSH
10979: LD_EXP 58
10983: DOUBLE
10984: EQUAL
10985: IFTRUE 10989
10987: GO 11020
10989: POP
// begin comrepairvehicle ( amm1 , amv1 ) ;
10990: LD_EXP 44
10994: PPUSH
10995: LD_EXP 58
10999: PPUSH
11000: CALL_OW 129
// addcomenterunit ( amm1 , amv1 ) ;
11004: LD_EXP 44
11008: PPUSH
11009: LD_EXP 58
11013: PPUSH
11014: CALL_OW 180
// end ; amv2 :
11018: GO 11267
11020: LD_EXP 61
11024: DOUBLE
11025: EQUAL
11026: IFTRUE 11030
11028: GO 11061
11030: POP
// begin comrepairvehicle ( amm2 , amv2 ) ;
11031: LD_EXP 46
11035: PPUSH
11036: LD_EXP 61
11040: PPUSH
11041: CALL_OW 129
// addcomenterunit ( amm2 , amv2 ) ;
11045: LD_EXP 46
11049: PPUSH
11050: LD_EXP 61
11054: PPUSH
11055: CALL_OW 180
// end ; amv3 :
11059: GO 11267
11061: LD_EXP 64
11065: DOUBLE
11066: EQUAL
11067: IFTRUE 11071
11069: GO 11102
11071: POP
// begin comrepairvehicle ( amm3 , amv3 ) ;
11072: LD_EXP 48
11076: PPUSH
11077: LD_EXP 64
11081: PPUSH
11082: CALL_OW 129
// addcomenterunit ( amm3 , amv3 ) ;
11086: LD_EXP 48
11090: PPUSH
11091: LD_EXP 64
11095: PPUSH
11096: CALL_OW 180
// end ; amv4 :
11100: GO 11267
11102: LD_EXP 67
11106: DOUBLE
11107: EQUAL
11108: IFTRUE 11112
11110: GO 11143
11112: POP
// begin comrepairvehicle ( amm4 , amv4 ) ;
11113: LD_EXP 50
11117: PPUSH
11118: LD_EXP 67
11122: PPUSH
11123: CALL_OW 129
// addcomenterunit ( amm4 , amv4 ) ;
11127: LD_EXP 50
11131: PPUSH
11132: LD_EXP 67
11136: PPUSH
11137: CALL_OW 180
// end ; amv5 :
11141: GO 11267
11143: LD_EXP 70
11147: DOUBLE
11148: EQUAL
11149: IFTRUE 11153
11151: GO 11184
11153: POP
// begin comrepairvehicle ( amm4 , amv5 ) ;
11154: LD_EXP 50
11158: PPUSH
11159: LD_EXP 70
11163: PPUSH
11164: CALL_OW 129
// addcomenterunit ( amm4 , amv5 ) ;
11168: LD_EXP 50
11172: PPUSH
11173: LD_EXP 70
11177: PPUSH
11178: CALL_OW 180
// end ; amv6 :
11182: GO 11267
11184: LD_EXP 73
11188: DOUBLE
11189: EQUAL
11190: IFTRUE 11194
11192: GO 11225
11194: POP
// begin comrepairvehicle ( amm6 , amv6 ) ;
11195: LD_EXP 54
11199: PPUSH
11200: LD_EXP 73
11204: PPUSH
11205: CALL_OW 129
// addcomenterunit ( amm6 , amv6 ) ;
11209: LD_EXP 54
11213: PPUSH
11214: LD_EXP 73
11218: PPUSH
11219: CALL_OW 180
// end ; amv7 :
11223: GO 11267
11225: LD_EXP 76
11229: DOUBLE
11230: EQUAL
11231: IFTRUE 11235
11233: GO 11266
11235: POP
// begin comrepairvehicle ( amm7 , amv7 ) ;
11236: LD_EXP 56
11240: PPUSH
11241: LD_EXP 76
11245: PPUSH
11246: CALL_OW 129
// addcomenterunit ( amm7 , amv7 ) ;
11250: LD_EXP 56
11254: PPUSH
11255: LD_EXP 76
11259: PPUSH
11260: CALL_OW 180
// end ; end ; end ;
11264: GO 11267
11266: POP
11267: PPOPN 1
11269: END
// on unitdestroyed ( un ) do if un = burlak then
11270: LD_VAR 0 1
11274: PUSH
11275: LD_EXP 119
11279: EQUAL
11280: IFFALSE 11291
// youlost ( Burlak ) else
11282: LD_STRING Burlak
11284: PPUSH
11285: CALL_OW 104
11289: GO 11337
// if ( getside ( un ) = ru ) and ( gettype ( un ) = unit_human ) then
11291: LD_VAR 0 1
11295: PPUSH
11296: CALL_OW 255
11300: PUSH
11301: LD_EXP 1
11305: EQUAL
11306: PUSH
11307: LD_VAR 0 1
11311: PPUSH
11312: CALL_OW 247
11316: PUSH
11317: LD_INT 1
11319: EQUAL
11320: AND
11321: IFFALSE 11337
// chcipli = chcipli + 1 ;
11323: LD_ADDR_EXP 95
11327: PUSH
11328: LD_EXP 95
11332: PUSH
11333: LD_INT 1
11335: PLUS
11336: ST_TO_ADDR
11337: PPOPN 1
11339: END
// on unitteleported ( tel , un ) do begin telepused = 1 ;
11340: LD_ADDR_EXP 96
11344: PUSH
11345: LD_INT 1
11347: ST_TO_ADDR
// disable ;
11348: DISABLE
// end ;
11349: PPOPN 2
11351: END
// every 0 0$1 trigger ( not filterallunits ( [ [ f_side , am ] , [ f_alive ] , [ f_type , unit_human ] ] ) ) marked 03 do var tmp ;
11352: LD_INT 22
11354: PUSH
11355: LD_EXP 3
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: PUSH
11364: LD_INT 51
11366: PUSH
11367: EMPTY
11368: LIST
11369: PUSH
11370: LD_INT 21
11372: PUSH
11373: LD_INT 1
11375: PUSH
11376: EMPTY
11377: LIST
11378: LIST
11379: PUSH
11380: EMPTY
11381: LIST
11382: LIST
11383: LIST
11384: PPUSH
11385: CALL_OW 69
11389: NOT
11390: IFFALSE 11633
11392: GO 11394
11394: DISABLE
11395: LD_INT 0
11397: PPUSH
// begin dialogueon ;
11398: CALL_OW 6
// say ( burlak , DBetaCaptured-Bur-1 ) ;
11402: LD_EXP 119
11406: PPUSH
11407: LD_STRING DBetaCaptured-Bur-1
11409: PPUSH
11410: CALL_OW 88
// say ( jmm , DBetaCaptured-JMM-1 ) ;
11414: LD_EXP 121
11418: PPUSH
11419: LD_STRING DBetaCaptured-JMM-1
11421: PPUSH
11422: CALL_OW 88
// say ( burlak , DBetaCaptured-Bur-2 ) ;
11426: LD_EXP 119
11430: PPUSH
11431: LD_STRING DBetaCaptured-Bur-2
11433: PPUSH
11434: CALL_OW 88
// dwait ( 0 0$1 ) ;
11438: LD_INT 35
11440: PPUSH
11441: CALL_OW 68
// sayradio ( platonov , DReturn-Pla-1 ) ;
11445: LD_EXP 120
11449: PPUSH
11450: LD_STRING DReturn-Pla-1
11452: PPUSH
11453: CALL_OW 94
// say ( burlak , DReturn-Bur-1 ) ;
11457: LD_EXP 119
11461: PPUSH
11462: LD_STRING DReturn-Bur-1
11464: PPUSH
11465: CALL_OW 88
// sayradio ( platonov , DReturn-Pla-2 ) ;
11469: LD_EXP 120
11473: PPUSH
11474: LD_STRING DReturn-Pla-2
11476: PPUSH
11477: CALL_OW 94
// dialogueoff ;
11481: CALL_OW 7
// if chcipli > 4 then
11485: LD_EXP 95
11489: PUSH
11490: LD_INT 4
11492: GREATER
11493: IFFALSE 11508
// addmedal ( LittleLosses , - 1 ) else
11495: LD_STRING LittleLosses
11497: PPUSH
11498: LD_INT 1
11500: NEG
11501: PPUSH
11502: CALL_OW 101
11506: GO 11518
// addmedal ( LittleLosses , 1 ) ;
11508: LD_STRING LittleLosses
11510: PPUSH
11511: LD_INT 1
11513: PPUSH
11514: CALL_OW 101
// if rychlik then
11518: LD_EXP 98
11522: IFFALSE 11536
// addmedal ( Quick , 1 ) else
11524: LD_STRING Quick
11526: PPUSH
11527: LD_INT 1
11529: PPUSH
11530: CALL_OW 101
11534: GO 11547
// addmedal ( Quick , - 1 ) ;
11536: LD_STRING Quick
11538: PPUSH
11539: LD_INT 1
11541: NEG
11542: PPUSH
11543: CALL_OW 101
// if telepused then
11547: LD_EXP 96
11551: IFFALSE 11565
// addmedal ( Teleport , 1 ) else
11553: LD_STRING Teleport
11555: PPUSH
11556: LD_INT 1
11558: PPUSH
11559: CALL_OW 101
11563: GO 11576
// addmedal ( Teleport , - 1 ) ;
11565: LD_STRING Teleport
11567: PPUSH
11568: LD_INT 1
11570: NEG
11571: PPUSH
11572: CALL_OW 101
// givemedals ( Main ) ;
11576: LD_STRING Main
11578: PPUSH
11579: CALL_OW 102
// rewardpeople ( filterallunits ( [ [ f_alive ] , [ f_side , ru ] , [ f_type , unit_human ] ] ) ) ;
11583: LD_INT 51
11585: PUSH
11586: EMPTY
11587: LIST
11588: PUSH
11589: LD_INT 22
11591: PUSH
11592: LD_EXP 1
11596: PUSH
11597: EMPTY
11598: LIST
11599: LIST
11600: PUSH
11601: LD_INT 21
11603: PUSH
11604: LD_INT 1
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: LIST
11615: PPUSH
11616: CALL_OW 69
11620: PPUSH
11621: CALL_OW 43
// saveitall ;
11625: CALL 11636 0 0
// youwin ;
11629: CALL_OW 103
// end ;
11633: PPOPN 1
11635: END
// function saveitall ; var tmp ; begin
11636: LD_INT 0
11638: PPUSH
11639: PPUSH
// savecharacters ( burlak , Burlak ) ;
11640: LD_EXP 119
11644: PPUSH
11645: LD_STRING Burlak
11647: PPUSH
11648: CALL_OW 38
// if vs then
11652: LD_EXP 123
11656: IFFALSE 11672
// savecharacters ( vsevol , Vsevolod ) else
11658: LD_EXP 100
11662: PPUSH
11663: LD_STRING Vsevolod
11665: PPUSH
11666: CALL_OW 38
11670: GO 11684
// savecharacters ( vsevol , Stolypin ) ;
11672: LD_EXP 100
11676: PPUSH
11677: LD_STRING Stolypin
11679: PPUSH
11680: CALL_OW 38
// savecharacters ( popov , Popov ) ;
11684: LD_EXP 101
11688: PPUSH
11689: LD_STRING Popov
11691: PPUSH
11692: CALL_OW 38
// savecharacters ( gaydar , Gaydar ) ;
11696: LD_EXP 102
11700: PPUSH
11701: LD_STRING Gaydar
11703: PPUSH
11704: CALL_OW 38
// savecharacters ( yashin , Yashin ) ;
11708: LD_EXP 103
11712: PPUSH
11713: LD_STRING Yashin
11715: PPUSH
11716: CALL_OW 38
// savecharacters ( titov , Titov ) ;
11720: LD_EXP 104
11724: PPUSH
11725: LD_STRING Titov
11727: PPUSH
11728: CALL_OW 38
// savecharacters ( belkov , Belkov ) ;
11732: LD_EXP 105
11736: PPUSH
11737: LD_STRING Belkov
11739: PPUSH
11740: CALL_OW 38
// savecharacters ( kuzmov , Kuzmov ) ;
11744: LD_EXP 106
11748: PPUSH
11749: LD_STRING Kuzmov
11751: PPUSH
11752: CALL_OW 38
// savecharacters ( gnyevko , Gnyevko ) ;
11756: LD_EXP 107
11760: PPUSH
11761: LD_STRING Gnyevko
11763: PPUSH
11764: CALL_OW 38
// savecharacters ( kozlov , Kozlov ) ;
11768: LD_EXP 108
11772: PPUSH
11773: LD_STRING Kozlov
11775: PPUSH
11776: CALL_OW 38
// savecharacters ( furmanov , Furmanov ) ;
11780: LD_EXP 109
11784: PPUSH
11785: LD_STRING Furmanov
11787: PPUSH
11788: CALL_OW 38
// savecharacters ( kiril , Kirilenkova ) ;
11792: LD_EXP 110
11796: PPUSH
11797: LD_STRING Kirilenkova
11799: PPUSH
11800: CALL_OW 38
// savecharacters ( kapitsova , Kapitsova ) ;
11804: LD_EXP 111
11808: PPUSH
11809: LD_STRING Kapitsova
11811: PPUSH
11812: CALL_OW 38
// savecharacters ( petrosyan , Petrosyan ) ;
11816: LD_EXP 112
11820: PPUSH
11821: LD_STRING Petrosyan
11823: PPUSH
11824: CALL_OW 38
// savecharacters ( scholtze , Scholtze ) ;
11828: LD_EXP 113
11832: PPUSH
11833: LD_STRING Scholtze
11835: PPUSH
11836: CALL_OW 38
// savecharacters ( dolgov , Dolgov ) ;
11840: LD_EXP 114
11844: PPUSH
11845: LD_STRING Dolgov
11847: PPUSH
11848: CALL_OW 38
// savecharacters ( kovalyuk , Kovalyuk ) ;
11852: LD_EXP 115
11856: PPUSH
11857: LD_STRING Kovalyuk
11859: PPUSH
11860: CALL_OW 38
// savecharacters ( karamazov , Karamazov ) ;
11864: LD_EXP 116
11868: PPUSH
11869: LD_STRING Karamazov
11871: PPUSH
11872: CALL_OW 38
// savecharacters ( petrovova , Petrovova ) ;
11876: LD_EXP 117
11880: PPUSH
11881: LD_STRING Petrovova
11883: PPUSH
11884: CALL_OW 38
// savecharacters ( oblukov , Oblukov ) ;
11888: LD_EXP 118
11892: PPUSH
11893: LD_STRING Oblukov
11895: PPUSH
11896: CALL_OW 38
// tmp = filterallunits ( [ [ f_alive ] , [ f_side , ru ] , [ f_type , unit_human ] ] ) ;
11900: LD_ADDR_VAR 0 2
11904: PUSH
11905: LD_INT 51
11907: PUSH
11908: EMPTY
11909: LIST
11910: PUSH
11911: LD_INT 22
11913: PUSH
11914: LD_EXP 1
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: PUSH
11923: LD_INT 21
11925: PUSH
11926: LD_INT 1
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: LIST
11937: PPUSH
11938: CALL_OW 69
11942: ST_TO_ADDR
// savecharacters ( tmp diff [ burlak , vsevol , popov , gaydar , yashin , titov , belkov , kuzmov , gnyevko , kozlov , furmanov , kiril , kapitsova , petrosyan , scholtze , dolgov , kovalyuk , karamazov , petrovova , oblukov ] , survivors3 ) ;
11943: LD_VAR 0 2
11947: PUSH
11948: LD_EXP 119
11952: PUSH
11953: LD_EXP 100
11957: PUSH
11958: LD_EXP 101
11962: PUSH
11963: LD_EXP 102
11967: PUSH
11968: LD_EXP 103
11972: PUSH
11973: LD_EXP 104
11977: PUSH
11978: LD_EXP 105
11982: PUSH
11983: LD_EXP 106
11987: PUSH
11988: LD_EXP 107
11992: PUSH
11993: LD_EXP 108
11997: PUSH
11998: LD_EXP 109
12002: PUSH
12003: LD_EXP 110
12007: PUSH
12008: LD_EXP 111
12012: PUSH
12013: LD_EXP 112
12017: PUSH
12018: LD_EXP 113
12022: PUSH
12023: LD_EXP 114
12027: PUSH
12028: LD_EXP 115
12032: PUSH
12033: LD_EXP 116
12037: PUSH
12038: LD_EXP 117
12042: PUSH
12043: LD_EXP 118
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: DIFF
12070: PPUSH
12071: LD_STRING survivors3
12073: PPUSH
12074: CALL_OW 38
// end ;
12078: LD_VAR 0 1
12082: RET
// export function prepare_americans ; var tmp ; begin
12083: LD_INT 0
12085: PPUSH
12086: PPUSH
// uc_side = am ;
12087: LD_ADDR_OWVAR 20
12091: PUSH
12092: LD_EXP 3
12096: ST_TO_ADDR
// uc_nation = nation_american ;
12097: LD_ADDR_OWVAR 21
12101: PUSH
12102: LD_INT 1
12104: ST_TO_ADDR
// preparesoldier ( sex_male , ams0_sk ) ;
12105: LD_INT 1
12107: PPUSH
12108: LD_EXP 17
12112: PPUSH
12113: CALL_OW 381
// tmp = createhuman ;
12117: LD_ADDR_VAR 0 2
12121: PUSH
12122: CALL_OW 44
12126: ST_TO_ADDR
// placeunitxyr ( tmp , 34 , 38 , 1 , false ) ;
12127: LD_VAR 0 2
12131: PPUSH
12132: LD_INT 34
12134: PPUSH
12135: LD_INT 38
12137: PPUSH
12138: LD_INT 1
12140: PPUSH
12141: LD_INT 0
12143: PPUSH
12144: CALL_OW 50
// comenterunit ( tmp , ambunk0 ) ;
12148: LD_VAR 0 2
12152: PPUSH
12153: LD_INT 1
12155: PPUSH
12156: CALL_OW 120
// ams0 = tmp ;
12160: LD_ADDR_EXP 4
12164: PUSH
12165: LD_VAR 0 2
12169: ST_TO_ADDR
// preparesoldier ( sex_male , ams1_sk ) ;
12170: LD_INT 1
12172: PPUSH
12173: LD_EXP 18
12177: PPUSH
12178: CALL_OW 381
// tmp = createhuman ;
12182: LD_ADDR_VAR 0 2
12186: PUSH
12187: CALL_OW 44
12191: ST_TO_ADDR
// placeunitxyr ( tmp , 54 , 46 , 1 , false ) ;
12192: LD_VAR 0 2
12196: PPUSH
12197: LD_INT 54
12199: PPUSH
12200: LD_INT 46
12202: PPUSH
12203: LD_INT 1
12205: PPUSH
12206: LD_INT 0
12208: PPUSH
12209: CALL_OW 50
// comenterunit ( tmp , ambunk1 ) ;
12213: LD_VAR 0 2
12217: PPUSH
12218: LD_INT 5
12220: PPUSH
12221: CALL_OW 120
// ams1 = tmp ;
12225: LD_ADDR_EXP 5
12229: PUSH
12230: LD_VAR 0 2
12234: ST_TO_ADDR
// preparesoldier ( sex_male , ams2_sk ) ;
12235: LD_INT 1
12237: PPUSH
12238: LD_EXP 19
12242: PPUSH
12243: CALL_OW 381
// tmp = createhuman ;
12247: LD_ADDR_VAR 0 2
12251: PUSH
12252: CALL_OW 44
12256: ST_TO_ADDR
// placeunitxyr ( tmp , 58 , 47 , 1 , false ) ;
12257: LD_VAR 0 2
12261: PPUSH
12262: LD_INT 58
12264: PPUSH
12265: LD_INT 47
12267: PPUSH
12268: LD_INT 1
12270: PPUSH
12271: LD_INT 0
12273: PPUSH
12274: CALL_OW 50
// comenterunit ( tmp , ambunk2 ) ;
12278: LD_VAR 0 2
12282: PPUSH
12283: LD_INT 15
12285: PPUSH
12286: CALL_OW 120
// ams2 = tmp ;
12290: LD_ADDR_EXP 6
12294: PUSH
12295: LD_VAR 0 2
12299: ST_TO_ADDR
// preparesoldier ( sex_male , ams3_sk ) ;
12300: LD_INT 1
12302: PPUSH
12303: LD_EXP 20
12307: PPUSH
12308: CALL_OW 381
// tmp = createhuman ;
12312: LD_ADDR_VAR 0 2
12316: PUSH
12317: CALL_OW 44
12321: ST_TO_ADDR
// placeunitxyr ( tmp , 62 , 48 , 1 , false ) ;
12322: LD_VAR 0 2
12326: PPUSH
12327: LD_INT 62
12329: PPUSH
12330: LD_INT 48
12332: PPUSH
12333: LD_INT 1
12335: PPUSH
12336: LD_INT 0
12338: PPUSH
12339: CALL_OW 50
// comenterunit ( tmp , ambunk3 ) ;
12343: LD_VAR 0 2
12347: PPUSH
12348: LD_INT 14
12350: PPUSH
12351: CALL_OW 120
// ams3 = tmp ;
12355: LD_ADDR_EXP 7
12359: PUSH
12360: LD_VAR 0 2
12364: ST_TO_ADDR
// preparesoldier ( sex_male , ams4_sk ) ;
12365: LD_INT 1
12367: PPUSH
12368: LD_EXP 21
12372: PPUSH
12373: CALL_OW 381
// tmp = createhuman ;
12377: LD_ADDR_VAR 0 2
12381: PUSH
12382: CALL_OW 44
12386: ST_TO_ADDR
// placeunitxyr ( tmp , 60 , 44 , 1 , false ) ;
12387: LD_VAR 0 2
12391: PPUSH
12392: LD_INT 60
12394: PPUSH
12395: LD_INT 44
12397: PPUSH
12398: LD_INT 1
12400: PPUSH
12401: LD_INT 0
12403: PPUSH
12404: CALL_OW 50
// comenterunit ( tmp , ambunk4 ) ;
12408: LD_VAR 0 2
12412: PPUSH
12413: LD_INT 6
12415: PPUSH
12416: CALL_OW 120
// ams4 = tmp ;
12420: LD_ADDR_EXP 8
12424: PUSH
12425: LD_VAR 0 2
12429: ST_TO_ADDR
// preparesoldier ( sex_male , ams5_sk ) ;
12430: LD_INT 1
12432: PPUSH
12433: LD_EXP 22
12437: PPUSH
12438: CALL_OW 381
// tmp = createhuman ;
12442: LD_ADDR_VAR 0 2
12446: PUSH
12447: CALL_OW 44
12451: ST_TO_ADDR
// placeunitxyr ( tmp , 83 , 50 , 1 , false ) ;
12452: LD_VAR 0 2
12456: PPUSH
12457: LD_INT 83
12459: PPUSH
12460: LD_INT 50
12462: PPUSH
12463: LD_INT 1
12465: PPUSH
12466: LD_INT 0
12468: PPUSH
12469: CALL_OW 50
// comenterunit ( tmp , ambunk5 ) ;
12473: LD_VAR 0 2
12477: PPUSH
12478: LD_INT 7
12480: PPUSH
12481: CALL_OW 120
// ams5 = tmp ;
12485: LD_ADDR_EXP 9
12489: PUSH
12490: LD_VAR 0 2
12494: ST_TO_ADDR
// preparesoldier ( sex_male , ams6_sk ) ;
12495: LD_INT 1
12497: PPUSH
12498: LD_EXP 23
12502: PPUSH
12503: CALL_OW 381
// tmp = createhuman ;
12507: LD_ADDR_VAR 0 2
12511: PUSH
12512: CALL_OW 44
12516: ST_TO_ADDR
// placeunitxyr ( tmp , 83 , 47 , 1 , false ) ;
12517: LD_VAR 0 2
12521: PPUSH
12522: LD_INT 83
12524: PPUSH
12525: LD_INT 47
12527: PPUSH
12528: LD_INT 1
12530: PPUSH
12531: LD_INT 0
12533: PPUSH
12534: CALL_OW 50
// comenterunit ( tmp , ambunk6 ) ;
12538: LD_VAR 0 2
12542: PPUSH
12543: LD_INT 13
12545: PPUSH
12546: CALL_OW 120
// ams6 = tmp ;
12550: LD_ADDR_EXP 10
12554: PUSH
12555: LD_VAR 0 2
12559: ST_TO_ADDR
// preparesoldier ( sex_male , ams7_sk ) ;
12560: LD_INT 1
12562: PPUSH
12563: LD_EXP 24
12567: PPUSH
12568: CALL_OW 381
// tmp = createhuman ;
12572: LD_ADDR_VAR 0 2
12576: PUSH
12577: CALL_OW 44
12581: ST_TO_ADDR
// placeunitxyr ( tmp , 100 , 47 , 1 , false ) ;
12582: LD_VAR 0 2
12586: PPUSH
12587: LD_INT 100
12589: PPUSH
12590: LD_INT 47
12592: PPUSH
12593: LD_INT 1
12595: PPUSH
12596: LD_INT 0
12598: PPUSH
12599: CALL_OW 50
// comenterunit ( tmp , ambunk7 ) ;
12603: LD_VAR 0 2
12607: PPUSH
12608: LD_INT 8
12610: PPUSH
12611: CALL_OW 120
// ams7 = tmp ;
12615: LD_ADDR_EXP 11
12619: PUSH
12620: LD_VAR 0 2
12624: ST_TO_ADDR
// preparesoldier ( sex_male , ams8_sk ) ;
12625: LD_INT 1
12627: PPUSH
12628: LD_EXP 25
12632: PPUSH
12633: CALL_OW 381
// tmp = createhuman ;
12637: LD_ADDR_VAR 0 2
12641: PUSH
12642: CALL_OW 44
12646: ST_TO_ADDR
// placeunitxyr ( tmp , 96 , 30 , 1 , false ) ;
12647: LD_VAR 0 2
12651: PPUSH
12652: LD_INT 96
12654: PPUSH
12655: LD_INT 30
12657: PPUSH
12658: LD_INT 1
12660: PPUSH
12661: LD_INT 0
12663: PPUSH
12664: CALL_OW 50
// comenterunit ( tmp , ambunk8 ) ;
12668: LD_VAR 0 2
12672: PPUSH
12673: LD_INT 9
12675: PPUSH
12676: CALL_OW 120
// ams8 = tmp ;
12680: LD_ADDR_EXP 12
12684: PUSH
12685: LD_VAR 0 2
12689: ST_TO_ADDR
// preparesoldier ( sex_male , ams9_sk ) ;
12690: LD_INT 1
12692: PPUSH
12693: LD_EXP 26
12697: PPUSH
12698: CALL_OW 381
// tmp = createhuman ;
12702: LD_ADDR_VAR 0 2
12706: PUSH
12707: CALL_OW 44
12711: ST_TO_ADDR
// placeunitxyr ( tmp , 94 , 30 , 1 , false ) ;
12712: LD_VAR 0 2
12716: PPUSH
12717: LD_INT 94
12719: PPUSH
12720: LD_INT 30
12722: PPUSH
12723: LD_INT 1
12725: PPUSH
12726: LD_INT 0
12728: PPUSH
12729: CALL_OW 50
// comenterunit ( tmp , ambunk9 ) ;
12733: LD_VAR 0 2
12737: PPUSH
12738: LD_INT 17
12740: PPUSH
12741: CALL_OW 120
// ams9 = tmp ;
12745: LD_ADDR_EXP 13
12749: PUSH
12750: LD_VAR 0 2
12754: ST_TO_ADDR
// preparesoldier ( sex_male , amsa_sk ) ;
12755: LD_INT 1
12757: PPUSH
12758: LD_EXP 27
12762: PPUSH
12763: CALL_OW 381
// tmp = createhuman ;
12767: LD_ADDR_VAR 0 2
12771: PUSH
12772: CALL_OW 44
12776: ST_TO_ADDR
// placeunitxyr ( tmp , 84 , 17 , 1 , false ) ;
12777: LD_VAR 0 2
12781: PPUSH
12782: LD_INT 84
12784: PPUSH
12785: LD_INT 17
12787: PPUSH
12788: LD_INT 1
12790: PPUSH
12791: LD_INT 0
12793: PPUSH
12794: CALL_OW 50
// comenterunit ( tmp , ambunka ) ;
12798: LD_VAR 0 2
12802: PPUSH
12803: LD_INT 12
12805: PPUSH
12806: CALL_OW 120
// amsa = tmp ;
12810: LD_ADDR_EXP 14
12814: PUSH
12815: LD_VAR 0 2
12819: ST_TO_ADDR
// preparesoldier ( sex_male , amsb_sk ) ;
12820: LD_INT 1
12822: PPUSH
12823: LD_EXP 28
12827: PPUSH
12828: CALL_OW 381
// tmp = createhuman ;
12832: LD_ADDR_VAR 0 2
12836: PUSH
12837: CALL_OW 44
12841: ST_TO_ADDR
// placeunitxyr ( tmp , 91 , 10 , 1 , false ) ;
12842: LD_VAR 0 2
12846: PPUSH
12847: LD_INT 91
12849: PPUSH
12850: LD_INT 10
12852: PPUSH
12853: LD_INT 1
12855: PPUSH
12856: LD_INT 0
12858: PPUSH
12859: CALL_OW 50
// comenterunit ( tmp , ambunkb ) ;
12863: LD_VAR 0 2
12867: PPUSH
12868: LD_INT 11
12870: PPUSH
12871: CALL_OW 120
// amsb = tmp ;
12875: LD_ADDR_EXP 15
12879: PUSH
12880: LD_VAR 0 2
12884: ST_TO_ADDR
// preparesoldier ( sex_male , amsc_sk ) ;
12885: LD_INT 1
12887: PPUSH
12888: LD_EXP 29
12892: PPUSH
12893: CALL_OW 381
// tmp = createhuman ;
12897: LD_ADDR_VAR 0 2
12901: PUSH
12902: CALL_OW 44
12906: ST_TO_ADDR
// placeunitxyr ( tmp , 95 , 9 , 1 , false ) ;
12907: LD_VAR 0 2
12911: PPUSH
12912: LD_INT 95
12914: PPUSH
12915: LD_INT 9
12917: PPUSH
12918: LD_INT 1
12920: PPUSH
12921: LD_INT 0
12923: PPUSH
12924: CALL_OW 50
// comenterunit ( tmp , ambunkc ) ;
12928: LD_VAR 0 2
12932: PPUSH
12933: LD_INT 10
12935: PPUSH
12936: CALL_OW 120
// amsc = tmp ;
12940: LD_ADDR_EXP 16
12944: PUSH
12945: LD_VAR 0 2
12949: ST_TO_ADDR
// preparesoldier ( sex_male , ams_1_sk ) ;
12950: LD_INT 1
12952: PPUSH
12953: LD_EXP 36
12957: PPUSH
12958: CALL_OW 381
// tmp = createhuman ;
12962: LD_ADDR_VAR 0 2
12966: PUSH
12967: CALL_OW 44
12971: ST_TO_ADDR
// placeunitxyr ( tmp , 69 , 33 , 1 , false ) ;
12972: LD_VAR 0 2
12976: PPUSH
12977: LD_INT 69
12979: PPUSH
12980: LD_INT 33
12982: PPUSH
12983: LD_INT 1
12985: PPUSH
12986: LD_INT 0
12988: PPUSH
12989: CALL_OW 50
// comenterunit ( tmp , ambarr ) ;
12993: LD_VAR 0 2
12997: PPUSH
12998: LD_INT 26
13000: PPUSH
13001: CALL_OW 120
// ams_1 = tmp ;
13005: LD_ADDR_EXP 30
13009: PUSH
13010: LD_VAR 0 2
13014: ST_TO_ADDR
// preparesoldier ( sex_male , ams_2_sk ) ;
13015: LD_INT 1
13017: PPUSH
13018: LD_EXP 37
13022: PPUSH
13023: CALL_OW 381
// tmp = createhuman ;
13027: LD_ADDR_VAR 0 2
13031: PUSH
13032: CALL_OW 44
13036: ST_TO_ADDR
// placeunitxyr ( tmp , 69 , 33 , 1 , false ) ;
13037: LD_VAR 0 2
13041: PPUSH
13042: LD_INT 69
13044: PPUSH
13045: LD_INT 33
13047: PPUSH
13048: LD_INT 1
13050: PPUSH
13051: LD_INT 0
13053: PPUSH
13054: CALL_OW 50
// comenterunit ( tmp , ambarr ) ;
13058: LD_VAR 0 2
13062: PPUSH
13063: LD_INT 26
13065: PPUSH
13066: CALL_OW 120
// ams_2 = tmp ;
13070: LD_ADDR_EXP 31
13074: PUSH
13075: LD_VAR 0 2
13079: ST_TO_ADDR
// preparesoldier ( sex_male , ams_3_sk ) ;
13080: LD_INT 1
13082: PPUSH
13083: LD_EXP 38
13087: PPUSH
13088: CALL_OW 381
// tmp = createhuman ;
13092: LD_ADDR_VAR 0 2
13096: PUSH
13097: CALL_OW 44
13101: ST_TO_ADDR
// placeunitxyr ( tmp , 69 , 33 , 1 , false ) ;
13102: LD_VAR 0 2
13106: PPUSH
13107: LD_INT 69
13109: PPUSH
13110: LD_INT 33
13112: PPUSH
13113: LD_INT 1
13115: PPUSH
13116: LD_INT 0
13118: PPUSH
13119: CALL_OW 50
// comenterunit ( tmp , ambarr ) ;
13123: LD_VAR 0 2
13127: PPUSH
13128: LD_INT 26
13130: PPUSH
13131: CALL_OW 120
// ams_3 = tmp ;
13135: LD_ADDR_EXP 32
13139: PUSH
13140: LD_VAR 0 2
13144: ST_TO_ADDR
// preparesoldier ( sex_male , ams_4_sk ) ;
13145: LD_INT 1
13147: PPUSH
13148: LD_EXP 39
13152: PPUSH
13153: CALL_OW 381
// tmp = createhuman ;
13157: LD_ADDR_VAR 0 2
13161: PUSH
13162: CALL_OW 44
13166: ST_TO_ADDR
// placeunitxyr ( tmp , 69 , 33 , 1 , false ) ;
13167: LD_VAR 0 2
13171: PPUSH
13172: LD_INT 69
13174: PPUSH
13175: LD_INT 33
13177: PPUSH
13178: LD_INT 1
13180: PPUSH
13181: LD_INT 0
13183: PPUSH
13184: CALL_OW 50
// comenterunit ( tmp , ambarr ) ;
13188: LD_VAR 0 2
13192: PPUSH
13193: LD_INT 26
13195: PPUSH
13196: CALL_OW 120
// ams_4 = tmp ;
13200: LD_ADDR_EXP 33
13204: PUSH
13205: LD_VAR 0 2
13209: ST_TO_ADDR
// preparesoldier ( sex_male , ams_5_sk ) ;
13210: LD_INT 1
13212: PPUSH
13213: LD_EXP 40
13217: PPUSH
13218: CALL_OW 381
// tmp = createhuman ;
13222: LD_ADDR_VAR 0 2
13226: PUSH
13227: CALL_OW 44
13231: ST_TO_ADDR
// placeunitxyr ( tmp , 69 , 33 , 1 , false ) ;
13232: LD_VAR 0 2
13236: PPUSH
13237: LD_INT 69
13239: PPUSH
13240: LD_INT 33
13242: PPUSH
13243: LD_INT 1
13245: PPUSH
13246: LD_INT 0
13248: PPUSH
13249: CALL_OW 50
// comenterunit ( tmp , ambarr ) ;
13253: LD_VAR 0 2
13257: PPUSH
13258: LD_INT 26
13260: PPUSH
13261: CALL_OW 120
// ams_5 = tmp ;
13265: LD_ADDR_EXP 34
13269: PUSH
13270: LD_VAR 0 2
13274: ST_TO_ADDR
// preparesoldier ( sex_male , ams_6_sk ) ;
13275: LD_INT 1
13277: PPUSH
13278: LD_EXP 41
13282: PPUSH
13283: CALL_OW 381
// tmp = createhuman ;
13287: LD_ADDR_VAR 0 2
13291: PUSH
13292: CALL_OW 44
13296: ST_TO_ADDR
// placeunitxyr ( tmp , 69 , 33 , 1 , false ) ;
13297: LD_VAR 0 2
13301: PPUSH
13302: LD_INT 69
13304: PPUSH
13305: LD_INT 33
13307: PPUSH
13308: LD_INT 1
13310: PPUSH
13311: LD_INT 0
13313: PPUSH
13314: CALL_OW 50
// comenterunit ( tmp , ambarr ) ;
13318: LD_VAR 0 2
13322: PPUSH
13323: LD_INT 26
13325: PPUSH
13326: CALL_OW 120
// ams_6 = tmp ;
13330: LD_ADDR_EXP 35
13334: PUSH
13335: LD_VAR 0 2
13339: ST_TO_ADDR
// preparemechanic ( sex_female , amm0_sk ) ;
13340: LD_INT 2
13342: PPUSH
13343: LD_EXP 43
13347: PPUSH
13348: CALL_OW 383
// amm0 = createhuman ;
13352: LD_ADDR_EXP 42
13356: PUSH
13357: CALL_OW 44
13361: ST_TO_ADDR
// placeunitxyr ( amm0 , 45 , 15 , 1 , false ) ;
13362: LD_EXP 42
13366: PPUSH
13367: LD_INT 45
13369: PPUSH
13370: LD_INT 15
13372: PPUSH
13373: LD_INT 1
13375: PPUSH
13376: LD_INT 0
13378: PPUSH
13379: CALL_OW 50
// comenterunit ( amm0 , amcntltwr ) ;
13383: LD_EXP 42
13387: PPUSH
13388: LD_INT 30
13390: PPUSH
13391: CALL_OW 120
// vc_control = control_manual ;
13395: LD_ADDR_OWVAR 38
13399: PUSH
13400: LD_INT 1
13402: ST_TO_ADDR
// vc_engine = engine_siberite ;
13403: LD_ADDR_OWVAR 39
13407: PUSH
13408: LD_INT 3
13410: ST_TO_ADDR
// vc_chassis = amv1_ch ;
13411: LD_ADDR_OWVAR 37
13415: PUSH
13416: LD_EXP 59
13420: ST_TO_ADDR
// vc_weapon = amv1_wp ;
13421: LD_ADDR_OWVAR 40
13425: PUSH
13426: LD_EXP 60
13430: ST_TO_ADDR
// amv1 = createvehicle ;
13431: LD_ADDR_EXP 58
13435: PUSH
13436: CALL_OW 45
13440: ST_TO_ADDR
// setdir ( amv1 , 2 ) ;
13441: LD_EXP 58
13445: PPUSH
13446: LD_INT 2
13448: PPUSH
13449: CALL_OW 233
// placeunitxy ( amv1 , 61 , 32 , false ) ;
13453: LD_EXP 58
13457: PPUSH
13458: LD_INT 61
13460: PPUSH
13461: LD_INT 32
13463: PPUSH
13464: LD_INT 0
13466: PPUSH
13467: CALL_OW 48
// preparemechanic ( sex_male , amm1_sk ) ;
13471: LD_INT 1
13473: PPUSH
13474: LD_EXP 45
13478: PPUSH
13479: CALL_OW 383
// amm1 = createhuman ;
13483: LD_ADDR_EXP 44
13487: PUSH
13488: CALL_OW 44
13492: ST_TO_ADDR
// placehumaninunit ( amm1 , amv1 ) ;
13493: LD_EXP 44
13497: PPUSH
13498: LD_EXP 58
13502: PPUSH
13503: CALL_OW 52
// vc_chassis = amv2_ch ;
13507: LD_ADDR_OWVAR 37
13511: PUSH
13512: LD_EXP 62
13516: ST_TO_ADDR
// vc_weapon = amv2_wp ;
13517: LD_ADDR_OWVAR 40
13521: PUSH
13522: LD_EXP 63
13526: ST_TO_ADDR
// amv2 = createvehicle ;
13527: LD_ADDR_EXP 61
13531: PUSH
13532: CALL_OW 45
13536: ST_TO_ADDR
// setdir ( amv2 , 3 ) ;
13537: LD_EXP 61
13541: PPUSH
13542: LD_INT 3
13544: PPUSH
13545: CALL_OW 233
// placeunitxy ( amv2 , 75 , 34 , false ) ;
13549: LD_EXP 61
13553: PPUSH
13554: LD_INT 75
13556: PPUSH
13557: LD_INT 34
13559: PPUSH
13560: LD_INT 0
13562: PPUSH
13563: CALL_OW 48
// preparemechanic ( sex_male , amm2_sk ) ;
13567: LD_INT 1
13569: PPUSH
13570: LD_EXP 47
13574: PPUSH
13575: CALL_OW 383
// amm2 = createhuman ;
13579: LD_ADDR_EXP 46
13583: PUSH
13584: CALL_OW 44
13588: ST_TO_ADDR
// placehumaninunit ( amm2 , amv2 ) ;
13589: LD_EXP 46
13593: PPUSH
13594: LD_EXP 61
13598: PPUSH
13599: CALL_OW 52
// vc_chassis = amv3_ch ;
13603: LD_ADDR_OWVAR 37
13607: PUSH
13608: LD_EXP 65
13612: ST_TO_ADDR
// vc_weapon = amv3_wp ;
13613: LD_ADDR_OWVAR 40
13617: PUSH
13618: LD_EXP 66
13622: ST_TO_ADDR
// amv3 = createvehicle ;
13623: LD_ADDR_EXP 64
13627: PUSH
13628: CALL_OW 45
13632: ST_TO_ADDR
// setdir ( amv3 , 2 ) ;
13633: LD_EXP 64
13637: PPUSH
13638: LD_INT 2
13640: PPUSH
13641: CALL_OW 233
// placeunitxy ( amv3 , 38 , 31 , false ) ;
13645: LD_EXP 64
13649: PPUSH
13650: LD_INT 38
13652: PPUSH
13653: LD_INT 31
13655: PPUSH
13656: LD_INT 0
13658: PPUSH
13659: CALL_OW 48
// preparemechanic ( sex_male , amm3_sk ) ;
13663: LD_INT 1
13665: PPUSH
13666: LD_EXP 49
13670: PPUSH
13671: CALL_OW 383
// amm3 = createhuman ;
13675: LD_ADDR_EXP 48
13679: PUSH
13680: CALL_OW 44
13684: ST_TO_ADDR
// placehumaninunit ( amm3 , amv3 ) ;
13685: LD_EXP 48
13689: PPUSH
13690: LD_EXP 64
13694: PPUSH
13695: CALL_OW 52
// vc_chassis = amv4_ch ;
13699: LD_ADDR_OWVAR 37
13703: PUSH
13704: LD_EXP 68
13708: ST_TO_ADDR
// vc_weapon = amv4_wp ;
13709: LD_ADDR_OWVAR 40
13713: PUSH
13714: LD_EXP 69
13718: ST_TO_ADDR
// amv4 = createvehicle ;
13719: LD_ADDR_EXP 67
13723: PUSH
13724: CALL_OW 45
13728: ST_TO_ADDR
// setdir ( amv4 , 3 ) ;
13729: LD_EXP 67
13733: PPUSH
13734: LD_INT 3
13736: PPUSH
13737: CALL_OW 233
// placeunitxy ( amv4 , 47 , 35 , false ) ;
13741: LD_EXP 67
13745: PPUSH
13746: LD_INT 47
13748: PPUSH
13749: LD_INT 35
13751: PPUSH
13752: LD_INT 0
13754: PPUSH
13755: CALL_OW 48
// preparemechanic ( sex_male , amm4_sk ) ;
13759: LD_INT 1
13761: PPUSH
13762: LD_EXP 51
13766: PPUSH
13767: CALL_OW 383
// amm4 = createhuman ;
13771: LD_ADDR_EXP 50
13775: PUSH
13776: CALL_OW 44
13780: ST_TO_ADDR
// placehumaninunit ( amm4 , amv4 ) ;
13781: LD_EXP 50
13785: PPUSH
13786: LD_EXP 67
13790: PPUSH
13791: CALL_OW 52
// vc_chassis = amv5_ch ;
13795: LD_ADDR_OWVAR 37
13799: PUSH
13800: LD_EXP 71
13804: ST_TO_ADDR
// vc_weapon = amv5_wp ;
13805: LD_ADDR_OWVAR 40
13809: PUSH
13810: LD_EXP 72
13814: ST_TO_ADDR
// amv5 = createvehicle ;
13815: LD_ADDR_EXP 70
13819: PUSH
13820: CALL_OW 45
13824: ST_TO_ADDR
// setdir ( amv5 , 1 ) ;
13825: LD_EXP 70
13829: PPUSH
13830: LD_INT 1
13832: PPUSH
13833: CALL_OW 233
// placeunitxy ( amv5 , 83 , 23 , false ) ;
13837: LD_EXP 70
13841: PPUSH
13842: LD_INT 83
13844: PPUSH
13845: LD_INT 23
13847: PPUSH
13848: LD_INT 0
13850: PPUSH
13851: CALL_OW 48
// preparemechanic ( sex_male , amm5_sk ) ;
13855: LD_INT 1
13857: PPUSH
13858: LD_EXP 53
13862: PPUSH
13863: CALL_OW 383
// amm5 = createhuman ;
13867: LD_ADDR_EXP 52
13871: PUSH
13872: CALL_OW 44
13876: ST_TO_ADDR
// placehumaninunit ( amm5 , amv5 ) ;
13877: LD_EXP 52
13881: PPUSH
13882: LD_EXP 70
13886: PPUSH
13887: CALL_OW 52
// vc_chassis = amv6_ch ;
13891: LD_ADDR_OWVAR 37
13895: PUSH
13896: LD_EXP 74
13900: ST_TO_ADDR
// vc_weapon = amv6_wp ;
13901: LD_ADDR_OWVAR 40
13905: PUSH
13906: LD_EXP 75
13910: ST_TO_ADDR
// amv6 = createvehicle ;
13911: LD_ADDR_EXP 73
13915: PUSH
13916: CALL_OW 45
13920: ST_TO_ADDR
// setdir ( amv6 , 2 ) ;
13921: LD_EXP 73
13925: PPUSH
13926: LD_INT 2
13928: PPUSH
13929: CALL_OW 233
// placeunitxy ( amv6 , 80 , 8 , false ) ;
13933: LD_EXP 73
13937: PPUSH
13938: LD_INT 80
13940: PPUSH
13941: LD_INT 8
13943: PPUSH
13944: LD_INT 0
13946: PPUSH
13947: CALL_OW 48
// preparemechanic ( sex_male , amm6_sk ) ;
13951: LD_INT 1
13953: PPUSH
13954: LD_EXP 55
13958: PPUSH
13959: CALL_OW 383
// amm6 = createhuman ;
13963: LD_ADDR_EXP 54
13967: PUSH
13968: CALL_OW 44
13972: ST_TO_ADDR
// placehumaninunit ( amm6 , amv6 ) ;
13973: LD_EXP 54
13977: PPUSH
13978: LD_EXP 73
13982: PPUSH
13983: CALL_OW 52
// vc_chassis = amv7_ch ;
13987: LD_ADDR_OWVAR 37
13991: PUSH
13992: LD_EXP 77
13996: ST_TO_ADDR
// vc_weapon = amv7_wp ;
13997: LD_ADDR_OWVAR 40
14001: PUSH
14002: LD_EXP 78
14006: ST_TO_ADDR
// amv7 = createvehicle ;
14007: LD_ADDR_EXP 76
14011: PUSH
14012: CALL_OW 45
14016: ST_TO_ADDR
// setdir ( amv7 , 3 ) ;
14017: LD_EXP 76
14021: PPUSH
14022: LD_INT 3
14024: PPUSH
14025: CALL_OW 233
// placeunitxy ( amv7 , 43 , 31 , false ) ;
14029: LD_EXP 76
14033: PPUSH
14034: LD_INT 43
14036: PPUSH
14037: LD_INT 31
14039: PPUSH
14040: LD_INT 0
14042: PPUSH
14043: CALL_OW 48
// preparemechanic ( sex_male , amm7_sk ) ;
14047: LD_INT 1
14049: PPUSH
14050: LD_EXP 57
14054: PPUSH
14055: CALL_OW 383
// amm7 = createhuman ;
14059: LD_ADDR_EXP 56
14063: PUSH
14064: CALL_OW 44
14068: ST_TO_ADDR
// placehumaninunit ( amm7 , amv7 ) ;
14069: LD_EXP 56
14073: PPUSH
14074: LD_EXP 76
14078: PPUSH
14079: CALL_OW 52
// preparehuman ( sex_male , class_sniper , amsn0_sk ) ;
14083: LD_INT 1
14085: PPUSH
14086: LD_INT 5
14088: PPUSH
14089: LD_EXP 80
14093: PPUSH
14094: CALL_OW 380
// amsn0 = createhuman ;
14098: LD_ADDR_EXP 79
14102: PUSH
14103: CALL_OW 44
14107: ST_TO_ADDR
// placeunitxyr ( amsn0 , 99 , 40 , 1 , false ) ;
14108: LD_EXP 79
14112: PPUSH
14113: LD_INT 99
14115: PPUSH
14116: LD_INT 40
14118: PPUSH
14119: LD_INT 1
14121: PPUSH
14122: LD_INT 0
14124: PPUSH
14125: CALL_OW 50
// comhold ( amsn0 ) ;
14129: LD_EXP 79
14133: PPUSH
14134: CALL_OW 140
// preparehuman ( sex_male , class_sniper , amsn1_sk ) ;
14138: LD_INT 1
14140: PPUSH
14141: LD_INT 5
14143: PPUSH
14144: LD_EXP 82
14148: PPUSH
14149: CALL_OW 380
// amsn1 = createhuman ;
14153: LD_ADDR_EXP 81
14157: PUSH
14158: CALL_OW 44
14162: ST_TO_ADDR
// placeunitxyr ( amsn1 , 94 , 11 , 1 , false ) ;
14163: LD_EXP 81
14167: PPUSH
14168: LD_INT 94
14170: PPUSH
14171: LD_INT 11
14173: PPUSH
14174: LD_INT 1
14176: PPUSH
14177: LD_INT 0
14179: PPUSH
14180: CALL_OW 50
// comhold ( amsn1 ) ;
14184: LD_EXP 81
14188: PPUSH
14189: CALL_OW 140
// prepareengineer ( sex_female , 7 ) ;
14193: LD_INT 2
14195: PPUSH
14196: LD_INT 7
14198: PPUSH
14199: CALL_OW 382
// tmp = createhuman ;
14203: LD_ADDR_VAR 0 2
14207: PUSH
14208: CALL_OW 44
14212: ST_TO_ADDR
// placeunitxyr ( tmp , 78 , 23 , 2 , false ) ;
14213: LD_VAR 0 2
14217: PPUSH
14218: LD_INT 78
14220: PPUSH
14221: LD_INT 23
14223: PPUSH
14224: LD_INT 2
14226: PPUSH
14227: LD_INT 0
14229: PPUSH
14230: CALL_OW 50
// comenterunit ( tmp , amwareh ) ;
14234: LD_VAR 0 2
14238: PPUSH
14239: LD_INT 3
14241: PPUSH
14242: CALL_OW 120
// prepareengineer ( sex_male , ame0_sk ) ;
14246: LD_INT 1
14248: PPUSH
14249: LD_EXP 84
14253: PPUSH
14254: CALL_OW 382
// ame0 = createhuman ;
14258: LD_ADDR_EXP 83
14262: PUSH
14263: CALL_OW 44
14267: ST_TO_ADDR
// placeunitxyr ( ame0 , 31 , 37 , 1 , false ) ;
14268: LD_EXP 83
14272: PPUSH
14273: LD_INT 31
14275: PPUSH
14276: LD_INT 37
14278: PPUSH
14279: LD_INT 1
14281: PPUSH
14282: LD_INT 0
14284: PPUSH
14285: CALL_OW 50
// comhold ( ame0 ) ;
14289: LD_EXP 83
14293: PPUSH
14294: CALL_OW 140
// prepareengineer ( sex_male , ame1_sk ) ;
14298: LD_INT 1
14300: PPUSH
14301: LD_EXP 86
14305: PPUSH
14306: CALL_OW 382
// ame1 = createhuman ;
14310: LD_ADDR_EXP 85
14314: PUSH
14315: CALL_OW 44
14319: ST_TO_ADDR
// placeunitxyr ( ame1 , 58 , 45 , 1 , false ) ;
14320: LD_EXP 85
14324: PPUSH
14325: LD_INT 58
14327: PPUSH
14328: LD_INT 45
14330: PPUSH
14331: LD_INT 1
14333: PPUSH
14334: LD_INT 0
14336: PPUSH
14337: CALL_OW 50
// comhold ( ame1 ) ;
14341: LD_EXP 85
14345: PPUSH
14346: CALL_OW 140
// prepareengineer ( sex_male , ame2_sk ) ;
14350: LD_INT 1
14352: PPUSH
14353: LD_EXP 88
14357: PPUSH
14358: CALL_OW 382
// ame2 = createhuman ;
14362: LD_ADDR_EXP 87
14366: PUSH
14367: CALL_OW 44
14371: ST_TO_ADDR
// placeunitxyr ( ame2 , 86 , 48 , 1 , false ) ;
14372: LD_EXP 87
14376: PPUSH
14377: LD_INT 86
14379: PPUSH
14380: LD_INT 48
14382: PPUSH
14383: LD_INT 1
14385: PPUSH
14386: LD_INT 0
14388: PPUSH
14389: CALL_OW 50
// comhold ( ame2 ) ;
14393: LD_EXP 87
14397: PPUSH
14398: CALL_OW 140
// prepareengineer ( sex_male , ame3_sk ) ;
14402: LD_INT 1
14404: PPUSH
14405: LD_EXP 90
14409: PPUSH
14410: CALL_OW 382
// ame3 = createhuman ;
14414: LD_ADDR_EXP 89
14418: PUSH
14419: CALL_OW 44
14423: ST_TO_ADDR
// placeunitxyr ( ame3 , 96 , 33 , 1 , false ) ;
14424: LD_EXP 89
14428: PPUSH
14429: LD_INT 96
14431: PPUSH
14432: LD_INT 33
14434: PPUSH
14435: LD_INT 1
14437: PPUSH
14438: LD_INT 0
14440: PPUSH
14441: CALL_OW 50
// comhold ( ame3 ) ;
14445: LD_EXP 89
14449: PPUSH
14450: CALL_OW 140
// prepareengineer ( sex_male , ame4_sk ) ;
14454: LD_INT 1
14456: PPUSH
14457: LD_EXP 92
14461: PPUSH
14462: CALL_OW 382
// ame4 = createhuman ;
14466: LD_ADDR_EXP 91
14470: PUSH
14471: CALL_OW 44
14475: ST_TO_ADDR
// placeunitxyr ( ame4 , 81 , 29 , 1 , false ) ;
14476: LD_EXP 91
14480: PPUSH
14481: LD_INT 81
14483: PPUSH
14484: LD_INT 29
14486: PPUSH
14487: LD_INT 1
14489: PPUSH
14490: LD_INT 0
14492: PPUSH
14493: CALL_OW 50
// comhold ( ame4 ) ;
14497: LD_EXP 91
14501: PPUSH
14502: CALL_OW 140
// prepareengineer ( sex_male , ame5_sk ) ;
14506: LD_INT 1
14508: PPUSH
14509: LD_EXP 94
14513: PPUSH
14514: CALL_OW 382
// ame5 = createhuman ;
14518: LD_ADDR_EXP 93
14522: PUSH
14523: CALL_OW 44
14527: ST_TO_ADDR
// placeunitxyr ( ame5 , 93 , 8 , 1 , false ) ;
14528: LD_EXP 93
14532: PPUSH
14533: LD_INT 93
14535: PPUSH
14536: LD_INT 8
14538: PPUSH
14539: LD_INT 1
14541: PPUSH
14542: LD_INT 0
14544: PPUSH
14545: CALL_OW 50
// comhold ( ame5 ) ;
14549: LD_EXP 93
14553: PPUSH
14554: CALL_OW 140
// inzinyri = [ ame0 , ame1 , ame2 , ame3 , ame4 , ame5 ] ;
14558: LD_ADDR_LOC 27
14562: PUSH
14563: LD_EXP 83
14567: PUSH
14568: LD_EXP 85
14572: PUSH
14573: LD_EXP 87
14577: PUSH
14578: LD_EXP 89
14582: PUSH
14583: LD_EXP 91
14587: PUSH
14588: LD_EXP 93
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: ST_TO_ADDR
// comremember ( inzinyri ) ;
14601: LD_LOC 27
14605: PPUSH
14606: CALL_OW 143
// opravujte = [ [ ambunk0 ] , [ ambunk1 , ambunk2 , ambunk3 , ambunk4 ] , [ ambunk5 , ambunk6 , ambunk7 ] , [ ambunk7 , ambunk8 , ambunk9 ] , [ ambarr , ambunka ] , [ ambunkb , ambunkc ] ] ;
14610: LD_ADDR_LOC 25
14614: PUSH
14615: LD_INT 1
14617: PUSH
14618: EMPTY
14619: LIST
14620: PUSH
14621: LD_INT 5
14623: PUSH
14624: LD_INT 15
14626: PUSH
14627: LD_INT 14
14629: PUSH
14630: LD_INT 6
14632: PUSH
14633: EMPTY
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: PUSH
14639: LD_INT 7
14641: PUSH
14642: LD_INT 13
14644: PUSH
14645: LD_INT 8
14647: PUSH
14648: EMPTY
14649: LIST
14650: LIST
14651: LIST
14652: PUSH
14653: LD_INT 8
14655: PUSH
14656: LD_INT 9
14658: PUSH
14659: LD_INT 17
14661: PUSH
14662: EMPTY
14663: LIST
14664: LIST
14665: LIST
14666: PUSH
14667: LD_INT 26
14669: PUSH
14670: LD_INT 12
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: PUSH
14677: LD_INT 11
14679: PUSH
14680: LD_INT 10
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: ST_TO_ADDR
// end ;
14695: LD_VAR 0 1
14699: RET
// var opravujte ; var opravujese ; var inzinyri ; every 0 0$3 do var tmp , tmp2 , tmp3 , oprav , buds , lives ;
14700: GO 14702
14702: DISABLE
14703: LD_INT 0
14705: PPUSH
14706: PPUSH
14707: PPUSH
14708: PPUSH
14709: PPUSH
14710: PPUSH
// begin for tmp = 1 to 0 + opravujte do
14711: LD_ADDR_VAR 0 1
14715: PUSH
14716: DOUBLE
14717: LD_INT 1
14719: DEC
14720: ST_TO_ADDR
14721: LD_INT 0
14723: PUSH
14724: LD_LOC 25
14728: PLUS
14729: PUSH
14730: FOR_TO
14731: IFFALSE 14962
// begin buds = [ ] ;
14733: LD_ADDR_VAR 0 5
14737: PUSH
14738: EMPTY
14739: ST_TO_ADDR
// lives = [ ] ;
14740: LD_ADDR_VAR 0 6
14744: PUSH
14745: EMPTY
14746: ST_TO_ADDR
// for tmp2 in opravujte [ tmp ] do
14747: LD_ADDR_VAR 0 2
14751: PUSH
14752: LD_LOC 25
14756: PUSH
14757: LD_VAR 0 1
14761: ARRAY
14762: PUSH
14763: FOR_IN
14764: IFFALSE 14826
// if ( getlives ( tmp2 ) < hranice_zdravi ) then
14766: LD_VAR 0 2
14770: PPUSH
14771: CALL_OW 256
14775: PUSH
14776: LD_INT 1000
14778: LESS
14779: IFFALSE 14824
// begin buds = buds ^ [ tmp2 ] ;
14781: LD_ADDR_VAR 0 5
14785: PUSH
14786: LD_VAR 0 5
14790: PUSH
14791: LD_VAR 0 2
14795: PUSH
14796: EMPTY
14797: LIST
14798: ADD
14799: ST_TO_ADDR
// lives = lives ^ [ getlives ( tmp2 ) ] ;
14800: LD_ADDR_VAR 0 6
14804: PUSH
14805: LD_VAR 0 6
14809: PUSH
14810: LD_VAR 0 2
14814: PPUSH
14815: CALL_OW 256
14819: PUSH
14820: EMPTY
14821: LIST
14822: ADD
14823: ST_TO_ADDR
// end ;
14824: GO 14763
14826: POP
14827: POP
// tmp2 = sortlistbylistasc ( buds , lives ) ;
14828: LD_ADDR_VAR 0 2
14832: PUSH
14833: LD_VAR 0 5
14837: PPUSH
14838: LD_VAR 0 6
14842: PPUSH
14843: CALL_OW 76
14847: ST_TO_ADDR
// if tmp2 then
14848: LD_VAR 0 2
14852: IFFALSE 14960
// begin comrepairbuilding ( inzinyri [ tmp ] , tmp2 [ 1 ] ) ;
14854: LD_LOC 27
14858: PUSH
14859: LD_VAR 0 1
14863: ARRAY
14864: PPUSH
14865: LD_VAR 0 2
14869: PUSH
14870: LD_INT 1
14872: ARRAY
14873: PPUSH
14874: CALL_OW 130
// for tmp3 = 2 to 0 + tmp2 do
14878: LD_ADDR_VAR 0 3
14882: PUSH
14883: DOUBLE
14884: LD_INT 2
14886: DEC
14887: ST_TO_ADDR
14888: LD_INT 0
14890: PUSH
14891: LD_VAR 0 2
14895: PLUS
14896: PUSH
14897: FOR_TO
14898: IFFALSE 14928
// addcomrepairbuilding ( inzinyri [ tmp ] , tmp2 [ tmp3 ] ) ;
14900: LD_LOC 27
14904: PUSH
14905: LD_VAR 0 1
14909: ARRAY
14910: PPUSH
14911: LD_VAR 0 2
14915: PUSH
14916: LD_VAR 0 3
14920: ARRAY
14921: PPUSH
14922: CALL_OW 190
14926: GO 14897
14928: POP
14929: POP
// addcomreturn ( inzinyri [ tmp ] ) ;
14930: LD_LOC 27
14934: PUSH
14935: LD_VAR 0 1
14939: ARRAY
14940: PPUSH
14941: CALL_OW 204
// addcomhold ( inzinyri [ tmp ] ) ;
14945: LD_LOC 27
14949: PUSH
14950: LD_VAR 0 1
14954: ARRAY
14955: PPUSH
14956: CALL_OW 200
// end ; end ;
14960: GO 14730
14962: POP
14963: POP
// enable ;
14964: ENABLE
// end ;
14965: PPOPN 6
14967: END
