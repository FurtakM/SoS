// export MissionStart ; export southAreaBlocker ; starting begin southAreaBlocker = true ;
   0: LD_ADDR_EXP 2
   4: PUSH
   5: LD_INT 1
   7: ST_TO_ADDR
// ResetFog ;
   8: CALL_OW 335
// AnimateTrees ( true ) ;
  12: LD_INT 1
  14: PPUSH
  15: CALL_OW 573
// RevealFogArea ( 1 , BetaArea ) ;
  19: LD_INT 1
  21: PPUSH
  22: LD_INT 8
  24: PPUSH
  25: CALL_OW 332
// GameType ;
  29: CALL 5584 0 0
// SetBName ( BetaA , beta ) ;
  33: LD_INT 1
  35: PPUSH
  36: LD_STRING beta
  38: PPUSH
  39: CALL_OW 500
// SetBName ( BetaB , beta ) ;
  43: LD_INT 3
  45: PPUSH
  46: LD_STRING beta
  48: PPUSH
  49: CALL_OW 500
// SetResourceType ( GetBase ( BetaA ) , mat_cans , startCrates [ 1 ] ) ;
  53: LD_INT 1
  55: PPUSH
  56: CALL_OW 274
  60: PPUSH
  61: LD_INT 1
  63: PPUSH
  64: LD_EXP 43
  68: PUSH
  69: LD_INT 1
  71: ARRAY
  72: PPUSH
  73: CALL_OW 277
// SetResourceType ( GetBase ( BetaB ) , mat_cans , startCrates [ 2 ] ) ;
  77: LD_INT 3
  79: PPUSH
  80: CALL_OW 274
  84: PPUSH
  85: LD_INT 1
  87: PPUSH
  88: LD_EXP 43
  92: PUSH
  93: LD_INT 2
  95: ARRAY
  96: PPUSH
  97: CALL_OW 277
// PrepareHeroes ;
 101: CALL 2747 0 0
// PrepareBeta ;
 105: CALL 3136 0 0
// HideArea ( 1 , SouthArea ) ;
 109: LD_INT 1
 111: PPUSH
 112: LD_INT 16
 114: PPUSH
 115: CALL_OW 333
// InGameOn ;
 119: CALL_OW 8
// ComHold ( Brighton ) ;
 123: LD_EXP 9
 127: PPUSH
 128: CALL_OW 140
// CenterNowOnUnits ( Brighton ) ;
 132: LD_EXP 9
 136: PPUSH
 137: CALL_OW 87
// ComMoveXY ( Megan , 50 , 42 ) ;
 141: LD_EXP 11
 145: PPUSH
 146: LD_INT 50
 148: PPUSH
 149: LD_INT 42
 151: PPUSH
 152: CALL_OW 111
// repeat wait ( 0 0$1 ) until GetDistUnits ( Megan , Brighton ) < 3 ;
 156: LD_INT 35
 158: PPUSH
 159: CALL_OW 67
 163: LD_EXP 11
 167: PPUSH
 168: LD_EXP 9
 172: PPUSH
 173: CALL_OW 296
 177: PUSH
 178: LD_INT 3
 180: LESS
 181: IFFALSE 156
// ComTurnUnit ( Megan , Brighton ) ;
 183: LD_EXP 11
 187: PPUSH
 188: LD_EXP 9
 192: PPUSH
 193: CALL_OW 119
// Say ( Megan , DMegan-1a ) ;
 197: LD_EXP 11
 201: PPUSH
 202: LD_STRING DMegan-1a
 204: PPUSH
 205: CALL_OW 88
// wait ( 0 0$0.3 ) ;
 209: LD_INT 10
 211: PPUSH
 212: CALL_OW 67
// ComTurnUnit ( Brighton , Megan ) ;
 216: LD_EXP 9
 220: PPUSH
 221: LD_EXP 11
 225: PPUSH
 226: CALL_OW 119
// Say ( Brighton , DBrighton-1a ) ;
 230: LD_EXP 9
 234: PPUSH
 235: LD_STRING DBrighton-1a
 237: PPUSH
 238: CALL_OW 88
// Say ( Megan , DMegan-2a ) ;
 242: LD_EXP 11
 246: PPUSH
 247: LD_STRING DMegan-2a
 249: PPUSH
 250: CALL_OW 88
// Say ( Brighton , DBrighton-2a ) ;
 254: LD_EXP 9
 258: PPUSH
 259: LD_STRING DBrighton-2a
 261: PPUSH
 262: CALL_OW 88
// Say ( Megan , DMegan-3a ) ;
 266: LD_EXP 11
 270: PPUSH
 271: LD_STRING DMegan-3a
 273: PPUSH
 274: CALL_OW 88
// Say ( Brighton , DBrighton-3a ) ;
 278: LD_EXP 9
 282: PPUSH
 283: LD_STRING DBrighton-3a
 285: PPUSH
 286: CALL_OW 88
// Say ( Megan , DMegan-4a ) ;
 290: LD_EXP 11
 294: PPUSH
 295: LD_STRING DMegan-4a
 297: PPUSH
 298: CALL_OW 88
// ComMoveXY ( Megan , 40 , 37 ) ;
 302: LD_EXP 11
 306: PPUSH
 307: LD_INT 40
 309: PPUSH
 310: LD_INT 37
 312: PPUSH
 313: CALL_OW 111
// AddComTurnUnit ( Megan , Brighton ) ;
 317: LD_EXP 11
 321: PPUSH
 322: LD_EXP 9
 326: PPUSH
 327: CALL_OW 179
// ComMoveXY ( Palmer , 50 , 42 ) ;
 331: LD_EXP 10
 335: PPUSH
 336: LD_INT 50
 338: PPUSH
 339: LD_INT 42
 341: PPUSH
 342: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 346: LD_INT 35
 348: PPUSH
 349: CALL_OW 67
// until GetDistUnits ( Brighton , Palmer ) < 6 ;
 353: LD_EXP 9
 357: PPUSH
 358: LD_EXP 10
 362: PPUSH
 363: CALL_OW 296
 367: PUSH
 368: LD_INT 6
 370: LESS
 371: IFFALSE 346
// ComTurnUnit ( Brighton , Palmer ) ;
 373: LD_EXP 9
 377: PPUSH
 378: LD_EXP 10
 382: PPUSH
 383: CALL_OW 119
// ComTurnUnit ( Palmer , Brighton ) ;
 387: LD_EXP 10
 391: PPUSH
 392: LD_EXP 9
 396: PPUSH
 397: CALL_OW 119
// Say ( Megan , DMegan-5a ) ;
 401: LD_EXP 11
 405: PPUSH
 406: LD_STRING DMegan-5a
 408: PPUSH
 409: CALL_OW 88
// Say ( Palmer , DPalmer-1 ) ;
 413: LD_EXP 10
 417: PPUSH
 418: LD_STRING DPalmer-1
 420: PPUSH
 421: CALL_OW 88
// Say ( Brighton , DBrighton-1 ) ;
 425: LD_EXP 9
 429: PPUSH
 430: LD_STRING DBrighton-1
 432: PPUSH
 433: CALL_OW 88
// Say ( Palmer , DPalmer-2 ) ;
 437: LD_EXP 10
 441: PPUSH
 442: LD_STRING DPalmer-2
 444: PPUSH
 445: CALL_OW 88
// Say ( Brighton , DBrighton-2 ) ;
 449: LD_EXP 9
 453: PPUSH
 454: LD_STRING DBrighton-2
 456: PPUSH
 457: CALL_OW 88
// Say ( Palmer , DPalmer-3 ) ;
 461: LD_EXP 10
 465: PPUSH
 466: LD_STRING DPalmer-3
 468: PPUSH
 469: CALL_OW 88
// Say ( Brighton , DBrighton-3 ) ;
 473: LD_EXP 9
 477: PPUSH
 478: LD_STRING DBrighton-3
 480: PPUSH
 481: CALL_OW 88
// Say ( Palmer , DPalmer-4 ) ;
 485: LD_EXP 10
 489: PPUSH
 490: LD_STRING DPalmer-4
 492: PPUSH
 493: CALL_OW 88
// ComEnterUnit ( Palmer , AmTower ) ;
 497: LD_EXP 10
 501: PPUSH
 502: LD_INT 6
 504: PPUSH
 505: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
 509: LD_INT 35
 511: PPUSH
 512: CALL_OW 67
// until IsInUnit ( Palmer ) = AmTower ;
 516: LD_EXP 10
 520: PPUSH
 521: CALL_OW 310
 525: PUSH
 526: LD_INT 6
 528: EQUAL
 529: IFFALSE 509
// SayRadio ( Palmer , DPalmer-5 ) ;
 531: LD_EXP 10
 535: PPUSH
 536: LD_STRING DPalmer-5
 538: PPUSH
 539: CALL_OW 94
// ComMoveXY ( Brighton , 59 , 36 ) ;
 543: LD_EXP 9
 547: PPUSH
 548: LD_INT 59
 550: PPUSH
 551: LD_INT 36
 553: PPUSH
 554: CALL_OW 111
// ComMoveXY ( Megan , 60 , 35 ) ;
 558: LD_EXP 11
 562: PPUSH
 563: LD_INT 60
 565: PPUSH
 566: LD_INT 35
 568: PPUSH
 569: CALL_OW 111
// ComMoveXY ( Palmer , 60 , 34 ) ;
 573: LD_EXP 10
 577: PPUSH
 578: LD_INT 60
 580: PPUSH
 581: LD_INT 34
 583: PPUSH
 584: CALL_OW 111
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 588: LD_EXP 9
 592: PPUSH
 593: LD_INT 99
 595: PPUSH
 596: LD_INT 37
 598: PPUSH
 599: CALL_OW 178
// AddComTurnUnit ( Megan , Brighton ) ;
 603: LD_EXP 11
 607: PPUSH
 608: LD_EXP 9
 612: PPUSH
 613: CALL_OW 179
// AddComTurnUnit ( Palmer , Brighton ) ;
 617: LD_EXP 10
 621: PPUSH
 622: LD_EXP 9
 626: PPUSH
 627: CALL_OW 179
// CenterOnXY ( 64 , 40 ) ;
 631: LD_INT 64
 633: PPUSH
 634: LD_INT 40
 636: PPUSH
 637: CALL_OW 84
// ComMeeting ( BetaSquad , SpotArea ) ;
 641: LD_EXP 12
 645: PPUSH
 646: LD_INT 13
 648: PPUSH
 649: CALL 12587 0 2
// wait ( 0 0$30 ) ;
 653: LD_INT 1050
 655: PPUSH
 656: CALL_OW 67
// Say ( Brighton , DBrighton-4 ) ;
 660: LD_EXP 9
 664: PPUSH
 665: LD_STRING DBrighton-4
 667: PPUSH
 668: CALL_OW 88
// Say ( Brighton , DBrighton-5 ) ;
 672: LD_EXP 9
 676: PPUSH
 677: LD_STRING DBrighton-5
 679: PPUSH
 680: CALL_OW 88
// AddComTurnUnit ( Brighton , Megan ) ;
 684: LD_EXP 9
 688: PPUSH
 689: LD_EXP 11
 693: PPUSH
 694: CALL_OW 179
// Say ( Brighton , DBrighton-6 ) ;
 698: LD_EXP 9
 702: PPUSH
 703: LD_STRING DBrighton-6
 705: PPUSH
 706: CALL_OW 88
// Say ( Megan , DMegan-1 ) ;
 710: LD_EXP 11
 714: PPUSH
 715: LD_STRING DMegan-1
 717: PPUSH
 718: CALL_OW 88
// Say ( Brighton , DBrighton-7 ) ;
 722: LD_EXP 9
 726: PPUSH
 727: LD_STRING DBrighton-7
 729: PPUSH
 730: CALL_OW 88
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 734: LD_EXP 9
 738: PPUSH
 739: LD_INT 99
 741: PPUSH
 742: LD_INT 37
 744: PPUSH
 745: CALL_OW 178
// Say ( Brighton , DBrighton-8 ) ;
 749: LD_EXP 9
 753: PPUSH
 754: LD_STRING DBrighton-8
 756: PPUSH
 757: CALL_OW 88
// ChangeMissionObjectives ( C1 ) ;
 761: LD_STRING C1
 763: PPUSH
 764: CALL_OW 337
// InGameOff ;
 768: CALL_OW 9
// SaveForQuickRestart ;
 772: CALL_OW 22
// MissionStart := true ;
 776: LD_ADDR_EXP 1
 780: PUSH
 781: LD_INT 1
 783: ST_TO_ADDR
// PrepareRUBase_v2 ;
 784: CALL 4859 0 0
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
 788: LD_ADDR_EXP 63
 792: PUSH
 793: LD_EXP 63
 797: PPUSH
 798: LD_INT 1
 800: PPUSH
 801: LD_INT 22
 803: PUSH
 804: LD_INT 3
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PPUSH
 811: CALL_OW 69
 815: PPUSH
 816: CALL_OW 1
 820: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , RU_SecondPersonnel ) ;
 821: LD_ADDR_EXP 63
 825: PUSH
 826: LD_EXP 63
 830: PPUSH
 831: LD_INT 2
 833: PPUSH
 834: LD_EXP 36
 838: PPUSH
 839: CALL_OW 1
 843: ST_TO_ADDR
// MC_Start ( ) ;
 844: CALL 52042 0 0
// music_nat := 1 ;
 848: LD_ADDR_OWVAR 71
 852: PUSH
 853: LD_INT 1
 855: ST_TO_ADDR
// end ;
 856: END
// every 1 trigger southAreaBlocker do var unit ;
 857: LD_EXP 2
 861: IFFALSE 1022
 863: GO 865
 865: DISABLE
 866: LD_INT 0
 868: PPUSH
// begin enable ;
 869: ENABLE
// if FilterUnitsInArea ( SouthArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) = 0 then
 870: LD_INT 16
 872: PPUSH
 873: LD_INT 22
 875: PUSH
 876: LD_INT 1
 878: PUSH
 879: EMPTY
 880: LIST
 881: LIST
 882: PUSH
 883: LD_INT 2
 885: PUSH
 886: LD_INT 21
 888: PUSH
 889: LD_INT 1
 891: PUSH
 892: EMPTY
 893: LIST
 894: LIST
 895: PUSH
 896: LD_INT 21
 898: PUSH
 899: LD_INT 2
 901: PUSH
 902: EMPTY
 903: LIST
 904: LIST
 905: PUSH
 906: EMPTY
 907: LIST
 908: LIST
 909: LIST
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: PPUSH
 915: CALL_OW 70
 919: PUSH
 920: LD_INT 0
 922: EQUAL
 923: IFFALSE 927
// exit ;
 925: GO 1022
// for unit in FilterUnitsInArea ( SouthArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 927: LD_ADDR_VAR 0 1
 931: PUSH
 932: LD_INT 16
 934: PPUSH
 935: LD_INT 22
 937: PUSH
 938: LD_INT 1
 940: PUSH
 941: EMPTY
 942: LIST
 943: LIST
 944: PUSH
 945: LD_INT 2
 947: PUSH
 948: LD_INT 21
 950: PUSH
 951: LD_INT 1
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: PUSH
 958: LD_INT 21
 960: PUSH
 961: LD_INT 2
 963: PUSH
 964: EMPTY
 965: LIST
 966: LIST
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: LIST
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: PPUSH
 977: CALL_OW 70
 981: PUSH
 982: FOR_IN
 983: IFFALSE 1020
// begin ComMoveXY ( unit , GetX ( unit ) , GetY ( unit ) - 2 ) ;
 985: LD_VAR 0 1
 989: PPUSH
 990: LD_VAR 0 1
 994: PPUSH
 995: CALL_OW 250
 999: PPUSH
1000: LD_VAR 0 1
1004: PPUSH
1005: CALL_OW 251
1009: PUSH
1010: LD_INT 2
1012: MINUS
1013: PPUSH
1014: CALL_OW 111
// end ;
1018: GO 982
1020: POP
1021: POP
// end ;
1022: PPOPN 1
1024: END
// export ArmadaArrived , FirstAssaultRepelled ; export RuSpeaker ; every 0 0$1 trigger MissionStart do var i , tmp ;
1025: LD_EXP 1
1029: IFFALSE 1662
1031: GO 1033
1033: DISABLE
1034: LD_INT 0
1036: PPUSH
1037: PPUSH
// begin wait ( ruArrival ) ;
1038: LD_EXP 42
1042: PPUSH
1043: CALL_OW 67
// PrepareRUArmada ;
1047: CALL 3718 0 0
// wait ( 0 0$3 ) ;
1051: LD_INT 105
1053: PPUSH
1054: CALL_OW 67
// tmp := AreaToList ( RUArrivalParkingArea , 0 ) ;
1058: LD_ADDR_VAR 0 2
1062: PUSH
1063: LD_INT 15
1065: PPUSH
1066: LD_INT 0
1068: PPUSH
1069: CALL_OW 517
1073: ST_TO_ADDR
// for i = 1 to RUArmada do
1074: LD_ADDR_VAR 0 1
1078: PUSH
1079: DOUBLE
1080: LD_INT 1
1082: DEC
1083: ST_TO_ADDR
1084: LD_EXP 17
1088: PUSH
1089: FOR_TO
1090: IFFALSE 1139
// ComMoveXY ( RUArmada [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1092: LD_EXP 17
1096: PUSH
1097: LD_VAR 0 1
1101: ARRAY
1102: PPUSH
1103: LD_VAR 0 2
1107: PUSH
1108: LD_INT 1
1110: ARRAY
1111: PUSH
1112: LD_VAR 0 1
1116: ARRAY
1117: PPUSH
1118: LD_VAR 0 2
1122: PUSH
1123: LD_INT 2
1125: ARRAY
1126: PUSH
1127: LD_VAR 0 1
1131: ARRAY
1132: PPUSH
1133: CALL_OW 111
1137: GO 1089
1139: POP
1140: POP
// ArmadaArrived := true ;
1141: LD_ADDR_EXP 3
1145: PUSH
1146: LD_INT 1
1148: ST_TO_ADDR
// Say ( Palmer , DPalmer-A1 ) ;
1149: LD_EXP 10
1153: PPUSH
1154: LD_STRING DPalmer-A1
1156: PPUSH
1157: CALL_OW 88
// Say ( Brighton , DBrighton-A1 ) ;
1161: LD_EXP 9
1165: PPUSH
1166: LD_STRING DBrighton-A1
1168: PPUSH
1169: CALL_OW 88
// wait ( 0 0$20 ) ;
1173: LD_INT 700
1175: PPUSH
1176: CALL_OW 67
// PrepareRUBase ;
1180: CALL 4443 0 0
// wait ( 1 1$20 ) ;
1184: LD_INT 2800
1186: PPUSH
1187: CALL_OW 67
// PrepareRUBulldozers ;
1191: CALL 4330 0 0
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
1195: LD_EXP 18
1199: PUSH
1200: LD_INT 1
1202: ARRAY
1203: PPUSH
1204: LD_INT 9
1206: PPUSH
1207: CALL 12444 0 2
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
1211: LD_EXP 18
1215: PUSH
1216: LD_INT 2
1218: ARRAY
1219: PPUSH
1220: LD_INT 11
1222: PPUSH
1223: CALL 12444 0 2
// DoNotAttack ( 1 , Bulldozers [ 1 ] ) ;
1227: LD_INT 1
1229: PPUSH
1230: LD_EXP 18
1234: PUSH
1235: LD_INT 1
1237: ARRAY
1238: PPUSH
1239: CALL_OW 471
// DoNotAttack ( 1 , Bulldozers [ 2 ] ) ;
1243: LD_INT 1
1245: PPUSH
1246: LD_EXP 18
1250: PUSH
1251: LD_INT 2
1253: ARRAY
1254: PPUSH
1255: CALL_OW 471
// wait ( 0 0$50 ) ;
1259: LD_INT 1750
1261: PPUSH
1262: CALL_OW 67
// ShowArea ( 1 , SouthArea ) ;
1266: LD_INT 1
1268: PPUSH
1269: LD_INT 16
1271: PPUSH
1272: CALL_OW 334
// InGameOn ;
1276: CALL_OW 8
// PlaceSeeing ( 95 , 93 , 1 , - 30 ) ;
1280: LD_INT 95
1282: PPUSH
1283: LD_INT 93
1285: PPUSH
1286: LD_INT 1
1288: PPUSH
1289: LD_INT 30
1291: NEG
1292: PPUSH
1293: CALL_OW 330
// ComMoveXY ( FilterUnitsInArea ( US_BackOffArea , [ f_side , 1 ] ) , 63 , 39 ) ;
1297: LD_INT 10
1299: PPUSH
1300: LD_INT 22
1302: PUSH
1303: LD_INT 1
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: PPUSH
1310: CALL_OW 70
1314: PPUSH
1315: LD_INT 63
1317: PPUSH
1318: LD_INT 39
1320: PPUSH
1321: CALL_OW 111
// CenterOnXY ( 95 , 93 ) ;
1325: LD_INT 95
1327: PPUSH
1328: LD_INT 93
1330: PPUSH
1331: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
1335: LD_INT 35
1337: PPUSH
1338: CALL_OW 67
// if not HasTask ( Bulldozers [ 1 ] ) then
1342: LD_EXP 18
1346: PUSH
1347: LD_INT 1
1349: ARRAY
1350: PPUSH
1351: CALL_OW 314
1355: NOT
1356: IFFALSE 1374
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
1358: LD_EXP 18
1362: PUSH
1363: LD_INT 1
1365: ARRAY
1366: PPUSH
1367: LD_INT 9
1369: PPUSH
1370: CALL 12444 0 2
// if not HasTask ( Bulldozers [ 2 ] ) then
1374: LD_EXP 18
1378: PUSH
1379: LD_INT 2
1381: ARRAY
1382: PPUSH
1383: CALL_OW 314
1387: NOT
1388: IFFALSE 1406
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
1390: LD_EXP 18
1394: PUSH
1395: LD_INT 2
1397: ARRAY
1398: PPUSH
1399: LD_INT 11
1401: PPUSH
1402: CALL 12444 0 2
// until ListEnvironmentArea ( BulldozerArea ) < 2 or ListEnvironmentArea ( BulldozerArea2 ) < 2 or IsDead ( Bulldozers [ 1 ] ) ;
1406: LD_INT 9
1408: PPUSH
1409: CALL_OW 353
1413: PUSH
1414: LD_INT 2
1416: LESS
1417: PUSH
1418: LD_INT 11
1420: PPUSH
1421: CALL_OW 353
1425: PUSH
1426: LD_INT 2
1428: LESS
1429: OR
1430: PUSH
1431: LD_EXP 18
1435: PUSH
1436: LD_INT 1
1438: ARRAY
1439: PPUSH
1440: CALL_OW 301
1444: OR
1445: IFFALSE 1335
// if UnitFilter ( Bulldozers , [ f_ok ] ) then
1447: LD_EXP 18
1451: PPUSH
1452: LD_INT 50
1454: PUSH
1455: EMPTY
1456: LIST
1457: PPUSH
1458: CALL_OW 72
1462: IFFALSE 1515
// begin wait ( 0 0$10 ) ;
1464: LD_INT 350
1466: PPUSH
1467: CALL_OW 67
// ComMoveXY ( Bulldozers , 120 , 131 ) ;
1471: LD_EXP 18
1475: PPUSH
1476: LD_INT 120
1478: PPUSH
1479: LD_INT 131
1481: PPUSH
1482: CALL_OW 111
// for i in Bulldozers do
1486: LD_ADDR_VAR 0 1
1490: PUSH
1491: LD_EXP 18
1495: PUSH
1496: FOR_IN
1497: IFFALSE 1513
// NormalAttack ( 1 , i ) ;
1499: LD_INT 1
1501: PPUSH
1502: LD_VAR 0 1
1506: PPUSH
1507: CALL_OW 472
1511: GO 1496
1513: POP
1514: POP
// end ; wait ( 0 0$10 ) ;
1515: LD_INT 350
1517: PPUSH
1518: CALL_OW 67
// RemoveSeeing ( 95 , 93 , 1 ) ;
1522: LD_INT 95
1524: PPUSH
1525: LD_INT 93
1527: PPUSH
1528: LD_INT 1
1530: PPUSH
1531: CALL_OW 331
// southAreaBlocker = false ;
1535: LD_ADDR_EXP 2
1539: PUSH
1540: LD_INT 0
1542: ST_TO_ADDR
// wait ( 0 0$3 ) ;
1543: LD_INT 105
1545: PPUSH
1546: CALL_OW 67
// InGameOff ;
1550: CALL_OW 9
// SayEffect ( DRuSol-A1 ) ;
1554: LD_STRING DRuSol-A1
1556: PPUSH
1557: CALL_OW 96
// AssaultStarted := true ;
1561: LD_ADDR_EXP 8
1565: PUSH
1566: LD_INT 1
1568: ST_TO_ADDR
// wait ( 0 0$2 ) ;
1569: LD_INT 70
1571: PPUSH
1572: CALL_OW 67
// Say ( Yashin , DDeath-Yas-1 ) ;
1576: LD_EXP 13
1580: PPUSH
1581: LD_STRING DDeath-Yas-1
1583: PPUSH
1584: CALL_OW 88
// Say ( Gaydar , DDeath-Gay-2 ) ;
1588: LD_EXP 15
1592: PPUSH
1593: LD_STRING DDeath-Gay-2
1595: PPUSH
1596: CALL_OW 88
// wait ( 0 0$2 ) ;
1600: LD_INT 70
1602: PPUSH
1603: CALL_OW 67
// Say ( Popov , DDeath-Pop-1 ) ;
1607: LD_EXP 14
1611: PPUSH
1612: LD_STRING DDeath-Pop-1
1614: PPUSH
1615: CALL_OW 88
// Say ( Gaydar , DDeath-Gay-1 ) ;
1619: LD_EXP 15
1623: PPUSH
1624: LD_STRING DDeath-Gay-1
1626: PPUSH
1627: CALL_OW 88
// wait ( 0 0$5 ) ;
1631: LD_INT 175
1633: PPUSH
1634: CALL_OW 67
// Say ( Sevi , DDeath-Vse-1 ) ;
1638: LD_EXP 16
1642: PPUSH
1643: LD_STRING DDeath-Vse-1
1645: PPUSH
1646: CALL_OW 88
// Say ( Popov , DDeath-Pop-2 ) ;
1650: LD_EXP 14
1654: PPUSH
1655: LD_STRING DDeath-Pop-2
1657: PPUSH
1658: CALL_OW 88
// end ;
1662: PPOPN 2
1664: END
// every 0 0$1 trigger AssaultStarted do var i , tmp ;
1665: LD_EXP 8
1669: IFFALSE 2121
1671: GO 1673
1673: DISABLE
1674: LD_INT 0
1676: PPUSH
1677: PPUSH
// begin PriorityAttack ( 6 , BetaA ) ;
1678: LD_INT 6
1680: PPUSH
1681: LD_INT 1
1683: PPUSH
1684: CALL_OW 470
// PriorityAttack ( 6 , BetaB ) ;
1688: LD_INT 6
1690: PPUSH
1691: LD_INT 3
1693: PPUSH
1694: CALL_OW 470
// repeat for i in RuArmada do
1698: LD_ADDR_VAR 0 1
1702: PUSH
1703: LD_EXP 17
1707: PUSH
1708: FOR_IN
1709: IFFALSE 1747
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
1711: LD_VAR 0 1
1715: PPUSH
1716: LD_INT 22
1718: PUSH
1719: LD_INT 1
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: PPUSH
1726: CALL_OW 69
1730: PPUSH
1731: LD_VAR 0 1
1735: PPUSH
1736: CALL_OW 74
1740: PPUSH
1741: CALL_OW 115
1745: GO 1708
1747: POP
1748: POP
// wait ( 0 0$1 ) until FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_type , unit_human ] ] ) < 10 and IsDead ( Yashin ) and IsDead ( Popov ) and IsDead ( Gaydar ) and IsDead ( Sevi ) ;
1749: LD_INT 35
1751: PPUSH
1752: CALL_OW 67
1756: LD_INT 1
1758: PUSH
1759: LD_INT 22
1761: PUSH
1762: LD_INT 6
1764: PUSH
1765: EMPTY
1766: LIST
1767: LIST
1768: PUSH
1769: LD_INT 21
1771: PUSH
1772: LD_INT 1
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: LIST
1783: PPUSH
1784: CALL_OW 69
1788: PUSH
1789: LD_INT 10
1791: LESS
1792: PUSH
1793: LD_EXP 13
1797: PPUSH
1798: CALL_OW 301
1802: AND
1803: PUSH
1804: LD_EXP 14
1808: PPUSH
1809: CALL_OW 301
1813: AND
1814: PUSH
1815: LD_EXP 15
1819: PPUSH
1820: CALL_OW 301
1824: AND
1825: PUSH
1826: LD_EXP 16
1830: PPUSH
1831: CALL_OW 301
1835: AND
1836: IFFALSE 1698
// AssaultStarted := false ;
1838: LD_ADDR_EXP 8
1842: PUSH
1843: LD_INT 0
1845: ST_TO_ADDR
// ComMoveToArea ( FilterAllUnits ( [ f_side , 6 ] ) , RUArrivalArea ) ;
1846: LD_INT 22
1848: PUSH
1849: LD_INT 6
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: PPUSH
1856: CALL_OW 69
1860: PPUSH
1861: LD_INT 5
1863: PPUSH
1864: CALL_OW 113
// RuSpeaker := FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_sex , sex_male ] , [ f_type , unit_human ] , [ f_lives , 500 ] ] ) ;
1868: LD_ADDR_EXP 5
1872: PUSH
1873: LD_INT 1
1875: PUSH
1876: LD_INT 22
1878: PUSH
1879: LD_INT 6
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: PUSH
1886: LD_INT 26
1888: PUSH
1889: LD_INT 1
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: PUSH
1896: LD_INT 21
1898: PUSH
1899: LD_INT 1
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 24
1908: PUSH
1909: LD_INT 500
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: PPUSH
1923: CALL_OW 69
1927: ST_TO_ADDR
// if RuSpeaker then
1928: LD_EXP 5
1932: IFFALSE 1950
// Say ( RuSpeaker [ 1 ] , DRuSol-A2 ) ;
1934: LD_EXP 5
1938: PUSH
1939: LD_INT 1
1941: ARRAY
1942: PPUSH
1943: LD_STRING DRuSol-A2
1945: PPUSH
1946: CALL_OW 88
// wait ( 0 0$30 ) ;
1950: LD_INT 1050
1952: PPUSH
1953: CALL_OW 67
// DialogueOn ;
1957: CALL_OW 6
// Say ( Brighton , DBrighton-B1 ) ;
1961: LD_EXP 9
1965: PPUSH
1966: LD_STRING DBrighton-B1
1968: PPUSH
1969: CALL_OW 88
// Say ( Palmer , DPalmer-B1 ) ;
1973: LD_EXP 10
1977: PPUSH
1978: LD_STRING DPalmer-B1
1980: PPUSH
1981: CALL_OW 88
// Say ( Brighton , DBrighton-B2 ) ;
1985: LD_EXP 9
1989: PPUSH
1990: LD_STRING DBrighton-B2
1992: PPUSH
1993: CALL_OW 88
// SayRadio ( Burlak , DBurlak-B1 ) ;
1997: LD_EXP 19
2001: PPUSH
2002: LD_STRING DBurlak-B1
2004: PPUSH
2005: CALL_OW 94
// Say ( Brighton , DBrighton-B3 ) ;
2009: LD_EXP 9
2013: PPUSH
2014: LD_STRING DBrighton-B3
2016: PPUSH
2017: CALL_OW 88
// Say ( Palmer , DPalmer-B2 ) ;
2021: LD_EXP 10
2025: PPUSH
2026: LD_STRING DPalmer-B2
2028: PPUSH
2029: CALL_OW 88
// Say ( Brighton , DBrighton-B4 ) ;
2033: LD_EXP 9
2037: PPUSH
2038: LD_STRING DBrighton-B4
2040: PPUSH
2041: CALL_OW 88
// Say ( Brighton , DBrighton-B5 ) ;
2045: LD_EXP 9
2049: PPUSH
2050: LD_STRING DBrighton-B5
2052: PPUSH
2053: CALL_OW 88
// DialogueOff ;
2057: CALL_OW 7
// ChangeMissionObjectives ( C2 ) ;
2061: LD_STRING C2
2063: PPUSH
2064: CALL_OW 337
// FirstAssaultRepelled := true ;
2068: LD_ADDR_EXP 4
2072: PUSH
2073: LD_INT 1
2075: ST_TO_ADDR
// RemoveUnit ( Bulldozers [ 1 ] ) ;
2076: LD_EXP 18
2080: PUSH
2081: LD_INT 1
2083: ARRAY
2084: PPUSH
2085: CALL_OW 64
// RemoveUnit ( Bulldozers [ 2 ] ) ;
2089: LD_EXP 18
2093: PUSH
2094: LD_INT 2
2096: ARRAY
2097: PPUSH
2098: CALL_OW 64
// AddComExitVehicle ( FilterAllUnits ( [ f_side , 6 ] ) ) ;
2102: LD_INT 22
2104: PUSH
2105: LD_INT 6
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: PPUSH
2112: CALL_OW 69
2116: PPUSH
2117: CALL_OW 181
// end ;
2121: PPOPN 2
2123: END
// every 0 0$1 trigger FirstAssaultRepelled do var unit , insideUnit ;
2124: LD_EXP 4
2128: IFFALSE 2293
2130: GO 2132
2132: DISABLE
2133: LD_INT 0
2135: PPUSH
2136: PPUSH
// begin enable ;
2137: ENABLE
// if FilterUnitsInArea ( RUArrivalArea , [ [ f_side , 6 ] ] ) = 0 then
2138: LD_INT 5
2140: PPUSH
2141: LD_INT 22
2143: PUSH
2144: LD_INT 6
2146: PUSH
2147: EMPTY
2148: LIST
2149: LIST
2150: PUSH
2151: EMPTY
2152: LIST
2153: PPUSH
2154: CALL_OW 70
2158: PUSH
2159: LD_INT 0
2161: EQUAL
2162: IFFALSE 2166
// exit ;
2164: GO 2293
// for unit in FilterUnitsInArea ( RUArrivalArea , [ [ f_side , 6 ] ] ) do
2166: LD_ADDR_VAR 0 1
2170: PUSH
2171: LD_INT 5
2173: PPUSH
2174: LD_INT 22
2176: PUSH
2177: LD_INT 6
2179: PUSH
2180: EMPTY
2181: LIST
2182: LIST
2183: PUSH
2184: EMPTY
2185: LIST
2186: PPUSH
2187: CALL_OW 70
2191: PUSH
2192: FOR_IN
2193: IFFALSE 2291
// begin SetSide ( unit , 3 ) ;
2195: LD_VAR 0 1
2199: PPUSH
2200: LD_INT 3
2202: PPUSH
2203: CALL_OW 235
// if ( GetType ( unit ) = unit_vehicle ) then
2207: LD_VAR 0 1
2211: PPUSH
2212: CALL_OW 247
2216: PUSH
2217: LD_INT 2
2219: EQUAL
2220: IFFALSE 2256
// for insideUnit in UnitsInside ( unit ) do
2222: LD_ADDR_VAR 0 2
2226: PUSH
2227: LD_VAR 0 1
2231: PPUSH
2232: CALL_OW 313
2236: PUSH
2237: FOR_IN
2238: IFFALSE 2254
// SetSide ( insideUnit , 3 ) ;
2240: LD_VAR 0 2
2244: PPUSH
2245: LD_INT 3
2247: PPUSH
2248: CALL_OW 235
2252: GO 2237
2254: POP
2255: POP
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
2256: LD_ADDR_EXP 63
2260: PUSH
2261: LD_EXP 63
2265: PPUSH
2266: LD_INT 1
2268: PPUSH
2269: LD_INT 22
2271: PUSH
2272: LD_INT 3
2274: PUSH
2275: EMPTY
2276: LIST
2277: LIST
2278: PPUSH
2279: CALL_OW 69
2283: PPUSH
2284: CALL_OW 1
2288: ST_TO_ADDR
// end ;
2289: GO 2192
2291: POP
2292: POP
// end ;
2293: PPOPN 2
2295: END
// every 0 0$1 trigger FirstAssaultRepelled and jmmArrival > 0 0$00 do
2296: LD_EXP 4
2300: PUSH
2301: LD_EXP 41
2305: PUSH
2306: LD_INT 0
2308: GREATER
2309: AND
2310: IFFALSE 2330
2312: GO 2314
2314: DISABLE
// begin enable ;
2315: ENABLE
// jmmArrival := jmmArrival - 0 0$01 ;
2316: LD_ADDR_EXP 41
2320: PUSH
2321: LD_EXP 41
2325: PUSH
2326: LD_INT 35
2328: MINUS
2329: ST_TO_ADDR
// end ;
2330: END
// export JMM_Arrived ; every 0 0$1 trigger jmmArrival = 0 0$00 do
2331: LD_EXP 41
2335: PUSH
2336: LD_INT 0
2338: EQUAL
2339: IFFALSE 2445
2341: GO 2343
2343: DISABLE
// begin JMMReinforcement ;
2344: CALL 5187 0 0
// DialogueOn ;
2348: CALL_OW 6
// CenterOnUnits ( JMM ) ;
2352: LD_EXP 37
2356: PPUSH
2357: CALL_OW 85
// Say ( JMM , DJMM-F1 ) ;
2361: LD_EXP 37
2365: PPUSH
2366: LD_STRING DJMM-F1
2368: PPUSH
2369: CALL_OW 88
// if RussiansDefeated then
2373: LD_EXP 44
2377: IFFALSE 2403
// begin AddMedal ( Russians , 1 ) ;
2379: LD_STRING Russians
2381: PPUSH
2382: LD_INT 1
2384: PPUSH
2385: CALL_OW 101
// Say ( Brighton , DBrighton-F1a ) ;
2389: LD_EXP 9
2393: PPUSH
2394: LD_STRING DBrighton-F1a
2396: PPUSH
2397: CALL_OW 88
// end else
2401: GO 2433
// begin AddMedal ( Russians , - 1 ) ;
2403: LD_STRING Russians
2405: PPUSH
2406: LD_INT 1
2408: NEG
2409: PPUSH
2410: CALL_OW 101
// Say ( Brighton , DBrighton-F1 ) ;
2414: LD_EXP 9
2418: PPUSH
2419: LD_STRING DBrighton-F1
2421: PPUSH
2422: CALL_OW 88
// ChangeMissionObjectives ( C3 ) ;
2426: LD_STRING C3
2428: PPUSH
2429: CALL_OW 337
// end ; DialogueOff ;
2433: CALL_OW 7
// JMM_Arrived := true ;
2437: LD_ADDR_EXP 6
2441: PUSH
2442: LD_INT 1
2444: ST_TO_ADDR
// end ;
2445: END
// every 0 0$1 trigger JMM_Arrived and See ( 1 , Burlak ) do
2446: LD_EXP 6
2450: PUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_EXP 19
2458: PPUSH
2459: CALL_OW 292
2463: AND
2464: IFFALSE 2493
2466: GO 2468
2468: DISABLE
// begin Say ( Burlak , DBurlak ) ;
2469: LD_EXP 19
2473: PPUSH
2474: LD_STRING DBurlak
2476: PPUSH
2477: CALL_OW 88
// Say ( JMM , DJMM ) ;
2481: LD_EXP 37
2485: PPUSH
2486: LD_STRING DJMM
2488: PPUSH
2489: CALL_OW 88
// end ;
2493: END
// export LaserBuilt ; every 0 0$1 trigger FilterAllUnits ( [ f_and , [ f_side , 1 ] , [ f_or , [ f_weapon , us_laser ] , [ f_bweapon , us_laser ] ] ] ) > 1 do
2494: LD_INT 1
2496: PUSH
2497: LD_INT 22
2499: PUSH
2500: LD_INT 1
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: PUSH
2507: LD_INT 2
2509: PUSH
2510: LD_INT 34
2512: PUSH
2513: LD_INT 9
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: PUSH
2520: LD_INT 35
2522: PUSH
2523: LD_INT 9
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: PUSH
2530: EMPTY
2531: LIST
2532: LIST
2533: LIST
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: LIST
2539: PPUSH
2540: CALL_OW 69
2544: PUSH
2545: LD_INT 1
2547: GREATER
2548: IFFALSE 2561
2550: GO 2552
2552: DISABLE
// LaserBuilt := true ;
2553: LD_ADDR_EXP 7
2557: PUSH
2558: LD_INT 1
2560: ST_TO_ADDR
2561: END
// export AssaultStarted ; every 0 0$1 trigger AssaultStarted and See ( 6 , NearestUnitToUnit ( FilterAllUnits ( [ f_and , [ [ f_side , 1 ] , [ f_bweapon , us_laser ] ] ] ) , IsInUnit ( Sevi ) ) ) do
2562: LD_EXP 8
2566: PUSH
2567: LD_INT 6
2569: PPUSH
2570: LD_INT 1
2572: PUSH
2573: LD_INT 22
2575: PUSH
2576: LD_INT 1
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: PUSH
2583: LD_INT 35
2585: PUSH
2586: LD_INT 9
2588: PUSH
2589: EMPTY
2590: LIST
2591: LIST
2592: PUSH
2593: EMPTY
2594: LIST
2595: LIST
2596: PUSH
2597: EMPTY
2598: LIST
2599: LIST
2600: PPUSH
2601: CALL_OW 69
2605: PPUSH
2606: LD_EXP 16
2610: PPUSH
2611: CALL_OW 310
2615: PPUSH
2616: CALL_OW 74
2620: PPUSH
2621: CALL_OW 292
2625: AND
2626: IFFALSE 2655
2628: GO 2630
2630: DISABLE
// begin Say ( Sevi , DDeath-Vse-2 ) ;
2631: LD_EXP 16
2635: PPUSH
2636: LD_STRING DDeath-Vse-2
2638: PPUSH
2639: CALL_OW 88
// Say ( Yashin , DDeath-Yas-2 ) ;
2643: LD_EXP 13
2647: PPUSH
2648: LD_STRING DDeath-Yas-2
2650: PPUSH
2651: CALL_OW 88
// end ;
2655: END
// every 0 0$1 trigger MissionStart and GetResourceArea ( CratesArea , mat_cans ) < 20 do
2656: LD_EXP 1
2660: PUSH
2661: LD_INT 12
2663: PPUSH
2664: LD_INT 1
2666: PPUSH
2667: CALL_OW 287
2671: PUSH
2672: LD_INT 20
2674: LESS
2675: AND
2676: IFFALSE 2718
2678: GO 2680
2680: DISABLE
// begin wait ( rand ( 0 0$50 , 2 2$20 ) ) ;
2681: LD_INT 1750
2683: PPUSH
2684: LD_INT 4900
2686: PPUSH
2687: CALL_OW 12
2691: PPUSH
2692: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
2696: LD_INT 2
2698: PPUSH
2699: LD_INT 5
2701: PPUSH
2702: CALL_OW 12
2706: PPUSH
2707: LD_INT 12
2709: PPUSH
2710: LD_INT 1
2712: PPUSH
2713: CALL_OW 55
// enable ;
2717: ENABLE
// end ;
2718: END
// every 0 0$1 trigger MissionStart do
2719: LD_EXP 1
2723: IFFALSE 2746
2725: GO 2727
2727: DISABLE
// begin enable ;
2728: ENABLE
// display_Strings := [ #tick , tick ] ;
2729: LD_ADDR_OWVAR 47
2733: PUSH
2734: LD_STRING #tick
2736: PUSH
2737: LD_OWVAR 1
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: ST_TO_ADDR
// end ; end_of_file
2746: END
// export Brighton , Palmer , Megan ; export BetaSquad ; export function PrepareHeroes ; begin
2747: LD_INT 0
2749: PPUSH
// uc_side := 1 ;
2750: LD_ADDR_OWVAR 20
2754: PUSH
2755: LD_INT 1
2757: ST_TO_ADDR
// hc_class = class_soldier ;
2758: LD_ADDR_OWVAR 28
2762: PUSH
2763: LD_INT 1
2765: ST_TO_ADDR
// uc_nation := nation_american ;
2766: LD_ADDR_OWVAR 21
2770: PUSH
2771: LD_INT 1
2773: ST_TO_ADDR
// hc_sex = sex_male ;
2774: LD_ADDR_OWVAR 27
2778: PUSH
2779: LD_INT 1
2781: ST_TO_ADDR
// hc_importance = 110 ;
2782: LD_ADDR_OWVAR 32
2786: PUSH
2787: LD_INT 110
2789: ST_TO_ADDR
// hc_basic_skills = [ 5 , 4 , 5 , 3 ] ;
2790: LD_ADDR_OWVAR 30
2794: PUSH
2795: LD_INT 5
2797: PUSH
2798: LD_INT 4
2800: PUSH
2801: LD_INT 5
2803: PUSH
2804: LD_INT 3
2806: PUSH
2807: EMPTY
2808: LIST
2809: LIST
2810: LIST
2811: LIST
2812: ST_TO_ADDR
// hc_skills = [ 9 , 6 , 7 , 6 ] ;
2813: LD_ADDR_OWVAR 31
2817: PUSH
2818: LD_INT 9
2820: PUSH
2821: LD_INT 6
2823: PUSH
2824: LD_INT 7
2826: PUSH
2827: LD_INT 6
2829: PUSH
2830: EMPTY
2831: LIST
2832: LIST
2833: LIST
2834: LIST
2835: ST_TO_ADDR
// hc_attr = [ 12 , 10 ] ;
2836: LD_ADDR_OWVAR 29
2840: PUSH
2841: LD_INT 12
2843: PUSH
2844: LD_INT 10
2846: PUSH
2847: EMPTY
2848: LIST
2849: LIST
2850: ST_TO_ADDR
// hc_name := Gerard Brighton ;
2851: LD_ADDR_OWVAR 26
2855: PUSH
2856: LD_STRING Gerard Brighton
2858: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2859: LD_ADDR_OWVAR 33
2863: PUSH
2864: LD_STRING Beta_Skirmish
2866: ST_TO_ADDR
// hc_face_number := 1 ;
2867: LD_ADDR_OWVAR 34
2871: PUSH
2872: LD_INT 1
2874: ST_TO_ADDR
// Brighton := CreateHuman ;
2875: LD_ADDR_EXP 9
2879: PUSH
2880: CALL_OW 44
2884: ST_TO_ADDR
// uc_nation := nation_american ;
2885: LD_ADDR_OWVAR 21
2889: PUSH
2890: LD_INT 1
2892: ST_TO_ADDR
// hc_importance = 80 ;
2893: LD_ADDR_OWVAR 32
2897: PUSH
2898: LD_INT 80
2900: ST_TO_ADDR
// hc_sex = sex_male ;
2901: LD_ADDR_OWVAR 27
2905: PUSH
2906: LD_INT 1
2908: ST_TO_ADDR
// hc_basic_skills = [ 5 , 5 , 3 , 1 ] ;
2909: LD_ADDR_OWVAR 30
2913: PUSH
2914: LD_INT 5
2916: PUSH
2917: LD_INT 5
2919: PUSH
2920: LD_INT 3
2922: PUSH
2923: LD_INT 1
2925: PUSH
2926: EMPTY
2927: LIST
2928: LIST
2929: LIST
2930: LIST
2931: ST_TO_ADDR
// hc_skills = [ 7 , 6 , 5 , 3 ] ;
2932: LD_ADDR_OWVAR 31
2936: PUSH
2937: LD_INT 7
2939: PUSH
2940: LD_INT 6
2942: PUSH
2943: LD_INT 5
2945: PUSH
2946: LD_INT 3
2948: PUSH
2949: EMPTY
2950: LIST
2951: LIST
2952: LIST
2953: LIST
2954: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2955: LD_ADDR_OWVAR 29
2959: PUSH
2960: LD_INT 10
2962: PUSH
2963: LD_INT 10
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: ST_TO_ADDR
// hc_name := Brian Palmer ;
2970: LD_ADDR_OWVAR 26
2974: PUSH
2975: LD_STRING Brian Palmer
2977: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2978: LD_ADDR_OWVAR 33
2982: PUSH
2983: LD_STRING Beta_Skirmish
2985: ST_TO_ADDR
// hc_face_number := 3 ;
2986: LD_ADDR_OWVAR 34
2990: PUSH
2991: LD_INT 3
2993: ST_TO_ADDR
// Palmer := CreateHuman ;
2994: LD_ADDR_EXP 10
2998: PUSH
2999: CALL_OW 44
3003: ST_TO_ADDR
// hc_class = class_scientistic ;
3004: LD_ADDR_OWVAR 28
3008: PUSH
3009: LD_INT 4
3011: ST_TO_ADDR
// uc_nation := nation_american ;
3012: LD_ADDR_OWVAR 21
3016: PUSH
3017: LD_INT 1
3019: ST_TO_ADDR
// hc_importance = 70 ;
3020: LD_ADDR_OWVAR 32
3024: PUSH
3025: LD_INT 70
3027: ST_TO_ADDR
// hc_sex = sex_female ;
3028: LD_ADDR_OWVAR 27
3032: PUSH
3033: LD_INT 2
3035: ST_TO_ADDR
// hc_basic_skills = [ 3 , 2 , 4 , 6 ] ;
3036: LD_ADDR_OWVAR 30
3040: PUSH
3041: LD_INT 3
3043: PUSH
3044: LD_INT 2
3046: PUSH
3047: LD_INT 4
3049: PUSH
3050: LD_INT 6
3052: PUSH
3053: EMPTY
3054: LIST
3055: LIST
3056: LIST
3057: LIST
3058: ST_TO_ADDR
// hc_skills = [ 4 , 2 , 5 , 8 ] ;
3059: LD_ADDR_OWVAR 31
3063: PUSH
3064: LD_INT 4
3066: PUSH
3067: LD_INT 2
3069: PUSH
3070: LD_INT 5
3072: PUSH
3073: LD_INT 8
3075: PUSH
3076: EMPTY
3077: LIST
3078: LIST
3079: LIST
3080: LIST
3081: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
3082: LD_ADDR_OWVAR 29
3086: PUSH
3087: LD_INT 10
3089: PUSH
3090: LD_INT 10
3092: PUSH
3093: EMPTY
3094: LIST
3095: LIST
3096: ST_TO_ADDR
// hc_name := Megan Armitage ;
3097: LD_ADDR_OWVAR 26
3101: PUSH
3102: LD_STRING Megan Armitage
3104: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
3105: LD_ADDR_OWVAR 33
3109: PUSH
3110: LD_STRING Beta_Skirmish
3112: ST_TO_ADDR
// hc_face_number := 4 ;
3113: LD_ADDR_OWVAR 34
3117: PUSH
3118: LD_INT 4
3120: ST_TO_ADDR
// Megan := CreateHuman ;
3121: LD_ADDR_EXP 11
3125: PUSH
3126: CALL_OW 44
3130: ST_TO_ADDR
// end ;
3131: LD_VAR 0 1
3135: RET
// export function PrepareBeta ; var i , filter , un , soldiers ; begin
3136: LD_INT 0
3138: PPUSH
3139: PPUSH
3140: PPUSH
3141: PPUSH
3142: PPUSH
// uc_side := 1 ;
3143: LD_ADDR_OWVAR 20
3147: PUSH
3148: LD_INT 1
3150: ST_TO_ADDR
// uc_nation := nation_american ;
3151: LD_ADDR_OWVAR 21
3155: PUSH
3156: LD_INT 1
3158: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
3159: LD_ADDR_VAR 0 2
3163: PUSH
3164: LD_INT 22
3166: PUSH
3167: LD_INT 1
3169: PUSH
3170: EMPTY
3171: LIST
3172: LIST
3173: PUSH
3174: LD_INT 30
3176: PUSH
3177: LD_INT 32
3179: PUSH
3180: EMPTY
3181: LIST
3182: LIST
3183: PUSH
3184: EMPTY
3185: LIST
3186: LIST
3187: PPUSH
3188: CALL_OW 69
3192: PUSH
3193: FOR_IN
3194: IFFALSE 3249
// PlaceWeaponTurret ( i , [ us_light_gun , us_light_gun , us_gatling_gun , us_double_gun , us_radar , us_light_gun , us_gatling_gun ] [ rand ( 1 , 7 ) ] ) ;
3196: LD_VAR 0 2
3200: PPUSH
3201: LD_INT 3
3203: PUSH
3204: LD_INT 3
3206: PUSH
3207: LD_INT 4
3209: PUSH
3210: LD_INT 5
3212: PUSH
3213: LD_INT 11
3215: PUSH
3216: LD_INT 3
3218: PUSH
3219: LD_INT 4
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: LIST
3229: LIST
3230: PUSH
3231: LD_INT 1
3233: PPUSH
3234: LD_INT 7
3236: PPUSH
3237: CALL_OW 12
3241: ARRAY
3242: PPUSH
3243: CALL_OW 431
3247: GO 3193
3249: POP
3250: POP
// hc_name :=  ;
3251: LD_ADDR_OWVAR 26
3255: PUSH
3256: LD_STRING 
3258: ST_TO_ADDR
// hc_gallery :=  ;
3259: LD_ADDR_OWVAR 33
3263: PUSH
3264: LD_STRING 
3266: ST_TO_ADDR
// for i = 1 to [ 6 , 5 , 5 ] [ Difficulty ] do
3267: LD_ADDR_VAR 0 2
3271: PUSH
3272: DOUBLE
3273: LD_INT 1
3275: DEC
3276: ST_TO_ADDR
3277: LD_INT 6
3279: PUSH
3280: LD_INT 5
3282: PUSH
3283: LD_INT 5
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: LIST
3290: PUSH
3291: LD_OWVAR 67
3295: ARRAY
3296: PUSH
3297: FOR_TO
3298: IFFALSE 3356
// begin PrepareSoldier ( 1 , game_skill ) ;
3300: LD_INT 1
3302: PPUSH
3303: LD_EXP 39
3307: PPUSH
3308: CALL_OW 381
// un := CreateHuman ;
3312: LD_ADDR_VAR 0 4
3316: PUSH
3317: CALL_OW 44
3321: ST_TO_ADDR
// filter := filter ^ un ;
3322: LD_ADDR_VAR 0 3
3326: PUSH
3327: LD_VAR 0 3
3331: PUSH
3332: LD_VAR 0 4
3336: ADD
3337: ST_TO_ADDR
// soldiers := soldiers ^ un ;
3338: LD_ADDR_VAR 0 5
3342: PUSH
3343: LD_VAR 0 5
3347: PUSH
3348: LD_VAR 0 4
3352: ADD
3353: ST_TO_ADDR
// end ;
3354: GO 3297
3356: POP
3357: POP
// for i = 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
3358: LD_ADDR_VAR 0 2
3362: PUSH
3363: DOUBLE
3364: LD_INT 1
3366: DEC
3367: ST_TO_ADDR
3368: LD_INT 3
3370: PUSH
3371: LD_INT 2
3373: PUSH
3374: LD_INT 2
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: LIST
3381: PUSH
3382: LD_OWVAR 67
3386: ARRAY
3387: PUSH
3388: FOR_TO
3389: IFFALSE 3443
// begin PrepareEngineer ( 0 , game_skill ) ;
3391: LD_INT 0
3393: PPUSH
3394: LD_EXP 39
3398: PPUSH
3399: CALL_OW 382
// un := CreateHuman ;
3403: LD_ADDR_VAR 0 4
3407: PUSH
3408: CALL_OW 44
3412: ST_TO_ADDR
// filter := filter ^ un ;
3413: LD_ADDR_VAR 0 3
3417: PUSH
3418: LD_VAR 0 3
3422: PUSH
3423: LD_VAR 0 4
3427: ADD
3428: ST_TO_ADDR
// PlaceHumanInUnit ( un , BetaB ) ;
3429: LD_VAR 0 4
3433: PPUSH
3434: LD_INT 3
3436: PPUSH
3437: CALL_OW 52
// end ;
3441: GO 3388
3443: POP
3444: POP
// for i = 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
3445: LD_ADDR_VAR 0 2
3449: PUSH
3450: DOUBLE
3451: LD_INT 1
3453: DEC
3454: ST_TO_ADDR
3455: LD_INT 4
3457: PUSH
3458: LD_INT 3
3460: PUSH
3461: LD_INT 3
3463: PUSH
3464: EMPTY
3465: LIST
3466: LIST
3467: LIST
3468: PUSH
3469: LD_OWVAR 67
3473: ARRAY
3474: PUSH
3475: FOR_TO
3476: IFFALSE 3530
// begin PrepareMechanic ( 0 , game_skill ) ;
3478: LD_INT 0
3480: PPUSH
3481: LD_EXP 39
3485: PPUSH
3486: CALL_OW 383
// un := CreateHuman ;
3490: LD_ADDR_VAR 0 4
3494: PUSH
3495: CALL_OW 44
3499: ST_TO_ADDR
// filter := filter ^ un ;
3500: LD_ADDR_VAR 0 3
3504: PUSH
3505: LD_VAR 0 3
3509: PUSH
3510: LD_VAR 0 4
3514: ADD
3515: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmFac ) ;
3516: LD_VAR 0 4
3520: PPUSH
3521: LD_INT 8
3523: PPUSH
3524: CALL_OW 52
// end ;
3528: GO 3475
3530: POP
3531: POP
// for i = 1 to 2 do
3532: LD_ADDR_VAR 0 2
3536: PUSH
3537: DOUBLE
3538: LD_INT 1
3540: DEC
3541: ST_TO_ADDR
3542: LD_INT 2
3544: PUSH
3545: FOR_TO
3546: IFFALSE 3600
// begin PrepareScientist ( 0 , game_skill ) ;
3548: LD_INT 0
3550: PPUSH
3551: LD_EXP 39
3555: PPUSH
3556: CALL_OW 384
// un := CreateHuman ;
3560: LD_ADDR_VAR 0 4
3564: PUSH
3565: CALL_OW 44
3569: ST_TO_ADDR
// filter := filter ^ un ;
3570: LD_ADDR_VAR 0 3
3574: PUSH
3575: LD_VAR 0 3
3579: PUSH
3580: LD_VAR 0 4
3584: ADD
3585: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmLab ) ;
3586: LD_VAR 0 4
3590: PPUSH
3591: LD_INT 14
3593: PPUSH
3594: CALL_OW 52
// end ;
3598: GO 3545
3600: POP
3601: POP
// for i = 1 to soldiers do
3602: LD_ADDR_VAR 0 2
3606: PUSH
3607: DOUBLE
3608: LD_INT 1
3610: DEC
3611: ST_TO_ADDR
3612: LD_VAR 0 5
3616: PUSH
3617: FOR_TO
3618: IFFALSE 3643
// PlaceUnitArea ( soldiers [ i ] , spawn_area , false ) ;
3620: LD_VAR 0 5
3624: PUSH
3625: LD_VAR 0 2
3629: ARRAY
3630: PPUSH
3631: LD_INT 1
3633: PPUSH
3634: LD_INT 0
3636: PPUSH
3637: CALL_OW 49
3641: GO 3617
3643: POP
3644: POP
// PlaceUnitXY ( Brighton , 51 , 43 , false ) ;
3645: LD_EXP 9
3649: PPUSH
3650: LD_INT 51
3652: PPUSH
3653: LD_INT 43
3655: PPUSH
3656: LD_INT 0
3658: PPUSH
3659: CALL_OW 48
// PlaceUnitXY ( Palmer , 55 , 58 , false ) ;
3663: LD_EXP 10
3667: PPUSH
3668: LD_INT 55
3670: PPUSH
3671: LD_INT 58
3673: PPUSH
3674: LD_INT 0
3676: PPUSH
3677: CALL_OW 48
// PlaceUnitXY ( Megan , 39 , 36 , false ) ;
3681: LD_EXP 11
3685: PPUSH
3686: LD_INT 39
3688: PPUSH
3689: LD_INT 36
3691: PPUSH
3692: LD_INT 0
3694: PPUSH
3695: CALL_OW 48
// BetaSquad := filter diff 0 ;
3699: LD_ADDR_EXP 12
3703: PUSH
3704: LD_VAR 0 3
3708: PUSH
3709: LD_INT 0
3711: DIFF
3712: ST_TO_ADDR
// end ;
3713: LD_VAR 0 1
3717: RET
// export Yashin , Popov , Gaydar , Sevi ; export RUArmada ; export function PrepareRUArmada ; var i , vehicle , soldiers , un , vehs ; begin
3718: LD_INT 0
3720: PPUSH
3721: PPUSH
3722: PPUSH
3723: PPUSH
3724: PPUSH
3725: PPUSH
// uc_side := 6 ;
3726: LD_ADDR_OWVAR 20
3730: PUSH
3731: LD_INT 6
3733: ST_TO_ADDR
// uc_nation := nation_russian ;
3734: LD_ADDR_OWVAR 21
3738: PUSH
3739: LD_INT 3
3741: ST_TO_ADDR
// soldiers := [ ] ;
3742: LD_ADDR_VAR 0 4
3746: PUSH
3747: EMPTY
3748: ST_TO_ADDR
// vehs := [ ] ;
3749: LD_ADDR_VAR 0 6
3753: PUSH
3754: EMPTY
3755: ST_TO_ADDR
// RUArmada := [ ] ;
3756: LD_ADDR_EXP 17
3760: PUSH
3761: EMPTY
3762: ST_TO_ADDR
// Yashin := NewCharacter ( Yashin ) ;
3763: LD_ADDR_EXP 13
3767: PUSH
3768: LD_STRING Yashin
3770: PPUSH
3771: CALL_OW 25
3775: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
3776: LD_ADDR_EXP 14
3780: PUSH
3781: LD_STRING Popov
3783: PPUSH
3784: CALL_OW 25
3788: ST_TO_ADDR
// Gaydar := NewCharacter ( Gaydar ) ;
3789: LD_ADDR_EXP 15
3793: PUSH
3794: LD_STRING Gaydar
3796: PPUSH
3797: CALL_OW 25
3801: ST_TO_ADDR
// Sevi := NewCharacter ( Vsevolod ) ;
3802: LD_ADDR_EXP 16
3806: PUSH
3807: LD_STRING Vsevolod
3809: PPUSH
3810: CALL_OW 25
3814: ST_TO_ADDR
// for i = 1 to 16 do
3815: LD_ADDR_VAR 0 2
3819: PUSH
3820: DOUBLE
3821: LD_INT 1
3823: DEC
3824: ST_TO_ADDR
3825: LD_INT 16
3827: PUSH
3828: FOR_TO
3829: IFFALSE 3871
// begin PrepareSoldier ( 0 , game_eskill ) ;
3831: LD_INT 0
3833: PPUSH
3834: LD_EXP 40
3838: PPUSH
3839: CALL_OW 381
// un := CreateHuman ;
3843: LD_ADDR_VAR 0 5
3847: PUSH
3848: CALL_OW 44
3852: ST_TO_ADDR
// soldiers := soldiers ^ un ;
3853: LD_ADDR_VAR 0 4
3857: PUSH
3858: LD_VAR 0 4
3862: PUSH
3863: LD_VAR 0 5
3867: ADD
3868: ST_TO_ADDR
// end ;
3869: GO 3828
3871: POP
3872: POP
// soldiers := Yashin ^ Popov ^ Gaydar ^ Sevi ^ soldiers ;
3873: LD_ADDR_VAR 0 4
3877: PUSH
3878: LD_EXP 13
3882: PUSH
3883: LD_EXP 14
3887: ADD
3888: PUSH
3889: LD_EXP 15
3893: ADD
3894: PUSH
3895: LD_EXP 16
3899: ADD
3900: PUSH
3901: LD_VAR 0 4
3905: ADD
3906: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_heavy_gun , 100 ) ;
3907: LD_INT 24
3909: PPUSH
3910: LD_INT 3
3912: PPUSH
3913: LD_INT 1
3915: PPUSH
3916: LD_INT 46
3918: PPUSH
3919: LD_INT 100
3921: PPUSH
3922: CALL 18298 0 5
// for i = 1 to 8 do
3926: LD_ADDR_VAR 0 2
3930: PUSH
3931: DOUBLE
3932: LD_INT 1
3934: DEC
3935: ST_TO_ADDR
3936: LD_INT 8
3938: PUSH
3939: FOR_TO
3940: IFFALSE 4023
// begin vehicle := CreateVehicle ;
3942: LD_ADDR_VAR 0 3
3946: PUSH
3947: CALL_OW 45
3951: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3952: LD_VAR 0 4
3956: PUSH
3957: LD_INT 1
3959: ARRAY
3960: PPUSH
3961: LD_VAR 0 3
3965: PPUSH
3966: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3970: LD_ADDR_VAR 0 4
3974: PUSH
3975: LD_VAR 0 4
3979: PUSH
3980: LD_VAR 0 4
3984: PUSH
3985: LD_INT 1
3987: ARRAY
3988: DIFF
3989: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3990: LD_VAR 0 3
3994: PPUSH
3995: LD_INT 5
3997: PPUSH
3998: LD_INT 0
4000: PPUSH
4001: CALL_OW 49
// vehs := vehs ^ vehicle ;
4005: LD_ADDR_VAR 0 6
4009: PUSH
4010: LD_VAR 0 6
4014: PUSH
4015: LD_VAR 0 3
4019: ADD
4020: ST_TO_ADDR
// end ;
4021: GO 3939
4023: POP
4024: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_gatling_gun , 100 ) ;
4025: LD_INT 24
4027: PPUSH
4028: LD_INT 3
4030: PPUSH
4031: LD_INT 1
4033: PPUSH
4034: LD_INT 43
4036: PPUSH
4037: LD_INT 100
4039: PPUSH
4040: CALL 18298 0 5
// for i = 1 to 8 do
4044: LD_ADDR_VAR 0 2
4048: PUSH
4049: DOUBLE
4050: LD_INT 1
4052: DEC
4053: ST_TO_ADDR
4054: LD_INT 8
4056: PUSH
4057: FOR_TO
4058: IFFALSE 4141
// begin vehicle := CreateVehicle ;
4060: LD_ADDR_VAR 0 3
4064: PUSH
4065: CALL_OW 45
4069: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
4070: LD_VAR 0 4
4074: PUSH
4075: LD_INT 1
4077: ARRAY
4078: PPUSH
4079: LD_VAR 0 3
4083: PPUSH
4084: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
4088: LD_ADDR_VAR 0 4
4092: PUSH
4093: LD_VAR 0 4
4097: PUSH
4098: LD_VAR 0 4
4102: PUSH
4103: LD_INT 1
4105: ARRAY
4106: DIFF
4107: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
4108: LD_VAR 0 3
4112: PPUSH
4113: LD_INT 5
4115: PPUSH
4116: LD_INT 0
4118: PPUSH
4119: CALL_OW 49
// vehs := vehs ^ vehicle ;
4123: LD_ADDR_VAR 0 6
4127: PUSH
4128: LD_VAR 0 6
4132: PUSH
4133: LD_VAR 0 3
4137: ADD
4138: ST_TO_ADDR
// end ;
4139: GO 4057
4141: POP
4142: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_gun , 100 ) ;
4143: LD_INT 22
4145: PPUSH
4146: LD_INT 3
4148: PPUSH
4149: LD_INT 1
4151: PPUSH
4152: LD_INT 44
4154: PPUSH
4155: LD_INT 100
4157: PPUSH
4158: CALL 18298 0 5
// for i = 1 to 4 do
4162: LD_ADDR_VAR 0 2
4166: PUSH
4167: DOUBLE
4168: LD_INT 1
4170: DEC
4171: ST_TO_ADDR
4172: LD_INT 4
4174: PUSH
4175: FOR_TO
4176: IFFALSE 4259
// begin vehicle := CreateVehicle ;
4178: LD_ADDR_VAR 0 3
4182: PUSH
4183: CALL_OW 45
4187: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
4188: LD_VAR 0 4
4192: PUSH
4193: LD_INT 1
4195: ARRAY
4196: PPUSH
4197: LD_VAR 0 3
4201: PPUSH
4202: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
4206: LD_ADDR_VAR 0 4
4210: PUSH
4211: LD_VAR 0 4
4215: PUSH
4216: LD_VAR 0 4
4220: PUSH
4221: LD_INT 1
4223: ARRAY
4224: DIFF
4225: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
4226: LD_VAR 0 3
4230: PPUSH
4231: LD_INT 5
4233: PPUSH
4234: LD_INT 0
4236: PPUSH
4237: CALL_OW 49
// vehs := vehs ^ vehicle ;
4241: LD_ADDR_VAR 0 6
4245: PUSH
4246: LD_VAR 0 6
4250: PUSH
4251: LD_VAR 0 3
4255: ADD
4256: ST_TO_ADDR
// end ;
4257: GO 4175
4259: POP
4260: POP
// RUArmada := vehs ;
4261: LD_ADDR_EXP 17
4265: PUSH
4266: LD_VAR 0 6
4270: ST_TO_ADDR
// SetMark ( [ IsInUnit ( Yashin ) , IsInUnit ( Popov ) , IsInUnit ( Gaydar ) , IsInUnit ( Sevi ) ] , - 6 ) ;
4271: LD_EXP 13
4275: PPUSH
4276: CALL_OW 310
4280: PUSH
4281: LD_EXP 14
4285: PPUSH
4286: CALL_OW 310
4290: PUSH
4291: LD_EXP 15
4295: PPUSH
4296: CALL_OW 310
4300: PUSH
4301: LD_EXP 16
4305: PPUSH
4306: CALL_OW 310
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: LIST
4315: LIST
4316: PPUSH
4317: LD_INT 6
4319: NEG
4320: PPUSH
4321: CALL_OW 242
// end ;
4325: LD_VAR 0 1
4329: RET
// export Bulldozers ; export function PrepareRUBulldozers ; var i , vehicle ; begin
4330: LD_INT 0
4332: PPUSH
4333: PPUSH
4334: PPUSH
// uc_side := 6 ;
4335: LD_ADDR_OWVAR 20
4339: PUSH
4340: LD_INT 6
4342: ST_TO_ADDR
// uc_nation := nation_russian ;
4343: LD_ADDR_OWVAR 21
4347: PUSH
4348: LD_INT 3
4350: ST_TO_ADDR
// Bulldozers := [ ] ;
4351: LD_ADDR_EXP 18
4355: PUSH
4356: EMPTY
4357: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_bulldozer , 100 ) ;
4358: LD_INT 24
4360: PPUSH
4361: LD_INT 3
4363: PPUSH
4364: LD_INT 3
4366: PPUSH
4367: LD_INT 53
4369: PPUSH
4370: LD_INT 100
4372: PPUSH
4373: CALL 18298 0 5
// for i = 1 to 2 do
4377: LD_ADDR_VAR 0 2
4381: PUSH
4382: DOUBLE
4383: LD_INT 1
4385: DEC
4386: ST_TO_ADDR
4387: LD_INT 2
4389: PUSH
4390: FOR_TO
4391: IFFALSE 4436
// begin vehicle := CreateVehicle ;
4393: LD_ADDR_VAR 0 3
4397: PUSH
4398: CALL_OW 45
4402: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
4403: LD_VAR 0 3
4407: PPUSH
4408: LD_INT 5
4410: PPUSH
4411: LD_INT 0
4413: PPUSH
4414: CALL_OW 49
// Bulldozers := Bulldozers ^ vehicle ;
4418: LD_ADDR_EXP 18
4422: PUSH
4423: LD_EXP 18
4427: PUSH
4428: LD_VAR 0 3
4432: ADD
4433: ST_TO_ADDR
// end ;
4434: GO 4390
4436: POP
4437: POP
// end ;
4438: LD_VAR 0 1
4442: RET
// export Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ; export function PrepareRUBase ; var i , filter , un ; begin
4443: LD_INT 0
4445: PPUSH
4446: PPUSH
4447: PPUSH
4448: PPUSH
// uc_side := 3 ;
4449: LD_ADDR_OWVAR 20
4453: PUSH
4454: LD_INT 3
4456: ST_TO_ADDR
// uc_nation := nation_russian ;
4457: LD_ADDR_OWVAR 21
4461: PUSH
4462: LD_INT 3
4464: ST_TO_ADDR
// hc_name :=  ;
4465: LD_ADDR_OWVAR 26
4469: PUSH
4470: LD_STRING 
4472: ST_TO_ADDR
// hc_gallery :=  ;
4473: LD_ADDR_OWVAR 33
4477: PUSH
4478: LD_STRING 
4480: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
4481: LD_ADDR_EXP 19
4485: PUSH
4486: LD_STRING Burlak
4488: PPUSH
4489: CALL_OW 25
4493: ST_TO_ADDR
// Gleb := NewCharacter ( Gleb ) ;
4494: LD_ADDR_EXP 20
4498: PUSH
4499: LD_STRING Gleb
4501: PPUSH
4502: CALL_OW 25
4506: ST_TO_ADDR
// Furmanov := NewCharacter ( Furmanov ) ;
4507: LD_ADDR_EXP 21
4511: PUSH
4512: LD_STRING Furmanov
4514: PPUSH
4515: CALL_OW 25
4519: ST_TO_ADDR
// Titov := NewCharacter ( Titov ) ;
4520: LD_ADDR_EXP 22
4524: PUSH
4525: LD_STRING Titov
4527: PPUSH
4528: CALL_OW 25
4532: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
4533: LD_ADDR_EXP 23
4537: PUSH
4538: LD_STRING Scholtze
4540: PPUSH
4541: CALL_OW 25
4545: ST_TO_ADDR
// Dolgov := NewCharacter ( Dolgov ) ;
4546: LD_ADDR_EXP 24
4550: PUSH
4551: LD_STRING Dolgov
4553: PPUSH
4554: CALL_OW 25
4558: ST_TO_ADDR
// Kapitsova := NewCharacter ( Kapitsova ) ;
4559: LD_ADDR_EXP 25
4563: PUSH
4564: LD_STRING Kapitsova
4566: PPUSH
4567: CALL_OW 25
4571: ST_TO_ADDR
// Karamazov := NewCharacter ( Karamazov ) ;
4572: LD_ADDR_EXP 26
4576: PUSH
4577: LD_STRING Karamazov
4579: PPUSH
4580: CALL_OW 25
4584: ST_TO_ADDR
// Kirlenkova := NewCharacter ( Kirlenkova ) ;
4585: LD_ADDR_EXP 27
4589: PUSH
4590: LD_STRING Kirlenkova
4592: PPUSH
4593: CALL_OW 25
4597: ST_TO_ADDR
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
4598: LD_ADDR_EXP 28
4602: PUSH
4603: LD_STRING Kovalyuk
4605: PPUSH
4606: CALL_OW 25
4610: ST_TO_ADDR
// Kozlov := NewCharacter ( Kozlov ) ;
4611: LD_ADDR_EXP 29
4615: PUSH
4616: LD_STRING Kozlov
4618: PPUSH
4619: CALL_OW 25
4623: ST_TO_ADDR
// Kuzmov := NewCharacter ( Kuzmov ) ;
4624: LD_ADDR_EXP 30
4628: PUSH
4629: LD_STRING Kuzmov
4631: PPUSH
4632: CALL_OW 25
4636: ST_TO_ADDR
// Lipshchin := NewCharacter ( Lipshchin ) ;
4637: LD_ADDR_EXP 31
4641: PUSH
4642: LD_STRING Lipshchin
4644: PPUSH
4645: CALL_OW 25
4649: ST_TO_ADDR
// Oblukov := NewCharacter ( Oblukov ) ;
4650: LD_ADDR_EXP 32
4654: PUSH
4655: LD_STRING Oblukov
4657: PPUSH
4658: CALL_OW 25
4662: ST_TO_ADDR
// Xavier2 := NewCharacter ( Xavier2 ) ;
4663: LD_ADDR_EXP 33
4667: PUSH
4668: LD_STRING Xavier2
4670: PPUSH
4671: CALL_OW 25
4675: ST_TO_ADDR
// Gnyevko := NewCharacter ( Gnyevko ) ;
4676: LD_ADDR_EXP 34
4680: PUSH
4681: LD_STRING Gnyevko
4683: PPUSH
4684: CALL_OW 25
4688: ST_TO_ADDR
// Belkov := NewCharacter ( Belkov ) ;
4689: LD_ADDR_EXP 35
4693: PUSH
4694: LD_STRING Belkov
4696: PPUSH
4697: CALL_OW 25
4701: ST_TO_ADDR
// filter := [ Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ] ;
4702: LD_ADDR_VAR 0 3
4706: PUSH
4707: LD_EXP 19
4711: PUSH
4712: LD_EXP 20
4716: PUSH
4717: LD_EXP 21
4721: PUSH
4722: LD_EXP 22
4726: PUSH
4727: LD_EXP 23
4731: PUSH
4732: LD_EXP 24
4736: PUSH
4737: LD_EXP 25
4741: PUSH
4742: LD_EXP 26
4746: PUSH
4747: LD_EXP 27
4751: PUSH
4752: LD_EXP 28
4756: PUSH
4757: LD_EXP 29
4761: PUSH
4762: LD_EXP 30
4766: PUSH
4767: LD_EXP 31
4771: PUSH
4772: LD_EXP 32
4776: PUSH
4777: LD_EXP 33
4781: PUSH
4782: LD_EXP 34
4786: PUSH
4787: LD_EXP 35
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: ST_TO_ADDR
// for i = 1 to filter do
4811: LD_ADDR_VAR 0 2
4815: PUSH
4816: DOUBLE
4817: LD_INT 1
4819: DEC
4820: ST_TO_ADDR
4821: LD_VAR 0 3
4825: PUSH
4826: FOR_TO
4827: IFFALSE 4852
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
4829: LD_VAR 0 3
4833: PUSH
4834: LD_VAR 0 2
4838: ARRAY
4839: PPUSH
4840: LD_INT 6
4842: PPUSH
4843: LD_INT 0
4845: PPUSH
4846: CALL_OW 49
4850: GO 4826
4852: POP
4853: POP
// end ;
4854: LD_VAR 0 1
4858: RET
// export RU_SecondPersonnel ; export function PrepareRUBase_v2 ; var i , filter , un ; begin
4859: LD_INT 0
4861: PPUSH
4862: PPUSH
4863: PPUSH
4864: PPUSH
// uc_side := 3 ;
4865: LD_ADDR_OWVAR 20
4869: PUSH
4870: LD_INT 3
4872: ST_TO_ADDR
// uc_nation := nation_russian ;
4873: LD_ADDR_OWVAR 21
4877: PUSH
4878: LD_INT 3
4880: ST_TO_ADDR
// hc_name :=  ;
4881: LD_ADDR_OWVAR 26
4885: PUSH
4886: LD_STRING 
4888: ST_TO_ADDR
// hc_gallery :=  ;
4889: LD_ADDR_OWVAR 33
4893: PUSH
4894: LD_STRING 
4896: ST_TO_ADDR
// for i = 1 to 8 do
4897: LD_ADDR_VAR 0 2
4901: PUSH
4902: DOUBLE
4903: LD_INT 1
4905: DEC
4906: ST_TO_ADDR
4907: LD_INT 8
4909: PUSH
4910: FOR_TO
4911: IFFALSE 4953
// begin PrepareSoldier ( 0 , game_eskill ) ;
4913: LD_INT 0
4915: PPUSH
4916: LD_EXP 40
4920: PPUSH
4921: CALL_OW 381
// un := CreateHuman ;
4925: LD_ADDR_VAR 0 4
4929: PUSH
4930: CALL_OW 44
4934: ST_TO_ADDR
// filter := filter ^ un ;
4935: LD_ADDR_VAR 0 3
4939: PUSH
4940: LD_VAR 0 3
4944: PUSH
4945: LD_VAR 0 4
4949: ADD
4950: ST_TO_ADDR
// end ;
4951: GO 4910
4953: POP
4954: POP
// for i = 1 to 4 do
4955: LD_ADDR_VAR 0 2
4959: PUSH
4960: DOUBLE
4961: LD_INT 1
4963: DEC
4964: ST_TO_ADDR
4965: LD_INT 4
4967: PUSH
4968: FOR_TO
4969: IFFALSE 5011
// begin PrepareEngineer ( 0 , game_eskill ) ;
4971: LD_INT 0
4973: PPUSH
4974: LD_EXP 40
4978: PPUSH
4979: CALL_OW 382
// un := CreateHuman ;
4983: LD_ADDR_VAR 0 4
4987: PUSH
4988: CALL_OW 44
4992: ST_TO_ADDR
// filter := filter ^ un ;
4993: LD_ADDR_VAR 0 3
4997: PUSH
4998: LD_VAR 0 3
5002: PUSH
5003: LD_VAR 0 4
5007: ADD
5008: ST_TO_ADDR
// end ;
5009: GO 4968
5011: POP
5012: POP
// for i = 1 to 6 do
5013: LD_ADDR_VAR 0 2
5017: PUSH
5018: DOUBLE
5019: LD_INT 1
5021: DEC
5022: ST_TO_ADDR
5023: LD_INT 6
5025: PUSH
5026: FOR_TO
5027: IFFALSE 5069
// begin PrepareMechanic ( 0 , game_eskill ) ;
5029: LD_INT 0
5031: PPUSH
5032: LD_EXP 40
5036: PPUSH
5037: CALL_OW 383
// un := CreateHuman ;
5041: LD_ADDR_VAR 0 4
5045: PUSH
5046: CALL_OW 44
5050: ST_TO_ADDR
// filter := filter ^ un ;
5051: LD_ADDR_VAR 0 3
5055: PUSH
5056: LD_VAR 0 3
5060: PUSH
5061: LD_VAR 0 4
5065: ADD
5066: ST_TO_ADDR
// end ;
5067: GO 5026
5069: POP
5070: POP
// for i = 1 to 4 do
5071: LD_ADDR_VAR 0 2
5075: PUSH
5076: DOUBLE
5077: LD_INT 1
5079: DEC
5080: ST_TO_ADDR
5081: LD_INT 4
5083: PUSH
5084: FOR_TO
5085: IFFALSE 5127
// begin PrepareScientist ( 0 , game_eskill ) ;
5087: LD_INT 0
5089: PPUSH
5090: LD_EXP 40
5094: PPUSH
5095: CALL_OW 384
// un := CreateHuman ;
5099: LD_ADDR_VAR 0 4
5103: PUSH
5104: CALL_OW 44
5108: ST_TO_ADDR
// filter := filter ^ un ;
5109: LD_ADDR_VAR 0 3
5113: PUSH
5114: LD_VAR 0 3
5118: PUSH
5119: LD_VAR 0 4
5123: ADD
5124: ST_TO_ADDR
// end ;
5125: GO 5084
5127: POP
5128: POP
// for i = 1 to filter do
5129: LD_ADDR_VAR 0 2
5133: PUSH
5134: DOUBLE
5135: LD_INT 1
5137: DEC
5138: ST_TO_ADDR
5139: LD_VAR 0 3
5143: PUSH
5144: FOR_TO
5145: IFFALSE 5170
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
5147: LD_VAR 0 3
5151: PUSH
5152: LD_VAR 0 2
5156: ARRAY
5157: PPUSH
5158: LD_INT 6
5160: PPUSH
5161: LD_INT 0
5163: PPUSH
5164: CALL_OW 49
5168: GO 5144
5170: POP
5171: POP
// RU_SecondPersonnel := filter ;
5172: LD_ADDR_EXP 36
5176: PUSH
5177: LD_VAR 0 3
5181: ST_TO_ADDR
// end ;
5182: LD_VAR 0 1
5186: RET
// export JMM ; export function JMMReinforcement ; var i , soldiers , un , vehs , vehicle , mechs ; begin
5187: LD_INT 0
5189: PPUSH
5190: PPUSH
5191: PPUSH
5192: PPUSH
5193: PPUSH
5194: PPUSH
5195: PPUSH
// uc_side := 1 ;
5196: LD_ADDR_OWVAR 20
5200: PUSH
5201: LD_INT 1
5203: ST_TO_ADDR
// uc_nation := nation_american ;
5204: LD_ADDR_OWVAR 21
5208: PUSH
5209: LD_INT 1
5211: ST_TO_ADDR
// JMM := NewCharacter ( JMM ) ;
5212: LD_ADDR_EXP 37
5216: PUSH
5217: LD_STRING JMM
5219: PPUSH
5220: CALL_OW 25
5224: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
5225: LD_EXP 37
5229: PPUSH
5230: LD_INT 1
5232: PPUSH
5233: CALL_OW 233
// PlaceUnitArea ( JMM , JMMArrivalArea , false ) ;
5237: LD_EXP 37
5241: PPUSH
5242: LD_INT 7
5244: PPUSH
5245: LD_INT 0
5247: PPUSH
5248: CALL_OW 49
// mechs := [ ] ;
5252: LD_ADDR_VAR 0 7
5256: PUSH
5257: EMPTY
5258: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
5259: LD_ADDR_VAR 0 2
5263: PUSH
5264: DOUBLE
5265: LD_INT 1
5267: DEC
5268: ST_TO_ADDR
5269: LD_INT 4
5271: PUSH
5272: LD_INT 3
5274: PUSH
5275: LD_INT 3
5277: PUSH
5278: EMPTY
5279: LIST
5280: LIST
5281: LIST
5282: PUSH
5283: LD_OWVAR 67
5287: ARRAY
5288: PUSH
5289: FOR_TO
5290: IFFALSE 5351
// begin PrepareSoldier ( 0 , game_skill + 1 ) ;
5292: LD_INT 0
5294: PPUSH
5295: LD_EXP 39
5299: PUSH
5300: LD_INT 1
5302: PLUS
5303: PPUSH
5304: CALL_OW 381
// un := CreateHuman ;
5308: LD_ADDR_VAR 0 4
5312: PUSH
5313: CALL_OW 44
5317: ST_TO_ADDR
// soldiers := soldiers ^ un ;
5318: LD_ADDR_VAR 0 3
5322: PUSH
5323: LD_VAR 0 3
5327: PUSH
5328: LD_VAR 0 4
5332: ADD
5333: ST_TO_ADDR
// PlaceUnitArea ( un , JMMArrivalArea , false ) ;
5334: LD_VAR 0 4
5338: PPUSH
5339: LD_INT 7
5341: PPUSH
5342: LD_INT 0
5344: PPUSH
5345: CALL_OW 49
// end ;
5349: GO 5289
5351: POP
5352: POP
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
5353: LD_ADDR_VAR 0 2
5357: PUSH
5358: DOUBLE
5359: LD_INT 1
5361: DEC
5362: ST_TO_ADDR
5363: LD_INT 7
5365: PUSH
5366: LD_INT 6
5368: PUSH
5369: LD_INT 4
5371: PUSH
5372: EMPTY
5373: LIST
5374: LIST
5375: LIST
5376: PUSH
5377: LD_OWVAR 67
5381: ARRAY
5382: PUSH
5383: FOR_TO
5384: IFFALSE 5430
// begin PrepareMechanic ( 0 , game_skill + 1 ) ;
5386: LD_INT 0
5388: PPUSH
5389: LD_EXP 39
5393: PUSH
5394: LD_INT 1
5396: PLUS
5397: PPUSH
5398: CALL_OW 383
// un := CreateHuman ;
5402: LD_ADDR_VAR 0 4
5406: PUSH
5407: CALL_OW 44
5411: ST_TO_ADDR
// mechs := mechs ^ un ;
5412: LD_ADDR_VAR 0 7
5416: PUSH
5417: LD_VAR 0 7
5421: PUSH
5422: LD_VAR 0 4
5426: ADD
5427: ST_TO_ADDR
// end ;
5428: GO 5383
5430: POP
5431: POP
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , us_double_gun , 100 ) ;
5432: LD_INT 3
5434: PPUSH
5435: LD_INT 3
5437: PPUSH
5438: LD_INT 1
5440: PPUSH
5441: LD_INT 5
5443: PPUSH
5444: LD_INT 100
5446: PPUSH
5447: CALL 18298 0 5
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
5451: LD_ADDR_VAR 0 2
5455: PUSH
5456: DOUBLE
5457: LD_INT 1
5459: DEC
5460: ST_TO_ADDR
5461: LD_INT 7
5463: PUSH
5464: LD_INT 6
5466: PUSH
5467: LD_INT 4
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: LIST
5474: PUSH
5475: LD_OWVAR 67
5479: ARRAY
5480: PUSH
5481: FOR_TO
5482: IFFALSE 5577
// begin vehicle := CreateVehicle ;
5484: LD_ADDR_VAR 0 6
5488: PUSH
5489: CALL_OW 45
5493: ST_TO_ADDR
// PlaceHumanInUnit ( mechs [ 1 ] , vehicle ) ;
5494: LD_VAR 0 7
5498: PUSH
5499: LD_INT 1
5501: ARRAY
5502: PPUSH
5503: LD_VAR 0 6
5507: PPUSH
5508: CALL_OW 52
// mechs := mechs diff mechs [ 1 ] ;
5512: LD_ADDR_VAR 0 7
5516: PUSH
5517: LD_VAR 0 7
5521: PUSH
5522: LD_VAR 0 7
5526: PUSH
5527: LD_INT 1
5529: ARRAY
5530: DIFF
5531: ST_TO_ADDR
// SetDir ( vehicle , 1 ) ;
5532: LD_VAR 0 6
5536: PPUSH
5537: LD_INT 1
5539: PPUSH
5540: CALL_OW 233
// PlaceUnitArea ( vehicle , JMMArrivalArea , false ) ;
5544: LD_VAR 0 6
5548: PPUSH
5549: LD_INT 7
5551: PPUSH
5552: LD_INT 0
5554: PPUSH
5555: CALL_OW 49
// vehs := vehs ^ vehicle ;
5559: LD_ADDR_VAR 0 5
5563: PUSH
5564: LD_VAR 0 5
5568: PUSH
5569: LD_VAR 0 6
5573: ADD
5574: ST_TO_ADDR
// end ;
5575: GO 5481
5577: POP
5578: POP
// end ; end_of_file
5579: LD_VAR 0 1
5583: RET
// export game_diff ; export game_skill , game_eskill ; export jmmArrival , ruArrival ; export startCrates ; export function GameType ; var i , ruStartTechs ; begin
5584: LD_INT 0
5586: PPUSH
5587: PPUSH
5588: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
5589: LD_ADDR_OWVAR 67
5593: PUSH
5594: LD_INT 0
5596: PPUSH
5597: CALL_OW 426
5601: ST_TO_ADDR
// game_diff := Difficulty ;
5602: LD_ADDR_EXP 38
5606: PUSH
5607: LD_OWVAR 67
5611: ST_TO_ADDR
// game_skill := [ 7 , 6 , 6 ] [ game_diff ] ;
5612: LD_ADDR_EXP 39
5616: PUSH
5617: LD_INT 7
5619: PUSH
5620: LD_INT 6
5622: PUSH
5623: LD_INT 6
5625: PUSH
5626: EMPTY
5627: LIST
5628: LIST
5629: LIST
5630: PUSH
5631: LD_EXP 38
5635: ARRAY
5636: ST_TO_ADDR
// game_eskill := [ 6 , 7 , 8 ] [ game_diff ] ;
5637: LD_ADDR_EXP 40
5641: PUSH
5642: LD_INT 6
5644: PUSH
5645: LD_INT 7
5647: PUSH
5648: LD_INT 8
5650: PUSH
5651: EMPTY
5652: LIST
5653: LIST
5654: LIST
5655: PUSH
5656: LD_EXP 38
5660: ARRAY
5661: ST_TO_ADDR
// ruArrival := [ 5 5$00 , 3 3$00 , 2 2$00 ] [ game_diff ] ;
5662: LD_ADDR_EXP 42
5666: PUSH
5667: LD_INT 10500
5669: PUSH
5670: LD_INT 6300
5672: PUSH
5673: LD_INT 4200
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: LIST
5680: PUSH
5681: LD_EXP 38
5685: ARRAY
5686: ST_TO_ADDR
// jmmArrival := [ 35 35$00 , 45 45$00 , 55 55$00 ] [ game_diff ] ;
5687: LD_ADDR_EXP 41
5691: PUSH
5692: LD_INT 73500
5694: PUSH
5695: LD_INT 94500
5697: PUSH
5698: LD_INT 115500
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: LIST
5705: PUSH
5706: LD_EXP 38
5710: ARRAY
5711: ST_TO_ADDR
// ruStartTechs = [ [ tech_Weap1 ] , [ tech_Weap1 , tech_Comp1 ] , [ tech_Weap1 , tech_Weap2 , tech_Comp1 ] ] ;
5712: LD_ADDR_VAR 0 3
5716: PUSH
5717: LD_INT 51
5719: PUSH
5720: EMPTY
5721: LIST
5722: PUSH
5723: LD_INT 51
5725: PUSH
5726: LD_INT 57
5728: PUSH
5729: EMPTY
5730: LIST
5731: LIST
5732: PUSH
5733: LD_INT 51
5735: PUSH
5736: LD_INT 52
5738: PUSH
5739: LD_INT 57
5741: PUSH
5742: EMPTY
5743: LIST
5744: LIST
5745: LIST
5746: PUSH
5747: EMPTY
5748: LIST
5749: LIST
5750: LIST
5751: ST_TO_ADDR
// startCrates = [ [ 300 , 350 ] , [ 230 , 200 ] , [ 150 , 100 ] ] [ game_diff ] ;
5752: LD_ADDR_EXP 43
5756: PUSH
5757: LD_INT 300
5759: PUSH
5760: LD_INT 350
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PUSH
5767: LD_INT 230
5769: PUSH
5770: LD_INT 200
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: PUSH
5777: LD_INT 150
5779: PUSH
5780: LD_INT 100
5782: PUSH
5783: EMPTY
5784: LIST
5785: LIST
5786: PUSH
5787: EMPTY
5788: LIST
5789: LIST
5790: LIST
5791: PUSH
5792: LD_EXP 38
5796: ARRAY
5797: ST_TO_ADDR
// for i := 1 to ruStartTechs [ game_diff ] do
5798: LD_ADDR_VAR 0 2
5802: PUSH
5803: DOUBLE
5804: LD_INT 1
5806: DEC
5807: ST_TO_ADDR
5808: LD_VAR 0 3
5812: PUSH
5813: LD_EXP 38
5817: ARRAY
5818: PUSH
5819: FOR_TO
5820: IFFALSE 5878
// begin SetTech ( ruStartTechs [ game_diff ] [ i ] , 3 , state_researched ) ;
5822: LD_VAR 0 3
5826: PUSH
5827: LD_EXP 38
5831: ARRAY
5832: PUSH
5833: LD_VAR 0 2
5837: ARRAY
5838: PPUSH
5839: LD_INT 3
5841: PPUSH
5842: LD_INT 2
5844: PPUSH
5845: CALL_OW 322
// SetTech ( ruStartTechs [ game_diff ] [ i ] , 6 , state_researched ) ;
5849: LD_VAR 0 3
5853: PUSH
5854: LD_EXP 38
5858: ARRAY
5859: PUSH
5860: LD_VAR 0 2
5864: ARRAY
5865: PPUSH
5866: LD_INT 6
5868: PPUSH
5869: LD_INT 2
5871: PPUSH
5872: CALL_OW 322
// end ;
5876: GO 5819
5878: POP
5879: POP
// end ; end_of_file
5880: LD_VAR 0 1
5884: RET
// export function CustomEvent ( event ) ; begin
5885: LD_INT 0
5887: PPUSH
// end ;
5888: LD_VAR 0 2
5892: RET
// export function CustomInitMacro ( ) ; begin
5893: LD_INT 0
5895: PPUSH
// MC_SetScanArea ( 1 , RU_Base_Area ) ;
5896: LD_INT 1
5898: PPUSH
5899: LD_INT 3
5901: PPUSH
5902: CALL 74882 0 2
// MC_SetParkingArea ( 1 , RU_Base_Parking ) ;
5906: LD_INT 1
5908: PPUSH
5909: LD_INT 4
5911: PPUSH
5912: CALL 74826 0 2
// MC_SetDepositsXY ( 1 , [ [ 136 , 130 , 0 ] , [ 145 , 123 , 0 ] , ] ) ;
5916: LD_INT 1
5918: PPUSH
5919: LD_INT 136
5921: PUSH
5922: LD_INT 130
5924: PUSH
5925: LD_INT 0
5927: PUSH
5928: EMPTY
5929: LIST
5930: LIST
5931: LIST
5932: PUSH
5933: LD_INT 145
5935: PUSH
5936: LD_INT 123
5938: PUSH
5939: LD_INT 0
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: LIST
5946: PUSH
5947: EMPTY
5948: LIST
5949: LIST
5950: PPUSH
5951: CALL 73885 0 2
// MC_SetAllowedTurretWeapons ( 1 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
5955: LD_INT 1
5957: PPUSH
5958: LD_INT 43
5960: PUSH
5961: LD_INT 46
5963: PUSH
5964: LD_INT 45
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: LIST
5971: PPUSH
5972: CALL 74714 0 2
// MC_SetCratesArea ( 1 , RU_Base_Area ) ;
5976: LD_INT 1
5978: PPUSH
5979: LD_INT 3
5981: PPUSH
5982: CALL 74396 0 2
// MC_SetTame ( 1 , RU_Base_Area ) ;
5986: LD_INT 1
5988: PPUSH
5989: LD_INT 3
5991: PPUSH
5992: CALL 74127 0 2
// MC_SetDefenderLimit ( 1 , 8 ) ;
5996: LD_INT 1
5998: PPUSH
5999: LD_INT 8
6001: PPUSH
6002: CALL 73746 0 2
// MC_SetProduceList ( 1 , [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] ] ) ;
6006: LD_INT 1
6008: PPUSH
6009: LD_INT 22
6011: PUSH
6012: LD_INT 1
6014: PUSH
6015: LD_INT 3
6017: PUSH
6018: LD_INT 43
6020: PUSH
6021: EMPTY
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: PUSH
6027: LD_INT 22
6029: PUSH
6030: LD_INT 1
6032: PUSH
6033: LD_INT 3
6035: PUSH
6036: LD_INT 44
6038: PUSH
6039: EMPTY
6040: LIST
6041: LIST
6042: LIST
6043: LIST
6044: PUSH
6045: LD_INT 22
6047: PUSH
6048: LD_INT 1
6050: PUSH
6051: LD_INT 3
6053: PUSH
6054: LD_INT 45
6056: PUSH
6057: EMPTY
6058: LIST
6059: LIST
6060: LIST
6061: LIST
6062: PUSH
6063: LD_INT 24
6065: PUSH
6066: LD_INT 1
6068: PUSH
6069: LD_INT 3
6071: PUSH
6072: LD_INT 43
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: PUSH
6081: LD_INT 24
6083: PUSH
6084: LD_INT 1
6086: PUSH
6087: LD_INT 3
6089: PUSH
6090: LD_INT 43
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: PUSH
6099: LD_INT 24
6101: PUSH
6102: LD_INT 1
6104: PUSH
6105: LD_INT 3
6107: PUSH
6108: LD_INT 46
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: PUSH
6117: LD_INT 22
6119: PUSH
6120: LD_INT 1
6122: PUSH
6123: LD_INT 3
6125: PUSH
6126: LD_INT 43
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: PUSH
6135: LD_INT 22
6137: PUSH
6138: LD_INT 1
6140: PUSH
6141: LD_INT 3
6143: PUSH
6144: LD_INT 44
6146: PUSH
6147: EMPTY
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: PUSH
6153: EMPTY
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: LIST
6162: PPUSH
6163: CALL 73561 0 2
// MC_SetBuildingList ( 1 , [ [ b_depot , 127 , 125 , 5 ] , [ b_lab , 124 , 132 , 0 ] , [ b_oil_mine , 136 , 130 , 1 ] , [ b_armoury , 118 , 114 , 2 ] , [ b_oil_mine , 145 , 123 , 1 ] , [ b_oil_power , 150 , 135 , 1 ] , [ b_oil_power , 140 , 134 , 2 ] , [ b_oil_power , 137 , 121 , 5 ] , [ b_workshop , 155 , 130 , 0 ] , [ b_bunker , 155 , 130 , 0 ] , [ b_bunker , 130 , 114 , 3 ] , [ b_bunker , 142 , 115 , 3 ] , [ b_bunker , 153 , 120 , 3 ] , ] ) ;
6167: LD_INT 1
6169: PPUSH
6170: LD_INT 0
6172: PUSH
6173: LD_INT 127
6175: PUSH
6176: LD_INT 125
6178: PUSH
6179: LD_INT 5
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: PUSH
6188: LD_INT 6
6190: PUSH
6191: LD_INT 124
6193: PUSH
6194: LD_INT 132
6196: PUSH
6197: LD_INT 0
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: PUSH
6206: LD_INT 29
6208: PUSH
6209: LD_INT 136
6211: PUSH
6212: LD_INT 130
6214: PUSH
6215: LD_INT 1
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 4
6226: PUSH
6227: LD_INT 118
6229: PUSH
6230: LD_INT 114
6232: PUSH
6233: LD_INT 2
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: PUSH
6242: LD_INT 29
6244: PUSH
6245: LD_INT 145
6247: PUSH
6248: LD_INT 123
6250: PUSH
6251: LD_INT 1
6253: PUSH
6254: EMPTY
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: PUSH
6260: LD_INT 26
6262: PUSH
6263: LD_INT 150
6265: PUSH
6266: LD_INT 135
6268: PUSH
6269: LD_INT 1
6271: PUSH
6272: EMPTY
6273: LIST
6274: LIST
6275: LIST
6276: LIST
6277: PUSH
6278: LD_INT 26
6280: PUSH
6281: LD_INT 140
6283: PUSH
6284: LD_INT 134
6286: PUSH
6287: LD_INT 2
6289: PUSH
6290: EMPTY
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: PUSH
6296: LD_INT 26
6298: PUSH
6299: LD_INT 137
6301: PUSH
6302: LD_INT 121
6304: PUSH
6305: LD_INT 5
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: PUSH
6314: LD_INT 2
6316: PUSH
6317: LD_INT 155
6319: PUSH
6320: LD_INT 130
6322: PUSH
6323: LD_INT 0
6325: PUSH
6326: EMPTY
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: PUSH
6332: LD_INT 32
6334: PUSH
6335: LD_INT 155
6337: PUSH
6338: LD_INT 130
6340: PUSH
6341: LD_INT 0
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: PUSH
6350: LD_INT 32
6352: PUSH
6353: LD_INT 130
6355: PUSH
6356: LD_INT 114
6358: PUSH
6359: LD_INT 3
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: PUSH
6368: LD_INT 32
6370: PUSH
6371: LD_INT 142
6373: PUSH
6374: LD_INT 115
6376: PUSH
6377: LD_INT 3
6379: PUSH
6380: EMPTY
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: PUSH
6386: LD_INT 32
6388: PUSH
6389: LD_INT 153
6391: PUSH
6392: LD_INT 120
6394: PUSH
6395: LD_INT 3
6397: PUSH
6398: EMPTY
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: PUSH
6404: EMPTY
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: PPUSH
6419: CALL 73453 0 2
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_computer ] ) ;
6423: LD_INT 1
6425: PPUSH
6426: LD_INT 10
6428: PUSH
6429: LD_INT 12
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: PPUSH
6436: CALL 74303 0 2
// MC_SetFactoryExtension ( 1 , 155 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
6440: LD_INT 1
6442: PPUSH
6443: LD_INT 155
6445: PPUSH
6446: LD_INT 130
6448: PPUSH
6449: LD_INT 0
6451: PPUSH
6452: LD_INT 24
6454: PUSH
6455: LD_INT 16
6457: PUSH
6458: LD_INT 17
6460: PUSH
6461: LD_INT 18
6463: PUSH
6464: LD_INT 21
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: PPUSH
6474: CALL 74508 0 5
// MC_SetScanArea ( 2 , RU_Base_Area ) ;
6478: LD_INT 2
6480: PPUSH
6481: LD_INT 3
6483: PPUSH
6484: CALL 74882 0 2
// MC_SetParkingArea ( 2 , RU_Base_Parking ) ;
6488: LD_INT 2
6490: PPUSH
6491: LD_INT 4
6493: PPUSH
6494: CALL 74826 0 2
// MC_SetDepositsXY ( 2 , [ [ 84 , 125 , 1 ] , ] ) ;
6498: LD_INT 2
6500: PPUSH
6501: LD_INT 84
6503: PUSH
6504: LD_INT 125
6506: PUSH
6507: LD_INT 1
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: LIST
6514: PUSH
6515: EMPTY
6516: LIST
6517: PPUSH
6518: CALL 73885 0 2
// MC_SetAllowedTurretWeapons ( 2 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
6522: LD_INT 2
6524: PPUSH
6525: LD_INT 43
6527: PUSH
6528: LD_INT 46
6530: PUSH
6531: LD_INT 45
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: LIST
6538: PPUSH
6539: CALL 74714 0 2
// MC_SetCratesArea ( 2 , RU_Base_Area ) ;
6543: LD_INT 2
6545: PPUSH
6546: LD_INT 3
6548: PPUSH
6549: CALL 74396 0 2
// MC_SetTame ( 2 , RU_Base_Area ) ;
6553: LD_INT 2
6555: PPUSH
6556: LD_INT 3
6558: PPUSH
6559: CALL 74127 0 2
// MC_SetDefenderLimit ( 2 , 8 ) ;
6563: LD_INT 2
6565: PPUSH
6566: LD_INT 8
6568: PPUSH
6569: CALL 73746 0 2
// MC_SetProduceList ( 2 , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] ] ) ;
6573: LD_INT 2
6575: PPUSH
6576: LD_INT 22
6578: PUSH
6579: LD_INT 3
6581: PUSH
6582: LD_INT 3
6584: PUSH
6585: LD_INT 43
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: PUSH
6594: LD_INT 22
6596: PUSH
6597: LD_INT 3
6599: PUSH
6600: LD_INT 3
6602: PUSH
6603: LD_INT 44
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: PUSH
6612: LD_INT 22
6614: PUSH
6615: LD_INT 3
6617: PUSH
6618: LD_INT 3
6620: PUSH
6621: LD_INT 45
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: PUSH
6630: LD_INT 24
6632: PUSH
6633: LD_INT 3
6635: PUSH
6636: LD_INT 3
6638: PUSH
6639: LD_INT 43
6641: PUSH
6642: EMPTY
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: PUSH
6648: LD_INT 24
6650: PUSH
6651: LD_INT 3
6653: PUSH
6654: LD_INT 3
6656: PUSH
6657: LD_INT 43
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: PUSH
6666: LD_INT 24
6668: PUSH
6669: LD_INT 3
6671: PUSH
6672: LD_INT 3
6674: PUSH
6675: LD_INT 46
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: PUSH
6684: LD_INT 22
6686: PUSH
6687: LD_INT 3
6689: PUSH
6690: LD_INT 3
6692: PUSH
6693: LD_INT 43
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: PUSH
6702: LD_INT 22
6704: PUSH
6705: LD_INT 3
6707: PUSH
6708: LD_INT 3
6710: PUSH
6711: LD_INT 44
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: PPUSH
6730: CALL 73561 0 2
// MC_SetBuildingList ( 2 , [ [ b_depot , 96 , 125 , 0 ] , [ b_lab , 74 , 122 , 1 ] , [ b_siberite_mine , 84 , 125 , 1 ] , [ b_siberite_power , 86 , 128 , 1 ] , [ b_siberite_power , 85 , 130 , 2 ] , [ b_siberite_power , 88 , 132 , 5 ] , [ b_workshop , 106 , 130 , 0 ] , [ b_armoury , 99 , 114 , 3 ] , [ b_bunker , 72 , 112 , 2 ] , [ b_bunker , 78 , 110 , 3 ] , [ b_bunker , 84 , 110 , 2 ] , [ b_bunker , 105 , 117 , 3 ] , ] ) ;
6734: LD_INT 2
6736: PPUSH
6737: LD_INT 0
6739: PUSH
6740: LD_INT 96
6742: PUSH
6743: LD_INT 125
6745: PUSH
6746: LD_INT 0
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: PUSH
6755: LD_INT 6
6757: PUSH
6758: LD_INT 74
6760: PUSH
6761: LD_INT 122
6763: PUSH
6764: LD_INT 1
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: PUSH
6773: LD_INT 30
6775: PUSH
6776: LD_INT 84
6778: PUSH
6779: LD_INT 125
6781: PUSH
6782: LD_INT 1
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: PUSH
6791: LD_INT 28
6793: PUSH
6794: LD_INT 86
6796: PUSH
6797: LD_INT 128
6799: PUSH
6800: LD_INT 1
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: PUSH
6809: LD_INT 28
6811: PUSH
6812: LD_INT 85
6814: PUSH
6815: LD_INT 130
6817: PUSH
6818: LD_INT 2
6820: PUSH
6821: EMPTY
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: PUSH
6827: LD_INT 28
6829: PUSH
6830: LD_INT 88
6832: PUSH
6833: LD_INT 132
6835: PUSH
6836: LD_INT 5
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: PUSH
6845: LD_INT 2
6847: PUSH
6848: LD_INT 106
6850: PUSH
6851: LD_INT 130
6853: PUSH
6854: LD_INT 0
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: PUSH
6863: LD_INT 4
6865: PUSH
6866: LD_INT 99
6868: PUSH
6869: LD_INT 114
6871: PUSH
6872: LD_INT 3
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: PUSH
6881: LD_INT 32
6883: PUSH
6884: LD_INT 72
6886: PUSH
6887: LD_INT 112
6889: PUSH
6890: LD_INT 2
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: PUSH
6899: LD_INT 32
6901: PUSH
6902: LD_INT 78
6904: PUSH
6905: LD_INT 110
6907: PUSH
6908: LD_INT 3
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: PUSH
6917: LD_INT 32
6919: PUSH
6920: LD_INT 84
6922: PUSH
6923: LD_INT 110
6925: PUSH
6926: LD_INT 2
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: PUSH
6935: LD_INT 32
6937: PUSH
6938: LD_INT 105
6940: PUSH
6941: LD_INT 117
6943: PUSH
6944: LD_INT 3
6946: PUSH
6947: EMPTY
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: PPUSH
6967: CALL 73453 0 2
// MC_SetLabKind ( 2 , [ b_lab_spacetime , b_lab_siberium ] ) ;
6971: LD_INT 2
6973: PPUSH
6974: LD_INT 14
6976: PUSH
6977: LD_INT 11
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PPUSH
6984: CALL 74303 0 2
// MC_SetFactoryExtension ( 2 , 106 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
6988: LD_INT 2
6990: PPUSH
6991: LD_INT 106
6993: PPUSH
6994: LD_INT 130
6996: PPUSH
6997: LD_INT 0
6999: PPUSH
7000: LD_INT 24
7002: PUSH
7003: LD_INT 16
7005: PUSH
7006: LD_INT 17
7008: PUSH
7009: LD_INT 18
7011: PUSH
7012: LD_INT 21
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: PPUSH
7022: CALL 74508 0 5
// end ;
7026: LD_VAR 0 1
7030: RET
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
7031: LD_INT 22
7033: PUSH
7034: LD_INT 3
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: PUSH
7041: LD_INT 30
7043: PUSH
7044: LD_INT 3
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: PPUSH
7055: CALL_OW 69
7059: IFFALSE 8202
7061: GO 7063
7063: DISABLE
7064: LD_INT 0
7066: PPUSH
7067: PPUSH
7068: PPUSH
7069: PPUSH
7070: PPUSH
7071: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
7072: LD_INT 6300
7074: PUSH
7075: LD_INT 4200
7077: PUSH
7078: LD_INT 2100
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: LIST
7085: PUSH
7086: LD_OWVAR 67
7090: ARRAY
7091: PPUSH
7092: CALL_OW 67
// base := 2 ;
7096: LD_ADDR_VAR 0 2
7100: PUSH
7101: LD_INT 2
7103: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
7104: LD_INT 22
7106: PUSH
7107: LD_INT 3
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PUSH
7114: LD_INT 30
7116: PUSH
7117: LD_INT 3
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: PPUSH
7128: CALL_OW 69
7132: NOT
7133: IFFALSE 7137
// continue ;
7135: GO 7072
// case Rand ( 1 , 3 ) of 1 :
7137: LD_INT 1
7139: PPUSH
7140: LD_INT 3
7142: PPUSH
7143: CALL_OW 12
7147: PUSH
7148: LD_INT 1
7150: DOUBLE
7151: EQUAL
7152: IFTRUE 7156
7154: GO 7332
7156: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
7157: LD_ADDR_VAR 0 3
7161: PUSH
7162: LD_INT 22
7164: PUSH
7165: LD_INT 3
7167: PUSH
7168: LD_INT 3
7170: PUSH
7171: LD_INT 43
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: PUSH
7180: LD_INT 24
7182: PUSH
7183: LD_INT 3
7185: PUSH
7186: LD_INT 3
7188: PUSH
7189: LD_INT 46
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: PUSH
7198: LD_INT 24
7200: PUSH
7201: LD_INT 3
7203: PUSH
7204: LD_INT 3
7206: PUSH
7207: LD_INT 43
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: PUSH
7216: LD_INT 24
7218: PUSH
7219: LD_INT 3
7221: PUSH
7222: LD_INT 3
7224: PUSH
7225: LD_INT 46
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: PUSH
7234: LD_INT 22
7236: PUSH
7237: LD_INT 3
7239: PUSH
7240: LD_INT 3
7242: PUSH
7243: LD_INT 45
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: PUSH
7252: LD_INT 22
7254: PUSH
7255: LD_INT 3
7257: PUSH
7258: LD_INT 3
7260: PUSH
7261: LD_INT 43
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: PUSH
7270: LD_INT 24
7272: PUSH
7273: LD_INT 3
7275: PUSH
7276: LD_INT 3
7278: PUSH
7279: LD_INT 46
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: PUSH
7288: LD_INT 22
7290: PUSH
7291: LD_INT 3
7293: PUSH
7294: LD_INT 3
7296: PUSH
7297: LD_INT 45
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7316: LD_VAR 0 2
7320: PPUSH
7321: LD_VAR 0 3
7325: PPUSH
7326: CALL 73609 0 2
// end ; 2 :
7330: GO 7663
7332: LD_INT 2
7334: DOUBLE
7335: EQUAL
7336: IFTRUE 7340
7338: GO 7478
7340: POP
// begin tmp := [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
7341: LD_ADDR_VAR 0 3
7345: PUSH
7346: LD_INT 24
7348: PUSH
7349: LD_INT 3
7351: PUSH
7352: LD_INT 3
7354: PUSH
7355: LD_INT 43
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: PUSH
7364: LD_INT 24
7366: PUSH
7367: LD_INT 3
7369: PUSH
7370: LD_INT 3
7372: PUSH
7373: LD_INT 46
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: PUSH
7382: LD_INT 24
7384: PUSH
7385: LD_INT 3
7387: PUSH
7388: LD_INT 3
7390: PUSH
7391: LD_INT 43
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: PUSH
7400: LD_INT 24
7402: PUSH
7403: LD_INT 3
7405: PUSH
7406: LD_INT 3
7408: PUSH
7409: LD_INT 46
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: PUSH
7418: LD_INT 22
7420: PUSH
7421: LD_INT 3
7423: PUSH
7424: LD_INT 3
7426: PUSH
7427: LD_INT 45
7429: PUSH
7430: EMPTY
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: PUSH
7436: LD_INT 22
7438: PUSH
7439: LD_INT 3
7441: PUSH
7442: LD_INT 3
7444: PUSH
7445: LD_INT 45
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7462: LD_VAR 0 2
7466: PPUSH
7467: LD_VAR 0 3
7471: PPUSH
7472: CALL 73609 0 2
// end ; 3 :
7476: GO 7663
7478: LD_INT 3
7480: DOUBLE
7481: EQUAL
7482: IFTRUE 7486
7484: GO 7662
7486: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
7487: LD_ADDR_VAR 0 3
7491: PUSH
7492: LD_INT 22
7494: PUSH
7495: LD_INT 3
7497: PUSH
7498: LD_INT 3
7500: PUSH
7501: LD_INT 43
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: PUSH
7510: LD_INT 24
7512: PUSH
7513: LD_INT 3
7515: PUSH
7516: LD_INT 3
7518: PUSH
7519: LD_INT 46
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: PUSH
7528: LD_INT 22
7530: PUSH
7531: LD_INT 3
7533: PUSH
7534: LD_INT 3
7536: PUSH
7537: LD_INT 43
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: PUSH
7546: LD_INT 24
7548: PUSH
7549: LD_INT 3
7551: PUSH
7552: LD_INT 3
7554: PUSH
7555: LD_INT 46
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: PUSH
7564: LD_INT 22
7566: PUSH
7567: LD_INT 3
7569: PUSH
7570: LD_INT 3
7572: PUSH
7573: LD_INT 45
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: PUSH
7582: LD_INT 22
7584: PUSH
7585: LD_INT 3
7587: PUSH
7588: LD_INT 3
7590: PUSH
7591: LD_INT 43
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: PUSH
7600: LD_INT 24
7602: PUSH
7603: LD_INT 3
7605: PUSH
7606: LD_INT 3
7608: PUSH
7609: LD_INT 46
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: PUSH
7618: LD_INT 22
7620: PUSH
7621: LD_INT 3
7623: PUSH
7624: LD_INT 3
7626: PUSH
7627: LD_INT 45
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7646: LD_VAR 0 2
7650: PPUSH
7651: LD_VAR 0 3
7655: PPUSH
7656: CALL 73609 0 2
// end ; end ;
7660: GO 7663
7662: POP
// repeat wait ( 0 0$1 ) ;
7663: LD_INT 35
7665: PPUSH
7666: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
7670: LD_VAR 0 2
7674: PPUSH
7675: CALL 73957 0 1
7679: PUSH
7680: LD_INT 0
7682: EQUAL
7683: IFFALSE 7663
// wait ( 0 0$30 ) ;
7685: LD_INT 1050
7687: PPUSH
7688: CALL_OW 67
// _target := [ [ 86 , 77 ] , [ 63 , 38 ] ] ;
7692: LD_ADDR_VAR 0 5
7696: PUSH
7697: LD_INT 86
7699: PUSH
7700: LD_INT 77
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: PUSH
7707: LD_INT 63
7709: PUSH
7710: LD_INT 38
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
7721: LD_ADDR_VAR 0 4
7725: PUSH
7726: LD_INT 0
7728: PUSH
7729: LD_INT 0
7731: PUSH
7732: LD_INT 0
7734: PUSH
7735: LD_INT 1
7737: PUSH
7738: LD_INT 0
7740: PUSH
7741: LD_INT 0
7743: PUSH
7744: LD_INT 0
7746: PUSH
7747: LD_INT 0
7749: PUSH
7750: LD_INT 1
7752: PUSH
7753: LD_INT 0
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: LIST
7767: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
7768: LD_ADDR_VAR 0 6
7772: PUSH
7773: LD_EXP 82
7777: PUSH
7778: LD_VAR 0 2
7782: ARRAY
7783: PUSH
7784: LD_EXP 85
7788: PUSH
7789: LD_VAR 0 2
7793: ARRAY
7794: DIFF
7795: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
7796: LD_ADDR_EXP 82
7800: PUSH
7801: LD_EXP 82
7805: PPUSH
7806: LD_VAR 0 2
7810: PPUSH
7811: LD_EXP 82
7815: PUSH
7816: LD_VAR 0 2
7820: ARRAY
7821: PUSH
7822: LD_VAR 0 6
7826: DIFF
7827: PPUSH
7828: CALL_OW 1
7832: ST_TO_ADDR
// if not attackers then
7833: LD_VAR 0 6
7837: NOT
7838: IFFALSE 7842
// continue ;
7840: GO 7072
// repeat wait ( 0 0$1 ) ;
7842: LD_INT 35
7844: PPUSH
7845: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
7849: LD_VAR 0 6
7853: PPUSH
7854: LD_INT 60
7856: PUSH
7857: EMPTY
7858: LIST
7859: PPUSH
7860: CALL_OW 72
7864: NOT
7865: IFFALSE 7842
// repeat wait ( 0 0$1 ) ;
7867: LD_INT 35
7869: PPUSH
7870: CALL_OW 67
// for i in attackers do
7874: LD_ADDR_VAR 0 1
7878: PUSH
7879: LD_VAR 0 6
7883: PUSH
7884: FOR_IN
7885: IFFALSE 8169
// begin if IsDead ( i ) then
7887: LD_VAR 0 1
7891: PPUSH
7892: CALL_OW 301
7896: IFFALSE 7914
// attackers := attackers diff i ;
7898: LD_ADDR_VAR 0 6
7902: PUSH
7903: LD_VAR 0 6
7907: PUSH
7908: LD_VAR 0 1
7912: DIFF
7913: ST_TO_ADDR
// if not HasTask ( i ) then
7914: LD_VAR 0 1
7918: PPUSH
7919: CALL_OW 314
7923: NOT
7924: IFFALSE 8167
// begin if not GetTag ( i ) then
7926: LD_VAR 0 1
7930: PPUSH
7931: CALL_OW 110
7935: NOT
7936: IFFALSE 8028
// begin ComAgressiveMove ( i , _target [ 1 ] [ 1 ] , _target [ 1 ] [ 2 ] ) ;
7938: LD_VAR 0 1
7942: PPUSH
7943: LD_VAR 0 5
7947: PUSH
7948: LD_INT 1
7950: ARRAY
7951: PUSH
7952: LD_INT 1
7954: ARRAY
7955: PPUSH
7956: LD_VAR 0 5
7960: PUSH
7961: LD_INT 1
7963: ARRAY
7964: PUSH
7965: LD_INT 2
7967: ARRAY
7968: PPUSH
7969: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 1 ] [ 1 ] , _target [ 1 ] [ 2 ] ) < 8 then
7973: LD_VAR 0 1
7977: PPUSH
7978: LD_VAR 0 5
7982: PUSH
7983: LD_INT 1
7985: ARRAY
7986: PUSH
7987: LD_INT 1
7989: ARRAY
7990: PPUSH
7991: LD_VAR 0 5
7995: PUSH
7996: LD_INT 1
7998: ARRAY
7999: PUSH
8000: LD_INT 2
8002: ARRAY
8003: PPUSH
8004: CALL_OW 297
8008: PUSH
8009: LD_INT 8
8011: LESS
8012: IFFALSE 8026
// SetTag ( i , 1 ) ;
8014: LD_VAR 0 1
8018: PPUSH
8019: LD_INT 1
8021: PPUSH
8022: CALL_OW 109
// end else
8026: GO 8167
// if GetTag ( i ) = 1 then
8028: LD_VAR 0 1
8032: PPUSH
8033: CALL_OW 110
8037: PUSH
8038: LD_INT 1
8040: EQUAL
8041: IFFALSE 8133
// begin ComAgressiveMove ( i , _target [ 2 ] [ 1 ] , _target [ 2 ] [ 2 ] ) ;
8043: LD_VAR 0 1
8047: PPUSH
8048: LD_VAR 0 5
8052: PUSH
8053: LD_INT 2
8055: ARRAY
8056: PUSH
8057: LD_INT 1
8059: ARRAY
8060: PPUSH
8061: LD_VAR 0 5
8065: PUSH
8066: LD_INT 2
8068: ARRAY
8069: PUSH
8070: LD_INT 2
8072: ARRAY
8073: PPUSH
8074: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 2 ] [ 1 ] , _target [ 2 ] [ 2 ] ) < 8 then
8078: LD_VAR 0 1
8082: PPUSH
8083: LD_VAR 0 5
8087: PUSH
8088: LD_INT 2
8090: ARRAY
8091: PUSH
8092: LD_INT 1
8094: ARRAY
8095: PPUSH
8096: LD_VAR 0 5
8100: PUSH
8101: LD_INT 2
8103: ARRAY
8104: PUSH
8105: LD_INT 2
8107: ARRAY
8108: PPUSH
8109: CALL_OW 297
8113: PUSH
8114: LD_INT 8
8116: LESS
8117: IFFALSE 8131
// SetTag ( i , 2 ) ;
8119: LD_VAR 0 1
8123: PPUSH
8124: LD_INT 2
8126: PPUSH
8127: CALL_OW 109
// end else
8131: GO 8167
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
8133: LD_VAR 0 1
8137: PPUSH
8138: LD_INT 81
8140: PUSH
8141: LD_INT 3
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: PPUSH
8148: CALL_OW 69
8152: PPUSH
8153: LD_VAR 0 1
8157: PPUSH
8158: CALL_OW 74
8162: PPUSH
8163: CALL_OW 115
// end ; end ;
8167: GO 7884
8169: POP
8170: POP
// until not attackers ;
8171: LD_VAR 0 6
8175: NOT
8176: IFFALSE 7867
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
8178: LD_EXP 63
8182: PUSH
8183: LD_VAR 0 2
8187: ARRAY
8188: PPUSH
8189: LD_INT 50
8191: PUSH
8192: EMPTY
8193: LIST
8194: PPUSH
8195: CALL_OW 72
8199: NOT
8200: IFFALSE 7072
// end ;
8202: PPOPN 6
8204: END
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
8205: LD_INT 22
8207: PUSH
8208: LD_INT 3
8210: PUSH
8211: EMPTY
8212: LIST
8213: LIST
8214: PUSH
8215: LD_INT 30
8217: PUSH
8218: LD_INT 3
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: PPUSH
8229: CALL_OW 69
8233: IFFALSE 9417
8235: GO 8237
8237: DISABLE
8238: LD_INT 0
8240: PPUSH
8241: PPUSH
8242: PPUSH
8243: PPUSH
8244: PPUSH
8245: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
8246: LD_INT 6300
8248: PUSH
8249: LD_INT 4200
8251: PUSH
8252: LD_INT 2100
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: LIST
8259: PUSH
8260: LD_OWVAR 67
8264: ARRAY
8265: PPUSH
8266: CALL_OW 67
// base := 1 ;
8270: LD_ADDR_VAR 0 2
8274: PUSH
8275: LD_INT 1
8277: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
8278: LD_INT 22
8280: PUSH
8281: LD_INT 3
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: PUSH
8288: LD_INT 30
8290: PUSH
8291: LD_INT 3
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: PPUSH
8302: CALL_OW 69
8306: NOT
8307: IFFALSE 8311
// continue ;
8309: GO 8246
// case Rand ( 1 , 3 ) of 1 :
8311: LD_INT 1
8313: PPUSH
8314: LD_INT 3
8316: PPUSH
8317: CALL_OW 12
8321: PUSH
8322: LD_INT 1
8324: DOUBLE
8325: EQUAL
8326: IFTRUE 8330
8328: GO 8506
8330: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
8331: LD_ADDR_VAR 0 3
8335: PUSH
8336: LD_INT 22
8338: PUSH
8339: LD_INT 1
8341: PUSH
8342: LD_INT 3
8344: PUSH
8345: LD_INT 43
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: PUSH
8354: LD_INT 24
8356: PUSH
8357: LD_INT 1
8359: PUSH
8360: LD_INT 3
8362: PUSH
8363: LD_INT 46
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: PUSH
8372: LD_INT 24
8374: PUSH
8375: LD_INT 1
8377: PUSH
8378: LD_INT 3
8380: PUSH
8381: LD_INT 43
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: PUSH
8390: LD_INT 24
8392: PUSH
8393: LD_INT 1
8395: PUSH
8396: LD_INT 3
8398: PUSH
8399: LD_INT 46
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: PUSH
8408: LD_INT 22
8410: PUSH
8411: LD_INT 1
8413: PUSH
8414: LD_INT 3
8416: PUSH
8417: LD_INT 45
8419: PUSH
8420: EMPTY
8421: LIST
8422: LIST
8423: LIST
8424: LIST
8425: PUSH
8426: LD_INT 22
8428: PUSH
8429: LD_INT 1
8431: PUSH
8432: LD_INT 3
8434: PUSH
8435: LD_INT 43
8437: PUSH
8438: EMPTY
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: PUSH
8444: LD_INT 24
8446: PUSH
8447: LD_INT 1
8449: PUSH
8450: LD_INT 3
8452: PUSH
8453: LD_INT 46
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: PUSH
8462: LD_INT 22
8464: PUSH
8465: LD_INT 1
8467: PUSH
8468: LD_INT 3
8470: PUSH
8471: LD_INT 45
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
8490: LD_VAR 0 2
8494: PPUSH
8495: LD_VAR 0 3
8499: PPUSH
8500: CALL 73609 0 2
// end ; 2 :
8504: GO 8875
8506: LD_INT 2
8508: DOUBLE
8509: EQUAL
8510: IFTRUE 8514
8512: GO 8690
8514: POP
// begin tmp := [ [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
8515: LD_ADDR_VAR 0 3
8519: PUSH
8520: LD_INT 24
8522: PUSH
8523: LD_INT 1
8525: PUSH
8526: LD_INT 3
8528: PUSH
8529: LD_INT 43
8531: PUSH
8532: EMPTY
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: PUSH
8538: LD_INT 24
8540: PUSH
8541: LD_INT 1
8543: PUSH
8544: LD_INT 3
8546: PUSH
8547: LD_INT 46
8549: PUSH
8550: EMPTY
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: PUSH
8556: LD_INT 24
8558: PUSH
8559: LD_INT 1
8561: PUSH
8562: LD_INT 3
8564: PUSH
8565: LD_INT 43
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: LIST
8572: LIST
8573: PUSH
8574: LD_INT 24
8576: PUSH
8577: LD_INT 1
8579: PUSH
8580: LD_INT 3
8582: PUSH
8583: LD_INT 46
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: PUSH
8592: LD_INT 22
8594: PUSH
8595: LD_INT 1
8597: PUSH
8598: LD_INT 3
8600: PUSH
8601: LD_INT 45
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: PUSH
8610: LD_INT 22
8612: PUSH
8613: LD_INT 1
8615: PUSH
8616: LD_INT 3
8618: PUSH
8619: LD_INT 45
8621: PUSH
8622: EMPTY
8623: LIST
8624: LIST
8625: LIST
8626: LIST
8627: PUSH
8628: LD_INT 22
8630: PUSH
8631: LD_INT 1
8633: PUSH
8634: LD_INT 3
8636: PUSH
8637: LD_INT 45
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: PUSH
8646: LD_INT 22
8648: PUSH
8649: LD_INT 1
8651: PUSH
8652: LD_INT 3
8654: PUSH
8655: LD_INT 45
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
8674: LD_VAR 0 2
8678: PPUSH
8679: LD_VAR 0 3
8683: PPUSH
8684: CALL 73609 0 2
// end ; 3 :
8688: GO 8875
8690: LD_INT 3
8692: DOUBLE
8693: EQUAL
8694: IFTRUE 8698
8696: GO 8874
8698: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
8699: LD_ADDR_VAR 0 3
8703: PUSH
8704: LD_INT 22
8706: PUSH
8707: LD_INT 1
8709: PUSH
8710: LD_INT 3
8712: PUSH
8713: LD_INT 43
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: PUSH
8722: LD_INT 24
8724: PUSH
8725: LD_INT 1
8727: PUSH
8728: LD_INT 3
8730: PUSH
8731: LD_INT 46
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: PUSH
8740: LD_INT 22
8742: PUSH
8743: LD_INT 1
8745: PUSH
8746: LD_INT 3
8748: PUSH
8749: LD_INT 43
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: PUSH
8758: LD_INT 24
8760: PUSH
8761: LD_INT 1
8763: PUSH
8764: LD_INT 3
8766: PUSH
8767: LD_INT 46
8769: PUSH
8770: EMPTY
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: PUSH
8776: LD_INT 22
8778: PUSH
8779: LD_INT 1
8781: PUSH
8782: LD_INT 3
8784: PUSH
8785: LD_INT 45
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: PUSH
8794: LD_INT 22
8796: PUSH
8797: LD_INT 1
8799: PUSH
8800: LD_INT 3
8802: PUSH
8803: LD_INT 43
8805: PUSH
8806: EMPTY
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: PUSH
8812: LD_INT 24
8814: PUSH
8815: LD_INT 1
8817: PUSH
8818: LD_INT 3
8820: PUSH
8821: LD_INT 46
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: PUSH
8830: LD_INT 22
8832: PUSH
8833: LD_INT 1
8835: PUSH
8836: LD_INT 3
8838: PUSH
8839: LD_INT 45
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: PUSH
8848: EMPTY
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
8858: LD_VAR 0 2
8862: PPUSH
8863: LD_VAR 0 3
8867: PPUSH
8868: CALL 73609 0 2
// end ; end ;
8872: GO 8875
8874: POP
// repeat wait ( 0 0$1 ) ;
8875: LD_INT 35
8877: PPUSH
8878: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 8 ;
8882: LD_VAR 0 2
8886: PPUSH
8887: LD_INT 1
8889: PPUSH
8890: CALL 75027 0 2
8894: PUSH
8895: LD_INT 8
8897: GREATEREQUAL
8898: IFFALSE 8875
// wait ( 0 0$30 ) ;
8900: LD_INT 1050
8902: PPUSH
8903: CALL_OW 67
// _target := [ [ 144 , 65 ] , [ 63 , 38 ] ] ;
8907: LD_ADDR_VAR 0 5
8911: PUSH
8912: LD_INT 144
8914: PUSH
8915: LD_INT 65
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: PUSH
8922: LD_INT 63
8924: PUSH
8925: LD_INT 38
8927: PUSH
8928: EMPTY
8929: LIST
8930: LIST
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
8936: LD_ADDR_VAR 0 4
8940: PUSH
8941: LD_INT 0
8943: PUSH
8944: LD_INT 0
8946: PUSH
8947: LD_INT 0
8949: PUSH
8950: LD_INT 1
8952: PUSH
8953: LD_INT 0
8955: PUSH
8956: LD_INT 0
8958: PUSH
8959: LD_INT 0
8961: PUSH
8962: LD_INT 0
8964: PUSH
8965: LD_INT 1
8967: PUSH
8968: LD_INT 0
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
8983: LD_ADDR_VAR 0 6
8987: PUSH
8988: LD_EXP 82
8992: PUSH
8993: LD_VAR 0 2
8997: ARRAY
8998: PUSH
8999: LD_EXP 85
9003: PUSH
9004: LD_VAR 0 2
9008: ARRAY
9009: DIFF
9010: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
9011: LD_ADDR_EXP 82
9015: PUSH
9016: LD_EXP 82
9020: PPUSH
9021: LD_VAR 0 2
9025: PPUSH
9026: LD_EXP 82
9030: PUSH
9031: LD_VAR 0 2
9035: ARRAY
9036: PUSH
9037: LD_VAR 0 6
9041: DIFF
9042: PPUSH
9043: CALL_OW 1
9047: ST_TO_ADDR
// if not attackers then
9048: LD_VAR 0 6
9052: NOT
9053: IFFALSE 9057
// continue ;
9055: GO 8246
// repeat wait ( 0 0$1 ) ;
9057: LD_INT 35
9059: PPUSH
9060: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
9064: LD_VAR 0 6
9068: PPUSH
9069: LD_INT 60
9071: PUSH
9072: EMPTY
9073: LIST
9074: PPUSH
9075: CALL_OW 72
9079: NOT
9080: IFFALSE 9057
// repeat wait ( 0 0$1 ) ;
9082: LD_INT 35
9084: PPUSH
9085: CALL_OW 67
// for i in attackers do
9089: LD_ADDR_VAR 0 1
9093: PUSH
9094: LD_VAR 0 6
9098: PUSH
9099: FOR_IN
9100: IFFALSE 9384
// begin if IsDead ( i ) then
9102: LD_VAR 0 1
9106: PPUSH
9107: CALL_OW 301
9111: IFFALSE 9129
// attackers := attackers diff i ;
9113: LD_ADDR_VAR 0 6
9117: PUSH
9118: LD_VAR 0 6
9122: PUSH
9123: LD_VAR 0 1
9127: DIFF
9128: ST_TO_ADDR
// if not HasTask ( i ) then
9129: LD_VAR 0 1
9133: PPUSH
9134: CALL_OW 314
9138: NOT
9139: IFFALSE 9382
// begin if not GetTag ( i ) then
9141: LD_VAR 0 1
9145: PPUSH
9146: CALL_OW 110
9150: NOT
9151: IFFALSE 9243
// begin ComAgressiveMove ( i , _target [ 1 ] [ 1 ] , _target [ 1 ] [ 2 ] ) ;
9153: LD_VAR 0 1
9157: PPUSH
9158: LD_VAR 0 5
9162: PUSH
9163: LD_INT 1
9165: ARRAY
9166: PUSH
9167: LD_INT 1
9169: ARRAY
9170: PPUSH
9171: LD_VAR 0 5
9175: PUSH
9176: LD_INT 1
9178: ARRAY
9179: PUSH
9180: LD_INT 2
9182: ARRAY
9183: PPUSH
9184: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 1 ] [ 1 ] , _target [ 1 ] [ 2 ] ) < 8 then
9188: LD_VAR 0 1
9192: PPUSH
9193: LD_VAR 0 5
9197: PUSH
9198: LD_INT 1
9200: ARRAY
9201: PUSH
9202: LD_INT 1
9204: ARRAY
9205: PPUSH
9206: LD_VAR 0 5
9210: PUSH
9211: LD_INT 1
9213: ARRAY
9214: PUSH
9215: LD_INT 2
9217: ARRAY
9218: PPUSH
9219: CALL_OW 297
9223: PUSH
9224: LD_INT 8
9226: LESS
9227: IFFALSE 9241
// SetTag ( i , 1 ) ;
9229: LD_VAR 0 1
9233: PPUSH
9234: LD_INT 1
9236: PPUSH
9237: CALL_OW 109
// end else
9241: GO 9382
// if GetTag ( i ) = 1 then
9243: LD_VAR 0 1
9247: PPUSH
9248: CALL_OW 110
9252: PUSH
9253: LD_INT 1
9255: EQUAL
9256: IFFALSE 9348
// begin ComAgressiveMove ( i , _target [ 2 ] [ 1 ] , _target [ 2 ] [ 2 ] ) ;
9258: LD_VAR 0 1
9262: PPUSH
9263: LD_VAR 0 5
9267: PUSH
9268: LD_INT 2
9270: ARRAY
9271: PUSH
9272: LD_INT 1
9274: ARRAY
9275: PPUSH
9276: LD_VAR 0 5
9280: PUSH
9281: LD_INT 2
9283: ARRAY
9284: PUSH
9285: LD_INT 2
9287: ARRAY
9288: PPUSH
9289: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 2 ] [ 1 ] , _target [ 2 ] [ 2 ] ) < 8 then
9293: LD_VAR 0 1
9297: PPUSH
9298: LD_VAR 0 5
9302: PUSH
9303: LD_INT 2
9305: ARRAY
9306: PUSH
9307: LD_INT 1
9309: ARRAY
9310: PPUSH
9311: LD_VAR 0 5
9315: PUSH
9316: LD_INT 2
9318: ARRAY
9319: PUSH
9320: LD_INT 2
9322: ARRAY
9323: PPUSH
9324: CALL_OW 297
9328: PUSH
9329: LD_INT 8
9331: LESS
9332: IFFALSE 9346
// SetTag ( i , 2 ) ;
9334: LD_VAR 0 1
9338: PPUSH
9339: LD_INT 2
9341: PPUSH
9342: CALL_OW 109
// end else
9346: GO 9382
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
9348: LD_VAR 0 1
9352: PPUSH
9353: LD_INT 81
9355: PUSH
9356: LD_INT 3
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: PPUSH
9363: CALL_OW 69
9367: PPUSH
9368: LD_VAR 0 1
9372: PPUSH
9373: CALL_OW 74
9377: PPUSH
9378: CALL_OW 115
// end ; end ;
9382: GO 9099
9384: POP
9385: POP
// until not attackers ;
9386: LD_VAR 0 6
9390: NOT
9391: IFFALSE 9082
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
9393: LD_EXP 63
9397: PUSH
9398: LD_VAR 0 2
9402: ARRAY
9403: PPUSH
9404: LD_INT 50
9406: PUSH
9407: EMPTY
9408: LIST
9409: PPUSH
9410: CALL_OW 72
9414: NOT
9415: IFFALSE 8246
// end ;
9417: PPOPN 6
9419: END
// export RussiansDefeated ; every 0 0$1 trigger FirstAssaultRepelled and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
9420: LD_EXP 4
9424: PUSH
9425: LD_INT 22
9427: PUSH
9428: LD_INT 3
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PUSH
9435: LD_INT 21
9437: PUSH
9438: LD_INT 1
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: PPUSH
9449: CALL_OW 69
9453: PUSH
9454: LD_INT 0
9456: EQUAL
9457: AND
9458: IFFALSE 9471
9460: GO 9462
9462: DISABLE
// begin RussiansDefeated := true ;
9463: LD_ADDR_EXP 44
9467: PUSH
9468: LD_INT 1
9470: ST_TO_ADDR
// end ;
9471: END
// every 0 0$1 trigger FirstAssaultRepelled and not JMM_Arrived do var i , un , filter , soldiers , bazookas , vehs , vehicle , medics , squad , attackers , _target , flags ;
9472: LD_EXP 4
9476: PUSH
9477: LD_EXP 6
9481: NOT
9482: AND
9483: IFFALSE 10908
9485: GO 9487
9487: DISABLE
9488: LD_INT 0
9490: PPUSH
9491: PPUSH
9492: PPUSH
9493: PPUSH
9494: PPUSH
9495: PPUSH
9496: PPUSH
9497: PPUSH
9498: PPUSH
9499: PPUSH
9500: PPUSH
9501: PPUSH
// begin wait ( [ Rand ( 4 4$00 , 4 4$30 ) , Rand ( 4 4$30 , 3 3$30 ) , Rand ( 3 3$00 , 2 2$00 ) ] [ Difficulty ] ) ;
9502: LD_INT 8400
9504: PPUSH
9505: LD_INT 9450
9507: PPUSH
9508: CALL_OW 12
9512: PUSH
9513: LD_INT 9450
9515: PPUSH
9516: LD_INT 7350
9518: PPUSH
9519: CALL_OW 12
9523: PUSH
9524: LD_INT 6300
9526: PPUSH
9527: LD_INT 4200
9529: PPUSH
9530: CALL_OW 12
9534: PUSH
9535: EMPTY
9536: LIST
9537: LIST
9538: LIST
9539: PUSH
9540: LD_OWVAR 67
9544: ARRAY
9545: PPUSH
9546: CALL_OW 67
// filter := [ ] ;
9550: LD_ADDR_VAR 0 3
9554: PUSH
9555: EMPTY
9556: ST_TO_ADDR
// soldiers := [ Rand ( 2 , 3 ) , Rand ( 3 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
9557: LD_ADDR_VAR 0 4
9561: PUSH
9562: LD_INT 2
9564: PPUSH
9565: LD_INT 3
9567: PPUSH
9568: CALL_OW 12
9572: PUSH
9573: LD_INT 3
9575: PPUSH
9576: LD_INT 4
9578: PPUSH
9579: CALL_OW 12
9583: PUSH
9584: LD_INT 3
9586: PPUSH
9587: LD_INT 5
9589: PPUSH
9590: CALL_OW 12
9594: PUSH
9595: EMPTY
9596: LIST
9597: LIST
9598: LIST
9599: PUSH
9600: LD_OWVAR 67
9604: ARRAY
9605: ST_TO_ADDR
// bazookas := [ 1 , Rand ( 1 , 2 ) , Rand ( 2 , 3 ) ] [ Difficulty ] ;
9606: LD_ADDR_VAR 0 5
9610: PUSH
9611: LD_INT 1
9613: PUSH
9614: LD_INT 1
9616: PPUSH
9617: LD_INT 2
9619: PPUSH
9620: CALL_OW 12
9624: PUSH
9625: LD_INT 2
9627: PPUSH
9628: LD_INT 3
9630: PPUSH
9631: CALL_OW 12
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: LIST
9640: PUSH
9641: LD_OWVAR 67
9645: ARRAY
9646: ST_TO_ADDR
// vehs := [ Rand ( 2 , 3 ) , Rand ( 2 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
9647: LD_ADDR_VAR 0 6
9651: PUSH
9652: LD_INT 2
9654: PPUSH
9655: LD_INT 3
9657: PPUSH
9658: CALL_OW 12
9662: PUSH
9663: LD_INT 2
9665: PPUSH
9666: LD_INT 4
9668: PPUSH
9669: CALL_OW 12
9673: PUSH
9674: LD_INT 3
9676: PPUSH
9677: LD_INT 5
9679: PPUSH
9680: CALL_OW 12
9684: PUSH
9685: EMPTY
9686: LIST
9687: LIST
9688: LIST
9689: PUSH
9690: LD_OWVAR 67
9694: ARRAY
9695: ST_TO_ADDR
// medics := [ 1 , 2 , 2 ] [ Difficulty ] ;
9696: LD_ADDR_VAR 0 8
9700: PUSH
9701: LD_INT 1
9703: PUSH
9704: LD_INT 2
9706: PUSH
9707: LD_INT 2
9709: PUSH
9710: EMPTY
9711: LIST
9712: LIST
9713: LIST
9714: PUSH
9715: LD_OWVAR 67
9719: ARRAY
9720: ST_TO_ADDR
// uc_side := 3 ;
9721: LD_ADDR_OWVAR 20
9725: PUSH
9726: LD_INT 3
9728: ST_TO_ADDR
// uc_nation := nation_russian ;
9729: LD_ADDR_OWVAR 21
9733: PUSH
9734: LD_INT 3
9736: ST_TO_ADDR
// for i = 1 to soldiers do
9737: LD_ADDR_VAR 0 1
9741: PUSH
9742: DOUBLE
9743: LD_INT 1
9745: DEC
9746: ST_TO_ADDR
9747: LD_VAR 0 4
9751: PUSH
9752: FOR_TO
9753: IFFALSE 9795
// begin PrepareSoldier ( 0 , game_eskill ) ;
9755: LD_INT 0
9757: PPUSH
9758: LD_EXP 40
9762: PPUSH
9763: CALL_OW 381
// un := CreateHuman ;
9767: LD_ADDR_VAR 0 2
9771: PUSH
9772: CALL_OW 44
9776: ST_TO_ADDR
// filter := filter ^ un ;
9777: LD_ADDR_VAR 0 3
9781: PUSH
9782: LD_VAR 0 3
9786: PUSH
9787: LD_VAR 0 2
9791: ADD
9792: ST_TO_ADDR
// end ;
9793: GO 9752
9795: POP
9796: POP
// for i = 1 to bazookas do
9797: LD_ADDR_VAR 0 1
9801: PUSH
9802: DOUBLE
9803: LD_INT 1
9805: DEC
9806: ST_TO_ADDR
9807: LD_VAR 0 5
9811: PUSH
9812: FOR_TO
9813: IFFALSE 9863
// begin PrepareSoldier ( 0 , game_eskill ) ;
9815: LD_INT 0
9817: PPUSH
9818: LD_EXP 40
9822: PPUSH
9823: CALL_OW 381
// hc_class := class_bazooker ;
9827: LD_ADDR_OWVAR 28
9831: PUSH
9832: LD_INT 9
9834: ST_TO_ADDR
// un := CreateHuman ;
9835: LD_ADDR_VAR 0 2
9839: PUSH
9840: CALL_OW 44
9844: ST_TO_ADDR
// filter := filter ^ un ;
9845: LD_ADDR_VAR 0 3
9849: PUSH
9850: LD_VAR 0 3
9854: PUSH
9855: LD_VAR 0 2
9859: ADD
9860: ST_TO_ADDR
// end ;
9861: GO 9812
9863: POP
9864: POP
// for i = 1 to medics do
9865: LD_ADDR_VAR 0 1
9869: PUSH
9870: DOUBLE
9871: LD_INT 1
9873: DEC
9874: ST_TO_ADDR
9875: LD_VAR 0 8
9879: PUSH
9880: FOR_TO
9881: IFFALSE 9923
// begin PrepareScientist ( 0 , game_eskill ) ;
9883: LD_INT 0
9885: PPUSH
9886: LD_EXP 40
9890: PPUSH
9891: CALL_OW 384
// un := CreateHuman ;
9895: LD_ADDR_VAR 0 2
9899: PUSH
9900: CALL_OW 44
9904: ST_TO_ADDR
// filter := filter ^ un ;
9905: LD_ADDR_VAR 0 3
9909: PUSH
9910: LD_VAR 0 3
9914: PUSH
9915: LD_VAR 0 2
9919: ADD
9920: ST_TO_ADDR
// end ;
9921: GO 9880
9923: POP
9924: POP
// for i = 1 to vehs do
9925: LD_ADDR_VAR 0 1
9929: PUSH
9930: DOUBLE
9931: LD_INT 1
9933: DEC
9934: ST_TO_ADDR
9935: LD_VAR 0 6
9939: PUSH
9940: FOR_TO
9941: IFFALSE 10133
// begin case Rand ( 1 , 5 ) of 1 :
9943: LD_INT 1
9945: PPUSH
9946: LD_INT 5
9948: PPUSH
9949: CALL_OW 12
9953: PUSH
9954: LD_INT 1
9956: DOUBLE
9957: EQUAL
9958: IFTRUE 9962
9960: GO 9984
9962: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 2 :
9963: LD_INT 22
9965: PPUSH
9966: LD_INT 3
9968: PPUSH
9969: LD_INT 3
9971: PPUSH
9972: LD_INT 43
9974: PPUSH
9975: LD_INT 100
9977: PPUSH
9978: CALL 18298 0 5
9982: GO 10105
9984: LD_INT 2
9986: DOUBLE
9987: EQUAL
9988: IFTRUE 9992
9990: GO 10014
9992: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gun , 100 ) ; 3 :
9993: LD_INT 22
9995: PPUSH
9996: LD_INT 3
9998: PPUSH
9999: LD_INT 3
10001: PPUSH
10002: LD_INT 44
10004: PPUSH
10005: LD_INT 100
10007: PPUSH
10008: CALL 18298 0 5
10012: GO 10105
10014: LD_INT 3
10016: DOUBLE
10017: EQUAL
10018: IFTRUE 10022
10020: GO 10044
10022: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher , 100 ) ; 4 :
10023: LD_INT 22
10025: PPUSH
10026: LD_INT 3
10028: PPUSH
10029: LD_INT 3
10031: PPUSH
10032: LD_INT 45
10034: PPUSH
10035: LD_INT 100
10037: PPUSH
10038: CALL 18298 0 5
10042: GO 10105
10044: LD_INT 4
10046: DOUBLE
10047: EQUAL
10048: IFTRUE 10052
10050: GO 10074
10052: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 5 :
10053: LD_INT 24
10055: PPUSH
10056: LD_INT 3
10058: PPUSH
10059: LD_INT 3
10061: PPUSH
10062: LD_INT 43
10064: PPUSH
10065: LD_INT 100
10067: PPUSH
10068: CALL 18298 0 5
10072: GO 10105
10074: LD_INT 5
10076: DOUBLE
10077: EQUAL
10078: IFTRUE 10082
10080: GO 10104
10082: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun , 100 ) ; end ;
10083: LD_INT 24
10085: PPUSH
10086: LD_INT 3
10088: PPUSH
10089: LD_INT 3
10091: PPUSH
10092: LD_INT 46
10094: PPUSH
10095: LD_INT 100
10097: PPUSH
10098: CALL 18298 0 5
10102: GO 10105
10104: POP
// vehicle := CreateVehicle ;
10105: LD_ADDR_VAR 0 7
10109: PUSH
10110: CALL_OW 45
10114: ST_TO_ADDR
// filter := filter ^ vehicle ;
10115: LD_ADDR_VAR 0 3
10119: PUSH
10120: LD_VAR 0 3
10124: PUSH
10125: LD_VAR 0 7
10129: ADD
10130: ST_TO_ADDR
// end ;
10131: GO 9940
10133: POP
10134: POP
// for i = 1 to filter do
10135: LD_ADDR_VAR 0 1
10139: PUSH
10140: DOUBLE
10141: LD_INT 1
10143: DEC
10144: ST_TO_ADDR
10145: LD_VAR 0 3
10149: PUSH
10150: FOR_TO
10151: IFFALSE 10176
// PlaceUnitArea ( filter [ i ] , RUAttackSpawn1 , false ) ;
10153: LD_VAR 0 3
10157: PUSH
10158: LD_VAR 0 1
10162: ARRAY
10163: PPUSH
10164: LD_INT 14
10166: PPUSH
10167: LD_INT 0
10169: PPUSH
10170: CALL_OW 49
10174: GO 10150
10176: POP
10177: POP
// case Rand ( 1 , 3 ) of 1 :
10178: LD_INT 1
10180: PPUSH
10181: LD_INT 3
10183: PPUSH
10184: CALL_OW 12
10188: PUSH
10189: LD_INT 1
10191: DOUBLE
10192: EQUAL
10193: IFTRUE 10197
10195: GO 10251
10197: POP
// _target := [ [ 165 , 114 ] , [ 104 , 108 ] , [ 86 , 77 ] , [ 63 , 38 ] ] ; 2 :
10198: LD_ADDR_VAR 0 11
10202: PUSH
10203: LD_INT 165
10205: PUSH
10206: LD_INT 114
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: PUSH
10213: LD_INT 104
10215: PUSH
10216: LD_INT 108
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: PUSH
10223: LD_INT 86
10225: PUSH
10226: LD_INT 77
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: PUSH
10233: LD_INT 63
10235: PUSH
10236: LD_INT 38
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: ST_TO_ADDR
10249: GO 10376
10251: LD_INT 2
10253: DOUBLE
10254: EQUAL
10255: IFTRUE 10259
10257: GO 10313
10259: POP
// _target := [ [ 165 , 114 ] , [ 146 , 71 ] , [ 112 , 41 ] , [ 63 , 38 ] ] ; 3 :
10260: LD_ADDR_VAR 0 11
10264: PUSH
10265: LD_INT 165
10267: PUSH
10268: LD_INT 114
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: PUSH
10275: LD_INT 146
10277: PUSH
10278: LD_INT 71
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: PUSH
10285: LD_INT 112
10287: PUSH
10288: LD_INT 41
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: PUSH
10295: LD_INT 63
10297: PUSH
10298: LD_INT 38
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: ST_TO_ADDR
10311: GO 10376
10313: LD_INT 3
10315: DOUBLE
10316: EQUAL
10317: IFTRUE 10321
10319: GO 10375
10321: POP
// _target := [ [ 165 , 114 ] , [ 63 , 99 ] , [ 55 , 77 ] , [ 63 , 38 ] ] ; end ;
10322: LD_ADDR_VAR 0 11
10326: PUSH
10327: LD_INT 165
10329: PUSH
10330: LD_INT 114
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: PUSH
10337: LD_INT 63
10339: PUSH
10340: LD_INT 99
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PUSH
10347: LD_INT 55
10349: PUSH
10350: LD_INT 77
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: PUSH
10357: LD_INT 63
10359: PUSH
10360: LD_INT 38
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: ST_TO_ADDR
10373: GO 10376
10375: POP
// attackers := filter ;
10376: LD_ADDR_VAR 0 10
10380: PUSH
10381: LD_VAR 0 3
10385: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10386: LD_INT 35
10388: PPUSH
10389: CALL_OW 67
// for i in attackers do
10393: LD_ADDR_VAR 0 1
10397: PUSH
10398: LD_VAR 0 10
10402: PUSH
10403: FOR_IN
10404: IFFALSE 10898
// begin if IsDead ( i ) then
10406: LD_VAR 0 1
10410: PPUSH
10411: CALL_OW 301
10415: IFFALSE 10433
// attackers := attackers diff i ;
10417: LD_ADDR_VAR 0 10
10421: PUSH
10422: LD_VAR 0 10
10426: PUSH
10427: LD_VAR 0 1
10431: DIFF
10432: ST_TO_ADDR
// if not HasTask ( i ) then
10433: LD_VAR 0 1
10437: PPUSH
10438: CALL_OW 314
10442: NOT
10443: IFFALSE 10896
// begin if not GetTag ( i ) then
10445: LD_VAR 0 1
10449: PPUSH
10450: CALL_OW 110
10454: NOT
10455: IFFALSE 10547
// begin ComAgressiveMove ( i , _target [ 1 ] [ 1 ] , _target [ 1 ] [ 2 ] ) ;
10457: LD_VAR 0 1
10461: PPUSH
10462: LD_VAR 0 11
10466: PUSH
10467: LD_INT 1
10469: ARRAY
10470: PUSH
10471: LD_INT 1
10473: ARRAY
10474: PPUSH
10475: LD_VAR 0 11
10479: PUSH
10480: LD_INT 1
10482: ARRAY
10483: PUSH
10484: LD_INT 2
10486: ARRAY
10487: PPUSH
10488: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 1 ] [ 1 ] , _target [ 1 ] [ 2 ] ) < 8 then
10492: LD_VAR 0 1
10496: PPUSH
10497: LD_VAR 0 11
10501: PUSH
10502: LD_INT 1
10504: ARRAY
10505: PUSH
10506: LD_INT 1
10508: ARRAY
10509: PPUSH
10510: LD_VAR 0 11
10514: PUSH
10515: LD_INT 1
10517: ARRAY
10518: PUSH
10519: LD_INT 2
10521: ARRAY
10522: PPUSH
10523: CALL_OW 297
10527: PUSH
10528: LD_INT 8
10530: LESS
10531: IFFALSE 10545
// SetTag ( i , 1 ) ;
10533: LD_VAR 0 1
10537: PPUSH
10538: LD_INT 1
10540: PPUSH
10541: CALL_OW 109
// end else
10545: GO 10896
// if GetTag ( i ) = 1 then
10547: LD_VAR 0 1
10551: PPUSH
10552: CALL_OW 110
10556: PUSH
10557: LD_INT 1
10559: EQUAL
10560: IFFALSE 10652
// begin ComAgressiveMove ( i , _target [ 2 ] [ 1 ] , _target [ 2 ] [ 2 ] ) ;
10562: LD_VAR 0 1
10566: PPUSH
10567: LD_VAR 0 11
10571: PUSH
10572: LD_INT 2
10574: ARRAY
10575: PUSH
10576: LD_INT 1
10578: ARRAY
10579: PPUSH
10580: LD_VAR 0 11
10584: PUSH
10585: LD_INT 2
10587: ARRAY
10588: PUSH
10589: LD_INT 2
10591: ARRAY
10592: PPUSH
10593: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 2 ] [ 1 ] , _target [ 2 ] [ 2 ] ) < 8 then
10597: LD_VAR 0 1
10601: PPUSH
10602: LD_VAR 0 11
10606: PUSH
10607: LD_INT 2
10609: ARRAY
10610: PUSH
10611: LD_INT 1
10613: ARRAY
10614: PPUSH
10615: LD_VAR 0 11
10619: PUSH
10620: LD_INT 2
10622: ARRAY
10623: PUSH
10624: LD_INT 2
10626: ARRAY
10627: PPUSH
10628: CALL_OW 297
10632: PUSH
10633: LD_INT 8
10635: LESS
10636: IFFALSE 10650
// SetTag ( i , 2 ) ;
10638: LD_VAR 0 1
10642: PPUSH
10643: LD_INT 2
10645: PPUSH
10646: CALL_OW 109
// end else
10650: GO 10896
// if GetTag ( i ) = 2 then
10652: LD_VAR 0 1
10656: PPUSH
10657: CALL_OW 110
10661: PUSH
10662: LD_INT 2
10664: EQUAL
10665: IFFALSE 10757
// begin ComAgressiveMove ( i , _target [ 3 ] [ 1 ] , _target [ 3 ] [ 2 ] ) ;
10667: LD_VAR 0 1
10671: PPUSH
10672: LD_VAR 0 11
10676: PUSH
10677: LD_INT 3
10679: ARRAY
10680: PUSH
10681: LD_INT 1
10683: ARRAY
10684: PPUSH
10685: LD_VAR 0 11
10689: PUSH
10690: LD_INT 3
10692: ARRAY
10693: PUSH
10694: LD_INT 2
10696: ARRAY
10697: PPUSH
10698: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 3 ] [ 1 ] , _target [ 3 ] [ 2 ] ) < 8 then
10702: LD_VAR 0 1
10706: PPUSH
10707: LD_VAR 0 11
10711: PUSH
10712: LD_INT 3
10714: ARRAY
10715: PUSH
10716: LD_INT 1
10718: ARRAY
10719: PPUSH
10720: LD_VAR 0 11
10724: PUSH
10725: LD_INT 3
10727: ARRAY
10728: PUSH
10729: LD_INT 2
10731: ARRAY
10732: PPUSH
10733: CALL_OW 297
10737: PUSH
10738: LD_INT 8
10740: LESS
10741: IFFALSE 10755
// SetTag ( i , 3 ) ;
10743: LD_VAR 0 1
10747: PPUSH
10748: LD_INT 3
10750: PPUSH
10751: CALL_OW 109
// end else
10755: GO 10896
// if GetTag ( i ) = 3 then
10757: LD_VAR 0 1
10761: PPUSH
10762: CALL_OW 110
10766: PUSH
10767: LD_INT 3
10769: EQUAL
10770: IFFALSE 10862
// begin ComAgressiveMove ( i , _target [ 4 ] [ 1 ] , _target [ 4 ] [ 2 ] ) ;
10772: LD_VAR 0 1
10776: PPUSH
10777: LD_VAR 0 11
10781: PUSH
10782: LD_INT 4
10784: ARRAY
10785: PUSH
10786: LD_INT 1
10788: ARRAY
10789: PPUSH
10790: LD_VAR 0 11
10794: PUSH
10795: LD_INT 4
10797: ARRAY
10798: PUSH
10799: LD_INT 2
10801: ARRAY
10802: PPUSH
10803: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 4 ] [ 1 ] , _target [ 4 ] [ 2 ] ) < 8 then
10807: LD_VAR 0 1
10811: PPUSH
10812: LD_VAR 0 11
10816: PUSH
10817: LD_INT 4
10819: ARRAY
10820: PUSH
10821: LD_INT 1
10823: ARRAY
10824: PPUSH
10825: LD_VAR 0 11
10829: PUSH
10830: LD_INT 4
10832: ARRAY
10833: PUSH
10834: LD_INT 2
10836: ARRAY
10837: PPUSH
10838: CALL_OW 297
10842: PUSH
10843: LD_INT 8
10845: LESS
10846: IFFALSE 10860
// SetTag ( i , 4 ) ;
10848: LD_VAR 0 1
10852: PPUSH
10853: LD_INT 4
10855: PPUSH
10856: CALL_OW 109
// end else
10860: GO 10896
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
10862: LD_VAR 0 1
10866: PPUSH
10867: LD_INT 81
10869: PUSH
10870: LD_INT 3
10872: PUSH
10873: EMPTY
10874: LIST
10875: LIST
10876: PPUSH
10877: CALL_OW 69
10881: PPUSH
10882: LD_VAR 0 1
10886: PPUSH
10887: CALL_OW 74
10891: PPUSH
10892: CALL_OW 115
// end ; end ;
10896: GO 10403
10898: POP
10899: POP
// until not attackers ;
10900: LD_VAR 0 10
10904: NOT
10905: IFFALSE 10386
// enable ;
10907: ENABLE
// end ;
10908: PPOPN 12
10910: END
// every 0 0$1 do var i , tmp ;
10911: GO 10913
10913: DISABLE
10914: LD_INT 0
10916: PPUSH
10917: PPUSH
// begin enable ;
10918: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
10919: LD_ADDR_VAR 0 2
10923: PUSH
10924: LD_INT 3
10926: PUSH
10927: LD_INT 22
10929: PUSH
10930: LD_INT 1
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: PUSH
10937: EMPTY
10938: LIST
10939: LIST
10940: PUSH
10941: LD_INT 32
10943: PUSH
10944: LD_INT 1
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: PUSH
10951: EMPTY
10952: LIST
10953: LIST
10954: PPUSH
10955: CALL_OW 69
10959: ST_TO_ADDR
// if tmp then
10960: LD_VAR 0 2
10964: IFFALSE 11010
// for i in tmp do
10966: LD_ADDR_VAR 0 1
10970: PUSH
10971: LD_VAR 0 2
10975: PUSH
10976: FOR_IN
10977: IFFALSE 11008
// if GetFuel ( i ) < 3 then
10979: LD_VAR 0 1
10983: PPUSH
10984: CALL_OW 261
10988: PUSH
10989: LD_INT 3
10991: LESS
10992: IFFALSE 11006
// SetFuel ( i , 3 ) ;
10994: LD_VAR 0 1
10998: PPUSH
10999: LD_INT 3
11001: PPUSH
11002: CALL_OW 240
11006: GO 10976
11008: POP
11009: POP
// end ;
11010: PPOPN 2
11012: END
// every 0 0$1 trigger ( FilterUnitsInArea ( RU_Base_Area , [ f_side , 1 ] ) and not JMMArrival ) or ( FilterUnitsInArea ( US_BackOffArea , [ f_side , 1 ] ) and not FirstAssaultRepelled ) do var i , veh , tmp ;
11013: LD_INT 3
11015: PPUSH
11016: LD_INT 22
11018: PUSH
11019: LD_INT 1
11021: PUSH
11022: EMPTY
11023: LIST
11024: LIST
11025: PPUSH
11026: CALL_OW 70
11030: PUSH
11031: LD_EXP 41
11035: NOT
11036: AND
11037: PUSH
11038: LD_INT 10
11040: PPUSH
11041: LD_INT 22
11043: PUSH
11044: LD_INT 1
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: PPUSH
11051: CALL_OW 70
11055: PUSH
11056: LD_EXP 4
11060: NOT
11061: AND
11062: OR
11063: IFFALSE 11077
11065: GO 11067
11067: DISABLE
11068: LD_INT 0
11070: PPUSH
11071: PPUSH
11072: PPUSH
// begin Antirush ;
11073: CALL 11080 0 0
// end ;
11077: PPOPN 3
11079: END
// export function Antirush ; var i , veh , tmp , num ; begin
11080: LD_INT 0
11082: PPUSH
11083: PPUSH
11084: PPUSH
11085: PPUSH
11086: PPUSH
// tmp := [ ] ;
11087: LD_ADDR_VAR 0 4
11091: PUSH
11092: EMPTY
11093: ST_TO_ADDR
// if not FirstAssaultRepelled then
11094: LD_EXP 4
11098: NOT
11099: IFFALSE 11111
// num := 18 else
11101: LD_ADDR_VAR 0 5
11105: PUSH
11106: LD_INT 18
11108: ST_TO_ADDR
11109: GO 11119
// num := 12 ;
11111: LD_ADDR_VAR 0 5
11115: PUSH
11116: LD_INT 12
11118: ST_TO_ADDR
// num := num - [ 4 , 2 , 0 ] [ Difficulty ] ;
11119: LD_ADDR_VAR 0 5
11123: PUSH
11124: LD_VAR 0 5
11128: PUSH
11129: LD_INT 4
11131: PUSH
11132: LD_INT 2
11134: PUSH
11135: LD_INT 0
11137: PUSH
11138: EMPTY
11139: LIST
11140: LIST
11141: LIST
11142: PUSH
11143: LD_OWVAR 67
11147: ARRAY
11148: MINUS
11149: ST_TO_ADDR
// for i := 1 to num do
11150: LD_ADDR_VAR 0 2
11154: PUSH
11155: DOUBLE
11156: LD_INT 1
11158: DEC
11159: ST_TO_ADDR
11160: LD_VAR 0 5
11164: PUSH
11165: FOR_TO
11166: IFFALSE 11305
// begin uc_side := 3 ;
11168: LD_ADDR_OWVAR 20
11172: PUSH
11173: LD_INT 3
11175: ST_TO_ADDR
// uc_nation := 3 ;
11176: LD_ADDR_OWVAR 21
11180: PUSH
11181: LD_INT 3
11183: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_siberite , control_computer , [ ru_heavy_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] , 100 ) ;
11184: LD_INT 23
11186: PPUSH
11187: LD_INT 3
11189: PPUSH
11190: LD_INT 3
11192: PPUSH
11193: LD_INT 46
11195: PUSH
11196: LD_INT 43
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: PUSH
11203: LD_INT 1
11205: PPUSH
11206: LD_INT 2
11208: PPUSH
11209: CALL_OW 12
11213: ARRAY
11214: PPUSH
11215: LD_INT 100
11217: PPUSH
11218: CALL 18298 0 5
// veh := CreateVehicle ;
11222: LD_ADDR_VAR 0 3
11226: PUSH
11227: CALL_OW 45
11231: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
11232: LD_VAR 0 3
11236: PPUSH
11237: LD_INT 5
11239: PPUSH
11240: CALL_OW 233
// PlaceUnitXYR ( veh , 199 , 135 , 3 , false ) ;
11244: LD_VAR 0 3
11248: PPUSH
11249: LD_INT 199
11251: PPUSH
11252: LD_INT 135
11254: PPUSH
11255: LD_INT 3
11257: PPUSH
11258: LD_INT 0
11260: PPUSH
11261: CALL_OW 50
// tmp := tmp ^ veh ;
11265: LD_ADDR_VAR 0 4
11269: PUSH
11270: LD_VAR 0 4
11274: PUSH
11275: LD_VAR 0 3
11279: ADD
11280: ST_TO_ADDR
// ComMoveXY ( veh , 173 , 118 ) ;
11281: LD_VAR 0 3
11285: PPUSH
11286: LD_INT 173
11288: PPUSH
11289: LD_INT 118
11291: PPUSH
11292: CALL_OW 111
// wait ( 0 0$2 ) ;
11296: LD_INT 70
11298: PPUSH
11299: CALL_OW 67
// end ;
11303: GO 11165
11305: POP
11306: POP
// repeat wait ( 0 0$1 ) ;
11307: LD_INT 35
11309: PPUSH
11310: CALL_OW 67
// for i in tmp do
11314: LD_ADDR_VAR 0 2
11318: PUSH
11319: LD_VAR 0 4
11323: PUSH
11324: FOR_IN
11325: IFFALSE 11392
// if IsDead ( i ) then
11327: LD_VAR 0 2
11331: PPUSH
11332: CALL_OW 301
11336: IFFALSE 11356
// tmp := tmp diff i else
11338: LD_ADDR_VAR 0 4
11342: PUSH
11343: LD_VAR 0 4
11347: PUSH
11348: LD_VAR 0 2
11352: DIFF
11353: ST_TO_ADDR
11354: GO 11390
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
11356: LD_VAR 0 2
11360: PPUSH
11361: LD_INT 22
11363: PUSH
11364: LD_INT 1
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: PPUSH
11371: CALL_OW 69
11375: PPUSH
11376: LD_VAR 0 2
11380: PPUSH
11381: CALL_OW 74
11385: PPUSH
11386: CALL_OW 115
11390: GO 11324
11392: POP
11393: POP
// until not tmp ;
11394: LD_VAR 0 4
11398: NOT
11399: IFFALSE 11307
// end ; end_of_file
11401: LD_VAR 0 1
11405: RET
// export Losses ; on UnitDestroyed ( un ) do begin if un = Brighton then
11406: LD_VAR 0 1
11410: PUSH
11411: LD_EXP 9
11415: EQUAL
11416: IFFALSE 11432
// begin wait ( 0 0$1 ) ;
11418: LD_INT 35
11420: PPUSH
11421: CALL_OW 67
// YouLost ( Brighton ) ;
11425: LD_STRING Brighton
11427: PPUSH
11428: CALL_OW 104
// end ; if un = JMM then
11432: LD_VAR 0 1
11436: PUSH
11437: LD_EXP 37
11441: EQUAL
11442: IFFALSE 11458
// begin wait ( 0 0$1 ) ;
11444: LD_INT 35
11446: PPUSH
11447: CALL_OW 67
// YouLost ( JMM ) ;
11451: LD_STRING JMM
11453: PPUSH
11454: CALL_OW 104
// end ; if un = Megan then
11458: LD_VAR 0 1
11462: PUSH
11463: LD_EXP 11
11467: EQUAL
11468: IFFALSE 11482
// begin Say ( Brighton , DBrighton-MeganDeath ) ;
11470: LD_EXP 9
11474: PPUSH
11475: LD_STRING DBrighton-MeganDeath
11477: PPUSH
11478: CALL_OW 88
// end ; if un = Palmer then
11482: LD_VAR 0 1
11486: PUSH
11487: LD_EXP 10
11491: EQUAL
11492: IFFALSE 11506
// begin Say ( Brighton , DBrighton-PalmerDeath ) ;
11494: LD_EXP 9
11498: PPUSH
11499: LD_STRING DBrighton-PalmerDeath
11501: PPUSH
11502: CALL_OW 88
// end ; if un = Burlak then
11506: LD_VAR 0 1
11510: PUSH
11511: LD_EXP 19
11515: EQUAL
11516: IFFALSE 11548
// begin if JMM_Arrived then
11518: LD_EXP 6
11522: IFFALSE 11536
// Say ( JMM , DJMM-BurlakDead ) ;
11524: LD_EXP 37
11528: PPUSH
11529: LD_STRING DJMM-BurlakDead
11531: PPUSH
11532: CALL_OW 88
// Say ( Palmer , DSol-BurlakDead ) ;
11536: LD_EXP 10
11540: PPUSH
11541: LD_STRING DSol-BurlakDead
11543: PPUSH
11544: CALL_OW 88
// end ; if un = BetaA or un = BetaB then
11548: LD_VAR 0 1
11552: PUSH
11553: LD_INT 1
11555: EQUAL
11556: PUSH
11557: LD_VAR 0 1
11561: PUSH
11562: LD_INT 3
11564: EQUAL
11565: OR
11566: IFFALSE 11582
// begin wait ( 0 0$1 ) ;
11568: LD_INT 35
11570: PPUSH
11571: CALL_OW 67
// YouLost ( Depot ) ;
11575: LD_STRING Depot
11577: PPUSH
11578: CALL_OW 104
// end ; if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
11582: LD_VAR 0 1
11586: PPUSH
11587: CALL_OW 255
11591: PUSH
11592: LD_INT 1
11594: EQUAL
11595: PUSH
11596: LD_VAR 0 1
11600: PPUSH
11601: CALL_OW 247
11605: PUSH
11606: LD_INT 1
11608: EQUAL
11609: AND
11610: IFFALSE 11626
// Losses := Losses + 1 ;
11612: LD_ADDR_EXP 45
11616: PUSH
11617: LD_EXP 45
11621: PUSH
11622: LD_INT 1
11624: PLUS
11625: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
11626: LD_VAR 0 1
11630: PPUSH
11631: CALL 77001 0 1
// end ;
11635: PPOPN 1
11637: END
// on UnitGoesToRed ( un ) do begin if un = Yashin then
11638: LD_VAR 0 1
11642: PUSH
11643: LD_EXP 13
11647: EQUAL
11648: IFFALSE 11662
// ForceSay ( Yashin , DDeath-Yas-3 ) ;
11650: LD_EXP 13
11654: PPUSH
11655: LD_STRING DDeath-Yas-3
11657: PPUSH
11658: CALL_OW 91
// if un = Popov then
11662: LD_VAR 0 1
11666: PUSH
11667: LD_EXP 14
11671: EQUAL
11672: IFFALSE 11686
// ForceSay ( Popov , DDeath-Pop-3 ) ;
11674: LD_EXP 14
11678: PPUSH
11679: LD_STRING DDeath-Pop-3
11681: PPUSH
11682: CALL_OW 91
// if un = Gaydar then
11686: LD_VAR 0 1
11690: PUSH
11691: LD_EXP 15
11695: EQUAL
11696: IFFALSE 11710
// ForceSay ( Gaydar , DDeath-Gay-3 ) ;
11698: LD_EXP 15
11702: PPUSH
11703: LD_STRING DDeath-Gay-3
11705: PPUSH
11706: CALL_OW 91
// if un = Sevi then
11710: LD_VAR 0 1
11714: PUSH
11715: LD_EXP 16
11719: EQUAL
11720: IFFALSE 11734
// ForceSay ( Sevi , DDeath-Vse-3 ) ;
11722: LD_EXP 16
11726: PPUSH
11727: LD_STRING DDeath-Vse-3
11729: PPUSH
11730: CALL_OW 91
// end ;
11734: PPOPN 1
11736: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_laser then
11737: LD_VAR 0 1
11741: PUSH
11742: LD_INT 10
11744: EQUAL
11745: IFFALSE 11783
// begin Say ( Brighton , DBrighton-C1 ) ;
11747: LD_EXP 9
11751: PPUSH
11752: LD_STRING DBrighton-C1
11754: PPUSH
11755: CALL_OW 88
// Say ( Megan , DMegan-C1 ) ;
11759: LD_EXP 11
11763: PPUSH
11764: LD_STRING DMegan-C1
11766: PPUSH
11767: CALL_OW 88
// Say ( Brighton , DBrighton-C2 ) ;
11771: LD_EXP 9
11775: PPUSH
11776: LD_STRING DBrighton-C2
11778: PPUSH
11779: CALL_OW 88
// end ; MCE_ResearchComplete ( tech , lab ) ;
11783: LD_VAR 0 1
11787: PPUSH
11788: LD_VAR 0 2
11792: PPUSH
11793: CALL 76697 0 2
// end ;
11797: PPOPN 2
11799: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
11800: LD_VAR 0 1
11804: PPUSH
11805: LD_VAR 0 2
11809: PPUSH
11810: CALL 79335 0 2
// end ;
11814: PPOPN 2
11816: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
11817: LD_VAR 0 1
11821: PPUSH
11822: CALL 78403 0 1
// end ;
11826: PPOPN 1
11828: END
// export RUFirstDepot ; on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 then
11829: LD_VAR 0 1
11833: PPUSH
11834: CALL_OW 266
11838: PUSH
11839: LD_INT 0
11841: EQUAL
11842: PUSH
11843: LD_VAR 0 1
11847: PPUSH
11848: CALL_OW 255
11852: PUSH
11853: LD_INT 3
11855: EQUAL
11856: AND
11857: IFFALSE 11919
// begin SetResourceType ( GetBase ( b ) , mat_cans , 10000 ) ;
11859: LD_VAR 0 1
11863: PPUSH
11864: CALL_OW 274
11868: PPUSH
11869: LD_INT 1
11871: PPUSH
11872: LD_INT 10000
11874: PPUSH
11875: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 250 ) ;
11879: LD_VAR 0 1
11883: PPUSH
11884: CALL_OW 274
11888: PPUSH
11889: LD_INT 2
11891: PPUSH
11892: LD_INT 250
11894: PPUSH
11895: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_siberit , 100 ) ;
11899: LD_VAR 0 1
11903: PPUSH
11904: CALL_OW 274
11908: PPUSH
11909: LD_INT 3
11911: PPUSH
11912: LD_INT 100
11914: PPUSH
11915: CALL_OW 277
// end ; MCE_BuildingComplete ( b ) ;
11919: LD_VAR 0 1
11923: PPUSH
11924: CALL 78644 0 1
// end ;
11928: PPOPN 1
11930: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
11931: LD_VAR 0 1
11935: PPUSH
11936: LD_VAR 0 2
11940: PPUSH
11941: LD_VAR 0 3
11945: PPUSH
11946: LD_VAR 0 4
11950: PPUSH
11951: LD_VAR 0 5
11955: PPUSH
11956: CALL 76317 0 5
// end ;
11960: PPOPN 5
11962: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
11963: LD_VAR 0 1
11967: PPUSH
11968: LD_VAR 0 2
11972: PPUSH
11973: CALL 75913 0 2
// end ;
11977: PPOPN 2
11979: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
11980: LD_VAR 0 1
11984: PPUSH
11985: LD_VAR 0 2
11989: PPUSH
11990: LD_VAR 0 3
11994: PPUSH
11995: LD_VAR 0 4
11999: PPUSH
12000: CALL 75751 0 4
// end ;
12004: PPOPN 4
12006: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
12007: LD_VAR 0 1
12011: PPUSH
12012: LD_VAR 0 2
12016: PPUSH
12017: LD_VAR 0 3
12021: PPUSH
12022: CALL 75526 0 3
// end ;
12026: PPOPN 3
12028: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
12029: LD_VAR 0 1
12033: PPUSH
12034: LD_VAR 0 2
12038: PPUSH
12039: CALL 75411 0 2
// end ;
12043: PPOPN 2
12045: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
12046: LD_VAR 0 1
12050: PPUSH
12051: LD_VAR 0 2
12055: PPUSH
12056: CALL 79596 0 2
// end ;
12060: PPOPN 2
12062: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin if GetSide ( driver ) = 6 then
12063: LD_VAR 0 1
12067: PPUSH
12068: CALL_OW 255
12072: PUSH
12073: LD_INT 6
12075: EQUAL
12076: IFFALSE 12206
// begin if driver in [ Yashin , Sevi , Gaydar , Popov ] then
12078: LD_VAR 0 1
12082: PUSH
12083: LD_EXP 13
12087: PUSH
12088: LD_EXP 16
12092: PUSH
12093: LD_EXP 15
12097: PUSH
12098: LD_EXP 14
12102: PUSH
12103: EMPTY
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: IN
12109: IFFALSE 12113
// exit ;
12111: GO 12230
// if AssaultStarted then
12113: LD_EXP 8
12117: IFFALSE 12191
// case Rand ( 1 , 4 ) of 1 .. 3 :
12119: LD_INT 1
12121: PPUSH
12122: LD_INT 4
12124: PPUSH
12125: CALL_OW 12
12129: PUSH
12130: LD_INT 1
12132: DOUBLE
12133: GREATEREQUAL
12134: IFFALSE 12142
12136: LD_INT 3
12138: DOUBLE
12139: LESSEQUAL
12140: IFTRUE 12144
12142: GO 12162
12144: POP
// ComAgressiveMove ( driver , 67 , 37 ) ; 4 :
12145: LD_VAR 0 1
12149: PPUSH
12150: LD_INT 67
12152: PPUSH
12153: LD_INT 37
12155: PPUSH
12156: CALL_OW 114
12160: GO 12189
12162: LD_INT 4
12164: DOUBLE
12165: EQUAL
12166: IFTRUE 12170
12168: GO 12188
12170: POP
// ComMoveXY ( driver , 120 , 131 ) ; end else
12171: LD_VAR 0 1
12175: PPUSH
12176: LD_INT 120
12178: PPUSH
12179: LD_INT 131
12181: PPUSH
12182: CALL_OW 111
12186: GO 12189
12188: POP
12189: GO 12206
// ComMoveXY ( driver , 120 , 131 ) ;
12191: LD_VAR 0 1
12195: PPUSH
12196: LD_INT 120
12198: PPUSH
12199: LD_INT 131
12201: PPUSH
12202: CALL_OW 111
// end ; MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
12206: LD_VAR 0 1
12210: PPUSH
12211: LD_VAR 0 2
12215: PPUSH
12216: LD_VAR 0 3
12220: PPUSH
12221: LD_VAR 0 4
12225: PPUSH
12226: CALL 79812 0 4
// end ;
12230: PPOPN 4
12232: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
12233: LD_VAR 0 1
12237: PPUSH
12238: LD_VAR 0 2
12242: PPUSH
12243: CALL 75220 0 2
// end ;
12247: PPOPN 2
12249: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
12250: LD_VAR 0 1
12254: PPUSH
12255: CALL 91110 0 1
// end ; end_of_file
12259: PPOPN 1
12261: END
// every 0 0$1 trigger JMM_Arrived and RussiansDefeated do
12262: LD_EXP 6
12266: PUSH
12267: LD_EXP 44
12271: AND
12272: IFFALSE 12443
12274: GO 12276
12276: DISABLE
// begin wait ( 0 0$2 ) ;
12277: LD_INT 70
12279: PPUSH
12280: CALL_OW 67
// Say ( Brighton , DBrighton-G1 ) ;
12284: LD_EXP 9
12288: PPUSH
12289: LD_STRING DBrighton-G1
12291: PPUSH
12292: CALL_OW 88
// if Losses < 1 then
12296: LD_EXP 45
12300: PUSH
12301: LD_INT 1
12303: LESS
12304: IFFALSE 12318
// AddMedal ( Losses , 1 ) else
12306: LD_STRING Losses
12308: PPUSH
12309: LD_INT 1
12311: PPUSH
12312: CALL_OW 101
12316: GO 12351
// if Losses < 5 then
12318: LD_EXP 45
12322: PUSH
12323: LD_INT 5
12325: LESS
12326: IFFALSE 12340
// AddMedal ( Losses , 2 ) else
12328: LD_STRING Losses
12330: PPUSH
12331: LD_INT 2
12333: PPUSH
12334: CALL_OW 101
12338: GO 12351
// AddMedal ( Losses , - 1 ) ;
12340: LD_STRING Losses
12342: PPUSH
12343: LD_INT 1
12345: NEG
12346: PPUSH
12347: CALL_OW 101
// if LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
12351: LD_EXP 7
12355: PUSH
12356: LD_INT 10
12358: PPUSH
12359: LD_INT 1
12361: PPUSH
12362: CALL_OW 321
12366: PUSH
12367: LD_INT 2
12369: EQUAL
12370: AND
12371: IFFALSE 12385
// AddMedal ( Laser , 1 ) else
12373: LD_STRING Laser
12375: PPUSH
12376: LD_INT 1
12378: PPUSH
12379: CALL_OW 101
12383: GO 12432
// if not LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
12385: LD_EXP 7
12389: NOT
12390: PUSH
12391: LD_INT 10
12393: PPUSH
12394: LD_INT 1
12396: PPUSH
12397: CALL_OW 321
12401: PUSH
12402: LD_INT 2
12404: EQUAL
12405: AND
12406: IFFALSE 12421
// AddMedal ( Laser , - 1 ) else
12408: LD_STRING Laser
12410: PPUSH
12411: LD_INT 1
12413: NEG
12414: PPUSH
12415: CALL_OW 101
12419: GO 12432
// AddMedal ( Laser , - 2 ) ;
12421: LD_STRING Laser
12423: PPUSH
12424: LD_INT 2
12426: NEG
12427: PPUSH
12428: CALL_OW 101
// GiveMedals ( BaseMain ) ;
12432: LD_STRING BaseMain
12434: PPUSH
12435: CALL_OW 102
// YouWin ;
12439: CALL_OW 103
// end ; end_of_file
12443: END
// export rows ; export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
12444: LD_INT 0
12446: PPUSH
12447: PPUSH
// area = ListEnvironmentArea ( area ) ;
12448: LD_ADDR_VAR 0 2
12452: PUSH
12453: LD_VAR 0 2
12457: PPUSH
12458: CALL_OW 353
12462: ST_TO_ADDR
// if bulldozer > 0 then
12463: LD_VAR 0 1
12467: PUSH
12468: LD_INT 0
12470: GREATER
12471: IFFALSE 12582
// for i = area downto 1 do
12473: LD_ADDR_VAR 0 4
12477: PUSH
12478: DOUBLE
12479: LD_VAR 0 2
12483: INC
12484: ST_TO_ADDR
12485: LD_INT 1
12487: PUSH
12488: FOR_DOWNTO
12489: IFFALSE 12580
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
12491: LD_VAR 0 2
12495: PUSH
12496: LD_VAR 0 4
12500: ARRAY
12501: PUSH
12502: LD_INT 1
12504: ARRAY
12505: PPUSH
12506: LD_VAR 0 2
12510: PUSH
12511: LD_VAR 0 4
12515: ARRAY
12516: PUSH
12517: LD_INT 2
12519: ARRAY
12520: PPUSH
12521: CALL_OW 351
12525: IFFALSE 12578
// if not HasTask ( bulldozer ) then
12527: LD_VAR 0 1
12531: PPUSH
12532: CALL_OW 314
12536: NOT
12537: IFFALSE 12578
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
12539: LD_VAR 0 1
12543: PPUSH
12544: LD_VAR 0 2
12548: PUSH
12549: LD_VAR 0 4
12553: ARRAY
12554: PUSH
12555: LD_INT 1
12557: ARRAY
12558: PPUSH
12559: LD_VAR 0 2
12563: PUSH
12564: LD_VAR 0 4
12568: ARRAY
12569: PUSH
12570: LD_INT 2
12572: ARRAY
12573: PPUSH
12574: CALL_OW 171
12578: GO 12488
12580: POP
12581: POP
// end ;
12582: LD_VAR 0 3
12586: RET
// export function ComMeeting ( team , area ) ; var i , x , tmp , offset , sold_team , civil_team ; begin
12587: LD_INT 0
12589: PPUSH
12590: PPUSH
12591: PPUSH
12592: PPUSH
12593: PPUSH
12594: PPUSH
12595: PPUSH
// sold_team = UnitFilter ( team , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) ;
12596: LD_ADDR_VAR 0 8
12600: PUSH
12601: LD_VAR 0 1
12605: PPUSH
12606: LD_INT 22
12608: PUSH
12609: LD_INT 1
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: PUSH
12616: LD_INT 21
12618: PUSH
12619: LD_INT 1
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: PUSH
12626: LD_INT 25
12628: PUSH
12629: LD_INT 1
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: LIST
12640: PPUSH
12641: CALL_OW 72
12645: ST_TO_ADDR
// civil_team = UnitFilter ( team , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_class , class_soldier ] ] ] ) ;
12646: LD_ADDR_VAR 0 9
12650: PUSH
12651: LD_VAR 0 1
12655: PPUSH
12656: LD_INT 22
12658: PUSH
12659: LD_INT 1
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: PUSH
12666: LD_INT 21
12668: PUSH
12669: LD_INT 1
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: PUSH
12676: LD_INT 3
12678: PUSH
12679: LD_INT 25
12681: PUSH
12682: LD_INT 1
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: LIST
12697: PPUSH
12698: CALL_OW 72
12702: ST_TO_ADDR
// rows = MakeRows ( sold_team , civil_team ) ;
12703: LD_ADDR_EXP 47
12707: PUSH
12708: LD_VAR 0 8
12712: PPUSH
12713: LD_VAR 0 9
12717: PPUSH
12718: CALL 13111 0 2
12722: ST_TO_ADDR
// offset = 0 ;
12723: LD_ADDR_VAR 0 7
12727: PUSH
12728: LD_INT 0
12730: ST_TO_ADDR
// for i := 1 to sold_team do
12731: LD_ADDR_VAR 0 4
12735: PUSH
12736: DOUBLE
12737: LD_INT 1
12739: DEC
12740: ST_TO_ADDR
12741: LD_VAR 0 8
12745: PUSH
12746: FOR_TO
12747: IFFALSE 12878
// begin if IsInUnit ( sold_team [ i ] ) then
12749: LD_VAR 0 8
12753: PUSH
12754: LD_VAR 0 4
12758: ARRAY
12759: PPUSH
12760: CALL_OW 310
12764: IFFALSE 12781
// ComExitBuilding ( sold_team [ i ] ) ;
12766: LD_VAR 0 8
12770: PUSH
12771: LD_VAR 0 4
12775: ARRAY
12776: PPUSH
12777: CALL_OW 122
// AddComMoveXY ( sold_team [ i ] , rows [ 1 ] [ i + offset ] , rows [ 1 ] [ i + 1 + offset ] ) ;
12781: LD_VAR 0 8
12785: PUSH
12786: LD_VAR 0 4
12790: ARRAY
12791: PPUSH
12792: LD_EXP 47
12796: PUSH
12797: LD_INT 1
12799: ARRAY
12800: PUSH
12801: LD_VAR 0 4
12805: PUSH
12806: LD_VAR 0 7
12810: PLUS
12811: ARRAY
12812: PPUSH
12813: LD_EXP 47
12817: PUSH
12818: LD_INT 1
12820: ARRAY
12821: PUSH
12822: LD_VAR 0 4
12826: PUSH
12827: LD_INT 1
12829: PLUS
12830: PUSH
12831: LD_VAR 0 7
12835: PLUS
12836: ARRAY
12837: PPUSH
12838: CALL_OW 171
// AddComTurnUnit ( sold_team [ i ] , Brighton ) ;
12842: LD_VAR 0 8
12846: PUSH
12847: LD_VAR 0 4
12851: ARRAY
12852: PPUSH
12853: LD_EXP 9
12857: PPUSH
12858: CALL_OW 179
// offset = offset + 1 ;
12862: LD_ADDR_VAR 0 7
12866: PUSH
12867: LD_VAR 0 7
12871: PUSH
12872: LD_INT 1
12874: PLUS
12875: ST_TO_ADDR
// end ;
12876: GO 12746
12878: POP
12879: POP
// offset = 0 ;
12880: LD_ADDR_VAR 0 7
12884: PUSH
12885: LD_INT 0
12887: ST_TO_ADDR
// tmp = 1 ;
12888: LD_ADDR_VAR 0 6
12892: PUSH
12893: LD_INT 1
12895: ST_TO_ADDR
// for i := 2 to rows do
12896: LD_ADDR_VAR 0 4
12900: PUSH
12901: DOUBLE
12902: LD_INT 2
12904: DEC
12905: ST_TO_ADDR
12906: LD_EXP 47
12910: PUSH
12911: FOR_TO
12912: IFFALSE 13104
// begin for x := 1 to sold_team do
12914: LD_ADDR_VAR 0 5
12918: PUSH
12919: DOUBLE
12920: LD_INT 1
12922: DEC
12923: ST_TO_ADDR
12924: LD_VAR 0 8
12928: PUSH
12929: FOR_TO
12930: IFFALSE 13092
// begin if IsInUnit ( civil_team [ tmp ] ) then
12932: LD_VAR 0 9
12936: PUSH
12937: LD_VAR 0 6
12941: ARRAY
12942: PPUSH
12943: CALL_OW 310
12947: IFFALSE 12964
// ComExitBuilding ( civil_team [ tmp ] ) ;
12949: LD_VAR 0 9
12953: PUSH
12954: LD_VAR 0 6
12958: ARRAY
12959: PPUSH
12960: CALL_OW 122
// AddComMoveXY ( civil_team [ tmp ] , rows [ i ] [ x + offset ] , rows [ i ] [ x + 1 + offset ] ) ;
12964: LD_VAR 0 9
12968: PUSH
12969: LD_VAR 0 6
12973: ARRAY
12974: PPUSH
12975: LD_EXP 47
12979: PUSH
12980: LD_VAR 0 4
12984: ARRAY
12985: PUSH
12986: LD_VAR 0 5
12990: PUSH
12991: LD_VAR 0 7
12995: PLUS
12996: ARRAY
12997: PPUSH
12998: LD_EXP 47
13002: PUSH
13003: LD_VAR 0 4
13007: ARRAY
13008: PUSH
13009: LD_VAR 0 5
13013: PUSH
13014: LD_INT 1
13016: PLUS
13017: PUSH
13018: LD_VAR 0 7
13022: PLUS
13023: ARRAY
13024: PPUSH
13025: CALL_OW 171
// AddComTurnUnit ( civil_team [ tmp ] , Brighton ) ;
13029: LD_VAR 0 9
13033: PUSH
13034: LD_VAR 0 6
13038: ARRAY
13039: PPUSH
13040: LD_EXP 9
13044: PPUSH
13045: CALL_OW 179
// offset = offset + 1 ;
13049: LD_ADDR_VAR 0 7
13053: PUSH
13054: LD_VAR 0 7
13058: PUSH
13059: LD_INT 1
13061: PLUS
13062: ST_TO_ADDR
// if not ( tmp = civil_team ) then
13063: LD_VAR 0 6
13067: PUSH
13068: LD_VAR 0 9
13072: EQUAL
13073: NOT
13074: IFFALSE 13090
// tmp = tmp + 1 ;
13076: LD_ADDR_VAR 0 6
13080: PUSH
13081: LD_VAR 0 6
13085: PUSH
13086: LD_INT 1
13088: PLUS
13089: ST_TO_ADDR
// end ;
13090: GO 12929
13092: POP
13093: POP
// offset = 0 ;
13094: LD_ADDR_VAR 0 7
13098: PUSH
13099: LD_INT 0
13101: ST_TO_ADDR
// end ;
13102: GO 12911
13104: POP
13105: POP
// end ;
13106: LD_VAR 0 3
13110: RET
// export function MakeRows ( sold_team , civil_team ) ; var i , x , start_pos , row_size , new_row , result_rows , civil_rows , offsetX , offsetY ; begin
13111: LD_INT 0
13113: PPUSH
13114: PPUSH
13115: PPUSH
13116: PPUSH
13117: PPUSH
13118: PPUSH
13119: PPUSH
13120: PPUSH
13121: PPUSH
13122: PPUSH
// start_pos = [ 65 , 34 ] ;
13123: LD_ADDR_VAR 0 6
13127: PUSH
13128: LD_INT 65
13130: PUSH
13131: LD_INT 34
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: ST_TO_ADDR
// row_size = 0 ;
13138: LD_ADDR_VAR 0 7
13142: PUSH
13143: LD_INT 0
13145: ST_TO_ADDR
// result_rows = [ ] ;
13146: LD_ADDR_VAR 0 9
13150: PUSH
13151: EMPTY
13152: ST_TO_ADDR
// new_row = [ ] ;
13153: LD_ADDR_VAR 0 8
13157: PUSH
13158: EMPTY
13159: ST_TO_ADDR
// for i := 1 to sold_team do
13160: LD_ADDR_VAR 0 4
13164: PUSH
13165: DOUBLE
13166: LD_INT 1
13168: DEC
13169: ST_TO_ADDR
13170: LD_VAR 0 1
13174: PUSH
13175: FOR_TO
13176: IFFALSE 13230
// begin new_row = new_row ^ start_pos [ 1 ] ^ start_pos [ 2 ] + i ;
13178: LD_ADDR_VAR 0 8
13182: PUSH
13183: LD_VAR 0 8
13187: PUSH
13188: LD_VAR 0 6
13192: PUSH
13193: LD_INT 1
13195: ARRAY
13196: ADD
13197: PUSH
13198: LD_VAR 0 6
13202: PUSH
13203: LD_INT 2
13205: ARRAY
13206: PUSH
13207: LD_VAR 0 4
13211: PLUS
13212: ADD
13213: ST_TO_ADDR
// row_size = row_size + 1 ;
13214: LD_ADDR_VAR 0 7
13218: PUSH
13219: LD_VAR 0 7
13223: PUSH
13224: LD_INT 1
13226: PLUS
13227: ST_TO_ADDR
// end ;
13228: GO 13175
13230: POP
13231: POP
// result_rows = result_rows ^ [ new_row ] ;
13232: LD_ADDR_VAR 0 9
13236: PUSH
13237: LD_VAR 0 9
13241: PUSH
13242: LD_VAR 0 8
13246: PUSH
13247: EMPTY
13248: LIST
13249: ADD
13250: ST_TO_ADDR
// civil_rows = civil_team div sold_team ;
13251: LD_ADDR_VAR 0 10
13255: PUSH
13256: LD_VAR 0 2
13260: PUSH
13261: LD_VAR 0 1
13265: DIV
13266: ST_TO_ADDR
// if ( civil_rows mod sold_team > 0 ) then
13267: LD_VAR 0 10
13271: PUSH
13272: LD_VAR 0 1
13276: MOD
13277: PUSH
13278: LD_INT 0
13280: GREATER
13281: IFFALSE 13297
// civil_rows = civil_rows + 1 ;
13283: LD_ADDR_VAR 0 10
13287: PUSH
13288: LD_VAR 0 10
13292: PUSH
13293: LD_INT 1
13295: PLUS
13296: ST_TO_ADDR
// offsetX = 2 ;
13297: LD_ADDR_VAR 0 11
13301: PUSH
13302: LD_INT 2
13304: ST_TO_ADDR
// offsetY = 1 ;
13305: LD_ADDR_VAR 0 12
13309: PUSH
13310: LD_INT 1
13312: ST_TO_ADDR
// for i := 1 to civil_rows do
13313: LD_ADDR_VAR 0 4
13317: PUSH
13318: DOUBLE
13319: LD_INT 1
13321: DEC
13322: ST_TO_ADDR
13323: LD_VAR 0 10
13327: PUSH
13328: FOR_TO
13329: IFFALSE 13457
// begin new_row = [ ] ;
13331: LD_ADDR_VAR 0 8
13335: PUSH
13336: EMPTY
13337: ST_TO_ADDR
// for x := 1 to row_size do
13338: LD_ADDR_VAR 0 5
13342: PUSH
13343: DOUBLE
13344: LD_INT 1
13346: DEC
13347: ST_TO_ADDR
13348: LD_VAR 0 7
13352: PUSH
13353: FOR_TO
13354: IFFALSE 13406
// begin new_row = new_row ^ start_pos [ 1 ] + offsetX ^ start_pos [ 2 ] + offsetY + x ;
13356: LD_ADDR_VAR 0 8
13360: PUSH
13361: LD_VAR 0 8
13365: PUSH
13366: LD_VAR 0 6
13370: PUSH
13371: LD_INT 1
13373: ARRAY
13374: PUSH
13375: LD_VAR 0 11
13379: PLUS
13380: ADD
13381: PUSH
13382: LD_VAR 0 6
13386: PUSH
13387: LD_INT 2
13389: ARRAY
13390: PUSH
13391: LD_VAR 0 12
13395: PLUS
13396: PUSH
13397: LD_VAR 0 5
13401: PLUS
13402: ADD
13403: ST_TO_ADDR
// end ;
13404: GO 13353
13406: POP
13407: POP
// result_rows = result_rows ^ [ new_row ] ;
13408: LD_ADDR_VAR 0 9
13412: PUSH
13413: LD_VAR 0 9
13417: PUSH
13418: LD_VAR 0 8
13422: PUSH
13423: EMPTY
13424: LIST
13425: ADD
13426: ST_TO_ADDR
// offsetX = offsetX + 2 ;
13427: LD_ADDR_VAR 0 11
13431: PUSH
13432: LD_VAR 0 11
13436: PUSH
13437: LD_INT 2
13439: PLUS
13440: ST_TO_ADDR
// offsetY = offsetY + 1 ;
13441: LD_ADDR_VAR 0 12
13445: PUSH
13446: LD_VAR 0 12
13450: PUSH
13451: LD_INT 1
13453: PLUS
13454: ST_TO_ADDR
// end ;
13455: GO 13328
13457: POP
13458: POP
// result = result_rows ;
13459: LD_ADDR_VAR 0 3
13463: PUSH
13464: LD_VAR 0 9
13468: ST_TO_ADDR
// end ; end_of_file
13469: LD_VAR 0 3
13473: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
13474: LD_INT 0
13476: PPUSH
13477: PPUSH
// if exist_mode then
13478: LD_VAR 0 2
13482: IFFALSE 13507
// unit := CreateCharacter ( prefix & ident ) else
13484: LD_ADDR_VAR 0 5
13488: PUSH
13489: LD_VAR 0 3
13493: PUSH
13494: LD_VAR 0 1
13498: STR
13499: PPUSH
13500: CALL_OW 34
13504: ST_TO_ADDR
13505: GO 13522
// unit := NewCharacter ( ident ) ;
13507: LD_ADDR_VAR 0 5
13511: PUSH
13512: LD_VAR 0 1
13516: PPUSH
13517: CALL_OW 25
13521: ST_TO_ADDR
// result := unit ;
13522: LD_ADDR_VAR 0 4
13526: PUSH
13527: LD_VAR 0 5
13531: ST_TO_ADDR
// end ;
13532: LD_VAR 0 4
13536: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
13537: LD_INT 0
13539: PPUSH
13540: PPUSH
// if not side or not nation then
13541: LD_VAR 0 1
13545: NOT
13546: PUSH
13547: LD_VAR 0 2
13551: NOT
13552: OR
13553: IFFALSE 13557
// exit ;
13555: GO 14321
// case nation of nation_american :
13557: LD_VAR 0 2
13561: PUSH
13562: LD_INT 1
13564: DOUBLE
13565: EQUAL
13566: IFTRUE 13570
13568: GO 13784
13570: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
13571: LD_ADDR_VAR 0 4
13575: PUSH
13576: LD_INT 35
13578: PUSH
13579: LD_INT 45
13581: PUSH
13582: LD_INT 46
13584: PUSH
13585: LD_INT 47
13587: PUSH
13588: LD_INT 82
13590: PUSH
13591: LD_INT 83
13593: PUSH
13594: LD_INT 84
13596: PUSH
13597: LD_INT 85
13599: PUSH
13600: LD_INT 86
13602: PUSH
13603: LD_INT 1
13605: PUSH
13606: LD_INT 2
13608: PUSH
13609: LD_INT 6
13611: PUSH
13612: LD_INT 15
13614: PUSH
13615: LD_INT 16
13617: PUSH
13618: LD_INT 7
13620: PUSH
13621: LD_INT 12
13623: PUSH
13624: LD_INT 13
13626: PUSH
13627: LD_INT 10
13629: PUSH
13630: LD_INT 14
13632: PUSH
13633: LD_INT 20
13635: PUSH
13636: LD_INT 21
13638: PUSH
13639: LD_INT 22
13641: PUSH
13642: LD_INT 25
13644: PUSH
13645: LD_INT 32
13647: PUSH
13648: LD_INT 27
13650: PUSH
13651: LD_INT 36
13653: PUSH
13654: LD_INT 69
13656: PUSH
13657: LD_INT 39
13659: PUSH
13660: LD_INT 34
13662: PUSH
13663: LD_INT 40
13665: PUSH
13666: LD_INT 48
13668: PUSH
13669: LD_INT 49
13671: PUSH
13672: LD_INT 50
13674: PUSH
13675: LD_INT 51
13677: PUSH
13678: LD_INT 52
13680: PUSH
13681: LD_INT 53
13683: PUSH
13684: LD_INT 54
13686: PUSH
13687: LD_INT 55
13689: PUSH
13690: LD_INT 56
13692: PUSH
13693: LD_INT 57
13695: PUSH
13696: LD_INT 58
13698: PUSH
13699: LD_INT 59
13701: PUSH
13702: LD_INT 60
13704: PUSH
13705: LD_INT 61
13707: PUSH
13708: LD_INT 62
13710: PUSH
13711: LD_INT 80
13713: PUSH
13714: LD_INT 82
13716: PUSH
13717: LD_INT 83
13719: PUSH
13720: LD_INT 84
13722: PUSH
13723: LD_INT 85
13725: PUSH
13726: LD_INT 86
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: ST_TO_ADDR
13782: GO 14245
13784: LD_INT 2
13786: DOUBLE
13787: EQUAL
13788: IFTRUE 13792
13790: GO 14014
13792: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
13793: LD_ADDR_VAR 0 4
13797: PUSH
13798: LD_INT 35
13800: PUSH
13801: LD_INT 45
13803: PUSH
13804: LD_INT 46
13806: PUSH
13807: LD_INT 47
13809: PUSH
13810: LD_INT 82
13812: PUSH
13813: LD_INT 83
13815: PUSH
13816: LD_INT 84
13818: PUSH
13819: LD_INT 85
13821: PUSH
13822: LD_INT 87
13824: PUSH
13825: LD_INT 70
13827: PUSH
13828: LD_INT 1
13830: PUSH
13831: LD_INT 11
13833: PUSH
13834: LD_INT 3
13836: PUSH
13837: LD_INT 4
13839: PUSH
13840: LD_INT 5
13842: PUSH
13843: LD_INT 6
13845: PUSH
13846: LD_INT 15
13848: PUSH
13849: LD_INT 18
13851: PUSH
13852: LD_INT 7
13854: PUSH
13855: LD_INT 17
13857: PUSH
13858: LD_INT 8
13860: PUSH
13861: LD_INT 20
13863: PUSH
13864: LD_INT 21
13866: PUSH
13867: LD_INT 22
13869: PUSH
13870: LD_INT 72
13872: PUSH
13873: LD_INT 26
13875: PUSH
13876: LD_INT 69
13878: PUSH
13879: LD_INT 39
13881: PUSH
13882: LD_INT 40
13884: PUSH
13885: LD_INT 41
13887: PUSH
13888: LD_INT 42
13890: PUSH
13891: LD_INT 43
13893: PUSH
13894: LD_INT 48
13896: PUSH
13897: LD_INT 49
13899: PUSH
13900: LD_INT 50
13902: PUSH
13903: LD_INT 51
13905: PUSH
13906: LD_INT 52
13908: PUSH
13909: LD_INT 53
13911: PUSH
13912: LD_INT 54
13914: PUSH
13915: LD_INT 55
13917: PUSH
13918: LD_INT 56
13920: PUSH
13921: LD_INT 60
13923: PUSH
13924: LD_INT 61
13926: PUSH
13927: LD_INT 62
13929: PUSH
13930: LD_INT 66
13932: PUSH
13933: LD_INT 67
13935: PUSH
13936: LD_INT 68
13938: PUSH
13939: LD_INT 81
13941: PUSH
13942: LD_INT 82
13944: PUSH
13945: LD_INT 83
13947: PUSH
13948: LD_INT 84
13950: PUSH
13951: LD_INT 85
13953: PUSH
13954: LD_INT 87
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: ST_TO_ADDR
14012: GO 14245
14014: LD_INT 3
14016: DOUBLE
14017: EQUAL
14018: IFTRUE 14022
14020: GO 14244
14022: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
14023: LD_ADDR_VAR 0 4
14027: PUSH
14028: LD_INT 46
14030: PUSH
14031: LD_INT 47
14033: PUSH
14034: LD_INT 1
14036: PUSH
14037: LD_INT 2
14039: PUSH
14040: LD_INT 82
14042: PUSH
14043: LD_INT 83
14045: PUSH
14046: LD_INT 84
14048: PUSH
14049: LD_INT 85
14051: PUSH
14052: LD_INT 86
14054: PUSH
14055: LD_INT 11
14057: PUSH
14058: LD_INT 9
14060: PUSH
14061: LD_INT 20
14063: PUSH
14064: LD_INT 19
14066: PUSH
14067: LD_INT 21
14069: PUSH
14070: LD_INT 24
14072: PUSH
14073: LD_INT 22
14075: PUSH
14076: LD_INT 25
14078: PUSH
14079: LD_INT 28
14081: PUSH
14082: LD_INT 29
14084: PUSH
14085: LD_INT 30
14087: PUSH
14088: LD_INT 31
14090: PUSH
14091: LD_INT 37
14093: PUSH
14094: LD_INT 38
14096: PUSH
14097: LD_INT 32
14099: PUSH
14100: LD_INT 27
14102: PUSH
14103: LD_INT 33
14105: PUSH
14106: LD_INT 69
14108: PUSH
14109: LD_INT 39
14111: PUSH
14112: LD_INT 34
14114: PUSH
14115: LD_INT 40
14117: PUSH
14118: LD_INT 71
14120: PUSH
14121: LD_INT 23
14123: PUSH
14124: LD_INT 44
14126: PUSH
14127: LD_INT 48
14129: PUSH
14130: LD_INT 49
14132: PUSH
14133: LD_INT 50
14135: PUSH
14136: LD_INT 51
14138: PUSH
14139: LD_INT 52
14141: PUSH
14142: LD_INT 53
14144: PUSH
14145: LD_INT 54
14147: PUSH
14148: LD_INT 55
14150: PUSH
14151: LD_INT 56
14153: PUSH
14154: LD_INT 57
14156: PUSH
14157: LD_INT 58
14159: PUSH
14160: LD_INT 59
14162: PUSH
14163: LD_INT 63
14165: PUSH
14166: LD_INT 64
14168: PUSH
14169: LD_INT 65
14171: PUSH
14172: LD_INT 82
14174: PUSH
14175: LD_INT 83
14177: PUSH
14178: LD_INT 84
14180: PUSH
14181: LD_INT 85
14183: PUSH
14184: LD_INT 86
14186: PUSH
14187: EMPTY
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: ST_TO_ADDR
14242: GO 14245
14244: POP
// if state > - 1 and state < 3 then
14245: LD_VAR 0 3
14249: PUSH
14250: LD_INT 1
14252: NEG
14253: GREATER
14254: PUSH
14255: LD_VAR 0 3
14259: PUSH
14260: LD_INT 3
14262: LESS
14263: AND
14264: IFFALSE 14321
// for i in result do
14266: LD_ADDR_VAR 0 5
14270: PUSH
14271: LD_VAR 0 4
14275: PUSH
14276: FOR_IN
14277: IFFALSE 14319
// if GetTech ( i , side ) <> state then
14279: LD_VAR 0 5
14283: PPUSH
14284: LD_VAR 0 1
14288: PPUSH
14289: CALL_OW 321
14293: PUSH
14294: LD_VAR 0 3
14298: NONEQUAL
14299: IFFALSE 14317
// result := result diff i ;
14301: LD_ADDR_VAR 0 4
14305: PUSH
14306: LD_VAR 0 4
14310: PUSH
14311: LD_VAR 0 5
14315: DIFF
14316: ST_TO_ADDR
14317: GO 14276
14319: POP
14320: POP
// end ;
14321: LD_VAR 0 4
14325: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
14326: LD_INT 0
14328: PPUSH
14329: PPUSH
14330: PPUSH
// result := true ;
14331: LD_ADDR_VAR 0 3
14335: PUSH
14336: LD_INT 1
14338: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
14339: LD_ADDR_VAR 0 5
14343: PUSH
14344: LD_VAR 0 2
14348: PPUSH
14349: CALL_OW 480
14353: ST_TO_ADDR
// if not tmp then
14354: LD_VAR 0 5
14358: NOT
14359: IFFALSE 14363
// exit ;
14361: GO 14412
// for i in tmp do
14363: LD_ADDR_VAR 0 4
14367: PUSH
14368: LD_VAR 0 5
14372: PUSH
14373: FOR_IN
14374: IFFALSE 14410
// if GetTech ( i , side ) <> state_researched then
14376: LD_VAR 0 4
14380: PPUSH
14381: LD_VAR 0 1
14385: PPUSH
14386: CALL_OW 321
14390: PUSH
14391: LD_INT 2
14393: NONEQUAL
14394: IFFALSE 14408
// begin result := false ;
14396: LD_ADDR_VAR 0 3
14400: PUSH
14401: LD_INT 0
14403: ST_TO_ADDR
// exit ;
14404: POP
14405: POP
14406: GO 14412
// end ;
14408: GO 14373
14410: POP
14411: POP
// end ;
14412: LD_VAR 0 3
14416: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
14417: LD_INT 0
14419: PPUSH
14420: PPUSH
14421: PPUSH
14422: PPUSH
14423: PPUSH
14424: PPUSH
14425: PPUSH
14426: PPUSH
14427: PPUSH
14428: PPUSH
14429: PPUSH
14430: PPUSH
14431: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
14432: LD_VAR 0 1
14436: NOT
14437: PUSH
14438: LD_VAR 0 1
14442: PPUSH
14443: CALL_OW 257
14447: PUSH
14448: LD_INT 9
14450: NONEQUAL
14451: OR
14452: IFFALSE 14456
// exit ;
14454: GO 15029
// side := GetSide ( unit ) ;
14456: LD_ADDR_VAR 0 9
14460: PUSH
14461: LD_VAR 0 1
14465: PPUSH
14466: CALL_OW 255
14470: ST_TO_ADDR
// tech_space := tech_spacanom ;
14471: LD_ADDR_VAR 0 12
14475: PUSH
14476: LD_INT 29
14478: ST_TO_ADDR
// tech_time := tech_taurad ;
14479: LD_ADDR_VAR 0 13
14483: PUSH
14484: LD_INT 28
14486: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
14487: LD_ADDR_VAR 0 11
14491: PUSH
14492: LD_VAR 0 1
14496: PPUSH
14497: CALL_OW 310
14501: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
14502: LD_VAR 0 11
14506: PPUSH
14507: CALL_OW 247
14511: PUSH
14512: LD_INT 2
14514: EQUAL
14515: IFFALSE 14519
// exit ;
14517: GO 15029
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14519: LD_ADDR_VAR 0 8
14523: PUSH
14524: LD_INT 81
14526: PUSH
14527: LD_VAR 0 9
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: PUSH
14536: LD_INT 3
14538: PUSH
14539: LD_INT 21
14541: PUSH
14542: LD_INT 3
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: PUSH
14549: EMPTY
14550: LIST
14551: LIST
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: PPUSH
14557: CALL_OW 69
14561: ST_TO_ADDR
// if not tmp then
14562: LD_VAR 0 8
14566: NOT
14567: IFFALSE 14571
// exit ;
14569: GO 15029
// if in_unit then
14571: LD_VAR 0 11
14575: IFFALSE 14599
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
14577: LD_ADDR_VAR 0 10
14581: PUSH
14582: LD_VAR 0 8
14586: PPUSH
14587: LD_VAR 0 11
14591: PPUSH
14592: CALL_OW 74
14596: ST_TO_ADDR
14597: GO 14619
// enemy := NearestUnitToUnit ( tmp , unit ) ;
14599: LD_ADDR_VAR 0 10
14603: PUSH
14604: LD_VAR 0 8
14608: PPUSH
14609: LD_VAR 0 1
14613: PPUSH
14614: CALL_OW 74
14618: ST_TO_ADDR
// if not enemy then
14619: LD_VAR 0 10
14623: NOT
14624: IFFALSE 14628
// exit ;
14626: GO 15029
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
14628: LD_VAR 0 11
14632: PUSH
14633: LD_VAR 0 11
14637: PPUSH
14638: LD_VAR 0 10
14642: PPUSH
14643: CALL_OW 296
14647: PUSH
14648: LD_INT 13
14650: GREATER
14651: AND
14652: PUSH
14653: LD_VAR 0 1
14657: PPUSH
14658: LD_VAR 0 10
14662: PPUSH
14663: CALL_OW 296
14667: PUSH
14668: LD_INT 12
14670: GREATER
14671: OR
14672: IFFALSE 14676
// exit ;
14674: GO 15029
// missile := [ 1 ] ;
14676: LD_ADDR_VAR 0 14
14680: PUSH
14681: LD_INT 1
14683: PUSH
14684: EMPTY
14685: LIST
14686: ST_TO_ADDR
// if Researched ( side , tech_space ) then
14687: LD_VAR 0 9
14691: PPUSH
14692: LD_VAR 0 12
14696: PPUSH
14697: CALL_OW 325
14701: IFFALSE 14730
// missile := Insert ( missile , missile + 1 , 2 ) ;
14703: LD_ADDR_VAR 0 14
14707: PUSH
14708: LD_VAR 0 14
14712: PPUSH
14713: LD_VAR 0 14
14717: PUSH
14718: LD_INT 1
14720: PLUS
14721: PPUSH
14722: LD_INT 2
14724: PPUSH
14725: CALL_OW 2
14729: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
14730: LD_VAR 0 9
14734: PPUSH
14735: LD_VAR 0 13
14739: PPUSH
14740: CALL_OW 325
14744: PUSH
14745: LD_VAR 0 10
14749: PPUSH
14750: CALL_OW 255
14754: PPUSH
14755: LD_VAR 0 13
14759: PPUSH
14760: CALL_OW 325
14764: NOT
14765: AND
14766: IFFALSE 14795
// missile := Insert ( missile , missile + 1 , 3 ) ;
14768: LD_ADDR_VAR 0 14
14772: PUSH
14773: LD_VAR 0 14
14777: PPUSH
14778: LD_VAR 0 14
14782: PUSH
14783: LD_INT 1
14785: PLUS
14786: PPUSH
14787: LD_INT 3
14789: PPUSH
14790: CALL_OW 2
14794: ST_TO_ADDR
// if missile < 2 then
14795: LD_VAR 0 14
14799: PUSH
14800: LD_INT 2
14802: LESS
14803: IFFALSE 14807
// exit ;
14805: GO 15029
// x := GetX ( enemy ) ;
14807: LD_ADDR_VAR 0 4
14811: PUSH
14812: LD_VAR 0 10
14816: PPUSH
14817: CALL_OW 250
14821: ST_TO_ADDR
// y := GetY ( enemy ) ;
14822: LD_ADDR_VAR 0 5
14826: PUSH
14827: LD_VAR 0 10
14831: PPUSH
14832: CALL_OW 251
14836: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
14837: LD_ADDR_VAR 0 6
14841: PUSH
14842: LD_VAR 0 4
14846: PUSH
14847: LD_INT 1
14849: NEG
14850: PPUSH
14851: LD_INT 1
14853: PPUSH
14854: CALL_OW 12
14858: PLUS
14859: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
14860: LD_ADDR_VAR 0 7
14864: PUSH
14865: LD_VAR 0 5
14869: PUSH
14870: LD_INT 1
14872: NEG
14873: PPUSH
14874: LD_INT 1
14876: PPUSH
14877: CALL_OW 12
14881: PLUS
14882: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14883: LD_VAR 0 6
14887: PPUSH
14888: LD_VAR 0 7
14892: PPUSH
14893: CALL_OW 488
14897: NOT
14898: IFFALSE 14920
// begin _x := x ;
14900: LD_ADDR_VAR 0 6
14904: PUSH
14905: LD_VAR 0 4
14909: ST_TO_ADDR
// _y := y ;
14910: LD_ADDR_VAR 0 7
14914: PUSH
14915: LD_VAR 0 5
14919: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
14920: LD_ADDR_VAR 0 3
14924: PUSH
14925: LD_INT 1
14927: PPUSH
14928: LD_VAR 0 14
14932: PPUSH
14933: CALL_OW 12
14937: ST_TO_ADDR
// case i of 1 :
14938: LD_VAR 0 3
14942: PUSH
14943: LD_INT 1
14945: DOUBLE
14946: EQUAL
14947: IFTRUE 14951
14949: GO 14968
14951: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
14952: LD_VAR 0 1
14956: PPUSH
14957: LD_VAR 0 10
14961: PPUSH
14962: CALL_OW 115
14966: GO 15029
14968: LD_INT 2
14970: DOUBLE
14971: EQUAL
14972: IFTRUE 14976
14974: GO 14998
14976: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
14977: LD_VAR 0 1
14981: PPUSH
14982: LD_VAR 0 6
14986: PPUSH
14987: LD_VAR 0 7
14991: PPUSH
14992: CALL_OW 153
14996: GO 15029
14998: LD_INT 3
15000: DOUBLE
15001: EQUAL
15002: IFTRUE 15006
15004: GO 15028
15006: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
15007: LD_VAR 0 1
15011: PPUSH
15012: LD_VAR 0 6
15016: PPUSH
15017: LD_VAR 0 7
15021: PPUSH
15022: CALL_OW 154
15026: GO 15029
15028: POP
// end ;
15029: LD_VAR 0 2
15033: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
15034: LD_INT 0
15036: PPUSH
15037: PPUSH
15038: PPUSH
15039: PPUSH
15040: PPUSH
15041: PPUSH
// if not unit or not building then
15042: LD_VAR 0 1
15046: NOT
15047: PUSH
15048: LD_VAR 0 2
15052: NOT
15053: OR
15054: IFFALSE 15058
// exit ;
15056: GO 15216
// x := GetX ( building ) ;
15058: LD_ADDR_VAR 0 5
15062: PUSH
15063: LD_VAR 0 2
15067: PPUSH
15068: CALL_OW 250
15072: ST_TO_ADDR
// y := GetY ( building ) ;
15073: LD_ADDR_VAR 0 6
15077: PUSH
15078: LD_VAR 0 2
15082: PPUSH
15083: CALL_OW 251
15087: ST_TO_ADDR
// for i = 0 to 5 do
15088: LD_ADDR_VAR 0 4
15092: PUSH
15093: DOUBLE
15094: LD_INT 0
15096: DEC
15097: ST_TO_ADDR
15098: LD_INT 5
15100: PUSH
15101: FOR_TO
15102: IFFALSE 15214
// begin _x := ShiftX ( x , i , 3 ) ;
15104: LD_ADDR_VAR 0 7
15108: PUSH
15109: LD_VAR 0 5
15113: PPUSH
15114: LD_VAR 0 4
15118: PPUSH
15119: LD_INT 3
15121: PPUSH
15122: CALL_OW 272
15126: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
15127: LD_ADDR_VAR 0 8
15131: PUSH
15132: LD_VAR 0 6
15136: PPUSH
15137: LD_VAR 0 4
15141: PPUSH
15142: LD_INT 3
15144: PPUSH
15145: CALL_OW 273
15149: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
15150: LD_VAR 0 7
15154: PPUSH
15155: LD_VAR 0 8
15159: PPUSH
15160: CALL_OW 488
15164: NOT
15165: IFFALSE 15169
// continue ;
15167: GO 15101
// if HexInfo ( _x , _y ) = 0 then
15169: LD_VAR 0 7
15173: PPUSH
15174: LD_VAR 0 8
15178: PPUSH
15179: CALL_OW 428
15183: PUSH
15184: LD_INT 0
15186: EQUAL
15187: IFFALSE 15212
// begin ComMoveXY ( unit , _x , _y ) ;
15189: LD_VAR 0 1
15193: PPUSH
15194: LD_VAR 0 7
15198: PPUSH
15199: LD_VAR 0 8
15203: PPUSH
15204: CALL_OW 111
// exit ;
15208: POP
15209: POP
15210: GO 15216
// end ; end ;
15212: GO 15101
15214: POP
15215: POP
// end ;
15216: LD_VAR 0 3
15220: RET
// export function ScanBase ( side , base_area ) ; begin
15221: LD_INT 0
15223: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
15224: LD_ADDR_VAR 0 3
15228: PUSH
15229: LD_VAR 0 2
15233: PPUSH
15234: LD_INT 81
15236: PUSH
15237: LD_VAR 0 1
15241: PUSH
15242: EMPTY
15243: LIST
15244: LIST
15245: PPUSH
15246: CALL_OW 70
15250: ST_TO_ADDR
// end ;
15251: LD_VAR 0 3
15255: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
15256: LD_INT 0
15258: PPUSH
15259: PPUSH
15260: PPUSH
15261: PPUSH
// result := false ;
15262: LD_ADDR_VAR 0 2
15266: PUSH
15267: LD_INT 0
15269: ST_TO_ADDR
// side := GetSide ( unit ) ;
15270: LD_ADDR_VAR 0 3
15274: PUSH
15275: LD_VAR 0 1
15279: PPUSH
15280: CALL_OW 255
15284: ST_TO_ADDR
// nat := GetNation ( unit ) ;
15285: LD_ADDR_VAR 0 4
15289: PUSH
15290: LD_VAR 0 1
15294: PPUSH
15295: CALL_OW 248
15299: ST_TO_ADDR
// case nat of 1 :
15300: LD_VAR 0 4
15304: PUSH
15305: LD_INT 1
15307: DOUBLE
15308: EQUAL
15309: IFTRUE 15313
15311: GO 15324
15313: POP
// tech := tech_lassight ; 2 :
15314: LD_ADDR_VAR 0 5
15318: PUSH
15319: LD_INT 12
15321: ST_TO_ADDR
15322: GO 15363
15324: LD_INT 2
15326: DOUBLE
15327: EQUAL
15328: IFTRUE 15332
15330: GO 15343
15332: POP
// tech := tech_mortar ; 3 :
15333: LD_ADDR_VAR 0 5
15337: PUSH
15338: LD_INT 41
15340: ST_TO_ADDR
15341: GO 15363
15343: LD_INT 3
15345: DOUBLE
15346: EQUAL
15347: IFTRUE 15351
15349: GO 15362
15351: POP
// tech := tech_bazooka ; end ;
15352: LD_ADDR_VAR 0 5
15356: PUSH
15357: LD_INT 44
15359: ST_TO_ADDR
15360: GO 15363
15362: POP
// if Researched ( side , tech ) then
15363: LD_VAR 0 3
15367: PPUSH
15368: LD_VAR 0 5
15372: PPUSH
15373: CALL_OW 325
15377: IFFALSE 15404
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
15379: LD_ADDR_VAR 0 2
15383: PUSH
15384: LD_INT 5
15386: PUSH
15387: LD_INT 8
15389: PUSH
15390: LD_INT 9
15392: PUSH
15393: EMPTY
15394: LIST
15395: LIST
15396: LIST
15397: PUSH
15398: LD_VAR 0 4
15402: ARRAY
15403: ST_TO_ADDR
// end ;
15404: LD_VAR 0 2
15408: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
15409: LD_INT 0
15411: PPUSH
15412: PPUSH
15413: PPUSH
// if not mines then
15414: LD_VAR 0 2
15418: NOT
15419: IFFALSE 15423
// exit ;
15421: GO 15567
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15423: LD_ADDR_VAR 0 5
15427: PUSH
15428: LD_INT 81
15430: PUSH
15431: LD_VAR 0 1
15435: PUSH
15436: EMPTY
15437: LIST
15438: LIST
15439: PUSH
15440: LD_INT 3
15442: PUSH
15443: LD_INT 21
15445: PUSH
15446: LD_INT 3
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: PUSH
15457: EMPTY
15458: LIST
15459: LIST
15460: PPUSH
15461: CALL_OW 69
15465: ST_TO_ADDR
// for i in mines do
15466: LD_ADDR_VAR 0 4
15470: PUSH
15471: LD_VAR 0 2
15475: PUSH
15476: FOR_IN
15477: IFFALSE 15565
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
15479: LD_VAR 0 4
15483: PUSH
15484: LD_INT 1
15486: ARRAY
15487: PPUSH
15488: LD_VAR 0 4
15492: PUSH
15493: LD_INT 2
15495: ARRAY
15496: PPUSH
15497: CALL_OW 458
15501: NOT
15502: IFFALSE 15506
// continue ;
15504: GO 15476
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
15506: LD_VAR 0 4
15510: PUSH
15511: LD_INT 1
15513: ARRAY
15514: PPUSH
15515: LD_VAR 0 4
15519: PUSH
15520: LD_INT 2
15522: ARRAY
15523: PPUSH
15524: CALL_OW 428
15528: PUSH
15529: LD_VAR 0 5
15533: IN
15534: IFFALSE 15563
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
15536: LD_VAR 0 4
15540: PUSH
15541: LD_INT 1
15543: ARRAY
15544: PPUSH
15545: LD_VAR 0 4
15549: PUSH
15550: LD_INT 2
15552: ARRAY
15553: PPUSH
15554: LD_VAR 0 1
15558: PPUSH
15559: CALL_OW 456
// end ;
15563: GO 15476
15565: POP
15566: POP
// end ;
15567: LD_VAR 0 3
15571: RET
// export function Count ( array ) ; var i ; begin
15572: LD_INT 0
15574: PPUSH
15575: PPUSH
// result := 0 ;
15576: LD_ADDR_VAR 0 2
15580: PUSH
15581: LD_INT 0
15583: ST_TO_ADDR
// for i in array do
15584: LD_ADDR_VAR 0 3
15588: PUSH
15589: LD_VAR 0 1
15593: PUSH
15594: FOR_IN
15595: IFFALSE 15619
// if i then
15597: LD_VAR 0 3
15601: IFFALSE 15617
// result := result + 1 ;
15603: LD_ADDR_VAR 0 2
15607: PUSH
15608: LD_VAR 0 2
15612: PUSH
15613: LD_INT 1
15615: PLUS
15616: ST_TO_ADDR
15617: GO 15594
15619: POP
15620: POP
// end ;
15621: LD_VAR 0 2
15625: RET
// export function IsEmpty ( building ) ; begin
15626: LD_INT 0
15628: PPUSH
// if not building then
15629: LD_VAR 0 1
15633: NOT
15634: IFFALSE 15638
// exit ;
15636: GO 15681
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
15638: LD_ADDR_VAR 0 2
15642: PUSH
15643: LD_VAR 0 1
15647: PUSH
15648: LD_INT 22
15650: PUSH
15651: LD_VAR 0 1
15655: PPUSH
15656: CALL_OW 255
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: PUSH
15665: LD_INT 58
15667: PUSH
15668: EMPTY
15669: LIST
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: PPUSH
15675: CALL_OW 69
15679: IN
15680: ST_TO_ADDR
// end ;
15681: LD_VAR 0 2
15685: RET
// export function IsNotFull ( building ) ; begin
15686: LD_INT 0
15688: PPUSH
// if not building then
15689: LD_VAR 0 1
15693: NOT
15694: IFFALSE 15698
// exit ;
15696: GO 15717
// result := UnitsInside ( building ) < 6 ;
15698: LD_ADDR_VAR 0 2
15702: PUSH
15703: LD_VAR 0 1
15707: PPUSH
15708: CALL_OW 313
15712: PUSH
15713: LD_INT 6
15715: LESS
15716: ST_TO_ADDR
// end ;
15717: LD_VAR 0 2
15721: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
15722: LD_INT 0
15724: PPUSH
15725: PPUSH
15726: PPUSH
15727: PPUSH
// tmp := [ ] ;
15728: LD_ADDR_VAR 0 3
15732: PUSH
15733: EMPTY
15734: ST_TO_ADDR
// list := [ ] ;
15735: LD_ADDR_VAR 0 5
15739: PUSH
15740: EMPTY
15741: ST_TO_ADDR
// for i = 16 to 25 do
15742: LD_ADDR_VAR 0 4
15746: PUSH
15747: DOUBLE
15748: LD_INT 16
15750: DEC
15751: ST_TO_ADDR
15752: LD_INT 25
15754: PUSH
15755: FOR_TO
15756: IFFALSE 15829
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
15758: LD_ADDR_VAR 0 3
15762: PUSH
15763: LD_VAR 0 3
15767: PUSH
15768: LD_INT 22
15770: PUSH
15771: LD_VAR 0 1
15775: PPUSH
15776: CALL_OW 255
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: PUSH
15785: LD_INT 91
15787: PUSH
15788: LD_VAR 0 1
15792: PUSH
15793: LD_INT 6
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: LIST
15800: PUSH
15801: LD_INT 30
15803: PUSH
15804: LD_VAR 0 4
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: LIST
15817: PUSH
15818: EMPTY
15819: LIST
15820: PPUSH
15821: CALL_OW 69
15825: ADD
15826: ST_TO_ADDR
15827: GO 15755
15829: POP
15830: POP
// for i = 1 to tmp do
15831: LD_ADDR_VAR 0 4
15835: PUSH
15836: DOUBLE
15837: LD_INT 1
15839: DEC
15840: ST_TO_ADDR
15841: LD_VAR 0 3
15845: PUSH
15846: FOR_TO
15847: IFFALSE 15935
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
15849: LD_ADDR_VAR 0 5
15853: PUSH
15854: LD_VAR 0 5
15858: PUSH
15859: LD_VAR 0 3
15863: PUSH
15864: LD_VAR 0 4
15868: ARRAY
15869: PPUSH
15870: CALL_OW 266
15874: PUSH
15875: LD_VAR 0 3
15879: PUSH
15880: LD_VAR 0 4
15884: ARRAY
15885: PPUSH
15886: CALL_OW 250
15890: PUSH
15891: LD_VAR 0 3
15895: PUSH
15896: LD_VAR 0 4
15900: ARRAY
15901: PPUSH
15902: CALL_OW 251
15906: PUSH
15907: LD_VAR 0 3
15911: PUSH
15912: LD_VAR 0 4
15916: ARRAY
15917: PPUSH
15918: CALL_OW 254
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: PUSH
15929: EMPTY
15930: LIST
15931: ADD
15932: ST_TO_ADDR
15933: GO 15846
15935: POP
15936: POP
// result := list ;
15937: LD_ADDR_VAR 0 2
15941: PUSH
15942: LD_VAR 0 5
15946: ST_TO_ADDR
// end ;
15947: LD_VAR 0 2
15951: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
15952: LD_INT 0
15954: PPUSH
15955: PPUSH
15956: PPUSH
15957: PPUSH
15958: PPUSH
15959: PPUSH
15960: PPUSH
// if not factory then
15961: LD_VAR 0 1
15965: NOT
15966: IFFALSE 15970
// exit ;
15968: GO 16563
// if control = control_apeman then
15970: LD_VAR 0 4
15974: PUSH
15975: LD_INT 5
15977: EQUAL
15978: IFFALSE 16087
// begin tmp := UnitsInside ( factory ) ;
15980: LD_ADDR_VAR 0 8
15984: PUSH
15985: LD_VAR 0 1
15989: PPUSH
15990: CALL_OW 313
15994: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
15995: LD_VAR 0 8
15999: PPUSH
16000: LD_INT 25
16002: PUSH
16003: LD_INT 12
16005: PUSH
16006: EMPTY
16007: LIST
16008: LIST
16009: PPUSH
16010: CALL_OW 72
16014: NOT
16015: IFFALSE 16025
// control := control_manual ;
16017: LD_ADDR_VAR 0 4
16021: PUSH
16022: LD_INT 1
16024: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
16025: LD_ADDR_VAR 0 8
16029: PUSH
16030: LD_VAR 0 1
16034: PPUSH
16035: CALL 15722 0 1
16039: ST_TO_ADDR
// if tmp then
16040: LD_VAR 0 8
16044: IFFALSE 16087
// begin for i in tmp do
16046: LD_ADDR_VAR 0 7
16050: PUSH
16051: LD_VAR 0 8
16055: PUSH
16056: FOR_IN
16057: IFFALSE 16085
// if i [ 1 ] = b_ext_radio then
16059: LD_VAR 0 7
16063: PUSH
16064: LD_INT 1
16066: ARRAY
16067: PUSH
16068: LD_INT 22
16070: EQUAL
16071: IFFALSE 16083
// begin control := control_remote ;
16073: LD_ADDR_VAR 0 4
16077: PUSH
16078: LD_INT 2
16080: ST_TO_ADDR
// break ;
16081: GO 16085
// end ;
16083: GO 16056
16085: POP
16086: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16087: LD_VAR 0 1
16091: PPUSH
16092: LD_VAR 0 2
16096: PPUSH
16097: LD_VAR 0 3
16101: PPUSH
16102: LD_VAR 0 4
16106: PPUSH
16107: LD_VAR 0 5
16111: PPUSH
16112: CALL_OW 448
16116: IFFALSE 16151
// begin result := [ chassis , engine , control , weapon ] ;
16118: LD_ADDR_VAR 0 6
16122: PUSH
16123: LD_VAR 0 2
16127: PUSH
16128: LD_VAR 0 3
16132: PUSH
16133: LD_VAR 0 4
16137: PUSH
16138: LD_VAR 0 5
16142: PUSH
16143: EMPTY
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: ST_TO_ADDR
// exit ;
16149: GO 16563
// end ; _chassis := AvailableChassisList ( factory ) ;
16151: LD_ADDR_VAR 0 9
16155: PUSH
16156: LD_VAR 0 1
16160: PPUSH
16161: CALL_OW 475
16165: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
16166: LD_ADDR_VAR 0 11
16170: PUSH
16171: LD_VAR 0 1
16175: PPUSH
16176: CALL_OW 476
16180: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
16181: LD_ADDR_VAR 0 12
16185: PUSH
16186: LD_VAR 0 1
16190: PPUSH
16191: CALL_OW 477
16195: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
16196: LD_ADDR_VAR 0 10
16200: PUSH
16201: LD_VAR 0 1
16205: PPUSH
16206: CALL_OW 478
16210: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
16211: LD_VAR 0 9
16215: NOT
16216: PUSH
16217: LD_VAR 0 11
16221: NOT
16222: OR
16223: PUSH
16224: LD_VAR 0 12
16228: NOT
16229: OR
16230: PUSH
16231: LD_VAR 0 10
16235: NOT
16236: OR
16237: IFFALSE 16272
// begin result := [ chassis , engine , control , weapon ] ;
16239: LD_ADDR_VAR 0 6
16243: PUSH
16244: LD_VAR 0 2
16248: PUSH
16249: LD_VAR 0 3
16253: PUSH
16254: LD_VAR 0 4
16258: PUSH
16259: LD_VAR 0 5
16263: PUSH
16264: EMPTY
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: ST_TO_ADDR
// exit ;
16270: GO 16563
// end ; if not chassis in _chassis then
16272: LD_VAR 0 2
16276: PUSH
16277: LD_VAR 0 9
16281: IN
16282: NOT
16283: IFFALSE 16309
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
16285: LD_ADDR_VAR 0 2
16289: PUSH
16290: LD_VAR 0 9
16294: PUSH
16295: LD_INT 1
16297: PPUSH
16298: LD_VAR 0 9
16302: PPUSH
16303: CALL_OW 12
16307: ARRAY
16308: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
16309: LD_VAR 0 2
16313: PPUSH
16314: LD_VAR 0 3
16318: PPUSH
16319: CALL 16568 0 2
16323: NOT
16324: IFFALSE 16383
// repeat engine := _engine [ 1 ] ;
16326: LD_ADDR_VAR 0 3
16330: PUSH
16331: LD_VAR 0 11
16335: PUSH
16336: LD_INT 1
16338: ARRAY
16339: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
16340: LD_ADDR_VAR 0 11
16344: PUSH
16345: LD_VAR 0 11
16349: PPUSH
16350: LD_INT 1
16352: PPUSH
16353: CALL_OW 3
16357: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
16358: LD_VAR 0 2
16362: PPUSH
16363: LD_VAR 0 3
16367: PPUSH
16368: CALL 16568 0 2
16372: PUSH
16373: LD_VAR 0 11
16377: PUSH
16378: EMPTY
16379: EQUAL
16380: OR
16381: IFFALSE 16326
// if not control in _control then
16383: LD_VAR 0 4
16387: PUSH
16388: LD_VAR 0 12
16392: IN
16393: NOT
16394: IFFALSE 16420
// control := _control [ rand ( 1 , _control ) ] ;
16396: LD_ADDR_VAR 0 4
16400: PUSH
16401: LD_VAR 0 12
16405: PUSH
16406: LD_INT 1
16408: PPUSH
16409: LD_VAR 0 12
16413: PPUSH
16414: CALL_OW 12
16418: ARRAY
16419: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
16420: LD_VAR 0 2
16424: PPUSH
16425: LD_VAR 0 5
16429: PPUSH
16430: CALL 16788 0 2
16434: NOT
16435: IFFALSE 16494
// repeat weapon := _weapon [ 1 ] ;
16437: LD_ADDR_VAR 0 5
16441: PUSH
16442: LD_VAR 0 10
16446: PUSH
16447: LD_INT 1
16449: ARRAY
16450: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
16451: LD_ADDR_VAR 0 10
16455: PUSH
16456: LD_VAR 0 10
16460: PPUSH
16461: LD_INT 1
16463: PPUSH
16464: CALL_OW 3
16468: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
16469: LD_VAR 0 2
16473: PPUSH
16474: LD_VAR 0 5
16478: PPUSH
16479: CALL 16788 0 2
16483: PUSH
16484: LD_VAR 0 10
16488: PUSH
16489: EMPTY
16490: EQUAL
16491: OR
16492: IFFALSE 16437
// result := [ ] ;
16494: LD_ADDR_VAR 0 6
16498: PUSH
16499: EMPTY
16500: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16501: LD_VAR 0 1
16505: PPUSH
16506: LD_VAR 0 2
16510: PPUSH
16511: LD_VAR 0 3
16515: PPUSH
16516: LD_VAR 0 4
16520: PPUSH
16521: LD_VAR 0 5
16525: PPUSH
16526: CALL_OW 448
16530: IFFALSE 16563
// result := [ chassis , engine , control , weapon ] ;
16532: LD_ADDR_VAR 0 6
16536: PUSH
16537: LD_VAR 0 2
16541: PUSH
16542: LD_VAR 0 3
16546: PUSH
16547: LD_VAR 0 4
16551: PUSH
16552: LD_VAR 0 5
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: ST_TO_ADDR
// end ;
16563: LD_VAR 0 6
16567: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
16568: LD_INT 0
16570: PPUSH
// if not chassis or not engine then
16571: LD_VAR 0 1
16575: NOT
16576: PUSH
16577: LD_VAR 0 2
16581: NOT
16582: OR
16583: IFFALSE 16587
// exit ;
16585: GO 16783
// case engine of engine_solar :
16587: LD_VAR 0 2
16591: PUSH
16592: LD_INT 2
16594: DOUBLE
16595: EQUAL
16596: IFTRUE 16600
16598: GO 16638
16600: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
16601: LD_ADDR_VAR 0 3
16605: PUSH
16606: LD_INT 11
16608: PUSH
16609: LD_INT 12
16611: PUSH
16612: LD_INT 13
16614: PUSH
16615: LD_INT 14
16617: PUSH
16618: LD_INT 1
16620: PUSH
16621: LD_INT 2
16623: PUSH
16624: LD_INT 3
16626: PUSH
16627: EMPTY
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: ST_TO_ADDR
16636: GO 16767
16638: LD_INT 1
16640: DOUBLE
16641: EQUAL
16642: IFTRUE 16646
16644: GO 16708
16646: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
16647: LD_ADDR_VAR 0 3
16651: PUSH
16652: LD_INT 11
16654: PUSH
16655: LD_INT 12
16657: PUSH
16658: LD_INT 13
16660: PUSH
16661: LD_INT 14
16663: PUSH
16664: LD_INT 1
16666: PUSH
16667: LD_INT 2
16669: PUSH
16670: LD_INT 3
16672: PUSH
16673: LD_INT 4
16675: PUSH
16676: LD_INT 5
16678: PUSH
16679: LD_INT 21
16681: PUSH
16682: LD_INT 23
16684: PUSH
16685: LD_INT 22
16687: PUSH
16688: LD_INT 24
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: ST_TO_ADDR
16706: GO 16767
16708: LD_INT 3
16710: DOUBLE
16711: EQUAL
16712: IFTRUE 16716
16714: GO 16766
16716: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16717: LD_ADDR_VAR 0 3
16721: PUSH
16722: LD_INT 13
16724: PUSH
16725: LD_INT 14
16727: PUSH
16728: LD_INT 2
16730: PUSH
16731: LD_INT 3
16733: PUSH
16734: LD_INT 4
16736: PUSH
16737: LD_INT 5
16739: PUSH
16740: LD_INT 21
16742: PUSH
16743: LD_INT 22
16745: PUSH
16746: LD_INT 23
16748: PUSH
16749: LD_INT 24
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: ST_TO_ADDR
16764: GO 16767
16766: POP
// result := ( chassis in result ) ;
16767: LD_ADDR_VAR 0 3
16771: PUSH
16772: LD_VAR 0 1
16776: PUSH
16777: LD_VAR 0 3
16781: IN
16782: ST_TO_ADDR
// end ;
16783: LD_VAR 0 3
16787: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
16788: LD_INT 0
16790: PPUSH
// if not chassis or not weapon then
16791: LD_VAR 0 1
16795: NOT
16796: PUSH
16797: LD_VAR 0 2
16801: NOT
16802: OR
16803: IFFALSE 16807
// exit ;
16805: GO 17833
// case weapon of us_machine_gun :
16807: LD_VAR 0 2
16811: PUSH
16812: LD_INT 2
16814: DOUBLE
16815: EQUAL
16816: IFTRUE 16820
16818: GO 16850
16820: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
16821: LD_ADDR_VAR 0 3
16825: PUSH
16826: LD_INT 1
16828: PUSH
16829: LD_INT 2
16831: PUSH
16832: LD_INT 3
16834: PUSH
16835: LD_INT 4
16837: PUSH
16838: LD_INT 5
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: ST_TO_ADDR
16848: GO 17817
16850: LD_INT 3
16852: DOUBLE
16853: EQUAL
16854: IFTRUE 16858
16856: GO 16888
16858: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
16859: LD_ADDR_VAR 0 3
16863: PUSH
16864: LD_INT 1
16866: PUSH
16867: LD_INT 2
16869: PUSH
16870: LD_INT 3
16872: PUSH
16873: LD_INT 4
16875: PUSH
16876: LD_INT 5
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: LIST
16885: ST_TO_ADDR
16886: GO 17817
16888: LD_INT 11
16890: DOUBLE
16891: EQUAL
16892: IFTRUE 16896
16894: GO 16926
16896: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
16897: LD_ADDR_VAR 0 3
16901: PUSH
16902: LD_INT 1
16904: PUSH
16905: LD_INT 2
16907: PUSH
16908: LD_INT 3
16910: PUSH
16911: LD_INT 4
16913: PUSH
16914: LD_INT 5
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: ST_TO_ADDR
16924: GO 17817
16926: LD_INT 4
16928: DOUBLE
16929: EQUAL
16930: IFTRUE 16934
16932: GO 16960
16934: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
16935: LD_ADDR_VAR 0 3
16939: PUSH
16940: LD_INT 2
16942: PUSH
16943: LD_INT 3
16945: PUSH
16946: LD_INT 4
16948: PUSH
16949: LD_INT 5
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: ST_TO_ADDR
16958: GO 17817
16960: LD_INT 5
16962: DOUBLE
16963: EQUAL
16964: IFTRUE 16968
16966: GO 16994
16968: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
16969: LD_ADDR_VAR 0 3
16973: PUSH
16974: LD_INT 2
16976: PUSH
16977: LD_INT 3
16979: PUSH
16980: LD_INT 4
16982: PUSH
16983: LD_INT 5
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: ST_TO_ADDR
16992: GO 17817
16994: LD_INT 9
16996: DOUBLE
16997: EQUAL
16998: IFTRUE 17002
17000: GO 17028
17002: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
17003: LD_ADDR_VAR 0 3
17007: PUSH
17008: LD_INT 2
17010: PUSH
17011: LD_INT 3
17013: PUSH
17014: LD_INT 4
17016: PUSH
17017: LD_INT 5
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: ST_TO_ADDR
17026: GO 17817
17028: LD_INT 7
17030: DOUBLE
17031: EQUAL
17032: IFTRUE 17036
17034: GO 17062
17036: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
17037: LD_ADDR_VAR 0 3
17041: PUSH
17042: LD_INT 2
17044: PUSH
17045: LD_INT 3
17047: PUSH
17048: LD_INT 4
17050: PUSH
17051: LD_INT 5
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: ST_TO_ADDR
17060: GO 17817
17062: LD_INT 12
17064: DOUBLE
17065: EQUAL
17066: IFTRUE 17070
17068: GO 17096
17070: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
17071: LD_ADDR_VAR 0 3
17075: PUSH
17076: LD_INT 2
17078: PUSH
17079: LD_INT 3
17081: PUSH
17082: LD_INT 4
17084: PUSH
17085: LD_INT 5
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: ST_TO_ADDR
17094: GO 17817
17096: LD_INT 13
17098: DOUBLE
17099: EQUAL
17100: IFTRUE 17104
17102: GO 17130
17104: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
17105: LD_ADDR_VAR 0 3
17109: PUSH
17110: LD_INT 2
17112: PUSH
17113: LD_INT 3
17115: PUSH
17116: LD_INT 4
17118: PUSH
17119: LD_INT 5
17121: PUSH
17122: EMPTY
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: ST_TO_ADDR
17128: GO 17817
17130: LD_INT 14
17132: DOUBLE
17133: EQUAL
17134: IFTRUE 17138
17136: GO 17156
17138: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
17139: LD_ADDR_VAR 0 3
17143: PUSH
17144: LD_INT 4
17146: PUSH
17147: LD_INT 5
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: ST_TO_ADDR
17154: GO 17817
17156: LD_INT 6
17158: DOUBLE
17159: EQUAL
17160: IFTRUE 17164
17162: GO 17182
17164: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
17165: LD_ADDR_VAR 0 3
17169: PUSH
17170: LD_INT 4
17172: PUSH
17173: LD_INT 5
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: ST_TO_ADDR
17180: GO 17817
17182: LD_INT 10
17184: DOUBLE
17185: EQUAL
17186: IFTRUE 17190
17188: GO 17208
17190: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
17191: LD_ADDR_VAR 0 3
17195: PUSH
17196: LD_INT 4
17198: PUSH
17199: LD_INT 5
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: ST_TO_ADDR
17206: GO 17817
17208: LD_INT 22
17210: DOUBLE
17211: EQUAL
17212: IFTRUE 17216
17214: GO 17242
17216: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
17217: LD_ADDR_VAR 0 3
17221: PUSH
17222: LD_INT 11
17224: PUSH
17225: LD_INT 12
17227: PUSH
17228: LD_INT 13
17230: PUSH
17231: LD_INT 14
17233: PUSH
17234: EMPTY
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: ST_TO_ADDR
17240: GO 17817
17242: LD_INT 23
17244: DOUBLE
17245: EQUAL
17246: IFTRUE 17250
17248: GO 17276
17250: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
17251: LD_ADDR_VAR 0 3
17255: PUSH
17256: LD_INT 11
17258: PUSH
17259: LD_INT 12
17261: PUSH
17262: LD_INT 13
17264: PUSH
17265: LD_INT 14
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: ST_TO_ADDR
17274: GO 17817
17276: LD_INT 24
17278: DOUBLE
17279: EQUAL
17280: IFTRUE 17284
17282: GO 17310
17284: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
17285: LD_ADDR_VAR 0 3
17289: PUSH
17290: LD_INT 11
17292: PUSH
17293: LD_INT 12
17295: PUSH
17296: LD_INT 13
17298: PUSH
17299: LD_INT 14
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: ST_TO_ADDR
17308: GO 17817
17310: LD_INT 30
17312: DOUBLE
17313: EQUAL
17314: IFTRUE 17318
17316: GO 17344
17318: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
17319: LD_ADDR_VAR 0 3
17323: PUSH
17324: LD_INT 11
17326: PUSH
17327: LD_INT 12
17329: PUSH
17330: LD_INT 13
17332: PUSH
17333: LD_INT 14
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: ST_TO_ADDR
17342: GO 17817
17344: LD_INT 25
17346: DOUBLE
17347: EQUAL
17348: IFTRUE 17352
17350: GO 17370
17352: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
17353: LD_ADDR_VAR 0 3
17357: PUSH
17358: LD_INT 13
17360: PUSH
17361: LD_INT 14
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: ST_TO_ADDR
17368: GO 17817
17370: LD_INT 27
17372: DOUBLE
17373: EQUAL
17374: IFTRUE 17378
17376: GO 17396
17378: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
17379: LD_ADDR_VAR 0 3
17383: PUSH
17384: LD_INT 13
17386: PUSH
17387: LD_INT 14
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: ST_TO_ADDR
17394: GO 17817
17396: LD_INT 28
17398: DOUBLE
17399: EQUAL
17400: IFTRUE 17404
17402: GO 17422
17404: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
17405: LD_ADDR_VAR 0 3
17409: PUSH
17410: LD_INT 13
17412: PUSH
17413: LD_INT 14
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: ST_TO_ADDR
17420: GO 17817
17422: LD_INT 29
17424: DOUBLE
17425: EQUAL
17426: IFTRUE 17430
17428: GO 17448
17430: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
17431: LD_ADDR_VAR 0 3
17435: PUSH
17436: LD_INT 13
17438: PUSH
17439: LD_INT 14
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: ST_TO_ADDR
17446: GO 17817
17448: LD_INT 31
17450: DOUBLE
17451: EQUAL
17452: IFTRUE 17456
17454: GO 17474
17456: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
17457: LD_ADDR_VAR 0 3
17461: PUSH
17462: LD_INT 13
17464: PUSH
17465: LD_INT 14
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: ST_TO_ADDR
17472: GO 17817
17474: LD_INT 26
17476: DOUBLE
17477: EQUAL
17478: IFTRUE 17482
17480: GO 17500
17482: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
17483: LD_ADDR_VAR 0 3
17487: PUSH
17488: LD_INT 13
17490: PUSH
17491: LD_INT 14
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: ST_TO_ADDR
17498: GO 17817
17500: LD_INT 42
17502: DOUBLE
17503: EQUAL
17504: IFTRUE 17508
17506: GO 17534
17508: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
17509: LD_ADDR_VAR 0 3
17513: PUSH
17514: LD_INT 21
17516: PUSH
17517: LD_INT 22
17519: PUSH
17520: LD_INT 23
17522: PUSH
17523: LD_INT 24
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: ST_TO_ADDR
17532: GO 17817
17534: LD_INT 43
17536: DOUBLE
17537: EQUAL
17538: IFTRUE 17542
17540: GO 17568
17542: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
17543: LD_ADDR_VAR 0 3
17547: PUSH
17548: LD_INT 21
17550: PUSH
17551: LD_INT 22
17553: PUSH
17554: LD_INT 23
17556: PUSH
17557: LD_INT 24
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: ST_TO_ADDR
17566: GO 17817
17568: LD_INT 44
17570: DOUBLE
17571: EQUAL
17572: IFTRUE 17576
17574: GO 17602
17576: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
17577: LD_ADDR_VAR 0 3
17581: PUSH
17582: LD_INT 21
17584: PUSH
17585: LD_INT 22
17587: PUSH
17588: LD_INT 23
17590: PUSH
17591: LD_INT 24
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: ST_TO_ADDR
17600: GO 17817
17602: LD_INT 45
17604: DOUBLE
17605: EQUAL
17606: IFTRUE 17610
17608: GO 17636
17610: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
17611: LD_ADDR_VAR 0 3
17615: PUSH
17616: LD_INT 21
17618: PUSH
17619: LD_INT 22
17621: PUSH
17622: LD_INT 23
17624: PUSH
17625: LD_INT 24
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: ST_TO_ADDR
17634: GO 17817
17636: LD_INT 49
17638: DOUBLE
17639: EQUAL
17640: IFTRUE 17644
17642: GO 17670
17644: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
17645: LD_ADDR_VAR 0 3
17649: PUSH
17650: LD_INT 21
17652: PUSH
17653: LD_INT 22
17655: PUSH
17656: LD_INT 23
17658: PUSH
17659: LD_INT 24
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: ST_TO_ADDR
17668: GO 17817
17670: LD_INT 51
17672: DOUBLE
17673: EQUAL
17674: IFTRUE 17678
17676: GO 17704
17678: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
17679: LD_ADDR_VAR 0 3
17683: PUSH
17684: LD_INT 21
17686: PUSH
17687: LD_INT 22
17689: PUSH
17690: LD_INT 23
17692: PUSH
17693: LD_INT 24
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: ST_TO_ADDR
17702: GO 17817
17704: LD_INT 52
17706: DOUBLE
17707: EQUAL
17708: IFTRUE 17712
17710: GO 17738
17712: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
17713: LD_ADDR_VAR 0 3
17717: PUSH
17718: LD_INT 21
17720: PUSH
17721: LD_INT 22
17723: PUSH
17724: LD_INT 23
17726: PUSH
17727: LD_INT 24
17729: PUSH
17730: EMPTY
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: ST_TO_ADDR
17736: GO 17817
17738: LD_INT 53
17740: DOUBLE
17741: EQUAL
17742: IFTRUE 17746
17744: GO 17764
17746: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
17747: LD_ADDR_VAR 0 3
17751: PUSH
17752: LD_INT 23
17754: PUSH
17755: LD_INT 24
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: ST_TO_ADDR
17762: GO 17817
17764: LD_INT 46
17766: DOUBLE
17767: EQUAL
17768: IFTRUE 17772
17770: GO 17790
17772: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
17773: LD_ADDR_VAR 0 3
17777: PUSH
17778: LD_INT 23
17780: PUSH
17781: LD_INT 24
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: ST_TO_ADDR
17788: GO 17817
17790: LD_INT 47
17792: DOUBLE
17793: EQUAL
17794: IFTRUE 17798
17796: GO 17816
17798: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17799: LD_ADDR_VAR 0 3
17803: PUSH
17804: LD_INT 23
17806: PUSH
17807: LD_INT 24
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: ST_TO_ADDR
17814: GO 17817
17816: POP
// result := ( chassis in result ) ;
17817: LD_ADDR_VAR 0 3
17821: PUSH
17822: LD_VAR 0 1
17826: PUSH
17827: LD_VAR 0 3
17831: IN
17832: ST_TO_ADDR
// end ;
17833: LD_VAR 0 3
17837: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
17838: LD_INT 0
17840: PPUSH
17841: PPUSH
17842: PPUSH
17843: PPUSH
17844: PPUSH
17845: PPUSH
17846: PPUSH
// result := array ;
17847: LD_ADDR_VAR 0 5
17851: PUSH
17852: LD_VAR 0 1
17856: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
17857: LD_VAR 0 1
17861: NOT
17862: PUSH
17863: LD_VAR 0 2
17867: NOT
17868: OR
17869: PUSH
17870: LD_VAR 0 3
17874: NOT
17875: OR
17876: PUSH
17877: LD_VAR 0 2
17881: PUSH
17882: LD_VAR 0 1
17886: GREATER
17887: OR
17888: PUSH
17889: LD_VAR 0 3
17893: PUSH
17894: LD_VAR 0 1
17898: GREATER
17899: OR
17900: IFFALSE 17904
// exit ;
17902: GO 18200
// if direction then
17904: LD_VAR 0 4
17908: IFFALSE 17972
// begin d := 1 ;
17910: LD_ADDR_VAR 0 9
17914: PUSH
17915: LD_INT 1
17917: ST_TO_ADDR
// if i_from > i_to then
17918: LD_VAR 0 2
17922: PUSH
17923: LD_VAR 0 3
17927: GREATER
17928: IFFALSE 17954
// length := ( array - i_from ) + i_to else
17930: LD_ADDR_VAR 0 11
17934: PUSH
17935: LD_VAR 0 1
17939: PUSH
17940: LD_VAR 0 2
17944: MINUS
17945: PUSH
17946: LD_VAR 0 3
17950: PLUS
17951: ST_TO_ADDR
17952: GO 17970
// length := i_to - i_from ;
17954: LD_ADDR_VAR 0 11
17958: PUSH
17959: LD_VAR 0 3
17963: PUSH
17964: LD_VAR 0 2
17968: MINUS
17969: ST_TO_ADDR
// end else
17970: GO 18033
// begin d := - 1 ;
17972: LD_ADDR_VAR 0 9
17976: PUSH
17977: LD_INT 1
17979: NEG
17980: ST_TO_ADDR
// if i_from > i_to then
17981: LD_VAR 0 2
17985: PUSH
17986: LD_VAR 0 3
17990: GREATER
17991: IFFALSE 18011
// length := i_from - i_to else
17993: LD_ADDR_VAR 0 11
17997: PUSH
17998: LD_VAR 0 2
18002: PUSH
18003: LD_VAR 0 3
18007: MINUS
18008: ST_TO_ADDR
18009: GO 18033
// length := ( array - i_to ) + i_from ;
18011: LD_ADDR_VAR 0 11
18015: PUSH
18016: LD_VAR 0 1
18020: PUSH
18021: LD_VAR 0 3
18025: MINUS
18026: PUSH
18027: LD_VAR 0 2
18031: PLUS
18032: ST_TO_ADDR
// end ; if not length then
18033: LD_VAR 0 11
18037: NOT
18038: IFFALSE 18042
// exit ;
18040: GO 18200
// tmp := array ;
18042: LD_ADDR_VAR 0 10
18046: PUSH
18047: LD_VAR 0 1
18051: ST_TO_ADDR
// for i = 1 to length do
18052: LD_ADDR_VAR 0 6
18056: PUSH
18057: DOUBLE
18058: LD_INT 1
18060: DEC
18061: ST_TO_ADDR
18062: LD_VAR 0 11
18066: PUSH
18067: FOR_TO
18068: IFFALSE 18188
// begin for j = 1 to array do
18070: LD_ADDR_VAR 0 7
18074: PUSH
18075: DOUBLE
18076: LD_INT 1
18078: DEC
18079: ST_TO_ADDR
18080: LD_VAR 0 1
18084: PUSH
18085: FOR_TO
18086: IFFALSE 18174
// begin k := j + d ;
18088: LD_ADDR_VAR 0 8
18092: PUSH
18093: LD_VAR 0 7
18097: PUSH
18098: LD_VAR 0 9
18102: PLUS
18103: ST_TO_ADDR
// if k > array then
18104: LD_VAR 0 8
18108: PUSH
18109: LD_VAR 0 1
18113: GREATER
18114: IFFALSE 18124
// k := 1 ;
18116: LD_ADDR_VAR 0 8
18120: PUSH
18121: LD_INT 1
18123: ST_TO_ADDR
// if not k then
18124: LD_VAR 0 8
18128: NOT
18129: IFFALSE 18141
// k := array ;
18131: LD_ADDR_VAR 0 8
18135: PUSH
18136: LD_VAR 0 1
18140: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
18141: LD_ADDR_VAR 0 10
18145: PUSH
18146: LD_VAR 0 10
18150: PPUSH
18151: LD_VAR 0 8
18155: PPUSH
18156: LD_VAR 0 1
18160: PUSH
18161: LD_VAR 0 7
18165: ARRAY
18166: PPUSH
18167: CALL_OW 1
18171: ST_TO_ADDR
// end ;
18172: GO 18085
18174: POP
18175: POP
// array := tmp ;
18176: LD_ADDR_VAR 0 1
18180: PUSH
18181: LD_VAR 0 10
18185: ST_TO_ADDR
// end ;
18186: GO 18067
18188: POP
18189: POP
// result := array ;
18190: LD_ADDR_VAR 0 5
18194: PUSH
18195: LD_VAR 0 1
18199: ST_TO_ADDR
// end ;
18200: LD_VAR 0 5
18204: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
18205: LD_INT 0
18207: PPUSH
18208: PPUSH
// result := 0 ;
18209: LD_ADDR_VAR 0 3
18213: PUSH
18214: LD_INT 0
18216: ST_TO_ADDR
// if not array or not value in array then
18217: LD_VAR 0 1
18221: NOT
18222: PUSH
18223: LD_VAR 0 2
18227: PUSH
18228: LD_VAR 0 1
18232: IN
18233: NOT
18234: OR
18235: IFFALSE 18239
// exit ;
18237: GO 18293
// for i = 1 to array do
18239: LD_ADDR_VAR 0 4
18243: PUSH
18244: DOUBLE
18245: LD_INT 1
18247: DEC
18248: ST_TO_ADDR
18249: LD_VAR 0 1
18253: PUSH
18254: FOR_TO
18255: IFFALSE 18291
// if value = array [ i ] then
18257: LD_VAR 0 2
18261: PUSH
18262: LD_VAR 0 1
18266: PUSH
18267: LD_VAR 0 4
18271: ARRAY
18272: EQUAL
18273: IFFALSE 18289
// begin result := i ;
18275: LD_ADDR_VAR 0 3
18279: PUSH
18280: LD_VAR 0 4
18284: ST_TO_ADDR
// exit ;
18285: POP
18286: POP
18287: GO 18293
// end ;
18289: GO 18254
18291: POP
18292: POP
// end ;
18293: LD_VAR 0 3
18297: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
18298: LD_INT 0
18300: PPUSH
// vc_chassis := chassis ;
18301: LD_ADDR_OWVAR 37
18305: PUSH
18306: LD_VAR 0 1
18310: ST_TO_ADDR
// vc_engine := engine ;
18311: LD_ADDR_OWVAR 39
18315: PUSH
18316: LD_VAR 0 2
18320: ST_TO_ADDR
// vc_control := control ;
18321: LD_ADDR_OWVAR 38
18325: PUSH
18326: LD_VAR 0 3
18330: ST_TO_ADDR
// vc_weapon := weapon ;
18331: LD_ADDR_OWVAR 40
18335: PUSH
18336: LD_VAR 0 4
18340: ST_TO_ADDR
// vc_fuel_battery := fuel ;
18341: LD_ADDR_OWVAR 41
18345: PUSH
18346: LD_VAR 0 5
18350: ST_TO_ADDR
// end ;
18351: LD_VAR 0 6
18355: RET
// export function WantPlant ( unit ) ; var task ; begin
18356: LD_INT 0
18358: PPUSH
18359: PPUSH
// result := false ;
18360: LD_ADDR_VAR 0 2
18364: PUSH
18365: LD_INT 0
18367: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
18368: LD_ADDR_VAR 0 3
18372: PUSH
18373: LD_VAR 0 1
18377: PPUSH
18378: CALL_OW 437
18382: ST_TO_ADDR
// if task then
18383: LD_VAR 0 3
18387: IFFALSE 18415
// if task [ 1 ] [ 1 ] = p then
18389: LD_VAR 0 3
18393: PUSH
18394: LD_INT 1
18396: ARRAY
18397: PUSH
18398: LD_INT 1
18400: ARRAY
18401: PUSH
18402: LD_STRING p
18404: EQUAL
18405: IFFALSE 18415
// result := true ;
18407: LD_ADDR_VAR 0 2
18411: PUSH
18412: LD_INT 1
18414: ST_TO_ADDR
// end ;
18415: LD_VAR 0 2
18419: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
18420: LD_INT 0
18422: PPUSH
18423: PPUSH
18424: PPUSH
18425: PPUSH
// if pos < 1 then
18426: LD_VAR 0 2
18430: PUSH
18431: LD_INT 1
18433: LESS
18434: IFFALSE 18438
// exit ;
18436: GO 18741
// if pos = 1 then
18438: LD_VAR 0 2
18442: PUSH
18443: LD_INT 1
18445: EQUAL
18446: IFFALSE 18479
// result := Replace ( arr , pos [ 1 ] , value ) else
18448: LD_ADDR_VAR 0 4
18452: PUSH
18453: LD_VAR 0 1
18457: PPUSH
18458: LD_VAR 0 2
18462: PUSH
18463: LD_INT 1
18465: ARRAY
18466: PPUSH
18467: LD_VAR 0 3
18471: PPUSH
18472: CALL_OW 1
18476: ST_TO_ADDR
18477: GO 18741
// begin tmp := arr ;
18479: LD_ADDR_VAR 0 6
18483: PUSH
18484: LD_VAR 0 1
18488: ST_TO_ADDR
// s_arr := [ tmp ] ;
18489: LD_ADDR_VAR 0 7
18493: PUSH
18494: LD_VAR 0 6
18498: PUSH
18499: EMPTY
18500: LIST
18501: ST_TO_ADDR
// for i = 1 to pos - 1 do
18502: LD_ADDR_VAR 0 5
18506: PUSH
18507: DOUBLE
18508: LD_INT 1
18510: DEC
18511: ST_TO_ADDR
18512: LD_VAR 0 2
18516: PUSH
18517: LD_INT 1
18519: MINUS
18520: PUSH
18521: FOR_TO
18522: IFFALSE 18567
// begin tmp := tmp [ pos [ i ] ] ;
18524: LD_ADDR_VAR 0 6
18528: PUSH
18529: LD_VAR 0 6
18533: PUSH
18534: LD_VAR 0 2
18538: PUSH
18539: LD_VAR 0 5
18543: ARRAY
18544: ARRAY
18545: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
18546: LD_ADDR_VAR 0 7
18550: PUSH
18551: LD_VAR 0 7
18555: PUSH
18556: LD_VAR 0 6
18560: PUSH
18561: EMPTY
18562: LIST
18563: ADD
18564: ST_TO_ADDR
// end ;
18565: GO 18521
18567: POP
18568: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
18569: LD_ADDR_VAR 0 6
18573: PUSH
18574: LD_VAR 0 6
18578: PPUSH
18579: LD_VAR 0 2
18583: PUSH
18584: LD_VAR 0 2
18588: ARRAY
18589: PPUSH
18590: LD_VAR 0 3
18594: PPUSH
18595: CALL_OW 1
18599: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
18600: LD_ADDR_VAR 0 7
18604: PUSH
18605: LD_VAR 0 7
18609: PPUSH
18610: LD_VAR 0 7
18614: PPUSH
18615: LD_VAR 0 6
18619: PPUSH
18620: CALL_OW 1
18624: ST_TO_ADDR
// for i = s_arr downto 2 do
18625: LD_ADDR_VAR 0 5
18629: PUSH
18630: DOUBLE
18631: LD_VAR 0 7
18635: INC
18636: ST_TO_ADDR
18637: LD_INT 2
18639: PUSH
18640: FOR_DOWNTO
18641: IFFALSE 18725
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
18643: LD_ADDR_VAR 0 6
18647: PUSH
18648: LD_VAR 0 7
18652: PUSH
18653: LD_VAR 0 5
18657: PUSH
18658: LD_INT 1
18660: MINUS
18661: ARRAY
18662: PPUSH
18663: LD_VAR 0 2
18667: PUSH
18668: LD_VAR 0 5
18672: PUSH
18673: LD_INT 1
18675: MINUS
18676: ARRAY
18677: PPUSH
18678: LD_VAR 0 7
18682: PUSH
18683: LD_VAR 0 5
18687: ARRAY
18688: PPUSH
18689: CALL_OW 1
18693: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
18694: LD_ADDR_VAR 0 7
18698: PUSH
18699: LD_VAR 0 7
18703: PPUSH
18704: LD_VAR 0 5
18708: PUSH
18709: LD_INT 1
18711: MINUS
18712: PPUSH
18713: LD_VAR 0 6
18717: PPUSH
18718: CALL_OW 1
18722: ST_TO_ADDR
// end ;
18723: GO 18640
18725: POP
18726: POP
// result := s_arr [ 1 ] ;
18727: LD_ADDR_VAR 0 4
18731: PUSH
18732: LD_VAR 0 7
18736: PUSH
18737: LD_INT 1
18739: ARRAY
18740: ST_TO_ADDR
// end ; end ;
18741: LD_VAR 0 4
18745: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
18746: LD_INT 0
18748: PPUSH
18749: PPUSH
// if not list then
18750: LD_VAR 0 1
18754: NOT
18755: IFFALSE 18759
// exit ;
18757: GO 18850
// i := list [ pos1 ] ;
18759: LD_ADDR_VAR 0 5
18763: PUSH
18764: LD_VAR 0 1
18768: PUSH
18769: LD_VAR 0 2
18773: ARRAY
18774: ST_TO_ADDR
// if not i then
18775: LD_VAR 0 5
18779: NOT
18780: IFFALSE 18784
// exit ;
18782: GO 18850
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
18784: LD_ADDR_VAR 0 1
18788: PUSH
18789: LD_VAR 0 1
18793: PPUSH
18794: LD_VAR 0 2
18798: PPUSH
18799: LD_VAR 0 1
18803: PUSH
18804: LD_VAR 0 3
18808: ARRAY
18809: PPUSH
18810: CALL_OW 1
18814: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
18815: LD_ADDR_VAR 0 1
18819: PUSH
18820: LD_VAR 0 1
18824: PPUSH
18825: LD_VAR 0 3
18829: PPUSH
18830: LD_VAR 0 5
18834: PPUSH
18835: CALL_OW 1
18839: ST_TO_ADDR
// result := list ;
18840: LD_ADDR_VAR 0 4
18844: PUSH
18845: LD_VAR 0 1
18849: ST_TO_ADDR
// end ;
18850: LD_VAR 0 4
18854: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
18855: LD_INT 0
18857: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
18858: LD_ADDR_VAR 0 5
18862: PUSH
18863: LD_VAR 0 1
18867: PPUSH
18868: CALL_OW 250
18872: PPUSH
18873: LD_VAR 0 1
18877: PPUSH
18878: CALL_OW 251
18882: PPUSH
18883: LD_VAR 0 2
18887: PPUSH
18888: LD_VAR 0 3
18892: PPUSH
18893: LD_VAR 0 4
18897: PPUSH
18898: CALL 18908 0 5
18902: ST_TO_ADDR
// end ;
18903: LD_VAR 0 5
18907: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
18908: LD_INT 0
18910: PPUSH
18911: PPUSH
18912: PPUSH
18913: PPUSH
// if not list then
18914: LD_VAR 0 3
18918: NOT
18919: IFFALSE 18923
// exit ;
18921: GO 19311
// result := [ ] ;
18923: LD_ADDR_VAR 0 6
18927: PUSH
18928: EMPTY
18929: ST_TO_ADDR
// for i in list do
18930: LD_ADDR_VAR 0 7
18934: PUSH
18935: LD_VAR 0 3
18939: PUSH
18940: FOR_IN
18941: IFFALSE 19143
// begin tmp := GetDistUnitXY ( i , x , y ) ;
18943: LD_ADDR_VAR 0 9
18947: PUSH
18948: LD_VAR 0 7
18952: PPUSH
18953: LD_VAR 0 1
18957: PPUSH
18958: LD_VAR 0 2
18962: PPUSH
18963: CALL_OW 297
18967: ST_TO_ADDR
// if not result then
18968: LD_VAR 0 6
18972: NOT
18973: IFFALSE 18999
// result := [ [ i , tmp ] ] else
18975: LD_ADDR_VAR 0 6
18979: PUSH
18980: LD_VAR 0 7
18984: PUSH
18985: LD_VAR 0 9
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: EMPTY
18995: LIST
18996: ST_TO_ADDR
18997: GO 19141
// begin if result [ result ] [ 2 ] < tmp then
18999: LD_VAR 0 6
19003: PUSH
19004: LD_VAR 0 6
19008: ARRAY
19009: PUSH
19010: LD_INT 2
19012: ARRAY
19013: PUSH
19014: LD_VAR 0 9
19018: LESS
19019: IFFALSE 19061
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
19021: LD_ADDR_VAR 0 6
19025: PUSH
19026: LD_VAR 0 6
19030: PPUSH
19031: LD_VAR 0 6
19035: PUSH
19036: LD_INT 1
19038: PLUS
19039: PPUSH
19040: LD_VAR 0 7
19044: PUSH
19045: LD_VAR 0 9
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PPUSH
19054: CALL_OW 2
19058: ST_TO_ADDR
19059: GO 19141
// for j = 1 to result do
19061: LD_ADDR_VAR 0 8
19065: PUSH
19066: DOUBLE
19067: LD_INT 1
19069: DEC
19070: ST_TO_ADDR
19071: LD_VAR 0 6
19075: PUSH
19076: FOR_TO
19077: IFFALSE 19139
// begin if tmp < result [ j ] [ 2 ] then
19079: LD_VAR 0 9
19083: PUSH
19084: LD_VAR 0 6
19088: PUSH
19089: LD_VAR 0 8
19093: ARRAY
19094: PUSH
19095: LD_INT 2
19097: ARRAY
19098: LESS
19099: IFFALSE 19137
// begin result := Insert ( result , j , [ i , tmp ] ) ;
19101: LD_ADDR_VAR 0 6
19105: PUSH
19106: LD_VAR 0 6
19110: PPUSH
19111: LD_VAR 0 8
19115: PPUSH
19116: LD_VAR 0 7
19120: PUSH
19121: LD_VAR 0 9
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: PPUSH
19130: CALL_OW 2
19134: ST_TO_ADDR
// break ;
19135: GO 19139
// end ; end ;
19137: GO 19076
19139: POP
19140: POP
// end ; end ;
19141: GO 18940
19143: POP
19144: POP
// if result and not asc then
19145: LD_VAR 0 6
19149: PUSH
19150: LD_VAR 0 4
19154: NOT
19155: AND
19156: IFFALSE 19231
// begin tmp := result ;
19158: LD_ADDR_VAR 0 9
19162: PUSH
19163: LD_VAR 0 6
19167: ST_TO_ADDR
// for i = tmp downto 1 do
19168: LD_ADDR_VAR 0 7
19172: PUSH
19173: DOUBLE
19174: LD_VAR 0 9
19178: INC
19179: ST_TO_ADDR
19180: LD_INT 1
19182: PUSH
19183: FOR_DOWNTO
19184: IFFALSE 19229
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
19186: LD_ADDR_VAR 0 6
19190: PUSH
19191: LD_VAR 0 6
19195: PPUSH
19196: LD_VAR 0 9
19200: PUSH
19201: LD_VAR 0 7
19205: MINUS
19206: PUSH
19207: LD_INT 1
19209: PLUS
19210: PPUSH
19211: LD_VAR 0 9
19215: PUSH
19216: LD_VAR 0 7
19220: ARRAY
19221: PPUSH
19222: CALL_OW 1
19226: ST_TO_ADDR
19227: GO 19183
19229: POP
19230: POP
// end ; tmp := [ ] ;
19231: LD_ADDR_VAR 0 9
19235: PUSH
19236: EMPTY
19237: ST_TO_ADDR
// if mode then
19238: LD_VAR 0 5
19242: IFFALSE 19311
// begin for i = 1 to result do
19244: LD_ADDR_VAR 0 7
19248: PUSH
19249: DOUBLE
19250: LD_INT 1
19252: DEC
19253: ST_TO_ADDR
19254: LD_VAR 0 6
19258: PUSH
19259: FOR_TO
19260: IFFALSE 19299
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
19262: LD_ADDR_VAR 0 9
19266: PUSH
19267: LD_VAR 0 9
19271: PPUSH
19272: LD_VAR 0 7
19276: PPUSH
19277: LD_VAR 0 6
19281: PUSH
19282: LD_VAR 0 7
19286: ARRAY
19287: PUSH
19288: LD_INT 1
19290: ARRAY
19291: PPUSH
19292: CALL_OW 1
19296: ST_TO_ADDR
19297: GO 19259
19299: POP
19300: POP
// result := tmp ;
19301: LD_ADDR_VAR 0 6
19305: PUSH
19306: LD_VAR 0 9
19310: ST_TO_ADDR
// end ; end ;
19311: LD_VAR 0 6
19315: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
19316: LD_INT 0
19318: PPUSH
19319: PPUSH
19320: PPUSH
19321: PPUSH
19322: PPUSH
19323: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
19324: LD_ADDR_VAR 0 5
19328: PUSH
19329: LD_INT 0
19331: PUSH
19332: LD_INT 0
19334: PUSH
19335: LD_INT 0
19337: PUSH
19338: EMPTY
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: ST_TO_ADDR
// if not x or not y then
19346: LD_VAR 0 2
19350: NOT
19351: PUSH
19352: LD_VAR 0 3
19356: NOT
19357: OR
19358: IFFALSE 19362
// exit ;
19360: GO 21008
// if not range then
19362: LD_VAR 0 4
19366: NOT
19367: IFFALSE 19377
// range := 10 ;
19369: LD_ADDR_VAR 0 4
19373: PUSH
19374: LD_INT 10
19376: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19377: LD_ADDR_VAR 0 8
19381: PUSH
19382: LD_INT 81
19384: PUSH
19385: LD_VAR 0 1
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PUSH
19394: LD_INT 92
19396: PUSH
19397: LD_VAR 0 2
19401: PUSH
19402: LD_VAR 0 3
19406: PUSH
19407: LD_VAR 0 4
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: PUSH
19418: LD_INT 3
19420: PUSH
19421: LD_INT 21
19423: PUSH
19424: LD_INT 3
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: LIST
19439: PPUSH
19440: CALL_OW 69
19444: ST_TO_ADDR
// if not tmp then
19445: LD_VAR 0 8
19449: NOT
19450: IFFALSE 19454
// exit ;
19452: GO 21008
// for i in tmp do
19454: LD_ADDR_VAR 0 6
19458: PUSH
19459: LD_VAR 0 8
19463: PUSH
19464: FOR_IN
19465: IFFALSE 20983
// begin points := [ 0 , 0 , 0 ] ;
19467: LD_ADDR_VAR 0 9
19471: PUSH
19472: LD_INT 0
19474: PUSH
19475: LD_INT 0
19477: PUSH
19478: LD_INT 0
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: LIST
19485: ST_TO_ADDR
// bpoints := 1 ;
19486: LD_ADDR_VAR 0 10
19490: PUSH
19491: LD_INT 1
19493: ST_TO_ADDR
// case GetType ( i ) of unit_human :
19494: LD_VAR 0 6
19498: PPUSH
19499: CALL_OW 247
19503: PUSH
19504: LD_INT 1
19506: DOUBLE
19507: EQUAL
19508: IFTRUE 19512
19510: GO 20090
19512: POP
// begin if GetClass ( i ) = 1 then
19513: LD_VAR 0 6
19517: PPUSH
19518: CALL_OW 257
19522: PUSH
19523: LD_INT 1
19525: EQUAL
19526: IFFALSE 19547
// points := [ 10 , 5 , 3 ] ;
19528: LD_ADDR_VAR 0 9
19532: PUSH
19533: LD_INT 10
19535: PUSH
19536: LD_INT 5
19538: PUSH
19539: LD_INT 3
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: LIST
19546: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
19547: LD_VAR 0 6
19551: PPUSH
19552: CALL_OW 257
19556: PUSH
19557: LD_INT 2
19559: PUSH
19560: LD_INT 3
19562: PUSH
19563: LD_INT 4
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: LIST
19570: IN
19571: IFFALSE 19592
// points := [ 3 , 2 , 1 ] ;
19573: LD_ADDR_VAR 0 9
19577: PUSH
19578: LD_INT 3
19580: PUSH
19581: LD_INT 2
19583: PUSH
19584: LD_INT 1
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: LIST
19591: ST_TO_ADDR
// if GetClass ( i ) = 5 then
19592: LD_VAR 0 6
19596: PPUSH
19597: CALL_OW 257
19601: PUSH
19602: LD_INT 5
19604: EQUAL
19605: IFFALSE 19626
// points := [ 130 , 5 , 2 ] ;
19607: LD_ADDR_VAR 0 9
19611: PUSH
19612: LD_INT 130
19614: PUSH
19615: LD_INT 5
19617: PUSH
19618: LD_INT 2
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: LIST
19625: ST_TO_ADDR
// if GetClass ( i ) = 8 then
19626: LD_VAR 0 6
19630: PPUSH
19631: CALL_OW 257
19635: PUSH
19636: LD_INT 8
19638: EQUAL
19639: IFFALSE 19660
// points := [ 35 , 35 , 30 ] ;
19641: LD_ADDR_VAR 0 9
19645: PUSH
19646: LD_INT 35
19648: PUSH
19649: LD_INT 35
19651: PUSH
19652: LD_INT 30
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: LIST
19659: ST_TO_ADDR
// if GetClass ( i ) = 9 then
19660: LD_VAR 0 6
19664: PPUSH
19665: CALL_OW 257
19669: PUSH
19670: LD_INT 9
19672: EQUAL
19673: IFFALSE 19694
// points := [ 20 , 55 , 40 ] ;
19675: LD_ADDR_VAR 0 9
19679: PUSH
19680: LD_INT 20
19682: PUSH
19683: LD_INT 55
19685: PUSH
19686: LD_INT 40
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: LIST
19693: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
19694: LD_VAR 0 6
19698: PPUSH
19699: CALL_OW 257
19703: PUSH
19704: LD_INT 12
19706: PUSH
19707: LD_INT 16
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: IN
19714: IFFALSE 19735
// points := [ 5 , 3 , 2 ] ;
19716: LD_ADDR_VAR 0 9
19720: PUSH
19721: LD_INT 5
19723: PUSH
19724: LD_INT 3
19726: PUSH
19727: LD_INT 2
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: LIST
19734: ST_TO_ADDR
// if GetClass ( i ) = 17 then
19735: LD_VAR 0 6
19739: PPUSH
19740: CALL_OW 257
19744: PUSH
19745: LD_INT 17
19747: EQUAL
19748: IFFALSE 19769
// points := [ 100 , 50 , 75 ] ;
19750: LD_ADDR_VAR 0 9
19754: PUSH
19755: LD_INT 100
19757: PUSH
19758: LD_INT 50
19760: PUSH
19761: LD_INT 75
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: LIST
19768: ST_TO_ADDR
// if GetClass ( i ) = 15 then
19769: LD_VAR 0 6
19773: PPUSH
19774: CALL_OW 257
19778: PUSH
19779: LD_INT 15
19781: EQUAL
19782: IFFALSE 19803
// points := [ 10 , 5 , 3 ] ;
19784: LD_ADDR_VAR 0 9
19788: PUSH
19789: LD_INT 10
19791: PUSH
19792: LD_INT 5
19794: PUSH
19795: LD_INT 3
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: LIST
19802: ST_TO_ADDR
// if GetClass ( i ) = 14 then
19803: LD_VAR 0 6
19807: PPUSH
19808: CALL_OW 257
19812: PUSH
19813: LD_INT 14
19815: EQUAL
19816: IFFALSE 19837
// points := [ 10 , 0 , 0 ] ;
19818: LD_ADDR_VAR 0 9
19822: PUSH
19823: LD_INT 10
19825: PUSH
19826: LD_INT 0
19828: PUSH
19829: LD_INT 0
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: LIST
19836: ST_TO_ADDR
// if GetClass ( i ) = 11 then
19837: LD_VAR 0 6
19841: PPUSH
19842: CALL_OW 257
19846: PUSH
19847: LD_INT 11
19849: EQUAL
19850: IFFALSE 19871
// points := [ 30 , 10 , 5 ] ;
19852: LD_ADDR_VAR 0 9
19856: PUSH
19857: LD_INT 30
19859: PUSH
19860: LD_INT 10
19862: PUSH
19863: LD_INT 5
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: LIST
19870: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
19871: LD_VAR 0 1
19875: PPUSH
19876: LD_INT 5
19878: PPUSH
19879: CALL_OW 321
19883: PUSH
19884: LD_INT 2
19886: EQUAL
19887: IFFALSE 19904
// bpoints := bpoints * 1.8 ;
19889: LD_ADDR_VAR 0 10
19893: PUSH
19894: LD_VAR 0 10
19898: PUSH
19899: LD_REAL  1.80000000000000E+0000
19902: MUL
19903: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
19904: LD_VAR 0 6
19908: PPUSH
19909: CALL_OW 257
19913: PUSH
19914: LD_INT 1
19916: PUSH
19917: LD_INT 2
19919: PUSH
19920: LD_INT 3
19922: PUSH
19923: LD_INT 4
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: IN
19932: PUSH
19933: LD_VAR 0 1
19937: PPUSH
19938: LD_INT 51
19940: PPUSH
19941: CALL_OW 321
19945: PUSH
19946: LD_INT 2
19948: EQUAL
19949: AND
19950: IFFALSE 19967
// bpoints := bpoints * 1.2 ;
19952: LD_ADDR_VAR 0 10
19956: PUSH
19957: LD_VAR 0 10
19961: PUSH
19962: LD_REAL  1.20000000000000E+0000
19965: MUL
19966: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
19967: LD_VAR 0 6
19971: PPUSH
19972: CALL_OW 257
19976: PUSH
19977: LD_INT 5
19979: PUSH
19980: LD_INT 7
19982: PUSH
19983: LD_INT 9
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: LIST
19990: IN
19991: PUSH
19992: LD_VAR 0 1
19996: PPUSH
19997: LD_INT 52
19999: PPUSH
20000: CALL_OW 321
20004: PUSH
20005: LD_INT 2
20007: EQUAL
20008: AND
20009: IFFALSE 20026
// bpoints := bpoints * 1.5 ;
20011: LD_ADDR_VAR 0 10
20015: PUSH
20016: LD_VAR 0 10
20020: PUSH
20021: LD_REAL  1.50000000000000E+0000
20024: MUL
20025: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
20026: LD_VAR 0 1
20030: PPUSH
20031: LD_INT 66
20033: PPUSH
20034: CALL_OW 321
20038: PUSH
20039: LD_INT 2
20041: EQUAL
20042: IFFALSE 20059
// bpoints := bpoints * 1.1 ;
20044: LD_ADDR_VAR 0 10
20048: PUSH
20049: LD_VAR 0 10
20053: PUSH
20054: LD_REAL  1.10000000000000E+0000
20057: MUL
20058: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
20059: LD_ADDR_VAR 0 10
20063: PUSH
20064: LD_VAR 0 10
20068: PUSH
20069: LD_VAR 0 6
20073: PPUSH
20074: LD_INT 1
20076: PPUSH
20077: CALL_OW 259
20081: PUSH
20082: LD_REAL  1.15000000000000E+0000
20085: MUL
20086: MUL
20087: ST_TO_ADDR
// end ; unit_vehicle :
20088: GO 20912
20090: LD_INT 2
20092: DOUBLE
20093: EQUAL
20094: IFTRUE 20098
20096: GO 20900
20098: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
20099: LD_VAR 0 6
20103: PPUSH
20104: CALL_OW 264
20108: PUSH
20109: LD_INT 2
20111: PUSH
20112: LD_INT 42
20114: PUSH
20115: LD_INT 24
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: LIST
20122: IN
20123: IFFALSE 20144
// points := [ 25 , 5 , 3 ] ;
20125: LD_ADDR_VAR 0 9
20129: PUSH
20130: LD_INT 25
20132: PUSH
20133: LD_INT 5
20135: PUSH
20136: LD_INT 3
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: LIST
20143: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
20144: LD_VAR 0 6
20148: PPUSH
20149: CALL_OW 264
20153: PUSH
20154: LD_INT 4
20156: PUSH
20157: LD_INT 43
20159: PUSH
20160: LD_INT 25
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: LIST
20167: IN
20168: IFFALSE 20189
// points := [ 40 , 15 , 5 ] ;
20170: LD_ADDR_VAR 0 9
20174: PUSH
20175: LD_INT 40
20177: PUSH
20178: LD_INT 15
20180: PUSH
20181: LD_INT 5
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: LIST
20188: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
20189: LD_VAR 0 6
20193: PPUSH
20194: CALL_OW 264
20198: PUSH
20199: LD_INT 3
20201: PUSH
20202: LD_INT 23
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: IN
20209: IFFALSE 20230
// points := [ 7 , 25 , 8 ] ;
20211: LD_ADDR_VAR 0 9
20215: PUSH
20216: LD_INT 7
20218: PUSH
20219: LD_INT 25
20221: PUSH
20222: LD_INT 8
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: LIST
20229: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
20230: LD_VAR 0 6
20234: PPUSH
20235: CALL_OW 264
20239: PUSH
20240: LD_INT 5
20242: PUSH
20243: LD_INT 27
20245: PUSH
20246: LD_INT 44
20248: PUSH
20249: EMPTY
20250: LIST
20251: LIST
20252: LIST
20253: IN
20254: IFFALSE 20275
// points := [ 14 , 50 , 16 ] ;
20256: LD_ADDR_VAR 0 9
20260: PUSH
20261: LD_INT 14
20263: PUSH
20264: LD_INT 50
20266: PUSH
20267: LD_INT 16
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: LIST
20274: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
20275: LD_VAR 0 6
20279: PPUSH
20280: CALL_OW 264
20284: PUSH
20285: LD_INT 6
20287: PUSH
20288: LD_INT 46
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: IN
20295: IFFALSE 20316
// points := [ 32 , 120 , 70 ] ;
20297: LD_ADDR_VAR 0 9
20301: PUSH
20302: LD_INT 32
20304: PUSH
20305: LD_INT 120
20307: PUSH
20308: LD_INT 70
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: LIST
20315: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
20316: LD_VAR 0 6
20320: PPUSH
20321: CALL_OW 264
20325: PUSH
20326: LD_INT 7
20328: PUSH
20329: LD_INT 28
20331: PUSH
20332: LD_INT 45
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: LIST
20339: IN
20340: IFFALSE 20361
// points := [ 35 , 20 , 45 ] ;
20342: LD_ADDR_VAR 0 9
20346: PUSH
20347: LD_INT 35
20349: PUSH
20350: LD_INT 20
20352: PUSH
20353: LD_INT 45
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: LIST
20360: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
20361: LD_VAR 0 6
20365: PPUSH
20366: CALL_OW 264
20370: PUSH
20371: LD_INT 47
20373: PUSH
20374: EMPTY
20375: LIST
20376: IN
20377: IFFALSE 20398
// points := [ 67 , 45 , 75 ] ;
20379: LD_ADDR_VAR 0 9
20383: PUSH
20384: LD_INT 67
20386: PUSH
20387: LD_INT 45
20389: PUSH
20390: LD_INT 75
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: LIST
20397: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
20398: LD_VAR 0 6
20402: PPUSH
20403: CALL_OW 264
20407: PUSH
20408: LD_INT 26
20410: PUSH
20411: EMPTY
20412: LIST
20413: IN
20414: IFFALSE 20435
// points := [ 120 , 30 , 80 ] ;
20416: LD_ADDR_VAR 0 9
20420: PUSH
20421: LD_INT 120
20423: PUSH
20424: LD_INT 30
20426: PUSH
20427: LD_INT 80
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: LIST
20434: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
20435: LD_VAR 0 6
20439: PPUSH
20440: CALL_OW 264
20444: PUSH
20445: LD_INT 22
20447: PUSH
20448: EMPTY
20449: LIST
20450: IN
20451: IFFALSE 20472
// points := [ 40 , 1 , 1 ] ;
20453: LD_ADDR_VAR 0 9
20457: PUSH
20458: LD_INT 40
20460: PUSH
20461: LD_INT 1
20463: PUSH
20464: LD_INT 1
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: LIST
20471: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
20472: LD_VAR 0 6
20476: PPUSH
20477: CALL_OW 264
20481: PUSH
20482: LD_INT 29
20484: PUSH
20485: EMPTY
20486: LIST
20487: IN
20488: IFFALSE 20509
// points := [ 70 , 200 , 400 ] ;
20490: LD_ADDR_VAR 0 9
20494: PUSH
20495: LD_INT 70
20497: PUSH
20498: LD_INT 200
20500: PUSH
20501: LD_INT 400
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: LIST
20508: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
20509: LD_VAR 0 6
20513: PPUSH
20514: CALL_OW 264
20518: PUSH
20519: LD_INT 14
20521: PUSH
20522: LD_INT 53
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: IN
20529: IFFALSE 20550
// points := [ 40 , 10 , 20 ] ;
20531: LD_ADDR_VAR 0 9
20535: PUSH
20536: LD_INT 40
20538: PUSH
20539: LD_INT 10
20541: PUSH
20542: LD_INT 20
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: LIST
20549: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
20550: LD_VAR 0 6
20554: PPUSH
20555: CALL_OW 264
20559: PUSH
20560: LD_INT 9
20562: PUSH
20563: EMPTY
20564: LIST
20565: IN
20566: IFFALSE 20587
// points := [ 5 , 70 , 20 ] ;
20568: LD_ADDR_VAR 0 9
20572: PUSH
20573: LD_INT 5
20575: PUSH
20576: LD_INT 70
20578: PUSH
20579: LD_INT 20
20581: PUSH
20582: EMPTY
20583: LIST
20584: LIST
20585: LIST
20586: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
20587: LD_VAR 0 6
20591: PPUSH
20592: CALL_OW 264
20596: PUSH
20597: LD_INT 10
20599: PUSH
20600: EMPTY
20601: LIST
20602: IN
20603: IFFALSE 20624
// points := [ 35 , 110 , 70 ] ;
20605: LD_ADDR_VAR 0 9
20609: PUSH
20610: LD_INT 35
20612: PUSH
20613: LD_INT 110
20615: PUSH
20616: LD_INT 70
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: LIST
20623: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
20624: LD_VAR 0 6
20628: PPUSH
20629: CALL_OW 265
20633: PUSH
20634: LD_INT 25
20636: EQUAL
20637: IFFALSE 20658
// points := [ 80 , 65 , 100 ] ;
20639: LD_ADDR_VAR 0 9
20643: PUSH
20644: LD_INT 80
20646: PUSH
20647: LD_INT 65
20649: PUSH
20650: LD_INT 100
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: LIST
20657: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
20658: LD_VAR 0 6
20662: PPUSH
20663: CALL_OW 263
20667: PUSH
20668: LD_INT 1
20670: EQUAL
20671: IFFALSE 20706
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
20673: LD_ADDR_VAR 0 10
20677: PUSH
20678: LD_VAR 0 10
20682: PUSH
20683: LD_VAR 0 6
20687: PPUSH
20688: CALL_OW 311
20692: PPUSH
20693: LD_INT 3
20695: PPUSH
20696: CALL_OW 259
20700: PUSH
20701: LD_INT 4
20703: MUL
20704: MUL
20705: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
20706: LD_VAR 0 6
20710: PPUSH
20711: CALL_OW 263
20715: PUSH
20716: LD_INT 2
20718: EQUAL
20719: IFFALSE 20770
// begin j := IsControledBy ( i ) ;
20721: LD_ADDR_VAR 0 7
20725: PUSH
20726: LD_VAR 0 6
20730: PPUSH
20731: CALL_OW 312
20735: ST_TO_ADDR
// if j then
20736: LD_VAR 0 7
20740: IFFALSE 20770
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
20742: LD_ADDR_VAR 0 10
20746: PUSH
20747: LD_VAR 0 10
20751: PUSH
20752: LD_VAR 0 7
20756: PPUSH
20757: LD_INT 3
20759: PPUSH
20760: CALL_OW 259
20764: PUSH
20765: LD_INT 3
20767: MUL
20768: MUL
20769: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
20770: LD_VAR 0 6
20774: PPUSH
20775: CALL_OW 264
20779: PUSH
20780: LD_INT 5
20782: PUSH
20783: LD_INT 6
20785: PUSH
20786: LD_INT 46
20788: PUSH
20789: LD_INT 44
20791: PUSH
20792: LD_INT 47
20794: PUSH
20795: LD_INT 45
20797: PUSH
20798: LD_INT 28
20800: PUSH
20801: LD_INT 7
20803: PUSH
20804: LD_INT 27
20806: PUSH
20807: LD_INT 29
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: IN
20822: PUSH
20823: LD_VAR 0 1
20827: PPUSH
20828: LD_INT 52
20830: PPUSH
20831: CALL_OW 321
20835: PUSH
20836: LD_INT 2
20838: EQUAL
20839: AND
20840: IFFALSE 20857
// bpoints := bpoints * 1.2 ;
20842: LD_ADDR_VAR 0 10
20846: PUSH
20847: LD_VAR 0 10
20851: PUSH
20852: LD_REAL  1.20000000000000E+0000
20855: MUL
20856: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
20857: LD_VAR 0 6
20861: PPUSH
20862: CALL_OW 264
20866: PUSH
20867: LD_INT 6
20869: PUSH
20870: LD_INT 46
20872: PUSH
20873: LD_INT 47
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: LIST
20880: IN
20881: IFFALSE 20898
// bpoints := bpoints * 1.2 ;
20883: LD_ADDR_VAR 0 10
20887: PUSH
20888: LD_VAR 0 10
20892: PUSH
20893: LD_REAL  1.20000000000000E+0000
20896: MUL
20897: ST_TO_ADDR
// end ; unit_building :
20898: GO 20912
20900: LD_INT 3
20902: DOUBLE
20903: EQUAL
20904: IFTRUE 20908
20906: GO 20911
20908: POP
// ; end ;
20909: GO 20912
20911: POP
// for j = 1 to 3 do
20912: LD_ADDR_VAR 0 7
20916: PUSH
20917: DOUBLE
20918: LD_INT 1
20920: DEC
20921: ST_TO_ADDR
20922: LD_INT 3
20924: PUSH
20925: FOR_TO
20926: IFFALSE 20979
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
20928: LD_ADDR_VAR 0 5
20932: PUSH
20933: LD_VAR 0 5
20937: PPUSH
20938: LD_VAR 0 7
20942: PPUSH
20943: LD_VAR 0 5
20947: PUSH
20948: LD_VAR 0 7
20952: ARRAY
20953: PUSH
20954: LD_VAR 0 9
20958: PUSH
20959: LD_VAR 0 7
20963: ARRAY
20964: PUSH
20965: LD_VAR 0 10
20969: MUL
20970: PLUS
20971: PPUSH
20972: CALL_OW 1
20976: ST_TO_ADDR
20977: GO 20925
20979: POP
20980: POP
// end ;
20981: GO 19464
20983: POP
20984: POP
// result := Replace ( result , 4 , tmp ) ;
20985: LD_ADDR_VAR 0 5
20989: PUSH
20990: LD_VAR 0 5
20994: PPUSH
20995: LD_INT 4
20997: PPUSH
20998: LD_VAR 0 8
21002: PPUSH
21003: CALL_OW 1
21007: ST_TO_ADDR
// end ;
21008: LD_VAR 0 5
21012: RET
// export function DangerAtRange ( unit , range ) ; begin
21013: LD_INT 0
21015: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
21016: LD_ADDR_VAR 0 3
21020: PUSH
21021: LD_VAR 0 1
21025: PPUSH
21026: CALL_OW 255
21030: PPUSH
21031: LD_VAR 0 1
21035: PPUSH
21036: CALL_OW 250
21040: PPUSH
21041: LD_VAR 0 1
21045: PPUSH
21046: CALL_OW 251
21050: PPUSH
21051: LD_VAR 0 2
21055: PPUSH
21056: CALL 19316 0 4
21060: ST_TO_ADDR
// end ;
21061: LD_VAR 0 3
21065: RET
// export function DangerInArea ( side , area ) ; begin
21066: LD_INT 0
21068: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
21069: LD_ADDR_VAR 0 3
21073: PUSH
21074: LD_VAR 0 2
21078: PPUSH
21079: LD_INT 81
21081: PUSH
21082: LD_VAR 0 1
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PPUSH
21091: CALL_OW 70
21095: ST_TO_ADDR
// end ;
21096: LD_VAR 0 3
21100: RET
// export function IsExtension ( b ) ; begin
21101: LD_INT 0
21103: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
21104: LD_ADDR_VAR 0 2
21108: PUSH
21109: LD_VAR 0 1
21113: PUSH
21114: LD_INT 23
21116: PUSH
21117: LD_INT 20
21119: PUSH
21120: LD_INT 22
21122: PUSH
21123: LD_INT 17
21125: PUSH
21126: LD_INT 24
21128: PUSH
21129: LD_INT 21
21131: PUSH
21132: LD_INT 19
21134: PUSH
21135: LD_INT 16
21137: PUSH
21138: LD_INT 25
21140: PUSH
21141: LD_INT 18
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: IN
21156: ST_TO_ADDR
// end ;
21157: LD_VAR 0 2
21161: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
21162: LD_INT 0
21164: PPUSH
21165: PPUSH
21166: PPUSH
// result := [ ] ;
21167: LD_ADDR_VAR 0 3
21171: PUSH
21172: EMPTY
21173: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
21174: LD_ADDR_VAR 0 4
21178: PUSH
21179: LD_VAR 0 2
21183: PPUSH
21184: LD_INT 21
21186: PUSH
21187: LD_INT 3
21189: PUSH
21190: EMPTY
21191: LIST
21192: LIST
21193: PPUSH
21194: CALL_OW 70
21198: ST_TO_ADDR
// if not tmp then
21199: LD_VAR 0 4
21203: NOT
21204: IFFALSE 21208
// exit ;
21206: GO 21266
// for i in tmp do
21208: LD_ADDR_VAR 0 5
21212: PUSH
21213: LD_VAR 0 4
21217: PUSH
21218: FOR_IN
21219: IFFALSE 21254
// if GetBase ( i ) <> base then
21221: LD_VAR 0 5
21225: PPUSH
21226: CALL_OW 274
21230: PUSH
21231: LD_VAR 0 1
21235: NONEQUAL
21236: IFFALSE 21252
// ComLinkToBase ( base , i ) ;
21238: LD_VAR 0 1
21242: PPUSH
21243: LD_VAR 0 5
21247: PPUSH
21248: CALL_OW 169
21252: GO 21218
21254: POP
21255: POP
// result := tmp ;
21256: LD_ADDR_VAR 0 3
21260: PUSH
21261: LD_VAR 0 4
21265: ST_TO_ADDR
// end ;
21266: LD_VAR 0 3
21270: RET
// export function ComComplete ( unit , b ) ; var i ; begin
21271: LD_INT 0
21273: PPUSH
21274: PPUSH
// if BuildingStatus ( b ) = bs_build then
21275: LD_VAR 0 2
21279: PPUSH
21280: CALL_OW 461
21284: PUSH
21285: LD_INT 1
21287: EQUAL
21288: IFFALSE 21348
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
21290: LD_VAR 0 1
21294: PPUSH
21295: LD_STRING h
21297: PUSH
21298: LD_VAR 0 2
21302: PPUSH
21303: CALL_OW 250
21307: PUSH
21308: LD_VAR 0 2
21312: PPUSH
21313: CALL_OW 251
21317: PUSH
21318: LD_VAR 0 2
21322: PUSH
21323: LD_INT 0
21325: PUSH
21326: LD_INT 0
21328: PUSH
21329: LD_INT 0
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: PUSH
21341: EMPTY
21342: LIST
21343: PPUSH
21344: CALL_OW 446
// end ;
21348: LD_VAR 0 3
21352: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
21353: LD_INT 0
21355: PPUSH
21356: PPUSH
21357: PPUSH
21358: PPUSH
21359: PPUSH
21360: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
21361: LD_VAR 0 1
21365: NOT
21366: PUSH
21367: LD_VAR 0 1
21371: PPUSH
21372: CALL_OW 263
21376: PUSH
21377: LD_INT 2
21379: EQUAL
21380: NOT
21381: OR
21382: IFFALSE 21386
// exit ;
21384: GO 21702
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
21386: LD_ADDR_VAR 0 6
21390: PUSH
21391: LD_INT 22
21393: PUSH
21394: LD_VAR 0 1
21398: PPUSH
21399: CALL_OW 255
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PUSH
21408: LD_INT 2
21410: PUSH
21411: LD_INT 30
21413: PUSH
21414: LD_INT 36
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 34
21423: PUSH
21424: LD_INT 31
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: LIST
21435: PUSH
21436: EMPTY
21437: LIST
21438: LIST
21439: PPUSH
21440: CALL_OW 69
21444: ST_TO_ADDR
// if not tmp then
21445: LD_VAR 0 6
21449: NOT
21450: IFFALSE 21454
// exit ;
21452: GO 21702
// result := [ ] ;
21454: LD_ADDR_VAR 0 2
21458: PUSH
21459: EMPTY
21460: ST_TO_ADDR
// for i in tmp do
21461: LD_ADDR_VAR 0 3
21465: PUSH
21466: LD_VAR 0 6
21470: PUSH
21471: FOR_IN
21472: IFFALSE 21543
// begin t := UnitsInside ( i ) ;
21474: LD_ADDR_VAR 0 4
21478: PUSH
21479: LD_VAR 0 3
21483: PPUSH
21484: CALL_OW 313
21488: ST_TO_ADDR
// if t then
21489: LD_VAR 0 4
21493: IFFALSE 21541
// for j in t do
21495: LD_ADDR_VAR 0 7
21499: PUSH
21500: LD_VAR 0 4
21504: PUSH
21505: FOR_IN
21506: IFFALSE 21539
// result := Insert ( result , result + 1 , j ) ;
21508: LD_ADDR_VAR 0 2
21512: PUSH
21513: LD_VAR 0 2
21517: PPUSH
21518: LD_VAR 0 2
21522: PUSH
21523: LD_INT 1
21525: PLUS
21526: PPUSH
21527: LD_VAR 0 7
21531: PPUSH
21532: CALL_OW 2
21536: ST_TO_ADDR
21537: GO 21505
21539: POP
21540: POP
// end ;
21541: GO 21471
21543: POP
21544: POP
// if not result then
21545: LD_VAR 0 2
21549: NOT
21550: IFFALSE 21554
// exit ;
21552: GO 21702
// mech := result [ 1 ] ;
21554: LD_ADDR_VAR 0 5
21558: PUSH
21559: LD_VAR 0 2
21563: PUSH
21564: LD_INT 1
21566: ARRAY
21567: ST_TO_ADDR
// if result > 1 then
21568: LD_VAR 0 2
21572: PUSH
21573: LD_INT 1
21575: GREATER
21576: IFFALSE 21688
// for i = 2 to result do
21578: LD_ADDR_VAR 0 3
21582: PUSH
21583: DOUBLE
21584: LD_INT 2
21586: DEC
21587: ST_TO_ADDR
21588: LD_VAR 0 2
21592: PUSH
21593: FOR_TO
21594: IFFALSE 21686
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
21596: LD_ADDR_VAR 0 4
21600: PUSH
21601: LD_VAR 0 2
21605: PUSH
21606: LD_VAR 0 3
21610: ARRAY
21611: PPUSH
21612: LD_INT 3
21614: PPUSH
21615: CALL_OW 259
21619: PUSH
21620: LD_VAR 0 2
21624: PUSH
21625: LD_VAR 0 3
21629: ARRAY
21630: PPUSH
21631: CALL_OW 432
21635: MINUS
21636: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
21637: LD_VAR 0 4
21641: PUSH
21642: LD_VAR 0 5
21646: PPUSH
21647: LD_INT 3
21649: PPUSH
21650: CALL_OW 259
21654: PUSH
21655: LD_VAR 0 5
21659: PPUSH
21660: CALL_OW 432
21664: MINUS
21665: GREATEREQUAL
21666: IFFALSE 21684
// mech := result [ i ] ;
21668: LD_ADDR_VAR 0 5
21672: PUSH
21673: LD_VAR 0 2
21677: PUSH
21678: LD_VAR 0 3
21682: ARRAY
21683: ST_TO_ADDR
// end ;
21684: GO 21593
21686: POP
21687: POP
// ComLinkTo ( vehicle , mech ) ;
21688: LD_VAR 0 1
21692: PPUSH
21693: LD_VAR 0 5
21697: PPUSH
21698: CALL_OW 135
// end ;
21702: LD_VAR 0 2
21706: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
21707: LD_INT 0
21709: PPUSH
21710: PPUSH
21711: PPUSH
21712: PPUSH
21713: PPUSH
21714: PPUSH
21715: PPUSH
21716: PPUSH
21717: PPUSH
21718: PPUSH
21719: PPUSH
21720: PPUSH
21721: PPUSH
// result := [ ] ;
21722: LD_ADDR_VAR 0 7
21726: PUSH
21727: EMPTY
21728: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
21729: LD_VAR 0 1
21733: PPUSH
21734: CALL_OW 266
21738: PUSH
21739: LD_INT 0
21741: PUSH
21742: LD_INT 1
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: IN
21749: NOT
21750: IFFALSE 21754
// exit ;
21752: GO 23385
// if name then
21754: LD_VAR 0 3
21758: IFFALSE 21774
// SetBName ( base_dep , name ) ;
21760: LD_VAR 0 1
21764: PPUSH
21765: LD_VAR 0 3
21769: PPUSH
21770: CALL_OW 500
// base := GetBase ( base_dep ) ;
21774: LD_ADDR_VAR 0 15
21778: PUSH
21779: LD_VAR 0 1
21783: PPUSH
21784: CALL_OW 274
21788: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
21789: LD_ADDR_VAR 0 16
21793: PUSH
21794: LD_VAR 0 1
21798: PPUSH
21799: CALL_OW 255
21803: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
21804: LD_ADDR_VAR 0 17
21808: PUSH
21809: LD_VAR 0 1
21813: PPUSH
21814: CALL_OW 248
21818: ST_TO_ADDR
// if sources then
21819: LD_VAR 0 5
21823: IFFALSE 21870
// for i = 1 to 3 do
21825: LD_ADDR_VAR 0 8
21829: PUSH
21830: DOUBLE
21831: LD_INT 1
21833: DEC
21834: ST_TO_ADDR
21835: LD_INT 3
21837: PUSH
21838: FOR_TO
21839: IFFALSE 21868
// AddResourceType ( base , i , sources [ i ] ) ;
21841: LD_VAR 0 15
21845: PPUSH
21846: LD_VAR 0 8
21850: PPUSH
21851: LD_VAR 0 5
21855: PUSH
21856: LD_VAR 0 8
21860: ARRAY
21861: PPUSH
21862: CALL_OW 276
21866: GO 21838
21868: POP
21869: POP
// buildings := GetBaseBuildings ( base , area ) ;
21870: LD_ADDR_VAR 0 18
21874: PUSH
21875: LD_VAR 0 15
21879: PPUSH
21880: LD_VAR 0 2
21884: PPUSH
21885: CALL 21162 0 2
21889: ST_TO_ADDR
// InitHc ;
21890: CALL_OW 19
// InitUc ;
21894: CALL_OW 18
// uc_side := side ;
21898: LD_ADDR_OWVAR 20
21902: PUSH
21903: LD_VAR 0 16
21907: ST_TO_ADDR
// uc_nation := nation ;
21908: LD_ADDR_OWVAR 21
21912: PUSH
21913: LD_VAR 0 17
21917: ST_TO_ADDR
// if buildings then
21918: LD_VAR 0 18
21922: IFFALSE 23244
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
21924: LD_ADDR_VAR 0 19
21928: PUSH
21929: LD_VAR 0 18
21933: PPUSH
21934: LD_INT 2
21936: PUSH
21937: LD_INT 30
21939: PUSH
21940: LD_INT 29
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: PUSH
21947: LD_INT 30
21949: PUSH
21950: LD_INT 30
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: LIST
21961: PPUSH
21962: CALL_OW 72
21966: ST_TO_ADDR
// if tmp then
21967: LD_VAR 0 19
21971: IFFALSE 22019
// for i in tmp do
21973: LD_ADDR_VAR 0 8
21977: PUSH
21978: LD_VAR 0 19
21982: PUSH
21983: FOR_IN
21984: IFFALSE 22017
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
21986: LD_VAR 0 8
21990: PPUSH
21991: CALL_OW 250
21995: PPUSH
21996: LD_VAR 0 8
22000: PPUSH
22001: CALL_OW 251
22005: PPUSH
22006: LD_VAR 0 16
22010: PPUSH
22011: CALL_OW 441
22015: GO 21983
22017: POP
22018: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
22019: LD_VAR 0 18
22023: PPUSH
22024: LD_INT 2
22026: PUSH
22027: LD_INT 30
22029: PUSH
22030: LD_INT 32
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: PUSH
22037: LD_INT 30
22039: PUSH
22040: LD_INT 33
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: LIST
22051: PPUSH
22052: CALL_OW 72
22056: IFFALSE 22144
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
22058: LD_ADDR_VAR 0 8
22062: PUSH
22063: LD_VAR 0 18
22067: PPUSH
22068: LD_INT 2
22070: PUSH
22071: LD_INT 30
22073: PUSH
22074: LD_INT 32
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PUSH
22081: LD_INT 30
22083: PUSH
22084: LD_INT 33
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: LIST
22095: PPUSH
22096: CALL_OW 72
22100: PUSH
22101: FOR_IN
22102: IFFALSE 22142
// begin if not GetBWeapon ( i ) then
22104: LD_VAR 0 8
22108: PPUSH
22109: CALL_OW 269
22113: NOT
22114: IFFALSE 22140
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
22116: LD_VAR 0 8
22120: PPUSH
22121: LD_VAR 0 8
22125: PPUSH
22126: LD_VAR 0 2
22130: PPUSH
22131: CALL 23390 0 2
22135: PPUSH
22136: CALL_OW 431
// end ;
22140: GO 22101
22142: POP
22143: POP
// end ; for i = 1 to personel do
22144: LD_ADDR_VAR 0 8
22148: PUSH
22149: DOUBLE
22150: LD_INT 1
22152: DEC
22153: ST_TO_ADDR
22154: LD_VAR 0 6
22158: PUSH
22159: FOR_TO
22160: IFFALSE 23224
// begin if i > 4 then
22162: LD_VAR 0 8
22166: PUSH
22167: LD_INT 4
22169: GREATER
22170: IFFALSE 22174
// break ;
22172: GO 23224
// case i of 1 :
22174: LD_VAR 0 8
22178: PUSH
22179: LD_INT 1
22181: DOUBLE
22182: EQUAL
22183: IFTRUE 22187
22185: GO 22267
22187: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
22188: LD_ADDR_VAR 0 12
22192: PUSH
22193: LD_VAR 0 18
22197: PPUSH
22198: LD_INT 22
22200: PUSH
22201: LD_VAR 0 16
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 58
22212: PUSH
22213: EMPTY
22214: LIST
22215: PUSH
22216: LD_INT 2
22218: PUSH
22219: LD_INT 30
22221: PUSH
22222: LD_INT 32
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: PUSH
22229: LD_INT 30
22231: PUSH
22232: LD_INT 4
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PUSH
22239: LD_INT 30
22241: PUSH
22242: LD_INT 5
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: LIST
22259: PPUSH
22260: CALL_OW 72
22264: ST_TO_ADDR
22265: GO 22489
22267: LD_INT 2
22269: DOUBLE
22270: EQUAL
22271: IFTRUE 22275
22273: GO 22337
22275: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
22276: LD_ADDR_VAR 0 12
22280: PUSH
22281: LD_VAR 0 18
22285: PPUSH
22286: LD_INT 22
22288: PUSH
22289: LD_VAR 0 16
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: LD_INT 2
22300: PUSH
22301: LD_INT 30
22303: PUSH
22304: LD_INT 0
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: PUSH
22311: LD_INT 30
22313: PUSH
22314: LD_INT 1
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: LIST
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PPUSH
22330: CALL_OW 72
22334: ST_TO_ADDR
22335: GO 22489
22337: LD_INT 3
22339: DOUBLE
22340: EQUAL
22341: IFTRUE 22345
22343: GO 22407
22345: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
22346: LD_ADDR_VAR 0 12
22350: PUSH
22351: LD_VAR 0 18
22355: PPUSH
22356: LD_INT 22
22358: PUSH
22359: LD_VAR 0 16
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: PUSH
22368: LD_INT 2
22370: PUSH
22371: LD_INT 30
22373: PUSH
22374: LD_INT 2
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: PUSH
22381: LD_INT 30
22383: PUSH
22384: LD_INT 3
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: LIST
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PPUSH
22400: CALL_OW 72
22404: ST_TO_ADDR
22405: GO 22489
22407: LD_INT 4
22409: DOUBLE
22410: EQUAL
22411: IFTRUE 22415
22413: GO 22488
22415: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
22416: LD_ADDR_VAR 0 12
22420: PUSH
22421: LD_VAR 0 18
22425: PPUSH
22426: LD_INT 22
22428: PUSH
22429: LD_VAR 0 16
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: LD_INT 2
22440: PUSH
22441: LD_INT 30
22443: PUSH
22444: LD_INT 6
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: PUSH
22451: LD_INT 30
22453: PUSH
22454: LD_INT 7
22456: PUSH
22457: EMPTY
22458: LIST
22459: LIST
22460: PUSH
22461: LD_INT 30
22463: PUSH
22464: LD_INT 8
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PPUSH
22481: CALL_OW 72
22485: ST_TO_ADDR
22486: GO 22489
22488: POP
// if i = 1 then
22489: LD_VAR 0 8
22493: PUSH
22494: LD_INT 1
22496: EQUAL
22497: IFFALSE 22608
// begin tmp := [ ] ;
22499: LD_ADDR_VAR 0 19
22503: PUSH
22504: EMPTY
22505: ST_TO_ADDR
// for j in f do
22506: LD_ADDR_VAR 0 9
22510: PUSH
22511: LD_VAR 0 12
22515: PUSH
22516: FOR_IN
22517: IFFALSE 22590
// if GetBType ( j ) = b_bunker then
22519: LD_VAR 0 9
22523: PPUSH
22524: CALL_OW 266
22528: PUSH
22529: LD_INT 32
22531: EQUAL
22532: IFFALSE 22559
// tmp := Insert ( tmp , 1 , j ) else
22534: LD_ADDR_VAR 0 19
22538: PUSH
22539: LD_VAR 0 19
22543: PPUSH
22544: LD_INT 1
22546: PPUSH
22547: LD_VAR 0 9
22551: PPUSH
22552: CALL_OW 2
22556: ST_TO_ADDR
22557: GO 22588
// tmp := Insert ( tmp , tmp + 1 , j ) ;
22559: LD_ADDR_VAR 0 19
22563: PUSH
22564: LD_VAR 0 19
22568: PPUSH
22569: LD_VAR 0 19
22573: PUSH
22574: LD_INT 1
22576: PLUS
22577: PPUSH
22578: LD_VAR 0 9
22582: PPUSH
22583: CALL_OW 2
22587: ST_TO_ADDR
22588: GO 22516
22590: POP
22591: POP
// if tmp then
22592: LD_VAR 0 19
22596: IFFALSE 22608
// f := tmp ;
22598: LD_ADDR_VAR 0 12
22602: PUSH
22603: LD_VAR 0 19
22607: ST_TO_ADDR
// end ; x := personel [ i ] ;
22608: LD_ADDR_VAR 0 13
22612: PUSH
22613: LD_VAR 0 6
22617: PUSH
22618: LD_VAR 0 8
22622: ARRAY
22623: ST_TO_ADDR
// if x = - 1 then
22624: LD_VAR 0 13
22628: PUSH
22629: LD_INT 1
22631: NEG
22632: EQUAL
22633: IFFALSE 22842
// begin for j in f do
22635: LD_ADDR_VAR 0 9
22639: PUSH
22640: LD_VAR 0 12
22644: PUSH
22645: FOR_IN
22646: IFFALSE 22838
// repeat InitHc ;
22648: CALL_OW 19
// if GetBType ( j ) = b_barracks then
22652: LD_VAR 0 9
22656: PPUSH
22657: CALL_OW 266
22661: PUSH
22662: LD_INT 5
22664: EQUAL
22665: IFFALSE 22735
// begin if UnitsInside ( j ) < 3 then
22667: LD_VAR 0 9
22671: PPUSH
22672: CALL_OW 313
22676: PUSH
22677: LD_INT 3
22679: LESS
22680: IFFALSE 22716
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22682: LD_INT 0
22684: PPUSH
22685: LD_INT 5
22687: PUSH
22688: LD_INT 8
22690: PUSH
22691: LD_INT 9
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: LIST
22698: PUSH
22699: LD_VAR 0 17
22703: ARRAY
22704: PPUSH
22705: LD_VAR 0 4
22709: PPUSH
22710: CALL_OW 380
22714: GO 22733
// PrepareHuman ( false , i , skill ) ;
22716: LD_INT 0
22718: PPUSH
22719: LD_VAR 0 8
22723: PPUSH
22724: LD_VAR 0 4
22728: PPUSH
22729: CALL_OW 380
// end else
22733: GO 22752
// PrepareHuman ( false , i , skill ) ;
22735: LD_INT 0
22737: PPUSH
22738: LD_VAR 0 8
22742: PPUSH
22743: LD_VAR 0 4
22747: PPUSH
22748: CALL_OW 380
// un := CreateHuman ;
22752: LD_ADDR_VAR 0 14
22756: PUSH
22757: CALL_OW 44
22761: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22762: LD_ADDR_VAR 0 7
22766: PUSH
22767: LD_VAR 0 7
22771: PPUSH
22772: LD_INT 1
22774: PPUSH
22775: LD_VAR 0 14
22779: PPUSH
22780: CALL_OW 2
22784: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
22785: LD_VAR 0 14
22789: PPUSH
22790: LD_VAR 0 9
22794: PPUSH
22795: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
22799: LD_VAR 0 9
22803: PPUSH
22804: CALL_OW 313
22808: PUSH
22809: LD_INT 6
22811: EQUAL
22812: PUSH
22813: LD_VAR 0 9
22817: PPUSH
22818: CALL_OW 266
22822: PUSH
22823: LD_INT 32
22825: PUSH
22826: LD_INT 31
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: IN
22833: OR
22834: IFFALSE 22648
22836: GO 22645
22838: POP
22839: POP
// end else
22840: GO 23222
// for j = 1 to x do
22842: LD_ADDR_VAR 0 9
22846: PUSH
22847: DOUBLE
22848: LD_INT 1
22850: DEC
22851: ST_TO_ADDR
22852: LD_VAR 0 13
22856: PUSH
22857: FOR_TO
22858: IFFALSE 23220
// begin InitHc ;
22860: CALL_OW 19
// if not f then
22864: LD_VAR 0 12
22868: NOT
22869: IFFALSE 22958
// begin PrepareHuman ( false , i , skill ) ;
22871: LD_INT 0
22873: PPUSH
22874: LD_VAR 0 8
22878: PPUSH
22879: LD_VAR 0 4
22883: PPUSH
22884: CALL_OW 380
// un := CreateHuman ;
22888: LD_ADDR_VAR 0 14
22892: PUSH
22893: CALL_OW 44
22897: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22898: LD_ADDR_VAR 0 7
22902: PUSH
22903: LD_VAR 0 7
22907: PPUSH
22908: LD_INT 1
22910: PPUSH
22911: LD_VAR 0 14
22915: PPUSH
22916: CALL_OW 2
22920: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22921: LD_VAR 0 14
22925: PPUSH
22926: LD_VAR 0 1
22930: PPUSH
22931: CALL_OW 250
22935: PPUSH
22936: LD_VAR 0 1
22940: PPUSH
22941: CALL_OW 251
22945: PPUSH
22946: LD_INT 10
22948: PPUSH
22949: LD_INT 0
22951: PPUSH
22952: CALL_OW 50
// continue ;
22956: GO 22857
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
22958: LD_VAR 0 12
22962: PUSH
22963: LD_INT 1
22965: ARRAY
22966: PPUSH
22967: CALL_OW 313
22971: PUSH
22972: LD_VAR 0 12
22976: PUSH
22977: LD_INT 1
22979: ARRAY
22980: PPUSH
22981: CALL_OW 266
22985: PUSH
22986: LD_INT 32
22988: PUSH
22989: LD_INT 31
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: IN
22996: AND
22997: PUSH
22998: LD_VAR 0 12
23002: PUSH
23003: LD_INT 1
23005: ARRAY
23006: PPUSH
23007: CALL_OW 313
23011: PUSH
23012: LD_INT 6
23014: EQUAL
23015: OR
23016: IFFALSE 23036
// f := Delete ( f , 1 ) ;
23018: LD_ADDR_VAR 0 12
23022: PUSH
23023: LD_VAR 0 12
23027: PPUSH
23028: LD_INT 1
23030: PPUSH
23031: CALL_OW 3
23035: ST_TO_ADDR
// if not f then
23036: LD_VAR 0 12
23040: NOT
23041: IFFALSE 23059
// begin x := x + 2 ;
23043: LD_ADDR_VAR 0 13
23047: PUSH
23048: LD_VAR 0 13
23052: PUSH
23053: LD_INT 2
23055: PLUS
23056: ST_TO_ADDR
// continue ;
23057: GO 22857
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
23059: LD_VAR 0 12
23063: PUSH
23064: LD_INT 1
23066: ARRAY
23067: PPUSH
23068: CALL_OW 266
23072: PUSH
23073: LD_INT 5
23075: EQUAL
23076: IFFALSE 23150
// begin if UnitsInside ( f [ 1 ] ) < 3 then
23078: LD_VAR 0 12
23082: PUSH
23083: LD_INT 1
23085: ARRAY
23086: PPUSH
23087: CALL_OW 313
23091: PUSH
23092: LD_INT 3
23094: LESS
23095: IFFALSE 23131
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
23097: LD_INT 0
23099: PPUSH
23100: LD_INT 5
23102: PUSH
23103: LD_INT 8
23105: PUSH
23106: LD_INT 9
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: LIST
23113: PUSH
23114: LD_VAR 0 17
23118: ARRAY
23119: PPUSH
23120: LD_VAR 0 4
23124: PPUSH
23125: CALL_OW 380
23129: GO 23148
// PrepareHuman ( false , i , skill ) ;
23131: LD_INT 0
23133: PPUSH
23134: LD_VAR 0 8
23138: PPUSH
23139: LD_VAR 0 4
23143: PPUSH
23144: CALL_OW 380
// end else
23148: GO 23167
// PrepareHuman ( false , i , skill ) ;
23150: LD_INT 0
23152: PPUSH
23153: LD_VAR 0 8
23157: PPUSH
23158: LD_VAR 0 4
23162: PPUSH
23163: CALL_OW 380
// un := CreateHuman ;
23167: LD_ADDR_VAR 0 14
23171: PUSH
23172: CALL_OW 44
23176: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23177: LD_ADDR_VAR 0 7
23181: PUSH
23182: LD_VAR 0 7
23186: PPUSH
23187: LD_INT 1
23189: PPUSH
23190: LD_VAR 0 14
23194: PPUSH
23195: CALL_OW 2
23199: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
23200: LD_VAR 0 14
23204: PPUSH
23205: LD_VAR 0 12
23209: PUSH
23210: LD_INT 1
23212: ARRAY
23213: PPUSH
23214: CALL_OW 52
// end ;
23218: GO 22857
23220: POP
23221: POP
// end ;
23222: GO 22159
23224: POP
23225: POP
// result := result ^ buildings ;
23226: LD_ADDR_VAR 0 7
23230: PUSH
23231: LD_VAR 0 7
23235: PUSH
23236: LD_VAR 0 18
23240: ADD
23241: ST_TO_ADDR
// end else
23242: GO 23385
// begin for i = 1 to personel do
23244: LD_ADDR_VAR 0 8
23248: PUSH
23249: DOUBLE
23250: LD_INT 1
23252: DEC
23253: ST_TO_ADDR
23254: LD_VAR 0 6
23258: PUSH
23259: FOR_TO
23260: IFFALSE 23383
// begin if i > 4 then
23262: LD_VAR 0 8
23266: PUSH
23267: LD_INT 4
23269: GREATER
23270: IFFALSE 23274
// break ;
23272: GO 23383
// x := personel [ i ] ;
23274: LD_ADDR_VAR 0 13
23278: PUSH
23279: LD_VAR 0 6
23283: PUSH
23284: LD_VAR 0 8
23288: ARRAY
23289: ST_TO_ADDR
// if x = - 1 then
23290: LD_VAR 0 13
23294: PUSH
23295: LD_INT 1
23297: NEG
23298: EQUAL
23299: IFFALSE 23303
// continue ;
23301: GO 23259
// PrepareHuman ( false , i , skill ) ;
23303: LD_INT 0
23305: PPUSH
23306: LD_VAR 0 8
23310: PPUSH
23311: LD_VAR 0 4
23315: PPUSH
23316: CALL_OW 380
// un := CreateHuman ;
23320: LD_ADDR_VAR 0 14
23324: PUSH
23325: CALL_OW 44
23329: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
23330: LD_VAR 0 14
23334: PPUSH
23335: LD_VAR 0 1
23339: PPUSH
23340: CALL_OW 250
23344: PPUSH
23345: LD_VAR 0 1
23349: PPUSH
23350: CALL_OW 251
23354: PPUSH
23355: LD_INT 10
23357: PPUSH
23358: LD_INT 0
23360: PPUSH
23361: CALL_OW 50
// result := result ^ un ;
23365: LD_ADDR_VAR 0 7
23369: PUSH
23370: LD_VAR 0 7
23374: PUSH
23375: LD_VAR 0 14
23379: ADD
23380: ST_TO_ADDR
// end ;
23381: GO 23259
23383: POP
23384: POP
// end ; end ;
23385: LD_VAR 0 7
23389: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
23390: LD_INT 0
23392: PPUSH
23393: PPUSH
23394: PPUSH
23395: PPUSH
23396: PPUSH
23397: PPUSH
23398: PPUSH
23399: PPUSH
23400: PPUSH
23401: PPUSH
23402: PPUSH
23403: PPUSH
23404: PPUSH
23405: PPUSH
23406: PPUSH
23407: PPUSH
// result := false ;
23408: LD_ADDR_VAR 0 3
23412: PUSH
23413: LD_INT 0
23415: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
23416: LD_VAR 0 1
23420: NOT
23421: PUSH
23422: LD_VAR 0 1
23426: PPUSH
23427: CALL_OW 266
23431: PUSH
23432: LD_INT 32
23434: PUSH
23435: LD_INT 33
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: IN
23442: NOT
23443: OR
23444: IFFALSE 23448
// exit ;
23446: GO 24584
// nat := GetNation ( tower ) ;
23448: LD_ADDR_VAR 0 12
23452: PUSH
23453: LD_VAR 0 1
23457: PPUSH
23458: CALL_OW 248
23462: ST_TO_ADDR
// side := GetSide ( tower ) ;
23463: LD_ADDR_VAR 0 16
23467: PUSH
23468: LD_VAR 0 1
23472: PPUSH
23473: CALL_OW 255
23477: ST_TO_ADDR
// x := GetX ( tower ) ;
23478: LD_ADDR_VAR 0 10
23482: PUSH
23483: LD_VAR 0 1
23487: PPUSH
23488: CALL_OW 250
23492: ST_TO_ADDR
// y := GetY ( tower ) ;
23493: LD_ADDR_VAR 0 11
23497: PUSH
23498: LD_VAR 0 1
23502: PPUSH
23503: CALL_OW 251
23507: ST_TO_ADDR
// if not x or not y then
23508: LD_VAR 0 10
23512: NOT
23513: PUSH
23514: LD_VAR 0 11
23518: NOT
23519: OR
23520: IFFALSE 23524
// exit ;
23522: GO 24584
// weapon := 0 ;
23524: LD_ADDR_VAR 0 18
23528: PUSH
23529: LD_INT 0
23531: ST_TO_ADDR
// fac_list := [ ] ;
23532: LD_ADDR_VAR 0 17
23536: PUSH
23537: EMPTY
23538: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
23539: LD_ADDR_VAR 0 6
23543: PUSH
23544: LD_VAR 0 1
23548: PPUSH
23549: CALL_OW 274
23553: PPUSH
23554: LD_VAR 0 2
23558: PPUSH
23559: CALL 21162 0 2
23563: PPUSH
23564: LD_INT 30
23566: PUSH
23567: LD_INT 3
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: PPUSH
23574: CALL_OW 72
23578: ST_TO_ADDR
// if not factories then
23579: LD_VAR 0 6
23583: NOT
23584: IFFALSE 23588
// exit ;
23586: GO 24584
// for i in factories do
23588: LD_ADDR_VAR 0 8
23592: PUSH
23593: LD_VAR 0 6
23597: PUSH
23598: FOR_IN
23599: IFFALSE 23624
// fac_list := fac_list union AvailableWeaponList ( i ) ;
23601: LD_ADDR_VAR 0 17
23605: PUSH
23606: LD_VAR 0 17
23610: PUSH
23611: LD_VAR 0 8
23615: PPUSH
23616: CALL_OW 478
23620: UNION
23621: ST_TO_ADDR
23622: GO 23598
23624: POP
23625: POP
// if not fac_list then
23626: LD_VAR 0 17
23630: NOT
23631: IFFALSE 23635
// exit ;
23633: GO 24584
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
23635: LD_ADDR_VAR 0 5
23639: PUSH
23640: LD_INT 4
23642: PUSH
23643: LD_INT 5
23645: PUSH
23646: LD_INT 9
23648: PUSH
23649: LD_INT 10
23651: PUSH
23652: LD_INT 6
23654: PUSH
23655: LD_INT 7
23657: PUSH
23658: LD_INT 11
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: PUSH
23670: LD_INT 27
23672: PUSH
23673: LD_INT 28
23675: PUSH
23676: LD_INT 26
23678: PUSH
23679: LD_INT 30
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 43
23690: PUSH
23691: LD_INT 44
23693: PUSH
23694: LD_INT 46
23696: PUSH
23697: LD_INT 45
23699: PUSH
23700: LD_INT 47
23702: PUSH
23703: LD_INT 49
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: LIST
23718: PUSH
23719: LD_VAR 0 12
23723: ARRAY
23724: ST_TO_ADDR
// for i in list do
23725: LD_ADDR_VAR 0 8
23729: PUSH
23730: LD_VAR 0 5
23734: PUSH
23735: FOR_IN
23736: IFFALSE 23769
// if not i in fac_list then
23738: LD_VAR 0 8
23742: PUSH
23743: LD_VAR 0 17
23747: IN
23748: NOT
23749: IFFALSE 23767
// list := list diff i ;
23751: LD_ADDR_VAR 0 5
23755: PUSH
23756: LD_VAR 0 5
23760: PUSH
23761: LD_VAR 0 8
23765: DIFF
23766: ST_TO_ADDR
23767: GO 23735
23769: POP
23770: POP
// if not list then
23771: LD_VAR 0 5
23775: NOT
23776: IFFALSE 23780
// exit ;
23778: GO 24584
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
23780: LD_VAR 0 12
23784: PUSH
23785: LD_INT 3
23787: EQUAL
23788: PUSH
23789: LD_INT 49
23791: PUSH
23792: LD_VAR 0 5
23796: IN
23797: AND
23798: PUSH
23799: LD_INT 31
23801: PPUSH
23802: LD_VAR 0 16
23806: PPUSH
23807: CALL_OW 321
23811: PUSH
23812: LD_INT 2
23814: EQUAL
23815: AND
23816: IFFALSE 23876
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
23818: LD_INT 22
23820: PUSH
23821: LD_VAR 0 16
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: PUSH
23830: LD_INT 35
23832: PUSH
23833: LD_INT 49
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PUSH
23840: LD_INT 91
23842: PUSH
23843: LD_VAR 0 1
23847: PUSH
23848: LD_INT 10
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: LIST
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: LIST
23860: PPUSH
23861: CALL_OW 69
23865: NOT
23866: IFFALSE 23876
// weapon := ru_time_lapser ;
23868: LD_ADDR_VAR 0 18
23872: PUSH
23873: LD_INT 49
23875: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
23876: LD_VAR 0 12
23880: PUSH
23881: LD_INT 1
23883: PUSH
23884: LD_INT 2
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: IN
23891: PUSH
23892: LD_INT 11
23894: PUSH
23895: LD_VAR 0 5
23899: IN
23900: PUSH
23901: LD_INT 30
23903: PUSH
23904: LD_VAR 0 5
23908: IN
23909: OR
23910: AND
23911: PUSH
23912: LD_INT 6
23914: PPUSH
23915: LD_VAR 0 16
23919: PPUSH
23920: CALL_OW 321
23924: PUSH
23925: LD_INT 2
23927: EQUAL
23928: AND
23929: IFFALSE 24094
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
23931: LD_INT 22
23933: PUSH
23934: LD_VAR 0 16
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: LD_INT 2
23945: PUSH
23946: LD_INT 35
23948: PUSH
23949: LD_INT 11
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 35
23958: PUSH
23959: LD_INT 30
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: LIST
23970: PUSH
23971: LD_INT 91
23973: PUSH
23974: LD_VAR 0 1
23978: PUSH
23979: LD_INT 18
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: LIST
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: LIST
23991: PPUSH
23992: CALL_OW 69
23996: NOT
23997: PUSH
23998: LD_INT 22
24000: PUSH
24001: LD_VAR 0 16
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: PUSH
24010: LD_INT 2
24012: PUSH
24013: LD_INT 30
24015: PUSH
24016: LD_INT 32
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 30
24025: PUSH
24026: LD_INT 33
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 91
24040: PUSH
24041: LD_VAR 0 1
24045: PUSH
24046: LD_INT 12
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: LIST
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: LIST
24058: PUSH
24059: EMPTY
24060: LIST
24061: PPUSH
24062: CALL_OW 69
24066: PUSH
24067: LD_INT 2
24069: GREATER
24070: AND
24071: IFFALSE 24094
// weapon := [ us_radar , ar_radar ] [ nat ] ;
24073: LD_ADDR_VAR 0 18
24077: PUSH
24078: LD_INT 11
24080: PUSH
24081: LD_INT 30
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_VAR 0 12
24092: ARRAY
24093: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
24094: LD_VAR 0 18
24098: NOT
24099: PUSH
24100: LD_INT 40
24102: PPUSH
24103: LD_VAR 0 16
24107: PPUSH
24108: CALL_OW 321
24112: PUSH
24113: LD_INT 2
24115: EQUAL
24116: AND
24117: PUSH
24118: LD_INT 7
24120: PUSH
24121: LD_VAR 0 5
24125: IN
24126: PUSH
24127: LD_INT 28
24129: PUSH
24130: LD_VAR 0 5
24134: IN
24135: OR
24136: PUSH
24137: LD_INT 45
24139: PUSH
24140: LD_VAR 0 5
24144: IN
24145: OR
24146: AND
24147: IFFALSE 24401
// begin hex := GetHexInfo ( x , y ) ;
24149: LD_ADDR_VAR 0 4
24153: PUSH
24154: LD_VAR 0 10
24158: PPUSH
24159: LD_VAR 0 11
24163: PPUSH
24164: CALL_OW 546
24168: ST_TO_ADDR
// if hex [ 1 ] then
24169: LD_VAR 0 4
24173: PUSH
24174: LD_INT 1
24176: ARRAY
24177: IFFALSE 24181
// exit ;
24179: GO 24584
// height := hex [ 2 ] ;
24181: LD_ADDR_VAR 0 15
24185: PUSH
24186: LD_VAR 0 4
24190: PUSH
24191: LD_INT 2
24193: ARRAY
24194: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
24195: LD_ADDR_VAR 0 14
24199: PUSH
24200: LD_INT 0
24202: PUSH
24203: LD_INT 2
24205: PUSH
24206: LD_INT 3
24208: PUSH
24209: LD_INT 5
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: ST_TO_ADDR
// for i in tmp do
24218: LD_ADDR_VAR 0 8
24222: PUSH
24223: LD_VAR 0 14
24227: PUSH
24228: FOR_IN
24229: IFFALSE 24399
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
24231: LD_ADDR_VAR 0 9
24235: PUSH
24236: LD_VAR 0 10
24240: PPUSH
24241: LD_VAR 0 8
24245: PPUSH
24246: LD_INT 5
24248: PPUSH
24249: CALL_OW 272
24253: PUSH
24254: LD_VAR 0 11
24258: PPUSH
24259: LD_VAR 0 8
24263: PPUSH
24264: LD_INT 5
24266: PPUSH
24267: CALL_OW 273
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
24276: LD_VAR 0 9
24280: PUSH
24281: LD_INT 1
24283: ARRAY
24284: PPUSH
24285: LD_VAR 0 9
24289: PUSH
24290: LD_INT 2
24292: ARRAY
24293: PPUSH
24294: CALL_OW 488
24298: IFFALSE 24397
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
24300: LD_ADDR_VAR 0 4
24304: PUSH
24305: LD_VAR 0 9
24309: PUSH
24310: LD_INT 1
24312: ARRAY
24313: PPUSH
24314: LD_VAR 0 9
24318: PUSH
24319: LD_INT 2
24321: ARRAY
24322: PPUSH
24323: CALL_OW 546
24327: ST_TO_ADDR
// if hex [ 1 ] then
24328: LD_VAR 0 4
24332: PUSH
24333: LD_INT 1
24335: ARRAY
24336: IFFALSE 24340
// continue ;
24338: GO 24228
// h := hex [ 2 ] ;
24340: LD_ADDR_VAR 0 13
24344: PUSH
24345: LD_VAR 0 4
24349: PUSH
24350: LD_INT 2
24352: ARRAY
24353: ST_TO_ADDR
// if h + 7 < height then
24354: LD_VAR 0 13
24358: PUSH
24359: LD_INT 7
24361: PLUS
24362: PUSH
24363: LD_VAR 0 15
24367: LESS
24368: IFFALSE 24397
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
24370: LD_ADDR_VAR 0 18
24374: PUSH
24375: LD_INT 7
24377: PUSH
24378: LD_INT 28
24380: PUSH
24381: LD_INT 45
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: LIST
24388: PUSH
24389: LD_VAR 0 12
24393: ARRAY
24394: ST_TO_ADDR
// break ;
24395: GO 24399
// end ; end ; end ;
24397: GO 24228
24399: POP
24400: POP
// end ; if not weapon then
24401: LD_VAR 0 18
24405: NOT
24406: IFFALSE 24466
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
24408: LD_ADDR_VAR 0 5
24412: PUSH
24413: LD_VAR 0 5
24417: PUSH
24418: LD_INT 11
24420: PUSH
24421: LD_INT 30
24423: PUSH
24424: LD_INT 49
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: LIST
24431: DIFF
24432: ST_TO_ADDR
// if not list then
24433: LD_VAR 0 5
24437: NOT
24438: IFFALSE 24442
// exit ;
24440: GO 24584
// weapon := list [ rand ( 1 , list ) ] ;
24442: LD_ADDR_VAR 0 18
24446: PUSH
24447: LD_VAR 0 5
24451: PUSH
24452: LD_INT 1
24454: PPUSH
24455: LD_VAR 0 5
24459: PPUSH
24460: CALL_OW 12
24464: ARRAY
24465: ST_TO_ADDR
// end ; if weapon then
24466: LD_VAR 0 18
24470: IFFALSE 24584
// begin tmp := CostOfWeapon ( weapon ) ;
24472: LD_ADDR_VAR 0 14
24476: PUSH
24477: LD_VAR 0 18
24481: PPUSH
24482: CALL_OW 451
24486: ST_TO_ADDR
// j := GetBase ( tower ) ;
24487: LD_ADDR_VAR 0 9
24491: PUSH
24492: LD_VAR 0 1
24496: PPUSH
24497: CALL_OW 274
24501: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
24502: LD_VAR 0 9
24506: PPUSH
24507: LD_INT 1
24509: PPUSH
24510: CALL_OW 275
24514: PUSH
24515: LD_VAR 0 14
24519: PUSH
24520: LD_INT 1
24522: ARRAY
24523: GREATEREQUAL
24524: PUSH
24525: LD_VAR 0 9
24529: PPUSH
24530: LD_INT 2
24532: PPUSH
24533: CALL_OW 275
24537: PUSH
24538: LD_VAR 0 14
24542: PUSH
24543: LD_INT 2
24545: ARRAY
24546: GREATEREQUAL
24547: AND
24548: PUSH
24549: LD_VAR 0 9
24553: PPUSH
24554: LD_INT 3
24556: PPUSH
24557: CALL_OW 275
24561: PUSH
24562: LD_VAR 0 14
24566: PUSH
24567: LD_INT 3
24569: ARRAY
24570: GREATEREQUAL
24571: AND
24572: IFFALSE 24584
// result := weapon ;
24574: LD_ADDR_VAR 0 3
24578: PUSH
24579: LD_VAR 0 18
24583: ST_TO_ADDR
// end ; end ;
24584: LD_VAR 0 3
24588: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
24589: LD_INT 0
24591: PPUSH
24592: PPUSH
// result := true ;
24593: LD_ADDR_VAR 0 3
24597: PUSH
24598: LD_INT 1
24600: ST_TO_ADDR
// if array1 = array2 then
24601: LD_VAR 0 1
24605: PUSH
24606: LD_VAR 0 2
24610: EQUAL
24611: IFFALSE 24671
// begin for i = 1 to array1 do
24613: LD_ADDR_VAR 0 4
24617: PUSH
24618: DOUBLE
24619: LD_INT 1
24621: DEC
24622: ST_TO_ADDR
24623: LD_VAR 0 1
24627: PUSH
24628: FOR_TO
24629: IFFALSE 24667
// if array1 [ i ] <> array2 [ i ] then
24631: LD_VAR 0 1
24635: PUSH
24636: LD_VAR 0 4
24640: ARRAY
24641: PUSH
24642: LD_VAR 0 2
24646: PUSH
24647: LD_VAR 0 4
24651: ARRAY
24652: NONEQUAL
24653: IFFALSE 24665
// begin result := false ;
24655: LD_ADDR_VAR 0 3
24659: PUSH
24660: LD_INT 0
24662: ST_TO_ADDR
// break ;
24663: GO 24667
// end ;
24665: GO 24628
24667: POP
24668: POP
// end else
24669: GO 24679
// result := false ;
24671: LD_ADDR_VAR 0 3
24675: PUSH
24676: LD_INT 0
24678: ST_TO_ADDR
// end ;
24679: LD_VAR 0 3
24683: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
24684: LD_INT 0
24686: PPUSH
24687: PPUSH
24688: PPUSH
// pom := GetBase ( fac ) ;
24689: LD_ADDR_VAR 0 5
24693: PUSH
24694: LD_VAR 0 1
24698: PPUSH
24699: CALL_OW 274
24703: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
24704: LD_ADDR_VAR 0 4
24708: PUSH
24709: LD_VAR 0 2
24713: PUSH
24714: LD_INT 1
24716: ARRAY
24717: PPUSH
24718: LD_VAR 0 2
24722: PUSH
24723: LD_INT 2
24725: ARRAY
24726: PPUSH
24727: LD_VAR 0 2
24731: PUSH
24732: LD_INT 3
24734: ARRAY
24735: PPUSH
24736: LD_VAR 0 2
24740: PUSH
24741: LD_INT 4
24743: ARRAY
24744: PPUSH
24745: CALL_OW 449
24749: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24750: LD_ADDR_VAR 0 3
24754: PUSH
24755: LD_VAR 0 5
24759: PPUSH
24760: LD_INT 1
24762: PPUSH
24763: CALL_OW 275
24767: PUSH
24768: LD_VAR 0 4
24772: PUSH
24773: LD_INT 1
24775: ARRAY
24776: GREATEREQUAL
24777: PUSH
24778: LD_VAR 0 5
24782: PPUSH
24783: LD_INT 2
24785: PPUSH
24786: CALL_OW 275
24790: PUSH
24791: LD_VAR 0 4
24795: PUSH
24796: LD_INT 2
24798: ARRAY
24799: GREATEREQUAL
24800: AND
24801: PUSH
24802: LD_VAR 0 5
24806: PPUSH
24807: LD_INT 3
24809: PPUSH
24810: CALL_OW 275
24814: PUSH
24815: LD_VAR 0 4
24819: PUSH
24820: LD_INT 3
24822: ARRAY
24823: GREATEREQUAL
24824: AND
24825: ST_TO_ADDR
// end ;
24826: LD_VAR 0 3
24830: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
24831: LD_INT 0
24833: PPUSH
24834: PPUSH
24835: PPUSH
24836: PPUSH
// pom := GetBase ( building ) ;
24837: LD_ADDR_VAR 0 3
24841: PUSH
24842: LD_VAR 0 1
24846: PPUSH
24847: CALL_OW 274
24851: ST_TO_ADDR
// if not pom then
24852: LD_VAR 0 3
24856: NOT
24857: IFFALSE 24861
// exit ;
24859: GO 25031
// btype := GetBType ( building ) ;
24861: LD_ADDR_VAR 0 5
24865: PUSH
24866: LD_VAR 0 1
24870: PPUSH
24871: CALL_OW 266
24875: ST_TO_ADDR
// if btype = b_armoury then
24876: LD_VAR 0 5
24880: PUSH
24881: LD_INT 4
24883: EQUAL
24884: IFFALSE 24894
// btype := b_barracks ;
24886: LD_ADDR_VAR 0 5
24890: PUSH
24891: LD_INT 5
24893: ST_TO_ADDR
// if btype = b_depot then
24894: LD_VAR 0 5
24898: PUSH
24899: LD_INT 0
24901: EQUAL
24902: IFFALSE 24912
// btype := b_warehouse ;
24904: LD_ADDR_VAR 0 5
24908: PUSH
24909: LD_INT 1
24911: ST_TO_ADDR
// if btype = b_workshop then
24912: LD_VAR 0 5
24916: PUSH
24917: LD_INT 2
24919: EQUAL
24920: IFFALSE 24930
// btype := b_factory ;
24922: LD_ADDR_VAR 0 5
24926: PUSH
24927: LD_INT 3
24929: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24930: LD_ADDR_VAR 0 4
24934: PUSH
24935: LD_VAR 0 5
24939: PPUSH
24940: LD_VAR 0 1
24944: PPUSH
24945: CALL_OW 248
24949: PPUSH
24950: CALL_OW 450
24954: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24955: LD_ADDR_VAR 0 2
24959: PUSH
24960: LD_VAR 0 3
24964: PPUSH
24965: LD_INT 1
24967: PPUSH
24968: CALL_OW 275
24972: PUSH
24973: LD_VAR 0 4
24977: PUSH
24978: LD_INT 1
24980: ARRAY
24981: GREATEREQUAL
24982: PUSH
24983: LD_VAR 0 3
24987: PPUSH
24988: LD_INT 2
24990: PPUSH
24991: CALL_OW 275
24995: PUSH
24996: LD_VAR 0 4
25000: PUSH
25001: LD_INT 2
25003: ARRAY
25004: GREATEREQUAL
25005: AND
25006: PUSH
25007: LD_VAR 0 3
25011: PPUSH
25012: LD_INT 3
25014: PPUSH
25015: CALL_OW 275
25019: PUSH
25020: LD_VAR 0 4
25024: PUSH
25025: LD_INT 3
25027: ARRAY
25028: GREATEREQUAL
25029: AND
25030: ST_TO_ADDR
// end ;
25031: LD_VAR 0 2
25035: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
25036: LD_INT 0
25038: PPUSH
25039: PPUSH
25040: PPUSH
// pom := GetBase ( building ) ;
25041: LD_ADDR_VAR 0 4
25045: PUSH
25046: LD_VAR 0 1
25050: PPUSH
25051: CALL_OW 274
25055: ST_TO_ADDR
// if not pom then
25056: LD_VAR 0 4
25060: NOT
25061: IFFALSE 25065
// exit ;
25063: GO 25166
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
25065: LD_ADDR_VAR 0 5
25069: PUSH
25070: LD_VAR 0 2
25074: PPUSH
25075: LD_VAR 0 1
25079: PPUSH
25080: CALL_OW 248
25084: PPUSH
25085: CALL_OW 450
25089: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25090: LD_ADDR_VAR 0 3
25094: PUSH
25095: LD_VAR 0 4
25099: PPUSH
25100: LD_INT 1
25102: PPUSH
25103: CALL_OW 275
25107: PUSH
25108: LD_VAR 0 5
25112: PUSH
25113: LD_INT 1
25115: ARRAY
25116: GREATEREQUAL
25117: PUSH
25118: LD_VAR 0 4
25122: PPUSH
25123: LD_INT 2
25125: PPUSH
25126: CALL_OW 275
25130: PUSH
25131: LD_VAR 0 5
25135: PUSH
25136: LD_INT 2
25138: ARRAY
25139: GREATEREQUAL
25140: AND
25141: PUSH
25142: LD_VAR 0 4
25146: PPUSH
25147: LD_INT 3
25149: PPUSH
25150: CALL_OW 275
25154: PUSH
25155: LD_VAR 0 5
25159: PUSH
25160: LD_INT 3
25162: ARRAY
25163: GREATEREQUAL
25164: AND
25165: ST_TO_ADDR
// end ;
25166: LD_VAR 0 3
25170: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
25171: LD_INT 0
25173: PPUSH
25174: PPUSH
25175: PPUSH
25176: PPUSH
25177: PPUSH
25178: PPUSH
25179: PPUSH
25180: PPUSH
25181: PPUSH
25182: PPUSH
// result := false ;
25183: LD_ADDR_VAR 0 6
25187: PUSH
25188: LD_INT 0
25190: ST_TO_ADDR
// if not base or not btype or not x or not y then
25191: LD_VAR 0 1
25195: NOT
25196: PUSH
25197: LD_VAR 0 2
25201: NOT
25202: OR
25203: PUSH
25204: LD_VAR 0 3
25208: NOT
25209: OR
25210: PUSH
25211: LD_VAR 0 4
25215: NOT
25216: OR
25217: IFFALSE 25221
// exit ;
25219: GO 25830
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
25221: LD_ADDR_VAR 0 12
25225: PUSH
25226: LD_VAR 0 2
25230: PPUSH
25231: LD_VAR 0 3
25235: PPUSH
25236: LD_VAR 0 4
25240: PPUSH
25241: LD_VAR 0 5
25245: PPUSH
25246: LD_VAR 0 1
25250: PUSH
25251: LD_INT 1
25253: ARRAY
25254: PPUSH
25255: CALL_OW 248
25259: PPUSH
25260: LD_INT 0
25262: PPUSH
25263: CALL 26667 0 6
25267: ST_TO_ADDR
// if not hexes then
25268: LD_VAR 0 12
25272: NOT
25273: IFFALSE 25277
// exit ;
25275: GO 25830
// for i = 1 to hexes do
25277: LD_ADDR_VAR 0 7
25281: PUSH
25282: DOUBLE
25283: LD_INT 1
25285: DEC
25286: ST_TO_ADDR
25287: LD_VAR 0 12
25291: PUSH
25292: FOR_TO
25293: IFFALSE 25828
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25295: LD_ADDR_VAR 0 11
25299: PUSH
25300: LD_VAR 0 12
25304: PUSH
25305: LD_VAR 0 7
25309: ARRAY
25310: PUSH
25311: LD_INT 1
25313: ARRAY
25314: PPUSH
25315: LD_VAR 0 12
25319: PUSH
25320: LD_VAR 0 7
25324: ARRAY
25325: PUSH
25326: LD_INT 2
25328: ARRAY
25329: PPUSH
25330: CALL_OW 428
25334: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
25335: LD_VAR 0 12
25339: PUSH
25340: LD_VAR 0 7
25344: ARRAY
25345: PUSH
25346: LD_INT 1
25348: ARRAY
25349: PPUSH
25350: LD_VAR 0 12
25354: PUSH
25355: LD_VAR 0 7
25359: ARRAY
25360: PUSH
25361: LD_INT 2
25363: ARRAY
25364: PPUSH
25365: CALL_OW 351
25369: PUSH
25370: LD_VAR 0 12
25374: PUSH
25375: LD_VAR 0 7
25379: ARRAY
25380: PUSH
25381: LD_INT 1
25383: ARRAY
25384: PPUSH
25385: LD_VAR 0 12
25389: PUSH
25390: LD_VAR 0 7
25394: ARRAY
25395: PUSH
25396: LD_INT 2
25398: ARRAY
25399: PPUSH
25400: CALL_OW 488
25404: NOT
25405: OR
25406: PUSH
25407: LD_VAR 0 11
25411: PPUSH
25412: CALL_OW 247
25416: PUSH
25417: LD_INT 3
25419: EQUAL
25420: OR
25421: IFFALSE 25427
// exit ;
25423: POP
25424: POP
25425: GO 25830
// if not tmp or not tmp in base then
25427: LD_VAR 0 11
25431: NOT
25432: PUSH
25433: LD_VAR 0 11
25437: PUSH
25438: LD_VAR 0 1
25442: IN
25443: NOT
25444: OR
25445: IFFALSE 25449
// continue ;
25447: GO 25292
// result := true ;
25449: LD_ADDR_VAR 0 6
25453: PUSH
25454: LD_INT 1
25456: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25457: LD_ADDR_VAR 0 15
25461: PUSH
25462: LD_VAR 0 1
25466: PPUSH
25467: LD_INT 22
25469: PUSH
25470: LD_VAR 0 11
25474: PPUSH
25475: CALL_OW 255
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: LD_INT 2
25486: PUSH
25487: LD_INT 30
25489: PUSH
25490: LD_INT 0
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: PUSH
25497: LD_INT 30
25499: PUSH
25500: LD_INT 1
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: LIST
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PPUSH
25516: CALL_OW 72
25520: ST_TO_ADDR
// if dep then
25521: LD_VAR 0 15
25525: IFFALSE 25661
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
25527: LD_ADDR_VAR 0 14
25531: PUSH
25532: LD_VAR 0 15
25536: PUSH
25537: LD_INT 1
25539: ARRAY
25540: PPUSH
25541: CALL_OW 250
25545: PPUSH
25546: LD_VAR 0 15
25550: PUSH
25551: LD_INT 1
25553: ARRAY
25554: PPUSH
25555: CALL_OW 254
25559: PPUSH
25560: LD_INT 5
25562: PPUSH
25563: CALL_OW 272
25567: PUSH
25568: LD_VAR 0 15
25572: PUSH
25573: LD_INT 1
25575: ARRAY
25576: PPUSH
25577: CALL_OW 251
25581: PPUSH
25582: LD_VAR 0 15
25586: PUSH
25587: LD_INT 1
25589: ARRAY
25590: PPUSH
25591: CALL_OW 254
25595: PPUSH
25596: LD_INT 5
25598: PPUSH
25599: CALL_OW 273
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
25608: LD_VAR 0 14
25612: PUSH
25613: LD_INT 1
25615: ARRAY
25616: PPUSH
25617: LD_VAR 0 14
25621: PUSH
25622: LD_INT 2
25624: ARRAY
25625: PPUSH
25626: CALL_OW 488
25630: IFFALSE 25661
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
25632: LD_VAR 0 11
25636: PPUSH
25637: LD_VAR 0 14
25641: PUSH
25642: LD_INT 1
25644: ARRAY
25645: PPUSH
25646: LD_VAR 0 14
25650: PUSH
25651: LD_INT 2
25653: ARRAY
25654: PPUSH
25655: CALL_OW 111
// continue ;
25659: GO 25292
// end ; end ; r := GetDir ( tmp ) ;
25661: LD_ADDR_VAR 0 13
25665: PUSH
25666: LD_VAR 0 11
25670: PPUSH
25671: CALL_OW 254
25675: ST_TO_ADDR
// if r = 5 then
25676: LD_VAR 0 13
25680: PUSH
25681: LD_INT 5
25683: EQUAL
25684: IFFALSE 25694
// r := 0 ;
25686: LD_ADDR_VAR 0 13
25690: PUSH
25691: LD_INT 0
25693: ST_TO_ADDR
// for j = r to 5 do
25694: LD_ADDR_VAR 0 8
25698: PUSH
25699: DOUBLE
25700: LD_VAR 0 13
25704: DEC
25705: ST_TO_ADDR
25706: LD_INT 5
25708: PUSH
25709: FOR_TO
25710: IFFALSE 25824
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
25712: LD_ADDR_VAR 0 9
25716: PUSH
25717: LD_VAR 0 11
25721: PPUSH
25722: CALL_OW 250
25726: PPUSH
25727: LD_VAR 0 8
25731: PPUSH
25732: LD_INT 2
25734: PPUSH
25735: CALL_OW 272
25739: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
25740: LD_ADDR_VAR 0 10
25744: PUSH
25745: LD_VAR 0 11
25749: PPUSH
25750: CALL_OW 251
25754: PPUSH
25755: LD_VAR 0 8
25759: PPUSH
25760: LD_INT 2
25762: PPUSH
25763: CALL_OW 273
25767: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
25768: LD_VAR 0 9
25772: PPUSH
25773: LD_VAR 0 10
25777: PPUSH
25778: CALL_OW 488
25782: PUSH
25783: LD_VAR 0 9
25787: PPUSH
25788: LD_VAR 0 10
25792: PPUSH
25793: CALL_OW 428
25797: NOT
25798: AND
25799: IFFALSE 25822
// begin ComMoveXY ( tmp , _x , _y ) ;
25801: LD_VAR 0 11
25805: PPUSH
25806: LD_VAR 0 9
25810: PPUSH
25811: LD_VAR 0 10
25815: PPUSH
25816: CALL_OW 111
// break ;
25820: GO 25824
// end ; end ;
25822: GO 25709
25824: POP
25825: POP
// end ;
25826: GO 25292
25828: POP
25829: POP
// end ;
25830: LD_VAR 0 6
25834: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
25835: LD_INT 0
25837: PPUSH
25838: PPUSH
25839: PPUSH
25840: PPUSH
25841: PPUSH
25842: PPUSH
25843: PPUSH
25844: PPUSH
25845: PPUSH
25846: PPUSH
// result := false ;
25847: LD_ADDR_VAR 0 6
25851: PUSH
25852: LD_INT 0
25854: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
25855: LD_VAR 0 1
25859: NOT
25860: PUSH
25861: LD_VAR 0 1
25865: PPUSH
25866: CALL_OW 266
25870: PUSH
25871: LD_INT 0
25873: PUSH
25874: LD_INT 1
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: IN
25881: NOT
25882: OR
25883: PUSH
25884: LD_VAR 0 2
25888: NOT
25889: OR
25890: PUSH
25891: LD_VAR 0 5
25895: PUSH
25896: LD_INT 0
25898: PUSH
25899: LD_INT 1
25901: PUSH
25902: LD_INT 2
25904: PUSH
25905: LD_INT 3
25907: PUSH
25908: LD_INT 4
25910: PUSH
25911: LD_INT 5
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: IN
25922: NOT
25923: OR
25924: PUSH
25925: LD_VAR 0 3
25929: PPUSH
25930: LD_VAR 0 4
25934: PPUSH
25935: CALL_OW 488
25939: NOT
25940: OR
25941: IFFALSE 25945
// exit ;
25943: GO 26662
// pom := GetBase ( depot ) ;
25945: LD_ADDR_VAR 0 10
25949: PUSH
25950: LD_VAR 0 1
25954: PPUSH
25955: CALL_OW 274
25959: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
25960: LD_ADDR_VAR 0 11
25964: PUSH
25965: LD_VAR 0 2
25969: PPUSH
25970: LD_VAR 0 1
25974: PPUSH
25975: CALL_OW 248
25979: PPUSH
25980: CALL_OW 450
25984: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
25985: LD_VAR 0 10
25989: PPUSH
25990: LD_INT 1
25992: PPUSH
25993: CALL_OW 275
25997: PUSH
25998: LD_VAR 0 11
26002: PUSH
26003: LD_INT 1
26005: ARRAY
26006: GREATEREQUAL
26007: PUSH
26008: LD_VAR 0 10
26012: PPUSH
26013: LD_INT 2
26015: PPUSH
26016: CALL_OW 275
26020: PUSH
26021: LD_VAR 0 11
26025: PUSH
26026: LD_INT 2
26028: ARRAY
26029: GREATEREQUAL
26030: AND
26031: PUSH
26032: LD_VAR 0 10
26036: PPUSH
26037: LD_INT 3
26039: PPUSH
26040: CALL_OW 275
26044: PUSH
26045: LD_VAR 0 11
26049: PUSH
26050: LD_INT 3
26052: ARRAY
26053: GREATEREQUAL
26054: AND
26055: NOT
26056: IFFALSE 26060
// exit ;
26058: GO 26662
// if GetBType ( depot ) = b_depot then
26060: LD_VAR 0 1
26064: PPUSH
26065: CALL_OW 266
26069: PUSH
26070: LD_INT 0
26072: EQUAL
26073: IFFALSE 26085
// dist := 28 else
26075: LD_ADDR_VAR 0 14
26079: PUSH
26080: LD_INT 28
26082: ST_TO_ADDR
26083: GO 26093
// dist := 36 ;
26085: LD_ADDR_VAR 0 14
26089: PUSH
26090: LD_INT 36
26092: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
26093: LD_VAR 0 1
26097: PPUSH
26098: LD_VAR 0 3
26102: PPUSH
26103: LD_VAR 0 4
26107: PPUSH
26108: CALL_OW 297
26112: PUSH
26113: LD_VAR 0 14
26117: GREATER
26118: IFFALSE 26122
// exit ;
26120: GO 26662
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
26122: LD_ADDR_VAR 0 12
26126: PUSH
26127: LD_VAR 0 2
26131: PPUSH
26132: LD_VAR 0 3
26136: PPUSH
26137: LD_VAR 0 4
26141: PPUSH
26142: LD_VAR 0 5
26146: PPUSH
26147: LD_VAR 0 1
26151: PPUSH
26152: CALL_OW 248
26156: PPUSH
26157: LD_INT 0
26159: PPUSH
26160: CALL 26667 0 6
26164: ST_TO_ADDR
// if not hexes then
26165: LD_VAR 0 12
26169: NOT
26170: IFFALSE 26174
// exit ;
26172: GO 26662
// hex := GetHexInfo ( x , y ) ;
26174: LD_ADDR_VAR 0 15
26178: PUSH
26179: LD_VAR 0 3
26183: PPUSH
26184: LD_VAR 0 4
26188: PPUSH
26189: CALL_OW 546
26193: ST_TO_ADDR
// if hex [ 1 ] then
26194: LD_VAR 0 15
26198: PUSH
26199: LD_INT 1
26201: ARRAY
26202: IFFALSE 26206
// exit ;
26204: GO 26662
// height := hex [ 2 ] ;
26206: LD_ADDR_VAR 0 13
26210: PUSH
26211: LD_VAR 0 15
26215: PUSH
26216: LD_INT 2
26218: ARRAY
26219: ST_TO_ADDR
// for i = 1 to hexes do
26220: LD_ADDR_VAR 0 7
26224: PUSH
26225: DOUBLE
26226: LD_INT 1
26228: DEC
26229: ST_TO_ADDR
26230: LD_VAR 0 12
26234: PUSH
26235: FOR_TO
26236: IFFALSE 26566
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
26238: LD_VAR 0 12
26242: PUSH
26243: LD_VAR 0 7
26247: ARRAY
26248: PUSH
26249: LD_INT 1
26251: ARRAY
26252: PPUSH
26253: LD_VAR 0 12
26257: PUSH
26258: LD_VAR 0 7
26262: ARRAY
26263: PUSH
26264: LD_INT 2
26266: ARRAY
26267: PPUSH
26268: CALL_OW 488
26272: NOT
26273: PUSH
26274: LD_VAR 0 12
26278: PUSH
26279: LD_VAR 0 7
26283: ARRAY
26284: PUSH
26285: LD_INT 1
26287: ARRAY
26288: PPUSH
26289: LD_VAR 0 12
26293: PUSH
26294: LD_VAR 0 7
26298: ARRAY
26299: PUSH
26300: LD_INT 2
26302: ARRAY
26303: PPUSH
26304: CALL_OW 428
26308: PUSH
26309: LD_INT 0
26311: GREATER
26312: OR
26313: PUSH
26314: LD_VAR 0 12
26318: PUSH
26319: LD_VAR 0 7
26323: ARRAY
26324: PUSH
26325: LD_INT 1
26327: ARRAY
26328: PPUSH
26329: LD_VAR 0 12
26333: PUSH
26334: LD_VAR 0 7
26338: ARRAY
26339: PUSH
26340: LD_INT 2
26342: ARRAY
26343: PPUSH
26344: CALL_OW 351
26348: OR
26349: IFFALSE 26355
// exit ;
26351: POP
26352: POP
26353: GO 26662
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
26355: LD_ADDR_VAR 0 8
26359: PUSH
26360: LD_VAR 0 12
26364: PUSH
26365: LD_VAR 0 7
26369: ARRAY
26370: PUSH
26371: LD_INT 1
26373: ARRAY
26374: PPUSH
26375: LD_VAR 0 12
26379: PUSH
26380: LD_VAR 0 7
26384: ARRAY
26385: PUSH
26386: LD_INT 2
26388: ARRAY
26389: PPUSH
26390: CALL_OW 546
26394: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
26395: LD_VAR 0 8
26399: PUSH
26400: LD_INT 1
26402: ARRAY
26403: PUSH
26404: LD_VAR 0 8
26408: PUSH
26409: LD_INT 2
26411: ARRAY
26412: PUSH
26413: LD_VAR 0 13
26417: PUSH
26418: LD_INT 2
26420: PLUS
26421: GREATER
26422: OR
26423: PUSH
26424: LD_VAR 0 8
26428: PUSH
26429: LD_INT 2
26431: ARRAY
26432: PUSH
26433: LD_VAR 0 13
26437: PUSH
26438: LD_INT 2
26440: MINUS
26441: LESS
26442: OR
26443: PUSH
26444: LD_VAR 0 8
26448: PUSH
26449: LD_INT 3
26451: ARRAY
26452: PUSH
26453: LD_INT 0
26455: PUSH
26456: LD_INT 8
26458: PUSH
26459: LD_INT 9
26461: PUSH
26462: LD_INT 10
26464: PUSH
26465: LD_INT 11
26467: PUSH
26468: LD_INT 12
26470: PUSH
26471: LD_INT 13
26473: PUSH
26474: LD_INT 16
26476: PUSH
26477: LD_INT 17
26479: PUSH
26480: LD_INT 18
26482: PUSH
26483: LD_INT 19
26485: PUSH
26486: LD_INT 20
26488: PUSH
26489: LD_INT 21
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: IN
26507: NOT
26508: OR
26509: PUSH
26510: LD_VAR 0 8
26514: PUSH
26515: LD_INT 5
26517: ARRAY
26518: NOT
26519: OR
26520: PUSH
26521: LD_VAR 0 8
26525: PUSH
26526: LD_INT 6
26528: ARRAY
26529: PUSH
26530: LD_INT 1
26532: PUSH
26533: LD_INT 2
26535: PUSH
26536: LD_INT 7
26538: PUSH
26539: LD_INT 9
26541: PUSH
26542: LD_INT 10
26544: PUSH
26545: LD_INT 11
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: IN
26556: NOT
26557: OR
26558: IFFALSE 26564
// exit ;
26560: POP
26561: POP
26562: GO 26662
// end ;
26564: GO 26235
26566: POP
26567: POP
// side := GetSide ( depot ) ;
26568: LD_ADDR_VAR 0 9
26572: PUSH
26573: LD_VAR 0 1
26577: PPUSH
26578: CALL_OW 255
26582: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
26583: LD_VAR 0 9
26587: PPUSH
26588: LD_VAR 0 3
26592: PPUSH
26593: LD_VAR 0 4
26597: PPUSH
26598: LD_INT 20
26600: PPUSH
26601: CALL 19316 0 4
26605: PUSH
26606: LD_INT 4
26608: ARRAY
26609: IFFALSE 26613
// exit ;
26611: GO 26662
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
26613: LD_VAR 0 2
26617: PUSH
26618: LD_INT 29
26620: PUSH
26621: LD_INT 30
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: IN
26628: PUSH
26629: LD_VAR 0 3
26633: PPUSH
26634: LD_VAR 0 4
26638: PPUSH
26639: LD_VAR 0 9
26643: PPUSH
26644: CALL_OW 440
26648: NOT
26649: AND
26650: IFFALSE 26654
// exit ;
26652: GO 26662
// result := true ;
26654: LD_ADDR_VAR 0 6
26658: PUSH
26659: LD_INT 1
26661: ST_TO_ADDR
// end ;
26662: LD_VAR 0 6
26666: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
26667: LD_INT 0
26669: PPUSH
26670: PPUSH
26671: PPUSH
26672: PPUSH
26673: PPUSH
26674: PPUSH
26675: PPUSH
26676: PPUSH
26677: PPUSH
26678: PPUSH
26679: PPUSH
26680: PPUSH
26681: PPUSH
26682: PPUSH
26683: PPUSH
26684: PPUSH
26685: PPUSH
26686: PPUSH
26687: PPUSH
26688: PPUSH
26689: PPUSH
26690: PPUSH
26691: PPUSH
26692: PPUSH
26693: PPUSH
26694: PPUSH
26695: PPUSH
26696: PPUSH
26697: PPUSH
26698: PPUSH
26699: PPUSH
26700: PPUSH
26701: PPUSH
26702: PPUSH
26703: PPUSH
26704: PPUSH
26705: PPUSH
26706: PPUSH
26707: PPUSH
26708: PPUSH
26709: PPUSH
26710: PPUSH
26711: PPUSH
26712: PPUSH
26713: PPUSH
26714: PPUSH
26715: PPUSH
26716: PPUSH
26717: PPUSH
26718: PPUSH
26719: PPUSH
26720: PPUSH
26721: PPUSH
26722: PPUSH
26723: PPUSH
26724: PPUSH
26725: PPUSH
26726: PPUSH
// result = [ ] ;
26727: LD_ADDR_VAR 0 7
26731: PUSH
26732: EMPTY
26733: ST_TO_ADDR
// temp_list = [ ] ;
26734: LD_ADDR_VAR 0 9
26738: PUSH
26739: EMPTY
26740: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
26741: LD_VAR 0 4
26745: PUSH
26746: LD_INT 0
26748: PUSH
26749: LD_INT 1
26751: PUSH
26752: LD_INT 2
26754: PUSH
26755: LD_INT 3
26757: PUSH
26758: LD_INT 4
26760: PUSH
26761: LD_INT 5
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: IN
26772: NOT
26773: PUSH
26774: LD_VAR 0 1
26778: PUSH
26779: LD_INT 0
26781: PUSH
26782: LD_INT 1
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: IN
26789: PUSH
26790: LD_VAR 0 5
26794: PUSH
26795: LD_INT 1
26797: PUSH
26798: LD_INT 2
26800: PUSH
26801: LD_INT 3
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: LIST
26808: IN
26809: NOT
26810: AND
26811: OR
26812: IFFALSE 26816
// exit ;
26814: GO 45207
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
26816: LD_VAR 0 1
26820: PUSH
26821: LD_INT 6
26823: PUSH
26824: LD_INT 7
26826: PUSH
26827: LD_INT 8
26829: PUSH
26830: LD_INT 13
26832: PUSH
26833: LD_INT 12
26835: PUSH
26836: LD_INT 15
26838: PUSH
26839: LD_INT 11
26841: PUSH
26842: LD_INT 14
26844: PUSH
26845: LD_INT 10
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: IN
26859: IFFALSE 26869
// btype = b_lab ;
26861: LD_ADDR_VAR 0 1
26865: PUSH
26866: LD_INT 6
26868: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
26869: LD_VAR 0 6
26873: PUSH
26874: LD_INT 0
26876: PUSH
26877: LD_INT 1
26879: PUSH
26880: LD_INT 2
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: LIST
26887: IN
26888: NOT
26889: PUSH
26890: LD_VAR 0 1
26894: PUSH
26895: LD_INT 0
26897: PUSH
26898: LD_INT 1
26900: PUSH
26901: LD_INT 2
26903: PUSH
26904: LD_INT 3
26906: PUSH
26907: LD_INT 6
26909: PUSH
26910: LD_INT 36
26912: PUSH
26913: LD_INT 4
26915: PUSH
26916: LD_INT 5
26918: PUSH
26919: LD_INT 31
26921: PUSH
26922: LD_INT 32
26924: PUSH
26925: LD_INT 33
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: IN
26941: NOT
26942: PUSH
26943: LD_VAR 0 6
26947: PUSH
26948: LD_INT 1
26950: EQUAL
26951: AND
26952: OR
26953: PUSH
26954: LD_VAR 0 1
26958: PUSH
26959: LD_INT 2
26961: PUSH
26962: LD_INT 3
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: IN
26969: NOT
26970: PUSH
26971: LD_VAR 0 6
26975: PUSH
26976: LD_INT 2
26978: EQUAL
26979: AND
26980: OR
26981: IFFALSE 26991
// mode = 0 ;
26983: LD_ADDR_VAR 0 6
26987: PUSH
26988: LD_INT 0
26990: ST_TO_ADDR
// case mode of 0 :
26991: LD_VAR 0 6
26995: PUSH
26996: LD_INT 0
26998: DOUBLE
26999: EQUAL
27000: IFTRUE 27004
27002: GO 38457
27004: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27005: LD_ADDR_VAR 0 11
27009: PUSH
27010: LD_INT 0
27012: PUSH
27013: LD_INT 0
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PUSH
27020: LD_INT 0
27022: PUSH
27023: LD_INT 1
27025: NEG
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 1
27033: PUSH
27034: LD_INT 0
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: LD_INT 1
27043: PUSH
27044: LD_INT 1
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 0
27053: PUSH
27054: LD_INT 1
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: PUSH
27061: LD_INT 1
27063: NEG
27064: PUSH
27065: LD_INT 0
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: PUSH
27072: LD_INT 1
27074: NEG
27075: PUSH
27076: LD_INT 1
27078: NEG
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 1
27086: NEG
27087: PUSH
27088: LD_INT 2
27090: NEG
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 0
27098: PUSH
27099: LD_INT 2
27101: NEG
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 1
27109: PUSH
27110: LD_INT 1
27112: NEG
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 1
27120: PUSH
27121: LD_INT 2
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 0
27130: PUSH
27131: LD_INT 2
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 1
27140: NEG
27141: PUSH
27142: LD_INT 1
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 1
27151: PUSH
27152: LD_INT 3
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 0
27161: PUSH
27162: LD_INT 3
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 1
27171: NEG
27172: PUSH
27173: LD_INT 2
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27198: LD_ADDR_VAR 0 12
27202: PUSH
27203: LD_INT 0
27205: PUSH
27206: LD_INT 0
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 0
27215: PUSH
27216: LD_INT 1
27218: NEG
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 1
27226: PUSH
27227: LD_INT 0
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: LD_INT 1
27236: PUSH
27237: LD_INT 1
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: PUSH
27244: LD_INT 0
27246: PUSH
27247: LD_INT 1
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_INT 1
27256: NEG
27257: PUSH
27258: LD_INT 0
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 1
27267: NEG
27268: PUSH
27269: LD_INT 1
27271: NEG
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 1
27279: PUSH
27280: LD_INT 1
27282: NEG
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: LD_INT 2
27290: PUSH
27291: LD_INT 0
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: LD_INT 2
27300: PUSH
27301: LD_INT 1
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: PUSH
27308: LD_INT 1
27310: NEG
27311: PUSH
27312: LD_INT 1
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 2
27321: NEG
27322: PUSH
27323: LD_INT 0
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PUSH
27330: LD_INT 2
27332: NEG
27333: PUSH
27334: LD_INT 1
27336: NEG
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: LD_INT 2
27344: NEG
27345: PUSH
27346: LD_INT 1
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 3
27355: NEG
27356: PUSH
27357: LD_INT 0
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: PUSH
27364: LD_INT 3
27366: NEG
27367: PUSH
27368: LD_INT 1
27370: NEG
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27394: LD_ADDR_VAR 0 13
27398: PUSH
27399: LD_INT 0
27401: PUSH
27402: LD_INT 0
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PUSH
27409: LD_INT 0
27411: PUSH
27412: LD_INT 1
27414: NEG
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: LD_INT 1
27422: PUSH
27423: LD_INT 0
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PUSH
27430: LD_INT 1
27432: PUSH
27433: LD_INT 1
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 0
27442: PUSH
27443: LD_INT 1
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: LD_INT 1
27452: NEG
27453: PUSH
27454: LD_INT 0
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: LD_INT 1
27463: NEG
27464: PUSH
27465: LD_INT 1
27467: NEG
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: LD_INT 1
27475: NEG
27476: PUSH
27477: LD_INT 2
27479: NEG
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 2
27487: PUSH
27488: LD_INT 1
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: LD_INT 2
27497: PUSH
27498: LD_INT 2
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 1
27507: PUSH
27508: LD_INT 2
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PUSH
27515: LD_INT 2
27517: NEG
27518: PUSH
27519: LD_INT 1
27521: NEG
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: LD_INT 2
27529: NEG
27530: PUSH
27531: LD_INT 2
27533: NEG
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 2
27541: NEG
27542: PUSH
27543: LD_INT 3
27545: NEG
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: LD_INT 3
27553: NEG
27554: PUSH
27555: LD_INT 2
27557: NEG
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: PUSH
27563: LD_INT 3
27565: NEG
27566: PUSH
27567: LD_INT 3
27569: NEG
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27593: LD_ADDR_VAR 0 14
27597: PUSH
27598: LD_INT 0
27600: PUSH
27601: LD_INT 0
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: LD_INT 0
27610: PUSH
27611: LD_INT 1
27613: NEG
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: LD_INT 1
27621: PUSH
27622: LD_INT 0
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 1
27631: PUSH
27632: LD_INT 1
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 0
27641: PUSH
27642: LD_INT 1
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: LD_INT 1
27651: NEG
27652: PUSH
27653: LD_INT 0
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 1
27662: NEG
27663: PUSH
27664: LD_INT 1
27666: NEG
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 1
27674: NEG
27675: PUSH
27676: LD_INT 2
27678: NEG
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: LD_INT 0
27686: PUSH
27687: LD_INT 2
27689: NEG
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 1
27697: PUSH
27698: LD_INT 1
27700: NEG
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: LD_INT 1
27708: PUSH
27709: LD_INT 2
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: LD_INT 0
27718: PUSH
27719: LD_INT 2
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: LD_INT 1
27728: NEG
27729: PUSH
27730: LD_INT 1
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 1
27739: NEG
27740: PUSH
27741: LD_INT 3
27743: NEG
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: PUSH
27749: LD_INT 0
27751: PUSH
27752: LD_INT 3
27754: NEG
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: PUSH
27760: LD_INT 1
27762: PUSH
27763: LD_INT 2
27765: NEG
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27789: LD_ADDR_VAR 0 15
27793: PUSH
27794: LD_INT 0
27796: PUSH
27797: LD_INT 0
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 0
27806: PUSH
27807: LD_INT 1
27809: NEG
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: LD_INT 1
27817: PUSH
27818: LD_INT 0
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: LD_INT 1
27827: PUSH
27828: LD_INT 1
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: LD_INT 0
27837: PUSH
27838: LD_INT 1
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 1
27847: NEG
27848: PUSH
27849: LD_INT 0
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: LD_INT 1
27858: NEG
27859: PUSH
27860: LD_INT 1
27862: NEG
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: PUSH
27868: LD_INT 1
27870: PUSH
27871: LD_INT 1
27873: NEG
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: PUSH
27879: LD_INT 2
27881: PUSH
27882: LD_INT 0
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: LD_INT 2
27891: PUSH
27892: LD_INT 1
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: LD_INT 1
27901: NEG
27902: PUSH
27903: LD_INT 1
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: LD_INT 2
27912: NEG
27913: PUSH
27914: LD_INT 0
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 2
27923: NEG
27924: PUSH
27925: LD_INT 1
27927: NEG
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: LD_INT 2
27935: PUSH
27936: LD_INT 1
27938: NEG
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PUSH
27944: LD_INT 3
27946: PUSH
27947: LD_INT 0
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: PUSH
27954: LD_INT 3
27956: PUSH
27957: LD_INT 1
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27982: LD_ADDR_VAR 0 16
27986: PUSH
27987: LD_INT 0
27989: PUSH
27990: LD_INT 0
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: LD_INT 0
27999: PUSH
28000: LD_INT 1
28002: NEG
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: LD_INT 1
28010: PUSH
28011: LD_INT 0
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: LD_INT 1
28020: PUSH
28021: LD_INT 1
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: PUSH
28028: LD_INT 0
28030: PUSH
28031: LD_INT 1
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PUSH
28038: LD_INT 1
28040: NEG
28041: PUSH
28042: LD_INT 0
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: LD_INT 1
28051: NEG
28052: PUSH
28053: LD_INT 1
28055: NEG
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 1
28063: NEG
28064: PUSH
28065: LD_INT 2
28067: NEG
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_INT 2
28075: PUSH
28076: LD_INT 1
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 2
28085: PUSH
28086: LD_INT 2
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: LD_INT 1
28095: PUSH
28096: LD_INT 2
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 2
28105: NEG
28106: PUSH
28107: LD_INT 1
28109: NEG
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: LD_INT 2
28117: NEG
28118: PUSH
28119: LD_INT 2
28121: NEG
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: LD_INT 3
28129: PUSH
28130: LD_INT 2
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 3
28139: PUSH
28140: LD_INT 3
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 2
28149: PUSH
28150: LD_INT 3
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28175: LD_ADDR_VAR 0 17
28179: PUSH
28180: LD_INT 0
28182: PUSH
28183: LD_INT 0
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 0
28192: PUSH
28193: LD_INT 1
28195: NEG
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: LD_INT 1
28203: PUSH
28204: LD_INT 0
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 1
28213: PUSH
28214: LD_INT 1
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 0
28223: PUSH
28224: LD_INT 1
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 1
28233: NEG
28234: PUSH
28235: LD_INT 0
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 1
28244: NEG
28245: PUSH
28246: LD_INT 1
28248: NEG
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: LD_INT 1
28256: NEG
28257: PUSH
28258: LD_INT 2
28260: NEG
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 0
28268: PUSH
28269: LD_INT 2
28271: NEG
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 1
28279: PUSH
28280: LD_INT 1
28282: NEG
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 2
28290: PUSH
28291: LD_INT 0
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: LD_INT 2
28300: PUSH
28301: LD_INT 1
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: LD_INT 2
28310: PUSH
28311: LD_INT 2
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: LD_INT 1
28320: PUSH
28321: LD_INT 2
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 0
28330: PUSH
28331: LD_INT 2
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 1
28340: NEG
28341: PUSH
28342: LD_INT 1
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: LD_INT 2
28351: NEG
28352: PUSH
28353: LD_INT 0
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PUSH
28360: LD_INT 2
28362: NEG
28363: PUSH
28364: LD_INT 1
28366: NEG
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 2
28374: NEG
28375: PUSH
28376: LD_INT 2
28378: NEG
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: LIST
28404: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28405: LD_ADDR_VAR 0 18
28409: PUSH
28410: LD_INT 0
28412: PUSH
28413: LD_INT 0
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 0
28422: PUSH
28423: LD_INT 1
28425: NEG
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 1
28433: PUSH
28434: LD_INT 0
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 1
28443: PUSH
28444: LD_INT 1
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 0
28453: PUSH
28454: LD_INT 1
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 1
28463: NEG
28464: PUSH
28465: LD_INT 0
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 1
28474: NEG
28475: PUSH
28476: LD_INT 1
28478: NEG
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PUSH
28484: LD_INT 1
28486: NEG
28487: PUSH
28488: LD_INT 2
28490: NEG
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: LD_INT 0
28498: PUSH
28499: LD_INT 2
28501: NEG
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: LD_INT 1
28509: PUSH
28510: LD_INT 1
28512: NEG
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: LD_INT 2
28520: PUSH
28521: LD_INT 0
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: PUSH
28528: LD_INT 2
28530: PUSH
28531: LD_INT 1
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 2
28540: PUSH
28541: LD_INT 2
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PUSH
28548: LD_INT 1
28550: PUSH
28551: LD_INT 2
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: LD_INT 0
28560: PUSH
28561: LD_INT 2
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PUSH
28568: LD_INT 1
28570: NEG
28571: PUSH
28572: LD_INT 1
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: PUSH
28579: LD_INT 2
28581: NEG
28582: PUSH
28583: LD_INT 0
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PUSH
28590: LD_INT 2
28592: NEG
28593: PUSH
28594: LD_INT 1
28596: NEG
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: LD_INT 2
28604: NEG
28605: PUSH
28606: LD_INT 2
28608: NEG
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28635: LD_ADDR_VAR 0 19
28639: PUSH
28640: LD_INT 0
28642: PUSH
28643: LD_INT 0
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 0
28652: PUSH
28653: LD_INT 1
28655: NEG
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: LD_INT 1
28663: PUSH
28664: LD_INT 0
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: LD_INT 1
28673: PUSH
28674: LD_INT 1
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 0
28683: PUSH
28684: LD_INT 1
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 1
28693: NEG
28694: PUSH
28695: LD_INT 0
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 1
28704: NEG
28705: PUSH
28706: LD_INT 1
28708: NEG
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: LD_INT 1
28716: NEG
28717: PUSH
28718: LD_INT 2
28720: NEG
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: PUSH
28726: LD_INT 0
28728: PUSH
28729: LD_INT 2
28731: NEG
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 1
28739: PUSH
28740: LD_INT 1
28742: NEG
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 2
28750: PUSH
28751: LD_INT 0
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 2
28760: PUSH
28761: LD_INT 1
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: LD_INT 2
28770: PUSH
28771: LD_INT 2
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 1
28780: PUSH
28781: LD_INT 2
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: LD_INT 0
28790: PUSH
28791: LD_INT 2
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: PUSH
28798: LD_INT 1
28800: NEG
28801: PUSH
28802: LD_INT 1
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: LD_INT 2
28811: NEG
28812: PUSH
28813: LD_INT 0
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PUSH
28820: LD_INT 2
28822: NEG
28823: PUSH
28824: LD_INT 1
28826: NEG
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: LD_INT 2
28834: NEG
28835: PUSH
28836: LD_INT 2
28838: NEG
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28865: LD_ADDR_VAR 0 20
28869: PUSH
28870: LD_INT 0
28872: PUSH
28873: LD_INT 0
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: PUSH
28880: LD_INT 0
28882: PUSH
28883: LD_INT 1
28885: NEG
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: LD_INT 1
28893: PUSH
28894: LD_INT 0
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 1
28903: PUSH
28904: LD_INT 1
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 0
28913: PUSH
28914: LD_INT 1
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PUSH
28921: LD_INT 1
28923: NEG
28924: PUSH
28925: LD_INT 0
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 1
28934: NEG
28935: PUSH
28936: LD_INT 1
28938: NEG
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PUSH
28944: LD_INT 1
28946: NEG
28947: PUSH
28948: LD_INT 2
28950: NEG
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PUSH
28956: LD_INT 0
28958: PUSH
28959: LD_INT 2
28961: NEG
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 1
28969: PUSH
28970: LD_INT 1
28972: NEG
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: LD_INT 2
28980: PUSH
28981: LD_INT 0
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: LD_INT 2
28990: PUSH
28991: LD_INT 1
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 2
29000: PUSH
29001: LD_INT 2
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 1
29010: PUSH
29011: LD_INT 2
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: LD_INT 0
29020: PUSH
29021: LD_INT 2
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 1
29030: NEG
29031: PUSH
29032: LD_INT 1
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: LD_INT 2
29041: NEG
29042: PUSH
29043: LD_INT 0
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 2
29052: NEG
29053: PUSH
29054: LD_INT 1
29056: NEG
29057: PUSH
29058: EMPTY
29059: LIST
29060: LIST
29061: PUSH
29062: LD_INT 2
29064: NEG
29065: PUSH
29066: LD_INT 2
29068: NEG
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29095: LD_ADDR_VAR 0 21
29099: PUSH
29100: LD_INT 0
29102: PUSH
29103: LD_INT 0
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 0
29112: PUSH
29113: LD_INT 1
29115: NEG
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: LD_INT 1
29123: PUSH
29124: LD_INT 0
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 1
29133: PUSH
29134: LD_INT 1
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 0
29143: PUSH
29144: LD_INT 1
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: LD_INT 1
29153: NEG
29154: PUSH
29155: LD_INT 0
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 1
29164: NEG
29165: PUSH
29166: LD_INT 1
29168: NEG
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: LD_INT 1
29176: NEG
29177: PUSH
29178: LD_INT 2
29180: NEG
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 0
29188: PUSH
29189: LD_INT 2
29191: NEG
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_INT 1
29199: PUSH
29200: LD_INT 1
29202: NEG
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: LD_INT 2
29210: PUSH
29211: LD_INT 0
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: LD_INT 2
29220: PUSH
29221: LD_INT 1
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: LD_INT 2
29230: PUSH
29231: LD_INT 2
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: LD_INT 1
29240: PUSH
29241: LD_INT 2
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: PUSH
29248: LD_INT 0
29250: PUSH
29251: LD_INT 2
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: LD_INT 1
29260: NEG
29261: PUSH
29262: LD_INT 1
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 2
29271: NEG
29272: PUSH
29273: LD_INT 0
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: LD_INT 2
29282: NEG
29283: PUSH
29284: LD_INT 1
29286: NEG
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PUSH
29292: LD_INT 2
29294: NEG
29295: PUSH
29296: LD_INT 2
29298: NEG
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29325: LD_ADDR_VAR 0 22
29329: PUSH
29330: LD_INT 0
29332: PUSH
29333: LD_INT 0
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 0
29342: PUSH
29343: LD_INT 1
29345: NEG
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: LD_INT 1
29353: PUSH
29354: LD_INT 0
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: LD_INT 1
29363: PUSH
29364: LD_INT 1
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: LD_INT 0
29373: PUSH
29374: LD_INT 1
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PUSH
29381: LD_INT 1
29383: NEG
29384: PUSH
29385: LD_INT 0
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: LD_INT 1
29394: NEG
29395: PUSH
29396: LD_INT 1
29398: NEG
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: LD_INT 1
29406: NEG
29407: PUSH
29408: LD_INT 2
29410: NEG
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: LD_INT 0
29418: PUSH
29419: LD_INT 2
29421: NEG
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: LD_INT 1
29429: PUSH
29430: LD_INT 1
29432: NEG
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: LD_INT 2
29440: PUSH
29441: LD_INT 0
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: LD_INT 2
29450: PUSH
29451: LD_INT 1
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 2
29460: PUSH
29461: LD_INT 2
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 1
29470: PUSH
29471: LD_INT 2
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PUSH
29478: LD_INT 0
29480: PUSH
29481: LD_INT 2
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: PUSH
29488: LD_INT 1
29490: NEG
29491: PUSH
29492: LD_INT 1
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 2
29501: NEG
29502: PUSH
29503: LD_INT 0
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PUSH
29510: LD_INT 2
29512: NEG
29513: PUSH
29514: LD_INT 1
29516: NEG
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: LD_INT 2
29524: NEG
29525: PUSH
29526: LD_INT 2
29528: NEG
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29555: LD_ADDR_VAR 0 23
29559: PUSH
29560: LD_INT 0
29562: PUSH
29563: LD_INT 0
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 0
29572: PUSH
29573: LD_INT 1
29575: NEG
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 1
29583: PUSH
29584: LD_INT 0
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: LD_INT 1
29593: PUSH
29594: LD_INT 1
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 0
29603: PUSH
29604: LD_INT 1
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 1
29613: NEG
29614: PUSH
29615: LD_INT 0
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: LD_INT 1
29624: NEG
29625: PUSH
29626: LD_INT 1
29628: NEG
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 1
29636: NEG
29637: PUSH
29638: LD_INT 2
29640: NEG
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: PUSH
29646: LD_INT 0
29648: PUSH
29649: LD_INT 2
29651: NEG
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 1
29659: PUSH
29660: LD_INT 1
29662: NEG
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PUSH
29668: LD_INT 2
29670: PUSH
29671: LD_INT 0
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: LD_INT 2
29680: PUSH
29681: LD_INT 1
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: LD_INT 2
29690: PUSH
29691: LD_INT 2
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 1
29700: PUSH
29701: LD_INT 2
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 0
29710: PUSH
29711: LD_INT 2
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 1
29720: NEG
29721: PUSH
29722: LD_INT 1
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 2
29731: NEG
29732: PUSH
29733: LD_INT 0
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 2
29742: NEG
29743: PUSH
29744: LD_INT 1
29746: NEG
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 2
29754: NEG
29755: PUSH
29756: LD_INT 2
29758: NEG
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 2
29766: NEG
29767: PUSH
29768: LD_INT 3
29770: NEG
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 1
29778: NEG
29779: PUSH
29780: LD_INT 3
29782: NEG
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 1
29790: PUSH
29791: LD_INT 2
29793: NEG
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 2
29801: PUSH
29802: LD_INT 1
29804: NEG
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
29835: LD_ADDR_VAR 0 24
29839: PUSH
29840: LD_INT 0
29842: PUSH
29843: LD_INT 0
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 0
29852: PUSH
29853: LD_INT 1
29855: NEG
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: PUSH
29861: LD_INT 1
29863: PUSH
29864: LD_INT 0
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PUSH
29871: LD_INT 1
29873: PUSH
29874: LD_INT 1
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PUSH
29881: LD_INT 0
29883: PUSH
29884: LD_INT 1
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: LD_INT 1
29893: NEG
29894: PUSH
29895: LD_INT 0
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: LD_INT 1
29904: NEG
29905: PUSH
29906: LD_INT 1
29908: NEG
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: LD_INT 1
29916: NEG
29917: PUSH
29918: LD_INT 2
29920: NEG
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 0
29928: PUSH
29929: LD_INT 2
29931: NEG
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 1
29939: PUSH
29940: LD_INT 1
29942: NEG
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 2
29950: PUSH
29951: LD_INT 0
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 2
29960: PUSH
29961: LD_INT 1
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: LD_INT 2
29970: PUSH
29971: LD_INT 2
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: PUSH
29978: LD_INT 1
29980: PUSH
29981: LD_INT 2
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PUSH
29988: LD_INT 0
29990: PUSH
29991: LD_INT 2
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 1
30000: NEG
30001: PUSH
30002: LD_INT 1
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: LD_INT 2
30011: NEG
30012: PUSH
30013: LD_INT 0
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: LD_INT 2
30022: NEG
30023: PUSH
30024: LD_INT 1
30026: NEG
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 2
30034: NEG
30035: PUSH
30036: LD_INT 2
30038: NEG
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 1
30046: PUSH
30047: LD_INT 2
30049: NEG
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: LD_INT 2
30057: PUSH
30058: LD_INT 1
30060: NEG
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 3
30068: PUSH
30069: LD_INT 1
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 3
30078: PUSH
30079: LD_INT 2
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
30111: LD_ADDR_VAR 0 25
30115: PUSH
30116: LD_INT 0
30118: PUSH
30119: LD_INT 0
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: PUSH
30126: LD_INT 0
30128: PUSH
30129: LD_INT 1
30131: NEG
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: LD_INT 1
30139: PUSH
30140: LD_INT 0
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 1
30149: PUSH
30150: LD_INT 1
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 0
30159: PUSH
30160: LD_INT 1
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 1
30169: NEG
30170: PUSH
30171: LD_INT 0
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 1
30180: NEG
30181: PUSH
30182: LD_INT 1
30184: NEG
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 1
30192: NEG
30193: PUSH
30194: LD_INT 2
30196: NEG
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: LD_INT 0
30204: PUSH
30205: LD_INT 2
30207: NEG
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 1
30215: PUSH
30216: LD_INT 1
30218: NEG
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: LD_INT 2
30226: PUSH
30227: LD_INT 0
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: LD_INT 2
30236: PUSH
30237: LD_INT 1
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: LD_INT 2
30246: PUSH
30247: LD_INT 2
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 1
30256: PUSH
30257: LD_INT 2
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 0
30266: PUSH
30267: LD_INT 2
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 1
30276: NEG
30277: PUSH
30278: LD_INT 1
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 2
30287: NEG
30288: PUSH
30289: LD_INT 0
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: LD_INT 2
30298: NEG
30299: PUSH
30300: LD_INT 1
30302: NEG
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: LD_INT 2
30310: NEG
30311: PUSH
30312: LD_INT 2
30314: NEG
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 3
30322: PUSH
30323: LD_INT 1
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 3
30332: PUSH
30333: LD_INT 2
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 2
30342: PUSH
30343: LD_INT 3
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 1
30352: PUSH
30353: LD_INT 3
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30385: LD_ADDR_VAR 0 26
30389: PUSH
30390: LD_INT 0
30392: PUSH
30393: LD_INT 0
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: LD_INT 0
30402: PUSH
30403: LD_INT 1
30405: NEG
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 1
30413: PUSH
30414: LD_INT 0
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 1
30423: PUSH
30424: LD_INT 1
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 0
30433: PUSH
30434: LD_INT 1
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 1
30443: NEG
30444: PUSH
30445: LD_INT 0
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 1
30454: NEG
30455: PUSH
30456: LD_INT 1
30458: NEG
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: LD_INT 1
30466: NEG
30467: PUSH
30468: LD_INT 2
30470: NEG
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: LD_INT 0
30478: PUSH
30479: LD_INT 2
30481: NEG
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: LD_INT 1
30489: PUSH
30490: LD_INT 1
30492: NEG
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 2
30500: PUSH
30501: LD_INT 0
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 2
30510: PUSH
30511: LD_INT 1
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 2
30520: PUSH
30521: LD_INT 2
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 1
30530: PUSH
30531: LD_INT 2
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: LD_INT 0
30540: PUSH
30541: LD_INT 2
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 1
30550: NEG
30551: PUSH
30552: LD_INT 1
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 2
30561: NEG
30562: PUSH
30563: LD_INT 0
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 2
30572: NEG
30573: PUSH
30574: LD_INT 1
30576: NEG
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 2
30584: NEG
30585: PUSH
30586: LD_INT 2
30588: NEG
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PUSH
30594: LD_INT 2
30596: PUSH
30597: LD_INT 3
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 1
30606: PUSH
30607: LD_INT 3
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 1
30616: NEG
30617: PUSH
30618: LD_INT 2
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 2
30627: NEG
30628: PUSH
30629: LD_INT 1
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30661: LD_ADDR_VAR 0 27
30665: PUSH
30666: LD_INT 0
30668: PUSH
30669: LD_INT 0
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 0
30678: PUSH
30679: LD_INT 1
30681: NEG
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PUSH
30687: LD_INT 1
30689: PUSH
30690: LD_INT 0
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 1
30699: PUSH
30700: LD_INT 1
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 0
30709: PUSH
30710: LD_INT 1
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 1
30719: NEG
30720: PUSH
30721: LD_INT 0
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 1
30730: NEG
30731: PUSH
30732: LD_INT 1
30734: NEG
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: LD_INT 1
30742: NEG
30743: PUSH
30744: LD_INT 2
30746: NEG
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 0
30754: PUSH
30755: LD_INT 2
30757: NEG
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: LD_INT 1
30765: PUSH
30766: LD_INT 1
30768: NEG
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: PUSH
30774: LD_INT 2
30776: PUSH
30777: LD_INT 0
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: PUSH
30784: LD_INT 2
30786: PUSH
30787: LD_INT 1
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: LD_INT 2
30796: PUSH
30797: LD_INT 2
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 1
30806: PUSH
30807: LD_INT 2
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: PUSH
30814: LD_INT 0
30816: PUSH
30817: LD_INT 2
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 1
30826: NEG
30827: PUSH
30828: LD_INT 1
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PUSH
30835: LD_INT 2
30837: NEG
30838: PUSH
30839: LD_INT 0
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PUSH
30846: LD_INT 2
30848: NEG
30849: PUSH
30850: LD_INT 1
30852: NEG
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 2
30860: NEG
30861: PUSH
30862: LD_INT 2
30864: NEG
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 1
30872: NEG
30873: PUSH
30874: LD_INT 2
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 2
30883: NEG
30884: PUSH
30885: LD_INT 1
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PUSH
30892: LD_INT 3
30894: NEG
30895: PUSH
30896: LD_INT 1
30898: NEG
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 3
30906: NEG
30907: PUSH
30908: LD_INT 2
30910: NEG
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30941: LD_ADDR_VAR 0 28
30945: PUSH
30946: LD_INT 0
30948: PUSH
30949: LD_INT 0
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: PUSH
30956: LD_INT 0
30958: PUSH
30959: LD_INT 1
30961: NEG
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 1
30969: PUSH
30970: LD_INT 0
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PUSH
30977: LD_INT 1
30979: PUSH
30980: LD_INT 1
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 0
30989: PUSH
30990: LD_INT 1
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 1
30999: NEG
31000: PUSH
31001: LD_INT 0
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 1
31010: NEG
31011: PUSH
31012: LD_INT 1
31014: NEG
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 1
31022: NEG
31023: PUSH
31024: LD_INT 2
31026: NEG
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: LD_INT 0
31034: PUSH
31035: LD_INT 2
31037: NEG
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: LD_INT 1
31045: PUSH
31046: LD_INT 1
31048: NEG
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 2
31056: PUSH
31057: LD_INT 0
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 2
31066: PUSH
31067: LD_INT 1
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 2
31076: PUSH
31077: LD_INT 2
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 1
31086: PUSH
31087: LD_INT 2
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: LD_INT 0
31096: PUSH
31097: LD_INT 2
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 1
31106: NEG
31107: PUSH
31108: LD_INT 1
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 2
31117: NEG
31118: PUSH
31119: LD_INT 0
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 2
31128: NEG
31129: PUSH
31130: LD_INT 1
31132: NEG
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: LD_INT 2
31140: NEG
31141: PUSH
31142: LD_INT 2
31144: NEG
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: PUSH
31150: LD_INT 2
31152: NEG
31153: PUSH
31154: LD_INT 3
31156: NEG
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 1
31164: NEG
31165: PUSH
31166: LD_INT 3
31168: NEG
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 3
31176: NEG
31177: PUSH
31178: LD_INT 1
31180: NEG
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 3
31188: NEG
31189: PUSH
31190: LD_INT 2
31192: NEG
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31223: LD_ADDR_VAR 0 29
31227: PUSH
31228: LD_INT 0
31230: PUSH
31231: LD_INT 0
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 0
31240: PUSH
31241: LD_INT 1
31243: NEG
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 1
31251: PUSH
31252: LD_INT 0
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: LD_INT 1
31261: PUSH
31262: LD_INT 1
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 0
31271: PUSH
31272: LD_INT 1
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 1
31281: NEG
31282: PUSH
31283: LD_INT 0
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 1
31292: NEG
31293: PUSH
31294: LD_INT 1
31296: NEG
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 1
31304: NEG
31305: PUSH
31306: LD_INT 2
31308: NEG
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 0
31316: PUSH
31317: LD_INT 2
31319: NEG
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 1
31327: PUSH
31328: LD_INT 1
31330: NEG
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 2
31338: PUSH
31339: LD_INT 0
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 2
31348: PUSH
31349: LD_INT 1
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 1
31358: PUSH
31359: LD_INT 2
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 0
31368: PUSH
31369: LD_INT 2
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: PUSH
31376: LD_INT 1
31378: NEG
31379: PUSH
31380: LD_INT 1
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 2
31389: NEG
31390: PUSH
31391: LD_INT 1
31393: NEG
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: PUSH
31399: LD_INT 2
31401: NEG
31402: PUSH
31403: LD_INT 2
31405: NEG
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 2
31413: NEG
31414: PUSH
31415: LD_INT 3
31417: NEG
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 2
31425: PUSH
31426: LD_INT 1
31428: NEG
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 3
31436: PUSH
31437: LD_INT 1
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 1
31446: PUSH
31447: LD_INT 3
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: LD_INT 1
31456: NEG
31457: PUSH
31458: LD_INT 2
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: PUSH
31465: LD_INT 3
31467: NEG
31468: PUSH
31469: LD_INT 2
31471: NEG
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31502: LD_ADDR_VAR 0 30
31506: PUSH
31507: LD_INT 0
31509: PUSH
31510: LD_INT 0
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: LD_INT 0
31519: PUSH
31520: LD_INT 1
31522: NEG
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 1
31530: PUSH
31531: LD_INT 0
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 1
31540: PUSH
31541: LD_INT 1
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 0
31550: PUSH
31551: LD_INT 1
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 1
31560: NEG
31561: PUSH
31562: LD_INT 0
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 1
31571: NEG
31572: PUSH
31573: LD_INT 1
31575: NEG
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: PUSH
31581: LD_INT 1
31583: NEG
31584: PUSH
31585: LD_INT 2
31587: NEG
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 0
31595: PUSH
31596: LD_INT 2
31598: NEG
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 1
31606: PUSH
31607: LD_INT 1
31609: NEG
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 2
31617: PUSH
31618: LD_INT 0
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 2
31627: PUSH
31628: LD_INT 1
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 2
31637: PUSH
31638: LD_INT 2
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 1
31647: PUSH
31648: LD_INT 2
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 1
31657: NEG
31658: PUSH
31659: LD_INT 1
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 2
31668: NEG
31669: PUSH
31670: LD_INT 0
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: LD_INT 2
31679: NEG
31680: PUSH
31681: LD_INT 1
31683: NEG
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 1
31691: NEG
31692: PUSH
31693: LD_INT 3
31695: NEG
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 1
31703: PUSH
31704: LD_INT 2
31706: NEG
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: LD_INT 3
31714: PUSH
31715: LD_INT 2
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: PUSH
31722: LD_INT 2
31724: PUSH
31725: LD_INT 3
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 2
31734: NEG
31735: PUSH
31736: LD_INT 1
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 3
31745: NEG
31746: PUSH
31747: LD_INT 1
31749: NEG
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31780: LD_ADDR_VAR 0 31
31784: PUSH
31785: LD_INT 0
31787: PUSH
31788: LD_INT 0
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 0
31797: PUSH
31798: LD_INT 1
31800: NEG
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 1
31808: PUSH
31809: LD_INT 0
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 1
31818: PUSH
31819: LD_INT 1
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 0
31828: PUSH
31829: LD_INT 1
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: LD_INT 1
31838: NEG
31839: PUSH
31840: LD_INT 0
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 1
31849: NEG
31850: PUSH
31851: LD_INT 1
31853: NEG
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 1
31861: NEG
31862: PUSH
31863: LD_INT 2
31865: NEG
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 1
31873: PUSH
31874: LD_INT 1
31876: NEG
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 2
31884: PUSH
31885: LD_INT 0
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 2
31894: PUSH
31895: LD_INT 1
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 2
31904: PUSH
31905: LD_INT 2
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 1
31914: PUSH
31915: LD_INT 2
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 0
31924: PUSH
31925: LD_INT 2
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 1
31934: NEG
31935: PUSH
31936: LD_INT 1
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 2
31945: NEG
31946: PUSH
31947: LD_INT 1
31949: NEG
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PUSH
31955: LD_INT 2
31957: NEG
31958: PUSH
31959: LD_INT 2
31961: NEG
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 2
31969: NEG
31970: PUSH
31971: LD_INT 3
31973: NEG
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 2
31981: PUSH
31982: LD_INT 1
31984: NEG
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 3
31992: PUSH
31993: LD_INT 1
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 1
32002: PUSH
32003: LD_INT 3
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 1
32012: NEG
32013: PUSH
32014: LD_INT 2
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: LD_INT 3
32023: NEG
32024: PUSH
32025: LD_INT 2
32027: NEG
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32058: LD_ADDR_VAR 0 32
32062: PUSH
32063: LD_INT 0
32065: PUSH
32066: LD_INT 0
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 0
32075: PUSH
32076: LD_INT 1
32078: NEG
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: LD_INT 1
32086: PUSH
32087: LD_INT 0
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 1
32096: PUSH
32097: LD_INT 1
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 0
32106: PUSH
32107: LD_INT 1
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 1
32116: NEG
32117: PUSH
32118: LD_INT 0
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 1
32127: NEG
32128: PUSH
32129: LD_INT 1
32131: NEG
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 1
32139: NEG
32140: PUSH
32141: LD_INT 2
32143: NEG
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 0
32151: PUSH
32152: LD_INT 2
32154: NEG
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 1
32162: PUSH
32163: LD_INT 1
32165: NEG
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: LD_INT 2
32173: PUSH
32174: LD_INT 1
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 2
32183: PUSH
32184: LD_INT 2
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 1
32193: PUSH
32194: LD_INT 2
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 0
32203: PUSH
32204: LD_INT 2
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: LD_INT 1
32213: NEG
32214: PUSH
32215: LD_INT 1
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 2
32224: NEG
32225: PUSH
32226: LD_INT 0
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 2
32235: NEG
32236: PUSH
32237: LD_INT 1
32239: NEG
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 1
32247: NEG
32248: PUSH
32249: LD_INT 3
32251: NEG
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 1
32259: PUSH
32260: LD_INT 2
32262: NEG
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 3
32270: PUSH
32271: LD_INT 2
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 2
32280: PUSH
32281: LD_INT 3
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PUSH
32288: LD_INT 2
32290: NEG
32291: PUSH
32292: LD_INT 1
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 3
32301: NEG
32302: PUSH
32303: LD_INT 1
32305: NEG
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32336: LD_ADDR_VAR 0 33
32340: PUSH
32341: LD_INT 0
32343: PUSH
32344: LD_INT 0
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 0
32353: PUSH
32354: LD_INT 1
32356: NEG
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: LD_INT 1
32364: PUSH
32365: LD_INT 0
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 1
32374: PUSH
32375: LD_INT 1
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: LD_INT 0
32384: PUSH
32385: LD_INT 1
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 1
32394: NEG
32395: PUSH
32396: LD_INT 0
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 1
32405: NEG
32406: PUSH
32407: LD_INT 1
32409: NEG
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 1
32417: NEG
32418: PUSH
32419: LD_INT 2
32421: NEG
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 1
32429: PUSH
32430: LD_INT 1
32432: NEG
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 2
32440: PUSH
32441: LD_INT 0
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 2
32450: PUSH
32451: LD_INT 1
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 1
32460: PUSH
32461: LD_INT 2
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 0
32470: PUSH
32471: LD_INT 2
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 1
32480: NEG
32481: PUSH
32482: LD_INT 1
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: LD_INT 2
32491: NEG
32492: PUSH
32493: LD_INT 0
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 2
32502: NEG
32503: PUSH
32504: LD_INT 1
32506: NEG
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: LD_INT 2
32514: NEG
32515: PUSH
32516: LD_INT 2
32518: NEG
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 2
32526: NEG
32527: PUSH
32528: LD_INT 3
32530: NEG
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PUSH
32536: LD_INT 2
32538: PUSH
32539: LD_INT 1
32541: NEG
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 3
32549: PUSH
32550: LD_INT 1
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 1
32559: PUSH
32560: LD_INT 3
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 1
32569: NEG
32570: PUSH
32571: LD_INT 2
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 3
32580: NEG
32581: PUSH
32582: LD_INT 2
32584: NEG
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32615: LD_ADDR_VAR 0 34
32619: PUSH
32620: LD_INT 0
32622: PUSH
32623: LD_INT 0
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PUSH
32630: LD_INT 0
32632: PUSH
32633: LD_INT 1
32635: NEG
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PUSH
32641: LD_INT 1
32643: PUSH
32644: LD_INT 0
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 1
32653: PUSH
32654: LD_INT 1
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 0
32663: PUSH
32664: LD_INT 1
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 1
32673: NEG
32674: PUSH
32675: LD_INT 0
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 1
32684: NEG
32685: PUSH
32686: LD_INT 1
32688: NEG
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 1
32696: NEG
32697: PUSH
32698: LD_INT 2
32700: NEG
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 0
32708: PUSH
32709: LD_INT 2
32711: NEG
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 1
32719: PUSH
32720: LD_INT 1
32722: NEG
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 2
32730: PUSH
32731: LD_INT 1
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 2
32740: PUSH
32741: LD_INT 2
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: LD_INT 1
32750: PUSH
32751: LD_INT 2
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 1
32760: NEG
32761: PUSH
32762: LD_INT 1
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 2
32771: NEG
32772: PUSH
32773: LD_INT 0
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 2
32782: NEG
32783: PUSH
32784: LD_INT 1
32786: NEG
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 2
32794: NEG
32795: PUSH
32796: LD_INT 2
32798: NEG
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 1
32806: NEG
32807: PUSH
32808: LD_INT 3
32810: NEG
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 1
32818: PUSH
32819: LD_INT 2
32821: NEG
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 3
32829: PUSH
32830: LD_INT 2
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 2
32839: PUSH
32840: LD_INT 3
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 2
32849: NEG
32850: PUSH
32851: LD_INT 1
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 3
32860: NEG
32861: PUSH
32862: LD_INT 1
32864: NEG
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32895: LD_ADDR_VAR 0 35
32899: PUSH
32900: LD_INT 0
32902: PUSH
32903: LD_INT 0
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 0
32912: PUSH
32913: LD_INT 1
32915: NEG
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 1
32923: PUSH
32924: LD_INT 0
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: LD_INT 1
32933: PUSH
32934: LD_INT 1
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 0
32943: PUSH
32944: LD_INT 1
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: LD_INT 1
32953: NEG
32954: PUSH
32955: LD_INT 0
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 1
32964: NEG
32965: PUSH
32966: LD_INT 1
32968: NEG
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 2
32976: PUSH
32977: LD_INT 1
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 2
32986: NEG
32987: PUSH
32988: LD_INT 1
32990: NEG
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33007: LD_ADDR_VAR 0 36
33011: PUSH
33012: LD_INT 0
33014: PUSH
33015: LD_INT 0
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 0
33024: PUSH
33025: LD_INT 1
33027: NEG
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 1
33035: PUSH
33036: LD_INT 0
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 1
33045: PUSH
33046: LD_INT 1
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 0
33055: PUSH
33056: LD_INT 1
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 1
33065: NEG
33066: PUSH
33067: LD_INT 0
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 1
33076: NEG
33077: PUSH
33078: LD_INT 1
33080: NEG
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 1
33088: NEG
33089: PUSH
33090: LD_INT 2
33092: NEG
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 1
33100: PUSH
33101: LD_INT 2
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33119: LD_ADDR_VAR 0 37
33123: PUSH
33124: LD_INT 0
33126: PUSH
33127: LD_INT 0
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 0
33136: PUSH
33137: LD_INT 1
33139: NEG
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: LD_INT 1
33147: PUSH
33148: LD_INT 0
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: PUSH
33155: LD_INT 1
33157: PUSH
33158: LD_INT 1
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 0
33167: PUSH
33168: LD_INT 1
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 1
33177: NEG
33178: PUSH
33179: LD_INT 0
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 1
33188: NEG
33189: PUSH
33190: LD_INT 1
33192: NEG
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 1
33200: PUSH
33201: LD_INT 1
33203: NEG
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 1
33211: NEG
33212: PUSH
33213: LD_INT 1
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
33231: LD_ADDR_VAR 0 38
33235: PUSH
33236: LD_INT 0
33238: PUSH
33239: LD_INT 0
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: PUSH
33246: LD_INT 0
33248: PUSH
33249: LD_INT 1
33251: NEG
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: LD_INT 1
33259: PUSH
33260: LD_INT 0
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: LD_INT 1
33269: PUSH
33270: LD_INT 1
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 0
33279: PUSH
33280: LD_INT 1
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 1
33289: NEG
33290: PUSH
33291: LD_INT 0
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PUSH
33298: LD_INT 1
33300: NEG
33301: PUSH
33302: LD_INT 1
33304: NEG
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 2
33312: PUSH
33313: LD_INT 1
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 2
33322: NEG
33323: PUSH
33324: LD_INT 1
33326: NEG
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33343: LD_ADDR_VAR 0 39
33347: PUSH
33348: LD_INT 0
33350: PUSH
33351: LD_INT 0
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 0
33360: PUSH
33361: LD_INT 1
33363: NEG
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 1
33371: PUSH
33372: LD_INT 0
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 1
33381: PUSH
33382: LD_INT 1
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 0
33391: PUSH
33392: LD_INT 1
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 1
33401: NEG
33402: PUSH
33403: LD_INT 0
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 1
33412: NEG
33413: PUSH
33414: LD_INT 1
33416: NEG
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PUSH
33422: LD_INT 1
33424: NEG
33425: PUSH
33426: LD_INT 2
33428: NEG
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: LD_INT 1
33436: PUSH
33437: LD_INT 2
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33455: LD_ADDR_VAR 0 40
33459: PUSH
33460: LD_INT 0
33462: PUSH
33463: LD_INT 0
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 0
33472: PUSH
33473: LD_INT 1
33475: NEG
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 1
33483: PUSH
33484: LD_INT 0
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 1
33493: PUSH
33494: LD_INT 1
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 0
33503: PUSH
33504: LD_INT 1
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 1
33513: NEG
33514: PUSH
33515: LD_INT 0
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 1
33524: NEG
33525: PUSH
33526: LD_INT 1
33528: NEG
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 1
33536: PUSH
33537: LD_INT 1
33539: NEG
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_INT 1
33547: NEG
33548: PUSH
33549: LD_INT 1
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33567: LD_ADDR_VAR 0 41
33571: PUSH
33572: LD_INT 0
33574: PUSH
33575: LD_INT 0
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 0
33584: PUSH
33585: LD_INT 1
33587: NEG
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 1
33595: PUSH
33596: LD_INT 0
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 1
33605: PUSH
33606: LD_INT 1
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 0
33615: PUSH
33616: LD_INT 1
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 1
33625: NEG
33626: PUSH
33627: LD_INT 0
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 1
33636: NEG
33637: PUSH
33638: LD_INT 1
33640: NEG
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: PUSH
33646: LD_INT 1
33648: NEG
33649: PUSH
33650: LD_INT 2
33652: NEG
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: LD_INT 1
33660: PUSH
33661: LD_INT 1
33663: NEG
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: LD_INT 2
33671: PUSH
33672: LD_INT 0
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 2
33681: PUSH
33682: LD_INT 1
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 2
33691: PUSH
33692: LD_INT 2
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 1
33701: PUSH
33702: LD_INT 2
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 1
33711: NEG
33712: PUSH
33713: LD_INT 1
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PUSH
33720: LD_INT 2
33722: NEG
33723: PUSH
33724: LD_INT 0
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 2
33733: NEG
33734: PUSH
33735: LD_INT 1
33737: NEG
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 2
33745: NEG
33746: PUSH
33747: LD_INT 2
33749: NEG
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 2
33757: NEG
33758: PUSH
33759: LD_INT 3
33761: NEG
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: LD_INT 2
33769: PUSH
33770: LD_INT 1
33772: NEG
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 3
33780: PUSH
33781: LD_INT 0
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 3
33790: PUSH
33791: LD_INT 1
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 3
33800: PUSH
33801: LD_INT 2
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 3
33810: PUSH
33811: LD_INT 3
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 2
33820: PUSH
33821: LD_INT 3
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 2
33830: NEG
33831: PUSH
33832: LD_INT 1
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 3
33841: NEG
33842: PUSH
33843: LD_INT 0
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 3
33852: NEG
33853: PUSH
33854: LD_INT 1
33856: NEG
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 3
33864: NEG
33865: PUSH
33866: LD_INT 2
33868: NEG
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 3
33876: NEG
33877: PUSH
33878: LD_INT 3
33880: NEG
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33917: LD_ADDR_VAR 0 42
33921: PUSH
33922: LD_INT 0
33924: PUSH
33925: LD_INT 0
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: LD_INT 0
33934: PUSH
33935: LD_INT 1
33937: NEG
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 1
33945: PUSH
33946: LD_INT 0
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 1
33955: PUSH
33956: LD_INT 1
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 0
33965: PUSH
33966: LD_INT 1
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 1
33975: NEG
33976: PUSH
33977: LD_INT 0
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 1
33986: NEG
33987: PUSH
33988: LD_INT 1
33990: NEG
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: LD_INT 1
33998: NEG
33999: PUSH
34000: LD_INT 2
34002: NEG
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: PUSH
34008: LD_INT 0
34010: PUSH
34011: LD_INT 2
34013: NEG
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 1
34021: PUSH
34022: LD_INT 1
34024: NEG
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 2
34032: PUSH
34033: LD_INT 1
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 2
34042: PUSH
34043: LD_INT 2
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 1
34052: PUSH
34053: LD_INT 2
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 0
34062: PUSH
34063: LD_INT 2
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 1
34072: NEG
34073: PUSH
34074: LD_INT 1
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 2
34083: NEG
34084: PUSH
34085: LD_INT 1
34087: NEG
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: LD_INT 2
34095: NEG
34096: PUSH
34097: LD_INT 2
34099: NEG
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 2
34107: NEG
34108: PUSH
34109: LD_INT 3
34111: NEG
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 1
34119: NEG
34120: PUSH
34121: LD_INT 3
34123: NEG
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 0
34131: PUSH
34132: LD_INT 3
34134: NEG
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 1
34142: PUSH
34143: LD_INT 2
34145: NEG
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 3
34153: PUSH
34154: LD_INT 2
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 3
34163: PUSH
34164: LD_INT 3
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 2
34173: PUSH
34174: LD_INT 3
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 1
34183: PUSH
34184: LD_INT 3
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 0
34193: PUSH
34194: LD_INT 3
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 1
34203: NEG
34204: PUSH
34205: LD_INT 2
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 3
34214: NEG
34215: PUSH
34216: LD_INT 2
34218: NEG
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: LD_INT 3
34226: NEG
34227: PUSH
34228: LD_INT 3
34230: NEG
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34267: LD_ADDR_VAR 0 43
34271: PUSH
34272: LD_INT 0
34274: PUSH
34275: LD_INT 0
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 0
34284: PUSH
34285: LD_INT 1
34287: NEG
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 1
34295: PUSH
34296: LD_INT 0
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: LD_INT 1
34305: PUSH
34306: LD_INT 1
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 0
34315: PUSH
34316: LD_INT 1
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: LD_INT 1
34325: NEG
34326: PUSH
34327: LD_INT 0
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 1
34336: NEG
34337: PUSH
34338: LD_INT 1
34340: NEG
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 1
34348: NEG
34349: PUSH
34350: LD_INT 2
34352: NEG
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: PUSH
34358: LD_INT 0
34360: PUSH
34361: LD_INT 2
34363: NEG
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 1
34371: PUSH
34372: LD_INT 1
34374: NEG
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 2
34382: PUSH
34383: LD_INT 0
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: LD_INT 2
34392: PUSH
34393: LD_INT 1
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 1
34402: PUSH
34403: LD_INT 2
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 0
34412: PUSH
34413: LD_INT 2
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: PUSH
34420: LD_INT 1
34422: NEG
34423: PUSH
34424: LD_INT 1
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 2
34433: NEG
34434: PUSH
34435: LD_INT 0
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 2
34444: NEG
34445: PUSH
34446: LD_INT 1
34448: NEG
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 1
34456: NEG
34457: PUSH
34458: LD_INT 3
34460: NEG
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 0
34468: PUSH
34469: LD_INT 3
34471: NEG
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: LD_INT 1
34479: PUSH
34480: LD_INT 2
34482: NEG
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 2
34490: PUSH
34491: LD_INT 1
34493: NEG
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 3
34501: PUSH
34502: LD_INT 0
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: LD_INT 3
34511: PUSH
34512: LD_INT 1
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 1
34521: PUSH
34522: LD_INT 3
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 0
34531: PUSH
34532: LD_INT 3
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: PUSH
34539: LD_INT 1
34541: NEG
34542: PUSH
34543: LD_INT 2
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 2
34552: NEG
34553: PUSH
34554: LD_INT 1
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 3
34563: NEG
34564: PUSH
34565: LD_INT 0
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 3
34574: NEG
34575: PUSH
34576: LD_INT 1
34578: NEG
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34615: LD_ADDR_VAR 0 44
34619: PUSH
34620: LD_INT 0
34622: PUSH
34623: LD_INT 0
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 0
34632: PUSH
34633: LD_INT 1
34635: NEG
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 1
34643: PUSH
34644: LD_INT 0
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_INT 1
34653: PUSH
34654: LD_INT 1
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 0
34663: PUSH
34664: LD_INT 1
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 1
34673: NEG
34674: PUSH
34675: LD_INT 0
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 1
34684: NEG
34685: PUSH
34686: LD_INT 1
34688: NEG
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 1
34696: NEG
34697: PUSH
34698: LD_INT 2
34700: NEG
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 1
34708: PUSH
34709: LD_INT 1
34711: NEG
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: PUSH
34717: LD_INT 2
34719: PUSH
34720: LD_INT 0
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 2
34729: PUSH
34730: LD_INT 1
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 2
34739: PUSH
34740: LD_INT 2
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 1
34749: PUSH
34750: LD_INT 2
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 1
34759: NEG
34760: PUSH
34761: LD_INT 1
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 2
34770: NEG
34771: PUSH
34772: LD_INT 0
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 2
34781: NEG
34782: PUSH
34783: LD_INT 1
34785: NEG
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PUSH
34791: LD_INT 2
34793: NEG
34794: PUSH
34795: LD_INT 2
34797: NEG
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: PUSH
34803: LD_INT 2
34805: NEG
34806: PUSH
34807: LD_INT 3
34809: NEG
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 2
34817: PUSH
34818: LD_INT 1
34820: NEG
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 3
34828: PUSH
34829: LD_INT 0
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 3
34838: PUSH
34839: LD_INT 1
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: LD_INT 3
34848: PUSH
34849: LD_INT 2
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: LD_INT 3
34858: PUSH
34859: LD_INT 3
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: LD_INT 2
34868: PUSH
34869: LD_INT 3
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 2
34878: NEG
34879: PUSH
34880: LD_INT 1
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: LD_INT 3
34889: NEG
34890: PUSH
34891: LD_INT 0
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 3
34900: NEG
34901: PUSH
34902: LD_INT 1
34904: NEG
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: LD_INT 3
34912: NEG
34913: PUSH
34914: LD_INT 2
34916: NEG
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: PUSH
34922: LD_INT 3
34924: NEG
34925: PUSH
34926: LD_INT 3
34928: NEG
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34965: LD_ADDR_VAR 0 45
34969: PUSH
34970: LD_INT 0
34972: PUSH
34973: LD_INT 0
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 0
34982: PUSH
34983: LD_INT 1
34985: NEG
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 1
34993: PUSH
34994: LD_INT 0
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 1
35003: PUSH
35004: LD_INT 1
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 0
35013: PUSH
35014: LD_INT 1
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 1
35023: NEG
35024: PUSH
35025: LD_INT 0
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 1
35034: NEG
35035: PUSH
35036: LD_INT 1
35038: NEG
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 1
35046: NEG
35047: PUSH
35048: LD_INT 2
35050: NEG
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 0
35058: PUSH
35059: LD_INT 2
35061: NEG
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 1
35069: PUSH
35070: LD_INT 1
35072: NEG
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 2
35080: PUSH
35081: LD_INT 1
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 2
35090: PUSH
35091: LD_INT 2
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: LD_INT 1
35100: PUSH
35101: LD_INT 2
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 0
35110: PUSH
35111: LD_INT 2
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 1
35120: NEG
35121: PUSH
35122: LD_INT 1
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: LD_INT 2
35131: NEG
35132: PUSH
35133: LD_INT 1
35135: NEG
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 2
35143: NEG
35144: PUSH
35145: LD_INT 2
35147: NEG
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 2
35155: NEG
35156: PUSH
35157: LD_INT 3
35159: NEG
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PUSH
35165: LD_INT 1
35167: NEG
35168: PUSH
35169: LD_INT 3
35171: NEG
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: LD_INT 0
35179: PUSH
35180: LD_INT 3
35182: NEG
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 1
35190: PUSH
35191: LD_INT 2
35193: NEG
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 3
35201: PUSH
35202: LD_INT 2
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 3
35211: PUSH
35212: LD_INT 3
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 2
35221: PUSH
35222: LD_INT 3
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PUSH
35229: LD_INT 1
35231: PUSH
35232: LD_INT 3
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 0
35241: PUSH
35242: LD_INT 3
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 1
35251: NEG
35252: PUSH
35253: LD_INT 2
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 3
35262: NEG
35263: PUSH
35264: LD_INT 2
35266: NEG
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 3
35274: NEG
35275: PUSH
35276: LD_INT 3
35278: NEG
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35315: LD_ADDR_VAR 0 46
35319: PUSH
35320: LD_INT 0
35322: PUSH
35323: LD_INT 0
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 0
35332: PUSH
35333: LD_INT 1
35335: NEG
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 1
35343: PUSH
35344: LD_INT 0
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: LD_INT 1
35353: PUSH
35354: LD_INT 1
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: LD_INT 0
35363: PUSH
35364: LD_INT 1
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 1
35373: NEG
35374: PUSH
35375: LD_INT 0
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 1
35384: NEG
35385: PUSH
35386: LD_INT 1
35388: NEG
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 1
35396: NEG
35397: PUSH
35398: LD_INT 2
35400: NEG
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: PUSH
35406: LD_INT 0
35408: PUSH
35409: LD_INT 2
35411: NEG
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PUSH
35417: LD_INT 1
35419: PUSH
35420: LD_INT 1
35422: NEG
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 2
35430: PUSH
35431: LD_INT 0
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 2
35440: PUSH
35441: LD_INT 1
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: LD_INT 1
35450: PUSH
35451: LD_INT 2
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: LD_INT 0
35460: PUSH
35461: LD_INT 2
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 1
35470: NEG
35471: PUSH
35472: LD_INT 1
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: LD_INT 2
35481: NEG
35482: PUSH
35483: LD_INT 0
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: LD_INT 2
35492: NEG
35493: PUSH
35494: LD_INT 1
35496: NEG
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 1
35504: NEG
35505: PUSH
35506: LD_INT 3
35508: NEG
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PUSH
35514: LD_INT 0
35516: PUSH
35517: LD_INT 3
35519: NEG
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 1
35527: PUSH
35528: LD_INT 2
35530: NEG
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: PUSH
35536: LD_INT 2
35538: PUSH
35539: LD_INT 1
35541: NEG
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: PUSH
35547: LD_INT 3
35549: PUSH
35550: LD_INT 0
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PUSH
35557: LD_INT 3
35559: PUSH
35560: LD_INT 1
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: LD_INT 1
35569: PUSH
35570: LD_INT 3
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: LD_INT 0
35579: PUSH
35580: LD_INT 3
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: PUSH
35587: LD_INT 1
35589: NEG
35590: PUSH
35591: LD_INT 2
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: PUSH
35598: LD_INT 2
35600: NEG
35601: PUSH
35602: LD_INT 1
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: LD_INT 3
35611: NEG
35612: PUSH
35613: LD_INT 0
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PUSH
35620: LD_INT 3
35622: NEG
35623: PUSH
35624: LD_INT 1
35626: NEG
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35663: LD_ADDR_VAR 0 47
35667: PUSH
35668: LD_INT 0
35670: PUSH
35671: LD_INT 0
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 0
35680: PUSH
35681: LD_INT 1
35683: NEG
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: PUSH
35689: LD_INT 1
35691: PUSH
35692: LD_INT 0
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: LD_INT 1
35701: PUSH
35702: LD_INT 1
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 0
35711: PUSH
35712: LD_INT 1
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: LD_INT 1
35721: NEG
35722: PUSH
35723: LD_INT 0
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 1
35732: NEG
35733: PUSH
35734: LD_INT 1
35736: NEG
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 1
35744: NEG
35745: PUSH
35746: LD_INT 2
35748: NEG
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 0
35756: PUSH
35757: LD_INT 2
35759: NEG
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 1
35767: PUSH
35768: LD_INT 1
35770: NEG
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 2
35778: NEG
35779: PUSH
35780: LD_INT 1
35782: NEG
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 2
35790: NEG
35791: PUSH
35792: LD_INT 2
35794: NEG
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35814: LD_ADDR_VAR 0 48
35818: PUSH
35819: LD_INT 0
35821: PUSH
35822: LD_INT 0
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 0
35831: PUSH
35832: LD_INT 1
35834: NEG
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 1
35842: PUSH
35843: LD_INT 0
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 1
35852: PUSH
35853: LD_INT 1
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 0
35862: PUSH
35863: LD_INT 1
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: LD_INT 1
35872: NEG
35873: PUSH
35874: LD_INT 0
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: LD_INT 1
35883: NEG
35884: PUSH
35885: LD_INT 1
35887: NEG
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: LD_INT 1
35895: NEG
35896: PUSH
35897: LD_INT 2
35899: NEG
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 0
35907: PUSH
35908: LD_INT 2
35910: NEG
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 1
35918: PUSH
35919: LD_INT 1
35921: NEG
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 2
35929: PUSH
35930: LD_INT 0
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 2
35939: PUSH
35940: LD_INT 1
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35961: LD_ADDR_VAR 0 49
35965: PUSH
35966: LD_INT 0
35968: PUSH
35969: LD_INT 0
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 0
35978: PUSH
35979: LD_INT 1
35981: NEG
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 1
35989: PUSH
35990: LD_INT 0
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 1
35999: PUSH
36000: LD_INT 1
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 0
36009: PUSH
36010: LD_INT 1
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 1
36019: NEG
36020: PUSH
36021: LD_INT 0
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 1
36030: NEG
36031: PUSH
36032: LD_INT 1
36034: NEG
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: PUSH
36040: LD_INT 1
36042: PUSH
36043: LD_INT 1
36045: NEG
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 2
36053: PUSH
36054: LD_INT 0
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 2
36063: PUSH
36064: LD_INT 1
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 2
36073: PUSH
36074: LD_INT 2
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: LD_INT 1
36083: PUSH
36084: LD_INT 2
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36105: LD_ADDR_VAR 0 50
36109: PUSH
36110: LD_INT 0
36112: PUSH
36113: LD_INT 0
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: LD_INT 0
36122: PUSH
36123: LD_INT 1
36125: NEG
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 1
36133: PUSH
36134: LD_INT 0
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 1
36143: PUSH
36144: LD_INT 1
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 0
36153: PUSH
36154: LD_INT 1
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: LD_INT 1
36163: NEG
36164: PUSH
36165: LD_INT 0
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 1
36174: NEG
36175: PUSH
36176: LD_INT 1
36178: NEG
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: LD_INT 2
36186: PUSH
36187: LD_INT 1
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 2
36196: PUSH
36197: LD_INT 2
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 1
36206: PUSH
36207: LD_INT 2
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 0
36216: PUSH
36217: LD_INT 2
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 1
36226: NEG
36227: PUSH
36228: LD_INT 1
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36249: LD_ADDR_VAR 0 51
36253: PUSH
36254: LD_INT 0
36256: PUSH
36257: LD_INT 0
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: LD_INT 0
36266: PUSH
36267: LD_INT 1
36269: NEG
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 1
36277: PUSH
36278: LD_INT 0
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 1
36287: PUSH
36288: LD_INT 1
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 0
36297: PUSH
36298: LD_INT 1
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 1
36307: NEG
36308: PUSH
36309: LD_INT 0
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 1
36318: NEG
36319: PUSH
36320: LD_INT 1
36322: NEG
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: LD_INT 1
36330: PUSH
36331: LD_INT 2
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 0
36340: PUSH
36341: LD_INT 2
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 1
36350: NEG
36351: PUSH
36352: LD_INT 1
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 2
36361: NEG
36362: PUSH
36363: LD_INT 0
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: PUSH
36370: LD_INT 2
36372: NEG
36373: PUSH
36374: LD_INT 1
36376: NEG
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36396: LD_ADDR_VAR 0 52
36400: PUSH
36401: LD_INT 0
36403: PUSH
36404: LD_INT 0
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 0
36413: PUSH
36414: LD_INT 1
36416: NEG
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 1
36424: PUSH
36425: LD_INT 0
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: LD_INT 1
36434: PUSH
36435: LD_INT 1
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 0
36444: PUSH
36445: LD_INT 1
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 1
36454: NEG
36455: PUSH
36456: LD_INT 0
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 1
36465: NEG
36466: PUSH
36467: LD_INT 1
36469: NEG
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 1
36477: NEG
36478: PUSH
36479: LD_INT 2
36481: NEG
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 1
36489: NEG
36490: PUSH
36491: LD_INT 1
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: PUSH
36498: LD_INT 2
36500: NEG
36501: PUSH
36502: LD_INT 0
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 2
36511: NEG
36512: PUSH
36513: LD_INT 1
36515: NEG
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 2
36523: NEG
36524: PUSH
36525: LD_INT 2
36527: NEG
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36547: LD_ADDR_VAR 0 53
36551: PUSH
36552: LD_INT 0
36554: PUSH
36555: LD_INT 0
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 0
36564: PUSH
36565: LD_INT 1
36567: NEG
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PUSH
36573: LD_INT 1
36575: PUSH
36576: LD_INT 0
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 1
36585: PUSH
36586: LD_INT 1
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 0
36595: PUSH
36596: LD_INT 1
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: LD_INT 1
36605: NEG
36606: PUSH
36607: LD_INT 0
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 1
36616: NEG
36617: PUSH
36618: LD_INT 1
36620: NEG
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 1
36628: NEG
36629: PUSH
36630: LD_INT 2
36632: NEG
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 0
36640: PUSH
36641: LD_INT 2
36643: NEG
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 1
36651: PUSH
36652: LD_INT 1
36654: NEG
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: PUSH
36660: LD_INT 2
36662: PUSH
36663: LD_INT 0
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: LD_INT 2
36672: PUSH
36673: LD_INT 1
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 2
36682: PUSH
36683: LD_INT 2
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 1
36692: PUSH
36693: LD_INT 2
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: PUSH
36700: LD_INT 0
36702: PUSH
36703: LD_INT 2
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: LD_INT 1
36712: NEG
36713: PUSH
36714: LD_INT 1
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: LD_INT 2
36723: NEG
36724: PUSH
36725: LD_INT 0
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PUSH
36732: LD_INT 2
36734: NEG
36735: PUSH
36736: LD_INT 1
36738: NEG
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PUSH
36744: LD_INT 2
36746: NEG
36747: PUSH
36748: LD_INT 2
36750: NEG
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36777: LD_ADDR_VAR 0 54
36781: PUSH
36782: LD_INT 0
36784: PUSH
36785: LD_INT 0
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 0
36794: PUSH
36795: LD_INT 1
36797: NEG
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: LD_INT 1
36805: PUSH
36806: LD_INT 0
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 1
36815: PUSH
36816: LD_INT 1
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 0
36825: PUSH
36826: LD_INT 1
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: LD_INT 1
36835: NEG
36836: PUSH
36837: LD_INT 0
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 1
36846: NEG
36847: PUSH
36848: LD_INT 1
36850: NEG
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 1
36858: NEG
36859: PUSH
36860: LD_INT 2
36862: NEG
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 0
36870: PUSH
36871: LD_INT 2
36873: NEG
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 1
36881: PUSH
36882: LD_INT 1
36884: NEG
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: LD_INT 2
36892: PUSH
36893: LD_INT 0
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 2
36902: PUSH
36903: LD_INT 1
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 2
36912: PUSH
36913: LD_INT 2
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 1
36922: PUSH
36923: LD_INT 2
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 0
36932: PUSH
36933: LD_INT 2
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 1
36942: NEG
36943: PUSH
36944: LD_INT 1
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 2
36953: NEG
36954: PUSH
36955: LD_INT 0
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: LD_INT 2
36964: NEG
36965: PUSH
36966: LD_INT 1
36968: NEG
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: PUSH
36974: LD_INT 2
36976: NEG
36977: PUSH
36978: LD_INT 2
36980: NEG
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37007: LD_ADDR_VAR 0 55
37011: PUSH
37012: LD_INT 0
37014: PUSH
37015: LD_INT 0
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: LD_INT 0
37024: PUSH
37025: LD_INT 1
37027: NEG
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 1
37035: PUSH
37036: LD_INT 0
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 1
37045: PUSH
37046: LD_INT 1
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 0
37055: PUSH
37056: LD_INT 1
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 1
37065: NEG
37066: PUSH
37067: LD_INT 0
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 1
37076: NEG
37077: PUSH
37078: LD_INT 1
37080: NEG
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 1
37088: NEG
37089: PUSH
37090: LD_INT 2
37092: NEG
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 0
37100: PUSH
37101: LD_INT 2
37103: NEG
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: LD_INT 1
37111: PUSH
37112: LD_INT 1
37114: NEG
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: PUSH
37120: LD_INT 2
37122: PUSH
37123: LD_INT 0
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 2
37132: PUSH
37133: LD_INT 1
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 2
37142: PUSH
37143: LD_INT 2
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 1
37152: PUSH
37153: LD_INT 2
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 0
37162: PUSH
37163: LD_INT 2
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 1
37172: NEG
37173: PUSH
37174: LD_INT 1
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: LD_INT 2
37183: NEG
37184: PUSH
37185: LD_INT 0
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: LD_INT 2
37194: NEG
37195: PUSH
37196: LD_INT 1
37198: NEG
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 2
37206: NEG
37207: PUSH
37208: LD_INT 2
37210: NEG
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37237: LD_ADDR_VAR 0 56
37241: PUSH
37242: LD_INT 0
37244: PUSH
37245: LD_INT 0
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 0
37254: PUSH
37255: LD_INT 1
37257: NEG
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PUSH
37263: LD_INT 1
37265: PUSH
37266: LD_INT 0
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: PUSH
37273: LD_INT 1
37275: PUSH
37276: LD_INT 1
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 0
37285: PUSH
37286: LD_INT 1
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: LD_INT 1
37295: NEG
37296: PUSH
37297: LD_INT 0
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 1
37306: NEG
37307: PUSH
37308: LD_INT 1
37310: NEG
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 1
37318: NEG
37319: PUSH
37320: LD_INT 2
37322: NEG
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 0
37330: PUSH
37331: LD_INT 2
37333: NEG
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 1
37341: PUSH
37342: LD_INT 1
37344: NEG
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 2
37352: PUSH
37353: LD_INT 0
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 2
37362: PUSH
37363: LD_INT 1
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 2
37372: PUSH
37373: LD_INT 2
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 1
37382: PUSH
37383: LD_INT 2
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 0
37392: PUSH
37393: LD_INT 2
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 1
37402: NEG
37403: PUSH
37404: LD_INT 1
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 2
37413: NEG
37414: PUSH
37415: LD_INT 0
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 2
37424: NEG
37425: PUSH
37426: LD_INT 1
37428: NEG
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 2
37436: NEG
37437: PUSH
37438: LD_INT 2
37440: NEG
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37467: LD_ADDR_VAR 0 57
37471: PUSH
37472: LD_INT 0
37474: PUSH
37475: LD_INT 0
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 0
37484: PUSH
37485: LD_INT 1
37487: NEG
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 1
37495: PUSH
37496: LD_INT 0
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 1
37505: PUSH
37506: LD_INT 1
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 0
37515: PUSH
37516: LD_INT 1
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 1
37525: NEG
37526: PUSH
37527: LD_INT 0
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 1
37536: NEG
37537: PUSH
37538: LD_INT 1
37540: NEG
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: LD_INT 1
37548: NEG
37549: PUSH
37550: LD_INT 2
37552: NEG
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: LD_INT 0
37560: PUSH
37561: LD_INT 2
37563: NEG
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: LD_INT 1
37571: PUSH
37572: LD_INT 1
37574: NEG
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 2
37582: PUSH
37583: LD_INT 0
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: LD_INT 2
37592: PUSH
37593: LD_INT 1
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 2
37602: PUSH
37603: LD_INT 2
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 1
37612: PUSH
37613: LD_INT 2
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: LD_INT 0
37622: PUSH
37623: LD_INT 2
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PUSH
37630: LD_INT 1
37632: NEG
37633: PUSH
37634: LD_INT 1
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 2
37643: NEG
37644: PUSH
37645: LD_INT 0
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: LD_INT 2
37654: NEG
37655: PUSH
37656: LD_INT 1
37658: NEG
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 2
37666: NEG
37667: PUSH
37668: LD_INT 2
37670: NEG
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37697: LD_ADDR_VAR 0 58
37701: PUSH
37702: LD_INT 0
37704: PUSH
37705: LD_INT 0
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 0
37714: PUSH
37715: LD_INT 1
37717: NEG
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 1
37725: PUSH
37726: LD_INT 0
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 1
37735: PUSH
37736: LD_INT 1
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 0
37745: PUSH
37746: LD_INT 1
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 1
37755: NEG
37756: PUSH
37757: LD_INT 0
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 1
37766: NEG
37767: PUSH
37768: LD_INT 1
37770: NEG
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 1
37778: NEG
37779: PUSH
37780: LD_INT 2
37782: NEG
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 0
37790: PUSH
37791: LD_INT 2
37793: NEG
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 1
37801: PUSH
37802: LD_INT 1
37804: NEG
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 2
37812: PUSH
37813: LD_INT 0
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 2
37822: PUSH
37823: LD_INT 1
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 2
37832: PUSH
37833: LD_INT 2
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 1
37842: PUSH
37843: LD_INT 2
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 0
37852: PUSH
37853: LD_INT 2
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 1
37862: NEG
37863: PUSH
37864: LD_INT 1
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 2
37873: NEG
37874: PUSH
37875: LD_INT 0
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 2
37884: NEG
37885: PUSH
37886: LD_INT 1
37888: NEG
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 2
37896: NEG
37897: PUSH
37898: LD_INT 2
37900: NEG
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37927: LD_ADDR_VAR 0 59
37931: PUSH
37932: LD_INT 0
37934: PUSH
37935: LD_INT 0
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PUSH
37942: LD_INT 0
37944: PUSH
37945: LD_INT 1
37947: NEG
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 1
37955: PUSH
37956: LD_INT 0
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 1
37965: PUSH
37966: LD_INT 1
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 0
37975: PUSH
37976: LD_INT 1
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 1
37985: NEG
37986: PUSH
37987: LD_INT 0
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 1
37996: NEG
37997: PUSH
37998: LD_INT 1
38000: NEG
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38015: LD_ADDR_VAR 0 60
38019: PUSH
38020: LD_INT 0
38022: PUSH
38023: LD_INT 0
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 0
38032: PUSH
38033: LD_INT 1
38035: NEG
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 1
38043: PUSH
38044: LD_INT 0
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 1
38053: PUSH
38054: LD_INT 1
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 0
38063: PUSH
38064: LD_INT 1
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 1
38073: NEG
38074: PUSH
38075: LD_INT 0
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 1
38084: NEG
38085: PUSH
38086: LD_INT 1
38088: NEG
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38103: LD_ADDR_VAR 0 61
38107: PUSH
38108: LD_INT 0
38110: PUSH
38111: LD_INT 0
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: LD_INT 0
38120: PUSH
38121: LD_INT 1
38123: NEG
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 1
38131: PUSH
38132: LD_INT 0
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: LD_INT 1
38141: PUSH
38142: LD_INT 1
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 0
38151: PUSH
38152: LD_INT 1
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: LD_INT 1
38161: NEG
38162: PUSH
38163: LD_INT 0
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 1
38172: NEG
38173: PUSH
38174: LD_INT 1
38176: NEG
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38191: LD_ADDR_VAR 0 62
38195: PUSH
38196: LD_INT 0
38198: PUSH
38199: LD_INT 0
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 0
38208: PUSH
38209: LD_INT 1
38211: NEG
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 1
38219: PUSH
38220: LD_INT 0
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 1
38229: PUSH
38230: LD_INT 1
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 0
38239: PUSH
38240: LD_INT 1
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 1
38249: NEG
38250: PUSH
38251: LD_INT 0
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 1
38260: NEG
38261: PUSH
38262: LD_INT 1
38264: NEG
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38279: LD_ADDR_VAR 0 63
38283: PUSH
38284: LD_INT 0
38286: PUSH
38287: LD_INT 0
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 0
38296: PUSH
38297: LD_INT 1
38299: NEG
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: LD_INT 1
38307: PUSH
38308: LD_INT 0
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: LD_INT 1
38317: PUSH
38318: LD_INT 1
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 0
38327: PUSH
38328: LD_INT 1
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: LD_INT 1
38337: NEG
38338: PUSH
38339: LD_INT 0
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 1
38348: NEG
38349: PUSH
38350: LD_INT 1
38352: NEG
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38367: LD_ADDR_VAR 0 64
38371: PUSH
38372: LD_INT 0
38374: PUSH
38375: LD_INT 0
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 0
38384: PUSH
38385: LD_INT 1
38387: NEG
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 1
38395: PUSH
38396: LD_INT 0
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 1
38405: PUSH
38406: LD_INT 1
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 0
38415: PUSH
38416: LD_INT 1
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 1
38425: NEG
38426: PUSH
38427: LD_INT 0
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PUSH
38434: LD_INT 1
38436: NEG
38437: PUSH
38438: LD_INT 1
38440: NEG
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: ST_TO_ADDR
// end ; 1 :
38455: GO 44352
38457: LD_INT 1
38459: DOUBLE
38460: EQUAL
38461: IFTRUE 38465
38463: GO 41088
38465: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38466: LD_ADDR_VAR 0 11
38470: PUSH
38471: LD_INT 1
38473: NEG
38474: PUSH
38475: LD_INT 3
38477: NEG
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 0
38485: PUSH
38486: LD_INT 3
38488: NEG
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 1
38496: PUSH
38497: LD_INT 2
38499: NEG
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: LIST
38509: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38510: LD_ADDR_VAR 0 12
38514: PUSH
38515: LD_INT 2
38517: PUSH
38518: LD_INT 1
38520: NEG
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 3
38528: PUSH
38529: LD_INT 0
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 3
38538: PUSH
38539: LD_INT 1
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: LIST
38550: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38551: LD_ADDR_VAR 0 13
38555: PUSH
38556: LD_INT 3
38558: PUSH
38559: LD_INT 2
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 3
38568: PUSH
38569: LD_INT 3
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PUSH
38576: LD_INT 2
38578: PUSH
38579: LD_INT 3
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: LIST
38590: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38591: LD_ADDR_VAR 0 14
38595: PUSH
38596: LD_INT 1
38598: PUSH
38599: LD_INT 3
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 0
38608: PUSH
38609: LD_INT 3
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: LD_INT 1
38618: NEG
38619: PUSH
38620: LD_INT 2
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: LIST
38631: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38632: LD_ADDR_VAR 0 15
38636: PUSH
38637: LD_INT 2
38639: NEG
38640: PUSH
38641: LD_INT 1
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 3
38650: NEG
38651: PUSH
38652: LD_INT 0
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 3
38661: NEG
38662: PUSH
38663: LD_INT 1
38665: NEG
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: LIST
38675: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38676: LD_ADDR_VAR 0 16
38680: PUSH
38681: LD_INT 2
38683: NEG
38684: PUSH
38685: LD_INT 3
38687: NEG
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 3
38695: NEG
38696: PUSH
38697: LD_INT 2
38699: NEG
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 3
38707: NEG
38708: PUSH
38709: LD_INT 3
38711: NEG
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: LIST
38721: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38722: LD_ADDR_VAR 0 17
38726: PUSH
38727: LD_INT 1
38729: NEG
38730: PUSH
38731: LD_INT 3
38733: NEG
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 0
38741: PUSH
38742: LD_INT 3
38744: NEG
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 1
38752: PUSH
38753: LD_INT 2
38755: NEG
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: LIST
38765: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38766: LD_ADDR_VAR 0 18
38770: PUSH
38771: LD_INT 2
38773: PUSH
38774: LD_INT 1
38776: NEG
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 3
38784: PUSH
38785: LD_INT 0
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 3
38794: PUSH
38795: LD_INT 1
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: LIST
38806: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38807: LD_ADDR_VAR 0 19
38811: PUSH
38812: LD_INT 3
38814: PUSH
38815: LD_INT 2
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 3
38824: PUSH
38825: LD_INT 3
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_INT 2
38834: PUSH
38835: LD_INT 3
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: LIST
38846: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38847: LD_ADDR_VAR 0 20
38851: PUSH
38852: LD_INT 1
38854: PUSH
38855: LD_INT 3
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 0
38864: PUSH
38865: LD_INT 3
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 1
38874: NEG
38875: PUSH
38876: LD_INT 2
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: LIST
38887: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38888: LD_ADDR_VAR 0 21
38892: PUSH
38893: LD_INT 2
38895: NEG
38896: PUSH
38897: LD_INT 1
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 3
38906: NEG
38907: PUSH
38908: LD_INT 0
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 3
38917: NEG
38918: PUSH
38919: LD_INT 1
38921: NEG
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: LIST
38931: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38932: LD_ADDR_VAR 0 22
38936: PUSH
38937: LD_INT 2
38939: NEG
38940: PUSH
38941: LD_INT 3
38943: NEG
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 3
38951: NEG
38952: PUSH
38953: LD_INT 2
38955: NEG
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 3
38963: NEG
38964: PUSH
38965: LD_INT 3
38967: NEG
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: LIST
38977: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
38978: LD_ADDR_VAR 0 23
38982: PUSH
38983: LD_INT 0
38985: PUSH
38986: LD_INT 3
38988: NEG
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: LD_INT 1
38996: NEG
38997: PUSH
38998: LD_INT 4
39000: NEG
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 1
39008: PUSH
39009: LD_INT 3
39011: NEG
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: LIST
39021: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
39022: LD_ADDR_VAR 0 24
39026: PUSH
39027: LD_INT 3
39029: PUSH
39030: LD_INT 0
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 3
39039: PUSH
39040: LD_INT 1
39042: NEG
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 4
39050: PUSH
39051: LD_INT 1
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: LIST
39062: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
39063: LD_ADDR_VAR 0 25
39067: PUSH
39068: LD_INT 3
39070: PUSH
39071: LD_INT 3
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 4
39080: PUSH
39081: LD_INT 3
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 3
39090: PUSH
39091: LD_INT 4
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: LIST
39102: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
39103: LD_ADDR_VAR 0 26
39107: PUSH
39108: LD_INT 0
39110: PUSH
39111: LD_INT 3
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: LD_INT 1
39120: PUSH
39121: LD_INT 4
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 1
39130: NEG
39131: PUSH
39132: LD_INT 3
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: LIST
39143: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
39144: LD_ADDR_VAR 0 27
39148: PUSH
39149: LD_INT 3
39151: NEG
39152: PUSH
39153: LD_INT 0
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 3
39162: NEG
39163: PUSH
39164: LD_INT 1
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 4
39173: NEG
39174: PUSH
39175: LD_INT 1
39177: NEG
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: LIST
39187: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
39188: LD_ADDR_VAR 0 28
39192: PUSH
39193: LD_INT 3
39195: NEG
39196: PUSH
39197: LD_INT 3
39199: NEG
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 3
39207: NEG
39208: PUSH
39209: LD_INT 4
39211: NEG
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 4
39219: NEG
39220: PUSH
39221: LD_INT 3
39223: NEG
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: LIST
39233: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
39234: LD_ADDR_VAR 0 29
39238: PUSH
39239: LD_INT 1
39241: NEG
39242: PUSH
39243: LD_INT 3
39245: NEG
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 0
39253: PUSH
39254: LD_INT 3
39256: NEG
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 1
39264: PUSH
39265: LD_INT 2
39267: NEG
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 1
39275: NEG
39276: PUSH
39277: LD_INT 4
39279: NEG
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 0
39287: PUSH
39288: LD_INT 4
39290: NEG
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 1
39298: PUSH
39299: LD_INT 3
39301: NEG
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 1
39309: NEG
39310: PUSH
39311: LD_INT 5
39313: NEG
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 0
39321: PUSH
39322: LD_INT 5
39324: NEG
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 1
39332: PUSH
39333: LD_INT 4
39335: NEG
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 1
39343: NEG
39344: PUSH
39345: LD_INT 6
39347: NEG
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 0
39355: PUSH
39356: LD_INT 6
39358: NEG
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 1
39366: PUSH
39367: LD_INT 5
39369: NEG
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
39389: LD_ADDR_VAR 0 30
39393: PUSH
39394: LD_INT 2
39396: PUSH
39397: LD_INT 1
39399: NEG
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PUSH
39405: LD_INT 3
39407: PUSH
39408: LD_INT 0
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PUSH
39415: LD_INT 3
39417: PUSH
39418: LD_INT 1
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 3
39427: PUSH
39428: LD_INT 1
39430: NEG
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 4
39438: PUSH
39439: LD_INT 0
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 4
39448: PUSH
39449: LD_INT 1
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 4
39458: PUSH
39459: LD_INT 1
39461: NEG
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 5
39469: PUSH
39470: LD_INT 0
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 5
39479: PUSH
39480: LD_INT 1
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 5
39489: PUSH
39490: LD_INT 1
39492: NEG
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 6
39500: PUSH
39501: LD_INT 0
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 6
39510: PUSH
39511: LD_INT 1
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
39532: LD_ADDR_VAR 0 31
39536: PUSH
39537: LD_INT 3
39539: PUSH
39540: LD_INT 2
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 3
39549: PUSH
39550: LD_INT 3
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 2
39559: PUSH
39560: LD_INT 3
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 4
39569: PUSH
39570: LD_INT 3
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 4
39579: PUSH
39580: LD_INT 4
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 3
39589: PUSH
39590: LD_INT 4
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 5
39599: PUSH
39600: LD_INT 4
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 5
39609: PUSH
39610: LD_INT 5
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 4
39619: PUSH
39620: LD_INT 5
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 6
39629: PUSH
39630: LD_INT 5
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 6
39639: PUSH
39640: LD_INT 6
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 5
39649: PUSH
39650: LD_INT 6
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
39671: LD_ADDR_VAR 0 32
39675: PUSH
39676: LD_INT 1
39678: PUSH
39679: LD_INT 3
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 0
39688: PUSH
39689: LD_INT 3
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 1
39698: NEG
39699: PUSH
39700: LD_INT 2
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 1
39709: PUSH
39710: LD_INT 4
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 0
39719: PUSH
39720: LD_INT 4
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 1
39729: NEG
39730: PUSH
39731: LD_INT 3
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 1
39740: PUSH
39741: LD_INT 5
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 0
39750: PUSH
39751: LD_INT 5
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 1
39760: NEG
39761: PUSH
39762: LD_INT 4
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 1
39771: PUSH
39772: LD_INT 6
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 0
39781: PUSH
39782: LD_INT 6
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 1
39791: NEG
39792: PUSH
39793: LD_INT 5
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
39814: LD_ADDR_VAR 0 33
39818: PUSH
39819: LD_INT 2
39821: NEG
39822: PUSH
39823: LD_INT 1
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 3
39832: NEG
39833: PUSH
39834: LD_INT 0
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 3
39843: NEG
39844: PUSH
39845: LD_INT 1
39847: NEG
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 3
39855: NEG
39856: PUSH
39857: LD_INT 1
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 4
39866: NEG
39867: PUSH
39868: LD_INT 0
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 4
39877: NEG
39878: PUSH
39879: LD_INT 1
39881: NEG
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 4
39889: NEG
39890: PUSH
39891: LD_INT 1
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 5
39900: NEG
39901: PUSH
39902: LD_INT 0
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 5
39911: NEG
39912: PUSH
39913: LD_INT 1
39915: NEG
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 5
39923: NEG
39924: PUSH
39925: LD_INT 1
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 6
39934: NEG
39935: PUSH
39936: LD_INT 0
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 6
39945: NEG
39946: PUSH
39947: LD_INT 1
39949: NEG
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
39969: LD_ADDR_VAR 0 34
39973: PUSH
39974: LD_INT 2
39976: NEG
39977: PUSH
39978: LD_INT 3
39980: NEG
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 3
39988: NEG
39989: PUSH
39990: LD_INT 2
39992: NEG
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 3
40000: NEG
40001: PUSH
40002: LD_INT 3
40004: NEG
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 3
40012: NEG
40013: PUSH
40014: LD_INT 4
40016: NEG
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 4
40024: NEG
40025: PUSH
40026: LD_INT 3
40028: NEG
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 4
40036: NEG
40037: PUSH
40038: LD_INT 4
40040: NEG
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 4
40048: NEG
40049: PUSH
40050: LD_INT 5
40052: NEG
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 5
40060: NEG
40061: PUSH
40062: LD_INT 4
40064: NEG
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 5
40072: NEG
40073: PUSH
40074: LD_INT 5
40076: NEG
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 5
40084: NEG
40085: PUSH
40086: LD_INT 6
40088: NEG
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 6
40096: NEG
40097: PUSH
40098: LD_INT 5
40100: NEG
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 6
40108: NEG
40109: PUSH
40110: LD_INT 6
40112: NEG
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
40132: LD_ADDR_VAR 0 41
40136: PUSH
40137: LD_INT 0
40139: PUSH
40140: LD_INT 2
40142: NEG
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 1
40150: NEG
40151: PUSH
40152: LD_INT 3
40154: NEG
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 1
40162: PUSH
40163: LD_INT 2
40165: NEG
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: LIST
40175: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
40176: LD_ADDR_VAR 0 42
40180: PUSH
40181: LD_INT 2
40183: PUSH
40184: LD_INT 0
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 2
40193: PUSH
40194: LD_INT 1
40196: NEG
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 3
40204: PUSH
40205: LD_INT 1
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: LIST
40216: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
40217: LD_ADDR_VAR 0 43
40221: PUSH
40222: LD_INT 2
40224: PUSH
40225: LD_INT 2
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 3
40234: PUSH
40235: LD_INT 2
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 2
40244: PUSH
40245: LD_INT 3
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: LIST
40256: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
40257: LD_ADDR_VAR 0 44
40261: PUSH
40262: LD_INT 0
40264: PUSH
40265: LD_INT 2
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 1
40274: PUSH
40275: LD_INT 3
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 1
40284: NEG
40285: PUSH
40286: LD_INT 2
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: LIST
40297: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40298: LD_ADDR_VAR 0 45
40302: PUSH
40303: LD_INT 2
40305: NEG
40306: PUSH
40307: LD_INT 0
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 2
40316: NEG
40317: PUSH
40318: LD_INT 1
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 3
40327: NEG
40328: PUSH
40329: LD_INT 1
40331: NEG
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: LIST
40341: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
40342: LD_ADDR_VAR 0 46
40346: PUSH
40347: LD_INT 2
40349: NEG
40350: PUSH
40351: LD_INT 2
40353: NEG
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 2
40361: NEG
40362: PUSH
40363: LD_INT 3
40365: NEG
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 3
40373: NEG
40374: PUSH
40375: LD_INT 2
40377: NEG
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: LIST
40387: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
40388: LD_ADDR_VAR 0 47
40392: PUSH
40393: LD_INT 2
40395: NEG
40396: PUSH
40397: LD_INT 3
40399: NEG
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 1
40407: NEG
40408: PUSH
40409: LD_INT 3
40411: NEG
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40421: LD_ADDR_VAR 0 48
40425: PUSH
40426: LD_INT 1
40428: PUSH
40429: LD_INT 2
40431: NEG
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 2
40439: PUSH
40440: LD_INT 1
40442: NEG
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
40452: LD_ADDR_VAR 0 49
40456: PUSH
40457: LD_INT 3
40459: PUSH
40460: LD_INT 1
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 3
40469: PUSH
40470: LD_INT 2
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
40481: LD_ADDR_VAR 0 50
40485: PUSH
40486: LD_INT 2
40488: PUSH
40489: LD_INT 3
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 1
40498: PUSH
40499: LD_INT 3
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40510: LD_ADDR_VAR 0 51
40514: PUSH
40515: LD_INT 1
40517: NEG
40518: PUSH
40519: LD_INT 2
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 2
40528: NEG
40529: PUSH
40530: LD_INT 1
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40541: LD_ADDR_VAR 0 52
40545: PUSH
40546: LD_INT 3
40548: NEG
40549: PUSH
40550: LD_INT 1
40552: NEG
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 3
40560: NEG
40561: PUSH
40562: LD_INT 2
40564: NEG
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40574: LD_ADDR_VAR 0 53
40578: PUSH
40579: LD_INT 1
40581: NEG
40582: PUSH
40583: LD_INT 3
40585: NEG
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 0
40593: PUSH
40594: LD_INT 3
40596: NEG
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 1
40604: PUSH
40605: LD_INT 2
40607: NEG
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: LIST
40617: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40618: LD_ADDR_VAR 0 54
40622: PUSH
40623: LD_INT 2
40625: PUSH
40626: LD_INT 1
40628: NEG
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 3
40636: PUSH
40637: LD_INT 0
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 3
40646: PUSH
40647: LD_INT 1
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: LIST
40658: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40659: LD_ADDR_VAR 0 55
40663: PUSH
40664: LD_INT 3
40666: PUSH
40667: LD_INT 2
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 3
40676: PUSH
40677: LD_INT 3
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 2
40686: PUSH
40687: LD_INT 3
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: LIST
40698: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40699: LD_ADDR_VAR 0 56
40703: PUSH
40704: LD_INT 1
40706: PUSH
40707: LD_INT 3
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 0
40716: PUSH
40717: LD_INT 3
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 1
40726: NEG
40727: PUSH
40728: LD_INT 2
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: LIST
40739: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40740: LD_ADDR_VAR 0 57
40744: PUSH
40745: LD_INT 2
40747: NEG
40748: PUSH
40749: LD_INT 1
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 3
40758: NEG
40759: PUSH
40760: LD_INT 0
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 3
40769: NEG
40770: PUSH
40771: LD_INT 1
40773: NEG
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: LIST
40783: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40784: LD_ADDR_VAR 0 58
40788: PUSH
40789: LD_INT 2
40791: NEG
40792: PUSH
40793: LD_INT 3
40795: NEG
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: PUSH
40801: LD_INT 3
40803: NEG
40804: PUSH
40805: LD_INT 2
40807: NEG
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 3
40815: NEG
40816: PUSH
40817: LD_INT 3
40819: NEG
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: LIST
40829: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
40830: LD_ADDR_VAR 0 59
40834: PUSH
40835: LD_INT 1
40837: NEG
40838: PUSH
40839: LD_INT 2
40841: NEG
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 0
40849: PUSH
40850: LD_INT 2
40852: NEG
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 1
40860: PUSH
40861: LD_INT 1
40863: NEG
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: LIST
40873: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40874: LD_ADDR_VAR 0 60
40878: PUSH
40879: LD_INT 1
40881: PUSH
40882: LD_INT 1
40884: NEG
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 2
40892: PUSH
40893: LD_INT 0
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 2
40902: PUSH
40903: LD_INT 1
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: LIST
40914: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40915: LD_ADDR_VAR 0 61
40919: PUSH
40920: LD_INT 2
40922: PUSH
40923: LD_INT 1
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 2
40932: PUSH
40933: LD_INT 2
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: LD_INT 1
40942: PUSH
40943: LD_INT 2
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: LIST
40954: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40955: LD_ADDR_VAR 0 62
40959: PUSH
40960: LD_INT 1
40962: PUSH
40963: LD_INT 2
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 0
40972: PUSH
40973: LD_INT 2
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 1
40982: NEG
40983: PUSH
40984: LD_INT 1
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: LIST
40995: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40996: LD_ADDR_VAR 0 63
41000: PUSH
41001: LD_INT 1
41003: NEG
41004: PUSH
41005: LD_INT 1
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 2
41014: NEG
41015: PUSH
41016: LD_INT 0
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 2
41025: NEG
41026: PUSH
41027: LD_INT 1
41029: NEG
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: LIST
41039: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41040: LD_ADDR_VAR 0 64
41044: PUSH
41045: LD_INT 1
41047: NEG
41048: PUSH
41049: LD_INT 2
41051: NEG
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 2
41059: NEG
41060: PUSH
41061: LD_INT 1
41063: NEG
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 2
41071: NEG
41072: PUSH
41073: LD_INT 2
41075: NEG
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: LIST
41085: ST_TO_ADDR
// end ; 2 :
41086: GO 44352
41088: LD_INT 2
41090: DOUBLE
41091: EQUAL
41092: IFTRUE 41096
41094: GO 44351
41096: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
41097: LD_ADDR_VAR 0 29
41101: PUSH
41102: LD_INT 4
41104: PUSH
41105: LD_INT 0
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 4
41114: PUSH
41115: LD_INT 1
41117: NEG
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 5
41125: PUSH
41126: LD_INT 0
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 5
41135: PUSH
41136: LD_INT 1
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 4
41145: PUSH
41146: LD_INT 1
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 3
41155: PUSH
41156: LD_INT 0
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 3
41165: PUSH
41166: LD_INT 1
41168: NEG
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 3
41176: PUSH
41177: LD_INT 2
41179: NEG
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 5
41187: PUSH
41188: LD_INT 2
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 3
41197: PUSH
41198: LD_INT 3
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 3
41207: PUSH
41208: LD_INT 2
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 4
41217: PUSH
41218: LD_INT 3
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 4
41227: PUSH
41228: LD_INT 4
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 3
41237: PUSH
41238: LD_INT 4
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 2
41247: PUSH
41248: LD_INT 3
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 2
41257: PUSH
41258: LD_INT 2
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 4
41267: PUSH
41268: LD_INT 2
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 2
41277: PUSH
41278: LD_INT 4
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 0
41287: PUSH
41288: LD_INT 4
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 0
41297: PUSH
41298: LD_INT 3
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PUSH
41305: LD_INT 1
41307: PUSH
41308: LD_INT 4
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 1
41317: PUSH
41318: LD_INT 5
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 0
41327: PUSH
41328: LD_INT 5
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 1
41337: NEG
41338: PUSH
41339: LD_INT 4
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 1
41348: NEG
41349: PUSH
41350: LD_INT 3
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 2
41359: PUSH
41360: LD_INT 5
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 2
41369: NEG
41370: PUSH
41371: LD_INT 3
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 3
41380: NEG
41381: PUSH
41382: LD_INT 0
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 3
41391: NEG
41392: PUSH
41393: LD_INT 1
41395: NEG
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 2
41403: NEG
41404: PUSH
41405: LD_INT 0
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 2
41414: NEG
41415: PUSH
41416: LD_INT 1
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 3
41425: NEG
41426: PUSH
41427: LD_INT 1
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 4
41436: NEG
41437: PUSH
41438: LD_INT 0
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 4
41447: NEG
41448: PUSH
41449: LD_INT 1
41451: NEG
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 4
41459: NEG
41460: PUSH
41461: LD_INT 2
41463: NEG
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 2
41471: NEG
41472: PUSH
41473: LD_INT 2
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 4
41482: NEG
41483: PUSH
41484: LD_INT 4
41486: NEG
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 4
41494: NEG
41495: PUSH
41496: LD_INT 5
41498: NEG
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 3
41506: NEG
41507: PUSH
41508: LD_INT 4
41510: NEG
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 3
41518: NEG
41519: PUSH
41520: LD_INT 3
41522: NEG
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 4
41530: NEG
41531: PUSH
41532: LD_INT 3
41534: NEG
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 5
41542: NEG
41543: PUSH
41544: LD_INT 4
41546: NEG
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 5
41554: NEG
41555: PUSH
41556: LD_INT 5
41558: NEG
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 3
41566: NEG
41567: PUSH
41568: LD_INT 5
41570: NEG
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 5
41578: NEG
41579: PUSH
41580: LD_INT 3
41582: NEG
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
41635: LD_ADDR_VAR 0 30
41639: PUSH
41640: LD_INT 4
41642: PUSH
41643: LD_INT 4
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 4
41652: PUSH
41653: LD_INT 3
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 5
41662: PUSH
41663: LD_INT 4
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 5
41672: PUSH
41673: LD_INT 5
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 4
41682: PUSH
41683: LD_INT 5
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 3
41692: PUSH
41693: LD_INT 4
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 3
41702: PUSH
41703: LD_INT 3
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 5
41712: PUSH
41713: LD_INT 3
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 3
41722: PUSH
41723: LD_INT 5
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 0
41732: PUSH
41733: LD_INT 3
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 0
41742: PUSH
41743: LD_INT 2
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 1
41752: PUSH
41753: LD_INT 3
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 1
41762: PUSH
41763: LD_INT 4
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 0
41772: PUSH
41773: LD_INT 4
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 1
41782: NEG
41783: PUSH
41784: LD_INT 3
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 1
41793: NEG
41794: PUSH
41795: LD_INT 2
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 2
41804: PUSH
41805: LD_INT 4
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 2
41814: NEG
41815: PUSH
41816: LD_INT 2
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 4
41825: NEG
41826: PUSH
41827: LD_INT 0
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 4
41836: NEG
41837: PUSH
41838: LD_INT 1
41840: NEG
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 3
41848: NEG
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 3
41859: NEG
41860: PUSH
41861: LD_INT 1
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 4
41870: NEG
41871: PUSH
41872: LD_INT 1
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 5
41881: NEG
41882: PUSH
41883: LD_INT 0
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 5
41892: NEG
41893: PUSH
41894: LD_INT 1
41896: NEG
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 5
41904: NEG
41905: PUSH
41906: LD_INT 2
41908: NEG
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 3
41916: NEG
41917: PUSH
41918: LD_INT 2
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 3
41927: NEG
41928: PUSH
41929: LD_INT 3
41931: NEG
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 3
41939: NEG
41940: PUSH
41941: LD_INT 4
41943: NEG
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 2
41951: NEG
41952: PUSH
41953: LD_INT 3
41955: NEG
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 2
41963: NEG
41964: PUSH
41965: LD_INT 2
41967: NEG
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 3
41975: NEG
41976: PUSH
41977: LD_INT 2
41979: NEG
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 4
41987: NEG
41988: PUSH
41989: LD_INT 3
41991: NEG
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 4
41999: NEG
42000: PUSH
42001: LD_INT 4
42003: NEG
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 2
42011: NEG
42012: PUSH
42013: LD_INT 4
42015: NEG
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 4
42023: NEG
42024: PUSH
42025: LD_INT 2
42027: NEG
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 0
42035: PUSH
42036: LD_INT 4
42038: NEG
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: LD_INT 5
42049: NEG
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 1
42057: PUSH
42058: LD_INT 4
42060: NEG
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 1
42068: PUSH
42069: LD_INT 3
42071: NEG
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 0
42079: PUSH
42080: LD_INT 3
42082: NEG
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 1
42090: NEG
42091: PUSH
42092: LD_INT 4
42094: NEG
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 1
42102: NEG
42103: PUSH
42104: LD_INT 5
42106: NEG
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: LD_INT 2
42114: PUSH
42115: LD_INT 3
42117: NEG
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 2
42125: NEG
42126: PUSH
42127: LD_INT 5
42129: NEG
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
42182: LD_ADDR_VAR 0 31
42186: PUSH
42187: LD_INT 0
42189: PUSH
42190: LD_INT 4
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 0
42199: PUSH
42200: LD_INT 3
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 1
42209: PUSH
42210: LD_INT 4
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 1
42219: PUSH
42220: LD_INT 5
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 0
42229: PUSH
42230: LD_INT 5
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 1
42239: NEG
42240: PUSH
42241: LD_INT 4
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 1
42250: NEG
42251: PUSH
42252: LD_INT 3
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 2
42261: PUSH
42262: LD_INT 5
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 2
42271: NEG
42272: PUSH
42273: LD_INT 3
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 3
42282: NEG
42283: PUSH
42284: LD_INT 0
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 3
42293: NEG
42294: PUSH
42295: LD_INT 1
42297: NEG
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 2
42305: NEG
42306: PUSH
42307: LD_INT 0
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 2
42316: NEG
42317: PUSH
42318: LD_INT 1
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 3
42327: NEG
42328: PUSH
42329: LD_INT 1
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 4
42338: NEG
42339: PUSH
42340: LD_INT 0
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 4
42349: NEG
42350: PUSH
42351: LD_INT 1
42353: NEG
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 4
42361: NEG
42362: PUSH
42363: LD_INT 2
42365: NEG
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 2
42373: NEG
42374: PUSH
42375: LD_INT 2
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 4
42384: NEG
42385: PUSH
42386: LD_INT 4
42388: NEG
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 4
42396: NEG
42397: PUSH
42398: LD_INT 5
42400: NEG
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 3
42408: NEG
42409: PUSH
42410: LD_INT 4
42412: NEG
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 3
42420: NEG
42421: PUSH
42422: LD_INT 3
42424: NEG
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 4
42432: NEG
42433: PUSH
42434: LD_INT 3
42436: NEG
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 5
42444: NEG
42445: PUSH
42446: LD_INT 4
42448: NEG
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 5
42456: NEG
42457: PUSH
42458: LD_INT 5
42460: NEG
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 3
42468: NEG
42469: PUSH
42470: LD_INT 5
42472: NEG
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 5
42480: NEG
42481: PUSH
42482: LD_INT 3
42484: NEG
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 0
42492: PUSH
42493: LD_INT 3
42495: NEG
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 0
42503: PUSH
42504: LD_INT 4
42506: NEG
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 1
42514: PUSH
42515: LD_INT 3
42517: NEG
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 1
42525: PUSH
42526: LD_INT 2
42528: NEG
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 0
42536: PUSH
42537: LD_INT 2
42539: NEG
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 1
42547: NEG
42548: PUSH
42549: LD_INT 3
42551: NEG
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 1
42559: NEG
42560: PUSH
42561: LD_INT 4
42563: NEG
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 2
42571: PUSH
42572: LD_INT 2
42574: NEG
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 2
42582: NEG
42583: PUSH
42584: LD_INT 4
42586: NEG
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 4
42594: PUSH
42595: LD_INT 0
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 4
42604: PUSH
42605: LD_INT 1
42607: NEG
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 5
42615: PUSH
42616: LD_INT 0
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 5
42625: PUSH
42626: LD_INT 1
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 4
42635: PUSH
42636: LD_INT 1
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 3
42645: PUSH
42646: LD_INT 0
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 3
42655: PUSH
42656: LD_INT 1
42658: NEG
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 3
42666: PUSH
42667: LD_INT 2
42669: NEG
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 5
42677: PUSH
42678: LD_INT 2
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
42732: LD_ADDR_VAR 0 32
42736: PUSH
42737: LD_INT 4
42739: NEG
42740: PUSH
42741: LD_INT 0
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 4
42750: NEG
42751: PUSH
42752: LD_INT 1
42754: NEG
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 3
42762: NEG
42763: PUSH
42764: LD_INT 0
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 3
42773: NEG
42774: PUSH
42775: LD_INT 1
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 4
42784: NEG
42785: PUSH
42786: LD_INT 1
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 5
42795: NEG
42796: PUSH
42797: LD_INT 0
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 5
42806: NEG
42807: PUSH
42808: LD_INT 1
42810: NEG
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 5
42818: NEG
42819: PUSH
42820: LD_INT 2
42822: NEG
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 3
42830: NEG
42831: PUSH
42832: LD_INT 2
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 3
42841: NEG
42842: PUSH
42843: LD_INT 3
42845: NEG
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 3
42853: NEG
42854: PUSH
42855: LD_INT 4
42857: NEG
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 2
42865: NEG
42866: PUSH
42867: LD_INT 3
42869: NEG
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 2
42877: NEG
42878: PUSH
42879: LD_INT 2
42881: NEG
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 3
42889: NEG
42890: PUSH
42891: LD_INT 2
42893: NEG
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 4
42901: NEG
42902: PUSH
42903: LD_INT 3
42905: NEG
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 4
42913: NEG
42914: PUSH
42915: LD_INT 4
42917: NEG
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 2
42925: NEG
42926: PUSH
42927: LD_INT 4
42929: NEG
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 4
42937: NEG
42938: PUSH
42939: LD_INT 2
42941: NEG
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 0
42949: PUSH
42950: LD_INT 4
42952: NEG
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 0
42960: PUSH
42961: LD_INT 5
42963: NEG
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 1
42971: PUSH
42972: LD_INT 4
42974: NEG
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 1
42982: PUSH
42983: LD_INT 3
42985: NEG
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: LD_INT 0
42993: PUSH
42994: LD_INT 3
42996: NEG
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: LD_INT 4
43008: NEG
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 1
43016: NEG
43017: PUSH
43018: LD_INT 5
43020: NEG
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 2
43028: PUSH
43029: LD_INT 3
43031: NEG
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 2
43039: NEG
43040: PUSH
43041: LD_INT 5
43043: NEG
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 3
43051: PUSH
43052: LD_INT 0
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 3
43061: PUSH
43062: LD_INT 1
43064: NEG
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 4
43072: PUSH
43073: LD_INT 0
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 4
43082: PUSH
43083: LD_INT 1
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 3
43092: PUSH
43093: LD_INT 1
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 2
43102: PUSH
43103: LD_INT 0
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 2
43112: PUSH
43113: LD_INT 1
43115: NEG
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 2
43123: PUSH
43124: LD_INT 2
43126: NEG
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 4
43134: PUSH
43135: LD_INT 2
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 4
43144: PUSH
43145: LD_INT 4
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 4
43154: PUSH
43155: LD_INT 3
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 5
43164: PUSH
43165: LD_INT 4
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 5
43174: PUSH
43175: LD_INT 5
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 4
43184: PUSH
43185: LD_INT 5
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 3
43194: PUSH
43195: LD_INT 4
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 3
43204: PUSH
43205: LD_INT 3
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 5
43214: PUSH
43215: LD_INT 3
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 3
43224: PUSH
43225: LD_INT 5
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
43279: LD_ADDR_VAR 0 33
43283: PUSH
43284: LD_INT 4
43286: NEG
43287: PUSH
43288: LD_INT 4
43290: NEG
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 4
43298: NEG
43299: PUSH
43300: LD_INT 5
43302: NEG
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 3
43310: NEG
43311: PUSH
43312: LD_INT 4
43314: NEG
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 3
43322: NEG
43323: PUSH
43324: LD_INT 3
43326: NEG
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 4
43334: NEG
43335: PUSH
43336: LD_INT 3
43338: NEG
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 5
43346: NEG
43347: PUSH
43348: LD_INT 4
43350: NEG
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 5
43358: NEG
43359: PUSH
43360: LD_INT 5
43362: NEG
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 3
43370: NEG
43371: PUSH
43372: LD_INT 5
43374: NEG
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 5
43382: NEG
43383: PUSH
43384: LD_INT 3
43386: NEG
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 0
43394: PUSH
43395: LD_INT 3
43397: NEG
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 0
43405: PUSH
43406: LD_INT 4
43408: NEG
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 1
43416: PUSH
43417: LD_INT 3
43419: NEG
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 1
43427: PUSH
43428: LD_INT 2
43430: NEG
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 0
43438: PUSH
43439: LD_INT 2
43441: NEG
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 1
43449: NEG
43450: PUSH
43451: LD_INT 3
43453: NEG
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 1
43461: NEG
43462: PUSH
43463: LD_INT 4
43465: NEG
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 2
43473: PUSH
43474: LD_INT 2
43476: NEG
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 2
43484: NEG
43485: PUSH
43486: LD_INT 4
43488: NEG
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 4
43496: PUSH
43497: LD_INT 0
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 4
43506: PUSH
43507: LD_INT 1
43509: NEG
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 5
43517: PUSH
43518: LD_INT 0
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 5
43527: PUSH
43528: LD_INT 1
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 4
43537: PUSH
43538: LD_INT 1
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 3
43547: PUSH
43548: LD_INT 0
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 3
43557: PUSH
43558: LD_INT 1
43560: NEG
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 3
43568: PUSH
43569: LD_INT 2
43571: NEG
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 5
43579: PUSH
43580: LD_INT 2
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 3
43589: PUSH
43590: LD_INT 3
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 3
43599: PUSH
43600: LD_INT 2
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 4
43609: PUSH
43610: LD_INT 3
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 4
43619: PUSH
43620: LD_INT 4
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 3
43629: PUSH
43630: LD_INT 4
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 2
43639: PUSH
43640: LD_INT 3
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 2
43649: PUSH
43650: LD_INT 2
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 4
43659: PUSH
43660: LD_INT 2
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 2
43669: PUSH
43670: LD_INT 4
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 0
43679: PUSH
43680: LD_INT 4
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 0
43689: PUSH
43690: LD_INT 3
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 1
43699: PUSH
43700: LD_INT 4
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 1
43709: PUSH
43710: LD_INT 5
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 0
43719: PUSH
43720: LD_INT 5
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 1
43729: NEG
43730: PUSH
43731: LD_INT 4
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 1
43740: NEG
43741: PUSH
43742: LD_INT 3
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 2
43751: PUSH
43752: LD_INT 5
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 2
43761: NEG
43762: PUSH
43763: LD_INT 3
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
43817: LD_ADDR_VAR 0 34
43821: PUSH
43822: LD_INT 0
43824: PUSH
43825: LD_INT 4
43827: NEG
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 0
43835: PUSH
43836: LD_INT 5
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: PUSH
43847: LD_INT 4
43849: NEG
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 1
43857: PUSH
43858: LD_INT 3
43860: NEG
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 0
43868: PUSH
43869: LD_INT 3
43871: NEG
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 1
43879: NEG
43880: PUSH
43881: LD_INT 4
43883: NEG
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 1
43891: NEG
43892: PUSH
43893: LD_INT 5
43895: NEG
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 2
43903: PUSH
43904: LD_INT 3
43906: NEG
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 2
43914: NEG
43915: PUSH
43916: LD_INT 5
43918: NEG
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 3
43926: PUSH
43927: LD_INT 0
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 3
43936: PUSH
43937: LD_INT 1
43939: NEG
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 4
43947: PUSH
43948: LD_INT 0
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 4
43957: PUSH
43958: LD_INT 1
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 3
43967: PUSH
43968: LD_INT 1
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 2
43977: PUSH
43978: LD_INT 0
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 2
43987: PUSH
43988: LD_INT 1
43990: NEG
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 2
43998: PUSH
43999: LD_INT 2
44001: NEG
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 4
44009: PUSH
44010: LD_INT 2
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 4
44019: PUSH
44020: LD_INT 4
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 4
44029: PUSH
44030: LD_INT 3
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 5
44039: PUSH
44040: LD_INT 4
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 5
44049: PUSH
44050: LD_INT 5
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 4
44059: PUSH
44060: LD_INT 5
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 3
44069: PUSH
44070: LD_INT 4
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 3
44079: PUSH
44080: LD_INT 3
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 5
44089: PUSH
44090: LD_INT 3
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 3
44099: PUSH
44100: LD_INT 5
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 0
44109: PUSH
44110: LD_INT 3
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 0
44119: PUSH
44120: LD_INT 2
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 1
44129: PUSH
44130: LD_INT 3
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 1
44139: PUSH
44140: LD_INT 4
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 0
44149: PUSH
44150: LD_INT 4
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 1
44159: NEG
44160: PUSH
44161: LD_INT 3
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 1
44170: NEG
44171: PUSH
44172: LD_INT 2
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 2
44181: PUSH
44182: LD_INT 4
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 2
44191: NEG
44192: PUSH
44193: LD_INT 2
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 4
44202: NEG
44203: PUSH
44204: LD_INT 0
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 4
44213: NEG
44214: PUSH
44215: LD_INT 1
44217: NEG
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 3
44225: NEG
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 3
44236: NEG
44237: PUSH
44238: LD_INT 1
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 4
44247: NEG
44248: PUSH
44249: LD_INT 1
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 5
44258: NEG
44259: PUSH
44260: LD_INT 0
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 5
44269: NEG
44270: PUSH
44271: LD_INT 1
44273: NEG
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 5
44281: NEG
44282: PUSH
44283: LD_INT 2
44285: NEG
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 3
44293: NEG
44294: PUSH
44295: LD_INT 2
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: ST_TO_ADDR
// end ; end ;
44349: GO 44352
44351: POP
// case btype of b_depot , b_warehouse :
44352: LD_VAR 0 1
44356: PUSH
44357: LD_INT 0
44359: DOUBLE
44360: EQUAL
44361: IFTRUE 44371
44363: LD_INT 1
44365: DOUBLE
44366: EQUAL
44367: IFTRUE 44371
44369: GO 44572
44371: POP
// case nation of nation_american :
44372: LD_VAR 0 5
44376: PUSH
44377: LD_INT 1
44379: DOUBLE
44380: EQUAL
44381: IFTRUE 44385
44383: GO 44441
44385: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
44386: LD_ADDR_VAR 0 9
44390: PUSH
44391: LD_VAR 0 11
44395: PUSH
44396: LD_VAR 0 12
44400: PUSH
44401: LD_VAR 0 13
44405: PUSH
44406: LD_VAR 0 14
44410: PUSH
44411: LD_VAR 0 15
44415: PUSH
44416: LD_VAR 0 16
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: PUSH
44429: LD_VAR 0 4
44433: PUSH
44434: LD_INT 1
44436: PLUS
44437: ARRAY
44438: ST_TO_ADDR
44439: GO 44570
44441: LD_INT 2
44443: DOUBLE
44444: EQUAL
44445: IFTRUE 44449
44447: GO 44505
44449: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
44450: LD_ADDR_VAR 0 9
44454: PUSH
44455: LD_VAR 0 17
44459: PUSH
44460: LD_VAR 0 18
44464: PUSH
44465: LD_VAR 0 19
44469: PUSH
44470: LD_VAR 0 20
44474: PUSH
44475: LD_VAR 0 21
44479: PUSH
44480: LD_VAR 0 22
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: PUSH
44493: LD_VAR 0 4
44497: PUSH
44498: LD_INT 1
44500: PLUS
44501: ARRAY
44502: ST_TO_ADDR
44503: GO 44570
44505: LD_INT 3
44507: DOUBLE
44508: EQUAL
44509: IFTRUE 44513
44511: GO 44569
44513: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
44514: LD_ADDR_VAR 0 9
44518: PUSH
44519: LD_VAR 0 23
44523: PUSH
44524: LD_VAR 0 24
44528: PUSH
44529: LD_VAR 0 25
44533: PUSH
44534: LD_VAR 0 26
44538: PUSH
44539: LD_VAR 0 27
44543: PUSH
44544: LD_VAR 0 28
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: PUSH
44557: LD_VAR 0 4
44561: PUSH
44562: LD_INT 1
44564: PLUS
44565: ARRAY
44566: ST_TO_ADDR
44567: GO 44570
44569: POP
44570: GO 45125
44572: LD_INT 2
44574: DOUBLE
44575: EQUAL
44576: IFTRUE 44586
44578: LD_INT 3
44580: DOUBLE
44581: EQUAL
44582: IFTRUE 44586
44584: GO 44642
44586: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
44587: LD_ADDR_VAR 0 9
44591: PUSH
44592: LD_VAR 0 29
44596: PUSH
44597: LD_VAR 0 30
44601: PUSH
44602: LD_VAR 0 31
44606: PUSH
44607: LD_VAR 0 32
44611: PUSH
44612: LD_VAR 0 33
44616: PUSH
44617: LD_VAR 0 34
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: PUSH
44630: LD_VAR 0 4
44634: PUSH
44635: LD_INT 1
44637: PLUS
44638: ARRAY
44639: ST_TO_ADDR
44640: GO 45125
44642: LD_INT 16
44644: DOUBLE
44645: EQUAL
44646: IFTRUE 44704
44648: LD_INT 17
44650: DOUBLE
44651: EQUAL
44652: IFTRUE 44704
44654: LD_INT 18
44656: DOUBLE
44657: EQUAL
44658: IFTRUE 44704
44660: LD_INT 19
44662: DOUBLE
44663: EQUAL
44664: IFTRUE 44704
44666: LD_INT 22
44668: DOUBLE
44669: EQUAL
44670: IFTRUE 44704
44672: LD_INT 20
44674: DOUBLE
44675: EQUAL
44676: IFTRUE 44704
44678: LD_INT 21
44680: DOUBLE
44681: EQUAL
44682: IFTRUE 44704
44684: LD_INT 23
44686: DOUBLE
44687: EQUAL
44688: IFTRUE 44704
44690: LD_INT 24
44692: DOUBLE
44693: EQUAL
44694: IFTRUE 44704
44696: LD_INT 25
44698: DOUBLE
44699: EQUAL
44700: IFTRUE 44704
44702: GO 44760
44704: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
44705: LD_ADDR_VAR 0 9
44709: PUSH
44710: LD_VAR 0 35
44714: PUSH
44715: LD_VAR 0 36
44719: PUSH
44720: LD_VAR 0 37
44724: PUSH
44725: LD_VAR 0 38
44729: PUSH
44730: LD_VAR 0 39
44734: PUSH
44735: LD_VAR 0 40
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: PUSH
44748: LD_VAR 0 4
44752: PUSH
44753: LD_INT 1
44755: PLUS
44756: ARRAY
44757: ST_TO_ADDR
44758: GO 45125
44760: LD_INT 6
44762: DOUBLE
44763: EQUAL
44764: IFTRUE 44816
44766: LD_INT 7
44768: DOUBLE
44769: EQUAL
44770: IFTRUE 44816
44772: LD_INT 8
44774: DOUBLE
44775: EQUAL
44776: IFTRUE 44816
44778: LD_INT 13
44780: DOUBLE
44781: EQUAL
44782: IFTRUE 44816
44784: LD_INT 12
44786: DOUBLE
44787: EQUAL
44788: IFTRUE 44816
44790: LD_INT 15
44792: DOUBLE
44793: EQUAL
44794: IFTRUE 44816
44796: LD_INT 11
44798: DOUBLE
44799: EQUAL
44800: IFTRUE 44816
44802: LD_INT 14
44804: DOUBLE
44805: EQUAL
44806: IFTRUE 44816
44808: LD_INT 10
44810: DOUBLE
44811: EQUAL
44812: IFTRUE 44816
44814: GO 44872
44816: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
44817: LD_ADDR_VAR 0 9
44821: PUSH
44822: LD_VAR 0 41
44826: PUSH
44827: LD_VAR 0 42
44831: PUSH
44832: LD_VAR 0 43
44836: PUSH
44837: LD_VAR 0 44
44841: PUSH
44842: LD_VAR 0 45
44846: PUSH
44847: LD_VAR 0 46
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: PUSH
44860: LD_VAR 0 4
44864: PUSH
44865: LD_INT 1
44867: PLUS
44868: ARRAY
44869: ST_TO_ADDR
44870: GO 45125
44872: LD_INT 36
44874: DOUBLE
44875: EQUAL
44876: IFTRUE 44880
44878: GO 44936
44880: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
44881: LD_ADDR_VAR 0 9
44885: PUSH
44886: LD_VAR 0 47
44890: PUSH
44891: LD_VAR 0 48
44895: PUSH
44896: LD_VAR 0 49
44900: PUSH
44901: LD_VAR 0 50
44905: PUSH
44906: LD_VAR 0 51
44910: PUSH
44911: LD_VAR 0 52
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: PUSH
44924: LD_VAR 0 4
44928: PUSH
44929: LD_INT 1
44931: PLUS
44932: ARRAY
44933: ST_TO_ADDR
44934: GO 45125
44936: LD_INT 4
44938: DOUBLE
44939: EQUAL
44940: IFTRUE 44962
44942: LD_INT 5
44944: DOUBLE
44945: EQUAL
44946: IFTRUE 44962
44948: LD_INT 34
44950: DOUBLE
44951: EQUAL
44952: IFTRUE 44962
44954: LD_INT 37
44956: DOUBLE
44957: EQUAL
44958: IFTRUE 44962
44960: GO 45018
44962: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
44963: LD_ADDR_VAR 0 9
44967: PUSH
44968: LD_VAR 0 53
44972: PUSH
44973: LD_VAR 0 54
44977: PUSH
44978: LD_VAR 0 55
44982: PUSH
44983: LD_VAR 0 56
44987: PUSH
44988: LD_VAR 0 57
44992: PUSH
44993: LD_VAR 0 58
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: PUSH
45006: LD_VAR 0 4
45010: PUSH
45011: LD_INT 1
45013: PLUS
45014: ARRAY
45015: ST_TO_ADDR
45016: GO 45125
45018: LD_INT 31
45020: DOUBLE
45021: EQUAL
45022: IFTRUE 45068
45024: LD_INT 32
45026: DOUBLE
45027: EQUAL
45028: IFTRUE 45068
45030: LD_INT 33
45032: DOUBLE
45033: EQUAL
45034: IFTRUE 45068
45036: LD_INT 27
45038: DOUBLE
45039: EQUAL
45040: IFTRUE 45068
45042: LD_INT 26
45044: DOUBLE
45045: EQUAL
45046: IFTRUE 45068
45048: LD_INT 28
45050: DOUBLE
45051: EQUAL
45052: IFTRUE 45068
45054: LD_INT 29
45056: DOUBLE
45057: EQUAL
45058: IFTRUE 45068
45060: LD_INT 30
45062: DOUBLE
45063: EQUAL
45064: IFTRUE 45068
45066: GO 45124
45068: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
45069: LD_ADDR_VAR 0 9
45073: PUSH
45074: LD_VAR 0 59
45078: PUSH
45079: LD_VAR 0 60
45083: PUSH
45084: LD_VAR 0 61
45088: PUSH
45089: LD_VAR 0 62
45093: PUSH
45094: LD_VAR 0 63
45098: PUSH
45099: LD_VAR 0 64
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: PUSH
45112: LD_VAR 0 4
45116: PUSH
45117: LD_INT 1
45119: PLUS
45120: ARRAY
45121: ST_TO_ADDR
45122: GO 45125
45124: POP
// temp_list2 = [ ] ;
45125: LD_ADDR_VAR 0 10
45129: PUSH
45130: EMPTY
45131: ST_TO_ADDR
// for i in temp_list do
45132: LD_ADDR_VAR 0 8
45136: PUSH
45137: LD_VAR 0 9
45141: PUSH
45142: FOR_IN
45143: IFFALSE 45195
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
45145: LD_ADDR_VAR 0 10
45149: PUSH
45150: LD_VAR 0 10
45154: PUSH
45155: LD_VAR 0 8
45159: PUSH
45160: LD_INT 1
45162: ARRAY
45163: PUSH
45164: LD_VAR 0 2
45168: PLUS
45169: PUSH
45170: LD_VAR 0 8
45174: PUSH
45175: LD_INT 2
45177: ARRAY
45178: PUSH
45179: LD_VAR 0 3
45183: PLUS
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: EMPTY
45190: LIST
45191: ADD
45192: ST_TO_ADDR
45193: GO 45142
45195: POP
45196: POP
// result = temp_list2 ;
45197: LD_ADDR_VAR 0 7
45201: PUSH
45202: LD_VAR 0 10
45206: ST_TO_ADDR
// end ;
45207: LD_VAR 0 7
45211: RET
// export function EnemyInRange ( unit , dist ) ; begin
45212: LD_INT 0
45214: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
45215: LD_ADDR_VAR 0 3
45219: PUSH
45220: LD_VAR 0 1
45224: PPUSH
45225: CALL_OW 255
45229: PPUSH
45230: LD_VAR 0 1
45234: PPUSH
45235: CALL_OW 250
45239: PPUSH
45240: LD_VAR 0 1
45244: PPUSH
45245: CALL_OW 251
45249: PPUSH
45250: LD_VAR 0 2
45254: PPUSH
45255: CALL 19316 0 4
45259: PUSH
45260: LD_INT 4
45262: ARRAY
45263: ST_TO_ADDR
// end ;
45264: LD_VAR 0 3
45268: RET
// export function PlayerSeeMe ( unit ) ; begin
45269: LD_INT 0
45271: PPUSH
// result := See ( your_side , unit ) ;
45272: LD_ADDR_VAR 0 2
45276: PUSH
45277: LD_OWVAR 2
45281: PPUSH
45282: LD_VAR 0 1
45286: PPUSH
45287: CALL_OW 292
45291: ST_TO_ADDR
// end ;
45292: LD_VAR 0 2
45296: RET
// export function ReverseDir ( unit ) ; begin
45297: LD_INT 0
45299: PPUSH
// if not unit then
45300: LD_VAR 0 1
45304: NOT
45305: IFFALSE 45309
// exit ;
45307: GO 45332
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
45309: LD_ADDR_VAR 0 2
45313: PUSH
45314: LD_VAR 0 1
45318: PPUSH
45319: CALL_OW 254
45323: PUSH
45324: LD_INT 3
45326: PLUS
45327: PUSH
45328: LD_INT 6
45330: MOD
45331: ST_TO_ADDR
// end ;
45332: LD_VAR 0 2
45336: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
45337: LD_INT 0
45339: PPUSH
45340: PPUSH
45341: PPUSH
45342: PPUSH
45343: PPUSH
// if not hexes then
45344: LD_VAR 0 2
45348: NOT
45349: IFFALSE 45353
// exit ;
45351: GO 45501
// dist := 9999 ;
45353: LD_ADDR_VAR 0 5
45357: PUSH
45358: LD_INT 9999
45360: ST_TO_ADDR
// for i = 1 to hexes do
45361: LD_ADDR_VAR 0 4
45365: PUSH
45366: DOUBLE
45367: LD_INT 1
45369: DEC
45370: ST_TO_ADDR
45371: LD_VAR 0 2
45375: PUSH
45376: FOR_TO
45377: IFFALSE 45489
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
45379: LD_VAR 0 1
45383: PPUSH
45384: LD_VAR 0 2
45388: PUSH
45389: LD_VAR 0 4
45393: ARRAY
45394: PUSH
45395: LD_INT 1
45397: ARRAY
45398: PPUSH
45399: LD_VAR 0 2
45403: PUSH
45404: LD_VAR 0 4
45408: ARRAY
45409: PUSH
45410: LD_INT 2
45412: ARRAY
45413: PPUSH
45414: CALL_OW 297
45418: PUSH
45419: LD_VAR 0 5
45423: LESS
45424: IFFALSE 45487
// begin hex := hexes [ i ] ;
45426: LD_ADDR_VAR 0 7
45430: PUSH
45431: LD_VAR 0 2
45435: PUSH
45436: LD_VAR 0 4
45440: ARRAY
45441: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45442: LD_ADDR_VAR 0 5
45446: PUSH
45447: LD_VAR 0 1
45451: PPUSH
45452: LD_VAR 0 2
45456: PUSH
45457: LD_VAR 0 4
45461: ARRAY
45462: PUSH
45463: LD_INT 1
45465: ARRAY
45466: PPUSH
45467: LD_VAR 0 2
45471: PUSH
45472: LD_VAR 0 4
45476: ARRAY
45477: PUSH
45478: LD_INT 2
45480: ARRAY
45481: PPUSH
45482: CALL_OW 297
45486: ST_TO_ADDR
// end ; end ;
45487: GO 45376
45489: POP
45490: POP
// result := hex ;
45491: LD_ADDR_VAR 0 3
45495: PUSH
45496: LD_VAR 0 7
45500: ST_TO_ADDR
// end ;
45501: LD_VAR 0 3
45505: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
45506: LD_INT 0
45508: PPUSH
45509: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
45510: LD_VAR 0 1
45514: NOT
45515: PUSH
45516: LD_VAR 0 1
45520: PUSH
45521: LD_INT 21
45523: PUSH
45524: LD_INT 2
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 23
45533: PUSH
45534: LD_INT 2
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PPUSH
45545: CALL_OW 69
45549: IN
45550: NOT
45551: OR
45552: IFFALSE 45556
// exit ;
45554: GO 45603
// for i = 1 to 3 do
45556: LD_ADDR_VAR 0 3
45560: PUSH
45561: DOUBLE
45562: LD_INT 1
45564: DEC
45565: ST_TO_ADDR
45566: LD_INT 3
45568: PUSH
45569: FOR_TO
45570: IFFALSE 45601
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
45572: LD_VAR 0 1
45576: PPUSH
45577: CALL_OW 250
45581: PPUSH
45582: LD_VAR 0 1
45586: PPUSH
45587: CALL_OW 251
45591: PPUSH
45592: LD_INT 1
45594: PPUSH
45595: CALL_OW 453
45599: GO 45569
45601: POP
45602: POP
// end ;
45603: LD_VAR 0 2
45607: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
45608: LD_INT 0
45610: PPUSH
45611: PPUSH
45612: PPUSH
45613: PPUSH
45614: PPUSH
45615: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
45616: LD_VAR 0 1
45620: NOT
45621: PUSH
45622: LD_VAR 0 2
45626: NOT
45627: OR
45628: PUSH
45629: LD_VAR 0 1
45633: PPUSH
45634: CALL_OW 314
45638: OR
45639: IFFALSE 45643
// exit ;
45641: GO 46084
// x := GetX ( enemy_unit ) ;
45643: LD_ADDR_VAR 0 7
45647: PUSH
45648: LD_VAR 0 2
45652: PPUSH
45653: CALL_OW 250
45657: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
45658: LD_ADDR_VAR 0 8
45662: PUSH
45663: LD_VAR 0 2
45667: PPUSH
45668: CALL_OW 251
45672: ST_TO_ADDR
// if not x or not y then
45673: LD_VAR 0 7
45677: NOT
45678: PUSH
45679: LD_VAR 0 8
45683: NOT
45684: OR
45685: IFFALSE 45689
// exit ;
45687: GO 46084
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
45689: LD_ADDR_VAR 0 6
45693: PUSH
45694: LD_VAR 0 7
45698: PPUSH
45699: LD_INT 0
45701: PPUSH
45702: LD_INT 4
45704: PPUSH
45705: CALL_OW 272
45709: PUSH
45710: LD_VAR 0 8
45714: PPUSH
45715: LD_INT 0
45717: PPUSH
45718: LD_INT 4
45720: PPUSH
45721: CALL_OW 273
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_VAR 0 7
45734: PPUSH
45735: LD_INT 1
45737: PPUSH
45738: LD_INT 4
45740: PPUSH
45741: CALL_OW 272
45745: PUSH
45746: LD_VAR 0 8
45750: PPUSH
45751: LD_INT 1
45753: PPUSH
45754: LD_INT 4
45756: PPUSH
45757: CALL_OW 273
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_VAR 0 7
45770: PPUSH
45771: LD_INT 2
45773: PPUSH
45774: LD_INT 4
45776: PPUSH
45777: CALL_OW 272
45781: PUSH
45782: LD_VAR 0 8
45786: PPUSH
45787: LD_INT 2
45789: PPUSH
45790: LD_INT 4
45792: PPUSH
45793: CALL_OW 273
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_VAR 0 7
45806: PPUSH
45807: LD_INT 3
45809: PPUSH
45810: LD_INT 4
45812: PPUSH
45813: CALL_OW 272
45817: PUSH
45818: LD_VAR 0 8
45822: PPUSH
45823: LD_INT 3
45825: PPUSH
45826: LD_INT 4
45828: PPUSH
45829: CALL_OW 273
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_VAR 0 7
45842: PPUSH
45843: LD_INT 4
45845: PPUSH
45846: LD_INT 4
45848: PPUSH
45849: CALL_OW 272
45853: PUSH
45854: LD_VAR 0 8
45858: PPUSH
45859: LD_INT 4
45861: PPUSH
45862: LD_INT 4
45864: PPUSH
45865: CALL_OW 273
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_VAR 0 7
45878: PPUSH
45879: LD_INT 5
45881: PPUSH
45882: LD_INT 4
45884: PPUSH
45885: CALL_OW 272
45889: PUSH
45890: LD_VAR 0 8
45894: PPUSH
45895: LD_INT 5
45897: PPUSH
45898: LD_INT 4
45900: PPUSH
45901: CALL_OW 273
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: ST_TO_ADDR
// for i = tmp downto 1 do
45918: LD_ADDR_VAR 0 4
45922: PUSH
45923: DOUBLE
45924: LD_VAR 0 6
45928: INC
45929: ST_TO_ADDR
45930: LD_INT 1
45932: PUSH
45933: FOR_DOWNTO
45934: IFFALSE 46035
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
45936: LD_VAR 0 6
45940: PUSH
45941: LD_VAR 0 4
45945: ARRAY
45946: PUSH
45947: LD_INT 1
45949: ARRAY
45950: PPUSH
45951: LD_VAR 0 6
45955: PUSH
45956: LD_VAR 0 4
45960: ARRAY
45961: PUSH
45962: LD_INT 2
45964: ARRAY
45965: PPUSH
45966: CALL_OW 488
45970: NOT
45971: PUSH
45972: LD_VAR 0 6
45976: PUSH
45977: LD_VAR 0 4
45981: ARRAY
45982: PUSH
45983: LD_INT 1
45985: ARRAY
45986: PPUSH
45987: LD_VAR 0 6
45991: PUSH
45992: LD_VAR 0 4
45996: ARRAY
45997: PUSH
45998: LD_INT 2
46000: ARRAY
46001: PPUSH
46002: CALL_OW 428
46006: PUSH
46007: LD_INT 0
46009: NONEQUAL
46010: OR
46011: IFFALSE 46033
// tmp := Delete ( tmp , i ) ;
46013: LD_ADDR_VAR 0 6
46017: PUSH
46018: LD_VAR 0 6
46022: PPUSH
46023: LD_VAR 0 4
46027: PPUSH
46028: CALL_OW 3
46032: ST_TO_ADDR
46033: GO 45933
46035: POP
46036: POP
// j := GetClosestHex ( unit , tmp ) ;
46037: LD_ADDR_VAR 0 5
46041: PUSH
46042: LD_VAR 0 1
46046: PPUSH
46047: LD_VAR 0 6
46051: PPUSH
46052: CALL 45337 0 2
46056: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
46057: LD_VAR 0 1
46061: PPUSH
46062: LD_VAR 0 5
46066: PUSH
46067: LD_INT 1
46069: ARRAY
46070: PPUSH
46071: LD_VAR 0 5
46075: PUSH
46076: LD_INT 2
46078: ARRAY
46079: PPUSH
46080: CALL_OW 111
// end ;
46084: LD_VAR 0 3
46088: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
46089: LD_INT 0
46091: PPUSH
46092: PPUSH
46093: PPUSH
// uc_side = 0 ;
46094: LD_ADDR_OWVAR 20
46098: PUSH
46099: LD_INT 0
46101: ST_TO_ADDR
// uc_nation = 0 ;
46102: LD_ADDR_OWVAR 21
46106: PUSH
46107: LD_INT 0
46109: ST_TO_ADDR
// InitHc ;
46110: CALL_OW 19
// InitVc ;
46114: CALL_OW 20
// if mastodonts then
46118: LD_VAR 0 6
46122: IFFALSE 46189
// for i = 1 to mastodonts do
46124: LD_ADDR_VAR 0 11
46128: PUSH
46129: DOUBLE
46130: LD_INT 1
46132: DEC
46133: ST_TO_ADDR
46134: LD_VAR 0 6
46138: PUSH
46139: FOR_TO
46140: IFFALSE 46187
// begin vc_chassis := 31 ;
46142: LD_ADDR_OWVAR 37
46146: PUSH
46147: LD_INT 31
46149: ST_TO_ADDR
// vc_control := control_rider ;
46150: LD_ADDR_OWVAR 38
46154: PUSH
46155: LD_INT 4
46157: ST_TO_ADDR
// animal := CreateVehicle ;
46158: LD_ADDR_VAR 0 12
46162: PUSH
46163: CALL_OW 45
46167: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46168: LD_VAR 0 12
46172: PPUSH
46173: LD_VAR 0 8
46177: PPUSH
46178: LD_INT 0
46180: PPUSH
46181: CALL 48258 0 3
// end ;
46185: GO 46139
46187: POP
46188: POP
// if horses then
46189: LD_VAR 0 5
46193: IFFALSE 46260
// for i = 1 to horses do
46195: LD_ADDR_VAR 0 11
46199: PUSH
46200: DOUBLE
46201: LD_INT 1
46203: DEC
46204: ST_TO_ADDR
46205: LD_VAR 0 5
46209: PUSH
46210: FOR_TO
46211: IFFALSE 46258
// begin hc_class := 21 ;
46213: LD_ADDR_OWVAR 28
46217: PUSH
46218: LD_INT 21
46220: ST_TO_ADDR
// hc_gallery :=  ;
46221: LD_ADDR_OWVAR 33
46225: PUSH
46226: LD_STRING 
46228: ST_TO_ADDR
// animal := CreateHuman ;
46229: LD_ADDR_VAR 0 12
46233: PUSH
46234: CALL_OW 44
46238: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46239: LD_VAR 0 12
46243: PPUSH
46244: LD_VAR 0 8
46248: PPUSH
46249: LD_INT 0
46251: PPUSH
46252: CALL 48258 0 3
// end ;
46256: GO 46210
46258: POP
46259: POP
// if birds then
46260: LD_VAR 0 1
46264: IFFALSE 46331
// for i = 1 to birds do
46266: LD_ADDR_VAR 0 11
46270: PUSH
46271: DOUBLE
46272: LD_INT 1
46274: DEC
46275: ST_TO_ADDR
46276: LD_VAR 0 1
46280: PUSH
46281: FOR_TO
46282: IFFALSE 46329
// begin hc_class = 18 ;
46284: LD_ADDR_OWVAR 28
46288: PUSH
46289: LD_INT 18
46291: ST_TO_ADDR
// hc_gallery =  ;
46292: LD_ADDR_OWVAR 33
46296: PUSH
46297: LD_STRING 
46299: ST_TO_ADDR
// animal := CreateHuman ;
46300: LD_ADDR_VAR 0 12
46304: PUSH
46305: CALL_OW 44
46309: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46310: LD_VAR 0 12
46314: PPUSH
46315: LD_VAR 0 8
46319: PPUSH
46320: LD_INT 0
46322: PPUSH
46323: CALL 48258 0 3
// end ;
46327: GO 46281
46329: POP
46330: POP
// if tigers then
46331: LD_VAR 0 2
46335: IFFALSE 46419
// for i = 1 to tigers do
46337: LD_ADDR_VAR 0 11
46341: PUSH
46342: DOUBLE
46343: LD_INT 1
46345: DEC
46346: ST_TO_ADDR
46347: LD_VAR 0 2
46351: PUSH
46352: FOR_TO
46353: IFFALSE 46417
// begin hc_class = class_tiger ;
46355: LD_ADDR_OWVAR 28
46359: PUSH
46360: LD_INT 14
46362: ST_TO_ADDR
// hc_gallery =  ;
46363: LD_ADDR_OWVAR 33
46367: PUSH
46368: LD_STRING 
46370: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
46371: LD_ADDR_OWVAR 35
46375: PUSH
46376: LD_INT 7
46378: NEG
46379: PPUSH
46380: LD_INT 7
46382: PPUSH
46383: CALL_OW 12
46387: ST_TO_ADDR
// animal := CreateHuman ;
46388: LD_ADDR_VAR 0 12
46392: PUSH
46393: CALL_OW 44
46397: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46398: LD_VAR 0 12
46402: PPUSH
46403: LD_VAR 0 8
46407: PPUSH
46408: LD_INT 0
46410: PPUSH
46411: CALL 48258 0 3
// end ;
46415: GO 46352
46417: POP
46418: POP
// if apemans then
46419: LD_VAR 0 3
46423: IFFALSE 46546
// for i = 1 to apemans do
46425: LD_ADDR_VAR 0 11
46429: PUSH
46430: DOUBLE
46431: LD_INT 1
46433: DEC
46434: ST_TO_ADDR
46435: LD_VAR 0 3
46439: PUSH
46440: FOR_TO
46441: IFFALSE 46544
// begin hc_class = class_apeman ;
46443: LD_ADDR_OWVAR 28
46447: PUSH
46448: LD_INT 12
46450: ST_TO_ADDR
// hc_gallery =  ;
46451: LD_ADDR_OWVAR 33
46455: PUSH
46456: LD_STRING 
46458: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
46459: LD_ADDR_OWVAR 35
46463: PUSH
46464: LD_INT 5
46466: NEG
46467: PPUSH
46468: LD_INT 5
46470: PPUSH
46471: CALL_OW 12
46475: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
46476: LD_ADDR_OWVAR 31
46480: PUSH
46481: LD_INT 1
46483: PPUSH
46484: LD_INT 3
46486: PPUSH
46487: CALL_OW 12
46491: PUSH
46492: LD_INT 1
46494: PPUSH
46495: LD_INT 3
46497: PPUSH
46498: CALL_OW 12
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: LD_INT 0
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: ST_TO_ADDR
// animal := CreateHuman ;
46515: LD_ADDR_VAR 0 12
46519: PUSH
46520: CALL_OW 44
46524: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46525: LD_VAR 0 12
46529: PPUSH
46530: LD_VAR 0 8
46534: PPUSH
46535: LD_INT 0
46537: PPUSH
46538: CALL 48258 0 3
// end ;
46542: GO 46440
46544: POP
46545: POP
// if enchidnas then
46546: LD_VAR 0 4
46550: IFFALSE 46617
// for i = 1 to enchidnas do
46552: LD_ADDR_VAR 0 11
46556: PUSH
46557: DOUBLE
46558: LD_INT 1
46560: DEC
46561: ST_TO_ADDR
46562: LD_VAR 0 4
46566: PUSH
46567: FOR_TO
46568: IFFALSE 46615
// begin hc_class = 13 ;
46570: LD_ADDR_OWVAR 28
46574: PUSH
46575: LD_INT 13
46577: ST_TO_ADDR
// hc_gallery =  ;
46578: LD_ADDR_OWVAR 33
46582: PUSH
46583: LD_STRING 
46585: ST_TO_ADDR
// animal := CreateHuman ;
46586: LD_ADDR_VAR 0 12
46590: PUSH
46591: CALL_OW 44
46595: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46596: LD_VAR 0 12
46600: PPUSH
46601: LD_VAR 0 8
46605: PPUSH
46606: LD_INT 0
46608: PPUSH
46609: CALL 48258 0 3
// end ;
46613: GO 46567
46615: POP
46616: POP
// if fishes then
46617: LD_VAR 0 7
46621: IFFALSE 46688
// for i = 1 to fishes do
46623: LD_ADDR_VAR 0 11
46627: PUSH
46628: DOUBLE
46629: LD_INT 1
46631: DEC
46632: ST_TO_ADDR
46633: LD_VAR 0 7
46637: PUSH
46638: FOR_TO
46639: IFFALSE 46686
// begin hc_class = 20 ;
46641: LD_ADDR_OWVAR 28
46645: PUSH
46646: LD_INT 20
46648: ST_TO_ADDR
// hc_gallery =  ;
46649: LD_ADDR_OWVAR 33
46653: PUSH
46654: LD_STRING 
46656: ST_TO_ADDR
// animal := CreateHuman ;
46657: LD_ADDR_VAR 0 12
46661: PUSH
46662: CALL_OW 44
46666: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
46667: LD_VAR 0 12
46671: PPUSH
46672: LD_VAR 0 9
46676: PPUSH
46677: LD_INT 0
46679: PPUSH
46680: CALL 48258 0 3
// end ;
46684: GO 46638
46686: POP
46687: POP
// end ;
46688: LD_VAR 0 10
46692: RET
// export function WantHeal ( sci , unit ) ; begin
46693: LD_INT 0
46695: PPUSH
// if GetTaskList ( sci ) > 0 then
46696: LD_VAR 0 1
46700: PPUSH
46701: CALL_OW 437
46705: PUSH
46706: LD_INT 0
46708: GREATER
46709: IFFALSE 46779
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
46711: LD_VAR 0 1
46715: PPUSH
46716: CALL_OW 437
46720: PUSH
46721: LD_INT 1
46723: ARRAY
46724: PUSH
46725: LD_INT 1
46727: ARRAY
46728: PUSH
46729: LD_STRING l
46731: EQUAL
46732: PUSH
46733: LD_VAR 0 1
46737: PPUSH
46738: CALL_OW 437
46742: PUSH
46743: LD_INT 1
46745: ARRAY
46746: PUSH
46747: LD_INT 4
46749: ARRAY
46750: PUSH
46751: LD_VAR 0 2
46755: EQUAL
46756: AND
46757: IFFALSE 46769
// result := true else
46759: LD_ADDR_VAR 0 3
46763: PUSH
46764: LD_INT 1
46766: ST_TO_ADDR
46767: GO 46777
// result := false ;
46769: LD_ADDR_VAR 0 3
46773: PUSH
46774: LD_INT 0
46776: ST_TO_ADDR
// end else
46777: GO 46787
// result := false ;
46779: LD_ADDR_VAR 0 3
46783: PUSH
46784: LD_INT 0
46786: ST_TO_ADDR
// end ;
46787: LD_VAR 0 3
46791: RET
// export function HealTarget ( sci ) ; begin
46792: LD_INT 0
46794: PPUSH
// if not sci then
46795: LD_VAR 0 1
46799: NOT
46800: IFFALSE 46804
// exit ;
46802: GO 46869
// result := 0 ;
46804: LD_ADDR_VAR 0 2
46808: PUSH
46809: LD_INT 0
46811: ST_TO_ADDR
// if GetTaskList ( sci ) then
46812: LD_VAR 0 1
46816: PPUSH
46817: CALL_OW 437
46821: IFFALSE 46869
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
46823: LD_VAR 0 1
46827: PPUSH
46828: CALL_OW 437
46832: PUSH
46833: LD_INT 1
46835: ARRAY
46836: PUSH
46837: LD_INT 1
46839: ARRAY
46840: PUSH
46841: LD_STRING l
46843: EQUAL
46844: IFFALSE 46869
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
46846: LD_ADDR_VAR 0 2
46850: PUSH
46851: LD_VAR 0 1
46855: PPUSH
46856: CALL_OW 437
46860: PUSH
46861: LD_INT 1
46863: ARRAY
46864: PUSH
46865: LD_INT 4
46867: ARRAY
46868: ST_TO_ADDR
// end ;
46869: LD_VAR 0 2
46873: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
46874: LD_INT 0
46876: PPUSH
46877: PPUSH
46878: PPUSH
46879: PPUSH
// if not base_units then
46880: LD_VAR 0 1
46884: NOT
46885: IFFALSE 46889
// exit ;
46887: GO 46976
// result := false ;
46889: LD_ADDR_VAR 0 2
46893: PUSH
46894: LD_INT 0
46896: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
46897: LD_ADDR_VAR 0 5
46901: PUSH
46902: LD_VAR 0 1
46906: PPUSH
46907: LD_INT 21
46909: PUSH
46910: LD_INT 3
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PPUSH
46917: CALL_OW 72
46921: ST_TO_ADDR
// if not tmp then
46922: LD_VAR 0 5
46926: NOT
46927: IFFALSE 46931
// exit ;
46929: GO 46976
// for i in tmp do
46931: LD_ADDR_VAR 0 3
46935: PUSH
46936: LD_VAR 0 5
46940: PUSH
46941: FOR_IN
46942: IFFALSE 46974
// begin result := EnemyInRange ( i , 22 ) ;
46944: LD_ADDR_VAR 0 2
46948: PUSH
46949: LD_VAR 0 3
46953: PPUSH
46954: LD_INT 22
46956: PPUSH
46957: CALL 45212 0 2
46961: ST_TO_ADDR
// if result then
46962: LD_VAR 0 2
46966: IFFALSE 46972
// exit ;
46968: POP
46969: POP
46970: GO 46976
// end ;
46972: GO 46941
46974: POP
46975: POP
// end ;
46976: LD_VAR 0 2
46980: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
46981: LD_INT 0
46983: PPUSH
46984: PPUSH
// if not units then
46985: LD_VAR 0 1
46989: NOT
46990: IFFALSE 46994
// exit ;
46992: GO 47064
// result := [ ] ;
46994: LD_ADDR_VAR 0 3
46998: PUSH
46999: EMPTY
47000: ST_TO_ADDR
// for i in units do
47001: LD_ADDR_VAR 0 4
47005: PUSH
47006: LD_VAR 0 1
47010: PUSH
47011: FOR_IN
47012: IFFALSE 47062
// if GetTag ( i ) = tag then
47014: LD_VAR 0 4
47018: PPUSH
47019: CALL_OW 110
47023: PUSH
47024: LD_VAR 0 2
47028: EQUAL
47029: IFFALSE 47060
// result := Insert ( result , result + 1 , i ) ;
47031: LD_ADDR_VAR 0 3
47035: PUSH
47036: LD_VAR 0 3
47040: PPUSH
47041: LD_VAR 0 3
47045: PUSH
47046: LD_INT 1
47048: PLUS
47049: PPUSH
47050: LD_VAR 0 4
47054: PPUSH
47055: CALL_OW 2
47059: ST_TO_ADDR
47060: GO 47011
47062: POP
47063: POP
// end ;
47064: LD_VAR 0 3
47068: RET
// export function IsDriver ( un ) ; begin
47069: LD_INT 0
47071: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
47072: LD_ADDR_VAR 0 2
47076: PUSH
47077: LD_VAR 0 1
47081: PUSH
47082: LD_INT 55
47084: PUSH
47085: EMPTY
47086: LIST
47087: PPUSH
47088: CALL_OW 69
47092: IN
47093: ST_TO_ADDR
// end ;
47094: LD_VAR 0 2
47098: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
47099: LD_INT 0
47101: PPUSH
47102: PPUSH
// list := [ ] ;
47103: LD_ADDR_VAR 0 5
47107: PUSH
47108: EMPTY
47109: ST_TO_ADDR
// case d of 0 :
47110: LD_VAR 0 3
47114: PUSH
47115: LD_INT 0
47117: DOUBLE
47118: EQUAL
47119: IFTRUE 47123
47121: GO 47256
47123: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
47124: LD_ADDR_VAR 0 5
47128: PUSH
47129: LD_VAR 0 1
47133: PUSH
47134: LD_INT 4
47136: MINUS
47137: PUSH
47138: LD_VAR 0 2
47142: PUSH
47143: LD_INT 4
47145: MINUS
47146: PUSH
47147: LD_INT 2
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: LIST
47154: PUSH
47155: LD_VAR 0 1
47159: PUSH
47160: LD_INT 3
47162: MINUS
47163: PUSH
47164: LD_VAR 0 2
47168: PUSH
47169: LD_INT 1
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: LIST
47176: PUSH
47177: LD_VAR 0 1
47181: PUSH
47182: LD_INT 4
47184: PLUS
47185: PUSH
47186: LD_VAR 0 2
47190: PUSH
47191: LD_INT 4
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: LIST
47198: PUSH
47199: LD_VAR 0 1
47203: PUSH
47204: LD_INT 3
47206: PLUS
47207: PUSH
47208: LD_VAR 0 2
47212: PUSH
47213: LD_INT 3
47215: PLUS
47216: PUSH
47217: LD_INT 5
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: LIST
47224: PUSH
47225: LD_VAR 0 1
47229: PUSH
47230: LD_VAR 0 2
47234: PUSH
47235: LD_INT 4
47237: PLUS
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: LIST
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: ST_TO_ADDR
// end ; 1 :
47254: GO 47954
47256: LD_INT 1
47258: DOUBLE
47259: EQUAL
47260: IFTRUE 47264
47262: GO 47397
47264: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
47265: LD_ADDR_VAR 0 5
47269: PUSH
47270: LD_VAR 0 1
47274: PUSH
47275: LD_VAR 0 2
47279: PUSH
47280: LD_INT 4
47282: MINUS
47283: PUSH
47284: LD_INT 3
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: LIST
47291: PUSH
47292: LD_VAR 0 1
47296: PUSH
47297: LD_INT 3
47299: MINUS
47300: PUSH
47301: LD_VAR 0 2
47305: PUSH
47306: LD_INT 3
47308: MINUS
47309: PUSH
47310: LD_INT 2
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: LIST
47317: PUSH
47318: LD_VAR 0 1
47322: PUSH
47323: LD_INT 4
47325: MINUS
47326: PUSH
47327: LD_VAR 0 2
47331: PUSH
47332: LD_INT 1
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: LIST
47339: PUSH
47340: LD_VAR 0 1
47344: PUSH
47345: LD_VAR 0 2
47349: PUSH
47350: LD_INT 3
47352: PLUS
47353: PUSH
47354: LD_INT 0
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: LIST
47361: PUSH
47362: LD_VAR 0 1
47366: PUSH
47367: LD_INT 4
47369: PLUS
47370: PUSH
47371: LD_VAR 0 2
47375: PUSH
47376: LD_INT 4
47378: PLUS
47379: PUSH
47380: LD_INT 5
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: LIST
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: ST_TO_ADDR
// end ; 2 :
47395: GO 47954
47397: LD_INT 2
47399: DOUBLE
47400: EQUAL
47401: IFTRUE 47405
47403: GO 47534
47405: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
47406: LD_ADDR_VAR 0 5
47410: PUSH
47411: LD_VAR 0 1
47415: PUSH
47416: LD_VAR 0 2
47420: PUSH
47421: LD_INT 3
47423: MINUS
47424: PUSH
47425: LD_INT 3
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: LIST
47432: PUSH
47433: LD_VAR 0 1
47437: PUSH
47438: LD_INT 4
47440: PLUS
47441: PUSH
47442: LD_VAR 0 2
47446: PUSH
47447: LD_INT 4
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: LIST
47454: PUSH
47455: LD_VAR 0 1
47459: PUSH
47460: LD_VAR 0 2
47464: PUSH
47465: LD_INT 4
47467: PLUS
47468: PUSH
47469: LD_INT 0
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: LIST
47476: PUSH
47477: LD_VAR 0 1
47481: PUSH
47482: LD_INT 3
47484: MINUS
47485: PUSH
47486: LD_VAR 0 2
47490: PUSH
47491: LD_INT 1
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: LIST
47498: PUSH
47499: LD_VAR 0 1
47503: PUSH
47504: LD_INT 4
47506: MINUS
47507: PUSH
47508: LD_VAR 0 2
47512: PUSH
47513: LD_INT 4
47515: MINUS
47516: PUSH
47517: LD_INT 2
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: LIST
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: ST_TO_ADDR
// end ; 3 :
47532: GO 47954
47534: LD_INT 3
47536: DOUBLE
47537: EQUAL
47538: IFTRUE 47542
47540: GO 47675
47542: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
47543: LD_ADDR_VAR 0 5
47547: PUSH
47548: LD_VAR 0 1
47552: PUSH
47553: LD_INT 3
47555: PLUS
47556: PUSH
47557: LD_VAR 0 2
47561: PUSH
47562: LD_INT 4
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: LIST
47569: PUSH
47570: LD_VAR 0 1
47574: PUSH
47575: LD_INT 4
47577: PLUS
47578: PUSH
47579: LD_VAR 0 2
47583: PUSH
47584: LD_INT 4
47586: PLUS
47587: PUSH
47588: LD_INT 5
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: LIST
47595: PUSH
47596: LD_VAR 0 1
47600: PUSH
47601: LD_INT 4
47603: MINUS
47604: PUSH
47605: LD_VAR 0 2
47609: PUSH
47610: LD_INT 1
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: LIST
47617: PUSH
47618: LD_VAR 0 1
47622: PUSH
47623: LD_VAR 0 2
47627: PUSH
47628: LD_INT 4
47630: MINUS
47631: PUSH
47632: LD_INT 3
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: LIST
47639: PUSH
47640: LD_VAR 0 1
47644: PUSH
47645: LD_INT 3
47647: MINUS
47648: PUSH
47649: LD_VAR 0 2
47653: PUSH
47654: LD_INT 3
47656: MINUS
47657: PUSH
47658: LD_INT 2
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: LIST
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: ST_TO_ADDR
// end ; 4 :
47673: GO 47954
47675: LD_INT 4
47677: DOUBLE
47678: EQUAL
47679: IFTRUE 47683
47681: GO 47816
47683: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
47684: LD_ADDR_VAR 0 5
47688: PUSH
47689: LD_VAR 0 1
47693: PUSH
47694: LD_VAR 0 2
47698: PUSH
47699: LD_INT 4
47701: PLUS
47702: PUSH
47703: LD_INT 0
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: LIST
47710: PUSH
47711: LD_VAR 0 1
47715: PUSH
47716: LD_INT 3
47718: PLUS
47719: PUSH
47720: LD_VAR 0 2
47724: PUSH
47725: LD_INT 3
47727: PLUS
47728: PUSH
47729: LD_INT 5
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: LIST
47736: PUSH
47737: LD_VAR 0 1
47741: PUSH
47742: LD_INT 4
47744: PLUS
47745: PUSH
47746: LD_VAR 0 2
47750: PUSH
47751: LD_INT 4
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: LIST
47758: PUSH
47759: LD_VAR 0 1
47763: PUSH
47764: LD_VAR 0 2
47768: PUSH
47769: LD_INT 3
47771: MINUS
47772: PUSH
47773: LD_INT 3
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: LIST
47780: PUSH
47781: LD_VAR 0 1
47785: PUSH
47786: LD_INT 4
47788: MINUS
47789: PUSH
47790: LD_VAR 0 2
47794: PUSH
47795: LD_INT 4
47797: MINUS
47798: PUSH
47799: LD_INT 2
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: LIST
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: ST_TO_ADDR
// end ; 5 :
47814: GO 47954
47816: LD_INT 5
47818: DOUBLE
47819: EQUAL
47820: IFTRUE 47824
47822: GO 47953
47824: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
47825: LD_ADDR_VAR 0 5
47829: PUSH
47830: LD_VAR 0 1
47834: PUSH
47835: LD_INT 4
47837: MINUS
47838: PUSH
47839: LD_VAR 0 2
47843: PUSH
47844: LD_INT 1
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: LIST
47851: PUSH
47852: LD_VAR 0 1
47856: PUSH
47857: LD_VAR 0 2
47861: PUSH
47862: LD_INT 4
47864: MINUS
47865: PUSH
47866: LD_INT 3
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: LIST
47873: PUSH
47874: LD_VAR 0 1
47878: PUSH
47879: LD_INT 4
47881: PLUS
47882: PUSH
47883: LD_VAR 0 2
47887: PUSH
47888: LD_INT 4
47890: PLUS
47891: PUSH
47892: LD_INT 5
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: LIST
47899: PUSH
47900: LD_VAR 0 1
47904: PUSH
47905: LD_INT 3
47907: PLUS
47908: PUSH
47909: LD_VAR 0 2
47913: PUSH
47914: LD_INT 4
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: LIST
47921: PUSH
47922: LD_VAR 0 1
47926: PUSH
47927: LD_VAR 0 2
47931: PUSH
47932: LD_INT 3
47934: PLUS
47935: PUSH
47936: LD_INT 0
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: LIST
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: ST_TO_ADDR
// end ; end ;
47951: GO 47954
47953: POP
// result := list ;
47954: LD_ADDR_VAR 0 4
47958: PUSH
47959: LD_VAR 0 5
47963: ST_TO_ADDR
// end ;
47964: LD_VAR 0 4
47968: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
47969: LD_INT 0
47971: PPUSH
47972: PPUSH
47973: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
47974: LD_VAR 0 1
47978: NOT
47979: PUSH
47980: LD_VAR 0 2
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: LD_INT 2
47990: PUSH
47991: LD_INT 3
47993: PUSH
47994: LD_INT 4
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: IN
48003: NOT
48004: OR
48005: IFFALSE 48009
// exit ;
48007: GO 48101
// tmp := [ ] ;
48009: LD_ADDR_VAR 0 5
48013: PUSH
48014: EMPTY
48015: ST_TO_ADDR
// for i in units do
48016: LD_ADDR_VAR 0 4
48020: PUSH
48021: LD_VAR 0 1
48025: PUSH
48026: FOR_IN
48027: IFFALSE 48070
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
48029: LD_ADDR_VAR 0 5
48033: PUSH
48034: LD_VAR 0 5
48038: PPUSH
48039: LD_VAR 0 5
48043: PUSH
48044: LD_INT 1
48046: PLUS
48047: PPUSH
48048: LD_VAR 0 4
48052: PPUSH
48053: LD_VAR 0 2
48057: PPUSH
48058: CALL_OW 259
48062: PPUSH
48063: CALL_OW 2
48067: ST_TO_ADDR
48068: GO 48026
48070: POP
48071: POP
// if not tmp then
48072: LD_VAR 0 5
48076: NOT
48077: IFFALSE 48081
// exit ;
48079: GO 48101
// result := SortListByListDesc ( units , tmp ) ;
48081: LD_ADDR_VAR 0 3
48085: PUSH
48086: LD_VAR 0 1
48090: PPUSH
48091: LD_VAR 0 5
48095: PPUSH
48096: CALL_OW 77
48100: ST_TO_ADDR
// end ;
48101: LD_VAR 0 3
48105: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
48106: LD_INT 0
48108: PPUSH
48109: PPUSH
48110: PPUSH
// x := GetX ( building ) ;
48111: LD_ADDR_VAR 0 4
48115: PUSH
48116: LD_VAR 0 2
48120: PPUSH
48121: CALL_OW 250
48125: ST_TO_ADDR
// y := GetY ( building ) ;
48126: LD_ADDR_VAR 0 5
48130: PUSH
48131: LD_VAR 0 2
48135: PPUSH
48136: CALL_OW 251
48140: ST_TO_ADDR
// if GetTaskList ( unit ) then
48141: LD_VAR 0 1
48145: PPUSH
48146: CALL_OW 437
48150: IFFALSE 48245
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48152: LD_STRING e
48154: PUSH
48155: LD_VAR 0 1
48159: PPUSH
48160: CALL_OW 437
48164: PUSH
48165: LD_INT 1
48167: ARRAY
48168: PUSH
48169: LD_INT 1
48171: ARRAY
48172: EQUAL
48173: PUSH
48174: LD_VAR 0 4
48178: PUSH
48179: LD_VAR 0 1
48183: PPUSH
48184: CALL_OW 437
48188: PUSH
48189: LD_INT 1
48191: ARRAY
48192: PUSH
48193: LD_INT 2
48195: ARRAY
48196: EQUAL
48197: AND
48198: PUSH
48199: LD_VAR 0 5
48203: PUSH
48204: LD_VAR 0 1
48208: PPUSH
48209: CALL_OW 437
48213: PUSH
48214: LD_INT 1
48216: ARRAY
48217: PUSH
48218: LD_INT 3
48220: ARRAY
48221: EQUAL
48222: AND
48223: IFFALSE 48235
// result := true else
48225: LD_ADDR_VAR 0 3
48229: PUSH
48230: LD_INT 1
48232: ST_TO_ADDR
48233: GO 48243
// result := false ;
48235: LD_ADDR_VAR 0 3
48239: PUSH
48240: LD_INT 0
48242: ST_TO_ADDR
// end else
48243: GO 48253
// result := false ;
48245: LD_ADDR_VAR 0 3
48249: PUSH
48250: LD_INT 0
48252: ST_TO_ADDR
// end ;
48253: LD_VAR 0 3
48257: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
48258: LD_INT 0
48260: PPUSH
48261: PPUSH
48262: PPUSH
48263: PPUSH
// if not unit or not area then
48264: LD_VAR 0 1
48268: NOT
48269: PUSH
48270: LD_VAR 0 2
48274: NOT
48275: OR
48276: IFFALSE 48280
// exit ;
48278: GO 48444
// tmp := AreaToList ( area , i ) ;
48280: LD_ADDR_VAR 0 6
48284: PUSH
48285: LD_VAR 0 2
48289: PPUSH
48290: LD_VAR 0 5
48294: PPUSH
48295: CALL_OW 517
48299: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
48300: LD_ADDR_VAR 0 5
48304: PUSH
48305: DOUBLE
48306: LD_INT 1
48308: DEC
48309: ST_TO_ADDR
48310: LD_VAR 0 6
48314: PUSH
48315: LD_INT 1
48317: ARRAY
48318: PUSH
48319: FOR_TO
48320: IFFALSE 48442
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
48322: LD_ADDR_VAR 0 7
48326: PUSH
48327: LD_VAR 0 6
48331: PUSH
48332: LD_INT 1
48334: ARRAY
48335: PUSH
48336: LD_VAR 0 5
48340: ARRAY
48341: PUSH
48342: LD_VAR 0 6
48346: PUSH
48347: LD_INT 2
48349: ARRAY
48350: PUSH
48351: LD_VAR 0 5
48355: ARRAY
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
48361: LD_VAR 0 7
48365: PUSH
48366: LD_INT 1
48368: ARRAY
48369: PPUSH
48370: LD_VAR 0 7
48374: PUSH
48375: LD_INT 2
48377: ARRAY
48378: PPUSH
48379: CALL_OW 428
48383: PUSH
48384: LD_INT 0
48386: EQUAL
48387: IFFALSE 48440
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
48389: LD_VAR 0 1
48393: PPUSH
48394: LD_VAR 0 7
48398: PUSH
48399: LD_INT 1
48401: ARRAY
48402: PPUSH
48403: LD_VAR 0 7
48407: PUSH
48408: LD_INT 2
48410: ARRAY
48411: PPUSH
48412: LD_VAR 0 3
48416: PPUSH
48417: CALL_OW 48
// result := IsPlaced ( unit ) ;
48421: LD_ADDR_VAR 0 4
48425: PUSH
48426: LD_VAR 0 1
48430: PPUSH
48431: CALL_OW 305
48435: ST_TO_ADDR
// exit ;
48436: POP
48437: POP
48438: GO 48444
// end ; end ;
48440: GO 48319
48442: POP
48443: POP
// end ;
48444: LD_VAR 0 4
48448: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
48449: LD_INT 0
48451: PPUSH
48452: PPUSH
48453: PPUSH
// if not side or side > 8 then
48454: LD_VAR 0 1
48458: NOT
48459: PUSH
48460: LD_VAR 0 1
48464: PUSH
48465: LD_INT 8
48467: GREATER
48468: OR
48469: IFFALSE 48473
// exit ;
48471: GO 48660
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
48473: LD_ADDR_VAR 0 4
48477: PUSH
48478: LD_INT 22
48480: PUSH
48481: LD_VAR 0 1
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 21
48492: PUSH
48493: LD_INT 3
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PPUSH
48504: CALL_OW 69
48508: ST_TO_ADDR
// if not tmp then
48509: LD_VAR 0 4
48513: NOT
48514: IFFALSE 48518
// exit ;
48516: GO 48660
// enable_addtolog := true ;
48518: LD_ADDR_OWVAR 81
48522: PUSH
48523: LD_INT 1
48525: ST_TO_ADDR
// AddToLog ( [ ) ;
48526: LD_STRING [
48528: PPUSH
48529: CALL_OW 561
// for i in tmp do
48533: LD_ADDR_VAR 0 3
48537: PUSH
48538: LD_VAR 0 4
48542: PUSH
48543: FOR_IN
48544: IFFALSE 48651
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
48546: LD_STRING [
48548: PUSH
48549: LD_VAR 0 3
48553: PPUSH
48554: CALL_OW 266
48558: STR
48559: PUSH
48560: LD_STRING , 
48562: STR
48563: PUSH
48564: LD_VAR 0 3
48568: PPUSH
48569: CALL_OW 250
48573: STR
48574: PUSH
48575: LD_STRING , 
48577: STR
48578: PUSH
48579: LD_VAR 0 3
48583: PPUSH
48584: CALL_OW 251
48588: STR
48589: PUSH
48590: LD_STRING , 
48592: STR
48593: PUSH
48594: LD_VAR 0 3
48598: PPUSH
48599: CALL_OW 254
48603: STR
48604: PUSH
48605: LD_STRING , 
48607: STR
48608: PUSH
48609: LD_VAR 0 3
48613: PPUSH
48614: LD_INT 1
48616: PPUSH
48617: CALL_OW 268
48621: STR
48622: PUSH
48623: LD_STRING , 
48625: STR
48626: PUSH
48627: LD_VAR 0 3
48631: PPUSH
48632: LD_INT 2
48634: PPUSH
48635: CALL_OW 268
48639: STR
48640: PUSH
48641: LD_STRING ],
48643: STR
48644: PPUSH
48645: CALL_OW 561
// end ;
48649: GO 48543
48651: POP
48652: POP
// AddToLog ( ]; ) ;
48653: LD_STRING ];
48655: PPUSH
48656: CALL_OW 561
// end ;
48660: LD_VAR 0 2
48664: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
48665: LD_INT 0
48667: PPUSH
48668: PPUSH
48669: PPUSH
48670: PPUSH
48671: PPUSH
// if not area or not rate or not max then
48672: LD_VAR 0 1
48676: NOT
48677: PUSH
48678: LD_VAR 0 2
48682: NOT
48683: OR
48684: PUSH
48685: LD_VAR 0 4
48689: NOT
48690: OR
48691: IFFALSE 48695
// exit ;
48693: GO 48887
// while 1 do
48695: LD_INT 1
48697: IFFALSE 48887
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
48699: LD_ADDR_VAR 0 9
48703: PUSH
48704: LD_VAR 0 1
48708: PPUSH
48709: LD_INT 1
48711: PPUSH
48712: CALL_OW 287
48716: PUSH
48717: LD_INT 10
48719: MUL
48720: ST_TO_ADDR
// r := rate / 10 ;
48721: LD_ADDR_VAR 0 7
48725: PUSH
48726: LD_VAR 0 2
48730: PUSH
48731: LD_INT 10
48733: DIVREAL
48734: ST_TO_ADDR
// time := 1 1$00 ;
48735: LD_ADDR_VAR 0 8
48739: PUSH
48740: LD_INT 2100
48742: ST_TO_ADDR
// if amount < min then
48743: LD_VAR 0 9
48747: PUSH
48748: LD_VAR 0 3
48752: LESS
48753: IFFALSE 48771
// r := r * 2 else
48755: LD_ADDR_VAR 0 7
48759: PUSH
48760: LD_VAR 0 7
48764: PUSH
48765: LD_INT 2
48767: MUL
48768: ST_TO_ADDR
48769: GO 48797
// if amount > max then
48771: LD_VAR 0 9
48775: PUSH
48776: LD_VAR 0 4
48780: GREATER
48781: IFFALSE 48797
// r := r / 2 ;
48783: LD_ADDR_VAR 0 7
48787: PUSH
48788: LD_VAR 0 7
48792: PUSH
48793: LD_INT 2
48795: DIVREAL
48796: ST_TO_ADDR
// time := time / r ;
48797: LD_ADDR_VAR 0 8
48801: PUSH
48802: LD_VAR 0 8
48806: PUSH
48807: LD_VAR 0 7
48811: DIVREAL
48812: ST_TO_ADDR
// if time < 0 then
48813: LD_VAR 0 8
48817: PUSH
48818: LD_INT 0
48820: LESS
48821: IFFALSE 48838
// time := time * - 1 ;
48823: LD_ADDR_VAR 0 8
48827: PUSH
48828: LD_VAR 0 8
48832: PUSH
48833: LD_INT 1
48835: NEG
48836: MUL
48837: ST_TO_ADDR
// wait ( time ) ;
48838: LD_VAR 0 8
48842: PPUSH
48843: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
48847: LD_INT 35
48849: PPUSH
48850: LD_INT 875
48852: PPUSH
48853: CALL_OW 12
48857: PPUSH
48858: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
48862: LD_INT 1
48864: PPUSH
48865: LD_INT 5
48867: PPUSH
48868: CALL_OW 12
48872: PPUSH
48873: LD_VAR 0 1
48877: PPUSH
48878: LD_INT 1
48880: PPUSH
48881: CALL_OW 55
// end ;
48885: GO 48695
// end ;
48887: LD_VAR 0 5
48891: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
48892: LD_INT 0
48894: PPUSH
48895: PPUSH
48896: PPUSH
48897: PPUSH
48898: PPUSH
48899: PPUSH
48900: PPUSH
48901: PPUSH
// if not turrets or not factories then
48902: LD_VAR 0 1
48906: NOT
48907: PUSH
48908: LD_VAR 0 2
48912: NOT
48913: OR
48914: IFFALSE 48918
// exit ;
48916: GO 49225
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
48918: LD_ADDR_VAR 0 10
48922: PUSH
48923: LD_INT 5
48925: PUSH
48926: LD_INT 6
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 2
48935: PUSH
48936: LD_INT 4
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 3
48945: PUSH
48946: LD_INT 5
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 24
48960: PUSH
48961: LD_INT 25
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 23
48970: PUSH
48971: LD_INT 27
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 42
48984: PUSH
48985: LD_INT 43
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 44
48994: PUSH
48995: LD_INT 46
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 45
49004: PUSH
49005: LD_INT 47
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: LIST
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: LIST
49021: ST_TO_ADDR
// result := [ ] ;
49022: LD_ADDR_VAR 0 3
49026: PUSH
49027: EMPTY
49028: ST_TO_ADDR
// for i in turrets do
49029: LD_ADDR_VAR 0 4
49033: PUSH
49034: LD_VAR 0 1
49038: PUSH
49039: FOR_IN
49040: IFFALSE 49223
// begin nat := GetNation ( i ) ;
49042: LD_ADDR_VAR 0 7
49046: PUSH
49047: LD_VAR 0 4
49051: PPUSH
49052: CALL_OW 248
49056: ST_TO_ADDR
// weapon := 0 ;
49057: LD_ADDR_VAR 0 8
49061: PUSH
49062: LD_INT 0
49064: ST_TO_ADDR
// if not nat then
49065: LD_VAR 0 7
49069: NOT
49070: IFFALSE 49074
// continue ;
49072: GO 49039
// for j in list [ nat ] do
49074: LD_ADDR_VAR 0 5
49078: PUSH
49079: LD_VAR 0 10
49083: PUSH
49084: LD_VAR 0 7
49088: ARRAY
49089: PUSH
49090: FOR_IN
49091: IFFALSE 49132
// if GetBWeapon ( i ) = j [ 1 ] then
49093: LD_VAR 0 4
49097: PPUSH
49098: CALL_OW 269
49102: PUSH
49103: LD_VAR 0 5
49107: PUSH
49108: LD_INT 1
49110: ARRAY
49111: EQUAL
49112: IFFALSE 49130
// begin weapon := j [ 2 ] ;
49114: LD_ADDR_VAR 0 8
49118: PUSH
49119: LD_VAR 0 5
49123: PUSH
49124: LD_INT 2
49126: ARRAY
49127: ST_TO_ADDR
// break ;
49128: GO 49132
// end ;
49130: GO 49090
49132: POP
49133: POP
// if not weapon then
49134: LD_VAR 0 8
49138: NOT
49139: IFFALSE 49143
// continue ;
49141: GO 49039
// for k in factories do
49143: LD_ADDR_VAR 0 6
49147: PUSH
49148: LD_VAR 0 2
49152: PUSH
49153: FOR_IN
49154: IFFALSE 49219
// begin weapons := AvailableWeaponList ( k ) ;
49156: LD_ADDR_VAR 0 9
49160: PUSH
49161: LD_VAR 0 6
49165: PPUSH
49166: CALL_OW 478
49170: ST_TO_ADDR
// if not weapons then
49171: LD_VAR 0 9
49175: NOT
49176: IFFALSE 49180
// continue ;
49178: GO 49153
// if weapon in weapons then
49180: LD_VAR 0 8
49184: PUSH
49185: LD_VAR 0 9
49189: IN
49190: IFFALSE 49217
// begin result := [ i , weapon ] ;
49192: LD_ADDR_VAR 0 3
49196: PUSH
49197: LD_VAR 0 4
49201: PUSH
49202: LD_VAR 0 8
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: ST_TO_ADDR
// exit ;
49211: POP
49212: POP
49213: POP
49214: POP
49215: GO 49225
// end ; end ;
49217: GO 49153
49219: POP
49220: POP
// end ;
49221: GO 49039
49223: POP
49224: POP
// end ;
49225: LD_VAR 0 3
49229: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
49230: LD_INT 0
49232: PPUSH
// if not side or side > 8 then
49233: LD_VAR 0 3
49237: NOT
49238: PUSH
49239: LD_VAR 0 3
49243: PUSH
49244: LD_INT 8
49246: GREATER
49247: OR
49248: IFFALSE 49252
// exit ;
49250: GO 49311
// if not range then
49252: LD_VAR 0 4
49256: NOT
49257: IFFALSE 49268
// range := - 12 ;
49259: LD_ADDR_VAR 0 4
49263: PUSH
49264: LD_INT 12
49266: NEG
49267: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
49268: LD_VAR 0 1
49272: PPUSH
49273: LD_VAR 0 2
49277: PPUSH
49278: LD_VAR 0 3
49282: PPUSH
49283: LD_VAR 0 4
49287: PPUSH
49288: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
49292: LD_VAR 0 1
49296: PPUSH
49297: LD_VAR 0 2
49301: PPUSH
49302: LD_VAR 0 3
49306: PPUSH
49307: CALL_OW 331
// end ;
49311: LD_VAR 0 5
49315: RET
// export function Video ( mode ) ; begin
49316: LD_INT 0
49318: PPUSH
// ingame_video = mode ;
49319: LD_ADDR_OWVAR 52
49323: PUSH
49324: LD_VAR 0 1
49328: ST_TO_ADDR
// interface_hidden = mode ;
49329: LD_ADDR_OWVAR 54
49333: PUSH
49334: LD_VAR 0 1
49338: ST_TO_ADDR
// end ;
49339: LD_VAR 0 2
49343: RET
// export function Join ( array , element ) ; begin
49344: LD_INT 0
49346: PPUSH
// result := array ^ element ;
49347: LD_ADDR_VAR 0 3
49351: PUSH
49352: LD_VAR 0 1
49356: PUSH
49357: LD_VAR 0 2
49361: ADD
49362: ST_TO_ADDR
// end ;
49363: LD_VAR 0 3
49367: RET
// export function JoinUnion ( array , element ) ; begin
49368: LD_INT 0
49370: PPUSH
// result := array union element ;
49371: LD_ADDR_VAR 0 3
49375: PUSH
49376: LD_VAR 0 1
49380: PUSH
49381: LD_VAR 0 2
49385: UNION
49386: ST_TO_ADDR
// end ;
49387: LD_VAR 0 3
49391: RET
// export function GetBehemoths ( side ) ; begin
49392: LD_INT 0
49394: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
49395: LD_ADDR_VAR 0 2
49399: PUSH
49400: LD_INT 22
49402: PUSH
49403: LD_VAR 0 1
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 31
49414: PUSH
49415: LD_INT 25
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PPUSH
49426: CALL_OW 69
49430: ST_TO_ADDR
// end ;
49431: LD_VAR 0 2
49435: RET
// export function Shuffle ( array ) ; var i , index ; begin
49436: LD_INT 0
49438: PPUSH
49439: PPUSH
49440: PPUSH
// result := [ ] ;
49441: LD_ADDR_VAR 0 2
49445: PUSH
49446: EMPTY
49447: ST_TO_ADDR
// if not array then
49448: LD_VAR 0 1
49452: NOT
49453: IFFALSE 49457
// exit ;
49455: GO 49556
// Randomize ;
49457: CALL_OW 10
// for i = array downto 1 do
49461: LD_ADDR_VAR 0 3
49465: PUSH
49466: DOUBLE
49467: LD_VAR 0 1
49471: INC
49472: ST_TO_ADDR
49473: LD_INT 1
49475: PUSH
49476: FOR_DOWNTO
49477: IFFALSE 49554
// begin index := rand ( 1 , array ) ;
49479: LD_ADDR_VAR 0 4
49483: PUSH
49484: LD_INT 1
49486: PPUSH
49487: LD_VAR 0 1
49491: PPUSH
49492: CALL_OW 12
49496: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
49497: LD_ADDR_VAR 0 2
49501: PUSH
49502: LD_VAR 0 2
49506: PPUSH
49507: LD_VAR 0 2
49511: PUSH
49512: LD_INT 1
49514: PLUS
49515: PPUSH
49516: LD_VAR 0 1
49520: PUSH
49521: LD_VAR 0 4
49525: ARRAY
49526: PPUSH
49527: CALL_OW 2
49531: ST_TO_ADDR
// array := Delete ( array , index ) ;
49532: LD_ADDR_VAR 0 1
49536: PUSH
49537: LD_VAR 0 1
49541: PPUSH
49542: LD_VAR 0 4
49546: PPUSH
49547: CALL_OW 3
49551: ST_TO_ADDR
// end ;
49552: GO 49476
49554: POP
49555: POP
// end ;
49556: LD_VAR 0 2
49560: RET
// export function GetBaseMaterials ( base ) ; begin
49561: LD_INT 0
49563: PPUSH
// result := [ 0 , 0 , 0 ] ;
49564: LD_ADDR_VAR 0 2
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: LIST
49582: ST_TO_ADDR
// if not base then
49583: LD_VAR 0 1
49587: NOT
49588: IFFALSE 49592
// exit ;
49590: GO 49641
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
49592: LD_ADDR_VAR 0 2
49596: PUSH
49597: LD_VAR 0 1
49601: PPUSH
49602: LD_INT 1
49604: PPUSH
49605: CALL_OW 275
49609: PUSH
49610: LD_VAR 0 1
49614: PPUSH
49615: LD_INT 2
49617: PPUSH
49618: CALL_OW 275
49622: PUSH
49623: LD_VAR 0 1
49627: PPUSH
49628: LD_INT 3
49630: PPUSH
49631: CALL_OW 275
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: LIST
49640: ST_TO_ADDR
// end ;
49641: LD_VAR 0 2
49645: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
49646: LD_INT 0
49648: PPUSH
49649: PPUSH
// result := array ;
49650: LD_ADDR_VAR 0 3
49654: PUSH
49655: LD_VAR 0 1
49659: ST_TO_ADDR
// if size > 0 then
49660: LD_VAR 0 2
49664: PUSH
49665: LD_INT 0
49667: GREATER
49668: IFFALSE 49714
// for i := array downto size do
49670: LD_ADDR_VAR 0 4
49674: PUSH
49675: DOUBLE
49676: LD_VAR 0 1
49680: INC
49681: ST_TO_ADDR
49682: LD_VAR 0 2
49686: PUSH
49687: FOR_DOWNTO
49688: IFFALSE 49712
// result := Delete ( result , result ) ;
49690: LD_ADDR_VAR 0 3
49694: PUSH
49695: LD_VAR 0 3
49699: PPUSH
49700: LD_VAR 0 3
49704: PPUSH
49705: CALL_OW 3
49709: ST_TO_ADDR
49710: GO 49687
49712: POP
49713: POP
// end ;
49714: LD_VAR 0 3
49718: RET
// export function ComExit ( unit ) ; var tmp ; begin
49719: LD_INT 0
49721: PPUSH
49722: PPUSH
// if not IsInUnit ( unit ) then
49723: LD_VAR 0 1
49727: PPUSH
49728: CALL_OW 310
49732: NOT
49733: IFFALSE 49737
// exit ;
49735: GO 49797
// tmp := IsInUnit ( unit ) ;
49737: LD_ADDR_VAR 0 3
49741: PUSH
49742: LD_VAR 0 1
49746: PPUSH
49747: CALL_OW 310
49751: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
49752: LD_VAR 0 3
49756: PPUSH
49757: CALL_OW 247
49761: PUSH
49762: LD_INT 2
49764: EQUAL
49765: IFFALSE 49778
// ComExitVehicle ( unit ) else
49767: LD_VAR 0 1
49771: PPUSH
49772: CALL_OW 121
49776: GO 49787
// ComExitBuilding ( unit ) ;
49778: LD_VAR 0 1
49782: PPUSH
49783: CALL_OW 122
// result := tmp ;
49787: LD_ADDR_VAR 0 2
49791: PUSH
49792: LD_VAR 0 3
49796: ST_TO_ADDR
// end ;
49797: LD_VAR 0 2
49801: RET
// export function ResetHc ; begin
49802: LD_INT 0
49804: PPUSH
// InitHc ;
49805: CALL_OW 19
// hc_importance := 0 ;
49809: LD_ADDR_OWVAR 32
49813: PUSH
49814: LD_INT 0
49816: ST_TO_ADDR
// end ; end_of_file
49817: LD_VAR 0 1
49821: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
49822: GO 49824
49824: DISABLE
// begin ru_radar := 98 ;
49825: LD_ADDR_EXP 48
49829: PUSH
49830: LD_INT 98
49832: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
49833: LD_ADDR_EXP 49
49837: PUSH
49838: LD_INT 89
49840: ST_TO_ADDR
// us_hack := 99 ;
49841: LD_ADDR_EXP 50
49845: PUSH
49846: LD_INT 99
49848: ST_TO_ADDR
// us_artillery := 97 ;
49849: LD_ADDR_EXP 51
49853: PUSH
49854: LD_INT 97
49856: ST_TO_ADDR
// ar_bio_bomb := 91 ;
49857: LD_ADDR_EXP 52
49861: PUSH
49862: LD_INT 91
49864: ST_TO_ADDR
// tech_Artillery := 80 ;
49865: LD_ADDR_EXP 53
49869: PUSH
49870: LD_INT 80
49872: ST_TO_ADDR
// tech_RadMat := 81 ;
49873: LD_ADDR_EXP 54
49877: PUSH
49878: LD_INT 81
49880: ST_TO_ADDR
// tech_BasicTools := 82 ;
49881: LD_ADDR_EXP 55
49885: PUSH
49886: LD_INT 82
49888: ST_TO_ADDR
// tech_Cargo := 83 ;
49889: LD_ADDR_EXP 56
49893: PUSH
49894: LD_INT 83
49896: ST_TO_ADDR
// tech_Track := 84 ;
49897: LD_ADDR_EXP 57
49901: PUSH
49902: LD_INT 84
49904: ST_TO_ADDR
// tech_Crane := 85 ;
49905: LD_ADDR_EXP 58
49909: PUSH
49910: LD_INT 85
49912: ST_TO_ADDR
// tech_Bulldozer := 86 ;
49913: LD_ADDR_EXP 59
49917: PUSH
49918: LD_INT 86
49920: ST_TO_ADDR
// tech_Hovercraft := 87 ;
49921: LD_ADDR_EXP 60
49925: PUSH
49926: LD_INT 87
49928: ST_TO_ADDR
// end ; end_of_file
49929: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
49930: LD_INT 0
49932: PPUSH
49933: PPUSH
// skirmish := false ;
49934: LD_ADDR_EXP 61
49938: PUSH
49939: LD_INT 0
49941: ST_TO_ADDR
// debug_mc := false ;
49942: LD_ADDR_EXP 62
49946: PUSH
49947: LD_INT 0
49949: ST_TO_ADDR
// mc_bases := [ ] ;
49950: LD_ADDR_EXP 63
49954: PUSH
49955: EMPTY
49956: ST_TO_ADDR
// mc_sides := [ ] ;
49957: LD_ADDR_EXP 89
49961: PUSH
49962: EMPTY
49963: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
49964: LD_ADDR_EXP 64
49968: PUSH
49969: EMPTY
49970: ST_TO_ADDR
// mc_building_repairs := [ ] ;
49971: LD_ADDR_EXP 65
49975: PUSH
49976: EMPTY
49977: ST_TO_ADDR
// mc_need_heal := [ ] ;
49978: LD_ADDR_EXP 66
49982: PUSH
49983: EMPTY
49984: ST_TO_ADDR
// mc_healers := [ ] ;
49985: LD_ADDR_EXP 67
49989: PUSH
49990: EMPTY
49991: ST_TO_ADDR
// mc_build_list := [ ] ;
49992: LD_ADDR_EXP 68
49996: PUSH
49997: EMPTY
49998: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
49999: LD_ADDR_EXP 95
50003: PUSH
50004: EMPTY
50005: ST_TO_ADDR
// mc_builders := [ ] ;
50006: LD_ADDR_EXP 69
50010: PUSH
50011: EMPTY
50012: ST_TO_ADDR
// mc_construct_list := [ ] ;
50013: LD_ADDR_EXP 70
50017: PUSH
50018: EMPTY
50019: ST_TO_ADDR
// mc_turret_list := [ ] ;
50020: LD_ADDR_EXP 71
50024: PUSH
50025: EMPTY
50026: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
50027: LD_ADDR_EXP 72
50031: PUSH
50032: EMPTY
50033: ST_TO_ADDR
// mc_miners := [ ] ;
50034: LD_ADDR_EXP 77
50038: PUSH
50039: EMPTY
50040: ST_TO_ADDR
// mc_mines := [ ] ;
50041: LD_ADDR_EXP 76
50045: PUSH
50046: EMPTY
50047: ST_TO_ADDR
// mc_minefields := [ ] ;
50048: LD_ADDR_EXP 78
50052: PUSH
50053: EMPTY
50054: ST_TO_ADDR
// mc_crates := [ ] ;
50055: LD_ADDR_EXP 79
50059: PUSH
50060: EMPTY
50061: ST_TO_ADDR
// mc_crates_collector := [ ] ;
50062: LD_ADDR_EXP 80
50066: PUSH
50067: EMPTY
50068: ST_TO_ADDR
// mc_crates_area := [ ] ;
50069: LD_ADDR_EXP 81
50073: PUSH
50074: EMPTY
50075: ST_TO_ADDR
// mc_vehicles := [ ] ;
50076: LD_ADDR_EXP 82
50080: PUSH
50081: EMPTY
50082: ST_TO_ADDR
// mc_attack := [ ] ;
50083: LD_ADDR_EXP 83
50087: PUSH
50088: EMPTY
50089: ST_TO_ADDR
// mc_produce := [ ] ;
50090: LD_ADDR_EXP 84
50094: PUSH
50095: EMPTY
50096: ST_TO_ADDR
// mc_defender := [ ] ;
50097: LD_ADDR_EXP 85
50101: PUSH
50102: EMPTY
50103: ST_TO_ADDR
// mc_parking := [ ] ;
50104: LD_ADDR_EXP 87
50108: PUSH
50109: EMPTY
50110: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
50111: LD_ADDR_EXP 73
50115: PUSH
50116: EMPTY
50117: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
50118: LD_ADDR_EXP 75
50122: PUSH
50123: EMPTY
50124: ST_TO_ADDR
// mc_scan := [ ] ;
50125: LD_ADDR_EXP 86
50129: PUSH
50130: EMPTY
50131: ST_TO_ADDR
// mc_scan_area := [ ] ;
50132: LD_ADDR_EXP 88
50136: PUSH
50137: EMPTY
50138: ST_TO_ADDR
// mc_tech := [ ] ;
50139: LD_ADDR_EXP 90
50143: PUSH
50144: EMPTY
50145: ST_TO_ADDR
// mc_class := [ ] ;
50146: LD_ADDR_EXP 104
50150: PUSH
50151: EMPTY
50152: ST_TO_ADDR
// mc_class_case_use := [ ] ;
50153: LD_ADDR_EXP 105
50157: PUSH
50158: EMPTY
50159: ST_TO_ADDR
// end ;
50160: LD_VAR 0 1
50164: RET
// export function MC_Kill ( base ) ; begin
50165: LD_INT 0
50167: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
50168: LD_ADDR_EXP 63
50172: PUSH
50173: LD_EXP 63
50177: PPUSH
50178: LD_VAR 0 1
50182: PPUSH
50183: EMPTY
50184: PPUSH
50185: CALL_OW 1
50189: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
50190: LD_ADDR_EXP 64
50194: PUSH
50195: LD_EXP 64
50199: PPUSH
50200: LD_VAR 0 1
50204: PPUSH
50205: EMPTY
50206: PPUSH
50207: CALL_OW 1
50211: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
50212: LD_ADDR_EXP 65
50216: PUSH
50217: LD_EXP 65
50221: PPUSH
50222: LD_VAR 0 1
50226: PPUSH
50227: EMPTY
50228: PPUSH
50229: CALL_OW 1
50233: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
50234: LD_ADDR_EXP 66
50238: PUSH
50239: LD_EXP 66
50243: PPUSH
50244: LD_VAR 0 1
50248: PPUSH
50249: EMPTY
50250: PPUSH
50251: CALL_OW 1
50255: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
50256: LD_ADDR_EXP 67
50260: PUSH
50261: LD_EXP 67
50265: PPUSH
50266: LD_VAR 0 1
50270: PPUSH
50271: EMPTY
50272: PPUSH
50273: CALL_OW 1
50277: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
50278: LD_ADDR_EXP 68
50282: PUSH
50283: LD_EXP 68
50287: PPUSH
50288: LD_VAR 0 1
50292: PPUSH
50293: EMPTY
50294: PPUSH
50295: CALL_OW 1
50299: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
50300: LD_ADDR_EXP 69
50304: PUSH
50305: LD_EXP 69
50309: PPUSH
50310: LD_VAR 0 1
50314: PPUSH
50315: EMPTY
50316: PPUSH
50317: CALL_OW 1
50321: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
50322: LD_ADDR_EXP 70
50326: PUSH
50327: LD_EXP 70
50331: PPUSH
50332: LD_VAR 0 1
50336: PPUSH
50337: EMPTY
50338: PPUSH
50339: CALL_OW 1
50343: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
50344: LD_ADDR_EXP 71
50348: PUSH
50349: LD_EXP 71
50353: PPUSH
50354: LD_VAR 0 1
50358: PPUSH
50359: EMPTY
50360: PPUSH
50361: CALL_OW 1
50365: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
50366: LD_ADDR_EXP 72
50370: PUSH
50371: LD_EXP 72
50375: PPUSH
50376: LD_VAR 0 1
50380: PPUSH
50381: EMPTY
50382: PPUSH
50383: CALL_OW 1
50387: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
50388: LD_ADDR_EXP 73
50392: PUSH
50393: LD_EXP 73
50397: PPUSH
50398: LD_VAR 0 1
50402: PPUSH
50403: EMPTY
50404: PPUSH
50405: CALL_OW 1
50409: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
50410: LD_ADDR_EXP 74
50414: PUSH
50415: LD_EXP 74
50419: PPUSH
50420: LD_VAR 0 1
50424: PPUSH
50425: LD_INT 0
50427: PPUSH
50428: CALL_OW 1
50432: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
50433: LD_ADDR_EXP 75
50437: PUSH
50438: LD_EXP 75
50442: PPUSH
50443: LD_VAR 0 1
50447: PPUSH
50448: EMPTY
50449: PPUSH
50450: CALL_OW 1
50454: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
50455: LD_ADDR_EXP 76
50459: PUSH
50460: LD_EXP 76
50464: PPUSH
50465: LD_VAR 0 1
50469: PPUSH
50470: EMPTY
50471: PPUSH
50472: CALL_OW 1
50476: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
50477: LD_ADDR_EXP 77
50481: PUSH
50482: LD_EXP 77
50486: PPUSH
50487: LD_VAR 0 1
50491: PPUSH
50492: EMPTY
50493: PPUSH
50494: CALL_OW 1
50498: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
50499: LD_ADDR_EXP 78
50503: PUSH
50504: LD_EXP 78
50508: PPUSH
50509: LD_VAR 0 1
50513: PPUSH
50514: EMPTY
50515: PPUSH
50516: CALL_OW 1
50520: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
50521: LD_ADDR_EXP 79
50525: PUSH
50526: LD_EXP 79
50530: PPUSH
50531: LD_VAR 0 1
50535: PPUSH
50536: EMPTY
50537: PPUSH
50538: CALL_OW 1
50542: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
50543: LD_ADDR_EXP 80
50547: PUSH
50548: LD_EXP 80
50552: PPUSH
50553: LD_VAR 0 1
50557: PPUSH
50558: EMPTY
50559: PPUSH
50560: CALL_OW 1
50564: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
50565: LD_ADDR_EXP 81
50569: PUSH
50570: LD_EXP 81
50574: PPUSH
50575: LD_VAR 0 1
50579: PPUSH
50580: EMPTY
50581: PPUSH
50582: CALL_OW 1
50586: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
50587: LD_ADDR_EXP 82
50591: PUSH
50592: LD_EXP 82
50596: PPUSH
50597: LD_VAR 0 1
50601: PPUSH
50602: EMPTY
50603: PPUSH
50604: CALL_OW 1
50608: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
50609: LD_ADDR_EXP 83
50613: PUSH
50614: LD_EXP 83
50618: PPUSH
50619: LD_VAR 0 1
50623: PPUSH
50624: EMPTY
50625: PPUSH
50626: CALL_OW 1
50630: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
50631: LD_ADDR_EXP 84
50635: PUSH
50636: LD_EXP 84
50640: PPUSH
50641: LD_VAR 0 1
50645: PPUSH
50646: EMPTY
50647: PPUSH
50648: CALL_OW 1
50652: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
50653: LD_ADDR_EXP 85
50657: PUSH
50658: LD_EXP 85
50662: PPUSH
50663: LD_VAR 0 1
50667: PPUSH
50668: EMPTY
50669: PPUSH
50670: CALL_OW 1
50674: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
50675: LD_ADDR_EXP 86
50679: PUSH
50680: LD_EXP 86
50684: PPUSH
50685: LD_VAR 0 1
50689: PPUSH
50690: EMPTY
50691: PPUSH
50692: CALL_OW 1
50696: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
50697: LD_ADDR_EXP 87
50701: PUSH
50702: LD_EXP 87
50706: PPUSH
50707: LD_VAR 0 1
50711: PPUSH
50712: EMPTY
50713: PPUSH
50714: CALL_OW 1
50718: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
50719: LD_ADDR_EXP 88
50723: PUSH
50724: LD_EXP 88
50728: PPUSH
50729: LD_VAR 0 1
50733: PPUSH
50734: EMPTY
50735: PPUSH
50736: CALL_OW 1
50740: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
50741: LD_ADDR_EXP 90
50745: PUSH
50746: LD_EXP 90
50750: PPUSH
50751: LD_VAR 0 1
50755: PPUSH
50756: EMPTY
50757: PPUSH
50758: CALL_OW 1
50762: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
50763: LD_ADDR_EXP 92
50767: PUSH
50768: LD_EXP 92
50772: PPUSH
50773: LD_VAR 0 1
50777: PPUSH
50778: EMPTY
50779: PPUSH
50780: CALL_OW 1
50784: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
50785: LD_ADDR_EXP 93
50789: PUSH
50790: LD_EXP 93
50794: PPUSH
50795: LD_VAR 0 1
50799: PPUSH
50800: EMPTY
50801: PPUSH
50802: CALL_OW 1
50806: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
50807: LD_ADDR_EXP 94
50811: PUSH
50812: LD_EXP 94
50816: PPUSH
50817: LD_VAR 0 1
50821: PPUSH
50822: EMPTY
50823: PPUSH
50824: CALL_OW 1
50828: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
50829: LD_ADDR_EXP 95
50833: PUSH
50834: LD_EXP 95
50838: PPUSH
50839: LD_VAR 0 1
50843: PPUSH
50844: EMPTY
50845: PPUSH
50846: CALL_OW 1
50850: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
50851: LD_ADDR_EXP 96
50855: PUSH
50856: LD_EXP 96
50860: PPUSH
50861: LD_VAR 0 1
50865: PPUSH
50866: EMPTY
50867: PPUSH
50868: CALL_OW 1
50872: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
50873: LD_ADDR_EXP 97
50877: PUSH
50878: LD_EXP 97
50882: PPUSH
50883: LD_VAR 0 1
50887: PPUSH
50888: EMPTY
50889: PPUSH
50890: CALL_OW 1
50894: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
50895: LD_ADDR_EXP 98
50899: PUSH
50900: LD_EXP 98
50904: PPUSH
50905: LD_VAR 0 1
50909: PPUSH
50910: EMPTY
50911: PPUSH
50912: CALL_OW 1
50916: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
50917: LD_ADDR_EXP 99
50921: PUSH
50922: LD_EXP 99
50926: PPUSH
50927: LD_VAR 0 1
50931: PPUSH
50932: EMPTY
50933: PPUSH
50934: CALL_OW 1
50938: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
50939: LD_ADDR_EXP 100
50943: PUSH
50944: LD_EXP 100
50948: PPUSH
50949: LD_VAR 0 1
50953: PPUSH
50954: EMPTY
50955: PPUSH
50956: CALL_OW 1
50960: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
50961: LD_ADDR_EXP 101
50965: PUSH
50966: LD_EXP 101
50970: PPUSH
50971: LD_VAR 0 1
50975: PPUSH
50976: EMPTY
50977: PPUSH
50978: CALL_OW 1
50982: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
50983: LD_ADDR_EXP 102
50987: PUSH
50988: LD_EXP 102
50992: PPUSH
50993: LD_VAR 0 1
50997: PPUSH
50998: EMPTY
50999: PPUSH
51000: CALL_OW 1
51004: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
51005: LD_ADDR_EXP 103
51009: PUSH
51010: LD_EXP 103
51014: PPUSH
51015: LD_VAR 0 1
51019: PPUSH
51020: EMPTY
51021: PPUSH
51022: CALL_OW 1
51026: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
51027: LD_ADDR_EXP 104
51031: PUSH
51032: LD_EXP 104
51036: PPUSH
51037: LD_VAR 0 1
51041: PPUSH
51042: EMPTY
51043: PPUSH
51044: CALL_OW 1
51048: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
51049: LD_ADDR_EXP 105
51053: PUSH
51054: LD_EXP 105
51058: PPUSH
51059: LD_VAR 0 1
51063: PPUSH
51064: LD_INT 0
51066: PPUSH
51067: CALL_OW 1
51071: ST_TO_ADDR
// end ;
51072: LD_VAR 0 2
51076: RET
// export function MC_Add ( side , units ) ; var base ; begin
51077: LD_INT 0
51079: PPUSH
51080: PPUSH
// base := mc_bases + 1 ;
51081: LD_ADDR_VAR 0 4
51085: PUSH
51086: LD_EXP 63
51090: PUSH
51091: LD_INT 1
51093: PLUS
51094: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
51095: LD_ADDR_EXP 89
51099: PUSH
51100: LD_EXP 89
51104: PPUSH
51105: LD_VAR 0 4
51109: PPUSH
51110: LD_VAR 0 1
51114: PPUSH
51115: CALL_OW 1
51119: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
51120: LD_ADDR_EXP 63
51124: PUSH
51125: LD_EXP 63
51129: PPUSH
51130: LD_VAR 0 4
51134: PPUSH
51135: LD_VAR 0 2
51139: PPUSH
51140: CALL_OW 1
51144: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
51145: LD_ADDR_EXP 64
51149: PUSH
51150: LD_EXP 64
51154: PPUSH
51155: LD_VAR 0 4
51159: PPUSH
51160: EMPTY
51161: PPUSH
51162: CALL_OW 1
51166: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
51167: LD_ADDR_EXP 65
51171: PUSH
51172: LD_EXP 65
51176: PPUSH
51177: LD_VAR 0 4
51181: PPUSH
51182: EMPTY
51183: PPUSH
51184: CALL_OW 1
51188: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
51189: LD_ADDR_EXP 66
51193: PUSH
51194: LD_EXP 66
51198: PPUSH
51199: LD_VAR 0 4
51203: PPUSH
51204: EMPTY
51205: PPUSH
51206: CALL_OW 1
51210: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
51211: LD_ADDR_EXP 67
51215: PUSH
51216: LD_EXP 67
51220: PPUSH
51221: LD_VAR 0 4
51225: PPUSH
51226: EMPTY
51227: PPUSH
51228: CALL_OW 1
51232: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
51233: LD_ADDR_EXP 68
51237: PUSH
51238: LD_EXP 68
51242: PPUSH
51243: LD_VAR 0 4
51247: PPUSH
51248: EMPTY
51249: PPUSH
51250: CALL_OW 1
51254: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
51255: LD_ADDR_EXP 69
51259: PUSH
51260: LD_EXP 69
51264: PPUSH
51265: LD_VAR 0 4
51269: PPUSH
51270: EMPTY
51271: PPUSH
51272: CALL_OW 1
51276: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
51277: LD_ADDR_EXP 70
51281: PUSH
51282: LD_EXP 70
51286: PPUSH
51287: LD_VAR 0 4
51291: PPUSH
51292: EMPTY
51293: PPUSH
51294: CALL_OW 1
51298: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
51299: LD_ADDR_EXP 71
51303: PUSH
51304: LD_EXP 71
51308: PPUSH
51309: LD_VAR 0 4
51313: PPUSH
51314: EMPTY
51315: PPUSH
51316: CALL_OW 1
51320: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
51321: LD_ADDR_EXP 72
51325: PUSH
51326: LD_EXP 72
51330: PPUSH
51331: LD_VAR 0 4
51335: PPUSH
51336: EMPTY
51337: PPUSH
51338: CALL_OW 1
51342: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
51343: LD_ADDR_EXP 73
51347: PUSH
51348: LD_EXP 73
51352: PPUSH
51353: LD_VAR 0 4
51357: PPUSH
51358: EMPTY
51359: PPUSH
51360: CALL_OW 1
51364: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
51365: LD_ADDR_EXP 74
51369: PUSH
51370: LD_EXP 74
51374: PPUSH
51375: LD_VAR 0 4
51379: PPUSH
51380: LD_INT 0
51382: PPUSH
51383: CALL_OW 1
51387: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
51388: LD_ADDR_EXP 75
51392: PUSH
51393: LD_EXP 75
51397: PPUSH
51398: LD_VAR 0 4
51402: PPUSH
51403: EMPTY
51404: PPUSH
51405: CALL_OW 1
51409: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
51410: LD_ADDR_EXP 76
51414: PUSH
51415: LD_EXP 76
51419: PPUSH
51420: LD_VAR 0 4
51424: PPUSH
51425: EMPTY
51426: PPUSH
51427: CALL_OW 1
51431: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
51432: LD_ADDR_EXP 77
51436: PUSH
51437: LD_EXP 77
51441: PPUSH
51442: LD_VAR 0 4
51446: PPUSH
51447: EMPTY
51448: PPUSH
51449: CALL_OW 1
51453: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
51454: LD_ADDR_EXP 78
51458: PUSH
51459: LD_EXP 78
51463: PPUSH
51464: LD_VAR 0 4
51468: PPUSH
51469: EMPTY
51470: PPUSH
51471: CALL_OW 1
51475: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
51476: LD_ADDR_EXP 79
51480: PUSH
51481: LD_EXP 79
51485: PPUSH
51486: LD_VAR 0 4
51490: PPUSH
51491: EMPTY
51492: PPUSH
51493: CALL_OW 1
51497: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
51498: LD_ADDR_EXP 80
51502: PUSH
51503: LD_EXP 80
51507: PPUSH
51508: LD_VAR 0 4
51512: PPUSH
51513: EMPTY
51514: PPUSH
51515: CALL_OW 1
51519: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
51520: LD_ADDR_EXP 81
51524: PUSH
51525: LD_EXP 81
51529: PPUSH
51530: LD_VAR 0 4
51534: PPUSH
51535: EMPTY
51536: PPUSH
51537: CALL_OW 1
51541: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
51542: LD_ADDR_EXP 82
51546: PUSH
51547: LD_EXP 82
51551: PPUSH
51552: LD_VAR 0 4
51556: PPUSH
51557: EMPTY
51558: PPUSH
51559: CALL_OW 1
51563: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
51564: LD_ADDR_EXP 83
51568: PUSH
51569: LD_EXP 83
51573: PPUSH
51574: LD_VAR 0 4
51578: PPUSH
51579: EMPTY
51580: PPUSH
51581: CALL_OW 1
51585: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
51586: LD_ADDR_EXP 84
51590: PUSH
51591: LD_EXP 84
51595: PPUSH
51596: LD_VAR 0 4
51600: PPUSH
51601: EMPTY
51602: PPUSH
51603: CALL_OW 1
51607: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
51608: LD_ADDR_EXP 85
51612: PUSH
51613: LD_EXP 85
51617: PPUSH
51618: LD_VAR 0 4
51622: PPUSH
51623: EMPTY
51624: PPUSH
51625: CALL_OW 1
51629: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
51630: LD_ADDR_EXP 86
51634: PUSH
51635: LD_EXP 86
51639: PPUSH
51640: LD_VAR 0 4
51644: PPUSH
51645: EMPTY
51646: PPUSH
51647: CALL_OW 1
51651: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
51652: LD_ADDR_EXP 87
51656: PUSH
51657: LD_EXP 87
51661: PPUSH
51662: LD_VAR 0 4
51666: PPUSH
51667: EMPTY
51668: PPUSH
51669: CALL_OW 1
51673: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
51674: LD_ADDR_EXP 88
51678: PUSH
51679: LD_EXP 88
51683: PPUSH
51684: LD_VAR 0 4
51688: PPUSH
51689: EMPTY
51690: PPUSH
51691: CALL_OW 1
51695: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
51696: LD_ADDR_EXP 90
51700: PUSH
51701: LD_EXP 90
51705: PPUSH
51706: LD_VAR 0 4
51710: PPUSH
51711: EMPTY
51712: PPUSH
51713: CALL_OW 1
51717: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
51718: LD_ADDR_EXP 92
51722: PUSH
51723: LD_EXP 92
51727: PPUSH
51728: LD_VAR 0 4
51732: PPUSH
51733: EMPTY
51734: PPUSH
51735: CALL_OW 1
51739: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
51740: LD_ADDR_EXP 93
51744: PUSH
51745: LD_EXP 93
51749: PPUSH
51750: LD_VAR 0 4
51754: PPUSH
51755: EMPTY
51756: PPUSH
51757: CALL_OW 1
51761: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
51762: LD_ADDR_EXP 94
51766: PUSH
51767: LD_EXP 94
51771: PPUSH
51772: LD_VAR 0 4
51776: PPUSH
51777: EMPTY
51778: PPUSH
51779: CALL_OW 1
51783: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
51784: LD_ADDR_EXP 95
51788: PUSH
51789: LD_EXP 95
51793: PPUSH
51794: LD_VAR 0 4
51798: PPUSH
51799: EMPTY
51800: PPUSH
51801: CALL_OW 1
51805: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
51806: LD_ADDR_EXP 96
51810: PUSH
51811: LD_EXP 96
51815: PPUSH
51816: LD_VAR 0 4
51820: PPUSH
51821: EMPTY
51822: PPUSH
51823: CALL_OW 1
51827: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
51828: LD_ADDR_EXP 97
51832: PUSH
51833: LD_EXP 97
51837: PPUSH
51838: LD_VAR 0 4
51842: PPUSH
51843: EMPTY
51844: PPUSH
51845: CALL_OW 1
51849: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
51850: LD_ADDR_EXP 98
51854: PUSH
51855: LD_EXP 98
51859: PPUSH
51860: LD_VAR 0 4
51864: PPUSH
51865: EMPTY
51866: PPUSH
51867: CALL_OW 1
51871: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
51872: LD_ADDR_EXP 99
51876: PUSH
51877: LD_EXP 99
51881: PPUSH
51882: LD_VAR 0 4
51886: PPUSH
51887: EMPTY
51888: PPUSH
51889: CALL_OW 1
51893: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
51894: LD_ADDR_EXP 100
51898: PUSH
51899: LD_EXP 100
51903: PPUSH
51904: LD_VAR 0 4
51908: PPUSH
51909: EMPTY
51910: PPUSH
51911: CALL_OW 1
51915: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
51916: LD_ADDR_EXP 101
51920: PUSH
51921: LD_EXP 101
51925: PPUSH
51926: LD_VAR 0 4
51930: PPUSH
51931: EMPTY
51932: PPUSH
51933: CALL_OW 1
51937: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
51938: LD_ADDR_EXP 102
51942: PUSH
51943: LD_EXP 102
51947: PPUSH
51948: LD_VAR 0 4
51952: PPUSH
51953: EMPTY
51954: PPUSH
51955: CALL_OW 1
51959: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
51960: LD_ADDR_EXP 103
51964: PUSH
51965: LD_EXP 103
51969: PPUSH
51970: LD_VAR 0 4
51974: PPUSH
51975: EMPTY
51976: PPUSH
51977: CALL_OW 1
51981: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
51982: LD_ADDR_EXP 104
51986: PUSH
51987: LD_EXP 104
51991: PPUSH
51992: LD_VAR 0 4
51996: PPUSH
51997: EMPTY
51998: PPUSH
51999: CALL_OW 1
52003: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
52004: LD_ADDR_EXP 105
52008: PUSH
52009: LD_EXP 105
52013: PPUSH
52014: LD_VAR 0 4
52018: PPUSH
52019: LD_INT 0
52021: PPUSH
52022: CALL_OW 1
52026: ST_TO_ADDR
// result := base ;
52027: LD_ADDR_VAR 0 3
52031: PUSH
52032: LD_VAR 0 4
52036: ST_TO_ADDR
// end ;
52037: LD_VAR 0 3
52041: RET
// export function MC_Start ( ) ; var i ; begin
52042: LD_INT 0
52044: PPUSH
52045: PPUSH
// for i = 1 to mc_bases do
52046: LD_ADDR_VAR 0 2
52050: PUSH
52051: DOUBLE
52052: LD_INT 1
52054: DEC
52055: ST_TO_ADDR
52056: LD_EXP 63
52060: PUSH
52061: FOR_TO
52062: IFFALSE 53139
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
52064: LD_ADDR_EXP 63
52068: PUSH
52069: LD_EXP 63
52073: PPUSH
52074: LD_VAR 0 2
52078: PPUSH
52079: LD_EXP 63
52083: PUSH
52084: LD_VAR 0 2
52088: ARRAY
52089: PUSH
52090: LD_INT 0
52092: DIFF
52093: PPUSH
52094: CALL_OW 1
52098: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
52099: LD_ADDR_EXP 64
52103: PUSH
52104: LD_EXP 64
52108: PPUSH
52109: LD_VAR 0 2
52113: PPUSH
52114: EMPTY
52115: PPUSH
52116: CALL_OW 1
52120: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
52121: LD_ADDR_EXP 65
52125: PUSH
52126: LD_EXP 65
52130: PPUSH
52131: LD_VAR 0 2
52135: PPUSH
52136: EMPTY
52137: PPUSH
52138: CALL_OW 1
52142: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
52143: LD_ADDR_EXP 66
52147: PUSH
52148: LD_EXP 66
52152: PPUSH
52153: LD_VAR 0 2
52157: PPUSH
52158: EMPTY
52159: PPUSH
52160: CALL_OW 1
52164: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
52165: LD_ADDR_EXP 67
52169: PUSH
52170: LD_EXP 67
52174: PPUSH
52175: LD_VAR 0 2
52179: PPUSH
52180: EMPTY
52181: PUSH
52182: EMPTY
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PPUSH
52188: CALL_OW 1
52192: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
52193: LD_ADDR_EXP 68
52197: PUSH
52198: LD_EXP 68
52202: PPUSH
52203: LD_VAR 0 2
52207: PPUSH
52208: EMPTY
52209: PPUSH
52210: CALL_OW 1
52214: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
52215: LD_ADDR_EXP 95
52219: PUSH
52220: LD_EXP 95
52224: PPUSH
52225: LD_VAR 0 2
52229: PPUSH
52230: EMPTY
52231: PPUSH
52232: CALL_OW 1
52236: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
52237: LD_ADDR_EXP 69
52241: PUSH
52242: LD_EXP 69
52246: PPUSH
52247: LD_VAR 0 2
52251: PPUSH
52252: EMPTY
52253: PPUSH
52254: CALL_OW 1
52258: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
52259: LD_ADDR_EXP 70
52263: PUSH
52264: LD_EXP 70
52268: PPUSH
52269: LD_VAR 0 2
52273: PPUSH
52274: EMPTY
52275: PPUSH
52276: CALL_OW 1
52280: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
52281: LD_ADDR_EXP 71
52285: PUSH
52286: LD_EXP 71
52290: PPUSH
52291: LD_VAR 0 2
52295: PPUSH
52296: LD_EXP 63
52300: PUSH
52301: LD_VAR 0 2
52305: ARRAY
52306: PPUSH
52307: LD_INT 2
52309: PUSH
52310: LD_INT 30
52312: PUSH
52313: LD_INT 32
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 30
52322: PUSH
52323: LD_INT 33
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: LIST
52334: PPUSH
52335: CALL_OW 72
52339: PPUSH
52340: CALL_OW 1
52344: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
52345: LD_ADDR_EXP 72
52349: PUSH
52350: LD_EXP 72
52354: PPUSH
52355: LD_VAR 0 2
52359: PPUSH
52360: LD_EXP 63
52364: PUSH
52365: LD_VAR 0 2
52369: ARRAY
52370: PPUSH
52371: LD_INT 2
52373: PUSH
52374: LD_INT 30
52376: PUSH
52377: LD_INT 32
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 30
52386: PUSH
52387: LD_INT 31
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 58
52401: PUSH
52402: EMPTY
52403: LIST
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PPUSH
52409: CALL_OW 72
52413: PPUSH
52414: CALL_OW 1
52418: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
52419: LD_ADDR_EXP 73
52423: PUSH
52424: LD_EXP 73
52428: PPUSH
52429: LD_VAR 0 2
52433: PPUSH
52434: EMPTY
52435: PPUSH
52436: CALL_OW 1
52440: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
52441: LD_ADDR_EXP 77
52445: PUSH
52446: LD_EXP 77
52450: PPUSH
52451: LD_VAR 0 2
52455: PPUSH
52456: EMPTY
52457: PPUSH
52458: CALL_OW 1
52462: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
52463: LD_ADDR_EXP 76
52467: PUSH
52468: LD_EXP 76
52472: PPUSH
52473: LD_VAR 0 2
52477: PPUSH
52478: EMPTY
52479: PPUSH
52480: CALL_OW 1
52484: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
52485: LD_ADDR_EXP 78
52489: PUSH
52490: LD_EXP 78
52494: PPUSH
52495: LD_VAR 0 2
52499: PPUSH
52500: EMPTY
52501: PPUSH
52502: CALL_OW 1
52506: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
52507: LD_ADDR_EXP 79
52511: PUSH
52512: LD_EXP 79
52516: PPUSH
52517: LD_VAR 0 2
52521: PPUSH
52522: EMPTY
52523: PPUSH
52524: CALL_OW 1
52528: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
52529: LD_ADDR_EXP 80
52533: PUSH
52534: LD_EXP 80
52538: PPUSH
52539: LD_VAR 0 2
52543: PPUSH
52544: EMPTY
52545: PPUSH
52546: CALL_OW 1
52550: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
52551: LD_ADDR_EXP 81
52555: PUSH
52556: LD_EXP 81
52560: PPUSH
52561: LD_VAR 0 2
52565: PPUSH
52566: EMPTY
52567: PPUSH
52568: CALL_OW 1
52572: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
52573: LD_ADDR_EXP 82
52577: PUSH
52578: LD_EXP 82
52582: PPUSH
52583: LD_VAR 0 2
52587: PPUSH
52588: EMPTY
52589: PPUSH
52590: CALL_OW 1
52594: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
52595: LD_ADDR_EXP 83
52599: PUSH
52600: LD_EXP 83
52604: PPUSH
52605: LD_VAR 0 2
52609: PPUSH
52610: EMPTY
52611: PPUSH
52612: CALL_OW 1
52616: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
52617: LD_ADDR_EXP 84
52621: PUSH
52622: LD_EXP 84
52626: PPUSH
52627: LD_VAR 0 2
52631: PPUSH
52632: EMPTY
52633: PPUSH
52634: CALL_OW 1
52638: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
52639: LD_ADDR_EXP 85
52643: PUSH
52644: LD_EXP 85
52648: PPUSH
52649: LD_VAR 0 2
52653: PPUSH
52654: EMPTY
52655: PPUSH
52656: CALL_OW 1
52660: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
52661: LD_ADDR_EXP 74
52665: PUSH
52666: LD_EXP 74
52670: PPUSH
52671: LD_VAR 0 2
52675: PPUSH
52676: LD_INT 0
52678: PPUSH
52679: CALL_OW 1
52683: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
52684: LD_ADDR_EXP 87
52688: PUSH
52689: LD_EXP 87
52693: PPUSH
52694: LD_VAR 0 2
52698: PPUSH
52699: LD_INT 0
52701: PPUSH
52702: CALL_OW 1
52706: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
52707: LD_ADDR_EXP 75
52711: PUSH
52712: LD_EXP 75
52716: PPUSH
52717: LD_VAR 0 2
52721: PPUSH
52722: EMPTY
52723: PPUSH
52724: CALL_OW 1
52728: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
52729: LD_ADDR_EXP 86
52733: PUSH
52734: LD_EXP 86
52738: PPUSH
52739: LD_VAR 0 2
52743: PPUSH
52744: LD_INT 0
52746: PPUSH
52747: CALL_OW 1
52751: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
52752: LD_ADDR_EXP 88
52756: PUSH
52757: LD_EXP 88
52761: PPUSH
52762: LD_VAR 0 2
52766: PPUSH
52767: EMPTY
52768: PPUSH
52769: CALL_OW 1
52773: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
52774: LD_ADDR_EXP 91
52778: PUSH
52779: LD_EXP 91
52783: PPUSH
52784: LD_VAR 0 2
52788: PPUSH
52789: LD_INT 0
52791: PPUSH
52792: CALL_OW 1
52796: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
52797: LD_ADDR_EXP 92
52801: PUSH
52802: LD_EXP 92
52806: PPUSH
52807: LD_VAR 0 2
52811: PPUSH
52812: EMPTY
52813: PPUSH
52814: CALL_OW 1
52818: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
52819: LD_ADDR_EXP 93
52823: PUSH
52824: LD_EXP 93
52828: PPUSH
52829: LD_VAR 0 2
52833: PPUSH
52834: EMPTY
52835: PPUSH
52836: CALL_OW 1
52840: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
52841: LD_ADDR_EXP 94
52845: PUSH
52846: LD_EXP 94
52850: PPUSH
52851: LD_VAR 0 2
52855: PPUSH
52856: EMPTY
52857: PPUSH
52858: CALL_OW 1
52862: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
52863: LD_ADDR_EXP 96
52867: PUSH
52868: LD_EXP 96
52872: PPUSH
52873: LD_VAR 0 2
52877: PPUSH
52878: LD_EXP 63
52882: PUSH
52883: LD_VAR 0 2
52887: ARRAY
52888: PPUSH
52889: LD_INT 2
52891: PUSH
52892: LD_INT 30
52894: PUSH
52895: LD_INT 6
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 30
52904: PUSH
52905: LD_INT 7
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 30
52914: PUSH
52915: LD_INT 8
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: PPUSH
52928: CALL_OW 72
52932: PPUSH
52933: CALL_OW 1
52937: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
52938: LD_ADDR_EXP 97
52942: PUSH
52943: LD_EXP 97
52947: PPUSH
52948: LD_VAR 0 2
52952: PPUSH
52953: EMPTY
52954: PPUSH
52955: CALL_OW 1
52959: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
52960: LD_ADDR_EXP 98
52964: PUSH
52965: LD_EXP 98
52969: PPUSH
52970: LD_VAR 0 2
52974: PPUSH
52975: EMPTY
52976: PPUSH
52977: CALL_OW 1
52981: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
52982: LD_ADDR_EXP 99
52986: PUSH
52987: LD_EXP 99
52991: PPUSH
52992: LD_VAR 0 2
52996: PPUSH
52997: EMPTY
52998: PPUSH
52999: CALL_OW 1
53003: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
53004: LD_ADDR_EXP 100
53008: PUSH
53009: LD_EXP 100
53013: PPUSH
53014: LD_VAR 0 2
53018: PPUSH
53019: EMPTY
53020: PPUSH
53021: CALL_OW 1
53025: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
53026: LD_ADDR_EXP 101
53030: PUSH
53031: LD_EXP 101
53035: PPUSH
53036: LD_VAR 0 2
53040: PPUSH
53041: EMPTY
53042: PPUSH
53043: CALL_OW 1
53047: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
53048: LD_ADDR_EXP 102
53052: PUSH
53053: LD_EXP 102
53057: PPUSH
53058: LD_VAR 0 2
53062: PPUSH
53063: EMPTY
53064: PPUSH
53065: CALL_OW 1
53069: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
53070: LD_ADDR_EXP 103
53074: PUSH
53075: LD_EXP 103
53079: PPUSH
53080: LD_VAR 0 2
53084: PPUSH
53085: EMPTY
53086: PPUSH
53087: CALL_OW 1
53091: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
53092: LD_ADDR_EXP 104
53096: PUSH
53097: LD_EXP 104
53101: PPUSH
53102: LD_VAR 0 2
53106: PPUSH
53107: EMPTY
53108: PPUSH
53109: CALL_OW 1
53113: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
53114: LD_ADDR_EXP 105
53118: PUSH
53119: LD_EXP 105
53123: PPUSH
53124: LD_VAR 0 2
53128: PPUSH
53129: LD_INT 0
53131: PPUSH
53132: CALL_OW 1
53136: ST_TO_ADDR
// end ;
53137: GO 52061
53139: POP
53140: POP
// MC_InitSides ( ) ;
53141: CALL 53427 0 0
// MC_InitResearch ( ) ;
53145: CALL 53166 0 0
// CustomInitMacro ( ) ;
53149: CALL 5893 0 0
// skirmish := true ;
53153: LD_ADDR_EXP 61
53157: PUSH
53158: LD_INT 1
53160: ST_TO_ADDR
// end ;
53161: LD_VAR 0 1
53165: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
53166: LD_INT 0
53168: PPUSH
53169: PPUSH
53170: PPUSH
53171: PPUSH
53172: PPUSH
53173: PPUSH
// if not mc_bases then
53174: LD_EXP 63
53178: NOT
53179: IFFALSE 53183
// exit ;
53181: GO 53422
// for i = 1 to 8 do
53183: LD_ADDR_VAR 0 2
53187: PUSH
53188: DOUBLE
53189: LD_INT 1
53191: DEC
53192: ST_TO_ADDR
53193: LD_INT 8
53195: PUSH
53196: FOR_TO
53197: IFFALSE 53223
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
53199: LD_ADDR_EXP 90
53203: PUSH
53204: LD_EXP 90
53208: PPUSH
53209: LD_VAR 0 2
53213: PPUSH
53214: EMPTY
53215: PPUSH
53216: CALL_OW 1
53220: ST_TO_ADDR
53221: GO 53196
53223: POP
53224: POP
// tmp := [ ] ;
53225: LD_ADDR_VAR 0 5
53229: PUSH
53230: EMPTY
53231: ST_TO_ADDR
// for i = 1 to mc_sides do
53232: LD_ADDR_VAR 0 2
53236: PUSH
53237: DOUBLE
53238: LD_INT 1
53240: DEC
53241: ST_TO_ADDR
53242: LD_EXP 89
53246: PUSH
53247: FOR_TO
53248: IFFALSE 53306
// if not mc_sides [ i ] in tmp then
53250: LD_EXP 89
53254: PUSH
53255: LD_VAR 0 2
53259: ARRAY
53260: PUSH
53261: LD_VAR 0 5
53265: IN
53266: NOT
53267: IFFALSE 53304
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
53269: LD_ADDR_VAR 0 5
53273: PUSH
53274: LD_VAR 0 5
53278: PPUSH
53279: LD_VAR 0 5
53283: PUSH
53284: LD_INT 1
53286: PLUS
53287: PPUSH
53288: LD_EXP 89
53292: PUSH
53293: LD_VAR 0 2
53297: ARRAY
53298: PPUSH
53299: CALL_OW 2
53303: ST_TO_ADDR
53304: GO 53247
53306: POP
53307: POP
// if not tmp then
53308: LD_VAR 0 5
53312: NOT
53313: IFFALSE 53317
// exit ;
53315: GO 53422
// for j in tmp do
53317: LD_ADDR_VAR 0 3
53321: PUSH
53322: LD_VAR 0 5
53326: PUSH
53327: FOR_IN
53328: IFFALSE 53420
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
53330: LD_ADDR_VAR 0 6
53334: PUSH
53335: LD_INT 22
53337: PUSH
53338: LD_VAR 0 3
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PPUSH
53347: CALL_OW 69
53351: ST_TO_ADDR
// if not un then
53352: LD_VAR 0 6
53356: NOT
53357: IFFALSE 53361
// continue ;
53359: GO 53327
// nation := GetNation ( un [ 1 ] ) ;
53361: LD_ADDR_VAR 0 4
53365: PUSH
53366: LD_VAR 0 6
53370: PUSH
53371: LD_INT 1
53373: ARRAY
53374: PPUSH
53375: CALL_OW 248
53379: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
53380: LD_ADDR_EXP 90
53384: PUSH
53385: LD_EXP 90
53389: PPUSH
53390: LD_VAR 0 3
53394: PPUSH
53395: LD_VAR 0 3
53399: PPUSH
53400: LD_VAR 0 4
53404: PPUSH
53405: LD_INT 1
53407: PPUSH
53408: CALL 13537 0 3
53412: PPUSH
53413: CALL_OW 1
53417: ST_TO_ADDR
// end ;
53418: GO 53327
53420: POP
53421: POP
// end ;
53422: LD_VAR 0 1
53426: RET
// export function MC_InitSides ( ) ; var i ; begin
53427: LD_INT 0
53429: PPUSH
53430: PPUSH
// if not mc_bases then
53431: LD_EXP 63
53435: NOT
53436: IFFALSE 53440
// exit ;
53438: GO 53514
// for i = 1 to mc_bases do
53440: LD_ADDR_VAR 0 2
53444: PUSH
53445: DOUBLE
53446: LD_INT 1
53448: DEC
53449: ST_TO_ADDR
53450: LD_EXP 63
53454: PUSH
53455: FOR_TO
53456: IFFALSE 53512
// if mc_bases [ i ] then
53458: LD_EXP 63
53462: PUSH
53463: LD_VAR 0 2
53467: ARRAY
53468: IFFALSE 53510
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
53470: LD_ADDR_EXP 89
53474: PUSH
53475: LD_EXP 89
53479: PPUSH
53480: LD_VAR 0 2
53484: PPUSH
53485: LD_EXP 63
53489: PUSH
53490: LD_VAR 0 2
53494: ARRAY
53495: PUSH
53496: LD_INT 1
53498: ARRAY
53499: PPUSH
53500: CALL_OW 255
53504: PPUSH
53505: CALL_OW 1
53509: ST_TO_ADDR
53510: GO 53455
53512: POP
53513: POP
// end ;
53514: LD_VAR 0 1
53518: RET
// every 0 0$01 trigger skirmish do
53519: LD_EXP 61
53523: IFFALSE 53677
53525: GO 53527
53527: DISABLE
// begin enable ;
53528: ENABLE
// MC_CheckBuildings ( ) ;
53529: CALL 58175 0 0
// MC_CheckPeopleLife ( ) ;
53533: CALL 58300 0 0
// RaiseSailEvent ( 100 ) ;
53537: LD_INT 100
53539: PPUSH
53540: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
53544: LD_INT 103
53546: PPUSH
53547: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
53551: LD_INT 104
53553: PPUSH
53554: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
53558: LD_INT 105
53560: PPUSH
53561: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
53565: LD_INT 106
53567: PPUSH
53568: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
53572: LD_INT 107
53574: PPUSH
53575: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
53579: LD_INT 108
53581: PPUSH
53582: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
53586: LD_INT 109
53588: PPUSH
53589: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
53593: LD_INT 110
53595: PPUSH
53596: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
53600: LD_INT 111
53602: PPUSH
53603: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
53607: LD_INT 112
53609: PPUSH
53610: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
53614: LD_INT 113
53616: PPUSH
53617: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
53621: LD_INT 120
53623: PPUSH
53624: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
53628: LD_INT 121
53630: PPUSH
53631: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
53635: LD_INT 122
53637: PPUSH
53638: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
53642: LD_INT 123
53644: PPUSH
53645: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
53649: LD_INT 124
53651: PPUSH
53652: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
53656: LD_INT 125
53658: PPUSH
53659: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
53663: LD_INT 126
53665: PPUSH
53666: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
53670: LD_INT 200
53672: PPUSH
53673: CALL_OW 427
// end ;
53677: END
// on SailEvent ( event ) do begin if event < 100 then
53678: LD_VAR 0 1
53682: PUSH
53683: LD_INT 100
53685: LESS
53686: IFFALSE 53697
// CustomEvent ( event ) ;
53688: LD_VAR 0 1
53692: PPUSH
53693: CALL 5885 0 1
// if event = 100 then
53697: LD_VAR 0 1
53701: PUSH
53702: LD_INT 100
53704: EQUAL
53705: IFFALSE 53711
// MC_ClassManager ( ) ;
53707: CALL 54103 0 0
// if event = 101 then
53711: LD_VAR 0 1
53715: PUSH
53716: LD_INT 101
53718: EQUAL
53719: IFFALSE 53725
// MC_RepairBuildings ( ) ;
53721: CALL 58885 0 0
// if event = 102 then
53725: LD_VAR 0 1
53729: PUSH
53730: LD_INT 102
53732: EQUAL
53733: IFFALSE 53739
// MC_Heal ( ) ;
53735: CALL 59744 0 0
// if event = 103 then
53739: LD_VAR 0 1
53743: PUSH
53744: LD_INT 103
53746: EQUAL
53747: IFFALSE 53753
// MC_Build ( ) ;
53749: CALL 60166 0 0
// if event = 104 then
53753: LD_VAR 0 1
53757: PUSH
53758: LD_INT 104
53760: EQUAL
53761: IFFALSE 53767
// MC_TurretWeapon ( ) ;
53763: CALL 61779 0 0
// if event = 105 then
53767: LD_VAR 0 1
53771: PUSH
53772: LD_INT 105
53774: EQUAL
53775: IFFALSE 53781
// MC_BuildUpgrade ( ) ;
53777: CALL 61330 0 0
// if event = 106 then
53781: LD_VAR 0 1
53785: PUSH
53786: LD_INT 106
53788: EQUAL
53789: IFFALSE 53795
// MC_PlantMines ( ) ;
53791: CALL 62209 0 0
// if event = 107 then
53795: LD_VAR 0 1
53799: PUSH
53800: LD_INT 107
53802: EQUAL
53803: IFFALSE 53809
// MC_CollectCrates ( ) ;
53805: CALL 63007 0 0
// if event = 108 then
53809: LD_VAR 0 1
53813: PUSH
53814: LD_INT 108
53816: EQUAL
53817: IFFALSE 53823
// MC_LinkRemoteControl ( ) ;
53819: CALL 64783 0 0
// if event = 109 then
53823: LD_VAR 0 1
53827: PUSH
53828: LD_INT 109
53830: EQUAL
53831: IFFALSE 53837
// MC_ProduceVehicle ( ) ;
53833: CALL 64964 0 0
// if event = 110 then
53837: LD_VAR 0 1
53841: PUSH
53842: LD_INT 110
53844: EQUAL
53845: IFFALSE 53851
// MC_SendAttack ( ) ;
53847: CALL 65430 0 0
// if event = 111 then
53851: LD_VAR 0 1
53855: PUSH
53856: LD_INT 111
53858: EQUAL
53859: IFFALSE 53865
// MC_Defend ( ) ;
53861: CALL 65538 0 0
// if event = 112 then
53865: LD_VAR 0 1
53869: PUSH
53870: LD_INT 112
53872: EQUAL
53873: IFFALSE 53879
// MC_Research ( ) ;
53875: CALL 66143 0 0
// if event = 113 then
53879: LD_VAR 0 1
53883: PUSH
53884: LD_INT 113
53886: EQUAL
53887: IFFALSE 53893
// MC_MinesTrigger ( ) ;
53889: CALL 67257 0 0
// if event = 120 then
53893: LD_VAR 0 1
53897: PUSH
53898: LD_INT 120
53900: EQUAL
53901: IFFALSE 53907
// MC_RepairVehicle ( ) ;
53903: CALL 67356 0 0
// if event = 121 then
53907: LD_VAR 0 1
53911: PUSH
53912: LD_INT 121
53914: EQUAL
53915: IFFALSE 53921
// MC_TameApe ( ) ;
53917: CALL 68086 0 0
// if event = 122 then
53921: LD_VAR 0 1
53925: PUSH
53926: LD_INT 122
53928: EQUAL
53929: IFFALSE 53935
// MC_ChangeApeClass ( ) ;
53931: CALL 68915 0 0
// if event = 123 then
53935: LD_VAR 0 1
53939: PUSH
53940: LD_INT 123
53942: EQUAL
53943: IFFALSE 53949
// MC_Bazooka ( ) ;
53945: CALL 69565 0 0
// if event = 124 then
53949: LD_VAR 0 1
53953: PUSH
53954: LD_INT 124
53956: EQUAL
53957: IFFALSE 53963
// MC_TeleportExit ( ) ;
53959: CALL 69763 0 0
// if event = 125 then
53963: LD_VAR 0 1
53967: PUSH
53968: LD_INT 125
53970: EQUAL
53971: IFFALSE 53977
// MC_Deposits ( ) ;
53973: CALL 70410 0 0
// if event = 126 then
53977: LD_VAR 0 1
53981: PUSH
53982: LD_INT 126
53984: EQUAL
53985: IFFALSE 53991
// MC_RemoteDriver ( ) ;
53987: CALL 71035 0 0
// if event = 200 then
53991: LD_VAR 0 1
53995: PUSH
53996: LD_INT 200
53998: EQUAL
53999: IFFALSE 54005
// MC_Idle ( ) ;
54001: CALL 72984 0 0
// end ;
54005: PPOPN 1
54007: END
// export function MC_Reset ( base , tag ) ; var i ; begin
54008: LD_INT 0
54010: PPUSH
54011: PPUSH
// if not mc_bases [ base ] or not tag then
54012: LD_EXP 63
54016: PUSH
54017: LD_VAR 0 1
54021: ARRAY
54022: NOT
54023: PUSH
54024: LD_VAR 0 2
54028: NOT
54029: OR
54030: IFFALSE 54034
// exit ;
54032: GO 54098
// for i in mc_bases [ base ] union mc_ape [ base ] do
54034: LD_ADDR_VAR 0 4
54038: PUSH
54039: LD_EXP 63
54043: PUSH
54044: LD_VAR 0 1
54048: ARRAY
54049: PUSH
54050: LD_EXP 92
54054: PUSH
54055: LD_VAR 0 1
54059: ARRAY
54060: UNION
54061: PUSH
54062: FOR_IN
54063: IFFALSE 54096
// if GetTag ( i ) = tag then
54065: LD_VAR 0 4
54069: PPUSH
54070: CALL_OW 110
54074: PUSH
54075: LD_VAR 0 2
54079: EQUAL
54080: IFFALSE 54094
// SetTag ( i , 0 ) ;
54082: LD_VAR 0 4
54086: PPUSH
54087: LD_INT 0
54089: PPUSH
54090: CALL_OW 109
54094: GO 54062
54096: POP
54097: POP
// end ;
54098: LD_VAR 0 3
54102: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
54103: LD_INT 0
54105: PPUSH
54106: PPUSH
54107: PPUSH
54108: PPUSH
54109: PPUSH
54110: PPUSH
54111: PPUSH
54112: PPUSH
// if not mc_bases then
54113: LD_EXP 63
54117: NOT
54118: IFFALSE 54122
// exit ;
54120: GO 54580
// for i = 1 to mc_bases do
54122: LD_ADDR_VAR 0 2
54126: PUSH
54127: DOUBLE
54128: LD_INT 1
54130: DEC
54131: ST_TO_ADDR
54132: LD_EXP 63
54136: PUSH
54137: FOR_TO
54138: IFFALSE 54578
// begin tmp := MC_ClassCheckReq ( i ) ;
54140: LD_ADDR_VAR 0 4
54144: PUSH
54145: LD_VAR 0 2
54149: PPUSH
54150: CALL 54585 0 1
54154: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
54155: LD_ADDR_EXP 104
54159: PUSH
54160: LD_EXP 104
54164: PPUSH
54165: LD_VAR 0 2
54169: PPUSH
54170: LD_VAR 0 4
54174: PPUSH
54175: CALL_OW 1
54179: ST_TO_ADDR
// if not tmp then
54180: LD_VAR 0 4
54184: NOT
54185: IFFALSE 54189
// continue ;
54187: GO 54137
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
54189: LD_ADDR_VAR 0 6
54193: PUSH
54194: LD_EXP 63
54198: PUSH
54199: LD_VAR 0 2
54203: ARRAY
54204: PPUSH
54205: LD_INT 2
54207: PUSH
54208: LD_INT 30
54210: PUSH
54211: LD_INT 4
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 30
54220: PUSH
54221: LD_INT 5
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: LIST
54232: PPUSH
54233: CALL_OW 72
54237: PUSH
54238: LD_EXP 63
54242: PUSH
54243: LD_VAR 0 2
54247: ARRAY
54248: PPUSH
54249: LD_INT 2
54251: PUSH
54252: LD_INT 30
54254: PUSH
54255: LD_INT 0
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 30
54264: PUSH
54265: LD_INT 1
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: LIST
54276: PPUSH
54277: CALL_OW 72
54281: PUSH
54282: LD_EXP 63
54286: PUSH
54287: LD_VAR 0 2
54291: ARRAY
54292: PPUSH
54293: LD_INT 30
54295: PUSH
54296: LD_INT 3
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PPUSH
54303: CALL_OW 72
54307: PUSH
54308: LD_EXP 63
54312: PUSH
54313: LD_VAR 0 2
54317: ARRAY
54318: PPUSH
54319: LD_INT 2
54321: PUSH
54322: LD_INT 30
54324: PUSH
54325: LD_INT 6
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 30
54334: PUSH
54335: LD_INT 7
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 30
54344: PUSH
54345: LD_INT 8
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: PPUSH
54358: CALL_OW 72
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: ST_TO_ADDR
// for j = 1 to 4 do
54369: LD_ADDR_VAR 0 3
54373: PUSH
54374: DOUBLE
54375: LD_INT 1
54377: DEC
54378: ST_TO_ADDR
54379: LD_INT 4
54381: PUSH
54382: FOR_TO
54383: IFFALSE 54574
// begin if not tmp [ j ] then
54385: LD_VAR 0 4
54389: PUSH
54390: LD_VAR 0 3
54394: ARRAY
54395: NOT
54396: IFFALSE 54400
// continue ;
54398: GO 54382
// for p in tmp [ j ] do
54400: LD_ADDR_VAR 0 5
54404: PUSH
54405: LD_VAR 0 4
54409: PUSH
54410: LD_VAR 0 3
54414: ARRAY
54415: PUSH
54416: FOR_IN
54417: IFFALSE 54570
// begin if not b [ j ] then
54419: LD_VAR 0 6
54423: PUSH
54424: LD_VAR 0 3
54428: ARRAY
54429: NOT
54430: IFFALSE 54434
// break ;
54432: GO 54570
// e := 0 ;
54434: LD_ADDR_VAR 0 7
54438: PUSH
54439: LD_INT 0
54441: ST_TO_ADDR
// for k in b [ j ] do
54442: LD_ADDR_VAR 0 8
54446: PUSH
54447: LD_VAR 0 6
54451: PUSH
54452: LD_VAR 0 3
54456: ARRAY
54457: PUSH
54458: FOR_IN
54459: IFFALSE 54486
// if IsNotFull ( k ) then
54461: LD_VAR 0 8
54465: PPUSH
54466: CALL 15686 0 1
54470: IFFALSE 54484
// begin e := k ;
54472: LD_ADDR_VAR 0 7
54476: PUSH
54477: LD_VAR 0 8
54481: ST_TO_ADDR
// break ;
54482: GO 54486
// end ;
54484: GO 54458
54486: POP
54487: POP
// if e and not UnitGoingToBuilding ( p , e ) then
54488: LD_VAR 0 7
54492: PUSH
54493: LD_VAR 0 5
54497: PPUSH
54498: LD_VAR 0 7
54502: PPUSH
54503: CALL 48106 0 2
54507: NOT
54508: AND
54509: IFFALSE 54568
// begin if IsInUnit ( p ) then
54511: LD_VAR 0 5
54515: PPUSH
54516: CALL_OW 310
54520: IFFALSE 54531
// ComExitBuilding ( p ) ;
54522: LD_VAR 0 5
54526: PPUSH
54527: CALL_OW 122
// ComEnterUnit ( p , e ) ;
54531: LD_VAR 0 5
54535: PPUSH
54536: LD_VAR 0 7
54540: PPUSH
54541: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
54545: LD_VAR 0 5
54549: PPUSH
54550: LD_VAR 0 3
54554: PPUSH
54555: CALL_OW 183
// AddComExitBuilding ( p ) ;
54559: LD_VAR 0 5
54563: PPUSH
54564: CALL_OW 182
// end ; end ;
54568: GO 54416
54570: POP
54571: POP
// end ;
54572: GO 54382
54574: POP
54575: POP
// end ;
54576: GO 54137
54578: POP
54579: POP
// end ;
54580: LD_VAR 0 1
54584: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
54585: LD_INT 0
54587: PPUSH
54588: PPUSH
54589: PPUSH
54590: PPUSH
54591: PPUSH
54592: PPUSH
54593: PPUSH
54594: PPUSH
54595: PPUSH
54596: PPUSH
54597: PPUSH
54598: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
54599: LD_VAR 0 1
54603: NOT
54604: PUSH
54605: LD_EXP 63
54609: PUSH
54610: LD_VAR 0 1
54614: ARRAY
54615: NOT
54616: OR
54617: PUSH
54618: LD_EXP 63
54622: PUSH
54623: LD_VAR 0 1
54627: ARRAY
54628: PPUSH
54629: LD_INT 2
54631: PUSH
54632: LD_INT 30
54634: PUSH
54635: LD_INT 0
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 30
54644: PUSH
54645: LD_INT 1
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: LIST
54656: PPUSH
54657: CALL_OW 72
54661: NOT
54662: OR
54663: IFFALSE 54667
// exit ;
54665: GO 58170
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
54667: LD_ADDR_VAR 0 4
54671: PUSH
54672: LD_EXP 63
54676: PUSH
54677: LD_VAR 0 1
54681: ARRAY
54682: PPUSH
54683: LD_INT 2
54685: PUSH
54686: LD_INT 25
54688: PUSH
54689: LD_INT 1
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 25
54698: PUSH
54699: LD_INT 2
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 25
54708: PUSH
54709: LD_INT 3
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 25
54718: PUSH
54719: LD_INT 4
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 25
54728: PUSH
54729: LD_INT 5
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 25
54738: PUSH
54739: LD_INT 8
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 25
54748: PUSH
54749: LD_INT 9
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: PPUSH
54766: CALL_OW 72
54770: ST_TO_ADDR
// if not tmp then
54771: LD_VAR 0 4
54775: NOT
54776: IFFALSE 54780
// exit ;
54778: GO 58170
// for i in tmp do
54780: LD_ADDR_VAR 0 3
54784: PUSH
54785: LD_VAR 0 4
54789: PUSH
54790: FOR_IN
54791: IFFALSE 54822
// if GetTag ( i ) then
54793: LD_VAR 0 3
54797: PPUSH
54798: CALL_OW 110
54802: IFFALSE 54820
// tmp := tmp diff i ;
54804: LD_ADDR_VAR 0 4
54808: PUSH
54809: LD_VAR 0 4
54813: PUSH
54814: LD_VAR 0 3
54818: DIFF
54819: ST_TO_ADDR
54820: GO 54790
54822: POP
54823: POP
// if not tmp then
54824: LD_VAR 0 4
54828: NOT
54829: IFFALSE 54833
// exit ;
54831: GO 58170
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
54833: LD_ADDR_VAR 0 5
54837: PUSH
54838: LD_EXP 63
54842: PUSH
54843: LD_VAR 0 1
54847: ARRAY
54848: PPUSH
54849: LD_INT 2
54851: PUSH
54852: LD_INT 25
54854: PUSH
54855: LD_INT 1
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 25
54864: PUSH
54865: LD_INT 5
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 25
54874: PUSH
54875: LD_INT 8
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 25
54884: PUSH
54885: LD_INT 9
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: PPUSH
54899: CALL_OW 72
54903: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
54904: LD_ADDR_VAR 0 6
54908: PUSH
54909: LD_EXP 63
54913: PUSH
54914: LD_VAR 0 1
54918: ARRAY
54919: PPUSH
54920: LD_INT 25
54922: PUSH
54923: LD_INT 2
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PPUSH
54930: CALL_OW 72
54934: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
54935: LD_ADDR_VAR 0 7
54939: PUSH
54940: LD_EXP 63
54944: PUSH
54945: LD_VAR 0 1
54949: ARRAY
54950: PPUSH
54951: LD_INT 25
54953: PUSH
54954: LD_INT 3
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PPUSH
54961: CALL_OW 72
54965: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
54966: LD_ADDR_VAR 0 8
54970: PUSH
54971: LD_EXP 63
54975: PUSH
54976: LD_VAR 0 1
54980: ARRAY
54981: PPUSH
54982: LD_INT 25
54984: PUSH
54985: LD_INT 4
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 24
54994: PUSH
54995: LD_INT 251
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PPUSH
55006: CALL_OW 72
55010: ST_TO_ADDR
// if mc_scan [ base ] then
55011: LD_EXP 86
55015: PUSH
55016: LD_VAR 0 1
55020: ARRAY
55021: IFFALSE 55482
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
55023: LD_ADDR_EXP 105
55027: PUSH
55028: LD_EXP 105
55032: PPUSH
55033: LD_VAR 0 1
55037: PPUSH
55038: LD_INT 4
55040: PPUSH
55041: CALL_OW 1
55045: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
55046: LD_ADDR_VAR 0 12
55050: PUSH
55051: LD_EXP 63
55055: PUSH
55056: LD_VAR 0 1
55060: ARRAY
55061: PPUSH
55062: LD_INT 2
55064: PUSH
55065: LD_INT 30
55067: PUSH
55068: LD_INT 4
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 30
55077: PUSH
55078: LD_INT 5
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: LIST
55089: PPUSH
55090: CALL_OW 72
55094: ST_TO_ADDR
// if not b then
55095: LD_VAR 0 12
55099: NOT
55100: IFFALSE 55104
// exit ;
55102: GO 58170
// p := [ ] ;
55104: LD_ADDR_VAR 0 11
55108: PUSH
55109: EMPTY
55110: ST_TO_ADDR
// if sci >= 2 then
55111: LD_VAR 0 8
55115: PUSH
55116: LD_INT 2
55118: GREATEREQUAL
55119: IFFALSE 55150
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
55121: LD_ADDR_VAR 0 8
55125: PUSH
55126: LD_VAR 0 8
55130: PUSH
55131: LD_INT 1
55133: ARRAY
55134: PUSH
55135: LD_VAR 0 8
55139: PUSH
55140: LD_INT 2
55142: ARRAY
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: ST_TO_ADDR
55148: GO 55211
// if sci = 1 then
55150: LD_VAR 0 8
55154: PUSH
55155: LD_INT 1
55157: EQUAL
55158: IFFALSE 55179
// sci := [ sci [ 1 ] ] else
55160: LD_ADDR_VAR 0 8
55164: PUSH
55165: LD_VAR 0 8
55169: PUSH
55170: LD_INT 1
55172: ARRAY
55173: PUSH
55174: EMPTY
55175: LIST
55176: ST_TO_ADDR
55177: GO 55211
// if sci = 0 then
55179: LD_VAR 0 8
55183: PUSH
55184: LD_INT 0
55186: EQUAL
55187: IFFALSE 55211
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
55189: LD_ADDR_VAR 0 11
55193: PUSH
55194: LD_VAR 0 4
55198: PPUSH
55199: LD_INT 4
55201: PPUSH
55202: CALL 47969 0 2
55206: PUSH
55207: LD_INT 1
55209: ARRAY
55210: ST_TO_ADDR
// if eng > 4 then
55211: LD_VAR 0 6
55215: PUSH
55216: LD_INT 4
55218: GREATER
55219: IFFALSE 55265
// for i = eng downto 4 do
55221: LD_ADDR_VAR 0 3
55225: PUSH
55226: DOUBLE
55227: LD_VAR 0 6
55231: INC
55232: ST_TO_ADDR
55233: LD_INT 4
55235: PUSH
55236: FOR_DOWNTO
55237: IFFALSE 55263
// eng := eng diff eng [ i ] ;
55239: LD_ADDR_VAR 0 6
55243: PUSH
55244: LD_VAR 0 6
55248: PUSH
55249: LD_VAR 0 6
55253: PUSH
55254: LD_VAR 0 3
55258: ARRAY
55259: DIFF
55260: ST_TO_ADDR
55261: GO 55236
55263: POP
55264: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
55265: LD_ADDR_VAR 0 4
55269: PUSH
55270: LD_VAR 0 4
55274: PUSH
55275: LD_VAR 0 5
55279: PUSH
55280: LD_VAR 0 6
55284: UNION
55285: PUSH
55286: LD_VAR 0 7
55290: UNION
55291: PUSH
55292: LD_VAR 0 8
55296: UNION
55297: DIFF
55298: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
55299: LD_ADDR_VAR 0 13
55303: PUSH
55304: LD_EXP 63
55308: PUSH
55309: LD_VAR 0 1
55313: ARRAY
55314: PPUSH
55315: LD_INT 2
55317: PUSH
55318: LD_INT 30
55320: PUSH
55321: LD_INT 32
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 30
55330: PUSH
55331: LD_INT 31
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: LIST
55342: PPUSH
55343: CALL_OW 72
55347: PUSH
55348: LD_EXP 63
55352: PUSH
55353: LD_VAR 0 1
55357: ARRAY
55358: PPUSH
55359: LD_INT 2
55361: PUSH
55362: LD_INT 30
55364: PUSH
55365: LD_INT 4
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 30
55374: PUSH
55375: LD_INT 5
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: LIST
55386: PPUSH
55387: CALL_OW 72
55391: PUSH
55392: LD_INT 6
55394: MUL
55395: PLUS
55396: ST_TO_ADDR
// if bcount < tmp then
55397: LD_VAR 0 13
55401: PUSH
55402: LD_VAR 0 4
55406: LESS
55407: IFFALSE 55453
// for i = tmp downto bcount do
55409: LD_ADDR_VAR 0 3
55413: PUSH
55414: DOUBLE
55415: LD_VAR 0 4
55419: INC
55420: ST_TO_ADDR
55421: LD_VAR 0 13
55425: PUSH
55426: FOR_DOWNTO
55427: IFFALSE 55451
// tmp := Delete ( tmp , tmp ) ;
55429: LD_ADDR_VAR 0 4
55433: PUSH
55434: LD_VAR 0 4
55438: PPUSH
55439: LD_VAR 0 4
55443: PPUSH
55444: CALL_OW 3
55448: ST_TO_ADDR
55449: GO 55426
55451: POP
55452: POP
// result := [ tmp , 0 , 0 , p ] ;
55453: LD_ADDR_VAR 0 2
55457: PUSH
55458: LD_VAR 0 4
55462: PUSH
55463: LD_INT 0
55465: PUSH
55466: LD_INT 0
55468: PUSH
55469: LD_VAR 0 11
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: ST_TO_ADDR
// exit ;
55480: GO 58170
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
55482: LD_EXP 63
55486: PUSH
55487: LD_VAR 0 1
55491: ARRAY
55492: PPUSH
55493: LD_INT 2
55495: PUSH
55496: LD_INT 30
55498: PUSH
55499: LD_INT 6
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 30
55508: PUSH
55509: LD_INT 7
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 30
55518: PUSH
55519: LD_INT 8
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: PPUSH
55532: CALL_OW 72
55536: NOT
55537: PUSH
55538: LD_EXP 63
55542: PUSH
55543: LD_VAR 0 1
55547: ARRAY
55548: PPUSH
55549: LD_INT 30
55551: PUSH
55552: LD_INT 3
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PPUSH
55559: CALL_OW 72
55563: NOT
55564: AND
55565: IFFALSE 55637
// begin if eng = tmp then
55567: LD_VAR 0 6
55571: PUSH
55572: LD_VAR 0 4
55576: EQUAL
55577: IFFALSE 55581
// exit ;
55579: GO 58170
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
55581: LD_ADDR_EXP 105
55585: PUSH
55586: LD_EXP 105
55590: PPUSH
55591: LD_VAR 0 1
55595: PPUSH
55596: LD_INT 1
55598: PPUSH
55599: CALL_OW 1
55603: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
55604: LD_ADDR_VAR 0 2
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: LD_VAR 0 4
55616: PUSH
55617: LD_VAR 0 6
55621: DIFF
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: ST_TO_ADDR
// exit ;
55635: GO 58170
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
55637: LD_EXP 90
55641: PUSH
55642: LD_EXP 89
55646: PUSH
55647: LD_VAR 0 1
55651: ARRAY
55652: ARRAY
55653: PUSH
55654: LD_EXP 63
55658: PUSH
55659: LD_VAR 0 1
55663: ARRAY
55664: PPUSH
55665: LD_INT 2
55667: PUSH
55668: LD_INT 30
55670: PUSH
55671: LD_INT 6
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 30
55680: PUSH
55681: LD_INT 7
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 30
55690: PUSH
55691: LD_INT 8
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: PPUSH
55704: CALL_OW 72
55708: AND
55709: PUSH
55710: LD_EXP 63
55714: PUSH
55715: LD_VAR 0 1
55719: ARRAY
55720: PPUSH
55721: LD_INT 30
55723: PUSH
55724: LD_INT 3
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PPUSH
55731: CALL_OW 72
55735: NOT
55736: AND
55737: IFFALSE 55951
// begin if sci >= 6 then
55739: LD_VAR 0 8
55743: PUSH
55744: LD_INT 6
55746: GREATEREQUAL
55747: IFFALSE 55751
// exit ;
55749: GO 58170
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
55751: LD_ADDR_EXP 105
55755: PUSH
55756: LD_EXP 105
55760: PPUSH
55761: LD_VAR 0 1
55765: PPUSH
55766: LD_INT 2
55768: PPUSH
55769: CALL_OW 1
55773: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
55774: LD_ADDR_VAR 0 9
55778: PUSH
55779: LD_VAR 0 4
55783: PUSH
55784: LD_VAR 0 8
55788: DIFF
55789: PPUSH
55790: LD_INT 4
55792: PPUSH
55793: CALL 47969 0 2
55797: ST_TO_ADDR
// p := [ ] ;
55798: LD_ADDR_VAR 0 11
55802: PUSH
55803: EMPTY
55804: ST_TO_ADDR
// if sci < 6 and sort > 6 then
55805: LD_VAR 0 8
55809: PUSH
55810: LD_INT 6
55812: LESS
55813: PUSH
55814: LD_VAR 0 9
55818: PUSH
55819: LD_INT 6
55821: GREATER
55822: AND
55823: IFFALSE 55904
// begin for i = 1 to 6 - sci do
55825: LD_ADDR_VAR 0 3
55829: PUSH
55830: DOUBLE
55831: LD_INT 1
55833: DEC
55834: ST_TO_ADDR
55835: LD_INT 6
55837: PUSH
55838: LD_VAR 0 8
55842: MINUS
55843: PUSH
55844: FOR_TO
55845: IFFALSE 55900
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
55847: LD_ADDR_VAR 0 11
55851: PUSH
55852: LD_VAR 0 11
55856: PPUSH
55857: LD_VAR 0 11
55861: PUSH
55862: LD_INT 1
55864: PLUS
55865: PPUSH
55866: LD_VAR 0 9
55870: PUSH
55871: LD_INT 1
55873: ARRAY
55874: PPUSH
55875: CALL_OW 2
55879: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
55880: LD_ADDR_VAR 0 9
55884: PUSH
55885: LD_VAR 0 9
55889: PPUSH
55890: LD_INT 1
55892: PPUSH
55893: CALL_OW 3
55897: ST_TO_ADDR
// end ;
55898: GO 55844
55900: POP
55901: POP
// end else
55902: GO 55924
// if sort then
55904: LD_VAR 0 9
55908: IFFALSE 55924
// p := sort [ 1 ] ;
55910: LD_ADDR_VAR 0 11
55914: PUSH
55915: LD_VAR 0 9
55919: PUSH
55920: LD_INT 1
55922: ARRAY
55923: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
55924: LD_ADDR_VAR 0 2
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: LD_INT 0
55937: PUSH
55938: LD_VAR 0 11
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: ST_TO_ADDR
// exit ;
55949: GO 58170
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
55951: LD_EXP 90
55955: PUSH
55956: LD_EXP 89
55960: PUSH
55961: LD_VAR 0 1
55965: ARRAY
55966: ARRAY
55967: PUSH
55968: LD_EXP 63
55972: PUSH
55973: LD_VAR 0 1
55977: ARRAY
55978: PPUSH
55979: LD_INT 2
55981: PUSH
55982: LD_INT 30
55984: PUSH
55985: LD_INT 6
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 30
55994: PUSH
55995: LD_INT 7
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 30
56004: PUSH
56005: LD_INT 8
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: PPUSH
56018: CALL_OW 72
56022: AND
56023: PUSH
56024: LD_EXP 63
56028: PUSH
56029: LD_VAR 0 1
56033: ARRAY
56034: PPUSH
56035: LD_INT 30
56037: PUSH
56038: LD_INT 3
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PPUSH
56045: CALL_OW 72
56049: AND
56050: IFFALSE 56784
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
56052: LD_ADDR_EXP 105
56056: PUSH
56057: LD_EXP 105
56061: PPUSH
56062: LD_VAR 0 1
56066: PPUSH
56067: LD_INT 3
56069: PPUSH
56070: CALL_OW 1
56074: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
56075: LD_ADDR_VAR 0 2
56079: PUSH
56080: LD_INT 0
56082: PUSH
56083: LD_INT 0
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: LD_INT 0
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: ST_TO_ADDR
// if not eng then
56098: LD_VAR 0 6
56102: NOT
56103: IFFALSE 56166
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
56105: LD_ADDR_VAR 0 11
56109: PUSH
56110: LD_VAR 0 4
56114: PPUSH
56115: LD_INT 2
56117: PPUSH
56118: CALL 47969 0 2
56122: PUSH
56123: LD_INT 1
56125: ARRAY
56126: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
56127: LD_ADDR_VAR 0 2
56131: PUSH
56132: LD_VAR 0 2
56136: PPUSH
56137: LD_INT 2
56139: PPUSH
56140: LD_VAR 0 11
56144: PPUSH
56145: CALL_OW 1
56149: ST_TO_ADDR
// tmp := tmp diff p ;
56150: LD_ADDR_VAR 0 4
56154: PUSH
56155: LD_VAR 0 4
56159: PUSH
56160: LD_VAR 0 11
56164: DIFF
56165: ST_TO_ADDR
// end ; if tmp and sci < 6 then
56166: LD_VAR 0 4
56170: PUSH
56171: LD_VAR 0 8
56175: PUSH
56176: LD_INT 6
56178: LESS
56179: AND
56180: IFFALSE 56368
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
56182: LD_ADDR_VAR 0 9
56186: PUSH
56187: LD_VAR 0 4
56191: PUSH
56192: LD_VAR 0 8
56196: PUSH
56197: LD_VAR 0 7
56201: UNION
56202: DIFF
56203: PPUSH
56204: LD_INT 4
56206: PPUSH
56207: CALL 47969 0 2
56211: ST_TO_ADDR
// p := [ ] ;
56212: LD_ADDR_VAR 0 11
56216: PUSH
56217: EMPTY
56218: ST_TO_ADDR
// if sort then
56219: LD_VAR 0 9
56223: IFFALSE 56339
// for i = 1 to 6 - sci do
56225: LD_ADDR_VAR 0 3
56229: PUSH
56230: DOUBLE
56231: LD_INT 1
56233: DEC
56234: ST_TO_ADDR
56235: LD_INT 6
56237: PUSH
56238: LD_VAR 0 8
56242: MINUS
56243: PUSH
56244: FOR_TO
56245: IFFALSE 56337
// begin if i = sort then
56247: LD_VAR 0 3
56251: PUSH
56252: LD_VAR 0 9
56256: EQUAL
56257: IFFALSE 56261
// break ;
56259: GO 56337
// if GetClass ( i ) = 4 then
56261: LD_VAR 0 3
56265: PPUSH
56266: CALL_OW 257
56270: PUSH
56271: LD_INT 4
56273: EQUAL
56274: IFFALSE 56278
// continue ;
56276: GO 56244
// p := Insert ( p , p + 1 , sort [ i ] ) ;
56278: LD_ADDR_VAR 0 11
56282: PUSH
56283: LD_VAR 0 11
56287: PPUSH
56288: LD_VAR 0 11
56292: PUSH
56293: LD_INT 1
56295: PLUS
56296: PPUSH
56297: LD_VAR 0 9
56301: PUSH
56302: LD_VAR 0 3
56306: ARRAY
56307: PPUSH
56308: CALL_OW 2
56312: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
56313: LD_ADDR_VAR 0 4
56317: PUSH
56318: LD_VAR 0 4
56322: PUSH
56323: LD_VAR 0 9
56327: PUSH
56328: LD_VAR 0 3
56332: ARRAY
56333: DIFF
56334: ST_TO_ADDR
// end ;
56335: GO 56244
56337: POP
56338: POP
// if p then
56339: LD_VAR 0 11
56343: IFFALSE 56368
// result := Replace ( result , 4 , p ) ;
56345: LD_ADDR_VAR 0 2
56349: PUSH
56350: LD_VAR 0 2
56354: PPUSH
56355: LD_INT 4
56357: PPUSH
56358: LD_VAR 0 11
56362: PPUSH
56363: CALL_OW 1
56367: ST_TO_ADDR
// end ; if tmp and mech < 6 then
56368: LD_VAR 0 4
56372: PUSH
56373: LD_VAR 0 7
56377: PUSH
56378: LD_INT 6
56380: LESS
56381: AND
56382: IFFALSE 56570
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
56384: LD_ADDR_VAR 0 9
56388: PUSH
56389: LD_VAR 0 4
56393: PUSH
56394: LD_VAR 0 8
56398: PUSH
56399: LD_VAR 0 7
56403: UNION
56404: DIFF
56405: PPUSH
56406: LD_INT 3
56408: PPUSH
56409: CALL 47969 0 2
56413: ST_TO_ADDR
// p := [ ] ;
56414: LD_ADDR_VAR 0 11
56418: PUSH
56419: EMPTY
56420: ST_TO_ADDR
// if sort then
56421: LD_VAR 0 9
56425: IFFALSE 56541
// for i = 1 to 6 - mech do
56427: LD_ADDR_VAR 0 3
56431: PUSH
56432: DOUBLE
56433: LD_INT 1
56435: DEC
56436: ST_TO_ADDR
56437: LD_INT 6
56439: PUSH
56440: LD_VAR 0 7
56444: MINUS
56445: PUSH
56446: FOR_TO
56447: IFFALSE 56539
// begin if i = sort then
56449: LD_VAR 0 3
56453: PUSH
56454: LD_VAR 0 9
56458: EQUAL
56459: IFFALSE 56463
// break ;
56461: GO 56539
// if GetClass ( i ) = 3 then
56463: LD_VAR 0 3
56467: PPUSH
56468: CALL_OW 257
56472: PUSH
56473: LD_INT 3
56475: EQUAL
56476: IFFALSE 56480
// continue ;
56478: GO 56446
// p := Insert ( p , p + 1 , sort [ i ] ) ;
56480: LD_ADDR_VAR 0 11
56484: PUSH
56485: LD_VAR 0 11
56489: PPUSH
56490: LD_VAR 0 11
56494: PUSH
56495: LD_INT 1
56497: PLUS
56498: PPUSH
56499: LD_VAR 0 9
56503: PUSH
56504: LD_VAR 0 3
56508: ARRAY
56509: PPUSH
56510: CALL_OW 2
56514: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
56515: LD_ADDR_VAR 0 4
56519: PUSH
56520: LD_VAR 0 4
56524: PUSH
56525: LD_VAR 0 9
56529: PUSH
56530: LD_VAR 0 3
56534: ARRAY
56535: DIFF
56536: ST_TO_ADDR
// end ;
56537: GO 56446
56539: POP
56540: POP
// if p then
56541: LD_VAR 0 11
56545: IFFALSE 56570
// result := Replace ( result , 3 , p ) ;
56547: LD_ADDR_VAR 0 2
56551: PUSH
56552: LD_VAR 0 2
56556: PPUSH
56557: LD_INT 3
56559: PPUSH
56560: LD_VAR 0 11
56564: PPUSH
56565: CALL_OW 1
56569: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
56570: LD_VAR 0 4
56574: PUSH
56575: LD_INT 6
56577: GREATER
56578: PUSH
56579: LD_VAR 0 6
56583: PUSH
56584: LD_INT 6
56586: LESS
56587: AND
56588: IFFALSE 56782
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
56590: LD_ADDR_VAR 0 9
56594: PUSH
56595: LD_VAR 0 4
56599: PUSH
56600: LD_VAR 0 8
56604: PUSH
56605: LD_VAR 0 7
56609: UNION
56610: PUSH
56611: LD_VAR 0 6
56615: UNION
56616: DIFF
56617: PPUSH
56618: LD_INT 2
56620: PPUSH
56621: CALL 47969 0 2
56625: ST_TO_ADDR
// p := [ ] ;
56626: LD_ADDR_VAR 0 11
56630: PUSH
56631: EMPTY
56632: ST_TO_ADDR
// if sort then
56633: LD_VAR 0 9
56637: IFFALSE 56753
// for i = 1 to 6 - eng do
56639: LD_ADDR_VAR 0 3
56643: PUSH
56644: DOUBLE
56645: LD_INT 1
56647: DEC
56648: ST_TO_ADDR
56649: LD_INT 6
56651: PUSH
56652: LD_VAR 0 6
56656: MINUS
56657: PUSH
56658: FOR_TO
56659: IFFALSE 56751
// begin if i = sort then
56661: LD_VAR 0 3
56665: PUSH
56666: LD_VAR 0 9
56670: EQUAL
56671: IFFALSE 56675
// break ;
56673: GO 56751
// if GetClass ( i ) = 2 then
56675: LD_VAR 0 3
56679: PPUSH
56680: CALL_OW 257
56684: PUSH
56685: LD_INT 2
56687: EQUAL
56688: IFFALSE 56692
// continue ;
56690: GO 56658
// p := Insert ( p , p + 1 , sort [ i ] ) ;
56692: LD_ADDR_VAR 0 11
56696: PUSH
56697: LD_VAR 0 11
56701: PPUSH
56702: LD_VAR 0 11
56706: PUSH
56707: LD_INT 1
56709: PLUS
56710: PPUSH
56711: LD_VAR 0 9
56715: PUSH
56716: LD_VAR 0 3
56720: ARRAY
56721: PPUSH
56722: CALL_OW 2
56726: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
56727: LD_ADDR_VAR 0 4
56731: PUSH
56732: LD_VAR 0 4
56736: PUSH
56737: LD_VAR 0 9
56741: PUSH
56742: LD_VAR 0 3
56746: ARRAY
56747: DIFF
56748: ST_TO_ADDR
// end ;
56749: GO 56658
56751: POP
56752: POP
// if p then
56753: LD_VAR 0 11
56757: IFFALSE 56782
// result := Replace ( result , 2 , p ) ;
56759: LD_ADDR_VAR 0 2
56763: PUSH
56764: LD_VAR 0 2
56768: PPUSH
56769: LD_INT 2
56771: PPUSH
56772: LD_VAR 0 11
56776: PPUSH
56777: CALL_OW 1
56781: ST_TO_ADDR
// end ; exit ;
56782: GO 58170
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
56784: LD_EXP 90
56788: PUSH
56789: LD_EXP 89
56793: PUSH
56794: LD_VAR 0 1
56798: ARRAY
56799: ARRAY
56800: NOT
56801: PUSH
56802: LD_EXP 63
56806: PUSH
56807: LD_VAR 0 1
56811: ARRAY
56812: PPUSH
56813: LD_INT 30
56815: PUSH
56816: LD_INT 3
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PPUSH
56823: CALL_OW 72
56827: AND
56828: PUSH
56829: LD_EXP 68
56833: PUSH
56834: LD_VAR 0 1
56838: ARRAY
56839: AND
56840: IFFALSE 57448
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
56842: LD_ADDR_EXP 105
56846: PUSH
56847: LD_EXP 105
56851: PPUSH
56852: LD_VAR 0 1
56856: PPUSH
56857: LD_INT 5
56859: PPUSH
56860: CALL_OW 1
56864: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
56865: LD_ADDR_VAR 0 2
56869: PUSH
56870: LD_INT 0
56872: PUSH
56873: LD_INT 0
56875: PUSH
56876: LD_INT 0
56878: PUSH
56879: LD_INT 0
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: ST_TO_ADDR
// if sci > 1 then
56888: LD_VAR 0 8
56892: PUSH
56893: LD_INT 1
56895: GREATER
56896: IFFALSE 56924
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
56898: LD_ADDR_VAR 0 4
56902: PUSH
56903: LD_VAR 0 4
56907: PUSH
56908: LD_VAR 0 8
56912: PUSH
56913: LD_VAR 0 8
56917: PUSH
56918: LD_INT 1
56920: ARRAY
56921: DIFF
56922: DIFF
56923: ST_TO_ADDR
// if tmp and not sci then
56924: LD_VAR 0 4
56928: PUSH
56929: LD_VAR 0 8
56933: NOT
56934: AND
56935: IFFALSE 57004
// begin sort := SortBySkill ( tmp , 4 ) ;
56937: LD_ADDR_VAR 0 9
56941: PUSH
56942: LD_VAR 0 4
56946: PPUSH
56947: LD_INT 4
56949: PPUSH
56950: CALL 47969 0 2
56954: ST_TO_ADDR
// if sort then
56955: LD_VAR 0 9
56959: IFFALSE 56975
// p := sort [ 1 ] ;
56961: LD_ADDR_VAR 0 11
56965: PUSH
56966: LD_VAR 0 9
56970: PUSH
56971: LD_INT 1
56973: ARRAY
56974: ST_TO_ADDR
// if p then
56975: LD_VAR 0 11
56979: IFFALSE 57004
// result := Replace ( result , 4 , p ) ;
56981: LD_ADDR_VAR 0 2
56985: PUSH
56986: LD_VAR 0 2
56990: PPUSH
56991: LD_INT 4
56993: PPUSH
56994: LD_VAR 0 11
56998: PPUSH
56999: CALL_OW 1
57003: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
57004: LD_ADDR_VAR 0 4
57008: PUSH
57009: LD_VAR 0 4
57013: PUSH
57014: LD_VAR 0 7
57018: DIFF
57019: ST_TO_ADDR
// if tmp and mech < 6 then
57020: LD_VAR 0 4
57024: PUSH
57025: LD_VAR 0 7
57029: PUSH
57030: LD_INT 6
57032: LESS
57033: AND
57034: IFFALSE 57222
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
57036: LD_ADDR_VAR 0 9
57040: PUSH
57041: LD_VAR 0 4
57045: PUSH
57046: LD_VAR 0 8
57050: PUSH
57051: LD_VAR 0 7
57055: UNION
57056: DIFF
57057: PPUSH
57058: LD_INT 3
57060: PPUSH
57061: CALL 47969 0 2
57065: ST_TO_ADDR
// p := [ ] ;
57066: LD_ADDR_VAR 0 11
57070: PUSH
57071: EMPTY
57072: ST_TO_ADDR
// if sort then
57073: LD_VAR 0 9
57077: IFFALSE 57193
// for i = 1 to 6 - mech do
57079: LD_ADDR_VAR 0 3
57083: PUSH
57084: DOUBLE
57085: LD_INT 1
57087: DEC
57088: ST_TO_ADDR
57089: LD_INT 6
57091: PUSH
57092: LD_VAR 0 7
57096: MINUS
57097: PUSH
57098: FOR_TO
57099: IFFALSE 57191
// begin if i = sort then
57101: LD_VAR 0 3
57105: PUSH
57106: LD_VAR 0 9
57110: EQUAL
57111: IFFALSE 57115
// break ;
57113: GO 57191
// if GetClass ( i ) = 3 then
57115: LD_VAR 0 3
57119: PPUSH
57120: CALL_OW 257
57124: PUSH
57125: LD_INT 3
57127: EQUAL
57128: IFFALSE 57132
// continue ;
57130: GO 57098
// p := Insert ( p , p + 1 , sort [ i ] ) ;
57132: LD_ADDR_VAR 0 11
57136: PUSH
57137: LD_VAR 0 11
57141: PPUSH
57142: LD_VAR 0 11
57146: PUSH
57147: LD_INT 1
57149: PLUS
57150: PPUSH
57151: LD_VAR 0 9
57155: PUSH
57156: LD_VAR 0 3
57160: ARRAY
57161: PPUSH
57162: CALL_OW 2
57166: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
57167: LD_ADDR_VAR 0 4
57171: PUSH
57172: LD_VAR 0 4
57176: PUSH
57177: LD_VAR 0 9
57181: PUSH
57182: LD_VAR 0 3
57186: ARRAY
57187: DIFF
57188: ST_TO_ADDR
// end ;
57189: GO 57098
57191: POP
57192: POP
// if p then
57193: LD_VAR 0 11
57197: IFFALSE 57222
// result := Replace ( result , 3 , p ) ;
57199: LD_ADDR_VAR 0 2
57203: PUSH
57204: LD_VAR 0 2
57208: PPUSH
57209: LD_INT 3
57211: PPUSH
57212: LD_VAR 0 11
57216: PPUSH
57217: CALL_OW 1
57221: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
57222: LD_ADDR_VAR 0 4
57226: PUSH
57227: LD_VAR 0 4
57231: PUSH
57232: LD_VAR 0 6
57236: DIFF
57237: ST_TO_ADDR
// if tmp and eng < 6 then
57238: LD_VAR 0 4
57242: PUSH
57243: LD_VAR 0 6
57247: PUSH
57248: LD_INT 6
57250: LESS
57251: AND
57252: IFFALSE 57446
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
57254: LD_ADDR_VAR 0 9
57258: PUSH
57259: LD_VAR 0 4
57263: PUSH
57264: LD_VAR 0 8
57268: PUSH
57269: LD_VAR 0 7
57273: UNION
57274: PUSH
57275: LD_VAR 0 6
57279: UNION
57280: DIFF
57281: PPUSH
57282: LD_INT 2
57284: PPUSH
57285: CALL 47969 0 2
57289: ST_TO_ADDR
// p := [ ] ;
57290: LD_ADDR_VAR 0 11
57294: PUSH
57295: EMPTY
57296: ST_TO_ADDR
// if sort then
57297: LD_VAR 0 9
57301: IFFALSE 57417
// for i = 1 to 6 - eng do
57303: LD_ADDR_VAR 0 3
57307: PUSH
57308: DOUBLE
57309: LD_INT 1
57311: DEC
57312: ST_TO_ADDR
57313: LD_INT 6
57315: PUSH
57316: LD_VAR 0 6
57320: MINUS
57321: PUSH
57322: FOR_TO
57323: IFFALSE 57415
// begin if i = sort then
57325: LD_VAR 0 3
57329: PUSH
57330: LD_VAR 0 9
57334: EQUAL
57335: IFFALSE 57339
// break ;
57337: GO 57415
// if GetClass ( i ) = 2 then
57339: LD_VAR 0 3
57343: PPUSH
57344: CALL_OW 257
57348: PUSH
57349: LD_INT 2
57351: EQUAL
57352: IFFALSE 57356
// continue ;
57354: GO 57322
// p := Insert ( p , p + 1 , sort [ i ] ) ;
57356: LD_ADDR_VAR 0 11
57360: PUSH
57361: LD_VAR 0 11
57365: PPUSH
57366: LD_VAR 0 11
57370: PUSH
57371: LD_INT 1
57373: PLUS
57374: PPUSH
57375: LD_VAR 0 9
57379: PUSH
57380: LD_VAR 0 3
57384: ARRAY
57385: PPUSH
57386: CALL_OW 2
57390: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
57391: LD_ADDR_VAR 0 4
57395: PUSH
57396: LD_VAR 0 4
57400: PUSH
57401: LD_VAR 0 9
57405: PUSH
57406: LD_VAR 0 3
57410: ARRAY
57411: DIFF
57412: ST_TO_ADDR
// end ;
57413: GO 57322
57415: POP
57416: POP
// if p then
57417: LD_VAR 0 11
57421: IFFALSE 57446
// result := Replace ( result , 2 , p ) ;
57423: LD_ADDR_VAR 0 2
57427: PUSH
57428: LD_VAR 0 2
57432: PPUSH
57433: LD_INT 2
57435: PPUSH
57436: LD_VAR 0 11
57440: PPUSH
57441: CALL_OW 1
57445: ST_TO_ADDR
// end ; exit ;
57446: GO 58170
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
57448: LD_EXP 90
57452: PUSH
57453: LD_EXP 89
57457: PUSH
57458: LD_VAR 0 1
57462: ARRAY
57463: ARRAY
57464: NOT
57465: PUSH
57466: LD_EXP 63
57470: PUSH
57471: LD_VAR 0 1
57475: ARRAY
57476: PPUSH
57477: LD_INT 30
57479: PUSH
57480: LD_INT 3
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PPUSH
57487: CALL_OW 72
57491: AND
57492: PUSH
57493: LD_EXP 68
57497: PUSH
57498: LD_VAR 0 1
57502: ARRAY
57503: NOT
57504: AND
57505: IFFALSE 58170
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
57507: LD_ADDR_EXP 105
57511: PUSH
57512: LD_EXP 105
57516: PPUSH
57517: LD_VAR 0 1
57521: PPUSH
57522: LD_INT 6
57524: PPUSH
57525: CALL_OW 1
57529: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
57530: LD_ADDR_VAR 0 2
57534: PUSH
57535: LD_INT 0
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: LD_INT 0
57543: PUSH
57544: LD_INT 0
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: ST_TO_ADDR
// if sci >= 1 then
57553: LD_VAR 0 8
57557: PUSH
57558: LD_INT 1
57560: GREATEREQUAL
57561: IFFALSE 57583
// tmp := tmp diff sci [ 1 ] ;
57563: LD_ADDR_VAR 0 4
57567: PUSH
57568: LD_VAR 0 4
57572: PUSH
57573: LD_VAR 0 8
57577: PUSH
57578: LD_INT 1
57580: ARRAY
57581: DIFF
57582: ST_TO_ADDR
// if tmp and not sci then
57583: LD_VAR 0 4
57587: PUSH
57588: LD_VAR 0 8
57592: NOT
57593: AND
57594: IFFALSE 57663
// begin sort := SortBySkill ( tmp , 4 ) ;
57596: LD_ADDR_VAR 0 9
57600: PUSH
57601: LD_VAR 0 4
57605: PPUSH
57606: LD_INT 4
57608: PPUSH
57609: CALL 47969 0 2
57613: ST_TO_ADDR
// if sort then
57614: LD_VAR 0 9
57618: IFFALSE 57634
// p := sort [ 1 ] ;
57620: LD_ADDR_VAR 0 11
57624: PUSH
57625: LD_VAR 0 9
57629: PUSH
57630: LD_INT 1
57632: ARRAY
57633: ST_TO_ADDR
// if p then
57634: LD_VAR 0 11
57638: IFFALSE 57663
// result := Replace ( result , 4 , p ) ;
57640: LD_ADDR_VAR 0 2
57644: PUSH
57645: LD_VAR 0 2
57649: PPUSH
57650: LD_INT 4
57652: PPUSH
57653: LD_VAR 0 11
57657: PPUSH
57658: CALL_OW 1
57662: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
57663: LD_ADDR_VAR 0 4
57667: PUSH
57668: LD_VAR 0 4
57672: PUSH
57673: LD_VAR 0 7
57677: DIFF
57678: ST_TO_ADDR
// if tmp and mech < 6 then
57679: LD_VAR 0 4
57683: PUSH
57684: LD_VAR 0 7
57688: PUSH
57689: LD_INT 6
57691: LESS
57692: AND
57693: IFFALSE 57875
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
57695: LD_ADDR_VAR 0 9
57699: PUSH
57700: LD_VAR 0 4
57704: PUSH
57705: LD_VAR 0 7
57709: DIFF
57710: PPUSH
57711: LD_INT 3
57713: PPUSH
57714: CALL 47969 0 2
57718: ST_TO_ADDR
// p := [ ] ;
57719: LD_ADDR_VAR 0 11
57723: PUSH
57724: EMPTY
57725: ST_TO_ADDR
// if sort then
57726: LD_VAR 0 9
57730: IFFALSE 57846
// for i = 1 to 6 - mech do
57732: LD_ADDR_VAR 0 3
57736: PUSH
57737: DOUBLE
57738: LD_INT 1
57740: DEC
57741: ST_TO_ADDR
57742: LD_INT 6
57744: PUSH
57745: LD_VAR 0 7
57749: MINUS
57750: PUSH
57751: FOR_TO
57752: IFFALSE 57844
// begin if i = sort then
57754: LD_VAR 0 3
57758: PUSH
57759: LD_VAR 0 9
57763: EQUAL
57764: IFFALSE 57768
// break ;
57766: GO 57844
// if GetClass ( i ) = 3 then
57768: LD_VAR 0 3
57772: PPUSH
57773: CALL_OW 257
57777: PUSH
57778: LD_INT 3
57780: EQUAL
57781: IFFALSE 57785
// continue ;
57783: GO 57751
// p := Insert ( p , p + 1 , sort [ i ] ) ;
57785: LD_ADDR_VAR 0 11
57789: PUSH
57790: LD_VAR 0 11
57794: PPUSH
57795: LD_VAR 0 11
57799: PUSH
57800: LD_INT 1
57802: PLUS
57803: PPUSH
57804: LD_VAR 0 9
57808: PUSH
57809: LD_VAR 0 3
57813: ARRAY
57814: PPUSH
57815: CALL_OW 2
57819: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
57820: LD_ADDR_VAR 0 4
57824: PUSH
57825: LD_VAR 0 4
57829: PUSH
57830: LD_VAR 0 9
57834: PUSH
57835: LD_VAR 0 3
57839: ARRAY
57840: DIFF
57841: ST_TO_ADDR
// end ;
57842: GO 57751
57844: POP
57845: POP
// if p then
57846: LD_VAR 0 11
57850: IFFALSE 57875
// result := Replace ( result , 3 , p ) ;
57852: LD_ADDR_VAR 0 2
57856: PUSH
57857: LD_VAR 0 2
57861: PPUSH
57862: LD_INT 3
57864: PPUSH
57865: LD_VAR 0 11
57869: PPUSH
57870: CALL_OW 1
57874: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
57875: LD_ADDR_VAR 0 4
57879: PUSH
57880: LD_VAR 0 4
57884: PUSH
57885: LD_VAR 0 6
57889: DIFF
57890: ST_TO_ADDR
// if tmp and eng < 4 then
57891: LD_VAR 0 4
57895: PUSH
57896: LD_VAR 0 6
57900: PUSH
57901: LD_INT 4
57903: LESS
57904: AND
57905: IFFALSE 58095
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
57907: LD_ADDR_VAR 0 9
57911: PUSH
57912: LD_VAR 0 4
57916: PUSH
57917: LD_VAR 0 7
57921: PUSH
57922: LD_VAR 0 6
57926: UNION
57927: DIFF
57928: PPUSH
57929: LD_INT 2
57931: PPUSH
57932: CALL 47969 0 2
57936: ST_TO_ADDR
// p := [ ] ;
57937: LD_ADDR_VAR 0 11
57941: PUSH
57942: EMPTY
57943: ST_TO_ADDR
// if sort then
57944: LD_VAR 0 9
57948: IFFALSE 58064
// for i = 1 to 4 - eng do
57950: LD_ADDR_VAR 0 3
57954: PUSH
57955: DOUBLE
57956: LD_INT 1
57958: DEC
57959: ST_TO_ADDR
57960: LD_INT 4
57962: PUSH
57963: LD_VAR 0 6
57967: MINUS
57968: PUSH
57969: FOR_TO
57970: IFFALSE 58062
// begin if i = sort then
57972: LD_VAR 0 3
57976: PUSH
57977: LD_VAR 0 9
57981: EQUAL
57982: IFFALSE 57986
// break ;
57984: GO 58062
// if GetClass ( i ) = 2 then
57986: LD_VAR 0 3
57990: PPUSH
57991: CALL_OW 257
57995: PUSH
57996: LD_INT 2
57998: EQUAL
57999: IFFALSE 58003
// continue ;
58001: GO 57969
// p := Insert ( p , p + 1 , sort [ i ] ) ;
58003: LD_ADDR_VAR 0 11
58007: PUSH
58008: LD_VAR 0 11
58012: PPUSH
58013: LD_VAR 0 11
58017: PUSH
58018: LD_INT 1
58020: PLUS
58021: PPUSH
58022: LD_VAR 0 9
58026: PUSH
58027: LD_VAR 0 3
58031: ARRAY
58032: PPUSH
58033: CALL_OW 2
58037: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
58038: LD_ADDR_VAR 0 4
58042: PUSH
58043: LD_VAR 0 4
58047: PUSH
58048: LD_VAR 0 9
58052: PUSH
58053: LD_VAR 0 3
58057: ARRAY
58058: DIFF
58059: ST_TO_ADDR
// end ;
58060: GO 57969
58062: POP
58063: POP
// if p then
58064: LD_VAR 0 11
58068: IFFALSE 58093
// result := Replace ( result , 2 , p ) ;
58070: LD_ADDR_VAR 0 2
58074: PUSH
58075: LD_VAR 0 2
58079: PPUSH
58080: LD_INT 2
58082: PPUSH
58083: LD_VAR 0 11
58087: PPUSH
58088: CALL_OW 1
58092: ST_TO_ADDR
// end else
58093: GO 58139
// for i = eng downto 5 do
58095: LD_ADDR_VAR 0 3
58099: PUSH
58100: DOUBLE
58101: LD_VAR 0 6
58105: INC
58106: ST_TO_ADDR
58107: LD_INT 5
58109: PUSH
58110: FOR_DOWNTO
58111: IFFALSE 58137
// tmp := tmp union eng [ i ] ;
58113: LD_ADDR_VAR 0 4
58117: PUSH
58118: LD_VAR 0 4
58122: PUSH
58123: LD_VAR 0 6
58127: PUSH
58128: LD_VAR 0 3
58132: ARRAY
58133: UNION
58134: ST_TO_ADDR
58135: GO 58110
58137: POP
58138: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
58139: LD_ADDR_VAR 0 2
58143: PUSH
58144: LD_VAR 0 2
58148: PPUSH
58149: LD_INT 1
58151: PPUSH
58152: LD_VAR 0 4
58156: PUSH
58157: LD_VAR 0 5
58161: DIFF
58162: PPUSH
58163: CALL_OW 1
58167: ST_TO_ADDR
// exit ;
58168: GO 58170
// end ; end ;
58170: LD_VAR 0 2
58174: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
58175: LD_INT 0
58177: PPUSH
58178: PPUSH
58179: PPUSH
// if not mc_bases then
58180: LD_EXP 63
58184: NOT
58185: IFFALSE 58189
// exit ;
58187: GO 58295
// for i = 1 to mc_bases do
58189: LD_ADDR_VAR 0 2
58193: PUSH
58194: DOUBLE
58195: LD_INT 1
58197: DEC
58198: ST_TO_ADDR
58199: LD_EXP 63
58203: PUSH
58204: FOR_TO
58205: IFFALSE 58286
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
58207: LD_ADDR_VAR 0 3
58211: PUSH
58212: LD_EXP 63
58216: PUSH
58217: LD_VAR 0 2
58221: ARRAY
58222: PPUSH
58223: LD_INT 21
58225: PUSH
58226: LD_INT 3
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 3
58235: PUSH
58236: LD_INT 24
58238: PUSH
58239: LD_INT 1000
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PPUSH
58254: CALL_OW 72
58258: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
58259: LD_ADDR_EXP 64
58263: PUSH
58264: LD_EXP 64
58268: PPUSH
58269: LD_VAR 0 2
58273: PPUSH
58274: LD_VAR 0 3
58278: PPUSH
58279: CALL_OW 1
58283: ST_TO_ADDR
// end ;
58284: GO 58204
58286: POP
58287: POP
// RaiseSailEvent ( 101 ) ;
58288: LD_INT 101
58290: PPUSH
58291: CALL_OW 427
// end ;
58295: LD_VAR 0 1
58299: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
58300: LD_INT 0
58302: PPUSH
58303: PPUSH
58304: PPUSH
58305: PPUSH
58306: PPUSH
58307: PPUSH
58308: PPUSH
// if not mc_bases then
58309: LD_EXP 63
58313: NOT
58314: IFFALSE 58318
// exit ;
58316: GO 58880
// for i = 1 to mc_bases do
58318: LD_ADDR_VAR 0 2
58322: PUSH
58323: DOUBLE
58324: LD_INT 1
58326: DEC
58327: ST_TO_ADDR
58328: LD_EXP 63
58332: PUSH
58333: FOR_TO
58334: IFFALSE 58871
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
58336: LD_ADDR_VAR 0 5
58340: PUSH
58341: LD_EXP 63
58345: PUSH
58346: LD_VAR 0 2
58350: ARRAY
58351: PUSH
58352: LD_EXP 92
58356: PUSH
58357: LD_VAR 0 2
58361: ARRAY
58362: UNION
58363: PPUSH
58364: LD_INT 21
58366: PUSH
58367: LD_INT 1
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 1
58376: PUSH
58377: LD_INT 3
58379: PUSH
58380: LD_INT 54
58382: PUSH
58383: EMPTY
58384: LIST
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 3
58392: PUSH
58393: LD_INT 24
58395: PUSH
58396: LD_INT 800
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: LIST
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PPUSH
58416: CALL_OW 72
58420: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
58421: LD_ADDR_VAR 0 6
58425: PUSH
58426: LD_EXP 63
58430: PUSH
58431: LD_VAR 0 2
58435: ARRAY
58436: PPUSH
58437: LD_INT 21
58439: PUSH
58440: LD_INT 1
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 1
58449: PUSH
58450: LD_INT 3
58452: PUSH
58453: LD_INT 54
58455: PUSH
58456: EMPTY
58457: LIST
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 3
58465: PUSH
58466: LD_INT 24
58468: PUSH
58469: LD_INT 250
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: LIST
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PPUSH
58489: CALL_OW 72
58493: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
58494: LD_ADDR_VAR 0 7
58498: PUSH
58499: LD_VAR 0 5
58503: PUSH
58504: LD_VAR 0 6
58508: DIFF
58509: ST_TO_ADDR
// if not need_heal_1 then
58510: LD_VAR 0 6
58514: NOT
58515: IFFALSE 58548
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
58517: LD_ADDR_EXP 66
58521: PUSH
58522: LD_EXP 66
58526: PPUSH
58527: LD_VAR 0 2
58531: PUSH
58532: LD_INT 1
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PPUSH
58539: EMPTY
58540: PPUSH
58541: CALL 18420 0 3
58545: ST_TO_ADDR
58546: GO 58618
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
58548: LD_ADDR_EXP 66
58552: PUSH
58553: LD_EXP 66
58557: PPUSH
58558: LD_VAR 0 2
58562: PUSH
58563: LD_INT 1
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PPUSH
58570: LD_EXP 66
58574: PUSH
58575: LD_VAR 0 2
58579: ARRAY
58580: PUSH
58581: LD_INT 1
58583: ARRAY
58584: PPUSH
58585: LD_INT 3
58587: PUSH
58588: LD_INT 24
58590: PUSH
58591: LD_INT 1000
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PPUSH
58602: CALL_OW 72
58606: PUSH
58607: LD_VAR 0 6
58611: UNION
58612: PPUSH
58613: CALL 18420 0 3
58617: ST_TO_ADDR
// if not need_heal_2 then
58618: LD_VAR 0 7
58622: NOT
58623: IFFALSE 58656
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
58625: LD_ADDR_EXP 66
58629: PUSH
58630: LD_EXP 66
58634: PPUSH
58635: LD_VAR 0 2
58639: PUSH
58640: LD_INT 2
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PPUSH
58647: EMPTY
58648: PPUSH
58649: CALL 18420 0 3
58653: ST_TO_ADDR
58654: GO 58688
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
58656: LD_ADDR_EXP 66
58660: PUSH
58661: LD_EXP 66
58665: PPUSH
58666: LD_VAR 0 2
58670: PUSH
58671: LD_INT 2
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PPUSH
58678: LD_VAR 0 7
58682: PPUSH
58683: CALL 18420 0 3
58687: ST_TO_ADDR
// if need_heal_2 then
58688: LD_VAR 0 7
58692: IFFALSE 58853
// for j in need_heal_2 do
58694: LD_ADDR_VAR 0 3
58698: PUSH
58699: LD_VAR 0 7
58703: PUSH
58704: FOR_IN
58705: IFFALSE 58851
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
58707: LD_ADDR_VAR 0 5
58711: PUSH
58712: LD_EXP 63
58716: PUSH
58717: LD_VAR 0 2
58721: ARRAY
58722: PPUSH
58723: LD_INT 2
58725: PUSH
58726: LD_INT 30
58728: PUSH
58729: LD_INT 6
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 30
58738: PUSH
58739: LD_INT 7
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 30
58748: PUSH
58749: LD_INT 8
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 30
58758: PUSH
58759: LD_INT 0
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 30
58768: PUSH
58769: LD_INT 1
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: PPUSH
58784: CALL_OW 72
58788: ST_TO_ADDR
// if tmp then
58789: LD_VAR 0 5
58793: IFFALSE 58849
// begin k := NearestUnitToUnit ( tmp , j ) ;
58795: LD_ADDR_VAR 0 4
58799: PUSH
58800: LD_VAR 0 5
58804: PPUSH
58805: LD_VAR 0 3
58809: PPUSH
58810: CALL_OW 74
58814: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 5 then
58815: LD_VAR 0 3
58819: PPUSH
58820: LD_VAR 0 4
58824: PPUSH
58825: CALL_OW 296
58829: PUSH
58830: LD_INT 5
58832: GREATER
58833: IFFALSE 58849
// ComMoveUnit ( j , k ) ;
58835: LD_VAR 0 3
58839: PPUSH
58840: LD_VAR 0 4
58844: PPUSH
58845: CALL_OW 112
// end ; end ;
58849: GO 58704
58851: POP
58852: POP
// if not need_heal_1 and not need_heal_2 then
58853: LD_VAR 0 6
58857: NOT
58858: PUSH
58859: LD_VAR 0 7
58863: NOT
58864: AND
58865: IFFALSE 58869
// continue ;
58867: GO 58333
// end ;
58869: GO 58333
58871: POP
58872: POP
// RaiseSailEvent ( 102 ) ;
58873: LD_INT 102
58875: PPUSH
58876: CALL_OW 427
// end ;
58880: LD_VAR 0 1
58884: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
58885: LD_INT 0
58887: PPUSH
58888: PPUSH
58889: PPUSH
58890: PPUSH
58891: PPUSH
58892: PPUSH
58893: PPUSH
58894: PPUSH
// if not mc_bases then
58895: LD_EXP 63
58899: NOT
58900: IFFALSE 58904
// exit ;
58902: GO 59739
// for i = 1 to mc_bases do
58904: LD_ADDR_VAR 0 2
58908: PUSH
58909: DOUBLE
58910: LD_INT 1
58912: DEC
58913: ST_TO_ADDR
58914: LD_EXP 63
58918: PUSH
58919: FOR_TO
58920: IFFALSE 59737
// begin if not mc_building_need_repair [ i ] then
58922: LD_EXP 64
58926: PUSH
58927: LD_VAR 0 2
58931: ARRAY
58932: NOT
58933: IFFALSE 59107
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
58935: LD_ADDR_VAR 0 6
58939: PUSH
58940: LD_EXP 82
58944: PUSH
58945: LD_VAR 0 2
58949: ARRAY
58950: PPUSH
58951: LD_INT 3
58953: PUSH
58954: LD_INT 24
58956: PUSH
58957: LD_INT 1000
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 2
58970: PUSH
58971: LD_INT 34
58973: PUSH
58974: LD_INT 13
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 34
58983: PUSH
58984: LD_INT 52
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: LIST
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PPUSH
59000: CALL_OW 72
59004: ST_TO_ADDR
// if cranes then
59005: LD_VAR 0 6
59009: IFFALSE 59071
// for j in cranes do
59011: LD_ADDR_VAR 0 3
59015: PUSH
59016: LD_VAR 0 6
59020: PUSH
59021: FOR_IN
59022: IFFALSE 59069
// if not IsInArea ( j , mc_parking [ i ] ) then
59024: LD_VAR 0 3
59028: PPUSH
59029: LD_EXP 87
59033: PUSH
59034: LD_VAR 0 2
59038: ARRAY
59039: PPUSH
59040: CALL_OW 308
59044: NOT
59045: IFFALSE 59067
// ComMoveToArea ( j , mc_parking [ i ] ) ;
59047: LD_VAR 0 3
59051: PPUSH
59052: LD_EXP 87
59056: PUSH
59057: LD_VAR 0 2
59061: ARRAY
59062: PPUSH
59063: CALL_OW 113
59067: GO 59021
59069: POP
59070: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
59071: LD_ADDR_EXP 65
59075: PUSH
59076: LD_EXP 65
59080: PPUSH
59081: LD_VAR 0 2
59085: PPUSH
59086: EMPTY
59087: PPUSH
59088: CALL_OW 1
59092: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
59093: LD_VAR 0 2
59097: PPUSH
59098: LD_INT 101
59100: PPUSH
59101: CALL 54008 0 2
// continue ;
59105: GO 58919
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
59107: LD_ADDR_EXP 69
59111: PUSH
59112: LD_EXP 69
59116: PPUSH
59117: LD_VAR 0 2
59121: PPUSH
59122: EMPTY
59123: PPUSH
59124: CALL_OW 1
59128: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
59129: LD_VAR 0 2
59133: PPUSH
59134: LD_INT 103
59136: PPUSH
59137: CALL 54008 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) diff ( mc_need_heal [ i ] [ 1 ] union mc_need_heal [ i ] [ 2 ] ) ;
59141: LD_ADDR_VAR 0 5
59145: PUSH
59146: LD_EXP 63
59150: PUSH
59151: LD_VAR 0 2
59155: ARRAY
59156: PUSH
59157: LD_EXP 92
59161: PUSH
59162: LD_VAR 0 2
59166: ARRAY
59167: UNION
59168: PPUSH
59169: LD_INT 2
59171: PUSH
59172: LD_INT 25
59174: PUSH
59175: LD_INT 2
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 25
59184: PUSH
59185: LD_INT 16
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: LIST
59196: PUSH
59197: EMPTY
59198: LIST
59199: PPUSH
59200: CALL_OW 72
59204: PUSH
59205: LD_EXP 66
59209: PUSH
59210: LD_VAR 0 2
59214: ARRAY
59215: PUSH
59216: LD_INT 1
59218: ARRAY
59219: PUSH
59220: LD_EXP 66
59224: PUSH
59225: LD_VAR 0 2
59229: ARRAY
59230: PUSH
59231: LD_INT 2
59233: ARRAY
59234: UNION
59235: DIFF
59236: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
59237: LD_ADDR_VAR 0 6
59241: PUSH
59242: LD_EXP 82
59246: PUSH
59247: LD_VAR 0 2
59251: ARRAY
59252: PPUSH
59253: LD_INT 2
59255: PUSH
59256: LD_INT 34
59258: PUSH
59259: LD_INT 13
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 34
59268: PUSH
59269: LD_INT 52
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: LIST
59280: PPUSH
59281: CALL_OW 72
59285: ST_TO_ADDR
// if cranes then
59286: LD_VAR 0 6
59290: IFFALSE 59426
// begin for j in cranes do
59292: LD_ADDR_VAR 0 3
59296: PUSH
59297: LD_VAR 0 6
59301: PUSH
59302: FOR_IN
59303: IFFALSE 59424
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
59305: LD_VAR 0 3
59309: PPUSH
59310: CALL_OW 256
59314: PUSH
59315: LD_INT 500
59317: GREATEREQUAL
59318: PUSH
59319: LD_VAR 0 3
59323: PPUSH
59324: CALL_OW 314
59328: NOT
59329: AND
59330: IFFALSE 59364
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
59332: LD_VAR 0 3
59336: PPUSH
59337: LD_EXP 64
59341: PUSH
59342: LD_VAR 0 2
59346: ARRAY
59347: PPUSH
59348: LD_VAR 0 3
59352: PPUSH
59353: CALL_OW 74
59357: PPUSH
59358: CALL_OW 130
59362: GO 59422
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
59364: LD_VAR 0 3
59368: PPUSH
59369: CALL_OW 256
59373: PUSH
59374: LD_INT 500
59376: LESS
59377: PUSH
59378: LD_VAR 0 3
59382: PPUSH
59383: LD_EXP 87
59387: PUSH
59388: LD_VAR 0 2
59392: ARRAY
59393: PPUSH
59394: CALL_OW 308
59398: NOT
59399: AND
59400: IFFALSE 59422
// ComMoveToArea ( j , mc_parking [ i ] ) ;
59402: LD_VAR 0 3
59406: PPUSH
59407: LD_EXP 87
59411: PUSH
59412: LD_VAR 0 2
59416: ARRAY
59417: PPUSH
59418: CALL_OW 113
59422: GO 59302
59424: POP
59425: POP
// end ; if tmp > 3 then
59426: LD_VAR 0 5
59430: PUSH
59431: LD_INT 3
59433: GREATER
59434: IFFALSE 59454
// tmp := ShrinkArray ( tmp , 4 ) ;
59436: LD_ADDR_VAR 0 5
59440: PUSH
59441: LD_VAR 0 5
59445: PPUSH
59446: LD_INT 4
59448: PPUSH
59449: CALL 49646 0 2
59453: ST_TO_ADDR
// if not tmp then
59454: LD_VAR 0 5
59458: NOT
59459: IFFALSE 59463
// continue ;
59461: GO 58919
// for j in tmp do
59463: LD_ADDR_VAR 0 3
59467: PUSH
59468: LD_VAR 0 5
59472: PUSH
59473: FOR_IN
59474: IFFALSE 59733
// begin if IsInUnit ( j ) then
59476: LD_VAR 0 3
59480: PPUSH
59481: CALL_OW 310
59485: IFFALSE 59496
// ComExitBuilding ( j ) ;
59487: LD_VAR 0 3
59491: PPUSH
59492: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
59496: LD_VAR 0 3
59500: PUSH
59501: LD_EXP 65
59505: PUSH
59506: LD_VAR 0 2
59510: ARRAY
59511: IN
59512: NOT
59513: IFFALSE 59571
// begin SetTag ( j , 101 ) ;
59515: LD_VAR 0 3
59519: PPUSH
59520: LD_INT 101
59522: PPUSH
59523: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
59527: LD_ADDR_EXP 65
59531: PUSH
59532: LD_EXP 65
59536: PPUSH
59537: LD_VAR 0 2
59541: PUSH
59542: LD_EXP 65
59546: PUSH
59547: LD_VAR 0 2
59551: ARRAY
59552: PUSH
59553: LD_INT 1
59555: PLUS
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PPUSH
59561: LD_VAR 0 3
59565: PPUSH
59566: CALL 18420 0 3
59570: ST_TO_ADDR
// end ; wait ( 1 ) ;
59571: LD_INT 1
59573: PPUSH
59574: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
59578: LD_ADDR_VAR 0 7
59582: PUSH
59583: LD_EXP 64
59587: PUSH
59588: LD_VAR 0 2
59592: ARRAY
59593: ST_TO_ADDR
// if mc_scan [ i ] then
59594: LD_EXP 86
59598: PUSH
59599: LD_VAR 0 2
59603: ARRAY
59604: IFFALSE 59666
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ) ;
59606: LD_ADDR_VAR 0 7
59610: PUSH
59611: LD_EXP 64
59615: PUSH
59616: LD_VAR 0 2
59620: ARRAY
59621: PPUSH
59622: LD_INT 3
59624: PUSH
59625: LD_INT 30
59627: PUSH
59628: LD_INT 32
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 30
59637: PUSH
59638: LD_INT 33
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 30
59647: PUSH
59648: LD_INT 31
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: PPUSH
59661: CALL_OW 72
59665: ST_TO_ADDR
// if not to_repair_tmp then
59666: LD_VAR 0 7
59670: NOT
59671: IFFALSE 59675
// continue ;
59673: GO 59473
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
59675: LD_ADDR_VAR 0 8
59679: PUSH
59680: LD_VAR 0 7
59684: PPUSH
59685: LD_VAR 0 3
59689: PPUSH
59690: CALL_OW 74
59694: ST_TO_ADDR
// if DangerAtRange ( to_repair , 16 ) [ 4 ] < 5 then
59695: LD_VAR 0 8
59699: PPUSH
59700: LD_INT 16
59702: PPUSH
59703: CALL 21013 0 2
59707: PUSH
59708: LD_INT 4
59710: ARRAY
59711: PUSH
59712: LD_INT 5
59714: LESS
59715: IFFALSE 59731
// ComRepairBuilding ( j , to_repair ) ;
59717: LD_VAR 0 3
59721: PPUSH
59722: LD_VAR 0 8
59726: PPUSH
59727: CALL_OW 130
// end ;
59731: GO 59473
59733: POP
59734: POP
// end ;
59735: GO 58919
59737: POP
59738: POP
// end ;
59739: LD_VAR 0 1
59743: RET
// export function MC_Heal ; var i , j , tmp ; begin
59744: LD_INT 0
59746: PPUSH
59747: PPUSH
59748: PPUSH
59749: PPUSH
// if not mc_bases then
59750: LD_EXP 63
59754: NOT
59755: IFFALSE 59759
// exit ;
59757: GO 60161
// for i = 1 to mc_bases do
59759: LD_ADDR_VAR 0 2
59763: PUSH
59764: DOUBLE
59765: LD_INT 1
59767: DEC
59768: ST_TO_ADDR
59769: LD_EXP 63
59773: PUSH
59774: FOR_TO
59775: IFFALSE 60159
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
59777: LD_EXP 66
59781: PUSH
59782: LD_VAR 0 2
59786: ARRAY
59787: PUSH
59788: LD_INT 1
59790: ARRAY
59791: NOT
59792: PUSH
59793: LD_EXP 66
59797: PUSH
59798: LD_VAR 0 2
59802: ARRAY
59803: PUSH
59804: LD_INT 2
59806: ARRAY
59807: NOT
59808: AND
59809: IFFALSE 59847
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
59811: LD_ADDR_EXP 67
59815: PUSH
59816: LD_EXP 67
59820: PPUSH
59821: LD_VAR 0 2
59825: PPUSH
59826: EMPTY
59827: PPUSH
59828: CALL_OW 1
59832: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
59833: LD_VAR 0 2
59837: PPUSH
59838: LD_INT 102
59840: PPUSH
59841: CALL 54008 0 2
// continue ;
59845: GO 59774
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
59847: LD_ADDR_VAR 0 4
59851: PUSH
59852: LD_EXP 63
59856: PUSH
59857: LD_VAR 0 2
59861: ARRAY
59862: PPUSH
59863: LD_INT 25
59865: PUSH
59866: LD_INT 4
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PPUSH
59873: CALL_OW 72
59877: ST_TO_ADDR
// if not tmp then
59878: LD_VAR 0 4
59882: NOT
59883: IFFALSE 59887
// continue ;
59885: GO 59774
// if mc_taming [ i ] then
59887: LD_EXP 94
59891: PUSH
59892: LD_VAR 0 2
59896: ARRAY
59897: IFFALSE 59921
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
59899: LD_ADDR_EXP 94
59903: PUSH
59904: LD_EXP 94
59908: PPUSH
59909: LD_VAR 0 2
59913: PPUSH
59914: EMPTY
59915: PPUSH
59916: CALL_OW 1
59920: ST_TO_ADDR
// for j in tmp do
59921: LD_ADDR_VAR 0 3
59925: PUSH
59926: LD_VAR 0 4
59930: PUSH
59931: FOR_IN
59932: IFFALSE 60155
// begin if IsInUnit ( j ) then
59934: LD_VAR 0 3
59938: PPUSH
59939: CALL_OW 310
59943: IFFALSE 59954
// ComExitBuilding ( j ) ;
59945: LD_VAR 0 3
59949: PPUSH
59950: CALL_OW 122
// if not j in mc_healers [ i ] then
59954: LD_VAR 0 3
59958: PUSH
59959: LD_EXP 67
59963: PUSH
59964: LD_VAR 0 2
59968: ARRAY
59969: IN
59970: NOT
59971: IFFALSE 60017
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
59973: LD_ADDR_EXP 67
59977: PUSH
59978: LD_EXP 67
59982: PPUSH
59983: LD_VAR 0 2
59987: PUSH
59988: LD_EXP 67
59992: PUSH
59993: LD_VAR 0 2
59997: ARRAY
59998: PUSH
59999: LD_INT 1
60001: PLUS
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PPUSH
60007: LD_VAR 0 3
60011: PPUSH
60012: CALL 18420 0 3
60016: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
60017: LD_VAR 0 3
60021: PPUSH
60022: CALL_OW 110
60026: PUSH
60027: LD_INT 102
60029: NONEQUAL
60030: IFFALSE 60044
// SetTag ( j , 102 ) ;
60032: LD_VAR 0 3
60036: PPUSH
60037: LD_INT 102
60039: PPUSH
60040: CALL_OW 109
// Wait ( 3 ) ;
60044: LD_INT 3
60046: PPUSH
60047: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
60051: LD_EXP 66
60055: PUSH
60056: LD_VAR 0 2
60060: ARRAY
60061: PUSH
60062: LD_INT 1
60064: ARRAY
60065: IFFALSE 60097
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
60067: LD_VAR 0 3
60071: PPUSH
60072: LD_EXP 66
60076: PUSH
60077: LD_VAR 0 2
60081: ARRAY
60082: PUSH
60083: LD_INT 1
60085: ARRAY
60086: PUSH
60087: LD_INT 1
60089: ARRAY
60090: PPUSH
60091: CALL_OW 128
60095: GO 60153
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
60097: LD_VAR 0 3
60101: PPUSH
60102: CALL_OW 314
60106: NOT
60107: PUSH
60108: LD_EXP 66
60112: PUSH
60113: LD_VAR 0 2
60117: ARRAY
60118: PUSH
60119: LD_INT 2
60121: ARRAY
60122: AND
60123: IFFALSE 60153
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
60125: LD_VAR 0 3
60129: PPUSH
60130: LD_EXP 66
60134: PUSH
60135: LD_VAR 0 2
60139: ARRAY
60140: PUSH
60141: LD_INT 2
60143: ARRAY
60144: PUSH
60145: LD_INT 1
60147: ARRAY
60148: PPUSH
60149: CALL_OW 128
// end ;
60153: GO 59931
60155: POP
60156: POP
// end ;
60157: GO 59774
60159: POP
60160: POP
// end ;
60161: LD_VAR 0 1
60165: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
60166: LD_INT 0
60168: PPUSH
60169: PPUSH
60170: PPUSH
60171: PPUSH
60172: PPUSH
// if not mc_bases then
60173: LD_EXP 63
60177: NOT
60178: IFFALSE 60182
// exit ;
60180: GO 61325
// for i = 1 to mc_bases do
60182: LD_ADDR_VAR 0 2
60186: PUSH
60187: DOUBLE
60188: LD_INT 1
60190: DEC
60191: ST_TO_ADDR
60192: LD_EXP 63
60196: PUSH
60197: FOR_TO
60198: IFFALSE 61323
// begin if mc_scan [ i ] then
60200: LD_EXP 86
60204: PUSH
60205: LD_VAR 0 2
60209: ARRAY
60210: IFFALSE 60214
// continue ;
60212: GO 60197
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
60214: LD_EXP 68
60218: PUSH
60219: LD_VAR 0 2
60223: ARRAY
60224: NOT
60225: PUSH
60226: LD_EXP 70
60230: PUSH
60231: LD_VAR 0 2
60235: ARRAY
60236: NOT
60237: AND
60238: PUSH
60239: LD_EXP 69
60243: PUSH
60244: LD_VAR 0 2
60248: ARRAY
60249: AND
60250: IFFALSE 60288
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
60252: LD_ADDR_EXP 69
60256: PUSH
60257: LD_EXP 69
60261: PPUSH
60262: LD_VAR 0 2
60266: PPUSH
60267: EMPTY
60268: PPUSH
60269: CALL_OW 1
60273: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
60274: LD_VAR 0 2
60278: PPUSH
60279: LD_INT 103
60281: PPUSH
60282: CALL 54008 0 2
// continue ;
60286: GO 60197
// end ; if mc_construct_list [ i ] then
60288: LD_EXP 70
60292: PUSH
60293: LD_VAR 0 2
60297: ARRAY
60298: IFFALSE 60518
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
60300: LD_ADDR_VAR 0 4
60304: PUSH
60305: LD_EXP 63
60309: PUSH
60310: LD_VAR 0 2
60314: ARRAY
60315: PPUSH
60316: LD_INT 25
60318: PUSH
60319: LD_INT 2
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PPUSH
60326: CALL_OW 72
60330: PUSH
60331: LD_EXP 65
60335: PUSH
60336: LD_VAR 0 2
60340: ARRAY
60341: DIFF
60342: ST_TO_ADDR
// if not tmp then
60343: LD_VAR 0 4
60347: NOT
60348: IFFALSE 60352
// continue ;
60350: GO 60197
// for j in tmp do
60352: LD_ADDR_VAR 0 3
60356: PUSH
60357: LD_VAR 0 4
60361: PUSH
60362: FOR_IN
60363: IFFALSE 60514
// begin if not mc_builders [ i ] then
60365: LD_EXP 69
60369: PUSH
60370: LD_VAR 0 2
60374: ARRAY
60375: NOT
60376: IFFALSE 60434
// begin SetTag ( j , 103 ) ;
60378: LD_VAR 0 3
60382: PPUSH
60383: LD_INT 103
60385: PPUSH
60386: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
60390: LD_ADDR_EXP 69
60394: PUSH
60395: LD_EXP 69
60399: PPUSH
60400: LD_VAR 0 2
60404: PUSH
60405: LD_EXP 69
60409: PUSH
60410: LD_VAR 0 2
60414: ARRAY
60415: PUSH
60416: LD_INT 1
60418: PLUS
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PPUSH
60424: LD_VAR 0 3
60428: PPUSH
60429: CALL 18420 0 3
60433: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
60434: LD_VAR 0 3
60438: PPUSH
60439: CALL_OW 310
60443: IFFALSE 60454
// ComExitBuilding ( j ) ;
60445: LD_VAR 0 3
60449: PPUSH
60450: CALL_OW 122
// wait ( 3 ) ;
60454: LD_INT 3
60456: PPUSH
60457: CALL_OW 67
// if not mc_construct_list [ i ] then
60461: LD_EXP 70
60465: PUSH
60466: LD_VAR 0 2
60470: ARRAY
60471: NOT
60472: IFFALSE 60476
// break ;
60474: GO 60514
// if not HasTask ( j ) then
60476: LD_VAR 0 3
60480: PPUSH
60481: CALL_OW 314
60485: NOT
60486: IFFALSE 60512
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
60488: LD_VAR 0 3
60492: PPUSH
60493: LD_EXP 70
60497: PUSH
60498: LD_VAR 0 2
60502: ARRAY
60503: PUSH
60504: LD_INT 1
60506: ARRAY
60507: PPUSH
60508: CALL 21271 0 2
// end ;
60512: GO 60362
60514: POP
60515: POP
// end else
60516: GO 61321
// if mc_build_list [ i ] then
60518: LD_EXP 68
60522: PUSH
60523: LD_VAR 0 2
60527: ARRAY
60528: IFFALSE 61321
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
60530: LD_ADDR_VAR 0 5
60534: PUSH
60535: LD_EXP 63
60539: PUSH
60540: LD_VAR 0 2
60544: ARRAY
60545: PPUSH
60546: LD_INT 2
60548: PUSH
60549: LD_INT 30
60551: PUSH
60552: LD_INT 0
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 30
60561: PUSH
60562: LD_INT 1
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: LIST
60573: PPUSH
60574: CALL_OW 72
60578: ST_TO_ADDR
// if depot then
60579: LD_VAR 0 5
60583: IFFALSE 60601
// depot := depot [ 1 ] else
60585: LD_ADDR_VAR 0 5
60589: PUSH
60590: LD_VAR 0 5
60594: PUSH
60595: LD_INT 1
60597: ARRAY
60598: ST_TO_ADDR
60599: GO 60609
// depot := 0 ;
60601: LD_ADDR_VAR 0 5
60605: PUSH
60606: LD_INT 0
60608: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
60609: LD_EXP 68
60613: PUSH
60614: LD_VAR 0 2
60618: ARRAY
60619: PUSH
60620: LD_INT 1
60622: ARRAY
60623: PUSH
60624: LD_INT 1
60626: ARRAY
60627: PPUSH
60628: CALL 21101 0 1
60632: PUSH
60633: LD_EXP 63
60637: PUSH
60638: LD_VAR 0 2
60642: ARRAY
60643: PPUSH
60644: LD_INT 2
60646: PUSH
60647: LD_INT 30
60649: PUSH
60650: LD_INT 2
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 30
60659: PUSH
60660: LD_INT 3
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: LIST
60671: PPUSH
60672: CALL_OW 72
60676: NOT
60677: AND
60678: IFFALSE 60783
// begin for j = 1 to mc_build_list [ i ] do
60680: LD_ADDR_VAR 0 3
60684: PUSH
60685: DOUBLE
60686: LD_INT 1
60688: DEC
60689: ST_TO_ADDR
60690: LD_EXP 68
60694: PUSH
60695: LD_VAR 0 2
60699: ARRAY
60700: PUSH
60701: FOR_TO
60702: IFFALSE 60781
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
60704: LD_EXP 68
60708: PUSH
60709: LD_VAR 0 2
60713: ARRAY
60714: PUSH
60715: LD_VAR 0 3
60719: ARRAY
60720: PUSH
60721: LD_INT 1
60723: ARRAY
60724: PUSH
60725: LD_INT 2
60727: EQUAL
60728: IFFALSE 60779
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
60730: LD_ADDR_EXP 68
60734: PUSH
60735: LD_EXP 68
60739: PPUSH
60740: LD_VAR 0 2
60744: PPUSH
60745: LD_EXP 68
60749: PUSH
60750: LD_VAR 0 2
60754: ARRAY
60755: PPUSH
60756: LD_VAR 0 3
60760: PPUSH
60761: LD_INT 1
60763: PPUSH
60764: LD_INT 0
60766: PPUSH
60767: CALL 17838 0 4
60771: PPUSH
60772: CALL_OW 1
60776: ST_TO_ADDR
// break ;
60777: GO 60781
// end ;
60779: GO 60701
60781: POP
60782: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
60783: LD_EXP 68
60787: PUSH
60788: LD_VAR 0 2
60792: ARRAY
60793: PUSH
60794: LD_INT 1
60796: ARRAY
60797: PUSH
60798: LD_INT 1
60800: ARRAY
60801: PUSH
60802: LD_INT 0
60804: EQUAL
60805: PUSH
60806: LD_VAR 0 5
60810: PUSH
60811: LD_VAR 0 5
60815: PPUSH
60816: LD_EXP 68
60820: PUSH
60821: LD_VAR 0 2
60825: ARRAY
60826: PUSH
60827: LD_INT 1
60829: ARRAY
60830: PUSH
60831: LD_INT 1
60833: ARRAY
60834: PPUSH
60835: LD_EXP 68
60839: PUSH
60840: LD_VAR 0 2
60844: ARRAY
60845: PUSH
60846: LD_INT 1
60848: ARRAY
60849: PUSH
60850: LD_INT 2
60852: ARRAY
60853: PPUSH
60854: LD_EXP 68
60858: PUSH
60859: LD_VAR 0 2
60863: ARRAY
60864: PUSH
60865: LD_INT 1
60867: ARRAY
60868: PUSH
60869: LD_INT 3
60871: ARRAY
60872: PPUSH
60873: LD_EXP 68
60877: PUSH
60878: LD_VAR 0 2
60882: ARRAY
60883: PUSH
60884: LD_INT 1
60886: ARRAY
60887: PUSH
60888: LD_INT 4
60890: ARRAY
60891: PPUSH
60892: CALL 25835 0 5
60896: AND
60897: OR
60898: IFFALSE 61179
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
60900: LD_ADDR_VAR 0 4
60904: PUSH
60905: LD_EXP 63
60909: PUSH
60910: LD_VAR 0 2
60914: ARRAY
60915: PPUSH
60916: LD_INT 25
60918: PUSH
60919: LD_INT 2
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PPUSH
60926: CALL_OW 72
60930: PUSH
60931: LD_EXP 65
60935: PUSH
60936: LD_VAR 0 2
60940: ARRAY
60941: DIFF
60942: ST_TO_ADDR
// if not tmp then
60943: LD_VAR 0 4
60947: NOT
60948: IFFALSE 60952
// continue ;
60950: GO 60197
// for j in tmp do
60952: LD_ADDR_VAR 0 3
60956: PUSH
60957: LD_VAR 0 4
60961: PUSH
60962: FOR_IN
60963: IFFALSE 61175
// begin if not mc_builders [ i ] then
60965: LD_EXP 69
60969: PUSH
60970: LD_VAR 0 2
60974: ARRAY
60975: NOT
60976: IFFALSE 61034
// begin SetTag ( j , 103 ) ;
60978: LD_VAR 0 3
60982: PPUSH
60983: LD_INT 103
60985: PPUSH
60986: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
60990: LD_ADDR_EXP 69
60994: PUSH
60995: LD_EXP 69
60999: PPUSH
61000: LD_VAR 0 2
61004: PUSH
61005: LD_EXP 69
61009: PUSH
61010: LD_VAR 0 2
61014: ARRAY
61015: PUSH
61016: LD_INT 1
61018: PLUS
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PPUSH
61024: LD_VAR 0 3
61028: PPUSH
61029: CALL 18420 0 3
61033: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
61034: LD_VAR 0 3
61038: PPUSH
61039: CALL_OW 310
61043: IFFALSE 61054
// ComExitBuilding ( j ) ;
61045: LD_VAR 0 3
61049: PPUSH
61050: CALL_OW 122
// wait ( 3 ) ;
61054: LD_INT 3
61056: PPUSH
61057: CALL_OW 67
// if not mc_build_list [ i ] then
61061: LD_EXP 68
61065: PUSH
61066: LD_VAR 0 2
61070: ARRAY
61071: NOT
61072: IFFALSE 61076
// break ;
61074: GO 61175
// if not HasTask ( j ) then
61076: LD_VAR 0 3
61080: PPUSH
61081: CALL_OW 314
61085: NOT
61086: IFFALSE 61173
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
61088: LD_VAR 0 3
61092: PPUSH
61093: LD_EXP 68
61097: PUSH
61098: LD_VAR 0 2
61102: ARRAY
61103: PUSH
61104: LD_INT 1
61106: ARRAY
61107: PUSH
61108: LD_INT 1
61110: ARRAY
61111: PPUSH
61112: LD_EXP 68
61116: PUSH
61117: LD_VAR 0 2
61121: ARRAY
61122: PUSH
61123: LD_INT 1
61125: ARRAY
61126: PUSH
61127: LD_INT 2
61129: ARRAY
61130: PPUSH
61131: LD_EXP 68
61135: PUSH
61136: LD_VAR 0 2
61140: ARRAY
61141: PUSH
61142: LD_INT 1
61144: ARRAY
61145: PUSH
61146: LD_INT 3
61148: ARRAY
61149: PPUSH
61150: LD_EXP 68
61154: PUSH
61155: LD_VAR 0 2
61159: ARRAY
61160: PUSH
61161: LD_INT 1
61163: ARRAY
61164: PUSH
61165: LD_INT 4
61167: ARRAY
61168: PPUSH
61169: CALL_OW 145
// end ;
61173: GO 60962
61175: POP
61176: POP
// end else
61177: GO 61321
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
61179: LD_EXP 63
61183: PUSH
61184: LD_VAR 0 2
61188: ARRAY
61189: PPUSH
61190: LD_EXP 68
61194: PUSH
61195: LD_VAR 0 2
61199: ARRAY
61200: PUSH
61201: LD_INT 1
61203: ARRAY
61204: PUSH
61205: LD_INT 1
61207: ARRAY
61208: PPUSH
61209: LD_EXP 68
61213: PUSH
61214: LD_VAR 0 2
61218: ARRAY
61219: PUSH
61220: LD_INT 1
61222: ARRAY
61223: PUSH
61224: LD_INT 2
61226: ARRAY
61227: PPUSH
61228: LD_EXP 68
61232: PUSH
61233: LD_VAR 0 2
61237: ARRAY
61238: PUSH
61239: LD_INT 1
61241: ARRAY
61242: PUSH
61243: LD_INT 3
61245: ARRAY
61246: PPUSH
61247: LD_EXP 68
61251: PUSH
61252: LD_VAR 0 2
61256: ARRAY
61257: PUSH
61258: LD_INT 1
61260: ARRAY
61261: PUSH
61262: LD_INT 4
61264: ARRAY
61265: PPUSH
61266: CALL 25171 0 5
61270: NOT
61271: IFFALSE 61321
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
61273: LD_ADDR_EXP 68
61277: PUSH
61278: LD_EXP 68
61282: PPUSH
61283: LD_VAR 0 2
61287: PPUSH
61288: LD_EXP 68
61292: PUSH
61293: LD_VAR 0 2
61297: ARRAY
61298: PPUSH
61299: LD_INT 1
61301: PPUSH
61302: LD_INT 1
61304: NEG
61305: PPUSH
61306: LD_INT 0
61308: PPUSH
61309: CALL 17838 0 4
61313: PPUSH
61314: CALL_OW 1
61318: ST_TO_ADDR
// continue ;
61319: GO 60197
// end ; end ; end ;
61321: GO 60197
61323: POP
61324: POP
// end ;
61325: LD_VAR 0 1
61329: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
61330: LD_INT 0
61332: PPUSH
61333: PPUSH
61334: PPUSH
61335: PPUSH
61336: PPUSH
61337: PPUSH
// if not mc_bases then
61338: LD_EXP 63
61342: NOT
61343: IFFALSE 61347
// exit ;
61345: GO 61774
// for i = 1 to mc_bases do
61347: LD_ADDR_VAR 0 2
61351: PUSH
61352: DOUBLE
61353: LD_INT 1
61355: DEC
61356: ST_TO_ADDR
61357: LD_EXP 63
61361: PUSH
61362: FOR_TO
61363: IFFALSE 61772
// begin tmp := mc_build_upgrade [ i ] ;
61365: LD_ADDR_VAR 0 4
61369: PUSH
61370: LD_EXP 95
61374: PUSH
61375: LD_VAR 0 2
61379: ARRAY
61380: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
61381: LD_ADDR_VAR 0 6
61385: PUSH
61386: LD_EXP 96
61390: PUSH
61391: LD_VAR 0 2
61395: ARRAY
61396: PPUSH
61397: LD_INT 2
61399: PUSH
61400: LD_INT 30
61402: PUSH
61403: LD_INT 6
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 30
61412: PUSH
61413: LD_INT 7
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: LIST
61424: PPUSH
61425: CALL_OW 72
61429: ST_TO_ADDR
// if not tmp and not lab then
61430: LD_VAR 0 4
61434: NOT
61435: PUSH
61436: LD_VAR 0 6
61440: NOT
61441: AND
61442: IFFALSE 61446
// continue ;
61444: GO 61362
// if tmp then
61446: LD_VAR 0 4
61450: IFFALSE 61570
// for j in tmp do
61452: LD_ADDR_VAR 0 3
61456: PUSH
61457: LD_VAR 0 4
61461: PUSH
61462: FOR_IN
61463: IFFALSE 61568
// begin if UpgradeCost ( j ) then
61465: LD_VAR 0 3
61469: PPUSH
61470: CALL 24831 0 1
61474: IFFALSE 61566
// begin ComUpgrade ( j ) ;
61476: LD_VAR 0 3
61480: PPUSH
61481: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
61485: LD_ADDR_EXP 95
61489: PUSH
61490: LD_EXP 95
61494: PPUSH
61495: LD_VAR 0 2
61499: PPUSH
61500: LD_EXP 95
61504: PUSH
61505: LD_VAR 0 2
61509: ARRAY
61510: PUSH
61511: LD_VAR 0 3
61515: DIFF
61516: PPUSH
61517: CALL_OW 1
61521: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
61522: LD_ADDR_EXP 70
61526: PUSH
61527: LD_EXP 70
61531: PPUSH
61532: LD_VAR 0 2
61536: PUSH
61537: LD_EXP 70
61541: PUSH
61542: LD_VAR 0 2
61546: ARRAY
61547: PUSH
61548: LD_INT 1
61550: PLUS
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PPUSH
61556: LD_VAR 0 3
61560: PPUSH
61561: CALL 18420 0 3
61565: ST_TO_ADDR
// end ; end ;
61566: GO 61462
61568: POP
61569: POP
// if not lab or not mc_lab_upgrade [ i ] then
61570: LD_VAR 0 6
61574: NOT
61575: PUSH
61576: LD_EXP 97
61580: PUSH
61581: LD_VAR 0 2
61585: ARRAY
61586: NOT
61587: OR
61588: IFFALSE 61592
// continue ;
61590: GO 61362
// for j in lab do
61592: LD_ADDR_VAR 0 3
61596: PUSH
61597: LD_VAR 0 6
61601: PUSH
61602: FOR_IN
61603: IFFALSE 61768
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
61605: LD_VAR 0 3
61609: PPUSH
61610: CALL_OW 266
61614: PUSH
61615: LD_INT 6
61617: PUSH
61618: LD_INT 7
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: IN
61625: PUSH
61626: LD_VAR 0 3
61630: PPUSH
61631: CALL_OW 461
61635: PUSH
61636: LD_INT 1
61638: NONEQUAL
61639: AND
61640: IFFALSE 61766
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
61642: LD_VAR 0 3
61646: PPUSH
61647: LD_EXP 97
61651: PUSH
61652: LD_VAR 0 2
61656: ARRAY
61657: PUSH
61658: LD_INT 1
61660: ARRAY
61661: PPUSH
61662: CALL 25036 0 2
61666: IFFALSE 61766
// begin ComCancel ( j ) ;
61668: LD_VAR 0 3
61672: PPUSH
61673: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
61677: LD_VAR 0 3
61681: PPUSH
61682: LD_EXP 97
61686: PUSH
61687: LD_VAR 0 2
61691: ARRAY
61692: PUSH
61693: LD_INT 1
61695: ARRAY
61696: PPUSH
61697: CALL_OW 207
// if not j in mc_construct_list [ i ] then
61701: LD_VAR 0 3
61705: PUSH
61706: LD_EXP 70
61710: PUSH
61711: LD_VAR 0 2
61715: ARRAY
61716: IN
61717: NOT
61718: IFFALSE 61764
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
61720: LD_ADDR_EXP 70
61724: PUSH
61725: LD_EXP 70
61729: PPUSH
61730: LD_VAR 0 2
61734: PUSH
61735: LD_EXP 70
61739: PUSH
61740: LD_VAR 0 2
61744: ARRAY
61745: PUSH
61746: LD_INT 1
61748: PLUS
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PPUSH
61754: LD_VAR 0 3
61758: PPUSH
61759: CALL 18420 0 3
61763: ST_TO_ADDR
// break ;
61764: GO 61768
// end ; end ; end ;
61766: GO 61602
61768: POP
61769: POP
// end ;
61770: GO 61362
61772: POP
61773: POP
// end ;
61774: LD_VAR 0 1
61778: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
61779: LD_INT 0
61781: PPUSH
61782: PPUSH
61783: PPUSH
61784: PPUSH
61785: PPUSH
61786: PPUSH
61787: PPUSH
61788: PPUSH
61789: PPUSH
// if not mc_bases then
61790: LD_EXP 63
61794: NOT
61795: IFFALSE 61799
// exit ;
61797: GO 62204
// for i = 1 to mc_bases do
61799: LD_ADDR_VAR 0 2
61803: PUSH
61804: DOUBLE
61805: LD_INT 1
61807: DEC
61808: ST_TO_ADDR
61809: LD_EXP 63
61813: PUSH
61814: FOR_TO
61815: IFFALSE 62202
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
61817: LD_EXP 71
61821: PUSH
61822: LD_VAR 0 2
61826: ARRAY
61827: NOT
61828: PUSH
61829: LD_EXP 63
61833: PUSH
61834: LD_VAR 0 2
61838: ARRAY
61839: PPUSH
61840: LD_INT 30
61842: PUSH
61843: LD_INT 3
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PPUSH
61850: CALL_OW 72
61854: NOT
61855: OR
61856: IFFALSE 61860
// continue ;
61858: GO 61814
// busy := false ;
61860: LD_ADDR_VAR 0 8
61864: PUSH
61865: LD_INT 0
61867: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
61868: LD_ADDR_VAR 0 4
61872: PUSH
61873: LD_EXP 63
61877: PUSH
61878: LD_VAR 0 2
61882: ARRAY
61883: PPUSH
61884: LD_INT 30
61886: PUSH
61887: LD_INT 3
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PPUSH
61894: CALL_OW 72
61898: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
61899: LD_ADDR_VAR 0 6
61903: PUSH
61904: LD_EXP 71
61908: PUSH
61909: LD_VAR 0 2
61913: ARRAY
61914: PPUSH
61915: LD_INT 2
61917: PUSH
61918: LD_INT 30
61920: PUSH
61921: LD_INT 32
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 30
61930: PUSH
61931: LD_INT 33
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: LIST
61942: PPUSH
61943: CALL_OW 72
61947: ST_TO_ADDR
// if not t then
61948: LD_VAR 0 6
61952: NOT
61953: IFFALSE 61957
// continue ;
61955: GO 61814
// for j in tmp do
61957: LD_ADDR_VAR 0 3
61961: PUSH
61962: LD_VAR 0 4
61966: PUSH
61967: FOR_IN
61968: IFFALSE 61998
// if not BuildingStatus ( j ) = bs_idle then
61970: LD_VAR 0 3
61974: PPUSH
61975: CALL_OW 461
61979: PUSH
61980: LD_INT 2
61982: EQUAL
61983: NOT
61984: IFFALSE 61996
// begin busy := true ;
61986: LD_ADDR_VAR 0 8
61990: PUSH
61991: LD_INT 1
61993: ST_TO_ADDR
// break ;
61994: GO 61998
// end ;
61996: GO 61967
61998: POP
61999: POP
// if busy then
62000: LD_VAR 0 8
62004: IFFALSE 62008
// continue ;
62006: GO 61814
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
62008: LD_ADDR_VAR 0 7
62012: PUSH
62013: LD_VAR 0 6
62017: PPUSH
62018: LD_INT 35
62020: PUSH
62021: LD_INT 0
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PPUSH
62028: CALL_OW 72
62032: ST_TO_ADDR
// if tw then
62033: LD_VAR 0 7
62037: IFFALSE 62114
// begin tw := tw [ 1 ] ;
62039: LD_ADDR_VAR 0 7
62043: PUSH
62044: LD_VAR 0 7
62048: PUSH
62049: LD_INT 1
62051: ARRAY
62052: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
62053: LD_ADDR_VAR 0 9
62057: PUSH
62058: LD_VAR 0 7
62062: PPUSH
62063: LD_EXP 88
62067: PUSH
62068: LD_VAR 0 2
62072: ARRAY
62073: PPUSH
62074: CALL 23390 0 2
62078: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
62079: LD_EXP 102
62083: PUSH
62084: LD_VAR 0 2
62088: ARRAY
62089: IFFALSE 62112
// if not weapon in mc_allowed_tower_weapons [ i ] then
62091: LD_VAR 0 9
62095: PUSH
62096: LD_EXP 102
62100: PUSH
62101: LD_VAR 0 2
62105: ARRAY
62106: IN
62107: NOT
62108: IFFALSE 62112
// continue ;
62110: GO 61814
// end else
62112: GO 62177
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
62114: LD_ADDR_VAR 0 5
62118: PUSH
62119: LD_EXP 71
62123: PUSH
62124: LD_VAR 0 2
62128: ARRAY
62129: PPUSH
62130: LD_VAR 0 4
62134: PPUSH
62135: CALL 48892 0 2
62139: ST_TO_ADDR
// if not tmp2 then
62140: LD_VAR 0 5
62144: NOT
62145: IFFALSE 62149
// continue ;
62147: GO 61814
// tw := tmp2 [ 1 ] ;
62149: LD_ADDR_VAR 0 7
62153: PUSH
62154: LD_VAR 0 5
62158: PUSH
62159: LD_INT 1
62161: ARRAY
62162: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
62163: LD_ADDR_VAR 0 9
62167: PUSH
62168: LD_VAR 0 5
62172: PUSH
62173: LD_INT 2
62175: ARRAY
62176: ST_TO_ADDR
// end ; if not weapon then
62177: LD_VAR 0 9
62181: NOT
62182: IFFALSE 62186
// continue ;
62184: GO 61814
// ComPlaceWeapon ( tw , weapon ) ;
62186: LD_VAR 0 7
62190: PPUSH
62191: LD_VAR 0 9
62195: PPUSH
62196: CALL_OW 148
// end ;
62200: GO 61814
62202: POP
62203: POP
// end ;
62204: LD_VAR 0 1
62208: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
62209: LD_INT 0
62211: PPUSH
62212: PPUSH
62213: PPUSH
62214: PPUSH
62215: PPUSH
62216: PPUSH
// if not mc_bases then
62217: LD_EXP 63
62221: NOT
62222: IFFALSE 62226
// exit ;
62224: GO 63002
// for i = 1 to mc_bases do
62226: LD_ADDR_VAR 0 2
62230: PUSH
62231: DOUBLE
62232: LD_INT 1
62234: DEC
62235: ST_TO_ADDR
62236: LD_EXP 63
62240: PUSH
62241: FOR_TO
62242: IFFALSE 63000
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
62244: LD_EXP 76
62248: PUSH
62249: LD_VAR 0 2
62253: ARRAY
62254: NOT
62255: PUSH
62256: LD_EXP 76
62260: PUSH
62261: LD_VAR 0 2
62265: ARRAY
62266: PUSH
62267: LD_EXP 77
62271: PUSH
62272: LD_VAR 0 2
62276: ARRAY
62277: EQUAL
62278: OR
62279: PUSH
62280: LD_EXP 86
62284: PUSH
62285: LD_VAR 0 2
62289: ARRAY
62290: OR
62291: IFFALSE 62295
// continue ;
62293: GO 62241
// if mc_miners [ i ] then
62295: LD_EXP 77
62299: PUSH
62300: LD_VAR 0 2
62304: ARRAY
62305: IFFALSE 62687
// begin for j = mc_miners [ i ] downto 1 do
62307: LD_ADDR_VAR 0 3
62311: PUSH
62312: DOUBLE
62313: LD_EXP 77
62317: PUSH
62318: LD_VAR 0 2
62322: ARRAY
62323: INC
62324: ST_TO_ADDR
62325: LD_INT 1
62327: PUSH
62328: FOR_DOWNTO
62329: IFFALSE 62685
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
62331: LD_EXP 77
62335: PUSH
62336: LD_VAR 0 2
62340: ARRAY
62341: PUSH
62342: LD_VAR 0 3
62346: ARRAY
62347: PPUSH
62348: CALL_OW 301
62352: PUSH
62353: LD_EXP 77
62357: PUSH
62358: LD_VAR 0 2
62362: ARRAY
62363: PUSH
62364: LD_VAR 0 3
62368: ARRAY
62369: PPUSH
62370: CALL_OW 257
62374: PUSH
62375: LD_INT 1
62377: NONEQUAL
62378: OR
62379: IFFALSE 62442
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
62381: LD_ADDR_VAR 0 5
62385: PUSH
62386: LD_EXP 77
62390: PUSH
62391: LD_VAR 0 2
62395: ARRAY
62396: PUSH
62397: LD_EXP 77
62401: PUSH
62402: LD_VAR 0 2
62406: ARRAY
62407: PUSH
62408: LD_VAR 0 3
62412: ARRAY
62413: DIFF
62414: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
62415: LD_ADDR_EXP 77
62419: PUSH
62420: LD_EXP 77
62424: PPUSH
62425: LD_VAR 0 2
62429: PPUSH
62430: LD_VAR 0 5
62434: PPUSH
62435: CALL_OW 1
62439: ST_TO_ADDR
// continue ;
62440: GO 62328
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
62442: LD_EXP 77
62446: PUSH
62447: LD_VAR 0 2
62451: ARRAY
62452: PUSH
62453: LD_VAR 0 3
62457: ARRAY
62458: PPUSH
62459: CALL_OW 257
62463: PUSH
62464: LD_INT 1
62466: EQUAL
62467: PUSH
62468: LD_EXP 77
62472: PUSH
62473: LD_VAR 0 2
62477: ARRAY
62478: PUSH
62479: LD_VAR 0 3
62483: ARRAY
62484: PPUSH
62485: CALL_OW 459
62489: NOT
62490: AND
62491: PUSH
62492: LD_EXP 77
62496: PUSH
62497: LD_VAR 0 2
62501: ARRAY
62502: PUSH
62503: LD_VAR 0 3
62507: ARRAY
62508: PPUSH
62509: CALL_OW 314
62513: NOT
62514: AND
62515: IFFALSE 62683
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
62517: LD_EXP 77
62521: PUSH
62522: LD_VAR 0 2
62526: ARRAY
62527: PUSH
62528: LD_VAR 0 3
62532: ARRAY
62533: PPUSH
62534: CALL_OW 310
62538: IFFALSE 62561
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
62540: LD_EXP 77
62544: PUSH
62545: LD_VAR 0 2
62549: ARRAY
62550: PUSH
62551: LD_VAR 0 3
62555: ARRAY
62556: PPUSH
62557: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
62561: LD_EXP 77
62565: PUSH
62566: LD_VAR 0 2
62570: ARRAY
62571: PUSH
62572: LD_VAR 0 3
62576: ARRAY
62577: PPUSH
62578: CALL_OW 314
62582: NOT
62583: IFFALSE 62683
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
62585: LD_EXP 77
62589: PUSH
62590: LD_VAR 0 2
62594: ARRAY
62595: PUSH
62596: LD_VAR 0 3
62600: ARRAY
62601: PPUSH
62602: LD_EXP 76
62606: PUSH
62607: LD_VAR 0 2
62611: ARRAY
62612: PUSH
62613: LD_VAR 0 3
62617: PUSH
62618: LD_EXP 76
62622: PUSH
62623: LD_VAR 0 2
62627: ARRAY
62628: MOD
62629: PUSH
62630: LD_INT 1
62632: PLUS
62633: ARRAY
62634: PUSH
62635: LD_INT 1
62637: ARRAY
62638: PPUSH
62639: LD_EXP 76
62643: PUSH
62644: LD_VAR 0 2
62648: ARRAY
62649: PUSH
62650: LD_VAR 0 3
62654: PUSH
62655: LD_EXP 76
62659: PUSH
62660: LD_VAR 0 2
62664: ARRAY
62665: MOD
62666: PUSH
62667: LD_INT 1
62669: PLUS
62670: ARRAY
62671: PUSH
62672: LD_INT 2
62674: ARRAY
62675: PPUSH
62676: LD_INT 0
62678: PPUSH
62679: CALL_OW 193
// end ; end ;
62683: GO 62328
62685: POP
62686: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
62687: LD_ADDR_VAR 0 5
62691: PUSH
62692: LD_EXP 63
62696: PUSH
62697: LD_VAR 0 2
62701: ARRAY
62702: PPUSH
62703: LD_INT 2
62705: PUSH
62706: LD_INT 30
62708: PUSH
62709: LD_INT 4
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 30
62718: PUSH
62719: LD_INT 5
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 30
62728: PUSH
62729: LD_INT 32
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: PPUSH
62742: CALL_OW 72
62746: ST_TO_ADDR
// if not tmp then
62747: LD_VAR 0 5
62751: NOT
62752: IFFALSE 62756
// continue ;
62754: GO 62241
// list := [ ] ;
62756: LD_ADDR_VAR 0 6
62760: PUSH
62761: EMPTY
62762: ST_TO_ADDR
// for j in tmp do
62763: LD_ADDR_VAR 0 3
62767: PUSH
62768: LD_VAR 0 5
62772: PUSH
62773: FOR_IN
62774: IFFALSE 62843
// begin for k in UnitsInside ( j ) do
62776: LD_ADDR_VAR 0 4
62780: PUSH
62781: LD_VAR 0 3
62785: PPUSH
62786: CALL_OW 313
62790: PUSH
62791: FOR_IN
62792: IFFALSE 62839
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
62794: LD_VAR 0 4
62798: PPUSH
62799: CALL_OW 257
62803: PUSH
62804: LD_INT 1
62806: EQUAL
62807: PUSH
62808: LD_VAR 0 4
62812: PPUSH
62813: CALL_OW 459
62817: NOT
62818: AND
62819: IFFALSE 62837
// list := list ^ k ;
62821: LD_ADDR_VAR 0 6
62825: PUSH
62826: LD_VAR 0 6
62830: PUSH
62831: LD_VAR 0 4
62835: ADD
62836: ST_TO_ADDR
62837: GO 62791
62839: POP
62840: POP
// end ;
62841: GO 62773
62843: POP
62844: POP
// list := list diff mc_miners [ i ] ;
62845: LD_ADDR_VAR 0 6
62849: PUSH
62850: LD_VAR 0 6
62854: PUSH
62855: LD_EXP 77
62859: PUSH
62860: LD_VAR 0 2
62864: ARRAY
62865: DIFF
62866: ST_TO_ADDR
// if not list then
62867: LD_VAR 0 6
62871: NOT
62872: IFFALSE 62876
// continue ;
62874: GO 62241
// k := mc_mines [ i ] - mc_miners [ i ] ;
62876: LD_ADDR_VAR 0 4
62880: PUSH
62881: LD_EXP 76
62885: PUSH
62886: LD_VAR 0 2
62890: ARRAY
62891: PUSH
62892: LD_EXP 77
62896: PUSH
62897: LD_VAR 0 2
62901: ARRAY
62902: MINUS
62903: ST_TO_ADDR
// if k > list then
62904: LD_VAR 0 4
62908: PUSH
62909: LD_VAR 0 6
62913: GREATER
62914: IFFALSE 62926
// k := list ;
62916: LD_ADDR_VAR 0 4
62920: PUSH
62921: LD_VAR 0 6
62925: ST_TO_ADDR
// for j = 1 to k do
62926: LD_ADDR_VAR 0 3
62930: PUSH
62931: DOUBLE
62932: LD_INT 1
62934: DEC
62935: ST_TO_ADDR
62936: LD_VAR 0 4
62940: PUSH
62941: FOR_TO
62942: IFFALSE 62996
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
62944: LD_ADDR_EXP 77
62948: PUSH
62949: LD_EXP 77
62953: PPUSH
62954: LD_VAR 0 2
62958: PUSH
62959: LD_EXP 77
62963: PUSH
62964: LD_VAR 0 2
62968: ARRAY
62969: PUSH
62970: LD_INT 1
62972: PLUS
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PPUSH
62978: LD_VAR 0 6
62982: PUSH
62983: LD_VAR 0 3
62987: ARRAY
62988: PPUSH
62989: CALL 18420 0 3
62993: ST_TO_ADDR
62994: GO 62941
62996: POP
62997: POP
// end ;
62998: GO 62241
63000: POP
63001: POP
// end ;
63002: LD_VAR 0 1
63006: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
63007: LD_INT 0
63009: PPUSH
63010: PPUSH
63011: PPUSH
63012: PPUSH
63013: PPUSH
63014: PPUSH
63015: PPUSH
63016: PPUSH
63017: PPUSH
63018: PPUSH
// if not mc_bases then
63019: LD_EXP 63
63023: NOT
63024: IFFALSE 63028
// exit ;
63026: GO 64778
// for i = 1 to mc_bases do
63028: LD_ADDR_VAR 0 2
63032: PUSH
63033: DOUBLE
63034: LD_INT 1
63036: DEC
63037: ST_TO_ADDR
63038: LD_EXP 63
63042: PUSH
63043: FOR_TO
63044: IFFALSE 64776
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
63046: LD_EXP 63
63050: PUSH
63051: LD_VAR 0 2
63055: ARRAY
63056: NOT
63057: PUSH
63058: LD_EXP 70
63062: PUSH
63063: LD_VAR 0 2
63067: ARRAY
63068: OR
63069: IFFALSE 63073
// continue ;
63071: GO 63043
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
63073: LD_EXP 79
63077: PUSH
63078: LD_VAR 0 2
63082: ARRAY
63083: NOT
63084: PUSH
63085: LD_EXP 80
63089: PUSH
63090: LD_VAR 0 2
63094: ARRAY
63095: AND
63096: IFFALSE 63134
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
63098: LD_ADDR_EXP 80
63102: PUSH
63103: LD_EXP 80
63107: PPUSH
63108: LD_VAR 0 2
63112: PPUSH
63113: EMPTY
63114: PPUSH
63115: CALL_OW 1
63119: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
63120: LD_VAR 0 2
63124: PPUSH
63125: LD_INT 107
63127: PPUSH
63128: CALL 54008 0 2
// continue ;
63132: GO 63043
// end ; target := [ ] ;
63134: LD_ADDR_VAR 0 6
63138: PUSH
63139: EMPTY
63140: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
63141: LD_ADDR_VAR 0 3
63145: PUSH
63146: DOUBLE
63147: LD_EXP 79
63151: PUSH
63152: LD_VAR 0 2
63156: ARRAY
63157: INC
63158: ST_TO_ADDR
63159: LD_INT 1
63161: PUSH
63162: FOR_DOWNTO
63163: IFFALSE 63423
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
63165: LD_EXP 79
63169: PUSH
63170: LD_VAR 0 2
63174: ARRAY
63175: PUSH
63176: LD_VAR 0 3
63180: ARRAY
63181: PUSH
63182: LD_INT 2
63184: ARRAY
63185: PPUSH
63186: LD_EXP 79
63190: PUSH
63191: LD_VAR 0 2
63195: ARRAY
63196: PUSH
63197: LD_VAR 0 3
63201: ARRAY
63202: PUSH
63203: LD_INT 3
63205: ARRAY
63206: PPUSH
63207: CALL_OW 488
63211: PUSH
63212: LD_EXP 79
63216: PUSH
63217: LD_VAR 0 2
63221: ARRAY
63222: PUSH
63223: LD_VAR 0 3
63227: ARRAY
63228: PUSH
63229: LD_INT 2
63231: ARRAY
63232: PPUSH
63233: LD_EXP 79
63237: PUSH
63238: LD_VAR 0 2
63242: ARRAY
63243: PUSH
63244: LD_VAR 0 3
63248: ARRAY
63249: PUSH
63250: LD_INT 3
63252: ARRAY
63253: PPUSH
63254: CALL_OW 284
63258: PUSH
63259: LD_INT 0
63261: EQUAL
63262: AND
63263: IFFALSE 63318
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
63265: LD_ADDR_VAR 0 5
63269: PUSH
63270: LD_EXP 79
63274: PUSH
63275: LD_VAR 0 2
63279: ARRAY
63280: PPUSH
63281: LD_VAR 0 3
63285: PPUSH
63286: CALL_OW 3
63290: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
63291: LD_ADDR_EXP 79
63295: PUSH
63296: LD_EXP 79
63300: PPUSH
63301: LD_VAR 0 2
63305: PPUSH
63306: LD_VAR 0 5
63310: PPUSH
63311: CALL_OW 1
63315: ST_TO_ADDR
// continue ;
63316: GO 63162
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
63318: LD_EXP 63
63322: PUSH
63323: LD_VAR 0 2
63327: ARRAY
63328: PUSH
63329: LD_INT 1
63331: ARRAY
63332: PPUSH
63333: CALL_OW 255
63337: PPUSH
63338: LD_EXP 79
63342: PUSH
63343: LD_VAR 0 2
63347: ARRAY
63348: PUSH
63349: LD_VAR 0 3
63353: ARRAY
63354: PUSH
63355: LD_INT 2
63357: ARRAY
63358: PPUSH
63359: LD_EXP 79
63363: PUSH
63364: LD_VAR 0 2
63368: ARRAY
63369: PUSH
63370: LD_VAR 0 3
63374: ARRAY
63375: PUSH
63376: LD_INT 3
63378: ARRAY
63379: PPUSH
63380: LD_INT 30
63382: PPUSH
63383: CALL 19316 0 4
63387: PUSH
63388: LD_INT 4
63390: ARRAY
63391: PUSH
63392: LD_INT 0
63394: EQUAL
63395: IFFALSE 63421
// begin target := mc_crates [ i ] [ j ] ;
63397: LD_ADDR_VAR 0 6
63401: PUSH
63402: LD_EXP 79
63406: PUSH
63407: LD_VAR 0 2
63411: ARRAY
63412: PUSH
63413: LD_VAR 0 3
63417: ARRAY
63418: ST_TO_ADDR
// break ;
63419: GO 63423
// end ; end ;
63421: GO 63162
63423: POP
63424: POP
// if not target then
63425: LD_VAR 0 6
63429: NOT
63430: IFFALSE 63434
// continue ;
63432: GO 63043
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
63434: LD_ADDR_VAR 0 7
63438: PUSH
63439: LD_EXP 82
63443: PUSH
63444: LD_VAR 0 2
63448: ARRAY
63449: PPUSH
63450: LD_INT 2
63452: PUSH
63453: LD_INT 3
63455: PUSH
63456: LD_INT 58
63458: PUSH
63459: EMPTY
63460: LIST
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 61
63468: PUSH
63469: EMPTY
63470: LIST
63471: PUSH
63472: LD_INT 33
63474: PUSH
63475: LD_INT 5
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 33
63484: PUSH
63485: LD_INT 3
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 2
63501: PUSH
63502: LD_INT 34
63504: PUSH
63505: LD_INT 32
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: LD_INT 34
63514: PUSH
63515: LD_INT 51
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 34
63524: PUSH
63525: LD_INT 12
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PPUSH
63542: CALL_OW 72
63546: ST_TO_ADDR
// if not cargo then
63547: LD_VAR 0 7
63551: NOT
63552: IFFALSE 64195
// begin if mc_crates_collector [ i ] < 5 then
63554: LD_EXP 80
63558: PUSH
63559: LD_VAR 0 2
63563: ARRAY
63564: PUSH
63565: LD_INT 5
63567: LESS
63568: IFFALSE 63934
// begin if mc_ape [ i ] then
63570: LD_EXP 92
63574: PUSH
63575: LD_VAR 0 2
63579: ARRAY
63580: IFFALSE 63627
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
63582: LD_ADDR_VAR 0 5
63586: PUSH
63587: LD_EXP 92
63591: PUSH
63592: LD_VAR 0 2
63596: ARRAY
63597: PPUSH
63598: LD_INT 25
63600: PUSH
63601: LD_INT 16
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 24
63610: PUSH
63611: LD_INT 750
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PPUSH
63622: CALL_OW 72
63626: ST_TO_ADDR
// if not tmp then
63627: LD_VAR 0 5
63631: NOT
63632: IFFALSE 63679
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
63634: LD_ADDR_VAR 0 5
63638: PUSH
63639: LD_EXP 63
63643: PUSH
63644: LD_VAR 0 2
63648: ARRAY
63649: PPUSH
63650: LD_INT 25
63652: PUSH
63653: LD_INT 2
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 24
63662: PUSH
63663: LD_INT 750
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PPUSH
63674: CALL_OW 72
63678: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
63679: LD_EXP 92
63683: PUSH
63684: LD_VAR 0 2
63688: ARRAY
63689: PUSH
63690: LD_EXP 63
63694: PUSH
63695: LD_VAR 0 2
63699: ARRAY
63700: PPUSH
63701: LD_INT 25
63703: PUSH
63704: LD_INT 2
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 24
63713: PUSH
63714: LD_INT 750
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PPUSH
63725: CALL_OW 72
63729: AND
63730: PUSH
63731: LD_VAR 0 5
63735: PUSH
63736: LD_INT 5
63738: LESS
63739: AND
63740: IFFALSE 63822
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
63742: LD_ADDR_VAR 0 3
63746: PUSH
63747: LD_EXP 63
63751: PUSH
63752: LD_VAR 0 2
63756: ARRAY
63757: PPUSH
63758: LD_INT 25
63760: PUSH
63761: LD_INT 2
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 24
63770: PUSH
63771: LD_INT 750
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PPUSH
63782: CALL_OW 72
63786: PUSH
63787: FOR_IN
63788: IFFALSE 63820
// begin tmp := tmp union j ;
63790: LD_ADDR_VAR 0 5
63794: PUSH
63795: LD_VAR 0 5
63799: PUSH
63800: LD_VAR 0 3
63804: UNION
63805: ST_TO_ADDR
// if tmp >= 5 then
63806: LD_VAR 0 5
63810: PUSH
63811: LD_INT 5
63813: GREATEREQUAL
63814: IFFALSE 63818
// break ;
63816: GO 63820
// end ;
63818: GO 63787
63820: POP
63821: POP
// end ; if not tmp then
63822: LD_VAR 0 5
63826: NOT
63827: IFFALSE 63831
// continue ;
63829: GO 63043
// for j in tmp do
63831: LD_ADDR_VAR 0 3
63835: PUSH
63836: LD_VAR 0 5
63840: PUSH
63841: FOR_IN
63842: IFFALSE 63932
// if not GetTag ( j ) then
63844: LD_VAR 0 3
63848: PPUSH
63849: CALL_OW 110
63853: NOT
63854: IFFALSE 63930
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
63856: LD_ADDR_EXP 80
63860: PUSH
63861: LD_EXP 80
63865: PPUSH
63866: LD_VAR 0 2
63870: PUSH
63871: LD_EXP 80
63875: PUSH
63876: LD_VAR 0 2
63880: ARRAY
63881: PUSH
63882: LD_INT 1
63884: PLUS
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PPUSH
63890: LD_VAR 0 3
63894: PPUSH
63895: CALL 18420 0 3
63899: ST_TO_ADDR
// SetTag ( j , 107 ) ;
63900: LD_VAR 0 3
63904: PPUSH
63905: LD_INT 107
63907: PPUSH
63908: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
63912: LD_EXP 80
63916: PUSH
63917: LD_VAR 0 2
63921: ARRAY
63922: PUSH
63923: LD_INT 5
63925: GREATEREQUAL
63926: IFFALSE 63930
// break ;
63928: GO 63932
// end ;
63930: GO 63841
63932: POP
63933: POP
// end ; if mc_crates_collector [ i ] and target then
63934: LD_EXP 80
63938: PUSH
63939: LD_VAR 0 2
63943: ARRAY
63944: PUSH
63945: LD_VAR 0 6
63949: AND
63950: IFFALSE 64193
// begin if mc_crates_collector [ i ] < target [ 1 ] then
63952: LD_EXP 80
63956: PUSH
63957: LD_VAR 0 2
63961: ARRAY
63962: PUSH
63963: LD_VAR 0 6
63967: PUSH
63968: LD_INT 1
63970: ARRAY
63971: LESS
63972: IFFALSE 63992
// tmp := mc_crates_collector [ i ] else
63974: LD_ADDR_VAR 0 5
63978: PUSH
63979: LD_EXP 80
63983: PUSH
63984: LD_VAR 0 2
63988: ARRAY
63989: ST_TO_ADDR
63990: GO 64006
// tmp := target [ 1 ] ;
63992: LD_ADDR_VAR 0 5
63996: PUSH
63997: LD_VAR 0 6
64001: PUSH
64002: LD_INT 1
64004: ARRAY
64005: ST_TO_ADDR
// k := 0 ;
64006: LD_ADDR_VAR 0 4
64010: PUSH
64011: LD_INT 0
64013: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
64014: LD_ADDR_VAR 0 3
64018: PUSH
64019: LD_EXP 80
64023: PUSH
64024: LD_VAR 0 2
64028: ARRAY
64029: PUSH
64030: FOR_IN
64031: IFFALSE 64191
// begin k := k + 1 ;
64033: LD_ADDR_VAR 0 4
64037: PUSH
64038: LD_VAR 0 4
64042: PUSH
64043: LD_INT 1
64045: PLUS
64046: ST_TO_ADDR
// if k > tmp then
64047: LD_VAR 0 4
64051: PUSH
64052: LD_VAR 0 5
64056: GREATER
64057: IFFALSE 64061
// break ;
64059: GO 64191
// if not GetClass ( j ) in [ 2 , 16 ] then
64061: LD_VAR 0 3
64065: PPUSH
64066: CALL_OW 257
64070: PUSH
64071: LD_INT 2
64073: PUSH
64074: LD_INT 16
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: IN
64081: NOT
64082: IFFALSE 64135
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
64084: LD_ADDR_EXP 80
64088: PUSH
64089: LD_EXP 80
64093: PPUSH
64094: LD_VAR 0 2
64098: PPUSH
64099: LD_EXP 80
64103: PUSH
64104: LD_VAR 0 2
64108: ARRAY
64109: PUSH
64110: LD_VAR 0 3
64114: DIFF
64115: PPUSH
64116: CALL_OW 1
64120: ST_TO_ADDR
// SetTag ( j , 0 ) ;
64121: LD_VAR 0 3
64125: PPUSH
64126: LD_INT 0
64128: PPUSH
64129: CALL_OW 109
// continue ;
64133: GO 64030
// end ; if IsInUnit ( j ) then
64135: LD_VAR 0 3
64139: PPUSH
64140: CALL_OW 310
64144: IFFALSE 64155
// ComExitBuilding ( j ) ;
64146: LD_VAR 0 3
64150: PPUSH
64151: CALL_OW 122
// wait ( 3 ) ;
64155: LD_INT 3
64157: PPUSH
64158: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
64162: LD_VAR 0 3
64166: PPUSH
64167: LD_VAR 0 6
64171: PUSH
64172: LD_INT 2
64174: ARRAY
64175: PPUSH
64176: LD_VAR 0 6
64180: PUSH
64181: LD_INT 3
64183: ARRAY
64184: PPUSH
64185: CALL_OW 117
// end ;
64189: GO 64030
64191: POP
64192: POP
// end ; end else
64193: GO 64774
// begin for j in cargo do
64195: LD_ADDR_VAR 0 3
64199: PUSH
64200: LD_VAR 0 7
64204: PUSH
64205: FOR_IN
64206: IFFALSE 64772
// begin if GetTag ( j ) <> 0 then
64208: LD_VAR 0 3
64212: PPUSH
64213: CALL_OW 110
64217: PUSH
64218: LD_INT 0
64220: NONEQUAL
64221: IFFALSE 64225
// continue ;
64223: GO 64205
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
64225: LD_VAR 0 3
64229: PPUSH
64230: CALL_OW 256
64234: PUSH
64235: LD_INT 1000
64237: LESS
64238: PUSH
64239: LD_VAR 0 3
64243: PPUSH
64244: LD_EXP 87
64248: PUSH
64249: LD_VAR 0 2
64253: ARRAY
64254: PPUSH
64255: CALL_OW 308
64259: NOT
64260: AND
64261: IFFALSE 64283
// ComMoveToArea ( j , mc_parking [ i ] ) ;
64263: LD_VAR 0 3
64267: PPUSH
64268: LD_EXP 87
64272: PUSH
64273: LD_VAR 0 2
64277: ARRAY
64278: PPUSH
64279: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
64283: LD_VAR 0 3
64287: PPUSH
64288: CALL_OW 256
64292: PUSH
64293: LD_INT 1000
64295: LESS
64296: PUSH
64297: LD_VAR 0 3
64301: PPUSH
64302: LD_EXP 87
64306: PUSH
64307: LD_VAR 0 2
64311: ARRAY
64312: PPUSH
64313: CALL_OW 308
64317: AND
64318: IFFALSE 64322
// continue ;
64320: GO 64205
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
64322: LD_VAR 0 3
64326: PPUSH
64327: CALL_OW 262
64331: PUSH
64332: LD_INT 2
64334: EQUAL
64335: PUSH
64336: LD_VAR 0 3
64340: PPUSH
64341: CALL_OW 261
64345: PUSH
64346: LD_INT 15
64348: LESS
64349: AND
64350: IFFALSE 64354
// continue ;
64352: GO 64205
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
64354: LD_VAR 0 3
64358: PPUSH
64359: CALL_OW 262
64363: PUSH
64364: LD_INT 1
64366: EQUAL
64367: PUSH
64368: LD_VAR 0 3
64372: PPUSH
64373: CALL_OW 261
64377: PUSH
64378: LD_INT 10
64380: LESS
64381: AND
64382: IFFALSE 64711
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
64384: LD_ADDR_VAR 0 8
64388: PUSH
64389: LD_EXP 63
64393: PUSH
64394: LD_VAR 0 2
64398: ARRAY
64399: PPUSH
64400: LD_INT 2
64402: PUSH
64403: LD_INT 30
64405: PUSH
64406: LD_INT 0
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 30
64415: PUSH
64416: LD_INT 1
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: LIST
64427: PPUSH
64428: CALL_OW 72
64432: ST_TO_ADDR
// if not depot then
64433: LD_VAR 0 8
64437: NOT
64438: IFFALSE 64442
// continue ;
64440: GO 64205
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
64442: LD_VAR 0 3
64446: PPUSH
64447: LD_VAR 0 8
64451: PPUSH
64452: LD_VAR 0 3
64456: PPUSH
64457: CALL_OW 74
64461: PPUSH
64462: CALL_OW 296
64466: PUSH
64467: LD_INT 6
64469: LESS
64470: IFFALSE 64486
// SetFuel ( j , 100 ) else
64472: LD_VAR 0 3
64476: PPUSH
64477: LD_INT 100
64479: PPUSH
64480: CALL_OW 240
64484: GO 64711
// if GetFuel ( j ) = 0 then
64486: LD_VAR 0 3
64490: PPUSH
64491: CALL_OW 261
64495: PUSH
64496: LD_INT 0
64498: EQUAL
64499: IFFALSE 64711
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
64501: LD_ADDR_EXP 82
64505: PUSH
64506: LD_EXP 82
64510: PPUSH
64511: LD_VAR 0 2
64515: PPUSH
64516: LD_EXP 82
64520: PUSH
64521: LD_VAR 0 2
64525: ARRAY
64526: PUSH
64527: LD_VAR 0 3
64531: DIFF
64532: PPUSH
64533: CALL_OW 1
64537: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
64538: LD_VAR 0 3
64542: PPUSH
64543: CALL_OW 263
64547: PUSH
64548: LD_INT 1
64550: EQUAL
64551: IFFALSE 64567
// ComExitVehicle ( IsInUnit ( j ) ) ;
64553: LD_VAR 0 3
64557: PPUSH
64558: CALL_OW 310
64562: PPUSH
64563: CALL_OW 121
// if GetControl ( j ) = control_remote then
64567: LD_VAR 0 3
64571: PPUSH
64572: CALL_OW 263
64576: PUSH
64577: LD_INT 2
64579: EQUAL
64580: IFFALSE 64591
// ComUnlink ( j ) ;
64582: LD_VAR 0 3
64586: PPUSH
64587: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
64591: LD_ADDR_VAR 0 9
64595: PUSH
64596: LD_VAR 0 2
64600: PPUSH
64601: LD_INT 3
64603: PPUSH
64604: CALL 74064 0 2
64608: ST_TO_ADDR
// if fac then
64609: LD_VAR 0 9
64613: IFFALSE 64709
// begin for k in fac do
64615: LD_ADDR_VAR 0 4
64619: PUSH
64620: LD_VAR 0 9
64624: PUSH
64625: FOR_IN
64626: IFFALSE 64707
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
64628: LD_ADDR_VAR 0 10
64632: PUSH
64633: LD_VAR 0 9
64637: PPUSH
64638: LD_VAR 0 3
64642: PPUSH
64643: CALL_OW 265
64647: PPUSH
64648: LD_VAR 0 3
64652: PPUSH
64653: CALL_OW 262
64657: PPUSH
64658: LD_VAR 0 3
64662: PPUSH
64663: CALL_OW 263
64667: PPUSH
64668: LD_VAR 0 3
64672: PPUSH
64673: CALL_OW 264
64677: PPUSH
64678: CALL 15952 0 5
64682: ST_TO_ADDR
// if components then
64683: LD_VAR 0 10
64687: IFFALSE 64705
// begin MC_InsertProduceList ( i , components ) ;
64689: LD_VAR 0 2
64693: PPUSH
64694: LD_VAR 0 10
64698: PPUSH
64699: CALL 73609 0 2
// break ;
64703: GO 64707
// end ; end ;
64705: GO 64625
64707: POP
64708: POP
// end ; continue ;
64709: GO 64205
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
64711: LD_VAR 0 3
64715: PPUSH
64716: LD_INT 1
64718: PPUSH
64719: CALL_OW 289
64723: PUSH
64724: LD_INT 100
64726: LESS
64727: PUSH
64728: LD_VAR 0 3
64732: PPUSH
64733: CALL_OW 314
64737: NOT
64738: AND
64739: IFFALSE 64768
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
64741: LD_VAR 0 3
64745: PPUSH
64746: LD_VAR 0 6
64750: PUSH
64751: LD_INT 2
64753: ARRAY
64754: PPUSH
64755: LD_VAR 0 6
64759: PUSH
64760: LD_INT 3
64762: ARRAY
64763: PPUSH
64764: CALL_OW 117
// break ;
64768: GO 64772
// end ;
64770: GO 64205
64772: POP
64773: POP
// end ; end ;
64774: GO 63043
64776: POP
64777: POP
// end ;
64778: LD_VAR 0 1
64782: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
64783: LD_INT 0
64785: PPUSH
64786: PPUSH
64787: PPUSH
64788: PPUSH
// if not mc_bases then
64789: LD_EXP 63
64793: NOT
64794: IFFALSE 64798
// exit ;
64796: GO 64959
// for i = 1 to mc_bases do
64798: LD_ADDR_VAR 0 2
64802: PUSH
64803: DOUBLE
64804: LD_INT 1
64806: DEC
64807: ST_TO_ADDR
64808: LD_EXP 63
64812: PUSH
64813: FOR_TO
64814: IFFALSE 64957
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
64816: LD_ADDR_VAR 0 4
64820: PUSH
64821: LD_EXP 82
64825: PUSH
64826: LD_VAR 0 2
64830: ARRAY
64831: PUSH
64832: LD_EXP 85
64836: PUSH
64837: LD_VAR 0 2
64841: ARRAY
64842: UNION
64843: PPUSH
64844: LD_INT 33
64846: PUSH
64847: LD_INT 2
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PPUSH
64854: CALL_OW 72
64858: ST_TO_ADDR
// if tmp then
64859: LD_VAR 0 4
64863: IFFALSE 64955
// for j in tmp do
64865: LD_ADDR_VAR 0 3
64869: PUSH
64870: LD_VAR 0 4
64874: PUSH
64875: FOR_IN
64876: IFFALSE 64953
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
64878: LD_VAR 0 3
64882: PPUSH
64883: CALL_OW 312
64887: NOT
64888: PUSH
64889: LD_VAR 0 3
64893: PPUSH
64894: CALL_OW 256
64898: PUSH
64899: LD_INT 250
64901: GREATEREQUAL
64902: AND
64903: IFFALSE 64916
// Connect ( j ) else
64905: LD_VAR 0 3
64909: PPUSH
64910: CALL 21353 0 1
64914: GO 64951
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
64916: LD_VAR 0 3
64920: PPUSH
64921: CALL_OW 256
64925: PUSH
64926: LD_INT 250
64928: LESS
64929: PUSH
64930: LD_VAR 0 3
64934: PPUSH
64935: CALL_OW 312
64939: AND
64940: IFFALSE 64951
// ComUnlink ( j ) ;
64942: LD_VAR 0 3
64946: PPUSH
64947: CALL_OW 136
64951: GO 64875
64953: POP
64954: POP
// end ;
64955: GO 64813
64957: POP
64958: POP
// end ;
64959: LD_VAR 0 1
64963: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
64964: LD_INT 0
64966: PPUSH
64967: PPUSH
64968: PPUSH
64969: PPUSH
64970: PPUSH
// if not mc_bases then
64971: LD_EXP 63
64975: NOT
64976: IFFALSE 64980
// exit ;
64978: GO 65425
// for i = 1 to mc_bases do
64980: LD_ADDR_VAR 0 2
64984: PUSH
64985: DOUBLE
64986: LD_INT 1
64988: DEC
64989: ST_TO_ADDR
64990: LD_EXP 63
64994: PUSH
64995: FOR_TO
64996: IFFALSE 65423
// begin if not mc_produce [ i ] then
64998: LD_EXP 84
65002: PUSH
65003: LD_VAR 0 2
65007: ARRAY
65008: NOT
65009: IFFALSE 65013
// continue ;
65011: GO 64995
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
65013: LD_ADDR_VAR 0 5
65017: PUSH
65018: LD_EXP 63
65022: PUSH
65023: LD_VAR 0 2
65027: ARRAY
65028: PPUSH
65029: LD_INT 30
65031: PUSH
65032: LD_INT 3
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PPUSH
65039: CALL_OW 72
65043: ST_TO_ADDR
// if not fac then
65044: LD_VAR 0 5
65048: NOT
65049: IFFALSE 65053
// continue ;
65051: GO 64995
// for j in fac do
65053: LD_ADDR_VAR 0 3
65057: PUSH
65058: LD_VAR 0 5
65062: PUSH
65063: FOR_IN
65064: IFFALSE 65419
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
65066: LD_VAR 0 3
65070: PPUSH
65071: CALL_OW 461
65075: PUSH
65076: LD_INT 2
65078: NONEQUAL
65079: PUSH
65080: LD_VAR 0 3
65084: PPUSH
65085: LD_INT 15
65087: PPUSH
65088: CALL 21013 0 2
65092: PUSH
65093: LD_INT 4
65095: ARRAY
65096: OR
65097: IFFALSE 65101
// continue ;
65099: GO 65063
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
65101: LD_VAR 0 3
65105: PPUSH
65106: LD_EXP 84
65110: PUSH
65111: LD_VAR 0 2
65115: ARRAY
65116: PUSH
65117: LD_INT 1
65119: ARRAY
65120: PUSH
65121: LD_INT 1
65123: ARRAY
65124: PPUSH
65125: LD_EXP 84
65129: PUSH
65130: LD_VAR 0 2
65134: ARRAY
65135: PUSH
65136: LD_INT 1
65138: ARRAY
65139: PUSH
65140: LD_INT 2
65142: ARRAY
65143: PPUSH
65144: LD_EXP 84
65148: PUSH
65149: LD_VAR 0 2
65153: ARRAY
65154: PUSH
65155: LD_INT 1
65157: ARRAY
65158: PUSH
65159: LD_INT 3
65161: ARRAY
65162: PPUSH
65163: LD_EXP 84
65167: PUSH
65168: LD_VAR 0 2
65172: ARRAY
65173: PUSH
65174: LD_INT 1
65176: ARRAY
65177: PUSH
65178: LD_INT 4
65180: ARRAY
65181: PPUSH
65182: CALL_OW 448
65186: PUSH
65187: LD_VAR 0 3
65191: PPUSH
65192: LD_EXP 84
65196: PUSH
65197: LD_VAR 0 2
65201: ARRAY
65202: PUSH
65203: LD_INT 1
65205: ARRAY
65206: PUSH
65207: LD_INT 1
65209: ARRAY
65210: PUSH
65211: LD_EXP 84
65215: PUSH
65216: LD_VAR 0 2
65220: ARRAY
65221: PUSH
65222: LD_INT 1
65224: ARRAY
65225: PUSH
65226: LD_INT 2
65228: ARRAY
65229: PUSH
65230: LD_EXP 84
65234: PUSH
65235: LD_VAR 0 2
65239: ARRAY
65240: PUSH
65241: LD_INT 1
65243: ARRAY
65244: PUSH
65245: LD_INT 3
65247: ARRAY
65248: PUSH
65249: LD_EXP 84
65253: PUSH
65254: LD_VAR 0 2
65258: ARRAY
65259: PUSH
65260: LD_INT 1
65262: ARRAY
65263: PUSH
65264: LD_INT 4
65266: ARRAY
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: LIST
65272: LIST
65273: PPUSH
65274: CALL 24684 0 2
65278: AND
65279: IFFALSE 65417
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
65281: LD_VAR 0 3
65285: PPUSH
65286: LD_EXP 84
65290: PUSH
65291: LD_VAR 0 2
65295: ARRAY
65296: PUSH
65297: LD_INT 1
65299: ARRAY
65300: PUSH
65301: LD_INT 1
65303: ARRAY
65304: PPUSH
65305: LD_EXP 84
65309: PUSH
65310: LD_VAR 0 2
65314: ARRAY
65315: PUSH
65316: LD_INT 1
65318: ARRAY
65319: PUSH
65320: LD_INT 2
65322: ARRAY
65323: PPUSH
65324: LD_EXP 84
65328: PUSH
65329: LD_VAR 0 2
65333: ARRAY
65334: PUSH
65335: LD_INT 1
65337: ARRAY
65338: PUSH
65339: LD_INT 3
65341: ARRAY
65342: PPUSH
65343: LD_EXP 84
65347: PUSH
65348: LD_VAR 0 2
65352: ARRAY
65353: PUSH
65354: LD_INT 1
65356: ARRAY
65357: PUSH
65358: LD_INT 4
65360: ARRAY
65361: PPUSH
65362: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
65366: LD_ADDR_VAR 0 4
65370: PUSH
65371: LD_EXP 84
65375: PUSH
65376: LD_VAR 0 2
65380: ARRAY
65381: PPUSH
65382: LD_INT 1
65384: PPUSH
65385: CALL_OW 3
65389: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
65390: LD_ADDR_EXP 84
65394: PUSH
65395: LD_EXP 84
65399: PPUSH
65400: LD_VAR 0 2
65404: PPUSH
65405: LD_VAR 0 4
65409: PPUSH
65410: CALL_OW 1
65414: ST_TO_ADDR
// break ;
65415: GO 65419
// end ; end ;
65417: GO 65063
65419: POP
65420: POP
// end ;
65421: GO 64995
65423: POP
65424: POP
// end ;
65425: LD_VAR 0 1
65429: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
65430: LD_INT 0
65432: PPUSH
65433: PPUSH
65434: PPUSH
// if not mc_bases then
65435: LD_EXP 63
65439: NOT
65440: IFFALSE 65444
// exit ;
65442: GO 65533
// for i = 1 to mc_bases do
65444: LD_ADDR_VAR 0 2
65448: PUSH
65449: DOUBLE
65450: LD_INT 1
65452: DEC
65453: ST_TO_ADDR
65454: LD_EXP 63
65458: PUSH
65459: FOR_TO
65460: IFFALSE 65531
// begin if mc_attack [ i ] then
65462: LD_EXP 83
65466: PUSH
65467: LD_VAR 0 2
65471: ARRAY
65472: IFFALSE 65529
// begin tmp := mc_attack [ i ] [ 1 ] ;
65474: LD_ADDR_VAR 0 3
65478: PUSH
65479: LD_EXP 83
65483: PUSH
65484: LD_VAR 0 2
65488: ARRAY
65489: PUSH
65490: LD_INT 1
65492: ARRAY
65493: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
65494: LD_ADDR_EXP 83
65498: PUSH
65499: LD_EXP 83
65503: PPUSH
65504: LD_VAR 0 2
65508: PPUSH
65509: EMPTY
65510: PPUSH
65511: CALL_OW 1
65515: ST_TO_ADDR
// Attack ( tmp ) ;
65516: LD_VAR 0 3
65520: PPUSH
65521: CALL 91580 0 1
// exit ;
65525: POP
65526: POP
65527: GO 65533
// end ; end ;
65529: GO 65459
65531: POP
65532: POP
// end ;
65533: LD_VAR 0 1
65537: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
65538: LD_INT 0
65540: PPUSH
65541: PPUSH
65542: PPUSH
65543: PPUSH
65544: PPUSH
65545: PPUSH
65546: PPUSH
// if not mc_bases then
65547: LD_EXP 63
65551: NOT
65552: IFFALSE 65556
// exit ;
65554: GO 66138
// for i = 1 to mc_bases do
65556: LD_ADDR_VAR 0 2
65560: PUSH
65561: DOUBLE
65562: LD_INT 1
65564: DEC
65565: ST_TO_ADDR
65566: LD_EXP 63
65570: PUSH
65571: FOR_TO
65572: IFFALSE 66136
// begin if not mc_bases [ i ] then
65574: LD_EXP 63
65578: PUSH
65579: LD_VAR 0 2
65583: ARRAY
65584: NOT
65585: IFFALSE 65589
// continue ;
65587: GO 65571
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
65589: LD_ADDR_VAR 0 7
65593: PUSH
65594: LD_EXP 63
65598: PUSH
65599: LD_VAR 0 2
65603: ARRAY
65604: PUSH
65605: LD_INT 1
65607: ARRAY
65608: PPUSH
65609: CALL 15256 0 1
65613: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
65614: LD_ADDR_EXP 86
65618: PUSH
65619: LD_EXP 86
65623: PPUSH
65624: LD_VAR 0 2
65628: PPUSH
65629: LD_EXP 63
65633: PUSH
65634: LD_VAR 0 2
65638: ARRAY
65639: PUSH
65640: LD_INT 1
65642: ARRAY
65643: PPUSH
65644: CALL_OW 255
65648: PPUSH
65649: LD_EXP 88
65653: PUSH
65654: LD_VAR 0 2
65658: ARRAY
65659: PPUSH
65660: CALL 15221 0 2
65664: PPUSH
65665: CALL_OW 1
65669: ST_TO_ADDR
// if not mc_scan [ i ] then
65670: LD_EXP 86
65674: PUSH
65675: LD_VAR 0 2
65679: ARRAY
65680: NOT
65681: IFFALSE 65836
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
65683: LD_ADDR_VAR 0 4
65687: PUSH
65688: LD_EXP 63
65692: PUSH
65693: LD_VAR 0 2
65697: ARRAY
65698: PPUSH
65699: LD_INT 2
65701: PUSH
65702: LD_INT 25
65704: PUSH
65705: LD_INT 5
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: LD_INT 25
65714: PUSH
65715: LD_INT 8
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: LD_INT 25
65724: PUSH
65725: LD_INT 9
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: LIST
65736: LIST
65737: PPUSH
65738: CALL_OW 72
65742: ST_TO_ADDR
// if not tmp then
65743: LD_VAR 0 4
65747: NOT
65748: IFFALSE 65752
// continue ;
65750: GO 65571
// for j in tmp do
65752: LD_ADDR_VAR 0 3
65756: PUSH
65757: LD_VAR 0 4
65761: PUSH
65762: FOR_IN
65763: IFFALSE 65834
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
65765: LD_VAR 0 3
65769: PPUSH
65770: CALL_OW 310
65774: PPUSH
65775: CALL_OW 266
65779: PUSH
65780: LD_INT 5
65782: EQUAL
65783: PUSH
65784: LD_VAR 0 3
65788: PPUSH
65789: CALL_OW 257
65793: PUSH
65794: LD_INT 1
65796: EQUAL
65797: AND
65798: PUSH
65799: LD_VAR 0 3
65803: PPUSH
65804: CALL_OW 459
65808: NOT
65809: AND
65810: PUSH
65811: LD_VAR 0 7
65815: AND
65816: IFFALSE 65832
// ComChangeProfession ( j , class ) ;
65818: LD_VAR 0 3
65822: PPUSH
65823: LD_VAR 0 7
65827: PPUSH
65828: CALL_OW 123
65832: GO 65762
65834: POP
65835: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
65836: LD_EXP 86
65840: PUSH
65841: LD_VAR 0 2
65845: ARRAY
65846: PUSH
65847: LD_EXP 85
65851: PUSH
65852: LD_VAR 0 2
65856: ARRAY
65857: NOT
65858: AND
65859: PUSH
65860: LD_EXP 63
65864: PUSH
65865: LD_VAR 0 2
65869: ARRAY
65870: PPUSH
65871: LD_INT 30
65873: PUSH
65874: LD_INT 32
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PPUSH
65881: CALL_OW 72
65885: NOT
65886: AND
65887: PUSH
65888: LD_EXP 63
65892: PUSH
65893: LD_VAR 0 2
65897: ARRAY
65898: PPUSH
65899: LD_INT 2
65901: PUSH
65902: LD_INT 30
65904: PUSH
65905: LD_INT 4
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 30
65914: PUSH
65915: LD_INT 5
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: LIST
65926: PPUSH
65927: CALL_OW 72
65931: NOT
65932: AND
65933: IFFALSE 66065
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
65935: LD_ADDR_VAR 0 4
65939: PUSH
65940: LD_EXP 63
65944: PUSH
65945: LD_VAR 0 2
65949: ARRAY
65950: PPUSH
65951: LD_INT 2
65953: PUSH
65954: LD_INT 25
65956: PUSH
65957: LD_INT 1
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 25
65966: PUSH
65967: LD_INT 5
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 25
65976: PUSH
65977: LD_INT 8
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 25
65986: PUSH
65987: LD_INT 9
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: PPUSH
66001: CALL_OW 72
66005: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
66006: LD_ADDR_VAR 0 4
66010: PUSH
66011: LD_VAR 0 4
66015: PUSH
66016: LD_VAR 0 4
66020: PPUSH
66021: LD_INT 18
66023: PPUSH
66024: CALL 46981 0 2
66028: DIFF
66029: ST_TO_ADDR
// if tmp then
66030: LD_VAR 0 4
66034: IFFALSE 66065
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
66036: LD_VAR 0 2
66040: PPUSH
66041: LD_VAR 0 4
66045: PPUSH
66046: LD_EXP 88
66050: PUSH
66051: LD_VAR 0 2
66055: ARRAY
66056: PPUSH
66057: CALL 96289 0 3
// exit ;
66061: POP
66062: POP
66063: GO 66138
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
66065: LD_EXP 86
66069: PUSH
66070: LD_VAR 0 2
66074: ARRAY
66075: PUSH
66076: LD_EXP 85
66080: PUSH
66081: LD_VAR 0 2
66085: ARRAY
66086: AND
66087: IFFALSE 66134
// begin tmp := mc_defender [ i ] ;
66089: LD_ADDR_VAR 0 4
66093: PUSH
66094: LD_EXP 85
66098: PUSH
66099: LD_VAR 0 2
66103: ARRAY
66104: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
66105: LD_VAR 0 2
66109: PPUSH
66110: LD_VAR 0 4
66114: PPUSH
66115: LD_EXP 86
66119: PUSH
66120: LD_VAR 0 2
66124: ARRAY
66125: PPUSH
66126: CALL 96850 0 3
// exit ;
66130: POP
66131: POP
66132: GO 66138
// end ; end ;
66134: GO 65571
66136: POP
66137: POP
// end ;
66138: LD_VAR 0 1
66142: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
66143: LD_INT 0
66145: PPUSH
66146: PPUSH
66147: PPUSH
66148: PPUSH
66149: PPUSH
66150: PPUSH
66151: PPUSH
66152: PPUSH
66153: PPUSH
66154: PPUSH
66155: PPUSH
// if not mc_bases then
66156: LD_EXP 63
66160: NOT
66161: IFFALSE 66165
// exit ;
66163: GO 67252
// for i = 1 to mc_bases do
66165: LD_ADDR_VAR 0 2
66169: PUSH
66170: DOUBLE
66171: LD_INT 1
66173: DEC
66174: ST_TO_ADDR
66175: LD_EXP 63
66179: PUSH
66180: FOR_TO
66181: IFFALSE 67250
// begin tmp := mc_lab [ i ] ;
66183: LD_ADDR_VAR 0 6
66187: PUSH
66188: LD_EXP 96
66192: PUSH
66193: LD_VAR 0 2
66197: ARRAY
66198: ST_TO_ADDR
// if not tmp then
66199: LD_VAR 0 6
66203: NOT
66204: IFFALSE 66208
// continue ;
66206: GO 66180
// idle_lab := 0 ;
66208: LD_ADDR_VAR 0 11
66212: PUSH
66213: LD_INT 0
66215: ST_TO_ADDR
// for j in tmp do
66216: LD_ADDR_VAR 0 3
66220: PUSH
66221: LD_VAR 0 6
66225: PUSH
66226: FOR_IN
66227: IFFALSE 67246
// begin researching := false ;
66229: LD_ADDR_VAR 0 10
66233: PUSH
66234: LD_INT 0
66236: ST_TO_ADDR
// side := GetSide ( j ) ;
66237: LD_ADDR_VAR 0 4
66241: PUSH
66242: LD_VAR 0 3
66246: PPUSH
66247: CALL_OW 255
66251: ST_TO_ADDR
// if not mc_tech [ side ] then
66252: LD_EXP 90
66256: PUSH
66257: LD_VAR 0 4
66261: ARRAY
66262: NOT
66263: IFFALSE 66267
// continue ;
66265: GO 66226
// if BuildingStatus ( j ) = bs_idle then
66267: LD_VAR 0 3
66271: PPUSH
66272: CALL_OW 461
66276: PUSH
66277: LD_INT 2
66279: EQUAL
66280: IFFALSE 66468
// begin if idle_lab and UnitsInside ( j ) < 6 then
66282: LD_VAR 0 11
66286: PUSH
66287: LD_VAR 0 3
66291: PPUSH
66292: CALL_OW 313
66296: PUSH
66297: LD_INT 6
66299: LESS
66300: AND
66301: IFFALSE 66372
// begin tmp2 := UnitsInside ( idle_lab ) ;
66303: LD_ADDR_VAR 0 9
66307: PUSH
66308: LD_VAR 0 11
66312: PPUSH
66313: CALL_OW 313
66317: ST_TO_ADDR
// if tmp2 then
66318: LD_VAR 0 9
66322: IFFALSE 66364
// for x in tmp2 do
66324: LD_ADDR_VAR 0 7
66328: PUSH
66329: LD_VAR 0 9
66333: PUSH
66334: FOR_IN
66335: IFFALSE 66362
// begin ComExitBuilding ( x ) ;
66337: LD_VAR 0 7
66341: PPUSH
66342: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
66346: LD_VAR 0 7
66350: PPUSH
66351: LD_VAR 0 3
66355: PPUSH
66356: CALL_OW 180
// end ;
66360: GO 66334
66362: POP
66363: POP
// idle_lab := 0 ;
66364: LD_ADDR_VAR 0 11
66368: PUSH
66369: LD_INT 0
66371: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
66372: LD_ADDR_VAR 0 5
66376: PUSH
66377: LD_EXP 90
66381: PUSH
66382: LD_VAR 0 4
66386: ARRAY
66387: PUSH
66388: FOR_IN
66389: IFFALSE 66449
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
66391: LD_VAR 0 3
66395: PPUSH
66396: LD_VAR 0 5
66400: PPUSH
66401: CALL_OW 430
66405: PUSH
66406: LD_VAR 0 4
66410: PPUSH
66411: LD_VAR 0 5
66415: PPUSH
66416: CALL 14326 0 2
66420: AND
66421: IFFALSE 66447
// begin researching := true ;
66423: LD_ADDR_VAR 0 10
66427: PUSH
66428: LD_INT 1
66430: ST_TO_ADDR
// ComResearch ( j , t ) ;
66431: LD_VAR 0 3
66435: PPUSH
66436: LD_VAR 0 5
66440: PPUSH
66441: CALL_OW 124
// break ;
66445: GO 66449
// end ;
66447: GO 66388
66449: POP
66450: POP
// if not researching then
66451: LD_VAR 0 10
66455: NOT
66456: IFFALSE 66468
// idle_lab := j ;
66458: LD_ADDR_VAR 0 11
66462: PUSH
66463: LD_VAR 0 3
66467: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
66468: LD_VAR 0 3
66472: PPUSH
66473: CALL_OW 461
66477: PUSH
66478: LD_INT 10
66480: EQUAL
66481: IFFALSE 67069
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
66483: LD_EXP 92
66487: PUSH
66488: LD_VAR 0 2
66492: ARRAY
66493: NOT
66494: PUSH
66495: LD_EXP 93
66499: PUSH
66500: LD_VAR 0 2
66504: ARRAY
66505: NOT
66506: AND
66507: PUSH
66508: LD_EXP 90
66512: PUSH
66513: LD_VAR 0 4
66517: ARRAY
66518: PUSH
66519: LD_INT 1
66521: GREATER
66522: AND
66523: IFFALSE 66654
// begin ComCancel ( j ) ;
66525: LD_VAR 0 3
66529: PPUSH
66530: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
66534: LD_ADDR_EXP 90
66538: PUSH
66539: LD_EXP 90
66543: PPUSH
66544: LD_VAR 0 4
66548: PPUSH
66549: LD_EXP 90
66553: PUSH
66554: LD_VAR 0 4
66558: ARRAY
66559: PPUSH
66560: LD_EXP 90
66564: PUSH
66565: LD_VAR 0 4
66569: ARRAY
66570: PUSH
66571: LD_INT 1
66573: MINUS
66574: PPUSH
66575: LD_EXP 90
66579: PUSH
66580: LD_VAR 0 4
66584: ARRAY
66585: PPUSH
66586: LD_INT 0
66588: PPUSH
66589: CALL 17838 0 4
66593: PPUSH
66594: CALL_OW 1
66598: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
66599: LD_ADDR_EXP 90
66603: PUSH
66604: LD_EXP 90
66608: PPUSH
66609: LD_VAR 0 4
66613: PPUSH
66614: LD_EXP 90
66618: PUSH
66619: LD_VAR 0 4
66623: ARRAY
66624: PPUSH
66625: LD_EXP 90
66629: PUSH
66630: LD_VAR 0 4
66634: ARRAY
66635: PPUSH
66636: LD_INT 1
66638: PPUSH
66639: LD_INT 0
66641: PPUSH
66642: CALL 17838 0 4
66646: PPUSH
66647: CALL_OW 1
66651: ST_TO_ADDR
// continue ;
66652: GO 66226
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
66654: LD_EXP 92
66658: PUSH
66659: LD_VAR 0 2
66663: ARRAY
66664: PUSH
66665: LD_EXP 93
66669: PUSH
66670: LD_VAR 0 2
66674: ARRAY
66675: NOT
66676: AND
66677: IFFALSE 66804
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
66679: LD_ADDR_EXP 93
66683: PUSH
66684: LD_EXP 93
66688: PPUSH
66689: LD_VAR 0 2
66693: PUSH
66694: LD_EXP 93
66698: PUSH
66699: LD_VAR 0 2
66703: ARRAY
66704: PUSH
66705: LD_INT 1
66707: PLUS
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: PPUSH
66713: LD_EXP 92
66717: PUSH
66718: LD_VAR 0 2
66722: ARRAY
66723: PUSH
66724: LD_INT 1
66726: ARRAY
66727: PPUSH
66728: CALL 18420 0 3
66732: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
66733: LD_EXP 92
66737: PUSH
66738: LD_VAR 0 2
66742: ARRAY
66743: PUSH
66744: LD_INT 1
66746: ARRAY
66747: PPUSH
66748: LD_INT 112
66750: PPUSH
66751: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
66755: LD_ADDR_VAR 0 9
66759: PUSH
66760: LD_EXP 92
66764: PUSH
66765: LD_VAR 0 2
66769: ARRAY
66770: PPUSH
66771: LD_INT 1
66773: PPUSH
66774: CALL_OW 3
66778: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
66779: LD_ADDR_EXP 92
66783: PUSH
66784: LD_EXP 92
66788: PPUSH
66789: LD_VAR 0 2
66793: PPUSH
66794: LD_VAR 0 9
66798: PPUSH
66799: CALL_OW 1
66803: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
66804: LD_EXP 92
66808: PUSH
66809: LD_VAR 0 2
66813: ARRAY
66814: PUSH
66815: LD_EXP 93
66819: PUSH
66820: LD_VAR 0 2
66824: ARRAY
66825: AND
66826: PUSH
66827: LD_EXP 93
66831: PUSH
66832: LD_VAR 0 2
66836: ARRAY
66837: PUSH
66838: LD_INT 1
66840: ARRAY
66841: PPUSH
66842: CALL_OW 310
66846: NOT
66847: AND
66848: PUSH
66849: LD_VAR 0 3
66853: PPUSH
66854: CALL_OW 313
66858: PUSH
66859: LD_INT 6
66861: EQUAL
66862: AND
66863: IFFALSE 66919
// begin tmp2 := UnitsInside ( j ) ;
66865: LD_ADDR_VAR 0 9
66869: PUSH
66870: LD_VAR 0 3
66874: PPUSH
66875: CALL_OW 313
66879: ST_TO_ADDR
// if tmp2 = 6 then
66880: LD_VAR 0 9
66884: PUSH
66885: LD_INT 6
66887: EQUAL
66888: IFFALSE 66919
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
66890: LD_VAR 0 9
66894: PUSH
66895: LD_INT 1
66897: ARRAY
66898: PPUSH
66899: LD_INT 112
66901: PPUSH
66902: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
66906: LD_VAR 0 9
66910: PUSH
66911: LD_INT 1
66913: ARRAY
66914: PPUSH
66915: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
66919: LD_EXP 93
66923: PUSH
66924: LD_VAR 0 2
66928: ARRAY
66929: PUSH
66930: LD_EXP 93
66934: PUSH
66935: LD_VAR 0 2
66939: ARRAY
66940: PUSH
66941: LD_INT 1
66943: ARRAY
66944: PPUSH
66945: CALL_OW 314
66949: NOT
66950: AND
66951: PUSH
66952: LD_EXP 93
66956: PUSH
66957: LD_VAR 0 2
66961: ARRAY
66962: PUSH
66963: LD_INT 1
66965: ARRAY
66966: PPUSH
66967: CALL_OW 310
66971: NOT
66972: AND
66973: IFFALSE 66999
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
66975: LD_EXP 93
66979: PUSH
66980: LD_VAR 0 2
66984: ARRAY
66985: PUSH
66986: LD_INT 1
66988: ARRAY
66989: PPUSH
66990: LD_VAR 0 3
66994: PPUSH
66995: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
66999: LD_EXP 93
67003: PUSH
67004: LD_VAR 0 2
67008: ARRAY
67009: PUSH
67010: LD_INT 1
67012: ARRAY
67013: PPUSH
67014: CALL_OW 310
67018: PUSH
67019: LD_EXP 93
67023: PUSH
67024: LD_VAR 0 2
67028: ARRAY
67029: PUSH
67030: LD_INT 1
67032: ARRAY
67033: PPUSH
67034: CALL_OW 310
67038: PPUSH
67039: CALL_OW 461
67043: PUSH
67044: LD_INT 3
67046: NONEQUAL
67047: AND
67048: IFFALSE 67069
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
67050: LD_EXP 93
67054: PUSH
67055: LD_VAR 0 2
67059: ARRAY
67060: PUSH
67061: LD_INT 1
67063: ARRAY
67064: PPUSH
67065: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
67069: LD_VAR 0 3
67073: PPUSH
67074: CALL_OW 461
67078: PUSH
67079: LD_INT 6
67081: EQUAL
67082: PUSH
67083: LD_VAR 0 6
67087: PUSH
67088: LD_INT 1
67090: GREATER
67091: AND
67092: IFFALSE 67244
// begin sci := [ ] ;
67094: LD_ADDR_VAR 0 8
67098: PUSH
67099: EMPTY
67100: ST_TO_ADDR
// for x in ( tmp diff j ) do
67101: LD_ADDR_VAR 0 7
67105: PUSH
67106: LD_VAR 0 6
67110: PUSH
67111: LD_VAR 0 3
67115: DIFF
67116: PUSH
67117: FOR_IN
67118: IFFALSE 67170
// begin if sci = 6 then
67120: LD_VAR 0 8
67124: PUSH
67125: LD_INT 6
67127: EQUAL
67128: IFFALSE 67132
// break ;
67130: GO 67170
// if BuildingStatus ( x ) = bs_idle then
67132: LD_VAR 0 7
67136: PPUSH
67137: CALL_OW 461
67141: PUSH
67142: LD_INT 2
67144: EQUAL
67145: IFFALSE 67168
// sci := sci ^ UnitsInside ( x ) ;
67147: LD_ADDR_VAR 0 8
67151: PUSH
67152: LD_VAR 0 8
67156: PUSH
67157: LD_VAR 0 7
67161: PPUSH
67162: CALL_OW 313
67166: ADD
67167: ST_TO_ADDR
// end ;
67168: GO 67117
67170: POP
67171: POP
// if not sci then
67172: LD_VAR 0 8
67176: NOT
67177: IFFALSE 67181
// continue ;
67179: GO 66226
// for x in sci do
67181: LD_ADDR_VAR 0 7
67185: PUSH
67186: LD_VAR 0 8
67190: PUSH
67191: FOR_IN
67192: IFFALSE 67242
// if IsInUnit ( x ) and not HasTask ( x ) then
67194: LD_VAR 0 7
67198: PPUSH
67199: CALL_OW 310
67203: PUSH
67204: LD_VAR 0 7
67208: PPUSH
67209: CALL_OW 314
67213: NOT
67214: AND
67215: IFFALSE 67240
// begin ComExitBuilding ( x ) ;
67217: LD_VAR 0 7
67221: PPUSH
67222: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
67226: LD_VAR 0 7
67230: PPUSH
67231: LD_VAR 0 3
67235: PPUSH
67236: CALL_OW 180
// end ;
67240: GO 67191
67242: POP
67243: POP
// end ; end ;
67244: GO 66226
67246: POP
67247: POP
// end ;
67248: GO 66180
67250: POP
67251: POP
// end ;
67252: LD_VAR 0 1
67256: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
67257: LD_INT 0
67259: PPUSH
67260: PPUSH
// if not mc_bases then
67261: LD_EXP 63
67265: NOT
67266: IFFALSE 67270
// exit ;
67268: GO 67351
// for i = 1 to mc_bases do
67270: LD_ADDR_VAR 0 2
67274: PUSH
67275: DOUBLE
67276: LD_INT 1
67278: DEC
67279: ST_TO_ADDR
67280: LD_EXP 63
67284: PUSH
67285: FOR_TO
67286: IFFALSE 67349
// if mc_mines [ i ] and mc_miners [ i ] then
67288: LD_EXP 76
67292: PUSH
67293: LD_VAR 0 2
67297: ARRAY
67298: PUSH
67299: LD_EXP 77
67303: PUSH
67304: LD_VAR 0 2
67308: ARRAY
67309: AND
67310: IFFALSE 67347
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
67312: LD_EXP 77
67316: PUSH
67317: LD_VAR 0 2
67321: ARRAY
67322: PUSH
67323: LD_INT 1
67325: ARRAY
67326: PPUSH
67327: CALL_OW 255
67331: PPUSH
67332: LD_EXP 76
67336: PUSH
67337: LD_VAR 0 2
67341: ARRAY
67342: PPUSH
67343: CALL 15409 0 2
67347: GO 67285
67349: POP
67350: POP
// end ;
67351: LD_VAR 0 1
67355: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
67356: LD_INT 0
67358: PPUSH
67359: PPUSH
67360: PPUSH
67361: PPUSH
67362: PPUSH
67363: PPUSH
67364: PPUSH
67365: PPUSH
// if not mc_bases or not mc_parking then
67366: LD_EXP 63
67370: NOT
67371: PUSH
67372: LD_EXP 87
67376: NOT
67377: OR
67378: IFFALSE 67382
// exit ;
67380: GO 68081
// for i = 1 to mc_bases do
67382: LD_ADDR_VAR 0 2
67386: PUSH
67387: DOUBLE
67388: LD_INT 1
67390: DEC
67391: ST_TO_ADDR
67392: LD_EXP 63
67396: PUSH
67397: FOR_TO
67398: IFFALSE 68079
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
67400: LD_EXP 63
67404: PUSH
67405: LD_VAR 0 2
67409: ARRAY
67410: NOT
67411: PUSH
67412: LD_EXP 87
67416: PUSH
67417: LD_VAR 0 2
67421: ARRAY
67422: NOT
67423: OR
67424: IFFALSE 67428
// continue ;
67426: GO 67397
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
67428: LD_ADDR_VAR 0 5
67432: PUSH
67433: LD_EXP 63
67437: PUSH
67438: LD_VAR 0 2
67442: ARRAY
67443: PUSH
67444: LD_INT 1
67446: ARRAY
67447: PPUSH
67448: CALL_OW 255
67452: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
67453: LD_ADDR_VAR 0 6
67457: PUSH
67458: LD_EXP 63
67462: PUSH
67463: LD_VAR 0 2
67467: ARRAY
67468: PPUSH
67469: LD_INT 30
67471: PUSH
67472: LD_INT 3
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PPUSH
67479: CALL_OW 72
67483: ST_TO_ADDR
// if not fac then
67484: LD_VAR 0 6
67488: NOT
67489: IFFALSE 67540
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
67491: LD_ADDR_VAR 0 6
67495: PUSH
67496: LD_EXP 63
67500: PUSH
67501: LD_VAR 0 2
67505: ARRAY
67506: PPUSH
67507: LD_INT 2
67509: PUSH
67510: LD_INT 30
67512: PUSH
67513: LD_INT 0
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 30
67522: PUSH
67523: LD_INT 1
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: LIST
67534: PPUSH
67535: CALL_OW 72
67539: ST_TO_ADDR
// if not fac then
67540: LD_VAR 0 6
67544: NOT
67545: IFFALSE 67549
// continue ;
67547: GO 67397
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
67549: LD_ADDR_VAR 0 7
67553: PUSH
67554: LD_EXP 87
67558: PUSH
67559: LD_VAR 0 2
67563: ARRAY
67564: PPUSH
67565: LD_INT 22
67567: PUSH
67568: LD_VAR 0 5
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PUSH
67577: LD_INT 21
67579: PUSH
67580: LD_INT 2
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: PUSH
67587: LD_INT 3
67589: PUSH
67590: LD_INT 24
67592: PUSH
67593: LD_INT 1000
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: LIST
67608: PPUSH
67609: CALL_OW 70
67613: ST_TO_ADDR
// for j in fac do
67614: LD_ADDR_VAR 0 3
67618: PUSH
67619: LD_VAR 0 6
67623: PUSH
67624: FOR_IN
67625: IFFALSE 67706
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
67627: LD_ADDR_VAR 0 7
67631: PUSH
67632: LD_VAR 0 7
67636: PUSH
67637: LD_INT 22
67639: PUSH
67640: LD_VAR 0 5
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: PUSH
67649: LD_INT 91
67651: PUSH
67652: LD_VAR 0 3
67656: PUSH
67657: LD_INT 15
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: LIST
67664: PUSH
67665: LD_INT 21
67667: PUSH
67668: LD_INT 2
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PUSH
67675: LD_INT 3
67677: PUSH
67678: LD_INT 24
67680: PUSH
67681: LD_INT 1000
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PUSH
67692: EMPTY
67693: LIST
67694: LIST
67695: LIST
67696: LIST
67697: PPUSH
67698: CALL_OW 69
67702: UNION
67703: ST_TO_ADDR
67704: GO 67624
67706: POP
67707: POP
// if not vehs then
67708: LD_VAR 0 7
67712: NOT
67713: IFFALSE 67739
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
67715: LD_ADDR_EXP 75
67719: PUSH
67720: LD_EXP 75
67724: PPUSH
67725: LD_VAR 0 2
67729: PPUSH
67730: EMPTY
67731: PPUSH
67732: CALL_OW 1
67736: ST_TO_ADDR
// continue ;
67737: GO 67397
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
67739: LD_ADDR_VAR 0 8
67743: PUSH
67744: LD_EXP 63
67748: PUSH
67749: LD_VAR 0 2
67753: ARRAY
67754: PPUSH
67755: LD_INT 30
67757: PUSH
67758: LD_INT 3
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PPUSH
67765: CALL_OW 72
67769: ST_TO_ADDR
// if tmp then
67770: LD_VAR 0 8
67774: IFFALSE 67877
// begin for j in tmp do
67776: LD_ADDR_VAR 0 3
67780: PUSH
67781: LD_VAR 0 8
67785: PUSH
67786: FOR_IN
67787: IFFALSE 67875
// for k in UnitsInside ( j ) do
67789: LD_ADDR_VAR 0 4
67793: PUSH
67794: LD_VAR 0 3
67798: PPUSH
67799: CALL_OW 313
67803: PUSH
67804: FOR_IN
67805: IFFALSE 67871
// if k then
67807: LD_VAR 0 4
67811: IFFALSE 67869
// if not k in mc_repair_vehicle [ i ] then
67813: LD_VAR 0 4
67817: PUSH
67818: LD_EXP 75
67822: PUSH
67823: LD_VAR 0 2
67827: ARRAY
67828: IN
67829: NOT
67830: IFFALSE 67869
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
67832: LD_ADDR_EXP 75
67836: PUSH
67837: LD_EXP 75
67841: PPUSH
67842: LD_VAR 0 2
67846: PPUSH
67847: LD_EXP 75
67851: PUSH
67852: LD_VAR 0 2
67856: ARRAY
67857: PUSH
67858: LD_VAR 0 4
67862: UNION
67863: PPUSH
67864: CALL_OW 1
67868: ST_TO_ADDR
67869: GO 67804
67871: POP
67872: POP
67873: GO 67786
67875: POP
67876: POP
// end ; if not mc_repair_vehicle [ i ] then
67877: LD_EXP 75
67881: PUSH
67882: LD_VAR 0 2
67886: ARRAY
67887: NOT
67888: IFFALSE 67892
// continue ;
67890: GO 67397
// for j in mc_repair_vehicle [ i ] do
67892: LD_ADDR_VAR 0 3
67896: PUSH
67897: LD_EXP 75
67901: PUSH
67902: LD_VAR 0 2
67906: ARRAY
67907: PUSH
67908: FOR_IN
67909: IFFALSE 68075
// begin if GetClass ( j ) <> 3 then
67911: LD_VAR 0 3
67915: PPUSH
67916: CALL_OW 257
67920: PUSH
67921: LD_INT 3
67923: NONEQUAL
67924: IFFALSE 67965
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
67926: LD_ADDR_EXP 75
67930: PUSH
67931: LD_EXP 75
67935: PPUSH
67936: LD_VAR 0 2
67940: PPUSH
67941: LD_EXP 75
67945: PUSH
67946: LD_VAR 0 2
67950: ARRAY
67951: PUSH
67952: LD_VAR 0 3
67956: DIFF
67957: PPUSH
67958: CALL_OW 1
67962: ST_TO_ADDR
// continue ;
67963: GO 67908
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
67965: LD_VAR 0 3
67969: PPUSH
67970: CALL_OW 311
67974: NOT
67975: PUSH
67976: LD_VAR 0 3
67980: PUSH
67981: LD_EXP 66
67985: PUSH
67986: LD_VAR 0 2
67990: ARRAY
67991: PUSH
67992: LD_INT 1
67994: ARRAY
67995: IN
67996: NOT
67997: AND
67998: PUSH
67999: LD_VAR 0 3
68003: PUSH
68004: LD_EXP 66
68008: PUSH
68009: LD_VAR 0 2
68013: ARRAY
68014: PUSH
68015: LD_INT 2
68017: ARRAY
68018: IN
68019: NOT
68020: AND
68021: IFFALSE 68073
// begin if IsInUnit ( j ) then
68023: LD_VAR 0 3
68027: PPUSH
68028: CALL_OW 310
68032: IFFALSE 68043
// ComExitBuilding ( j ) ;
68034: LD_VAR 0 3
68038: PPUSH
68039: CALL_OW 122
// if not HasTask ( j ) then
68043: LD_VAR 0 3
68047: PPUSH
68048: CALL_OW 314
68052: NOT
68053: IFFALSE 68073
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
68055: LD_VAR 0 3
68059: PPUSH
68060: LD_VAR 0 7
68064: PUSH
68065: LD_INT 1
68067: ARRAY
68068: PPUSH
68069: CALL_OW 189
// end ; end ;
68073: GO 67908
68075: POP
68076: POP
// end ;
68077: GO 67397
68079: POP
68080: POP
// end ;
68081: LD_VAR 0 1
68085: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
68086: LD_INT 0
68088: PPUSH
68089: PPUSH
68090: PPUSH
68091: PPUSH
68092: PPUSH
68093: PPUSH
68094: PPUSH
68095: PPUSH
68096: PPUSH
68097: PPUSH
68098: PPUSH
// if not mc_bases then
68099: LD_EXP 63
68103: NOT
68104: IFFALSE 68108
// exit ;
68106: GO 68910
// for i = 1 to mc_bases do
68108: LD_ADDR_VAR 0 2
68112: PUSH
68113: DOUBLE
68114: LD_INT 1
68116: DEC
68117: ST_TO_ADDR
68118: LD_EXP 63
68122: PUSH
68123: FOR_TO
68124: IFFALSE 68908
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
68126: LD_EXP 91
68130: PUSH
68131: LD_VAR 0 2
68135: ARRAY
68136: NOT
68137: PUSH
68138: LD_EXP 66
68142: PUSH
68143: LD_VAR 0 2
68147: ARRAY
68148: PUSH
68149: LD_INT 1
68151: ARRAY
68152: OR
68153: PUSH
68154: LD_EXP 66
68158: PUSH
68159: LD_VAR 0 2
68163: ARRAY
68164: PUSH
68165: LD_INT 2
68167: ARRAY
68168: OR
68169: PUSH
68170: LD_EXP 89
68174: PUSH
68175: LD_VAR 0 2
68179: ARRAY
68180: PPUSH
68181: LD_INT 1
68183: PPUSH
68184: CALL_OW 325
68188: NOT
68189: OR
68190: PUSH
68191: LD_EXP 86
68195: PUSH
68196: LD_VAR 0 2
68200: ARRAY
68201: OR
68202: IFFALSE 68206
// continue ;
68204: GO 68123
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
68206: LD_ADDR_VAR 0 8
68210: PUSH
68211: LD_EXP 63
68215: PUSH
68216: LD_VAR 0 2
68220: ARRAY
68221: PPUSH
68222: LD_INT 25
68224: PUSH
68225: LD_INT 4
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: PUSH
68232: LD_INT 50
68234: PUSH
68235: EMPTY
68236: LIST
68237: PUSH
68238: LD_INT 3
68240: PUSH
68241: LD_INT 60
68243: PUSH
68244: EMPTY
68245: LIST
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: LIST
68255: PPUSH
68256: CALL_OW 72
68260: PUSH
68261: LD_EXP 67
68265: PUSH
68266: LD_VAR 0 2
68270: ARRAY
68271: DIFF
68272: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
68273: LD_ADDR_VAR 0 9
68277: PUSH
68278: LD_EXP 63
68282: PUSH
68283: LD_VAR 0 2
68287: ARRAY
68288: PPUSH
68289: LD_INT 2
68291: PUSH
68292: LD_INT 30
68294: PUSH
68295: LD_INT 0
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 30
68304: PUSH
68305: LD_INT 1
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: LIST
68316: PPUSH
68317: CALL_OW 72
68321: ST_TO_ADDR
// if not tmp or not dep then
68322: LD_VAR 0 8
68326: NOT
68327: PUSH
68328: LD_VAR 0 9
68332: NOT
68333: OR
68334: IFFALSE 68338
// continue ;
68336: GO 68123
// side := GetSide ( tmp [ 1 ] ) ;
68338: LD_ADDR_VAR 0 11
68342: PUSH
68343: LD_VAR 0 8
68347: PUSH
68348: LD_INT 1
68350: ARRAY
68351: PPUSH
68352: CALL_OW 255
68356: ST_TO_ADDR
// dep := dep [ 1 ] ;
68357: LD_ADDR_VAR 0 9
68361: PUSH
68362: LD_VAR 0 9
68366: PUSH
68367: LD_INT 1
68369: ARRAY
68370: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
68371: LD_ADDR_VAR 0 7
68375: PUSH
68376: LD_EXP 91
68380: PUSH
68381: LD_VAR 0 2
68385: ARRAY
68386: PPUSH
68387: LD_INT 22
68389: PUSH
68390: LD_INT 0
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 25
68399: PUSH
68400: LD_INT 12
68402: PUSH
68403: EMPTY
68404: LIST
68405: LIST
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: PPUSH
68411: CALL_OW 70
68415: PUSH
68416: LD_INT 22
68418: PUSH
68419: LD_INT 0
68421: PUSH
68422: EMPTY
68423: LIST
68424: LIST
68425: PUSH
68426: LD_INT 25
68428: PUSH
68429: LD_INT 12
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PUSH
68436: LD_INT 91
68438: PUSH
68439: LD_VAR 0 9
68443: PUSH
68444: LD_INT 20
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: LIST
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: LIST
68456: PPUSH
68457: CALL_OW 69
68461: UNION
68462: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
68463: LD_ADDR_VAR 0 10
68467: PUSH
68468: LD_EXP 91
68472: PUSH
68473: LD_VAR 0 2
68477: ARRAY
68478: PPUSH
68479: LD_INT 81
68481: PUSH
68482: LD_VAR 0 11
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: PPUSH
68491: CALL_OW 70
68495: ST_TO_ADDR
// if not apes or danger_at_area then
68496: LD_VAR 0 7
68500: NOT
68501: PUSH
68502: LD_VAR 0 10
68506: OR
68507: IFFALSE 68557
// begin if mc_taming [ i ] then
68509: LD_EXP 94
68513: PUSH
68514: LD_VAR 0 2
68518: ARRAY
68519: IFFALSE 68555
// begin MC_Reset ( i , 121 ) ;
68521: LD_VAR 0 2
68525: PPUSH
68526: LD_INT 121
68528: PPUSH
68529: CALL 54008 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
68533: LD_ADDR_EXP 94
68537: PUSH
68538: LD_EXP 94
68542: PPUSH
68543: LD_VAR 0 2
68547: PPUSH
68548: EMPTY
68549: PPUSH
68550: CALL_OW 1
68554: ST_TO_ADDR
// end ; continue ;
68555: GO 68123
// end ; for j in tmp do
68557: LD_ADDR_VAR 0 3
68561: PUSH
68562: LD_VAR 0 8
68566: PUSH
68567: FOR_IN
68568: IFFALSE 68904
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
68570: LD_VAR 0 3
68574: PUSH
68575: LD_EXP 94
68579: PUSH
68580: LD_VAR 0 2
68584: ARRAY
68585: IN
68586: NOT
68587: PUSH
68588: LD_EXP 94
68592: PUSH
68593: LD_VAR 0 2
68597: ARRAY
68598: PUSH
68599: LD_INT 3
68601: LESS
68602: AND
68603: IFFALSE 68661
// begin SetTag ( j , 121 ) ;
68605: LD_VAR 0 3
68609: PPUSH
68610: LD_INT 121
68612: PPUSH
68613: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
68617: LD_ADDR_EXP 94
68621: PUSH
68622: LD_EXP 94
68626: PPUSH
68627: LD_VAR 0 2
68631: PUSH
68632: LD_EXP 94
68636: PUSH
68637: LD_VAR 0 2
68641: ARRAY
68642: PUSH
68643: LD_INT 1
68645: PLUS
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: PPUSH
68651: LD_VAR 0 3
68655: PPUSH
68656: CALL 18420 0 3
68660: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
68661: LD_VAR 0 3
68665: PUSH
68666: LD_EXP 94
68670: PUSH
68671: LD_VAR 0 2
68675: ARRAY
68676: IN
68677: IFFALSE 68902
// begin if GetClass ( j ) <> 4 then
68679: LD_VAR 0 3
68683: PPUSH
68684: CALL_OW 257
68688: PUSH
68689: LD_INT 4
68691: NONEQUAL
68692: IFFALSE 68745
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
68694: LD_ADDR_EXP 94
68698: PUSH
68699: LD_EXP 94
68703: PPUSH
68704: LD_VAR 0 2
68708: PPUSH
68709: LD_EXP 94
68713: PUSH
68714: LD_VAR 0 2
68718: ARRAY
68719: PUSH
68720: LD_VAR 0 3
68724: DIFF
68725: PPUSH
68726: CALL_OW 1
68730: ST_TO_ADDR
// SetTag ( j , 0 ) ;
68731: LD_VAR 0 3
68735: PPUSH
68736: LD_INT 0
68738: PPUSH
68739: CALL_OW 109
// continue ;
68743: GO 68567
// end ; if IsInUnit ( j ) then
68745: LD_VAR 0 3
68749: PPUSH
68750: CALL_OW 310
68754: IFFALSE 68765
// ComExitBuilding ( j ) ;
68756: LD_VAR 0 3
68760: PPUSH
68761: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
68765: LD_ADDR_VAR 0 6
68769: PUSH
68770: LD_VAR 0 7
68774: PPUSH
68775: LD_VAR 0 3
68779: PPUSH
68780: CALL_OW 74
68784: ST_TO_ADDR
// if not ape then
68785: LD_VAR 0 6
68789: NOT
68790: IFFALSE 68794
// break ;
68792: GO 68904
// x := GetX ( ape ) ;
68794: LD_ADDR_VAR 0 4
68798: PUSH
68799: LD_VAR 0 6
68803: PPUSH
68804: CALL_OW 250
68808: ST_TO_ADDR
// y := GetY ( ape ) ;
68809: LD_ADDR_VAR 0 5
68813: PUSH
68814: LD_VAR 0 6
68818: PPUSH
68819: CALL_OW 251
68823: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
68824: LD_VAR 0 4
68828: PPUSH
68829: LD_VAR 0 5
68833: PPUSH
68834: CALL_OW 488
68838: NOT
68839: PUSH
68840: LD_VAR 0 11
68844: PPUSH
68845: LD_VAR 0 4
68849: PPUSH
68850: LD_VAR 0 5
68854: PPUSH
68855: LD_INT 20
68857: PPUSH
68858: CALL 19316 0 4
68862: PUSH
68863: LD_INT 4
68865: ARRAY
68866: OR
68867: IFFALSE 68871
// break ;
68869: GO 68904
// if not HasTask ( j ) then
68871: LD_VAR 0 3
68875: PPUSH
68876: CALL_OW 314
68880: NOT
68881: IFFALSE 68902
// ComTameXY ( j , x , y ) ;
68883: LD_VAR 0 3
68887: PPUSH
68888: LD_VAR 0 4
68892: PPUSH
68893: LD_VAR 0 5
68897: PPUSH
68898: CALL_OW 131
// end ; end ;
68902: GO 68567
68904: POP
68905: POP
// end ;
68906: GO 68123
68908: POP
68909: POP
// end ;
68910: LD_VAR 0 1
68914: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
68915: LD_INT 0
68917: PPUSH
68918: PPUSH
68919: PPUSH
68920: PPUSH
68921: PPUSH
68922: PPUSH
68923: PPUSH
68924: PPUSH
// if not mc_bases then
68925: LD_EXP 63
68929: NOT
68930: IFFALSE 68934
// exit ;
68932: GO 69560
// for i = 1 to mc_bases do
68934: LD_ADDR_VAR 0 2
68938: PUSH
68939: DOUBLE
68940: LD_INT 1
68942: DEC
68943: ST_TO_ADDR
68944: LD_EXP 63
68948: PUSH
68949: FOR_TO
68950: IFFALSE 69558
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
68952: LD_EXP 92
68956: PUSH
68957: LD_VAR 0 2
68961: ARRAY
68962: NOT
68963: PUSH
68964: LD_EXP 92
68968: PUSH
68969: LD_VAR 0 2
68973: ARRAY
68974: PPUSH
68975: LD_INT 25
68977: PUSH
68978: LD_INT 12
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: PPUSH
68985: CALL_OW 72
68989: NOT
68990: OR
68991: IFFALSE 68995
// continue ;
68993: GO 68949
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
68995: LD_ADDR_VAR 0 5
68999: PUSH
69000: LD_EXP 92
69004: PUSH
69005: LD_VAR 0 2
69009: ARRAY
69010: PUSH
69011: LD_INT 1
69013: ARRAY
69014: PPUSH
69015: CALL_OW 255
69019: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
69020: LD_VAR 0 5
69024: PPUSH
69025: LD_INT 2
69027: PPUSH
69028: CALL_OW 325
69032: IFFALSE 69285
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
69034: LD_ADDR_VAR 0 4
69038: PUSH
69039: LD_EXP 92
69043: PUSH
69044: LD_VAR 0 2
69048: ARRAY
69049: PPUSH
69050: LD_INT 25
69052: PUSH
69053: LD_INT 16
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PPUSH
69060: CALL_OW 72
69064: ST_TO_ADDR
// if tmp < 6 then
69065: LD_VAR 0 4
69069: PUSH
69070: LD_INT 6
69072: LESS
69073: IFFALSE 69285
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
69075: LD_ADDR_VAR 0 6
69079: PUSH
69080: LD_EXP 63
69084: PUSH
69085: LD_VAR 0 2
69089: ARRAY
69090: PPUSH
69091: LD_INT 2
69093: PUSH
69094: LD_INT 30
69096: PUSH
69097: LD_INT 0
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: PUSH
69104: LD_INT 30
69106: PUSH
69107: LD_INT 1
69109: PUSH
69110: EMPTY
69111: LIST
69112: LIST
69113: PUSH
69114: EMPTY
69115: LIST
69116: LIST
69117: LIST
69118: PPUSH
69119: CALL_OW 72
69123: ST_TO_ADDR
// if depot then
69124: LD_VAR 0 6
69128: IFFALSE 69285
// begin selected := 0 ;
69130: LD_ADDR_VAR 0 7
69134: PUSH
69135: LD_INT 0
69137: ST_TO_ADDR
// for j in depot do
69138: LD_ADDR_VAR 0 3
69142: PUSH
69143: LD_VAR 0 6
69147: PUSH
69148: FOR_IN
69149: IFFALSE 69180
// begin if UnitsInside ( j ) < 6 then
69151: LD_VAR 0 3
69155: PPUSH
69156: CALL_OW 313
69160: PUSH
69161: LD_INT 6
69163: LESS
69164: IFFALSE 69178
// begin selected := j ;
69166: LD_ADDR_VAR 0 7
69170: PUSH
69171: LD_VAR 0 3
69175: ST_TO_ADDR
// break ;
69176: GO 69180
// end ; end ;
69178: GO 69148
69180: POP
69181: POP
// if selected then
69182: LD_VAR 0 7
69186: IFFALSE 69285
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
69188: LD_ADDR_VAR 0 3
69192: PUSH
69193: LD_EXP 92
69197: PUSH
69198: LD_VAR 0 2
69202: ARRAY
69203: PPUSH
69204: LD_INT 25
69206: PUSH
69207: LD_INT 12
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: PPUSH
69214: CALL_OW 72
69218: PUSH
69219: FOR_IN
69220: IFFALSE 69283
// if not HasTask ( j ) then
69222: LD_VAR 0 3
69226: PPUSH
69227: CALL_OW 314
69231: NOT
69232: IFFALSE 69281
// begin if not IsInUnit ( j ) then
69234: LD_VAR 0 3
69238: PPUSH
69239: CALL_OW 310
69243: NOT
69244: IFFALSE 69260
// ComEnterUnit ( j , selected ) ;
69246: LD_VAR 0 3
69250: PPUSH
69251: LD_VAR 0 7
69255: PPUSH
69256: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
69260: LD_VAR 0 3
69264: PPUSH
69265: LD_INT 16
69267: PPUSH
69268: CALL_OW 183
// AddComExitBuilding ( j ) ;
69272: LD_VAR 0 3
69276: PPUSH
69277: CALL_OW 182
// end ;
69281: GO 69219
69283: POP
69284: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
69285: LD_VAR 0 5
69289: PPUSH
69290: LD_INT 11
69292: PPUSH
69293: CALL_OW 325
69297: IFFALSE 69556
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
69299: LD_ADDR_VAR 0 4
69303: PUSH
69304: LD_EXP 92
69308: PUSH
69309: LD_VAR 0 2
69313: ARRAY
69314: PPUSH
69315: LD_INT 25
69317: PUSH
69318: LD_INT 16
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PPUSH
69325: CALL_OW 72
69329: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
69330: LD_VAR 0 4
69334: PUSH
69335: LD_INT 6
69337: GREATEREQUAL
69338: PUSH
69339: LD_VAR 0 5
69343: PPUSH
69344: LD_INT 2
69346: PPUSH
69347: CALL_OW 325
69351: NOT
69352: OR
69353: IFFALSE 69556
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
69355: LD_ADDR_VAR 0 8
69359: PUSH
69360: LD_EXP 63
69364: PUSH
69365: LD_VAR 0 2
69369: ARRAY
69370: PPUSH
69371: LD_INT 2
69373: PUSH
69374: LD_INT 30
69376: PUSH
69377: LD_INT 4
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: PUSH
69384: LD_INT 30
69386: PUSH
69387: LD_INT 5
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: LIST
69398: PPUSH
69399: CALL_OW 72
69403: ST_TO_ADDR
// if barracks then
69404: LD_VAR 0 8
69408: IFFALSE 69556
// begin selected := 0 ;
69410: LD_ADDR_VAR 0 7
69414: PUSH
69415: LD_INT 0
69417: ST_TO_ADDR
// for j in barracks do
69418: LD_ADDR_VAR 0 3
69422: PUSH
69423: LD_VAR 0 8
69427: PUSH
69428: FOR_IN
69429: IFFALSE 69460
// begin if UnitsInside ( j ) < 6 then
69431: LD_VAR 0 3
69435: PPUSH
69436: CALL_OW 313
69440: PUSH
69441: LD_INT 6
69443: LESS
69444: IFFALSE 69458
// begin selected := j ;
69446: LD_ADDR_VAR 0 7
69450: PUSH
69451: LD_VAR 0 3
69455: ST_TO_ADDR
// break ;
69456: GO 69460
// end ; end ;
69458: GO 69428
69460: POP
69461: POP
// if selected then
69462: LD_VAR 0 7
69466: IFFALSE 69556
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
69468: LD_ADDR_VAR 0 3
69472: PUSH
69473: LD_EXP 92
69477: PUSH
69478: LD_VAR 0 2
69482: ARRAY
69483: PPUSH
69484: LD_INT 25
69486: PUSH
69487: LD_INT 12
69489: PUSH
69490: EMPTY
69491: LIST
69492: LIST
69493: PPUSH
69494: CALL_OW 72
69498: PUSH
69499: FOR_IN
69500: IFFALSE 69554
// if not IsInUnit ( j ) and not HasTask ( j ) then
69502: LD_VAR 0 3
69506: PPUSH
69507: CALL_OW 310
69511: NOT
69512: PUSH
69513: LD_VAR 0 3
69517: PPUSH
69518: CALL_OW 314
69522: NOT
69523: AND
69524: IFFALSE 69552
// begin ComEnterUnit ( j , selected ) ;
69526: LD_VAR 0 3
69530: PPUSH
69531: LD_VAR 0 7
69535: PPUSH
69536: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
69540: LD_VAR 0 3
69544: PPUSH
69545: LD_INT 15
69547: PPUSH
69548: CALL_OW 183
// end ;
69552: GO 69499
69554: POP
69555: POP
// end ; end ; end ; end ; end ;
69556: GO 68949
69558: POP
69559: POP
// end ;
69560: LD_VAR 0 1
69564: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
69565: LD_INT 0
69567: PPUSH
69568: PPUSH
69569: PPUSH
69570: PPUSH
// if not mc_bases then
69571: LD_EXP 63
69575: NOT
69576: IFFALSE 69580
// exit ;
69578: GO 69758
// for i = 1 to mc_bases do
69580: LD_ADDR_VAR 0 2
69584: PUSH
69585: DOUBLE
69586: LD_INT 1
69588: DEC
69589: ST_TO_ADDR
69590: LD_EXP 63
69594: PUSH
69595: FOR_TO
69596: IFFALSE 69756
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
69598: LD_ADDR_VAR 0 4
69602: PUSH
69603: LD_EXP 63
69607: PUSH
69608: LD_VAR 0 2
69612: ARRAY
69613: PPUSH
69614: LD_INT 25
69616: PUSH
69617: LD_INT 9
69619: PUSH
69620: EMPTY
69621: LIST
69622: LIST
69623: PPUSH
69624: CALL_OW 72
69628: ST_TO_ADDR
// if not tmp then
69629: LD_VAR 0 4
69633: NOT
69634: IFFALSE 69638
// continue ;
69636: GO 69595
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
69638: LD_EXP 89
69642: PUSH
69643: LD_VAR 0 2
69647: ARRAY
69648: PPUSH
69649: LD_INT 29
69651: PPUSH
69652: CALL_OW 325
69656: NOT
69657: PUSH
69658: LD_EXP 89
69662: PUSH
69663: LD_VAR 0 2
69667: ARRAY
69668: PPUSH
69669: LD_INT 28
69671: PPUSH
69672: CALL_OW 325
69676: NOT
69677: AND
69678: IFFALSE 69682
// continue ;
69680: GO 69595
// for j in tmp do
69682: LD_ADDR_VAR 0 3
69686: PUSH
69687: LD_VAR 0 4
69691: PUSH
69692: FOR_IN
69693: IFFALSE 69752
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
69695: LD_VAR 0 3
69699: PUSH
69700: LD_EXP 66
69704: PUSH
69705: LD_VAR 0 2
69709: ARRAY
69710: PUSH
69711: LD_INT 1
69713: ARRAY
69714: IN
69715: NOT
69716: PUSH
69717: LD_VAR 0 3
69721: PUSH
69722: LD_EXP 66
69726: PUSH
69727: LD_VAR 0 2
69731: ARRAY
69732: PUSH
69733: LD_INT 2
69735: ARRAY
69736: IN
69737: NOT
69738: AND
69739: IFFALSE 69750
// ComSpaceTimeShoot ( j ) ;
69741: LD_VAR 0 3
69745: PPUSH
69746: CALL 14417 0 1
69750: GO 69692
69752: POP
69753: POP
// end ;
69754: GO 69595
69756: POP
69757: POP
// end ;
69758: LD_VAR 0 1
69762: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
69763: LD_INT 0
69765: PPUSH
69766: PPUSH
69767: PPUSH
69768: PPUSH
69769: PPUSH
69770: PPUSH
69771: PPUSH
69772: PPUSH
69773: PPUSH
// if not mc_bases then
69774: LD_EXP 63
69778: NOT
69779: IFFALSE 69783
// exit ;
69781: GO 70405
// for i = 1 to mc_bases do
69783: LD_ADDR_VAR 0 2
69787: PUSH
69788: DOUBLE
69789: LD_INT 1
69791: DEC
69792: ST_TO_ADDR
69793: LD_EXP 63
69797: PUSH
69798: FOR_TO
69799: IFFALSE 70403
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
69801: LD_EXP 98
69805: PUSH
69806: LD_VAR 0 2
69810: ARRAY
69811: NOT
69812: PUSH
69813: LD_INT 38
69815: PPUSH
69816: LD_EXP 89
69820: PUSH
69821: LD_VAR 0 2
69825: ARRAY
69826: PPUSH
69827: CALL_OW 321
69831: PUSH
69832: LD_INT 2
69834: NONEQUAL
69835: OR
69836: IFFALSE 69840
// continue ;
69838: GO 69798
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
69840: LD_ADDR_VAR 0 8
69844: PUSH
69845: LD_EXP 63
69849: PUSH
69850: LD_VAR 0 2
69854: ARRAY
69855: PPUSH
69856: LD_INT 30
69858: PUSH
69859: LD_INT 34
69861: PUSH
69862: EMPTY
69863: LIST
69864: LIST
69865: PPUSH
69866: CALL_OW 72
69870: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
69871: LD_ADDR_VAR 0 9
69875: PUSH
69876: LD_EXP 63
69880: PUSH
69881: LD_VAR 0 2
69885: ARRAY
69886: PPUSH
69887: LD_INT 25
69889: PUSH
69890: LD_INT 4
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: PPUSH
69897: CALL_OW 72
69901: PPUSH
69902: LD_INT 0
69904: PPUSH
69905: CALL 46981 0 2
69909: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
69910: LD_VAR 0 9
69914: NOT
69915: PUSH
69916: LD_VAR 0 8
69920: NOT
69921: OR
69922: PUSH
69923: LD_EXP 63
69927: PUSH
69928: LD_VAR 0 2
69932: ARRAY
69933: PPUSH
69934: LD_INT 124
69936: PPUSH
69937: CALL 46981 0 2
69941: OR
69942: IFFALSE 69946
// continue ;
69944: GO 69798
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
69946: LD_EXP 99
69950: PUSH
69951: LD_VAR 0 2
69955: ARRAY
69956: PUSH
69957: LD_EXP 98
69961: PUSH
69962: LD_VAR 0 2
69966: ARRAY
69967: LESS
69968: PUSH
69969: LD_EXP 99
69973: PUSH
69974: LD_VAR 0 2
69978: ARRAY
69979: PUSH
69980: LD_VAR 0 8
69984: LESS
69985: AND
69986: IFFALSE 70401
// begin tmp := sci [ 1 ] ;
69988: LD_ADDR_VAR 0 7
69992: PUSH
69993: LD_VAR 0 9
69997: PUSH
69998: LD_INT 1
70000: ARRAY
70001: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
70002: LD_VAR 0 7
70006: PPUSH
70007: LD_INT 124
70009: PPUSH
70010: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
70014: LD_ADDR_VAR 0 3
70018: PUSH
70019: DOUBLE
70020: LD_EXP 98
70024: PUSH
70025: LD_VAR 0 2
70029: ARRAY
70030: INC
70031: ST_TO_ADDR
70032: LD_EXP 98
70036: PUSH
70037: LD_VAR 0 2
70041: ARRAY
70042: PUSH
70043: FOR_DOWNTO
70044: IFFALSE 70387
// begin if IsInUnit ( tmp ) then
70046: LD_VAR 0 7
70050: PPUSH
70051: CALL_OW 310
70055: IFFALSE 70066
// ComExitBuilding ( tmp ) ;
70057: LD_VAR 0 7
70061: PPUSH
70062: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
70066: LD_INT 35
70068: PPUSH
70069: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
70073: LD_VAR 0 7
70077: PPUSH
70078: CALL_OW 310
70082: NOT
70083: PUSH
70084: LD_VAR 0 7
70088: PPUSH
70089: CALL_OW 314
70093: NOT
70094: AND
70095: IFFALSE 70066
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
70097: LD_ADDR_VAR 0 6
70101: PUSH
70102: LD_VAR 0 7
70106: PPUSH
70107: CALL_OW 250
70111: PUSH
70112: LD_VAR 0 7
70116: PPUSH
70117: CALL_OW 251
70121: PUSH
70122: EMPTY
70123: LIST
70124: LIST
70125: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
70126: LD_INT 35
70128: PPUSH
70129: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
70133: LD_ADDR_VAR 0 4
70137: PUSH
70138: LD_EXP 98
70142: PUSH
70143: LD_VAR 0 2
70147: ARRAY
70148: PUSH
70149: LD_VAR 0 3
70153: ARRAY
70154: PUSH
70155: LD_INT 1
70157: ARRAY
70158: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
70159: LD_ADDR_VAR 0 5
70163: PUSH
70164: LD_EXP 98
70168: PUSH
70169: LD_VAR 0 2
70173: ARRAY
70174: PUSH
70175: LD_VAR 0 3
70179: ARRAY
70180: PUSH
70181: LD_INT 2
70183: ARRAY
70184: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
70185: LD_VAR 0 7
70189: PPUSH
70190: LD_INT 10
70192: PPUSH
70193: CALL 21013 0 2
70197: PUSH
70198: LD_INT 4
70200: ARRAY
70201: IFFALSE 70239
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
70203: LD_VAR 0 7
70207: PPUSH
70208: LD_VAR 0 6
70212: PUSH
70213: LD_INT 1
70215: ARRAY
70216: PPUSH
70217: LD_VAR 0 6
70221: PUSH
70222: LD_INT 2
70224: ARRAY
70225: PPUSH
70226: CALL_OW 111
// wait ( 0 0$10 ) ;
70230: LD_INT 350
70232: PPUSH
70233: CALL_OW 67
// end else
70237: GO 70265
// begin ComMoveXY ( tmp , x , y ) ;
70239: LD_VAR 0 7
70243: PPUSH
70244: LD_VAR 0 4
70248: PPUSH
70249: LD_VAR 0 5
70253: PPUSH
70254: CALL_OW 111
// wait ( 0 0$3 ) ;
70258: LD_INT 105
70260: PPUSH
70261: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
70265: LD_VAR 0 7
70269: PPUSH
70270: LD_VAR 0 4
70274: PPUSH
70275: LD_VAR 0 5
70279: PPUSH
70280: CALL_OW 307
70284: IFFALSE 70126
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
70286: LD_VAR 0 7
70290: PPUSH
70291: LD_VAR 0 4
70295: PPUSH
70296: LD_VAR 0 5
70300: PPUSH
70301: LD_VAR 0 8
70305: PUSH
70306: LD_VAR 0 3
70310: ARRAY
70311: PPUSH
70312: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
70316: LD_INT 35
70318: PPUSH
70319: CALL_OW 67
// until not HasTask ( tmp ) ;
70323: LD_VAR 0 7
70327: PPUSH
70328: CALL_OW 314
70332: NOT
70333: IFFALSE 70316
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
70335: LD_ADDR_EXP 99
70339: PUSH
70340: LD_EXP 99
70344: PPUSH
70345: LD_VAR 0 2
70349: PUSH
70350: LD_EXP 99
70354: PUSH
70355: LD_VAR 0 2
70359: ARRAY
70360: PUSH
70361: LD_INT 1
70363: PLUS
70364: PUSH
70365: EMPTY
70366: LIST
70367: LIST
70368: PPUSH
70369: LD_VAR 0 8
70373: PUSH
70374: LD_VAR 0 3
70378: ARRAY
70379: PPUSH
70380: CALL 18420 0 3
70384: ST_TO_ADDR
// end ;
70385: GO 70043
70387: POP
70388: POP
// MC_Reset ( i , 124 ) ;
70389: LD_VAR 0 2
70393: PPUSH
70394: LD_INT 124
70396: PPUSH
70397: CALL 54008 0 2
// end ; end ;
70401: GO 69798
70403: POP
70404: POP
// end ;
70405: LD_VAR 0 1
70409: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
70410: LD_INT 0
70412: PPUSH
70413: PPUSH
70414: PPUSH
// if not mc_bases then
70415: LD_EXP 63
70419: NOT
70420: IFFALSE 70424
// exit ;
70422: GO 71030
// for i = 1 to mc_bases do
70424: LD_ADDR_VAR 0 2
70428: PUSH
70429: DOUBLE
70430: LD_INT 1
70432: DEC
70433: ST_TO_ADDR
70434: LD_EXP 63
70438: PUSH
70439: FOR_TO
70440: IFFALSE 71028
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
70442: LD_ADDR_VAR 0 3
70446: PUSH
70447: LD_EXP 63
70451: PUSH
70452: LD_VAR 0 2
70456: ARRAY
70457: PPUSH
70458: LD_INT 25
70460: PUSH
70461: LD_INT 4
70463: PUSH
70464: EMPTY
70465: LIST
70466: LIST
70467: PPUSH
70468: CALL_OW 72
70472: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
70473: LD_VAR 0 3
70477: NOT
70478: PUSH
70479: LD_EXP 100
70483: PUSH
70484: LD_VAR 0 2
70488: ARRAY
70489: NOT
70490: OR
70491: PUSH
70492: LD_EXP 63
70496: PUSH
70497: LD_VAR 0 2
70501: ARRAY
70502: PPUSH
70503: LD_INT 2
70505: PUSH
70506: LD_INT 30
70508: PUSH
70509: LD_INT 0
70511: PUSH
70512: EMPTY
70513: LIST
70514: LIST
70515: PUSH
70516: LD_INT 30
70518: PUSH
70519: LD_INT 1
70521: PUSH
70522: EMPTY
70523: LIST
70524: LIST
70525: PUSH
70526: EMPTY
70527: LIST
70528: LIST
70529: LIST
70530: PPUSH
70531: CALL_OW 72
70535: NOT
70536: OR
70537: IFFALSE 70587
// begin if mc_deposits_finder [ i ] then
70539: LD_EXP 101
70543: PUSH
70544: LD_VAR 0 2
70548: ARRAY
70549: IFFALSE 70585
// begin MC_Reset ( i , 125 ) ;
70551: LD_VAR 0 2
70555: PPUSH
70556: LD_INT 125
70558: PPUSH
70559: CALL 54008 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
70563: LD_ADDR_EXP 101
70567: PUSH
70568: LD_EXP 101
70572: PPUSH
70573: LD_VAR 0 2
70577: PPUSH
70578: EMPTY
70579: PPUSH
70580: CALL_OW 1
70584: ST_TO_ADDR
// end ; continue ;
70585: GO 70439
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
70587: LD_EXP 100
70591: PUSH
70592: LD_VAR 0 2
70596: ARRAY
70597: PUSH
70598: LD_INT 1
70600: ARRAY
70601: PUSH
70602: LD_INT 3
70604: ARRAY
70605: PUSH
70606: LD_INT 1
70608: EQUAL
70609: PUSH
70610: LD_INT 20
70612: PPUSH
70613: LD_EXP 89
70617: PUSH
70618: LD_VAR 0 2
70622: ARRAY
70623: PPUSH
70624: CALL_OW 321
70628: PUSH
70629: LD_INT 2
70631: NONEQUAL
70632: AND
70633: IFFALSE 70683
// begin if mc_deposits_finder [ i ] then
70635: LD_EXP 101
70639: PUSH
70640: LD_VAR 0 2
70644: ARRAY
70645: IFFALSE 70681
// begin MC_Reset ( i , 125 ) ;
70647: LD_VAR 0 2
70651: PPUSH
70652: LD_INT 125
70654: PPUSH
70655: CALL 54008 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
70659: LD_ADDR_EXP 101
70663: PUSH
70664: LD_EXP 101
70668: PPUSH
70669: LD_VAR 0 2
70673: PPUSH
70674: EMPTY
70675: PPUSH
70676: CALL_OW 1
70680: ST_TO_ADDR
// end ; continue ;
70681: GO 70439
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
70683: LD_EXP 100
70687: PUSH
70688: LD_VAR 0 2
70692: ARRAY
70693: PUSH
70694: LD_INT 1
70696: ARRAY
70697: PUSH
70698: LD_INT 1
70700: ARRAY
70701: PPUSH
70702: LD_EXP 100
70706: PUSH
70707: LD_VAR 0 2
70711: ARRAY
70712: PUSH
70713: LD_INT 1
70715: ARRAY
70716: PUSH
70717: LD_INT 2
70719: ARRAY
70720: PPUSH
70721: LD_EXP 89
70725: PUSH
70726: LD_VAR 0 2
70730: ARRAY
70731: PPUSH
70732: CALL_OW 440
70736: IFFALSE 70779
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
70738: LD_ADDR_EXP 100
70742: PUSH
70743: LD_EXP 100
70747: PPUSH
70748: LD_VAR 0 2
70752: PPUSH
70753: LD_EXP 100
70757: PUSH
70758: LD_VAR 0 2
70762: ARRAY
70763: PPUSH
70764: LD_INT 1
70766: PPUSH
70767: CALL_OW 3
70771: PPUSH
70772: CALL_OW 1
70776: ST_TO_ADDR
70777: GO 71026
// begin if not mc_deposits_finder [ i ] then
70779: LD_EXP 101
70783: PUSH
70784: LD_VAR 0 2
70788: ARRAY
70789: NOT
70790: IFFALSE 70842
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
70792: LD_ADDR_EXP 101
70796: PUSH
70797: LD_EXP 101
70801: PPUSH
70802: LD_VAR 0 2
70806: PPUSH
70807: LD_VAR 0 3
70811: PUSH
70812: LD_INT 1
70814: ARRAY
70815: PUSH
70816: EMPTY
70817: LIST
70818: PPUSH
70819: CALL_OW 1
70823: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
70824: LD_VAR 0 3
70828: PUSH
70829: LD_INT 1
70831: ARRAY
70832: PPUSH
70833: LD_INT 125
70835: PPUSH
70836: CALL_OW 109
// end else
70840: GO 71026
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
70842: LD_EXP 101
70846: PUSH
70847: LD_VAR 0 2
70851: ARRAY
70852: PUSH
70853: LD_INT 1
70855: ARRAY
70856: PPUSH
70857: CALL_OW 310
70861: IFFALSE 70884
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
70863: LD_EXP 101
70867: PUSH
70868: LD_VAR 0 2
70872: ARRAY
70873: PUSH
70874: LD_INT 1
70876: ARRAY
70877: PPUSH
70878: CALL_OW 122
70882: GO 71026
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
70884: LD_EXP 101
70888: PUSH
70889: LD_VAR 0 2
70893: ARRAY
70894: PUSH
70895: LD_INT 1
70897: ARRAY
70898: PPUSH
70899: CALL_OW 314
70903: NOT
70904: PUSH
70905: LD_EXP 101
70909: PUSH
70910: LD_VAR 0 2
70914: ARRAY
70915: PUSH
70916: LD_INT 1
70918: ARRAY
70919: PPUSH
70920: LD_EXP 100
70924: PUSH
70925: LD_VAR 0 2
70929: ARRAY
70930: PUSH
70931: LD_INT 1
70933: ARRAY
70934: PUSH
70935: LD_INT 1
70937: ARRAY
70938: PPUSH
70939: LD_EXP 100
70943: PUSH
70944: LD_VAR 0 2
70948: ARRAY
70949: PUSH
70950: LD_INT 1
70952: ARRAY
70953: PUSH
70954: LD_INT 2
70956: ARRAY
70957: PPUSH
70958: CALL_OW 297
70962: PUSH
70963: LD_INT 6
70965: GREATER
70966: AND
70967: IFFALSE 71026
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
70969: LD_EXP 101
70973: PUSH
70974: LD_VAR 0 2
70978: ARRAY
70979: PUSH
70980: LD_INT 1
70982: ARRAY
70983: PPUSH
70984: LD_EXP 100
70988: PUSH
70989: LD_VAR 0 2
70993: ARRAY
70994: PUSH
70995: LD_INT 1
70997: ARRAY
70998: PUSH
70999: LD_INT 1
71001: ARRAY
71002: PPUSH
71003: LD_EXP 100
71007: PUSH
71008: LD_VAR 0 2
71012: ARRAY
71013: PUSH
71014: LD_INT 1
71016: ARRAY
71017: PUSH
71018: LD_INT 2
71020: ARRAY
71021: PPUSH
71022: CALL_OW 111
// end ; end ; end ;
71026: GO 70439
71028: POP
71029: POP
// end ;
71030: LD_VAR 0 1
71034: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
71035: LD_INT 0
71037: PPUSH
71038: PPUSH
71039: PPUSH
71040: PPUSH
71041: PPUSH
71042: PPUSH
71043: PPUSH
71044: PPUSH
71045: PPUSH
71046: PPUSH
71047: PPUSH
// if not mc_bases then
71048: LD_EXP 63
71052: NOT
71053: IFFALSE 71057
// exit ;
71055: GO 71997
// for i = 1 to mc_bases do
71057: LD_ADDR_VAR 0 2
71061: PUSH
71062: DOUBLE
71063: LD_INT 1
71065: DEC
71066: ST_TO_ADDR
71067: LD_EXP 63
71071: PUSH
71072: FOR_TO
71073: IFFALSE 71995
// begin if not mc_bases [ i ] or mc_scan [ i ] then
71075: LD_EXP 63
71079: PUSH
71080: LD_VAR 0 2
71084: ARRAY
71085: NOT
71086: PUSH
71087: LD_EXP 86
71091: PUSH
71092: LD_VAR 0 2
71096: ARRAY
71097: OR
71098: IFFALSE 71102
// continue ;
71100: GO 71072
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
71102: LD_ADDR_VAR 0 7
71106: PUSH
71107: LD_EXP 63
71111: PUSH
71112: LD_VAR 0 2
71116: ARRAY
71117: PUSH
71118: LD_INT 1
71120: ARRAY
71121: PPUSH
71122: CALL_OW 248
71126: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
71127: LD_VAR 0 7
71131: PUSH
71132: LD_INT 3
71134: EQUAL
71135: PUSH
71136: LD_EXP 82
71140: PUSH
71141: LD_VAR 0 2
71145: ARRAY
71146: PUSH
71147: LD_EXP 85
71151: PUSH
71152: LD_VAR 0 2
71156: ARRAY
71157: UNION
71158: PPUSH
71159: LD_INT 33
71161: PUSH
71162: LD_INT 2
71164: PUSH
71165: EMPTY
71166: LIST
71167: LIST
71168: PPUSH
71169: CALL_OW 72
71173: NOT
71174: OR
71175: IFFALSE 71179
// continue ;
71177: GO 71072
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
71179: LD_ADDR_VAR 0 9
71183: PUSH
71184: LD_EXP 63
71188: PUSH
71189: LD_VAR 0 2
71193: ARRAY
71194: PPUSH
71195: LD_INT 30
71197: PUSH
71198: LD_INT 36
71200: PUSH
71201: EMPTY
71202: LIST
71203: LIST
71204: PPUSH
71205: CALL_OW 72
71209: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
71210: LD_ADDR_VAR 0 10
71214: PUSH
71215: LD_EXP 82
71219: PUSH
71220: LD_VAR 0 2
71224: ARRAY
71225: PPUSH
71226: LD_INT 34
71228: PUSH
71229: LD_INT 31
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: PPUSH
71236: CALL_OW 72
71240: ST_TO_ADDR
// if not cts and not mcts then
71241: LD_VAR 0 9
71245: NOT
71246: PUSH
71247: LD_VAR 0 10
71251: NOT
71252: AND
71253: IFFALSE 71257
// continue ;
71255: GO 71072
// x := cts ;
71257: LD_ADDR_VAR 0 11
71261: PUSH
71262: LD_VAR 0 9
71266: ST_TO_ADDR
// if not x then
71267: LD_VAR 0 11
71271: NOT
71272: IFFALSE 71284
// x := mcts ;
71274: LD_ADDR_VAR 0 11
71278: PUSH
71279: LD_VAR 0 10
71283: ST_TO_ADDR
// if not x then
71284: LD_VAR 0 11
71288: NOT
71289: IFFALSE 71293
// continue ;
71291: GO 71072
// if mc_remote_driver [ i ] then
71293: LD_EXP 103
71297: PUSH
71298: LD_VAR 0 2
71302: ARRAY
71303: IFFALSE 71690
// for j in mc_remote_driver [ i ] do
71305: LD_ADDR_VAR 0 3
71309: PUSH
71310: LD_EXP 103
71314: PUSH
71315: LD_VAR 0 2
71319: ARRAY
71320: PUSH
71321: FOR_IN
71322: IFFALSE 71688
// begin if GetClass ( j ) <> 3 then
71324: LD_VAR 0 3
71328: PPUSH
71329: CALL_OW 257
71333: PUSH
71334: LD_INT 3
71336: NONEQUAL
71337: IFFALSE 71390
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
71339: LD_ADDR_EXP 103
71343: PUSH
71344: LD_EXP 103
71348: PPUSH
71349: LD_VAR 0 2
71353: PPUSH
71354: LD_EXP 103
71358: PUSH
71359: LD_VAR 0 2
71363: ARRAY
71364: PUSH
71365: LD_VAR 0 3
71369: DIFF
71370: PPUSH
71371: CALL_OW 1
71375: ST_TO_ADDR
// SetTag ( j , 0 ) ;
71376: LD_VAR 0 3
71380: PPUSH
71381: LD_INT 0
71383: PPUSH
71384: CALL_OW 109
// continue ;
71388: GO 71321
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
71390: LD_EXP 82
71394: PUSH
71395: LD_VAR 0 2
71399: ARRAY
71400: PPUSH
71401: LD_INT 34
71403: PUSH
71404: LD_INT 31
71406: PUSH
71407: EMPTY
71408: LIST
71409: LIST
71410: PUSH
71411: LD_INT 58
71413: PUSH
71414: EMPTY
71415: LIST
71416: PUSH
71417: EMPTY
71418: LIST
71419: LIST
71420: PPUSH
71421: CALL_OW 72
71425: PUSH
71426: LD_VAR 0 3
71430: PPUSH
71431: CALL 47069 0 1
71435: NOT
71436: AND
71437: IFFALSE 71508
// begin if IsInUnit ( j ) then
71439: LD_VAR 0 3
71443: PPUSH
71444: CALL_OW 310
71448: IFFALSE 71459
// ComExitBuilding ( j ) ;
71450: LD_VAR 0 3
71454: PPUSH
71455: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
71459: LD_VAR 0 3
71463: PPUSH
71464: LD_EXP 82
71468: PUSH
71469: LD_VAR 0 2
71473: ARRAY
71474: PPUSH
71475: LD_INT 34
71477: PUSH
71478: LD_INT 31
71480: PUSH
71481: EMPTY
71482: LIST
71483: LIST
71484: PUSH
71485: LD_INT 58
71487: PUSH
71488: EMPTY
71489: LIST
71490: PUSH
71491: EMPTY
71492: LIST
71493: LIST
71494: PPUSH
71495: CALL_OW 72
71499: PUSH
71500: LD_INT 1
71502: ARRAY
71503: PPUSH
71504: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
71508: LD_VAR 0 3
71512: PPUSH
71513: CALL_OW 310
71517: NOT
71518: PUSH
71519: LD_VAR 0 3
71523: PPUSH
71524: CALL_OW 310
71528: PPUSH
71529: CALL_OW 266
71533: PUSH
71534: LD_INT 36
71536: NONEQUAL
71537: PUSH
71538: LD_VAR 0 3
71542: PPUSH
71543: CALL 47069 0 1
71547: NOT
71548: AND
71549: OR
71550: IFFALSE 71686
// begin if IsInUnit ( j ) then
71552: LD_VAR 0 3
71556: PPUSH
71557: CALL_OW 310
71561: IFFALSE 71572
// ComExitBuilding ( j ) ;
71563: LD_VAR 0 3
71567: PPUSH
71568: CALL_OW 122
// ct := 0 ;
71572: LD_ADDR_VAR 0 8
71576: PUSH
71577: LD_INT 0
71579: ST_TO_ADDR
// for k in x do
71580: LD_ADDR_VAR 0 4
71584: PUSH
71585: LD_VAR 0 11
71589: PUSH
71590: FOR_IN
71591: IFFALSE 71664
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
71593: LD_VAR 0 4
71597: PPUSH
71598: CALL_OW 264
71602: PUSH
71603: LD_INT 31
71605: EQUAL
71606: PUSH
71607: LD_VAR 0 4
71611: PPUSH
71612: CALL_OW 311
71616: NOT
71617: AND
71618: PUSH
71619: LD_VAR 0 4
71623: PPUSH
71624: CALL_OW 266
71628: PUSH
71629: LD_INT 36
71631: EQUAL
71632: PUSH
71633: LD_VAR 0 4
71637: PPUSH
71638: CALL_OW 313
71642: PUSH
71643: LD_INT 3
71645: LESS
71646: AND
71647: OR
71648: IFFALSE 71662
// begin ct := k ;
71650: LD_ADDR_VAR 0 8
71654: PUSH
71655: LD_VAR 0 4
71659: ST_TO_ADDR
// break ;
71660: GO 71664
// end ;
71662: GO 71590
71664: POP
71665: POP
// if ct then
71666: LD_VAR 0 8
71670: IFFALSE 71686
// ComEnterUnit ( j , ct ) ;
71672: LD_VAR 0 3
71676: PPUSH
71677: LD_VAR 0 8
71681: PPUSH
71682: CALL_OW 120
// end ; end ;
71686: GO 71321
71688: POP
71689: POP
// places := 0 ;
71690: LD_ADDR_VAR 0 5
71694: PUSH
71695: LD_INT 0
71697: ST_TO_ADDR
// for j = 1 to x do
71698: LD_ADDR_VAR 0 3
71702: PUSH
71703: DOUBLE
71704: LD_INT 1
71706: DEC
71707: ST_TO_ADDR
71708: LD_VAR 0 11
71712: PUSH
71713: FOR_TO
71714: IFFALSE 71790
// if GetWeapon ( x [ j ] ) = ar_control_tower then
71716: LD_VAR 0 11
71720: PUSH
71721: LD_VAR 0 3
71725: ARRAY
71726: PPUSH
71727: CALL_OW 264
71731: PUSH
71732: LD_INT 31
71734: EQUAL
71735: IFFALSE 71753
// places := places + 1 else
71737: LD_ADDR_VAR 0 5
71741: PUSH
71742: LD_VAR 0 5
71746: PUSH
71747: LD_INT 1
71749: PLUS
71750: ST_TO_ADDR
71751: GO 71788
// if GetBType ( x [ j ] ) = b_control_tower then
71753: LD_VAR 0 11
71757: PUSH
71758: LD_VAR 0 3
71762: ARRAY
71763: PPUSH
71764: CALL_OW 266
71768: PUSH
71769: LD_INT 36
71771: EQUAL
71772: IFFALSE 71788
// places := places + 3 ;
71774: LD_ADDR_VAR 0 5
71778: PUSH
71779: LD_VAR 0 5
71783: PUSH
71784: LD_INT 3
71786: PLUS
71787: ST_TO_ADDR
71788: GO 71713
71790: POP
71791: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
71792: LD_VAR 0 5
71796: PUSH
71797: LD_INT 0
71799: EQUAL
71800: PUSH
71801: LD_VAR 0 5
71805: PUSH
71806: LD_EXP 103
71810: PUSH
71811: LD_VAR 0 2
71815: ARRAY
71816: LESSEQUAL
71817: OR
71818: IFFALSE 71822
// continue ;
71820: GO 71072
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
71822: LD_ADDR_VAR 0 6
71826: PUSH
71827: LD_EXP 63
71831: PUSH
71832: LD_VAR 0 2
71836: ARRAY
71837: PPUSH
71838: LD_INT 25
71840: PUSH
71841: LD_INT 3
71843: PUSH
71844: EMPTY
71845: LIST
71846: LIST
71847: PPUSH
71848: CALL_OW 72
71852: PUSH
71853: LD_EXP 103
71857: PUSH
71858: LD_VAR 0 2
71862: ARRAY
71863: DIFF
71864: PPUSH
71865: LD_INT 3
71867: PPUSH
71868: CALL 47969 0 2
71872: ST_TO_ADDR
// for j in tmp do
71873: LD_ADDR_VAR 0 3
71877: PUSH
71878: LD_VAR 0 6
71882: PUSH
71883: FOR_IN
71884: IFFALSE 71919
// if GetTag ( j ) > 0 then
71886: LD_VAR 0 3
71890: PPUSH
71891: CALL_OW 110
71895: PUSH
71896: LD_INT 0
71898: GREATER
71899: IFFALSE 71917
// tmp := tmp diff j ;
71901: LD_ADDR_VAR 0 6
71905: PUSH
71906: LD_VAR 0 6
71910: PUSH
71911: LD_VAR 0 3
71915: DIFF
71916: ST_TO_ADDR
71917: GO 71883
71919: POP
71920: POP
// if not tmp then
71921: LD_VAR 0 6
71925: NOT
71926: IFFALSE 71930
// continue ;
71928: GO 71072
// if places then
71930: LD_VAR 0 5
71934: IFFALSE 71993
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
71936: LD_ADDR_EXP 103
71940: PUSH
71941: LD_EXP 103
71945: PPUSH
71946: LD_VAR 0 2
71950: PPUSH
71951: LD_EXP 103
71955: PUSH
71956: LD_VAR 0 2
71960: ARRAY
71961: PUSH
71962: LD_VAR 0 6
71966: PUSH
71967: LD_INT 1
71969: ARRAY
71970: UNION
71971: PPUSH
71972: CALL_OW 1
71976: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
71977: LD_VAR 0 6
71981: PUSH
71982: LD_INT 1
71984: ARRAY
71985: PPUSH
71986: LD_INT 126
71988: PPUSH
71989: CALL_OW 109
// end ; end ;
71993: GO 71072
71995: POP
71996: POP
// end ;
71997: LD_VAR 0 1
72001: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
72002: LD_INT 0
72004: PPUSH
72005: PPUSH
72006: PPUSH
72007: PPUSH
72008: PPUSH
72009: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
72010: LD_VAR 0 1
72014: NOT
72015: PUSH
72016: LD_VAR 0 2
72020: NOT
72021: OR
72022: PUSH
72023: LD_VAR 0 3
72027: NOT
72028: OR
72029: PUSH
72030: LD_VAR 0 4
72034: PUSH
72035: LD_INT 1
72037: PUSH
72038: LD_INT 2
72040: PUSH
72041: LD_INT 3
72043: PUSH
72044: LD_INT 4
72046: PUSH
72047: LD_INT 5
72049: PUSH
72050: LD_INT 8
72052: PUSH
72053: LD_INT 9
72055: PUSH
72056: LD_INT 15
72058: PUSH
72059: LD_INT 16
72061: PUSH
72062: EMPTY
72063: LIST
72064: LIST
72065: LIST
72066: LIST
72067: LIST
72068: LIST
72069: LIST
72070: LIST
72071: LIST
72072: IN
72073: NOT
72074: OR
72075: IFFALSE 72079
// exit ;
72077: GO 72979
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
72079: LD_ADDR_VAR 0 2
72083: PUSH
72084: LD_VAR 0 2
72088: PPUSH
72089: LD_INT 21
72091: PUSH
72092: LD_INT 3
72094: PUSH
72095: EMPTY
72096: LIST
72097: LIST
72098: PUSH
72099: LD_INT 24
72101: PUSH
72102: LD_INT 250
72104: PUSH
72105: EMPTY
72106: LIST
72107: LIST
72108: PUSH
72109: EMPTY
72110: LIST
72111: LIST
72112: PPUSH
72113: CALL_OW 72
72117: ST_TO_ADDR
// case class of 1 , 15 :
72118: LD_VAR 0 4
72122: PUSH
72123: LD_INT 1
72125: DOUBLE
72126: EQUAL
72127: IFTRUE 72137
72129: LD_INT 15
72131: DOUBLE
72132: EQUAL
72133: IFTRUE 72137
72135: GO 72222
72137: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
72138: LD_ADDR_VAR 0 8
72142: PUSH
72143: LD_VAR 0 2
72147: PPUSH
72148: LD_INT 2
72150: PUSH
72151: LD_INT 30
72153: PUSH
72154: LD_INT 32
72156: PUSH
72157: EMPTY
72158: LIST
72159: LIST
72160: PUSH
72161: LD_INT 30
72163: PUSH
72164: LD_INT 31
72166: PUSH
72167: EMPTY
72168: LIST
72169: LIST
72170: PUSH
72171: EMPTY
72172: LIST
72173: LIST
72174: LIST
72175: PPUSH
72176: CALL_OW 72
72180: PUSH
72181: LD_VAR 0 2
72185: PPUSH
72186: LD_INT 2
72188: PUSH
72189: LD_INT 30
72191: PUSH
72192: LD_INT 4
72194: PUSH
72195: EMPTY
72196: LIST
72197: LIST
72198: PUSH
72199: LD_INT 30
72201: PUSH
72202: LD_INT 5
72204: PUSH
72205: EMPTY
72206: LIST
72207: LIST
72208: PUSH
72209: EMPTY
72210: LIST
72211: LIST
72212: LIST
72213: PPUSH
72214: CALL_OW 72
72218: ADD
72219: ST_TO_ADDR
72220: GO 72468
72222: LD_INT 2
72224: DOUBLE
72225: EQUAL
72226: IFTRUE 72236
72228: LD_INT 16
72230: DOUBLE
72231: EQUAL
72232: IFTRUE 72236
72234: GO 72282
72236: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
72237: LD_ADDR_VAR 0 8
72241: PUSH
72242: LD_VAR 0 2
72246: PPUSH
72247: LD_INT 2
72249: PUSH
72250: LD_INT 30
72252: PUSH
72253: LD_INT 0
72255: PUSH
72256: EMPTY
72257: LIST
72258: LIST
72259: PUSH
72260: LD_INT 30
72262: PUSH
72263: LD_INT 1
72265: PUSH
72266: EMPTY
72267: LIST
72268: LIST
72269: PUSH
72270: EMPTY
72271: LIST
72272: LIST
72273: LIST
72274: PPUSH
72275: CALL_OW 72
72279: ST_TO_ADDR
72280: GO 72468
72282: LD_INT 3
72284: DOUBLE
72285: EQUAL
72286: IFTRUE 72290
72288: GO 72336
72290: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
72291: LD_ADDR_VAR 0 8
72295: PUSH
72296: LD_VAR 0 2
72300: PPUSH
72301: LD_INT 2
72303: PUSH
72304: LD_INT 30
72306: PUSH
72307: LD_INT 2
72309: PUSH
72310: EMPTY
72311: LIST
72312: LIST
72313: PUSH
72314: LD_INT 30
72316: PUSH
72317: LD_INT 3
72319: PUSH
72320: EMPTY
72321: LIST
72322: LIST
72323: PUSH
72324: EMPTY
72325: LIST
72326: LIST
72327: LIST
72328: PPUSH
72329: CALL_OW 72
72333: ST_TO_ADDR
72334: GO 72468
72336: LD_INT 4
72338: DOUBLE
72339: EQUAL
72340: IFTRUE 72344
72342: GO 72401
72344: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
72345: LD_ADDR_VAR 0 8
72349: PUSH
72350: LD_VAR 0 2
72354: PPUSH
72355: LD_INT 2
72357: PUSH
72358: LD_INT 30
72360: PUSH
72361: LD_INT 6
72363: PUSH
72364: EMPTY
72365: LIST
72366: LIST
72367: PUSH
72368: LD_INT 30
72370: PUSH
72371: LD_INT 7
72373: PUSH
72374: EMPTY
72375: LIST
72376: LIST
72377: PUSH
72378: LD_INT 30
72380: PUSH
72381: LD_INT 8
72383: PUSH
72384: EMPTY
72385: LIST
72386: LIST
72387: PUSH
72388: EMPTY
72389: LIST
72390: LIST
72391: LIST
72392: LIST
72393: PPUSH
72394: CALL_OW 72
72398: ST_TO_ADDR
72399: GO 72468
72401: LD_INT 5
72403: DOUBLE
72404: EQUAL
72405: IFTRUE 72421
72407: LD_INT 8
72409: DOUBLE
72410: EQUAL
72411: IFTRUE 72421
72413: LD_INT 9
72415: DOUBLE
72416: EQUAL
72417: IFTRUE 72421
72419: GO 72467
72421: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
72422: LD_ADDR_VAR 0 8
72426: PUSH
72427: LD_VAR 0 2
72431: PPUSH
72432: LD_INT 2
72434: PUSH
72435: LD_INT 30
72437: PUSH
72438: LD_INT 4
72440: PUSH
72441: EMPTY
72442: LIST
72443: LIST
72444: PUSH
72445: LD_INT 30
72447: PUSH
72448: LD_INT 5
72450: PUSH
72451: EMPTY
72452: LIST
72453: LIST
72454: PUSH
72455: EMPTY
72456: LIST
72457: LIST
72458: LIST
72459: PPUSH
72460: CALL_OW 72
72464: ST_TO_ADDR
72465: GO 72468
72467: POP
// if not tmp then
72468: LD_VAR 0 8
72472: NOT
72473: IFFALSE 72477
// exit ;
72475: GO 72979
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
72477: LD_VAR 0 4
72481: PUSH
72482: LD_INT 1
72484: PUSH
72485: LD_INT 15
72487: PUSH
72488: EMPTY
72489: LIST
72490: LIST
72491: IN
72492: PUSH
72493: LD_EXP 72
72497: PUSH
72498: LD_VAR 0 1
72502: ARRAY
72503: AND
72504: IFFALSE 72660
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
72506: LD_ADDR_VAR 0 9
72510: PUSH
72511: LD_EXP 72
72515: PUSH
72516: LD_VAR 0 1
72520: ARRAY
72521: PUSH
72522: LD_INT 1
72524: ARRAY
72525: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
72526: LD_VAR 0 9
72530: PUSH
72531: LD_EXP 73
72535: PUSH
72536: LD_VAR 0 1
72540: ARRAY
72541: IN
72542: NOT
72543: IFFALSE 72658
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
72545: LD_ADDR_EXP 73
72549: PUSH
72550: LD_EXP 73
72554: PPUSH
72555: LD_VAR 0 1
72559: PUSH
72560: LD_EXP 73
72564: PUSH
72565: LD_VAR 0 1
72569: ARRAY
72570: PUSH
72571: LD_INT 1
72573: PLUS
72574: PUSH
72575: EMPTY
72576: LIST
72577: LIST
72578: PPUSH
72579: LD_VAR 0 9
72583: PPUSH
72584: CALL 18420 0 3
72588: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
72589: LD_ADDR_EXP 72
72593: PUSH
72594: LD_EXP 72
72598: PPUSH
72599: LD_VAR 0 1
72603: PPUSH
72604: LD_EXP 72
72608: PUSH
72609: LD_VAR 0 1
72613: ARRAY
72614: PUSH
72615: LD_VAR 0 9
72619: DIFF
72620: PPUSH
72621: CALL_OW 1
72625: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
72626: LD_VAR 0 3
72630: PPUSH
72631: LD_EXP 73
72635: PUSH
72636: LD_VAR 0 1
72640: ARRAY
72641: PUSH
72642: LD_EXP 73
72646: PUSH
72647: LD_VAR 0 1
72651: ARRAY
72652: ARRAY
72653: PPUSH
72654: CALL_OW 120
// end ; exit ;
72658: GO 72979
// end ; if tmp > 1 then
72660: LD_VAR 0 8
72664: PUSH
72665: LD_INT 1
72667: GREATER
72668: IFFALSE 72772
// for i = 2 to tmp do
72670: LD_ADDR_VAR 0 6
72674: PUSH
72675: DOUBLE
72676: LD_INT 2
72678: DEC
72679: ST_TO_ADDR
72680: LD_VAR 0 8
72684: PUSH
72685: FOR_TO
72686: IFFALSE 72770
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
72688: LD_VAR 0 8
72692: PUSH
72693: LD_VAR 0 6
72697: ARRAY
72698: PPUSH
72699: CALL_OW 461
72703: PUSH
72704: LD_INT 6
72706: EQUAL
72707: IFFALSE 72768
// begin x := tmp [ i ] ;
72709: LD_ADDR_VAR 0 9
72713: PUSH
72714: LD_VAR 0 8
72718: PUSH
72719: LD_VAR 0 6
72723: ARRAY
72724: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
72725: LD_ADDR_VAR 0 8
72729: PUSH
72730: LD_VAR 0 8
72734: PPUSH
72735: LD_VAR 0 6
72739: PPUSH
72740: CALL_OW 3
72744: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
72745: LD_ADDR_VAR 0 8
72749: PUSH
72750: LD_VAR 0 8
72754: PPUSH
72755: LD_INT 1
72757: PPUSH
72758: LD_VAR 0 9
72762: PPUSH
72763: CALL_OW 2
72767: ST_TO_ADDR
// end ;
72768: GO 72685
72770: POP
72771: POP
// for i in tmp do
72772: LD_ADDR_VAR 0 6
72776: PUSH
72777: LD_VAR 0 8
72781: PUSH
72782: FOR_IN
72783: IFFALSE 72852
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
72785: LD_VAR 0 6
72789: PPUSH
72790: CALL_OW 313
72794: PUSH
72795: LD_INT 6
72797: LESS
72798: PUSH
72799: LD_VAR 0 6
72803: PPUSH
72804: CALL_OW 266
72808: PUSH
72809: LD_INT 31
72811: PUSH
72812: LD_INT 32
72814: PUSH
72815: EMPTY
72816: LIST
72817: LIST
72818: IN
72819: NOT
72820: AND
72821: PUSH
72822: LD_VAR 0 6
72826: PPUSH
72827: CALL_OW 313
72831: PUSH
72832: LD_INT 0
72834: EQUAL
72835: OR
72836: IFFALSE 72850
// begin j := i ;
72838: LD_ADDR_VAR 0 7
72842: PUSH
72843: LD_VAR 0 6
72847: ST_TO_ADDR
// break ;
72848: GO 72852
// end ; end ;
72850: GO 72782
72852: POP
72853: POP
// if j then
72854: LD_VAR 0 7
72858: IFFALSE 72876
// ComEnterUnit ( unit , j ) else
72860: LD_VAR 0 3
72864: PPUSH
72865: LD_VAR 0 7
72869: PPUSH
72870: CALL_OW 120
72874: GO 72979
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
72876: LD_ADDR_VAR 0 10
72880: PUSH
72881: LD_VAR 0 2
72885: PPUSH
72886: LD_INT 2
72888: PUSH
72889: LD_INT 30
72891: PUSH
72892: LD_INT 0
72894: PUSH
72895: EMPTY
72896: LIST
72897: LIST
72898: PUSH
72899: LD_INT 30
72901: PUSH
72902: LD_INT 1
72904: PUSH
72905: EMPTY
72906: LIST
72907: LIST
72908: PUSH
72909: EMPTY
72910: LIST
72911: LIST
72912: LIST
72913: PPUSH
72914: CALL_OW 72
72918: ST_TO_ADDR
// if depot then
72919: LD_VAR 0 10
72923: IFFALSE 72979
// begin depot := NearestUnitToUnit ( depot , unit ) ;
72925: LD_ADDR_VAR 0 10
72929: PUSH
72930: LD_VAR 0 10
72934: PPUSH
72935: LD_VAR 0 3
72939: PPUSH
72940: CALL_OW 74
72944: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
72945: LD_VAR 0 3
72949: PPUSH
72950: LD_VAR 0 10
72954: PPUSH
72955: CALL_OW 296
72959: PUSH
72960: LD_INT 10
72962: GREATER
72963: IFFALSE 72979
// ComStandNearbyBuilding ( unit , depot ) ;
72965: LD_VAR 0 3
72969: PPUSH
72970: LD_VAR 0 10
72974: PPUSH
72975: CALL 15034 0 2
// end ; end ; end ;
72979: LD_VAR 0 5
72983: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
72984: LD_INT 0
72986: PPUSH
72987: PPUSH
72988: PPUSH
72989: PPUSH
// if not mc_bases then
72990: LD_EXP 63
72994: NOT
72995: IFFALSE 72999
// exit ;
72997: GO 73238
// for i = 1 to mc_bases do
72999: LD_ADDR_VAR 0 2
73003: PUSH
73004: DOUBLE
73005: LD_INT 1
73007: DEC
73008: ST_TO_ADDR
73009: LD_EXP 63
73013: PUSH
73014: FOR_TO
73015: IFFALSE 73236
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
73017: LD_ADDR_VAR 0 4
73021: PUSH
73022: LD_EXP 63
73026: PUSH
73027: LD_VAR 0 2
73031: ARRAY
73032: PPUSH
73033: LD_INT 21
73035: PUSH
73036: LD_INT 1
73038: PUSH
73039: EMPTY
73040: LIST
73041: LIST
73042: PPUSH
73043: CALL_OW 72
73047: PUSH
73048: LD_EXP 92
73052: PUSH
73053: LD_VAR 0 2
73057: ARRAY
73058: UNION
73059: ST_TO_ADDR
// if not tmp then
73060: LD_VAR 0 4
73064: NOT
73065: IFFALSE 73069
// continue ;
73067: GO 73014
// for j in tmp do
73069: LD_ADDR_VAR 0 3
73073: PUSH
73074: LD_VAR 0 4
73078: PUSH
73079: FOR_IN
73080: IFFALSE 73232
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
73082: LD_VAR 0 3
73086: PPUSH
73087: CALL_OW 110
73091: NOT
73092: PUSH
73093: LD_VAR 0 3
73097: PPUSH
73098: CALL_OW 314
73102: NOT
73103: AND
73104: PUSH
73105: LD_VAR 0 3
73109: PPUSH
73110: CALL_OW 311
73114: NOT
73115: AND
73116: PUSH
73117: LD_VAR 0 3
73121: PPUSH
73122: CALL_OW 310
73126: NOT
73127: AND
73128: PUSH
73129: LD_VAR 0 3
73133: PUSH
73134: LD_EXP 66
73138: PUSH
73139: LD_VAR 0 2
73143: ARRAY
73144: PUSH
73145: LD_INT 1
73147: ARRAY
73148: IN
73149: NOT
73150: AND
73151: PUSH
73152: LD_VAR 0 3
73156: PUSH
73157: LD_EXP 66
73161: PUSH
73162: LD_VAR 0 2
73166: ARRAY
73167: PUSH
73168: LD_INT 2
73170: ARRAY
73171: IN
73172: NOT
73173: AND
73174: PUSH
73175: LD_VAR 0 3
73179: PUSH
73180: LD_EXP 75
73184: PUSH
73185: LD_VAR 0 2
73189: ARRAY
73190: IN
73191: NOT
73192: AND
73193: IFFALSE 73230
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
73195: LD_VAR 0 2
73199: PPUSH
73200: LD_EXP 63
73204: PUSH
73205: LD_VAR 0 2
73209: ARRAY
73210: PPUSH
73211: LD_VAR 0 3
73215: PPUSH
73216: LD_VAR 0 3
73220: PPUSH
73221: CALL_OW 257
73225: PPUSH
73226: CALL 72002 0 4
// end ;
73230: GO 73079
73232: POP
73233: POP
// end ;
73234: GO 73014
73236: POP
73237: POP
// end ;
73238: LD_VAR 0 1
73242: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
73243: LD_INT 0
73245: PPUSH
73246: PPUSH
73247: PPUSH
73248: PPUSH
73249: PPUSH
73250: PPUSH
// if not mc_bases [ base ] then
73251: LD_EXP 63
73255: PUSH
73256: LD_VAR 0 1
73260: ARRAY
73261: NOT
73262: IFFALSE 73266
// exit ;
73264: GO 73448
// tmp := [ ] ;
73266: LD_ADDR_VAR 0 6
73270: PUSH
73271: EMPTY
73272: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
73273: LD_ADDR_VAR 0 7
73277: PUSH
73278: LD_VAR 0 3
73282: PPUSH
73283: LD_INT 0
73285: PPUSH
73286: CALL_OW 517
73290: ST_TO_ADDR
// if not list then
73291: LD_VAR 0 7
73295: NOT
73296: IFFALSE 73300
// exit ;
73298: GO 73448
// for i = 1 to amount do
73300: LD_ADDR_VAR 0 5
73304: PUSH
73305: DOUBLE
73306: LD_INT 1
73308: DEC
73309: ST_TO_ADDR
73310: LD_VAR 0 2
73314: PUSH
73315: FOR_TO
73316: IFFALSE 73396
// begin x := rand ( 1 , list [ 1 ] ) ;
73318: LD_ADDR_VAR 0 8
73322: PUSH
73323: LD_INT 1
73325: PPUSH
73326: LD_VAR 0 7
73330: PUSH
73331: LD_INT 1
73333: ARRAY
73334: PPUSH
73335: CALL_OW 12
73339: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
73340: LD_ADDR_VAR 0 6
73344: PUSH
73345: LD_VAR 0 6
73349: PPUSH
73350: LD_VAR 0 5
73354: PPUSH
73355: LD_VAR 0 7
73359: PUSH
73360: LD_INT 1
73362: ARRAY
73363: PUSH
73364: LD_VAR 0 8
73368: ARRAY
73369: PUSH
73370: LD_VAR 0 7
73374: PUSH
73375: LD_INT 2
73377: ARRAY
73378: PUSH
73379: LD_VAR 0 8
73383: ARRAY
73384: PUSH
73385: EMPTY
73386: LIST
73387: LIST
73388: PPUSH
73389: CALL_OW 1
73393: ST_TO_ADDR
// end ;
73394: GO 73315
73396: POP
73397: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
73398: LD_ADDR_EXP 76
73402: PUSH
73403: LD_EXP 76
73407: PPUSH
73408: LD_VAR 0 1
73412: PPUSH
73413: LD_VAR 0 6
73417: PPUSH
73418: CALL_OW 1
73422: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
73423: LD_ADDR_EXP 78
73427: PUSH
73428: LD_EXP 78
73432: PPUSH
73433: LD_VAR 0 1
73437: PPUSH
73438: LD_VAR 0 3
73442: PPUSH
73443: CALL_OW 1
73447: ST_TO_ADDR
// end ;
73448: LD_VAR 0 4
73452: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
73453: LD_INT 0
73455: PPUSH
// if not mc_bases [ base ] then
73456: LD_EXP 63
73460: PUSH
73461: LD_VAR 0 1
73465: ARRAY
73466: NOT
73467: IFFALSE 73471
// exit ;
73469: GO 73496
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
73471: LD_ADDR_EXP 68
73475: PUSH
73476: LD_EXP 68
73480: PPUSH
73481: LD_VAR 0 1
73485: PPUSH
73486: LD_VAR 0 2
73490: PPUSH
73491: CALL_OW 1
73495: ST_TO_ADDR
// end ;
73496: LD_VAR 0 3
73500: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
73501: LD_INT 0
73503: PPUSH
// if not mc_bases [ base ] then
73504: LD_EXP 63
73508: PUSH
73509: LD_VAR 0 1
73513: ARRAY
73514: NOT
73515: IFFALSE 73519
// exit ;
73517: GO 73556
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
73519: LD_ADDR_EXP 68
73523: PUSH
73524: LD_EXP 68
73528: PPUSH
73529: LD_VAR 0 1
73533: PPUSH
73534: LD_EXP 68
73538: PUSH
73539: LD_VAR 0 1
73543: ARRAY
73544: PUSH
73545: LD_VAR 0 2
73549: UNION
73550: PPUSH
73551: CALL_OW 1
73555: ST_TO_ADDR
// end ;
73556: LD_VAR 0 3
73560: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
73561: LD_INT 0
73563: PPUSH
// if not mc_bases [ base ] then
73564: LD_EXP 63
73568: PUSH
73569: LD_VAR 0 1
73573: ARRAY
73574: NOT
73575: IFFALSE 73579
// exit ;
73577: GO 73604
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
73579: LD_ADDR_EXP 84
73583: PUSH
73584: LD_EXP 84
73588: PPUSH
73589: LD_VAR 0 1
73593: PPUSH
73594: LD_VAR 0 2
73598: PPUSH
73599: CALL_OW 1
73603: ST_TO_ADDR
// end ;
73604: LD_VAR 0 3
73608: RET
// export function MC_InsertProduceList ( base , components ) ; begin
73609: LD_INT 0
73611: PPUSH
// if not mc_bases [ base ] then
73612: LD_EXP 63
73616: PUSH
73617: LD_VAR 0 1
73621: ARRAY
73622: NOT
73623: IFFALSE 73627
// exit ;
73625: GO 73664
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
73627: LD_ADDR_EXP 84
73631: PUSH
73632: LD_EXP 84
73636: PPUSH
73637: LD_VAR 0 1
73641: PPUSH
73642: LD_EXP 84
73646: PUSH
73647: LD_VAR 0 1
73651: ARRAY
73652: PUSH
73653: LD_VAR 0 2
73657: ADD
73658: PPUSH
73659: CALL_OW 1
73663: ST_TO_ADDR
// end ;
73664: LD_VAR 0 3
73668: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
73669: LD_INT 0
73671: PPUSH
// if not mc_bases [ base ] then
73672: LD_EXP 63
73676: PUSH
73677: LD_VAR 0 1
73681: ARRAY
73682: NOT
73683: IFFALSE 73687
// exit ;
73685: GO 73741
// mc_defender := Replace ( mc_defender , base , deflist ) ;
73687: LD_ADDR_EXP 85
73691: PUSH
73692: LD_EXP 85
73696: PPUSH
73697: LD_VAR 0 1
73701: PPUSH
73702: LD_VAR 0 2
73706: PPUSH
73707: CALL_OW 1
73711: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
73712: LD_ADDR_EXP 74
73716: PUSH
73717: LD_EXP 74
73721: PPUSH
73722: LD_VAR 0 1
73726: PPUSH
73727: LD_VAR 0 2
73731: PUSH
73732: LD_INT 0
73734: PLUS
73735: PPUSH
73736: CALL_OW 1
73740: ST_TO_ADDR
// end ;
73741: LD_VAR 0 3
73745: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
73746: LD_INT 0
73748: PPUSH
// if not mc_bases [ base ] then
73749: LD_EXP 63
73753: PUSH
73754: LD_VAR 0 1
73758: ARRAY
73759: NOT
73760: IFFALSE 73764
// exit ;
73762: GO 73789
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
73764: LD_ADDR_EXP 74
73768: PUSH
73769: LD_EXP 74
73773: PPUSH
73774: LD_VAR 0 1
73778: PPUSH
73779: LD_VAR 0 2
73783: PPUSH
73784: CALL_OW 1
73788: ST_TO_ADDR
// end ;
73789: LD_VAR 0 3
73793: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
73794: LD_INT 0
73796: PPUSH
73797: PPUSH
73798: PPUSH
73799: PPUSH
// if not mc_bases [ base ] then
73800: LD_EXP 63
73804: PUSH
73805: LD_VAR 0 1
73809: ARRAY
73810: NOT
73811: IFFALSE 73815
// exit ;
73813: GO 73880
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
73815: LD_ADDR_EXP 83
73819: PUSH
73820: LD_EXP 83
73824: PPUSH
73825: LD_VAR 0 1
73829: PUSH
73830: LD_EXP 83
73834: PUSH
73835: LD_VAR 0 1
73839: ARRAY
73840: PUSH
73841: LD_INT 1
73843: PLUS
73844: PUSH
73845: EMPTY
73846: LIST
73847: LIST
73848: PPUSH
73849: LD_VAR 0 1
73853: PUSH
73854: LD_VAR 0 2
73858: PUSH
73859: LD_VAR 0 3
73863: PUSH
73864: LD_VAR 0 4
73868: PUSH
73869: EMPTY
73870: LIST
73871: LIST
73872: LIST
73873: LIST
73874: PPUSH
73875: CALL 18420 0 3
73879: ST_TO_ADDR
// end ;
73880: LD_VAR 0 5
73884: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
73885: LD_INT 0
73887: PPUSH
// if not mc_bases [ base ] then
73888: LD_EXP 63
73892: PUSH
73893: LD_VAR 0 1
73897: ARRAY
73898: NOT
73899: IFFALSE 73903
// exit ;
73901: GO 73928
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
73903: LD_ADDR_EXP 100
73907: PUSH
73908: LD_EXP 100
73912: PPUSH
73913: LD_VAR 0 1
73917: PPUSH
73918: LD_VAR 0 2
73922: PPUSH
73923: CALL_OW 1
73927: ST_TO_ADDR
// end ;
73928: LD_VAR 0 3
73932: RET
// export function MC_GetMinesField ( base ) ; begin
73933: LD_INT 0
73935: PPUSH
// result := mc_mines [ base ] ;
73936: LD_ADDR_VAR 0 2
73940: PUSH
73941: LD_EXP 76
73945: PUSH
73946: LD_VAR 0 1
73950: ARRAY
73951: ST_TO_ADDR
// end ;
73952: LD_VAR 0 2
73956: RET
// export function MC_GetProduceList ( base ) ; begin
73957: LD_INT 0
73959: PPUSH
// result := mc_produce [ base ] ;
73960: LD_ADDR_VAR 0 2
73964: PUSH
73965: LD_EXP 84
73969: PUSH
73970: LD_VAR 0 1
73974: ARRAY
73975: ST_TO_ADDR
// end ;
73976: LD_VAR 0 2
73980: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
73981: LD_INT 0
73983: PPUSH
73984: PPUSH
// if not mc_bases then
73985: LD_EXP 63
73989: NOT
73990: IFFALSE 73994
// exit ;
73992: GO 74059
// if mc_bases [ base ] then
73994: LD_EXP 63
73998: PUSH
73999: LD_VAR 0 1
74003: ARRAY
74004: IFFALSE 74059
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
74006: LD_ADDR_VAR 0 3
74010: PUSH
74011: LD_EXP 63
74015: PUSH
74016: LD_VAR 0 1
74020: ARRAY
74021: PPUSH
74022: LD_INT 30
74024: PUSH
74025: LD_VAR 0 2
74029: PUSH
74030: EMPTY
74031: LIST
74032: LIST
74033: PPUSH
74034: CALL_OW 72
74038: ST_TO_ADDR
// if result then
74039: LD_VAR 0 3
74043: IFFALSE 74059
// result := result [ 1 ] ;
74045: LD_ADDR_VAR 0 3
74049: PUSH
74050: LD_VAR 0 3
74054: PUSH
74055: LD_INT 1
74057: ARRAY
74058: ST_TO_ADDR
// end ; end ;
74059: LD_VAR 0 3
74063: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
74064: LD_INT 0
74066: PPUSH
74067: PPUSH
// if not mc_bases then
74068: LD_EXP 63
74072: NOT
74073: IFFALSE 74077
// exit ;
74075: GO 74122
// if mc_bases [ base ] then
74077: LD_EXP 63
74081: PUSH
74082: LD_VAR 0 1
74086: ARRAY
74087: IFFALSE 74122
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
74089: LD_ADDR_VAR 0 3
74093: PUSH
74094: LD_EXP 63
74098: PUSH
74099: LD_VAR 0 1
74103: ARRAY
74104: PPUSH
74105: LD_INT 30
74107: PUSH
74108: LD_VAR 0 2
74112: PUSH
74113: EMPTY
74114: LIST
74115: LIST
74116: PPUSH
74117: CALL_OW 72
74121: ST_TO_ADDR
// end ;
74122: LD_VAR 0 3
74126: RET
// export function MC_SetTame ( base , area ) ; begin
74127: LD_INT 0
74129: PPUSH
// if not mc_bases or not base then
74130: LD_EXP 63
74134: NOT
74135: PUSH
74136: LD_VAR 0 1
74140: NOT
74141: OR
74142: IFFALSE 74146
// exit ;
74144: GO 74171
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
74146: LD_ADDR_EXP 91
74150: PUSH
74151: LD_EXP 91
74155: PPUSH
74156: LD_VAR 0 1
74160: PPUSH
74161: LD_VAR 0 2
74165: PPUSH
74166: CALL_OW 1
74170: ST_TO_ADDR
// end ;
74171: LD_VAR 0 3
74175: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
74176: LD_INT 0
74178: PPUSH
74179: PPUSH
// if not mc_bases or not base then
74180: LD_EXP 63
74184: NOT
74185: PUSH
74186: LD_VAR 0 1
74190: NOT
74191: OR
74192: IFFALSE 74196
// exit ;
74194: GO 74298
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
74196: LD_ADDR_VAR 0 4
74200: PUSH
74201: LD_EXP 63
74205: PUSH
74206: LD_VAR 0 1
74210: ARRAY
74211: PPUSH
74212: LD_INT 30
74214: PUSH
74215: LD_VAR 0 2
74219: PUSH
74220: EMPTY
74221: LIST
74222: LIST
74223: PPUSH
74224: CALL_OW 72
74228: ST_TO_ADDR
// if not tmp then
74229: LD_VAR 0 4
74233: NOT
74234: IFFALSE 74238
// exit ;
74236: GO 74298
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
74238: LD_ADDR_EXP 95
74242: PUSH
74243: LD_EXP 95
74247: PPUSH
74248: LD_VAR 0 1
74252: PPUSH
74253: LD_EXP 95
74257: PUSH
74258: LD_VAR 0 1
74262: ARRAY
74263: PPUSH
74264: LD_EXP 95
74268: PUSH
74269: LD_VAR 0 1
74273: ARRAY
74274: PUSH
74275: LD_INT 1
74277: PLUS
74278: PPUSH
74279: LD_VAR 0 4
74283: PUSH
74284: LD_INT 1
74286: ARRAY
74287: PPUSH
74288: CALL_OW 2
74292: PPUSH
74293: CALL_OW 1
74297: ST_TO_ADDR
// end ;
74298: LD_VAR 0 3
74302: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
74303: LD_INT 0
74305: PPUSH
74306: PPUSH
// if not mc_bases or not base or not kinds then
74307: LD_EXP 63
74311: NOT
74312: PUSH
74313: LD_VAR 0 1
74317: NOT
74318: OR
74319: PUSH
74320: LD_VAR 0 2
74324: NOT
74325: OR
74326: IFFALSE 74330
// exit ;
74328: GO 74391
// for i in kinds do
74330: LD_ADDR_VAR 0 4
74334: PUSH
74335: LD_VAR 0 2
74339: PUSH
74340: FOR_IN
74341: IFFALSE 74389
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
74343: LD_ADDR_EXP 97
74347: PUSH
74348: LD_EXP 97
74352: PPUSH
74353: LD_VAR 0 1
74357: PUSH
74358: LD_EXP 97
74362: PUSH
74363: LD_VAR 0 1
74367: ARRAY
74368: PUSH
74369: LD_INT 1
74371: PLUS
74372: PUSH
74373: EMPTY
74374: LIST
74375: LIST
74376: PPUSH
74377: LD_VAR 0 4
74381: PPUSH
74382: CALL 18420 0 3
74386: ST_TO_ADDR
74387: GO 74340
74389: POP
74390: POP
// end ;
74391: LD_VAR 0 3
74395: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
74396: LD_INT 0
74398: PPUSH
// if not mc_bases or not base or not areas then
74399: LD_EXP 63
74403: NOT
74404: PUSH
74405: LD_VAR 0 1
74409: NOT
74410: OR
74411: PUSH
74412: LD_VAR 0 2
74416: NOT
74417: OR
74418: IFFALSE 74422
// exit ;
74420: GO 74447
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
74422: LD_ADDR_EXP 81
74426: PUSH
74427: LD_EXP 81
74431: PPUSH
74432: LD_VAR 0 1
74436: PPUSH
74437: LD_VAR 0 2
74441: PPUSH
74442: CALL_OW 1
74446: ST_TO_ADDR
// end ;
74447: LD_VAR 0 3
74451: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
74452: LD_INT 0
74454: PPUSH
// if not mc_bases or not base or not teleports_exit then
74455: LD_EXP 63
74459: NOT
74460: PUSH
74461: LD_VAR 0 1
74465: NOT
74466: OR
74467: PUSH
74468: LD_VAR 0 2
74472: NOT
74473: OR
74474: IFFALSE 74478
// exit ;
74476: GO 74503
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
74478: LD_ADDR_EXP 98
74482: PUSH
74483: LD_EXP 98
74487: PPUSH
74488: LD_VAR 0 1
74492: PPUSH
74493: LD_VAR 0 2
74497: PPUSH
74498: CALL_OW 1
74502: ST_TO_ADDR
// end ;
74503: LD_VAR 0 3
74507: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
74508: LD_INT 0
74510: PPUSH
74511: PPUSH
74512: PPUSH
// if not mc_bases or not base or not ext_list then
74513: LD_EXP 63
74517: NOT
74518: PUSH
74519: LD_VAR 0 1
74523: NOT
74524: OR
74525: PUSH
74526: LD_VAR 0 5
74530: NOT
74531: OR
74532: IFFALSE 74536
// exit ;
74534: GO 74709
// tmp := GetFacExtXYD ( x , y , d ) ;
74536: LD_ADDR_VAR 0 8
74540: PUSH
74541: LD_VAR 0 2
74545: PPUSH
74546: LD_VAR 0 3
74550: PPUSH
74551: LD_VAR 0 4
74555: PPUSH
74556: CALL 47099 0 3
74560: ST_TO_ADDR
// if not tmp then
74561: LD_VAR 0 8
74565: NOT
74566: IFFALSE 74570
// exit ;
74568: GO 74709
// for i in tmp do
74570: LD_ADDR_VAR 0 7
74574: PUSH
74575: LD_VAR 0 8
74579: PUSH
74580: FOR_IN
74581: IFFALSE 74707
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
74583: LD_ADDR_EXP 68
74587: PUSH
74588: LD_EXP 68
74592: PPUSH
74593: LD_VAR 0 1
74597: PPUSH
74598: LD_EXP 68
74602: PUSH
74603: LD_VAR 0 1
74607: ARRAY
74608: PPUSH
74609: LD_EXP 68
74613: PUSH
74614: LD_VAR 0 1
74618: ARRAY
74619: PUSH
74620: LD_INT 1
74622: PLUS
74623: PPUSH
74624: LD_VAR 0 5
74628: PUSH
74629: LD_INT 1
74631: ARRAY
74632: PUSH
74633: LD_VAR 0 7
74637: PUSH
74638: LD_INT 1
74640: ARRAY
74641: PUSH
74642: LD_VAR 0 7
74646: PUSH
74647: LD_INT 2
74649: ARRAY
74650: PUSH
74651: LD_VAR 0 7
74655: PUSH
74656: LD_INT 3
74658: ARRAY
74659: PUSH
74660: EMPTY
74661: LIST
74662: LIST
74663: LIST
74664: LIST
74665: PPUSH
74666: CALL_OW 2
74670: PPUSH
74671: CALL_OW 1
74675: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
74676: LD_ADDR_VAR 0 5
74680: PUSH
74681: LD_VAR 0 5
74685: PPUSH
74686: LD_INT 1
74688: PPUSH
74689: CALL_OW 3
74693: ST_TO_ADDR
// if not ext_list then
74694: LD_VAR 0 5
74698: NOT
74699: IFFALSE 74705
// exit ;
74701: POP
74702: POP
74703: GO 74709
// end ;
74705: GO 74580
74707: POP
74708: POP
// end ;
74709: LD_VAR 0 6
74713: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
74714: LD_INT 0
74716: PPUSH
// if not mc_bases or not base or not weapon_list then
74717: LD_EXP 63
74721: NOT
74722: PUSH
74723: LD_VAR 0 1
74727: NOT
74728: OR
74729: PUSH
74730: LD_VAR 0 2
74734: NOT
74735: OR
74736: IFFALSE 74740
// exit ;
74738: GO 74765
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
74740: LD_ADDR_EXP 102
74744: PUSH
74745: LD_EXP 102
74749: PPUSH
74750: LD_VAR 0 1
74754: PPUSH
74755: LD_VAR 0 2
74759: PPUSH
74760: CALL_OW 1
74764: ST_TO_ADDR
// end ;
74765: LD_VAR 0 3
74769: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
74770: LD_INT 0
74772: PPUSH
// if not mc_bases or not base or not tech_list then
74773: LD_EXP 63
74777: NOT
74778: PUSH
74779: LD_VAR 0 1
74783: NOT
74784: OR
74785: PUSH
74786: LD_VAR 0 2
74790: NOT
74791: OR
74792: IFFALSE 74796
// exit ;
74794: GO 74821
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
74796: LD_ADDR_EXP 90
74800: PUSH
74801: LD_EXP 90
74805: PPUSH
74806: LD_VAR 0 1
74810: PPUSH
74811: LD_VAR 0 2
74815: PPUSH
74816: CALL_OW 1
74820: ST_TO_ADDR
// end ;
74821: LD_VAR 0 3
74825: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
74826: LD_INT 0
74828: PPUSH
// if not mc_bases or not parking_area or not base then
74829: LD_EXP 63
74833: NOT
74834: PUSH
74835: LD_VAR 0 2
74839: NOT
74840: OR
74841: PUSH
74842: LD_VAR 0 1
74846: NOT
74847: OR
74848: IFFALSE 74852
// exit ;
74850: GO 74877
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
74852: LD_ADDR_EXP 87
74856: PUSH
74857: LD_EXP 87
74861: PPUSH
74862: LD_VAR 0 1
74866: PPUSH
74867: LD_VAR 0 2
74871: PPUSH
74872: CALL_OW 1
74876: ST_TO_ADDR
// end ;
74877: LD_VAR 0 3
74881: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
74882: LD_INT 0
74884: PPUSH
// if not mc_bases or not base or not scan_area then
74885: LD_EXP 63
74889: NOT
74890: PUSH
74891: LD_VAR 0 1
74895: NOT
74896: OR
74897: PUSH
74898: LD_VAR 0 2
74902: NOT
74903: OR
74904: IFFALSE 74908
// exit ;
74906: GO 74933
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
74908: LD_ADDR_EXP 88
74912: PUSH
74913: LD_EXP 88
74917: PPUSH
74918: LD_VAR 0 1
74922: PPUSH
74923: LD_VAR 0 2
74927: PPUSH
74928: CALL_OW 1
74932: ST_TO_ADDR
// end ;
74933: LD_VAR 0 3
74937: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
74938: LD_INT 0
74940: PPUSH
74941: PPUSH
// if not mc_bases or not base then
74942: LD_EXP 63
74946: NOT
74947: PUSH
74948: LD_VAR 0 1
74952: NOT
74953: OR
74954: IFFALSE 74958
// exit ;
74956: GO 75022
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
74958: LD_ADDR_VAR 0 3
74962: PUSH
74963: LD_INT 1
74965: PUSH
74966: LD_INT 2
74968: PUSH
74969: LD_INT 3
74971: PUSH
74972: LD_INT 4
74974: PUSH
74975: LD_INT 11
74977: PUSH
74978: EMPTY
74979: LIST
74980: LIST
74981: LIST
74982: LIST
74983: LIST
74984: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
74985: LD_ADDR_EXP 90
74989: PUSH
74990: LD_EXP 90
74994: PPUSH
74995: LD_VAR 0 1
74999: PPUSH
75000: LD_EXP 90
75004: PUSH
75005: LD_VAR 0 1
75009: ARRAY
75010: PUSH
75011: LD_VAR 0 3
75015: DIFF
75016: PPUSH
75017: CALL_OW 1
75021: ST_TO_ADDR
// end ;
75022: LD_VAR 0 2
75026: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
75027: LD_INT 0
75029: PPUSH
// result := mc_vehicles [ base ] ;
75030: LD_ADDR_VAR 0 3
75034: PUSH
75035: LD_EXP 82
75039: PUSH
75040: LD_VAR 0 1
75044: ARRAY
75045: ST_TO_ADDR
// if onlyCombat then
75046: LD_VAR 0 2
75050: IFFALSE 75215
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
75052: LD_ADDR_VAR 0 3
75056: PUSH
75057: LD_VAR 0 3
75061: PUSH
75062: LD_VAR 0 3
75066: PPUSH
75067: LD_INT 2
75069: PUSH
75070: LD_INT 34
75072: PUSH
75073: LD_INT 12
75075: PUSH
75076: EMPTY
75077: LIST
75078: LIST
75079: PUSH
75080: LD_INT 34
75082: PUSH
75083: LD_INT 51
75085: PUSH
75086: EMPTY
75087: LIST
75088: LIST
75089: PUSH
75090: LD_INT 34
75092: PUSH
75093: LD_EXP 49
75097: PUSH
75098: EMPTY
75099: LIST
75100: LIST
75101: PUSH
75102: LD_INT 34
75104: PUSH
75105: LD_INT 32
75107: PUSH
75108: EMPTY
75109: LIST
75110: LIST
75111: PUSH
75112: LD_INT 34
75114: PUSH
75115: LD_INT 13
75117: PUSH
75118: EMPTY
75119: LIST
75120: LIST
75121: PUSH
75122: LD_INT 34
75124: PUSH
75125: LD_INT 52
75127: PUSH
75128: EMPTY
75129: LIST
75130: LIST
75131: PUSH
75132: LD_INT 34
75134: PUSH
75135: LD_INT 14
75137: PUSH
75138: EMPTY
75139: LIST
75140: LIST
75141: PUSH
75142: LD_INT 34
75144: PUSH
75145: LD_INT 53
75147: PUSH
75148: EMPTY
75149: LIST
75150: LIST
75151: PUSH
75152: LD_INT 34
75154: PUSH
75155: LD_EXP 48
75159: PUSH
75160: EMPTY
75161: LIST
75162: LIST
75163: PUSH
75164: LD_INT 34
75166: PUSH
75167: LD_INT 31
75169: PUSH
75170: EMPTY
75171: LIST
75172: LIST
75173: PUSH
75174: LD_INT 34
75176: PUSH
75177: LD_INT 48
75179: PUSH
75180: EMPTY
75181: LIST
75182: LIST
75183: PUSH
75184: LD_INT 34
75186: PUSH
75187: LD_INT 8
75189: PUSH
75190: EMPTY
75191: LIST
75192: LIST
75193: PUSH
75194: EMPTY
75195: LIST
75196: LIST
75197: LIST
75198: LIST
75199: LIST
75200: LIST
75201: LIST
75202: LIST
75203: LIST
75204: LIST
75205: LIST
75206: LIST
75207: LIST
75208: PPUSH
75209: CALL_OW 72
75213: DIFF
75214: ST_TO_ADDR
// end ; end_of_file
75215: LD_VAR 0 3
75219: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
75220: LD_INT 0
75222: PPUSH
75223: PPUSH
75224: PPUSH
// if not mc_bases or not skirmish then
75225: LD_EXP 63
75229: NOT
75230: PUSH
75231: LD_EXP 61
75235: NOT
75236: OR
75237: IFFALSE 75241
// exit ;
75239: GO 75406
// for i = 1 to mc_bases do
75241: LD_ADDR_VAR 0 4
75245: PUSH
75246: DOUBLE
75247: LD_INT 1
75249: DEC
75250: ST_TO_ADDR
75251: LD_EXP 63
75255: PUSH
75256: FOR_TO
75257: IFFALSE 75404
// begin if sci in mc_bases [ i ] then
75259: LD_VAR 0 2
75263: PUSH
75264: LD_EXP 63
75268: PUSH
75269: LD_VAR 0 4
75273: ARRAY
75274: IN
75275: IFFALSE 75402
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
75277: LD_ADDR_EXP 92
75281: PUSH
75282: LD_EXP 92
75286: PPUSH
75287: LD_VAR 0 4
75291: PUSH
75292: LD_EXP 92
75296: PUSH
75297: LD_VAR 0 4
75301: ARRAY
75302: PUSH
75303: LD_INT 1
75305: PLUS
75306: PUSH
75307: EMPTY
75308: LIST
75309: LIST
75310: PPUSH
75311: LD_VAR 0 1
75315: PPUSH
75316: CALL 18420 0 3
75320: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
75321: LD_ADDR_VAR 0 5
75325: PUSH
75326: LD_EXP 63
75330: PUSH
75331: LD_VAR 0 4
75335: ARRAY
75336: PPUSH
75337: LD_INT 2
75339: PUSH
75340: LD_INT 30
75342: PUSH
75343: LD_INT 0
75345: PUSH
75346: EMPTY
75347: LIST
75348: LIST
75349: PUSH
75350: LD_INT 30
75352: PUSH
75353: LD_INT 1
75355: PUSH
75356: EMPTY
75357: LIST
75358: LIST
75359: PUSH
75360: EMPTY
75361: LIST
75362: LIST
75363: LIST
75364: PPUSH
75365: CALL_OW 72
75369: PPUSH
75370: LD_VAR 0 1
75374: PPUSH
75375: CALL_OW 74
75379: ST_TO_ADDR
// if tmp then
75380: LD_VAR 0 5
75384: IFFALSE 75400
// ComStandNearbyBuilding ( ape , tmp ) ;
75386: LD_VAR 0 1
75390: PPUSH
75391: LD_VAR 0 5
75395: PPUSH
75396: CALL 15034 0 2
// break ;
75400: GO 75404
// end ; end ;
75402: GO 75256
75404: POP
75405: POP
// end ;
75406: LD_VAR 0 3
75410: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
75411: LD_INT 0
75413: PPUSH
75414: PPUSH
75415: PPUSH
// if not mc_bases or not skirmish then
75416: LD_EXP 63
75420: NOT
75421: PUSH
75422: LD_EXP 61
75426: NOT
75427: OR
75428: IFFALSE 75432
// exit ;
75430: GO 75521
// for i = 1 to mc_bases do
75432: LD_ADDR_VAR 0 4
75436: PUSH
75437: DOUBLE
75438: LD_INT 1
75440: DEC
75441: ST_TO_ADDR
75442: LD_EXP 63
75446: PUSH
75447: FOR_TO
75448: IFFALSE 75519
// begin if building in mc_busy_turret_list [ i ] then
75450: LD_VAR 0 1
75454: PUSH
75455: LD_EXP 73
75459: PUSH
75460: LD_VAR 0 4
75464: ARRAY
75465: IN
75466: IFFALSE 75517
// begin tmp := mc_busy_turret_list [ i ] diff building ;
75468: LD_ADDR_VAR 0 5
75472: PUSH
75473: LD_EXP 73
75477: PUSH
75478: LD_VAR 0 4
75482: ARRAY
75483: PUSH
75484: LD_VAR 0 1
75488: DIFF
75489: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
75490: LD_ADDR_EXP 73
75494: PUSH
75495: LD_EXP 73
75499: PPUSH
75500: LD_VAR 0 4
75504: PPUSH
75505: LD_VAR 0 5
75509: PPUSH
75510: CALL_OW 1
75514: ST_TO_ADDR
// break ;
75515: GO 75519
// end ; end ;
75517: GO 75447
75519: POP
75520: POP
// end ;
75521: LD_VAR 0 3
75525: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
75526: LD_INT 0
75528: PPUSH
75529: PPUSH
75530: PPUSH
// if not mc_bases or not skirmish then
75531: LD_EXP 63
75535: NOT
75536: PUSH
75537: LD_EXP 61
75541: NOT
75542: OR
75543: IFFALSE 75547
// exit ;
75545: GO 75746
// for i = 1 to mc_bases do
75547: LD_ADDR_VAR 0 5
75551: PUSH
75552: DOUBLE
75553: LD_INT 1
75555: DEC
75556: ST_TO_ADDR
75557: LD_EXP 63
75561: PUSH
75562: FOR_TO
75563: IFFALSE 75744
// if building in mc_bases [ i ] then
75565: LD_VAR 0 1
75569: PUSH
75570: LD_EXP 63
75574: PUSH
75575: LD_VAR 0 5
75579: ARRAY
75580: IN
75581: IFFALSE 75742
// begin tmp := mc_bases [ i ] diff building ;
75583: LD_ADDR_VAR 0 6
75587: PUSH
75588: LD_EXP 63
75592: PUSH
75593: LD_VAR 0 5
75597: ARRAY
75598: PUSH
75599: LD_VAR 0 1
75603: DIFF
75604: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
75605: LD_ADDR_EXP 63
75609: PUSH
75610: LD_EXP 63
75614: PPUSH
75615: LD_VAR 0 5
75619: PPUSH
75620: LD_VAR 0 6
75624: PPUSH
75625: CALL_OW 1
75629: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
75630: LD_VAR 0 1
75634: PUSH
75635: LD_EXP 71
75639: PUSH
75640: LD_VAR 0 5
75644: ARRAY
75645: IN
75646: IFFALSE 75685
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
75648: LD_ADDR_EXP 71
75652: PUSH
75653: LD_EXP 71
75657: PPUSH
75658: LD_VAR 0 5
75662: PPUSH
75663: LD_EXP 71
75667: PUSH
75668: LD_VAR 0 5
75672: ARRAY
75673: PUSH
75674: LD_VAR 0 1
75678: DIFF
75679: PPUSH
75680: CALL_OW 1
75684: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
75685: LD_VAR 0 1
75689: PUSH
75690: LD_EXP 72
75694: PUSH
75695: LD_VAR 0 5
75699: ARRAY
75700: IN
75701: IFFALSE 75740
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
75703: LD_ADDR_EXP 72
75707: PUSH
75708: LD_EXP 72
75712: PPUSH
75713: LD_VAR 0 5
75717: PPUSH
75718: LD_EXP 72
75722: PUSH
75723: LD_VAR 0 5
75727: ARRAY
75728: PUSH
75729: LD_VAR 0 1
75733: DIFF
75734: PPUSH
75735: CALL_OW 1
75739: ST_TO_ADDR
// break ;
75740: GO 75744
// end ;
75742: GO 75562
75744: POP
75745: POP
// end ;
75746: LD_VAR 0 4
75750: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
75751: LD_INT 0
75753: PPUSH
75754: PPUSH
75755: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
75756: LD_EXP 63
75760: NOT
75761: PUSH
75762: LD_EXP 61
75766: NOT
75767: OR
75768: PUSH
75769: LD_VAR 0 3
75773: PUSH
75774: LD_EXP 89
75778: IN
75779: NOT
75780: OR
75781: IFFALSE 75785
// exit ;
75783: GO 75908
// for i = 1 to mc_vehicles do
75785: LD_ADDR_VAR 0 6
75789: PUSH
75790: DOUBLE
75791: LD_INT 1
75793: DEC
75794: ST_TO_ADDR
75795: LD_EXP 82
75799: PUSH
75800: FOR_TO
75801: IFFALSE 75906
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
75803: LD_VAR 0 2
75807: PUSH
75808: LD_EXP 82
75812: PUSH
75813: LD_VAR 0 6
75817: ARRAY
75818: IN
75819: PUSH
75820: LD_VAR 0 1
75824: PUSH
75825: LD_EXP 82
75829: PUSH
75830: LD_VAR 0 6
75834: ARRAY
75835: IN
75836: OR
75837: IFFALSE 75904
// begin tmp := mc_vehicles [ i ] diff old ;
75839: LD_ADDR_VAR 0 7
75843: PUSH
75844: LD_EXP 82
75848: PUSH
75849: LD_VAR 0 6
75853: ARRAY
75854: PUSH
75855: LD_VAR 0 2
75859: DIFF
75860: ST_TO_ADDR
// tmp := tmp diff new ;
75861: LD_ADDR_VAR 0 7
75865: PUSH
75866: LD_VAR 0 7
75870: PUSH
75871: LD_VAR 0 1
75875: DIFF
75876: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
75877: LD_ADDR_EXP 82
75881: PUSH
75882: LD_EXP 82
75886: PPUSH
75887: LD_VAR 0 6
75891: PPUSH
75892: LD_VAR 0 7
75896: PPUSH
75897: CALL_OW 1
75901: ST_TO_ADDR
// break ;
75902: GO 75906
// end ;
75904: GO 75800
75906: POP
75907: POP
// end ;
75908: LD_VAR 0 5
75912: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
75913: LD_INT 0
75915: PPUSH
75916: PPUSH
75917: PPUSH
75918: PPUSH
// if not mc_bases or not skirmish then
75919: LD_EXP 63
75923: NOT
75924: PUSH
75925: LD_EXP 61
75929: NOT
75930: OR
75931: IFFALSE 75935
// exit ;
75933: GO 76312
// side := GetSide ( vehicle ) ;
75935: LD_ADDR_VAR 0 5
75939: PUSH
75940: LD_VAR 0 1
75944: PPUSH
75945: CALL_OW 255
75949: ST_TO_ADDR
// for i = 1 to mc_bases do
75950: LD_ADDR_VAR 0 4
75954: PUSH
75955: DOUBLE
75956: LD_INT 1
75958: DEC
75959: ST_TO_ADDR
75960: LD_EXP 63
75964: PUSH
75965: FOR_TO
75966: IFFALSE 76310
// begin if factory in mc_bases [ i ] then
75968: LD_VAR 0 2
75972: PUSH
75973: LD_EXP 63
75977: PUSH
75978: LD_VAR 0 4
75982: ARRAY
75983: IN
75984: IFFALSE 76308
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
75986: LD_EXP 85
75990: PUSH
75991: LD_VAR 0 4
75995: ARRAY
75996: PUSH
75997: LD_EXP 74
76001: PUSH
76002: LD_VAR 0 4
76006: ARRAY
76007: LESS
76008: PUSH
76009: LD_VAR 0 1
76013: PPUSH
76014: CALL_OW 264
76018: PUSH
76019: LD_INT 31
76021: PUSH
76022: LD_INT 32
76024: PUSH
76025: LD_INT 51
76027: PUSH
76028: LD_EXP 49
76032: PUSH
76033: LD_INT 12
76035: PUSH
76036: LD_INT 30
76038: PUSH
76039: LD_EXP 48
76043: PUSH
76044: LD_INT 11
76046: PUSH
76047: LD_INT 53
76049: PUSH
76050: LD_INT 14
76052: PUSH
76053: LD_EXP 52
76057: PUSH
76058: LD_INT 29
76060: PUSH
76061: LD_EXP 50
76065: PUSH
76066: LD_INT 13
76068: PUSH
76069: LD_INT 52
76071: PUSH
76072: LD_INT 48
76074: PUSH
76075: LD_INT 8
76077: PUSH
76078: EMPTY
76079: LIST
76080: LIST
76081: LIST
76082: LIST
76083: LIST
76084: LIST
76085: LIST
76086: LIST
76087: LIST
76088: LIST
76089: LIST
76090: LIST
76091: LIST
76092: LIST
76093: LIST
76094: LIST
76095: LIST
76096: IN
76097: NOT
76098: AND
76099: IFFALSE 76147
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
76101: LD_ADDR_EXP 85
76105: PUSH
76106: LD_EXP 85
76110: PPUSH
76111: LD_VAR 0 4
76115: PUSH
76116: LD_EXP 85
76120: PUSH
76121: LD_VAR 0 4
76125: ARRAY
76126: PUSH
76127: LD_INT 1
76129: PLUS
76130: PUSH
76131: EMPTY
76132: LIST
76133: LIST
76134: PPUSH
76135: LD_VAR 0 1
76139: PPUSH
76140: CALL 18420 0 3
76144: ST_TO_ADDR
76145: GO 76191
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
76147: LD_ADDR_EXP 82
76151: PUSH
76152: LD_EXP 82
76156: PPUSH
76157: LD_VAR 0 4
76161: PUSH
76162: LD_EXP 82
76166: PUSH
76167: LD_VAR 0 4
76171: ARRAY
76172: PUSH
76173: LD_INT 1
76175: PLUS
76176: PUSH
76177: EMPTY
76178: LIST
76179: LIST
76180: PPUSH
76181: LD_VAR 0 1
76185: PPUSH
76186: CALL 18420 0 3
76190: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
76191: LD_VAR 0 1
76195: PPUSH
76196: CALL_OW 263
76200: PUSH
76201: LD_INT 2
76203: EQUAL
76204: IFFALSE 76224
// begin repeat wait ( 0 0$1 ) ;
76206: LD_INT 35
76208: PPUSH
76209: CALL_OW 67
// until IsControledBy ( vehicle ) ;
76213: LD_VAR 0 1
76217: PPUSH
76218: CALL_OW 312
76222: IFFALSE 76206
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
76224: LD_VAR 0 1
76228: PPUSH
76229: LD_EXP 87
76233: PUSH
76234: LD_VAR 0 4
76238: ARRAY
76239: PPUSH
76240: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
76244: LD_VAR 0 1
76248: PPUSH
76249: CALL_OW 263
76253: PUSH
76254: LD_INT 1
76256: NONEQUAL
76257: IFFALSE 76261
// break ;
76259: GO 76310
// repeat wait ( 0 0$1 ) ;
76261: LD_INT 35
76263: PPUSH
76264: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
76268: LD_VAR 0 1
76272: PPUSH
76273: LD_EXP 87
76277: PUSH
76278: LD_VAR 0 4
76282: ARRAY
76283: PPUSH
76284: CALL_OW 308
76288: IFFALSE 76261
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
76290: LD_VAR 0 1
76294: PPUSH
76295: CALL_OW 311
76299: PPUSH
76300: CALL_OW 121
// exit ;
76304: POP
76305: POP
76306: GO 76312
// end ; end ;
76308: GO 75965
76310: POP
76311: POP
// end ;
76312: LD_VAR 0 3
76316: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
76317: LD_INT 0
76319: PPUSH
76320: PPUSH
76321: PPUSH
76322: PPUSH
// if not mc_bases or not skirmish then
76323: LD_EXP 63
76327: NOT
76328: PUSH
76329: LD_EXP 61
76333: NOT
76334: OR
76335: IFFALSE 76339
// exit ;
76337: GO 76692
// repeat wait ( 0 0$1 ) ;
76339: LD_INT 35
76341: PPUSH
76342: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
76346: LD_VAR 0 2
76350: PPUSH
76351: LD_VAR 0 3
76355: PPUSH
76356: CALL_OW 284
76360: IFFALSE 76339
// if GetResourceTypeXY ( x , y ) = mat_artefact then
76362: LD_VAR 0 2
76366: PPUSH
76367: LD_VAR 0 3
76371: PPUSH
76372: CALL_OW 283
76376: PUSH
76377: LD_INT 4
76379: EQUAL
76380: IFFALSE 76384
// exit ;
76382: GO 76692
// for i = 1 to mc_bases do
76384: LD_ADDR_VAR 0 7
76388: PUSH
76389: DOUBLE
76390: LD_INT 1
76392: DEC
76393: ST_TO_ADDR
76394: LD_EXP 63
76398: PUSH
76399: FOR_TO
76400: IFFALSE 76690
// begin if mc_crates_area [ i ] then
76402: LD_EXP 81
76406: PUSH
76407: LD_VAR 0 7
76411: ARRAY
76412: IFFALSE 76523
// for j in mc_crates_area [ i ] do
76414: LD_ADDR_VAR 0 8
76418: PUSH
76419: LD_EXP 81
76423: PUSH
76424: LD_VAR 0 7
76428: ARRAY
76429: PUSH
76430: FOR_IN
76431: IFFALSE 76521
// if InArea ( x , y , j ) then
76433: LD_VAR 0 2
76437: PPUSH
76438: LD_VAR 0 3
76442: PPUSH
76443: LD_VAR 0 8
76447: PPUSH
76448: CALL_OW 309
76452: IFFALSE 76519
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
76454: LD_ADDR_EXP 79
76458: PUSH
76459: LD_EXP 79
76463: PPUSH
76464: LD_VAR 0 7
76468: PUSH
76469: LD_EXP 79
76473: PUSH
76474: LD_VAR 0 7
76478: ARRAY
76479: PUSH
76480: LD_INT 1
76482: PLUS
76483: PUSH
76484: EMPTY
76485: LIST
76486: LIST
76487: PPUSH
76488: LD_VAR 0 4
76492: PUSH
76493: LD_VAR 0 2
76497: PUSH
76498: LD_VAR 0 3
76502: PUSH
76503: EMPTY
76504: LIST
76505: LIST
76506: LIST
76507: PPUSH
76508: CALL 18420 0 3
76512: ST_TO_ADDR
// exit ;
76513: POP
76514: POP
76515: POP
76516: POP
76517: GO 76692
// end ;
76519: GO 76430
76521: POP
76522: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
76523: LD_ADDR_VAR 0 9
76527: PUSH
76528: LD_EXP 63
76532: PUSH
76533: LD_VAR 0 7
76537: ARRAY
76538: PPUSH
76539: LD_INT 2
76541: PUSH
76542: LD_INT 30
76544: PUSH
76545: LD_INT 0
76547: PUSH
76548: EMPTY
76549: LIST
76550: LIST
76551: PUSH
76552: LD_INT 30
76554: PUSH
76555: LD_INT 1
76557: PUSH
76558: EMPTY
76559: LIST
76560: LIST
76561: PUSH
76562: EMPTY
76563: LIST
76564: LIST
76565: LIST
76566: PPUSH
76567: CALL_OW 72
76571: ST_TO_ADDR
// if not depot then
76572: LD_VAR 0 9
76576: NOT
76577: IFFALSE 76581
// continue ;
76579: GO 76399
// for j in depot do
76581: LD_ADDR_VAR 0 8
76585: PUSH
76586: LD_VAR 0 9
76590: PUSH
76591: FOR_IN
76592: IFFALSE 76686
// if GetDistUnitXY ( j , x , y ) < 30 then
76594: LD_VAR 0 8
76598: PPUSH
76599: LD_VAR 0 2
76603: PPUSH
76604: LD_VAR 0 3
76608: PPUSH
76609: CALL_OW 297
76613: PUSH
76614: LD_INT 30
76616: LESS
76617: IFFALSE 76684
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
76619: LD_ADDR_EXP 79
76623: PUSH
76624: LD_EXP 79
76628: PPUSH
76629: LD_VAR 0 7
76633: PUSH
76634: LD_EXP 79
76638: PUSH
76639: LD_VAR 0 7
76643: ARRAY
76644: PUSH
76645: LD_INT 1
76647: PLUS
76648: PUSH
76649: EMPTY
76650: LIST
76651: LIST
76652: PPUSH
76653: LD_VAR 0 4
76657: PUSH
76658: LD_VAR 0 2
76662: PUSH
76663: LD_VAR 0 3
76667: PUSH
76668: EMPTY
76669: LIST
76670: LIST
76671: LIST
76672: PPUSH
76673: CALL 18420 0 3
76677: ST_TO_ADDR
// exit ;
76678: POP
76679: POP
76680: POP
76681: POP
76682: GO 76692
// end ;
76684: GO 76591
76686: POP
76687: POP
// end ;
76688: GO 76399
76690: POP
76691: POP
// end ;
76692: LD_VAR 0 6
76696: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
76697: LD_INT 0
76699: PPUSH
76700: PPUSH
76701: PPUSH
76702: PPUSH
// if not mc_bases or not skirmish then
76703: LD_EXP 63
76707: NOT
76708: PUSH
76709: LD_EXP 61
76713: NOT
76714: OR
76715: IFFALSE 76719
// exit ;
76717: GO 76996
// side := GetSide ( lab ) ;
76719: LD_ADDR_VAR 0 4
76723: PUSH
76724: LD_VAR 0 2
76728: PPUSH
76729: CALL_OW 255
76733: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
76734: LD_VAR 0 4
76738: PUSH
76739: LD_EXP 89
76743: IN
76744: NOT
76745: PUSH
76746: LD_EXP 90
76750: NOT
76751: OR
76752: PUSH
76753: LD_EXP 63
76757: NOT
76758: OR
76759: IFFALSE 76763
// exit ;
76761: GO 76996
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
76763: LD_ADDR_EXP 90
76767: PUSH
76768: LD_EXP 90
76772: PPUSH
76773: LD_VAR 0 4
76777: PPUSH
76778: LD_EXP 90
76782: PUSH
76783: LD_VAR 0 4
76787: ARRAY
76788: PUSH
76789: LD_VAR 0 1
76793: DIFF
76794: PPUSH
76795: CALL_OW 1
76799: ST_TO_ADDR
// for i = 1 to mc_bases do
76800: LD_ADDR_VAR 0 5
76804: PUSH
76805: DOUBLE
76806: LD_INT 1
76808: DEC
76809: ST_TO_ADDR
76810: LD_EXP 63
76814: PUSH
76815: FOR_TO
76816: IFFALSE 76994
// begin if lab in mc_bases [ i ] then
76818: LD_VAR 0 2
76822: PUSH
76823: LD_EXP 63
76827: PUSH
76828: LD_VAR 0 5
76832: ARRAY
76833: IN
76834: IFFALSE 76992
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
76836: LD_VAR 0 1
76840: PUSH
76841: LD_INT 11
76843: PUSH
76844: LD_INT 4
76846: PUSH
76847: LD_INT 3
76849: PUSH
76850: LD_INT 2
76852: PUSH
76853: EMPTY
76854: LIST
76855: LIST
76856: LIST
76857: LIST
76858: IN
76859: PUSH
76860: LD_EXP 93
76864: PUSH
76865: LD_VAR 0 5
76869: ARRAY
76870: AND
76871: IFFALSE 76992
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
76873: LD_ADDR_VAR 0 6
76877: PUSH
76878: LD_EXP 93
76882: PUSH
76883: LD_VAR 0 5
76887: ARRAY
76888: PUSH
76889: LD_INT 1
76891: ARRAY
76892: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
76893: LD_ADDR_EXP 93
76897: PUSH
76898: LD_EXP 93
76902: PPUSH
76903: LD_VAR 0 5
76907: PPUSH
76908: EMPTY
76909: PPUSH
76910: CALL_OW 1
76914: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
76915: LD_VAR 0 6
76919: PPUSH
76920: LD_INT 0
76922: PPUSH
76923: CALL_OW 109
// ComExitBuilding ( tmp ) ;
76927: LD_VAR 0 6
76931: PPUSH
76932: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
76936: LD_ADDR_EXP 92
76940: PUSH
76941: LD_EXP 92
76945: PPUSH
76946: LD_VAR 0 5
76950: PPUSH
76951: LD_EXP 92
76955: PUSH
76956: LD_VAR 0 5
76960: ARRAY
76961: PPUSH
76962: LD_INT 1
76964: PPUSH
76965: LD_VAR 0 6
76969: PPUSH
76970: CALL_OW 2
76974: PPUSH
76975: CALL_OW 1
76979: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
76980: LD_VAR 0 5
76984: PPUSH
76985: LD_INT 112
76987: PPUSH
76988: CALL 54008 0 2
// end ; end ; end ;
76992: GO 76815
76994: POP
76995: POP
// end ;
76996: LD_VAR 0 3
77000: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
77001: LD_INT 0
77003: PPUSH
77004: PPUSH
77005: PPUSH
77006: PPUSH
77007: PPUSH
77008: PPUSH
77009: PPUSH
77010: PPUSH
// if not mc_bases or not skirmish then
77011: LD_EXP 63
77015: NOT
77016: PUSH
77017: LD_EXP 61
77021: NOT
77022: OR
77023: IFFALSE 77027
// exit ;
77025: GO 78398
// for i = 1 to mc_bases do
77027: LD_ADDR_VAR 0 3
77031: PUSH
77032: DOUBLE
77033: LD_INT 1
77035: DEC
77036: ST_TO_ADDR
77037: LD_EXP 63
77041: PUSH
77042: FOR_TO
77043: IFFALSE 78396
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
77045: LD_VAR 0 1
77049: PUSH
77050: LD_EXP 63
77054: PUSH
77055: LD_VAR 0 3
77059: ARRAY
77060: IN
77061: PUSH
77062: LD_VAR 0 1
77066: PUSH
77067: LD_EXP 70
77071: PUSH
77072: LD_VAR 0 3
77076: ARRAY
77077: IN
77078: OR
77079: PUSH
77080: LD_VAR 0 1
77084: PUSH
77085: LD_EXP 85
77089: PUSH
77090: LD_VAR 0 3
77094: ARRAY
77095: IN
77096: OR
77097: PUSH
77098: LD_VAR 0 1
77102: PUSH
77103: LD_EXP 82
77107: PUSH
77108: LD_VAR 0 3
77112: ARRAY
77113: IN
77114: OR
77115: PUSH
77116: LD_VAR 0 1
77120: PUSH
77121: LD_EXP 92
77125: PUSH
77126: LD_VAR 0 3
77130: ARRAY
77131: IN
77132: OR
77133: PUSH
77134: LD_VAR 0 1
77138: PUSH
77139: LD_EXP 93
77143: PUSH
77144: LD_VAR 0 3
77148: ARRAY
77149: IN
77150: OR
77151: IFFALSE 78394
// begin if un in mc_ape [ i ] then
77153: LD_VAR 0 1
77157: PUSH
77158: LD_EXP 92
77162: PUSH
77163: LD_VAR 0 3
77167: ARRAY
77168: IN
77169: IFFALSE 77208
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
77171: LD_ADDR_EXP 92
77175: PUSH
77176: LD_EXP 92
77180: PPUSH
77181: LD_VAR 0 3
77185: PPUSH
77186: LD_EXP 92
77190: PUSH
77191: LD_VAR 0 3
77195: ARRAY
77196: PUSH
77197: LD_VAR 0 1
77201: DIFF
77202: PPUSH
77203: CALL_OW 1
77207: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
77208: LD_VAR 0 1
77212: PUSH
77213: LD_EXP 93
77217: PUSH
77218: LD_VAR 0 3
77222: ARRAY
77223: IN
77224: IFFALSE 77248
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
77226: LD_ADDR_EXP 93
77230: PUSH
77231: LD_EXP 93
77235: PPUSH
77236: LD_VAR 0 3
77240: PPUSH
77241: EMPTY
77242: PPUSH
77243: CALL_OW 1
77247: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
77248: LD_VAR 0 1
77252: PPUSH
77253: CALL_OW 247
77257: PUSH
77258: LD_INT 2
77260: EQUAL
77261: PUSH
77262: LD_VAR 0 1
77266: PPUSH
77267: CALL_OW 110
77271: PUSH
77272: LD_INT 20
77274: EQUAL
77275: PUSH
77276: LD_VAR 0 1
77280: PUSH
77281: LD_EXP 85
77285: PUSH
77286: LD_VAR 0 3
77290: ARRAY
77291: IN
77292: OR
77293: PUSH
77294: LD_VAR 0 1
77298: PPUSH
77299: CALL_OW 264
77303: PUSH
77304: LD_INT 12
77306: PUSH
77307: LD_INT 51
77309: PUSH
77310: LD_EXP 49
77314: PUSH
77315: LD_INT 32
77317: PUSH
77318: LD_INT 13
77320: PUSH
77321: LD_INT 52
77323: PUSH
77324: LD_INT 31
77326: PUSH
77327: EMPTY
77328: LIST
77329: LIST
77330: LIST
77331: LIST
77332: LIST
77333: LIST
77334: LIST
77335: IN
77336: OR
77337: AND
77338: IFFALSE 77646
// begin if un in mc_defender [ i ] then
77340: LD_VAR 0 1
77344: PUSH
77345: LD_EXP 85
77349: PUSH
77350: LD_VAR 0 3
77354: ARRAY
77355: IN
77356: IFFALSE 77395
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
77358: LD_ADDR_EXP 85
77362: PUSH
77363: LD_EXP 85
77367: PPUSH
77368: LD_VAR 0 3
77372: PPUSH
77373: LD_EXP 85
77377: PUSH
77378: LD_VAR 0 3
77382: ARRAY
77383: PUSH
77384: LD_VAR 0 1
77388: DIFF
77389: PPUSH
77390: CALL_OW 1
77394: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
77395: LD_ADDR_VAR 0 8
77399: PUSH
77400: LD_VAR 0 3
77404: PPUSH
77405: LD_INT 3
77407: PPUSH
77408: CALL 74064 0 2
77412: ST_TO_ADDR
// if fac then
77413: LD_VAR 0 8
77417: IFFALSE 77646
// begin for j in fac do
77419: LD_ADDR_VAR 0 4
77423: PUSH
77424: LD_VAR 0 8
77428: PUSH
77429: FOR_IN
77430: IFFALSE 77644
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
77432: LD_ADDR_VAR 0 9
77436: PUSH
77437: LD_VAR 0 8
77441: PPUSH
77442: LD_VAR 0 1
77446: PPUSH
77447: CALL_OW 265
77451: PPUSH
77452: LD_VAR 0 1
77456: PPUSH
77457: CALL_OW 262
77461: PPUSH
77462: LD_VAR 0 1
77466: PPUSH
77467: CALL_OW 263
77471: PPUSH
77472: LD_VAR 0 1
77476: PPUSH
77477: CALL_OW 264
77481: PPUSH
77482: CALL 15952 0 5
77486: ST_TO_ADDR
// if components then
77487: LD_VAR 0 9
77491: IFFALSE 77642
// begin if GetWeapon ( un ) = ar_control_tower then
77493: LD_VAR 0 1
77497: PPUSH
77498: CALL_OW 264
77502: PUSH
77503: LD_INT 31
77505: EQUAL
77506: IFFALSE 77623
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
77508: LD_VAR 0 1
77512: PPUSH
77513: CALL_OW 311
77517: PPUSH
77518: LD_INT 0
77520: PPUSH
77521: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
77525: LD_ADDR_EXP 103
77529: PUSH
77530: LD_EXP 103
77534: PPUSH
77535: LD_VAR 0 3
77539: PPUSH
77540: LD_EXP 103
77544: PUSH
77545: LD_VAR 0 3
77549: ARRAY
77550: PUSH
77551: LD_VAR 0 1
77555: PPUSH
77556: CALL_OW 311
77560: DIFF
77561: PPUSH
77562: CALL_OW 1
77566: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
77567: LD_ADDR_VAR 0 7
77571: PUSH
77572: LD_EXP 84
77576: PUSH
77577: LD_VAR 0 3
77581: ARRAY
77582: PPUSH
77583: LD_INT 1
77585: PPUSH
77586: LD_VAR 0 9
77590: PPUSH
77591: CALL_OW 2
77595: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
77596: LD_ADDR_EXP 84
77600: PUSH
77601: LD_EXP 84
77605: PPUSH
77606: LD_VAR 0 3
77610: PPUSH
77611: LD_VAR 0 7
77615: PPUSH
77616: CALL_OW 1
77620: ST_TO_ADDR
// end else
77621: GO 77640
// MC_InsertProduceList ( i , [ components ] ) ;
77623: LD_VAR 0 3
77627: PPUSH
77628: LD_VAR 0 9
77632: PUSH
77633: EMPTY
77634: LIST
77635: PPUSH
77636: CALL 73609 0 2
// break ;
77640: GO 77644
// end ; end ;
77642: GO 77429
77644: POP
77645: POP
// end ; end ; if GetType ( un ) = unit_building then
77646: LD_VAR 0 1
77650: PPUSH
77651: CALL_OW 247
77655: PUSH
77656: LD_INT 3
77658: EQUAL
77659: IFFALSE 78062
// begin btype := GetBType ( un ) ;
77661: LD_ADDR_VAR 0 5
77665: PUSH
77666: LD_VAR 0 1
77670: PPUSH
77671: CALL_OW 266
77675: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
77676: LD_VAR 0 5
77680: PUSH
77681: LD_INT 29
77683: PUSH
77684: LD_INT 30
77686: PUSH
77687: EMPTY
77688: LIST
77689: LIST
77690: IN
77691: IFFALSE 77764
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
77693: LD_VAR 0 1
77697: PPUSH
77698: CALL_OW 250
77702: PPUSH
77703: LD_VAR 0 1
77707: PPUSH
77708: CALL_OW 251
77712: PPUSH
77713: LD_VAR 0 1
77717: PPUSH
77718: CALL_OW 255
77722: PPUSH
77723: CALL_OW 440
77727: NOT
77728: IFFALSE 77764
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
77730: LD_VAR 0 1
77734: PPUSH
77735: CALL_OW 250
77739: PPUSH
77740: LD_VAR 0 1
77744: PPUSH
77745: CALL_OW 251
77749: PPUSH
77750: LD_VAR 0 1
77754: PPUSH
77755: CALL_OW 255
77759: PPUSH
77760: CALL_OW 441
// end ; if btype = b_warehouse then
77764: LD_VAR 0 5
77768: PUSH
77769: LD_INT 1
77771: EQUAL
77772: IFFALSE 77790
// begin btype := b_depot ;
77774: LD_ADDR_VAR 0 5
77778: PUSH
77779: LD_INT 0
77781: ST_TO_ADDR
// pos := 1 ;
77782: LD_ADDR_VAR 0 6
77786: PUSH
77787: LD_INT 1
77789: ST_TO_ADDR
// end ; if btype = b_factory then
77790: LD_VAR 0 5
77794: PUSH
77795: LD_INT 3
77797: EQUAL
77798: IFFALSE 77816
// begin btype := b_workshop ;
77800: LD_ADDR_VAR 0 5
77804: PUSH
77805: LD_INT 2
77807: ST_TO_ADDR
// pos := 1 ;
77808: LD_ADDR_VAR 0 6
77812: PUSH
77813: LD_INT 1
77815: ST_TO_ADDR
// end ; if btype = b_barracks then
77816: LD_VAR 0 5
77820: PUSH
77821: LD_INT 5
77823: EQUAL
77824: IFFALSE 77834
// btype := b_armoury ;
77826: LD_ADDR_VAR 0 5
77830: PUSH
77831: LD_INT 4
77833: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
77834: LD_VAR 0 5
77838: PUSH
77839: LD_INT 7
77841: PUSH
77842: LD_INT 8
77844: PUSH
77845: EMPTY
77846: LIST
77847: LIST
77848: IN
77849: IFFALSE 77859
// btype := b_lab ;
77851: LD_ADDR_VAR 0 5
77855: PUSH
77856: LD_INT 6
77858: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
77859: LD_ADDR_EXP 68
77863: PUSH
77864: LD_EXP 68
77868: PPUSH
77869: LD_VAR 0 3
77873: PUSH
77874: LD_EXP 68
77878: PUSH
77879: LD_VAR 0 3
77883: ARRAY
77884: PUSH
77885: LD_INT 1
77887: PLUS
77888: PUSH
77889: EMPTY
77890: LIST
77891: LIST
77892: PPUSH
77893: LD_VAR 0 5
77897: PUSH
77898: LD_VAR 0 1
77902: PPUSH
77903: CALL_OW 250
77907: PUSH
77908: LD_VAR 0 1
77912: PPUSH
77913: CALL_OW 251
77917: PUSH
77918: LD_VAR 0 1
77922: PPUSH
77923: CALL_OW 254
77927: PUSH
77928: EMPTY
77929: LIST
77930: LIST
77931: LIST
77932: LIST
77933: PPUSH
77934: CALL 18420 0 3
77938: ST_TO_ADDR
// if pos = 1 then
77939: LD_VAR 0 6
77943: PUSH
77944: LD_INT 1
77946: EQUAL
77947: IFFALSE 78062
// begin tmp := mc_build_list [ i ] ;
77949: LD_ADDR_VAR 0 7
77953: PUSH
77954: LD_EXP 68
77958: PUSH
77959: LD_VAR 0 3
77963: ARRAY
77964: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
77965: LD_VAR 0 7
77969: PPUSH
77970: LD_INT 2
77972: PUSH
77973: LD_INT 30
77975: PUSH
77976: LD_INT 0
77978: PUSH
77979: EMPTY
77980: LIST
77981: LIST
77982: PUSH
77983: LD_INT 30
77985: PUSH
77986: LD_INT 1
77988: PUSH
77989: EMPTY
77990: LIST
77991: LIST
77992: PUSH
77993: EMPTY
77994: LIST
77995: LIST
77996: LIST
77997: PPUSH
77998: CALL_OW 72
78002: IFFALSE 78012
// pos := 2 ;
78004: LD_ADDR_VAR 0 6
78008: PUSH
78009: LD_INT 2
78011: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
78012: LD_ADDR_VAR 0 7
78016: PUSH
78017: LD_VAR 0 7
78021: PPUSH
78022: LD_VAR 0 6
78026: PPUSH
78027: LD_VAR 0 7
78031: PPUSH
78032: CALL 18746 0 3
78036: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
78037: LD_ADDR_EXP 68
78041: PUSH
78042: LD_EXP 68
78046: PPUSH
78047: LD_VAR 0 3
78051: PPUSH
78052: LD_VAR 0 7
78056: PPUSH
78057: CALL_OW 1
78061: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
78062: LD_VAR 0 1
78066: PUSH
78067: LD_EXP 63
78071: PUSH
78072: LD_VAR 0 3
78076: ARRAY
78077: IN
78078: IFFALSE 78117
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
78080: LD_ADDR_EXP 63
78084: PUSH
78085: LD_EXP 63
78089: PPUSH
78090: LD_VAR 0 3
78094: PPUSH
78095: LD_EXP 63
78099: PUSH
78100: LD_VAR 0 3
78104: ARRAY
78105: PUSH
78106: LD_VAR 0 1
78110: DIFF
78111: PPUSH
78112: CALL_OW 1
78116: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
78117: LD_VAR 0 1
78121: PUSH
78122: LD_EXP 70
78126: PUSH
78127: LD_VAR 0 3
78131: ARRAY
78132: IN
78133: IFFALSE 78172
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
78135: LD_ADDR_EXP 70
78139: PUSH
78140: LD_EXP 70
78144: PPUSH
78145: LD_VAR 0 3
78149: PPUSH
78150: LD_EXP 70
78154: PUSH
78155: LD_VAR 0 3
78159: ARRAY
78160: PUSH
78161: LD_VAR 0 1
78165: DIFF
78166: PPUSH
78167: CALL_OW 1
78171: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
78172: LD_VAR 0 1
78176: PUSH
78177: LD_EXP 82
78181: PUSH
78182: LD_VAR 0 3
78186: ARRAY
78187: IN
78188: IFFALSE 78227
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
78190: LD_ADDR_EXP 82
78194: PUSH
78195: LD_EXP 82
78199: PPUSH
78200: LD_VAR 0 3
78204: PPUSH
78205: LD_EXP 82
78209: PUSH
78210: LD_VAR 0 3
78214: ARRAY
78215: PUSH
78216: LD_VAR 0 1
78220: DIFF
78221: PPUSH
78222: CALL_OW 1
78226: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
78227: LD_VAR 0 1
78231: PUSH
78232: LD_EXP 85
78236: PUSH
78237: LD_VAR 0 3
78241: ARRAY
78242: IN
78243: IFFALSE 78282
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
78245: LD_ADDR_EXP 85
78249: PUSH
78250: LD_EXP 85
78254: PPUSH
78255: LD_VAR 0 3
78259: PPUSH
78260: LD_EXP 85
78264: PUSH
78265: LD_VAR 0 3
78269: ARRAY
78270: PUSH
78271: LD_VAR 0 1
78275: DIFF
78276: PPUSH
78277: CALL_OW 1
78281: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
78282: LD_VAR 0 1
78286: PUSH
78287: LD_EXP 72
78291: PUSH
78292: LD_VAR 0 3
78296: ARRAY
78297: IN
78298: IFFALSE 78337
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
78300: LD_ADDR_EXP 72
78304: PUSH
78305: LD_EXP 72
78309: PPUSH
78310: LD_VAR 0 3
78314: PPUSH
78315: LD_EXP 72
78319: PUSH
78320: LD_VAR 0 3
78324: ARRAY
78325: PUSH
78326: LD_VAR 0 1
78330: DIFF
78331: PPUSH
78332: CALL_OW 1
78336: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
78337: LD_VAR 0 1
78341: PUSH
78342: LD_EXP 71
78346: PUSH
78347: LD_VAR 0 3
78351: ARRAY
78352: IN
78353: IFFALSE 78392
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
78355: LD_ADDR_EXP 71
78359: PUSH
78360: LD_EXP 71
78364: PPUSH
78365: LD_VAR 0 3
78369: PPUSH
78370: LD_EXP 71
78374: PUSH
78375: LD_VAR 0 3
78379: ARRAY
78380: PUSH
78381: LD_VAR 0 1
78385: DIFF
78386: PPUSH
78387: CALL_OW 1
78391: ST_TO_ADDR
// end ; break ;
78392: GO 78396
// end ;
78394: GO 77042
78396: POP
78397: POP
// end ;
78398: LD_VAR 0 2
78402: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
78403: LD_INT 0
78405: PPUSH
78406: PPUSH
78407: PPUSH
// if not mc_bases or not skirmish then
78408: LD_EXP 63
78412: NOT
78413: PUSH
78414: LD_EXP 61
78418: NOT
78419: OR
78420: IFFALSE 78424
// exit ;
78422: GO 78639
// for i = 1 to mc_bases do
78424: LD_ADDR_VAR 0 3
78428: PUSH
78429: DOUBLE
78430: LD_INT 1
78432: DEC
78433: ST_TO_ADDR
78434: LD_EXP 63
78438: PUSH
78439: FOR_TO
78440: IFFALSE 78637
// begin if building in mc_construct_list [ i ] then
78442: LD_VAR 0 1
78446: PUSH
78447: LD_EXP 70
78451: PUSH
78452: LD_VAR 0 3
78456: ARRAY
78457: IN
78458: IFFALSE 78635
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
78460: LD_ADDR_EXP 70
78464: PUSH
78465: LD_EXP 70
78469: PPUSH
78470: LD_VAR 0 3
78474: PPUSH
78475: LD_EXP 70
78479: PUSH
78480: LD_VAR 0 3
78484: ARRAY
78485: PUSH
78486: LD_VAR 0 1
78490: DIFF
78491: PPUSH
78492: CALL_OW 1
78496: ST_TO_ADDR
// if building in mc_lab [ i ] then
78497: LD_VAR 0 1
78501: PUSH
78502: LD_EXP 96
78506: PUSH
78507: LD_VAR 0 3
78511: ARRAY
78512: IN
78513: IFFALSE 78568
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
78515: LD_ADDR_EXP 97
78519: PUSH
78520: LD_EXP 97
78524: PPUSH
78525: LD_VAR 0 3
78529: PPUSH
78530: LD_EXP 97
78534: PUSH
78535: LD_VAR 0 3
78539: ARRAY
78540: PPUSH
78541: LD_INT 1
78543: PPUSH
78544: LD_EXP 97
78548: PUSH
78549: LD_VAR 0 3
78553: ARRAY
78554: PPUSH
78555: LD_INT 0
78557: PPUSH
78558: CALL 17838 0 4
78562: PPUSH
78563: CALL_OW 1
78567: ST_TO_ADDR
// if not building in mc_bases [ i ] then
78568: LD_VAR 0 1
78572: PUSH
78573: LD_EXP 63
78577: PUSH
78578: LD_VAR 0 3
78582: ARRAY
78583: IN
78584: NOT
78585: IFFALSE 78631
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
78587: LD_ADDR_EXP 63
78591: PUSH
78592: LD_EXP 63
78596: PPUSH
78597: LD_VAR 0 3
78601: PUSH
78602: LD_EXP 63
78606: PUSH
78607: LD_VAR 0 3
78611: ARRAY
78612: PUSH
78613: LD_INT 1
78615: PLUS
78616: PUSH
78617: EMPTY
78618: LIST
78619: LIST
78620: PPUSH
78621: LD_VAR 0 1
78625: PPUSH
78626: CALL 18420 0 3
78630: ST_TO_ADDR
// exit ;
78631: POP
78632: POP
78633: GO 78639
// end ; end ;
78635: GO 78439
78637: POP
78638: POP
// end ;
78639: LD_VAR 0 2
78643: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
78644: LD_INT 0
78646: PPUSH
78647: PPUSH
78648: PPUSH
78649: PPUSH
78650: PPUSH
78651: PPUSH
78652: PPUSH
// if not mc_bases or not skirmish then
78653: LD_EXP 63
78657: NOT
78658: PUSH
78659: LD_EXP 61
78663: NOT
78664: OR
78665: IFFALSE 78669
// exit ;
78667: GO 79330
// for i = 1 to mc_bases do
78669: LD_ADDR_VAR 0 3
78673: PUSH
78674: DOUBLE
78675: LD_INT 1
78677: DEC
78678: ST_TO_ADDR
78679: LD_EXP 63
78683: PUSH
78684: FOR_TO
78685: IFFALSE 79328
// begin if building in mc_construct_list [ i ] then
78687: LD_VAR 0 1
78691: PUSH
78692: LD_EXP 70
78696: PUSH
78697: LD_VAR 0 3
78701: ARRAY
78702: IN
78703: IFFALSE 79326
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
78705: LD_ADDR_EXP 70
78709: PUSH
78710: LD_EXP 70
78714: PPUSH
78715: LD_VAR 0 3
78719: PPUSH
78720: LD_EXP 70
78724: PUSH
78725: LD_VAR 0 3
78729: ARRAY
78730: PUSH
78731: LD_VAR 0 1
78735: DIFF
78736: PPUSH
78737: CALL_OW 1
78741: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
78742: LD_ADDR_EXP 63
78746: PUSH
78747: LD_EXP 63
78751: PPUSH
78752: LD_VAR 0 3
78756: PUSH
78757: LD_EXP 63
78761: PUSH
78762: LD_VAR 0 3
78766: ARRAY
78767: PUSH
78768: LD_INT 1
78770: PLUS
78771: PUSH
78772: EMPTY
78773: LIST
78774: LIST
78775: PPUSH
78776: LD_VAR 0 1
78780: PPUSH
78781: CALL 18420 0 3
78785: ST_TO_ADDR
// btype := GetBType ( building ) ;
78786: LD_ADDR_VAR 0 5
78790: PUSH
78791: LD_VAR 0 1
78795: PPUSH
78796: CALL_OW 266
78800: ST_TO_ADDR
// side := GetSide ( building ) ;
78801: LD_ADDR_VAR 0 8
78805: PUSH
78806: LD_VAR 0 1
78810: PPUSH
78811: CALL_OW 255
78815: ST_TO_ADDR
// if btype = b_lab then
78816: LD_VAR 0 5
78820: PUSH
78821: LD_INT 6
78823: EQUAL
78824: IFFALSE 78874
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
78826: LD_ADDR_EXP 96
78830: PUSH
78831: LD_EXP 96
78835: PPUSH
78836: LD_VAR 0 3
78840: PUSH
78841: LD_EXP 96
78845: PUSH
78846: LD_VAR 0 3
78850: ARRAY
78851: PUSH
78852: LD_INT 1
78854: PLUS
78855: PUSH
78856: EMPTY
78857: LIST
78858: LIST
78859: PPUSH
78860: LD_VAR 0 1
78864: PPUSH
78865: CALL 18420 0 3
78869: ST_TO_ADDR
// exit ;
78870: POP
78871: POP
78872: GO 79330
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
78874: LD_VAR 0 5
78878: PUSH
78879: LD_INT 0
78881: PUSH
78882: LD_INT 2
78884: PUSH
78885: LD_INT 4
78887: PUSH
78888: EMPTY
78889: LIST
78890: LIST
78891: LIST
78892: IN
78893: IFFALSE 79017
// begin if btype = b_armoury then
78895: LD_VAR 0 5
78899: PUSH
78900: LD_INT 4
78902: EQUAL
78903: IFFALSE 78913
// btype := b_barracks ;
78905: LD_ADDR_VAR 0 5
78909: PUSH
78910: LD_INT 5
78912: ST_TO_ADDR
// if btype = b_depot then
78913: LD_VAR 0 5
78917: PUSH
78918: LD_INT 0
78920: EQUAL
78921: IFFALSE 78931
// btype := b_warehouse ;
78923: LD_ADDR_VAR 0 5
78927: PUSH
78928: LD_INT 1
78930: ST_TO_ADDR
// if btype = b_workshop then
78931: LD_VAR 0 5
78935: PUSH
78936: LD_INT 2
78938: EQUAL
78939: IFFALSE 78949
// btype := b_factory ;
78941: LD_ADDR_VAR 0 5
78945: PUSH
78946: LD_INT 3
78948: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
78949: LD_VAR 0 5
78953: PPUSH
78954: LD_VAR 0 8
78958: PPUSH
78959: CALL_OW 323
78963: PUSH
78964: LD_INT 1
78966: EQUAL
78967: IFFALSE 79013
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
78969: LD_ADDR_EXP 95
78973: PUSH
78974: LD_EXP 95
78978: PPUSH
78979: LD_VAR 0 3
78983: PUSH
78984: LD_EXP 95
78988: PUSH
78989: LD_VAR 0 3
78993: ARRAY
78994: PUSH
78995: LD_INT 1
78997: PLUS
78998: PUSH
78999: EMPTY
79000: LIST
79001: LIST
79002: PPUSH
79003: LD_VAR 0 1
79007: PPUSH
79008: CALL 18420 0 3
79012: ST_TO_ADDR
// exit ;
79013: POP
79014: POP
79015: GO 79330
// end ; if btype in [ b_bunker , b_turret ] then
79017: LD_VAR 0 5
79021: PUSH
79022: LD_INT 32
79024: PUSH
79025: LD_INT 33
79027: PUSH
79028: EMPTY
79029: LIST
79030: LIST
79031: IN
79032: IFFALSE 79322
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
79034: LD_ADDR_EXP 71
79038: PUSH
79039: LD_EXP 71
79043: PPUSH
79044: LD_VAR 0 3
79048: PUSH
79049: LD_EXP 71
79053: PUSH
79054: LD_VAR 0 3
79058: ARRAY
79059: PUSH
79060: LD_INT 1
79062: PLUS
79063: PUSH
79064: EMPTY
79065: LIST
79066: LIST
79067: PPUSH
79068: LD_VAR 0 1
79072: PPUSH
79073: CALL 18420 0 3
79077: ST_TO_ADDR
// if btype = b_bunker then
79078: LD_VAR 0 5
79082: PUSH
79083: LD_INT 32
79085: EQUAL
79086: IFFALSE 79322
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
79088: LD_ADDR_EXP 72
79092: PUSH
79093: LD_EXP 72
79097: PPUSH
79098: LD_VAR 0 3
79102: PUSH
79103: LD_EXP 72
79107: PUSH
79108: LD_VAR 0 3
79112: ARRAY
79113: PUSH
79114: LD_INT 1
79116: PLUS
79117: PUSH
79118: EMPTY
79119: LIST
79120: LIST
79121: PPUSH
79122: LD_VAR 0 1
79126: PPUSH
79127: CALL 18420 0 3
79131: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
79132: LD_ADDR_VAR 0 6
79136: PUSH
79137: LD_EXP 63
79141: PUSH
79142: LD_VAR 0 3
79146: ARRAY
79147: PPUSH
79148: LD_INT 25
79150: PUSH
79151: LD_INT 1
79153: PUSH
79154: EMPTY
79155: LIST
79156: LIST
79157: PUSH
79158: LD_INT 3
79160: PUSH
79161: LD_INT 54
79163: PUSH
79164: EMPTY
79165: LIST
79166: PUSH
79167: EMPTY
79168: LIST
79169: LIST
79170: PUSH
79171: EMPTY
79172: LIST
79173: LIST
79174: PPUSH
79175: CALL_OW 72
79179: ST_TO_ADDR
// if tmp then
79180: LD_VAR 0 6
79184: IFFALSE 79190
// exit ;
79186: POP
79187: POP
79188: GO 79330
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
79190: LD_ADDR_VAR 0 6
79194: PUSH
79195: LD_EXP 63
79199: PUSH
79200: LD_VAR 0 3
79204: ARRAY
79205: PPUSH
79206: LD_INT 2
79208: PUSH
79209: LD_INT 30
79211: PUSH
79212: LD_INT 4
79214: PUSH
79215: EMPTY
79216: LIST
79217: LIST
79218: PUSH
79219: LD_INT 30
79221: PUSH
79222: LD_INT 5
79224: PUSH
79225: EMPTY
79226: LIST
79227: LIST
79228: PUSH
79229: EMPTY
79230: LIST
79231: LIST
79232: LIST
79233: PPUSH
79234: CALL_OW 72
79238: ST_TO_ADDR
// if not tmp then
79239: LD_VAR 0 6
79243: NOT
79244: IFFALSE 79250
// exit ;
79246: POP
79247: POP
79248: GO 79330
// for j in tmp do
79250: LD_ADDR_VAR 0 4
79254: PUSH
79255: LD_VAR 0 6
79259: PUSH
79260: FOR_IN
79261: IFFALSE 79320
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
79263: LD_ADDR_VAR 0 7
79267: PUSH
79268: LD_VAR 0 4
79272: PPUSH
79273: CALL_OW 313
79277: PPUSH
79278: LD_INT 25
79280: PUSH
79281: LD_INT 1
79283: PUSH
79284: EMPTY
79285: LIST
79286: LIST
79287: PPUSH
79288: CALL_OW 72
79292: ST_TO_ADDR
// if units then
79293: LD_VAR 0 7
79297: IFFALSE 79318
// begin ComExitBuilding ( units [ 1 ] ) ;
79299: LD_VAR 0 7
79303: PUSH
79304: LD_INT 1
79306: ARRAY
79307: PPUSH
79308: CALL_OW 122
// exit ;
79312: POP
79313: POP
79314: POP
79315: POP
79316: GO 79330
// end ; end ;
79318: GO 79260
79320: POP
79321: POP
// end ; end ; exit ;
79322: POP
79323: POP
79324: GO 79330
// end ; end ;
79326: GO 78684
79328: POP
79329: POP
// end ;
79330: LD_VAR 0 2
79334: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
79335: LD_INT 0
79337: PPUSH
79338: PPUSH
79339: PPUSH
79340: PPUSH
79341: PPUSH
79342: PPUSH
79343: PPUSH
// if not mc_bases or not skirmish then
79344: LD_EXP 63
79348: NOT
79349: PUSH
79350: LD_EXP 61
79354: NOT
79355: OR
79356: IFFALSE 79360
// exit ;
79358: GO 79591
// btype := GetBType ( building ) ;
79360: LD_ADDR_VAR 0 6
79364: PUSH
79365: LD_VAR 0 1
79369: PPUSH
79370: CALL_OW 266
79374: ST_TO_ADDR
// x := GetX ( building ) ;
79375: LD_ADDR_VAR 0 7
79379: PUSH
79380: LD_VAR 0 1
79384: PPUSH
79385: CALL_OW 250
79389: ST_TO_ADDR
// y := GetY ( building ) ;
79390: LD_ADDR_VAR 0 8
79394: PUSH
79395: LD_VAR 0 1
79399: PPUSH
79400: CALL_OW 251
79404: ST_TO_ADDR
// d := GetDir ( building ) ;
79405: LD_ADDR_VAR 0 9
79409: PUSH
79410: LD_VAR 0 1
79414: PPUSH
79415: CALL_OW 254
79419: ST_TO_ADDR
// for i = 1 to mc_bases do
79420: LD_ADDR_VAR 0 4
79424: PUSH
79425: DOUBLE
79426: LD_INT 1
79428: DEC
79429: ST_TO_ADDR
79430: LD_EXP 63
79434: PUSH
79435: FOR_TO
79436: IFFALSE 79589
// begin if not mc_build_list [ i ] then
79438: LD_EXP 68
79442: PUSH
79443: LD_VAR 0 4
79447: ARRAY
79448: NOT
79449: IFFALSE 79453
// continue ;
79451: GO 79435
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
79453: LD_VAR 0 6
79457: PUSH
79458: LD_VAR 0 7
79462: PUSH
79463: LD_VAR 0 8
79467: PUSH
79468: LD_VAR 0 9
79472: PUSH
79473: EMPTY
79474: LIST
79475: LIST
79476: LIST
79477: LIST
79478: PPUSH
79479: LD_EXP 68
79483: PUSH
79484: LD_VAR 0 4
79488: ARRAY
79489: PUSH
79490: LD_INT 1
79492: ARRAY
79493: PPUSH
79494: CALL 24589 0 2
79498: IFFALSE 79587
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
79500: LD_ADDR_EXP 68
79504: PUSH
79505: LD_EXP 68
79509: PPUSH
79510: LD_VAR 0 4
79514: PPUSH
79515: LD_EXP 68
79519: PUSH
79520: LD_VAR 0 4
79524: ARRAY
79525: PPUSH
79526: LD_INT 1
79528: PPUSH
79529: CALL_OW 3
79533: PPUSH
79534: CALL_OW 1
79538: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
79539: LD_ADDR_EXP 70
79543: PUSH
79544: LD_EXP 70
79548: PPUSH
79549: LD_VAR 0 4
79553: PUSH
79554: LD_EXP 70
79558: PUSH
79559: LD_VAR 0 4
79563: ARRAY
79564: PUSH
79565: LD_INT 1
79567: PLUS
79568: PUSH
79569: EMPTY
79570: LIST
79571: LIST
79572: PPUSH
79573: LD_VAR 0 1
79577: PPUSH
79578: CALL 18420 0 3
79582: ST_TO_ADDR
// exit ;
79583: POP
79584: POP
79585: GO 79591
// end ; end ;
79587: GO 79435
79589: POP
79590: POP
// end ;
79591: LD_VAR 0 3
79595: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
79596: LD_INT 0
79598: PPUSH
79599: PPUSH
79600: PPUSH
// if not mc_bases or not skirmish then
79601: LD_EXP 63
79605: NOT
79606: PUSH
79607: LD_EXP 61
79611: NOT
79612: OR
79613: IFFALSE 79617
// exit ;
79615: GO 79807
// for i = 1 to mc_bases do
79617: LD_ADDR_VAR 0 4
79621: PUSH
79622: DOUBLE
79623: LD_INT 1
79625: DEC
79626: ST_TO_ADDR
79627: LD_EXP 63
79631: PUSH
79632: FOR_TO
79633: IFFALSE 79720
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
79635: LD_VAR 0 1
79639: PUSH
79640: LD_EXP 71
79644: PUSH
79645: LD_VAR 0 4
79649: ARRAY
79650: IN
79651: PUSH
79652: LD_VAR 0 1
79656: PUSH
79657: LD_EXP 72
79661: PUSH
79662: LD_VAR 0 4
79666: ARRAY
79667: IN
79668: NOT
79669: AND
79670: IFFALSE 79718
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
79672: LD_ADDR_EXP 72
79676: PUSH
79677: LD_EXP 72
79681: PPUSH
79682: LD_VAR 0 4
79686: PUSH
79687: LD_EXP 72
79691: PUSH
79692: LD_VAR 0 4
79696: ARRAY
79697: PUSH
79698: LD_INT 1
79700: PLUS
79701: PUSH
79702: EMPTY
79703: LIST
79704: LIST
79705: PPUSH
79706: LD_VAR 0 1
79710: PPUSH
79711: CALL 18420 0 3
79715: ST_TO_ADDR
// break ;
79716: GO 79720
// end ; end ;
79718: GO 79632
79720: POP
79721: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
79722: LD_VAR 0 1
79726: PPUSH
79727: CALL_OW 257
79731: PUSH
79732: LD_EXP 89
79736: IN
79737: PUSH
79738: LD_VAR 0 1
79742: PPUSH
79743: CALL_OW 266
79747: PUSH
79748: LD_INT 5
79750: EQUAL
79751: AND
79752: PUSH
79753: LD_VAR 0 2
79757: PPUSH
79758: CALL_OW 110
79762: PUSH
79763: LD_INT 18
79765: NONEQUAL
79766: AND
79767: IFFALSE 79807
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
79769: LD_VAR 0 2
79773: PPUSH
79774: CALL_OW 257
79778: PUSH
79779: LD_INT 5
79781: PUSH
79782: LD_INT 8
79784: PUSH
79785: LD_INT 9
79787: PUSH
79788: EMPTY
79789: LIST
79790: LIST
79791: LIST
79792: IN
79793: IFFALSE 79807
// SetClass ( unit , 1 ) ;
79795: LD_VAR 0 2
79799: PPUSH
79800: LD_INT 1
79802: PPUSH
79803: CALL_OW 336
// end ;
79807: LD_VAR 0 3
79811: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
79812: LD_INT 0
79814: PPUSH
79815: PPUSH
// if not mc_bases or not skirmish then
79816: LD_EXP 63
79820: NOT
79821: PUSH
79822: LD_EXP 61
79826: NOT
79827: OR
79828: IFFALSE 79832
// exit ;
79830: GO 79948
// if GetLives ( abandoned_vehicle ) > 250 then
79832: LD_VAR 0 2
79836: PPUSH
79837: CALL_OW 256
79841: PUSH
79842: LD_INT 250
79844: GREATER
79845: IFFALSE 79849
// exit ;
79847: GO 79948
// for i = 1 to mc_bases do
79849: LD_ADDR_VAR 0 6
79853: PUSH
79854: DOUBLE
79855: LD_INT 1
79857: DEC
79858: ST_TO_ADDR
79859: LD_EXP 63
79863: PUSH
79864: FOR_TO
79865: IFFALSE 79946
// begin if driver in mc_bases [ i ] then
79867: LD_VAR 0 1
79871: PUSH
79872: LD_EXP 63
79876: PUSH
79877: LD_VAR 0 6
79881: ARRAY
79882: IN
79883: IFFALSE 79944
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
79885: LD_VAR 0 1
79889: PPUSH
79890: LD_EXP 63
79894: PUSH
79895: LD_VAR 0 6
79899: ARRAY
79900: PPUSH
79901: LD_INT 2
79903: PUSH
79904: LD_INT 30
79906: PUSH
79907: LD_INT 0
79909: PUSH
79910: EMPTY
79911: LIST
79912: LIST
79913: PUSH
79914: LD_INT 30
79916: PUSH
79917: LD_INT 1
79919: PUSH
79920: EMPTY
79921: LIST
79922: LIST
79923: PUSH
79924: EMPTY
79925: LIST
79926: LIST
79927: LIST
79928: PPUSH
79929: CALL_OW 72
79933: PUSH
79934: LD_INT 1
79936: ARRAY
79937: PPUSH
79938: CALL_OW 112
// break ;
79942: GO 79946
// end ; end ;
79944: GO 79864
79946: POP
79947: POP
// end ; end_of_file end_of_file
79948: LD_VAR 0 5
79952: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
79953: GO 79955
79955: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
79956: LD_STRING initStreamRollete();
79958: PPUSH
79959: CALL_OW 559
// InitStreamMode ;
79963: CALL 79972 0 0
// DefineStreamItems ( ) ;
79967: CALL 80412 0 0
// end ;
79971: END
// function InitStreamMode ; begin
79972: LD_INT 0
79974: PPUSH
// streamModeActive := false ;
79975: LD_ADDR_EXP 106
79979: PUSH
79980: LD_INT 0
79982: ST_TO_ADDR
// normalCounter := 36 ;
79983: LD_ADDR_EXP 107
79987: PUSH
79988: LD_INT 36
79990: ST_TO_ADDR
// hardcoreCounter := 16 ;
79991: LD_ADDR_EXP 108
79995: PUSH
79996: LD_INT 16
79998: ST_TO_ADDR
// sRocket := false ;
79999: LD_ADDR_EXP 111
80003: PUSH
80004: LD_INT 0
80006: ST_TO_ADDR
// sSpeed := false ;
80007: LD_ADDR_EXP 110
80011: PUSH
80012: LD_INT 0
80014: ST_TO_ADDR
// sEngine := false ;
80015: LD_ADDR_EXP 112
80019: PUSH
80020: LD_INT 0
80022: ST_TO_ADDR
// sSpec := false ;
80023: LD_ADDR_EXP 109
80027: PUSH
80028: LD_INT 0
80030: ST_TO_ADDR
// sLevel := false ;
80031: LD_ADDR_EXP 113
80035: PUSH
80036: LD_INT 0
80038: ST_TO_ADDR
// sArmoury := false ;
80039: LD_ADDR_EXP 114
80043: PUSH
80044: LD_INT 0
80046: ST_TO_ADDR
// sRadar := false ;
80047: LD_ADDR_EXP 115
80051: PUSH
80052: LD_INT 0
80054: ST_TO_ADDR
// sBunker := false ;
80055: LD_ADDR_EXP 116
80059: PUSH
80060: LD_INT 0
80062: ST_TO_ADDR
// sHack := false ;
80063: LD_ADDR_EXP 117
80067: PUSH
80068: LD_INT 0
80070: ST_TO_ADDR
// sFire := false ;
80071: LD_ADDR_EXP 118
80075: PUSH
80076: LD_INT 0
80078: ST_TO_ADDR
// sRefresh := false ;
80079: LD_ADDR_EXP 119
80083: PUSH
80084: LD_INT 0
80086: ST_TO_ADDR
// sExp := false ;
80087: LD_ADDR_EXP 120
80091: PUSH
80092: LD_INT 0
80094: ST_TO_ADDR
// sDepot := false ;
80095: LD_ADDR_EXP 121
80099: PUSH
80100: LD_INT 0
80102: ST_TO_ADDR
// sFlag := false ;
80103: LD_ADDR_EXP 122
80107: PUSH
80108: LD_INT 0
80110: ST_TO_ADDR
// sKamikadze := false ;
80111: LD_ADDR_EXP 130
80115: PUSH
80116: LD_INT 0
80118: ST_TO_ADDR
// sTroll := false ;
80119: LD_ADDR_EXP 131
80123: PUSH
80124: LD_INT 0
80126: ST_TO_ADDR
// sSlow := false ;
80127: LD_ADDR_EXP 132
80131: PUSH
80132: LD_INT 0
80134: ST_TO_ADDR
// sLack := false ;
80135: LD_ADDR_EXP 133
80139: PUSH
80140: LD_INT 0
80142: ST_TO_ADDR
// sTank := false ;
80143: LD_ADDR_EXP 135
80147: PUSH
80148: LD_INT 0
80150: ST_TO_ADDR
// sRemote := false ;
80151: LD_ADDR_EXP 136
80155: PUSH
80156: LD_INT 0
80158: ST_TO_ADDR
// sPowell := false ;
80159: LD_ADDR_EXP 137
80163: PUSH
80164: LD_INT 0
80166: ST_TO_ADDR
// sTeleport := false ;
80167: LD_ADDR_EXP 140
80171: PUSH
80172: LD_INT 0
80174: ST_TO_ADDR
// sOilTower := false ;
80175: LD_ADDR_EXP 142
80179: PUSH
80180: LD_INT 0
80182: ST_TO_ADDR
// sShovel := false ;
80183: LD_ADDR_EXP 143
80187: PUSH
80188: LD_INT 0
80190: ST_TO_ADDR
// sSheik := false ;
80191: LD_ADDR_EXP 144
80195: PUSH
80196: LD_INT 0
80198: ST_TO_ADDR
// sEarthquake := false ;
80199: LD_ADDR_EXP 146
80203: PUSH
80204: LD_INT 0
80206: ST_TO_ADDR
// sAI := false ;
80207: LD_ADDR_EXP 147
80211: PUSH
80212: LD_INT 0
80214: ST_TO_ADDR
// sCargo := false ;
80215: LD_ADDR_EXP 150
80219: PUSH
80220: LD_INT 0
80222: ST_TO_ADDR
// sDLaser := false ;
80223: LD_ADDR_EXP 151
80227: PUSH
80228: LD_INT 0
80230: ST_TO_ADDR
// sExchange := false ;
80231: LD_ADDR_EXP 152
80235: PUSH
80236: LD_INT 0
80238: ST_TO_ADDR
// sFac := false ;
80239: LD_ADDR_EXP 153
80243: PUSH
80244: LD_INT 0
80246: ST_TO_ADDR
// sPower := false ;
80247: LD_ADDR_EXP 154
80251: PUSH
80252: LD_INT 0
80254: ST_TO_ADDR
// sRandom := false ;
80255: LD_ADDR_EXP 155
80259: PUSH
80260: LD_INT 0
80262: ST_TO_ADDR
// sShield := false ;
80263: LD_ADDR_EXP 156
80267: PUSH
80268: LD_INT 0
80270: ST_TO_ADDR
// sTime := false ;
80271: LD_ADDR_EXP 157
80275: PUSH
80276: LD_INT 0
80278: ST_TO_ADDR
// sTools := false ;
80279: LD_ADDR_EXP 158
80283: PUSH
80284: LD_INT 0
80286: ST_TO_ADDR
// sSold := false ;
80287: LD_ADDR_EXP 123
80291: PUSH
80292: LD_INT 0
80294: ST_TO_ADDR
// sDiff := false ;
80295: LD_ADDR_EXP 124
80299: PUSH
80300: LD_INT 0
80302: ST_TO_ADDR
// sFog := false ;
80303: LD_ADDR_EXP 127
80307: PUSH
80308: LD_INT 0
80310: ST_TO_ADDR
// sReset := false ;
80311: LD_ADDR_EXP 128
80315: PUSH
80316: LD_INT 0
80318: ST_TO_ADDR
// sSun := false ;
80319: LD_ADDR_EXP 129
80323: PUSH
80324: LD_INT 0
80326: ST_TO_ADDR
// sTiger := false ;
80327: LD_ADDR_EXP 125
80331: PUSH
80332: LD_INT 0
80334: ST_TO_ADDR
// sBomb := false ;
80335: LD_ADDR_EXP 126
80339: PUSH
80340: LD_INT 0
80342: ST_TO_ADDR
// sWound := false ;
80343: LD_ADDR_EXP 134
80347: PUSH
80348: LD_INT 0
80350: ST_TO_ADDR
// sBetray := false ;
80351: LD_ADDR_EXP 138
80355: PUSH
80356: LD_INT 0
80358: ST_TO_ADDR
// sContamin := false ;
80359: LD_ADDR_EXP 139
80363: PUSH
80364: LD_INT 0
80366: ST_TO_ADDR
// sOil := false ;
80367: LD_ADDR_EXP 141
80371: PUSH
80372: LD_INT 0
80374: ST_TO_ADDR
// sStu := false ;
80375: LD_ADDR_EXP 145
80379: PUSH
80380: LD_INT 0
80382: ST_TO_ADDR
// sBazooka := false ;
80383: LD_ADDR_EXP 148
80387: PUSH
80388: LD_INT 0
80390: ST_TO_ADDR
// sMortar := false ;
80391: LD_ADDR_EXP 149
80395: PUSH
80396: LD_INT 0
80398: ST_TO_ADDR
// sRanger := false ;
80399: LD_ADDR_EXP 159
80403: PUSH
80404: LD_INT 0
80406: ST_TO_ADDR
// end ;
80407: LD_VAR 0 1
80411: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
80412: LD_INT 0
80414: PPUSH
80415: PPUSH
80416: PPUSH
80417: PPUSH
80418: PPUSH
// result := [ ] ;
80419: LD_ADDR_VAR 0 1
80423: PUSH
80424: EMPTY
80425: ST_TO_ADDR
// if campaign_id = 1 then
80426: LD_OWVAR 69
80430: PUSH
80431: LD_INT 1
80433: EQUAL
80434: IFFALSE 83372
// begin case mission_number of 1 :
80436: LD_OWVAR 70
80440: PUSH
80441: LD_INT 1
80443: DOUBLE
80444: EQUAL
80445: IFTRUE 80449
80447: GO 80513
80449: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
80450: LD_ADDR_VAR 0 1
80454: PUSH
80455: LD_INT 2
80457: PUSH
80458: LD_INT 4
80460: PUSH
80461: LD_INT 11
80463: PUSH
80464: LD_INT 12
80466: PUSH
80467: LD_INT 15
80469: PUSH
80470: LD_INT 16
80472: PUSH
80473: LD_INT 22
80475: PUSH
80476: LD_INT 23
80478: PUSH
80479: LD_INT 26
80481: PUSH
80482: EMPTY
80483: LIST
80484: LIST
80485: LIST
80486: LIST
80487: LIST
80488: LIST
80489: LIST
80490: LIST
80491: LIST
80492: PUSH
80493: LD_INT 101
80495: PUSH
80496: LD_INT 102
80498: PUSH
80499: LD_INT 106
80501: PUSH
80502: EMPTY
80503: LIST
80504: LIST
80505: LIST
80506: PUSH
80507: EMPTY
80508: LIST
80509: LIST
80510: ST_TO_ADDR
80511: GO 83370
80513: LD_INT 2
80515: DOUBLE
80516: EQUAL
80517: IFTRUE 80521
80519: GO 80593
80521: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
80522: LD_ADDR_VAR 0 1
80526: PUSH
80527: LD_INT 2
80529: PUSH
80530: LD_INT 4
80532: PUSH
80533: LD_INT 11
80535: PUSH
80536: LD_INT 12
80538: PUSH
80539: LD_INT 15
80541: PUSH
80542: LD_INT 16
80544: PUSH
80545: LD_INT 22
80547: PUSH
80548: LD_INT 23
80550: PUSH
80551: LD_INT 26
80553: PUSH
80554: EMPTY
80555: LIST
80556: LIST
80557: LIST
80558: LIST
80559: LIST
80560: LIST
80561: LIST
80562: LIST
80563: LIST
80564: PUSH
80565: LD_INT 101
80567: PUSH
80568: LD_INT 102
80570: PUSH
80571: LD_INT 105
80573: PUSH
80574: LD_INT 106
80576: PUSH
80577: LD_INT 108
80579: PUSH
80580: EMPTY
80581: LIST
80582: LIST
80583: LIST
80584: LIST
80585: LIST
80586: PUSH
80587: EMPTY
80588: LIST
80589: LIST
80590: ST_TO_ADDR
80591: GO 83370
80593: LD_INT 3
80595: DOUBLE
80596: EQUAL
80597: IFTRUE 80601
80599: GO 80677
80601: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
80602: LD_ADDR_VAR 0 1
80606: PUSH
80607: LD_INT 2
80609: PUSH
80610: LD_INT 4
80612: PUSH
80613: LD_INT 5
80615: PUSH
80616: LD_INT 11
80618: PUSH
80619: LD_INT 12
80621: PUSH
80622: LD_INT 15
80624: PUSH
80625: LD_INT 16
80627: PUSH
80628: LD_INT 22
80630: PUSH
80631: LD_INT 26
80633: PUSH
80634: LD_INT 36
80636: PUSH
80637: EMPTY
80638: LIST
80639: LIST
80640: LIST
80641: LIST
80642: LIST
80643: LIST
80644: LIST
80645: LIST
80646: LIST
80647: LIST
80648: PUSH
80649: LD_INT 101
80651: PUSH
80652: LD_INT 102
80654: PUSH
80655: LD_INT 105
80657: PUSH
80658: LD_INT 106
80660: PUSH
80661: LD_INT 108
80663: PUSH
80664: EMPTY
80665: LIST
80666: LIST
80667: LIST
80668: LIST
80669: LIST
80670: PUSH
80671: EMPTY
80672: LIST
80673: LIST
80674: ST_TO_ADDR
80675: GO 83370
80677: LD_INT 4
80679: DOUBLE
80680: EQUAL
80681: IFTRUE 80685
80683: GO 80769
80685: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
80686: LD_ADDR_VAR 0 1
80690: PUSH
80691: LD_INT 2
80693: PUSH
80694: LD_INT 4
80696: PUSH
80697: LD_INT 5
80699: PUSH
80700: LD_INT 8
80702: PUSH
80703: LD_INT 11
80705: PUSH
80706: LD_INT 12
80708: PUSH
80709: LD_INT 15
80711: PUSH
80712: LD_INT 16
80714: PUSH
80715: LD_INT 22
80717: PUSH
80718: LD_INT 23
80720: PUSH
80721: LD_INT 26
80723: PUSH
80724: LD_INT 36
80726: PUSH
80727: EMPTY
80728: LIST
80729: LIST
80730: LIST
80731: LIST
80732: LIST
80733: LIST
80734: LIST
80735: LIST
80736: LIST
80737: LIST
80738: LIST
80739: LIST
80740: PUSH
80741: LD_INT 101
80743: PUSH
80744: LD_INT 102
80746: PUSH
80747: LD_INT 105
80749: PUSH
80750: LD_INT 106
80752: PUSH
80753: LD_INT 108
80755: PUSH
80756: EMPTY
80757: LIST
80758: LIST
80759: LIST
80760: LIST
80761: LIST
80762: PUSH
80763: EMPTY
80764: LIST
80765: LIST
80766: ST_TO_ADDR
80767: GO 83370
80769: LD_INT 5
80771: DOUBLE
80772: EQUAL
80773: IFTRUE 80777
80775: GO 80877
80777: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
80778: LD_ADDR_VAR 0 1
80782: PUSH
80783: LD_INT 2
80785: PUSH
80786: LD_INT 4
80788: PUSH
80789: LD_INT 5
80791: PUSH
80792: LD_INT 6
80794: PUSH
80795: LD_INT 8
80797: PUSH
80798: LD_INT 11
80800: PUSH
80801: LD_INT 12
80803: PUSH
80804: LD_INT 15
80806: PUSH
80807: LD_INT 16
80809: PUSH
80810: LD_INT 22
80812: PUSH
80813: LD_INT 23
80815: PUSH
80816: LD_INT 25
80818: PUSH
80819: LD_INT 26
80821: PUSH
80822: LD_INT 36
80824: PUSH
80825: EMPTY
80826: LIST
80827: LIST
80828: LIST
80829: LIST
80830: LIST
80831: LIST
80832: LIST
80833: LIST
80834: LIST
80835: LIST
80836: LIST
80837: LIST
80838: LIST
80839: LIST
80840: PUSH
80841: LD_INT 101
80843: PUSH
80844: LD_INT 102
80846: PUSH
80847: LD_INT 105
80849: PUSH
80850: LD_INT 106
80852: PUSH
80853: LD_INT 108
80855: PUSH
80856: LD_INT 109
80858: PUSH
80859: LD_INT 112
80861: PUSH
80862: EMPTY
80863: LIST
80864: LIST
80865: LIST
80866: LIST
80867: LIST
80868: LIST
80869: LIST
80870: PUSH
80871: EMPTY
80872: LIST
80873: LIST
80874: ST_TO_ADDR
80875: GO 83370
80877: LD_INT 6
80879: DOUBLE
80880: EQUAL
80881: IFTRUE 80885
80883: GO 81005
80885: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
80886: LD_ADDR_VAR 0 1
80890: PUSH
80891: LD_INT 2
80893: PUSH
80894: LD_INT 4
80896: PUSH
80897: LD_INT 5
80899: PUSH
80900: LD_INT 6
80902: PUSH
80903: LD_INT 8
80905: PUSH
80906: LD_INT 11
80908: PUSH
80909: LD_INT 12
80911: PUSH
80912: LD_INT 15
80914: PUSH
80915: LD_INT 16
80917: PUSH
80918: LD_INT 20
80920: PUSH
80921: LD_INT 21
80923: PUSH
80924: LD_INT 22
80926: PUSH
80927: LD_INT 23
80929: PUSH
80930: LD_INT 25
80932: PUSH
80933: LD_INT 26
80935: PUSH
80936: LD_INT 30
80938: PUSH
80939: LD_INT 31
80941: PUSH
80942: LD_INT 32
80944: PUSH
80945: LD_INT 36
80947: PUSH
80948: EMPTY
80949: LIST
80950: LIST
80951: LIST
80952: LIST
80953: LIST
80954: LIST
80955: LIST
80956: LIST
80957: LIST
80958: LIST
80959: LIST
80960: LIST
80961: LIST
80962: LIST
80963: LIST
80964: LIST
80965: LIST
80966: LIST
80967: LIST
80968: PUSH
80969: LD_INT 101
80971: PUSH
80972: LD_INT 102
80974: PUSH
80975: LD_INT 105
80977: PUSH
80978: LD_INT 106
80980: PUSH
80981: LD_INT 108
80983: PUSH
80984: LD_INT 109
80986: PUSH
80987: LD_INT 112
80989: PUSH
80990: EMPTY
80991: LIST
80992: LIST
80993: LIST
80994: LIST
80995: LIST
80996: LIST
80997: LIST
80998: PUSH
80999: EMPTY
81000: LIST
81001: LIST
81002: ST_TO_ADDR
81003: GO 83370
81005: LD_INT 7
81007: DOUBLE
81008: EQUAL
81009: IFTRUE 81013
81011: GO 81113
81013: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
81014: LD_ADDR_VAR 0 1
81018: PUSH
81019: LD_INT 2
81021: PUSH
81022: LD_INT 4
81024: PUSH
81025: LD_INT 5
81027: PUSH
81028: LD_INT 7
81030: PUSH
81031: LD_INT 11
81033: PUSH
81034: LD_INT 12
81036: PUSH
81037: LD_INT 15
81039: PUSH
81040: LD_INT 16
81042: PUSH
81043: LD_INT 20
81045: PUSH
81046: LD_INT 21
81048: PUSH
81049: LD_INT 22
81051: PUSH
81052: LD_INT 23
81054: PUSH
81055: LD_INT 25
81057: PUSH
81058: LD_INT 26
81060: PUSH
81061: EMPTY
81062: LIST
81063: LIST
81064: LIST
81065: LIST
81066: LIST
81067: LIST
81068: LIST
81069: LIST
81070: LIST
81071: LIST
81072: LIST
81073: LIST
81074: LIST
81075: LIST
81076: PUSH
81077: LD_INT 101
81079: PUSH
81080: LD_INT 102
81082: PUSH
81083: LD_INT 103
81085: PUSH
81086: LD_INT 105
81088: PUSH
81089: LD_INT 106
81091: PUSH
81092: LD_INT 108
81094: PUSH
81095: LD_INT 112
81097: PUSH
81098: EMPTY
81099: LIST
81100: LIST
81101: LIST
81102: LIST
81103: LIST
81104: LIST
81105: LIST
81106: PUSH
81107: EMPTY
81108: LIST
81109: LIST
81110: ST_TO_ADDR
81111: GO 83370
81113: LD_INT 8
81115: DOUBLE
81116: EQUAL
81117: IFTRUE 81121
81119: GO 81249
81121: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
81122: LD_ADDR_VAR 0 1
81126: PUSH
81127: LD_INT 2
81129: PUSH
81130: LD_INT 4
81132: PUSH
81133: LD_INT 5
81135: PUSH
81136: LD_INT 6
81138: PUSH
81139: LD_INT 7
81141: PUSH
81142: LD_INT 8
81144: PUSH
81145: LD_INT 11
81147: PUSH
81148: LD_INT 12
81150: PUSH
81151: LD_INT 15
81153: PUSH
81154: LD_INT 16
81156: PUSH
81157: LD_INT 20
81159: PUSH
81160: LD_INT 21
81162: PUSH
81163: LD_INT 22
81165: PUSH
81166: LD_INT 23
81168: PUSH
81169: LD_INT 25
81171: PUSH
81172: LD_INT 26
81174: PUSH
81175: LD_INT 30
81177: PUSH
81178: LD_INT 31
81180: PUSH
81181: LD_INT 32
81183: PUSH
81184: LD_INT 36
81186: PUSH
81187: EMPTY
81188: LIST
81189: LIST
81190: LIST
81191: LIST
81192: LIST
81193: LIST
81194: LIST
81195: LIST
81196: LIST
81197: LIST
81198: LIST
81199: LIST
81200: LIST
81201: LIST
81202: LIST
81203: LIST
81204: LIST
81205: LIST
81206: LIST
81207: LIST
81208: PUSH
81209: LD_INT 101
81211: PUSH
81212: LD_INT 102
81214: PUSH
81215: LD_INT 103
81217: PUSH
81218: LD_INT 105
81220: PUSH
81221: LD_INT 106
81223: PUSH
81224: LD_INT 108
81226: PUSH
81227: LD_INT 109
81229: PUSH
81230: LD_INT 112
81232: PUSH
81233: EMPTY
81234: LIST
81235: LIST
81236: LIST
81237: LIST
81238: LIST
81239: LIST
81240: LIST
81241: LIST
81242: PUSH
81243: EMPTY
81244: LIST
81245: LIST
81246: ST_TO_ADDR
81247: GO 83370
81249: LD_INT 9
81251: DOUBLE
81252: EQUAL
81253: IFTRUE 81257
81255: GO 81393
81257: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
81258: LD_ADDR_VAR 0 1
81262: PUSH
81263: LD_INT 2
81265: PUSH
81266: LD_INT 4
81268: PUSH
81269: LD_INT 5
81271: PUSH
81272: LD_INT 6
81274: PUSH
81275: LD_INT 7
81277: PUSH
81278: LD_INT 8
81280: PUSH
81281: LD_INT 11
81283: PUSH
81284: LD_INT 12
81286: PUSH
81287: LD_INT 15
81289: PUSH
81290: LD_INT 16
81292: PUSH
81293: LD_INT 20
81295: PUSH
81296: LD_INT 21
81298: PUSH
81299: LD_INT 22
81301: PUSH
81302: LD_INT 23
81304: PUSH
81305: LD_INT 25
81307: PUSH
81308: LD_INT 26
81310: PUSH
81311: LD_INT 28
81313: PUSH
81314: LD_INT 30
81316: PUSH
81317: LD_INT 31
81319: PUSH
81320: LD_INT 32
81322: PUSH
81323: LD_INT 36
81325: PUSH
81326: EMPTY
81327: LIST
81328: LIST
81329: LIST
81330: LIST
81331: LIST
81332: LIST
81333: LIST
81334: LIST
81335: LIST
81336: LIST
81337: LIST
81338: LIST
81339: LIST
81340: LIST
81341: LIST
81342: LIST
81343: LIST
81344: LIST
81345: LIST
81346: LIST
81347: LIST
81348: PUSH
81349: LD_INT 101
81351: PUSH
81352: LD_INT 102
81354: PUSH
81355: LD_INT 103
81357: PUSH
81358: LD_INT 105
81360: PUSH
81361: LD_INT 106
81363: PUSH
81364: LD_INT 108
81366: PUSH
81367: LD_INT 109
81369: PUSH
81370: LD_INT 112
81372: PUSH
81373: LD_INT 114
81375: PUSH
81376: EMPTY
81377: LIST
81378: LIST
81379: LIST
81380: LIST
81381: LIST
81382: LIST
81383: LIST
81384: LIST
81385: LIST
81386: PUSH
81387: EMPTY
81388: LIST
81389: LIST
81390: ST_TO_ADDR
81391: GO 83370
81393: LD_INT 10
81395: DOUBLE
81396: EQUAL
81397: IFTRUE 81401
81399: GO 81585
81401: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
81402: LD_ADDR_VAR 0 1
81406: PUSH
81407: LD_INT 2
81409: PUSH
81410: LD_INT 4
81412: PUSH
81413: LD_INT 5
81415: PUSH
81416: LD_INT 6
81418: PUSH
81419: LD_INT 7
81421: PUSH
81422: LD_INT 8
81424: PUSH
81425: LD_INT 9
81427: PUSH
81428: LD_INT 10
81430: PUSH
81431: LD_INT 11
81433: PUSH
81434: LD_INT 12
81436: PUSH
81437: LD_INT 13
81439: PUSH
81440: LD_INT 14
81442: PUSH
81443: LD_INT 15
81445: PUSH
81446: LD_INT 16
81448: PUSH
81449: LD_INT 17
81451: PUSH
81452: LD_INT 18
81454: PUSH
81455: LD_INT 19
81457: PUSH
81458: LD_INT 20
81460: PUSH
81461: LD_INT 21
81463: PUSH
81464: LD_INT 22
81466: PUSH
81467: LD_INT 23
81469: PUSH
81470: LD_INT 24
81472: PUSH
81473: LD_INT 25
81475: PUSH
81476: LD_INT 26
81478: PUSH
81479: LD_INT 28
81481: PUSH
81482: LD_INT 30
81484: PUSH
81485: LD_INT 31
81487: PUSH
81488: LD_INT 32
81490: PUSH
81491: LD_INT 36
81493: PUSH
81494: EMPTY
81495: LIST
81496: LIST
81497: LIST
81498: LIST
81499: LIST
81500: LIST
81501: LIST
81502: LIST
81503: LIST
81504: LIST
81505: LIST
81506: LIST
81507: LIST
81508: LIST
81509: LIST
81510: LIST
81511: LIST
81512: LIST
81513: LIST
81514: LIST
81515: LIST
81516: LIST
81517: LIST
81518: LIST
81519: LIST
81520: LIST
81521: LIST
81522: LIST
81523: LIST
81524: PUSH
81525: LD_INT 101
81527: PUSH
81528: LD_INT 102
81530: PUSH
81531: LD_INT 103
81533: PUSH
81534: LD_INT 104
81536: PUSH
81537: LD_INT 105
81539: PUSH
81540: LD_INT 106
81542: PUSH
81543: LD_INT 107
81545: PUSH
81546: LD_INT 108
81548: PUSH
81549: LD_INT 109
81551: PUSH
81552: LD_INT 110
81554: PUSH
81555: LD_INT 111
81557: PUSH
81558: LD_INT 112
81560: PUSH
81561: LD_INT 114
81563: PUSH
81564: EMPTY
81565: LIST
81566: LIST
81567: LIST
81568: LIST
81569: LIST
81570: LIST
81571: LIST
81572: LIST
81573: LIST
81574: LIST
81575: LIST
81576: LIST
81577: LIST
81578: PUSH
81579: EMPTY
81580: LIST
81581: LIST
81582: ST_TO_ADDR
81583: GO 83370
81585: LD_INT 11
81587: DOUBLE
81588: EQUAL
81589: IFTRUE 81593
81591: GO 81785
81593: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
81594: LD_ADDR_VAR 0 1
81598: PUSH
81599: LD_INT 2
81601: PUSH
81602: LD_INT 3
81604: PUSH
81605: LD_INT 4
81607: PUSH
81608: LD_INT 5
81610: PUSH
81611: LD_INT 6
81613: PUSH
81614: LD_INT 7
81616: PUSH
81617: LD_INT 8
81619: PUSH
81620: LD_INT 9
81622: PUSH
81623: LD_INT 10
81625: PUSH
81626: LD_INT 11
81628: PUSH
81629: LD_INT 12
81631: PUSH
81632: LD_INT 13
81634: PUSH
81635: LD_INT 14
81637: PUSH
81638: LD_INT 15
81640: PUSH
81641: LD_INT 16
81643: PUSH
81644: LD_INT 17
81646: PUSH
81647: LD_INT 18
81649: PUSH
81650: LD_INT 19
81652: PUSH
81653: LD_INT 20
81655: PUSH
81656: LD_INT 21
81658: PUSH
81659: LD_INT 22
81661: PUSH
81662: LD_INT 23
81664: PUSH
81665: LD_INT 24
81667: PUSH
81668: LD_INT 25
81670: PUSH
81671: LD_INT 26
81673: PUSH
81674: LD_INT 28
81676: PUSH
81677: LD_INT 30
81679: PUSH
81680: LD_INT 31
81682: PUSH
81683: LD_INT 32
81685: PUSH
81686: LD_INT 34
81688: PUSH
81689: LD_INT 36
81691: PUSH
81692: EMPTY
81693: LIST
81694: LIST
81695: LIST
81696: LIST
81697: LIST
81698: LIST
81699: LIST
81700: LIST
81701: LIST
81702: LIST
81703: LIST
81704: LIST
81705: LIST
81706: LIST
81707: LIST
81708: LIST
81709: LIST
81710: LIST
81711: LIST
81712: LIST
81713: LIST
81714: LIST
81715: LIST
81716: LIST
81717: LIST
81718: LIST
81719: LIST
81720: LIST
81721: LIST
81722: LIST
81723: LIST
81724: PUSH
81725: LD_INT 101
81727: PUSH
81728: LD_INT 102
81730: PUSH
81731: LD_INT 103
81733: PUSH
81734: LD_INT 104
81736: PUSH
81737: LD_INT 105
81739: PUSH
81740: LD_INT 106
81742: PUSH
81743: LD_INT 107
81745: PUSH
81746: LD_INT 108
81748: PUSH
81749: LD_INT 109
81751: PUSH
81752: LD_INT 110
81754: PUSH
81755: LD_INT 111
81757: PUSH
81758: LD_INT 112
81760: PUSH
81761: LD_INT 114
81763: PUSH
81764: EMPTY
81765: LIST
81766: LIST
81767: LIST
81768: LIST
81769: LIST
81770: LIST
81771: LIST
81772: LIST
81773: LIST
81774: LIST
81775: LIST
81776: LIST
81777: LIST
81778: PUSH
81779: EMPTY
81780: LIST
81781: LIST
81782: ST_TO_ADDR
81783: GO 83370
81785: LD_INT 12
81787: DOUBLE
81788: EQUAL
81789: IFTRUE 81793
81791: GO 82001
81793: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
81794: LD_ADDR_VAR 0 1
81798: PUSH
81799: LD_INT 1
81801: PUSH
81802: LD_INT 2
81804: PUSH
81805: LD_INT 3
81807: PUSH
81808: LD_INT 4
81810: PUSH
81811: LD_INT 5
81813: PUSH
81814: LD_INT 6
81816: PUSH
81817: LD_INT 7
81819: PUSH
81820: LD_INT 8
81822: PUSH
81823: LD_INT 9
81825: PUSH
81826: LD_INT 10
81828: PUSH
81829: LD_INT 11
81831: PUSH
81832: LD_INT 12
81834: PUSH
81835: LD_INT 13
81837: PUSH
81838: LD_INT 14
81840: PUSH
81841: LD_INT 15
81843: PUSH
81844: LD_INT 16
81846: PUSH
81847: LD_INT 17
81849: PUSH
81850: LD_INT 18
81852: PUSH
81853: LD_INT 19
81855: PUSH
81856: LD_INT 20
81858: PUSH
81859: LD_INT 21
81861: PUSH
81862: LD_INT 22
81864: PUSH
81865: LD_INT 23
81867: PUSH
81868: LD_INT 24
81870: PUSH
81871: LD_INT 25
81873: PUSH
81874: LD_INT 26
81876: PUSH
81877: LD_INT 27
81879: PUSH
81880: LD_INT 28
81882: PUSH
81883: LD_INT 30
81885: PUSH
81886: LD_INT 31
81888: PUSH
81889: LD_INT 32
81891: PUSH
81892: LD_INT 33
81894: PUSH
81895: LD_INT 34
81897: PUSH
81898: LD_INT 36
81900: PUSH
81901: EMPTY
81902: LIST
81903: LIST
81904: LIST
81905: LIST
81906: LIST
81907: LIST
81908: LIST
81909: LIST
81910: LIST
81911: LIST
81912: LIST
81913: LIST
81914: LIST
81915: LIST
81916: LIST
81917: LIST
81918: LIST
81919: LIST
81920: LIST
81921: LIST
81922: LIST
81923: LIST
81924: LIST
81925: LIST
81926: LIST
81927: LIST
81928: LIST
81929: LIST
81930: LIST
81931: LIST
81932: LIST
81933: LIST
81934: LIST
81935: LIST
81936: PUSH
81937: LD_INT 101
81939: PUSH
81940: LD_INT 102
81942: PUSH
81943: LD_INT 103
81945: PUSH
81946: LD_INT 104
81948: PUSH
81949: LD_INT 105
81951: PUSH
81952: LD_INT 106
81954: PUSH
81955: LD_INT 107
81957: PUSH
81958: LD_INT 108
81960: PUSH
81961: LD_INT 109
81963: PUSH
81964: LD_INT 110
81966: PUSH
81967: LD_INT 111
81969: PUSH
81970: LD_INT 112
81972: PUSH
81973: LD_INT 113
81975: PUSH
81976: LD_INT 114
81978: PUSH
81979: EMPTY
81980: LIST
81981: LIST
81982: LIST
81983: LIST
81984: LIST
81985: LIST
81986: LIST
81987: LIST
81988: LIST
81989: LIST
81990: LIST
81991: LIST
81992: LIST
81993: LIST
81994: PUSH
81995: EMPTY
81996: LIST
81997: LIST
81998: ST_TO_ADDR
81999: GO 83370
82001: LD_INT 13
82003: DOUBLE
82004: EQUAL
82005: IFTRUE 82009
82007: GO 82205
82009: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
82010: LD_ADDR_VAR 0 1
82014: PUSH
82015: LD_INT 1
82017: PUSH
82018: LD_INT 2
82020: PUSH
82021: LD_INT 3
82023: PUSH
82024: LD_INT 4
82026: PUSH
82027: LD_INT 5
82029: PUSH
82030: LD_INT 8
82032: PUSH
82033: LD_INT 9
82035: PUSH
82036: LD_INT 10
82038: PUSH
82039: LD_INT 11
82041: PUSH
82042: LD_INT 12
82044: PUSH
82045: LD_INT 14
82047: PUSH
82048: LD_INT 15
82050: PUSH
82051: LD_INT 16
82053: PUSH
82054: LD_INT 17
82056: PUSH
82057: LD_INT 18
82059: PUSH
82060: LD_INT 19
82062: PUSH
82063: LD_INT 20
82065: PUSH
82066: LD_INT 21
82068: PUSH
82069: LD_INT 22
82071: PUSH
82072: LD_INT 23
82074: PUSH
82075: LD_INT 24
82077: PUSH
82078: LD_INT 25
82080: PUSH
82081: LD_INT 26
82083: PUSH
82084: LD_INT 27
82086: PUSH
82087: LD_INT 28
82089: PUSH
82090: LD_INT 30
82092: PUSH
82093: LD_INT 31
82095: PUSH
82096: LD_INT 32
82098: PUSH
82099: LD_INT 33
82101: PUSH
82102: LD_INT 34
82104: PUSH
82105: LD_INT 36
82107: PUSH
82108: EMPTY
82109: LIST
82110: LIST
82111: LIST
82112: LIST
82113: LIST
82114: LIST
82115: LIST
82116: LIST
82117: LIST
82118: LIST
82119: LIST
82120: LIST
82121: LIST
82122: LIST
82123: LIST
82124: LIST
82125: LIST
82126: LIST
82127: LIST
82128: LIST
82129: LIST
82130: LIST
82131: LIST
82132: LIST
82133: LIST
82134: LIST
82135: LIST
82136: LIST
82137: LIST
82138: LIST
82139: LIST
82140: PUSH
82141: LD_INT 101
82143: PUSH
82144: LD_INT 102
82146: PUSH
82147: LD_INT 103
82149: PUSH
82150: LD_INT 104
82152: PUSH
82153: LD_INT 105
82155: PUSH
82156: LD_INT 106
82158: PUSH
82159: LD_INT 107
82161: PUSH
82162: LD_INT 108
82164: PUSH
82165: LD_INT 109
82167: PUSH
82168: LD_INT 110
82170: PUSH
82171: LD_INT 111
82173: PUSH
82174: LD_INT 112
82176: PUSH
82177: LD_INT 113
82179: PUSH
82180: LD_INT 114
82182: PUSH
82183: EMPTY
82184: LIST
82185: LIST
82186: LIST
82187: LIST
82188: LIST
82189: LIST
82190: LIST
82191: LIST
82192: LIST
82193: LIST
82194: LIST
82195: LIST
82196: LIST
82197: LIST
82198: PUSH
82199: EMPTY
82200: LIST
82201: LIST
82202: ST_TO_ADDR
82203: GO 83370
82205: LD_INT 14
82207: DOUBLE
82208: EQUAL
82209: IFTRUE 82213
82211: GO 82425
82213: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
82214: LD_ADDR_VAR 0 1
82218: PUSH
82219: LD_INT 1
82221: PUSH
82222: LD_INT 2
82224: PUSH
82225: LD_INT 3
82227: PUSH
82228: LD_INT 4
82230: PUSH
82231: LD_INT 5
82233: PUSH
82234: LD_INT 6
82236: PUSH
82237: LD_INT 7
82239: PUSH
82240: LD_INT 8
82242: PUSH
82243: LD_INT 9
82245: PUSH
82246: LD_INT 10
82248: PUSH
82249: LD_INT 11
82251: PUSH
82252: LD_INT 12
82254: PUSH
82255: LD_INT 13
82257: PUSH
82258: LD_INT 14
82260: PUSH
82261: LD_INT 15
82263: PUSH
82264: LD_INT 16
82266: PUSH
82267: LD_INT 17
82269: PUSH
82270: LD_INT 18
82272: PUSH
82273: LD_INT 19
82275: PUSH
82276: LD_INT 20
82278: PUSH
82279: LD_INT 21
82281: PUSH
82282: LD_INT 22
82284: PUSH
82285: LD_INT 23
82287: PUSH
82288: LD_INT 24
82290: PUSH
82291: LD_INT 25
82293: PUSH
82294: LD_INT 26
82296: PUSH
82297: LD_INT 27
82299: PUSH
82300: LD_INT 28
82302: PUSH
82303: LD_INT 29
82305: PUSH
82306: LD_INT 30
82308: PUSH
82309: LD_INT 31
82311: PUSH
82312: LD_INT 32
82314: PUSH
82315: LD_INT 33
82317: PUSH
82318: LD_INT 34
82320: PUSH
82321: LD_INT 36
82323: PUSH
82324: EMPTY
82325: LIST
82326: LIST
82327: LIST
82328: LIST
82329: LIST
82330: LIST
82331: LIST
82332: LIST
82333: LIST
82334: LIST
82335: LIST
82336: LIST
82337: LIST
82338: LIST
82339: LIST
82340: LIST
82341: LIST
82342: LIST
82343: LIST
82344: LIST
82345: LIST
82346: LIST
82347: LIST
82348: LIST
82349: LIST
82350: LIST
82351: LIST
82352: LIST
82353: LIST
82354: LIST
82355: LIST
82356: LIST
82357: LIST
82358: LIST
82359: LIST
82360: PUSH
82361: LD_INT 101
82363: PUSH
82364: LD_INT 102
82366: PUSH
82367: LD_INT 103
82369: PUSH
82370: LD_INT 104
82372: PUSH
82373: LD_INT 105
82375: PUSH
82376: LD_INT 106
82378: PUSH
82379: LD_INT 107
82381: PUSH
82382: LD_INT 108
82384: PUSH
82385: LD_INT 109
82387: PUSH
82388: LD_INT 110
82390: PUSH
82391: LD_INT 111
82393: PUSH
82394: LD_INT 112
82396: PUSH
82397: LD_INT 113
82399: PUSH
82400: LD_INT 114
82402: PUSH
82403: EMPTY
82404: LIST
82405: LIST
82406: LIST
82407: LIST
82408: LIST
82409: LIST
82410: LIST
82411: LIST
82412: LIST
82413: LIST
82414: LIST
82415: LIST
82416: LIST
82417: LIST
82418: PUSH
82419: EMPTY
82420: LIST
82421: LIST
82422: ST_TO_ADDR
82423: GO 83370
82425: LD_INT 15
82427: DOUBLE
82428: EQUAL
82429: IFTRUE 82433
82431: GO 82645
82433: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
82434: LD_ADDR_VAR 0 1
82438: PUSH
82439: LD_INT 1
82441: PUSH
82442: LD_INT 2
82444: PUSH
82445: LD_INT 3
82447: PUSH
82448: LD_INT 4
82450: PUSH
82451: LD_INT 5
82453: PUSH
82454: LD_INT 6
82456: PUSH
82457: LD_INT 7
82459: PUSH
82460: LD_INT 8
82462: PUSH
82463: LD_INT 9
82465: PUSH
82466: LD_INT 10
82468: PUSH
82469: LD_INT 11
82471: PUSH
82472: LD_INT 12
82474: PUSH
82475: LD_INT 13
82477: PUSH
82478: LD_INT 14
82480: PUSH
82481: LD_INT 15
82483: PUSH
82484: LD_INT 16
82486: PUSH
82487: LD_INT 17
82489: PUSH
82490: LD_INT 18
82492: PUSH
82493: LD_INT 19
82495: PUSH
82496: LD_INT 20
82498: PUSH
82499: LD_INT 21
82501: PUSH
82502: LD_INT 22
82504: PUSH
82505: LD_INT 23
82507: PUSH
82508: LD_INT 24
82510: PUSH
82511: LD_INT 25
82513: PUSH
82514: LD_INT 26
82516: PUSH
82517: LD_INT 27
82519: PUSH
82520: LD_INT 28
82522: PUSH
82523: LD_INT 29
82525: PUSH
82526: LD_INT 30
82528: PUSH
82529: LD_INT 31
82531: PUSH
82532: LD_INT 32
82534: PUSH
82535: LD_INT 33
82537: PUSH
82538: LD_INT 34
82540: PUSH
82541: LD_INT 36
82543: PUSH
82544: EMPTY
82545: LIST
82546: LIST
82547: LIST
82548: LIST
82549: LIST
82550: LIST
82551: LIST
82552: LIST
82553: LIST
82554: LIST
82555: LIST
82556: LIST
82557: LIST
82558: LIST
82559: LIST
82560: LIST
82561: LIST
82562: LIST
82563: LIST
82564: LIST
82565: LIST
82566: LIST
82567: LIST
82568: LIST
82569: LIST
82570: LIST
82571: LIST
82572: LIST
82573: LIST
82574: LIST
82575: LIST
82576: LIST
82577: LIST
82578: LIST
82579: LIST
82580: PUSH
82581: LD_INT 101
82583: PUSH
82584: LD_INT 102
82586: PUSH
82587: LD_INT 103
82589: PUSH
82590: LD_INT 104
82592: PUSH
82593: LD_INT 105
82595: PUSH
82596: LD_INT 106
82598: PUSH
82599: LD_INT 107
82601: PUSH
82602: LD_INT 108
82604: PUSH
82605: LD_INT 109
82607: PUSH
82608: LD_INT 110
82610: PUSH
82611: LD_INT 111
82613: PUSH
82614: LD_INT 112
82616: PUSH
82617: LD_INT 113
82619: PUSH
82620: LD_INT 114
82622: PUSH
82623: EMPTY
82624: LIST
82625: LIST
82626: LIST
82627: LIST
82628: LIST
82629: LIST
82630: LIST
82631: LIST
82632: LIST
82633: LIST
82634: LIST
82635: LIST
82636: LIST
82637: LIST
82638: PUSH
82639: EMPTY
82640: LIST
82641: LIST
82642: ST_TO_ADDR
82643: GO 83370
82645: LD_INT 16
82647: DOUBLE
82648: EQUAL
82649: IFTRUE 82653
82651: GO 82777
82653: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
82654: LD_ADDR_VAR 0 1
82658: PUSH
82659: LD_INT 2
82661: PUSH
82662: LD_INT 4
82664: PUSH
82665: LD_INT 5
82667: PUSH
82668: LD_INT 7
82670: PUSH
82671: LD_INT 11
82673: PUSH
82674: LD_INT 12
82676: PUSH
82677: LD_INT 15
82679: PUSH
82680: LD_INT 16
82682: PUSH
82683: LD_INT 20
82685: PUSH
82686: LD_INT 21
82688: PUSH
82689: LD_INT 22
82691: PUSH
82692: LD_INT 23
82694: PUSH
82695: LD_INT 25
82697: PUSH
82698: LD_INT 26
82700: PUSH
82701: LD_INT 30
82703: PUSH
82704: LD_INT 31
82706: PUSH
82707: LD_INT 32
82709: PUSH
82710: LD_INT 33
82712: PUSH
82713: LD_INT 34
82715: PUSH
82716: EMPTY
82717: LIST
82718: LIST
82719: LIST
82720: LIST
82721: LIST
82722: LIST
82723: LIST
82724: LIST
82725: LIST
82726: LIST
82727: LIST
82728: LIST
82729: LIST
82730: LIST
82731: LIST
82732: LIST
82733: LIST
82734: LIST
82735: LIST
82736: PUSH
82737: LD_INT 101
82739: PUSH
82740: LD_INT 102
82742: PUSH
82743: LD_INT 103
82745: PUSH
82746: LD_INT 106
82748: PUSH
82749: LD_INT 108
82751: PUSH
82752: LD_INT 112
82754: PUSH
82755: LD_INT 113
82757: PUSH
82758: LD_INT 114
82760: PUSH
82761: EMPTY
82762: LIST
82763: LIST
82764: LIST
82765: LIST
82766: LIST
82767: LIST
82768: LIST
82769: LIST
82770: PUSH
82771: EMPTY
82772: LIST
82773: LIST
82774: ST_TO_ADDR
82775: GO 83370
82777: LD_INT 17
82779: DOUBLE
82780: EQUAL
82781: IFTRUE 82785
82783: GO 82997
82785: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
82786: LD_ADDR_VAR 0 1
82790: PUSH
82791: LD_INT 1
82793: PUSH
82794: LD_INT 2
82796: PUSH
82797: LD_INT 3
82799: PUSH
82800: LD_INT 4
82802: PUSH
82803: LD_INT 5
82805: PUSH
82806: LD_INT 6
82808: PUSH
82809: LD_INT 7
82811: PUSH
82812: LD_INT 8
82814: PUSH
82815: LD_INT 9
82817: PUSH
82818: LD_INT 10
82820: PUSH
82821: LD_INT 11
82823: PUSH
82824: LD_INT 12
82826: PUSH
82827: LD_INT 13
82829: PUSH
82830: LD_INT 14
82832: PUSH
82833: LD_INT 15
82835: PUSH
82836: LD_INT 16
82838: PUSH
82839: LD_INT 17
82841: PUSH
82842: LD_INT 18
82844: PUSH
82845: LD_INT 19
82847: PUSH
82848: LD_INT 20
82850: PUSH
82851: LD_INT 21
82853: PUSH
82854: LD_INT 22
82856: PUSH
82857: LD_INT 23
82859: PUSH
82860: LD_INT 24
82862: PUSH
82863: LD_INT 25
82865: PUSH
82866: LD_INT 26
82868: PUSH
82869: LD_INT 27
82871: PUSH
82872: LD_INT 28
82874: PUSH
82875: LD_INT 29
82877: PUSH
82878: LD_INT 30
82880: PUSH
82881: LD_INT 31
82883: PUSH
82884: LD_INT 32
82886: PUSH
82887: LD_INT 33
82889: PUSH
82890: LD_INT 34
82892: PUSH
82893: LD_INT 36
82895: PUSH
82896: EMPTY
82897: LIST
82898: LIST
82899: LIST
82900: LIST
82901: LIST
82902: LIST
82903: LIST
82904: LIST
82905: LIST
82906: LIST
82907: LIST
82908: LIST
82909: LIST
82910: LIST
82911: LIST
82912: LIST
82913: LIST
82914: LIST
82915: LIST
82916: LIST
82917: LIST
82918: LIST
82919: LIST
82920: LIST
82921: LIST
82922: LIST
82923: LIST
82924: LIST
82925: LIST
82926: LIST
82927: LIST
82928: LIST
82929: LIST
82930: LIST
82931: LIST
82932: PUSH
82933: LD_INT 101
82935: PUSH
82936: LD_INT 102
82938: PUSH
82939: LD_INT 103
82941: PUSH
82942: LD_INT 104
82944: PUSH
82945: LD_INT 105
82947: PUSH
82948: LD_INT 106
82950: PUSH
82951: LD_INT 107
82953: PUSH
82954: LD_INT 108
82956: PUSH
82957: LD_INT 109
82959: PUSH
82960: LD_INT 110
82962: PUSH
82963: LD_INT 111
82965: PUSH
82966: LD_INT 112
82968: PUSH
82969: LD_INT 113
82971: PUSH
82972: LD_INT 114
82974: PUSH
82975: EMPTY
82976: LIST
82977: LIST
82978: LIST
82979: LIST
82980: LIST
82981: LIST
82982: LIST
82983: LIST
82984: LIST
82985: LIST
82986: LIST
82987: LIST
82988: LIST
82989: LIST
82990: PUSH
82991: EMPTY
82992: LIST
82993: LIST
82994: ST_TO_ADDR
82995: GO 83370
82997: LD_INT 18
82999: DOUBLE
83000: EQUAL
83001: IFTRUE 83005
83003: GO 83141
83005: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
83006: LD_ADDR_VAR 0 1
83010: PUSH
83011: LD_INT 2
83013: PUSH
83014: LD_INT 4
83016: PUSH
83017: LD_INT 5
83019: PUSH
83020: LD_INT 7
83022: PUSH
83023: LD_INT 11
83025: PUSH
83026: LD_INT 12
83028: PUSH
83029: LD_INT 15
83031: PUSH
83032: LD_INT 16
83034: PUSH
83035: LD_INT 20
83037: PUSH
83038: LD_INT 21
83040: PUSH
83041: LD_INT 22
83043: PUSH
83044: LD_INT 23
83046: PUSH
83047: LD_INT 25
83049: PUSH
83050: LD_INT 26
83052: PUSH
83053: LD_INT 30
83055: PUSH
83056: LD_INT 31
83058: PUSH
83059: LD_INT 32
83061: PUSH
83062: LD_INT 33
83064: PUSH
83065: LD_INT 34
83067: PUSH
83068: LD_INT 35
83070: PUSH
83071: LD_INT 36
83073: PUSH
83074: EMPTY
83075: LIST
83076: LIST
83077: LIST
83078: LIST
83079: LIST
83080: LIST
83081: LIST
83082: LIST
83083: LIST
83084: LIST
83085: LIST
83086: LIST
83087: LIST
83088: LIST
83089: LIST
83090: LIST
83091: LIST
83092: LIST
83093: LIST
83094: LIST
83095: LIST
83096: PUSH
83097: LD_INT 101
83099: PUSH
83100: LD_INT 102
83102: PUSH
83103: LD_INT 103
83105: PUSH
83106: LD_INT 106
83108: PUSH
83109: LD_INT 108
83111: PUSH
83112: LD_INT 112
83114: PUSH
83115: LD_INT 113
83117: PUSH
83118: LD_INT 114
83120: PUSH
83121: LD_INT 115
83123: PUSH
83124: EMPTY
83125: LIST
83126: LIST
83127: LIST
83128: LIST
83129: LIST
83130: LIST
83131: LIST
83132: LIST
83133: LIST
83134: PUSH
83135: EMPTY
83136: LIST
83137: LIST
83138: ST_TO_ADDR
83139: GO 83370
83141: LD_INT 19
83143: DOUBLE
83144: EQUAL
83145: IFTRUE 83149
83147: GO 83369
83149: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
83150: LD_ADDR_VAR 0 1
83154: PUSH
83155: LD_INT 1
83157: PUSH
83158: LD_INT 2
83160: PUSH
83161: LD_INT 3
83163: PUSH
83164: LD_INT 4
83166: PUSH
83167: LD_INT 5
83169: PUSH
83170: LD_INT 6
83172: PUSH
83173: LD_INT 7
83175: PUSH
83176: LD_INT 8
83178: PUSH
83179: LD_INT 9
83181: PUSH
83182: LD_INT 10
83184: PUSH
83185: LD_INT 11
83187: PUSH
83188: LD_INT 12
83190: PUSH
83191: LD_INT 13
83193: PUSH
83194: LD_INT 14
83196: PUSH
83197: LD_INT 15
83199: PUSH
83200: LD_INT 16
83202: PUSH
83203: LD_INT 17
83205: PUSH
83206: LD_INT 18
83208: PUSH
83209: LD_INT 19
83211: PUSH
83212: LD_INT 20
83214: PUSH
83215: LD_INT 21
83217: PUSH
83218: LD_INT 22
83220: PUSH
83221: LD_INT 23
83223: PUSH
83224: LD_INT 24
83226: PUSH
83227: LD_INT 25
83229: PUSH
83230: LD_INT 26
83232: PUSH
83233: LD_INT 27
83235: PUSH
83236: LD_INT 28
83238: PUSH
83239: LD_INT 29
83241: PUSH
83242: LD_INT 30
83244: PUSH
83245: LD_INT 31
83247: PUSH
83248: LD_INT 32
83250: PUSH
83251: LD_INT 33
83253: PUSH
83254: LD_INT 34
83256: PUSH
83257: LD_INT 35
83259: PUSH
83260: LD_INT 36
83262: PUSH
83263: EMPTY
83264: LIST
83265: LIST
83266: LIST
83267: LIST
83268: LIST
83269: LIST
83270: LIST
83271: LIST
83272: LIST
83273: LIST
83274: LIST
83275: LIST
83276: LIST
83277: LIST
83278: LIST
83279: LIST
83280: LIST
83281: LIST
83282: LIST
83283: LIST
83284: LIST
83285: LIST
83286: LIST
83287: LIST
83288: LIST
83289: LIST
83290: LIST
83291: LIST
83292: LIST
83293: LIST
83294: LIST
83295: LIST
83296: LIST
83297: LIST
83298: LIST
83299: LIST
83300: PUSH
83301: LD_INT 101
83303: PUSH
83304: LD_INT 102
83306: PUSH
83307: LD_INT 103
83309: PUSH
83310: LD_INT 104
83312: PUSH
83313: LD_INT 105
83315: PUSH
83316: LD_INT 106
83318: PUSH
83319: LD_INT 107
83321: PUSH
83322: LD_INT 108
83324: PUSH
83325: LD_INT 109
83327: PUSH
83328: LD_INT 110
83330: PUSH
83331: LD_INT 111
83333: PUSH
83334: LD_INT 112
83336: PUSH
83337: LD_INT 113
83339: PUSH
83340: LD_INT 114
83342: PUSH
83343: LD_INT 115
83345: PUSH
83346: EMPTY
83347: LIST
83348: LIST
83349: LIST
83350: LIST
83351: LIST
83352: LIST
83353: LIST
83354: LIST
83355: LIST
83356: LIST
83357: LIST
83358: LIST
83359: LIST
83360: LIST
83361: LIST
83362: PUSH
83363: EMPTY
83364: LIST
83365: LIST
83366: ST_TO_ADDR
83367: GO 83370
83369: POP
// end else
83370: GO 83589
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
83372: LD_ADDR_VAR 0 1
83376: PUSH
83377: LD_INT 1
83379: PUSH
83380: LD_INT 2
83382: PUSH
83383: LD_INT 3
83385: PUSH
83386: LD_INT 4
83388: PUSH
83389: LD_INT 5
83391: PUSH
83392: LD_INT 6
83394: PUSH
83395: LD_INT 7
83397: PUSH
83398: LD_INT 8
83400: PUSH
83401: LD_INT 9
83403: PUSH
83404: LD_INT 10
83406: PUSH
83407: LD_INT 11
83409: PUSH
83410: LD_INT 12
83412: PUSH
83413: LD_INT 13
83415: PUSH
83416: LD_INT 14
83418: PUSH
83419: LD_INT 15
83421: PUSH
83422: LD_INT 16
83424: PUSH
83425: LD_INT 17
83427: PUSH
83428: LD_INT 18
83430: PUSH
83431: LD_INT 19
83433: PUSH
83434: LD_INT 20
83436: PUSH
83437: LD_INT 21
83439: PUSH
83440: LD_INT 22
83442: PUSH
83443: LD_INT 23
83445: PUSH
83446: LD_INT 24
83448: PUSH
83449: LD_INT 25
83451: PUSH
83452: LD_INT 26
83454: PUSH
83455: LD_INT 27
83457: PUSH
83458: LD_INT 28
83460: PUSH
83461: LD_INT 29
83463: PUSH
83464: LD_INT 30
83466: PUSH
83467: LD_INT 31
83469: PUSH
83470: LD_INT 32
83472: PUSH
83473: LD_INT 33
83475: PUSH
83476: LD_INT 34
83478: PUSH
83479: LD_INT 35
83481: PUSH
83482: LD_INT 36
83484: PUSH
83485: EMPTY
83486: LIST
83487: LIST
83488: LIST
83489: LIST
83490: LIST
83491: LIST
83492: LIST
83493: LIST
83494: LIST
83495: LIST
83496: LIST
83497: LIST
83498: LIST
83499: LIST
83500: LIST
83501: LIST
83502: LIST
83503: LIST
83504: LIST
83505: LIST
83506: LIST
83507: LIST
83508: LIST
83509: LIST
83510: LIST
83511: LIST
83512: LIST
83513: LIST
83514: LIST
83515: LIST
83516: LIST
83517: LIST
83518: LIST
83519: LIST
83520: LIST
83521: LIST
83522: PUSH
83523: LD_INT 101
83525: PUSH
83526: LD_INT 102
83528: PUSH
83529: LD_INT 103
83531: PUSH
83532: LD_INT 104
83534: PUSH
83535: LD_INT 105
83537: PUSH
83538: LD_INT 106
83540: PUSH
83541: LD_INT 107
83543: PUSH
83544: LD_INT 108
83546: PUSH
83547: LD_INT 109
83549: PUSH
83550: LD_INT 110
83552: PUSH
83553: LD_INT 111
83555: PUSH
83556: LD_INT 112
83558: PUSH
83559: LD_INT 113
83561: PUSH
83562: LD_INT 114
83564: PUSH
83565: LD_INT 115
83567: PUSH
83568: EMPTY
83569: LIST
83570: LIST
83571: LIST
83572: LIST
83573: LIST
83574: LIST
83575: LIST
83576: LIST
83577: LIST
83578: LIST
83579: LIST
83580: LIST
83581: LIST
83582: LIST
83583: LIST
83584: PUSH
83585: EMPTY
83586: LIST
83587: LIST
83588: ST_TO_ADDR
// if result then
83589: LD_VAR 0 1
83593: IFFALSE 83882
// begin normal :=  ;
83595: LD_ADDR_VAR 0 3
83599: PUSH
83600: LD_STRING 
83602: ST_TO_ADDR
// hardcore :=  ;
83603: LD_ADDR_VAR 0 4
83607: PUSH
83608: LD_STRING 
83610: ST_TO_ADDR
// for i = 1 to normalCounter do
83611: LD_ADDR_VAR 0 5
83615: PUSH
83616: DOUBLE
83617: LD_INT 1
83619: DEC
83620: ST_TO_ADDR
83621: LD_EXP 107
83625: PUSH
83626: FOR_TO
83627: IFFALSE 83728
// begin tmp := 0 ;
83629: LD_ADDR_VAR 0 2
83633: PUSH
83634: LD_STRING 0
83636: ST_TO_ADDR
// if result [ 1 ] then
83637: LD_VAR 0 1
83641: PUSH
83642: LD_INT 1
83644: ARRAY
83645: IFFALSE 83710
// if result [ 1 ] [ 1 ] = i then
83647: LD_VAR 0 1
83651: PUSH
83652: LD_INT 1
83654: ARRAY
83655: PUSH
83656: LD_INT 1
83658: ARRAY
83659: PUSH
83660: LD_VAR 0 5
83664: EQUAL
83665: IFFALSE 83710
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
83667: LD_ADDR_VAR 0 1
83671: PUSH
83672: LD_VAR 0 1
83676: PPUSH
83677: LD_INT 1
83679: PPUSH
83680: LD_VAR 0 1
83684: PUSH
83685: LD_INT 1
83687: ARRAY
83688: PPUSH
83689: LD_INT 1
83691: PPUSH
83692: CALL_OW 3
83696: PPUSH
83697: CALL_OW 1
83701: ST_TO_ADDR
// tmp := 1 ;
83702: LD_ADDR_VAR 0 2
83706: PUSH
83707: LD_STRING 1
83709: ST_TO_ADDR
// end ; normal := normal & tmp ;
83710: LD_ADDR_VAR 0 3
83714: PUSH
83715: LD_VAR 0 3
83719: PUSH
83720: LD_VAR 0 2
83724: STR
83725: ST_TO_ADDR
// end ;
83726: GO 83626
83728: POP
83729: POP
// for i = 1 to hardcoreCounter do
83730: LD_ADDR_VAR 0 5
83734: PUSH
83735: DOUBLE
83736: LD_INT 1
83738: DEC
83739: ST_TO_ADDR
83740: LD_EXP 108
83744: PUSH
83745: FOR_TO
83746: IFFALSE 83851
// begin tmp := 0 ;
83748: LD_ADDR_VAR 0 2
83752: PUSH
83753: LD_STRING 0
83755: ST_TO_ADDR
// if result [ 2 ] then
83756: LD_VAR 0 1
83760: PUSH
83761: LD_INT 2
83763: ARRAY
83764: IFFALSE 83833
// if result [ 2 ] [ 1 ] = 100 + i then
83766: LD_VAR 0 1
83770: PUSH
83771: LD_INT 2
83773: ARRAY
83774: PUSH
83775: LD_INT 1
83777: ARRAY
83778: PUSH
83779: LD_INT 100
83781: PUSH
83782: LD_VAR 0 5
83786: PLUS
83787: EQUAL
83788: IFFALSE 83833
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
83790: LD_ADDR_VAR 0 1
83794: PUSH
83795: LD_VAR 0 1
83799: PPUSH
83800: LD_INT 2
83802: PPUSH
83803: LD_VAR 0 1
83807: PUSH
83808: LD_INT 2
83810: ARRAY
83811: PPUSH
83812: LD_INT 1
83814: PPUSH
83815: CALL_OW 3
83819: PPUSH
83820: CALL_OW 1
83824: ST_TO_ADDR
// tmp := 1 ;
83825: LD_ADDR_VAR 0 2
83829: PUSH
83830: LD_STRING 1
83832: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
83833: LD_ADDR_VAR 0 4
83837: PUSH
83838: LD_VAR 0 4
83842: PUSH
83843: LD_VAR 0 2
83847: STR
83848: ST_TO_ADDR
// end ;
83849: GO 83745
83851: POP
83852: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
83853: LD_STRING getStreamItemsFromMission("
83855: PUSH
83856: LD_VAR 0 3
83860: STR
83861: PUSH
83862: LD_STRING ","
83864: STR
83865: PUSH
83866: LD_VAR 0 4
83870: STR
83871: PUSH
83872: LD_STRING ")
83874: STR
83875: PPUSH
83876: CALL_OW 559
// end else
83880: GO 83889
// ToLua ( getStreamItemsFromMission("","") ) ;
83882: LD_STRING getStreamItemsFromMission("","")
83884: PPUSH
83885: CALL_OW 559
// end ;
83889: LD_VAR 0 1
83893: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
83894: LD_VAR 0 2
83898: PUSH
83899: LD_INT 100
83901: EQUAL
83902: IFFALSE 84851
// begin if not StreamModeActive then
83904: LD_EXP 106
83908: NOT
83909: IFFALSE 83919
// StreamModeActive := true ;
83911: LD_ADDR_EXP 106
83915: PUSH
83916: LD_INT 1
83918: ST_TO_ADDR
// if p3 = 0 then
83919: LD_VAR 0 3
83923: PUSH
83924: LD_INT 0
83926: EQUAL
83927: IFFALSE 83933
// InitStreamMode ;
83929: CALL 79972 0 0
// if p3 = 1 then
83933: LD_VAR 0 3
83937: PUSH
83938: LD_INT 1
83940: EQUAL
83941: IFFALSE 83951
// sRocket := true ;
83943: LD_ADDR_EXP 111
83947: PUSH
83948: LD_INT 1
83950: ST_TO_ADDR
// if p3 = 2 then
83951: LD_VAR 0 3
83955: PUSH
83956: LD_INT 2
83958: EQUAL
83959: IFFALSE 83969
// sSpeed := true ;
83961: LD_ADDR_EXP 110
83965: PUSH
83966: LD_INT 1
83968: ST_TO_ADDR
// if p3 = 3 then
83969: LD_VAR 0 3
83973: PUSH
83974: LD_INT 3
83976: EQUAL
83977: IFFALSE 83987
// sEngine := true ;
83979: LD_ADDR_EXP 112
83983: PUSH
83984: LD_INT 1
83986: ST_TO_ADDR
// if p3 = 4 then
83987: LD_VAR 0 3
83991: PUSH
83992: LD_INT 4
83994: EQUAL
83995: IFFALSE 84005
// sSpec := true ;
83997: LD_ADDR_EXP 109
84001: PUSH
84002: LD_INT 1
84004: ST_TO_ADDR
// if p3 = 5 then
84005: LD_VAR 0 3
84009: PUSH
84010: LD_INT 5
84012: EQUAL
84013: IFFALSE 84023
// sLevel := true ;
84015: LD_ADDR_EXP 113
84019: PUSH
84020: LD_INT 1
84022: ST_TO_ADDR
// if p3 = 6 then
84023: LD_VAR 0 3
84027: PUSH
84028: LD_INT 6
84030: EQUAL
84031: IFFALSE 84041
// sArmoury := true ;
84033: LD_ADDR_EXP 114
84037: PUSH
84038: LD_INT 1
84040: ST_TO_ADDR
// if p3 = 7 then
84041: LD_VAR 0 3
84045: PUSH
84046: LD_INT 7
84048: EQUAL
84049: IFFALSE 84059
// sRadar := true ;
84051: LD_ADDR_EXP 115
84055: PUSH
84056: LD_INT 1
84058: ST_TO_ADDR
// if p3 = 8 then
84059: LD_VAR 0 3
84063: PUSH
84064: LD_INT 8
84066: EQUAL
84067: IFFALSE 84077
// sBunker := true ;
84069: LD_ADDR_EXP 116
84073: PUSH
84074: LD_INT 1
84076: ST_TO_ADDR
// if p3 = 9 then
84077: LD_VAR 0 3
84081: PUSH
84082: LD_INT 9
84084: EQUAL
84085: IFFALSE 84095
// sHack := true ;
84087: LD_ADDR_EXP 117
84091: PUSH
84092: LD_INT 1
84094: ST_TO_ADDR
// if p3 = 10 then
84095: LD_VAR 0 3
84099: PUSH
84100: LD_INT 10
84102: EQUAL
84103: IFFALSE 84113
// sFire := true ;
84105: LD_ADDR_EXP 118
84109: PUSH
84110: LD_INT 1
84112: ST_TO_ADDR
// if p3 = 11 then
84113: LD_VAR 0 3
84117: PUSH
84118: LD_INT 11
84120: EQUAL
84121: IFFALSE 84131
// sRefresh := true ;
84123: LD_ADDR_EXP 119
84127: PUSH
84128: LD_INT 1
84130: ST_TO_ADDR
// if p3 = 12 then
84131: LD_VAR 0 3
84135: PUSH
84136: LD_INT 12
84138: EQUAL
84139: IFFALSE 84149
// sExp := true ;
84141: LD_ADDR_EXP 120
84145: PUSH
84146: LD_INT 1
84148: ST_TO_ADDR
// if p3 = 13 then
84149: LD_VAR 0 3
84153: PUSH
84154: LD_INT 13
84156: EQUAL
84157: IFFALSE 84167
// sDepot := true ;
84159: LD_ADDR_EXP 121
84163: PUSH
84164: LD_INT 1
84166: ST_TO_ADDR
// if p3 = 14 then
84167: LD_VAR 0 3
84171: PUSH
84172: LD_INT 14
84174: EQUAL
84175: IFFALSE 84185
// sFlag := true ;
84177: LD_ADDR_EXP 122
84181: PUSH
84182: LD_INT 1
84184: ST_TO_ADDR
// if p3 = 15 then
84185: LD_VAR 0 3
84189: PUSH
84190: LD_INT 15
84192: EQUAL
84193: IFFALSE 84203
// sKamikadze := true ;
84195: LD_ADDR_EXP 130
84199: PUSH
84200: LD_INT 1
84202: ST_TO_ADDR
// if p3 = 16 then
84203: LD_VAR 0 3
84207: PUSH
84208: LD_INT 16
84210: EQUAL
84211: IFFALSE 84221
// sTroll := true ;
84213: LD_ADDR_EXP 131
84217: PUSH
84218: LD_INT 1
84220: ST_TO_ADDR
// if p3 = 17 then
84221: LD_VAR 0 3
84225: PUSH
84226: LD_INT 17
84228: EQUAL
84229: IFFALSE 84239
// sSlow := true ;
84231: LD_ADDR_EXP 132
84235: PUSH
84236: LD_INT 1
84238: ST_TO_ADDR
// if p3 = 18 then
84239: LD_VAR 0 3
84243: PUSH
84244: LD_INT 18
84246: EQUAL
84247: IFFALSE 84257
// sLack := true ;
84249: LD_ADDR_EXP 133
84253: PUSH
84254: LD_INT 1
84256: ST_TO_ADDR
// if p3 = 19 then
84257: LD_VAR 0 3
84261: PUSH
84262: LD_INT 19
84264: EQUAL
84265: IFFALSE 84275
// sTank := true ;
84267: LD_ADDR_EXP 135
84271: PUSH
84272: LD_INT 1
84274: ST_TO_ADDR
// if p3 = 20 then
84275: LD_VAR 0 3
84279: PUSH
84280: LD_INT 20
84282: EQUAL
84283: IFFALSE 84293
// sRemote := true ;
84285: LD_ADDR_EXP 136
84289: PUSH
84290: LD_INT 1
84292: ST_TO_ADDR
// if p3 = 21 then
84293: LD_VAR 0 3
84297: PUSH
84298: LD_INT 21
84300: EQUAL
84301: IFFALSE 84311
// sPowell := true ;
84303: LD_ADDR_EXP 137
84307: PUSH
84308: LD_INT 1
84310: ST_TO_ADDR
// if p3 = 22 then
84311: LD_VAR 0 3
84315: PUSH
84316: LD_INT 22
84318: EQUAL
84319: IFFALSE 84329
// sTeleport := true ;
84321: LD_ADDR_EXP 140
84325: PUSH
84326: LD_INT 1
84328: ST_TO_ADDR
// if p3 = 23 then
84329: LD_VAR 0 3
84333: PUSH
84334: LD_INT 23
84336: EQUAL
84337: IFFALSE 84347
// sOilTower := true ;
84339: LD_ADDR_EXP 142
84343: PUSH
84344: LD_INT 1
84346: ST_TO_ADDR
// if p3 = 24 then
84347: LD_VAR 0 3
84351: PUSH
84352: LD_INT 24
84354: EQUAL
84355: IFFALSE 84365
// sShovel := true ;
84357: LD_ADDR_EXP 143
84361: PUSH
84362: LD_INT 1
84364: ST_TO_ADDR
// if p3 = 25 then
84365: LD_VAR 0 3
84369: PUSH
84370: LD_INT 25
84372: EQUAL
84373: IFFALSE 84383
// sSheik := true ;
84375: LD_ADDR_EXP 144
84379: PUSH
84380: LD_INT 1
84382: ST_TO_ADDR
// if p3 = 26 then
84383: LD_VAR 0 3
84387: PUSH
84388: LD_INT 26
84390: EQUAL
84391: IFFALSE 84401
// sEarthquake := true ;
84393: LD_ADDR_EXP 146
84397: PUSH
84398: LD_INT 1
84400: ST_TO_ADDR
// if p3 = 27 then
84401: LD_VAR 0 3
84405: PUSH
84406: LD_INT 27
84408: EQUAL
84409: IFFALSE 84419
// sAI := true ;
84411: LD_ADDR_EXP 147
84415: PUSH
84416: LD_INT 1
84418: ST_TO_ADDR
// if p3 = 28 then
84419: LD_VAR 0 3
84423: PUSH
84424: LD_INT 28
84426: EQUAL
84427: IFFALSE 84437
// sCargo := true ;
84429: LD_ADDR_EXP 150
84433: PUSH
84434: LD_INT 1
84436: ST_TO_ADDR
// if p3 = 29 then
84437: LD_VAR 0 3
84441: PUSH
84442: LD_INT 29
84444: EQUAL
84445: IFFALSE 84455
// sDLaser := true ;
84447: LD_ADDR_EXP 151
84451: PUSH
84452: LD_INT 1
84454: ST_TO_ADDR
// if p3 = 30 then
84455: LD_VAR 0 3
84459: PUSH
84460: LD_INT 30
84462: EQUAL
84463: IFFALSE 84473
// sExchange := true ;
84465: LD_ADDR_EXP 152
84469: PUSH
84470: LD_INT 1
84472: ST_TO_ADDR
// if p3 = 31 then
84473: LD_VAR 0 3
84477: PUSH
84478: LD_INT 31
84480: EQUAL
84481: IFFALSE 84491
// sFac := true ;
84483: LD_ADDR_EXP 153
84487: PUSH
84488: LD_INT 1
84490: ST_TO_ADDR
// if p3 = 32 then
84491: LD_VAR 0 3
84495: PUSH
84496: LD_INT 32
84498: EQUAL
84499: IFFALSE 84509
// sPower := true ;
84501: LD_ADDR_EXP 154
84505: PUSH
84506: LD_INT 1
84508: ST_TO_ADDR
// if p3 = 33 then
84509: LD_VAR 0 3
84513: PUSH
84514: LD_INT 33
84516: EQUAL
84517: IFFALSE 84527
// sRandom := true ;
84519: LD_ADDR_EXP 155
84523: PUSH
84524: LD_INT 1
84526: ST_TO_ADDR
// if p3 = 34 then
84527: LD_VAR 0 3
84531: PUSH
84532: LD_INT 34
84534: EQUAL
84535: IFFALSE 84545
// sShield := true ;
84537: LD_ADDR_EXP 156
84541: PUSH
84542: LD_INT 1
84544: ST_TO_ADDR
// if p3 = 35 then
84545: LD_VAR 0 3
84549: PUSH
84550: LD_INT 35
84552: EQUAL
84553: IFFALSE 84563
// sTime := true ;
84555: LD_ADDR_EXP 157
84559: PUSH
84560: LD_INT 1
84562: ST_TO_ADDR
// if p3 = 36 then
84563: LD_VAR 0 3
84567: PUSH
84568: LD_INT 36
84570: EQUAL
84571: IFFALSE 84581
// sTools := true ;
84573: LD_ADDR_EXP 158
84577: PUSH
84578: LD_INT 1
84580: ST_TO_ADDR
// if p3 = 101 then
84581: LD_VAR 0 3
84585: PUSH
84586: LD_INT 101
84588: EQUAL
84589: IFFALSE 84599
// sSold := true ;
84591: LD_ADDR_EXP 123
84595: PUSH
84596: LD_INT 1
84598: ST_TO_ADDR
// if p3 = 102 then
84599: LD_VAR 0 3
84603: PUSH
84604: LD_INT 102
84606: EQUAL
84607: IFFALSE 84617
// sDiff := true ;
84609: LD_ADDR_EXP 124
84613: PUSH
84614: LD_INT 1
84616: ST_TO_ADDR
// if p3 = 103 then
84617: LD_VAR 0 3
84621: PUSH
84622: LD_INT 103
84624: EQUAL
84625: IFFALSE 84635
// sFog := true ;
84627: LD_ADDR_EXP 127
84631: PUSH
84632: LD_INT 1
84634: ST_TO_ADDR
// if p3 = 104 then
84635: LD_VAR 0 3
84639: PUSH
84640: LD_INT 104
84642: EQUAL
84643: IFFALSE 84653
// sReset := true ;
84645: LD_ADDR_EXP 128
84649: PUSH
84650: LD_INT 1
84652: ST_TO_ADDR
// if p3 = 105 then
84653: LD_VAR 0 3
84657: PUSH
84658: LD_INT 105
84660: EQUAL
84661: IFFALSE 84671
// sSun := true ;
84663: LD_ADDR_EXP 129
84667: PUSH
84668: LD_INT 1
84670: ST_TO_ADDR
// if p3 = 106 then
84671: LD_VAR 0 3
84675: PUSH
84676: LD_INT 106
84678: EQUAL
84679: IFFALSE 84689
// sTiger := true ;
84681: LD_ADDR_EXP 125
84685: PUSH
84686: LD_INT 1
84688: ST_TO_ADDR
// if p3 = 107 then
84689: LD_VAR 0 3
84693: PUSH
84694: LD_INT 107
84696: EQUAL
84697: IFFALSE 84707
// sBomb := true ;
84699: LD_ADDR_EXP 126
84703: PUSH
84704: LD_INT 1
84706: ST_TO_ADDR
// if p3 = 108 then
84707: LD_VAR 0 3
84711: PUSH
84712: LD_INT 108
84714: EQUAL
84715: IFFALSE 84725
// sWound := true ;
84717: LD_ADDR_EXP 134
84721: PUSH
84722: LD_INT 1
84724: ST_TO_ADDR
// if p3 = 109 then
84725: LD_VAR 0 3
84729: PUSH
84730: LD_INT 109
84732: EQUAL
84733: IFFALSE 84743
// sBetray := true ;
84735: LD_ADDR_EXP 138
84739: PUSH
84740: LD_INT 1
84742: ST_TO_ADDR
// if p3 = 110 then
84743: LD_VAR 0 3
84747: PUSH
84748: LD_INT 110
84750: EQUAL
84751: IFFALSE 84761
// sContamin := true ;
84753: LD_ADDR_EXP 139
84757: PUSH
84758: LD_INT 1
84760: ST_TO_ADDR
// if p3 = 111 then
84761: LD_VAR 0 3
84765: PUSH
84766: LD_INT 111
84768: EQUAL
84769: IFFALSE 84779
// sOil := true ;
84771: LD_ADDR_EXP 141
84775: PUSH
84776: LD_INT 1
84778: ST_TO_ADDR
// if p3 = 112 then
84779: LD_VAR 0 3
84783: PUSH
84784: LD_INT 112
84786: EQUAL
84787: IFFALSE 84797
// sStu := true ;
84789: LD_ADDR_EXP 145
84793: PUSH
84794: LD_INT 1
84796: ST_TO_ADDR
// if p3 = 113 then
84797: LD_VAR 0 3
84801: PUSH
84802: LD_INT 113
84804: EQUAL
84805: IFFALSE 84815
// sBazooka := true ;
84807: LD_ADDR_EXP 148
84811: PUSH
84812: LD_INT 1
84814: ST_TO_ADDR
// if p3 = 114 then
84815: LD_VAR 0 3
84819: PUSH
84820: LD_INT 114
84822: EQUAL
84823: IFFALSE 84833
// sMortar := true ;
84825: LD_ADDR_EXP 149
84829: PUSH
84830: LD_INT 1
84832: ST_TO_ADDR
// if p3 = 115 then
84833: LD_VAR 0 3
84837: PUSH
84838: LD_INT 115
84840: EQUAL
84841: IFFALSE 84851
// sRanger := true ;
84843: LD_ADDR_EXP 159
84847: PUSH
84848: LD_INT 1
84850: ST_TO_ADDR
// end ; end ;
84851: PPOPN 6
84853: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
84854: LD_EXP 106
84858: PUSH
84859: LD_EXP 111
84863: AND
84864: IFFALSE 84988
84866: GO 84868
84868: DISABLE
84869: LD_INT 0
84871: PPUSH
84872: PPUSH
// begin enable ;
84873: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
84874: LD_ADDR_VAR 0 2
84878: PUSH
84879: LD_INT 22
84881: PUSH
84882: LD_OWVAR 2
84886: PUSH
84887: EMPTY
84888: LIST
84889: LIST
84890: PUSH
84891: LD_INT 2
84893: PUSH
84894: LD_INT 34
84896: PUSH
84897: LD_INT 7
84899: PUSH
84900: EMPTY
84901: LIST
84902: LIST
84903: PUSH
84904: LD_INT 34
84906: PUSH
84907: LD_INT 45
84909: PUSH
84910: EMPTY
84911: LIST
84912: LIST
84913: PUSH
84914: LD_INT 34
84916: PUSH
84917: LD_INT 28
84919: PUSH
84920: EMPTY
84921: LIST
84922: LIST
84923: PUSH
84924: LD_INT 34
84926: PUSH
84927: LD_INT 47
84929: PUSH
84930: EMPTY
84931: LIST
84932: LIST
84933: PUSH
84934: EMPTY
84935: LIST
84936: LIST
84937: LIST
84938: LIST
84939: LIST
84940: PUSH
84941: EMPTY
84942: LIST
84943: LIST
84944: PPUSH
84945: CALL_OW 69
84949: ST_TO_ADDR
// if not tmp then
84950: LD_VAR 0 2
84954: NOT
84955: IFFALSE 84959
// exit ;
84957: GO 84988
// for i in tmp do
84959: LD_ADDR_VAR 0 1
84963: PUSH
84964: LD_VAR 0 2
84968: PUSH
84969: FOR_IN
84970: IFFALSE 84986
// begin SetLives ( i , 0 ) ;
84972: LD_VAR 0 1
84976: PPUSH
84977: LD_INT 0
84979: PPUSH
84980: CALL_OW 234
// end ;
84984: GO 84969
84986: POP
84987: POP
// end ;
84988: PPOPN 2
84990: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
84991: LD_EXP 106
84995: PUSH
84996: LD_EXP 112
85000: AND
85001: IFFALSE 85085
85003: GO 85005
85005: DISABLE
85006: LD_INT 0
85008: PPUSH
85009: PPUSH
// begin enable ;
85010: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
85011: LD_ADDR_VAR 0 2
85015: PUSH
85016: LD_INT 22
85018: PUSH
85019: LD_OWVAR 2
85023: PUSH
85024: EMPTY
85025: LIST
85026: LIST
85027: PUSH
85028: LD_INT 32
85030: PUSH
85031: LD_INT 3
85033: PUSH
85034: EMPTY
85035: LIST
85036: LIST
85037: PUSH
85038: EMPTY
85039: LIST
85040: LIST
85041: PPUSH
85042: CALL_OW 69
85046: ST_TO_ADDR
// if not tmp then
85047: LD_VAR 0 2
85051: NOT
85052: IFFALSE 85056
// exit ;
85054: GO 85085
// for i in tmp do
85056: LD_ADDR_VAR 0 1
85060: PUSH
85061: LD_VAR 0 2
85065: PUSH
85066: FOR_IN
85067: IFFALSE 85083
// begin SetLives ( i , 0 ) ;
85069: LD_VAR 0 1
85073: PPUSH
85074: LD_INT 0
85076: PPUSH
85077: CALL_OW 234
// end ;
85081: GO 85066
85083: POP
85084: POP
// end ;
85085: PPOPN 2
85087: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
85088: LD_EXP 106
85092: PUSH
85093: LD_EXP 109
85097: AND
85098: IFFALSE 85191
85100: GO 85102
85102: DISABLE
85103: LD_INT 0
85105: PPUSH
// begin enable ;
85106: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
85107: LD_ADDR_VAR 0 1
85111: PUSH
85112: LD_INT 22
85114: PUSH
85115: LD_OWVAR 2
85119: PUSH
85120: EMPTY
85121: LIST
85122: LIST
85123: PUSH
85124: LD_INT 2
85126: PUSH
85127: LD_INT 25
85129: PUSH
85130: LD_INT 5
85132: PUSH
85133: EMPTY
85134: LIST
85135: LIST
85136: PUSH
85137: LD_INT 25
85139: PUSH
85140: LD_INT 9
85142: PUSH
85143: EMPTY
85144: LIST
85145: LIST
85146: PUSH
85147: LD_INT 25
85149: PUSH
85150: LD_INT 8
85152: PUSH
85153: EMPTY
85154: LIST
85155: LIST
85156: PUSH
85157: EMPTY
85158: LIST
85159: LIST
85160: LIST
85161: LIST
85162: PUSH
85163: EMPTY
85164: LIST
85165: LIST
85166: PPUSH
85167: CALL_OW 69
85171: PUSH
85172: FOR_IN
85173: IFFALSE 85189
// begin SetClass ( i , 1 ) ;
85175: LD_VAR 0 1
85179: PPUSH
85180: LD_INT 1
85182: PPUSH
85183: CALL_OW 336
// end ;
85187: GO 85172
85189: POP
85190: POP
// end ;
85191: PPOPN 1
85193: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
85194: LD_EXP 106
85198: PUSH
85199: LD_EXP 110
85203: AND
85204: PUSH
85205: LD_OWVAR 65
85209: PUSH
85210: LD_INT 7
85212: LESS
85213: AND
85214: IFFALSE 85228
85216: GO 85218
85218: DISABLE
// begin enable ;
85219: ENABLE
// game_speed := 7 ;
85220: LD_ADDR_OWVAR 65
85224: PUSH
85225: LD_INT 7
85227: ST_TO_ADDR
// end ;
85228: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
85229: LD_EXP 106
85233: PUSH
85234: LD_EXP 113
85238: AND
85239: IFFALSE 85441
85241: GO 85243
85243: DISABLE
85244: LD_INT 0
85246: PPUSH
85247: PPUSH
85248: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
85249: LD_ADDR_VAR 0 3
85253: PUSH
85254: LD_INT 81
85256: PUSH
85257: LD_OWVAR 2
85261: PUSH
85262: EMPTY
85263: LIST
85264: LIST
85265: PUSH
85266: LD_INT 21
85268: PUSH
85269: LD_INT 1
85271: PUSH
85272: EMPTY
85273: LIST
85274: LIST
85275: PUSH
85276: EMPTY
85277: LIST
85278: LIST
85279: PPUSH
85280: CALL_OW 69
85284: ST_TO_ADDR
// if not tmp then
85285: LD_VAR 0 3
85289: NOT
85290: IFFALSE 85294
// exit ;
85292: GO 85441
// if tmp > 5 then
85294: LD_VAR 0 3
85298: PUSH
85299: LD_INT 5
85301: GREATER
85302: IFFALSE 85314
// k := 5 else
85304: LD_ADDR_VAR 0 2
85308: PUSH
85309: LD_INT 5
85311: ST_TO_ADDR
85312: GO 85324
// k := tmp ;
85314: LD_ADDR_VAR 0 2
85318: PUSH
85319: LD_VAR 0 3
85323: ST_TO_ADDR
// for i := 1 to k do
85324: LD_ADDR_VAR 0 1
85328: PUSH
85329: DOUBLE
85330: LD_INT 1
85332: DEC
85333: ST_TO_ADDR
85334: LD_VAR 0 2
85338: PUSH
85339: FOR_TO
85340: IFFALSE 85439
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
85342: LD_VAR 0 3
85346: PUSH
85347: LD_VAR 0 1
85351: ARRAY
85352: PPUSH
85353: LD_VAR 0 1
85357: PUSH
85358: LD_INT 4
85360: MOD
85361: PUSH
85362: LD_INT 1
85364: PLUS
85365: PPUSH
85366: CALL_OW 259
85370: PUSH
85371: LD_INT 10
85373: LESS
85374: IFFALSE 85437
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
85376: LD_VAR 0 3
85380: PUSH
85381: LD_VAR 0 1
85385: ARRAY
85386: PPUSH
85387: LD_VAR 0 1
85391: PUSH
85392: LD_INT 4
85394: MOD
85395: PUSH
85396: LD_INT 1
85398: PLUS
85399: PPUSH
85400: LD_VAR 0 3
85404: PUSH
85405: LD_VAR 0 1
85409: ARRAY
85410: PPUSH
85411: LD_VAR 0 1
85415: PUSH
85416: LD_INT 4
85418: MOD
85419: PUSH
85420: LD_INT 1
85422: PLUS
85423: PPUSH
85424: CALL_OW 259
85428: PUSH
85429: LD_INT 1
85431: PLUS
85432: PPUSH
85433: CALL_OW 237
85437: GO 85339
85439: POP
85440: POP
// end ;
85441: PPOPN 3
85443: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
85444: LD_EXP 106
85448: PUSH
85449: LD_EXP 114
85453: AND
85454: IFFALSE 85474
85456: GO 85458
85458: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
85459: LD_INT 4
85461: PPUSH
85462: LD_OWVAR 2
85466: PPUSH
85467: LD_INT 0
85469: PPUSH
85470: CALL_OW 324
85474: END
// every 0 0$1 trigger StreamModeActive and sShovel do
85475: LD_EXP 106
85479: PUSH
85480: LD_EXP 143
85484: AND
85485: IFFALSE 85505
85487: GO 85489
85489: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
85490: LD_INT 19
85492: PPUSH
85493: LD_OWVAR 2
85497: PPUSH
85498: LD_INT 0
85500: PPUSH
85501: CALL_OW 324
85505: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
85506: LD_EXP 106
85510: PUSH
85511: LD_EXP 115
85515: AND
85516: IFFALSE 85618
85518: GO 85520
85520: DISABLE
85521: LD_INT 0
85523: PPUSH
85524: PPUSH
// begin enable ;
85525: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
85526: LD_ADDR_VAR 0 2
85530: PUSH
85531: LD_INT 22
85533: PUSH
85534: LD_OWVAR 2
85538: PUSH
85539: EMPTY
85540: LIST
85541: LIST
85542: PUSH
85543: LD_INT 2
85545: PUSH
85546: LD_INT 34
85548: PUSH
85549: LD_INT 11
85551: PUSH
85552: EMPTY
85553: LIST
85554: LIST
85555: PUSH
85556: LD_INT 34
85558: PUSH
85559: LD_INT 30
85561: PUSH
85562: EMPTY
85563: LIST
85564: LIST
85565: PUSH
85566: EMPTY
85567: LIST
85568: LIST
85569: LIST
85570: PUSH
85571: EMPTY
85572: LIST
85573: LIST
85574: PPUSH
85575: CALL_OW 69
85579: ST_TO_ADDR
// if not tmp then
85580: LD_VAR 0 2
85584: NOT
85585: IFFALSE 85589
// exit ;
85587: GO 85618
// for i in tmp do
85589: LD_ADDR_VAR 0 1
85593: PUSH
85594: LD_VAR 0 2
85598: PUSH
85599: FOR_IN
85600: IFFALSE 85616
// begin SetLives ( i , 0 ) ;
85602: LD_VAR 0 1
85606: PPUSH
85607: LD_INT 0
85609: PPUSH
85610: CALL_OW 234
// end ;
85614: GO 85599
85616: POP
85617: POP
// end ;
85618: PPOPN 2
85620: END
// every 0 0$1 trigger StreamModeActive and sBunker do
85621: LD_EXP 106
85625: PUSH
85626: LD_EXP 116
85630: AND
85631: IFFALSE 85651
85633: GO 85635
85635: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
85636: LD_INT 32
85638: PPUSH
85639: LD_OWVAR 2
85643: PPUSH
85644: LD_INT 0
85646: PPUSH
85647: CALL_OW 324
85651: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
85652: LD_EXP 106
85656: PUSH
85657: LD_EXP 117
85661: AND
85662: IFFALSE 85843
85664: GO 85666
85666: DISABLE
85667: LD_INT 0
85669: PPUSH
85670: PPUSH
85671: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
85672: LD_ADDR_VAR 0 2
85676: PUSH
85677: LD_INT 22
85679: PUSH
85680: LD_OWVAR 2
85684: PUSH
85685: EMPTY
85686: LIST
85687: LIST
85688: PUSH
85689: LD_INT 33
85691: PUSH
85692: LD_INT 3
85694: PUSH
85695: EMPTY
85696: LIST
85697: LIST
85698: PUSH
85699: EMPTY
85700: LIST
85701: LIST
85702: PPUSH
85703: CALL_OW 69
85707: ST_TO_ADDR
// if not tmp then
85708: LD_VAR 0 2
85712: NOT
85713: IFFALSE 85717
// exit ;
85715: GO 85843
// side := 0 ;
85717: LD_ADDR_VAR 0 3
85721: PUSH
85722: LD_INT 0
85724: ST_TO_ADDR
// for i := 1 to 8 do
85725: LD_ADDR_VAR 0 1
85729: PUSH
85730: DOUBLE
85731: LD_INT 1
85733: DEC
85734: ST_TO_ADDR
85735: LD_INT 8
85737: PUSH
85738: FOR_TO
85739: IFFALSE 85787
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
85741: LD_OWVAR 2
85745: PUSH
85746: LD_VAR 0 1
85750: NONEQUAL
85751: PUSH
85752: LD_OWVAR 2
85756: PPUSH
85757: LD_VAR 0 1
85761: PPUSH
85762: CALL_OW 81
85766: PUSH
85767: LD_INT 2
85769: EQUAL
85770: AND
85771: IFFALSE 85785
// begin side := i ;
85773: LD_ADDR_VAR 0 3
85777: PUSH
85778: LD_VAR 0 1
85782: ST_TO_ADDR
// break ;
85783: GO 85787
// end ;
85785: GO 85738
85787: POP
85788: POP
// if not side then
85789: LD_VAR 0 3
85793: NOT
85794: IFFALSE 85798
// exit ;
85796: GO 85843
// for i := 1 to tmp do
85798: LD_ADDR_VAR 0 1
85802: PUSH
85803: DOUBLE
85804: LD_INT 1
85806: DEC
85807: ST_TO_ADDR
85808: LD_VAR 0 2
85812: PUSH
85813: FOR_TO
85814: IFFALSE 85841
// if Prob ( 60 ) then
85816: LD_INT 60
85818: PPUSH
85819: CALL_OW 13
85823: IFFALSE 85839
// SetSide ( i , side ) ;
85825: LD_VAR 0 1
85829: PPUSH
85830: LD_VAR 0 3
85834: PPUSH
85835: CALL_OW 235
85839: GO 85813
85841: POP
85842: POP
// end ;
85843: PPOPN 3
85845: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
85846: LD_EXP 106
85850: PUSH
85851: LD_EXP 119
85855: AND
85856: IFFALSE 85975
85858: GO 85860
85860: DISABLE
85861: LD_INT 0
85863: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
85864: LD_ADDR_VAR 0 1
85868: PUSH
85869: LD_INT 22
85871: PUSH
85872: LD_OWVAR 2
85876: PUSH
85877: EMPTY
85878: LIST
85879: LIST
85880: PUSH
85881: LD_INT 21
85883: PUSH
85884: LD_INT 1
85886: PUSH
85887: EMPTY
85888: LIST
85889: LIST
85890: PUSH
85891: LD_INT 3
85893: PUSH
85894: LD_INT 23
85896: PUSH
85897: LD_INT 0
85899: PUSH
85900: EMPTY
85901: LIST
85902: LIST
85903: PUSH
85904: EMPTY
85905: LIST
85906: LIST
85907: PUSH
85908: EMPTY
85909: LIST
85910: LIST
85911: LIST
85912: PPUSH
85913: CALL_OW 69
85917: PUSH
85918: FOR_IN
85919: IFFALSE 85973
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
85921: LD_VAR 0 1
85925: PPUSH
85926: CALL_OW 257
85930: PUSH
85931: LD_INT 1
85933: PUSH
85934: LD_INT 2
85936: PUSH
85937: LD_INT 3
85939: PUSH
85940: LD_INT 4
85942: PUSH
85943: EMPTY
85944: LIST
85945: LIST
85946: LIST
85947: LIST
85948: IN
85949: IFFALSE 85971
// SetClass ( un , rand ( 1 , 4 ) ) ;
85951: LD_VAR 0 1
85955: PPUSH
85956: LD_INT 1
85958: PPUSH
85959: LD_INT 4
85961: PPUSH
85962: CALL_OW 12
85966: PPUSH
85967: CALL_OW 336
85971: GO 85918
85973: POP
85974: POP
// end ;
85975: PPOPN 1
85977: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
85978: LD_EXP 106
85982: PUSH
85983: LD_EXP 118
85987: AND
85988: IFFALSE 86067
85990: GO 85992
85992: DISABLE
85993: LD_INT 0
85995: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
85996: LD_ADDR_VAR 0 1
86000: PUSH
86001: LD_INT 22
86003: PUSH
86004: LD_OWVAR 2
86008: PUSH
86009: EMPTY
86010: LIST
86011: LIST
86012: PUSH
86013: LD_INT 21
86015: PUSH
86016: LD_INT 3
86018: PUSH
86019: EMPTY
86020: LIST
86021: LIST
86022: PUSH
86023: EMPTY
86024: LIST
86025: LIST
86026: PPUSH
86027: CALL_OW 69
86031: ST_TO_ADDR
// if not tmp then
86032: LD_VAR 0 1
86036: NOT
86037: IFFALSE 86041
// exit ;
86039: GO 86067
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
86041: LD_VAR 0 1
86045: PUSH
86046: LD_INT 1
86048: PPUSH
86049: LD_VAR 0 1
86053: PPUSH
86054: CALL_OW 12
86058: ARRAY
86059: PPUSH
86060: LD_INT 100
86062: PPUSH
86063: CALL_OW 234
// end ;
86067: PPOPN 1
86069: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
86070: LD_EXP 106
86074: PUSH
86075: LD_EXP 120
86079: AND
86080: IFFALSE 86178
86082: GO 86084
86084: DISABLE
86085: LD_INT 0
86087: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
86088: LD_ADDR_VAR 0 1
86092: PUSH
86093: LD_INT 22
86095: PUSH
86096: LD_OWVAR 2
86100: PUSH
86101: EMPTY
86102: LIST
86103: LIST
86104: PUSH
86105: LD_INT 21
86107: PUSH
86108: LD_INT 1
86110: PUSH
86111: EMPTY
86112: LIST
86113: LIST
86114: PUSH
86115: EMPTY
86116: LIST
86117: LIST
86118: PPUSH
86119: CALL_OW 69
86123: ST_TO_ADDR
// if not tmp then
86124: LD_VAR 0 1
86128: NOT
86129: IFFALSE 86133
// exit ;
86131: GO 86178
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
86133: LD_VAR 0 1
86137: PUSH
86138: LD_INT 1
86140: PPUSH
86141: LD_VAR 0 1
86145: PPUSH
86146: CALL_OW 12
86150: ARRAY
86151: PPUSH
86152: LD_INT 1
86154: PPUSH
86155: LD_INT 4
86157: PPUSH
86158: CALL_OW 12
86162: PPUSH
86163: LD_INT 3000
86165: PPUSH
86166: LD_INT 9000
86168: PPUSH
86169: CALL_OW 12
86173: PPUSH
86174: CALL_OW 492
// end ;
86178: PPOPN 1
86180: END
// every 0 0$1 trigger StreamModeActive and sDepot do
86181: LD_EXP 106
86185: PUSH
86186: LD_EXP 121
86190: AND
86191: IFFALSE 86211
86193: GO 86195
86195: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
86196: LD_INT 1
86198: PPUSH
86199: LD_OWVAR 2
86203: PPUSH
86204: LD_INT 0
86206: PPUSH
86207: CALL_OW 324
86211: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
86212: LD_EXP 106
86216: PUSH
86217: LD_EXP 122
86221: AND
86222: IFFALSE 86305
86224: GO 86226
86226: DISABLE
86227: LD_INT 0
86229: PPUSH
86230: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
86231: LD_ADDR_VAR 0 2
86235: PUSH
86236: LD_INT 22
86238: PUSH
86239: LD_OWVAR 2
86243: PUSH
86244: EMPTY
86245: LIST
86246: LIST
86247: PUSH
86248: LD_INT 21
86250: PUSH
86251: LD_INT 3
86253: PUSH
86254: EMPTY
86255: LIST
86256: LIST
86257: PUSH
86258: EMPTY
86259: LIST
86260: LIST
86261: PPUSH
86262: CALL_OW 69
86266: ST_TO_ADDR
// if not tmp then
86267: LD_VAR 0 2
86271: NOT
86272: IFFALSE 86276
// exit ;
86274: GO 86305
// for i in tmp do
86276: LD_ADDR_VAR 0 1
86280: PUSH
86281: LD_VAR 0 2
86285: PUSH
86286: FOR_IN
86287: IFFALSE 86303
// SetBLevel ( i , 10 ) ;
86289: LD_VAR 0 1
86293: PPUSH
86294: LD_INT 10
86296: PPUSH
86297: CALL_OW 241
86301: GO 86286
86303: POP
86304: POP
// end ;
86305: PPOPN 2
86307: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
86308: LD_EXP 106
86312: PUSH
86313: LD_EXP 123
86317: AND
86318: IFFALSE 86429
86320: GO 86322
86322: DISABLE
86323: LD_INT 0
86325: PPUSH
86326: PPUSH
86327: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
86328: LD_ADDR_VAR 0 3
86332: PUSH
86333: LD_INT 22
86335: PUSH
86336: LD_OWVAR 2
86340: PUSH
86341: EMPTY
86342: LIST
86343: LIST
86344: PUSH
86345: LD_INT 25
86347: PUSH
86348: LD_INT 1
86350: PUSH
86351: EMPTY
86352: LIST
86353: LIST
86354: PUSH
86355: EMPTY
86356: LIST
86357: LIST
86358: PPUSH
86359: CALL_OW 69
86363: ST_TO_ADDR
// if not tmp then
86364: LD_VAR 0 3
86368: NOT
86369: IFFALSE 86373
// exit ;
86371: GO 86429
// un := tmp [ rand ( 1 , tmp ) ] ;
86373: LD_ADDR_VAR 0 2
86377: PUSH
86378: LD_VAR 0 3
86382: PUSH
86383: LD_INT 1
86385: PPUSH
86386: LD_VAR 0 3
86390: PPUSH
86391: CALL_OW 12
86395: ARRAY
86396: ST_TO_ADDR
// if Crawls ( un ) then
86397: LD_VAR 0 2
86401: PPUSH
86402: CALL_OW 318
86406: IFFALSE 86417
// ComWalk ( un ) ;
86408: LD_VAR 0 2
86412: PPUSH
86413: CALL_OW 138
// SetClass ( un , class_sniper ) ;
86417: LD_VAR 0 2
86421: PPUSH
86422: LD_INT 5
86424: PPUSH
86425: CALL_OW 336
// end ;
86429: PPOPN 3
86431: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
86432: LD_EXP 106
86436: PUSH
86437: LD_EXP 124
86441: AND
86442: PUSH
86443: LD_OWVAR 67
86447: PUSH
86448: LD_INT 3
86450: LESS
86451: AND
86452: IFFALSE 86471
86454: GO 86456
86456: DISABLE
// Difficulty := Difficulty + 1 ;
86457: LD_ADDR_OWVAR 67
86461: PUSH
86462: LD_OWVAR 67
86466: PUSH
86467: LD_INT 1
86469: PLUS
86470: ST_TO_ADDR
86471: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
86472: LD_EXP 106
86476: PUSH
86477: LD_EXP 125
86481: AND
86482: IFFALSE 86585
86484: GO 86486
86486: DISABLE
86487: LD_INT 0
86489: PPUSH
// begin for i := 1 to 5 do
86490: LD_ADDR_VAR 0 1
86494: PUSH
86495: DOUBLE
86496: LD_INT 1
86498: DEC
86499: ST_TO_ADDR
86500: LD_INT 5
86502: PUSH
86503: FOR_TO
86504: IFFALSE 86583
// begin uc_nation := nation_nature ;
86506: LD_ADDR_OWVAR 21
86510: PUSH
86511: LD_INT 0
86513: ST_TO_ADDR
// uc_side := 0 ;
86514: LD_ADDR_OWVAR 20
86518: PUSH
86519: LD_INT 0
86521: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
86522: LD_ADDR_OWVAR 29
86526: PUSH
86527: LD_INT 12
86529: PUSH
86530: LD_INT 12
86532: PUSH
86533: EMPTY
86534: LIST
86535: LIST
86536: ST_TO_ADDR
// hc_agressivity := 20 ;
86537: LD_ADDR_OWVAR 35
86541: PUSH
86542: LD_INT 20
86544: ST_TO_ADDR
// hc_class := class_tiger ;
86545: LD_ADDR_OWVAR 28
86549: PUSH
86550: LD_INT 14
86552: ST_TO_ADDR
// hc_gallery :=  ;
86553: LD_ADDR_OWVAR 33
86557: PUSH
86558: LD_STRING 
86560: ST_TO_ADDR
// hc_name :=  ;
86561: LD_ADDR_OWVAR 26
86565: PUSH
86566: LD_STRING 
86568: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
86569: CALL_OW 44
86573: PPUSH
86574: LD_INT 0
86576: PPUSH
86577: CALL_OW 51
// end ;
86581: GO 86503
86583: POP
86584: POP
// end ;
86585: PPOPN 1
86587: END
// every 0 0$1 trigger StreamModeActive and sBomb do
86588: LD_EXP 106
86592: PUSH
86593: LD_EXP 126
86597: AND
86598: IFFALSE 86607
86600: GO 86602
86602: DISABLE
// StreamSibBomb ;
86603: CALL 86608 0 0
86607: END
// export function StreamSibBomb ; var i , x , y ; begin
86608: LD_INT 0
86610: PPUSH
86611: PPUSH
86612: PPUSH
86613: PPUSH
// result := false ;
86614: LD_ADDR_VAR 0 1
86618: PUSH
86619: LD_INT 0
86621: ST_TO_ADDR
// for i := 1 to 16 do
86622: LD_ADDR_VAR 0 2
86626: PUSH
86627: DOUBLE
86628: LD_INT 1
86630: DEC
86631: ST_TO_ADDR
86632: LD_INT 16
86634: PUSH
86635: FOR_TO
86636: IFFALSE 86835
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
86638: LD_ADDR_VAR 0 3
86642: PUSH
86643: LD_INT 10
86645: PUSH
86646: LD_INT 20
86648: PUSH
86649: LD_INT 30
86651: PUSH
86652: LD_INT 40
86654: PUSH
86655: LD_INT 50
86657: PUSH
86658: LD_INT 60
86660: PUSH
86661: LD_INT 70
86663: PUSH
86664: LD_INT 80
86666: PUSH
86667: LD_INT 90
86669: PUSH
86670: LD_INT 100
86672: PUSH
86673: LD_INT 110
86675: PUSH
86676: LD_INT 120
86678: PUSH
86679: LD_INT 130
86681: PUSH
86682: LD_INT 140
86684: PUSH
86685: LD_INT 150
86687: PUSH
86688: EMPTY
86689: LIST
86690: LIST
86691: LIST
86692: LIST
86693: LIST
86694: LIST
86695: LIST
86696: LIST
86697: LIST
86698: LIST
86699: LIST
86700: LIST
86701: LIST
86702: LIST
86703: LIST
86704: PUSH
86705: LD_INT 1
86707: PPUSH
86708: LD_INT 15
86710: PPUSH
86711: CALL_OW 12
86715: ARRAY
86716: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
86717: LD_ADDR_VAR 0 4
86721: PUSH
86722: LD_INT 10
86724: PUSH
86725: LD_INT 20
86727: PUSH
86728: LD_INT 30
86730: PUSH
86731: LD_INT 40
86733: PUSH
86734: LD_INT 50
86736: PUSH
86737: LD_INT 60
86739: PUSH
86740: LD_INT 70
86742: PUSH
86743: LD_INT 80
86745: PUSH
86746: LD_INT 90
86748: PUSH
86749: LD_INT 100
86751: PUSH
86752: LD_INT 110
86754: PUSH
86755: LD_INT 120
86757: PUSH
86758: LD_INT 130
86760: PUSH
86761: LD_INT 140
86763: PUSH
86764: LD_INT 150
86766: PUSH
86767: EMPTY
86768: LIST
86769: LIST
86770: LIST
86771: LIST
86772: LIST
86773: LIST
86774: LIST
86775: LIST
86776: LIST
86777: LIST
86778: LIST
86779: LIST
86780: LIST
86781: LIST
86782: LIST
86783: PUSH
86784: LD_INT 1
86786: PPUSH
86787: LD_INT 15
86789: PPUSH
86790: CALL_OW 12
86794: ARRAY
86795: ST_TO_ADDR
// if ValidHex ( x , y ) then
86796: LD_VAR 0 3
86800: PPUSH
86801: LD_VAR 0 4
86805: PPUSH
86806: CALL_OW 488
86810: IFFALSE 86833
// begin result := [ x , y ] ;
86812: LD_ADDR_VAR 0 1
86816: PUSH
86817: LD_VAR 0 3
86821: PUSH
86822: LD_VAR 0 4
86826: PUSH
86827: EMPTY
86828: LIST
86829: LIST
86830: ST_TO_ADDR
// break ;
86831: GO 86835
// end ; end ;
86833: GO 86635
86835: POP
86836: POP
// if result then
86837: LD_VAR 0 1
86841: IFFALSE 86901
// begin ToLua ( playSibBomb() ) ;
86843: LD_STRING playSibBomb()
86845: PPUSH
86846: CALL_OW 559
// wait ( 0 0$14 ) ;
86850: LD_INT 490
86852: PPUSH
86853: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
86857: LD_VAR 0 1
86861: PUSH
86862: LD_INT 1
86864: ARRAY
86865: PPUSH
86866: LD_VAR 0 1
86870: PUSH
86871: LD_INT 2
86873: ARRAY
86874: PPUSH
86875: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
86879: LD_VAR 0 1
86883: PUSH
86884: LD_INT 1
86886: ARRAY
86887: PPUSH
86888: LD_VAR 0 1
86892: PUSH
86893: LD_INT 2
86895: ARRAY
86896: PPUSH
86897: CALL_OW 429
// end ; end ;
86901: LD_VAR 0 1
86905: RET
// every 0 0$1 trigger StreamModeActive and sReset do
86906: LD_EXP 106
86910: PUSH
86911: LD_EXP 128
86915: AND
86916: IFFALSE 86928
86918: GO 86920
86920: DISABLE
// YouLost (  ) ;
86921: LD_STRING 
86923: PPUSH
86924: CALL_OW 104
86928: END
// every 0 0$1 trigger StreamModeActive and sFog do
86929: LD_EXP 106
86933: PUSH
86934: LD_EXP 127
86938: AND
86939: IFFALSE 86953
86941: GO 86943
86943: DISABLE
// FogOff ( your_side ) ;
86944: LD_OWVAR 2
86948: PPUSH
86949: CALL_OW 344
86953: END
// every 0 0$1 trigger StreamModeActive and sSun do
86954: LD_EXP 106
86958: PUSH
86959: LD_EXP 129
86963: AND
86964: IFFALSE 86992
86966: GO 86968
86968: DISABLE
// begin solar_recharge_percent := 0 ;
86969: LD_ADDR_OWVAR 79
86973: PUSH
86974: LD_INT 0
86976: ST_TO_ADDR
// wait ( 5 5$00 ) ;
86977: LD_INT 10500
86979: PPUSH
86980: CALL_OW 67
// solar_recharge_percent := 100 ;
86984: LD_ADDR_OWVAR 79
86988: PUSH
86989: LD_INT 100
86991: ST_TO_ADDR
// end ;
86992: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
86993: LD_EXP 106
86997: PUSH
86998: LD_EXP 130
87002: AND
87003: IFFALSE 87242
87005: GO 87007
87007: DISABLE
87008: LD_INT 0
87010: PPUSH
87011: PPUSH
87012: PPUSH
// begin tmp := [ ] ;
87013: LD_ADDR_VAR 0 3
87017: PUSH
87018: EMPTY
87019: ST_TO_ADDR
// for i := 1 to 6 do
87020: LD_ADDR_VAR 0 1
87024: PUSH
87025: DOUBLE
87026: LD_INT 1
87028: DEC
87029: ST_TO_ADDR
87030: LD_INT 6
87032: PUSH
87033: FOR_TO
87034: IFFALSE 87139
// begin uc_nation := nation_nature ;
87036: LD_ADDR_OWVAR 21
87040: PUSH
87041: LD_INT 0
87043: ST_TO_ADDR
// uc_side := 0 ;
87044: LD_ADDR_OWVAR 20
87048: PUSH
87049: LD_INT 0
87051: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
87052: LD_ADDR_OWVAR 29
87056: PUSH
87057: LD_INT 12
87059: PUSH
87060: LD_INT 12
87062: PUSH
87063: EMPTY
87064: LIST
87065: LIST
87066: ST_TO_ADDR
// hc_agressivity := 20 ;
87067: LD_ADDR_OWVAR 35
87071: PUSH
87072: LD_INT 20
87074: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
87075: LD_ADDR_OWVAR 28
87079: PUSH
87080: LD_INT 17
87082: ST_TO_ADDR
// hc_gallery :=  ;
87083: LD_ADDR_OWVAR 33
87087: PUSH
87088: LD_STRING 
87090: ST_TO_ADDR
// hc_name :=  ;
87091: LD_ADDR_OWVAR 26
87095: PUSH
87096: LD_STRING 
87098: ST_TO_ADDR
// un := CreateHuman ;
87099: LD_ADDR_VAR 0 2
87103: PUSH
87104: CALL_OW 44
87108: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
87109: LD_VAR 0 2
87113: PPUSH
87114: LD_INT 1
87116: PPUSH
87117: CALL_OW 51
// tmp := tmp ^ un ;
87121: LD_ADDR_VAR 0 3
87125: PUSH
87126: LD_VAR 0 3
87130: PUSH
87131: LD_VAR 0 2
87135: ADD
87136: ST_TO_ADDR
// end ;
87137: GO 87033
87139: POP
87140: POP
// repeat wait ( 0 0$1 ) ;
87141: LD_INT 35
87143: PPUSH
87144: CALL_OW 67
// for un in tmp do
87148: LD_ADDR_VAR 0 2
87152: PUSH
87153: LD_VAR 0 3
87157: PUSH
87158: FOR_IN
87159: IFFALSE 87233
// begin if IsDead ( un ) then
87161: LD_VAR 0 2
87165: PPUSH
87166: CALL_OW 301
87170: IFFALSE 87190
// begin tmp := tmp diff un ;
87172: LD_ADDR_VAR 0 3
87176: PUSH
87177: LD_VAR 0 3
87181: PUSH
87182: LD_VAR 0 2
87186: DIFF
87187: ST_TO_ADDR
// continue ;
87188: GO 87158
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
87190: LD_VAR 0 2
87194: PPUSH
87195: LD_INT 3
87197: PUSH
87198: LD_INT 22
87200: PUSH
87201: LD_INT 0
87203: PUSH
87204: EMPTY
87205: LIST
87206: LIST
87207: PUSH
87208: EMPTY
87209: LIST
87210: LIST
87211: PPUSH
87212: CALL_OW 69
87216: PPUSH
87217: LD_VAR 0 2
87221: PPUSH
87222: CALL_OW 74
87226: PPUSH
87227: CALL_OW 115
// end ;
87231: GO 87158
87233: POP
87234: POP
// until not tmp ;
87235: LD_VAR 0 3
87239: NOT
87240: IFFALSE 87141
// end ;
87242: PPOPN 3
87244: END
// every 0 0$1 trigger StreamModeActive and sTroll do
87245: LD_EXP 106
87249: PUSH
87250: LD_EXP 131
87254: AND
87255: IFFALSE 87309
87257: GO 87259
87259: DISABLE
// begin ToLua ( displayTroll(); ) ;
87260: LD_STRING displayTroll();
87262: PPUSH
87263: CALL_OW 559
// wait ( 3 3$00 ) ;
87267: LD_INT 6300
87269: PPUSH
87270: CALL_OW 67
// ToLua ( hideTroll(); ) ;
87274: LD_STRING hideTroll();
87276: PPUSH
87277: CALL_OW 559
// wait ( 1 1$00 ) ;
87281: LD_INT 2100
87283: PPUSH
87284: CALL_OW 67
// ToLua ( displayTroll(); ) ;
87288: LD_STRING displayTroll();
87290: PPUSH
87291: CALL_OW 559
// wait ( 1 1$00 ) ;
87295: LD_INT 2100
87297: PPUSH
87298: CALL_OW 67
// ToLua ( hideTroll(); ) ;
87302: LD_STRING hideTroll();
87304: PPUSH
87305: CALL_OW 559
// end ;
87309: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
87310: LD_EXP 106
87314: PUSH
87315: LD_EXP 132
87319: AND
87320: IFFALSE 87383
87322: GO 87324
87324: DISABLE
87325: LD_INT 0
87327: PPUSH
// begin p := 0 ;
87328: LD_ADDR_VAR 0 1
87332: PUSH
87333: LD_INT 0
87335: ST_TO_ADDR
// repeat game_speed := 1 ;
87336: LD_ADDR_OWVAR 65
87340: PUSH
87341: LD_INT 1
87343: ST_TO_ADDR
// wait ( 0 0$1 ) ;
87344: LD_INT 35
87346: PPUSH
87347: CALL_OW 67
// p := p + 1 ;
87351: LD_ADDR_VAR 0 1
87355: PUSH
87356: LD_VAR 0 1
87360: PUSH
87361: LD_INT 1
87363: PLUS
87364: ST_TO_ADDR
// until p >= 60 ;
87365: LD_VAR 0 1
87369: PUSH
87370: LD_INT 60
87372: GREATEREQUAL
87373: IFFALSE 87336
// game_speed := 4 ;
87375: LD_ADDR_OWVAR 65
87379: PUSH
87380: LD_INT 4
87382: ST_TO_ADDR
// end ;
87383: PPOPN 1
87385: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
87386: LD_EXP 106
87390: PUSH
87391: LD_EXP 133
87395: AND
87396: IFFALSE 87542
87398: GO 87400
87400: DISABLE
87401: LD_INT 0
87403: PPUSH
87404: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
87405: LD_ADDR_VAR 0 1
87409: PUSH
87410: LD_INT 22
87412: PUSH
87413: LD_OWVAR 2
87417: PUSH
87418: EMPTY
87419: LIST
87420: LIST
87421: PUSH
87422: LD_INT 2
87424: PUSH
87425: LD_INT 30
87427: PUSH
87428: LD_INT 0
87430: PUSH
87431: EMPTY
87432: LIST
87433: LIST
87434: PUSH
87435: LD_INT 30
87437: PUSH
87438: LD_INT 1
87440: PUSH
87441: EMPTY
87442: LIST
87443: LIST
87444: PUSH
87445: EMPTY
87446: LIST
87447: LIST
87448: LIST
87449: PUSH
87450: EMPTY
87451: LIST
87452: LIST
87453: PPUSH
87454: CALL_OW 69
87458: ST_TO_ADDR
// if not depot then
87459: LD_VAR 0 1
87463: NOT
87464: IFFALSE 87468
// exit ;
87466: GO 87542
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
87468: LD_ADDR_VAR 0 2
87472: PUSH
87473: LD_VAR 0 1
87477: PUSH
87478: LD_INT 1
87480: PPUSH
87481: LD_VAR 0 1
87485: PPUSH
87486: CALL_OW 12
87490: ARRAY
87491: PPUSH
87492: CALL_OW 274
87496: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
87497: LD_VAR 0 2
87501: PPUSH
87502: LD_INT 1
87504: PPUSH
87505: LD_INT 0
87507: PPUSH
87508: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
87512: LD_VAR 0 2
87516: PPUSH
87517: LD_INT 2
87519: PPUSH
87520: LD_INT 0
87522: PPUSH
87523: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
87527: LD_VAR 0 2
87531: PPUSH
87532: LD_INT 3
87534: PPUSH
87535: LD_INT 0
87537: PPUSH
87538: CALL_OW 277
// end ;
87542: PPOPN 2
87544: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
87545: LD_EXP 106
87549: PUSH
87550: LD_EXP 134
87554: AND
87555: IFFALSE 87652
87557: GO 87559
87559: DISABLE
87560: LD_INT 0
87562: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
87563: LD_ADDR_VAR 0 1
87567: PUSH
87568: LD_INT 22
87570: PUSH
87571: LD_OWVAR 2
87575: PUSH
87576: EMPTY
87577: LIST
87578: LIST
87579: PUSH
87580: LD_INT 21
87582: PUSH
87583: LD_INT 1
87585: PUSH
87586: EMPTY
87587: LIST
87588: LIST
87589: PUSH
87590: LD_INT 3
87592: PUSH
87593: LD_INT 23
87595: PUSH
87596: LD_INT 0
87598: PUSH
87599: EMPTY
87600: LIST
87601: LIST
87602: PUSH
87603: EMPTY
87604: LIST
87605: LIST
87606: PUSH
87607: EMPTY
87608: LIST
87609: LIST
87610: LIST
87611: PPUSH
87612: CALL_OW 69
87616: ST_TO_ADDR
// if not tmp then
87617: LD_VAR 0 1
87621: NOT
87622: IFFALSE 87626
// exit ;
87624: GO 87652
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
87626: LD_VAR 0 1
87630: PUSH
87631: LD_INT 1
87633: PPUSH
87634: LD_VAR 0 1
87638: PPUSH
87639: CALL_OW 12
87643: ARRAY
87644: PPUSH
87645: LD_INT 200
87647: PPUSH
87648: CALL_OW 234
// end ;
87652: PPOPN 1
87654: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
87655: LD_EXP 106
87659: PUSH
87660: LD_EXP 135
87664: AND
87665: IFFALSE 87744
87667: GO 87669
87669: DISABLE
87670: LD_INT 0
87672: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
87673: LD_ADDR_VAR 0 1
87677: PUSH
87678: LD_INT 22
87680: PUSH
87681: LD_OWVAR 2
87685: PUSH
87686: EMPTY
87687: LIST
87688: LIST
87689: PUSH
87690: LD_INT 21
87692: PUSH
87693: LD_INT 2
87695: PUSH
87696: EMPTY
87697: LIST
87698: LIST
87699: PUSH
87700: EMPTY
87701: LIST
87702: LIST
87703: PPUSH
87704: CALL_OW 69
87708: ST_TO_ADDR
// if not tmp then
87709: LD_VAR 0 1
87713: NOT
87714: IFFALSE 87718
// exit ;
87716: GO 87744
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
87718: LD_VAR 0 1
87722: PUSH
87723: LD_INT 1
87725: PPUSH
87726: LD_VAR 0 1
87730: PPUSH
87731: CALL_OW 12
87735: ARRAY
87736: PPUSH
87737: LD_INT 60
87739: PPUSH
87740: CALL_OW 234
// end ;
87744: PPOPN 1
87746: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
87747: LD_EXP 106
87751: PUSH
87752: LD_EXP 136
87756: AND
87757: IFFALSE 87856
87759: GO 87761
87761: DISABLE
87762: LD_INT 0
87764: PPUSH
87765: PPUSH
// begin enable ;
87766: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
87767: LD_ADDR_VAR 0 1
87771: PUSH
87772: LD_INT 22
87774: PUSH
87775: LD_OWVAR 2
87779: PUSH
87780: EMPTY
87781: LIST
87782: LIST
87783: PUSH
87784: LD_INT 61
87786: PUSH
87787: EMPTY
87788: LIST
87789: PUSH
87790: LD_INT 33
87792: PUSH
87793: LD_INT 2
87795: PUSH
87796: EMPTY
87797: LIST
87798: LIST
87799: PUSH
87800: EMPTY
87801: LIST
87802: LIST
87803: LIST
87804: PPUSH
87805: CALL_OW 69
87809: ST_TO_ADDR
// if not tmp then
87810: LD_VAR 0 1
87814: NOT
87815: IFFALSE 87819
// exit ;
87817: GO 87856
// for i in tmp do
87819: LD_ADDR_VAR 0 2
87823: PUSH
87824: LD_VAR 0 1
87828: PUSH
87829: FOR_IN
87830: IFFALSE 87854
// if IsControledBy ( i ) then
87832: LD_VAR 0 2
87836: PPUSH
87837: CALL_OW 312
87841: IFFALSE 87852
// ComUnlink ( i ) ;
87843: LD_VAR 0 2
87847: PPUSH
87848: CALL_OW 136
87852: GO 87829
87854: POP
87855: POP
// end ;
87856: PPOPN 2
87858: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
87859: LD_EXP 106
87863: PUSH
87864: LD_EXP 137
87868: AND
87869: IFFALSE 88009
87871: GO 87873
87873: DISABLE
87874: LD_INT 0
87876: PPUSH
87877: PPUSH
// begin ToLua ( displayPowell(); ) ;
87878: LD_STRING displayPowell();
87880: PPUSH
87881: CALL_OW 559
// uc_side := 0 ;
87885: LD_ADDR_OWVAR 20
87889: PUSH
87890: LD_INT 0
87892: ST_TO_ADDR
// uc_nation := 2 ;
87893: LD_ADDR_OWVAR 21
87897: PUSH
87898: LD_INT 2
87900: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
87901: LD_ADDR_OWVAR 37
87905: PUSH
87906: LD_INT 14
87908: ST_TO_ADDR
// vc_engine := engine_siberite ;
87909: LD_ADDR_OWVAR 39
87913: PUSH
87914: LD_INT 3
87916: ST_TO_ADDR
// vc_control := control_apeman ;
87917: LD_ADDR_OWVAR 38
87921: PUSH
87922: LD_INT 5
87924: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
87925: LD_ADDR_OWVAR 40
87929: PUSH
87930: LD_INT 29
87932: ST_TO_ADDR
// un := CreateVehicle ;
87933: LD_ADDR_VAR 0 2
87937: PUSH
87938: CALL_OW 45
87942: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
87943: LD_VAR 0 2
87947: PPUSH
87948: LD_INT 1
87950: PPUSH
87951: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
87955: LD_INT 35
87957: PPUSH
87958: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
87962: LD_VAR 0 2
87966: PPUSH
87967: LD_INT 22
87969: PUSH
87970: LD_OWVAR 2
87974: PUSH
87975: EMPTY
87976: LIST
87977: LIST
87978: PPUSH
87979: CALL_OW 69
87983: PPUSH
87984: LD_VAR 0 2
87988: PPUSH
87989: CALL_OW 74
87993: PPUSH
87994: CALL_OW 115
// until IsDead ( un ) ;
87998: LD_VAR 0 2
88002: PPUSH
88003: CALL_OW 301
88007: IFFALSE 87955
// end ;
88009: PPOPN 2
88011: END
// every 0 0$1 trigger StreamModeActive and sStu do
88012: LD_EXP 106
88016: PUSH
88017: LD_EXP 145
88021: AND
88022: IFFALSE 88038
88024: GO 88026
88026: DISABLE
// begin ToLua ( displayStucuk(); ) ;
88027: LD_STRING displayStucuk();
88029: PPUSH
88030: CALL_OW 559
// ResetFog ;
88034: CALL_OW 335
// end ;
88038: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
88039: LD_EXP 106
88043: PUSH
88044: LD_EXP 138
88048: AND
88049: IFFALSE 88190
88051: GO 88053
88053: DISABLE
88054: LD_INT 0
88056: PPUSH
88057: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
88058: LD_ADDR_VAR 0 2
88062: PUSH
88063: LD_INT 22
88065: PUSH
88066: LD_OWVAR 2
88070: PUSH
88071: EMPTY
88072: LIST
88073: LIST
88074: PUSH
88075: LD_INT 21
88077: PUSH
88078: LD_INT 1
88080: PUSH
88081: EMPTY
88082: LIST
88083: LIST
88084: PUSH
88085: EMPTY
88086: LIST
88087: LIST
88088: PPUSH
88089: CALL_OW 69
88093: ST_TO_ADDR
// if not tmp then
88094: LD_VAR 0 2
88098: NOT
88099: IFFALSE 88103
// exit ;
88101: GO 88190
// un := tmp [ rand ( 1 , tmp ) ] ;
88103: LD_ADDR_VAR 0 1
88107: PUSH
88108: LD_VAR 0 2
88112: PUSH
88113: LD_INT 1
88115: PPUSH
88116: LD_VAR 0 2
88120: PPUSH
88121: CALL_OW 12
88125: ARRAY
88126: ST_TO_ADDR
// SetSide ( un , 0 ) ;
88127: LD_VAR 0 1
88131: PPUSH
88132: LD_INT 0
88134: PPUSH
88135: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
88139: LD_VAR 0 1
88143: PPUSH
88144: LD_OWVAR 3
88148: PUSH
88149: LD_VAR 0 1
88153: DIFF
88154: PPUSH
88155: LD_VAR 0 1
88159: PPUSH
88160: CALL_OW 74
88164: PPUSH
88165: CALL_OW 115
// wait ( 0 0$20 ) ;
88169: LD_INT 700
88171: PPUSH
88172: CALL_OW 67
// SetSide ( un , your_side ) ;
88176: LD_VAR 0 1
88180: PPUSH
88181: LD_OWVAR 2
88185: PPUSH
88186: CALL_OW 235
// end ;
88190: PPOPN 2
88192: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
88193: LD_EXP 106
88197: PUSH
88198: LD_EXP 139
88202: AND
88203: IFFALSE 88309
88205: GO 88207
88207: DISABLE
88208: LD_INT 0
88210: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
88211: LD_ADDR_VAR 0 1
88215: PUSH
88216: LD_INT 22
88218: PUSH
88219: LD_OWVAR 2
88223: PUSH
88224: EMPTY
88225: LIST
88226: LIST
88227: PUSH
88228: LD_INT 2
88230: PUSH
88231: LD_INT 30
88233: PUSH
88234: LD_INT 0
88236: PUSH
88237: EMPTY
88238: LIST
88239: LIST
88240: PUSH
88241: LD_INT 30
88243: PUSH
88244: LD_INT 1
88246: PUSH
88247: EMPTY
88248: LIST
88249: LIST
88250: PUSH
88251: EMPTY
88252: LIST
88253: LIST
88254: LIST
88255: PUSH
88256: EMPTY
88257: LIST
88258: LIST
88259: PPUSH
88260: CALL_OW 69
88264: ST_TO_ADDR
// if not depot then
88265: LD_VAR 0 1
88269: NOT
88270: IFFALSE 88274
// exit ;
88272: GO 88309
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
88274: LD_VAR 0 1
88278: PUSH
88279: LD_INT 1
88281: ARRAY
88282: PPUSH
88283: CALL_OW 250
88287: PPUSH
88288: LD_VAR 0 1
88292: PUSH
88293: LD_INT 1
88295: ARRAY
88296: PPUSH
88297: CALL_OW 251
88301: PPUSH
88302: LD_INT 70
88304: PPUSH
88305: CALL_OW 495
// end ;
88309: PPOPN 1
88311: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
88312: LD_EXP 106
88316: PUSH
88317: LD_EXP 140
88321: AND
88322: IFFALSE 88533
88324: GO 88326
88326: DISABLE
88327: LD_INT 0
88329: PPUSH
88330: PPUSH
88331: PPUSH
88332: PPUSH
88333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
88334: LD_ADDR_VAR 0 5
88338: PUSH
88339: LD_INT 22
88341: PUSH
88342: LD_OWVAR 2
88346: PUSH
88347: EMPTY
88348: LIST
88349: LIST
88350: PUSH
88351: LD_INT 21
88353: PUSH
88354: LD_INT 1
88356: PUSH
88357: EMPTY
88358: LIST
88359: LIST
88360: PUSH
88361: EMPTY
88362: LIST
88363: LIST
88364: PPUSH
88365: CALL_OW 69
88369: ST_TO_ADDR
// if not tmp then
88370: LD_VAR 0 5
88374: NOT
88375: IFFALSE 88379
// exit ;
88377: GO 88533
// for i in tmp do
88379: LD_ADDR_VAR 0 1
88383: PUSH
88384: LD_VAR 0 5
88388: PUSH
88389: FOR_IN
88390: IFFALSE 88531
// begin d := rand ( 0 , 5 ) ;
88392: LD_ADDR_VAR 0 4
88396: PUSH
88397: LD_INT 0
88399: PPUSH
88400: LD_INT 5
88402: PPUSH
88403: CALL_OW 12
88407: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
88408: LD_ADDR_VAR 0 2
88412: PUSH
88413: LD_VAR 0 1
88417: PPUSH
88418: CALL_OW 250
88422: PPUSH
88423: LD_VAR 0 4
88427: PPUSH
88428: LD_INT 3
88430: PPUSH
88431: LD_INT 12
88433: PPUSH
88434: CALL_OW 12
88438: PPUSH
88439: CALL_OW 272
88443: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
88444: LD_ADDR_VAR 0 3
88448: PUSH
88449: LD_VAR 0 1
88453: PPUSH
88454: CALL_OW 251
88458: PPUSH
88459: LD_VAR 0 4
88463: PPUSH
88464: LD_INT 3
88466: PPUSH
88467: LD_INT 12
88469: PPUSH
88470: CALL_OW 12
88474: PPUSH
88475: CALL_OW 273
88479: ST_TO_ADDR
// if ValidHex ( x , y ) then
88480: LD_VAR 0 2
88484: PPUSH
88485: LD_VAR 0 3
88489: PPUSH
88490: CALL_OW 488
88494: IFFALSE 88529
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
88496: LD_VAR 0 1
88500: PPUSH
88501: LD_VAR 0 2
88505: PPUSH
88506: LD_VAR 0 3
88510: PPUSH
88511: LD_INT 3
88513: PPUSH
88514: LD_INT 6
88516: PPUSH
88517: CALL_OW 12
88521: PPUSH
88522: LD_INT 1
88524: PPUSH
88525: CALL_OW 483
// end ;
88529: GO 88389
88531: POP
88532: POP
// end ;
88533: PPOPN 5
88535: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
88536: LD_EXP 106
88540: PUSH
88541: LD_EXP 141
88545: AND
88546: IFFALSE 88640
88548: GO 88550
88550: DISABLE
88551: LD_INT 0
88553: PPUSH
88554: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
88555: LD_ADDR_VAR 0 2
88559: PUSH
88560: LD_INT 22
88562: PUSH
88563: LD_OWVAR 2
88567: PUSH
88568: EMPTY
88569: LIST
88570: LIST
88571: PUSH
88572: LD_INT 32
88574: PUSH
88575: LD_INT 1
88577: PUSH
88578: EMPTY
88579: LIST
88580: LIST
88581: PUSH
88582: LD_INT 21
88584: PUSH
88585: LD_INT 2
88587: PUSH
88588: EMPTY
88589: LIST
88590: LIST
88591: PUSH
88592: EMPTY
88593: LIST
88594: LIST
88595: LIST
88596: PPUSH
88597: CALL_OW 69
88601: ST_TO_ADDR
// if not tmp then
88602: LD_VAR 0 2
88606: NOT
88607: IFFALSE 88611
// exit ;
88609: GO 88640
// for i in tmp do
88611: LD_ADDR_VAR 0 1
88615: PUSH
88616: LD_VAR 0 2
88620: PUSH
88621: FOR_IN
88622: IFFALSE 88638
// SetFuel ( i , 0 ) ;
88624: LD_VAR 0 1
88628: PPUSH
88629: LD_INT 0
88631: PPUSH
88632: CALL_OW 240
88636: GO 88621
88638: POP
88639: POP
// end ;
88640: PPOPN 2
88642: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
88643: LD_EXP 106
88647: PUSH
88648: LD_EXP 142
88652: AND
88653: IFFALSE 88719
88655: GO 88657
88657: DISABLE
88658: LD_INT 0
88660: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
88661: LD_ADDR_VAR 0 1
88665: PUSH
88666: LD_INT 22
88668: PUSH
88669: LD_OWVAR 2
88673: PUSH
88674: EMPTY
88675: LIST
88676: LIST
88677: PUSH
88678: LD_INT 30
88680: PUSH
88681: LD_INT 29
88683: PUSH
88684: EMPTY
88685: LIST
88686: LIST
88687: PUSH
88688: EMPTY
88689: LIST
88690: LIST
88691: PPUSH
88692: CALL_OW 69
88696: ST_TO_ADDR
// if not tmp then
88697: LD_VAR 0 1
88701: NOT
88702: IFFALSE 88706
// exit ;
88704: GO 88719
// DestroyUnit ( tmp [ 1 ] ) ;
88706: LD_VAR 0 1
88710: PUSH
88711: LD_INT 1
88713: ARRAY
88714: PPUSH
88715: CALL_OW 65
// end ;
88719: PPOPN 1
88721: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
88722: LD_EXP 106
88726: PUSH
88727: LD_EXP 144
88731: AND
88732: IFFALSE 88861
88734: GO 88736
88736: DISABLE
88737: LD_INT 0
88739: PPUSH
// begin uc_side := 0 ;
88740: LD_ADDR_OWVAR 20
88744: PUSH
88745: LD_INT 0
88747: ST_TO_ADDR
// uc_nation := nation_arabian ;
88748: LD_ADDR_OWVAR 21
88752: PUSH
88753: LD_INT 2
88755: ST_TO_ADDR
// hc_gallery :=  ;
88756: LD_ADDR_OWVAR 33
88760: PUSH
88761: LD_STRING 
88763: ST_TO_ADDR
// hc_name :=  ;
88764: LD_ADDR_OWVAR 26
88768: PUSH
88769: LD_STRING 
88771: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
88772: LD_INT 1
88774: PPUSH
88775: LD_INT 11
88777: PPUSH
88778: LD_INT 10
88780: PPUSH
88781: CALL_OW 380
// un := CreateHuman ;
88785: LD_ADDR_VAR 0 1
88789: PUSH
88790: CALL_OW 44
88794: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
88795: LD_VAR 0 1
88799: PPUSH
88800: LD_INT 1
88802: PPUSH
88803: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
88807: LD_INT 35
88809: PPUSH
88810: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
88814: LD_VAR 0 1
88818: PPUSH
88819: LD_INT 22
88821: PUSH
88822: LD_OWVAR 2
88826: PUSH
88827: EMPTY
88828: LIST
88829: LIST
88830: PPUSH
88831: CALL_OW 69
88835: PPUSH
88836: LD_VAR 0 1
88840: PPUSH
88841: CALL_OW 74
88845: PPUSH
88846: CALL_OW 115
// until IsDead ( un ) ;
88850: LD_VAR 0 1
88854: PPUSH
88855: CALL_OW 301
88859: IFFALSE 88807
// end ;
88861: PPOPN 1
88863: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
88864: LD_EXP 106
88868: PUSH
88869: LD_EXP 146
88873: AND
88874: IFFALSE 88886
88876: GO 88878
88878: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
88879: LD_STRING earthquake(getX(game), 0, 32)
88881: PPUSH
88882: CALL_OW 559
88886: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
88887: LD_EXP 106
88891: PUSH
88892: LD_EXP 147
88896: AND
88897: IFFALSE 88988
88899: GO 88901
88901: DISABLE
88902: LD_INT 0
88904: PPUSH
// begin enable ;
88905: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
88906: LD_ADDR_VAR 0 1
88910: PUSH
88911: LD_INT 22
88913: PUSH
88914: LD_OWVAR 2
88918: PUSH
88919: EMPTY
88920: LIST
88921: LIST
88922: PUSH
88923: LD_INT 21
88925: PUSH
88926: LD_INT 2
88928: PUSH
88929: EMPTY
88930: LIST
88931: LIST
88932: PUSH
88933: LD_INT 33
88935: PUSH
88936: LD_INT 3
88938: PUSH
88939: EMPTY
88940: LIST
88941: LIST
88942: PUSH
88943: EMPTY
88944: LIST
88945: LIST
88946: LIST
88947: PPUSH
88948: CALL_OW 69
88952: ST_TO_ADDR
// if not tmp then
88953: LD_VAR 0 1
88957: NOT
88958: IFFALSE 88962
// exit ;
88960: GO 88988
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
88962: LD_VAR 0 1
88966: PUSH
88967: LD_INT 1
88969: PPUSH
88970: LD_VAR 0 1
88974: PPUSH
88975: CALL_OW 12
88979: ARRAY
88980: PPUSH
88981: LD_INT 1
88983: PPUSH
88984: CALL_OW 234
// end ;
88988: PPOPN 1
88990: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
88991: LD_EXP 106
88995: PUSH
88996: LD_EXP 148
89000: AND
89001: IFFALSE 89142
89003: GO 89005
89005: DISABLE
89006: LD_INT 0
89008: PPUSH
89009: PPUSH
89010: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
89011: LD_ADDR_VAR 0 3
89015: PUSH
89016: LD_INT 22
89018: PUSH
89019: LD_OWVAR 2
89023: PUSH
89024: EMPTY
89025: LIST
89026: LIST
89027: PUSH
89028: LD_INT 25
89030: PUSH
89031: LD_INT 1
89033: PUSH
89034: EMPTY
89035: LIST
89036: LIST
89037: PUSH
89038: EMPTY
89039: LIST
89040: LIST
89041: PPUSH
89042: CALL_OW 69
89046: ST_TO_ADDR
// if not tmp then
89047: LD_VAR 0 3
89051: NOT
89052: IFFALSE 89056
// exit ;
89054: GO 89142
// un := tmp [ rand ( 1 , tmp ) ] ;
89056: LD_ADDR_VAR 0 2
89060: PUSH
89061: LD_VAR 0 3
89065: PUSH
89066: LD_INT 1
89068: PPUSH
89069: LD_VAR 0 3
89073: PPUSH
89074: CALL_OW 12
89078: ARRAY
89079: ST_TO_ADDR
// if Crawls ( un ) then
89080: LD_VAR 0 2
89084: PPUSH
89085: CALL_OW 318
89089: IFFALSE 89100
// ComWalk ( un ) ;
89091: LD_VAR 0 2
89095: PPUSH
89096: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
89100: LD_VAR 0 2
89104: PPUSH
89105: LD_INT 9
89107: PPUSH
89108: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
89112: LD_INT 28
89114: PPUSH
89115: LD_OWVAR 2
89119: PPUSH
89120: LD_INT 2
89122: PPUSH
89123: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
89127: LD_INT 29
89129: PPUSH
89130: LD_OWVAR 2
89134: PPUSH
89135: LD_INT 2
89137: PPUSH
89138: CALL_OW 322
// end ;
89142: PPOPN 3
89144: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
89145: LD_EXP 106
89149: PUSH
89150: LD_EXP 149
89154: AND
89155: IFFALSE 89266
89157: GO 89159
89159: DISABLE
89160: LD_INT 0
89162: PPUSH
89163: PPUSH
89164: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
89165: LD_ADDR_VAR 0 3
89169: PUSH
89170: LD_INT 22
89172: PUSH
89173: LD_OWVAR 2
89177: PUSH
89178: EMPTY
89179: LIST
89180: LIST
89181: PUSH
89182: LD_INT 25
89184: PUSH
89185: LD_INT 1
89187: PUSH
89188: EMPTY
89189: LIST
89190: LIST
89191: PUSH
89192: EMPTY
89193: LIST
89194: LIST
89195: PPUSH
89196: CALL_OW 69
89200: ST_TO_ADDR
// if not tmp then
89201: LD_VAR 0 3
89205: NOT
89206: IFFALSE 89210
// exit ;
89208: GO 89266
// un := tmp [ rand ( 1 , tmp ) ] ;
89210: LD_ADDR_VAR 0 2
89214: PUSH
89215: LD_VAR 0 3
89219: PUSH
89220: LD_INT 1
89222: PPUSH
89223: LD_VAR 0 3
89227: PPUSH
89228: CALL_OW 12
89232: ARRAY
89233: ST_TO_ADDR
// if Crawls ( un ) then
89234: LD_VAR 0 2
89238: PPUSH
89239: CALL_OW 318
89243: IFFALSE 89254
// ComWalk ( un ) ;
89245: LD_VAR 0 2
89249: PPUSH
89250: CALL_OW 138
// SetClass ( un , class_mortar ) ;
89254: LD_VAR 0 2
89258: PPUSH
89259: LD_INT 8
89261: PPUSH
89262: CALL_OW 336
// end ;
89266: PPOPN 3
89268: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
89269: LD_EXP 106
89273: PUSH
89274: LD_EXP 150
89278: AND
89279: IFFALSE 89423
89281: GO 89283
89283: DISABLE
89284: LD_INT 0
89286: PPUSH
89287: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
89288: LD_ADDR_VAR 0 2
89292: PUSH
89293: LD_INT 22
89295: PUSH
89296: LD_OWVAR 2
89300: PUSH
89301: EMPTY
89302: LIST
89303: LIST
89304: PUSH
89305: LD_INT 21
89307: PUSH
89308: LD_INT 2
89310: PUSH
89311: EMPTY
89312: LIST
89313: LIST
89314: PUSH
89315: LD_INT 2
89317: PUSH
89318: LD_INT 34
89320: PUSH
89321: LD_INT 12
89323: PUSH
89324: EMPTY
89325: LIST
89326: LIST
89327: PUSH
89328: LD_INT 34
89330: PUSH
89331: LD_INT 51
89333: PUSH
89334: EMPTY
89335: LIST
89336: LIST
89337: PUSH
89338: LD_INT 34
89340: PUSH
89341: LD_INT 32
89343: PUSH
89344: EMPTY
89345: LIST
89346: LIST
89347: PUSH
89348: EMPTY
89349: LIST
89350: LIST
89351: LIST
89352: LIST
89353: PUSH
89354: EMPTY
89355: LIST
89356: LIST
89357: LIST
89358: PPUSH
89359: CALL_OW 69
89363: ST_TO_ADDR
// if not tmp then
89364: LD_VAR 0 2
89368: NOT
89369: IFFALSE 89373
// exit ;
89371: GO 89423
// for i in tmp do
89373: LD_ADDR_VAR 0 1
89377: PUSH
89378: LD_VAR 0 2
89382: PUSH
89383: FOR_IN
89384: IFFALSE 89421
// if GetCargo ( i , mat_artifact ) = 0 then
89386: LD_VAR 0 1
89390: PPUSH
89391: LD_INT 4
89393: PPUSH
89394: CALL_OW 289
89398: PUSH
89399: LD_INT 0
89401: EQUAL
89402: IFFALSE 89419
// SetCargo ( i , mat_siberit , 100 ) ;
89404: LD_VAR 0 1
89408: PPUSH
89409: LD_INT 3
89411: PPUSH
89412: LD_INT 100
89414: PPUSH
89415: CALL_OW 290
89419: GO 89383
89421: POP
89422: POP
// end ;
89423: PPOPN 2
89425: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
89426: LD_EXP 106
89430: PUSH
89431: LD_EXP 151
89435: AND
89436: IFFALSE 89619
89438: GO 89440
89440: DISABLE
89441: LD_INT 0
89443: PPUSH
89444: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
89445: LD_ADDR_VAR 0 2
89449: PUSH
89450: LD_INT 22
89452: PUSH
89453: LD_OWVAR 2
89457: PUSH
89458: EMPTY
89459: LIST
89460: LIST
89461: PPUSH
89462: CALL_OW 69
89466: ST_TO_ADDR
// if not tmp then
89467: LD_VAR 0 2
89471: NOT
89472: IFFALSE 89476
// exit ;
89474: GO 89619
// for i := 1 to 2 do
89476: LD_ADDR_VAR 0 1
89480: PUSH
89481: DOUBLE
89482: LD_INT 1
89484: DEC
89485: ST_TO_ADDR
89486: LD_INT 2
89488: PUSH
89489: FOR_TO
89490: IFFALSE 89617
// begin uc_side := your_side ;
89492: LD_ADDR_OWVAR 20
89496: PUSH
89497: LD_OWVAR 2
89501: ST_TO_ADDR
// uc_nation := nation_american ;
89502: LD_ADDR_OWVAR 21
89506: PUSH
89507: LD_INT 1
89509: ST_TO_ADDR
// vc_chassis := us_morphling ;
89510: LD_ADDR_OWVAR 37
89514: PUSH
89515: LD_INT 5
89517: ST_TO_ADDR
// vc_engine := engine_siberite ;
89518: LD_ADDR_OWVAR 39
89522: PUSH
89523: LD_INT 3
89525: ST_TO_ADDR
// vc_control := control_computer ;
89526: LD_ADDR_OWVAR 38
89530: PUSH
89531: LD_INT 3
89533: ST_TO_ADDR
// vc_weapon := us_double_laser ;
89534: LD_ADDR_OWVAR 40
89538: PUSH
89539: LD_INT 10
89541: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
89542: LD_VAR 0 2
89546: PUSH
89547: LD_INT 1
89549: ARRAY
89550: PPUSH
89551: CALL_OW 310
89555: NOT
89556: IFFALSE 89603
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
89558: CALL_OW 45
89562: PPUSH
89563: LD_VAR 0 2
89567: PUSH
89568: LD_INT 1
89570: ARRAY
89571: PPUSH
89572: CALL_OW 250
89576: PPUSH
89577: LD_VAR 0 2
89581: PUSH
89582: LD_INT 1
89584: ARRAY
89585: PPUSH
89586: CALL_OW 251
89590: PPUSH
89591: LD_INT 12
89593: PPUSH
89594: LD_INT 1
89596: PPUSH
89597: CALL_OW 50
89601: GO 89615
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
89603: CALL_OW 45
89607: PPUSH
89608: LD_INT 1
89610: PPUSH
89611: CALL_OW 51
// end ;
89615: GO 89489
89617: POP
89618: POP
// end ;
89619: PPOPN 2
89621: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
89622: LD_EXP 106
89626: PUSH
89627: LD_EXP 152
89631: AND
89632: IFFALSE 89854
89634: GO 89636
89636: DISABLE
89637: LD_INT 0
89639: PPUSH
89640: PPUSH
89641: PPUSH
89642: PPUSH
89643: PPUSH
89644: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
89645: LD_ADDR_VAR 0 6
89649: PUSH
89650: LD_INT 22
89652: PUSH
89653: LD_OWVAR 2
89657: PUSH
89658: EMPTY
89659: LIST
89660: LIST
89661: PUSH
89662: LD_INT 21
89664: PUSH
89665: LD_INT 1
89667: PUSH
89668: EMPTY
89669: LIST
89670: LIST
89671: PUSH
89672: LD_INT 3
89674: PUSH
89675: LD_INT 23
89677: PUSH
89678: LD_INT 0
89680: PUSH
89681: EMPTY
89682: LIST
89683: LIST
89684: PUSH
89685: EMPTY
89686: LIST
89687: LIST
89688: PUSH
89689: EMPTY
89690: LIST
89691: LIST
89692: LIST
89693: PPUSH
89694: CALL_OW 69
89698: ST_TO_ADDR
// if not tmp then
89699: LD_VAR 0 6
89703: NOT
89704: IFFALSE 89708
// exit ;
89706: GO 89854
// s1 := rand ( 1 , 4 ) ;
89708: LD_ADDR_VAR 0 2
89712: PUSH
89713: LD_INT 1
89715: PPUSH
89716: LD_INT 4
89718: PPUSH
89719: CALL_OW 12
89723: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
89724: LD_ADDR_VAR 0 4
89728: PUSH
89729: LD_VAR 0 6
89733: PUSH
89734: LD_INT 1
89736: ARRAY
89737: PPUSH
89738: LD_VAR 0 2
89742: PPUSH
89743: CALL_OW 259
89747: ST_TO_ADDR
// if s1 = 1 then
89748: LD_VAR 0 2
89752: PUSH
89753: LD_INT 1
89755: EQUAL
89756: IFFALSE 89776
// s2 := rand ( 2 , 4 ) else
89758: LD_ADDR_VAR 0 3
89762: PUSH
89763: LD_INT 2
89765: PPUSH
89766: LD_INT 4
89768: PPUSH
89769: CALL_OW 12
89773: ST_TO_ADDR
89774: GO 89784
// s2 := 1 ;
89776: LD_ADDR_VAR 0 3
89780: PUSH
89781: LD_INT 1
89783: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
89784: LD_ADDR_VAR 0 5
89788: PUSH
89789: LD_VAR 0 6
89793: PUSH
89794: LD_INT 1
89796: ARRAY
89797: PPUSH
89798: LD_VAR 0 3
89802: PPUSH
89803: CALL_OW 259
89807: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
89808: LD_VAR 0 6
89812: PUSH
89813: LD_INT 1
89815: ARRAY
89816: PPUSH
89817: LD_VAR 0 2
89821: PPUSH
89822: LD_VAR 0 5
89826: PPUSH
89827: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
89831: LD_VAR 0 6
89835: PUSH
89836: LD_INT 1
89838: ARRAY
89839: PPUSH
89840: LD_VAR 0 3
89844: PPUSH
89845: LD_VAR 0 4
89849: PPUSH
89850: CALL_OW 237
// end ;
89854: PPOPN 6
89856: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
89857: LD_EXP 106
89861: PUSH
89862: LD_EXP 153
89866: AND
89867: IFFALSE 89946
89869: GO 89871
89871: DISABLE
89872: LD_INT 0
89874: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
89875: LD_ADDR_VAR 0 1
89879: PUSH
89880: LD_INT 22
89882: PUSH
89883: LD_OWVAR 2
89887: PUSH
89888: EMPTY
89889: LIST
89890: LIST
89891: PUSH
89892: LD_INT 30
89894: PUSH
89895: LD_INT 3
89897: PUSH
89898: EMPTY
89899: LIST
89900: LIST
89901: PUSH
89902: EMPTY
89903: LIST
89904: LIST
89905: PPUSH
89906: CALL_OW 69
89910: ST_TO_ADDR
// if not tmp then
89911: LD_VAR 0 1
89915: NOT
89916: IFFALSE 89920
// exit ;
89918: GO 89946
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
89920: LD_VAR 0 1
89924: PUSH
89925: LD_INT 1
89927: PPUSH
89928: LD_VAR 0 1
89932: PPUSH
89933: CALL_OW 12
89937: ARRAY
89938: PPUSH
89939: LD_INT 1
89941: PPUSH
89942: CALL_OW 234
// end ;
89946: PPOPN 1
89948: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
89949: LD_EXP 106
89953: PUSH
89954: LD_EXP 154
89958: AND
89959: IFFALSE 90071
89961: GO 89963
89963: DISABLE
89964: LD_INT 0
89966: PPUSH
89967: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
89968: LD_ADDR_VAR 0 2
89972: PUSH
89973: LD_INT 22
89975: PUSH
89976: LD_OWVAR 2
89980: PUSH
89981: EMPTY
89982: LIST
89983: LIST
89984: PUSH
89985: LD_INT 2
89987: PUSH
89988: LD_INT 30
89990: PUSH
89991: LD_INT 27
89993: PUSH
89994: EMPTY
89995: LIST
89996: LIST
89997: PUSH
89998: LD_INT 30
90000: PUSH
90001: LD_INT 26
90003: PUSH
90004: EMPTY
90005: LIST
90006: LIST
90007: PUSH
90008: LD_INT 30
90010: PUSH
90011: LD_INT 28
90013: PUSH
90014: EMPTY
90015: LIST
90016: LIST
90017: PUSH
90018: EMPTY
90019: LIST
90020: LIST
90021: LIST
90022: LIST
90023: PUSH
90024: EMPTY
90025: LIST
90026: LIST
90027: PPUSH
90028: CALL_OW 69
90032: ST_TO_ADDR
// if not tmp then
90033: LD_VAR 0 2
90037: NOT
90038: IFFALSE 90042
// exit ;
90040: GO 90071
// for i in tmp do
90042: LD_ADDR_VAR 0 1
90046: PUSH
90047: LD_VAR 0 2
90051: PUSH
90052: FOR_IN
90053: IFFALSE 90069
// SetLives ( i , 1 ) ;
90055: LD_VAR 0 1
90059: PPUSH
90060: LD_INT 1
90062: PPUSH
90063: CALL_OW 234
90067: GO 90052
90069: POP
90070: POP
// end ;
90071: PPOPN 2
90073: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
90074: LD_EXP 106
90078: PUSH
90079: LD_EXP 155
90083: AND
90084: IFFALSE 90358
90086: GO 90088
90088: DISABLE
90089: LD_INT 0
90091: PPUSH
90092: PPUSH
90093: PPUSH
// begin i := rand ( 1 , 7 ) ;
90094: LD_ADDR_VAR 0 1
90098: PUSH
90099: LD_INT 1
90101: PPUSH
90102: LD_INT 7
90104: PPUSH
90105: CALL_OW 12
90109: ST_TO_ADDR
// case i of 1 :
90110: LD_VAR 0 1
90114: PUSH
90115: LD_INT 1
90117: DOUBLE
90118: EQUAL
90119: IFTRUE 90123
90121: GO 90133
90123: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
90124: LD_STRING earthquake(getX(game), 0, 32)
90126: PPUSH
90127: CALL_OW 559
90131: GO 90358
90133: LD_INT 2
90135: DOUBLE
90136: EQUAL
90137: IFTRUE 90141
90139: GO 90155
90141: POP
// begin ToLua ( displayStucuk(); ) ;
90142: LD_STRING displayStucuk();
90144: PPUSH
90145: CALL_OW 559
// ResetFog ;
90149: CALL_OW 335
// end ; 3 :
90153: GO 90358
90155: LD_INT 3
90157: DOUBLE
90158: EQUAL
90159: IFTRUE 90163
90161: GO 90267
90163: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
90164: LD_ADDR_VAR 0 2
90168: PUSH
90169: LD_INT 22
90171: PUSH
90172: LD_OWVAR 2
90176: PUSH
90177: EMPTY
90178: LIST
90179: LIST
90180: PUSH
90181: LD_INT 25
90183: PUSH
90184: LD_INT 1
90186: PUSH
90187: EMPTY
90188: LIST
90189: LIST
90190: PUSH
90191: EMPTY
90192: LIST
90193: LIST
90194: PPUSH
90195: CALL_OW 69
90199: ST_TO_ADDR
// if not tmp then
90200: LD_VAR 0 2
90204: NOT
90205: IFFALSE 90209
// exit ;
90207: GO 90358
// un := tmp [ rand ( 1 , tmp ) ] ;
90209: LD_ADDR_VAR 0 3
90213: PUSH
90214: LD_VAR 0 2
90218: PUSH
90219: LD_INT 1
90221: PPUSH
90222: LD_VAR 0 2
90226: PPUSH
90227: CALL_OW 12
90231: ARRAY
90232: ST_TO_ADDR
// if Crawls ( un ) then
90233: LD_VAR 0 3
90237: PPUSH
90238: CALL_OW 318
90242: IFFALSE 90253
// ComWalk ( un ) ;
90244: LD_VAR 0 3
90248: PPUSH
90249: CALL_OW 138
// SetClass ( un , class_mortar ) ;
90253: LD_VAR 0 3
90257: PPUSH
90258: LD_INT 8
90260: PPUSH
90261: CALL_OW 336
// end ; 4 :
90265: GO 90358
90267: LD_INT 4
90269: DOUBLE
90270: EQUAL
90271: IFTRUE 90275
90273: GO 90336
90275: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
90276: LD_ADDR_VAR 0 2
90280: PUSH
90281: LD_INT 22
90283: PUSH
90284: LD_OWVAR 2
90288: PUSH
90289: EMPTY
90290: LIST
90291: LIST
90292: PUSH
90293: LD_INT 30
90295: PUSH
90296: LD_INT 29
90298: PUSH
90299: EMPTY
90300: LIST
90301: LIST
90302: PUSH
90303: EMPTY
90304: LIST
90305: LIST
90306: PPUSH
90307: CALL_OW 69
90311: ST_TO_ADDR
// if not tmp then
90312: LD_VAR 0 2
90316: NOT
90317: IFFALSE 90321
// exit ;
90319: GO 90358
// DestroyUnit ( tmp [ 1 ] ) ;
90321: LD_VAR 0 2
90325: PUSH
90326: LD_INT 1
90328: ARRAY
90329: PPUSH
90330: CALL_OW 65
// end ; 5 .. 7 :
90334: GO 90358
90336: LD_INT 5
90338: DOUBLE
90339: GREATEREQUAL
90340: IFFALSE 90348
90342: LD_INT 7
90344: DOUBLE
90345: LESSEQUAL
90346: IFTRUE 90350
90348: GO 90357
90350: POP
// StreamSibBomb ; end ;
90351: CALL 86608 0 0
90355: GO 90358
90357: POP
// end ;
90358: PPOPN 3
90360: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
90361: LD_EXP 106
90365: PUSH
90366: LD_EXP 156
90370: AND
90371: IFFALSE 90527
90373: GO 90375
90375: DISABLE
90376: LD_INT 0
90378: PPUSH
90379: PPUSH
90380: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
90381: LD_ADDR_VAR 0 2
90385: PUSH
90386: LD_INT 81
90388: PUSH
90389: LD_OWVAR 2
90393: PUSH
90394: EMPTY
90395: LIST
90396: LIST
90397: PUSH
90398: LD_INT 2
90400: PUSH
90401: LD_INT 21
90403: PUSH
90404: LD_INT 1
90406: PUSH
90407: EMPTY
90408: LIST
90409: LIST
90410: PUSH
90411: LD_INT 21
90413: PUSH
90414: LD_INT 2
90416: PUSH
90417: EMPTY
90418: LIST
90419: LIST
90420: PUSH
90421: EMPTY
90422: LIST
90423: LIST
90424: LIST
90425: PUSH
90426: EMPTY
90427: LIST
90428: LIST
90429: PPUSH
90430: CALL_OW 69
90434: ST_TO_ADDR
// if not tmp then
90435: LD_VAR 0 2
90439: NOT
90440: IFFALSE 90444
// exit ;
90442: GO 90527
// p := 0 ;
90444: LD_ADDR_VAR 0 3
90448: PUSH
90449: LD_INT 0
90451: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
90452: LD_INT 35
90454: PPUSH
90455: CALL_OW 67
// p := p + 1 ;
90459: LD_ADDR_VAR 0 3
90463: PUSH
90464: LD_VAR 0 3
90468: PUSH
90469: LD_INT 1
90471: PLUS
90472: ST_TO_ADDR
// for i in tmp do
90473: LD_ADDR_VAR 0 1
90477: PUSH
90478: LD_VAR 0 2
90482: PUSH
90483: FOR_IN
90484: IFFALSE 90515
// if GetLives ( i ) < 1000 then
90486: LD_VAR 0 1
90490: PPUSH
90491: CALL_OW 256
90495: PUSH
90496: LD_INT 1000
90498: LESS
90499: IFFALSE 90513
// SetLives ( i , 1000 ) ;
90501: LD_VAR 0 1
90505: PPUSH
90506: LD_INT 1000
90508: PPUSH
90509: CALL_OW 234
90513: GO 90483
90515: POP
90516: POP
// until p > 20 ;
90517: LD_VAR 0 3
90521: PUSH
90522: LD_INT 20
90524: GREATER
90525: IFFALSE 90452
// end ;
90527: PPOPN 3
90529: END
// every 0 0$1 trigger StreamModeActive and sTime do
90530: LD_EXP 106
90534: PUSH
90535: LD_EXP 157
90539: AND
90540: IFFALSE 90575
90542: GO 90544
90544: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
90545: LD_INT 28
90547: PPUSH
90548: LD_OWVAR 2
90552: PPUSH
90553: LD_INT 2
90555: PPUSH
90556: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
90560: LD_INT 30
90562: PPUSH
90563: LD_OWVAR 2
90567: PPUSH
90568: LD_INT 2
90570: PPUSH
90571: CALL_OW 322
// end ;
90575: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
90576: LD_EXP 106
90580: PUSH
90581: LD_EXP 158
90585: AND
90586: IFFALSE 90707
90588: GO 90590
90590: DISABLE
90591: LD_INT 0
90593: PPUSH
90594: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
90595: LD_ADDR_VAR 0 2
90599: PUSH
90600: LD_INT 22
90602: PUSH
90603: LD_OWVAR 2
90607: PUSH
90608: EMPTY
90609: LIST
90610: LIST
90611: PUSH
90612: LD_INT 21
90614: PUSH
90615: LD_INT 1
90617: PUSH
90618: EMPTY
90619: LIST
90620: LIST
90621: PUSH
90622: LD_INT 3
90624: PUSH
90625: LD_INT 23
90627: PUSH
90628: LD_INT 0
90630: PUSH
90631: EMPTY
90632: LIST
90633: LIST
90634: PUSH
90635: EMPTY
90636: LIST
90637: LIST
90638: PUSH
90639: EMPTY
90640: LIST
90641: LIST
90642: LIST
90643: PPUSH
90644: CALL_OW 69
90648: ST_TO_ADDR
// if not tmp then
90649: LD_VAR 0 2
90653: NOT
90654: IFFALSE 90658
// exit ;
90656: GO 90707
// for i in tmp do
90658: LD_ADDR_VAR 0 1
90662: PUSH
90663: LD_VAR 0 2
90667: PUSH
90668: FOR_IN
90669: IFFALSE 90705
// begin if Crawls ( i ) then
90671: LD_VAR 0 1
90675: PPUSH
90676: CALL_OW 318
90680: IFFALSE 90691
// ComWalk ( i ) ;
90682: LD_VAR 0 1
90686: PPUSH
90687: CALL_OW 138
// SetClass ( i , 2 ) ;
90691: LD_VAR 0 1
90695: PPUSH
90696: LD_INT 2
90698: PPUSH
90699: CALL_OW 336
// end ;
90703: GO 90668
90705: POP
90706: POP
// end ;
90707: PPOPN 2
90709: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
90710: LD_EXP 106
90714: PUSH
90715: LD_EXP 159
90719: AND
90720: IFFALSE 91001
90722: GO 90724
90724: DISABLE
90725: LD_INT 0
90727: PPUSH
90728: PPUSH
90729: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
90730: LD_OWVAR 2
90734: PPUSH
90735: LD_INT 9
90737: PPUSH
90738: LD_INT 1
90740: PPUSH
90741: LD_INT 1
90743: PPUSH
90744: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
90748: LD_INT 9
90750: PPUSH
90751: LD_OWVAR 2
90755: PPUSH
90756: CALL_OW 343
// uc_side := 9 ;
90760: LD_ADDR_OWVAR 20
90764: PUSH
90765: LD_INT 9
90767: ST_TO_ADDR
// uc_nation := 2 ;
90768: LD_ADDR_OWVAR 21
90772: PUSH
90773: LD_INT 2
90775: ST_TO_ADDR
// hc_name := Dark Warrior ;
90776: LD_ADDR_OWVAR 26
90780: PUSH
90781: LD_STRING Dark Warrior
90783: ST_TO_ADDR
// hc_gallery :=  ;
90784: LD_ADDR_OWVAR 33
90788: PUSH
90789: LD_STRING 
90791: ST_TO_ADDR
// hc_noskilllimit := true ;
90792: LD_ADDR_OWVAR 76
90796: PUSH
90797: LD_INT 1
90799: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
90800: LD_ADDR_OWVAR 31
90804: PUSH
90805: LD_INT 30
90807: PUSH
90808: LD_INT 30
90810: PUSH
90811: LD_INT 30
90813: PUSH
90814: LD_INT 30
90816: PUSH
90817: EMPTY
90818: LIST
90819: LIST
90820: LIST
90821: LIST
90822: ST_TO_ADDR
// un := CreateHuman ;
90823: LD_ADDR_VAR 0 3
90827: PUSH
90828: CALL_OW 44
90832: ST_TO_ADDR
// hc_noskilllimit := false ;
90833: LD_ADDR_OWVAR 76
90837: PUSH
90838: LD_INT 0
90840: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
90841: LD_VAR 0 3
90845: PPUSH
90846: LD_INT 1
90848: PPUSH
90849: CALL_OW 51
// p := 0 ;
90853: LD_ADDR_VAR 0 2
90857: PUSH
90858: LD_INT 0
90860: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
90861: LD_INT 35
90863: PPUSH
90864: CALL_OW 67
// p := p + 1 ;
90868: LD_ADDR_VAR 0 2
90872: PUSH
90873: LD_VAR 0 2
90877: PUSH
90878: LD_INT 1
90880: PLUS
90881: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
90882: LD_VAR 0 3
90886: PPUSH
90887: CALL_OW 256
90891: PUSH
90892: LD_INT 1000
90894: LESS
90895: IFFALSE 90909
// SetLives ( un , 1000 ) ;
90897: LD_VAR 0 3
90901: PPUSH
90902: LD_INT 1000
90904: PPUSH
90905: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
90909: LD_VAR 0 3
90913: PPUSH
90914: LD_INT 81
90916: PUSH
90917: LD_OWVAR 2
90921: PUSH
90922: EMPTY
90923: LIST
90924: LIST
90925: PUSH
90926: LD_INT 91
90928: PUSH
90929: LD_VAR 0 3
90933: PUSH
90934: LD_INT 30
90936: PUSH
90937: EMPTY
90938: LIST
90939: LIST
90940: LIST
90941: PUSH
90942: EMPTY
90943: LIST
90944: LIST
90945: PPUSH
90946: CALL_OW 69
90950: PPUSH
90951: LD_VAR 0 3
90955: PPUSH
90956: CALL_OW 74
90960: PPUSH
90961: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
90965: LD_VAR 0 2
90969: PUSH
90970: LD_INT 60
90972: GREATER
90973: PUSH
90974: LD_VAR 0 3
90978: PPUSH
90979: CALL_OW 301
90983: OR
90984: IFFALSE 90861
// if un then
90986: LD_VAR 0 3
90990: IFFALSE 91001
// RemoveUnit ( un ) ;
90992: LD_VAR 0 3
90996: PPUSH
90997: CALL_OW 64
// end ; end_of_file
91001: PPOPN 3
91003: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
91004: LD_INT 0
91006: PPUSH
91007: PPUSH
91008: PPUSH
91009: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
91010: LD_VAR 0 1
91014: PPUSH
91015: CALL_OW 264
91019: PUSH
91020: LD_EXP 52
91024: EQUAL
91025: IFFALSE 91097
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
91027: LD_INT 68
91029: PPUSH
91030: LD_VAR 0 1
91034: PPUSH
91035: CALL_OW 255
91039: PPUSH
91040: CALL_OW 321
91044: PUSH
91045: LD_INT 2
91047: EQUAL
91048: IFFALSE 91060
// eff := 70 else
91050: LD_ADDR_VAR 0 4
91054: PUSH
91055: LD_INT 70
91057: ST_TO_ADDR
91058: GO 91068
// eff := 30 ;
91060: LD_ADDR_VAR 0 4
91064: PUSH
91065: LD_INT 30
91067: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
91068: LD_VAR 0 1
91072: PPUSH
91073: CALL_OW 250
91077: PPUSH
91078: LD_VAR 0 1
91082: PPUSH
91083: CALL_OW 251
91087: PPUSH
91088: LD_VAR 0 4
91092: PPUSH
91093: CALL_OW 495
// end ; end ;
91097: LD_VAR 0 2
91101: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
91102: LD_INT 0
91104: PPUSH
// end ;
91105: LD_VAR 0 4
91109: RET
// export function SOS_Command ( cmd ) ; begin
91110: LD_INT 0
91112: PPUSH
// end ;
91113: LD_VAR 0 2
91117: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
91118: LD_VAR 0 1
91122: PUSH
91123: LD_INT 255
91125: EQUAL
91126: PUSH
91127: LD_VAR 0 2
91131: PPUSH
91132: CALL_OW 264
91136: PUSH
91137: LD_INT 14
91139: PUSH
91140: LD_INT 53
91142: PUSH
91143: EMPTY
91144: LIST
91145: LIST
91146: IN
91147: AND
91148: PUSH
91149: LD_VAR 0 4
91153: PPUSH
91154: LD_VAR 0 5
91158: PPUSH
91159: CALL_OW 488
91163: AND
91164: IFFALSE 91188
// CutTreeXYR ( unit , x , y , 12 ) ;
91166: LD_VAR 0 2
91170: PPUSH
91171: LD_VAR 0 4
91175: PPUSH
91176: LD_VAR 0 5
91180: PPUSH
91181: LD_INT 12
91183: PPUSH
91184: CALL 91191 0 4
// end ;
91188: PPOPN 5
91190: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
91191: LD_INT 0
91193: PPUSH
91194: PPUSH
91195: PPUSH
91196: PPUSH
91197: PPUSH
91198: PPUSH
91199: PPUSH
91200: PPUSH
91201: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
91202: LD_VAR 0 1
91206: NOT
91207: PUSH
91208: LD_VAR 0 2
91212: PPUSH
91213: LD_VAR 0 3
91217: PPUSH
91218: CALL_OW 488
91222: NOT
91223: OR
91224: PUSH
91225: LD_VAR 0 4
91229: NOT
91230: OR
91231: IFFALSE 91235
// exit ;
91233: GO 91575
// list := [ ] ;
91235: LD_ADDR_VAR 0 13
91239: PUSH
91240: EMPTY
91241: ST_TO_ADDR
// if x - r < 0 then
91242: LD_VAR 0 2
91246: PUSH
91247: LD_VAR 0 4
91251: MINUS
91252: PUSH
91253: LD_INT 0
91255: LESS
91256: IFFALSE 91268
// min_x := 0 else
91258: LD_ADDR_VAR 0 7
91262: PUSH
91263: LD_INT 0
91265: ST_TO_ADDR
91266: GO 91284
// min_x := x - r ;
91268: LD_ADDR_VAR 0 7
91272: PUSH
91273: LD_VAR 0 2
91277: PUSH
91278: LD_VAR 0 4
91282: MINUS
91283: ST_TO_ADDR
// if y - r < 0 then
91284: LD_VAR 0 3
91288: PUSH
91289: LD_VAR 0 4
91293: MINUS
91294: PUSH
91295: LD_INT 0
91297: LESS
91298: IFFALSE 91310
// min_y := 0 else
91300: LD_ADDR_VAR 0 8
91304: PUSH
91305: LD_INT 0
91307: ST_TO_ADDR
91308: GO 91326
// min_y := y - r ;
91310: LD_ADDR_VAR 0 8
91314: PUSH
91315: LD_VAR 0 3
91319: PUSH
91320: LD_VAR 0 4
91324: MINUS
91325: ST_TO_ADDR
// max_x := x + r ;
91326: LD_ADDR_VAR 0 9
91330: PUSH
91331: LD_VAR 0 2
91335: PUSH
91336: LD_VAR 0 4
91340: PLUS
91341: ST_TO_ADDR
// max_y := y + r ;
91342: LD_ADDR_VAR 0 10
91346: PUSH
91347: LD_VAR 0 3
91351: PUSH
91352: LD_VAR 0 4
91356: PLUS
91357: ST_TO_ADDR
// for _x = min_x to max_x do
91358: LD_ADDR_VAR 0 11
91362: PUSH
91363: DOUBLE
91364: LD_VAR 0 7
91368: DEC
91369: ST_TO_ADDR
91370: LD_VAR 0 9
91374: PUSH
91375: FOR_TO
91376: IFFALSE 91493
// for _y = min_y to max_y do
91378: LD_ADDR_VAR 0 12
91382: PUSH
91383: DOUBLE
91384: LD_VAR 0 8
91388: DEC
91389: ST_TO_ADDR
91390: LD_VAR 0 10
91394: PUSH
91395: FOR_TO
91396: IFFALSE 91489
// begin if not ValidHex ( _x , _y ) then
91398: LD_VAR 0 11
91402: PPUSH
91403: LD_VAR 0 12
91407: PPUSH
91408: CALL_OW 488
91412: NOT
91413: IFFALSE 91417
// continue ;
91415: GO 91395
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
91417: LD_VAR 0 11
91421: PPUSH
91422: LD_VAR 0 12
91426: PPUSH
91427: CALL_OW 351
91431: PUSH
91432: LD_VAR 0 11
91436: PPUSH
91437: LD_VAR 0 12
91441: PPUSH
91442: CALL_OW 554
91446: AND
91447: IFFALSE 91487
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
91449: LD_ADDR_VAR 0 13
91453: PUSH
91454: LD_VAR 0 13
91458: PPUSH
91459: LD_VAR 0 13
91463: PUSH
91464: LD_INT 1
91466: PLUS
91467: PPUSH
91468: LD_VAR 0 11
91472: PUSH
91473: LD_VAR 0 12
91477: PUSH
91478: EMPTY
91479: LIST
91480: LIST
91481: PPUSH
91482: CALL_OW 2
91486: ST_TO_ADDR
// end ;
91487: GO 91395
91489: POP
91490: POP
91491: GO 91375
91493: POP
91494: POP
// if not list then
91495: LD_VAR 0 13
91499: NOT
91500: IFFALSE 91504
// exit ;
91502: GO 91575
// for i in list do
91504: LD_ADDR_VAR 0 6
91508: PUSH
91509: LD_VAR 0 13
91513: PUSH
91514: FOR_IN
91515: IFFALSE 91573
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
91517: LD_VAR 0 1
91521: PPUSH
91522: LD_STRING M
91524: PUSH
91525: LD_VAR 0 6
91529: PUSH
91530: LD_INT 1
91532: ARRAY
91533: PUSH
91534: LD_VAR 0 6
91538: PUSH
91539: LD_INT 2
91541: ARRAY
91542: PUSH
91543: LD_INT 0
91545: PUSH
91546: LD_INT 0
91548: PUSH
91549: LD_INT 0
91551: PUSH
91552: LD_INT 0
91554: PUSH
91555: EMPTY
91556: LIST
91557: LIST
91558: LIST
91559: LIST
91560: LIST
91561: LIST
91562: LIST
91563: PUSH
91564: EMPTY
91565: LIST
91566: PPUSH
91567: CALL_OW 447
91571: GO 91514
91573: POP
91574: POP
// end ; end_of_file
91575: LD_VAR 0 5
91579: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
91580: LD_INT 0
91582: PPUSH
91583: PPUSH
91584: PPUSH
91585: PPUSH
91586: PPUSH
91587: PPUSH
91588: PPUSH
91589: PPUSH
91590: PPUSH
91591: PPUSH
91592: PPUSH
91593: PPUSH
91594: PPUSH
91595: PPUSH
91596: PPUSH
91597: PPUSH
91598: PPUSH
91599: PPUSH
91600: PPUSH
91601: PPUSH
91602: PPUSH
91603: PPUSH
91604: PPUSH
91605: PPUSH
91606: PPUSH
91607: PPUSH
91608: PPUSH
91609: PPUSH
91610: PPUSH
91611: PPUSH
91612: PPUSH
91613: PPUSH
91614: PPUSH
91615: PPUSH
// if not list then
91616: LD_VAR 0 1
91620: NOT
91621: IFFALSE 91625
// exit ;
91623: GO 96284
// base := list [ 1 ] ;
91625: LD_ADDR_VAR 0 3
91629: PUSH
91630: LD_VAR 0 1
91634: PUSH
91635: LD_INT 1
91637: ARRAY
91638: ST_TO_ADDR
// group := list [ 2 ] ;
91639: LD_ADDR_VAR 0 4
91643: PUSH
91644: LD_VAR 0 1
91648: PUSH
91649: LD_INT 2
91651: ARRAY
91652: ST_TO_ADDR
// path := list [ 3 ] ;
91653: LD_ADDR_VAR 0 5
91657: PUSH
91658: LD_VAR 0 1
91662: PUSH
91663: LD_INT 3
91665: ARRAY
91666: ST_TO_ADDR
// flags := list [ 4 ] ;
91667: LD_ADDR_VAR 0 6
91671: PUSH
91672: LD_VAR 0 1
91676: PUSH
91677: LD_INT 4
91679: ARRAY
91680: ST_TO_ADDR
// mined := [ ] ;
91681: LD_ADDR_VAR 0 27
91685: PUSH
91686: EMPTY
91687: ST_TO_ADDR
// bombed := [ ] ;
91688: LD_ADDR_VAR 0 28
91692: PUSH
91693: EMPTY
91694: ST_TO_ADDR
// healers := [ ] ;
91695: LD_ADDR_VAR 0 31
91699: PUSH
91700: EMPTY
91701: ST_TO_ADDR
// to_heal := [ ] ;
91702: LD_ADDR_VAR 0 30
91706: PUSH
91707: EMPTY
91708: ST_TO_ADDR
// repairs := [ ] ;
91709: LD_ADDR_VAR 0 33
91713: PUSH
91714: EMPTY
91715: ST_TO_ADDR
// to_repair := [ ] ;
91716: LD_ADDR_VAR 0 32
91720: PUSH
91721: EMPTY
91722: ST_TO_ADDR
// if not group or not path then
91723: LD_VAR 0 4
91727: NOT
91728: PUSH
91729: LD_VAR 0 5
91733: NOT
91734: OR
91735: IFFALSE 91739
// exit ;
91737: GO 96284
// side := GetSide ( group [ 1 ] ) ;
91739: LD_ADDR_VAR 0 35
91743: PUSH
91744: LD_VAR 0 4
91748: PUSH
91749: LD_INT 1
91751: ARRAY
91752: PPUSH
91753: CALL_OW 255
91757: ST_TO_ADDR
// if flags then
91758: LD_VAR 0 6
91762: IFFALSE 91906
// begin f_ignore_area := flags [ 1 ] ;
91764: LD_ADDR_VAR 0 17
91768: PUSH
91769: LD_VAR 0 6
91773: PUSH
91774: LD_INT 1
91776: ARRAY
91777: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
91778: LD_ADDR_VAR 0 18
91782: PUSH
91783: LD_VAR 0 6
91787: PUSH
91788: LD_INT 2
91790: ARRAY
91791: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
91792: LD_ADDR_VAR 0 19
91796: PUSH
91797: LD_VAR 0 6
91801: PUSH
91802: LD_INT 3
91804: ARRAY
91805: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
91806: LD_ADDR_VAR 0 20
91810: PUSH
91811: LD_VAR 0 6
91815: PUSH
91816: LD_INT 4
91818: ARRAY
91819: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
91820: LD_ADDR_VAR 0 21
91824: PUSH
91825: LD_VAR 0 6
91829: PUSH
91830: LD_INT 5
91832: ARRAY
91833: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
91834: LD_ADDR_VAR 0 22
91838: PUSH
91839: LD_VAR 0 6
91843: PUSH
91844: LD_INT 6
91846: ARRAY
91847: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
91848: LD_ADDR_VAR 0 23
91852: PUSH
91853: LD_VAR 0 6
91857: PUSH
91858: LD_INT 7
91860: ARRAY
91861: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
91862: LD_ADDR_VAR 0 24
91866: PUSH
91867: LD_VAR 0 6
91871: PUSH
91872: LD_INT 8
91874: ARRAY
91875: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
91876: LD_ADDR_VAR 0 25
91880: PUSH
91881: LD_VAR 0 6
91885: PUSH
91886: LD_INT 9
91888: ARRAY
91889: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
91890: LD_ADDR_VAR 0 26
91894: PUSH
91895: LD_VAR 0 6
91899: PUSH
91900: LD_INT 10
91902: ARRAY
91903: ST_TO_ADDR
// end else
91904: GO 91986
// begin f_ignore_area := false ;
91906: LD_ADDR_VAR 0 17
91910: PUSH
91911: LD_INT 0
91913: ST_TO_ADDR
// f_capture := false ;
91914: LD_ADDR_VAR 0 18
91918: PUSH
91919: LD_INT 0
91921: ST_TO_ADDR
// f_ignore_civ := false ;
91922: LD_ADDR_VAR 0 19
91926: PUSH
91927: LD_INT 0
91929: ST_TO_ADDR
// f_murder := false ;
91930: LD_ADDR_VAR 0 20
91934: PUSH
91935: LD_INT 0
91937: ST_TO_ADDR
// f_mines := false ;
91938: LD_ADDR_VAR 0 21
91942: PUSH
91943: LD_INT 0
91945: ST_TO_ADDR
// f_repair := false ;
91946: LD_ADDR_VAR 0 22
91950: PUSH
91951: LD_INT 0
91953: ST_TO_ADDR
// f_heal := false ;
91954: LD_ADDR_VAR 0 23
91958: PUSH
91959: LD_INT 0
91961: ST_TO_ADDR
// f_spacetime := false ;
91962: LD_ADDR_VAR 0 24
91966: PUSH
91967: LD_INT 0
91969: ST_TO_ADDR
// f_attack_depot := false ;
91970: LD_ADDR_VAR 0 25
91974: PUSH
91975: LD_INT 0
91977: ST_TO_ADDR
// f_crawl := false ;
91978: LD_ADDR_VAR 0 26
91982: PUSH
91983: LD_INT 0
91985: ST_TO_ADDR
// end ; if f_heal then
91986: LD_VAR 0 23
91990: IFFALSE 92017
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
91992: LD_ADDR_VAR 0 31
91996: PUSH
91997: LD_VAR 0 4
92001: PPUSH
92002: LD_INT 25
92004: PUSH
92005: LD_INT 4
92007: PUSH
92008: EMPTY
92009: LIST
92010: LIST
92011: PPUSH
92012: CALL_OW 72
92016: ST_TO_ADDR
// if f_repair then
92017: LD_VAR 0 22
92021: IFFALSE 92048
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
92023: LD_ADDR_VAR 0 33
92027: PUSH
92028: LD_VAR 0 4
92032: PPUSH
92033: LD_INT 25
92035: PUSH
92036: LD_INT 3
92038: PUSH
92039: EMPTY
92040: LIST
92041: LIST
92042: PPUSH
92043: CALL_OW 72
92047: ST_TO_ADDR
// units_path := [ ] ;
92048: LD_ADDR_VAR 0 16
92052: PUSH
92053: EMPTY
92054: ST_TO_ADDR
// for i = 1 to group do
92055: LD_ADDR_VAR 0 7
92059: PUSH
92060: DOUBLE
92061: LD_INT 1
92063: DEC
92064: ST_TO_ADDR
92065: LD_VAR 0 4
92069: PUSH
92070: FOR_TO
92071: IFFALSE 92100
// units_path := Replace ( units_path , i , path ) ;
92073: LD_ADDR_VAR 0 16
92077: PUSH
92078: LD_VAR 0 16
92082: PPUSH
92083: LD_VAR 0 7
92087: PPUSH
92088: LD_VAR 0 5
92092: PPUSH
92093: CALL_OW 1
92097: ST_TO_ADDR
92098: GO 92070
92100: POP
92101: POP
// repeat for i = group downto 1 do
92102: LD_ADDR_VAR 0 7
92106: PUSH
92107: DOUBLE
92108: LD_VAR 0 4
92112: INC
92113: ST_TO_ADDR
92114: LD_INT 1
92116: PUSH
92117: FOR_DOWNTO
92118: IFFALSE 96240
// begin wait ( 5 ) ;
92120: LD_INT 5
92122: PPUSH
92123: CALL_OW 67
// tmp := [ ] ;
92127: LD_ADDR_VAR 0 14
92131: PUSH
92132: EMPTY
92133: ST_TO_ADDR
// attacking := false ;
92134: LD_ADDR_VAR 0 29
92138: PUSH
92139: LD_INT 0
92141: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
92142: LD_VAR 0 4
92146: PUSH
92147: LD_VAR 0 7
92151: ARRAY
92152: PPUSH
92153: CALL_OW 301
92157: PUSH
92158: LD_VAR 0 4
92162: PUSH
92163: LD_VAR 0 7
92167: ARRAY
92168: NOT
92169: OR
92170: IFFALSE 92279
// begin if GetType ( group [ i ] ) = unit_human then
92172: LD_VAR 0 4
92176: PUSH
92177: LD_VAR 0 7
92181: ARRAY
92182: PPUSH
92183: CALL_OW 247
92187: PUSH
92188: LD_INT 1
92190: EQUAL
92191: IFFALSE 92237
// begin to_heal := to_heal diff group [ i ] ;
92193: LD_ADDR_VAR 0 30
92197: PUSH
92198: LD_VAR 0 30
92202: PUSH
92203: LD_VAR 0 4
92207: PUSH
92208: LD_VAR 0 7
92212: ARRAY
92213: DIFF
92214: ST_TO_ADDR
// healers := healers diff group [ i ] ;
92215: LD_ADDR_VAR 0 31
92219: PUSH
92220: LD_VAR 0 31
92224: PUSH
92225: LD_VAR 0 4
92229: PUSH
92230: LD_VAR 0 7
92234: ARRAY
92235: DIFF
92236: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
92237: LD_ADDR_VAR 0 4
92241: PUSH
92242: LD_VAR 0 4
92246: PPUSH
92247: LD_VAR 0 7
92251: PPUSH
92252: CALL_OW 3
92256: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
92257: LD_ADDR_VAR 0 16
92261: PUSH
92262: LD_VAR 0 16
92266: PPUSH
92267: LD_VAR 0 7
92271: PPUSH
92272: CALL_OW 3
92276: ST_TO_ADDR
// continue ;
92277: GO 92117
// end ; if f_repair then
92279: LD_VAR 0 22
92283: IFFALSE 92772
// begin if GetType ( group [ i ] ) = unit_vehicle then
92285: LD_VAR 0 4
92289: PUSH
92290: LD_VAR 0 7
92294: ARRAY
92295: PPUSH
92296: CALL_OW 247
92300: PUSH
92301: LD_INT 2
92303: EQUAL
92304: IFFALSE 92494
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
92306: LD_VAR 0 4
92310: PUSH
92311: LD_VAR 0 7
92315: ARRAY
92316: PPUSH
92317: CALL_OW 256
92321: PUSH
92322: LD_INT 700
92324: LESS
92325: PUSH
92326: LD_VAR 0 4
92330: PUSH
92331: LD_VAR 0 7
92335: ARRAY
92336: PUSH
92337: LD_VAR 0 32
92341: IN
92342: NOT
92343: AND
92344: IFFALSE 92368
// to_repair := to_repair union group [ i ] ;
92346: LD_ADDR_VAR 0 32
92350: PUSH
92351: LD_VAR 0 32
92355: PUSH
92356: LD_VAR 0 4
92360: PUSH
92361: LD_VAR 0 7
92365: ARRAY
92366: UNION
92367: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
92368: LD_VAR 0 4
92372: PUSH
92373: LD_VAR 0 7
92377: ARRAY
92378: PPUSH
92379: CALL_OW 256
92383: PUSH
92384: LD_INT 1000
92386: EQUAL
92387: PUSH
92388: LD_VAR 0 4
92392: PUSH
92393: LD_VAR 0 7
92397: ARRAY
92398: PUSH
92399: LD_VAR 0 32
92403: IN
92404: AND
92405: IFFALSE 92429
// to_repair := to_repair diff group [ i ] ;
92407: LD_ADDR_VAR 0 32
92411: PUSH
92412: LD_VAR 0 32
92416: PUSH
92417: LD_VAR 0 4
92421: PUSH
92422: LD_VAR 0 7
92426: ARRAY
92427: DIFF
92428: ST_TO_ADDR
// if group [ i ] in to_repair then
92429: LD_VAR 0 4
92433: PUSH
92434: LD_VAR 0 7
92438: ARRAY
92439: PUSH
92440: LD_VAR 0 32
92444: IN
92445: IFFALSE 92492
// begin if not IsInArea ( group [ i ] , f_repair ) then
92447: LD_VAR 0 4
92451: PUSH
92452: LD_VAR 0 7
92456: ARRAY
92457: PPUSH
92458: LD_VAR 0 22
92462: PPUSH
92463: CALL_OW 308
92467: NOT
92468: IFFALSE 92490
// ComMoveToArea ( group [ i ] , f_repair ) ;
92470: LD_VAR 0 4
92474: PUSH
92475: LD_VAR 0 7
92479: ARRAY
92480: PPUSH
92481: LD_VAR 0 22
92485: PPUSH
92486: CALL_OW 113
// continue ;
92490: GO 92117
// end ; end else
92492: GO 92772
// if group [ i ] in repairs then
92494: LD_VAR 0 4
92498: PUSH
92499: LD_VAR 0 7
92503: ARRAY
92504: PUSH
92505: LD_VAR 0 33
92509: IN
92510: IFFALSE 92772
// begin if IsInUnit ( group [ i ] ) then
92512: LD_VAR 0 4
92516: PUSH
92517: LD_VAR 0 7
92521: ARRAY
92522: PPUSH
92523: CALL_OW 310
92527: IFFALSE 92595
// begin z := IsInUnit ( group [ i ] ) ;
92529: LD_ADDR_VAR 0 13
92533: PUSH
92534: LD_VAR 0 4
92538: PUSH
92539: LD_VAR 0 7
92543: ARRAY
92544: PPUSH
92545: CALL_OW 310
92549: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
92550: LD_VAR 0 13
92554: PUSH
92555: LD_VAR 0 32
92559: IN
92560: PUSH
92561: LD_VAR 0 13
92565: PPUSH
92566: LD_VAR 0 22
92570: PPUSH
92571: CALL_OW 308
92575: AND
92576: IFFALSE 92593
// ComExitVehicle ( group [ i ] ) ;
92578: LD_VAR 0 4
92582: PUSH
92583: LD_VAR 0 7
92587: ARRAY
92588: PPUSH
92589: CALL_OW 121
// end else
92593: GO 92772
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
92595: LD_ADDR_VAR 0 13
92599: PUSH
92600: LD_VAR 0 4
92604: PPUSH
92605: LD_INT 95
92607: PUSH
92608: LD_VAR 0 22
92612: PUSH
92613: EMPTY
92614: LIST
92615: LIST
92616: PUSH
92617: LD_INT 58
92619: PUSH
92620: EMPTY
92621: LIST
92622: PUSH
92623: EMPTY
92624: LIST
92625: LIST
92626: PPUSH
92627: CALL_OW 72
92631: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
92632: LD_VAR 0 4
92636: PUSH
92637: LD_VAR 0 7
92641: ARRAY
92642: PPUSH
92643: CALL_OW 314
92647: NOT
92648: IFFALSE 92770
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
92650: LD_ADDR_VAR 0 10
92654: PUSH
92655: LD_VAR 0 13
92659: PPUSH
92660: LD_VAR 0 4
92664: PUSH
92665: LD_VAR 0 7
92669: ARRAY
92670: PPUSH
92671: CALL_OW 74
92675: ST_TO_ADDR
// if not x then
92676: LD_VAR 0 10
92680: NOT
92681: IFFALSE 92685
// continue ;
92683: GO 92117
// if GetLives ( x ) < 1000 then
92685: LD_VAR 0 10
92689: PPUSH
92690: CALL_OW 256
92694: PUSH
92695: LD_INT 1000
92697: LESS
92698: IFFALSE 92722
// ComRepairVehicle ( group [ i ] , x ) else
92700: LD_VAR 0 4
92704: PUSH
92705: LD_VAR 0 7
92709: ARRAY
92710: PPUSH
92711: LD_VAR 0 10
92715: PPUSH
92716: CALL_OW 129
92720: GO 92770
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
92722: LD_VAR 0 23
92726: PUSH
92727: LD_VAR 0 4
92731: PUSH
92732: LD_VAR 0 7
92736: ARRAY
92737: PPUSH
92738: CALL_OW 256
92742: PUSH
92743: LD_INT 1000
92745: LESS
92746: AND
92747: NOT
92748: IFFALSE 92770
// ComEnterUnit ( group [ i ] , x ) ;
92750: LD_VAR 0 4
92754: PUSH
92755: LD_VAR 0 7
92759: ARRAY
92760: PPUSH
92761: LD_VAR 0 10
92765: PPUSH
92766: CALL_OW 120
// end ; continue ;
92770: GO 92117
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
92772: LD_VAR 0 23
92776: PUSH
92777: LD_VAR 0 4
92781: PUSH
92782: LD_VAR 0 7
92786: ARRAY
92787: PPUSH
92788: CALL_OW 247
92792: PUSH
92793: LD_INT 1
92795: EQUAL
92796: AND
92797: IFFALSE 93275
// begin if group [ i ] in healers then
92799: LD_VAR 0 4
92803: PUSH
92804: LD_VAR 0 7
92808: ARRAY
92809: PUSH
92810: LD_VAR 0 31
92814: IN
92815: IFFALSE 93088
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
92817: LD_VAR 0 4
92821: PUSH
92822: LD_VAR 0 7
92826: ARRAY
92827: PPUSH
92828: LD_VAR 0 23
92832: PPUSH
92833: CALL_OW 308
92837: NOT
92838: PUSH
92839: LD_VAR 0 4
92843: PUSH
92844: LD_VAR 0 7
92848: ARRAY
92849: PPUSH
92850: CALL_OW 314
92854: NOT
92855: AND
92856: IFFALSE 92880
// ComMoveToArea ( group [ i ] , f_heal ) else
92858: LD_VAR 0 4
92862: PUSH
92863: LD_VAR 0 7
92867: ARRAY
92868: PPUSH
92869: LD_VAR 0 23
92873: PPUSH
92874: CALL_OW 113
92878: GO 93086
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
92880: LD_VAR 0 4
92884: PUSH
92885: LD_VAR 0 7
92889: ARRAY
92890: PPUSH
92891: CALL 46792 0 1
92895: PPUSH
92896: CALL_OW 256
92900: PUSH
92901: LD_INT 1000
92903: EQUAL
92904: IFFALSE 92923
// ComStop ( group [ i ] ) else
92906: LD_VAR 0 4
92910: PUSH
92911: LD_VAR 0 7
92915: ARRAY
92916: PPUSH
92917: CALL_OW 141
92921: GO 93086
// if not HasTask ( group [ i ] ) and to_heal then
92923: LD_VAR 0 4
92927: PUSH
92928: LD_VAR 0 7
92932: ARRAY
92933: PPUSH
92934: CALL_OW 314
92938: NOT
92939: PUSH
92940: LD_VAR 0 30
92944: AND
92945: IFFALSE 93086
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
92947: LD_ADDR_VAR 0 13
92951: PUSH
92952: LD_VAR 0 30
92956: PPUSH
92957: LD_INT 3
92959: PUSH
92960: LD_INT 54
92962: PUSH
92963: EMPTY
92964: LIST
92965: PUSH
92966: EMPTY
92967: LIST
92968: LIST
92969: PPUSH
92970: CALL_OW 72
92974: PPUSH
92975: LD_VAR 0 4
92979: PUSH
92980: LD_VAR 0 7
92984: ARRAY
92985: PPUSH
92986: CALL_OW 74
92990: ST_TO_ADDR
// if z then
92991: LD_VAR 0 13
92995: IFFALSE 93086
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
92997: LD_INT 91
92999: PUSH
93000: LD_VAR 0 13
93004: PUSH
93005: LD_INT 10
93007: PUSH
93008: EMPTY
93009: LIST
93010: LIST
93011: LIST
93012: PUSH
93013: LD_INT 81
93015: PUSH
93016: LD_VAR 0 13
93020: PPUSH
93021: CALL_OW 255
93025: PUSH
93026: EMPTY
93027: LIST
93028: LIST
93029: PUSH
93030: EMPTY
93031: LIST
93032: LIST
93033: PPUSH
93034: CALL_OW 69
93038: PUSH
93039: LD_INT 0
93041: EQUAL
93042: IFFALSE 93066
// ComHeal ( group [ i ] , z ) else
93044: LD_VAR 0 4
93048: PUSH
93049: LD_VAR 0 7
93053: ARRAY
93054: PPUSH
93055: LD_VAR 0 13
93059: PPUSH
93060: CALL_OW 128
93064: GO 93086
// ComMoveToArea ( group [ i ] , f_heal ) ;
93066: LD_VAR 0 4
93070: PUSH
93071: LD_VAR 0 7
93075: ARRAY
93076: PPUSH
93077: LD_VAR 0 23
93081: PPUSH
93082: CALL_OW 113
// end ; continue ;
93086: GO 92117
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
93088: LD_VAR 0 4
93092: PUSH
93093: LD_VAR 0 7
93097: ARRAY
93098: PPUSH
93099: CALL_OW 256
93103: PUSH
93104: LD_INT 700
93106: LESS
93107: PUSH
93108: LD_VAR 0 4
93112: PUSH
93113: LD_VAR 0 7
93117: ARRAY
93118: PUSH
93119: LD_VAR 0 30
93123: IN
93124: NOT
93125: AND
93126: IFFALSE 93150
// to_heal := to_heal union group [ i ] ;
93128: LD_ADDR_VAR 0 30
93132: PUSH
93133: LD_VAR 0 30
93137: PUSH
93138: LD_VAR 0 4
93142: PUSH
93143: LD_VAR 0 7
93147: ARRAY
93148: UNION
93149: ST_TO_ADDR
// if group [ i ] in to_heal then
93150: LD_VAR 0 4
93154: PUSH
93155: LD_VAR 0 7
93159: ARRAY
93160: PUSH
93161: LD_VAR 0 30
93165: IN
93166: IFFALSE 93275
// begin if GetLives ( group [ i ] ) = 1000 then
93168: LD_VAR 0 4
93172: PUSH
93173: LD_VAR 0 7
93177: ARRAY
93178: PPUSH
93179: CALL_OW 256
93183: PUSH
93184: LD_INT 1000
93186: EQUAL
93187: IFFALSE 93213
// to_heal := to_heal diff group [ i ] else
93189: LD_ADDR_VAR 0 30
93193: PUSH
93194: LD_VAR 0 30
93198: PUSH
93199: LD_VAR 0 4
93203: PUSH
93204: LD_VAR 0 7
93208: ARRAY
93209: DIFF
93210: ST_TO_ADDR
93211: GO 93275
// begin if not IsInArea ( group [ i ] , to_heal ) then
93213: LD_VAR 0 4
93217: PUSH
93218: LD_VAR 0 7
93222: ARRAY
93223: PPUSH
93224: LD_VAR 0 30
93228: PPUSH
93229: CALL_OW 308
93233: NOT
93234: IFFALSE 93258
// ComMoveToArea ( group [ i ] , f_heal ) else
93236: LD_VAR 0 4
93240: PUSH
93241: LD_VAR 0 7
93245: ARRAY
93246: PPUSH
93247: LD_VAR 0 23
93251: PPUSH
93252: CALL_OW 113
93256: GO 93273
// ComHold ( group [ i ] ) ;
93258: LD_VAR 0 4
93262: PUSH
93263: LD_VAR 0 7
93267: ARRAY
93268: PPUSH
93269: CALL_OW 140
// continue ;
93273: GO 92117
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
93275: LD_VAR 0 4
93279: PUSH
93280: LD_VAR 0 7
93284: ARRAY
93285: PPUSH
93286: LD_INT 10
93288: PPUSH
93289: CALL 45212 0 2
93293: NOT
93294: PUSH
93295: LD_VAR 0 16
93299: PUSH
93300: LD_VAR 0 7
93304: ARRAY
93305: PUSH
93306: EMPTY
93307: EQUAL
93308: NOT
93309: AND
93310: IFFALSE 93576
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
93312: LD_VAR 0 4
93316: PUSH
93317: LD_VAR 0 7
93321: ARRAY
93322: PPUSH
93323: CALL_OW 262
93327: PUSH
93328: LD_INT 1
93330: PUSH
93331: LD_INT 2
93333: PUSH
93334: EMPTY
93335: LIST
93336: LIST
93337: IN
93338: IFFALSE 93379
// if GetFuel ( group [ i ] ) < 10 then
93340: LD_VAR 0 4
93344: PUSH
93345: LD_VAR 0 7
93349: ARRAY
93350: PPUSH
93351: CALL_OW 261
93355: PUSH
93356: LD_INT 10
93358: LESS
93359: IFFALSE 93379
// SetFuel ( group [ i ] , 12 ) ;
93361: LD_VAR 0 4
93365: PUSH
93366: LD_VAR 0 7
93370: ARRAY
93371: PPUSH
93372: LD_INT 12
93374: PPUSH
93375: CALL_OW 240
// if units_path [ i ] then
93379: LD_VAR 0 16
93383: PUSH
93384: LD_VAR 0 7
93388: ARRAY
93389: IFFALSE 93574
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
93391: LD_VAR 0 4
93395: PUSH
93396: LD_VAR 0 7
93400: ARRAY
93401: PPUSH
93402: LD_VAR 0 16
93406: PUSH
93407: LD_VAR 0 7
93411: ARRAY
93412: PUSH
93413: LD_INT 1
93415: ARRAY
93416: PUSH
93417: LD_INT 1
93419: ARRAY
93420: PPUSH
93421: LD_VAR 0 16
93425: PUSH
93426: LD_VAR 0 7
93430: ARRAY
93431: PUSH
93432: LD_INT 1
93434: ARRAY
93435: PUSH
93436: LD_INT 2
93438: ARRAY
93439: PPUSH
93440: CALL_OW 297
93444: PUSH
93445: LD_INT 6
93447: GREATER
93448: IFFALSE 93523
// begin if not HasTask ( group [ i ] ) then
93450: LD_VAR 0 4
93454: PUSH
93455: LD_VAR 0 7
93459: ARRAY
93460: PPUSH
93461: CALL_OW 314
93465: NOT
93466: IFFALSE 93521
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
93468: LD_VAR 0 4
93472: PUSH
93473: LD_VAR 0 7
93477: ARRAY
93478: PPUSH
93479: LD_VAR 0 16
93483: PUSH
93484: LD_VAR 0 7
93488: ARRAY
93489: PUSH
93490: LD_INT 1
93492: ARRAY
93493: PUSH
93494: LD_INT 1
93496: ARRAY
93497: PPUSH
93498: LD_VAR 0 16
93502: PUSH
93503: LD_VAR 0 7
93507: ARRAY
93508: PUSH
93509: LD_INT 1
93511: ARRAY
93512: PUSH
93513: LD_INT 2
93515: ARRAY
93516: PPUSH
93517: CALL_OW 114
// end else
93521: GO 93574
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
93523: LD_ADDR_VAR 0 15
93527: PUSH
93528: LD_VAR 0 16
93532: PUSH
93533: LD_VAR 0 7
93537: ARRAY
93538: PPUSH
93539: LD_INT 1
93541: PPUSH
93542: CALL_OW 3
93546: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
93547: LD_ADDR_VAR 0 16
93551: PUSH
93552: LD_VAR 0 16
93556: PPUSH
93557: LD_VAR 0 7
93561: PPUSH
93562: LD_VAR 0 15
93566: PPUSH
93567: CALL_OW 1
93571: ST_TO_ADDR
// continue ;
93572: GO 92117
// end ; end ; end else
93574: GO 96238
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
93576: LD_ADDR_VAR 0 14
93580: PUSH
93581: LD_INT 81
93583: PUSH
93584: LD_VAR 0 4
93588: PUSH
93589: LD_VAR 0 7
93593: ARRAY
93594: PPUSH
93595: CALL_OW 255
93599: PUSH
93600: EMPTY
93601: LIST
93602: LIST
93603: PPUSH
93604: CALL_OW 69
93608: ST_TO_ADDR
// if not tmp then
93609: LD_VAR 0 14
93613: NOT
93614: IFFALSE 93618
// continue ;
93616: GO 92117
// if f_ignore_area then
93618: LD_VAR 0 17
93622: IFFALSE 93710
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
93624: LD_ADDR_VAR 0 15
93628: PUSH
93629: LD_VAR 0 14
93633: PPUSH
93634: LD_INT 3
93636: PUSH
93637: LD_INT 92
93639: PUSH
93640: LD_VAR 0 17
93644: PUSH
93645: LD_INT 1
93647: ARRAY
93648: PUSH
93649: LD_VAR 0 17
93653: PUSH
93654: LD_INT 2
93656: ARRAY
93657: PUSH
93658: LD_VAR 0 17
93662: PUSH
93663: LD_INT 3
93665: ARRAY
93666: PUSH
93667: EMPTY
93668: LIST
93669: LIST
93670: LIST
93671: LIST
93672: PUSH
93673: EMPTY
93674: LIST
93675: LIST
93676: PPUSH
93677: CALL_OW 72
93681: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
93682: LD_VAR 0 14
93686: PUSH
93687: LD_VAR 0 15
93691: DIFF
93692: IFFALSE 93710
// tmp := tmp diff tmp2 ;
93694: LD_ADDR_VAR 0 14
93698: PUSH
93699: LD_VAR 0 14
93703: PUSH
93704: LD_VAR 0 15
93708: DIFF
93709: ST_TO_ADDR
// end ; if not f_murder then
93710: LD_VAR 0 20
93714: NOT
93715: IFFALSE 93773
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
93717: LD_ADDR_VAR 0 15
93721: PUSH
93722: LD_VAR 0 14
93726: PPUSH
93727: LD_INT 3
93729: PUSH
93730: LD_INT 50
93732: PUSH
93733: EMPTY
93734: LIST
93735: PUSH
93736: EMPTY
93737: LIST
93738: LIST
93739: PPUSH
93740: CALL_OW 72
93744: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
93745: LD_VAR 0 14
93749: PUSH
93750: LD_VAR 0 15
93754: DIFF
93755: IFFALSE 93773
// tmp := tmp diff tmp2 ;
93757: LD_ADDR_VAR 0 14
93761: PUSH
93762: LD_VAR 0 14
93766: PUSH
93767: LD_VAR 0 15
93771: DIFF
93772: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
93773: LD_ADDR_VAR 0 14
93777: PUSH
93778: LD_VAR 0 4
93782: PUSH
93783: LD_VAR 0 7
93787: ARRAY
93788: PPUSH
93789: LD_VAR 0 14
93793: PPUSH
93794: LD_INT 1
93796: PPUSH
93797: LD_INT 1
93799: PPUSH
93800: CALL 18855 0 4
93804: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
93805: LD_VAR 0 4
93809: PUSH
93810: LD_VAR 0 7
93814: ARRAY
93815: PPUSH
93816: CALL_OW 257
93820: PUSH
93821: LD_INT 1
93823: EQUAL
93824: IFFALSE 94272
// begin if WantPlant ( group [ i ] ) then
93826: LD_VAR 0 4
93830: PUSH
93831: LD_VAR 0 7
93835: ARRAY
93836: PPUSH
93837: CALL 18356 0 1
93841: IFFALSE 93845
// continue ;
93843: GO 92117
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
93845: LD_VAR 0 18
93849: PUSH
93850: LD_VAR 0 4
93854: PUSH
93855: LD_VAR 0 7
93859: ARRAY
93860: PPUSH
93861: CALL_OW 310
93865: NOT
93866: AND
93867: PUSH
93868: LD_VAR 0 14
93872: PUSH
93873: LD_INT 1
93875: ARRAY
93876: PUSH
93877: LD_VAR 0 14
93881: PPUSH
93882: LD_INT 21
93884: PUSH
93885: LD_INT 2
93887: PUSH
93888: EMPTY
93889: LIST
93890: LIST
93891: PUSH
93892: LD_INT 58
93894: PUSH
93895: EMPTY
93896: LIST
93897: PUSH
93898: EMPTY
93899: LIST
93900: LIST
93901: PPUSH
93902: CALL_OW 72
93906: IN
93907: AND
93908: IFFALSE 93944
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
93910: LD_VAR 0 4
93914: PUSH
93915: LD_VAR 0 7
93919: ARRAY
93920: PPUSH
93921: LD_VAR 0 14
93925: PUSH
93926: LD_INT 1
93928: ARRAY
93929: PPUSH
93930: CALL_OW 120
// attacking := true ;
93934: LD_ADDR_VAR 0 29
93938: PUSH
93939: LD_INT 1
93941: ST_TO_ADDR
// continue ;
93942: GO 92117
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
93944: LD_VAR 0 26
93948: PUSH
93949: LD_VAR 0 4
93953: PUSH
93954: LD_VAR 0 7
93958: ARRAY
93959: PPUSH
93960: CALL_OW 257
93964: PUSH
93965: LD_INT 1
93967: EQUAL
93968: AND
93969: PUSH
93970: LD_VAR 0 4
93974: PUSH
93975: LD_VAR 0 7
93979: ARRAY
93980: PPUSH
93981: CALL_OW 256
93985: PUSH
93986: LD_INT 800
93988: LESS
93989: AND
93990: PUSH
93991: LD_VAR 0 4
93995: PUSH
93996: LD_VAR 0 7
94000: ARRAY
94001: PPUSH
94002: CALL_OW 318
94006: NOT
94007: AND
94008: IFFALSE 94025
// ComCrawl ( group [ i ] ) ;
94010: LD_VAR 0 4
94014: PUSH
94015: LD_VAR 0 7
94019: ARRAY
94020: PPUSH
94021: CALL_OW 137
// if f_mines then
94025: LD_VAR 0 21
94029: IFFALSE 94272
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
94031: LD_VAR 0 14
94035: PUSH
94036: LD_INT 1
94038: ARRAY
94039: PPUSH
94040: CALL_OW 247
94044: PUSH
94045: LD_INT 3
94047: EQUAL
94048: PUSH
94049: LD_VAR 0 14
94053: PUSH
94054: LD_INT 1
94056: ARRAY
94057: PUSH
94058: LD_VAR 0 27
94062: IN
94063: NOT
94064: AND
94065: IFFALSE 94272
// begin x := GetX ( tmp [ 1 ] ) ;
94067: LD_ADDR_VAR 0 10
94071: PUSH
94072: LD_VAR 0 14
94076: PUSH
94077: LD_INT 1
94079: ARRAY
94080: PPUSH
94081: CALL_OW 250
94085: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
94086: LD_ADDR_VAR 0 11
94090: PUSH
94091: LD_VAR 0 14
94095: PUSH
94096: LD_INT 1
94098: ARRAY
94099: PPUSH
94100: CALL_OW 251
94104: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
94105: LD_ADDR_VAR 0 12
94109: PUSH
94110: LD_VAR 0 4
94114: PUSH
94115: LD_VAR 0 7
94119: ARRAY
94120: PPUSH
94121: CALL 45297 0 1
94125: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
94126: LD_VAR 0 4
94130: PUSH
94131: LD_VAR 0 7
94135: ARRAY
94136: PPUSH
94137: LD_VAR 0 10
94141: PPUSH
94142: LD_VAR 0 11
94146: PPUSH
94147: LD_VAR 0 14
94151: PUSH
94152: LD_INT 1
94154: ARRAY
94155: PPUSH
94156: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
94160: LD_VAR 0 4
94164: PUSH
94165: LD_VAR 0 7
94169: ARRAY
94170: PPUSH
94171: LD_VAR 0 10
94175: PPUSH
94176: LD_VAR 0 12
94180: PPUSH
94181: LD_INT 7
94183: PPUSH
94184: CALL_OW 272
94188: PPUSH
94189: LD_VAR 0 11
94193: PPUSH
94194: LD_VAR 0 12
94198: PPUSH
94199: LD_INT 7
94201: PPUSH
94202: CALL_OW 273
94206: PPUSH
94207: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
94211: LD_VAR 0 4
94215: PUSH
94216: LD_VAR 0 7
94220: ARRAY
94221: PPUSH
94222: LD_INT 71
94224: PPUSH
94225: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
94229: LD_ADDR_VAR 0 27
94233: PUSH
94234: LD_VAR 0 27
94238: PPUSH
94239: LD_VAR 0 27
94243: PUSH
94244: LD_INT 1
94246: PLUS
94247: PPUSH
94248: LD_VAR 0 14
94252: PUSH
94253: LD_INT 1
94255: ARRAY
94256: PPUSH
94257: CALL_OW 1
94261: ST_TO_ADDR
// attacking := true ;
94262: LD_ADDR_VAR 0 29
94266: PUSH
94267: LD_INT 1
94269: ST_TO_ADDR
// continue ;
94270: GO 92117
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
94272: LD_VAR 0 4
94276: PUSH
94277: LD_VAR 0 7
94281: ARRAY
94282: PPUSH
94283: CALL_OW 257
94287: PUSH
94288: LD_INT 17
94290: EQUAL
94291: PUSH
94292: LD_VAR 0 4
94296: PUSH
94297: LD_VAR 0 7
94301: ARRAY
94302: PPUSH
94303: CALL_OW 110
94307: PUSH
94308: LD_INT 71
94310: EQUAL
94311: NOT
94312: AND
94313: IFFALSE 94459
// begin attacking := false ;
94315: LD_ADDR_VAR 0 29
94319: PUSH
94320: LD_INT 0
94322: ST_TO_ADDR
// k := 5 ;
94323: LD_ADDR_VAR 0 9
94327: PUSH
94328: LD_INT 5
94330: ST_TO_ADDR
// if tmp < k then
94331: LD_VAR 0 14
94335: PUSH
94336: LD_VAR 0 9
94340: LESS
94341: IFFALSE 94353
// k := tmp ;
94343: LD_ADDR_VAR 0 9
94347: PUSH
94348: LD_VAR 0 14
94352: ST_TO_ADDR
// for j = 1 to k do
94353: LD_ADDR_VAR 0 8
94357: PUSH
94358: DOUBLE
94359: LD_INT 1
94361: DEC
94362: ST_TO_ADDR
94363: LD_VAR 0 9
94367: PUSH
94368: FOR_TO
94369: IFFALSE 94457
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
94371: LD_VAR 0 14
94375: PUSH
94376: LD_VAR 0 8
94380: ARRAY
94381: PUSH
94382: LD_VAR 0 14
94386: PPUSH
94387: LD_INT 58
94389: PUSH
94390: EMPTY
94391: LIST
94392: PPUSH
94393: CALL_OW 72
94397: IN
94398: NOT
94399: IFFALSE 94455
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
94401: LD_VAR 0 4
94405: PUSH
94406: LD_VAR 0 7
94410: ARRAY
94411: PPUSH
94412: LD_VAR 0 14
94416: PUSH
94417: LD_VAR 0 8
94421: ARRAY
94422: PPUSH
94423: CALL_OW 115
// attacking := true ;
94427: LD_ADDR_VAR 0 29
94431: PUSH
94432: LD_INT 1
94434: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
94435: LD_VAR 0 4
94439: PUSH
94440: LD_VAR 0 7
94444: ARRAY
94445: PPUSH
94446: LD_INT 71
94448: PPUSH
94449: CALL_OW 109
// continue ;
94453: GO 94368
// end ; end ;
94455: GO 94368
94457: POP
94458: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
94459: LD_VAR 0 4
94463: PUSH
94464: LD_VAR 0 7
94468: ARRAY
94469: PPUSH
94470: CALL_OW 257
94474: PUSH
94475: LD_INT 8
94477: EQUAL
94478: PUSH
94479: LD_VAR 0 4
94483: PUSH
94484: LD_VAR 0 7
94488: ARRAY
94489: PPUSH
94490: CALL_OW 264
94494: PUSH
94495: LD_INT 28
94497: PUSH
94498: LD_INT 45
94500: PUSH
94501: LD_INT 7
94503: PUSH
94504: LD_INT 47
94506: PUSH
94507: EMPTY
94508: LIST
94509: LIST
94510: LIST
94511: LIST
94512: IN
94513: OR
94514: IFFALSE 94770
// begin attacking := false ;
94516: LD_ADDR_VAR 0 29
94520: PUSH
94521: LD_INT 0
94523: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
94524: LD_VAR 0 14
94528: PUSH
94529: LD_INT 1
94531: ARRAY
94532: PPUSH
94533: CALL_OW 266
94537: PUSH
94538: LD_INT 32
94540: PUSH
94541: LD_INT 31
94543: PUSH
94544: LD_INT 33
94546: PUSH
94547: LD_INT 4
94549: PUSH
94550: LD_INT 5
94552: PUSH
94553: EMPTY
94554: LIST
94555: LIST
94556: LIST
94557: LIST
94558: LIST
94559: IN
94560: IFFALSE 94746
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
94562: LD_ADDR_VAR 0 9
94566: PUSH
94567: LD_VAR 0 14
94571: PUSH
94572: LD_INT 1
94574: ARRAY
94575: PPUSH
94576: CALL_OW 266
94580: PPUSH
94581: LD_VAR 0 14
94585: PUSH
94586: LD_INT 1
94588: ARRAY
94589: PPUSH
94590: CALL_OW 250
94594: PPUSH
94595: LD_VAR 0 14
94599: PUSH
94600: LD_INT 1
94602: ARRAY
94603: PPUSH
94604: CALL_OW 251
94608: PPUSH
94609: LD_VAR 0 14
94613: PUSH
94614: LD_INT 1
94616: ARRAY
94617: PPUSH
94618: CALL_OW 254
94622: PPUSH
94623: LD_VAR 0 14
94627: PUSH
94628: LD_INT 1
94630: ARRAY
94631: PPUSH
94632: CALL_OW 248
94636: PPUSH
94637: LD_INT 0
94639: PPUSH
94640: CALL 26667 0 6
94644: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
94645: LD_ADDR_VAR 0 8
94649: PUSH
94650: LD_VAR 0 4
94654: PUSH
94655: LD_VAR 0 7
94659: ARRAY
94660: PPUSH
94661: LD_VAR 0 9
94665: PPUSH
94666: CALL 45337 0 2
94670: ST_TO_ADDR
// if j then
94671: LD_VAR 0 8
94675: IFFALSE 94744
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
94677: LD_VAR 0 8
94681: PUSH
94682: LD_INT 1
94684: ARRAY
94685: PPUSH
94686: LD_VAR 0 8
94690: PUSH
94691: LD_INT 2
94693: ARRAY
94694: PPUSH
94695: CALL_OW 488
94699: IFFALSE 94744
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
94701: LD_VAR 0 4
94705: PUSH
94706: LD_VAR 0 7
94710: ARRAY
94711: PPUSH
94712: LD_VAR 0 8
94716: PUSH
94717: LD_INT 1
94719: ARRAY
94720: PPUSH
94721: LD_VAR 0 8
94725: PUSH
94726: LD_INT 2
94728: ARRAY
94729: PPUSH
94730: CALL_OW 116
// attacking := true ;
94734: LD_ADDR_VAR 0 29
94738: PUSH
94739: LD_INT 1
94741: ST_TO_ADDR
// continue ;
94742: GO 92117
// end ; end else
94744: GO 94770
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
94746: LD_VAR 0 4
94750: PUSH
94751: LD_VAR 0 7
94755: ARRAY
94756: PPUSH
94757: LD_VAR 0 14
94761: PUSH
94762: LD_INT 1
94764: ARRAY
94765: PPUSH
94766: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
94770: LD_VAR 0 4
94774: PUSH
94775: LD_VAR 0 7
94779: ARRAY
94780: PPUSH
94781: CALL_OW 265
94785: PUSH
94786: LD_INT 11
94788: EQUAL
94789: IFFALSE 95067
// begin k := 10 ;
94791: LD_ADDR_VAR 0 9
94795: PUSH
94796: LD_INT 10
94798: ST_TO_ADDR
// x := 0 ;
94799: LD_ADDR_VAR 0 10
94803: PUSH
94804: LD_INT 0
94806: ST_TO_ADDR
// if tmp < k then
94807: LD_VAR 0 14
94811: PUSH
94812: LD_VAR 0 9
94816: LESS
94817: IFFALSE 94829
// k := tmp ;
94819: LD_ADDR_VAR 0 9
94823: PUSH
94824: LD_VAR 0 14
94828: ST_TO_ADDR
// for j = k downto 1 do
94829: LD_ADDR_VAR 0 8
94833: PUSH
94834: DOUBLE
94835: LD_VAR 0 9
94839: INC
94840: ST_TO_ADDR
94841: LD_INT 1
94843: PUSH
94844: FOR_DOWNTO
94845: IFFALSE 94920
// begin if GetType ( tmp [ j ] ) = unit_human then
94847: LD_VAR 0 14
94851: PUSH
94852: LD_VAR 0 8
94856: ARRAY
94857: PPUSH
94858: CALL_OW 247
94862: PUSH
94863: LD_INT 1
94865: EQUAL
94866: IFFALSE 94918
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
94868: LD_VAR 0 4
94872: PUSH
94873: LD_VAR 0 7
94877: ARRAY
94878: PPUSH
94879: LD_VAR 0 14
94883: PUSH
94884: LD_VAR 0 8
94888: ARRAY
94889: PPUSH
94890: CALL 45608 0 2
// x := tmp [ j ] ;
94894: LD_ADDR_VAR 0 10
94898: PUSH
94899: LD_VAR 0 14
94903: PUSH
94904: LD_VAR 0 8
94908: ARRAY
94909: ST_TO_ADDR
// attacking := true ;
94910: LD_ADDR_VAR 0 29
94914: PUSH
94915: LD_INT 1
94917: ST_TO_ADDR
// end ; end ;
94918: GO 94844
94920: POP
94921: POP
// if not x then
94922: LD_VAR 0 10
94926: NOT
94927: IFFALSE 95067
// begin attacking := true ;
94929: LD_ADDR_VAR 0 29
94933: PUSH
94934: LD_INT 1
94936: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
94937: LD_VAR 0 4
94941: PUSH
94942: LD_VAR 0 7
94946: ARRAY
94947: PPUSH
94948: CALL_OW 250
94952: PPUSH
94953: LD_VAR 0 4
94957: PUSH
94958: LD_VAR 0 7
94962: ARRAY
94963: PPUSH
94964: CALL_OW 251
94968: PPUSH
94969: CALL_OW 546
94973: PUSH
94974: LD_INT 2
94976: ARRAY
94977: PUSH
94978: LD_VAR 0 14
94982: PUSH
94983: LD_INT 1
94985: ARRAY
94986: PPUSH
94987: CALL_OW 250
94991: PPUSH
94992: LD_VAR 0 14
94996: PUSH
94997: LD_INT 1
94999: ARRAY
95000: PPUSH
95001: CALL_OW 251
95005: PPUSH
95006: CALL_OW 546
95010: PUSH
95011: LD_INT 2
95013: ARRAY
95014: EQUAL
95015: IFFALSE 95043
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
95017: LD_VAR 0 4
95021: PUSH
95022: LD_VAR 0 7
95026: ARRAY
95027: PPUSH
95028: LD_VAR 0 14
95032: PUSH
95033: LD_INT 1
95035: ARRAY
95036: PPUSH
95037: CALL 45608 0 2
95041: GO 95067
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
95043: LD_VAR 0 4
95047: PUSH
95048: LD_VAR 0 7
95052: ARRAY
95053: PPUSH
95054: LD_VAR 0 14
95058: PUSH
95059: LD_INT 1
95061: ARRAY
95062: PPUSH
95063: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
95067: LD_VAR 0 4
95071: PUSH
95072: LD_VAR 0 7
95076: ARRAY
95077: PPUSH
95078: CALL_OW 264
95082: PUSH
95083: LD_INT 29
95085: EQUAL
95086: IFFALSE 95452
// begin if WantsToAttack ( group [ i ] ) in bombed then
95088: LD_VAR 0 4
95092: PUSH
95093: LD_VAR 0 7
95097: ARRAY
95098: PPUSH
95099: CALL_OW 319
95103: PUSH
95104: LD_VAR 0 28
95108: IN
95109: IFFALSE 95113
// continue ;
95111: GO 92117
// k := 8 ;
95113: LD_ADDR_VAR 0 9
95117: PUSH
95118: LD_INT 8
95120: ST_TO_ADDR
// x := 0 ;
95121: LD_ADDR_VAR 0 10
95125: PUSH
95126: LD_INT 0
95128: ST_TO_ADDR
// if tmp < k then
95129: LD_VAR 0 14
95133: PUSH
95134: LD_VAR 0 9
95138: LESS
95139: IFFALSE 95151
// k := tmp ;
95141: LD_ADDR_VAR 0 9
95145: PUSH
95146: LD_VAR 0 14
95150: ST_TO_ADDR
// for j = 1 to k do
95151: LD_ADDR_VAR 0 8
95155: PUSH
95156: DOUBLE
95157: LD_INT 1
95159: DEC
95160: ST_TO_ADDR
95161: LD_VAR 0 9
95165: PUSH
95166: FOR_TO
95167: IFFALSE 95299
// begin if GetType ( tmp [ j ] ) = unit_building then
95169: LD_VAR 0 14
95173: PUSH
95174: LD_VAR 0 8
95178: ARRAY
95179: PPUSH
95180: CALL_OW 247
95184: PUSH
95185: LD_INT 3
95187: EQUAL
95188: IFFALSE 95297
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
95190: LD_VAR 0 14
95194: PUSH
95195: LD_VAR 0 8
95199: ARRAY
95200: PUSH
95201: LD_VAR 0 28
95205: IN
95206: NOT
95207: PUSH
95208: LD_VAR 0 14
95212: PUSH
95213: LD_VAR 0 8
95217: ARRAY
95218: PPUSH
95219: CALL_OW 313
95223: AND
95224: IFFALSE 95297
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
95226: LD_VAR 0 4
95230: PUSH
95231: LD_VAR 0 7
95235: ARRAY
95236: PPUSH
95237: LD_VAR 0 14
95241: PUSH
95242: LD_VAR 0 8
95246: ARRAY
95247: PPUSH
95248: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
95252: LD_ADDR_VAR 0 28
95256: PUSH
95257: LD_VAR 0 28
95261: PPUSH
95262: LD_VAR 0 28
95266: PUSH
95267: LD_INT 1
95269: PLUS
95270: PPUSH
95271: LD_VAR 0 14
95275: PUSH
95276: LD_VAR 0 8
95280: ARRAY
95281: PPUSH
95282: CALL_OW 1
95286: ST_TO_ADDR
// attacking := true ;
95287: LD_ADDR_VAR 0 29
95291: PUSH
95292: LD_INT 1
95294: ST_TO_ADDR
// break ;
95295: GO 95299
// end ; end ;
95297: GO 95166
95299: POP
95300: POP
// if not attacking and f_attack_depot then
95301: LD_VAR 0 29
95305: NOT
95306: PUSH
95307: LD_VAR 0 25
95311: AND
95312: IFFALSE 95407
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
95314: LD_ADDR_VAR 0 13
95318: PUSH
95319: LD_VAR 0 14
95323: PPUSH
95324: LD_INT 2
95326: PUSH
95327: LD_INT 30
95329: PUSH
95330: LD_INT 0
95332: PUSH
95333: EMPTY
95334: LIST
95335: LIST
95336: PUSH
95337: LD_INT 30
95339: PUSH
95340: LD_INT 1
95342: PUSH
95343: EMPTY
95344: LIST
95345: LIST
95346: PUSH
95347: EMPTY
95348: LIST
95349: LIST
95350: LIST
95351: PPUSH
95352: CALL_OW 72
95356: ST_TO_ADDR
// if z then
95357: LD_VAR 0 13
95361: IFFALSE 95407
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
95363: LD_VAR 0 4
95367: PUSH
95368: LD_VAR 0 7
95372: ARRAY
95373: PPUSH
95374: LD_VAR 0 13
95378: PPUSH
95379: LD_VAR 0 4
95383: PUSH
95384: LD_VAR 0 7
95388: ARRAY
95389: PPUSH
95390: CALL_OW 74
95394: PPUSH
95395: CALL_OW 115
// attacking := true ;
95399: LD_ADDR_VAR 0 29
95403: PUSH
95404: LD_INT 1
95406: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
95407: LD_VAR 0 4
95411: PUSH
95412: LD_VAR 0 7
95416: ARRAY
95417: PPUSH
95418: CALL_OW 256
95422: PUSH
95423: LD_INT 500
95425: LESS
95426: IFFALSE 95452
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
95428: LD_VAR 0 4
95432: PUSH
95433: LD_VAR 0 7
95437: ARRAY
95438: PPUSH
95439: LD_VAR 0 14
95443: PUSH
95444: LD_INT 1
95446: ARRAY
95447: PPUSH
95448: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
95452: LD_VAR 0 4
95456: PUSH
95457: LD_VAR 0 7
95461: ARRAY
95462: PPUSH
95463: CALL_OW 264
95467: PUSH
95468: LD_INT 49
95470: EQUAL
95471: IFFALSE 95592
// begin if not HasTask ( group [ i ] ) then
95473: LD_VAR 0 4
95477: PUSH
95478: LD_VAR 0 7
95482: ARRAY
95483: PPUSH
95484: CALL_OW 314
95488: NOT
95489: IFFALSE 95592
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
95491: LD_ADDR_VAR 0 9
95495: PUSH
95496: LD_INT 81
95498: PUSH
95499: LD_VAR 0 4
95503: PUSH
95504: LD_VAR 0 7
95508: ARRAY
95509: PPUSH
95510: CALL_OW 255
95514: PUSH
95515: EMPTY
95516: LIST
95517: LIST
95518: PPUSH
95519: CALL_OW 69
95523: PPUSH
95524: LD_VAR 0 4
95528: PUSH
95529: LD_VAR 0 7
95533: ARRAY
95534: PPUSH
95535: CALL_OW 74
95539: ST_TO_ADDR
// if k then
95540: LD_VAR 0 9
95544: IFFALSE 95592
// if GetDistUnits ( group [ i ] , k ) > 10 then
95546: LD_VAR 0 4
95550: PUSH
95551: LD_VAR 0 7
95555: ARRAY
95556: PPUSH
95557: LD_VAR 0 9
95561: PPUSH
95562: CALL_OW 296
95566: PUSH
95567: LD_INT 10
95569: GREATER
95570: IFFALSE 95592
// ComMoveUnit ( group [ i ] , k ) ;
95572: LD_VAR 0 4
95576: PUSH
95577: LD_VAR 0 7
95581: ARRAY
95582: PPUSH
95583: LD_VAR 0 9
95587: PPUSH
95588: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
95592: LD_VAR 0 4
95596: PUSH
95597: LD_VAR 0 7
95601: ARRAY
95602: PPUSH
95603: CALL_OW 256
95607: PUSH
95608: LD_INT 250
95610: LESS
95611: PUSH
95612: LD_VAR 0 4
95616: PUSH
95617: LD_VAR 0 7
95621: ARRAY
95622: PUSH
95623: LD_INT 21
95625: PUSH
95626: LD_INT 2
95628: PUSH
95629: EMPTY
95630: LIST
95631: LIST
95632: PUSH
95633: LD_INT 23
95635: PUSH
95636: LD_INT 2
95638: PUSH
95639: EMPTY
95640: LIST
95641: LIST
95642: PUSH
95643: EMPTY
95644: LIST
95645: LIST
95646: PPUSH
95647: CALL_OW 69
95651: IN
95652: AND
95653: IFFALSE 95778
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
95655: LD_ADDR_VAR 0 9
95659: PUSH
95660: LD_OWVAR 3
95664: PUSH
95665: LD_VAR 0 4
95669: PUSH
95670: LD_VAR 0 7
95674: ARRAY
95675: DIFF
95676: PPUSH
95677: LD_VAR 0 4
95681: PUSH
95682: LD_VAR 0 7
95686: ARRAY
95687: PPUSH
95688: CALL_OW 74
95692: ST_TO_ADDR
// if not k then
95693: LD_VAR 0 9
95697: NOT
95698: IFFALSE 95702
// continue ;
95700: GO 92117
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
95702: LD_VAR 0 9
95706: PUSH
95707: LD_INT 81
95709: PUSH
95710: LD_VAR 0 4
95714: PUSH
95715: LD_VAR 0 7
95719: ARRAY
95720: PPUSH
95721: CALL_OW 255
95725: PUSH
95726: EMPTY
95727: LIST
95728: LIST
95729: PPUSH
95730: CALL_OW 69
95734: IN
95735: PUSH
95736: LD_VAR 0 9
95740: PPUSH
95741: LD_VAR 0 4
95745: PUSH
95746: LD_VAR 0 7
95750: ARRAY
95751: PPUSH
95752: CALL_OW 296
95756: PUSH
95757: LD_INT 5
95759: LESS
95760: AND
95761: IFFALSE 95778
// ComAutodestruct ( group [ i ] ) ;
95763: LD_VAR 0 4
95767: PUSH
95768: LD_VAR 0 7
95772: ARRAY
95773: PPUSH
95774: CALL 45506 0 1
// end ; if f_attack_depot then
95778: LD_VAR 0 25
95782: IFFALSE 95894
// begin k := 6 ;
95784: LD_ADDR_VAR 0 9
95788: PUSH
95789: LD_INT 6
95791: ST_TO_ADDR
// if tmp < k then
95792: LD_VAR 0 14
95796: PUSH
95797: LD_VAR 0 9
95801: LESS
95802: IFFALSE 95814
// k := tmp ;
95804: LD_ADDR_VAR 0 9
95808: PUSH
95809: LD_VAR 0 14
95813: ST_TO_ADDR
// for j = 1 to k do
95814: LD_ADDR_VAR 0 8
95818: PUSH
95819: DOUBLE
95820: LD_INT 1
95822: DEC
95823: ST_TO_ADDR
95824: LD_VAR 0 9
95828: PUSH
95829: FOR_TO
95830: IFFALSE 95892
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
95832: LD_VAR 0 8
95836: PPUSH
95837: CALL_OW 266
95841: PUSH
95842: LD_INT 0
95844: PUSH
95845: LD_INT 1
95847: PUSH
95848: EMPTY
95849: LIST
95850: LIST
95851: IN
95852: IFFALSE 95890
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
95854: LD_VAR 0 4
95858: PUSH
95859: LD_VAR 0 7
95863: ARRAY
95864: PPUSH
95865: LD_VAR 0 14
95869: PUSH
95870: LD_VAR 0 8
95874: ARRAY
95875: PPUSH
95876: CALL_OW 115
// attacking := true ;
95880: LD_ADDR_VAR 0 29
95884: PUSH
95885: LD_INT 1
95887: ST_TO_ADDR
// break ;
95888: GO 95892
// end ;
95890: GO 95829
95892: POP
95893: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
95894: LD_VAR 0 4
95898: PUSH
95899: LD_VAR 0 7
95903: ARRAY
95904: PPUSH
95905: CALL_OW 302
95909: PUSH
95910: LD_VAR 0 29
95914: NOT
95915: AND
95916: IFFALSE 96238
// begin if GetTag ( group [ i ] ) = 71 then
95918: LD_VAR 0 4
95922: PUSH
95923: LD_VAR 0 7
95927: ARRAY
95928: PPUSH
95929: CALL_OW 110
95933: PUSH
95934: LD_INT 71
95936: EQUAL
95937: IFFALSE 95978
// begin if HasTask ( group [ i ] ) then
95939: LD_VAR 0 4
95943: PUSH
95944: LD_VAR 0 7
95948: ARRAY
95949: PPUSH
95950: CALL_OW 314
95954: IFFALSE 95960
// continue else
95956: GO 92117
95958: GO 95978
// SetTag ( group [ i ] , 0 ) ;
95960: LD_VAR 0 4
95964: PUSH
95965: LD_VAR 0 7
95969: ARRAY
95970: PPUSH
95971: LD_INT 0
95973: PPUSH
95974: CALL_OW 109
// end ; k := 8 ;
95978: LD_ADDR_VAR 0 9
95982: PUSH
95983: LD_INT 8
95985: ST_TO_ADDR
// x := 0 ;
95986: LD_ADDR_VAR 0 10
95990: PUSH
95991: LD_INT 0
95993: ST_TO_ADDR
// if tmp < k then
95994: LD_VAR 0 14
95998: PUSH
95999: LD_VAR 0 9
96003: LESS
96004: IFFALSE 96016
// k := tmp ;
96006: LD_ADDR_VAR 0 9
96010: PUSH
96011: LD_VAR 0 14
96015: ST_TO_ADDR
// for j = 1 to k do
96016: LD_ADDR_VAR 0 8
96020: PUSH
96021: DOUBLE
96022: LD_INT 1
96024: DEC
96025: ST_TO_ADDR
96026: LD_VAR 0 9
96030: PUSH
96031: FOR_TO
96032: IFFALSE 96130
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
96034: LD_VAR 0 14
96038: PUSH
96039: LD_VAR 0 8
96043: ARRAY
96044: PPUSH
96045: CALL_OW 247
96049: PUSH
96050: LD_INT 1
96052: EQUAL
96053: PUSH
96054: LD_VAR 0 14
96058: PUSH
96059: LD_VAR 0 8
96063: ARRAY
96064: PPUSH
96065: CALL_OW 256
96069: PUSH
96070: LD_INT 250
96072: LESS
96073: PUSH
96074: LD_VAR 0 20
96078: AND
96079: PUSH
96080: LD_VAR 0 20
96084: NOT
96085: PUSH
96086: LD_VAR 0 14
96090: PUSH
96091: LD_VAR 0 8
96095: ARRAY
96096: PPUSH
96097: CALL_OW 256
96101: PUSH
96102: LD_INT 250
96104: GREATEREQUAL
96105: AND
96106: OR
96107: AND
96108: IFFALSE 96128
// begin x := tmp [ j ] ;
96110: LD_ADDR_VAR 0 10
96114: PUSH
96115: LD_VAR 0 14
96119: PUSH
96120: LD_VAR 0 8
96124: ARRAY
96125: ST_TO_ADDR
// break ;
96126: GO 96130
// end ;
96128: GO 96031
96130: POP
96131: POP
// if x then
96132: LD_VAR 0 10
96136: IFFALSE 96160
// ComAttackUnit ( group [ i ] , x ) else
96138: LD_VAR 0 4
96142: PUSH
96143: LD_VAR 0 7
96147: ARRAY
96148: PPUSH
96149: LD_VAR 0 10
96153: PPUSH
96154: CALL_OW 115
96158: GO 96184
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
96160: LD_VAR 0 4
96164: PUSH
96165: LD_VAR 0 7
96169: ARRAY
96170: PPUSH
96171: LD_VAR 0 14
96175: PUSH
96176: LD_INT 1
96178: ARRAY
96179: PPUSH
96180: CALL_OW 115
// if not HasTask ( group [ i ] ) then
96184: LD_VAR 0 4
96188: PUSH
96189: LD_VAR 0 7
96193: ARRAY
96194: PPUSH
96195: CALL_OW 314
96199: NOT
96200: IFFALSE 96238
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
96202: LD_VAR 0 4
96206: PUSH
96207: LD_VAR 0 7
96211: ARRAY
96212: PPUSH
96213: LD_VAR 0 14
96217: PPUSH
96218: LD_VAR 0 4
96222: PUSH
96223: LD_VAR 0 7
96227: ARRAY
96228: PPUSH
96229: CALL_OW 74
96233: PPUSH
96234: CALL_OW 115
// end ; end ; end ;
96238: GO 92117
96240: POP
96241: POP
// wait ( 0 0$2 ) ;
96242: LD_INT 70
96244: PPUSH
96245: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
96249: LD_VAR 0 4
96253: NOT
96254: PUSH
96255: LD_VAR 0 4
96259: PUSH
96260: EMPTY
96261: EQUAL
96262: OR
96263: PUSH
96264: LD_INT 81
96266: PUSH
96267: LD_VAR 0 35
96271: PUSH
96272: EMPTY
96273: LIST
96274: LIST
96275: PPUSH
96276: CALL_OW 69
96280: NOT
96281: OR
96282: IFFALSE 92102
// end ;
96284: LD_VAR 0 2
96288: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
96289: LD_INT 0
96291: PPUSH
96292: PPUSH
96293: PPUSH
96294: PPUSH
96295: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
96296: LD_VAR 0 1
96300: NOT
96301: PUSH
96302: LD_EXP 63
96306: PUSH
96307: LD_VAR 0 1
96311: ARRAY
96312: NOT
96313: OR
96314: PUSH
96315: LD_VAR 0 2
96319: NOT
96320: OR
96321: PUSH
96322: LD_VAR 0 3
96326: NOT
96327: OR
96328: IFFALSE 96332
// exit ;
96330: GO 96845
// side := mc_sides [ base ] ;
96332: LD_ADDR_VAR 0 6
96336: PUSH
96337: LD_EXP 89
96341: PUSH
96342: LD_VAR 0 1
96346: ARRAY
96347: ST_TO_ADDR
// if not side then
96348: LD_VAR 0 6
96352: NOT
96353: IFFALSE 96357
// exit ;
96355: GO 96845
// for i in solds do
96357: LD_ADDR_VAR 0 7
96361: PUSH
96362: LD_VAR 0 2
96366: PUSH
96367: FOR_IN
96368: IFFALSE 96429
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
96370: LD_VAR 0 7
96374: PPUSH
96375: CALL_OW 310
96379: PPUSH
96380: CALL_OW 266
96384: PUSH
96385: LD_INT 32
96387: PUSH
96388: LD_INT 31
96390: PUSH
96391: EMPTY
96392: LIST
96393: LIST
96394: IN
96395: IFFALSE 96415
// solds := solds diff i else
96397: LD_ADDR_VAR 0 2
96401: PUSH
96402: LD_VAR 0 2
96406: PUSH
96407: LD_VAR 0 7
96411: DIFF
96412: ST_TO_ADDR
96413: GO 96427
// SetTag ( i , 18 ) ;
96415: LD_VAR 0 7
96419: PPUSH
96420: LD_INT 18
96422: PPUSH
96423: CALL_OW 109
96427: GO 96367
96429: POP
96430: POP
// if not solds then
96431: LD_VAR 0 2
96435: NOT
96436: IFFALSE 96440
// exit ;
96438: GO 96845
// repeat wait ( 0 0$1 ) ;
96440: LD_INT 35
96442: PPUSH
96443: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
96447: LD_ADDR_VAR 0 5
96451: PUSH
96452: LD_VAR 0 6
96456: PPUSH
96457: LD_VAR 0 3
96461: PPUSH
96462: CALL 15221 0 2
96466: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
96467: LD_EXP 63
96471: PUSH
96472: LD_VAR 0 1
96476: ARRAY
96477: NOT
96478: PUSH
96479: LD_EXP 63
96483: PUSH
96484: LD_VAR 0 1
96488: ARRAY
96489: PUSH
96490: EMPTY
96491: EQUAL
96492: OR
96493: IFFALSE 96530
// begin for i in solds do
96495: LD_ADDR_VAR 0 7
96499: PUSH
96500: LD_VAR 0 2
96504: PUSH
96505: FOR_IN
96506: IFFALSE 96519
// ComStop ( i ) ;
96508: LD_VAR 0 7
96512: PPUSH
96513: CALL_OW 141
96517: GO 96505
96519: POP
96520: POP
// solds := [ ] ;
96521: LD_ADDR_VAR 0 2
96525: PUSH
96526: EMPTY
96527: ST_TO_ADDR
// exit ;
96528: GO 96845
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
96530: LD_VAR 0 5
96534: NOT
96535: PUSH
96536: LD_VAR 0 5
96540: PUSH
96541: LD_INT 3
96543: GREATER
96544: OR
96545: PUSH
96546: LD_EXP 85
96550: PUSH
96551: LD_VAR 0 1
96555: ARRAY
96556: OR
96557: IFFALSE 96598
// begin for i in solds do
96559: LD_ADDR_VAR 0 7
96563: PUSH
96564: LD_VAR 0 2
96568: PUSH
96569: FOR_IN
96570: IFFALSE 96594
// if HasTask ( i ) then
96572: LD_VAR 0 7
96576: PPUSH
96577: CALL_OW 314
96581: IFFALSE 96592
// ComStop ( i ) ;
96583: LD_VAR 0 7
96587: PPUSH
96588: CALL_OW 141
96592: GO 96569
96594: POP
96595: POP
// break ;
96596: GO 96833
// end ; for i in solds do
96598: LD_ADDR_VAR 0 7
96602: PUSH
96603: LD_VAR 0 2
96607: PUSH
96608: FOR_IN
96609: IFFALSE 96825
// begin if IsInUnit ( i ) then
96611: LD_VAR 0 7
96615: PPUSH
96616: CALL_OW 310
96620: IFFALSE 96631
// ComExitBuilding ( i ) ;
96622: LD_VAR 0 7
96626: PPUSH
96627: CALL_OW 122
// if GetLives ( i ) > 333 then
96631: LD_VAR 0 7
96635: PPUSH
96636: CALL_OW 256
96640: PUSH
96641: LD_INT 333
96643: GREATER
96644: IFFALSE 96672
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
96646: LD_VAR 0 7
96650: PPUSH
96651: LD_VAR 0 5
96655: PPUSH
96656: LD_VAR 0 7
96660: PPUSH
96661: CALL_OW 74
96665: PPUSH
96666: CALL_OW 115
96670: GO 96823
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
96672: LD_ADDR_VAR 0 8
96676: PUSH
96677: LD_EXP 63
96681: PUSH
96682: LD_VAR 0 1
96686: ARRAY
96687: PPUSH
96688: LD_INT 2
96690: PUSH
96691: LD_INT 30
96693: PUSH
96694: LD_INT 0
96696: PUSH
96697: EMPTY
96698: LIST
96699: LIST
96700: PUSH
96701: LD_INT 30
96703: PUSH
96704: LD_INT 1
96706: PUSH
96707: EMPTY
96708: LIST
96709: LIST
96710: PUSH
96711: LD_INT 30
96713: PUSH
96714: LD_INT 6
96716: PUSH
96717: EMPTY
96718: LIST
96719: LIST
96720: PUSH
96721: EMPTY
96722: LIST
96723: LIST
96724: LIST
96725: LIST
96726: PPUSH
96727: CALL_OW 72
96731: PPUSH
96732: LD_VAR 0 7
96736: PPUSH
96737: CALL_OW 74
96741: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
96742: LD_VAR 0 7
96746: PPUSH
96747: LD_VAR 0 8
96751: PPUSH
96752: CALL_OW 250
96756: PPUSH
96757: LD_INT 3
96759: PPUSH
96760: LD_INT 5
96762: PPUSH
96763: CALL_OW 272
96767: PPUSH
96768: LD_VAR 0 8
96772: PPUSH
96773: CALL_OW 251
96777: PPUSH
96778: LD_INT 3
96780: PPUSH
96781: LD_INT 5
96783: PPUSH
96784: CALL_OW 273
96788: PPUSH
96789: CALL_OW 111
// SetTag ( i , 0 ) ;
96793: LD_VAR 0 7
96797: PPUSH
96798: LD_INT 0
96800: PPUSH
96801: CALL_OW 109
// solds := solds diff i ;
96805: LD_ADDR_VAR 0 2
96809: PUSH
96810: LD_VAR 0 2
96814: PUSH
96815: LD_VAR 0 7
96819: DIFF
96820: ST_TO_ADDR
// continue ;
96821: GO 96608
// end ; end ;
96823: GO 96608
96825: POP
96826: POP
// until solds ;
96827: LD_VAR 0 2
96831: IFFALSE 96440
// MC_Reset ( base , 18 ) ;
96833: LD_VAR 0 1
96837: PPUSH
96838: LD_INT 18
96840: PPUSH
96841: CALL 54008 0 2
// end ;
96845: LD_VAR 0 4
96849: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
96850: LD_INT 0
96852: PPUSH
96853: PPUSH
96854: PPUSH
96855: PPUSH
96856: PPUSH
96857: PPUSH
96858: PPUSH
96859: PPUSH
96860: PPUSH
96861: PPUSH
96862: PPUSH
96863: PPUSH
96864: PPUSH
96865: PPUSH
96866: PPUSH
96867: PPUSH
96868: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
96869: LD_ADDR_VAR 0 13
96873: PUSH
96874: LD_EXP 63
96878: PUSH
96879: LD_VAR 0 1
96883: ARRAY
96884: PPUSH
96885: LD_INT 25
96887: PUSH
96888: LD_INT 3
96890: PUSH
96891: EMPTY
96892: LIST
96893: LIST
96894: PPUSH
96895: CALL_OW 72
96899: ST_TO_ADDR
// if mc_remote_driver [ base ] then
96900: LD_EXP 103
96904: PUSH
96905: LD_VAR 0 1
96909: ARRAY
96910: IFFALSE 96934
// mechs := mechs diff mc_remote_driver [ base ] ;
96912: LD_ADDR_VAR 0 13
96916: PUSH
96917: LD_VAR 0 13
96921: PUSH
96922: LD_EXP 103
96926: PUSH
96927: LD_VAR 0 1
96931: ARRAY
96932: DIFF
96933: ST_TO_ADDR
// for i in mechs do
96934: LD_ADDR_VAR 0 5
96938: PUSH
96939: LD_VAR 0 13
96943: PUSH
96944: FOR_IN
96945: IFFALSE 96980
// if GetTag ( i ) > 0 then
96947: LD_VAR 0 5
96951: PPUSH
96952: CALL_OW 110
96956: PUSH
96957: LD_INT 0
96959: GREATER
96960: IFFALSE 96978
// mechs := mechs diff i ;
96962: LD_ADDR_VAR 0 13
96966: PUSH
96967: LD_VAR 0 13
96971: PUSH
96972: LD_VAR 0 5
96976: DIFF
96977: ST_TO_ADDR
96978: GO 96944
96980: POP
96981: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
96982: LD_ADDR_VAR 0 9
96986: PUSH
96987: LD_EXP 63
96991: PUSH
96992: LD_VAR 0 1
96996: ARRAY
96997: PPUSH
96998: LD_INT 2
97000: PUSH
97001: LD_INT 25
97003: PUSH
97004: LD_INT 1
97006: PUSH
97007: EMPTY
97008: LIST
97009: LIST
97010: PUSH
97011: LD_INT 25
97013: PUSH
97014: LD_INT 5
97016: PUSH
97017: EMPTY
97018: LIST
97019: LIST
97020: PUSH
97021: LD_INT 25
97023: PUSH
97024: LD_INT 8
97026: PUSH
97027: EMPTY
97028: LIST
97029: LIST
97030: PUSH
97031: LD_INT 25
97033: PUSH
97034: LD_INT 9
97036: PUSH
97037: EMPTY
97038: LIST
97039: LIST
97040: PUSH
97041: EMPTY
97042: LIST
97043: LIST
97044: LIST
97045: LIST
97046: LIST
97047: PPUSH
97048: CALL_OW 72
97052: ST_TO_ADDR
// if not defenders and not solds then
97053: LD_VAR 0 2
97057: NOT
97058: PUSH
97059: LD_VAR 0 9
97063: NOT
97064: AND
97065: IFFALSE 97069
// exit ;
97067: GO 98695
// depot_under_attack := false ;
97069: LD_ADDR_VAR 0 17
97073: PUSH
97074: LD_INT 0
97076: ST_TO_ADDR
// sold_defenders := [ ] ;
97077: LD_ADDR_VAR 0 18
97081: PUSH
97082: EMPTY
97083: ST_TO_ADDR
// if mechs then
97084: LD_VAR 0 13
97088: IFFALSE 97217
// for i in defenders do
97090: LD_ADDR_VAR 0 5
97094: PUSH
97095: LD_VAR 0 2
97099: PUSH
97100: FOR_IN
97101: IFFALSE 97215
// begin SetTag ( i , 20 ) ;
97103: LD_VAR 0 5
97107: PPUSH
97108: LD_INT 20
97110: PPUSH
97111: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
97115: LD_VAR 0 5
97119: PPUSH
97120: CALL_OW 263
97124: PUSH
97125: LD_INT 1
97127: EQUAL
97128: PUSH
97129: LD_VAR 0 5
97133: PPUSH
97134: CALL_OW 311
97138: NOT
97139: AND
97140: PUSH
97141: LD_VAR 0 13
97145: AND
97146: IFFALSE 97213
// begin un := mechs [ 1 ] ;
97148: LD_ADDR_VAR 0 11
97152: PUSH
97153: LD_VAR 0 13
97157: PUSH
97158: LD_INT 1
97160: ARRAY
97161: ST_TO_ADDR
// ComExitBuilding ( un ) ;
97162: LD_VAR 0 11
97166: PPUSH
97167: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
97171: LD_VAR 0 11
97175: PPUSH
97176: LD_VAR 0 5
97180: PPUSH
97181: CALL_OW 180
// SetTag ( un , 19 ) ;
97185: LD_VAR 0 11
97189: PPUSH
97190: LD_INT 19
97192: PPUSH
97193: CALL_OW 109
// mechs := mechs diff un ;
97197: LD_ADDR_VAR 0 13
97201: PUSH
97202: LD_VAR 0 13
97206: PUSH
97207: LD_VAR 0 11
97211: DIFF
97212: ST_TO_ADDR
// end ; end ;
97213: GO 97100
97215: POP
97216: POP
// if solds then
97217: LD_VAR 0 9
97221: IFFALSE 97280
// for i in solds do
97223: LD_ADDR_VAR 0 5
97227: PUSH
97228: LD_VAR 0 9
97232: PUSH
97233: FOR_IN
97234: IFFALSE 97278
// if not GetTag ( i ) then
97236: LD_VAR 0 5
97240: PPUSH
97241: CALL_OW 110
97245: NOT
97246: IFFALSE 97276
// begin defenders := defenders union i ;
97248: LD_ADDR_VAR 0 2
97252: PUSH
97253: LD_VAR 0 2
97257: PUSH
97258: LD_VAR 0 5
97262: UNION
97263: ST_TO_ADDR
// SetTag ( i , 18 ) ;
97264: LD_VAR 0 5
97268: PPUSH
97269: LD_INT 18
97271: PPUSH
97272: CALL_OW 109
// end ;
97276: GO 97233
97278: POP
97279: POP
// repeat wait ( 0 0$1 ) ;
97280: LD_INT 35
97282: PPUSH
97283: CALL_OW 67
// enemy := mc_scan [ base ] ;
97287: LD_ADDR_VAR 0 3
97291: PUSH
97292: LD_EXP 86
97296: PUSH
97297: LD_VAR 0 1
97301: ARRAY
97302: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
97303: LD_EXP 63
97307: PUSH
97308: LD_VAR 0 1
97312: ARRAY
97313: NOT
97314: PUSH
97315: LD_EXP 63
97319: PUSH
97320: LD_VAR 0 1
97324: ARRAY
97325: PUSH
97326: EMPTY
97327: EQUAL
97328: OR
97329: IFFALSE 97366
// begin for i in defenders do
97331: LD_ADDR_VAR 0 5
97335: PUSH
97336: LD_VAR 0 2
97340: PUSH
97341: FOR_IN
97342: IFFALSE 97355
// ComStop ( i ) ;
97344: LD_VAR 0 5
97348: PPUSH
97349: CALL_OW 141
97353: GO 97341
97355: POP
97356: POP
// defenders := [ ] ;
97357: LD_ADDR_VAR 0 2
97361: PUSH
97362: EMPTY
97363: ST_TO_ADDR
// exit ;
97364: GO 98695
// end ; for i in defenders do
97366: LD_ADDR_VAR 0 5
97370: PUSH
97371: LD_VAR 0 2
97375: PUSH
97376: FOR_IN
97377: IFFALSE 98195
// begin e := NearestUnitToUnit ( enemy , i ) ;
97379: LD_ADDR_VAR 0 14
97383: PUSH
97384: LD_VAR 0 3
97388: PPUSH
97389: LD_VAR 0 5
97393: PPUSH
97394: CALL_OW 74
97398: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
97399: LD_ADDR_VAR 0 8
97403: PUSH
97404: LD_EXP 63
97408: PUSH
97409: LD_VAR 0 1
97413: ARRAY
97414: PPUSH
97415: LD_INT 2
97417: PUSH
97418: LD_INT 30
97420: PUSH
97421: LD_INT 0
97423: PUSH
97424: EMPTY
97425: LIST
97426: LIST
97427: PUSH
97428: LD_INT 30
97430: PUSH
97431: LD_INT 1
97433: PUSH
97434: EMPTY
97435: LIST
97436: LIST
97437: PUSH
97438: EMPTY
97439: LIST
97440: LIST
97441: LIST
97442: PPUSH
97443: CALL_OW 72
97447: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
97448: LD_ADDR_VAR 0 17
97452: PUSH
97453: LD_VAR 0 8
97457: NOT
97458: PUSH
97459: LD_VAR 0 8
97463: PPUSH
97464: LD_INT 3
97466: PUSH
97467: LD_INT 24
97469: PUSH
97470: LD_INT 600
97472: PUSH
97473: EMPTY
97474: LIST
97475: LIST
97476: PUSH
97477: EMPTY
97478: LIST
97479: LIST
97480: PPUSH
97481: CALL_OW 72
97485: OR
97486: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
97487: LD_VAR 0 5
97491: PPUSH
97492: CALL_OW 247
97496: PUSH
97497: LD_INT 2
97499: DOUBLE
97500: EQUAL
97501: IFTRUE 97505
97503: GO 97901
97505: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
97506: LD_VAR 0 5
97510: PPUSH
97511: CALL_OW 256
97515: PUSH
97516: LD_INT 650
97518: GREATER
97519: PUSH
97520: LD_VAR 0 5
97524: PPUSH
97525: LD_VAR 0 14
97529: PPUSH
97530: CALL_OW 296
97534: PUSH
97535: LD_INT 40
97537: LESS
97538: PUSH
97539: LD_VAR 0 14
97543: PPUSH
97544: LD_EXP 88
97548: PUSH
97549: LD_VAR 0 1
97553: ARRAY
97554: PPUSH
97555: CALL_OW 308
97559: OR
97560: AND
97561: IFFALSE 97683
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
97563: LD_VAR 0 5
97567: PPUSH
97568: CALL_OW 262
97572: PUSH
97573: LD_INT 1
97575: EQUAL
97576: PUSH
97577: LD_VAR 0 5
97581: PPUSH
97582: CALL_OW 261
97586: PUSH
97587: LD_INT 30
97589: LESS
97590: AND
97591: PUSH
97592: LD_VAR 0 8
97596: AND
97597: IFFALSE 97667
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
97599: LD_VAR 0 5
97603: PPUSH
97604: LD_VAR 0 8
97608: PPUSH
97609: LD_VAR 0 5
97613: PPUSH
97614: CALL_OW 74
97618: PPUSH
97619: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
97623: LD_VAR 0 5
97627: PPUSH
97628: LD_VAR 0 8
97632: PPUSH
97633: LD_VAR 0 5
97637: PPUSH
97638: CALL_OW 74
97642: PPUSH
97643: CALL_OW 296
97647: PUSH
97648: LD_INT 6
97650: LESS
97651: IFFALSE 97665
// SetFuel ( i , 100 ) ;
97653: LD_VAR 0 5
97657: PPUSH
97658: LD_INT 100
97660: PPUSH
97661: CALL_OW 240
// end else
97665: GO 97681
// ComAttackUnit ( i , e ) ;
97667: LD_VAR 0 5
97671: PPUSH
97672: LD_VAR 0 14
97676: PPUSH
97677: CALL_OW 115
// end else
97681: GO 97784
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
97683: LD_VAR 0 14
97687: PPUSH
97688: LD_EXP 88
97692: PUSH
97693: LD_VAR 0 1
97697: ARRAY
97698: PPUSH
97699: CALL_OW 308
97703: NOT
97704: PUSH
97705: LD_VAR 0 5
97709: PPUSH
97710: LD_VAR 0 14
97714: PPUSH
97715: CALL_OW 296
97719: PUSH
97720: LD_INT 40
97722: GREATEREQUAL
97723: AND
97724: PUSH
97725: LD_VAR 0 5
97729: PPUSH
97730: CALL_OW 256
97734: PUSH
97735: LD_INT 650
97737: LESSEQUAL
97738: OR
97739: PUSH
97740: LD_VAR 0 5
97744: PPUSH
97745: LD_EXP 87
97749: PUSH
97750: LD_VAR 0 1
97754: ARRAY
97755: PPUSH
97756: CALL_OW 308
97760: NOT
97761: AND
97762: IFFALSE 97784
// ComMoveToArea ( i , mc_parking [ base ] ) ;
97764: LD_VAR 0 5
97768: PPUSH
97769: LD_EXP 87
97773: PUSH
97774: LD_VAR 0 1
97778: ARRAY
97779: PPUSH
97780: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
97784: LD_VAR 0 5
97788: PPUSH
97789: CALL_OW 256
97793: PUSH
97794: LD_INT 998
97796: LESS
97797: PUSH
97798: LD_VAR 0 5
97802: PPUSH
97803: CALL_OW 263
97807: PUSH
97808: LD_INT 1
97810: EQUAL
97811: AND
97812: PUSH
97813: LD_VAR 0 5
97817: PPUSH
97818: CALL_OW 311
97822: AND
97823: PUSH
97824: LD_VAR 0 5
97828: PPUSH
97829: LD_EXP 87
97833: PUSH
97834: LD_VAR 0 1
97838: ARRAY
97839: PPUSH
97840: CALL_OW 308
97844: AND
97845: IFFALSE 97899
// begin mech := IsDrivenBy ( i ) ;
97847: LD_ADDR_VAR 0 10
97851: PUSH
97852: LD_VAR 0 5
97856: PPUSH
97857: CALL_OW 311
97861: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
97862: LD_VAR 0 10
97866: PPUSH
97867: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
97871: LD_VAR 0 10
97875: PPUSH
97876: LD_VAR 0 5
97880: PPUSH
97881: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
97885: LD_VAR 0 10
97889: PPUSH
97890: LD_VAR 0 5
97894: PPUSH
97895: CALL_OW 180
// end ; end ; unit_human :
97899: GO 98166
97901: LD_INT 1
97903: DOUBLE
97904: EQUAL
97905: IFTRUE 97909
97907: GO 98165
97909: POP
// begin b := IsInUnit ( i ) ;
97910: LD_ADDR_VAR 0 19
97914: PUSH
97915: LD_VAR 0 5
97919: PPUSH
97920: CALL_OW 310
97924: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
97925: LD_ADDR_VAR 0 20
97929: PUSH
97930: LD_VAR 0 19
97934: NOT
97935: PUSH
97936: LD_VAR 0 19
97940: PPUSH
97941: CALL_OW 266
97945: PUSH
97946: LD_INT 32
97948: PUSH
97949: LD_INT 31
97951: PUSH
97952: EMPTY
97953: LIST
97954: LIST
97955: IN
97956: OR
97957: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
97958: LD_VAR 0 17
97962: PUSH
97963: LD_VAR 0 2
97967: PPUSH
97968: LD_INT 21
97970: PUSH
97971: LD_INT 2
97973: PUSH
97974: EMPTY
97975: LIST
97976: LIST
97977: PPUSH
97978: CALL_OW 72
97982: PUSH
97983: LD_INT 1
97985: LESSEQUAL
97986: OR
97987: PUSH
97988: LD_VAR 0 20
97992: AND
97993: PUSH
97994: LD_VAR 0 5
97998: PUSH
97999: LD_VAR 0 18
98003: IN
98004: NOT
98005: AND
98006: IFFALSE 98099
// begin if b then
98008: LD_VAR 0 19
98012: IFFALSE 98061
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
98014: LD_VAR 0 19
98018: PPUSH
98019: LD_VAR 0 3
98023: PPUSH
98024: LD_VAR 0 19
98028: PPUSH
98029: CALL_OW 74
98033: PPUSH
98034: CALL_OW 296
98038: PUSH
98039: LD_INT 10
98041: LESS
98042: PUSH
98043: LD_VAR 0 19
98047: PPUSH
98048: CALL_OW 461
98052: PUSH
98053: LD_INT 7
98055: NONEQUAL
98056: AND
98057: IFFALSE 98061
// continue ;
98059: GO 97376
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
98061: LD_ADDR_VAR 0 18
98065: PUSH
98066: LD_VAR 0 18
98070: PPUSH
98071: LD_VAR 0 18
98075: PUSH
98076: LD_INT 1
98078: PLUS
98079: PPUSH
98080: LD_VAR 0 5
98084: PPUSH
98085: CALL_OW 1
98089: ST_TO_ADDR
// ComExitBuilding ( i ) ;
98090: LD_VAR 0 5
98094: PPUSH
98095: CALL_OW 122
// end ; if sold_defenders then
98099: LD_VAR 0 18
98103: IFFALSE 98163
// if i in sold_defenders then
98105: LD_VAR 0 5
98109: PUSH
98110: LD_VAR 0 18
98114: IN
98115: IFFALSE 98163
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
98117: LD_VAR 0 5
98121: PPUSH
98122: CALL_OW 314
98126: NOT
98127: PUSH
98128: LD_VAR 0 5
98132: PPUSH
98133: LD_VAR 0 14
98137: PPUSH
98138: CALL_OW 296
98142: PUSH
98143: LD_INT 30
98145: LESS
98146: AND
98147: IFFALSE 98163
// ComAttackUnit ( i , e ) ;
98149: LD_VAR 0 5
98153: PPUSH
98154: LD_VAR 0 14
98158: PPUSH
98159: CALL_OW 115
// end ; end ; end ;
98163: GO 98166
98165: POP
// if IsDead ( i ) then
98166: LD_VAR 0 5
98170: PPUSH
98171: CALL_OW 301
98175: IFFALSE 98193
// defenders := defenders diff i ;
98177: LD_ADDR_VAR 0 2
98181: PUSH
98182: LD_VAR 0 2
98186: PUSH
98187: LD_VAR 0 5
98191: DIFF
98192: ST_TO_ADDR
// end ;
98193: GO 97376
98195: POP
98196: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
98197: LD_VAR 0 3
98201: NOT
98202: PUSH
98203: LD_VAR 0 2
98207: NOT
98208: OR
98209: PUSH
98210: LD_EXP 63
98214: PUSH
98215: LD_VAR 0 1
98219: ARRAY
98220: NOT
98221: OR
98222: IFFALSE 97280
// MC_Reset ( base , 18 ) ;
98224: LD_VAR 0 1
98228: PPUSH
98229: LD_INT 18
98231: PPUSH
98232: CALL 54008 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
98236: LD_ADDR_VAR 0 2
98240: PUSH
98241: LD_VAR 0 2
98245: PUSH
98246: LD_VAR 0 2
98250: PPUSH
98251: LD_INT 2
98253: PUSH
98254: LD_INT 25
98256: PUSH
98257: LD_INT 1
98259: PUSH
98260: EMPTY
98261: LIST
98262: LIST
98263: PUSH
98264: LD_INT 25
98266: PUSH
98267: LD_INT 5
98269: PUSH
98270: EMPTY
98271: LIST
98272: LIST
98273: PUSH
98274: LD_INT 25
98276: PUSH
98277: LD_INT 8
98279: PUSH
98280: EMPTY
98281: LIST
98282: LIST
98283: PUSH
98284: LD_INT 25
98286: PUSH
98287: LD_INT 9
98289: PUSH
98290: EMPTY
98291: LIST
98292: LIST
98293: PUSH
98294: EMPTY
98295: LIST
98296: LIST
98297: LIST
98298: LIST
98299: LIST
98300: PPUSH
98301: CALL_OW 72
98305: DIFF
98306: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
98307: LD_VAR 0 3
98311: NOT
98312: PUSH
98313: LD_VAR 0 2
98317: PPUSH
98318: LD_INT 21
98320: PUSH
98321: LD_INT 2
98323: PUSH
98324: EMPTY
98325: LIST
98326: LIST
98327: PPUSH
98328: CALL_OW 72
98332: AND
98333: IFFALSE 98671
// begin tmp := FilterByTag ( defenders , 19 ) ;
98335: LD_ADDR_VAR 0 12
98339: PUSH
98340: LD_VAR 0 2
98344: PPUSH
98345: LD_INT 19
98347: PPUSH
98348: CALL 46981 0 2
98352: ST_TO_ADDR
// if tmp then
98353: LD_VAR 0 12
98357: IFFALSE 98427
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
98359: LD_ADDR_VAR 0 12
98363: PUSH
98364: LD_VAR 0 12
98368: PPUSH
98369: LD_INT 25
98371: PUSH
98372: LD_INT 3
98374: PUSH
98375: EMPTY
98376: LIST
98377: LIST
98378: PPUSH
98379: CALL_OW 72
98383: ST_TO_ADDR
// if tmp then
98384: LD_VAR 0 12
98388: IFFALSE 98427
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
98390: LD_ADDR_EXP 75
98394: PUSH
98395: LD_EXP 75
98399: PPUSH
98400: LD_VAR 0 1
98404: PPUSH
98405: LD_EXP 75
98409: PUSH
98410: LD_VAR 0 1
98414: ARRAY
98415: PUSH
98416: LD_VAR 0 12
98420: UNION
98421: PPUSH
98422: CALL_OW 1
98426: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
98427: LD_VAR 0 1
98431: PPUSH
98432: LD_INT 19
98434: PPUSH
98435: CALL 54008 0 2
// repeat wait ( 0 0$1 ) ;
98439: LD_INT 35
98441: PPUSH
98442: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
98446: LD_EXP 63
98450: PUSH
98451: LD_VAR 0 1
98455: ARRAY
98456: NOT
98457: PUSH
98458: LD_EXP 63
98462: PUSH
98463: LD_VAR 0 1
98467: ARRAY
98468: PUSH
98469: EMPTY
98470: EQUAL
98471: OR
98472: IFFALSE 98509
// begin for i in defenders do
98474: LD_ADDR_VAR 0 5
98478: PUSH
98479: LD_VAR 0 2
98483: PUSH
98484: FOR_IN
98485: IFFALSE 98498
// ComStop ( i ) ;
98487: LD_VAR 0 5
98491: PPUSH
98492: CALL_OW 141
98496: GO 98484
98498: POP
98499: POP
// defenders := [ ] ;
98500: LD_ADDR_VAR 0 2
98504: PUSH
98505: EMPTY
98506: ST_TO_ADDR
// exit ;
98507: GO 98695
// end ; for i in defenders do
98509: LD_ADDR_VAR 0 5
98513: PUSH
98514: LD_VAR 0 2
98518: PUSH
98519: FOR_IN
98520: IFFALSE 98609
// begin if not IsInArea ( i , mc_parking [ base ] ) then
98522: LD_VAR 0 5
98526: PPUSH
98527: LD_EXP 87
98531: PUSH
98532: LD_VAR 0 1
98536: ARRAY
98537: PPUSH
98538: CALL_OW 308
98542: NOT
98543: IFFALSE 98567
// ComMoveToArea ( i , mc_parking [ base ] ) else
98545: LD_VAR 0 5
98549: PPUSH
98550: LD_EXP 87
98554: PUSH
98555: LD_VAR 0 1
98559: ARRAY
98560: PPUSH
98561: CALL_OW 113
98565: GO 98607
// if GetControl ( i ) = control_manual then
98567: LD_VAR 0 5
98571: PPUSH
98572: CALL_OW 263
98576: PUSH
98577: LD_INT 1
98579: EQUAL
98580: IFFALSE 98607
// if IsDrivenBy ( i ) then
98582: LD_VAR 0 5
98586: PPUSH
98587: CALL_OW 311
98591: IFFALSE 98607
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
98593: LD_VAR 0 5
98597: PPUSH
98598: CALL_OW 311
98602: PPUSH
98603: CALL_OW 121
// end ;
98607: GO 98519
98609: POP
98610: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
98611: LD_VAR 0 2
98615: PPUSH
98616: LD_INT 95
98618: PUSH
98619: LD_EXP 87
98623: PUSH
98624: LD_VAR 0 1
98628: ARRAY
98629: PUSH
98630: EMPTY
98631: LIST
98632: LIST
98633: PPUSH
98634: CALL_OW 72
98638: PUSH
98639: LD_VAR 0 2
98643: EQUAL
98644: PUSH
98645: LD_EXP 86
98649: PUSH
98650: LD_VAR 0 1
98654: ARRAY
98655: OR
98656: PUSH
98657: LD_EXP 63
98661: PUSH
98662: LD_VAR 0 1
98666: ARRAY
98667: NOT
98668: OR
98669: IFFALSE 98439
// end ; MC_Reset ( base , 19 ) ;
98671: LD_VAR 0 1
98675: PPUSH
98676: LD_INT 19
98678: PPUSH
98679: CALL 54008 0 2
// MC_Reset ( base , 20 ) ;
98683: LD_VAR 0 1
98687: PPUSH
98688: LD_INT 20
98690: PPUSH
98691: CALL 54008 0 2
// end ;
98695: LD_VAR 0 4
98699: RET
