// export MissionStart ; starting begin GameType ;
   0: CALL 4609 0 0
// RevealFogArea ( 1 , BetaArea ) ;
   4: LD_INT 1
   6: PPUSH
   7: LD_INT 8
   9: PPUSH
  10: CALL_OW 332
// SetBName ( BetaA , beta ) ;
  14: LD_INT 1
  16: PPUSH
  17: LD_STRING beta
  19: PPUSH
  20: CALL_OW 500
// SetBName ( BetaB , beta ) ;
  24: LD_INT 3
  26: PPUSH
  27: LD_STRING beta
  29: PPUSH
  30: CALL_OW 500
// PrepareHeroes ;
  34: CALL 1990 0 0
// PrepareBeta ;
  38: CALL 2379 0 0
// InGameOn ;
  42: CALL_OW 8
// CenterNowOnUnits ( Brighton ) ;
  46: LD_EXP 8
  50: PPUSH
  51: CALL_OW 87
// ComMoveXY ( Megan , 50 , 42 ) ;
  55: LD_EXP 10
  59: PPUSH
  60: LD_INT 50
  62: PPUSH
  63: LD_INT 42
  65: PPUSH
  66: CALL_OW 111
// repeat wait ( 0 0$1 ) until GetDistUnits ( Megan , Brighton ) < 3 ;
  70: LD_INT 35
  72: PPUSH
  73: CALL_OW 67
  77: LD_EXP 10
  81: PPUSH
  82: LD_EXP 8
  86: PPUSH
  87: CALL_OW 296
  91: PUSH
  92: LD_INT 3
  94: LESS
  95: IFFALSE 70
// Say ( Megan , DMegan-1a ) ;
  97: LD_EXP 10
 101: PPUSH
 102: LD_STRING DMegan-1a
 104: PPUSH
 105: CALL_OW 88
// Say ( Brighton , DBrighton-1a ) ;
 109: LD_EXP 8
 113: PPUSH
 114: LD_STRING DBrighton-1a
 116: PPUSH
 117: CALL_OW 88
// Say ( Megan , DMegan-2a ) ;
 121: LD_EXP 10
 125: PPUSH
 126: LD_STRING DMegan-2a
 128: PPUSH
 129: CALL_OW 88
// Say ( Brighton , DBrighton-2a ) ;
 133: LD_EXP 8
 137: PPUSH
 138: LD_STRING DBrighton-2a
 140: PPUSH
 141: CALL_OW 88
// Say ( Megan , DMegan-3a ) ;
 145: LD_EXP 10
 149: PPUSH
 150: LD_STRING DMegan-3a
 152: PPUSH
 153: CALL_OW 88
// Say ( Brighton , DBrighton-3a ) ;
 157: LD_EXP 8
 161: PPUSH
 162: LD_STRING DBrighton-3a
 164: PPUSH
 165: CALL_OW 88
// Say ( Megan , DMegan-4a ) ;
 169: LD_EXP 10
 173: PPUSH
 174: LD_STRING DMegan-4a
 176: PPUSH
 177: CALL_OW 88
// ComMoveXY ( Megan , 40 , 37 ) ;
 181: LD_EXP 10
 185: PPUSH
 186: LD_INT 40
 188: PPUSH
 189: LD_INT 37
 191: PPUSH
 192: CALL_OW 111
// ComMoveXY ( Palmer , 50 , 42 ) ;
 196: LD_EXP 9
 200: PPUSH
 201: LD_INT 50
 203: PPUSH
 204: LD_INT 42
 206: PPUSH
 207: CALL_OW 111
// wait ( 0 0$3 ) ;
 211: LD_INT 105
 213: PPUSH
 214: CALL_OW 67
// Say ( Megan , DMegan-5a ) ;
 218: LD_EXP 10
 222: PPUSH
 223: LD_STRING DMegan-5a
 225: PPUSH
 226: CALL_OW 88
// Say ( Palmer , DPalmer-1 ) ;
 230: LD_EXP 9
 234: PPUSH
 235: LD_STRING DPalmer-1
 237: PPUSH
 238: CALL_OW 88
// Say ( Brighton , DBrighton-1 ) ;
 242: LD_EXP 8
 246: PPUSH
 247: LD_STRING DBrighton-1
 249: PPUSH
 250: CALL_OW 88
// Say ( Palmer , DPalmer-2 ) ;
 254: LD_EXP 9
 258: PPUSH
 259: LD_STRING DPalmer-2
 261: PPUSH
 262: CALL_OW 88
// Say ( Brighton , DBrighton-2 ) ;
 266: LD_EXP 8
 270: PPUSH
 271: LD_STRING DBrighton-2
 273: PPUSH
 274: CALL_OW 88
// Say ( Palmer , DPalmer-3 ) ;
 278: LD_EXP 9
 282: PPUSH
 283: LD_STRING DPalmer-3
 285: PPUSH
 286: CALL_OW 88
// Say ( Brighton , DBrighton-3 ) ;
 290: LD_EXP 8
 294: PPUSH
 295: LD_STRING DBrighton-3
 297: PPUSH
 298: CALL_OW 88
// Say ( Palmer , DPalmer-4 ) ;
 302: LD_EXP 9
 306: PPUSH
 307: LD_STRING DPalmer-4
 309: PPUSH
 310: CALL_OW 88
// ComEnterUnit ( Palmer , AmTower ) ;
 314: LD_EXP 9
 318: PPUSH
 319: LD_INT 6
 321: PPUSH
 322: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
 326: LD_INT 35
 328: PPUSH
 329: CALL_OW 67
// until IsInUnit ( Palmer ) = AmTower ;
 333: LD_EXP 9
 337: PPUSH
 338: CALL_OW 310
 342: PUSH
 343: LD_INT 6
 345: EQUAL
 346: IFFALSE 326
// SayRadio ( Palmer , DPalmer-5 ) ;
 348: LD_EXP 9
 352: PPUSH
 353: LD_STRING DPalmer-5
 355: PPUSH
 356: CALL_OW 94
// ComMoveXY ( Brighton , 59 , 36 ) ;
 360: LD_EXP 8
 364: PPUSH
 365: LD_INT 59
 367: PPUSH
 368: LD_INT 36
 370: PPUSH
 371: CALL_OW 111
// ComMoveXY ( Megan , 60 , 35 ) ;
 375: LD_EXP 10
 379: PPUSH
 380: LD_INT 60
 382: PPUSH
 383: LD_INT 35
 385: PPUSH
 386: CALL_OW 111
// ComMoveXY ( Palmer , 60 , 34 ) ;
 390: LD_EXP 9
 394: PPUSH
 395: LD_INT 60
 397: PPUSH
 398: LD_INT 34
 400: PPUSH
 401: CALL_OW 111
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 405: LD_EXP 8
 409: PPUSH
 410: LD_INT 99
 412: PPUSH
 413: LD_INT 37
 415: PPUSH
 416: CALL_OW 178
// AddComTurnUnit ( Megan , Brighton ) ;
 420: LD_EXP 10
 424: PPUSH
 425: LD_EXP 8
 429: PPUSH
 430: CALL_OW 179
// AddComTurnUnit ( Palmer , Brighton ) ;
 434: LD_EXP 9
 438: PPUSH
 439: LD_EXP 8
 443: PPUSH
 444: CALL_OW 179
// CenterOnXY ( 64 , 40 ) ;
 448: LD_INT 64
 450: PPUSH
 451: LD_INT 40
 453: PPUSH
 454: CALL_OW 84
// ComMeeting ( BetaSquad , SpotArea ) ;
 458: LD_EXP 11
 462: PPUSH
 463: LD_INT 13
 465: PPUSH
 466: CALL 9886 0 2
// wait ( 0 0$15 ) ;
 470: LD_INT 525
 472: PPUSH
 473: CALL_OW 67
// Say ( Brighton , DBrighton-4 ) ;
 477: LD_EXP 8
 481: PPUSH
 482: LD_STRING DBrighton-4
 484: PPUSH
 485: CALL_OW 88
// Say ( Brighton , DBrighton-5 ) ;
 489: LD_EXP 8
 493: PPUSH
 494: LD_STRING DBrighton-5
 496: PPUSH
 497: CALL_OW 88
// AddComTurnUnit ( Brighton , Megan ) ;
 501: LD_EXP 8
 505: PPUSH
 506: LD_EXP 10
 510: PPUSH
 511: CALL_OW 179
// Say ( Brighton , DBrighton-6 ) ;
 515: LD_EXP 8
 519: PPUSH
 520: LD_STRING DBrighton-6
 522: PPUSH
 523: CALL_OW 88
// Say ( Megan , DMegan-1 ) ;
 527: LD_EXP 10
 531: PPUSH
 532: LD_STRING DMegan-1
 534: PPUSH
 535: CALL_OW 88
// Say ( Brighton , DBrighton-7 ) ;
 539: LD_EXP 8
 543: PPUSH
 544: LD_STRING DBrighton-7
 546: PPUSH
 547: CALL_OW 88
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 551: LD_EXP 8
 555: PPUSH
 556: LD_INT 99
 558: PPUSH
 559: LD_INT 37
 561: PPUSH
 562: CALL_OW 178
// Say ( Brighton , DBrighton-8 ) ;
 566: LD_EXP 8
 570: PPUSH
 571: LD_STRING DBrighton-8
 573: PPUSH
 574: CALL_OW 88
// ChangeMissionObjectives ( C1 ) ;
 578: LD_STRING C1
 580: PPUSH
 581: CALL_OW 337
// InGameOff ;
 585: CALL_OW 9
// MissionStart := true ;
 589: LD_ADDR_EXP 1
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// music_nat := 1 ;
 597: LD_ADDR_OWVAR 71
 601: PUSH
 602: LD_INT 1
 604: ST_TO_ADDR
// end ;
 605: END
// export ArmadaArrived , FirstAssaultRepelled ; export RuSpeaker ; every 0 0$1 trigger MissionStart do
 606: LD_EXP 1
 610: IFFALSE 1567
 612: GO 614
 614: DISABLE
// begin wait ( ruArrival ) ;
 615: LD_EXP 41
 619: PPUSH
 620: CALL_OW 67
// PrepareRUArmada ;
 624: CALL 2818 0 0
// ComMoveXY ( RUArmada , 107 , 120 ) ;
 628: LD_EXP 16
 632: PPUSH
 633: LD_INT 107
 635: PPUSH
 636: LD_INT 120
 638: PPUSH
 639: CALL_OW 111
// ArmadaArrived := true ;
 643: LD_ADDR_EXP 2
 647: PUSH
 648: LD_INT 1
 650: ST_TO_ADDR
// Say ( Palmer , DPalmer-A1 ) ;
 651: LD_EXP 9
 655: PPUSH
 656: LD_STRING DPalmer-A1
 658: PPUSH
 659: CALL_OW 88
// Say ( Brighton , DBrighton-A1 ) ;
 663: LD_EXP 8
 667: PPUSH
 668: LD_STRING DBrighton-A1
 670: PPUSH
 671: CALL_OW 88
// wait ( 1 1$0 ) ;
 675: LD_INT 2100
 677: PPUSH
 678: CALL_OW 67
// PrepareRUBase ;
 682: CALL 3543 0 0
// PrepareRUBase_v2 ;
 686: CALL 3959 0 0
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
 690: LD_ADDR_EXP 52
 694: PUSH
 695: LD_EXP 52
 699: PPUSH
 700: LD_INT 1
 702: PPUSH
 703: LD_INT 22
 705: PUSH
 706: LD_INT 3
 708: PUSH
 709: EMPTY
 710: LIST
 711: LIST
 712: PPUSH
 713: CALL_OW 69
 717: PPUSH
 718: CALL_OW 1
 722: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , RU_SecondPersonnel ) ;
 723: LD_ADDR_EXP 52
 727: PUSH
 728: LD_EXP 52
 732: PPUSH
 733: LD_INT 2
 735: PPUSH
 736: LD_EXP 35
 740: PPUSH
 741: CALL_OW 1
 745: ST_TO_ADDR
// MC_Start ( ) ;
 746: CALL 54685 0 0
// wait ( 0 0$30 ) ;
 750: LD_INT 1050
 752: PPUSH
 753: CALL_OW 67
// PrepareRUBulldozers ;
 757: CALL 3430 0 0
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
 761: LD_EXP 17
 765: PUSH
 766: LD_INT 1
 768: ARRAY
 769: PPUSH
 770: LD_INT 9
 772: PPUSH
 773: CALL 9743 0 2
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
 777: LD_EXP 17
 781: PUSH
 782: LD_INT 2
 784: ARRAY
 785: PPUSH
 786: LD_INT 11
 788: PPUSH
 789: CALL 9743 0 2
// DoNotAttack ( 1 , Bulldozers [ 1 ] ) ;
 793: LD_INT 1
 795: PPUSH
 796: LD_EXP 17
 800: PUSH
 801: LD_INT 1
 803: ARRAY
 804: PPUSH
 805: CALL_OW 471
// DoNotAttack ( 1 , Bulldozers [ 2 ] ) ;
 809: LD_INT 1
 811: PPUSH
 812: LD_EXP 17
 816: PUSH
 817: LD_INT 2
 819: ARRAY
 820: PPUSH
 821: CALL_OW 471
// wait ( 0 0$30 ) ;
 825: LD_INT 1050
 827: PPUSH
 828: CALL_OW 67
// InGameOn ;
 832: CALL_OW 8
// ComMoveXY ( FilterUnitsInArea ( US_BackOffArea , [ f_side , 1 ] ) , 63 , 39 ) ;
 836: LD_INT 10
 838: PPUSH
 839: LD_INT 22
 841: PUSH
 842: LD_INT 1
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: PPUSH
 849: CALL_OW 70
 853: PPUSH
 854: LD_INT 63
 856: PPUSH
 857: LD_INT 39
 859: PPUSH
 860: CALL_OW 111
// CenterOnXY ( 95 , 93 ) ;
 864: LD_INT 95
 866: PPUSH
 867: LD_INT 93
 869: PPUSH
 870: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
 874: LD_INT 35
 876: PPUSH
 877: CALL_OW 67
// until ListEnvironmentArea ( BulldozerArea ) < 4 or ListEnvironmentArea ( BulldozerArea2 ) < 4 ;
 881: LD_INT 9
 883: PPUSH
 884: CALL_OW 353
 888: PUSH
 889: LD_INT 4
 891: LESS
 892: PUSH
 893: LD_INT 11
 895: PPUSH
 896: CALL_OW 353
 900: PUSH
 901: LD_INT 4
 903: LESS
 904: OR
 905: IFFALSE 874
// wait ( 0 0$10 ) ;
 907: LD_INT 350
 909: PPUSH
 910: CALL_OW 67
// ComMoveXY ( Bulldozers , 120 , 131 ) ;
 914: LD_EXP 17
 918: PPUSH
 919: LD_INT 120
 921: PPUSH
 922: LD_INT 131
 924: PPUSH
 925: CALL_OW 111
// wait ( 0 0$5 ) ;
 929: LD_INT 175
 931: PPUSH
 932: CALL_OW 67
// NormalAttack ( 1 , Bulldozers [ 1 ] ) ;
 936: LD_INT 1
 938: PPUSH
 939: LD_EXP 17
 943: PUSH
 944: LD_INT 1
 946: ARRAY
 947: PPUSH
 948: CALL_OW 472
// NormalAttack ( 1 , Bulldozers [ 2 ] ) ;
 952: LD_INT 1
 954: PPUSH
 955: LD_EXP 17
 959: PUSH
 960: LD_INT 2
 962: ARRAY
 963: PPUSH
 964: CALL_OW 472
// Say ( Yashin , DDeath-Yas-1 ) ;
 968: LD_EXP 12
 972: PPUSH
 973: LD_STRING DDeath-Yas-1
 975: PPUSH
 976: CALL_OW 88
// Say ( Gaydar , DDeath-Gay-2 ) ;
 980: LD_EXP 14
 984: PPUSH
 985: LD_STRING DDeath-Gay-2
 987: PPUSH
 988: CALL_OW 88
// SayEffect ( DRuSol-A1 ) ;
 992: LD_STRING DRuSol-A1
 994: PPUSH
 995: CALL_OW 96
// wait ( 0 0$2 ) ;
 999: LD_INT 70
1001: PPUSH
1002: CALL_OW 67
// InGameOff ;
1006: CALL_OW 9
// ComMoveXY ( RUArmada , 82 , 67 ) ;
1010: LD_EXP 16
1014: PPUSH
1015: LD_INT 82
1017: PPUSH
1018: LD_INT 67
1020: PPUSH
1021: CALL_OW 111
// wait ( 0 0$20 ) ;
1025: LD_INT 700
1027: PPUSH
1028: CALL_OW 67
// AssaultStarted := true ;
1032: LD_ADDR_EXP 7
1036: PUSH
1037: LD_INT 1
1039: ST_TO_ADDR
// Say ( Popov , DDeath-Pop-1 ) ;
1040: LD_EXP 13
1044: PPUSH
1045: LD_STRING DDeath-Pop-1
1047: PPUSH
1048: CALL_OW 88
// Say ( Gaydar , DDeath-Gay-1 ) ;
1052: LD_EXP 14
1056: PPUSH
1057: LD_STRING DDeath-Gay-1
1059: PPUSH
1060: CALL_OW 88
// wait ( 0 0$5 ) ;
1064: LD_INT 175
1066: PPUSH
1067: CALL_OW 67
// Say ( Sevi , DDeath-Vse-1 ) ;
1071: LD_EXP 15
1075: PPUSH
1076: LD_STRING DDeath-Vse-1
1078: PPUSH
1079: CALL_OW 88
// PriorityAttack ( 6 , BetaA ) ;
1083: LD_INT 6
1085: PPUSH
1086: LD_INT 1
1088: PPUSH
1089: CALL_OW 470
// PriorityAttack ( 6 , BetaB ) ;
1093: LD_INT 6
1095: PPUSH
1096: LD_INT 3
1098: PPUSH
1099: CALL_OW 470
// repeat ComAgressiveMove ( RUArmada , 67 , 37 ) ;
1103: LD_EXP 16
1107: PPUSH
1108: LD_INT 67
1110: PPUSH
1111: LD_INT 37
1113: PPUSH
1114: CALL_OW 114
// ComAgressiveMove ( [ Yashin , Popov , Gaydar , Sevi ] , 67 , 37 ) ;
1118: LD_EXP 12
1122: PUSH
1123: LD_EXP 13
1127: PUSH
1128: LD_EXP 14
1132: PUSH
1133: LD_EXP 15
1137: PUSH
1138: EMPTY
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: PPUSH
1144: LD_INT 67
1146: PPUSH
1147: LD_INT 37
1149: PPUSH
1150: CALL_OW 114
// wait ( 0 0$1 ) until FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_type , unit_human ] ] ) < 10 and IsDead ( Yashin ) and IsDead ( Popov ) and IsDead ( Gaydar ) and IsDead ( Sevi ) ;
1154: LD_INT 35
1156: PPUSH
1157: CALL_OW 67
1161: LD_INT 1
1163: PUSH
1164: LD_INT 22
1166: PUSH
1167: LD_INT 6
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: PUSH
1174: LD_INT 21
1176: PUSH
1177: LD_INT 1
1179: PUSH
1180: EMPTY
1181: LIST
1182: LIST
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: LIST
1188: PPUSH
1189: CALL_OW 69
1193: PUSH
1194: LD_INT 10
1196: LESS
1197: PUSH
1198: LD_EXP 12
1202: PPUSH
1203: CALL_OW 301
1207: AND
1208: PUSH
1209: LD_EXP 13
1213: PPUSH
1214: CALL_OW 301
1218: AND
1219: PUSH
1220: LD_EXP 14
1224: PPUSH
1225: CALL_OW 301
1229: AND
1230: PUSH
1231: LD_EXP 15
1235: PPUSH
1236: CALL_OW 301
1240: AND
1241: IFFALSE 1103
// AssaultStarted := false ;
1243: LD_ADDR_EXP 7
1247: PUSH
1248: LD_INT 0
1250: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ f_side , 6 ] ) , 120 , 131 ) ;
1251: LD_INT 22
1253: PUSH
1254: LD_INT 6
1256: PUSH
1257: EMPTY
1258: LIST
1259: LIST
1260: PPUSH
1261: CALL_OW 69
1265: PPUSH
1266: LD_INT 120
1268: PPUSH
1269: LD_INT 131
1271: PPUSH
1272: CALL_OW 111
// RuSpeaker := FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_type , unit_human ] , [ f_lives , 500 ] ] ) ;
1276: LD_ADDR_EXP 4
1280: PUSH
1281: LD_INT 1
1283: PUSH
1284: LD_INT 22
1286: PUSH
1287: LD_INT 6
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: PUSH
1294: LD_INT 21
1296: PUSH
1297: LD_INT 1
1299: PUSH
1300: EMPTY
1301: LIST
1302: LIST
1303: PUSH
1304: LD_INT 24
1306: PUSH
1307: LD_INT 500
1309: PUSH
1310: EMPTY
1311: LIST
1312: LIST
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: PPUSH
1320: CALL_OW 69
1324: ST_TO_ADDR
// Say ( RuSpeaker [ 1 ] , DRuSol-A2 ) ;
1325: LD_EXP 4
1329: PUSH
1330: LD_INT 1
1332: ARRAY
1333: PPUSH
1334: LD_STRING DRuSol-A2
1336: PPUSH
1337: CALL_OW 88
// wait ( 0 0$30 ) ;
1341: LD_INT 1050
1343: PPUSH
1344: CALL_OW 67
// DialogueOn ;
1348: CALL_OW 6
// Say ( Brighton , DBrighton-B1 ) ;
1352: LD_EXP 8
1356: PPUSH
1357: LD_STRING DBrighton-B1
1359: PPUSH
1360: CALL_OW 88
// Say ( Palmer , DPalmer-B1 ) ;
1364: LD_EXP 9
1368: PPUSH
1369: LD_STRING DPalmer-B1
1371: PPUSH
1372: CALL_OW 88
// Say ( Brighton , DBrighton-B2 ) ;
1376: LD_EXP 8
1380: PPUSH
1381: LD_STRING DBrighton-B2
1383: PPUSH
1384: CALL_OW 88
// SayRadio ( Burlak , DBurlak-B1 ) ;
1388: LD_EXP 18
1392: PPUSH
1393: LD_STRING DBurlak-B1
1395: PPUSH
1396: CALL_OW 94
// Say ( Brighton , DBrighton-B3 ) ;
1400: LD_EXP 8
1404: PPUSH
1405: LD_STRING DBrighton-B3
1407: PPUSH
1408: CALL_OW 88
// Say ( Palmer , DPalmer-B2 ) ;
1412: LD_EXP 9
1416: PPUSH
1417: LD_STRING DPalmer-B2
1419: PPUSH
1420: CALL_OW 88
// Say ( Brighton , DBrighton-B4 ) ;
1424: LD_EXP 8
1428: PPUSH
1429: LD_STRING DBrighton-B4
1431: PPUSH
1432: CALL_OW 88
// Say ( Brighton , DBrighton-B5 ) ;
1436: LD_EXP 8
1440: PPUSH
1441: LD_STRING DBrighton-B5
1443: PPUSH
1444: CALL_OW 88
// DialogueOff ;
1448: CALL_OW 7
// ChangeMissionObjectives ( C2 ) ;
1452: LD_STRING C2
1454: PPUSH
1455: CALL_OW 337
// FirstAssaultRepelled := true ;
1459: LD_ADDR_EXP 3
1463: PUSH
1464: LD_INT 1
1466: ST_TO_ADDR
// RemoveUnit ( Bulldozers [ 1 ] ) ;
1467: LD_EXP 17
1471: PUSH
1472: LD_INT 1
1474: ARRAY
1475: PPUSH
1476: CALL_OW 64
// RemoveUnit ( Bulldozers [ 2 ] ) ;
1480: LD_EXP 17
1484: PUSH
1485: LD_INT 2
1487: ARRAY
1488: PPUSH
1489: CALL_OW 64
// AddComExitVehicle ( FilterAllUnits ( [ f_side , 6 ] ) ) ;
1493: LD_INT 22
1495: PUSH
1496: LD_INT 6
1498: PUSH
1499: EMPTY
1500: LIST
1501: LIST
1502: PPUSH
1503: CALL_OW 69
1507: PPUSH
1508: CALL_OW 181
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
1512: LD_INT 22
1514: PUSH
1515: LD_INT 6
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PPUSH
1522: CALL_OW 69
1526: PPUSH
1527: LD_INT 3
1529: PPUSH
1530: CALL_OW 235
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
1534: LD_ADDR_EXP 52
1538: PUSH
1539: LD_EXP 52
1543: PPUSH
1544: LD_INT 1
1546: PPUSH
1547: LD_INT 22
1549: PUSH
1550: LD_INT 3
1552: PUSH
1553: EMPTY
1554: LIST
1555: LIST
1556: PPUSH
1557: CALL_OW 69
1561: PPUSH
1562: CALL_OW 1
1566: ST_TO_ADDR
// end ;
1567: END
// every 0 0$1 trigger FirstAssaultRepelled and jmmArrival > 0 0$00 do
1568: LD_EXP 3
1572: PUSH
1573: LD_EXP 40
1577: PUSH
1578: LD_INT 0
1580: GREATER
1581: AND
1582: IFFALSE 1602
1584: GO 1586
1586: DISABLE
// begin enable ;
1587: ENABLE
// jmmArrival := jmmArrival - 0 0$01 ;
1588: LD_ADDR_EXP 40
1592: PUSH
1593: LD_EXP 40
1597: PUSH
1598: LD_INT 35
1600: MINUS
1601: ST_TO_ADDR
// end ;
1602: END
// export JMM_Arrived ; every 0 0$1 trigger jmmArrival = 0 0$00 do
1603: LD_EXP 40
1607: PUSH
1608: LD_INT 0
1610: EQUAL
1611: IFFALSE 1696
1613: GO 1615
1615: DISABLE
// begin JMMReinforcement ;
1616: CALL 4287 0 0
// DialogueOn ;
1620: CALL_OW 6
// CenterOnUnits ( JMM ) ;
1624: LD_EXP 36
1628: PPUSH
1629: CALL_OW 85
// Say ( JMM , DJMM-F1 ) ;
1633: LD_EXP 36
1637: PPUSH
1638: LD_STRING DJMM-F1
1640: PPUSH
1641: CALL_OW 88
// if RussiansDefeated then
1645: LD_EXP 42
1649: IFFALSE 1665
// Say ( Brighton , DBrighton-F1a ) else
1651: LD_EXP 8
1655: PPUSH
1656: LD_STRING DBrighton-F1a
1658: PPUSH
1659: CALL_OW 88
1663: GO 1684
// begin Say ( Brighton , DBrighton-F1 ) ;
1665: LD_EXP 8
1669: PPUSH
1670: LD_STRING DBrighton-F1
1672: PPUSH
1673: CALL_OW 88
// ChangeMissionObjectives ( C3 ) ;
1677: LD_STRING C3
1679: PPUSH
1680: CALL_OW 337
// end ; DialogueOff ;
1684: CALL_OW 7
// JMM_Arrived := true ;
1688: LD_ADDR_EXP 5
1692: PUSH
1693: LD_INT 1
1695: ST_TO_ADDR
// end ;
1696: END
// every 0 0$1 trigger JMM_Arrived and See ( 1 , Burlak ) do
1697: LD_EXP 5
1701: PUSH
1702: LD_INT 1
1704: PPUSH
1705: LD_EXP 18
1709: PPUSH
1710: CALL_OW 292
1714: AND
1715: IFFALSE 1744
1717: GO 1719
1719: DISABLE
// begin Say ( Burlak , DBurlak ) ;
1720: LD_EXP 18
1724: PPUSH
1725: LD_STRING DBurlak
1727: PPUSH
1728: CALL_OW 88
// Say ( JMM , DJMM ) ;
1732: LD_EXP 36
1736: PPUSH
1737: LD_STRING DJMM
1739: PPUSH
1740: CALL_OW 88
// end ;
1744: END
// export LaserBuilt ; every 0 0$1 trigger FilterAllUnits ( [ f_and , [ f_side , 1 ] , [ f_or , [ f_weapon , us_laser ] , [ f_bweapon , us_laser ] ] ] ) > 1 do
1745: LD_INT 1
1747: PUSH
1748: LD_INT 22
1750: PUSH
1751: LD_INT 1
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: LD_INT 2
1760: PUSH
1761: LD_INT 34
1763: PUSH
1764: LD_INT 9
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: PUSH
1771: LD_INT 35
1773: PUSH
1774: LD_INT 9
1776: PUSH
1777: EMPTY
1778: LIST
1779: LIST
1780: PUSH
1781: EMPTY
1782: LIST
1783: LIST
1784: LIST
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: LIST
1790: PPUSH
1791: CALL_OW 69
1795: PUSH
1796: LD_INT 1
1798: GREATER
1799: IFFALSE 1812
1801: GO 1803
1803: DISABLE
// begin LaserBuilt := true ;
1804: LD_ADDR_EXP 6
1808: PUSH
1809: LD_INT 1
1811: ST_TO_ADDR
// end ;
1812: END
// export AssaultStarted ; every 0 0$1 trigger AssaultStarted and See ( 6 , NearestUnitToUnit ( FilterAllUnits ( [ f_and , [ [ f_side , 1 ] , [ f_bweapon , us_laser ] ] ] ) , IsInUnit ( Sevi ) ) ) do
1813: LD_EXP 7
1817: PUSH
1818: LD_INT 6
1820: PPUSH
1821: LD_INT 1
1823: PUSH
1824: LD_INT 22
1826: PUSH
1827: LD_INT 1
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: PUSH
1834: LD_INT 35
1836: PUSH
1837: LD_INT 9
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: PUSH
1844: EMPTY
1845: LIST
1846: LIST
1847: PUSH
1848: EMPTY
1849: LIST
1850: LIST
1851: PPUSH
1852: CALL_OW 69
1856: PPUSH
1857: LD_EXP 15
1861: PPUSH
1862: CALL_OW 310
1866: PPUSH
1867: CALL_OW 74
1871: PPUSH
1872: CALL_OW 292
1876: AND
1877: IFFALSE 1913
1879: GO 1881
1881: DISABLE
// begin wait ( 0 0$5 ) ;
1882: LD_INT 175
1884: PPUSH
1885: CALL_OW 67
// Say ( Sevi , DDeath-Vse-2 ) ;
1889: LD_EXP 15
1893: PPUSH
1894: LD_STRING DDeath-Vse-2
1896: PPUSH
1897: CALL_OW 88
// Say ( Yashin , DDeath-Yas-2 ) ;
1901: LD_EXP 12
1905: PPUSH
1906: LD_STRING DDeath-Yas-2
1908: PPUSH
1909: CALL_OW 88
// end ;
1913: END
// every 0 0$1 trigger AssaultStarted do
1914: LD_EXP 7
1918: IFFALSE 1942
1920: GO 1922
1922: DISABLE
// begin wait ( 0 0$20 ) ;
1923: LD_INT 700
1925: PPUSH
1926: CALL_OW 67
// Say ( Popov , DDeath-Pop-2 ) ;
1930: LD_EXP 13
1934: PPUSH
1935: LD_STRING DDeath-Pop-2
1937: PPUSH
1938: CALL_OW 88
// end ;
1942: END
// every 0 0$1 trigger MissionStart do
1943: LD_EXP 1
1947: IFFALSE 1989
1949: GO 1951
1951: DISABLE
// begin wait ( Rand ( 0 0$50 , 1 1$20 ) ) ;
1952: LD_INT 1750
1954: PPUSH
1955: LD_INT 2800
1957: PPUSH
1958: CALL_OW 12
1962: PPUSH
1963: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
1967: LD_INT 2
1969: PPUSH
1970: LD_INT 5
1972: PPUSH
1973: CALL_OW 12
1977: PPUSH
1978: LD_INT 12
1980: PPUSH
1981: LD_INT 1
1983: PPUSH
1984: CALL_OW 55
// enable ;
1988: ENABLE
// end ; end_of_file
1989: END
// export Brighton , Palmer , Megan ; export BetaSquad ; export function PrepareHeroes ; begin
1990: LD_INT 0
1992: PPUSH
// uc_side := 1 ;
1993: LD_ADDR_OWVAR 20
1997: PUSH
1998: LD_INT 1
2000: ST_TO_ADDR
// hc_class = class_soldier ;
2001: LD_ADDR_OWVAR 28
2005: PUSH
2006: LD_INT 1
2008: ST_TO_ADDR
// uc_nation := nation_american ;
2009: LD_ADDR_OWVAR 21
2013: PUSH
2014: LD_INT 1
2016: ST_TO_ADDR
// hc_sex = sex_male ;
2017: LD_ADDR_OWVAR 27
2021: PUSH
2022: LD_INT 1
2024: ST_TO_ADDR
// hc_importance = 110 ;
2025: LD_ADDR_OWVAR 32
2029: PUSH
2030: LD_INT 110
2032: ST_TO_ADDR
// hc_basic_skills = [ 5 , 4 , 5 , 3 ] ;
2033: LD_ADDR_OWVAR 30
2037: PUSH
2038: LD_INT 5
2040: PUSH
2041: LD_INT 4
2043: PUSH
2044: LD_INT 5
2046: PUSH
2047: LD_INT 3
2049: PUSH
2050: EMPTY
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: ST_TO_ADDR
// hc_skills = [ 9 , 6 , 7 , 6 ] ;
2056: LD_ADDR_OWVAR 31
2060: PUSH
2061: LD_INT 9
2063: PUSH
2064: LD_INT 6
2066: PUSH
2067: LD_INT 7
2069: PUSH
2070: LD_INT 6
2072: PUSH
2073: EMPTY
2074: LIST
2075: LIST
2076: LIST
2077: LIST
2078: ST_TO_ADDR
// hc_attr = [ 12 , 10 ] ;
2079: LD_ADDR_OWVAR 29
2083: PUSH
2084: LD_INT 12
2086: PUSH
2087: LD_INT 10
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: ST_TO_ADDR
// hc_name := Gerard Brighton ;
2094: LD_ADDR_OWVAR 26
2098: PUSH
2099: LD_STRING Gerard Brighton
2101: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2102: LD_ADDR_OWVAR 33
2106: PUSH
2107: LD_STRING Beta_Skirmish
2109: ST_TO_ADDR
// hc_face_number := 1 ;
2110: LD_ADDR_OWVAR 34
2114: PUSH
2115: LD_INT 1
2117: ST_TO_ADDR
// Brighton := CreateHuman ;
2118: LD_ADDR_EXP 8
2122: PUSH
2123: CALL_OW 44
2127: ST_TO_ADDR
// uc_nation := nation_american ;
2128: LD_ADDR_OWVAR 21
2132: PUSH
2133: LD_INT 1
2135: ST_TO_ADDR
// hc_importance = 80 ;
2136: LD_ADDR_OWVAR 32
2140: PUSH
2141: LD_INT 80
2143: ST_TO_ADDR
// hc_sex = sex_male ;
2144: LD_ADDR_OWVAR 27
2148: PUSH
2149: LD_INT 1
2151: ST_TO_ADDR
// hc_basic_skills = [ 5 , 5 , 3 , 1 ] ;
2152: LD_ADDR_OWVAR 30
2156: PUSH
2157: LD_INT 5
2159: PUSH
2160: LD_INT 5
2162: PUSH
2163: LD_INT 3
2165: PUSH
2166: LD_INT 1
2168: PUSH
2169: EMPTY
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: ST_TO_ADDR
// hc_skills = [ 7 , 6 , 5 , 3 ] ;
2175: LD_ADDR_OWVAR 31
2179: PUSH
2180: LD_INT 7
2182: PUSH
2183: LD_INT 6
2185: PUSH
2186: LD_INT 5
2188: PUSH
2189: LD_INT 3
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: LIST
2197: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2198: LD_ADDR_OWVAR 29
2202: PUSH
2203: LD_INT 10
2205: PUSH
2206: LD_INT 10
2208: PUSH
2209: EMPTY
2210: LIST
2211: LIST
2212: ST_TO_ADDR
// hc_name := Brian Palmer ;
2213: LD_ADDR_OWVAR 26
2217: PUSH
2218: LD_STRING Brian Palmer
2220: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2221: LD_ADDR_OWVAR 33
2225: PUSH
2226: LD_STRING Beta_Skirmish
2228: ST_TO_ADDR
// hc_face_number := 3 ;
2229: LD_ADDR_OWVAR 34
2233: PUSH
2234: LD_INT 3
2236: ST_TO_ADDR
// Palmer := CreateHuman ;
2237: LD_ADDR_EXP 9
2241: PUSH
2242: CALL_OW 44
2246: ST_TO_ADDR
// hc_class = class_scientistic ;
2247: LD_ADDR_OWVAR 28
2251: PUSH
2252: LD_INT 4
2254: ST_TO_ADDR
// uc_nation := nation_american ;
2255: LD_ADDR_OWVAR 21
2259: PUSH
2260: LD_INT 1
2262: ST_TO_ADDR
// hc_importance = 70 ;
2263: LD_ADDR_OWVAR 32
2267: PUSH
2268: LD_INT 70
2270: ST_TO_ADDR
// hc_sex = sex_female ;
2271: LD_ADDR_OWVAR 27
2275: PUSH
2276: LD_INT 2
2278: ST_TO_ADDR
// hc_basic_skills = [ 3 , 2 , 4 , 6 ] ;
2279: LD_ADDR_OWVAR 30
2283: PUSH
2284: LD_INT 3
2286: PUSH
2287: LD_INT 2
2289: PUSH
2290: LD_INT 4
2292: PUSH
2293: LD_INT 6
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: LIST
2300: LIST
2301: ST_TO_ADDR
// hc_skills = [ 4 , 2 , 5 , 8 ] ;
2302: LD_ADDR_OWVAR 31
2306: PUSH
2307: LD_INT 4
2309: PUSH
2310: LD_INT 2
2312: PUSH
2313: LD_INT 5
2315: PUSH
2316: LD_INT 8
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: LIST
2323: LIST
2324: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2325: LD_ADDR_OWVAR 29
2329: PUSH
2330: LD_INT 10
2332: PUSH
2333: LD_INT 10
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: ST_TO_ADDR
// hc_name := Megan Armitage ;
2340: LD_ADDR_OWVAR 26
2344: PUSH
2345: LD_STRING Megan Armitage
2347: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2348: LD_ADDR_OWVAR 33
2352: PUSH
2353: LD_STRING Beta_Skirmish
2355: ST_TO_ADDR
// hc_face_number := 4 ;
2356: LD_ADDR_OWVAR 34
2360: PUSH
2361: LD_INT 4
2363: ST_TO_ADDR
// Megan := CreateHuman ;
2364: LD_ADDR_EXP 10
2368: PUSH
2369: CALL_OW 44
2373: ST_TO_ADDR
// end ;
2374: LD_VAR 0 1
2378: RET
// export function PrepareBeta ; var i , filter , un , soldiers ; begin
2379: LD_INT 0
2381: PPUSH
2382: PPUSH
2383: PPUSH
2384: PPUSH
2385: PPUSH
// uc_side := 1 ;
2386: LD_ADDR_OWVAR 20
2390: PUSH
2391: LD_INT 1
2393: ST_TO_ADDR
// uc_nation := nation_american ;
2394: LD_ADDR_OWVAR 21
2398: PUSH
2399: LD_INT 1
2401: ST_TO_ADDR
// hc_name :=  ;
2402: LD_ADDR_OWVAR 26
2406: PUSH
2407: LD_STRING 
2409: ST_TO_ADDR
// hc_gallery :=  ;
2410: LD_ADDR_OWVAR 33
2414: PUSH
2415: LD_STRING 
2417: ST_TO_ADDR
// for i = 1 to 8 do
2418: LD_ADDR_VAR 0 2
2422: PUSH
2423: DOUBLE
2424: LD_INT 1
2426: DEC
2427: ST_TO_ADDR
2428: LD_INT 8
2430: PUSH
2431: FOR_TO
2432: IFFALSE 2490
// begin PrepareSoldier ( 1 , game_skill ) ;
2434: LD_INT 1
2436: PPUSH
2437: LD_EXP 38
2441: PPUSH
2442: CALL_OW 381
// un := CreateHuman ;
2446: LD_ADDR_VAR 0 4
2450: PUSH
2451: CALL_OW 44
2455: ST_TO_ADDR
// filter := filter ^ un ;
2456: LD_ADDR_VAR 0 3
2460: PUSH
2461: LD_VAR 0 3
2465: PUSH
2466: LD_VAR 0 4
2470: ADD
2471: ST_TO_ADDR
// soldiers := soldiers ^ un ;
2472: LD_ADDR_VAR 0 5
2476: PUSH
2477: LD_VAR 0 5
2481: PUSH
2482: LD_VAR 0 4
2486: ADD
2487: ST_TO_ADDR
// end ;
2488: GO 2431
2490: POP
2491: POP
// for i = 1 to 3 do
2492: LD_ADDR_VAR 0 2
2496: PUSH
2497: DOUBLE
2498: LD_INT 1
2500: DEC
2501: ST_TO_ADDR
2502: LD_INT 3
2504: PUSH
2505: FOR_TO
2506: IFFALSE 2560
// begin PrepareEngineer ( 0 , game_skill ) ;
2508: LD_INT 0
2510: PPUSH
2511: LD_EXP 38
2515: PPUSH
2516: CALL_OW 382
// un := CreateHuman ;
2520: LD_ADDR_VAR 0 4
2524: PUSH
2525: CALL_OW 44
2529: ST_TO_ADDR
// filter := filter ^ un ;
2530: LD_ADDR_VAR 0 3
2534: PUSH
2535: LD_VAR 0 3
2539: PUSH
2540: LD_VAR 0 4
2544: ADD
2545: ST_TO_ADDR
// PlaceHumanInUnit ( un , BetaB ) ;
2546: LD_VAR 0 4
2550: PPUSH
2551: LD_INT 3
2553: PPUSH
2554: CALL_OW 52
// end ;
2558: GO 2505
2560: POP
2561: POP
// for i = 1 to 4 do
2562: LD_ADDR_VAR 0 2
2566: PUSH
2567: DOUBLE
2568: LD_INT 1
2570: DEC
2571: ST_TO_ADDR
2572: LD_INT 4
2574: PUSH
2575: FOR_TO
2576: IFFALSE 2630
// begin PrepareMechanic ( 0 , game_skill ) ;
2578: LD_INT 0
2580: PPUSH
2581: LD_EXP 38
2585: PPUSH
2586: CALL_OW 383
// un := CreateHuman ;
2590: LD_ADDR_VAR 0 4
2594: PUSH
2595: CALL_OW 44
2599: ST_TO_ADDR
// filter := filter ^ un ;
2600: LD_ADDR_VAR 0 3
2604: PUSH
2605: LD_VAR 0 3
2609: PUSH
2610: LD_VAR 0 4
2614: ADD
2615: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmFac ) ;
2616: LD_VAR 0 4
2620: PPUSH
2621: LD_INT 8
2623: PPUSH
2624: CALL_OW 52
// end ;
2628: GO 2575
2630: POP
2631: POP
// for i = 1 to 3 do
2632: LD_ADDR_VAR 0 2
2636: PUSH
2637: DOUBLE
2638: LD_INT 1
2640: DEC
2641: ST_TO_ADDR
2642: LD_INT 3
2644: PUSH
2645: FOR_TO
2646: IFFALSE 2700
// begin PrepareScientist ( 0 , game_skill ) ;
2648: LD_INT 0
2650: PPUSH
2651: LD_EXP 38
2655: PPUSH
2656: CALL_OW 384
// un := CreateHuman ;
2660: LD_ADDR_VAR 0 4
2664: PUSH
2665: CALL_OW 44
2669: ST_TO_ADDR
// filter := filter ^ un ;
2670: LD_ADDR_VAR 0 3
2674: PUSH
2675: LD_VAR 0 3
2679: PUSH
2680: LD_VAR 0 4
2684: ADD
2685: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmLab ) ;
2686: LD_VAR 0 4
2690: PPUSH
2691: LD_INT 14
2693: PPUSH
2694: CALL_OW 52
// end ;
2698: GO 2645
2700: POP
2701: POP
// for i = 1 to soldiers do
2702: LD_ADDR_VAR 0 2
2706: PUSH
2707: DOUBLE
2708: LD_INT 1
2710: DEC
2711: ST_TO_ADDR
2712: LD_VAR 0 5
2716: PUSH
2717: FOR_TO
2718: IFFALSE 2743
// PlaceUnitArea ( soldiers [ i ] , spawn_area , false ) ;
2720: LD_VAR 0 5
2724: PUSH
2725: LD_VAR 0 2
2729: ARRAY
2730: PPUSH
2731: LD_INT 1
2733: PPUSH
2734: LD_INT 0
2736: PPUSH
2737: CALL_OW 49
2741: GO 2717
2743: POP
2744: POP
// PlaceUnitXY ( Brighton , 51 , 43 , false ) ;
2745: LD_EXP 8
2749: PPUSH
2750: LD_INT 51
2752: PPUSH
2753: LD_INT 43
2755: PPUSH
2756: LD_INT 0
2758: PPUSH
2759: CALL_OW 48
// PlaceUnitXY ( Palmer , 55 , 58 , false ) ;
2763: LD_EXP 9
2767: PPUSH
2768: LD_INT 55
2770: PPUSH
2771: LD_INT 58
2773: PPUSH
2774: LD_INT 0
2776: PPUSH
2777: CALL_OW 48
// PlaceUnitXY ( Megan , 39 , 36 , false ) ;
2781: LD_EXP 10
2785: PPUSH
2786: LD_INT 39
2788: PPUSH
2789: LD_INT 36
2791: PPUSH
2792: LD_INT 0
2794: PPUSH
2795: CALL_OW 48
// BetaSquad := filter diff 0 ;
2799: LD_ADDR_EXP 11
2803: PUSH
2804: LD_VAR 0 3
2808: PUSH
2809: LD_INT 0
2811: DIFF
2812: ST_TO_ADDR
// end ;
2813: LD_VAR 0 1
2817: RET
// export Yashin , Popov , Gaydar , Sevi ; export RUArmada ; export function PrepareRUArmada ; var i , vehicle , soldiers , un , vehs ; begin
2818: LD_INT 0
2820: PPUSH
2821: PPUSH
2822: PPUSH
2823: PPUSH
2824: PPUSH
2825: PPUSH
// uc_side := 6 ;
2826: LD_ADDR_OWVAR 20
2830: PUSH
2831: LD_INT 6
2833: ST_TO_ADDR
// uc_nation := nation_russian ;
2834: LD_ADDR_OWVAR 21
2838: PUSH
2839: LD_INT 3
2841: ST_TO_ADDR
// soldiers := [ ] ;
2842: LD_ADDR_VAR 0 4
2846: PUSH
2847: EMPTY
2848: ST_TO_ADDR
// vehs := [ ] ;
2849: LD_ADDR_VAR 0 6
2853: PUSH
2854: EMPTY
2855: ST_TO_ADDR
// RUArmada := [ ] ;
2856: LD_ADDR_EXP 16
2860: PUSH
2861: EMPTY
2862: ST_TO_ADDR
// Yashin := NewCharacter ( Yashin ) ;
2863: LD_ADDR_EXP 12
2867: PUSH
2868: LD_STRING Yashin
2870: PPUSH
2871: CALL_OW 25
2875: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
2876: LD_ADDR_EXP 13
2880: PUSH
2881: LD_STRING Popov
2883: PPUSH
2884: CALL_OW 25
2888: ST_TO_ADDR
// Gaydar := NewCharacter ( Gaydar ) ;
2889: LD_ADDR_EXP 14
2893: PUSH
2894: LD_STRING Gaydar
2896: PPUSH
2897: CALL_OW 25
2901: ST_TO_ADDR
// Sevi := NewCharacter ( Vsevolod ) ;
2902: LD_ADDR_EXP 15
2906: PUSH
2907: LD_STRING Vsevolod
2909: PPUSH
2910: CALL_OW 25
2914: ST_TO_ADDR
// for i = 1 to 16 do
2915: LD_ADDR_VAR 0 2
2919: PUSH
2920: DOUBLE
2921: LD_INT 1
2923: DEC
2924: ST_TO_ADDR
2925: LD_INT 16
2927: PUSH
2928: FOR_TO
2929: IFFALSE 2971
// begin PrepareSoldier ( 0 , game_eskill ) ;
2931: LD_INT 0
2933: PPUSH
2934: LD_EXP 39
2938: PPUSH
2939: CALL_OW 381
// un := CreateHuman ;
2943: LD_ADDR_VAR 0 5
2947: PUSH
2948: CALL_OW 44
2952: ST_TO_ADDR
// soldiers := soldiers ^ un ;
2953: LD_ADDR_VAR 0 4
2957: PUSH
2958: LD_VAR 0 4
2962: PUSH
2963: LD_VAR 0 5
2967: ADD
2968: ST_TO_ADDR
// end ;
2969: GO 2928
2971: POP
2972: POP
// soldiers := Yashin ^ Popov ^ Gaydar ^ Sevi ^ soldiers ;
2973: LD_ADDR_VAR 0 4
2977: PUSH
2978: LD_EXP 12
2982: PUSH
2983: LD_EXP 13
2987: ADD
2988: PUSH
2989: LD_EXP 14
2993: ADD
2994: PUSH
2995: LD_EXP 15
2999: ADD
3000: PUSH
3001: LD_VAR 0 4
3005: ADD
3006: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_heavy_gun , 100 ) ;
3007: LD_INT 24
3009: PPUSH
3010: LD_INT 3
3012: PPUSH
3013: LD_INT 1
3015: PPUSH
3016: LD_INT 46
3018: PPUSH
3019: LD_INT 100
3021: PPUSH
3022: CALL 16591 0 5
// for i = 1 to 8 do
3026: LD_ADDR_VAR 0 2
3030: PUSH
3031: DOUBLE
3032: LD_INT 1
3034: DEC
3035: ST_TO_ADDR
3036: LD_INT 8
3038: PUSH
3039: FOR_TO
3040: IFFALSE 3123
// begin vehicle := CreateVehicle ;
3042: LD_ADDR_VAR 0 3
3046: PUSH
3047: CALL_OW 45
3051: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3052: LD_VAR 0 4
3056: PUSH
3057: LD_INT 1
3059: ARRAY
3060: PPUSH
3061: LD_VAR 0 3
3065: PPUSH
3066: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3070: LD_ADDR_VAR 0 4
3074: PUSH
3075: LD_VAR 0 4
3079: PUSH
3080: LD_VAR 0 4
3084: PUSH
3085: LD_INT 1
3087: ARRAY
3088: DIFF
3089: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3090: LD_VAR 0 3
3094: PPUSH
3095: LD_INT 5
3097: PPUSH
3098: LD_INT 0
3100: PPUSH
3101: CALL_OW 49
// vehs := vehs ^ vehicle ;
3105: LD_ADDR_VAR 0 6
3109: PUSH
3110: LD_VAR 0 6
3114: PUSH
3115: LD_VAR 0 3
3119: ADD
3120: ST_TO_ADDR
// end ;
3121: GO 3039
3123: POP
3124: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_gatling_gun , 100 ) ;
3125: LD_INT 24
3127: PPUSH
3128: LD_INT 3
3130: PPUSH
3131: LD_INT 1
3133: PPUSH
3134: LD_INT 43
3136: PPUSH
3137: LD_INT 100
3139: PPUSH
3140: CALL 16591 0 5
// for i = 1 to 8 do
3144: LD_ADDR_VAR 0 2
3148: PUSH
3149: DOUBLE
3150: LD_INT 1
3152: DEC
3153: ST_TO_ADDR
3154: LD_INT 8
3156: PUSH
3157: FOR_TO
3158: IFFALSE 3241
// begin vehicle := CreateVehicle ;
3160: LD_ADDR_VAR 0 3
3164: PUSH
3165: CALL_OW 45
3169: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3170: LD_VAR 0 4
3174: PUSH
3175: LD_INT 1
3177: ARRAY
3178: PPUSH
3179: LD_VAR 0 3
3183: PPUSH
3184: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3188: LD_ADDR_VAR 0 4
3192: PUSH
3193: LD_VAR 0 4
3197: PUSH
3198: LD_VAR 0 4
3202: PUSH
3203: LD_INT 1
3205: ARRAY
3206: DIFF
3207: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3208: LD_VAR 0 3
3212: PPUSH
3213: LD_INT 5
3215: PPUSH
3216: LD_INT 0
3218: PPUSH
3219: CALL_OW 49
// vehs := vehs ^ vehicle ;
3223: LD_ADDR_VAR 0 6
3227: PUSH
3228: LD_VAR 0 6
3232: PUSH
3233: LD_VAR 0 3
3237: ADD
3238: ST_TO_ADDR
// end ;
3239: GO 3157
3241: POP
3242: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_gun , 100 ) ;
3243: LD_INT 22
3245: PPUSH
3246: LD_INT 3
3248: PPUSH
3249: LD_INT 1
3251: PPUSH
3252: LD_INT 44
3254: PPUSH
3255: LD_INT 100
3257: PPUSH
3258: CALL 16591 0 5
// for i = 1 to 4 do
3262: LD_ADDR_VAR 0 2
3266: PUSH
3267: DOUBLE
3268: LD_INT 1
3270: DEC
3271: ST_TO_ADDR
3272: LD_INT 4
3274: PUSH
3275: FOR_TO
3276: IFFALSE 3359
// begin vehicle := CreateVehicle ;
3278: LD_ADDR_VAR 0 3
3282: PUSH
3283: CALL_OW 45
3287: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3288: LD_VAR 0 4
3292: PUSH
3293: LD_INT 1
3295: ARRAY
3296: PPUSH
3297: LD_VAR 0 3
3301: PPUSH
3302: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3306: LD_ADDR_VAR 0 4
3310: PUSH
3311: LD_VAR 0 4
3315: PUSH
3316: LD_VAR 0 4
3320: PUSH
3321: LD_INT 1
3323: ARRAY
3324: DIFF
3325: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3326: LD_VAR 0 3
3330: PPUSH
3331: LD_INT 5
3333: PPUSH
3334: LD_INT 0
3336: PPUSH
3337: CALL_OW 49
// vehs := vehs ^ vehicle ;
3341: LD_ADDR_VAR 0 6
3345: PUSH
3346: LD_VAR 0 6
3350: PUSH
3351: LD_VAR 0 3
3355: ADD
3356: ST_TO_ADDR
// end ;
3357: GO 3275
3359: POP
3360: POP
// RUArmada := vehs ;
3361: LD_ADDR_EXP 16
3365: PUSH
3366: LD_VAR 0 6
3370: ST_TO_ADDR
// SetMark ( [ IsInUnit ( Yashin ) , IsInUnit ( Popov ) , IsInUnit ( Gaydar ) , IsInUnit ( Sevi ) ] , - 6 ) ;
3371: LD_EXP 12
3375: PPUSH
3376: CALL_OW 310
3380: PUSH
3381: LD_EXP 13
3385: PPUSH
3386: CALL_OW 310
3390: PUSH
3391: LD_EXP 14
3395: PPUSH
3396: CALL_OW 310
3400: PUSH
3401: LD_EXP 15
3405: PPUSH
3406: CALL_OW 310
3410: PUSH
3411: EMPTY
3412: LIST
3413: LIST
3414: LIST
3415: LIST
3416: PPUSH
3417: LD_INT 6
3419: NEG
3420: PPUSH
3421: CALL_OW 242
// end ;
3425: LD_VAR 0 1
3429: RET
// export Bulldozers ; export function PrepareRUBulldozers ; var i , vehicle ; begin
3430: LD_INT 0
3432: PPUSH
3433: PPUSH
3434: PPUSH
// uc_side := 6 ;
3435: LD_ADDR_OWVAR 20
3439: PUSH
3440: LD_INT 6
3442: ST_TO_ADDR
// uc_nation := nation_russian ;
3443: LD_ADDR_OWVAR 21
3447: PUSH
3448: LD_INT 3
3450: ST_TO_ADDR
// Bulldozers := [ ] ;
3451: LD_ADDR_EXP 17
3455: PUSH
3456: EMPTY
3457: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_bulldozer , 100 ) ;
3458: LD_INT 24
3460: PPUSH
3461: LD_INT 3
3463: PPUSH
3464: LD_INT 3
3466: PPUSH
3467: LD_INT 53
3469: PPUSH
3470: LD_INT 100
3472: PPUSH
3473: CALL 16591 0 5
// for i = 1 to 2 do
3477: LD_ADDR_VAR 0 2
3481: PUSH
3482: DOUBLE
3483: LD_INT 1
3485: DEC
3486: ST_TO_ADDR
3487: LD_INT 2
3489: PUSH
3490: FOR_TO
3491: IFFALSE 3536
// begin vehicle := CreateVehicle ;
3493: LD_ADDR_VAR 0 3
3497: PUSH
3498: CALL_OW 45
3502: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3503: LD_VAR 0 3
3507: PPUSH
3508: LD_INT 5
3510: PPUSH
3511: LD_INT 0
3513: PPUSH
3514: CALL_OW 49
// Bulldozers := Bulldozers ^ vehicle ;
3518: LD_ADDR_EXP 17
3522: PUSH
3523: LD_EXP 17
3527: PUSH
3528: LD_VAR 0 3
3532: ADD
3533: ST_TO_ADDR
// end ;
3534: GO 3490
3536: POP
3537: POP
// end ;
3538: LD_VAR 0 1
3542: RET
// export Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ; export function PrepareRUBase ; var i , filter , un ; begin
3543: LD_INT 0
3545: PPUSH
3546: PPUSH
3547: PPUSH
3548: PPUSH
// uc_side := 3 ;
3549: LD_ADDR_OWVAR 20
3553: PUSH
3554: LD_INT 3
3556: ST_TO_ADDR
// uc_nation := nation_russian ;
3557: LD_ADDR_OWVAR 21
3561: PUSH
3562: LD_INT 3
3564: ST_TO_ADDR
// hc_name :=  ;
3565: LD_ADDR_OWVAR 26
3569: PUSH
3570: LD_STRING 
3572: ST_TO_ADDR
// hc_gallery :=  ;
3573: LD_ADDR_OWVAR 33
3577: PUSH
3578: LD_STRING 
3580: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
3581: LD_ADDR_EXP 18
3585: PUSH
3586: LD_STRING Burlak
3588: PPUSH
3589: CALL_OW 25
3593: ST_TO_ADDR
// Gleb := NewCharacter ( Gleb ) ;
3594: LD_ADDR_EXP 19
3598: PUSH
3599: LD_STRING Gleb
3601: PPUSH
3602: CALL_OW 25
3606: ST_TO_ADDR
// Furmanov := NewCharacter ( Furmanov ) ;
3607: LD_ADDR_EXP 20
3611: PUSH
3612: LD_STRING Furmanov
3614: PPUSH
3615: CALL_OW 25
3619: ST_TO_ADDR
// Titov := NewCharacter ( Titov ) ;
3620: LD_ADDR_EXP 21
3624: PUSH
3625: LD_STRING Titov
3627: PPUSH
3628: CALL_OW 25
3632: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
3633: LD_ADDR_EXP 22
3637: PUSH
3638: LD_STRING Scholtze
3640: PPUSH
3641: CALL_OW 25
3645: ST_TO_ADDR
// Dolgov := NewCharacter ( Dolgov ) ;
3646: LD_ADDR_EXP 23
3650: PUSH
3651: LD_STRING Dolgov
3653: PPUSH
3654: CALL_OW 25
3658: ST_TO_ADDR
// Kapitsova := NewCharacter ( Kapitsova ) ;
3659: LD_ADDR_EXP 24
3663: PUSH
3664: LD_STRING Kapitsova
3666: PPUSH
3667: CALL_OW 25
3671: ST_TO_ADDR
// Karamazov := NewCharacter ( Karamazov ) ;
3672: LD_ADDR_EXP 25
3676: PUSH
3677: LD_STRING Karamazov
3679: PPUSH
3680: CALL_OW 25
3684: ST_TO_ADDR
// Kirlenkova := NewCharacter ( Kirlenkova ) ;
3685: LD_ADDR_EXP 26
3689: PUSH
3690: LD_STRING Kirlenkova
3692: PPUSH
3693: CALL_OW 25
3697: ST_TO_ADDR
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
3698: LD_ADDR_EXP 27
3702: PUSH
3703: LD_STRING Kovalyuk
3705: PPUSH
3706: CALL_OW 25
3710: ST_TO_ADDR
// Kozlov := NewCharacter ( Kozlov ) ;
3711: LD_ADDR_EXP 28
3715: PUSH
3716: LD_STRING Kozlov
3718: PPUSH
3719: CALL_OW 25
3723: ST_TO_ADDR
// Kuzmov := NewCharacter ( Kuzmov ) ;
3724: LD_ADDR_EXP 29
3728: PUSH
3729: LD_STRING Kuzmov
3731: PPUSH
3732: CALL_OW 25
3736: ST_TO_ADDR
// Lipshchin := NewCharacter ( Lipshchin ) ;
3737: LD_ADDR_EXP 30
3741: PUSH
3742: LD_STRING Lipshchin
3744: PPUSH
3745: CALL_OW 25
3749: ST_TO_ADDR
// Oblukov := NewCharacter ( Oblukov ) ;
3750: LD_ADDR_EXP 31
3754: PUSH
3755: LD_STRING Oblukov
3757: PPUSH
3758: CALL_OW 25
3762: ST_TO_ADDR
// Xavier2 := NewCharacter ( Xavier2 ) ;
3763: LD_ADDR_EXP 32
3767: PUSH
3768: LD_STRING Xavier2
3770: PPUSH
3771: CALL_OW 25
3775: ST_TO_ADDR
// Gnyevko := NewCharacter ( Gnyevko ) ;
3776: LD_ADDR_EXP 33
3780: PUSH
3781: LD_STRING Gnyevko
3783: PPUSH
3784: CALL_OW 25
3788: ST_TO_ADDR
// Belkov := NewCharacter ( Belkov ) ;
3789: LD_ADDR_EXP 34
3793: PUSH
3794: LD_STRING Belkov
3796: PPUSH
3797: CALL_OW 25
3801: ST_TO_ADDR
// filter := [ Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ] ;
3802: LD_ADDR_VAR 0 3
3806: PUSH
3807: LD_EXP 18
3811: PUSH
3812: LD_EXP 19
3816: PUSH
3817: LD_EXP 20
3821: PUSH
3822: LD_EXP 21
3826: PUSH
3827: LD_EXP 22
3831: PUSH
3832: LD_EXP 23
3836: PUSH
3837: LD_EXP 24
3841: PUSH
3842: LD_EXP 25
3846: PUSH
3847: LD_EXP 26
3851: PUSH
3852: LD_EXP 27
3856: PUSH
3857: LD_EXP 28
3861: PUSH
3862: LD_EXP 29
3866: PUSH
3867: LD_EXP 30
3871: PUSH
3872: LD_EXP 31
3876: PUSH
3877: LD_EXP 32
3881: PUSH
3882: LD_EXP 33
3886: PUSH
3887: LD_EXP 34
3891: PUSH
3892: EMPTY
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: LIST
3899: LIST
3900: LIST
3901: LIST
3902: LIST
3903: LIST
3904: LIST
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: ST_TO_ADDR
// for i = 1 to filter do
3911: LD_ADDR_VAR 0 2
3915: PUSH
3916: DOUBLE
3917: LD_INT 1
3919: DEC
3920: ST_TO_ADDR
3921: LD_VAR 0 3
3925: PUSH
3926: FOR_TO
3927: IFFALSE 3952
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
3929: LD_VAR 0 3
3933: PUSH
3934: LD_VAR 0 2
3938: ARRAY
3939: PPUSH
3940: LD_INT 6
3942: PPUSH
3943: LD_INT 0
3945: PPUSH
3946: CALL_OW 49
3950: GO 3926
3952: POP
3953: POP
// end ;
3954: LD_VAR 0 1
3958: RET
// export RU_SecondPersonnel ; export function PrepareRUBase_v2 ; var i , filter , un ; begin
3959: LD_INT 0
3961: PPUSH
3962: PPUSH
3963: PPUSH
3964: PPUSH
// uc_side := 3 ;
3965: LD_ADDR_OWVAR 20
3969: PUSH
3970: LD_INT 3
3972: ST_TO_ADDR
// uc_nation := nation_russian ;
3973: LD_ADDR_OWVAR 21
3977: PUSH
3978: LD_INT 3
3980: ST_TO_ADDR
// hc_name :=  ;
3981: LD_ADDR_OWVAR 26
3985: PUSH
3986: LD_STRING 
3988: ST_TO_ADDR
// hc_gallery :=  ;
3989: LD_ADDR_OWVAR 33
3993: PUSH
3994: LD_STRING 
3996: ST_TO_ADDR
// for i = 1 to 8 do
3997: LD_ADDR_VAR 0 2
4001: PUSH
4002: DOUBLE
4003: LD_INT 1
4005: DEC
4006: ST_TO_ADDR
4007: LD_INT 8
4009: PUSH
4010: FOR_TO
4011: IFFALSE 4053
// begin PrepareSoldier ( 0 , game_eskill ) ;
4013: LD_INT 0
4015: PPUSH
4016: LD_EXP 39
4020: PPUSH
4021: CALL_OW 381
// un := CreateHuman ;
4025: LD_ADDR_VAR 0 4
4029: PUSH
4030: CALL_OW 44
4034: ST_TO_ADDR
// filter := filter ^ un ;
4035: LD_ADDR_VAR 0 3
4039: PUSH
4040: LD_VAR 0 3
4044: PUSH
4045: LD_VAR 0 4
4049: ADD
4050: ST_TO_ADDR
// end ;
4051: GO 4010
4053: POP
4054: POP
// for i = 1 to 4 do
4055: LD_ADDR_VAR 0 2
4059: PUSH
4060: DOUBLE
4061: LD_INT 1
4063: DEC
4064: ST_TO_ADDR
4065: LD_INT 4
4067: PUSH
4068: FOR_TO
4069: IFFALSE 4111
// begin PrepareEngineer ( 0 , game_eskill ) ;
4071: LD_INT 0
4073: PPUSH
4074: LD_EXP 39
4078: PPUSH
4079: CALL_OW 382
// un := CreateHuman ;
4083: LD_ADDR_VAR 0 4
4087: PUSH
4088: CALL_OW 44
4092: ST_TO_ADDR
// filter := filter ^ un ;
4093: LD_ADDR_VAR 0 3
4097: PUSH
4098: LD_VAR 0 3
4102: PUSH
4103: LD_VAR 0 4
4107: ADD
4108: ST_TO_ADDR
// end ;
4109: GO 4068
4111: POP
4112: POP
// for i = 1 to 6 do
4113: LD_ADDR_VAR 0 2
4117: PUSH
4118: DOUBLE
4119: LD_INT 1
4121: DEC
4122: ST_TO_ADDR
4123: LD_INT 6
4125: PUSH
4126: FOR_TO
4127: IFFALSE 4169
// begin PrepareMechanic ( 0 , game_eskill ) ;
4129: LD_INT 0
4131: PPUSH
4132: LD_EXP 39
4136: PPUSH
4137: CALL_OW 383
// un := CreateHuman ;
4141: LD_ADDR_VAR 0 4
4145: PUSH
4146: CALL_OW 44
4150: ST_TO_ADDR
// filter := filter ^ un ;
4151: LD_ADDR_VAR 0 3
4155: PUSH
4156: LD_VAR 0 3
4160: PUSH
4161: LD_VAR 0 4
4165: ADD
4166: ST_TO_ADDR
// end ;
4167: GO 4126
4169: POP
4170: POP
// for i = 1 to 4 do
4171: LD_ADDR_VAR 0 2
4175: PUSH
4176: DOUBLE
4177: LD_INT 1
4179: DEC
4180: ST_TO_ADDR
4181: LD_INT 4
4183: PUSH
4184: FOR_TO
4185: IFFALSE 4227
// begin PrepareScientist ( 0 , game_eskill ) ;
4187: LD_INT 0
4189: PPUSH
4190: LD_EXP 39
4194: PPUSH
4195: CALL_OW 384
// un := CreateHuman ;
4199: LD_ADDR_VAR 0 4
4203: PUSH
4204: CALL_OW 44
4208: ST_TO_ADDR
// filter := filter ^ un ;
4209: LD_ADDR_VAR 0 3
4213: PUSH
4214: LD_VAR 0 3
4218: PUSH
4219: LD_VAR 0 4
4223: ADD
4224: ST_TO_ADDR
// end ;
4225: GO 4184
4227: POP
4228: POP
// for i = 1 to filter do
4229: LD_ADDR_VAR 0 2
4233: PUSH
4234: DOUBLE
4235: LD_INT 1
4237: DEC
4238: ST_TO_ADDR
4239: LD_VAR 0 3
4243: PUSH
4244: FOR_TO
4245: IFFALSE 4270
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
4247: LD_VAR 0 3
4251: PUSH
4252: LD_VAR 0 2
4256: ARRAY
4257: PPUSH
4258: LD_INT 6
4260: PPUSH
4261: LD_INT 0
4263: PPUSH
4264: CALL_OW 49
4268: GO 4244
4270: POP
4271: POP
// RU_SecondPersonnel := filter ;
4272: LD_ADDR_EXP 35
4276: PUSH
4277: LD_VAR 0 3
4281: ST_TO_ADDR
// end ;
4282: LD_VAR 0 1
4286: RET
// export JMM ; export function JMMReinforcement ; var i , soldiers , un , vehs , vehicle , mechs ; begin
4287: LD_INT 0
4289: PPUSH
4290: PPUSH
4291: PPUSH
4292: PPUSH
4293: PPUSH
4294: PPUSH
4295: PPUSH
// uc_side := 1 ;
4296: LD_ADDR_OWVAR 20
4300: PUSH
4301: LD_INT 1
4303: ST_TO_ADDR
// uc_nation := nation_american ;
4304: LD_ADDR_OWVAR 21
4308: PUSH
4309: LD_INT 1
4311: ST_TO_ADDR
// JMM := NewCharacter ( JMM ) ;
4312: LD_ADDR_EXP 36
4316: PUSH
4317: LD_STRING JMM
4319: PPUSH
4320: CALL_OW 25
4324: ST_TO_ADDR
// PlaceUnitArea ( JMM , JMMArrivalArea , false ) ;
4325: LD_EXP 36
4329: PPUSH
4330: LD_INT 7
4332: PPUSH
4333: LD_INT 0
4335: PPUSH
4336: CALL_OW 49
// mechs := [ ] ;
4340: LD_ADDR_VAR 0 7
4344: PUSH
4345: EMPTY
4346: ST_TO_ADDR
// for i = 1 to 4 do
4347: LD_ADDR_VAR 0 2
4351: PUSH
4352: DOUBLE
4353: LD_INT 1
4355: DEC
4356: ST_TO_ADDR
4357: LD_INT 4
4359: PUSH
4360: FOR_TO
4361: IFFALSE 4422
// begin PrepareSoldier ( 0 , game_skill + 1 ) ;
4363: LD_INT 0
4365: PPUSH
4366: LD_EXP 38
4370: PUSH
4371: LD_INT 1
4373: PLUS
4374: PPUSH
4375: CALL_OW 381
// un := CreateHuman ;
4379: LD_ADDR_VAR 0 4
4383: PUSH
4384: CALL_OW 44
4388: ST_TO_ADDR
// soldiers := soldiers ^ un ;
4389: LD_ADDR_VAR 0 3
4393: PUSH
4394: LD_VAR 0 3
4398: PUSH
4399: LD_VAR 0 4
4403: ADD
4404: ST_TO_ADDR
// PlaceUnitArea ( un , JMMArrivalArea , false ) ;
4405: LD_VAR 0 4
4409: PPUSH
4410: LD_INT 7
4412: PPUSH
4413: LD_INT 0
4415: PPUSH
4416: CALL_OW 49
// end ;
4420: GO 4360
4422: POP
4423: POP
// for i = 1 to 7 do
4424: LD_ADDR_VAR 0 2
4428: PUSH
4429: DOUBLE
4430: LD_INT 1
4432: DEC
4433: ST_TO_ADDR
4434: LD_INT 7
4436: PUSH
4437: FOR_TO
4438: IFFALSE 4484
// begin PrepareMechanic ( 0 , game_skill + 1 ) ;
4440: LD_INT 0
4442: PPUSH
4443: LD_EXP 38
4447: PUSH
4448: LD_INT 1
4450: PLUS
4451: PPUSH
4452: CALL_OW 383
// un := CreateHuman ;
4456: LD_ADDR_VAR 0 4
4460: PUSH
4461: CALL_OW 44
4465: ST_TO_ADDR
// mechs := mechs ^ un ;
4466: LD_ADDR_VAR 0 7
4470: PUSH
4471: LD_VAR 0 7
4475: PUSH
4476: LD_VAR 0 4
4480: ADD
4481: ST_TO_ADDR
// end ;
4482: GO 4437
4484: POP
4485: POP
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , us_double_gun , 100 ) ;
4486: LD_INT 3
4488: PPUSH
4489: LD_INT 3
4491: PPUSH
4492: LD_INT 1
4494: PPUSH
4495: LD_INT 5
4497: PPUSH
4498: LD_INT 100
4500: PPUSH
4501: CALL 16591 0 5
// for i = 1 to 7 do
4505: LD_ADDR_VAR 0 2
4509: PUSH
4510: DOUBLE
4511: LD_INT 1
4513: DEC
4514: ST_TO_ADDR
4515: LD_INT 7
4517: PUSH
4518: FOR_TO
4519: IFFALSE 4602
// begin vehicle := CreateVehicle ;
4521: LD_ADDR_VAR 0 6
4525: PUSH
4526: CALL_OW 45
4530: ST_TO_ADDR
// PlaceHumanInUnit ( mechs [ 1 ] , vehicle ) ;
4531: LD_VAR 0 7
4535: PUSH
4536: LD_INT 1
4538: ARRAY
4539: PPUSH
4540: LD_VAR 0 6
4544: PPUSH
4545: CALL_OW 52
// mechs := mechs diff mechs [ 1 ] ;
4549: LD_ADDR_VAR 0 7
4553: PUSH
4554: LD_VAR 0 7
4558: PUSH
4559: LD_VAR 0 7
4563: PUSH
4564: LD_INT 1
4566: ARRAY
4567: DIFF
4568: ST_TO_ADDR
// PlaceUnitArea ( vehicle , JMMArrivalArea , false ) ;
4569: LD_VAR 0 6
4573: PPUSH
4574: LD_INT 7
4576: PPUSH
4577: LD_INT 0
4579: PPUSH
4580: CALL_OW 49
// vehs := vehs ^ vehicle ;
4584: LD_ADDR_VAR 0 5
4588: PUSH
4589: LD_VAR 0 5
4593: PUSH
4594: LD_VAR 0 6
4598: ADD
4599: ST_TO_ADDR
// end ;
4600: GO 4518
4602: POP
4603: POP
// end ; end_of_file
4604: LD_VAR 0 1
4608: RET
// export game_diff ; export game_skill , game_eskill ; export jmmArrival , ruArrival ; export function GameType ; begin
4609: LD_INT 0
4611: PPUSH
// case Query ( GameDiff ) of 1 :
4612: LD_STRING GameDiff
4614: PPUSH
4615: CALL_OW 97
4619: PUSH
4620: LD_INT 1
4622: DOUBLE
4623: EQUAL
4624: IFTRUE 4628
4626: GO 4639
4628: POP
// game_diff := 1 ; 2 :
4629: LD_ADDR_EXP 37
4633: PUSH
4634: LD_INT 1
4636: ST_TO_ADDR
4637: GO 4678
4639: LD_INT 2
4641: DOUBLE
4642: EQUAL
4643: IFTRUE 4647
4645: GO 4658
4647: POP
// game_diff := 2 ; 3 :
4648: LD_ADDR_EXP 37
4652: PUSH
4653: LD_INT 2
4655: ST_TO_ADDR
4656: GO 4678
4658: LD_INT 3
4660: DOUBLE
4661: EQUAL
4662: IFTRUE 4666
4664: GO 4677
4666: POP
// game_diff := 3 ; end ;
4667: LD_ADDR_EXP 37
4671: PUSH
4672: LD_INT 3
4674: ST_TO_ADDR
4675: GO 4678
4677: POP
// game_skill := [ 8 , 7 , 6 ] [ game_diff ] ;
4678: LD_ADDR_EXP 38
4682: PUSH
4683: LD_INT 8
4685: PUSH
4686: LD_INT 7
4688: PUSH
4689: LD_INT 6
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: LIST
4696: PUSH
4697: LD_EXP 37
4701: ARRAY
4702: ST_TO_ADDR
// game_eskill := [ 6 , 7 , 8 ] [ game_diff ] ;
4703: LD_ADDR_EXP 39
4707: PUSH
4708: LD_INT 6
4710: PUSH
4711: LD_INT 7
4713: PUSH
4714: LD_INT 8
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: LIST
4721: PUSH
4722: LD_EXP 37
4726: ARRAY
4727: ST_TO_ADDR
// ruArrival := [ 20 20$00 , 15 15$00 , 10 10$00 ] [ game_diff ] ;
4728: LD_ADDR_EXP 41
4732: PUSH
4733: LD_INT 42000
4735: PUSH
4736: LD_INT 31500
4738: PUSH
4739: LD_INT 21000
4741: PUSH
4742: EMPTY
4743: LIST
4744: LIST
4745: LIST
4746: PUSH
4747: LD_EXP 37
4751: ARRAY
4752: ST_TO_ADDR
// jmmArrival := [ 40 40$00 , 50 50$00 , 60 60$00 ] [ game_diff ] ;
4753: LD_ADDR_EXP 40
4757: PUSH
4758: LD_INT 84000
4760: PUSH
4761: LD_INT 105000
4763: PUSH
4764: LD_INT 126000
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: LIST
4771: PUSH
4772: LD_EXP 37
4776: ARRAY
4777: ST_TO_ADDR
// end ; end_of_file
4778: LD_VAR 0 1
4782: RET
// export function CustomEvent ( event ) ; begin
4783: LD_INT 0
4785: PPUSH
// end ;
4786: LD_VAR 0 2
4790: RET
// export function CustomInitMacro ( ) ; begin
4791: LD_INT 0
4793: PPUSH
// MC_SetScanArea ( 1 , RU_Base_Area ) ;
4794: LD_INT 1
4796: PPUSH
4797: LD_INT 3
4799: PPUSH
4800: CALL 77062 0 2
// MC_SetParkingArea ( 1 , RU_Base_Parking ) ;
4804: LD_INT 1
4806: PPUSH
4807: LD_INT 4
4809: PPUSH
4810: CALL 77006 0 2
// MC_SetDepositsXY ( 1 , [ [ 136 , 130 , 0 ] , [ 145 , 123 , 0 ] , ] ) ;
4814: LD_INT 1
4816: PPUSH
4817: LD_INT 136
4819: PUSH
4820: LD_INT 130
4822: PUSH
4823: LD_INT 0
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: LIST
4830: PUSH
4831: LD_INT 145
4833: PUSH
4834: LD_INT 123
4836: PUSH
4837: LD_INT 0
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: LIST
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PPUSH
4849: CALL 76128 0 2
// MC_SetAllowedTurretWeapons ( 1 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
4853: LD_INT 1
4855: PPUSH
4856: LD_INT 43
4858: PUSH
4859: LD_INT 46
4861: PUSH
4862: LD_INT 45
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: LIST
4869: PPUSH
4870: CALL 76894 0 2
// MC_SetCratesArea ( 1 , RU_Base_Area ) ;
4874: LD_INT 1
4876: PPUSH
4877: LD_INT 3
4879: PPUSH
4880: CALL 76576 0 2
// MC_SetTame ( 1 , RU_Base_Area ) ;
4884: LD_INT 1
4886: PPUSH
4887: LD_INT 3
4889: PPUSH
4890: CALL 76307 0 2
// MC_SetDefenderLimit ( 1 , 8 ) ;
4894: LD_INT 1
4896: PPUSH
4897: LD_INT 8
4899: PPUSH
4900: CALL 75989 0 2
// MC_SetProduceList ( 1 , [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] ] ) ;
4904: LD_INT 1
4906: PPUSH
4907: LD_INT 22
4909: PUSH
4910: LD_INT 1
4912: PUSH
4913: LD_INT 3
4915: PUSH
4916: LD_INT 43
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: PUSH
4925: LD_INT 22
4927: PUSH
4928: LD_INT 1
4930: PUSH
4931: LD_INT 3
4933: PUSH
4934: LD_INT 44
4936: PUSH
4937: EMPTY
4938: LIST
4939: LIST
4940: LIST
4941: LIST
4942: PUSH
4943: LD_INT 22
4945: PUSH
4946: LD_INT 1
4948: PUSH
4949: LD_INT 3
4951: PUSH
4952: LD_INT 45
4954: PUSH
4955: EMPTY
4956: LIST
4957: LIST
4958: LIST
4959: LIST
4960: PUSH
4961: LD_INT 24
4963: PUSH
4964: LD_INT 1
4966: PUSH
4967: LD_INT 3
4969: PUSH
4970: LD_INT 43
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: PUSH
4979: LD_INT 24
4981: PUSH
4982: LD_INT 1
4984: PUSH
4985: LD_INT 3
4987: PUSH
4988: LD_INT 43
4990: PUSH
4991: EMPTY
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: PUSH
4997: LD_INT 24
4999: PUSH
5000: LD_INT 1
5002: PUSH
5003: LD_INT 3
5005: PUSH
5006: LD_INT 46
5008: PUSH
5009: EMPTY
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: PUSH
5015: LD_INT 22
5017: PUSH
5018: LD_INT 1
5020: PUSH
5021: LD_INT 3
5023: PUSH
5024: LD_INT 43
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: PUSH
5033: LD_INT 22
5035: PUSH
5036: LD_INT 1
5038: PUSH
5039: LD_INT 3
5041: PUSH
5042: LD_INT 44
5044: PUSH
5045: EMPTY
5046: LIST
5047: LIST
5048: LIST
5049: LIST
5050: PUSH
5051: EMPTY
5052: LIST
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: LIST
5058: LIST
5059: LIST
5060: PPUSH
5061: CALL 75804 0 2
// MC_SetBuildingList ( 1 , [ [ b_depot , 127 , 125 , 5 ] , [ b_lab , 124 , 132 , 0 ] , [ b_oil_mine , 136 , 130 , 1 ] , [ b_armoury , 118 , 114 , 2 ] , [ b_oil_mine , 145 , 123 , 1 ] , [ b_oil_power , 150 , 135 , 1 ] , [ b_oil_power , 140 , 134 , 2 ] , [ b_oil_power , 137 , 121 , 5 ] , [ b_workshop , 155 , 130 , 0 ] , [ b_bunker , 155 , 130 , 0 ] , [ b_bunker , 130 , 114 , 3 ] , [ b_bunker , 142 , 115 , 3 ] , [ b_bunker , 153 , 120 , 3 ] , ] ) ;
5065: LD_INT 1
5067: PPUSH
5068: LD_INT 0
5070: PUSH
5071: LD_INT 127
5073: PUSH
5074: LD_INT 125
5076: PUSH
5077: LD_INT 5
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: PUSH
5086: LD_INT 6
5088: PUSH
5089: LD_INT 124
5091: PUSH
5092: LD_INT 132
5094: PUSH
5095: LD_INT 0
5097: PUSH
5098: EMPTY
5099: LIST
5100: LIST
5101: LIST
5102: LIST
5103: PUSH
5104: LD_INT 29
5106: PUSH
5107: LD_INT 136
5109: PUSH
5110: LD_INT 130
5112: PUSH
5113: LD_INT 1
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: LIST
5120: LIST
5121: PUSH
5122: LD_INT 4
5124: PUSH
5125: LD_INT 118
5127: PUSH
5128: LD_INT 114
5130: PUSH
5131: LD_INT 2
5133: PUSH
5134: EMPTY
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: PUSH
5140: LD_INT 29
5142: PUSH
5143: LD_INT 145
5145: PUSH
5146: LD_INT 123
5148: PUSH
5149: LD_INT 1
5151: PUSH
5152: EMPTY
5153: LIST
5154: LIST
5155: LIST
5156: LIST
5157: PUSH
5158: LD_INT 26
5160: PUSH
5161: LD_INT 150
5163: PUSH
5164: LD_INT 135
5166: PUSH
5167: LD_INT 1
5169: PUSH
5170: EMPTY
5171: LIST
5172: LIST
5173: LIST
5174: LIST
5175: PUSH
5176: LD_INT 26
5178: PUSH
5179: LD_INT 140
5181: PUSH
5182: LD_INT 134
5184: PUSH
5185: LD_INT 2
5187: PUSH
5188: EMPTY
5189: LIST
5190: LIST
5191: LIST
5192: LIST
5193: PUSH
5194: LD_INT 26
5196: PUSH
5197: LD_INT 137
5199: PUSH
5200: LD_INT 121
5202: PUSH
5203: LD_INT 5
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: PUSH
5212: LD_INT 2
5214: PUSH
5215: LD_INT 155
5217: PUSH
5218: LD_INT 130
5220: PUSH
5221: LD_INT 0
5223: PUSH
5224: EMPTY
5225: LIST
5226: LIST
5227: LIST
5228: LIST
5229: PUSH
5230: LD_INT 32
5232: PUSH
5233: LD_INT 155
5235: PUSH
5236: LD_INT 130
5238: PUSH
5239: LD_INT 0
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: PUSH
5248: LD_INT 32
5250: PUSH
5251: LD_INT 130
5253: PUSH
5254: LD_INT 114
5256: PUSH
5257: LD_INT 3
5259: PUSH
5260: EMPTY
5261: LIST
5262: LIST
5263: LIST
5264: LIST
5265: PUSH
5266: LD_INT 32
5268: PUSH
5269: LD_INT 142
5271: PUSH
5272: LD_INT 115
5274: PUSH
5275: LD_INT 3
5277: PUSH
5278: EMPTY
5279: LIST
5280: LIST
5281: LIST
5282: LIST
5283: PUSH
5284: LD_INT 32
5286: PUSH
5287: LD_INT 153
5289: PUSH
5290: LD_INT 120
5292: PUSH
5293: LD_INT 3
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: PUSH
5302: EMPTY
5303: LIST
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: PPUSH
5317: CALL 75696 0 2
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_computer ] ) ;
5321: LD_INT 1
5323: PPUSH
5324: LD_INT 10
5326: PUSH
5327: LD_INT 12
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: PPUSH
5334: CALL 76483 0 2
// MC_SetFactoryExtension ( 1 , 155 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
5338: LD_INT 1
5340: PPUSH
5341: LD_INT 155
5343: PPUSH
5344: LD_INT 130
5346: PPUSH
5347: LD_INT 0
5349: PPUSH
5350: LD_INT 24
5352: PUSH
5353: LD_INT 16
5355: PUSH
5356: LD_INT 17
5358: PUSH
5359: LD_INT 18
5361: PUSH
5362: LD_INT 21
5364: PUSH
5365: EMPTY
5366: LIST
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: PPUSH
5372: CALL 76688 0 5
// MC_SetScanArea ( 2 , RU_Base_Area ) ;
5376: LD_INT 2
5378: PPUSH
5379: LD_INT 3
5381: PPUSH
5382: CALL 77062 0 2
// MC_SetParkingArea ( 2 , RU_Base_Parking ) ;
5386: LD_INT 2
5388: PPUSH
5389: LD_INT 4
5391: PPUSH
5392: CALL 77006 0 2
// MC_SetDepositsXY ( 2 , [ [ 84 , 125 , 1 ] , ] ) ;
5396: LD_INT 2
5398: PPUSH
5399: LD_INT 84
5401: PUSH
5402: LD_INT 125
5404: PUSH
5405: LD_INT 1
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: LIST
5412: PUSH
5413: EMPTY
5414: LIST
5415: PPUSH
5416: CALL 76128 0 2
// MC_SetAllowedTurretWeapons ( 2 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
5420: LD_INT 2
5422: PPUSH
5423: LD_INT 43
5425: PUSH
5426: LD_INT 46
5428: PUSH
5429: LD_INT 45
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: LIST
5436: PPUSH
5437: CALL 76894 0 2
// MC_SetCratesArea ( 2 , RU_Base_Area ) ;
5441: LD_INT 2
5443: PPUSH
5444: LD_INT 3
5446: PPUSH
5447: CALL 76576 0 2
// MC_SetTame ( 2 , RU_Base_Area ) ;
5451: LD_INT 2
5453: PPUSH
5454: LD_INT 3
5456: PPUSH
5457: CALL 76307 0 2
// MC_SetDefenderLimit ( 2 , 8 ) ;
5461: LD_INT 2
5463: PPUSH
5464: LD_INT 8
5466: PPUSH
5467: CALL 75989 0 2
// MC_SetProduceList ( 2 , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] ] ) ;
5471: LD_INT 2
5473: PPUSH
5474: LD_INT 22
5476: PUSH
5477: LD_INT 3
5479: PUSH
5480: LD_INT 3
5482: PUSH
5483: LD_INT 43
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: LIST
5490: LIST
5491: PUSH
5492: LD_INT 22
5494: PUSH
5495: LD_INT 3
5497: PUSH
5498: LD_INT 3
5500: PUSH
5501: LD_INT 44
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: LIST
5508: LIST
5509: PUSH
5510: LD_INT 22
5512: PUSH
5513: LD_INT 3
5515: PUSH
5516: LD_INT 3
5518: PUSH
5519: LD_INT 45
5521: PUSH
5522: EMPTY
5523: LIST
5524: LIST
5525: LIST
5526: LIST
5527: PUSH
5528: LD_INT 24
5530: PUSH
5531: LD_INT 3
5533: PUSH
5534: LD_INT 3
5536: PUSH
5537: LD_INT 43
5539: PUSH
5540: EMPTY
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: PUSH
5546: LD_INT 24
5548: PUSH
5549: LD_INT 3
5551: PUSH
5552: LD_INT 3
5554: PUSH
5555: LD_INT 43
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: PUSH
5564: LD_INT 24
5566: PUSH
5567: LD_INT 3
5569: PUSH
5570: LD_INT 3
5572: PUSH
5573: LD_INT 46
5575: PUSH
5576: EMPTY
5577: LIST
5578: LIST
5579: LIST
5580: LIST
5581: PUSH
5582: LD_INT 22
5584: PUSH
5585: LD_INT 3
5587: PUSH
5588: LD_INT 3
5590: PUSH
5591: LD_INT 43
5593: PUSH
5594: EMPTY
5595: LIST
5596: LIST
5597: LIST
5598: LIST
5599: PUSH
5600: LD_INT 22
5602: PUSH
5603: LD_INT 3
5605: PUSH
5606: LD_INT 3
5608: PUSH
5609: LD_INT 44
5611: PUSH
5612: EMPTY
5613: LIST
5614: LIST
5615: LIST
5616: LIST
5617: PUSH
5618: EMPTY
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: LIST
5627: PPUSH
5628: CALL 75804 0 2
// MC_SetBuildingList ( 2 , [ [ b_depot , 96 , 125 , 0 ] , [ b_lab , 74 , 122 , 1 ] , [ b_siberite_mine , 84 , 125 , 1 ] , [ b_siberite_power , 86 , 128 , 1 ] , [ b_siberite_power , 85 , 130 , 2 ] , [ b_siberite_power , 88 , 132 , 5 ] , [ b_workshop , 106 , 130 , 0 ] , [ b_armoury , 99 , 114 , 3 ] , [ b_bunker , 72 , 112 , 2 ] , [ b_bunker , 78 , 110 , 3 ] , [ b_bunker , 84 , 110 , 2 ] , [ b_bunker , 105 , 117 , 3 ] , ] ) ;
5632: LD_INT 2
5634: PPUSH
5635: LD_INT 0
5637: PUSH
5638: LD_INT 96
5640: PUSH
5641: LD_INT 125
5643: PUSH
5644: LD_INT 0
5646: PUSH
5647: EMPTY
5648: LIST
5649: LIST
5650: LIST
5651: LIST
5652: PUSH
5653: LD_INT 6
5655: PUSH
5656: LD_INT 74
5658: PUSH
5659: LD_INT 122
5661: PUSH
5662: LD_INT 1
5664: PUSH
5665: EMPTY
5666: LIST
5667: LIST
5668: LIST
5669: LIST
5670: PUSH
5671: LD_INT 30
5673: PUSH
5674: LD_INT 84
5676: PUSH
5677: LD_INT 125
5679: PUSH
5680: LD_INT 1
5682: PUSH
5683: EMPTY
5684: LIST
5685: LIST
5686: LIST
5687: LIST
5688: PUSH
5689: LD_INT 28
5691: PUSH
5692: LD_INT 86
5694: PUSH
5695: LD_INT 128
5697: PUSH
5698: LD_INT 1
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: LIST
5705: LIST
5706: PUSH
5707: LD_INT 28
5709: PUSH
5710: LD_INT 85
5712: PUSH
5713: LD_INT 130
5715: PUSH
5716: LD_INT 2
5718: PUSH
5719: EMPTY
5720: LIST
5721: LIST
5722: LIST
5723: LIST
5724: PUSH
5725: LD_INT 28
5727: PUSH
5728: LD_INT 88
5730: PUSH
5731: LD_INT 132
5733: PUSH
5734: LD_INT 5
5736: PUSH
5737: EMPTY
5738: LIST
5739: LIST
5740: LIST
5741: LIST
5742: PUSH
5743: LD_INT 2
5745: PUSH
5746: LD_INT 106
5748: PUSH
5749: LD_INT 130
5751: PUSH
5752: LD_INT 0
5754: PUSH
5755: EMPTY
5756: LIST
5757: LIST
5758: LIST
5759: LIST
5760: PUSH
5761: LD_INT 4
5763: PUSH
5764: LD_INT 99
5766: PUSH
5767: LD_INT 114
5769: PUSH
5770: LD_INT 3
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: LIST
5777: LIST
5778: PUSH
5779: LD_INT 32
5781: PUSH
5782: LD_INT 72
5784: PUSH
5785: LD_INT 112
5787: PUSH
5788: LD_INT 2
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: LIST
5795: LIST
5796: PUSH
5797: LD_INT 32
5799: PUSH
5800: LD_INT 78
5802: PUSH
5803: LD_INT 110
5805: PUSH
5806: LD_INT 3
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: LIST
5813: LIST
5814: PUSH
5815: LD_INT 32
5817: PUSH
5818: LD_INT 84
5820: PUSH
5821: LD_INT 110
5823: PUSH
5824: LD_INT 2
5826: PUSH
5827: EMPTY
5828: LIST
5829: LIST
5830: LIST
5831: LIST
5832: PUSH
5833: LD_INT 32
5835: PUSH
5836: LD_INT 105
5838: PUSH
5839: LD_INT 117
5841: PUSH
5842: LD_INT 3
5844: PUSH
5845: EMPTY
5846: LIST
5847: LIST
5848: LIST
5849: LIST
5850: PUSH
5851: EMPTY
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: PPUSH
5865: CALL 75696 0 2
// MC_SetLabKind ( 2 , [ b_lab_spacetime , b_lab_siberium ] ) ;
5869: LD_INT 2
5871: PPUSH
5872: LD_INT 14
5874: PUSH
5875: LD_INT 11
5877: PUSH
5878: EMPTY
5879: LIST
5880: LIST
5881: PPUSH
5882: CALL 76483 0 2
// MC_SetFactoryExtension ( 2 , 106 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
5886: LD_INT 2
5888: PPUSH
5889: LD_INT 106
5891: PPUSH
5892: LD_INT 130
5894: PPUSH
5895: LD_INT 0
5897: PPUSH
5898: LD_INT 24
5900: PUSH
5901: LD_INT 16
5903: PUSH
5904: LD_INT 17
5906: PUSH
5907: LD_INT 18
5909: PUSH
5910: LD_INT 21
5912: PUSH
5913: EMPTY
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: PPUSH
5920: CALL 76688 0 5
// end ;
5924: LD_VAR 0 1
5928: RET
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
5929: LD_INT 22
5931: PUSH
5932: LD_INT 3
5934: PUSH
5935: EMPTY
5936: LIST
5937: LIST
5938: PUSH
5939: LD_INT 30
5941: PUSH
5942: LD_INT 3
5944: PUSH
5945: EMPTY
5946: LIST
5947: LIST
5948: PUSH
5949: EMPTY
5950: LIST
5951: LIST
5952: PPUSH
5953: CALL_OW 69
5957: IFFALSE 6813
5959: GO 5961
5961: DISABLE
5962: LD_INT 0
5964: PPUSH
5965: PPUSH
5966: PPUSH
5967: PPUSH
5968: PPUSH
5969: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
5970: LD_INT 6300
5972: PUSH
5973: LD_INT 4200
5975: PUSH
5976: LD_INT 2100
5978: PUSH
5979: EMPTY
5980: LIST
5981: LIST
5982: LIST
5983: PUSH
5984: LD_OWVAR 67
5988: ARRAY
5989: PPUSH
5990: CALL_OW 67
// base := 2 ;
5994: LD_ADDR_VAR 0 2
5998: PUSH
5999: LD_INT 2
6001: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
6002: LD_INT 22
6004: PUSH
6005: LD_INT 3
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: PUSH
6012: LD_INT 30
6014: PUSH
6015: LD_INT 3
6017: PUSH
6018: EMPTY
6019: LIST
6020: LIST
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: PPUSH
6026: CALL_OW 69
6030: NOT
6031: IFFALSE 6035
// continue ;
6033: GO 5970
// case Rand ( 1 , 3 ) of 1 :
6035: LD_INT 1
6037: PPUSH
6038: LD_INT 3
6040: PPUSH
6041: CALL_OW 12
6045: PUSH
6046: LD_INT 1
6048: DOUBLE
6049: EQUAL
6050: IFTRUE 6054
6052: GO 6230
6054: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6055: LD_ADDR_VAR 0 3
6059: PUSH
6060: LD_INT 22
6062: PUSH
6063: LD_INT 3
6065: PUSH
6066: LD_INT 3
6068: PUSH
6069: LD_INT 43
6071: PUSH
6072: EMPTY
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: PUSH
6078: LD_INT 24
6080: PUSH
6081: LD_INT 3
6083: PUSH
6084: LD_INT 3
6086: PUSH
6087: LD_INT 46
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: PUSH
6096: LD_INT 24
6098: PUSH
6099: LD_INT 3
6101: PUSH
6102: LD_INT 3
6104: PUSH
6105: LD_INT 43
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: LIST
6112: LIST
6113: PUSH
6114: LD_INT 24
6116: PUSH
6117: LD_INT 3
6119: PUSH
6120: LD_INT 3
6122: PUSH
6123: LD_INT 46
6125: PUSH
6126: EMPTY
6127: LIST
6128: LIST
6129: LIST
6130: LIST
6131: PUSH
6132: LD_INT 22
6134: PUSH
6135: LD_INT 3
6137: PUSH
6138: LD_INT 3
6140: PUSH
6141: LD_INT 45
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: PUSH
6150: LD_INT 22
6152: PUSH
6153: LD_INT 3
6155: PUSH
6156: LD_INT 3
6158: PUSH
6159: LD_INT 43
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: LIST
6166: LIST
6167: PUSH
6168: LD_INT 24
6170: PUSH
6171: LD_INT 3
6173: PUSH
6174: LD_INT 3
6176: PUSH
6177: LD_INT 46
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: PUSH
6186: LD_INT 22
6188: PUSH
6189: LD_INT 3
6191: PUSH
6192: LD_INT 3
6194: PUSH
6195: LD_INT 45
6197: PUSH
6198: EMPTY
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
6214: LD_VAR 0 2
6218: PPUSH
6219: LD_VAR 0 3
6223: PPUSH
6224: CALL 75852 0 2
// end ; 2 :
6228: GO 6561
6230: LD_INT 2
6232: DOUBLE
6233: EQUAL
6234: IFTRUE 6238
6236: GO 6376
6238: POP
// begin tmp := [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6239: LD_ADDR_VAR 0 3
6243: PUSH
6244: LD_INT 24
6246: PUSH
6247: LD_INT 3
6249: PUSH
6250: LD_INT 3
6252: PUSH
6253: LD_INT 43
6255: PUSH
6256: EMPTY
6257: LIST
6258: LIST
6259: LIST
6260: LIST
6261: PUSH
6262: LD_INT 24
6264: PUSH
6265: LD_INT 3
6267: PUSH
6268: LD_INT 3
6270: PUSH
6271: LD_INT 46
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: PUSH
6280: LD_INT 24
6282: PUSH
6283: LD_INT 3
6285: PUSH
6286: LD_INT 3
6288: PUSH
6289: LD_INT 43
6291: PUSH
6292: EMPTY
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: PUSH
6298: LD_INT 24
6300: PUSH
6301: LD_INT 3
6303: PUSH
6304: LD_INT 3
6306: PUSH
6307: LD_INT 46
6309: PUSH
6310: EMPTY
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: PUSH
6316: LD_INT 22
6318: PUSH
6319: LD_INT 3
6321: PUSH
6322: LD_INT 3
6324: PUSH
6325: LD_INT 45
6327: PUSH
6328: EMPTY
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: PUSH
6334: LD_INT 22
6336: PUSH
6337: LD_INT 3
6339: PUSH
6340: LD_INT 3
6342: PUSH
6343: LD_INT 45
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
6360: LD_VAR 0 2
6364: PPUSH
6365: LD_VAR 0 3
6369: PPUSH
6370: CALL 75852 0 2
// end ; 3 :
6374: GO 6561
6376: LD_INT 3
6378: DOUBLE
6379: EQUAL
6380: IFTRUE 6384
6382: GO 6560
6384: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6385: LD_ADDR_VAR 0 3
6389: PUSH
6390: LD_INT 22
6392: PUSH
6393: LD_INT 3
6395: PUSH
6396: LD_INT 3
6398: PUSH
6399: LD_INT 43
6401: PUSH
6402: EMPTY
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: PUSH
6408: LD_INT 24
6410: PUSH
6411: LD_INT 3
6413: PUSH
6414: LD_INT 3
6416: PUSH
6417: LD_INT 46
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: PUSH
6426: LD_INT 22
6428: PUSH
6429: LD_INT 3
6431: PUSH
6432: LD_INT 3
6434: PUSH
6435: LD_INT 43
6437: PUSH
6438: EMPTY
6439: LIST
6440: LIST
6441: LIST
6442: LIST
6443: PUSH
6444: LD_INT 24
6446: PUSH
6447: LD_INT 3
6449: PUSH
6450: LD_INT 3
6452: PUSH
6453: LD_INT 46
6455: PUSH
6456: EMPTY
6457: LIST
6458: LIST
6459: LIST
6460: LIST
6461: PUSH
6462: LD_INT 22
6464: PUSH
6465: LD_INT 3
6467: PUSH
6468: LD_INT 3
6470: PUSH
6471: LD_INT 45
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: LIST
6478: LIST
6479: PUSH
6480: LD_INT 22
6482: PUSH
6483: LD_INT 3
6485: PUSH
6486: LD_INT 3
6488: PUSH
6489: LD_INT 43
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: LIST
6496: LIST
6497: PUSH
6498: LD_INT 24
6500: PUSH
6501: LD_INT 3
6503: PUSH
6504: LD_INT 3
6506: PUSH
6507: LD_INT 46
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: PUSH
6516: LD_INT 22
6518: PUSH
6519: LD_INT 3
6521: PUSH
6522: LD_INT 3
6524: PUSH
6525: LD_INT 45
6527: PUSH
6528: EMPTY
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: LIST
6540: LIST
6541: LIST
6542: LIST
6543: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
6544: LD_VAR 0 2
6548: PPUSH
6549: LD_VAR 0 3
6553: PPUSH
6554: CALL 75852 0 2
// end ; end ;
6558: GO 6561
6560: POP
// repeat wait ( 0 0$1 ) ;
6561: LD_INT 35
6563: PPUSH
6564: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
6568: LD_VAR 0 2
6572: PPUSH
6573: CALL 76200 0 1
6577: PUSH
6578: LD_INT 0
6580: EQUAL
6581: IFFALSE 6561
// wait ( 0 0$30 ) ;
6583: LD_INT 1050
6585: PPUSH
6586: CALL_OW 67
// _target := [ [ 86 , 77 ] , [ 63 , 38 ] ] ;
6590: LD_ADDR_VAR 0 5
6594: PUSH
6595: LD_INT 86
6597: PUSH
6598: LD_INT 77
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: PUSH
6605: LD_INT 63
6607: PUSH
6608: LD_INT 38
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
6619: LD_ADDR_VAR 0 4
6623: PUSH
6624: LD_INT 0
6626: PUSH
6627: LD_INT 0
6629: PUSH
6630: LD_INT 0
6632: PUSH
6633: LD_INT 1
6635: PUSH
6636: LD_INT 0
6638: PUSH
6639: LD_INT 0
6641: PUSH
6642: LD_INT 0
6644: PUSH
6645: LD_INT 0
6647: PUSH
6648: LD_INT 1
6650: PUSH
6651: LD_INT 0
6653: PUSH
6654: EMPTY
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
6666: LD_ADDR_VAR 0 6
6670: PUSH
6671: LD_EXP 71
6675: PUSH
6676: LD_VAR 0 2
6680: ARRAY
6681: PUSH
6682: LD_EXP 74
6686: PUSH
6687: LD_VAR 0 2
6691: ARRAY
6692: DIFF
6693: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
6694: LD_ADDR_EXP 71
6698: PUSH
6699: LD_EXP 71
6703: PPUSH
6704: LD_VAR 0 2
6708: PPUSH
6709: LD_EXP 71
6713: PUSH
6714: LD_VAR 0 2
6718: ARRAY
6719: PUSH
6720: LD_VAR 0 6
6724: DIFF
6725: PPUSH
6726: CALL_OW 1
6730: ST_TO_ADDR
// if not attackers then
6731: LD_VAR 0 6
6735: NOT
6736: IFFALSE 6740
// continue ;
6738: GO 5970
// repeat wait ( 0 0$1 ) ;
6740: LD_INT 35
6742: PPUSH
6743: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
6747: LD_VAR 0 6
6751: PPUSH
6752: LD_INT 60
6754: PUSH
6755: EMPTY
6756: LIST
6757: PPUSH
6758: CALL_OW 72
6762: NOT
6763: IFFALSE 6740
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
6765: LD_VAR 0 2
6769: PPUSH
6770: LD_VAR 0 6
6774: PPUSH
6775: LD_VAR 0 5
6779: PPUSH
6780: LD_VAR 0 4
6784: PPUSH
6785: CALL 76037 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
6789: LD_EXP 52
6793: PUSH
6794: LD_VAR 0 2
6798: ARRAY
6799: PPUSH
6800: LD_INT 50
6802: PUSH
6803: EMPTY
6804: LIST
6805: PPUSH
6806: CALL_OW 72
6810: NOT
6811: IFFALSE 5970
// end ;
6813: PPOPN 6
6815: END
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
6816: LD_INT 22
6818: PUSH
6819: LD_INT 3
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: LD_INT 30
6828: PUSH
6829: LD_INT 3
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: PUSH
6836: EMPTY
6837: LIST
6838: LIST
6839: PPUSH
6840: CALL_OW 69
6844: IFFALSE 7700
6846: GO 6848
6848: DISABLE
6849: LD_INT 0
6851: PPUSH
6852: PPUSH
6853: PPUSH
6854: PPUSH
6855: PPUSH
6856: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
6857: LD_INT 6300
6859: PUSH
6860: LD_INT 4200
6862: PUSH
6863: LD_INT 2100
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: LIST
6870: PUSH
6871: LD_OWVAR 67
6875: ARRAY
6876: PPUSH
6877: CALL_OW 67
// base := 1 ;
6881: LD_ADDR_VAR 0 2
6885: PUSH
6886: LD_INT 1
6888: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
6889: LD_INT 22
6891: PUSH
6892: LD_INT 3
6894: PUSH
6895: EMPTY
6896: LIST
6897: LIST
6898: PUSH
6899: LD_INT 30
6901: PUSH
6902: LD_INT 3
6904: PUSH
6905: EMPTY
6906: LIST
6907: LIST
6908: PUSH
6909: EMPTY
6910: LIST
6911: LIST
6912: PPUSH
6913: CALL_OW 69
6917: NOT
6918: IFFALSE 6922
// continue ;
6920: GO 6857
// case Rand ( 1 , 3 ) of 1 :
6922: LD_INT 1
6924: PPUSH
6925: LD_INT 3
6927: PPUSH
6928: CALL_OW 12
6932: PUSH
6933: LD_INT 1
6935: DOUBLE
6936: EQUAL
6937: IFTRUE 6941
6939: GO 7117
6941: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
6942: LD_ADDR_VAR 0 3
6946: PUSH
6947: LD_INT 22
6949: PUSH
6950: LD_INT 1
6952: PUSH
6953: LD_INT 3
6955: PUSH
6956: LD_INT 43
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: PUSH
6965: LD_INT 24
6967: PUSH
6968: LD_INT 1
6970: PUSH
6971: LD_INT 3
6973: PUSH
6974: LD_INT 46
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: PUSH
6983: LD_INT 24
6985: PUSH
6986: LD_INT 1
6988: PUSH
6989: LD_INT 3
6991: PUSH
6992: LD_INT 43
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: PUSH
7001: LD_INT 24
7003: PUSH
7004: LD_INT 1
7006: PUSH
7007: LD_INT 3
7009: PUSH
7010: LD_INT 46
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: PUSH
7019: LD_INT 22
7021: PUSH
7022: LD_INT 1
7024: PUSH
7025: LD_INT 3
7027: PUSH
7028: LD_INT 45
7030: PUSH
7031: EMPTY
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: PUSH
7037: LD_INT 22
7039: PUSH
7040: LD_INT 1
7042: PUSH
7043: LD_INT 3
7045: PUSH
7046: LD_INT 43
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: LIST
7053: LIST
7054: PUSH
7055: LD_INT 24
7057: PUSH
7058: LD_INT 1
7060: PUSH
7061: LD_INT 3
7063: PUSH
7064: LD_INT 46
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: LIST
7071: LIST
7072: PUSH
7073: LD_INT 22
7075: PUSH
7076: LD_INT 1
7078: PUSH
7079: LD_INT 3
7081: PUSH
7082: LD_INT 45
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: LIST
7089: LIST
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7101: LD_VAR 0 2
7105: PPUSH
7106: LD_VAR 0 3
7110: PPUSH
7111: CALL 75852 0 2
// end ; 2 :
7115: GO 7448
7117: LD_INT 2
7119: DOUBLE
7120: EQUAL
7121: IFTRUE 7125
7123: GO 7263
7125: POP
// begin tmp := [ [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7126: LD_ADDR_VAR 0 3
7130: PUSH
7131: LD_INT 24
7133: PUSH
7134: LD_INT 1
7136: PUSH
7137: LD_INT 3
7139: PUSH
7140: LD_INT 43
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: PUSH
7149: LD_INT 24
7151: PUSH
7152: LD_INT 1
7154: PUSH
7155: LD_INT 3
7157: PUSH
7158: LD_INT 46
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: PUSH
7167: LD_INT 24
7169: PUSH
7170: LD_INT 1
7172: PUSH
7173: LD_INT 3
7175: PUSH
7176: LD_INT 43
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 24
7187: PUSH
7188: LD_INT 1
7190: PUSH
7191: LD_INT 3
7193: PUSH
7194: LD_INT 46
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: PUSH
7203: LD_INT 22
7205: PUSH
7206: LD_INT 1
7208: PUSH
7209: LD_INT 3
7211: PUSH
7212: LD_INT 45
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: PUSH
7221: LD_INT 22
7223: PUSH
7224: LD_INT 1
7226: PUSH
7227: LD_INT 3
7229: PUSH
7230: LD_INT 45
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: PUSH
7239: EMPTY
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7247: LD_VAR 0 2
7251: PPUSH
7252: LD_VAR 0 3
7256: PPUSH
7257: CALL 75852 0 2
// end ; 3 :
7261: GO 7448
7263: LD_INT 3
7265: DOUBLE
7266: EQUAL
7267: IFTRUE 7271
7269: GO 7447
7271: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7272: LD_ADDR_VAR 0 3
7276: PUSH
7277: LD_INT 22
7279: PUSH
7280: LD_INT 1
7282: PUSH
7283: LD_INT 3
7285: PUSH
7286: LD_INT 43
7288: PUSH
7289: EMPTY
7290: LIST
7291: LIST
7292: LIST
7293: LIST
7294: PUSH
7295: LD_INT 24
7297: PUSH
7298: LD_INT 1
7300: PUSH
7301: LD_INT 3
7303: PUSH
7304: LD_INT 46
7306: PUSH
7307: EMPTY
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: PUSH
7313: LD_INT 22
7315: PUSH
7316: LD_INT 1
7318: PUSH
7319: LD_INT 3
7321: PUSH
7322: LD_INT 43
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: LIST
7329: LIST
7330: PUSH
7331: LD_INT 24
7333: PUSH
7334: LD_INT 1
7336: PUSH
7337: LD_INT 3
7339: PUSH
7340: LD_INT 46
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: PUSH
7349: LD_INT 22
7351: PUSH
7352: LD_INT 1
7354: PUSH
7355: LD_INT 3
7357: PUSH
7358: LD_INT 45
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: PUSH
7367: LD_INT 22
7369: PUSH
7370: LD_INT 1
7372: PUSH
7373: LD_INT 3
7375: PUSH
7376: LD_INT 43
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: PUSH
7385: LD_INT 24
7387: PUSH
7388: LD_INT 1
7390: PUSH
7391: LD_INT 3
7393: PUSH
7394: LD_INT 46
7396: PUSH
7397: EMPTY
7398: LIST
7399: LIST
7400: LIST
7401: LIST
7402: PUSH
7403: LD_INT 22
7405: PUSH
7406: LD_INT 1
7408: PUSH
7409: LD_INT 3
7411: PUSH
7412: LD_INT 45
7414: PUSH
7415: EMPTY
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7431: LD_VAR 0 2
7435: PPUSH
7436: LD_VAR 0 3
7440: PPUSH
7441: CALL 75852 0 2
// end ; end ;
7445: GO 7448
7447: POP
// repeat wait ( 0 0$1 ) ;
7448: LD_INT 35
7450: PPUSH
7451: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
7455: LD_VAR 0 2
7459: PPUSH
7460: CALL 76200 0 1
7464: PUSH
7465: LD_INT 0
7467: EQUAL
7468: IFFALSE 7448
// wait ( 0 0$30 ) ;
7470: LD_INT 1050
7472: PPUSH
7473: CALL_OW 67
// _target := [ [ 144 , 65 ] , [ 63 , 38 ] ] ;
7477: LD_ADDR_VAR 0 5
7481: PUSH
7482: LD_INT 144
7484: PUSH
7485: LD_INT 65
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: PUSH
7492: LD_INT 63
7494: PUSH
7495: LD_INT 38
7497: PUSH
7498: EMPTY
7499: LIST
7500: LIST
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
7506: LD_ADDR_VAR 0 4
7510: PUSH
7511: LD_INT 0
7513: PUSH
7514: LD_INT 0
7516: PUSH
7517: LD_INT 0
7519: PUSH
7520: LD_INT 1
7522: PUSH
7523: LD_INT 0
7525: PUSH
7526: LD_INT 0
7528: PUSH
7529: LD_INT 0
7531: PUSH
7532: LD_INT 0
7534: PUSH
7535: LD_INT 1
7537: PUSH
7538: LD_INT 0
7540: PUSH
7541: EMPTY
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
7553: LD_ADDR_VAR 0 6
7557: PUSH
7558: LD_EXP 71
7562: PUSH
7563: LD_VAR 0 2
7567: ARRAY
7568: PUSH
7569: LD_EXP 74
7573: PUSH
7574: LD_VAR 0 2
7578: ARRAY
7579: DIFF
7580: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
7581: LD_ADDR_EXP 71
7585: PUSH
7586: LD_EXP 71
7590: PPUSH
7591: LD_VAR 0 2
7595: PPUSH
7596: LD_EXP 71
7600: PUSH
7601: LD_VAR 0 2
7605: ARRAY
7606: PUSH
7607: LD_VAR 0 6
7611: DIFF
7612: PPUSH
7613: CALL_OW 1
7617: ST_TO_ADDR
// if not attackers then
7618: LD_VAR 0 6
7622: NOT
7623: IFFALSE 7627
// continue ;
7625: GO 6857
// repeat wait ( 0 0$1 ) ;
7627: LD_INT 35
7629: PPUSH
7630: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
7634: LD_VAR 0 6
7638: PPUSH
7639: LD_INT 60
7641: PUSH
7642: EMPTY
7643: LIST
7644: PPUSH
7645: CALL_OW 72
7649: NOT
7650: IFFALSE 7627
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
7652: LD_VAR 0 2
7656: PPUSH
7657: LD_VAR 0 6
7661: PPUSH
7662: LD_VAR 0 5
7666: PPUSH
7667: LD_VAR 0 4
7671: PPUSH
7672: CALL 76037 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
7676: LD_EXP 52
7680: PUSH
7681: LD_VAR 0 2
7685: ARRAY
7686: PPUSH
7687: LD_INT 50
7689: PUSH
7690: EMPTY
7691: LIST
7692: PPUSH
7693: CALL_OW 72
7697: NOT
7698: IFFALSE 6857
// end ;
7700: PPOPN 6
7702: END
// export RussiansDefeated ; every 0 0$1 trigger FirstAssaultRepelled and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
7703: LD_EXP 3
7707: PUSH
7708: LD_INT 22
7710: PUSH
7711: LD_INT 3
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: PUSH
7718: LD_INT 21
7720: PUSH
7721: LD_INT 1
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: PPUSH
7732: CALL_OW 69
7736: PUSH
7737: LD_INT 0
7739: EQUAL
7740: AND
7741: IFFALSE 7754
7743: GO 7745
7745: DISABLE
// begin RussiansDefeated := true ;
7746: LD_ADDR_EXP 42
7750: PUSH
7751: LD_INT 1
7753: ST_TO_ADDR
// end ;
7754: END
// every 0 0$1 trigger FirstAssaultRepelled and not JMM_Arrived do var i , un , filter , soldiers , bazookas , vehs , vehicle , medics , squad , attackers , _target , flags ;
7755: LD_EXP 3
7759: PUSH
7760: LD_EXP 5
7764: NOT
7765: AND
7766: IFFALSE 8739
7768: GO 7770
7770: DISABLE
7771: LD_INT 0
7773: PPUSH
7774: PPUSH
7775: PPUSH
7776: PPUSH
7777: PPUSH
7778: PPUSH
7779: PPUSH
7780: PPUSH
7781: PPUSH
7782: PPUSH
7783: PPUSH
7784: PPUSH
// begin wait ( [ Rand ( 5 5$00 , 6 6$30 ) , Rand ( 4 4$30 , 5 5$30 ) , Rand ( 4 4$00 , 5 5$00 ) ] [ Difficulty ] ) ;
7785: LD_INT 10500
7787: PPUSH
7788: LD_INT 13650
7790: PPUSH
7791: CALL_OW 12
7795: PUSH
7796: LD_INT 9450
7798: PPUSH
7799: LD_INT 11550
7801: PPUSH
7802: CALL_OW 12
7806: PUSH
7807: LD_INT 8400
7809: PPUSH
7810: LD_INT 10500
7812: PPUSH
7813: CALL_OW 12
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: LIST
7822: PUSH
7823: LD_OWVAR 67
7827: ARRAY
7828: PPUSH
7829: CALL_OW 67
// filter := [ ] ;
7833: LD_ADDR_VAR 0 3
7837: PUSH
7838: EMPTY
7839: ST_TO_ADDR
// soldiers := [ Rand ( 2 , 3 ) , Rand ( 3 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
7840: LD_ADDR_VAR 0 4
7844: PUSH
7845: LD_INT 2
7847: PPUSH
7848: LD_INT 3
7850: PPUSH
7851: CALL_OW 12
7855: PUSH
7856: LD_INT 3
7858: PPUSH
7859: LD_INT 4
7861: PPUSH
7862: CALL_OW 12
7866: PUSH
7867: LD_INT 3
7869: PPUSH
7870: LD_INT 5
7872: PPUSH
7873: CALL_OW 12
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: LIST
7882: PUSH
7883: LD_OWVAR 67
7887: ARRAY
7888: ST_TO_ADDR
// bazookas := [ 1 , Rand ( 1 , 2 ) , Rand ( 2 , 3 ) ] [ Difficulty ] ;
7889: LD_ADDR_VAR 0 5
7893: PUSH
7894: LD_INT 1
7896: PUSH
7897: LD_INT 1
7899: PPUSH
7900: LD_INT 2
7902: PPUSH
7903: CALL_OW 12
7907: PUSH
7908: LD_INT 2
7910: PPUSH
7911: LD_INT 3
7913: PPUSH
7914: CALL_OW 12
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: LIST
7923: PUSH
7924: LD_OWVAR 67
7928: ARRAY
7929: ST_TO_ADDR
// vehs := [ Rand ( 2 , 3 ) , Rand ( 2 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
7930: LD_ADDR_VAR 0 6
7934: PUSH
7935: LD_INT 2
7937: PPUSH
7938: LD_INT 3
7940: PPUSH
7941: CALL_OW 12
7945: PUSH
7946: LD_INT 2
7948: PPUSH
7949: LD_INT 4
7951: PPUSH
7952: CALL_OW 12
7956: PUSH
7957: LD_INT 3
7959: PPUSH
7960: LD_INT 5
7962: PPUSH
7963: CALL_OW 12
7967: PUSH
7968: EMPTY
7969: LIST
7970: LIST
7971: LIST
7972: PUSH
7973: LD_OWVAR 67
7977: ARRAY
7978: ST_TO_ADDR
// medics := [ 1 , 2 , 2 ] [ Difficulty ] ;
7979: LD_ADDR_VAR 0 8
7983: PUSH
7984: LD_INT 1
7986: PUSH
7987: LD_INT 2
7989: PUSH
7990: LD_INT 2
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: LIST
7997: PUSH
7998: LD_OWVAR 67
8002: ARRAY
8003: ST_TO_ADDR
// uc_side := 3 ;
8004: LD_ADDR_OWVAR 20
8008: PUSH
8009: LD_INT 3
8011: ST_TO_ADDR
// uc_nation := nation_russian ;
8012: LD_ADDR_OWVAR 21
8016: PUSH
8017: LD_INT 3
8019: ST_TO_ADDR
// for i = 1 to soldiers do
8020: LD_ADDR_VAR 0 1
8024: PUSH
8025: DOUBLE
8026: LD_INT 1
8028: DEC
8029: ST_TO_ADDR
8030: LD_VAR 0 4
8034: PUSH
8035: FOR_TO
8036: IFFALSE 8078
// begin PrepareSoldier ( 0 , game_eskill ) ;
8038: LD_INT 0
8040: PPUSH
8041: LD_EXP 39
8045: PPUSH
8046: CALL_OW 381
// un := CreateHuman ;
8050: LD_ADDR_VAR 0 2
8054: PUSH
8055: CALL_OW 44
8059: ST_TO_ADDR
// filter := filter ^ un ;
8060: LD_ADDR_VAR 0 3
8064: PUSH
8065: LD_VAR 0 3
8069: PUSH
8070: LD_VAR 0 2
8074: ADD
8075: ST_TO_ADDR
// end ;
8076: GO 8035
8078: POP
8079: POP
// for i = 1 to bazookas do
8080: LD_ADDR_VAR 0 1
8084: PUSH
8085: DOUBLE
8086: LD_INT 1
8088: DEC
8089: ST_TO_ADDR
8090: LD_VAR 0 5
8094: PUSH
8095: FOR_TO
8096: IFFALSE 8146
// begin PrepareSoldier ( 0 , game_eskill ) ;
8098: LD_INT 0
8100: PPUSH
8101: LD_EXP 39
8105: PPUSH
8106: CALL_OW 381
// hc_class := class_bazooker ;
8110: LD_ADDR_OWVAR 28
8114: PUSH
8115: LD_INT 9
8117: ST_TO_ADDR
// un := CreateHuman ;
8118: LD_ADDR_VAR 0 2
8122: PUSH
8123: CALL_OW 44
8127: ST_TO_ADDR
// filter := filter ^ un ;
8128: LD_ADDR_VAR 0 3
8132: PUSH
8133: LD_VAR 0 3
8137: PUSH
8138: LD_VAR 0 2
8142: ADD
8143: ST_TO_ADDR
// end ;
8144: GO 8095
8146: POP
8147: POP
// for i = 1 to medics do
8148: LD_ADDR_VAR 0 1
8152: PUSH
8153: DOUBLE
8154: LD_INT 1
8156: DEC
8157: ST_TO_ADDR
8158: LD_VAR 0 8
8162: PUSH
8163: FOR_TO
8164: IFFALSE 8206
// begin PrepareScientist ( 0 , game_eskill ) ;
8166: LD_INT 0
8168: PPUSH
8169: LD_EXP 39
8173: PPUSH
8174: CALL_OW 384
// un := CreateHuman ;
8178: LD_ADDR_VAR 0 2
8182: PUSH
8183: CALL_OW 44
8187: ST_TO_ADDR
// filter := filter ^ un ;
8188: LD_ADDR_VAR 0 3
8192: PUSH
8193: LD_VAR 0 3
8197: PUSH
8198: LD_VAR 0 2
8202: ADD
8203: ST_TO_ADDR
// end ;
8204: GO 8163
8206: POP
8207: POP
// for i = 1 to vehs do
8208: LD_ADDR_VAR 0 1
8212: PUSH
8213: DOUBLE
8214: LD_INT 1
8216: DEC
8217: ST_TO_ADDR
8218: LD_VAR 0 6
8222: PUSH
8223: FOR_TO
8224: IFFALSE 8416
// begin case Rand ( 1 , 5 ) of 1 :
8226: LD_INT 1
8228: PPUSH
8229: LD_INT 5
8231: PPUSH
8232: CALL_OW 12
8236: PUSH
8237: LD_INT 1
8239: DOUBLE
8240: EQUAL
8241: IFTRUE 8245
8243: GO 8267
8245: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 2 :
8246: LD_INT 22
8248: PPUSH
8249: LD_INT 3
8251: PPUSH
8252: LD_INT 3
8254: PPUSH
8255: LD_INT 43
8257: PPUSH
8258: LD_INT 100
8260: PPUSH
8261: CALL 16591 0 5
8265: GO 8388
8267: LD_INT 2
8269: DOUBLE
8270: EQUAL
8271: IFTRUE 8275
8273: GO 8297
8275: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gun , 100 ) ; 3 :
8276: LD_INT 22
8278: PPUSH
8279: LD_INT 3
8281: PPUSH
8282: LD_INT 3
8284: PPUSH
8285: LD_INT 44
8287: PPUSH
8288: LD_INT 100
8290: PPUSH
8291: CALL 16591 0 5
8295: GO 8388
8297: LD_INT 3
8299: DOUBLE
8300: EQUAL
8301: IFTRUE 8305
8303: GO 8327
8305: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher , 100 ) ; 4 :
8306: LD_INT 22
8308: PPUSH
8309: LD_INT 3
8311: PPUSH
8312: LD_INT 3
8314: PPUSH
8315: LD_INT 45
8317: PPUSH
8318: LD_INT 100
8320: PPUSH
8321: CALL 16591 0 5
8325: GO 8388
8327: LD_INT 4
8329: DOUBLE
8330: EQUAL
8331: IFTRUE 8335
8333: GO 8357
8335: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 5 :
8336: LD_INT 24
8338: PPUSH
8339: LD_INT 3
8341: PPUSH
8342: LD_INT 3
8344: PPUSH
8345: LD_INT 43
8347: PPUSH
8348: LD_INT 100
8350: PPUSH
8351: CALL 16591 0 5
8355: GO 8388
8357: LD_INT 5
8359: DOUBLE
8360: EQUAL
8361: IFTRUE 8365
8363: GO 8387
8365: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun , 100 ) ; end ;
8366: LD_INT 24
8368: PPUSH
8369: LD_INT 3
8371: PPUSH
8372: LD_INT 3
8374: PPUSH
8375: LD_INT 46
8377: PPUSH
8378: LD_INT 100
8380: PPUSH
8381: CALL 16591 0 5
8385: GO 8388
8387: POP
// vehicle := CreateVehicle ;
8388: LD_ADDR_VAR 0 7
8392: PUSH
8393: CALL_OW 45
8397: ST_TO_ADDR
// filter := filter ^ vehicle ;
8398: LD_ADDR_VAR 0 3
8402: PUSH
8403: LD_VAR 0 3
8407: PUSH
8408: LD_VAR 0 7
8412: ADD
8413: ST_TO_ADDR
// end ;
8414: GO 8223
8416: POP
8417: POP
// for i = 1 to filter do
8418: LD_ADDR_VAR 0 1
8422: PUSH
8423: DOUBLE
8424: LD_INT 1
8426: DEC
8427: ST_TO_ADDR
8428: LD_VAR 0 3
8432: PUSH
8433: FOR_TO
8434: IFFALSE 8459
// PlaceUnitArea ( filter [ i ] , RUAttackSpawn1 , false ) ;
8436: LD_VAR 0 3
8440: PUSH
8441: LD_VAR 0 1
8445: ARRAY
8446: PPUSH
8447: LD_INT 14
8449: PPUSH
8450: LD_INT 0
8452: PPUSH
8453: CALL_OW 49
8457: GO 8433
8459: POP
8460: POP
// case Rand ( 1 , 3 ) of 1 :
8461: LD_INT 1
8463: PPUSH
8464: LD_INT 3
8466: PPUSH
8467: CALL_OW 12
8471: PUSH
8472: LD_INT 1
8474: DOUBLE
8475: EQUAL
8476: IFTRUE 8480
8478: GO 8534
8480: POP
// _target := [ [ 165 , 114 ] , [ 104 , 108 ] , [ 86 , 77 ] , [ 63 , 38 ] ] ; 2 :
8481: LD_ADDR_VAR 0 11
8485: PUSH
8486: LD_INT 165
8488: PUSH
8489: LD_INT 114
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: PUSH
8496: LD_INT 104
8498: PUSH
8499: LD_INT 108
8501: PUSH
8502: EMPTY
8503: LIST
8504: LIST
8505: PUSH
8506: LD_INT 86
8508: PUSH
8509: LD_INT 77
8511: PUSH
8512: EMPTY
8513: LIST
8514: LIST
8515: PUSH
8516: LD_INT 63
8518: PUSH
8519: LD_INT 38
8521: PUSH
8522: EMPTY
8523: LIST
8524: LIST
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: ST_TO_ADDR
8532: GO 8659
8534: LD_INT 2
8536: DOUBLE
8537: EQUAL
8538: IFTRUE 8542
8540: GO 8596
8542: POP
// _target := [ [ 165 , 114 ] , [ 146 , 71 ] , [ 112 , 41 ] , [ 63 , 38 ] ] ; 3 :
8543: LD_ADDR_VAR 0 11
8547: PUSH
8548: LD_INT 165
8550: PUSH
8551: LD_INT 114
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: PUSH
8558: LD_INT 146
8560: PUSH
8561: LD_INT 71
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: PUSH
8568: LD_INT 112
8570: PUSH
8571: LD_INT 41
8573: PUSH
8574: EMPTY
8575: LIST
8576: LIST
8577: PUSH
8578: LD_INT 63
8580: PUSH
8581: LD_INT 38
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: PUSH
8588: EMPTY
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: ST_TO_ADDR
8594: GO 8659
8596: LD_INT 3
8598: DOUBLE
8599: EQUAL
8600: IFTRUE 8604
8602: GO 8658
8604: POP
// _target := [ [ 165 , 114 ] , [ 63 , 99 ] , [ 55 , 77 ] , [ 63 , 38 ] ] ; end ;
8605: LD_ADDR_VAR 0 11
8609: PUSH
8610: LD_INT 165
8612: PUSH
8613: LD_INT 114
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: PUSH
8620: LD_INT 63
8622: PUSH
8623: LD_INT 99
8625: PUSH
8626: EMPTY
8627: LIST
8628: LIST
8629: PUSH
8630: LD_INT 55
8632: PUSH
8633: LD_INT 77
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: PUSH
8640: LD_INT 63
8642: PUSH
8643: LD_INT 38
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: ST_TO_ADDR
8656: GO 8659
8658: POP
// attackers := filter ;
8659: LD_ADDR_VAR 0 10
8663: PUSH
8664: LD_VAR 0 3
8668: ST_TO_ADDR
// flags := [ 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 ] ;
8669: LD_ADDR_VAR 0 12
8673: PUSH
8674: LD_INT 0
8676: PUSH
8677: LD_INT 1
8679: PUSH
8680: LD_INT 0
8682: PUSH
8683: LD_INT 1
8685: PUSH
8686: LD_INT 1
8688: PUSH
8689: LD_INT 0
8691: PUSH
8692: LD_INT 0
8694: PUSH
8695: LD_INT 0
8697: PUSH
8698: LD_INT 1
8700: PUSH
8701: LD_INT 1
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: ST_TO_ADDR
// MC_PrepareAttack ( 1 , attackers , _target , flags ) ;
8716: LD_INT 1
8718: PPUSH
8719: LD_VAR 0 10
8723: PPUSH
8724: LD_VAR 0 11
8728: PPUSH
8729: LD_VAR 0 12
8733: PPUSH
8734: CALL 76037 0 4
// enable ;
8738: ENABLE
// end ; end_of_file
8739: PPOPN 12
8741: END
// export Losses ; on UnitDestroyed ( un ) do begin if un = Brighton then
8742: LD_VAR 0 1
8746: PUSH
8747: LD_EXP 8
8751: EQUAL
8752: IFFALSE 8768
// begin wait ( 0 0$1 ) ;
8754: LD_INT 35
8756: PPUSH
8757: CALL_OW 67
// YouLost ( Brighton ) ;
8761: LD_STRING Brighton
8763: PPUSH
8764: CALL_OW 104
// end ; if un = JMM then
8768: LD_VAR 0 1
8772: PUSH
8773: LD_EXP 36
8777: EQUAL
8778: IFFALSE 8794
// begin wait ( 0 0$1 ) ;
8780: LD_INT 35
8782: PPUSH
8783: CALL_OW 67
// YouLost ( JMM ) ;
8787: LD_STRING JMM
8789: PPUSH
8790: CALL_OW 104
// end ; if un = Megan then
8794: LD_VAR 0 1
8798: PUSH
8799: LD_EXP 10
8803: EQUAL
8804: IFFALSE 8818
// begin Say ( Brighton , DBrighton-MeganDeath ) ;
8806: LD_EXP 8
8810: PPUSH
8811: LD_STRING DBrighton-MeganDeath
8813: PPUSH
8814: CALL_OW 88
// end ; if un = Palmer then
8818: LD_VAR 0 1
8822: PUSH
8823: LD_EXP 9
8827: EQUAL
8828: IFFALSE 8842
// begin Say ( Brighton , DBrighton-PalmerDeath ) ;
8830: LD_EXP 8
8834: PPUSH
8835: LD_STRING DBrighton-PalmerDeath
8837: PPUSH
8838: CALL_OW 88
// end ; if un = Burlak then
8842: LD_VAR 0 1
8846: PUSH
8847: LD_EXP 18
8851: EQUAL
8852: IFFALSE 8884
// begin if JMM_Arrived then
8854: LD_EXP 5
8858: IFFALSE 8872
// Say ( JMM , DJMM-BurlakDead ) ;
8860: LD_EXP 36
8864: PPUSH
8865: LD_STRING DJMM-BurlakDead
8867: PPUSH
8868: CALL_OW 88
// Say ( Palmer , DSol-BurlakDead ) ;
8872: LD_EXP 9
8876: PPUSH
8877: LD_STRING DSol-BurlakDead
8879: PPUSH
8880: CALL_OW 88
// end ; if un = BetaA or un = BetaB then
8884: LD_VAR 0 1
8888: PUSH
8889: LD_INT 1
8891: EQUAL
8892: PUSH
8893: LD_VAR 0 1
8897: PUSH
8898: LD_INT 3
8900: EQUAL
8901: OR
8902: IFFALSE 8918
// begin wait ( 0 0$1 ) ;
8904: LD_INT 35
8906: PPUSH
8907: CALL_OW 67
// YouLost ( Depot ) ;
8911: LD_STRING Depot
8913: PPUSH
8914: CALL_OW 104
// end ; if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
8918: LD_VAR 0 1
8922: PPUSH
8923: CALL_OW 255
8927: PUSH
8928: LD_INT 1
8930: EQUAL
8931: PUSH
8932: LD_VAR 0 1
8936: PPUSH
8937: CALL_OW 247
8941: PUSH
8942: LD_INT 1
8944: EQUAL
8945: AND
8946: IFFALSE 8962
// Losses := Losses + 1 ;
8948: LD_ADDR_EXP 43
8952: PUSH
8953: LD_EXP 43
8957: PUSH
8958: LD_INT 1
8960: PLUS
8961: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
8962: LD_VAR 0 1
8966: PPUSH
8967: CALL 79187 0 1
// end ;
8971: PPOPN 1
8973: END
// on UnitGoesToRed ( un ) do begin if un = Yashin then
8974: LD_VAR 0 1
8978: PUSH
8979: LD_EXP 12
8983: EQUAL
8984: IFFALSE 8998
// ForceSay ( Yashin , DDeath-Yas-3 ) ;
8986: LD_EXP 12
8990: PPUSH
8991: LD_STRING DDeath-Yas-3
8993: PPUSH
8994: CALL_OW 91
// if un = Popov then
8998: LD_VAR 0 1
9002: PUSH
9003: LD_EXP 13
9007: EQUAL
9008: IFFALSE 9022
// ForceSay ( Popov , DDeath-Pop-3 ) ;
9010: LD_EXP 13
9014: PPUSH
9015: LD_STRING DDeath-Pop-3
9017: PPUSH
9018: CALL_OW 91
// if un = Gaydar then
9022: LD_VAR 0 1
9026: PUSH
9027: LD_EXP 14
9031: EQUAL
9032: IFFALSE 9046
// ForceSay ( Gaydar , DDeath-Gay-3 ) ;
9034: LD_EXP 14
9038: PPUSH
9039: LD_STRING DDeath-Gay-3
9041: PPUSH
9042: CALL_OW 91
// if un = Sevi then
9046: LD_VAR 0 1
9050: PUSH
9051: LD_EXP 15
9055: EQUAL
9056: IFFALSE 9070
// ForceSay ( Sevi , DDeath-Vse-3 ) ;
9058: LD_EXP 15
9062: PPUSH
9063: LD_STRING DDeath-Vse-3
9065: PPUSH
9066: CALL_OW 91
// end ;
9070: PPOPN 1
9072: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_laser then
9073: LD_VAR 0 1
9077: PUSH
9078: LD_INT 10
9080: EQUAL
9081: IFFALSE 9119
// begin Say ( Brighton , DBrighton-C1 ) ;
9083: LD_EXP 8
9087: PPUSH
9088: LD_STRING DBrighton-C1
9090: PPUSH
9091: CALL_OW 88
// Say ( Megan , DMegan-C1 ) ;
9095: LD_EXP 10
9099: PPUSH
9100: LD_STRING DMegan-C1
9102: PPUSH
9103: CALL_OW 88
// Say ( Brighton , DBrighton-C2 ) ;
9107: LD_EXP 8
9111: PPUSH
9112: LD_STRING DBrighton-C2
9114: PPUSH
9115: CALL_OW 88
// end ; MCE_ResearchComplete ( tech , lab ) ;
9119: LD_VAR 0 1
9123: PPUSH
9124: LD_VAR 0 2
9128: PPUSH
9129: CALL 78883 0 2
// end ;
9133: PPOPN 2
9135: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
9136: LD_VAR 0 1
9140: PPUSH
9141: LD_VAR 0 2
9145: PPUSH
9146: CALL 81166 0 2
// end ;
9150: PPOPN 2
9152: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
9153: LD_VAR 0 1
9157: PPUSH
9158: CALL 80234 0 1
// end ;
9162: PPOPN 1
9164: END
// export RUFirstDepot ; on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 then
9165: LD_VAR 0 1
9169: PPUSH
9170: CALL_OW 266
9174: PUSH
9175: LD_INT 0
9177: EQUAL
9178: PUSH
9179: LD_VAR 0 1
9183: PPUSH
9184: CALL_OW 255
9188: PUSH
9189: LD_INT 3
9191: EQUAL
9192: AND
9193: IFFALSE 9255
// begin SetResourceType ( GetBase ( b ) , mat_cans , 10000 ) ;
9195: LD_VAR 0 1
9199: PPUSH
9200: CALL_OW 274
9204: PPUSH
9205: LD_INT 1
9207: PPUSH
9208: LD_INT 10000
9210: PPUSH
9211: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 250 ) ;
9215: LD_VAR 0 1
9219: PPUSH
9220: CALL_OW 274
9224: PPUSH
9225: LD_INT 2
9227: PPUSH
9228: LD_INT 250
9230: PPUSH
9231: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_siberit , 100 ) ;
9235: LD_VAR 0 1
9239: PPUSH
9240: CALL_OW 274
9244: PPUSH
9245: LD_INT 3
9247: PPUSH
9248: LD_INT 100
9250: PPUSH
9251: CALL_OW 277
// end ; MCE_BuildingComplete ( b ) ;
9255: LD_VAR 0 1
9259: PPUSH
9260: CALL 80475 0 1
// end ;
9264: PPOPN 1
9266: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
9267: LD_VAR 0 1
9271: PPUSH
9272: LD_VAR 0 2
9276: PPUSH
9277: LD_VAR 0 3
9281: PPUSH
9282: LD_VAR 0 4
9286: PPUSH
9287: LD_VAR 0 5
9291: PPUSH
9292: CALL 78503 0 5
// end ;
9296: PPOPN 5
9298: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
9299: LD_VAR 0 1
9303: PPUSH
9304: LD_VAR 0 2
9308: PPUSH
9309: CALL 78093 0 2
// end ;
9313: PPOPN 2
9315: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
9316: LD_VAR 0 1
9320: PPUSH
9321: LD_VAR 0 2
9325: PPUSH
9326: LD_VAR 0 3
9330: PPUSH
9331: LD_VAR 0 4
9335: PPUSH
9336: CALL 77931 0 4
// end ;
9340: PPOPN 4
9342: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
9343: LD_VAR 0 1
9347: PPUSH
9348: LD_VAR 0 2
9352: PPUSH
9353: LD_VAR 0 3
9357: PPUSH
9358: CALL 77706 0 3
// end ;
9362: PPOPN 3
9364: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
9365: LD_VAR 0 1
9369: PPUSH
9370: LD_VAR 0 2
9374: PPUSH
9375: CALL 77591 0 2
// end ;
9379: PPOPN 2
9381: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
9382: LD_VAR 0 1
9386: PPUSH
9387: LD_VAR 0 2
9391: PPUSH
9392: CALL 81427 0 2
// end ;
9396: PPOPN 2
9398: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin if GetSide ( driver ) = 6 then
9399: LD_VAR 0 1
9403: PPUSH
9404: CALL_OW 255
9408: PUSH
9409: LD_INT 6
9411: EQUAL
9412: IFFALSE 9507
// if AssaultStarted then
9414: LD_EXP 7
9418: IFFALSE 9492
// case Rand ( 1 , 4 ) of 1 .. 3 :
9420: LD_INT 1
9422: PPUSH
9423: LD_INT 4
9425: PPUSH
9426: CALL_OW 12
9430: PUSH
9431: LD_INT 1
9433: DOUBLE
9434: GREATEREQUAL
9435: IFFALSE 9443
9437: LD_INT 3
9439: DOUBLE
9440: LESSEQUAL
9441: IFTRUE 9445
9443: GO 9463
9445: POP
// ComAgressiveMove ( driver , 67 , 37 ) ; 4 :
9446: LD_VAR 0 1
9450: PPUSH
9451: LD_INT 67
9453: PPUSH
9454: LD_INT 37
9456: PPUSH
9457: CALL_OW 114
9461: GO 9490
9463: LD_INT 4
9465: DOUBLE
9466: EQUAL
9467: IFTRUE 9471
9469: GO 9489
9471: POP
// ComMoveXY ( driver , 120 , 131 ) ; end else
9472: LD_VAR 0 1
9476: PPUSH
9477: LD_INT 120
9479: PPUSH
9480: LD_INT 131
9482: PPUSH
9483: CALL_OW 111
9487: GO 9490
9489: POP
9490: GO 9507
// ComMoveXY ( driver , 120 , 131 ) ;
9492: LD_VAR 0 1
9496: PPUSH
9497: LD_INT 120
9499: PPUSH
9500: LD_INT 131
9502: PPUSH
9503: CALL_OW 111
// MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
9507: LD_VAR 0 1
9511: PPUSH
9512: LD_VAR 0 2
9516: PPUSH
9517: LD_VAR 0 3
9521: PPUSH
9522: LD_VAR 0 4
9526: PPUSH
9527: CALL 81643 0 4
// end ;
9531: PPOPN 4
9533: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
9534: LD_VAR 0 1
9538: PPUSH
9539: LD_VAR 0 2
9543: PPUSH
9544: CALL 77400 0 2
// end ; end_of_file
9548: PPOPN 2
9550: END
// every 0 0$1 trigger JMM_Arrived and RussiansDefeated do
9551: LD_EXP 5
9555: PUSH
9556: LD_EXP 42
9560: AND
9561: IFFALSE 9742
9563: GO 9565
9565: DISABLE
// begin wait ( 0 0$2 ) ;
9566: LD_INT 70
9568: PPUSH
9569: CALL_OW 67
// Say ( Brighton , DBrighton-G1 ) ;
9573: LD_EXP 8
9577: PPUSH
9578: LD_STRING DBrighton-G1
9580: PPUSH
9581: CALL_OW 88
// if Losses < 1 then
9585: LD_EXP 43
9589: PUSH
9590: LD_INT 1
9592: LESS
9593: IFFALSE 9607
// AddMedal ( Losses , 1 ) else
9595: LD_STRING Losses
9597: PPUSH
9598: LD_INT 1
9600: PPUSH
9601: CALL_OW 101
9605: GO 9640
// if Losses < 5 then
9607: LD_EXP 43
9611: PUSH
9612: LD_INT 5
9614: LESS
9615: IFFALSE 9629
// AddMedal ( Losses , 2 ) else
9617: LD_STRING Losses
9619: PPUSH
9620: LD_INT 2
9622: PPUSH
9623: CALL_OW 101
9627: GO 9640
// AddMedal ( Losses , - 1 ) ;
9629: LD_STRING Losses
9631: PPUSH
9632: LD_INT 1
9634: NEG
9635: PPUSH
9636: CALL_OW 101
// if LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
9640: LD_EXP 6
9644: PUSH
9645: LD_INT 10
9647: PPUSH
9648: LD_INT 1
9650: PPUSH
9651: CALL_OW 321
9655: PUSH
9656: LD_INT 2
9658: EQUAL
9659: AND
9660: IFFALSE 9674
// AddMedal ( Laser , 1 ) else
9662: LD_STRING Laser
9664: PPUSH
9665: LD_INT 1
9667: PPUSH
9668: CALL_OW 101
9672: GO 9721
// if not LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
9674: LD_EXP 6
9678: NOT
9679: PUSH
9680: LD_INT 10
9682: PPUSH
9683: LD_INT 1
9685: PPUSH
9686: CALL_OW 321
9690: PUSH
9691: LD_INT 2
9693: EQUAL
9694: AND
9695: IFFALSE 9710
// AddMedal ( Laser , - 1 ) else
9697: LD_STRING Laser
9699: PPUSH
9700: LD_INT 1
9702: NEG
9703: PPUSH
9704: CALL_OW 101
9708: GO 9721
// AddMedal ( Laser , - 2 ) ;
9710: LD_STRING Laser
9712: PPUSH
9713: LD_INT 2
9715: NEG
9716: PPUSH
9717: CALL_OW 101
// AddMedal ( med3 , 1 ) ;
9721: LD_STRING med3
9723: PPUSH
9724: LD_INT 1
9726: PPUSH
9727: CALL_OW 101
// GiveMedals ( BaseMain ) ;
9731: LD_STRING BaseMain
9733: PPUSH
9734: CALL_OW 102
// YouWin ;
9738: CALL_OW 103
// end ; end_of_file
9742: END
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
9743: LD_INT 0
9745: PPUSH
9746: PPUSH
// area = ListEnvironmentArea ( area ) ;
9747: LD_ADDR_VAR 0 2
9751: PUSH
9752: LD_VAR 0 2
9756: PPUSH
9757: CALL_OW 353
9761: ST_TO_ADDR
// if bulldozer > 0 then
9762: LD_VAR 0 1
9766: PUSH
9767: LD_INT 0
9769: GREATER
9770: IFFALSE 9881
// for i = area downto 1 do
9772: LD_ADDR_VAR 0 4
9776: PUSH
9777: DOUBLE
9778: LD_VAR 0 2
9782: INC
9783: ST_TO_ADDR
9784: LD_INT 1
9786: PUSH
9787: FOR_DOWNTO
9788: IFFALSE 9879
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
9790: LD_VAR 0 2
9794: PUSH
9795: LD_VAR 0 4
9799: ARRAY
9800: PUSH
9801: LD_INT 1
9803: ARRAY
9804: PPUSH
9805: LD_VAR 0 2
9809: PUSH
9810: LD_VAR 0 4
9814: ARRAY
9815: PUSH
9816: LD_INT 2
9818: ARRAY
9819: PPUSH
9820: CALL_OW 351
9824: IFFALSE 9877
// if not HasTask ( bulldozer ) then
9826: LD_VAR 0 1
9830: PPUSH
9831: CALL_OW 314
9835: NOT
9836: IFFALSE 9877
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
9838: LD_VAR 0 1
9842: PPUSH
9843: LD_VAR 0 2
9847: PUSH
9848: LD_VAR 0 4
9852: ARRAY
9853: PUSH
9854: LD_INT 1
9856: ARRAY
9857: PPUSH
9858: LD_VAR 0 2
9862: PUSH
9863: LD_VAR 0 4
9867: ARRAY
9868: PUSH
9869: LD_INT 2
9871: ARRAY
9872: PPUSH
9873: CALL_OW 171
9877: GO 9787
9879: POP
9880: POP
// end ;
9881: LD_VAR 0 3
9885: RET
// export function ComMeeting ( team , area ) ; var i ; begin
9886: LD_INT 0
9888: PPUSH
9889: PPUSH
// for i in team do
9890: LD_ADDR_VAR 0 4
9894: PUSH
9895: LD_VAR 0 1
9899: PUSH
9900: FOR_IN
9901: IFFALSE 9951
// begin if IsInUnit ( i ) then
9903: LD_VAR 0 4
9907: PPUSH
9908: CALL_OW 310
9912: IFFALSE 9923
// ComExitBuilding ( i ) ;
9914: LD_VAR 0 4
9918: PPUSH
9919: CALL_OW 122
// AddComMoveToArea ( i , SpotArea ) ;
9923: LD_VAR 0 4
9927: PPUSH
9928: LD_INT 13
9930: PPUSH
9931: CALL_OW 173
// AddComTurnUnit ( i , Brighton ) ;
9935: LD_VAR 0 4
9939: PPUSH
9940: LD_EXP 8
9944: PPUSH
9945: CALL_OW 179
// end ;
9949: GO 9900
9951: POP
9952: POP
// end ; end_of_file
9953: LD_VAR 0 3
9957: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
9958: LD_INT 0
9960: PPUSH
9961: PPUSH
// if exist_mode then
9962: LD_VAR 0 2
9966: IFFALSE 9991
// unit := CreateCharacter ( prefix & ident ) else
9968: LD_ADDR_VAR 0 5
9972: PUSH
9973: LD_VAR 0 3
9977: PUSH
9978: LD_VAR 0 1
9982: STR
9983: PPUSH
9984: CALL_OW 34
9988: ST_TO_ADDR
9989: GO 10006
// unit := NewCharacter ( ident ) ;
9991: LD_ADDR_VAR 0 5
9995: PUSH
9996: LD_VAR 0 1
10000: PPUSH
10001: CALL_OW 25
10005: ST_TO_ADDR
// result := unit ;
10006: LD_ADDR_VAR 0 4
10010: PUSH
10011: LD_VAR 0 5
10015: ST_TO_ADDR
// end ;
10016: LD_VAR 0 4
10020: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10021: LD_INT 0
10023: PPUSH
10024: PPUSH
// if not side or not nation then
10025: LD_VAR 0 1
10029: NOT
10030: PUSH
10031: LD_VAR 0 2
10035: NOT
10036: OR
10037: IFFALSE 10041
// exit ;
10039: GO 10677
// case nation of nation_american :
10041: LD_VAR 0 2
10045: PUSH
10046: LD_INT 1
10048: DOUBLE
10049: EQUAL
10050: IFTRUE 10054
10052: GO 10224
10054: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ; nation_arabian :
10055: LD_ADDR_VAR 0 4
10059: PUSH
10060: LD_INT 35
10062: PUSH
10063: LD_INT 45
10065: PUSH
10066: LD_INT 46
10068: PUSH
10069: LD_INT 47
10071: PUSH
10072: LD_INT 1
10074: PUSH
10075: LD_INT 2
10077: PUSH
10078: LD_INT 6
10080: PUSH
10081: LD_INT 15
10083: PUSH
10084: LD_INT 16
10086: PUSH
10087: LD_INT 7
10089: PUSH
10090: LD_INT 12
10092: PUSH
10093: LD_INT 13
10095: PUSH
10096: LD_INT 10
10098: PUSH
10099: LD_INT 14
10101: PUSH
10102: LD_INT 20
10104: PUSH
10105: LD_INT 21
10107: PUSH
10108: LD_INT 22
10110: PUSH
10111: LD_INT 25
10113: PUSH
10114: LD_INT 32
10116: PUSH
10117: LD_INT 27
10119: PUSH
10120: LD_INT 36
10122: PUSH
10123: LD_INT 69
10125: PUSH
10126: LD_INT 39
10128: PUSH
10129: LD_INT 34
10131: PUSH
10132: LD_INT 40
10134: PUSH
10135: LD_INT 48
10137: PUSH
10138: LD_INT 49
10140: PUSH
10141: LD_INT 50
10143: PUSH
10144: LD_INT 51
10146: PUSH
10147: LD_INT 52
10149: PUSH
10150: LD_INT 53
10152: PUSH
10153: LD_INT 54
10155: PUSH
10156: LD_INT 55
10158: PUSH
10159: LD_INT 56
10161: PUSH
10162: LD_INT 57
10164: PUSH
10165: LD_INT 58
10167: PUSH
10168: LD_INT 59
10170: PUSH
10171: LD_INT 60
10173: PUSH
10174: LD_INT 61
10176: PUSH
10177: LD_INT 62
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: ST_TO_ADDR
10222: GO 10601
10224: LD_INT 2
10226: DOUBLE
10227: EQUAL
10228: IFTRUE 10232
10230: GO 10410
10232: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
10233: LD_ADDR_VAR 0 4
10237: PUSH
10238: LD_INT 35
10240: PUSH
10241: LD_INT 45
10243: PUSH
10244: LD_INT 46
10246: PUSH
10247: LD_INT 47
10249: PUSH
10250: LD_INT 70
10252: PUSH
10253: LD_INT 1
10255: PUSH
10256: LD_INT 11
10258: PUSH
10259: LD_INT 3
10261: PUSH
10262: LD_INT 4
10264: PUSH
10265: LD_INT 5
10267: PUSH
10268: LD_INT 6
10270: PUSH
10271: LD_INT 15
10273: PUSH
10274: LD_INT 18
10276: PUSH
10277: LD_INT 7
10279: PUSH
10280: LD_INT 17
10282: PUSH
10283: LD_INT 8
10285: PUSH
10286: LD_INT 20
10288: PUSH
10289: LD_INT 21
10291: PUSH
10292: LD_INT 22
10294: PUSH
10295: LD_INT 72
10297: PUSH
10298: LD_INT 26
10300: PUSH
10301: LD_INT 69
10303: PUSH
10304: LD_INT 39
10306: PUSH
10307: LD_INT 40
10309: PUSH
10310: LD_INT 41
10312: PUSH
10313: LD_INT 42
10315: PUSH
10316: LD_INT 43
10318: PUSH
10319: LD_INT 48
10321: PUSH
10322: LD_INT 49
10324: PUSH
10325: LD_INT 50
10327: PUSH
10328: LD_INT 51
10330: PUSH
10331: LD_INT 52
10333: PUSH
10334: LD_INT 53
10336: PUSH
10337: LD_INT 54
10339: PUSH
10340: LD_INT 55
10342: PUSH
10343: LD_INT 56
10345: PUSH
10346: LD_INT 60
10348: PUSH
10349: LD_INT 61
10351: PUSH
10352: LD_INT 62
10354: PUSH
10355: LD_INT 66
10357: PUSH
10358: LD_INT 67
10360: PUSH
10361: LD_INT 68
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: ST_TO_ADDR
10408: GO 10601
10410: LD_INT 3
10412: DOUBLE
10413: EQUAL
10414: IFTRUE 10418
10416: GO 10600
10418: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
10419: LD_ADDR_VAR 0 4
10423: PUSH
10424: LD_INT 46
10426: PUSH
10427: LD_INT 47
10429: PUSH
10430: LD_INT 1
10432: PUSH
10433: LD_INT 2
10435: PUSH
10436: LD_INT 11
10438: PUSH
10439: LD_INT 9
10441: PUSH
10442: LD_INT 20
10444: PUSH
10445: LD_INT 19
10447: PUSH
10448: LD_INT 21
10450: PUSH
10451: LD_INT 24
10453: PUSH
10454: LD_INT 22
10456: PUSH
10457: LD_INT 25
10459: PUSH
10460: LD_INT 28
10462: PUSH
10463: LD_INT 29
10465: PUSH
10466: LD_INT 30
10468: PUSH
10469: LD_INT 31
10471: PUSH
10472: LD_INT 37
10474: PUSH
10475: LD_INT 38
10477: PUSH
10478: LD_INT 32
10480: PUSH
10481: LD_INT 27
10483: PUSH
10484: LD_INT 33
10486: PUSH
10487: LD_INT 69
10489: PUSH
10490: LD_INT 39
10492: PUSH
10493: LD_INT 34
10495: PUSH
10496: LD_INT 40
10498: PUSH
10499: LD_INT 71
10501: PUSH
10502: LD_INT 23
10504: PUSH
10505: LD_INT 44
10507: PUSH
10508: LD_INT 48
10510: PUSH
10511: LD_INT 49
10513: PUSH
10514: LD_INT 50
10516: PUSH
10517: LD_INT 51
10519: PUSH
10520: LD_INT 52
10522: PUSH
10523: LD_INT 53
10525: PUSH
10526: LD_INT 54
10528: PUSH
10529: LD_INT 55
10531: PUSH
10532: LD_INT 56
10534: PUSH
10535: LD_INT 57
10537: PUSH
10538: LD_INT 58
10540: PUSH
10541: LD_INT 59
10543: PUSH
10544: LD_INT 63
10546: PUSH
10547: LD_INT 64
10549: PUSH
10550: LD_INT 65
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: ST_TO_ADDR
10598: GO 10601
10600: POP
// if state > - 1 and state < 3 then
10601: LD_VAR 0 3
10605: PUSH
10606: LD_INT 1
10608: NEG
10609: GREATER
10610: PUSH
10611: LD_VAR 0 3
10615: PUSH
10616: LD_INT 3
10618: LESS
10619: AND
10620: IFFALSE 10677
// for i in result do
10622: LD_ADDR_VAR 0 5
10626: PUSH
10627: LD_VAR 0 4
10631: PUSH
10632: FOR_IN
10633: IFFALSE 10675
// if GetTech ( i , side ) <> state then
10635: LD_VAR 0 5
10639: PPUSH
10640: LD_VAR 0 1
10644: PPUSH
10645: CALL_OW 321
10649: PUSH
10650: LD_VAR 0 3
10654: NONEQUAL
10655: IFFALSE 10673
// result := result diff i ;
10657: LD_ADDR_VAR 0 4
10661: PUSH
10662: LD_VAR 0 4
10666: PUSH
10667: LD_VAR 0 5
10671: DIFF
10672: ST_TO_ADDR
10673: GO 10632
10675: POP
10676: POP
// end ;
10677: LD_VAR 0 4
10681: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
10682: LD_INT 0
10684: PPUSH
10685: PPUSH
10686: PPUSH
// result := true ;
10687: LD_ADDR_VAR 0 3
10691: PUSH
10692: LD_INT 1
10694: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
10695: LD_ADDR_VAR 0 5
10699: PUSH
10700: LD_VAR 0 2
10704: PPUSH
10705: CALL_OW 480
10709: ST_TO_ADDR
// if not tmp then
10710: LD_VAR 0 5
10714: NOT
10715: IFFALSE 10719
// exit ;
10717: GO 10768
// for i in tmp do
10719: LD_ADDR_VAR 0 4
10723: PUSH
10724: LD_VAR 0 5
10728: PUSH
10729: FOR_IN
10730: IFFALSE 10766
// if GetTech ( i , side ) <> state_researched then
10732: LD_VAR 0 4
10736: PPUSH
10737: LD_VAR 0 1
10741: PPUSH
10742: CALL_OW 321
10746: PUSH
10747: LD_INT 2
10749: NONEQUAL
10750: IFFALSE 10764
// begin result := false ;
10752: LD_ADDR_VAR 0 3
10756: PUSH
10757: LD_INT 0
10759: ST_TO_ADDR
// exit ;
10760: POP
10761: POP
10762: GO 10768
// end ;
10764: GO 10729
10766: POP
10767: POP
// end ;
10768: LD_VAR 0 3
10772: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
10773: LD_INT 0
10775: PPUSH
10776: PPUSH
10777: PPUSH
10778: PPUSH
10779: PPUSH
10780: PPUSH
10781: PPUSH
10782: PPUSH
10783: PPUSH
10784: PPUSH
10785: PPUSH
10786: PPUSH
10787: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
10788: LD_VAR 0 1
10792: NOT
10793: PUSH
10794: LD_VAR 0 1
10798: PPUSH
10799: CALL_OW 257
10803: PUSH
10804: LD_INT 9
10806: NONEQUAL
10807: OR
10808: IFFALSE 10812
// exit ;
10810: GO 11385
// side := GetSide ( unit ) ;
10812: LD_ADDR_VAR 0 9
10816: PUSH
10817: LD_VAR 0 1
10821: PPUSH
10822: CALL_OW 255
10826: ST_TO_ADDR
// tech_space := tech_spacanom ;
10827: LD_ADDR_VAR 0 12
10831: PUSH
10832: LD_INT 29
10834: ST_TO_ADDR
// tech_time := tech_taurad ;
10835: LD_ADDR_VAR 0 13
10839: PUSH
10840: LD_INT 28
10842: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
10843: LD_ADDR_VAR 0 11
10847: PUSH
10848: LD_VAR 0 1
10852: PPUSH
10853: CALL_OW 310
10857: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
10858: LD_VAR 0 11
10862: PPUSH
10863: CALL_OW 247
10867: PUSH
10868: LD_INT 2
10870: EQUAL
10871: IFFALSE 10875
// exit ;
10873: GO 11385
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10875: LD_ADDR_VAR 0 8
10879: PUSH
10880: LD_INT 81
10882: PUSH
10883: LD_VAR 0 9
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: PUSH
10892: LD_INT 3
10894: PUSH
10895: LD_INT 21
10897: PUSH
10898: LD_INT 3
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: PUSH
10905: EMPTY
10906: LIST
10907: LIST
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PPUSH
10913: CALL_OW 69
10917: ST_TO_ADDR
// if not tmp then
10918: LD_VAR 0 8
10922: NOT
10923: IFFALSE 10927
// exit ;
10925: GO 11385
// if in_unit then
10927: LD_VAR 0 11
10931: IFFALSE 10955
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
10933: LD_ADDR_VAR 0 10
10937: PUSH
10938: LD_VAR 0 8
10942: PPUSH
10943: LD_VAR 0 11
10947: PPUSH
10948: CALL_OW 74
10952: ST_TO_ADDR
10953: GO 10975
// enemy := NearestUnitToUnit ( tmp , unit ) ;
10955: LD_ADDR_VAR 0 10
10959: PUSH
10960: LD_VAR 0 8
10964: PPUSH
10965: LD_VAR 0 1
10969: PPUSH
10970: CALL_OW 74
10974: ST_TO_ADDR
// if not enemy then
10975: LD_VAR 0 10
10979: NOT
10980: IFFALSE 10984
// exit ;
10982: GO 11385
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
10984: LD_VAR 0 11
10988: PUSH
10989: LD_VAR 0 11
10993: PPUSH
10994: LD_VAR 0 10
10998: PPUSH
10999: CALL_OW 296
11003: PUSH
11004: LD_INT 13
11006: GREATER
11007: AND
11008: PUSH
11009: LD_VAR 0 1
11013: PPUSH
11014: LD_VAR 0 10
11018: PPUSH
11019: CALL_OW 296
11023: PUSH
11024: LD_INT 12
11026: GREATER
11027: OR
11028: IFFALSE 11032
// exit ;
11030: GO 11385
// missile := [ 1 ] ;
11032: LD_ADDR_VAR 0 14
11036: PUSH
11037: LD_INT 1
11039: PUSH
11040: EMPTY
11041: LIST
11042: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11043: LD_VAR 0 9
11047: PPUSH
11048: LD_VAR 0 12
11052: PPUSH
11053: CALL_OW 325
11057: IFFALSE 11086
// missile := Insert ( missile , missile + 1 , 2 ) ;
11059: LD_ADDR_VAR 0 14
11063: PUSH
11064: LD_VAR 0 14
11068: PPUSH
11069: LD_VAR 0 14
11073: PUSH
11074: LD_INT 1
11076: PLUS
11077: PPUSH
11078: LD_INT 2
11080: PPUSH
11081: CALL_OW 2
11085: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11086: LD_VAR 0 9
11090: PPUSH
11091: LD_VAR 0 13
11095: PPUSH
11096: CALL_OW 325
11100: PUSH
11101: LD_VAR 0 10
11105: PPUSH
11106: CALL_OW 255
11110: PPUSH
11111: LD_VAR 0 13
11115: PPUSH
11116: CALL_OW 325
11120: NOT
11121: AND
11122: IFFALSE 11151
// missile := Insert ( missile , missile + 1 , 3 ) ;
11124: LD_ADDR_VAR 0 14
11128: PUSH
11129: LD_VAR 0 14
11133: PPUSH
11134: LD_VAR 0 14
11138: PUSH
11139: LD_INT 1
11141: PLUS
11142: PPUSH
11143: LD_INT 3
11145: PPUSH
11146: CALL_OW 2
11150: ST_TO_ADDR
// if missile < 2 then
11151: LD_VAR 0 14
11155: PUSH
11156: LD_INT 2
11158: LESS
11159: IFFALSE 11163
// exit ;
11161: GO 11385
// x := GetX ( enemy ) ;
11163: LD_ADDR_VAR 0 4
11167: PUSH
11168: LD_VAR 0 10
11172: PPUSH
11173: CALL_OW 250
11177: ST_TO_ADDR
// y := GetY ( enemy ) ;
11178: LD_ADDR_VAR 0 5
11182: PUSH
11183: LD_VAR 0 10
11187: PPUSH
11188: CALL_OW 251
11192: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11193: LD_ADDR_VAR 0 6
11197: PUSH
11198: LD_VAR 0 4
11202: PUSH
11203: LD_INT 1
11205: NEG
11206: PPUSH
11207: LD_INT 1
11209: PPUSH
11210: CALL_OW 12
11214: PLUS
11215: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11216: LD_ADDR_VAR 0 7
11220: PUSH
11221: LD_VAR 0 5
11225: PUSH
11226: LD_INT 1
11228: NEG
11229: PPUSH
11230: LD_INT 1
11232: PPUSH
11233: CALL_OW 12
11237: PLUS
11238: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11239: LD_VAR 0 6
11243: PPUSH
11244: LD_VAR 0 7
11248: PPUSH
11249: CALL_OW 488
11253: NOT
11254: IFFALSE 11276
// begin _x := x ;
11256: LD_ADDR_VAR 0 6
11260: PUSH
11261: LD_VAR 0 4
11265: ST_TO_ADDR
// _y := y ;
11266: LD_ADDR_VAR 0 7
11270: PUSH
11271: LD_VAR 0 5
11275: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11276: LD_ADDR_VAR 0 3
11280: PUSH
11281: LD_INT 1
11283: PPUSH
11284: LD_VAR 0 14
11288: PPUSH
11289: CALL_OW 12
11293: ST_TO_ADDR
// case i of 1 :
11294: LD_VAR 0 3
11298: PUSH
11299: LD_INT 1
11301: DOUBLE
11302: EQUAL
11303: IFTRUE 11307
11305: GO 11324
11307: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11308: LD_VAR 0 1
11312: PPUSH
11313: LD_VAR 0 10
11317: PPUSH
11318: CALL_OW 115
11322: GO 11385
11324: LD_INT 2
11326: DOUBLE
11327: EQUAL
11328: IFTRUE 11332
11330: GO 11354
11332: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11333: LD_VAR 0 1
11337: PPUSH
11338: LD_VAR 0 6
11342: PPUSH
11343: LD_VAR 0 7
11347: PPUSH
11348: CALL_OW 153
11352: GO 11385
11354: LD_INT 3
11356: DOUBLE
11357: EQUAL
11358: IFTRUE 11362
11360: GO 11384
11362: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
11363: LD_VAR 0 1
11367: PPUSH
11368: LD_VAR 0 6
11372: PPUSH
11373: LD_VAR 0 7
11377: PPUSH
11378: CALL_OW 154
11382: GO 11385
11384: POP
// end ;
11385: LD_VAR 0 2
11389: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
11390: LD_INT 0
11392: PPUSH
11393: PPUSH
11394: PPUSH
11395: PPUSH
11396: PPUSH
11397: PPUSH
// if not unit or not building then
11398: LD_VAR 0 1
11402: NOT
11403: PUSH
11404: LD_VAR 0 2
11408: NOT
11409: OR
11410: IFFALSE 11414
// exit ;
11412: GO 11572
// x := GetX ( building ) ;
11414: LD_ADDR_VAR 0 5
11418: PUSH
11419: LD_VAR 0 2
11423: PPUSH
11424: CALL_OW 250
11428: ST_TO_ADDR
// y := GetY ( building ) ;
11429: LD_ADDR_VAR 0 6
11433: PUSH
11434: LD_VAR 0 2
11438: PPUSH
11439: CALL_OW 251
11443: ST_TO_ADDR
// for i = 0 to 5 do
11444: LD_ADDR_VAR 0 4
11448: PUSH
11449: DOUBLE
11450: LD_INT 0
11452: DEC
11453: ST_TO_ADDR
11454: LD_INT 5
11456: PUSH
11457: FOR_TO
11458: IFFALSE 11570
// begin _x := ShiftX ( x , i , 3 ) ;
11460: LD_ADDR_VAR 0 7
11464: PUSH
11465: LD_VAR 0 5
11469: PPUSH
11470: LD_VAR 0 4
11474: PPUSH
11475: LD_INT 3
11477: PPUSH
11478: CALL_OW 272
11482: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11483: LD_ADDR_VAR 0 8
11487: PUSH
11488: LD_VAR 0 6
11492: PPUSH
11493: LD_VAR 0 4
11497: PPUSH
11498: LD_INT 3
11500: PPUSH
11501: CALL_OW 273
11505: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11506: LD_VAR 0 7
11510: PPUSH
11511: LD_VAR 0 8
11515: PPUSH
11516: CALL_OW 488
11520: NOT
11521: IFFALSE 11525
// continue ;
11523: GO 11457
// if HexInfo ( _x , _y ) = 0 then
11525: LD_VAR 0 7
11529: PPUSH
11530: LD_VAR 0 8
11534: PPUSH
11535: CALL_OW 428
11539: PUSH
11540: LD_INT 0
11542: EQUAL
11543: IFFALSE 11568
// begin ComMoveXY ( unit , _x , _y ) ;
11545: LD_VAR 0 1
11549: PPUSH
11550: LD_VAR 0 7
11554: PPUSH
11555: LD_VAR 0 8
11559: PPUSH
11560: CALL_OW 111
// exit ;
11564: POP
11565: POP
11566: GO 11572
// end ; end ;
11568: GO 11457
11570: POP
11571: POP
// end ;
11572: LD_VAR 0 3
11576: RET
// export function ScanBase ( side , base_area ) ; begin
11577: LD_INT 0
11579: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11580: LD_ADDR_VAR 0 3
11584: PUSH
11585: LD_VAR 0 2
11589: PPUSH
11590: LD_INT 81
11592: PUSH
11593: LD_VAR 0 1
11597: PUSH
11598: EMPTY
11599: LIST
11600: LIST
11601: PPUSH
11602: CALL_OW 70
11606: ST_TO_ADDR
// end ;
11607: LD_VAR 0 3
11611: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
11612: LD_INT 0
11614: PPUSH
11615: PPUSH
11616: PPUSH
11617: PPUSH
11618: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
11619: LD_VAR 0 1
11623: NOT
11624: PUSH
11625: LD_EXP 52
11629: PUSH
11630: LD_VAR 0 1
11634: ARRAY
11635: NOT
11636: OR
11637: PUSH
11638: LD_VAR 0 2
11642: NOT
11643: OR
11644: PUSH
11645: LD_VAR 0 3
11649: NOT
11650: OR
11651: IFFALSE 11655
// exit ;
11653: GO 12105
// side := mc_sides [ base ] ;
11655: LD_ADDR_VAR 0 6
11659: PUSH
11660: LD_EXP 78
11664: PUSH
11665: LD_VAR 0 1
11669: ARRAY
11670: ST_TO_ADDR
// if not side then
11671: LD_VAR 0 6
11675: NOT
11676: IFFALSE 11680
// exit ;
11678: GO 12105
// for i in solds do
11680: LD_ADDR_VAR 0 7
11684: PUSH
11685: LD_VAR 0 2
11689: PUSH
11690: FOR_IN
11691: IFFALSE 11752
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
11693: LD_VAR 0 7
11697: PPUSH
11698: CALL_OW 310
11702: PPUSH
11703: CALL_OW 266
11707: PUSH
11708: LD_INT 32
11710: PUSH
11711: LD_INT 31
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: IN
11718: IFFALSE 11738
// solds := solds diff i else
11720: LD_ADDR_VAR 0 2
11724: PUSH
11725: LD_VAR 0 2
11729: PUSH
11730: LD_VAR 0 7
11734: DIFF
11735: ST_TO_ADDR
11736: GO 11750
// SetTag ( i , 18 ) ;
11738: LD_VAR 0 7
11742: PPUSH
11743: LD_INT 18
11745: PPUSH
11746: CALL_OW 109
11750: GO 11690
11752: POP
11753: POP
// if not solds then
11754: LD_VAR 0 2
11758: NOT
11759: IFFALSE 11763
// exit ;
11761: GO 12105
// repeat wait ( 0 0$1 ) ;
11763: LD_INT 35
11765: PPUSH
11766: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
11770: LD_ADDR_VAR 0 5
11774: PUSH
11775: LD_VAR 0 6
11779: PPUSH
11780: LD_VAR 0 3
11784: PPUSH
11785: CALL 11577 0 2
11789: ST_TO_ADDR
// if not enemy or enemy > 3 or mc_defender [ base ] then
11790: LD_VAR 0 5
11794: NOT
11795: PUSH
11796: LD_VAR 0 5
11800: PUSH
11801: LD_INT 3
11803: GREATER
11804: OR
11805: PUSH
11806: LD_EXP 74
11810: PUSH
11811: LD_VAR 0 1
11815: ARRAY
11816: OR
11817: IFFALSE 11858
// begin for i in solds do
11819: LD_ADDR_VAR 0 7
11823: PUSH
11824: LD_VAR 0 2
11828: PUSH
11829: FOR_IN
11830: IFFALSE 11854
// if HasTask ( i ) then
11832: LD_VAR 0 7
11836: PPUSH
11837: CALL_OW 314
11841: IFFALSE 11852
// ComStop ( i ) ;
11843: LD_VAR 0 7
11847: PPUSH
11848: CALL_OW 141
11852: GO 11829
11854: POP
11855: POP
// break ;
11856: GO 12093
// end ; for i in solds do
11858: LD_ADDR_VAR 0 7
11862: PUSH
11863: LD_VAR 0 2
11867: PUSH
11868: FOR_IN
11869: IFFALSE 12085
// begin if IsInUnit ( i ) then
11871: LD_VAR 0 7
11875: PPUSH
11876: CALL_OW 310
11880: IFFALSE 11891
// ComExitBuilding ( i ) ;
11882: LD_VAR 0 7
11886: PPUSH
11887: CALL_OW 122
// if GetLives ( i ) > 333 then
11891: LD_VAR 0 7
11895: PPUSH
11896: CALL_OW 256
11900: PUSH
11901: LD_INT 333
11903: GREATER
11904: IFFALSE 11932
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
11906: LD_VAR 0 7
11910: PPUSH
11911: LD_VAR 0 5
11915: PPUSH
11916: LD_VAR 0 7
11920: PPUSH
11921: CALL_OW 74
11925: PPUSH
11926: CALL_OW 115
11930: GO 12083
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
11932: LD_ADDR_VAR 0 8
11936: PUSH
11937: LD_EXP 52
11941: PUSH
11942: LD_VAR 0 1
11946: ARRAY
11947: PPUSH
11948: LD_INT 2
11950: PUSH
11951: LD_INT 30
11953: PUSH
11954: LD_INT 0
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: PUSH
11961: LD_INT 30
11963: PUSH
11964: LD_INT 1
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: PUSH
11971: LD_INT 30
11973: PUSH
11974: LD_INT 6
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: PPUSH
11987: CALL_OW 72
11991: PPUSH
11992: LD_VAR 0 7
11996: PPUSH
11997: CALL_OW 74
12001: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
12002: LD_VAR 0 7
12006: PPUSH
12007: LD_VAR 0 8
12011: PPUSH
12012: CALL_OW 250
12016: PPUSH
12017: LD_INT 3
12019: PPUSH
12020: LD_INT 5
12022: PPUSH
12023: CALL_OW 272
12027: PPUSH
12028: LD_VAR 0 8
12032: PPUSH
12033: CALL_OW 251
12037: PPUSH
12038: LD_INT 3
12040: PPUSH
12041: LD_INT 5
12043: PPUSH
12044: CALL_OW 273
12048: PPUSH
12049: CALL_OW 111
// SetTag ( i , 0 ) ;
12053: LD_VAR 0 7
12057: PPUSH
12058: LD_INT 0
12060: PPUSH
12061: CALL_OW 109
// solds := solds diff i ;
12065: LD_ADDR_VAR 0 2
12069: PUSH
12070: LD_VAR 0 2
12074: PUSH
12075: LD_VAR 0 7
12079: DIFF
12080: ST_TO_ADDR
// continue ;
12081: GO 11868
// end ; end ;
12083: GO 11868
12085: POP
12086: POP
// until solds ;
12087: LD_VAR 0 2
12091: IFFALSE 11763
// MC_Reset ( base , 18 ) ;
12093: LD_VAR 0 1
12097: PPUSH
12098: LD_INT 18
12100: PPUSH
12101: CALL 56651 0 2
// end ;
12105: LD_VAR 0 4
12109: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
12110: LD_INT 0
12112: PPUSH
12113: PPUSH
12114: PPUSH
12115: PPUSH
12116: PPUSH
12117: PPUSH
12118: PPUSH
12119: PPUSH
12120: PPUSH
12121: PPUSH
12122: PPUSH
12123: PPUSH
12124: PPUSH
12125: PPUSH
12126: PPUSH
12127: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
12128: LD_ADDR_VAR 0 12
12132: PUSH
12133: LD_EXP 52
12137: PUSH
12138: LD_VAR 0 1
12142: ARRAY
12143: PPUSH
12144: LD_INT 25
12146: PUSH
12147: LD_INT 3
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: PPUSH
12154: CALL_OW 72
12158: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
12159: LD_ADDR_VAR 0 8
12163: PUSH
12164: LD_EXP 52
12168: PUSH
12169: LD_VAR 0 1
12173: ARRAY
12174: PPUSH
12175: LD_INT 2
12177: PUSH
12178: LD_INT 25
12180: PUSH
12181: LD_INT 1
12183: PUSH
12184: EMPTY
12185: LIST
12186: LIST
12187: PUSH
12188: LD_INT 25
12190: PUSH
12191: LD_INT 5
12193: PUSH
12194: EMPTY
12195: LIST
12196: LIST
12197: PUSH
12198: LD_INT 25
12200: PUSH
12201: LD_INT 8
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: PUSH
12208: LD_INT 25
12210: PUSH
12211: LD_INT 9
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: PPUSH
12225: CALL_OW 72
12229: ST_TO_ADDR
// if not defenders and not solds then
12230: LD_VAR 0 2
12234: NOT
12235: PUSH
12236: LD_VAR 0 8
12240: NOT
12241: AND
12242: IFFALSE 12246
// exit ;
12244: GO 13612
// depot_under_attack := false ;
12246: LD_ADDR_VAR 0 16
12250: PUSH
12251: LD_INT 0
12253: ST_TO_ADDR
// sold_defenders := [ ] ;
12254: LD_ADDR_VAR 0 17
12258: PUSH
12259: EMPTY
12260: ST_TO_ADDR
// if mechs then
12261: LD_VAR 0 12
12265: IFFALSE 12394
// for i in defenders do
12267: LD_ADDR_VAR 0 5
12271: PUSH
12272: LD_VAR 0 2
12276: PUSH
12277: FOR_IN
12278: IFFALSE 12392
// begin SetTag ( i , 20 ) ;
12280: LD_VAR 0 5
12284: PPUSH
12285: LD_INT 20
12287: PPUSH
12288: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
12292: LD_VAR 0 5
12296: PPUSH
12297: CALL_OW 263
12301: PUSH
12302: LD_INT 1
12304: EQUAL
12305: PUSH
12306: LD_VAR 0 5
12310: PPUSH
12311: CALL_OW 311
12315: NOT
12316: AND
12317: PUSH
12318: LD_VAR 0 12
12322: AND
12323: IFFALSE 12390
// begin un := mechs [ 1 ] ;
12325: LD_ADDR_VAR 0 10
12329: PUSH
12330: LD_VAR 0 12
12334: PUSH
12335: LD_INT 1
12337: ARRAY
12338: ST_TO_ADDR
// ComExitBuilding ( un ) ;
12339: LD_VAR 0 10
12343: PPUSH
12344: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
12348: LD_VAR 0 10
12352: PPUSH
12353: LD_VAR 0 5
12357: PPUSH
12358: CALL_OW 180
// SetTag ( un , 19 ) ;
12362: LD_VAR 0 10
12366: PPUSH
12367: LD_INT 19
12369: PPUSH
12370: CALL_OW 109
// mechs := mechs diff un ;
12374: LD_ADDR_VAR 0 12
12378: PUSH
12379: LD_VAR 0 12
12383: PUSH
12384: LD_VAR 0 10
12388: DIFF
12389: ST_TO_ADDR
// end ; end ;
12390: GO 12277
12392: POP
12393: POP
// if solds then
12394: LD_VAR 0 8
12398: IFFALSE 12457
// for i in solds do
12400: LD_ADDR_VAR 0 5
12404: PUSH
12405: LD_VAR 0 8
12409: PUSH
12410: FOR_IN
12411: IFFALSE 12455
// if not GetTag ( i ) then
12413: LD_VAR 0 5
12417: PPUSH
12418: CALL_OW 110
12422: NOT
12423: IFFALSE 12453
// begin defenders := defenders union i ;
12425: LD_ADDR_VAR 0 2
12429: PUSH
12430: LD_VAR 0 2
12434: PUSH
12435: LD_VAR 0 5
12439: UNION
12440: ST_TO_ADDR
// SetTag ( i , 18 ) ;
12441: LD_VAR 0 5
12445: PPUSH
12446: LD_INT 18
12448: PPUSH
12449: CALL_OW 109
// end ;
12453: GO 12410
12455: POP
12456: POP
// repeat wait ( 0 0$1 ) ;
12457: LD_INT 35
12459: PPUSH
12460: CALL_OW 67
// enemy := mc_scan [ base ] ;
12464: LD_ADDR_VAR 0 3
12468: PUSH
12469: LD_EXP 75
12473: PUSH
12474: LD_VAR 0 1
12478: ARRAY
12479: ST_TO_ADDR
// for i in defenders do
12480: LD_ADDR_VAR 0 5
12484: PUSH
12485: LD_VAR 0 2
12489: PUSH
12490: FOR_IN
12491: IFFALSE 13176
// begin e := NearestUnitToUnit ( enemy , i ) ;
12493: LD_ADDR_VAR 0 13
12497: PUSH
12498: LD_VAR 0 3
12502: PPUSH
12503: LD_VAR 0 5
12507: PPUSH
12508: CALL_OW 74
12512: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
12513: LD_ADDR_VAR 0 16
12517: PUSH
12518: LD_EXP 52
12522: PUSH
12523: LD_VAR 0 1
12527: ARRAY
12528: PPUSH
12529: LD_INT 2
12531: PUSH
12532: LD_INT 30
12534: PUSH
12535: LD_INT 0
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: PUSH
12542: LD_INT 30
12544: PUSH
12545: LD_INT 1
12547: PUSH
12548: EMPTY
12549: LIST
12550: LIST
12551: PUSH
12552: EMPTY
12553: LIST
12554: LIST
12555: LIST
12556: PPUSH
12557: CALL_OW 72
12561: NOT
12562: PUSH
12563: LD_EXP 52
12567: PUSH
12568: LD_VAR 0 1
12572: ARRAY
12573: PPUSH
12574: LD_INT 2
12576: PUSH
12577: LD_INT 30
12579: PUSH
12580: LD_INT 0
12582: PUSH
12583: EMPTY
12584: LIST
12585: LIST
12586: PUSH
12587: LD_INT 30
12589: PUSH
12590: LD_INT 1
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: LIST
12601: PPUSH
12602: CALL_OW 72
12606: PPUSH
12607: CALL_OW 256
12611: PUSH
12612: LD_INT 600
12614: LESS
12615: OR
12616: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
12617: LD_VAR 0 5
12621: PPUSH
12622: CALL_OW 247
12626: PUSH
12627: LD_INT 2
12629: DOUBLE
12630: EQUAL
12631: IFTRUE 12635
12633: GO 12882
12635: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
12636: LD_VAR 0 5
12640: PPUSH
12641: CALL_OW 256
12645: PUSH
12646: LD_INT 650
12648: GREATER
12649: PUSH
12650: LD_VAR 0 5
12654: PPUSH
12655: LD_VAR 0 13
12659: PPUSH
12660: CALL_OW 296
12664: PUSH
12665: LD_INT 40
12667: LESS
12668: AND
12669: IFFALSE 12687
// ComAttackUnit ( i , e ) else
12671: LD_VAR 0 5
12675: PPUSH
12676: LD_VAR 0 13
12680: PPUSH
12681: CALL_OW 115
12685: GO 12765
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
12687: LD_VAR 0 5
12691: PPUSH
12692: LD_VAR 0 13
12696: PPUSH
12697: CALL_OW 296
12701: PUSH
12702: LD_INT 30
12704: GREATEREQUAL
12705: PUSH
12706: LD_VAR 0 5
12710: PPUSH
12711: CALL_OW 256
12715: PUSH
12716: LD_INT 650
12718: LESSEQUAL
12719: OR
12720: PUSH
12721: LD_VAR 0 5
12725: PPUSH
12726: LD_EXP 76
12730: PUSH
12731: LD_VAR 0 1
12735: ARRAY
12736: PPUSH
12737: CALL_OW 308
12741: NOT
12742: AND
12743: IFFALSE 12765
// ComMoveToArea ( i , mc_parking [ base ] ) ;
12745: LD_VAR 0 5
12749: PPUSH
12750: LD_EXP 76
12754: PUSH
12755: LD_VAR 0 1
12759: ARRAY
12760: PPUSH
12761: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
12765: LD_VAR 0 5
12769: PPUSH
12770: CALL_OW 256
12774: PUSH
12775: LD_INT 998
12777: LESS
12778: PUSH
12779: LD_VAR 0 5
12783: PPUSH
12784: CALL_OW 263
12788: PUSH
12789: LD_INT 1
12791: EQUAL
12792: AND
12793: PUSH
12794: LD_VAR 0 5
12798: PPUSH
12799: CALL_OW 311
12803: AND
12804: PUSH
12805: LD_VAR 0 5
12809: PPUSH
12810: LD_EXP 76
12814: PUSH
12815: LD_VAR 0 1
12819: ARRAY
12820: PPUSH
12821: CALL_OW 308
12825: AND
12826: IFFALSE 12880
// begin mech := IsDrivenBy ( i ) ;
12828: LD_ADDR_VAR 0 9
12832: PUSH
12833: LD_VAR 0 5
12837: PPUSH
12838: CALL_OW 311
12842: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
12843: LD_VAR 0 9
12847: PPUSH
12848: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
12852: LD_VAR 0 9
12856: PPUSH
12857: LD_VAR 0 5
12861: PPUSH
12862: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
12866: LD_VAR 0 9
12870: PPUSH
12871: LD_VAR 0 5
12875: PPUSH
12876: CALL_OW 180
// end ; end ; unit_human :
12880: GO 13147
12882: LD_INT 1
12884: DOUBLE
12885: EQUAL
12886: IFTRUE 12890
12888: GO 13146
12890: POP
// begin b := IsInUnit ( i ) ;
12891: LD_ADDR_VAR 0 18
12895: PUSH
12896: LD_VAR 0 5
12900: PPUSH
12901: CALL_OW 310
12905: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
12906: LD_ADDR_VAR 0 19
12910: PUSH
12911: LD_VAR 0 18
12915: NOT
12916: PUSH
12917: LD_VAR 0 18
12921: PPUSH
12922: CALL_OW 266
12926: PUSH
12927: LD_INT 32
12929: PUSH
12930: LD_INT 31
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: IN
12937: OR
12938: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
12939: LD_VAR 0 16
12943: PUSH
12944: LD_VAR 0 2
12948: PPUSH
12949: LD_INT 21
12951: PUSH
12952: LD_INT 2
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PPUSH
12959: CALL_OW 72
12963: PUSH
12964: LD_INT 1
12966: LESSEQUAL
12967: OR
12968: PUSH
12969: LD_VAR 0 19
12973: AND
12974: PUSH
12975: LD_VAR 0 5
12979: PUSH
12980: LD_VAR 0 17
12984: IN
12985: NOT
12986: AND
12987: IFFALSE 13080
// begin if b then
12989: LD_VAR 0 18
12993: IFFALSE 13042
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
12995: LD_VAR 0 18
12999: PPUSH
13000: LD_VAR 0 3
13004: PPUSH
13005: LD_VAR 0 18
13009: PPUSH
13010: CALL_OW 74
13014: PPUSH
13015: CALL_OW 296
13019: PUSH
13020: LD_INT 10
13022: LESS
13023: PUSH
13024: LD_VAR 0 18
13028: PPUSH
13029: CALL_OW 461
13033: PUSH
13034: LD_INT 7
13036: NONEQUAL
13037: AND
13038: IFFALSE 13042
// continue ;
13040: GO 12490
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
13042: LD_ADDR_VAR 0 17
13046: PUSH
13047: LD_VAR 0 17
13051: PPUSH
13052: LD_VAR 0 17
13056: PUSH
13057: LD_INT 1
13059: PLUS
13060: PPUSH
13061: LD_VAR 0 5
13065: PPUSH
13066: CALL_OW 1
13070: ST_TO_ADDR
// ComExitBuilding ( i ) ;
13071: LD_VAR 0 5
13075: PPUSH
13076: CALL_OW 122
// end ; if sold_defenders then
13080: LD_VAR 0 17
13084: IFFALSE 13144
// if i in sold_defenders then
13086: LD_VAR 0 5
13090: PUSH
13091: LD_VAR 0 17
13095: IN
13096: IFFALSE 13144
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
13098: LD_VAR 0 5
13102: PPUSH
13103: CALL_OW 314
13107: NOT
13108: PUSH
13109: LD_VAR 0 5
13113: PPUSH
13114: LD_VAR 0 13
13118: PPUSH
13119: CALL_OW 296
13123: PUSH
13124: LD_INT 30
13126: LESS
13127: AND
13128: IFFALSE 13144
// ComAttackUnit ( i , e ) ;
13130: LD_VAR 0 5
13134: PPUSH
13135: LD_VAR 0 13
13139: PPUSH
13140: CALL_OW 115
// end ; end ; end ;
13144: GO 13147
13146: POP
// if IsDead ( i ) then
13147: LD_VAR 0 5
13151: PPUSH
13152: CALL_OW 301
13156: IFFALSE 13174
// defenders := defenders diff i ;
13158: LD_ADDR_VAR 0 2
13162: PUSH
13163: LD_VAR 0 2
13167: PUSH
13168: LD_VAR 0 5
13172: DIFF
13173: ST_TO_ADDR
// end ;
13174: GO 12490
13176: POP
13177: POP
// until not enemy or not defenders ;
13178: LD_VAR 0 3
13182: NOT
13183: PUSH
13184: LD_VAR 0 2
13188: NOT
13189: OR
13190: IFFALSE 12457
// MC_Reset ( base , 18 ) ;
13192: LD_VAR 0 1
13196: PPUSH
13197: LD_INT 18
13199: PPUSH
13200: CALL 56651 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
13204: LD_ADDR_VAR 0 2
13208: PUSH
13209: LD_VAR 0 2
13213: PUSH
13214: LD_VAR 0 2
13218: PPUSH
13219: LD_INT 2
13221: PUSH
13222: LD_INT 25
13224: PUSH
13225: LD_INT 1
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: PUSH
13232: LD_INT 25
13234: PUSH
13235: LD_INT 5
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: PUSH
13242: LD_INT 25
13244: PUSH
13245: LD_INT 8
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: PUSH
13252: LD_INT 25
13254: PUSH
13255: LD_INT 9
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: PPUSH
13269: CALL_OW 72
13273: DIFF
13274: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
13275: LD_VAR 0 3
13279: NOT
13280: PUSH
13281: LD_VAR 0 2
13285: PPUSH
13286: LD_INT 21
13288: PUSH
13289: LD_INT 2
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: PPUSH
13296: CALL_OW 72
13300: AND
13301: IFFALSE 13563
// begin tmp := FilterByTag ( defenders , 19 ) ;
13303: LD_ADDR_VAR 0 11
13307: PUSH
13308: LD_VAR 0 2
13312: PPUSH
13313: LD_INT 19
13315: PPUSH
13316: CALL 49949 0 2
13320: ST_TO_ADDR
// if tmp then
13321: LD_VAR 0 11
13325: IFFALSE 13395
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
13327: LD_ADDR_VAR 0 11
13331: PUSH
13332: LD_VAR 0 11
13336: PPUSH
13337: LD_INT 25
13339: PUSH
13340: LD_INT 3
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: PPUSH
13347: CALL_OW 72
13351: ST_TO_ADDR
// if tmp then
13352: LD_VAR 0 11
13356: IFFALSE 13395
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
13358: LD_ADDR_EXP 64
13362: PUSH
13363: LD_EXP 64
13367: PPUSH
13368: LD_VAR 0 1
13372: PPUSH
13373: LD_EXP 64
13377: PUSH
13378: LD_VAR 0 1
13382: ARRAY
13383: PUSH
13384: LD_VAR 0 11
13388: UNION
13389: PPUSH
13390: CALL_OW 1
13394: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
13395: LD_VAR 0 1
13399: PPUSH
13400: LD_INT 19
13402: PPUSH
13403: CALL 56651 0 2
// repeat wait ( 0 0$1 ) ;
13407: LD_INT 35
13409: PPUSH
13410: CALL_OW 67
// for i in defenders do
13414: LD_ADDR_VAR 0 5
13418: PUSH
13419: LD_VAR 0 2
13423: PUSH
13424: FOR_IN
13425: IFFALSE 13514
// begin if not IsInArea ( i , mc_parking [ base ] ) then
13427: LD_VAR 0 5
13431: PPUSH
13432: LD_EXP 76
13436: PUSH
13437: LD_VAR 0 1
13441: ARRAY
13442: PPUSH
13443: CALL_OW 308
13447: NOT
13448: IFFALSE 13472
// ComMoveToArea ( i , mc_parking [ base ] ) else
13450: LD_VAR 0 5
13454: PPUSH
13455: LD_EXP 76
13459: PUSH
13460: LD_VAR 0 1
13464: ARRAY
13465: PPUSH
13466: CALL_OW 113
13470: GO 13512
// if GetControl ( i ) = control_manual then
13472: LD_VAR 0 5
13476: PPUSH
13477: CALL_OW 263
13481: PUSH
13482: LD_INT 1
13484: EQUAL
13485: IFFALSE 13512
// if IsDrivenBy ( i ) then
13487: LD_VAR 0 5
13491: PPUSH
13492: CALL_OW 311
13496: IFFALSE 13512
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
13498: LD_VAR 0 5
13502: PPUSH
13503: CALL_OW 311
13507: PPUSH
13508: CALL_OW 121
// end ;
13512: GO 13424
13514: POP
13515: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
13516: LD_VAR 0 2
13520: PPUSH
13521: LD_INT 95
13523: PUSH
13524: LD_EXP 76
13528: PUSH
13529: LD_VAR 0 1
13533: ARRAY
13534: PUSH
13535: EMPTY
13536: LIST
13537: LIST
13538: PPUSH
13539: CALL_OW 72
13543: PUSH
13544: LD_VAR 0 2
13548: EQUAL
13549: PUSH
13550: LD_EXP 75
13554: PUSH
13555: LD_VAR 0 1
13559: ARRAY
13560: OR
13561: IFFALSE 13407
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
13563: LD_ADDR_EXP 74
13567: PUSH
13568: LD_EXP 74
13572: PPUSH
13573: LD_VAR 0 1
13577: PPUSH
13578: LD_EXP 74
13582: PUSH
13583: LD_VAR 0 1
13587: ARRAY
13588: PUSH
13589: LD_VAR 0 2
13593: UNION
13594: PPUSH
13595: CALL_OW 1
13599: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
13600: LD_VAR 0 1
13604: PPUSH
13605: LD_INT 20
13607: PPUSH
13608: CALL 56651 0 2
// end ;
13612: LD_VAR 0 4
13616: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
13617: LD_INT 0
13619: PPUSH
13620: PPUSH
13621: PPUSH
13622: PPUSH
// result := false ;
13623: LD_ADDR_VAR 0 2
13627: PUSH
13628: LD_INT 0
13630: ST_TO_ADDR
// side := GetSide ( unit ) ;
13631: LD_ADDR_VAR 0 3
13635: PUSH
13636: LD_VAR 0 1
13640: PPUSH
13641: CALL_OW 255
13645: ST_TO_ADDR
// nat := GetNation ( unit ) ;
13646: LD_ADDR_VAR 0 4
13650: PUSH
13651: LD_VAR 0 1
13655: PPUSH
13656: CALL_OW 248
13660: ST_TO_ADDR
// case nat of 1 :
13661: LD_VAR 0 4
13665: PUSH
13666: LD_INT 1
13668: DOUBLE
13669: EQUAL
13670: IFTRUE 13674
13672: GO 13685
13674: POP
// tech := tech_lassight ; 2 :
13675: LD_ADDR_VAR 0 5
13679: PUSH
13680: LD_INT 12
13682: ST_TO_ADDR
13683: GO 13724
13685: LD_INT 2
13687: DOUBLE
13688: EQUAL
13689: IFTRUE 13693
13691: GO 13704
13693: POP
// tech := tech_mortar ; 3 :
13694: LD_ADDR_VAR 0 5
13698: PUSH
13699: LD_INT 41
13701: ST_TO_ADDR
13702: GO 13724
13704: LD_INT 3
13706: DOUBLE
13707: EQUAL
13708: IFTRUE 13712
13710: GO 13723
13712: POP
// tech := tech_bazooka ; end ;
13713: LD_ADDR_VAR 0 5
13717: PUSH
13718: LD_INT 44
13720: ST_TO_ADDR
13721: GO 13724
13723: POP
// if Researched ( side , tech ) then
13724: LD_VAR 0 3
13728: PPUSH
13729: LD_VAR 0 5
13733: PPUSH
13734: CALL_OW 325
13738: IFFALSE 13765
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
13740: LD_ADDR_VAR 0 2
13744: PUSH
13745: LD_INT 5
13747: PUSH
13748: LD_INT 8
13750: PUSH
13751: LD_INT 9
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: LIST
13758: PUSH
13759: LD_VAR 0 4
13763: ARRAY
13764: ST_TO_ADDR
// end ;
13765: LD_VAR 0 2
13769: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
13770: LD_INT 0
13772: PPUSH
13773: PPUSH
13774: PPUSH
// if not mines then
13775: LD_VAR 0 2
13779: NOT
13780: IFFALSE 13784
// exit ;
13782: GO 13928
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13784: LD_ADDR_VAR 0 5
13788: PUSH
13789: LD_INT 81
13791: PUSH
13792: LD_VAR 0 1
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PUSH
13801: LD_INT 3
13803: PUSH
13804: LD_INT 21
13806: PUSH
13807: LD_INT 3
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: PUSH
13814: EMPTY
13815: LIST
13816: LIST
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: PPUSH
13822: CALL_OW 69
13826: ST_TO_ADDR
// for i in mines do
13827: LD_ADDR_VAR 0 4
13831: PUSH
13832: LD_VAR 0 2
13836: PUSH
13837: FOR_IN
13838: IFFALSE 13926
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
13840: LD_VAR 0 4
13844: PUSH
13845: LD_INT 1
13847: ARRAY
13848: PPUSH
13849: LD_VAR 0 4
13853: PUSH
13854: LD_INT 2
13856: ARRAY
13857: PPUSH
13858: CALL_OW 458
13862: NOT
13863: IFFALSE 13867
// continue ;
13865: GO 13837
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
13867: LD_VAR 0 4
13871: PUSH
13872: LD_INT 1
13874: ARRAY
13875: PPUSH
13876: LD_VAR 0 4
13880: PUSH
13881: LD_INT 2
13883: ARRAY
13884: PPUSH
13885: CALL_OW 428
13889: PUSH
13890: LD_VAR 0 5
13894: IN
13895: IFFALSE 13924
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
13897: LD_VAR 0 4
13901: PUSH
13902: LD_INT 1
13904: ARRAY
13905: PPUSH
13906: LD_VAR 0 4
13910: PUSH
13911: LD_INT 2
13913: ARRAY
13914: PPUSH
13915: LD_VAR 0 1
13919: PPUSH
13920: CALL_OW 456
// end ;
13924: GO 13837
13926: POP
13927: POP
// end ;
13928: LD_VAR 0 3
13932: RET
// export function Count ( array ) ; var i ; begin
13933: LD_INT 0
13935: PPUSH
13936: PPUSH
// result := 0 ;
13937: LD_ADDR_VAR 0 2
13941: PUSH
13942: LD_INT 0
13944: ST_TO_ADDR
// for i in array do
13945: LD_ADDR_VAR 0 3
13949: PUSH
13950: LD_VAR 0 1
13954: PUSH
13955: FOR_IN
13956: IFFALSE 13980
// if i then
13958: LD_VAR 0 3
13962: IFFALSE 13978
// result := result + 1 ;
13964: LD_ADDR_VAR 0 2
13968: PUSH
13969: LD_VAR 0 2
13973: PUSH
13974: LD_INT 1
13976: PLUS
13977: ST_TO_ADDR
13978: GO 13955
13980: POP
13981: POP
// end ;
13982: LD_VAR 0 2
13986: RET
// export function IsEmpty ( building ) ; begin
13987: LD_INT 0
13989: PPUSH
// if not building then
13990: LD_VAR 0 1
13994: NOT
13995: IFFALSE 13999
// exit ;
13997: GO 14042
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
13999: LD_ADDR_VAR 0 2
14003: PUSH
14004: LD_VAR 0 1
14008: PUSH
14009: LD_INT 22
14011: PUSH
14012: LD_VAR 0 1
14016: PPUSH
14017: CALL_OW 255
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: PUSH
14026: LD_INT 58
14028: PUSH
14029: EMPTY
14030: LIST
14031: PUSH
14032: EMPTY
14033: LIST
14034: LIST
14035: PPUSH
14036: CALL_OW 69
14040: IN
14041: ST_TO_ADDR
// end ;
14042: LD_VAR 0 2
14046: RET
// export function IsNotFull ( building ) ; begin
14047: LD_INT 0
14049: PPUSH
// if not building then
14050: LD_VAR 0 1
14054: NOT
14055: IFFALSE 14059
// exit ;
14057: GO 14078
// result := UnitsInside ( building ) < 6 ;
14059: LD_ADDR_VAR 0 2
14063: PUSH
14064: LD_VAR 0 1
14068: PPUSH
14069: CALL_OW 313
14073: PUSH
14074: LD_INT 6
14076: LESS
14077: ST_TO_ADDR
// end ;
14078: LD_VAR 0 2
14082: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
14083: LD_INT 0
14085: PPUSH
14086: PPUSH
14087: PPUSH
14088: PPUSH
// tmp := [ ] ;
14089: LD_ADDR_VAR 0 3
14093: PUSH
14094: EMPTY
14095: ST_TO_ADDR
// list := [ ] ;
14096: LD_ADDR_VAR 0 5
14100: PUSH
14101: EMPTY
14102: ST_TO_ADDR
// for i = 16 to 25 do
14103: LD_ADDR_VAR 0 4
14107: PUSH
14108: DOUBLE
14109: LD_INT 16
14111: DEC
14112: ST_TO_ADDR
14113: LD_INT 25
14115: PUSH
14116: FOR_TO
14117: IFFALSE 14190
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
14119: LD_ADDR_VAR 0 3
14123: PUSH
14124: LD_VAR 0 3
14128: PUSH
14129: LD_INT 22
14131: PUSH
14132: LD_VAR 0 1
14136: PPUSH
14137: CALL_OW 255
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: PUSH
14146: LD_INT 91
14148: PUSH
14149: LD_VAR 0 1
14153: PUSH
14154: LD_INT 6
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: LIST
14161: PUSH
14162: LD_INT 30
14164: PUSH
14165: LD_VAR 0 4
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: LIST
14178: PUSH
14179: EMPTY
14180: LIST
14181: PPUSH
14182: CALL_OW 69
14186: ADD
14187: ST_TO_ADDR
14188: GO 14116
14190: POP
14191: POP
// for i = 1 to tmp do
14192: LD_ADDR_VAR 0 4
14196: PUSH
14197: DOUBLE
14198: LD_INT 1
14200: DEC
14201: ST_TO_ADDR
14202: LD_VAR 0 3
14206: PUSH
14207: FOR_TO
14208: IFFALSE 14296
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
14210: LD_ADDR_VAR 0 5
14214: PUSH
14215: LD_VAR 0 5
14219: PUSH
14220: LD_VAR 0 3
14224: PUSH
14225: LD_VAR 0 4
14229: ARRAY
14230: PPUSH
14231: CALL_OW 266
14235: PUSH
14236: LD_VAR 0 3
14240: PUSH
14241: LD_VAR 0 4
14245: ARRAY
14246: PPUSH
14247: CALL_OW 250
14251: PUSH
14252: LD_VAR 0 3
14256: PUSH
14257: LD_VAR 0 4
14261: ARRAY
14262: PPUSH
14263: CALL_OW 251
14267: PUSH
14268: LD_VAR 0 3
14272: PUSH
14273: LD_VAR 0 4
14277: ARRAY
14278: PPUSH
14279: CALL_OW 254
14283: PUSH
14284: EMPTY
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: PUSH
14290: EMPTY
14291: LIST
14292: ADD
14293: ST_TO_ADDR
14294: GO 14207
14296: POP
14297: POP
// result := list ;
14298: LD_ADDR_VAR 0 2
14302: PUSH
14303: LD_VAR 0 5
14307: ST_TO_ADDR
// end ;
14308: LD_VAR 0 2
14312: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
14313: LD_INT 0
14315: PPUSH
14316: PPUSH
14317: PPUSH
14318: PPUSH
14319: PPUSH
14320: PPUSH
14321: PPUSH
// if not factory then
14322: LD_VAR 0 1
14326: NOT
14327: IFFALSE 14331
// exit ;
14329: GO 14856
// if control = control_apeman then
14331: LD_VAR 0 4
14335: PUSH
14336: LD_INT 5
14338: EQUAL
14339: IFFALSE 14448
// begin tmp := UnitsInside ( factory ) ;
14341: LD_ADDR_VAR 0 8
14345: PUSH
14346: LD_VAR 0 1
14350: PPUSH
14351: CALL_OW 313
14355: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
14356: LD_VAR 0 8
14360: PPUSH
14361: LD_INT 25
14363: PUSH
14364: LD_INT 12
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PPUSH
14371: CALL_OW 72
14375: NOT
14376: IFFALSE 14386
// control := control_manual ;
14378: LD_ADDR_VAR 0 4
14382: PUSH
14383: LD_INT 1
14385: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
14386: LD_ADDR_VAR 0 8
14390: PUSH
14391: LD_VAR 0 1
14395: PPUSH
14396: CALL 14083 0 1
14400: ST_TO_ADDR
// if tmp then
14401: LD_VAR 0 8
14405: IFFALSE 14448
// begin for i in tmp do
14407: LD_ADDR_VAR 0 7
14411: PUSH
14412: LD_VAR 0 8
14416: PUSH
14417: FOR_IN
14418: IFFALSE 14446
// if i [ 1 ] = b_ext_radar then
14420: LD_VAR 0 7
14424: PUSH
14425: LD_INT 1
14427: ARRAY
14428: PUSH
14429: LD_INT 20
14431: EQUAL
14432: IFFALSE 14444
// begin control := control_remote ;
14434: LD_ADDR_VAR 0 4
14438: PUSH
14439: LD_INT 2
14441: ST_TO_ADDR
// break ;
14442: GO 14446
// end ;
14444: GO 14417
14446: POP
14447: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
14448: LD_VAR 0 1
14452: PPUSH
14453: LD_VAR 0 2
14457: PPUSH
14458: LD_VAR 0 3
14462: PPUSH
14463: LD_VAR 0 4
14467: PPUSH
14468: LD_VAR 0 5
14472: PPUSH
14473: CALL_OW 448
14477: IFFALSE 14512
// begin result := [ chassis , engine , control , weapon ] ;
14479: LD_ADDR_VAR 0 6
14483: PUSH
14484: LD_VAR 0 2
14488: PUSH
14489: LD_VAR 0 3
14493: PUSH
14494: LD_VAR 0 4
14498: PUSH
14499: LD_VAR 0 5
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: ST_TO_ADDR
// exit ;
14510: GO 14856
// end ; _chassis := AvailableChassisList ( factory ) ;
14512: LD_ADDR_VAR 0 9
14516: PUSH
14517: LD_VAR 0 1
14521: PPUSH
14522: CALL_OW 475
14526: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
14527: LD_ADDR_VAR 0 11
14531: PUSH
14532: LD_VAR 0 1
14536: PPUSH
14537: CALL_OW 476
14541: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
14542: LD_ADDR_VAR 0 12
14546: PUSH
14547: LD_VAR 0 1
14551: PPUSH
14552: CALL_OW 477
14556: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
14557: LD_ADDR_VAR 0 10
14561: PUSH
14562: LD_VAR 0 1
14566: PPUSH
14567: CALL_OW 478
14571: ST_TO_ADDR
// if not chassis in _chassis then
14572: LD_VAR 0 2
14576: PUSH
14577: LD_VAR 0 9
14581: IN
14582: NOT
14583: IFFALSE 14609
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
14585: LD_ADDR_VAR 0 2
14589: PUSH
14590: LD_VAR 0 9
14594: PUSH
14595: LD_INT 1
14597: PPUSH
14598: LD_VAR 0 9
14602: PPUSH
14603: CALL_OW 12
14607: ARRAY
14608: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
14609: LD_VAR 0 2
14613: PPUSH
14614: LD_VAR 0 3
14618: PPUSH
14619: CALL 14861 0 2
14623: NOT
14624: IFFALSE 14683
// repeat engine := _engine [ 1 ] ;
14626: LD_ADDR_VAR 0 3
14630: PUSH
14631: LD_VAR 0 11
14635: PUSH
14636: LD_INT 1
14638: ARRAY
14639: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
14640: LD_ADDR_VAR 0 11
14644: PUSH
14645: LD_VAR 0 11
14649: PPUSH
14650: LD_INT 1
14652: PPUSH
14653: CALL_OW 3
14657: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
14658: LD_VAR 0 2
14662: PPUSH
14663: LD_VAR 0 3
14667: PPUSH
14668: CALL 14861 0 2
14672: PUSH
14673: LD_VAR 0 11
14677: PUSH
14678: EMPTY
14679: EQUAL
14680: OR
14681: IFFALSE 14626
// if not control in _control then
14683: LD_VAR 0 4
14687: PUSH
14688: LD_VAR 0 12
14692: IN
14693: NOT
14694: IFFALSE 14720
// control := _control [ rand ( 1 , _control ) ] ;
14696: LD_ADDR_VAR 0 4
14700: PUSH
14701: LD_VAR 0 12
14705: PUSH
14706: LD_INT 1
14708: PPUSH
14709: LD_VAR 0 12
14713: PPUSH
14714: CALL_OW 12
14718: ARRAY
14719: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
14720: LD_VAR 0 2
14724: PPUSH
14725: LD_VAR 0 5
14729: PPUSH
14730: CALL 15081 0 2
14734: NOT
14735: IFFALSE 14794
// repeat weapon := _weapon [ 1 ] ;
14737: LD_ADDR_VAR 0 5
14741: PUSH
14742: LD_VAR 0 10
14746: PUSH
14747: LD_INT 1
14749: ARRAY
14750: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
14751: LD_ADDR_VAR 0 10
14755: PUSH
14756: LD_VAR 0 10
14760: PPUSH
14761: LD_INT 1
14763: PPUSH
14764: CALL_OW 3
14768: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
14769: LD_VAR 0 2
14773: PPUSH
14774: LD_VAR 0 5
14778: PPUSH
14779: CALL 15081 0 2
14783: PUSH
14784: LD_VAR 0 10
14788: PUSH
14789: EMPTY
14790: EQUAL
14791: OR
14792: IFFALSE 14737
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
14794: LD_VAR 0 1
14798: PPUSH
14799: LD_VAR 0 2
14803: PPUSH
14804: LD_VAR 0 3
14808: PPUSH
14809: LD_VAR 0 4
14813: PPUSH
14814: LD_VAR 0 5
14818: PPUSH
14819: CALL_OW 448
14823: IFFALSE 14856
// result := [ chassis , engine , control , weapon ] ;
14825: LD_ADDR_VAR 0 6
14829: PUSH
14830: LD_VAR 0 2
14834: PUSH
14835: LD_VAR 0 3
14839: PUSH
14840: LD_VAR 0 4
14844: PUSH
14845: LD_VAR 0 5
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: ST_TO_ADDR
// end ;
14856: LD_VAR 0 6
14860: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
14861: LD_INT 0
14863: PPUSH
// if not chassis or not engine then
14864: LD_VAR 0 1
14868: NOT
14869: PUSH
14870: LD_VAR 0 2
14874: NOT
14875: OR
14876: IFFALSE 14880
// exit ;
14878: GO 15076
// case engine of engine_solar :
14880: LD_VAR 0 2
14884: PUSH
14885: LD_INT 2
14887: DOUBLE
14888: EQUAL
14889: IFTRUE 14893
14891: GO 14931
14893: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
14894: LD_ADDR_VAR 0 3
14898: PUSH
14899: LD_INT 11
14901: PUSH
14902: LD_INT 12
14904: PUSH
14905: LD_INT 13
14907: PUSH
14908: LD_INT 14
14910: PUSH
14911: LD_INT 1
14913: PUSH
14914: LD_INT 2
14916: PUSH
14917: LD_INT 3
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: ST_TO_ADDR
14929: GO 15060
14931: LD_INT 1
14933: DOUBLE
14934: EQUAL
14935: IFTRUE 14939
14937: GO 15001
14939: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
14940: LD_ADDR_VAR 0 3
14944: PUSH
14945: LD_INT 11
14947: PUSH
14948: LD_INT 12
14950: PUSH
14951: LD_INT 13
14953: PUSH
14954: LD_INT 14
14956: PUSH
14957: LD_INT 1
14959: PUSH
14960: LD_INT 2
14962: PUSH
14963: LD_INT 3
14965: PUSH
14966: LD_INT 4
14968: PUSH
14969: LD_INT 5
14971: PUSH
14972: LD_INT 21
14974: PUSH
14975: LD_INT 23
14977: PUSH
14978: LD_INT 22
14980: PUSH
14981: LD_INT 24
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: ST_TO_ADDR
14999: GO 15060
15001: LD_INT 3
15003: DOUBLE
15004: EQUAL
15005: IFTRUE 15009
15007: GO 15059
15009: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15010: LD_ADDR_VAR 0 3
15014: PUSH
15015: LD_INT 13
15017: PUSH
15018: LD_INT 14
15020: PUSH
15021: LD_INT 2
15023: PUSH
15024: LD_INT 3
15026: PUSH
15027: LD_INT 4
15029: PUSH
15030: LD_INT 5
15032: PUSH
15033: LD_INT 21
15035: PUSH
15036: LD_INT 22
15038: PUSH
15039: LD_INT 23
15041: PUSH
15042: LD_INT 24
15044: PUSH
15045: EMPTY
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: LIST
15053: LIST
15054: LIST
15055: LIST
15056: ST_TO_ADDR
15057: GO 15060
15059: POP
// result := ( chassis in result ) ;
15060: LD_ADDR_VAR 0 3
15064: PUSH
15065: LD_VAR 0 1
15069: PUSH
15070: LD_VAR 0 3
15074: IN
15075: ST_TO_ADDR
// end ;
15076: LD_VAR 0 3
15080: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
15081: LD_INT 0
15083: PPUSH
// if not chassis or not weapon then
15084: LD_VAR 0 1
15088: NOT
15089: PUSH
15090: LD_VAR 0 2
15094: NOT
15095: OR
15096: IFFALSE 15100
// exit ;
15098: GO 16126
// case weapon of us_machine_gun :
15100: LD_VAR 0 2
15104: PUSH
15105: LD_INT 2
15107: DOUBLE
15108: EQUAL
15109: IFTRUE 15113
15111: GO 15143
15113: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
15114: LD_ADDR_VAR 0 3
15118: PUSH
15119: LD_INT 1
15121: PUSH
15122: LD_INT 2
15124: PUSH
15125: LD_INT 3
15127: PUSH
15128: LD_INT 4
15130: PUSH
15131: LD_INT 5
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: ST_TO_ADDR
15141: GO 16110
15143: LD_INT 3
15145: DOUBLE
15146: EQUAL
15147: IFTRUE 15151
15149: GO 15181
15151: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
15152: LD_ADDR_VAR 0 3
15156: PUSH
15157: LD_INT 1
15159: PUSH
15160: LD_INT 2
15162: PUSH
15163: LD_INT 3
15165: PUSH
15166: LD_INT 4
15168: PUSH
15169: LD_INT 5
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: ST_TO_ADDR
15179: GO 16110
15181: LD_INT 11
15183: DOUBLE
15184: EQUAL
15185: IFTRUE 15189
15187: GO 15219
15189: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
15190: LD_ADDR_VAR 0 3
15194: PUSH
15195: LD_INT 1
15197: PUSH
15198: LD_INT 2
15200: PUSH
15201: LD_INT 3
15203: PUSH
15204: LD_INT 4
15206: PUSH
15207: LD_INT 5
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: ST_TO_ADDR
15217: GO 16110
15219: LD_INT 4
15221: DOUBLE
15222: EQUAL
15223: IFTRUE 15227
15225: GO 15253
15227: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
15228: LD_ADDR_VAR 0 3
15232: PUSH
15233: LD_INT 2
15235: PUSH
15236: LD_INT 3
15238: PUSH
15239: LD_INT 4
15241: PUSH
15242: LD_INT 5
15244: PUSH
15245: EMPTY
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: ST_TO_ADDR
15251: GO 16110
15253: LD_INT 5
15255: DOUBLE
15256: EQUAL
15257: IFTRUE 15261
15259: GO 15287
15261: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
15262: LD_ADDR_VAR 0 3
15266: PUSH
15267: LD_INT 2
15269: PUSH
15270: LD_INT 3
15272: PUSH
15273: LD_INT 4
15275: PUSH
15276: LD_INT 5
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: ST_TO_ADDR
15285: GO 16110
15287: LD_INT 9
15289: DOUBLE
15290: EQUAL
15291: IFTRUE 15295
15293: GO 15321
15295: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
15296: LD_ADDR_VAR 0 3
15300: PUSH
15301: LD_INT 2
15303: PUSH
15304: LD_INT 3
15306: PUSH
15307: LD_INT 4
15309: PUSH
15310: LD_INT 5
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: ST_TO_ADDR
15319: GO 16110
15321: LD_INT 7
15323: DOUBLE
15324: EQUAL
15325: IFTRUE 15329
15327: GO 15355
15329: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
15330: LD_ADDR_VAR 0 3
15334: PUSH
15335: LD_INT 2
15337: PUSH
15338: LD_INT 3
15340: PUSH
15341: LD_INT 4
15343: PUSH
15344: LD_INT 5
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: ST_TO_ADDR
15353: GO 16110
15355: LD_INT 12
15357: DOUBLE
15358: EQUAL
15359: IFTRUE 15363
15361: GO 15389
15363: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
15364: LD_ADDR_VAR 0 3
15368: PUSH
15369: LD_INT 2
15371: PUSH
15372: LD_INT 3
15374: PUSH
15375: LD_INT 4
15377: PUSH
15378: LD_INT 5
15380: PUSH
15381: EMPTY
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: ST_TO_ADDR
15387: GO 16110
15389: LD_INT 13
15391: DOUBLE
15392: EQUAL
15393: IFTRUE 15397
15395: GO 15423
15397: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
15398: LD_ADDR_VAR 0 3
15402: PUSH
15403: LD_INT 2
15405: PUSH
15406: LD_INT 3
15408: PUSH
15409: LD_INT 4
15411: PUSH
15412: LD_INT 5
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: ST_TO_ADDR
15421: GO 16110
15423: LD_INT 14
15425: DOUBLE
15426: EQUAL
15427: IFTRUE 15431
15429: GO 15449
15431: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
15432: LD_ADDR_VAR 0 3
15436: PUSH
15437: LD_INT 4
15439: PUSH
15440: LD_INT 5
15442: PUSH
15443: EMPTY
15444: LIST
15445: LIST
15446: ST_TO_ADDR
15447: GO 16110
15449: LD_INT 6
15451: DOUBLE
15452: EQUAL
15453: IFTRUE 15457
15455: GO 15475
15457: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
15458: LD_ADDR_VAR 0 3
15462: PUSH
15463: LD_INT 4
15465: PUSH
15466: LD_INT 5
15468: PUSH
15469: EMPTY
15470: LIST
15471: LIST
15472: ST_TO_ADDR
15473: GO 16110
15475: LD_INT 10
15477: DOUBLE
15478: EQUAL
15479: IFTRUE 15483
15481: GO 15501
15483: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
15484: LD_ADDR_VAR 0 3
15488: PUSH
15489: LD_INT 4
15491: PUSH
15492: LD_INT 5
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: ST_TO_ADDR
15499: GO 16110
15501: LD_INT 22
15503: DOUBLE
15504: EQUAL
15505: IFTRUE 15509
15507: GO 15535
15509: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
15510: LD_ADDR_VAR 0 3
15514: PUSH
15515: LD_INT 11
15517: PUSH
15518: LD_INT 12
15520: PUSH
15521: LD_INT 13
15523: PUSH
15524: LD_INT 14
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: ST_TO_ADDR
15533: GO 16110
15535: LD_INT 23
15537: DOUBLE
15538: EQUAL
15539: IFTRUE 15543
15541: GO 15569
15543: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
15544: LD_ADDR_VAR 0 3
15548: PUSH
15549: LD_INT 11
15551: PUSH
15552: LD_INT 12
15554: PUSH
15555: LD_INT 13
15557: PUSH
15558: LD_INT 14
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: ST_TO_ADDR
15567: GO 16110
15569: LD_INT 24
15571: DOUBLE
15572: EQUAL
15573: IFTRUE 15577
15575: GO 15603
15577: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
15578: LD_ADDR_VAR 0 3
15582: PUSH
15583: LD_INT 11
15585: PUSH
15586: LD_INT 12
15588: PUSH
15589: LD_INT 13
15591: PUSH
15592: LD_INT 14
15594: PUSH
15595: EMPTY
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: ST_TO_ADDR
15601: GO 16110
15603: LD_INT 30
15605: DOUBLE
15606: EQUAL
15607: IFTRUE 15611
15609: GO 15637
15611: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
15612: LD_ADDR_VAR 0 3
15616: PUSH
15617: LD_INT 11
15619: PUSH
15620: LD_INT 12
15622: PUSH
15623: LD_INT 13
15625: PUSH
15626: LD_INT 14
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: ST_TO_ADDR
15635: GO 16110
15637: LD_INT 25
15639: DOUBLE
15640: EQUAL
15641: IFTRUE 15645
15643: GO 15663
15645: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
15646: LD_ADDR_VAR 0 3
15650: PUSH
15651: LD_INT 13
15653: PUSH
15654: LD_INT 14
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: ST_TO_ADDR
15661: GO 16110
15663: LD_INT 27
15665: DOUBLE
15666: EQUAL
15667: IFTRUE 15671
15669: GO 15689
15671: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
15672: LD_ADDR_VAR 0 3
15676: PUSH
15677: LD_INT 13
15679: PUSH
15680: LD_INT 14
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: ST_TO_ADDR
15687: GO 16110
15689: LD_INT 28
15691: DOUBLE
15692: EQUAL
15693: IFTRUE 15697
15695: GO 15715
15697: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
15698: LD_ADDR_VAR 0 3
15702: PUSH
15703: LD_INT 13
15705: PUSH
15706: LD_INT 14
15708: PUSH
15709: EMPTY
15710: LIST
15711: LIST
15712: ST_TO_ADDR
15713: GO 16110
15715: LD_INT 29
15717: DOUBLE
15718: EQUAL
15719: IFTRUE 15723
15721: GO 15741
15723: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
15724: LD_ADDR_VAR 0 3
15728: PUSH
15729: LD_INT 13
15731: PUSH
15732: LD_INT 14
15734: PUSH
15735: EMPTY
15736: LIST
15737: LIST
15738: ST_TO_ADDR
15739: GO 16110
15741: LD_INT 31
15743: DOUBLE
15744: EQUAL
15745: IFTRUE 15749
15747: GO 15767
15749: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
15750: LD_ADDR_VAR 0 3
15754: PUSH
15755: LD_INT 13
15757: PUSH
15758: LD_INT 14
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: ST_TO_ADDR
15765: GO 16110
15767: LD_INT 26
15769: DOUBLE
15770: EQUAL
15771: IFTRUE 15775
15773: GO 15793
15775: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
15776: LD_ADDR_VAR 0 3
15780: PUSH
15781: LD_INT 13
15783: PUSH
15784: LD_INT 14
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: ST_TO_ADDR
15791: GO 16110
15793: LD_INT 42
15795: DOUBLE
15796: EQUAL
15797: IFTRUE 15801
15799: GO 15827
15801: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
15802: LD_ADDR_VAR 0 3
15806: PUSH
15807: LD_INT 21
15809: PUSH
15810: LD_INT 22
15812: PUSH
15813: LD_INT 23
15815: PUSH
15816: LD_INT 24
15818: PUSH
15819: EMPTY
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: ST_TO_ADDR
15825: GO 16110
15827: LD_INT 43
15829: DOUBLE
15830: EQUAL
15831: IFTRUE 15835
15833: GO 15861
15835: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
15836: LD_ADDR_VAR 0 3
15840: PUSH
15841: LD_INT 21
15843: PUSH
15844: LD_INT 22
15846: PUSH
15847: LD_INT 23
15849: PUSH
15850: LD_INT 24
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: ST_TO_ADDR
15859: GO 16110
15861: LD_INT 44
15863: DOUBLE
15864: EQUAL
15865: IFTRUE 15869
15867: GO 15895
15869: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
15870: LD_ADDR_VAR 0 3
15874: PUSH
15875: LD_INT 21
15877: PUSH
15878: LD_INT 22
15880: PUSH
15881: LD_INT 23
15883: PUSH
15884: LD_INT 24
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: ST_TO_ADDR
15893: GO 16110
15895: LD_INT 45
15897: DOUBLE
15898: EQUAL
15899: IFTRUE 15903
15901: GO 15929
15903: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
15904: LD_ADDR_VAR 0 3
15908: PUSH
15909: LD_INT 21
15911: PUSH
15912: LD_INT 22
15914: PUSH
15915: LD_INT 23
15917: PUSH
15918: LD_INT 24
15920: PUSH
15921: EMPTY
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: ST_TO_ADDR
15927: GO 16110
15929: LD_INT 49
15931: DOUBLE
15932: EQUAL
15933: IFTRUE 15937
15935: GO 15963
15937: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
15938: LD_ADDR_VAR 0 3
15942: PUSH
15943: LD_INT 21
15945: PUSH
15946: LD_INT 22
15948: PUSH
15949: LD_INT 23
15951: PUSH
15952: LD_INT 24
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: ST_TO_ADDR
15961: GO 16110
15963: LD_INT 51
15965: DOUBLE
15966: EQUAL
15967: IFTRUE 15971
15969: GO 15997
15971: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
15972: LD_ADDR_VAR 0 3
15976: PUSH
15977: LD_INT 21
15979: PUSH
15980: LD_INT 22
15982: PUSH
15983: LD_INT 23
15985: PUSH
15986: LD_INT 24
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: ST_TO_ADDR
15995: GO 16110
15997: LD_INT 52
15999: DOUBLE
16000: EQUAL
16001: IFTRUE 16005
16003: GO 16031
16005: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
16006: LD_ADDR_VAR 0 3
16010: PUSH
16011: LD_INT 21
16013: PUSH
16014: LD_INT 22
16016: PUSH
16017: LD_INT 23
16019: PUSH
16020: LD_INT 24
16022: PUSH
16023: EMPTY
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: ST_TO_ADDR
16029: GO 16110
16031: LD_INT 53
16033: DOUBLE
16034: EQUAL
16035: IFTRUE 16039
16037: GO 16057
16039: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
16040: LD_ADDR_VAR 0 3
16044: PUSH
16045: LD_INT 23
16047: PUSH
16048: LD_INT 24
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: ST_TO_ADDR
16055: GO 16110
16057: LD_INT 46
16059: DOUBLE
16060: EQUAL
16061: IFTRUE 16065
16063: GO 16083
16065: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
16066: LD_ADDR_VAR 0 3
16070: PUSH
16071: LD_INT 23
16073: PUSH
16074: LD_INT 24
16076: PUSH
16077: EMPTY
16078: LIST
16079: LIST
16080: ST_TO_ADDR
16081: GO 16110
16083: LD_INT 47
16085: DOUBLE
16086: EQUAL
16087: IFTRUE 16091
16089: GO 16109
16091: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16092: LD_ADDR_VAR 0 3
16096: PUSH
16097: LD_INT 23
16099: PUSH
16100: LD_INT 24
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: ST_TO_ADDR
16107: GO 16110
16109: POP
// result := ( chassis in result ) ;
16110: LD_ADDR_VAR 0 3
16114: PUSH
16115: LD_VAR 0 1
16119: PUSH
16120: LD_VAR 0 3
16124: IN
16125: ST_TO_ADDR
// end ;
16126: LD_VAR 0 3
16130: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
16131: LD_INT 0
16133: PPUSH
16134: PPUSH
16135: PPUSH
16136: PPUSH
16137: PPUSH
16138: PPUSH
16139: PPUSH
// result := array ;
16140: LD_ADDR_VAR 0 5
16144: PUSH
16145: LD_VAR 0 1
16149: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
16150: LD_VAR 0 1
16154: NOT
16155: PUSH
16156: LD_VAR 0 2
16160: NOT
16161: OR
16162: PUSH
16163: LD_VAR 0 3
16167: NOT
16168: OR
16169: PUSH
16170: LD_VAR 0 2
16174: PUSH
16175: LD_VAR 0 1
16179: GREATER
16180: OR
16181: PUSH
16182: LD_VAR 0 3
16186: PUSH
16187: LD_VAR 0 1
16191: GREATER
16192: OR
16193: IFFALSE 16197
// exit ;
16195: GO 16493
// if direction then
16197: LD_VAR 0 4
16201: IFFALSE 16265
// begin d := 1 ;
16203: LD_ADDR_VAR 0 9
16207: PUSH
16208: LD_INT 1
16210: ST_TO_ADDR
// if i_from > i_to then
16211: LD_VAR 0 2
16215: PUSH
16216: LD_VAR 0 3
16220: GREATER
16221: IFFALSE 16247
// length := ( array - i_from ) + i_to else
16223: LD_ADDR_VAR 0 11
16227: PUSH
16228: LD_VAR 0 1
16232: PUSH
16233: LD_VAR 0 2
16237: MINUS
16238: PUSH
16239: LD_VAR 0 3
16243: PLUS
16244: ST_TO_ADDR
16245: GO 16263
// length := i_to - i_from ;
16247: LD_ADDR_VAR 0 11
16251: PUSH
16252: LD_VAR 0 3
16256: PUSH
16257: LD_VAR 0 2
16261: MINUS
16262: ST_TO_ADDR
// end else
16263: GO 16326
// begin d := - 1 ;
16265: LD_ADDR_VAR 0 9
16269: PUSH
16270: LD_INT 1
16272: NEG
16273: ST_TO_ADDR
// if i_from > i_to then
16274: LD_VAR 0 2
16278: PUSH
16279: LD_VAR 0 3
16283: GREATER
16284: IFFALSE 16304
// length := i_from - i_to else
16286: LD_ADDR_VAR 0 11
16290: PUSH
16291: LD_VAR 0 2
16295: PUSH
16296: LD_VAR 0 3
16300: MINUS
16301: ST_TO_ADDR
16302: GO 16326
// length := ( array - i_to ) + i_from ;
16304: LD_ADDR_VAR 0 11
16308: PUSH
16309: LD_VAR 0 1
16313: PUSH
16314: LD_VAR 0 3
16318: MINUS
16319: PUSH
16320: LD_VAR 0 2
16324: PLUS
16325: ST_TO_ADDR
// end ; if not length then
16326: LD_VAR 0 11
16330: NOT
16331: IFFALSE 16335
// exit ;
16333: GO 16493
// tmp := array ;
16335: LD_ADDR_VAR 0 10
16339: PUSH
16340: LD_VAR 0 1
16344: ST_TO_ADDR
// for i = 1 to length do
16345: LD_ADDR_VAR 0 6
16349: PUSH
16350: DOUBLE
16351: LD_INT 1
16353: DEC
16354: ST_TO_ADDR
16355: LD_VAR 0 11
16359: PUSH
16360: FOR_TO
16361: IFFALSE 16481
// begin for j = 1 to array do
16363: LD_ADDR_VAR 0 7
16367: PUSH
16368: DOUBLE
16369: LD_INT 1
16371: DEC
16372: ST_TO_ADDR
16373: LD_VAR 0 1
16377: PUSH
16378: FOR_TO
16379: IFFALSE 16467
// begin k := j + d ;
16381: LD_ADDR_VAR 0 8
16385: PUSH
16386: LD_VAR 0 7
16390: PUSH
16391: LD_VAR 0 9
16395: PLUS
16396: ST_TO_ADDR
// if k > array then
16397: LD_VAR 0 8
16401: PUSH
16402: LD_VAR 0 1
16406: GREATER
16407: IFFALSE 16417
// k := 1 ;
16409: LD_ADDR_VAR 0 8
16413: PUSH
16414: LD_INT 1
16416: ST_TO_ADDR
// if not k then
16417: LD_VAR 0 8
16421: NOT
16422: IFFALSE 16434
// k := array ;
16424: LD_ADDR_VAR 0 8
16428: PUSH
16429: LD_VAR 0 1
16433: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
16434: LD_ADDR_VAR 0 10
16438: PUSH
16439: LD_VAR 0 10
16443: PPUSH
16444: LD_VAR 0 8
16448: PPUSH
16449: LD_VAR 0 1
16453: PUSH
16454: LD_VAR 0 7
16458: ARRAY
16459: PPUSH
16460: CALL_OW 1
16464: ST_TO_ADDR
// end ;
16465: GO 16378
16467: POP
16468: POP
// array := tmp ;
16469: LD_ADDR_VAR 0 1
16473: PUSH
16474: LD_VAR 0 10
16478: ST_TO_ADDR
// end ;
16479: GO 16360
16481: POP
16482: POP
// result := array ;
16483: LD_ADDR_VAR 0 5
16487: PUSH
16488: LD_VAR 0 1
16492: ST_TO_ADDR
// end ;
16493: LD_VAR 0 5
16497: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
16498: LD_INT 0
16500: PPUSH
16501: PPUSH
// result := 0 ;
16502: LD_ADDR_VAR 0 3
16506: PUSH
16507: LD_INT 0
16509: ST_TO_ADDR
// if not array or not value in array then
16510: LD_VAR 0 1
16514: NOT
16515: PUSH
16516: LD_VAR 0 2
16520: PUSH
16521: LD_VAR 0 1
16525: IN
16526: NOT
16527: OR
16528: IFFALSE 16532
// exit ;
16530: GO 16586
// for i = 1 to array do
16532: LD_ADDR_VAR 0 4
16536: PUSH
16537: DOUBLE
16538: LD_INT 1
16540: DEC
16541: ST_TO_ADDR
16542: LD_VAR 0 1
16546: PUSH
16547: FOR_TO
16548: IFFALSE 16584
// if value = array [ i ] then
16550: LD_VAR 0 2
16554: PUSH
16555: LD_VAR 0 1
16559: PUSH
16560: LD_VAR 0 4
16564: ARRAY
16565: EQUAL
16566: IFFALSE 16582
// begin result := i ;
16568: LD_ADDR_VAR 0 3
16572: PUSH
16573: LD_VAR 0 4
16577: ST_TO_ADDR
// exit ;
16578: POP
16579: POP
16580: GO 16586
// end ;
16582: GO 16547
16584: POP
16585: POP
// end ;
16586: LD_VAR 0 3
16590: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
16591: LD_INT 0
16593: PPUSH
// vc_chassis := chassis ;
16594: LD_ADDR_OWVAR 37
16598: PUSH
16599: LD_VAR 0 1
16603: ST_TO_ADDR
// vc_engine := engine ;
16604: LD_ADDR_OWVAR 39
16608: PUSH
16609: LD_VAR 0 2
16613: ST_TO_ADDR
// vc_control := control ;
16614: LD_ADDR_OWVAR 38
16618: PUSH
16619: LD_VAR 0 3
16623: ST_TO_ADDR
// vc_weapon := weapon ;
16624: LD_ADDR_OWVAR 40
16628: PUSH
16629: LD_VAR 0 4
16633: ST_TO_ADDR
// vc_fuel_battery := fuel ;
16634: LD_ADDR_OWVAR 41
16638: PUSH
16639: LD_VAR 0 5
16643: ST_TO_ADDR
// end ;
16644: LD_VAR 0 6
16648: RET
// export function WantPlant ( unit ) ; var task ; begin
16649: LD_INT 0
16651: PPUSH
16652: PPUSH
// result := false ;
16653: LD_ADDR_VAR 0 2
16657: PUSH
16658: LD_INT 0
16660: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
16661: LD_ADDR_VAR 0 3
16665: PUSH
16666: LD_VAR 0 1
16670: PPUSH
16671: CALL_OW 437
16675: ST_TO_ADDR
// if task then
16676: LD_VAR 0 3
16680: IFFALSE 16708
// if task [ 1 ] [ 1 ] = p then
16682: LD_VAR 0 3
16686: PUSH
16687: LD_INT 1
16689: ARRAY
16690: PUSH
16691: LD_INT 1
16693: ARRAY
16694: PUSH
16695: LD_STRING p
16697: EQUAL
16698: IFFALSE 16708
// result := true ;
16700: LD_ADDR_VAR 0 2
16704: PUSH
16705: LD_INT 1
16707: ST_TO_ADDR
// end ;
16708: LD_VAR 0 2
16712: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
16713: LD_INT 0
16715: PPUSH
16716: PPUSH
16717: PPUSH
16718: PPUSH
// if pos < 1 then
16719: LD_VAR 0 2
16723: PUSH
16724: LD_INT 1
16726: LESS
16727: IFFALSE 16731
// exit ;
16729: GO 17034
// if pos = 1 then
16731: LD_VAR 0 2
16735: PUSH
16736: LD_INT 1
16738: EQUAL
16739: IFFALSE 16772
// result := Replace ( arr , pos [ 1 ] , value ) else
16741: LD_ADDR_VAR 0 4
16745: PUSH
16746: LD_VAR 0 1
16750: PPUSH
16751: LD_VAR 0 2
16755: PUSH
16756: LD_INT 1
16758: ARRAY
16759: PPUSH
16760: LD_VAR 0 3
16764: PPUSH
16765: CALL_OW 1
16769: ST_TO_ADDR
16770: GO 17034
// begin tmp := arr ;
16772: LD_ADDR_VAR 0 6
16776: PUSH
16777: LD_VAR 0 1
16781: ST_TO_ADDR
// s_arr := [ tmp ] ;
16782: LD_ADDR_VAR 0 7
16786: PUSH
16787: LD_VAR 0 6
16791: PUSH
16792: EMPTY
16793: LIST
16794: ST_TO_ADDR
// for i = 1 to pos - 1 do
16795: LD_ADDR_VAR 0 5
16799: PUSH
16800: DOUBLE
16801: LD_INT 1
16803: DEC
16804: ST_TO_ADDR
16805: LD_VAR 0 2
16809: PUSH
16810: LD_INT 1
16812: MINUS
16813: PUSH
16814: FOR_TO
16815: IFFALSE 16860
// begin tmp := tmp [ pos [ i ] ] ;
16817: LD_ADDR_VAR 0 6
16821: PUSH
16822: LD_VAR 0 6
16826: PUSH
16827: LD_VAR 0 2
16831: PUSH
16832: LD_VAR 0 5
16836: ARRAY
16837: ARRAY
16838: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
16839: LD_ADDR_VAR 0 7
16843: PUSH
16844: LD_VAR 0 7
16848: PUSH
16849: LD_VAR 0 6
16853: PUSH
16854: EMPTY
16855: LIST
16856: ADD
16857: ST_TO_ADDR
// end ;
16858: GO 16814
16860: POP
16861: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
16862: LD_ADDR_VAR 0 6
16866: PUSH
16867: LD_VAR 0 6
16871: PPUSH
16872: LD_VAR 0 2
16876: PUSH
16877: LD_VAR 0 2
16881: ARRAY
16882: PPUSH
16883: LD_VAR 0 3
16887: PPUSH
16888: CALL_OW 1
16892: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
16893: LD_ADDR_VAR 0 7
16897: PUSH
16898: LD_VAR 0 7
16902: PPUSH
16903: LD_VAR 0 7
16907: PPUSH
16908: LD_VAR 0 6
16912: PPUSH
16913: CALL_OW 1
16917: ST_TO_ADDR
// for i = s_arr downto 2 do
16918: LD_ADDR_VAR 0 5
16922: PUSH
16923: DOUBLE
16924: LD_VAR 0 7
16928: INC
16929: ST_TO_ADDR
16930: LD_INT 2
16932: PUSH
16933: FOR_DOWNTO
16934: IFFALSE 17018
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
16936: LD_ADDR_VAR 0 6
16940: PUSH
16941: LD_VAR 0 7
16945: PUSH
16946: LD_VAR 0 5
16950: PUSH
16951: LD_INT 1
16953: MINUS
16954: ARRAY
16955: PPUSH
16956: LD_VAR 0 2
16960: PUSH
16961: LD_VAR 0 5
16965: PUSH
16966: LD_INT 1
16968: MINUS
16969: ARRAY
16970: PPUSH
16971: LD_VAR 0 7
16975: PUSH
16976: LD_VAR 0 5
16980: ARRAY
16981: PPUSH
16982: CALL_OW 1
16986: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
16987: LD_ADDR_VAR 0 7
16991: PUSH
16992: LD_VAR 0 7
16996: PPUSH
16997: LD_VAR 0 5
17001: PUSH
17002: LD_INT 1
17004: MINUS
17005: PPUSH
17006: LD_VAR 0 6
17010: PPUSH
17011: CALL_OW 1
17015: ST_TO_ADDR
// end ;
17016: GO 16933
17018: POP
17019: POP
// result := s_arr [ 1 ] ;
17020: LD_ADDR_VAR 0 4
17024: PUSH
17025: LD_VAR 0 7
17029: PUSH
17030: LD_INT 1
17032: ARRAY
17033: ST_TO_ADDR
// end ; end ;
17034: LD_VAR 0 4
17038: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
17039: LD_INT 0
17041: PPUSH
17042: PPUSH
// if not list then
17043: LD_VAR 0 1
17047: NOT
17048: IFFALSE 17052
// exit ;
17050: GO 17143
// i := list [ pos1 ] ;
17052: LD_ADDR_VAR 0 5
17056: PUSH
17057: LD_VAR 0 1
17061: PUSH
17062: LD_VAR 0 2
17066: ARRAY
17067: ST_TO_ADDR
// if not i then
17068: LD_VAR 0 5
17072: NOT
17073: IFFALSE 17077
// exit ;
17075: GO 17143
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
17077: LD_ADDR_VAR 0 1
17081: PUSH
17082: LD_VAR 0 1
17086: PPUSH
17087: LD_VAR 0 2
17091: PPUSH
17092: LD_VAR 0 1
17096: PUSH
17097: LD_VAR 0 3
17101: ARRAY
17102: PPUSH
17103: CALL_OW 1
17107: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
17108: LD_ADDR_VAR 0 1
17112: PUSH
17113: LD_VAR 0 1
17117: PPUSH
17118: LD_VAR 0 3
17122: PPUSH
17123: LD_VAR 0 5
17127: PPUSH
17128: CALL_OW 1
17132: ST_TO_ADDR
// result := list ;
17133: LD_ADDR_VAR 0 4
17137: PUSH
17138: LD_VAR 0 1
17142: ST_TO_ADDR
// end ;
17143: LD_VAR 0 4
17147: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
17148: LD_INT 0
17150: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
17151: LD_ADDR_VAR 0 5
17155: PUSH
17156: LD_VAR 0 1
17160: PPUSH
17161: CALL_OW 250
17165: PPUSH
17166: LD_VAR 0 1
17170: PPUSH
17171: CALL_OW 251
17175: PPUSH
17176: LD_VAR 0 2
17180: PPUSH
17181: LD_VAR 0 3
17185: PPUSH
17186: LD_VAR 0 4
17190: PPUSH
17191: CALL 17201 0 5
17195: ST_TO_ADDR
// end ;
17196: LD_VAR 0 5
17200: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
17201: LD_INT 0
17203: PPUSH
17204: PPUSH
17205: PPUSH
17206: PPUSH
// if not list then
17207: LD_VAR 0 3
17211: NOT
17212: IFFALSE 17216
// exit ;
17214: GO 17604
// result := [ ] ;
17216: LD_ADDR_VAR 0 6
17220: PUSH
17221: EMPTY
17222: ST_TO_ADDR
// for i in list do
17223: LD_ADDR_VAR 0 7
17227: PUSH
17228: LD_VAR 0 3
17232: PUSH
17233: FOR_IN
17234: IFFALSE 17436
// begin tmp := GetDistUnitXY ( i , x , y ) ;
17236: LD_ADDR_VAR 0 9
17240: PUSH
17241: LD_VAR 0 7
17245: PPUSH
17246: LD_VAR 0 1
17250: PPUSH
17251: LD_VAR 0 2
17255: PPUSH
17256: CALL_OW 297
17260: ST_TO_ADDR
// if not result then
17261: LD_VAR 0 6
17265: NOT
17266: IFFALSE 17292
// result := [ [ i , tmp ] ] else
17268: LD_ADDR_VAR 0 6
17272: PUSH
17273: LD_VAR 0 7
17277: PUSH
17278: LD_VAR 0 9
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: EMPTY
17288: LIST
17289: ST_TO_ADDR
17290: GO 17434
// begin if result [ result ] [ 2 ] < tmp then
17292: LD_VAR 0 6
17296: PUSH
17297: LD_VAR 0 6
17301: ARRAY
17302: PUSH
17303: LD_INT 2
17305: ARRAY
17306: PUSH
17307: LD_VAR 0 9
17311: LESS
17312: IFFALSE 17354
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
17314: LD_ADDR_VAR 0 6
17318: PUSH
17319: LD_VAR 0 6
17323: PPUSH
17324: LD_VAR 0 6
17328: PUSH
17329: LD_INT 1
17331: PLUS
17332: PPUSH
17333: LD_VAR 0 7
17337: PUSH
17338: LD_VAR 0 9
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PPUSH
17347: CALL_OW 2
17351: ST_TO_ADDR
17352: GO 17434
// for j = 1 to result do
17354: LD_ADDR_VAR 0 8
17358: PUSH
17359: DOUBLE
17360: LD_INT 1
17362: DEC
17363: ST_TO_ADDR
17364: LD_VAR 0 6
17368: PUSH
17369: FOR_TO
17370: IFFALSE 17432
// begin if tmp < result [ j ] [ 2 ] then
17372: LD_VAR 0 9
17376: PUSH
17377: LD_VAR 0 6
17381: PUSH
17382: LD_VAR 0 8
17386: ARRAY
17387: PUSH
17388: LD_INT 2
17390: ARRAY
17391: LESS
17392: IFFALSE 17430
// begin result := Insert ( result , j , [ i , tmp ] ) ;
17394: LD_ADDR_VAR 0 6
17398: PUSH
17399: LD_VAR 0 6
17403: PPUSH
17404: LD_VAR 0 8
17408: PPUSH
17409: LD_VAR 0 7
17413: PUSH
17414: LD_VAR 0 9
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PPUSH
17423: CALL_OW 2
17427: ST_TO_ADDR
// break ;
17428: GO 17432
// end ; end ;
17430: GO 17369
17432: POP
17433: POP
// end ; end ;
17434: GO 17233
17436: POP
17437: POP
// if result and not asc then
17438: LD_VAR 0 6
17442: PUSH
17443: LD_VAR 0 4
17447: NOT
17448: AND
17449: IFFALSE 17524
// begin tmp := result ;
17451: LD_ADDR_VAR 0 9
17455: PUSH
17456: LD_VAR 0 6
17460: ST_TO_ADDR
// for i = tmp downto 1 do
17461: LD_ADDR_VAR 0 7
17465: PUSH
17466: DOUBLE
17467: LD_VAR 0 9
17471: INC
17472: ST_TO_ADDR
17473: LD_INT 1
17475: PUSH
17476: FOR_DOWNTO
17477: IFFALSE 17522
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
17479: LD_ADDR_VAR 0 6
17483: PUSH
17484: LD_VAR 0 6
17488: PPUSH
17489: LD_VAR 0 9
17493: PUSH
17494: LD_VAR 0 7
17498: MINUS
17499: PUSH
17500: LD_INT 1
17502: PLUS
17503: PPUSH
17504: LD_VAR 0 9
17508: PUSH
17509: LD_VAR 0 7
17513: ARRAY
17514: PPUSH
17515: CALL_OW 1
17519: ST_TO_ADDR
17520: GO 17476
17522: POP
17523: POP
// end ; tmp := [ ] ;
17524: LD_ADDR_VAR 0 9
17528: PUSH
17529: EMPTY
17530: ST_TO_ADDR
// if mode then
17531: LD_VAR 0 5
17535: IFFALSE 17604
// begin for i = 1 to result do
17537: LD_ADDR_VAR 0 7
17541: PUSH
17542: DOUBLE
17543: LD_INT 1
17545: DEC
17546: ST_TO_ADDR
17547: LD_VAR 0 6
17551: PUSH
17552: FOR_TO
17553: IFFALSE 17592
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
17555: LD_ADDR_VAR 0 9
17559: PUSH
17560: LD_VAR 0 9
17564: PPUSH
17565: LD_VAR 0 7
17569: PPUSH
17570: LD_VAR 0 6
17574: PUSH
17575: LD_VAR 0 7
17579: ARRAY
17580: PUSH
17581: LD_INT 1
17583: ARRAY
17584: PPUSH
17585: CALL_OW 1
17589: ST_TO_ADDR
17590: GO 17552
17592: POP
17593: POP
// result := tmp ;
17594: LD_ADDR_VAR 0 6
17598: PUSH
17599: LD_VAR 0 9
17603: ST_TO_ADDR
// end ; end ;
17604: LD_VAR 0 6
17608: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
17609: LD_INT 0
17611: PPUSH
17612: PPUSH
17613: PPUSH
17614: PPUSH
17615: PPUSH
17616: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
17617: LD_ADDR_VAR 0 5
17621: PUSH
17622: LD_INT 0
17624: PUSH
17625: LD_INT 0
17627: PUSH
17628: LD_INT 0
17630: PUSH
17631: EMPTY
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: ST_TO_ADDR
// if not x or not y then
17639: LD_VAR 0 2
17643: NOT
17644: PUSH
17645: LD_VAR 0 3
17649: NOT
17650: OR
17651: IFFALSE 17655
// exit ;
17653: GO 19301
// if not range then
17655: LD_VAR 0 4
17659: NOT
17660: IFFALSE 17670
// range := 10 ;
17662: LD_ADDR_VAR 0 4
17666: PUSH
17667: LD_INT 10
17669: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17670: LD_ADDR_VAR 0 8
17674: PUSH
17675: LD_INT 81
17677: PUSH
17678: LD_VAR 0 1
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: PUSH
17687: LD_INT 92
17689: PUSH
17690: LD_VAR 0 2
17694: PUSH
17695: LD_VAR 0 3
17699: PUSH
17700: LD_VAR 0 4
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: PUSH
17711: LD_INT 3
17713: PUSH
17714: LD_INT 21
17716: PUSH
17717: LD_INT 3
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: LIST
17732: PPUSH
17733: CALL_OW 69
17737: ST_TO_ADDR
// if not tmp then
17738: LD_VAR 0 8
17742: NOT
17743: IFFALSE 17747
// exit ;
17745: GO 19301
// for i in tmp do
17747: LD_ADDR_VAR 0 6
17751: PUSH
17752: LD_VAR 0 8
17756: PUSH
17757: FOR_IN
17758: IFFALSE 19276
// begin points := [ 0 , 0 , 0 ] ;
17760: LD_ADDR_VAR 0 9
17764: PUSH
17765: LD_INT 0
17767: PUSH
17768: LD_INT 0
17770: PUSH
17771: LD_INT 0
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: LIST
17778: ST_TO_ADDR
// bpoints := 1 ;
17779: LD_ADDR_VAR 0 10
17783: PUSH
17784: LD_INT 1
17786: ST_TO_ADDR
// case GetType ( i ) of unit_human :
17787: LD_VAR 0 6
17791: PPUSH
17792: CALL_OW 247
17796: PUSH
17797: LD_INT 1
17799: DOUBLE
17800: EQUAL
17801: IFTRUE 17805
17803: GO 18383
17805: POP
// begin if GetClass ( i ) = 1 then
17806: LD_VAR 0 6
17810: PPUSH
17811: CALL_OW 257
17815: PUSH
17816: LD_INT 1
17818: EQUAL
17819: IFFALSE 17840
// points := [ 10 , 5 , 3 ] ;
17821: LD_ADDR_VAR 0 9
17825: PUSH
17826: LD_INT 10
17828: PUSH
17829: LD_INT 5
17831: PUSH
17832: LD_INT 3
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: LIST
17839: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
17840: LD_VAR 0 6
17844: PPUSH
17845: CALL_OW 257
17849: PUSH
17850: LD_INT 2
17852: PUSH
17853: LD_INT 3
17855: PUSH
17856: LD_INT 4
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: LIST
17863: IN
17864: IFFALSE 17885
// points := [ 3 , 2 , 1 ] ;
17866: LD_ADDR_VAR 0 9
17870: PUSH
17871: LD_INT 3
17873: PUSH
17874: LD_INT 2
17876: PUSH
17877: LD_INT 1
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: LIST
17884: ST_TO_ADDR
// if GetClass ( i ) = 5 then
17885: LD_VAR 0 6
17889: PPUSH
17890: CALL_OW 257
17894: PUSH
17895: LD_INT 5
17897: EQUAL
17898: IFFALSE 17919
// points := [ 130 , 5 , 2 ] ;
17900: LD_ADDR_VAR 0 9
17904: PUSH
17905: LD_INT 130
17907: PUSH
17908: LD_INT 5
17910: PUSH
17911: LD_INT 2
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: LIST
17918: ST_TO_ADDR
// if GetClass ( i ) = 8 then
17919: LD_VAR 0 6
17923: PPUSH
17924: CALL_OW 257
17928: PUSH
17929: LD_INT 8
17931: EQUAL
17932: IFFALSE 17953
// points := [ 35 , 35 , 30 ] ;
17934: LD_ADDR_VAR 0 9
17938: PUSH
17939: LD_INT 35
17941: PUSH
17942: LD_INT 35
17944: PUSH
17945: LD_INT 30
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: LIST
17952: ST_TO_ADDR
// if GetClass ( i ) = 9 then
17953: LD_VAR 0 6
17957: PPUSH
17958: CALL_OW 257
17962: PUSH
17963: LD_INT 9
17965: EQUAL
17966: IFFALSE 17987
// points := [ 20 , 55 , 40 ] ;
17968: LD_ADDR_VAR 0 9
17972: PUSH
17973: LD_INT 20
17975: PUSH
17976: LD_INT 55
17978: PUSH
17979: LD_INT 40
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: LIST
17986: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
17987: LD_VAR 0 6
17991: PPUSH
17992: CALL_OW 257
17996: PUSH
17997: LD_INT 12
17999: PUSH
18000: LD_INT 16
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: IN
18007: IFFALSE 18028
// points := [ 5 , 3 , 2 ] ;
18009: LD_ADDR_VAR 0 9
18013: PUSH
18014: LD_INT 5
18016: PUSH
18017: LD_INT 3
18019: PUSH
18020: LD_INT 2
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: LIST
18027: ST_TO_ADDR
// if GetClass ( i ) = 17 then
18028: LD_VAR 0 6
18032: PPUSH
18033: CALL_OW 257
18037: PUSH
18038: LD_INT 17
18040: EQUAL
18041: IFFALSE 18062
// points := [ 100 , 50 , 75 ] ;
18043: LD_ADDR_VAR 0 9
18047: PUSH
18048: LD_INT 100
18050: PUSH
18051: LD_INT 50
18053: PUSH
18054: LD_INT 75
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: LIST
18061: ST_TO_ADDR
// if GetClass ( i ) = 15 then
18062: LD_VAR 0 6
18066: PPUSH
18067: CALL_OW 257
18071: PUSH
18072: LD_INT 15
18074: EQUAL
18075: IFFALSE 18096
// points := [ 10 , 5 , 3 ] ;
18077: LD_ADDR_VAR 0 9
18081: PUSH
18082: LD_INT 10
18084: PUSH
18085: LD_INT 5
18087: PUSH
18088: LD_INT 3
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: LIST
18095: ST_TO_ADDR
// if GetClass ( i ) = 14 then
18096: LD_VAR 0 6
18100: PPUSH
18101: CALL_OW 257
18105: PUSH
18106: LD_INT 14
18108: EQUAL
18109: IFFALSE 18130
// points := [ 10 , 0 , 0 ] ;
18111: LD_ADDR_VAR 0 9
18115: PUSH
18116: LD_INT 10
18118: PUSH
18119: LD_INT 0
18121: PUSH
18122: LD_INT 0
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: LIST
18129: ST_TO_ADDR
// if GetClass ( i ) = 11 then
18130: LD_VAR 0 6
18134: PPUSH
18135: CALL_OW 257
18139: PUSH
18140: LD_INT 11
18142: EQUAL
18143: IFFALSE 18164
// points := [ 30 , 10 , 5 ] ;
18145: LD_ADDR_VAR 0 9
18149: PUSH
18150: LD_INT 30
18152: PUSH
18153: LD_INT 10
18155: PUSH
18156: LD_INT 5
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: LIST
18163: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
18164: LD_VAR 0 1
18168: PPUSH
18169: LD_INT 5
18171: PPUSH
18172: CALL_OW 321
18176: PUSH
18177: LD_INT 2
18179: EQUAL
18180: IFFALSE 18197
// bpoints := bpoints * 1.8 ;
18182: LD_ADDR_VAR 0 10
18186: PUSH
18187: LD_VAR 0 10
18191: PUSH
18192: LD_REAL  1.80000000000000E+0000
18195: MUL
18196: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
18197: LD_VAR 0 6
18201: PPUSH
18202: CALL_OW 257
18206: PUSH
18207: LD_INT 1
18209: PUSH
18210: LD_INT 2
18212: PUSH
18213: LD_INT 3
18215: PUSH
18216: LD_INT 4
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: IN
18225: PUSH
18226: LD_VAR 0 1
18230: PPUSH
18231: LD_INT 51
18233: PPUSH
18234: CALL_OW 321
18238: PUSH
18239: LD_INT 2
18241: EQUAL
18242: AND
18243: IFFALSE 18260
// bpoints := bpoints * 1.2 ;
18245: LD_ADDR_VAR 0 10
18249: PUSH
18250: LD_VAR 0 10
18254: PUSH
18255: LD_REAL  1.20000000000000E+0000
18258: MUL
18259: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
18260: LD_VAR 0 6
18264: PPUSH
18265: CALL_OW 257
18269: PUSH
18270: LD_INT 5
18272: PUSH
18273: LD_INT 7
18275: PUSH
18276: LD_INT 9
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: LIST
18283: IN
18284: PUSH
18285: LD_VAR 0 1
18289: PPUSH
18290: LD_INT 52
18292: PPUSH
18293: CALL_OW 321
18297: PUSH
18298: LD_INT 2
18300: EQUAL
18301: AND
18302: IFFALSE 18319
// bpoints := bpoints * 1.5 ;
18304: LD_ADDR_VAR 0 10
18308: PUSH
18309: LD_VAR 0 10
18313: PUSH
18314: LD_REAL  1.50000000000000E+0000
18317: MUL
18318: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
18319: LD_VAR 0 1
18323: PPUSH
18324: LD_INT 66
18326: PPUSH
18327: CALL_OW 321
18331: PUSH
18332: LD_INT 2
18334: EQUAL
18335: IFFALSE 18352
// bpoints := bpoints * 1.1 ;
18337: LD_ADDR_VAR 0 10
18341: PUSH
18342: LD_VAR 0 10
18346: PUSH
18347: LD_REAL  1.10000000000000E+0000
18350: MUL
18351: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
18352: LD_ADDR_VAR 0 10
18356: PUSH
18357: LD_VAR 0 10
18361: PUSH
18362: LD_VAR 0 6
18366: PPUSH
18367: LD_INT 1
18369: PPUSH
18370: CALL_OW 259
18374: PUSH
18375: LD_REAL  1.15000000000000E+0000
18378: MUL
18379: MUL
18380: ST_TO_ADDR
// end ; unit_vehicle :
18381: GO 19205
18383: LD_INT 2
18385: DOUBLE
18386: EQUAL
18387: IFTRUE 18391
18389: GO 19193
18391: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
18392: LD_VAR 0 6
18396: PPUSH
18397: CALL_OW 264
18401: PUSH
18402: LD_INT 2
18404: PUSH
18405: LD_INT 42
18407: PUSH
18408: LD_INT 24
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: LIST
18415: IN
18416: IFFALSE 18437
// points := [ 25 , 5 , 3 ] ;
18418: LD_ADDR_VAR 0 9
18422: PUSH
18423: LD_INT 25
18425: PUSH
18426: LD_INT 5
18428: PUSH
18429: LD_INT 3
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: LIST
18436: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
18437: LD_VAR 0 6
18441: PPUSH
18442: CALL_OW 264
18446: PUSH
18447: LD_INT 4
18449: PUSH
18450: LD_INT 43
18452: PUSH
18453: LD_INT 25
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: LIST
18460: IN
18461: IFFALSE 18482
// points := [ 40 , 15 , 5 ] ;
18463: LD_ADDR_VAR 0 9
18467: PUSH
18468: LD_INT 40
18470: PUSH
18471: LD_INT 15
18473: PUSH
18474: LD_INT 5
18476: PUSH
18477: EMPTY
18478: LIST
18479: LIST
18480: LIST
18481: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
18482: LD_VAR 0 6
18486: PPUSH
18487: CALL_OW 264
18491: PUSH
18492: LD_INT 3
18494: PUSH
18495: LD_INT 23
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: IN
18502: IFFALSE 18523
// points := [ 7 , 25 , 8 ] ;
18504: LD_ADDR_VAR 0 9
18508: PUSH
18509: LD_INT 7
18511: PUSH
18512: LD_INT 25
18514: PUSH
18515: LD_INT 8
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: LIST
18522: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
18523: LD_VAR 0 6
18527: PPUSH
18528: CALL_OW 264
18532: PUSH
18533: LD_INT 5
18535: PUSH
18536: LD_INT 27
18538: PUSH
18539: LD_INT 44
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: LIST
18546: IN
18547: IFFALSE 18568
// points := [ 14 , 50 , 16 ] ;
18549: LD_ADDR_VAR 0 9
18553: PUSH
18554: LD_INT 14
18556: PUSH
18557: LD_INT 50
18559: PUSH
18560: LD_INT 16
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: LIST
18567: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
18568: LD_VAR 0 6
18572: PPUSH
18573: CALL_OW 264
18577: PUSH
18578: LD_INT 6
18580: PUSH
18581: LD_INT 46
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: IN
18588: IFFALSE 18609
// points := [ 32 , 120 , 70 ] ;
18590: LD_ADDR_VAR 0 9
18594: PUSH
18595: LD_INT 32
18597: PUSH
18598: LD_INT 120
18600: PUSH
18601: LD_INT 70
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: LIST
18608: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
18609: LD_VAR 0 6
18613: PPUSH
18614: CALL_OW 264
18618: PUSH
18619: LD_INT 7
18621: PUSH
18622: LD_INT 28
18624: PUSH
18625: LD_INT 45
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: LIST
18632: IN
18633: IFFALSE 18654
// points := [ 35 , 20 , 45 ] ;
18635: LD_ADDR_VAR 0 9
18639: PUSH
18640: LD_INT 35
18642: PUSH
18643: LD_INT 20
18645: PUSH
18646: LD_INT 45
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: LIST
18653: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
18654: LD_VAR 0 6
18658: PPUSH
18659: CALL_OW 264
18663: PUSH
18664: LD_INT 47
18666: PUSH
18667: EMPTY
18668: LIST
18669: IN
18670: IFFALSE 18691
// points := [ 67 , 45 , 75 ] ;
18672: LD_ADDR_VAR 0 9
18676: PUSH
18677: LD_INT 67
18679: PUSH
18680: LD_INT 45
18682: PUSH
18683: LD_INT 75
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: LIST
18690: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
18691: LD_VAR 0 6
18695: PPUSH
18696: CALL_OW 264
18700: PUSH
18701: LD_INT 26
18703: PUSH
18704: EMPTY
18705: LIST
18706: IN
18707: IFFALSE 18728
// points := [ 120 , 30 , 80 ] ;
18709: LD_ADDR_VAR 0 9
18713: PUSH
18714: LD_INT 120
18716: PUSH
18717: LD_INT 30
18719: PUSH
18720: LD_INT 80
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: LIST
18727: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
18728: LD_VAR 0 6
18732: PPUSH
18733: CALL_OW 264
18737: PUSH
18738: LD_INT 22
18740: PUSH
18741: EMPTY
18742: LIST
18743: IN
18744: IFFALSE 18765
// points := [ 40 , 1 , 1 ] ;
18746: LD_ADDR_VAR 0 9
18750: PUSH
18751: LD_INT 40
18753: PUSH
18754: LD_INT 1
18756: PUSH
18757: LD_INT 1
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: LIST
18764: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
18765: LD_VAR 0 6
18769: PPUSH
18770: CALL_OW 264
18774: PUSH
18775: LD_INT 29
18777: PUSH
18778: EMPTY
18779: LIST
18780: IN
18781: IFFALSE 18802
// points := [ 70 , 200 , 400 ] ;
18783: LD_ADDR_VAR 0 9
18787: PUSH
18788: LD_INT 70
18790: PUSH
18791: LD_INT 200
18793: PUSH
18794: LD_INT 400
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: LIST
18801: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
18802: LD_VAR 0 6
18806: PPUSH
18807: CALL_OW 264
18811: PUSH
18812: LD_INT 14
18814: PUSH
18815: LD_INT 53
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: IN
18822: IFFALSE 18843
// points := [ 40 , 10 , 20 ] ;
18824: LD_ADDR_VAR 0 9
18828: PUSH
18829: LD_INT 40
18831: PUSH
18832: LD_INT 10
18834: PUSH
18835: LD_INT 20
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: LIST
18842: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
18843: LD_VAR 0 6
18847: PPUSH
18848: CALL_OW 264
18852: PUSH
18853: LD_INT 9
18855: PUSH
18856: EMPTY
18857: LIST
18858: IN
18859: IFFALSE 18880
// points := [ 5 , 70 , 20 ] ;
18861: LD_ADDR_VAR 0 9
18865: PUSH
18866: LD_INT 5
18868: PUSH
18869: LD_INT 70
18871: PUSH
18872: LD_INT 20
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: LIST
18879: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
18880: LD_VAR 0 6
18884: PPUSH
18885: CALL_OW 264
18889: PUSH
18890: LD_INT 10
18892: PUSH
18893: EMPTY
18894: LIST
18895: IN
18896: IFFALSE 18917
// points := [ 35 , 110 , 70 ] ;
18898: LD_ADDR_VAR 0 9
18902: PUSH
18903: LD_INT 35
18905: PUSH
18906: LD_INT 110
18908: PUSH
18909: LD_INT 70
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: LIST
18916: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
18917: LD_VAR 0 6
18921: PPUSH
18922: CALL_OW 265
18926: PUSH
18927: LD_INT 25
18929: EQUAL
18930: IFFALSE 18951
// points := [ 80 , 65 , 100 ] ;
18932: LD_ADDR_VAR 0 9
18936: PUSH
18937: LD_INT 80
18939: PUSH
18940: LD_INT 65
18942: PUSH
18943: LD_INT 100
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: LIST
18950: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
18951: LD_VAR 0 6
18955: PPUSH
18956: CALL_OW 263
18960: PUSH
18961: LD_INT 1
18963: EQUAL
18964: IFFALSE 18999
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
18966: LD_ADDR_VAR 0 10
18970: PUSH
18971: LD_VAR 0 10
18975: PUSH
18976: LD_VAR 0 6
18980: PPUSH
18981: CALL_OW 311
18985: PPUSH
18986: LD_INT 3
18988: PPUSH
18989: CALL_OW 259
18993: PUSH
18994: LD_INT 4
18996: MUL
18997: MUL
18998: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
18999: LD_VAR 0 6
19003: PPUSH
19004: CALL_OW 263
19008: PUSH
19009: LD_INT 2
19011: EQUAL
19012: IFFALSE 19063
// begin j := IsControledBy ( i ) ;
19014: LD_ADDR_VAR 0 7
19018: PUSH
19019: LD_VAR 0 6
19023: PPUSH
19024: CALL_OW 312
19028: ST_TO_ADDR
// if j then
19029: LD_VAR 0 7
19033: IFFALSE 19063
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
19035: LD_ADDR_VAR 0 10
19039: PUSH
19040: LD_VAR 0 10
19044: PUSH
19045: LD_VAR 0 7
19049: PPUSH
19050: LD_INT 3
19052: PPUSH
19053: CALL_OW 259
19057: PUSH
19058: LD_INT 3
19060: MUL
19061: MUL
19062: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
19063: LD_VAR 0 6
19067: PPUSH
19068: CALL_OW 264
19072: PUSH
19073: LD_INT 5
19075: PUSH
19076: LD_INT 6
19078: PUSH
19079: LD_INT 46
19081: PUSH
19082: LD_INT 44
19084: PUSH
19085: LD_INT 47
19087: PUSH
19088: LD_INT 45
19090: PUSH
19091: LD_INT 28
19093: PUSH
19094: LD_INT 7
19096: PUSH
19097: LD_INT 27
19099: PUSH
19100: LD_INT 29
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: IN
19115: PUSH
19116: LD_VAR 0 1
19120: PPUSH
19121: LD_INT 52
19123: PPUSH
19124: CALL_OW 321
19128: PUSH
19129: LD_INT 2
19131: EQUAL
19132: AND
19133: IFFALSE 19150
// bpoints := bpoints * 1.2 ;
19135: LD_ADDR_VAR 0 10
19139: PUSH
19140: LD_VAR 0 10
19144: PUSH
19145: LD_REAL  1.20000000000000E+0000
19148: MUL
19149: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
19150: LD_VAR 0 6
19154: PPUSH
19155: CALL_OW 264
19159: PUSH
19160: LD_INT 6
19162: PUSH
19163: LD_INT 46
19165: PUSH
19166: LD_INT 47
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: LIST
19173: IN
19174: IFFALSE 19191
// bpoints := bpoints * 1.2 ;
19176: LD_ADDR_VAR 0 10
19180: PUSH
19181: LD_VAR 0 10
19185: PUSH
19186: LD_REAL  1.20000000000000E+0000
19189: MUL
19190: ST_TO_ADDR
// end ; unit_building :
19191: GO 19205
19193: LD_INT 3
19195: DOUBLE
19196: EQUAL
19197: IFTRUE 19201
19199: GO 19204
19201: POP
// ; end ;
19202: GO 19205
19204: POP
// for j = 1 to 3 do
19205: LD_ADDR_VAR 0 7
19209: PUSH
19210: DOUBLE
19211: LD_INT 1
19213: DEC
19214: ST_TO_ADDR
19215: LD_INT 3
19217: PUSH
19218: FOR_TO
19219: IFFALSE 19272
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
19221: LD_ADDR_VAR 0 5
19225: PUSH
19226: LD_VAR 0 5
19230: PPUSH
19231: LD_VAR 0 7
19235: PPUSH
19236: LD_VAR 0 5
19240: PUSH
19241: LD_VAR 0 7
19245: ARRAY
19246: PUSH
19247: LD_VAR 0 9
19251: PUSH
19252: LD_VAR 0 7
19256: ARRAY
19257: PUSH
19258: LD_VAR 0 10
19262: MUL
19263: PLUS
19264: PPUSH
19265: CALL_OW 1
19269: ST_TO_ADDR
19270: GO 19218
19272: POP
19273: POP
// end ;
19274: GO 17757
19276: POP
19277: POP
// result := Replace ( result , 4 , tmp ) ;
19278: LD_ADDR_VAR 0 5
19282: PUSH
19283: LD_VAR 0 5
19287: PPUSH
19288: LD_INT 4
19290: PPUSH
19291: LD_VAR 0 8
19295: PPUSH
19296: CALL_OW 1
19300: ST_TO_ADDR
// end ;
19301: LD_VAR 0 5
19305: RET
// export function DangerAtRange ( unit , range ) ; begin
19306: LD_INT 0
19308: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
19309: LD_ADDR_VAR 0 3
19313: PUSH
19314: LD_VAR 0 1
19318: PPUSH
19319: CALL_OW 255
19323: PPUSH
19324: LD_VAR 0 1
19328: PPUSH
19329: CALL_OW 250
19333: PPUSH
19334: LD_VAR 0 1
19338: PPUSH
19339: CALL_OW 251
19343: PPUSH
19344: LD_VAR 0 2
19348: PPUSH
19349: CALL 17609 0 4
19353: ST_TO_ADDR
// end ;
19354: LD_VAR 0 3
19358: RET
// export function DangerInArea ( side , area ) ; begin
19359: LD_INT 0
19361: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
19362: LD_ADDR_VAR 0 3
19366: PUSH
19367: LD_VAR 0 2
19371: PPUSH
19372: LD_INT 81
19374: PUSH
19375: LD_VAR 0 1
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: PPUSH
19384: CALL_OW 70
19388: ST_TO_ADDR
// end ;
19389: LD_VAR 0 3
19393: RET
// export function IsExtension ( b ) ; begin
19394: LD_INT 0
19396: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
19397: LD_ADDR_VAR 0 2
19401: PUSH
19402: LD_VAR 0 1
19406: PUSH
19407: LD_INT 23
19409: PUSH
19410: LD_INT 20
19412: PUSH
19413: LD_INT 22
19415: PUSH
19416: LD_INT 17
19418: PUSH
19419: LD_INT 24
19421: PUSH
19422: LD_INT 21
19424: PUSH
19425: LD_INT 19
19427: PUSH
19428: LD_INT 16
19430: PUSH
19431: LD_INT 25
19433: PUSH
19434: LD_INT 18
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: IN
19449: ST_TO_ADDR
// end ;
19450: LD_VAR 0 2
19454: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
19455: LD_INT 0
19457: PPUSH
19458: PPUSH
19459: PPUSH
// result := [ ] ;
19460: LD_ADDR_VAR 0 3
19464: PUSH
19465: EMPTY
19466: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
19467: LD_ADDR_VAR 0 4
19471: PUSH
19472: LD_VAR 0 2
19476: PPUSH
19477: LD_INT 21
19479: PUSH
19480: LD_INT 3
19482: PUSH
19483: EMPTY
19484: LIST
19485: LIST
19486: PPUSH
19487: CALL_OW 70
19491: ST_TO_ADDR
// if not tmp then
19492: LD_VAR 0 4
19496: NOT
19497: IFFALSE 19501
// exit ;
19499: GO 19559
// for i in tmp do
19501: LD_ADDR_VAR 0 5
19505: PUSH
19506: LD_VAR 0 4
19510: PUSH
19511: FOR_IN
19512: IFFALSE 19547
// if GetBase ( i ) <> base then
19514: LD_VAR 0 5
19518: PPUSH
19519: CALL_OW 274
19523: PUSH
19524: LD_VAR 0 1
19528: NONEQUAL
19529: IFFALSE 19545
// ComLinkToBase ( base , i ) ;
19531: LD_VAR 0 1
19535: PPUSH
19536: LD_VAR 0 5
19540: PPUSH
19541: CALL_OW 169
19545: GO 19511
19547: POP
19548: POP
// result := tmp ;
19549: LD_ADDR_VAR 0 3
19553: PUSH
19554: LD_VAR 0 4
19558: ST_TO_ADDR
// end ;
19559: LD_VAR 0 3
19563: RET
// export function ComComplete ( unit , b ) ; var i ; begin
19564: LD_INT 0
19566: PPUSH
19567: PPUSH
// if BuildingStatus ( b ) = bs_build then
19568: LD_VAR 0 2
19572: PPUSH
19573: CALL_OW 461
19577: PUSH
19578: LD_INT 1
19580: EQUAL
19581: IFFALSE 19641
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
19583: LD_VAR 0 1
19587: PPUSH
19588: LD_STRING h
19590: PUSH
19591: LD_VAR 0 2
19595: PPUSH
19596: CALL_OW 250
19600: PUSH
19601: LD_VAR 0 2
19605: PPUSH
19606: CALL_OW 251
19610: PUSH
19611: LD_VAR 0 2
19615: PUSH
19616: LD_INT 0
19618: PUSH
19619: LD_INT 0
19621: PUSH
19622: LD_INT 0
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: PUSH
19634: EMPTY
19635: LIST
19636: PPUSH
19637: CALL_OW 446
// end ;
19641: LD_VAR 0 3
19645: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
19646: LD_INT 0
19648: PPUSH
19649: PPUSH
19650: PPUSH
19651: PPUSH
19652: PPUSH
19653: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
19654: LD_VAR 0 1
19658: NOT
19659: PUSH
19660: LD_VAR 0 1
19664: PPUSH
19665: CALL_OW 263
19669: PUSH
19670: LD_INT 2
19672: EQUAL
19673: NOT
19674: OR
19675: IFFALSE 19679
// exit ;
19677: GO 19995
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
19679: LD_ADDR_VAR 0 6
19683: PUSH
19684: LD_INT 22
19686: PUSH
19687: LD_VAR 0 1
19691: PPUSH
19692: CALL_OW 255
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 2
19703: PUSH
19704: LD_INT 30
19706: PUSH
19707: LD_INT 36
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: LD_INT 34
19716: PUSH
19717: LD_INT 31
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: LIST
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PPUSH
19733: CALL_OW 69
19737: ST_TO_ADDR
// if not tmp then
19738: LD_VAR 0 6
19742: NOT
19743: IFFALSE 19747
// exit ;
19745: GO 19995
// result := [ ] ;
19747: LD_ADDR_VAR 0 2
19751: PUSH
19752: EMPTY
19753: ST_TO_ADDR
// for i in tmp do
19754: LD_ADDR_VAR 0 3
19758: PUSH
19759: LD_VAR 0 6
19763: PUSH
19764: FOR_IN
19765: IFFALSE 19836
// begin t := UnitsInside ( i ) ;
19767: LD_ADDR_VAR 0 4
19771: PUSH
19772: LD_VAR 0 3
19776: PPUSH
19777: CALL_OW 313
19781: ST_TO_ADDR
// if t then
19782: LD_VAR 0 4
19786: IFFALSE 19834
// for j in t do
19788: LD_ADDR_VAR 0 7
19792: PUSH
19793: LD_VAR 0 4
19797: PUSH
19798: FOR_IN
19799: IFFALSE 19832
// result := Insert ( result , result + 1 , j ) ;
19801: LD_ADDR_VAR 0 2
19805: PUSH
19806: LD_VAR 0 2
19810: PPUSH
19811: LD_VAR 0 2
19815: PUSH
19816: LD_INT 1
19818: PLUS
19819: PPUSH
19820: LD_VAR 0 7
19824: PPUSH
19825: CALL_OW 2
19829: ST_TO_ADDR
19830: GO 19798
19832: POP
19833: POP
// end ;
19834: GO 19764
19836: POP
19837: POP
// if not result then
19838: LD_VAR 0 2
19842: NOT
19843: IFFALSE 19847
// exit ;
19845: GO 19995
// mech := result [ 1 ] ;
19847: LD_ADDR_VAR 0 5
19851: PUSH
19852: LD_VAR 0 2
19856: PUSH
19857: LD_INT 1
19859: ARRAY
19860: ST_TO_ADDR
// if result > 1 then
19861: LD_VAR 0 2
19865: PUSH
19866: LD_INT 1
19868: GREATER
19869: IFFALSE 19981
// for i = 2 to result do
19871: LD_ADDR_VAR 0 3
19875: PUSH
19876: DOUBLE
19877: LD_INT 2
19879: DEC
19880: ST_TO_ADDR
19881: LD_VAR 0 2
19885: PUSH
19886: FOR_TO
19887: IFFALSE 19979
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
19889: LD_ADDR_VAR 0 4
19893: PUSH
19894: LD_VAR 0 2
19898: PUSH
19899: LD_VAR 0 3
19903: ARRAY
19904: PPUSH
19905: LD_INT 3
19907: PPUSH
19908: CALL_OW 259
19912: PUSH
19913: LD_VAR 0 2
19917: PUSH
19918: LD_VAR 0 3
19922: ARRAY
19923: PPUSH
19924: CALL_OW 432
19928: MINUS
19929: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
19930: LD_VAR 0 4
19934: PUSH
19935: LD_VAR 0 5
19939: PPUSH
19940: LD_INT 3
19942: PPUSH
19943: CALL_OW 259
19947: PUSH
19948: LD_VAR 0 5
19952: PPUSH
19953: CALL_OW 432
19957: MINUS
19958: GREATEREQUAL
19959: IFFALSE 19977
// mech := result [ i ] ;
19961: LD_ADDR_VAR 0 5
19965: PUSH
19966: LD_VAR 0 2
19970: PUSH
19971: LD_VAR 0 3
19975: ARRAY
19976: ST_TO_ADDR
// end ;
19977: GO 19886
19979: POP
19980: POP
// ComLinkTo ( vehicle , mech ) ;
19981: LD_VAR 0 1
19985: PPUSH
19986: LD_VAR 0 5
19990: PPUSH
19991: CALL_OW 135
// end ;
19995: LD_VAR 0 2
19999: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
20000: LD_INT 0
20002: PPUSH
20003: PPUSH
20004: PPUSH
20005: PPUSH
20006: PPUSH
20007: PPUSH
20008: PPUSH
20009: PPUSH
20010: PPUSH
20011: PPUSH
20012: PPUSH
20013: PPUSH
20014: PPUSH
// result := [ ] ;
20015: LD_ADDR_VAR 0 7
20019: PUSH
20020: EMPTY
20021: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
20022: LD_VAR 0 1
20026: PPUSH
20027: CALL_OW 266
20031: PUSH
20032: LD_INT 0
20034: PUSH
20035: LD_INT 1
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: IN
20042: NOT
20043: IFFALSE 20047
// exit ;
20045: GO 21678
// if name then
20047: LD_VAR 0 3
20051: IFFALSE 20067
// SetBName ( base_dep , name ) ;
20053: LD_VAR 0 1
20057: PPUSH
20058: LD_VAR 0 3
20062: PPUSH
20063: CALL_OW 500
// base := GetBase ( base_dep ) ;
20067: LD_ADDR_VAR 0 15
20071: PUSH
20072: LD_VAR 0 1
20076: PPUSH
20077: CALL_OW 274
20081: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
20082: LD_ADDR_VAR 0 16
20086: PUSH
20087: LD_VAR 0 1
20091: PPUSH
20092: CALL_OW 255
20096: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
20097: LD_ADDR_VAR 0 17
20101: PUSH
20102: LD_VAR 0 1
20106: PPUSH
20107: CALL_OW 248
20111: ST_TO_ADDR
// if sources then
20112: LD_VAR 0 5
20116: IFFALSE 20163
// for i = 1 to 3 do
20118: LD_ADDR_VAR 0 8
20122: PUSH
20123: DOUBLE
20124: LD_INT 1
20126: DEC
20127: ST_TO_ADDR
20128: LD_INT 3
20130: PUSH
20131: FOR_TO
20132: IFFALSE 20161
// AddResourceType ( base , i , sources [ i ] ) ;
20134: LD_VAR 0 15
20138: PPUSH
20139: LD_VAR 0 8
20143: PPUSH
20144: LD_VAR 0 5
20148: PUSH
20149: LD_VAR 0 8
20153: ARRAY
20154: PPUSH
20155: CALL_OW 276
20159: GO 20131
20161: POP
20162: POP
// buildings := GetBaseBuildings ( base , area ) ;
20163: LD_ADDR_VAR 0 18
20167: PUSH
20168: LD_VAR 0 15
20172: PPUSH
20173: LD_VAR 0 2
20177: PPUSH
20178: CALL 19455 0 2
20182: ST_TO_ADDR
// InitHc ;
20183: CALL_OW 19
// InitUc ;
20187: CALL_OW 18
// uc_side := side ;
20191: LD_ADDR_OWVAR 20
20195: PUSH
20196: LD_VAR 0 16
20200: ST_TO_ADDR
// uc_nation := nation ;
20201: LD_ADDR_OWVAR 21
20205: PUSH
20206: LD_VAR 0 17
20210: ST_TO_ADDR
// if buildings then
20211: LD_VAR 0 18
20215: IFFALSE 21537
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
20217: LD_ADDR_VAR 0 19
20221: PUSH
20222: LD_VAR 0 18
20226: PPUSH
20227: LD_INT 2
20229: PUSH
20230: LD_INT 30
20232: PUSH
20233: LD_INT 29
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: PUSH
20240: LD_INT 30
20242: PUSH
20243: LD_INT 30
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: LIST
20254: PPUSH
20255: CALL_OW 72
20259: ST_TO_ADDR
// if tmp then
20260: LD_VAR 0 19
20264: IFFALSE 20312
// for i in tmp do
20266: LD_ADDR_VAR 0 8
20270: PUSH
20271: LD_VAR 0 19
20275: PUSH
20276: FOR_IN
20277: IFFALSE 20310
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
20279: LD_VAR 0 8
20283: PPUSH
20284: CALL_OW 250
20288: PPUSH
20289: LD_VAR 0 8
20293: PPUSH
20294: CALL_OW 251
20298: PPUSH
20299: LD_VAR 0 16
20303: PPUSH
20304: CALL_OW 441
20308: GO 20276
20310: POP
20311: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
20312: LD_VAR 0 18
20316: PPUSH
20317: LD_INT 2
20319: PUSH
20320: LD_INT 30
20322: PUSH
20323: LD_INT 32
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PUSH
20330: LD_INT 30
20332: PUSH
20333: LD_INT 33
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: LIST
20344: PPUSH
20345: CALL_OW 72
20349: IFFALSE 20437
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
20351: LD_ADDR_VAR 0 8
20355: PUSH
20356: LD_VAR 0 18
20360: PPUSH
20361: LD_INT 2
20363: PUSH
20364: LD_INT 30
20366: PUSH
20367: LD_INT 32
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: LD_INT 30
20376: PUSH
20377: LD_INT 33
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: LIST
20388: PPUSH
20389: CALL_OW 72
20393: PUSH
20394: FOR_IN
20395: IFFALSE 20435
// begin if not GetBWeapon ( i ) then
20397: LD_VAR 0 8
20401: PPUSH
20402: CALL_OW 269
20406: NOT
20407: IFFALSE 20433
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
20409: LD_VAR 0 8
20413: PPUSH
20414: LD_VAR 0 8
20418: PPUSH
20419: LD_VAR 0 2
20423: PPUSH
20424: CALL 21683 0 2
20428: PPUSH
20429: CALL_OW 431
// end ;
20433: GO 20394
20435: POP
20436: POP
// end ; for i = 1 to personel do
20437: LD_ADDR_VAR 0 8
20441: PUSH
20442: DOUBLE
20443: LD_INT 1
20445: DEC
20446: ST_TO_ADDR
20447: LD_VAR 0 6
20451: PUSH
20452: FOR_TO
20453: IFFALSE 21517
// begin if i > 4 then
20455: LD_VAR 0 8
20459: PUSH
20460: LD_INT 4
20462: GREATER
20463: IFFALSE 20467
// break ;
20465: GO 21517
// case i of 1 :
20467: LD_VAR 0 8
20471: PUSH
20472: LD_INT 1
20474: DOUBLE
20475: EQUAL
20476: IFTRUE 20480
20478: GO 20560
20480: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
20481: LD_ADDR_VAR 0 12
20485: PUSH
20486: LD_VAR 0 18
20490: PPUSH
20491: LD_INT 22
20493: PUSH
20494: LD_VAR 0 16
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: LD_INT 58
20505: PUSH
20506: EMPTY
20507: LIST
20508: PUSH
20509: LD_INT 2
20511: PUSH
20512: LD_INT 30
20514: PUSH
20515: LD_INT 32
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: PUSH
20522: LD_INT 30
20524: PUSH
20525: LD_INT 4
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: PUSH
20532: LD_INT 30
20534: PUSH
20535: LD_INT 5
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: LIST
20552: PPUSH
20553: CALL_OW 72
20557: ST_TO_ADDR
20558: GO 20782
20560: LD_INT 2
20562: DOUBLE
20563: EQUAL
20564: IFTRUE 20568
20566: GO 20630
20568: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
20569: LD_ADDR_VAR 0 12
20573: PUSH
20574: LD_VAR 0 18
20578: PPUSH
20579: LD_INT 22
20581: PUSH
20582: LD_VAR 0 16
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 2
20593: PUSH
20594: LD_INT 30
20596: PUSH
20597: LD_INT 0
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: PUSH
20604: LD_INT 30
20606: PUSH
20607: LD_INT 1
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: LIST
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: PPUSH
20623: CALL_OW 72
20627: ST_TO_ADDR
20628: GO 20782
20630: LD_INT 3
20632: DOUBLE
20633: EQUAL
20634: IFTRUE 20638
20636: GO 20700
20638: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
20639: LD_ADDR_VAR 0 12
20643: PUSH
20644: LD_VAR 0 18
20648: PPUSH
20649: LD_INT 22
20651: PUSH
20652: LD_VAR 0 16
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PUSH
20661: LD_INT 2
20663: PUSH
20664: LD_INT 30
20666: PUSH
20667: LD_INT 2
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: PUSH
20674: LD_INT 30
20676: PUSH
20677: LD_INT 3
20679: PUSH
20680: EMPTY
20681: LIST
20682: LIST
20683: PUSH
20684: EMPTY
20685: LIST
20686: LIST
20687: LIST
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PPUSH
20693: CALL_OW 72
20697: ST_TO_ADDR
20698: GO 20782
20700: LD_INT 4
20702: DOUBLE
20703: EQUAL
20704: IFTRUE 20708
20706: GO 20781
20708: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
20709: LD_ADDR_VAR 0 12
20713: PUSH
20714: LD_VAR 0 18
20718: PPUSH
20719: LD_INT 22
20721: PUSH
20722: LD_VAR 0 16
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: LD_INT 2
20733: PUSH
20734: LD_INT 30
20736: PUSH
20737: LD_INT 6
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: PUSH
20744: LD_INT 30
20746: PUSH
20747: LD_INT 7
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: PUSH
20754: LD_INT 30
20756: PUSH
20757: LD_INT 8
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: PPUSH
20774: CALL_OW 72
20778: ST_TO_ADDR
20779: GO 20782
20781: POP
// if i = 1 then
20782: LD_VAR 0 8
20786: PUSH
20787: LD_INT 1
20789: EQUAL
20790: IFFALSE 20901
// begin tmp := [ ] ;
20792: LD_ADDR_VAR 0 19
20796: PUSH
20797: EMPTY
20798: ST_TO_ADDR
// for j in f do
20799: LD_ADDR_VAR 0 9
20803: PUSH
20804: LD_VAR 0 12
20808: PUSH
20809: FOR_IN
20810: IFFALSE 20883
// if GetBType ( j ) = b_bunker then
20812: LD_VAR 0 9
20816: PPUSH
20817: CALL_OW 266
20821: PUSH
20822: LD_INT 32
20824: EQUAL
20825: IFFALSE 20852
// tmp := Insert ( tmp , 1 , j ) else
20827: LD_ADDR_VAR 0 19
20831: PUSH
20832: LD_VAR 0 19
20836: PPUSH
20837: LD_INT 1
20839: PPUSH
20840: LD_VAR 0 9
20844: PPUSH
20845: CALL_OW 2
20849: ST_TO_ADDR
20850: GO 20881
// tmp := Insert ( tmp , tmp + 1 , j ) ;
20852: LD_ADDR_VAR 0 19
20856: PUSH
20857: LD_VAR 0 19
20861: PPUSH
20862: LD_VAR 0 19
20866: PUSH
20867: LD_INT 1
20869: PLUS
20870: PPUSH
20871: LD_VAR 0 9
20875: PPUSH
20876: CALL_OW 2
20880: ST_TO_ADDR
20881: GO 20809
20883: POP
20884: POP
// if tmp then
20885: LD_VAR 0 19
20889: IFFALSE 20901
// f := tmp ;
20891: LD_ADDR_VAR 0 12
20895: PUSH
20896: LD_VAR 0 19
20900: ST_TO_ADDR
// end ; x := personel [ i ] ;
20901: LD_ADDR_VAR 0 13
20905: PUSH
20906: LD_VAR 0 6
20910: PUSH
20911: LD_VAR 0 8
20915: ARRAY
20916: ST_TO_ADDR
// if x = - 1 then
20917: LD_VAR 0 13
20921: PUSH
20922: LD_INT 1
20924: NEG
20925: EQUAL
20926: IFFALSE 21135
// begin for j in f do
20928: LD_ADDR_VAR 0 9
20932: PUSH
20933: LD_VAR 0 12
20937: PUSH
20938: FOR_IN
20939: IFFALSE 21131
// repeat InitHc ;
20941: CALL_OW 19
// if GetBType ( j ) = b_barracks then
20945: LD_VAR 0 9
20949: PPUSH
20950: CALL_OW 266
20954: PUSH
20955: LD_INT 5
20957: EQUAL
20958: IFFALSE 21028
// begin if UnitsInside ( j ) < 3 then
20960: LD_VAR 0 9
20964: PPUSH
20965: CALL_OW 313
20969: PUSH
20970: LD_INT 3
20972: LESS
20973: IFFALSE 21009
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20975: LD_INT 0
20977: PPUSH
20978: LD_INT 5
20980: PUSH
20981: LD_INT 8
20983: PUSH
20984: LD_INT 9
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: LIST
20991: PUSH
20992: LD_VAR 0 17
20996: ARRAY
20997: PPUSH
20998: LD_VAR 0 4
21002: PPUSH
21003: CALL_OW 380
21007: GO 21026
// PrepareHuman ( false , i , skill ) ;
21009: LD_INT 0
21011: PPUSH
21012: LD_VAR 0 8
21016: PPUSH
21017: LD_VAR 0 4
21021: PPUSH
21022: CALL_OW 380
// end else
21026: GO 21045
// PrepareHuman ( false , i , skill ) ;
21028: LD_INT 0
21030: PPUSH
21031: LD_VAR 0 8
21035: PPUSH
21036: LD_VAR 0 4
21040: PPUSH
21041: CALL_OW 380
// un := CreateHuman ;
21045: LD_ADDR_VAR 0 14
21049: PUSH
21050: CALL_OW 44
21054: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21055: LD_ADDR_VAR 0 7
21059: PUSH
21060: LD_VAR 0 7
21064: PPUSH
21065: LD_INT 1
21067: PPUSH
21068: LD_VAR 0 14
21072: PPUSH
21073: CALL_OW 2
21077: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
21078: LD_VAR 0 14
21082: PPUSH
21083: LD_VAR 0 9
21087: PPUSH
21088: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
21092: LD_VAR 0 9
21096: PPUSH
21097: CALL_OW 313
21101: PUSH
21102: LD_INT 6
21104: EQUAL
21105: PUSH
21106: LD_VAR 0 9
21110: PPUSH
21111: CALL_OW 266
21115: PUSH
21116: LD_INT 32
21118: PUSH
21119: LD_INT 31
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: IN
21126: OR
21127: IFFALSE 20941
21129: GO 20938
21131: POP
21132: POP
// end else
21133: GO 21515
// for j = 1 to x do
21135: LD_ADDR_VAR 0 9
21139: PUSH
21140: DOUBLE
21141: LD_INT 1
21143: DEC
21144: ST_TO_ADDR
21145: LD_VAR 0 13
21149: PUSH
21150: FOR_TO
21151: IFFALSE 21513
// begin InitHc ;
21153: CALL_OW 19
// if not f then
21157: LD_VAR 0 12
21161: NOT
21162: IFFALSE 21251
// begin PrepareHuman ( false , i , skill ) ;
21164: LD_INT 0
21166: PPUSH
21167: LD_VAR 0 8
21171: PPUSH
21172: LD_VAR 0 4
21176: PPUSH
21177: CALL_OW 380
// un := CreateHuman ;
21181: LD_ADDR_VAR 0 14
21185: PUSH
21186: CALL_OW 44
21190: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21191: LD_ADDR_VAR 0 7
21195: PUSH
21196: LD_VAR 0 7
21200: PPUSH
21201: LD_INT 1
21203: PPUSH
21204: LD_VAR 0 14
21208: PPUSH
21209: CALL_OW 2
21213: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21214: LD_VAR 0 14
21218: PPUSH
21219: LD_VAR 0 1
21223: PPUSH
21224: CALL_OW 250
21228: PPUSH
21229: LD_VAR 0 1
21233: PPUSH
21234: CALL_OW 251
21238: PPUSH
21239: LD_INT 10
21241: PPUSH
21242: LD_INT 0
21244: PPUSH
21245: CALL_OW 50
// continue ;
21249: GO 21150
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
21251: LD_VAR 0 12
21255: PUSH
21256: LD_INT 1
21258: ARRAY
21259: PPUSH
21260: CALL_OW 313
21264: PUSH
21265: LD_VAR 0 12
21269: PUSH
21270: LD_INT 1
21272: ARRAY
21273: PPUSH
21274: CALL_OW 266
21278: PUSH
21279: LD_INT 32
21281: PUSH
21282: LD_INT 31
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: IN
21289: AND
21290: PUSH
21291: LD_VAR 0 12
21295: PUSH
21296: LD_INT 1
21298: ARRAY
21299: PPUSH
21300: CALL_OW 313
21304: PUSH
21305: LD_INT 6
21307: EQUAL
21308: OR
21309: IFFALSE 21329
// f := Delete ( f , 1 ) ;
21311: LD_ADDR_VAR 0 12
21315: PUSH
21316: LD_VAR 0 12
21320: PPUSH
21321: LD_INT 1
21323: PPUSH
21324: CALL_OW 3
21328: ST_TO_ADDR
// if not f then
21329: LD_VAR 0 12
21333: NOT
21334: IFFALSE 21352
// begin x := x + 2 ;
21336: LD_ADDR_VAR 0 13
21340: PUSH
21341: LD_VAR 0 13
21345: PUSH
21346: LD_INT 2
21348: PLUS
21349: ST_TO_ADDR
// continue ;
21350: GO 21150
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
21352: LD_VAR 0 12
21356: PUSH
21357: LD_INT 1
21359: ARRAY
21360: PPUSH
21361: CALL_OW 266
21365: PUSH
21366: LD_INT 5
21368: EQUAL
21369: IFFALSE 21443
// begin if UnitsInside ( f [ 1 ] ) < 3 then
21371: LD_VAR 0 12
21375: PUSH
21376: LD_INT 1
21378: ARRAY
21379: PPUSH
21380: CALL_OW 313
21384: PUSH
21385: LD_INT 3
21387: LESS
21388: IFFALSE 21424
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21390: LD_INT 0
21392: PPUSH
21393: LD_INT 5
21395: PUSH
21396: LD_INT 8
21398: PUSH
21399: LD_INT 9
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: LIST
21406: PUSH
21407: LD_VAR 0 17
21411: ARRAY
21412: PPUSH
21413: LD_VAR 0 4
21417: PPUSH
21418: CALL_OW 380
21422: GO 21441
// PrepareHuman ( false , i , skill ) ;
21424: LD_INT 0
21426: PPUSH
21427: LD_VAR 0 8
21431: PPUSH
21432: LD_VAR 0 4
21436: PPUSH
21437: CALL_OW 380
// end else
21441: GO 21460
// PrepareHuman ( false , i , skill ) ;
21443: LD_INT 0
21445: PPUSH
21446: LD_VAR 0 8
21450: PPUSH
21451: LD_VAR 0 4
21455: PPUSH
21456: CALL_OW 380
// un := CreateHuman ;
21460: LD_ADDR_VAR 0 14
21464: PUSH
21465: CALL_OW 44
21469: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21470: LD_ADDR_VAR 0 7
21474: PUSH
21475: LD_VAR 0 7
21479: PPUSH
21480: LD_INT 1
21482: PPUSH
21483: LD_VAR 0 14
21487: PPUSH
21488: CALL_OW 2
21492: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
21493: LD_VAR 0 14
21497: PPUSH
21498: LD_VAR 0 12
21502: PUSH
21503: LD_INT 1
21505: ARRAY
21506: PPUSH
21507: CALL_OW 52
// end ;
21511: GO 21150
21513: POP
21514: POP
// end ;
21515: GO 20452
21517: POP
21518: POP
// result := result ^ buildings ;
21519: LD_ADDR_VAR 0 7
21523: PUSH
21524: LD_VAR 0 7
21528: PUSH
21529: LD_VAR 0 18
21533: ADD
21534: ST_TO_ADDR
// end else
21535: GO 21678
// begin for i = 1 to personel do
21537: LD_ADDR_VAR 0 8
21541: PUSH
21542: DOUBLE
21543: LD_INT 1
21545: DEC
21546: ST_TO_ADDR
21547: LD_VAR 0 6
21551: PUSH
21552: FOR_TO
21553: IFFALSE 21676
// begin if i > 4 then
21555: LD_VAR 0 8
21559: PUSH
21560: LD_INT 4
21562: GREATER
21563: IFFALSE 21567
// break ;
21565: GO 21676
// x := personel [ i ] ;
21567: LD_ADDR_VAR 0 13
21571: PUSH
21572: LD_VAR 0 6
21576: PUSH
21577: LD_VAR 0 8
21581: ARRAY
21582: ST_TO_ADDR
// if x = - 1 then
21583: LD_VAR 0 13
21587: PUSH
21588: LD_INT 1
21590: NEG
21591: EQUAL
21592: IFFALSE 21596
// continue ;
21594: GO 21552
// PrepareHuman ( false , i , skill ) ;
21596: LD_INT 0
21598: PPUSH
21599: LD_VAR 0 8
21603: PPUSH
21604: LD_VAR 0 4
21608: PPUSH
21609: CALL_OW 380
// un := CreateHuman ;
21613: LD_ADDR_VAR 0 14
21617: PUSH
21618: CALL_OW 44
21622: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21623: LD_VAR 0 14
21627: PPUSH
21628: LD_VAR 0 1
21632: PPUSH
21633: CALL_OW 250
21637: PPUSH
21638: LD_VAR 0 1
21642: PPUSH
21643: CALL_OW 251
21647: PPUSH
21648: LD_INT 10
21650: PPUSH
21651: LD_INT 0
21653: PPUSH
21654: CALL_OW 50
// result := result ^ un ;
21658: LD_ADDR_VAR 0 7
21662: PUSH
21663: LD_VAR 0 7
21667: PUSH
21668: LD_VAR 0 14
21672: ADD
21673: ST_TO_ADDR
// end ;
21674: GO 21552
21676: POP
21677: POP
// end ; end ;
21678: LD_VAR 0 7
21682: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
21683: LD_INT 0
21685: PPUSH
21686: PPUSH
21687: PPUSH
21688: PPUSH
21689: PPUSH
21690: PPUSH
21691: PPUSH
21692: PPUSH
21693: PPUSH
21694: PPUSH
21695: PPUSH
21696: PPUSH
21697: PPUSH
21698: PPUSH
21699: PPUSH
21700: PPUSH
// result := false ;
21701: LD_ADDR_VAR 0 3
21705: PUSH
21706: LD_INT 0
21708: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
21709: LD_VAR 0 1
21713: NOT
21714: PUSH
21715: LD_VAR 0 1
21719: PPUSH
21720: CALL_OW 266
21724: PUSH
21725: LD_INT 32
21727: PUSH
21728: LD_INT 33
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: IN
21735: NOT
21736: OR
21737: IFFALSE 21741
// exit ;
21739: GO 22877
// nat := GetNation ( tower ) ;
21741: LD_ADDR_VAR 0 12
21745: PUSH
21746: LD_VAR 0 1
21750: PPUSH
21751: CALL_OW 248
21755: ST_TO_ADDR
// side := GetSide ( tower ) ;
21756: LD_ADDR_VAR 0 16
21760: PUSH
21761: LD_VAR 0 1
21765: PPUSH
21766: CALL_OW 255
21770: ST_TO_ADDR
// x := GetX ( tower ) ;
21771: LD_ADDR_VAR 0 10
21775: PUSH
21776: LD_VAR 0 1
21780: PPUSH
21781: CALL_OW 250
21785: ST_TO_ADDR
// y := GetY ( tower ) ;
21786: LD_ADDR_VAR 0 11
21790: PUSH
21791: LD_VAR 0 1
21795: PPUSH
21796: CALL_OW 251
21800: ST_TO_ADDR
// if not x or not y then
21801: LD_VAR 0 10
21805: NOT
21806: PUSH
21807: LD_VAR 0 11
21811: NOT
21812: OR
21813: IFFALSE 21817
// exit ;
21815: GO 22877
// weapon := 0 ;
21817: LD_ADDR_VAR 0 18
21821: PUSH
21822: LD_INT 0
21824: ST_TO_ADDR
// fac_list := [ ] ;
21825: LD_ADDR_VAR 0 17
21829: PUSH
21830: EMPTY
21831: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
21832: LD_ADDR_VAR 0 6
21836: PUSH
21837: LD_VAR 0 1
21841: PPUSH
21842: CALL_OW 274
21846: PPUSH
21847: LD_VAR 0 2
21851: PPUSH
21852: CALL 19455 0 2
21856: PPUSH
21857: LD_INT 30
21859: PUSH
21860: LD_INT 3
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PPUSH
21867: CALL_OW 72
21871: ST_TO_ADDR
// if not factories then
21872: LD_VAR 0 6
21876: NOT
21877: IFFALSE 21881
// exit ;
21879: GO 22877
// for i in factories do
21881: LD_ADDR_VAR 0 8
21885: PUSH
21886: LD_VAR 0 6
21890: PUSH
21891: FOR_IN
21892: IFFALSE 21917
// fac_list := fac_list union AvailableWeaponList ( i ) ;
21894: LD_ADDR_VAR 0 17
21898: PUSH
21899: LD_VAR 0 17
21903: PUSH
21904: LD_VAR 0 8
21908: PPUSH
21909: CALL_OW 478
21913: UNION
21914: ST_TO_ADDR
21915: GO 21891
21917: POP
21918: POP
// if not fac_list then
21919: LD_VAR 0 17
21923: NOT
21924: IFFALSE 21928
// exit ;
21926: GO 22877
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
21928: LD_ADDR_VAR 0 5
21932: PUSH
21933: LD_INT 4
21935: PUSH
21936: LD_INT 5
21938: PUSH
21939: LD_INT 9
21941: PUSH
21942: LD_INT 10
21944: PUSH
21945: LD_INT 6
21947: PUSH
21948: LD_INT 7
21950: PUSH
21951: LD_INT 11
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: PUSH
21963: LD_INT 27
21965: PUSH
21966: LD_INT 28
21968: PUSH
21969: LD_INT 26
21971: PUSH
21972: LD_INT 30
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: PUSH
21981: LD_INT 43
21983: PUSH
21984: LD_INT 44
21986: PUSH
21987: LD_INT 46
21989: PUSH
21990: LD_INT 45
21992: PUSH
21993: LD_INT 47
21995: PUSH
21996: LD_INT 49
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: LIST
22011: PUSH
22012: LD_VAR 0 12
22016: ARRAY
22017: ST_TO_ADDR
// for i in list do
22018: LD_ADDR_VAR 0 8
22022: PUSH
22023: LD_VAR 0 5
22027: PUSH
22028: FOR_IN
22029: IFFALSE 22062
// if not i in fac_list then
22031: LD_VAR 0 8
22035: PUSH
22036: LD_VAR 0 17
22040: IN
22041: NOT
22042: IFFALSE 22060
// list := list diff i ;
22044: LD_ADDR_VAR 0 5
22048: PUSH
22049: LD_VAR 0 5
22053: PUSH
22054: LD_VAR 0 8
22058: DIFF
22059: ST_TO_ADDR
22060: GO 22028
22062: POP
22063: POP
// if not list then
22064: LD_VAR 0 5
22068: NOT
22069: IFFALSE 22073
// exit ;
22071: GO 22877
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
22073: LD_VAR 0 12
22077: PUSH
22078: LD_INT 3
22080: EQUAL
22081: PUSH
22082: LD_INT 49
22084: PUSH
22085: LD_VAR 0 5
22089: IN
22090: AND
22091: PUSH
22092: LD_INT 31
22094: PPUSH
22095: LD_VAR 0 16
22099: PPUSH
22100: CALL_OW 321
22104: PUSH
22105: LD_INT 2
22107: EQUAL
22108: AND
22109: IFFALSE 22169
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
22111: LD_INT 22
22113: PUSH
22114: LD_VAR 0 16
22118: PUSH
22119: EMPTY
22120: LIST
22121: LIST
22122: PUSH
22123: LD_INT 35
22125: PUSH
22126: LD_INT 49
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: PUSH
22133: LD_INT 91
22135: PUSH
22136: LD_VAR 0 1
22140: PUSH
22141: LD_INT 10
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: LIST
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: LIST
22153: PPUSH
22154: CALL_OW 69
22158: NOT
22159: IFFALSE 22169
// weapon := ru_time_lapser ;
22161: LD_ADDR_VAR 0 18
22165: PUSH
22166: LD_INT 49
22168: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
22169: LD_VAR 0 12
22173: PUSH
22174: LD_INT 1
22176: PUSH
22177: LD_INT 2
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: IN
22184: PUSH
22185: LD_INT 11
22187: PUSH
22188: LD_VAR 0 5
22192: IN
22193: PUSH
22194: LD_INT 30
22196: PUSH
22197: LD_VAR 0 5
22201: IN
22202: OR
22203: AND
22204: PUSH
22205: LD_INT 6
22207: PPUSH
22208: LD_VAR 0 16
22212: PPUSH
22213: CALL_OW 321
22217: PUSH
22218: LD_INT 2
22220: EQUAL
22221: AND
22222: IFFALSE 22387
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
22224: LD_INT 22
22226: PUSH
22227: LD_VAR 0 16
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: PUSH
22236: LD_INT 2
22238: PUSH
22239: LD_INT 35
22241: PUSH
22242: LD_INT 11
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: PUSH
22249: LD_INT 35
22251: PUSH
22252: LD_INT 30
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: LIST
22263: PUSH
22264: LD_INT 91
22266: PUSH
22267: LD_VAR 0 1
22271: PUSH
22272: LD_INT 18
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: LIST
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: LIST
22284: PPUSH
22285: CALL_OW 69
22289: NOT
22290: PUSH
22291: LD_INT 22
22293: PUSH
22294: LD_VAR 0 16
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PUSH
22303: LD_INT 2
22305: PUSH
22306: LD_INT 30
22308: PUSH
22309: LD_INT 32
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PUSH
22316: LD_INT 30
22318: PUSH
22319: LD_INT 33
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: LIST
22330: PUSH
22331: LD_INT 91
22333: PUSH
22334: LD_VAR 0 1
22338: PUSH
22339: LD_INT 12
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: LIST
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: LIST
22351: PUSH
22352: EMPTY
22353: LIST
22354: PPUSH
22355: CALL_OW 69
22359: PUSH
22360: LD_INT 2
22362: GREATER
22363: AND
22364: IFFALSE 22387
// weapon := [ us_radar , ar_radar ] [ nat ] ;
22366: LD_ADDR_VAR 0 18
22370: PUSH
22371: LD_INT 11
22373: PUSH
22374: LD_INT 30
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: PUSH
22381: LD_VAR 0 12
22385: ARRAY
22386: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
22387: LD_VAR 0 18
22391: NOT
22392: PUSH
22393: LD_INT 40
22395: PPUSH
22396: LD_VAR 0 16
22400: PPUSH
22401: CALL_OW 321
22405: PUSH
22406: LD_INT 2
22408: EQUAL
22409: AND
22410: PUSH
22411: LD_INT 7
22413: PUSH
22414: LD_VAR 0 5
22418: IN
22419: PUSH
22420: LD_INT 28
22422: PUSH
22423: LD_VAR 0 5
22427: IN
22428: OR
22429: PUSH
22430: LD_INT 45
22432: PUSH
22433: LD_VAR 0 5
22437: IN
22438: OR
22439: AND
22440: IFFALSE 22694
// begin hex := GetHexInfo ( x , y ) ;
22442: LD_ADDR_VAR 0 4
22446: PUSH
22447: LD_VAR 0 10
22451: PPUSH
22452: LD_VAR 0 11
22456: PPUSH
22457: CALL_OW 546
22461: ST_TO_ADDR
// if hex [ 1 ] then
22462: LD_VAR 0 4
22466: PUSH
22467: LD_INT 1
22469: ARRAY
22470: IFFALSE 22474
// exit ;
22472: GO 22877
// height := hex [ 2 ] ;
22474: LD_ADDR_VAR 0 15
22478: PUSH
22479: LD_VAR 0 4
22483: PUSH
22484: LD_INT 2
22486: ARRAY
22487: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
22488: LD_ADDR_VAR 0 14
22492: PUSH
22493: LD_INT 0
22495: PUSH
22496: LD_INT 2
22498: PUSH
22499: LD_INT 3
22501: PUSH
22502: LD_INT 5
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: ST_TO_ADDR
// for i in tmp do
22511: LD_ADDR_VAR 0 8
22515: PUSH
22516: LD_VAR 0 14
22520: PUSH
22521: FOR_IN
22522: IFFALSE 22692
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
22524: LD_ADDR_VAR 0 9
22528: PUSH
22529: LD_VAR 0 10
22533: PPUSH
22534: LD_VAR 0 8
22538: PPUSH
22539: LD_INT 5
22541: PPUSH
22542: CALL_OW 272
22546: PUSH
22547: LD_VAR 0 11
22551: PPUSH
22552: LD_VAR 0 8
22556: PPUSH
22557: LD_INT 5
22559: PPUSH
22560: CALL_OW 273
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
22569: LD_VAR 0 9
22573: PUSH
22574: LD_INT 1
22576: ARRAY
22577: PPUSH
22578: LD_VAR 0 9
22582: PUSH
22583: LD_INT 2
22585: ARRAY
22586: PPUSH
22587: CALL_OW 488
22591: IFFALSE 22690
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
22593: LD_ADDR_VAR 0 4
22597: PUSH
22598: LD_VAR 0 9
22602: PUSH
22603: LD_INT 1
22605: ARRAY
22606: PPUSH
22607: LD_VAR 0 9
22611: PUSH
22612: LD_INT 2
22614: ARRAY
22615: PPUSH
22616: CALL_OW 546
22620: ST_TO_ADDR
// if hex [ 1 ] then
22621: LD_VAR 0 4
22625: PUSH
22626: LD_INT 1
22628: ARRAY
22629: IFFALSE 22633
// continue ;
22631: GO 22521
// h := hex [ 2 ] ;
22633: LD_ADDR_VAR 0 13
22637: PUSH
22638: LD_VAR 0 4
22642: PUSH
22643: LD_INT 2
22645: ARRAY
22646: ST_TO_ADDR
// if h + 7 < height then
22647: LD_VAR 0 13
22651: PUSH
22652: LD_INT 7
22654: PLUS
22655: PUSH
22656: LD_VAR 0 15
22660: LESS
22661: IFFALSE 22690
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
22663: LD_ADDR_VAR 0 18
22667: PUSH
22668: LD_INT 7
22670: PUSH
22671: LD_INT 28
22673: PUSH
22674: LD_INT 45
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: LIST
22681: PUSH
22682: LD_VAR 0 12
22686: ARRAY
22687: ST_TO_ADDR
// break ;
22688: GO 22692
// end ; end ; end ;
22690: GO 22521
22692: POP
22693: POP
// end ; if not weapon then
22694: LD_VAR 0 18
22698: NOT
22699: IFFALSE 22759
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
22701: LD_ADDR_VAR 0 5
22705: PUSH
22706: LD_VAR 0 5
22710: PUSH
22711: LD_INT 11
22713: PUSH
22714: LD_INT 30
22716: PUSH
22717: LD_INT 49
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: LIST
22724: DIFF
22725: ST_TO_ADDR
// if not list then
22726: LD_VAR 0 5
22730: NOT
22731: IFFALSE 22735
// exit ;
22733: GO 22877
// weapon := list [ rand ( 1 , list ) ] ;
22735: LD_ADDR_VAR 0 18
22739: PUSH
22740: LD_VAR 0 5
22744: PUSH
22745: LD_INT 1
22747: PPUSH
22748: LD_VAR 0 5
22752: PPUSH
22753: CALL_OW 12
22757: ARRAY
22758: ST_TO_ADDR
// end ; if weapon then
22759: LD_VAR 0 18
22763: IFFALSE 22877
// begin tmp := CostOfWeapon ( weapon ) ;
22765: LD_ADDR_VAR 0 14
22769: PUSH
22770: LD_VAR 0 18
22774: PPUSH
22775: CALL_OW 451
22779: ST_TO_ADDR
// j := GetBase ( tower ) ;
22780: LD_ADDR_VAR 0 9
22784: PUSH
22785: LD_VAR 0 1
22789: PPUSH
22790: CALL_OW 274
22794: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
22795: LD_VAR 0 9
22799: PPUSH
22800: LD_INT 1
22802: PPUSH
22803: CALL_OW 275
22807: PUSH
22808: LD_VAR 0 14
22812: PUSH
22813: LD_INT 1
22815: ARRAY
22816: GREATEREQUAL
22817: PUSH
22818: LD_VAR 0 9
22822: PPUSH
22823: LD_INT 2
22825: PPUSH
22826: CALL_OW 275
22830: PUSH
22831: LD_VAR 0 14
22835: PUSH
22836: LD_INT 2
22838: ARRAY
22839: GREATEREQUAL
22840: AND
22841: PUSH
22842: LD_VAR 0 9
22846: PPUSH
22847: LD_INT 3
22849: PPUSH
22850: CALL_OW 275
22854: PUSH
22855: LD_VAR 0 14
22859: PUSH
22860: LD_INT 3
22862: ARRAY
22863: GREATEREQUAL
22864: AND
22865: IFFALSE 22877
// result := weapon ;
22867: LD_ADDR_VAR 0 3
22871: PUSH
22872: LD_VAR 0 18
22876: ST_TO_ADDR
// end ; end ;
22877: LD_VAR 0 3
22881: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
22882: LD_INT 0
22884: PPUSH
22885: PPUSH
// result := true ;
22886: LD_ADDR_VAR 0 3
22890: PUSH
22891: LD_INT 1
22893: ST_TO_ADDR
// if array1 = array2 then
22894: LD_VAR 0 1
22898: PUSH
22899: LD_VAR 0 2
22903: EQUAL
22904: IFFALSE 22964
// begin for i = 1 to array1 do
22906: LD_ADDR_VAR 0 4
22910: PUSH
22911: DOUBLE
22912: LD_INT 1
22914: DEC
22915: ST_TO_ADDR
22916: LD_VAR 0 1
22920: PUSH
22921: FOR_TO
22922: IFFALSE 22960
// if array1 [ i ] <> array2 [ i ] then
22924: LD_VAR 0 1
22928: PUSH
22929: LD_VAR 0 4
22933: ARRAY
22934: PUSH
22935: LD_VAR 0 2
22939: PUSH
22940: LD_VAR 0 4
22944: ARRAY
22945: NONEQUAL
22946: IFFALSE 22958
// begin result := false ;
22948: LD_ADDR_VAR 0 3
22952: PUSH
22953: LD_INT 0
22955: ST_TO_ADDR
// break ;
22956: GO 22960
// end ;
22958: GO 22921
22960: POP
22961: POP
// end else
22962: GO 22972
// result := false ;
22964: LD_ADDR_VAR 0 3
22968: PUSH
22969: LD_INT 0
22971: ST_TO_ADDR
// end ;
22972: LD_VAR 0 3
22976: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
22977: LD_INT 0
22979: PPUSH
22980: PPUSH
22981: PPUSH
// pom := GetBase ( fac ) ;
22982: LD_ADDR_VAR 0 5
22986: PUSH
22987: LD_VAR 0 1
22991: PPUSH
22992: CALL_OW 274
22996: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
22997: LD_ADDR_VAR 0 4
23001: PUSH
23002: LD_VAR 0 2
23006: PUSH
23007: LD_INT 1
23009: ARRAY
23010: PPUSH
23011: LD_VAR 0 2
23015: PUSH
23016: LD_INT 2
23018: ARRAY
23019: PPUSH
23020: LD_VAR 0 2
23024: PUSH
23025: LD_INT 3
23027: ARRAY
23028: PPUSH
23029: LD_VAR 0 2
23033: PUSH
23034: LD_INT 4
23036: ARRAY
23037: PPUSH
23038: CALL_OW 449
23042: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23043: LD_ADDR_VAR 0 3
23047: PUSH
23048: LD_VAR 0 5
23052: PPUSH
23053: LD_INT 1
23055: PPUSH
23056: CALL_OW 275
23060: PUSH
23061: LD_VAR 0 4
23065: PUSH
23066: LD_INT 1
23068: ARRAY
23069: GREATEREQUAL
23070: PUSH
23071: LD_VAR 0 5
23075: PPUSH
23076: LD_INT 2
23078: PPUSH
23079: CALL_OW 275
23083: PUSH
23084: LD_VAR 0 4
23088: PUSH
23089: LD_INT 2
23091: ARRAY
23092: GREATEREQUAL
23093: AND
23094: PUSH
23095: LD_VAR 0 5
23099: PPUSH
23100: LD_INT 3
23102: PPUSH
23103: CALL_OW 275
23107: PUSH
23108: LD_VAR 0 4
23112: PUSH
23113: LD_INT 3
23115: ARRAY
23116: GREATEREQUAL
23117: AND
23118: ST_TO_ADDR
// end ;
23119: LD_VAR 0 3
23123: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
23124: LD_INT 0
23126: PPUSH
23127: PPUSH
23128: PPUSH
23129: PPUSH
// pom := GetBase ( building ) ;
23130: LD_ADDR_VAR 0 3
23134: PUSH
23135: LD_VAR 0 1
23139: PPUSH
23140: CALL_OW 274
23144: ST_TO_ADDR
// if not pom then
23145: LD_VAR 0 3
23149: NOT
23150: IFFALSE 23154
// exit ;
23152: GO 23324
// btype := GetBType ( building ) ;
23154: LD_ADDR_VAR 0 5
23158: PUSH
23159: LD_VAR 0 1
23163: PPUSH
23164: CALL_OW 266
23168: ST_TO_ADDR
// if btype = b_armoury then
23169: LD_VAR 0 5
23173: PUSH
23174: LD_INT 4
23176: EQUAL
23177: IFFALSE 23187
// btype := b_barracks ;
23179: LD_ADDR_VAR 0 5
23183: PUSH
23184: LD_INT 5
23186: ST_TO_ADDR
// if btype = b_depot then
23187: LD_VAR 0 5
23191: PUSH
23192: LD_INT 0
23194: EQUAL
23195: IFFALSE 23205
// btype := b_warehouse ;
23197: LD_ADDR_VAR 0 5
23201: PUSH
23202: LD_INT 1
23204: ST_TO_ADDR
// if btype = b_workshop then
23205: LD_VAR 0 5
23209: PUSH
23210: LD_INT 2
23212: EQUAL
23213: IFFALSE 23223
// btype := b_factory ;
23215: LD_ADDR_VAR 0 5
23219: PUSH
23220: LD_INT 3
23222: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23223: LD_ADDR_VAR 0 4
23227: PUSH
23228: LD_VAR 0 5
23232: PPUSH
23233: LD_VAR 0 1
23237: PPUSH
23238: CALL_OW 248
23242: PPUSH
23243: CALL_OW 450
23247: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23248: LD_ADDR_VAR 0 2
23252: PUSH
23253: LD_VAR 0 3
23257: PPUSH
23258: LD_INT 1
23260: PPUSH
23261: CALL_OW 275
23265: PUSH
23266: LD_VAR 0 4
23270: PUSH
23271: LD_INT 1
23273: ARRAY
23274: GREATEREQUAL
23275: PUSH
23276: LD_VAR 0 3
23280: PPUSH
23281: LD_INT 2
23283: PPUSH
23284: CALL_OW 275
23288: PUSH
23289: LD_VAR 0 4
23293: PUSH
23294: LD_INT 2
23296: ARRAY
23297: GREATEREQUAL
23298: AND
23299: PUSH
23300: LD_VAR 0 3
23304: PPUSH
23305: LD_INT 3
23307: PPUSH
23308: CALL_OW 275
23312: PUSH
23313: LD_VAR 0 4
23317: PUSH
23318: LD_INT 3
23320: ARRAY
23321: GREATEREQUAL
23322: AND
23323: ST_TO_ADDR
// end ;
23324: LD_VAR 0 2
23328: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
23329: LD_INT 0
23331: PPUSH
23332: PPUSH
23333: PPUSH
// pom := GetBase ( building ) ;
23334: LD_ADDR_VAR 0 4
23338: PUSH
23339: LD_VAR 0 1
23343: PPUSH
23344: CALL_OW 274
23348: ST_TO_ADDR
// if not pom then
23349: LD_VAR 0 4
23353: NOT
23354: IFFALSE 23358
// exit ;
23356: GO 23459
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23358: LD_ADDR_VAR 0 5
23362: PUSH
23363: LD_VAR 0 2
23367: PPUSH
23368: LD_VAR 0 1
23372: PPUSH
23373: CALL_OW 248
23377: PPUSH
23378: CALL_OW 450
23382: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23383: LD_ADDR_VAR 0 3
23387: PUSH
23388: LD_VAR 0 4
23392: PPUSH
23393: LD_INT 1
23395: PPUSH
23396: CALL_OW 275
23400: PUSH
23401: LD_VAR 0 5
23405: PUSH
23406: LD_INT 1
23408: ARRAY
23409: GREATEREQUAL
23410: PUSH
23411: LD_VAR 0 4
23415: PPUSH
23416: LD_INT 2
23418: PPUSH
23419: CALL_OW 275
23423: PUSH
23424: LD_VAR 0 5
23428: PUSH
23429: LD_INT 2
23431: ARRAY
23432: GREATEREQUAL
23433: AND
23434: PUSH
23435: LD_VAR 0 4
23439: PPUSH
23440: LD_INT 3
23442: PPUSH
23443: CALL_OW 275
23447: PUSH
23448: LD_VAR 0 5
23452: PUSH
23453: LD_INT 3
23455: ARRAY
23456: GREATEREQUAL
23457: AND
23458: ST_TO_ADDR
// end ;
23459: LD_VAR 0 3
23463: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
23464: LD_INT 0
23466: PPUSH
23467: PPUSH
23468: PPUSH
23469: PPUSH
23470: PPUSH
23471: PPUSH
23472: PPUSH
23473: PPUSH
23474: PPUSH
23475: PPUSH
// result := false ;
23476: LD_ADDR_VAR 0 6
23480: PUSH
23481: LD_INT 0
23483: ST_TO_ADDR
// if not base or not btype or not x or not y then
23484: LD_VAR 0 1
23488: NOT
23489: PUSH
23490: LD_VAR 0 2
23494: NOT
23495: OR
23496: PUSH
23497: LD_VAR 0 3
23501: NOT
23502: OR
23503: PUSH
23504: LD_VAR 0 4
23508: NOT
23509: OR
23510: IFFALSE 23514
// exit ;
23512: GO 24105
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
23514: LD_ADDR_VAR 0 12
23518: PUSH
23519: LD_VAR 0 2
23523: PPUSH
23524: LD_VAR 0 3
23528: PPUSH
23529: LD_VAR 0 4
23533: PPUSH
23534: LD_VAR 0 5
23538: PPUSH
23539: LD_VAR 0 1
23543: PUSH
23544: LD_INT 1
23546: ARRAY
23547: PPUSH
23548: CALL_OW 248
23552: PPUSH
23553: LD_INT 0
23555: PPUSH
23556: CALL 24942 0 6
23560: ST_TO_ADDR
// if not hexes then
23561: LD_VAR 0 12
23565: NOT
23566: IFFALSE 23570
// exit ;
23568: GO 24105
// for i = 1 to hexes do
23570: LD_ADDR_VAR 0 7
23574: PUSH
23575: DOUBLE
23576: LD_INT 1
23578: DEC
23579: ST_TO_ADDR
23580: LD_VAR 0 12
23584: PUSH
23585: FOR_TO
23586: IFFALSE 24103
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23588: LD_ADDR_VAR 0 11
23592: PUSH
23593: LD_VAR 0 12
23597: PUSH
23598: LD_VAR 0 7
23602: ARRAY
23603: PUSH
23604: LD_INT 1
23606: ARRAY
23607: PPUSH
23608: LD_VAR 0 12
23612: PUSH
23613: LD_VAR 0 7
23617: ARRAY
23618: PUSH
23619: LD_INT 2
23621: ARRAY
23622: PPUSH
23623: CALL_OW 428
23627: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
23628: LD_VAR 0 12
23632: PUSH
23633: LD_VAR 0 7
23637: ARRAY
23638: PUSH
23639: LD_INT 1
23641: ARRAY
23642: PPUSH
23643: LD_VAR 0 12
23647: PUSH
23648: LD_VAR 0 7
23652: ARRAY
23653: PUSH
23654: LD_INT 2
23656: ARRAY
23657: PPUSH
23658: CALL_OW 351
23662: PUSH
23663: LD_VAR 0 12
23667: PUSH
23668: LD_VAR 0 7
23672: ARRAY
23673: PUSH
23674: LD_INT 1
23676: ARRAY
23677: PPUSH
23678: LD_VAR 0 12
23682: PUSH
23683: LD_VAR 0 7
23687: ARRAY
23688: PUSH
23689: LD_INT 2
23691: ARRAY
23692: PPUSH
23693: CALL_OW 488
23697: NOT
23698: OR
23699: PUSH
23700: LD_VAR 0 11
23704: PPUSH
23705: CALL_OW 247
23709: PUSH
23710: LD_INT 3
23712: EQUAL
23713: OR
23714: IFFALSE 23720
// exit ;
23716: POP
23717: POP
23718: GO 24105
// if not tmp then
23720: LD_VAR 0 11
23724: NOT
23725: IFFALSE 23729
// continue ;
23727: GO 23585
// result := true ;
23729: LD_ADDR_VAR 0 6
23733: PUSH
23734: LD_INT 1
23736: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23737: LD_ADDR_VAR 0 15
23741: PUSH
23742: LD_INT 22
23744: PUSH
23745: LD_VAR 0 11
23749: PPUSH
23750: CALL_OW 255
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 2
23761: PUSH
23762: LD_INT 30
23764: PUSH
23765: LD_INT 0
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: PUSH
23772: LD_INT 30
23774: PUSH
23775: LD_INT 1
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: LIST
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PPUSH
23791: CALL_OW 69
23795: ST_TO_ADDR
// if dep then
23796: LD_VAR 0 15
23800: IFFALSE 23936
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
23802: LD_ADDR_VAR 0 14
23806: PUSH
23807: LD_VAR 0 15
23811: PUSH
23812: LD_INT 1
23814: ARRAY
23815: PPUSH
23816: CALL_OW 250
23820: PPUSH
23821: LD_VAR 0 15
23825: PUSH
23826: LD_INT 1
23828: ARRAY
23829: PPUSH
23830: CALL_OW 254
23834: PPUSH
23835: LD_INT 5
23837: PPUSH
23838: CALL_OW 272
23842: PUSH
23843: LD_VAR 0 15
23847: PUSH
23848: LD_INT 1
23850: ARRAY
23851: PPUSH
23852: CALL_OW 251
23856: PPUSH
23857: LD_VAR 0 15
23861: PUSH
23862: LD_INT 1
23864: ARRAY
23865: PPUSH
23866: CALL_OW 254
23870: PPUSH
23871: LD_INT 5
23873: PPUSH
23874: CALL_OW 273
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
23883: LD_VAR 0 14
23887: PUSH
23888: LD_INT 1
23890: ARRAY
23891: PPUSH
23892: LD_VAR 0 14
23896: PUSH
23897: LD_INT 2
23899: ARRAY
23900: PPUSH
23901: CALL_OW 488
23905: IFFALSE 23936
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
23907: LD_VAR 0 11
23911: PPUSH
23912: LD_VAR 0 14
23916: PUSH
23917: LD_INT 1
23919: ARRAY
23920: PPUSH
23921: LD_VAR 0 14
23925: PUSH
23926: LD_INT 2
23928: ARRAY
23929: PPUSH
23930: CALL_OW 111
// continue ;
23934: GO 23585
// end ; end ; r := GetDir ( tmp ) ;
23936: LD_ADDR_VAR 0 13
23940: PUSH
23941: LD_VAR 0 11
23945: PPUSH
23946: CALL_OW 254
23950: ST_TO_ADDR
// if r = 5 then
23951: LD_VAR 0 13
23955: PUSH
23956: LD_INT 5
23958: EQUAL
23959: IFFALSE 23969
// r := 0 ;
23961: LD_ADDR_VAR 0 13
23965: PUSH
23966: LD_INT 0
23968: ST_TO_ADDR
// for j = r to 5 do
23969: LD_ADDR_VAR 0 8
23973: PUSH
23974: DOUBLE
23975: LD_VAR 0 13
23979: DEC
23980: ST_TO_ADDR
23981: LD_INT 5
23983: PUSH
23984: FOR_TO
23985: IFFALSE 24099
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
23987: LD_ADDR_VAR 0 9
23991: PUSH
23992: LD_VAR 0 11
23996: PPUSH
23997: CALL_OW 250
24001: PPUSH
24002: LD_VAR 0 8
24006: PPUSH
24007: LD_INT 2
24009: PPUSH
24010: CALL_OW 272
24014: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
24015: LD_ADDR_VAR 0 10
24019: PUSH
24020: LD_VAR 0 11
24024: PPUSH
24025: CALL_OW 251
24029: PPUSH
24030: LD_VAR 0 8
24034: PPUSH
24035: LD_INT 2
24037: PPUSH
24038: CALL_OW 273
24042: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
24043: LD_VAR 0 9
24047: PPUSH
24048: LD_VAR 0 10
24052: PPUSH
24053: CALL_OW 488
24057: PUSH
24058: LD_VAR 0 9
24062: PPUSH
24063: LD_VAR 0 10
24067: PPUSH
24068: CALL_OW 428
24072: NOT
24073: AND
24074: IFFALSE 24097
// begin ComMoveXY ( tmp , _x , _y ) ;
24076: LD_VAR 0 11
24080: PPUSH
24081: LD_VAR 0 9
24085: PPUSH
24086: LD_VAR 0 10
24090: PPUSH
24091: CALL_OW 111
// break ;
24095: GO 24099
// end ; end ;
24097: GO 23984
24099: POP
24100: POP
// end ;
24101: GO 23585
24103: POP
24104: POP
// end ;
24105: LD_VAR 0 6
24109: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
24110: LD_INT 0
24112: PPUSH
24113: PPUSH
24114: PPUSH
24115: PPUSH
24116: PPUSH
24117: PPUSH
24118: PPUSH
24119: PPUSH
24120: PPUSH
24121: PPUSH
// result := false ;
24122: LD_ADDR_VAR 0 6
24126: PUSH
24127: LD_INT 0
24129: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
24130: LD_VAR 0 1
24134: NOT
24135: PUSH
24136: LD_VAR 0 1
24140: PPUSH
24141: CALL_OW 266
24145: PUSH
24146: LD_INT 0
24148: PUSH
24149: LD_INT 1
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: IN
24156: NOT
24157: OR
24158: PUSH
24159: LD_VAR 0 2
24163: NOT
24164: OR
24165: PUSH
24166: LD_VAR 0 5
24170: PUSH
24171: LD_INT 0
24173: PUSH
24174: LD_INT 1
24176: PUSH
24177: LD_INT 2
24179: PUSH
24180: LD_INT 3
24182: PUSH
24183: LD_INT 4
24185: PUSH
24186: LD_INT 5
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: IN
24197: NOT
24198: OR
24199: PUSH
24200: LD_VAR 0 3
24204: PPUSH
24205: LD_VAR 0 4
24209: PPUSH
24210: CALL_OW 488
24214: NOT
24215: OR
24216: IFFALSE 24220
// exit ;
24218: GO 24937
// pom := GetBase ( depot ) ;
24220: LD_ADDR_VAR 0 10
24224: PUSH
24225: LD_VAR 0 1
24229: PPUSH
24230: CALL_OW 274
24234: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
24235: LD_ADDR_VAR 0 11
24239: PUSH
24240: LD_VAR 0 2
24244: PPUSH
24245: LD_VAR 0 1
24249: PPUSH
24250: CALL_OW 248
24254: PPUSH
24255: CALL_OW 450
24259: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
24260: LD_VAR 0 10
24264: PPUSH
24265: LD_INT 1
24267: PPUSH
24268: CALL_OW 275
24272: PUSH
24273: LD_VAR 0 11
24277: PUSH
24278: LD_INT 1
24280: ARRAY
24281: GREATEREQUAL
24282: PUSH
24283: LD_VAR 0 10
24287: PPUSH
24288: LD_INT 2
24290: PPUSH
24291: CALL_OW 275
24295: PUSH
24296: LD_VAR 0 11
24300: PUSH
24301: LD_INT 2
24303: ARRAY
24304: GREATEREQUAL
24305: AND
24306: PUSH
24307: LD_VAR 0 10
24311: PPUSH
24312: LD_INT 3
24314: PPUSH
24315: CALL_OW 275
24319: PUSH
24320: LD_VAR 0 11
24324: PUSH
24325: LD_INT 3
24327: ARRAY
24328: GREATEREQUAL
24329: AND
24330: NOT
24331: IFFALSE 24335
// exit ;
24333: GO 24937
// if GetBType ( depot ) = b_depot then
24335: LD_VAR 0 1
24339: PPUSH
24340: CALL_OW 266
24344: PUSH
24345: LD_INT 0
24347: EQUAL
24348: IFFALSE 24360
// dist := 28 else
24350: LD_ADDR_VAR 0 14
24354: PUSH
24355: LD_INT 28
24357: ST_TO_ADDR
24358: GO 24368
// dist := 36 ;
24360: LD_ADDR_VAR 0 14
24364: PUSH
24365: LD_INT 36
24367: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
24368: LD_VAR 0 1
24372: PPUSH
24373: LD_VAR 0 3
24377: PPUSH
24378: LD_VAR 0 4
24382: PPUSH
24383: CALL_OW 297
24387: PUSH
24388: LD_VAR 0 14
24392: GREATER
24393: IFFALSE 24397
// exit ;
24395: GO 24937
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
24397: LD_ADDR_VAR 0 12
24401: PUSH
24402: LD_VAR 0 2
24406: PPUSH
24407: LD_VAR 0 3
24411: PPUSH
24412: LD_VAR 0 4
24416: PPUSH
24417: LD_VAR 0 5
24421: PPUSH
24422: LD_VAR 0 1
24426: PPUSH
24427: CALL_OW 248
24431: PPUSH
24432: LD_INT 0
24434: PPUSH
24435: CALL 24942 0 6
24439: ST_TO_ADDR
// if not hexes then
24440: LD_VAR 0 12
24444: NOT
24445: IFFALSE 24449
// exit ;
24447: GO 24937
// hex := GetHexInfo ( x , y ) ;
24449: LD_ADDR_VAR 0 15
24453: PUSH
24454: LD_VAR 0 3
24458: PPUSH
24459: LD_VAR 0 4
24463: PPUSH
24464: CALL_OW 546
24468: ST_TO_ADDR
// if hex [ 1 ] then
24469: LD_VAR 0 15
24473: PUSH
24474: LD_INT 1
24476: ARRAY
24477: IFFALSE 24481
// exit ;
24479: GO 24937
// height := hex [ 2 ] ;
24481: LD_ADDR_VAR 0 13
24485: PUSH
24486: LD_VAR 0 15
24490: PUSH
24491: LD_INT 2
24493: ARRAY
24494: ST_TO_ADDR
// for i = 1 to hexes do
24495: LD_ADDR_VAR 0 7
24499: PUSH
24500: DOUBLE
24501: LD_INT 1
24503: DEC
24504: ST_TO_ADDR
24505: LD_VAR 0 12
24509: PUSH
24510: FOR_TO
24511: IFFALSE 24841
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
24513: LD_VAR 0 12
24517: PUSH
24518: LD_VAR 0 7
24522: ARRAY
24523: PUSH
24524: LD_INT 1
24526: ARRAY
24527: PPUSH
24528: LD_VAR 0 12
24532: PUSH
24533: LD_VAR 0 7
24537: ARRAY
24538: PUSH
24539: LD_INT 2
24541: ARRAY
24542: PPUSH
24543: CALL_OW 488
24547: NOT
24548: PUSH
24549: LD_VAR 0 12
24553: PUSH
24554: LD_VAR 0 7
24558: ARRAY
24559: PUSH
24560: LD_INT 1
24562: ARRAY
24563: PPUSH
24564: LD_VAR 0 12
24568: PUSH
24569: LD_VAR 0 7
24573: ARRAY
24574: PUSH
24575: LD_INT 2
24577: ARRAY
24578: PPUSH
24579: CALL_OW 428
24583: PUSH
24584: LD_INT 0
24586: GREATER
24587: OR
24588: PUSH
24589: LD_VAR 0 12
24593: PUSH
24594: LD_VAR 0 7
24598: ARRAY
24599: PUSH
24600: LD_INT 1
24602: ARRAY
24603: PPUSH
24604: LD_VAR 0 12
24608: PUSH
24609: LD_VAR 0 7
24613: ARRAY
24614: PUSH
24615: LD_INT 2
24617: ARRAY
24618: PPUSH
24619: CALL_OW 351
24623: OR
24624: IFFALSE 24630
// exit ;
24626: POP
24627: POP
24628: GO 24937
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24630: LD_ADDR_VAR 0 8
24634: PUSH
24635: LD_VAR 0 12
24639: PUSH
24640: LD_VAR 0 7
24644: ARRAY
24645: PUSH
24646: LD_INT 1
24648: ARRAY
24649: PPUSH
24650: LD_VAR 0 12
24654: PUSH
24655: LD_VAR 0 7
24659: ARRAY
24660: PUSH
24661: LD_INT 2
24663: ARRAY
24664: PPUSH
24665: CALL_OW 546
24669: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
24670: LD_VAR 0 8
24674: PUSH
24675: LD_INT 1
24677: ARRAY
24678: PUSH
24679: LD_VAR 0 8
24683: PUSH
24684: LD_INT 2
24686: ARRAY
24687: PUSH
24688: LD_VAR 0 13
24692: PUSH
24693: LD_INT 2
24695: PLUS
24696: GREATER
24697: OR
24698: PUSH
24699: LD_VAR 0 8
24703: PUSH
24704: LD_INT 2
24706: ARRAY
24707: PUSH
24708: LD_VAR 0 13
24712: PUSH
24713: LD_INT 2
24715: MINUS
24716: LESS
24717: OR
24718: PUSH
24719: LD_VAR 0 8
24723: PUSH
24724: LD_INT 3
24726: ARRAY
24727: PUSH
24728: LD_INT 0
24730: PUSH
24731: LD_INT 8
24733: PUSH
24734: LD_INT 9
24736: PUSH
24737: LD_INT 10
24739: PUSH
24740: LD_INT 11
24742: PUSH
24743: LD_INT 12
24745: PUSH
24746: LD_INT 13
24748: PUSH
24749: LD_INT 16
24751: PUSH
24752: LD_INT 17
24754: PUSH
24755: LD_INT 18
24757: PUSH
24758: LD_INT 19
24760: PUSH
24761: LD_INT 20
24763: PUSH
24764: LD_INT 21
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: IN
24782: NOT
24783: OR
24784: PUSH
24785: LD_VAR 0 8
24789: PUSH
24790: LD_INT 5
24792: ARRAY
24793: NOT
24794: OR
24795: PUSH
24796: LD_VAR 0 8
24800: PUSH
24801: LD_INT 6
24803: ARRAY
24804: PUSH
24805: LD_INT 1
24807: PUSH
24808: LD_INT 2
24810: PUSH
24811: LD_INT 7
24813: PUSH
24814: LD_INT 9
24816: PUSH
24817: LD_INT 10
24819: PUSH
24820: LD_INT 11
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: IN
24831: NOT
24832: OR
24833: IFFALSE 24839
// exit ;
24835: POP
24836: POP
24837: GO 24937
// end ;
24839: GO 24510
24841: POP
24842: POP
// side := GetSide ( depot ) ;
24843: LD_ADDR_VAR 0 9
24847: PUSH
24848: LD_VAR 0 1
24852: PPUSH
24853: CALL_OW 255
24857: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
24858: LD_VAR 0 9
24862: PPUSH
24863: LD_VAR 0 3
24867: PPUSH
24868: LD_VAR 0 4
24872: PPUSH
24873: LD_INT 20
24875: PPUSH
24876: CALL 17609 0 4
24880: PUSH
24881: LD_INT 4
24883: ARRAY
24884: IFFALSE 24888
// exit ;
24886: GO 24937
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
24888: LD_VAR 0 2
24892: PUSH
24893: LD_INT 29
24895: PUSH
24896: LD_INT 30
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: IN
24903: PUSH
24904: LD_VAR 0 3
24908: PPUSH
24909: LD_VAR 0 4
24913: PPUSH
24914: LD_VAR 0 9
24918: PPUSH
24919: CALL_OW 440
24923: NOT
24924: AND
24925: IFFALSE 24929
// exit ;
24927: GO 24937
// result := true ;
24929: LD_ADDR_VAR 0 6
24933: PUSH
24934: LD_INT 1
24936: ST_TO_ADDR
// end ;
24937: LD_VAR 0 6
24941: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
24942: LD_INT 0
24944: PPUSH
24945: PPUSH
24946: PPUSH
24947: PPUSH
24948: PPUSH
24949: PPUSH
24950: PPUSH
24951: PPUSH
24952: PPUSH
24953: PPUSH
24954: PPUSH
24955: PPUSH
24956: PPUSH
24957: PPUSH
24958: PPUSH
24959: PPUSH
24960: PPUSH
24961: PPUSH
24962: PPUSH
24963: PPUSH
24964: PPUSH
24965: PPUSH
24966: PPUSH
24967: PPUSH
24968: PPUSH
24969: PPUSH
24970: PPUSH
24971: PPUSH
24972: PPUSH
24973: PPUSH
24974: PPUSH
24975: PPUSH
24976: PPUSH
24977: PPUSH
24978: PPUSH
24979: PPUSH
24980: PPUSH
24981: PPUSH
24982: PPUSH
24983: PPUSH
24984: PPUSH
24985: PPUSH
24986: PPUSH
24987: PPUSH
24988: PPUSH
24989: PPUSH
24990: PPUSH
24991: PPUSH
24992: PPUSH
24993: PPUSH
24994: PPUSH
24995: PPUSH
24996: PPUSH
24997: PPUSH
24998: PPUSH
24999: PPUSH
25000: PPUSH
25001: PPUSH
// result = [ ] ;
25002: LD_ADDR_VAR 0 7
25006: PUSH
25007: EMPTY
25008: ST_TO_ADDR
// temp_list = [ ] ;
25009: LD_ADDR_VAR 0 9
25013: PUSH
25014: EMPTY
25015: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
25016: LD_VAR 0 4
25020: PUSH
25021: LD_INT 0
25023: PUSH
25024: LD_INT 1
25026: PUSH
25027: LD_INT 2
25029: PUSH
25030: LD_INT 3
25032: PUSH
25033: LD_INT 4
25035: PUSH
25036: LD_INT 5
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: IN
25047: NOT
25048: PUSH
25049: LD_VAR 0 1
25053: PUSH
25054: LD_INT 0
25056: PUSH
25057: LD_INT 1
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: IN
25064: PUSH
25065: LD_VAR 0 5
25069: PUSH
25070: LD_INT 1
25072: PUSH
25073: LD_INT 2
25075: PUSH
25076: LD_INT 3
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: LIST
25083: IN
25084: NOT
25085: AND
25086: OR
25087: IFFALSE 25091
// exit ;
25089: GO 43476
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
25091: LD_VAR 0 1
25095: PUSH
25096: LD_INT 6
25098: PUSH
25099: LD_INT 7
25101: PUSH
25102: LD_INT 8
25104: PUSH
25105: LD_INT 13
25107: PUSH
25108: LD_INT 12
25110: PUSH
25111: LD_INT 15
25113: PUSH
25114: LD_INT 11
25116: PUSH
25117: LD_INT 14
25119: PUSH
25120: LD_INT 10
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: IN
25134: IFFALSE 25144
// btype = b_lab ;
25136: LD_ADDR_VAR 0 1
25140: PUSH
25141: LD_INT 6
25143: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
25144: LD_VAR 0 6
25148: PUSH
25149: LD_INT 0
25151: PUSH
25152: LD_INT 1
25154: PUSH
25155: LD_INT 2
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: LIST
25162: IN
25163: NOT
25164: PUSH
25165: LD_VAR 0 1
25169: PUSH
25170: LD_INT 0
25172: PUSH
25173: LD_INT 1
25175: PUSH
25176: LD_INT 2
25178: PUSH
25179: LD_INT 3
25181: PUSH
25182: LD_INT 6
25184: PUSH
25185: LD_INT 36
25187: PUSH
25188: LD_INT 4
25190: PUSH
25191: LD_INT 5
25193: PUSH
25194: LD_INT 31
25196: PUSH
25197: LD_INT 32
25199: PUSH
25200: LD_INT 33
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: IN
25216: NOT
25217: PUSH
25218: LD_VAR 0 6
25222: PUSH
25223: LD_INT 1
25225: EQUAL
25226: AND
25227: OR
25228: PUSH
25229: LD_VAR 0 1
25233: PUSH
25234: LD_INT 2
25236: PUSH
25237: LD_INT 3
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: IN
25244: NOT
25245: PUSH
25246: LD_VAR 0 6
25250: PUSH
25251: LD_INT 2
25253: EQUAL
25254: AND
25255: OR
25256: IFFALSE 25266
// mode = 0 ;
25258: LD_ADDR_VAR 0 6
25262: PUSH
25263: LD_INT 0
25265: ST_TO_ADDR
// case mode of 0 :
25266: LD_VAR 0 6
25270: PUSH
25271: LD_INT 0
25273: DOUBLE
25274: EQUAL
25275: IFTRUE 25279
25277: GO 36732
25279: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25280: LD_ADDR_VAR 0 11
25284: PUSH
25285: LD_INT 0
25287: PUSH
25288: LD_INT 0
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: LD_INT 0
25297: PUSH
25298: LD_INT 1
25300: NEG
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: LD_INT 1
25308: PUSH
25309: LD_INT 0
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: PUSH
25316: LD_INT 1
25318: PUSH
25319: LD_INT 1
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: LD_INT 0
25328: PUSH
25329: LD_INT 1
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: LD_INT 1
25338: NEG
25339: PUSH
25340: LD_INT 0
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 1
25349: NEG
25350: PUSH
25351: LD_INT 1
25353: NEG
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 1
25361: NEG
25362: PUSH
25363: LD_INT 2
25365: NEG
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 0
25373: PUSH
25374: LD_INT 2
25376: NEG
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 1
25384: PUSH
25385: LD_INT 1
25387: NEG
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: LD_INT 1
25395: PUSH
25396: LD_INT 2
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 0
25405: PUSH
25406: LD_INT 2
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 1
25415: NEG
25416: PUSH
25417: LD_INT 1
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: LD_INT 1
25426: PUSH
25427: LD_INT 3
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PUSH
25434: LD_INT 0
25436: PUSH
25437: LD_INT 3
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 1
25446: NEG
25447: PUSH
25448: LD_INT 2
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25473: LD_ADDR_VAR 0 12
25477: PUSH
25478: LD_INT 0
25480: PUSH
25481: LD_INT 0
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: PUSH
25488: LD_INT 0
25490: PUSH
25491: LD_INT 1
25493: NEG
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 1
25501: PUSH
25502: LD_INT 0
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 1
25511: PUSH
25512: LD_INT 1
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 0
25521: PUSH
25522: LD_INT 1
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 1
25531: NEG
25532: PUSH
25533: LD_INT 0
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: LD_INT 1
25542: NEG
25543: PUSH
25544: LD_INT 1
25546: NEG
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 1
25554: PUSH
25555: LD_INT 1
25557: NEG
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: LD_INT 2
25565: PUSH
25566: LD_INT 0
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 2
25575: PUSH
25576: LD_INT 1
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 1
25585: NEG
25586: PUSH
25587: LD_INT 1
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: LD_INT 2
25596: NEG
25597: PUSH
25598: LD_INT 0
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: LD_INT 2
25607: NEG
25608: PUSH
25609: LD_INT 1
25611: NEG
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 2
25619: NEG
25620: PUSH
25621: LD_INT 1
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: PUSH
25628: LD_INT 3
25630: NEG
25631: PUSH
25632: LD_INT 0
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 3
25641: NEG
25642: PUSH
25643: LD_INT 1
25645: NEG
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25669: LD_ADDR_VAR 0 13
25673: PUSH
25674: LD_INT 0
25676: PUSH
25677: LD_INT 0
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 0
25686: PUSH
25687: LD_INT 1
25689: NEG
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: LD_INT 1
25697: PUSH
25698: LD_INT 0
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: LD_INT 1
25707: PUSH
25708: LD_INT 1
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: PUSH
25715: LD_INT 0
25717: PUSH
25718: LD_INT 1
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: LD_INT 1
25727: NEG
25728: PUSH
25729: LD_INT 0
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 1
25738: NEG
25739: PUSH
25740: LD_INT 1
25742: NEG
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PUSH
25748: LD_INT 1
25750: NEG
25751: PUSH
25752: LD_INT 2
25754: NEG
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 2
25762: PUSH
25763: LD_INT 1
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: LD_INT 2
25772: PUSH
25773: LD_INT 2
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 1
25782: PUSH
25783: LD_INT 2
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 2
25792: NEG
25793: PUSH
25794: LD_INT 1
25796: NEG
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 2
25804: NEG
25805: PUSH
25806: LD_INT 2
25808: NEG
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PUSH
25814: LD_INT 2
25816: NEG
25817: PUSH
25818: LD_INT 3
25820: NEG
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 3
25828: NEG
25829: PUSH
25830: LD_INT 2
25832: NEG
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 3
25840: NEG
25841: PUSH
25842: LD_INT 3
25844: NEG
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25868: LD_ADDR_VAR 0 14
25872: PUSH
25873: LD_INT 0
25875: PUSH
25876: LD_INT 0
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PUSH
25883: LD_INT 0
25885: PUSH
25886: LD_INT 1
25888: NEG
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PUSH
25894: LD_INT 1
25896: PUSH
25897: LD_INT 0
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: PUSH
25904: LD_INT 1
25906: PUSH
25907: LD_INT 1
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 0
25916: PUSH
25917: LD_INT 1
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 1
25926: NEG
25927: PUSH
25928: LD_INT 0
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: LD_INT 1
25937: NEG
25938: PUSH
25939: LD_INT 1
25941: NEG
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: LD_INT 1
25949: NEG
25950: PUSH
25951: LD_INT 2
25953: NEG
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: LD_INT 0
25961: PUSH
25962: LD_INT 2
25964: NEG
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 1
25972: PUSH
25973: LD_INT 1
25975: NEG
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 1
25983: PUSH
25984: LD_INT 2
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: LD_INT 0
25993: PUSH
25994: LD_INT 2
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: LD_INT 1
26003: NEG
26004: PUSH
26005: LD_INT 1
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: PUSH
26012: LD_INT 1
26014: NEG
26015: PUSH
26016: LD_INT 3
26018: NEG
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: LD_INT 0
26026: PUSH
26027: LD_INT 3
26029: NEG
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 1
26037: PUSH
26038: LD_INT 2
26040: NEG
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26064: LD_ADDR_VAR 0 15
26068: PUSH
26069: LD_INT 0
26071: PUSH
26072: LD_INT 0
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 0
26081: PUSH
26082: LD_INT 1
26084: NEG
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PUSH
26090: LD_INT 1
26092: PUSH
26093: LD_INT 0
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 1
26102: PUSH
26103: LD_INT 1
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 0
26112: PUSH
26113: LD_INT 1
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 1
26122: NEG
26123: PUSH
26124: LD_INT 0
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 1
26133: NEG
26134: PUSH
26135: LD_INT 1
26137: NEG
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 1
26145: PUSH
26146: LD_INT 1
26148: NEG
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 2
26156: PUSH
26157: LD_INT 0
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 2
26166: PUSH
26167: LD_INT 1
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 1
26176: NEG
26177: PUSH
26178: LD_INT 1
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: LD_INT 2
26187: NEG
26188: PUSH
26189: LD_INT 0
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 2
26198: NEG
26199: PUSH
26200: LD_INT 1
26202: NEG
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 2
26210: PUSH
26211: LD_INT 1
26213: NEG
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PUSH
26219: LD_INT 3
26221: PUSH
26222: LD_INT 0
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 3
26231: PUSH
26232: LD_INT 1
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26257: LD_ADDR_VAR 0 16
26261: PUSH
26262: LD_INT 0
26264: PUSH
26265: LD_INT 0
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: LD_INT 0
26274: PUSH
26275: LD_INT 1
26277: NEG
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: PUSH
26283: LD_INT 1
26285: PUSH
26286: LD_INT 0
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 1
26295: PUSH
26296: LD_INT 1
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: PUSH
26303: LD_INT 0
26305: PUSH
26306: LD_INT 1
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 1
26315: NEG
26316: PUSH
26317: LD_INT 0
26319: PUSH
26320: EMPTY
26321: LIST
26322: LIST
26323: PUSH
26324: LD_INT 1
26326: NEG
26327: PUSH
26328: LD_INT 1
26330: NEG
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: LD_INT 1
26338: NEG
26339: PUSH
26340: LD_INT 2
26342: NEG
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 2
26350: PUSH
26351: LD_INT 1
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 2
26360: PUSH
26361: LD_INT 2
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 1
26370: PUSH
26371: LD_INT 2
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 2
26380: NEG
26381: PUSH
26382: LD_INT 1
26384: NEG
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PUSH
26390: LD_INT 2
26392: NEG
26393: PUSH
26394: LD_INT 2
26396: NEG
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PUSH
26402: LD_INT 3
26404: PUSH
26405: LD_INT 2
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: LD_INT 3
26414: PUSH
26415: LD_INT 3
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PUSH
26422: LD_INT 2
26424: PUSH
26425: LD_INT 3
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26450: LD_ADDR_VAR 0 17
26454: PUSH
26455: LD_INT 0
26457: PUSH
26458: LD_INT 0
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 0
26467: PUSH
26468: LD_INT 1
26470: NEG
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 1
26478: PUSH
26479: LD_INT 0
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: PUSH
26486: LD_INT 1
26488: PUSH
26489: LD_INT 1
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: LD_INT 0
26498: PUSH
26499: LD_INT 1
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: PUSH
26506: LD_INT 1
26508: NEG
26509: PUSH
26510: LD_INT 0
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 1
26519: NEG
26520: PUSH
26521: LD_INT 1
26523: NEG
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: LD_INT 1
26531: NEG
26532: PUSH
26533: LD_INT 2
26535: NEG
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 0
26543: PUSH
26544: LD_INT 2
26546: NEG
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 1
26554: PUSH
26555: LD_INT 1
26557: NEG
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 2
26565: PUSH
26566: LD_INT 0
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 2
26575: PUSH
26576: LD_INT 1
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 2
26585: PUSH
26586: LD_INT 2
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: LD_INT 1
26595: PUSH
26596: LD_INT 2
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: LD_INT 0
26605: PUSH
26606: LD_INT 2
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: LD_INT 1
26615: NEG
26616: PUSH
26617: LD_INT 1
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 2
26626: NEG
26627: PUSH
26628: LD_INT 0
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 2
26637: NEG
26638: PUSH
26639: LD_INT 1
26641: NEG
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 2
26649: NEG
26650: PUSH
26651: LD_INT 2
26653: NEG
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26680: LD_ADDR_VAR 0 18
26684: PUSH
26685: LD_INT 0
26687: PUSH
26688: LD_INT 0
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 0
26697: PUSH
26698: LD_INT 1
26700: NEG
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 1
26708: PUSH
26709: LD_INT 0
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 1
26718: PUSH
26719: LD_INT 1
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: LD_INT 0
26728: PUSH
26729: LD_INT 1
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PUSH
26736: LD_INT 1
26738: NEG
26739: PUSH
26740: LD_INT 0
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: LD_INT 1
26749: NEG
26750: PUSH
26751: LD_INT 1
26753: NEG
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: PUSH
26759: LD_INT 1
26761: NEG
26762: PUSH
26763: LD_INT 2
26765: NEG
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 0
26773: PUSH
26774: LD_INT 2
26776: NEG
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PUSH
26782: LD_INT 1
26784: PUSH
26785: LD_INT 1
26787: NEG
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: LD_INT 2
26795: PUSH
26796: LD_INT 0
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: LD_INT 2
26805: PUSH
26806: LD_INT 1
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: LD_INT 2
26815: PUSH
26816: LD_INT 2
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 1
26825: PUSH
26826: LD_INT 2
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 0
26835: PUSH
26836: LD_INT 2
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: LD_INT 1
26845: NEG
26846: PUSH
26847: LD_INT 1
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: LD_INT 2
26856: NEG
26857: PUSH
26858: LD_INT 0
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 2
26867: NEG
26868: PUSH
26869: LD_INT 1
26871: NEG
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: LD_INT 2
26879: NEG
26880: PUSH
26881: LD_INT 2
26883: NEG
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26910: LD_ADDR_VAR 0 19
26914: PUSH
26915: LD_INT 0
26917: PUSH
26918: LD_INT 0
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: PUSH
26925: LD_INT 0
26927: PUSH
26928: LD_INT 1
26930: NEG
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 1
26938: PUSH
26939: LD_INT 0
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: LD_INT 1
26948: PUSH
26949: LD_INT 1
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 0
26958: PUSH
26959: LD_INT 1
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: LD_INT 1
26968: NEG
26969: PUSH
26970: LD_INT 0
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 1
26979: NEG
26980: PUSH
26981: LD_INT 1
26983: NEG
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: LD_INT 1
26991: NEG
26992: PUSH
26993: LD_INT 2
26995: NEG
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 0
27003: PUSH
27004: LD_INT 2
27006: NEG
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: LD_INT 1
27014: PUSH
27015: LD_INT 1
27017: NEG
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: LD_INT 2
27025: PUSH
27026: LD_INT 0
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 2
27035: PUSH
27036: LD_INT 1
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: LD_INT 2
27045: PUSH
27046: LD_INT 2
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: LD_INT 1
27055: PUSH
27056: LD_INT 2
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 0
27065: PUSH
27066: LD_INT 2
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PUSH
27073: LD_INT 1
27075: NEG
27076: PUSH
27077: LD_INT 1
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 2
27086: NEG
27087: PUSH
27088: LD_INT 0
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 2
27097: NEG
27098: PUSH
27099: LD_INT 1
27101: NEG
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 2
27109: NEG
27110: PUSH
27111: LD_INT 2
27113: NEG
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27140: LD_ADDR_VAR 0 20
27144: PUSH
27145: LD_INT 0
27147: PUSH
27148: LD_INT 0
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 0
27157: PUSH
27158: LD_INT 1
27160: NEG
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 1
27168: PUSH
27169: LD_INT 0
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: LD_INT 1
27178: PUSH
27179: LD_INT 1
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: LD_INT 0
27188: PUSH
27189: LD_INT 1
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 1
27198: NEG
27199: PUSH
27200: LD_INT 0
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 1
27209: NEG
27210: PUSH
27211: LD_INT 1
27213: NEG
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 1
27221: NEG
27222: PUSH
27223: LD_INT 2
27225: NEG
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 0
27233: PUSH
27234: LD_INT 2
27236: NEG
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: LD_INT 1
27244: PUSH
27245: LD_INT 1
27247: NEG
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 2
27255: PUSH
27256: LD_INT 0
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 2
27265: PUSH
27266: LD_INT 1
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: LD_INT 2
27275: PUSH
27276: LD_INT 2
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 1
27285: PUSH
27286: LD_INT 2
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 0
27295: PUSH
27296: LD_INT 2
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: LD_INT 1
27305: NEG
27306: PUSH
27307: LD_INT 1
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 2
27316: NEG
27317: PUSH
27318: LD_INT 0
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 2
27327: NEG
27328: PUSH
27329: LD_INT 1
27331: NEG
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: PUSH
27337: LD_INT 2
27339: NEG
27340: PUSH
27341: LD_INT 2
27343: NEG
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27370: LD_ADDR_VAR 0 21
27374: PUSH
27375: LD_INT 0
27377: PUSH
27378: LD_INT 0
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 0
27387: PUSH
27388: LD_INT 1
27390: NEG
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 1
27398: PUSH
27399: LD_INT 0
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PUSH
27406: LD_INT 1
27408: PUSH
27409: LD_INT 1
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 0
27418: PUSH
27419: LD_INT 1
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: LD_INT 1
27428: NEG
27429: PUSH
27430: LD_INT 0
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 1
27439: NEG
27440: PUSH
27441: LD_INT 1
27443: NEG
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 1
27451: NEG
27452: PUSH
27453: LD_INT 2
27455: NEG
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: LD_INT 0
27463: PUSH
27464: LD_INT 2
27466: NEG
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: PUSH
27472: LD_INT 1
27474: PUSH
27475: LD_INT 1
27477: NEG
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PUSH
27483: LD_INT 2
27485: PUSH
27486: LD_INT 0
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: PUSH
27493: LD_INT 2
27495: PUSH
27496: LD_INT 1
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: PUSH
27503: LD_INT 2
27505: PUSH
27506: LD_INT 2
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: PUSH
27513: LD_INT 1
27515: PUSH
27516: LD_INT 2
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: LD_INT 0
27525: PUSH
27526: LD_INT 2
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: PUSH
27533: LD_INT 1
27535: NEG
27536: PUSH
27537: LD_INT 1
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 2
27546: NEG
27547: PUSH
27548: LD_INT 0
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 2
27557: NEG
27558: PUSH
27559: LD_INT 1
27561: NEG
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: PUSH
27567: LD_INT 2
27569: NEG
27570: PUSH
27571: LD_INT 2
27573: NEG
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27600: LD_ADDR_VAR 0 22
27604: PUSH
27605: LD_INT 0
27607: PUSH
27608: LD_INT 0
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: LD_INT 0
27617: PUSH
27618: LD_INT 1
27620: NEG
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: LD_INT 1
27628: PUSH
27629: LD_INT 0
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: PUSH
27636: LD_INT 1
27638: PUSH
27639: LD_INT 1
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: PUSH
27646: LD_INT 0
27648: PUSH
27649: LD_INT 1
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PUSH
27656: LD_INT 1
27658: NEG
27659: PUSH
27660: LD_INT 0
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: LD_INT 1
27669: NEG
27670: PUSH
27671: LD_INT 1
27673: NEG
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 1
27681: NEG
27682: PUSH
27683: LD_INT 2
27685: NEG
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 0
27693: PUSH
27694: LD_INT 2
27696: NEG
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: LD_INT 1
27704: PUSH
27705: LD_INT 1
27707: NEG
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PUSH
27713: LD_INT 2
27715: PUSH
27716: LD_INT 0
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: LD_INT 2
27725: PUSH
27726: LD_INT 1
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 2
27735: PUSH
27736: LD_INT 2
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 1
27745: PUSH
27746: LD_INT 2
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 0
27755: PUSH
27756: LD_INT 2
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: LD_INT 1
27765: NEG
27766: PUSH
27767: LD_INT 1
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: LD_INT 2
27776: NEG
27777: PUSH
27778: LD_INT 0
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: LD_INT 2
27787: NEG
27788: PUSH
27789: LD_INT 1
27791: NEG
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 2
27799: NEG
27800: PUSH
27801: LD_INT 2
27803: NEG
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27830: LD_ADDR_VAR 0 23
27834: PUSH
27835: LD_INT 0
27837: PUSH
27838: LD_INT 0
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 0
27847: PUSH
27848: LD_INT 1
27850: NEG
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: LD_INT 1
27858: PUSH
27859: LD_INT 0
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PUSH
27866: LD_INT 1
27868: PUSH
27869: LD_INT 1
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: PUSH
27876: LD_INT 0
27878: PUSH
27879: LD_INT 1
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: PUSH
27886: LD_INT 1
27888: NEG
27889: PUSH
27890: LD_INT 0
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 1
27899: NEG
27900: PUSH
27901: LD_INT 1
27903: NEG
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 1
27911: NEG
27912: PUSH
27913: LD_INT 2
27915: NEG
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 0
27923: PUSH
27924: LD_INT 2
27926: NEG
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: LD_INT 1
27934: PUSH
27935: LD_INT 1
27937: NEG
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: LD_INT 2
27945: PUSH
27946: LD_INT 0
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 2
27955: PUSH
27956: LD_INT 1
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: LD_INT 2
27965: PUSH
27966: LD_INT 2
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 1
27975: PUSH
27976: LD_INT 2
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 0
27985: PUSH
27986: LD_INT 2
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 1
27995: NEG
27996: PUSH
27997: LD_INT 1
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: PUSH
28004: LD_INT 2
28006: NEG
28007: PUSH
28008: LD_INT 0
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 2
28017: NEG
28018: PUSH
28019: LD_INT 1
28021: NEG
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: LD_INT 2
28029: NEG
28030: PUSH
28031: LD_INT 2
28033: NEG
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 2
28041: NEG
28042: PUSH
28043: LD_INT 3
28045: NEG
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: LD_INT 1
28053: NEG
28054: PUSH
28055: LD_INT 3
28057: NEG
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 1
28065: PUSH
28066: LD_INT 2
28068: NEG
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 2
28076: PUSH
28077: LD_INT 1
28079: NEG
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: LIST
28108: LIST
28109: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
28110: LD_ADDR_VAR 0 24
28114: PUSH
28115: LD_INT 0
28117: PUSH
28118: LD_INT 0
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 0
28127: PUSH
28128: LD_INT 1
28130: NEG
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: LD_INT 1
28138: PUSH
28139: LD_INT 0
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: LD_INT 1
28148: PUSH
28149: LD_INT 1
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 0
28158: PUSH
28159: LD_INT 1
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: LD_INT 1
28168: NEG
28169: PUSH
28170: LD_INT 0
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 1
28179: NEG
28180: PUSH
28181: LD_INT 1
28183: NEG
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: LD_INT 1
28191: NEG
28192: PUSH
28193: LD_INT 2
28195: NEG
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: LD_INT 0
28203: PUSH
28204: LD_INT 2
28206: NEG
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: PUSH
28212: LD_INT 1
28214: PUSH
28215: LD_INT 1
28217: NEG
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: LD_INT 2
28225: PUSH
28226: LD_INT 0
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PUSH
28233: LD_INT 2
28235: PUSH
28236: LD_INT 1
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: LD_INT 2
28245: PUSH
28246: LD_INT 2
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: LD_INT 1
28255: PUSH
28256: LD_INT 2
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 0
28265: PUSH
28266: LD_INT 2
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: LD_INT 1
28275: NEG
28276: PUSH
28277: LD_INT 1
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: PUSH
28284: LD_INT 2
28286: NEG
28287: PUSH
28288: LD_INT 0
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: LD_INT 2
28297: NEG
28298: PUSH
28299: LD_INT 1
28301: NEG
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: LD_INT 2
28309: NEG
28310: PUSH
28311: LD_INT 2
28313: NEG
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PUSH
28319: LD_INT 1
28321: PUSH
28322: LD_INT 2
28324: NEG
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 2
28332: PUSH
28333: LD_INT 1
28335: NEG
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 3
28343: PUSH
28344: LD_INT 1
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 3
28353: PUSH
28354: LD_INT 2
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: EMPTY
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
28386: LD_ADDR_VAR 0 25
28390: PUSH
28391: LD_INT 0
28393: PUSH
28394: LD_INT 0
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 0
28403: PUSH
28404: LD_INT 1
28406: NEG
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 1
28414: PUSH
28415: LD_INT 0
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PUSH
28422: LD_INT 1
28424: PUSH
28425: LD_INT 1
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: LD_INT 0
28434: PUSH
28435: LD_INT 1
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: LD_INT 1
28444: NEG
28445: PUSH
28446: LD_INT 0
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: LD_INT 1
28455: NEG
28456: PUSH
28457: LD_INT 1
28459: NEG
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 1
28467: NEG
28468: PUSH
28469: LD_INT 2
28471: NEG
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: LD_INT 0
28479: PUSH
28480: LD_INT 2
28482: NEG
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 1
28490: PUSH
28491: LD_INT 1
28493: NEG
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: LD_INT 2
28501: PUSH
28502: LD_INT 0
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: LD_INT 2
28511: PUSH
28512: LD_INT 1
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PUSH
28519: LD_INT 2
28521: PUSH
28522: LD_INT 2
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 1
28531: PUSH
28532: LD_INT 2
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 0
28541: PUSH
28542: LD_INT 2
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 1
28551: NEG
28552: PUSH
28553: LD_INT 1
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 2
28562: NEG
28563: PUSH
28564: LD_INT 0
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 2
28573: NEG
28574: PUSH
28575: LD_INT 1
28577: NEG
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 2
28585: NEG
28586: PUSH
28587: LD_INT 2
28589: NEG
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 3
28597: PUSH
28598: LD_INT 1
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 3
28607: PUSH
28608: LD_INT 2
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: LD_INT 2
28617: PUSH
28618: LD_INT 3
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: LD_INT 1
28627: PUSH
28628: LD_INT 3
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28660: LD_ADDR_VAR 0 26
28664: PUSH
28665: LD_INT 0
28667: PUSH
28668: LD_INT 0
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 0
28677: PUSH
28678: LD_INT 1
28680: NEG
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: PUSH
28686: LD_INT 1
28688: PUSH
28689: LD_INT 0
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 1
28698: PUSH
28699: LD_INT 1
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PUSH
28706: LD_INT 0
28708: PUSH
28709: LD_INT 1
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 1
28718: NEG
28719: PUSH
28720: LD_INT 0
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 1
28729: NEG
28730: PUSH
28731: LD_INT 1
28733: NEG
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: LD_INT 1
28741: NEG
28742: PUSH
28743: LD_INT 2
28745: NEG
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 0
28753: PUSH
28754: LD_INT 2
28756: NEG
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 1
28764: PUSH
28765: LD_INT 1
28767: NEG
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 2
28775: PUSH
28776: LD_INT 0
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 2
28785: PUSH
28786: LD_INT 1
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 2
28795: PUSH
28796: LD_INT 2
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 1
28805: PUSH
28806: LD_INT 2
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 0
28815: PUSH
28816: LD_INT 2
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 1
28825: NEG
28826: PUSH
28827: LD_INT 1
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 2
28836: NEG
28837: PUSH
28838: LD_INT 0
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: LD_INT 2
28847: NEG
28848: PUSH
28849: LD_INT 1
28851: NEG
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 2
28859: NEG
28860: PUSH
28861: LD_INT 2
28863: NEG
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: LD_INT 2
28871: PUSH
28872: LD_INT 3
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 1
28881: PUSH
28882: LD_INT 3
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 1
28891: NEG
28892: PUSH
28893: LD_INT 2
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 2
28902: NEG
28903: PUSH
28904: LD_INT 1
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28936: LD_ADDR_VAR 0 27
28940: PUSH
28941: LD_INT 0
28943: PUSH
28944: LD_INT 0
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: LD_INT 0
28953: PUSH
28954: LD_INT 1
28956: NEG
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 1
28964: PUSH
28965: LD_INT 0
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PUSH
28972: LD_INT 1
28974: PUSH
28975: LD_INT 1
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: PUSH
28982: LD_INT 0
28984: PUSH
28985: LD_INT 1
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 1
28994: NEG
28995: PUSH
28996: LD_INT 0
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: LD_INT 1
29005: NEG
29006: PUSH
29007: LD_INT 1
29009: NEG
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PUSH
29015: LD_INT 1
29017: NEG
29018: PUSH
29019: LD_INT 2
29021: NEG
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 0
29029: PUSH
29030: LD_INT 2
29032: NEG
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: LD_INT 1
29040: PUSH
29041: LD_INT 1
29043: NEG
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 2
29051: PUSH
29052: LD_INT 0
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 2
29061: PUSH
29062: LD_INT 1
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: LD_INT 2
29071: PUSH
29072: LD_INT 2
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: LD_INT 1
29081: PUSH
29082: LD_INT 2
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: PUSH
29089: LD_INT 0
29091: PUSH
29092: LD_INT 2
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: PUSH
29099: LD_INT 1
29101: NEG
29102: PUSH
29103: LD_INT 1
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 2
29112: NEG
29113: PUSH
29114: LD_INT 0
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: LD_INT 2
29123: NEG
29124: PUSH
29125: LD_INT 1
29127: NEG
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 2
29135: NEG
29136: PUSH
29137: LD_INT 2
29139: NEG
29140: PUSH
29141: EMPTY
29142: LIST
29143: LIST
29144: PUSH
29145: LD_INT 1
29147: NEG
29148: PUSH
29149: LD_INT 2
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: LD_INT 2
29158: NEG
29159: PUSH
29160: LD_INT 1
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: LD_INT 3
29169: NEG
29170: PUSH
29171: LD_INT 1
29173: NEG
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 3
29181: NEG
29182: PUSH
29183: LD_INT 2
29185: NEG
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29216: LD_ADDR_VAR 0 28
29220: PUSH
29221: LD_INT 0
29223: PUSH
29224: LD_INT 0
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: LD_INT 0
29233: PUSH
29234: LD_INT 1
29236: NEG
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: LD_INT 1
29244: PUSH
29245: LD_INT 0
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 1
29254: PUSH
29255: LD_INT 1
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PUSH
29262: LD_INT 0
29264: PUSH
29265: LD_INT 1
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 1
29274: NEG
29275: PUSH
29276: LD_INT 0
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PUSH
29283: LD_INT 1
29285: NEG
29286: PUSH
29287: LD_INT 1
29289: NEG
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: LD_INT 1
29297: NEG
29298: PUSH
29299: LD_INT 2
29301: NEG
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: LD_INT 0
29309: PUSH
29310: LD_INT 2
29312: NEG
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 1
29320: PUSH
29321: LD_INT 1
29323: NEG
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 2
29331: PUSH
29332: LD_INT 0
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 2
29341: PUSH
29342: LD_INT 1
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 2
29351: PUSH
29352: LD_INT 2
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 1
29361: PUSH
29362: LD_INT 2
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 0
29371: PUSH
29372: LD_INT 2
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: LD_INT 1
29381: NEG
29382: PUSH
29383: LD_INT 1
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: LD_INT 2
29392: NEG
29393: PUSH
29394: LD_INT 0
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 2
29403: NEG
29404: PUSH
29405: LD_INT 1
29407: NEG
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 2
29415: NEG
29416: PUSH
29417: LD_INT 2
29419: NEG
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 2
29427: NEG
29428: PUSH
29429: LD_INT 3
29431: NEG
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 1
29439: NEG
29440: PUSH
29441: LD_INT 3
29443: NEG
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: LD_INT 3
29451: NEG
29452: PUSH
29453: LD_INT 1
29455: NEG
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 3
29463: NEG
29464: PUSH
29465: LD_INT 2
29467: NEG
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: LIST
29477: LIST
29478: LIST
29479: LIST
29480: LIST
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: LIST
29497: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29498: LD_ADDR_VAR 0 29
29502: PUSH
29503: LD_INT 0
29505: PUSH
29506: LD_INT 0
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: PUSH
29513: LD_INT 0
29515: PUSH
29516: LD_INT 1
29518: NEG
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 1
29526: PUSH
29527: LD_INT 0
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 1
29536: PUSH
29537: LD_INT 1
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: LD_INT 0
29546: PUSH
29547: LD_INT 1
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: PUSH
29554: LD_INT 1
29556: NEG
29557: PUSH
29558: LD_INT 0
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: LD_INT 1
29567: NEG
29568: PUSH
29569: LD_INT 1
29571: NEG
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: LD_INT 1
29579: NEG
29580: PUSH
29581: LD_INT 2
29583: NEG
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: LD_INT 0
29591: PUSH
29592: LD_INT 2
29594: NEG
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: LD_INT 1
29602: PUSH
29603: LD_INT 1
29605: NEG
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 2
29613: PUSH
29614: LD_INT 0
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 2
29623: PUSH
29624: LD_INT 1
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 1
29633: PUSH
29634: LD_INT 2
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 0
29643: PUSH
29644: LD_INT 2
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 1
29653: NEG
29654: PUSH
29655: LD_INT 1
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: LD_INT 2
29664: NEG
29665: PUSH
29666: LD_INT 1
29668: NEG
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 2
29676: NEG
29677: PUSH
29678: LD_INT 2
29680: NEG
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PUSH
29686: LD_INT 2
29688: NEG
29689: PUSH
29690: LD_INT 3
29692: NEG
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 2
29700: PUSH
29701: LD_INT 1
29703: NEG
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: LD_INT 3
29711: PUSH
29712: LD_INT 1
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 1
29721: PUSH
29722: LD_INT 3
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 1
29731: NEG
29732: PUSH
29733: LD_INT 2
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 3
29742: NEG
29743: PUSH
29744: LD_INT 2
29746: NEG
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29777: LD_ADDR_VAR 0 30
29781: PUSH
29782: LD_INT 0
29784: PUSH
29785: LD_INT 0
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: LD_INT 0
29794: PUSH
29795: LD_INT 1
29797: NEG
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: PUSH
29803: LD_INT 1
29805: PUSH
29806: LD_INT 0
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: PUSH
29813: LD_INT 1
29815: PUSH
29816: LD_INT 1
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: LD_INT 0
29825: PUSH
29826: LD_INT 1
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: LD_INT 1
29835: NEG
29836: PUSH
29837: LD_INT 0
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 1
29846: NEG
29847: PUSH
29848: LD_INT 1
29850: NEG
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: LD_INT 1
29858: NEG
29859: PUSH
29860: LD_INT 2
29862: NEG
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 0
29870: PUSH
29871: LD_INT 2
29873: NEG
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: LD_INT 1
29881: PUSH
29882: LD_INT 1
29884: NEG
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 2
29892: PUSH
29893: LD_INT 0
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 2
29902: PUSH
29903: LD_INT 1
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 2
29912: PUSH
29913: LD_INT 2
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 1
29922: PUSH
29923: LD_INT 2
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: LD_INT 1
29932: NEG
29933: PUSH
29934: LD_INT 1
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 2
29943: NEG
29944: PUSH
29945: LD_INT 0
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 2
29954: NEG
29955: PUSH
29956: LD_INT 1
29958: NEG
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 1
29966: NEG
29967: PUSH
29968: LD_INT 3
29970: NEG
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 1
29978: PUSH
29979: LD_INT 2
29981: NEG
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: LD_INT 3
29989: PUSH
29990: LD_INT 2
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: PUSH
29997: LD_INT 2
29999: PUSH
30000: LD_INT 3
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: PUSH
30007: LD_INT 2
30009: NEG
30010: PUSH
30011: LD_INT 1
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: LD_INT 3
30020: NEG
30021: PUSH
30022: LD_INT 1
30024: NEG
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30055: LD_ADDR_VAR 0 31
30059: PUSH
30060: LD_INT 0
30062: PUSH
30063: LD_INT 0
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 0
30072: PUSH
30073: LD_INT 1
30075: NEG
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 1
30083: PUSH
30084: LD_INT 0
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: LD_INT 1
30093: PUSH
30094: LD_INT 1
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: LD_INT 0
30103: PUSH
30104: LD_INT 1
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: LD_INT 1
30113: NEG
30114: PUSH
30115: LD_INT 0
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: LD_INT 1
30124: NEG
30125: PUSH
30126: LD_INT 1
30128: NEG
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 1
30136: NEG
30137: PUSH
30138: LD_INT 2
30140: NEG
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 1
30148: PUSH
30149: LD_INT 1
30151: NEG
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 2
30159: PUSH
30160: LD_INT 0
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 2
30169: PUSH
30170: LD_INT 1
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: LD_INT 2
30179: PUSH
30180: LD_INT 2
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: LD_INT 1
30189: PUSH
30190: LD_INT 2
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 0
30199: PUSH
30200: LD_INT 2
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: LD_INT 1
30209: NEG
30210: PUSH
30211: LD_INT 1
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 2
30220: NEG
30221: PUSH
30222: LD_INT 1
30224: NEG
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 2
30232: NEG
30233: PUSH
30234: LD_INT 2
30236: NEG
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 2
30244: NEG
30245: PUSH
30246: LD_INT 3
30248: NEG
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 2
30256: PUSH
30257: LD_INT 1
30259: NEG
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 3
30267: PUSH
30268: LD_INT 1
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 1
30277: PUSH
30278: LD_INT 3
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 1
30287: NEG
30288: PUSH
30289: LD_INT 2
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: LD_INT 3
30298: NEG
30299: PUSH
30300: LD_INT 2
30302: NEG
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30333: LD_ADDR_VAR 0 32
30337: PUSH
30338: LD_INT 0
30340: PUSH
30341: LD_INT 0
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: LD_INT 0
30350: PUSH
30351: LD_INT 1
30353: NEG
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 1
30361: PUSH
30362: LD_INT 0
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 1
30371: PUSH
30372: LD_INT 1
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 0
30381: PUSH
30382: LD_INT 1
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 1
30391: NEG
30392: PUSH
30393: LD_INT 0
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: LD_INT 1
30402: NEG
30403: PUSH
30404: LD_INT 1
30406: NEG
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 1
30414: NEG
30415: PUSH
30416: LD_INT 2
30418: NEG
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: LD_INT 0
30426: PUSH
30427: LD_INT 2
30429: NEG
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: LD_INT 1
30437: PUSH
30438: LD_INT 1
30440: NEG
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 2
30448: PUSH
30449: LD_INT 1
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 2
30458: PUSH
30459: LD_INT 2
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 1
30468: PUSH
30469: LD_INT 2
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: LD_INT 0
30478: PUSH
30479: LD_INT 2
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: LD_INT 1
30488: NEG
30489: PUSH
30490: LD_INT 1
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: LD_INT 2
30499: NEG
30500: PUSH
30501: LD_INT 0
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 2
30510: NEG
30511: PUSH
30512: LD_INT 1
30514: NEG
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 1
30522: NEG
30523: PUSH
30524: LD_INT 3
30526: NEG
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 1
30534: PUSH
30535: LD_INT 2
30537: NEG
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: LD_INT 3
30545: PUSH
30546: LD_INT 2
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 2
30555: PUSH
30556: LD_INT 3
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 2
30565: NEG
30566: PUSH
30567: LD_INT 1
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 3
30576: NEG
30577: PUSH
30578: LD_INT 1
30580: NEG
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30611: LD_ADDR_VAR 0 33
30615: PUSH
30616: LD_INT 0
30618: PUSH
30619: LD_INT 0
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 0
30628: PUSH
30629: LD_INT 1
30631: NEG
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 1
30639: PUSH
30640: LD_INT 0
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 1
30649: PUSH
30650: LD_INT 1
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 0
30659: PUSH
30660: LD_INT 1
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: PUSH
30667: LD_INT 1
30669: NEG
30670: PUSH
30671: LD_INT 0
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: LD_INT 1
30680: NEG
30681: PUSH
30682: LD_INT 1
30684: NEG
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 1
30692: NEG
30693: PUSH
30694: LD_INT 2
30696: NEG
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 1
30704: PUSH
30705: LD_INT 1
30707: NEG
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 2
30715: PUSH
30716: LD_INT 0
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: PUSH
30723: LD_INT 2
30725: PUSH
30726: LD_INT 1
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 1
30735: PUSH
30736: LD_INT 2
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: LD_INT 0
30745: PUSH
30746: LD_INT 2
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: PUSH
30753: LD_INT 1
30755: NEG
30756: PUSH
30757: LD_INT 1
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: LD_INT 2
30766: NEG
30767: PUSH
30768: LD_INT 0
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: LD_INT 2
30777: NEG
30778: PUSH
30779: LD_INT 1
30781: NEG
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 2
30789: NEG
30790: PUSH
30791: LD_INT 2
30793: NEG
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 2
30801: NEG
30802: PUSH
30803: LD_INT 3
30805: NEG
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: LD_INT 2
30813: PUSH
30814: LD_INT 1
30816: NEG
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: LD_INT 3
30824: PUSH
30825: LD_INT 1
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 1
30834: PUSH
30835: LD_INT 3
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 1
30844: NEG
30845: PUSH
30846: LD_INT 2
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 3
30855: NEG
30856: PUSH
30857: LD_INT 2
30859: NEG
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30890: LD_ADDR_VAR 0 34
30894: PUSH
30895: LD_INT 0
30897: PUSH
30898: LD_INT 0
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 0
30907: PUSH
30908: LD_INT 1
30910: NEG
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 1
30918: PUSH
30919: LD_INT 0
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: LD_INT 1
30928: PUSH
30929: LD_INT 1
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 0
30938: PUSH
30939: LD_INT 1
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: PUSH
30946: LD_INT 1
30948: NEG
30949: PUSH
30950: LD_INT 0
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 1
30959: NEG
30960: PUSH
30961: LD_INT 1
30963: NEG
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 1
30971: NEG
30972: PUSH
30973: LD_INT 2
30975: NEG
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 0
30983: PUSH
30984: LD_INT 2
30986: NEG
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: LD_INT 1
30994: PUSH
30995: LD_INT 1
30997: NEG
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 2
31005: PUSH
31006: LD_INT 1
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: LD_INT 2
31015: PUSH
31016: LD_INT 2
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: PUSH
31023: LD_INT 1
31025: PUSH
31026: LD_INT 2
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: PUSH
31033: LD_INT 1
31035: NEG
31036: PUSH
31037: LD_INT 1
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 2
31046: NEG
31047: PUSH
31048: LD_INT 0
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 2
31057: NEG
31058: PUSH
31059: LD_INT 1
31061: NEG
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: LD_INT 2
31069: NEG
31070: PUSH
31071: LD_INT 2
31073: NEG
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: LD_INT 1
31081: NEG
31082: PUSH
31083: LD_INT 3
31085: NEG
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: PUSH
31091: LD_INT 1
31093: PUSH
31094: LD_INT 2
31096: NEG
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: LD_INT 3
31104: PUSH
31105: LD_INT 2
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 2
31114: PUSH
31115: LD_INT 3
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: LD_INT 2
31124: NEG
31125: PUSH
31126: LD_INT 1
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 3
31135: NEG
31136: PUSH
31137: LD_INT 1
31139: NEG
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31170: LD_ADDR_VAR 0 35
31174: PUSH
31175: LD_INT 0
31177: PUSH
31178: LD_INT 0
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 0
31187: PUSH
31188: LD_INT 1
31190: NEG
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 1
31198: PUSH
31199: LD_INT 0
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 1
31208: PUSH
31209: LD_INT 1
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 0
31218: PUSH
31219: LD_INT 1
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 1
31228: NEG
31229: PUSH
31230: LD_INT 0
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 1
31239: NEG
31240: PUSH
31241: LD_INT 1
31243: NEG
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 2
31251: PUSH
31252: LD_INT 1
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: LD_INT 2
31261: NEG
31262: PUSH
31263: LD_INT 1
31265: NEG
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31282: LD_ADDR_VAR 0 36
31286: PUSH
31287: LD_INT 0
31289: PUSH
31290: LD_INT 0
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 0
31299: PUSH
31300: LD_INT 1
31302: NEG
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 1
31310: PUSH
31311: LD_INT 0
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 1
31320: PUSH
31321: LD_INT 1
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 0
31330: PUSH
31331: LD_INT 1
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 1
31340: NEG
31341: PUSH
31342: LD_INT 0
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 1
31351: NEG
31352: PUSH
31353: LD_INT 1
31355: NEG
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 1
31363: NEG
31364: PUSH
31365: LD_INT 2
31367: NEG
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: LD_INT 1
31375: PUSH
31376: LD_INT 2
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31394: LD_ADDR_VAR 0 37
31398: PUSH
31399: LD_INT 0
31401: PUSH
31402: LD_INT 0
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: LD_INT 0
31411: PUSH
31412: LD_INT 1
31414: NEG
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 1
31422: PUSH
31423: LD_INT 0
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 1
31432: PUSH
31433: LD_INT 1
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 0
31442: PUSH
31443: LD_INT 1
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 1
31452: NEG
31453: PUSH
31454: LD_INT 0
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 1
31463: NEG
31464: PUSH
31465: LD_INT 1
31467: NEG
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 1
31475: PUSH
31476: LD_INT 1
31478: NEG
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 1
31486: NEG
31487: PUSH
31488: LD_INT 1
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31506: LD_ADDR_VAR 0 38
31510: PUSH
31511: LD_INT 0
31513: PUSH
31514: LD_INT 0
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PUSH
31521: LD_INT 0
31523: PUSH
31524: LD_INT 1
31526: NEG
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 1
31534: PUSH
31535: LD_INT 0
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 1
31544: PUSH
31545: LD_INT 1
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 0
31554: PUSH
31555: LD_INT 1
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: LD_INT 1
31564: NEG
31565: PUSH
31566: LD_INT 0
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 1
31575: NEG
31576: PUSH
31577: LD_INT 1
31579: NEG
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 2
31587: PUSH
31588: LD_INT 1
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 2
31597: NEG
31598: PUSH
31599: LD_INT 1
31601: NEG
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31618: LD_ADDR_VAR 0 39
31622: PUSH
31623: LD_INT 0
31625: PUSH
31626: LD_INT 0
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 0
31635: PUSH
31636: LD_INT 1
31638: NEG
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 1
31646: PUSH
31647: LD_INT 0
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 1
31656: PUSH
31657: LD_INT 1
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 0
31666: PUSH
31667: LD_INT 1
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 1
31676: NEG
31677: PUSH
31678: LD_INT 0
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 1
31687: NEG
31688: PUSH
31689: LD_INT 1
31691: NEG
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 1
31699: NEG
31700: PUSH
31701: LD_INT 2
31703: NEG
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 1
31711: PUSH
31712: LD_INT 2
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31730: LD_ADDR_VAR 0 40
31734: PUSH
31735: LD_INT 0
31737: PUSH
31738: LD_INT 0
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: LD_INT 0
31747: PUSH
31748: LD_INT 1
31750: NEG
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_INT 1
31758: PUSH
31759: LD_INT 0
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_INT 1
31768: PUSH
31769: LD_INT 1
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 0
31778: PUSH
31779: LD_INT 1
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 1
31788: NEG
31789: PUSH
31790: LD_INT 0
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 1
31799: NEG
31800: PUSH
31801: LD_INT 1
31803: NEG
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 1
31811: PUSH
31812: LD_INT 1
31814: NEG
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 1
31822: NEG
31823: PUSH
31824: LD_INT 1
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31842: LD_ADDR_VAR 0 41
31846: PUSH
31847: LD_INT 0
31849: PUSH
31850: LD_INT 0
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 0
31859: PUSH
31860: LD_INT 1
31862: NEG
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 1
31870: PUSH
31871: LD_INT 0
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 1
31880: PUSH
31881: LD_INT 1
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 0
31890: PUSH
31891: LD_INT 1
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_INT 1
31900: NEG
31901: PUSH
31902: LD_INT 0
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 1
31911: NEG
31912: PUSH
31913: LD_INT 1
31915: NEG
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: LD_INT 1
31923: NEG
31924: PUSH
31925: LD_INT 2
31927: NEG
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: LD_INT 1
31935: PUSH
31936: LD_INT 1
31938: NEG
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: LD_INT 2
31946: PUSH
31947: LD_INT 0
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 2
31956: PUSH
31957: LD_INT 1
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 2
31966: PUSH
31967: LD_INT 2
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 1
31976: PUSH
31977: LD_INT 2
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 1
31986: NEG
31987: PUSH
31988: LD_INT 1
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 2
31997: NEG
31998: PUSH
31999: LD_INT 0
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: LD_INT 2
32008: NEG
32009: PUSH
32010: LD_INT 1
32012: NEG
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 2
32020: NEG
32021: PUSH
32022: LD_INT 2
32024: NEG
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 2
32032: NEG
32033: PUSH
32034: LD_INT 3
32036: NEG
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: LD_INT 2
32044: PUSH
32045: LD_INT 1
32047: NEG
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: LD_INT 3
32055: PUSH
32056: LD_INT 0
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 3
32065: PUSH
32066: LD_INT 1
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 3
32075: PUSH
32076: LD_INT 2
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 3
32085: PUSH
32086: LD_INT 3
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 2
32095: PUSH
32096: LD_INT 3
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 2
32105: NEG
32106: PUSH
32107: LD_INT 1
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 3
32116: NEG
32117: PUSH
32118: LD_INT 0
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 3
32127: NEG
32128: PUSH
32129: LD_INT 1
32131: NEG
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 3
32139: NEG
32140: PUSH
32141: LD_INT 2
32143: NEG
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 3
32151: NEG
32152: PUSH
32153: LD_INT 3
32155: NEG
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32192: LD_ADDR_VAR 0 42
32196: PUSH
32197: LD_INT 0
32199: PUSH
32200: LD_INT 0
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 0
32209: PUSH
32210: LD_INT 1
32212: NEG
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 1
32220: PUSH
32221: LD_INT 0
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 1
32230: PUSH
32231: LD_INT 1
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 0
32240: PUSH
32241: LD_INT 1
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 1
32250: NEG
32251: PUSH
32252: LD_INT 0
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 1
32261: NEG
32262: PUSH
32263: LD_INT 1
32265: NEG
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 1
32273: NEG
32274: PUSH
32275: LD_INT 2
32277: NEG
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 0
32285: PUSH
32286: LD_INT 2
32288: NEG
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: LD_INT 1
32296: PUSH
32297: LD_INT 1
32299: NEG
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: LD_INT 2
32307: PUSH
32308: LD_INT 1
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 2
32317: PUSH
32318: LD_INT 2
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 1
32327: PUSH
32328: LD_INT 2
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 0
32337: PUSH
32338: LD_INT 2
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 1
32347: NEG
32348: PUSH
32349: LD_INT 1
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 2
32358: NEG
32359: PUSH
32360: LD_INT 1
32362: NEG
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 2
32370: NEG
32371: PUSH
32372: LD_INT 2
32374: NEG
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 2
32382: NEG
32383: PUSH
32384: LD_INT 3
32386: NEG
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 1
32394: NEG
32395: PUSH
32396: LD_INT 3
32398: NEG
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: PUSH
32404: LD_INT 0
32406: PUSH
32407: LD_INT 3
32409: NEG
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 1
32417: PUSH
32418: LD_INT 2
32420: NEG
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 3
32428: PUSH
32429: LD_INT 2
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 3
32438: PUSH
32439: LD_INT 3
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 2
32448: PUSH
32449: LD_INT 3
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 1
32458: PUSH
32459: LD_INT 3
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: PUSH
32466: LD_INT 0
32468: PUSH
32469: LD_INT 3
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 1
32478: NEG
32479: PUSH
32480: LD_INT 2
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 3
32489: NEG
32490: PUSH
32491: LD_INT 2
32493: NEG
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 3
32501: NEG
32502: PUSH
32503: LD_INT 3
32505: NEG
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32542: LD_ADDR_VAR 0 43
32546: PUSH
32547: LD_INT 0
32549: PUSH
32550: LD_INT 0
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 0
32559: PUSH
32560: LD_INT 1
32562: NEG
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 1
32570: PUSH
32571: LD_INT 0
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 1
32580: PUSH
32581: LD_INT 1
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 0
32590: PUSH
32591: LD_INT 1
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 1
32600: NEG
32601: PUSH
32602: LD_INT 0
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 1
32611: NEG
32612: PUSH
32613: LD_INT 1
32615: NEG
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 1
32623: NEG
32624: PUSH
32625: LD_INT 2
32627: NEG
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 0
32635: PUSH
32636: LD_INT 2
32638: NEG
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 1
32646: PUSH
32647: LD_INT 1
32649: NEG
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: LD_INT 2
32657: PUSH
32658: LD_INT 0
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: LD_INT 2
32667: PUSH
32668: LD_INT 1
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PUSH
32675: LD_INT 1
32677: PUSH
32678: LD_INT 2
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 0
32687: PUSH
32688: LD_INT 2
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 1
32697: NEG
32698: PUSH
32699: LD_INT 1
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 2
32708: NEG
32709: PUSH
32710: LD_INT 0
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 2
32719: NEG
32720: PUSH
32721: LD_INT 1
32723: NEG
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 1
32731: NEG
32732: PUSH
32733: LD_INT 3
32735: NEG
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 0
32743: PUSH
32744: LD_INT 3
32746: NEG
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 1
32754: PUSH
32755: LD_INT 2
32757: NEG
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 2
32765: PUSH
32766: LD_INT 1
32768: NEG
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 3
32776: PUSH
32777: LD_INT 0
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 3
32786: PUSH
32787: LD_INT 1
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 1
32796: PUSH
32797: LD_INT 3
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 0
32806: PUSH
32807: LD_INT 3
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 1
32816: NEG
32817: PUSH
32818: LD_INT 2
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 2
32827: NEG
32828: PUSH
32829: LD_INT 1
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 3
32838: NEG
32839: PUSH
32840: LD_INT 0
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 3
32849: NEG
32850: PUSH
32851: LD_INT 1
32853: NEG
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32890: LD_ADDR_VAR 0 44
32894: PUSH
32895: LD_INT 0
32897: PUSH
32898: LD_INT 0
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 0
32907: PUSH
32908: LD_INT 1
32910: NEG
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: PUSH
32916: LD_INT 1
32918: PUSH
32919: LD_INT 0
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 1
32928: PUSH
32929: LD_INT 1
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 0
32938: PUSH
32939: LD_INT 1
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 1
32948: NEG
32949: PUSH
32950: LD_INT 0
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 1
32959: NEG
32960: PUSH
32961: LD_INT 1
32963: NEG
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: LD_INT 1
32971: NEG
32972: PUSH
32973: LD_INT 2
32975: NEG
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 1
32983: PUSH
32984: LD_INT 1
32986: NEG
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 2
32994: PUSH
32995: LD_INT 0
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 2
33004: PUSH
33005: LD_INT 1
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 2
33014: PUSH
33015: LD_INT 2
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 1
33024: PUSH
33025: LD_INT 2
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 1
33034: NEG
33035: PUSH
33036: LD_INT 1
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 2
33045: NEG
33046: PUSH
33047: LD_INT 0
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 2
33056: NEG
33057: PUSH
33058: LD_INT 1
33060: NEG
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: LD_INT 2
33068: NEG
33069: PUSH
33070: LD_INT 2
33072: NEG
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 2
33080: NEG
33081: PUSH
33082: LD_INT 3
33084: NEG
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 2
33092: PUSH
33093: LD_INT 1
33095: NEG
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 3
33103: PUSH
33104: LD_INT 0
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 3
33113: PUSH
33114: LD_INT 1
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 3
33123: PUSH
33124: LD_INT 2
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: PUSH
33131: LD_INT 3
33133: PUSH
33134: LD_INT 3
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 2
33143: PUSH
33144: LD_INT 3
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 2
33153: NEG
33154: PUSH
33155: LD_INT 1
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 3
33164: NEG
33165: PUSH
33166: LD_INT 0
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 3
33175: NEG
33176: PUSH
33177: LD_INT 1
33179: NEG
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 3
33187: NEG
33188: PUSH
33189: LD_INT 2
33191: NEG
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 3
33199: NEG
33200: PUSH
33201: LD_INT 3
33203: NEG
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33240: LD_ADDR_VAR 0 45
33244: PUSH
33245: LD_INT 0
33247: PUSH
33248: LD_INT 0
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 0
33257: PUSH
33258: LD_INT 1
33260: NEG
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 1
33268: PUSH
33269: LD_INT 0
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PUSH
33276: LD_INT 1
33278: PUSH
33279: LD_INT 1
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 0
33288: PUSH
33289: LD_INT 1
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 1
33298: NEG
33299: PUSH
33300: LD_INT 0
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 1
33309: NEG
33310: PUSH
33311: LD_INT 1
33313: NEG
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 1
33321: NEG
33322: PUSH
33323: LD_INT 2
33325: NEG
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 0
33333: PUSH
33334: LD_INT 2
33336: NEG
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 1
33344: PUSH
33345: LD_INT 1
33347: NEG
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: PUSH
33353: LD_INT 2
33355: PUSH
33356: LD_INT 1
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 2
33365: PUSH
33366: LD_INT 2
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 1
33375: PUSH
33376: LD_INT 2
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 0
33385: PUSH
33386: LD_INT 2
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 1
33395: NEG
33396: PUSH
33397: LD_INT 1
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 2
33406: NEG
33407: PUSH
33408: LD_INT 1
33410: NEG
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 2
33418: NEG
33419: PUSH
33420: LD_INT 2
33422: NEG
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 2
33430: NEG
33431: PUSH
33432: LD_INT 3
33434: NEG
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 1
33442: NEG
33443: PUSH
33444: LD_INT 3
33446: NEG
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: LD_INT 0
33454: PUSH
33455: LD_INT 3
33457: NEG
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 1
33465: PUSH
33466: LD_INT 2
33468: NEG
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 3
33476: PUSH
33477: LD_INT 2
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: LD_INT 3
33486: PUSH
33487: LD_INT 3
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 2
33496: PUSH
33497: LD_INT 3
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 1
33506: PUSH
33507: LD_INT 3
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 0
33516: PUSH
33517: LD_INT 3
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 1
33526: NEG
33527: PUSH
33528: LD_INT 2
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 3
33537: NEG
33538: PUSH
33539: LD_INT 2
33541: NEG
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 3
33549: NEG
33550: PUSH
33551: LD_INT 3
33553: NEG
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33590: LD_ADDR_VAR 0 46
33594: PUSH
33595: LD_INT 0
33597: PUSH
33598: LD_INT 0
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 0
33607: PUSH
33608: LD_INT 1
33610: NEG
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 1
33618: PUSH
33619: LD_INT 0
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 1
33628: PUSH
33629: LD_INT 1
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: LD_INT 0
33638: PUSH
33639: LD_INT 1
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: PUSH
33646: LD_INT 1
33648: NEG
33649: PUSH
33650: LD_INT 0
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 1
33659: NEG
33660: PUSH
33661: LD_INT 1
33663: NEG
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: LD_INT 1
33671: NEG
33672: PUSH
33673: LD_INT 2
33675: NEG
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: LD_INT 0
33683: PUSH
33684: LD_INT 2
33686: NEG
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: LD_INT 1
33694: PUSH
33695: LD_INT 1
33697: NEG
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: PUSH
33703: LD_INT 2
33705: PUSH
33706: LD_INT 0
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: PUSH
33713: LD_INT 2
33715: PUSH
33716: LD_INT 1
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: LD_INT 1
33725: PUSH
33726: LD_INT 2
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PUSH
33733: LD_INT 0
33735: PUSH
33736: LD_INT 2
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 1
33745: NEG
33746: PUSH
33747: LD_INT 1
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 2
33756: NEG
33757: PUSH
33758: LD_INT 0
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 2
33767: NEG
33768: PUSH
33769: LD_INT 1
33771: NEG
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 1
33779: NEG
33780: PUSH
33781: LD_INT 3
33783: NEG
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 0
33791: PUSH
33792: LD_INT 3
33794: NEG
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 1
33802: PUSH
33803: LD_INT 2
33805: NEG
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 2
33813: PUSH
33814: LD_INT 1
33816: NEG
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 3
33824: PUSH
33825: LD_INT 0
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 3
33834: PUSH
33835: LD_INT 1
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 1
33844: PUSH
33845: LD_INT 3
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 0
33854: PUSH
33855: LD_INT 3
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 1
33864: NEG
33865: PUSH
33866: LD_INT 2
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: LD_INT 2
33875: NEG
33876: PUSH
33877: LD_INT 1
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: LD_INT 3
33886: NEG
33887: PUSH
33888: LD_INT 0
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PUSH
33895: LD_INT 3
33897: NEG
33898: PUSH
33899: LD_INT 1
33901: NEG
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33938: LD_ADDR_VAR 0 47
33942: PUSH
33943: LD_INT 0
33945: PUSH
33946: LD_INT 0
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 0
33955: PUSH
33956: LD_INT 1
33958: NEG
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 1
33966: PUSH
33967: LD_INT 0
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 1
33976: PUSH
33977: LD_INT 1
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 0
33986: PUSH
33987: LD_INT 1
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 1
33996: NEG
33997: PUSH
33998: LD_INT 0
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 1
34007: NEG
34008: PUSH
34009: LD_INT 1
34011: NEG
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: LD_INT 1
34019: NEG
34020: PUSH
34021: LD_INT 2
34023: NEG
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 0
34031: PUSH
34032: LD_INT 2
34034: NEG
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 1
34042: PUSH
34043: LD_INT 1
34045: NEG
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 2
34053: NEG
34054: PUSH
34055: LD_INT 1
34057: NEG
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 2
34065: NEG
34066: PUSH
34067: LD_INT 2
34069: NEG
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
34089: LD_ADDR_VAR 0 48
34093: PUSH
34094: LD_INT 0
34096: PUSH
34097: LD_INT 0
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 0
34106: PUSH
34107: LD_INT 1
34109: NEG
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 1
34117: PUSH
34118: LD_INT 0
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: PUSH
34125: LD_INT 1
34127: PUSH
34128: LD_INT 1
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 0
34137: PUSH
34138: LD_INT 1
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 1
34147: NEG
34148: PUSH
34149: LD_INT 0
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PUSH
34156: LD_INT 1
34158: NEG
34159: PUSH
34160: LD_INT 1
34162: NEG
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: LD_INT 1
34170: NEG
34171: PUSH
34172: LD_INT 2
34174: NEG
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 0
34182: PUSH
34183: LD_INT 2
34185: NEG
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 1
34193: PUSH
34194: LD_INT 1
34196: NEG
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 2
34204: PUSH
34205: LD_INT 0
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 2
34214: PUSH
34215: LD_INT 1
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
34236: LD_ADDR_VAR 0 49
34240: PUSH
34241: LD_INT 0
34243: PUSH
34244: LD_INT 0
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 0
34253: PUSH
34254: LD_INT 1
34256: NEG
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: LD_INT 1
34264: PUSH
34265: LD_INT 0
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 1
34274: PUSH
34275: LD_INT 1
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_INT 0
34284: PUSH
34285: LD_INT 1
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 1
34294: NEG
34295: PUSH
34296: LD_INT 0
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: LD_INT 1
34305: NEG
34306: PUSH
34307: LD_INT 1
34309: NEG
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 1
34317: PUSH
34318: LD_INT 1
34320: NEG
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: LD_INT 2
34328: PUSH
34329: LD_INT 0
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PUSH
34336: LD_INT 2
34338: PUSH
34339: LD_INT 1
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 2
34348: PUSH
34349: LD_INT 2
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 1
34358: PUSH
34359: LD_INT 2
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34380: LD_ADDR_VAR 0 50
34384: PUSH
34385: LD_INT 0
34387: PUSH
34388: LD_INT 0
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: LD_INT 0
34397: PUSH
34398: LD_INT 1
34400: NEG
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PUSH
34406: LD_INT 1
34408: PUSH
34409: LD_INT 0
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: LD_INT 1
34418: PUSH
34419: LD_INT 1
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 0
34428: PUSH
34429: LD_INT 1
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 1
34438: NEG
34439: PUSH
34440: LD_INT 0
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: LD_INT 1
34449: NEG
34450: PUSH
34451: LD_INT 1
34453: NEG
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 2
34461: PUSH
34462: LD_INT 1
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: LD_INT 2
34471: PUSH
34472: LD_INT 2
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 1
34481: PUSH
34482: LD_INT 2
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 0
34491: PUSH
34492: LD_INT 2
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 1
34501: NEG
34502: PUSH
34503: LD_INT 1
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34524: LD_ADDR_VAR 0 51
34528: PUSH
34529: LD_INT 0
34531: PUSH
34532: LD_INT 0
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: PUSH
34539: LD_INT 0
34541: PUSH
34542: LD_INT 1
34544: NEG
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 1
34552: PUSH
34553: LD_INT 0
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 1
34562: PUSH
34563: LD_INT 1
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 0
34572: PUSH
34573: LD_INT 1
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 1
34582: NEG
34583: PUSH
34584: LD_INT 0
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 1
34593: NEG
34594: PUSH
34595: LD_INT 1
34597: NEG
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 1
34605: PUSH
34606: LD_INT 2
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 0
34615: PUSH
34616: LD_INT 2
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 1
34625: NEG
34626: PUSH
34627: LD_INT 1
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: LD_INT 2
34636: NEG
34637: PUSH
34638: LD_INT 0
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 2
34647: NEG
34648: PUSH
34649: LD_INT 1
34651: NEG
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34671: LD_ADDR_VAR 0 52
34675: PUSH
34676: LD_INT 0
34678: PUSH
34679: LD_INT 0
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: LD_INT 0
34688: PUSH
34689: LD_INT 1
34691: NEG
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 1
34699: PUSH
34700: LD_INT 0
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: LD_INT 1
34709: PUSH
34710: LD_INT 1
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: PUSH
34717: LD_INT 0
34719: PUSH
34720: LD_INT 1
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 1
34729: NEG
34730: PUSH
34731: LD_INT 0
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 1
34740: NEG
34741: PUSH
34742: LD_INT 1
34744: NEG
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 1
34752: NEG
34753: PUSH
34754: LD_INT 2
34756: NEG
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 1
34764: NEG
34765: PUSH
34766: LD_INT 1
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 2
34775: NEG
34776: PUSH
34777: LD_INT 0
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 2
34786: NEG
34787: PUSH
34788: LD_INT 1
34790: NEG
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 2
34798: NEG
34799: PUSH
34800: LD_INT 2
34802: NEG
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34822: LD_ADDR_VAR 0 53
34826: PUSH
34827: LD_INT 0
34829: PUSH
34830: LD_INT 0
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 0
34839: PUSH
34840: LD_INT 1
34842: NEG
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 1
34850: PUSH
34851: LD_INT 0
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: LD_INT 1
34860: PUSH
34861: LD_INT 1
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 0
34870: PUSH
34871: LD_INT 1
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 1
34880: NEG
34881: PUSH
34882: LD_INT 0
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 1
34891: NEG
34892: PUSH
34893: LD_INT 1
34895: NEG
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 1
34903: NEG
34904: PUSH
34905: LD_INT 2
34907: NEG
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 0
34915: PUSH
34916: LD_INT 2
34918: NEG
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 1
34926: PUSH
34927: LD_INT 1
34929: NEG
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 2
34937: PUSH
34938: LD_INT 0
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 2
34947: PUSH
34948: LD_INT 1
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 2
34957: PUSH
34958: LD_INT 2
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 1
34967: PUSH
34968: LD_INT 2
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 0
34977: PUSH
34978: LD_INT 2
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: LD_INT 1
34987: NEG
34988: PUSH
34989: LD_INT 1
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: PUSH
34996: LD_INT 2
34998: NEG
34999: PUSH
35000: LD_INT 0
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: LD_INT 2
35009: NEG
35010: PUSH
35011: LD_INT 1
35013: NEG
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 2
35021: NEG
35022: PUSH
35023: LD_INT 2
35025: NEG
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35052: LD_ADDR_VAR 0 54
35056: PUSH
35057: LD_INT 0
35059: PUSH
35060: LD_INT 0
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 0
35069: PUSH
35070: LD_INT 1
35072: NEG
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 1
35080: PUSH
35081: LD_INT 0
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 1
35090: PUSH
35091: LD_INT 1
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: LD_INT 0
35100: PUSH
35101: LD_INT 1
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 1
35110: NEG
35111: PUSH
35112: LD_INT 0
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: LD_INT 1
35121: NEG
35122: PUSH
35123: LD_INT 1
35125: NEG
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 1
35133: NEG
35134: PUSH
35135: LD_INT 2
35137: NEG
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 0
35145: PUSH
35146: LD_INT 2
35148: NEG
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 1
35156: PUSH
35157: LD_INT 1
35159: NEG
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PUSH
35165: LD_INT 2
35167: PUSH
35168: LD_INT 0
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: LD_INT 2
35177: PUSH
35178: LD_INT 1
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PUSH
35185: LD_INT 2
35187: PUSH
35188: LD_INT 2
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 1
35197: PUSH
35198: LD_INT 2
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 0
35207: PUSH
35208: LD_INT 2
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 1
35217: NEG
35218: PUSH
35219: LD_INT 1
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 2
35228: NEG
35229: PUSH
35230: LD_INT 0
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: PUSH
35237: LD_INT 2
35239: NEG
35240: PUSH
35241: LD_INT 1
35243: NEG
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 2
35251: NEG
35252: PUSH
35253: LD_INT 2
35255: NEG
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35282: LD_ADDR_VAR 0 55
35286: PUSH
35287: LD_INT 0
35289: PUSH
35290: LD_INT 0
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 0
35299: PUSH
35300: LD_INT 1
35302: NEG
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 1
35310: PUSH
35311: LD_INT 0
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 1
35320: PUSH
35321: LD_INT 1
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 0
35330: PUSH
35331: LD_INT 1
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: LD_INT 1
35340: NEG
35341: PUSH
35342: LD_INT 0
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 1
35351: NEG
35352: PUSH
35353: LD_INT 1
35355: NEG
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: LD_INT 1
35363: NEG
35364: PUSH
35365: LD_INT 2
35367: NEG
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 0
35375: PUSH
35376: LD_INT 2
35378: NEG
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 1
35386: PUSH
35387: LD_INT 1
35389: NEG
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PUSH
35395: LD_INT 2
35397: PUSH
35398: LD_INT 0
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: LD_INT 2
35407: PUSH
35408: LD_INT 1
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_INT 2
35417: PUSH
35418: LD_INT 2
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 1
35427: PUSH
35428: LD_INT 2
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 0
35437: PUSH
35438: LD_INT 2
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 1
35447: NEG
35448: PUSH
35449: LD_INT 1
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 2
35458: NEG
35459: PUSH
35460: LD_INT 0
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 2
35469: NEG
35470: PUSH
35471: LD_INT 1
35473: NEG
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: LD_INT 2
35481: NEG
35482: PUSH
35483: LD_INT 2
35485: NEG
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35512: LD_ADDR_VAR 0 56
35516: PUSH
35517: LD_INT 0
35519: PUSH
35520: LD_INT 0
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 0
35529: PUSH
35530: LD_INT 1
35532: NEG
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 1
35540: PUSH
35541: LD_INT 0
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: LD_INT 1
35550: PUSH
35551: LD_INT 1
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 0
35560: PUSH
35561: LD_INT 1
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 1
35570: NEG
35571: PUSH
35572: LD_INT 0
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 1
35581: NEG
35582: PUSH
35583: LD_INT 1
35585: NEG
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 1
35593: NEG
35594: PUSH
35595: LD_INT 2
35597: NEG
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 0
35605: PUSH
35606: LD_INT 2
35608: NEG
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: PUSH
35614: LD_INT 1
35616: PUSH
35617: LD_INT 1
35619: NEG
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: PUSH
35625: LD_INT 2
35627: PUSH
35628: LD_INT 0
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 2
35637: PUSH
35638: LD_INT 1
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 2
35647: PUSH
35648: LD_INT 2
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: PUSH
35655: LD_INT 1
35657: PUSH
35658: LD_INT 2
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: PUSH
35665: LD_INT 0
35667: PUSH
35668: LD_INT 2
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: PUSH
35675: LD_INT 1
35677: NEG
35678: PUSH
35679: LD_INT 1
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 2
35688: NEG
35689: PUSH
35690: LD_INT 0
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 2
35699: NEG
35700: PUSH
35701: LD_INT 1
35703: NEG
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 2
35711: NEG
35712: PUSH
35713: LD_INT 2
35715: NEG
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: LIST
35733: LIST
35734: LIST
35735: LIST
35736: LIST
35737: LIST
35738: LIST
35739: LIST
35740: LIST
35741: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35742: LD_ADDR_VAR 0 57
35746: PUSH
35747: LD_INT 0
35749: PUSH
35750: LD_INT 0
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 0
35759: PUSH
35760: LD_INT 1
35762: NEG
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: LD_INT 1
35770: PUSH
35771: LD_INT 0
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 1
35780: PUSH
35781: LD_INT 1
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 0
35790: PUSH
35791: LD_INT 1
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 1
35800: NEG
35801: PUSH
35802: LD_INT 0
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: LD_INT 1
35811: NEG
35812: PUSH
35813: LD_INT 1
35815: NEG
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 1
35823: NEG
35824: PUSH
35825: LD_INT 2
35827: NEG
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 0
35835: PUSH
35836: LD_INT 2
35838: NEG
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 1
35846: PUSH
35847: LD_INT 1
35849: NEG
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: LD_INT 2
35857: PUSH
35858: LD_INT 0
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 2
35867: PUSH
35868: LD_INT 1
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 2
35877: PUSH
35878: LD_INT 2
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 1
35887: PUSH
35888: LD_INT 2
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 0
35897: PUSH
35898: LD_INT 2
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 1
35907: NEG
35908: PUSH
35909: LD_INT 1
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 2
35918: NEG
35919: PUSH
35920: LD_INT 0
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 2
35929: NEG
35930: PUSH
35931: LD_INT 1
35933: NEG
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: LD_INT 2
35941: NEG
35942: PUSH
35943: LD_INT 2
35945: NEG
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: LIST
35971: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35972: LD_ADDR_VAR 0 58
35976: PUSH
35977: LD_INT 0
35979: PUSH
35980: LD_INT 0
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 0
35989: PUSH
35990: LD_INT 1
35992: NEG
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: LD_INT 1
36000: PUSH
36001: LD_INT 0
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 1
36010: PUSH
36011: LD_INT 1
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: LD_INT 0
36020: PUSH
36021: LD_INT 1
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 1
36030: NEG
36031: PUSH
36032: LD_INT 0
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 1
36041: NEG
36042: PUSH
36043: LD_INT 1
36045: NEG
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 1
36053: NEG
36054: PUSH
36055: LD_INT 2
36057: NEG
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 0
36065: PUSH
36066: LD_INT 2
36068: NEG
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: PUSH
36074: LD_INT 1
36076: PUSH
36077: LD_INT 1
36079: NEG
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: LD_INT 2
36087: PUSH
36088: LD_INT 0
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 2
36097: PUSH
36098: LD_INT 1
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 2
36107: PUSH
36108: LD_INT 2
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 1
36117: PUSH
36118: LD_INT 2
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: PUSH
36125: LD_INT 0
36127: PUSH
36128: LD_INT 2
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PUSH
36135: LD_INT 1
36137: NEG
36138: PUSH
36139: LD_INT 1
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 2
36148: NEG
36149: PUSH
36150: LD_INT 0
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: LD_INT 2
36159: NEG
36160: PUSH
36161: LD_INT 1
36163: NEG
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: LD_INT 2
36171: NEG
36172: PUSH
36173: LD_INT 2
36175: NEG
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36202: LD_ADDR_VAR 0 59
36206: PUSH
36207: LD_INT 0
36209: PUSH
36210: LD_INT 0
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PUSH
36217: LD_INT 0
36219: PUSH
36220: LD_INT 1
36222: NEG
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: LD_INT 1
36230: PUSH
36231: LD_INT 0
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 1
36240: PUSH
36241: LD_INT 1
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: LD_INT 0
36250: PUSH
36251: LD_INT 1
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 1
36260: NEG
36261: PUSH
36262: LD_INT 0
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 1
36271: NEG
36272: PUSH
36273: LD_INT 1
36275: NEG
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36290: LD_ADDR_VAR 0 60
36294: PUSH
36295: LD_INT 0
36297: PUSH
36298: LD_INT 0
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 0
36307: PUSH
36308: LD_INT 1
36310: NEG
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 1
36318: PUSH
36319: LD_INT 0
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 1
36328: PUSH
36329: LD_INT 1
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 0
36338: PUSH
36339: LD_INT 1
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 1
36348: NEG
36349: PUSH
36350: LD_INT 0
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 1
36359: NEG
36360: PUSH
36361: LD_INT 1
36363: NEG
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36378: LD_ADDR_VAR 0 61
36382: PUSH
36383: LD_INT 0
36385: PUSH
36386: LD_INT 0
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: LD_INT 0
36395: PUSH
36396: LD_INT 1
36398: NEG
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 1
36406: PUSH
36407: LD_INT 0
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: PUSH
36414: LD_INT 1
36416: PUSH
36417: LD_INT 1
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 0
36426: PUSH
36427: LD_INT 1
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 1
36436: NEG
36437: PUSH
36438: LD_INT 0
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 1
36447: NEG
36448: PUSH
36449: LD_INT 1
36451: NEG
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36466: LD_ADDR_VAR 0 62
36470: PUSH
36471: LD_INT 0
36473: PUSH
36474: LD_INT 0
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 0
36483: PUSH
36484: LD_INT 1
36486: NEG
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 1
36494: PUSH
36495: LD_INT 0
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: LD_INT 1
36504: PUSH
36505: LD_INT 1
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: LD_INT 0
36514: PUSH
36515: LD_INT 1
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: PUSH
36522: LD_INT 1
36524: NEG
36525: PUSH
36526: LD_INT 0
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: PUSH
36533: LD_INT 1
36535: NEG
36536: PUSH
36537: LD_INT 1
36539: NEG
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36554: LD_ADDR_VAR 0 63
36558: PUSH
36559: LD_INT 0
36561: PUSH
36562: LD_INT 0
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 0
36571: PUSH
36572: LD_INT 1
36574: NEG
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 1
36582: PUSH
36583: LD_INT 0
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: PUSH
36590: LD_INT 1
36592: PUSH
36593: LD_INT 1
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 0
36602: PUSH
36603: LD_INT 1
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: LD_INT 1
36612: NEG
36613: PUSH
36614: LD_INT 0
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: LD_INT 1
36623: NEG
36624: PUSH
36625: LD_INT 1
36627: NEG
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36642: LD_ADDR_VAR 0 64
36646: PUSH
36647: LD_INT 0
36649: PUSH
36650: LD_INT 0
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: LD_INT 0
36659: PUSH
36660: LD_INT 1
36662: NEG
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 1
36670: PUSH
36671: LD_INT 0
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 1
36680: PUSH
36681: LD_INT 1
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 0
36690: PUSH
36691: LD_INT 1
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: LD_INT 1
36700: NEG
36701: PUSH
36702: LD_INT 0
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 1
36711: NEG
36712: PUSH
36713: LD_INT 1
36715: NEG
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: LIST
36728: LIST
36729: ST_TO_ADDR
// end ; 1 :
36730: GO 42627
36732: LD_INT 1
36734: DOUBLE
36735: EQUAL
36736: IFTRUE 36740
36738: GO 39363
36740: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36741: LD_ADDR_VAR 0 11
36745: PUSH
36746: LD_INT 1
36748: NEG
36749: PUSH
36750: LD_INT 3
36752: NEG
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 0
36760: PUSH
36761: LD_INT 3
36763: NEG
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 1
36771: PUSH
36772: LD_INT 2
36774: NEG
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: LIST
36784: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36785: LD_ADDR_VAR 0 12
36789: PUSH
36790: LD_INT 2
36792: PUSH
36793: LD_INT 1
36795: NEG
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: LD_INT 3
36803: PUSH
36804: LD_INT 0
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: LD_INT 3
36813: PUSH
36814: LD_INT 1
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: LIST
36825: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36826: LD_ADDR_VAR 0 13
36830: PUSH
36831: LD_INT 3
36833: PUSH
36834: LD_INT 2
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: LD_INT 3
36843: PUSH
36844: LD_INT 3
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: LD_INT 2
36853: PUSH
36854: LD_INT 3
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: LIST
36865: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36866: LD_ADDR_VAR 0 14
36870: PUSH
36871: LD_INT 1
36873: PUSH
36874: LD_INT 3
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 0
36883: PUSH
36884: LD_INT 3
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 1
36893: NEG
36894: PUSH
36895: LD_INT 2
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: LIST
36906: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36907: LD_ADDR_VAR 0 15
36911: PUSH
36912: LD_INT 2
36914: NEG
36915: PUSH
36916: LD_INT 1
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 3
36925: NEG
36926: PUSH
36927: LD_INT 0
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 3
36936: NEG
36937: PUSH
36938: LD_INT 1
36940: NEG
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: LIST
36950: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36951: LD_ADDR_VAR 0 16
36955: PUSH
36956: LD_INT 2
36958: NEG
36959: PUSH
36960: LD_INT 3
36962: NEG
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 3
36970: NEG
36971: PUSH
36972: LD_INT 2
36974: NEG
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 3
36982: NEG
36983: PUSH
36984: LD_INT 3
36986: NEG
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: LIST
36996: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36997: LD_ADDR_VAR 0 17
37001: PUSH
37002: LD_INT 1
37004: NEG
37005: PUSH
37006: LD_INT 3
37008: NEG
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 0
37016: PUSH
37017: LD_INT 3
37019: NEG
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 1
37027: PUSH
37028: LD_INT 2
37030: NEG
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: LIST
37040: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37041: LD_ADDR_VAR 0 18
37045: PUSH
37046: LD_INT 2
37048: PUSH
37049: LD_INT 1
37051: NEG
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 3
37059: PUSH
37060: LD_INT 0
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 3
37069: PUSH
37070: LD_INT 1
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: LIST
37081: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37082: LD_ADDR_VAR 0 19
37086: PUSH
37087: LD_INT 3
37089: PUSH
37090: LD_INT 2
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 3
37099: PUSH
37100: LD_INT 3
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 2
37109: PUSH
37110: LD_INT 3
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: LIST
37121: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37122: LD_ADDR_VAR 0 20
37126: PUSH
37127: LD_INT 1
37129: PUSH
37130: LD_INT 3
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 0
37139: PUSH
37140: LD_INT 3
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 1
37149: NEG
37150: PUSH
37151: LD_INT 2
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: LIST
37162: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37163: LD_ADDR_VAR 0 21
37167: PUSH
37168: LD_INT 2
37170: NEG
37171: PUSH
37172: LD_INT 1
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 3
37181: NEG
37182: PUSH
37183: LD_INT 0
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 3
37192: NEG
37193: PUSH
37194: LD_INT 1
37196: NEG
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: LIST
37206: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37207: LD_ADDR_VAR 0 22
37211: PUSH
37212: LD_INT 2
37214: NEG
37215: PUSH
37216: LD_INT 3
37218: NEG
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 3
37226: NEG
37227: PUSH
37228: LD_INT 2
37230: NEG
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 3
37238: NEG
37239: PUSH
37240: LD_INT 3
37242: NEG
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: LIST
37252: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
37253: LD_ADDR_VAR 0 23
37257: PUSH
37258: LD_INT 0
37260: PUSH
37261: LD_INT 3
37263: NEG
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 1
37271: NEG
37272: PUSH
37273: LD_INT 4
37275: NEG
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 1
37283: PUSH
37284: LD_INT 3
37286: NEG
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: LIST
37296: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
37297: LD_ADDR_VAR 0 24
37301: PUSH
37302: LD_INT 3
37304: PUSH
37305: LD_INT 0
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PUSH
37312: LD_INT 3
37314: PUSH
37315: LD_INT 1
37317: NEG
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PUSH
37323: LD_INT 4
37325: PUSH
37326: LD_INT 1
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: LIST
37337: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
37338: LD_ADDR_VAR 0 25
37342: PUSH
37343: LD_INT 3
37345: PUSH
37346: LD_INT 3
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PUSH
37353: LD_INT 4
37355: PUSH
37356: LD_INT 3
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: LD_INT 3
37365: PUSH
37366: LD_INT 4
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: LIST
37377: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
37378: LD_ADDR_VAR 0 26
37382: PUSH
37383: LD_INT 0
37385: PUSH
37386: LD_INT 3
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 1
37395: PUSH
37396: LD_INT 4
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 1
37405: NEG
37406: PUSH
37407: LD_INT 3
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: LIST
37418: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
37419: LD_ADDR_VAR 0 27
37423: PUSH
37424: LD_INT 3
37426: NEG
37427: PUSH
37428: LD_INT 0
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 3
37437: NEG
37438: PUSH
37439: LD_INT 1
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 4
37448: NEG
37449: PUSH
37450: LD_INT 1
37452: NEG
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: LIST
37462: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
37463: LD_ADDR_VAR 0 28
37467: PUSH
37468: LD_INT 3
37470: NEG
37471: PUSH
37472: LD_INT 3
37474: NEG
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 3
37482: NEG
37483: PUSH
37484: LD_INT 4
37486: NEG
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 4
37494: NEG
37495: PUSH
37496: LD_INT 3
37498: NEG
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: LIST
37508: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
37509: LD_ADDR_VAR 0 29
37513: PUSH
37514: LD_INT 1
37516: NEG
37517: PUSH
37518: LD_INT 3
37520: NEG
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: LD_INT 0
37528: PUSH
37529: LD_INT 3
37531: NEG
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: LD_INT 1
37539: PUSH
37540: LD_INT 2
37542: NEG
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 1
37550: NEG
37551: PUSH
37552: LD_INT 4
37554: NEG
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 0
37562: PUSH
37563: LD_INT 4
37565: NEG
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 1
37573: PUSH
37574: LD_INT 3
37576: NEG
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 1
37584: NEG
37585: PUSH
37586: LD_INT 5
37588: NEG
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 0
37596: PUSH
37597: LD_INT 5
37599: NEG
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: LD_INT 1
37607: PUSH
37608: LD_INT 4
37610: NEG
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: LD_INT 1
37618: NEG
37619: PUSH
37620: LD_INT 6
37622: NEG
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: LD_INT 0
37630: PUSH
37631: LD_INT 6
37633: NEG
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 1
37641: PUSH
37642: LD_INT 5
37644: NEG
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
37664: LD_ADDR_VAR 0 30
37668: PUSH
37669: LD_INT 2
37671: PUSH
37672: LD_INT 1
37674: NEG
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 3
37682: PUSH
37683: LD_INT 0
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 3
37692: PUSH
37693: LD_INT 1
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 3
37702: PUSH
37703: LD_INT 1
37705: NEG
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 4
37713: PUSH
37714: LD_INT 0
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 4
37723: PUSH
37724: LD_INT 1
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 4
37733: PUSH
37734: LD_INT 1
37736: NEG
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 5
37744: PUSH
37745: LD_INT 0
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 5
37754: PUSH
37755: LD_INT 1
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 5
37764: PUSH
37765: LD_INT 1
37767: NEG
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 6
37775: PUSH
37776: LD_INT 0
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 6
37785: PUSH
37786: LD_INT 1
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: LIST
37797: LIST
37798: LIST
37799: LIST
37800: LIST
37801: LIST
37802: LIST
37803: LIST
37804: LIST
37805: LIST
37806: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
37807: LD_ADDR_VAR 0 31
37811: PUSH
37812: LD_INT 3
37814: PUSH
37815: LD_INT 2
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 3
37824: PUSH
37825: LD_INT 3
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 2
37834: PUSH
37835: LD_INT 3
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 4
37844: PUSH
37845: LD_INT 3
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 4
37854: PUSH
37855: LD_INT 4
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: PUSH
37862: LD_INT 3
37864: PUSH
37865: LD_INT 4
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 5
37874: PUSH
37875: LD_INT 4
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 5
37884: PUSH
37885: LD_INT 5
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 4
37894: PUSH
37895: LD_INT 5
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 6
37904: PUSH
37905: LD_INT 5
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: LD_INT 6
37914: PUSH
37915: LD_INT 6
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 5
37924: PUSH
37925: LD_INT 6
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
37946: LD_ADDR_VAR 0 32
37950: PUSH
37951: LD_INT 1
37953: PUSH
37954: LD_INT 3
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 0
37963: PUSH
37964: LD_INT 3
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 1
37973: NEG
37974: PUSH
37975: LD_INT 2
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 1
37984: PUSH
37985: LD_INT 4
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 0
37994: PUSH
37995: LD_INT 4
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 1
38004: NEG
38005: PUSH
38006: LD_INT 3
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: LD_INT 1
38015: PUSH
38016: LD_INT 5
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 0
38025: PUSH
38026: LD_INT 5
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PUSH
38033: LD_INT 1
38035: NEG
38036: PUSH
38037: LD_INT 4
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PUSH
38044: LD_INT 1
38046: PUSH
38047: LD_INT 6
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 0
38056: PUSH
38057: LD_INT 6
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 1
38066: NEG
38067: PUSH
38068: LD_INT 5
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
38089: LD_ADDR_VAR 0 33
38093: PUSH
38094: LD_INT 2
38096: NEG
38097: PUSH
38098: LD_INT 1
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 3
38107: NEG
38108: PUSH
38109: LD_INT 0
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 3
38118: NEG
38119: PUSH
38120: LD_INT 1
38122: NEG
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PUSH
38128: LD_INT 3
38130: NEG
38131: PUSH
38132: LD_INT 1
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: LD_INT 4
38141: NEG
38142: PUSH
38143: LD_INT 0
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: LD_INT 4
38152: NEG
38153: PUSH
38154: LD_INT 1
38156: NEG
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 4
38164: NEG
38165: PUSH
38166: LD_INT 1
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 5
38175: NEG
38176: PUSH
38177: LD_INT 0
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 5
38186: NEG
38187: PUSH
38188: LD_INT 1
38190: NEG
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 5
38198: NEG
38199: PUSH
38200: LD_INT 1
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 6
38209: NEG
38210: PUSH
38211: LD_INT 0
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 6
38220: NEG
38221: PUSH
38222: LD_INT 1
38224: NEG
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
38244: LD_ADDR_VAR 0 34
38248: PUSH
38249: LD_INT 2
38251: NEG
38252: PUSH
38253: LD_INT 3
38255: NEG
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 3
38263: NEG
38264: PUSH
38265: LD_INT 2
38267: NEG
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 3
38275: NEG
38276: PUSH
38277: LD_INT 3
38279: NEG
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 3
38287: NEG
38288: PUSH
38289: LD_INT 4
38291: NEG
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 4
38299: NEG
38300: PUSH
38301: LD_INT 3
38303: NEG
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 4
38311: NEG
38312: PUSH
38313: LD_INT 4
38315: NEG
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 4
38323: NEG
38324: PUSH
38325: LD_INT 5
38327: NEG
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 5
38335: NEG
38336: PUSH
38337: LD_INT 4
38339: NEG
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 5
38347: NEG
38348: PUSH
38349: LD_INT 5
38351: NEG
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 5
38359: NEG
38360: PUSH
38361: LD_INT 6
38363: NEG
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: LD_INT 6
38371: NEG
38372: PUSH
38373: LD_INT 5
38375: NEG
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 6
38383: NEG
38384: PUSH
38385: LD_INT 6
38387: NEG
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
38407: LD_ADDR_VAR 0 41
38411: PUSH
38412: LD_INT 0
38414: PUSH
38415: LD_INT 2
38417: NEG
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 1
38425: NEG
38426: PUSH
38427: LD_INT 3
38429: NEG
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 1
38437: PUSH
38438: LD_INT 2
38440: NEG
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: LIST
38450: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
38451: LD_ADDR_VAR 0 42
38455: PUSH
38456: LD_INT 2
38458: PUSH
38459: LD_INT 0
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 2
38468: PUSH
38469: LD_INT 1
38471: NEG
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 3
38479: PUSH
38480: LD_INT 1
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: LIST
38491: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
38492: LD_ADDR_VAR 0 43
38496: PUSH
38497: LD_INT 2
38499: PUSH
38500: LD_INT 2
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 3
38509: PUSH
38510: LD_INT 2
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 2
38519: PUSH
38520: LD_INT 3
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: LIST
38531: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
38532: LD_ADDR_VAR 0 44
38536: PUSH
38537: LD_INT 0
38539: PUSH
38540: LD_INT 2
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 1
38549: PUSH
38550: LD_INT 3
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 1
38559: NEG
38560: PUSH
38561: LD_INT 2
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: LIST
38572: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38573: LD_ADDR_VAR 0 45
38577: PUSH
38578: LD_INT 2
38580: NEG
38581: PUSH
38582: LD_INT 0
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 2
38591: NEG
38592: PUSH
38593: LD_INT 1
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 3
38602: NEG
38603: PUSH
38604: LD_INT 1
38606: NEG
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: LIST
38616: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38617: LD_ADDR_VAR 0 46
38621: PUSH
38622: LD_INT 2
38624: NEG
38625: PUSH
38626: LD_INT 2
38628: NEG
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 2
38636: NEG
38637: PUSH
38638: LD_INT 3
38640: NEG
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 3
38648: NEG
38649: PUSH
38650: LD_INT 2
38652: NEG
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: LIST
38662: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
38663: LD_ADDR_VAR 0 47
38667: PUSH
38668: LD_INT 2
38670: NEG
38671: PUSH
38672: LD_INT 3
38674: NEG
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 1
38682: NEG
38683: PUSH
38684: LD_INT 3
38686: NEG
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38696: LD_ADDR_VAR 0 48
38700: PUSH
38701: LD_INT 1
38703: PUSH
38704: LD_INT 2
38706: NEG
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 2
38714: PUSH
38715: LD_INT 1
38717: NEG
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
38727: LD_ADDR_VAR 0 49
38731: PUSH
38732: LD_INT 3
38734: PUSH
38735: LD_INT 1
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 3
38744: PUSH
38745: LD_INT 2
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
38756: LD_ADDR_VAR 0 50
38760: PUSH
38761: LD_INT 2
38763: PUSH
38764: LD_INT 3
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 1
38773: PUSH
38774: LD_INT 3
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38785: LD_ADDR_VAR 0 51
38789: PUSH
38790: LD_INT 1
38792: NEG
38793: PUSH
38794: LD_INT 2
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 2
38803: NEG
38804: PUSH
38805: LD_INT 1
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38816: LD_ADDR_VAR 0 52
38820: PUSH
38821: LD_INT 3
38823: NEG
38824: PUSH
38825: LD_INT 1
38827: NEG
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 3
38835: NEG
38836: PUSH
38837: LD_INT 2
38839: NEG
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38849: LD_ADDR_VAR 0 53
38853: PUSH
38854: LD_INT 1
38856: NEG
38857: PUSH
38858: LD_INT 3
38860: NEG
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 0
38868: PUSH
38869: LD_INT 3
38871: NEG
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 1
38879: PUSH
38880: LD_INT 2
38882: NEG
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: LIST
38892: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38893: LD_ADDR_VAR 0 54
38897: PUSH
38898: LD_INT 2
38900: PUSH
38901: LD_INT 1
38903: NEG
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 3
38911: PUSH
38912: LD_INT 0
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 3
38921: PUSH
38922: LD_INT 1
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: LIST
38933: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38934: LD_ADDR_VAR 0 55
38938: PUSH
38939: LD_INT 3
38941: PUSH
38942: LD_INT 2
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 3
38951: PUSH
38952: LD_INT 3
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 2
38961: PUSH
38962: LD_INT 3
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: LIST
38973: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38974: LD_ADDR_VAR 0 56
38978: PUSH
38979: LD_INT 1
38981: PUSH
38982: LD_INT 3
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 0
38991: PUSH
38992: LD_INT 3
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 1
39001: NEG
39002: PUSH
39003: LD_INT 2
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: LIST
39014: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39015: LD_ADDR_VAR 0 57
39019: PUSH
39020: LD_INT 2
39022: NEG
39023: PUSH
39024: LD_INT 1
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 3
39033: NEG
39034: PUSH
39035: LD_INT 0
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 3
39044: NEG
39045: PUSH
39046: LD_INT 1
39048: NEG
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: LIST
39058: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39059: LD_ADDR_VAR 0 58
39063: PUSH
39064: LD_INT 2
39066: NEG
39067: PUSH
39068: LD_INT 3
39070: NEG
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 3
39078: NEG
39079: PUSH
39080: LD_INT 2
39082: NEG
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 3
39090: NEG
39091: PUSH
39092: LD_INT 3
39094: NEG
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: LIST
39104: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
39105: LD_ADDR_VAR 0 59
39109: PUSH
39110: LD_INT 1
39112: NEG
39113: PUSH
39114: LD_INT 2
39116: NEG
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 0
39124: PUSH
39125: LD_INT 2
39127: NEG
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 1
39135: PUSH
39136: LD_INT 1
39138: NEG
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: LIST
39148: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39149: LD_ADDR_VAR 0 60
39153: PUSH
39154: LD_INT 1
39156: PUSH
39157: LD_INT 1
39159: NEG
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 2
39167: PUSH
39168: LD_INT 0
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: LD_INT 2
39177: PUSH
39178: LD_INT 1
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: LIST
39189: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39190: LD_ADDR_VAR 0 61
39194: PUSH
39195: LD_INT 2
39197: PUSH
39198: LD_INT 1
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 2
39207: PUSH
39208: LD_INT 2
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 1
39217: PUSH
39218: LD_INT 2
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: LIST
39229: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39230: LD_ADDR_VAR 0 62
39234: PUSH
39235: LD_INT 1
39237: PUSH
39238: LD_INT 2
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: LD_INT 0
39247: PUSH
39248: LD_INT 2
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 1
39257: NEG
39258: PUSH
39259: LD_INT 1
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: LIST
39270: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39271: LD_ADDR_VAR 0 63
39275: PUSH
39276: LD_INT 1
39278: NEG
39279: PUSH
39280: LD_INT 1
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 2
39289: NEG
39290: PUSH
39291: LD_INT 0
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 2
39300: NEG
39301: PUSH
39302: LD_INT 1
39304: NEG
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: LIST
39314: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39315: LD_ADDR_VAR 0 64
39319: PUSH
39320: LD_INT 1
39322: NEG
39323: PUSH
39324: LD_INT 2
39326: NEG
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 2
39334: NEG
39335: PUSH
39336: LD_INT 1
39338: NEG
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 2
39346: NEG
39347: PUSH
39348: LD_INT 2
39350: NEG
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: LIST
39360: ST_TO_ADDR
// end ; 2 :
39361: GO 42627
39363: LD_INT 2
39365: DOUBLE
39366: EQUAL
39367: IFTRUE 39371
39369: GO 42626
39371: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
39372: LD_ADDR_VAR 0 29
39376: PUSH
39377: LD_INT 4
39379: PUSH
39380: LD_INT 0
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 4
39389: PUSH
39390: LD_INT 1
39392: NEG
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 5
39400: PUSH
39401: LD_INT 0
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 5
39410: PUSH
39411: LD_INT 1
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 4
39420: PUSH
39421: LD_INT 1
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 3
39430: PUSH
39431: LD_INT 0
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 3
39440: PUSH
39441: LD_INT 1
39443: NEG
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 3
39451: PUSH
39452: LD_INT 2
39454: NEG
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 5
39462: PUSH
39463: LD_INT 2
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 3
39472: PUSH
39473: LD_INT 3
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 3
39482: PUSH
39483: LD_INT 2
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 4
39492: PUSH
39493: LD_INT 3
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 4
39502: PUSH
39503: LD_INT 4
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 3
39512: PUSH
39513: LD_INT 4
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 2
39522: PUSH
39523: LD_INT 3
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 2
39532: PUSH
39533: LD_INT 2
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 4
39542: PUSH
39543: LD_INT 2
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 2
39552: PUSH
39553: LD_INT 4
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 0
39562: PUSH
39563: LD_INT 4
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 0
39572: PUSH
39573: LD_INT 3
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 1
39582: PUSH
39583: LD_INT 4
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 1
39592: PUSH
39593: LD_INT 5
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 0
39602: PUSH
39603: LD_INT 5
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 1
39612: NEG
39613: PUSH
39614: LD_INT 4
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 1
39623: NEG
39624: PUSH
39625: LD_INT 3
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 2
39634: PUSH
39635: LD_INT 5
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 2
39644: NEG
39645: PUSH
39646: LD_INT 3
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 3
39655: NEG
39656: PUSH
39657: LD_INT 0
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 3
39666: NEG
39667: PUSH
39668: LD_INT 1
39670: NEG
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 2
39678: NEG
39679: PUSH
39680: LD_INT 0
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 2
39689: NEG
39690: PUSH
39691: LD_INT 1
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 3
39700: NEG
39701: PUSH
39702: LD_INT 1
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 4
39711: NEG
39712: PUSH
39713: LD_INT 0
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 4
39722: NEG
39723: PUSH
39724: LD_INT 1
39726: NEG
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 4
39734: NEG
39735: PUSH
39736: LD_INT 2
39738: NEG
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 2
39746: NEG
39747: PUSH
39748: LD_INT 2
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 4
39757: NEG
39758: PUSH
39759: LD_INT 4
39761: NEG
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 4
39769: NEG
39770: PUSH
39771: LD_INT 5
39773: NEG
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 3
39781: NEG
39782: PUSH
39783: LD_INT 4
39785: NEG
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 3
39793: NEG
39794: PUSH
39795: LD_INT 3
39797: NEG
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 4
39805: NEG
39806: PUSH
39807: LD_INT 3
39809: NEG
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: LD_INT 5
39817: NEG
39818: PUSH
39819: LD_INT 4
39821: NEG
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 5
39829: NEG
39830: PUSH
39831: LD_INT 5
39833: NEG
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 3
39841: NEG
39842: PUSH
39843: LD_INT 5
39845: NEG
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 5
39853: NEG
39854: PUSH
39855: LD_INT 3
39857: NEG
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: LIST
39909: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
39910: LD_ADDR_VAR 0 30
39914: PUSH
39915: LD_INT 4
39917: PUSH
39918: LD_INT 4
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 4
39927: PUSH
39928: LD_INT 3
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 5
39937: PUSH
39938: LD_INT 4
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 5
39947: PUSH
39948: LD_INT 5
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 4
39957: PUSH
39958: LD_INT 5
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 3
39967: PUSH
39968: LD_INT 4
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 3
39977: PUSH
39978: LD_INT 3
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 5
39987: PUSH
39988: LD_INT 3
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 3
39997: PUSH
39998: LD_INT 5
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 0
40007: PUSH
40008: LD_INT 3
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 0
40017: PUSH
40018: LD_INT 2
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 1
40027: PUSH
40028: LD_INT 3
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 1
40037: PUSH
40038: LD_INT 4
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 0
40047: PUSH
40048: LD_INT 4
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 1
40057: NEG
40058: PUSH
40059: LD_INT 3
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 1
40068: NEG
40069: PUSH
40070: LD_INT 2
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 2
40079: PUSH
40080: LD_INT 4
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 2
40089: NEG
40090: PUSH
40091: LD_INT 2
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 4
40100: NEG
40101: PUSH
40102: LD_INT 0
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 4
40111: NEG
40112: PUSH
40113: LD_INT 1
40115: NEG
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 3
40123: NEG
40124: PUSH
40125: LD_INT 0
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 3
40134: NEG
40135: PUSH
40136: LD_INT 1
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 4
40145: NEG
40146: PUSH
40147: LD_INT 1
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 5
40156: NEG
40157: PUSH
40158: LD_INT 0
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 5
40167: NEG
40168: PUSH
40169: LD_INT 1
40171: NEG
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 5
40179: NEG
40180: PUSH
40181: LD_INT 2
40183: NEG
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 3
40191: NEG
40192: PUSH
40193: LD_INT 2
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 3
40202: NEG
40203: PUSH
40204: LD_INT 3
40206: NEG
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 3
40214: NEG
40215: PUSH
40216: LD_INT 4
40218: NEG
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 2
40226: NEG
40227: PUSH
40228: LD_INT 3
40230: NEG
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 2
40238: NEG
40239: PUSH
40240: LD_INT 2
40242: NEG
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 3
40250: NEG
40251: PUSH
40252: LD_INT 2
40254: NEG
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 4
40262: NEG
40263: PUSH
40264: LD_INT 3
40266: NEG
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 4
40274: NEG
40275: PUSH
40276: LD_INT 4
40278: NEG
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 2
40286: NEG
40287: PUSH
40288: LD_INT 4
40290: NEG
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 4
40298: NEG
40299: PUSH
40300: LD_INT 2
40302: NEG
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 0
40310: PUSH
40311: LD_INT 4
40313: NEG
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 0
40321: PUSH
40322: LD_INT 5
40324: NEG
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: LD_INT 1
40332: PUSH
40333: LD_INT 4
40335: NEG
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 1
40343: PUSH
40344: LD_INT 3
40346: NEG
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 0
40354: PUSH
40355: LD_INT 3
40357: NEG
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 1
40365: NEG
40366: PUSH
40367: LD_INT 4
40369: NEG
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 1
40377: NEG
40378: PUSH
40379: LD_INT 5
40381: NEG
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 2
40389: PUSH
40390: LD_INT 3
40392: NEG
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 2
40400: NEG
40401: PUSH
40402: LD_INT 5
40404: NEG
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
40457: LD_ADDR_VAR 0 31
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: LD_INT 4
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 0
40474: PUSH
40475: LD_INT 3
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: LD_INT 1
40484: PUSH
40485: LD_INT 4
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 1
40494: PUSH
40495: LD_INT 5
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 0
40504: PUSH
40505: LD_INT 5
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 1
40514: NEG
40515: PUSH
40516: LD_INT 4
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 1
40525: NEG
40526: PUSH
40527: LD_INT 3
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 2
40536: PUSH
40537: LD_INT 5
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 2
40546: NEG
40547: PUSH
40548: LD_INT 3
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 3
40557: NEG
40558: PUSH
40559: LD_INT 0
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 3
40568: NEG
40569: PUSH
40570: LD_INT 1
40572: NEG
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 2
40580: NEG
40581: PUSH
40582: LD_INT 0
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 2
40591: NEG
40592: PUSH
40593: LD_INT 1
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 3
40602: NEG
40603: PUSH
40604: LD_INT 1
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 4
40613: NEG
40614: PUSH
40615: LD_INT 0
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 4
40624: NEG
40625: PUSH
40626: LD_INT 1
40628: NEG
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 4
40636: NEG
40637: PUSH
40638: LD_INT 2
40640: NEG
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 2
40648: NEG
40649: PUSH
40650: LD_INT 2
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 4
40659: NEG
40660: PUSH
40661: LD_INT 4
40663: NEG
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 4
40671: NEG
40672: PUSH
40673: LD_INT 5
40675: NEG
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 3
40683: NEG
40684: PUSH
40685: LD_INT 4
40687: NEG
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 3
40695: NEG
40696: PUSH
40697: LD_INT 3
40699: NEG
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 4
40707: NEG
40708: PUSH
40709: LD_INT 3
40711: NEG
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 5
40719: NEG
40720: PUSH
40721: LD_INT 4
40723: NEG
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 5
40731: NEG
40732: PUSH
40733: LD_INT 5
40735: NEG
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 3
40743: NEG
40744: PUSH
40745: LD_INT 5
40747: NEG
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 5
40755: NEG
40756: PUSH
40757: LD_INT 3
40759: NEG
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 0
40767: PUSH
40768: LD_INT 3
40770: NEG
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 0
40778: PUSH
40779: LD_INT 4
40781: NEG
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 1
40789: PUSH
40790: LD_INT 3
40792: NEG
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 1
40800: PUSH
40801: LD_INT 2
40803: NEG
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 0
40811: PUSH
40812: LD_INT 2
40814: NEG
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 1
40822: NEG
40823: PUSH
40824: LD_INT 3
40826: NEG
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 1
40834: NEG
40835: PUSH
40836: LD_INT 4
40838: NEG
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 2
40846: PUSH
40847: LD_INT 2
40849: NEG
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 2
40857: NEG
40858: PUSH
40859: LD_INT 4
40861: NEG
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 4
40869: PUSH
40870: LD_INT 0
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 4
40879: PUSH
40880: LD_INT 1
40882: NEG
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 5
40890: PUSH
40891: LD_INT 0
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 5
40900: PUSH
40901: LD_INT 1
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 4
40910: PUSH
40911: LD_INT 1
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 3
40920: PUSH
40921: LD_INT 0
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 3
40930: PUSH
40931: LD_INT 1
40933: NEG
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 3
40941: PUSH
40942: LD_INT 2
40944: NEG
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 5
40952: PUSH
40953: LD_INT 2
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
41007: LD_ADDR_VAR 0 32
41011: PUSH
41012: LD_INT 4
41014: NEG
41015: PUSH
41016: LD_INT 0
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 4
41025: NEG
41026: PUSH
41027: LD_INT 1
41029: NEG
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 3
41037: NEG
41038: PUSH
41039: LD_INT 0
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 3
41048: NEG
41049: PUSH
41050: LD_INT 1
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 4
41059: NEG
41060: PUSH
41061: LD_INT 1
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 5
41070: NEG
41071: PUSH
41072: LD_INT 0
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 5
41081: NEG
41082: PUSH
41083: LD_INT 1
41085: NEG
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 5
41093: NEG
41094: PUSH
41095: LD_INT 2
41097: NEG
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 3
41105: NEG
41106: PUSH
41107: LD_INT 2
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 3
41116: NEG
41117: PUSH
41118: LD_INT 3
41120: NEG
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 3
41128: NEG
41129: PUSH
41130: LD_INT 4
41132: NEG
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 2
41140: NEG
41141: PUSH
41142: LD_INT 3
41144: NEG
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 2
41152: NEG
41153: PUSH
41154: LD_INT 2
41156: NEG
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 3
41164: NEG
41165: PUSH
41166: LD_INT 2
41168: NEG
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 4
41176: NEG
41177: PUSH
41178: LD_INT 3
41180: NEG
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 4
41188: NEG
41189: PUSH
41190: LD_INT 4
41192: NEG
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 2
41200: NEG
41201: PUSH
41202: LD_INT 4
41204: NEG
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 4
41212: NEG
41213: PUSH
41214: LD_INT 2
41216: NEG
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 0
41224: PUSH
41225: LD_INT 4
41227: NEG
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 0
41235: PUSH
41236: LD_INT 5
41238: NEG
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 1
41246: PUSH
41247: LD_INT 4
41249: NEG
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 1
41257: PUSH
41258: LD_INT 3
41260: NEG
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 0
41268: PUSH
41269: LD_INT 3
41271: NEG
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 1
41279: NEG
41280: PUSH
41281: LD_INT 4
41283: NEG
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 1
41291: NEG
41292: PUSH
41293: LD_INT 5
41295: NEG
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 2
41303: PUSH
41304: LD_INT 3
41306: NEG
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 2
41314: NEG
41315: PUSH
41316: LD_INT 5
41318: NEG
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 3
41326: PUSH
41327: LD_INT 0
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 3
41336: PUSH
41337: LD_INT 1
41339: NEG
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 4
41347: PUSH
41348: LD_INT 0
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 4
41357: PUSH
41358: LD_INT 1
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 3
41367: PUSH
41368: LD_INT 1
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 2
41377: PUSH
41378: LD_INT 0
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 2
41387: PUSH
41388: LD_INT 1
41390: NEG
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 2
41398: PUSH
41399: LD_INT 2
41401: NEG
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 4
41409: PUSH
41410: LD_INT 2
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 4
41419: PUSH
41420: LD_INT 4
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 4
41429: PUSH
41430: LD_INT 3
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 5
41439: PUSH
41440: LD_INT 4
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 5
41449: PUSH
41450: LD_INT 5
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 4
41459: PUSH
41460: LD_INT 5
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 3
41469: PUSH
41470: LD_INT 4
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 3
41479: PUSH
41480: LD_INT 3
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 5
41489: PUSH
41490: LD_INT 3
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 3
41499: PUSH
41500: LD_INT 5
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
41554: LD_ADDR_VAR 0 33
41558: PUSH
41559: LD_INT 4
41561: NEG
41562: PUSH
41563: LD_INT 4
41565: NEG
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 4
41573: NEG
41574: PUSH
41575: LD_INT 5
41577: NEG
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 3
41585: NEG
41586: PUSH
41587: LD_INT 4
41589: NEG
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 3
41597: NEG
41598: PUSH
41599: LD_INT 3
41601: NEG
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 4
41609: NEG
41610: PUSH
41611: LD_INT 3
41613: NEG
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 5
41621: NEG
41622: PUSH
41623: LD_INT 4
41625: NEG
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 5
41633: NEG
41634: PUSH
41635: LD_INT 5
41637: NEG
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 3
41645: NEG
41646: PUSH
41647: LD_INT 5
41649: NEG
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 5
41657: NEG
41658: PUSH
41659: LD_INT 3
41661: NEG
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 0
41669: PUSH
41670: LD_INT 3
41672: NEG
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 0
41680: PUSH
41681: LD_INT 4
41683: NEG
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 1
41691: PUSH
41692: LD_INT 3
41694: NEG
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 1
41702: PUSH
41703: LD_INT 2
41705: NEG
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 0
41713: PUSH
41714: LD_INT 2
41716: NEG
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 1
41724: NEG
41725: PUSH
41726: LD_INT 3
41728: NEG
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 1
41736: NEG
41737: PUSH
41738: LD_INT 4
41740: NEG
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 2
41748: PUSH
41749: LD_INT 2
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 2
41759: NEG
41760: PUSH
41761: LD_INT 4
41763: NEG
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 4
41771: PUSH
41772: LD_INT 0
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 4
41781: PUSH
41782: LD_INT 1
41784: NEG
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 5
41792: PUSH
41793: LD_INT 0
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 5
41802: PUSH
41803: LD_INT 1
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 4
41812: PUSH
41813: LD_INT 1
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 3
41822: PUSH
41823: LD_INT 0
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 3
41832: PUSH
41833: LD_INT 1
41835: NEG
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 3
41843: PUSH
41844: LD_INT 2
41846: NEG
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 5
41854: PUSH
41855: LD_INT 2
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 3
41864: PUSH
41865: LD_INT 3
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 3
41874: PUSH
41875: LD_INT 2
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 4
41884: PUSH
41885: LD_INT 3
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 4
41894: PUSH
41895: LD_INT 4
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 3
41904: PUSH
41905: LD_INT 4
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 2
41914: PUSH
41915: LD_INT 3
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 2
41924: PUSH
41925: LD_INT 2
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 4
41934: PUSH
41935: LD_INT 2
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 2
41944: PUSH
41945: LD_INT 4
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 0
41954: PUSH
41955: LD_INT 4
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 0
41964: PUSH
41965: LD_INT 3
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 1
41974: PUSH
41975: LD_INT 4
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 1
41984: PUSH
41985: LD_INT 5
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 0
41994: PUSH
41995: LD_INT 5
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 1
42004: NEG
42005: PUSH
42006: LD_INT 4
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 1
42015: NEG
42016: PUSH
42017: LD_INT 3
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 2
42026: PUSH
42027: LD_INT 5
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 2
42036: NEG
42037: PUSH
42038: LD_INT 3
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
42092: LD_ADDR_VAR 0 34
42096: PUSH
42097: LD_INT 0
42099: PUSH
42100: LD_INT 4
42102: NEG
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 0
42110: PUSH
42111: LD_INT 5
42113: NEG
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 1
42121: PUSH
42122: LD_INT 4
42124: NEG
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 1
42132: PUSH
42133: LD_INT 3
42135: NEG
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 0
42143: PUSH
42144: LD_INT 3
42146: NEG
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: LD_INT 1
42154: NEG
42155: PUSH
42156: LD_INT 4
42158: NEG
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 1
42166: NEG
42167: PUSH
42168: LD_INT 5
42170: NEG
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 2
42178: PUSH
42179: LD_INT 3
42181: NEG
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 2
42189: NEG
42190: PUSH
42191: LD_INT 5
42193: NEG
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 3
42201: PUSH
42202: LD_INT 0
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 3
42211: PUSH
42212: LD_INT 1
42214: NEG
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 4
42222: PUSH
42223: LD_INT 0
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 4
42232: PUSH
42233: LD_INT 1
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 3
42242: PUSH
42243: LD_INT 1
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 2
42252: PUSH
42253: LD_INT 0
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 2
42262: PUSH
42263: LD_INT 1
42265: NEG
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 2
42273: PUSH
42274: LD_INT 2
42276: NEG
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 4
42284: PUSH
42285: LD_INT 2
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 4
42294: PUSH
42295: LD_INT 4
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 4
42304: PUSH
42305: LD_INT 3
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 5
42314: PUSH
42315: LD_INT 4
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 5
42324: PUSH
42325: LD_INT 5
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 4
42334: PUSH
42335: LD_INT 5
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 3
42344: PUSH
42345: LD_INT 4
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 3
42354: PUSH
42355: LD_INT 3
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 5
42364: PUSH
42365: LD_INT 3
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 3
42374: PUSH
42375: LD_INT 5
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 0
42384: PUSH
42385: LD_INT 3
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 0
42394: PUSH
42395: LD_INT 2
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 1
42404: PUSH
42405: LD_INT 3
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 1
42414: PUSH
42415: LD_INT 4
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 0
42424: PUSH
42425: LD_INT 4
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 1
42434: NEG
42435: PUSH
42436: LD_INT 3
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 1
42445: NEG
42446: PUSH
42447: LD_INT 2
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 2
42456: PUSH
42457: LD_INT 4
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 2
42466: NEG
42467: PUSH
42468: LD_INT 2
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 4
42477: NEG
42478: PUSH
42479: LD_INT 0
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 4
42488: NEG
42489: PUSH
42490: LD_INT 1
42492: NEG
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 3
42500: NEG
42501: PUSH
42502: LD_INT 0
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 3
42511: NEG
42512: PUSH
42513: LD_INT 1
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 4
42522: NEG
42523: PUSH
42524: LD_INT 1
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 5
42533: NEG
42534: PUSH
42535: LD_INT 0
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 5
42544: NEG
42545: PUSH
42546: LD_INT 1
42548: NEG
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 5
42556: NEG
42557: PUSH
42558: LD_INT 2
42560: NEG
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 3
42568: NEG
42569: PUSH
42570: LD_INT 2
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: ST_TO_ADDR
// end ; end ;
42624: GO 42627
42626: POP
// case btype of b_depot , b_warehouse :
42627: LD_VAR 0 1
42631: PUSH
42632: LD_INT 0
42634: DOUBLE
42635: EQUAL
42636: IFTRUE 42646
42638: LD_INT 1
42640: DOUBLE
42641: EQUAL
42642: IFTRUE 42646
42644: GO 42847
42646: POP
// case nation of nation_american :
42647: LD_VAR 0 5
42651: PUSH
42652: LD_INT 1
42654: DOUBLE
42655: EQUAL
42656: IFTRUE 42660
42658: GO 42716
42660: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
42661: LD_ADDR_VAR 0 9
42665: PUSH
42666: LD_VAR 0 11
42670: PUSH
42671: LD_VAR 0 12
42675: PUSH
42676: LD_VAR 0 13
42680: PUSH
42681: LD_VAR 0 14
42685: PUSH
42686: LD_VAR 0 15
42690: PUSH
42691: LD_VAR 0 16
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: PUSH
42704: LD_VAR 0 4
42708: PUSH
42709: LD_INT 1
42711: PLUS
42712: ARRAY
42713: ST_TO_ADDR
42714: GO 42845
42716: LD_INT 2
42718: DOUBLE
42719: EQUAL
42720: IFTRUE 42724
42722: GO 42780
42724: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
42725: LD_ADDR_VAR 0 9
42729: PUSH
42730: LD_VAR 0 17
42734: PUSH
42735: LD_VAR 0 18
42739: PUSH
42740: LD_VAR 0 19
42744: PUSH
42745: LD_VAR 0 20
42749: PUSH
42750: LD_VAR 0 21
42754: PUSH
42755: LD_VAR 0 22
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: PUSH
42768: LD_VAR 0 4
42772: PUSH
42773: LD_INT 1
42775: PLUS
42776: ARRAY
42777: ST_TO_ADDR
42778: GO 42845
42780: LD_INT 3
42782: DOUBLE
42783: EQUAL
42784: IFTRUE 42788
42786: GO 42844
42788: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
42789: LD_ADDR_VAR 0 9
42793: PUSH
42794: LD_VAR 0 23
42798: PUSH
42799: LD_VAR 0 24
42803: PUSH
42804: LD_VAR 0 25
42808: PUSH
42809: LD_VAR 0 26
42813: PUSH
42814: LD_VAR 0 27
42818: PUSH
42819: LD_VAR 0 28
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: PUSH
42832: LD_VAR 0 4
42836: PUSH
42837: LD_INT 1
42839: PLUS
42840: ARRAY
42841: ST_TO_ADDR
42842: GO 42845
42844: POP
42845: GO 43394
42847: LD_INT 2
42849: DOUBLE
42850: EQUAL
42851: IFTRUE 42861
42853: LD_INT 3
42855: DOUBLE
42856: EQUAL
42857: IFTRUE 42861
42859: GO 42917
42861: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
42862: LD_ADDR_VAR 0 9
42866: PUSH
42867: LD_VAR 0 29
42871: PUSH
42872: LD_VAR 0 30
42876: PUSH
42877: LD_VAR 0 31
42881: PUSH
42882: LD_VAR 0 32
42886: PUSH
42887: LD_VAR 0 33
42891: PUSH
42892: LD_VAR 0 34
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: PUSH
42905: LD_VAR 0 4
42909: PUSH
42910: LD_INT 1
42912: PLUS
42913: ARRAY
42914: ST_TO_ADDR
42915: GO 43394
42917: LD_INT 16
42919: DOUBLE
42920: EQUAL
42921: IFTRUE 42973
42923: LD_INT 17
42925: DOUBLE
42926: EQUAL
42927: IFTRUE 42973
42929: LD_INT 18
42931: DOUBLE
42932: EQUAL
42933: IFTRUE 42973
42935: LD_INT 19
42937: DOUBLE
42938: EQUAL
42939: IFTRUE 42973
42941: LD_INT 20
42943: DOUBLE
42944: EQUAL
42945: IFTRUE 42973
42947: LD_INT 21
42949: DOUBLE
42950: EQUAL
42951: IFTRUE 42973
42953: LD_INT 23
42955: DOUBLE
42956: EQUAL
42957: IFTRUE 42973
42959: LD_INT 24
42961: DOUBLE
42962: EQUAL
42963: IFTRUE 42973
42965: LD_INT 25
42967: DOUBLE
42968: EQUAL
42969: IFTRUE 42973
42971: GO 43029
42973: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
42974: LD_ADDR_VAR 0 9
42978: PUSH
42979: LD_VAR 0 35
42983: PUSH
42984: LD_VAR 0 36
42988: PUSH
42989: LD_VAR 0 37
42993: PUSH
42994: LD_VAR 0 38
42998: PUSH
42999: LD_VAR 0 39
43003: PUSH
43004: LD_VAR 0 40
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: PUSH
43017: LD_VAR 0 4
43021: PUSH
43022: LD_INT 1
43024: PLUS
43025: ARRAY
43026: ST_TO_ADDR
43027: GO 43394
43029: LD_INT 6
43031: DOUBLE
43032: EQUAL
43033: IFTRUE 43085
43035: LD_INT 7
43037: DOUBLE
43038: EQUAL
43039: IFTRUE 43085
43041: LD_INT 8
43043: DOUBLE
43044: EQUAL
43045: IFTRUE 43085
43047: LD_INT 13
43049: DOUBLE
43050: EQUAL
43051: IFTRUE 43085
43053: LD_INT 12
43055: DOUBLE
43056: EQUAL
43057: IFTRUE 43085
43059: LD_INT 15
43061: DOUBLE
43062: EQUAL
43063: IFTRUE 43085
43065: LD_INT 11
43067: DOUBLE
43068: EQUAL
43069: IFTRUE 43085
43071: LD_INT 14
43073: DOUBLE
43074: EQUAL
43075: IFTRUE 43085
43077: LD_INT 10
43079: DOUBLE
43080: EQUAL
43081: IFTRUE 43085
43083: GO 43141
43085: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
43086: LD_ADDR_VAR 0 9
43090: PUSH
43091: LD_VAR 0 41
43095: PUSH
43096: LD_VAR 0 42
43100: PUSH
43101: LD_VAR 0 43
43105: PUSH
43106: LD_VAR 0 44
43110: PUSH
43111: LD_VAR 0 45
43115: PUSH
43116: LD_VAR 0 46
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: PUSH
43129: LD_VAR 0 4
43133: PUSH
43134: LD_INT 1
43136: PLUS
43137: ARRAY
43138: ST_TO_ADDR
43139: GO 43394
43141: LD_INT 36
43143: DOUBLE
43144: EQUAL
43145: IFTRUE 43149
43147: GO 43205
43149: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
43150: LD_ADDR_VAR 0 9
43154: PUSH
43155: LD_VAR 0 47
43159: PUSH
43160: LD_VAR 0 48
43164: PUSH
43165: LD_VAR 0 49
43169: PUSH
43170: LD_VAR 0 50
43174: PUSH
43175: LD_VAR 0 51
43179: PUSH
43180: LD_VAR 0 52
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: PUSH
43193: LD_VAR 0 4
43197: PUSH
43198: LD_INT 1
43200: PLUS
43201: ARRAY
43202: ST_TO_ADDR
43203: GO 43394
43205: LD_INT 4
43207: DOUBLE
43208: EQUAL
43209: IFTRUE 43231
43211: LD_INT 5
43213: DOUBLE
43214: EQUAL
43215: IFTRUE 43231
43217: LD_INT 34
43219: DOUBLE
43220: EQUAL
43221: IFTRUE 43231
43223: LD_INT 37
43225: DOUBLE
43226: EQUAL
43227: IFTRUE 43231
43229: GO 43287
43231: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
43232: LD_ADDR_VAR 0 9
43236: PUSH
43237: LD_VAR 0 53
43241: PUSH
43242: LD_VAR 0 54
43246: PUSH
43247: LD_VAR 0 55
43251: PUSH
43252: LD_VAR 0 56
43256: PUSH
43257: LD_VAR 0 57
43261: PUSH
43262: LD_VAR 0 58
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: PUSH
43275: LD_VAR 0 4
43279: PUSH
43280: LD_INT 1
43282: PLUS
43283: ARRAY
43284: ST_TO_ADDR
43285: GO 43394
43287: LD_INT 31
43289: DOUBLE
43290: EQUAL
43291: IFTRUE 43337
43293: LD_INT 32
43295: DOUBLE
43296: EQUAL
43297: IFTRUE 43337
43299: LD_INT 33
43301: DOUBLE
43302: EQUAL
43303: IFTRUE 43337
43305: LD_INT 27
43307: DOUBLE
43308: EQUAL
43309: IFTRUE 43337
43311: LD_INT 26
43313: DOUBLE
43314: EQUAL
43315: IFTRUE 43337
43317: LD_INT 28
43319: DOUBLE
43320: EQUAL
43321: IFTRUE 43337
43323: LD_INT 29
43325: DOUBLE
43326: EQUAL
43327: IFTRUE 43337
43329: LD_INT 30
43331: DOUBLE
43332: EQUAL
43333: IFTRUE 43337
43335: GO 43393
43337: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
43338: LD_ADDR_VAR 0 9
43342: PUSH
43343: LD_VAR 0 59
43347: PUSH
43348: LD_VAR 0 60
43352: PUSH
43353: LD_VAR 0 61
43357: PUSH
43358: LD_VAR 0 62
43362: PUSH
43363: LD_VAR 0 63
43367: PUSH
43368: LD_VAR 0 64
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: PUSH
43381: LD_VAR 0 4
43385: PUSH
43386: LD_INT 1
43388: PLUS
43389: ARRAY
43390: ST_TO_ADDR
43391: GO 43394
43393: POP
// temp_list2 = [ ] ;
43394: LD_ADDR_VAR 0 10
43398: PUSH
43399: EMPTY
43400: ST_TO_ADDR
// for i in temp_list do
43401: LD_ADDR_VAR 0 8
43405: PUSH
43406: LD_VAR 0 9
43410: PUSH
43411: FOR_IN
43412: IFFALSE 43464
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
43414: LD_ADDR_VAR 0 10
43418: PUSH
43419: LD_VAR 0 10
43423: PUSH
43424: LD_VAR 0 8
43428: PUSH
43429: LD_INT 1
43431: ARRAY
43432: PUSH
43433: LD_VAR 0 2
43437: PLUS
43438: PUSH
43439: LD_VAR 0 8
43443: PUSH
43444: LD_INT 2
43446: ARRAY
43447: PUSH
43448: LD_VAR 0 3
43452: PLUS
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: EMPTY
43459: LIST
43460: ADD
43461: ST_TO_ADDR
43462: GO 43411
43464: POP
43465: POP
// result = temp_list2 ;
43466: LD_ADDR_VAR 0 7
43470: PUSH
43471: LD_VAR 0 10
43475: ST_TO_ADDR
// end ;
43476: LD_VAR 0 7
43480: RET
// export function EnemyInRange ( unit , dist ) ; begin
43481: LD_INT 0
43483: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
43484: LD_ADDR_VAR 0 3
43488: PUSH
43489: LD_VAR 0 1
43493: PPUSH
43494: CALL_OW 255
43498: PPUSH
43499: LD_VAR 0 1
43503: PPUSH
43504: CALL_OW 250
43508: PPUSH
43509: LD_VAR 0 1
43513: PPUSH
43514: CALL_OW 251
43518: PPUSH
43519: LD_VAR 0 2
43523: PPUSH
43524: CALL 17609 0 4
43528: PUSH
43529: LD_INT 4
43531: ARRAY
43532: ST_TO_ADDR
// end ;
43533: LD_VAR 0 3
43537: RET
// export function PlayerSeeMe ( unit ) ; begin
43538: LD_INT 0
43540: PPUSH
// result := See ( your_side , unit ) ;
43541: LD_ADDR_VAR 0 2
43545: PUSH
43546: LD_OWVAR 2
43550: PPUSH
43551: LD_VAR 0 1
43555: PPUSH
43556: CALL_OW 292
43560: ST_TO_ADDR
// end ;
43561: LD_VAR 0 2
43565: RET
// export function ReverseDir ( unit ) ; begin
43566: LD_INT 0
43568: PPUSH
// if not unit then
43569: LD_VAR 0 1
43573: NOT
43574: IFFALSE 43578
// exit ;
43576: GO 43624
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
43578: LD_ADDR_VAR 0 2
43582: PUSH
43583: LD_INT 3
43585: PUSH
43586: LD_INT 4
43588: PUSH
43589: LD_INT 5
43591: PUSH
43592: LD_INT 0
43594: PUSH
43595: LD_INT 1
43597: PUSH
43598: LD_INT 2
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: PUSH
43609: LD_VAR 0 1
43613: PPUSH
43614: CALL_OW 254
43618: PUSH
43619: LD_INT 1
43621: PLUS
43622: ARRAY
43623: ST_TO_ADDR
// end ;
43624: LD_VAR 0 2
43628: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
43629: LD_INT 0
43631: PPUSH
43632: PPUSH
43633: PPUSH
43634: PPUSH
43635: PPUSH
// if not hexes then
43636: LD_VAR 0 2
43640: NOT
43641: IFFALSE 43645
// exit ;
43643: GO 43793
// dist := 9999 ;
43645: LD_ADDR_VAR 0 5
43649: PUSH
43650: LD_INT 9999
43652: ST_TO_ADDR
// for i = 1 to hexes do
43653: LD_ADDR_VAR 0 4
43657: PUSH
43658: DOUBLE
43659: LD_INT 1
43661: DEC
43662: ST_TO_ADDR
43663: LD_VAR 0 2
43667: PUSH
43668: FOR_TO
43669: IFFALSE 43781
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
43671: LD_VAR 0 1
43675: PPUSH
43676: LD_VAR 0 2
43680: PUSH
43681: LD_VAR 0 4
43685: ARRAY
43686: PUSH
43687: LD_INT 1
43689: ARRAY
43690: PPUSH
43691: LD_VAR 0 2
43695: PUSH
43696: LD_VAR 0 4
43700: ARRAY
43701: PUSH
43702: LD_INT 2
43704: ARRAY
43705: PPUSH
43706: CALL_OW 297
43710: PUSH
43711: LD_VAR 0 5
43715: LESS
43716: IFFALSE 43779
// begin hex := hexes [ i ] ;
43718: LD_ADDR_VAR 0 7
43722: PUSH
43723: LD_VAR 0 2
43727: PUSH
43728: LD_VAR 0 4
43732: ARRAY
43733: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43734: LD_ADDR_VAR 0 5
43738: PUSH
43739: LD_VAR 0 1
43743: PPUSH
43744: LD_VAR 0 2
43748: PUSH
43749: LD_VAR 0 4
43753: ARRAY
43754: PUSH
43755: LD_INT 1
43757: ARRAY
43758: PPUSH
43759: LD_VAR 0 2
43763: PUSH
43764: LD_VAR 0 4
43768: ARRAY
43769: PUSH
43770: LD_INT 2
43772: ARRAY
43773: PPUSH
43774: CALL_OW 297
43778: ST_TO_ADDR
// end ; end ;
43779: GO 43668
43781: POP
43782: POP
// result := hex ;
43783: LD_ADDR_VAR 0 3
43787: PUSH
43788: LD_VAR 0 7
43792: ST_TO_ADDR
// end ;
43793: LD_VAR 0 3
43797: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
43798: LD_INT 0
43800: PPUSH
43801: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
43802: LD_VAR 0 1
43806: NOT
43807: PUSH
43808: LD_VAR 0 1
43812: PUSH
43813: LD_INT 21
43815: PUSH
43816: LD_INT 2
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 23
43825: PUSH
43826: LD_INT 2
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PPUSH
43837: CALL_OW 69
43841: IN
43842: NOT
43843: OR
43844: IFFALSE 43848
// exit ;
43846: GO 43895
// for i = 1 to 3 do
43848: LD_ADDR_VAR 0 3
43852: PUSH
43853: DOUBLE
43854: LD_INT 1
43856: DEC
43857: ST_TO_ADDR
43858: LD_INT 3
43860: PUSH
43861: FOR_TO
43862: IFFALSE 43893
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
43864: LD_VAR 0 1
43868: PPUSH
43869: CALL_OW 250
43873: PPUSH
43874: LD_VAR 0 1
43878: PPUSH
43879: CALL_OW 251
43883: PPUSH
43884: LD_INT 1
43886: PPUSH
43887: CALL_OW 453
43891: GO 43861
43893: POP
43894: POP
// end ;
43895: LD_VAR 0 2
43899: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
43900: LD_INT 0
43902: PPUSH
43903: PPUSH
43904: PPUSH
43905: PPUSH
43906: PPUSH
43907: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
43908: LD_VAR 0 1
43912: NOT
43913: PUSH
43914: LD_VAR 0 2
43918: NOT
43919: OR
43920: PUSH
43921: LD_VAR 0 1
43925: PPUSH
43926: CALL_OW 314
43930: OR
43931: IFFALSE 43935
// exit ;
43933: GO 44376
// x := GetX ( enemy_unit ) ;
43935: LD_ADDR_VAR 0 7
43939: PUSH
43940: LD_VAR 0 2
43944: PPUSH
43945: CALL_OW 250
43949: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
43950: LD_ADDR_VAR 0 8
43954: PUSH
43955: LD_VAR 0 2
43959: PPUSH
43960: CALL_OW 251
43964: ST_TO_ADDR
// if not x or not y then
43965: LD_VAR 0 7
43969: NOT
43970: PUSH
43971: LD_VAR 0 8
43975: NOT
43976: OR
43977: IFFALSE 43981
// exit ;
43979: GO 44376
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
43981: LD_ADDR_VAR 0 6
43985: PUSH
43986: LD_VAR 0 7
43990: PPUSH
43991: LD_INT 0
43993: PPUSH
43994: LD_INT 4
43996: PPUSH
43997: CALL_OW 272
44001: PUSH
44002: LD_VAR 0 8
44006: PPUSH
44007: LD_INT 0
44009: PPUSH
44010: LD_INT 4
44012: PPUSH
44013: CALL_OW 273
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_VAR 0 7
44026: PPUSH
44027: LD_INT 1
44029: PPUSH
44030: LD_INT 4
44032: PPUSH
44033: CALL_OW 272
44037: PUSH
44038: LD_VAR 0 8
44042: PPUSH
44043: LD_INT 1
44045: PPUSH
44046: LD_INT 4
44048: PPUSH
44049: CALL_OW 273
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_VAR 0 7
44062: PPUSH
44063: LD_INT 2
44065: PPUSH
44066: LD_INT 4
44068: PPUSH
44069: CALL_OW 272
44073: PUSH
44074: LD_VAR 0 8
44078: PPUSH
44079: LD_INT 2
44081: PPUSH
44082: LD_INT 4
44084: PPUSH
44085: CALL_OW 273
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_VAR 0 7
44098: PPUSH
44099: LD_INT 3
44101: PPUSH
44102: LD_INT 4
44104: PPUSH
44105: CALL_OW 272
44109: PUSH
44110: LD_VAR 0 8
44114: PPUSH
44115: LD_INT 3
44117: PPUSH
44118: LD_INT 4
44120: PPUSH
44121: CALL_OW 273
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_VAR 0 7
44134: PPUSH
44135: LD_INT 4
44137: PPUSH
44138: LD_INT 4
44140: PPUSH
44141: CALL_OW 272
44145: PUSH
44146: LD_VAR 0 8
44150: PPUSH
44151: LD_INT 4
44153: PPUSH
44154: LD_INT 4
44156: PPUSH
44157: CALL_OW 273
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_VAR 0 7
44170: PPUSH
44171: LD_INT 5
44173: PPUSH
44174: LD_INT 4
44176: PPUSH
44177: CALL_OW 272
44181: PUSH
44182: LD_VAR 0 8
44186: PPUSH
44187: LD_INT 5
44189: PPUSH
44190: LD_INT 4
44192: PPUSH
44193: CALL_OW 273
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: ST_TO_ADDR
// for i = tmp downto 1 do
44210: LD_ADDR_VAR 0 4
44214: PUSH
44215: DOUBLE
44216: LD_VAR 0 6
44220: INC
44221: ST_TO_ADDR
44222: LD_INT 1
44224: PUSH
44225: FOR_DOWNTO
44226: IFFALSE 44327
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
44228: LD_VAR 0 6
44232: PUSH
44233: LD_VAR 0 4
44237: ARRAY
44238: PUSH
44239: LD_INT 1
44241: ARRAY
44242: PPUSH
44243: LD_VAR 0 6
44247: PUSH
44248: LD_VAR 0 4
44252: ARRAY
44253: PUSH
44254: LD_INT 2
44256: ARRAY
44257: PPUSH
44258: CALL_OW 488
44262: NOT
44263: PUSH
44264: LD_VAR 0 6
44268: PUSH
44269: LD_VAR 0 4
44273: ARRAY
44274: PUSH
44275: LD_INT 1
44277: ARRAY
44278: PPUSH
44279: LD_VAR 0 6
44283: PUSH
44284: LD_VAR 0 4
44288: ARRAY
44289: PUSH
44290: LD_INT 2
44292: ARRAY
44293: PPUSH
44294: CALL_OW 428
44298: PUSH
44299: LD_INT 0
44301: NONEQUAL
44302: OR
44303: IFFALSE 44325
// tmp := Delete ( tmp , i ) ;
44305: LD_ADDR_VAR 0 6
44309: PUSH
44310: LD_VAR 0 6
44314: PPUSH
44315: LD_VAR 0 4
44319: PPUSH
44320: CALL_OW 3
44324: ST_TO_ADDR
44325: GO 44225
44327: POP
44328: POP
// j := GetClosestHex ( unit , tmp ) ;
44329: LD_ADDR_VAR 0 5
44333: PUSH
44334: LD_VAR 0 1
44338: PPUSH
44339: LD_VAR 0 6
44343: PPUSH
44344: CALL 43629 0 2
44348: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
44349: LD_VAR 0 1
44353: PPUSH
44354: LD_VAR 0 5
44358: PUSH
44359: LD_INT 1
44361: ARRAY
44362: PPUSH
44363: LD_VAR 0 5
44367: PUSH
44368: LD_INT 2
44370: ARRAY
44371: PPUSH
44372: CALL_OW 111
// end ;
44376: LD_VAR 0 3
44380: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
44381: LD_INT 0
44383: PPUSH
44384: PPUSH
44385: PPUSH
// uc_side = 0 ;
44386: LD_ADDR_OWVAR 20
44390: PUSH
44391: LD_INT 0
44393: ST_TO_ADDR
// uc_nation = 0 ;
44394: LD_ADDR_OWVAR 21
44398: PUSH
44399: LD_INT 0
44401: ST_TO_ADDR
// InitHc ;
44402: CALL_OW 19
// InitVc ;
44406: CALL_OW 20
// if mastodonts then
44410: LD_VAR 0 6
44414: IFFALSE 44481
// for i = 1 to mastodonts do
44416: LD_ADDR_VAR 0 11
44420: PUSH
44421: DOUBLE
44422: LD_INT 1
44424: DEC
44425: ST_TO_ADDR
44426: LD_VAR 0 6
44430: PUSH
44431: FOR_TO
44432: IFFALSE 44479
// begin vc_chassis := 31 ;
44434: LD_ADDR_OWVAR 37
44438: PUSH
44439: LD_INT 31
44441: ST_TO_ADDR
// vc_control := control_rider ;
44442: LD_ADDR_OWVAR 38
44446: PUSH
44447: LD_INT 4
44449: ST_TO_ADDR
// animal := CreateVehicle ;
44450: LD_ADDR_VAR 0 12
44454: PUSH
44455: CALL_OW 45
44459: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44460: LD_VAR 0 12
44464: PPUSH
44465: LD_VAR 0 8
44469: PPUSH
44470: LD_INT 0
44472: PPUSH
44473: CALL 51226 0 3
// end ;
44477: GO 44431
44479: POP
44480: POP
// if horses then
44481: LD_VAR 0 5
44485: IFFALSE 44552
// for i = 1 to horses do
44487: LD_ADDR_VAR 0 11
44491: PUSH
44492: DOUBLE
44493: LD_INT 1
44495: DEC
44496: ST_TO_ADDR
44497: LD_VAR 0 5
44501: PUSH
44502: FOR_TO
44503: IFFALSE 44550
// begin hc_class := 21 ;
44505: LD_ADDR_OWVAR 28
44509: PUSH
44510: LD_INT 21
44512: ST_TO_ADDR
// hc_gallery :=  ;
44513: LD_ADDR_OWVAR 33
44517: PUSH
44518: LD_STRING 
44520: ST_TO_ADDR
// animal := CreateHuman ;
44521: LD_ADDR_VAR 0 12
44525: PUSH
44526: CALL_OW 44
44530: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44531: LD_VAR 0 12
44535: PPUSH
44536: LD_VAR 0 8
44540: PPUSH
44541: LD_INT 0
44543: PPUSH
44544: CALL 51226 0 3
// end ;
44548: GO 44502
44550: POP
44551: POP
// if birds then
44552: LD_VAR 0 1
44556: IFFALSE 44623
// for i = 1 to birds do
44558: LD_ADDR_VAR 0 11
44562: PUSH
44563: DOUBLE
44564: LD_INT 1
44566: DEC
44567: ST_TO_ADDR
44568: LD_VAR 0 1
44572: PUSH
44573: FOR_TO
44574: IFFALSE 44621
// begin hc_class = 18 ;
44576: LD_ADDR_OWVAR 28
44580: PUSH
44581: LD_INT 18
44583: ST_TO_ADDR
// hc_gallery =  ;
44584: LD_ADDR_OWVAR 33
44588: PUSH
44589: LD_STRING 
44591: ST_TO_ADDR
// animal := CreateHuman ;
44592: LD_ADDR_VAR 0 12
44596: PUSH
44597: CALL_OW 44
44601: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44602: LD_VAR 0 12
44606: PPUSH
44607: LD_VAR 0 8
44611: PPUSH
44612: LD_INT 0
44614: PPUSH
44615: CALL 51226 0 3
// end ;
44619: GO 44573
44621: POP
44622: POP
// if tigers then
44623: LD_VAR 0 2
44627: IFFALSE 44711
// for i = 1 to tigers do
44629: LD_ADDR_VAR 0 11
44633: PUSH
44634: DOUBLE
44635: LD_INT 1
44637: DEC
44638: ST_TO_ADDR
44639: LD_VAR 0 2
44643: PUSH
44644: FOR_TO
44645: IFFALSE 44709
// begin hc_class = class_tiger ;
44647: LD_ADDR_OWVAR 28
44651: PUSH
44652: LD_INT 14
44654: ST_TO_ADDR
// hc_gallery =  ;
44655: LD_ADDR_OWVAR 33
44659: PUSH
44660: LD_STRING 
44662: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
44663: LD_ADDR_OWVAR 35
44667: PUSH
44668: LD_INT 7
44670: NEG
44671: PPUSH
44672: LD_INT 7
44674: PPUSH
44675: CALL_OW 12
44679: ST_TO_ADDR
// animal := CreateHuman ;
44680: LD_ADDR_VAR 0 12
44684: PUSH
44685: CALL_OW 44
44689: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44690: LD_VAR 0 12
44694: PPUSH
44695: LD_VAR 0 8
44699: PPUSH
44700: LD_INT 0
44702: PPUSH
44703: CALL 51226 0 3
// end ;
44707: GO 44644
44709: POP
44710: POP
// if apemans then
44711: LD_VAR 0 3
44715: IFFALSE 44838
// for i = 1 to apemans do
44717: LD_ADDR_VAR 0 11
44721: PUSH
44722: DOUBLE
44723: LD_INT 1
44725: DEC
44726: ST_TO_ADDR
44727: LD_VAR 0 3
44731: PUSH
44732: FOR_TO
44733: IFFALSE 44836
// begin hc_class = class_apeman ;
44735: LD_ADDR_OWVAR 28
44739: PUSH
44740: LD_INT 12
44742: ST_TO_ADDR
// hc_gallery =  ;
44743: LD_ADDR_OWVAR 33
44747: PUSH
44748: LD_STRING 
44750: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
44751: LD_ADDR_OWVAR 35
44755: PUSH
44756: LD_INT 5
44758: NEG
44759: PPUSH
44760: LD_INT 5
44762: PPUSH
44763: CALL_OW 12
44767: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
44768: LD_ADDR_OWVAR 31
44772: PUSH
44773: LD_INT 1
44775: PPUSH
44776: LD_INT 3
44778: PPUSH
44779: CALL_OW 12
44783: PUSH
44784: LD_INT 1
44786: PPUSH
44787: LD_INT 3
44789: PPUSH
44790: CALL_OW 12
44794: PUSH
44795: LD_INT 0
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: ST_TO_ADDR
// animal := CreateHuman ;
44807: LD_ADDR_VAR 0 12
44811: PUSH
44812: CALL_OW 44
44816: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44817: LD_VAR 0 12
44821: PPUSH
44822: LD_VAR 0 8
44826: PPUSH
44827: LD_INT 0
44829: PPUSH
44830: CALL 51226 0 3
// end ;
44834: GO 44732
44836: POP
44837: POP
// if enchidnas then
44838: LD_VAR 0 4
44842: IFFALSE 44909
// for i = 1 to enchidnas do
44844: LD_ADDR_VAR 0 11
44848: PUSH
44849: DOUBLE
44850: LD_INT 1
44852: DEC
44853: ST_TO_ADDR
44854: LD_VAR 0 4
44858: PUSH
44859: FOR_TO
44860: IFFALSE 44907
// begin hc_class = 13 ;
44862: LD_ADDR_OWVAR 28
44866: PUSH
44867: LD_INT 13
44869: ST_TO_ADDR
// hc_gallery =  ;
44870: LD_ADDR_OWVAR 33
44874: PUSH
44875: LD_STRING 
44877: ST_TO_ADDR
// animal := CreateHuman ;
44878: LD_ADDR_VAR 0 12
44882: PUSH
44883: CALL_OW 44
44887: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44888: LD_VAR 0 12
44892: PPUSH
44893: LD_VAR 0 8
44897: PPUSH
44898: LD_INT 0
44900: PPUSH
44901: CALL 51226 0 3
// end ;
44905: GO 44859
44907: POP
44908: POP
// if fishes then
44909: LD_VAR 0 7
44913: IFFALSE 44980
// for i = 1 to fishes do
44915: LD_ADDR_VAR 0 11
44919: PUSH
44920: DOUBLE
44921: LD_INT 1
44923: DEC
44924: ST_TO_ADDR
44925: LD_VAR 0 7
44929: PUSH
44930: FOR_TO
44931: IFFALSE 44978
// begin hc_class = 20 ;
44933: LD_ADDR_OWVAR 28
44937: PUSH
44938: LD_INT 20
44940: ST_TO_ADDR
// hc_gallery =  ;
44941: LD_ADDR_OWVAR 33
44945: PUSH
44946: LD_STRING 
44948: ST_TO_ADDR
// animal := CreateHuman ;
44949: LD_ADDR_VAR 0 12
44953: PUSH
44954: CALL_OW 44
44958: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
44959: LD_VAR 0 12
44963: PPUSH
44964: LD_VAR 0 9
44968: PPUSH
44969: LD_INT 0
44971: PPUSH
44972: CALL 51226 0 3
// end ;
44976: GO 44930
44978: POP
44979: POP
// end ;
44980: LD_VAR 0 10
44984: RET
// export function WantHeal ( sci , unit ) ; begin
44985: LD_INT 0
44987: PPUSH
// if GetTaskList ( sci ) > 0 then
44988: LD_VAR 0 1
44992: PPUSH
44993: CALL_OW 437
44997: PUSH
44998: LD_INT 0
45000: GREATER
45001: IFFALSE 45071
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45003: LD_VAR 0 1
45007: PPUSH
45008: CALL_OW 437
45012: PUSH
45013: LD_INT 1
45015: ARRAY
45016: PUSH
45017: LD_INT 1
45019: ARRAY
45020: PUSH
45021: LD_STRING l
45023: EQUAL
45024: PUSH
45025: LD_VAR 0 1
45029: PPUSH
45030: CALL_OW 437
45034: PUSH
45035: LD_INT 1
45037: ARRAY
45038: PUSH
45039: LD_INT 4
45041: ARRAY
45042: PUSH
45043: LD_VAR 0 2
45047: EQUAL
45048: AND
45049: IFFALSE 45061
// result := true else
45051: LD_ADDR_VAR 0 3
45055: PUSH
45056: LD_INT 1
45058: ST_TO_ADDR
45059: GO 45069
// result := false ;
45061: LD_ADDR_VAR 0 3
45065: PUSH
45066: LD_INT 0
45068: ST_TO_ADDR
// end else
45069: GO 45079
// result := false ;
45071: LD_ADDR_VAR 0 3
45075: PUSH
45076: LD_INT 0
45078: ST_TO_ADDR
// end ;
45079: LD_VAR 0 3
45083: RET
// export function HealTarget ( sci ) ; begin
45084: LD_INT 0
45086: PPUSH
// if not sci then
45087: LD_VAR 0 1
45091: NOT
45092: IFFALSE 45096
// exit ;
45094: GO 45161
// result := 0 ;
45096: LD_ADDR_VAR 0 2
45100: PUSH
45101: LD_INT 0
45103: ST_TO_ADDR
// if GetTaskList ( sci ) then
45104: LD_VAR 0 1
45108: PPUSH
45109: CALL_OW 437
45113: IFFALSE 45161
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45115: LD_VAR 0 1
45119: PPUSH
45120: CALL_OW 437
45124: PUSH
45125: LD_INT 1
45127: ARRAY
45128: PUSH
45129: LD_INT 1
45131: ARRAY
45132: PUSH
45133: LD_STRING l
45135: EQUAL
45136: IFFALSE 45161
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45138: LD_ADDR_VAR 0 2
45142: PUSH
45143: LD_VAR 0 1
45147: PPUSH
45148: CALL_OW 437
45152: PUSH
45153: LD_INT 1
45155: ARRAY
45156: PUSH
45157: LD_INT 4
45159: ARRAY
45160: ST_TO_ADDR
// end ;
45161: LD_VAR 0 2
45165: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
45166: LD_INT 0
45168: PPUSH
45169: PPUSH
45170: PPUSH
45171: PPUSH
45172: PPUSH
45173: PPUSH
45174: PPUSH
45175: PPUSH
45176: PPUSH
45177: PPUSH
45178: PPUSH
45179: PPUSH
45180: PPUSH
45181: PPUSH
45182: PPUSH
45183: PPUSH
45184: PPUSH
45185: PPUSH
45186: PPUSH
45187: PPUSH
45188: PPUSH
45189: PPUSH
45190: PPUSH
45191: PPUSH
45192: PPUSH
45193: PPUSH
45194: PPUSH
45195: PPUSH
45196: PPUSH
45197: PPUSH
45198: PPUSH
45199: PPUSH
45200: PPUSH
45201: PPUSH
// if not list then
45202: LD_VAR 0 1
45206: NOT
45207: IFFALSE 45211
// exit ;
45209: GO 49837
// base := list [ 1 ] ;
45211: LD_ADDR_VAR 0 3
45215: PUSH
45216: LD_VAR 0 1
45220: PUSH
45221: LD_INT 1
45223: ARRAY
45224: ST_TO_ADDR
// group := list [ 2 ] ;
45225: LD_ADDR_VAR 0 4
45229: PUSH
45230: LD_VAR 0 1
45234: PUSH
45235: LD_INT 2
45237: ARRAY
45238: ST_TO_ADDR
// path := list [ 3 ] ;
45239: LD_ADDR_VAR 0 5
45243: PUSH
45244: LD_VAR 0 1
45248: PUSH
45249: LD_INT 3
45251: ARRAY
45252: ST_TO_ADDR
// flags := list [ 4 ] ;
45253: LD_ADDR_VAR 0 6
45257: PUSH
45258: LD_VAR 0 1
45262: PUSH
45263: LD_INT 4
45265: ARRAY
45266: ST_TO_ADDR
// mined := [ ] ;
45267: LD_ADDR_VAR 0 27
45271: PUSH
45272: EMPTY
45273: ST_TO_ADDR
// bombed := [ ] ;
45274: LD_ADDR_VAR 0 28
45278: PUSH
45279: EMPTY
45280: ST_TO_ADDR
// healers := [ ] ;
45281: LD_ADDR_VAR 0 31
45285: PUSH
45286: EMPTY
45287: ST_TO_ADDR
// to_heal := [ ] ;
45288: LD_ADDR_VAR 0 30
45292: PUSH
45293: EMPTY
45294: ST_TO_ADDR
// repairs := [ ] ;
45295: LD_ADDR_VAR 0 33
45299: PUSH
45300: EMPTY
45301: ST_TO_ADDR
// to_repair := [ ] ;
45302: LD_ADDR_VAR 0 32
45306: PUSH
45307: EMPTY
45308: ST_TO_ADDR
// if not group or not path then
45309: LD_VAR 0 4
45313: NOT
45314: PUSH
45315: LD_VAR 0 5
45319: NOT
45320: OR
45321: IFFALSE 45325
// exit ;
45323: GO 49837
// side := GetSide ( group [ 1 ] ) ;
45325: LD_ADDR_VAR 0 35
45329: PUSH
45330: LD_VAR 0 4
45334: PUSH
45335: LD_INT 1
45337: ARRAY
45338: PPUSH
45339: CALL_OW 255
45343: ST_TO_ADDR
// if flags then
45344: LD_VAR 0 6
45348: IFFALSE 45492
// begin f_ignore_area := flags [ 1 ] ;
45350: LD_ADDR_VAR 0 17
45354: PUSH
45355: LD_VAR 0 6
45359: PUSH
45360: LD_INT 1
45362: ARRAY
45363: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
45364: LD_ADDR_VAR 0 18
45368: PUSH
45369: LD_VAR 0 6
45373: PUSH
45374: LD_INT 2
45376: ARRAY
45377: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
45378: LD_ADDR_VAR 0 19
45382: PUSH
45383: LD_VAR 0 6
45387: PUSH
45388: LD_INT 3
45390: ARRAY
45391: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
45392: LD_ADDR_VAR 0 20
45396: PUSH
45397: LD_VAR 0 6
45401: PUSH
45402: LD_INT 4
45404: ARRAY
45405: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
45406: LD_ADDR_VAR 0 21
45410: PUSH
45411: LD_VAR 0 6
45415: PUSH
45416: LD_INT 5
45418: ARRAY
45419: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
45420: LD_ADDR_VAR 0 22
45424: PUSH
45425: LD_VAR 0 6
45429: PUSH
45430: LD_INT 6
45432: ARRAY
45433: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
45434: LD_ADDR_VAR 0 23
45438: PUSH
45439: LD_VAR 0 6
45443: PUSH
45444: LD_INT 7
45446: ARRAY
45447: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
45448: LD_ADDR_VAR 0 24
45452: PUSH
45453: LD_VAR 0 6
45457: PUSH
45458: LD_INT 8
45460: ARRAY
45461: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
45462: LD_ADDR_VAR 0 25
45466: PUSH
45467: LD_VAR 0 6
45471: PUSH
45472: LD_INT 9
45474: ARRAY
45475: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
45476: LD_ADDR_VAR 0 26
45480: PUSH
45481: LD_VAR 0 6
45485: PUSH
45486: LD_INT 10
45488: ARRAY
45489: ST_TO_ADDR
// end else
45490: GO 45572
// begin f_ignore_area := false ;
45492: LD_ADDR_VAR 0 17
45496: PUSH
45497: LD_INT 0
45499: ST_TO_ADDR
// f_capture := false ;
45500: LD_ADDR_VAR 0 18
45504: PUSH
45505: LD_INT 0
45507: ST_TO_ADDR
// f_ignore_civ := false ;
45508: LD_ADDR_VAR 0 19
45512: PUSH
45513: LD_INT 0
45515: ST_TO_ADDR
// f_murder := false ;
45516: LD_ADDR_VAR 0 20
45520: PUSH
45521: LD_INT 0
45523: ST_TO_ADDR
// f_mines := false ;
45524: LD_ADDR_VAR 0 21
45528: PUSH
45529: LD_INT 0
45531: ST_TO_ADDR
// f_repair := false ;
45532: LD_ADDR_VAR 0 22
45536: PUSH
45537: LD_INT 0
45539: ST_TO_ADDR
// f_heal := false ;
45540: LD_ADDR_VAR 0 23
45544: PUSH
45545: LD_INT 0
45547: ST_TO_ADDR
// f_spacetime := false ;
45548: LD_ADDR_VAR 0 24
45552: PUSH
45553: LD_INT 0
45555: ST_TO_ADDR
// f_attack_depot := false ;
45556: LD_ADDR_VAR 0 25
45560: PUSH
45561: LD_INT 0
45563: ST_TO_ADDR
// f_crawl := false ;
45564: LD_ADDR_VAR 0 26
45568: PUSH
45569: LD_INT 0
45571: ST_TO_ADDR
// end ; if f_heal then
45572: LD_VAR 0 23
45576: IFFALSE 45603
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
45578: LD_ADDR_VAR 0 31
45582: PUSH
45583: LD_VAR 0 4
45587: PPUSH
45588: LD_INT 25
45590: PUSH
45591: LD_INT 4
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PPUSH
45598: CALL_OW 72
45602: ST_TO_ADDR
// if f_repair then
45603: LD_VAR 0 22
45607: IFFALSE 45634
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
45609: LD_ADDR_VAR 0 33
45613: PUSH
45614: LD_VAR 0 4
45618: PPUSH
45619: LD_INT 25
45621: PUSH
45622: LD_INT 3
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PPUSH
45629: CALL_OW 72
45633: ST_TO_ADDR
// units_path := [ ] ;
45634: LD_ADDR_VAR 0 16
45638: PUSH
45639: EMPTY
45640: ST_TO_ADDR
// for i = 1 to group do
45641: LD_ADDR_VAR 0 7
45645: PUSH
45646: DOUBLE
45647: LD_INT 1
45649: DEC
45650: ST_TO_ADDR
45651: LD_VAR 0 4
45655: PUSH
45656: FOR_TO
45657: IFFALSE 45686
// units_path := Replace ( units_path , i , path ) ;
45659: LD_ADDR_VAR 0 16
45663: PUSH
45664: LD_VAR 0 16
45668: PPUSH
45669: LD_VAR 0 7
45673: PPUSH
45674: LD_VAR 0 5
45678: PPUSH
45679: CALL_OW 1
45683: ST_TO_ADDR
45684: GO 45656
45686: POP
45687: POP
// repeat for i = group downto 1 do
45688: LD_ADDR_VAR 0 7
45692: PUSH
45693: DOUBLE
45694: LD_VAR 0 4
45698: INC
45699: ST_TO_ADDR
45700: LD_INT 1
45702: PUSH
45703: FOR_DOWNTO
45704: IFFALSE 49800
// begin wait ( 5 ) ;
45706: LD_INT 5
45708: PPUSH
45709: CALL_OW 67
// tmp := [ ] ;
45713: LD_ADDR_VAR 0 14
45717: PUSH
45718: EMPTY
45719: ST_TO_ADDR
// attacking := false ;
45720: LD_ADDR_VAR 0 29
45724: PUSH
45725: LD_INT 0
45727: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
45728: LD_VAR 0 4
45732: PUSH
45733: LD_VAR 0 7
45737: ARRAY
45738: PPUSH
45739: CALL_OW 301
45743: PUSH
45744: LD_VAR 0 4
45748: PUSH
45749: LD_VAR 0 7
45753: ARRAY
45754: NOT
45755: OR
45756: IFFALSE 45865
// begin if GetType ( group [ i ] ) = unit_human then
45758: LD_VAR 0 4
45762: PUSH
45763: LD_VAR 0 7
45767: ARRAY
45768: PPUSH
45769: CALL_OW 247
45773: PUSH
45774: LD_INT 1
45776: EQUAL
45777: IFFALSE 45823
// begin to_heal := to_heal diff group [ i ] ;
45779: LD_ADDR_VAR 0 30
45783: PUSH
45784: LD_VAR 0 30
45788: PUSH
45789: LD_VAR 0 4
45793: PUSH
45794: LD_VAR 0 7
45798: ARRAY
45799: DIFF
45800: ST_TO_ADDR
// healers := healers diff group [ i ] ;
45801: LD_ADDR_VAR 0 31
45805: PUSH
45806: LD_VAR 0 31
45810: PUSH
45811: LD_VAR 0 4
45815: PUSH
45816: LD_VAR 0 7
45820: ARRAY
45821: DIFF
45822: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
45823: LD_ADDR_VAR 0 4
45827: PUSH
45828: LD_VAR 0 4
45832: PPUSH
45833: LD_VAR 0 7
45837: PPUSH
45838: CALL_OW 3
45842: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
45843: LD_ADDR_VAR 0 16
45847: PUSH
45848: LD_VAR 0 16
45852: PPUSH
45853: LD_VAR 0 7
45857: PPUSH
45858: CALL_OW 3
45862: ST_TO_ADDR
// continue ;
45863: GO 45703
// end ; if f_repair then
45865: LD_VAR 0 22
45869: IFFALSE 46358
// begin if GetType ( group [ i ] ) = unit_vehicle then
45871: LD_VAR 0 4
45875: PUSH
45876: LD_VAR 0 7
45880: ARRAY
45881: PPUSH
45882: CALL_OW 247
45886: PUSH
45887: LD_INT 2
45889: EQUAL
45890: IFFALSE 46080
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
45892: LD_VAR 0 4
45896: PUSH
45897: LD_VAR 0 7
45901: ARRAY
45902: PPUSH
45903: CALL_OW 256
45907: PUSH
45908: LD_INT 700
45910: LESS
45911: PUSH
45912: LD_VAR 0 4
45916: PUSH
45917: LD_VAR 0 7
45921: ARRAY
45922: PUSH
45923: LD_VAR 0 32
45927: IN
45928: NOT
45929: AND
45930: IFFALSE 45954
// to_repair := to_repair union group [ i ] ;
45932: LD_ADDR_VAR 0 32
45936: PUSH
45937: LD_VAR 0 32
45941: PUSH
45942: LD_VAR 0 4
45946: PUSH
45947: LD_VAR 0 7
45951: ARRAY
45952: UNION
45953: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
45954: LD_VAR 0 4
45958: PUSH
45959: LD_VAR 0 7
45963: ARRAY
45964: PPUSH
45965: CALL_OW 256
45969: PUSH
45970: LD_INT 1000
45972: EQUAL
45973: PUSH
45974: LD_VAR 0 4
45978: PUSH
45979: LD_VAR 0 7
45983: ARRAY
45984: PUSH
45985: LD_VAR 0 32
45989: IN
45990: AND
45991: IFFALSE 46015
// to_repair := to_repair diff group [ i ] ;
45993: LD_ADDR_VAR 0 32
45997: PUSH
45998: LD_VAR 0 32
46002: PUSH
46003: LD_VAR 0 4
46007: PUSH
46008: LD_VAR 0 7
46012: ARRAY
46013: DIFF
46014: ST_TO_ADDR
// if group [ i ] in to_repair then
46015: LD_VAR 0 4
46019: PUSH
46020: LD_VAR 0 7
46024: ARRAY
46025: PUSH
46026: LD_VAR 0 32
46030: IN
46031: IFFALSE 46078
// begin if not IsInArea ( group [ i ] , f_repair ) then
46033: LD_VAR 0 4
46037: PUSH
46038: LD_VAR 0 7
46042: ARRAY
46043: PPUSH
46044: LD_VAR 0 22
46048: PPUSH
46049: CALL_OW 308
46053: NOT
46054: IFFALSE 46076
// ComMoveToArea ( group [ i ] , f_repair ) ;
46056: LD_VAR 0 4
46060: PUSH
46061: LD_VAR 0 7
46065: ARRAY
46066: PPUSH
46067: LD_VAR 0 22
46071: PPUSH
46072: CALL_OW 113
// continue ;
46076: GO 45703
// end ; end else
46078: GO 46358
// if group [ i ] in repairs then
46080: LD_VAR 0 4
46084: PUSH
46085: LD_VAR 0 7
46089: ARRAY
46090: PUSH
46091: LD_VAR 0 33
46095: IN
46096: IFFALSE 46358
// begin if IsInUnit ( group [ i ] ) then
46098: LD_VAR 0 4
46102: PUSH
46103: LD_VAR 0 7
46107: ARRAY
46108: PPUSH
46109: CALL_OW 310
46113: IFFALSE 46181
// begin z := IsInUnit ( group [ i ] ) ;
46115: LD_ADDR_VAR 0 13
46119: PUSH
46120: LD_VAR 0 4
46124: PUSH
46125: LD_VAR 0 7
46129: ARRAY
46130: PPUSH
46131: CALL_OW 310
46135: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
46136: LD_VAR 0 13
46140: PUSH
46141: LD_VAR 0 32
46145: IN
46146: PUSH
46147: LD_VAR 0 13
46151: PPUSH
46152: LD_VAR 0 22
46156: PPUSH
46157: CALL_OW 308
46161: AND
46162: IFFALSE 46179
// ComExitVehicle ( group [ i ] ) ;
46164: LD_VAR 0 4
46168: PUSH
46169: LD_VAR 0 7
46173: ARRAY
46174: PPUSH
46175: CALL_OW 121
// end else
46179: GO 46358
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
46181: LD_ADDR_VAR 0 13
46185: PUSH
46186: LD_VAR 0 4
46190: PPUSH
46191: LD_INT 95
46193: PUSH
46194: LD_VAR 0 22
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 58
46205: PUSH
46206: EMPTY
46207: LIST
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PPUSH
46213: CALL_OW 72
46217: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
46218: LD_VAR 0 4
46222: PUSH
46223: LD_VAR 0 7
46227: ARRAY
46228: PPUSH
46229: CALL_OW 314
46233: NOT
46234: IFFALSE 46356
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
46236: LD_ADDR_VAR 0 10
46240: PUSH
46241: LD_VAR 0 13
46245: PPUSH
46246: LD_VAR 0 4
46250: PUSH
46251: LD_VAR 0 7
46255: ARRAY
46256: PPUSH
46257: CALL_OW 74
46261: ST_TO_ADDR
// if not x then
46262: LD_VAR 0 10
46266: NOT
46267: IFFALSE 46271
// continue ;
46269: GO 45703
// if GetLives ( x ) < 1000 then
46271: LD_VAR 0 10
46275: PPUSH
46276: CALL_OW 256
46280: PUSH
46281: LD_INT 1000
46283: LESS
46284: IFFALSE 46308
// ComRepairVehicle ( group [ i ] , x ) else
46286: LD_VAR 0 4
46290: PUSH
46291: LD_VAR 0 7
46295: ARRAY
46296: PPUSH
46297: LD_VAR 0 10
46301: PPUSH
46302: CALL_OW 129
46306: GO 46356
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
46308: LD_VAR 0 23
46312: PUSH
46313: LD_VAR 0 4
46317: PUSH
46318: LD_VAR 0 7
46322: ARRAY
46323: PPUSH
46324: CALL_OW 256
46328: PUSH
46329: LD_INT 1000
46331: LESS
46332: AND
46333: NOT
46334: IFFALSE 46356
// ComEnterUnit ( group [ i ] , x ) ;
46336: LD_VAR 0 4
46340: PUSH
46341: LD_VAR 0 7
46345: ARRAY
46346: PPUSH
46347: LD_VAR 0 10
46351: PPUSH
46352: CALL_OW 120
// end ; continue ;
46356: GO 45703
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
46358: LD_VAR 0 23
46362: PUSH
46363: LD_VAR 0 4
46367: PUSH
46368: LD_VAR 0 7
46372: ARRAY
46373: PPUSH
46374: CALL_OW 247
46378: PUSH
46379: LD_INT 1
46381: EQUAL
46382: AND
46383: IFFALSE 46861
// begin if group [ i ] in healers then
46385: LD_VAR 0 4
46389: PUSH
46390: LD_VAR 0 7
46394: ARRAY
46395: PUSH
46396: LD_VAR 0 31
46400: IN
46401: IFFALSE 46674
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
46403: LD_VAR 0 4
46407: PUSH
46408: LD_VAR 0 7
46412: ARRAY
46413: PPUSH
46414: LD_VAR 0 23
46418: PPUSH
46419: CALL_OW 308
46423: NOT
46424: PUSH
46425: LD_VAR 0 4
46429: PUSH
46430: LD_VAR 0 7
46434: ARRAY
46435: PPUSH
46436: CALL_OW 314
46440: NOT
46441: AND
46442: IFFALSE 46466
// ComMoveToArea ( group [ i ] , f_heal ) else
46444: LD_VAR 0 4
46448: PUSH
46449: LD_VAR 0 7
46453: ARRAY
46454: PPUSH
46455: LD_VAR 0 23
46459: PPUSH
46460: CALL_OW 113
46464: GO 46672
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
46466: LD_VAR 0 4
46470: PUSH
46471: LD_VAR 0 7
46475: ARRAY
46476: PPUSH
46477: CALL 45084 0 1
46481: PPUSH
46482: CALL_OW 256
46486: PUSH
46487: LD_INT 1000
46489: EQUAL
46490: IFFALSE 46509
// ComStop ( group [ i ] ) else
46492: LD_VAR 0 4
46496: PUSH
46497: LD_VAR 0 7
46501: ARRAY
46502: PPUSH
46503: CALL_OW 141
46507: GO 46672
// if not HasTask ( group [ i ] ) and to_heal then
46509: LD_VAR 0 4
46513: PUSH
46514: LD_VAR 0 7
46518: ARRAY
46519: PPUSH
46520: CALL_OW 314
46524: NOT
46525: PUSH
46526: LD_VAR 0 30
46530: AND
46531: IFFALSE 46672
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
46533: LD_ADDR_VAR 0 13
46537: PUSH
46538: LD_VAR 0 30
46542: PPUSH
46543: LD_INT 3
46545: PUSH
46546: LD_INT 54
46548: PUSH
46549: EMPTY
46550: LIST
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PPUSH
46556: CALL_OW 72
46560: PPUSH
46561: LD_VAR 0 4
46565: PUSH
46566: LD_VAR 0 7
46570: ARRAY
46571: PPUSH
46572: CALL_OW 74
46576: ST_TO_ADDR
// if z then
46577: LD_VAR 0 13
46581: IFFALSE 46672
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
46583: LD_INT 91
46585: PUSH
46586: LD_VAR 0 13
46590: PUSH
46591: LD_INT 10
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 81
46601: PUSH
46602: LD_VAR 0 13
46606: PPUSH
46607: CALL_OW 255
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PPUSH
46620: CALL_OW 69
46624: PUSH
46625: LD_INT 0
46627: EQUAL
46628: IFFALSE 46652
// ComHeal ( group [ i ] , z ) else
46630: LD_VAR 0 4
46634: PUSH
46635: LD_VAR 0 7
46639: ARRAY
46640: PPUSH
46641: LD_VAR 0 13
46645: PPUSH
46646: CALL_OW 128
46650: GO 46672
// ComMoveToArea ( group [ i ] , f_heal ) ;
46652: LD_VAR 0 4
46656: PUSH
46657: LD_VAR 0 7
46661: ARRAY
46662: PPUSH
46663: LD_VAR 0 23
46667: PPUSH
46668: CALL_OW 113
// end ; continue ;
46672: GO 45703
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
46674: LD_VAR 0 4
46678: PUSH
46679: LD_VAR 0 7
46683: ARRAY
46684: PPUSH
46685: CALL_OW 256
46689: PUSH
46690: LD_INT 700
46692: LESS
46693: PUSH
46694: LD_VAR 0 4
46698: PUSH
46699: LD_VAR 0 7
46703: ARRAY
46704: PUSH
46705: LD_VAR 0 30
46709: IN
46710: NOT
46711: AND
46712: IFFALSE 46736
// to_heal := to_heal union group [ i ] ;
46714: LD_ADDR_VAR 0 30
46718: PUSH
46719: LD_VAR 0 30
46723: PUSH
46724: LD_VAR 0 4
46728: PUSH
46729: LD_VAR 0 7
46733: ARRAY
46734: UNION
46735: ST_TO_ADDR
// if group [ i ] in to_heal then
46736: LD_VAR 0 4
46740: PUSH
46741: LD_VAR 0 7
46745: ARRAY
46746: PUSH
46747: LD_VAR 0 30
46751: IN
46752: IFFALSE 46861
// begin if GetLives ( group [ i ] ) = 1000 then
46754: LD_VAR 0 4
46758: PUSH
46759: LD_VAR 0 7
46763: ARRAY
46764: PPUSH
46765: CALL_OW 256
46769: PUSH
46770: LD_INT 1000
46772: EQUAL
46773: IFFALSE 46799
// to_heal := to_heal diff group [ i ] else
46775: LD_ADDR_VAR 0 30
46779: PUSH
46780: LD_VAR 0 30
46784: PUSH
46785: LD_VAR 0 4
46789: PUSH
46790: LD_VAR 0 7
46794: ARRAY
46795: DIFF
46796: ST_TO_ADDR
46797: GO 46861
// begin if not IsInArea ( group [ i ] , to_heal ) then
46799: LD_VAR 0 4
46803: PUSH
46804: LD_VAR 0 7
46808: ARRAY
46809: PPUSH
46810: LD_VAR 0 30
46814: PPUSH
46815: CALL_OW 308
46819: NOT
46820: IFFALSE 46844
// ComMoveToArea ( group [ i ] , f_heal ) else
46822: LD_VAR 0 4
46826: PUSH
46827: LD_VAR 0 7
46831: ARRAY
46832: PPUSH
46833: LD_VAR 0 23
46837: PPUSH
46838: CALL_OW 113
46842: GO 46859
// ComHold ( group [ i ] ) ;
46844: LD_VAR 0 4
46848: PUSH
46849: LD_VAR 0 7
46853: ARRAY
46854: PPUSH
46855: CALL_OW 140
// continue ;
46859: GO 45703
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
46861: LD_VAR 0 4
46865: PUSH
46866: LD_VAR 0 7
46870: ARRAY
46871: PPUSH
46872: LD_INT 10
46874: PPUSH
46875: CALL 43481 0 2
46879: NOT
46880: PUSH
46881: LD_VAR 0 16
46885: PUSH
46886: LD_VAR 0 7
46890: ARRAY
46891: PUSH
46892: EMPTY
46893: EQUAL
46894: NOT
46895: AND
46896: IFFALSE 47162
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
46898: LD_VAR 0 4
46902: PUSH
46903: LD_VAR 0 7
46907: ARRAY
46908: PPUSH
46909: CALL_OW 262
46913: PUSH
46914: LD_INT 1
46916: PUSH
46917: LD_INT 2
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: IN
46924: IFFALSE 46965
// if GetFuel ( group [ i ] ) < 10 then
46926: LD_VAR 0 4
46930: PUSH
46931: LD_VAR 0 7
46935: ARRAY
46936: PPUSH
46937: CALL_OW 261
46941: PUSH
46942: LD_INT 10
46944: LESS
46945: IFFALSE 46965
// SetFuel ( group [ i ] , 12 ) ;
46947: LD_VAR 0 4
46951: PUSH
46952: LD_VAR 0 7
46956: ARRAY
46957: PPUSH
46958: LD_INT 12
46960: PPUSH
46961: CALL_OW 240
// if units_path [ i ] then
46965: LD_VAR 0 16
46969: PUSH
46970: LD_VAR 0 7
46974: ARRAY
46975: IFFALSE 47160
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
46977: LD_VAR 0 4
46981: PUSH
46982: LD_VAR 0 7
46986: ARRAY
46987: PPUSH
46988: LD_VAR 0 16
46992: PUSH
46993: LD_VAR 0 7
46997: ARRAY
46998: PUSH
46999: LD_INT 1
47001: ARRAY
47002: PUSH
47003: LD_INT 1
47005: ARRAY
47006: PPUSH
47007: LD_VAR 0 16
47011: PUSH
47012: LD_VAR 0 7
47016: ARRAY
47017: PUSH
47018: LD_INT 1
47020: ARRAY
47021: PUSH
47022: LD_INT 2
47024: ARRAY
47025: PPUSH
47026: CALL_OW 297
47030: PUSH
47031: LD_INT 6
47033: GREATER
47034: IFFALSE 47109
// begin if not HasTask ( group [ i ] ) then
47036: LD_VAR 0 4
47040: PUSH
47041: LD_VAR 0 7
47045: ARRAY
47046: PPUSH
47047: CALL_OW 314
47051: NOT
47052: IFFALSE 47107
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
47054: LD_VAR 0 4
47058: PUSH
47059: LD_VAR 0 7
47063: ARRAY
47064: PPUSH
47065: LD_VAR 0 16
47069: PUSH
47070: LD_VAR 0 7
47074: ARRAY
47075: PUSH
47076: LD_INT 1
47078: ARRAY
47079: PUSH
47080: LD_INT 1
47082: ARRAY
47083: PPUSH
47084: LD_VAR 0 16
47088: PUSH
47089: LD_VAR 0 7
47093: ARRAY
47094: PUSH
47095: LD_INT 1
47097: ARRAY
47098: PUSH
47099: LD_INT 2
47101: ARRAY
47102: PPUSH
47103: CALL_OW 114
// end else
47107: GO 47160
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
47109: LD_ADDR_VAR 0 15
47113: PUSH
47114: LD_VAR 0 16
47118: PUSH
47119: LD_VAR 0 7
47123: ARRAY
47124: PPUSH
47125: LD_INT 1
47127: PPUSH
47128: CALL_OW 3
47132: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
47133: LD_ADDR_VAR 0 16
47137: PUSH
47138: LD_VAR 0 16
47142: PPUSH
47143: LD_VAR 0 7
47147: PPUSH
47148: LD_VAR 0 15
47152: PPUSH
47153: CALL_OW 1
47157: ST_TO_ADDR
// continue ;
47158: GO 45703
// end ; end ; end else
47160: GO 49798
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
47162: LD_ADDR_VAR 0 14
47166: PUSH
47167: LD_INT 81
47169: PUSH
47170: LD_VAR 0 4
47174: PUSH
47175: LD_VAR 0 7
47179: ARRAY
47180: PPUSH
47181: CALL_OW 255
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PPUSH
47190: CALL_OW 69
47194: ST_TO_ADDR
// if not tmp then
47195: LD_VAR 0 14
47199: NOT
47200: IFFALSE 47204
// continue ;
47202: GO 45703
// if f_ignore_area then
47204: LD_VAR 0 17
47208: IFFALSE 47296
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
47210: LD_ADDR_VAR 0 15
47214: PUSH
47215: LD_VAR 0 14
47219: PPUSH
47220: LD_INT 3
47222: PUSH
47223: LD_INT 92
47225: PUSH
47226: LD_VAR 0 17
47230: PUSH
47231: LD_INT 1
47233: ARRAY
47234: PUSH
47235: LD_VAR 0 17
47239: PUSH
47240: LD_INT 2
47242: ARRAY
47243: PUSH
47244: LD_VAR 0 17
47248: PUSH
47249: LD_INT 3
47251: ARRAY
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PPUSH
47263: CALL_OW 72
47267: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
47268: LD_VAR 0 14
47272: PUSH
47273: LD_VAR 0 15
47277: DIFF
47278: IFFALSE 47296
// tmp := tmp diff tmp2 ;
47280: LD_ADDR_VAR 0 14
47284: PUSH
47285: LD_VAR 0 14
47289: PUSH
47290: LD_VAR 0 15
47294: DIFF
47295: ST_TO_ADDR
// end ; if not f_murder then
47296: LD_VAR 0 20
47300: NOT
47301: IFFALSE 47359
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
47303: LD_ADDR_VAR 0 15
47307: PUSH
47308: LD_VAR 0 14
47312: PPUSH
47313: LD_INT 3
47315: PUSH
47316: LD_INT 50
47318: PUSH
47319: EMPTY
47320: LIST
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PPUSH
47326: CALL_OW 72
47330: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
47331: LD_VAR 0 14
47335: PUSH
47336: LD_VAR 0 15
47340: DIFF
47341: IFFALSE 47359
// tmp := tmp diff tmp2 ;
47343: LD_ADDR_VAR 0 14
47347: PUSH
47348: LD_VAR 0 14
47352: PUSH
47353: LD_VAR 0 15
47357: DIFF
47358: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
47359: LD_ADDR_VAR 0 14
47363: PUSH
47364: LD_VAR 0 4
47368: PUSH
47369: LD_VAR 0 7
47373: ARRAY
47374: PPUSH
47375: LD_VAR 0 14
47379: PPUSH
47380: LD_INT 1
47382: PPUSH
47383: LD_INT 1
47385: PPUSH
47386: CALL 17148 0 4
47390: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
47391: LD_VAR 0 4
47395: PUSH
47396: LD_VAR 0 7
47400: ARRAY
47401: PPUSH
47402: CALL_OW 257
47406: PUSH
47407: LD_INT 1
47409: EQUAL
47410: IFFALSE 47858
// begin if WantPlant ( group [ i ] ) then
47412: LD_VAR 0 4
47416: PUSH
47417: LD_VAR 0 7
47421: ARRAY
47422: PPUSH
47423: CALL 16649 0 1
47427: IFFALSE 47431
// continue ;
47429: GO 45703
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
47431: LD_VAR 0 18
47435: PUSH
47436: LD_VAR 0 4
47440: PUSH
47441: LD_VAR 0 7
47445: ARRAY
47446: PPUSH
47447: CALL_OW 310
47451: NOT
47452: AND
47453: PUSH
47454: LD_VAR 0 14
47458: PUSH
47459: LD_INT 1
47461: ARRAY
47462: PUSH
47463: LD_VAR 0 14
47467: PPUSH
47468: LD_INT 21
47470: PUSH
47471: LD_INT 2
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 58
47480: PUSH
47481: EMPTY
47482: LIST
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PPUSH
47488: CALL_OW 72
47492: IN
47493: AND
47494: IFFALSE 47530
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
47496: LD_VAR 0 4
47500: PUSH
47501: LD_VAR 0 7
47505: ARRAY
47506: PPUSH
47507: LD_VAR 0 14
47511: PUSH
47512: LD_INT 1
47514: ARRAY
47515: PPUSH
47516: CALL_OW 120
// attacking := true ;
47520: LD_ADDR_VAR 0 29
47524: PUSH
47525: LD_INT 1
47527: ST_TO_ADDR
// continue ;
47528: GO 45703
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
47530: LD_VAR 0 26
47534: PUSH
47535: LD_VAR 0 4
47539: PUSH
47540: LD_VAR 0 7
47544: ARRAY
47545: PPUSH
47546: CALL_OW 257
47550: PUSH
47551: LD_INT 1
47553: EQUAL
47554: AND
47555: PUSH
47556: LD_VAR 0 4
47560: PUSH
47561: LD_VAR 0 7
47565: ARRAY
47566: PPUSH
47567: CALL_OW 256
47571: PUSH
47572: LD_INT 800
47574: LESS
47575: AND
47576: PUSH
47577: LD_VAR 0 4
47581: PUSH
47582: LD_VAR 0 7
47586: ARRAY
47587: PPUSH
47588: CALL_OW 318
47592: NOT
47593: AND
47594: IFFALSE 47611
// ComCrawl ( group [ i ] ) ;
47596: LD_VAR 0 4
47600: PUSH
47601: LD_VAR 0 7
47605: ARRAY
47606: PPUSH
47607: CALL_OW 137
// if f_mines then
47611: LD_VAR 0 21
47615: IFFALSE 47858
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
47617: LD_VAR 0 14
47621: PUSH
47622: LD_INT 1
47624: ARRAY
47625: PPUSH
47626: CALL_OW 247
47630: PUSH
47631: LD_INT 3
47633: EQUAL
47634: PUSH
47635: LD_VAR 0 14
47639: PUSH
47640: LD_INT 1
47642: ARRAY
47643: PUSH
47644: LD_VAR 0 27
47648: IN
47649: NOT
47650: AND
47651: IFFALSE 47858
// begin x := GetX ( tmp [ 1 ] ) ;
47653: LD_ADDR_VAR 0 10
47657: PUSH
47658: LD_VAR 0 14
47662: PUSH
47663: LD_INT 1
47665: ARRAY
47666: PPUSH
47667: CALL_OW 250
47671: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
47672: LD_ADDR_VAR 0 11
47676: PUSH
47677: LD_VAR 0 14
47681: PUSH
47682: LD_INT 1
47684: ARRAY
47685: PPUSH
47686: CALL_OW 251
47690: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
47691: LD_ADDR_VAR 0 12
47695: PUSH
47696: LD_VAR 0 4
47700: PUSH
47701: LD_VAR 0 7
47705: ARRAY
47706: PPUSH
47707: CALL 43566 0 1
47711: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
47712: LD_VAR 0 4
47716: PUSH
47717: LD_VAR 0 7
47721: ARRAY
47722: PPUSH
47723: LD_VAR 0 10
47727: PPUSH
47728: LD_VAR 0 11
47732: PPUSH
47733: LD_VAR 0 14
47737: PUSH
47738: LD_INT 1
47740: ARRAY
47741: PPUSH
47742: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
47746: LD_VAR 0 4
47750: PUSH
47751: LD_VAR 0 7
47755: ARRAY
47756: PPUSH
47757: LD_VAR 0 10
47761: PPUSH
47762: LD_VAR 0 12
47766: PPUSH
47767: LD_INT 7
47769: PPUSH
47770: CALL_OW 272
47774: PPUSH
47775: LD_VAR 0 11
47779: PPUSH
47780: LD_VAR 0 12
47784: PPUSH
47785: LD_INT 7
47787: PPUSH
47788: CALL_OW 273
47792: PPUSH
47793: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
47797: LD_VAR 0 4
47801: PUSH
47802: LD_VAR 0 7
47806: ARRAY
47807: PPUSH
47808: LD_INT 71
47810: PPUSH
47811: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
47815: LD_ADDR_VAR 0 27
47819: PUSH
47820: LD_VAR 0 27
47824: PPUSH
47825: LD_VAR 0 27
47829: PUSH
47830: LD_INT 1
47832: PLUS
47833: PPUSH
47834: LD_VAR 0 14
47838: PUSH
47839: LD_INT 1
47841: ARRAY
47842: PPUSH
47843: CALL_OW 1
47847: ST_TO_ADDR
// attacking := true ;
47848: LD_ADDR_VAR 0 29
47852: PUSH
47853: LD_INT 1
47855: ST_TO_ADDR
// continue ;
47856: GO 45703
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
47858: LD_VAR 0 4
47862: PUSH
47863: LD_VAR 0 7
47867: ARRAY
47868: PPUSH
47869: CALL_OW 257
47873: PUSH
47874: LD_INT 17
47876: EQUAL
47877: PUSH
47878: LD_VAR 0 4
47882: PUSH
47883: LD_VAR 0 7
47887: ARRAY
47888: PPUSH
47889: CALL_OW 110
47893: PUSH
47894: LD_INT 71
47896: EQUAL
47897: NOT
47898: AND
47899: IFFALSE 48045
// begin attacking := false ;
47901: LD_ADDR_VAR 0 29
47905: PUSH
47906: LD_INT 0
47908: ST_TO_ADDR
// k := 5 ;
47909: LD_ADDR_VAR 0 9
47913: PUSH
47914: LD_INT 5
47916: ST_TO_ADDR
// if tmp < k then
47917: LD_VAR 0 14
47921: PUSH
47922: LD_VAR 0 9
47926: LESS
47927: IFFALSE 47939
// k := tmp ;
47929: LD_ADDR_VAR 0 9
47933: PUSH
47934: LD_VAR 0 14
47938: ST_TO_ADDR
// for j = 1 to k do
47939: LD_ADDR_VAR 0 8
47943: PUSH
47944: DOUBLE
47945: LD_INT 1
47947: DEC
47948: ST_TO_ADDR
47949: LD_VAR 0 9
47953: PUSH
47954: FOR_TO
47955: IFFALSE 48043
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
47957: LD_VAR 0 14
47961: PUSH
47962: LD_VAR 0 8
47966: ARRAY
47967: PUSH
47968: LD_VAR 0 14
47972: PPUSH
47973: LD_INT 58
47975: PUSH
47976: EMPTY
47977: LIST
47978: PPUSH
47979: CALL_OW 72
47983: IN
47984: NOT
47985: IFFALSE 48041
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
47987: LD_VAR 0 4
47991: PUSH
47992: LD_VAR 0 7
47996: ARRAY
47997: PPUSH
47998: LD_VAR 0 14
48002: PUSH
48003: LD_VAR 0 8
48007: ARRAY
48008: PPUSH
48009: CALL_OW 115
// attacking := true ;
48013: LD_ADDR_VAR 0 29
48017: PUSH
48018: LD_INT 1
48020: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
48021: LD_VAR 0 4
48025: PUSH
48026: LD_VAR 0 7
48030: ARRAY
48031: PPUSH
48032: LD_INT 71
48034: PPUSH
48035: CALL_OW 109
// continue ;
48039: GO 47954
// end ; end ;
48041: GO 47954
48043: POP
48044: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
48045: LD_VAR 0 4
48049: PUSH
48050: LD_VAR 0 7
48054: ARRAY
48055: PPUSH
48056: CALL_OW 257
48060: PUSH
48061: LD_INT 8
48063: EQUAL
48064: PUSH
48065: LD_VAR 0 4
48069: PUSH
48070: LD_VAR 0 7
48074: ARRAY
48075: PPUSH
48076: CALL_OW 264
48080: PUSH
48081: LD_INT 28
48083: PUSH
48084: LD_INT 45
48086: PUSH
48087: LD_INT 7
48089: PUSH
48090: LD_INT 47
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: IN
48099: OR
48100: IFFALSE 48330
// begin attacking := false ;
48102: LD_ADDR_VAR 0 29
48106: PUSH
48107: LD_INT 0
48109: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
48110: LD_VAR 0 14
48114: PUSH
48115: LD_INT 1
48117: ARRAY
48118: PPUSH
48119: CALL_OW 266
48123: PUSH
48124: LD_INT 32
48126: PUSH
48127: LD_INT 31
48129: PUSH
48130: LD_INT 33
48132: PUSH
48133: LD_INT 4
48135: PUSH
48136: LD_INT 5
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: IN
48146: IFFALSE 48330
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
48148: LD_ADDR_VAR 0 9
48152: PUSH
48153: LD_VAR 0 14
48157: PUSH
48158: LD_INT 1
48160: ARRAY
48161: PPUSH
48162: CALL_OW 266
48166: PPUSH
48167: LD_VAR 0 14
48171: PUSH
48172: LD_INT 1
48174: ARRAY
48175: PPUSH
48176: CALL_OW 250
48180: PPUSH
48181: LD_VAR 0 14
48185: PUSH
48186: LD_INT 1
48188: ARRAY
48189: PPUSH
48190: CALL_OW 251
48194: PPUSH
48195: LD_VAR 0 14
48199: PUSH
48200: LD_INT 1
48202: ARRAY
48203: PPUSH
48204: CALL_OW 254
48208: PPUSH
48209: LD_VAR 0 14
48213: PUSH
48214: LD_INT 1
48216: ARRAY
48217: PPUSH
48218: CALL_OW 248
48222: PPUSH
48223: LD_INT 0
48225: PPUSH
48226: CALL 24942 0 6
48230: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
48231: LD_ADDR_VAR 0 8
48235: PUSH
48236: LD_VAR 0 4
48240: PUSH
48241: LD_VAR 0 7
48245: ARRAY
48246: PPUSH
48247: LD_VAR 0 9
48251: PPUSH
48252: CALL 43629 0 2
48256: ST_TO_ADDR
// if j then
48257: LD_VAR 0 8
48261: IFFALSE 48330
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48263: LD_VAR 0 8
48267: PUSH
48268: LD_INT 1
48270: ARRAY
48271: PPUSH
48272: LD_VAR 0 8
48276: PUSH
48277: LD_INT 2
48279: ARRAY
48280: PPUSH
48281: CALL_OW 488
48285: IFFALSE 48330
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
48287: LD_VAR 0 4
48291: PUSH
48292: LD_VAR 0 7
48296: ARRAY
48297: PPUSH
48298: LD_VAR 0 8
48302: PUSH
48303: LD_INT 1
48305: ARRAY
48306: PPUSH
48307: LD_VAR 0 8
48311: PUSH
48312: LD_INT 2
48314: ARRAY
48315: PPUSH
48316: CALL_OW 116
// attacking := true ;
48320: LD_ADDR_VAR 0 29
48324: PUSH
48325: LD_INT 1
48327: ST_TO_ADDR
// continue ;
48328: GO 45703
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
48330: LD_VAR 0 4
48334: PUSH
48335: LD_VAR 0 7
48339: ARRAY
48340: PPUSH
48341: CALL_OW 265
48345: PUSH
48346: LD_INT 11
48348: EQUAL
48349: IFFALSE 48627
// begin k := 10 ;
48351: LD_ADDR_VAR 0 9
48355: PUSH
48356: LD_INT 10
48358: ST_TO_ADDR
// x := 0 ;
48359: LD_ADDR_VAR 0 10
48363: PUSH
48364: LD_INT 0
48366: ST_TO_ADDR
// if tmp < k then
48367: LD_VAR 0 14
48371: PUSH
48372: LD_VAR 0 9
48376: LESS
48377: IFFALSE 48389
// k := tmp ;
48379: LD_ADDR_VAR 0 9
48383: PUSH
48384: LD_VAR 0 14
48388: ST_TO_ADDR
// for j = k downto 1 do
48389: LD_ADDR_VAR 0 8
48393: PUSH
48394: DOUBLE
48395: LD_VAR 0 9
48399: INC
48400: ST_TO_ADDR
48401: LD_INT 1
48403: PUSH
48404: FOR_DOWNTO
48405: IFFALSE 48480
// begin if GetType ( tmp [ j ] ) = unit_human then
48407: LD_VAR 0 14
48411: PUSH
48412: LD_VAR 0 8
48416: ARRAY
48417: PPUSH
48418: CALL_OW 247
48422: PUSH
48423: LD_INT 1
48425: EQUAL
48426: IFFALSE 48478
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
48428: LD_VAR 0 4
48432: PUSH
48433: LD_VAR 0 7
48437: ARRAY
48438: PPUSH
48439: LD_VAR 0 14
48443: PUSH
48444: LD_VAR 0 8
48448: ARRAY
48449: PPUSH
48450: CALL 43900 0 2
// x := tmp [ j ] ;
48454: LD_ADDR_VAR 0 10
48458: PUSH
48459: LD_VAR 0 14
48463: PUSH
48464: LD_VAR 0 8
48468: ARRAY
48469: ST_TO_ADDR
// attacking := true ;
48470: LD_ADDR_VAR 0 29
48474: PUSH
48475: LD_INT 1
48477: ST_TO_ADDR
// end ; end ;
48478: GO 48404
48480: POP
48481: POP
// if not x then
48482: LD_VAR 0 10
48486: NOT
48487: IFFALSE 48627
// begin attacking := true ;
48489: LD_ADDR_VAR 0 29
48493: PUSH
48494: LD_INT 1
48496: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
48497: LD_VAR 0 4
48501: PUSH
48502: LD_VAR 0 7
48506: ARRAY
48507: PPUSH
48508: CALL_OW 250
48512: PPUSH
48513: LD_VAR 0 4
48517: PUSH
48518: LD_VAR 0 7
48522: ARRAY
48523: PPUSH
48524: CALL_OW 251
48528: PPUSH
48529: CALL_OW 546
48533: PUSH
48534: LD_INT 2
48536: ARRAY
48537: PUSH
48538: LD_VAR 0 14
48542: PUSH
48543: LD_INT 1
48545: ARRAY
48546: PPUSH
48547: CALL_OW 250
48551: PPUSH
48552: LD_VAR 0 14
48556: PUSH
48557: LD_INT 1
48559: ARRAY
48560: PPUSH
48561: CALL_OW 251
48565: PPUSH
48566: CALL_OW 546
48570: PUSH
48571: LD_INT 2
48573: ARRAY
48574: EQUAL
48575: IFFALSE 48603
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
48577: LD_VAR 0 4
48581: PUSH
48582: LD_VAR 0 7
48586: ARRAY
48587: PPUSH
48588: LD_VAR 0 14
48592: PUSH
48593: LD_INT 1
48595: ARRAY
48596: PPUSH
48597: CALL 43900 0 2
48601: GO 48627
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
48603: LD_VAR 0 4
48607: PUSH
48608: LD_VAR 0 7
48612: ARRAY
48613: PPUSH
48614: LD_VAR 0 14
48618: PUSH
48619: LD_INT 1
48621: ARRAY
48622: PPUSH
48623: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
48627: LD_VAR 0 4
48631: PUSH
48632: LD_VAR 0 7
48636: ARRAY
48637: PPUSH
48638: CALL_OW 264
48642: PUSH
48643: LD_INT 29
48645: EQUAL
48646: IFFALSE 49012
// begin if WantsToAttack ( group [ i ] ) in bombed then
48648: LD_VAR 0 4
48652: PUSH
48653: LD_VAR 0 7
48657: ARRAY
48658: PPUSH
48659: CALL_OW 319
48663: PUSH
48664: LD_VAR 0 28
48668: IN
48669: IFFALSE 48673
// continue ;
48671: GO 45703
// k := 8 ;
48673: LD_ADDR_VAR 0 9
48677: PUSH
48678: LD_INT 8
48680: ST_TO_ADDR
// x := 0 ;
48681: LD_ADDR_VAR 0 10
48685: PUSH
48686: LD_INT 0
48688: ST_TO_ADDR
// if tmp < k then
48689: LD_VAR 0 14
48693: PUSH
48694: LD_VAR 0 9
48698: LESS
48699: IFFALSE 48711
// k := tmp ;
48701: LD_ADDR_VAR 0 9
48705: PUSH
48706: LD_VAR 0 14
48710: ST_TO_ADDR
// for j = 1 to k do
48711: LD_ADDR_VAR 0 8
48715: PUSH
48716: DOUBLE
48717: LD_INT 1
48719: DEC
48720: ST_TO_ADDR
48721: LD_VAR 0 9
48725: PUSH
48726: FOR_TO
48727: IFFALSE 48859
// begin if GetType ( tmp [ j ] ) = unit_building then
48729: LD_VAR 0 14
48733: PUSH
48734: LD_VAR 0 8
48738: ARRAY
48739: PPUSH
48740: CALL_OW 247
48744: PUSH
48745: LD_INT 3
48747: EQUAL
48748: IFFALSE 48857
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
48750: LD_VAR 0 14
48754: PUSH
48755: LD_VAR 0 8
48759: ARRAY
48760: PUSH
48761: LD_VAR 0 28
48765: IN
48766: NOT
48767: PUSH
48768: LD_VAR 0 14
48772: PUSH
48773: LD_VAR 0 8
48777: ARRAY
48778: PPUSH
48779: CALL_OW 313
48783: AND
48784: IFFALSE 48857
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
48786: LD_VAR 0 4
48790: PUSH
48791: LD_VAR 0 7
48795: ARRAY
48796: PPUSH
48797: LD_VAR 0 14
48801: PUSH
48802: LD_VAR 0 8
48806: ARRAY
48807: PPUSH
48808: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
48812: LD_ADDR_VAR 0 28
48816: PUSH
48817: LD_VAR 0 28
48821: PPUSH
48822: LD_VAR 0 28
48826: PUSH
48827: LD_INT 1
48829: PLUS
48830: PPUSH
48831: LD_VAR 0 14
48835: PUSH
48836: LD_VAR 0 8
48840: ARRAY
48841: PPUSH
48842: CALL_OW 1
48846: ST_TO_ADDR
// attacking := true ;
48847: LD_ADDR_VAR 0 29
48851: PUSH
48852: LD_INT 1
48854: ST_TO_ADDR
// break ;
48855: GO 48859
// end ; end ;
48857: GO 48726
48859: POP
48860: POP
// if not attacking and f_attack_depot then
48861: LD_VAR 0 29
48865: NOT
48866: PUSH
48867: LD_VAR 0 25
48871: AND
48872: IFFALSE 48967
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
48874: LD_ADDR_VAR 0 13
48878: PUSH
48879: LD_VAR 0 14
48883: PPUSH
48884: LD_INT 2
48886: PUSH
48887: LD_INT 30
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 30
48899: PUSH
48900: LD_INT 1
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: LIST
48911: PPUSH
48912: CALL_OW 72
48916: ST_TO_ADDR
// if z then
48917: LD_VAR 0 13
48921: IFFALSE 48967
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
48923: LD_VAR 0 4
48927: PUSH
48928: LD_VAR 0 7
48932: ARRAY
48933: PPUSH
48934: LD_VAR 0 13
48938: PPUSH
48939: LD_VAR 0 4
48943: PUSH
48944: LD_VAR 0 7
48948: ARRAY
48949: PPUSH
48950: CALL_OW 74
48954: PPUSH
48955: CALL_OW 115
// attacking := true ;
48959: LD_ADDR_VAR 0 29
48963: PUSH
48964: LD_INT 1
48966: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
48967: LD_VAR 0 4
48971: PUSH
48972: LD_VAR 0 7
48976: ARRAY
48977: PPUSH
48978: CALL_OW 256
48982: PUSH
48983: LD_INT 500
48985: LESS
48986: IFFALSE 49012
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
48988: LD_VAR 0 4
48992: PUSH
48993: LD_VAR 0 7
48997: ARRAY
48998: PPUSH
48999: LD_VAR 0 14
49003: PUSH
49004: LD_INT 1
49006: ARRAY
49007: PPUSH
49008: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
49012: LD_VAR 0 4
49016: PUSH
49017: LD_VAR 0 7
49021: ARRAY
49022: PPUSH
49023: CALL_OW 264
49027: PUSH
49028: LD_INT 49
49030: EQUAL
49031: IFFALSE 49152
// begin if not HasTask ( group [ i ] ) then
49033: LD_VAR 0 4
49037: PUSH
49038: LD_VAR 0 7
49042: ARRAY
49043: PPUSH
49044: CALL_OW 314
49048: NOT
49049: IFFALSE 49152
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
49051: LD_ADDR_VAR 0 9
49055: PUSH
49056: LD_INT 81
49058: PUSH
49059: LD_VAR 0 4
49063: PUSH
49064: LD_VAR 0 7
49068: ARRAY
49069: PPUSH
49070: CALL_OW 255
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PPUSH
49079: CALL_OW 69
49083: PPUSH
49084: LD_VAR 0 4
49088: PUSH
49089: LD_VAR 0 7
49093: ARRAY
49094: PPUSH
49095: CALL_OW 74
49099: ST_TO_ADDR
// if k then
49100: LD_VAR 0 9
49104: IFFALSE 49152
// if GetDistUnits ( group [ i ] , k ) > 10 then
49106: LD_VAR 0 4
49110: PUSH
49111: LD_VAR 0 7
49115: ARRAY
49116: PPUSH
49117: LD_VAR 0 9
49121: PPUSH
49122: CALL_OW 296
49126: PUSH
49127: LD_INT 10
49129: GREATER
49130: IFFALSE 49152
// ComMoveUnit ( group [ i ] , k ) ;
49132: LD_VAR 0 4
49136: PUSH
49137: LD_VAR 0 7
49141: ARRAY
49142: PPUSH
49143: LD_VAR 0 9
49147: PPUSH
49148: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49152: LD_VAR 0 4
49156: PUSH
49157: LD_VAR 0 7
49161: ARRAY
49162: PPUSH
49163: CALL_OW 256
49167: PUSH
49168: LD_INT 250
49170: LESS
49171: PUSH
49172: LD_VAR 0 4
49176: PUSH
49177: LD_VAR 0 7
49181: ARRAY
49182: PUSH
49183: LD_INT 21
49185: PUSH
49186: LD_INT 2
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 23
49195: PUSH
49196: LD_INT 2
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PPUSH
49207: CALL_OW 69
49211: IN
49212: AND
49213: IFFALSE 49338
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
49215: LD_ADDR_VAR 0 9
49219: PUSH
49220: LD_OWVAR 3
49224: PUSH
49225: LD_VAR 0 4
49229: PUSH
49230: LD_VAR 0 7
49234: ARRAY
49235: DIFF
49236: PPUSH
49237: LD_VAR 0 4
49241: PUSH
49242: LD_VAR 0 7
49246: ARRAY
49247: PPUSH
49248: CALL_OW 74
49252: ST_TO_ADDR
// if not k then
49253: LD_VAR 0 9
49257: NOT
49258: IFFALSE 49262
// continue ;
49260: GO 45703
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
49262: LD_VAR 0 9
49266: PUSH
49267: LD_INT 81
49269: PUSH
49270: LD_VAR 0 4
49274: PUSH
49275: LD_VAR 0 7
49279: ARRAY
49280: PPUSH
49281: CALL_OW 255
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PPUSH
49290: CALL_OW 69
49294: IN
49295: PUSH
49296: LD_VAR 0 9
49300: PPUSH
49301: LD_VAR 0 4
49305: PUSH
49306: LD_VAR 0 7
49310: ARRAY
49311: PPUSH
49312: CALL_OW 296
49316: PUSH
49317: LD_INT 5
49319: LESS
49320: AND
49321: IFFALSE 49338
// ComAutodestruct ( group [ i ] ) ;
49323: LD_VAR 0 4
49327: PUSH
49328: LD_VAR 0 7
49332: ARRAY
49333: PPUSH
49334: CALL 43798 0 1
// end ; if f_attack_depot then
49338: LD_VAR 0 25
49342: IFFALSE 49454
// begin k := 6 ;
49344: LD_ADDR_VAR 0 9
49348: PUSH
49349: LD_INT 6
49351: ST_TO_ADDR
// if tmp < k then
49352: LD_VAR 0 14
49356: PUSH
49357: LD_VAR 0 9
49361: LESS
49362: IFFALSE 49374
// k := tmp ;
49364: LD_ADDR_VAR 0 9
49368: PUSH
49369: LD_VAR 0 14
49373: ST_TO_ADDR
// for j = 1 to k do
49374: LD_ADDR_VAR 0 8
49378: PUSH
49379: DOUBLE
49380: LD_INT 1
49382: DEC
49383: ST_TO_ADDR
49384: LD_VAR 0 9
49388: PUSH
49389: FOR_TO
49390: IFFALSE 49452
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
49392: LD_VAR 0 8
49396: PPUSH
49397: CALL_OW 266
49401: PUSH
49402: LD_INT 0
49404: PUSH
49405: LD_INT 1
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: IN
49412: IFFALSE 49450
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
49414: LD_VAR 0 4
49418: PUSH
49419: LD_VAR 0 7
49423: ARRAY
49424: PPUSH
49425: LD_VAR 0 14
49429: PUSH
49430: LD_VAR 0 8
49434: ARRAY
49435: PPUSH
49436: CALL_OW 115
// attacking := true ;
49440: LD_ADDR_VAR 0 29
49444: PUSH
49445: LD_INT 1
49447: ST_TO_ADDR
// break ;
49448: GO 49452
// end ;
49450: GO 49389
49452: POP
49453: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
49454: LD_VAR 0 4
49458: PUSH
49459: LD_VAR 0 7
49463: ARRAY
49464: PPUSH
49465: CALL_OW 302
49469: PUSH
49470: LD_VAR 0 29
49474: NOT
49475: AND
49476: IFFALSE 49798
// begin if GetTag ( group [ i ] ) = 71 then
49478: LD_VAR 0 4
49482: PUSH
49483: LD_VAR 0 7
49487: ARRAY
49488: PPUSH
49489: CALL_OW 110
49493: PUSH
49494: LD_INT 71
49496: EQUAL
49497: IFFALSE 49538
// begin if HasTask ( group [ i ] ) then
49499: LD_VAR 0 4
49503: PUSH
49504: LD_VAR 0 7
49508: ARRAY
49509: PPUSH
49510: CALL_OW 314
49514: IFFALSE 49520
// continue else
49516: GO 45703
49518: GO 49538
// SetTag ( group [ i ] , 0 ) ;
49520: LD_VAR 0 4
49524: PUSH
49525: LD_VAR 0 7
49529: ARRAY
49530: PPUSH
49531: LD_INT 0
49533: PPUSH
49534: CALL_OW 109
// end ; k := 8 ;
49538: LD_ADDR_VAR 0 9
49542: PUSH
49543: LD_INT 8
49545: ST_TO_ADDR
// x := 0 ;
49546: LD_ADDR_VAR 0 10
49550: PUSH
49551: LD_INT 0
49553: ST_TO_ADDR
// if tmp < k then
49554: LD_VAR 0 14
49558: PUSH
49559: LD_VAR 0 9
49563: LESS
49564: IFFALSE 49576
// k := tmp ;
49566: LD_ADDR_VAR 0 9
49570: PUSH
49571: LD_VAR 0 14
49575: ST_TO_ADDR
// for j = 1 to k do
49576: LD_ADDR_VAR 0 8
49580: PUSH
49581: DOUBLE
49582: LD_INT 1
49584: DEC
49585: ST_TO_ADDR
49586: LD_VAR 0 9
49590: PUSH
49591: FOR_TO
49592: IFFALSE 49690
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
49594: LD_VAR 0 14
49598: PUSH
49599: LD_VAR 0 8
49603: ARRAY
49604: PPUSH
49605: CALL_OW 247
49609: PUSH
49610: LD_INT 1
49612: EQUAL
49613: PUSH
49614: LD_VAR 0 14
49618: PUSH
49619: LD_VAR 0 8
49623: ARRAY
49624: PPUSH
49625: CALL_OW 256
49629: PUSH
49630: LD_INT 250
49632: LESS
49633: PUSH
49634: LD_VAR 0 20
49638: AND
49639: PUSH
49640: LD_VAR 0 20
49644: NOT
49645: PUSH
49646: LD_VAR 0 14
49650: PUSH
49651: LD_VAR 0 8
49655: ARRAY
49656: PPUSH
49657: CALL_OW 256
49661: PUSH
49662: LD_INT 250
49664: GREATEREQUAL
49665: AND
49666: OR
49667: AND
49668: IFFALSE 49688
// begin x := tmp [ j ] ;
49670: LD_ADDR_VAR 0 10
49674: PUSH
49675: LD_VAR 0 14
49679: PUSH
49680: LD_VAR 0 8
49684: ARRAY
49685: ST_TO_ADDR
// break ;
49686: GO 49690
// end ;
49688: GO 49591
49690: POP
49691: POP
// if x then
49692: LD_VAR 0 10
49696: IFFALSE 49720
// ComAttackUnit ( group [ i ] , x ) else
49698: LD_VAR 0 4
49702: PUSH
49703: LD_VAR 0 7
49707: ARRAY
49708: PPUSH
49709: LD_VAR 0 10
49713: PPUSH
49714: CALL_OW 115
49718: GO 49744
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
49720: LD_VAR 0 4
49724: PUSH
49725: LD_VAR 0 7
49729: ARRAY
49730: PPUSH
49731: LD_VAR 0 14
49735: PUSH
49736: LD_INT 1
49738: ARRAY
49739: PPUSH
49740: CALL_OW 115
// if not HasTask ( group [ i ] ) then
49744: LD_VAR 0 4
49748: PUSH
49749: LD_VAR 0 7
49753: ARRAY
49754: PPUSH
49755: CALL_OW 314
49759: NOT
49760: IFFALSE 49798
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
49762: LD_VAR 0 4
49766: PUSH
49767: LD_VAR 0 7
49771: ARRAY
49772: PPUSH
49773: LD_VAR 0 14
49777: PPUSH
49778: LD_VAR 0 4
49782: PUSH
49783: LD_VAR 0 7
49787: ARRAY
49788: PPUSH
49789: CALL_OW 74
49793: PPUSH
49794: CALL_OW 115
// end ; end ; end ;
49798: GO 45703
49800: POP
49801: POP
// wait ( 0 0$1 ) ;
49802: LD_INT 35
49804: PPUSH
49805: CALL_OW 67
// until group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
49809: LD_VAR 0 4
49813: PUSH
49814: EMPTY
49815: EQUAL
49816: PUSH
49817: LD_INT 81
49819: PUSH
49820: LD_VAR 0 35
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PPUSH
49829: CALL_OW 69
49833: NOT
49834: OR
49835: IFFALSE 45688
// end ;
49837: LD_VAR 0 2
49841: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
49842: LD_INT 0
49844: PPUSH
49845: PPUSH
49846: PPUSH
49847: PPUSH
// if not base_units then
49848: LD_VAR 0 1
49852: NOT
49853: IFFALSE 49857
// exit ;
49855: GO 49944
// result := false ;
49857: LD_ADDR_VAR 0 2
49861: PUSH
49862: LD_INT 0
49864: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
49865: LD_ADDR_VAR 0 5
49869: PUSH
49870: LD_VAR 0 1
49874: PPUSH
49875: LD_INT 21
49877: PUSH
49878: LD_INT 3
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PPUSH
49885: CALL_OW 72
49889: ST_TO_ADDR
// if not tmp then
49890: LD_VAR 0 5
49894: NOT
49895: IFFALSE 49899
// exit ;
49897: GO 49944
// for i in tmp do
49899: LD_ADDR_VAR 0 3
49903: PUSH
49904: LD_VAR 0 5
49908: PUSH
49909: FOR_IN
49910: IFFALSE 49942
// begin result := EnemyInRange ( i , 22 ) ;
49912: LD_ADDR_VAR 0 2
49916: PUSH
49917: LD_VAR 0 3
49921: PPUSH
49922: LD_INT 22
49924: PPUSH
49925: CALL 43481 0 2
49929: ST_TO_ADDR
// if result then
49930: LD_VAR 0 2
49934: IFFALSE 49940
// exit ;
49936: POP
49937: POP
49938: GO 49944
// end ;
49940: GO 49909
49942: POP
49943: POP
// end ;
49944: LD_VAR 0 2
49948: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
49949: LD_INT 0
49951: PPUSH
49952: PPUSH
// if not units then
49953: LD_VAR 0 1
49957: NOT
49958: IFFALSE 49962
// exit ;
49960: GO 50032
// result := [ ] ;
49962: LD_ADDR_VAR 0 3
49966: PUSH
49967: EMPTY
49968: ST_TO_ADDR
// for i in units do
49969: LD_ADDR_VAR 0 4
49973: PUSH
49974: LD_VAR 0 1
49978: PUSH
49979: FOR_IN
49980: IFFALSE 50030
// if GetTag ( i ) = tag then
49982: LD_VAR 0 4
49986: PPUSH
49987: CALL_OW 110
49991: PUSH
49992: LD_VAR 0 2
49996: EQUAL
49997: IFFALSE 50028
// result := Insert ( result , result + 1 , i ) ;
49999: LD_ADDR_VAR 0 3
50003: PUSH
50004: LD_VAR 0 3
50008: PPUSH
50009: LD_VAR 0 3
50013: PUSH
50014: LD_INT 1
50016: PLUS
50017: PPUSH
50018: LD_VAR 0 4
50022: PPUSH
50023: CALL_OW 2
50027: ST_TO_ADDR
50028: GO 49979
50030: POP
50031: POP
// end ;
50032: LD_VAR 0 3
50036: RET
// export function IsDriver ( un ) ; begin
50037: LD_INT 0
50039: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50040: LD_ADDR_VAR 0 2
50044: PUSH
50045: LD_VAR 0 1
50049: PUSH
50050: LD_INT 55
50052: PUSH
50053: EMPTY
50054: LIST
50055: PPUSH
50056: CALL_OW 69
50060: IN
50061: ST_TO_ADDR
// end ;
50062: LD_VAR 0 2
50066: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50067: LD_INT 0
50069: PPUSH
50070: PPUSH
// list := [ ] ;
50071: LD_ADDR_VAR 0 5
50075: PUSH
50076: EMPTY
50077: ST_TO_ADDR
// case d of 0 :
50078: LD_VAR 0 3
50082: PUSH
50083: LD_INT 0
50085: DOUBLE
50086: EQUAL
50087: IFTRUE 50091
50089: GO 50224
50091: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50092: LD_ADDR_VAR 0 5
50096: PUSH
50097: LD_VAR 0 1
50101: PUSH
50102: LD_INT 4
50104: MINUS
50105: PUSH
50106: LD_VAR 0 2
50110: PUSH
50111: LD_INT 4
50113: MINUS
50114: PUSH
50115: LD_INT 2
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: LIST
50122: PUSH
50123: LD_VAR 0 1
50127: PUSH
50128: LD_INT 3
50130: MINUS
50131: PUSH
50132: LD_VAR 0 2
50136: PUSH
50137: LD_INT 1
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: LIST
50144: PUSH
50145: LD_VAR 0 1
50149: PUSH
50150: LD_INT 4
50152: PLUS
50153: PUSH
50154: LD_VAR 0 2
50158: PUSH
50159: LD_INT 4
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: LIST
50166: PUSH
50167: LD_VAR 0 1
50171: PUSH
50172: LD_INT 3
50174: PLUS
50175: PUSH
50176: LD_VAR 0 2
50180: PUSH
50181: LD_INT 3
50183: PLUS
50184: PUSH
50185: LD_INT 5
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: LIST
50192: PUSH
50193: LD_VAR 0 1
50197: PUSH
50198: LD_VAR 0 2
50202: PUSH
50203: LD_INT 4
50205: PLUS
50206: PUSH
50207: LD_INT 0
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: LIST
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: ST_TO_ADDR
// end ; 1 :
50222: GO 50922
50224: LD_INT 1
50226: DOUBLE
50227: EQUAL
50228: IFTRUE 50232
50230: GO 50365
50232: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
50233: LD_ADDR_VAR 0 5
50237: PUSH
50238: LD_VAR 0 1
50242: PUSH
50243: LD_VAR 0 2
50247: PUSH
50248: LD_INT 4
50250: MINUS
50251: PUSH
50252: LD_INT 3
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: LIST
50259: PUSH
50260: LD_VAR 0 1
50264: PUSH
50265: LD_INT 3
50267: MINUS
50268: PUSH
50269: LD_VAR 0 2
50273: PUSH
50274: LD_INT 3
50276: MINUS
50277: PUSH
50278: LD_INT 2
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: LIST
50285: PUSH
50286: LD_VAR 0 1
50290: PUSH
50291: LD_INT 4
50293: MINUS
50294: PUSH
50295: LD_VAR 0 2
50299: PUSH
50300: LD_INT 1
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: LIST
50307: PUSH
50308: LD_VAR 0 1
50312: PUSH
50313: LD_VAR 0 2
50317: PUSH
50318: LD_INT 3
50320: PLUS
50321: PUSH
50322: LD_INT 0
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: LIST
50329: PUSH
50330: LD_VAR 0 1
50334: PUSH
50335: LD_INT 4
50337: PLUS
50338: PUSH
50339: LD_VAR 0 2
50343: PUSH
50344: LD_INT 4
50346: PLUS
50347: PUSH
50348: LD_INT 5
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: LIST
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: ST_TO_ADDR
// end ; 2 :
50363: GO 50922
50365: LD_INT 2
50367: DOUBLE
50368: EQUAL
50369: IFTRUE 50373
50371: GO 50502
50373: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
50374: LD_ADDR_VAR 0 5
50378: PUSH
50379: LD_VAR 0 1
50383: PUSH
50384: LD_VAR 0 2
50388: PUSH
50389: LD_INT 3
50391: MINUS
50392: PUSH
50393: LD_INT 3
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: LIST
50400: PUSH
50401: LD_VAR 0 1
50405: PUSH
50406: LD_INT 4
50408: PLUS
50409: PUSH
50410: LD_VAR 0 2
50414: PUSH
50415: LD_INT 4
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: LIST
50422: PUSH
50423: LD_VAR 0 1
50427: PUSH
50428: LD_VAR 0 2
50432: PUSH
50433: LD_INT 4
50435: PLUS
50436: PUSH
50437: LD_INT 0
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: LIST
50444: PUSH
50445: LD_VAR 0 1
50449: PUSH
50450: LD_INT 3
50452: MINUS
50453: PUSH
50454: LD_VAR 0 2
50458: PUSH
50459: LD_INT 1
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: LIST
50466: PUSH
50467: LD_VAR 0 1
50471: PUSH
50472: LD_INT 4
50474: MINUS
50475: PUSH
50476: LD_VAR 0 2
50480: PUSH
50481: LD_INT 4
50483: MINUS
50484: PUSH
50485: LD_INT 2
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: LIST
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: ST_TO_ADDR
// end ; 3 :
50500: GO 50922
50502: LD_INT 3
50504: DOUBLE
50505: EQUAL
50506: IFTRUE 50510
50508: GO 50643
50510: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
50511: LD_ADDR_VAR 0 5
50515: PUSH
50516: LD_VAR 0 1
50520: PUSH
50521: LD_INT 3
50523: PLUS
50524: PUSH
50525: LD_VAR 0 2
50529: PUSH
50530: LD_INT 4
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: LIST
50537: PUSH
50538: LD_VAR 0 1
50542: PUSH
50543: LD_INT 4
50545: PLUS
50546: PUSH
50547: LD_VAR 0 2
50551: PUSH
50552: LD_INT 4
50554: PLUS
50555: PUSH
50556: LD_INT 5
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: LIST
50563: PUSH
50564: LD_VAR 0 1
50568: PUSH
50569: LD_INT 4
50571: MINUS
50572: PUSH
50573: LD_VAR 0 2
50577: PUSH
50578: LD_INT 1
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: LIST
50585: PUSH
50586: LD_VAR 0 1
50590: PUSH
50591: LD_VAR 0 2
50595: PUSH
50596: LD_INT 4
50598: MINUS
50599: PUSH
50600: LD_INT 3
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: LIST
50607: PUSH
50608: LD_VAR 0 1
50612: PUSH
50613: LD_INT 3
50615: MINUS
50616: PUSH
50617: LD_VAR 0 2
50621: PUSH
50622: LD_INT 3
50624: MINUS
50625: PUSH
50626: LD_INT 2
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: LIST
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: ST_TO_ADDR
// end ; 4 :
50641: GO 50922
50643: LD_INT 4
50645: DOUBLE
50646: EQUAL
50647: IFTRUE 50651
50649: GO 50784
50651: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
50652: LD_ADDR_VAR 0 5
50656: PUSH
50657: LD_VAR 0 1
50661: PUSH
50662: LD_VAR 0 2
50666: PUSH
50667: LD_INT 4
50669: PLUS
50670: PUSH
50671: LD_INT 0
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: LIST
50678: PUSH
50679: LD_VAR 0 1
50683: PUSH
50684: LD_INT 3
50686: PLUS
50687: PUSH
50688: LD_VAR 0 2
50692: PUSH
50693: LD_INT 3
50695: PLUS
50696: PUSH
50697: LD_INT 5
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: LIST
50704: PUSH
50705: LD_VAR 0 1
50709: PUSH
50710: LD_INT 4
50712: PLUS
50713: PUSH
50714: LD_VAR 0 2
50718: PUSH
50719: LD_INT 4
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: LIST
50726: PUSH
50727: LD_VAR 0 1
50731: PUSH
50732: LD_VAR 0 2
50736: PUSH
50737: LD_INT 3
50739: MINUS
50740: PUSH
50741: LD_INT 3
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: LIST
50748: PUSH
50749: LD_VAR 0 1
50753: PUSH
50754: LD_INT 4
50756: MINUS
50757: PUSH
50758: LD_VAR 0 2
50762: PUSH
50763: LD_INT 4
50765: MINUS
50766: PUSH
50767: LD_INT 2
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: LIST
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: ST_TO_ADDR
// end ; 5 :
50782: GO 50922
50784: LD_INT 5
50786: DOUBLE
50787: EQUAL
50788: IFTRUE 50792
50790: GO 50921
50792: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
50793: LD_ADDR_VAR 0 5
50797: PUSH
50798: LD_VAR 0 1
50802: PUSH
50803: LD_INT 4
50805: MINUS
50806: PUSH
50807: LD_VAR 0 2
50811: PUSH
50812: LD_INT 1
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: LIST
50819: PUSH
50820: LD_VAR 0 1
50824: PUSH
50825: LD_VAR 0 2
50829: PUSH
50830: LD_INT 4
50832: MINUS
50833: PUSH
50834: LD_INT 3
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: LIST
50841: PUSH
50842: LD_VAR 0 1
50846: PUSH
50847: LD_INT 4
50849: PLUS
50850: PUSH
50851: LD_VAR 0 2
50855: PUSH
50856: LD_INT 4
50858: PLUS
50859: PUSH
50860: LD_INT 5
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: LIST
50867: PUSH
50868: LD_VAR 0 1
50872: PUSH
50873: LD_INT 3
50875: PLUS
50876: PUSH
50877: LD_VAR 0 2
50881: PUSH
50882: LD_INT 4
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: LIST
50889: PUSH
50890: LD_VAR 0 1
50894: PUSH
50895: LD_VAR 0 2
50899: PUSH
50900: LD_INT 3
50902: PLUS
50903: PUSH
50904: LD_INT 0
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: LIST
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: ST_TO_ADDR
// end ; end ;
50919: GO 50922
50921: POP
// result := list ;
50922: LD_ADDR_VAR 0 4
50926: PUSH
50927: LD_VAR 0 5
50931: ST_TO_ADDR
// end ;
50932: LD_VAR 0 4
50936: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
50937: LD_INT 0
50939: PPUSH
50940: PPUSH
50941: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
50942: LD_VAR 0 1
50946: NOT
50947: PUSH
50948: LD_VAR 0 2
50952: PUSH
50953: LD_INT 1
50955: PUSH
50956: LD_INT 2
50958: PUSH
50959: LD_INT 3
50961: PUSH
50962: LD_INT 4
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: IN
50971: NOT
50972: OR
50973: IFFALSE 50977
// exit ;
50975: GO 51069
// tmp := [ ] ;
50977: LD_ADDR_VAR 0 5
50981: PUSH
50982: EMPTY
50983: ST_TO_ADDR
// for i in units do
50984: LD_ADDR_VAR 0 4
50988: PUSH
50989: LD_VAR 0 1
50993: PUSH
50994: FOR_IN
50995: IFFALSE 51038
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
50997: LD_ADDR_VAR 0 5
51001: PUSH
51002: LD_VAR 0 5
51006: PPUSH
51007: LD_VAR 0 5
51011: PUSH
51012: LD_INT 1
51014: PLUS
51015: PPUSH
51016: LD_VAR 0 4
51020: PPUSH
51021: LD_VAR 0 2
51025: PPUSH
51026: CALL_OW 259
51030: PPUSH
51031: CALL_OW 2
51035: ST_TO_ADDR
51036: GO 50994
51038: POP
51039: POP
// if not tmp then
51040: LD_VAR 0 5
51044: NOT
51045: IFFALSE 51049
// exit ;
51047: GO 51069
// result := SortListByListDesc ( units , tmp ) ;
51049: LD_ADDR_VAR 0 3
51053: PUSH
51054: LD_VAR 0 1
51058: PPUSH
51059: LD_VAR 0 5
51063: PPUSH
51064: CALL_OW 77
51068: ST_TO_ADDR
// end ;
51069: LD_VAR 0 3
51073: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51074: LD_INT 0
51076: PPUSH
51077: PPUSH
51078: PPUSH
// x := GetX ( building ) ;
51079: LD_ADDR_VAR 0 4
51083: PUSH
51084: LD_VAR 0 2
51088: PPUSH
51089: CALL_OW 250
51093: ST_TO_ADDR
// y := GetY ( building ) ;
51094: LD_ADDR_VAR 0 5
51098: PUSH
51099: LD_VAR 0 2
51103: PPUSH
51104: CALL_OW 251
51108: ST_TO_ADDR
// if GetTaskList ( unit ) then
51109: LD_VAR 0 1
51113: PPUSH
51114: CALL_OW 437
51118: IFFALSE 51213
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51120: LD_STRING e
51122: PUSH
51123: LD_VAR 0 1
51127: PPUSH
51128: CALL_OW 437
51132: PUSH
51133: LD_INT 1
51135: ARRAY
51136: PUSH
51137: LD_INT 1
51139: ARRAY
51140: EQUAL
51141: PUSH
51142: LD_VAR 0 4
51146: PUSH
51147: LD_VAR 0 1
51151: PPUSH
51152: CALL_OW 437
51156: PUSH
51157: LD_INT 1
51159: ARRAY
51160: PUSH
51161: LD_INT 2
51163: ARRAY
51164: EQUAL
51165: AND
51166: PUSH
51167: LD_VAR 0 5
51171: PUSH
51172: LD_VAR 0 1
51176: PPUSH
51177: CALL_OW 437
51181: PUSH
51182: LD_INT 1
51184: ARRAY
51185: PUSH
51186: LD_INT 3
51188: ARRAY
51189: EQUAL
51190: AND
51191: IFFALSE 51203
// result := true else
51193: LD_ADDR_VAR 0 3
51197: PUSH
51198: LD_INT 1
51200: ST_TO_ADDR
51201: GO 51211
// result := false ;
51203: LD_ADDR_VAR 0 3
51207: PUSH
51208: LD_INT 0
51210: ST_TO_ADDR
// end else
51211: GO 51221
// result := false ;
51213: LD_ADDR_VAR 0 3
51217: PUSH
51218: LD_INT 0
51220: ST_TO_ADDR
// end ;
51221: LD_VAR 0 3
51225: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
51226: LD_INT 0
51228: PPUSH
51229: PPUSH
51230: PPUSH
51231: PPUSH
// if not unit or not area then
51232: LD_VAR 0 1
51236: NOT
51237: PUSH
51238: LD_VAR 0 2
51242: NOT
51243: OR
51244: IFFALSE 51248
// exit ;
51246: GO 51412
// tmp := AreaToList ( area , i ) ;
51248: LD_ADDR_VAR 0 6
51252: PUSH
51253: LD_VAR 0 2
51257: PPUSH
51258: LD_VAR 0 5
51262: PPUSH
51263: CALL_OW 517
51267: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
51268: LD_ADDR_VAR 0 5
51272: PUSH
51273: DOUBLE
51274: LD_INT 1
51276: DEC
51277: ST_TO_ADDR
51278: LD_VAR 0 6
51282: PUSH
51283: LD_INT 1
51285: ARRAY
51286: PUSH
51287: FOR_TO
51288: IFFALSE 51410
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
51290: LD_ADDR_VAR 0 7
51294: PUSH
51295: LD_VAR 0 6
51299: PUSH
51300: LD_INT 1
51302: ARRAY
51303: PUSH
51304: LD_VAR 0 5
51308: ARRAY
51309: PUSH
51310: LD_VAR 0 6
51314: PUSH
51315: LD_INT 2
51317: ARRAY
51318: PUSH
51319: LD_VAR 0 5
51323: ARRAY
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
51329: LD_VAR 0 7
51333: PUSH
51334: LD_INT 1
51336: ARRAY
51337: PPUSH
51338: LD_VAR 0 7
51342: PUSH
51343: LD_INT 2
51345: ARRAY
51346: PPUSH
51347: CALL_OW 428
51351: PUSH
51352: LD_INT 0
51354: EQUAL
51355: IFFALSE 51408
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
51357: LD_VAR 0 1
51361: PPUSH
51362: LD_VAR 0 7
51366: PUSH
51367: LD_INT 1
51369: ARRAY
51370: PPUSH
51371: LD_VAR 0 7
51375: PUSH
51376: LD_INT 2
51378: ARRAY
51379: PPUSH
51380: LD_VAR 0 3
51384: PPUSH
51385: CALL_OW 48
// result := IsPlaced ( unit ) ;
51389: LD_ADDR_VAR 0 4
51393: PUSH
51394: LD_VAR 0 1
51398: PPUSH
51399: CALL_OW 305
51403: ST_TO_ADDR
// exit ;
51404: POP
51405: POP
51406: GO 51412
// end ; end ;
51408: GO 51287
51410: POP
51411: POP
// end ;
51412: LD_VAR 0 4
51416: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
51417: LD_INT 0
51419: PPUSH
51420: PPUSH
51421: PPUSH
// if not side or side > 8 then
51422: LD_VAR 0 1
51426: NOT
51427: PUSH
51428: LD_VAR 0 1
51432: PUSH
51433: LD_INT 8
51435: GREATER
51436: OR
51437: IFFALSE 51441
// exit ;
51439: GO 51628
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
51441: LD_ADDR_VAR 0 4
51445: PUSH
51446: LD_INT 22
51448: PUSH
51449: LD_VAR 0 1
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 21
51460: PUSH
51461: LD_INT 3
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PPUSH
51472: CALL_OW 69
51476: ST_TO_ADDR
// if not tmp then
51477: LD_VAR 0 4
51481: NOT
51482: IFFALSE 51486
// exit ;
51484: GO 51628
// enable_addtolog := true ;
51486: LD_ADDR_OWVAR 81
51490: PUSH
51491: LD_INT 1
51493: ST_TO_ADDR
// AddToLog ( [ ) ;
51494: LD_STRING [
51496: PPUSH
51497: CALL_OW 561
// for i in tmp do
51501: LD_ADDR_VAR 0 3
51505: PUSH
51506: LD_VAR 0 4
51510: PUSH
51511: FOR_IN
51512: IFFALSE 51619
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
51514: LD_STRING [
51516: PUSH
51517: LD_VAR 0 3
51521: PPUSH
51522: CALL_OW 266
51526: STR
51527: PUSH
51528: LD_STRING , 
51530: STR
51531: PUSH
51532: LD_VAR 0 3
51536: PPUSH
51537: CALL_OW 250
51541: STR
51542: PUSH
51543: LD_STRING , 
51545: STR
51546: PUSH
51547: LD_VAR 0 3
51551: PPUSH
51552: CALL_OW 251
51556: STR
51557: PUSH
51558: LD_STRING , 
51560: STR
51561: PUSH
51562: LD_VAR 0 3
51566: PPUSH
51567: CALL_OW 254
51571: STR
51572: PUSH
51573: LD_STRING , 
51575: STR
51576: PUSH
51577: LD_VAR 0 3
51581: PPUSH
51582: LD_INT 1
51584: PPUSH
51585: CALL_OW 268
51589: STR
51590: PUSH
51591: LD_STRING , 
51593: STR
51594: PUSH
51595: LD_VAR 0 3
51599: PPUSH
51600: LD_INT 2
51602: PPUSH
51603: CALL_OW 268
51607: STR
51608: PUSH
51609: LD_STRING ],
51611: STR
51612: PPUSH
51613: CALL_OW 561
// end ;
51617: GO 51511
51619: POP
51620: POP
// AddToLog ( ]; ) ;
51621: LD_STRING ];
51623: PPUSH
51624: CALL_OW 561
// end ;
51628: LD_VAR 0 2
51632: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
51633: LD_INT 0
51635: PPUSH
51636: PPUSH
51637: PPUSH
51638: PPUSH
51639: PPUSH
// if not area or not rate or not max then
51640: LD_VAR 0 1
51644: NOT
51645: PUSH
51646: LD_VAR 0 2
51650: NOT
51651: OR
51652: PUSH
51653: LD_VAR 0 4
51657: NOT
51658: OR
51659: IFFALSE 51663
// exit ;
51661: GO 51855
// while 1 do
51663: LD_INT 1
51665: IFFALSE 51855
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
51667: LD_ADDR_VAR 0 9
51671: PUSH
51672: LD_VAR 0 1
51676: PPUSH
51677: LD_INT 1
51679: PPUSH
51680: CALL_OW 287
51684: PUSH
51685: LD_INT 10
51687: MUL
51688: ST_TO_ADDR
// r := rate / 10 ;
51689: LD_ADDR_VAR 0 7
51693: PUSH
51694: LD_VAR 0 2
51698: PUSH
51699: LD_INT 10
51701: DIVREAL
51702: ST_TO_ADDR
// time := 1 1$00 ;
51703: LD_ADDR_VAR 0 8
51707: PUSH
51708: LD_INT 2100
51710: ST_TO_ADDR
// if amount < min then
51711: LD_VAR 0 9
51715: PUSH
51716: LD_VAR 0 3
51720: LESS
51721: IFFALSE 51739
// r := r * 2 else
51723: LD_ADDR_VAR 0 7
51727: PUSH
51728: LD_VAR 0 7
51732: PUSH
51733: LD_INT 2
51735: MUL
51736: ST_TO_ADDR
51737: GO 51765
// if amount > max then
51739: LD_VAR 0 9
51743: PUSH
51744: LD_VAR 0 4
51748: GREATER
51749: IFFALSE 51765
// r := r / 2 ;
51751: LD_ADDR_VAR 0 7
51755: PUSH
51756: LD_VAR 0 7
51760: PUSH
51761: LD_INT 2
51763: DIVREAL
51764: ST_TO_ADDR
// time := time / r ;
51765: LD_ADDR_VAR 0 8
51769: PUSH
51770: LD_VAR 0 8
51774: PUSH
51775: LD_VAR 0 7
51779: DIVREAL
51780: ST_TO_ADDR
// if time < 0 then
51781: LD_VAR 0 8
51785: PUSH
51786: LD_INT 0
51788: LESS
51789: IFFALSE 51806
// time := time * - 1 ;
51791: LD_ADDR_VAR 0 8
51795: PUSH
51796: LD_VAR 0 8
51800: PUSH
51801: LD_INT 1
51803: NEG
51804: MUL
51805: ST_TO_ADDR
// wait ( time ) ;
51806: LD_VAR 0 8
51810: PPUSH
51811: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
51815: LD_INT 35
51817: PPUSH
51818: LD_INT 875
51820: PPUSH
51821: CALL_OW 12
51825: PPUSH
51826: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
51830: LD_INT 1
51832: PPUSH
51833: LD_INT 5
51835: PPUSH
51836: CALL_OW 12
51840: PPUSH
51841: LD_VAR 0 1
51845: PPUSH
51846: LD_INT 1
51848: PPUSH
51849: CALL_OW 55
// end ;
51853: GO 51663
// end ;
51855: LD_VAR 0 5
51859: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
51860: LD_INT 0
51862: PPUSH
51863: PPUSH
51864: PPUSH
51865: PPUSH
51866: PPUSH
51867: PPUSH
51868: PPUSH
51869: PPUSH
// if not turrets or not factories then
51870: LD_VAR 0 1
51874: NOT
51875: PUSH
51876: LD_VAR 0 2
51880: NOT
51881: OR
51882: IFFALSE 51886
// exit ;
51884: GO 52193
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
51886: LD_ADDR_VAR 0 10
51890: PUSH
51891: LD_INT 5
51893: PUSH
51894: LD_INT 6
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 2
51903: PUSH
51904: LD_INT 4
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 3
51913: PUSH
51914: LD_INT 5
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 24
51928: PUSH
51929: LD_INT 25
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 23
51938: PUSH
51939: LD_INT 27
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 42
51952: PUSH
51953: LD_INT 43
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 44
51962: PUSH
51963: LD_INT 46
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 45
51972: PUSH
51973: LD_INT 47
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: LIST
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: LIST
51989: ST_TO_ADDR
// result := [ ] ;
51990: LD_ADDR_VAR 0 3
51994: PUSH
51995: EMPTY
51996: ST_TO_ADDR
// for i in turrets do
51997: LD_ADDR_VAR 0 4
52001: PUSH
52002: LD_VAR 0 1
52006: PUSH
52007: FOR_IN
52008: IFFALSE 52191
// begin nat := GetNation ( i ) ;
52010: LD_ADDR_VAR 0 7
52014: PUSH
52015: LD_VAR 0 4
52019: PPUSH
52020: CALL_OW 248
52024: ST_TO_ADDR
// weapon := 0 ;
52025: LD_ADDR_VAR 0 8
52029: PUSH
52030: LD_INT 0
52032: ST_TO_ADDR
// if not nat then
52033: LD_VAR 0 7
52037: NOT
52038: IFFALSE 52042
// continue ;
52040: GO 52007
// for j in list [ nat ] do
52042: LD_ADDR_VAR 0 5
52046: PUSH
52047: LD_VAR 0 10
52051: PUSH
52052: LD_VAR 0 7
52056: ARRAY
52057: PUSH
52058: FOR_IN
52059: IFFALSE 52100
// if GetBWeapon ( i ) = j [ 1 ] then
52061: LD_VAR 0 4
52065: PPUSH
52066: CALL_OW 269
52070: PUSH
52071: LD_VAR 0 5
52075: PUSH
52076: LD_INT 1
52078: ARRAY
52079: EQUAL
52080: IFFALSE 52098
// begin weapon := j [ 2 ] ;
52082: LD_ADDR_VAR 0 8
52086: PUSH
52087: LD_VAR 0 5
52091: PUSH
52092: LD_INT 2
52094: ARRAY
52095: ST_TO_ADDR
// break ;
52096: GO 52100
// end ;
52098: GO 52058
52100: POP
52101: POP
// if not weapon then
52102: LD_VAR 0 8
52106: NOT
52107: IFFALSE 52111
// continue ;
52109: GO 52007
// for k in factories do
52111: LD_ADDR_VAR 0 6
52115: PUSH
52116: LD_VAR 0 2
52120: PUSH
52121: FOR_IN
52122: IFFALSE 52187
// begin weapons := AvailableWeaponList ( k ) ;
52124: LD_ADDR_VAR 0 9
52128: PUSH
52129: LD_VAR 0 6
52133: PPUSH
52134: CALL_OW 478
52138: ST_TO_ADDR
// if not weapons then
52139: LD_VAR 0 9
52143: NOT
52144: IFFALSE 52148
// continue ;
52146: GO 52121
// if weapon in weapons then
52148: LD_VAR 0 8
52152: PUSH
52153: LD_VAR 0 9
52157: IN
52158: IFFALSE 52185
// begin result := [ i , weapon ] ;
52160: LD_ADDR_VAR 0 3
52164: PUSH
52165: LD_VAR 0 4
52169: PUSH
52170: LD_VAR 0 8
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: ST_TO_ADDR
// exit ;
52179: POP
52180: POP
52181: POP
52182: POP
52183: GO 52193
// end ; end ;
52185: GO 52121
52187: POP
52188: POP
// end ;
52189: GO 52007
52191: POP
52192: POP
// end ;
52193: LD_VAR 0 3
52197: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
52198: LD_INT 0
52200: PPUSH
// if not side or side > 8 then
52201: LD_VAR 0 3
52205: NOT
52206: PUSH
52207: LD_VAR 0 3
52211: PUSH
52212: LD_INT 8
52214: GREATER
52215: OR
52216: IFFALSE 52220
// exit ;
52218: GO 52279
// if not range then
52220: LD_VAR 0 4
52224: NOT
52225: IFFALSE 52236
// range := - 12 ;
52227: LD_ADDR_VAR 0 4
52231: PUSH
52232: LD_INT 12
52234: NEG
52235: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
52236: LD_VAR 0 1
52240: PPUSH
52241: LD_VAR 0 2
52245: PPUSH
52246: LD_VAR 0 3
52250: PPUSH
52251: LD_VAR 0 4
52255: PPUSH
52256: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
52260: LD_VAR 0 1
52264: PPUSH
52265: LD_VAR 0 2
52269: PPUSH
52270: LD_VAR 0 3
52274: PPUSH
52275: CALL_OW 331
// end ;
52279: LD_VAR 0 5
52283: RET
// export function Video ( mode ) ; begin
52284: LD_INT 0
52286: PPUSH
// ingame_video = mode ;
52287: LD_ADDR_OWVAR 52
52291: PUSH
52292: LD_VAR 0 1
52296: ST_TO_ADDR
// interface_hidden = mode ;
52297: LD_ADDR_OWVAR 54
52301: PUSH
52302: LD_VAR 0 1
52306: ST_TO_ADDR
// end ;
52307: LD_VAR 0 2
52311: RET
// export function Join ( array , element ) ; begin
52312: LD_INT 0
52314: PPUSH
// result := array ^ element ;
52315: LD_ADDR_VAR 0 3
52319: PUSH
52320: LD_VAR 0 1
52324: PUSH
52325: LD_VAR 0 2
52329: ADD
52330: ST_TO_ADDR
// end ;
52331: LD_VAR 0 3
52335: RET
// export function JoinUnion ( array , element ) ; begin
52336: LD_INT 0
52338: PPUSH
// result := array union element ;
52339: LD_ADDR_VAR 0 3
52343: PUSH
52344: LD_VAR 0 1
52348: PUSH
52349: LD_VAR 0 2
52353: UNION
52354: ST_TO_ADDR
// end ;
52355: LD_VAR 0 3
52359: RET
// export function GetBehemoths ( side ) ; begin
52360: LD_INT 0
52362: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
52363: LD_ADDR_VAR 0 2
52367: PUSH
52368: LD_INT 22
52370: PUSH
52371: LD_VAR 0 1
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 31
52382: PUSH
52383: LD_INT 25
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PPUSH
52394: CALL_OW 69
52398: ST_TO_ADDR
// end ;
52399: LD_VAR 0 2
52403: RET
// export function Shuffle ( array ) ; var i , index ; begin
52404: LD_INT 0
52406: PPUSH
52407: PPUSH
52408: PPUSH
// result := [ ] ;
52409: LD_ADDR_VAR 0 2
52413: PUSH
52414: EMPTY
52415: ST_TO_ADDR
// if not array then
52416: LD_VAR 0 1
52420: NOT
52421: IFFALSE 52425
// exit ;
52423: GO 52524
// Randomize ;
52425: CALL_OW 10
// for i = array downto 1 do
52429: LD_ADDR_VAR 0 3
52433: PUSH
52434: DOUBLE
52435: LD_VAR 0 1
52439: INC
52440: ST_TO_ADDR
52441: LD_INT 1
52443: PUSH
52444: FOR_DOWNTO
52445: IFFALSE 52522
// begin index := rand ( 1 , array ) ;
52447: LD_ADDR_VAR 0 4
52451: PUSH
52452: LD_INT 1
52454: PPUSH
52455: LD_VAR 0 1
52459: PPUSH
52460: CALL_OW 12
52464: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
52465: LD_ADDR_VAR 0 2
52469: PUSH
52470: LD_VAR 0 2
52474: PPUSH
52475: LD_VAR 0 2
52479: PUSH
52480: LD_INT 1
52482: PLUS
52483: PPUSH
52484: LD_VAR 0 1
52488: PUSH
52489: LD_VAR 0 4
52493: ARRAY
52494: PPUSH
52495: CALL_OW 2
52499: ST_TO_ADDR
// array := Delete ( array , index ) ;
52500: LD_ADDR_VAR 0 1
52504: PUSH
52505: LD_VAR 0 1
52509: PPUSH
52510: LD_VAR 0 4
52514: PPUSH
52515: CALL_OW 3
52519: ST_TO_ADDR
// end ;
52520: GO 52444
52522: POP
52523: POP
// end ; end_of_file
52524: LD_VAR 0 2
52528: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
52529: GO 52531
52531: DISABLE
// begin ru_radar := 98 ;
52532: LD_ADDR_EXP 45
52536: PUSH
52537: LD_INT 98
52539: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
52540: LD_ADDR_EXP 46
52544: PUSH
52545: LD_INT 89
52547: ST_TO_ADDR
// us_hack := 99 ;
52548: LD_ADDR_EXP 47
52552: PUSH
52553: LD_INT 99
52555: ST_TO_ADDR
// us_artillery := 97 ;
52556: LD_ADDR_EXP 48
52560: PUSH
52561: LD_INT 97
52563: ST_TO_ADDR
// ar_bio_bomb := 91 ;
52564: LD_ADDR_EXP 49
52568: PUSH
52569: LD_INT 91
52571: ST_TO_ADDR
// end ; end_of_file
52572: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
52573: LD_INT 0
52575: PPUSH
52576: PPUSH
// skirmish := false ;
52577: LD_ADDR_EXP 50
52581: PUSH
52582: LD_INT 0
52584: ST_TO_ADDR
// debug_mc := false ;
52585: LD_ADDR_EXP 51
52589: PUSH
52590: LD_INT 0
52592: ST_TO_ADDR
// mc_bases := [ ] ;
52593: LD_ADDR_EXP 52
52597: PUSH
52598: EMPTY
52599: ST_TO_ADDR
// mc_sides := [ ] ;
52600: LD_ADDR_EXP 78
52604: PUSH
52605: EMPTY
52606: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
52607: LD_ADDR_EXP 53
52611: PUSH
52612: EMPTY
52613: ST_TO_ADDR
// mc_building_repairs := [ ] ;
52614: LD_ADDR_EXP 54
52618: PUSH
52619: EMPTY
52620: ST_TO_ADDR
// mc_need_heal := [ ] ;
52621: LD_ADDR_EXP 55
52625: PUSH
52626: EMPTY
52627: ST_TO_ADDR
// mc_healers := [ ] ;
52628: LD_ADDR_EXP 56
52632: PUSH
52633: EMPTY
52634: ST_TO_ADDR
// mc_build_list := [ ] ;
52635: LD_ADDR_EXP 57
52639: PUSH
52640: EMPTY
52641: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
52642: LD_ADDR_EXP 84
52646: PUSH
52647: EMPTY
52648: ST_TO_ADDR
// mc_builders := [ ] ;
52649: LD_ADDR_EXP 58
52653: PUSH
52654: EMPTY
52655: ST_TO_ADDR
// mc_construct_list := [ ] ;
52656: LD_ADDR_EXP 59
52660: PUSH
52661: EMPTY
52662: ST_TO_ADDR
// mc_turret_list := [ ] ;
52663: LD_ADDR_EXP 60
52667: PUSH
52668: EMPTY
52669: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
52670: LD_ADDR_EXP 61
52674: PUSH
52675: EMPTY
52676: ST_TO_ADDR
// mc_miners := [ ] ;
52677: LD_ADDR_EXP 66
52681: PUSH
52682: EMPTY
52683: ST_TO_ADDR
// mc_mines := [ ] ;
52684: LD_ADDR_EXP 65
52688: PUSH
52689: EMPTY
52690: ST_TO_ADDR
// mc_minefields := [ ] ;
52691: LD_ADDR_EXP 67
52695: PUSH
52696: EMPTY
52697: ST_TO_ADDR
// mc_crates := [ ] ;
52698: LD_ADDR_EXP 68
52702: PUSH
52703: EMPTY
52704: ST_TO_ADDR
// mc_crates_collector := [ ] ;
52705: LD_ADDR_EXP 69
52709: PUSH
52710: EMPTY
52711: ST_TO_ADDR
// mc_crates_area := [ ] ;
52712: LD_ADDR_EXP 70
52716: PUSH
52717: EMPTY
52718: ST_TO_ADDR
// mc_vehicles := [ ] ;
52719: LD_ADDR_EXP 71
52723: PUSH
52724: EMPTY
52725: ST_TO_ADDR
// mc_attack := [ ] ;
52726: LD_ADDR_EXP 72
52730: PUSH
52731: EMPTY
52732: ST_TO_ADDR
// mc_produce := [ ] ;
52733: LD_ADDR_EXP 73
52737: PUSH
52738: EMPTY
52739: ST_TO_ADDR
// mc_defender := [ ] ;
52740: LD_ADDR_EXP 74
52744: PUSH
52745: EMPTY
52746: ST_TO_ADDR
// mc_parking := [ ] ;
52747: LD_ADDR_EXP 76
52751: PUSH
52752: EMPTY
52753: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
52754: LD_ADDR_EXP 62
52758: PUSH
52759: EMPTY
52760: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
52761: LD_ADDR_EXP 64
52765: PUSH
52766: EMPTY
52767: ST_TO_ADDR
// mc_scan := [ ] ;
52768: LD_ADDR_EXP 75
52772: PUSH
52773: EMPTY
52774: ST_TO_ADDR
// mc_scan_area := [ ] ;
52775: LD_ADDR_EXP 77
52779: PUSH
52780: EMPTY
52781: ST_TO_ADDR
// mc_tech := [ ] ;
52782: LD_ADDR_EXP 79
52786: PUSH
52787: EMPTY
52788: ST_TO_ADDR
// mc_class := [ ] ;
52789: LD_ADDR_EXP 93
52793: PUSH
52794: EMPTY
52795: ST_TO_ADDR
// mc_class_case_use := [ ] ;
52796: LD_ADDR_EXP 94
52800: PUSH
52801: EMPTY
52802: ST_TO_ADDR
// end ;
52803: LD_VAR 0 1
52807: RET
// export function MC_Kill ( base ) ; begin
52808: LD_INT 0
52810: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
52811: LD_ADDR_EXP 52
52815: PUSH
52816: LD_EXP 52
52820: PPUSH
52821: LD_VAR 0 1
52825: PPUSH
52826: EMPTY
52827: PPUSH
52828: CALL_OW 1
52832: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
52833: LD_ADDR_EXP 53
52837: PUSH
52838: LD_EXP 53
52842: PPUSH
52843: LD_VAR 0 1
52847: PPUSH
52848: EMPTY
52849: PPUSH
52850: CALL_OW 1
52854: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
52855: LD_ADDR_EXP 54
52859: PUSH
52860: LD_EXP 54
52864: PPUSH
52865: LD_VAR 0 1
52869: PPUSH
52870: EMPTY
52871: PPUSH
52872: CALL_OW 1
52876: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
52877: LD_ADDR_EXP 55
52881: PUSH
52882: LD_EXP 55
52886: PPUSH
52887: LD_VAR 0 1
52891: PPUSH
52892: EMPTY
52893: PPUSH
52894: CALL_OW 1
52898: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
52899: LD_ADDR_EXP 56
52903: PUSH
52904: LD_EXP 56
52908: PPUSH
52909: LD_VAR 0 1
52913: PPUSH
52914: EMPTY
52915: PPUSH
52916: CALL_OW 1
52920: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
52921: LD_ADDR_EXP 57
52925: PUSH
52926: LD_EXP 57
52930: PPUSH
52931: LD_VAR 0 1
52935: PPUSH
52936: EMPTY
52937: PPUSH
52938: CALL_OW 1
52942: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
52943: LD_ADDR_EXP 58
52947: PUSH
52948: LD_EXP 58
52952: PPUSH
52953: LD_VAR 0 1
52957: PPUSH
52958: EMPTY
52959: PPUSH
52960: CALL_OW 1
52964: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
52965: LD_ADDR_EXP 59
52969: PUSH
52970: LD_EXP 59
52974: PPUSH
52975: LD_VAR 0 1
52979: PPUSH
52980: EMPTY
52981: PPUSH
52982: CALL_OW 1
52986: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
52987: LD_ADDR_EXP 60
52991: PUSH
52992: LD_EXP 60
52996: PPUSH
52997: LD_VAR 0 1
53001: PPUSH
53002: EMPTY
53003: PPUSH
53004: CALL_OW 1
53008: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
53009: LD_ADDR_EXP 61
53013: PUSH
53014: LD_EXP 61
53018: PPUSH
53019: LD_VAR 0 1
53023: PPUSH
53024: EMPTY
53025: PPUSH
53026: CALL_OW 1
53030: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
53031: LD_ADDR_EXP 62
53035: PUSH
53036: LD_EXP 62
53040: PPUSH
53041: LD_VAR 0 1
53045: PPUSH
53046: EMPTY
53047: PPUSH
53048: CALL_OW 1
53052: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
53053: LD_ADDR_EXP 63
53057: PUSH
53058: LD_EXP 63
53062: PPUSH
53063: LD_VAR 0 1
53067: PPUSH
53068: LD_INT 0
53070: PPUSH
53071: CALL_OW 1
53075: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
53076: LD_ADDR_EXP 64
53080: PUSH
53081: LD_EXP 64
53085: PPUSH
53086: LD_VAR 0 1
53090: PPUSH
53091: EMPTY
53092: PPUSH
53093: CALL_OW 1
53097: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
53098: LD_ADDR_EXP 65
53102: PUSH
53103: LD_EXP 65
53107: PPUSH
53108: LD_VAR 0 1
53112: PPUSH
53113: EMPTY
53114: PPUSH
53115: CALL_OW 1
53119: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
53120: LD_ADDR_EXP 66
53124: PUSH
53125: LD_EXP 66
53129: PPUSH
53130: LD_VAR 0 1
53134: PPUSH
53135: EMPTY
53136: PPUSH
53137: CALL_OW 1
53141: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
53142: LD_ADDR_EXP 67
53146: PUSH
53147: LD_EXP 67
53151: PPUSH
53152: LD_VAR 0 1
53156: PPUSH
53157: EMPTY
53158: PPUSH
53159: CALL_OW 1
53163: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
53164: LD_ADDR_EXP 68
53168: PUSH
53169: LD_EXP 68
53173: PPUSH
53174: LD_VAR 0 1
53178: PPUSH
53179: EMPTY
53180: PPUSH
53181: CALL_OW 1
53185: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
53186: LD_ADDR_EXP 69
53190: PUSH
53191: LD_EXP 69
53195: PPUSH
53196: LD_VAR 0 1
53200: PPUSH
53201: EMPTY
53202: PPUSH
53203: CALL_OW 1
53207: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
53208: LD_ADDR_EXP 70
53212: PUSH
53213: LD_EXP 70
53217: PPUSH
53218: LD_VAR 0 1
53222: PPUSH
53223: EMPTY
53224: PPUSH
53225: CALL_OW 1
53229: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
53230: LD_ADDR_EXP 71
53234: PUSH
53235: LD_EXP 71
53239: PPUSH
53240: LD_VAR 0 1
53244: PPUSH
53245: EMPTY
53246: PPUSH
53247: CALL_OW 1
53251: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
53252: LD_ADDR_EXP 72
53256: PUSH
53257: LD_EXP 72
53261: PPUSH
53262: LD_VAR 0 1
53266: PPUSH
53267: EMPTY
53268: PPUSH
53269: CALL_OW 1
53273: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
53274: LD_ADDR_EXP 73
53278: PUSH
53279: LD_EXP 73
53283: PPUSH
53284: LD_VAR 0 1
53288: PPUSH
53289: EMPTY
53290: PPUSH
53291: CALL_OW 1
53295: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
53296: LD_ADDR_EXP 74
53300: PUSH
53301: LD_EXP 74
53305: PPUSH
53306: LD_VAR 0 1
53310: PPUSH
53311: EMPTY
53312: PPUSH
53313: CALL_OW 1
53317: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
53318: LD_ADDR_EXP 75
53322: PUSH
53323: LD_EXP 75
53327: PPUSH
53328: LD_VAR 0 1
53332: PPUSH
53333: EMPTY
53334: PPUSH
53335: CALL_OW 1
53339: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
53340: LD_ADDR_EXP 76
53344: PUSH
53345: LD_EXP 76
53349: PPUSH
53350: LD_VAR 0 1
53354: PPUSH
53355: EMPTY
53356: PPUSH
53357: CALL_OW 1
53361: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
53362: LD_ADDR_EXP 77
53366: PUSH
53367: LD_EXP 77
53371: PPUSH
53372: LD_VAR 0 1
53376: PPUSH
53377: EMPTY
53378: PPUSH
53379: CALL_OW 1
53383: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
53384: LD_ADDR_EXP 79
53388: PUSH
53389: LD_EXP 79
53393: PPUSH
53394: LD_VAR 0 1
53398: PPUSH
53399: EMPTY
53400: PPUSH
53401: CALL_OW 1
53405: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
53406: LD_ADDR_EXP 81
53410: PUSH
53411: LD_EXP 81
53415: PPUSH
53416: LD_VAR 0 1
53420: PPUSH
53421: EMPTY
53422: PPUSH
53423: CALL_OW 1
53427: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
53428: LD_ADDR_EXP 82
53432: PUSH
53433: LD_EXP 82
53437: PPUSH
53438: LD_VAR 0 1
53442: PPUSH
53443: EMPTY
53444: PPUSH
53445: CALL_OW 1
53449: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
53450: LD_ADDR_EXP 83
53454: PUSH
53455: LD_EXP 83
53459: PPUSH
53460: LD_VAR 0 1
53464: PPUSH
53465: EMPTY
53466: PPUSH
53467: CALL_OW 1
53471: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
53472: LD_ADDR_EXP 84
53476: PUSH
53477: LD_EXP 84
53481: PPUSH
53482: LD_VAR 0 1
53486: PPUSH
53487: EMPTY
53488: PPUSH
53489: CALL_OW 1
53493: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
53494: LD_ADDR_EXP 85
53498: PUSH
53499: LD_EXP 85
53503: PPUSH
53504: LD_VAR 0 1
53508: PPUSH
53509: EMPTY
53510: PPUSH
53511: CALL_OW 1
53515: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
53516: LD_ADDR_EXP 86
53520: PUSH
53521: LD_EXP 86
53525: PPUSH
53526: LD_VAR 0 1
53530: PPUSH
53531: EMPTY
53532: PPUSH
53533: CALL_OW 1
53537: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
53538: LD_ADDR_EXP 87
53542: PUSH
53543: LD_EXP 87
53547: PPUSH
53548: LD_VAR 0 1
53552: PPUSH
53553: EMPTY
53554: PPUSH
53555: CALL_OW 1
53559: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
53560: LD_ADDR_EXP 88
53564: PUSH
53565: LD_EXP 88
53569: PPUSH
53570: LD_VAR 0 1
53574: PPUSH
53575: EMPTY
53576: PPUSH
53577: CALL_OW 1
53581: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
53582: LD_ADDR_EXP 89
53586: PUSH
53587: LD_EXP 89
53591: PPUSH
53592: LD_VAR 0 1
53596: PPUSH
53597: EMPTY
53598: PPUSH
53599: CALL_OW 1
53603: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
53604: LD_ADDR_EXP 90
53608: PUSH
53609: LD_EXP 90
53613: PPUSH
53614: LD_VAR 0 1
53618: PPUSH
53619: EMPTY
53620: PPUSH
53621: CALL_OW 1
53625: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
53626: LD_ADDR_EXP 91
53630: PUSH
53631: LD_EXP 91
53635: PPUSH
53636: LD_VAR 0 1
53640: PPUSH
53641: EMPTY
53642: PPUSH
53643: CALL_OW 1
53647: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
53648: LD_ADDR_EXP 92
53652: PUSH
53653: LD_EXP 92
53657: PPUSH
53658: LD_VAR 0 1
53662: PPUSH
53663: EMPTY
53664: PPUSH
53665: CALL_OW 1
53669: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
53670: LD_ADDR_EXP 93
53674: PUSH
53675: LD_EXP 93
53679: PPUSH
53680: LD_VAR 0 1
53684: PPUSH
53685: EMPTY
53686: PPUSH
53687: CALL_OW 1
53691: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
53692: LD_ADDR_EXP 94
53696: PUSH
53697: LD_EXP 94
53701: PPUSH
53702: LD_VAR 0 1
53706: PPUSH
53707: LD_INT 0
53709: PPUSH
53710: CALL_OW 1
53714: ST_TO_ADDR
// end ;
53715: LD_VAR 0 2
53719: RET
// export function MC_Add ( side , units ) ; var base ; begin
53720: LD_INT 0
53722: PPUSH
53723: PPUSH
// base := mc_bases + 1 ;
53724: LD_ADDR_VAR 0 4
53728: PUSH
53729: LD_EXP 52
53733: PUSH
53734: LD_INT 1
53736: PLUS
53737: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
53738: LD_ADDR_EXP 78
53742: PUSH
53743: LD_EXP 78
53747: PPUSH
53748: LD_VAR 0 4
53752: PPUSH
53753: LD_VAR 0 1
53757: PPUSH
53758: CALL_OW 1
53762: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
53763: LD_ADDR_EXP 52
53767: PUSH
53768: LD_EXP 52
53772: PPUSH
53773: LD_VAR 0 4
53777: PPUSH
53778: LD_VAR 0 2
53782: PPUSH
53783: CALL_OW 1
53787: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
53788: LD_ADDR_EXP 53
53792: PUSH
53793: LD_EXP 53
53797: PPUSH
53798: LD_VAR 0 4
53802: PPUSH
53803: EMPTY
53804: PPUSH
53805: CALL_OW 1
53809: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
53810: LD_ADDR_EXP 54
53814: PUSH
53815: LD_EXP 54
53819: PPUSH
53820: LD_VAR 0 4
53824: PPUSH
53825: EMPTY
53826: PPUSH
53827: CALL_OW 1
53831: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
53832: LD_ADDR_EXP 55
53836: PUSH
53837: LD_EXP 55
53841: PPUSH
53842: LD_VAR 0 4
53846: PPUSH
53847: EMPTY
53848: PPUSH
53849: CALL_OW 1
53853: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
53854: LD_ADDR_EXP 56
53858: PUSH
53859: LD_EXP 56
53863: PPUSH
53864: LD_VAR 0 4
53868: PPUSH
53869: EMPTY
53870: PPUSH
53871: CALL_OW 1
53875: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
53876: LD_ADDR_EXP 57
53880: PUSH
53881: LD_EXP 57
53885: PPUSH
53886: LD_VAR 0 4
53890: PPUSH
53891: EMPTY
53892: PPUSH
53893: CALL_OW 1
53897: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
53898: LD_ADDR_EXP 58
53902: PUSH
53903: LD_EXP 58
53907: PPUSH
53908: LD_VAR 0 4
53912: PPUSH
53913: EMPTY
53914: PPUSH
53915: CALL_OW 1
53919: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
53920: LD_ADDR_EXP 59
53924: PUSH
53925: LD_EXP 59
53929: PPUSH
53930: LD_VAR 0 4
53934: PPUSH
53935: EMPTY
53936: PPUSH
53937: CALL_OW 1
53941: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
53942: LD_ADDR_EXP 60
53946: PUSH
53947: LD_EXP 60
53951: PPUSH
53952: LD_VAR 0 4
53956: PPUSH
53957: EMPTY
53958: PPUSH
53959: CALL_OW 1
53963: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
53964: LD_ADDR_EXP 61
53968: PUSH
53969: LD_EXP 61
53973: PPUSH
53974: LD_VAR 0 4
53978: PPUSH
53979: EMPTY
53980: PPUSH
53981: CALL_OW 1
53985: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
53986: LD_ADDR_EXP 62
53990: PUSH
53991: LD_EXP 62
53995: PPUSH
53996: LD_VAR 0 4
54000: PPUSH
54001: EMPTY
54002: PPUSH
54003: CALL_OW 1
54007: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
54008: LD_ADDR_EXP 63
54012: PUSH
54013: LD_EXP 63
54017: PPUSH
54018: LD_VAR 0 4
54022: PPUSH
54023: LD_INT 0
54025: PPUSH
54026: CALL_OW 1
54030: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
54031: LD_ADDR_EXP 64
54035: PUSH
54036: LD_EXP 64
54040: PPUSH
54041: LD_VAR 0 4
54045: PPUSH
54046: EMPTY
54047: PPUSH
54048: CALL_OW 1
54052: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
54053: LD_ADDR_EXP 65
54057: PUSH
54058: LD_EXP 65
54062: PPUSH
54063: LD_VAR 0 4
54067: PPUSH
54068: EMPTY
54069: PPUSH
54070: CALL_OW 1
54074: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
54075: LD_ADDR_EXP 66
54079: PUSH
54080: LD_EXP 66
54084: PPUSH
54085: LD_VAR 0 4
54089: PPUSH
54090: EMPTY
54091: PPUSH
54092: CALL_OW 1
54096: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
54097: LD_ADDR_EXP 67
54101: PUSH
54102: LD_EXP 67
54106: PPUSH
54107: LD_VAR 0 4
54111: PPUSH
54112: EMPTY
54113: PPUSH
54114: CALL_OW 1
54118: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
54119: LD_ADDR_EXP 68
54123: PUSH
54124: LD_EXP 68
54128: PPUSH
54129: LD_VAR 0 4
54133: PPUSH
54134: EMPTY
54135: PPUSH
54136: CALL_OW 1
54140: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
54141: LD_ADDR_EXP 69
54145: PUSH
54146: LD_EXP 69
54150: PPUSH
54151: LD_VAR 0 4
54155: PPUSH
54156: EMPTY
54157: PPUSH
54158: CALL_OW 1
54162: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
54163: LD_ADDR_EXP 70
54167: PUSH
54168: LD_EXP 70
54172: PPUSH
54173: LD_VAR 0 4
54177: PPUSH
54178: EMPTY
54179: PPUSH
54180: CALL_OW 1
54184: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
54185: LD_ADDR_EXP 71
54189: PUSH
54190: LD_EXP 71
54194: PPUSH
54195: LD_VAR 0 4
54199: PPUSH
54200: EMPTY
54201: PPUSH
54202: CALL_OW 1
54206: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
54207: LD_ADDR_EXP 72
54211: PUSH
54212: LD_EXP 72
54216: PPUSH
54217: LD_VAR 0 4
54221: PPUSH
54222: EMPTY
54223: PPUSH
54224: CALL_OW 1
54228: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
54229: LD_ADDR_EXP 73
54233: PUSH
54234: LD_EXP 73
54238: PPUSH
54239: LD_VAR 0 4
54243: PPUSH
54244: EMPTY
54245: PPUSH
54246: CALL_OW 1
54250: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
54251: LD_ADDR_EXP 74
54255: PUSH
54256: LD_EXP 74
54260: PPUSH
54261: LD_VAR 0 4
54265: PPUSH
54266: EMPTY
54267: PPUSH
54268: CALL_OW 1
54272: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
54273: LD_ADDR_EXP 75
54277: PUSH
54278: LD_EXP 75
54282: PPUSH
54283: LD_VAR 0 4
54287: PPUSH
54288: EMPTY
54289: PPUSH
54290: CALL_OW 1
54294: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
54295: LD_ADDR_EXP 76
54299: PUSH
54300: LD_EXP 76
54304: PPUSH
54305: LD_VAR 0 4
54309: PPUSH
54310: EMPTY
54311: PPUSH
54312: CALL_OW 1
54316: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
54317: LD_ADDR_EXP 77
54321: PUSH
54322: LD_EXP 77
54326: PPUSH
54327: LD_VAR 0 4
54331: PPUSH
54332: EMPTY
54333: PPUSH
54334: CALL_OW 1
54338: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
54339: LD_ADDR_EXP 79
54343: PUSH
54344: LD_EXP 79
54348: PPUSH
54349: LD_VAR 0 4
54353: PPUSH
54354: EMPTY
54355: PPUSH
54356: CALL_OW 1
54360: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
54361: LD_ADDR_EXP 81
54365: PUSH
54366: LD_EXP 81
54370: PPUSH
54371: LD_VAR 0 4
54375: PPUSH
54376: EMPTY
54377: PPUSH
54378: CALL_OW 1
54382: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
54383: LD_ADDR_EXP 82
54387: PUSH
54388: LD_EXP 82
54392: PPUSH
54393: LD_VAR 0 4
54397: PPUSH
54398: EMPTY
54399: PPUSH
54400: CALL_OW 1
54404: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
54405: LD_ADDR_EXP 83
54409: PUSH
54410: LD_EXP 83
54414: PPUSH
54415: LD_VAR 0 4
54419: PPUSH
54420: EMPTY
54421: PPUSH
54422: CALL_OW 1
54426: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
54427: LD_ADDR_EXP 84
54431: PUSH
54432: LD_EXP 84
54436: PPUSH
54437: LD_VAR 0 4
54441: PPUSH
54442: EMPTY
54443: PPUSH
54444: CALL_OW 1
54448: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
54449: LD_ADDR_EXP 85
54453: PUSH
54454: LD_EXP 85
54458: PPUSH
54459: LD_VAR 0 4
54463: PPUSH
54464: EMPTY
54465: PPUSH
54466: CALL_OW 1
54470: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
54471: LD_ADDR_EXP 86
54475: PUSH
54476: LD_EXP 86
54480: PPUSH
54481: LD_VAR 0 4
54485: PPUSH
54486: EMPTY
54487: PPUSH
54488: CALL_OW 1
54492: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
54493: LD_ADDR_EXP 87
54497: PUSH
54498: LD_EXP 87
54502: PPUSH
54503: LD_VAR 0 4
54507: PPUSH
54508: EMPTY
54509: PPUSH
54510: CALL_OW 1
54514: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
54515: LD_ADDR_EXP 88
54519: PUSH
54520: LD_EXP 88
54524: PPUSH
54525: LD_VAR 0 4
54529: PPUSH
54530: EMPTY
54531: PPUSH
54532: CALL_OW 1
54536: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
54537: LD_ADDR_EXP 89
54541: PUSH
54542: LD_EXP 89
54546: PPUSH
54547: LD_VAR 0 4
54551: PPUSH
54552: EMPTY
54553: PPUSH
54554: CALL_OW 1
54558: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
54559: LD_ADDR_EXP 90
54563: PUSH
54564: LD_EXP 90
54568: PPUSH
54569: LD_VAR 0 4
54573: PPUSH
54574: EMPTY
54575: PPUSH
54576: CALL_OW 1
54580: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
54581: LD_ADDR_EXP 91
54585: PUSH
54586: LD_EXP 91
54590: PPUSH
54591: LD_VAR 0 4
54595: PPUSH
54596: EMPTY
54597: PPUSH
54598: CALL_OW 1
54602: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
54603: LD_ADDR_EXP 92
54607: PUSH
54608: LD_EXP 92
54612: PPUSH
54613: LD_VAR 0 4
54617: PPUSH
54618: EMPTY
54619: PPUSH
54620: CALL_OW 1
54624: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
54625: LD_ADDR_EXP 93
54629: PUSH
54630: LD_EXP 93
54634: PPUSH
54635: LD_VAR 0 4
54639: PPUSH
54640: EMPTY
54641: PPUSH
54642: CALL_OW 1
54646: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
54647: LD_ADDR_EXP 94
54651: PUSH
54652: LD_EXP 94
54656: PPUSH
54657: LD_VAR 0 4
54661: PPUSH
54662: LD_INT 0
54664: PPUSH
54665: CALL_OW 1
54669: ST_TO_ADDR
// result := base ;
54670: LD_ADDR_VAR 0 3
54674: PUSH
54675: LD_VAR 0 4
54679: ST_TO_ADDR
// end ;
54680: LD_VAR 0 3
54684: RET
// export function MC_Start ( ) ; var i ; begin
54685: LD_INT 0
54687: PPUSH
54688: PPUSH
// for i = 1 to mc_bases do
54689: LD_ADDR_VAR 0 2
54693: PUSH
54694: DOUBLE
54695: LD_INT 1
54697: DEC
54698: ST_TO_ADDR
54699: LD_EXP 52
54703: PUSH
54704: FOR_TO
54705: IFFALSE 55782
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
54707: LD_ADDR_EXP 52
54711: PUSH
54712: LD_EXP 52
54716: PPUSH
54717: LD_VAR 0 2
54721: PPUSH
54722: LD_EXP 52
54726: PUSH
54727: LD_VAR 0 2
54731: ARRAY
54732: PUSH
54733: LD_INT 0
54735: DIFF
54736: PPUSH
54737: CALL_OW 1
54741: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
54742: LD_ADDR_EXP 53
54746: PUSH
54747: LD_EXP 53
54751: PPUSH
54752: LD_VAR 0 2
54756: PPUSH
54757: EMPTY
54758: PPUSH
54759: CALL_OW 1
54763: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
54764: LD_ADDR_EXP 54
54768: PUSH
54769: LD_EXP 54
54773: PPUSH
54774: LD_VAR 0 2
54778: PPUSH
54779: EMPTY
54780: PPUSH
54781: CALL_OW 1
54785: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
54786: LD_ADDR_EXP 55
54790: PUSH
54791: LD_EXP 55
54795: PPUSH
54796: LD_VAR 0 2
54800: PPUSH
54801: EMPTY
54802: PPUSH
54803: CALL_OW 1
54807: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
54808: LD_ADDR_EXP 56
54812: PUSH
54813: LD_EXP 56
54817: PPUSH
54818: LD_VAR 0 2
54822: PPUSH
54823: EMPTY
54824: PUSH
54825: EMPTY
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PPUSH
54831: CALL_OW 1
54835: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
54836: LD_ADDR_EXP 57
54840: PUSH
54841: LD_EXP 57
54845: PPUSH
54846: LD_VAR 0 2
54850: PPUSH
54851: EMPTY
54852: PPUSH
54853: CALL_OW 1
54857: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
54858: LD_ADDR_EXP 84
54862: PUSH
54863: LD_EXP 84
54867: PPUSH
54868: LD_VAR 0 2
54872: PPUSH
54873: EMPTY
54874: PPUSH
54875: CALL_OW 1
54879: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
54880: LD_ADDR_EXP 58
54884: PUSH
54885: LD_EXP 58
54889: PPUSH
54890: LD_VAR 0 2
54894: PPUSH
54895: EMPTY
54896: PPUSH
54897: CALL_OW 1
54901: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
54902: LD_ADDR_EXP 59
54906: PUSH
54907: LD_EXP 59
54911: PPUSH
54912: LD_VAR 0 2
54916: PPUSH
54917: EMPTY
54918: PPUSH
54919: CALL_OW 1
54923: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
54924: LD_ADDR_EXP 60
54928: PUSH
54929: LD_EXP 60
54933: PPUSH
54934: LD_VAR 0 2
54938: PPUSH
54939: LD_EXP 52
54943: PUSH
54944: LD_VAR 0 2
54948: ARRAY
54949: PPUSH
54950: LD_INT 2
54952: PUSH
54953: LD_INT 30
54955: PUSH
54956: LD_INT 32
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 30
54965: PUSH
54966: LD_INT 33
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: LIST
54977: PPUSH
54978: CALL_OW 72
54982: PPUSH
54983: CALL_OW 1
54987: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
54988: LD_ADDR_EXP 61
54992: PUSH
54993: LD_EXP 61
54997: PPUSH
54998: LD_VAR 0 2
55002: PPUSH
55003: LD_EXP 52
55007: PUSH
55008: LD_VAR 0 2
55012: ARRAY
55013: PPUSH
55014: LD_INT 2
55016: PUSH
55017: LD_INT 30
55019: PUSH
55020: LD_INT 32
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 30
55029: PUSH
55030: LD_INT 31
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 58
55044: PUSH
55045: EMPTY
55046: LIST
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PPUSH
55052: CALL_OW 72
55056: PPUSH
55057: CALL_OW 1
55061: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
55062: LD_ADDR_EXP 62
55066: PUSH
55067: LD_EXP 62
55071: PPUSH
55072: LD_VAR 0 2
55076: PPUSH
55077: EMPTY
55078: PPUSH
55079: CALL_OW 1
55083: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
55084: LD_ADDR_EXP 66
55088: PUSH
55089: LD_EXP 66
55093: PPUSH
55094: LD_VAR 0 2
55098: PPUSH
55099: EMPTY
55100: PPUSH
55101: CALL_OW 1
55105: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
55106: LD_ADDR_EXP 65
55110: PUSH
55111: LD_EXP 65
55115: PPUSH
55116: LD_VAR 0 2
55120: PPUSH
55121: EMPTY
55122: PPUSH
55123: CALL_OW 1
55127: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
55128: LD_ADDR_EXP 67
55132: PUSH
55133: LD_EXP 67
55137: PPUSH
55138: LD_VAR 0 2
55142: PPUSH
55143: EMPTY
55144: PPUSH
55145: CALL_OW 1
55149: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
55150: LD_ADDR_EXP 68
55154: PUSH
55155: LD_EXP 68
55159: PPUSH
55160: LD_VAR 0 2
55164: PPUSH
55165: EMPTY
55166: PPUSH
55167: CALL_OW 1
55171: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
55172: LD_ADDR_EXP 69
55176: PUSH
55177: LD_EXP 69
55181: PPUSH
55182: LD_VAR 0 2
55186: PPUSH
55187: EMPTY
55188: PPUSH
55189: CALL_OW 1
55193: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
55194: LD_ADDR_EXP 70
55198: PUSH
55199: LD_EXP 70
55203: PPUSH
55204: LD_VAR 0 2
55208: PPUSH
55209: EMPTY
55210: PPUSH
55211: CALL_OW 1
55215: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
55216: LD_ADDR_EXP 71
55220: PUSH
55221: LD_EXP 71
55225: PPUSH
55226: LD_VAR 0 2
55230: PPUSH
55231: EMPTY
55232: PPUSH
55233: CALL_OW 1
55237: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
55238: LD_ADDR_EXP 72
55242: PUSH
55243: LD_EXP 72
55247: PPUSH
55248: LD_VAR 0 2
55252: PPUSH
55253: EMPTY
55254: PPUSH
55255: CALL_OW 1
55259: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
55260: LD_ADDR_EXP 73
55264: PUSH
55265: LD_EXP 73
55269: PPUSH
55270: LD_VAR 0 2
55274: PPUSH
55275: EMPTY
55276: PPUSH
55277: CALL_OW 1
55281: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
55282: LD_ADDR_EXP 74
55286: PUSH
55287: LD_EXP 74
55291: PPUSH
55292: LD_VAR 0 2
55296: PPUSH
55297: EMPTY
55298: PPUSH
55299: CALL_OW 1
55303: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
55304: LD_ADDR_EXP 63
55308: PUSH
55309: LD_EXP 63
55313: PPUSH
55314: LD_VAR 0 2
55318: PPUSH
55319: LD_INT 0
55321: PPUSH
55322: CALL_OW 1
55326: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
55327: LD_ADDR_EXP 76
55331: PUSH
55332: LD_EXP 76
55336: PPUSH
55337: LD_VAR 0 2
55341: PPUSH
55342: LD_INT 0
55344: PPUSH
55345: CALL_OW 1
55349: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
55350: LD_ADDR_EXP 64
55354: PUSH
55355: LD_EXP 64
55359: PPUSH
55360: LD_VAR 0 2
55364: PPUSH
55365: EMPTY
55366: PPUSH
55367: CALL_OW 1
55371: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
55372: LD_ADDR_EXP 75
55376: PUSH
55377: LD_EXP 75
55381: PPUSH
55382: LD_VAR 0 2
55386: PPUSH
55387: LD_INT 0
55389: PPUSH
55390: CALL_OW 1
55394: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
55395: LD_ADDR_EXP 77
55399: PUSH
55400: LD_EXP 77
55404: PPUSH
55405: LD_VAR 0 2
55409: PPUSH
55410: EMPTY
55411: PPUSH
55412: CALL_OW 1
55416: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
55417: LD_ADDR_EXP 80
55421: PUSH
55422: LD_EXP 80
55426: PPUSH
55427: LD_VAR 0 2
55431: PPUSH
55432: LD_INT 0
55434: PPUSH
55435: CALL_OW 1
55439: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
55440: LD_ADDR_EXP 81
55444: PUSH
55445: LD_EXP 81
55449: PPUSH
55450: LD_VAR 0 2
55454: PPUSH
55455: EMPTY
55456: PPUSH
55457: CALL_OW 1
55461: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
55462: LD_ADDR_EXP 82
55466: PUSH
55467: LD_EXP 82
55471: PPUSH
55472: LD_VAR 0 2
55476: PPUSH
55477: EMPTY
55478: PPUSH
55479: CALL_OW 1
55483: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
55484: LD_ADDR_EXP 83
55488: PUSH
55489: LD_EXP 83
55493: PPUSH
55494: LD_VAR 0 2
55498: PPUSH
55499: EMPTY
55500: PPUSH
55501: CALL_OW 1
55505: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
55506: LD_ADDR_EXP 85
55510: PUSH
55511: LD_EXP 85
55515: PPUSH
55516: LD_VAR 0 2
55520: PPUSH
55521: LD_EXP 52
55525: PUSH
55526: LD_VAR 0 2
55530: ARRAY
55531: PPUSH
55532: LD_INT 2
55534: PUSH
55535: LD_INT 30
55537: PUSH
55538: LD_INT 6
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 30
55547: PUSH
55548: LD_INT 7
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 30
55557: PUSH
55558: LD_INT 8
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: PPUSH
55571: CALL_OW 72
55575: PPUSH
55576: CALL_OW 1
55580: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
55581: LD_ADDR_EXP 86
55585: PUSH
55586: LD_EXP 86
55590: PPUSH
55591: LD_VAR 0 2
55595: PPUSH
55596: EMPTY
55597: PPUSH
55598: CALL_OW 1
55602: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
55603: LD_ADDR_EXP 87
55607: PUSH
55608: LD_EXP 87
55612: PPUSH
55613: LD_VAR 0 2
55617: PPUSH
55618: EMPTY
55619: PPUSH
55620: CALL_OW 1
55624: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
55625: LD_ADDR_EXP 88
55629: PUSH
55630: LD_EXP 88
55634: PPUSH
55635: LD_VAR 0 2
55639: PPUSH
55640: EMPTY
55641: PPUSH
55642: CALL_OW 1
55646: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
55647: LD_ADDR_EXP 89
55651: PUSH
55652: LD_EXP 89
55656: PPUSH
55657: LD_VAR 0 2
55661: PPUSH
55662: EMPTY
55663: PPUSH
55664: CALL_OW 1
55668: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
55669: LD_ADDR_EXP 90
55673: PUSH
55674: LD_EXP 90
55678: PPUSH
55679: LD_VAR 0 2
55683: PPUSH
55684: EMPTY
55685: PPUSH
55686: CALL_OW 1
55690: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
55691: LD_ADDR_EXP 91
55695: PUSH
55696: LD_EXP 91
55700: PPUSH
55701: LD_VAR 0 2
55705: PPUSH
55706: EMPTY
55707: PPUSH
55708: CALL_OW 1
55712: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
55713: LD_ADDR_EXP 92
55717: PUSH
55718: LD_EXP 92
55722: PPUSH
55723: LD_VAR 0 2
55727: PPUSH
55728: EMPTY
55729: PPUSH
55730: CALL_OW 1
55734: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
55735: LD_ADDR_EXP 93
55739: PUSH
55740: LD_EXP 93
55744: PPUSH
55745: LD_VAR 0 2
55749: PPUSH
55750: EMPTY
55751: PPUSH
55752: CALL_OW 1
55756: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
55757: LD_ADDR_EXP 94
55761: PUSH
55762: LD_EXP 94
55766: PPUSH
55767: LD_VAR 0 2
55771: PPUSH
55772: LD_INT 0
55774: PPUSH
55775: CALL_OW 1
55779: ST_TO_ADDR
// end ;
55780: GO 54704
55782: POP
55783: POP
// MC_InitSides ( ) ;
55784: CALL 56070 0 0
// MC_InitResearch ( ) ;
55788: CALL 55809 0 0
// CustomInitMacro ( ) ;
55792: CALL 4791 0 0
// skirmish := true ;
55796: LD_ADDR_EXP 50
55800: PUSH
55801: LD_INT 1
55803: ST_TO_ADDR
// end ;
55804: LD_VAR 0 1
55808: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
55809: LD_INT 0
55811: PPUSH
55812: PPUSH
55813: PPUSH
55814: PPUSH
55815: PPUSH
55816: PPUSH
// if not mc_bases then
55817: LD_EXP 52
55821: NOT
55822: IFFALSE 55826
// exit ;
55824: GO 56065
// for i = 1 to 8 do
55826: LD_ADDR_VAR 0 2
55830: PUSH
55831: DOUBLE
55832: LD_INT 1
55834: DEC
55835: ST_TO_ADDR
55836: LD_INT 8
55838: PUSH
55839: FOR_TO
55840: IFFALSE 55866
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
55842: LD_ADDR_EXP 79
55846: PUSH
55847: LD_EXP 79
55851: PPUSH
55852: LD_VAR 0 2
55856: PPUSH
55857: EMPTY
55858: PPUSH
55859: CALL_OW 1
55863: ST_TO_ADDR
55864: GO 55839
55866: POP
55867: POP
// tmp := [ ] ;
55868: LD_ADDR_VAR 0 5
55872: PUSH
55873: EMPTY
55874: ST_TO_ADDR
// for i = 1 to mc_sides do
55875: LD_ADDR_VAR 0 2
55879: PUSH
55880: DOUBLE
55881: LD_INT 1
55883: DEC
55884: ST_TO_ADDR
55885: LD_EXP 78
55889: PUSH
55890: FOR_TO
55891: IFFALSE 55949
// if not mc_sides [ i ] in tmp then
55893: LD_EXP 78
55897: PUSH
55898: LD_VAR 0 2
55902: ARRAY
55903: PUSH
55904: LD_VAR 0 5
55908: IN
55909: NOT
55910: IFFALSE 55947
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
55912: LD_ADDR_VAR 0 5
55916: PUSH
55917: LD_VAR 0 5
55921: PPUSH
55922: LD_VAR 0 5
55926: PUSH
55927: LD_INT 1
55929: PLUS
55930: PPUSH
55931: LD_EXP 78
55935: PUSH
55936: LD_VAR 0 2
55940: ARRAY
55941: PPUSH
55942: CALL_OW 2
55946: ST_TO_ADDR
55947: GO 55890
55949: POP
55950: POP
// if not tmp then
55951: LD_VAR 0 5
55955: NOT
55956: IFFALSE 55960
// exit ;
55958: GO 56065
// for j in tmp do
55960: LD_ADDR_VAR 0 3
55964: PUSH
55965: LD_VAR 0 5
55969: PUSH
55970: FOR_IN
55971: IFFALSE 56063
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
55973: LD_ADDR_VAR 0 6
55977: PUSH
55978: LD_INT 22
55980: PUSH
55981: LD_VAR 0 3
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PPUSH
55990: CALL_OW 69
55994: ST_TO_ADDR
// if not un then
55995: LD_VAR 0 6
55999: NOT
56000: IFFALSE 56004
// continue ;
56002: GO 55970
// nation := GetNation ( un [ 1 ] ) ;
56004: LD_ADDR_VAR 0 4
56008: PUSH
56009: LD_VAR 0 6
56013: PUSH
56014: LD_INT 1
56016: ARRAY
56017: PPUSH
56018: CALL_OW 248
56022: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
56023: LD_ADDR_EXP 79
56027: PUSH
56028: LD_EXP 79
56032: PPUSH
56033: LD_VAR 0 3
56037: PPUSH
56038: LD_VAR 0 3
56042: PPUSH
56043: LD_VAR 0 4
56047: PPUSH
56048: LD_INT 1
56050: PPUSH
56051: CALL 10021 0 3
56055: PPUSH
56056: CALL_OW 1
56060: ST_TO_ADDR
// end ;
56061: GO 55970
56063: POP
56064: POP
// end ;
56065: LD_VAR 0 1
56069: RET
// export function MC_InitSides ( ) ; var i ; begin
56070: LD_INT 0
56072: PPUSH
56073: PPUSH
// if not mc_bases then
56074: LD_EXP 52
56078: NOT
56079: IFFALSE 56083
// exit ;
56081: GO 56157
// for i = 1 to mc_bases do
56083: LD_ADDR_VAR 0 2
56087: PUSH
56088: DOUBLE
56089: LD_INT 1
56091: DEC
56092: ST_TO_ADDR
56093: LD_EXP 52
56097: PUSH
56098: FOR_TO
56099: IFFALSE 56155
// if mc_bases [ i ] then
56101: LD_EXP 52
56105: PUSH
56106: LD_VAR 0 2
56110: ARRAY
56111: IFFALSE 56153
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
56113: LD_ADDR_EXP 78
56117: PUSH
56118: LD_EXP 78
56122: PPUSH
56123: LD_VAR 0 2
56127: PPUSH
56128: LD_EXP 52
56132: PUSH
56133: LD_VAR 0 2
56137: ARRAY
56138: PUSH
56139: LD_INT 1
56141: ARRAY
56142: PPUSH
56143: CALL_OW 255
56147: PPUSH
56148: CALL_OW 1
56152: ST_TO_ADDR
56153: GO 56098
56155: POP
56156: POP
// end ;
56157: LD_VAR 0 1
56161: RET
// every 0 0$01 trigger skirmish do
56162: LD_EXP 50
56166: IFFALSE 56320
56168: GO 56170
56170: DISABLE
// begin enable ;
56171: ENABLE
// MC_CheckBuildings ( ) ;
56172: CALL 60809 0 0
// MC_CheckPeopleLife ( ) ;
56176: CALL 60934 0 0
// RaiseSailEvent ( 100 ) ;
56180: LD_INT 100
56182: PPUSH
56183: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
56187: LD_INT 103
56189: PPUSH
56190: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
56194: LD_INT 104
56196: PPUSH
56197: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
56201: LD_INT 105
56203: PPUSH
56204: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
56208: LD_INT 106
56210: PPUSH
56211: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
56215: LD_INT 107
56217: PPUSH
56218: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
56222: LD_INT 108
56224: PPUSH
56225: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
56229: LD_INT 109
56231: PPUSH
56232: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
56236: LD_INT 110
56238: PPUSH
56239: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
56243: LD_INT 111
56245: PPUSH
56246: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
56250: LD_INT 112
56252: PPUSH
56253: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
56257: LD_INT 113
56259: PPUSH
56260: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
56264: LD_INT 120
56266: PPUSH
56267: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
56271: LD_INT 121
56273: PPUSH
56274: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
56278: LD_INT 122
56280: PPUSH
56281: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
56285: LD_INT 123
56287: PPUSH
56288: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
56292: LD_INT 124
56294: PPUSH
56295: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
56299: LD_INT 125
56301: PPUSH
56302: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
56306: LD_INT 126
56308: PPUSH
56309: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
56313: LD_INT 200
56315: PPUSH
56316: CALL_OW 427
// end ;
56320: END
// on SailEvent ( event ) do begin if event < 100 then
56321: LD_VAR 0 1
56325: PUSH
56326: LD_INT 100
56328: LESS
56329: IFFALSE 56340
// CustomEvent ( event ) ;
56331: LD_VAR 0 1
56335: PPUSH
56336: CALL 4783 0 1
// if event = 100 then
56340: LD_VAR 0 1
56344: PUSH
56345: LD_INT 100
56347: EQUAL
56348: IFFALSE 56354
// MC_ClassManager ( ) ;
56350: CALL 56746 0 0
// if event = 101 then
56354: LD_VAR 0 1
56358: PUSH
56359: LD_INT 101
56361: EQUAL
56362: IFFALSE 56368
// MC_RepairBuildings ( ) ;
56364: CALL 61530 0 0
// if event = 102 then
56368: LD_VAR 0 1
56372: PUSH
56373: LD_INT 102
56375: EQUAL
56376: IFFALSE 56382
// MC_Heal ( ) ;
56378: CALL 61936 0 0
// if event = 103 then
56382: LD_VAR 0 1
56386: PUSH
56387: LD_INT 103
56389: EQUAL
56390: IFFALSE 56396
// MC_Build ( ) ;
56392: CALL 62358 0 0
// if event = 104 then
56396: LD_VAR 0 1
56400: PUSH
56401: LD_INT 104
56403: EQUAL
56404: IFFALSE 56410
// MC_TurretWeapon ( ) ;
56406: CALL 63971 0 0
// if event = 105 then
56410: LD_VAR 0 1
56414: PUSH
56415: LD_INT 105
56417: EQUAL
56418: IFFALSE 56424
// MC_BuildUpgrade ( ) ;
56420: CALL 63522 0 0
// if event = 106 then
56424: LD_VAR 0 1
56428: PUSH
56429: LD_INT 106
56431: EQUAL
56432: IFFALSE 56438
// MC_PlantMines ( ) ;
56434: CALL 64401 0 0
// if event = 107 then
56438: LD_VAR 0 1
56442: PUSH
56443: LD_INT 107
56445: EQUAL
56446: IFFALSE 56452
// MC_CollectCrates ( ) ;
56448: CALL 65435 0 0
// if event = 108 then
56452: LD_VAR 0 1
56456: PUSH
56457: LD_INT 108
56459: EQUAL
56460: IFFALSE 56466
// MC_LinkRemoteControl ( ) ;
56462: CALL 67192 0 0
// if event = 109 then
56466: LD_VAR 0 1
56470: PUSH
56471: LD_INT 109
56473: EQUAL
56474: IFFALSE 56480
// MC_ProduceVehicle ( ) ;
56476: CALL 67373 0 0
// if event = 110 then
56480: LD_VAR 0 1
56484: PUSH
56485: LD_INT 110
56487: EQUAL
56488: IFFALSE 56494
// MC_SendAttack ( ) ;
56490: CALL 67854 0 0
// if event = 111 then
56494: LD_VAR 0 1
56498: PUSH
56499: LD_INT 111
56501: EQUAL
56502: IFFALSE 56508
// MC_Defend ( ) ;
56504: CALL 67962 0 0
// if event = 112 then
56508: LD_VAR 0 1
56512: PUSH
56513: LD_INT 112
56515: EQUAL
56516: IFFALSE 56522
// MC_Research ( ) ;
56518: CALL 68589 0 0
// if event = 113 then
56522: LD_VAR 0 1
56526: PUSH
56527: LD_INT 113
56529: EQUAL
56530: IFFALSE 56536
// MC_MinesTrigger ( ) ;
56532: CALL 69703 0 0
// if event = 120 then
56536: LD_VAR 0 1
56540: PUSH
56541: LD_INT 120
56543: EQUAL
56544: IFFALSE 56550
// MC_RepairVehicle ( ) ;
56546: CALL 69802 0 0
// if event = 121 then
56550: LD_VAR 0 1
56554: PUSH
56555: LD_INT 121
56557: EQUAL
56558: IFFALSE 56564
// MC_TameApe ( ) ;
56560: CALL 70545 0 0
// if event = 122 then
56564: LD_VAR 0 1
56568: PUSH
56569: LD_INT 122
56571: EQUAL
56572: IFFALSE 56578
// MC_ChangeApeClass ( ) ;
56574: CALL 71374 0 0
// if event = 123 then
56578: LD_VAR 0 1
56582: PUSH
56583: LD_INT 123
56585: EQUAL
56586: IFFALSE 56592
// MC_Bazooka ( ) ;
56588: CALL 72024 0 0
// if event = 124 then
56592: LD_VAR 0 1
56596: PUSH
56597: LD_INT 124
56599: EQUAL
56600: IFFALSE 56606
// MC_TeleportExit ( ) ;
56602: CALL 72222 0 0
// if event = 125 then
56606: LD_VAR 0 1
56610: PUSH
56611: LD_INT 125
56613: EQUAL
56614: IFFALSE 56620
// MC_Deposits ( ) ;
56616: CALL 72869 0 0
// if event = 126 then
56620: LD_VAR 0 1
56624: PUSH
56625: LD_INT 126
56627: EQUAL
56628: IFFALSE 56634
// MC_RemoteDriver ( ) ;
56630: CALL 73494 0 0
// if event = 200 then
56634: LD_VAR 0 1
56638: PUSH
56639: LD_INT 200
56641: EQUAL
56642: IFFALSE 56648
// MC_Idle ( ) ;
56644: CALL 75227 0 0
// end ;
56648: PPOPN 1
56650: END
// export function MC_Reset ( base , tag ) ; var i ; begin
56651: LD_INT 0
56653: PPUSH
56654: PPUSH
// if not mc_bases [ base ] or not tag then
56655: LD_EXP 52
56659: PUSH
56660: LD_VAR 0 1
56664: ARRAY
56665: NOT
56666: PUSH
56667: LD_VAR 0 2
56671: NOT
56672: OR
56673: IFFALSE 56677
// exit ;
56675: GO 56741
// for i in mc_bases [ base ] union mc_ape [ base ] do
56677: LD_ADDR_VAR 0 4
56681: PUSH
56682: LD_EXP 52
56686: PUSH
56687: LD_VAR 0 1
56691: ARRAY
56692: PUSH
56693: LD_EXP 81
56697: PUSH
56698: LD_VAR 0 1
56702: ARRAY
56703: UNION
56704: PUSH
56705: FOR_IN
56706: IFFALSE 56739
// if GetTag ( i ) = tag then
56708: LD_VAR 0 4
56712: PPUSH
56713: CALL_OW 110
56717: PUSH
56718: LD_VAR 0 2
56722: EQUAL
56723: IFFALSE 56737
// SetTag ( i , 0 ) ;
56725: LD_VAR 0 4
56729: PPUSH
56730: LD_INT 0
56732: PPUSH
56733: CALL_OW 109
56737: GO 56705
56739: POP
56740: POP
// end ;
56741: LD_VAR 0 3
56745: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
56746: LD_INT 0
56748: PPUSH
56749: PPUSH
56750: PPUSH
56751: PPUSH
56752: PPUSH
56753: PPUSH
56754: PPUSH
56755: PPUSH
// if not mc_bases then
56756: LD_EXP 52
56760: NOT
56761: IFFALSE 56765
// exit ;
56763: GO 57223
// for i = 1 to mc_bases do
56765: LD_ADDR_VAR 0 2
56769: PUSH
56770: DOUBLE
56771: LD_INT 1
56773: DEC
56774: ST_TO_ADDR
56775: LD_EXP 52
56779: PUSH
56780: FOR_TO
56781: IFFALSE 57221
// begin tmp := MC_ClassCheckReq ( i ) ;
56783: LD_ADDR_VAR 0 4
56787: PUSH
56788: LD_VAR 0 2
56792: PPUSH
56793: CALL 57228 0 1
56797: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
56798: LD_ADDR_EXP 93
56802: PUSH
56803: LD_EXP 93
56807: PPUSH
56808: LD_VAR 0 2
56812: PPUSH
56813: LD_VAR 0 4
56817: PPUSH
56818: CALL_OW 1
56822: ST_TO_ADDR
// if not tmp then
56823: LD_VAR 0 4
56827: NOT
56828: IFFALSE 56832
// continue ;
56830: GO 56780
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
56832: LD_ADDR_VAR 0 6
56836: PUSH
56837: LD_EXP 52
56841: PUSH
56842: LD_VAR 0 2
56846: ARRAY
56847: PPUSH
56848: LD_INT 2
56850: PUSH
56851: LD_INT 30
56853: PUSH
56854: LD_INT 4
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 30
56863: PUSH
56864: LD_INT 5
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: LIST
56875: PPUSH
56876: CALL_OW 72
56880: PUSH
56881: LD_EXP 52
56885: PUSH
56886: LD_VAR 0 2
56890: ARRAY
56891: PPUSH
56892: LD_INT 2
56894: PUSH
56895: LD_INT 30
56897: PUSH
56898: LD_INT 0
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 30
56907: PUSH
56908: LD_INT 1
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: LIST
56919: PPUSH
56920: CALL_OW 72
56924: PUSH
56925: LD_EXP 52
56929: PUSH
56930: LD_VAR 0 2
56934: ARRAY
56935: PPUSH
56936: LD_INT 30
56938: PUSH
56939: LD_INT 3
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PPUSH
56946: CALL_OW 72
56950: PUSH
56951: LD_EXP 52
56955: PUSH
56956: LD_VAR 0 2
56960: ARRAY
56961: PPUSH
56962: LD_INT 2
56964: PUSH
56965: LD_INT 30
56967: PUSH
56968: LD_INT 6
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 30
56977: PUSH
56978: LD_INT 7
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 30
56987: PUSH
56988: LD_INT 8
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: PPUSH
57001: CALL_OW 72
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: ST_TO_ADDR
// for j = 1 to 4 do
57012: LD_ADDR_VAR 0 3
57016: PUSH
57017: DOUBLE
57018: LD_INT 1
57020: DEC
57021: ST_TO_ADDR
57022: LD_INT 4
57024: PUSH
57025: FOR_TO
57026: IFFALSE 57217
// begin if not tmp [ j ] then
57028: LD_VAR 0 4
57032: PUSH
57033: LD_VAR 0 3
57037: ARRAY
57038: NOT
57039: IFFALSE 57043
// continue ;
57041: GO 57025
// for p in tmp [ j ] do
57043: LD_ADDR_VAR 0 5
57047: PUSH
57048: LD_VAR 0 4
57052: PUSH
57053: LD_VAR 0 3
57057: ARRAY
57058: PUSH
57059: FOR_IN
57060: IFFALSE 57213
// begin if not b [ j ] then
57062: LD_VAR 0 6
57066: PUSH
57067: LD_VAR 0 3
57071: ARRAY
57072: NOT
57073: IFFALSE 57077
// break ;
57075: GO 57213
// e := 0 ;
57077: LD_ADDR_VAR 0 7
57081: PUSH
57082: LD_INT 0
57084: ST_TO_ADDR
// for k in b [ j ] do
57085: LD_ADDR_VAR 0 8
57089: PUSH
57090: LD_VAR 0 6
57094: PUSH
57095: LD_VAR 0 3
57099: ARRAY
57100: PUSH
57101: FOR_IN
57102: IFFALSE 57129
// if IsNotFull ( k ) then
57104: LD_VAR 0 8
57108: PPUSH
57109: CALL 14047 0 1
57113: IFFALSE 57127
// begin e := k ;
57115: LD_ADDR_VAR 0 7
57119: PUSH
57120: LD_VAR 0 8
57124: ST_TO_ADDR
// break ;
57125: GO 57129
// end ;
57127: GO 57101
57129: POP
57130: POP
// if e and not UnitGoingToBuilding ( p , e ) then
57131: LD_VAR 0 7
57135: PUSH
57136: LD_VAR 0 5
57140: PPUSH
57141: LD_VAR 0 7
57145: PPUSH
57146: CALL 51074 0 2
57150: NOT
57151: AND
57152: IFFALSE 57211
// begin if IsInUnit ( p ) then
57154: LD_VAR 0 5
57158: PPUSH
57159: CALL_OW 310
57163: IFFALSE 57174
// ComExitBuilding ( p ) ;
57165: LD_VAR 0 5
57169: PPUSH
57170: CALL_OW 122
// ComEnterUnit ( p , e ) ;
57174: LD_VAR 0 5
57178: PPUSH
57179: LD_VAR 0 7
57183: PPUSH
57184: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
57188: LD_VAR 0 5
57192: PPUSH
57193: LD_VAR 0 3
57197: PPUSH
57198: CALL_OW 183
// AddComExitBuilding ( p ) ;
57202: LD_VAR 0 5
57206: PPUSH
57207: CALL_OW 182
// end ; end ;
57211: GO 57059
57213: POP
57214: POP
// end ;
57215: GO 57025
57217: POP
57218: POP
// end ;
57219: GO 56780
57221: POP
57222: POP
// end ;
57223: LD_VAR 0 1
57227: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
57228: LD_INT 0
57230: PPUSH
57231: PPUSH
57232: PPUSH
57233: PPUSH
57234: PPUSH
57235: PPUSH
57236: PPUSH
57237: PPUSH
57238: PPUSH
57239: PPUSH
57240: PPUSH
57241: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
57242: LD_VAR 0 1
57246: NOT
57247: PUSH
57248: LD_EXP 52
57252: PUSH
57253: LD_VAR 0 1
57257: ARRAY
57258: NOT
57259: OR
57260: PUSH
57261: LD_EXP 52
57265: PUSH
57266: LD_VAR 0 1
57270: ARRAY
57271: PPUSH
57272: LD_INT 2
57274: PUSH
57275: LD_INT 30
57277: PUSH
57278: LD_INT 0
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 30
57287: PUSH
57288: LD_INT 1
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: LIST
57299: PPUSH
57300: CALL_OW 72
57304: NOT
57305: OR
57306: IFFALSE 57310
// exit ;
57308: GO 60804
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
57310: LD_ADDR_VAR 0 4
57314: PUSH
57315: LD_EXP 52
57319: PUSH
57320: LD_VAR 0 1
57324: ARRAY
57325: PPUSH
57326: LD_INT 2
57328: PUSH
57329: LD_INT 25
57331: PUSH
57332: LD_INT 1
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 25
57341: PUSH
57342: LD_INT 2
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 25
57351: PUSH
57352: LD_INT 3
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 25
57361: PUSH
57362: LD_INT 4
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 25
57371: PUSH
57372: LD_INT 5
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 25
57381: PUSH
57382: LD_INT 8
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 25
57391: PUSH
57392: LD_INT 9
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: PPUSH
57409: CALL_OW 72
57413: ST_TO_ADDR
// for i in tmp do
57414: LD_ADDR_VAR 0 3
57418: PUSH
57419: LD_VAR 0 4
57423: PUSH
57424: FOR_IN
57425: IFFALSE 57456
// if GetTag ( i ) then
57427: LD_VAR 0 3
57431: PPUSH
57432: CALL_OW 110
57436: IFFALSE 57454
// tmp := tmp diff i ;
57438: LD_ADDR_VAR 0 4
57442: PUSH
57443: LD_VAR 0 4
57447: PUSH
57448: LD_VAR 0 3
57452: DIFF
57453: ST_TO_ADDR
57454: GO 57424
57456: POP
57457: POP
// if not tmp then
57458: LD_VAR 0 4
57462: NOT
57463: IFFALSE 57467
// exit ;
57465: GO 60804
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
57467: LD_ADDR_VAR 0 5
57471: PUSH
57472: LD_EXP 52
57476: PUSH
57477: LD_VAR 0 1
57481: ARRAY
57482: PPUSH
57483: LD_INT 2
57485: PUSH
57486: LD_INT 25
57488: PUSH
57489: LD_INT 1
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 25
57498: PUSH
57499: LD_INT 5
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 25
57508: PUSH
57509: LD_INT 8
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 25
57518: PUSH
57519: LD_INT 9
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: PPUSH
57533: CALL_OW 72
57537: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
57538: LD_ADDR_VAR 0 6
57542: PUSH
57543: LD_EXP 52
57547: PUSH
57548: LD_VAR 0 1
57552: ARRAY
57553: PPUSH
57554: LD_INT 25
57556: PUSH
57557: LD_INT 2
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PPUSH
57564: CALL_OW 72
57568: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
57569: LD_ADDR_VAR 0 7
57573: PUSH
57574: LD_EXP 52
57578: PUSH
57579: LD_VAR 0 1
57583: ARRAY
57584: PPUSH
57585: LD_INT 25
57587: PUSH
57588: LD_INT 3
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PPUSH
57595: CALL_OW 72
57599: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
57600: LD_ADDR_VAR 0 8
57604: PUSH
57605: LD_EXP 52
57609: PUSH
57610: LD_VAR 0 1
57614: ARRAY
57615: PPUSH
57616: LD_INT 25
57618: PUSH
57619: LD_INT 4
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 24
57628: PUSH
57629: LD_INT 251
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PPUSH
57640: CALL_OW 72
57644: ST_TO_ADDR
// if mc_scan [ base ] then
57645: LD_EXP 75
57649: PUSH
57650: LD_VAR 0 1
57654: ARRAY
57655: IFFALSE 58116
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
57657: LD_ADDR_EXP 94
57661: PUSH
57662: LD_EXP 94
57666: PPUSH
57667: LD_VAR 0 1
57671: PPUSH
57672: LD_INT 4
57674: PPUSH
57675: CALL_OW 1
57679: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
57680: LD_ADDR_VAR 0 12
57684: PUSH
57685: LD_EXP 52
57689: PUSH
57690: LD_VAR 0 1
57694: ARRAY
57695: PPUSH
57696: LD_INT 2
57698: PUSH
57699: LD_INT 30
57701: PUSH
57702: LD_INT 4
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 30
57711: PUSH
57712: LD_INT 5
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: LIST
57723: PPUSH
57724: CALL_OW 72
57728: ST_TO_ADDR
// if not b then
57729: LD_VAR 0 12
57733: NOT
57734: IFFALSE 57738
// exit ;
57736: GO 60804
// p := [ ] ;
57738: LD_ADDR_VAR 0 11
57742: PUSH
57743: EMPTY
57744: ST_TO_ADDR
// if sci >= 2 then
57745: LD_VAR 0 8
57749: PUSH
57750: LD_INT 2
57752: GREATEREQUAL
57753: IFFALSE 57784
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
57755: LD_ADDR_VAR 0 8
57759: PUSH
57760: LD_VAR 0 8
57764: PUSH
57765: LD_INT 1
57767: ARRAY
57768: PUSH
57769: LD_VAR 0 8
57773: PUSH
57774: LD_INT 2
57776: ARRAY
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: ST_TO_ADDR
57782: GO 57845
// if sci = 1 then
57784: LD_VAR 0 8
57788: PUSH
57789: LD_INT 1
57791: EQUAL
57792: IFFALSE 57813
// sci := [ sci [ 1 ] ] else
57794: LD_ADDR_VAR 0 8
57798: PUSH
57799: LD_VAR 0 8
57803: PUSH
57804: LD_INT 1
57806: ARRAY
57807: PUSH
57808: EMPTY
57809: LIST
57810: ST_TO_ADDR
57811: GO 57845
// if sci = 0 then
57813: LD_VAR 0 8
57817: PUSH
57818: LD_INT 0
57820: EQUAL
57821: IFFALSE 57845
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
57823: LD_ADDR_VAR 0 11
57827: PUSH
57828: LD_VAR 0 4
57832: PPUSH
57833: LD_INT 4
57835: PPUSH
57836: CALL 50937 0 2
57840: PUSH
57841: LD_INT 1
57843: ARRAY
57844: ST_TO_ADDR
// if eng > 4 then
57845: LD_VAR 0 6
57849: PUSH
57850: LD_INT 4
57852: GREATER
57853: IFFALSE 57899
// for i = eng downto 4 do
57855: LD_ADDR_VAR 0 3
57859: PUSH
57860: DOUBLE
57861: LD_VAR 0 6
57865: INC
57866: ST_TO_ADDR
57867: LD_INT 4
57869: PUSH
57870: FOR_DOWNTO
57871: IFFALSE 57897
// eng := eng diff eng [ i ] ;
57873: LD_ADDR_VAR 0 6
57877: PUSH
57878: LD_VAR 0 6
57882: PUSH
57883: LD_VAR 0 6
57887: PUSH
57888: LD_VAR 0 3
57892: ARRAY
57893: DIFF
57894: ST_TO_ADDR
57895: GO 57870
57897: POP
57898: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
57899: LD_ADDR_VAR 0 4
57903: PUSH
57904: LD_VAR 0 4
57908: PUSH
57909: LD_VAR 0 5
57913: PUSH
57914: LD_VAR 0 6
57918: UNION
57919: PUSH
57920: LD_VAR 0 7
57924: UNION
57925: PUSH
57926: LD_VAR 0 8
57930: UNION
57931: DIFF
57932: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
57933: LD_ADDR_VAR 0 13
57937: PUSH
57938: LD_EXP 52
57942: PUSH
57943: LD_VAR 0 1
57947: ARRAY
57948: PPUSH
57949: LD_INT 2
57951: PUSH
57952: LD_INT 30
57954: PUSH
57955: LD_INT 32
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 30
57964: PUSH
57965: LD_INT 31
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: LIST
57976: PPUSH
57977: CALL_OW 72
57981: PUSH
57982: LD_EXP 52
57986: PUSH
57987: LD_VAR 0 1
57991: ARRAY
57992: PPUSH
57993: LD_INT 2
57995: PUSH
57996: LD_INT 30
57998: PUSH
57999: LD_INT 4
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 30
58008: PUSH
58009: LD_INT 5
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: LIST
58020: PPUSH
58021: CALL_OW 72
58025: PUSH
58026: LD_INT 6
58028: MUL
58029: PLUS
58030: ST_TO_ADDR
// if bcount < tmp then
58031: LD_VAR 0 13
58035: PUSH
58036: LD_VAR 0 4
58040: LESS
58041: IFFALSE 58087
// for i = tmp downto bcount do
58043: LD_ADDR_VAR 0 3
58047: PUSH
58048: DOUBLE
58049: LD_VAR 0 4
58053: INC
58054: ST_TO_ADDR
58055: LD_VAR 0 13
58059: PUSH
58060: FOR_DOWNTO
58061: IFFALSE 58085
// tmp := Delete ( tmp , tmp ) ;
58063: LD_ADDR_VAR 0 4
58067: PUSH
58068: LD_VAR 0 4
58072: PPUSH
58073: LD_VAR 0 4
58077: PPUSH
58078: CALL_OW 3
58082: ST_TO_ADDR
58083: GO 58060
58085: POP
58086: POP
// result := [ tmp , 0 , 0 , p ] ;
58087: LD_ADDR_VAR 0 2
58091: PUSH
58092: LD_VAR 0 4
58096: PUSH
58097: LD_INT 0
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: LD_VAR 0 11
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: ST_TO_ADDR
// exit ;
58114: GO 60804
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
58116: LD_EXP 52
58120: PUSH
58121: LD_VAR 0 1
58125: ARRAY
58126: PPUSH
58127: LD_INT 2
58129: PUSH
58130: LD_INT 30
58132: PUSH
58133: LD_INT 6
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 30
58142: PUSH
58143: LD_INT 7
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 30
58152: PUSH
58153: LD_INT 8
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: PPUSH
58166: CALL_OW 72
58170: NOT
58171: PUSH
58172: LD_EXP 52
58176: PUSH
58177: LD_VAR 0 1
58181: ARRAY
58182: PPUSH
58183: LD_INT 30
58185: PUSH
58186: LD_INT 3
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PPUSH
58193: CALL_OW 72
58197: NOT
58198: AND
58199: IFFALSE 58271
// begin if eng = tmp then
58201: LD_VAR 0 6
58205: PUSH
58206: LD_VAR 0 4
58210: EQUAL
58211: IFFALSE 58215
// exit ;
58213: GO 60804
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
58215: LD_ADDR_EXP 94
58219: PUSH
58220: LD_EXP 94
58224: PPUSH
58225: LD_VAR 0 1
58229: PPUSH
58230: LD_INT 1
58232: PPUSH
58233: CALL_OW 1
58237: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
58238: LD_ADDR_VAR 0 2
58242: PUSH
58243: LD_INT 0
58245: PUSH
58246: LD_VAR 0 4
58250: PUSH
58251: LD_VAR 0 6
58255: DIFF
58256: PUSH
58257: LD_INT 0
58259: PUSH
58260: LD_INT 0
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: ST_TO_ADDR
// exit ;
58269: GO 60804
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
58271: LD_EXP 79
58275: PUSH
58276: LD_EXP 78
58280: PUSH
58281: LD_VAR 0 1
58285: ARRAY
58286: ARRAY
58287: PUSH
58288: LD_EXP 52
58292: PUSH
58293: LD_VAR 0 1
58297: ARRAY
58298: PPUSH
58299: LD_INT 2
58301: PUSH
58302: LD_INT 30
58304: PUSH
58305: LD_INT 6
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 30
58314: PUSH
58315: LD_INT 7
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 30
58324: PUSH
58325: LD_INT 8
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: PPUSH
58338: CALL_OW 72
58342: AND
58343: PUSH
58344: LD_EXP 52
58348: PUSH
58349: LD_VAR 0 1
58353: ARRAY
58354: PPUSH
58355: LD_INT 30
58357: PUSH
58358: LD_INT 3
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PPUSH
58365: CALL_OW 72
58369: NOT
58370: AND
58371: IFFALSE 58585
// begin if sci >= 6 then
58373: LD_VAR 0 8
58377: PUSH
58378: LD_INT 6
58380: GREATEREQUAL
58381: IFFALSE 58385
// exit ;
58383: GO 60804
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
58385: LD_ADDR_EXP 94
58389: PUSH
58390: LD_EXP 94
58394: PPUSH
58395: LD_VAR 0 1
58399: PPUSH
58400: LD_INT 2
58402: PPUSH
58403: CALL_OW 1
58407: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
58408: LD_ADDR_VAR 0 9
58412: PUSH
58413: LD_VAR 0 4
58417: PUSH
58418: LD_VAR 0 8
58422: DIFF
58423: PPUSH
58424: LD_INT 4
58426: PPUSH
58427: CALL 50937 0 2
58431: ST_TO_ADDR
// p := [ ] ;
58432: LD_ADDR_VAR 0 11
58436: PUSH
58437: EMPTY
58438: ST_TO_ADDR
// if sci < 6 and sort > 6 then
58439: LD_VAR 0 8
58443: PUSH
58444: LD_INT 6
58446: LESS
58447: PUSH
58448: LD_VAR 0 9
58452: PUSH
58453: LD_INT 6
58455: GREATER
58456: AND
58457: IFFALSE 58538
// begin for i = 1 to 6 - sci do
58459: LD_ADDR_VAR 0 3
58463: PUSH
58464: DOUBLE
58465: LD_INT 1
58467: DEC
58468: ST_TO_ADDR
58469: LD_INT 6
58471: PUSH
58472: LD_VAR 0 8
58476: MINUS
58477: PUSH
58478: FOR_TO
58479: IFFALSE 58534
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
58481: LD_ADDR_VAR 0 11
58485: PUSH
58486: LD_VAR 0 11
58490: PPUSH
58491: LD_VAR 0 11
58495: PUSH
58496: LD_INT 1
58498: PLUS
58499: PPUSH
58500: LD_VAR 0 9
58504: PUSH
58505: LD_INT 1
58507: ARRAY
58508: PPUSH
58509: CALL_OW 2
58513: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
58514: LD_ADDR_VAR 0 9
58518: PUSH
58519: LD_VAR 0 9
58523: PPUSH
58524: LD_INT 1
58526: PPUSH
58527: CALL_OW 3
58531: ST_TO_ADDR
// end ;
58532: GO 58478
58534: POP
58535: POP
// end else
58536: GO 58558
// if sort then
58538: LD_VAR 0 9
58542: IFFALSE 58558
// p := sort [ 1 ] ;
58544: LD_ADDR_VAR 0 11
58548: PUSH
58549: LD_VAR 0 9
58553: PUSH
58554: LD_INT 1
58556: ARRAY
58557: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
58558: LD_ADDR_VAR 0 2
58562: PUSH
58563: LD_INT 0
58565: PUSH
58566: LD_INT 0
58568: PUSH
58569: LD_INT 0
58571: PUSH
58572: LD_VAR 0 11
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: ST_TO_ADDR
// exit ;
58583: GO 60804
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
58585: LD_EXP 79
58589: PUSH
58590: LD_EXP 78
58594: PUSH
58595: LD_VAR 0 1
58599: ARRAY
58600: ARRAY
58601: PUSH
58602: LD_EXP 52
58606: PUSH
58607: LD_VAR 0 1
58611: ARRAY
58612: PPUSH
58613: LD_INT 2
58615: PUSH
58616: LD_INT 30
58618: PUSH
58619: LD_INT 6
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 30
58628: PUSH
58629: LD_INT 7
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 30
58638: PUSH
58639: LD_INT 8
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: PPUSH
58652: CALL_OW 72
58656: AND
58657: PUSH
58658: LD_EXP 52
58662: PUSH
58663: LD_VAR 0 1
58667: ARRAY
58668: PPUSH
58669: LD_INT 30
58671: PUSH
58672: LD_INT 3
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PPUSH
58679: CALL_OW 72
58683: AND
58684: IFFALSE 59418
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
58686: LD_ADDR_EXP 94
58690: PUSH
58691: LD_EXP 94
58695: PPUSH
58696: LD_VAR 0 1
58700: PPUSH
58701: LD_INT 3
58703: PPUSH
58704: CALL_OW 1
58708: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
58709: LD_ADDR_VAR 0 2
58713: PUSH
58714: LD_INT 0
58716: PUSH
58717: LD_INT 0
58719: PUSH
58720: LD_INT 0
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: ST_TO_ADDR
// if not eng then
58732: LD_VAR 0 6
58736: NOT
58737: IFFALSE 58800
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
58739: LD_ADDR_VAR 0 11
58743: PUSH
58744: LD_VAR 0 4
58748: PPUSH
58749: LD_INT 2
58751: PPUSH
58752: CALL 50937 0 2
58756: PUSH
58757: LD_INT 1
58759: ARRAY
58760: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
58761: LD_ADDR_VAR 0 2
58765: PUSH
58766: LD_VAR 0 2
58770: PPUSH
58771: LD_INT 2
58773: PPUSH
58774: LD_VAR 0 11
58778: PPUSH
58779: CALL_OW 1
58783: ST_TO_ADDR
// tmp := tmp diff p ;
58784: LD_ADDR_VAR 0 4
58788: PUSH
58789: LD_VAR 0 4
58793: PUSH
58794: LD_VAR 0 11
58798: DIFF
58799: ST_TO_ADDR
// end ; if tmp and sci < 6 then
58800: LD_VAR 0 4
58804: PUSH
58805: LD_VAR 0 8
58809: PUSH
58810: LD_INT 6
58812: LESS
58813: AND
58814: IFFALSE 59002
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
58816: LD_ADDR_VAR 0 9
58820: PUSH
58821: LD_VAR 0 4
58825: PUSH
58826: LD_VAR 0 8
58830: PUSH
58831: LD_VAR 0 7
58835: UNION
58836: DIFF
58837: PPUSH
58838: LD_INT 4
58840: PPUSH
58841: CALL 50937 0 2
58845: ST_TO_ADDR
// p := [ ] ;
58846: LD_ADDR_VAR 0 11
58850: PUSH
58851: EMPTY
58852: ST_TO_ADDR
// if sort then
58853: LD_VAR 0 9
58857: IFFALSE 58973
// for i = 1 to 6 - sci do
58859: LD_ADDR_VAR 0 3
58863: PUSH
58864: DOUBLE
58865: LD_INT 1
58867: DEC
58868: ST_TO_ADDR
58869: LD_INT 6
58871: PUSH
58872: LD_VAR 0 8
58876: MINUS
58877: PUSH
58878: FOR_TO
58879: IFFALSE 58971
// begin if i = sort then
58881: LD_VAR 0 3
58885: PUSH
58886: LD_VAR 0 9
58890: EQUAL
58891: IFFALSE 58895
// break ;
58893: GO 58971
// if GetClass ( i ) = 4 then
58895: LD_VAR 0 3
58899: PPUSH
58900: CALL_OW 257
58904: PUSH
58905: LD_INT 4
58907: EQUAL
58908: IFFALSE 58912
// continue ;
58910: GO 58878
// p := Insert ( p , p + 1 , sort [ i ] ) ;
58912: LD_ADDR_VAR 0 11
58916: PUSH
58917: LD_VAR 0 11
58921: PPUSH
58922: LD_VAR 0 11
58926: PUSH
58927: LD_INT 1
58929: PLUS
58930: PPUSH
58931: LD_VAR 0 9
58935: PUSH
58936: LD_VAR 0 3
58940: ARRAY
58941: PPUSH
58942: CALL_OW 2
58946: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
58947: LD_ADDR_VAR 0 4
58951: PUSH
58952: LD_VAR 0 4
58956: PUSH
58957: LD_VAR 0 9
58961: PUSH
58962: LD_VAR 0 3
58966: ARRAY
58967: DIFF
58968: ST_TO_ADDR
// end ;
58969: GO 58878
58971: POP
58972: POP
// if p then
58973: LD_VAR 0 11
58977: IFFALSE 59002
// result := Replace ( result , 4 , p ) ;
58979: LD_ADDR_VAR 0 2
58983: PUSH
58984: LD_VAR 0 2
58988: PPUSH
58989: LD_INT 4
58991: PPUSH
58992: LD_VAR 0 11
58996: PPUSH
58997: CALL_OW 1
59001: ST_TO_ADDR
// end ; if tmp and mech < 6 then
59002: LD_VAR 0 4
59006: PUSH
59007: LD_VAR 0 7
59011: PUSH
59012: LD_INT 6
59014: LESS
59015: AND
59016: IFFALSE 59204
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
59018: LD_ADDR_VAR 0 9
59022: PUSH
59023: LD_VAR 0 4
59027: PUSH
59028: LD_VAR 0 8
59032: PUSH
59033: LD_VAR 0 7
59037: UNION
59038: DIFF
59039: PPUSH
59040: LD_INT 3
59042: PPUSH
59043: CALL 50937 0 2
59047: ST_TO_ADDR
// p := [ ] ;
59048: LD_ADDR_VAR 0 11
59052: PUSH
59053: EMPTY
59054: ST_TO_ADDR
// if sort then
59055: LD_VAR 0 9
59059: IFFALSE 59175
// for i = 1 to 6 - mech do
59061: LD_ADDR_VAR 0 3
59065: PUSH
59066: DOUBLE
59067: LD_INT 1
59069: DEC
59070: ST_TO_ADDR
59071: LD_INT 6
59073: PUSH
59074: LD_VAR 0 7
59078: MINUS
59079: PUSH
59080: FOR_TO
59081: IFFALSE 59173
// begin if i = sort then
59083: LD_VAR 0 3
59087: PUSH
59088: LD_VAR 0 9
59092: EQUAL
59093: IFFALSE 59097
// break ;
59095: GO 59173
// if GetClass ( i ) = 3 then
59097: LD_VAR 0 3
59101: PPUSH
59102: CALL_OW 257
59106: PUSH
59107: LD_INT 3
59109: EQUAL
59110: IFFALSE 59114
// continue ;
59112: GO 59080
// p := Insert ( p , p + 1 , sort [ i ] ) ;
59114: LD_ADDR_VAR 0 11
59118: PUSH
59119: LD_VAR 0 11
59123: PPUSH
59124: LD_VAR 0 11
59128: PUSH
59129: LD_INT 1
59131: PLUS
59132: PPUSH
59133: LD_VAR 0 9
59137: PUSH
59138: LD_VAR 0 3
59142: ARRAY
59143: PPUSH
59144: CALL_OW 2
59148: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
59149: LD_ADDR_VAR 0 4
59153: PUSH
59154: LD_VAR 0 4
59158: PUSH
59159: LD_VAR 0 9
59163: PUSH
59164: LD_VAR 0 3
59168: ARRAY
59169: DIFF
59170: ST_TO_ADDR
// end ;
59171: GO 59080
59173: POP
59174: POP
// if p then
59175: LD_VAR 0 11
59179: IFFALSE 59204
// result := Replace ( result , 3 , p ) ;
59181: LD_ADDR_VAR 0 2
59185: PUSH
59186: LD_VAR 0 2
59190: PPUSH
59191: LD_INT 3
59193: PPUSH
59194: LD_VAR 0 11
59198: PPUSH
59199: CALL_OW 1
59203: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
59204: LD_VAR 0 4
59208: PUSH
59209: LD_INT 6
59211: GREATER
59212: PUSH
59213: LD_VAR 0 6
59217: PUSH
59218: LD_INT 6
59220: LESS
59221: AND
59222: IFFALSE 59416
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
59224: LD_ADDR_VAR 0 9
59228: PUSH
59229: LD_VAR 0 4
59233: PUSH
59234: LD_VAR 0 8
59238: PUSH
59239: LD_VAR 0 7
59243: UNION
59244: PUSH
59245: LD_VAR 0 6
59249: UNION
59250: DIFF
59251: PPUSH
59252: LD_INT 2
59254: PPUSH
59255: CALL 50937 0 2
59259: ST_TO_ADDR
// p := [ ] ;
59260: LD_ADDR_VAR 0 11
59264: PUSH
59265: EMPTY
59266: ST_TO_ADDR
// if sort then
59267: LD_VAR 0 9
59271: IFFALSE 59387
// for i = 1 to 6 - eng do
59273: LD_ADDR_VAR 0 3
59277: PUSH
59278: DOUBLE
59279: LD_INT 1
59281: DEC
59282: ST_TO_ADDR
59283: LD_INT 6
59285: PUSH
59286: LD_VAR 0 6
59290: MINUS
59291: PUSH
59292: FOR_TO
59293: IFFALSE 59385
// begin if i = sort then
59295: LD_VAR 0 3
59299: PUSH
59300: LD_VAR 0 9
59304: EQUAL
59305: IFFALSE 59309
// break ;
59307: GO 59385
// if GetClass ( i ) = 2 then
59309: LD_VAR 0 3
59313: PPUSH
59314: CALL_OW 257
59318: PUSH
59319: LD_INT 2
59321: EQUAL
59322: IFFALSE 59326
// continue ;
59324: GO 59292
// p := Insert ( p , p + 1 , sort [ i ] ) ;
59326: LD_ADDR_VAR 0 11
59330: PUSH
59331: LD_VAR 0 11
59335: PPUSH
59336: LD_VAR 0 11
59340: PUSH
59341: LD_INT 1
59343: PLUS
59344: PPUSH
59345: LD_VAR 0 9
59349: PUSH
59350: LD_VAR 0 3
59354: ARRAY
59355: PPUSH
59356: CALL_OW 2
59360: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
59361: LD_ADDR_VAR 0 4
59365: PUSH
59366: LD_VAR 0 4
59370: PUSH
59371: LD_VAR 0 9
59375: PUSH
59376: LD_VAR 0 3
59380: ARRAY
59381: DIFF
59382: ST_TO_ADDR
// end ;
59383: GO 59292
59385: POP
59386: POP
// if p then
59387: LD_VAR 0 11
59391: IFFALSE 59416
// result := Replace ( result , 2 , p ) ;
59393: LD_ADDR_VAR 0 2
59397: PUSH
59398: LD_VAR 0 2
59402: PPUSH
59403: LD_INT 2
59405: PPUSH
59406: LD_VAR 0 11
59410: PPUSH
59411: CALL_OW 1
59415: ST_TO_ADDR
// end ; exit ;
59416: GO 60804
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
59418: LD_EXP 79
59422: PUSH
59423: LD_EXP 78
59427: PUSH
59428: LD_VAR 0 1
59432: ARRAY
59433: ARRAY
59434: NOT
59435: PUSH
59436: LD_EXP 52
59440: PUSH
59441: LD_VAR 0 1
59445: ARRAY
59446: PPUSH
59447: LD_INT 30
59449: PUSH
59450: LD_INT 3
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PPUSH
59457: CALL_OW 72
59461: AND
59462: PUSH
59463: LD_EXP 57
59467: PUSH
59468: LD_VAR 0 1
59472: ARRAY
59473: AND
59474: IFFALSE 60082
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
59476: LD_ADDR_EXP 94
59480: PUSH
59481: LD_EXP 94
59485: PPUSH
59486: LD_VAR 0 1
59490: PPUSH
59491: LD_INT 5
59493: PPUSH
59494: CALL_OW 1
59498: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
59499: LD_ADDR_VAR 0 2
59503: PUSH
59504: LD_INT 0
59506: PUSH
59507: LD_INT 0
59509: PUSH
59510: LD_INT 0
59512: PUSH
59513: LD_INT 0
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: ST_TO_ADDR
// if sci > 1 then
59522: LD_VAR 0 8
59526: PUSH
59527: LD_INT 1
59529: GREATER
59530: IFFALSE 59558
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
59532: LD_ADDR_VAR 0 4
59536: PUSH
59537: LD_VAR 0 4
59541: PUSH
59542: LD_VAR 0 8
59546: PUSH
59547: LD_VAR 0 8
59551: PUSH
59552: LD_INT 1
59554: ARRAY
59555: DIFF
59556: DIFF
59557: ST_TO_ADDR
// if tmp and not sci then
59558: LD_VAR 0 4
59562: PUSH
59563: LD_VAR 0 8
59567: NOT
59568: AND
59569: IFFALSE 59638
// begin sort := SortBySkill ( tmp , 4 ) ;
59571: LD_ADDR_VAR 0 9
59575: PUSH
59576: LD_VAR 0 4
59580: PPUSH
59581: LD_INT 4
59583: PPUSH
59584: CALL 50937 0 2
59588: ST_TO_ADDR
// if sort then
59589: LD_VAR 0 9
59593: IFFALSE 59609
// p := sort [ 1 ] ;
59595: LD_ADDR_VAR 0 11
59599: PUSH
59600: LD_VAR 0 9
59604: PUSH
59605: LD_INT 1
59607: ARRAY
59608: ST_TO_ADDR
// if p then
59609: LD_VAR 0 11
59613: IFFALSE 59638
// result := Replace ( result , 4 , p ) ;
59615: LD_ADDR_VAR 0 2
59619: PUSH
59620: LD_VAR 0 2
59624: PPUSH
59625: LD_INT 4
59627: PPUSH
59628: LD_VAR 0 11
59632: PPUSH
59633: CALL_OW 1
59637: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
59638: LD_ADDR_VAR 0 4
59642: PUSH
59643: LD_VAR 0 4
59647: PUSH
59648: LD_VAR 0 7
59652: DIFF
59653: ST_TO_ADDR
// if tmp and mech < 6 then
59654: LD_VAR 0 4
59658: PUSH
59659: LD_VAR 0 7
59663: PUSH
59664: LD_INT 6
59666: LESS
59667: AND
59668: IFFALSE 59856
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
59670: LD_ADDR_VAR 0 9
59674: PUSH
59675: LD_VAR 0 4
59679: PUSH
59680: LD_VAR 0 8
59684: PUSH
59685: LD_VAR 0 7
59689: UNION
59690: DIFF
59691: PPUSH
59692: LD_INT 3
59694: PPUSH
59695: CALL 50937 0 2
59699: ST_TO_ADDR
// p := [ ] ;
59700: LD_ADDR_VAR 0 11
59704: PUSH
59705: EMPTY
59706: ST_TO_ADDR
// if sort then
59707: LD_VAR 0 9
59711: IFFALSE 59827
// for i = 1 to 6 - mech do
59713: LD_ADDR_VAR 0 3
59717: PUSH
59718: DOUBLE
59719: LD_INT 1
59721: DEC
59722: ST_TO_ADDR
59723: LD_INT 6
59725: PUSH
59726: LD_VAR 0 7
59730: MINUS
59731: PUSH
59732: FOR_TO
59733: IFFALSE 59825
// begin if i = sort then
59735: LD_VAR 0 3
59739: PUSH
59740: LD_VAR 0 9
59744: EQUAL
59745: IFFALSE 59749
// break ;
59747: GO 59825
// if GetClass ( i ) = 3 then
59749: LD_VAR 0 3
59753: PPUSH
59754: CALL_OW 257
59758: PUSH
59759: LD_INT 3
59761: EQUAL
59762: IFFALSE 59766
// continue ;
59764: GO 59732
// p := Insert ( p , p + 1 , sort [ i ] ) ;
59766: LD_ADDR_VAR 0 11
59770: PUSH
59771: LD_VAR 0 11
59775: PPUSH
59776: LD_VAR 0 11
59780: PUSH
59781: LD_INT 1
59783: PLUS
59784: PPUSH
59785: LD_VAR 0 9
59789: PUSH
59790: LD_VAR 0 3
59794: ARRAY
59795: PPUSH
59796: CALL_OW 2
59800: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
59801: LD_ADDR_VAR 0 4
59805: PUSH
59806: LD_VAR 0 4
59810: PUSH
59811: LD_VAR 0 9
59815: PUSH
59816: LD_VAR 0 3
59820: ARRAY
59821: DIFF
59822: ST_TO_ADDR
// end ;
59823: GO 59732
59825: POP
59826: POP
// if p then
59827: LD_VAR 0 11
59831: IFFALSE 59856
// result := Replace ( result , 3 , p ) ;
59833: LD_ADDR_VAR 0 2
59837: PUSH
59838: LD_VAR 0 2
59842: PPUSH
59843: LD_INT 3
59845: PPUSH
59846: LD_VAR 0 11
59850: PPUSH
59851: CALL_OW 1
59855: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
59856: LD_ADDR_VAR 0 4
59860: PUSH
59861: LD_VAR 0 4
59865: PUSH
59866: LD_VAR 0 6
59870: DIFF
59871: ST_TO_ADDR
// if tmp and eng < 6 then
59872: LD_VAR 0 4
59876: PUSH
59877: LD_VAR 0 6
59881: PUSH
59882: LD_INT 6
59884: LESS
59885: AND
59886: IFFALSE 60080
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
59888: LD_ADDR_VAR 0 9
59892: PUSH
59893: LD_VAR 0 4
59897: PUSH
59898: LD_VAR 0 8
59902: PUSH
59903: LD_VAR 0 7
59907: UNION
59908: PUSH
59909: LD_VAR 0 6
59913: UNION
59914: DIFF
59915: PPUSH
59916: LD_INT 2
59918: PPUSH
59919: CALL 50937 0 2
59923: ST_TO_ADDR
// p := [ ] ;
59924: LD_ADDR_VAR 0 11
59928: PUSH
59929: EMPTY
59930: ST_TO_ADDR
// if sort then
59931: LD_VAR 0 9
59935: IFFALSE 60051
// for i = 1 to 6 - eng do
59937: LD_ADDR_VAR 0 3
59941: PUSH
59942: DOUBLE
59943: LD_INT 1
59945: DEC
59946: ST_TO_ADDR
59947: LD_INT 6
59949: PUSH
59950: LD_VAR 0 6
59954: MINUS
59955: PUSH
59956: FOR_TO
59957: IFFALSE 60049
// begin if i = sort then
59959: LD_VAR 0 3
59963: PUSH
59964: LD_VAR 0 9
59968: EQUAL
59969: IFFALSE 59973
// break ;
59971: GO 60049
// if GetClass ( i ) = 2 then
59973: LD_VAR 0 3
59977: PPUSH
59978: CALL_OW 257
59982: PUSH
59983: LD_INT 2
59985: EQUAL
59986: IFFALSE 59990
// continue ;
59988: GO 59956
// p := Insert ( p , p + 1 , sort [ i ] ) ;
59990: LD_ADDR_VAR 0 11
59994: PUSH
59995: LD_VAR 0 11
59999: PPUSH
60000: LD_VAR 0 11
60004: PUSH
60005: LD_INT 1
60007: PLUS
60008: PPUSH
60009: LD_VAR 0 9
60013: PUSH
60014: LD_VAR 0 3
60018: ARRAY
60019: PPUSH
60020: CALL_OW 2
60024: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
60025: LD_ADDR_VAR 0 4
60029: PUSH
60030: LD_VAR 0 4
60034: PUSH
60035: LD_VAR 0 9
60039: PUSH
60040: LD_VAR 0 3
60044: ARRAY
60045: DIFF
60046: ST_TO_ADDR
// end ;
60047: GO 59956
60049: POP
60050: POP
// if p then
60051: LD_VAR 0 11
60055: IFFALSE 60080
// result := Replace ( result , 2 , p ) ;
60057: LD_ADDR_VAR 0 2
60061: PUSH
60062: LD_VAR 0 2
60066: PPUSH
60067: LD_INT 2
60069: PPUSH
60070: LD_VAR 0 11
60074: PPUSH
60075: CALL_OW 1
60079: ST_TO_ADDR
// end ; exit ;
60080: GO 60804
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
60082: LD_EXP 79
60086: PUSH
60087: LD_EXP 78
60091: PUSH
60092: LD_VAR 0 1
60096: ARRAY
60097: ARRAY
60098: NOT
60099: PUSH
60100: LD_EXP 52
60104: PUSH
60105: LD_VAR 0 1
60109: ARRAY
60110: PPUSH
60111: LD_INT 30
60113: PUSH
60114: LD_INT 3
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PPUSH
60121: CALL_OW 72
60125: AND
60126: PUSH
60127: LD_EXP 57
60131: PUSH
60132: LD_VAR 0 1
60136: ARRAY
60137: NOT
60138: AND
60139: IFFALSE 60804
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
60141: LD_ADDR_EXP 94
60145: PUSH
60146: LD_EXP 94
60150: PPUSH
60151: LD_VAR 0 1
60155: PPUSH
60156: LD_INT 6
60158: PPUSH
60159: CALL_OW 1
60163: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
60164: LD_ADDR_VAR 0 2
60168: PUSH
60169: LD_INT 0
60171: PUSH
60172: LD_INT 0
60174: PUSH
60175: LD_INT 0
60177: PUSH
60178: LD_INT 0
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: ST_TO_ADDR
// if sci >= 1 then
60187: LD_VAR 0 8
60191: PUSH
60192: LD_INT 1
60194: GREATEREQUAL
60195: IFFALSE 60217
// tmp := tmp diff sci [ 1 ] ;
60197: LD_ADDR_VAR 0 4
60201: PUSH
60202: LD_VAR 0 4
60206: PUSH
60207: LD_VAR 0 8
60211: PUSH
60212: LD_INT 1
60214: ARRAY
60215: DIFF
60216: ST_TO_ADDR
// if tmp and not sci then
60217: LD_VAR 0 4
60221: PUSH
60222: LD_VAR 0 8
60226: NOT
60227: AND
60228: IFFALSE 60297
// begin sort := SortBySkill ( tmp , 4 ) ;
60230: LD_ADDR_VAR 0 9
60234: PUSH
60235: LD_VAR 0 4
60239: PPUSH
60240: LD_INT 4
60242: PPUSH
60243: CALL 50937 0 2
60247: ST_TO_ADDR
// if sort then
60248: LD_VAR 0 9
60252: IFFALSE 60268
// p := sort [ 1 ] ;
60254: LD_ADDR_VAR 0 11
60258: PUSH
60259: LD_VAR 0 9
60263: PUSH
60264: LD_INT 1
60266: ARRAY
60267: ST_TO_ADDR
// if p then
60268: LD_VAR 0 11
60272: IFFALSE 60297
// result := Replace ( result , 4 , p ) ;
60274: LD_ADDR_VAR 0 2
60278: PUSH
60279: LD_VAR 0 2
60283: PPUSH
60284: LD_INT 4
60286: PPUSH
60287: LD_VAR 0 11
60291: PPUSH
60292: CALL_OW 1
60296: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
60297: LD_ADDR_VAR 0 4
60301: PUSH
60302: LD_VAR 0 4
60306: PUSH
60307: LD_VAR 0 7
60311: DIFF
60312: ST_TO_ADDR
// if tmp and mech < 6 then
60313: LD_VAR 0 4
60317: PUSH
60318: LD_VAR 0 7
60322: PUSH
60323: LD_INT 6
60325: LESS
60326: AND
60327: IFFALSE 60509
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
60329: LD_ADDR_VAR 0 9
60333: PUSH
60334: LD_VAR 0 4
60338: PUSH
60339: LD_VAR 0 7
60343: DIFF
60344: PPUSH
60345: LD_INT 3
60347: PPUSH
60348: CALL 50937 0 2
60352: ST_TO_ADDR
// p := [ ] ;
60353: LD_ADDR_VAR 0 11
60357: PUSH
60358: EMPTY
60359: ST_TO_ADDR
// if sort then
60360: LD_VAR 0 9
60364: IFFALSE 60480
// for i = 1 to 6 - mech do
60366: LD_ADDR_VAR 0 3
60370: PUSH
60371: DOUBLE
60372: LD_INT 1
60374: DEC
60375: ST_TO_ADDR
60376: LD_INT 6
60378: PUSH
60379: LD_VAR 0 7
60383: MINUS
60384: PUSH
60385: FOR_TO
60386: IFFALSE 60478
// begin if i = sort then
60388: LD_VAR 0 3
60392: PUSH
60393: LD_VAR 0 9
60397: EQUAL
60398: IFFALSE 60402
// break ;
60400: GO 60478
// if GetClass ( i ) = 3 then
60402: LD_VAR 0 3
60406: PPUSH
60407: CALL_OW 257
60411: PUSH
60412: LD_INT 3
60414: EQUAL
60415: IFFALSE 60419
// continue ;
60417: GO 60385
// p := Insert ( p , p + 1 , sort [ i ] ) ;
60419: LD_ADDR_VAR 0 11
60423: PUSH
60424: LD_VAR 0 11
60428: PPUSH
60429: LD_VAR 0 11
60433: PUSH
60434: LD_INT 1
60436: PLUS
60437: PPUSH
60438: LD_VAR 0 9
60442: PUSH
60443: LD_VAR 0 3
60447: ARRAY
60448: PPUSH
60449: CALL_OW 2
60453: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
60454: LD_ADDR_VAR 0 4
60458: PUSH
60459: LD_VAR 0 4
60463: PUSH
60464: LD_VAR 0 9
60468: PUSH
60469: LD_VAR 0 3
60473: ARRAY
60474: DIFF
60475: ST_TO_ADDR
// end ;
60476: GO 60385
60478: POP
60479: POP
// if p then
60480: LD_VAR 0 11
60484: IFFALSE 60509
// result := Replace ( result , 3 , p ) ;
60486: LD_ADDR_VAR 0 2
60490: PUSH
60491: LD_VAR 0 2
60495: PPUSH
60496: LD_INT 3
60498: PPUSH
60499: LD_VAR 0 11
60503: PPUSH
60504: CALL_OW 1
60508: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
60509: LD_ADDR_VAR 0 4
60513: PUSH
60514: LD_VAR 0 4
60518: PUSH
60519: LD_VAR 0 6
60523: DIFF
60524: ST_TO_ADDR
// if tmp and eng < 4 then
60525: LD_VAR 0 4
60529: PUSH
60530: LD_VAR 0 6
60534: PUSH
60535: LD_INT 4
60537: LESS
60538: AND
60539: IFFALSE 60729
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
60541: LD_ADDR_VAR 0 9
60545: PUSH
60546: LD_VAR 0 4
60550: PUSH
60551: LD_VAR 0 7
60555: PUSH
60556: LD_VAR 0 6
60560: UNION
60561: DIFF
60562: PPUSH
60563: LD_INT 2
60565: PPUSH
60566: CALL 50937 0 2
60570: ST_TO_ADDR
// p := [ ] ;
60571: LD_ADDR_VAR 0 11
60575: PUSH
60576: EMPTY
60577: ST_TO_ADDR
// if sort then
60578: LD_VAR 0 9
60582: IFFALSE 60698
// for i = 1 to 4 - eng do
60584: LD_ADDR_VAR 0 3
60588: PUSH
60589: DOUBLE
60590: LD_INT 1
60592: DEC
60593: ST_TO_ADDR
60594: LD_INT 4
60596: PUSH
60597: LD_VAR 0 6
60601: MINUS
60602: PUSH
60603: FOR_TO
60604: IFFALSE 60696
// begin if i = sort then
60606: LD_VAR 0 3
60610: PUSH
60611: LD_VAR 0 9
60615: EQUAL
60616: IFFALSE 60620
// break ;
60618: GO 60696
// if GetClass ( i ) = 2 then
60620: LD_VAR 0 3
60624: PPUSH
60625: CALL_OW 257
60629: PUSH
60630: LD_INT 2
60632: EQUAL
60633: IFFALSE 60637
// continue ;
60635: GO 60603
// p := Insert ( p , p + 1 , sort [ i ] ) ;
60637: LD_ADDR_VAR 0 11
60641: PUSH
60642: LD_VAR 0 11
60646: PPUSH
60647: LD_VAR 0 11
60651: PUSH
60652: LD_INT 1
60654: PLUS
60655: PPUSH
60656: LD_VAR 0 9
60660: PUSH
60661: LD_VAR 0 3
60665: ARRAY
60666: PPUSH
60667: CALL_OW 2
60671: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
60672: LD_ADDR_VAR 0 4
60676: PUSH
60677: LD_VAR 0 4
60681: PUSH
60682: LD_VAR 0 9
60686: PUSH
60687: LD_VAR 0 3
60691: ARRAY
60692: DIFF
60693: ST_TO_ADDR
// end ;
60694: GO 60603
60696: POP
60697: POP
// if p then
60698: LD_VAR 0 11
60702: IFFALSE 60727
// result := Replace ( result , 2 , p ) ;
60704: LD_ADDR_VAR 0 2
60708: PUSH
60709: LD_VAR 0 2
60713: PPUSH
60714: LD_INT 2
60716: PPUSH
60717: LD_VAR 0 11
60721: PPUSH
60722: CALL_OW 1
60726: ST_TO_ADDR
// end else
60727: GO 60773
// for i = eng downto 5 do
60729: LD_ADDR_VAR 0 3
60733: PUSH
60734: DOUBLE
60735: LD_VAR 0 6
60739: INC
60740: ST_TO_ADDR
60741: LD_INT 5
60743: PUSH
60744: FOR_DOWNTO
60745: IFFALSE 60771
// tmp := tmp union eng [ i ] ;
60747: LD_ADDR_VAR 0 4
60751: PUSH
60752: LD_VAR 0 4
60756: PUSH
60757: LD_VAR 0 6
60761: PUSH
60762: LD_VAR 0 3
60766: ARRAY
60767: UNION
60768: ST_TO_ADDR
60769: GO 60744
60771: POP
60772: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
60773: LD_ADDR_VAR 0 2
60777: PUSH
60778: LD_VAR 0 2
60782: PPUSH
60783: LD_INT 1
60785: PPUSH
60786: LD_VAR 0 4
60790: PUSH
60791: LD_VAR 0 5
60795: DIFF
60796: PPUSH
60797: CALL_OW 1
60801: ST_TO_ADDR
// exit ;
60802: GO 60804
// end ; end ;
60804: LD_VAR 0 2
60808: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
60809: LD_INT 0
60811: PPUSH
60812: PPUSH
60813: PPUSH
// if not mc_bases then
60814: LD_EXP 52
60818: NOT
60819: IFFALSE 60823
// exit ;
60821: GO 60929
// for i = 1 to mc_bases do
60823: LD_ADDR_VAR 0 2
60827: PUSH
60828: DOUBLE
60829: LD_INT 1
60831: DEC
60832: ST_TO_ADDR
60833: LD_EXP 52
60837: PUSH
60838: FOR_TO
60839: IFFALSE 60920
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
60841: LD_ADDR_VAR 0 3
60845: PUSH
60846: LD_EXP 52
60850: PUSH
60851: LD_VAR 0 2
60855: ARRAY
60856: PPUSH
60857: LD_INT 21
60859: PUSH
60860: LD_INT 3
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 3
60869: PUSH
60870: LD_INT 24
60872: PUSH
60873: LD_INT 1000
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PPUSH
60888: CALL_OW 72
60892: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
60893: LD_ADDR_EXP 53
60897: PUSH
60898: LD_EXP 53
60902: PPUSH
60903: LD_VAR 0 2
60907: PPUSH
60908: LD_VAR 0 3
60912: PPUSH
60913: CALL_OW 1
60917: ST_TO_ADDR
// end ;
60918: GO 60838
60920: POP
60921: POP
// RaiseSailEvent ( 101 ) ;
60922: LD_INT 101
60924: PPUSH
60925: CALL_OW 427
// end ;
60929: LD_VAR 0 1
60933: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
60934: LD_INT 0
60936: PPUSH
60937: PPUSH
60938: PPUSH
60939: PPUSH
60940: PPUSH
60941: PPUSH
60942: PPUSH
// if not mc_bases then
60943: LD_EXP 52
60947: NOT
60948: IFFALSE 60952
// exit ;
60950: GO 61525
// for i = 1 to mc_bases do
60952: LD_ADDR_VAR 0 2
60956: PUSH
60957: DOUBLE
60958: LD_INT 1
60960: DEC
60961: ST_TO_ADDR
60962: LD_EXP 52
60966: PUSH
60967: FOR_TO
60968: IFFALSE 61516
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 750 ] ] ] ] ) ;
60970: LD_ADDR_VAR 0 5
60974: PUSH
60975: LD_EXP 52
60979: PUSH
60980: LD_VAR 0 2
60984: ARRAY
60985: PUSH
60986: LD_EXP 81
60990: PUSH
60991: LD_VAR 0 2
60995: ARRAY
60996: UNION
60997: PPUSH
60998: LD_INT 21
61000: PUSH
61001: LD_INT 1
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 1
61010: PUSH
61011: LD_INT 3
61013: PUSH
61014: LD_INT 54
61016: PUSH
61017: EMPTY
61018: LIST
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 3
61026: PUSH
61027: LD_INT 24
61029: PUSH
61030: LD_INT 750
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: LIST
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PPUSH
61050: CALL_OW 72
61054: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
61055: LD_ADDR_VAR 0 6
61059: PUSH
61060: LD_EXP 52
61064: PUSH
61065: LD_VAR 0 2
61069: ARRAY
61070: PPUSH
61071: LD_INT 21
61073: PUSH
61074: LD_INT 1
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: LD_INT 1
61083: PUSH
61084: LD_INT 3
61086: PUSH
61087: LD_INT 54
61089: PUSH
61090: EMPTY
61091: LIST
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 3
61099: PUSH
61100: LD_INT 24
61102: PUSH
61103: LD_INT 250
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: LIST
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PPUSH
61123: CALL_OW 72
61127: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
61128: LD_ADDR_VAR 0 7
61132: PUSH
61133: LD_VAR 0 5
61137: PUSH
61138: LD_VAR 0 6
61142: DIFF
61143: ST_TO_ADDR
// if not need_heal_1 then
61144: LD_VAR 0 6
61148: NOT
61149: IFFALSE 61182
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
61151: LD_ADDR_EXP 55
61155: PUSH
61156: LD_EXP 55
61160: PPUSH
61161: LD_VAR 0 2
61165: PUSH
61166: LD_INT 1
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PPUSH
61173: EMPTY
61174: PPUSH
61175: CALL 16713 0 3
61179: ST_TO_ADDR
61180: GO 61252
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
61182: LD_ADDR_EXP 55
61186: PUSH
61187: LD_EXP 55
61191: PPUSH
61192: LD_VAR 0 2
61196: PUSH
61197: LD_INT 1
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PPUSH
61204: LD_EXP 55
61208: PUSH
61209: LD_VAR 0 2
61213: ARRAY
61214: PUSH
61215: LD_INT 1
61217: ARRAY
61218: PPUSH
61219: LD_INT 3
61221: PUSH
61222: LD_INT 24
61224: PUSH
61225: LD_INT 1000
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PPUSH
61236: CALL_OW 72
61240: PUSH
61241: LD_VAR 0 6
61245: UNION
61246: PPUSH
61247: CALL 16713 0 3
61251: ST_TO_ADDR
// if not need_heal_2 then
61252: LD_VAR 0 7
61256: NOT
61257: IFFALSE 61290
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
61259: LD_ADDR_EXP 55
61263: PUSH
61264: LD_EXP 55
61268: PPUSH
61269: LD_VAR 0 2
61273: PUSH
61274: LD_INT 2
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PPUSH
61281: EMPTY
61282: PPUSH
61283: CALL 16713 0 3
61287: ST_TO_ADDR
61288: GO 61322
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
61290: LD_ADDR_EXP 55
61294: PUSH
61295: LD_EXP 55
61299: PPUSH
61300: LD_VAR 0 2
61304: PUSH
61305: LD_INT 2
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PPUSH
61312: LD_VAR 0 7
61316: PPUSH
61317: CALL 16713 0 3
61321: ST_TO_ADDR
// if need_heal_2 then
61322: LD_VAR 0 7
61326: IFFALSE 61498
// for j in need_heal_2 do
61328: LD_ADDR_VAR 0 3
61332: PUSH
61333: LD_VAR 0 7
61337: PUSH
61338: FOR_IN
61339: IFFALSE 61496
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
61341: LD_ADDR_VAR 0 5
61345: PUSH
61346: LD_EXP 52
61350: PUSH
61351: LD_VAR 0 2
61355: ARRAY
61356: PPUSH
61357: LD_INT 2
61359: PUSH
61360: LD_INT 30
61362: PUSH
61363: LD_INT 6
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 30
61372: PUSH
61373: LD_INT 7
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 30
61382: PUSH
61383: LD_INT 8
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 30
61392: PUSH
61393: LD_INT 0
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 30
61402: PUSH
61403: LD_INT 1
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 25
61412: PUSH
61413: LD_INT 4
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: PPUSH
61429: CALL_OW 72
61433: ST_TO_ADDR
// if tmp then
61434: LD_VAR 0 5
61438: IFFALSE 61494
// begin k := NearestUnitToUnit ( tmp , j ) ;
61440: LD_ADDR_VAR 0 4
61444: PUSH
61445: LD_VAR 0 5
61449: PPUSH
61450: LD_VAR 0 3
61454: PPUSH
61455: CALL_OW 74
61459: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
61460: LD_VAR 0 3
61464: PPUSH
61465: LD_VAR 0 4
61469: PPUSH
61470: CALL_OW 296
61474: PUSH
61475: LD_INT 7
61477: GREATER
61478: IFFALSE 61494
// ComMoveUnit ( j , k ) ;
61480: LD_VAR 0 3
61484: PPUSH
61485: LD_VAR 0 4
61489: PPUSH
61490: CALL_OW 112
// end ; end ;
61494: GO 61338
61496: POP
61497: POP
// if not need_heal_1 and not need_heal_2 then
61498: LD_VAR 0 6
61502: NOT
61503: PUSH
61504: LD_VAR 0 7
61508: NOT
61509: AND
61510: IFFALSE 61514
// continue ;
61512: GO 60967
// end ;
61514: GO 60967
61516: POP
61517: POP
// RaiseSailEvent ( 102 ) ;
61518: LD_INT 102
61520: PPUSH
61521: CALL_OW 427
// end ;
61525: LD_VAR 0 1
61529: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
61530: LD_INT 0
61532: PPUSH
61533: PPUSH
61534: PPUSH
61535: PPUSH
61536: PPUSH
// if not mc_bases then
61537: LD_EXP 52
61541: NOT
61542: IFFALSE 61546
// exit ;
61544: GO 61931
// for i = 1 to mc_bases do
61546: LD_ADDR_VAR 0 2
61550: PUSH
61551: DOUBLE
61552: LD_INT 1
61554: DEC
61555: ST_TO_ADDR
61556: LD_EXP 52
61560: PUSH
61561: FOR_TO
61562: IFFALSE 61929
// begin if not mc_building_need_repair [ i ] then
61564: LD_EXP 53
61568: PUSH
61569: LD_VAR 0 2
61573: ARRAY
61574: NOT
61575: IFFALSE 61613
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
61577: LD_ADDR_EXP 54
61581: PUSH
61582: LD_EXP 54
61586: PPUSH
61587: LD_VAR 0 2
61591: PPUSH
61592: EMPTY
61593: PPUSH
61594: CALL_OW 1
61598: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
61599: LD_VAR 0 2
61603: PPUSH
61604: LD_INT 101
61606: PPUSH
61607: CALL 56651 0 2
// continue ;
61611: GO 61561
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
61613: LD_ADDR_EXP 58
61617: PUSH
61618: LD_EXP 58
61622: PPUSH
61623: LD_VAR 0 2
61627: PPUSH
61628: EMPTY
61629: PPUSH
61630: CALL_OW 1
61634: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
61635: LD_VAR 0 2
61639: PPUSH
61640: LD_INT 103
61642: PPUSH
61643: CALL 56651 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
61647: LD_ADDR_VAR 0 5
61651: PUSH
61652: LD_EXP 52
61656: PUSH
61657: LD_VAR 0 2
61661: ARRAY
61662: PUSH
61663: LD_EXP 81
61667: PUSH
61668: LD_VAR 0 2
61672: ARRAY
61673: UNION
61674: PPUSH
61675: LD_INT 2
61677: PUSH
61678: LD_INT 25
61680: PUSH
61681: LD_INT 2
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 25
61690: PUSH
61691: LD_INT 16
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: LIST
61702: PUSH
61703: EMPTY
61704: LIST
61705: PPUSH
61706: CALL_OW 72
61710: ST_TO_ADDR
// if not tmp then
61711: LD_VAR 0 5
61715: NOT
61716: IFFALSE 61720
// continue ;
61718: GO 61561
// for j in tmp do
61720: LD_ADDR_VAR 0 3
61724: PUSH
61725: LD_VAR 0 5
61729: PUSH
61730: FOR_IN
61731: IFFALSE 61925
// begin if mc_need_heal [ i ] then
61733: LD_EXP 55
61737: PUSH
61738: LD_VAR 0 2
61742: ARRAY
61743: IFFALSE 61791
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
61745: LD_VAR 0 3
61749: PUSH
61750: LD_EXP 55
61754: PUSH
61755: LD_VAR 0 2
61759: ARRAY
61760: PUSH
61761: LD_INT 1
61763: ARRAY
61764: IN
61765: PUSH
61766: LD_VAR 0 3
61770: PUSH
61771: LD_EXP 55
61775: PUSH
61776: LD_VAR 0 2
61780: ARRAY
61781: PUSH
61782: LD_INT 2
61784: ARRAY
61785: IN
61786: OR
61787: IFFALSE 61791
// continue ;
61789: GO 61730
// if IsInUnit ( j ) then
61791: LD_VAR 0 3
61795: PPUSH
61796: CALL_OW 310
61800: IFFALSE 61811
// ComExitBuilding ( j ) ;
61802: LD_VAR 0 3
61806: PPUSH
61807: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
61811: LD_VAR 0 3
61815: PUSH
61816: LD_EXP 54
61820: PUSH
61821: LD_VAR 0 2
61825: ARRAY
61826: IN
61827: NOT
61828: IFFALSE 61886
// begin SetTag ( j , 101 ) ;
61830: LD_VAR 0 3
61834: PPUSH
61835: LD_INT 101
61837: PPUSH
61838: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
61842: LD_ADDR_EXP 54
61846: PUSH
61847: LD_EXP 54
61851: PPUSH
61852: LD_VAR 0 2
61856: PUSH
61857: LD_EXP 54
61861: PUSH
61862: LD_VAR 0 2
61866: ARRAY
61867: PUSH
61868: LD_INT 1
61870: PLUS
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PPUSH
61876: LD_VAR 0 3
61880: PPUSH
61881: CALL 16713 0 3
61885: ST_TO_ADDR
// end ; wait ( 1 ) ;
61886: LD_INT 1
61888: PPUSH
61889: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
61893: LD_VAR 0 3
61897: PPUSH
61898: LD_EXP 53
61902: PUSH
61903: LD_VAR 0 2
61907: ARRAY
61908: PPUSH
61909: LD_VAR 0 3
61913: PPUSH
61914: CALL_OW 74
61918: PPUSH
61919: CALL_OW 130
// end ;
61923: GO 61730
61925: POP
61926: POP
// end ;
61927: GO 61561
61929: POP
61930: POP
// end ;
61931: LD_VAR 0 1
61935: RET
// export function MC_Heal ; var i , j , tmp ; begin
61936: LD_INT 0
61938: PPUSH
61939: PPUSH
61940: PPUSH
61941: PPUSH
// if not mc_bases then
61942: LD_EXP 52
61946: NOT
61947: IFFALSE 61951
// exit ;
61949: GO 62353
// for i = 1 to mc_bases do
61951: LD_ADDR_VAR 0 2
61955: PUSH
61956: DOUBLE
61957: LD_INT 1
61959: DEC
61960: ST_TO_ADDR
61961: LD_EXP 52
61965: PUSH
61966: FOR_TO
61967: IFFALSE 62351
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
61969: LD_EXP 55
61973: PUSH
61974: LD_VAR 0 2
61978: ARRAY
61979: PUSH
61980: LD_INT 1
61982: ARRAY
61983: NOT
61984: PUSH
61985: LD_EXP 55
61989: PUSH
61990: LD_VAR 0 2
61994: ARRAY
61995: PUSH
61996: LD_INT 2
61998: ARRAY
61999: NOT
62000: AND
62001: IFFALSE 62039
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
62003: LD_ADDR_EXP 56
62007: PUSH
62008: LD_EXP 56
62012: PPUSH
62013: LD_VAR 0 2
62017: PPUSH
62018: EMPTY
62019: PPUSH
62020: CALL_OW 1
62024: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
62025: LD_VAR 0 2
62029: PPUSH
62030: LD_INT 102
62032: PPUSH
62033: CALL 56651 0 2
// continue ;
62037: GO 61966
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
62039: LD_ADDR_VAR 0 4
62043: PUSH
62044: LD_EXP 52
62048: PUSH
62049: LD_VAR 0 2
62053: ARRAY
62054: PPUSH
62055: LD_INT 25
62057: PUSH
62058: LD_INT 4
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PPUSH
62065: CALL_OW 72
62069: ST_TO_ADDR
// if not tmp then
62070: LD_VAR 0 4
62074: NOT
62075: IFFALSE 62079
// continue ;
62077: GO 61966
// if mc_taming [ i ] then
62079: LD_EXP 83
62083: PUSH
62084: LD_VAR 0 2
62088: ARRAY
62089: IFFALSE 62113
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
62091: LD_ADDR_EXP 83
62095: PUSH
62096: LD_EXP 83
62100: PPUSH
62101: LD_VAR 0 2
62105: PPUSH
62106: EMPTY
62107: PPUSH
62108: CALL_OW 1
62112: ST_TO_ADDR
// for j in tmp do
62113: LD_ADDR_VAR 0 3
62117: PUSH
62118: LD_VAR 0 4
62122: PUSH
62123: FOR_IN
62124: IFFALSE 62347
// begin if IsInUnit ( j ) then
62126: LD_VAR 0 3
62130: PPUSH
62131: CALL_OW 310
62135: IFFALSE 62146
// ComExitBuilding ( j ) ;
62137: LD_VAR 0 3
62141: PPUSH
62142: CALL_OW 122
// if not j in mc_healers [ i ] then
62146: LD_VAR 0 3
62150: PUSH
62151: LD_EXP 56
62155: PUSH
62156: LD_VAR 0 2
62160: ARRAY
62161: IN
62162: NOT
62163: IFFALSE 62209
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
62165: LD_ADDR_EXP 56
62169: PUSH
62170: LD_EXP 56
62174: PPUSH
62175: LD_VAR 0 2
62179: PUSH
62180: LD_EXP 56
62184: PUSH
62185: LD_VAR 0 2
62189: ARRAY
62190: PUSH
62191: LD_INT 1
62193: PLUS
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PPUSH
62199: LD_VAR 0 3
62203: PPUSH
62204: CALL 16713 0 3
62208: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
62209: LD_VAR 0 3
62213: PPUSH
62214: CALL_OW 110
62218: PUSH
62219: LD_INT 102
62221: NONEQUAL
62222: IFFALSE 62236
// SetTag ( j , 102 ) ;
62224: LD_VAR 0 3
62228: PPUSH
62229: LD_INT 102
62231: PPUSH
62232: CALL_OW 109
// Wait ( 3 ) ;
62236: LD_INT 3
62238: PPUSH
62239: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
62243: LD_EXP 55
62247: PUSH
62248: LD_VAR 0 2
62252: ARRAY
62253: PUSH
62254: LD_INT 1
62256: ARRAY
62257: IFFALSE 62289
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
62259: LD_VAR 0 3
62263: PPUSH
62264: LD_EXP 55
62268: PUSH
62269: LD_VAR 0 2
62273: ARRAY
62274: PUSH
62275: LD_INT 1
62277: ARRAY
62278: PUSH
62279: LD_INT 1
62281: ARRAY
62282: PPUSH
62283: CALL_OW 128
62287: GO 62345
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
62289: LD_VAR 0 3
62293: PPUSH
62294: CALL_OW 314
62298: NOT
62299: PUSH
62300: LD_EXP 55
62304: PUSH
62305: LD_VAR 0 2
62309: ARRAY
62310: PUSH
62311: LD_INT 2
62313: ARRAY
62314: AND
62315: IFFALSE 62345
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
62317: LD_VAR 0 3
62321: PPUSH
62322: LD_EXP 55
62326: PUSH
62327: LD_VAR 0 2
62331: ARRAY
62332: PUSH
62333: LD_INT 2
62335: ARRAY
62336: PUSH
62337: LD_INT 1
62339: ARRAY
62340: PPUSH
62341: CALL_OW 128
// end ;
62345: GO 62123
62347: POP
62348: POP
// end ;
62349: GO 61966
62351: POP
62352: POP
// end ;
62353: LD_VAR 0 1
62357: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
62358: LD_INT 0
62360: PPUSH
62361: PPUSH
62362: PPUSH
62363: PPUSH
62364: PPUSH
// if not mc_bases then
62365: LD_EXP 52
62369: NOT
62370: IFFALSE 62374
// exit ;
62372: GO 63517
// for i = 1 to mc_bases do
62374: LD_ADDR_VAR 0 2
62378: PUSH
62379: DOUBLE
62380: LD_INT 1
62382: DEC
62383: ST_TO_ADDR
62384: LD_EXP 52
62388: PUSH
62389: FOR_TO
62390: IFFALSE 63515
// begin if mc_scan [ i ] then
62392: LD_EXP 75
62396: PUSH
62397: LD_VAR 0 2
62401: ARRAY
62402: IFFALSE 62406
// continue ;
62404: GO 62389
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
62406: LD_EXP 57
62410: PUSH
62411: LD_VAR 0 2
62415: ARRAY
62416: NOT
62417: PUSH
62418: LD_EXP 59
62422: PUSH
62423: LD_VAR 0 2
62427: ARRAY
62428: NOT
62429: AND
62430: PUSH
62431: LD_EXP 58
62435: PUSH
62436: LD_VAR 0 2
62440: ARRAY
62441: AND
62442: IFFALSE 62480
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
62444: LD_ADDR_EXP 58
62448: PUSH
62449: LD_EXP 58
62453: PPUSH
62454: LD_VAR 0 2
62458: PPUSH
62459: EMPTY
62460: PPUSH
62461: CALL_OW 1
62465: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
62466: LD_VAR 0 2
62470: PPUSH
62471: LD_INT 103
62473: PPUSH
62474: CALL 56651 0 2
// continue ;
62478: GO 62389
// end ; if mc_construct_list [ i ] then
62480: LD_EXP 59
62484: PUSH
62485: LD_VAR 0 2
62489: ARRAY
62490: IFFALSE 62710
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
62492: LD_ADDR_VAR 0 4
62496: PUSH
62497: LD_EXP 52
62501: PUSH
62502: LD_VAR 0 2
62506: ARRAY
62507: PPUSH
62508: LD_INT 25
62510: PUSH
62511: LD_INT 2
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PPUSH
62518: CALL_OW 72
62522: PUSH
62523: LD_EXP 54
62527: PUSH
62528: LD_VAR 0 2
62532: ARRAY
62533: DIFF
62534: ST_TO_ADDR
// if not tmp then
62535: LD_VAR 0 4
62539: NOT
62540: IFFALSE 62544
// continue ;
62542: GO 62389
// for j in tmp do
62544: LD_ADDR_VAR 0 3
62548: PUSH
62549: LD_VAR 0 4
62553: PUSH
62554: FOR_IN
62555: IFFALSE 62706
// begin if not mc_builders [ i ] then
62557: LD_EXP 58
62561: PUSH
62562: LD_VAR 0 2
62566: ARRAY
62567: NOT
62568: IFFALSE 62626
// begin SetTag ( j , 103 ) ;
62570: LD_VAR 0 3
62574: PPUSH
62575: LD_INT 103
62577: PPUSH
62578: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
62582: LD_ADDR_EXP 58
62586: PUSH
62587: LD_EXP 58
62591: PPUSH
62592: LD_VAR 0 2
62596: PUSH
62597: LD_EXP 58
62601: PUSH
62602: LD_VAR 0 2
62606: ARRAY
62607: PUSH
62608: LD_INT 1
62610: PLUS
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PPUSH
62616: LD_VAR 0 3
62620: PPUSH
62621: CALL 16713 0 3
62625: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
62626: LD_VAR 0 3
62630: PPUSH
62631: CALL_OW 310
62635: IFFALSE 62646
// ComExitBuilding ( j ) ;
62637: LD_VAR 0 3
62641: PPUSH
62642: CALL_OW 122
// wait ( 3 ) ;
62646: LD_INT 3
62648: PPUSH
62649: CALL_OW 67
// if not mc_construct_list [ i ] then
62653: LD_EXP 59
62657: PUSH
62658: LD_VAR 0 2
62662: ARRAY
62663: NOT
62664: IFFALSE 62668
// break ;
62666: GO 62706
// if not HasTask ( j ) then
62668: LD_VAR 0 3
62672: PPUSH
62673: CALL_OW 314
62677: NOT
62678: IFFALSE 62704
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
62680: LD_VAR 0 3
62684: PPUSH
62685: LD_EXP 59
62689: PUSH
62690: LD_VAR 0 2
62694: ARRAY
62695: PUSH
62696: LD_INT 1
62698: ARRAY
62699: PPUSH
62700: CALL 19564 0 2
// end ;
62704: GO 62554
62706: POP
62707: POP
// end else
62708: GO 63513
// if mc_build_list [ i ] then
62710: LD_EXP 57
62714: PUSH
62715: LD_VAR 0 2
62719: ARRAY
62720: IFFALSE 63513
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
62722: LD_ADDR_VAR 0 5
62726: PUSH
62727: LD_EXP 52
62731: PUSH
62732: LD_VAR 0 2
62736: ARRAY
62737: PPUSH
62738: LD_INT 2
62740: PUSH
62741: LD_INT 30
62743: PUSH
62744: LD_INT 0
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 30
62753: PUSH
62754: LD_INT 1
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: LIST
62765: PPUSH
62766: CALL_OW 72
62770: ST_TO_ADDR
// if depot then
62771: LD_VAR 0 5
62775: IFFALSE 62793
// depot := depot [ 1 ] else
62777: LD_ADDR_VAR 0 5
62781: PUSH
62782: LD_VAR 0 5
62786: PUSH
62787: LD_INT 1
62789: ARRAY
62790: ST_TO_ADDR
62791: GO 62801
// depot := 0 ;
62793: LD_ADDR_VAR 0 5
62797: PUSH
62798: LD_INT 0
62800: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
62801: LD_EXP 57
62805: PUSH
62806: LD_VAR 0 2
62810: ARRAY
62811: PUSH
62812: LD_INT 1
62814: ARRAY
62815: PUSH
62816: LD_INT 1
62818: ARRAY
62819: PPUSH
62820: CALL 19394 0 1
62824: PUSH
62825: LD_EXP 52
62829: PUSH
62830: LD_VAR 0 2
62834: ARRAY
62835: PPUSH
62836: LD_INT 2
62838: PUSH
62839: LD_INT 30
62841: PUSH
62842: LD_INT 2
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 30
62851: PUSH
62852: LD_INT 3
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: LIST
62863: PPUSH
62864: CALL_OW 72
62868: NOT
62869: AND
62870: IFFALSE 62975
// begin for j = 1 to mc_build_list [ i ] do
62872: LD_ADDR_VAR 0 3
62876: PUSH
62877: DOUBLE
62878: LD_INT 1
62880: DEC
62881: ST_TO_ADDR
62882: LD_EXP 57
62886: PUSH
62887: LD_VAR 0 2
62891: ARRAY
62892: PUSH
62893: FOR_TO
62894: IFFALSE 62973
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
62896: LD_EXP 57
62900: PUSH
62901: LD_VAR 0 2
62905: ARRAY
62906: PUSH
62907: LD_VAR 0 3
62911: ARRAY
62912: PUSH
62913: LD_INT 1
62915: ARRAY
62916: PUSH
62917: LD_INT 2
62919: EQUAL
62920: IFFALSE 62971
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
62922: LD_ADDR_EXP 57
62926: PUSH
62927: LD_EXP 57
62931: PPUSH
62932: LD_VAR 0 2
62936: PPUSH
62937: LD_EXP 57
62941: PUSH
62942: LD_VAR 0 2
62946: ARRAY
62947: PPUSH
62948: LD_VAR 0 3
62952: PPUSH
62953: LD_INT 1
62955: PPUSH
62956: LD_INT 0
62958: PPUSH
62959: CALL 16131 0 4
62963: PPUSH
62964: CALL_OW 1
62968: ST_TO_ADDR
// break ;
62969: GO 62973
// end ;
62971: GO 62893
62973: POP
62974: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
62975: LD_EXP 57
62979: PUSH
62980: LD_VAR 0 2
62984: ARRAY
62985: PUSH
62986: LD_INT 1
62988: ARRAY
62989: PUSH
62990: LD_INT 1
62992: ARRAY
62993: PUSH
62994: LD_INT 0
62996: EQUAL
62997: PUSH
62998: LD_VAR 0 5
63002: PUSH
63003: LD_VAR 0 5
63007: PPUSH
63008: LD_EXP 57
63012: PUSH
63013: LD_VAR 0 2
63017: ARRAY
63018: PUSH
63019: LD_INT 1
63021: ARRAY
63022: PUSH
63023: LD_INT 1
63025: ARRAY
63026: PPUSH
63027: LD_EXP 57
63031: PUSH
63032: LD_VAR 0 2
63036: ARRAY
63037: PUSH
63038: LD_INT 1
63040: ARRAY
63041: PUSH
63042: LD_INT 2
63044: ARRAY
63045: PPUSH
63046: LD_EXP 57
63050: PUSH
63051: LD_VAR 0 2
63055: ARRAY
63056: PUSH
63057: LD_INT 1
63059: ARRAY
63060: PUSH
63061: LD_INT 3
63063: ARRAY
63064: PPUSH
63065: LD_EXP 57
63069: PUSH
63070: LD_VAR 0 2
63074: ARRAY
63075: PUSH
63076: LD_INT 1
63078: ARRAY
63079: PUSH
63080: LD_INT 4
63082: ARRAY
63083: PPUSH
63084: CALL 24110 0 5
63088: AND
63089: OR
63090: IFFALSE 63371
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
63092: LD_ADDR_VAR 0 4
63096: PUSH
63097: LD_EXP 52
63101: PUSH
63102: LD_VAR 0 2
63106: ARRAY
63107: PPUSH
63108: LD_INT 25
63110: PUSH
63111: LD_INT 2
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PPUSH
63118: CALL_OW 72
63122: PUSH
63123: LD_EXP 54
63127: PUSH
63128: LD_VAR 0 2
63132: ARRAY
63133: DIFF
63134: ST_TO_ADDR
// if not tmp then
63135: LD_VAR 0 4
63139: NOT
63140: IFFALSE 63144
// continue ;
63142: GO 62389
// for j in tmp do
63144: LD_ADDR_VAR 0 3
63148: PUSH
63149: LD_VAR 0 4
63153: PUSH
63154: FOR_IN
63155: IFFALSE 63367
// begin if not mc_builders [ i ] then
63157: LD_EXP 58
63161: PUSH
63162: LD_VAR 0 2
63166: ARRAY
63167: NOT
63168: IFFALSE 63226
// begin SetTag ( j , 103 ) ;
63170: LD_VAR 0 3
63174: PPUSH
63175: LD_INT 103
63177: PPUSH
63178: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
63182: LD_ADDR_EXP 58
63186: PUSH
63187: LD_EXP 58
63191: PPUSH
63192: LD_VAR 0 2
63196: PUSH
63197: LD_EXP 58
63201: PUSH
63202: LD_VAR 0 2
63206: ARRAY
63207: PUSH
63208: LD_INT 1
63210: PLUS
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PPUSH
63216: LD_VAR 0 3
63220: PPUSH
63221: CALL 16713 0 3
63225: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
63226: LD_VAR 0 3
63230: PPUSH
63231: CALL_OW 310
63235: IFFALSE 63246
// ComExitBuilding ( j ) ;
63237: LD_VAR 0 3
63241: PPUSH
63242: CALL_OW 122
// wait ( 3 ) ;
63246: LD_INT 3
63248: PPUSH
63249: CALL_OW 67
// if not mc_build_list [ i ] then
63253: LD_EXP 57
63257: PUSH
63258: LD_VAR 0 2
63262: ARRAY
63263: NOT
63264: IFFALSE 63268
// break ;
63266: GO 63367
// if not HasTask ( j ) then
63268: LD_VAR 0 3
63272: PPUSH
63273: CALL_OW 314
63277: NOT
63278: IFFALSE 63365
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
63280: LD_VAR 0 3
63284: PPUSH
63285: LD_EXP 57
63289: PUSH
63290: LD_VAR 0 2
63294: ARRAY
63295: PUSH
63296: LD_INT 1
63298: ARRAY
63299: PUSH
63300: LD_INT 1
63302: ARRAY
63303: PPUSH
63304: LD_EXP 57
63308: PUSH
63309: LD_VAR 0 2
63313: ARRAY
63314: PUSH
63315: LD_INT 1
63317: ARRAY
63318: PUSH
63319: LD_INT 2
63321: ARRAY
63322: PPUSH
63323: LD_EXP 57
63327: PUSH
63328: LD_VAR 0 2
63332: ARRAY
63333: PUSH
63334: LD_INT 1
63336: ARRAY
63337: PUSH
63338: LD_INT 3
63340: ARRAY
63341: PPUSH
63342: LD_EXP 57
63346: PUSH
63347: LD_VAR 0 2
63351: ARRAY
63352: PUSH
63353: LD_INT 1
63355: ARRAY
63356: PUSH
63357: LD_INT 4
63359: ARRAY
63360: PPUSH
63361: CALL_OW 145
// end ;
63365: GO 63154
63367: POP
63368: POP
// end else
63369: GO 63513
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
63371: LD_EXP 52
63375: PUSH
63376: LD_VAR 0 2
63380: ARRAY
63381: PPUSH
63382: LD_EXP 57
63386: PUSH
63387: LD_VAR 0 2
63391: ARRAY
63392: PUSH
63393: LD_INT 1
63395: ARRAY
63396: PUSH
63397: LD_INT 1
63399: ARRAY
63400: PPUSH
63401: LD_EXP 57
63405: PUSH
63406: LD_VAR 0 2
63410: ARRAY
63411: PUSH
63412: LD_INT 1
63414: ARRAY
63415: PUSH
63416: LD_INT 2
63418: ARRAY
63419: PPUSH
63420: LD_EXP 57
63424: PUSH
63425: LD_VAR 0 2
63429: ARRAY
63430: PUSH
63431: LD_INT 1
63433: ARRAY
63434: PUSH
63435: LD_INT 3
63437: ARRAY
63438: PPUSH
63439: LD_EXP 57
63443: PUSH
63444: LD_VAR 0 2
63448: ARRAY
63449: PUSH
63450: LD_INT 1
63452: ARRAY
63453: PUSH
63454: LD_INT 4
63456: ARRAY
63457: PPUSH
63458: CALL 23464 0 5
63462: NOT
63463: IFFALSE 63513
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
63465: LD_ADDR_EXP 57
63469: PUSH
63470: LD_EXP 57
63474: PPUSH
63475: LD_VAR 0 2
63479: PPUSH
63480: LD_EXP 57
63484: PUSH
63485: LD_VAR 0 2
63489: ARRAY
63490: PPUSH
63491: LD_INT 1
63493: PPUSH
63494: LD_INT 1
63496: NEG
63497: PPUSH
63498: LD_INT 0
63500: PPUSH
63501: CALL 16131 0 4
63505: PPUSH
63506: CALL_OW 1
63510: ST_TO_ADDR
// continue ;
63511: GO 62389
// end ; end ; end ;
63513: GO 62389
63515: POP
63516: POP
// end ;
63517: LD_VAR 0 1
63521: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
63522: LD_INT 0
63524: PPUSH
63525: PPUSH
63526: PPUSH
63527: PPUSH
63528: PPUSH
63529: PPUSH
// if not mc_bases then
63530: LD_EXP 52
63534: NOT
63535: IFFALSE 63539
// exit ;
63537: GO 63966
// for i = 1 to mc_bases do
63539: LD_ADDR_VAR 0 2
63543: PUSH
63544: DOUBLE
63545: LD_INT 1
63547: DEC
63548: ST_TO_ADDR
63549: LD_EXP 52
63553: PUSH
63554: FOR_TO
63555: IFFALSE 63964
// begin tmp := mc_build_upgrade [ i ] ;
63557: LD_ADDR_VAR 0 4
63561: PUSH
63562: LD_EXP 84
63566: PUSH
63567: LD_VAR 0 2
63571: ARRAY
63572: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
63573: LD_ADDR_VAR 0 6
63577: PUSH
63578: LD_EXP 85
63582: PUSH
63583: LD_VAR 0 2
63587: ARRAY
63588: PPUSH
63589: LD_INT 2
63591: PUSH
63592: LD_INT 30
63594: PUSH
63595: LD_INT 6
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 30
63604: PUSH
63605: LD_INT 7
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: LIST
63616: PPUSH
63617: CALL_OW 72
63621: ST_TO_ADDR
// if not tmp and not lab then
63622: LD_VAR 0 4
63626: NOT
63627: PUSH
63628: LD_VAR 0 6
63632: NOT
63633: AND
63634: IFFALSE 63638
// continue ;
63636: GO 63554
// if tmp then
63638: LD_VAR 0 4
63642: IFFALSE 63762
// for j in tmp do
63644: LD_ADDR_VAR 0 3
63648: PUSH
63649: LD_VAR 0 4
63653: PUSH
63654: FOR_IN
63655: IFFALSE 63760
// begin if UpgradeCost ( j ) then
63657: LD_VAR 0 3
63661: PPUSH
63662: CALL 23124 0 1
63666: IFFALSE 63758
// begin ComUpgrade ( j ) ;
63668: LD_VAR 0 3
63672: PPUSH
63673: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
63677: LD_ADDR_EXP 84
63681: PUSH
63682: LD_EXP 84
63686: PPUSH
63687: LD_VAR 0 2
63691: PPUSH
63692: LD_EXP 84
63696: PUSH
63697: LD_VAR 0 2
63701: ARRAY
63702: PUSH
63703: LD_VAR 0 3
63707: DIFF
63708: PPUSH
63709: CALL_OW 1
63713: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
63714: LD_ADDR_EXP 59
63718: PUSH
63719: LD_EXP 59
63723: PPUSH
63724: LD_VAR 0 2
63728: PUSH
63729: LD_EXP 59
63733: PUSH
63734: LD_VAR 0 2
63738: ARRAY
63739: PUSH
63740: LD_INT 1
63742: PLUS
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PPUSH
63748: LD_VAR 0 3
63752: PPUSH
63753: CALL 16713 0 3
63757: ST_TO_ADDR
// end ; end ;
63758: GO 63654
63760: POP
63761: POP
// if not lab or not mc_lab_upgrade [ i ] then
63762: LD_VAR 0 6
63766: NOT
63767: PUSH
63768: LD_EXP 86
63772: PUSH
63773: LD_VAR 0 2
63777: ARRAY
63778: NOT
63779: OR
63780: IFFALSE 63784
// continue ;
63782: GO 63554
// for j in lab do
63784: LD_ADDR_VAR 0 3
63788: PUSH
63789: LD_VAR 0 6
63793: PUSH
63794: FOR_IN
63795: IFFALSE 63960
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
63797: LD_VAR 0 3
63801: PPUSH
63802: CALL_OW 266
63806: PUSH
63807: LD_INT 6
63809: PUSH
63810: LD_INT 7
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: IN
63817: PUSH
63818: LD_VAR 0 3
63822: PPUSH
63823: CALL_OW 461
63827: PUSH
63828: LD_INT 1
63830: NONEQUAL
63831: AND
63832: IFFALSE 63958
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
63834: LD_VAR 0 3
63838: PPUSH
63839: LD_EXP 86
63843: PUSH
63844: LD_VAR 0 2
63848: ARRAY
63849: PUSH
63850: LD_INT 1
63852: ARRAY
63853: PPUSH
63854: CALL 23329 0 2
63858: IFFALSE 63958
// begin ComCancel ( j ) ;
63860: LD_VAR 0 3
63864: PPUSH
63865: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
63869: LD_VAR 0 3
63873: PPUSH
63874: LD_EXP 86
63878: PUSH
63879: LD_VAR 0 2
63883: ARRAY
63884: PUSH
63885: LD_INT 1
63887: ARRAY
63888: PPUSH
63889: CALL_OW 207
// if not j in mc_construct_list [ i ] then
63893: LD_VAR 0 3
63897: PUSH
63898: LD_EXP 59
63902: PUSH
63903: LD_VAR 0 2
63907: ARRAY
63908: IN
63909: NOT
63910: IFFALSE 63956
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
63912: LD_ADDR_EXP 59
63916: PUSH
63917: LD_EXP 59
63921: PPUSH
63922: LD_VAR 0 2
63926: PUSH
63927: LD_EXP 59
63931: PUSH
63932: LD_VAR 0 2
63936: ARRAY
63937: PUSH
63938: LD_INT 1
63940: PLUS
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PPUSH
63946: LD_VAR 0 3
63950: PPUSH
63951: CALL 16713 0 3
63955: ST_TO_ADDR
// break ;
63956: GO 63960
// end ; end ; end ;
63958: GO 63794
63960: POP
63961: POP
// end ;
63962: GO 63554
63964: POP
63965: POP
// end ;
63966: LD_VAR 0 1
63970: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
63971: LD_INT 0
63973: PPUSH
63974: PPUSH
63975: PPUSH
63976: PPUSH
63977: PPUSH
63978: PPUSH
63979: PPUSH
63980: PPUSH
63981: PPUSH
// if not mc_bases then
63982: LD_EXP 52
63986: NOT
63987: IFFALSE 63991
// exit ;
63989: GO 64396
// for i = 1 to mc_bases do
63991: LD_ADDR_VAR 0 2
63995: PUSH
63996: DOUBLE
63997: LD_INT 1
63999: DEC
64000: ST_TO_ADDR
64001: LD_EXP 52
64005: PUSH
64006: FOR_TO
64007: IFFALSE 64394
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
64009: LD_EXP 60
64013: PUSH
64014: LD_VAR 0 2
64018: ARRAY
64019: NOT
64020: PUSH
64021: LD_EXP 52
64025: PUSH
64026: LD_VAR 0 2
64030: ARRAY
64031: PPUSH
64032: LD_INT 30
64034: PUSH
64035: LD_INT 3
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PPUSH
64042: CALL_OW 72
64046: NOT
64047: OR
64048: IFFALSE 64052
// continue ;
64050: GO 64006
// busy := false ;
64052: LD_ADDR_VAR 0 8
64056: PUSH
64057: LD_INT 0
64059: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
64060: LD_ADDR_VAR 0 4
64064: PUSH
64065: LD_EXP 52
64069: PUSH
64070: LD_VAR 0 2
64074: ARRAY
64075: PPUSH
64076: LD_INT 30
64078: PUSH
64079: LD_INT 3
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PPUSH
64086: CALL_OW 72
64090: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
64091: LD_ADDR_VAR 0 6
64095: PUSH
64096: LD_EXP 60
64100: PUSH
64101: LD_VAR 0 2
64105: ARRAY
64106: PPUSH
64107: LD_INT 2
64109: PUSH
64110: LD_INT 30
64112: PUSH
64113: LD_INT 32
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 30
64122: PUSH
64123: LD_INT 33
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: LIST
64134: PPUSH
64135: CALL_OW 72
64139: ST_TO_ADDR
// if not t then
64140: LD_VAR 0 6
64144: NOT
64145: IFFALSE 64149
// continue ;
64147: GO 64006
// for j in tmp do
64149: LD_ADDR_VAR 0 3
64153: PUSH
64154: LD_VAR 0 4
64158: PUSH
64159: FOR_IN
64160: IFFALSE 64190
// if not BuildingStatus ( j ) = bs_idle then
64162: LD_VAR 0 3
64166: PPUSH
64167: CALL_OW 461
64171: PUSH
64172: LD_INT 2
64174: EQUAL
64175: NOT
64176: IFFALSE 64188
// begin busy := true ;
64178: LD_ADDR_VAR 0 8
64182: PUSH
64183: LD_INT 1
64185: ST_TO_ADDR
// break ;
64186: GO 64190
// end ;
64188: GO 64159
64190: POP
64191: POP
// if busy then
64192: LD_VAR 0 8
64196: IFFALSE 64200
// continue ;
64198: GO 64006
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
64200: LD_ADDR_VAR 0 7
64204: PUSH
64205: LD_VAR 0 6
64209: PPUSH
64210: LD_INT 35
64212: PUSH
64213: LD_INT 0
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PPUSH
64220: CALL_OW 72
64224: ST_TO_ADDR
// if tw then
64225: LD_VAR 0 7
64229: IFFALSE 64306
// begin tw := tw [ 1 ] ;
64231: LD_ADDR_VAR 0 7
64235: PUSH
64236: LD_VAR 0 7
64240: PUSH
64241: LD_INT 1
64243: ARRAY
64244: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
64245: LD_ADDR_VAR 0 9
64249: PUSH
64250: LD_VAR 0 7
64254: PPUSH
64255: LD_EXP 77
64259: PUSH
64260: LD_VAR 0 2
64264: ARRAY
64265: PPUSH
64266: CALL 21683 0 2
64270: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
64271: LD_EXP 91
64275: PUSH
64276: LD_VAR 0 2
64280: ARRAY
64281: IFFALSE 64304
// if not weapon in mc_allowed_tower_weapons [ i ] then
64283: LD_VAR 0 9
64287: PUSH
64288: LD_EXP 91
64292: PUSH
64293: LD_VAR 0 2
64297: ARRAY
64298: IN
64299: NOT
64300: IFFALSE 64304
// continue ;
64302: GO 64006
// end else
64304: GO 64369
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
64306: LD_ADDR_VAR 0 5
64310: PUSH
64311: LD_EXP 60
64315: PUSH
64316: LD_VAR 0 2
64320: ARRAY
64321: PPUSH
64322: LD_VAR 0 4
64326: PPUSH
64327: CALL 51860 0 2
64331: ST_TO_ADDR
// if not tmp2 then
64332: LD_VAR 0 5
64336: NOT
64337: IFFALSE 64341
// continue ;
64339: GO 64006
// tw := tmp2 [ 1 ] ;
64341: LD_ADDR_VAR 0 7
64345: PUSH
64346: LD_VAR 0 5
64350: PUSH
64351: LD_INT 1
64353: ARRAY
64354: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
64355: LD_ADDR_VAR 0 9
64359: PUSH
64360: LD_VAR 0 5
64364: PUSH
64365: LD_INT 2
64367: ARRAY
64368: ST_TO_ADDR
// end ; if not weapon then
64369: LD_VAR 0 9
64373: NOT
64374: IFFALSE 64378
// continue ;
64376: GO 64006
// ComPlaceWeapon ( tw , weapon ) ;
64378: LD_VAR 0 7
64382: PPUSH
64383: LD_VAR 0 9
64387: PPUSH
64388: CALL_OW 148
// end ;
64392: GO 64006
64394: POP
64395: POP
// end ;
64396: LD_VAR 0 1
64400: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
64401: LD_INT 0
64403: PPUSH
64404: PPUSH
64405: PPUSH
64406: PPUSH
64407: PPUSH
64408: PPUSH
// if not mc_bases then
64409: LD_EXP 52
64413: NOT
64414: IFFALSE 64418
// exit ;
64416: GO 65430
// for i = 1 to mc_bases do
64418: LD_ADDR_VAR 0 2
64422: PUSH
64423: DOUBLE
64424: LD_INT 1
64426: DEC
64427: ST_TO_ADDR
64428: LD_EXP 52
64432: PUSH
64433: FOR_TO
64434: IFFALSE 65428
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
64436: LD_EXP 65
64440: PUSH
64441: LD_VAR 0 2
64445: ARRAY
64446: NOT
64447: PUSH
64448: LD_EXP 65
64452: PUSH
64453: LD_VAR 0 2
64457: ARRAY
64458: PUSH
64459: LD_EXP 66
64463: PUSH
64464: LD_VAR 0 2
64468: ARRAY
64469: EQUAL
64470: OR
64471: IFFALSE 64475
// continue ;
64473: GO 64433
// if mc_miners [ i ] then
64475: LD_EXP 66
64479: PUSH
64480: LD_VAR 0 2
64484: ARRAY
64485: IFFALSE 65115
// begin k := 1 ;
64487: LD_ADDR_VAR 0 4
64491: PUSH
64492: LD_INT 1
64494: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
64495: LD_ADDR_VAR 0 3
64499: PUSH
64500: DOUBLE
64501: LD_EXP 66
64505: PUSH
64506: LD_VAR 0 2
64510: ARRAY
64511: INC
64512: ST_TO_ADDR
64513: LD_INT 1
64515: PUSH
64516: FOR_DOWNTO
64517: IFFALSE 65113
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
64519: LD_EXP 66
64523: PUSH
64524: LD_VAR 0 2
64528: ARRAY
64529: PUSH
64530: LD_VAR 0 3
64534: ARRAY
64535: PPUSH
64536: CALL_OW 301
64540: PUSH
64541: LD_EXP 66
64545: PUSH
64546: LD_VAR 0 2
64550: ARRAY
64551: PUSH
64552: LD_VAR 0 3
64556: ARRAY
64557: PPUSH
64558: CALL_OW 257
64562: PUSH
64563: LD_INT 1
64565: NONEQUAL
64566: OR
64567: IFFALSE 64630
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
64569: LD_ADDR_VAR 0 5
64573: PUSH
64574: LD_EXP 66
64578: PUSH
64579: LD_VAR 0 2
64583: ARRAY
64584: PUSH
64585: LD_EXP 66
64589: PUSH
64590: LD_VAR 0 2
64594: ARRAY
64595: PUSH
64596: LD_VAR 0 3
64600: ARRAY
64601: DIFF
64602: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
64603: LD_ADDR_EXP 66
64607: PUSH
64608: LD_EXP 66
64612: PPUSH
64613: LD_VAR 0 2
64617: PPUSH
64618: LD_VAR 0 5
64622: PPUSH
64623: CALL_OW 1
64627: ST_TO_ADDR
// continue ;
64628: GO 64516
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
64630: LD_EXP 66
64634: PUSH
64635: LD_VAR 0 2
64639: ARRAY
64640: PUSH
64641: LD_VAR 0 3
64645: ARRAY
64646: PPUSH
64647: CALL 16649 0 1
64651: PUSH
64652: LD_EXP 66
64656: PUSH
64657: LD_VAR 0 2
64661: ARRAY
64662: PUSH
64663: LD_VAR 0 3
64667: ARRAY
64668: PPUSH
64669: CALL_OW 255
64673: PPUSH
64674: LD_EXP 65
64678: PUSH
64679: LD_VAR 0 2
64683: ARRAY
64684: PUSH
64685: LD_VAR 0 4
64689: ARRAY
64690: PUSH
64691: LD_INT 1
64693: ARRAY
64694: PPUSH
64695: LD_EXP 65
64699: PUSH
64700: LD_VAR 0 2
64704: ARRAY
64705: PUSH
64706: LD_VAR 0 4
64710: ARRAY
64711: PUSH
64712: LD_INT 2
64714: ARRAY
64715: PPUSH
64716: LD_INT 15
64718: PPUSH
64719: CALL 17609 0 4
64723: PUSH
64724: LD_INT 4
64726: ARRAY
64727: PUSH
64728: LD_EXP 66
64732: PUSH
64733: LD_VAR 0 2
64737: ARRAY
64738: PUSH
64739: LD_VAR 0 3
64743: ARRAY
64744: PPUSH
64745: LD_INT 10
64747: PPUSH
64748: CALL 19306 0 2
64752: PUSH
64753: LD_INT 4
64755: ARRAY
64756: OR
64757: AND
64758: IFFALSE 64781
// ComStop ( mc_miners [ i ] [ j ] ) ;
64760: LD_EXP 66
64764: PUSH
64765: LD_VAR 0 2
64769: ARRAY
64770: PUSH
64771: LD_VAR 0 3
64775: ARRAY
64776: PPUSH
64777: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
64781: LD_EXP 66
64785: PUSH
64786: LD_VAR 0 2
64790: ARRAY
64791: PUSH
64792: LD_VAR 0 3
64796: ARRAY
64797: PPUSH
64798: CALL_OW 257
64802: PUSH
64803: LD_INT 1
64805: EQUAL
64806: PUSH
64807: LD_EXP 66
64811: PUSH
64812: LD_VAR 0 2
64816: ARRAY
64817: PUSH
64818: LD_VAR 0 3
64822: ARRAY
64823: PPUSH
64824: CALL_OW 459
64828: NOT
64829: AND
64830: PUSH
64831: LD_EXP 66
64835: PUSH
64836: LD_VAR 0 2
64840: ARRAY
64841: PUSH
64842: LD_VAR 0 3
64846: ARRAY
64847: PPUSH
64848: CALL_OW 255
64852: PPUSH
64853: LD_EXP 65
64857: PUSH
64858: LD_VAR 0 2
64862: ARRAY
64863: PUSH
64864: LD_VAR 0 4
64868: ARRAY
64869: PUSH
64870: LD_INT 1
64872: ARRAY
64873: PPUSH
64874: LD_EXP 65
64878: PUSH
64879: LD_VAR 0 2
64883: ARRAY
64884: PUSH
64885: LD_VAR 0 4
64889: ARRAY
64890: PUSH
64891: LD_INT 2
64893: ARRAY
64894: PPUSH
64895: LD_INT 15
64897: PPUSH
64898: CALL 17609 0 4
64902: PUSH
64903: LD_INT 4
64905: ARRAY
64906: PUSH
64907: LD_INT 0
64909: EQUAL
64910: AND
64911: PUSH
64912: LD_EXP 66
64916: PUSH
64917: LD_VAR 0 2
64921: ARRAY
64922: PUSH
64923: LD_VAR 0 3
64927: ARRAY
64928: PPUSH
64929: CALL_OW 314
64933: NOT
64934: AND
64935: IFFALSE 65111
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
64937: LD_EXP 66
64941: PUSH
64942: LD_VAR 0 2
64946: ARRAY
64947: PUSH
64948: LD_VAR 0 3
64952: ARRAY
64953: PPUSH
64954: CALL_OW 310
64958: IFFALSE 64981
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
64960: LD_EXP 66
64964: PUSH
64965: LD_VAR 0 2
64969: ARRAY
64970: PUSH
64971: LD_VAR 0 3
64975: ARRAY
64976: PPUSH
64977: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
64981: LD_EXP 66
64985: PUSH
64986: LD_VAR 0 2
64990: ARRAY
64991: PUSH
64992: LD_VAR 0 3
64996: ARRAY
64997: PPUSH
64998: CALL_OW 314
65002: NOT
65003: IFFALSE 65071
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
65005: LD_EXP 66
65009: PUSH
65010: LD_VAR 0 2
65014: ARRAY
65015: PUSH
65016: LD_VAR 0 3
65020: ARRAY
65021: PPUSH
65022: LD_EXP 65
65026: PUSH
65027: LD_VAR 0 2
65031: ARRAY
65032: PUSH
65033: LD_VAR 0 4
65037: ARRAY
65038: PUSH
65039: LD_INT 1
65041: ARRAY
65042: PPUSH
65043: LD_EXP 65
65047: PUSH
65048: LD_VAR 0 2
65052: ARRAY
65053: PUSH
65054: LD_VAR 0 4
65058: ARRAY
65059: PUSH
65060: LD_INT 2
65062: ARRAY
65063: PPUSH
65064: LD_INT 0
65066: PPUSH
65067: CALL_OW 193
// k := k + 1 ;
65071: LD_ADDR_VAR 0 4
65075: PUSH
65076: LD_VAR 0 4
65080: PUSH
65081: LD_INT 1
65083: PLUS
65084: ST_TO_ADDR
// if k > mc_mines [ i ] then
65085: LD_VAR 0 4
65089: PUSH
65090: LD_EXP 65
65094: PUSH
65095: LD_VAR 0 2
65099: ARRAY
65100: GREATER
65101: IFFALSE 65111
// k := 1 ;
65103: LD_ADDR_VAR 0 4
65107: PUSH
65108: LD_INT 1
65110: ST_TO_ADDR
// end ; end ;
65111: GO 64516
65113: POP
65114: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
65115: LD_ADDR_VAR 0 5
65119: PUSH
65120: LD_EXP 52
65124: PUSH
65125: LD_VAR 0 2
65129: ARRAY
65130: PPUSH
65131: LD_INT 2
65133: PUSH
65134: LD_INT 30
65136: PUSH
65137: LD_INT 4
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 30
65146: PUSH
65147: LD_INT 5
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: PUSH
65154: LD_INT 30
65156: PUSH
65157: LD_INT 32
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: PPUSH
65170: CALL_OW 72
65174: ST_TO_ADDR
// if not tmp then
65175: LD_VAR 0 5
65179: NOT
65180: IFFALSE 65184
// continue ;
65182: GO 64433
// list := [ ] ;
65184: LD_ADDR_VAR 0 6
65188: PUSH
65189: EMPTY
65190: ST_TO_ADDR
// for j in tmp do
65191: LD_ADDR_VAR 0 3
65195: PUSH
65196: LD_VAR 0 5
65200: PUSH
65201: FOR_IN
65202: IFFALSE 65271
// begin for k in UnitsInside ( j ) do
65204: LD_ADDR_VAR 0 4
65208: PUSH
65209: LD_VAR 0 3
65213: PPUSH
65214: CALL_OW 313
65218: PUSH
65219: FOR_IN
65220: IFFALSE 65267
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
65222: LD_VAR 0 4
65226: PPUSH
65227: CALL_OW 257
65231: PUSH
65232: LD_INT 1
65234: EQUAL
65235: PUSH
65236: LD_VAR 0 4
65240: PPUSH
65241: CALL_OW 459
65245: NOT
65246: AND
65247: IFFALSE 65265
// list := list ^ k ;
65249: LD_ADDR_VAR 0 6
65253: PUSH
65254: LD_VAR 0 6
65258: PUSH
65259: LD_VAR 0 4
65263: ADD
65264: ST_TO_ADDR
65265: GO 65219
65267: POP
65268: POP
// end ;
65269: GO 65201
65271: POP
65272: POP
// list := list diff mc_miners [ i ] ;
65273: LD_ADDR_VAR 0 6
65277: PUSH
65278: LD_VAR 0 6
65282: PUSH
65283: LD_EXP 66
65287: PUSH
65288: LD_VAR 0 2
65292: ARRAY
65293: DIFF
65294: ST_TO_ADDR
// if not list then
65295: LD_VAR 0 6
65299: NOT
65300: IFFALSE 65304
// continue ;
65302: GO 64433
// k := mc_mines [ i ] - mc_miners [ i ] ;
65304: LD_ADDR_VAR 0 4
65308: PUSH
65309: LD_EXP 65
65313: PUSH
65314: LD_VAR 0 2
65318: ARRAY
65319: PUSH
65320: LD_EXP 66
65324: PUSH
65325: LD_VAR 0 2
65329: ARRAY
65330: MINUS
65331: ST_TO_ADDR
// if k > list then
65332: LD_VAR 0 4
65336: PUSH
65337: LD_VAR 0 6
65341: GREATER
65342: IFFALSE 65354
// k := list ;
65344: LD_ADDR_VAR 0 4
65348: PUSH
65349: LD_VAR 0 6
65353: ST_TO_ADDR
// for j = 1 to k do
65354: LD_ADDR_VAR 0 3
65358: PUSH
65359: DOUBLE
65360: LD_INT 1
65362: DEC
65363: ST_TO_ADDR
65364: LD_VAR 0 4
65368: PUSH
65369: FOR_TO
65370: IFFALSE 65424
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
65372: LD_ADDR_EXP 66
65376: PUSH
65377: LD_EXP 66
65381: PPUSH
65382: LD_VAR 0 2
65386: PUSH
65387: LD_EXP 66
65391: PUSH
65392: LD_VAR 0 2
65396: ARRAY
65397: PUSH
65398: LD_INT 1
65400: PLUS
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: PPUSH
65406: LD_VAR 0 6
65410: PUSH
65411: LD_VAR 0 3
65415: ARRAY
65416: PPUSH
65417: CALL 16713 0 3
65421: ST_TO_ADDR
65422: GO 65369
65424: POP
65425: POP
// end ;
65426: GO 64433
65428: POP
65429: POP
// end ;
65430: LD_VAR 0 1
65434: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
65435: LD_INT 0
65437: PPUSH
65438: PPUSH
65439: PPUSH
65440: PPUSH
65441: PPUSH
65442: PPUSH
65443: PPUSH
65444: PPUSH
65445: PPUSH
65446: PPUSH
// if not mc_bases then
65447: LD_EXP 52
65451: NOT
65452: IFFALSE 65456
// exit ;
65454: GO 67187
// for i = 1 to mc_bases do
65456: LD_ADDR_VAR 0 2
65460: PUSH
65461: DOUBLE
65462: LD_INT 1
65464: DEC
65465: ST_TO_ADDR
65466: LD_EXP 52
65470: PUSH
65471: FOR_TO
65472: IFFALSE 67185
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
65474: LD_EXP 52
65478: PUSH
65479: LD_VAR 0 2
65483: ARRAY
65484: NOT
65485: PUSH
65486: LD_EXP 59
65490: PUSH
65491: LD_VAR 0 2
65495: ARRAY
65496: OR
65497: IFFALSE 65501
// continue ;
65499: GO 65471
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
65501: LD_EXP 68
65505: PUSH
65506: LD_VAR 0 2
65510: ARRAY
65511: NOT
65512: PUSH
65513: LD_EXP 69
65517: PUSH
65518: LD_VAR 0 2
65522: ARRAY
65523: AND
65524: IFFALSE 65562
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
65526: LD_ADDR_EXP 69
65530: PUSH
65531: LD_EXP 69
65535: PPUSH
65536: LD_VAR 0 2
65540: PPUSH
65541: EMPTY
65542: PPUSH
65543: CALL_OW 1
65547: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
65548: LD_VAR 0 2
65552: PPUSH
65553: LD_INT 107
65555: PPUSH
65556: CALL 56651 0 2
// continue ;
65560: GO 65471
// end ; target := [ ] ;
65562: LD_ADDR_VAR 0 6
65566: PUSH
65567: EMPTY
65568: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
65569: LD_ADDR_VAR 0 3
65573: PUSH
65574: DOUBLE
65575: LD_EXP 68
65579: PUSH
65580: LD_VAR 0 2
65584: ARRAY
65585: INC
65586: ST_TO_ADDR
65587: LD_INT 1
65589: PUSH
65590: FOR_DOWNTO
65591: IFFALSE 65851
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
65593: LD_EXP 68
65597: PUSH
65598: LD_VAR 0 2
65602: ARRAY
65603: PUSH
65604: LD_VAR 0 3
65608: ARRAY
65609: PUSH
65610: LD_INT 2
65612: ARRAY
65613: PPUSH
65614: LD_EXP 68
65618: PUSH
65619: LD_VAR 0 2
65623: ARRAY
65624: PUSH
65625: LD_VAR 0 3
65629: ARRAY
65630: PUSH
65631: LD_INT 3
65633: ARRAY
65634: PPUSH
65635: CALL_OW 488
65639: PUSH
65640: LD_EXP 68
65644: PUSH
65645: LD_VAR 0 2
65649: ARRAY
65650: PUSH
65651: LD_VAR 0 3
65655: ARRAY
65656: PUSH
65657: LD_INT 2
65659: ARRAY
65660: PPUSH
65661: LD_EXP 68
65665: PUSH
65666: LD_VAR 0 2
65670: ARRAY
65671: PUSH
65672: LD_VAR 0 3
65676: ARRAY
65677: PUSH
65678: LD_INT 3
65680: ARRAY
65681: PPUSH
65682: CALL_OW 284
65686: PUSH
65687: LD_INT 0
65689: EQUAL
65690: AND
65691: IFFALSE 65746
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
65693: LD_ADDR_VAR 0 5
65697: PUSH
65698: LD_EXP 68
65702: PUSH
65703: LD_VAR 0 2
65707: ARRAY
65708: PPUSH
65709: LD_VAR 0 3
65713: PPUSH
65714: CALL_OW 3
65718: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
65719: LD_ADDR_EXP 68
65723: PUSH
65724: LD_EXP 68
65728: PPUSH
65729: LD_VAR 0 2
65733: PPUSH
65734: LD_VAR 0 5
65738: PPUSH
65739: CALL_OW 1
65743: ST_TO_ADDR
// continue ;
65744: GO 65590
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
65746: LD_EXP 52
65750: PUSH
65751: LD_VAR 0 2
65755: ARRAY
65756: PUSH
65757: LD_INT 1
65759: ARRAY
65760: PPUSH
65761: CALL_OW 255
65765: PPUSH
65766: LD_EXP 68
65770: PUSH
65771: LD_VAR 0 2
65775: ARRAY
65776: PUSH
65777: LD_VAR 0 3
65781: ARRAY
65782: PUSH
65783: LD_INT 2
65785: ARRAY
65786: PPUSH
65787: LD_EXP 68
65791: PUSH
65792: LD_VAR 0 2
65796: ARRAY
65797: PUSH
65798: LD_VAR 0 3
65802: ARRAY
65803: PUSH
65804: LD_INT 3
65806: ARRAY
65807: PPUSH
65808: LD_INT 30
65810: PPUSH
65811: CALL 17609 0 4
65815: PUSH
65816: LD_INT 4
65818: ARRAY
65819: PUSH
65820: LD_INT 0
65822: EQUAL
65823: IFFALSE 65849
// begin target := mc_crates [ i ] [ j ] ;
65825: LD_ADDR_VAR 0 6
65829: PUSH
65830: LD_EXP 68
65834: PUSH
65835: LD_VAR 0 2
65839: ARRAY
65840: PUSH
65841: LD_VAR 0 3
65845: ARRAY
65846: ST_TO_ADDR
// break ;
65847: GO 65851
// end ; end ;
65849: GO 65590
65851: POP
65852: POP
// if not target then
65853: LD_VAR 0 6
65857: NOT
65858: IFFALSE 65862
// continue ;
65860: GO 65471
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
65862: LD_ADDR_VAR 0 7
65866: PUSH
65867: LD_EXP 71
65871: PUSH
65872: LD_VAR 0 2
65876: ARRAY
65877: PPUSH
65878: LD_INT 2
65880: PUSH
65881: LD_INT 3
65883: PUSH
65884: LD_INT 58
65886: PUSH
65887: EMPTY
65888: LIST
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: LD_INT 61
65896: PUSH
65897: EMPTY
65898: LIST
65899: PUSH
65900: LD_INT 33
65902: PUSH
65903: LD_INT 5
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 33
65912: PUSH
65913: LD_INT 3
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: LIST
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 2
65929: PUSH
65930: LD_INT 34
65932: PUSH
65933: LD_INT 32
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 34
65942: PUSH
65943: LD_INT 51
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 34
65952: PUSH
65953: LD_INT 12
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PPUSH
65970: CALL_OW 72
65974: ST_TO_ADDR
// if not cargo then
65975: LD_VAR 0 7
65979: NOT
65980: IFFALSE 66623
// begin if mc_crates_collector [ i ] < 5 then
65982: LD_EXP 69
65986: PUSH
65987: LD_VAR 0 2
65991: ARRAY
65992: PUSH
65993: LD_INT 5
65995: LESS
65996: IFFALSE 66362
// begin if mc_ape [ i ] then
65998: LD_EXP 81
66002: PUSH
66003: LD_VAR 0 2
66007: ARRAY
66008: IFFALSE 66055
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
66010: LD_ADDR_VAR 0 5
66014: PUSH
66015: LD_EXP 81
66019: PUSH
66020: LD_VAR 0 2
66024: ARRAY
66025: PPUSH
66026: LD_INT 25
66028: PUSH
66029: LD_INT 16
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 24
66038: PUSH
66039: LD_INT 750
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PPUSH
66050: CALL_OW 72
66054: ST_TO_ADDR
// if not tmp then
66055: LD_VAR 0 5
66059: NOT
66060: IFFALSE 66107
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
66062: LD_ADDR_VAR 0 5
66066: PUSH
66067: LD_EXP 52
66071: PUSH
66072: LD_VAR 0 2
66076: ARRAY
66077: PPUSH
66078: LD_INT 25
66080: PUSH
66081: LD_INT 2
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PUSH
66088: LD_INT 24
66090: PUSH
66091: LD_INT 750
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PPUSH
66102: CALL_OW 72
66106: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
66107: LD_EXP 81
66111: PUSH
66112: LD_VAR 0 2
66116: ARRAY
66117: PUSH
66118: LD_EXP 52
66122: PUSH
66123: LD_VAR 0 2
66127: ARRAY
66128: PPUSH
66129: LD_INT 25
66131: PUSH
66132: LD_INT 2
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 24
66141: PUSH
66142: LD_INT 750
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PPUSH
66153: CALL_OW 72
66157: AND
66158: PUSH
66159: LD_VAR 0 5
66163: PUSH
66164: LD_INT 5
66166: LESS
66167: AND
66168: IFFALSE 66250
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
66170: LD_ADDR_VAR 0 3
66174: PUSH
66175: LD_EXP 52
66179: PUSH
66180: LD_VAR 0 2
66184: ARRAY
66185: PPUSH
66186: LD_INT 25
66188: PUSH
66189: LD_INT 2
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: LD_INT 24
66198: PUSH
66199: LD_INT 750
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: PPUSH
66210: CALL_OW 72
66214: PUSH
66215: FOR_IN
66216: IFFALSE 66248
// begin tmp := tmp union j ;
66218: LD_ADDR_VAR 0 5
66222: PUSH
66223: LD_VAR 0 5
66227: PUSH
66228: LD_VAR 0 3
66232: UNION
66233: ST_TO_ADDR
// if tmp >= 5 then
66234: LD_VAR 0 5
66238: PUSH
66239: LD_INT 5
66241: GREATEREQUAL
66242: IFFALSE 66246
// break ;
66244: GO 66248
// end ;
66246: GO 66215
66248: POP
66249: POP
// end ; if not tmp then
66250: LD_VAR 0 5
66254: NOT
66255: IFFALSE 66259
// continue ;
66257: GO 65471
// for j in tmp do
66259: LD_ADDR_VAR 0 3
66263: PUSH
66264: LD_VAR 0 5
66268: PUSH
66269: FOR_IN
66270: IFFALSE 66360
// if not GetTag ( j ) then
66272: LD_VAR 0 3
66276: PPUSH
66277: CALL_OW 110
66281: NOT
66282: IFFALSE 66358
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
66284: LD_ADDR_EXP 69
66288: PUSH
66289: LD_EXP 69
66293: PPUSH
66294: LD_VAR 0 2
66298: PUSH
66299: LD_EXP 69
66303: PUSH
66304: LD_VAR 0 2
66308: ARRAY
66309: PUSH
66310: LD_INT 1
66312: PLUS
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PPUSH
66318: LD_VAR 0 3
66322: PPUSH
66323: CALL 16713 0 3
66327: ST_TO_ADDR
// SetTag ( j , 107 ) ;
66328: LD_VAR 0 3
66332: PPUSH
66333: LD_INT 107
66335: PPUSH
66336: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
66340: LD_EXP 69
66344: PUSH
66345: LD_VAR 0 2
66349: ARRAY
66350: PUSH
66351: LD_INT 5
66353: GREATEREQUAL
66354: IFFALSE 66358
// break ;
66356: GO 66360
// end ;
66358: GO 66269
66360: POP
66361: POP
// end ; if mc_crates_collector [ i ] and target then
66362: LD_EXP 69
66366: PUSH
66367: LD_VAR 0 2
66371: ARRAY
66372: PUSH
66373: LD_VAR 0 6
66377: AND
66378: IFFALSE 66621
// begin if mc_crates_collector [ i ] < target [ 1 ] then
66380: LD_EXP 69
66384: PUSH
66385: LD_VAR 0 2
66389: ARRAY
66390: PUSH
66391: LD_VAR 0 6
66395: PUSH
66396: LD_INT 1
66398: ARRAY
66399: LESS
66400: IFFALSE 66420
// tmp := mc_crates_collector [ i ] else
66402: LD_ADDR_VAR 0 5
66406: PUSH
66407: LD_EXP 69
66411: PUSH
66412: LD_VAR 0 2
66416: ARRAY
66417: ST_TO_ADDR
66418: GO 66434
// tmp := target [ 1 ] ;
66420: LD_ADDR_VAR 0 5
66424: PUSH
66425: LD_VAR 0 6
66429: PUSH
66430: LD_INT 1
66432: ARRAY
66433: ST_TO_ADDR
// k := 0 ;
66434: LD_ADDR_VAR 0 4
66438: PUSH
66439: LD_INT 0
66441: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
66442: LD_ADDR_VAR 0 3
66446: PUSH
66447: LD_EXP 69
66451: PUSH
66452: LD_VAR 0 2
66456: ARRAY
66457: PUSH
66458: FOR_IN
66459: IFFALSE 66619
// begin k := k + 1 ;
66461: LD_ADDR_VAR 0 4
66465: PUSH
66466: LD_VAR 0 4
66470: PUSH
66471: LD_INT 1
66473: PLUS
66474: ST_TO_ADDR
// if k > tmp then
66475: LD_VAR 0 4
66479: PUSH
66480: LD_VAR 0 5
66484: GREATER
66485: IFFALSE 66489
// break ;
66487: GO 66619
// if not GetClass ( j ) in [ 2 , 16 ] then
66489: LD_VAR 0 3
66493: PPUSH
66494: CALL_OW 257
66498: PUSH
66499: LD_INT 2
66501: PUSH
66502: LD_INT 16
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: IN
66509: NOT
66510: IFFALSE 66563
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
66512: LD_ADDR_EXP 69
66516: PUSH
66517: LD_EXP 69
66521: PPUSH
66522: LD_VAR 0 2
66526: PPUSH
66527: LD_EXP 69
66531: PUSH
66532: LD_VAR 0 2
66536: ARRAY
66537: PUSH
66538: LD_VAR 0 3
66542: DIFF
66543: PPUSH
66544: CALL_OW 1
66548: ST_TO_ADDR
// SetTag ( j , 0 ) ;
66549: LD_VAR 0 3
66553: PPUSH
66554: LD_INT 0
66556: PPUSH
66557: CALL_OW 109
// continue ;
66561: GO 66458
// end ; if IsInUnit ( j ) then
66563: LD_VAR 0 3
66567: PPUSH
66568: CALL_OW 310
66572: IFFALSE 66583
// ComExitBuilding ( j ) ;
66574: LD_VAR 0 3
66578: PPUSH
66579: CALL_OW 122
// wait ( 3 ) ;
66583: LD_INT 3
66585: PPUSH
66586: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
66590: LD_VAR 0 3
66594: PPUSH
66595: LD_VAR 0 6
66599: PUSH
66600: LD_INT 2
66602: ARRAY
66603: PPUSH
66604: LD_VAR 0 6
66608: PUSH
66609: LD_INT 3
66611: ARRAY
66612: PPUSH
66613: CALL_OW 117
// end ;
66617: GO 66458
66619: POP
66620: POP
// end ; end else
66621: GO 67183
// begin for j in cargo do
66623: LD_ADDR_VAR 0 3
66627: PUSH
66628: LD_VAR 0 7
66632: PUSH
66633: FOR_IN
66634: IFFALSE 67181
// begin if GetTag ( j ) <> 0 then
66636: LD_VAR 0 3
66640: PPUSH
66641: CALL_OW 110
66645: PUSH
66646: LD_INT 0
66648: NONEQUAL
66649: IFFALSE 66653
// continue ;
66651: GO 66633
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
66653: LD_VAR 0 3
66657: PPUSH
66658: CALL_OW 256
66662: PUSH
66663: LD_INT 1000
66665: LESS
66666: PUSH
66667: LD_VAR 0 3
66671: PPUSH
66672: LD_EXP 76
66676: PUSH
66677: LD_VAR 0 2
66681: ARRAY
66682: PPUSH
66683: CALL_OW 308
66687: NOT
66688: AND
66689: IFFALSE 66711
// ComMoveToArea ( j , mc_parking [ i ] ) ;
66691: LD_VAR 0 3
66695: PPUSH
66696: LD_EXP 76
66700: PUSH
66701: LD_VAR 0 2
66705: ARRAY
66706: PPUSH
66707: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
66711: LD_VAR 0 3
66715: PPUSH
66716: CALL_OW 256
66720: PUSH
66721: LD_INT 1000
66723: LESS
66724: PUSH
66725: LD_VAR 0 3
66729: PPUSH
66730: LD_EXP 76
66734: PUSH
66735: LD_VAR 0 2
66739: ARRAY
66740: PPUSH
66741: CALL_OW 308
66745: AND
66746: IFFALSE 66750
// continue ;
66748: GO 66633
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
66750: LD_VAR 0 3
66754: PPUSH
66755: CALL_OW 262
66759: PUSH
66760: LD_INT 2
66762: EQUAL
66763: PUSH
66764: LD_VAR 0 3
66768: PPUSH
66769: CALL_OW 261
66773: PUSH
66774: LD_INT 15
66776: LESS
66777: AND
66778: IFFALSE 66782
// continue ;
66780: GO 66633
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
66782: LD_VAR 0 3
66786: PPUSH
66787: CALL_OW 262
66791: PUSH
66792: LD_INT 1
66794: EQUAL
66795: PUSH
66796: LD_VAR 0 3
66800: PPUSH
66801: CALL_OW 261
66805: PUSH
66806: LD_INT 10
66808: LESS
66809: AND
66810: IFFALSE 67120
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
66812: LD_ADDR_VAR 0 8
66816: PUSH
66817: LD_EXP 52
66821: PUSH
66822: LD_VAR 0 2
66826: ARRAY
66827: PPUSH
66828: LD_INT 2
66830: PUSH
66831: LD_INT 30
66833: PUSH
66834: LD_INT 0
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 30
66843: PUSH
66844: LD_INT 1
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: LIST
66855: PPUSH
66856: CALL_OW 72
66860: ST_TO_ADDR
// if not depot then
66861: LD_VAR 0 8
66865: NOT
66866: IFFALSE 66870
// continue ;
66868: GO 66633
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
66870: LD_VAR 0 3
66874: PPUSH
66875: LD_VAR 0 8
66879: PPUSH
66880: LD_VAR 0 3
66884: PPUSH
66885: CALL_OW 74
66889: PPUSH
66890: CALL_OW 296
66894: PUSH
66895: LD_INT 6
66897: LESS
66898: IFFALSE 66914
// SetFuel ( j , 100 ) else
66900: LD_VAR 0 3
66904: PPUSH
66905: LD_INT 100
66907: PPUSH
66908: CALL_OW 240
66912: GO 67120
// if GetFuel ( j ) = 0 then
66914: LD_VAR 0 3
66918: PPUSH
66919: CALL_OW 261
66923: PUSH
66924: LD_INT 0
66926: EQUAL
66927: IFFALSE 67120
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
66929: LD_ADDR_EXP 71
66933: PUSH
66934: LD_EXP 71
66938: PPUSH
66939: LD_VAR 0 2
66943: PPUSH
66944: LD_EXP 71
66948: PUSH
66949: LD_VAR 0 2
66953: ARRAY
66954: PUSH
66955: LD_VAR 0 3
66959: DIFF
66960: PPUSH
66961: CALL_OW 1
66965: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
66966: LD_VAR 0 3
66970: PPUSH
66971: CALL_OW 263
66975: PUSH
66976: LD_INT 1
66978: EQUAL
66979: IFFALSE 66995
// ComExitVehicle ( IsInUnit ( j ) ) ;
66981: LD_VAR 0 3
66985: PPUSH
66986: CALL_OW 310
66990: PPUSH
66991: CALL_OW 121
// if GetControl ( j ) = control_remote then
66995: LD_VAR 0 3
66999: PPUSH
67000: CALL_OW 263
67004: PUSH
67005: LD_INT 2
67007: EQUAL
67008: IFFALSE 67019
// ComUnlink ( j ) ;
67010: LD_VAR 0 3
67014: PPUSH
67015: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
67019: LD_ADDR_VAR 0 9
67023: PUSH
67024: LD_VAR 0 2
67028: PPUSH
67029: LD_INT 3
67031: PPUSH
67032: CALL 76224 0 2
67036: ST_TO_ADDR
// if fac then
67037: LD_VAR 0 9
67041: IFFALSE 67118
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
67043: LD_ADDR_VAR 0 10
67047: PUSH
67048: LD_VAR 0 9
67052: PPUSH
67053: LD_VAR 0 3
67057: PPUSH
67058: CALL_OW 265
67062: PPUSH
67063: LD_VAR 0 3
67067: PPUSH
67068: CALL_OW 262
67072: PPUSH
67073: LD_VAR 0 3
67077: PPUSH
67078: CALL_OW 263
67082: PPUSH
67083: LD_VAR 0 3
67087: PPUSH
67088: CALL_OW 264
67092: PPUSH
67093: CALL 14313 0 5
67097: ST_TO_ADDR
// if components then
67098: LD_VAR 0 10
67102: IFFALSE 67118
// MC_InsertProduceList ( i , components ) ;
67104: LD_VAR 0 2
67108: PPUSH
67109: LD_VAR 0 10
67113: PPUSH
67114: CALL 75852 0 2
// end ; continue ;
67118: GO 66633
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
67120: LD_VAR 0 3
67124: PPUSH
67125: LD_INT 1
67127: PPUSH
67128: CALL_OW 289
67132: PUSH
67133: LD_INT 100
67135: LESS
67136: PUSH
67137: LD_VAR 0 3
67141: PPUSH
67142: CALL_OW 314
67146: NOT
67147: AND
67148: IFFALSE 67177
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
67150: LD_VAR 0 3
67154: PPUSH
67155: LD_VAR 0 6
67159: PUSH
67160: LD_INT 2
67162: ARRAY
67163: PPUSH
67164: LD_VAR 0 6
67168: PUSH
67169: LD_INT 3
67171: ARRAY
67172: PPUSH
67173: CALL_OW 117
// break ;
67177: GO 67181
// end ;
67179: GO 66633
67181: POP
67182: POP
// end ; end ;
67183: GO 65471
67185: POP
67186: POP
// end ;
67187: LD_VAR 0 1
67191: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
67192: LD_INT 0
67194: PPUSH
67195: PPUSH
67196: PPUSH
67197: PPUSH
// if not mc_bases then
67198: LD_EXP 52
67202: NOT
67203: IFFALSE 67207
// exit ;
67205: GO 67368
// for i = 1 to mc_bases do
67207: LD_ADDR_VAR 0 2
67211: PUSH
67212: DOUBLE
67213: LD_INT 1
67215: DEC
67216: ST_TO_ADDR
67217: LD_EXP 52
67221: PUSH
67222: FOR_TO
67223: IFFALSE 67366
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
67225: LD_ADDR_VAR 0 4
67229: PUSH
67230: LD_EXP 71
67234: PUSH
67235: LD_VAR 0 2
67239: ARRAY
67240: PUSH
67241: LD_EXP 74
67245: PUSH
67246: LD_VAR 0 2
67250: ARRAY
67251: UNION
67252: PPUSH
67253: LD_INT 33
67255: PUSH
67256: LD_INT 2
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: PPUSH
67263: CALL_OW 72
67267: ST_TO_ADDR
// if tmp then
67268: LD_VAR 0 4
67272: IFFALSE 67364
// for j in tmp do
67274: LD_ADDR_VAR 0 3
67278: PUSH
67279: LD_VAR 0 4
67283: PUSH
67284: FOR_IN
67285: IFFALSE 67362
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
67287: LD_VAR 0 3
67291: PPUSH
67292: CALL_OW 312
67296: NOT
67297: PUSH
67298: LD_VAR 0 3
67302: PPUSH
67303: CALL_OW 256
67307: PUSH
67308: LD_INT 250
67310: GREATEREQUAL
67311: AND
67312: IFFALSE 67325
// Connect ( j ) else
67314: LD_VAR 0 3
67318: PPUSH
67319: CALL 19646 0 1
67323: GO 67360
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
67325: LD_VAR 0 3
67329: PPUSH
67330: CALL_OW 256
67334: PUSH
67335: LD_INT 250
67337: LESS
67338: PUSH
67339: LD_VAR 0 3
67343: PPUSH
67344: CALL_OW 312
67348: AND
67349: IFFALSE 67360
// ComUnlink ( j ) ;
67351: LD_VAR 0 3
67355: PPUSH
67356: CALL_OW 136
67360: GO 67284
67362: POP
67363: POP
// end ;
67364: GO 67222
67366: POP
67367: POP
// end ;
67368: LD_VAR 0 1
67372: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
67373: LD_INT 0
67375: PPUSH
67376: PPUSH
67377: PPUSH
67378: PPUSH
67379: PPUSH
// if not mc_bases then
67380: LD_EXP 52
67384: NOT
67385: IFFALSE 67389
// exit ;
67387: GO 67849
// for i = 1 to mc_bases do
67389: LD_ADDR_VAR 0 2
67393: PUSH
67394: DOUBLE
67395: LD_INT 1
67397: DEC
67398: ST_TO_ADDR
67399: LD_EXP 52
67403: PUSH
67404: FOR_TO
67405: IFFALSE 67847
// begin if not mc_produce [ i ] then
67407: LD_EXP 73
67411: PUSH
67412: LD_VAR 0 2
67416: ARRAY
67417: NOT
67418: IFFALSE 67422
// continue ;
67420: GO 67404
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
67422: LD_ADDR_VAR 0 5
67426: PUSH
67427: LD_EXP 52
67431: PUSH
67432: LD_VAR 0 2
67436: ARRAY
67437: PPUSH
67438: LD_INT 30
67440: PUSH
67441: LD_INT 3
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PPUSH
67448: CALL_OW 72
67452: ST_TO_ADDR
// if not fac then
67453: LD_VAR 0 5
67457: NOT
67458: IFFALSE 67462
// continue ;
67460: GO 67404
// for j in fac do
67462: LD_ADDR_VAR 0 3
67466: PUSH
67467: LD_VAR 0 5
67471: PUSH
67472: FOR_IN
67473: IFFALSE 67843
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
67475: LD_VAR 0 3
67479: PPUSH
67480: CALL_OW 461
67484: PUSH
67485: LD_INT 2
67487: NONEQUAL
67488: PUSH
67489: LD_VAR 0 3
67493: PPUSH
67494: LD_INT 15
67496: PPUSH
67497: CALL 19306 0 2
67501: PUSH
67502: LD_INT 4
67504: ARRAY
67505: OR
67506: PUSH
67507: LD_VAR 0 3
67511: PPUSH
67512: CALL_OW 313
67516: PUSH
67517: LD_INT 0
67519: EQUAL
67520: OR
67521: IFFALSE 67525
// continue ;
67523: GO 67472
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
67525: LD_VAR 0 3
67529: PPUSH
67530: LD_EXP 73
67534: PUSH
67535: LD_VAR 0 2
67539: ARRAY
67540: PUSH
67541: LD_INT 1
67543: ARRAY
67544: PUSH
67545: LD_INT 1
67547: ARRAY
67548: PPUSH
67549: LD_EXP 73
67553: PUSH
67554: LD_VAR 0 2
67558: ARRAY
67559: PUSH
67560: LD_INT 1
67562: ARRAY
67563: PUSH
67564: LD_INT 2
67566: ARRAY
67567: PPUSH
67568: LD_EXP 73
67572: PUSH
67573: LD_VAR 0 2
67577: ARRAY
67578: PUSH
67579: LD_INT 1
67581: ARRAY
67582: PUSH
67583: LD_INT 3
67585: ARRAY
67586: PPUSH
67587: LD_EXP 73
67591: PUSH
67592: LD_VAR 0 2
67596: ARRAY
67597: PUSH
67598: LD_INT 1
67600: ARRAY
67601: PUSH
67602: LD_INT 4
67604: ARRAY
67605: PPUSH
67606: CALL_OW 448
67610: PUSH
67611: LD_VAR 0 3
67615: PPUSH
67616: LD_EXP 73
67620: PUSH
67621: LD_VAR 0 2
67625: ARRAY
67626: PUSH
67627: LD_INT 1
67629: ARRAY
67630: PUSH
67631: LD_INT 1
67633: ARRAY
67634: PUSH
67635: LD_EXP 73
67639: PUSH
67640: LD_VAR 0 2
67644: ARRAY
67645: PUSH
67646: LD_INT 1
67648: ARRAY
67649: PUSH
67650: LD_INT 2
67652: ARRAY
67653: PUSH
67654: LD_EXP 73
67658: PUSH
67659: LD_VAR 0 2
67663: ARRAY
67664: PUSH
67665: LD_INT 1
67667: ARRAY
67668: PUSH
67669: LD_INT 3
67671: ARRAY
67672: PUSH
67673: LD_EXP 73
67677: PUSH
67678: LD_VAR 0 2
67682: ARRAY
67683: PUSH
67684: LD_INT 1
67686: ARRAY
67687: PUSH
67688: LD_INT 4
67690: ARRAY
67691: PUSH
67692: EMPTY
67693: LIST
67694: LIST
67695: LIST
67696: LIST
67697: PPUSH
67698: CALL 22977 0 2
67702: AND
67703: IFFALSE 67841
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
67705: LD_VAR 0 3
67709: PPUSH
67710: LD_EXP 73
67714: PUSH
67715: LD_VAR 0 2
67719: ARRAY
67720: PUSH
67721: LD_INT 1
67723: ARRAY
67724: PUSH
67725: LD_INT 1
67727: ARRAY
67728: PPUSH
67729: LD_EXP 73
67733: PUSH
67734: LD_VAR 0 2
67738: ARRAY
67739: PUSH
67740: LD_INT 1
67742: ARRAY
67743: PUSH
67744: LD_INT 2
67746: ARRAY
67747: PPUSH
67748: LD_EXP 73
67752: PUSH
67753: LD_VAR 0 2
67757: ARRAY
67758: PUSH
67759: LD_INT 1
67761: ARRAY
67762: PUSH
67763: LD_INT 3
67765: ARRAY
67766: PPUSH
67767: LD_EXP 73
67771: PUSH
67772: LD_VAR 0 2
67776: ARRAY
67777: PUSH
67778: LD_INT 1
67780: ARRAY
67781: PUSH
67782: LD_INT 4
67784: ARRAY
67785: PPUSH
67786: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
67790: LD_ADDR_VAR 0 4
67794: PUSH
67795: LD_EXP 73
67799: PUSH
67800: LD_VAR 0 2
67804: ARRAY
67805: PPUSH
67806: LD_INT 1
67808: PPUSH
67809: CALL_OW 3
67813: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
67814: LD_ADDR_EXP 73
67818: PUSH
67819: LD_EXP 73
67823: PPUSH
67824: LD_VAR 0 2
67828: PPUSH
67829: LD_VAR 0 4
67833: PPUSH
67834: CALL_OW 1
67838: ST_TO_ADDR
// break ;
67839: GO 67843
// end ; end ;
67841: GO 67472
67843: POP
67844: POP
// end ;
67845: GO 67404
67847: POP
67848: POP
// end ;
67849: LD_VAR 0 1
67853: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
67854: LD_INT 0
67856: PPUSH
67857: PPUSH
67858: PPUSH
// if not mc_bases then
67859: LD_EXP 52
67863: NOT
67864: IFFALSE 67868
// exit ;
67866: GO 67957
// for i = 1 to mc_bases do
67868: LD_ADDR_VAR 0 2
67872: PUSH
67873: DOUBLE
67874: LD_INT 1
67876: DEC
67877: ST_TO_ADDR
67878: LD_EXP 52
67882: PUSH
67883: FOR_TO
67884: IFFALSE 67955
// begin if mc_attack [ i ] then
67886: LD_EXP 72
67890: PUSH
67891: LD_VAR 0 2
67895: ARRAY
67896: IFFALSE 67953
// begin tmp := mc_attack [ i ] [ 1 ] ;
67898: LD_ADDR_VAR 0 3
67902: PUSH
67903: LD_EXP 72
67907: PUSH
67908: LD_VAR 0 2
67912: ARRAY
67913: PUSH
67914: LD_INT 1
67916: ARRAY
67917: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
67918: LD_ADDR_EXP 72
67922: PUSH
67923: LD_EXP 72
67927: PPUSH
67928: LD_VAR 0 2
67932: PPUSH
67933: EMPTY
67934: PPUSH
67935: CALL_OW 1
67939: ST_TO_ADDR
// Attack ( tmp ) ;
67940: LD_VAR 0 3
67944: PPUSH
67945: CALL 45166 0 1
// exit ;
67949: POP
67950: POP
67951: GO 67957
// end ; end ;
67953: GO 67883
67955: POP
67956: POP
// end ;
67957: LD_VAR 0 1
67961: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
67962: LD_INT 0
67964: PPUSH
67965: PPUSH
67966: PPUSH
67967: PPUSH
67968: PPUSH
67969: PPUSH
67970: PPUSH
// if not mc_bases then
67971: LD_EXP 52
67975: NOT
67976: IFFALSE 67980
// exit ;
67978: GO 68584
// for i = 1 to mc_bases do
67980: LD_ADDR_VAR 0 2
67984: PUSH
67985: DOUBLE
67986: LD_INT 1
67988: DEC
67989: ST_TO_ADDR
67990: LD_EXP 52
67994: PUSH
67995: FOR_TO
67996: IFFALSE 68582
// begin if not mc_bases [ i ] then
67998: LD_EXP 52
68002: PUSH
68003: LD_VAR 0 2
68007: ARRAY
68008: NOT
68009: IFFALSE 68013
// continue ;
68011: GO 67995
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
68013: LD_ADDR_VAR 0 7
68017: PUSH
68018: LD_EXP 52
68022: PUSH
68023: LD_VAR 0 2
68027: ARRAY
68028: PUSH
68029: LD_INT 1
68031: ARRAY
68032: PPUSH
68033: CALL 13617 0 1
68037: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
68038: LD_ADDR_EXP 75
68042: PUSH
68043: LD_EXP 75
68047: PPUSH
68048: LD_VAR 0 2
68052: PPUSH
68053: LD_EXP 52
68057: PUSH
68058: LD_VAR 0 2
68062: ARRAY
68063: PUSH
68064: LD_INT 1
68066: ARRAY
68067: PPUSH
68068: CALL_OW 255
68072: PPUSH
68073: LD_EXP 77
68077: PUSH
68078: LD_VAR 0 2
68082: ARRAY
68083: PPUSH
68084: CALL 11577 0 2
68088: PPUSH
68089: CALL_OW 1
68093: ST_TO_ADDR
// if not mc_scan [ i ] then
68094: LD_EXP 75
68098: PUSH
68099: LD_VAR 0 2
68103: ARRAY
68104: NOT
68105: IFFALSE 68260
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
68107: LD_ADDR_VAR 0 4
68111: PUSH
68112: LD_EXP 52
68116: PUSH
68117: LD_VAR 0 2
68121: ARRAY
68122: PPUSH
68123: LD_INT 2
68125: PUSH
68126: LD_INT 25
68128: PUSH
68129: LD_INT 5
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: PUSH
68136: LD_INT 25
68138: PUSH
68139: LD_INT 8
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: PUSH
68146: LD_INT 25
68148: PUSH
68149: LD_INT 9
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: PPUSH
68162: CALL_OW 72
68166: ST_TO_ADDR
// if not tmp then
68167: LD_VAR 0 4
68171: NOT
68172: IFFALSE 68176
// continue ;
68174: GO 67995
// for j in tmp do
68176: LD_ADDR_VAR 0 3
68180: PUSH
68181: LD_VAR 0 4
68185: PUSH
68186: FOR_IN
68187: IFFALSE 68258
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
68189: LD_VAR 0 3
68193: PPUSH
68194: CALL_OW 310
68198: PPUSH
68199: CALL_OW 266
68203: PUSH
68204: LD_INT 5
68206: EQUAL
68207: PUSH
68208: LD_VAR 0 3
68212: PPUSH
68213: CALL_OW 257
68217: PUSH
68218: LD_INT 1
68220: EQUAL
68221: AND
68222: PUSH
68223: LD_VAR 0 3
68227: PPUSH
68228: CALL_OW 459
68232: NOT
68233: AND
68234: PUSH
68235: LD_VAR 0 7
68239: AND
68240: IFFALSE 68256
// ComChangeProfession ( j , class ) ;
68242: LD_VAR 0 3
68246: PPUSH
68247: LD_VAR 0 7
68251: PPUSH
68252: CALL_OW 123
68256: GO 68186
68258: POP
68259: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
68260: LD_EXP 75
68264: PUSH
68265: LD_VAR 0 2
68269: ARRAY
68270: PUSH
68271: LD_EXP 74
68275: PUSH
68276: LD_VAR 0 2
68280: ARRAY
68281: NOT
68282: AND
68283: PUSH
68284: LD_EXP 52
68288: PUSH
68289: LD_VAR 0 2
68293: ARRAY
68294: PPUSH
68295: LD_INT 30
68297: PUSH
68298: LD_INT 32
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: PPUSH
68305: CALL_OW 72
68309: NOT
68310: AND
68311: PUSH
68312: LD_EXP 52
68316: PUSH
68317: LD_VAR 0 2
68321: ARRAY
68322: PPUSH
68323: LD_INT 2
68325: PUSH
68326: LD_INT 30
68328: PUSH
68329: LD_INT 4
68331: PUSH
68332: EMPTY
68333: LIST
68334: LIST
68335: PUSH
68336: LD_INT 30
68338: PUSH
68339: LD_INT 5
68341: PUSH
68342: EMPTY
68343: LIST
68344: LIST
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: LIST
68350: PPUSH
68351: CALL_OW 72
68355: NOT
68356: AND
68357: IFFALSE 68489
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
68359: LD_ADDR_VAR 0 4
68363: PUSH
68364: LD_EXP 52
68368: PUSH
68369: LD_VAR 0 2
68373: ARRAY
68374: PPUSH
68375: LD_INT 2
68377: PUSH
68378: LD_INT 25
68380: PUSH
68381: LD_INT 1
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: PUSH
68388: LD_INT 25
68390: PUSH
68391: LD_INT 5
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: PUSH
68398: LD_INT 25
68400: PUSH
68401: LD_INT 8
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: PUSH
68408: LD_INT 25
68410: PUSH
68411: LD_INT 9
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: PPUSH
68425: CALL_OW 72
68429: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
68430: LD_ADDR_VAR 0 4
68434: PUSH
68435: LD_VAR 0 4
68439: PUSH
68440: LD_VAR 0 4
68444: PPUSH
68445: LD_INT 18
68447: PPUSH
68448: CALL 49949 0 2
68452: DIFF
68453: ST_TO_ADDR
// if tmp then
68454: LD_VAR 0 4
68458: IFFALSE 68489
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
68460: LD_VAR 0 2
68464: PPUSH
68465: LD_VAR 0 4
68469: PPUSH
68470: LD_EXP 77
68474: PUSH
68475: LD_VAR 0 2
68479: ARRAY
68480: PPUSH
68481: CALL 11612 0 3
// exit ;
68485: POP
68486: POP
68487: GO 68584
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
68489: LD_EXP 75
68493: PUSH
68494: LD_VAR 0 2
68498: ARRAY
68499: PUSH
68500: LD_EXP 74
68504: PUSH
68505: LD_VAR 0 2
68509: ARRAY
68510: AND
68511: IFFALSE 68580
// begin tmp := mc_defender [ i ] ;
68513: LD_ADDR_VAR 0 4
68517: PUSH
68518: LD_EXP 74
68522: PUSH
68523: LD_VAR 0 2
68527: ARRAY
68528: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
68529: LD_ADDR_EXP 74
68533: PUSH
68534: LD_EXP 74
68538: PPUSH
68539: LD_VAR 0 2
68543: PPUSH
68544: EMPTY
68545: PPUSH
68546: CALL_OW 1
68550: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
68551: LD_VAR 0 2
68555: PPUSH
68556: LD_VAR 0 4
68560: PPUSH
68561: LD_EXP 75
68565: PUSH
68566: LD_VAR 0 2
68570: ARRAY
68571: PPUSH
68572: CALL 12110 0 3
// exit ;
68576: POP
68577: POP
68578: GO 68584
// end ; end ;
68580: GO 67995
68582: POP
68583: POP
// end ;
68584: LD_VAR 0 1
68588: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
68589: LD_INT 0
68591: PPUSH
68592: PPUSH
68593: PPUSH
68594: PPUSH
68595: PPUSH
68596: PPUSH
68597: PPUSH
68598: PPUSH
68599: PPUSH
68600: PPUSH
68601: PPUSH
// if not mc_bases then
68602: LD_EXP 52
68606: NOT
68607: IFFALSE 68611
// exit ;
68609: GO 69698
// for i = 1 to mc_bases do
68611: LD_ADDR_VAR 0 2
68615: PUSH
68616: DOUBLE
68617: LD_INT 1
68619: DEC
68620: ST_TO_ADDR
68621: LD_EXP 52
68625: PUSH
68626: FOR_TO
68627: IFFALSE 69696
// begin tmp := mc_lab [ i ] ;
68629: LD_ADDR_VAR 0 6
68633: PUSH
68634: LD_EXP 85
68638: PUSH
68639: LD_VAR 0 2
68643: ARRAY
68644: ST_TO_ADDR
// if not tmp then
68645: LD_VAR 0 6
68649: NOT
68650: IFFALSE 68654
// continue ;
68652: GO 68626
// idle_lab := 0 ;
68654: LD_ADDR_VAR 0 11
68658: PUSH
68659: LD_INT 0
68661: ST_TO_ADDR
// for j in tmp do
68662: LD_ADDR_VAR 0 3
68666: PUSH
68667: LD_VAR 0 6
68671: PUSH
68672: FOR_IN
68673: IFFALSE 69692
// begin researching := false ;
68675: LD_ADDR_VAR 0 10
68679: PUSH
68680: LD_INT 0
68682: ST_TO_ADDR
// side := GetSide ( j ) ;
68683: LD_ADDR_VAR 0 4
68687: PUSH
68688: LD_VAR 0 3
68692: PPUSH
68693: CALL_OW 255
68697: ST_TO_ADDR
// if not mc_tech [ side ] then
68698: LD_EXP 79
68702: PUSH
68703: LD_VAR 0 4
68707: ARRAY
68708: NOT
68709: IFFALSE 68713
// continue ;
68711: GO 68672
// if BuildingStatus ( j ) = bs_idle then
68713: LD_VAR 0 3
68717: PPUSH
68718: CALL_OW 461
68722: PUSH
68723: LD_INT 2
68725: EQUAL
68726: IFFALSE 68914
// begin if idle_lab and UnitsInside ( j ) < 6 then
68728: LD_VAR 0 11
68732: PUSH
68733: LD_VAR 0 3
68737: PPUSH
68738: CALL_OW 313
68742: PUSH
68743: LD_INT 6
68745: LESS
68746: AND
68747: IFFALSE 68818
// begin tmp2 := UnitsInside ( idle_lab ) ;
68749: LD_ADDR_VAR 0 9
68753: PUSH
68754: LD_VAR 0 11
68758: PPUSH
68759: CALL_OW 313
68763: ST_TO_ADDR
// if tmp2 then
68764: LD_VAR 0 9
68768: IFFALSE 68810
// for x in tmp2 do
68770: LD_ADDR_VAR 0 7
68774: PUSH
68775: LD_VAR 0 9
68779: PUSH
68780: FOR_IN
68781: IFFALSE 68808
// begin ComExitBuilding ( x ) ;
68783: LD_VAR 0 7
68787: PPUSH
68788: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
68792: LD_VAR 0 7
68796: PPUSH
68797: LD_VAR 0 3
68801: PPUSH
68802: CALL_OW 180
// end ;
68806: GO 68780
68808: POP
68809: POP
// idle_lab := 0 ;
68810: LD_ADDR_VAR 0 11
68814: PUSH
68815: LD_INT 0
68817: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
68818: LD_ADDR_VAR 0 5
68822: PUSH
68823: LD_EXP 79
68827: PUSH
68828: LD_VAR 0 4
68832: ARRAY
68833: PUSH
68834: FOR_IN
68835: IFFALSE 68895
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
68837: LD_VAR 0 3
68841: PPUSH
68842: LD_VAR 0 5
68846: PPUSH
68847: CALL_OW 430
68851: PUSH
68852: LD_VAR 0 4
68856: PPUSH
68857: LD_VAR 0 5
68861: PPUSH
68862: CALL 10682 0 2
68866: AND
68867: IFFALSE 68893
// begin researching := true ;
68869: LD_ADDR_VAR 0 10
68873: PUSH
68874: LD_INT 1
68876: ST_TO_ADDR
// ComResearch ( j , t ) ;
68877: LD_VAR 0 3
68881: PPUSH
68882: LD_VAR 0 5
68886: PPUSH
68887: CALL_OW 124
// break ;
68891: GO 68895
// end ;
68893: GO 68834
68895: POP
68896: POP
// if not researching then
68897: LD_VAR 0 10
68901: NOT
68902: IFFALSE 68914
// idle_lab := j ;
68904: LD_ADDR_VAR 0 11
68908: PUSH
68909: LD_VAR 0 3
68913: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
68914: LD_VAR 0 3
68918: PPUSH
68919: CALL_OW 461
68923: PUSH
68924: LD_INT 10
68926: EQUAL
68927: IFFALSE 69515
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
68929: LD_EXP 81
68933: PUSH
68934: LD_VAR 0 2
68938: ARRAY
68939: NOT
68940: PUSH
68941: LD_EXP 82
68945: PUSH
68946: LD_VAR 0 2
68950: ARRAY
68951: NOT
68952: AND
68953: PUSH
68954: LD_EXP 79
68958: PUSH
68959: LD_VAR 0 4
68963: ARRAY
68964: PUSH
68965: LD_INT 1
68967: GREATER
68968: AND
68969: IFFALSE 69100
// begin ComCancel ( j ) ;
68971: LD_VAR 0 3
68975: PPUSH
68976: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
68980: LD_ADDR_EXP 79
68984: PUSH
68985: LD_EXP 79
68989: PPUSH
68990: LD_VAR 0 4
68994: PPUSH
68995: LD_EXP 79
68999: PUSH
69000: LD_VAR 0 4
69004: ARRAY
69005: PPUSH
69006: LD_EXP 79
69010: PUSH
69011: LD_VAR 0 4
69015: ARRAY
69016: PUSH
69017: LD_INT 1
69019: MINUS
69020: PPUSH
69021: LD_EXP 79
69025: PUSH
69026: LD_VAR 0 4
69030: ARRAY
69031: PPUSH
69032: LD_INT 0
69034: PPUSH
69035: CALL 16131 0 4
69039: PPUSH
69040: CALL_OW 1
69044: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
69045: LD_ADDR_EXP 79
69049: PUSH
69050: LD_EXP 79
69054: PPUSH
69055: LD_VAR 0 4
69059: PPUSH
69060: LD_EXP 79
69064: PUSH
69065: LD_VAR 0 4
69069: ARRAY
69070: PPUSH
69071: LD_EXP 79
69075: PUSH
69076: LD_VAR 0 4
69080: ARRAY
69081: PPUSH
69082: LD_INT 1
69084: PPUSH
69085: LD_INT 0
69087: PPUSH
69088: CALL 16131 0 4
69092: PPUSH
69093: CALL_OW 1
69097: ST_TO_ADDR
// continue ;
69098: GO 68672
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
69100: LD_EXP 81
69104: PUSH
69105: LD_VAR 0 2
69109: ARRAY
69110: PUSH
69111: LD_EXP 82
69115: PUSH
69116: LD_VAR 0 2
69120: ARRAY
69121: NOT
69122: AND
69123: IFFALSE 69250
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
69125: LD_ADDR_EXP 82
69129: PUSH
69130: LD_EXP 82
69134: PPUSH
69135: LD_VAR 0 2
69139: PUSH
69140: LD_EXP 82
69144: PUSH
69145: LD_VAR 0 2
69149: ARRAY
69150: PUSH
69151: LD_INT 1
69153: PLUS
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PPUSH
69159: LD_EXP 81
69163: PUSH
69164: LD_VAR 0 2
69168: ARRAY
69169: PUSH
69170: LD_INT 1
69172: ARRAY
69173: PPUSH
69174: CALL 16713 0 3
69178: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
69179: LD_EXP 81
69183: PUSH
69184: LD_VAR 0 2
69188: ARRAY
69189: PUSH
69190: LD_INT 1
69192: ARRAY
69193: PPUSH
69194: LD_INT 112
69196: PPUSH
69197: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
69201: LD_ADDR_VAR 0 9
69205: PUSH
69206: LD_EXP 81
69210: PUSH
69211: LD_VAR 0 2
69215: ARRAY
69216: PPUSH
69217: LD_INT 1
69219: PPUSH
69220: CALL_OW 3
69224: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
69225: LD_ADDR_EXP 81
69229: PUSH
69230: LD_EXP 81
69234: PPUSH
69235: LD_VAR 0 2
69239: PPUSH
69240: LD_VAR 0 9
69244: PPUSH
69245: CALL_OW 1
69249: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
69250: LD_EXP 81
69254: PUSH
69255: LD_VAR 0 2
69259: ARRAY
69260: PUSH
69261: LD_EXP 82
69265: PUSH
69266: LD_VAR 0 2
69270: ARRAY
69271: AND
69272: PUSH
69273: LD_EXP 82
69277: PUSH
69278: LD_VAR 0 2
69282: ARRAY
69283: PUSH
69284: LD_INT 1
69286: ARRAY
69287: PPUSH
69288: CALL_OW 310
69292: NOT
69293: AND
69294: PUSH
69295: LD_VAR 0 3
69299: PPUSH
69300: CALL_OW 313
69304: PUSH
69305: LD_INT 6
69307: EQUAL
69308: AND
69309: IFFALSE 69365
// begin tmp2 := UnitsInside ( j ) ;
69311: LD_ADDR_VAR 0 9
69315: PUSH
69316: LD_VAR 0 3
69320: PPUSH
69321: CALL_OW 313
69325: ST_TO_ADDR
// if tmp2 = 6 then
69326: LD_VAR 0 9
69330: PUSH
69331: LD_INT 6
69333: EQUAL
69334: IFFALSE 69365
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
69336: LD_VAR 0 9
69340: PUSH
69341: LD_INT 1
69343: ARRAY
69344: PPUSH
69345: LD_INT 112
69347: PPUSH
69348: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
69352: LD_VAR 0 9
69356: PUSH
69357: LD_INT 1
69359: ARRAY
69360: PPUSH
69361: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
69365: LD_EXP 82
69369: PUSH
69370: LD_VAR 0 2
69374: ARRAY
69375: PUSH
69376: LD_EXP 82
69380: PUSH
69381: LD_VAR 0 2
69385: ARRAY
69386: PUSH
69387: LD_INT 1
69389: ARRAY
69390: PPUSH
69391: CALL_OW 314
69395: NOT
69396: AND
69397: PUSH
69398: LD_EXP 82
69402: PUSH
69403: LD_VAR 0 2
69407: ARRAY
69408: PUSH
69409: LD_INT 1
69411: ARRAY
69412: PPUSH
69413: CALL_OW 310
69417: NOT
69418: AND
69419: IFFALSE 69445
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
69421: LD_EXP 82
69425: PUSH
69426: LD_VAR 0 2
69430: ARRAY
69431: PUSH
69432: LD_INT 1
69434: ARRAY
69435: PPUSH
69436: LD_VAR 0 3
69440: PPUSH
69441: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
69445: LD_EXP 82
69449: PUSH
69450: LD_VAR 0 2
69454: ARRAY
69455: PUSH
69456: LD_INT 1
69458: ARRAY
69459: PPUSH
69460: CALL_OW 310
69464: PUSH
69465: LD_EXP 82
69469: PUSH
69470: LD_VAR 0 2
69474: ARRAY
69475: PUSH
69476: LD_INT 1
69478: ARRAY
69479: PPUSH
69480: CALL_OW 310
69484: PPUSH
69485: CALL_OW 461
69489: PUSH
69490: LD_INT 3
69492: NONEQUAL
69493: AND
69494: IFFALSE 69515
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
69496: LD_EXP 82
69500: PUSH
69501: LD_VAR 0 2
69505: ARRAY
69506: PUSH
69507: LD_INT 1
69509: ARRAY
69510: PPUSH
69511: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
69515: LD_VAR 0 3
69519: PPUSH
69520: CALL_OW 461
69524: PUSH
69525: LD_INT 6
69527: EQUAL
69528: PUSH
69529: LD_VAR 0 6
69533: PUSH
69534: LD_INT 1
69536: GREATER
69537: AND
69538: IFFALSE 69690
// begin sci := [ ] ;
69540: LD_ADDR_VAR 0 8
69544: PUSH
69545: EMPTY
69546: ST_TO_ADDR
// for x in ( tmp diff j ) do
69547: LD_ADDR_VAR 0 7
69551: PUSH
69552: LD_VAR 0 6
69556: PUSH
69557: LD_VAR 0 3
69561: DIFF
69562: PUSH
69563: FOR_IN
69564: IFFALSE 69616
// begin if sci = 6 then
69566: LD_VAR 0 8
69570: PUSH
69571: LD_INT 6
69573: EQUAL
69574: IFFALSE 69578
// break ;
69576: GO 69616
// if BuildingStatus ( x ) = bs_idle then
69578: LD_VAR 0 7
69582: PPUSH
69583: CALL_OW 461
69587: PUSH
69588: LD_INT 2
69590: EQUAL
69591: IFFALSE 69614
// sci := sci ^ UnitsInside ( x ) ;
69593: LD_ADDR_VAR 0 8
69597: PUSH
69598: LD_VAR 0 8
69602: PUSH
69603: LD_VAR 0 7
69607: PPUSH
69608: CALL_OW 313
69612: ADD
69613: ST_TO_ADDR
// end ;
69614: GO 69563
69616: POP
69617: POP
// if not sci then
69618: LD_VAR 0 8
69622: NOT
69623: IFFALSE 69627
// continue ;
69625: GO 68672
// for x in sci do
69627: LD_ADDR_VAR 0 7
69631: PUSH
69632: LD_VAR 0 8
69636: PUSH
69637: FOR_IN
69638: IFFALSE 69688
// if IsInUnit ( x ) and not HasTask ( x ) then
69640: LD_VAR 0 7
69644: PPUSH
69645: CALL_OW 310
69649: PUSH
69650: LD_VAR 0 7
69654: PPUSH
69655: CALL_OW 314
69659: NOT
69660: AND
69661: IFFALSE 69686
// begin ComExitBuilding ( x ) ;
69663: LD_VAR 0 7
69667: PPUSH
69668: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
69672: LD_VAR 0 7
69676: PPUSH
69677: LD_VAR 0 3
69681: PPUSH
69682: CALL_OW 180
// end ;
69686: GO 69637
69688: POP
69689: POP
// end ; end ;
69690: GO 68672
69692: POP
69693: POP
// end ;
69694: GO 68626
69696: POP
69697: POP
// end ;
69698: LD_VAR 0 1
69702: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
69703: LD_INT 0
69705: PPUSH
69706: PPUSH
// if not mc_bases then
69707: LD_EXP 52
69711: NOT
69712: IFFALSE 69716
// exit ;
69714: GO 69797
// for i = 1 to mc_bases do
69716: LD_ADDR_VAR 0 2
69720: PUSH
69721: DOUBLE
69722: LD_INT 1
69724: DEC
69725: ST_TO_ADDR
69726: LD_EXP 52
69730: PUSH
69731: FOR_TO
69732: IFFALSE 69795
// if mc_mines [ i ] and mc_miners [ i ] then
69734: LD_EXP 65
69738: PUSH
69739: LD_VAR 0 2
69743: ARRAY
69744: PUSH
69745: LD_EXP 66
69749: PUSH
69750: LD_VAR 0 2
69754: ARRAY
69755: AND
69756: IFFALSE 69793
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
69758: LD_EXP 66
69762: PUSH
69763: LD_VAR 0 2
69767: ARRAY
69768: PUSH
69769: LD_INT 1
69771: ARRAY
69772: PPUSH
69773: CALL_OW 255
69777: PPUSH
69778: LD_EXP 65
69782: PUSH
69783: LD_VAR 0 2
69787: ARRAY
69788: PPUSH
69789: CALL 13770 0 2
69793: GO 69731
69795: POP
69796: POP
// end ;
69797: LD_VAR 0 1
69801: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
69802: LD_INT 0
69804: PPUSH
69805: PPUSH
69806: PPUSH
69807: PPUSH
69808: PPUSH
69809: PPUSH
69810: PPUSH
69811: PPUSH
// if not mc_bases or not mc_parking then
69812: LD_EXP 52
69816: NOT
69817: PUSH
69818: LD_EXP 76
69822: NOT
69823: OR
69824: IFFALSE 69828
// exit ;
69826: GO 70540
// for i = 1 to mc_bases do
69828: LD_ADDR_VAR 0 2
69832: PUSH
69833: DOUBLE
69834: LD_INT 1
69836: DEC
69837: ST_TO_ADDR
69838: LD_EXP 52
69842: PUSH
69843: FOR_TO
69844: IFFALSE 70538
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
69846: LD_EXP 52
69850: PUSH
69851: LD_VAR 0 2
69855: ARRAY
69856: NOT
69857: PUSH
69858: LD_EXP 76
69862: PUSH
69863: LD_VAR 0 2
69867: ARRAY
69868: NOT
69869: OR
69870: IFFALSE 69874
// continue ;
69872: GO 69843
// if mc_scan [ i ] then
69874: LD_EXP 75
69878: PUSH
69879: LD_VAR 0 2
69883: ARRAY
69884: IFFALSE 69910
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
69886: LD_ADDR_EXP 64
69890: PUSH
69891: LD_EXP 64
69895: PPUSH
69896: LD_VAR 0 2
69900: PPUSH
69901: EMPTY
69902: PPUSH
69903: CALL_OW 1
69907: ST_TO_ADDR
// continue ;
69908: GO 69843
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
69910: LD_ADDR_VAR 0 5
69914: PUSH
69915: LD_EXP 52
69919: PUSH
69920: LD_VAR 0 2
69924: ARRAY
69925: PUSH
69926: LD_INT 1
69928: ARRAY
69929: PPUSH
69930: CALL_OW 255
69934: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
69935: LD_ADDR_VAR 0 6
69939: PUSH
69940: LD_EXP 52
69944: PUSH
69945: LD_VAR 0 2
69949: ARRAY
69950: PPUSH
69951: LD_INT 30
69953: PUSH
69954: LD_INT 3
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: PPUSH
69961: CALL_OW 72
69965: ST_TO_ADDR
// if not fac then
69966: LD_VAR 0 6
69970: NOT
69971: IFFALSE 70022
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
69973: LD_ADDR_VAR 0 6
69977: PUSH
69978: LD_EXP 52
69982: PUSH
69983: LD_VAR 0 2
69987: ARRAY
69988: PPUSH
69989: LD_INT 2
69991: PUSH
69992: LD_INT 30
69994: PUSH
69995: LD_INT 0
69997: PUSH
69998: EMPTY
69999: LIST
70000: LIST
70001: PUSH
70002: LD_INT 30
70004: PUSH
70005: LD_INT 1
70007: PUSH
70008: EMPTY
70009: LIST
70010: LIST
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: LIST
70016: PPUSH
70017: CALL_OW 72
70021: ST_TO_ADDR
// if not fac then
70022: LD_VAR 0 6
70026: NOT
70027: IFFALSE 70031
// continue ;
70029: GO 69843
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
70031: LD_ADDR_VAR 0 7
70035: PUSH
70036: LD_EXP 76
70040: PUSH
70041: LD_VAR 0 2
70045: ARRAY
70046: PPUSH
70047: LD_INT 22
70049: PUSH
70050: LD_VAR 0 5
70054: PUSH
70055: EMPTY
70056: LIST
70057: LIST
70058: PUSH
70059: LD_INT 21
70061: PUSH
70062: LD_INT 2
70064: PUSH
70065: EMPTY
70066: LIST
70067: LIST
70068: PUSH
70069: LD_INT 3
70071: PUSH
70072: LD_INT 24
70074: PUSH
70075: LD_INT 1000
70077: PUSH
70078: EMPTY
70079: LIST
70080: LIST
70081: PUSH
70082: EMPTY
70083: LIST
70084: LIST
70085: PUSH
70086: EMPTY
70087: LIST
70088: LIST
70089: LIST
70090: PPUSH
70091: CALL_OW 70
70095: PUSH
70096: LD_INT 22
70098: PUSH
70099: LD_VAR 0 5
70103: PUSH
70104: EMPTY
70105: LIST
70106: LIST
70107: PUSH
70108: LD_INT 91
70110: PUSH
70111: LD_VAR 0 6
70115: PUSH
70116: LD_INT 1
70118: ARRAY
70119: PUSH
70120: LD_INT 25
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: LIST
70127: PUSH
70128: LD_INT 21
70130: PUSH
70131: LD_INT 2
70133: PUSH
70134: EMPTY
70135: LIST
70136: LIST
70137: PUSH
70138: LD_INT 3
70140: PUSH
70141: LD_INT 24
70143: PUSH
70144: LD_INT 1000
70146: PUSH
70147: EMPTY
70148: LIST
70149: LIST
70150: PUSH
70151: EMPTY
70152: LIST
70153: LIST
70154: PUSH
70155: EMPTY
70156: LIST
70157: LIST
70158: LIST
70159: LIST
70160: PPUSH
70161: CALL_OW 69
70165: UNION
70166: ST_TO_ADDR
// if not vehs then
70167: LD_VAR 0 7
70171: NOT
70172: IFFALSE 70198
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
70174: LD_ADDR_EXP 64
70178: PUSH
70179: LD_EXP 64
70183: PPUSH
70184: LD_VAR 0 2
70188: PPUSH
70189: EMPTY
70190: PPUSH
70191: CALL_OW 1
70195: ST_TO_ADDR
// continue ;
70196: GO 69843
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
70198: LD_ADDR_VAR 0 8
70202: PUSH
70203: LD_EXP 52
70207: PUSH
70208: LD_VAR 0 2
70212: ARRAY
70213: PPUSH
70214: LD_INT 30
70216: PUSH
70217: LD_INT 3
70219: PUSH
70220: EMPTY
70221: LIST
70222: LIST
70223: PPUSH
70224: CALL_OW 72
70228: ST_TO_ADDR
// if tmp then
70229: LD_VAR 0 8
70233: IFFALSE 70336
// begin for j in tmp do
70235: LD_ADDR_VAR 0 3
70239: PUSH
70240: LD_VAR 0 8
70244: PUSH
70245: FOR_IN
70246: IFFALSE 70334
// for k in UnitsInside ( j ) do
70248: LD_ADDR_VAR 0 4
70252: PUSH
70253: LD_VAR 0 3
70257: PPUSH
70258: CALL_OW 313
70262: PUSH
70263: FOR_IN
70264: IFFALSE 70330
// if k then
70266: LD_VAR 0 4
70270: IFFALSE 70328
// if not k in mc_repair_vehicle [ i ] then
70272: LD_VAR 0 4
70276: PUSH
70277: LD_EXP 64
70281: PUSH
70282: LD_VAR 0 2
70286: ARRAY
70287: IN
70288: NOT
70289: IFFALSE 70328
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
70291: LD_ADDR_EXP 64
70295: PUSH
70296: LD_EXP 64
70300: PPUSH
70301: LD_VAR 0 2
70305: PPUSH
70306: LD_EXP 64
70310: PUSH
70311: LD_VAR 0 2
70315: ARRAY
70316: PUSH
70317: LD_VAR 0 4
70321: UNION
70322: PPUSH
70323: CALL_OW 1
70327: ST_TO_ADDR
70328: GO 70263
70330: POP
70331: POP
70332: GO 70245
70334: POP
70335: POP
// end ; if not mc_repair_vehicle [ i ] then
70336: LD_EXP 64
70340: PUSH
70341: LD_VAR 0 2
70345: ARRAY
70346: NOT
70347: IFFALSE 70351
// continue ;
70349: GO 69843
// for j in mc_repair_vehicle [ i ] do
70351: LD_ADDR_VAR 0 3
70355: PUSH
70356: LD_EXP 64
70360: PUSH
70361: LD_VAR 0 2
70365: ARRAY
70366: PUSH
70367: FOR_IN
70368: IFFALSE 70534
// begin if GetClass ( j ) <> 3 then
70370: LD_VAR 0 3
70374: PPUSH
70375: CALL_OW 257
70379: PUSH
70380: LD_INT 3
70382: NONEQUAL
70383: IFFALSE 70424
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
70385: LD_ADDR_EXP 64
70389: PUSH
70390: LD_EXP 64
70394: PPUSH
70395: LD_VAR 0 2
70399: PPUSH
70400: LD_EXP 64
70404: PUSH
70405: LD_VAR 0 2
70409: ARRAY
70410: PUSH
70411: LD_VAR 0 3
70415: DIFF
70416: PPUSH
70417: CALL_OW 1
70421: ST_TO_ADDR
// continue ;
70422: GO 70367
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
70424: LD_VAR 0 3
70428: PPUSH
70429: CALL_OW 311
70433: NOT
70434: PUSH
70435: LD_VAR 0 3
70439: PUSH
70440: LD_EXP 55
70444: PUSH
70445: LD_VAR 0 2
70449: ARRAY
70450: PUSH
70451: LD_INT 1
70453: ARRAY
70454: IN
70455: NOT
70456: AND
70457: PUSH
70458: LD_VAR 0 3
70462: PUSH
70463: LD_EXP 55
70467: PUSH
70468: LD_VAR 0 2
70472: ARRAY
70473: PUSH
70474: LD_INT 2
70476: ARRAY
70477: IN
70478: NOT
70479: AND
70480: IFFALSE 70532
// begin if IsInUnit ( j ) then
70482: LD_VAR 0 3
70486: PPUSH
70487: CALL_OW 310
70491: IFFALSE 70502
// ComExitBuilding ( j ) ;
70493: LD_VAR 0 3
70497: PPUSH
70498: CALL_OW 122
// if not HasTask ( j ) then
70502: LD_VAR 0 3
70506: PPUSH
70507: CALL_OW 314
70511: NOT
70512: IFFALSE 70532
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
70514: LD_VAR 0 3
70518: PPUSH
70519: LD_VAR 0 7
70523: PUSH
70524: LD_INT 1
70526: ARRAY
70527: PPUSH
70528: CALL_OW 189
// end ; end ;
70532: GO 70367
70534: POP
70535: POP
// end ;
70536: GO 69843
70538: POP
70539: POP
// end ;
70540: LD_VAR 0 1
70544: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
70545: LD_INT 0
70547: PPUSH
70548: PPUSH
70549: PPUSH
70550: PPUSH
70551: PPUSH
70552: PPUSH
70553: PPUSH
70554: PPUSH
70555: PPUSH
70556: PPUSH
70557: PPUSH
// if not mc_bases then
70558: LD_EXP 52
70562: NOT
70563: IFFALSE 70567
// exit ;
70565: GO 71369
// for i = 1 to mc_bases do
70567: LD_ADDR_VAR 0 2
70571: PUSH
70572: DOUBLE
70573: LD_INT 1
70575: DEC
70576: ST_TO_ADDR
70577: LD_EXP 52
70581: PUSH
70582: FOR_TO
70583: IFFALSE 71367
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
70585: LD_EXP 80
70589: PUSH
70590: LD_VAR 0 2
70594: ARRAY
70595: NOT
70596: PUSH
70597: LD_EXP 55
70601: PUSH
70602: LD_VAR 0 2
70606: ARRAY
70607: PUSH
70608: LD_INT 1
70610: ARRAY
70611: OR
70612: PUSH
70613: LD_EXP 55
70617: PUSH
70618: LD_VAR 0 2
70622: ARRAY
70623: PUSH
70624: LD_INT 2
70626: ARRAY
70627: OR
70628: PUSH
70629: LD_EXP 78
70633: PUSH
70634: LD_VAR 0 2
70638: ARRAY
70639: PPUSH
70640: LD_INT 1
70642: PPUSH
70643: CALL_OW 325
70647: NOT
70648: OR
70649: PUSH
70650: LD_EXP 75
70654: PUSH
70655: LD_VAR 0 2
70659: ARRAY
70660: OR
70661: IFFALSE 70665
// continue ;
70663: GO 70582
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
70665: LD_ADDR_VAR 0 8
70669: PUSH
70670: LD_EXP 52
70674: PUSH
70675: LD_VAR 0 2
70679: ARRAY
70680: PPUSH
70681: LD_INT 25
70683: PUSH
70684: LD_INT 4
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: PUSH
70691: LD_INT 50
70693: PUSH
70694: EMPTY
70695: LIST
70696: PUSH
70697: LD_INT 3
70699: PUSH
70700: LD_INT 60
70702: PUSH
70703: EMPTY
70704: LIST
70705: PUSH
70706: EMPTY
70707: LIST
70708: LIST
70709: PUSH
70710: EMPTY
70711: LIST
70712: LIST
70713: LIST
70714: PPUSH
70715: CALL_OW 72
70719: PUSH
70720: LD_EXP 56
70724: PUSH
70725: LD_VAR 0 2
70729: ARRAY
70730: DIFF
70731: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
70732: LD_ADDR_VAR 0 9
70736: PUSH
70737: LD_EXP 52
70741: PUSH
70742: LD_VAR 0 2
70746: ARRAY
70747: PPUSH
70748: LD_INT 2
70750: PUSH
70751: LD_INT 30
70753: PUSH
70754: LD_INT 0
70756: PUSH
70757: EMPTY
70758: LIST
70759: LIST
70760: PUSH
70761: LD_INT 30
70763: PUSH
70764: LD_INT 1
70766: PUSH
70767: EMPTY
70768: LIST
70769: LIST
70770: PUSH
70771: EMPTY
70772: LIST
70773: LIST
70774: LIST
70775: PPUSH
70776: CALL_OW 72
70780: ST_TO_ADDR
// if not tmp or not dep then
70781: LD_VAR 0 8
70785: NOT
70786: PUSH
70787: LD_VAR 0 9
70791: NOT
70792: OR
70793: IFFALSE 70797
// continue ;
70795: GO 70582
// side := GetSide ( tmp [ 1 ] ) ;
70797: LD_ADDR_VAR 0 11
70801: PUSH
70802: LD_VAR 0 8
70806: PUSH
70807: LD_INT 1
70809: ARRAY
70810: PPUSH
70811: CALL_OW 255
70815: ST_TO_ADDR
// dep := dep [ 1 ] ;
70816: LD_ADDR_VAR 0 9
70820: PUSH
70821: LD_VAR 0 9
70825: PUSH
70826: LD_INT 1
70828: ARRAY
70829: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
70830: LD_ADDR_VAR 0 7
70834: PUSH
70835: LD_EXP 80
70839: PUSH
70840: LD_VAR 0 2
70844: ARRAY
70845: PPUSH
70846: LD_INT 22
70848: PUSH
70849: LD_INT 0
70851: PUSH
70852: EMPTY
70853: LIST
70854: LIST
70855: PUSH
70856: LD_INT 25
70858: PUSH
70859: LD_INT 12
70861: PUSH
70862: EMPTY
70863: LIST
70864: LIST
70865: PUSH
70866: EMPTY
70867: LIST
70868: LIST
70869: PPUSH
70870: CALL_OW 70
70874: PUSH
70875: LD_INT 22
70877: PUSH
70878: LD_INT 0
70880: PUSH
70881: EMPTY
70882: LIST
70883: LIST
70884: PUSH
70885: LD_INT 25
70887: PUSH
70888: LD_INT 12
70890: PUSH
70891: EMPTY
70892: LIST
70893: LIST
70894: PUSH
70895: LD_INT 91
70897: PUSH
70898: LD_VAR 0 9
70902: PUSH
70903: LD_INT 20
70905: PUSH
70906: EMPTY
70907: LIST
70908: LIST
70909: LIST
70910: PUSH
70911: EMPTY
70912: LIST
70913: LIST
70914: LIST
70915: PPUSH
70916: CALL_OW 69
70920: UNION
70921: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
70922: LD_ADDR_VAR 0 10
70926: PUSH
70927: LD_EXP 80
70931: PUSH
70932: LD_VAR 0 2
70936: ARRAY
70937: PPUSH
70938: LD_INT 81
70940: PUSH
70941: LD_VAR 0 11
70945: PUSH
70946: EMPTY
70947: LIST
70948: LIST
70949: PPUSH
70950: CALL_OW 70
70954: ST_TO_ADDR
// if not apes or danger_at_area then
70955: LD_VAR 0 7
70959: NOT
70960: PUSH
70961: LD_VAR 0 10
70965: OR
70966: IFFALSE 71016
// begin if mc_taming [ i ] then
70968: LD_EXP 83
70972: PUSH
70973: LD_VAR 0 2
70977: ARRAY
70978: IFFALSE 71014
// begin MC_Reset ( i , 121 ) ;
70980: LD_VAR 0 2
70984: PPUSH
70985: LD_INT 121
70987: PPUSH
70988: CALL 56651 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
70992: LD_ADDR_EXP 83
70996: PUSH
70997: LD_EXP 83
71001: PPUSH
71002: LD_VAR 0 2
71006: PPUSH
71007: EMPTY
71008: PPUSH
71009: CALL_OW 1
71013: ST_TO_ADDR
// end ; continue ;
71014: GO 70582
// end ; for j in tmp do
71016: LD_ADDR_VAR 0 3
71020: PUSH
71021: LD_VAR 0 8
71025: PUSH
71026: FOR_IN
71027: IFFALSE 71363
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
71029: LD_VAR 0 3
71033: PUSH
71034: LD_EXP 83
71038: PUSH
71039: LD_VAR 0 2
71043: ARRAY
71044: IN
71045: NOT
71046: PUSH
71047: LD_EXP 83
71051: PUSH
71052: LD_VAR 0 2
71056: ARRAY
71057: PUSH
71058: LD_INT 3
71060: LESS
71061: AND
71062: IFFALSE 71120
// begin SetTag ( j , 121 ) ;
71064: LD_VAR 0 3
71068: PPUSH
71069: LD_INT 121
71071: PPUSH
71072: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
71076: LD_ADDR_EXP 83
71080: PUSH
71081: LD_EXP 83
71085: PPUSH
71086: LD_VAR 0 2
71090: PUSH
71091: LD_EXP 83
71095: PUSH
71096: LD_VAR 0 2
71100: ARRAY
71101: PUSH
71102: LD_INT 1
71104: PLUS
71105: PUSH
71106: EMPTY
71107: LIST
71108: LIST
71109: PPUSH
71110: LD_VAR 0 3
71114: PPUSH
71115: CALL 16713 0 3
71119: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
71120: LD_VAR 0 3
71124: PUSH
71125: LD_EXP 83
71129: PUSH
71130: LD_VAR 0 2
71134: ARRAY
71135: IN
71136: IFFALSE 71361
// begin if GetClass ( j ) <> 4 then
71138: LD_VAR 0 3
71142: PPUSH
71143: CALL_OW 257
71147: PUSH
71148: LD_INT 4
71150: NONEQUAL
71151: IFFALSE 71204
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
71153: LD_ADDR_EXP 83
71157: PUSH
71158: LD_EXP 83
71162: PPUSH
71163: LD_VAR 0 2
71167: PPUSH
71168: LD_EXP 83
71172: PUSH
71173: LD_VAR 0 2
71177: ARRAY
71178: PUSH
71179: LD_VAR 0 3
71183: DIFF
71184: PPUSH
71185: CALL_OW 1
71189: ST_TO_ADDR
// SetTag ( j , 0 ) ;
71190: LD_VAR 0 3
71194: PPUSH
71195: LD_INT 0
71197: PPUSH
71198: CALL_OW 109
// continue ;
71202: GO 71026
// end ; if IsInUnit ( j ) then
71204: LD_VAR 0 3
71208: PPUSH
71209: CALL_OW 310
71213: IFFALSE 71224
// ComExitBuilding ( j ) ;
71215: LD_VAR 0 3
71219: PPUSH
71220: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
71224: LD_ADDR_VAR 0 6
71228: PUSH
71229: LD_VAR 0 7
71233: PPUSH
71234: LD_VAR 0 3
71238: PPUSH
71239: CALL_OW 74
71243: ST_TO_ADDR
// if not ape then
71244: LD_VAR 0 6
71248: NOT
71249: IFFALSE 71253
// break ;
71251: GO 71363
// x := GetX ( ape ) ;
71253: LD_ADDR_VAR 0 4
71257: PUSH
71258: LD_VAR 0 6
71262: PPUSH
71263: CALL_OW 250
71267: ST_TO_ADDR
// y := GetY ( ape ) ;
71268: LD_ADDR_VAR 0 5
71272: PUSH
71273: LD_VAR 0 6
71277: PPUSH
71278: CALL_OW 251
71282: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
71283: LD_VAR 0 4
71287: PPUSH
71288: LD_VAR 0 5
71292: PPUSH
71293: CALL_OW 488
71297: NOT
71298: PUSH
71299: LD_VAR 0 11
71303: PPUSH
71304: LD_VAR 0 4
71308: PPUSH
71309: LD_VAR 0 5
71313: PPUSH
71314: LD_INT 20
71316: PPUSH
71317: CALL 17609 0 4
71321: PUSH
71322: LD_INT 4
71324: ARRAY
71325: OR
71326: IFFALSE 71330
// break ;
71328: GO 71363
// if not HasTask ( j ) then
71330: LD_VAR 0 3
71334: PPUSH
71335: CALL_OW 314
71339: NOT
71340: IFFALSE 71361
// ComTameXY ( j , x , y ) ;
71342: LD_VAR 0 3
71346: PPUSH
71347: LD_VAR 0 4
71351: PPUSH
71352: LD_VAR 0 5
71356: PPUSH
71357: CALL_OW 131
// end ; end ;
71361: GO 71026
71363: POP
71364: POP
// end ;
71365: GO 70582
71367: POP
71368: POP
// end ;
71369: LD_VAR 0 1
71373: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
71374: LD_INT 0
71376: PPUSH
71377: PPUSH
71378: PPUSH
71379: PPUSH
71380: PPUSH
71381: PPUSH
71382: PPUSH
71383: PPUSH
// if not mc_bases then
71384: LD_EXP 52
71388: NOT
71389: IFFALSE 71393
// exit ;
71391: GO 72019
// for i = 1 to mc_bases do
71393: LD_ADDR_VAR 0 2
71397: PUSH
71398: DOUBLE
71399: LD_INT 1
71401: DEC
71402: ST_TO_ADDR
71403: LD_EXP 52
71407: PUSH
71408: FOR_TO
71409: IFFALSE 72017
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
71411: LD_EXP 81
71415: PUSH
71416: LD_VAR 0 2
71420: ARRAY
71421: NOT
71422: PUSH
71423: LD_EXP 81
71427: PUSH
71428: LD_VAR 0 2
71432: ARRAY
71433: PPUSH
71434: LD_INT 25
71436: PUSH
71437: LD_INT 12
71439: PUSH
71440: EMPTY
71441: LIST
71442: LIST
71443: PPUSH
71444: CALL_OW 72
71448: NOT
71449: OR
71450: IFFALSE 71454
// continue ;
71452: GO 71408
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
71454: LD_ADDR_VAR 0 5
71458: PUSH
71459: LD_EXP 81
71463: PUSH
71464: LD_VAR 0 2
71468: ARRAY
71469: PUSH
71470: LD_INT 1
71472: ARRAY
71473: PPUSH
71474: CALL_OW 255
71478: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
71479: LD_VAR 0 5
71483: PPUSH
71484: LD_INT 2
71486: PPUSH
71487: CALL_OW 325
71491: IFFALSE 71744
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
71493: LD_ADDR_VAR 0 4
71497: PUSH
71498: LD_EXP 81
71502: PUSH
71503: LD_VAR 0 2
71507: ARRAY
71508: PPUSH
71509: LD_INT 25
71511: PUSH
71512: LD_INT 16
71514: PUSH
71515: EMPTY
71516: LIST
71517: LIST
71518: PPUSH
71519: CALL_OW 72
71523: ST_TO_ADDR
// if tmp < 6 then
71524: LD_VAR 0 4
71528: PUSH
71529: LD_INT 6
71531: LESS
71532: IFFALSE 71744
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
71534: LD_ADDR_VAR 0 6
71538: PUSH
71539: LD_EXP 52
71543: PUSH
71544: LD_VAR 0 2
71548: ARRAY
71549: PPUSH
71550: LD_INT 2
71552: PUSH
71553: LD_INT 30
71555: PUSH
71556: LD_INT 0
71558: PUSH
71559: EMPTY
71560: LIST
71561: LIST
71562: PUSH
71563: LD_INT 30
71565: PUSH
71566: LD_INT 1
71568: PUSH
71569: EMPTY
71570: LIST
71571: LIST
71572: PUSH
71573: EMPTY
71574: LIST
71575: LIST
71576: LIST
71577: PPUSH
71578: CALL_OW 72
71582: ST_TO_ADDR
// if depot then
71583: LD_VAR 0 6
71587: IFFALSE 71744
// begin selected := 0 ;
71589: LD_ADDR_VAR 0 7
71593: PUSH
71594: LD_INT 0
71596: ST_TO_ADDR
// for j in depot do
71597: LD_ADDR_VAR 0 3
71601: PUSH
71602: LD_VAR 0 6
71606: PUSH
71607: FOR_IN
71608: IFFALSE 71639
// begin if UnitsInside ( j ) < 6 then
71610: LD_VAR 0 3
71614: PPUSH
71615: CALL_OW 313
71619: PUSH
71620: LD_INT 6
71622: LESS
71623: IFFALSE 71637
// begin selected := j ;
71625: LD_ADDR_VAR 0 7
71629: PUSH
71630: LD_VAR 0 3
71634: ST_TO_ADDR
// break ;
71635: GO 71639
// end ; end ;
71637: GO 71607
71639: POP
71640: POP
// if selected then
71641: LD_VAR 0 7
71645: IFFALSE 71744
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
71647: LD_ADDR_VAR 0 3
71651: PUSH
71652: LD_EXP 81
71656: PUSH
71657: LD_VAR 0 2
71661: ARRAY
71662: PPUSH
71663: LD_INT 25
71665: PUSH
71666: LD_INT 12
71668: PUSH
71669: EMPTY
71670: LIST
71671: LIST
71672: PPUSH
71673: CALL_OW 72
71677: PUSH
71678: FOR_IN
71679: IFFALSE 71742
// if not HasTask ( j ) then
71681: LD_VAR 0 3
71685: PPUSH
71686: CALL_OW 314
71690: NOT
71691: IFFALSE 71740
// begin if not IsInUnit ( j ) then
71693: LD_VAR 0 3
71697: PPUSH
71698: CALL_OW 310
71702: NOT
71703: IFFALSE 71719
// ComEnterUnit ( j , selected ) ;
71705: LD_VAR 0 3
71709: PPUSH
71710: LD_VAR 0 7
71714: PPUSH
71715: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
71719: LD_VAR 0 3
71723: PPUSH
71724: LD_INT 16
71726: PPUSH
71727: CALL_OW 183
// AddComExitBuilding ( j ) ;
71731: LD_VAR 0 3
71735: PPUSH
71736: CALL_OW 182
// end ;
71740: GO 71678
71742: POP
71743: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
71744: LD_VAR 0 5
71748: PPUSH
71749: LD_INT 11
71751: PPUSH
71752: CALL_OW 325
71756: IFFALSE 72015
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
71758: LD_ADDR_VAR 0 4
71762: PUSH
71763: LD_EXP 81
71767: PUSH
71768: LD_VAR 0 2
71772: ARRAY
71773: PPUSH
71774: LD_INT 25
71776: PUSH
71777: LD_INT 16
71779: PUSH
71780: EMPTY
71781: LIST
71782: LIST
71783: PPUSH
71784: CALL_OW 72
71788: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
71789: LD_VAR 0 4
71793: PUSH
71794: LD_INT 6
71796: GREATEREQUAL
71797: PUSH
71798: LD_VAR 0 5
71802: PPUSH
71803: LD_INT 2
71805: PPUSH
71806: CALL_OW 325
71810: NOT
71811: OR
71812: IFFALSE 72015
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
71814: LD_ADDR_VAR 0 8
71818: PUSH
71819: LD_EXP 52
71823: PUSH
71824: LD_VAR 0 2
71828: ARRAY
71829: PPUSH
71830: LD_INT 2
71832: PUSH
71833: LD_INT 30
71835: PUSH
71836: LD_INT 4
71838: PUSH
71839: EMPTY
71840: LIST
71841: LIST
71842: PUSH
71843: LD_INT 30
71845: PUSH
71846: LD_INT 5
71848: PUSH
71849: EMPTY
71850: LIST
71851: LIST
71852: PUSH
71853: EMPTY
71854: LIST
71855: LIST
71856: LIST
71857: PPUSH
71858: CALL_OW 72
71862: ST_TO_ADDR
// if barracks then
71863: LD_VAR 0 8
71867: IFFALSE 72015
// begin selected := 0 ;
71869: LD_ADDR_VAR 0 7
71873: PUSH
71874: LD_INT 0
71876: ST_TO_ADDR
// for j in barracks do
71877: LD_ADDR_VAR 0 3
71881: PUSH
71882: LD_VAR 0 8
71886: PUSH
71887: FOR_IN
71888: IFFALSE 71919
// begin if UnitsInside ( j ) < 6 then
71890: LD_VAR 0 3
71894: PPUSH
71895: CALL_OW 313
71899: PUSH
71900: LD_INT 6
71902: LESS
71903: IFFALSE 71917
// begin selected := j ;
71905: LD_ADDR_VAR 0 7
71909: PUSH
71910: LD_VAR 0 3
71914: ST_TO_ADDR
// break ;
71915: GO 71919
// end ; end ;
71917: GO 71887
71919: POP
71920: POP
// if selected then
71921: LD_VAR 0 7
71925: IFFALSE 72015
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
71927: LD_ADDR_VAR 0 3
71931: PUSH
71932: LD_EXP 81
71936: PUSH
71937: LD_VAR 0 2
71941: ARRAY
71942: PPUSH
71943: LD_INT 25
71945: PUSH
71946: LD_INT 12
71948: PUSH
71949: EMPTY
71950: LIST
71951: LIST
71952: PPUSH
71953: CALL_OW 72
71957: PUSH
71958: FOR_IN
71959: IFFALSE 72013
// if not IsInUnit ( j ) and not HasTask ( j ) then
71961: LD_VAR 0 3
71965: PPUSH
71966: CALL_OW 310
71970: NOT
71971: PUSH
71972: LD_VAR 0 3
71976: PPUSH
71977: CALL_OW 314
71981: NOT
71982: AND
71983: IFFALSE 72011
// begin ComEnterUnit ( j , selected ) ;
71985: LD_VAR 0 3
71989: PPUSH
71990: LD_VAR 0 7
71994: PPUSH
71995: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
71999: LD_VAR 0 3
72003: PPUSH
72004: LD_INT 15
72006: PPUSH
72007: CALL_OW 183
// end ;
72011: GO 71958
72013: POP
72014: POP
// end ; end ; end ; end ; end ;
72015: GO 71408
72017: POP
72018: POP
// end ;
72019: LD_VAR 0 1
72023: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
72024: LD_INT 0
72026: PPUSH
72027: PPUSH
72028: PPUSH
72029: PPUSH
// if not mc_bases then
72030: LD_EXP 52
72034: NOT
72035: IFFALSE 72039
// exit ;
72037: GO 72217
// for i = 1 to mc_bases do
72039: LD_ADDR_VAR 0 2
72043: PUSH
72044: DOUBLE
72045: LD_INT 1
72047: DEC
72048: ST_TO_ADDR
72049: LD_EXP 52
72053: PUSH
72054: FOR_TO
72055: IFFALSE 72215
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
72057: LD_ADDR_VAR 0 4
72061: PUSH
72062: LD_EXP 52
72066: PUSH
72067: LD_VAR 0 2
72071: ARRAY
72072: PPUSH
72073: LD_INT 25
72075: PUSH
72076: LD_INT 9
72078: PUSH
72079: EMPTY
72080: LIST
72081: LIST
72082: PPUSH
72083: CALL_OW 72
72087: ST_TO_ADDR
// if not tmp then
72088: LD_VAR 0 4
72092: NOT
72093: IFFALSE 72097
// continue ;
72095: GO 72054
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
72097: LD_EXP 78
72101: PUSH
72102: LD_VAR 0 2
72106: ARRAY
72107: PPUSH
72108: LD_INT 29
72110: PPUSH
72111: CALL_OW 325
72115: NOT
72116: PUSH
72117: LD_EXP 78
72121: PUSH
72122: LD_VAR 0 2
72126: ARRAY
72127: PPUSH
72128: LD_INT 28
72130: PPUSH
72131: CALL_OW 325
72135: NOT
72136: AND
72137: IFFALSE 72141
// continue ;
72139: GO 72054
// for j in tmp do
72141: LD_ADDR_VAR 0 3
72145: PUSH
72146: LD_VAR 0 4
72150: PUSH
72151: FOR_IN
72152: IFFALSE 72211
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
72154: LD_VAR 0 3
72158: PUSH
72159: LD_EXP 55
72163: PUSH
72164: LD_VAR 0 2
72168: ARRAY
72169: PUSH
72170: LD_INT 1
72172: ARRAY
72173: IN
72174: NOT
72175: PUSH
72176: LD_VAR 0 3
72180: PUSH
72181: LD_EXP 55
72185: PUSH
72186: LD_VAR 0 2
72190: ARRAY
72191: PUSH
72192: LD_INT 2
72194: ARRAY
72195: IN
72196: NOT
72197: AND
72198: IFFALSE 72209
// ComSpaceTimeShoot ( j ) ;
72200: LD_VAR 0 3
72204: PPUSH
72205: CALL 10773 0 1
72209: GO 72151
72211: POP
72212: POP
// end ;
72213: GO 72054
72215: POP
72216: POP
// end ;
72217: LD_VAR 0 1
72221: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
72222: LD_INT 0
72224: PPUSH
72225: PPUSH
72226: PPUSH
72227: PPUSH
72228: PPUSH
72229: PPUSH
72230: PPUSH
72231: PPUSH
72232: PPUSH
// if not mc_bases then
72233: LD_EXP 52
72237: NOT
72238: IFFALSE 72242
// exit ;
72240: GO 72864
// for i = 1 to mc_bases do
72242: LD_ADDR_VAR 0 2
72246: PUSH
72247: DOUBLE
72248: LD_INT 1
72250: DEC
72251: ST_TO_ADDR
72252: LD_EXP 52
72256: PUSH
72257: FOR_TO
72258: IFFALSE 72862
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
72260: LD_EXP 87
72264: PUSH
72265: LD_VAR 0 2
72269: ARRAY
72270: NOT
72271: PUSH
72272: LD_INT 38
72274: PPUSH
72275: LD_EXP 78
72279: PUSH
72280: LD_VAR 0 2
72284: ARRAY
72285: PPUSH
72286: CALL_OW 321
72290: PUSH
72291: LD_INT 2
72293: NONEQUAL
72294: OR
72295: IFFALSE 72299
// continue ;
72297: GO 72257
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
72299: LD_ADDR_VAR 0 8
72303: PUSH
72304: LD_EXP 52
72308: PUSH
72309: LD_VAR 0 2
72313: ARRAY
72314: PPUSH
72315: LD_INT 30
72317: PUSH
72318: LD_INT 34
72320: PUSH
72321: EMPTY
72322: LIST
72323: LIST
72324: PPUSH
72325: CALL_OW 72
72329: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
72330: LD_ADDR_VAR 0 9
72334: PUSH
72335: LD_EXP 52
72339: PUSH
72340: LD_VAR 0 2
72344: ARRAY
72345: PPUSH
72346: LD_INT 25
72348: PUSH
72349: LD_INT 4
72351: PUSH
72352: EMPTY
72353: LIST
72354: LIST
72355: PPUSH
72356: CALL_OW 72
72360: PPUSH
72361: LD_INT 0
72363: PPUSH
72364: CALL 49949 0 2
72368: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
72369: LD_VAR 0 9
72373: NOT
72374: PUSH
72375: LD_VAR 0 8
72379: NOT
72380: OR
72381: PUSH
72382: LD_EXP 52
72386: PUSH
72387: LD_VAR 0 2
72391: ARRAY
72392: PPUSH
72393: LD_INT 124
72395: PPUSH
72396: CALL 49949 0 2
72400: OR
72401: IFFALSE 72405
// continue ;
72403: GO 72257
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
72405: LD_EXP 88
72409: PUSH
72410: LD_VAR 0 2
72414: ARRAY
72415: PUSH
72416: LD_EXP 87
72420: PUSH
72421: LD_VAR 0 2
72425: ARRAY
72426: LESS
72427: PUSH
72428: LD_EXP 88
72432: PUSH
72433: LD_VAR 0 2
72437: ARRAY
72438: PUSH
72439: LD_VAR 0 8
72443: LESS
72444: AND
72445: IFFALSE 72860
// begin tmp := sci [ 1 ] ;
72447: LD_ADDR_VAR 0 7
72451: PUSH
72452: LD_VAR 0 9
72456: PUSH
72457: LD_INT 1
72459: ARRAY
72460: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
72461: LD_VAR 0 7
72465: PPUSH
72466: LD_INT 124
72468: PPUSH
72469: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
72473: LD_ADDR_VAR 0 3
72477: PUSH
72478: DOUBLE
72479: LD_EXP 87
72483: PUSH
72484: LD_VAR 0 2
72488: ARRAY
72489: INC
72490: ST_TO_ADDR
72491: LD_EXP 87
72495: PUSH
72496: LD_VAR 0 2
72500: ARRAY
72501: PUSH
72502: FOR_DOWNTO
72503: IFFALSE 72846
// begin if IsInUnit ( tmp ) then
72505: LD_VAR 0 7
72509: PPUSH
72510: CALL_OW 310
72514: IFFALSE 72525
// ComExitBuilding ( tmp ) ;
72516: LD_VAR 0 7
72520: PPUSH
72521: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
72525: LD_INT 35
72527: PPUSH
72528: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
72532: LD_VAR 0 7
72536: PPUSH
72537: CALL_OW 310
72541: NOT
72542: PUSH
72543: LD_VAR 0 7
72547: PPUSH
72548: CALL_OW 314
72552: NOT
72553: AND
72554: IFFALSE 72525
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
72556: LD_ADDR_VAR 0 6
72560: PUSH
72561: LD_VAR 0 7
72565: PPUSH
72566: CALL_OW 250
72570: PUSH
72571: LD_VAR 0 7
72575: PPUSH
72576: CALL_OW 251
72580: PUSH
72581: EMPTY
72582: LIST
72583: LIST
72584: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
72585: LD_INT 35
72587: PPUSH
72588: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
72592: LD_ADDR_VAR 0 4
72596: PUSH
72597: LD_EXP 87
72601: PUSH
72602: LD_VAR 0 2
72606: ARRAY
72607: PUSH
72608: LD_VAR 0 3
72612: ARRAY
72613: PUSH
72614: LD_INT 1
72616: ARRAY
72617: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
72618: LD_ADDR_VAR 0 5
72622: PUSH
72623: LD_EXP 87
72627: PUSH
72628: LD_VAR 0 2
72632: ARRAY
72633: PUSH
72634: LD_VAR 0 3
72638: ARRAY
72639: PUSH
72640: LD_INT 2
72642: ARRAY
72643: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
72644: LD_VAR 0 7
72648: PPUSH
72649: LD_INT 10
72651: PPUSH
72652: CALL 19306 0 2
72656: PUSH
72657: LD_INT 4
72659: ARRAY
72660: IFFALSE 72698
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
72662: LD_VAR 0 7
72666: PPUSH
72667: LD_VAR 0 6
72671: PUSH
72672: LD_INT 1
72674: ARRAY
72675: PPUSH
72676: LD_VAR 0 6
72680: PUSH
72681: LD_INT 2
72683: ARRAY
72684: PPUSH
72685: CALL_OW 111
// wait ( 0 0$10 ) ;
72689: LD_INT 350
72691: PPUSH
72692: CALL_OW 67
// end else
72696: GO 72724
// begin ComMoveXY ( tmp , x , y ) ;
72698: LD_VAR 0 7
72702: PPUSH
72703: LD_VAR 0 4
72707: PPUSH
72708: LD_VAR 0 5
72712: PPUSH
72713: CALL_OW 111
// wait ( 0 0$3 ) ;
72717: LD_INT 105
72719: PPUSH
72720: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
72724: LD_VAR 0 7
72728: PPUSH
72729: LD_VAR 0 4
72733: PPUSH
72734: LD_VAR 0 5
72738: PPUSH
72739: CALL_OW 307
72743: IFFALSE 72585
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
72745: LD_VAR 0 7
72749: PPUSH
72750: LD_VAR 0 4
72754: PPUSH
72755: LD_VAR 0 5
72759: PPUSH
72760: LD_VAR 0 8
72764: PUSH
72765: LD_VAR 0 3
72769: ARRAY
72770: PPUSH
72771: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
72775: LD_INT 35
72777: PPUSH
72778: CALL_OW 67
// until not HasTask ( tmp ) ;
72782: LD_VAR 0 7
72786: PPUSH
72787: CALL_OW 314
72791: NOT
72792: IFFALSE 72775
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
72794: LD_ADDR_EXP 88
72798: PUSH
72799: LD_EXP 88
72803: PPUSH
72804: LD_VAR 0 2
72808: PUSH
72809: LD_EXP 88
72813: PUSH
72814: LD_VAR 0 2
72818: ARRAY
72819: PUSH
72820: LD_INT 1
72822: PLUS
72823: PUSH
72824: EMPTY
72825: LIST
72826: LIST
72827: PPUSH
72828: LD_VAR 0 8
72832: PUSH
72833: LD_VAR 0 3
72837: ARRAY
72838: PPUSH
72839: CALL 16713 0 3
72843: ST_TO_ADDR
// end ;
72844: GO 72502
72846: POP
72847: POP
// MC_Reset ( i , 124 ) ;
72848: LD_VAR 0 2
72852: PPUSH
72853: LD_INT 124
72855: PPUSH
72856: CALL 56651 0 2
// end ; end ;
72860: GO 72257
72862: POP
72863: POP
// end ;
72864: LD_VAR 0 1
72868: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
72869: LD_INT 0
72871: PPUSH
72872: PPUSH
72873: PPUSH
// if not mc_bases then
72874: LD_EXP 52
72878: NOT
72879: IFFALSE 72883
// exit ;
72881: GO 73489
// for i = 1 to mc_bases do
72883: LD_ADDR_VAR 0 2
72887: PUSH
72888: DOUBLE
72889: LD_INT 1
72891: DEC
72892: ST_TO_ADDR
72893: LD_EXP 52
72897: PUSH
72898: FOR_TO
72899: IFFALSE 73487
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
72901: LD_ADDR_VAR 0 3
72905: PUSH
72906: LD_EXP 52
72910: PUSH
72911: LD_VAR 0 2
72915: ARRAY
72916: PPUSH
72917: LD_INT 25
72919: PUSH
72920: LD_INT 4
72922: PUSH
72923: EMPTY
72924: LIST
72925: LIST
72926: PPUSH
72927: CALL_OW 72
72931: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
72932: LD_VAR 0 3
72936: NOT
72937: PUSH
72938: LD_EXP 89
72942: PUSH
72943: LD_VAR 0 2
72947: ARRAY
72948: NOT
72949: OR
72950: PUSH
72951: LD_EXP 52
72955: PUSH
72956: LD_VAR 0 2
72960: ARRAY
72961: PPUSH
72962: LD_INT 2
72964: PUSH
72965: LD_INT 30
72967: PUSH
72968: LD_INT 0
72970: PUSH
72971: EMPTY
72972: LIST
72973: LIST
72974: PUSH
72975: LD_INT 30
72977: PUSH
72978: LD_INT 1
72980: PUSH
72981: EMPTY
72982: LIST
72983: LIST
72984: PUSH
72985: EMPTY
72986: LIST
72987: LIST
72988: LIST
72989: PPUSH
72990: CALL_OW 72
72994: NOT
72995: OR
72996: IFFALSE 73046
// begin if mc_deposits_finder [ i ] then
72998: LD_EXP 90
73002: PUSH
73003: LD_VAR 0 2
73007: ARRAY
73008: IFFALSE 73044
// begin MC_Reset ( i , 125 ) ;
73010: LD_VAR 0 2
73014: PPUSH
73015: LD_INT 125
73017: PPUSH
73018: CALL 56651 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
73022: LD_ADDR_EXP 90
73026: PUSH
73027: LD_EXP 90
73031: PPUSH
73032: LD_VAR 0 2
73036: PPUSH
73037: EMPTY
73038: PPUSH
73039: CALL_OW 1
73043: ST_TO_ADDR
// end ; continue ;
73044: GO 72898
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
73046: LD_EXP 89
73050: PUSH
73051: LD_VAR 0 2
73055: ARRAY
73056: PUSH
73057: LD_INT 1
73059: ARRAY
73060: PUSH
73061: LD_INT 3
73063: ARRAY
73064: PUSH
73065: LD_INT 1
73067: EQUAL
73068: PUSH
73069: LD_INT 20
73071: PPUSH
73072: LD_EXP 78
73076: PUSH
73077: LD_VAR 0 2
73081: ARRAY
73082: PPUSH
73083: CALL_OW 321
73087: PUSH
73088: LD_INT 2
73090: NONEQUAL
73091: AND
73092: IFFALSE 73142
// begin if mc_deposits_finder [ i ] then
73094: LD_EXP 90
73098: PUSH
73099: LD_VAR 0 2
73103: ARRAY
73104: IFFALSE 73140
// begin MC_Reset ( i , 125 ) ;
73106: LD_VAR 0 2
73110: PPUSH
73111: LD_INT 125
73113: PPUSH
73114: CALL 56651 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
73118: LD_ADDR_EXP 90
73122: PUSH
73123: LD_EXP 90
73127: PPUSH
73128: LD_VAR 0 2
73132: PPUSH
73133: EMPTY
73134: PPUSH
73135: CALL_OW 1
73139: ST_TO_ADDR
// end ; continue ;
73140: GO 72898
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
73142: LD_EXP 89
73146: PUSH
73147: LD_VAR 0 2
73151: ARRAY
73152: PUSH
73153: LD_INT 1
73155: ARRAY
73156: PUSH
73157: LD_INT 1
73159: ARRAY
73160: PPUSH
73161: LD_EXP 89
73165: PUSH
73166: LD_VAR 0 2
73170: ARRAY
73171: PUSH
73172: LD_INT 1
73174: ARRAY
73175: PUSH
73176: LD_INT 2
73178: ARRAY
73179: PPUSH
73180: LD_EXP 78
73184: PUSH
73185: LD_VAR 0 2
73189: ARRAY
73190: PPUSH
73191: CALL_OW 440
73195: IFFALSE 73238
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
73197: LD_ADDR_EXP 89
73201: PUSH
73202: LD_EXP 89
73206: PPUSH
73207: LD_VAR 0 2
73211: PPUSH
73212: LD_EXP 89
73216: PUSH
73217: LD_VAR 0 2
73221: ARRAY
73222: PPUSH
73223: LD_INT 1
73225: PPUSH
73226: CALL_OW 3
73230: PPUSH
73231: CALL_OW 1
73235: ST_TO_ADDR
73236: GO 73485
// begin if not mc_deposits_finder [ i ] then
73238: LD_EXP 90
73242: PUSH
73243: LD_VAR 0 2
73247: ARRAY
73248: NOT
73249: IFFALSE 73301
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
73251: LD_ADDR_EXP 90
73255: PUSH
73256: LD_EXP 90
73260: PPUSH
73261: LD_VAR 0 2
73265: PPUSH
73266: LD_VAR 0 3
73270: PUSH
73271: LD_INT 1
73273: ARRAY
73274: PUSH
73275: EMPTY
73276: LIST
73277: PPUSH
73278: CALL_OW 1
73282: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
73283: LD_VAR 0 3
73287: PUSH
73288: LD_INT 1
73290: ARRAY
73291: PPUSH
73292: LD_INT 125
73294: PPUSH
73295: CALL_OW 109
// end else
73299: GO 73485
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
73301: LD_EXP 90
73305: PUSH
73306: LD_VAR 0 2
73310: ARRAY
73311: PUSH
73312: LD_INT 1
73314: ARRAY
73315: PPUSH
73316: CALL_OW 310
73320: IFFALSE 73343
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
73322: LD_EXP 90
73326: PUSH
73327: LD_VAR 0 2
73331: ARRAY
73332: PUSH
73333: LD_INT 1
73335: ARRAY
73336: PPUSH
73337: CALL_OW 122
73341: GO 73485
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
73343: LD_EXP 90
73347: PUSH
73348: LD_VAR 0 2
73352: ARRAY
73353: PUSH
73354: LD_INT 1
73356: ARRAY
73357: PPUSH
73358: CALL_OW 314
73362: NOT
73363: PUSH
73364: LD_EXP 90
73368: PUSH
73369: LD_VAR 0 2
73373: ARRAY
73374: PUSH
73375: LD_INT 1
73377: ARRAY
73378: PPUSH
73379: LD_EXP 89
73383: PUSH
73384: LD_VAR 0 2
73388: ARRAY
73389: PUSH
73390: LD_INT 1
73392: ARRAY
73393: PUSH
73394: LD_INT 1
73396: ARRAY
73397: PPUSH
73398: LD_EXP 89
73402: PUSH
73403: LD_VAR 0 2
73407: ARRAY
73408: PUSH
73409: LD_INT 1
73411: ARRAY
73412: PUSH
73413: LD_INT 2
73415: ARRAY
73416: PPUSH
73417: CALL_OW 297
73421: PUSH
73422: LD_INT 6
73424: GREATER
73425: AND
73426: IFFALSE 73485
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
73428: LD_EXP 90
73432: PUSH
73433: LD_VAR 0 2
73437: ARRAY
73438: PUSH
73439: LD_INT 1
73441: ARRAY
73442: PPUSH
73443: LD_EXP 89
73447: PUSH
73448: LD_VAR 0 2
73452: ARRAY
73453: PUSH
73454: LD_INT 1
73456: ARRAY
73457: PUSH
73458: LD_INT 1
73460: ARRAY
73461: PPUSH
73462: LD_EXP 89
73466: PUSH
73467: LD_VAR 0 2
73471: ARRAY
73472: PUSH
73473: LD_INT 1
73475: ARRAY
73476: PUSH
73477: LD_INT 2
73479: ARRAY
73480: PPUSH
73481: CALL_OW 111
// end ; end ; end ;
73485: GO 72898
73487: POP
73488: POP
// end ;
73489: LD_VAR 0 1
73493: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
73494: LD_INT 0
73496: PPUSH
73497: PPUSH
73498: PPUSH
73499: PPUSH
73500: PPUSH
73501: PPUSH
73502: PPUSH
73503: PPUSH
73504: PPUSH
73505: PPUSH
73506: PPUSH
// if not mc_bases then
73507: LD_EXP 52
73511: NOT
73512: IFFALSE 73516
// exit ;
73514: GO 74240
// for i = 1 to mc_bases do
73516: LD_ADDR_VAR 0 2
73520: PUSH
73521: DOUBLE
73522: LD_INT 1
73524: DEC
73525: ST_TO_ADDR
73526: LD_EXP 52
73530: PUSH
73531: FOR_TO
73532: IFFALSE 74238
// begin if not mc_bases [ i ] then
73534: LD_EXP 52
73538: PUSH
73539: LD_VAR 0 2
73543: ARRAY
73544: NOT
73545: IFFALSE 73549
// continue ;
73547: GO 73531
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
73549: LD_ADDR_VAR 0 7
73553: PUSH
73554: LD_EXP 52
73558: PUSH
73559: LD_VAR 0 2
73563: ARRAY
73564: PUSH
73565: LD_INT 1
73567: ARRAY
73568: PPUSH
73569: CALL_OW 248
73573: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
73574: LD_VAR 0 7
73578: PUSH
73579: LD_INT 3
73581: EQUAL
73582: PUSH
73583: LD_EXP 71
73587: PUSH
73588: LD_VAR 0 2
73592: ARRAY
73593: PUSH
73594: LD_EXP 74
73598: PUSH
73599: LD_VAR 0 2
73603: ARRAY
73604: UNION
73605: PPUSH
73606: LD_INT 33
73608: PUSH
73609: LD_INT 2
73611: PUSH
73612: EMPTY
73613: LIST
73614: LIST
73615: PPUSH
73616: CALL_OW 72
73620: NOT
73621: OR
73622: IFFALSE 73626
// continue ;
73624: GO 73531
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
73626: LD_ADDR_VAR 0 9
73630: PUSH
73631: LD_EXP 52
73635: PUSH
73636: LD_VAR 0 2
73640: ARRAY
73641: PPUSH
73642: LD_INT 30
73644: PUSH
73645: LD_INT 36
73647: PUSH
73648: EMPTY
73649: LIST
73650: LIST
73651: PPUSH
73652: CALL_OW 72
73656: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
73657: LD_ADDR_VAR 0 10
73661: PUSH
73662: LD_EXP 71
73666: PUSH
73667: LD_VAR 0 2
73671: ARRAY
73672: PPUSH
73673: LD_INT 34
73675: PUSH
73676: LD_INT 31
73678: PUSH
73679: EMPTY
73680: LIST
73681: LIST
73682: PPUSH
73683: CALL_OW 72
73687: ST_TO_ADDR
// if not cts and not mcts then
73688: LD_VAR 0 9
73692: NOT
73693: PUSH
73694: LD_VAR 0 10
73698: NOT
73699: AND
73700: IFFALSE 73704
// continue ;
73702: GO 73531
// x := cts ;
73704: LD_ADDR_VAR 0 11
73708: PUSH
73709: LD_VAR 0 9
73713: ST_TO_ADDR
// if not x then
73714: LD_VAR 0 11
73718: NOT
73719: IFFALSE 73731
// x := mcts ;
73721: LD_ADDR_VAR 0 11
73725: PUSH
73726: LD_VAR 0 10
73730: ST_TO_ADDR
// if mc_remote_driver [ i ] then
73731: LD_EXP 92
73735: PUSH
73736: LD_VAR 0 2
73740: ARRAY
73741: IFFALSE 74010
// for j in mc_remote_driver [ i ] do
73743: LD_ADDR_VAR 0 3
73747: PUSH
73748: LD_EXP 92
73752: PUSH
73753: LD_VAR 0 2
73757: ARRAY
73758: PUSH
73759: FOR_IN
73760: IFFALSE 74008
// begin if GetClass ( j ) <> 3 then
73762: LD_VAR 0 3
73766: PPUSH
73767: CALL_OW 257
73771: PUSH
73772: LD_INT 3
73774: NONEQUAL
73775: IFFALSE 73828
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
73777: LD_ADDR_EXP 92
73781: PUSH
73782: LD_EXP 92
73786: PPUSH
73787: LD_VAR 0 2
73791: PPUSH
73792: LD_EXP 92
73796: PUSH
73797: LD_VAR 0 2
73801: ARRAY
73802: PUSH
73803: LD_VAR 0 3
73807: DIFF
73808: PPUSH
73809: CALL_OW 1
73813: ST_TO_ADDR
// SetTag ( j , 0 ) ;
73814: LD_VAR 0 3
73818: PPUSH
73819: LD_INT 0
73821: PPUSH
73822: CALL_OW 109
// continue ;
73826: GO 73759
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
73828: LD_VAR 0 3
73832: PPUSH
73833: CALL_OW 310
73837: NOT
73838: PUSH
73839: LD_VAR 0 3
73843: PPUSH
73844: CALL_OW 310
73848: PPUSH
73849: CALL_OW 266
73853: PUSH
73854: LD_INT 36
73856: NONEQUAL
73857: PUSH
73858: LD_VAR 0 3
73862: PPUSH
73863: CALL 50037 0 1
73867: NOT
73868: AND
73869: OR
73870: IFFALSE 74006
// begin if IsInUnit ( j ) then
73872: LD_VAR 0 3
73876: PPUSH
73877: CALL_OW 310
73881: IFFALSE 73892
// ComExitBuilding ( j ) ;
73883: LD_VAR 0 3
73887: PPUSH
73888: CALL_OW 122
// ct := 0 ;
73892: LD_ADDR_VAR 0 8
73896: PUSH
73897: LD_INT 0
73899: ST_TO_ADDR
// for k in x do
73900: LD_ADDR_VAR 0 4
73904: PUSH
73905: LD_VAR 0 11
73909: PUSH
73910: FOR_IN
73911: IFFALSE 73984
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
73913: LD_VAR 0 4
73917: PPUSH
73918: CALL_OW 264
73922: PUSH
73923: LD_INT 31
73925: EQUAL
73926: PUSH
73927: LD_VAR 0 4
73931: PPUSH
73932: CALL_OW 311
73936: NOT
73937: AND
73938: PUSH
73939: LD_VAR 0 4
73943: PPUSH
73944: CALL_OW 266
73948: PUSH
73949: LD_INT 36
73951: EQUAL
73952: PUSH
73953: LD_VAR 0 4
73957: PPUSH
73958: CALL_OW 313
73962: PUSH
73963: LD_INT 3
73965: LESS
73966: AND
73967: OR
73968: IFFALSE 73982
// begin ct := k ;
73970: LD_ADDR_VAR 0 8
73974: PUSH
73975: LD_VAR 0 4
73979: ST_TO_ADDR
// break ;
73980: GO 73984
// end ;
73982: GO 73910
73984: POP
73985: POP
// if ct then
73986: LD_VAR 0 8
73990: IFFALSE 74006
// ComEnterUnit ( j , ct ) ;
73992: LD_VAR 0 3
73996: PPUSH
73997: LD_VAR 0 8
74001: PPUSH
74002: CALL_OW 120
// end ; end ;
74006: GO 73759
74008: POP
74009: POP
// places := 0 ;
74010: LD_ADDR_VAR 0 5
74014: PUSH
74015: LD_INT 0
74017: ST_TO_ADDR
// for j = 1 to x do
74018: LD_ADDR_VAR 0 3
74022: PUSH
74023: DOUBLE
74024: LD_INT 1
74026: DEC
74027: ST_TO_ADDR
74028: LD_VAR 0 11
74032: PUSH
74033: FOR_TO
74034: IFFALSE 74089
// if GetWeapon ( x [ j ] ) = ar_control_tower then
74036: LD_VAR 0 11
74040: PUSH
74041: LD_VAR 0 3
74045: ARRAY
74046: PPUSH
74047: CALL_OW 264
74051: PUSH
74052: LD_INT 31
74054: EQUAL
74055: IFFALSE 74073
// places := places + 1 else
74057: LD_ADDR_VAR 0 5
74061: PUSH
74062: LD_VAR 0 5
74066: PUSH
74067: LD_INT 1
74069: PLUS
74070: ST_TO_ADDR
74071: GO 74087
// places := places + 3 ;
74073: LD_ADDR_VAR 0 5
74077: PUSH
74078: LD_VAR 0 5
74082: PUSH
74083: LD_INT 3
74085: PLUS
74086: ST_TO_ADDR
74087: GO 74033
74089: POP
74090: POP
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
74091: LD_ADDR_VAR 0 6
74095: PUSH
74096: LD_EXP 52
74100: PUSH
74101: LD_VAR 0 2
74105: ARRAY
74106: PPUSH
74107: LD_INT 25
74109: PUSH
74110: LD_INT 3
74112: PUSH
74113: EMPTY
74114: LIST
74115: LIST
74116: PPUSH
74117: CALL_OW 72
74121: PUSH
74122: LD_EXP 92
74126: PUSH
74127: LD_VAR 0 2
74131: ARRAY
74132: DIFF
74133: PPUSH
74134: LD_INT 3
74136: PPUSH
74137: CALL 50937 0 2
74141: ST_TO_ADDR
// if not tmp then
74142: LD_VAR 0 6
74146: NOT
74147: IFFALSE 74151
// continue ;
74149: GO 73531
// places := places - mc_remote_driver [ i ] ;
74151: LD_ADDR_VAR 0 5
74155: PUSH
74156: LD_VAR 0 5
74160: PUSH
74161: LD_EXP 92
74165: PUSH
74166: LD_VAR 0 2
74170: ARRAY
74171: MINUS
74172: ST_TO_ADDR
// if places then
74173: LD_VAR 0 5
74177: IFFALSE 74236
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
74179: LD_ADDR_EXP 92
74183: PUSH
74184: LD_EXP 92
74188: PPUSH
74189: LD_VAR 0 2
74193: PPUSH
74194: LD_EXP 92
74198: PUSH
74199: LD_VAR 0 2
74203: ARRAY
74204: PUSH
74205: LD_VAR 0 6
74209: PUSH
74210: LD_INT 1
74212: ARRAY
74213: UNION
74214: PPUSH
74215: CALL_OW 1
74219: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
74220: LD_VAR 0 6
74224: PUSH
74225: LD_INT 1
74227: ARRAY
74228: PPUSH
74229: LD_INT 126
74231: PPUSH
74232: CALL_OW 109
// end ; end ;
74236: GO 73531
74238: POP
74239: POP
// end ;
74240: LD_VAR 0 1
74244: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
74245: LD_INT 0
74247: PPUSH
74248: PPUSH
74249: PPUSH
74250: PPUSH
74251: PPUSH
74252: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
74253: LD_VAR 0 1
74257: NOT
74258: PUSH
74259: LD_VAR 0 2
74263: NOT
74264: OR
74265: PUSH
74266: LD_VAR 0 3
74270: NOT
74271: OR
74272: PUSH
74273: LD_VAR 0 4
74277: PUSH
74278: LD_INT 1
74280: PUSH
74281: LD_INT 2
74283: PUSH
74284: LD_INT 3
74286: PUSH
74287: LD_INT 4
74289: PUSH
74290: LD_INT 5
74292: PUSH
74293: LD_INT 8
74295: PUSH
74296: LD_INT 9
74298: PUSH
74299: LD_INT 15
74301: PUSH
74302: LD_INT 16
74304: PUSH
74305: EMPTY
74306: LIST
74307: LIST
74308: LIST
74309: LIST
74310: LIST
74311: LIST
74312: LIST
74313: LIST
74314: LIST
74315: IN
74316: NOT
74317: OR
74318: IFFALSE 74322
// exit ;
74320: GO 75222
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
74322: LD_ADDR_VAR 0 2
74326: PUSH
74327: LD_VAR 0 2
74331: PPUSH
74332: LD_INT 21
74334: PUSH
74335: LD_INT 3
74337: PUSH
74338: EMPTY
74339: LIST
74340: LIST
74341: PUSH
74342: LD_INT 24
74344: PUSH
74345: LD_INT 250
74347: PUSH
74348: EMPTY
74349: LIST
74350: LIST
74351: PUSH
74352: EMPTY
74353: LIST
74354: LIST
74355: PPUSH
74356: CALL_OW 72
74360: ST_TO_ADDR
// case class of 1 , 15 :
74361: LD_VAR 0 4
74365: PUSH
74366: LD_INT 1
74368: DOUBLE
74369: EQUAL
74370: IFTRUE 74380
74372: LD_INT 15
74374: DOUBLE
74375: EQUAL
74376: IFTRUE 74380
74378: GO 74465
74380: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
74381: LD_ADDR_VAR 0 8
74385: PUSH
74386: LD_VAR 0 2
74390: PPUSH
74391: LD_INT 2
74393: PUSH
74394: LD_INT 30
74396: PUSH
74397: LD_INT 32
74399: PUSH
74400: EMPTY
74401: LIST
74402: LIST
74403: PUSH
74404: LD_INT 30
74406: PUSH
74407: LD_INT 31
74409: PUSH
74410: EMPTY
74411: LIST
74412: LIST
74413: PUSH
74414: EMPTY
74415: LIST
74416: LIST
74417: LIST
74418: PPUSH
74419: CALL_OW 72
74423: PUSH
74424: LD_VAR 0 2
74428: PPUSH
74429: LD_INT 2
74431: PUSH
74432: LD_INT 30
74434: PUSH
74435: LD_INT 4
74437: PUSH
74438: EMPTY
74439: LIST
74440: LIST
74441: PUSH
74442: LD_INT 30
74444: PUSH
74445: LD_INT 5
74447: PUSH
74448: EMPTY
74449: LIST
74450: LIST
74451: PUSH
74452: EMPTY
74453: LIST
74454: LIST
74455: LIST
74456: PPUSH
74457: CALL_OW 72
74461: ADD
74462: ST_TO_ADDR
74463: GO 74711
74465: LD_INT 2
74467: DOUBLE
74468: EQUAL
74469: IFTRUE 74479
74471: LD_INT 16
74473: DOUBLE
74474: EQUAL
74475: IFTRUE 74479
74477: GO 74525
74479: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
74480: LD_ADDR_VAR 0 8
74484: PUSH
74485: LD_VAR 0 2
74489: PPUSH
74490: LD_INT 2
74492: PUSH
74493: LD_INT 30
74495: PUSH
74496: LD_INT 0
74498: PUSH
74499: EMPTY
74500: LIST
74501: LIST
74502: PUSH
74503: LD_INT 30
74505: PUSH
74506: LD_INT 1
74508: PUSH
74509: EMPTY
74510: LIST
74511: LIST
74512: PUSH
74513: EMPTY
74514: LIST
74515: LIST
74516: LIST
74517: PPUSH
74518: CALL_OW 72
74522: ST_TO_ADDR
74523: GO 74711
74525: LD_INT 3
74527: DOUBLE
74528: EQUAL
74529: IFTRUE 74533
74531: GO 74579
74533: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
74534: LD_ADDR_VAR 0 8
74538: PUSH
74539: LD_VAR 0 2
74543: PPUSH
74544: LD_INT 2
74546: PUSH
74547: LD_INT 30
74549: PUSH
74550: LD_INT 2
74552: PUSH
74553: EMPTY
74554: LIST
74555: LIST
74556: PUSH
74557: LD_INT 30
74559: PUSH
74560: LD_INT 3
74562: PUSH
74563: EMPTY
74564: LIST
74565: LIST
74566: PUSH
74567: EMPTY
74568: LIST
74569: LIST
74570: LIST
74571: PPUSH
74572: CALL_OW 72
74576: ST_TO_ADDR
74577: GO 74711
74579: LD_INT 4
74581: DOUBLE
74582: EQUAL
74583: IFTRUE 74587
74585: GO 74644
74587: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
74588: LD_ADDR_VAR 0 8
74592: PUSH
74593: LD_VAR 0 2
74597: PPUSH
74598: LD_INT 2
74600: PUSH
74601: LD_INT 30
74603: PUSH
74604: LD_INT 6
74606: PUSH
74607: EMPTY
74608: LIST
74609: LIST
74610: PUSH
74611: LD_INT 30
74613: PUSH
74614: LD_INT 7
74616: PUSH
74617: EMPTY
74618: LIST
74619: LIST
74620: PUSH
74621: LD_INT 30
74623: PUSH
74624: LD_INT 8
74626: PUSH
74627: EMPTY
74628: LIST
74629: LIST
74630: PUSH
74631: EMPTY
74632: LIST
74633: LIST
74634: LIST
74635: LIST
74636: PPUSH
74637: CALL_OW 72
74641: ST_TO_ADDR
74642: GO 74711
74644: LD_INT 5
74646: DOUBLE
74647: EQUAL
74648: IFTRUE 74664
74650: LD_INT 8
74652: DOUBLE
74653: EQUAL
74654: IFTRUE 74664
74656: LD_INT 9
74658: DOUBLE
74659: EQUAL
74660: IFTRUE 74664
74662: GO 74710
74664: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
74665: LD_ADDR_VAR 0 8
74669: PUSH
74670: LD_VAR 0 2
74674: PPUSH
74675: LD_INT 2
74677: PUSH
74678: LD_INT 30
74680: PUSH
74681: LD_INT 4
74683: PUSH
74684: EMPTY
74685: LIST
74686: LIST
74687: PUSH
74688: LD_INT 30
74690: PUSH
74691: LD_INT 5
74693: PUSH
74694: EMPTY
74695: LIST
74696: LIST
74697: PUSH
74698: EMPTY
74699: LIST
74700: LIST
74701: LIST
74702: PPUSH
74703: CALL_OW 72
74707: ST_TO_ADDR
74708: GO 74711
74710: POP
// if not tmp then
74711: LD_VAR 0 8
74715: NOT
74716: IFFALSE 74720
// exit ;
74718: GO 75222
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
74720: LD_VAR 0 4
74724: PUSH
74725: LD_INT 1
74727: PUSH
74728: LD_INT 15
74730: PUSH
74731: EMPTY
74732: LIST
74733: LIST
74734: IN
74735: PUSH
74736: LD_EXP 61
74740: PUSH
74741: LD_VAR 0 1
74745: ARRAY
74746: AND
74747: IFFALSE 74903
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
74749: LD_ADDR_VAR 0 9
74753: PUSH
74754: LD_EXP 61
74758: PUSH
74759: LD_VAR 0 1
74763: ARRAY
74764: PUSH
74765: LD_INT 1
74767: ARRAY
74768: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
74769: LD_VAR 0 9
74773: PUSH
74774: LD_EXP 62
74778: PUSH
74779: LD_VAR 0 1
74783: ARRAY
74784: IN
74785: NOT
74786: IFFALSE 74901
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
74788: LD_ADDR_EXP 62
74792: PUSH
74793: LD_EXP 62
74797: PPUSH
74798: LD_VAR 0 1
74802: PUSH
74803: LD_EXP 62
74807: PUSH
74808: LD_VAR 0 1
74812: ARRAY
74813: PUSH
74814: LD_INT 1
74816: PLUS
74817: PUSH
74818: EMPTY
74819: LIST
74820: LIST
74821: PPUSH
74822: LD_VAR 0 9
74826: PPUSH
74827: CALL 16713 0 3
74831: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
74832: LD_ADDR_EXP 61
74836: PUSH
74837: LD_EXP 61
74841: PPUSH
74842: LD_VAR 0 1
74846: PPUSH
74847: LD_EXP 61
74851: PUSH
74852: LD_VAR 0 1
74856: ARRAY
74857: PUSH
74858: LD_VAR 0 9
74862: DIFF
74863: PPUSH
74864: CALL_OW 1
74868: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
74869: LD_VAR 0 3
74873: PPUSH
74874: LD_EXP 62
74878: PUSH
74879: LD_VAR 0 1
74883: ARRAY
74884: PUSH
74885: LD_EXP 62
74889: PUSH
74890: LD_VAR 0 1
74894: ARRAY
74895: ARRAY
74896: PPUSH
74897: CALL_OW 120
// end ; exit ;
74901: GO 75222
// end ; if tmp > 1 then
74903: LD_VAR 0 8
74907: PUSH
74908: LD_INT 1
74910: GREATER
74911: IFFALSE 75015
// for i = 2 to tmp do
74913: LD_ADDR_VAR 0 6
74917: PUSH
74918: DOUBLE
74919: LD_INT 2
74921: DEC
74922: ST_TO_ADDR
74923: LD_VAR 0 8
74927: PUSH
74928: FOR_TO
74929: IFFALSE 75013
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
74931: LD_VAR 0 8
74935: PUSH
74936: LD_VAR 0 6
74940: ARRAY
74941: PPUSH
74942: CALL_OW 461
74946: PUSH
74947: LD_INT 6
74949: EQUAL
74950: IFFALSE 75011
// begin x := tmp [ i ] ;
74952: LD_ADDR_VAR 0 9
74956: PUSH
74957: LD_VAR 0 8
74961: PUSH
74962: LD_VAR 0 6
74966: ARRAY
74967: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
74968: LD_ADDR_VAR 0 8
74972: PUSH
74973: LD_VAR 0 8
74977: PPUSH
74978: LD_VAR 0 6
74982: PPUSH
74983: CALL_OW 3
74987: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
74988: LD_ADDR_VAR 0 8
74992: PUSH
74993: LD_VAR 0 8
74997: PPUSH
74998: LD_INT 1
75000: PPUSH
75001: LD_VAR 0 9
75005: PPUSH
75006: CALL_OW 2
75010: ST_TO_ADDR
// end ;
75011: GO 74928
75013: POP
75014: POP
// for i in tmp do
75015: LD_ADDR_VAR 0 6
75019: PUSH
75020: LD_VAR 0 8
75024: PUSH
75025: FOR_IN
75026: IFFALSE 75095
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
75028: LD_VAR 0 6
75032: PPUSH
75033: CALL_OW 313
75037: PUSH
75038: LD_INT 6
75040: LESS
75041: PUSH
75042: LD_VAR 0 6
75046: PPUSH
75047: CALL_OW 266
75051: PUSH
75052: LD_INT 31
75054: PUSH
75055: LD_INT 32
75057: PUSH
75058: EMPTY
75059: LIST
75060: LIST
75061: IN
75062: NOT
75063: AND
75064: PUSH
75065: LD_VAR 0 6
75069: PPUSH
75070: CALL_OW 313
75074: PUSH
75075: LD_INT 0
75077: EQUAL
75078: OR
75079: IFFALSE 75093
// begin j := i ;
75081: LD_ADDR_VAR 0 7
75085: PUSH
75086: LD_VAR 0 6
75090: ST_TO_ADDR
// break ;
75091: GO 75095
// end ; end ;
75093: GO 75025
75095: POP
75096: POP
// if j then
75097: LD_VAR 0 7
75101: IFFALSE 75119
// ComEnterUnit ( unit , j ) else
75103: LD_VAR 0 3
75107: PPUSH
75108: LD_VAR 0 7
75112: PPUSH
75113: CALL_OW 120
75117: GO 75222
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
75119: LD_ADDR_VAR 0 10
75123: PUSH
75124: LD_VAR 0 2
75128: PPUSH
75129: LD_INT 2
75131: PUSH
75132: LD_INT 30
75134: PUSH
75135: LD_INT 0
75137: PUSH
75138: EMPTY
75139: LIST
75140: LIST
75141: PUSH
75142: LD_INT 30
75144: PUSH
75145: LD_INT 1
75147: PUSH
75148: EMPTY
75149: LIST
75150: LIST
75151: PUSH
75152: EMPTY
75153: LIST
75154: LIST
75155: LIST
75156: PPUSH
75157: CALL_OW 72
75161: ST_TO_ADDR
// if depot then
75162: LD_VAR 0 10
75166: IFFALSE 75222
// begin depot := NearestUnitToUnit ( depot , unit ) ;
75168: LD_ADDR_VAR 0 10
75172: PUSH
75173: LD_VAR 0 10
75177: PPUSH
75178: LD_VAR 0 3
75182: PPUSH
75183: CALL_OW 74
75187: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
75188: LD_VAR 0 3
75192: PPUSH
75193: LD_VAR 0 10
75197: PPUSH
75198: CALL_OW 296
75202: PUSH
75203: LD_INT 10
75205: GREATER
75206: IFFALSE 75222
// ComStandNearbyBuilding ( unit , depot ) ;
75208: LD_VAR 0 3
75212: PPUSH
75213: LD_VAR 0 10
75217: PPUSH
75218: CALL 11390 0 2
// end ; end ; end ;
75222: LD_VAR 0 5
75226: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
75227: LD_INT 0
75229: PPUSH
75230: PPUSH
75231: PPUSH
75232: PPUSH
// if not mc_bases then
75233: LD_EXP 52
75237: NOT
75238: IFFALSE 75242
// exit ;
75240: GO 75481
// for i = 1 to mc_bases do
75242: LD_ADDR_VAR 0 2
75246: PUSH
75247: DOUBLE
75248: LD_INT 1
75250: DEC
75251: ST_TO_ADDR
75252: LD_EXP 52
75256: PUSH
75257: FOR_TO
75258: IFFALSE 75479
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
75260: LD_ADDR_VAR 0 4
75264: PUSH
75265: LD_EXP 52
75269: PUSH
75270: LD_VAR 0 2
75274: ARRAY
75275: PPUSH
75276: LD_INT 21
75278: PUSH
75279: LD_INT 1
75281: PUSH
75282: EMPTY
75283: LIST
75284: LIST
75285: PPUSH
75286: CALL_OW 72
75290: PUSH
75291: LD_EXP 81
75295: PUSH
75296: LD_VAR 0 2
75300: ARRAY
75301: UNION
75302: ST_TO_ADDR
// if not tmp then
75303: LD_VAR 0 4
75307: NOT
75308: IFFALSE 75312
// continue ;
75310: GO 75257
// for j in tmp do
75312: LD_ADDR_VAR 0 3
75316: PUSH
75317: LD_VAR 0 4
75321: PUSH
75322: FOR_IN
75323: IFFALSE 75475
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
75325: LD_VAR 0 3
75329: PPUSH
75330: CALL_OW 110
75334: NOT
75335: PUSH
75336: LD_VAR 0 3
75340: PPUSH
75341: CALL_OW 314
75345: NOT
75346: AND
75347: PUSH
75348: LD_VAR 0 3
75352: PPUSH
75353: CALL_OW 311
75357: NOT
75358: AND
75359: PUSH
75360: LD_VAR 0 3
75364: PPUSH
75365: CALL_OW 310
75369: NOT
75370: AND
75371: PUSH
75372: LD_VAR 0 3
75376: PUSH
75377: LD_EXP 55
75381: PUSH
75382: LD_VAR 0 2
75386: ARRAY
75387: PUSH
75388: LD_INT 1
75390: ARRAY
75391: IN
75392: NOT
75393: AND
75394: PUSH
75395: LD_VAR 0 3
75399: PUSH
75400: LD_EXP 55
75404: PUSH
75405: LD_VAR 0 2
75409: ARRAY
75410: PUSH
75411: LD_INT 2
75413: ARRAY
75414: IN
75415: NOT
75416: AND
75417: PUSH
75418: LD_VAR 0 3
75422: PUSH
75423: LD_EXP 64
75427: PUSH
75428: LD_VAR 0 2
75432: ARRAY
75433: IN
75434: NOT
75435: AND
75436: IFFALSE 75473
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
75438: LD_VAR 0 2
75442: PPUSH
75443: LD_EXP 52
75447: PUSH
75448: LD_VAR 0 2
75452: ARRAY
75453: PPUSH
75454: LD_VAR 0 3
75458: PPUSH
75459: LD_VAR 0 3
75463: PPUSH
75464: CALL_OW 257
75468: PPUSH
75469: CALL 74245 0 4
// end ;
75473: GO 75322
75475: POP
75476: POP
// end ;
75477: GO 75257
75479: POP
75480: POP
// end ;
75481: LD_VAR 0 1
75485: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
75486: LD_INT 0
75488: PPUSH
75489: PPUSH
75490: PPUSH
75491: PPUSH
75492: PPUSH
75493: PPUSH
// if not mc_bases [ base ] then
75494: LD_EXP 52
75498: PUSH
75499: LD_VAR 0 1
75503: ARRAY
75504: NOT
75505: IFFALSE 75509
// exit ;
75507: GO 75691
// tmp := [ ] ;
75509: LD_ADDR_VAR 0 6
75513: PUSH
75514: EMPTY
75515: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
75516: LD_ADDR_VAR 0 7
75520: PUSH
75521: LD_VAR 0 3
75525: PPUSH
75526: LD_INT 0
75528: PPUSH
75529: CALL_OW 517
75533: ST_TO_ADDR
// if not list then
75534: LD_VAR 0 7
75538: NOT
75539: IFFALSE 75543
// exit ;
75541: GO 75691
// for i = 1 to amount do
75543: LD_ADDR_VAR 0 5
75547: PUSH
75548: DOUBLE
75549: LD_INT 1
75551: DEC
75552: ST_TO_ADDR
75553: LD_VAR 0 2
75557: PUSH
75558: FOR_TO
75559: IFFALSE 75639
// begin x := rand ( 1 , list [ 1 ] ) ;
75561: LD_ADDR_VAR 0 8
75565: PUSH
75566: LD_INT 1
75568: PPUSH
75569: LD_VAR 0 7
75573: PUSH
75574: LD_INT 1
75576: ARRAY
75577: PPUSH
75578: CALL_OW 12
75582: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
75583: LD_ADDR_VAR 0 6
75587: PUSH
75588: LD_VAR 0 6
75592: PPUSH
75593: LD_VAR 0 5
75597: PPUSH
75598: LD_VAR 0 7
75602: PUSH
75603: LD_INT 1
75605: ARRAY
75606: PUSH
75607: LD_VAR 0 8
75611: ARRAY
75612: PUSH
75613: LD_VAR 0 7
75617: PUSH
75618: LD_INT 2
75620: ARRAY
75621: PUSH
75622: LD_VAR 0 8
75626: ARRAY
75627: PUSH
75628: EMPTY
75629: LIST
75630: LIST
75631: PPUSH
75632: CALL_OW 1
75636: ST_TO_ADDR
// end ;
75637: GO 75558
75639: POP
75640: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
75641: LD_ADDR_EXP 65
75645: PUSH
75646: LD_EXP 65
75650: PPUSH
75651: LD_VAR 0 1
75655: PPUSH
75656: LD_VAR 0 6
75660: PPUSH
75661: CALL_OW 1
75665: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
75666: LD_ADDR_EXP 67
75670: PUSH
75671: LD_EXP 67
75675: PPUSH
75676: LD_VAR 0 1
75680: PPUSH
75681: LD_VAR 0 3
75685: PPUSH
75686: CALL_OW 1
75690: ST_TO_ADDR
// end ;
75691: LD_VAR 0 4
75695: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
75696: LD_INT 0
75698: PPUSH
// if not mc_bases [ base ] then
75699: LD_EXP 52
75703: PUSH
75704: LD_VAR 0 1
75708: ARRAY
75709: NOT
75710: IFFALSE 75714
// exit ;
75712: GO 75739
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
75714: LD_ADDR_EXP 57
75718: PUSH
75719: LD_EXP 57
75723: PPUSH
75724: LD_VAR 0 1
75728: PPUSH
75729: LD_VAR 0 2
75733: PPUSH
75734: CALL_OW 1
75738: ST_TO_ADDR
// end ;
75739: LD_VAR 0 3
75743: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
75744: LD_INT 0
75746: PPUSH
// if not mc_bases [ base ] then
75747: LD_EXP 52
75751: PUSH
75752: LD_VAR 0 1
75756: ARRAY
75757: NOT
75758: IFFALSE 75762
// exit ;
75760: GO 75799
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
75762: LD_ADDR_EXP 57
75766: PUSH
75767: LD_EXP 57
75771: PPUSH
75772: LD_VAR 0 1
75776: PPUSH
75777: LD_EXP 57
75781: PUSH
75782: LD_VAR 0 1
75786: ARRAY
75787: PUSH
75788: LD_VAR 0 2
75792: UNION
75793: PPUSH
75794: CALL_OW 1
75798: ST_TO_ADDR
// end ;
75799: LD_VAR 0 3
75803: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
75804: LD_INT 0
75806: PPUSH
// if not mc_bases [ base ] then
75807: LD_EXP 52
75811: PUSH
75812: LD_VAR 0 1
75816: ARRAY
75817: NOT
75818: IFFALSE 75822
// exit ;
75820: GO 75847
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
75822: LD_ADDR_EXP 73
75826: PUSH
75827: LD_EXP 73
75831: PPUSH
75832: LD_VAR 0 1
75836: PPUSH
75837: LD_VAR 0 2
75841: PPUSH
75842: CALL_OW 1
75846: ST_TO_ADDR
// end ;
75847: LD_VAR 0 3
75851: RET
// export function MC_InsertProduceList ( base , components ) ; begin
75852: LD_INT 0
75854: PPUSH
// if not mc_bases [ base ] then
75855: LD_EXP 52
75859: PUSH
75860: LD_VAR 0 1
75864: ARRAY
75865: NOT
75866: IFFALSE 75870
// exit ;
75868: GO 75907
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
75870: LD_ADDR_EXP 73
75874: PUSH
75875: LD_EXP 73
75879: PPUSH
75880: LD_VAR 0 1
75884: PPUSH
75885: LD_EXP 73
75889: PUSH
75890: LD_VAR 0 1
75894: ARRAY
75895: PUSH
75896: LD_VAR 0 2
75900: ADD
75901: PPUSH
75902: CALL_OW 1
75906: ST_TO_ADDR
// end ;
75907: LD_VAR 0 3
75911: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
75912: LD_INT 0
75914: PPUSH
// if not mc_bases [ base ] then
75915: LD_EXP 52
75919: PUSH
75920: LD_VAR 0 1
75924: ARRAY
75925: NOT
75926: IFFALSE 75930
// exit ;
75928: GO 75984
// mc_defender := Replace ( mc_defender , base , deflist ) ;
75930: LD_ADDR_EXP 74
75934: PUSH
75935: LD_EXP 74
75939: PPUSH
75940: LD_VAR 0 1
75944: PPUSH
75945: LD_VAR 0 2
75949: PPUSH
75950: CALL_OW 1
75954: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
75955: LD_ADDR_EXP 63
75959: PUSH
75960: LD_EXP 63
75964: PPUSH
75965: LD_VAR 0 1
75969: PPUSH
75970: LD_VAR 0 2
75974: PUSH
75975: LD_INT 0
75977: PLUS
75978: PPUSH
75979: CALL_OW 1
75983: ST_TO_ADDR
// end ;
75984: LD_VAR 0 3
75988: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
75989: LD_INT 0
75991: PPUSH
// if not mc_bases [ base ] then
75992: LD_EXP 52
75996: PUSH
75997: LD_VAR 0 1
76001: ARRAY
76002: NOT
76003: IFFALSE 76007
// exit ;
76005: GO 76032
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
76007: LD_ADDR_EXP 63
76011: PUSH
76012: LD_EXP 63
76016: PPUSH
76017: LD_VAR 0 1
76021: PPUSH
76022: LD_VAR 0 2
76026: PPUSH
76027: CALL_OW 1
76031: ST_TO_ADDR
// end ;
76032: LD_VAR 0 3
76036: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
76037: LD_INT 0
76039: PPUSH
76040: PPUSH
76041: PPUSH
76042: PPUSH
// if not mc_bases [ base ] then
76043: LD_EXP 52
76047: PUSH
76048: LD_VAR 0 1
76052: ARRAY
76053: NOT
76054: IFFALSE 76058
// exit ;
76056: GO 76123
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
76058: LD_ADDR_EXP 72
76062: PUSH
76063: LD_EXP 72
76067: PPUSH
76068: LD_VAR 0 1
76072: PUSH
76073: LD_EXP 72
76077: PUSH
76078: LD_VAR 0 1
76082: ARRAY
76083: PUSH
76084: LD_INT 1
76086: PLUS
76087: PUSH
76088: EMPTY
76089: LIST
76090: LIST
76091: PPUSH
76092: LD_VAR 0 1
76096: PUSH
76097: LD_VAR 0 2
76101: PUSH
76102: LD_VAR 0 3
76106: PUSH
76107: LD_VAR 0 4
76111: PUSH
76112: EMPTY
76113: LIST
76114: LIST
76115: LIST
76116: LIST
76117: PPUSH
76118: CALL 16713 0 3
76122: ST_TO_ADDR
// end ;
76123: LD_VAR 0 5
76127: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
76128: LD_INT 0
76130: PPUSH
// if not mc_bases [ base ] then
76131: LD_EXP 52
76135: PUSH
76136: LD_VAR 0 1
76140: ARRAY
76141: NOT
76142: IFFALSE 76146
// exit ;
76144: GO 76171
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
76146: LD_ADDR_EXP 89
76150: PUSH
76151: LD_EXP 89
76155: PPUSH
76156: LD_VAR 0 1
76160: PPUSH
76161: LD_VAR 0 2
76165: PPUSH
76166: CALL_OW 1
76170: ST_TO_ADDR
// end ;
76171: LD_VAR 0 3
76175: RET
// export function MC_GetMinesField ( base ) ; begin
76176: LD_INT 0
76178: PPUSH
// result := mc_mines [ base ] ;
76179: LD_ADDR_VAR 0 2
76183: PUSH
76184: LD_EXP 65
76188: PUSH
76189: LD_VAR 0 1
76193: ARRAY
76194: ST_TO_ADDR
// end ;
76195: LD_VAR 0 2
76199: RET
// export function MC_GetProduceList ( base ) ; begin
76200: LD_INT 0
76202: PPUSH
// result := mc_produce [ base ] ;
76203: LD_ADDR_VAR 0 2
76207: PUSH
76208: LD_EXP 73
76212: PUSH
76213: LD_VAR 0 1
76217: ARRAY
76218: ST_TO_ADDR
// end ;
76219: LD_VAR 0 2
76223: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
76224: LD_INT 0
76226: PPUSH
76227: PPUSH
// if not mc_bases then
76228: LD_EXP 52
76232: NOT
76233: IFFALSE 76237
// exit ;
76235: GO 76302
// if mc_bases [ base ] then
76237: LD_EXP 52
76241: PUSH
76242: LD_VAR 0 1
76246: ARRAY
76247: IFFALSE 76302
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
76249: LD_ADDR_VAR 0 3
76253: PUSH
76254: LD_EXP 52
76258: PUSH
76259: LD_VAR 0 1
76263: ARRAY
76264: PPUSH
76265: LD_INT 30
76267: PUSH
76268: LD_VAR 0 2
76272: PUSH
76273: EMPTY
76274: LIST
76275: LIST
76276: PPUSH
76277: CALL_OW 72
76281: ST_TO_ADDR
// if result then
76282: LD_VAR 0 3
76286: IFFALSE 76302
// result := result [ 1 ] ;
76288: LD_ADDR_VAR 0 3
76292: PUSH
76293: LD_VAR 0 3
76297: PUSH
76298: LD_INT 1
76300: ARRAY
76301: ST_TO_ADDR
// end ; end ;
76302: LD_VAR 0 3
76306: RET
// export function MC_SetTame ( base , area ) ; begin
76307: LD_INT 0
76309: PPUSH
// if not mc_bases or not base then
76310: LD_EXP 52
76314: NOT
76315: PUSH
76316: LD_VAR 0 1
76320: NOT
76321: OR
76322: IFFALSE 76326
// exit ;
76324: GO 76351
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
76326: LD_ADDR_EXP 80
76330: PUSH
76331: LD_EXP 80
76335: PPUSH
76336: LD_VAR 0 1
76340: PPUSH
76341: LD_VAR 0 2
76345: PPUSH
76346: CALL_OW 1
76350: ST_TO_ADDR
// end ;
76351: LD_VAR 0 3
76355: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
76356: LD_INT 0
76358: PPUSH
76359: PPUSH
// if not mc_bases or not base then
76360: LD_EXP 52
76364: NOT
76365: PUSH
76366: LD_VAR 0 1
76370: NOT
76371: OR
76372: IFFALSE 76376
// exit ;
76374: GO 76478
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
76376: LD_ADDR_VAR 0 4
76380: PUSH
76381: LD_EXP 52
76385: PUSH
76386: LD_VAR 0 1
76390: ARRAY
76391: PPUSH
76392: LD_INT 30
76394: PUSH
76395: LD_VAR 0 2
76399: PUSH
76400: EMPTY
76401: LIST
76402: LIST
76403: PPUSH
76404: CALL_OW 72
76408: ST_TO_ADDR
// if not tmp then
76409: LD_VAR 0 4
76413: NOT
76414: IFFALSE 76418
// exit ;
76416: GO 76478
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
76418: LD_ADDR_EXP 84
76422: PUSH
76423: LD_EXP 84
76427: PPUSH
76428: LD_VAR 0 1
76432: PPUSH
76433: LD_EXP 84
76437: PUSH
76438: LD_VAR 0 1
76442: ARRAY
76443: PPUSH
76444: LD_EXP 84
76448: PUSH
76449: LD_VAR 0 1
76453: ARRAY
76454: PUSH
76455: LD_INT 1
76457: PLUS
76458: PPUSH
76459: LD_VAR 0 4
76463: PUSH
76464: LD_INT 1
76466: ARRAY
76467: PPUSH
76468: CALL_OW 2
76472: PPUSH
76473: CALL_OW 1
76477: ST_TO_ADDR
// end ;
76478: LD_VAR 0 3
76482: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
76483: LD_INT 0
76485: PPUSH
76486: PPUSH
// if not mc_bases or not base or not kinds then
76487: LD_EXP 52
76491: NOT
76492: PUSH
76493: LD_VAR 0 1
76497: NOT
76498: OR
76499: PUSH
76500: LD_VAR 0 2
76504: NOT
76505: OR
76506: IFFALSE 76510
// exit ;
76508: GO 76571
// for i in kinds do
76510: LD_ADDR_VAR 0 4
76514: PUSH
76515: LD_VAR 0 2
76519: PUSH
76520: FOR_IN
76521: IFFALSE 76569
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
76523: LD_ADDR_EXP 86
76527: PUSH
76528: LD_EXP 86
76532: PPUSH
76533: LD_VAR 0 1
76537: PUSH
76538: LD_EXP 86
76542: PUSH
76543: LD_VAR 0 1
76547: ARRAY
76548: PUSH
76549: LD_INT 1
76551: PLUS
76552: PUSH
76553: EMPTY
76554: LIST
76555: LIST
76556: PPUSH
76557: LD_VAR 0 4
76561: PPUSH
76562: CALL 16713 0 3
76566: ST_TO_ADDR
76567: GO 76520
76569: POP
76570: POP
// end ;
76571: LD_VAR 0 3
76575: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
76576: LD_INT 0
76578: PPUSH
// if not mc_bases or not base or not areas then
76579: LD_EXP 52
76583: NOT
76584: PUSH
76585: LD_VAR 0 1
76589: NOT
76590: OR
76591: PUSH
76592: LD_VAR 0 2
76596: NOT
76597: OR
76598: IFFALSE 76602
// exit ;
76600: GO 76627
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
76602: LD_ADDR_EXP 70
76606: PUSH
76607: LD_EXP 70
76611: PPUSH
76612: LD_VAR 0 1
76616: PPUSH
76617: LD_VAR 0 2
76621: PPUSH
76622: CALL_OW 1
76626: ST_TO_ADDR
// end ;
76627: LD_VAR 0 3
76631: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
76632: LD_INT 0
76634: PPUSH
// if not mc_bases or not base or not teleports_exit then
76635: LD_EXP 52
76639: NOT
76640: PUSH
76641: LD_VAR 0 1
76645: NOT
76646: OR
76647: PUSH
76648: LD_VAR 0 2
76652: NOT
76653: OR
76654: IFFALSE 76658
// exit ;
76656: GO 76683
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
76658: LD_ADDR_EXP 87
76662: PUSH
76663: LD_EXP 87
76667: PPUSH
76668: LD_VAR 0 1
76672: PPUSH
76673: LD_VAR 0 2
76677: PPUSH
76678: CALL_OW 1
76682: ST_TO_ADDR
// end ;
76683: LD_VAR 0 3
76687: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
76688: LD_INT 0
76690: PPUSH
76691: PPUSH
76692: PPUSH
// if not mc_bases or not base or not ext_list then
76693: LD_EXP 52
76697: NOT
76698: PUSH
76699: LD_VAR 0 1
76703: NOT
76704: OR
76705: PUSH
76706: LD_VAR 0 5
76710: NOT
76711: OR
76712: IFFALSE 76716
// exit ;
76714: GO 76889
// tmp := GetFacExtXYD ( x , y , d ) ;
76716: LD_ADDR_VAR 0 8
76720: PUSH
76721: LD_VAR 0 2
76725: PPUSH
76726: LD_VAR 0 3
76730: PPUSH
76731: LD_VAR 0 4
76735: PPUSH
76736: CALL 50067 0 3
76740: ST_TO_ADDR
// if not tmp then
76741: LD_VAR 0 8
76745: NOT
76746: IFFALSE 76750
// exit ;
76748: GO 76889
// for i in tmp do
76750: LD_ADDR_VAR 0 7
76754: PUSH
76755: LD_VAR 0 8
76759: PUSH
76760: FOR_IN
76761: IFFALSE 76887
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
76763: LD_ADDR_EXP 57
76767: PUSH
76768: LD_EXP 57
76772: PPUSH
76773: LD_VAR 0 1
76777: PPUSH
76778: LD_EXP 57
76782: PUSH
76783: LD_VAR 0 1
76787: ARRAY
76788: PPUSH
76789: LD_EXP 57
76793: PUSH
76794: LD_VAR 0 1
76798: ARRAY
76799: PUSH
76800: LD_INT 1
76802: PLUS
76803: PPUSH
76804: LD_VAR 0 5
76808: PUSH
76809: LD_INT 1
76811: ARRAY
76812: PUSH
76813: LD_VAR 0 7
76817: PUSH
76818: LD_INT 1
76820: ARRAY
76821: PUSH
76822: LD_VAR 0 7
76826: PUSH
76827: LD_INT 2
76829: ARRAY
76830: PUSH
76831: LD_VAR 0 7
76835: PUSH
76836: LD_INT 3
76838: ARRAY
76839: PUSH
76840: EMPTY
76841: LIST
76842: LIST
76843: LIST
76844: LIST
76845: PPUSH
76846: CALL_OW 2
76850: PPUSH
76851: CALL_OW 1
76855: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
76856: LD_ADDR_VAR 0 5
76860: PUSH
76861: LD_VAR 0 5
76865: PPUSH
76866: LD_INT 1
76868: PPUSH
76869: CALL_OW 3
76873: ST_TO_ADDR
// if not ext_list then
76874: LD_VAR 0 5
76878: NOT
76879: IFFALSE 76885
// exit ;
76881: POP
76882: POP
76883: GO 76889
// end ;
76885: GO 76760
76887: POP
76888: POP
// end ;
76889: LD_VAR 0 6
76893: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
76894: LD_INT 0
76896: PPUSH
// if not mc_bases or not base or not weapon_list then
76897: LD_EXP 52
76901: NOT
76902: PUSH
76903: LD_VAR 0 1
76907: NOT
76908: OR
76909: PUSH
76910: LD_VAR 0 2
76914: NOT
76915: OR
76916: IFFALSE 76920
// exit ;
76918: GO 76945
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
76920: LD_ADDR_EXP 91
76924: PUSH
76925: LD_EXP 91
76929: PPUSH
76930: LD_VAR 0 1
76934: PPUSH
76935: LD_VAR 0 2
76939: PPUSH
76940: CALL_OW 1
76944: ST_TO_ADDR
// end ;
76945: LD_VAR 0 3
76949: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
76950: LD_INT 0
76952: PPUSH
// if not mc_bases or not base or not tech_list then
76953: LD_EXP 52
76957: NOT
76958: PUSH
76959: LD_VAR 0 1
76963: NOT
76964: OR
76965: PUSH
76966: LD_VAR 0 2
76970: NOT
76971: OR
76972: IFFALSE 76976
// exit ;
76974: GO 77001
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
76976: LD_ADDR_EXP 79
76980: PUSH
76981: LD_EXP 79
76985: PPUSH
76986: LD_VAR 0 1
76990: PPUSH
76991: LD_VAR 0 2
76995: PPUSH
76996: CALL_OW 1
77000: ST_TO_ADDR
// end ;
77001: LD_VAR 0 3
77005: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
77006: LD_INT 0
77008: PPUSH
// if not mc_bases or not parking_area or not base then
77009: LD_EXP 52
77013: NOT
77014: PUSH
77015: LD_VAR 0 2
77019: NOT
77020: OR
77021: PUSH
77022: LD_VAR 0 1
77026: NOT
77027: OR
77028: IFFALSE 77032
// exit ;
77030: GO 77057
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
77032: LD_ADDR_EXP 76
77036: PUSH
77037: LD_EXP 76
77041: PPUSH
77042: LD_VAR 0 1
77046: PPUSH
77047: LD_VAR 0 2
77051: PPUSH
77052: CALL_OW 1
77056: ST_TO_ADDR
// end ;
77057: LD_VAR 0 3
77061: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
77062: LD_INT 0
77064: PPUSH
// if not mc_bases or not base or not scan_area then
77065: LD_EXP 52
77069: NOT
77070: PUSH
77071: LD_VAR 0 1
77075: NOT
77076: OR
77077: PUSH
77078: LD_VAR 0 2
77082: NOT
77083: OR
77084: IFFALSE 77088
// exit ;
77086: GO 77113
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
77088: LD_ADDR_EXP 77
77092: PUSH
77093: LD_EXP 77
77097: PPUSH
77098: LD_VAR 0 1
77102: PPUSH
77103: LD_VAR 0 2
77107: PPUSH
77108: CALL_OW 1
77112: ST_TO_ADDR
// end ;
77113: LD_VAR 0 3
77117: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
77118: LD_INT 0
77120: PPUSH
77121: PPUSH
// if not mc_bases or not base then
77122: LD_EXP 52
77126: NOT
77127: PUSH
77128: LD_VAR 0 1
77132: NOT
77133: OR
77134: IFFALSE 77138
// exit ;
77136: GO 77202
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
77138: LD_ADDR_VAR 0 3
77142: PUSH
77143: LD_INT 1
77145: PUSH
77146: LD_INT 2
77148: PUSH
77149: LD_INT 3
77151: PUSH
77152: LD_INT 4
77154: PUSH
77155: LD_INT 11
77157: PUSH
77158: EMPTY
77159: LIST
77160: LIST
77161: LIST
77162: LIST
77163: LIST
77164: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
77165: LD_ADDR_EXP 79
77169: PUSH
77170: LD_EXP 79
77174: PPUSH
77175: LD_VAR 0 1
77179: PPUSH
77180: LD_EXP 79
77184: PUSH
77185: LD_VAR 0 1
77189: ARRAY
77190: PUSH
77191: LD_VAR 0 3
77195: DIFF
77196: PPUSH
77197: CALL_OW 1
77201: ST_TO_ADDR
// end ;
77202: LD_VAR 0 2
77206: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
77207: LD_INT 0
77209: PPUSH
// result := mc_vehicles [ base ] ;
77210: LD_ADDR_VAR 0 3
77214: PUSH
77215: LD_EXP 71
77219: PUSH
77220: LD_VAR 0 1
77224: ARRAY
77225: ST_TO_ADDR
// if onlyCombat then
77226: LD_VAR 0 2
77230: IFFALSE 77395
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
77232: LD_ADDR_VAR 0 3
77236: PUSH
77237: LD_VAR 0 3
77241: PUSH
77242: LD_VAR 0 3
77246: PPUSH
77247: LD_INT 2
77249: PUSH
77250: LD_INT 34
77252: PUSH
77253: LD_INT 12
77255: PUSH
77256: EMPTY
77257: LIST
77258: LIST
77259: PUSH
77260: LD_INT 34
77262: PUSH
77263: LD_INT 51
77265: PUSH
77266: EMPTY
77267: LIST
77268: LIST
77269: PUSH
77270: LD_INT 34
77272: PUSH
77273: LD_EXP 46
77277: PUSH
77278: EMPTY
77279: LIST
77280: LIST
77281: PUSH
77282: LD_INT 34
77284: PUSH
77285: LD_INT 32
77287: PUSH
77288: EMPTY
77289: LIST
77290: LIST
77291: PUSH
77292: LD_INT 34
77294: PUSH
77295: LD_INT 13
77297: PUSH
77298: EMPTY
77299: LIST
77300: LIST
77301: PUSH
77302: LD_INT 34
77304: PUSH
77305: LD_INT 52
77307: PUSH
77308: EMPTY
77309: LIST
77310: LIST
77311: PUSH
77312: LD_INT 34
77314: PUSH
77315: LD_INT 14
77317: PUSH
77318: EMPTY
77319: LIST
77320: LIST
77321: PUSH
77322: LD_INT 34
77324: PUSH
77325: LD_INT 53
77327: PUSH
77328: EMPTY
77329: LIST
77330: LIST
77331: PUSH
77332: LD_INT 34
77334: PUSH
77335: LD_EXP 45
77339: PUSH
77340: EMPTY
77341: LIST
77342: LIST
77343: PUSH
77344: LD_INT 34
77346: PUSH
77347: LD_INT 31
77349: PUSH
77350: EMPTY
77351: LIST
77352: LIST
77353: PUSH
77354: LD_INT 34
77356: PUSH
77357: LD_INT 48
77359: PUSH
77360: EMPTY
77361: LIST
77362: LIST
77363: PUSH
77364: LD_INT 34
77366: PUSH
77367: LD_INT 8
77369: PUSH
77370: EMPTY
77371: LIST
77372: LIST
77373: PUSH
77374: EMPTY
77375: LIST
77376: LIST
77377: LIST
77378: LIST
77379: LIST
77380: LIST
77381: LIST
77382: LIST
77383: LIST
77384: LIST
77385: LIST
77386: LIST
77387: LIST
77388: PPUSH
77389: CALL_OW 72
77393: DIFF
77394: ST_TO_ADDR
// end ; end_of_file
77395: LD_VAR 0 3
77399: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
77400: LD_INT 0
77402: PPUSH
77403: PPUSH
77404: PPUSH
// if not mc_bases or not skirmish then
77405: LD_EXP 52
77409: NOT
77410: PUSH
77411: LD_EXP 50
77415: NOT
77416: OR
77417: IFFALSE 77421
// exit ;
77419: GO 77586
// for i = 1 to mc_bases do
77421: LD_ADDR_VAR 0 4
77425: PUSH
77426: DOUBLE
77427: LD_INT 1
77429: DEC
77430: ST_TO_ADDR
77431: LD_EXP 52
77435: PUSH
77436: FOR_TO
77437: IFFALSE 77584
// begin if sci in mc_bases [ i ] then
77439: LD_VAR 0 2
77443: PUSH
77444: LD_EXP 52
77448: PUSH
77449: LD_VAR 0 4
77453: ARRAY
77454: IN
77455: IFFALSE 77582
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
77457: LD_ADDR_EXP 81
77461: PUSH
77462: LD_EXP 81
77466: PPUSH
77467: LD_VAR 0 4
77471: PUSH
77472: LD_EXP 81
77476: PUSH
77477: LD_VAR 0 4
77481: ARRAY
77482: PUSH
77483: LD_INT 1
77485: PLUS
77486: PUSH
77487: EMPTY
77488: LIST
77489: LIST
77490: PPUSH
77491: LD_VAR 0 1
77495: PPUSH
77496: CALL 16713 0 3
77500: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
77501: LD_ADDR_VAR 0 5
77505: PUSH
77506: LD_EXP 52
77510: PUSH
77511: LD_VAR 0 4
77515: ARRAY
77516: PPUSH
77517: LD_INT 2
77519: PUSH
77520: LD_INT 30
77522: PUSH
77523: LD_INT 0
77525: PUSH
77526: EMPTY
77527: LIST
77528: LIST
77529: PUSH
77530: LD_INT 30
77532: PUSH
77533: LD_INT 1
77535: PUSH
77536: EMPTY
77537: LIST
77538: LIST
77539: PUSH
77540: EMPTY
77541: LIST
77542: LIST
77543: LIST
77544: PPUSH
77545: CALL_OW 72
77549: PPUSH
77550: LD_VAR 0 1
77554: PPUSH
77555: CALL_OW 74
77559: ST_TO_ADDR
// if tmp then
77560: LD_VAR 0 5
77564: IFFALSE 77580
// ComStandNearbyBuilding ( ape , tmp ) ;
77566: LD_VAR 0 1
77570: PPUSH
77571: LD_VAR 0 5
77575: PPUSH
77576: CALL 11390 0 2
// break ;
77580: GO 77584
// end ; end ;
77582: GO 77436
77584: POP
77585: POP
// end ;
77586: LD_VAR 0 3
77590: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
77591: LD_INT 0
77593: PPUSH
77594: PPUSH
77595: PPUSH
// if not mc_bases or not skirmish then
77596: LD_EXP 52
77600: NOT
77601: PUSH
77602: LD_EXP 50
77606: NOT
77607: OR
77608: IFFALSE 77612
// exit ;
77610: GO 77701
// for i = 1 to mc_bases do
77612: LD_ADDR_VAR 0 4
77616: PUSH
77617: DOUBLE
77618: LD_INT 1
77620: DEC
77621: ST_TO_ADDR
77622: LD_EXP 52
77626: PUSH
77627: FOR_TO
77628: IFFALSE 77699
// begin if building in mc_busy_turret_list [ i ] then
77630: LD_VAR 0 1
77634: PUSH
77635: LD_EXP 62
77639: PUSH
77640: LD_VAR 0 4
77644: ARRAY
77645: IN
77646: IFFALSE 77697
// begin tmp := mc_busy_turret_list [ i ] diff building ;
77648: LD_ADDR_VAR 0 5
77652: PUSH
77653: LD_EXP 62
77657: PUSH
77658: LD_VAR 0 4
77662: ARRAY
77663: PUSH
77664: LD_VAR 0 1
77668: DIFF
77669: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
77670: LD_ADDR_EXP 62
77674: PUSH
77675: LD_EXP 62
77679: PPUSH
77680: LD_VAR 0 4
77684: PPUSH
77685: LD_VAR 0 5
77689: PPUSH
77690: CALL_OW 1
77694: ST_TO_ADDR
// break ;
77695: GO 77699
// end ; end ;
77697: GO 77627
77699: POP
77700: POP
// end ;
77701: LD_VAR 0 3
77705: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
77706: LD_INT 0
77708: PPUSH
77709: PPUSH
77710: PPUSH
// if not mc_bases or not skirmish then
77711: LD_EXP 52
77715: NOT
77716: PUSH
77717: LD_EXP 50
77721: NOT
77722: OR
77723: IFFALSE 77727
// exit ;
77725: GO 77926
// for i = 1 to mc_bases do
77727: LD_ADDR_VAR 0 5
77731: PUSH
77732: DOUBLE
77733: LD_INT 1
77735: DEC
77736: ST_TO_ADDR
77737: LD_EXP 52
77741: PUSH
77742: FOR_TO
77743: IFFALSE 77924
// if building in mc_bases [ i ] then
77745: LD_VAR 0 1
77749: PUSH
77750: LD_EXP 52
77754: PUSH
77755: LD_VAR 0 5
77759: ARRAY
77760: IN
77761: IFFALSE 77922
// begin tmp := mc_bases [ i ] diff building ;
77763: LD_ADDR_VAR 0 6
77767: PUSH
77768: LD_EXP 52
77772: PUSH
77773: LD_VAR 0 5
77777: ARRAY
77778: PUSH
77779: LD_VAR 0 1
77783: DIFF
77784: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
77785: LD_ADDR_EXP 52
77789: PUSH
77790: LD_EXP 52
77794: PPUSH
77795: LD_VAR 0 5
77799: PPUSH
77800: LD_VAR 0 6
77804: PPUSH
77805: CALL_OW 1
77809: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
77810: LD_VAR 0 1
77814: PUSH
77815: LD_EXP 60
77819: PUSH
77820: LD_VAR 0 5
77824: ARRAY
77825: IN
77826: IFFALSE 77865
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
77828: LD_ADDR_EXP 60
77832: PUSH
77833: LD_EXP 60
77837: PPUSH
77838: LD_VAR 0 5
77842: PPUSH
77843: LD_EXP 60
77847: PUSH
77848: LD_VAR 0 5
77852: ARRAY
77853: PUSH
77854: LD_VAR 0 1
77858: DIFF
77859: PPUSH
77860: CALL_OW 1
77864: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
77865: LD_VAR 0 1
77869: PUSH
77870: LD_EXP 61
77874: PUSH
77875: LD_VAR 0 5
77879: ARRAY
77880: IN
77881: IFFALSE 77920
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
77883: LD_ADDR_EXP 61
77887: PUSH
77888: LD_EXP 61
77892: PPUSH
77893: LD_VAR 0 5
77897: PPUSH
77898: LD_EXP 61
77902: PUSH
77903: LD_VAR 0 5
77907: ARRAY
77908: PUSH
77909: LD_VAR 0 1
77913: DIFF
77914: PPUSH
77915: CALL_OW 1
77919: ST_TO_ADDR
// break ;
77920: GO 77924
// end ;
77922: GO 77742
77924: POP
77925: POP
// end ;
77926: LD_VAR 0 4
77930: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
77931: LD_INT 0
77933: PPUSH
77934: PPUSH
77935: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
77936: LD_EXP 52
77940: NOT
77941: PUSH
77942: LD_EXP 50
77946: NOT
77947: OR
77948: PUSH
77949: LD_VAR 0 3
77953: PUSH
77954: LD_EXP 78
77958: IN
77959: NOT
77960: OR
77961: IFFALSE 77965
// exit ;
77963: GO 78088
// for i = 1 to mc_vehicles do
77965: LD_ADDR_VAR 0 6
77969: PUSH
77970: DOUBLE
77971: LD_INT 1
77973: DEC
77974: ST_TO_ADDR
77975: LD_EXP 71
77979: PUSH
77980: FOR_TO
77981: IFFALSE 78086
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
77983: LD_VAR 0 2
77987: PUSH
77988: LD_EXP 71
77992: PUSH
77993: LD_VAR 0 6
77997: ARRAY
77998: IN
77999: PUSH
78000: LD_VAR 0 1
78004: PUSH
78005: LD_EXP 71
78009: PUSH
78010: LD_VAR 0 6
78014: ARRAY
78015: IN
78016: OR
78017: IFFALSE 78084
// begin tmp := mc_vehicles [ i ] diff old ;
78019: LD_ADDR_VAR 0 7
78023: PUSH
78024: LD_EXP 71
78028: PUSH
78029: LD_VAR 0 6
78033: ARRAY
78034: PUSH
78035: LD_VAR 0 2
78039: DIFF
78040: ST_TO_ADDR
// tmp := tmp diff new ;
78041: LD_ADDR_VAR 0 7
78045: PUSH
78046: LD_VAR 0 7
78050: PUSH
78051: LD_VAR 0 1
78055: DIFF
78056: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
78057: LD_ADDR_EXP 71
78061: PUSH
78062: LD_EXP 71
78066: PPUSH
78067: LD_VAR 0 6
78071: PPUSH
78072: LD_VAR 0 7
78076: PPUSH
78077: CALL_OW 1
78081: ST_TO_ADDR
// break ;
78082: GO 78086
// end ;
78084: GO 77980
78086: POP
78087: POP
// end ;
78088: LD_VAR 0 5
78092: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
78093: LD_INT 0
78095: PPUSH
78096: PPUSH
78097: PPUSH
78098: PPUSH
// if not mc_bases or not skirmish then
78099: LD_EXP 52
78103: NOT
78104: PUSH
78105: LD_EXP 50
78109: NOT
78110: OR
78111: IFFALSE 78115
// exit ;
78113: GO 78498
// side := GetSide ( vehicle ) ;
78115: LD_ADDR_VAR 0 5
78119: PUSH
78120: LD_VAR 0 1
78124: PPUSH
78125: CALL_OW 255
78129: ST_TO_ADDR
// for i = 1 to mc_bases do
78130: LD_ADDR_VAR 0 4
78134: PUSH
78135: DOUBLE
78136: LD_INT 1
78138: DEC
78139: ST_TO_ADDR
78140: LD_EXP 52
78144: PUSH
78145: FOR_TO
78146: IFFALSE 78496
// begin if factory in mc_bases [ i ] then
78148: LD_VAR 0 2
78152: PUSH
78153: LD_EXP 52
78157: PUSH
78158: LD_VAR 0 4
78162: ARRAY
78163: IN
78164: IFFALSE 78494
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
78166: LD_EXP 74
78170: PUSH
78171: LD_VAR 0 4
78175: ARRAY
78176: PUSH
78177: LD_EXP 63
78181: PUSH
78182: LD_VAR 0 4
78186: ARRAY
78187: LESS
78188: PUSH
78189: LD_VAR 0 1
78193: PPUSH
78194: CALL_OW 264
78198: PUSH
78199: LD_INT 31
78201: PUSH
78202: LD_INT 32
78204: PUSH
78205: LD_INT 51
78207: PUSH
78208: LD_EXP 46
78212: PUSH
78213: LD_INT 12
78215: PUSH
78216: LD_INT 30
78218: PUSH
78219: LD_EXP 45
78223: PUSH
78224: LD_INT 11
78226: PUSH
78227: LD_INT 53
78229: PUSH
78230: LD_INT 14
78232: PUSH
78233: LD_EXP 49
78237: PUSH
78238: LD_INT 29
78240: PUSH
78241: LD_EXP 47
78245: PUSH
78246: LD_INT 13
78248: PUSH
78249: LD_INT 52
78251: PUSH
78252: LD_INT 48
78254: PUSH
78255: LD_INT 8
78257: PUSH
78258: EMPTY
78259: LIST
78260: LIST
78261: LIST
78262: LIST
78263: LIST
78264: LIST
78265: LIST
78266: LIST
78267: LIST
78268: LIST
78269: LIST
78270: LIST
78271: LIST
78272: LIST
78273: LIST
78274: LIST
78275: LIST
78276: IN
78277: NOT
78278: AND
78279: IFFALSE 78320
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) else
78281: LD_ADDR_EXP 74
78285: PUSH
78286: LD_EXP 74
78290: PPUSH
78291: LD_VAR 0 4
78295: PPUSH
78296: LD_EXP 74
78300: PUSH
78301: LD_VAR 0 4
78305: ARRAY
78306: PUSH
78307: LD_VAR 0 1
78311: ADD
78312: PPUSH
78313: CALL_OW 1
78317: ST_TO_ADDR
78318: GO 78364
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
78320: LD_ADDR_EXP 71
78324: PUSH
78325: LD_EXP 71
78329: PPUSH
78330: LD_VAR 0 4
78334: PUSH
78335: LD_EXP 71
78339: PUSH
78340: LD_VAR 0 4
78344: ARRAY
78345: PUSH
78346: LD_INT 1
78348: PLUS
78349: PUSH
78350: EMPTY
78351: LIST
78352: LIST
78353: PPUSH
78354: LD_VAR 0 1
78358: PPUSH
78359: CALL 16713 0 3
78363: ST_TO_ADDR
// if not mc_scan [ i ] then
78364: LD_EXP 75
78368: PUSH
78369: LD_VAR 0 4
78373: ARRAY
78374: NOT
78375: IFFALSE 78494
// begin if GetControl ( vehicle ) = control_remote then
78377: LD_VAR 0 1
78381: PPUSH
78382: CALL_OW 263
78386: PUSH
78387: LD_INT 2
78389: EQUAL
78390: IFFALSE 78410
// repeat wait ( 0 0$1 ) ;
78392: LD_INT 35
78394: PPUSH
78395: CALL_OW 67
// until IsControledBy ( vehicle ) ;
78399: LD_VAR 0 1
78403: PPUSH
78404: CALL_OW 312
78408: IFFALSE 78392
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
78410: LD_VAR 0 1
78414: PPUSH
78415: LD_EXP 76
78419: PUSH
78420: LD_VAR 0 4
78424: ARRAY
78425: PPUSH
78426: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
78430: LD_VAR 0 1
78434: PPUSH
78435: CALL_OW 263
78439: PUSH
78440: LD_INT 1
78442: NONEQUAL
78443: IFFALSE 78447
// break ;
78445: GO 78496
// repeat wait ( 0 0$1 ) ;
78447: LD_INT 35
78449: PPUSH
78450: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
78454: LD_VAR 0 1
78458: PPUSH
78459: LD_EXP 76
78463: PUSH
78464: LD_VAR 0 4
78468: ARRAY
78469: PPUSH
78470: CALL_OW 308
78474: IFFALSE 78447
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
78476: LD_VAR 0 1
78480: PPUSH
78481: CALL_OW 311
78485: PPUSH
78486: CALL_OW 121
// exit ;
78490: POP
78491: POP
78492: GO 78498
// end ; end ; end ;
78494: GO 78145
78496: POP
78497: POP
// end ;
78498: LD_VAR 0 3
78502: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
78503: LD_INT 0
78505: PPUSH
78506: PPUSH
78507: PPUSH
78508: PPUSH
// if not mc_bases or not skirmish then
78509: LD_EXP 52
78513: NOT
78514: PUSH
78515: LD_EXP 50
78519: NOT
78520: OR
78521: IFFALSE 78525
// exit ;
78523: GO 78878
// repeat wait ( 0 0$1 ) ;
78525: LD_INT 35
78527: PPUSH
78528: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
78532: LD_VAR 0 2
78536: PPUSH
78537: LD_VAR 0 3
78541: PPUSH
78542: CALL_OW 284
78546: IFFALSE 78525
// if GetResourceTypeXY ( x , y ) = mat_artefact then
78548: LD_VAR 0 2
78552: PPUSH
78553: LD_VAR 0 3
78557: PPUSH
78558: CALL_OW 283
78562: PUSH
78563: LD_INT 4
78565: EQUAL
78566: IFFALSE 78570
// exit ;
78568: GO 78878
// for i = 1 to mc_bases do
78570: LD_ADDR_VAR 0 7
78574: PUSH
78575: DOUBLE
78576: LD_INT 1
78578: DEC
78579: ST_TO_ADDR
78580: LD_EXP 52
78584: PUSH
78585: FOR_TO
78586: IFFALSE 78876
// begin if mc_crates_area [ i ] then
78588: LD_EXP 70
78592: PUSH
78593: LD_VAR 0 7
78597: ARRAY
78598: IFFALSE 78709
// for j in mc_crates_area [ i ] do
78600: LD_ADDR_VAR 0 8
78604: PUSH
78605: LD_EXP 70
78609: PUSH
78610: LD_VAR 0 7
78614: ARRAY
78615: PUSH
78616: FOR_IN
78617: IFFALSE 78707
// if InArea ( x , y , j ) then
78619: LD_VAR 0 2
78623: PPUSH
78624: LD_VAR 0 3
78628: PPUSH
78629: LD_VAR 0 8
78633: PPUSH
78634: CALL_OW 309
78638: IFFALSE 78705
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
78640: LD_ADDR_EXP 68
78644: PUSH
78645: LD_EXP 68
78649: PPUSH
78650: LD_VAR 0 7
78654: PUSH
78655: LD_EXP 68
78659: PUSH
78660: LD_VAR 0 7
78664: ARRAY
78665: PUSH
78666: LD_INT 1
78668: PLUS
78669: PUSH
78670: EMPTY
78671: LIST
78672: LIST
78673: PPUSH
78674: LD_VAR 0 4
78678: PUSH
78679: LD_VAR 0 2
78683: PUSH
78684: LD_VAR 0 3
78688: PUSH
78689: EMPTY
78690: LIST
78691: LIST
78692: LIST
78693: PPUSH
78694: CALL 16713 0 3
78698: ST_TO_ADDR
// exit ;
78699: POP
78700: POP
78701: POP
78702: POP
78703: GO 78878
// end ;
78705: GO 78616
78707: POP
78708: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
78709: LD_ADDR_VAR 0 9
78713: PUSH
78714: LD_EXP 52
78718: PUSH
78719: LD_VAR 0 7
78723: ARRAY
78724: PPUSH
78725: LD_INT 2
78727: PUSH
78728: LD_INT 30
78730: PUSH
78731: LD_INT 0
78733: PUSH
78734: EMPTY
78735: LIST
78736: LIST
78737: PUSH
78738: LD_INT 30
78740: PUSH
78741: LD_INT 1
78743: PUSH
78744: EMPTY
78745: LIST
78746: LIST
78747: PUSH
78748: EMPTY
78749: LIST
78750: LIST
78751: LIST
78752: PPUSH
78753: CALL_OW 72
78757: ST_TO_ADDR
// if not depot then
78758: LD_VAR 0 9
78762: NOT
78763: IFFALSE 78767
// continue ;
78765: GO 78585
// for j in depot do
78767: LD_ADDR_VAR 0 8
78771: PUSH
78772: LD_VAR 0 9
78776: PUSH
78777: FOR_IN
78778: IFFALSE 78872
// if GetDistUnitXY ( j , x , y ) < 30 then
78780: LD_VAR 0 8
78784: PPUSH
78785: LD_VAR 0 2
78789: PPUSH
78790: LD_VAR 0 3
78794: PPUSH
78795: CALL_OW 297
78799: PUSH
78800: LD_INT 30
78802: LESS
78803: IFFALSE 78870
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
78805: LD_ADDR_EXP 68
78809: PUSH
78810: LD_EXP 68
78814: PPUSH
78815: LD_VAR 0 7
78819: PUSH
78820: LD_EXP 68
78824: PUSH
78825: LD_VAR 0 7
78829: ARRAY
78830: PUSH
78831: LD_INT 1
78833: PLUS
78834: PUSH
78835: EMPTY
78836: LIST
78837: LIST
78838: PPUSH
78839: LD_VAR 0 4
78843: PUSH
78844: LD_VAR 0 2
78848: PUSH
78849: LD_VAR 0 3
78853: PUSH
78854: EMPTY
78855: LIST
78856: LIST
78857: LIST
78858: PPUSH
78859: CALL 16713 0 3
78863: ST_TO_ADDR
// exit ;
78864: POP
78865: POP
78866: POP
78867: POP
78868: GO 78878
// end ;
78870: GO 78777
78872: POP
78873: POP
// end ;
78874: GO 78585
78876: POP
78877: POP
// end ;
78878: LD_VAR 0 6
78882: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
78883: LD_INT 0
78885: PPUSH
78886: PPUSH
78887: PPUSH
78888: PPUSH
// if not mc_bases or not skirmish then
78889: LD_EXP 52
78893: NOT
78894: PUSH
78895: LD_EXP 50
78899: NOT
78900: OR
78901: IFFALSE 78905
// exit ;
78903: GO 79182
// side := GetSide ( lab ) ;
78905: LD_ADDR_VAR 0 4
78909: PUSH
78910: LD_VAR 0 2
78914: PPUSH
78915: CALL_OW 255
78919: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
78920: LD_VAR 0 4
78924: PUSH
78925: LD_EXP 78
78929: IN
78930: NOT
78931: PUSH
78932: LD_EXP 79
78936: NOT
78937: OR
78938: PUSH
78939: LD_EXP 52
78943: NOT
78944: OR
78945: IFFALSE 78949
// exit ;
78947: GO 79182
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
78949: LD_ADDR_EXP 79
78953: PUSH
78954: LD_EXP 79
78958: PPUSH
78959: LD_VAR 0 4
78963: PPUSH
78964: LD_EXP 79
78968: PUSH
78969: LD_VAR 0 4
78973: ARRAY
78974: PUSH
78975: LD_VAR 0 1
78979: DIFF
78980: PPUSH
78981: CALL_OW 1
78985: ST_TO_ADDR
// for i = 1 to mc_bases do
78986: LD_ADDR_VAR 0 5
78990: PUSH
78991: DOUBLE
78992: LD_INT 1
78994: DEC
78995: ST_TO_ADDR
78996: LD_EXP 52
79000: PUSH
79001: FOR_TO
79002: IFFALSE 79180
// begin if lab in mc_bases [ i ] then
79004: LD_VAR 0 2
79008: PUSH
79009: LD_EXP 52
79013: PUSH
79014: LD_VAR 0 5
79018: ARRAY
79019: IN
79020: IFFALSE 79178
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
79022: LD_VAR 0 1
79026: PUSH
79027: LD_INT 11
79029: PUSH
79030: LD_INT 4
79032: PUSH
79033: LD_INT 3
79035: PUSH
79036: LD_INT 2
79038: PUSH
79039: EMPTY
79040: LIST
79041: LIST
79042: LIST
79043: LIST
79044: IN
79045: PUSH
79046: LD_EXP 82
79050: PUSH
79051: LD_VAR 0 5
79055: ARRAY
79056: AND
79057: IFFALSE 79178
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
79059: LD_ADDR_VAR 0 6
79063: PUSH
79064: LD_EXP 82
79068: PUSH
79069: LD_VAR 0 5
79073: ARRAY
79074: PUSH
79075: LD_INT 1
79077: ARRAY
79078: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
79079: LD_ADDR_EXP 82
79083: PUSH
79084: LD_EXP 82
79088: PPUSH
79089: LD_VAR 0 5
79093: PPUSH
79094: EMPTY
79095: PPUSH
79096: CALL_OW 1
79100: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
79101: LD_VAR 0 6
79105: PPUSH
79106: LD_INT 0
79108: PPUSH
79109: CALL_OW 109
// ComExitBuilding ( tmp ) ;
79113: LD_VAR 0 6
79117: PPUSH
79118: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
79122: LD_ADDR_EXP 81
79126: PUSH
79127: LD_EXP 81
79131: PPUSH
79132: LD_VAR 0 5
79136: PPUSH
79137: LD_EXP 81
79141: PUSH
79142: LD_VAR 0 5
79146: ARRAY
79147: PPUSH
79148: LD_INT 1
79150: PPUSH
79151: LD_VAR 0 6
79155: PPUSH
79156: CALL_OW 2
79160: PPUSH
79161: CALL_OW 1
79165: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
79166: LD_VAR 0 5
79170: PPUSH
79171: LD_INT 112
79173: PPUSH
79174: CALL 56651 0 2
// end ; end ; end ;
79178: GO 79001
79180: POP
79181: POP
// end ;
79182: LD_VAR 0 3
79186: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
79187: LD_INT 0
79189: PPUSH
79190: PPUSH
79191: PPUSH
79192: PPUSH
79193: PPUSH
79194: PPUSH
79195: PPUSH
79196: PPUSH
// if not mc_bases or not skirmish then
79197: LD_EXP 52
79201: NOT
79202: PUSH
79203: LD_EXP 50
79207: NOT
79208: OR
79209: IFFALSE 79213
// exit ;
79211: GO 80229
// for i = 1 to mc_bases do
79213: LD_ADDR_VAR 0 3
79217: PUSH
79218: DOUBLE
79219: LD_INT 1
79221: DEC
79222: ST_TO_ADDR
79223: LD_EXP 52
79227: PUSH
79228: FOR_TO
79229: IFFALSE 80227
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
79231: LD_VAR 0 1
79235: PUSH
79236: LD_EXP 52
79240: PUSH
79241: LD_VAR 0 3
79245: ARRAY
79246: IN
79247: PUSH
79248: LD_VAR 0 1
79252: PUSH
79253: LD_EXP 59
79257: PUSH
79258: LD_VAR 0 3
79262: ARRAY
79263: IN
79264: OR
79265: PUSH
79266: LD_VAR 0 1
79270: PUSH
79271: LD_EXP 71
79275: PUSH
79276: LD_VAR 0 3
79280: ARRAY
79281: IN
79282: OR
79283: PUSH
79284: LD_VAR 0 1
79288: PUSH
79289: LD_EXP 81
79293: PUSH
79294: LD_VAR 0 3
79298: ARRAY
79299: IN
79300: OR
79301: PUSH
79302: LD_VAR 0 1
79306: PUSH
79307: LD_EXP 82
79311: PUSH
79312: LD_VAR 0 3
79316: ARRAY
79317: IN
79318: OR
79319: IFFALSE 80225
// begin if un in mc_ape [ i ] then
79321: LD_VAR 0 1
79325: PUSH
79326: LD_EXP 81
79330: PUSH
79331: LD_VAR 0 3
79335: ARRAY
79336: IN
79337: IFFALSE 79376
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
79339: LD_ADDR_EXP 81
79343: PUSH
79344: LD_EXP 81
79348: PPUSH
79349: LD_VAR 0 3
79353: PPUSH
79354: LD_EXP 81
79358: PUSH
79359: LD_VAR 0 3
79363: ARRAY
79364: PUSH
79365: LD_VAR 0 1
79369: DIFF
79370: PPUSH
79371: CALL_OW 1
79375: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
79376: LD_VAR 0 1
79380: PUSH
79381: LD_EXP 82
79385: PUSH
79386: LD_VAR 0 3
79390: ARRAY
79391: IN
79392: IFFALSE 79416
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
79394: LD_ADDR_EXP 82
79398: PUSH
79399: LD_EXP 82
79403: PPUSH
79404: LD_VAR 0 3
79408: PPUSH
79409: EMPTY
79410: PPUSH
79411: CALL_OW 1
79415: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] ) then
79416: LD_VAR 0 1
79420: PPUSH
79421: CALL_OW 247
79425: PUSH
79426: LD_INT 2
79428: EQUAL
79429: PUSH
79430: LD_VAR 0 1
79434: PPUSH
79435: CALL_OW 110
79439: PUSH
79440: LD_INT 20
79442: EQUAL
79443: PUSH
79444: LD_VAR 0 1
79448: PUSH
79449: LD_EXP 74
79453: PUSH
79454: LD_VAR 0 3
79458: ARRAY
79459: IN
79460: OR
79461: AND
79462: IFFALSE 79565
// begin fac := MC_GetBuilding ( i , b_factory ) ;
79464: LD_ADDR_VAR 0 8
79468: PUSH
79469: LD_VAR 0 3
79473: PPUSH
79474: LD_INT 3
79476: PPUSH
79477: CALL 76224 0 2
79481: ST_TO_ADDR
// if fac then
79482: LD_VAR 0 8
79486: IFFALSE 79565
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
79488: LD_ADDR_VAR 0 9
79492: PUSH
79493: LD_VAR 0 8
79497: PPUSH
79498: LD_VAR 0 1
79502: PPUSH
79503: CALL_OW 265
79507: PPUSH
79508: LD_VAR 0 1
79512: PPUSH
79513: CALL_OW 262
79517: PPUSH
79518: LD_VAR 0 1
79522: PPUSH
79523: CALL_OW 263
79527: PPUSH
79528: LD_VAR 0 1
79532: PPUSH
79533: CALL_OW 264
79537: PPUSH
79538: CALL 14313 0 5
79542: ST_TO_ADDR
// if components then
79543: LD_VAR 0 9
79547: IFFALSE 79563
// MC_InsertProduceList ( i , components ) ;
79549: LD_VAR 0 3
79553: PPUSH
79554: LD_VAR 0 9
79558: PPUSH
79559: CALL 75852 0 2
// break ;
79563: GO 80227
// end ; end ; if GetType ( un ) = unit_building then
79565: LD_VAR 0 1
79569: PPUSH
79570: CALL_OW 247
79574: PUSH
79575: LD_INT 3
79577: EQUAL
79578: IFFALSE 79893
// begin btype := GetBType ( un ) ;
79580: LD_ADDR_VAR 0 5
79584: PUSH
79585: LD_VAR 0 1
79589: PPUSH
79590: CALL_OW 266
79594: ST_TO_ADDR
// if btype = b_warehouse then
79595: LD_VAR 0 5
79599: PUSH
79600: LD_INT 1
79602: EQUAL
79603: IFFALSE 79621
// begin btype := b_depot ;
79605: LD_ADDR_VAR 0 5
79609: PUSH
79610: LD_INT 0
79612: ST_TO_ADDR
// pos := 1 ;
79613: LD_ADDR_VAR 0 6
79617: PUSH
79618: LD_INT 1
79620: ST_TO_ADDR
// end ; if btype = b_factory then
79621: LD_VAR 0 5
79625: PUSH
79626: LD_INT 3
79628: EQUAL
79629: IFFALSE 79647
// begin btype := b_workshop ;
79631: LD_ADDR_VAR 0 5
79635: PUSH
79636: LD_INT 2
79638: ST_TO_ADDR
// pos := 1 ;
79639: LD_ADDR_VAR 0 6
79643: PUSH
79644: LD_INT 1
79646: ST_TO_ADDR
// end ; if btype = b_barracks then
79647: LD_VAR 0 5
79651: PUSH
79652: LD_INT 5
79654: EQUAL
79655: IFFALSE 79665
// btype := b_armoury ;
79657: LD_ADDR_VAR 0 5
79661: PUSH
79662: LD_INT 4
79664: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
79665: LD_VAR 0 5
79669: PUSH
79670: LD_INT 7
79672: PUSH
79673: LD_INT 8
79675: PUSH
79676: EMPTY
79677: LIST
79678: LIST
79679: IN
79680: IFFALSE 79690
// btype := b_lab ;
79682: LD_ADDR_VAR 0 5
79686: PUSH
79687: LD_INT 6
79689: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
79690: LD_ADDR_EXP 57
79694: PUSH
79695: LD_EXP 57
79699: PPUSH
79700: LD_VAR 0 3
79704: PUSH
79705: LD_EXP 57
79709: PUSH
79710: LD_VAR 0 3
79714: ARRAY
79715: PUSH
79716: LD_INT 1
79718: PLUS
79719: PUSH
79720: EMPTY
79721: LIST
79722: LIST
79723: PPUSH
79724: LD_VAR 0 5
79728: PUSH
79729: LD_VAR 0 1
79733: PPUSH
79734: CALL_OW 250
79738: PUSH
79739: LD_VAR 0 1
79743: PPUSH
79744: CALL_OW 251
79748: PUSH
79749: LD_VAR 0 1
79753: PPUSH
79754: CALL_OW 254
79758: PUSH
79759: EMPTY
79760: LIST
79761: LIST
79762: LIST
79763: LIST
79764: PPUSH
79765: CALL 16713 0 3
79769: ST_TO_ADDR
// if pos = 1 then
79770: LD_VAR 0 6
79774: PUSH
79775: LD_INT 1
79777: EQUAL
79778: IFFALSE 79893
// begin tmp := mc_build_list [ i ] ;
79780: LD_ADDR_VAR 0 7
79784: PUSH
79785: LD_EXP 57
79789: PUSH
79790: LD_VAR 0 3
79794: ARRAY
79795: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
79796: LD_VAR 0 7
79800: PPUSH
79801: LD_INT 2
79803: PUSH
79804: LD_INT 30
79806: PUSH
79807: LD_INT 0
79809: PUSH
79810: EMPTY
79811: LIST
79812: LIST
79813: PUSH
79814: LD_INT 30
79816: PUSH
79817: LD_INT 1
79819: PUSH
79820: EMPTY
79821: LIST
79822: LIST
79823: PUSH
79824: EMPTY
79825: LIST
79826: LIST
79827: LIST
79828: PPUSH
79829: CALL_OW 72
79833: IFFALSE 79843
// pos := 2 ;
79835: LD_ADDR_VAR 0 6
79839: PUSH
79840: LD_INT 2
79842: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
79843: LD_ADDR_VAR 0 7
79847: PUSH
79848: LD_VAR 0 7
79852: PPUSH
79853: LD_VAR 0 6
79857: PPUSH
79858: LD_VAR 0 7
79862: PPUSH
79863: CALL 17039 0 3
79867: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
79868: LD_ADDR_EXP 57
79872: PUSH
79873: LD_EXP 57
79877: PPUSH
79878: LD_VAR 0 3
79882: PPUSH
79883: LD_VAR 0 7
79887: PPUSH
79888: CALL_OW 1
79892: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
79893: LD_VAR 0 1
79897: PUSH
79898: LD_EXP 52
79902: PUSH
79903: LD_VAR 0 3
79907: ARRAY
79908: IN
79909: IFFALSE 79948
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
79911: LD_ADDR_EXP 52
79915: PUSH
79916: LD_EXP 52
79920: PPUSH
79921: LD_VAR 0 3
79925: PPUSH
79926: LD_EXP 52
79930: PUSH
79931: LD_VAR 0 3
79935: ARRAY
79936: PUSH
79937: LD_VAR 0 1
79941: DIFF
79942: PPUSH
79943: CALL_OW 1
79947: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
79948: LD_VAR 0 1
79952: PUSH
79953: LD_EXP 59
79957: PUSH
79958: LD_VAR 0 3
79962: ARRAY
79963: IN
79964: IFFALSE 80003
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
79966: LD_ADDR_EXP 59
79970: PUSH
79971: LD_EXP 59
79975: PPUSH
79976: LD_VAR 0 3
79980: PPUSH
79981: LD_EXP 59
79985: PUSH
79986: LD_VAR 0 3
79990: ARRAY
79991: PUSH
79992: LD_VAR 0 1
79996: DIFF
79997: PPUSH
79998: CALL_OW 1
80002: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
80003: LD_VAR 0 1
80007: PUSH
80008: LD_EXP 71
80012: PUSH
80013: LD_VAR 0 3
80017: ARRAY
80018: IN
80019: IFFALSE 80058
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
80021: LD_ADDR_EXP 71
80025: PUSH
80026: LD_EXP 71
80030: PPUSH
80031: LD_VAR 0 3
80035: PPUSH
80036: LD_EXP 71
80040: PUSH
80041: LD_VAR 0 3
80045: ARRAY
80046: PUSH
80047: LD_VAR 0 1
80051: DIFF
80052: PPUSH
80053: CALL_OW 1
80057: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
80058: LD_VAR 0 1
80062: PUSH
80063: LD_EXP 74
80067: PUSH
80068: LD_VAR 0 3
80072: ARRAY
80073: IN
80074: IFFALSE 80113
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
80076: LD_ADDR_EXP 74
80080: PUSH
80081: LD_EXP 74
80085: PPUSH
80086: LD_VAR 0 3
80090: PPUSH
80091: LD_EXP 74
80095: PUSH
80096: LD_VAR 0 3
80100: ARRAY
80101: PUSH
80102: LD_VAR 0 1
80106: DIFF
80107: PPUSH
80108: CALL_OW 1
80112: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
80113: LD_VAR 0 1
80117: PUSH
80118: LD_EXP 61
80122: PUSH
80123: LD_VAR 0 3
80127: ARRAY
80128: IN
80129: IFFALSE 80168
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
80131: LD_ADDR_EXP 61
80135: PUSH
80136: LD_EXP 61
80140: PPUSH
80141: LD_VAR 0 3
80145: PPUSH
80146: LD_EXP 61
80150: PUSH
80151: LD_VAR 0 3
80155: ARRAY
80156: PUSH
80157: LD_VAR 0 1
80161: DIFF
80162: PPUSH
80163: CALL_OW 1
80167: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
80168: LD_VAR 0 1
80172: PUSH
80173: LD_EXP 60
80177: PUSH
80178: LD_VAR 0 3
80182: ARRAY
80183: IN
80184: IFFALSE 80223
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
80186: LD_ADDR_EXP 60
80190: PUSH
80191: LD_EXP 60
80195: PPUSH
80196: LD_VAR 0 3
80200: PPUSH
80201: LD_EXP 60
80205: PUSH
80206: LD_VAR 0 3
80210: ARRAY
80211: PUSH
80212: LD_VAR 0 1
80216: DIFF
80217: PPUSH
80218: CALL_OW 1
80222: ST_TO_ADDR
// end ; break ;
80223: GO 80227
// end ;
80225: GO 79228
80227: POP
80228: POP
// end ;
80229: LD_VAR 0 2
80233: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
80234: LD_INT 0
80236: PPUSH
80237: PPUSH
80238: PPUSH
// if not mc_bases or not skirmish then
80239: LD_EXP 52
80243: NOT
80244: PUSH
80245: LD_EXP 50
80249: NOT
80250: OR
80251: IFFALSE 80255
// exit ;
80253: GO 80470
// for i = 1 to mc_bases do
80255: LD_ADDR_VAR 0 3
80259: PUSH
80260: DOUBLE
80261: LD_INT 1
80263: DEC
80264: ST_TO_ADDR
80265: LD_EXP 52
80269: PUSH
80270: FOR_TO
80271: IFFALSE 80468
// begin if building in mc_construct_list [ i ] then
80273: LD_VAR 0 1
80277: PUSH
80278: LD_EXP 59
80282: PUSH
80283: LD_VAR 0 3
80287: ARRAY
80288: IN
80289: IFFALSE 80466
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
80291: LD_ADDR_EXP 59
80295: PUSH
80296: LD_EXP 59
80300: PPUSH
80301: LD_VAR 0 3
80305: PPUSH
80306: LD_EXP 59
80310: PUSH
80311: LD_VAR 0 3
80315: ARRAY
80316: PUSH
80317: LD_VAR 0 1
80321: DIFF
80322: PPUSH
80323: CALL_OW 1
80327: ST_TO_ADDR
// if building in mc_lab [ i ] then
80328: LD_VAR 0 1
80332: PUSH
80333: LD_EXP 85
80337: PUSH
80338: LD_VAR 0 3
80342: ARRAY
80343: IN
80344: IFFALSE 80399
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
80346: LD_ADDR_EXP 86
80350: PUSH
80351: LD_EXP 86
80355: PPUSH
80356: LD_VAR 0 3
80360: PPUSH
80361: LD_EXP 86
80365: PUSH
80366: LD_VAR 0 3
80370: ARRAY
80371: PPUSH
80372: LD_INT 1
80374: PPUSH
80375: LD_EXP 86
80379: PUSH
80380: LD_VAR 0 3
80384: ARRAY
80385: PPUSH
80386: LD_INT 0
80388: PPUSH
80389: CALL 16131 0 4
80393: PPUSH
80394: CALL_OW 1
80398: ST_TO_ADDR
// if not building in mc_bases [ i ] then
80399: LD_VAR 0 1
80403: PUSH
80404: LD_EXP 52
80408: PUSH
80409: LD_VAR 0 3
80413: ARRAY
80414: IN
80415: NOT
80416: IFFALSE 80462
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
80418: LD_ADDR_EXP 52
80422: PUSH
80423: LD_EXP 52
80427: PPUSH
80428: LD_VAR 0 3
80432: PUSH
80433: LD_EXP 52
80437: PUSH
80438: LD_VAR 0 3
80442: ARRAY
80443: PUSH
80444: LD_INT 1
80446: PLUS
80447: PUSH
80448: EMPTY
80449: LIST
80450: LIST
80451: PPUSH
80452: LD_VAR 0 1
80456: PPUSH
80457: CALL 16713 0 3
80461: ST_TO_ADDR
// exit ;
80462: POP
80463: POP
80464: GO 80470
// end ; end ;
80466: GO 80270
80468: POP
80469: POP
// end ;
80470: LD_VAR 0 2
80474: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
80475: LD_INT 0
80477: PPUSH
80478: PPUSH
80479: PPUSH
80480: PPUSH
80481: PPUSH
80482: PPUSH
80483: PPUSH
// if not mc_bases or not skirmish then
80484: LD_EXP 52
80488: NOT
80489: PUSH
80490: LD_EXP 50
80494: NOT
80495: OR
80496: IFFALSE 80500
// exit ;
80498: GO 81161
// for i = 1 to mc_bases do
80500: LD_ADDR_VAR 0 3
80504: PUSH
80505: DOUBLE
80506: LD_INT 1
80508: DEC
80509: ST_TO_ADDR
80510: LD_EXP 52
80514: PUSH
80515: FOR_TO
80516: IFFALSE 81159
// begin if building in mc_construct_list [ i ] then
80518: LD_VAR 0 1
80522: PUSH
80523: LD_EXP 59
80527: PUSH
80528: LD_VAR 0 3
80532: ARRAY
80533: IN
80534: IFFALSE 81157
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
80536: LD_ADDR_EXP 59
80540: PUSH
80541: LD_EXP 59
80545: PPUSH
80546: LD_VAR 0 3
80550: PPUSH
80551: LD_EXP 59
80555: PUSH
80556: LD_VAR 0 3
80560: ARRAY
80561: PUSH
80562: LD_VAR 0 1
80566: DIFF
80567: PPUSH
80568: CALL_OW 1
80572: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
80573: LD_ADDR_EXP 52
80577: PUSH
80578: LD_EXP 52
80582: PPUSH
80583: LD_VAR 0 3
80587: PUSH
80588: LD_EXP 52
80592: PUSH
80593: LD_VAR 0 3
80597: ARRAY
80598: PUSH
80599: LD_INT 1
80601: PLUS
80602: PUSH
80603: EMPTY
80604: LIST
80605: LIST
80606: PPUSH
80607: LD_VAR 0 1
80611: PPUSH
80612: CALL 16713 0 3
80616: ST_TO_ADDR
// btype := GetBType ( building ) ;
80617: LD_ADDR_VAR 0 5
80621: PUSH
80622: LD_VAR 0 1
80626: PPUSH
80627: CALL_OW 266
80631: ST_TO_ADDR
// side := GetSide ( building ) ;
80632: LD_ADDR_VAR 0 8
80636: PUSH
80637: LD_VAR 0 1
80641: PPUSH
80642: CALL_OW 255
80646: ST_TO_ADDR
// if btype = b_lab then
80647: LD_VAR 0 5
80651: PUSH
80652: LD_INT 6
80654: EQUAL
80655: IFFALSE 80705
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
80657: LD_ADDR_EXP 85
80661: PUSH
80662: LD_EXP 85
80666: PPUSH
80667: LD_VAR 0 3
80671: PUSH
80672: LD_EXP 85
80676: PUSH
80677: LD_VAR 0 3
80681: ARRAY
80682: PUSH
80683: LD_INT 1
80685: PLUS
80686: PUSH
80687: EMPTY
80688: LIST
80689: LIST
80690: PPUSH
80691: LD_VAR 0 1
80695: PPUSH
80696: CALL 16713 0 3
80700: ST_TO_ADDR
// exit ;
80701: POP
80702: POP
80703: GO 81161
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
80705: LD_VAR 0 5
80709: PUSH
80710: LD_INT 0
80712: PUSH
80713: LD_INT 2
80715: PUSH
80716: LD_INT 4
80718: PUSH
80719: EMPTY
80720: LIST
80721: LIST
80722: LIST
80723: IN
80724: IFFALSE 80848
// begin if btype = b_armoury then
80726: LD_VAR 0 5
80730: PUSH
80731: LD_INT 4
80733: EQUAL
80734: IFFALSE 80744
// btype := b_barracks ;
80736: LD_ADDR_VAR 0 5
80740: PUSH
80741: LD_INT 5
80743: ST_TO_ADDR
// if btype = b_depot then
80744: LD_VAR 0 5
80748: PUSH
80749: LD_INT 0
80751: EQUAL
80752: IFFALSE 80762
// btype := b_warehouse ;
80754: LD_ADDR_VAR 0 5
80758: PUSH
80759: LD_INT 1
80761: ST_TO_ADDR
// if btype = b_workshop then
80762: LD_VAR 0 5
80766: PUSH
80767: LD_INT 2
80769: EQUAL
80770: IFFALSE 80780
// btype := b_factory ;
80772: LD_ADDR_VAR 0 5
80776: PUSH
80777: LD_INT 3
80779: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
80780: LD_VAR 0 5
80784: PPUSH
80785: LD_VAR 0 8
80789: PPUSH
80790: CALL_OW 323
80794: PUSH
80795: LD_INT 1
80797: EQUAL
80798: IFFALSE 80844
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
80800: LD_ADDR_EXP 84
80804: PUSH
80805: LD_EXP 84
80809: PPUSH
80810: LD_VAR 0 3
80814: PUSH
80815: LD_EXP 84
80819: PUSH
80820: LD_VAR 0 3
80824: ARRAY
80825: PUSH
80826: LD_INT 1
80828: PLUS
80829: PUSH
80830: EMPTY
80831: LIST
80832: LIST
80833: PPUSH
80834: LD_VAR 0 1
80838: PPUSH
80839: CALL 16713 0 3
80843: ST_TO_ADDR
// exit ;
80844: POP
80845: POP
80846: GO 81161
// end ; if btype in [ b_bunker , b_turret ] then
80848: LD_VAR 0 5
80852: PUSH
80853: LD_INT 32
80855: PUSH
80856: LD_INT 33
80858: PUSH
80859: EMPTY
80860: LIST
80861: LIST
80862: IN
80863: IFFALSE 81153
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
80865: LD_ADDR_EXP 60
80869: PUSH
80870: LD_EXP 60
80874: PPUSH
80875: LD_VAR 0 3
80879: PUSH
80880: LD_EXP 60
80884: PUSH
80885: LD_VAR 0 3
80889: ARRAY
80890: PUSH
80891: LD_INT 1
80893: PLUS
80894: PUSH
80895: EMPTY
80896: LIST
80897: LIST
80898: PPUSH
80899: LD_VAR 0 1
80903: PPUSH
80904: CALL 16713 0 3
80908: ST_TO_ADDR
// if btype = b_bunker then
80909: LD_VAR 0 5
80913: PUSH
80914: LD_INT 32
80916: EQUAL
80917: IFFALSE 81153
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
80919: LD_ADDR_EXP 61
80923: PUSH
80924: LD_EXP 61
80928: PPUSH
80929: LD_VAR 0 3
80933: PUSH
80934: LD_EXP 61
80938: PUSH
80939: LD_VAR 0 3
80943: ARRAY
80944: PUSH
80945: LD_INT 1
80947: PLUS
80948: PUSH
80949: EMPTY
80950: LIST
80951: LIST
80952: PPUSH
80953: LD_VAR 0 1
80957: PPUSH
80958: CALL 16713 0 3
80962: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
80963: LD_ADDR_VAR 0 6
80967: PUSH
80968: LD_EXP 52
80972: PUSH
80973: LD_VAR 0 3
80977: ARRAY
80978: PPUSH
80979: LD_INT 25
80981: PUSH
80982: LD_INT 1
80984: PUSH
80985: EMPTY
80986: LIST
80987: LIST
80988: PUSH
80989: LD_INT 3
80991: PUSH
80992: LD_INT 54
80994: PUSH
80995: EMPTY
80996: LIST
80997: PUSH
80998: EMPTY
80999: LIST
81000: LIST
81001: PUSH
81002: EMPTY
81003: LIST
81004: LIST
81005: PPUSH
81006: CALL_OW 72
81010: ST_TO_ADDR
// if tmp then
81011: LD_VAR 0 6
81015: IFFALSE 81021
// exit ;
81017: POP
81018: POP
81019: GO 81161
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
81021: LD_ADDR_VAR 0 6
81025: PUSH
81026: LD_EXP 52
81030: PUSH
81031: LD_VAR 0 3
81035: ARRAY
81036: PPUSH
81037: LD_INT 2
81039: PUSH
81040: LD_INT 30
81042: PUSH
81043: LD_INT 4
81045: PUSH
81046: EMPTY
81047: LIST
81048: LIST
81049: PUSH
81050: LD_INT 30
81052: PUSH
81053: LD_INT 5
81055: PUSH
81056: EMPTY
81057: LIST
81058: LIST
81059: PUSH
81060: EMPTY
81061: LIST
81062: LIST
81063: LIST
81064: PPUSH
81065: CALL_OW 72
81069: ST_TO_ADDR
// if not tmp then
81070: LD_VAR 0 6
81074: NOT
81075: IFFALSE 81081
// exit ;
81077: POP
81078: POP
81079: GO 81161
// for j in tmp do
81081: LD_ADDR_VAR 0 4
81085: PUSH
81086: LD_VAR 0 6
81090: PUSH
81091: FOR_IN
81092: IFFALSE 81151
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
81094: LD_ADDR_VAR 0 7
81098: PUSH
81099: LD_VAR 0 4
81103: PPUSH
81104: CALL_OW 313
81108: PPUSH
81109: LD_INT 25
81111: PUSH
81112: LD_INT 1
81114: PUSH
81115: EMPTY
81116: LIST
81117: LIST
81118: PPUSH
81119: CALL_OW 72
81123: ST_TO_ADDR
// if units then
81124: LD_VAR 0 7
81128: IFFALSE 81149
// begin ComExitBuilding ( units [ 1 ] ) ;
81130: LD_VAR 0 7
81134: PUSH
81135: LD_INT 1
81137: ARRAY
81138: PPUSH
81139: CALL_OW 122
// exit ;
81143: POP
81144: POP
81145: POP
81146: POP
81147: GO 81161
// end ; end ;
81149: GO 81091
81151: POP
81152: POP
// end ; end ; exit ;
81153: POP
81154: POP
81155: GO 81161
// end ; end ;
81157: GO 80515
81159: POP
81160: POP
// end ;
81161: LD_VAR 0 2
81165: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
81166: LD_INT 0
81168: PPUSH
81169: PPUSH
81170: PPUSH
81171: PPUSH
81172: PPUSH
81173: PPUSH
81174: PPUSH
// if not mc_bases or not skirmish then
81175: LD_EXP 52
81179: NOT
81180: PUSH
81181: LD_EXP 50
81185: NOT
81186: OR
81187: IFFALSE 81191
// exit ;
81189: GO 81422
// btype := GetBType ( building ) ;
81191: LD_ADDR_VAR 0 6
81195: PUSH
81196: LD_VAR 0 1
81200: PPUSH
81201: CALL_OW 266
81205: ST_TO_ADDR
// x := GetX ( building ) ;
81206: LD_ADDR_VAR 0 7
81210: PUSH
81211: LD_VAR 0 1
81215: PPUSH
81216: CALL_OW 250
81220: ST_TO_ADDR
// y := GetY ( building ) ;
81221: LD_ADDR_VAR 0 8
81225: PUSH
81226: LD_VAR 0 1
81230: PPUSH
81231: CALL_OW 251
81235: ST_TO_ADDR
// d := GetDir ( building ) ;
81236: LD_ADDR_VAR 0 9
81240: PUSH
81241: LD_VAR 0 1
81245: PPUSH
81246: CALL_OW 254
81250: ST_TO_ADDR
// for i = 1 to mc_bases do
81251: LD_ADDR_VAR 0 4
81255: PUSH
81256: DOUBLE
81257: LD_INT 1
81259: DEC
81260: ST_TO_ADDR
81261: LD_EXP 52
81265: PUSH
81266: FOR_TO
81267: IFFALSE 81420
// begin if not mc_build_list [ i ] then
81269: LD_EXP 57
81273: PUSH
81274: LD_VAR 0 4
81278: ARRAY
81279: NOT
81280: IFFALSE 81284
// continue ;
81282: GO 81266
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
81284: LD_VAR 0 6
81288: PUSH
81289: LD_VAR 0 7
81293: PUSH
81294: LD_VAR 0 8
81298: PUSH
81299: LD_VAR 0 9
81303: PUSH
81304: EMPTY
81305: LIST
81306: LIST
81307: LIST
81308: LIST
81309: PPUSH
81310: LD_EXP 57
81314: PUSH
81315: LD_VAR 0 4
81319: ARRAY
81320: PUSH
81321: LD_INT 1
81323: ARRAY
81324: PPUSH
81325: CALL 22882 0 2
81329: IFFALSE 81418
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
81331: LD_ADDR_EXP 57
81335: PUSH
81336: LD_EXP 57
81340: PPUSH
81341: LD_VAR 0 4
81345: PPUSH
81346: LD_EXP 57
81350: PUSH
81351: LD_VAR 0 4
81355: ARRAY
81356: PPUSH
81357: LD_INT 1
81359: PPUSH
81360: CALL_OW 3
81364: PPUSH
81365: CALL_OW 1
81369: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
81370: LD_ADDR_EXP 59
81374: PUSH
81375: LD_EXP 59
81379: PPUSH
81380: LD_VAR 0 4
81384: PUSH
81385: LD_EXP 59
81389: PUSH
81390: LD_VAR 0 4
81394: ARRAY
81395: PUSH
81396: LD_INT 1
81398: PLUS
81399: PUSH
81400: EMPTY
81401: LIST
81402: LIST
81403: PPUSH
81404: LD_VAR 0 1
81408: PPUSH
81409: CALL 16713 0 3
81413: ST_TO_ADDR
// exit ;
81414: POP
81415: POP
81416: GO 81422
// end ; end ;
81418: GO 81266
81420: POP
81421: POP
// end ;
81422: LD_VAR 0 3
81426: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
81427: LD_INT 0
81429: PPUSH
81430: PPUSH
81431: PPUSH
// if not mc_bases or not skirmish then
81432: LD_EXP 52
81436: NOT
81437: PUSH
81438: LD_EXP 50
81442: NOT
81443: OR
81444: IFFALSE 81448
// exit ;
81446: GO 81638
// for i = 1 to mc_bases do
81448: LD_ADDR_VAR 0 4
81452: PUSH
81453: DOUBLE
81454: LD_INT 1
81456: DEC
81457: ST_TO_ADDR
81458: LD_EXP 52
81462: PUSH
81463: FOR_TO
81464: IFFALSE 81551
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
81466: LD_VAR 0 1
81470: PUSH
81471: LD_EXP 60
81475: PUSH
81476: LD_VAR 0 4
81480: ARRAY
81481: IN
81482: PUSH
81483: LD_VAR 0 1
81487: PUSH
81488: LD_EXP 61
81492: PUSH
81493: LD_VAR 0 4
81497: ARRAY
81498: IN
81499: NOT
81500: AND
81501: IFFALSE 81549
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
81503: LD_ADDR_EXP 61
81507: PUSH
81508: LD_EXP 61
81512: PPUSH
81513: LD_VAR 0 4
81517: PUSH
81518: LD_EXP 61
81522: PUSH
81523: LD_VAR 0 4
81527: ARRAY
81528: PUSH
81529: LD_INT 1
81531: PLUS
81532: PUSH
81533: EMPTY
81534: LIST
81535: LIST
81536: PPUSH
81537: LD_VAR 0 1
81541: PPUSH
81542: CALL 16713 0 3
81546: ST_TO_ADDR
// break ;
81547: GO 81551
// end ; end ;
81549: GO 81463
81551: POP
81552: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
81553: LD_VAR 0 1
81557: PPUSH
81558: CALL_OW 257
81562: PUSH
81563: LD_EXP 78
81567: IN
81568: PUSH
81569: LD_VAR 0 1
81573: PPUSH
81574: CALL_OW 266
81578: PUSH
81579: LD_INT 5
81581: EQUAL
81582: AND
81583: PUSH
81584: LD_VAR 0 2
81588: PPUSH
81589: CALL_OW 110
81593: PUSH
81594: LD_INT 18
81596: NONEQUAL
81597: AND
81598: IFFALSE 81638
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
81600: LD_VAR 0 2
81604: PPUSH
81605: CALL_OW 257
81609: PUSH
81610: LD_INT 5
81612: PUSH
81613: LD_INT 8
81615: PUSH
81616: LD_INT 9
81618: PUSH
81619: EMPTY
81620: LIST
81621: LIST
81622: LIST
81623: IN
81624: IFFALSE 81638
// SetClass ( unit , 1 ) ;
81626: LD_VAR 0 2
81630: PPUSH
81631: LD_INT 1
81633: PPUSH
81634: CALL_OW 336
// end ;
81638: LD_VAR 0 3
81642: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
81643: LD_INT 0
81645: PPUSH
81646: PPUSH
// if not mc_bases or not skirmish then
81647: LD_EXP 52
81651: NOT
81652: PUSH
81653: LD_EXP 50
81657: NOT
81658: OR
81659: IFFALSE 81663
// exit ;
81661: GO 81779
// if GetLives ( abandoned_vehicle ) > 250 then
81663: LD_VAR 0 2
81667: PPUSH
81668: CALL_OW 256
81672: PUSH
81673: LD_INT 250
81675: GREATER
81676: IFFALSE 81680
// exit ;
81678: GO 81779
// for i = 1 to mc_bases do
81680: LD_ADDR_VAR 0 6
81684: PUSH
81685: DOUBLE
81686: LD_INT 1
81688: DEC
81689: ST_TO_ADDR
81690: LD_EXP 52
81694: PUSH
81695: FOR_TO
81696: IFFALSE 81777
// begin if driver in mc_bases [ i ] then
81698: LD_VAR 0 1
81702: PUSH
81703: LD_EXP 52
81707: PUSH
81708: LD_VAR 0 6
81712: ARRAY
81713: IN
81714: IFFALSE 81775
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
81716: LD_VAR 0 1
81720: PPUSH
81721: LD_EXP 52
81725: PUSH
81726: LD_VAR 0 6
81730: ARRAY
81731: PPUSH
81732: LD_INT 2
81734: PUSH
81735: LD_INT 30
81737: PUSH
81738: LD_INT 0
81740: PUSH
81741: EMPTY
81742: LIST
81743: LIST
81744: PUSH
81745: LD_INT 30
81747: PUSH
81748: LD_INT 1
81750: PUSH
81751: EMPTY
81752: LIST
81753: LIST
81754: PUSH
81755: EMPTY
81756: LIST
81757: LIST
81758: LIST
81759: PPUSH
81760: CALL_OW 72
81764: PUSH
81765: LD_INT 1
81767: ARRAY
81768: PPUSH
81769: CALL_OW 112
// break ;
81773: GO 81777
// end ; end ;
81775: GO 81695
81777: POP
81778: POP
// end ;
81779: LD_VAR 0 5
81783: RET
